
arduino-noughts-and-crosses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014428  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000074  00014428  00014428  00024428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002a0  20000000  0001449c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000ce8  200002a0  0001473c  000302a0  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
  6 .debug_info   000a0964  00000000  00000000  00030321  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000aa57  00000000  00000000  000d0c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000acda  00000000  00000000  000db6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001c00  00000000  00000000  000e63b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001c80  00000000  00000000  000e7fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021386  00000000  00000000  000e9c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a060  00000000  00000000  0010afbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00087905  00000000  00000000  0012501c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00007868  00000000  00000000  001ac924  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stab         000000cc  00000000  00000000  001b418c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      000001b9  00000000  00000000  001b4258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 80 00 20 25 2d 00 00 1d 2d 00 00 1d 2d 00 00     ... %-...-...-..
	...
      2c:	1d 2d 00 00 00 00 00 00 00 00 00 00 1d 2d 00 00     .-...........-..
      3c:	a9 2d 00 00 1d 2d 00 00 1d 2d 00 00 1d 2d 00 00     .-...-...-...-..
      4c:	1d 2d 00 00 1d 2d 00 00 1d 2d 00 00 1d 2d 00 00     .-...-...-...-..
      5c:	c1 2d 00 00 1d 2d 00 00 4d c1 00 00 1d 2d 00 00     .-...-..M....-..
      6c:	1d 2d 00 00 15 bf 00 00 1d 2d 00 00 65 c1 00 00     .-.......-..e...
      7c:	1d 2d 00 00 1d 2d 00 00 1d 2d 00 00 1d 2d 00 00     .-...-...-...-..
      8c:	1d 2d 00 00 00 00 00 00 1d 2d 00 00 1d 2d 00 00     .-.......-...-..
      9c:	1d 2d 00 00 1d 2d 00 00 1d 2d 00 00 1d 2d 00 00     .-...-...-...-..
      ac:	1d 2d 00 00 00 00 00 00                             .-......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002a0 	.word	0x200002a0
      d4:	00000000 	.word	0x00000000
      d8:	00014424 	.word	0x00014424

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002a4 	.word	0x200002a4
     108:	00014424 	.word	0x00014424
     10c:	2000029c 	.word	0x2000029c
     110:	00000000 	.word	0x00000000

00000114 <_Z6read16RN5SDLib4FileE>:

// These read 16-bit and 32-bit types from the SD card file.
// BMP data is stored little-endian, Arduino is little-endian too.
// May need to reverse subscript order if porting elsewhere.

uint16_t read16(File &f) {
     114:	b590      	push	{r4, r7, lr}
     116:	b085      	sub	sp, #20
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	uint16_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     11c:	230e      	movs	r3, #14
     11e:	18fc      	adds	r4, r7, r3
     120:	687b      	ldr	r3, [r7, #4]
     122:	681b      	ldr	r3, [r3, #0]
     124:	3314      	adds	r3, #20
     126:	681b      	ldr	r3, [r3, #0]
     128:	687a      	ldr	r2, [r7, #4]
     12a:	0010      	movs	r0, r2
     12c:	4798      	blx	r3
     12e:	0003      	movs	r3, r0
     130:	b2db      	uxtb	r3, r3
     132:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read(); // MSB
     134:	230e      	movs	r3, #14
     136:	18fc      	adds	r4, r7, r3
     138:	3401      	adds	r4, #1
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	681b      	ldr	r3, [r3, #0]
     13e:	3314      	adds	r3, #20
     140:	681b      	ldr	r3, [r3, #0]
     142:	687a      	ldr	r2, [r7, #4]
     144:	0010      	movs	r0, r2
     146:	4798      	blx	r3
     148:	0003      	movs	r3, r0
     14a:	b2db      	uxtb	r3, r3
     14c:	7023      	strb	r3, [r4, #0]
	return result;
     14e:	230e      	movs	r3, #14
     150:	18fb      	adds	r3, r7, r3
     152:	881b      	ldrh	r3, [r3, #0]
}
     154:	0018      	movs	r0, r3
     156:	46bd      	mov	sp, r7
     158:	b005      	add	sp, #20
     15a:	bd90      	pop	{r4, r7, pc}

0000015c <_Z6read32RN5SDLib4FileE>:

uint32_t read32(File &f) {
     15c:	b590      	push	{r4, r7, lr}
     15e:	b085      	sub	sp, #20
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
	uint32_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     164:	230c      	movs	r3, #12
     166:	18fc      	adds	r4, r7, r3
     168:	687b      	ldr	r3, [r7, #4]
     16a:	681b      	ldr	r3, [r3, #0]
     16c:	3314      	adds	r3, #20
     16e:	681b      	ldr	r3, [r3, #0]
     170:	687a      	ldr	r2, [r7, #4]
     172:	0010      	movs	r0, r2
     174:	4798      	blx	r3
     176:	0003      	movs	r3, r0
     178:	b2db      	uxtb	r3, r3
     17a:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read();
     17c:	230c      	movs	r3, #12
     17e:	18fc      	adds	r4, r7, r3
     180:	3401      	adds	r4, #1
     182:	687b      	ldr	r3, [r7, #4]
     184:	681b      	ldr	r3, [r3, #0]
     186:	3314      	adds	r3, #20
     188:	681b      	ldr	r3, [r3, #0]
     18a:	687a      	ldr	r2, [r7, #4]
     18c:	0010      	movs	r0, r2
     18e:	4798      	blx	r3
     190:	0003      	movs	r3, r0
     192:	b2db      	uxtb	r3, r3
     194:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[2] = f.read();
     196:	230c      	movs	r3, #12
     198:	18fc      	adds	r4, r7, r3
     19a:	3402      	adds	r4, #2
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	3314      	adds	r3, #20
     1a2:	681b      	ldr	r3, [r3, #0]
     1a4:	687a      	ldr	r2, [r7, #4]
     1a6:	0010      	movs	r0, r2
     1a8:	4798      	blx	r3
     1aa:	0003      	movs	r3, r0
     1ac:	b2db      	uxtb	r3, r3
     1ae:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[3] = f.read(); // MSB
     1b0:	230c      	movs	r3, #12
     1b2:	18fc      	adds	r4, r7, r3
     1b4:	3403      	adds	r4, #3
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	3314      	adds	r3, #20
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	687a      	ldr	r2, [r7, #4]
     1c0:	0010      	movs	r0, r2
     1c2:	4798      	blx	r3
     1c4:	0003      	movs	r3, r0
     1c6:	b2db      	uxtb	r3, r3
     1c8:	7023      	strb	r3, [r4, #0]
	return result;
     1ca:	68fb      	ldr	r3, [r7, #12]
}
     1cc:	0018      	movs	r0, r3
     1ce:	46bd      	mov	sp, r7
     1d0:	b005      	add	sp, #20
     1d2:	bd90      	pop	{r4, r7, pc}

000001d4 <_ZN5PrintaSEOS_>:
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     1d4:	b580      	push	{r7, lr}
     1d6:	b082      	sub	sp, #8
     1d8:	af00      	add	r7, sp, #0
     1da:	6078      	str	r0, [r7, #4]
     1dc:	6039      	str	r1, [r7, #0]
     1de:	683b      	ldr	r3, [r7, #0]
     1e0:	685a      	ldr	r2, [r3, #4]
     1e2:	687b      	ldr	r3, [r7, #4]
     1e4:	605a      	str	r2, [r3, #4]
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	0018      	movs	r0, r3
     1ea:	46bd      	mov	sp, r7
     1ec:	b002      	add	sp, #8
     1ee:	bd80      	pop	{r7, pc}

000001f0 <_ZN6StreamaSEOS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     1f0:	b580      	push	{r7, lr}
     1f2:	b082      	sub	sp, #8
     1f4:	af00      	add	r7, sp, #0
     1f6:	6078      	str	r0, [r7, #4]
     1f8:	6039      	str	r1, [r7, #0]
     1fa:	687b      	ldr	r3, [r7, #4]
     1fc:	683a      	ldr	r2, [r7, #0]
     1fe:	0011      	movs	r1, r2
     200:	0018      	movs	r0, r3
     202:	f7ff ffe7 	bl	1d4 <_ZN5PrintaSEOS_>
     206:	683b      	ldr	r3, [r7, #0]
     208:	689a      	ldr	r2, [r3, #8]
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	609a      	str	r2, [r3, #8]
     20e:	683b      	ldr	r3, [r7, #0]
     210:	68da      	ldr	r2, [r3, #12]
     212:	687b      	ldr	r3, [r7, #4]
     214:	60da      	str	r2, [r3, #12]
     216:	687b      	ldr	r3, [r7, #4]
     218:	0018      	movs	r0, r3
     21a:	46bd      	mov	sp, r7
     21c:	b002      	add	sp, #8
     21e:	bd80      	pop	{r7, pc}

00000220 <_ZN5SDLib4FileaSEOS0_>:
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
     220:	b580      	push	{r7, lr}
     222:	b082      	sub	sp, #8
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
     228:	6039      	str	r1, [r7, #0]
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	683a      	ldr	r2, [r7, #0]
     22e:	0011      	movs	r1, r2
     230:	0018      	movs	r0, r3
     232:	f7ff ffdd 	bl	1f0 <_ZN6StreamaSEOS_>
     236:	687b      	ldr	r3, [r7, #4]
     238:	3310      	adds	r3, #16
     23a:	0019      	movs	r1, r3
     23c:	220c      	movs	r2, #12
     23e:	683b      	ldr	r3, [r7, #0]
     240:	3310      	adds	r3, #16
     242:	2a00      	cmp	r2, #0
     244:	db05      	blt.n	252 <_ZN5SDLib4FileaSEOS0_+0x32>
     246:	7818      	ldrb	r0, [r3, #0]
     248:	7008      	strb	r0, [r1, #0]
     24a:	3101      	adds	r1, #1
     24c:	3301      	adds	r3, #1
     24e:	3a01      	subs	r2, #1
     250:	e7f7      	b.n	242 <_ZN5SDLib4FileaSEOS0_+0x22>
     252:	683b      	ldr	r3, [r7, #0]
     254:	6a1a      	ldr	r2, [r3, #32]
     256:	687b      	ldr	r3, [r7, #4]
     258:	621a      	str	r2, [r3, #32]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	0018      	movs	r0, r3
     25e:	46bd      	mov	sp, r7
     260:	b002      	add	sp, #8
     262:	bd80      	pop	{r7, pc}

00000264 <_Z10drawBitmapcss>:

void drawBitmap(char fileInput, int16_t x, int16_t y) {
     264:	b590      	push	{r4, r7, lr}
     266:	b0eb      	sub	sp, #428	; 0x1ac
     268:	af02      	add	r7, sp, #8
     26a:	0004      	movs	r4, r0
     26c:	0008      	movs	r0, r1
     26e:	0011      	movs	r1, r2
     270:	4bbb      	ldr	r3, [pc, #748]	; (560 <_Z10drawBitmapcss+0x2fc>)
     272:	22d0      	movs	r2, #208	; 0xd0
     274:	0052      	lsls	r2, r2, #1
     276:	4694      	mov	ip, r2
     278:	44bc      	add	ip, r7
     27a:	4463      	add	r3, ip
     27c:	1c22      	adds	r2, r4, #0
     27e:	701a      	strb	r2, [r3, #0]
     280:	4bb8      	ldr	r3, [pc, #736]	; (564 <_Z10drawBitmapcss+0x300>)
     282:	22d0      	movs	r2, #208	; 0xd0
     284:	0052      	lsls	r2, r2, #1
     286:	4694      	mov	ip, r2
     288:	44bc      	add	ip, r7
     28a:	4463      	add	r3, ip
     28c:	1c02      	adds	r2, r0, #0
     28e:	801a      	strh	r2, [r3, #0]
     290:	4bb5      	ldr	r3, [pc, #724]	; (568 <_Z10drawBitmapcss+0x304>)
     292:	22d0      	movs	r2, #208	; 0xd0
     294:	0052      	lsls	r2, r2, #1
     296:	4694      	mov	ip, r2
     298:	44bc      	add	ip, r7
     29a:	4463      	add	r3, ip
     29c:	1c0a      	adds	r2, r1, #0
     29e:	801a      	strh	r2, [r3, #0]

	File bmpFile;
     2a0:	238a      	movs	r3, #138	; 0x8a
     2a2:	005b      	lsls	r3, r3, #1
     2a4:	18fb      	adds	r3, r7, r3
     2a6:	0018      	movs	r0, r3
     2a8:	f008 fb00 	bl	88ac <_ZN5SDLib4FileC1Ev>
	int bmpWidth, bmpHeight;   // W+H in pixels
	uint8_t bmpDepth;              // Bit depth (currently must be 24)
	uint32_t bmpImageoffset;        // Start of image data in file
	uint32_t rowSize;               // Not always = bmpWidth; may have padding
	uint8_t sdbuffer[3 * BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     2ac:	239c      	movs	r3, #156	; 0x9c
     2ae:	33ff      	adds	r3, #255	; 0xff
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	22ff      	movs	r2, #255	; 0xff
     2b4:	701a      	strb	r2, [r3, #0]
	boolean goodBmp = false;       // Set to true on valid header parse
     2b6:	23cd      	movs	r3, #205	; 0xcd
     2b8:	005b      	lsls	r3, r3, #1
     2ba:	18fb      	adds	r3, r7, r3
     2bc:	2200      	movs	r2, #0
     2be:	701a      	strb	r2, [r3, #0]
	boolean flip = true;        // BMP is stored bottom-to-top
     2c0:	239a      	movs	r3, #154	; 0x9a
     2c2:	33ff      	adds	r3, #255	; 0xff
     2c4:	18fb      	adds	r3, r7, r3
     2c6:	2201      	movs	r2, #1
     2c8:	701a      	strb	r2, [r3, #0]
	int w, h, row, col, x2, y2, bx1, by1;
	uint8_t r, g, b;
	uint32_t pos = 0, startTime = millis();
     2ca:	2300      	movs	r3, #0
     2cc:	22be      	movs	r2, #190	; 0xbe
     2ce:	0052      	lsls	r2, r2, #1
     2d0:	18ba      	adds	r2, r7, r2
     2d2:	6013      	str	r3, [r2, #0]
     2d4:	f002 fd90 	bl	2df8 <millis>
     2d8:	0003      	movs	r3, r0
     2da:	22bc      	movs	r2, #188	; 0xbc
     2dc:	0052      	lsls	r2, r2, #1
     2de:	18ba      	adds	r2, r7, r2
     2e0:	6013      	str	r3, [r2, #0]
	char filename[6] = {fileInput, '.', 'b', 'm', 'p'};
     2e2:	4ba2      	ldr	r3, [pc, #648]	; (56c <_Z10drawBitmapcss+0x308>)
     2e4:	22d0      	movs	r2, #208	; 0xd0
     2e6:	0052      	lsls	r2, r2, #1
     2e8:	4694      	mov	ip, r2
     2ea:	44bc      	add	ip, r7
     2ec:	4463      	add	r3, ip
     2ee:	0018      	movs	r0, r3
     2f0:	2306      	movs	r3, #6
     2f2:	001a      	movs	r2, r3
     2f4:	2100      	movs	r1, #0
     2f6:	f010 fa95 	bl	10824 <memset>
     2fa:	4b9c      	ldr	r3, [pc, #624]	; (56c <_Z10drawBitmapcss+0x308>)
     2fc:	22d0      	movs	r2, #208	; 0xd0
     2fe:	0052      	lsls	r2, r2, #1
     300:	4694      	mov	ip, r2
     302:	44bc      	add	ip, r7
     304:	4463      	add	r3, ip
     306:	222e      	movs	r2, #46	; 0x2e
     308:	705a      	strb	r2, [r3, #1]
     30a:	4b98      	ldr	r3, [pc, #608]	; (56c <_Z10drawBitmapcss+0x308>)
     30c:	22d0      	movs	r2, #208	; 0xd0
     30e:	0052      	lsls	r2, r2, #1
     310:	4694      	mov	ip, r2
     312:	44bc      	add	ip, r7
     314:	4463      	add	r3, ip
     316:	2262      	movs	r2, #98	; 0x62
     318:	709a      	strb	r2, [r3, #2]
     31a:	4b94      	ldr	r3, [pc, #592]	; (56c <_Z10drawBitmapcss+0x308>)
     31c:	22d0      	movs	r2, #208	; 0xd0
     31e:	0052      	lsls	r2, r2, #1
     320:	4694      	mov	ip, r2
     322:	44bc      	add	ip, r7
     324:	4463      	add	r3, ip
     326:	226d      	movs	r2, #109	; 0x6d
     328:	70da      	strb	r2, [r3, #3]
     32a:	4b90      	ldr	r3, [pc, #576]	; (56c <_Z10drawBitmapcss+0x308>)
     32c:	22d0      	movs	r2, #208	; 0xd0
     32e:	0052      	lsls	r2, r2, #1
     330:	4694      	mov	ip, r2
     332:	44bc      	add	ip, r7
     334:	4463      	add	r3, ip
     336:	2270      	movs	r2, #112	; 0x70
     338:	711a      	strb	r2, [r3, #4]
     33a:	4b8c      	ldr	r3, [pc, #560]	; (56c <_Z10drawBitmapcss+0x308>)
     33c:	22d0      	movs	r2, #208	; 0xd0
     33e:	0052      	lsls	r2, r2, #1
     340:	4694      	mov	ip, r2
     342:	44bc      	add	ip, r7
     344:	4463      	add	r3, ip
     346:	4a86      	ldr	r2, [pc, #536]	; (560 <_Z10drawBitmapcss+0x2fc>)
     348:	21d0      	movs	r1, #208	; 0xd0
     34a:	0049      	lsls	r1, r1, #1
     34c:	468c      	mov	ip, r1
     34e:	44bc      	add	ip, r7
     350:	4462      	add	r2, ip
     352:	7812      	ldrb	r2, [r2, #0]
     354:	701a      	strb	r2, [r3, #0]

	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     356:	4b86      	ldr	r3, [pc, #536]	; (570 <_Z10drawBitmapcss+0x30c>)
     358:	0018      	movs	r0, r3
     35a:	f00d f899 	bl	d490 <_ZNK12Adafruit_GFX5widthEv>
     35e:	0003      	movs	r3, r0
     360:	001a      	movs	r2, r3
     362:	4b80      	ldr	r3, [pc, #512]	; (564 <_Z10drawBitmapcss+0x300>)
     364:	21d0      	movs	r1, #208	; 0xd0
     366:	0049      	lsls	r1, r1, #1
     368:	468c      	mov	ip, r1
     36a:	44bc      	add	ip, r7
     36c:	4463      	add	r3, ip
     36e:	2100      	movs	r1, #0
     370:	5e5b      	ldrsh	r3, [r3, r1]
     372:	4293      	cmp	r3, r2
     374:	da0f      	bge.n	396 <_Z10drawBitmapcss+0x132>
     376:	4b7e      	ldr	r3, [pc, #504]	; (570 <_Z10drawBitmapcss+0x30c>)
     378:	0018      	movs	r0, r3
     37a:	f00d f894 	bl	d4a6 <_ZNK12Adafruit_GFX6heightEv>
     37e:	0003      	movs	r3, r0
     380:	001a      	movs	r2, r3
     382:	4b79      	ldr	r3, [pc, #484]	; (568 <_Z10drawBitmapcss+0x304>)
     384:	21d0      	movs	r1, #208	; 0xd0
     386:	0049      	lsls	r1, r1, #1
     388:	468c      	mov	ip, r1
     38a:	44bc      	add	ip, r7
     38c:	4463      	add	r3, ip
     38e:	2100      	movs	r1, #0
     390:	5e5b      	ldrsh	r3, [r3, r1]
     392:	4293      	cmp	r3, r2
     394:	db01      	blt.n	39a <_Z10drawBitmapcss+0x136>
     396:	2301      	movs	r3, #1
     398:	e000      	b.n	39c <_Z10drawBitmapcss+0x138>
     39a:	2300      	movs	r3, #0
     39c:	2b00      	cmp	r3, #0
     39e:	d000      	beq.n	3a2 <_Z10drawBitmapcss+0x13e>
     3a0:	e3ae      	b.n	b00 <_Z10drawBitmapcss+0x89c>

	Serial.println();
     3a2:	4b74      	ldr	r3, [pc, #464]	; (574 <_Z10drawBitmapcss+0x310>)
     3a4:	0018      	movs	r0, r3
     3a6:	f002 feb7 	bl	3118 <_ZN5Print7printlnEv>
	Serial.print(F("Loading image '"));
     3aa:	4a73      	ldr	r2, [pc, #460]	; (578 <_Z10drawBitmapcss+0x314>)
     3ac:	4b71      	ldr	r3, [pc, #452]	; (574 <_Z10drawBitmapcss+0x310>)
     3ae:	0011      	movs	r1, r2
     3b0:	0018      	movs	r0, r3
     3b2:	f002 fddc 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(filename);
     3b6:	230c      	movs	r3, #12
     3b8:	18fa      	adds	r2, r7, r3
     3ba:	4b6e      	ldr	r3, [pc, #440]	; (574 <_Z10drawBitmapcss+0x310>)
     3bc:	0011      	movs	r1, r2
     3be:	0018      	movs	r0, r3
     3c0:	f002 fde5 	bl	2f8e <_ZN5Print5printEPKc>
	Serial.println('\'');
     3c4:	4b6b      	ldr	r3, [pc, #428]	; (574 <_Z10drawBitmapcss+0x310>)
     3c6:	2127      	movs	r1, #39	; 0x27
     3c8:	0018      	movs	r0, r3
     3ca:	f002 fed1 	bl	3170 <_ZN5Print7printlnEc>

	// Todo (BROKEN)
	// Open requested file on SD card
	if ((bmpFile = SD.open(filename))) {
     3ce:	239c      	movs	r3, #156	; 0x9c
     3d0:	005b      	lsls	r3, r3, #1
     3d2:	18f8      	adds	r0, r7, r3
     3d4:	230c      	movs	r3, #12
     3d6:	18fa      	adds	r2, r7, r3
     3d8:	4968      	ldr	r1, [pc, #416]	; (57c <_Z10drawBitmapcss+0x318>)
     3da:	2301      	movs	r3, #1
     3dc:	f008 fd8e 	bl	8efc <_ZN5SDLib7SDClass4openEPKch>
     3e0:	239c      	movs	r3, #156	; 0x9c
     3e2:	005b      	lsls	r3, r3, #1
     3e4:	18fa      	adds	r2, r7, r3
     3e6:	238a      	movs	r3, #138	; 0x8a
     3e8:	005b      	lsls	r3, r3, #1
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	0011      	movs	r1, r2
     3ee:	0018      	movs	r0, r3
     3f0:	f7ff ff16 	bl	220 <_ZN5SDLib4FileaSEOS0_>
     3f4:	0003      	movs	r3, r0
     3f6:	0018      	movs	r0, r3
     3f8:	f008 fb9b 	bl	8b32 <_ZN5SDLib4FilecvbEv>
     3fc:	1e03      	subs	r3, r0, #0
     3fe:	d005      	beq.n	40c <_Z10drawBitmapcss+0x1a8>
		Serial.println(F("File (maybe) not found"));
     400:	4a5f      	ldr	r2, [pc, #380]	; (580 <_Z10drawBitmapcss+0x31c>)
     402:	4b5c      	ldr	r3, [pc, #368]	; (574 <_Z10drawBitmapcss+0x310>)
     404:	0011      	movs	r1, r2
     406:	0018      	movs	r0, r3
     408:	f002 fe6c 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
		// return;
	}

	// Parse BMP header
	Serial.println(F("Start parse"));
     40c:	4a5d      	ldr	r2, [pc, #372]	; (584 <_Z10drawBitmapcss+0x320>)
     40e:	4b59      	ldr	r3, [pc, #356]	; (574 <_Z10drawBitmapcss+0x310>)
     410:	0011      	movs	r1, r2
     412:	0018      	movs	r0, r3
     414:	f002 fe66 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     418:	238a      	movs	r3, #138	; 0x8a
     41a:	005b      	lsls	r3, r3, #1
     41c:	18fb      	adds	r3, r7, r3
     41e:	0018      	movs	r0, r3
     420:	f7ff fe78 	bl	114 <_Z6read16RN5SDLib4FileE>
     424:	0003      	movs	r3, r0
     426:	4a58      	ldr	r2, [pc, #352]	; (588 <_Z10drawBitmapcss+0x324>)
     428:	4694      	mov	ip, r2
     42a:	4463      	add	r3, ip
     42c:	425a      	negs	r2, r3
     42e:	4153      	adcs	r3, r2
     430:	b2db      	uxtb	r3, r3
     432:	2b00      	cmp	r3, #0
     434:	d100      	bne.n	438 <_Z10drawBitmapcss+0x1d4>
     436:	e349      	b.n	acc <_Z10drawBitmapcss+0x868>
		Serial.print(F("File size: "));
     438:	4a54      	ldr	r2, [pc, #336]	; (58c <_Z10drawBitmapcss+0x328>)
     43a:	4b4e      	ldr	r3, [pc, #312]	; (574 <_Z10drawBitmapcss+0x310>)
     43c:	0011      	movs	r1, r2
     43e:	0018      	movs	r0, r3
     440:	f002 fd95 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     444:	238a      	movs	r3, #138	; 0x8a
     446:	005b      	lsls	r3, r3, #1
     448:	18fb      	adds	r3, r7, r3
     44a:	0018      	movs	r0, r3
     44c:	f7ff fe86 	bl	15c <_Z6read32RN5SDLib4FileE>
     450:	0001      	movs	r1, r0
     452:	4b48      	ldr	r3, [pc, #288]	; (574 <_Z10drawBitmapcss+0x310>)
     454:	220a      	movs	r2, #10
     456:	0018      	movs	r0, r3
     458:	f002 fee2 	bl	3220 <_ZN5Print7printlnEmi>
		(void) read32(bmpFile); // Read & ignore creator bytes
     45c:	238a      	movs	r3, #138	; 0x8a
     45e:	005b      	lsls	r3, r3, #1
     460:	18fb      	adds	r3, r7, r3
     462:	0018      	movs	r0, r3
     464:	f7ff fe7a 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     468:	238a      	movs	r3, #138	; 0x8a
     46a:	005b      	lsls	r3, r3, #1
     46c:	18fb      	adds	r3, r7, r3
     46e:	0018      	movs	r0, r3
     470:	f7ff fe74 	bl	15c <_Z6read32RN5SDLib4FileE>
     474:	0003      	movs	r3, r0
     476:	22ba      	movs	r2, #186	; 0xba
     478:	0052      	lsls	r2, r2, #1
     47a:	18ba      	adds	r2, r7, r2
     47c:	6013      	str	r3, [r2, #0]
		Serial.print(F("Image Offset: "));
     47e:	4a44      	ldr	r2, [pc, #272]	; (590 <_Z10drawBitmapcss+0x32c>)
     480:	4b3c      	ldr	r3, [pc, #240]	; (574 <_Z10drawBitmapcss+0x310>)
     482:	0011      	movs	r1, r2
     484:	0018      	movs	r0, r3
     486:	f002 fd72 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(bmpImageoffset, DEC);
     48a:	23ba      	movs	r3, #186	; 0xba
     48c:	005b      	lsls	r3, r3, #1
     48e:	18fb      	adds	r3, r7, r3
     490:	6819      	ldr	r1, [r3, #0]
     492:	4b38      	ldr	r3, [pc, #224]	; (574 <_Z10drawBitmapcss+0x310>)
     494:	220a      	movs	r2, #10
     496:	0018      	movs	r0, r3
     498:	f002 fec2 	bl	3220 <_ZN5Print7printlnEmi>
		// Read DIB header
		Serial.print(F("Header size: "));
     49c:	4a3d      	ldr	r2, [pc, #244]	; (594 <_Z10drawBitmapcss+0x330>)
     49e:	4b35      	ldr	r3, [pc, #212]	; (574 <_Z10drawBitmapcss+0x310>)
     4a0:	0011      	movs	r1, r2
     4a2:	0018      	movs	r0, r3
     4a4:	f002 fd63 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     4a8:	238a      	movs	r3, #138	; 0x8a
     4aa:	005b      	lsls	r3, r3, #1
     4ac:	18fb      	adds	r3, r7, r3
     4ae:	0018      	movs	r0, r3
     4b0:	f7ff fe54 	bl	15c <_Z6read32RN5SDLib4FileE>
     4b4:	0001      	movs	r1, r0
     4b6:	4b2f      	ldr	r3, [pc, #188]	; (574 <_Z10drawBitmapcss+0x310>)
     4b8:	220a      	movs	r2, #10
     4ba:	0018      	movs	r0, r3
     4bc:	f002 feb0 	bl	3220 <_ZN5Print7printlnEmi>
		bmpWidth = read32(bmpFile);
     4c0:	238a      	movs	r3, #138	; 0x8a
     4c2:	005b      	lsls	r3, r3, #1
     4c4:	18fb      	adds	r3, r7, r3
     4c6:	0018      	movs	r0, r3
     4c8:	f7ff fe48 	bl	15c <_Z6read32RN5SDLib4FileE>
     4cc:	0003      	movs	r3, r0
     4ce:	22b8      	movs	r2, #184	; 0xb8
     4d0:	0052      	lsls	r2, r2, #1
     4d2:	18ba      	adds	r2, r7, r2
     4d4:	6013      	str	r3, [r2, #0]
		bmpHeight = read32(bmpFile);
     4d6:	238a      	movs	r3, #138	; 0x8a
     4d8:	005b      	lsls	r3, r3, #1
     4da:	18fb      	adds	r3, r7, r3
     4dc:	0018      	movs	r0, r3
     4de:	f7ff fe3d 	bl	15c <_Z6read32RN5SDLib4FileE>
     4e2:	0003      	movs	r3, r0
     4e4:	22ce      	movs	r2, #206	; 0xce
     4e6:	0052      	lsls	r2, r2, #1
     4e8:	18ba      	adds	r2, r7, r2
     4ea:	6013      	str	r3, [r2, #0]
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     4ec:	238a      	movs	r3, #138	; 0x8a
     4ee:	005b      	lsls	r3, r3, #1
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	0018      	movs	r0, r3
     4f4:	f7ff fe0e 	bl	114 <_Z6read16RN5SDLib4FileE>
     4f8:	0003      	movs	r3, r0
     4fa:	3b01      	subs	r3, #1
     4fc:	425a      	negs	r2, r3
     4fe:	4153      	adcs	r3, r2
     500:	b2db      	uxtb	r3, r3
     502:	2b00      	cmp	r3, #0
     504:	d100      	bne.n	508 <_Z10drawBitmapcss+0x2a4>
     506:	e2e1      	b.n	acc <_Z10drawBitmapcss+0x868>
			bmpDepth = read16(bmpFile); // bits per pixel
     508:	238a      	movs	r3, #138	; 0x8a
     50a:	005b      	lsls	r3, r3, #1
     50c:	18fb      	adds	r3, r7, r3
     50e:	0018      	movs	r0, r3
     510:	f7ff fe00 	bl	114 <_Z6read16RN5SDLib4FileE>
     514:	0003      	movs	r3, r0
     516:	001a      	movs	r2, r3
     518:	2370      	movs	r3, #112	; 0x70
     51a:	33ff      	adds	r3, #255	; 0xff
     51c:	18fb      	adds	r3, r7, r3
     51e:	701a      	strb	r2, [r3, #0]
			Serial.print(F("Bit Depth: "));
     520:	4a1d      	ldr	r2, [pc, #116]	; (598 <_Z10drawBitmapcss+0x334>)
     522:	4b14      	ldr	r3, [pc, #80]	; (574 <_Z10drawBitmapcss+0x310>)
     524:	0011      	movs	r1, r2
     526:	0018      	movs	r0, r3
     528:	f002 fd21 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(bmpDepth);
     52c:	2370      	movs	r3, #112	; 0x70
     52e:	33ff      	adds	r3, #255	; 0xff
     530:	18fb      	adds	r3, r7, r3
     532:	7819      	ldrb	r1, [r3, #0]
     534:	4b0f      	ldr	r3, [pc, #60]	; (574 <_Z10drawBitmapcss+0x310>)
     536:	220a      	movs	r2, #10
     538:	0018      	movs	r0, r3
     53a:	f002 fe36 	bl	31aa <_ZN5Print7printlnEhi>
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     53e:	2370      	movs	r3, #112	; 0x70
     540:	33ff      	adds	r3, #255	; 0xff
     542:	18fb      	adds	r3, r7, r3
     544:	781b      	ldrb	r3, [r3, #0]
     546:	2b18      	cmp	r3, #24
     548:	d128      	bne.n	59c <_Z10drawBitmapcss+0x338>
     54a:	238a      	movs	r3, #138	; 0x8a
     54c:	005b      	lsls	r3, r3, #1
     54e:	18fb      	adds	r3, r7, r3
     550:	0018      	movs	r0, r3
     552:	f7ff fe03 	bl	15c <_Z6read32RN5SDLib4FileE>
     556:	1e03      	subs	r3, r0, #0
     558:	d120      	bne.n	59c <_Z10drawBitmapcss+0x338>
     55a:	2301      	movs	r3, #1
     55c:	e01f      	b.n	59e <_Z10drawBitmapcss+0x33a>
     55e:	46c0      	nop			; (mov r8, r8)
     560:	fffffe67 	.word	0xfffffe67
     564:	fffffe64 	.word	0xfffffe64
     568:	fffffe62 	.word	0xfffffe62
     56c:	fffffe6c 	.word	0xfffffe6c
     570:	200002bc 	.word	0x200002bc
     574:	20000e94 	.word	0x20000e94
     578:	000131e4 	.word	0x000131e4
     57c:	200008f4 	.word	0x200008f4
     580:	000131f4 	.word	0x000131f4
     584:	0001320c 	.word	0x0001320c
     588:	ffffb2be 	.word	0xffffb2be
     58c:	00013218 	.word	0x00013218
     590:	00013224 	.word	0x00013224
     594:	00013234 	.word	0x00013234
     598:	00013244 	.word	0x00013244
     59c:	2300      	movs	r3, #0
     59e:	2b00      	cmp	r3, #0
     5a0:	d100      	bne.n	5a4 <_Z10drawBitmapcss+0x340>
     5a2:	e293      	b.n	acc <_Z10drawBitmapcss+0x868>

				goodBmp = true; // Supported BMP format -- proceed!
     5a4:	23cd      	movs	r3, #205	; 0xcd
     5a6:	005b      	lsls	r3, r3, #1
     5a8:	18fb      	adds	r3, r7, r3
     5aa:	2201      	movs	r2, #1
     5ac:	701a      	strb	r2, [r3, #0]
				Serial.print(F("Image size: "));
     5ae:	4ac0      	ldr	r2, [pc, #768]	; (8b0 <_Z10drawBitmapcss+0x64c>)
     5b0:	4bc0      	ldr	r3, [pc, #768]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5b2:	0011      	movs	r1, r2
     5b4:	0018      	movs	r0, r3
     5b6:	f002 fcda 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(bmpWidth);
     5ba:	23b8      	movs	r3, #184	; 0xb8
     5bc:	005b      	lsls	r3, r3, #1
     5be:	18fb      	adds	r3, r7, r3
     5c0:	6819      	ldr	r1, [r3, #0]
     5c2:	4bbc      	ldr	r3, [pc, #752]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5c4:	220a      	movs	r2, #10
     5c6:	0018      	movs	r0, r3
     5c8:	f002 fd1b 	bl	3002 <_ZN5Print5printEii>
				Serial.print('x');
     5cc:	4bb9      	ldr	r3, [pc, #740]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5ce:	2178      	movs	r1, #120	; 0x78
     5d0:	0018      	movs	r0, r3
     5d2:	f002 fcec 	bl	2fae <_ZN5Print5printEc>
				Serial.println(bmpHeight);
     5d6:	23ce      	movs	r3, #206	; 0xce
     5d8:	005b      	lsls	r3, r3, #1
     5da:	18fb      	adds	r3, r7, r3
     5dc:	6819      	ldr	r1, [r3, #0]
     5de:	4bb5      	ldr	r3, [pc, #724]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5e0:	220a      	movs	r2, #10
     5e2:	0018      	movs	r0, r3
     5e4:	f002 fe01 	bl	31ea <_ZN5Print7printlnEii>

				// BMP rows are padded (if needed) to 4-byte boundary
				rowSize = (bmpWidth * 3 + 3) & ~3;
     5e8:	23b8      	movs	r3, #184	; 0xb8
     5ea:	005b      	lsls	r3, r3, #1
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	681b      	ldr	r3, [r3, #0]
     5f0:	1c5a      	adds	r2, r3, #1
     5f2:	0013      	movs	r3, r2
     5f4:	005b      	lsls	r3, r3, #1
     5f6:	189b      	adds	r3, r3, r2
     5f8:	001a      	movs	r2, r3
     5fa:	2303      	movs	r3, #3
     5fc:	439a      	bics	r2, r3
     5fe:	0013      	movs	r3, r2
     600:	22b4      	movs	r2, #180	; 0xb4
     602:	0052      	lsls	r2, r2, #1
     604:	18ba      	adds	r2, r7, r2
     606:	6013      	str	r3, [r2, #0]

				// If bmpHeight is negative, image is in top-down order.
				// This is not canon but has been observed in the wild.
				if (bmpHeight < 0) {
     608:	23ce      	movs	r3, #206	; 0xce
     60a:	005b      	lsls	r3, r3, #1
     60c:	18fb      	adds	r3, r7, r3
     60e:	681b      	ldr	r3, [r3, #0]
     610:	2b00      	cmp	r3, #0
     612:	da0d      	bge.n	630 <_Z10drawBitmapcss+0x3cc>
					bmpHeight = -bmpHeight;
     614:	23ce      	movs	r3, #206	; 0xce
     616:	005b      	lsls	r3, r3, #1
     618:	18fb      	adds	r3, r7, r3
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	425b      	negs	r3, r3
     61e:	22ce      	movs	r2, #206	; 0xce
     620:	0052      	lsls	r2, r2, #1
     622:	18ba      	adds	r2, r7, r2
     624:	6013      	str	r3, [r2, #0]
					flip = false;
     626:	239a      	movs	r3, #154	; 0x9a
     628:	33ff      	adds	r3, #255	; 0xff
     62a:	18fb      	adds	r3, r7, r3
     62c:	2200      	movs	r2, #0
     62e:	701a      	strb	r2, [r3, #0]
				}

				// Crop area to be loaded
				x2 = x + bmpWidth - 1; // Lower-right corner
     630:	4ba1      	ldr	r3, [pc, #644]	; (8b8 <_Z10drawBitmapcss+0x654>)
     632:	22d0      	movs	r2, #208	; 0xd0
     634:	0052      	lsls	r2, r2, #1
     636:	4694      	mov	ip, r2
     638:	44bc      	add	ip, r7
     63a:	4463      	add	r3, ip
     63c:	2200      	movs	r2, #0
     63e:	5e9a      	ldrsh	r2, [r3, r2]
     640:	23b8      	movs	r3, #184	; 0xb8
     642:	005b      	lsls	r3, r3, #1
     644:	18fb      	adds	r3, r7, r3
     646:	681b      	ldr	r3, [r3, #0]
     648:	18d3      	adds	r3, r2, r3
     64a:	3b01      	subs	r3, #1
     64c:	22b2      	movs	r2, #178	; 0xb2
     64e:	0052      	lsls	r2, r2, #1
     650:	18ba      	adds	r2, r7, r2
     652:	6013      	str	r3, [r2, #0]
				y2 = y + bmpHeight - 1;
     654:	4b99      	ldr	r3, [pc, #612]	; (8bc <_Z10drawBitmapcss+0x658>)
     656:	22d0      	movs	r2, #208	; 0xd0
     658:	0052      	lsls	r2, r2, #1
     65a:	4694      	mov	ip, r2
     65c:	44bc      	add	ip, r7
     65e:	4463      	add	r3, ip
     660:	2200      	movs	r2, #0
     662:	5e9a      	ldrsh	r2, [r3, r2]
     664:	23ce      	movs	r3, #206	; 0xce
     666:	005b      	lsls	r3, r3, #1
     668:	18fb      	adds	r3, r7, r3
     66a:	681b      	ldr	r3, [r3, #0]
     66c:	18d3      	adds	r3, r2, r3
     66e:	3b01      	subs	r3, #1
     670:	22b0      	movs	r2, #176	; 0xb0
     672:	0052      	lsls	r2, r2, #1
     674:	18ba      	adds	r2, r7, r2
     676:	6013      	str	r3, [r2, #0]
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     678:	23b2      	movs	r3, #178	; 0xb2
     67a:	005b      	lsls	r3, r3, #1
     67c:	18fb      	adds	r3, r7, r3
     67e:	681b      	ldr	r3, [r3, #0]
     680:	2b00      	cmp	r3, #0
     682:	da00      	bge.n	686 <_Z10drawBitmapcss+0x422>
     684:	e209      	b.n	a9a <_Z10drawBitmapcss+0x836>
     686:	23b0      	movs	r3, #176	; 0xb0
     688:	005b      	lsls	r3, r3, #1
     68a:	18fb      	adds	r3, r7, r3
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	2b00      	cmp	r3, #0
     690:	da00      	bge.n	694 <_Z10drawBitmapcss+0x430>
     692:	e202      	b.n	a9a <_Z10drawBitmapcss+0x836>
					w = bmpWidth; // Width/height of section to load/display
     694:	23b8      	movs	r3, #184	; 0xb8
     696:	005b      	lsls	r3, r3, #1
     698:	18fb      	adds	r3, r7, r3
     69a:	681b      	ldr	r3, [r3, #0]
     69c:	22ca      	movs	r2, #202	; 0xca
     69e:	0052      	lsls	r2, r2, #1
     6a0:	18ba      	adds	r2, r7, r2
     6a2:	6013      	str	r3, [r2, #0]
					h = bmpHeight;
     6a4:	23ce      	movs	r3, #206	; 0xce
     6a6:	005b      	lsls	r3, r3, #1
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	22c8      	movs	r2, #200	; 0xc8
     6ae:	0052      	lsls	r2, r2, #1
     6b0:	18ba      	adds	r2, r7, r2
     6b2:	6013      	str	r3, [r2, #0]
					bx1 = by1 = 0; // UL coordinate in BMP file
     6b4:	2300      	movs	r3, #0
     6b6:	22c0      	movs	r2, #192	; 0xc0
     6b8:	0052      	lsls	r2, r2, #1
     6ba:	18ba      	adds	r2, r7, r2
     6bc:	6013      	str	r3, [r2, #0]
     6be:	23c0      	movs	r3, #192	; 0xc0
     6c0:	005b      	lsls	r3, r3, #1
     6c2:	18fb      	adds	r3, r7, r3
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	22c2      	movs	r2, #194	; 0xc2
     6c8:	0052      	lsls	r2, r2, #1
     6ca:	18ba      	adds	r2, r7, r2
     6cc:	6013      	str	r3, [r2, #0]
					if (x < 0) { // Clip left
     6ce:	4b7a      	ldr	r3, [pc, #488]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6d0:	22d0      	movs	r2, #208	; 0xd0
     6d2:	0052      	lsls	r2, r2, #1
     6d4:	4694      	mov	ip, r2
     6d6:	44bc      	add	ip, r7
     6d8:	4463      	add	r3, ip
     6da:	2200      	movs	r2, #0
     6dc:	5e9b      	ldrsh	r3, [r3, r2]
     6de:	2b00      	cmp	r3, #0
     6e0:	da1d      	bge.n	71e <_Z10drawBitmapcss+0x4ba>
						bx1 = -x;
     6e2:	4b75      	ldr	r3, [pc, #468]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6e4:	22d0      	movs	r2, #208	; 0xd0
     6e6:	0052      	lsls	r2, r2, #1
     6e8:	4694      	mov	ip, r2
     6ea:	44bc      	add	ip, r7
     6ec:	4463      	add	r3, ip
     6ee:	2200      	movs	r2, #0
     6f0:	5e9b      	ldrsh	r3, [r3, r2]
     6f2:	425b      	negs	r3, r3
     6f4:	22c2      	movs	r2, #194	; 0xc2
     6f6:	0052      	lsls	r2, r2, #1
     6f8:	18ba      	adds	r2, r7, r2
     6fa:	6013      	str	r3, [r2, #0]
						x = 0;
     6fc:	4b6e      	ldr	r3, [pc, #440]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6fe:	22d0      	movs	r2, #208	; 0xd0
     700:	0052      	lsls	r2, r2, #1
     702:	4694      	mov	ip, r2
     704:	44bc      	add	ip, r7
     706:	4463      	add	r3, ip
     708:	2200      	movs	r2, #0
     70a:	801a      	strh	r2, [r3, #0]
						w = x2 + 1;
     70c:	23b2      	movs	r3, #178	; 0xb2
     70e:	005b      	lsls	r3, r3, #1
     710:	18fb      	adds	r3, r7, r3
     712:	681b      	ldr	r3, [r3, #0]
     714:	3301      	adds	r3, #1
     716:	22ca      	movs	r2, #202	; 0xca
     718:	0052      	lsls	r2, r2, #1
     71a:	18ba      	adds	r2, r7, r2
     71c:	6013      	str	r3, [r2, #0]
					}
					if (y < 0) { // Clip top
     71e:	4b67      	ldr	r3, [pc, #412]	; (8bc <_Z10drawBitmapcss+0x658>)
     720:	22d0      	movs	r2, #208	; 0xd0
     722:	0052      	lsls	r2, r2, #1
     724:	4694      	mov	ip, r2
     726:	44bc      	add	ip, r7
     728:	4463      	add	r3, ip
     72a:	2200      	movs	r2, #0
     72c:	5e9b      	ldrsh	r3, [r3, r2]
     72e:	2b00      	cmp	r3, #0
     730:	da1d      	bge.n	76e <_Z10drawBitmapcss+0x50a>
						by1 = -y;
     732:	4b62      	ldr	r3, [pc, #392]	; (8bc <_Z10drawBitmapcss+0x658>)
     734:	22d0      	movs	r2, #208	; 0xd0
     736:	0052      	lsls	r2, r2, #1
     738:	4694      	mov	ip, r2
     73a:	44bc      	add	ip, r7
     73c:	4463      	add	r3, ip
     73e:	2200      	movs	r2, #0
     740:	5e9b      	ldrsh	r3, [r3, r2]
     742:	425b      	negs	r3, r3
     744:	22c0      	movs	r2, #192	; 0xc0
     746:	0052      	lsls	r2, r2, #1
     748:	18ba      	adds	r2, r7, r2
     74a:	6013      	str	r3, [r2, #0]
						y = 0;
     74c:	4b5b      	ldr	r3, [pc, #364]	; (8bc <_Z10drawBitmapcss+0x658>)
     74e:	22d0      	movs	r2, #208	; 0xd0
     750:	0052      	lsls	r2, r2, #1
     752:	4694      	mov	ip, r2
     754:	44bc      	add	ip, r7
     756:	4463      	add	r3, ip
     758:	2200      	movs	r2, #0
     75a:	801a      	strh	r2, [r3, #0]
						h = y2 + 1;
     75c:	23b0      	movs	r3, #176	; 0xb0
     75e:	005b      	lsls	r3, r3, #1
     760:	18fb      	adds	r3, r7, r3
     762:	681b      	ldr	r3, [r3, #0]
     764:	3301      	adds	r3, #1
     766:	22c8      	movs	r2, #200	; 0xc8
     768:	0052      	lsls	r2, r2, #1
     76a:	18ba      	adds	r2, r7, r2
     76c:	6013      	str	r3, [r2, #0]
					}
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     76e:	4b54      	ldr	r3, [pc, #336]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     770:	0018      	movs	r0, r3
     772:	f00c fe8d 	bl	d490 <_ZNK12Adafruit_GFX5widthEv>
     776:	0003      	movs	r3, r0
     778:	001a      	movs	r2, r3
     77a:	23b2      	movs	r3, #178	; 0xb2
     77c:	005b      	lsls	r3, r3, #1
     77e:	18fb      	adds	r3, r7, r3
     780:	681b      	ldr	r3, [r3, #0]
     782:	0fd0      	lsrs	r0, r2, #31
     784:	17d9      	asrs	r1, r3, #31
     786:	4293      	cmp	r3, r2
     788:	4148      	adcs	r0, r1
     78a:	0003      	movs	r3, r0
     78c:	b2db      	uxtb	r3, r3
     78e:	2b00      	cmp	r3, #0
     790:	d012      	beq.n	7b8 <_Z10drawBitmapcss+0x554>
     792:	4b4b      	ldr	r3, [pc, #300]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     794:	0018      	movs	r0, r3
     796:	f00c fe7b 	bl	d490 <_ZNK12Adafruit_GFX5widthEv>
     79a:	0003      	movs	r3, r0
     79c:	001a      	movs	r2, r3
     79e:	4b46      	ldr	r3, [pc, #280]	; (8b8 <_Z10drawBitmapcss+0x654>)
     7a0:	21d0      	movs	r1, #208	; 0xd0
     7a2:	0049      	lsls	r1, r1, #1
     7a4:	468c      	mov	ip, r1
     7a6:	44bc      	add	ip, r7
     7a8:	4463      	add	r3, ip
     7aa:	2100      	movs	r1, #0
     7ac:	5e5b      	ldrsh	r3, [r3, r1]
     7ae:	1ad3      	subs	r3, r2, r3
     7b0:	22ca      	movs	r2, #202	; 0xca
     7b2:	0052      	lsls	r2, r2, #1
     7b4:	18ba      	adds	r2, r7, r2
     7b6:	6013      	str	r3, [r2, #0]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     7b8:	4b41      	ldr	r3, [pc, #260]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     7ba:	0018      	movs	r0, r3
     7bc:	f00c fe73 	bl	d4a6 <_ZNK12Adafruit_GFX6heightEv>
     7c0:	0003      	movs	r3, r0
     7c2:	001a      	movs	r2, r3
     7c4:	23b0      	movs	r3, #176	; 0xb0
     7c6:	005b      	lsls	r3, r3, #1
     7c8:	18fb      	adds	r3, r7, r3
     7ca:	681b      	ldr	r3, [r3, #0]
     7cc:	0fd0      	lsrs	r0, r2, #31
     7ce:	17d9      	asrs	r1, r3, #31
     7d0:	4293      	cmp	r3, r2
     7d2:	4148      	adcs	r0, r1
     7d4:	0003      	movs	r3, r0
     7d6:	b2db      	uxtb	r3, r3
     7d8:	2b00      	cmp	r3, #0
     7da:	d012      	beq.n	802 <_Z10drawBitmapcss+0x59e>
     7dc:	4b38      	ldr	r3, [pc, #224]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     7de:	0018      	movs	r0, r3
     7e0:	f00c fe61 	bl	d4a6 <_ZNK12Adafruit_GFX6heightEv>
     7e4:	0003      	movs	r3, r0
     7e6:	001a      	movs	r2, r3
     7e8:	4b34      	ldr	r3, [pc, #208]	; (8bc <_Z10drawBitmapcss+0x658>)
     7ea:	21d0      	movs	r1, #208	; 0xd0
     7ec:	0049      	lsls	r1, r1, #1
     7ee:	468c      	mov	ip, r1
     7f0:	44bc      	add	ip, r7
     7f2:	4463      	add	r3, ip
     7f4:	2100      	movs	r1, #0
     7f6:	5e5b      	ldrsh	r3, [r3, r1]
     7f8:	1ad3      	subs	r3, r2, r3
     7fa:	22c8      	movs	r2, #200	; 0xc8
     7fc:	0052      	lsls	r2, r2, #1
     7fe:	18ba      	adds	r2, r7, r2
     800:	6013      	str	r3, [r2, #0]

					// Set tftDisplay address window to clipped image bounds
					tftDisplay.startWrite(); // Requires start/end transaction now
     802:	4b2f      	ldr	r3, [pc, #188]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     804:	0018      	movs	r0, r3
     806:	f007 fb97 	bl	7f38 <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
     80a:	4b2b      	ldr	r3, [pc, #172]	; (8b8 <_Z10drawBitmapcss+0x654>)
     80c:	22d0      	movs	r2, #208	; 0xd0
     80e:	0052      	lsls	r2, r2, #1
     810:	4694      	mov	ip, r2
     812:	44bc      	add	ip, r7
     814:	4463      	add	r3, ip
     816:	8819      	ldrh	r1, [r3, #0]
     818:	4b28      	ldr	r3, [pc, #160]	; (8bc <_Z10drawBitmapcss+0x658>)
     81a:	22d0      	movs	r2, #208	; 0xd0
     81c:	0052      	lsls	r2, r2, #1
     81e:	4694      	mov	ip, r2
     820:	44bc      	add	ip, r7
     822:	4463      	add	r3, ip
     824:	881a      	ldrh	r2, [r3, #0]
     826:	23ca      	movs	r3, #202	; 0xca
     828:	005b      	lsls	r3, r3, #1
     82a:	18fb      	adds	r3, r7, r3
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	b29c      	uxth	r4, r3
     830:	23c8      	movs	r3, #200	; 0xc8
     832:	005b      	lsls	r3, r3, #1
     834:	18fb      	adds	r3, r7, r3
     836:	681b      	ldr	r3, [r3, #0]
     838:	b29b      	uxth	r3, r3
     83a:	4821      	ldr	r0, [pc, #132]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     83c:	9300      	str	r3, [sp, #0]
     83e:	0023      	movs	r3, r4
     840:	f007 fbe4 	bl	800c <_ZN16Adafruit_ILI934113setAddrWindowEtttt>

					for (row = 0; row < h; row++) { // For each scanline...
     844:	2300      	movs	r3, #0
     846:	22c6      	movs	r2, #198	; 0xc6
     848:	0052      	lsls	r2, r2, #1
     84a:	18ba      	adds	r2, r7, r2
     84c:	6013      	str	r3, [r2, #0]
     84e:	23c6      	movs	r3, #198	; 0xc6
     850:	005b      	lsls	r3, r3, #1
     852:	18fb      	adds	r3, r7, r3
     854:	681a      	ldr	r2, [r3, #0]
     856:	23c8      	movs	r3, #200	; 0xc8
     858:	005b      	lsls	r3, r3, #1
     85a:	18fb      	adds	r3, r7, r3
     85c:	681b      	ldr	r3, [r3, #0]
     85e:	429a      	cmp	r2, r3
     860:	db00      	blt.n	864 <_Z10drawBitmapcss+0x600>
     862:	e116      	b.n	a92 <_Z10drawBitmapcss+0x82e>
						// intensive to be doing this on every line, but this
						// method covers a lot of gritty details like cropping
						// and scanline padding.  Also, the seek only takes
						// place if the file position actually needs to change
						// (avoids a lot of cluster math in SD library).
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
     864:	239a      	movs	r3, #154	; 0x9a
     866:	33ff      	adds	r3, #255	; 0xff
     868:	18fb      	adds	r3, r7, r3
     86a:	781b      	ldrb	r3, [r3, #0]
     86c:	2b00      	cmp	r3, #0
     86e:	d029      	beq.n	8c4 <_Z10drawBitmapcss+0x660>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
     870:	23ce      	movs	r3, #206	; 0xce
     872:	005b      	lsls	r3, r3, #1
     874:	18fb      	adds	r3, r7, r3
     876:	681b      	ldr	r3, [r3, #0]
     878:	1e5a      	subs	r2, r3, #1
     87a:	23c6      	movs	r3, #198	; 0xc6
     87c:	005b      	lsls	r3, r3, #1
     87e:	18fb      	adds	r3, r7, r3
     880:	6819      	ldr	r1, [r3, #0]
     882:	23c0      	movs	r3, #192	; 0xc0
     884:	005b      	lsls	r3, r3, #1
     886:	18fb      	adds	r3, r7, r3
     888:	681b      	ldr	r3, [r3, #0]
     88a:	18cb      	adds	r3, r1, r3
     88c:	1ad3      	subs	r3, r2, r3
     88e:	001a      	movs	r2, r3
     890:	23b4      	movs	r3, #180	; 0xb4
     892:	005b      	lsls	r3, r3, #1
     894:	18fb      	adds	r3, r7, r3
     896:	681b      	ldr	r3, [r3, #0]
     898:	435a      	muls	r2, r3
     89a:	23ba      	movs	r3, #186	; 0xba
     89c:	005b      	lsls	r3, r3, #1
     89e:	18fb      	adds	r3, r7, r3
     8a0:	681b      	ldr	r3, [r3, #0]
     8a2:	18d3      	adds	r3, r2, r3
     8a4:	22be      	movs	r2, #190	; 0xbe
     8a6:	0052      	lsls	r2, r2, #1
     8a8:	18ba      	adds	r2, r7, r2
     8aa:	6013      	str	r3, [r2, #0]
     8ac:	e022      	b.n	8f4 <_Z10drawBitmapcss+0x690>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00013250 	.word	0x00013250
     8b4:	20000e94 	.word	0x20000e94
     8b8:	fffffe64 	.word	0xfffffe64
     8bc:	fffffe62 	.word	0xfffffe62
     8c0:	200002bc 	.word	0x200002bc
						else
						// Bitmap is stored top-to-bottom
						pos = bmpImageoffset + (row + by1) * rowSize;
     8c4:	23c6      	movs	r3, #198	; 0xc6
     8c6:	005b      	lsls	r3, r3, #1
     8c8:	18fb      	adds	r3, r7, r3
     8ca:	681a      	ldr	r2, [r3, #0]
     8cc:	23c0      	movs	r3, #192	; 0xc0
     8ce:	005b      	lsls	r3, r3, #1
     8d0:	18fb      	adds	r3, r7, r3
     8d2:	681b      	ldr	r3, [r3, #0]
     8d4:	18d3      	adds	r3, r2, r3
     8d6:	001a      	movs	r2, r3
     8d8:	23b4      	movs	r3, #180	; 0xb4
     8da:	005b      	lsls	r3, r3, #1
     8dc:	18fb      	adds	r3, r7, r3
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	435a      	muls	r2, r3
     8e2:	23ba      	movs	r3, #186	; 0xba
     8e4:	005b      	lsls	r3, r3, #1
     8e6:	18fb      	adds	r3, r7, r3
     8e8:	681b      	ldr	r3, [r3, #0]
     8ea:	18d3      	adds	r3, r2, r3
     8ec:	22be      	movs	r2, #190	; 0xbe
     8ee:	0052      	lsls	r2, r2, #1
     8f0:	18ba      	adds	r2, r7, r2
     8f2:	6013      	str	r3, [r2, #0]
						pos += bx1 * 3; // Factor in starting column (bx1)
     8f4:	23c2      	movs	r3, #194	; 0xc2
     8f6:	005b      	lsls	r3, r3, #1
     8f8:	18fb      	adds	r3, r7, r3
     8fa:	681a      	ldr	r2, [r3, #0]
     8fc:	0013      	movs	r3, r2
     8fe:	005b      	lsls	r3, r3, #1
     900:	189b      	adds	r3, r3, r2
     902:	001a      	movs	r2, r3
     904:	23be      	movs	r3, #190	; 0xbe
     906:	005b      	lsls	r3, r3, #1
     908:	18fb      	adds	r3, r7, r3
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	189b      	adds	r3, r3, r2
     90e:	22be      	movs	r2, #190	; 0xbe
     910:	0052      	lsls	r2, r2, #1
     912:	18ba      	adds	r2, r7, r2
     914:	6013      	str	r3, [r2, #0]
						if (bmpFile.position() != pos) { // Need seek?
     916:	238a      	movs	r3, #138	; 0x8a
     918:	005b      	lsls	r3, r3, #1
     91a:	18fb      	adds	r3, r7, r3
     91c:	0018      	movs	r0, r3
     91e:	f008 f8c6 	bl	8aae <_ZN5SDLib4File8positionEv>
     922:	0002      	movs	r2, r0
     924:	23be      	movs	r3, #190	; 0xbe
     926:	005b      	lsls	r3, r3, #1
     928:	18fb      	adds	r3, r7, r3
     92a:	681b      	ldr	r3, [r3, #0]
     92c:	1ad3      	subs	r3, r2, r3
     92e:	1e5a      	subs	r2, r3, #1
     930:	4193      	sbcs	r3, r2
     932:	b2db      	uxtb	r3, r3
     934:	2b00      	cmp	r3, #0
     936:	d017      	beq.n	968 <_Z10drawBitmapcss+0x704>
							tftDisplay.endWrite(); // End tftDisplay transaction
     938:	4b73      	ldr	r3, [pc, #460]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     93a:	0018      	movs	r0, r3
     93c:	f007 fb24 	bl	7f88 <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
     940:	23be      	movs	r3, #190	; 0xbe
     942:	005b      	lsls	r3, r3, #1
     944:	18fb      	adds	r3, r7, r3
     946:	681a      	ldr	r2, [r3, #0]
     948:	238a      	movs	r3, #138	; 0x8a
     94a:	005b      	lsls	r3, r3, #1
     94c:	18fb      	adds	r3, r7, r3
     94e:	0011      	movs	r1, r2
     950:	0018      	movs	r0, r3
     952:	f008 f892 	bl	8a7a <_ZN5SDLib4File4seekEm>
							buffidx = sizeof(sdbuffer); // Force buffer reload
     956:	239c      	movs	r3, #156	; 0x9c
     958:	33ff      	adds	r3, #255	; 0xff
     95a:	18fb      	adds	r3, r7, r3
     95c:	22ff      	movs	r2, #255	; 0xff
     95e:	701a      	strb	r2, [r3, #0]
							tftDisplay.startWrite(); // Start new tftDisplay transaction
     960:	4b69      	ldr	r3, [pc, #420]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     962:	0018      	movs	r0, r3
     964:	f007 fae8 	bl	7f38 <_ZN16Adafruit_ILI934110startWriteEv>
						}
						for (col = 0; col < w; col++) { // For each pixel...
     968:	2300      	movs	r3, #0
     96a:	22c4      	movs	r2, #196	; 0xc4
     96c:	0052      	lsls	r2, r2, #1
     96e:	18ba      	adds	r2, r7, r2
     970:	6013      	str	r3, [r2, #0]
     972:	23c4      	movs	r3, #196	; 0xc4
     974:	005b      	lsls	r3, r3, #1
     976:	18fb      	adds	r3, r7, r3
     978:	681a      	ldr	r2, [r3, #0]
     97a:	23ca      	movs	r3, #202	; 0xca
     97c:	005b      	lsls	r3, r3, #1
     97e:	18fb      	adds	r3, r7, r3
     980:	681b      	ldr	r3, [r3, #0]
     982:	429a      	cmp	r2, r3
     984:	da7b      	bge.n	a7e <_Z10drawBitmapcss+0x81a>
							// Time to read more pixel data?
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
     986:	239c      	movs	r3, #156	; 0x9c
     988:	33ff      	adds	r3, #255	; 0xff
     98a:	18fb      	adds	r3, r7, r3
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	2bff      	cmp	r3, #255	; 0xff
     990:	d115      	bne.n	9be <_Z10drawBitmapcss+0x75a>
								tftDisplay.endWrite(); // End tftDisplay transaction
     992:	4b5d      	ldr	r3, [pc, #372]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     994:	0018      	movs	r0, r3
     996:	f007 faf7 	bl	7f88 <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
     99a:	2314      	movs	r3, #20
     99c:	18f9      	adds	r1, r7, r3
     99e:	238a      	movs	r3, #138	; 0x8a
     9a0:	005b      	lsls	r3, r3, #1
     9a2:	18fb      	adds	r3, r7, r3
     9a4:	22ff      	movs	r2, #255	; 0xff
     9a6:	0018      	movs	r0, r3
     9a8:	f008 f819 	bl	89de <_ZN5SDLib4File4readEPvt>
								buffidx = 0; // Set index to beginning
     9ac:	239c      	movs	r3, #156	; 0x9c
     9ae:	33ff      	adds	r3, #255	; 0xff
     9b0:	18fb      	adds	r3, r7, r3
     9b2:	2200      	movs	r2, #0
     9b4:	701a      	strb	r2, [r3, #0]
								tftDisplay.startWrite(); // Start new tftDisplay transaction
     9b6:	4b54      	ldr	r3, [pc, #336]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     9b8:	0018      	movs	r0, r3
     9ba:	f007 fabd 	bl	7f38 <_ZN16Adafruit_ILI934110startWriteEv>
							}
							// Convert pixel from BMP to tftDisplay format, push to display
							b = sdbuffer[buffidx++];
     9be:	239c      	movs	r3, #156	; 0x9c
     9c0:	33ff      	adds	r3, #255	; 0xff
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	229c      	movs	r2, #156	; 0x9c
     9c8:	32ff      	adds	r2, #255	; 0xff
     9ca:	18ba      	adds	r2, r7, r2
     9cc:	1c59      	adds	r1, r3, #1
     9ce:	7011      	strb	r1, [r2, #0]
     9d0:	0019      	movs	r1, r3
     9d2:	2360      	movs	r3, #96	; 0x60
     9d4:	33ff      	adds	r3, #255	; 0xff
     9d6:	18fb      	adds	r3, r7, r3
     9d8:	4a4c      	ldr	r2, [pc, #304]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     9da:	20d0      	movs	r0, #208	; 0xd0
     9dc:	0040      	lsls	r0, r0, #1
     9de:	4684      	mov	ip, r0
     9e0:	44bc      	add	ip, r7
     9e2:	4462      	add	r2, ip
     9e4:	5c52      	ldrb	r2, [r2, r1]
     9e6:	701a      	strb	r2, [r3, #0]
							g = sdbuffer[buffidx++];
     9e8:	239c      	movs	r3, #156	; 0x9c
     9ea:	33ff      	adds	r3, #255	; 0xff
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	229c      	movs	r2, #156	; 0x9c
     9f2:	32ff      	adds	r2, #255	; 0xff
     9f4:	18ba      	adds	r2, r7, r2
     9f6:	1c59      	adds	r1, r3, #1
     9f8:	7011      	strb	r1, [r2, #0]
     9fa:	0019      	movs	r1, r3
     9fc:	23af      	movs	r3, #175	; 0xaf
     9fe:	005b      	lsls	r3, r3, #1
     a00:	18fb      	adds	r3, r7, r3
     a02:	4a42      	ldr	r2, [pc, #264]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     a04:	20d0      	movs	r0, #208	; 0xd0
     a06:	0040      	lsls	r0, r0, #1
     a08:	4684      	mov	ip, r0
     a0a:	44bc      	add	ip, r7
     a0c:	4462      	add	r2, ip
     a0e:	5c52      	ldrb	r2, [r2, r1]
     a10:	701a      	strb	r2, [r3, #0]
							r = sdbuffer[buffidx++];
     a12:	239c      	movs	r3, #156	; 0x9c
     a14:	33ff      	adds	r3, #255	; 0xff
     a16:	18fb      	adds	r3, r7, r3
     a18:	781b      	ldrb	r3, [r3, #0]
     a1a:	229c      	movs	r2, #156	; 0x9c
     a1c:	32ff      	adds	r2, #255	; 0xff
     a1e:	18ba      	adds	r2, r7, r2
     a20:	1c59      	adds	r1, r3, #1
     a22:	7011      	strb	r1, [r2, #0]
     a24:	0019      	movs	r1, r3
     a26:	235e      	movs	r3, #94	; 0x5e
     a28:	33ff      	adds	r3, #255	; 0xff
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	4a37      	ldr	r2, [pc, #220]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     a2e:	20d0      	movs	r0, #208	; 0xd0
     a30:	0040      	lsls	r0, r0, #1
     a32:	4684      	mov	ip, r0
     a34:	44bc      	add	ip, r7
     a36:	4462      	add	r2, ip
     a38:	5c52      	ldrb	r2, [r2, r1]
     a3a:	701a      	strb	r2, [r3, #0]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
     a3c:	2360      	movs	r3, #96	; 0x60
     a3e:	33ff      	adds	r3, #255	; 0xff
     a40:	18fb      	adds	r3, r7, r3
     a42:	781c      	ldrb	r4, [r3, #0]
     a44:	23af      	movs	r3, #175	; 0xaf
     a46:	005b      	lsls	r3, r3, #1
     a48:	18fb      	adds	r3, r7, r3
     a4a:	781a      	ldrb	r2, [r3, #0]
     a4c:	235e      	movs	r3, #94	; 0x5e
     a4e:	33ff      	adds	r3, #255	; 0xff
     a50:	18fb      	adds	r3, r7, r3
     a52:	7819      	ldrb	r1, [r3, #0]
     a54:	482c      	ldr	r0, [pc, #176]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a56:	0023      	movs	r3, r4
     a58:	f006 fe5e 	bl	7718 <_ZN16Adafruit_ILI93418color565Ehhh>
     a5c:	0003      	movs	r3, r0
     a5e:	001a      	movs	r2, r3
     a60:	4b29      	ldr	r3, [pc, #164]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a62:	0011      	movs	r1, r2
     a64:	0018      	movs	r0, r3
     a66:	f007 fb99 	bl	819c <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
     a6a:	23c4      	movs	r3, #196	; 0xc4
     a6c:	005b      	lsls	r3, r3, #1
     a6e:	18fb      	adds	r3, r7, r3
     a70:	681b      	ldr	r3, [r3, #0]
     a72:	3301      	adds	r3, #1
     a74:	22c4      	movs	r2, #196	; 0xc4
     a76:	0052      	lsls	r2, r2, #1
     a78:	18ba      	adds	r2, r7, r2
     a7a:	6013      	str	r3, [r2, #0]
     a7c:	e779      	b.n	972 <_Z10drawBitmapcss+0x70e>
					for (row = 0; row < h; row++) { // For each scanline...
     a7e:	23c6      	movs	r3, #198	; 0xc6
     a80:	005b      	lsls	r3, r3, #1
     a82:	18fb      	adds	r3, r7, r3
     a84:	681b      	ldr	r3, [r3, #0]
     a86:	3301      	adds	r3, #1
     a88:	22c6      	movs	r2, #198	; 0xc6
     a8a:	0052      	lsls	r2, r2, #1
     a8c:	18ba      	adds	r2, r7, r2
     a8e:	6013      	str	r3, [r2, #0]
     a90:	e6dd      	b.n	84e <_Z10drawBitmapcss+0x5ea>
						} // end pixel
					} // end scanline
					tftDisplay.endWrite(); // End last tftDisplay transaction
     a92:	4b1d      	ldr	r3, [pc, #116]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a94:	0018      	movs	r0, r3
     a96:	f007 fa77 	bl	7f88 <_ZN16Adafruit_ILI93418endWriteEv>
				} // end onscreen
				Serial.print(F("Loaded in "));
     a9a:	4a1d      	ldr	r2, [pc, #116]	; (b10 <_Z10drawBitmapcss+0x8ac>)
     a9c:	4b1d      	ldr	r3, [pc, #116]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     a9e:	0011      	movs	r1, r2
     aa0:	0018      	movs	r0, r3
     aa2:	f002 fa64 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(millis() - startTime);
     aa6:	f002 f9a7 	bl	2df8 <millis>
     aaa:	0002      	movs	r2, r0
     aac:	23bc      	movs	r3, #188	; 0xbc
     aae:	005b      	lsls	r3, r3, #1
     ab0:	18fb      	adds	r3, r7, r3
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	1ad1      	subs	r1, r2, r3
     ab6:	4b17      	ldr	r3, [pc, #92]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     ab8:	220a      	movs	r2, #10
     aba:	0018      	movs	r0, r3
     abc:	f002 faf3 	bl	30a6 <_ZN5Print5printEmi>
				Serial.println(F(" ms"));
     ac0:	4a15      	ldr	r2, [pc, #84]	; (b18 <_Z10drawBitmapcss+0x8b4>)
     ac2:	4b14      	ldr	r3, [pc, #80]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     ac4:	0011      	movs	r1, r2
     ac6:	0018      	movs	r0, r3
     ac8:	f002 fb0c 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
			} // end goodBmp
		}
	}

	bmpFile.close();
     acc:	238a      	movs	r3, #138	; 0x8a
     ace:	005b      	lsls	r3, r3, #1
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	0018      	movs	r0, r3
     ad4:	f008 f814 	bl	8b00 <_ZN5SDLib4File5closeEv>
	if (!goodBmp)
     ad8:	23cd      	movs	r3, #205	; 0xcd
     ada:	005b      	lsls	r3, r3, #1
     adc:	18fb      	adds	r3, r7, r3
     ade:	781b      	ldrb	r3, [r3, #0]
     ae0:	2201      	movs	r2, #1
     ae2:	4053      	eors	r3, r2
     ae4:	b2db      	uxtb	r3, r3
     ae6:	2b00      	cmp	r3, #0
     ae8:	d005      	beq.n	af6 <_Z10drawBitmapcss+0x892>
	Serial.println(F("BMP format not recognized or SD not mounted"));
     aea:	4a0c      	ldr	r2, [pc, #48]	; (b1c <_Z10drawBitmapcss+0x8b8>)
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     aee:	0011      	movs	r1, r2
     af0:	0018      	movs	r0, r3
     af2:	f002 faf7 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println();
     af6:	4b07      	ldr	r3, [pc, #28]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     af8:	0018      	movs	r0, r3
     afa:	f002 fb0d 	bl	3118 <_ZN5Print7printlnEv>
     afe:	e000      	b.n	b02 <_Z10drawBitmapcss+0x89e>
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     b00:	46c0      	nop			; (mov r8, r8)
}
     b02:	46bd      	mov	sp, r7
     b04:	b069      	add	sp, #420	; 0x1a4
     b06:	bd90      	pop	{r4, r7, pc}
     b08:	200002bc 	.word	0x200002bc
     b0c:	fffffe74 	.word	0xfffffe74
     b10:	00013260 	.word	0x00013260
     b14:	20000e94 	.word	0x20000e94
     b18:	0001326c 	.word	0x0001326c
     b1c:	00013270 	.word	0x00013270

00000b20 <_Z10drawBitmapPcss>:

void drawBitmap(char* filename, int16_t x, int16_t y) {
     b20:	b590      	push	{r4, r7, lr}
     b22:	b0e9      	sub	sp, #420	; 0x1a4
     b24:	af02      	add	r7, sp, #8
     b26:	6078      	str	r0, [r7, #4]
     b28:	0008      	movs	r0, r1
     b2a:	0011      	movs	r1, r2
     b2c:	4b99      	ldr	r3, [pc, #612]	; (d94 <_Z10drawBitmapPcss+0x274>)
     b2e:	22cc      	movs	r2, #204	; 0xcc
     b30:	0052      	lsls	r2, r2, #1
     b32:	4694      	mov	ip, r2
     b34:	44bc      	add	ip, r7
     b36:	4463      	add	r3, ip
     b38:	1c02      	adds	r2, r0, #0
     b3a:	801a      	strh	r2, [r3, #0]
     b3c:	4b96      	ldr	r3, [pc, #600]	; (d98 <_Z10drawBitmapPcss+0x278>)
     b3e:	22cc      	movs	r2, #204	; 0xcc
     b40:	0052      	lsls	r2, r2, #1
     b42:	4694      	mov	ip, r2
     b44:	44bc      	add	ip, r7
     b46:	4463      	add	r3, ip
     b48:	1c0a      	adds	r2, r1, #0
     b4a:	801a      	strh	r2, [r3, #0]

	File bmpFile;
     b4c:	2386      	movs	r3, #134	; 0x86
     b4e:	005b      	lsls	r3, r3, #1
     b50:	18fb      	adds	r3, r7, r3
     b52:	0018      	movs	r0, r3
     b54:	f007 feaa 	bl	88ac <_ZN5SDLib4FileC1Ev>
	int bmpWidth, bmpHeight;   // W+H in pixels
	uint8_t bmpDepth;              // Bit depth (currently must be 24)
	uint32_t bmpImageoffset;        // Start of image data in file
	uint32_t rowSize;               // Not always = bmpWidth; may have padding
	uint8_t sdbuffer[3 * BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     b58:	2394      	movs	r3, #148	; 0x94
     b5a:	33ff      	adds	r3, #255	; 0xff
     b5c:	18fb      	adds	r3, r7, r3
     b5e:	22ff      	movs	r2, #255	; 0xff
     b60:	701a      	strb	r2, [r3, #0]
	boolean goodBmp = false;       // Set to true on valid header parse
     b62:	23c9      	movs	r3, #201	; 0xc9
     b64:	005b      	lsls	r3, r3, #1
     b66:	18fb      	adds	r3, r7, r3
     b68:	2200      	movs	r2, #0
     b6a:	701a      	strb	r2, [r3, #0]
	boolean flip = true;        // BMP is stored bottom-to-top
     b6c:	2392      	movs	r3, #146	; 0x92
     b6e:	33ff      	adds	r3, #255	; 0xff
     b70:	18fb      	adds	r3, r7, r3
     b72:	2201      	movs	r2, #1
     b74:	701a      	strb	r2, [r3, #0]
	int w, h, row, col, x2, y2, bx1, by1;
	uint8_t r, g, b;
	uint32_t pos = 0, startTime = millis();
     b76:	2300      	movs	r3, #0
     b78:	22ba      	movs	r2, #186	; 0xba
     b7a:	0052      	lsls	r2, r2, #1
     b7c:	18ba      	adds	r2, r7, r2
     b7e:	6013      	str	r3, [r2, #0]
     b80:	f002 f93a 	bl	2df8 <millis>
     b84:	0003      	movs	r3, r0
     b86:	22b8      	movs	r2, #184	; 0xb8
     b88:	0052      	lsls	r2, r2, #1
     b8a:	18ba      	adds	r2, r7, r2
     b8c:	6013      	str	r3, [r2, #0]

	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     b8e:	4b83      	ldr	r3, [pc, #524]	; (d9c <_Z10drawBitmapPcss+0x27c>)
     b90:	0018      	movs	r0, r3
     b92:	f00c fc7d 	bl	d490 <_ZNK12Adafruit_GFX5widthEv>
     b96:	0003      	movs	r3, r0
     b98:	001a      	movs	r2, r3
     b9a:	4b7e      	ldr	r3, [pc, #504]	; (d94 <_Z10drawBitmapPcss+0x274>)
     b9c:	21cc      	movs	r1, #204	; 0xcc
     b9e:	0049      	lsls	r1, r1, #1
     ba0:	468c      	mov	ip, r1
     ba2:	44bc      	add	ip, r7
     ba4:	4463      	add	r3, ip
     ba6:	2100      	movs	r1, #0
     ba8:	5e5b      	ldrsh	r3, [r3, r1]
     baa:	4293      	cmp	r3, r2
     bac:	da0f      	bge.n	bce <_Z10drawBitmapPcss+0xae>
     bae:	4b7b      	ldr	r3, [pc, #492]	; (d9c <_Z10drawBitmapPcss+0x27c>)
     bb0:	0018      	movs	r0, r3
     bb2:	f00c fc78 	bl	d4a6 <_ZNK12Adafruit_GFX6heightEv>
     bb6:	0003      	movs	r3, r0
     bb8:	001a      	movs	r2, r3
     bba:	4b77      	ldr	r3, [pc, #476]	; (d98 <_Z10drawBitmapPcss+0x278>)
     bbc:	21cc      	movs	r1, #204	; 0xcc
     bbe:	0049      	lsls	r1, r1, #1
     bc0:	468c      	mov	ip, r1
     bc2:	44bc      	add	ip, r7
     bc4:	4463      	add	r3, ip
     bc6:	2100      	movs	r1, #0
     bc8:	5e5b      	ldrsh	r3, [r3, r1]
     bca:	4293      	cmp	r3, r2
     bcc:	db01      	blt.n	bd2 <_Z10drawBitmapPcss+0xb2>
     bce:	2301      	movs	r3, #1
     bd0:	e000      	b.n	bd4 <_Z10drawBitmapPcss+0xb4>
     bd2:	2300      	movs	r3, #0
     bd4:	2b00      	cmp	r3, #0
     bd6:	d000      	beq.n	bda <_Z10drawBitmapPcss+0xba>
     bd8:	e3a8      	b.n	132c <_Z10drawBitmapPcss+0x80c>

	Serial.println();
     bda:	4b71      	ldr	r3, [pc, #452]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bdc:	0018      	movs	r0, r3
     bde:	f002 fa9b 	bl	3118 <_ZN5Print7printlnEv>
	Serial.print(F("Loading image '"));
     be2:	4a70      	ldr	r2, [pc, #448]	; (da4 <_Z10drawBitmapPcss+0x284>)
     be4:	4b6e      	ldr	r3, [pc, #440]	; (da0 <_Z10drawBitmapPcss+0x280>)
     be6:	0011      	movs	r1, r2
     be8:	0018      	movs	r0, r3
     bea:	f002 f9c0 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(filename);
     bee:	687a      	ldr	r2, [r7, #4]
     bf0:	4b6b      	ldr	r3, [pc, #428]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bf2:	0011      	movs	r1, r2
     bf4:	0018      	movs	r0, r3
     bf6:	f002 f9ca 	bl	2f8e <_ZN5Print5printEPKc>
	Serial.println('\'');
     bfa:	4b69      	ldr	r3, [pc, #420]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bfc:	2127      	movs	r1, #39	; 0x27
     bfe:	0018      	movs	r0, r3
     c00:	f002 fab6 	bl	3170 <_ZN5Print7printlnEc>

	// Todo (BROKEN)
	// Open requested file on SD card
	if ((bmpFile = SD.open(filename))) {
     c04:	2398      	movs	r3, #152	; 0x98
     c06:	005b      	lsls	r3, r3, #1
     c08:	18f8      	adds	r0, r7, r3
     c0a:	687a      	ldr	r2, [r7, #4]
     c0c:	4966      	ldr	r1, [pc, #408]	; (da8 <_Z10drawBitmapPcss+0x288>)
     c0e:	2301      	movs	r3, #1
     c10:	f008 f974 	bl	8efc <_ZN5SDLib7SDClass4openEPKch>
     c14:	2398      	movs	r3, #152	; 0x98
     c16:	005b      	lsls	r3, r3, #1
     c18:	18fa      	adds	r2, r7, r3
     c1a:	2386      	movs	r3, #134	; 0x86
     c1c:	005b      	lsls	r3, r3, #1
     c1e:	18fb      	adds	r3, r7, r3
     c20:	0011      	movs	r1, r2
     c22:	0018      	movs	r0, r3
     c24:	f7ff fafc 	bl	220 <_ZN5SDLib4FileaSEOS0_>
     c28:	0003      	movs	r3, r0
     c2a:	0018      	movs	r0, r3
     c2c:	f007 ff81 	bl	8b32 <_ZN5SDLib4FilecvbEv>
     c30:	1e03      	subs	r3, r0, #0
     c32:	d005      	beq.n	c40 <_Z10drawBitmapPcss+0x120>
		Serial.println(F("File (maybe) not found"));
     c34:	4a5d      	ldr	r2, [pc, #372]	; (dac <_Z10drawBitmapPcss+0x28c>)
     c36:	4b5a      	ldr	r3, [pc, #360]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c38:	0011      	movs	r1, r2
     c3a:	0018      	movs	r0, r3
     c3c:	f002 fa52 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
		// return;
	}

	// Parse BMP header
	Serial.println(F("Start parse"));
     c40:	4a5b      	ldr	r2, [pc, #364]	; (db0 <_Z10drawBitmapPcss+0x290>)
     c42:	4b57      	ldr	r3, [pc, #348]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c44:	0011      	movs	r1, r2
     c46:	0018      	movs	r0, r3
     c48:	f002 fa4c 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     c4c:	2386      	movs	r3, #134	; 0x86
     c4e:	005b      	lsls	r3, r3, #1
     c50:	18fb      	adds	r3, r7, r3
     c52:	0018      	movs	r0, r3
     c54:	f7ff fa5e 	bl	114 <_Z6read16RN5SDLib4FileE>
     c58:	0003      	movs	r3, r0
     c5a:	4a56      	ldr	r2, [pc, #344]	; (db4 <_Z10drawBitmapPcss+0x294>)
     c5c:	4694      	mov	ip, r2
     c5e:	4463      	add	r3, ip
     c60:	425a      	negs	r2, r3
     c62:	4153      	adcs	r3, r2
     c64:	b2db      	uxtb	r3, r3
     c66:	2b00      	cmp	r3, #0
     c68:	d100      	bne.n	c6c <_Z10drawBitmapPcss+0x14c>
     c6a:	e345      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>
		Serial.print(F("File size: "));
     c6c:	4a52      	ldr	r2, [pc, #328]	; (db8 <_Z10drawBitmapPcss+0x298>)
     c6e:	4b4c      	ldr	r3, [pc, #304]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c70:	0011      	movs	r1, r2
     c72:	0018      	movs	r0, r3
     c74:	f002 f97b 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     c78:	2386      	movs	r3, #134	; 0x86
     c7a:	005b      	lsls	r3, r3, #1
     c7c:	18fb      	adds	r3, r7, r3
     c7e:	0018      	movs	r0, r3
     c80:	f7ff fa6c 	bl	15c <_Z6read32RN5SDLib4FileE>
     c84:	0001      	movs	r1, r0
     c86:	4b46      	ldr	r3, [pc, #280]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c88:	220a      	movs	r2, #10
     c8a:	0018      	movs	r0, r3
     c8c:	f002 fac8 	bl	3220 <_ZN5Print7printlnEmi>
		(void) read32(bmpFile); // Read & ignore creator bytes
     c90:	2386      	movs	r3, #134	; 0x86
     c92:	005b      	lsls	r3, r3, #1
     c94:	18fb      	adds	r3, r7, r3
     c96:	0018      	movs	r0, r3
     c98:	f7ff fa60 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     c9c:	2386      	movs	r3, #134	; 0x86
     c9e:	005b      	lsls	r3, r3, #1
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	0018      	movs	r0, r3
     ca4:	f7ff fa5a 	bl	15c <_Z6read32RN5SDLib4FileE>
     ca8:	0003      	movs	r3, r0
     caa:	22b6      	movs	r2, #182	; 0xb6
     cac:	0052      	lsls	r2, r2, #1
     cae:	18ba      	adds	r2, r7, r2
     cb0:	6013      	str	r3, [r2, #0]
		Serial.print(F("Image Offset: "));
     cb2:	4a42      	ldr	r2, [pc, #264]	; (dbc <_Z10drawBitmapPcss+0x29c>)
     cb4:	4b3a      	ldr	r3, [pc, #232]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cb6:	0011      	movs	r1, r2
     cb8:	0018      	movs	r0, r3
     cba:	f002 f958 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(bmpImageoffset, DEC);
     cbe:	23b6      	movs	r3, #182	; 0xb6
     cc0:	005b      	lsls	r3, r3, #1
     cc2:	18fb      	adds	r3, r7, r3
     cc4:	6819      	ldr	r1, [r3, #0]
     cc6:	4b36      	ldr	r3, [pc, #216]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cc8:	220a      	movs	r2, #10
     cca:	0018      	movs	r0, r3
     ccc:	f002 faa8 	bl	3220 <_ZN5Print7printlnEmi>
		// Read DIB header
		Serial.print(F("Header size: "));
     cd0:	4a3b      	ldr	r2, [pc, #236]	; (dc0 <_Z10drawBitmapPcss+0x2a0>)
     cd2:	4b33      	ldr	r3, [pc, #204]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cd4:	0011      	movs	r1, r2
     cd6:	0018      	movs	r0, r3
     cd8:	f002 f949 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     cdc:	2386      	movs	r3, #134	; 0x86
     cde:	005b      	lsls	r3, r3, #1
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	0018      	movs	r0, r3
     ce4:	f7ff fa3a 	bl	15c <_Z6read32RN5SDLib4FileE>
     ce8:	0001      	movs	r1, r0
     cea:	4b2d      	ldr	r3, [pc, #180]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cec:	220a      	movs	r2, #10
     cee:	0018      	movs	r0, r3
     cf0:	f002 fa96 	bl	3220 <_ZN5Print7printlnEmi>
		bmpWidth = read32(bmpFile);
     cf4:	2386      	movs	r3, #134	; 0x86
     cf6:	005b      	lsls	r3, r3, #1
     cf8:	18fb      	adds	r3, r7, r3
     cfa:	0018      	movs	r0, r3
     cfc:	f7ff fa2e 	bl	15c <_Z6read32RN5SDLib4FileE>
     d00:	0003      	movs	r3, r0
     d02:	22b4      	movs	r2, #180	; 0xb4
     d04:	0052      	lsls	r2, r2, #1
     d06:	18ba      	adds	r2, r7, r2
     d08:	6013      	str	r3, [r2, #0]
		bmpHeight = read32(bmpFile);
     d0a:	2386      	movs	r3, #134	; 0x86
     d0c:	005b      	lsls	r3, r3, #1
     d0e:	18fb      	adds	r3, r7, r3
     d10:	0018      	movs	r0, r3
     d12:	f7ff fa23 	bl	15c <_Z6read32RN5SDLib4FileE>
     d16:	0003      	movs	r3, r0
     d18:	22ca      	movs	r2, #202	; 0xca
     d1a:	0052      	lsls	r2, r2, #1
     d1c:	18ba      	adds	r2, r7, r2
     d1e:	6013      	str	r3, [r2, #0]
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     d20:	2386      	movs	r3, #134	; 0x86
     d22:	005b      	lsls	r3, r3, #1
     d24:	18fb      	adds	r3, r7, r3
     d26:	0018      	movs	r0, r3
     d28:	f7ff f9f4 	bl	114 <_Z6read16RN5SDLib4FileE>
     d2c:	0003      	movs	r3, r0
     d2e:	3b01      	subs	r3, #1
     d30:	425a      	negs	r2, r3
     d32:	4153      	adcs	r3, r2
     d34:	b2db      	uxtb	r3, r3
     d36:	2b00      	cmp	r3, #0
     d38:	d100      	bne.n	d3c <_Z10drawBitmapPcss+0x21c>
     d3a:	e2dd      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>
			bmpDepth = read16(bmpFile); // bits per pixel
     d3c:	2386      	movs	r3, #134	; 0x86
     d3e:	005b      	lsls	r3, r3, #1
     d40:	18fb      	adds	r3, r7, r3
     d42:	0018      	movs	r0, r3
     d44:	f7ff f9e6 	bl	114 <_Z6read16RN5SDLib4FileE>
     d48:	0003      	movs	r3, r0
     d4a:	001a      	movs	r2, r3
     d4c:	2368      	movs	r3, #104	; 0x68
     d4e:	33ff      	adds	r3, #255	; 0xff
     d50:	18fb      	adds	r3, r7, r3
     d52:	701a      	strb	r2, [r3, #0]
			Serial.print(F("Bit Depth: "));
     d54:	4a1b      	ldr	r2, [pc, #108]	; (dc4 <_Z10drawBitmapPcss+0x2a4>)
     d56:	4b12      	ldr	r3, [pc, #72]	; (da0 <_Z10drawBitmapPcss+0x280>)
     d58:	0011      	movs	r1, r2
     d5a:	0018      	movs	r0, r3
     d5c:	f002 f907 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(bmpDepth);
     d60:	2368      	movs	r3, #104	; 0x68
     d62:	33ff      	adds	r3, #255	; 0xff
     d64:	18fb      	adds	r3, r7, r3
     d66:	7819      	ldrb	r1, [r3, #0]
     d68:	4b0d      	ldr	r3, [pc, #52]	; (da0 <_Z10drawBitmapPcss+0x280>)
     d6a:	220a      	movs	r2, #10
     d6c:	0018      	movs	r0, r3
     d6e:	f002 fa1c 	bl	31aa <_ZN5Print7printlnEhi>
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     d72:	2368      	movs	r3, #104	; 0x68
     d74:	33ff      	adds	r3, #255	; 0xff
     d76:	18fb      	adds	r3, r7, r3
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	2b18      	cmp	r3, #24
     d7c:	d124      	bne.n	dc8 <_Z10drawBitmapPcss+0x2a8>
     d7e:	2386      	movs	r3, #134	; 0x86
     d80:	005b      	lsls	r3, r3, #1
     d82:	18fb      	adds	r3, r7, r3
     d84:	0018      	movs	r0, r3
     d86:	f7ff f9e9 	bl	15c <_Z6read32RN5SDLib4FileE>
     d8a:	1e03      	subs	r3, r0, #0
     d8c:	d11c      	bne.n	dc8 <_Z10drawBitmapPcss+0x2a8>
     d8e:	2301      	movs	r3, #1
     d90:	e01b      	b.n	dca <_Z10drawBitmapPcss+0x2aa>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	fffffe6a 	.word	0xfffffe6a
     d98:	fffffe68 	.word	0xfffffe68
     d9c:	200002bc 	.word	0x200002bc
     da0:	20000e94 	.word	0x20000e94
     da4:	000131e4 	.word	0x000131e4
     da8:	200008f4 	.word	0x200008f4
     dac:	000131f4 	.word	0x000131f4
     db0:	0001320c 	.word	0x0001320c
     db4:	ffffb2be 	.word	0xffffb2be
     db8:	00013218 	.word	0x00013218
     dbc:	00013224 	.word	0x00013224
     dc0:	00013234 	.word	0x00013234
     dc4:	00013244 	.word	0x00013244
     dc8:	2300      	movs	r3, #0
     dca:	2b00      	cmp	r3, #0
     dcc:	d100      	bne.n	dd0 <_Z10drawBitmapPcss+0x2b0>
     dce:	e293      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>

				goodBmp = true; // Supported BMP format -- proceed!
     dd0:	23c9      	movs	r3, #201	; 0xc9
     dd2:	005b      	lsls	r3, r3, #1
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	2201      	movs	r2, #1
     dd8:	701a      	strb	r2, [r3, #0]
				Serial.print(F("Image size: "));
     dda:	4ac0      	ldr	r2, [pc, #768]	; (10dc <_Z10drawBitmapPcss+0x5bc>)
     ddc:	4bc0      	ldr	r3, [pc, #768]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     dde:	0011      	movs	r1, r2
     de0:	0018      	movs	r0, r3
     de2:	f002 f8c4 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(bmpWidth);
     de6:	23b4      	movs	r3, #180	; 0xb4
     de8:	005b      	lsls	r3, r3, #1
     dea:	18fb      	adds	r3, r7, r3
     dec:	6819      	ldr	r1, [r3, #0]
     dee:	4bbc      	ldr	r3, [pc, #752]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     df0:	220a      	movs	r2, #10
     df2:	0018      	movs	r0, r3
     df4:	f002 f905 	bl	3002 <_ZN5Print5printEii>
				Serial.print('x');
     df8:	4bb9      	ldr	r3, [pc, #740]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     dfa:	2178      	movs	r1, #120	; 0x78
     dfc:	0018      	movs	r0, r3
     dfe:	f002 f8d6 	bl	2fae <_ZN5Print5printEc>
				Serial.println(bmpHeight);
     e02:	23ca      	movs	r3, #202	; 0xca
     e04:	005b      	lsls	r3, r3, #1
     e06:	18fb      	adds	r3, r7, r3
     e08:	6819      	ldr	r1, [r3, #0]
     e0a:	4bb5      	ldr	r3, [pc, #724]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     e0c:	220a      	movs	r2, #10
     e0e:	0018      	movs	r0, r3
     e10:	f002 f9eb 	bl	31ea <_ZN5Print7printlnEii>

				// BMP rows are padded (if needed) to 4-byte boundary
				rowSize = (bmpWidth * 3 + 3) & ~3;
     e14:	23b4      	movs	r3, #180	; 0xb4
     e16:	005b      	lsls	r3, r3, #1
     e18:	18fb      	adds	r3, r7, r3
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	1c5a      	adds	r2, r3, #1
     e1e:	0013      	movs	r3, r2
     e20:	005b      	lsls	r3, r3, #1
     e22:	189b      	adds	r3, r3, r2
     e24:	001a      	movs	r2, r3
     e26:	2303      	movs	r3, #3
     e28:	439a      	bics	r2, r3
     e2a:	0013      	movs	r3, r2
     e2c:	22b0      	movs	r2, #176	; 0xb0
     e2e:	0052      	lsls	r2, r2, #1
     e30:	18ba      	adds	r2, r7, r2
     e32:	6013      	str	r3, [r2, #0]

				// If bmpHeight is negative, image is in top-down order.
				// This is not canon but has been observed in the wild.
				if (bmpHeight < 0) {
     e34:	23ca      	movs	r3, #202	; 0xca
     e36:	005b      	lsls	r3, r3, #1
     e38:	18fb      	adds	r3, r7, r3
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	2b00      	cmp	r3, #0
     e3e:	da0d      	bge.n	e5c <_Z10drawBitmapPcss+0x33c>
					bmpHeight = -bmpHeight;
     e40:	23ca      	movs	r3, #202	; 0xca
     e42:	005b      	lsls	r3, r3, #1
     e44:	18fb      	adds	r3, r7, r3
     e46:	681b      	ldr	r3, [r3, #0]
     e48:	425b      	negs	r3, r3
     e4a:	22ca      	movs	r2, #202	; 0xca
     e4c:	0052      	lsls	r2, r2, #1
     e4e:	18ba      	adds	r2, r7, r2
     e50:	6013      	str	r3, [r2, #0]
					flip = false;
     e52:	2392      	movs	r3, #146	; 0x92
     e54:	33ff      	adds	r3, #255	; 0xff
     e56:	18fb      	adds	r3, r7, r3
     e58:	2200      	movs	r2, #0
     e5a:	701a      	strb	r2, [r3, #0]
				}

				// Crop area to be loaded
				x2 = x + bmpWidth - 1; // Lower-right corner
     e5c:	4ba1      	ldr	r3, [pc, #644]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     e5e:	22cc      	movs	r2, #204	; 0xcc
     e60:	0052      	lsls	r2, r2, #1
     e62:	4694      	mov	ip, r2
     e64:	44bc      	add	ip, r7
     e66:	4463      	add	r3, ip
     e68:	2200      	movs	r2, #0
     e6a:	5e9a      	ldrsh	r2, [r3, r2]
     e6c:	23b4      	movs	r3, #180	; 0xb4
     e6e:	005b      	lsls	r3, r3, #1
     e70:	18fb      	adds	r3, r7, r3
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	18d3      	adds	r3, r2, r3
     e76:	3b01      	subs	r3, #1
     e78:	22ae      	movs	r2, #174	; 0xae
     e7a:	0052      	lsls	r2, r2, #1
     e7c:	18ba      	adds	r2, r7, r2
     e7e:	6013      	str	r3, [r2, #0]
				y2 = y + bmpHeight - 1;
     e80:	4b99      	ldr	r3, [pc, #612]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     e82:	22cc      	movs	r2, #204	; 0xcc
     e84:	0052      	lsls	r2, r2, #1
     e86:	4694      	mov	ip, r2
     e88:	44bc      	add	ip, r7
     e8a:	4463      	add	r3, ip
     e8c:	2200      	movs	r2, #0
     e8e:	5e9a      	ldrsh	r2, [r3, r2]
     e90:	23ca      	movs	r3, #202	; 0xca
     e92:	005b      	lsls	r3, r3, #1
     e94:	18fb      	adds	r3, r7, r3
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	18d3      	adds	r3, r2, r3
     e9a:	3b01      	subs	r3, #1
     e9c:	22ac      	movs	r2, #172	; 0xac
     e9e:	0052      	lsls	r2, r2, #1
     ea0:	18ba      	adds	r2, r7, r2
     ea2:	6013      	str	r3, [r2, #0]
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     ea4:	23ae      	movs	r3, #174	; 0xae
     ea6:	005b      	lsls	r3, r3, #1
     ea8:	18fb      	adds	r3, r7, r3
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	2b00      	cmp	r3, #0
     eae:	da00      	bge.n	eb2 <_Z10drawBitmapPcss+0x392>
     eb0:	e209      	b.n	12c6 <_Z10drawBitmapPcss+0x7a6>
     eb2:	23ac      	movs	r3, #172	; 0xac
     eb4:	005b      	lsls	r3, r3, #1
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	2b00      	cmp	r3, #0
     ebc:	da00      	bge.n	ec0 <_Z10drawBitmapPcss+0x3a0>
     ebe:	e202      	b.n	12c6 <_Z10drawBitmapPcss+0x7a6>
					w = bmpWidth; // Width/height of section to load/display
     ec0:	23b4      	movs	r3, #180	; 0xb4
     ec2:	005b      	lsls	r3, r3, #1
     ec4:	18fb      	adds	r3, r7, r3
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	22c6      	movs	r2, #198	; 0xc6
     eca:	0052      	lsls	r2, r2, #1
     ecc:	18ba      	adds	r2, r7, r2
     ece:	6013      	str	r3, [r2, #0]
					h = bmpHeight;
     ed0:	23ca      	movs	r3, #202	; 0xca
     ed2:	005b      	lsls	r3, r3, #1
     ed4:	18fb      	adds	r3, r7, r3
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	22c4      	movs	r2, #196	; 0xc4
     eda:	0052      	lsls	r2, r2, #1
     edc:	18ba      	adds	r2, r7, r2
     ede:	6013      	str	r3, [r2, #0]
					bx1 = by1 = 0; // UL coordinate in BMP file
     ee0:	2300      	movs	r3, #0
     ee2:	22bc      	movs	r2, #188	; 0xbc
     ee4:	0052      	lsls	r2, r2, #1
     ee6:	18ba      	adds	r2, r7, r2
     ee8:	6013      	str	r3, [r2, #0]
     eea:	23bc      	movs	r3, #188	; 0xbc
     eec:	005b      	lsls	r3, r3, #1
     eee:	18fb      	adds	r3, r7, r3
     ef0:	681b      	ldr	r3, [r3, #0]
     ef2:	22be      	movs	r2, #190	; 0xbe
     ef4:	0052      	lsls	r2, r2, #1
     ef6:	18ba      	adds	r2, r7, r2
     ef8:	6013      	str	r3, [r2, #0]
					if (x < 0) { // Clip left
     efa:	4b7a      	ldr	r3, [pc, #488]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     efc:	22cc      	movs	r2, #204	; 0xcc
     efe:	0052      	lsls	r2, r2, #1
     f00:	4694      	mov	ip, r2
     f02:	44bc      	add	ip, r7
     f04:	4463      	add	r3, ip
     f06:	2200      	movs	r2, #0
     f08:	5e9b      	ldrsh	r3, [r3, r2]
     f0a:	2b00      	cmp	r3, #0
     f0c:	da1d      	bge.n	f4a <_Z10drawBitmapPcss+0x42a>
						bx1 = -x;
     f0e:	4b75      	ldr	r3, [pc, #468]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     f10:	22cc      	movs	r2, #204	; 0xcc
     f12:	0052      	lsls	r2, r2, #1
     f14:	4694      	mov	ip, r2
     f16:	44bc      	add	ip, r7
     f18:	4463      	add	r3, ip
     f1a:	2200      	movs	r2, #0
     f1c:	5e9b      	ldrsh	r3, [r3, r2]
     f1e:	425b      	negs	r3, r3
     f20:	22be      	movs	r2, #190	; 0xbe
     f22:	0052      	lsls	r2, r2, #1
     f24:	18ba      	adds	r2, r7, r2
     f26:	6013      	str	r3, [r2, #0]
						x = 0;
     f28:	4b6e      	ldr	r3, [pc, #440]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     f2a:	22cc      	movs	r2, #204	; 0xcc
     f2c:	0052      	lsls	r2, r2, #1
     f2e:	4694      	mov	ip, r2
     f30:	44bc      	add	ip, r7
     f32:	4463      	add	r3, ip
     f34:	2200      	movs	r2, #0
     f36:	801a      	strh	r2, [r3, #0]
						w = x2 + 1;
     f38:	23ae      	movs	r3, #174	; 0xae
     f3a:	005b      	lsls	r3, r3, #1
     f3c:	18fb      	adds	r3, r7, r3
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	3301      	adds	r3, #1
     f42:	22c6      	movs	r2, #198	; 0xc6
     f44:	0052      	lsls	r2, r2, #1
     f46:	18ba      	adds	r2, r7, r2
     f48:	6013      	str	r3, [r2, #0]
					}
					if (y < 0) { // Clip top
     f4a:	4b67      	ldr	r3, [pc, #412]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f4c:	22cc      	movs	r2, #204	; 0xcc
     f4e:	0052      	lsls	r2, r2, #1
     f50:	4694      	mov	ip, r2
     f52:	44bc      	add	ip, r7
     f54:	4463      	add	r3, ip
     f56:	2200      	movs	r2, #0
     f58:	5e9b      	ldrsh	r3, [r3, r2]
     f5a:	2b00      	cmp	r3, #0
     f5c:	da1d      	bge.n	f9a <_Z10drawBitmapPcss+0x47a>
						by1 = -y;
     f5e:	4b62      	ldr	r3, [pc, #392]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f60:	22cc      	movs	r2, #204	; 0xcc
     f62:	0052      	lsls	r2, r2, #1
     f64:	4694      	mov	ip, r2
     f66:	44bc      	add	ip, r7
     f68:	4463      	add	r3, ip
     f6a:	2200      	movs	r2, #0
     f6c:	5e9b      	ldrsh	r3, [r3, r2]
     f6e:	425b      	negs	r3, r3
     f70:	22bc      	movs	r2, #188	; 0xbc
     f72:	0052      	lsls	r2, r2, #1
     f74:	18ba      	adds	r2, r7, r2
     f76:	6013      	str	r3, [r2, #0]
						y = 0;
     f78:	4b5b      	ldr	r3, [pc, #364]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f7a:	22cc      	movs	r2, #204	; 0xcc
     f7c:	0052      	lsls	r2, r2, #1
     f7e:	4694      	mov	ip, r2
     f80:	44bc      	add	ip, r7
     f82:	4463      	add	r3, ip
     f84:	2200      	movs	r2, #0
     f86:	801a      	strh	r2, [r3, #0]
						h = y2 + 1;
     f88:	23ac      	movs	r3, #172	; 0xac
     f8a:	005b      	lsls	r3, r3, #1
     f8c:	18fb      	adds	r3, r7, r3
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	3301      	adds	r3, #1
     f92:	22c4      	movs	r2, #196	; 0xc4
     f94:	0052      	lsls	r2, r2, #1
     f96:	18ba      	adds	r2, r7, r2
     f98:	6013      	str	r3, [r2, #0]
					}
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     f9a:	4b54      	ldr	r3, [pc, #336]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     f9c:	0018      	movs	r0, r3
     f9e:	f00c fa77 	bl	d490 <_ZNK12Adafruit_GFX5widthEv>
     fa2:	0003      	movs	r3, r0
     fa4:	001a      	movs	r2, r3
     fa6:	23ae      	movs	r3, #174	; 0xae
     fa8:	005b      	lsls	r3, r3, #1
     faa:	18fb      	adds	r3, r7, r3
     fac:	681b      	ldr	r3, [r3, #0]
     fae:	0fd0      	lsrs	r0, r2, #31
     fb0:	17d9      	asrs	r1, r3, #31
     fb2:	4293      	cmp	r3, r2
     fb4:	4148      	adcs	r0, r1
     fb6:	0003      	movs	r3, r0
     fb8:	b2db      	uxtb	r3, r3
     fba:	2b00      	cmp	r3, #0
     fbc:	d012      	beq.n	fe4 <_Z10drawBitmapPcss+0x4c4>
     fbe:	4b4b      	ldr	r3, [pc, #300]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     fc0:	0018      	movs	r0, r3
     fc2:	f00c fa65 	bl	d490 <_ZNK12Adafruit_GFX5widthEv>
     fc6:	0003      	movs	r3, r0
     fc8:	001a      	movs	r2, r3
     fca:	4b46      	ldr	r3, [pc, #280]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     fcc:	21cc      	movs	r1, #204	; 0xcc
     fce:	0049      	lsls	r1, r1, #1
     fd0:	468c      	mov	ip, r1
     fd2:	44bc      	add	ip, r7
     fd4:	4463      	add	r3, ip
     fd6:	2100      	movs	r1, #0
     fd8:	5e5b      	ldrsh	r3, [r3, r1]
     fda:	1ad3      	subs	r3, r2, r3
     fdc:	22c6      	movs	r2, #198	; 0xc6
     fde:	0052      	lsls	r2, r2, #1
     fe0:	18ba      	adds	r2, r7, r2
     fe2:	6013      	str	r3, [r2, #0]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     fe4:	4b41      	ldr	r3, [pc, #260]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     fe6:	0018      	movs	r0, r3
     fe8:	f00c fa5d 	bl	d4a6 <_ZNK12Adafruit_GFX6heightEv>
     fec:	0003      	movs	r3, r0
     fee:	001a      	movs	r2, r3
     ff0:	23ac      	movs	r3, #172	; 0xac
     ff2:	005b      	lsls	r3, r3, #1
     ff4:	18fb      	adds	r3, r7, r3
     ff6:	681b      	ldr	r3, [r3, #0]
     ff8:	0fd0      	lsrs	r0, r2, #31
     ffa:	17d9      	asrs	r1, r3, #31
     ffc:	4293      	cmp	r3, r2
     ffe:	4148      	adcs	r0, r1
    1000:	0003      	movs	r3, r0
    1002:	b2db      	uxtb	r3, r3
    1004:	2b00      	cmp	r3, #0
    1006:	d012      	beq.n	102e <_Z10drawBitmapPcss+0x50e>
    1008:	4b38      	ldr	r3, [pc, #224]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    100a:	0018      	movs	r0, r3
    100c:	f00c fa4b 	bl	d4a6 <_ZNK12Adafruit_GFX6heightEv>
    1010:	0003      	movs	r3, r0
    1012:	001a      	movs	r2, r3
    1014:	4b34      	ldr	r3, [pc, #208]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
    1016:	21cc      	movs	r1, #204	; 0xcc
    1018:	0049      	lsls	r1, r1, #1
    101a:	468c      	mov	ip, r1
    101c:	44bc      	add	ip, r7
    101e:	4463      	add	r3, ip
    1020:	2100      	movs	r1, #0
    1022:	5e5b      	ldrsh	r3, [r3, r1]
    1024:	1ad3      	subs	r3, r2, r3
    1026:	22c4      	movs	r2, #196	; 0xc4
    1028:	0052      	lsls	r2, r2, #1
    102a:	18ba      	adds	r2, r7, r2
    102c:	6013      	str	r3, [r2, #0]

					// Set tftDisplay address window to clipped image bounds
					tftDisplay.startWrite(); // Requires start/end transaction now
    102e:	4b2f      	ldr	r3, [pc, #188]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    1030:	0018      	movs	r0, r3
    1032:	f006 ff81 	bl	7f38 <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
    1036:	4b2b      	ldr	r3, [pc, #172]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
    1038:	22cc      	movs	r2, #204	; 0xcc
    103a:	0052      	lsls	r2, r2, #1
    103c:	4694      	mov	ip, r2
    103e:	44bc      	add	ip, r7
    1040:	4463      	add	r3, ip
    1042:	8819      	ldrh	r1, [r3, #0]
    1044:	4b28      	ldr	r3, [pc, #160]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
    1046:	22cc      	movs	r2, #204	; 0xcc
    1048:	0052      	lsls	r2, r2, #1
    104a:	4694      	mov	ip, r2
    104c:	44bc      	add	ip, r7
    104e:	4463      	add	r3, ip
    1050:	881a      	ldrh	r2, [r3, #0]
    1052:	23c6      	movs	r3, #198	; 0xc6
    1054:	005b      	lsls	r3, r3, #1
    1056:	18fb      	adds	r3, r7, r3
    1058:	681b      	ldr	r3, [r3, #0]
    105a:	b29c      	uxth	r4, r3
    105c:	23c4      	movs	r3, #196	; 0xc4
    105e:	005b      	lsls	r3, r3, #1
    1060:	18fb      	adds	r3, r7, r3
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	b29b      	uxth	r3, r3
    1066:	4821      	ldr	r0, [pc, #132]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    1068:	9300      	str	r3, [sp, #0]
    106a:	0023      	movs	r3, r4
    106c:	f006 ffce 	bl	800c <_ZN16Adafruit_ILI934113setAddrWindowEtttt>

					for (row = 0; row < h; row++) { // For each scanline...
    1070:	2300      	movs	r3, #0
    1072:	22c2      	movs	r2, #194	; 0xc2
    1074:	0052      	lsls	r2, r2, #1
    1076:	18ba      	adds	r2, r7, r2
    1078:	6013      	str	r3, [r2, #0]
    107a:	23c2      	movs	r3, #194	; 0xc2
    107c:	005b      	lsls	r3, r3, #1
    107e:	18fb      	adds	r3, r7, r3
    1080:	681a      	ldr	r2, [r3, #0]
    1082:	23c4      	movs	r3, #196	; 0xc4
    1084:	005b      	lsls	r3, r3, #1
    1086:	18fb      	adds	r3, r7, r3
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	429a      	cmp	r2, r3
    108c:	db00      	blt.n	1090 <_Z10drawBitmapPcss+0x570>
    108e:	e116      	b.n	12be <_Z10drawBitmapPcss+0x79e>
						// intensive to be doing this on every line, but this
						// method covers a lot of gritty details like cropping
						// and scanline padding.  Also, the seek only takes
						// place if the file position actually needs to change
						// (avoids a lot of cluster math in SD library).
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
    1090:	2392      	movs	r3, #146	; 0x92
    1092:	33ff      	adds	r3, #255	; 0xff
    1094:	18fb      	adds	r3, r7, r3
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	2b00      	cmp	r3, #0
    109a:	d029      	beq.n	10f0 <_Z10drawBitmapPcss+0x5d0>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
    109c:	23ca      	movs	r3, #202	; 0xca
    109e:	005b      	lsls	r3, r3, #1
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	1e5a      	subs	r2, r3, #1
    10a6:	23c2      	movs	r3, #194	; 0xc2
    10a8:	005b      	lsls	r3, r3, #1
    10aa:	18fb      	adds	r3, r7, r3
    10ac:	6819      	ldr	r1, [r3, #0]
    10ae:	23bc      	movs	r3, #188	; 0xbc
    10b0:	005b      	lsls	r3, r3, #1
    10b2:	18fb      	adds	r3, r7, r3
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	18cb      	adds	r3, r1, r3
    10b8:	1ad3      	subs	r3, r2, r3
    10ba:	001a      	movs	r2, r3
    10bc:	23b0      	movs	r3, #176	; 0xb0
    10be:	005b      	lsls	r3, r3, #1
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	435a      	muls	r2, r3
    10c6:	23b6      	movs	r3, #182	; 0xb6
    10c8:	005b      	lsls	r3, r3, #1
    10ca:	18fb      	adds	r3, r7, r3
    10cc:	681b      	ldr	r3, [r3, #0]
    10ce:	18d3      	adds	r3, r2, r3
    10d0:	22ba      	movs	r2, #186	; 0xba
    10d2:	0052      	lsls	r2, r2, #1
    10d4:	18ba      	adds	r2, r7, r2
    10d6:	6013      	str	r3, [r2, #0]
    10d8:	e022      	b.n	1120 <_Z10drawBitmapPcss+0x600>
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00013250 	.word	0x00013250
    10e0:	20000e94 	.word	0x20000e94
    10e4:	fffffe6a 	.word	0xfffffe6a
    10e8:	fffffe68 	.word	0xfffffe68
    10ec:	200002bc 	.word	0x200002bc
						else
						// Bitmap is stored top-to-bottom
						pos = bmpImageoffset + (row + by1) * rowSize;
    10f0:	23c2      	movs	r3, #194	; 0xc2
    10f2:	005b      	lsls	r3, r3, #1
    10f4:	18fb      	adds	r3, r7, r3
    10f6:	681a      	ldr	r2, [r3, #0]
    10f8:	23bc      	movs	r3, #188	; 0xbc
    10fa:	005b      	lsls	r3, r3, #1
    10fc:	18fb      	adds	r3, r7, r3
    10fe:	681b      	ldr	r3, [r3, #0]
    1100:	18d3      	adds	r3, r2, r3
    1102:	001a      	movs	r2, r3
    1104:	23b0      	movs	r3, #176	; 0xb0
    1106:	005b      	lsls	r3, r3, #1
    1108:	18fb      	adds	r3, r7, r3
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	435a      	muls	r2, r3
    110e:	23b6      	movs	r3, #182	; 0xb6
    1110:	005b      	lsls	r3, r3, #1
    1112:	18fb      	adds	r3, r7, r3
    1114:	681b      	ldr	r3, [r3, #0]
    1116:	18d3      	adds	r3, r2, r3
    1118:	22ba      	movs	r2, #186	; 0xba
    111a:	0052      	lsls	r2, r2, #1
    111c:	18ba      	adds	r2, r7, r2
    111e:	6013      	str	r3, [r2, #0]
						pos += bx1 * 3; // Factor in starting column (bx1)
    1120:	23be      	movs	r3, #190	; 0xbe
    1122:	005b      	lsls	r3, r3, #1
    1124:	18fb      	adds	r3, r7, r3
    1126:	681a      	ldr	r2, [r3, #0]
    1128:	0013      	movs	r3, r2
    112a:	005b      	lsls	r3, r3, #1
    112c:	189b      	adds	r3, r3, r2
    112e:	001a      	movs	r2, r3
    1130:	23ba      	movs	r3, #186	; 0xba
    1132:	005b      	lsls	r3, r3, #1
    1134:	18fb      	adds	r3, r7, r3
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	189b      	adds	r3, r3, r2
    113a:	22ba      	movs	r2, #186	; 0xba
    113c:	0052      	lsls	r2, r2, #1
    113e:	18ba      	adds	r2, r7, r2
    1140:	6013      	str	r3, [r2, #0]
						if (bmpFile.position() != pos) { // Need seek?
    1142:	2386      	movs	r3, #134	; 0x86
    1144:	005b      	lsls	r3, r3, #1
    1146:	18fb      	adds	r3, r7, r3
    1148:	0018      	movs	r0, r3
    114a:	f007 fcb0 	bl	8aae <_ZN5SDLib4File8positionEv>
    114e:	0002      	movs	r2, r0
    1150:	23ba      	movs	r3, #186	; 0xba
    1152:	005b      	lsls	r3, r3, #1
    1154:	18fb      	adds	r3, r7, r3
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	1ad3      	subs	r3, r2, r3
    115a:	1e5a      	subs	r2, r3, #1
    115c:	4193      	sbcs	r3, r2
    115e:	b2db      	uxtb	r3, r3
    1160:	2b00      	cmp	r3, #0
    1162:	d017      	beq.n	1194 <_Z10drawBitmapPcss+0x674>
							tftDisplay.endWrite(); // End tftDisplay transaction
    1164:	4b73      	ldr	r3, [pc, #460]	; (1334 <_Z10drawBitmapPcss+0x814>)
    1166:	0018      	movs	r0, r3
    1168:	f006 ff0e 	bl	7f88 <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
    116c:	23ba      	movs	r3, #186	; 0xba
    116e:	005b      	lsls	r3, r3, #1
    1170:	18fb      	adds	r3, r7, r3
    1172:	681a      	ldr	r2, [r3, #0]
    1174:	2386      	movs	r3, #134	; 0x86
    1176:	005b      	lsls	r3, r3, #1
    1178:	18fb      	adds	r3, r7, r3
    117a:	0011      	movs	r1, r2
    117c:	0018      	movs	r0, r3
    117e:	f007 fc7c 	bl	8a7a <_ZN5SDLib4File4seekEm>
							buffidx = sizeof(sdbuffer); // Force buffer reload
    1182:	2394      	movs	r3, #148	; 0x94
    1184:	33ff      	adds	r3, #255	; 0xff
    1186:	18fb      	adds	r3, r7, r3
    1188:	22ff      	movs	r2, #255	; 0xff
    118a:	701a      	strb	r2, [r3, #0]
							tftDisplay.startWrite(); // Start new tftDisplay transaction
    118c:	4b69      	ldr	r3, [pc, #420]	; (1334 <_Z10drawBitmapPcss+0x814>)
    118e:	0018      	movs	r0, r3
    1190:	f006 fed2 	bl	7f38 <_ZN16Adafruit_ILI934110startWriteEv>
						}
						for (col = 0; col < w; col++) { // For each pixel...
    1194:	2300      	movs	r3, #0
    1196:	22c0      	movs	r2, #192	; 0xc0
    1198:	0052      	lsls	r2, r2, #1
    119a:	18ba      	adds	r2, r7, r2
    119c:	6013      	str	r3, [r2, #0]
    119e:	23c0      	movs	r3, #192	; 0xc0
    11a0:	005b      	lsls	r3, r3, #1
    11a2:	18fb      	adds	r3, r7, r3
    11a4:	681a      	ldr	r2, [r3, #0]
    11a6:	23c6      	movs	r3, #198	; 0xc6
    11a8:	005b      	lsls	r3, r3, #1
    11aa:	18fb      	adds	r3, r7, r3
    11ac:	681b      	ldr	r3, [r3, #0]
    11ae:	429a      	cmp	r2, r3
    11b0:	da7b      	bge.n	12aa <_Z10drawBitmapPcss+0x78a>
							// Time to read more pixel data?
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
    11b2:	2394      	movs	r3, #148	; 0x94
    11b4:	33ff      	adds	r3, #255	; 0xff
    11b6:	18fb      	adds	r3, r7, r3
    11b8:	781b      	ldrb	r3, [r3, #0]
    11ba:	2bff      	cmp	r3, #255	; 0xff
    11bc:	d115      	bne.n	11ea <_Z10drawBitmapPcss+0x6ca>
								tftDisplay.endWrite(); // End tftDisplay transaction
    11be:	4b5d      	ldr	r3, [pc, #372]	; (1334 <_Z10drawBitmapPcss+0x814>)
    11c0:	0018      	movs	r0, r3
    11c2:	f006 fee1 	bl	7f88 <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
    11c6:	230c      	movs	r3, #12
    11c8:	18f9      	adds	r1, r7, r3
    11ca:	2386      	movs	r3, #134	; 0x86
    11cc:	005b      	lsls	r3, r3, #1
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	22ff      	movs	r2, #255	; 0xff
    11d2:	0018      	movs	r0, r3
    11d4:	f007 fc03 	bl	89de <_ZN5SDLib4File4readEPvt>
								buffidx = 0; // Set index to beginning
    11d8:	2394      	movs	r3, #148	; 0x94
    11da:	33ff      	adds	r3, #255	; 0xff
    11dc:	18fb      	adds	r3, r7, r3
    11de:	2200      	movs	r2, #0
    11e0:	701a      	strb	r2, [r3, #0]
								tftDisplay.startWrite(); // Start new tftDisplay transaction
    11e2:	4b54      	ldr	r3, [pc, #336]	; (1334 <_Z10drawBitmapPcss+0x814>)
    11e4:	0018      	movs	r0, r3
    11e6:	f006 fea7 	bl	7f38 <_ZN16Adafruit_ILI934110startWriteEv>
							}
							// Convert pixel from BMP to tftDisplay format, push to display
							b = sdbuffer[buffidx++];
    11ea:	2394      	movs	r3, #148	; 0x94
    11ec:	33ff      	adds	r3, #255	; 0xff
    11ee:	18fb      	adds	r3, r7, r3
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	2294      	movs	r2, #148	; 0x94
    11f4:	32ff      	adds	r2, #255	; 0xff
    11f6:	18ba      	adds	r2, r7, r2
    11f8:	1c59      	adds	r1, r3, #1
    11fa:	7011      	strb	r1, [r2, #0]
    11fc:	0019      	movs	r1, r3
    11fe:	2358      	movs	r3, #88	; 0x58
    1200:	33ff      	adds	r3, #255	; 0xff
    1202:	18fb      	adds	r3, r7, r3
    1204:	4a4c      	ldr	r2, [pc, #304]	; (1338 <_Z10drawBitmapPcss+0x818>)
    1206:	20cc      	movs	r0, #204	; 0xcc
    1208:	0040      	lsls	r0, r0, #1
    120a:	4684      	mov	ip, r0
    120c:	44bc      	add	ip, r7
    120e:	4462      	add	r2, ip
    1210:	5c52      	ldrb	r2, [r2, r1]
    1212:	701a      	strb	r2, [r3, #0]
							g = sdbuffer[buffidx++];
    1214:	2394      	movs	r3, #148	; 0x94
    1216:	33ff      	adds	r3, #255	; 0xff
    1218:	18fb      	adds	r3, r7, r3
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	2294      	movs	r2, #148	; 0x94
    121e:	32ff      	adds	r2, #255	; 0xff
    1220:	18ba      	adds	r2, r7, r2
    1222:	1c59      	adds	r1, r3, #1
    1224:	7011      	strb	r1, [r2, #0]
    1226:	0019      	movs	r1, r3
    1228:	23ab      	movs	r3, #171	; 0xab
    122a:	005b      	lsls	r3, r3, #1
    122c:	18fb      	adds	r3, r7, r3
    122e:	4a42      	ldr	r2, [pc, #264]	; (1338 <_Z10drawBitmapPcss+0x818>)
    1230:	20cc      	movs	r0, #204	; 0xcc
    1232:	0040      	lsls	r0, r0, #1
    1234:	4684      	mov	ip, r0
    1236:	44bc      	add	ip, r7
    1238:	4462      	add	r2, ip
    123a:	5c52      	ldrb	r2, [r2, r1]
    123c:	701a      	strb	r2, [r3, #0]
							r = sdbuffer[buffidx++];
    123e:	2394      	movs	r3, #148	; 0x94
    1240:	33ff      	adds	r3, #255	; 0xff
    1242:	18fb      	adds	r3, r7, r3
    1244:	781b      	ldrb	r3, [r3, #0]
    1246:	2294      	movs	r2, #148	; 0x94
    1248:	32ff      	adds	r2, #255	; 0xff
    124a:	18ba      	adds	r2, r7, r2
    124c:	1c59      	adds	r1, r3, #1
    124e:	7011      	strb	r1, [r2, #0]
    1250:	0019      	movs	r1, r3
    1252:	2356      	movs	r3, #86	; 0x56
    1254:	33ff      	adds	r3, #255	; 0xff
    1256:	18fb      	adds	r3, r7, r3
    1258:	4a37      	ldr	r2, [pc, #220]	; (1338 <_Z10drawBitmapPcss+0x818>)
    125a:	20cc      	movs	r0, #204	; 0xcc
    125c:	0040      	lsls	r0, r0, #1
    125e:	4684      	mov	ip, r0
    1260:	44bc      	add	ip, r7
    1262:	4462      	add	r2, ip
    1264:	5c52      	ldrb	r2, [r2, r1]
    1266:	701a      	strb	r2, [r3, #0]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
    1268:	2358      	movs	r3, #88	; 0x58
    126a:	33ff      	adds	r3, #255	; 0xff
    126c:	18fb      	adds	r3, r7, r3
    126e:	781c      	ldrb	r4, [r3, #0]
    1270:	23ab      	movs	r3, #171	; 0xab
    1272:	005b      	lsls	r3, r3, #1
    1274:	18fb      	adds	r3, r7, r3
    1276:	781a      	ldrb	r2, [r3, #0]
    1278:	2356      	movs	r3, #86	; 0x56
    127a:	33ff      	adds	r3, #255	; 0xff
    127c:	18fb      	adds	r3, r7, r3
    127e:	7819      	ldrb	r1, [r3, #0]
    1280:	482c      	ldr	r0, [pc, #176]	; (1334 <_Z10drawBitmapPcss+0x814>)
    1282:	0023      	movs	r3, r4
    1284:	f006 fa48 	bl	7718 <_ZN16Adafruit_ILI93418color565Ehhh>
    1288:	0003      	movs	r3, r0
    128a:	001a      	movs	r2, r3
    128c:	4b29      	ldr	r3, [pc, #164]	; (1334 <_Z10drawBitmapPcss+0x814>)
    128e:	0011      	movs	r1, r2
    1290:	0018      	movs	r0, r3
    1292:	f006 ff83 	bl	819c <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
    1296:	23c0      	movs	r3, #192	; 0xc0
    1298:	005b      	lsls	r3, r3, #1
    129a:	18fb      	adds	r3, r7, r3
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	3301      	adds	r3, #1
    12a0:	22c0      	movs	r2, #192	; 0xc0
    12a2:	0052      	lsls	r2, r2, #1
    12a4:	18ba      	adds	r2, r7, r2
    12a6:	6013      	str	r3, [r2, #0]
    12a8:	e779      	b.n	119e <_Z10drawBitmapPcss+0x67e>
					for (row = 0; row < h; row++) { // For each scanline...
    12aa:	23c2      	movs	r3, #194	; 0xc2
    12ac:	005b      	lsls	r3, r3, #1
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	3301      	adds	r3, #1
    12b4:	22c2      	movs	r2, #194	; 0xc2
    12b6:	0052      	lsls	r2, r2, #1
    12b8:	18ba      	adds	r2, r7, r2
    12ba:	6013      	str	r3, [r2, #0]
    12bc:	e6dd      	b.n	107a <_Z10drawBitmapPcss+0x55a>
						} // end pixel
					} // end scanline
					tftDisplay.endWrite(); // End last tftDisplay transaction
    12be:	4b1d      	ldr	r3, [pc, #116]	; (1334 <_Z10drawBitmapPcss+0x814>)
    12c0:	0018      	movs	r0, r3
    12c2:	f006 fe61 	bl	7f88 <_ZN16Adafruit_ILI93418endWriteEv>
				} // end onscreen
				Serial.print(F("Loaded in "));
    12c6:	4a1d      	ldr	r2, [pc, #116]	; (133c <_Z10drawBitmapPcss+0x81c>)
    12c8:	4b1d      	ldr	r3, [pc, #116]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12ca:	0011      	movs	r1, r2
    12cc:	0018      	movs	r0, r3
    12ce:	f001 fe4e 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(millis() - startTime);
    12d2:	f001 fd91 	bl	2df8 <millis>
    12d6:	0002      	movs	r2, r0
    12d8:	23b8      	movs	r3, #184	; 0xb8
    12da:	005b      	lsls	r3, r3, #1
    12dc:	18fb      	adds	r3, r7, r3
    12de:	681b      	ldr	r3, [r3, #0]
    12e0:	1ad1      	subs	r1, r2, r3
    12e2:	4b17      	ldr	r3, [pc, #92]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12e4:	220a      	movs	r2, #10
    12e6:	0018      	movs	r0, r3
    12e8:	f001 fedd 	bl	30a6 <_ZN5Print5printEmi>
				Serial.println(F(" ms"));
    12ec:	4a15      	ldr	r2, [pc, #84]	; (1344 <_Z10drawBitmapPcss+0x824>)
    12ee:	4b14      	ldr	r3, [pc, #80]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12f0:	0011      	movs	r1, r2
    12f2:	0018      	movs	r0, r3
    12f4:	f001 fef6 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
			} // end goodBmp
		}
	}

	bmpFile.close();
    12f8:	2386      	movs	r3, #134	; 0x86
    12fa:	005b      	lsls	r3, r3, #1
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	0018      	movs	r0, r3
    1300:	f007 fbfe 	bl	8b00 <_ZN5SDLib4File5closeEv>
	if (!goodBmp)
    1304:	23c9      	movs	r3, #201	; 0xc9
    1306:	005b      	lsls	r3, r3, #1
    1308:	18fb      	adds	r3, r7, r3
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	2201      	movs	r2, #1
    130e:	4053      	eors	r3, r2
    1310:	b2db      	uxtb	r3, r3
    1312:	2b00      	cmp	r3, #0
    1314:	d005      	beq.n	1322 <_Z10drawBitmapPcss+0x802>
	Serial.println(F("BMP format not recognized or SD not mounted"));
    1316:	4a0c      	ldr	r2, [pc, #48]	; (1348 <_Z10drawBitmapPcss+0x828>)
    1318:	4b09      	ldr	r3, [pc, #36]	; (1340 <_Z10drawBitmapPcss+0x820>)
    131a:	0011      	movs	r1, r2
    131c:	0018      	movs	r0, r3
    131e:	f001 fee1 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println();
    1322:	4b07      	ldr	r3, [pc, #28]	; (1340 <_Z10drawBitmapPcss+0x820>)
    1324:	0018      	movs	r0, r3
    1326:	f001 fef7 	bl	3118 <_ZN5Print7printlnEv>
    132a:	e000      	b.n	132e <_Z10drawBitmapPcss+0x80e>
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
    132c:	46c0      	nop			; (mov r8, r8)
}
    132e:	46bd      	mov	sp, r7
    1330:	b067      	add	sp, #412	; 0x19c
    1332:	bd90      	pop	{r4, r7, pc}
    1334:	200002bc 	.word	0x200002bc
    1338:	fffffe74 	.word	0xfffffe74
    133c:	00013260 	.word	0x00013260
    1340:	20000e94 	.word	0x20000e94
    1344:	0001326c 	.word	0x0001326c
    1348:	00013270 	.word	0x00013270

0000134c <_Z8getPointv>:

TS_Point getPoint() {
    134c:	b580      	push	{r7, lr}
    134e:	b084      	sub	sp, #16
    1350:	af02      	add	r7, sp, #8
    1352:	6078      	str	r0, [r7, #4]
	TS_Point point = touchScreen.getPoint();
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	4915      	ldr	r1, [pc, #84]	; (13ac <_Z8getPointv+0x60>)
    1358:	2200      	movs	r2, #0
    135a:	0018      	movs	r0, r3
    135c:	f005 ffa5 	bl	72aa <_ZN15Adafruit_FT62068getPointEh>
	// convert point to match display coordinate system
	point.x = map(point.x, 0, 240, 240, 0);
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	2200      	movs	r2, #0
    1364:	5e9b      	ldrsh	r3, [r3, r2]
    1366:	0018      	movs	r0, r3
    1368:	2300      	movs	r3, #0
    136a:	9300      	str	r3, [sp, #0]
    136c:	23f0      	movs	r3, #240	; 0xf0
    136e:	22f0      	movs	r2, #240	; 0xf0
    1370:	2100      	movs	r1, #0
    1372:	f005 fd51 	bl	6e18 <_Z3maplllll>
    1376:	0003      	movs	r3, r0
    1378:	b21a      	sxth	r2, r3
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	801a      	strh	r2, [r3, #0]
	point.y = map(point.y, 0, 320, 320, 0);
    137e:	687b      	ldr	r3, [r7, #4]
    1380:	2202      	movs	r2, #2
    1382:	5e9b      	ldrsh	r3, [r3, r2]
    1384:	0018      	movs	r0, r3
    1386:	23a0      	movs	r3, #160	; 0xa0
    1388:	0059      	lsls	r1, r3, #1
    138a:	23a0      	movs	r3, #160	; 0xa0
    138c:	005a      	lsls	r2, r3, #1
    138e:	2300      	movs	r3, #0
    1390:	9300      	str	r3, [sp, #0]
    1392:	000b      	movs	r3, r1
    1394:	2100      	movs	r1, #0
    1396:	f005 fd3f 	bl	6e18 <_Z3maplllll>
    139a:	0003      	movs	r3, r0
    139c:	b21a      	sxth	r2, r3
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	805a      	strh	r2, [r3, #2]
	return point;
    13a2:	46c0      	nop			; (mov r8, r8)
}
    13a4:	6878      	ldr	r0, [r7, #4]
    13a6:	46bd      	mov	sp, r7
    13a8:	b002      	add	sp, #8
    13aa:	bd80      	pop	{r7, pc}
    13ac:	20000320 	.word	0x20000320

000013b0 <_Z7addMoveh8TS_Point5State>:


State addMove(uint8_t square, TS_Point marker, State player) {
    13b0:	b590      	push	{r4, r7, lr}
    13b2:	b087      	sub	sp, #28
    13b4:	af00      	add	r7, sp, #0
    13b6:	0004      	movs	r4, r0
    13b8:	1d38      	adds	r0, r7, #4
    13ba:	6001      	str	r1, [r0, #0]
    13bc:	6042      	str	r2, [r0, #4]
    13be:	0019      	movs	r1, r3
    13c0:	230f      	movs	r3, #15
    13c2:	18fb      	adds	r3, r7, r3
    13c4:	1c22      	adds	r2, r4, #0
    13c6:	701a      	strb	r2, [r3, #0]
    13c8:	230e      	movs	r3, #14
    13ca:	18fb      	adds	r3, r7, r3
    13cc:	1c0a      	adds	r2, r1, #0
    13ce:	701a      	strb	r2, [r3, #0]
	char bitmap;
	Serial.print(F("addMove, player = "));
    13d0:	4a34      	ldr	r2, [pc, #208]	; (14a4 <_Z7addMoveh8TS_Point5State+0xf4>)
    13d2:	4b35      	ldr	r3, [pc, #212]	; (14a8 <_Z7addMoveh8TS_Point5State+0xf8>)
    13d4:	0011      	movs	r1, r2
    13d6:	0018      	movs	r0, r3
    13d8:	f001 fdc9 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(player);
    13dc:	230e      	movs	r3, #14
    13de:	18fb      	adds	r3, r7, r3
    13e0:	7819      	ldrb	r1, [r3, #0]
    13e2:	4b31      	ldr	r3, [pc, #196]	; (14a8 <_Z7addMoveh8TS_Point5State+0xf8>)
    13e4:	220a      	movs	r2, #10
    13e6:	0018      	movs	r0, r3
    13e8:	f001 feff 	bl	31ea <_ZN5Print7printlnEii>
	if (player == cross) {
    13ec:	230e      	movs	r3, #14
    13ee:	18fb      	adds	r3, r7, r3
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	2b02      	cmp	r3, #2
    13f4:	d125      	bne.n	1442 <_Z7addMoveh8TS_Point5State+0x92>
		Serial.println(F("this might be a cross"));
    13f6:	4a2d      	ldr	r2, [pc, #180]	; (14ac <_Z7addMoveh8TS_Point5State+0xfc>)
    13f8:	4b2b      	ldr	r3, [pc, #172]	; (14a8 <_Z7addMoveh8TS_Point5State+0xf8>)
    13fa:	0011      	movs	r1, r2
    13fc:	0018      	movs	r0, r3
    13fe:	f001 fe71 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if (square % 2) {
    1402:	230f      	movs	r3, #15
    1404:	18fb      	adds	r3, r7, r3
    1406:	781b      	ldrb	r3, [r3, #0]
    1408:	2201      	movs	r2, #1
    140a:	4013      	ands	r3, r2
    140c:	d004      	beq.n	1418 <_Z7addMoveh8TS_Point5State+0x68>
			bitmap = 'j';
    140e:	2317      	movs	r3, #23
    1410:	18fb      	adds	r3, r7, r3
    1412:	226a      	movs	r2, #106	; 0x6a
    1414:	701a      	strb	r2, [r3, #0]
    1416:	e003      	b.n	1420 <_Z7addMoveh8TS_Point5State+0x70>
			} else {
			bitmap = 'k';
    1418:	2317      	movs	r3, #23
    141a:	18fb      	adds	r3, r7, r3
    141c:	226b      	movs	r2, #107	; 0x6b
    141e:	701a      	strb	r2, [r3, #0]
		}
		drawBitmap(bitmap, marker.x, marker.y);
    1420:	1d3b      	adds	r3, r7, #4
    1422:	2100      	movs	r1, #0
    1424:	5e59      	ldrsh	r1, [r3, r1]
    1426:	1d3b      	adds	r3, r7, #4
    1428:	2202      	movs	r2, #2
    142a:	5e9a      	ldrsh	r2, [r3, r2]
    142c:	2317      	movs	r3, #23
    142e:	18fb      	adds	r3, r7, r3
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	0018      	movs	r0, r3
    1434:	f7fe ff16 	bl	264 <_Z10drawBitmapcss>
		// Change players
		player = nought;
    1438:	230e      	movs	r3, #14
    143a:	18fb      	adds	r3, r7, r3
    143c:	2201      	movs	r2, #1
    143e:	701a      	strb	r2, [r3, #0]
    1440:	e028      	b.n	1494 <_Z7addMoveh8TS_Point5State+0xe4>
		} else {
		Serial.println(F("this might be a nought"));
    1442:	4a1b      	ldr	r2, [pc, #108]	; (14b0 <_Z7addMoveh8TS_Point5State+0x100>)
    1444:	4b18      	ldr	r3, [pc, #96]	; (14a8 <_Z7addMoveh8TS_Point5State+0xf8>)
    1446:	0011      	movs	r1, r2
    1448:	0018      	movs	r0, r3
    144a:	f001 fe4b 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if (square % 2) {
    144e:	230f      	movs	r3, #15
    1450:	18fb      	adds	r3, r7, r3
    1452:	781b      	ldrb	r3, [r3, #0]
    1454:	2201      	movs	r2, #1
    1456:	4013      	ands	r3, r2
    1458:	d004      	beq.n	1464 <_Z7addMoveh8TS_Point5State+0xb4>
			bitmap = 'h';
    145a:	2317      	movs	r3, #23
    145c:	18fb      	adds	r3, r7, r3
    145e:	2268      	movs	r2, #104	; 0x68
    1460:	701a      	strb	r2, [r3, #0]
    1462:	e003      	b.n	146c <_Z7addMoveh8TS_Point5State+0xbc>
			} else {
			bitmap = 'i';
    1464:	2317      	movs	r3, #23
    1466:	18fb      	adds	r3, r7, r3
    1468:	2269      	movs	r2, #105	; 0x69
    146a:	701a      	strb	r2, [r3, #0]
		}
		drawBitmap(bitmap, marker.x - 2, marker.y);
    146c:	1d3b      	adds	r3, r7, #4
    146e:	2200      	movs	r2, #0
    1470:	5e9b      	ldrsh	r3, [r3, r2]
    1472:	b29b      	uxth	r3, r3
    1474:	3b02      	subs	r3, #2
    1476:	b29b      	uxth	r3, r3
    1478:	b219      	sxth	r1, r3
    147a:	1d3b      	adds	r3, r7, #4
    147c:	2202      	movs	r2, #2
    147e:	5e9a      	ldrsh	r2, [r3, r2]
    1480:	2317      	movs	r3, #23
    1482:	18fb      	adds	r3, r7, r3
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	0018      	movs	r0, r3
    1488:	f7fe feec 	bl	264 <_Z10drawBitmapcss>
		// Change players
		player = cross;
    148c:	230e      	movs	r3, #14
    148e:	18fb      	adds	r3, r7, r3
    1490:	2202      	movs	r2, #2
    1492:	701a      	strb	r2, [r3, #0]
	}
	return player;
    1494:	230e      	movs	r3, #14
    1496:	18fb      	adds	r3, r7, r3
    1498:	781b      	ldrb	r3, [r3, #0]
}
    149a:	0018      	movs	r0, r3
    149c:	46bd      	mov	sp, r7
    149e:	b007      	add	sp, #28
    14a0:	bd90      	pop	{r4, r7, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	0001329c 	.word	0x0001329c
    14a8:	20000e94 	.word	0x20000e94
    14ac:	000132b0 	.word	0x000132b0
    14b0:	000132c8 	.word	0x000132c8

000014b4 <_Z11updateScoreii>:

void updateScore(int noughtsScore, int crossesScore) {
    14b4:	b590      	push	{r4, r7, lr}
    14b6:	b08b      	sub	sp, #44	; 0x2c
    14b8:	af00      	add	r7, sp, #0
    14ba:	6078      	str	r0, [r7, #4]
    14bc:	6039      	str	r1, [r7, #0]
	String s = (String) noughtsScore;
    14be:	6879      	ldr	r1, [r7, #4]
    14c0:	230c      	movs	r3, #12
    14c2:	18fb      	adds	r3, r7, r3
    14c4:	220a      	movs	r2, #10
    14c6:	0018      	movs	r0, r3
    14c8:	f005 fd0d 	bl	6ee6 <_ZN6StringC1Eih>
	char newScore = s.charAt(0);
    14cc:	2327      	movs	r3, #39	; 0x27
    14ce:	18fc      	adds	r4, r7, r3
    14d0:	230c      	movs	r3, #12
    14d2:	18fb      	adds	r3, r7, r3
    14d4:	2100      	movs	r1, #0
    14d6:	0018      	movs	r0, r3
    14d8:	f005 fe52 	bl	7180 <_ZNK6String6charAtEj>
    14dc:	0003      	movs	r3, r0
    14de:	7023      	strb	r3, [r4, #0]
	drawBitmap(newScore, 95, 29);
    14e0:	2327      	movs	r3, #39	; 0x27
    14e2:	18fb      	adds	r3, r7, r3
    14e4:	781b      	ldrb	r3, [r3, #0]
    14e6:	221d      	movs	r2, #29
    14e8:	215f      	movs	r1, #95	; 0x5f
    14ea:	0018      	movs	r0, r3
    14ec:	f7fe feba 	bl	264 <_Z10drawBitmapcss>
	s = (String) crossesScore;
    14f0:	6839      	ldr	r1, [r7, #0]
    14f2:	2318      	movs	r3, #24
    14f4:	18fb      	adds	r3, r7, r3
    14f6:	220a      	movs	r2, #10
    14f8:	0018      	movs	r0, r3
    14fa:	f005 fcf4 	bl	6ee6 <_ZN6StringC1Eih>
    14fe:	2318      	movs	r3, #24
    1500:	18fa      	adds	r2, r7, r3
    1502:	230c      	movs	r3, #12
    1504:	18fb      	adds	r3, r7, r3
    1506:	0011      	movs	r1, r2
    1508:	0018      	movs	r0, r3
    150a:	f005 fe09 	bl	7120 <_ZN6StringaSEOS_>
    150e:	2318      	movs	r3, #24
    1510:	18fb      	adds	r3, r7, r3
    1512:	0018      	movs	r0, r3
    1514:	f005 fd06 	bl	6f24 <_ZN6StringD1Ev>
	newScore = s.charAt(0);
    1518:	2327      	movs	r3, #39	; 0x27
    151a:	18fc      	adds	r4, r7, r3
    151c:	230c      	movs	r3, #12
    151e:	18fb      	adds	r3, r7, r3
    1520:	2100      	movs	r1, #0
    1522:	0018      	movs	r0, r3
    1524:	f005 fe2c 	bl	7180 <_ZNK6String6charAtEj>
    1528:	0003      	movs	r3, r0
    152a:	7023      	strb	r3, [r4, #0]
	drawBitmap(newScore, 132, 28);
    152c:	2327      	movs	r3, #39	; 0x27
    152e:	18fb      	adds	r3, r7, r3
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	221c      	movs	r2, #28
    1534:	2184      	movs	r1, #132	; 0x84
    1536:	0018      	movs	r0, r3
    1538:	f7fe fe94 	bl	264 <_Z10drawBitmapcss>
	String s = (String) noughtsScore;
    153c:	230c      	movs	r3, #12
    153e:	18fb      	adds	r3, r7, r3
    1540:	0018      	movs	r0, r3
    1542:	f005 fcef 	bl	6f24 <_ZN6StringD1Ev>
}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	46bd      	mov	sp, r7
    154a:	b00b      	add	sp, #44	; 0x2c
    154c:	bd90      	pop	{r4, r7, pc}

0000154e <_Z9getSquare8TS_Point>:

uint8_t getSquare(TS_Point point) {
    154e:	b580      	push	{r7, lr}
    1550:	b084      	sub	sp, #16
    1552:	af00      	add	r7, sp, #0
    1554:	003b      	movs	r3, r7
    1556:	6018      	str	r0, [r3, #0]
    1558:	6059      	str	r1, [r3, #4]
	uint8_t square = 255;
    155a:	230f      	movs	r3, #15
    155c:	18fb      	adds	r3, r7, r3
    155e:	22ff      	movs	r2, #255	; 0xff
    1560:	701a      	strb	r2, [r3, #0]
	if (point.y > 79 && point.y < 161) {
    1562:	003b      	movs	r3, r7
    1564:	2202      	movs	r2, #2
    1566:	5e9b      	ldrsh	r3, [r3, r2]
    1568:	2b4f      	cmp	r3, #79	; 0x4f
    156a:	dd22      	ble.n	15b2 <_Z9getSquare8TS_Point+0x64>
    156c:	003b      	movs	r3, r7
    156e:	2202      	movs	r2, #2
    1570:	5e9b      	ldrsh	r3, [r3, r2]
    1572:	2ba0      	cmp	r3, #160	; 0xa0
    1574:	dc1d      	bgt.n	15b2 <_Z9getSquare8TS_Point+0x64>
		if (point.x < 81) {
    1576:	003b      	movs	r3, r7
    1578:	2200      	movs	r2, #0
    157a:	5e9b      	ldrsh	r3, [r3, r2]
    157c:	2b50      	cmp	r3, #80	; 0x50
    157e:	dc04      	bgt.n	158a <_Z9getSquare8TS_Point+0x3c>
			square = 0;
    1580:	230f      	movs	r3, #15
    1582:	18fb      	adds	r3, r7, r3
    1584:	2200      	movs	r2, #0
    1586:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1588:	e05e      	b.n	1648 <_Z9getSquare8TS_Point+0xfa>
			} else if (point.x < 161) {
    158a:	003b      	movs	r3, r7
    158c:	2200      	movs	r2, #0
    158e:	5e9b      	ldrsh	r3, [r3, r2]
    1590:	2ba0      	cmp	r3, #160	; 0xa0
    1592:	dc04      	bgt.n	159e <_Z9getSquare8TS_Point+0x50>
			square = 1;
    1594:	230f      	movs	r3, #15
    1596:	18fb      	adds	r3, r7, r3
    1598:	2201      	movs	r2, #1
    159a:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    159c:	e054      	b.n	1648 <_Z9getSquare8TS_Point+0xfa>
			} else if (point.x < 240) {
    159e:	003b      	movs	r3, r7
    15a0:	2200      	movs	r2, #0
    15a2:	5e9b      	ldrsh	r3, [r3, r2]
    15a4:	2bef      	cmp	r3, #239	; 0xef
    15a6:	dc4f      	bgt.n	1648 <_Z9getSquare8TS_Point+0xfa>
			square = 2;
    15a8:	230f      	movs	r3, #15
    15aa:	18fb      	adds	r3, r7, r3
    15ac:	2202      	movs	r2, #2
    15ae:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15b0:	e04a      	b.n	1648 <_Z9getSquare8TS_Point+0xfa>
		}

		} else if (point.y > 160 && point.y < 241) {
    15b2:	003b      	movs	r3, r7
    15b4:	2202      	movs	r2, #2
    15b6:	5e9b      	ldrsh	r3, [r3, r2]
    15b8:	2ba0      	cmp	r3, #160	; 0xa0
    15ba:	dd22      	ble.n	1602 <_Z9getSquare8TS_Point+0xb4>
    15bc:	003b      	movs	r3, r7
    15be:	2202      	movs	r2, #2
    15c0:	5e9b      	ldrsh	r3, [r3, r2]
    15c2:	2bf0      	cmp	r3, #240	; 0xf0
    15c4:	dc1d      	bgt.n	1602 <_Z9getSquare8TS_Point+0xb4>
		if (point.x < 81) {
    15c6:	003b      	movs	r3, r7
    15c8:	2200      	movs	r2, #0
    15ca:	5e9b      	ldrsh	r3, [r3, r2]
    15cc:	2b50      	cmp	r3, #80	; 0x50
    15ce:	dc04      	bgt.n	15da <_Z9getSquare8TS_Point+0x8c>
			square = 3;
    15d0:	230f      	movs	r3, #15
    15d2:	18fb      	adds	r3, r7, r3
    15d4:	2203      	movs	r2, #3
    15d6:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15d8:	e038      	b.n	164c <_Z9getSquare8TS_Point+0xfe>
			} else if (point.x < 161) {
    15da:	003b      	movs	r3, r7
    15dc:	2200      	movs	r2, #0
    15de:	5e9b      	ldrsh	r3, [r3, r2]
    15e0:	2ba0      	cmp	r3, #160	; 0xa0
    15e2:	dc04      	bgt.n	15ee <_Z9getSquare8TS_Point+0xa0>
			square = 4;
    15e4:	230f      	movs	r3, #15
    15e6:	18fb      	adds	r3, r7, r3
    15e8:	2204      	movs	r2, #4
    15ea:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15ec:	e02e      	b.n	164c <_Z9getSquare8TS_Point+0xfe>
			} else if (point.x < 240) {
    15ee:	003b      	movs	r3, r7
    15f0:	2200      	movs	r2, #0
    15f2:	5e9b      	ldrsh	r3, [r3, r2]
    15f4:	2bef      	cmp	r3, #239	; 0xef
    15f6:	dc29      	bgt.n	164c <_Z9getSquare8TS_Point+0xfe>
			square = 5;
    15f8:	230f      	movs	r3, #15
    15fa:	18fb      	adds	r3, r7, r3
    15fc:	2205      	movs	r2, #5
    15fe:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1600:	e024      	b.n	164c <_Z9getSquare8TS_Point+0xfe>
		}

		} else if (point.y > 240) {
    1602:	003b      	movs	r3, r7
    1604:	2202      	movs	r2, #2
    1606:	5e9b      	ldrsh	r3, [r3, r2]
    1608:	2bf0      	cmp	r3, #240	; 0xf0
    160a:	dd20      	ble.n	164e <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    160c:	003b      	movs	r3, r7
    160e:	2200      	movs	r2, #0
    1610:	5e9b      	ldrsh	r3, [r3, r2]
    1612:	2b50      	cmp	r3, #80	; 0x50
    1614:	dc04      	bgt.n	1620 <_Z9getSquare8TS_Point+0xd2>
			square = 6;
    1616:	230f      	movs	r3, #15
    1618:	18fb      	adds	r3, r7, r3
    161a:	2206      	movs	r2, #6
    161c:	701a      	strb	r2, [r3, #0]
    161e:	e016      	b.n	164e <_Z9getSquare8TS_Point+0x100>
			} else if (point.x < 161) {
    1620:	003b      	movs	r3, r7
    1622:	2200      	movs	r2, #0
    1624:	5e9b      	ldrsh	r3, [r3, r2]
    1626:	2ba0      	cmp	r3, #160	; 0xa0
    1628:	dc04      	bgt.n	1634 <_Z9getSquare8TS_Point+0xe6>
			square = 7;
    162a:	230f      	movs	r3, #15
    162c:	18fb      	adds	r3, r7, r3
    162e:	2207      	movs	r2, #7
    1630:	701a      	strb	r2, [r3, #0]
    1632:	e00c      	b.n	164e <_Z9getSquare8TS_Point+0x100>
			} else if (point.x < 240) {
    1634:	003b      	movs	r3, r7
    1636:	2200      	movs	r2, #0
    1638:	5e9b      	ldrsh	r3, [r3, r2]
    163a:	2bef      	cmp	r3, #239	; 0xef
    163c:	dc07      	bgt.n	164e <_Z9getSquare8TS_Point+0x100>
			square = 8;
    163e:	230f      	movs	r3, #15
    1640:	18fb      	adds	r3, r7, r3
    1642:	2208      	movs	r2, #8
    1644:	701a      	strb	r2, [r3, #0]
    1646:	e002      	b.n	164e <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1648:	46c0      	nop			; (mov r8, r8)
    164a:	e000      	b.n	164e <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    164c:	46c0      	nop			; (mov r8, r8)
		}
	}
	return square;
    164e:	230f      	movs	r3, #15
    1650:	18fb      	adds	r3, r7, r3
    1652:	781b      	ldrb	r3, [r3, #0]
}
    1654:	0018      	movs	r0, r3
    1656:	46bd      	mov	sp, r7
    1658:	b004      	add	sp, #16
    165a:	bd80      	pop	{r7, pc}

0000165c <_Z18getCounterPositionh>:

TS_Point getCounterPosition(uint8_t square) {
    165c:	b580      	push	{r7, lr}
    165e:	b082      	sub	sp, #8
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
    1664:	000a      	movs	r2, r1
    1666:	1cfb      	adds	r3, r7, #3
    1668:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    166a:	687b      	ldr	r3, [r7, #4]
    166c:	0018      	movs	r0, r3
    166e:	f005 ffb1 	bl	75d4 <_ZN8TS_PointC1Ev>
	if (square == 0 || square == 3 || square == 6) {
    1672:	1cfb      	adds	r3, r7, #3
    1674:	781b      	ldrb	r3, [r3, #0]
    1676:	2b00      	cmp	r3, #0
    1678:	d007      	beq.n	168a <_Z18getCounterPositionh+0x2e>
    167a:	1cfb      	adds	r3, r7, #3
    167c:	781b      	ldrb	r3, [r3, #0]
    167e:	2b03      	cmp	r3, #3
    1680:	d003      	beq.n	168a <_Z18getCounterPositionh+0x2e>
    1682:	1cfb      	adds	r3, r7, #3
    1684:	781b      	ldrb	r3, [r3, #0]
    1686:	2b06      	cmp	r3, #6
    1688:	d103      	bne.n	1692 <_Z18getCounterPositionh+0x36>
		counterPos.x = 0;
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	2200      	movs	r2, #0
    168e:	801a      	strh	r2, [r3, #0]
    1690:	e012      	b.n	16b8 <_Z18getCounterPositionh+0x5c>
	} else if (square == 1 || square == 4 || square == 7) {
    1692:	1cfb      	adds	r3, r7, #3
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	2b01      	cmp	r3, #1
    1698:	d007      	beq.n	16aa <_Z18getCounterPositionh+0x4e>
    169a:	1cfb      	adds	r3, r7, #3
    169c:	781b      	ldrb	r3, [r3, #0]
    169e:	2b04      	cmp	r3, #4
    16a0:	d003      	beq.n	16aa <_Z18getCounterPositionh+0x4e>
    16a2:	1cfb      	adds	r3, r7, #3
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	2b07      	cmp	r3, #7
    16a8:	d103      	bne.n	16b2 <_Z18getCounterPositionh+0x56>
		counterPos.x = 80;
    16aa:	687b      	ldr	r3, [r7, #4]
    16ac:	2250      	movs	r2, #80	; 0x50
    16ae:	801a      	strh	r2, [r3, #0]
    16b0:	e002      	b.n	16b8 <_Z18getCounterPositionh+0x5c>
	} else {
		counterPos.x = 160;
    16b2:	687b      	ldr	r3, [r7, #4]
    16b4:	22a0      	movs	r2, #160	; 0xa0
    16b6:	801a      	strh	r2, [r3, #0]
	}
	
	if (square == 0 || square == 1 || square == 2) {
    16b8:	1cfb      	adds	r3, r7, #3
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	2b00      	cmp	r3, #0
    16be:	d007      	beq.n	16d0 <_Z18getCounterPositionh+0x74>
    16c0:	1cfb      	adds	r3, r7, #3
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	2b01      	cmp	r3, #1
    16c6:	d003      	beq.n	16d0 <_Z18getCounterPositionh+0x74>
    16c8:	1cfb      	adds	r3, r7, #3
    16ca:	781b      	ldrb	r3, [r3, #0]
    16cc:	2b02      	cmp	r3, #2
    16ce:	d103      	bne.n	16d8 <_Z18getCounterPositionh+0x7c>
		counterPos.y = 80;
    16d0:	687b      	ldr	r3, [r7, #4]
    16d2:	2250      	movs	r2, #80	; 0x50
    16d4:	805a      	strh	r2, [r3, #2]
    16d6:	e012      	b.n	16fe <_Z18getCounterPositionh+0xa2>
	} else if (square == 3 || square == 4 || square == 5) {
    16d8:	1cfb      	adds	r3, r7, #3
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	2b03      	cmp	r3, #3
    16de:	d007      	beq.n	16f0 <_Z18getCounterPositionh+0x94>
    16e0:	1cfb      	adds	r3, r7, #3
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	2b04      	cmp	r3, #4
    16e6:	d003      	beq.n	16f0 <_Z18getCounterPositionh+0x94>
    16e8:	1cfb      	adds	r3, r7, #3
    16ea:	781b      	ldrb	r3, [r3, #0]
    16ec:	2b05      	cmp	r3, #5
    16ee:	d103      	bne.n	16f8 <_Z18getCounterPositionh+0x9c>
		counterPos.y = 160;
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	22a0      	movs	r2, #160	; 0xa0
    16f4:	805a      	strh	r2, [r3, #2]
    16f6:	e002      	b.n	16fe <_Z18getCounterPositionh+0xa2>
	} else {
		counterPos.y = 240;
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	22f0      	movs	r2, #240	; 0xf0
    16fc:	805a      	strh	r2, [r3, #2]
	}
	return counterPos;
    16fe:	46c0      	nop			; (mov r8, r8)
}
    1700:	6878      	ldr	r0, [r7, #4]
    1702:	46bd      	mov	sp, r7
    1704:	b002      	add	sp, #8
    1706:	bd80      	pop	{r7, pc}

00001708 <_Z23getSmallCounterPositionhh>:

TS_Point getSmallCounterPosition(uint8_t square, uint8_t turn) {
    1708:	b590      	push	{r4, r7, lr}
    170a:	b085      	sub	sp, #20
    170c:	af00      	add	r7, sp, #0
    170e:	60f8      	str	r0, [r7, #12]
    1710:	0008      	movs	r0, r1
    1712:	0011      	movs	r1, r2
    1714:	230b      	movs	r3, #11
    1716:	18fb      	adds	r3, r7, r3
    1718:	1c02      	adds	r2, r0, #0
    171a:	701a      	strb	r2, [r3, #0]
    171c:	230a      	movs	r3, #10
    171e:	18fb      	adds	r3, r7, r3
    1720:	1c0a      	adds	r2, r1, #0
    1722:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    1724:	68fb      	ldr	r3, [r7, #12]
    1726:	0018      	movs	r0, r3
    1728:	f005 ff54 	bl	75d4 <_ZN8TS_PointC1Ev>
	
	counterPos = getCounterPosition(square);
    172c:	68fc      	ldr	r4, [r7, #12]
    172e:	003a      	movs	r2, r7
    1730:	230b      	movs	r3, #11
    1732:	18fb      	adds	r3, r7, r3
    1734:	781b      	ldrb	r3, [r3, #0]
    1736:	0019      	movs	r1, r3
    1738:	0010      	movs	r0, r2
    173a:	f7ff ff8f 	bl	165c <_Z18getCounterPositionh>
    173e:	003b      	movs	r3, r7
    1740:	0020      	movs	r0, r4
    1742:	0019      	movs	r1, r3
    1744:	2306      	movs	r3, #6
    1746:	001a      	movs	r2, r3
    1748:	f00f f863 	bl	10812 <memcpy>
	
	if (turn == 1 || turn == 4 || turn == 7) {
    174c:	230a      	movs	r3, #10
    174e:	18fb      	adds	r3, r7, r3
    1750:	781b      	ldrb	r3, [r3, #0]
    1752:	2b01      	cmp	r3, #1
    1754:	d009      	beq.n	176a <_Z23getSmallCounterPositionhh+0x62>
    1756:	230a      	movs	r3, #10
    1758:	18fb      	adds	r3, r7, r3
    175a:	781b      	ldrb	r3, [r3, #0]
    175c:	2b04      	cmp	r3, #4
    175e:	d004      	beq.n	176a <_Z23getSmallCounterPositionhh+0x62>
    1760:	230a      	movs	r3, #10
    1762:	18fb      	adds	r3, r7, r3
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	2b07      	cmp	r3, #7
    1768:	d109      	bne.n	177e <_Z23getSmallCounterPositionhh+0x76>
		counterPos.x += 1;
    176a:	68fb      	ldr	r3, [r7, #12]
    176c:	2200      	movs	r2, #0
    176e:	5e9b      	ldrsh	r3, [r3, r2]
    1770:	b29b      	uxth	r3, r3
    1772:	3301      	adds	r3, #1
    1774:	b29b      	uxth	r3, r3
    1776:	b21a      	sxth	r2, r3
    1778:	68fb      	ldr	r3, [r7, #12]
    177a:	801a      	strh	r2, [r3, #0]
    177c:	e021      	b.n	17c2 <_Z23getSmallCounterPositionhh+0xba>
		} else if (turn == 2 || turn == 5 || turn == 8) {
    177e:	230a      	movs	r3, #10
    1780:	18fb      	adds	r3, r7, r3
    1782:	781b      	ldrb	r3, [r3, #0]
    1784:	2b02      	cmp	r3, #2
    1786:	d009      	beq.n	179c <_Z23getSmallCounterPositionhh+0x94>
    1788:	230a      	movs	r3, #10
    178a:	18fb      	adds	r3, r7, r3
    178c:	781b      	ldrb	r3, [r3, #0]
    178e:	2b05      	cmp	r3, #5
    1790:	d004      	beq.n	179c <_Z23getSmallCounterPositionhh+0x94>
    1792:	230a      	movs	r3, #10
    1794:	18fb      	adds	r3, r7, r3
    1796:	781b      	ldrb	r3, [r3, #0]
    1798:	2b08      	cmp	r3, #8
    179a:	d109      	bne.n	17b0 <_Z23getSmallCounterPositionhh+0xa8>
		counterPos.x += 27;
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	2200      	movs	r2, #0
    17a0:	5e9b      	ldrsh	r3, [r3, r2]
    17a2:	b29b      	uxth	r3, r3
    17a4:	331b      	adds	r3, #27
    17a6:	b29b      	uxth	r3, r3
    17a8:	b21a      	sxth	r2, r3
    17aa:	68fb      	ldr	r3, [r7, #12]
    17ac:	801a      	strh	r2, [r3, #0]
    17ae:	e008      	b.n	17c2 <_Z23getSmallCounterPositionhh+0xba>
		} else {
		counterPos.x += 53;
    17b0:	68fb      	ldr	r3, [r7, #12]
    17b2:	2200      	movs	r2, #0
    17b4:	5e9b      	ldrsh	r3, [r3, r2]
    17b6:	b29b      	uxth	r3, r3
    17b8:	3335      	adds	r3, #53	; 0x35
    17ba:	b29b      	uxth	r3, r3
    17bc:	b21a      	sxth	r2, r3
    17be:	68fb      	ldr	r3, [r7, #12]
    17c0:	801a      	strh	r2, [r3, #0]
	}
		
	if (turn == 1 || turn == 2 || turn == 3) {
    17c2:	230a      	movs	r3, #10
    17c4:	18fb      	adds	r3, r7, r3
    17c6:	781b      	ldrb	r3, [r3, #0]
    17c8:	2b01      	cmp	r3, #1
    17ca:	d009      	beq.n	17e0 <_Z23getSmallCounterPositionhh+0xd8>
    17cc:	230a      	movs	r3, #10
    17ce:	18fb      	adds	r3, r7, r3
    17d0:	781b      	ldrb	r3, [r3, #0]
    17d2:	2b02      	cmp	r3, #2
    17d4:	d004      	beq.n	17e0 <_Z23getSmallCounterPositionhh+0xd8>
    17d6:	230a      	movs	r3, #10
    17d8:	18fb      	adds	r3, r7, r3
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	2b03      	cmp	r3, #3
    17de:	d109      	bne.n	17f4 <_Z23getSmallCounterPositionhh+0xec>
		counterPos.y += 1;
    17e0:	68fb      	ldr	r3, [r7, #12]
    17e2:	2202      	movs	r2, #2
    17e4:	5e9b      	ldrsh	r3, [r3, r2]
    17e6:	b29b      	uxth	r3, r3
    17e8:	3301      	adds	r3, #1
    17ea:	b29b      	uxth	r3, r3
    17ec:	b21a      	sxth	r2, r3
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	805a      	strh	r2, [r3, #2]
    17f2:	e021      	b.n	1838 <_Z23getSmallCounterPositionhh+0x130>
		} else if (turn == 4 || turn == 5 || turn == 6) {
    17f4:	230a      	movs	r3, #10
    17f6:	18fb      	adds	r3, r7, r3
    17f8:	781b      	ldrb	r3, [r3, #0]
    17fa:	2b04      	cmp	r3, #4
    17fc:	d009      	beq.n	1812 <_Z23getSmallCounterPositionhh+0x10a>
    17fe:	230a      	movs	r3, #10
    1800:	18fb      	adds	r3, r7, r3
    1802:	781b      	ldrb	r3, [r3, #0]
    1804:	2b05      	cmp	r3, #5
    1806:	d004      	beq.n	1812 <_Z23getSmallCounterPositionhh+0x10a>
    1808:	230a      	movs	r3, #10
    180a:	18fb      	adds	r3, r7, r3
    180c:	781b      	ldrb	r3, [r3, #0]
    180e:	2b06      	cmp	r3, #6
    1810:	d109      	bne.n	1826 <_Z23getSmallCounterPositionhh+0x11e>
		counterPos.y += 27;
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	2202      	movs	r2, #2
    1816:	5e9b      	ldrsh	r3, [r3, r2]
    1818:	b29b      	uxth	r3, r3
    181a:	331b      	adds	r3, #27
    181c:	b29b      	uxth	r3, r3
    181e:	b21a      	sxth	r2, r3
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	805a      	strh	r2, [r3, #2]
    1824:	e008      	b.n	1838 <_Z23getSmallCounterPositionhh+0x130>
		} else {
		counterPos.y += 53;
    1826:	68fb      	ldr	r3, [r7, #12]
    1828:	2202      	movs	r2, #2
    182a:	5e9b      	ldrsh	r3, [r3, r2]
    182c:	b29b      	uxth	r3, r3
    182e:	3335      	adds	r3, #53	; 0x35
    1830:	b29b      	uxth	r3, r3
    1832:	b21a      	sxth	r2, r3
    1834:	68fb      	ldr	r3, [r7, #12]
    1836:	805a      	strh	r2, [r3, #2]
	}
	
	return counterPos;
    1838:	46c0      	nop			; (mov r8, r8)
}
    183a:	68f8      	ldr	r0, [r7, #12]
    183c:	46bd      	mov	sp, r7
    183e:	b005      	add	sp, #20
    1840:	bd90      	pop	{r4, r7, pc}

00001842 <_Z16drawSmallCounterhhb>:

void drawSmallCounter(uint8_t square, uint8_t turn, boolean bold) {
    1842:	b590      	push	{r4, r7, lr}
    1844:	b08d      	sub	sp, #52	; 0x34
    1846:	af00      	add	r7, sp, #0
    1848:	0004      	movs	r4, r0
    184a:	0008      	movs	r0, r1
    184c:	0011      	movs	r1, r2
    184e:	230f      	movs	r3, #15
    1850:	18fb      	adds	r3, r7, r3
    1852:	1c22      	adds	r2, r4, #0
    1854:	701a      	strb	r2, [r3, #0]
    1856:	230e      	movs	r3, #14
    1858:	18fb      	adds	r3, r7, r3
    185a:	1c02      	adds	r2, r0, #0
    185c:	701a      	strb	r2, [r3, #0]
    185e:	230d      	movs	r3, #13
    1860:	18fb      	adds	r3, r7, r3
    1862:	1c0a      	adds	r2, r1, #0
    1864:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    1866:	2318      	movs	r3, #24
    1868:	18fb      	adds	r3, r7, r3
    186a:	0018      	movs	r0, r3
    186c:	f005 feb2 	bl	75d4 <_ZN8TS_PointC1Ev>
	
	counterPos = getSmallCounterPosition(square, turn);
    1870:	2318      	movs	r3, #24
    1872:	18fc      	adds	r4, r7, r3
    1874:	0038      	movs	r0, r7
    1876:	230e      	movs	r3, #14
    1878:	18fb      	adds	r3, r7, r3
    187a:	781a      	ldrb	r2, [r3, #0]
    187c:	230f      	movs	r3, #15
    187e:	18fb      	adds	r3, r7, r3
    1880:	781b      	ldrb	r3, [r3, #0]
    1882:	0019      	movs	r1, r3
    1884:	f7ff ff40 	bl	1708 <_Z23getSmallCounterPositionhh>
    1888:	003b      	movs	r3, r7
    188a:	0020      	movs	r0, r4
    188c:	0019      	movs	r1, r3
    188e:	2306      	movs	r3, #6
    1890:	001a      	movs	r2, r3
    1892:	f00e ffbe 	bl	10812 <memcpy>
	
	char bg;
	if (square % 2) {
    1896:	230f      	movs	r3, #15
    1898:	18fb      	adds	r3, r7, r3
    189a:	781b      	ldrb	r3, [r3, #0]
    189c:	2201      	movs	r2, #1
    189e:	4013      	ands	r3, r2
    18a0:	d004      	beq.n	18ac <_Z16drawSmallCounterhhb+0x6a>
		bg = 'b';
    18a2:	232f      	movs	r3, #47	; 0x2f
    18a4:	18fb      	adds	r3, r7, r3
    18a6:	2262      	movs	r2, #98	; 0x62
    18a8:	701a      	strb	r2, [r3, #0]
    18aa:	e003      	b.n	18b4 <_Z16drawSmallCounterhhb+0x72>
	} else {
		bg = 'w';
    18ac:	232f      	movs	r3, #47	; 0x2f
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	2277      	movs	r2, #119	; 0x77
    18b2:	701a      	strb	r2, [r3, #0]
	}
	
	char type = 'c';
    18b4:	232e      	movs	r3, #46	; 0x2e
    18b6:	18fb      	adds	r3, r7, r3
    18b8:	2263      	movs	r2, #99	; 0x63
    18ba:	701a      	strb	r2, [r3, #0]
	if (bold) type = 'b';
    18bc:	230d      	movs	r3, #13
    18be:	18fb      	adds	r3, r7, r3
    18c0:	781b      	ldrb	r3, [r3, #0]
    18c2:	2b00      	cmp	r3, #0
    18c4:	d003      	beq.n	18ce <_Z16drawSmallCounterhhb+0x8c>
    18c6:	232e      	movs	r3, #46	; 0x2e
    18c8:	18fb      	adds	r3, r7, r3
    18ca:	2262      	movs	r2, #98	; 0x62
    18cc:	701a      	strb	r2, [r3, #0]
	
	char bitmap[8] = {bg, type, ((String) turn).charAt(0), '.', 'b', 'm', 'p'};
    18ce:	2310      	movs	r3, #16
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	0018      	movs	r0, r3
    18d4:	2308      	movs	r3, #8
    18d6:	001a      	movs	r2, r3
    18d8:	2100      	movs	r1, #0
    18da:	f00e ffa3 	bl	10824 <memset>
    18de:	2310      	movs	r3, #16
    18e0:	18fb      	adds	r3, r7, r3
    18e2:	222e      	movs	r2, #46	; 0x2e
    18e4:	70da      	strb	r2, [r3, #3]
    18e6:	2310      	movs	r3, #16
    18e8:	18fb      	adds	r3, r7, r3
    18ea:	2262      	movs	r2, #98	; 0x62
    18ec:	711a      	strb	r2, [r3, #4]
    18ee:	2310      	movs	r3, #16
    18f0:	18fb      	adds	r3, r7, r3
    18f2:	226d      	movs	r2, #109	; 0x6d
    18f4:	715a      	strb	r2, [r3, #5]
    18f6:	2310      	movs	r3, #16
    18f8:	18fb      	adds	r3, r7, r3
    18fa:	2270      	movs	r2, #112	; 0x70
    18fc:	719a      	strb	r2, [r3, #6]
    18fe:	2310      	movs	r3, #16
    1900:	18fb      	adds	r3, r7, r3
    1902:	222f      	movs	r2, #47	; 0x2f
    1904:	18ba      	adds	r2, r7, r2
    1906:	7812      	ldrb	r2, [r2, #0]
    1908:	701a      	strb	r2, [r3, #0]
    190a:	2310      	movs	r3, #16
    190c:	18fb      	adds	r3, r7, r3
    190e:	222e      	movs	r2, #46	; 0x2e
    1910:	18ba      	adds	r2, r7, r2
    1912:	7812      	ldrb	r2, [r2, #0]
    1914:	705a      	strb	r2, [r3, #1]
    1916:	230e      	movs	r3, #14
    1918:	18fb      	adds	r3, r7, r3
    191a:	7819      	ldrb	r1, [r3, #0]
    191c:	2320      	movs	r3, #32
    191e:	18fb      	adds	r3, r7, r3
    1920:	220a      	movs	r2, #10
    1922:	0018      	movs	r0, r3
    1924:	f005 faba 	bl	6e9c <_ZN6StringC1Ehh>
    1928:	2320      	movs	r3, #32
    192a:	18fb      	adds	r3, r7, r3
    192c:	2100      	movs	r1, #0
    192e:	0018      	movs	r0, r3
    1930:	f005 fc26 	bl	7180 <_ZNK6String6charAtEj>
    1934:	0003      	movs	r3, r0
    1936:	001a      	movs	r2, r3
    1938:	2310      	movs	r3, #16
    193a:	18fb      	adds	r3, r7, r3
    193c:	709a      	strb	r2, [r3, #2]
    193e:	2320      	movs	r3, #32
    1940:	18fb      	adds	r3, r7, r3
    1942:	0018      	movs	r0, r3
    1944:	f005 faee 	bl	6f24 <_ZN6StringD1Ev>
	drawBitmap(bitmap, counterPos.x, counterPos.y);
    1948:	2318      	movs	r3, #24
    194a:	18fb      	adds	r3, r7, r3
    194c:	2100      	movs	r1, #0
    194e:	5e59      	ldrsh	r1, [r3, r1]
    1950:	2318      	movs	r3, #24
    1952:	18fb      	adds	r3, r7, r3
    1954:	2202      	movs	r2, #2
    1956:	5e9a      	ldrsh	r2, [r3, r2]
    1958:	2310      	movs	r3, #16
    195a:	18fb      	adds	r3, r7, r3
    195c:	0018      	movs	r0, r3
    195e:	f7ff f8df 	bl	b20 <_Z10drawBitmapPcss>
}
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	46bd      	mov	sp, r7
    1966:	b00d      	add	sp, #52	; 0x34
    1968:	bd90      	pop	{r4, r7, pc}

0000196a <_Z14checkForCirclePA11_hhhhPh>:

void checkForCircle(uint8_t boardState[9][11], uint8_t x, uint8_t y, uint8_t origX, uint8_t subscripts[9]) {
    196a:	b590      	push	{r4, r7, lr}
    196c:	b087      	sub	sp, #28
    196e:	af02      	add	r7, sp, #8
    1970:	6078      	str	r0, [r7, #4]
    1972:	000c      	movs	r4, r1
    1974:	0010      	movs	r0, r2
    1976:	0019      	movs	r1, r3
    1978:	1cfb      	adds	r3, r7, #3
    197a:	1c22      	adds	r2, r4, #0
    197c:	701a      	strb	r2, [r3, #0]
    197e:	1cbb      	adds	r3, r7, #2
    1980:	1c02      	adds	r2, r0, #0
    1982:	701a      	strb	r2, [r3, #0]
    1984:	1c7b      	adds	r3, r7, #1
    1986:	1c0a      	adds	r2, r1, #0
    1988:	701a      	strb	r2, [r3, #0]
	// For each of the possible small counters in this square
	for (uint8_t i = 0; i < 9; i++) {
    198a:	230f      	movs	r3, #15
    198c:	18fb      	adds	r3, r7, r3
    198e:	2200      	movs	r2, #0
    1990:	701a      	strb	r2, [r3, #0]
    1992:	230f      	movs	r3, #15
    1994:	18fb      	adds	r3, r7, r3
    1996:	781b      	ldrb	r3, [r3, #0]
    1998:	2b08      	cmp	r3, #8
    199a:	dd00      	ble.n	199e <_Z14checkForCirclePA11_hhhhPh+0x34>
    199c:	e090      	b.n	1ac0 <_Z14checkForCirclePA11_hhhhPh+0x156>
		// Find any counters that exist and aren't the current counter
		if (boardState[x][i + 2] != 0 && i + 2 != y) {
    199e:	1cfb      	adds	r3, r7, #3
    19a0:	781a      	ldrb	r2, [r3, #0]
    19a2:	0013      	movs	r3, r2
    19a4:	009b      	lsls	r3, r3, #2
    19a6:	189b      	adds	r3, r3, r2
    19a8:	005b      	lsls	r3, r3, #1
    19aa:	189b      	adds	r3, r3, r2
    19ac:	687a      	ldr	r2, [r7, #4]
    19ae:	18d2      	adds	r2, r2, r3
    19b0:	230f      	movs	r3, #15
    19b2:	18fb      	adds	r3, r7, r3
    19b4:	781b      	ldrb	r3, [r3, #0]
    19b6:	3302      	adds	r3, #2
    19b8:	5cd3      	ldrb	r3, [r2, r3]
    19ba:	2b00      	cmp	r3, #0
    19bc:	d100      	bne.n	19c0 <_Z14checkForCirclePA11_hhhhPh+0x56>
    19be:	e077      	b.n	1ab0 <_Z14checkForCirclePA11_hhhhPh+0x146>
    19c0:	230f      	movs	r3, #15
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	781b      	ldrb	r3, [r3, #0]
    19c6:	1c9a      	adds	r2, r3, #2
    19c8:	1cbb      	adds	r3, r7, #2
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	429a      	cmp	r2, r3
    19ce:	d100      	bne.n	19d2 <_Z14checkForCirclePA11_hhhhPh+0x68>
    19d0:	e06e      	b.n	1ab0 <_Z14checkForCirclePA11_hhhhPh+0x146>
			// Find the pair counter of the one found
			// By going through all the squares
			for (uint8_t j = 0; j < 9; j++) {
    19d2:	230e      	movs	r3, #14
    19d4:	18fb      	adds	r3, r7, r3
    19d6:	2200      	movs	r2, #0
    19d8:	701a      	strb	r2, [r3, #0]
    19da:	230e      	movs	r3, #14
    19dc:	18fb      	adds	r3, r7, r3
    19de:	781b      	ldrb	r3, [r3, #0]
    19e0:	2b08      	cmp	r3, #8
    19e2:	dc65      	bgt.n	1ab0 <_Z14checkForCirclePA11_hhhhPh+0x146>
				// And finding a counter of the same subscript that isn't the current one
				if (boardState[j][i + 2] != 0 && j != x) {
    19e4:	230e      	movs	r3, #14
    19e6:	18fb      	adds	r3, r7, r3
    19e8:	781a      	ldrb	r2, [r3, #0]
    19ea:	0013      	movs	r3, r2
    19ec:	009b      	lsls	r3, r3, #2
    19ee:	189b      	adds	r3, r3, r2
    19f0:	005b      	lsls	r3, r3, #1
    19f2:	189b      	adds	r3, r3, r2
    19f4:	687a      	ldr	r2, [r7, #4]
    19f6:	18d2      	adds	r2, r2, r3
    19f8:	230f      	movs	r3, #15
    19fa:	18fb      	adds	r3, r7, r3
    19fc:	781b      	ldrb	r3, [r3, #0]
    19fe:	3302      	adds	r3, #2
    1a00:	5cd3      	ldrb	r3, [r2, r3]
    1a02:	2b00      	cmp	r3, #0
    1a04:	d04c      	beq.n	1aa0 <_Z14checkForCirclePA11_hhhhPh+0x136>
    1a06:	230e      	movs	r3, #14
    1a08:	18fa      	adds	r2, r7, r3
    1a0a:	1cfb      	adds	r3, r7, #3
    1a0c:	7812      	ldrb	r2, [r2, #0]
    1a0e:	781b      	ldrb	r3, [r3, #0]
    1a10:	429a      	cmp	r2, r3
    1a12:	d045      	beq.n	1aa0 <_Z14checkForCirclePA11_hhhhPh+0x136>
					// Check if this is the original square
					if (j == origX) {
    1a14:	230e      	movs	r3, #14
    1a16:	18fa      	adds	r2, r7, r3
    1a18:	1c7b      	adds	r3, r7, #1
    1a1a:	7812      	ldrb	r2, [r2, #0]
    1a1c:	781b      	ldrb	r3, [r3, #0]
    1a1e:	429a      	cmp	r2, r3
    1a20:	d106      	bne.n	1a30 <_Z14checkForCirclePA11_hhhhPh+0xc6>
						subscripts[0] = y - 1;
    1a22:	1cbb      	adds	r3, r7, #2
    1a24:	781b      	ldrb	r3, [r3, #0]
    1a26:	3b01      	subs	r3, #1
    1a28:	b2da      	uxtb	r2, r3
    1a2a:	6a3b      	ldr	r3, [r7, #32]
    1a2c:	701a      	strb	r2, [r3, #0]
						return;
    1a2e:	e047      	b.n	1ac0 <_Z14checkForCirclePA11_hhhhPh+0x156>
					}
					// If not repeat for the next counter
					checkForCircle(boardState, j, i + 2, origX, subscripts);
    1a30:	230f      	movs	r3, #15
    1a32:	18fb      	adds	r3, r7, r3
    1a34:	781b      	ldrb	r3, [r3, #0]
    1a36:	3302      	adds	r3, #2
    1a38:	b2da      	uxtb	r2, r3
    1a3a:	1c7b      	adds	r3, r7, #1
    1a3c:	781c      	ldrb	r4, [r3, #0]
    1a3e:	230e      	movs	r3, #14
    1a40:	18fb      	adds	r3, r7, r3
    1a42:	7819      	ldrb	r1, [r3, #0]
    1a44:	6878      	ldr	r0, [r7, #4]
    1a46:	6a3b      	ldr	r3, [r7, #32]
    1a48:	9300      	str	r3, [sp, #0]
    1a4a:	0023      	movs	r3, r4
    1a4c:	f7ff ff8d 	bl	196a <_Z14checkForCirclePA11_hhhhPh>
					// When the function returns, check if it found the original square
					if (subscripts[0] != 255) {
    1a50:	6a3b      	ldr	r3, [r7, #32]
    1a52:	781b      	ldrb	r3, [r3, #0]
    1a54:	2bff      	cmp	r3, #255	; 0xff
    1a56:	d023      	beq.n	1aa0 <_Z14checkForCirclePA11_hhhhPh+0x136>
						// If it did add this point on the end
						for (uint8_t k = 0; k < 9; k++) {
    1a58:	230d      	movs	r3, #13
    1a5a:	18fb      	adds	r3, r7, r3
    1a5c:	2200      	movs	r2, #0
    1a5e:	701a      	strb	r2, [r3, #0]
    1a60:	230d      	movs	r3, #13
    1a62:	18fb      	adds	r3, r7, r3
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	2b08      	cmp	r3, #8
    1a68:	dc1a      	bgt.n	1aa0 <_Z14checkForCirclePA11_hhhhPh+0x136>
							if (subscripts[k] == 255) {
    1a6a:	230d      	movs	r3, #13
    1a6c:	18fb      	adds	r3, r7, r3
    1a6e:	781b      	ldrb	r3, [r3, #0]
    1a70:	6a3a      	ldr	r2, [r7, #32]
    1a72:	18d3      	adds	r3, r2, r3
    1a74:	781b      	ldrb	r3, [r3, #0]
    1a76:	2bff      	cmp	r3, #255	; 0xff
    1a78:	d10a      	bne.n	1a90 <_Z14checkForCirclePA11_hhhhPh+0x126>
								subscripts[k] = y - 1;
    1a7a:	230d      	movs	r3, #13
    1a7c:	18fb      	adds	r3, r7, r3
    1a7e:	781b      	ldrb	r3, [r3, #0]
    1a80:	6a3a      	ldr	r2, [r7, #32]
    1a82:	18d3      	adds	r3, r2, r3
    1a84:	1cba      	adds	r2, r7, #2
    1a86:	7812      	ldrb	r2, [r2, #0]
    1a88:	3a01      	subs	r2, #1
    1a8a:	b2d2      	uxtb	r2, r2
    1a8c:	701a      	strb	r2, [r3, #0]
								return;
    1a8e:	e017      	b.n	1ac0 <_Z14checkForCirclePA11_hhhhPh+0x156>
						for (uint8_t k = 0; k < 9; k++) {
    1a90:	230d      	movs	r3, #13
    1a92:	18fb      	adds	r3, r7, r3
    1a94:	781a      	ldrb	r2, [r3, #0]
    1a96:	230d      	movs	r3, #13
    1a98:	18fb      	adds	r3, r7, r3
    1a9a:	3201      	adds	r2, #1
    1a9c:	701a      	strb	r2, [r3, #0]
    1a9e:	e7df      	b.n	1a60 <_Z14checkForCirclePA11_hhhhPh+0xf6>
			for (uint8_t j = 0; j < 9; j++) {
    1aa0:	230e      	movs	r3, #14
    1aa2:	18fb      	adds	r3, r7, r3
    1aa4:	781a      	ldrb	r2, [r3, #0]
    1aa6:	230e      	movs	r3, #14
    1aa8:	18fb      	adds	r3, r7, r3
    1aaa:	3201      	adds	r2, #1
    1aac:	701a      	strb	r2, [r3, #0]
    1aae:	e794      	b.n	19da <_Z14checkForCirclePA11_hhhhPh+0x70>
	for (uint8_t i = 0; i < 9; i++) {
    1ab0:	230f      	movs	r3, #15
    1ab2:	18fb      	adds	r3, r7, r3
    1ab4:	781a      	ldrb	r2, [r3, #0]
    1ab6:	230f      	movs	r3, #15
    1ab8:	18fb      	adds	r3, r7, r3
    1aba:	3201      	adds	r2, #1
    1abc:	701a      	strb	r2, [r3, #0]
    1abe:	e768      	b.n	1992 <_Z14checkForCirclePA11_hhhhPh+0x28>
					}
				}
			}
		}
	}
}
    1ac0:	46bd      	mov	sp, r7
    1ac2:	b005      	add	sp, #20
    1ac4:	bd90      	pop	{r4, r7, pc}

00001ac6 <_Z21drawClassicalCountersPA11_hhhh>:

void drawClassicalCounters(uint8_t boardState[9][11], uint8_t x, uint8_t y, uint8_t origT) {
    1ac6:	b590      	push	{r4, r7, lr}
    1ac8:	b087      	sub	sp, #28
    1aca:	af00      	add	r7, sp, #0
    1acc:	6078      	str	r0, [r7, #4]
    1ace:	000c      	movs	r4, r1
    1ad0:	0010      	movs	r0, r2
    1ad2:	0019      	movs	r1, r3
    1ad4:	1cfb      	adds	r3, r7, #3
    1ad6:	1c22      	adds	r2, r4, #0
    1ad8:	701a      	strb	r2, [r3, #0]
    1ada:	1cbb      	adds	r3, r7, #2
    1adc:	1c02      	adds	r2, r0, #0
    1ade:	701a      	strb	r2, [r3, #0]
    1ae0:	1c7b      	adds	r3, r7, #1
    1ae2:	1c0a      	adds	r2, r1, #0
    1ae4:	701a      	strb	r2, [r3, #0]
	// TODO: Add subscript to classic counters
	// Draw classic counter
	char bitmap;
	uint8_t player;
	if (x % 2) {
    1ae6:	1cfb      	adds	r3, r7, #3
    1ae8:	781b      	ldrb	r3, [r3, #0]
    1aea:	2201      	movs	r2, #1
    1aec:	4013      	ands	r3, r2
    1aee:	d016      	beq.n	1b1e <_Z21drawClassicalCountersPA11_hhhh+0x58>
		// black
		if (y % 2) {
    1af0:	1cbb      	adds	r3, r7, #2
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	2201      	movs	r2, #1
    1af6:	4013      	ands	r3, r2
    1af8:	d008      	beq.n	1b0c <_Z21drawClassicalCountersPA11_hhhh+0x46>
			// An X
			bitmap = 'j';
    1afa:	2317      	movs	r3, #23
    1afc:	18fb      	adds	r3, r7, r3
    1afe:	226a      	movs	r2, #106	; 0x6a
    1b00:	701a      	strb	r2, [r3, #0]
			player = 1;
    1b02:	2316      	movs	r3, #22
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	2201      	movs	r2, #1
    1b08:	701a      	strb	r2, [r3, #0]
    1b0a:	e01e      	b.n	1b4a <_Z21drawClassicalCountersPA11_hhhh+0x84>
		} else {
			// An O
			bitmap = 'h';
    1b0c:	2317      	movs	r3, #23
    1b0e:	18fb      	adds	r3, r7, r3
    1b10:	2268      	movs	r2, #104	; 0x68
    1b12:	701a      	strb	r2, [r3, #0]
			player = 2;
    1b14:	2316      	movs	r3, #22
    1b16:	18fb      	adds	r3, r7, r3
    1b18:	2202      	movs	r2, #2
    1b1a:	701a      	strb	r2, [r3, #0]
    1b1c:	e015      	b.n	1b4a <_Z21drawClassicalCountersPA11_hhhh+0x84>
		}
	} else {
		// white/blueish
		if (y % 2) {
    1b1e:	1cbb      	adds	r3, r7, #2
    1b20:	781b      	ldrb	r3, [r3, #0]
    1b22:	2201      	movs	r2, #1
    1b24:	4013      	ands	r3, r2
    1b26:	d008      	beq.n	1b3a <_Z21drawClassicalCountersPA11_hhhh+0x74>
			// An X
			bitmap = 'k';
    1b28:	2317      	movs	r3, #23
    1b2a:	18fb      	adds	r3, r7, r3
    1b2c:	226b      	movs	r2, #107	; 0x6b
    1b2e:	701a      	strb	r2, [r3, #0]
			player = 1;
    1b30:	2316      	movs	r3, #22
    1b32:	18fb      	adds	r3, r7, r3
    1b34:	2201      	movs	r2, #1
    1b36:	701a      	strb	r2, [r3, #0]
    1b38:	e007      	b.n	1b4a <_Z21drawClassicalCountersPA11_hhhh+0x84>
		} else {
			// An O
			bitmap = 'i';
    1b3a:	2317      	movs	r3, #23
    1b3c:	18fb      	adds	r3, r7, r3
    1b3e:	2269      	movs	r2, #105	; 0x69
    1b40:	701a      	strb	r2, [r3, #0]
			player = 2;
    1b42:	2316      	movs	r3, #22
    1b44:	18fb      	adds	r3, r7, r3
    1b46:	2202      	movs	r2, #2
    1b48:	701a      	strb	r2, [r3, #0]
		}
	}
	TS_Point counterPos = getCounterPosition(x);
    1b4a:	230c      	movs	r3, #12
    1b4c:	18fa      	adds	r2, r7, r3
    1b4e:	1cfb      	adds	r3, r7, #3
    1b50:	781b      	ldrb	r3, [r3, #0]
    1b52:	0019      	movs	r1, r3
    1b54:	0010      	movs	r0, r2
    1b56:	f7ff fd81 	bl	165c <_Z18getCounterPositionh>
	drawBitmap(bitmap, counterPos.x, counterPos.y);
    1b5a:	230c      	movs	r3, #12
    1b5c:	18fb      	adds	r3, r7, r3
    1b5e:	2100      	movs	r1, #0
    1b60:	5e59      	ldrsh	r1, [r3, r1]
    1b62:	230c      	movs	r3, #12
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	2202      	movs	r2, #2
    1b68:	5e9a      	ldrsh	r2, [r3, r2]
    1b6a:	2317      	movs	r3, #23
    1b6c:	18fb      	adds	r3, r7, r3
    1b6e:	781b      	ldrb	r3, [r3, #0]
    1b70:	0018      	movs	r0, r3
    1b72:	f7fe fb77 	bl	264 <_Z10drawBitmapcss>
	boardState[x][0] = player;
    1b76:	1cfb      	adds	r3, r7, #3
    1b78:	781a      	ldrb	r2, [r3, #0]
    1b7a:	0013      	movs	r3, r2
    1b7c:	009b      	lsls	r3, r3, #2
    1b7e:	189b      	adds	r3, r3, r2
    1b80:	005b      	lsls	r3, r3, #1
    1b82:	189b      	adds	r3, r3, r2
    1b84:	687a      	ldr	r2, [r7, #4]
    1b86:	18d3      	adds	r3, r2, r3
    1b88:	2216      	movs	r2, #22
    1b8a:	18ba      	adds	r2, r7, r2
    1b8c:	7812      	ldrb	r2, [r2, #0]
    1b8e:	701a      	strb	r2, [r3, #0]
	boardState[x][1] = y;
    1b90:	1cfb      	adds	r3, r7, #3
    1b92:	781a      	ldrb	r2, [r3, #0]
    1b94:	0013      	movs	r3, r2
    1b96:	009b      	lsls	r3, r3, #2
    1b98:	189b      	adds	r3, r3, r2
    1b9a:	005b      	lsls	r3, r3, #1
    1b9c:	189b      	adds	r3, r3, r2
    1b9e:	687a      	ldr	r2, [r7, #4]
    1ba0:	18d3      	adds	r3, r2, r3
    1ba2:	1cba      	adds	r2, r7, #2
    1ba4:	7812      	ldrb	r2, [r2, #0]
    1ba6:	705a      	strb	r2, [r3, #1]
	
	// For each of the possible small counters in this square
	for (uint8_t i = 0; i < 9; i++) {
    1ba8:	2315      	movs	r3, #21
    1baa:	18fb      	adds	r3, r7, r3
    1bac:	2200      	movs	r2, #0
    1bae:	701a      	strb	r2, [r3, #0]
    1bb0:	2315      	movs	r3, #21
    1bb2:	18fb      	adds	r3, r7, r3
    1bb4:	781b      	ldrb	r3, [r3, #0]
    1bb6:	2b08      	cmp	r3, #8
    1bb8:	dc60      	bgt.n	1c7c <_Z21drawClassicalCountersPA11_hhhh+0x1b6>
		// Find any counters that exist and aren't the current counter
		if (boardState[x][i + 2] != 0 && i + 2 != y) {
    1bba:	1cfb      	adds	r3, r7, #3
    1bbc:	781a      	ldrb	r2, [r3, #0]
    1bbe:	0013      	movs	r3, r2
    1bc0:	009b      	lsls	r3, r3, #2
    1bc2:	189b      	adds	r3, r3, r2
    1bc4:	005b      	lsls	r3, r3, #1
    1bc6:	189b      	adds	r3, r3, r2
    1bc8:	687a      	ldr	r2, [r7, #4]
    1bca:	18d2      	adds	r2, r2, r3
    1bcc:	2315      	movs	r3, #21
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	781b      	ldrb	r3, [r3, #0]
    1bd2:	3302      	adds	r3, #2
    1bd4:	5cd3      	ldrb	r3, [r2, r3]
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d048      	beq.n	1c6c <_Z21drawClassicalCountersPA11_hhhh+0x1a6>
    1bda:	2315      	movs	r3, #21
    1bdc:	18fb      	adds	r3, r7, r3
    1bde:	781b      	ldrb	r3, [r3, #0]
    1be0:	1c9a      	adds	r2, r3, #2
    1be2:	1cbb      	adds	r3, r7, #2
    1be4:	781b      	ldrb	r3, [r3, #0]
    1be6:	429a      	cmp	r2, r3
    1be8:	d040      	beq.n	1c6c <_Z21drawClassicalCountersPA11_hhhh+0x1a6>
			// Find the pair counter of the one found
			// By going through all the squares
			for (uint8_t j = 0; j < 9; j++) {
    1bea:	2314      	movs	r3, #20
    1bec:	18fb      	adds	r3, r7, r3
    1bee:	2200      	movs	r2, #0
    1bf0:	701a      	strb	r2, [r3, #0]
    1bf2:	2314      	movs	r3, #20
    1bf4:	18fb      	adds	r3, r7, r3
    1bf6:	781b      	ldrb	r3, [r3, #0]
    1bf8:	2b08      	cmp	r3, #8
    1bfa:	dc37      	bgt.n	1c6c <_Z21drawClassicalCountersPA11_hhhh+0x1a6>
				// And finding a counter of the same subscript that isn't the current one
				if (boardState[j][i + 2] != 0 && j != x) {
    1bfc:	2314      	movs	r3, #20
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	781a      	ldrb	r2, [r3, #0]
    1c02:	0013      	movs	r3, r2
    1c04:	009b      	lsls	r3, r3, #2
    1c06:	189b      	adds	r3, r3, r2
    1c08:	005b      	lsls	r3, r3, #1
    1c0a:	189b      	adds	r3, r3, r2
    1c0c:	687a      	ldr	r2, [r7, #4]
    1c0e:	18d2      	adds	r2, r2, r3
    1c10:	2315      	movs	r3, #21
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	3302      	adds	r3, #2
    1c18:	5cd3      	ldrb	r3, [r2, r3]
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d01e      	beq.n	1c5c <_Z21drawClassicalCountersPA11_hhhh+0x196>
    1c1e:	2314      	movs	r3, #20
    1c20:	18fa      	adds	r2, r7, r3
    1c22:	1cfb      	adds	r3, r7, #3
    1c24:	7812      	ldrb	r2, [r2, #0]
    1c26:	781b      	ldrb	r3, [r3, #0]
    1c28:	429a      	cmp	r2, r3
    1c2a:	d017      	beq.n	1c5c <_Z21drawClassicalCountersPA11_hhhh+0x196>
					// Check if this is the original square
					if (i + 1 == origT) continue;
    1c2c:	2315      	movs	r3, #21
    1c2e:	18fb      	adds	r3, r7, r3
    1c30:	781b      	ldrb	r3, [r3, #0]
    1c32:	1c5a      	adds	r2, r3, #1
    1c34:	1c7b      	adds	r3, r7, #1
    1c36:	781b      	ldrb	r3, [r3, #0]
    1c38:	429a      	cmp	r2, r3
    1c3a:	d00e      	beq.n	1c5a <_Z21drawClassicalCountersPA11_hhhh+0x194>
					// If not repeat for the next counter
					drawClassicalCounters(boardState, j, i + 2, origT);
    1c3c:	2315      	movs	r3, #21
    1c3e:	18fb      	adds	r3, r7, r3
    1c40:	781b      	ldrb	r3, [r3, #0]
    1c42:	3302      	adds	r3, #2
    1c44:	b2da      	uxtb	r2, r3
    1c46:	1c7b      	adds	r3, r7, #1
    1c48:	781c      	ldrb	r4, [r3, #0]
    1c4a:	2314      	movs	r3, #20
    1c4c:	18fb      	adds	r3, r7, r3
    1c4e:	7819      	ldrb	r1, [r3, #0]
    1c50:	6878      	ldr	r0, [r7, #4]
    1c52:	0023      	movs	r3, r4
    1c54:	f7ff ff37 	bl	1ac6 <_Z21drawClassicalCountersPA11_hhhh>
    1c58:	e000      	b.n	1c5c <_Z21drawClassicalCountersPA11_hhhh+0x196>
					if (i + 1 == origT) continue;
    1c5a:	46c0      	nop			; (mov r8, r8)
			for (uint8_t j = 0; j < 9; j++) {
    1c5c:	2314      	movs	r3, #20
    1c5e:	18fb      	adds	r3, r7, r3
    1c60:	781a      	ldrb	r2, [r3, #0]
    1c62:	2314      	movs	r3, #20
    1c64:	18fb      	adds	r3, r7, r3
    1c66:	3201      	adds	r2, #1
    1c68:	701a      	strb	r2, [r3, #0]
    1c6a:	e7c2      	b.n	1bf2 <_Z21drawClassicalCountersPA11_hhhh+0x12c>
	for (uint8_t i = 0; i < 9; i++) {
    1c6c:	2315      	movs	r3, #21
    1c6e:	18fb      	adds	r3, r7, r3
    1c70:	781a      	ldrb	r2, [r3, #0]
    1c72:	2315      	movs	r3, #21
    1c74:	18fb      	adds	r3, r7, r3
    1c76:	3201      	adds	r2, #1
    1c78:	701a      	strb	r2, [r3, #0]
    1c7a:	e799      	b.n	1bb0 <_Z21drawClassicalCountersPA11_hhhh+0xea>
				}
			}
		}
	}
}
    1c7c:	46c0      	nop			; (mov r8, r8)
    1c7e:	46bd      	mov	sp, r7
    1c80:	b007      	add	sp, #28
    1c82:	bd90      	pop	{r4, r7, pc}

00001c84 <_Z4gamehh>:

State game(uint8_t noughtsScore, uint8_t crossesScore) {
    1c84:	b590      	push	{r4, r7, lr}
    1c86:	b09d      	sub	sp, #116	; 0x74
    1c88:	af00      	add	r7, sp, #0
    1c8a:	0002      	movs	r2, r0
    1c8c:	230f      	movs	r3, #15
    1c8e:	18fb      	adds	r3, r7, r3
    1c90:	701a      	strb	r2, [r3, #0]
    1c92:	230e      	movs	r3, #14
    1c94:	18fb      	adds	r3, r7, r3
    1c96:	1c0a      	adds	r2, r1, #0
    1c98:	701a      	strb	r2, [r3, #0]
	State player = cross;
    1c9a:	236f      	movs	r3, #111	; 0x6f
    1c9c:	18fb      	adds	r3, r7, r3
    1c9e:	2202      	movs	r2, #2
    1ca0:	701a      	strb	r2, [r3, #0]
	State boardState[9] = {empty, empty, empty, empty, empty, empty, empty, empty,
	empty};
    1ca2:	2320      	movs	r3, #32
    1ca4:	18fb      	adds	r3, r7, r3
    1ca6:	0018      	movs	r0, r3
    1ca8:	2309      	movs	r3, #9
    1caa:	001a      	movs	r2, r3
    1cac:	2100      	movs	r1, #0
    1cae:	f00e fdb9 	bl	10824 <memset>
	State winner = empty;
    1cb2:	236e      	movs	r3, #110	; 0x6e
    1cb4:	18fb      	adds	r3, r7, r3
    1cb6:	2200      	movs	r2, #0
    1cb8:	701a      	strb	r2, [r3, #0]
	uint8_t placedCounters = 0;
    1cba:	236d      	movs	r3, #109	; 0x6d
    1cbc:	18fb      	adds	r3, r7, r3
    1cbe:	2200      	movs	r2, #0
    1cc0:	701a      	strb	r2, [r3, #0]
	uint8_t square = 255;
    1cc2:	236b      	movs	r3, #107	; 0x6b
    1cc4:	18fb      	adds	r3, r7, r3
    1cc6:	22ff      	movs	r2, #255	; 0xff
    1cc8:	701a      	strb	r2, [r3, #0]
	TS_Point newCounterPos;
    1cca:	2318      	movs	r3, #24
    1ccc:	18fb      	adds	r3, r7, r3
    1cce:	0018      	movs	r0, r3
    1cd0:	f005 fc80 	bl	75d4 <_ZN8TS_PointC1Ev>

	// Draw grid
	drawBitmap('d', 0, 80);
    1cd4:	2250      	movs	r2, #80	; 0x50
    1cd6:	2100      	movs	r1, #0
    1cd8:	2064      	movs	r0, #100	; 0x64
    1cda:	f7fe fac3 	bl	264 <_Z10drawBitmapcss>

	// Start game
	while (placedCounters < 9) {
    1cde:	236d      	movs	r3, #109	; 0x6d
    1ce0:	18fb      	adds	r3, r7, r3
    1ce2:	781b      	ldrb	r3, [r3, #0]
    1ce4:	2b08      	cmp	r3, #8
    1ce6:	dd00      	ble.n	1cea <_Z4gamehh+0x66>
    1ce8:	e0db      	b.n	1ea2 <_Z4gamehh+0x21e>
		while (true) {
			if (!touchScreen.touched()) continue;
    1cea:	4b71      	ldr	r3, [pc, #452]	; (1eb0 <_Z4gamehh+0x22c>)
    1cec:	0018      	movs	r0, r3
    1cee:	f005 fabf 	bl	7270 <_ZN15Adafruit_FT62067touchedEv>
    1cf2:	0003      	movs	r3, r0
    1cf4:	425a      	negs	r2, r3
    1cf6:	4153      	adcs	r3, r2
    1cf8:	b2db      	uxtb	r3, r3
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d12e      	bne.n	1d5c <_Z4gamehh+0xd8>
			TS_Point pointTouched = getPoint();
    1cfe:	2310      	movs	r3, #16
    1d00:	18fb      	adds	r3, r7, r3
    1d02:	0018      	movs	r0, r3
    1d04:	f7ff fb22 	bl	134c <_Z8getPointv>
			if (verbose)
			Serial.println(
			(String) F("screen pressed at: (") + (String) pointTouched.x + ","
			+ (String) pointTouched.y + (String) F(")"));
			square = getSquare(pointTouched);
    1d08:	236b      	movs	r3, #107	; 0x6b
    1d0a:	18fc      	adds	r4, r7, r3
    1d0c:	2310      	movs	r3, #16
    1d0e:	18fb      	adds	r3, r7, r3
    1d10:	6818      	ldr	r0, [r3, #0]
    1d12:	6859      	ldr	r1, [r3, #4]
    1d14:	f7ff fc1b 	bl	154e <_Z9getSquare8TS_Point>
    1d18:	0003      	movs	r3, r0
    1d1a:	7023      	strb	r3, [r4, #0]
			newCounterPos = getCounterPosition(square);
    1d1c:	2318      	movs	r3, #24
    1d1e:	18fc      	adds	r4, r7, r3
    1d20:	003a      	movs	r2, r7
    1d22:	236b      	movs	r3, #107	; 0x6b
    1d24:	18fb      	adds	r3, r7, r3
    1d26:	781b      	ldrb	r3, [r3, #0]
    1d28:	0019      	movs	r1, r3
    1d2a:	0010      	movs	r0, r2
    1d2c:	f7ff fc96 	bl	165c <_Z18getCounterPositionh>
    1d30:	003b      	movs	r3, r7
    1d32:	0020      	movs	r0, r4
    1d34:	0019      	movs	r1, r3
    1d36:	2306      	movs	r3, #6
    1d38:	001a      	movs	r2, r3
    1d3a:	f00e fd6a 	bl	10812 <memcpy>
			if (!(square == 255)) break;
    1d3e:	236b      	movs	r3, #107	; 0x6b
    1d40:	18fb      	adds	r3, r7, r3
    1d42:	781b      	ldrb	r3, [r3, #0]
    1d44:	2bff      	cmp	r3, #255	; 0xff
    1d46:	d0d0      	beq.n	1cea <_Z4gamehh+0x66>
		}

		// Check to see if selected square is occupied
		if (!(boardState[square] == empty)) continue;
    1d48:	236b      	movs	r3, #107	; 0x6b
    1d4a:	18fb      	adds	r3, r7, r3
    1d4c:	781b      	ldrb	r3, [r3, #0]
    1d4e:	2220      	movs	r2, #32
    1d50:	18ba      	adds	r2, r7, r2
    1d52:	5cd3      	ldrb	r3, [r2, r3]
    1d54:	2b00      	cmp	r3, #0
    1d56:	d000      	beq.n	1d5a <_Z4gamehh+0xd6>
    1d58:	e0a0      	b.n	1e9c <_Z4gamehh+0x218>
    1d5a:	e001      	b.n	1d60 <_Z4gamehh+0xdc>
			if (!touchScreen.touched()) continue;
    1d5c:	46c0      	nop			; (mov r8, r8)
		}
    1d5e:	e7c4      	b.n	1cea <_Z4gamehh+0x66>

		// Update board state
		boardState[square] = player;
    1d60:	236b      	movs	r3, #107	; 0x6b
    1d62:	18fb      	adds	r3, r7, r3
    1d64:	781b      	ldrb	r3, [r3, #0]
    1d66:	2220      	movs	r2, #32
    1d68:	18ba      	adds	r2, r7, r2
    1d6a:	216f      	movs	r1, #111	; 0x6f
    1d6c:	1879      	adds	r1, r7, r1
    1d6e:	7809      	ldrb	r1, [r1, #0]
    1d70:	54d1      	strb	r1, [r2, r3]

		// Draw nought or cross on selected square and swap player
		player = addMove(square, newCounterPos, player);
    1d72:	236f      	movs	r3, #111	; 0x6f
    1d74:	18fc      	adds	r4, r7, r3
    1d76:	236f      	movs	r3, #111	; 0x6f
    1d78:	18fb      	adds	r3, r7, r3
    1d7a:	7819      	ldrb	r1, [r3, #0]
    1d7c:	2318      	movs	r3, #24
    1d7e:	18fa      	adds	r2, r7, r3
    1d80:	236b      	movs	r3, #107	; 0x6b
    1d82:	18fb      	adds	r3, r7, r3
    1d84:	7818      	ldrb	r0, [r3, #0]
    1d86:	000b      	movs	r3, r1
    1d88:	6811      	ldr	r1, [r2, #0]
    1d8a:	6852      	ldr	r2, [r2, #4]
    1d8c:	f7ff fb10 	bl	13b0 <_Z7addMoveh8TS_Point5State>
    1d90:	0003      	movs	r3, r0
    1d92:	7023      	strb	r3, [r4, #0]
		placedCounters++;
    1d94:	236d      	movs	r3, #109	; 0x6d
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	781a      	ldrb	r2, [r3, #0]
    1d9a:	236d      	movs	r3, #109	; 0x6d
    1d9c:	18fb      	adds	r3, r7, r3
    1d9e:	3201      	adds	r2, #1
    1da0:	701a      	strb	r2, [r3, #0]

		// Check to see if someone has won
		for (uint8_t i = 0; i < 8; i++) {
    1da2:	236c      	movs	r3, #108	; 0x6c
    1da4:	18fb      	adds	r3, r7, r3
    1da6:	2200      	movs	r2, #0
    1da8:	701a      	strb	r2, [r3, #0]
    1daa:	236c      	movs	r3, #108	; 0x6c
    1dac:	18fb      	adds	r3, r7, r3
    1dae:	781b      	ldrb	r3, [r3, #0]
    1db0:	2b07      	cmp	r3, #7
    1db2:	dc5c      	bgt.n	1e6e <_Z4gamehh+0x1ea>
			if (boardState[winIndexes[i][0]] == boardState[winIndexes[i][1]]
    1db4:	236c      	movs	r3, #108	; 0x6c
    1db6:	18fb      	adds	r3, r7, r3
    1db8:	781a      	ldrb	r2, [r3, #0]
    1dba:	493e      	ldr	r1, [pc, #248]	; (1eb4 <_Z4gamehh+0x230>)
    1dbc:	0013      	movs	r3, r2
    1dbe:	005b      	lsls	r3, r3, #1
    1dc0:	189b      	adds	r3, r3, r2
    1dc2:	5c5b      	ldrb	r3, [r3, r1]
    1dc4:	001a      	movs	r2, r3
    1dc6:	2320      	movs	r3, #32
    1dc8:	18fb      	adds	r3, r7, r3
    1dca:	5c99      	ldrb	r1, [r3, r2]
    1dcc:	236c      	movs	r3, #108	; 0x6c
    1dce:	18fb      	adds	r3, r7, r3
    1dd0:	781a      	ldrb	r2, [r3, #0]
    1dd2:	4838      	ldr	r0, [pc, #224]	; (1eb4 <_Z4gamehh+0x230>)
    1dd4:	0013      	movs	r3, r2
    1dd6:	005b      	lsls	r3, r3, #1
    1dd8:	189b      	adds	r3, r3, r2
    1dda:	18c3      	adds	r3, r0, r3
    1ddc:	3301      	adds	r3, #1
    1dde:	781b      	ldrb	r3, [r3, #0]
    1de0:	001a      	movs	r2, r3
    1de2:	2320      	movs	r3, #32
    1de4:	18fb      	adds	r3, r7, r3
    1de6:	5c9b      	ldrb	r3, [r3, r2]
    1de8:	4299      	cmp	r1, r3
    1dea:	d138      	bne.n	1e5e <_Z4gamehh+0x1da>
			&& boardState[winIndexes[i][0]] == boardState[winIndexes[i][2]]
    1dec:	236c      	movs	r3, #108	; 0x6c
    1dee:	18fb      	adds	r3, r7, r3
    1df0:	781a      	ldrb	r2, [r3, #0]
    1df2:	4930      	ldr	r1, [pc, #192]	; (1eb4 <_Z4gamehh+0x230>)
    1df4:	0013      	movs	r3, r2
    1df6:	005b      	lsls	r3, r3, #1
    1df8:	189b      	adds	r3, r3, r2
    1dfa:	5c5b      	ldrb	r3, [r3, r1]
    1dfc:	001a      	movs	r2, r3
    1dfe:	2320      	movs	r3, #32
    1e00:	18fb      	adds	r3, r7, r3
    1e02:	5c99      	ldrb	r1, [r3, r2]
    1e04:	236c      	movs	r3, #108	; 0x6c
    1e06:	18fb      	adds	r3, r7, r3
    1e08:	781a      	ldrb	r2, [r3, #0]
    1e0a:	482a      	ldr	r0, [pc, #168]	; (1eb4 <_Z4gamehh+0x230>)
    1e0c:	0013      	movs	r3, r2
    1e0e:	005b      	lsls	r3, r3, #1
    1e10:	189b      	adds	r3, r3, r2
    1e12:	18c3      	adds	r3, r0, r3
    1e14:	3302      	adds	r3, #2
    1e16:	781b      	ldrb	r3, [r3, #0]
    1e18:	001a      	movs	r2, r3
    1e1a:	2320      	movs	r3, #32
    1e1c:	18fb      	adds	r3, r7, r3
    1e1e:	5c9b      	ldrb	r3, [r3, r2]
    1e20:	4299      	cmp	r1, r3
    1e22:	d11c      	bne.n	1e5e <_Z4gamehh+0x1da>
			&& boardState[winIndexes[i][0]] != empty) {
    1e24:	236c      	movs	r3, #108	; 0x6c
    1e26:	18fb      	adds	r3, r7, r3
    1e28:	781a      	ldrb	r2, [r3, #0]
    1e2a:	4922      	ldr	r1, [pc, #136]	; (1eb4 <_Z4gamehh+0x230>)
    1e2c:	0013      	movs	r3, r2
    1e2e:	005b      	lsls	r3, r3, #1
    1e30:	189b      	adds	r3, r3, r2
    1e32:	5c5b      	ldrb	r3, [r3, r1]
    1e34:	001a      	movs	r2, r3
    1e36:	2320      	movs	r3, #32
    1e38:	18fb      	adds	r3, r7, r3
    1e3a:	5c9b      	ldrb	r3, [r3, r2]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d00e      	beq.n	1e5e <_Z4gamehh+0x1da>
				winner = boardState[winIndexes[i][0]];
    1e40:	236c      	movs	r3, #108	; 0x6c
    1e42:	18fb      	adds	r3, r7, r3
    1e44:	781a      	ldrb	r2, [r3, #0]
    1e46:	491b      	ldr	r1, [pc, #108]	; (1eb4 <_Z4gamehh+0x230>)
    1e48:	0013      	movs	r3, r2
    1e4a:	005b      	lsls	r3, r3, #1
    1e4c:	189b      	adds	r3, r3, r2
    1e4e:	5c5b      	ldrb	r3, [r3, r1]
    1e50:	0019      	movs	r1, r3
    1e52:	236e      	movs	r3, #110	; 0x6e
    1e54:	18fb      	adds	r3, r7, r3
    1e56:	2220      	movs	r2, #32
    1e58:	18ba      	adds	r2, r7, r2
    1e5a:	5c52      	ldrb	r2, [r2, r1]
    1e5c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++) {
    1e5e:	236c      	movs	r3, #108	; 0x6c
    1e60:	18fb      	adds	r3, r7, r3
    1e62:	781a      	ldrb	r2, [r3, #0]
    1e64:	236c      	movs	r3, #108	; 0x6c
    1e66:	18fb      	adds	r3, r7, r3
    1e68:	3201      	adds	r2, #1
    1e6a:	701a      	strb	r2, [r3, #0]
    1e6c:	e79d      	b.n	1daa <_Z4gamehh+0x126>
			}
		}
		Serial.print(F("winner = "));
    1e6e:	4a12      	ldr	r2, [pc, #72]	; (1eb8 <_Z4gamehh+0x234>)
    1e70:	4b12      	ldr	r3, [pc, #72]	; (1ebc <_Z4gamehh+0x238>)
    1e72:	0011      	movs	r1, r2
    1e74:	0018      	movs	r0, r3
    1e76:	f001 f87a 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(winner);
    1e7a:	236e      	movs	r3, #110	; 0x6e
    1e7c:	18fb      	adds	r3, r7, r3
    1e7e:	7819      	ldrb	r1, [r3, #0]
    1e80:	4b0e      	ldr	r3, [pc, #56]	; (1ebc <_Z4gamehh+0x238>)
    1e82:	220a      	movs	r2, #10
    1e84:	0018      	movs	r0, r3
    1e86:	f001 f9b0 	bl	31ea <_ZN5Print7printlnEii>
		if (!(winner == empty)) break;
    1e8a:	236e      	movs	r3, #110	; 0x6e
    1e8c:	18fb      	adds	r3, r7, r3
    1e8e:	781b      	ldrb	r3, [r3, #0]
    1e90:	2b00      	cmp	r3, #0
    1e92:	d105      	bne.n	1ea0 <_Z4gamehh+0x21c>
		delay(100);
    1e94:	2064      	movs	r0, #100	; 0x64
    1e96:	f000 ffb9 	bl	2e0c <delay>
    1e9a:	e720      	b.n	1cde <_Z4gamehh+0x5a>
		if (!(boardState[square] == empty)) continue;
    1e9c:	46c0      	nop			; (mov r8, r8)
	while (placedCounters < 9) {
    1e9e:	e71e      	b.n	1cde <_Z4gamehh+0x5a>
		if (!(winner == empty)) break;
    1ea0:	46c0      	nop			; (mov r8, r8)
	}
	return winner;
    1ea2:	236e      	movs	r3, #110	; 0x6e
    1ea4:	18fb      	adds	r3, r7, r3
    1ea6:	781b      	ldrb	r3, [r3, #0]
}
    1ea8:	0018      	movs	r0, r3
    1eaa:	46bd      	mov	sp, r7
    1eac:	b01d      	add	sp, #116	; 0x74
    1eae:	bd90      	pop	{r4, r7, pc}
    1eb0:	20000320 	.word	0x20000320
    1eb4:	20000004 	.word	0x20000004
    1eb8:	000132e0 	.word	0x000132e0
    1ebc:	20000e94 	.word	0x20000e94

00001ec0 <_Z11quantumGamehh>:

uint8_t quantumGame(uint8_t noughtsScore, uint8_t crossesScore) {
    1ec0:	b590      	push	{r4, r7, lr}
    1ec2:	b0c3      	sub	sp, #268	; 0x10c
    1ec4:	af02      	add	r7, sp, #8
    1ec6:	0002      	movs	r2, r0
    1ec8:	1dfb      	adds	r3, r7, #7
    1eca:	701a      	strb	r2, [r3, #0]
    1ecc:	1dbb      	adds	r3, r7, #6
    1ece:	1c0a      	adds	r2, r1, #0
    1ed0:	701a      	strb	r2, [r3, #0]
	// 0 = none, 1 = cross, 2 = nought
	uint8_t player = 1;
    1ed2:	23f1      	movs	r3, #241	; 0xf1
    1ed4:	18fb      	adds	r3, r7, r3
    1ed6:	2201      	movs	r2, #1
    1ed8:	701a      	strb	r2, [r3, #0]
	uint8_t turn = 1;
    1eda:	23ff      	movs	r3, #255	; 0xff
    1edc:	18fb      	adds	r3, r7, r3
    1ede:	2201      	movs	r2, #1
    1ee0:	701a      	strb	r2, [r3, #0]
	uint8_t winner = 0;
    1ee2:	23fe      	movs	r3, #254	; 0xfe
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	2200      	movs	r2, #0
    1ee8:	701a      	strb	r2, [r3, #0]
	uint8_t boardState[9][11] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    1eea:	2350      	movs	r3, #80	; 0x50
    1eec:	18fb      	adds	r3, r7, r3
    1eee:	0018      	movs	r0, r3
    1ef0:	2363      	movs	r3, #99	; 0x63
    1ef2:	001a      	movs	r2, r3
    1ef4:	2100      	movs	r1, #0
    1ef6:	f00e fc95 	bl	10824 <memset>
	uint8_t bigCounters = 0;
    1efa:	23f0      	movs	r3, #240	; 0xf0
    1efc:	18fb      	adds	r3, r7, r3
    1efe:	2200      	movs	r2, #0
    1f00:	701a      	strb	r2, [r3, #0]
	uint8_t square = 255;
    1f02:	23fd      	movs	r3, #253	; 0xfd
    1f04:	18fb      	adds	r3, r7, r3
    1f06:	22ff      	movs	r2, #255	; 0xff
    1f08:	701a      	strb	r2, [r3, #0]
	TS_Point newCounterPos;
    1f0a:	2348      	movs	r3, #72	; 0x48
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	0018      	movs	r0, r3
    1f10:	f005 fb60 	bl	75d4 <_ZN8TS_PointC1Ev>

	// Draw grid
	drawBitmap('d', 0, 80);
    1f14:	2250      	movs	r2, #80	; 0x50
    1f16:	2100      	movs	r1, #0
    1f18:	2064      	movs	r0, #100	; 0x64
    1f1a:	f7fe f9a3 	bl	264 <_Z10drawBitmapcss>

	// Start match
	while (bigCounters < 9) {
    1f1e:	23f0      	movs	r3, #240	; 0xf0
    1f20:	18fb      	adds	r3, r7, r3
    1f22:	781b      	ldrb	r3, [r3, #0]
    1f24:	2b08      	cmp	r3, #8
    1f26:	dd00      	ble.n	1f2a <_Z11quantumGamehh+0x6a>
    1f28:	e312      	b.n	2550 <_Z11quantumGamehh+0x690>
		uint8_t countersThisTurn = 0;
    1f2a:	23fc      	movs	r3, #252	; 0xfc
    1f2c:	18fb      	adds	r3, r7, r3
    1f2e:	2200      	movs	r2, #0
    1f30:	701a      	strb	r2, [r3, #0]
		uint8_t recentSquares[] = {255, 255};
    1f32:	2344      	movs	r3, #68	; 0x44
    1f34:	18fb      	adds	r3, r7, r3
    1f36:	4ae1      	ldr	r2, [pc, #900]	; (22bc <_Z11quantumGamehh+0x3fc>)
    1f38:	8812      	ldrh	r2, [r2, #0]
    1f3a:	801a      	strh	r2, [r3, #0]
		while (countersThisTurn < 2) {
    1f3c:	23fc      	movs	r3, #252	; 0xfc
    1f3e:	18fb      	adds	r3, r7, r3
    1f40:	781b      	ldrb	r3, [r3, #0]
    1f42:	2b01      	cmp	r3, #1
    1f44:	dd00      	ble.n	1f48 <_Z11quantumGamehh+0x88>
    1f46:	e07a      	b.n	203e <_Z11quantumGamehh+0x17e>
			while (true) {
				if (!touchScreen.touched()) continue;
    1f48:	4bdd      	ldr	r3, [pc, #884]	; (22c0 <_Z11quantumGamehh+0x400>)
    1f4a:	0018      	movs	r0, r3
    1f4c:	f005 f990 	bl	7270 <_ZN15Adafruit_FT62067touchedEv>
    1f50:	0003      	movs	r3, r0
    1f52:	425a      	negs	r2, r3
    1f54:	4153      	adcs	r3, r2
    1f56:	b2db      	uxtb	r3, r3
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d121      	bne.n	1fa0 <_Z11quantumGamehh+0xe0>
				TS_Point pointTouched = getPoint();
    1f5c:	2328      	movs	r3, #40	; 0x28
    1f5e:	18fb      	adds	r3, r7, r3
    1f60:	0018      	movs	r0, r3
    1f62:	f7ff f9f3 	bl	134c <_Z8getPointv>
				if (verbose)
				Serial.println(
				(String) F("screen pressed at: (") + (String) pointTouched.x + ","
				+ (String) pointTouched.y + (String) F(")"));
				square = getSquare(pointTouched);
    1f66:	23fd      	movs	r3, #253	; 0xfd
    1f68:	18fc      	adds	r4, r7, r3
    1f6a:	2328      	movs	r3, #40	; 0x28
    1f6c:	18fb      	adds	r3, r7, r3
    1f6e:	6818      	ldr	r0, [r3, #0]
    1f70:	6859      	ldr	r1, [r3, #4]
    1f72:	f7ff faec 	bl	154e <_Z9getSquare8TS_Point>
    1f76:	0003      	movs	r3, r0
    1f78:	7023      	strb	r3, [r4, #0]
				if (!(square == 255)) break;
    1f7a:	23fd      	movs	r3, #253	; 0xfd
    1f7c:	18fb      	adds	r3, r7, r3
    1f7e:	781b      	ldrb	r3, [r3, #0]
    1f80:	2bff      	cmp	r3, #255	; 0xff
    1f82:	d0e1      	beq.n	1f48 <_Z11quantumGamehh+0x88>
			}

			// Check to see if selected square is occupied
			if (boardState[square][0] != 0) continue;
    1f84:	23fd      	movs	r3, #253	; 0xfd
    1f86:	18fb      	adds	r3, r7, r3
    1f88:	781a      	ldrb	r2, [r3, #0]
    1f8a:	2350      	movs	r3, #80	; 0x50
    1f8c:	18f9      	adds	r1, r7, r3
    1f8e:	0013      	movs	r3, r2
    1f90:	009b      	lsls	r3, r3, #2
    1f92:	189b      	adds	r3, r3, r2
    1f94:	005b      	lsls	r3, r3, #1
    1f96:	189b      	adds	r3, r3, r2
    1f98:	5c5b      	ldrb	r3, [r3, r1]
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d14b      	bne.n	2036 <_Z11quantumGamehh+0x176>
    1f9e:	e001      	b.n	1fa4 <_Z11quantumGamehh+0xe4>
				if (!touchScreen.touched()) continue;
    1fa0:	46c0      	nop			; (mov r8, r8)
			}
    1fa2:	e7d1      	b.n	1f48 <_Z11quantumGamehh+0x88>
			if (boardState[square][turn + 1] != 0) continue;
    1fa4:	23fd      	movs	r3, #253	; 0xfd
    1fa6:	18fb      	adds	r3, r7, r3
    1fa8:	781a      	ldrb	r2, [r3, #0]
    1faa:	23ff      	movs	r3, #255	; 0xff
    1fac:	18fb      	adds	r3, r7, r3
    1fae:	781b      	ldrb	r3, [r3, #0]
    1fb0:	1c59      	adds	r1, r3, #1
    1fb2:	2350      	movs	r3, #80	; 0x50
    1fb4:	18f8      	adds	r0, r7, r3
    1fb6:	0013      	movs	r3, r2
    1fb8:	009b      	lsls	r3, r3, #2
    1fba:	189b      	adds	r3, r3, r2
    1fbc:	005b      	lsls	r3, r3, #1
    1fbe:	189b      	adds	r3, r3, r2
    1fc0:	18c3      	adds	r3, r0, r3
    1fc2:	5c5b      	ldrb	r3, [r3, r1]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d138      	bne.n	203a <_Z11quantumGamehh+0x17a>

			// Update board state
			boardState[square][turn + 1] = player;
    1fc8:	23fd      	movs	r3, #253	; 0xfd
    1fca:	18fb      	adds	r3, r7, r3
    1fcc:	781a      	ldrb	r2, [r3, #0]
    1fce:	23ff      	movs	r3, #255	; 0xff
    1fd0:	18fb      	adds	r3, r7, r3
    1fd2:	781b      	ldrb	r3, [r3, #0]
    1fd4:	1c59      	adds	r1, r3, #1
    1fd6:	2350      	movs	r3, #80	; 0x50
    1fd8:	18f8      	adds	r0, r7, r3
    1fda:	0013      	movs	r3, r2
    1fdc:	009b      	lsls	r3, r3, #2
    1fde:	189b      	adds	r3, r3, r2
    1fe0:	005b      	lsls	r3, r3, #1
    1fe2:	189b      	adds	r3, r3, r2
    1fe4:	18c3      	adds	r3, r0, r3
    1fe6:	22f1      	movs	r2, #241	; 0xf1
    1fe8:	18ba      	adds	r2, r7, r2
    1fea:	7812      	ldrb	r2, [r2, #0]
    1fec:	545a      	strb	r2, [r3, r1]
			if (recentSquares[0] == 255) {
    1fee:	2344      	movs	r3, #68	; 0x44
    1ff0:	18fb      	adds	r3, r7, r3
    1ff2:	781b      	ldrb	r3, [r3, #0]
    1ff4:	2bff      	cmp	r3, #255	; 0xff
    1ff6:	d106      	bne.n	2006 <_Z11quantumGamehh+0x146>
				recentSquares[0] = square;
    1ff8:	2344      	movs	r3, #68	; 0x44
    1ffa:	18fb      	adds	r3, r7, r3
    1ffc:	22fd      	movs	r2, #253	; 0xfd
    1ffe:	18ba      	adds	r2, r7, r2
    2000:	7812      	ldrb	r2, [r2, #0]
    2002:	701a      	strb	r2, [r3, #0]
    2004:	e005      	b.n	2012 <_Z11quantumGamehh+0x152>
			} else {
				recentSquares[1] = square;
    2006:	2344      	movs	r3, #68	; 0x44
    2008:	18fb      	adds	r3, r7, r3
    200a:	22fd      	movs	r2, #253	; 0xfd
    200c:	18ba      	adds	r2, r7, r2
    200e:	7812      	ldrb	r2, [r2, #0]
    2010:	705a      	strb	r2, [r3, #1]
			}
		

			// Draw small nought or cross on selected square
			drawSmallCounter(square, turn, false);
    2012:	23ff      	movs	r3, #255	; 0xff
    2014:	18fb      	adds	r3, r7, r3
    2016:	7819      	ldrb	r1, [r3, #0]
    2018:	23fd      	movs	r3, #253	; 0xfd
    201a:	18fb      	adds	r3, r7, r3
    201c:	781b      	ldrb	r3, [r3, #0]
    201e:	2200      	movs	r2, #0
    2020:	0018      	movs	r0, r3
    2022:	f7ff fc0e 	bl	1842 <_Z16drawSmallCounterhhb>
			
			countersThisTurn++;
    2026:	23fc      	movs	r3, #252	; 0xfc
    2028:	18fb      	adds	r3, r7, r3
    202a:	781a      	ldrb	r2, [r3, #0]
    202c:	23fc      	movs	r3, #252	; 0xfc
    202e:	18fb      	adds	r3, r7, r3
    2030:	3201      	adds	r2, #1
    2032:	701a      	strb	r2, [r3, #0]
    2034:	e782      	b.n	1f3c <_Z11quantumGamehh+0x7c>
			if (boardState[square][0] != 0) continue;
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	e780      	b.n	1f3c <_Z11quantumGamehh+0x7c>
			if (boardState[square][turn + 1] != 0) continue;
    203a:	46c0      	nop			; (mov r8, r8)
		while (countersThisTurn < 2) {
    203c:	e77e      	b.n	1f3c <_Z11quantumGamehh+0x7c>
		}
		
		// Check for measurement
		uint8_t circle[9] = {255, 255, 255, 255, 255, 255, 255, 255, 255};
    203e:	2338      	movs	r3, #56	; 0x38
    2040:	18fb      	adds	r3, r7, r3
    2042:	4aa0      	ldr	r2, [pc, #640]	; (22c4 <_Z11quantumGamehh+0x404>)
    2044:	ca03      	ldmia	r2!, {r0, r1}
    2046:	c303      	stmia	r3!, {r0, r1}
    2048:	7812      	ldrb	r2, [r2, #0]
    204a:	701a      	strb	r2, [r3, #0]
		checkForCircle(boardState, square, turn + 1, square, circle);
    204c:	23ff      	movs	r3, #255	; 0xff
    204e:	18fb      	adds	r3, r7, r3
    2050:	781b      	ldrb	r3, [r3, #0]
    2052:	3301      	adds	r3, #1
    2054:	b2da      	uxtb	r2, r3
    2056:	23fd      	movs	r3, #253	; 0xfd
    2058:	18fb      	adds	r3, r7, r3
    205a:	781c      	ldrb	r4, [r3, #0]
    205c:	23fd      	movs	r3, #253	; 0xfd
    205e:	18fb      	adds	r3, r7, r3
    2060:	7819      	ldrb	r1, [r3, #0]
    2062:	2350      	movs	r3, #80	; 0x50
    2064:	18f8      	adds	r0, r7, r3
    2066:	2338      	movs	r3, #56	; 0x38
    2068:	18fb      	adds	r3, r7, r3
    206a:	9300      	str	r3, [sp, #0]
    206c:	0023      	movs	r3, r4
    206e:	f7ff fc7c 	bl	196a <_Z14checkForCirclePA11_hhhhPh>
		if (circle[0] != 255) {
    2072:	2338      	movs	r3, #56	; 0x38
    2074:	18fb      	adds	r3, r7, r3
    2076:	781b      	ldrb	r3, [r3, #0]
    2078:	2bff      	cmp	r3, #255	; 0xff
    207a:	d100      	bne.n	207e <_Z11quantumGamehh+0x1be>
    207c:	e141      	b.n	2302 <_Z11quantumGamehh+0x442>
			// Circle found
			
			// Ask user how to resolve
			
			// Draw bold counters
			for (uint8_t i = 0; i < 9; i++) {
    207e:	23fb      	movs	r3, #251	; 0xfb
    2080:	18fb      	adds	r3, r7, r3
    2082:	2200      	movs	r2, #0
    2084:	701a      	strb	r2, [r3, #0]
    2086:	23fb      	movs	r3, #251	; 0xfb
    2088:	18fb      	adds	r3, r7, r3
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	2b08      	cmp	r3, #8
    208e:	dc42      	bgt.n	2116 <_Z11quantumGamehh+0x256>
				if (circle[i] != 255) {
    2090:	23fb      	movs	r3, #251	; 0xfb
    2092:	18fb      	adds	r3, r7, r3
    2094:	781b      	ldrb	r3, [r3, #0]
    2096:	2238      	movs	r2, #56	; 0x38
    2098:	18ba      	adds	r2, r7, r2
    209a:	5cd3      	ldrb	r3, [r2, r3]
    209c:	2bff      	cmp	r3, #255	; 0xff
    209e:	d032      	beq.n	2106 <_Z11quantumGamehh+0x246>
					for (uint8_t j = 0; j < 9; j++) {
    20a0:	23fa      	movs	r3, #250	; 0xfa
    20a2:	18fb      	adds	r3, r7, r3
    20a4:	2200      	movs	r2, #0
    20a6:	701a      	strb	r2, [r3, #0]
    20a8:	23fa      	movs	r3, #250	; 0xfa
    20aa:	18fb      	adds	r3, r7, r3
    20ac:	781b      	ldrb	r3, [r3, #0]
    20ae:	2b08      	cmp	r3, #8
    20b0:	dc29      	bgt.n	2106 <_Z11quantumGamehh+0x246>
						if (boardState[j][circle[i] + 1]) {
    20b2:	23fa      	movs	r3, #250	; 0xfa
    20b4:	18fb      	adds	r3, r7, r3
    20b6:	781a      	ldrb	r2, [r3, #0]
    20b8:	23fb      	movs	r3, #251	; 0xfb
    20ba:	18fb      	adds	r3, r7, r3
    20bc:	781b      	ldrb	r3, [r3, #0]
    20be:	2138      	movs	r1, #56	; 0x38
    20c0:	1879      	adds	r1, r7, r1
    20c2:	5ccb      	ldrb	r3, [r1, r3]
    20c4:	1c59      	adds	r1, r3, #1
    20c6:	2350      	movs	r3, #80	; 0x50
    20c8:	18f8      	adds	r0, r7, r3
    20ca:	0013      	movs	r3, r2
    20cc:	009b      	lsls	r3, r3, #2
    20ce:	189b      	adds	r3, r3, r2
    20d0:	005b      	lsls	r3, r3, #1
    20d2:	189b      	adds	r3, r3, r2
    20d4:	18c3      	adds	r3, r0, r3
    20d6:	5c5b      	ldrb	r3, [r3, r1]
    20d8:	2b00      	cmp	r3, #0
    20da:	d00c      	beq.n	20f6 <_Z11quantumGamehh+0x236>
							drawSmallCounter(j, circle[i], true);
    20dc:	23fb      	movs	r3, #251	; 0xfb
    20de:	18fb      	adds	r3, r7, r3
    20e0:	781b      	ldrb	r3, [r3, #0]
    20e2:	2238      	movs	r2, #56	; 0x38
    20e4:	18ba      	adds	r2, r7, r2
    20e6:	5cd1      	ldrb	r1, [r2, r3]
    20e8:	23fa      	movs	r3, #250	; 0xfa
    20ea:	18fb      	adds	r3, r7, r3
    20ec:	781b      	ldrb	r3, [r3, #0]
    20ee:	2201      	movs	r2, #1
    20f0:	0018      	movs	r0, r3
    20f2:	f7ff fba6 	bl	1842 <_Z16drawSmallCounterhhb>
					for (uint8_t j = 0; j < 9; j++) {
    20f6:	23fa      	movs	r3, #250	; 0xfa
    20f8:	18fb      	adds	r3, r7, r3
    20fa:	781a      	ldrb	r2, [r3, #0]
    20fc:	23fa      	movs	r3, #250	; 0xfa
    20fe:	18fb      	adds	r3, r7, r3
    2100:	3201      	adds	r2, #1
    2102:	701a      	strb	r2, [r3, #0]
    2104:	e7d0      	b.n	20a8 <_Z11quantumGamehh+0x1e8>
			for (uint8_t i = 0; i < 9; i++) {
    2106:	23fb      	movs	r3, #251	; 0xfb
    2108:	18fb      	adds	r3, r7, r3
    210a:	781a      	ldrb	r2, [r3, #0]
    210c:	23fb      	movs	r3, #251	; 0xfb
    210e:	18fb      	adds	r3, r7, r3
    2110:	3201      	adds	r2, #1
    2112:	701a      	strb	r2, [r3, #0]
    2114:	e7b7      	b.n	2086 <_Z11quantumGamehh+0x1c6>
						}
					}
				}
			}
			// Underline/Draw box around recent counters
			for (uint8_t i = 0; i < 9; i++) {
    2116:	23f9      	movs	r3, #249	; 0xf9
    2118:	18fb      	adds	r3, r7, r3
    211a:	2200      	movs	r2, #0
    211c:	701a      	strb	r2, [r3, #0]
    211e:	23f9      	movs	r3, #249	; 0xf9
    2120:	18fb      	adds	r3, r7, r3
    2122:	781b      	ldrb	r3, [r3, #0]
    2124:	2b08      	cmp	r3, #8
    2126:	dc34      	bgt.n	2192 <_Z11quantumGamehh+0x2d2>
				if (boardState[i][turn + 1] != 0) {
    2128:	23f9      	movs	r3, #249	; 0xf9
    212a:	18fb      	adds	r3, r7, r3
    212c:	781a      	ldrb	r2, [r3, #0]
    212e:	23ff      	movs	r3, #255	; 0xff
    2130:	18fb      	adds	r3, r7, r3
    2132:	781b      	ldrb	r3, [r3, #0]
    2134:	1c59      	adds	r1, r3, #1
    2136:	2350      	movs	r3, #80	; 0x50
    2138:	18f8      	adds	r0, r7, r3
    213a:	0013      	movs	r3, r2
    213c:	009b      	lsls	r3, r3, #2
    213e:	189b      	adds	r3, r3, r2
    2140:	005b      	lsls	r3, r3, #1
    2142:	189b      	adds	r3, r3, r2
    2144:	18c3      	adds	r3, r0, r3
    2146:	5c5b      	ldrb	r3, [r3, r1]
    2148:	2b00      	cmp	r3, #0
    214a:	d01a      	beq.n	2182 <_Z11quantumGamehh+0x2c2>
					TS_Point point = getSmallCounterPosition(i, turn);
    214c:	2310      	movs	r3, #16
    214e:	18f8      	adds	r0, r7, r3
    2150:	23ff      	movs	r3, #255	; 0xff
    2152:	18fb      	adds	r3, r7, r3
    2154:	781a      	ldrb	r2, [r3, #0]
    2156:	23f9      	movs	r3, #249	; 0xf9
    2158:	18fb      	adds	r3, r7, r3
    215a:	781b      	ldrb	r3, [r3, #0]
    215c:	0019      	movs	r1, r3
    215e:	f7ff fad3 	bl	1708 <_Z23getSmallCounterPositionhh>
					tftDisplay.drawRect(point.x, point.y, 25, 25, 0x07FF);
    2162:	2310      	movs	r3, #16
    2164:	18fb      	adds	r3, r7, r3
    2166:	2100      	movs	r1, #0
    2168:	5e59      	ldrsh	r1, [r3, r1]
    216a:	2310      	movs	r3, #16
    216c:	18fb      	adds	r3, r7, r3
    216e:	2202      	movs	r2, #2
    2170:	5e9a      	ldrsh	r2, [r3, r2]
    2172:	4855      	ldr	r0, [pc, #340]	; (22c8 <_Z11quantumGamehh+0x408>)
    2174:	4b55      	ldr	r3, [pc, #340]	; (22cc <_Z11quantumGamehh+0x40c>)
    2176:	9301      	str	r3, [sp, #4]
    2178:	2319      	movs	r3, #25
    217a:	9300      	str	r3, [sp, #0]
    217c:	2319      	movs	r3, #25
    217e:	f00a fca2 	bl	cac6 <_ZN12Adafruit_GFX8drawRectEsssst>
			for (uint8_t i = 0; i < 9; i++) {
    2182:	23f9      	movs	r3, #249	; 0xf9
    2184:	18fb      	adds	r3, r7, r3
    2186:	781a      	ldrb	r2, [r3, #0]
    2188:	23f9      	movs	r3, #249	; 0xf9
    218a:	18fb      	adds	r3, r7, r3
    218c:	3201      	adds	r2, #1
    218e:	701a      	strb	r2, [r3, #0]
    2190:	e7c5      	b.n	211e <_Z11quantumGamehh+0x25e>
				}
			}
			
			// Get the two boxes parameters
			TS_Point square0 = getCounterPosition(recentSquares[0]);
    2192:	2344      	movs	r3, #68	; 0x44
    2194:	18fb      	adds	r3, r7, r3
    2196:	781a      	ldrb	r2, [r3, #0]
    2198:	2320      	movs	r3, #32
    219a:	18fb      	adds	r3, r7, r3
    219c:	0011      	movs	r1, r2
    219e:	0018      	movs	r0, r3
    21a0:	f7ff fa5c 	bl	165c <_Z18getCounterPositionh>
			TS_Point square1 = getCounterPosition(recentSquares[1]);
    21a4:	2344      	movs	r3, #68	; 0x44
    21a6:	18fb      	adds	r3, r7, r3
    21a8:	785a      	ldrb	r2, [r3, #1]
    21aa:	2318      	movs	r3, #24
    21ac:	18fb      	adds	r3, r7, r3
    21ae:	0011      	movs	r1, r2
    21b0:	0018      	movs	r0, r3
    21b2:	f7ff fa53 	bl	165c <_Z18getCounterPositionh>
			
			
			// Wait for the user to click one of the two boxes
			uint8_t tappedSquare = 255;
    21b6:	23f8      	movs	r3, #248	; 0xf8
    21b8:	18fb      	adds	r3, r7, r3
    21ba:	22ff      	movs	r2, #255	; 0xff
    21bc:	701a      	strb	r2, [r3, #0]
			while (true) {
				if (!touchScreen.touched()) continue;
    21be:	4b40      	ldr	r3, [pc, #256]	; (22c0 <_Z11quantumGamehh+0x400>)
    21c0:	0018      	movs	r0, r3
    21c2:	f005 f855 	bl	7270 <_ZN15Adafruit_FT62067touchedEv>
    21c6:	0003      	movs	r3, r0
    21c8:	425a      	negs	r2, r3
    21ca:	4153      	adcs	r3, r2
    21cc:	b2db      	uxtb	r3, r3
    21ce:	2b00      	cmp	r3, #0
    21d0:	d000      	beq.n	21d4 <_Z11quantumGamehh+0x314>
    21d2:	e070      	b.n	22b6 <_Z11quantumGamehh+0x3f6>
				TS_Point point = getPoint();
    21d4:	2308      	movs	r3, #8
    21d6:	18fb      	adds	r3, r7, r3
    21d8:	0018      	movs	r0, r3
    21da:	f7ff f8b7 	bl	134c <_Z8getPointv>
				if (point.x > square0.x && point.x < square0.x + 80 && point.y > square0.y && point.y < square0.y + 80) {
    21de:	2308      	movs	r3, #8
    21e0:	18fb      	adds	r3, r7, r3
    21e2:	2200      	movs	r2, #0
    21e4:	5e9a      	ldrsh	r2, [r3, r2]
    21e6:	2320      	movs	r3, #32
    21e8:	18fb      	adds	r3, r7, r3
    21ea:	2100      	movs	r1, #0
    21ec:	5e5b      	ldrsh	r3, [r3, r1]
    21ee:	429a      	cmp	r2, r3
    21f0:	dd28      	ble.n	2244 <_Z11quantumGamehh+0x384>
    21f2:	2308      	movs	r3, #8
    21f4:	18fb      	adds	r3, r7, r3
    21f6:	2200      	movs	r2, #0
    21f8:	5e9b      	ldrsh	r3, [r3, r2]
    21fa:	001a      	movs	r2, r3
    21fc:	2320      	movs	r3, #32
    21fe:	18fb      	adds	r3, r7, r3
    2200:	2100      	movs	r1, #0
    2202:	5e5b      	ldrsh	r3, [r3, r1]
    2204:	3350      	adds	r3, #80	; 0x50
    2206:	429a      	cmp	r2, r3
    2208:	da1c      	bge.n	2244 <_Z11quantumGamehh+0x384>
    220a:	2308      	movs	r3, #8
    220c:	18fb      	adds	r3, r7, r3
    220e:	2202      	movs	r2, #2
    2210:	5e9a      	ldrsh	r2, [r3, r2]
    2212:	2320      	movs	r3, #32
    2214:	18fb      	adds	r3, r7, r3
    2216:	2102      	movs	r1, #2
    2218:	5e5b      	ldrsh	r3, [r3, r1]
    221a:	429a      	cmp	r2, r3
    221c:	dd12      	ble.n	2244 <_Z11quantumGamehh+0x384>
    221e:	2308      	movs	r3, #8
    2220:	18fb      	adds	r3, r7, r3
    2222:	2202      	movs	r2, #2
    2224:	5e9b      	ldrsh	r3, [r3, r2]
    2226:	001a      	movs	r2, r3
    2228:	2320      	movs	r3, #32
    222a:	18fb      	adds	r3, r7, r3
    222c:	2102      	movs	r1, #2
    222e:	5e5b      	ldrsh	r3, [r3, r1]
    2230:	3350      	adds	r3, #80	; 0x50
    2232:	429a      	cmp	r2, r3
    2234:	da06      	bge.n	2244 <_Z11quantumGamehh+0x384>
					tappedSquare = recentSquares[0];
    2236:	23f8      	movs	r3, #248	; 0xf8
    2238:	18fb      	adds	r3, r7, r3
    223a:	2244      	movs	r2, #68	; 0x44
    223c:	18ba      	adds	r2, r7, r2
    223e:	7812      	ldrb	r2, [r2, #0]
    2240:	701a      	strb	r2, [r3, #0]
					break;
    2242:	e032      	b.n	22aa <_Z11quantumGamehh+0x3ea>
				} else if (point.x > square1.x && point.x < square1.x + 80 && point.y > square1.y && point.y < square1.y + 80) {
    2244:	2308      	movs	r3, #8
    2246:	18fb      	adds	r3, r7, r3
    2248:	2200      	movs	r2, #0
    224a:	5e9a      	ldrsh	r2, [r3, r2]
    224c:	2318      	movs	r3, #24
    224e:	18fb      	adds	r3, r7, r3
    2250:	2100      	movs	r1, #0
    2252:	5e5b      	ldrsh	r3, [r3, r1]
    2254:	429a      	cmp	r2, r3
    2256:	ddb2      	ble.n	21be <_Z11quantumGamehh+0x2fe>
    2258:	2308      	movs	r3, #8
    225a:	18fb      	adds	r3, r7, r3
    225c:	2200      	movs	r2, #0
    225e:	5e9b      	ldrsh	r3, [r3, r2]
    2260:	001a      	movs	r2, r3
    2262:	2318      	movs	r3, #24
    2264:	18fb      	adds	r3, r7, r3
    2266:	2100      	movs	r1, #0
    2268:	5e5b      	ldrsh	r3, [r3, r1]
    226a:	3350      	adds	r3, #80	; 0x50
    226c:	429a      	cmp	r2, r3
    226e:	daa6      	bge.n	21be <_Z11quantumGamehh+0x2fe>
    2270:	2308      	movs	r3, #8
    2272:	18fb      	adds	r3, r7, r3
    2274:	2202      	movs	r2, #2
    2276:	5e9a      	ldrsh	r2, [r3, r2]
    2278:	2318      	movs	r3, #24
    227a:	18fb      	adds	r3, r7, r3
    227c:	2102      	movs	r1, #2
    227e:	5e5b      	ldrsh	r3, [r3, r1]
    2280:	429a      	cmp	r2, r3
    2282:	dd9c      	ble.n	21be <_Z11quantumGamehh+0x2fe>
    2284:	2308      	movs	r3, #8
    2286:	18fb      	adds	r3, r7, r3
    2288:	2202      	movs	r2, #2
    228a:	5e9b      	ldrsh	r3, [r3, r2]
    228c:	001a      	movs	r2, r3
    228e:	2318      	movs	r3, #24
    2290:	18fb      	adds	r3, r7, r3
    2292:	2102      	movs	r1, #2
    2294:	5e5b      	ldrsh	r3, [r3, r1]
    2296:	3350      	adds	r3, #80	; 0x50
    2298:	429a      	cmp	r2, r3
    229a:	da90      	bge.n	21be <_Z11quantumGamehh+0x2fe>
					tappedSquare = recentSquares[1];
    229c:	23f8      	movs	r3, #248	; 0xf8
    229e:	18fb      	adds	r3, r7, r3
    22a0:	2244      	movs	r2, #68	; 0x44
    22a2:	18ba      	adds	r2, r7, r2
    22a4:	7852      	ldrb	r2, [r2, #1]
    22a6:	701a      	strb	r2, [r3, #0]
					break;
    22a8:	46c0      	nop			; (mov r8, r8)
				}
			}


			// Turn to classical counters
			if (tappedSquare != 255) {
    22aa:	23f8      	movs	r3, #248	; 0xf8
    22ac:	18fb      	adds	r3, r7, r3
    22ae:	781b      	ldrb	r3, [r3, #0]
    22b0:	2bff      	cmp	r3, #255	; 0xff
    22b2:	d10d      	bne.n	22d0 <_Z11quantumGamehh+0x410>
    22b4:	e01f      	b.n	22f6 <_Z11quantumGamehh+0x436>
				if (!touchScreen.touched()) continue;
    22b6:	46c0      	nop			; (mov r8, r8)
			}
    22b8:	e781      	b.n	21be <_Z11quantumGamehh+0x2fe>
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	000132f4 	.word	0x000132f4
    22c0:	20000320 	.word	0x20000320
    22c4:	000132f8 	.word	0x000132f8
    22c8:	200002bc 	.word	0x200002bc
    22cc:	000007ff 	.word	0x000007ff
				drawClassicalCounters(boardState, tappedSquare, turn + 1, turn + 1);
    22d0:	23ff      	movs	r3, #255	; 0xff
    22d2:	18fb      	adds	r3, r7, r3
    22d4:	781b      	ldrb	r3, [r3, #0]
    22d6:	3301      	adds	r3, #1
    22d8:	b2da      	uxtb	r2, r3
    22da:	23ff      	movs	r3, #255	; 0xff
    22dc:	18fb      	adds	r3, r7, r3
    22de:	781b      	ldrb	r3, [r3, #0]
    22e0:	3301      	adds	r3, #1
    22e2:	b2dc      	uxtb	r4, r3
    22e4:	23f8      	movs	r3, #248	; 0xf8
    22e6:	18fb      	adds	r3, r7, r3
    22e8:	7819      	ldrb	r1, [r3, #0]
    22ea:	2350      	movs	r3, #80	; 0x50
    22ec:	18f8      	adds	r0, r7, r3
    22ee:	0023      	movs	r3, r4
    22f0:	f7ff fbe9 	bl	1ac6 <_Z21drawClassicalCountersPA11_hhhh>
    22f4:	e005      	b.n	2302 <_Z11quantumGamehh+0x442>
			} else {
				Serial.println(F("Error"));
    22f6:	4a9a      	ldr	r2, [pc, #616]	; (2560 <_Z11quantumGamehh+0x6a0>)
    22f8:	4b9a      	ldr	r3, [pc, #616]	; (2564 <_Z11quantumGamehh+0x6a4>)
    22fa:	0011      	movs	r1, r2
    22fc:	0018      	movs	r0, r3
    22fe:	f000 fef1 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
			}
		} 
		
		// winningRows[x][0] = winner
		// winningRows[x][1] = subscript total
		uint8_t winningRows[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    2302:	2330      	movs	r3, #48	; 0x30
    2304:	18fb      	adds	r3, r7, r3
    2306:	0018      	movs	r0, r3
    2308:	2306      	movs	r3, #6
    230a:	001a      	movs	r2, r3
    230c:	2100      	movs	r1, #0
    230e:	f00e fa89 	bl	10824 <memset>
		uint8_t numOfWinningRows = 0;
    2312:	23f7      	movs	r3, #247	; 0xf7
    2314:	18fb      	adds	r3, r7, r3
    2316:	2200      	movs	r2, #0
    2318:	701a      	strb	r2, [r3, #0]
		// Check to see if someone has won
		for (uint8_t i = 0; i < 8; i++) {
    231a:	23f6      	movs	r3, #246	; 0xf6
    231c:	18fb      	adds	r3, r7, r3
    231e:	2200      	movs	r2, #0
    2320:	701a      	strb	r2, [r3, #0]
    2322:	23f6      	movs	r3, #246	; 0xf6
    2324:	18fb      	adds	r3, r7, r3
    2326:	781b      	ldrb	r3, [r3, #0]
    2328:	2b07      	cmp	r3, #7
    232a:	dd00      	ble.n	232e <_Z11quantumGamehh+0x46e>
    232c:	e0b7      	b.n	249e <_Z11quantumGamehh+0x5de>
			if (boardState[winIndexes[i][0]][0] == boardState[winIndexes[i][1]][0]
    232e:	23f6      	movs	r3, #246	; 0xf6
    2330:	18fb      	adds	r3, r7, r3
    2332:	781a      	ldrb	r2, [r3, #0]
    2334:	498c      	ldr	r1, [pc, #560]	; (2568 <_Z11quantumGamehh+0x6a8>)
    2336:	0013      	movs	r3, r2
    2338:	005b      	lsls	r3, r3, #1
    233a:	189b      	adds	r3, r3, r2
    233c:	5c5b      	ldrb	r3, [r3, r1]
    233e:	001a      	movs	r2, r3
    2340:	2350      	movs	r3, #80	; 0x50
    2342:	18f9      	adds	r1, r7, r3
    2344:	0013      	movs	r3, r2
    2346:	009b      	lsls	r3, r3, #2
    2348:	189b      	adds	r3, r3, r2
    234a:	005b      	lsls	r3, r3, #1
    234c:	189b      	adds	r3, r3, r2
    234e:	5c59      	ldrb	r1, [r3, r1]
    2350:	23f6      	movs	r3, #246	; 0xf6
    2352:	18fb      	adds	r3, r7, r3
    2354:	781a      	ldrb	r2, [r3, #0]
    2356:	4884      	ldr	r0, [pc, #528]	; (2568 <_Z11quantumGamehh+0x6a8>)
    2358:	0013      	movs	r3, r2
    235a:	005b      	lsls	r3, r3, #1
    235c:	189b      	adds	r3, r3, r2
    235e:	18c3      	adds	r3, r0, r3
    2360:	3301      	adds	r3, #1
    2362:	781b      	ldrb	r3, [r3, #0]
    2364:	001a      	movs	r2, r3
    2366:	2350      	movs	r3, #80	; 0x50
    2368:	18f8      	adds	r0, r7, r3
    236a:	0013      	movs	r3, r2
    236c:	009b      	lsls	r3, r3, #2
    236e:	189b      	adds	r3, r3, r2
    2370:	005b      	lsls	r3, r3, #1
    2372:	189b      	adds	r3, r3, r2
    2374:	5c1b      	ldrb	r3, [r3, r0]
    2376:	4299      	cmp	r1, r3
    2378:	d000      	beq.n	237c <_Z11quantumGamehh+0x4bc>
    237a:	e088      	b.n	248e <_Z11quantumGamehh+0x5ce>
			&& boardState[winIndexes[i][0]][0] == boardState[winIndexes[i][2]][0]
    237c:	23f6      	movs	r3, #246	; 0xf6
    237e:	18fb      	adds	r3, r7, r3
    2380:	781a      	ldrb	r2, [r3, #0]
    2382:	4979      	ldr	r1, [pc, #484]	; (2568 <_Z11quantumGamehh+0x6a8>)
    2384:	0013      	movs	r3, r2
    2386:	005b      	lsls	r3, r3, #1
    2388:	189b      	adds	r3, r3, r2
    238a:	5c5b      	ldrb	r3, [r3, r1]
    238c:	001a      	movs	r2, r3
    238e:	2350      	movs	r3, #80	; 0x50
    2390:	18f9      	adds	r1, r7, r3
    2392:	0013      	movs	r3, r2
    2394:	009b      	lsls	r3, r3, #2
    2396:	189b      	adds	r3, r3, r2
    2398:	005b      	lsls	r3, r3, #1
    239a:	189b      	adds	r3, r3, r2
    239c:	5c59      	ldrb	r1, [r3, r1]
    239e:	23f6      	movs	r3, #246	; 0xf6
    23a0:	18fb      	adds	r3, r7, r3
    23a2:	781a      	ldrb	r2, [r3, #0]
    23a4:	4870      	ldr	r0, [pc, #448]	; (2568 <_Z11quantumGamehh+0x6a8>)
    23a6:	0013      	movs	r3, r2
    23a8:	005b      	lsls	r3, r3, #1
    23aa:	189b      	adds	r3, r3, r2
    23ac:	18c3      	adds	r3, r0, r3
    23ae:	3302      	adds	r3, #2
    23b0:	781b      	ldrb	r3, [r3, #0]
    23b2:	001a      	movs	r2, r3
    23b4:	2350      	movs	r3, #80	; 0x50
    23b6:	18f8      	adds	r0, r7, r3
    23b8:	0013      	movs	r3, r2
    23ba:	009b      	lsls	r3, r3, #2
    23bc:	189b      	adds	r3, r3, r2
    23be:	005b      	lsls	r3, r3, #1
    23c0:	189b      	adds	r3, r3, r2
    23c2:	5c1b      	ldrb	r3, [r3, r0]
    23c4:	4299      	cmp	r1, r3
    23c6:	d162      	bne.n	248e <_Z11quantumGamehh+0x5ce>
			&& boardState[winIndexes[i][0]][0] != 0) {
    23c8:	23f6      	movs	r3, #246	; 0xf6
    23ca:	18fb      	adds	r3, r7, r3
    23cc:	781a      	ldrb	r2, [r3, #0]
    23ce:	4966      	ldr	r1, [pc, #408]	; (2568 <_Z11quantumGamehh+0x6a8>)
    23d0:	0013      	movs	r3, r2
    23d2:	005b      	lsls	r3, r3, #1
    23d4:	189b      	adds	r3, r3, r2
    23d6:	5c5b      	ldrb	r3, [r3, r1]
    23d8:	001a      	movs	r2, r3
    23da:	2350      	movs	r3, #80	; 0x50
    23dc:	18f9      	adds	r1, r7, r3
    23de:	0013      	movs	r3, r2
    23e0:	009b      	lsls	r3, r3, #2
    23e2:	189b      	adds	r3, r3, r2
    23e4:	005b      	lsls	r3, r3, #1
    23e6:	189b      	adds	r3, r3, r2
    23e8:	5c5b      	ldrb	r3, [r3, r1]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d04f      	beq.n	248e <_Z11quantumGamehh+0x5ce>
				// Someone has won
				
				// Add the player that won to winningRows
				winningRows[numOfWinningRows][0] = player;
    23ee:	23f7      	movs	r3, #247	; 0xf7
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	781a      	ldrb	r2, [r3, #0]
    23f4:	2330      	movs	r3, #48	; 0x30
    23f6:	18fb      	adds	r3, r7, r3
    23f8:	0052      	lsls	r2, r2, #1
    23fa:	21f1      	movs	r1, #241	; 0xf1
    23fc:	1879      	adds	r1, r7, r1
    23fe:	7809      	ldrb	r1, [r1, #0]
    2400:	54d1      	strb	r1, [r2, r3]
				
				// Total the subscripts and store in winningRows
				uint8_t subscriptTotal = 0;
    2402:	23f5      	movs	r3, #245	; 0xf5
    2404:	18fb      	adds	r3, r7, r3
    2406:	2200      	movs	r2, #0
    2408:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = 0; j < 3; j++) {
    240a:	23f4      	movs	r3, #244	; 0xf4
    240c:	18fb      	adds	r3, r7, r3
    240e:	2200      	movs	r2, #0
    2410:	701a      	strb	r2, [r3, #0]
    2412:	23f4      	movs	r3, #244	; 0xf4
    2414:	18fb      	adds	r3, r7, r3
    2416:	781b      	ldrb	r3, [r3, #0]
    2418:	2b02      	cmp	r3, #2
    241a:	dc25      	bgt.n	2468 <_Z11quantumGamehh+0x5a8>
					subscriptTotal += boardState[winIndexes[i][j]][1];
    241c:	23f6      	movs	r3, #246	; 0xf6
    241e:	18fb      	adds	r3, r7, r3
    2420:	781a      	ldrb	r2, [r3, #0]
    2422:	23f4      	movs	r3, #244	; 0xf4
    2424:	18fb      	adds	r3, r7, r3
    2426:	7819      	ldrb	r1, [r3, #0]
    2428:	484f      	ldr	r0, [pc, #316]	; (2568 <_Z11quantumGamehh+0x6a8>)
    242a:	0013      	movs	r3, r2
    242c:	005b      	lsls	r3, r3, #1
    242e:	189b      	adds	r3, r3, r2
    2430:	18c3      	adds	r3, r0, r3
    2432:	5c5b      	ldrb	r3, [r3, r1]
    2434:	001a      	movs	r2, r3
    2436:	2350      	movs	r3, #80	; 0x50
    2438:	18f9      	adds	r1, r7, r3
    243a:	0013      	movs	r3, r2
    243c:	009b      	lsls	r3, r3, #2
    243e:	189b      	adds	r3, r3, r2
    2440:	005b      	lsls	r3, r3, #1
    2442:	189b      	adds	r3, r3, r2
    2444:	18cb      	adds	r3, r1, r3
    2446:	3301      	adds	r3, #1
    2448:	7819      	ldrb	r1, [r3, #0]
    244a:	23f5      	movs	r3, #245	; 0xf5
    244c:	18fb      	adds	r3, r7, r3
    244e:	22f5      	movs	r2, #245	; 0xf5
    2450:	18ba      	adds	r2, r7, r2
    2452:	7812      	ldrb	r2, [r2, #0]
    2454:	188a      	adds	r2, r1, r2
    2456:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = 0; j < 3; j++) {
    2458:	23f4      	movs	r3, #244	; 0xf4
    245a:	18fb      	adds	r3, r7, r3
    245c:	781a      	ldrb	r2, [r3, #0]
    245e:	23f4      	movs	r3, #244	; 0xf4
    2460:	18fb      	adds	r3, r7, r3
    2462:	3201      	adds	r2, #1
    2464:	701a      	strb	r2, [r3, #0]
    2466:	e7d4      	b.n	2412 <_Z11quantumGamehh+0x552>
				}
				winningRows[numOfWinningRows][1] = subscriptTotal;
    2468:	23f7      	movs	r3, #247	; 0xf7
    246a:	18fb      	adds	r3, r7, r3
    246c:	781b      	ldrb	r3, [r3, #0]
    246e:	2230      	movs	r2, #48	; 0x30
    2470:	18ba      	adds	r2, r7, r2
    2472:	005b      	lsls	r3, r3, #1
    2474:	18d3      	adds	r3, r2, r3
    2476:	3301      	adds	r3, #1
    2478:	22f5      	movs	r2, #245	; 0xf5
    247a:	18ba      	adds	r2, r7, r2
    247c:	7812      	ldrb	r2, [r2, #0]
    247e:	701a      	strb	r2, [r3, #0]
				numOfWinningRows++;
    2480:	23f7      	movs	r3, #247	; 0xf7
    2482:	18fb      	adds	r3, r7, r3
    2484:	781a      	ldrb	r2, [r3, #0]
    2486:	23f7      	movs	r3, #247	; 0xf7
    2488:	18fb      	adds	r3, r7, r3
    248a:	3201      	adds	r2, #1
    248c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++) {
    248e:	23f6      	movs	r3, #246	; 0xf6
    2490:	18fb      	adds	r3, r7, r3
    2492:	781a      	ldrb	r2, [r3, #0]
    2494:	23f6      	movs	r3, #246	; 0xf6
    2496:	18fb      	adds	r3, r7, r3
    2498:	3201      	adds	r2, #1
    249a:	701a      	strb	r2, [r3, #0]
    249c:	e741      	b.n	2322 <_Z11quantumGamehh+0x462>
			}
		}
		
		// Find the winner if one exists
		uint8_t highestSubscript = 0;
    249e:	23f3      	movs	r3, #243	; 0xf3
    24a0:	18fb      	adds	r3, r7, r3
    24a2:	2200      	movs	r2, #0
    24a4:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 3; i++) {
    24a6:	23f2      	movs	r3, #242	; 0xf2
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	2200      	movs	r2, #0
    24ac:	701a      	strb	r2, [r3, #0]
    24ae:	23f2      	movs	r3, #242	; 0xf2
    24b0:	18fb      	adds	r3, r7, r3
    24b2:	781b      	ldrb	r3, [r3, #0]
    24b4:	2b02      	cmp	r3, #2
    24b6:	dc2c      	bgt.n	2512 <_Z11quantumGamehh+0x652>
			if (winningRows[i][1] > highestSubscript) {
    24b8:	23f2      	movs	r3, #242	; 0xf2
    24ba:	18fb      	adds	r3, r7, r3
    24bc:	781b      	ldrb	r3, [r3, #0]
    24be:	2230      	movs	r2, #48	; 0x30
    24c0:	18ba      	adds	r2, r7, r2
    24c2:	005b      	lsls	r3, r3, #1
    24c4:	18d3      	adds	r3, r2, r3
    24c6:	3301      	adds	r3, #1
    24c8:	781b      	ldrb	r3, [r3, #0]
    24ca:	001a      	movs	r2, r3
    24cc:	23f3      	movs	r3, #243	; 0xf3
    24ce:	18fb      	adds	r3, r7, r3
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	429a      	cmp	r2, r3
    24d4:	dd15      	ble.n	2502 <_Z11quantumGamehh+0x642>
				winner = winningRows[i][0];
    24d6:	23f2      	movs	r3, #242	; 0xf2
    24d8:	18fb      	adds	r3, r7, r3
    24da:	7819      	ldrb	r1, [r3, #0]
    24dc:	23fe      	movs	r3, #254	; 0xfe
    24de:	18fb      	adds	r3, r7, r3
    24e0:	2230      	movs	r2, #48	; 0x30
    24e2:	18ba      	adds	r2, r7, r2
    24e4:	0049      	lsls	r1, r1, #1
    24e6:	5c8a      	ldrb	r2, [r1, r2]
    24e8:	701a      	strb	r2, [r3, #0]
				highestSubscript = winningRows[i][1];
    24ea:	23f2      	movs	r3, #242	; 0xf2
    24ec:	18fb      	adds	r3, r7, r3
    24ee:	781a      	ldrb	r2, [r3, #0]
    24f0:	23f3      	movs	r3, #243	; 0xf3
    24f2:	18fb      	adds	r3, r7, r3
    24f4:	2130      	movs	r1, #48	; 0x30
    24f6:	1879      	adds	r1, r7, r1
    24f8:	0052      	lsls	r2, r2, #1
    24fa:	188a      	adds	r2, r1, r2
    24fc:	3201      	adds	r2, #1
    24fe:	7812      	ldrb	r2, [r2, #0]
    2500:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 3; i++) {
    2502:	23f2      	movs	r3, #242	; 0xf2
    2504:	18fb      	adds	r3, r7, r3
    2506:	781a      	ldrb	r2, [r3, #0]
    2508:	23f2      	movs	r3, #242	; 0xf2
    250a:	18fb      	adds	r3, r7, r3
    250c:	3201      	adds	r2, #1
    250e:	701a      	strb	r2, [r3, #0]
    2510:	e7cd      	b.n	24ae <_Z11quantumGamehh+0x5ee>
			}
		}
		
		Serial.print(F("winner = "));
    2512:	4a16      	ldr	r2, [pc, #88]	; (256c <_Z11quantumGamehh+0x6ac>)
    2514:	4b13      	ldr	r3, [pc, #76]	; (2564 <_Z11quantumGamehh+0x6a4>)
    2516:	0011      	movs	r1, r2
    2518:	0018      	movs	r0, r3
    251a:	f000 fd28 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(winner);
    251e:	23fe      	movs	r3, #254	; 0xfe
    2520:	18fb      	adds	r3, r7, r3
    2522:	7819      	ldrb	r1, [r3, #0]
    2524:	4b0f      	ldr	r3, [pc, #60]	; (2564 <_Z11quantumGamehh+0x6a4>)
    2526:	220a      	movs	r2, #10
    2528:	0018      	movs	r0, r3
    252a:	f000 fe3e 	bl	31aa <_ZN5Print7printlnEhi>
		if (winner != 0) break;
    252e:	23fe      	movs	r3, #254	; 0xfe
    2530:	18fb      	adds	r3, r7, r3
    2532:	781b      	ldrb	r3, [r3, #0]
    2534:	2b00      	cmp	r3, #0
    2536:	d10a      	bne.n	254e <_Z11quantumGamehh+0x68e>
		
		// TODO: Test removing this delay
		
		turn++;
    2538:	23ff      	movs	r3, #255	; 0xff
    253a:	18fb      	adds	r3, r7, r3
    253c:	781a      	ldrb	r2, [r3, #0]
    253e:	23ff      	movs	r3, #255	; 0xff
    2540:	18fb      	adds	r3, r7, r3
    2542:	3201      	adds	r2, #1
    2544:	701a      	strb	r2, [r3, #0]
		delay(100);
    2546:	2064      	movs	r0, #100	; 0x64
    2548:	f000 fc60 	bl	2e0c <delay>
	while (bigCounters < 9) {
    254c:	e4e7      	b.n	1f1e <_Z11quantumGamehh+0x5e>
		if (winner != 0) break;
    254e:	46c0      	nop			; (mov r8, r8)
	}
	return winner;
    2550:	23fe      	movs	r3, #254	; 0xfe
    2552:	18fb      	adds	r3, r7, r3
    2554:	781b      	ldrb	r3, [r3, #0]
}
    2556:	0018      	movs	r0, r3
    2558:	46bd      	mov	sp, r7
    255a:	b041      	add	sp, #260	; 0x104
    255c:	bd90      	pop	{r4, r7, pc}
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	000132ec 	.word	0x000132ec
    2564:	20000e94 	.word	0x20000e94
    2568:	20000004 	.word	0x20000004
    256c:	000132e0 	.word	0x000132e0

00002570 <_Z9playMatchi>:

void playMatch(int maxGames) {
    2570:	b590      	push	{r4, r7, lr}
    2572:	b089      	sub	sp, #36	; 0x24
    2574:	af00      	add	r7, sp, #0
    2576:	6078      	str	r0, [r7, #4]
	uint8_t noughtsScore = 0;
    2578:	231f      	movs	r3, #31
    257a:	18fb      	adds	r3, r7, r3
    257c:	2200      	movs	r2, #0
    257e:	701a      	strb	r2, [r3, #0]
	uint8_t crossesScore = 0;
    2580:	231e      	movs	r3, #30
    2582:	18fb      	adds	r3, r7, r3
    2584:	2200      	movs	r2, #0
    2586:	701a      	strb	r2, [r3, #0]
	uint8_t gamesPlayed = 0;
    2588:	231d      	movs	r3, #29
    258a:	18fb      	adds	r3, r7, r3
    258c:	2200      	movs	r2, #0
    258e:	701a      	strb	r2, [r3, #0]

	// Draw score bar for match
	drawBitmap('a', 0, 0);
    2590:	2200      	movs	r2, #0
    2592:	2100      	movs	r1, #0
    2594:	2061      	movs	r0, #97	; 0x61
    2596:	f7fd fe65 	bl	264 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
    259a:	2220      	movs	r2, #32
    259c:	2176      	movs	r1, #118	; 0x76
    259e:	2063      	movs	r0, #99	; 0x63
    25a0:	f7fd fe60 	bl	264 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
    25a4:	231f      	movs	r3, #31
    25a6:	18fb      	adds	r3, r7, r3
    25a8:	781a      	ldrb	r2, [r3, #0]
    25aa:	231e      	movs	r3, #30
    25ac:	18fb      	adds	r3, r7, r3
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	0019      	movs	r1, r3
    25b2:	0010      	movs	r0, r2
    25b4:	f7fe ff7e 	bl	14b4 <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
    25b8:	220a      	movs	r2, #10
    25ba:	2151      	movs	r1, #81	; 0x51
    25bc:	2062      	movs	r0, #98	; 0x62
    25be:	f7fd fe51 	bl	264 <_Z10drawBitmapcss>

	while (gamesPlayed < maxGames) {
    25c2:	231d      	movs	r3, #29
    25c4:	18fb      	adds	r3, r7, r3
    25c6:	781a      	ldrb	r2, [r3, #0]
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	429a      	cmp	r2, r3
    25cc:	db00      	blt.n	25d0 <_Z9playMatchi+0x60>
    25ce:	e0e6      	b.n	279e <_Z9playMatchi+0x22e>
		State winner = game(noughtsScore, crossesScore);
    25d0:	231b      	movs	r3, #27
    25d2:	18fc      	adds	r4, r7, r3
    25d4:	231e      	movs	r3, #30
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	781a      	ldrb	r2, [r3, #0]
    25da:	231f      	movs	r3, #31
    25dc:	18fb      	adds	r3, r7, r3
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	0011      	movs	r1, r2
    25e2:	0018      	movs	r0, r3
    25e4:	f7ff fb4e 	bl	1c84 <_Z4gamehh>
    25e8:	0003      	movs	r3, r0
    25ea:	7023      	strb	r3, [r4, #0]

		// Select win banner and add to winners score
		char bitmap;
		switch (winner) {
    25ec:	231b      	movs	r3, #27
    25ee:	18fb      	adds	r3, r7, r3
    25f0:	781b      	ldrb	r3, [r3, #0]
    25f2:	2b01      	cmp	r3, #1
    25f4:	d017      	beq.n	2626 <_Z9playMatchi+0xb6>
    25f6:	2b02      	cmp	r3, #2
    25f8:	d002      	beq.n	2600 <_Z9playMatchi+0x90>
    25fa:	2b00      	cmp	r3, #0
    25fc:	d026      	beq.n	264c <_Z9playMatchi+0xdc>
    25fe:	e02a      	b.n	2656 <_Z9playMatchi+0xe6>
			case cross:
			// Crosses wins
			bitmap = 'e';
    2600:	231c      	movs	r3, #28
    2602:	18fb      	adds	r3, r7, r3
    2604:	2265      	movs	r2, #101	; 0x65
    2606:	701a      	strb	r2, [r3, #0]
			crossesScore++;
    2608:	231e      	movs	r3, #30
    260a:	18fb      	adds	r3, r7, r3
    260c:	781a      	ldrb	r2, [r3, #0]
    260e:	231e      	movs	r3, #30
    2610:	18fb      	adds	r3, r7, r3
    2612:	3201      	adds	r2, #1
    2614:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    2616:	231d      	movs	r3, #29
    2618:	18fb      	adds	r3, r7, r3
    261a:	781a      	ldrb	r2, [r3, #0]
    261c:	231d      	movs	r3, #29
    261e:	18fb      	adds	r3, r7, r3
    2620:	3201      	adds	r2, #1
    2622:	701a      	strb	r2, [r3, #0]
			break;
    2624:	e017      	b.n	2656 <_Z9playMatchi+0xe6>
			case nought:
			// Noughts wins
			bitmap = 'g';
    2626:	231c      	movs	r3, #28
    2628:	18fb      	adds	r3, r7, r3
    262a:	2267      	movs	r2, #103	; 0x67
    262c:	701a      	strb	r2, [r3, #0]
			noughtsScore++;
    262e:	231f      	movs	r3, #31
    2630:	18fb      	adds	r3, r7, r3
    2632:	781a      	ldrb	r2, [r3, #0]
    2634:	231f      	movs	r3, #31
    2636:	18fb      	adds	r3, r7, r3
    2638:	3201      	adds	r2, #1
    263a:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    263c:	231d      	movs	r3, #29
    263e:	18fb      	adds	r3, r7, r3
    2640:	781a      	ldrb	r2, [r3, #0]
    2642:	231d      	movs	r3, #29
    2644:	18fb      	adds	r3, r7, r3
    2646:	3201      	adds	r2, #1
    2648:	701a      	strb	r2, [r3, #0]
			break;
    264a:	e004      	b.n	2656 <_Z9playMatchi+0xe6>
			case empty:
			// Game is a draw
			bitmap = 'f';
    264c:	231c      	movs	r3, #28
    264e:	18fb      	adds	r3, r7, r3
    2650:	2266      	movs	r2, #102	; 0x66
    2652:	701a      	strb	r2, [r3, #0]
			break;
    2654:	46c0      	nop			; (mov r8, r8)
		}
		
		updateScore(noughtsScore, crossesScore);
    2656:	231f      	movs	r3, #31
    2658:	18fb      	adds	r3, r7, r3
    265a:	781a      	ldrb	r2, [r3, #0]
    265c:	231e      	movs	r3, #30
    265e:	18fb      	adds	r3, r7, r3
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	0019      	movs	r1, r3
    2664:	0010      	movs	r0, r2
    2666:	f7fe ff25 	bl	14b4 <_Z11updateScoreii>
		
		// If there are still games to be played draw win banner,
		// otherwise draw end game screen
		uint8_t gamesToWin = (maxGames / 2) + 1;
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	2b00      	cmp	r3, #0
    266e:	da00      	bge.n	2672 <_Z9playMatchi+0x102>
    2670:	3301      	adds	r3, #1
    2672:	105b      	asrs	r3, r3, #1
    2674:	b2da      	uxtb	r2, r3
    2676:	231a      	movs	r3, #26
    2678:	18fb      	adds	r3, r7, r3
    267a:	3201      	adds	r2, #1
    267c:	701a      	strb	r2, [r3, #0]
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    267e:	231f      	movs	r3, #31
    2680:	18fb      	adds	r3, r7, r3
    2682:	781a      	ldrb	r2, [r3, #0]
    2684:	231a      	movs	r3, #26
    2686:	18fb      	adds	r3, r7, r3
    2688:	781b      	ldrb	r3, [r3, #0]
    268a:	429a      	cmp	r2, r3
    268c:	da1c      	bge.n	26c8 <_Z9playMatchi+0x158>
    268e:	231e      	movs	r3, #30
    2690:	18fb      	adds	r3, r7, r3
    2692:	781a      	ldrb	r2, [r3, #0]
    2694:	231a      	movs	r3, #26
    2696:	18fb      	adds	r3, r7, r3
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	429a      	cmp	r2, r3
    269c:	da14      	bge.n	26c8 <_Z9playMatchi+0x158>
			drawBitmap(bitmap, 0, 110);
    269e:	231c      	movs	r3, #28
    26a0:	18fb      	adds	r3, r7, r3
    26a2:	781b      	ldrb	r3, [r3, #0]
    26a4:	226e      	movs	r2, #110	; 0x6e
    26a6:	2100      	movs	r1, #0
    26a8:	0018      	movs	r0, r3
    26aa:	f7fd fddb 	bl	264 <_Z10drawBitmapcss>
			while (true) if (touchScreen.touched()) break;
    26ae:	4b41      	ldr	r3, [pc, #260]	; (27b4 <_Z9playMatchi+0x244>)
    26b0:	0018      	movs	r0, r3
    26b2:	f004 fddd 	bl	7270 <_ZN15Adafruit_FT62067touchedEv>
    26b6:	0003      	movs	r3, r0
    26b8:	1e5a      	subs	r2, r3, #1
    26ba:	4193      	sbcs	r3, r2
    26bc:	b2db      	uxtb	r3, r3
    26be:	2b00      	cmp	r3, #0
    26c0:	d100      	bne.n	26c4 <_Z9playMatchi+0x154>
    26c2:	e7f4      	b.n	26ae <_Z9playMatchi+0x13e>
    26c4:	46c0      	nop			; (mov r8, r8)
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    26c6:	e068      	b.n	279a <_Z9playMatchi+0x22a>
			} else {
			if (crossesScore > noughtsScore) {
    26c8:	231e      	movs	r3, #30
    26ca:	18fb      	adds	r3, r7, r3
    26cc:	781a      	ldrb	r2, [r3, #0]
    26ce:	231f      	movs	r3, #31
    26d0:	18fb      	adds	r3, r7, r3
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	429a      	cmp	r2, r3
    26d6:	dd30      	ble.n	273a <_Z9playMatchi+0x1ca>
				// Draw game-over, crosses wins
				drawBitmap('m', 0, 0);
    26d8:	2200      	movs	r2, #0
    26da:	2100      	movs	r1, #0
    26dc:	206d      	movs	r0, #109	; 0x6d
    26de:	f7fd fdc1 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    26e2:	4b34      	ldr	r3, [pc, #208]	; (27b4 <_Z9playMatchi+0x244>)
    26e4:	0018      	movs	r0, r3
    26e6:	f004 fdc3 	bl	7270 <_ZN15Adafruit_FT62067touchedEv>
    26ea:	0003      	movs	r3, r0
    26ec:	1e5a      	subs	r2, r3, #1
    26ee:	4193      	sbcs	r3, r2
    26f0:	b2db      	uxtb	r3, r3
    26f2:	2b00      	cmp	r3, #0
    26f4:	d01f      	beq.n	2736 <_Z9playMatchi+0x1c6>
						TS_Point point = getPoint();
    26f6:	2314      	movs	r3, #20
    26f8:	18fb      	adds	r3, r7, r3
    26fa:	0018      	movs	r0, r3
    26fc:	f7fe fe26 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    2700:	2314      	movs	r3, #20
    2702:	18fb      	adds	r3, r7, r3
    2704:	2200      	movs	r2, #0
    2706:	5e9b      	ldrsh	r3, [r3, r2]
    2708:	2b16      	cmp	r3, #22
    270a:	ddea      	ble.n	26e2 <_Z9playMatchi+0x172>
    270c:	2314      	movs	r3, #20
    270e:	18fb      	adds	r3, r7, r3
    2710:	2200      	movs	r2, #0
    2712:	5e9b      	ldrsh	r3, [r3, r2]
    2714:	2bd7      	cmp	r3, #215	; 0xd7
    2716:	dce4      	bgt.n	26e2 <_Z9playMatchi+0x172>
    2718:	2314      	movs	r3, #20
    271a:	18fb      	adds	r3, r7, r3
    271c:	2202      	movs	r2, #2
    271e:	5e9b      	ldrsh	r3, [r3, r2]
    2720:	2bb9      	cmp	r3, #185	; 0xb9
    2722:	ddde      	ble.n	26e2 <_Z9playMatchi+0x172>
    2724:	2314      	movs	r3, #20
    2726:	18fb      	adds	r3, r7, r3
    2728:	2202      	movs	r2, #2
    272a:	5e9a      	ldrsh	r2, [r3, r2]
    272c:	2384      	movs	r3, #132	; 0x84
    272e:	005b      	lsls	r3, r3, #1
    2730:	429a      	cmp	r2, r3
    2732:	dd33      	ble.n	279c <_Z9playMatchi+0x22c>
    2734:	e7d5      	b.n	26e2 <_Z9playMatchi+0x172>
							// They pressed the start button
							goto exit;
						}
						} else {
						continue;
    2736:	46c0      	nop			; (mov r8, r8)
					}
				}
    2738:	e7d3      	b.n	26e2 <_Z9playMatchi+0x172>
				} else {
				// Draw game-over, noughts wins
				drawBitmap('n', 0, 0);
    273a:	2200      	movs	r2, #0
    273c:	2100      	movs	r1, #0
    273e:	206e      	movs	r0, #110	; 0x6e
    2740:	f7fd fd90 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2744:	4b1b      	ldr	r3, [pc, #108]	; (27b4 <_Z9playMatchi+0x244>)
    2746:	0018      	movs	r0, r3
    2748:	f004 fd92 	bl	7270 <_ZN15Adafruit_FT62067touchedEv>
    274c:	0003      	movs	r3, r0
    274e:	1e5a      	subs	r2, r3, #1
    2750:	4193      	sbcs	r3, r2
    2752:	b2db      	uxtb	r3, r3
    2754:	2b00      	cmp	r3, #0
    2756:	d0f5      	beq.n	2744 <_Z9playMatchi+0x1d4>
						TS_Point point = getPoint();
    2758:	230c      	movs	r3, #12
    275a:	18fb      	adds	r3, r7, r3
    275c:	0018      	movs	r0, r3
    275e:	f7fe fdf5 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    2762:	230c      	movs	r3, #12
    2764:	18fb      	adds	r3, r7, r3
    2766:	2200      	movs	r2, #0
    2768:	5e9b      	ldrsh	r3, [r3, r2]
    276a:	2b16      	cmp	r3, #22
    276c:	dd13      	ble.n	2796 <_Z9playMatchi+0x226>
    276e:	230c      	movs	r3, #12
    2770:	18fb      	adds	r3, r7, r3
    2772:	2200      	movs	r2, #0
    2774:	5e9b      	ldrsh	r3, [r3, r2]
    2776:	2bd7      	cmp	r3, #215	; 0xd7
    2778:	dc0d      	bgt.n	2796 <_Z9playMatchi+0x226>
    277a:	230c      	movs	r3, #12
    277c:	18fb      	adds	r3, r7, r3
    277e:	2202      	movs	r2, #2
    2780:	5e9b      	ldrsh	r3, [r3, r2]
    2782:	2bb9      	cmp	r3, #185	; 0xb9
    2784:	dd07      	ble.n	2796 <_Z9playMatchi+0x226>
    2786:	230c      	movs	r3, #12
    2788:	18fb      	adds	r3, r7, r3
    278a:	2202      	movs	r2, #2
    278c:	5e9a      	ldrsh	r2, [r3, r2]
    278e:	2384      	movs	r3, #132	; 0x84
    2790:	005b      	lsls	r3, r3, #1
    2792:	429a      	cmp	r2, r3
    2794:	dd03      	ble.n	279e <_Z9playMatchi+0x22e>
							// They pressed the start button
							goto exit;
							} else {
							continue;
    2796:	46c0      	nop			; (mov r8, r8)
						}
					}
				}
    2798:	e7d4      	b.n	2744 <_Z9playMatchi+0x1d4>
	while (gamesPlayed < maxGames) {
    279a:	e712      	b.n	25c2 <_Z9playMatchi+0x52>
							goto exit;
    279c:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	exit:
	Serial.println("Broke while loop");
    279e:	4a06      	ldr	r2, [pc, #24]	; (27b8 <_Z9playMatchi+0x248>)
    27a0:	4b06      	ldr	r3, [pc, #24]	; (27bc <_Z9playMatchi+0x24c>)
    27a2:	0011      	movs	r1, r2
    27a4:	0018      	movs	r0, r3
    27a6:	f000 fcc9 	bl	313c <_ZN5Print7printlnEPKc>
}
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	46bd      	mov	sp, r7
    27ae:	b009      	add	sp, #36	; 0x24
    27b0:	bd90      	pop	{r4, r7, pc}
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	20000320 	.word	0x20000320
    27b8:	00013304 	.word	0x00013304
    27bc:	20000e94 	.word	0x20000e94

000027c0 <_Z16playQuantumMatchi>:

void playQuantumMatch(int maxGames) {
    27c0:	b590      	push	{r4, r7, lr}
    27c2:	b089      	sub	sp, #36	; 0x24
    27c4:	af00      	add	r7, sp, #0
    27c6:	6078      	str	r0, [r7, #4]
	uint8_t noughtsScore = 0;
    27c8:	231f      	movs	r3, #31
    27ca:	18fb      	adds	r3, r7, r3
    27cc:	2200      	movs	r2, #0
    27ce:	701a      	strb	r2, [r3, #0]
	uint8_t crossesScore = 0;
    27d0:	231e      	movs	r3, #30
    27d2:	18fb      	adds	r3, r7, r3
    27d4:	2200      	movs	r2, #0
    27d6:	701a      	strb	r2, [r3, #0]
	uint8_t gamesPlayed = 0;
    27d8:	231d      	movs	r3, #29
    27da:	18fb      	adds	r3, r7, r3
    27dc:	2200      	movs	r2, #0
    27de:	701a      	strb	r2, [r3, #0]

	// Draw score bar for match
	drawBitmap('a', 0, 0);
    27e0:	2200      	movs	r2, #0
    27e2:	2100      	movs	r1, #0
    27e4:	2061      	movs	r0, #97	; 0x61
    27e6:	f7fd fd3d 	bl	264 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
    27ea:	2220      	movs	r2, #32
    27ec:	2176      	movs	r1, #118	; 0x76
    27ee:	2063      	movs	r0, #99	; 0x63
    27f0:	f7fd fd38 	bl	264 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
    27f4:	231f      	movs	r3, #31
    27f6:	18fb      	adds	r3, r7, r3
    27f8:	781a      	ldrb	r2, [r3, #0]
    27fa:	231e      	movs	r3, #30
    27fc:	18fb      	adds	r3, r7, r3
    27fe:	781b      	ldrb	r3, [r3, #0]
    2800:	0019      	movs	r1, r3
    2802:	0010      	movs	r0, r2
    2804:	f7fe fe56 	bl	14b4 <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
    2808:	220a      	movs	r2, #10
    280a:	2151      	movs	r1, #81	; 0x51
    280c:	2062      	movs	r0, #98	; 0x62
    280e:	f7fd fd29 	bl	264 <_Z10drawBitmapcss>

	while (gamesPlayed < maxGames) {
    2812:	231d      	movs	r3, #29
    2814:	18fb      	adds	r3, r7, r3
    2816:	781a      	ldrb	r2, [r3, #0]
    2818:	687b      	ldr	r3, [r7, #4]
    281a:	429a      	cmp	r2, r3
    281c:	db00      	blt.n	2820 <_Z16playQuantumMatchi+0x60>
    281e:	e0e6      	b.n	29ee <_Z16playQuantumMatchi+0x22e>
		uint8_t winner = quantumGame(noughtsScore, crossesScore);
    2820:	231b      	movs	r3, #27
    2822:	18fc      	adds	r4, r7, r3
    2824:	231e      	movs	r3, #30
    2826:	18fb      	adds	r3, r7, r3
    2828:	781a      	ldrb	r2, [r3, #0]
    282a:	231f      	movs	r3, #31
    282c:	18fb      	adds	r3, r7, r3
    282e:	781b      	ldrb	r3, [r3, #0]
    2830:	0011      	movs	r1, r2
    2832:	0018      	movs	r0, r3
    2834:	f7ff fb44 	bl	1ec0 <_Z11quantumGamehh>
    2838:	0003      	movs	r3, r0
    283a:	7023      	strb	r3, [r4, #0]

		// Select win banner and add to winners score
		char bitmap;
		switch (winner) {
    283c:	231b      	movs	r3, #27
    283e:	18fb      	adds	r3, r7, r3
    2840:	781b      	ldrb	r3, [r3, #0]
    2842:	2b01      	cmp	r3, #1
    2844:	d004      	beq.n	2850 <_Z16playQuantumMatchi+0x90>
    2846:	2b02      	cmp	r3, #2
    2848:	d015      	beq.n	2876 <_Z16playQuantumMatchi+0xb6>
    284a:	2b00      	cmp	r3, #0
    284c:	d026      	beq.n	289c <_Z16playQuantumMatchi+0xdc>
    284e:	e02a      	b.n	28a6 <_Z16playQuantumMatchi+0xe6>
			case 1:
			// Crosses wins
			bitmap = 'e';
    2850:	231c      	movs	r3, #28
    2852:	18fb      	adds	r3, r7, r3
    2854:	2265      	movs	r2, #101	; 0x65
    2856:	701a      	strb	r2, [r3, #0]
			crossesScore++;
    2858:	231e      	movs	r3, #30
    285a:	18fb      	adds	r3, r7, r3
    285c:	781a      	ldrb	r2, [r3, #0]
    285e:	231e      	movs	r3, #30
    2860:	18fb      	adds	r3, r7, r3
    2862:	3201      	adds	r2, #1
    2864:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    2866:	231d      	movs	r3, #29
    2868:	18fb      	adds	r3, r7, r3
    286a:	781a      	ldrb	r2, [r3, #0]
    286c:	231d      	movs	r3, #29
    286e:	18fb      	adds	r3, r7, r3
    2870:	3201      	adds	r2, #1
    2872:	701a      	strb	r2, [r3, #0]
			break;
    2874:	e017      	b.n	28a6 <_Z16playQuantumMatchi+0xe6>
			case 2:
			// Noughts wins
			bitmap = 'g';
    2876:	231c      	movs	r3, #28
    2878:	18fb      	adds	r3, r7, r3
    287a:	2267      	movs	r2, #103	; 0x67
    287c:	701a      	strb	r2, [r3, #0]
			noughtsScore++;
    287e:	231f      	movs	r3, #31
    2880:	18fb      	adds	r3, r7, r3
    2882:	781a      	ldrb	r2, [r3, #0]
    2884:	231f      	movs	r3, #31
    2886:	18fb      	adds	r3, r7, r3
    2888:	3201      	adds	r2, #1
    288a:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    288c:	231d      	movs	r3, #29
    288e:	18fb      	adds	r3, r7, r3
    2890:	781a      	ldrb	r2, [r3, #0]
    2892:	231d      	movs	r3, #29
    2894:	18fb      	adds	r3, r7, r3
    2896:	3201      	adds	r2, #1
    2898:	701a      	strb	r2, [r3, #0]
			break;
    289a:	e004      	b.n	28a6 <_Z16playQuantumMatchi+0xe6>
			case 0:
			// Game is a draw
			bitmap = 'f';
    289c:	231c      	movs	r3, #28
    289e:	18fb      	adds	r3, r7, r3
    28a0:	2266      	movs	r2, #102	; 0x66
    28a2:	701a      	strb	r2, [r3, #0]
			break;
    28a4:	46c0      	nop			; (mov r8, r8)
		}
		
		updateScore(noughtsScore, crossesScore);
    28a6:	231f      	movs	r3, #31
    28a8:	18fb      	adds	r3, r7, r3
    28aa:	781a      	ldrb	r2, [r3, #0]
    28ac:	231e      	movs	r3, #30
    28ae:	18fb      	adds	r3, r7, r3
    28b0:	781b      	ldrb	r3, [r3, #0]
    28b2:	0019      	movs	r1, r3
    28b4:	0010      	movs	r0, r2
    28b6:	f7fe fdfd 	bl	14b4 <_Z11updateScoreii>
		
		// If there are still games to be played draw win banner,
		// otherwise draw end game screen
		uint8_t gamesToWin = (maxGames / 2) + 1;
    28ba:	687b      	ldr	r3, [r7, #4]
    28bc:	2b00      	cmp	r3, #0
    28be:	da00      	bge.n	28c2 <_Z16playQuantumMatchi+0x102>
    28c0:	3301      	adds	r3, #1
    28c2:	105b      	asrs	r3, r3, #1
    28c4:	b2da      	uxtb	r2, r3
    28c6:	231a      	movs	r3, #26
    28c8:	18fb      	adds	r3, r7, r3
    28ca:	3201      	adds	r2, #1
    28cc:	701a      	strb	r2, [r3, #0]
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    28ce:	231f      	movs	r3, #31
    28d0:	18fb      	adds	r3, r7, r3
    28d2:	781a      	ldrb	r2, [r3, #0]
    28d4:	231a      	movs	r3, #26
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	781b      	ldrb	r3, [r3, #0]
    28da:	429a      	cmp	r2, r3
    28dc:	da1c      	bge.n	2918 <_Z16playQuantumMatchi+0x158>
    28de:	231e      	movs	r3, #30
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	781a      	ldrb	r2, [r3, #0]
    28e4:	231a      	movs	r3, #26
    28e6:	18fb      	adds	r3, r7, r3
    28e8:	781b      	ldrb	r3, [r3, #0]
    28ea:	429a      	cmp	r2, r3
    28ec:	da14      	bge.n	2918 <_Z16playQuantumMatchi+0x158>
			drawBitmap(bitmap, 0, 110);
    28ee:	231c      	movs	r3, #28
    28f0:	18fb      	adds	r3, r7, r3
    28f2:	781b      	ldrb	r3, [r3, #0]
    28f4:	226e      	movs	r2, #110	; 0x6e
    28f6:	2100      	movs	r1, #0
    28f8:	0018      	movs	r0, r3
    28fa:	f7fd fcb3 	bl	264 <_Z10drawBitmapcss>
			while (true) if (touchScreen.touched()) break;
    28fe:	4b41      	ldr	r3, [pc, #260]	; (2a04 <_Z16playQuantumMatchi+0x244>)
    2900:	0018      	movs	r0, r3
    2902:	f004 fcb5 	bl	7270 <_ZN15Adafruit_FT62067touchedEv>
    2906:	0003      	movs	r3, r0
    2908:	1e5a      	subs	r2, r3, #1
    290a:	4193      	sbcs	r3, r2
    290c:	b2db      	uxtb	r3, r3
    290e:	2b00      	cmp	r3, #0
    2910:	d100      	bne.n	2914 <_Z16playQuantumMatchi+0x154>
    2912:	e7f4      	b.n	28fe <_Z16playQuantumMatchi+0x13e>
    2914:	46c0      	nop			; (mov r8, r8)
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    2916:	e068      	b.n	29ea <_Z16playQuantumMatchi+0x22a>
			} else {
			if (crossesScore > noughtsScore) {
    2918:	231e      	movs	r3, #30
    291a:	18fb      	adds	r3, r7, r3
    291c:	781a      	ldrb	r2, [r3, #0]
    291e:	231f      	movs	r3, #31
    2920:	18fb      	adds	r3, r7, r3
    2922:	781b      	ldrb	r3, [r3, #0]
    2924:	429a      	cmp	r2, r3
    2926:	dd30      	ble.n	298a <_Z16playQuantumMatchi+0x1ca>
				// Draw game-over, crosses wins
				drawBitmap('m', 0, 0);
    2928:	2200      	movs	r2, #0
    292a:	2100      	movs	r1, #0
    292c:	206d      	movs	r0, #109	; 0x6d
    292e:	f7fd fc99 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2932:	4b34      	ldr	r3, [pc, #208]	; (2a04 <_Z16playQuantumMatchi+0x244>)
    2934:	0018      	movs	r0, r3
    2936:	f004 fc9b 	bl	7270 <_ZN15Adafruit_FT62067touchedEv>
    293a:	0003      	movs	r3, r0
    293c:	1e5a      	subs	r2, r3, #1
    293e:	4193      	sbcs	r3, r2
    2940:	b2db      	uxtb	r3, r3
    2942:	2b00      	cmp	r3, #0
    2944:	d01f      	beq.n	2986 <_Z16playQuantumMatchi+0x1c6>
						TS_Point point = getPoint();
    2946:	2314      	movs	r3, #20
    2948:	18fb      	adds	r3, r7, r3
    294a:	0018      	movs	r0, r3
    294c:	f7fe fcfe 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    2950:	2314      	movs	r3, #20
    2952:	18fb      	adds	r3, r7, r3
    2954:	2200      	movs	r2, #0
    2956:	5e9b      	ldrsh	r3, [r3, r2]
    2958:	2b16      	cmp	r3, #22
    295a:	ddea      	ble.n	2932 <_Z16playQuantumMatchi+0x172>
    295c:	2314      	movs	r3, #20
    295e:	18fb      	adds	r3, r7, r3
    2960:	2200      	movs	r2, #0
    2962:	5e9b      	ldrsh	r3, [r3, r2]
    2964:	2bd7      	cmp	r3, #215	; 0xd7
    2966:	dce4      	bgt.n	2932 <_Z16playQuantumMatchi+0x172>
    2968:	2314      	movs	r3, #20
    296a:	18fb      	adds	r3, r7, r3
    296c:	2202      	movs	r2, #2
    296e:	5e9b      	ldrsh	r3, [r3, r2]
    2970:	2bb9      	cmp	r3, #185	; 0xb9
    2972:	ddde      	ble.n	2932 <_Z16playQuantumMatchi+0x172>
    2974:	2314      	movs	r3, #20
    2976:	18fb      	adds	r3, r7, r3
    2978:	2202      	movs	r2, #2
    297a:	5e9a      	ldrsh	r2, [r3, r2]
    297c:	2384      	movs	r3, #132	; 0x84
    297e:	005b      	lsls	r3, r3, #1
    2980:	429a      	cmp	r2, r3
    2982:	dd33      	ble.n	29ec <_Z16playQuantumMatchi+0x22c>
    2984:	e7d5      	b.n	2932 <_Z16playQuantumMatchi+0x172>
							// They pressed the start button
							goto exit;
						}
						} else {
						continue;
    2986:	46c0      	nop			; (mov r8, r8)
					}
				}
    2988:	e7d3      	b.n	2932 <_Z16playQuantumMatchi+0x172>
				} else {
				// Draw game-over, noughts wins
				drawBitmap('n', 0, 0);
    298a:	2200      	movs	r2, #0
    298c:	2100      	movs	r1, #0
    298e:	206e      	movs	r0, #110	; 0x6e
    2990:	f7fd fc68 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2994:	4b1b      	ldr	r3, [pc, #108]	; (2a04 <_Z16playQuantumMatchi+0x244>)
    2996:	0018      	movs	r0, r3
    2998:	f004 fc6a 	bl	7270 <_ZN15Adafruit_FT62067touchedEv>
    299c:	0003      	movs	r3, r0
    299e:	1e5a      	subs	r2, r3, #1
    29a0:	4193      	sbcs	r3, r2
    29a2:	b2db      	uxtb	r3, r3
    29a4:	2b00      	cmp	r3, #0
    29a6:	d0f5      	beq.n	2994 <_Z16playQuantumMatchi+0x1d4>
						TS_Point point = getPoint();
    29a8:	230c      	movs	r3, #12
    29aa:	18fb      	adds	r3, r7, r3
    29ac:	0018      	movs	r0, r3
    29ae:	f7fe fccd 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    29b2:	230c      	movs	r3, #12
    29b4:	18fb      	adds	r3, r7, r3
    29b6:	2200      	movs	r2, #0
    29b8:	5e9b      	ldrsh	r3, [r3, r2]
    29ba:	2b16      	cmp	r3, #22
    29bc:	dd13      	ble.n	29e6 <_Z16playQuantumMatchi+0x226>
    29be:	230c      	movs	r3, #12
    29c0:	18fb      	adds	r3, r7, r3
    29c2:	2200      	movs	r2, #0
    29c4:	5e9b      	ldrsh	r3, [r3, r2]
    29c6:	2bd7      	cmp	r3, #215	; 0xd7
    29c8:	dc0d      	bgt.n	29e6 <_Z16playQuantumMatchi+0x226>
    29ca:	230c      	movs	r3, #12
    29cc:	18fb      	adds	r3, r7, r3
    29ce:	2202      	movs	r2, #2
    29d0:	5e9b      	ldrsh	r3, [r3, r2]
    29d2:	2bb9      	cmp	r3, #185	; 0xb9
    29d4:	dd07      	ble.n	29e6 <_Z16playQuantumMatchi+0x226>
    29d6:	230c      	movs	r3, #12
    29d8:	18fb      	adds	r3, r7, r3
    29da:	2202      	movs	r2, #2
    29dc:	5e9a      	ldrsh	r2, [r3, r2]
    29de:	2384      	movs	r3, #132	; 0x84
    29e0:	005b      	lsls	r3, r3, #1
    29e2:	429a      	cmp	r2, r3
    29e4:	dd03      	ble.n	29ee <_Z16playQuantumMatchi+0x22e>
							// They pressed the start button
							goto exit;
							} else {
							continue;
    29e6:	46c0      	nop			; (mov r8, r8)
						}
					}
				}
    29e8:	e7d4      	b.n	2994 <_Z16playQuantumMatchi+0x1d4>
	while (gamesPlayed < maxGames) {
    29ea:	e712      	b.n	2812 <_Z16playQuantumMatchi+0x52>
							goto exit;
    29ec:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	exit:
	Serial.println("Broke while loop");
    29ee:	4a06      	ldr	r2, [pc, #24]	; (2a08 <_Z16playQuantumMatchi+0x248>)
    29f0:	4b06      	ldr	r3, [pc, #24]	; (2a0c <_Z16playQuantumMatchi+0x24c>)
    29f2:	0011      	movs	r1, r2
    29f4:	0018      	movs	r0, r3
    29f6:	f000 fba1 	bl	313c <_ZN5Print7printlnEPKc>
}
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	46bd      	mov	sp, r7
    29fe:	b009      	add	sp, #36	; 0x24
    2a00:	bd90      	pop	{r4, r7, pc}
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	20000320 	.word	0x20000320
    2a08:	00013304 	.word	0x00013304
    2a0c:	20000e94 	.word	0x20000e94

00002a10 <_Z11startScreenv>:

void startScreen() {
    2a10:	b590      	push	{r4, r7, lr}
    2a12:	b08f      	sub	sp, #60	; 0x3c
    2a14:	af00      	add	r7, sp, #0
	uint8_t maxGames = 1;
    2a16:	2337      	movs	r3, #55	; 0x37
    2a18:	18fb      	adds	r3, r7, r3
    2a1a:	2201      	movs	r2, #1
    2a1c:	701a      	strb	r2, [r3, #0]
	drawBitmap('l', 0, 0);
    2a1e:	2200      	movs	r2, #0
    2a20:	2100      	movs	r1, #0
    2a22:	206c      	movs	r0, #108	; 0x6c
    2a24:	f7fd fc1e 	bl	264 <_Z10drawBitmapcss>
	String s = (String) maxGames;
    2a28:	2337      	movs	r3, #55	; 0x37
    2a2a:	18fb      	adds	r3, r7, r3
    2a2c:	7819      	ldrb	r1, [r3, #0]
    2a2e:	2324      	movs	r3, #36	; 0x24
    2a30:	18fb      	adds	r3, r7, r3
    2a32:	220a      	movs	r2, #10
    2a34:	0018      	movs	r0, r3
    2a36:	f004 fa31 	bl	6e9c <_ZN6StringC1Ehh>
	char maxGamesChar = s.charAt(0);
    2a3a:	2336      	movs	r3, #54	; 0x36
    2a3c:	18fc      	adds	r4, r7, r3
    2a3e:	2324      	movs	r3, #36	; 0x24
    2a40:	18fb      	adds	r3, r7, r3
    2a42:	2100      	movs	r1, #0
    2a44:	0018      	movs	r0, r3
    2a46:	f004 fb9b 	bl	7180 <_ZNK6String6charAtEj>
    2a4a:	0003      	movs	r3, r0
    2a4c:	7023      	strb	r3, [r4, #0]
	drawBitmap(maxGamesChar, 173, 149);
    2a4e:	2336      	movs	r3, #54	; 0x36
    2a50:	18fb      	adds	r3, r7, r3
    2a52:	781b      	ldrb	r3, [r3, #0]
    2a54:	2295      	movs	r2, #149	; 0x95
    2a56:	21ad      	movs	r1, #173	; 0xad
    2a58:	0018      	movs	r0, r3
    2a5a:	f7fd fc03 	bl	264 <_Z10drawBitmapcss>
	boolean quantumMatch;

	while (true) {
		if (touchScreen.touched()) {
    2a5e:	4b6d      	ldr	r3, [pc, #436]	; (2c14 <_Z11startScreenv+0x204>)
    2a60:	0018      	movs	r0, r3
    2a62:	f004 fc05 	bl	7270 <_ZN15Adafruit_FT62067touchedEv>
    2a66:	0003      	movs	r3, r0
    2a68:	1e5a      	subs	r2, r3, #1
    2a6a:	4193      	sbcs	r3, r2
    2a6c:	b2db      	uxtb	r3, r3
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d100      	bne.n	2a74 <_Z11startScreenv+0x64>
    2a72:	e0b1      	b.n	2bd8 <_Z11startScreenv+0x1c8>
			TS_Point point = getPoint();
    2a74:	231c      	movs	r3, #28
    2a76:	18fb      	adds	r3, r7, r3
    2a78:	0018      	movs	r0, r3
    2a7a:	f7fe fc67 	bl	134c <_Z8getPointv>
			if (point.x > 22 && point.x < 216 && point.y > 205 && point.y < 305) {
    2a7e:	231c      	movs	r3, #28
    2a80:	18fb      	adds	r3, r7, r3
    2a82:	2200      	movs	r2, #0
    2a84:	5e9b      	ldrsh	r3, [r3, r2]
    2a86:	2b16      	cmp	r3, #22
    2a88:	dd1f      	ble.n	2aca <_Z11startScreenv+0xba>
    2a8a:	231c      	movs	r3, #28
    2a8c:	18fb      	adds	r3, r7, r3
    2a8e:	2200      	movs	r2, #0
    2a90:	5e9b      	ldrsh	r3, [r3, r2]
    2a92:	2bd7      	cmp	r3, #215	; 0xd7
    2a94:	dc19      	bgt.n	2aca <_Z11startScreenv+0xba>
    2a96:	231c      	movs	r3, #28
    2a98:	18fb      	adds	r3, r7, r3
    2a9a:	2202      	movs	r2, #2
    2a9c:	5e9b      	ldrsh	r3, [r3, r2]
    2a9e:	2bcd      	cmp	r3, #205	; 0xcd
    2aa0:	dd13      	ble.n	2aca <_Z11startScreenv+0xba>
    2aa2:	231c      	movs	r3, #28
    2aa4:	18fb      	adds	r3, r7, r3
    2aa6:	2202      	movs	r2, #2
    2aa8:	5e9a      	ldrsh	r2, [r3, r2]
    2aaa:	2398      	movs	r3, #152	; 0x98
    2aac:	005b      	lsls	r3, r3, #1
    2aae:	429a      	cmp	r2, r3
    2ab0:	dc0b      	bgt.n	2aca <_Z11startScreenv+0xba>
				// They pressed the start button
				quantumMatch = true;
    2ab2:	2333      	movs	r3, #51	; 0x33
    2ab4:	18fb      	adds	r3, r7, r3
    2ab6:	2201      	movs	r2, #1
    2ab8:	701a      	strb	r2, [r3, #0]
				break;
    2aba:	46c0      	nop			; (mov r8, r8)
			continue;
		}
	}
	
	// TODO: Add selecting game-mode
	if (quantumMatch) {
    2abc:	2333      	movs	r3, #51	; 0x33
    2abe:	18fb      	adds	r3, r7, r3
    2ac0:	781b      	ldrb	r3, [r3, #0]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d000      	beq.n	2ac8 <_Z11startScreenv+0xb8>
    2ac6:	e08f      	b.n	2be8 <_Z11startScreenv+0x1d8>
    2ac8:	e095      	b.n	2bf6 <_Z11startScreenv+0x1e6>
				} else if (point.x > 100 && point.x < 180 && point.y > 100 && point.y < 220) {
    2aca:	231c      	movs	r3, #28
    2acc:	18fb      	adds	r3, r7, r3
    2ace:	2200      	movs	r2, #0
    2ad0:	5e9b      	ldrsh	r3, [r3, r2]
    2ad2:	2b64      	cmp	r3, #100	; 0x64
    2ad4:	dd3e      	ble.n	2b54 <_Z11startScreenv+0x144>
    2ad6:	231c      	movs	r3, #28
    2ad8:	18fb      	adds	r3, r7, r3
    2ada:	2200      	movs	r2, #0
    2adc:	5e9b      	ldrsh	r3, [r3, r2]
    2ade:	2bb3      	cmp	r3, #179	; 0xb3
    2ae0:	dc38      	bgt.n	2b54 <_Z11startScreenv+0x144>
    2ae2:	231c      	movs	r3, #28
    2ae4:	18fb      	adds	r3, r7, r3
    2ae6:	2202      	movs	r2, #2
    2ae8:	5e9b      	ldrsh	r3, [r3, r2]
    2aea:	2b64      	cmp	r3, #100	; 0x64
    2aec:	dd32      	ble.n	2b54 <_Z11startScreenv+0x144>
    2aee:	231c      	movs	r3, #28
    2af0:	18fb      	adds	r3, r7, r3
    2af2:	2202      	movs	r2, #2
    2af4:	5e9b      	ldrsh	r3, [r3, r2]
    2af6:	2bdb      	cmp	r3, #219	; 0xdb
    2af8:	dc2c      	bgt.n	2b54 <_Z11startScreenv+0x144>
				if (maxGames != 1) {
    2afa:	2337      	movs	r3, #55	; 0x37
    2afc:	18fb      	adds	r3, r7, r3
    2afe:	781b      	ldrb	r3, [r3, #0]
    2b00:	2b01      	cmp	r3, #1
    2b02:	d06b      	beq.n	2bdc <_Z11startScreenv+0x1cc>
					maxGames -= 2;
    2b04:	2337      	movs	r3, #55	; 0x37
    2b06:	18fb      	adds	r3, r7, r3
    2b08:	2237      	movs	r2, #55	; 0x37
    2b0a:	18ba      	adds	r2, r7, r2
    2b0c:	7812      	ldrb	r2, [r2, #0]
    2b0e:	3a02      	subs	r2, #2
    2b10:	701a      	strb	r2, [r3, #0]
					String s = (String) maxGames;
    2b12:	2337      	movs	r3, #55	; 0x37
    2b14:	18fb      	adds	r3, r7, r3
    2b16:	7819      	ldrb	r1, [r3, #0]
    2b18:	2310      	movs	r3, #16
    2b1a:	18fb      	adds	r3, r7, r3
    2b1c:	220a      	movs	r2, #10
    2b1e:	0018      	movs	r0, r3
    2b20:	f004 f9bc 	bl	6e9c <_ZN6StringC1Ehh>
					char maxGamesChar = s.charAt(0);
    2b24:	2335      	movs	r3, #53	; 0x35
    2b26:	18fc      	adds	r4, r7, r3
    2b28:	2310      	movs	r3, #16
    2b2a:	18fb      	adds	r3, r7, r3
    2b2c:	2100      	movs	r1, #0
    2b2e:	0018      	movs	r0, r3
    2b30:	f004 fb26 	bl	7180 <_ZNK6String6charAtEj>
    2b34:	0003      	movs	r3, r0
    2b36:	7023      	strb	r3, [r4, #0]
					drawBitmap(maxGamesChar, 173, 149);
    2b38:	2335      	movs	r3, #53	; 0x35
    2b3a:	18fb      	adds	r3, r7, r3
    2b3c:	781b      	ldrb	r3, [r3, #0]
    2b3e:	2295      	movs	r2, #149	; 0x95
    2b40:	21ad      	movs	r1, #173	; 0xad
    2b42:	0018      	movs	r0, r3
    2b44:	f7fd fb8e 	bl	264 <_Z10drawBitmapcss>
					String s = (String) maxGames;
    2b48:	2310      	movs	r3, #16
    2b4a:	18fb      	adds	r3, r7, r3
    2b4c:	0018      	movs	r0, r3
    2b4e:	f004 f9e9 	bl	6f24 <_ZN6StringD1Ev>
				continue;
    2b52:	e043      	b.n	2bdc <_Z11startScreenv+0x1cc>
				} else if (point.x > 180 && point.x < 241 && point.y > 100 && point.y < 220) {
    2b54:	231c      	movs	r3, #28
    2b56:	18fb      	adds	r3, r7, r3
    2b58:	2200      	movs	r2, #0
    2b5a:	5e9b      	ldrsh	r3, [r3, r2]
    2b5c:	2bb4      	cmp	r3, #180	; 0xb4
    2b5e:	dd3f      	ble.n	2be0 <_Z11startScreenv+0x1d0>
    2b60:	231c      	movs	r3, #28
    2b62:	18fb      	adds	r3, r7, r3
    2b64:	2200      	movs	r2, #0
    2b66:	5e9b      	ldrsh	r3, [r3, r2]
    2b68:	2bf0      	cmp	r3, #240	; 0xf0
    2b6a:	dc39      	bgt.n	2be0 <_Z11startScreenv+0x1d0>
    2b6c:	231c      	movs	r3, #28
    2b6e:	18fb      	adds	r3, r7, r3
    2b70:	2202      	movs	r2, #2
    2b72:	5e9b      	ldrsh	r3, [r3, r2]
    2b74:	2b64      	cmp	r3, #100	; 0x64
    2b76:	dd33      	ble.n	2be0 <_Z11startScreenv+0x1d0>
    2b78:	231c      	movs	r3, #28
    2b7a:	18fb      	adds	r3, r7, r3
    2b7c:	2202      	movs	r2, #2
    2b7e:	5e9b      	ldrsh	r3, [r3, r2]
    2b80:	2bdb      	cmp	r3, #219	; 0xdb
    2b82:	dc2d      	bgt.n	2be0 <_Z11startScreenv+0x1d0>
				if (maxGames != 9) {
    2b84:	2337      	movs	r3, #55	; 0x37
    2b86:	18fb      	adds	r3, r7, r3
    2b88:	781b      	ldrb	r3, [r3, #0]
    2b8a:	2b09      	cmp	r3, #9
    2b8c:	d02a      	beq.n	2be4 <_Z11startScreenv+0x1d4>
					maxGames += 2;
    2b8e:	2337      	movs	r3, #55	; 0x37
    2b90:	18fb      	adds	r3, r7, r3
    2b92:	2237      	movs	r2, #55	; 0x37
    2b94:	18ba      	adds	r2, r7, r2
    2b96:	7812      	ldrb	r2, [r2, #0]
    2b98:	3202      	adds	r2, #2
    2b9a:	701a      	strb	r2, [r3, #0]
					String s = (String) maxGames;
    2b9c:	2337      	movs	r3, #55	; 0x37
    2b9e:	18fb      	adds	r3, r7, r3
    2ba0:	7819      	ldrb	r1, [r3, #0]
    2ba2:	1d3b      	adds	r3, r7, #4
    2ba4:	220a      	movs	r2, #10
    2ba6:	0018      	movs	r0, r3
    2ba8:	f004 f978 	bl	6e9c <_ZN6StringC1Ehh>
					char maxGamesChar = s.charAt(0);
    2bac:	2334      	movs	r3, #52	; 0x34
    2bae:	18fc      	adds	r4, r7, r3
    2bb0:	1d3b      	adds	r3, r7, #4
    2bb2:	2100      	movs	r1, #0
    2bb4:	0018      	movs	r0, r3
    2bb6:	f004 fae3 	bl	7180 <_ZNK6String6charAtEj>
    2bba:	0003      	movs	r3, r0
    2bbc:	7023      	strb	r3, [r4, #0]
					drawBitmap(maxGamesChar, 173, 149);
    2bbe:	2334      	movs	r3, #52	; 0x34
    2bc0:	18fb      	adds	r3, r7, r3
    2bc2:	781b      	ldrb	r3, [r3, #0]
    2bc4:	2295      	movs	r2, #149	; 0x95
    2bc6:	21ad      	movs	r1, #173	; 0xad
    2bc8:	0018      	movs	r0, r3
    2bca:	f7fd fb4b 	bl	264 <_Z10drawBitmapcss>
					String s = (String) maxGames;
    2bce:	1d3b      	adds	r3, r7, #4
    2bd0:	0018      	movs	r0, r3
    2bd2:	f004 f9a7 	bl	6f24 <_ZN6StringD1Ev>
				continue;
    2bd6:	e005      	b.n	2be4 <_Z11startScreenv+0x1d4>
			continue;
    2bd8:	46c0      	nop			; (mov r8, r8)
    2bda:	e740      	b.n	2a5e <_Z11startScreenv+0x4e>
				continue;
    2bdc:	46c0      	nop			; (mov r8, r8)
    2bde:	e73e      	b.n	2a5e <_Z11startScreenv+0x4e>
				continue;
    2be0:	46c0      	nop			; (mov r8, r8)
    2be2:	e73c      	b.n	2a5e <_Z11startScreenv+0x4e>
				continue;
    2be4:	46c0      	nop			; (mov r8, r8)
	}
    2be6:	e73a      	b.n	2a5e <_Z11startScreenv+0x4e>
		playQuantumMatch(maxGames);
    2be8:	2337      	movs	r3, #55	; 0x37
    2bea:	18fb      	adds	r3, r7, r3
    2bec:	781b      	ldrb	r3, [r3, #0]
    2bee:	0018      	movs	r0, r3
    2bf0:	f7ff fde6 	bl	27c0 <_Z16playQuantumMatchi>
    2bf4:	e005      	b.n	2c02 <_Z11startScreenv+0x1f2>
	} else {
		playMatch(maxGames);
    2bf6:	2337      	movs	r3, #55	; 0x37
    2bf8:	18fb      	adds	r3, r7, r3
    2bfa:	781b      	ldrb	r3, [r3, #0]
    2bfc:	0018      	movs	r0, r3
    2bfe:	f7ff fcb7 	bl	2570 <_Z9playMatchi>
	String s = (String) maxGames;
    2c02:	2324      	movs	r3, #36	; 0x24
    2c04:	18fb      	adds	r3, r7, r3
    2c06:	0018      	movs	r0, r3
    2c08:	f004 f98c 	bl	6f24 <_ZN6StringD1Ev>
	}

}
    2c0c:	46c0      	nop			; (mov r8, r8)
    2c0e:	46bd      	mov	sp, r7
    2c10:	b00f      	add	sp, #60	; 0x3c
    2c12:	bd90      	pop	{r4, r7, pc}
    2c14:	20000320 	.word	0x20000320

00002c18 <setup>:

void setup() {
    2c18:	b580      	push	{r7, lr}
    2c1a:	af00      	add	r7, sp, #0

	Serial.begin(9600);
    2c1c:	2396      	movs	r3, #150	; 0x96
    2c1e:	019a      	lsls	r2, r3, #6
    2c20:	4b1c      	ldr	r3, [pc, #112]	; (2c94 <setup+0x7c>)
    2c22:	0011      	movs	r1, r2
    2c24:	0018      	movs	r0, r3
    2c26:	f000 fdf3 	bl	3810 <_ZN4Uart5beginEm>

	tftDisplay.begin();
    2c2a:	4b1b      	ldr	r3, [pc, #108]	; (2c98 <setup+0x80>)
    2c2c:	2100      	movs	r1, #0
    2c2e:	0018      	movs	r0, r3
    2c30:	f004 fe36 	bl	78a0 <_ZN16Adafruit_ILI93415beginEm>

	if (!touchScreen.begin()) {
    2c34:	4b19      	ldr	r3, [pc, #100]	; (2c9c <setup+0x84>)
    2c36:	2180      	movs	r1, #128	; 0x80
    2c38:	0018      	movs	r0, r3
    2c3a:	f004 fad7 	bl	71ec <_ZN15Adafruit_FT62065beginEh>
    2c3e:	0003      	movs	r3, r0
    2c40:	001a      	movs	r2, r3
    2c42:	2301      	movs	r3, #1
    2c44:	4053      	eors	r3, r2
    2c46:	b2db      	uxtb	r3, r3
    2c48:	2b00      	cmp	r3, #0
    2c4a:	d00c      	beq.n	2c66 <setup+0x4e>
		Serial.println(F("Couldn't start FT6206 touchscreen controller"));
    2c4c:	4a14      	ldr	r2, [pc, #80]	; (2ca0 <setup+0x88>)
    2c4e:	4b11      	ldr	r3, [pc, #68]	; (2c94 <setup+0x7c>)
    2c50:	0011      	movs	r1, r2
    2c52:	0018      	movs	r0, r3
    2c54:	f000 fa46 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Driver might not have been found"));
    2c58:	4a12      	ldr	r2, [pc, #72]	; (2ca4 <setup+0x8c>)
    2c5a:	4b0e      	ldr	r3, [pc, #56]	; (2c94 <setup+0x7c>)
    2c5c:	0011      	movs	r1, r2
    2c5e:	0018      	movs	r0, r3
    2c60:	f000 fa40 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
		while (true);
    2c64:	e7fe      	b.n	2c64 <setup+0x4c>
	}

	if (verbose) Serial.println(F("Display and touchscreen started"));

	if (!SD.begin(SD_CS)) {
    2c66:	4b10      	ldr	r3, [pc, #64]	; (2ca8 <setup+0x90>)
    2c68:	2104      	movs	r1, #4
    2c6a:	0018      	movs	r0, r3
    2c6c:	f006 f812 	bl	8c94 <_ZN5SDLib7SDClass5beginEh>
    2c70:	0003      	movs	r3, r0
    2c72:	001a      	movs	r2, r3
    2c74:	2301      	movs	r3, #1
    2c76:	4053      	eors	r3, r2
    2c78:	b2db      	uxtb	r3, r3
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d005      	beq.n	2c8a <setup+0x72>
		Serial.println(F("Failed to initialise SD card"));
    2c7e:	4a0b      	ldr	r2, [pc, #44]	; (2cac <setup+0x94>)
    2c80:	4b04      	ldr	r3, [pc, #16]	; (2c94 <setup+0x7c>)
    2c82:	0011      	movs	r1, r2
    2c84:	0018      	movs	r0, r3
    2c86:	f000 fa2d 	bl	30e4 <_ZN5Print7printlnEPK19__FlashStringHelper>
	} else if (verbose) Serial.println(F("SD card mounted"));

	// tests();

	startScreen();
    2c8a:	f7ff fec1 	bl	2a10 <_Z11startScreenv>

}
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	46bd      	mov	sp, r7
    2c92:	bd80      	pop	{r7, pc}
    2c94:	20000e94 	.word	0x20000e94
    2c98:	200002bc 	.word	0x200002bc
    2c9c:	20000320 	.word	0x20000320
    2ca0:	00013318 	.word	0x00013318
    2ca4:	00013348 	.word	0x00013348
    2ca8:	200008f4 	.word	0x200008f4
    2cac:	0001336c 	.word	0x0001336c

00002cb0 <loop>:

void loop() {
    2cb0:	b580      	push	{r7, lr}
    2cb2:	af00      	add	r7, sp, #0

	startScreen();
    2cb4:	f7ff feac 	bl	2a10 <_Z11startScreenv>

    2cb8:	46c0      	nop			; (mov r8, r8)
    2cba:	46bd      	mov	sp, r7
    2cbc:	bd80      	pop	{r7, pc}
	...

00002cc0 <_Z41__static_initialization_and_destruction_0ii>:
    2cc0:	b580      	push	{r7, lr}
    2cc2:	b082      	sub	sp, #8
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	6078      	str	r0, [r7, #4]
    2cc8:	6039      	str	r1, [r7, #0]
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	2b01      	cmp	r3, #1
    2cce:	d10e      	bne.n	2cee <_Z41__static_initialization_and_destruction_0ii+0x2e>
    2cd0:	683b      	ldr	r3, [r7, #0]
    2cd2:	4a09      	ldr	r2, [pc, #36]	; (2cf8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2cd4:	4293      	cmp	r3, r2
    2cd6:	d10a      	bne.n	2cee <_Z41__static_initialization_and_destruction_0ii+0x2e>
Adafruit_ILI9341 tftDisplay = Adafruit_ILI9341(tftDisplay_CS, tftDisplay_DC);
    2cd8:	2301      	movs	r3, #1
    2cda:	425b      	negs	r3, r3
    2cdc:	4807      	ldr	r0, [pc, #28]	; (2cfc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2cde:	2209      	movs	r2, #9
    2ce0:	210a      	movs	r1, #10
    2ce2:	f004 fd47 	bl	7774 <_ZN16Adafruit_ILI9341C1Eaaa>
Adafruit_FT6206 touchScreen = Adafruit_FT6206();
    2ce6:	4b06      	ldr	r3, [pc, #24]	; (2d00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2ce8:	0018      	movs	r0, r3
    2cea:	f004 fa72 	bl	71d2 <_ZN15Adafruit_FT6206C1Ev>
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	46bd      	mov	sp, r7
    2cf2:	b002      	add	sp, #8
    2cf4:	bd80      	pop	{r7, pc}
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	0000ffff 	.word	0x0000ffff
    2cfc:	200002bc 	.word	0x200002bc
    2d00:	20000320 	.word	0x20000320

00002d04 <_GLOBAL__sub_I_tftDisplay>:
    2d04:	b580      	push	{r7, lr}
    2d06:	af00      	add	r7, sp, #0
    2d08:	4b03      	ldr	r3, [pc, #12]	; (2d18 <_GLOBAL__sub_I_tftDisplay+0x14>)
    2d0a:	0019      	movs	r1, r3
    2d0c:	2001      	movs	r0, #1
    2d0e:	f7ff ffd7 	bl	2cc0 <_Z41__static_initialization_and_destruction_0ii>
    2d12:	46bd      	mov	sp, r7
    2d14:	bd80      	pop	{r7, pc}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	0000ffff 	.word	0x0000ffff

00002d1c <Dummy_Handler>:
extern void pendSVHook(void);
extern int sysTickHook(void);

/* Default empty handler */
void Dummy_Handler(void)
{
    2d1c:	b580      	push	{r7, lr}
    2d1e:	af00      	add	r7, sp, #0
#if defined DEBUG
  __BKPT(3);
    2d20:	be03      	bkpt	0x0003
#endif
  for (;;) { }
    2d22:	e7fe      	b.n	2d22 <Dummy_Handler+0x6>

00002d24 <Reset_Handler>:

extern int main(void);

/* This is called on processor reset to initialize the device and call main() */
void Reset_Handler(void)
{
    2d24:	b580      	push	{r7, lr}
    2d26:	b082      	sub	sp, #8
    2d28:	af00      	add	r7, sp, #0
  uint32_t *pSrc, *pDest;

  /* Initialize the initialized data section */
  pSrc = &__etext;
    2d2a:	4b1a      	ldr	r3, [pc, #104]	; (2d94 <Reset_Handler+0x70>)
    2d2c:	607b      	str	r3, [r7, #4]
  pDest = &__data_start__;
    2d2e:	4b1a      	ldr	r3, [pc, #104]	; (2d98 <Reset_Handler+0x74>)
    2d30:	603b      	str	r3, [r7, #0]

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2d32:	4a19      	ldr	r2, [pc, #100]	; (2d98 <Reset_Handler+0x74>)
    2d34:	4b19      	ldr	r3, [pc, #100]	; (2d9c <Reset_Handler+0x78>)
    2d36:	429a      	cmp	r2, r3
    2d38:	d012      	beq.n	2d60 <Reset_Handler+0x3c>
    2d3a:	687a      	ldr	r2, [r7, #4]
    2d3c:	683b      	ldr	r3, [r7, #0]
    2d3e:	429a      	cmp	r2, r3
    2d40:	d00e      	beq.n	2d60 <Reset_Handler+0x3c>
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2d42:	e009      	b.n	2d58 <Reset_Handler+0x34>
      *pDest = *pSrc;
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	681a      	ldr	r2, [r3, #0]
    2d48:	683b      	ldr	r3, [r7, #0]
    2d4a:	601a      	str	r2, [r3, #0]
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2d4c:	683b      	ldr	r3, [r7, #0]
    2d4e:	3304      	adds	r3, #4
    2d50:	603b      	str	r3, [r7, #0]
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	3304      	adds	r3, #4
    2d56:	607b      	str	r3, [r7, #4]
    2d58:	683a      	ldr	r2, [r7, #0]
    2d5a:	4b10      	ldr	r3, [pc, #64]	; (2d9c <Reset_Handler+0x78>)
    2d5c:	429a      	cmp	r2, r3
    2d5e:	d3f1      	bcc.n	2d44 <Reset_Handler+0x20>
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2d60:	4a0d      	ldr	r2, [pc, #52]	; (2d98 <Reset_Handler+0x74>)
    2d62:	4b0e      	ldr	r3, [pc, #56]	; (2d9c <Reset_Handler+0x78>)
    2d64:	429a      	cmp	r2, r3
    2d66:	d010      	beq.n	2d8a <Reset_Handler+0x66>
    2d68:	687a      	ldr	r2, [r7, #4]
    2d6a:	683b      	ldr	r3, [r7, #0]
    2d6c:	429a      	cmp	r2, r3
    2d6e:	d00c      	beq.n	2d8a <Reset_Handler+0x66>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2d70:	4b0b      	ldr	r3, [pc, #44]	; (2da0 <Reset_Handler+0x7c>)
    2d72:	603b      	str	r3, [r7, #0]
    2d74:	e005      	b.n	2d82 <Reset_Handler+0x5e>
      *pDest = 0;
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	2200      	movs	r2, #0
    2d7a:	601a      	str	r2, [r3, #0]
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2d7c:	683b      	ldr	r3, [r7, #0]
    2d7e:	3304      	adds	r3, #4
    2d80:	603b      	str	r3, [r7, #0]
    2d82:	683a      	ldr	r2, [r7, #0]
    2d84:	4b07      	ldr	r3, [pc, #28]	; (2da4 <Reset_Handler+0x80>)
    2d86:	429a      	cmp	r2, r3
    2d88:	d3f5      	bcc.n	2d76 <Reset_Handler+0x52>
  }

  SystemInit();
    2d8a:	f000 fb09 	bl	33a0 <SystemInit>

  main();
    2d8e:	f000 f875 	bl	2e7c <main>

  while (1)
    2d92:	e7fe      	b.n	2d92 <Reset_Handler+0x6e>
    2d94:	0001449c 	.word	0x0001449c
    2d98:	20000000 	.word	0x20000000
    2d9c:	200002a0 	.word	0x200002a0
    2da0:	200002a0 	.word	0x200002a0
    2da4:	20000f88 	.word	0x20000f88

00002da8 <SysTick_Handler>:

/* Default Arduino systick handler */
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
    2da8:	b580      	push	{r7, lr}
    2daa:	af00      	add	r7, sp, #0
  if (sysTickHook())
    2dac:	f000 f85b 	bl	2e66 <sysTickHook>
    2db0:	1e03      	subs	r3, r0, #0
    2db2:	d102      	bne.n	2dba <SysTick_Handler+0x12>
    return;
  SysTick_DefaultHandler();
    2db4:	f000 f844 	bl	2e40 <SysTick_DefaultHandler>
    2db8:	e000      	b.n	2dbc <SysTick_Handler+0x14>
    return;
    2dba:	46c0      	nop			; (mov r8, r8)
}
    2dbc:	46bd      	mov	sp, r7
    2dbe:	bd80      	pop	{r7, pc}

00002dc0 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	af00      	add	r7, sp, #0
  if (usb_isr)
    2dc4:	4b04      	ldr	r3, [pc, #16]	; (2dd8 <USB_Handler+0x18>)
    2dc6:	681b      	ldr	r3, [r3, #0]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d002      	beq.n	2dd2 <USB_Handler+0x12>
    usb_isr();
    2dcc:	4b02      	ldr	r3, [pc, #8]	; (2dd8 <USB_Handler+0x18>)
    2dce:	681b      	ldr	r3, [r3, #0]
    2dd0:	4798      	blx	r3
}
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	46bd      	mov	sp, r7
    2dd6:	bd80      	pop	{r7, pc}
    2dd8:	20000330 	.word	0x20000330

00002ddc <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
    2ddc:	b580      	push	{r7, lr}
    2dde:	b082      	sub	sp, #8
    2de0:	af00      	add	r7, sp, #0
    2de2:	6078      	str	r0, [r7, #4]
  usb_isr = new_usb_isr;
    2de4:	4b03      	ldr	r3, [pc, #12]	; (2df4 <USB_SetHandler+0x18>)
    2de6:	687a      	ldr	r2, [r7, #4]
    2de8:	601a      	str	r2, [r3, #0]
}
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	46bd      	mov	sp, r7
    2dee:	b002      	add	sp, #8
    2df0:	bd80      	pop	{r7, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	20000330 	.word	0x20000330

00002df8 <millis>:

/** Tick Counter united by ms */
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
    2df8:	b580      	push	{r7, lr}
    2dfa:	af00      	add	r7, sp, #0
// todo: ensure no interrupts
  return _ulTickCount ;
    2dfc:	4b02      	ldr	r3, [pc, #8]	; (2e08 <millis+0x10>)
    2dfe:	681b      	ldr	r3, [r3, #0]
}
    2e00:	0018      	movs	r0, r3
    2e02:	46bd      	mov	sp, r7
    2e04:	bd80      	pop	{r7, pc}
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	20000334 	.word	0x20000334

00002e0c <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
    2e0c:	b580      	push	{r7, lr}
    2e0e:	b084      	sub	sp, #16
    2e10:	af00      	add	r7, sp, #0
    2e12:	6078      	str	r0, [r7, #4]
  if ( ms == 0 )
    2e14:	687b      	ldr	r3, [r7, #4]
    2e16:	2b00      	cmp	r3, #0
    2e18:	d00c      	beq.n	2e34 <delay+0x28>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
    2e1a:	4b08      	ldr	r3, [pc, #32]	; (2e3c <delay+0x30>)
    2e1c:	681b      	ldr	r3, [r3, #0]
    2e1e:	60fb      	str	r3, [r7, #12]

  do
  {
    yield() ;
    2e20:	f000 f81c 	bl	2e5c <yield>
  } while ( _ulTickCount - start < ms ) ;
    2e24:	4b05      	ldr	r3, [pc, #20]	; (2e3c <delay+0x30>)
    2e26:	681a      	ldr	r2, [r3, #0]
    2e28:	68fb      	ldr	r3, [r7, #12]
    2e2a:	1ad2      	subs	r2, r2, r3
    2e2c:	687b      	ldr	r3, [r7, #4]
    2e2e:	429a      	cmp	r2, r3
    2e30:	d3f6      	bcc.n	2e20 <delay+0x14>
    2e32:	e000      	b.n	2e36 <delay+0x2a>
    return ;
    2e34:	46c0      	nop			; (mov r8, r8)
}
    2e36:	46bd      	mov	sp, r7
    2e38:	b004      	add	sp, #16
    2e3a:	bd80      	pop	{r7, pc}
    2e3c:	20000334 	.word	0x20000334

00002e40 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    2e40:	b580      	push	{r7, lr}
    2e42:	af00      	add	r7, sp, #0
  // Increment tick count each ms
  _ulTickCount++;
    2e44:	4b04      	ldr	r3, [pc, #16]	; (2e58 <SysTick_DefaultHandler+0x18>)
    2e46:	681b      	ldr	r3, [r3, #0]
    2e48:	1c5a      	adds	r2, r3, #1
    2e4a:	4b03      	ldr	r3, [pc, #12]	; (2e58 <SysTick_DefaultHandler+0x18>)
    2e4c:	601a      	str	r2, [r3, #0]
  tickReset();
    2e4e:	f000 fa8d 	bl	336c <tickReset>
}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	46bd      	mov	sp, r7
    2e56:	bd80      	pop	{r7, pc}
    2e58:	20000334 	.word	0x20000334

00002e5c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2e5c:	b580      	push	{r7, lr}
    2e5e:	af00      	add	r7, sp, #0
	// Empty
}
    2e60:	46c0      	nop			; (mov r8, r8)
    2e62:	46bd      	mov	sp, r7
    2e64:	bd80      	pop	{r7, pc}

00002e66 <sysTickHook>:
 * SysTick hook
 *
 * This function is called from SysTick handler, before the default
 * handler provided by Arduino.
 */
static int __false() {
    2e66:	b580      	push	{r7, lr}
    2e68:	af00      	add	r7, sp, #0
	// Return false
	return 0;
    2e6a:	2300      	movs	r3, #0
}
    2e6c:	0018      	movs	r0, r3
    2e6e:	46bd      	mov	sp, r7
    2e70:	bd80      	pop	{r7, pc}

00002e72 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2e72:	b580      	push	{r7, lr}
    2e74:	af00      	add	r7, sp, #0
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	46bd      	mov	sp, r7
    2e7a:	bd80      	pop	{r7, pc}

00002e7c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	af00      	add	r7, sp, #0
  init();
    2e80:	f003 fbf0 	bl	6664 <init>

  __libc_init_array();
    2e84:	f00d fc6c 	bl	10760 <__libc_init_array>

  initVariant();
    2e88:	f7ff fff3 	bl	2e72 <_Z11initVariantv>

  delay(1);
    2e8c:	2001      	movs	r0, #1
    2e8e:	f7ff ffbd 	bl	2e0c <delay>
#if defined(USBCON)
  USBDevice.init();
    2e92:	4b09      	ldr	r3, [pc, #36]	; (2eb8 <main+0x3c>)
    2e94:	0018      	movs	r0, r3
    2e96:	f002 fba1 	bl	55dc <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    2e9a:	4b07      	ldr	r3, [pc, #28]	; (2eb8 <main+0x3c>)
    2e9c:	0018      	movs	r0, r3
    2e9e:	f002 fc37 	bl	5710 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    2ea2:	f7ff feb9 	bl	2c18 <setup>

  for (;;)
  {
    loop();
    2ea6:	f7ff ff03 	bl	2cb0 <loop>
    if (serialEventRun) serialEventRun();
    2eaa:	4b04      	ldr	r3, [pc, #16]	; (2ebc <main+0x40>)
    2eac:	2b00      	cmp	r3, #0
    2eae:	d0fa      	beq.n	2ea6 <main+0x2a>
    2eb0:	e000      	b.n	2eb4 <main+0x38>
    2eb2:	bf00      	nop
    loop();
    2eb4:	e7f7      	b.n	2ea6 <main+0x2a>
    2eb6:	46c0      	nop			; (mov r8, r8)
    2eb8:	200008f0 	.word	0x200008f0
    2ebc:	00000000 	.word	0x00000000

00002ec0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    2ec0:	b590      	push	{r4, r7, lr}
    2ec2:	b083      	sub	sp, #12
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	6078      	str	r0, [r7, #4]
    2ec8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    2eca:	683b      	ldr	r3, [r7, #0]
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d101      	bne.n	2ed4 <_ZN5Print5writeEPKc+0x14>
    2ed0:	2300      	movs	r3, #0
    2ed2:	e00d      	b.n	2ef0 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    2ed4:	687b      	ldr	r3, [r7, #4]
    2ed6:	681b      	ldr	r3, [r3, #0]
    2ed8:	3304      	adds	r3, #4
    2eda:	681c      	ldr	r4, [r3, #0]
    2edc:	683b      	ldr	r3, [r7, #0]
    2ede:	0018      	movs	r0, r3
    2ee0:	f00e fb36 	bl	11550 <strlen>
    2ee4:	0002      	movs	r2, r0
    2ee6:	6839      	ldr	r1, [r7, #0]
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	0018      	movs	r0, r3
    2eec:	47a0      	blx	r4
    2eee:	0003      	movs	r3, r0
    }
    2ef0:	0018      	movs	r0, r3
    2ef2:	46bd      	mov	sp, r7
    2ef4:	b003      	add	sp, #12
    2ef6:	bd90      	pop	{r4, r7, pc}

00002ef8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2ef8:	b580      	push	{r7, lr}
    2efa:	b082      	sub	sp, #8
    2efc:	af00      	add	r7, sp, #0
    2efe:	6078      	str	r0, [r7, #4]
    2f00:	2300      	movs	r3, #0
    2f02:	0018      	movs	r0, r3
    2f04:	46bd      	mov	sp, r7
    2f06:	b002      	add	sp, #8
    2f08:	bd80      	pop	{r7, pc}

00002f0a <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2f0a:	b580      	push	{r7, lr}
    2f0c:	b082      	sub	sp, #8
    2f0e:	af00      	add	r7, sp, #0
    2f10:	6078      	str	r0, [r7, #4]
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	46bd      	mov	sp, r7
    2f16:	b002      	add	sp, #8
    2f18:	bd80      	pop	{r7, pc}

00002f1a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2f1a:	b580      	push	{r7, lr}
    2f1c:	b086      	sub	sp, #24
    2f1e:	af00      	add	r7, sp, #0
    2f20:	60f8      	str	r0, [r7, #12]
    2f22:	60b9      	str	r1, [r7, #8]
    2f24:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    2f26:	2300      	movs	r3, #0
    2f28:	617b      	str	r3, [r7, #20]
  while (size--) {
    2f2a:	687b      	ldr	r3, [r7, #4]
    2f2c:	1e5a      	subs	r2, r3, #1
    2f2e:	607a      	str	r2, [r7, #4]
    2f30:	1e5a      	subs	r2, r3, #1
    2f32:	4193      	sbcs	r3, r2
    2f34:	b2db      	uxtb	r3, r3
    2f36:	2b00      	cmp	r3, #0
    2f38:	d014      	beq.n	2f64 <_ZN5Print5writeEPKhj+0x4a>
    if (write(*buffer++)) n++;
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	681b      	ldr	r3, [r3, #0]
    2f3e:	681a      	ldr	r2, [r3, #0]
    2f40:	68bb      	ldr	r3, [r7, #8]
    2f42:	1c59      	adds	r1, r3, #1
    2f44:	60b9      	str	r1, [r7, #8]
    2f46:	7819      	ldrb	r1, [r3, #0]
    2f48:	68fb      	ldr	r3, [r7, #12]
    2f4a:	0018      	movs	r0, r3
    2f4c:	4790      	blx	r2
    2f4e:	0003      	movs	r3, r0
    2f50:	1e5a      	subs	r2, r3, #1
    2f52:	4193      	sbcs	r3, r2
    2f54:	b2db      	uxtb	r3, r3
    2f56:	2b00      	cmp	r3, #0
    2f58:	d003      	beq.n	2f62 <_ZN5Print5writeEPKhj+0x48>
    2f5a:	697b      	ldr	r3, [r7, #20]
    2f5c:	3301      	adds	r3, #1
    2f5e:	617b      	str	r3, [r7, #20]
  while (size--) {
    2f60:	e7e3      	b.n	2f2a <_ZN5Print5writeEPKhj+0x10>
    else break;
    2f62:	46c0      	nop			; (mov r8, r8)
  }
  return n;
    2f64:	697b      	ldr	r3, [r7, #20]
}
    2f66:	0018      	movs	r0, r3
    2f68:	46bd      	mov	sp, r7
    2f6a:	b006      	add	sp, #24
    2f6c:	bd80      	pop	{r7, pc}

00002f6e <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    2f6e:	b580      	push	{r7, lr}
    2f70:	b082      	sub	sp, #8
    2f72:	af00      	add	r7, sp, #0
    2f74:	6078      	str	r0, [r7, #4]
    2f76:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
    2f78:	683a      	ldr	r2, [r7, #0]
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	0011      	movs	r1, r2
    2f7e:	0018      	movs	r0, r3
    2f80:	f000 f805 	bl	2f8e <_ZN5Print5printEPKc>
    2f84:	0003      	movs	r3, r0
}
    2f86:	0018      	movs	r0, r3
    2f88:	46bd      	mov	sp, r7
    2f8a:	b002      	add	sp, #8
    2f8c:	bd80      	pop	{r7, pc}

00002f8e <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    2f8e:	b580      	push	{r7, lr}
    2f90:	b082      	sub	sp, #8
    2f92:	af00      	add	r7, sp, #0
    2f94:	6078      	str	r0, [r7, #4]
    2f96:	6039      	str	r1, [r7, #0]
  return write(str);
    2f98:	683a      	ldr	r2, [r7, #0]
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	0011      	movs	r1, r2
    2f9e:	0018      	movs	r0, r3
    2fa0:	f7ff ff8e 	bl	2ec0 <_ZN5Print5writeEPKc>
    2fa4:	0003      	movs	r3, r0
}
    2fa6:	0018      	movs	r0, r3
    2fa8:	46bd      	mov	sp, r7
    2faa:	b002      	add	sp, #8
    2fac:	bd80      	pop	{r7, pc}

00002fae <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    2fae:	b580      	push	{r7, lr}
    2fb0:	b082      	sub	sp, #8
    2fb2:	af00      	add	r7, sp, #0
    2fb4:	6078      	str	r0, [r7, #4]
    2fb6:	000a      	movs	r2, r1
    2fb8:	1cfb      	adds	r3, r7, #3
    2fba:	701a      	strb	r2, [r3, #0]
  return write(c);
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	681b      	ldr	r3, [r3, #0]
    2fc0:	681b      	ldr	r3, [r3, #0]
    2fc2:	1cfa      	adds	r2, r7, #3
    2fc4:	7811      	ldrb	r1, [r2, #0]
    2fc6:	687a      	ldr	r2, [r7, #4]
    2fc8:	0010      	movs	r0, r2
    2fca:	4798      	blx	r3
    2fcc:	0003      	movs	r3, r0
}
    2fce:	0018      	movs	r0, r3
    2fd0:	46bd      	mov	sp, r7
    2fd2:	b002      	add	sp, #8
    2fd4:	bd80      	pop	{r7, pc}

00002fd6 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
    2fd6:	b580      	push	{r7, lr}
    2fd8:	b084      	sub	sp, #16
    2fda:	af00      	add	r7, sp, #0
    2fdc:	60f8      	str	r0, [r7, #12]
    2fde:	607a      	str	r2, [r7, #4]
    2fe0:	230b      	movs	r3, #11
    2fe2:	18fb      	adds	r3, r7, r3
    2fe4:	1c0a      	adds	r2, r1, #0
    2fe6:	701a      	strb	r2, [r3, #0]
  return print((unsigned long) b, base);
    2fe8:	230b      	movs	r3, #11
    2fea:	18fb      	adds	r3, r7, r3
    2fec:	7819      	ldrb	r1, [r3, #0]
    2fee:	687a      	ldr	r2, [r7, #4]
    2ff0:	68fb      	ldr	r3, [r7, #12]
    2ff2:	0018      	movs	r0, r3
    2ff4:	f000 f857 	bl	30a6 <_ZN5Print5printEmi>
    2ff8:	0003      	movs	r3, r0
}
    2ffa:	0018      	movs	r0, r3
    2ffc:	46bd      	mov	sp, r7
    2ffe:	b004      	add	sp, #16
    3000:	bd80      	pop	{r7, pc}

00003002 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    3002:	b580      	push	{r7, lr}
    3004:	b084      	sub	sp, #16
    3006:	af00      	add	r7, sp, #0
    3008:	60f8      	str	r0, [r7, #12]
    300a:	60b9      	str	r1, [r7, #8]
    300c:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    300e:	687a      	ldr	r2, [r7, #4]
    3010:	68b9      	ldr	r1, [r7, #8]
    3012:	68fb      	ldr	r3, [r7, #12]
    3014:	0018      	movs	r0, r3
    3016:	f000 f805 	bl	3024 <_ZN5Print5printEli>
    301a:	0003      	movs	r3, r0
}
    301c:	0018      	movs	r0, r3
    301e:	46bd      	mov	sp, r7
    3020:	b004      	add	sp, #16
    3022:	bd80      	pop	{r7, pc}

00003024 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3024:	b580      	push	{r7, lr}
    3026:	b086      	sub	sp, #24
    3028:	af00      	add	r7, sp, #0
    302a:	60f8      	str	r0, [r7, #12]
    302c:	60b9      	str	r1, [r7, #8]
    302e:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	2b00      	cmp	r3, #0
    3034:	d109      	bne.n	304a <_ZN5Print5printEli+0x26>
    return write(n);
    3036:	68fb      	ldr	r3, [r7, #12]
    3038:	681b      	ldr	r3, [r3, #0]
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	68ba      	ldr	r2, [r7, #8]
    303e:	b2d1      	uxtb	r1, r2
    3040:	68fa      	ldr	r2, [r7, #12]
    3042:	0010      	movs	r0, r2
    3044:	4798      	blx	r3
    3046:	0003      	movs	r3, r0
    3048:	e029      	b.n	309e <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
    304a:	687b      	ldr	r3, [r7, #4]
    304c:	2b0a      	cmp	r3, #10
    304e:	d11e      	bne.n	308e <_ZN5Print5printEli+0x6a>
    if (n < 0) {
    3050:	68bb      	ldr	r3, [r7, #8]
    3052:	2b00      	cmp	r3, #0
    3054:	da13      	bge.n	307e <_ZN5Print5printEli+0x5a>
      int t = print('-');
    3056:	68fb      	ldr	r3, [r7, #12]
    3058:	212d      	movs	r1, #45	; 0x2d
    305a:	0018      	movs	r0, r3
    305c:	f7ff ffa7 	bl	2fae <_ZN5Print5printEc>
    3060:	0003      	movs	r3, r0
    3062:	617b      	str	r3, [r7, #20]
      n = -n;
    3064:	68bb      	ldr	r3, [r7, #8]
    3066:	425b      	negs	r3, r3
    3068:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    306a:	68b9      	ldr	r1, [r7, #8]
    306c:	68fb      	ldr	r3, [r7, #12]
    306e:	220a      	movs	r2, #10
    3070:	0018      	movs	r0, r3
    3072:	f000 f8f0 	bl	3256 <_ZN5Print11printNumberEmh>
    3076:	0002      	movs	r2, r0
    3078:	697b      	ldr	r3, [r7, #20]
    307a:	18d3      	adds	r3, r2, r3
    307c:	e00f      	b.n	309e <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
    307e:	68b9      	ldr	r1, [r7, #8]
    3080:	68fb      	ldr	r3, [r7, #12]
    3082:	220a      	movs	r2, #10
    3084:	0018      	movs	r0, r3
    3086:	f000 f8e6 	bl	3256 <_ZN5Print11printNumberEmh>
    308a:	0003      	movs	r3, r0
    308c:	e007      	b.n	309e <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
    308e:	68b9      	ldr	r1, [r7, #8]
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	b2da      	uxtb	r2, r3
    3094:	68fb      	ldr	r3, [r7, #12]
    3096:	0018      	movs	r0, r3
    3098:	f000 f8dd 	bl	3256 <_ZN5Print11printNumberEmh>
    309c:	0003      	movs	r3, r0
  }
}
    309e:	0018      	movs	r0, r3
    30a0:	46bd      	mov	sp, r7
    30a2:	b006      	add	sp, #24
    30a4:	bd80      	pop	{r7, pc}

000030a6 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    30a6:	b580      	push	{r7, lr}
    30a8:	b084      	sub	sp, #16
    30aa:	af00      	add	r7, sp, #0
    30ac:	60f8      	str	r0, [r7, #12]
    30ae:	60b9      	str	r1, [r7, #8]
    30b0:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	2b00      	cmp	r3, #0
    30b6:	d109      	bne.n	30cc <_ZN5Print5printEmi+0x26>
    30b8:	68fb      	ldr	r3, [r7, #12]
    30ba:	681b      	ldr	r3, [r3, #0]
    30bc:	681b      	ldr	r3, [r3, #0]
    30be:	68ba      	ldr	r2, [r7, #8]
    30c0:	b2d1      	uxtb	r1, r2
    30c2:	68fa      	ldr	r2, [r7, #12]
    30c4:	0010      	movs	r0, r2
    30c6:	4798      	blx	r3
    30c8:	0003      	movs	r3, r0
    30ca:	e007      	b.n	30dc <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    30cc:	687b      	ldr	r3, [r7, #4]
    30ce:	b2da      	uxtb	r2, r3
    30d0:	68b9      	ldr	r1, [r7, #8]
    30d2:	68fb      	ldr	r3, [r7, #12]
    30d4:	0018      	movs	r0, r3
    30d6:	f000 f8be 	bl	3256 <_ZN5Print11printNumberEmh>
    30da:	0003      	movs	r3, r0
}
    30dc:	0018      	movs	r0, r3
    30de:	46bd      	mov	sp, r7
    30e0:	b004      	add	sp, #16
    30e2:	bd80      	pop	{r7, pc}

000030e4 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    30e4:	b580      	push	{r7, lr}
    30e6:	b084      	sub	sp, #16
    30e8:	af00      	add	r7, sp, #0
    30ea:	6078      	str	r0, [r7, #4]
    30ec:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
    30ee:	683a      	ldr	r2, [r7, #0]
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	0011      	movs	r1, r2
    30f4:	0018      	movs	r0, r3
    30f6:	f7ff ff3a 	bl	2f6e <_ZN5Print5printEPK19__FlashStringHelper>
    30fa:	0003      	movs	r3, r0
    30fc:	60fb      	str	r3, [r7, #12]
  n += println();
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	0018      	movs	r0, r3
    3102:	f000 f809 	bl	3118 <_ZN5Print7printlnEv>
    3106:	0002      	movs	r2, r0
    3108:	68fb      	ldr	r3, [r7, #12]
    310a:	189b      	adds	r3, r3, r2
    310c:	60fb      	str	r3, [r7, #12]
  return n;
    310e:	68fb      	ldr	r3, [r7, #12]
}
    3110:	0018      	movs	r0, r3
    3112:	46bd      	mov	sp, r7
    3114:	b004      	add	sp, #16
    3116:	bd80      	pop	{r7, pc}

00003118 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    3118:	b580      	push	{r7, lr}
    311a:	b082      	sub	sp, #8
    311c:	af00      	add	r7, sp, #0
    311e:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    3120:	4a05      	ldr	r2, [pc, #20]	; (3138 <_ZN5Print7printlnEv+0x20>)
    3122:	687b      	ldr	r3, [r7, #4]
    3124:	0011      	movs	r1, r2
    3126:	0018      	movs	r0, r3
    3128:	f7ff feca 	bl	2ec0 <_ZN5Print5writeEPKc>
    312c:	0003      	movs	r3, r0
}
    312e:	0018      	movs	r0, r3
    3130:	46bd      	mov	sp, r7
    3132:	b002      	add	sp, #8
    3134:	bd80      	pop	{r7, pc}
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	0001338c 	.word	0x0001338c

0000313c <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    313c:	b580      	push	{r7, lr}
    313e:	b084      	sub	sp, #16
    3140:	af00      	add	r7, sp, #0
    3142:	6078      	str	r0, [r7, #4]
    3144:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
    3146:	683a      	ldr	r2, [r7, #0]
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	0011      	movs	r1, r2
    314c:	0018      	movs	r0, r3
    314e:	f7ff ff1e 	bl	2f8e <_ZN5Print5printEPKc>
    3152:	0003      	movs	r3, r0
    3154:	60fb      	str	r3, [r7, #12]
  n += println();
    3156:	687b      	ldr	r3, [r7, #4]
    3158:	0018      	movs	r0, r3
    315a:	f7ff ffdd 	bl	3118 <_ZN5Print7printlnEv>
    315e:	0002      	movs	r2, r0
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	189b      	adds	r3, r3, r2
    3164:	60fb      	str	r3, [r7, #12]
  return n;
    3166:	68fb      	ldr	r3, [r7, #12]
}
    3168:	0018      	movs	r0, r3
    316a:	46bd      	mov	sp, r7
    316c:	b004      	add	sp, #16
    316e:	bd80      	pop	{r7, pc}

00003170 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    3170:	b580      	push	{r7, lr}
    3172:	b084      	sub	sp, #16
    3174:	af00      	add	r7, sp, #0
    3176:	6078      	str	r0, [r7, #4]
    3178:	000a      	movs	r2, r1
    317a:	1cfb      	adds	r3, r7, #3
    317c:	701a      	strb	r2, [r3, #0]
  size_t n = print(c);
    317e:	1cfb      	adds	r3, r7, #3
    3180:	781a      	ldrb	r2, [r3, #0]
    3182:	687b      	ldr	r3, [r7, #4]
    3184:	0011      	movs	r1, r2
    3186:	0018      	movs	r0, r3
    3188:	f7ff ff11 	bl	2fae <_ZN5Print5printEc>
    318c:	0003      	movs	r3, r0
    318e:	60fb      	str	r3, [r7, #12]
  n += println();
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	0018      	movs	r0, r3
    3194:	f7ff ffc0 	bl	3118 <_ZN5Print7printlnEv>
    3198:	0002      	movs	r2, r0
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	189b      	adds	r3, r3, r2
    319e:	60fb      	str	r3, [r7, #12]
  return n;
    31a0:	68fb      	ldr	r3, [r7, #12]
}
    31a2:	0018      	movs	r0, r3
    31a4:	46bd      	mov	sp, r7
    31a6:	b004      	add	sp, #16
    31a8:	bd80      	pop	{r7, pc}

000031aa <_ZN5Print7printlnEhi>:

size_t Print::println(unsigned char b, int base)
{
    31aa:	b580      	push	{r7, lr}
    31ac:	b086      	sub	sp, #24
    31ae:	af00      	add	r7, sp, #0
    31b0:	60f8      	str	r0, [r7, #12]
    31b2:	607a      	str	r2, [r7, #4]
    31b4:	230b      	movs	r3, #11
    31b6:	18fb      	adds	r3, r7, r3
    31b8:	1c0a      	adds	r2, r1, #0
    31ba:	701a      	strb	r2, [r3, #0]
  size_t n = print(b, base);
    31bc:	687a      	ldr	r2, [r7, #4]
    31be:	230b      	movs	r3, #11
    31c0:	18fb      	adds	r3, r7, r3
    31c2:	7819      	ldrb	r1, [r3, #0]
    31c4:	68fb      	ldr	r3, [r7, #12]
    31c6:	0018      	movs	r0, r3
    31c8:	f7ff ff05 	bl	2fd6 <_ZN5Print5printEhi>
    31cc:	0003      	movs	r3, r0
    31ce:	617b      	str	r3, [r7, #20]
  n += println();
    31d0:	68fb      	ldr	r3, [r7, #12]
    31d2:	0018      	movs	r0, r3
    31d4:	f7ff ffa0 	bl	3118 <_ZN5Print7printlnEv>
    31d8:	0002      	movs	r2, r0
    31da:	697b      	ldr	r3, [r7, #20]
    31dc:	189b      	adds	r3, r3, r2
    31de:	617b      	str	r3, [r7, #20]
  return n;
    31e0:	697b      	ldr	r3, [r7, #20]
}
    31e2:	0018      	movs	r0, r3
    31e4:	46bd      	mov	sp, r7
    31e6:	b006      	add	sp, #24
    31e8:	bd80      	pop	{r7, pc}

000031ea <_ZN5Print7printlnEii>:

size_t Print::println(int num, int base)
{
    31ea:	b580      	push	{r7, lr}
    31ec:	b086      	sub	sp, #24
    31ee:	af00      	add	r7, sp, #0
    31f0:	60f8      	str	r0, [r7, #12]
    31f2:	60b9      	str	r1, [r7, #8]
    31f4:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
    31f6:	687a      	ldr	r2, [r7, #4]
    31f8:	68b9      	ldr	r1, [r7, #8]
    31fa:	68fb      	ldr	r3, [r7, #12]
    31fc:	0018      	movs	r0, r3
    31fe:	f7ff ff00 	bl	3002 <_ZN5Print5printEii>
    3202:	0003      	movs	r3, r0
    3204:	617b      	str	r3, [r7, #20]
  n += println();
    3206:	68fb      	ldr	r3, [r7, #12]
    3208:	0018      	movs	r0, r3
    320a:	f7ff ff85 	bl	3118 <_ZN5Print7printlnEv>
    320e:	0002      	movs	r2, r0
    3210:	697b      	ldr	r3, [r7, #20]
    3212:	189b      	adds	r3, r3, r2
    3214:	617b      	str	r3, [r7, #20]
  return n;
    3216:	697b      	ldr	r3, [r7, #20]
}
    3218:	0018      	movs	r0, r3
    321a:	46bd      	mov	sp, r7
    321c:	b006      	add	sp, #24
    321e:	bd80      	pop	{r7, pc}

00003220 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3220:	b580      	push	{r7, lr}
    3222:	b086      	sub	sp, #24
    3224:	af00      	add	r7, sp, #0
    3226:	60f8      	str	r0, [r7, #12]
    3228:	60b9      	str	r1, [r7, #8]
    322a:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
    322c:	687a      	ldr	r2, [r7, #4]
    322e:	68b9      	ldr	r1, [r7, #8]
    3230:	68fb      	ldr	r3, [r7, #12]
    3232:	0018      	movs	r0, r3
    3234:	f7ff ff37 	bl	30a6 <_ZN5Print5printEmi>
    3238:	0003      	movs	r3, r0
    323a:	617b      	str	r3, [r7, #20]
  n += println();
    323c:	68fb      	ldr	r3, [r7, #12]
    323e:	0018      	movs	r0, r3
    3240:	f7ff ff6a 	bl	3118 <_ZN5Print7printlnEv>
    3244:	0002      	movs	r2, r0
    3246:	697b      	ldr	r3, [r7, #20]
    3248:	189b      	adds	r3, r3, r2
    324a:	617b      	str	r3, [r7, #20]
  return n;
    324c:	697b      	ldr	r3, [r7, #20]
}
    324e:	0018      	movs	r0, r3
    3250:	46bd      	mov	sp, r7
    3252:	b006      	add	sp, #24
    3254:	bd80      	pop	{r7, pc}

00003256 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    3256:	b580      	push	{r7, lr}
    3258:	b08e      	sub	sp, #56	; 0x38
    325a:	af00      	add	r7, sp, #0
    325c:	60f8      	str	r0, [r7, #12]
    325e:	60b9      	str	r1, [r7, #8]
    3260:	1dfb      	adds	r3, r7, #7
    3262:	701a      	strb	r2, [r3, #0]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    3264:	2310      	movs	r3, #16
    3266:	18fb      	adds	r3, r7, r3
    3268:	3320      	adds	r3, #32
    326a:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    326e:	2200      	movs	r2, #0
    3270:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3272:	1dfb      	adds	r3, r7, #7
    3274:	781b      	ldrb	r3, [r3, #0]
    3276:	2b01      	cmp	r3, #1
    3278:	dc02      	bgt.n	3280 <_ZN5Print11printNumberEmh+0x2a>
    327a:	1dfb      	adds	r3, r7, #7
    327c:	220a      	movs	r2, #10
    327e:	701a      	strb	r2, [r3, #0]

  do {
    char c = n % base;
    3280:	1dfb      	adds	r3, r7, #7
    3282:	781a      	ldrb	r2, [r3, #0]
    3284:	68bb      	ldr	r3, [r7, #8]
    3286:	0011      	movs	r1, r2
    3288:	0018      	movs	r0, r3
    328a:	f00b fb7b 	bl	e984 <__aeabi_uidivmod>
    328e:	000b      	movs	r3, r1
    3290:	001a      	movs	r2, r3
    3292:	2333      	movs	r3, #51	; 0x33
    3294:	18fb      	adds	r3, r7, r3
    3296:	701a      	strb	r2, [r3, #0]
    n /= base;
    3298:	1dfb      	adds	r3, r7, #7
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	0019      	movs	r1, r3
    329e:	68b8      	ldr	r0, [r7, #8]
    32a0:	f00b faea 	bl	e878 <__udivsi3>
    32a4:	0003      	movs	r3, r0
    32a6:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    32a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32aa:	3b01      	subs	r3, #1
    32ac:	637b      	str	r3, [r7, #52]	; 0x34
    32ae:	2333      	movs	r3, #51	; 0x33
    32b0:	18fb      	adds	r3, r7, r3
    32b2:	781b      	ldrb	r3, [r3, #0]
    32b4:	2b09      	cmp	r3, #9
    32b6:	dc05      	bgt.n	32c4 <_ZN5Print11printNumberEmh+0x6e>
    32b8:	2333      	movs	r3, #51	; 0x33
    32ba:	18fb      	adds	r3, r7, r3
    32bc:	781b      	ldrb	r3, [r3, #0]
    32be:	3330      	adds	r3, #48	; 0x30
    32c0:	b2db      	uxtb	r3, r3
    32c2:	e004      	b.n	32ce <_ZN5Print11printNumberEmh+0x78>
    32c4:	2333      	movs	r3, #51	; 0x33
    32c6:	18fb      	adds	r3, r7, r3
    32c8:	781b      	ldrb	r3, [r3, #0]
    32ca:	3337      	adds	r3, #55	; 0x37
    32cc:	b2db      	uxtb	r3, r3
    32ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    32d0:	7013      	strb	r3, [r2, #0]
  } while(n);
    32d2:	68bb      	ldr	r3, [r7, #8]
    32d4:	2b00      	cmp	r3, #0
    32d6:	d004      	beq.n	32e2 <_ZN5Print11printNumberEmh+0x8c>
    32d8:	1dfb      	adds	r3, r7, #7
    32da:	1dfa      	adds	r2, r7, #7
    32dc:	7812      	ldrb	r2, [r2, #0]
    32de:	701a      	strb	r2, [r3, #0]
  do {
    32e0:	e7ce      	b.n	3280 <_ZN5Print11printNumberEmh+0x2a>

  return write(str);
    32e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    32e4:	68fb      	ldr	r3, [r7, #12]
    32e6:	0011      	movs	r1, r2
    32e8:	0018      	movs	r0, r3
    32ea:	f7ff fde9 	bl	2ec0 <_ZN5Print5writeEPKc>
    32ee:	0003      	movs	r3, r0
}
    32f0:	0018      	movs	r0, r3
    32f2:	46bd      	mov	sp, r7
    32f4:	b00e      	add	sp, #56	; 0x38
    32f6:	bd80      	pop	{r7, pc}

000032f8 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    32f8:	b580      	push	{r7, lr}
    32fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    32fc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    3300:	4b03      	ldr	r3, [pc, #12]	; (3310 <NVIC_SystemReset+0x18>)
    3302:	4a04      	ldr	r2, [pc, #16]	; (3314 <NVIC_SystemReset+0x1c>)
    3304:	60da      	str	r2, [r3, #12]
    3306:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    330a:	46c0      	nop			; (mov r8, r8)
    330c:	e7fd      	b.n	330a <NVIC_SystemReset+0x12>
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	e000ed00 	.word	0xe000ed00
    3314:	05fa0004 	.word	0x05fa0004

00003318 <nvmReady>:

#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
    3318:	b580      	push	{r7, lr}
    331a:	af00      	add	r7, sp, #0
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    331c:	4b05      	ldr	r3, [pc, #20]	; (3334 <nvmReady+0x1c>)
    331e:	7d1b      	ldrb	r3, [r3, #20]
    3320:	b2db      	uxtb	r3, r3
    3322:	001a      	movs	r2, r3
    3324:	2301      	movs	r3, #1
    3326:	4013      	ands	r3, r2
    3328:	1e5a      	subs	r2, r3, #1
    332a:	4193      	sbcs	r3, r2
    332c:	b2db      	uxtb	r3, r3
}
    332e:	0018      	movs	r0, r3
    3330:	46bd      	mov	sp, r7
    3332:	bd80      	pop	{r7, pc}
    3334:	41004000 	.word	0x41004000

00003338 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
    3338:	b580      	push	{r7, lr}
    333a:	b082      	sub	sp, #8
    333c:	af00      	add	r7, sp, #0
    333e:	6078      	str	r0, [r7, #4]
	ticks = _ticks;
    3340:	4b03      	ldr	r3, [pc, #12]	; (3350 <initiateReset+0x18>)
    3342:	687a      	ldr	r2, [r7, #4]
    3344:	601a      	str	r2, [r3, #0]
}
    3346:	46c0      	nop			; (mov r8, r8)
    3348:	46bd      	mov	sp, r7
    334a:	b002      	add	sp, #8
    334c:	bd80      	pop	{r7, pc}
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	2000001c 	.word	0x2000001c

00003354 <cancelReset>:

void cancelReset() {
    3354:	b580      	push	{r7, lr}
    3356:	af00      	add	r7, sp, #0
	ticks = -1;
    3358:	4b03      	ldr	r3, [pc, #12]	; (3368 <cancelReset+0x14>)
    335a:	2201      	movs	r2, #1
    335c:	4252      	negs	r2, r2
    335e:	601a      	str	r2, [r3, #0]
}
    3360:	46c0      	nop			; (mov r8, r8)
    3362:	46bd      	mov	sp, r7
    3364:	bd80      	pop	{r7, pc}
    3366:	46c0      	nop			; (mov r8, r8)
    3368:	2000001c 	.word	0x2000001c

0000336c <tickReset>:

void tickReset() {
    336c:	b580      	push	{r7, lr}
    336e:	af00      	add	r7, sp, #0
	if (ticks == -1)
    3370:	4b09      	ldr	r3, [pc, #36]	; (3398 <tickReset+0x2c>)
    3372:	681b      	ldr	r3, [r3, #0]
    3374:	3301      	adds	r3, #1
    3376:	d00b      	beq.n	3390 <tickReset+0x24>
		return;
	ticks--;
    3378:	4b07      	ldr	r3, [pc, #28]	; (3398 <tickReset+0x2c>)
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	1e5a      	subs	r2, r3, #1
    337e:	4b06      	ldr	r3, [pc, #24]	; (3398 <tickReset+0x2c>)
    3380:	601a      	str	r2, [r3, #0]
	if (ticks == 0)
    3382:	4b05      	ldr	r3, [pc, #20]	; (3398 <tickReset+0x2c>)
    3384:	681b      	ldr	r3, [r3, #0]
    3386:	2b00      	cmp	r3, #0
    3388:	d103      	bne.n	3392 <tickReset+0x26>
		banzai();
    338a:	4b04      	ldr	r3, [pc, #16]	; (339c <tickReset+0x30>)
    338c:	4798      	blx	r3
    338e:	e000      	b.n	3392 <tickReset+0x26>
		return;
    3390:	46c0      	nop			; (mov r8, r8)
}
    3392:	46bd      	mov	sp, r7
    3394:	bd80      	pop	{r7, pc}
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	2000001c 	.word	0x2000001c
    339c:	00014429 	.word	0x00014429

000033a0 <SystemInit>:
#define GENERIC_CLOCK_GENERATOR_OSC8M     (3u)
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
    33a0:	b580      	push	{r7, lr}
    33a2:	b082      	sub	sp, #8
    33a4:	af00      	add	r7, sp, #0
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    33a6:	4a75      	ldr	r2, [pc, #468]	; (357c <SystemInit+0x1dc>)
    33a8:	6853      	ldr	r3, [r2, #4]
    33aa:	211e      	movs	r1, #30
    33ac:	438b      	bics	r3, r1
    33ae:	2102      	movs	r1, #2
    33b0:	430b      	orrs	r3, r1
    33b2:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    33b4:	4b72      	ldr	r3, [pc, #456]	; (3580 <SystemInit+0x1e0>)
    33b6:	4a72      	ldr	r2, [pc, #456]	; (3580 <SystemInit+0x1e0>)
    33b8:	6992      	ldr	r2, [r2, #24]
    33ba:	2108      	movs	r1, #8
    33bc:	430a      	orrs	r2, r1
    33be:	619a      	str	r2, [r3, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    33c0:	4b70      	ldr	r3, [pc, #448]	; (3584 <SystemInit+0x1e4>)
    33c2:	4a71      	ldr	r2, [pc, #452]	; (3588 <SystemInit+0x1e8>)
    33c4:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    33c6:	4a6f      	ldr	r2, [pc, #444]	; (3584 <SystemInit+0x1e4>)
    33c8:	8a93      	ldrh	r3, [r2, #20]
    33ca:	2102      	movs	r1, #2
    33cc:	430b      	orrs	r3, r1
    33ce:	8293      	strh	r3, [r2, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    33d0:	46c0      	nop			; (mov r8, r8)
    33d2:	4b6c      	ldr	r3, [pc, #432]	; (3584 <SystemInit+0x1e4>)
    33d4:	68db      	ldr	r3, [r3, #12]
    33d6:	2202      	movs	r2, #2
    33d8:	4013      	ands	r3, r2
    33da:	d0fa      	beq.n	33d2 <SystemInit+0x32>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    33dc:	4b6b      	ldr	r3, [pc, #428]	; (358c <SystemInit+0x1ec>)
    33de:	2201      	movs	r2, #1
    33e0:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	4b69      	ldr	r3, [pc, #420]	; (358c <SystemInit+0x1ec>)
    33e6:	781b      	ldrb	r3, [r3, #0]
    33e8:	b2db      	uxtb	r3, r3
    33ea:	001a      	movs	r2, r3
    33ec:	2301      	movs	r3, #1
    33ee:	4013      	ands	r3, r2
    33f0:	d005      	beq.n	33fe <SystemInit+0x5e>
    33f2:	4b66      	ldr	r3, [pc, #408]	; (358c <SystemInit+0x1ec>)
    33f4:	785b      	ldrb	r3, [r3, #1]
    33f6:	b2db      	uxtb	r3, r3
    33f8:	b25b      	sxtb	r3, r3
    33fa:	2b00      	cmp	r3, #0
    33fc:	dbf2      	blt.n	33e4 <SystemInit+0x44>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    33fe:	4b63      	ldr	r3, [pc, #396]	; (358c <SystemInit+0x1ec>)
    3400:	2201      	movs	r2, #1
    3402:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3404:	46c0      	nop			; (mov r8, r8)
    3406:	4b61      	ldr	r3, [pc, #388]	; (358c <SystemInit+0x1ec>)
    3408:	785b      	ldrb	r3, [r3, #1]
    340a:	b2db      	uxtb	r3, r3
    340c:	b25b      	sxtb	r3, r3
    340e:	2b00      	cmp	r3, #0
    3410:	dbf9      	blt.n	3406 <SystemInit+0x66>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    3412:	4b5e      	ldr	r3, [pc, #376]	; (358c <SystemInit+0x1ec>)
    3414:	4a5e      	ldr	r2, [pc, #376]	; (3590 <SystemInit+0x1f0>)
    3416:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3418:	46c0      	nop			; (mov r8, r8)
    341a:	4b5c      	ldr	r3, [pc, #368]	; (358c <SystemInit+0x1ec>)
    341c:	785b      	ldrb	r3, [r3, #1]
    341e:	b2db      	uxtb	r3, r3
    3420:	b25b      	sxtb	r3, r3
    3422:	2b00      	cmp	r3, #0
    3424:	dbf9      	blt.n	341a <SystemInit+0x7a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    3426:	4b59      	ldr	r3, [pc, #356]	; (358c <SystemInit+0x1ec>)
    3428:	2282      	movs	r2, #130	; 0x82
    342a:	01d2      	lsls	r2, r2, #7
    342c:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    342e:	46c0      	nop			; (mov r8, r8)
    3430:	4b56      	ldr	r3, [pc, #344]	; (358c <SystemInit+0x1ec>)
    3432:	785b      	ldrb	r3, [r3, #1]
    3434:	b2db      	uxtb	r3, r3
    3436:	b25b      	sxtb	r3, r3
    3438:	2b00      	cmp	r3, #0
    343a:	dbf9      	blt.n	3430 <SystemInit+0x90>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    343c:	4b51      	ldr	r3, [pc, #324]	; (3584 <SystemInit+0x1e4>)
    343e:	2202      	movs	r2, #2
    3440:	849a      	strh	r2, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    3442:	46c0      	nop			; (mov r8, r8)
    3444:	4b4f      	ldr	r3, [pc, #316]	; (3584 <SystemInit+0x1e4>)
    3446:	68db      	ldr	r3, [r3, #12]
    3448:	2210      	movs	r2, #16
    344a:	4013      	ands	r3, r2
    344c:	d0fa      	beq.n	3444 <SystemInit+0xa4>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    344e:	4b4d      	ldr	r3, [pc, #308]	; (3584 <SystemInit+0x1e4>)
    3450:	4a50      	ldr	r2, [pc, #320]	; (3594 <SystemInit+0x1f4>)
    3452:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    3454:	46c0      	nop			; (mov r8, r8)
    3456:	4b4b      	ldr	r3, [pc, #300]	; (3584 <SystemInit+0x1e4>)
    3458:	68db      	ldr	r3, [r3, #12]
    345a:	2210      	movs	r2, #16
    345c:	4013      	ands	r3, r2
    345e:	d0fa      	beq.n	3456 <SystemInit+0xb6>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    3460:	4a48      	ldr	r2, [pc, #288]	; (3584 <SystemInit+0x1e4>)
    3462:	4b48      	ldr	r3, [pc, #288]	; (3584 <SystemInit+0x1e4>)
    3464:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3466:	b29b      	uxth	r3, r3
    3468:	494b      	ldr	r1, [pc, #300]	; (3598 <SystemInit+0x1f8>)
    346a:	430b      	orrs	r3, r1
    346c:	b29b      	uxth	r3, r3
    346e:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    3470:	46c0      	nop			; (mov r8, r8)
    3472:	4b44      	ldr	r3, [pc, #272]	; (3584 <SystemInit+0x1e4>)
    3474:	68db      	ldr	r3, [r3, #12]
    3476:	2210      	movs	r2, #16
    3478:	4013      	ands	r3, r2
    347a:	d0fa      	beq.n	3472 <SystemInit+0xd2>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    347c:	4a41      	ldr	r2, [pc, #260]	; (3584 <SystemInit+0x1e4>)
    347e:	4b41      	ldr	r3, [pc, #260]	; (3584 <SystemInit+0x1e4>)
    3480:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3482:	b29b      	uxth	r3, r3
    3484:	2102      	movs	r1, #2
    3486:	430b      	orrs	r3, r1
    3488:	b29b      	uxth	r3, r3
    348a:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    348c:	46c0      	nop			; (mov r8, r8)
    348e:	4b3d      	ldr	r3, [pc, #244]	; (3584 <SystemInit+0x1e4>)
    3490:	68db      	ldr	r3, [r3, #12]
    3492:	2280      	movs	r2, #128	; 0x80
    3494:	4013      	ands	r3, r2
    3496:	d0fa      	beq.n	348e <SystemInit+0xee>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    3498:	4b3a      	ldr	r3, [pc, #232]	; (3584 <SystemInit+0x1e4>)
    349a:	68db      	ldr	r3, [r3, #12]
    349c:	2240      	movs	r2, #64	; 0x40
    349e:	4013      	ands	r3, r2
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    34a0:	d0f5      	beq.n	348e <SystemInit+0xee>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    34a2:	46c0      	nop			; (mov r8, r8)
    34a4:	4b37      	ldr	r3, [pc, #220]	; (3584 <SystemInit+0x1e4>)
    34a6:	68db      	ldr	r3, [r3, #12]
    34a8:	2210      	movs	r2, #16
    34aa:	4013      	ands	r3, r2
    34ac:	d0fa      	beq.n	34a4 <SystemInit+0x104>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    34ae:	4b37      	ldr	r3, [pc, #220]	; (358c <SystemInit+0x1ec>)
    34b0:	2200      	movs	r2, #0
    34b2:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    34b4:	46c0      	nop			; (mov r8, r8)
    34b6:	4b35      	ldr	r3, [pc, #212]	; (358c <SystemInit+0x1ec>)
    34b8:	785b      	ldrb	r3, [r3, #1]
    34ba:	b2db      	uxtb	r3, r3
    34bc:	b25b      	sxtb	r3, r3
    34be:	2b00      	cmp	r3, #0
    34c0:	dbf9      	blt.n	34b6 <SystemInit+0x116>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    34c2:	4b32      	ldr	r3, [pc, #200]	; (358c <SystemInit+0x1ec>)
    34c4:	4a35      	ldr	r2, [pc, #212]	; (359c <SystemInit+0x1fc>)
    34c6:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    34c8:	46c0      	nop			; (mov r8, r8)
    34ca:	4b30      	ldr	r3, [pc, #192]	; (358c <SystemInit+0x1ec>)
    34cc:	785b      	ldrb	r3, [r3, #1]
    34ce:	b2db      	uxtb	r3, r3
    34d0:	b25b      	sxtb	r3, r3
    34d2:	2b00      	cmp	r3, #0
    34d4:	dbf9      	blt.n	34ca <SystemInit+0x12a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    34d6:	4a2b      	ldr	r2, [pc, #172]	; (3584 <SystemInit+0x1e4>)
    34d8:	6a13      	ldr	r3, [r2, #32]
    34da:	4931      	ldr	r1, [pc, #196]	; (35a0 <SystemInit+0x200>)
    34dc:	400b      	ands	r3, r1
    34de:	6213      	str	r3, [r2, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    34e0:	4a28      	ldr	r2, [pc, #160]	; (3584 <SystemInit+0x1e4>)
    34e2:	6a13      	ldr	r3, [r2, #32]
    34e4:	2180      	movs	r1, #128	; 0x80
    34e6:	438b      	bics	r3, r1
    34e8:	6213      	str	r3, [r2, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    34ea:	4b28      	ldr	r3, [pc, #160]	; (358c <SystemInit+0x1ec>)
    34ec:	2203      	movs	r2, #3
    34ee:	609a      	str	r2, [r3, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    34f0:	4b26      	ldr	r3, [pc, #152]	; (358c <SystemInit+0x1ec>)
    34f2:	4a2c      	ldr	r2, [pc, #176]	; (35a4 <SystemInit+0x204>)
    34f4:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	4b24      	ldr	r3, [pc, #144]	; (358c <SystemInit+0x1ec>)
    34fa:	785b      	ldrb	r3, [r3, #1]
    34fc:	b2db      	uxtb	r3, r3
    34fe:	b25b      	sxtb	r3, r3
    3500:	2b00      	cmp	r3, #0
    3502:	dbf9      	blt.n	34f8 <SystemInit+0x158>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    3504:	4b1e      	ldr	r3, [pc, #120]	; (3580 <SystemInit+0x1e0>)
    3506:	2200      	movs	r2, #0
    3508:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    350a:	4b1d      	ldr	r3, [pc, #116]	; (3580 <SystemInit+0x1e0>)
    350c:	2200      	movs	r2, #0
    350e:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    3510:	4b1b      	ldr	r3, [pc, #108]	; (3580 <SystemInit+0x1e0>)
    3512:	2200      	movs	r2, #0
    3514:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    3516:	4b1a      	ldr	r3, [pc, #104]	; (3580 <SystemInit+0x1e0>)
    3518:	2200      	movs	r2, #0
    351a:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=VARIANT_MCK ;
    351c:	4b22      	ldr	r3, [pc, #136]	; (35a8 <SystemInit+0x208>)
    351e:	4a23      	ldr	r2, [pc, #140]	; (35ac <SystemInit+0x20c>)
    3520:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    3522:	4b23      	ldr	r3, [pc, #140]	; (35b0 <SystemInit+0x210>)
    3524:	681b      	ldr	r3, [r3, #0]
    3526:	08db      	lsrs	r3, r3, #3
    3528:	2207      	movs	r2, #7
    352a:	4013      	ands	r3, r2
    352c:	607b      	str	r3, [r7, #4]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    352e:	4b21      	ldr	r3, [pc, #132]	; (35b4 <SystemInit+0x214>)
    3530:	681b      	ldr	r3, [r3, #0]
    3532:	0edb      	lsrs	r3, r3, #27
    3534:	603b      	str	r3, [r7, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    3536:	4b1e      	ldr	r3, [pc, #120]	; (35b0 <SystemInit+0x210>)
    3538:	681b      	ldr	r3, [r3, #0]
    353a:	015b      	lsls	r3, r3, #5
    353c:	22ff      	movs	r2, #255	; 0xff
    353e:	4013      	ands	r3, r2
    3540:	683a      	ldr	r2, [r7, #0]
    3542:	4313      	orrs	r3, r2
    3544:	603b      	str	r3, [r7, #0]

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    3546:	491c      	ldr	r1, [pc, #112]	; (35b8 <SystemInit+0x218>)
    3548:	687b      	ldr	r3, [r7, #4]
    354a:	b29b      	uxth	r3, r3
    354c:	021b      	lsls	r3, r3, #8
    354e:	b29a      	uxth	r2, r3
    3550:	23e0      	movs	r3, #224	; 0xe0
    3552:	00db      	lsls	r3, r3, #3
    3554:	4013      	ands	r3, r2
    3556:	b29a      	uxth	r2, r3
    3558:	683b      	ldr	r3, [r7, #0]
    355a:	b29b      	uxth	r3, r3
    355c:	20ff      	movs	r0, #255	; 0xff
    355e:	4003      	ands	r3, r0
    3560:	b29b      	uxth	r3, r3
    3562:	4313      	orrs	r3, r2
    3564:	b29b      	uxth	r3, r3
    3566:	850b      	strh	r3, [r1, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    3568:	4a04      	ldr	r2, [pc, #16]	; (357c <SystemInit+0x1dc>)
    356a:	6853      	ldr	r3, [r2, #4]
    356c:	2180      	movs	r1, #128	; 0x80
    356e:	430b      	orrs	r3, r1
    3570:	6053      	str	r3, [r2, #4]
}
    3572:	46c0      	nop			; (mov r8, r8)
    3574:	46bd      	mov	sp, r7
    3576:	b002      	add	sp, #8
    3578:	bd80      	pop	{r7, pc}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	41004000 	.word	0x41004000
    3580:	40000400 	.word	0x40000400
    3584:	40000800 	.word	0x40000800
    3588:	0000060c 	.word	0x0000060c
    358c:	40000c00 	.word	0x40000c00
    3590:	00010501 	.word	0x00010501
    3594:	7dff05b9 	.word	0x7dff05b9
    3598:	00000a04 	.word	0x00000a04
    359c:	00030700 	.word	0x00030700
    35a0:	fffffcff 	.word	0xfffffcff
    35a4:	00010603 	.word	0x00010603
    35a8:	20000048 	.word	0x20000048
    35ac:	02dc6c00 	.word	0x02dc6c00
    35b0:	00806024 	.word	0x00806024
    35b4:	00806020 	.word	0x00806020
    35b8:	42004000 	.word	0x42004000

000035bc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
    35bc:	b580      	push	{r7, lr}
    35be:	b082      	sub	sp, #8
    35c0:	af00      	add	r7, sp, #0
    35c2:	6078      	str	r0, [r7, #4]
    35c4:	4a05      	ldr	r2, [pc, #20]	; (35dc <_ZN5PrintC1Ev+0x20>)
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	601a      	str	r2, [r3, #0]
    35ca:	687b      	ldr	r3, [r7, #4]
    35cc:	2200      	movs	r2, #0
    35ce:	605a      	str	r2, [r3, #4]
    35d0:	687b      	ldr	r3, [r7, #4]
    35d2:	0018      	movs	r0, r3
    35d4:	46bd      	mov	sp, r7
    35d6:	b002      	add	sp, #8
    35d8:	bd80      	pop	{r7, pc}
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	000133a4 	.word	0x000133a4

000035e0 <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    35e0:	b580      	push	{r7, lr}
    35e2:	b082      	sub	sp, #8
    35e4:	af00      	add	r7, sp, #0
    35e6:	6078      	str	r0, [r7, #4]
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	0018      	movs	r0, r3
    35ec:	f7ff ffe6 	bl	35bc <_ZN5PrintC1Ev>
    35f0:	4a05      	ldr	r2, [pc, #20]	; (3608 <_ZN6StreamC1Ev+0x28>)
    35f2:	687b      	ldr	r3, [r7, #4]
    35f4:	601a      	str	r2, [r3, #0]
    35f6:	687b      	ldr	r3, [r7, #4]
    35f8:	22fa      	movs	r2, #250	; 0xfa
    35fa:	0092      	lsls	r2, r2, #2
    35fc:	609a      	str	r2, [r3, #8]
    35fe:	687b      	ldr	r3, [r7, #4]
    3600:	0018      	movs	r0, r3
    3602:	46bd      	mov	sp, r7
    3604:	b002      	add	sp, #8
    3606:	bd80      	pop	{r7, pc}
    3608:	00013434 	.word	0x00013434

0000360c <_ZN14HardwareSerialC1Ev>:

class HardwareSerial : public Stream
{
	public:
	
	HardwareSerial() {};
    360c:	b580      	push	{r7, lr}
    360e:	b082      	sub	sp, #8
    3610:	af00      	add	r7, sp, #0
    3612:	6078      	str	r0, [r7, #4]
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	0018      	movs	r0, r3
    3618:	f7ff ffe2 	bl	35e0 <_ZN6StreamC1Ev>
    361c:	4a03      	ldr	r2, [pc, #12]	; (362c <_ZN14HardwareSerialC1Ev+0x20>)
    361e:	687b      	ldr	r3, [r7, #4]
    3620:	601a      	str	r2, [r3, #0]
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	0018      	movs	r0, r3
    3626:	46bd      	mov	sp, r7
    3628:	b002      	add	sp, #8
    362a:	bd80      	pop	{r7, pc}
    362c:	000133f8 	.word	0x000133f8

00003630 <_ZN14HardwareSerialD1Ev>:
	virtual ~HardwareSerial() {};
    3630:	b580      	push	{r7, lr}
    3632:	b082      	sub	sp, #8
    3634:	af00      	add	r7, sp, #0
    3636:	6078      	str	r0, [r7, #4]
    3638:	4a03      	ldr	r2, [pc, #12]	; (3648 <_ZN14HardwareSerialD1Ev+0x18>)
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	601a      	str	r2, [r3, #0]
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	0018      	movs	r0, r3
    3642:	46bd      	mov	sp, r7
    3644:	b002      	add	sp, #8
    3646:	bd80      	pop	{r7, pc}
    3648:	000133f8 	.word	0x000133f8

0000364c <_ZN14HardwareSerialD0Ev>:
    364c:	b580      	push	{r7, lr}
    364e:	b082      	sub	sp, #8
    3650:	af00      	add	r7, sp, #0
    3652:	6078      	str	r0, [r7, #4]
    3654:	687b      	ldr	r3, [r7, #4]
    3656:	0018      	movs	r0, r3
    3658:	f7ff ffea 	bl	3630 <_ZN14HardwareSerialD1Ev>
    365c:	687b      	ldr	r3, [r7, #4]
    365e:	0018      	movs	r0, r3
    3660:	f00a f83b 	bl	d6da <_ZdlPv>
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	0018      	movs	r0, r3
    3668:	46bd      	mov	sp, r7
    366a:	b002      	add	sp, #8
    366c:	bd80      	pop	{r7, pc}

0000366e <_ZN14HardwareSerial5beginEm>:
	
	virtual void begin(unsigned long) {};
    366e:	b580      	push	{r7, lr}
    3670:	b082      	sub	sp, #8
    3672:	af00      	add	r7, sp, #0
    3674:	6078      	str	r0, [r7, #4]
    3676:	6039      	str	r1, [r7, #0]
    3678:	46c0      	nop			; (mov r8, r8)
    367a:	46bd      	mov	sp, r7
    367c:	b002      	add	sp, #8
    367e:	bd80      	pop	{r7, pc}

00003680 <_ZN14HardwareSerial5beginEmt>:
	virtual void begin(unsigned long baudrate, uint16_t config) {};
    3680:	b580      	push	{r7, lr}
    3682:	b084      	sub	sp, #16
    3684:	af00      	add	r7, sp, #0
    3686:	60f8      	str	r0, [r7, #12]
    3688:	60b9      	str	r1, [r7, #8]
    368a:	1dbb      	adds	r3, r7, #6
    368c:	801a      	strh	r2, [r3, #0]
    368e:	46c0      	nop			; (mov r8, r8)
    3690:	46bd      	mov	sp, r7
    3692:	b004      	add	sp, #16
    3694:	bd80      	pop	{r7, pc}

00003696 <_ZN14HardwareSerial3endEv>:
	virtual void end() {};
    3696:	b580      	push	{r7, lr}
    3698:	b082      	sub	sp, #8
    369a:	af00      	add	r7, sp, #0
    369c:	6078      	str	r0, [r7, #4]
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	46bd      	mov	sp, r7
    36a2:	b002      	add	sp, #8
    36a4:	bd80      	pop	{r7, pc}
	...

000036a8 <__NVIC_GetPriority>:
{
    36a8:	b580      	push	{r7, lr}
    36aa:	b082      	sub	sp, #8
    36ac:	af00      	add	r7, sp, #0
    36ae:	0002      	movs	r2, r0
    36b0:	1dfb      	adds	r3, r7, #7
    36b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    36b4:	1dfb      	adds	r3, r7, #7
    36b6:	781b      	ldrb	r3, [r3, #0]
    36b8:	2b7f      	cmp	r3, #127	; 0x7f
    36ba:	d813      	bhi.n	36e4 <__NVIC_GetPriority+0x3c>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    36bc:	4a17      	ldr	r2, [pc, #92]	; (371c <__NVIC_GetPriority+0x74>)
    36be:	1dfb      	adds	r3, r7, #7
    36c0:	781b      	ldrb	r3, [r3, #0]
    36c2:	b25b      	sxtb	r3, r3
    36c4:	089b      	lsrs	r3, r3, #2
    36c6:	33c0      	adds	r3, #192	; 0xc0
    36c8:	009b      	lsls	r3, r3, #2
    36ca:	589a      	ldr	r2, [r3, r2]
    36cc:	1dfb      	adds	r3, r7, #7
    36ce:	781b      	ldrb	r3, [r3, #0]
    36d0:	b25b      	sxtb	r3, r3
    36d2:	2103      	movs	r1, #3
    36d4:	400b      	ands	r3, r1
    36d6:	00db      	lsls	r3, r3, #3
    36d8:	40da      	lsrs	r2, r3
    36da:	0013      	movs	r3, r2
    36dc:	099b      	lsrs	r3, r3, #6
    36de:	2203      	movs	r2, #3
    36e0:	4013      	ands	r3, r2
    36e2:	e017      	b.n	3714 <__NVIC_GetPriority+0x6c>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    36e4:	4a0e      	ldr	r2, [pc, #56]	; (3720 <__NVIC_GetPriority+0x78>)
    36e6:	1dfb      	adds	r3, r7, #7
    36e8:	781b      	ldrb	r3, [r3, #0]
    36ea:	b25b      	sxtb	r3, r3
    36ec:	210f      	movs	r1, #15
    36ee:	400b      	ands	r3, r1
    36f0:	3b08      	subs	r3, #8
    36f2:	089b      	lsrs	r3, r3, #2
    36f4:	3306      	adds	r3, #6
    36f6:	009b      	lsls	r3, r3, #2
    36f8:	18d3      	adds	r3, r2, r3
    36fa:	3304      	adds	r3, #4
    36fc:	681a      	ldr	r2, [r3, #0]
    36fe:	1dfb      	adds	r3, r7, #7
    3700:	781b      	ldrb	r3, [r3, #0]
    3702:	b25b      	sxtb	r3, r3
    3704:	2103      	movs	r1, #3
    3706:	400b      	ands	r3, r1
    3708:	00db      	lsls	r3, r3, #3
    370a:	40da      	lsrs	r2, r3
    370c:	0013      	movs	r3, r2
    370e:	099b      	lsrs	r3, r3, #6
    3710:	2203      	movs	r2, #3
    3712:	4013      	ands	r3, r2
}
    3714:	0018      	movs	r0, r3
    3716:	46bd      	mov	sp, r7
    3718:	b002      	add	sp, #8
    371a:	bd80      	pop	{r7, pc}
    371c:	e000e100 	.word	0xe000e100
    3720:	e000ed00 	.word	0xe000ed00

00003724 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    3724:	b580      	push	{r7, lr}
    3726:	b082      	sub	sp, #8
    3728:	af00      	add	r7, sp, #0
    372a:	6078      	str	r0, [r7, #4]
    372c:	2301      	movs	r3, #1
    372e:	0018      	movs	r0, r3
    3730:	46bd      	mov	sp, r7
    3732:	b002      	add	sp, #8
    3734:	bd80      	pop	{r7, pc}

00003736 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:

#define NO_RTS_PIN 255
#define NO_CTS_PIN 255
#define RTS_RX_THRESHOLD 10

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    3736:	b590      	push	{r4, r7, lr}
    3738:	b089      	sub	sp, #36	; 0x24
    373a:	af04      	add	r7, sp, #16
    373c:	60f8      	str	r0, [r7, #12]
    373e:	60b9      	str	r1, [r7, #8]
    3740:	0019      	movs	r1, r3
    3742:	1dfb      	adds	r3, r7, #7
    3744:	701a      	strb	r2, [r3, #0]
    3746:	1dbb      	adds	r3, r7, #6
    3748:	1c0a      	adds	r2, r1, #0
    374a:	701a      	strb	r2, [r3, #0]
  Uart(_s, _pinRX, _pinTX, _padRX, _padTX, NO_RTS_PIN, NO_CTS_PIN)
    374c:	1dbb      	adds	r3, r7, #6
    374e:	781c      	ldrb	r4, [r3, #0]
    3750:	1dfb      	adds	r3, r7, #7
    3752:	781a      	ldrb	r2, [r3, #0]
    3754:	68b9      	ldr	r1, [r7, #8]
    3756:	68f8      	ldr	r0, [r7, #12]
    3758:	23ff      	movs	r3, #255	; 0xff
    375a:	9303      	str	r3, [sp, #12]
    375c:	23ff      	movs	r3, #255	; 0xff
    375e:	9302      	str	r3, [sp, #8]
    3760:	2324      	movs	r3, #36	; 0x24
    3762:	18fb      	adds	r3, r7, r3
    3764:	781b      	ldrb	r3, [r3, #0]
    3766:	9301      	str	r3, [sp, #4]
    3768:	2320      	movs	r3, #32
    376a:	18fb      	adds	r3, r7, r3
    376c:	781b      	ldrb	r3, [r3, #0]
    376e:	9300      	str	r3, [sp, #0]
    3770:	0023      	movs	r3, r4
    3772:	f000 f805 	bl	3780 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>
{
}
    3776:	68fb      	ldr	r3, [r7, #12]
    3778:	0018      	movs	r0, r3
    377a:	46bd      	mov	sp, r7
    377c:	b005      	add	sp, #20
    377e:	bd90      	pop	{r4, r7, pc}

00003780 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>:

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    3780:	b580      	push	{r7, lr}
    3782:	b084      	sub	sp, #16
    3784:	af00      	add	r7, sp, #0
    3786:	60f8      	str	r0, [r7, #12]
    3788:	60b9      	str	r1, [r7, #8]
    378a:	0019      	movs	r1, r3
    378c:	1dfb      	adds	r3, r7, #7
    378e:	701a      	strb	r2, [r3, #0]
    3790:	1dbb      	adds	r3, r7, #6
    3792:	1c0a      	adds	r2, r1, #0
    3794:	701a      	strb	r2, [r3, #0]
    3796:	68fb      	ldr	r3, [r7, #12]
    3798:	0018      	movs	r0, r3
    379a:	f7ff ff37 	bl	360c <_ZN14HardwareSerialC1Ev>
    379e:	4a1b      	ldr	r2, [pc, #108]	; (380c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x8c>)
    37a0:	68fb      	ldr	r3, [r7, #12]
    37a2:	601a      	str	r2, [r3, #0]
    37a4:	68fb      	ldr	r3, [r7, #12]
    37a6:	3314      	adds	r3, #20
    37a8:	0018      	movs	r0, r3
    37aa:	f000 fad6 	bl	3d5a <_ZN11RingBufferNILi64EEC1Ev>
    37ae:	68fb      	ldr	r3, [r7, #12]
    37b0:	335c      	adds	r3, #92	; 0x5c
    37b2:	0018      	movs	r0, r3
    37b4:	f000 fad1 	bl	3d5a <_ZN11RingBufferNILi64EEC1Ev>
{
  sercom = _s;
    37b8:	68fb      	ldr	r3, [r7, #12]
    37ba:	68ba      	ldr	r2, [r7, #8]
    37bc:	611a      	str	r2, [r3, #16]
  uc_pinRX = _pinRX;
    37be:	68fb      	ldr	r3, [r7, #12]
    37c0:	1dfa      	adds	r2, r7, #7
    37c2:	21a4      	movs	r1, #164	; 0xa4
    37c4:	7812      	ldrb	r2, [r2, #0]
    37c6:	545a      	strb	r2, [r3, r1]
  uc_pinTX = _pinTX;
    37c8:	68fb      	ldr	r3, [r7, #12]
    37ca:	1dba      	adds	r2, r7, #6
    37cc:	21a5      	movs	r1, #165	; 0xa5
    37ce:	7812      	ldrb	r2, [r2, #0]
    37d0:	545a      	strb	r2, [r3, r1]
  uc_padRX = _padRX ;
    37d2:	68fb      	ldr	r3, [r7, #12]
    37d4:	2218      	movs	r2, #24
    37d6:	18ba      	adds	r2, r7, r2
    37d8:	21a6      	movs	r1, #166	; 0xa6
    37da:	7812      	ldrb	r2, [r2, #0]
    37dc:	545a      	strb	r2, [r3, r1]
  uc_padTX = _padTX;
    37de:	68fb      	ldr	r3, [r7, #12]
    37e0:	221c      	movs	r2, #28
    37e2:	18ba      	adds	r2, r7, r2
    37e4:	21a7      	movs	r1, #167	; 0xa7
    37e6:	7812      	ldrb	r2, [r2, #0]
    37e8:	545a      	strb	r2, [r3, r1]
  uc_pinRTS = _pinRTS;
    37ea:	68fb      	ldr	r3, [r7, #12]
    37ec:	2220      	movs	r2, #32
    37ee:	18ba      	adds	r2, r7, r2
    37f0:	21a8      	movs	r1, #168	; 0xa8
    37f2:	7812      	ldrb	r2, [r2, #0]
    37f4:	545a      	strb	r2, [r3, r1]
  uc_pinCTS = _pinCTS;
    37f6:	68fb      	ldr	r3, [r7, #12]
    37f8:	2224      	movs	r2, #36	; 0x24
    37fa:	18ba      	adds	r2, r7, r2
    37fc:	21b8      	movs	r1, #184	; 0xb8
    37fe:	7812      	ldrb	r2, [r2, #0]
    3800:	545a      	strb	r2, [r3, r1]
}
    3802:	68fb      	ldr	r3, [r7, #12]
    3804:	0018      	movs	r0, r3
    3806:	46bd      	mov	sp, r7
    3808:	b004      	add	sp, #16
    380a:	bd80      	pop	{r7, pc}
    380c:	000133bc 	.word	0x000133bc

00003810 <_ZN4Uart5beginEm>:

void Uart::begin(unsigned long baudrate)
{
    3810:	b580      	push	{r7, lr}
    3812:	b082      	sub	sp, #8
    3814:	af00      	add	r7, sp, #0
    3816:	6078      	str	r0, [r7, #4]
    3818:	6039      	str	r1, [r7, #0]
  begin(baudrate, SERIAL_8N1);
    381a:	687b      	ldr	r3, [r7, #4]
    381c:	681b      	ldr	r3, [r3, #0]
    381e:	3328      	adds	r3, #40	; 0x28
    3820:	681b      	ldr	r3, [r3, #0]
    3822:	4a04      	ldr	r2, [pc, #16]	; (3834 <_ZN4Uart5beginEm+0x24>)
    3824:	6839      	ldr	r1, [r7, #0]
    3826:	6878      	ldr	r0, [r7, #4]
    3828:	4798      	blx	r3
}
    382a:	46c0      	nop			; (mov r8, r8)
    382c:	46bd      	mov	sp, r7
    382e:	b002      	add	sp, #8
    3830:	bd80      	pop	{r7, pc}
    3832:	46c0      	nop			; (mov r8, r8)
    3834:	00000413 	.word	0x00000413

00003838 <_ZN4Uart5beginEmt>:

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    3838:	b5f0      	push	{r4, r5, r6, r7, lr}
    383a:	b089      	sub	sp, #36	; 0x24
    383c:	af02      	add	r7, sp, #8
    383e:	60f8      	str	r0, [r7, #12]
    3840:	60b9      	str	r1, [r7, #8]
    3842:	1dbb      	adds	r3, r7, #6
    3844:	801a      	strh	r2, [r3, #0]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3846:	68fb      	ldr	r3, [r7, #12]
    3848:	22a4      	movs	r2, #164	; 0xa4
    384a:	5c9b      	ldrb	r3, [r3, r2]
    384c:	0018      	movs	r0, r3
    384e:	68fb      	ldr	r3, [r7, #12]
    3850:	22a4      	movs	r2, #164	; 0xa4
    3852:	5c9b      	ldrb	r3, [r3, r2]
    3854:	0019      	movs	r1, r3
    3856:	4a61      	ldr	r2, [pc, #388]	; (39dc <_ZN4Uart5beginEmt+0x1a4>)
    3858:	000b      	movs	r3, r1
    385a:	005b      	lsls	r3, r3, #1
    385c:	185b      	adds	r3, r3, r1
    385e:	00db      	lsls	r3, r3, #3
    3860:	18d3      	adds	r3, r2, r3
    3862:	3308      	adds	r3, #8
    3864:	781b      	ldrb	r3, [r3, #0]
    3866:	b25b      	sxtb	r3, r3
    3868:	0019      	movs	r1, r3
    386a:	f003 f987 	bl	6b7c <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    386e:	68fb      	ldr	r3, [r7, #12]
    3870:	22a5      	movs	r2, #165	; 0xa5
    3872:	5c9b      	ldrb	r3, [r3, r2]
    3874:	0018      	movs	r0, r3
    3876:	68fb      	ldr	r3, [r7, #12]
    3878:	22a5      	movs	r2, #165	; 0xa5
    387a:	5c9b      	ldrb	r3, [r3, r2]
    387c:	0019      	movs	r1, r3
    387e:	4a57      	ldr	r2, [pc, #348]	; (39dc <_ZN4Uart5beginEmt+0x1a4>)
    3880:	000b      	movs	r3, r1
    3882:	005b      	lsls	r3, r3, #1
    3884:	185b      	adds	r3, r3, r1
    3886:	00db      	lsls	r3, r3, #3
    3888:	18d3      	adds	r3, r2, r3
    388a:	3308      	adds	r3, #8
    388c:	781b      	ldrb	r3, [r3, #0]
    388e:	b25b      	sxtb	r3, r3
    3890:	0019      	movs	r1, r3
    3892:	f003 f973 	bl	6b7c <pinPeripheral>

  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    3896:	68fb      	ldr	r3, [r7, #12]
    3898:	22a7      	movs	r2, #167	; 0xa7
    389a:	5c9b      	ldrb	r3, [r3, r2]
    389c:	2b02      	cmp	r3, #2
    389e:	d118      	bne.n	38d2 <_ZN4Uart5beginEmt+0x9a>
    if (uc_pinCTS != NO_CTS_PIN) {
    38a0:	68fb      	ldr	r3, [r7, #12]
    38a2:	22b8      	movs	r2, #184	; 0xb8
    38a4:	5c9b      	ldrb	r3, [r3, r2]
    38a6:	2bff      	cmp	r3, #255	; 0xff
    38a8:	d013      	beq.n	38d2 <_ZN4Uart5beginEmt+0x9a>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    38aa:	68fb      	ldr	r3, [r7, #12]
    38ac:	22b8      	movs	r2, #184	; 0xb8
    38ae:	5c9b      	ldrb	r3, [r3, r2]
    38b0:	0018      	movs	r0, r3
    38b2:	68fb      	ldr	r3, [r7, #12]
    38b4:	22b8      	movs	r2, #184	; 0xb8
    38b6:	5c9b      	ldrb	r3, [r3, r2]
    38b8:	0019      	movs	r1, r3
    38ba:	4a48      	ldr	r2, [pc, #288]	; (39dc <_ZN4Uart5beginEmt+0x1a4>)
    38bc:	000b      	movs	r3, r1
    38be:	005b      	lsls	r3, r3, #1
    38c0:	185b      	adds	r3, r3, r1
    38c2:	00db      	lsls	r3, r3, #3
    38c4:	18d3      	adds	r3, r2, r3
    38c6:	3308      	adds	r3, #8
    38c8:	781b      	ldrb	r3, [r3, #0]
    38ca:	b25b      	sxtb	r3, r3
    38cc:	0019      	movs	r1, r3
    38ce:	f003 f955 	bl	6b7c <pinPeripheral>
    }
  }

  if (uc_pinRTS != NO_RTS_PIN) {
    38d2:	68fb      	ldr	r3, [r7, #12]
    38d4:	22a8      	movs	r2, #168	; 0xa8
    38d6:	5c9b      	ldrb	r3, [r3, r2]
    38d8:	2bff      	cmp	r3, #255	; 0xff
    38da:	d041      	beq.n	3960 <_ZN4Uart5beginEmt+0x128>
    pinMode(uc_pinRTS, OUTPUT);
    38dc:	68fb      	ldr	r3, [r7, #12]
    38de:	22a8      	movs	r2, #168	; 0xa8
    38e0:	5c9b      	ldrb	r3, [r3, r2]
    38e2:	2101      	movs	r1, #1
    38e4:	0018      	movs	r0, r3
    38e6:	f002 ffad 	bl	6844 <pinMode>

    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    38ea:	68fb      	ldr	r3, [r7, #12]
    38ec:	22a8      	movs	r2, #168	; 0xa8
    38ee:	5c9b      	ldrb	r3, [r3, r2]
    38f0:	0018      	movs	r0, r3
    38f2:	2317      	movs	r3, #23
    38f4:	18fa      	adds	r2, r7, r3
    38f6:	4939      	ldr	r1, [pc, #228]	; (39dc <_ZN4Uart5beginEmt+0x1a4>)
    38f8:	0003      	movs	r3, r0
    38fa:	005b      	lsls	r3, r3, #1
    38fc:	181b      	adds	r3, r3, r0
    38fe:	00db      	lsls	r3, r3, #3
    3900:	5c5b      	ldrb	r3, [r3, r1]
    3902:	7013      	strb	r3, [r2, #0]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    3904:	2317      	movs	r3, #23
    3906:	18fb      	adds	r3, r7, r3
    3908:	781b      	ldrb	r3, [r3, #0]
    390a:	b25b      	sxtb	r3, r3
    390c:	01db      	lsls	r3, r3, #7
    390e:	3318      	adds	r3, #24
    3910:	4a33      	ldr	r2, [pc, #204]	; (39e0 <_ZN4Uart5beginEmt+0x1a8>)
    3912:	189a      	adds	r2, r3, r2
    3914:	68fb      	ldr	r3, [r7, #12]
    3916:	21ac      	movs	r1, #172	; 0xac
    3918:	505a      	str	r2, [r3, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    391a:	2317      	movs	r3, #23
    391c:	18fb      	adds	r3, r7, r3
    391e:	781b      	ldrb	r3, [r3, #0]
    3920:	b25b      	sxtb	r3, r3
    3922:	01db      	lsls	r3, r3, #7
    3924:	3314      	adds	r3, #20
    3926:	4a2e      	ldr	r2, [pc, #184]	; (39e0 <_ZN4Uart5beginEmt+0x1a8>)
    3928:	189a      	adds	r2, r3, r2
    392a:	68fb      	ldr	r3, [r7, #12]
    392c:	21b0      	movs	r1, #176	; 0xb0
    392e:	505a      	str	r2, [r3, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    3930:	68fb      	ldr	r3, [r7, #12]
    3932:	22a8      	movs	r2, #168	; 0xa8
    3934:	5c9b      	ldrb	r3, [r3, r2]
    3936:	0019      	movs	r1, r3
    3938:	4a28      	ldr	r2, [pc, #160]	; (39dc <_ZN4Uart5beginEmt+0x1a4>)
    393a:	000b      	movs	r3, r1
    393c:	005b      	lsls	r3, r3, #1
    393e:	185b      	adds	r3, r3, r1
    3940:	00db      	lsls	r3, r3, #3
    3942:	18d3      	adds	r3, r2, r3
    3944:	3304      	adds	r3, #4
    3946:	681b      	ldr	r3, [r3, #0]
    3948:	2201      	movs	r2, #1
    394a:	409a      	lsls	r2, r3
    394c:	68fb      	ldr	r3, [r7, #12]
    394e:	21b4      	movs	r1, #180	; 0xb4
    3950:	505a      	str	r2, [r3, r1]

    *pul_outclrRTS = ul_pinMaskRTS;
    3952:	68fb      	ldr	r3, [r7, #12]
    3954:	22b0      	movs	r2, #176	; 0xb0
    3956:	589b      	ldr	r3, [r3, r2]
    3958:	68fa      	ldr	r2, [r7, #12]
    395a:	21b4      	movs	r1, #180	; 0xb4
    395c:	5852      	ldr	r2, [r2, r1]
    395e:	601a      	str	r2, [r3, #0]
  }

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    3960:	68fb      	ldr	r3, [r7, #12]
    3962:	6918      	ldr	r0, [r3, #16]
    3964:	68bb      	ldr	r3, [r7, #8]
    3966:	2201      	movs	r2, #1
    3968:	2101      	movs	r1, #1
    396a:	f009 ff59 	bl	d820 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    396e:	68fb      	ldr	r3, [r7, #12]
    3970:	691c      	ldr	r4, [r3, #16]
    3972:	1dbb      	adds	r3, r7, #6
    3974:	881a      	ldrh	r2, [r3, #0]
    3976:	68fb      	ldr	r3, [r7, #12]
    3978:	0011      	movs	r1, r2
    397a:	0018      	movs	r0, r3
    397c:	f000 f9b2 	bl	3ce4 <_ZN4Uart15extractCharSizeEt>
    3980:	0003      	movs	r3, r0
    3982:	001d      	movs	r5, r3
    3984:	1dbb      	adds	r3, r7, #6
    3986:	881a      	ldrh	r2, [r3, #0]
    3988:	68fb      	ldr	r3, [r7, #12]
    398a:	0011      	movs	r1, r2
    398c:	0018      	movs	r0, r3
    398e:	f000 f9cc 	bl	3d2a <_ZN4Uart13extractParityEt>
    3992:	0003      	movs	r3, r0
    3994:	001e      	movs	r6, r3
    3996:	1dbb      	adds	r3, r7, #6
    3998:	881a      	ldrh	r2, [r3, #0]
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	0011      	movs	r1, r2
    399e:	0018      	movs	r0, r3
    39a0:	f000 f98c 	bl	3cbc <_ZN4Uart16extractNbStopBitEt>
    39a4:	0003      	movs	r3, r0
    39a6:	9300      	str	r3, [sp, #0]
    39a8:	0033      	movs	r3, r6
    39aa:	2201      	movs	r2, #1
    39ac:	0029      	movs	r1, r5
    39ae:	0020      	movs	r0, r4
    39b0:	f009 ffaa 	bl	d908 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    39b4:	68fb      	ldr	r3, [r7, #12]
    39b6:	6918      	ldr	r0, [r3, #16]
    39b8:	68fb      	ldr	r3, [r7, #12]
    39ba:	22a7      	movs	r2, #167	; 0xa7
    39bc:	5c99      	ldrb	r1, [r3, r2]
    39be:	68fb      	ldr	r3, [r7, #12]
    39c0:	22a6      	movs	r2, #166	; 0xa6
    39c2:	5c9b      	ldrb	r3, [r3, r2]
    39c4:	001a      	movs	r2, r3
    39c6:	f009 ffe3 	bl	d990 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    39ca:	68fb      	ldr	r3, [r7, #12]
    39cc:	691b      	ldr	r3, [r3, #16]
    39ce:	0018      	movs	r0, r3
    39d0:	f00a f831 	bl	da36 <_ZN6SERCOM10enableUARTEv>
}
    39d4:	46c0      	nop			; (mov r8, r8)
    39d6:	46bd      	mov	sp, r7
    39d8:	b007      	add	sp, #28
    39da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39dc:	000136a8 	.word	0x000136a8
    39e0:	41004400 	.word	0x41004400

000039e4 <_ZN4Uart3endEv>:

void Uart::end()
{
    39e4:	b580      	push	{r7, lr}
    39e6:	b082      	sub	sp, #8
    39e8:	af00      	add	r7, sp, #0
    39ea:	6078      	str	r0, [r7, #4]
  sercom->resetUART();
    39ec:	687b      	ldr	r3, [r7, #4]
    39ee:	691b      	ldr	r3, [r3, #16]
    39f0:	0018      	movs	r0, r3
    39f2:	f009 fffc 	bl	d9ee <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    39f6:	687b      	ldr	r3, [r7, #4]
    39f8:	3314      	adds	r3, #20
    39fa:	0018      	movs	r0, r3
    39fc:	f000 f9c0 	bl	3d80 <_ZN11RingBufferNILi64EE5clearEv>
  txBuffer.clear();
    3a00:	687b      	ldr	r3, [r7, #4]
    3a02:	335c      	adds	r3, #92	; 0x5c
    3a04:	0018      	movs	r0, r3
    3a06:	f000 f9bb 	bl	3d80 <_ZN11RingBufferNILi64EE5clearEv>
}
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	46bd      	mov	sp, r7
    3a0e:	b002      	add	sp, #8
    3a10:	bd80      	pop	{r7, pc}

00003a12 <_ZN4Uart5flushEv>:

void Uart::flush()
{
    3a12:	b580      	push	{r7, lr}
    3a14:	b082      	sub	sp, #8
    3a16:	af00      	add	r7, sp, #0
    3a18:	6078      	str	r0, [r7, #4]
  while(txBuffer.available()); // wait until TX buffer is empty
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	335c      	adds	r3, #92	; 0x5c
    3a1e:	0018      	movs	r0, r3
    3a20:	f000 f9bc 	bl	3d9c <_ZN11RingBufferNILi64EE9availableEv>
    3a24:	0003      	movs	r3, r0
    3a26:	1e5a      	subs	r2, r3, #1
    3a28:	4193      	sbcs	r3, r2
    3a2a:	b2db      	uxtb	r3, r3
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	d000      	beq.n	3a32 <_ZN4Uart5flushEv+0x20>
    3a30:	e7f3      	b.n	3a1a <_ZN4Uart5flushEv+0x8>

  sercom->flushUART();
    3a32:	687b      	ldr	r3, [r7, #4]
    3a34:	691b      	ldr	r3, [r3, #16]
    3a36:	0018      	movs	r0, r3
    3a38:	f00a f814 	bl	da64 <_ZN6SERCOM9flushUARTEv>
}
    3a3c:	46c0      	nop			; (mov r8, r8)
    3a3e:	46bd      	mov	sp, r7
    3a40:	b002      	add	sp, #8
    3a42:	bd80      	pop	{r7, pc}

00003a44 <_ZN4Uart10IrqHandlerEv>:

void Uart::IrqHandler()
{
    3a44:	b590      	push	{r4, r7, lr}
    3a46:	b085      	sub	sp, #20
    3a48:	af00      	add	r7, sp, #0
    3a4a:	6078      	str	r0, [r7, #4]
  if (sercom->availableDataUART()) {
    3a4c:	687b      	ldr	r3, [r7, #4]
    3a4e:	691b      	ldr	r3, [r3, #16]
    3a50:	0018      	movs	r0, r3
    3a52:	f00a f82d 	bl	dab0 <_ZN6SERCOM17availableDataUARTEv>
    3a56:	1e03      	subs	r3, r0, #0
    3a58:	d027      	beq.n	3aaa <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    3a5a:	687b      	ldr	r3, [r7, #4]
    3a5c:	3314      	adds	r3, #20
    3a5e:	001c      	movs	r4, r3
    3a60:	687b      	ldr	r3, [r7, #4]
    3a62:	691b      	ldr	r3, [r3, #16]
    3a64:	0018      	movs	r0, r3
    3a66:	f00a f85c 	bl	db22 <_ZN6SERCOM12readDataUARTEv>
    3a6a:	0003      	movs	r3, r0
    3a6c:	0019      	movs	r1, r3
    3a6e:	0020      	movs	r0, r4
    3a70:	f000 f9a9 	bl	3dc6 <_ZN11RingBufferNILi64EE10store_charEh>

    if (uc_pinRTS != NO_RTS_PIN) {
    3a74:	687b      	ldr	r3, [r7, #4]
    3a76:	22a8      	movs	r2, #168	; 0xa8
    3a78:	5c9b      	ldrb	r3, [r3, r2]
    3a7a:	2bff      	cmp	r3, #255	; 0xff
    3a7c:	d015      	beq.n	3aaa <_ZN4Uart10IrqHandlerEv+0x66>
      // RX buffer space is below the threshold, de-assert RTS
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	3314      	adds	r3, #20
    3a82:	0018      	movs	r0, r3
    3a84:	f000 f9c5 	bl	3e12 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3a88:	0002      	movs	r2, r0
    3a8a:	2309      	movs	r3, #9
    3a8c:	0fd0      	lsrs	r0, r2, #31
    3a8e:	17d9      	asrs	r1, r3, #31
    3a90:	4293      	cmp	r3, r2
    3a92:	4148      	adcs	r0, r1
    3a94:	0003      	movs	r3, r0
    3a96:	b2db      	uxtb	r3, r3
    3a98:	2b00      	cmp	r3, #0
    3a9a:	d006      	beq.n	3aaa <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    3a9c:	687b      	ldr	r3, [r7, #4]
    3a9e:	22ac      	movs	r2, #172	; 0xac
    3aa0:	589b      	ldr	r3, [r3, r2]
    3aa2:	687a      	ldr	r2, [r7, #4]
    3aa4:	21b4      	movs	r1, #180	; 0xb4
    3aa6:	5852      	ldr	r2, [r2, r1]
    3aa8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  if (sercom->isDataRegisterEmptyUART()) {
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	691b      	ldr	r3, [r3, #16]
    3aae:	0018      	movs	r0, r3
    3ab0:	f00a f829 	bl	db06 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3ab4:	1e03      	subs	r3, r0, #0
    3ab6:	d022      	beq.n	3afe <_ZN4Uart10IrqHandlerEv+0xba>
    if (txBuffer.available()) {
    3ab8:	687b      	ldr	r3, [r7, #4]
    3aba:	335c      	adds	r3, #92	; 0x5c
    3abc:	0018      	movs	r0, r3
    3abe:	f000 f96d 	bl	3d9c <_ZN11RingBufferNILi64EE9availableEv>
    3ac2:	0003      	movs	r3, r0
    3ac4:	1e5a      	subs	r2, r3, #1
    3ac6:	4193      	sbcs	r3, r2
    3ac8:	b2db      	uxtb	r3, r3
    3aca:	2b00      	cmp	r3, #0
    3acc:	d012      	beq.n	3af4 <_ZN4Uart10IrqHandlerEv+0xb0>
      uint8_t data = txBuffer.read_char();
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	335c      	adds	r3, #92	; 0x5c
    3ad2:	0018      	movs	r0, r3
    3ad4:	f000 f9bf 	bl	3e56 <_ZN11RingBufferNILi64EE9read_charEv>
    3ad8:	0002      	movs	r2, r0
    3ada:	230f      	movs	r3, #15
    3adc:	18fb      	adds	r3, r7, r3
    3ade:	701a      	strb	r2, [r3, #0]

      sercom->writeDataUART(data);
    3ae0:	687b      	ldr	r3, [r7, #4]
    3ae2:	691a      	ldr	r2, [r3, #16]
    3ae4:	230f      	movs	r3, #15
    3ae6:	18fb      	adds	r3, r7, r3
    3ae8:	781b      	ldrb	r3, [r3, #0]
    3aea:	0019      	movs	r1, r3
    3aec:	0010      	movs	r0, r2
    3aee:	f00a f827 	bl	db40 <_ZN6SERCOM13writeDataUARTEh>
    3af2:	e004      	b.n	3afe <_ZN4Uart10IrqHandlerEv+0xba>
    } else {
      sercom->disableDataRegisterEmptyInterruptUART();
    3af4:	687b      	ldr	r3, [r7, #4]
    3af6:	691b      	ldr	r3, [r3, #16]
    3af8:	0018      	movs	r0, r3
    3afa:	f00a f84b 	bl	db94 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    }
  }

  if (sercom->isUARTError()) {
    3afe:	687b      	ldr	r3, [r7, #4]
    3b00:	691b      	ldr	r3, [r3, #16]
    3b02:	0018      	movs	r0, r3
    3b04:	f009 ffe2 	bl	dacc <_ZN6SERCOM11isUARTErrorEv>
    3b08:	1e03      	subs	r3, r0, #0
    3b0a:	d009      	beq.n	3b20 <_ZN4Uart10IrqHandlerEv+0xdc>
    sercom->acknowledgeUARTError();
    3b0c:	687b      	ldr	r3, [r7, #4]
    3b0e:	691b      	ldr	r3, [r3, #16]
    3b10:	0018      	movs	r0, r3
    3b12:	f009 ffe9 	bl	dae8 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    // TODO: if (sercom->isBufferOverflowErrorUART()) ....
    // TODO: if (sercom->isFrameErrorUART()) ....
    // TODO: if (sercom->isParityErrorUART()) ....
    sercom->clearStatusUART();
    3b16:	687b      	ldr	r3, [r7, #4]
    3b18:	691b      	ldr	r3, [r3, #16]
    3b1a:	0018      	movs	r0, r3
    3b1c:	f009 ffbc 	bl	da98 <_ZN6SERCOM15clearStatusUARTEv>
  }
}
    3b20:	46c0      	nop			; (mov r8, r8)
    3b22:	46bd      	mov	sp, r7
    3b24:	b005      	add	sp, #20
    3b26:	bd90      	pop	{r4, r7, pc}

00003b28 <_ZN4Uart9availableEv>:

int Uart::available()
{
    3b28:	b580      	push	{r7, lr}
    3b2a:	b082      	sub	sp, #8
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	6078      	str	r0, [r7, #4]
  return rxBuffer.available();
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	3314      	adds	r3, #20
    3b34:	0018      	movs	r0, r3
    3b36:	f000 f931 	bl	3d9c <_ZN11RingBufferNILi64EE9availableEv>
    3b3a:	0003      	movs	r3, r0
}
    3b3c:	0018      	movs	r0, r3
    3b3e:	46bd      	mov	sp, r7
    3b40:	b002      	add	sp, #8
    3b42:	bd80      	pop	{r7, pc}

00003b44 <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    3b44:	b580      	push	{r7, lr}
    3b46:	b082      	sub	sp, #8
    3b48:	af00      	add	r7, sp, #0
    3b4a:	6078      	str	r0, [r7, #4]
  return txBuffer.availableForStore();
    3b4c:	687b      	ldr	r3, [r7, #4]
    3b4e:	335c      	adds	r3, #92	; 0x5c
    3b50:	0018      	movs	r0, r3
    3b52:	f000 f95e 	bl	3e12 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3b56:	0003      	movs	r3, r0
}
    3b58:	0018      	movs	r0, r3
    3b5a:	46bd      	mov	sp, r7
    3b5c:	b002      	add	sp, #8
    3b5e:	bd80      	pop	{r7, pc}

00003b60 <_ZN4Uart4peekEv>:

int Uart::peek()
{
    3b60:	b580      	push	{r7, lr}
    3b62:	b082      	sub	sp, #8
    3b64:	af00      	add	r7, sp, #0
    3b66:	6078      	str	r0, [r7, #4]
  return rxBuffer.peek();
    3b68:	687b      	ldr	r3, [r7, #4]
    3b6a:	3314      	adds	r3, #20
    3b6c:	0018      	movs	r0, r3
    3b6e:	f000 f99b 	bl	3ea8 <_ZN11RingBufferNILi64EE4peekEv>
    3b72:	0003      	movs	r3, r0
}
    3b74:	0018      	movs	r0, r3
    3b76:	46bd      	mov	sp, r7
    3b78:	b002      	add	sp, #8
    3b7a:	bd80      	pop	{r7, pc}

00003b7c <_ZN4Uart4readEv>:

int Uart::read()
{
    3b7c:	b580      	push	{r7, lr}
    3b7e:	b084      	sub	sp, #16
    3b80:	af00      	add	r7, sp, #0
    3b82:	6078      	str	r0, [r7, #4]
  int c = rxBuffer.read_char();
    3b84:	687b      	ldr	r3, [r7, #4]
    3b86:	3314      	adds	r3, #20
    3b88:	0018      	movs	r0, r3
    3b8a:	f000 f964 	bl	3e56 <_ZN11RingBufferNILi64EE9read_charEv>
    3b8e:	0003      	movs	r3, r0
    3b90:	60fb      	str	r3, [r7, #12]

  if (uc_pinRTS != NO_RTS_PIN) {
    3b92:	687b      	ldr	r3, [r7, #4]
    3b94:	22a8      	movs	r2, #168	; 0xa8
    3b96:	5c9b      	ldrb	r3, [r3, r2]
    3b98:	2bff      	cmp	r3, #255	; 0xff
    3b9a:	d014      	beq.n	3bc6 <_ZN4Uart4readEv+0x4a>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    3b9c:	687b      	ldr	r3, [r7, #4]
    3b9e:	3314      	adds	r3, #20
    3ba0:	0018      	movs	r0, r3
    3ba2:	f000 f936 	bl	3e12 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3ba6:	0003      	movs	r3, r0
    3ba8:	2201      	movs	r2, #1
    3baa:	2b0a      	cmp	r3, #10
    3bac:	dc01      	bgt.n	3bb2 <_ZN4Uart4readEv+0x36>
    3bae:	2300      	movs	r3, #0
    3bb0:	1c1a      	adds	r2, r3, #0
    3bb2:	b2d3      	uxtb	r3, r2
    3bb4:	2b00      	cmp	r3, #0
    3bb6:	d006      	beq.n	3bc6 <_ZN4Uart4readEv+0x4a>
      *pul_outclrRTS = ul_pinMaskRTS;
    3bb8:	687b      	ldr	r3, [r7, #4]
    3bba:	22b0      	movs	r2, #176	; 0xb0
    3bbc:	589b      	ldr	r3, [r3, r2]
    3bbe:	687a      	ldr	r2, [r7, #4]
    3bc0:	21b4      	movs	r1, #180	; 0xb4
    3bc2:	5852      	ldr	r2, [r2, r1]
    3bc4:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
    3bc6:	68fb      	ldr	r3, [r7, #12]
}
    3bc8:	0018      	movs	r0, r3
    3bca:	46bd      	mov	sp, r7
    3bcc:	b004      	add	sp, #16
    3bce:	bd80      	pop	{r7, pc}

00003bd0 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    3bd0:	b580      	push	{r7, lr}
    3bd2:	b086      	sub	sp, #24
    3bd4:	af00      	add	r7, sp, #0
    3bd6:	6078      	str	r0, [r7, #4]
    3bd8:	000a      	movs	r2, r1
    3bda:	1cfb      	adds	r3, r7, #3
    3bdc:	701a      	strb	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	691b      	ldr	r3, [r3, #16]
    3be2:	0018      	movs	r0, r3
    3be4:	f009 ff8f 	bl	db06 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3be8:	1e03      	subs	r3, r0, #0
    3bea:	d008      	beq.n	3bfe <_ZN4Uart5writeEh+0x2e>
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	335c      	adds	r3, #92	; 0x5c
    3bf0:	0018      	movs	r0, r3
    3bf2:	f000 f8d3 	bl	3d9c <_ZN11RingBufferNILi64EE9availableEv>
    3bf6:	1e03      	subs	r3, r0, #0
    3bf8:	d101      	bne.n	3bfe <_ZN4Uart5writeEh+0x2e>
    3bfa:	2301      	movs	r3, #1
    3bfc:	e000      	b.n	3c00 <_ZN4Uart5writeEh+0x30>
    3bfe:	2300      	movs	r3, #0
    3c00:	2b00      	cmp	r3, #0
    3c02:	d008      	beq.n	3c16 <_ZN4Uart5writeEh+0x46>
    sercom->writeDataUART(data);
    3c04:	687b      	ldr	r3, [r7, #4]
    3c06:	691a      	ldr	r2, [r3, #16]
    3c08:	1cfb      	adds	r3, r7, #3
    3c0a:	781b      	ldrb	r3, [r3, #0]
    3c0c:	0019      	movs	r1, r3
    3c0e:	0010      	movs	r0, r2
    3c10:	f009 ff96 	bl	db40 <_ZN6SERCOM13writeDataUARTEh>
    3c14:	e04b      	b.n	3cae <_ZN4Uart5writeEh+0xde>
  } else {
    // spin lock until a spot opens up in the buffer
    while(txBuffer.isFull()) {
    3c16:	687b      	ldr	r3, [r7, #4]
    3c18:	335c      	adds	r3, #92	; 0x5c
    3c1a:	0018      	movs	r0, r3
    3c1c:	f000 f95d 	bl	3eda <_ZN11RingBufferNILi64EE6isFullEv>
    3c20:	1e03      	subs	r3, r0, #0
    3c22:	d036      	beq.n	3c92 <_ZN4Uart5writeEh+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c24:	f3ef 8310 	mrs	r3, PRIMASK
    3c28:	60fb      	str	r3, [r7, #12]
  return(result);
    3c2a:	68fb      	ldr	r3, [r7, #12]
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);
    3c2c:	2201      	movs	r2, #1
    3c2e:	4013      	ands	r3, r2
    3c30:	425a      	negs	r2, r3
    3c32:	4153      	adcs	r3, r2
    3c34:	b2da      	uxtb	r2, r3
    3c36:	2317      	movs	r3, #23
    3c38:	18fb      	adds	r3, r7, r3
    3c3a:	701a      	strb	r2, [r3, #0]

      if (interruptsEnabled) {
    3c3c:	2317      	movs	r3, #23
    3c3e:	18fb      	adds	r3, r7, r3
    3c40:	781b      	ldrb	r3, [r3, #0]
    3c42:	2b00      	cmp	r3, #0
    3c44:	d017      	beq.n	3c76 <_ZN4Uart5writeEh+0xa6>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    3c46:	4b1c      	ldr	r3, [pc, #112]	; (3cb8 <_ZN4Uart5writeEh+0xe8>)
    3c48:	685b      	ldr	r3, [r3, #4]
    3c4a:	05db      	lsls	r3, r3, #23
    3c4c:	0ddb      	lsrs	r3, r3, #23
    3c4e:	613b      	str	r3, [r7, #16]

        if (exceptionNumber == 0 ||
    3c50:	693b      	ldr	r3, [r7, #16]
    3c52:	2b00      	cmp	r3, #0
    3c54:	d00a      	beq.n	3c6c <_ZN4Uart5writeEh+0x9c>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    3c56:	693b      	ldr	r3, [r7, #16]
    3c58:	b2db      	uxtb	r3, r3
    3c5a:	3b10      	subs	r3, #16
    3c5c:	b2db      	uxtb	r3, r3
    3c5e:	b25b      	sxtb	r3, r3
    3c60:	0018      	movs	r0, r3
    3c62:	f7ff fd21 	bl	36a8 <__NVIC_GetPriority>
    3c66:	0003      	movs	r3, r0
        if (exceptionNumber == 0 ||
    3c68:	2b03      	cmp	r3, #3
    3c6a:	d901      	bls.n	3c70 <_ZN4Uart5writeEh+0xa0>
    3c6c:	2301      	movs	r3, #1
    3c6e:	e000      	b.n	3c72 <_ZN4Uart5writeEh+0xa2>
    3c70:	2300      	movs	r3, #0
    3c72:	2b00      	cmp	r3, #0
    3c74:	d10b      	bne.n	3c8e <_ZN4Uart5writeEh+0xbe>
        }
      }

      // interrupts are disabled or called from ISR with higher or equal priority than the SERCOM IRQ
      // manually call the UART IRQ handler when the data register is empty
      if (sercom->isDataRegisterEmptyUART()) {
    3c76:	687b      	ldr	r3, [r7, #4]
    3c78:	691b      	ldr	r3, [r3, #16]
    3c7a:	0018      	movs	r0, r3
    3c7c:	f009 ff43 	bl	db06 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3c80:	1e03      	subs	r3, r0, #0
    3c82:	d0c8      	beq.n	3c16 <_ZN4Uart5writeEh+0x46>
        IrqHandler();
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	0018      	movs	r0, r3
    3c88:	f7ff fedc 	bl	3a44 <_ZN4Uart10IrqHandlerEv>
    3c8c:	e7c3      	b.n	3c16 <_ZN4Uart5writeEh+0x46>
          continue;
    3c8e:	46c0      	nop			; (mov r8, r8)
    while(txBuffer.isFull()) {
    3c90:	e7c1      	b.n	3c16 <_ZN4Uart5writeEh+0x46>
      }
    }

    txBuffer.store_char(data);
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	335c      	adds	r3, #92	; 0x5c
    3c96:	001a      	movs	r2, r3
    3c98:	1cfb      	adds	r3, r7, #3
    3c9a:	781b      	ldrb	r3, [r3, #0]
    3c9c:	0019      	movs	r1, r3
    3c9e:	0010      	movs	r0, r2
    3ca0:	f000 f891 	bl	3dc6 <_ZN11RingBufferNILi64EE10store_charEh>

    sercom->enableDataRegisterEmptyInterruptUART();
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	691b      	ldr	r3, [r3, #16]
    3ca8:	0018      	movs	r0, r3
    3caa:	f009 ff67 	bl	db7c <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
  }

  return 1;
    3cae:	2301      	movs	r3, #1
}
    3cb0:	0018      	movs	r0, r3
    3cb2:	46bd      	mov	sp, r7
    3cb4:	b006      	add	sp, #24
    3cb6:	bd80      	pop	{r7, pc}
    3cb8:	e000ed00 	.word	0xe000ed00

00003cbc <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b082      	sub	sp, #8
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	6078      	str	r0, [r7, #4]
    3cc4:	000a      	movs	r2, r1
    3cc6:	1cbb      	adds	r3, r7, #2
    3cc8:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_STOP_BIT_MASK)
    3cca:	1cbb      	adds	r3, r7, #2
    3ccc:	881b      	ldrh	r3, [r3, #0]
    3cce:	22f0      	movs	r2, #240	; 0xf0
    3cd0:	4013      	ands	r3, r2
    3cd2:	2b30      	cmp	r3, #48	; 0x30
    3cd4:	d001      	beq.n	3cda <_ZN4Uart16extractNbStopBitEt+0x1e>
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    3cd6:	2300      	movs	r3, #0
    3cd8:	e000      	b.n	3cdc <_ZN4Uart16extractNbStopBitEt+0x20>

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
    3cda:	2301      	movs	r3, #1
  }
}
    3cdc:	0018      	movs	r0, r3
    3cde:	46bd      	mov	sp, r7
    3ce0:	b002      	add	sp, #8
    3ce2:	bd80      	pop	{r7, pc}

00003ce4 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	b082      	sub	sp, #8
    3ce8:	af00      	add	r7, sp, #0
    3cea:	6078      	str	r0, [r7, #4]
    3cec:	000a      	movs	r2, r1
    3cee:	1cbb      	adds	r3, r7, #2
    3cf0:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_DATA_MASK)
    3cf2:	1cbb      	adds	r3, r7, #2
    3cf4:	881a      	ldrh	r2, [r3, #0]
    3cf6:	23f0      	movs	r3, #240	; 0xf0
    3cf8:	011b      	lsls	r3, r3, #4
    3cfa:	4013      	ands	r3, r2
    3cfc:	2280      	movs	r2, #128	; 0x80
    3cfe:	0092      	lsls	r2, r2, #2
    3d00:	4293      	cmp	r3, r2
    3d02:	d009      	beq.n	3d18 <_ZN4Uart15extractCharSizeEt+0x34>
    3d04:	22c0      	movs	r2, #192	; 0xc0
    3d06:	0092      	lsls	r2, r2, #2
    3d08:	4293      	cmp	r3, r2
    3d0a:	d007      	beq.n	3d1c <_ZN4Uart15extractCharSizeEt+0x38>
    3d0c:	2280      	movs	r2, #128	; 0x80
    3d0e:	0052      	lsls	r2, r2, #1
    3d10:	4293      	cmp	r3, r2
    3d12:	d105      	bne.n	3d20 <_ZN4Uart15extractCharSizeEt+0x3c>
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;
    3d14:	2305      	movs	r3, #5
    3d16:	e004      	b.n	3d22 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    3d18:	2306      	movs	r3, #6
    3d1a:	e002      	b.n	3d22 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    3d1c:	2307      	movs	r3, #7
    3d1e:	e000      	b.n	3d22 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    3d20:	2300      	movs	r3, #0

  }
}
    3d22:	0018      	movs	r0, r3
    3d24:	46bd      	mov	sp, r7
    3d26:	b002      	add	sp, #8
    3d28:	bd80      	pop	{r7, pc}

00003d2a <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
    3d2a:	b580      	push	{r7, lr}
    3d2c:	b082      	sub	sp, #8
    3d2e:	af00      	add	r7, sp, #0
    3d30:	6078      	str	r0, [r7, #4]
    3d32:	000a      	movs	r2, r1
    3d34:	1cbb      	adds	r3, r7, #2
    3d36:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_PARITY_MASK)
    3d38:	1cbb      	adds	r3, r7, #2
    3d3a:	881b      	ldrh	r3, [r3, #0]
    3d3c:	220f      	movs	r2, #15
    3d3e:	4013      	ands	r3, r2
    3d40:	2b01      	cmp	r3, #1
    3d42:	d003      	beq.n	3d4c <_ZN4Uart13extractParityEt+0x22>
    3d44:	2b02      	cmp	r3, #2
    3d46:	d003      	beq.n	3d50 <_ZN4Uart13extractParityEt+0x26>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    3d48:	2302      	movs	r3, #2
    3d4a:	e002      	b.n	3d52 <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    3d4c:	2300      	movs	r3, #0
    3d4e:	e000      	b.n	3d52 <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
    3d50:	2301      	movs	r3, #1
  }
}
    3d52:	0018      	movs	r0, r3
    3d54:	46bd      	mov	sp, r7
    3d56:	b002      	add	sp, #8
    3d58:	bd80      	pop	{r7, pc}

00003d5a <_ZN11RingBufferNILi64EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;


template <int N>
RingBufferN<N>::RingBufferN( void )
    3d5a:	b580      	push	{r7, lr}
    3d5c:	b082      	sub	sp, #8
    3d5e:	af00      	add	r7, sp, #0
    3d60:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
    3d62:	687b      	ldr	r3, [r7, #4]
    3d64:	2240      	movs	r2, #64	; 0x40
    3d66:	2100      	movs	r1, #0
    3d68:	0018      	movs	r0, r3
    3d6a:	f00c fd5b 	bl	10824 <memset>
    clear();
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	0018      	movs	r0, r3
    3d72:	f000 f805 	bl	3d80 <_ZN11RingBufferNILi64EE5clearEv>
}
    3d76:	687b      	ldr	r3, [r7, #4]
    3d78:	0018      	movs	r0, r3
    3d7a:	46bd      	mov	sp, r7
    3d7c:	b002      	add	sp, #8
    3d7e:	bd80      	pop	{r7, pc}

00003d80 <_ZN11RingBufferNILi64EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
    3d80:	b580      	push	{r7, lr}
    3d82:	b082      	sub	sp, #8
    3d84:	af00      	add	r7, sp, #0
    3d86:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	2200      	movs	r2, #0
    3d8c:	641a      	str	r2, [r3, #64]	; 0x40
  _iTail = 0;
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	2200      	movs	r2, #0
    3d92:	645a      	str	r2, [r3, #68]	; 0x44
}
    3d94:	46c0      	nop			; (mov r8, r8)
    3d96:	46bd      	mov	sp, r7
    3d98:	b002      	add	sp, #8
    3d9a:	bd80      	pop	{r7, pc}

00003d9c <_ZN11RingBufferNILi64EE9availableEv>:

  return value;
}

template <int N>
int RingBufferN<N>::available()
    3d9c:	b580      	push	{r7, lr}
    3d9e:	b084      	sub	sp, #16
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
{
  int delta = _iHead - _iTail;
    3da4:	687b      	ldr	r3, [r7, #4]
    3da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3dac:	1ad3      	subs	r3, r2, r3
    3dae:	60fb      	str	r3, [r7, #12]

  if(delta < 0)
    3db0:	68fb      	ldr	r3, [r7, #12]
    3db2:	2b00      	cmp	r3, #0
    3db4:	da02      	bge.n	3dbc <_ZN11RingBufferNILi64EE9availableEv+0x20>
    return N + delta;
    3db6:	68fb      	ldr	r3, [r7, #12]
    3db8:	3340      	adds	r3, #64	; 0x40
    3dba:	e000      	b.n	3dbe <_ZN11RingBufferNILi64EE9availableEv+0x22>
  else
    return delta;
    3dbc:	68fb      	ldr	r3, [r7, #12]
}
    3dbe:	0018      	movs	r0, r3
    3dc0:	46bd      	mov	sp, r7
    3dc2:	b004      	add	sp, #16
    3dc4:	bd80      	pop	{r7, pc}

00003dc6 <_ZN11RingBufferNILi64EE10store_charEh>:
void RingBufferN<N>::store_char( uint8_t c )
    3dc6:	b580      	push	{r7, lr}
    3dc8:	b084      	sub	sp, #16
    3dca:	af00      	add	r7, sp, #0
    3dcc:	6078      	str	r0, [r7, #4]
    3dce:	000a      	movs	r2, r1
    3dd0:	1cfb      	adds	r3, r7, #3
    3dd2:	701a      	strb	r2, [r3, #0]
  int i = nextIndex(_iHead);
    3dd4:	687b      	ldr	r3, [r7, #4]
    3dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3dd8:	687b      	ldr	r3, [r7, #4]
    3dda:	0011      	movs	r1, r2
    3ddc:	0018      	movs	r0, r3
    3dde:	f000 f892 	bl	3f06 <_ZN11RingBufferNILi64EE9nextIndexEi>
    3de2:	0003      	movs	r3, r0
    3de4:	60fb      	str	r3, [r7, #12]
  if ( i != _iTail )
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3dea:	68fb      	ldr	r3, [r7, #12]
    3dec:	1ad3      	subs	r3, r2, r3
    3dee:	1e5a      	subs	r2, r3, #1
    3df0:	4193      	sbcs	r3, r2
    3df2:	b2db      	uxtb	r3, r3
    3df4:	2b00      	cmp	r3, #0
    3df6:	d008      	beq.n	3e0a <_ZN11RingBufferNILi64EE10store_charEh+0x44>
    _aucBuffer[_iHead] = c ;
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3dfc:	687a      	ldr	r2, [r7, #4]
    3dfe:	1cf9      	adds	r1, r7, #3
    3e00:	7809      	ldrb	r1, [r1, #0]
    3e02:	54d1      	strb	r1, [r2, r3]
    _iHead = i ;
    3e04:	687b      	ldr	r3, [r7, #4]
    3e06:	68fa      	ldr	r2, [r7, #12]
    3e08:	641a      	str	r2, [r3, #64]	; 0x40
}
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	46bd      	mov	sp, r7
    3e0e:	b004      	add	sp, #16
    3e10:	bd80      	pop	{r7, pc}

00003e12 <_ZN11RingBufferNILi64EE17availableForStoreEv>:

template <int N>
int RingBufferN<N>::availableForStore()
    3e12:	b580      	push	{r7, lr}
    3e14:	b082      	sub	sp, #8
    3e16:	af00      	add	r7, sp, #0
    3e18:	6078      	str	r0, [r7, #4]
{
  if (_iHead >= _iTail)
    3e1a:	687b      	ldr	r3, [r7, #4]
    3e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3e1e:	687b      	ldr	r3, [r7, #4]
    3e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e22:	17d0      	asrs	r0, r2, #31
    3e24:	0fd9      	lsrs	r1, r3, #31
    3e26:	429a      	cmp	r2, r3
    3e28:	4148      	adcs	r0, r1
    3e2a:	0003      	movs	r3, r0
    3e2c:	b2db      	uxtb	r3, r3
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d007      	beq.n	3e42 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x30>
    return N - 1 - _iHead + _iTail;
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e36:	223f      	movs	r2, #63	; 0x3f
    3e38:	1ad2      	subs	r2, r2, r3
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e3e:	18d3      	adds	r3, r2, r3
    3e40:	e005      	b.n	3e4e <_ZN11RingBufferNILi64EE17availableForStoreEv+0x3c>
  else
    return _iTail - _iHead - 1;
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e4a:	1ad3      	subs	r3, r2, r3
    3e4c:	3b01      	subs	r3, #1
}
    3e4e:	0018      	movs	r0, r3
    3e50:	46bd      	mov	sp, r7
    3e52:	b002      	add	sp, #8
    3e54:	bd80      	pop	{r7, pc}

00003e56 <_ZN11RingBufferNILi64EE9read_charEv>:
int RingBufferN<N>::read_char()
    3e56:	b580      	push	{r7, lr}
    3e58:	b084      	sub	sp, #16
    3e5a:	af00      	add	r7, sp, #0
    3e5c:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e62:	687b      	ldr	r3, [r7, #4]
    3e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e66:	1ad3      	subs	r3, r2, r3
    3e68:	425a      	negs	r2, r3
    3e6a:	4153      	adcs	r3, r2
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d002      	beq.n	3e78 <_ZN11RingBufferNILi64EE9read_charEv+0x22>
    return -1;
    3e72:	2301      	movs	r3, #1
    3e74:	425b      	negs	r3, r3
    3e76:	e013      	b.n	3ea0 <_ZN11RingBufferNILi64EE9read_charEv+0x4a>
  uint8_t value = _aucBuffer[_iTail];
    3e78:	687b      	ldr	r3, [r7, #4]
    3e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e7c:	230f      	movs	r3, #15
    3e7e:	18fb      	adds	r3, r7, r3
    3e80:	6879      	ldr	r1, [r7, #4]
    3e82:	5c8a      	ldrb	r2, [r1, r2]
    3e84:	701a      	strb	r2, [r3, #0]
  _iTail = nextIndex(_iTail);
    3e86:	687b      	ldr	r3, [r7, #4]
    3e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e8a:	687b      	ldr	r3, [r7, #4]
    3e8c:	0011      	movs	r1, r2
    3e8e:	0018      	movs	r0, r3
    3e90:	f000 f839 	bl	3f06 <_ZN11RingBufferNILi64EE9nextIndexEi>
    3e94:	0002      	movs	r2, r0
    3e96:	687b      	ldr	r3, [r7, #4]
    3e98:	645a      	str	r2, [r3, #68]	; 0x44
  return value;
    3e9a:	230f      	movs	r3, #15
    3e9c:	18fb      	adds	r3, r7, r3
    3e9e:	781b      	ldrb	r3, [r3, #0]
}
    3ea0:	0018      	movs	r0, r3
    3ea2:	46bd      	mov	sp, r7
    3ea4:	b004      	add	sp, #16
    3ea6:	bd80      	pop	{r7, pc}

00003ea8 <_ZN11RingBufferNILi64EE4peekEv>:

template <int N>
int RingBufferN<N>::peek()
    3ea8:	b580      	push	{r7, lr}
    3eaa:	b082      	sub	sp, #8
    3eac:	af00      	add	r7, sp, #0
    3eae:	6078      	str	r0, [r7, #4]
{
  if(_iTail == _iHead)
    3eb0:	687b      	ldr	r3, [r7, #4]
    3eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3eb4:	687b      	ldr	r3, [r7, #4]
    3eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3eb8:	1ad3      	subs	r3, r2, r3
    3eba:	425a      	negs	r2, r3
    3ebc:	4153      	adcs	r3, r2
    3ebe:	b2db      	uxtb	r3, r3
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d002      	beq.n	3eca <_ZN11RingBufferNILi64EE4peekEv+0x22>
    return -1;
    3ec4:	2301      	movs	r3, #1
    3ec6:	425b      	negs	r3, r3
    3ec8:	e003      	b.n	3ed2 <_ZN11RingBufferNILi64EE4peekEv+0x2a>

  return _aucBuffer[_iTail];
    3eca:	687b      	ldr	r3, [r7, #4]
    3ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3ece:	687a      	ldr	r2, [r7, #4]
    3ed0:	5cd3      	ldrb	r3, [r2, r3]
}
    3ed2:	0018      	movs	r0, r3
    3ed4:	46bd      	mov	sp, r7
    3ed6:	b002      	add	sp, #8
    3ed8:	bd80      	pop	{r7, pc}

00003eda <_ZN11RingBufferNILi64EE6isFullEv>:
{
  return (uint32_t)(index + 1) % N;
}

template <int N>
bool RingBufferN<N>::isFull()
    3eda:	b580      	push	{r7, lr}
    3edc:	b082      	sub	sp, #8
    3ede:	af00      	add	r7, sp, #0
    3ee0:	6078      	str	r0, [r7, #4]
{
  return (nextIndex(_iHead) == _iTail);
    3ee2:	687b      	ldr	r3, [r7, #4]
    3ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3ee6:	687b      	ldr	r3, [r7, #4]
    3ee8:	0011      	movs	r1, r2
    3eea:	0018      	movs	r0, r3
    3eec:	f000 f80b 	bl	3f06 <_ZN11RingBufferNILi64EE9nextIndexEi>
    3ef0:	0002      	movs	r2, r0
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3ef6:	1ad3      	subs	r3, r2, r3
    3ef8:	425a      	negs	r2, r3
    3efa:	4153      	adcs	r3, r2
    3efc:	b2db      	uxtb	r3, r3
}
    3efe:	0018      	movs	r0, r3
    3f00:	46bd      	mov	sp, r7
    3f02:	b002      	add	sp, #8
    3f04:	bd80      	pop	{r7, pc}

00003f06 <_ZN11RingBufferNILi64EE9nextIndexEi>:
int RingBufferN<N>::nextIndex(int index)
    3f06:	b580      	push	{r7, lr}
    3f08:	b082      	sub	sp, #8
    3f0a:	af00      	add	r7, sp, #0
    3f0c:	6078      	str	r0, [r7, #4]
    3f0e:	6039      	str	r1, [r7, #0]
  return (uint32_t)(index + 1) % N;
    3f10:	683b      	ldr	r3, [r7, #0]
    3f12:	3301      	adds	r3, #1
    3f14:	223f      	movs	r2, #63	; 0x3f
    3f16:	4013      	ands	r3, r2
}
    3f18:	0018      	movs	r0, r3
    3f1a:	46bd      	mov	sp, r7
    3f1c:	b002      	add	sp, #8
    3f1e:	bd80      	pop	{r7, pc}

00003f20 <_ZN4UartD1Ev>:
class Uart : public HardwareSerial
    3f20:	b580      	push	{r7, lr}
    3f22:	b082      	sub	sp, #8
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
    3f28:	4a05      	ldr	r2, [pc, #20]	; (3f40 <_ZN4UartD1Ev+0x20>)
    3f2a:	687b      	ldr	r3, [r7, #4]
    3f2c:	601a      	str	r2, [r3, #0]
    3f2e:	687b      	ldr	r3, [r7, #4]
    3f30:	0018      	movs	r0, r3
    3f32:	f7ff fb7d 	bl	3630 <_ZN14HardwareSerialD1Ev>
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	0018      	movs	r0, r3
    3f3a:	46bd      	mov	sp, r7
    3f3c:	b002      	add	sp, #8
    3f3e:	bd80      	pop	{r7, pc}
    3f40:	000133bc 	.word	0x000133bc

00003f44 <_ZN4UartD0Ev>:
    3f44:	b580      	push	{r7, lr}
    3f46:	b082      	sub	sp, #8
    3f48:	af00      	add	r7, sp, #0
    3f4a:	6078      	str	r0, [r7, #4]
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	0018      	movs	r0, r3
    3f50:	f7ff ffe6 	bl	3f20 <_ZN4UartD1Ev>
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	0018      	movs	r0, r3
    3f58:	f009 fbbf 	bl	d6da <_ZdlPv>
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	0018      	movs	r0, r3
    3f60:	46bd      	mov	sp, r7
    3f62:	b002      	add	sp, #8
    3f64:	bd80      	pop	{r7, pc}
	...

00003f68 <__NVIC_EnableIRQ>:
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	b082      	sub	sp, #8
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	0002      	movs	r2, r0
    3f70:	1dfb      	adds	r3, r7, #7
    3f72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3f74:	1dfb      	adds	r3, r7, #7
    3f76:	781b      	ldrb	r3, [r3, #0]
    3f78:	2b7f      	cmp	r3, #127	; 0x7f
    3f7a:	d809      	bhi.n	3f90 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f7c:	4b06      	ldr	r3, [pc, #24]	; (3f98 <__NVIC_EnableIRQ+0x30>)
    3f7e:	1dfa      	adds	r2, r7, #7
    3f80:	7812      	ldrb	r2, [r2, #0]
    3f82:	b252      	sxtb	r2, r2
    3f84:	211f      	movs	r1, #31
    3f86:	400a      	ands	r2, r1
    3f88:	2101      	movs	r1, #1
    3f8a:	4091      	lsls	r1, r2
    3f8c:	000a      	movs	r2, r1
    3f8e:	601a      	str	r2, [r3, #0]
}
    3f90:	46c0      	nop			; (mov r8, r8)
    3f92:	46bd      	mov	sp, r7
    3f94:	b002      	add	sp, #8
    3f96:	bd80      	pop	{r7, pc}
    3f98:	e000e100 	.word	0xe000e100

00003f9c <__NVIC_SetPriority>:
{
    3f9c:	b5b0      	push	{r4, r5, r7, lr}
    3f9e:	b082      	sub	sp, #8
    3fa0:	af00      	add	r7, sp, #0
    3fa2:	0002      	movs	r2, r0
    3fa4:	6039      	str	r1, [r7, #0]
    3fa6:	1dfb      	adds	r3, r7, #7
    3fa8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3faa:	1dfb      	adds	r3, r7, #7
    3fac:	781b      	ldrb	r3, [r3, #0]
    3fae:	2b7f      	cmp	r3, #127	; 0x7f
    3fb0:	d828      	bhi.n	4004 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3fb2:	4c2f      	ldr	r4, [pc, #188]	; (4070 <__NVIC_SetPriority+0xd4>)
    3fb4:	1dfb      	adds	r3, r7, #7
    3fb6:	781b      	ldrb	r3, [r3, #0]
    3fb8:	b25b      	sxtb	r3, r3
    3fba:	089b      	lsrs	r3, r3, #2
    3fbc:	492c      	ldr	r1, [pc, #176]	; (4070 <__NVIC_SetPriority+0xd4>)
    3fbe:	1dfa      	adds	r2, r7, #7
    3fc0:	7812      	ldrb	r2, [r2, #0]
    3fc2:	b252      	sxtb	r2, r2
    3fc4:	0892      	lsrs	r2, r2, #2
    3fc6:	32c0      	adds	r2, #192	; 0xc0
    3fc8:	0092      	lsls	r2, r2, #2
    3fca:	5852      	ldr	r2, [r2, r1]
    3fcc:	1df9      	adds	r1, r7, #7
    3fce:	7809      	ldrb	r1, [r1, #0]
    3fd0:	b249      	sxtb	r1, r1
    3fd2:	2003      	movs	r0, #3
    3fd4:	4001      	ands	r1, r0
    3fd6:	00c9      	lsls	r1, r1, #3
    3fd8:	20ff      	movs	r0, #255	; 0xff
    3fda:	4088      	lsls	r0, r1
    3fdc:	0001      	movs	r1, r0
    3fde:	43c9      	mvns	r1, r1
    3fe0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    3fe2:	683a      	ldr	r2, [r7, #0]
    3fe4:	0192      	lsls	r2, r2, #6
    3fe6:	20ff      	movs	r0, #255	; 0xff
    3fe8:	4010      	ands	r0, r2
    3fea:	1dfa      	adds	r2, r7, #7
    3fec:	7812      	ldrb	r2, [r2, #0]
    3fee:	b252      	sxtb	r2, r2
    3ff0:	2503      	movs	r5, #3
    3ff2:	402a      	ands	r2, r5
    3ff4:	00d2      	lsls	r2, r2, #3
    3ff6:	4090      	lsls	r0, r2
    3ff8:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3ffa:	430a      	orrs	r2, r1
    3ffc:	33c0      	adds	r3, #192	; 0xc0
    3ffe:	009b      	lsls	r3, r3, #2
    4000:	511a      	str	r2, [r3, r4]
}
    4002:	e031      	b.n	4068 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4004:	4c1b      	ldr	r4, [pc, #108]	; (4074 <__NVIC_SetPriority+0xd8>)
    4006:	1dfb      	adds	r3, r7, #7
    4008:	781b      	ldrb	r3, [r3, #0]
    400a:	b25b      	sxtb	r3, r3
    400c:	220f      	movs	r2, #15
    400e:	4013      	ands	r3, r2
    4010:	3b08      	subs	r3, #8
    4012:	0899      	lsrs	r1, r3, #2
    4014:	4a17      	ldr	r2, [pc, #92]	; (4074 <__NVIC_SetPriority+0xd8>)
    4016:	1dfb      	adds	r3, r7, #7
    4018:	781b      	ldrb	r3, [r3, #0]
    401a:	b25b      	sxtb	r3, r3
    401c:	200f      	movs	r0, #15
    401e:	4003      	ands	r3, r0
    4020:	3b08      	subs	r3, #8
    4022:	089b      	lsrs	r3, r3, #2
    4024:	3306      	adds	r3, #6
    4026:	009b      	lsls	r3, r3, #2
    4028:	18d3      	adds	r3, r2, r3
    402a:	3304      	adds	r3, #4
    402c:	681b      	ldr	r3, [r3, #0]
    402e:	1dfa      	adds	r2, r7, #7
    4030:	7812      	ldrb	r2, [r2, #0]
    4032:	b252      	sxtb	r2, r2
    4034:	2003      	movs	r0, #3
    4036:	4002      	ands	r2, r0
    4038:	00d2      	lsls	r2, r2, #3
    403a:	20ff      	movs	r0, #255	; 0xff
    403c:	4090      	lsls	r0, r2
    403e:	0002      	movs	r2, r0
    4040:	43d2      	mvns	r2, r2
    4042:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    4044:	683b      	ldr	r3, [r7, #0]
    4046:	019b      	lsls	r3, r3, #6
    4048:	20ff      	movs	r0, #255	; 0xff
    404a:	4018      	ands	r0, r3
    404c:	1dfb      	adds	r3, r7, #7
    404e:	781b      	ldrb	r3, [r3, #0]
    4050:	b25b      	sxtb	r3, r3
    4052:	2503      	movs	r5, #3
    4054:	402b      	ands	r3, r5
    4056:	00db      	lsls	r3, r3, #3
    4058:	4098      	lsls	r0, r3
    405a:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    405c:	431a      	orrs	r2, r3
    405e:	1d8b      	adds	r3, r1, #6
    4060:	009b      	lsls	r3, r3, #2
    4062:	18e3      	adds	r3, r4, r3
    4064:	3304      	adds	r3, #4
    4066:	601a      	str	r2, [r3, #0]
}
    4068:	46c0      	nop			; (mov r8, r8)
    406a:	46bd      	mov	sp, r7
    406c:	b002      	add	sp, #8
    406e:	bdb0      	pop	{r4, r5, r7, pc}
    4070:	e000e100 	.word	0xe000e100
    4074:	e000ed00 	.word	0xe000ed00

00004078 <_ZN14USBDeviceClassC1Ev>:
	uint16_t wLength;
} USBSetup;

class USBDeviceClass {
public:
	USBDeviceClass() {};
    4078:	b580      	push	{r7, lr}
    407a:	b082      	sub	sp, #8
    407c:	af00      	add	r7, sp, #0
    407e:	6078      	str	r0, [r7, #4]
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	0018      	movs	r0, r3
    4084:	46bd      	mov	sp, r7
    4086:	b002      	add	sp, #8
    4088:	bd80      	pop	{r7, pc}

0000408a <_ZN17UsbDeviceDescBankC1Ev>:
  __IO USB_DEVICE_ADDR_Type      ADDR;        /**< \brief Offset: 0x000 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Adress of Data Buffer */
  __IO USB_DEVICE_PCKSIZE_Type   PCKSIZE;     /**< \brief Offset: 0x004 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Packet Size */
  __IO USB_DEVICE_EXTREG_Type    EXTREG;      /**< \brief Offset: 0x008 (R/W 16) DEVICE_DESC_BANK Endpoint Bank, Extended */
  __IO USB_DEVICE_STATUS_BK_Type STATUS_BK;   /**< \brief Offset: 0x00A (R/W  8) DEVICE_DESC_BANK Enpoint Bank, Status of Bank */
       RoReg8                    Reserved1[0x5];
} UsbDeviceDescBank;
    408a:	b580      	push	{r7, lr}
    408c:	b082      	sub	sp, #8
    408e:	af00      	add	r7, sp, #0
    4090:	6078      	str	r0, [r7, #4]
    4092:	687b      	ldr	r3, [r7, #4]
    4094:	0018      	movs	r0, r3
    4096:	46bd      	mov	sp, r7
    4098:	b002      	add	sp, #8
    409a:	bd80      	pop	{r7, pc}

0000409c <_ZN19UsbDeviceDescriptorC1Ev>:

/** \brief USB_DEVICE Descriptor SRAM registers */
#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
typedef struct { /* USB is Device */
       UsbDeviceDescBank         DeviceDescBank[2]; /**< \brief Offset: 0x000 UsbDeviceDescBank groups */
} UsbDeviceDescriptor;
    409c:	b5b0      	push	{r4, r5, r7, lr}
    409e:	b082      	sub	sp, #8
    40a0:	af00      	add	r7, sp, #0
    40a2:	6078      	str	r0, [r7, #4]
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	2401      	movs	r4, #1
    40a8:	001d      	movs	r5, r3
    40aa:	2c00      	cmp	r4, #0
    40ac:	db05      	blt.n	40ba <_ZN19UsbDeviceDescriptorC1Ev+0x1e>
    40ae:	0028      	movs	r0, r5
    40b0:	f7ff ffeb 	bl	408a <_ZN17UsbDeviceDescBankC1Ev>
    40b4:	3510      	adds	r5, #16
    40b6:	3c01      	subs	r4, #1
    40b8:	e7f7      	b.n	40aa <_ZN19UsbDeviceDescriptorC1Ev+0xe>
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	0018      	movs	r0, r3
    40be:	46bd      	mov	sp, r7
    40c0:	b002      	add	sp, #8
    40c2:	bdb0      	pop	{r4, r5, r7, pc}

000040c4 <_ZN20USBDevice_SAMD21G18xC1Ev>:

typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    40c4:	b5b0      	push	{r4, r5, r7, lr}
    40c6:	b082      	sub	sp, #8
    40c8:	af00      	add	r7, sp, #0
    40ca:	6078      	str	r0, [r7, #4]
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	4a09      	ldr	r2, [pc, #36]	; (40f4 <_ZN20USBDevice_SAMD21G18xC1Ev+0x30>)
    40d0:	601a      	str	r2, [r3, #0]
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	3304      	adds	r3, #4
    40d6:	2407      	movs	r4, #7
    40d8:	001d      	movs	r5, r3
    40da:	2c00      	cmp	r4, #0
    40dc:	db05      	blt.n	40ea <_ZN20USBDevice_SAMD21G18xC1Ev+0x26>
    40de:	0028      	movs	r0, r5
    40e0:	f7ff ffdc 	bl	409c <_ZN19UsbDeviceDescriptorC1Ev>
    40e4:	3520      	adds	r5, #32
    40e6:	3c01      	subs	r4, #1
    40e8:	e7f7      	b.n	40da <_ZN20USBDevice_SAMD21G18xC1Ev+0x16>
		// Empty
	}
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	0018      	movs	r0, r3
    40ee:	46bd      	mov	sp, r7
    40f0:	b002      	add	sp, #8
    40f2:	bdb0      	pop	{r4, r5, r7, pc}
    40f4:	41005000 	.word	0x41005000

000040f8 <_ZN20USBDevice_SAMD21G18x6enableEv>:

	// Reset USB Device
	void reset();

	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    40f8:	b580      	push	{r7, lr}
    40fa:	b082      	sub	sp, #8
    40fc:	af00      	add	r7, sp, #0
    40fe:	6078      	str	r0, [r7, #4]
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	681a      	ldr	r2, [r3, #0]
    4104:	7813      	ldrb	r3, [r2, #0]
    4106:	2102      	movs	r1, #2
    4108:	430b      	orrs	r3, r1
    410a:	7013      	strb	r3, [r2, #0]
    410c:	46c0      	nop			; (mov r8, r8)
    410e:	46bd      	mov	sp, r7
    4110:	b002      	add	sp, #8
    4112:	bd80      	pop	{r7, pc}

00004114 <_ZN20USBDevice_SAMD21G18x16setUSBDeviceModeEv>:
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    4114:	b580      	push	{r7, lr}
    4116:	b082      	sub	sp, #8
    4118:	af00      	add	r7, sp, #0
    411a:	6078      	str	r0, [r7, #4]
    411c:	687b      	ldr	r3, [r7, #4]
    411e:	681a      	ldr	r2, [r3, #0]
    4120:	7813      	ldrb	r3, [r2, #0]
    4122:	217f      	movs	r1, #127	; 0x7f
    4124:	400b      	ands	r3, r1
    4126:	7013      	strb	r3, [r2, #0]
    4128:	46c0      	nop			; (mov r8, r8)
    412a:	46bd      	mov	sp, r7
    412c:	b002      	add	sp, #8
    412e:	bd80      	pop	{r7, pc}

00004130 <_ZN20USBDevice_SAMD21G18x12runInStandbyEv>:
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    4130:	b580      	push	{r7, lr}
    4132:	b082      	sub	sp, #8
    4134:	af00      	add	r7, sp, #0
    4136:	6078      	str	r0, [r7, #4]
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	681a      	ldr	r2, [r3, #0]
    413c:	7813      	ldrb	r3, [r2, #0]
    413e:	2104      	movs	r1, #4
    4140:	430b      	orrs	r3, r1
    4142:	7013      	strb	r3, [r2, #0]
    4144:	46c0      	nop			; (mov r8, r8)
    4146:	46bd      	mov	sp, r7
    4148:	b002      	add	sp, #8
    414a:	bd80      	pop	{r7, pc}

0000414c <_ZN20USBDevice_SAMD21G18x12setFullSpeedEv>:
	inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }
	inline void wakeupHost()     { usb.CTRLB.bit.UPRSM = 1; }

	// USB speed
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    414c:	b580      	push	{r7, lr}
    414e:	b082      	sub	sp, #8
    4150:	af00      	add	r7, sp, #0
    4152:	6078      	str	r0, [r7, #4]
    4154:	687b      	ldr	r3, [r7, #4]
    4156:	681a      	ldr	r2, [r3, #0]
    4158:	8913      	ldrh	r3, [r2, #8]
    415a:	210c      	movs	r1, #12
    415c:	438b      	bics	r3, r1
    415e:	8113      	strh	r3, [r2, #8]
    4160:	46c0      	nop			; (mov r8, r8)
    4162:	46bd      	mov	sp, r7
    4164:	b002      	add	sp, #8
    4166:	bd80      	pop	{r7, pc}

00004168 <_ZN20USBDevice_SAMD21G18x6attachEv>:
	inline void setLowSpeed()        { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;   }
	inline void setHiSpeed()         { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HS_Val;   }
	inline void setHiSpeedTestMode() { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HSTM_Val; }

	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    4168:	b580      	push	{r7, lr}
    416a:	b082      	sub	sp, #8
    416c:	af00      	add	r7, sp, #0
    416e:	6078      	str	r0, [r7, #4]
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	681a      	ldr	r2, [r3, #0]
    4174:	8913      	ldrh	r3, [r2, #8]
    4176:	2101      	movs	r1, #1
    4178:	438b      	bics	r3, r1
    417a:	8113      	strh	r3, [r2, #8]
    417c:	46c0      	nop			; (mov r8, r8)
    417e:	46bd      	mov	sp, r7
    4180:	b002      	add	sp, #8
    4182:	bd80      	pop	{r7, pc}

00004184 <_ZN20USBDevice_SAMD21G18x21isEndOfResetInterruptEv>:
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    4184:	b580      	push	{r7, lr}
    4186:	b082      	sub	sp, #8
    4188:	af00      	add	r7, sp, #0
    418a:	6078      	str	r0, [r7, #4]
    418c:	687b      	ldr	r3, [r7, #4]
    418e:	681b      	ldr	r3, [r3, #0]
    4190:	8b9b      	ldrh	r3, [r3, #28]
    4192:	071b      	lsls	r3, r3, #28
    4194:	0fdb      	lsrs	r3, r3, #31
    4196:	b2db      	uxtb	r3, r3
    4198:	0018      	movs	r0, r3
    419a:	46bd      	mov	sp, r7
    419c:	b002      	add	sp, #8
    419e:	bd80      	pop	{r7, pc}

000041a0 <_ZN20USBDevice_SAMD21G18x22ackEndOfResetInterruptEv>:
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    41a0:	b580      	push	{r7, lr}
    41a2:	b082      	sub	sp, #8
    41a4:	af00      	add	r7, sp, #0
    41a6:	6078      	str	r0, [r7, #4]
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	681b      	ldr	r3, [r3, #0]
    41ac:	2208      	movs	r2, #8
    41ae:	839a      	strh	r2, [r3, #28]
    41b0:	46c0      	nop			; (mov r8, r8)
    41b2:	46bd      	mov	sp, r7
    41b4:	b002      	add	sp, #8
    41b6:	bd80      	pop	{r7, pc}

000041b8 <_ZN20USBDevice_SAMD21G18x25enableEndOfResetInterruptEv>:
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    41b8:	b580      	push	{r7, lr}
    41ba:	b082      	sub	sp, #8
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	687b      	ldr	r3, [r7, #4]
    41c2:	681a      	ldr	r2, [r3, #0]
    41c4:	8b13      	ldrh	r3, [r2, #24]
    41c6:	2108      	movs	r1, #8
    41c8:	430b      	orrs	r3, r1
    41ca:	8313      	strh	r3, [r2, #24]
    41cc:	46c0      	nop			; (mov r8, r8)
    41ce:	46bd      	mov	sp, r7
    41d0:	b002      	add	sp, #8
    41d2:	bd80      	pop	{r7, pc}

000041d4 <_ZN20USBDevice_SAMD21G18x23isStartOfFrameInterruptEv>:
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    41d4:	b580      	push	{r7, lr}
    41d6:	b082      	sub	sp, #8
    41d8:	af00      	add	r7, sp, #0
    41da:	6078      	str	r0, [r7, #4]
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	681b      	ldr	r3, [r3, #0]
    41e0:	8b9b      	ldrh	r3, [r3, #28]
    41e2:	075b      	lsls	r3, r3, #29
    41e4:	0fdb      	lsrs	r3, r3, #31
    41e6:	b2db      	uxtb	r3, r3
    41e8:	0018      	movs	r0, r3
    41ea:	46bd      	mov	sp, r7
    41ec:	b002      	add	sp, #8
    41ee:	bd80      	pop	{r7, pc}

000041f0 <_ZN20USBDevice_SAMD21G18x24ackStartOfFrameInterruptEv>:
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    41f0:	b580      	push	{r7, lr}
    41f2:	b082      	sub	sp, #8
    41f4:	af00      	add	r7, sp, #0
    41f6:	6078      	str	r0, [r7, #4]
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	681b      	ldr	r3, [r3, #0]
    41fc:	2204      	movs	r2, #4
    41fe:	839a      	strh	r2, [r3, #28]
    4200:	46c0      	nop			; (mov r8, r8)
    4202:	46bd      	mov	sp, r7
    4204:	b002      	add	sp, #8
    4206:	bd80      	pop	{r7, pc}

00004208 <_ZN20USBDevice_SAMD21G18x27enableStartOfFrameInterruptEv>:
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    4208:	b580      	push	{r7, lr}
    420a:	b082      	sub	sp, #8
    420c:	af00      	add	r7, sp, #0
    420e:	6078      	str	r0, [r7, #4]
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	681a      	ldr	r2, [r3, #0]
    4214:	8b13      	ldrh	r3, [r2, #24]
    4216:	2104      	movs	r1, #4
    4218:	430b      	orrs	r3, r1
    421a:	8313      	strh	r3, [r2, #24]
    421c:	46c0      	nop			; (mov r8, r8)
    421e:	46bd      	mov	sp, r7
    4220:	b002      	add	sp, #8
    4222:	bd80      	pop	{r7, pc}

00004224 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>:

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    4224:	b590      	push	{r4, r7, lr}
    4226:	b083      	sub	sp, #12
    4228:	af00      	add	r7, sp, #0
    422a:	6078      	str	r0, [r7, #4]
    422c:	0008      	movs	r0, r1
    422e:	0011      	movs	r1, r2
    4230:	1cfb      	adds	r3, r7, #3
    4232:	1c02      	adds	r2, r0, #0
    4234:	701a      	strb	r2, [r3, #0]
    4236:	1cbb      	adds	r3, r7, #2
    4238:	1c0a      	adds	r2, r1, #0
    423a:	701a      	strb	r2, [r3, #0]
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	681a      	ldr	r2, [r3, #0]
    4240:	1cfb      	adds	r3, r7, #3
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	1cb9      	adds	r1, r7, #2
    4246:	7809      	ldrb	r1, [r1, #0]
    4248:	2007      	movs	r0, #7
    424a:	4001      	ands	r1, r0
    424c:	b2c8      	uxtb	r0, r1
    424e:	3308      	adds	r3, #8
    4250:	0159      	lsls	r1, r3, #5
    4252:	5c8b      	ldrb	r3, [r1, r2]
    4254:	2407      	movs	r4, #7
    4256:	4004      	ands	r4, r0
    4258:	2007      	movs	r0, #7
    425a:	4383      	bics	r3, r0
    425c:	1c18      	adds	r0, r3, #0
    425e:	1c23      	adds	r3, r4, #0
    4260:	4303      	orrs	r3, r0
    4262:	548b      	strb	r3, [r1, r2]
    4264:	46c0      	nop			; (mov r8, r8)
    4266:	46bd      	mov	sp, r7
    4268:	b003      	add	sp, #12
    426a:	bd90      	pop	{r4, r7, pc}

0000426c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>:
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    426c:	b590      	push	{r4, r7, lr}
    426e:	b083      	sub	sp, #12
    4270:	af00      	add	r7, sp, #0
    4272:	6078      	str	r0, [r7, #4]
    4274:	0008      	movs	r0, r1
    4276:	0011      	movs	r1, r2
    4278:	1cfb      	adds	r3, r7, #3
    427a:	1c02      	adds	r2, r0, #0
    427c:	701a      	strb	r2, [r3, #0]
    427e:	1cbb      	adds	r3, r7, #2
    4280:	1c0a      	adds	r2, r1, #0
    4282:	701a      	strb	r2, [r3, #0]
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	681a      	ldr	r2, [r3, #0]
    4288:	1cfb      	adds	r3, r7, #3
    428a:	781b      	ldrb	r3, [r3, #0]
    428c:	1cb9      	adds	r1, r7, #2
    428e:	7809      	ldrb	r1, [r1, #0]
    4290:	2007      	movs	r0, #7
    4292:	4001      	ands	r1, r0
    4294:	b2c8      	uxtb	r0, r1
    4296:	3308      	adds	r3, #8
    4298:	0159      	lsls	r1, r3, #5
    429a:	5c8b      	ldrb	r3, [r1, r2]
    429c:	2407      	movs	r4, #7
    429e:	4020      	ands	r0, r4
    42a0:	0104      	lsls	r4, r0, #4
    42a2:	2070      	movs	r0, #112	; 0x70
    42a4:	4383      	bics	r3, r0
    42a6:	1c18      	adds	r0, r3, #0
    42a8:	1c23      	adds	r3, r4, #0
    42aa:	4303      	orrs	r3, r0
    42ac:	548b      	strb	r3, [r1, r2]
    42ae:	46c0      	nop			; (mov r8, r8)
    42b0:	46bd      	mov	sp, r7
    42b2:	b003      	add	sp, #12
    42b4:	bd90      	pop	{r4, r7, pc}

000042b6 <_ZN20USBDevice_SAMD21G18x18epInterruptSummaryEv>:

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    42b6:	b580      	push	{r7, lr}
    42b8:	b082      	sub	sp, #8
    42ba:	af00      	add	r7, sp, #0
    42bc:	6078      	str	r0, [r7, #4]
    42be:	687b      	ldr	r3, [r7, #4]
    42c0:	681b      	ldr	r3, [r3, #0]
    42c2:	8c1b      	ldrh	r3, [r3, #32]
    42c4:	b29b      	uxth	r3, r3
    42c6:	0018      	movs	r0, r3
    42c8:	46bd      	mov	sp, r7
    42ca:	b002      	add	sp, #8
    42cc:	bd80      	pop	{r7, pc}

000042ce <_ZN20USBDevice_SAMD21G18x22epBank0IsSetupReceivedEh>:

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    42ce:	b580      	push	{r7, lr}
    42d0:	b082      	sub	sp, #8
    42d2:	af00      	add	r7, sp, #0
    42d4:	6078      	str	r0, [r7, #4]
    42d6:	000a      	movs	r2, r1
    42d8:	1cfb      	adds	r3, r7, #3
    42da:	701a      	strb	r2, [r3, #0]
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	681a      	ldr	r2, [r3, #0]
    42e0:	1cfb      	adds	r3, r7, #3
    42e2:	781b      	ldrb	r3, [r3, #0]
    42e4:	3308      	adds	r3, #8
    42e6:	015b      	lsls	r3, r3, #5
    42e8:	18d3      	adds	r3, r2, r3
    42ea:	79db      	ldrb	r3, [r3, #7]
    42ec:	06db      	lsls	r3, r3, #27
    42ee:	0fdb      	lsrs	r3, r3, #31
    42f0:	b2db      	uxtb	r3, r3
    42f2:	0018      	movs	r0, r3
    42f4:	46bd      	mov	sp, r7
    42f6:	b002      	add	sp, #8
    42f8:	bd80      	pop	{r7, pc}

000042fa <_ZN20USBDevice_SAMD21G18x16epBank1IsStalledEh>:
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    42fa:	b580      	push	{r7, lr}
    42fc:	b082      	sub	sp, #8
    42fe:	af00      	add	r7, sp, #0
    4300:	6078      	str	r0, [r7, #4]
    4302:	000a      	movs	r2, r1
    4304:	1cfb      	adds	r3, r7, #3
    4306:	701a      	strb	r2, [r3, #0]
    4308:	687b      	ldr	r3, [r7, #4]
    430a:	681a      	ldr	r2, [r3, #0]
    430c:	1cfb      	adds	r3, r7, #3
    430e:	781b      	ldrb	r3, [r3, #0]
    4310:	3308      	adds	r3, #8
    4312:	015b      	lsls	r3, r3, #5
    4314:	18d3      	adds	r3, r2, r3
    4316:	79db      	ldrb	r3, [r3, #7]
    4318:	065b      	lsls	r3, r3, #25
    431a:	0fdb      	lsrs	r3, r3, #31
    431c:	b2db      	uxtb	r3, r3
    431e:	0018      	movs	r0, r3
    4320:	46bd      	mov	sp, r7
    4322:	b002      	add	sp, #8
    4324:	bd80      	pop	{r7, pc}

00004326 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>:
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    4326:	b580      	push	{r7, lr}
    4328:	b082      	sub	sp, #8
    432a:	af00      	add	r7, sp, #0
    432c:	6078      	str	r0, [r7, #4]
    432e:	000a      	movs	r2, r1
    4330:	1cfb      	adds	r3, r7, #3
    4332:	701a      	strb	r2, [r3, #0]
    4334:	687b      	ldr	r3, [r7, #4]
    4336:	681a      	ldr	r2, [r3, #0]
    4338:	1cfb      	adds	r3, r7, #3
    433a:	781b      	ldrb	r3, [r3, #0]
    433c:	3308      	adds	r3, #8
    433e:	015b      	lsls	r3, r3, #5
    4340:	18d3      	adds	r3, r2, r3
    4342:	79db      	ldrb	r3, [r3, #7]
    4344:	07db      	lsls	r3, r3, #31
    4346:	0fdb      	lsrs	r3, r3, #31
    4348:	b2db      	uxtb	r3, r3
    434a:	0018      	movs	r0, r3
    434c:	46bd      	mov	sp, r7
    434e:	b002      	add	sp, #8
    4350:	bd80      	pop	{r7, pc}

00004352 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>:
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    4352:	b580      	push	{r7, lr}
    4354:	b082      	sub	sp, #8
    4356:	af00      	add	r7, sp, #0
    4358:	6078      	str	r0, [r7, #4]
    435a:	000a      	movs	r2, r1
    435c:	1cfb      	adds	r3, r7, #3
    435e:	701a      	strb	r2, [r3, #0]
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	681a      	ldr	r2, [r3, #0]
    4364:	1cfb      	adds	r3, r7, #3
    4366:	781b      	ldrb	r3, [r3, #0]
    4368:	3308      	adds	r3, #8
    436a:	015b      	lsls	r3, r3, #5
    436c:	18d3      	adds	r3, r2, r3
    436e:	79db      	ldrb	r3, [r3, #7]
    4370:	079b      	lsls	r3, r3, #30
    4372:	0fdb      	lsrs	r3, r3, #31
    4374:	b2db      	uxtb	r3, r3
    4376:	0018      	movs	r0, r3
    4378:	46bd      	mov	sp, r7
    437a:	b002      	add	sp, #8
    437c:	bd80      	pop	{r7, pc}

0000437e <_ZN20USBDevice_SAMD21G18x23epBank0AckSetupReceivedEh>:

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    437e:	b580      	push	{r7, lr}
    4380:	b082      	sub	sp, #8
    4382:	af00      	add	r7, sp, #0
    4384:	6078      	str	r0, [r7, #4]
    4386:	000a      	movs	r2, r1
    4388:	1cfb      	adds	r3, r7, #3
    438a:	701a      	strb	r2, [r3, #0]
    438c:	687b      	ldr	r3, [r7, #4]
    438e:	681a      	ldr	r2, [r3, #0]
    4390:	1cfb      	adds	r3, r7, #3
    4392:	781b      	ldrb	r3, [r3, #0]
    4394:	3308      	adds	r3, #8
    4396:	015b      	lsls	r3, r3, #5
    4398:	18d3      	adds	r3, r2, r3
    439a:	3307      	adds	r3, #7
    439c:	2210      	movs	r2, #16
    439e:	701a      	strb	r2, [r3, #0]
    43a0:	46c0      	nop			; (mov r8, r8)
    43a2:	46bd      	mov	sp, r7
    43a4:	b002      	add	sp, #8
    43a6:	bd80      	pop	{r7, pc}

000043a8 <_ZN20USBDevice_SAMD21G18x17epBank1AckStalledEh>:
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    43a8:	b580      	push	{r7, lr}
    43aa:	b082      	sub	sp, #8
    43ac:	af00      	add	r7, sp, #0
    43ae:	6078      	str	r0, [r7, #4]
    43b0:	000a      	movs	r2, r1
    43b2:	1cfb      	adds	r3, r7, #3
    43b4:	701a      	strb	r2, [r3, #0]
    43b6:	687b      	ldr	r3, [r7, #4]
    43b8:	681a      	ldr	r2, [r3, #0]
    43ba:	1cfb      	adds	r3, r7, #3
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	3308      	adds	r3, #8
    43c0:	015b      	lsls	r3, r3, #5
    43c2:	18d3      	adds	r3, r2, r3
    43c4:	3307      	adds	r3, #7
    43c6:	2240      	movs	r2, #64	; 0x40
    43c8:	701a      	strb	r2, [r3, #0]
    43ca:	46c0      	nop			; (mov r8, r8)
    43cc:	46bd      	mov	sp, r7
    43ce:	b002      	add	sp, #8
    43d0:	bd80      	pop	{r7, pc}

000043d2 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>:
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    43d2:	b580      	push	{r7, lr}
    43d4:	b082      	sub	sp, #8
    43d6:	af00      	add	r7, sp, #0
    43d8:	6078      	str	r0, [r7, #4]
    43da:	000a      	movs	r2, r1
    43dc:	1cfb      	adds	r3, r7, #3
    43de:	701a      	strb	r2, [r3, #0]
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	681a      	ldr	r2, [r3, #0]
    43e4:	1cfb      	adds	r3, r7, #3
    43e6:	781b      	ldrb	r3, [r3, #0]
    43e8:	3308      	adds	r3, #8
    43ea:	015b      	lsls	r3, r3, #5
    43ec:	18d3      	adds	r3, r2, r3
    43ee:	3307      	adds	r3, #7
    43f0:	2201      	movs	r2, #1
    43f2:	701a      	strb	r2, [r3, #0]
    43f4:	46c0      	nop			; (mov r8, r8)
    43f6:	46bd      	mov	sp, r7
    43f8:	b002      	add	sp, #8
    43fa:	bd80      	pop	{r7, pc}

000043fc <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>:
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    43fc:	b580      	push	{r7, lr}
    43fe:	b082      	sub	sp, #8
    4400:	af00      	add	r7, sp, #0
    4402:	6078      	str	r0, [r7, #4]
    4404:	000a      	movs	r2, r1
    4406:	1cfb      	adds	r3, r7, #3
    4408:	701a      	strb	r2, [r3, #0]
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	681a      	ldr	r2, [r3, #0]
    440e:	1cfb      	adds	r3, r7, #3
    4410:	781b      	ldrb	r3, [r3, #0]
    4412:	3308      	adds	r3, #8
    4414:	015b      	lsls	r3, r3, #5
    4416:	18d3      	adds	r3, r2, r3
    4418:	3307      	adds	r3, #7
    441a:	2202      	movs	r2, #2
    441c:	701a      	strb	r2, [r3, #0]
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	46bd      	mov	sp, r7
    4422:	b002      	add	sp, #8
    4424:	bd80      	pop	{r7, pc}

00004426 <_ZN20USBDevice_SAMD21G18x26epBank0EnableSetupReceivedEh>:

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    4426:	b580      	push	{r7, lr}
    4428:	b082      	sub	sp, #8
    442a:	af00      	add	r7, sp, #0
    442c:	6078      	str	r0, [r7, #4]
    442e:	000a      	movs	r2, r1
    4430:	1cfb      	adds	r3, r7, #3
    4432:	701a      	strb	r2, [r3, #0]
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	6819      	ldr	r1, [r3, #0]
    4438:	1cfb      	adds	r3, r7, #3
    443a:	781a      	ldrb	r2, [r3, #0]
    443c:	2384      	movs	r3, #132	; 0x84
    443e:	005b      	lsls	r3, r3, #1
    4440:	0152      	lsls	r2, r2, #5
    4442:	188a      	adds	r2, r1, r2
    4444:	18d2      	adds	r2, r2, r3
    4446:	7853      	ldrb	r3, [r2, #1]
    4448:	2110      	movs	r1, #16
    444a:	430b      	orrs	r3, r1
    444c:	7053      	strb	r3, [r2, #1]
    444e:	46c0      	nop			; (mov r8, r8)
    4450:	46bd      	mov	sp, r7
    4452:	b002      	add	sp, #8
    4454:	bd80      	pop	{r7, pc}

00004456 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>:
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    4456:	b580      	push	{r7, lr}
    4458:	b082      	sub	sp, #8
    445a:	af00      	add	r7, sp, #0
    445c:	6078      	str	r0, [r7, #4]
    445e:	000a      	movs	r2, r1
    4460:	1cfb      	adds	r3, r7, #3
    4462:	701a      	strb	r2, [r3, #0]
    4464:	687b      	ldr	r3, [r7, #4]
    4466:	6819      	ldr	r1, [r3, #0]
    4468:	1cfb      	adds	r3, r7, #3
    446a:	781a      	ldrb	r2, [r3, #0]
    446c:	2384      	movs	r3, #132	; 0x84
    446e:	005b      	lsls	r3, r3, #1
    4470:	0152      	lsls	r2, r2, #5
    4472:	188a      	adds	r2, r1, r2
    4474:	18d2      	adds	r2, r2, r3
    4476:	7853      	ldrb	r3, [r2, #1]
    4478:	2101      	movs	r1, #1
    447a:	430b      	orrs	r3, r1
    447c:	7053      	strb	r3, [r2, #1]
    447e:	46c0      	nop			; (mov r8, r8)
    4480:	46bd      	mov	sp, r7
    4482:	b002      	add	sp, #8
    4484:	bd80      	pop	{r7, pc}

00004486 <_ZN20USBDevice_SAMD21G18x29epBank1EnableTransferCompleteEh>:
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    4486:	b580      	push	{r7, lr}
    4488:	b082      	sub	sp, #8
    448a:	af00      	add	r7, sp, #0
    448c:	6078      	str	r0, [r7, #4]
    448e:	000a      	movs	r2, r1
    4490:	1cfb      	adds	r3, r7, #3
    4492:	701a      	strb	r2, [r3, #0]
    4494:	687b      	ldr	r3, [r7, #4]
    4496:	6819      	ldr	r1, [r3, #0]
    4498:	1cfb      	adds	r3, r7, #3
    449a:	781a      	ldrb	r2, [r3, #0]
    449c:	2384      	movs	r3, #132	; 0x84
    449e:	005b      	lsls	r3, r3, #1
    44a0:	0152      	lsls	r2, r2, #5
    44a2:	188a      	adds	r2, r1, r2
    44a4:	18d2      	adds	r2, r2, r3
    44a6:	7853      	ldrb	r3, [r2, #1]
    44a8:	2102      	movs	r1, #2
    44aa:	430b      	orrs	r3, r1
    44ac:	7053      	strb	r3, [r2, #1]
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	46bd      	mov	sp, r7
    44b2:	b002      	add	sp, #8
    44b4:	bd80      	pop	{r7, pc}

000044b6 <_ZN20USBDevice_SAMD21G18x21epBank1DisableStalledEh>:

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    44b6:	b580      	push	{r7, lr}
    44b8:	b082      	sub	sp, #8
    44ba:	af00      	add	r7, sp, #0
    44bc:	6078      	str	r0, [r7, #4]
    44be:	000a      	movs	r2, r1
    44c0:	1cfb      	adds	r3, r7, #3
    44c2:	701a      	strb	r2, [r3, #0]
    44c4:	687b      	ldr	r3, [r7, #4]
    44c6:	6819      	ldr	r1, [r3, #0]
    44c8:	1cfb      	adds	r3, r7, #3
    44ca:	781a      	ldrb	r2, [r3, #0]
    44cc:	2384      	movs	r3, #132	; 0x84
    44ce:	005b      	lsls	r3, r3, #1
    44d0:	0152      	lsls	r2, r2, #5
    44d2:	188a      	adds	r2, r1, r2
    44d4:	18d2      	adds	r2, r2, r3
    44d6:	7813      	ldrb	r3, [r2, #0]
    44d8:	2140      	movs	r1, #64	; 0x40
    44da:	430b      	orrs	r3, r1
    44dc:	7013      	strb	r3, [r2, #0]
    44de:	46c0      	nop			; (mov r8, r8)
    44e0:	46bd      	mov	sp, r7
    44e2:	b002      	add	sp, #8
    44e4:	bd80      	pop	{r7, pc}

000044e6 <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>:
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    44e6:	b580      	push	{r7, lr}
    44e8:	b082      	sub	sp, #8
    44ea:	af00      	add	r7, sp, #0
    44ec:	6078      	str	r0, [r7, #4]
    44ee:	000a      	movs	r2, r1
    44f0:	1cfb      	adds	r3, r7, #3
    44f2:	701a      	strb	r2, [r3, #0]
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	6819      	ldr	r1, [r3, #0]
    44f8:	1cfb      	adds	r3, r7, #3
    44fa:	781a      	ldrb	r2, [r3, #0]
    44fc:	2384      	movs	r3, #132	; 0x84
    44fe:	005b      	lsls	r3, r3, #1
    4500:	0152      	lsls	r2, r2, #5
    4502:	188a      	adds	r2, r1, r2
    4504:	18d2      	adds	r2, r2, r3
    4506:	7813      	ldrb	r3, [r2, #0]
    4508:	2101      	movs	r1, #1
    450a:	430b      	orrs	r3, r1
    450c:	7013      	strb	r3, [r2, #0]
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	46bd      	mov	sp, r7
    4512:	b002      	add	sp, #8
    4514:	bd80      	pop	{r7, pc}

00004516 <_ZN20USBDevice_SAMD21G18x14epBank0IsReadyEh>:
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    4516:	b580      	push	{r7, lr}
    4518:	b082      	sub	sp, #8
    451a:	af00      	add	r7, sp, #0
    451c:	6078      	str	r0, [r7, #4]
    451e:	000a      	movs	r2, r1
    4520:	1cfb      	adds	r3, r7, #3
    4522:	701a      	strb	r2, [r3, #0]
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	681a      	ldr	r2, [r3, #0]
    4528:	1cfb      	adds	r3, r7, #3
    452a:	781b      	ldrb	r3, [r3, #0]
    452c:	3308      	adds	r3, #8
    452e:	015b      	lsls	r3, r3, #5
    4530:	18d3      	adds	r3, r2, r3
    4532:	799b      	ldrb	r3, [r3, #6]
    4534:	065b      	lsls	r3, r3, #25
    4536:	0fdb      	lsrs	r3, r3, #31
    4538:	b2db      	uxtb	r3, r3
    453a:	0018      	movs	r0, r3
    453c:	46bd      	mov	sp, r7
    453e:	b002      	add	sp, #8
    4540:	bd80      	pop	{r7, pc}

00004542 <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>:
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    4542:	b580      	push	{r7, lr}
    4544:	b082      	sub	sp, #8
    4546:	af00      	add	r7, sp, #0
    4548:	6078      	str	r0, [r7, #4]
    454a:	000a      	movs	r2, r1
    454c:	1cfb      	adds	r3, r7, #3
    454e:	701a      	strb	r2, [r3, #0]
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	681a      	ldr	r2, [r3, #0]
    4554:	1cfb      	adds	r3, r7, #3
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	3308      	adds	r3, #8
    455a:	015b      	lsls	r3, r3, #5
    455c:	18d3      	adds	r3, r2, r3
    455e:	799b      	ldrb	r3, [r3, #6]
    4560:	061b      	lsls	r3, r3, #24
    4562:	0fdb      	lsrs	r3, r3, #31
    4564:	b2db      	uxtb	r3, r3
    4566:	0018      	movs	r0, r3
    4568:	46bd      	mov	sp, r7
    456a:	b002      	add	sp, #8
    456c:	bd80      	pop	{r7, pc}

0000456e <_ZN20USBDevice_SAMD21G18x15epBank0SetReadyEh>:
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    456e:	b580      	push	{r7, lr}
    4570:	b082      	sub	sp, #8
    4572:	af00      	add	r7, sp, #0
    4574:	6078      	str	r0, [r7, #4]
    4576:	000a      	movs	r2, r1
    4578:	1cfb      	adds	r3, r7, #3
    457a:	701a      	strb	r2, [r3, #0]
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	681a      	ldr	r2, [r3, #0]
    4580:	1cfb      	adds	r3, r7, #3
    4582:	781b      	ldrb	r3, [r3, #0]
    4584:	3308      	adds	r3, #8
    4586:	015b      	lsls	r3, r3, #5
    4588:	18d2      	adds	r2, r2, r3
    458a:	7953      	ldrb	r3, [r2, #5]
    458c:	2140      	movs	r1, #64	; 0x40
    458e:	430b      	orrs	r3, r1
    4590:	7153      	strb	r3, [r2, #5]
    4592:	46c0      	nop			; (mov r8, r8)
    4594:	46bd      	mov	sp, r7
    4596:	b002      	add	sp, #8
    4598:	bd80      	pop	{r7, pc}

0000459a <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>:
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    459a:	b580      	push	{r7, lr}
    459c:	b082      	sub	sp, #8
    459e:	af00      	add	r7, sp, #0
    45a0:	6078      	str	r0, [r7, #4]
    45a2:	000a      	movs	r2, r1
    45a4:	1cfb      	adds	r3, r7, #3
    45a6:	701a      	strb	r2, [r3, #0]
    45a8:	687b      	ldr	r3, [r7, #4]
    45aa:	681a      	ldr	r2, [r3, #0]
    45ac:	1cfb      	adds	r3, r7, #3
    45ae:	781b      	ldrb	r3, [r3, #0]
    45b0:	3308      	adds	r3, #8
    45b2:	015b      	lsls	r3, r3, #5
    45b4:	18d2      	adds	r2, r2, r3
    45b6:	7953      	ldrb	r3, [r2, #5]
    45b8:	2180      	movs	r1, #128	; 0x80
    45ba:	4249      	negs	r1, r1
    45bc:	430b      	orrs	r3, r1
    45be:	7153      	strb	r3, [r2, #5]
    45c0:	46c0      	nop			; (mov r8, r8)
    45c2:	46bd      	mov	sp, r7
    45c4:	b002      	add	sp, #8
    45c6:	bd80      	pop	{r7, pc}

000045c8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>:
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    45c8:	b580      	push	{r7, lr}
    45ca:	b082      	sub	sp, #8
    45cc:	af00      	add	r7, sp, #0
    45ce:	6078      	str	r0, [r7, #4]
    45d0:	000a      	movs	r2, r1
    45d2:	1cfb      	adds	r3, r7, #3
    45d4:	701a      	strb	r2, [r3, #0]
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	681a      	ldr	r2, [r3, #0]
    45da:	1cfb      	adds	r3, r7, #3
    45dc:	781b      	ldrb	r3, [r3, #0]
    45de:	3308      	adds	r3, #8
    45e0:	015b      	lsls	r3, r3, #5
    45e2:	18d2      	adds	r2, r2, r3
    45e4:	7913      	ldrb	r3, [r2, #4]
    45e6:	2140      	movs	r1, #64	; 0x40
    45e8:	430b      	orrs	r3, r1
    45ea:	7113      	strb	r3, [r2, #4]
    45ec:	46c0      	nop			; (mov r8, r8)
    45ee:	46bd      	mov	sp, r7
    45f0:	b002      	add	sp, #8
    45f2:	bd80      	pop	{r7, pc}

000045f4 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>:
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    45f4:	b580      	push	{r7, lr}
    45f6:	b082      	sub	sp, #8
    45f8:	af00      	add	r7, sp, #0
    45fa:	6078      	str	r0, [r7, #4]
    45fc:	000a      	movs	r2, r1
    45fe:	1cfb      	adds	r3, r7, #3
    4600:	701a      	strb	r2, [r3, #0]
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	681a      	ldr	r2, [r3, #0]
    4606:	1cfb      	adds	r3, r7, #3
    4608:	781b      	ldrb	r3, [r3, #0]
    460a:	3308      	adds	r3, #8
    460c:	015b      	lsls	r3, r3, #5
    460e:	18d2      	adds	r2, r2, r3
    4610:	7913      	ldrb	r3, [r2, #4]
    4612:	2180      	movs	r1, #128	; 0x80
    4614:	4249      	negs	r1, r1
    4616:	430b      	orrs	r3, r1
    4618:	7113      	strb	r3, [r2, #4]
    461a:	46c0      	nop			; (mov r8, r8)
    461c:	46bd      	mov	sp, r7
    461e:	b002      	add	sp, #8
    4620:	bd80      	pop	{r7, pc}

00004622 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>:
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    4622:	b580      	push	{r7, lr}
    4624:	b082      	sub	sp, #8
    4626:	af00      	add	r7, sp, #0
    4628:	6078      	str	r0, [r7, #4]
    462a:	000a      	movs	r2, r1
    462c:	1cfb      	adds	r3, r7, #3
    462e:	701a      	strb	r2, [r3, #0]
    4630:	1cfb      	adds	r3, r7, #3
    4632:	781b      	ldrb	r3, [r3, #0]
    4634:	687a      	ldr	r2, [r7, #4]
    4636:	015b      	lsls	r3, r3, #5
    4638:	18d3      	adds	r3, r2, r3
    463a:	689b      	ldr	r3, [r3, #8]
    463c:	049b      	lsls	r3, r3, #18
    463e:	0c9b      	lsrs	r3, r3, #18
    4640:	b29b      	uxth	r3, r3
    4642:	0018      	movs	r0, r3
    4644:	46bd      	mov	sp, r7
    4646:	b002      	add	sp, #8
    4648:	bd80      	pop	{r7, pc}

0000464a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>:
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    464a:	b580      	push	{r7, lr}
    464c:	b082      	sub	sp, #8
    464e:	af00      	add	r7, sp, #0
    4650:	6078      	str	r0, [r7, #4]
    4652:	0008      	movs	r0, r1
    4654:	0011      	movs	r1, r2
    4656:	1cfb      	adds	r3, r7, #3
    4658:	1c02      	adds	r2, r0, #0
    465a:	701a      	strb	r2, [r3, #0]
    465c:	003b      	movs	r3, r7
    465e:	1c0a      	adds	r2, r1, #0
    4660:	801a      	strh	r2, [r3, #0]
    4662:	1cfb      	adds	r3, r7, #3
    4664:	781b      	ldrb	r3, [r3, #0]
    4666:	003a      	movs	r2, r7
    4668:	8812      	ldrh	r2, [r2, #0]
    466a:	0492      	lsls	r2, r2, #18
    466c:	0c92      	lsrs	r2, r2, #18
    466e:	b291      	uxth	r1, r2
    4670:	687a      	ldr	r2, [r7, #4]
    4672:	015b      	lsls	r3, r3, #5
    4674:	18d3      	adds	r3, r2, r3
    4676:	689a      	ldr	r2, [r3, #8]
    4678:	0489      	lsls	r1, r1, #18
    467a:	0c89      	lsrs	r1, r1, #18
    467c:	0b92      	lsrs	r2, r2, #14
    467e:	0392      	lsls	r2, r2, #14
    4680:	430a      	orrs	r2, r1
    4682:	609a      	str	r2, [r3, #8]
    4684:	46c0      	nop			; (mov r8, r8)
    4686:	46bd      	mov	sp, r7
    4688:	b002      	add	sp, #8
    468a:	bd80      	pop	{r7, pc}

0000468c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>:
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    468c:	b580      	push	{r7, lr}
    468e:	b082      	sub	sp, #8
    4690:	af00      	add	r7, sp, #0
    4692:	6078      	str	r0, [r7, #4]
    4694:	0008      	movs	r0, r1
    4696:	0011      	movs	r1, r2
    4698:	1cfb      	adds	r3, r7, #3
    469a:	1c02      	adds	r2, r0, #0
    469c:	701a      	strb	r2, [r3, #0]
    469e:	003b      	movs	r3, r7
    46a0:	1c0a      	adds	r2, r1, #0
    46a2:	801a      	strh	r2, [r3, #0]
    46a4:	1cfb      	adds	r3, r7, #3
    46a6:	781b      	ldrb	r3, [r3, #0]
    46a8:	003a      	movs	r2, r7
    46aa:	8812      	ldrh	r2, [r2, #0]
    46ac:	0492      	lsls	r2, r2, #18
    46ae:	0c92      	lsrs	r2, r2, #18
    46b0:	b291      	uxth	r1, r2
    46b2:	687a      	ldr	r2, [r7, #4]
    46b4:	015b      	lsls	r3, r3, #5
    46b6:	18d3      	adds	r3, r2, r3
    46b8:	3310      	adds	r3, #16
    46ba:	689a      	ldr	r2, [r3, #8]
    46bc:	0489      	lsls	r1, r1, #18
    46be:	0c89      	lsrs	r1, r1, #18
    46c0:	0b92      	lsrs	r2, r2, #14
    46c2:	0392      	lsls	r2, r2, #14
    46c4:	430a      	orrs	r2, r1
    46c6:	609a      	str	r2, [r3, #8]
    46c8:	46c0      	nop			; (mov r8, r8)
    46ca:	46bd      	mov	sp, r7
    46cc:	b002      	add	sp, #8
    46ce:	bd80      	pop	{r7, pc}

000046d0 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>:
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    46d0:	b580      	push	{r7, lr}
    46d2:	b082      	sub	sp, #8
    46d4:	af00      	add	r7, sp, #0
    46d6:	6078      	str	r0, [r7, #4]
    46d8:	0008      	movs	r0, r1
    46da:	0011      	movs	r1, r2
    46dc:	1cfb      	adds	r3, r7, #3
    46de:	1c02      	adds	r2, r0, #0
    46e0:	701a      	strb	r2, [r3, #0]
    46e2:	003b      	movs	r3, r7
    46e4:	1c0a      	adds	r2, r1, #0
    46e6:	801a      	strh	r2, [r3, #0]
    46e8:	1cfb      	adds	r3, r7, #3
    46ea:	781b      	ldrb	r3, [r3, #0]
    46ec:	003a      	movs	r2, r7
    46ee:	8812      	ldrh	r2, [r2, #0]
    46f0:	0492      	lsls	r2, r2, #18
    46f2:	0c92      	lsrs	r2, r2, #18
    46f4:	b291      	uxth	r1, r2
    46f6:	687a      	ldr	r2, [r7, #4]
    46f8:	015b      	lsls	r3, r3, #5
    46fa:	18d3      	adds	r3, r2, r3
    46fc:	689a      	ldr	r2, [r3, #8]
    46fe:	0489      	lsls	r1, r1, #18
    4700:	0c89      	lsrs	r1, r1, #18
    4702:	0389      	lsls	r1, r1, #14
    4704:	4803      	ldr	r0, [pc, #12]	; (4714 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht+0x44>)
    4706:	4002      	ands	r2, r0
    4708:	430a      	orrs	r2, r1
    470a:	609a      	str	r2, [r3, #8]
    470c:	46c0      	nop			; (mov r8, r8)
    470e:	46bd      	mov	sp, r7
    4710:	b002      	add	sp, #8
    4712:	bd80      	pop	{r7, pc}
    4714:	f0003fff 	.word	0xf0003fff

00004718 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht>:
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    4718:	b580      	push	{r7, lr}
    471a:	b082      	sub	sp, #8
    471c:	af00      	add	r7, sp, #0
    471e:	6078      	str	r0, [r7, #4]
    4720:	0008      	movs	r0, r1
    4722:	0011      	movs	r1, r2
    4724:	1cfb      	adds	r3, r7, #3
    4726:	1c02      	adds	r2, r0, #0
    4728:	701a      	strb	r2, [r3, #0]
    472a:	003b      	movs	r3, r7
    472c:	1c0a      	adds	r2, r1, #0
    472e:	801a      	strh	r2, [r3, #0]
    4730:	1cfb      	adds	r3, r7, #3
    4732:	781b      	ldrb	r3, [r3, #0]
    4734:	003a      	movs	r2, r7
    4736:	8812      	ldrh	r2, [r2, #0]
    4738:	0492      	lsls	r2, r2, #18
    473a:	0c92      	lsrs	r2, r2, #18
    473c:	b291      	uxth	r1, r2
    473e:	687a      	ldr	r2, [r7, #4]
    4740:	015b      	lsls	r3, r3, #5
    4742:	18d3      	adds	r3, r2, r3
    4744:	3310      	adds	r3, #16
    4746:	689a      	ldr	r2, [r3, #8]
    4748:	0489      	lsls	r1, r1, #18
    474a:	0c89      	lsrs	r1, r1, #18
    474c:	0389      	lsls	r1, r1, #14
    474e:	4804      	ldr	r0, [pc, #16]	; (4760 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht+0x48>)
    4750:	4002      	ands	r2, r0
    4752:	430a      	orrs	r2, r1
    4754:	609a      	str	r2, [r3, #8]
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	46bd      	mov	sp, r7
    475a:	b002      	add	sp, #8
    475c:	bd80      	pop	{r7, pc}
    475e:	46c0      	nop			; (mov r8, r8)
    4760:	f0003fff 	.word	0xf0003fff

00004764 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>:

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    4764:	b580      	push	{r7, lr}
    4766:	b084      	sub	sp, #16
    4768:	af00      	add	r7, sp, #0
    476a:	60f8      	str	r0, [r7, #12]
    476c:	607a      	str	r2, [r7, #4]
    476e:	230b      	movs	r3, #11
    4770:	18fb      	adds	r3, r7, r3
    4772:	1c0a      	adds	r2, r1, #0
    4774:	701a      	strb	r2, [r3, #0]
    4776:	230b      	movs	r3, #11
    4778:	18fb      	adds	r3, r7, r3
    477a:	781b      	ldrb	r3, [r3, #0]
    477c:	687a      	ldr	r2, [r7, #4]
    477e:	68f9      	ldr	r1, [r7, #12]
    4780:	015b      	lsls	r3, r3, #5
    4782:	18cb      	adds	r3, r1, r3
    4784:	3304      	adds	r3, #4
    4786:	601a      	str	r2, [r3, #0]
    4788:	46c0      	nop			; (mov r8, r8)
    478a:	46bd      	mov	sp, r7
    478c:	b004      	add	sp, #16
    478e:	bd80      	pop	{r7, pc}

00004790 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>:
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    4790:	b580      	push	{r7, lr}
    4792:	b084      	sub	sp, #16
    4794:	af00      	add	r7, sp, #0
    4796:	60f8      	str	r0, [r7, #12]
    4798:	607a      	str	r2, [r7, #4]
    479a:	230b      	movs	r3, #11
    479c:	18fb      	adds	r3, r7, r3
    479e:	1c0a      	adds	r2, r1, #0
    47a0:	701a      	strb	r2, [r3, #0]
    47a2:	230b      	movs	r3, #11
    47a4:	18fb      	adds	r3, r7, r3
    47a6:	781b      	ldrb	r3, [r3, #0]
    47a8:	687a      	ldr	r2, [r7, #4]
    47aa:	68f9      	ldr	r1, [r7, #12]
    47ac:	015b      	lsls	r3, r3, #5
    47ae:	18cb      	adds	r3, r1, r3
    47b0:	3314      	adds	r3, #20
    47b2:	601a      	str	r2, [r3, #0]
    47b4:	46c0      	nop			; (mov r8, r8)
    47b6:	46bd      	mov	sp, r7
    47b8:	b004      	add	sp, #16
    47ba:	bd80      	pop	{r7, pc}

000047bc <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>:
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    47bc:	b590      	push	{r4, r7, lr}
    47be:	b083      	sub	sp, #12
    47c0:	af00      	add	r7, sp, #0
    47c2:	6078      	str	r0, [r7, #4]
    47c4:	0008      	movs	r0, r1
    47c6:	0011      	movs	r1, r2
    47c8:	1cfb      	adds	r3, r7, #3
    47ca:	1c02      	adds	r2, r0, #0
    47cc:	701a      	strb	r2, [r3, #0]
    47ce:	003b      	movs	r3, r7
    47d0:	1c0a      	adds	r2, r1, #0
    47d2:	801a      	strh	r2, [r3, #0]
    47d4:	1cfb      	adds	r3, r7, #3
    47d6:	781c      	ldrb	r4, [r3, #0]
    47d8:	003b      	movs	r3, r7
    47da:	881a      	ldrh	r2, [r3, #0]
    47dc:	687b      	ldr	r3, [r7, #4]
    47de:	0011      	movs	r1, r2
    47e0:	0018      	movs	r0, r3
    47e2:	f000 f843 	bl	486c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>
    47e6:	0003      	movs	r3, r0
    47e8:	1c1a      	adds	r2, r3, #0
    47ea:	2307      	movs	r3, #7
    47ec:	4013      	ands	r3, r2
    47ee:	b2d9      	uxtb	r1, r3
    47f0:	687a      	ldr	r2, [r7, #4]
    47f2:	0163      	lsls	r3, r4, #5
    47f4:	18d3      	adds	r3, r2, r3
    47f6:	689a      	ldr	r2, [r3, #8]
    47f8:	2007      	movs	r0, #7
    47fa:	4001      	ands	r1, r0
    47fc:	0709      	lsls	r1, r1, #28
    47fe:	4804      	ldr	r0, [pc, #16]	; (4810 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht+0x54>)
    4800:	4002      	ands	r2, r0
    4802:	430a      	orrs	r2, r1
    4804:	609a      	str	r2, [r3, #8]
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	46bd      	mov	sp, r7
    480a:	b003      	add	sp, #12
    480c:	bd90      	pop	{r4, r7, pc}
    480e:	46c0      	nop			; (mov r8, r8)
    4810:	8fffffff 	.word	0x8fffffff

00004814 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>:
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    4814:	b590      	push	{r4, r7, lr}
    4816:	b083      	sub	sp, #12
    4818:	af00      	add	r7, sp, #0
    481a:	6078      	str	r0, [r7, #4]
    481c:	0008      	movs	r0, r1
    481e:	0011      	movs	r1, r2
    4820:	1cfb      	adds	r3, r7, #3
    4822:	1c02      	adds	r2, r0, #0
    4824:	701a      	strb	r2, [r3, #0]
    4826:	003b      	movs	r3, r7
    4828:	1c0a      	adds	r2, r1, #0
    482a:	801a      	strh	r2, [r3, #0]
    482c:	1cfb      	adds	r3, r7, #3
    482e:	781c      	ldrb	r4, [r3, #0]
    4830:	003b      	movs	r3, r7
    4832:	881a      	ldrh	r2, [r3, #0]
    4834:	687b      	ldr	r3, [r7, #4]
    4836:	0011      	movs	r1, r2
    4838:	0018      	movs	r0, r3
    483a:	f000 f817 	bl	486c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>
    483e:	0003      	movs	r3, r0
    4840:	1c1a      	adds	r2, r3, #0
    4842:	2307      	movs	r3, #7
    4844:	4013      	ands	r3, r2
    4846:	b2d9      	uxtb	r1, r3
    4848:	687a      	ldr	r2, [r7, #4]
    484a:	0163      	lsls	r3, r4, #5
    484c:	18d3      	adds	r3, r2, r3
    484e:	3310      	adds	r3, #16
    4850:	689a      	ldr	r2, [r3, #8]
    4852:	2007      	movs	r0, #7
    4854:	4001      	ands	r1, r0
    4856:	0709      	lsls	r1, r1, #28
    4858:	4803      	ldr	r0, [pc, #12]	; (4868 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht+0x54>)
    485a:	4002      	ands	r2, r0
    485c:	430a      	orrs	r2, r1
    485e:	609a      	str	r2, [r3, #8]
    4860:	46c0      	nop			; (mov r8, r8)
    4862:	46bd      	mov	sp, r7
    4864:	b003      	add	sp, #12
    4866:	bd90      	pop	{r4, r7, pc}
    4868:	8fffffff 	.word	0x8fffffff

0000486c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>:
	inline uint8_t EP_PCKSIZE_SIZE(uint16_t size) {
    486c:	b580      	push	{r7, lr}
    486e:	b082      	sub	sp, #8
    4870:	af00      	add	r7, sp, #0
    4872:	6078      	str	r0, [r7, #4]
    4874:	000a      	movs	r2, r1
    4876:	1cbb      	adds	r3, r7, #2
    4878:	801a      	strh	r2, [r3, #0]
		switch (size) {
    487a:	1cbb      	adds	r3, r7, #2
    487c:	881b      	ldrh	r3, [r3, #0]
    487e:	2b40      	cmp	r3, #64	; 0x40
    4880:	d020      	beq.n	48c4 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x58>
    4882:	dc06      	bgt.n	4892 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x26>
    4884:	2b10      	cmp	r3, #16
    4886:	d019      	beq.n	48bc <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x50>
    4888:	2b20      	cmp	r3, #32
    488a:	d019      	beq.n	48c0 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x54>
    488c:	2b08      	cmp	r3, #8
    488e:	d013      	beq.n	48b8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x4c>
    4890:	e022      	b.n	48d8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
    4892:	2280      	movs	r2, #128	; 0x80
    4894:	0052      	lsls	r2, r2, #1
    4896:	4293      	cmp	r3, r2
    4898:	d018      	beq.n	48cc <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x60>
    489a:	2280      	movs	r2, #128	; 0x80
    489c:	0052      	lsls	r2, r2, #1
    489e:	4293      	cmp	r3, r2
    48a0:	dc02      	bgt.n	48a8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x3c>
    48a2:	2b80      	cmp	r3, #128	; 0x80
    48a4:	d010      	beq.n	48c8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x5c>
    48a6:	e017      	b.n	48d8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
    48a8:	2280      	movs	r2, #128	; 0x80
    48aa:	0092      	lsls	r2, r2, #2
    48ac:	4293      	cmp	r3, r2
    48ae:	d00f      	beq.n	48d0 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x64>
    48b0:	4a0c      	ldr	r2, [pc, #48]	; (48e4 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x78>)
    48b2:	4293      	cmp	r3, r2
    48b4:	d00e      	beq.n	48d4 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x68>
    48b6:	e00f      	b.n	48d8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
		case 8:    return 0;
    48b8:	2300      	movs	r3, #0
    48ba:	e00e      	b.n	48da <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 16:   return 1;
    48bc:	2301      	movs	r3, #1
    48be:	e00c      	b.n	48da <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 32:   return 2;
    48c0:	2302      	movs	r3, #2
    48c2:	e00a      	b.n	48da <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 64:   return 3;
    48c4:	2303      	movs	r3, #3
    48c6:	e008      	b.n	48da <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 128:  return 4;
    48c8:	2304      	movs	r3, #4
    48ca:	e006      	b.n	48da <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 256:  return 5;
    48cc:	2305      	movs	r3, #5
    48ce:	e004      	b.n	48da <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 512:  return 6;
    48d0:	2306      	movs	r3, #6
    48d2:	e002      	b.n	48da <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 1023: return 7;
    48d4:	2307      	movs	r3, #7
    48d6:	e000      	b.n	48da <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		default:   return 0;
    48d8:	2300      	movs	r3, #0
		}
	}
    48da:	0018      	movs	r0, r3
    48dc:	46bd      	mov	sp, r7
    48de:	b002      	add	sp, #8
    48e0:	bd80      	pop	{r7, pc}
    48e2:	46c0      	nop			; (mov r8, r8)
    48e4:	000003ff 	.word	0x000003ff

000048e8 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    48e8:	b580      	push	{r7, lr}
    48ea:	b082      	sub	sp, #8
    48ec:	af00      	add	r7, sp, #0
    48ee:	6078      	str	r0, [r7, #4]
	usb.CTRLA.bit.SWRST = 1;
    48f0:	687b      	ldr	r3, [r7, #4]
    48f2:	681a      	ldr	r2, [r3, #0]
    48f4:	7813      	ldrb	r3, [r2, #0]
    48f6:	2101      	movs	r1, #1
    48f8:	430b      	orrs	r3, r1
    48fa:	7013      	strb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	1d18      	adds	r0, r3, #4
    4900:	2380      	movs	r3, #128	; 0x80
    4902:	005b      	lsls	r3, r3, #1
    4904:	001a      	movs	r2, r3
    4906:	2100      	movs	r1, #0
    4908:	f00b ff8c 	bl	10824 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	789b      	ldrb	r3, [r3, #2]
    4912:	07db      	lsls	r3, r3, #31
    4914:	0fdb      	lsrs	r3, r3, #31
    4916:	b2db      	uxtb	r3, r3
    4918:	2b00      	cmp	r3, #0
    491a:	d000      	beq.n	491e <_ZN20USBDevice_SAMD21G18x5resetEv+0x36>
    491c:	e7f6      	b.n	490c <_ZN20USBDevice_SAMD21G18x5resetEv+0x24>
	usb.DESCADD.reg = (uint32_t)(&EP);
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	681b      	ldr	r3, [r3, #0]
    4922:	687a      	ldr	r2, [r7, #4]
    4924:	3204      	adds	r2, #4
    4926:	625a      	str	r2, [r3, #36]	; 0x24
}
    4928:	46c0      	nop			; (mov r8, r8)
    492a:	46bd      	mov	sp, r7
    492c:	b002      	add	sp, #8
    492e:	bd80      	pop	{r7, pc}

00004930 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:

void USBDevice_SAMD21G18x::calibrate() {
    4930:	b580      	push	{r7, lr}
    4932:	b088      	sub	sp, #32
    4934:	af00      	add	r7, sp, #0
    4936:	6078      	str	r0, [r7, #4]
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
    4938:	4b31      	ldr	r3, [pc, #196]	; (4a00 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    493a:	613b      	str	r3, [r7, #16]
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
    493c:	4b30      	ldr	r3, [pc, #192]	; (4a00 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    493e:	60fb      	str	r3, [r7, #12]
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;
    4940:	4b2f      	ldr	r3, [pc, #188]	; (4a00 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    4942:	60bb      	str	r3, [r7, #8]

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    4944:	693b      	ldr	r3, [r7, #16]
    4946:	681b      	ldr	r3, [r3, #0]
    4948:	0b5b      	lsrs	r3, r3, #13
    494a:	221f      	movs	r2, #31
    494c:	4013      	ands	r3, r2
    494e:	61fb      	str	r3, [r7, #28]
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    4950:	68fb      	ldr	r3, [r7, #12]
    4952:	681b      	ldr	r3, [r3, #0]
    4954:	0c9b      	lsrs	r3, r3, #18
    4956:	221f      	movs	r2, #31
    4958:	4013      	ands	r3, r2
    495a:	61bb      	str	r3, [r7, #24]
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    495c:	68bb      	ldr	r3, [r7, #8]
    495e:	681b      	ldr	r3, [r3, #0]
    4960:	0ddb      	lsrs	r3, r3, #23
    4962:	2207      	movs	r2, #7
    4964:	4013      	ands	r3, r2
    4966:	617b      	str	r3, [r7, #20]

	if (pad_transn == 0x1F)  // maximum value (31)
    4968:	69fb      	ldr	r3, [r7, #28]
    496a:	2b1f      	cmp	r3, #31
    496c:	d101      	bne.n	4972 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x42>
		pad_transn = 5;
    496e:	2305      	movs	r3, #5
    4970:	61fb      	str	r3, [r7, #28]
	if (pad_transp == 0x1F)  // maximum value (31)
    4972:	69bb      	ldr	r3, [r7, #24]
    4974:	2b1f      	cmp	r3, #31
    4976:	d101      	bne.n	497c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x4c>
		pad_transp = 29;
    4978:	231d      	movs	r3, #29
    497a:	61bb      	str	r3, [r7, #24]
	if (pad_trim == 0x7)     // maximum value (7)
    497c:	697b      	ldr	r3, [r7, #20]
    497e:	2b07      	cmp	r3, #7
    4980:	d101      	bne.n	4986 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x56>
		pad_trim = 3;
    4982:	2303      	movs	r3, #3
    4984:	617b      	str	r3, [r7, #20]

	usb.PADCAL.bit.TRANSN = pad_transn;
    4986:	687b      	ldr	r3, [r7, #4]
    4988:	681a      	ldr	r2, [r3, #0]
    498a:	69fb      	ldr	r3, [r7, #28]
    498c:	b2db      	uxtb	r3, r3
    498e:	1c19      	adds	r1, r3, #0
    4990:	231f      	movs	r3, #31
    4992:	400b      	ands	r3, r1
    4994:	b2d9      	uxtb	r1, r3
    4996:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4998:	1c08      	adds	r0, r1, #0
    499a:	211f      	movs	r1, #31
    499c:	4001      	ands	r1, r0
    499e:	0188      	lsls	r0, r1, #6
    49a0:	4918      	ldr	r1, [pc, #96]	; (4a04 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd4>)
    49a2:	400b      	ands	r3, r1
    49a4:	1c19      	adds	r1, r3, #0
    49a6:	1c03      	adds	r3, r0, #0
    49a8:	430b      	orrs	r3, r1
    49aa:	8513      	strh	r3, [r2, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    49ac:	687b      	ldr	r3, [r7, #4]
    49ae:	681a      	ldr	r2, [r3, #0]
    49b0:	69bb      	ldr	r3, [r7, #24]
    49b2:	b2db      	uxtb	r3, r3
    49b4:	1c19      	adds	r1, r3, #0
    49b6:	231f      	movs	r3, #31
    49b8:	400b      	ands	r3, r1
    49ba:	b2d9      	uxtb	r1, r3
    49bc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    49be:	1c08      	adds	r0, r1, #0
    49c0:	211f      	movs	r1, #31
    49c2:	4008      	ands	r0, r1
    49c4:	211f      	movs	r1, #31
    49c6:	438b      	bics	r3, r1
    49c8:	1c19      	adds	r1, r3, #0
    49ca:	1c03      	adds	r3, r0, #0
    49cc:	430b      	orrs	r3, r1
    49ce:	8513      	strh	r3, [r2, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    49d0:	687b      	ldr	r3, [r7, #4]
    49d2:	681a      	ldr	r2, [r3, #0]
    49d4:	697b      	ldr	r3, [r7, #20]
    49d6:	b2db      	uxtb	r3, r3
    49d8:	1c19      	adds	r1, r3, #0
    49da:	2307      	movs	r3, #7
    49dc:	400b      	ands	r3, r1
    49de:	b2d9      	uxtb	r1, r3
    49e0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    49e2:	1c08      	adds	r0, r1, #0
    49e4:	2107      	movs	r1, #7
    49e6:	4001      	ands	r1, r0
    49e8:	0308      	lsls	r0, r1, #12
    49ea:	4907      	ldr	r1, [pc, #28]	; (4a08 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd8>)
    49ec:	400b      	ands	r3, r1
    49ee:	1c19      	adds	r1, r3, #0
    49f0:	1c03      	adds	r3, r0, #0
    49f2:	430b      	orrs	r3, r1
    49f4:	8513      	strh	r3, [r2, #40]	; 0x28
}
    49f6:	46c0      	nop			; (mov r8, r8)
    49f8:	46bd      	mov	sp, r7
    49fa:	b008      	add	sp, #32
    49fc:	bd80      	pop	{r7, pc}
    49fe:	46c0      	nop			; (mov r8, r8)
    4a00:	00806024 	.word	0x00806024
    4a04:	fffff83f 	.word	0xfffff83f
    4a08:	ffff8fff 	.word	0xffff8fff

00004a0c <_ZN7__GuardC1Ev>:
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    4a0c:	b580      	push	{r7, lr}
    4a0e:	b084      	sub	sp, #16
    4a10:	af00      	add	r7, sp, #0
    4a12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4a14:	f3ef 8310 	mrs	r3, PRIMASK
    4a18:	60fb      	str	r3, [r7, #12]
  return(result);
    4a1a:	68fa      	ldr	r2, [r7, #12]
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	601a      	str	r2, [r3, #0]
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	2201      	movs	r2, #1
    4a24:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4a26:	b672      	cpsid	i
		__disable_irq();
	}
    4a28:	687b      	ldr	r3, [r7, #4]
    4a2a:	0018      	movs	r0, r3
    4a2c:	46bd      	mov	sp, r7
    4a2e:	b004      	add	sp, #16
    4a30:	bd80      	pop	{r7, pc}

00004a32 <_ZN7__GuardD1Ev>:
	~__Guard() {
    4a32:	b580      	push	{r7, lr}
    4a34:	b082      	sub	sp, #8
    4a36:	af00      	add	r7, sp, #0
    4a38:	6078      	str	r0, [r7, #4]
		if (primask == 0) {
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	681b      	ldr	r3, [r3, #0]
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d102      	bne.n	4a48 <_ZN7__GuardD1Ev+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
    4a42:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    4a44:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	0018      	movs	r0, r3
    4a4c:	46bd      	mov	sp, r7
    4a4e:	b002      	add	sp, #8
    4a50:	bd80      	pop	{r7, pc}

00004a52 <_ZN7__Guard5enterEv>:
	uint32_t enter() { return loops--; }
    4a52:	b580      	push	{r7, lr}
    4a54:	b082      	sub	sp, #8
    4a56:	af00      	add	r7, sp, #0
    4a58:	6078      	str	r0, [r7, #4]
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	685a      	ldr	r2, [r3, #4]
    4a5e:	1e51      	subs	r1, r2, #1
    4a60:	687b      	ldr	r3, [r7, #4]
    4a62:	6059      	str	r1, [r3, #4]
    4a64:	0013      	movs	r3, r2
    4a66:	0018      	movs	r0, r3
    4a68:	46bd      	mov	sp, r7
    4a6a:	b002      	add	sp, #8
    4a6c:	bd80      	pop	{r7, pc}
	...

00004a70 <_ZN9EPHandlerC1Ev>:

/*
 * USB EP generic handlers.
 */

class EPHandler {
    4a70:	b580      	push	{r7, lr}
    4a72:	b082      	sub	sp, #8
    4a74:	af00      	add	r7, sp, #0
    4a76:	6078      	str	r0, [r7, #4]
    4a78:	4a03      	ldr	r2, [pc, #12]	; (4a88 <_ZN9EPHandlerC1Ev+0x18>)
    4a7a:	687b      	ldr	r3, [r7, #4]
    4a7c:	601a      	str	r2, [r3, #0]
    4a7e:	687b      	ldr	r3, [r7, #4]
    4a80:	0018      	movs	r0, r3
    4a82:	46bd      	mov	sp, r7
    4a84:	b002      	add	sp, #8
    4a86:	bd80      	pop	{r7, pc}
    4a88:	000134e4 	.word	0x000134e4

00004a8c <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm>:
	virtual uint32_t available() const = 0;
};

class DoubleBufferedEPOutHandler : public EPHandler {
public:
	DoubleBufferedEPOutHandler(USBDevice_SAMD21G18x &usbDev, uint32_t endPoint, uint32_t bufferSize) :
    4a8c:	b580      	push	{r7, lr}
    4a8e:	b084      	sub	sp, #16
    4a90:	af00      	add	r7, sp, #0
    4a92:	60f8      	str	r0, [r7, #12]
    4a94:	60b9      	str	r1, [r7, #8]
    4a96:	607a      	str	r2, [r7, #4]
    4a98:	603b      	str	r3, [r7, #0]
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    4a9a:	68fb      	ldr	r3, [r7, #12]
    4a9c:	0018      	movs	r0, r3
    4a9e:	f7ff ffe7 	bl	4a70 <_ZN9EPHandlerC1Ev>
    4aa2:	4a30      	ldr	r2, [pc, #192]	; (4b64 <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm+0xd8>)
    4aa4:	68fb      	ldr	r3, [r7, #12]
    4aa6:	601a      	str	r2, [r3, #0]
    4aa8:	68fb      	ldr	r3, [r7, #12]
    4aaa:	68ba      	ldr	r2, [r7, #8]
    4aac:	605a      	str	r2, [r3, #4]
    4aae:	68fb      	ldr	r3, [r7, #12]
    4ab0:	687a      	ldr	r2, [r7, #4]
    4ab2:	609a      	str	r2, [r3, #8]
    4ab4:	68fb      	ldr	r3, [r7, #12]
    4ab6:	683a      	ldr	r2, [r7, #0]
    4ab8:	60da      	str	r2, [r3, #12]
    4aba:	68fb      	ldr	r3, [r7, #12]
    4abc:	2200      	movs	r2, #0
    4abe:	611a      	str	r2, [r3, #16]
    4ac0:	68fb      	ldr	r3, [r7, #12]
    4ac2:	2200      	movs	r2, #0
    4ac4:	615a      	str	r2, [r3, #20]
    4ac6:	68fb      	ldr	r3, [r7, #12]
    4ac8:	2200      	movs	r2, #0
    4aca:	61da      	str	r2, [r3, #28]
    4acc:	68fb      	ldr	r3, [r7, #12]
    4ace:	2200      	movs	r2, #0
    4ad0:	621a      	str	r2, [r3, #32]
    4ad2:	68fb      	ldr	r3, [r7, #12]
    4ad4:	2224      	movs	r2, #36	; 0x24
    4ad6:	2100      	movs	r1, #0
    4ad8:	5499      	strb	r1, [r3, r2]
    4ada:	68fb      	ldr	r3, [r7, #12]
    4adc:	2200      	movs	r2, #0
    4ade:	62da      	str	r2, [r3, #44]	; 0x2c
    4ae0:	68fb      	ldr	r3, [r7, #12]
    4ae2:	2200      	movs	r2, #0
    4ae4:	631a      	str	r2, [r3, #48]	; 0x30
    4ae6:	68fb      	ldr	r3, [r7, #12]
    4ae8:	2234      	movs	r2, #52	; 0x34
    4aea:	2100      	movs	r1, #0
    4aec:	5499      	strb	r1, [r3, r2]
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	2235      	movs	r2, #53	; 0x35
    4af2:	2100      	movs	r1, #0
    4af4:	5499      	strb	r1, [r3, r2]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    4af6:	68fb      	ldr	r3, [r7, #12]
    4af8:	68db      	ldr	r3, [r3, #12]
    4afa:	0018      	movs	r0, r3
    4afc:	f00b fe54 	bl	107a8 <malloc>
    4b00:	0003      	movs	r3, r0
    4b02:	001a      	movs	r2, r3
    4b04:	68fb      	ldr	r3, [r7, #12]
    4b06:	619a      	str	r2, [r3, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    4b08:	68fb      	ldr	r3, [r7, #12]
    4b0a:	68db      	ldr	r3, [r3, #12]
    4b0c:	0018      	movs	r0, r3
    4b0e:	f00b fe4b 	bl	107a8 <malloc>
    4b12:	0003      	movs	r3, r0
    4b14:	001a      	movs	r2, r3
    4b16:	68fb      	ldr	r3, [r7, #12]
    4b18:	629a      	str	r2, [r3, #40]	; 0x28

		usbd.epBank0SetSize(ep, 64);
    4b1a:	68fb      	ldr	r3, [r7, #12]
    4b1c:	6858      	ldr	r0, [r3, #4]
    4b1e:	68fb      	ldr	r3, [r7, #12]
    4b20:	689b      	ldr	r3, [r3, #8]
    4b22:	b2db      	uxtb	r3, r3
    4b24:	2240      	movs	r2, #64	; 0x40
    4b26:	0019      	movs	r1, r3
    4b28:	f7ff fe48 	bl	47bc <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>
		usbd.epBank0SetType(ep, 3); // BULK OUT
    4b2c:	68fb      	ldr	r3, [r7, #12]
    4b2e:	6858      	ldr	r0, [r3, #4]
    4b30:	68fb      	ldr	r3, [r7, #12]
    4b32:	689b      	ldr	r3, [r3, #8]
    4b34:	b2db      	uxtb	r3, r3
    4b36:	2203      	movs	r2, #3
    4b38:	0019      	movs	r1, r3
    4b3a:	f7ff fb73 	bl	4224 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    4b3e:	68fb      	ldr	r3, [r7, #12]
    4b40:	6858      	ldr	r0, [r3, #4]
    4b42:	68fb      	ldr	r3, [r7, #12]
    4b44:	689b      	ldr	r3, [r3, #8]
    4b46:	b2d9      	uxtb	r1, r3
    4b48:	68fb      	ldr	r3, [r7, #12]
    4b4a:	699b      	ldr	r3, [r3, #24]
    4b4c:	001a      	movs	r2, r3
    4b4e:	f7ff fe09 	bl	4764 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>

		release();
    4b52:	68fb      	ldr	r3, [r7, #12]
    4b54:	0018      	movs	r0, r3
    4b56:	f000 fa47 	bl	4fe8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	}
    4b5a:	68fb      	ldr	r3, [r7, #12]
    4b5c:	0018      	movs	r0, r3
    4b5e:	46bd      	mov	sp, r7
    4b60:	b004      	add	sp, #16
    4b62:	bd80      	pop	{r7, pc}
    4b64:	000134d0 	.word	0x000134d0

00004b68 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:

	virtual uint32_t recv(void *_data, uint32_t len)
    4b68:	b5b0      	push	{r4, r5, r7, lr}
    4b6a:	b090      	sub	sp, #64	; 0x40
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	60f8      	str	r0, [r7, #12]
    4b70:	60b9      	str	r1, [r7, #8]
    4b72:	607a      	str	r2, [r7, #4]
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);
    4b74:	68bb      	ldr	r3, [r7, #8]
    4b76:	637b      	str	r3, [r7, #52]	; 0x34

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    4b78:	68fb      	ldr	r3, [r7, #12]
    4b7a:	691b      	ldr	r3, [r3, #16]
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	d000      	beq.n	4b82 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
    4b80:	e082      	b.n	4c88 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x120>
			synchronized {
    4b82:	232c      	movs	r3, #44	; 0x2c
    4b84:	18fb      	adds	r3, r7, r3
    4b86:	0018      	movs	r0, r3
    4b88:	f7ff ff40 	bl	4a0c <_ZN7__GuardC1Ev>
    4b8c:	232c      	movs	r3, #44	; 0x2c
    4b8e:	18fb      	adds	r3, r7, r3
    4b90:	0018      	movs	r0, r3
    4b92:	f7ff ff5e 	bl	4a52 <_ZN7__Guard5enterEv>
    4b96:	0003      	movs	r3, r0
    4b98:	1e5a      	subs	r2, r3, #1
    4b9a:	4193      	sbcs	r3, r2
    4b9c:	b2db      	uxtb	r3, r3
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d00b      	beq.n	4bba <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x52>
				if (!ready0) {
    4ba2:	68fb      	ldr	r3, [r7, #12]
    4ba4:	2224      	movs	r2, #36	; 0x24
    4ba6:	5c9b      	ldrb	r3, [r3, r2]
    4ba8:	b2db      	uxtb	r3, r3
    4baa:	2201      	movs	r2, #1
    4bac:	4053      	eors	r3, r2
    4bae:	b2db      	uxtb	r3, r3
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d0eb      	beq.n	4b8c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x24>
					return 0;
    4bb4:	2400      	movs	r4, #0
    4bb6:	2500      	movs	r5, #0
    4bb8:	e000      	b.n	4bbc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x54>
    4bba:	2501      	movs	r5, #1
    4bbc:	232c      	movs	r3, #44	; 0x2c
    4bbe:	18fb      	adds	r3, r7, r3
    4bc0:	0018      	movs	r0, r3
    4bc2:	f7ff ff36 	bl	4a32 <_ZN7__GuardD1Ev>
    4bc6:	2d01      	cmp	r5, #1
    4bc8:	d000      	beq.n	4bcc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x64>
    4bca:	e0de      	b.n	4d8a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
			synchronized {
    4bcc:	46c0      	nop			; (mov r8, r8)
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    4bce:	2300      	movs	r3, #0
    4bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    4bd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	429a      	cmp	r2, r3
    4bd8:	d207      	bcs.n	4bea <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    4bda:	68fb      	ldr	r3, [r7, #12]
    4bdc:	69da      	ldr	r2, [r3, #28]
    4bde:	68fb      	ldr	r3, [r7, #12]
    4be0:	6a1b      	ldr	r3, [r3, #32]
    4be2:	429a      	cmp	r2, r3
    4be4:	d201      	bcs.n	4bea <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    4be6:	2301      	movs	r3, #1
    4be8:	e000      	b.n	4bec <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x84>
    4bea:	2300      	movs	r3, #0
    4bec:	2b00      	cmp	r3, #0
    4bee:	d011      	beq.n	4c14 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xac>
				data[i] = data0[first0++];
    4bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4bf4:	18d1      	adds	r1, r2, r3
    4bf6:	68fb      	ldr	r3, [r7, #12]
    4bf8:	6998      	ldr	r0, [r3, #24]
    4bfa:	68fb      	ldr	r3, [r7, #12]
    4bfc:	69db      	ldr	r3, [r3, #28]
    4bfe:	1c5c      	adds	r4, r3, #1
    4c00:	68fa      	ldr	r2, [r7, #12]
    4c02:	61d4      	str	r4, [r2, #28]
    4c04:	18c3      	adds	r3, r0, r3
    4c06:	781b      	ldrb	r3, [r3, #0]
    4c08:	b2db      	uxtb	r3, r3
    4c0a:	700b      	strb	r3, [r1, #0]
			for (i=0; i<len && first0 < last0; i++) {
    4c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4c0e:	3301      	adds	r3, #1
    4c10:	63fb      	str	r3, [r7, #60]	; 0x3c
    4c12:	e7de      	b.n	4bd2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6a>
			}
			if (first0 == last0) {
    4c14:	68fb      	ldr	r3, [r7, #12]
    4c16:	69da      	ldr	r2, [r3, #28]
    4c18:	68fb      	ldr	r3, [r7, #12]
    4c1a:	6a1b      	ldr	r3, [r3, #32]
    4c1c:	1ad3      	subs	r3, r2, r3
    4c1e:	425a      	negs	r2, r3
    4c20:	4153      	adcs	r3, r2
    4c22:	b2db      	uxtb	r3, r3
    4c24:	2b00      	cmp	r3, #0
    4c26:	d02d      	beq.n	4c84 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x11c>
				first0 = 0;
    4c28:	68fb      	ldr	r3, [r7, #12]
    4c2a:	2200      	movs	r2, #0
    4c2c:	61da      	str	r2, [r3, #28]
				current = 1;
    4c2e:	68fb      	ldr	r3, [r7, #12]
    4c30:	2201      	movs	r2, #1
    4c32:	611a      	str	r2, [r3, #16]
				synchronized {
    4c34:	2324      	movs	r3, #36	; 0x24
    4c36:	18fb      	adds	r3, r7, r3
    4c38:	0018      	movs	r0, r3
    4c3a:	f7ff fee7 	bl	4a0c <_ZN7__GuardC1Ev>
    4c3e:	2324      	movs	r3, #36	; 0x24
    4c40:	18fb      	adds	r3, r7, r3
    4c42:	0018      	movs	r0, r3
    4c44:	f7ff ff05 	bl	4a52 <_ZN7__Guard5enterEv>
    4c48:	0003      	movs	r3, r0
    4c4a:	1e5a      	subs	r2, r3, #1
    4c4c:	4193      	sbcs	r3, r2
    4c4e:	b2db      	uxtb	r3, r3
    4c50:	2b00      	cmp	r3, #0
    4c52:	d012      	beq.n	4c7a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x112>
					ready0 = false;
    4c54:	68fb      	ldr	r3, [r7, #12]
    4c56:	2224      	movs	r2, #36	; 0x24
    4c58:	2100      	movs	r1, #0
    4c5a:	5499      	strb	r1, [r3, r2]
					if (notify) {
    4c5c:	68fb      	ldr	r3, [r7, #12]
    4c5e:	2235      	movs	r2, #53	; 0x35
    4c60:	5c9b      	ldrb	r3, [r3, r2]
    4c62:	b2db      	uxtb	r3, r3
    4c64:	2b00      	cmp	r3, #0
    4c66:	d0ea      	beq.n	4c3e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
						notify = false;
    4c68:	68fb      	ldr	r3, [r7, #12]
    4c6a:	2235      	movs	r2, #53	; 0x35
    4c6c:	2100      	movs	r1, #0
    4c6e:	5499      	strb	r1, [r3, r2]
						release();
    4c70:	68fb      	ldr	r3, [r7, #12]
    4c72:	0018      	movs	r0, r3
    4c74:	f000 f9b8 	bl	4fe8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
				synchronized {
    4c78:	e7e1      	b.n	4c3e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
    4c7a:	2324      	movs	r3, #36	; 0x24
    4c7c:	18fb      	adds	r3, r7, r3
    4c7e:	0018      	movs	r0, r3
    4c80:	f7ff fed7 	bl	4a32 <_ZN7__GuardD1Ev>
					}
				}
			}
			return i;
    4c84:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    4c86:	e080      	b.n	4d8a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
		} else {
			synchronized {
    4c88:	231c      	movs	r3, #28
    4c8a:	18fb      	adds	r3, r7, r3
    4c8c:	0018      	movs	r0, r3
    4c8e:	f7ff febd 	bl	4a0c <_ZN7__GuardC1Ev>
    4c92:	231c      	movs	r3, #28
    4c94:	18fb      	adds	r3, r7, r3
    4c96:	0018      	movs	r0, r3
    4c98:	f7ff fedb 	bl	4a52 <_ZN7__Guard5enterEv>
    4c9c:	0003      	movs	r3, r0
    4c9e:	1e5a      	subs	r2, r3, #1
    4ca0:	4193      	sbcs	r3, r2
    4ca2:	b2db      	uxtb	r3, r3
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d00b      	beq.n	4cc0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x158>
				if (!ready1) {
    4ca8:	68fb      	ldr	r3, [r7, #12]
    4caa:	2234      	movs	r2, #52	; 0x34
    4cac:	5c9b      	ldrb	r3, [r3, r2]
    4cae:	b2db      	uxtb	r3, r3
    4cb0:	2201      	movs	r2, #1
    4cb2:	4053      	eors	r3, r2
    4cb4:	b2db      	uxtb	r3, r3
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d0eb      	beq.n	4c92 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12a>
					return 0;
    4cba:	2400      	movs	r4, #0
    4cbc:	2500      	movs	r5, #0
    4cbe:	e000      	b.n	4cc2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x15a>
    4cc0:	2501      	movs	r5, #1
    4cc2:	231c      	movs	r3, #28
    4cc4:	18fb      	adds	r3, r7, r3
    4cc6:	0018      	movs	r0, r3
    4cc8:	f7ff feb3 	bl	4a32 <_ZN7__GuardD1Ev>
    4ccc:	2d01      	cmp	r5, #1
    4cce:	d15c      	bne.n	4d8a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
			synchronized {
    4cd0:	46c0      	nop			; (mov r8, r8)
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    4cd2:	2300      	movs	r3, #0
    4cd4:	63bb      	str	r3, [r7, #56]	; 0x38
    4cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    4cd8:	687b      	ldr	r3, [r7, #4]
    4cda:	429a      	cmp	r2, r3
    4cdc:	d207      	bcs.n	4cee <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x186>
    4cde:	68fb      	ldr	r3, [r7, #12]
    4ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ce2:	68fb      	ldr	r3, [r7, #12]
    4ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4ce6:	429a      	cmp	r2, r3
    4ce8:	d201      	bcs.n	4cee <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x186>
    4cea:	2301      	movs	r3, #1
    4cec:	e000      	b.n	4cf0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x188>
    4cee:	2300      	movs	r3, #0
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d011      	beq.n	4d18 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1b0>
				data[i] = data1[first1++];
    4cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4cf8:	18d1      	adds	r1, r2, r3
    4cfa:	68fb      	ldr	r3, [r7, #12]
    4cfc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4cfe:	68fb      	ldr	r3, [r7, #12]
    4d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d02:	1c5c      	adds	r4, r3, #1
    4d04:	68fa      	ldr	r2, [r7, #12]
    4d06:	62d4      	str	r4, [r2, #44]	; 0x2c
    4d08:	18c3      	adds	r3, r0, r3
    4d0a:	781b      	ldrb	r3, [r3, #0]
    4d0c:	b2db      	uxtb	r3, r3
    4d0e:	700b      	strb	r3, [r1, #0]
			for (i=0; i<len && first1 < last1; i++) {
    4d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4d12:	3301      	adds	r3, #1
    4d14:	63bb      	str	r3, [r7, #56]	; 0x38
    4d16:	e7de      	b.n	4cd6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x16e>
			}
			if (first1 == last1) {
    4d18:	68fb      	ldr	r3, [r7, #12]
    4d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d1c:	68fb      	ldr	r3, [r7, #12]
    4d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d20:	1ad3      	subs	r3, r2, r3
    4d22:	425a      	negs	r2, r3
    4d24:	4153      	adcs	r3, r2
    4d26:	b2db      	uxtb	r3, r3
    4d28:	2b00      	cmp	r3, #0
    4d2a:	d02d      	beq.n	4d88 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x220>
				first1 = 0;
    4d2c:	68fb      	ldr	r3, [r7, #12]
    4d2e:	2200      	movs	r2, #0
    4d30:	62da      	str	r2, [r3, #44]	; 0x2c
				current = 0;
    4d32:	68fb      	ldr	r3, [r7, #12]
    4d34:	2200      	movs	r2, #0
    4d36:	611a      	str	r2, [r3, #16]
				synchronized {
    4d38:	2314      	movs	r3, #20
    4d3a:	18fb      	adds	r3, r7, r3
    4d3c:	0018      	movs	r0, r3
    4d3e:	f7ff fe65 	bl	4a0c <_ZN7__GuardC1Ev>
    4d42:	2314      	movs	r3, #20
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	0018      	movs	r0, r3
    4d48:	f7ff fe83 	bl	4a52 <_ZN7__Guard5enterEv>
    4d4c:	0003      	movs	r3, r0
    4d4e:	1e5a      	subs	r2, r3, #1
    4d50:	4193      	sbcs	r3, r2
    4d52:	b2db      	uxtb	r3, r3
    4d54:	2b00      	cmp	r3, #0
    4d56:	d012      	beq.n	4d7e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x216>
					ready1 = false;
    4d58:	68fb      	ldr	r3, [r7, #12]
    4d5a:	2234      	movs	r2, #52	; 0x34
    4d5c:	2100      	movs	r1, #0
    4d5e:	5499      	strb	r1, [r3, r2]
					if (notify) {
    4d60:	68fb      	ldr	r3, [r7, #12]
    4d62:	2235      	movs	r2, #53	; 0x35
    4d64:	5c9b      	ldrb	r3, [r3, r2]
    4d66:	b2db      	uxtb	r3, r3
    4d68:	2b00      	cmp	r3, #0
    4d6a:	d0ea      	beq.n	4d42 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1da>
						notify = false;
    4d6c:	68fb      	ldr	r3, [r7, #12]
    4d6e:	2235      	movs	r2, #53	; 0x35
    4d70:	2100      	movs	r1, #0
    4d72:	5499      	strb	r1, [r3, r2]
						release();
    4d74:	68fb      	ldr	r3, [r7, #12]
    4d76:	0018      	movs	r0, r3
    4d78:	f000 f936 	bl	4fe8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
				synchronized {
    4d7c:	e7e1      	b.n	4d42 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1da>
    4d7e:	2314      	movs	r3, #20
    4d80:	18fb      	adds	r3, r7, r3
    4d82:	0018      	movs	r0, r3
    4d84:	f7ff fe55 	bl	4a32 <_ZN7__GuardD1Ev>
					}
				}
			}
			return i;
    4d88:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    4d8a:	0023      	movs	r3, r4
		}
	}
    4d8c:	0018      	movs	r0, r3
    4d8e:	46bd      	mov	sp, r7
    4d90:	b010      	add	sp, #64	; 0x40
    4d92:	bdb0      	pop	{r4, r5, r7, pc}

00004d94 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:

	virtual void handleEndpoint()
    4d94:	b590      	push	{r4, r7, lr}
    4d96:	b087      	sub	sp, #28
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
	{
		// R/W : incoming, ready0/1
		//   W : last0/1, notify
		if (usbd.epBank0IsTransferComplete(ep))
    4d9c:	687b      	ldr	r3, [r7, #4]
    4d9e:	685a      	ldr	r2, [r3, #4]
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	689b      	ldr	r3, [r3, #8]
    4da4:	b2db      	uxtb	r3, r3
    4da6:	0019      	movs	r1, r3
    4da8:	0010      	movs	r0, r2
    4daa:	f7ff fabc 	bl	4326 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    4dae:	1e03      	subs	r3, r0, #0
    4db0:	d100      	bne.n	4db4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x20>
    4db2:	e0b0      	b.n	4f16 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
		{
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	685a      	ldr	r2, [r3, #4]
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	689b      	ldr	r3, [r3, #8]
    4dbc:	b2db      	uxtb	r3, r3
    4dbe:	0019      	movs	r1, r3
    4dc0:	0010      	movs	r0, r2
    4dc2:	f7ff fb06 	bl	43d2 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks for non-ZLP's
			if (incoming == 0) {
    4dc6:	687b      	ldr	r3, [r7, #4]
    4dc8:	695b      	ldr	r3, [r3, #20]
    4dca:	2b00      	cmp	r3, #0
    4dcc:	d14f      	bne.n	4e6e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
				last0 = usbd.epBank0ByteCount(ep);
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	685a      	ldr	r2, [r3, #4]
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	689b      	ldr	r3, [r3, #8]
    4dd6:	b2db      	uxtb	r3, r3
    4dd8:	0019      	movs	r1, r3
    4dda:	0010      	movs	r0, r2
    4ddc:	f7ff fc21 	bl	4622 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    4de0:	0003      	movs	r3, r0
    4de2:	001a      	movs	r2, r3
    4de4:	687b      	ldr	r3, [r7, #4]
    4de6:	621a      	str	r2, [r3, #32]
				if (last0 != 0) {
    4de8:	687b      	ldr	r3, [r7, #4]
    4dea:	6a1b      	ldr	r3, [r3, #32]
    4dec:	1e5a      	subs	r2, r3, #1
    4dee:	4193      	sbcs	r3, r2
    4df0:	b2db      	uxtb	r3, r3
    4df2:	2b00      	cmp	r3, #0
    4df4:	d100      	bne.n	4df8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x64>
    4df6:	e08a      	b.n	4f0e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					incoming = 1;
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	2201      	movs	r2, #1
    4dfc:	615a      	str	r2, [r3, #20]
					usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    4dfe:	687b      	ldr	r3, [r7, #4]
    4e00:	6858      	ldr	r0, [r3, #4]
    4e02:	687b      	ldr	r3, [r7, #4]
    4e04:	689b      	ldr	r3, [r3, #8]
    4e06:	b2d9      	uxtb	r1, r3
    4e08:	687b      	ldr	r3, [r7, #4]
    4e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e0c:	001a      	movs	r2, r3
    4e0e:	f7ff fca9 	bl	4764 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
					synchronized {
    4e12:	2310      	movs	r3, #16
    4e14:	18fb      	adds	r3, r7, r3
    4e16:	0018      	movs	r0, r3
    4e18:	f7ff fdf8 	bl	4a0c <_ZN7__GuardC1Ev>
    4e1c:	2310      	movs	r3, #16
    4e1e:	18fb      	adds	r3, r7, r3
    4e20:	0018      	movs	r0, r3
    4e22:	f7ff fe16 	bl	4a52 <_ZN7__Guard5enterEv>
    4e26:	0003      	movs	r3, r0
    4e28:	1e5a      	subs	r2, r3, #1
    4e2a:	4193      	sbcs	r3, r2
    4e2c:	b2db      	uxtb	r3, r3
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d014      	beq.n	4e5c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xc8>
						ready0 = true;
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	2224      	movs	r2, #36	; 0x24
    4e36:	2101      	movs	r1, #1
    4e38:	5499      	strb	r1, [r3, r2]
						if (ready1) {
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	2234      	movs	r2, #52	; 0x34
    4e3e:	5c9b      	ldrb	r3, [r3, r2]
    4e40:	b2db      	uxtb	r3, r3
    4e42:	2b00      	cmp	r3, #0
    4e44:	d005      	beq.n	4e52 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xbe>
							notify = true;
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	2235      	movs	r2, #53	; 0x35
    4e4a:	2101      	movs	r1, #1
    4e4c:	5499      	strb	r1, [r3, r2]
    4e4e:	2400      	movs	r4, #0
							return;
    4e50:	e005      	b.n	4e5e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xca>
						}
						notify = false;
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	2235      	movs	r2, #53	; 0x35
    4e56:	2100      	movs	r1, #0
    4e58:	5499      	strb	r1, [r3, r2]
					synchronized {
    4e5a:	e7df      	b.n	4e1c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x88>
    4e5c:	2401      	movs	r4, #1
    4e5e:	2310      	movs	r3, #16
    4e60:	18fb      	adds	r3, r7, r3
    4e62:	0018      	movs	r0, r3
    4e64:	f7ff fde5 	bl	4a32 <_ZN7__GuardD1Ev>
    4e68:	2c01      	cmp	r4, #1
    4e6a:	d04f      	beq.n	4f0c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x178>
    4e6c:	e053      	b.n	4f16 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
					}
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
    4e6e:	687b      	ldr	r3, [r7, #4]
    4e70:	685a      	ldr	r2, [r3, #4]
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	689b      	ldr	r3, [r3, #8]
    4e76:	b2db      	uxtb	r3, r3
    4e78:	0019      	movs	r1, r3
    4e7a:	0010      	movs	r0, r2
    4e7c:	f7ff fbd1 	bl	4622 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    4e80:	0003      	movs	r3, r0
    4e82:	001a      	movs	r2, r3
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	631a      	str	r2, [r3, #48]	; 0x30
				if (last1 != 0) {
    4e88:	687b      	ldr	r3, [r7, #4]
    4e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4e8c:	1e5a      	subs	r2, r3, #1
    4e8e:	4193      	sbcs	r3, r2
    4e90:	b2db      	uxtb	r3, r3
    4e92:	2b00      	cmp	r3, #0
    4e94:	d03b      	beq.n	4f0e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					incoming = 0;
    4e96:	687b      	ldr	r3, [r7, #4]
    4e98:	2200      	movs	r2, #0
    4e9a:	615a      	str	r2, [r3, #20]
					usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	6858      	ldr	r0, [r3, #4]
    4ea0:	687b      	ldr	r3, [r7, #4]
    4ea2:	689b      	ldr	r3, [r3, #8]
    4ea4:	b2d9      	uxtb	r1, r3
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	699b      	ldr	r3, [r3, #24]
    4eaa:	001a      	movs	r2, r3
    4eac:	f7ff fc5a 	bl	4764 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
					synchronized {
    4eb0:	2308      	movs	r3, #8
    4eb2:	18fb      	adds	r3, r7, r3
    4eb4:	0018      	movs	r0, r3
    4eb6:	f7ff fda9 	bl	4a0c <_ZN7__GuardC1Ev>
    4eba:	2308      	movs	r3, #8
    4ebc:	18fb      	adds	r3, r7, r3
    4ebe:	0018      	movs	r0, r3
    4ec0:	f7ff fdc7 	bl	4a52 <_ZN7__Guard5enterEv>
    4ec4:	0003      	movs	r3, r0
    4ec6:	1e5a      	subs	r2, r3, #1
    4ec8:	4193      	sbcs	r3, r2
    4eca:	b2db      	uxtb	r3, r3
    4ecc:	2b00      	cmp	r3, #0
    4ece:	d014      	beq.n	4efa <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x166>
						ready1 = true;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	2234      	movs	r2, #52	; 0x34
    4ed4:	2101      	movs	r1, #1
    4ed6:	5499      	strb	r1, [r3, r2]
						if (ready0) {
    4ed8:	687b      	ldr	r3, [r7, #4]
    4eda:	2224      	movs	r2, #36	; 0x24
    4edc:	5c9b      	ldrb	r3, [r3, r2]
    4ede:	b2db      	uxtb	r3, r3
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	d005      	beq.n	4ef0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x15c>
							notify = true;
    4ee4:	687b      	ldr	r3, [r7, #4]
    4ee6:	2235      	movs	r2, #53	; 0x35
    4ee8:	2101      	movs	r1, #1
    4eea:	5499      	strb	r1, [r3, r2]
    4eec:	2400      	movs	r4, #0
							return;
    4eee:	e005      	b.n	4efc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x168>
						}
						notify = false;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	2235      	movs	r2, #53	; 0x35
    4ef4:	2100      	movs	r1, #0
    4ef6:	5499      	strb	r1, [r3, r2]
					synchronized {
    4ef8:	e7df      	b.n	4eba <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x126>
    4efa:	2401      	movs	r4, #1
    4efc:	2308      	movs	r3, #8
    4efe:	18fb      	adds	r3, r7, r3
    4f00:	0018      	movs	r0, r3
    4f02:	f7ff fd96 	bl	4a32 <_ZN7__GuardD1Ev>
    4f06:	2c01      	cmp	r4, #1
    4f08:	d105      	bne.n	4f16 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
    4f0a:	e000      	b.n	4f0e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					synchronized {
    4f0c:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
			release();
    4f0e:	687b      	ldr	r3, [r7, #4]
    4f10:	0018      	movs	r0, r3
    4f12:	f000 f869 	bl	4fe8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
		}
	}
    4f16:	46bd      	mov	sp, r7
    4f18:	b007      	add	sp, #28
    4f1a:	bd90      	pop	{r4, r7, pc}

00004f1c <_ZNK26DoubleBufferedEPOutHandler9availableEv>:

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    4f1c:	b580      	push	{r7, lr}
    4f1e:	b088      	sub	sp, #32
    4f20:	af00      	add	r7, sp, #0
    4f22:	6078      	str	r0, [r7, #4]
		if (current == 0) {
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	691b      	ldr	r3, [r3, #16]
    4f28:	2b00      	cmp	r3, #0
    4f2a:	d12c      	bne.n	4f86 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x6a>
			bool ready = false;
    4f2c:	231f      	movs	r3, #31
    4f2e:	18fb      	adds	r3, r7, r3
    4f30:	2200      	movs	r2, #0
    4f32:	701a      	strb	r2, [r3, #0]
			synchronized {
    4f34:	2314      	movs	r3, #20
    4f36:	18fb      	adds	r3, r7, r3
    4f38:	0018      	movs	r0, r3
    4f3a:	f7ff fd67 	bl	4a0c <_ZN7__GuardC1Ev>
    4f3e:	2314      	movs	r3, #20
    4f40:	18fb      	adds	r3, r7, r3
    4f42:	0018      	movs	r0, r3
    4f44:	f7ff fd85 	bl	4a52 <_ZN7__Guard5enterEv>
    4f48:	0003      	movs	r3, r0
    4f4a:	1e5a      	subs	r2, r3, #1
    4f4c:	4193      	sbcs	r3, r2
    4f4e:	b2db      	uxtb	r3, r3
    4f50:	2b00      	cmp	r3, #0
    4f52:	d006      	beq.n	4f62 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x46>
				ready = ready0;
    4f54:	231f      	movs	r3, #31
    4f56:	18fb      	adds	r3, r7, r3
    4f58:	687a      	ldr	r2, [r7, #4]
    4f5a:	2124      	movs	r1, #36	; 0x24
    4f5c:	5c52      	ldrb	r2, [r2, r1]
    4f5e:	701a      	strb	r2, [r3, #0]
			synchronized {
    4f60:	e7ed      	b.n	4f3e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x22>
    4f62:	2314      	movs	r3, #20
    4f64:	18fb      	adds	r3, r7, r3
    4f66:	0018      	movs	r0, r3
    4f68:	f7ff fd63 	bl	4a32 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    4f6c:	231f      	movs	r3, #31
    4f6e:	18fb      	adds	r3, r7, r3
    4f70:	781b      	ldrb	r3, [r3, #0]
    4f72:	2b00      	cmp	r3, #0
    4f74:	d005      	beq.n	4f82 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x66>
    4f76:	687b      	ldr	r3, [r7, #4]
    4f78:	6a1a      	ldr	r2, [r3, #32]
    4f7a:	687b      	ldr	r3, [r7, #4]
    4f7c:	69db      	ldr	r3, [r3, #28]
    4f7e:	1ad3      	subs	r3, r2, r3
    4f80:	e02e      	b.n	4fe0 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc4>
    4f82:	2300      	movs	r3, #0
    4f84:	e02c      	b.n	4fe0 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc4>
		} else {
			bool ready = false;
    4f86:	231e      	movs	r3, #30
    4f88:	18fb      	adds	r3, r7, r3
    4f8a:	2200      	movs	r2, #0
    4f8c:	701a      	strb	r2, [r3, #0]
			synchronized {
    4f8e:	230c      	movs	r3, #12
    4f90:	18fb      	adds	r3, r7, r3
    4f92:	0018      	movs	r0, r3
    4f94:	f7ff fd3a 	bl	4a0c <_ZN7__GuardC1Ev>
    4f98:	230c      	movs	r3, #12
    4f9a:	18fb      	adds	r3, r7, r3
    4f9c:	0018      	movs	r0, r3
    4f9e:	f7ff fd58 	bl	4a52 <_ZN7__Guard5enterEv>
    4fa2:	0003      	movs	r3, r0
    4fa4:	1e5a      	subs	r2, r3, #1
    4fa6:	4193      	sbcs	r3, r2
    4fa8:	b2db      	uxtb	r3, r3
    4faa:	2b00      	cmp	r3, #0
    4fac:	d006      	beq.n	4fbc <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xa0>
				ready = ready1;
    4fae:	231e      	movs	r3, #30
    4fb0:	18fb      	adds	r3, r7, r3
    4fb2:	687a      	ldr	r2, [r7, #4]
    4fb4:	2134      	movs	r1, #52	; 0x34
    4fb6:	5c52      	ldrb	r2, [r2, r1]
    4fb8:	701a      	strb	r2, [r3, #0]
			synchronized {
    4fba:	e7ed      	b.n	4f98 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x7c>
    4fbc:	230c      	movs	r3, #12
    4fbe:	18fb      	adds	r3, r7, r3
    4fc0:	0018      	movs	r0, r3
    4fc2:	f7ff fd36 	bl	4a32 <_ZN7__GuardD1Ev>
			}
			return ready ? (last1 - first1) : 0;
    4fc6:	231e      	movs	r3, #30
    4fc8:	18fb      	adds	r3, r7, r3
    4fca:	781b      	ldrb	r3, [r3, #0]
    4fcc:	2b00      	cmp	r3, #0
    4fce:	d005      	beq.n	4fdc <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc0>
    4fd0:	687b      	ldr	r3, [r7, #4]
    4fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4fd8:	1ad3      	subs	r3, r2, r3
    4fda:	e000      	b.n	4fde <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc2>
    4fdc:	2300      	movs	r3, #0
    4fde:	46c0      	nop			; (mov r8, r8)
		}
	}
    4fe0:	0018      	movs	r0, r3
    4fe2:	46bd      	mov	sp, r7
    4fe4:	b008      	add	sp, #32
    4fe6:	bd80      	pop	{r7, pc}

00004fe8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    4fe8:	b580      	push	{r7, lr}
    4fea:	b082      	sub	sp, #8
    4fec:	af00      	add	r7, sp, #0
    4fee:	6078      	str	r0, [r7, #4]
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	685a      	ldr	r2, [r3, #4]
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	689b      	ldr	r3, [r3, #8]
    4ff8:	b2db      	uxtb	r3, r3
    4ffa:	0019      	movs	r1, r3
    4ffc:	0010      	movs	r0, r2
    4ffe:	f7ff fa2a 	bl	4456 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
		usbd.epBank0SetMultiPacketSize(ep, size);
    5002:	687b      	ldr	r3, [r7, #4]
    5004:	6858      	ldr	r0, [r3, #4]
    5006:	687b      	ldr	r3, [r7, #4]
    5008:	689b      	ldr	r3, [r3, #8]
    500a:	b2d9      	uxtb	r1, r3
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	68db      	ldr	r3, [r3, #12]
    5010:	b29b      	uxth	r3, r3
    5012:	001a      	movs	r2, r3
    5014:	f7ff fb5c 	bl	46d0 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
		usbd.epBank0SetByteCount(ep, 0);
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	6858      	ldr	r0, [r3, #4]
    501c:	687b      	ldr	r3, [r7, #4]
    501e:	689b      	ldr	r3, [r3, #8]
    5020:	b2db      	uxtb	r3, r3
    5022:	2200      	movs	r2, #0
    5024:	0019      	movs	r1, r3
    5026:	f7ff fb10 	bl	464a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
		usbd.epBank0ResetReady(ep);
    502a:	687b      	ldr	r3, [r7, #4]
    502c:	685a      	ldr	r2, [r3, #4]
    502e:	687b      	ldr	r3, [r7, #4]
    5030:	689b      	ldr	r3, [r3, #8]
    5032:	b2db      	uxtb	r3, r3
    5034:	0019      	movs	r1, r3
    5036:	0010      	movs	r0, r2
    5038:	f7ff fac6 	bl	45c8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>
	}
    503c:	46c0      	nop			; (mov r8, r8)
    503e:	46bd      	mov	sp, r7
    5040:	b002      	add	sp, #8
    5042:	bd80      	pop	{r7, pc}

00005044 <UDD_Handler>:
static char isEndpointHalt = 0;

extern void (*gpf_isr)(void);

// USB_Handler ISR
extern "C" void UDD_Handler(void) {
    5044:	b580      	push	{r7, lr}
    5046:	af00      	add	r7, sp, #0
	USBDevice.ISRHandler();
    5048:	4b03      	ldr	r3, [pc, #12]	; (5058 <UDD_Handler+0x14>)
    504a:	0018      	movs	r0, r3
    504c:	f001 f910 	bl	6270 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    5050:	46c0      	nop			; (mov r8, r8)
    5052:	46bd      	mov	sp, r7
    5054:	bd80      	pop	{r7, pc}
    5056:	46c0      	nop			; (mov r8, r8)
    5058:	200008f0 	.word	0x200008f0

0000505c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    505c:	b5f0      	push	{r4, r5, r6, r7, lr}
    505e:	b08d      	sub	sp, #52	; 0x34
    5060:	af00      	add	r7, sp, #0
    5062:	61f8      	str	r0, [r7, #28]
    5064:	61b9      	str	r1, [r7, #24]
    5066:	0011      	movs	r1, r2
    5068:	2217      	movs	r2, #23
    506a:	18ba      	adds	r2, r7, r2
    506c:	7011      	strb	r1, [r2, #0]
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
    506e:	466a      	mov	r2, sp
    5070:	613a      	str	r2, [r7, #16]
	if (maxlen < 2)
    5072:	2217      	movs	r2, #23
    5074:	18ba      	adds	r2, r7, r2
    5076:	7812      	ldrb	r2, [r2, #0]
    5078:	2a01      	cmp	r2, #1
    507a:	dc01      	bgt.n	5080 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x24>
		return false;
    507c:	2300      	movs	r3, #0
    507e:	e092      	b.n	51a6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x14a>
	uint8_t buffer[maxlen];
    5080:	2217      	movs	r2, #23
    5082:	18ba      	adds	r2, r7, r2
    5084:	7812      	ldrb	r2, [r2, #0]
    5086:	3a01      	subs	r2, #1
    5088:	62ba      	str	r2, [r7, #40]	; 0x28
    508a:	0011      	movs	r1, r2
    508c:	3101      	adds	r1, #1
    508e:	60b9      	str	r1, [r7, #8]
    5090:	2100      	movs	r1, #0
    5092:	60f9      	str	r1, [r7, #12]
    5094:	68b9      	ldr	r1, [r7, #8]
    5096:	0f49      	lsrs	r1, r1, #29
    5098:	68f8      	ldr	r0, [r7, #12]
    509a:	00c6      	lsls	r6, r0, #3
    509c:	430e      	orrs	r6, r1
    509e:	68b9      	ldr	r1, [r7, #8]
    50a0:	00cd      	lsls	r5, r1, #3
    50a2:	0011      	movs	r1, r2
    50a4:	3101      	adds	r1, #1
    50a6:	6039      	str	r1, [r7, #0]
    50a8:	2100      	movs	r1, #0
    50aa:	6079      	str	r1, [r7, #4]
    50ac:	683d      	ldr	r5, [r7, #0]
    50ae:	687e      	ldr	r6, [r7, #4]
    50b0:	0029      	movs	r1, r5
    50b2:	0f49      	lsrs	r1, r1, #29
    50b4:	0030      	movs	r0, r6
    50b6:	00c4      	lsls	r4, r0, #3
    50b8:	430c      	orrs	r4, r1
    50ba:	0029      	movs	r1, r5
    50bc:	00cb      	lsls	r3, r1, #3
    50be:	0013      	movs	r3, r2
    50c0:	3301      	adds	r3, #1
    50c2:	3307      	adds	r3, #7
    50c4:	08db      	lsrs	r3, r3, #3
    50c6:	00db      	lsls	r3, r3, #3
    50c8:	466a      	mov	r2, sp
    50ca:	1ad3      	subs	r3, r2, r3
    50cc:	469d      	mov	sp, r3
    50ce:	466b      	mov	r3, sp
    50d0:	3300      	adds	r3, #0
    50d2:	627b      	str	r3, [r7, #36]	; 0x24
	buffer[0] = strlen((const char*)string) * 2 + 2;
    50d4:	69bb      	ldr	r3, [r7, #24]
    50d6:	0018      	movs	r0, r3
    50d8:	f00c fa3a 	bl	11550 <strlen>
    50dc:	0003      	movs	r3, r0
    50de:	3301      	adds	r3, #1
    50e0:	b2db      	uxtb	r3, r3
    50e2:	18db      	adds	r3, r3, r3
    50e4:	b2da      	uxtb	r2, r3
    50e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    50e8:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x03;
    50ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    50ec:	2203      	movs	r2, #3
    50ee:	705a      	strb	r2, [r3, #1]
	for (i = 2; i < maxlen && *string; i++) {
    50f0:	231f      	movs	r3, #31
    50f2:	2210      	movs	r2, #16
    50f4:	4694      	mov	ip, r2
    50f6:	44bc      	add	ip, r7
    50f8:	4463      	add	r3, ip
    50fa:	2202      	movs	r2, #2
    50fc:	701a      	strb	r2, [r3, #0]
    50fe:	231f      	movs	r3, #31
    5100:	2210      	movs	r2, #16
    5102:	4694      	mov	ip, r2
    5104:	44bc      	add	ip, r7
    5106:	4463      	add	r3, ip
    5108:	781a      	ldrb	r2, [r3, #0]
    510a:	2317      	movs	r3, #23
    510c:	18fb      	adds	r3, r7, r3
    510e:	781b      	ldrb	r3, [r3, #0]
    5110:	429a      	cmp	r2, r3
    5112:	da39      	bge.n	5188 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12c>
    5114:	69bb      	ldr	r3, [r7, #24]
    5116:	781b      	ldrb	r3, [r3, #0]
    5118:	2b00      	cmp	r3, #0
    511a:	d035      	beq.n	5188 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12c>
		buffer[i++] = *string++;
    511c:	231f      	movs	r3, #31
    511e:	2210      	movs	r2, #16
    5120:	4694      	mov	ip, r2
    5122:	44bc      	add	ip, r7
    5124:	4463      	add	r3, ip
    5126:	781b      	ldrb	r3, [r3, #0]
    5128:	221f      	movs	r2, #31
    512a:	2110      	movs	r1, #16
    512c:	468c      	mov	ip, r1
    512e:	44bc      	add	ip, r7
    5130:	4462      	add	r2, ip
    5132:	1c59      	adds	r1, r3, #1
    5134:	7011      	strb	r1, [r2, #0]
    5136:	0019      	movs	r1, r3
    5138:	69bb      	ldr	r3, [r7, #24]
    513a:	1c5a      	adds	r2, r3, #1
    513c:	61ba      	str	r2, [r7, #24]
    513e:	781a      	ldrb	r2, [r3, #0]
    5140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5142:	545a      	strb	r2, [r3, r1]
		if (i == maxlen) break;
    5144:	231f      	movs	r3, #31
    5146:	2210      	movs	r2, #16
    5148:	18ba      	adds	r2, r7, r2
    514a:	18d2      	adds	r2, r2, r3
    514c:	2317      	movs	r3, #23
    514e:	18fb      	adds	r3, r7, r3
    5150:	7812      	ldrb	r2, [r2, #0]
    5152:	781b      	ldrb	r3, [r3, #0]
    5154:	429a      	cmp	r2, r3
    5156:	d016      	beq.n	5186 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12a>
		buffer[i] = 0;
    5158:	231f      	movs	r3, #31
    515a:	2210      	movs	r2, #16
    515c:	4694      	mov	ip, r2
    515e:	44bc      	add	ip, r7
    5160:	4463      	add	r3, ip
    5162:	781b      	ldrb	r3, [r3, #0]
    5164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5166:	2100      	movs	r1, #0
    5168:	54d1      	strb	r1, [r2, r3]
	for (i = 2; i < maxlen && *string; i++) {
    516a:	231f      	movs	r3, #31
    516c:	2210      	movs	r2, #16
    516e:	4694      	mov	ip, r2
    5170:	44bc      	add	ip, r7
    5172:	4463      	add	r3, ip
    5174:	781a      	ldrb	r2, [r3, #0]
    5176:	231f      	movs	r3, #31
    5178:	2110      	movs	r1, #16
    517a:	468c      	mov	ip, r1
    517c:	44bc      	add	ip, r7
    517e:	4463      	add	r3, ip
    5180:	3201      	adds	r2, #1
    5182:	701a      	strb	r2, [r3, #0]
    5184:	e7bb      	b.n	50fe <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xa2>
		if (i == maxlen) break;
    5186:	46c0      	nop			; (mov r8, r8)
	return USBDevice.sendControl(buffer, i);
    5188:	6a79      	ldr	r1, [r7, #36]	; 0x24
    518a:	231f      	movs	r3, #31
    518c:	2210      	movs	r2, #16
    518e:	4694      	mov	ip, r2
    5190:	44bc      	add	ip, r7
    5192:	4463      	add	r3, ip
    5194:	781a      	ldrb	r2, [r3, #0]
    5196:	4b07      	ldr	r3, [pc, #28]	; (51b4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x158>)
    5198:	0018      	movs	r0, r3
    519a:	f000 ff1d 	bl	5fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
    519e:	0003      	movs	r3, r0
    51a0:	1e5a      	subs	r2, r3, #1
    51a2:	4193      	sbcs	r3, r2
    51a4:	b2db      	uxtb	r3, r3
    51a6:	693a      	ldr	r2, [r7, #16]
    51a8:	4695      	mov	sp, r2
}
    51aa:	0018      	movs	r0, r3
    51ac:	46bd      	mov	sp, r7
    51ae:	b00d      	add	sp, #52	; 0x34
    51b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51b2:	46c0      	nop			; (mov r8, r8)
    51b4:	200008f0 	.word	0x200008f0

000051b8 <_ZN14USBDeviceClass12packMessagesEb>:
bool _pack_message = false;
uint16_t _pack_size = 0;
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
    51b8:	b580      	push	{r7, lr}
    51ba:	b082      	sub	sp, #8
    51bc:	af00      	add	r7, sp, #0
    51be:	6078      	str	r0, [r7, #4]
    51c0:	000a      	movs	r2, r1
    51c2:	1cfb      	adds	r3, r7, #3
    51c4:	701a      	strb	r2, [r3, #0]
	if (val) {
    51c6:	1cfb      	adds	r3, r7, #3
    51c8:	781b      	ldrb	r3, [r3, #0]
    51ca:	2b00      	cmp	r3, #0
    51cc:	d006      	beq.n	51dc <_ZN14USBDeviceClass12packMessagesEb+0x24>
		_pack_message = true;
    51ce:	4b0b      	ldr	r3, [pc, #44]	; (51fc <_ZN14USBDeviceClass12packMessagesEb+0x44>)
    51d0:	2201      	movs	r2, #1
    51d2:	701a      	strb	r2, [r3, #0]
		_pack_size = 0;
    51d4:	4b0a      	ldr	r3, [pc, #40]	; (5200 <_ZN14USBDeviceClass12packMessagesEb+0x48>)
    51d6:	2200      	movs	r2, #0
    51d8:	801a      	strh	r2, [r3, #0]
	} else {
		_pack_message = false;
		sendControl(_pack_buffer, _pack_size);
	}
}
    51da:	e00a      	b.n	51f2 <_ZN14USBDeviceClass12packMessagesEb+0x3a>
		_pack_message = false;
    51dc:	4b07      	ldr	r3, [pc, #28]	; (51fc <_ZN14USBDeviceClass12packMessagesEb+0x44>)
    51de:	2200      	movs	r2, #0
    51e0:	701a      	strb	r2, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    51e2:	4b07      	ldr	r3, [pc, #28]	; (5200 <_ZN14USBDeviceClass12packMessagesEb+0x48>)
    51e4:	881b      	ldrh	r3, [r3, #0]
    51e6:	001a      	movs	r2, r3
    51e8:	4906      	ldr	r1, [pc, #24]	; (5204 <_ZN14USBDeviceClass12packMessagesEb+0x4c>)
    51ea:	687b      	ldr	r3, [r7, #4]
    51ec:	0018      	movs	r0, r3
    51ee:	f000 fef3 	bl	5fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    51f2:	46c0      	nop			; (mov r8, r8)
    51f4:	46bd      	mov	sp, r7
    51f6:	b002      	add	sp, #8
    51f8:	bd80      	pop	{r7, pc}
    51fa:	46c0      	nop			; (mov r8, r8)
    51fc:	200007e5 	.word	0x200007e5
    5200:	200007e6 	.word	0x200007e6
    5204:	200007e8 	.word	0x200007e8

00005208 <_ZN14USBDeviceClass14SendInterfacesEPm>:

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
    5208:	b580      	push	{r7, lr}
    520a:	b084      	sub	sp, #16
    520c:	af00      	add	r7, sp, #0
    520e:	6078      	str	r0, [r7, #4]
    5210:	6039      	str	r1, [r7, #0]
	uint8_t interfaces = 0;
    5212:	230f      	movs	r3, #15
    5214:	18fb      	adds	r3, r7, r3
    5216:	2200      	movs	r2, #0
    5218:	701a      	strb	r2, [r3, #0]

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    521a:	230f      	movs	r3, #15
    521c:	18fb      	adds	r3, r7, r3
    521e:	0018      	movs	r0, r3
    5220:	f009 f91c 	bl	e45c <_Z16CDC_GetInterfacePh>
    5224:	0002      	movs	r2, r0
    5226:	683b      	ldr	r3, [r7, #0]
    5228:	681b      	ldr	r3, [r3, #0]
    522a:	189a      	adds	r2, r3, r2
    522c:	683b      	ldr	r3, [r7, #0]
    522e:	601a      	str	r2, [r3, #0]
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
    5230:	f009 faf2 	bl	e818 <_Z12PluggableUSBv>
    5234:	0002      	movs	r2, r0
    5236:	230f      	movs	r3, #15
    5238:	18fb      	adds	r3, r7, r3
    523a:	0019      	movs	r1, r3
    523c:	0010      	movs	r0, r2
    523e:	f009 fa5b 	bl	e6f8 <_ZN13PluggableUSB_12getInterfaceEPh>
    5242:	0002      	movs	r2, r0
    5244:	683b      	ldr	r3, [r7, #0]
    5246:	681b      	ldr	r3, [r3, #0]
    5248:	189a      	adds	r2, r3, r2
    524a:	683b      	ldr	r3, [r7, #0]
    524c:	601a      	str	r2, [r3, #0]
#endif

	return interfaces;
    524e:	230f      	movs	r3, #15
    5250:	18fb      	adds	r3, r7, r3
    5252:	781b      	ldrb	r3, [r3, #0]
}
    5254:	0018      	movs	r0, r3
    5256:	46bd      	mov	sp, r7
    5258:	b004      	add	sp, #16
    525a:	bd80      	pop	{r7, pc}

0000525c <_ZN14USBDeviceClass17sendConfigurationEm>:

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    525c:	b590      	push	{r4, r7, lr}
    525e:	b089      	sub	sp, #36	; 0x24
    5260:	af00      	add	r7, sp, #0
    5262:	6078      	str	r0, [r7, #4]
    5264:	6039      	str	r1, [r7, #0]
	uint32_t total = 0;
    5266:	2300      	movs	r3, #0
    5268:	61bb      	str	r3, [r7, #24]
	// Count and measure interfaces
	_dry_run = true;
    526a:	4b32      	ldr	r3, [pc, #200]	; (5334 <_ZN14USBDeviceClass17sendConfigurationEm+0xd8>)
    526c:	2201      	movs	r2, #1
    526e:	701a      	strb	r2, [r3, #0]
	uint8_t interfaces = SendInterfaces(&total);
    5270:	231f      	movs	r3, #31
    5272:	18fc      	adds	r4, r7, r3
    5274:	2318      	movs	r3, #24
    5276:	18fa      	adds	r2, r7, r3
    5278:	687b      	ldr	r3, [r7, #4]
    527a:	0011      	movs	r1, r2
    527c:	0018      	movs	r0, r3
    527e:	f7ff ffc3 	bl	5208 <_ZN14USBDeviceClass14SendInterfacesEPm>
    5282:	0003      	movs	r3, r0
    5284:	7023      	strb	r3, [r4, #0]

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    5286:	230c      	movs	r3, #12
    5288:	18fb      	adds	r3, r7, r3
    528a:	0018      	movs	r0, r3
    528c:	2309      	movs	r3, #9
    528e:	001a      	movs	r2, r3
    5290:	2100      	movs	r1, #0
    5292:	f00b fac7 	bl	10824 <memset>
    5296:	230c      	movs	r3, #12
    5298:	18fb      	adds	r3, r7, r3
    529a:	2209      	movs	r2, #9
    529c:	701a      	strb	r2, [r3, #0]
    529e:	230c      	movs	r3, #12
    52a0:	18fb      	adds	r3, r7, r3
    52a2:	2202      	movs	r2, #2
    52a4:	705a      	strb	r2, [r3, #1]
    52a6:	230c      	movs	r3, #12
    52a8:	18fb      	adds	r3, r7, r3
    52aa:	2201      	movs	r2, #1
    52ac:	715a      	strb	r2, [r3, #5]
    52ae:	230c      	movs	r3, #12
    52b0:	18fb      	adds	r3, r7, r3
    52b2:	22a0      	movs	r2, #160	; 0xa0
    52b4:	71da      	strb	r2, [r3, #7]
    52b6:	230c      	movs	r3, #12
    52b8:	18fb      	adds	r3, r7, r3
    52ba:	22fa      	movs	r2, #250	; 0xfa
    52bc:	721a      	strb	r2, [r3, #8]
    52be:	69bb      	ldr	r3, [r7, #24]
    52c0:	b29b      	uxth	r3, r3
    52c2:	3309      	adds	r3, #9
    52c4:	b29a      	uxth	r2, r3
    52c6:	230c      	movs	r3, #12
    52c8:	18fb      	adds	r3, r7, r3
    52ca:	805a      	strh	r2, [r3, #2]
    52cc:	230c      	movs	r3, #12
    52ce:	18fb      	adds	r3, r7, r3
    52d0:	221f      	movs	r2, #31
    52d2:	18ba      	adds	r2, r7, r2
    52d4:	7812      	ldrb	r2, [r2, #0]
    52d6:	711a      	strb	r2, [r3, #4]
	_Pragma("pack()")

	//	Now send them
	_dry_run = false;
    52d8:	4b16      	ldr	r3, [pc, #88]	; (5334 <_ZN14USBDeviceClass17sendConfigurationEm+0xd8>)
    52da:	2200      	movs	r2, #0
    52dc:	701a      	strb	r2, [r3, #0]

	if (maxlen == sizeof(ConfigDescriptor)) {
    52de:	683b      	ldr	r3, [r7, #0]
    52e0:	2b09      	cmp	r3, #9
    52e2:	d108      	bne.n	52f6 <_ZN14USBDeviceClass17sendConfigurationEm+0x9a>
		sendControl(&config, sizeof(ConfigDescriptor));
    52e4:	230c      	movs	r3, #12
    52e6:	18f9      	adds	r1, r7, r3
    52e8:	687b      	ldr	r3, [r7, #4]
    52ea:	2209      	movs	r2, #9
    52ec:	0018      	movs	r0, r3
    52ee:	f000 fe73 	bl	5fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
		return true;
    52f2:	2301      	movs	r3, #1
    52f4:	e01a      	b.n	532c <_ZN14USBDeviceClass17sendConfigurationEm+0xd0>
	}

	total = 0;
    52f6:	2300      	movs	r3, #0
    52f8:	61bb      	str	r3, [r7, #24]

	packMessages(true);
    52fa:	687b      	ldr	r3, [r7, #4]
    52fc:	2101      	movs	r1, #1
    52fe:	0018      	movs	r0, r3
    5300:	f7ff ff5a 	bl	51b8 <_ZN14USBDeviceClass12packMessagesEb>
	sendControl(&config, sizeof(ConfigDescriptor));
    5304:	230c      	movs	r3, #12
    5306:	18f9      	adds	r1, r7, r3
    5308:	687b      	ldr	r3, [r7, #4]
    530a:	2209      	movs	r2, #9
    530c:	0018      	movs	r0, r3
    530e:	f000 fe63 	bl	5fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    5312:	2318      	movs	r3, #24
    5314:	18fa      	adds	r2, r7, r3
    5316:	687b      	ldr	r3, [r7, #4]
    5318:	0011      	movs	r1, r2
    531a:	0018      	movs	r0, r3
    531c:	f7ff ff74 	bl	5208 <_ZN14USBDeviceClass14SendInterfacesEPm>
	packMessages(false);
    5320:	687b      	ldr	r3, [r7, #4]
    5322:	2100      	movs	r1, #0
    5324:	0018      	movs	r0, r3
    5326:	f7ff ff47 	bl	51b8 <_ZN14USBDeviceClass12packMessagesEb>

	return true;
    532a:	2301      	movs	r3, #1
}
    532c:	0018      	movs	r0, r3
    532e:	46bd      	mov	sp, r7
    5330:	b009      	add	sp, #36	; 0x24
    5332:	bd90      	pop	{r4, r7, pc}
    5334:	200007e4 	.word	0x200007e4

00005338 <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
    5338:	b580      	push	{r7, lr}
    533a:	b084      	sub	sp, #16
    533c:	af00      	add	r7, sp, #0
    533e:	6078      	str	r0, [r7, #4]
    5340:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 8; i++) {
    5342:	2300      	movs	r3, #0
    5344:	60fb      	str	r3, [r7, #12]
    5346:	68fb      	ldr	r3, [r7, #12]
    5348:	2b07      	cmp	r3, #7
    534a:	dc1d      	bgt.n	5388 <_ZL5utox8mPc+0x50>
		int d = val & 0XF;
    534c:	687b      	ldr	r3, [r7, #4]
    534e:	220f      	movs	r2, #15
    5350:	4013      	ands	r3, r2
    5352:	60bb      	str	r3, [r7, #8]
		val = (val >> 4);
    5354:	687b      	ldr	r3, [r7, #4]
    5356:	091b      	lsrs	r3, r3, #4
    5358:	607b      	str	r3, [r7, #4]

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    535a:	68fb      	ldr	r3, [r7, #12]
    535c:	2207      	movs	r2, #7
    535e:	1ad3      	subs	r3, r2, r3
    5360:	001a      	movs	r2, r3
    5362:	683b      	ldr	r3, [r7, #0]
    5364:	189a      	adds	r2, r3, r2
    5366:	68bb      	ldr	r3, [r7, #8]
    5368:	2b09      	cmp	r3, #9
    536a:	dd04      	ble.n	5376 <_ZL5utox8mPc+0x3e>
    536c:	68bb      	ldr	r3, [r7, #8]
    536e:	b2db      	uxtb	r3, r3
    5370:	3337      	adds	r3, #55	; 0x37
    5372:	b2db      	uxtb	r3, r3
    5374:	e003      	b.n	537e <_ZL5utox8mPc+0x46>
    5376:	68bb      	ldr	r3, [r7, #8]
    5378:	b2db      	uxtb	r3, r3
    537a:	3330      	adds	r3, #48	; 0x30
    537c:	b2db      	uxtb	r3, r3
    537e:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < 8; i++) {
    5380:	68fb      	ldr	r3, [r7, #12]
    5382:	3301      	adds	r3, #1
    5384:	60fb      	str	r3, [r7, #12]
    5386:	e7de      	b.n	5346 <_ZL5utox8mPc+0xe>
	}
}
    5388:	46c0      	nop			; (mov r8, r8)
    538a:	46bd      	mov	sp, r7
    538c:	b004      	add	sp, #16
    538e:	bd80      	pop	{r7, pc}

00005390 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    5390:	b580      	push	{r7, lr}
    5392:	b098      	sub	sp, #96	; 0x60
    5394:	af00      	add	r7, sp, #0
    5396:	6078      	str	r0, [r7, #4]
    5398:	6039      	str	r1, [r7, #0]
	uint8_t t = setup.wValueH;
    539a:	2357      	movs	r3, #87	; 0x57
    539c:	18fb      	adds	r3, r7, r3
    539e:	683a      	ldr	r2, [r7, #0]
    53a0:	78d2      	ldrb	r2, [r2, #3]
    53a2:	701a      	strb	r2, [r3, #0]
	uint8_t desc_length = 0;
    53a4:	235f      	movs	r3, #95	; 0x5f
    53a6:	18fb      	adds	r3, r7, r3
    53a8:	2200      	movs	r2, #0
    53aa:	701a      	strb	r2, [r3, #0]
	bool _cdcComposite;
	int ret;
	const uint8_t *desc_addr = 0;
    53ac:	2300      	movs	r3, #0
    53ae:	65bb      	str	r3, [r7, #88]	; 0x58

	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    53b0:	2357      	movs	r3, #87	; 0x57
    53b2:	18fb      	adds	r3, r7, r3
    53b4:	781b      	ldrb	r3, [r3, #0]
    53b6:	2b02      	cmp	r3, #2
    53b8:	d10c      	bne.n	53d4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x44>
	{
		return USBDevice.sendConfiguration(setup.wLength);
    53ba:	683b      	ldr	r3, [r7, #0]
    53bc:	88db      	ldrh	r3, [r3, #6]
    53be:	001a      	movs	r2, r3
    53c0:	4b67      	ldr	r3, [pc, #412]	; (5560 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d0>)
    53c2:	0011      	movs	r1, r2
    53c4:	0018      	movs	r0, r3
    53c6:	f7ff ff49 	bl	525c <_ZN14USBDeviceClass17sendConfigurationEm>
    53ca:	0003      	movs	r3, r0
    53cc:	1e5a      	subs	r2, r3, #1
    53ce:	4193      	sbcs	r3, r2
    53d0:	b2db      	uxtb	r3, r3
    53d2:	e0c1      	b.n	5558 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}

#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    53d4:	f009 fa20 	bl	e818 <_Z12PluggableUSBv>
    53d8:	0002      	movs	r2, r0
    53da:	683b      	ldr	r3, [r7, #0]
    53dc:	0019      	movs	r1, r3
    53de:	0010      	movs	r0, r2
    53e0:	f009 f9b4 	bl	e74c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    53e4:	0003      	movs	r3, r0
    53e6:	653b      	str	r3, [r7, #80]	; 0x50
	if (ret != 0) {
    53e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    53ea:	2b00      	cmp	r3, #0
    53ec:	d005      	beq.n	53fa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x6a>
		return (ret > 0 ? true : false);
    53ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    53f0:	17da      	asrs	r2, r3, #31
    53f2:	1ad3      	subs	r3, r2, r3
    53f4:	0fdb      	lsrs	r3, r3, #31
    53f6:	b2db      	uxtb	r3, r3
    53f8:	e0ae      	b.n	5558 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}
#endif

	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    53fa:	2357      	movs	r3, #87	; 0x57
    53fc:	18fb      	adds	r3, r7, r3
    53fe:	781b      	ldrb	r3, [r3, #0]
    5400:	2b01      	cmp	r3, #1
    5402:	d11e      	bne.n	5442 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb2>
	{
		if (setup.wLength == 8)
    5404:	683b      	ldr	r3, [r7, #0]
    5406:	88db      	ldrh	r3, [r3, #6]
    5408:	2b08      	cmp	r3, #8
    540a:	d103      	bne.n	5414 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
			_cdcComposite = 1;
    540c:	235e      	movs	r3, #94	; 0x5e
    540e:	18fb      	adds	r3, r7, r3
    5410:	2201      	movs	r2, #1
    5412:	701a      	strb	r2, [r3, #0]

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;
    5414:	235e      	movs	r3, #94	; 0x5e
    5416:	18fb      	adds	r3, r7, r3
    5418:	781b      	ldrb	r3, [r3, #0]
    541a:	2b00      	cmp	r3, #0
    541c:	d001      	beq.n	5422 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x92>
    541e:	4b51      	ldr	r3, [pc, #324]	; (5564 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d4>)
    5420:	e000      	b.n	5424 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
    5422:	4b51      	ldr	r3, [pc, #324]	; (5568 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d8>)
    5424:	65bb      	str	r3, [r7, #88]	; 0x58

		if (*desc_addr > setup.wLength) {
    5426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5428:	781b      	ldrb	r3, [r3, #0]
    542a:	001a      	movs	r2, r3
    542c:	683b      	ldr	r3, [r7, #0]
    542e:	88db      	ldrh	r3, [r3, #6]
    5430:	429a      	cmp	r2, r3
    5432:	dc00      	bgt.n	5436 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa6>
    5434:	e078      	b.n	5528 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
			desc_length = setup.wLength;
    5436:	683b      	ldr	r3, [r7, #0]
    5438:	88da      	ldrh	r2, [r3, #6]
    543a:	235f      	movs	r3, #95	; 0x5f
    543c:	18fb      	adds	r3, r7, r3
    543e:	701a      	strb	r2, [r3, #0]
    5440:	e072      	b.n	5528 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    5442:	2357      	movs	r3, #87	; 0x57
    5444:	18fb      	adds	r3, r7, r3
    5446:	781b      	ldrb	r3, [r3, #0]
    5448:	2b03      	cmp	r3, #3
    544a:	d000      	beq.n	544e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xbe>
    544c:	e06c      	b.n	5528 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
	{
		if (setup.wValueL == 0) {
    544e:	683b      	ldr	r3, [r7, #0]
    5450:	789b      	ldrb	r3, [r3, #2]
    5452:	2b00      	cmp	r3, #0
    5454:	d109      	bne.n	546a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xda>
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
    5456:	4b45      	ldr	r3, [pc, #276]	; (556c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1dc>)
    5458:	65bb      	str	r3, [r7, #88]	; 0x58
#endif
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
    545a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    545c:	781b      	ldrb	r3, [r3, #0]
    545e:	001a      	movs	r2, r3
    5460:	683b      	ldr	r3, [r7, #0]
    5462:	88db      	ldrh	r3, [r3, #6]
    5464:	429a      	cmp	r2, r3
    5466:	dd5f      	ble.n	5528 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
    5468:	e059      	b.n	551e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x18e>
		else if (setup.wValueL == IPRODUCT) {
    546a:	683b      	ldr	r3, [r7, #0]
    546c:	789b      	ldrb	r3, [r3, #2]
    546e:	2b02      	cmp	r3, #2
    5470:	d109      	bne.n	5486 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xf6>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    5472:	683b      	ldr	r3, [r7, #0]
    5474:	88db      	ldrh	r3, [r3, #6]
    5476:	b2da      	uxtb	r2, r3
    5478:	493d      	ldr	r1, [pc, #244]	; (5570 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e0>)
    547a:	687b      	ldr	r3, [r7, #4]
    547c:	0018      	movs	r0, r3
    547e:	f7ff fded 	bl	505c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    5482:	0003      	movs	r3, r0
    5484:	e068      	b.n	5558 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
		else if (setup.wValueL == IMANUFACTURER) {
    5486:	683b      	ldr	r3, [r7, #0]
    5488:	789b      	ldrb	r3, [r3, #2]
    548a:	2b01      	cmp	r3, #1
    548c:	d109      	bne.n	54a2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x112>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    548e:	683b      	ldr	r3, [r7, #0]
    5490:	88db      	ldrh	r3, [r3, #6]
    5492:	b2da      	uxtb	r2, r3
    5494:	4937      	ldr	r1, [pc, #220]	; (5574 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e4>)
    5496:	687b      	ldr	r3, [r7, #4]
    5498:	0018      	movs	r0, r3
    549a:	f7ff fddf 	bl	505c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    549e:	0003      	movs	r3, r0
    54a0:	e05a      	b.n	5558 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
		else if (setup.wValueL == ISERIAL) {
    54a2:	683b      	ldr	r3, [r7, #0]
    54a4:	789b      	ldrb	r3, [r3, #2]
    54a6:	2b03      	cmp	r3, #3
    54a8:	d137      	bne.n	551a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x18a>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    54aa:	4b33      	ldr	r3, [pc, #204]	; (5578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e8>)
    54ac:	681b      	ldr	r3, [r3, #0]
    54ae:	220c      	movs	r2, #12
    54b0:	18ba      	adds	r2, r7, r2
    54b2:	0011      	movs	r1, r2
    54b4:	0018      	movs	r0, r3
    54b6:	f7ff ff3f 	bl	5338 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    54ba:	4b30      	ldr	r3, [pc, #192]	; (557c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1ec>)
    54bc:	681a      	ldr	r2, [r3, #0]
    54be:	230c      	movs	r3, #12
    54c0:	18fb      	adds	r3, r7, r3
    54c2:	3308      	adds	r3, #8
    54c4:	0019      	movs	r1, r3
    54c6:	0010      	movs	r0, r2
    54c8:	f7ff ff36 	bl	5338 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    54cc:	4b2c      	ldr	r3, [pc, #176]	; (5580 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1f0>)
    54ce:	681a      	ldr	r2, [r3, #0]
    54d0:	230c      	movs	r3, #12
    54d2:	18fb      	adds	r3, r7, r3
    54d4:	3310      	adds	r3, #16
    54d6:	0019      	movs	r1, r3
    54d8:	0010      	movs	r0, r2
    54da:	f7ff ff2d 	bl	5338 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    54de:	4b29      	ldr	r3, [pc, #164]	; (5584 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1f4>)
    54e0:	681a      	ldr	r2, [r3, #0]
    54e2:	230c      	movs	r3, #12
    54e4:	18fb      	adds	r3, r7, r3
    54e6:	3318      	adds	r3, #24
    54e8:	0019      	movs	r1, r3
    54ea:	0010      	movs	r0, r2
    54ec:	f7ff ff24 	bl	5338 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    54f0:	f009 f992 	bl	e818 <_Z12PluggableUSBv>
    54f4:	0002      	movs	r2, r0
    54f6:	230c      	movs	r3, #12
    54f8:	18fb      	adds	r3, r7, r3
    54fa:	3320      	adds	r3, #32
    54fc:	0019      	movs	r1, r3
    54fe:	0010      	movs	r0, r2
    5500:	f009 f947 	bl	e792 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    5504:	683b      	ldr	r3, [r7, #0]
    5506:	88db      	ldrh	r3, [r3, #6]
    5508:	b2da      	uxtb	r2, r3
    550a:	230c      	movs	r3, #12
    550c:	18f9      	adds	r1, r7, r3
    550e:	687b      	ldr	r3, [r7, #4]
    5510:	0018      	movs	r0, r3
    5512:	f7ff fda3 	bl	505c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    5516:	0003      	movs	r3, r0
    5518:	e01e      	b.n	5558 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
			return false;
    551a:	2300      	movs	r3, #0
    551c:	e01c      	b.n	5558 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
			desc_length = setup.wLength;
    551e:	683b      	ldr	r3, [r7, #0]
    5520:	88da      	ldrh	r2, [r3, #6]
    5522:	235f      	movs	r3, #95	; 0x5f
    5524:	18fb      	adds	r3, r7, r3
    5526:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}

	if (desc_addr == 0) {
    5528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    552a:	2b00      	cmp	r3, #0
    552c:	d101      	bne.n	5532 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1a2>
		return false;
    552e:	2300      	movs	r3, #0
    5530:	e012      	b.n	5558 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}

	if (desc_length == 0) {
    5532:	235f      	movs	r3, #95	; 0x5f
    5534:	18fb      	adds	r3, r7, r3
    5536:	781b      	ldrb	r3, [r3, #0]
    5538:	2b00      	cmp	r3, #0
    553a:	d104      	bne.n	5546 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1b6>
		desc_length = *desc_addr;
    553c:	235f      	movs	r3, #95	; 0x5f
    553e:	18fb      	adds	r3, r7, r3
    5540:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5542:	7812      	ldrb	r2, [r2, #0]
    5544:	701a      	strb	r2, [r3, #0]
	}

	sendControl(desc_addr, desc_length);
    5546:	235f      	movs	r3, #95	; 0x5f
    5548:	18fb      	adds	r3, r7, r3
    554a:	781a      	ldrb	r2, [r3, #0]
    554c:	6db9      	ldr	r1, [r7, #88]	; 0x58
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	0018      	movs	r0, r3
    5552:	f000 fd41 	bl	5fd8 <_ZN14USBDeviceClass11sendControlEPKvm>

	return true;
    5556:	2301      	movs	r3, #1
}
    5558:	0018      	movs	r0, r3
    555a:	46bd      	mov	sp, r7
    555c:	b018      	add	sp, #96	; 0x60
    555e:	bd80      	pop	{r7, pc}
    5560:	200008f0 	.word	0x200008f0
    5564:	00013470 	.word	0x00013470
    5568:	00013484 	.word	0x00013484
    556c:	00013450 	.word	0x00013450
    5570:	00013454 	.word	0x00013454
    5574:	00013464 	.word	0x00013464
    5578:	0080a00c 	.word	0x0080a00c
    557c:	0080a040 	.word	0x0080a040
    5580:	0080a044 	.word	0x0080a044
    5584:	0080a048 	.word	0x0080a048

00005588 <_ZN14USBDeviceClass14handleEndpointEh>:
	usbd.noRunInStandby();
}


void USBDeviceClass::handleEndpoint(uint8_t ep)
{
    5588:	b580      	push	{r7, lr}
    558a:	b082      	sub	sp, #8
    558c:	af00      	add	r7, sp, #0
    558e:	6078      	str	r0, [r7, #4]
    5590:	000a      	movs	r2, r1
    5592:	1cfb      	adds	r3, r7, #3
    5594:	701a      	strb	r2, [r3, #0]
#if defined(CDC_ENABLED)
	if (ep == CDC_ENDPOINT_IN)
    5596:	1cfb      	adds	r3, r7, #3
    5598:	781b      	ldrb	r3, [r3, #0]
    559a:	2b03      	cmp	r3, #3
    559c:	d109      	bne.n	55b2 <_ZN14USBDeviceClass14handleEndpointEh+0x2a>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_IN);
    559e:	4b0e      	ldr	r3, [pc, #56]	; (55d8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    55a0:	2103      	movs	r1, #3
    55a2:	0018      	movs	r0, r3
    55a4:	f7ff f826 	bl	45f4 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_IN);
    55a8:	4b0b      	ldr	r3, [pc, #44]	; (55d8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    55aa:	2103      	movs	r1, #3
    55ac:	0018      	movs	r0, r3
    55ae:	f7fe ff25 	bl	43fc <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
	if (ep == CDC_ENDPOINT_ACM)
    55b2:	1cfb      	adds	r3, r7, #3
    55b4:	781b      	ldrb	r3, [r3, #0]
    55b6:	2b01      	cmp	r3, #1
    55b8:	d109      	bne.n	55ce <_ZN14USBDeviceClass14handleEndpointEh+0x46>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_ACM);
    55ba:	4b07      	ldr	r3, [pc, #28]	; (55d8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    55bc:	2101      	movs	r1, #1
    55be:	0018      	movs	r0, r3
    55c0:	f7ff f818 	bl	45f4 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_ACM);
    55c4:	4b04      	ldr	r3, [pc, #16]	; (55d8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    55c6:	2101      	movs	r1, #1
    55c8:	0018      	movs	r0, r3
    55ca:	f7fe ff17 	bl	43fc <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
#endif

#if defined(PLUGGABLE_USB_ENABLED)
	// Empty
#endif
}
    55ce:	46c0      	nop			; (mov r8, r8)
    55d0:	46bd      	mov	sp, r7
    55d2:	b002      	add	sp, #8
    55d4:	bd80      	pop	{r7, pc}
    55d6:	46c0      	nop			; (mov r8, r8)
    55d8:	20000338 	.word	0x20000338

000055dc <_ZN14USBDeviceClass4initEv>:

void USBDeviceClass::init()
{
    55dc:	b580      	push	{r7, lr}
    55de:	b082      	sub	sp, #8
    55e0:	af00      	add	r7, sp, #0
    55e2:	6078      	str	r0, [r7, #4]
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    55e4:	4b42      	ldr	r3, [pc, #264]	; (56f0 <_ZN14USBDeviceClass4initEv+0x114>)
    55e6:	2200      	movs	r2, #0
    55e8:	701a      	strb	r2, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    55ea:	2101      	movs	r1, #1
    55ec:	201f      	movs	r0, #31
    55ee:	f001 f929 	bl	6844 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    55f2:	2101      	movs	r1, #1
    55f4:	201f      	movs	r0, #31
    55f6:	f001 fa4f 	bl	6a98 <digitalWrite>
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    55fa:	4b3e      	ldr	r3, [pc, #248]	; (56f4 <_ZN14USBDeviceClass4initEv+0x118>)
    55fc:	2200      	movs	r2, #0
    55fe:	701a      	strb	r2, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    5600:	2101      	movs	r1, #1
    5602:	201e      	movs	r0, #30
    5604:	f001 f91e 	bl	6844 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    5608:	2101      	movs	r1, #1
    560a:	201e      	movs	r0, #30
    560c:	f001 fa44 	bl	6a98 <digitalWrite>
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5610:	4b39      	ldr	r3, [pc, #228]	; (56f8 <_ZN14USBDeviceClass4initEv+0x11c>)
    5612:	4a39      	ldr	r2, [pc, #228]	; (56f8 <_ZN14USBDeviceClass4initEv+0x11c>)
    5614:	69d2      	ldr	r2, [r2, #28]
    5616:	2120      	movs	r1, #32
    5618:	430a      	orrs	r2, r1
    561a:	61da      	str	r2, [r3, #28]

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    561c:	4937      	ldr	r1, [pc, #220]	; (56fc <_ZN14USBDeviceClass4initEv+0x120>)
    561e:	2258      	movs	r2, #88	; 0x58
    5620:	5c8b      	ldrb	r3, [r1, r2]
    5622:	2001      	movs	r0, #1
    5624:	4303      	orrs	r3, r0
    5626:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    5628:	4a34      	ldr	r2, [pc, #208]	; (56fc <_ZN14USBDeviceClass4initEv+0x120>)
    562a:	4934      	ldr	r1, [pc, #208]	; (56fc <_ZN14USBDeviceClass4initEv+0x120>)
    562c:	233c      	movs	r3, #60	; 0x3c
    562e:	5ccb      	ldrb	r3, [r1, r3]
    5630:	b2db      	uxtb	r3, r3
    5632:	210f      	movs	r1, #15
    5634:	438b      	bics	r3, r1
    5636:	b2d9      	uxtb	r1, r3
    5638:	233c      	movs	r3, #60	; 0x3c
    563a:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    563c:	4a2f      	ldr	r2, [pc, #188]	; (56fc <_ZN14USBDeviceClass4initEv+0x120>)
    563e:	492f      	ldr	r1, [pc, #188]	; (56fc <_ZN14USBDeviceClass4initEv+0x120>)
    5640:	233c      	movs	r3, #60	; 0x3c
    5642:	5ccb      	ldrb	r3, [r1, r3]
    5644:	b2db      	uxtb	r3, r3
    5646:	2106      	movs	r1, #6
    5648:	430b      	orrs	r3, r1
    564a:	b2d9      	uxtb	r1, r3
    564c:	233c      	movs	r3, #60	; 0x3c
    564e:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    5650:	492a      	ldr	r1, [pc, #168]	; (56fc <_ZN14USBDeviceClass4initEv+0x120>)
    5652:	2259      	movs	r2, #89	; 0x59
    5654:	5c8b      	ldrb	r3, [r1, r2]
    5656:	2001      	movs	r0, #1
    5658:	4303      	orrs	r3, r0
    565a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    565c:	4a27      	ldr	r2, [pc, #156]	; (56fc <_ZN14USBDeviceClass4initEv+0x120>)
    565e:	4927      	ldr	r1, [pc, #156]	; (56fc <_ZN14USBDeviceClass4initEv+0x120>)
    5660:	233c      	movs	r3, #60	; 0x3c
    5662:	5ccb      	ldrb	r3, [r1, r3]
    5664:	b2db      	uxtb	r3, r3
    5666:	210f      	movs	r1, #15
    5668:	400b      	ands	r3, r1
    566a:	b2d9      	uxtb	r1, r3
    566c:	233c      	movs	r3, #60	; 0x3c
    566e:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    5670:	4a22      	ldr	r2, [pc, #136]	; (56fc <_ZN14USBDeviceClass4initEv+0x120>)
    5672:	4922      	ldr	r1, [pc, #136]	; (56fc <_ZN14USBDeviceClass4initEv+0x120>)
    5674:	233c      	movs	r3, #60	; 0x3c
    5676:	5ccb      	ldrb	r3, [r1, r3]
    5678:	b2db      	uxtb	r3, r3
    567a:	2160      	movs	r1, #96	; 0x60
    567c:	430b      	orrs	r3, r1
    567e:	b2d9      	uxtb	r1, r3
    5680:	233c      	movs	r3, #60	; 0x3c
    5682:	54d1      	strb	r1, [r2, r3]

	// Put Generic Clock Generator 0 as source for Generic Clock Multiplexer 6 (USB reference)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    5684:	4b1e      	ldr	r3, [pc, #120]	; (5700 <_ZN14USBDeviceClass4initEv+0x124>)
    5686:	4a1f      	ldr	r2, [pc, #124]	; (5704 <_ZN14USBDeviceClass4initEv+0x128>)
    5688:	805a      	strh	r2, [r3, #2]
	                    GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
	                    GCLK_CLKCTRL_CLKEN;
	while (GCLK->STATUS.bit.SYNCBUSY)
    568a:	4b1d      	ldr	r3, [pc, #116]	; (5700 <_ZN14USBDeviceClass4initEv+0x124>)
    568c:	785b      	ldrb	r3, [r3, #1]
    568e:	061b      	lsls	r3, r3, #24
    5690:	0fdb      	lsrs	r3, r3, #31
    5692:	b2db      	uxtb	r3, r3
    5694:	2b00      	cmp	r3, #0
    5696:	d000      	beq.n	569a <_ZN14USBDeviceClass4initEv+0xbe>
    5698:	e7f7      	b.n	568a <_ZN14USBDeviceClass4initEv+0xae>
		;

	USB_SetHandler(&UDD_Handler);
    569a:	4b1b      	ldr	r3, [pc, #108]	; (5708 <_ZN14USBDeviceClass4initEv+0x12c>)
    569c:	0018      	movs	r0, r3
    569e:	f7fd fb9d 	bl	2ddc <USB_SetHandler>

	// Reset USB Device
	usbd.reset();
    56a2:	4b1a      	ldr	r3, [pc, #104]	; (570c <_ZN14USBDeviceClass4initEv+0x130>)
    56a4:	0018      	movs	r0, r3
    56a6:	f7ff f91f 	bl	48e8 <_ZN20USBDevice_SAMD21G18x5resetEv>

	usbd.calibrate();
    56aa:	4b18      	ldr	r3, [pc, #96]	; (570c <_ZN14USBDeviceClass4initEv+0x130>)
    56ac:	0018      	movs	r0, r3
    56ae:	f7ff f93f 	bl	4930 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	usbd.setUSBDeviceMode();
    56b2:	4b16      	ldr	r3, [pc, #88]	; (570c <_ZN14USBDeviceClass4initEv+0x130>)
    56b4:	0018      	movs	r0, r3
    56b6:	f7fe fd2d 	bl	4114 <_ZN20USBDevice_SAMD21G18x16setUSBDeviceModeEv>
	usbd.runInStandby();
    56ba:	4b14      	ldr	r3, [pc, #80]	; (570c <_ZN14USBDeviceClass4initEv+0x130>)
    56bc:	0018      	movs	r0, r3
    56be:	f7fe fd37 	bl	4130 <_ZN20USBDevice_SAMD21G18x12runInStandbyEv>
	usbd.setFullSpeed();
    56c2:	4b12      	ldr	r3, [pc, #72]	; (570c <_ZN14USBDeviceClass4initEv+0x130>)
    56c4:	0018      	movs	r0, r3
    56c6:	f7fe fd41 	bl	414c <_ZN20USBDevice_SAMD21G18x12setFullSpeedEv>

	// Configure interrupts
	NVIC_SetPriority((IRQn_Type) USB_IRQn, 0UL);
    56ca:	2100      	movs	r1, #0
    56cc:	2007      	movs	r0, #7
    56ce:	f7fe fc65 	bl	3f9c <__NVIC_SetPriority>
	NVIC_EnableIRQ((IRQn_Type) USB_IRQn);
    56d2:	2007      	movs	r0, #7
    56d4:	f7fe fc48 	bl	3f68 <__NVIC_EnableIRQ>

	usbd.enable();
    56d8:	4b0c      	ldr	r3, [pc, #48]	; (570c <_ZN14USBDeviceClass4initEv+0x130>)
    56da:	0018      	movs	r0, r3
    56dc:	f7fe fd0c 	bl	40f8 <_ZN20USBDevice_SAMD21G18x6enableEv>

	initialized = true;
    56e0:	687b      	ldr	r3, [r7, #4]
    56e2:	2201      	movs	r2, #1
    56e4:	701a      	strb	r2, [r3, #0]
}
    56e6:	46c0      	nop			; (mov r8, r8)
    56e8:	46bd      	mov	sp, r7
    56ea:	b002      	add	sp, #8
    56ec:	bd80      	pop	{r7, pc}
    56ee:	46c0      	nop			; (mov r8, r8)
    56f0:	2000043c 	.word	0x2000043c
    56f4:	2000043d 	.word	0x2000043d
    56f8:	40000400 	.word	0x40000400
    56fc:	41004400 	.word	0x41004400
    5700:	40000c00 	.word	0x40000c00
    5704:	00004006 	.word	0x00004006
    5708:	00005045 	.word	0x00005045
    570c:	20000338 	.word	0x20000338

00005710 <_ZN14USBDeviceClass6attachEv>:

bool USBDeviceClass::attach()
{
    5710:	b580      	push	{r7, lr}
    5712:	b082      	sub	sp, #8
    5714:	af00      	add	r7, sp, #0
    5716:	6078      	str	r0, [r7, #4]
	if (!initialized)
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	781b      	ldrb	r3, [r3, #0]
    571c:	2201      	movs	r2, #1
    571e:	4053      	eors	r3, r2
    5720:	b2db      	uxtb	r3, r3
    5722:	2b00      	cmp	r3, #0
    5724:	d001      	beq.n	572a <_ZN14USBDeviceClass6attachEv+0x1a>
		return false;
    5726:	2300      	movs	r3, #0
    5728:	e00f      	b.n	574a <_ZN14USBDeviceClass6attachEv+0x3a>

	usbd.attach();
    572a:	4b0a      	ldr	r3, [pc, #40]	; (5754 <_ZN14USBDeviceClass6attachEv+0x44>)
    572c:	0018      	movs	r0, r3
    572e:	f7fe fd1b 	bl	4168 <_ZN20USBDevice_SAMD21G18x6attachEv>
	usbd.enableEndOfResetInterrupt();
    5732:	4b08      	ldr	r3, [pc, #32]	; (5754 <_ZN14USBDeviceClass6attachEv+0x44>)
    5734:	0018      	movs	r0, r3
    5736:	f7fe fd3f 	bl	41b8 <_ZN20USBDevice_SAMD21G18x25enableEndOfResetInterruptEv>
	usbd.enableStartOfFrameInterrupt();
    573a:	4b06      	ldr	r3, [pc, #24]	; (5754 <_ZN14USBDeviceClass6attachEv+0x44>)
    573c:	0018      	movs	r0, r3
    573e:	f7fe fd63 	bl	4208 <_ZN20USBDevice_SAMD21G18x27enableStartOfFrameInterruptEv>

	_usbConfiguration = 0;
    5742:	4b05      	ldr	r3, [pc, #20]	; (5758 <_ZN14USBDeviceClass6attachEv+0x48>)
    5744:	2200      	movs	r2, #0
    5746:	601a      	str	r2, [r3, #0]
	return true;
    5748:	2301      	movs	r3, #1
}
    574a:	0018      	movs	r0, r3
    574c:	46bd      	mov	sp, r7
    574e:	b002      	add	sp, #8
    5750:	bd80      	pop	{r7, pc}
    5752:	46c0      	nop			; (mov r8, r8)
    5754:	20000338 	.word	0x20000338
    5758:	20000440 	.word	0x20000440

0000575c <_ZN14USBDeviceClass10setAddressEm>:

void USBDeviceClass::setAddress(uint32_t addr)
{
    575c:	b580      	push	{r7, lr}
    575e:	b082      	sub	sp, #8
    5760:	af00      	add	r7, sp, #0
    5762:	6078      	str	r0, [r7, #4]
    5764:	6039      	str	r1, [r7, #0]
	usbd.epBank1SetByteCount(0, 0);
    5766:	4b1b      	ldr	r3, [pc, #108]	; (57d4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    5768:	2200      	movs	r2, #0
    576a:	2100      	movs	r1, #0
    576c:	0018      	movs	r0, r3
    576e:	f7fe ff8d 	bl	468c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
	usbd.epBank1AckTransferComplete(0);
    5772:	4b18      	ldr	r3, [pc, #96]	; (57d4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    5774:	2100      	movs	r1, #0
    5776:	0018      	movs	r0, r3
    5778:	f7fe fe40 	bl	43fc <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(0);
    577c:	4b15      	ldr	r3, [pc, #84]	; (57d4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    577e:	2100      	movs	r1, #0
    5780:	0018      	movs	r0, r3
    5782:	f7fe ff0a 	bl	459a <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	// Wait for transfer to complete
	while (!usbd.epBank1IsTransferComplete(0)) {}
    5786:	4b13      	ldr	r3, [pc, #76]	; (57d4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    5788:	2100      	movs	r1, #0
    578a:	0018      	movs	r0, r3
    578c:	f7fe fde1 	bl	4352 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    5790:	0003      	movs	r3, r0
    5792:	001a      	movs	r2, r3
    5794:	2301      	movs	r3, #1
    5796:	4053      	eors	r3, r2
    5798:	b2db      	uxtb	r3, r3
    579a:	2b00      	cmp	r3, #0
    579c:	d000      	beq.n	57a0 <_ZN14USBDeviceClass10setAddressEm+0x44>
    579e:	e7f2      	b.n	5786 <_ZN14USBDeviceClass10setAddressEm+0x2a>

	// Set USB address to addr
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    57a0:	4a0d      	ldr	r2, [pc, #52]	; (57d8 <_ZN14USBDeviceClass10setAddressEm+0x7c>)
    57a2:	683b      	ldr	r3, [r7, #0]
    57a4:	b2db      	uxtb	r3, r3
    57a6:	1c19      	adds	r1, r3, #0
    57a8:	237f      	movs	r3, #127	; 0x7f
    57aa:	400b      	ands	r3, r1
    57ac:	b2d9      	uxtb	r1, r3
    57ae:	7a93      	ldrb	r3, [r2, #10]
    57b0:	207f      	movs	r0, #127	; 0x7f
    57b2:	4008      	ands	r0, r1
    57b4:	217f      	movs	r1, #127	; 0x7f
    57b6:	438b      	bics	r3, r1
    57b8:	1c19      	adds	r1, r3, #0
    57ba:	1c03      	adds	r3, r0, #0
    57bc:	430b      	orrs	r3, r1
    57be:	7293      	strb	r3, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    57c0:	4a05      	ldr	r2, [pc, #20]	; (57d8 <_ZN14USBDeviceClass10setAddressEm+0x7c>)
    57c2:	7a93      	ldrb	r3, [r2, #10]
    57c4:	2180      	movs	r1, #128	; 0x80
    57c6:	4249      	negs	r1, r1
    57c8:	430b      	orrs	r3, r1
    57ca:	7293      	strb	r3, [r2, #10]
}
    57cc:	46c0      	nop			; (mov r8, r8)
    57ce:	46bd      	mov	sp, r7
    57d0:	b002      	add	sp, #8
    57d2:	bd80      	pop	{r7, pc}
    57d4:	20000338 	.word	0x20000338
    57d8:	41005000 	.word	0x41005000

000057dc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
    57dc:	b590      	push	{r4, r7, lr}
    57de:	b085      	sub	sp, #20
    57e0:	af00      	add	r7, sp, #0
    57e2:	6078      	str	r0, [r7, #4]
    57e4:	6039      	str	r1, [r7, #0]
	uint8_t i = setup.wIndex;
    57e6:	683b      	ldr	r3, [r7, #0]
    57e8:	889a      	ldrh	r2, [r3, #4]
    57ea:	230f      	movs	r3, #15
    57ec:	18fb      	adds	r3, r7, r3
    57ee:	701a      	strb	r2, [r3, #0]

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
    57f0:	230f      	movs	r3, #15
    57f2:	18fb      	adds	r3, r7, r3
    57f4:	781b      	ldrb	r3, [r3, #0]
    57f6:	2b00      	cmp	r3, #0
    57f8:	d111      	bne.n	581e <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x42>
	{
		if (CDC_Setup(setup) == false) {
    57fa:	683b      	ldr	r3, [r7, #0]
    57fc:	0018      	movs	r0, r3
    57fe:	f008 fe47 	bl	e490 <_Z9CDC_SetupR8USBSetup>
    5802:	0003      	movs	r3, r0
    5804:	001a      	movs	r2, r3
    5806:	2301      	movs	r3, #1
    5808:	4053      	eors	r3, r2
    580a:	b2db      	uxtb	r3, r3
    580c:	2b00      	cmp	r3, #0
    580e:	d004      	beq.n	581a <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3e>
			sendZlp(0);
    5810:	687b      	ldr	r3, [r7, #4]
    5812:	2100      	movs	r1, #0
    5814:	0018      	movs	r0, r3
    5816:	f000 fc2f 	bl	6078 <_ZN14USBDeviceClass7sendZlpEm>
		}
		return true;
    581a:	2301      	movs	r3, #1
    581c:	e01b      	b.n	5856 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x7a>
	}
	#endif

	#if defined(PLUGGABLE_USB_ENABLED)
	bool ret = PluggableUSB().setup(setup);
    581e:	f008 fffb 	bl	e818 <_Z12PluggableUSBv>
    5822:	0002      	movs	r2, r0
    5824:	230e      	movs	r3, #14
    5826:	18fc      	adds	r4, r7, r3
    5828:	683b      	ldr	r3, [r7, #0]
    582a:	0019      	movs	r1, r3
    582c:	0010      	movs	r0, r2
    582e:	f008 ffd3 	bl	e7d8 <_ZN13PluggableUSB_5setupER8USBSetup>
    5832:	0003      	movs	r3, r0
    5834:	7023      	strb	r3, [r4, #0]
	if ( ret == false) {
    5836:	230e      	movs	r3, #14
    5838:	18fb      	adds	r3, r7, r3
    583a:	781b      	ldrb	r3, [r3, #0]
    583c:	2201      	movs	r2, #1
    583e:	4053      	eors	r3, r2
    5840:	b2db      	uxtb	r3, r3
    5842:	2b00      	cmp	r3, #0
    5844:	d004      	beq.n	5850 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x74>
		sendZlp(0);
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	2100      	movs	r1, #0
    584a:	0018      	movs	r0, r3
    584c:	f000 fc14 	bl	6078 <_ZN14USBDeviceClass7sendZlpEm>
	}
	return ret;
    5850:	230e      	movs	r3, #14
    5852:	18fb      	adds	r3, r7, r3
    5854:	781b      	ldrb	r3, [r3, #0]
	#endif

	return false;
}
    5856:	0018      	movs	r0, r3
    5858:	46bd      	mov	sp, r7
    585a:	b005      	add	sp, #20
    585c:	bd90      	pop	{r4, r7, pc}
	...

00005860 <_ZN14USBDeviceClass13initEndpointsEv>:
	0,
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
    5860:	b580      	push	{r7, lr}
    5862:	b084      	sub	sp, #16
    5864:	af00      	add	r7, sp, #0
    5866:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5868:	230f      	movs	r3, #15
    586a:	18fb      	adds	r3, r7, r3
    586c:	2201      	movs	r2, #1
    586e:	701a      	strb	r2, [r3, #0]
    5870:	230f      	movs	r3, #15
    5872:	18fb      	adds	r3, r7, r3
    5874:	781b      	ldrb	r3, [r3, #0]
    5876:	2b27      	cmp	r3, #39	; 0x27
    5878:	d81c      	bhi.n	58b4 <_ZN14USBDeviceClass13initEndpointsEv+0x54>
    587a:	230f      	movs	r3, #15
    587c:	18fb      	adds	r3, r7, r3
    587e:	781a      	ldrb	r2, [r3, #0]
    5880:	4b0e      	ldr	r3, [pc, #56]	; (58bc <_ZN14USBDeviceClass13initEndpointsEv+0x5c>)
    5882:	0092      	lsls	r2, r2, #2
    5884:	58d3      	ldr	r3, [r2, r3]
    5886:	2b00      	cmp	r3, #0
    5888:	d014      	beq.n	58b4 <_ZN14USBDeviceClass13initEndpointsEv+0x54>
		initEP(i, EndPoints[i]);
    588a:	230f      	movs	r3, #15
    588c:	18fb      	adds	r3, r7, r3
    588e:	7819      	ldrb	r1, [r3, #0]
    5890:	230f      	movs	r3, #15
    5892:	18fb      	adds	r3, r7, r3
    5894:	781a      	ldrb	r2, [r3, #0]
    5896:	4b09      	ldr	r3, [pc, #36]	; (58bc <_ZN14USBDeviceClass13initEndpointsEv+0x5c>)
    5898:	0092      	lsls	r2, r2, #2
    589a:	58d2      	ldr	r2, [r2, r3]
    589c:	687b      	ldr	r3, [r7, #4]
    589e:	0018      	movs	r0, r3
    58a0:	f000 f80e 	bl	58c0 <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    58a4:	230f      	movs	r3, #15
    58a6:	18fb      	adds	r3, r7, r3
    58a8:	781a      	ldrb	r2, [r3, #0]
    58aa:	230f      	movs	r3, #15
    58ac:	18fb      	adds	r3, r7, r3
    58ae:	3201      	adds	r2, #1
    58b0:	701a      	strb	r2, [r3, #0]
    58b2:	e7dd      	b.n	5870 <_ZN14USBDeviceClass13initEndpointsEv+0x10>
	}
}
    58b4:	46c0      	nop			; (mov r8, r8)
    58b6:	46bd      	mov	sp, r7
    58b8:	b004      	add	sp, #16
    58ba:	bd80      	pop	{r7, pc}
    58bc:	20000020 	.word	0x20000020

000058c0 <_ZN14USBDeviceClass6initEPEmm>:

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
{
    58c0:	b590      	push	{r4, r7, lr}
    58c2:	b085      	sub	sp, #20
    58c4:	af00      	add	r7, sp, #0
    58c6:	60f8      	str	r0, [r7, #12]
    58c8:	60b9      	str	r1, [r7, #8]
    58ca:	607a      	str	r2, [r7, #4]
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    58cc:	687b      	ldr	r3, [r7, #4]
    58ce:	2b83      	cmp	r3, #131	; 0x83
    58d0:	d118      	bne.n	5904 <_ZN14USBDeviceClass6initEPEmm+0x44>
	{
		usbd.epBank1SetSize(ep, 64);
    58d2:	68bb      	ldr	r3, [r7, #8]
    58d4:	b2d9      	uxtb	r1, r3
    58d6:	4b4e      	ldr	r3, [pc, #312]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    58d8:	2240      	movs	r2, #64	; 0x40
    58da:	0018      	movs	r0, r3
    58dc:	f7fe ff9a 	bl	4814 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    58e0:	68bb      	ldr	r3, [r7, #8]
    58e2:	b2d9      	uxtb	r1, r3
    58e4:	68bb      	ldr	r3, [r7, #8]
    58e6:	019a      	lsls	r2, r3, #6
    58e8:	4b4a      	ldr	r3, [pc, #296]	; (5a14 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    58ea:	18d2      	adds	r2, r2, r3
    58ec:	4b48      	ldr	r3, [pc, #288]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    58ee:	0018      	movs	r0, r3
    58f0:	f7fe ff4e 	bl	4790 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
    58f4:	68bb      	ldr	r3, [r7, #8]
    58f6:	b2d9      	uxtb	r1, r3
    58f8:	4b45      	ldr	r3, [pc, #276]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    58fa:	2204      	movs	r2, #4
    58fc:	0018      	movs	r0, r3
    58fe:	f7fe fcb5 	bl	426c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    5902:	e081      	b.n	5a08 <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    5904:	687b      	ldr	r3, [r7, #4]
    5906:	2b02      	cmp	r3, #2
    5908:	d116      	bne.n	5938 <_ZN14USBDeviceClass6initEPEmm+0x78>
		if (epHandlers[ep] == NULL) {
    590a:	4b43      	ldr	r3, [pc, #268]	; (5a18 <_ZN14USBDeviceClass6initEPEmm+0x158>)
    590c:	68ba      	ldr	r2, [r7, #8]
    590e:	0092      	lsls	r2, r2, #2
    5910:	58d3      	ldr	r3, [r2, r3]
    5912:	2b00      	cmp	r3, #0
    5914:	d178      	bne.n	5a08 <_ZN14USBDeviceClass6initEPEmm+0x148>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    5916:	2038      	movs	r0, #56	; 0x38
    5918:	f007 fed2 	bl	d6c0 <_Znwj>
    591c:	0003      	movs	r3, r0
    591e:	001c      	movs	r4, r3
    5920:	2380      	movs	r3, #128	; 0x80
    5922:	005b      	lsls	r3, r3, #1
    5924:	68ba      	ldr	r2, [r7, #8]
    5926:	493a      	ldr	r1, [pc, #232]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5928:	0020      	movs	r0, r4
    592a:	f7ff f8af 	bl	4a8c <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm>
    592e:	4b3a      	ldr	r3, [pc, #232]	; (5a18 <_ZN14USBDeviceClass6initEPEmm+0x158>)
    5930:	68ba      	ldr	r2, [r7, #8]
    5932:	0092      	lsls	r2, r2, #2
    5934:	50d4      	str	r4, [r2, r3]
}
    5936:	e067      	b.n	5a08 <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    5938:	687b      	ldr	r3, [r7, #4]
    593a:	2b82      	cmp	r3, #130	; 0x82
    593c:	d11f      	bne.n	597e <_ZN14USBDeviceClass6initEPEmm+0xbe>
		usbd.epBank1SetSize(ep, 64);
    593e:	68bb      	ldr	r3, [r7, #8]
    5940:	b2d9      	uxtb	r1, r3
    5942:	4b33      	ldr	r3, [pc, #204]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5944:	2240      	movs	r2, #64	; 0x40
    5946:	0018      	movs	r0, r3
    5948:	f7fe ff64 	bl	4814 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    594c:	68bb      	ldr	r3, [r7, #8]
    594e:	b2d9      	uxtb	r1, r3
    5950:	68bb      	ldr	r3, [r7, #8]
    5952:	019a      	lsls	r2, r3, #6
    5954:	4b2f      	ldr	r3, [pc, #188]	; (5a14 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    5956:	18d2      	adds	r2, r2, r3
    5958:	4b2d      	ldr	r3, [pc, #180]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    595a:	0018      	movs	r0, r3
    595c:	f7fe ff18 	bl	4790 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1ResetReady(ep);
    5960:	68bb      	ldr	r3, [r7, #8]
    5962:	b2da      	uxtb	r2, r3
    5964:	4b2a      	ldr	r3, [pc, #168]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5966:	0011      	movs	r1, r2
    5968:	0018      	movs	r0, r3
    596a:	f7fe fe43 	bl	45f4 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1SetType(ep, 3); // BULK IN
    596e:	68bb      	ldr	r3, [r7, #8]
    5970:	b2d9      	uxtb	r1, r3
    5972:	4b27      	ldr	r3, [pc, #156]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5974:	2203      	movs	r2, #3
    5976:	0018      	movs	r0, r3
    5978:	f7fe fc78 	bl	426c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
}
    597c:	e044      	b.n	5a08 <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    597e:	687b      	ldr	r3, [r7, #4]
    5980:	2b00      	cmp	r3, #0
    5982:	d141      	bne.n	5a08 <_ZN14USBDeviceClass6initEPEmm+0x148>
		usbd.epBank0SetSize(ep, 64);
    5984:	68bb      	ldr	r3, [r7, #8]
    5986:	b2d9      	uxtb	r1, r3
    5988:	4b21      	ldr	r3, [pc, #132]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    598a:	2240      	movs	r2, #64	; 0x40
    598c:	0018      	movs	r0, r3
    598e:	f7fe ff15 	bl	47bc <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5992:	68bb      	ldr	r3, [r7, #8]
    5994:	b2d9      	uxtb	r1, r3
    5996:	68bb      	ldr	r3, [r7, #8]
    5998:	019a      	lsls	r2, r3, #6
    599a:	4b20      	ldr	r3, [pc, #128]	; (5a1c <_ZN14USBDeviceClass6initEPEmm+0x15c>)
    599c:	18d2      	adds	r2, r2, r3
    599e:	4b1c      	ldr	r3, [pc, #112]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59a0:	0018      	movs	r0, r3
    59a2:	f7fe fedf 	bl	4764 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
		usbd.epBank0SetType(ep, 1); // CONTROL OUT / SETUP
    59a6:	68bb      	ldr	r3, [r7, #8]
    59a8:	b2d9      	uxtb	r1, r3
    59aa:	4b19      	ldr	r3, [pc, #100]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59ac:	2201      	movs	r2, #1
    59ae:	0018      	movs	r0, r3
    59b0:	f7fe fc38 	bl	4224 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>
		usbd.epBank1SetSize(ep, 64);
    59b4:	68bb      	ldr	r3, [r7, #8]
    59b6:	b2d9      	uxtb	r1, r3
    59b8:	4b15      	ldr	r3, [pc, #84]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59ba:	2240      	movs	r2, #64	; 0x40
    59bc:	0018      	movs	r0, r3
    59be:	f7fe ff29 	bl	4814 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[0]);
    59c2:	68bb      	ldr	r3, [r7, #8]
    59c4:	b2d9      	uxtb	r1, r3
    59c6:	4a13      	ldr	r2, [pc, #76]	; (5a14 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    59c8:	4b11      	ldr	r3, [pc, #68]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59ca:	0018      	movs	r0, r3
    59cc:	f7fe fee0 	bl	4790 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetType(ep, 1); // CONTROL IN
    59d0:	68bb      	ldr	r3, [r7, #8]
    59d2:	b2d9      	uxtb	r1, r3
    59d4:	4b0e      	ldr	r3, [pc, #56]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59d6:	2201      	movs	r2, #1
    59d8:	0018      	movs	r0, r3
    59da:	f7fe fc47 	bl	426c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
		usbd.epBank0SetMultiPacketSize(ep, 64);
    59de:	68bb      	ldr	r3, [r7, #8]
    59e0:	b2d9      	uxtb	r1, r3
    59e2:	4b0b      	ldr	r3, [pc, #44]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59e4:	2240      	movs	r2, #64	; 0x40
    59e6:	0018      	movs	r0, r3
    59e8:	f7fe fe72 	bl	46d0 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
		usbd.epBank0SetByteCount(ep, 0);
    59ec:	68bb      	ldr	r3, [r7, #8]
    59ee:	b2d9      	uxtb	r1, r3
    59f0:	4b07      	ldr	r3, [pc, #28]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59f2:	2200      	movs	r2, #0
    59f4:	0018      	movs	r0, r3
    59f6:	f7fe fe28 	bl	464a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
		usbd.epBank0SetReady(ep);
    59fa:	68bb      	ldr	r3, [r7, #8]
    59fc:	b2da      	uxtb	r2, r3
    59fe:	4b04      	ldr	r3, [pc, #16]	; (5a10 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a00:	0011      	movs	r1, r2
    5a02:	0018      	movs	r0, r3
    5a04:	f7fe fdb3 	bl	456e <_ZN20USBDevice_SAMD21G18x15epBank0SetReadyEh>
}
    5a08:	46c0      	nop			; (mov r8, r8)
    5a0a:	46bd      	mov	sp, r7
    5a0c:	b005      	add	sp, #20
    5a0e:	bd90      	pop	{r4, r7, pc}
    5a10:	20000338 	.word	0x20000338
    5a14:	20000608 	.word	0x20000608
    5a18:	200007c8 	.word	0x200007c8
    5a1c:	20000448 	.word	0x20000448

00005a20 <_ZN14USBDeviceClass5flushEm>:

void USBDeviceClass::flush(uint32_t ep)
{
    5a20:	b580      	push	{r7, lr}
    5a22:	b082      	sub	sp, #8
    5a24:	af00      	add	r7, sp, #0
    5a26:	6078      	str	r0, [r7, #4]
    5a28:	6039      	str	r1, [r7, #0]
	if (available(ep)) {
    5a2a:	683a      	ldr	r2, [r7, #0]
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	0011      	movs	r1, r2
    5a30:	0018      	movs	r0, r3
    5a32:	f000 f867 	bl	5b04 <_ZN14USBDeviceClass9availableEm>
    5a36:	0003      	movs	r3, r0
    5a38:	1e5a      	subs	r2, r3, #1
    5a3a:	4193      	sbcs	r3, r2
    5a3c:	b2db      	uxtb	r3, r3
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d00d      	beq.n	5a5e <_ZN14USBDeviceClass5flushEm+0x3e>
		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    5a42:	683b      	ldr	r3, [r7, #0]
    5a44:	b2da      	uxtb	r2, r3
    5a46:	4b08      	ldr	r3, [pc, #32]	; (5a68 <_ZN14USBDeviceClass5flushEm+0x48>)
    5a48:	0011      	movs	r1, r2
    5a4a:	0018      	movs	r0, r3
    5a4c:	f7fe fda5 	bl	459a <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    5a50:	683b      	ldr	r3, [r7, #0]
    5a52:	b2da      	uxtb	r2, r3
    5a54:	4b04      	ldr	r3, [pc, #16]	; (5a68 <_ZN14USBDeviceClass5flushEm+0x48>)
    5a56:	0011      	movs	r1, r2
    5a58:	0018      	movs	r0, r3
    5a5a:	f7fe fccf 	bl	43fc <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
}
    5a5e:	46c0      	nop			; (mov r8, r8)
    5a60:	46bd      	mov	sp, r7
    5a62:	b002      	add	sp, #8
    5a64:	bd80      	pop	{r7, pc}
    5a66:	46c0      	nop			; (mov r8, r8)
    5a68:	20000338 	.word	0x20000338

00005a6c <_ZN14USBDeviceClass5stallEm>:

void USBDeviceClass::stall(uint32_t ep)
{
    5a6c:	b580      	push	{r7, lr}
    5a6e:	b082      	sub	sp, #8
    5a70:	af00      	add	r7, sp, #0
    5a72:	6078      	str	r0, [r7, #4]
    5a74:	6039      	str	r1, [r7, #0]
	// TODO: test
	// TODO: use .bit. notation

	// Stall endpoint
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    5a76:	4a06      	ldr	r2, [pc, #24]	; (5a90 <_ZN14USBDeviceClass5stallEm+0x24>)
    5a78:	683b      	ldr	r3, [r7, #0]
    5a7a:	3308      	adds	r3, #8
    5a7c:	015b      	lsls	r3, r3, #5
    5a7e:	18d3      	adds	r3, r2, r3
    5a80:	3305      	adds	r3, #5
    5a82:	2220      	movs	r2, #32
    5a84:	701a      	strb	r2, [r3, #0]
}
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	46bd      	mov	sp, r7
    5a8a:	b002      	add	sp, #8
    5a8c:	bd80      	pop	{r7, pc}
    5a8e:	46c0      	nop			; (mov r8, r8)
    5a90:	41005000 	.word	0x41005000

00005a94 <_ZN14USBDeviceClass11recvControlEPvm>:
	return f != USB->DEVICE.FNUM.bit.FNUM;
}


uint32_t USBDeviceClass::recvControl(void *_data, uint32_t len)
{
    5a94:	b580      	push	{r7, lr}
    5a96:	b088      	sub	sp, #32
    5a98:	af00      	add	r7, sp, #0
    5a9a:	60f8      	str	r0, [r7, #12]
    5a9c:	60b9      	str	r1, [r7, #8]
    5a9e:	607a      	str	r2, [r7, #4]
	uint8_t *data = reinterpret_cast<uint8_t *>(_data);
    5aa0:	68bb      	ldr	r3, [r7, #8]
    5aa2:	617b      	str	r3, [r7, #20]

	// The RAM Buffer is empty: we can receive data
	usbd.epBank0ResetReady(0);
    5aa4:	4b15      	ldr	r3, [pc, #84]	; (5afc <_ZN14USBDeviceClass11recvControlEPvm+0x68>)
    5aa6:	2100      	movs	r1, #0
    5aa8:	0018      	movs	r0, r3
    5aaa:	f7fe fd8d 	bl	45c8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

	//usbd.epBank0AckSetupReceived(0);
	uint32_t read = armRecvCtrlOUT(0);
    5aae:	68fb      	ldr	r3, [r7, #12]
    5ab0:	2100      	movs	r1, #0
    5ab2:	0018      	movs	r0, r3
    5ab4:	f000 f904 	bl	5cc0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    5ab8:	0003      	movs	r3, r0
    5aba:	61fb      	str	r3, [r7, #28]
	if (read > len)
    5abc:	69fa      	ldr	r2, [r7, #28]
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	429a      	cmp	r2, r3
    5ac2:	d901      	bls.n	5ac8 <_ZN14USBDeviceClass11recvControlEPvm+0x34>
		read = len;
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	61fb      	str	r3, [r7, #28]
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
    5ac8:	4b0d      	ldr	r3, [pc, #52]	; (5b00 <_ZN14USBDeviceClass11recvControlEPvm+0x6c>)
    5aca:	613b      	str	r3, [r7, #16]
	for (uint32_t i=0; i<len; i++) {
    5acc:	2300      	movs	r3, #0
    5ace:	61bb      	str	r3, [r7, #24]
    5ad0:	69ba      	ldr	r2, [r7, #24]
    5ad2:	687b      	ldr	r3, [r7, #4]
    5ad4:	429a      	cmp	r2, r3
    5ad6:	d20b      	bcs.n	5af0 <_ZN14USBDeviceClass11recvControlEPvm+0x5c>
		data[i] = buffer[i];
    5ad8:	697a      	ldr	r2, [r7, #20]
    5ada:	69bb      	ldr	r3, [r7, #24]
    5adc:	18d3      	adds	r3, r2, r3
    5ade:	6939      	ldr	r1, [r7, #16]
    5ae0:	69ba      	ldr	r2, [r7, #24]
    5ae2:	188a      	adds	r2, r1, r2
    5ae4:	7812      	ldrb	r2, [r2, #0]
    5ae6:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i<len; i++) {
    5ae8:	69bb      	ldr	r3, [r7, #24]
    5aea:	3301      	adds	r3, #1
    5aec:	61bb      	str	r3, [r7, #24]
    5aee:	e7ef      	b.n	5ad0 <_ZN14USBDeviceClass11recvControlEPvm+0x3c>
	}

	return read;
    5af0:	69fb      	ldr	r3, [r7, #28]
}
    5af2:	0018      	movs	r0, r3
    5af4:	46bd      	mov	sp, r7
    5af6:	b008      	add	sp, #32
    5af8:	bd80      	pop	{r7, pc}
    5afa:	46c0      	nop			; (mov r8, r8)
    5afc:	20000338 	.word	0x20000338
    5b00:	20000448 	.word	0x20000448

00005b04 <_ZN14USBDeviceClass9availableEm>:

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
    5b04:	b580      	push	{r7, lr}
    5b06:	b082      	sub	sp, #8
    5b08:	af00      	add	r7, sp, #0
    5b0a:	6078      	str	r0, [r7, #4]
    5b0c:	6039      	str	r1, [r7, #0]
	if (epHandlers[ep]) {
    5b0e:	4b10      	ldr	r3, [pc, #64]	; (5b50 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5b10:	683a      	ldr	r2, [r7, #0]
    5b12:	0092      	lsls	r2, r2, #2
    5b14:	58d3      	ldr	r3, [r2, r3]
    5b16:	2b00      	cmp	r3, #0
    5b18:	d00e      	beq.n	5b38 <_ZN14USBDeviceClass9availableEm+0x34>
		return epHandlers[ep]->available();
    5b1a:	4b0d      	ldr	r3, [pc, #52]	; (5b50 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5b1c:	683a      	ldr	r2, [r7, #0]
    5b1e:	0092      	lsls	r2, r2, #2
    5b20:	58d3      	ldr	r3, [r2, r3]
    5b22:	681b      	ldr	r3, [r3, #0]
    5b24:	3308      	adds	r3, #8
    5b26:	681b      	ldr	r3, [r3, #0]
    5b28:	4a09      	ldr	r2, [pc, #36]	; (5b50 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5b2a:	6839      	ldr	r1, [r7, #0]
    5b2c:	0089      	lsls	r1, r1, #2
    5b2e:	588a      	ldr	r2, [r1, r2]
    5b30:	0010      	movs	r0, r2
    5b32:	4798      	blx	r3
    5b34:	0003      	movs	r3, r0
    5b36:	e007      	b.n	5b48 <_ZN14USBDeviceClass9availableEm+0x44>
	} else {
		return usbd.epBank0ByteCount(ep);
    5b38:	683b      	ldr	r3, [r7, #0]
    5b3a:	b2da      	uxtb	r2, r3
    5b3c:	4b05      	ldr	r3, [pc, #20]	; (5b54 <_ZN14USBDeviceClass9availableEm+0x50>)
    5b3e:	0011      	movs	r1, r2
    5b40:	0018      	movs	r0, r3
    5b42:	f7fe fd6e 	bl	4622 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5b46:	0003      	movs	r3, r0
	}
}
    5b48:	0018      	movs	r0, r3
    5b4a:	46bd      	mov	sp, r7
    5b4c:	b002      	add	sp, #8
    5b4e:	bd80      	pop	{r7, pc}
    5b50:	200007c8 	.word	0x200007c8
    5b54:	20000338 	.word	0x20000338

00005b58 <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    5b58:	b580      	push	{r7, lr}
    5b5a:	b084      	sub	sp, #16
    5b5c:	af00      	add	r7, sp, #0
    5b5e:	60f8      	str	r0, [r7, #12]
    5b60:	60b9      	str	r1, [r7, #8]
    5b62:	607a      	str	r2, [r7, #4]
    5b64:	603b      	str	r3, [r7, #0]
	if (!_usbConfiguration)
    5b66:	4b42      	ldr	r3, [pc, #264]	; (5c70 <_ZN14USBDeviceClass4recvEmPvm+0x118>)
    5b68:	681b      	ldr	r3, [r3, #0]
    5b6a:	425a      	negs	r2, r3
    5b6c:	4153      	adcs	r3, r2
    5b6e:	b2db      	uxtb	r3, r3
    5b70:	2b00      	cmp	r3, #0
    5b72:	d002      	beq.n	5b7a <_ZN14USBDeviceClass4recvEmPvm+0x22>
		return -1;
    5b74:	2301      	movs	r3, #1
    5b76:	425b      	negs	r3, r3
    5b78:	e076      	b.n	5c68 <_ZN14USBDeviceClass4recvEmPvm+0x110>

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    5b7a:	4b3e      	ldr	r3, [pc, #248]	; (5c74 <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
    5b7c:	781b      	ldrb	r3, [r3, #0]
    5b7e:	b2db      	uxtb	r3, r3
    5b80:	425a      	negs	r2, r3
    5b82:	4153      	adcs	r3, r2
    5b84:	b2db      	uxtb	r3, r3
    5b86:	2b00      	cmp	r3, #0
    5b88:	d003      	beq.n	5b92 <_ZN14USBDeviceClass4recvEmPvm+0x3a>
		digitalWrite(PIN_LED_RXL, LOW);
    5b8a:	2100      	movs	r1, #0
    5b8c:	201e      	movs	r0, #30
    5b8e:	f000 ff83 	bl	6a98 <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    5b92:	4b38      	ldr	r3, [pc, #224]	; (5c74 <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
    5b94:	2264      	movs	r2, #100	; 0x64
    5b96:	701a      	strb	r2, [r3, #0]
#endif

	if (epHandlers[ep]) {
    5b98:	4b37      	ldr	r3, [pc, #220]	; (5c78 <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5b9a:	68ba      	ldr	r2, [r7, #8]
    5b9c:	0092      	lsls	r2, r2, #2
    5b9e:	58d3      	ldr	r3, [r2, r3]
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	d00f      	beq.n	5bc4 <_ZN14USBDeviceClass4recvEmPvm+0x6c>
		return epHandlers[ep]->recv(_data, len);
    5ba4:	4b34      	ldr	r3, [pc, #208]	; (5c78 <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5ba6:	68ba      	ldr	r2, [r7, #8]
    5ba8:	0092      	lsls	r2, r2, #2
    5baa:	58d3      	ldr	r3, [r2, r3]
    5bac:	681b      	ldr	r3, [r3, #0]
    5bae:	3304      	adds	r3, #4
    5bb0:	681b      	ldr	r3, [r3, #0]
    5bb2:	4a31      	ldr	r2, [pc, #196]	; (5c78 <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5bb4:	68b9      	ldr	r1, [r7, #8]
    5bb6:	0089      	lsls	r1, r1, #2
    5bb8:	5888      	ldr	r0, [r1, r2]
    5bba:	683a      	ldr	r2, [r7, #0]
    5bbc:	6879      	ldr	r1, [r7, #4]
    5bbe:	4798      	blx	r3
    5bc0:	0003      	movs	r3, r0
    5bc2:	e051      	b.n	5c68 <_ZN14USBDeviceClass4recvEmPvm+0x110>
	}

	if (available(ep) < len)
    5bc4:	68ba      	ldr	r2, [r7, #8]
    5bc6:	68fb      	ldr	r3, [r7, #12]
    5bc8:	0011      	movs	r1, r2
    5bca:	0018      	movs	r0, r3
    5bcc:	f7ff ff9a 	bl	5b04 <_ZN14USBDeviceClass9availableEm>
    5bd0:	0002      	movs	r2, r0
    5bd2:	683b      	ldr	r3, [r7, #0]
    5bd4:	429a      	cmp	r2, r3
    5bd6:	419b      	sbcs	r3, r3
    5bd8:	425b      	negs	r3, r3
    5bda:	b2db      	uxtb	r3, r3
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d007      	beq.n	5bf0 <_ZN14USBDeviceClass4recvEmPvm+0x98>
		len = available(ep);
    5be0:	68ba      	ldr	r2, [r7, #8]
    5be2:	68fb      	ldr	r3, [r7, #12]
    5be4:	0011      	movs	r1, r2
    5be6:	0018      	movs	r0, r3
    5be8:	f7ff ff8c 	bl	5b04 <_ZN14USBDeviceClass9availableEm>
    5bec:	0003      	movs	r3, r0
    5bee:	603b      	str	r3, [r7, #0]

	armRecv(ep);
    5bf0:	68ba      	ldr	r2, [r7, #8]
    5bf2:	68fb      	ldr	r3, [r7, #12]
    5bf4:	0011      	movs	r1, r2
    5bf6:	0018      	movs	r0, r3
    5bf8:	f000 f8b6 	bl	5d68 <_ZN14USBDeviceClass7armRecvEm>

	usbd.epBank0DisableTransferComplete(ep);
    5bfc:	68bb      	ldr	r3, [r7, #8]
    5bfe:	b2da      	uxtb	r2, r3
    5c00:	4b1e      	ldr	r3, [pc, #120]	; (5c7c <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5c02:	0011      	movs	r1, r2
    5c04:	0018      	movs	r0, r3
    5c06:	f7fe fc6e 	bl	44e6 <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>

	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    5c0a:	68bb      	ldr	r3, [r7, #8]
    5c0c:	019a      	lsls	r2, r3, #6
    5c0e:	4b1c      	ldr	r3, [pc, #112]	; (5c80 <_ZN14USBDeviceClass4recvEmPvm+0x128>)
    5c10:	18d1      	adds	r1, r2, r3
    5c12:	683a      	ldr	r2, [r7, #0]
    5c14:	687b      	ldr	r3, [r7, #4]
    5c16:	0018      	movs	r0, r3
    5c18:	f00a fdfb 	bl	10812 <memcpy>

	// release empty buffer
	if (len && !available(ep)) {
    5c1c:	683b      	ldr	r3, [r7, #0]
    5c1e:	2b00      	cmp	r3, #0
    5c20:	d009      	beq.n	5c36 <_ZN14USBDeviceClass4recvEmPvm+0xde>
    5c22:	68ba      	ldr	r2, [r7, #8]
    5c24:	68fb      	ldr	r3, [r7, #12]
    5c26:	0011      	movs	r1, r2
    5c28:	0018      	movs	r0, r3
    5c2a:	f7ff ff6b 	bl	5b04 <_ZN14USBDeviceClass9availableEm>
    5c2e:	1e03      	subs	r3, r0, #0
    5c30:	d101      	bne.n	5c36 <_ZN14USBDeviceClass4recvEmPvm+0xde>
    5c32:	2301      	movs	r3, #1
    5c34:	e000      	b.n	5c38 <_ZN14USBDeviceClass4recvEmPvm+0xe0>
    5c36:	2300      	movs	r3, #0
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d014      	beq.n	5c66 <_ZN14USBDeviceClass4recvEmPvm+0x10e>
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(ep);
    5c3c:	68bb      	ldr	r3, [r7, #8]
    5c3e:	b2da      	uxtb	r2, r3
    5c40:	4b0e      	ldr	r3, [pc, #56]	; (5c7c <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5c42:	0011      	movs	r1, r2
    5c44:	0018      	movs	r0, r3
    5c46:	f7fe fcbf 	bl	45c8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		// Clear Transfer complete 0 flag
		usbd.epBank0AckTransferComplete(ep);
    5c4a:	68bb      	ldr	r3, [r7, #8]
    5c4c:	b2da      	uxtb	r2, r3
    5c4e:	4b0b      	ldr	r3, [pc, #44]	; (5c7c <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5c50:	0011      	movs	r1, r2
    5c52:	0018      	movs	r0, r3
    5c54:	f7fe fbbd 	bl	43d2 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>

		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
    5c58:	68bb      	ldr	r3, [r7, #8]
    5c5a:	b2da      	uxtb	r2, r3
    5c5c:	4b07      	ldr	r3, [pc, #28]	; (5c7c <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5c5e:	0011      	movs	r1, r2
    5c60:	0018      	movs	r0, r3
    5c62:	f7fe fbf8 	bl	4456 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
	}

	return len;
    5c66:	683b      	ldr	r3, [r7, #0]
}
    5c68:	0018      	movs	r0, r3
    5c6a:	46bd      	mov	sp, r7
    5c6c:	b004      	add	sp, #16
    5c6e:	bd80      	pop	{r7, pc}
    5c70:	20000440 	.word	0x20000440
    5c74:	2000043d 	.word	0x2000043d
    5c78:	200007c8 	.word	0x200007c8
    5c7c:	20000338 	.word	0x20000338
    5c80:	20000448 	.word	0x20000448

00005c84 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    5c84:	b580      	push	{r7, lr}
    5c86:	b084      	sub	sp, #16
    5c88:	af00      	add	r7, sp, #0
    5c8a:	6078      	str	r0, [r7, #4]
    5c8c:	6039      	str	r1, [r7, #0]
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    5c8e:	230f      	movs	r3, #15
    5c90:	18fa      	adds	r2, r7, r3
    5c92:	6839      	ldr	r1, [r7, #0]
    5c94:	6878      	ldr	r0, [r7, #4]
    5c96:	2301      	movs	r3, #1
    5c98:	f7ff ff5e 	bl	5b58 <_ZN14USBDeviceClass4recvEmPvm>
    5c9c:	0003      	movs	r3, r0
    5c9e:	3b01      	subs	r3, #1
    5ca0:	1e5a      	subs	r2, r3, #1
    5ca2:	4193      	sbcs	r3, r2
    5ca4:	b2db      	uxtb	r3, r3
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d002      	beq.n	5cb0 <_ZN14USBDeviceClass4recvEm+0x2c>
		return -1;
    5caa:	2301      	movs	r3, #1
    5cac:	425b      	negs	r3, r3
    5cae:	e002      	b.n	5cb6 <_ZN14USBDeviceClass4recvEm+0x32>
	} else {
		return c;
    5cb0:	230f      	movs	r3, #15
    5cb2:	18fb      	adds	r3, r7, r3
    5cb4:	781b      	ldrb	r3, [r3, #0]
	}
}
    5cb6:	0018      	movs	r0, r3
    5cb8:	46bd      	mov	sp, r7
    5cba:	b004      	add	sp, #16
    5cbc:	bd80      	pop	{r7, pc}
	...

00005cc0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b082      	sub	sp, #8
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
    5cc8:	6039      	str	r1, [r7, #0]
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5cca:	683b      	ldr	r3, [r7, #0]
    5ccc:	b2d9      	uxtb	r1, r3
    5cce:	683b      	ldr	r3, [r7, #0]
    5cd0:	019a      	lsls	r2, r3, #6
    5cd2:	4b23      	ldr	r3, [pc, #140]	; (5d60 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa0>)
    5cd4:	18d2      	adds	r2, r2, r3
    5cd6:	4b23      	ldr	r3, [pc, #140]	; (5d64 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5cd8:	0018      	movs	r0, r3
    5cda:	f7fe fd43 	bl	4764 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
	usbd.epBank0SetMultiPacketSize(ep, 8);
    5cde:	683b      	ldr	r3, [r7, #0]
    5ce0:	b2d9      	uxtb	r1, r3
    5ce2:	4b20      	ldr	r3, [pc, #128]	; (5d64 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5ce4:	2208      	movs	r2, #8
    5ce6:	0018      	movs	r0, r3
    5ce8:	f7fe fcf2 	bl	46d0 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
	usbd.epBank0SetByteCount(ep, 0);
    5cec:	683b      	ldr	r3, [r7, #0]
    5cee:	b2d9      	uxtb	r1, r3
    5cf0:	4b1c      	ldr	r3, [pc, #112]	; (5d64 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5cf2:	2200      	movs	r2, #0
    5cf4:	0018      	movs	r0, r3
    5cf6:	f7fe fca8 	bl	464a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>

	usbd.epBank0ResetReady(ep);
    5cfa:	683b      	ldr	r3, [r7, #0]
    5cfc:	b2da      	uxtb	r2, r3
    5cfe:	4b19      	ldr	r3, [pc, #100]	; (5d64 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d00:	0011      	movs	r1, r2
    5d02:	0018      	movs	r0, r3
    5d04:	f7fe fc60 	bl	45c8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    5d08:	683b      	ldr	r3, [r7, #0]
    5d0a:	b2da      	uxtb	r2, r3
    5d0c:	4b15      	ldr	r3, [pc, #84]	; (5d64 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d0e:	0011      	movs	r1, r2
    5d10:	0018      	movs	r0, r3
    5d12:	f7fe fc00 	bl	4516 <_ZN20USBDevice_SAMD21G18x14epBank0IsReadyEh>
    5d16:	0003      	movs	r3, r0
    5d18:	001a      	movs	r2, r3
    5d1a:	2301      	movs	r3, #1
    5d1c:	4053      	eors	r3, r2
    5d1e:	b2db      	uxtb	r3, r3
    5d20:	2b00      	cmp	r3, #0
    5d22:	d000      	beq.n	5d26 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x66>
    5d24:	e7f0      	b.n	5d08 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x48>
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    5d26:	683b      	ldr	r3, [r7, #0]
    5d28:	b2da      	uxtb	r2, r3
    5d2a:	4b0e      	ldr	r3, [pc, #56]	; (5d64 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d2c:	0011      	movs	r1, r2
    5d2e:	0018      	movs	r0, r3
    5d30:	f7fe faf9 	bl	4326 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    5d34:	0003      	movs	r3, r0
    5d36:	001a      	movs	r2, r3
    5d38:	2301      	movs	r3, #1
    5d3a:	4053      	eors	r3, r2
    5d3c:	b2db      	uxtb	r3, r3
    5d3e:	2b00      	cmp	r3, #0
    5d40:	d000      	beq.n	5d44 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x84>
    5d42:	e7f0      	b.n	5d26 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x66>
	return usbd.epBank0ByteCount(ep);
    5d44:	683b      	ldr	r3, [r7, #0]
    5d46:	b2da      	uxtb	r2, r3
    5d48:	4b06      	ldr	r3, [pc, #24]	; (5d64 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d4a:	0011      	movs	r1, r2
    5d4c:	0018      	movs	r0, r3
    5d4e:	f7fe fc68 	bl	4622 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5d52:	0003      	movs	r3, r0
    5d54:	b2db      	uxtb	r3, r3
}
    5d56:	0018      	movs	r0, r3
    5d58:	46bd      	mov	sp, r7
    5d5a:	b002      	add	sp, #8
    5d5c:	bd80      	pop	{r7, pc}
    5d5e:	46c0      	nop			; (mov r8, r8)
    5d60:	20000448 	.word	0x20000448
    5d64:	20000338 	.word	0x20000338

00005d68 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    5d68:	b590      	push	{r4, r7, lr}
    5d6a:	b085      	sub	sp, #20
    5d6c:	af00      	add	r7, sp, #0
    5d6e:	6078      	str	r0, [r7, #4]
    5d70:	6039      	str	r1, [r7, #0]
	uint16_t count = usbd.epBank0ByteCount(ep);
    5d72:	683b      	ldr	r3, [r7, #0]
    5d74:	b2da      	uxtb	r2, r3
    5d76:	230e      	movs	r3, #14
    5d78:	18fc      	adds	r4, r7, r3
    5d7a:	4b16      	ldr	r3, [pc, #88]	; (5dd4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5d7c:	0011      	movs	r1, r2
    5d7e:	0018      	movs	r0, r3
    5d80:	f7fe fc4f 	bl	4622 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5d84:	0003      	movs	r3, r0
    5d86:	8023      	strh	r3, [r4, #0]
	if (count >= 64) {
    5d88:	230e      	movs	r3, #14
    5d8a:	18fb      	adds	r3, r7, r3
    5d8c:	881b      	ldrh	r3, [r3, #0]
    5d8e:	2b3f      	cmp	r3, #63	; 0x3f
    5d90:	dd0b      	ble.n	5daa <_ZN14USBDeviceClass7armRecvEm+0x42>
		usbd.epBank0SetByteCount(ep, count - 64);
    5d92:	683b      	ldr	r3, [r7, #0]
    5d94:	b2d9      	uxtb	r1, r3
    5d96:	230e      	movs	r3, #14
    5d98:	18fb      	adds	r3, r7, r3
    5d9a:	881b      	ldrh	r3, [r3, #0]
    5d9c:	3b40      	subs	r3, #64	; 0x40
    5d9e:	b29a      	uxth	r2, r3
    5da0:	4b0c      	ldr	r3, [pc, #48]	; (5dd4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5da2:	0018      	movs	r0, r3
    5da4:	f7fe fc51 	bl	464a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
    5da8:	e006      	b.n	5db8 <_ZN14USBDeviceClass7armRecvEm+0x50>
	} else {
		usbd.epBank0SetByteCount(ep, 0);
    5daa:	683b      	ldr	r3, [r7, #0]
    5dac:	b2d9      	uxtb	r1, r3
    5dae:	4b09      	ldr	r3, [pc, #36]	; (5dd4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5db0:	2200      	movs	r2, #0
    5db2:	0018      	movs	r0, r3
    5db4:	f7fe fc49 	bl	464a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
	}
	return usbd.epBank0ByteCount(ep);
    5db8:	683b      	ldr	r3, [r7, #0]
    5dba:	b2da      	uxtb	r2, r3
    5dbc:	4b05      	ldr	r3, [pc, #20]	; (5dd4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5dbe:	0011      	movs	r1, r2
    5dc0:	0018      	movs	r0, r3
    5dc2:	f7fe fc2e 	bl	4622 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5dc6:	0003      	movs	r3, r0
    5dc8:	b2db      	uxtb	r3, r3
}
    5dca:	0018      	movs	r0, r3
    5dcc:	46bd      	mov	sp, r7
    5dce:	b005      	add	sp, #20
    5dd0:	bd90      	pop	{r4, r7, pc}
    5dd2:	46c0      	nop			; (mov r8, r8)
    5dd4:	20000338 	.word	0x20000338

00005dd8 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    5dd8:	b580      	push	{r7, lr}
    5dda:	b088      	sub	sp, #32
    5ddc:	af00      	add	r7, sp, #0
    5dde:	60f8      	str	r0, [r7, #12]
    5de0:	60b9      	str	r1, [r7, #8]
    5de2:	607a      	str	r2, [r7, #4]
    5de4:	603b      	str	r3, [r7, #0]
	uint32_t written = 0;
    5de6:	2300      	movs	r3, #0
    5de8:	61fb      	str	r3, [r7, #28]
	uint32_t length = 0;
    5dea:	2300      	movs	r3, #0
    5dec:	61bb      	str	r3, [r7, #24]

	if (!_usbConfiguration)
    5dee:	4b59      	ldr	r3, [pc, #356]	; (5f54 <_ZN14USBDeviceClass4sendEmPKvm+0x17c>)
    5df0:	681b      	ldr	r3, [r3, #0]
    5df2:	425a      	negs	r2, r3
    5df4:	4153      	adcs	r3, r2
    5df6:	b2db      	uxtb	r3, r3
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d002      	beq.n	5e02 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		return -1;
    5dfc:	2301      	movs	r3, #1
    5dfe:	425b      	negs	r3, r3
    5e00:	e0a4      	b.n	5f4c <_ZN14USBDeviceClass4sendEmPKvm+0x174>
	if (len > 16384)
    5e02:	683a      	ldr	r2, [r7, #0]
    5e04:	2380      	movs	r3, #128	; 0x80
    5e06:	01db      	lsls	r3, r3, #7
    5e08:	429a      	cmp	r2, r3
    5e0a:	d902      	bls.n	5e12 <_ZN14USBDeviceClass4sendEmPKvm+0x3a>
		return -1;
    5e0c:	2301      	movs	r3, #1
    5e0e:	425b      	negs	r3, r3
    5e10:	e09c      	b.n	5f4c <_ZN14USBDeviceClass4sendEmPKvm+0x174>

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    5e12:	4b51      	ldr	r3, [pc, #324]	; (5f58 <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    5e14:	781b      	ldrb	r3, [r3, #0]
    5e16:	b2db      	uxtb	r3, r3
    5e18:	425a      	negs	r2, r3
    5e1a:	4153      	adcs	r3, r2
    5e1c:	b2db      	uxtb	r3, r3
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d003      	beq.n	5e2a <_ZN14USBDeviceClass4sendEmPKvm+0x52>
		digitalWrite(PIN_LED_TXL, LOW);
    5e22:	2100      	movs	r1, #0
    5e24:	201f      	movs	r0, #31
    5e26:	f000 fe37 	bl	6a98 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    5e2a:	4b4b      	ldr	r3, [pc, #300]	; (5f58 <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    5e2c:	2264      	movs	r2, #100	; 0x64
    5e2e:	701a      	strb	r2, [r3, #0]
#endif

	// Flash area
	while (len != 0)
    5e30:	683b      	ldr	r3, [r7, #0]
    5e32:	2b00      	cmp	r3, #0
    5e34:	d100      	bne.n	5e38 <_ZN14USBDeviceClass4sendEmPKvm+0x60>
    5e36:	e088      	b.n	5f4a <_ZN14USBDeviceClass4sendEmPKvm+0x172>
	{
		if (usbd.epBank1IsReady(ep)) {
    5e38:	68bb      	ldr	r3, [r7, #8]
    5e3a:	b2da      	uxtb	r2, r3
    5e3c:	4b47      	ldr	r3, [pc, #284]	; (5f5c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5e3e:	0011      	movs	r1, r2
    5e40:	0018      	movs	r0, r3
    5e42:	f7fe fb7e 	bl	4542 <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>
    5e46:	1e03      	subs	r3, r0, #0
    5e48:	d03c      	beq.n	5ec4 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
			// previous transfer is still not complete

			// convert the timeout from microseconds to a number of times through
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    5e4a:	4b45      	ldr	r3, [pc, #276]	; (5f60 <_ZN14USBDeviceClass4sendEmPKvm+0x188>)
    5e4c:	681b      	ldr	r3, [r3, #0]
    5e4e:	4945      	ldr	r1, [pc, #276]	; (5f64 <_ZN14USBDeviceClass4sendEmPKvm+0x18c>)
    5e50:	0018      	movs	r0, r3
    5e52:	f008 fd11 	bl	e878 <__udivsi3>
    5e56:	0003      	movs	r3, r0
    5e58:	001a      	movs	r2, r3
    5e5a:	4b43      	ldr	r3, [pc, #268]	; (5f68 <_ZN14USBDeviceClass4sendEmPKvm+0x190>)
    5e5c:	4353      	muls	r3, r2
    5e5e:	2117      	movs	r1, #23
    5e60:	0018      	movs	r0, r3
    5e62:	f008 fd09 	bl	e878 <__udivsi3>
    5e66:	0003      	movs	r3, r0
    5e68:	617b      	str	r3, [r7, #20]

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
    5e6a:	68bb      	ldr	r3, [r7, #8]
    5e6c:	b2da      	uxtb	r2, r3
    5e6e:	4b3b      	ldr	r3, [pc, #236]	; (5f5c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5e70:	0011      	movs	r1, r2
    5e72:	0018      	movs	r0, r3
    5e74:	f7fe fa6d 	bl	4352 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    5e78:	0003      	movs	r3, r0
    5e7a:	001a      	movs	r2, r3
    5e7c:	2301      	movs	r3, #1
    5e7e:	4053      	eors	r3, r2
    5e80:	b2db      	uxtb	r3, r3
    5e82:	2b00      	cmp	r3, #0
    5e84:	d01e      	beq.n	5ec4 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    5e86:	4a39      	ldr	r2, [pc, #228]	; (5f6c <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    5e88:	68bb      	ldr	r3, [r7, #8]
    5e8a:	18d3      	adds	r3, r2, r3
    5e8c:	781b      	ldrb	r3, [r3, #0]
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d104      	bne.n	5e9c <_ZN14USBDeviceClass4sendEmPKvm+0xc4>
    5e92:	697b      	ldr	r3, [r7, #20]
    5e94:	1e5a      	subs	r2, r3, #1
    5e96:	617a      	str	r2, [r7, #20]
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d101      	bne.n	5ea0 <_ZN14USBDeviceClass4sendEmPKvm+0xc8>
    5e9c:	2301      	movs	r3, #1
    5e9e:	e000      	b.n	5ea2 <_ZN14USBDeviceClass4sendEmPKvm+0xca>
    5ea0:	2300      	movs	r3, #0
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d0e1      	beq.n	5e6a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
					LastTransmitTimedOut[ep] = 1;
    5ea6:	4a31      	ldr	r2, [pc, #196]	; (5f6c <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    5ea8:	68bb      	ldr	r3, [r7, #8]
    5eaa:	18d3      	adds	r3, r2, r3
    5eac:	2201      	movs	r2, #1
    5eae:	701a      	strb	r2, [r3, #0]

					// set byte count to zero, so that ZLP is sent
					// instead of stale data
					usbd.epBank1SetByteCount(ep, 0);
    5eb0:	68bb      	ldr	r3, [r7, #8]
    5eb2:	b2d9      	uxtb	r1, r3
    5eb4:	4b29      	ldr	r3, [pc, #164]	; (5f5c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5eb6:	2200      	movs	r2, #0
    5eb8:	0018      	movs	r0, r3
    5eba:	f7fe fbe7 	bl	468c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
					return -1;
    5ebe:	2301      	movs	r3, #1
    5ec0:	425b      	negs	r3, r3
    5ec2:	e043      	b.n	5f4c <_ZN14USBDeviceClass4sendEmPKvm+0x174>
				}
			}
		}

		LastTransmitTimedOut[ep] = 0;
    5ec4:	4a29      	ldr	r2, [pc, #164]	; (5f6c <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    5ec6:	68bb      	ldr	r3, [r7, #8]
    5ec8:	18d3      	adds	r3, r2, r3
    5eca:	2200      	movs	r2, #0
    5ecc:	701a      	strb	r2, [r3, #0]

		if (len >= EPX_SIZE) {
    5ece:	683b      	ldr	r3, [r7, #0]
    5ed0:	2b3f      	cmp	r3, #63	; 0x3f
    5ed2:	d902      	bls.n	5eda <_ZN14USBDeviceClass4sendEmPKvm+0x102>
			length = EPX_SIZE - 1;
    5ed4:	233f      	movs	r3, #63	; 0x3f
    5ed6:	61bb      	str	r3, [r7, #24]
    5ed8:	e001      	b.n	5ede <_ZN14USBDeviceClass4sendEmPKvm+0x106>
		} else {
			length = len;
    5eda:	683b      	ldr	r3, [r7, #0]
    5edc:	61bb      	str	r3, [r7, #24]
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    5ede:	68bb      	ldr	r3, [r7, #8]
    5ee0:	019a      	lsls	r2, r3, #6
    5ee2:	4b23      	ldr	r3, [pc, #140]	; (5f70 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    5ee4:	18d3      	adds	r3, r2, r3
    5ee6:	69ba      	ldr	r2, [r7, #24]
    5ee8:	6879      	ldr	r1, [r7, #4]
    5eea:	0018      	movs	r0, r3
    5eec:	f00a fc91 	bl	10812 <memcpy>

		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5ef0:	68bb      	ldr	r3, [r7, #8]
    5ef2:	b2d9      	uxtb	r1, r3
    5ef4:	68bb      	ldr	r3, [r7, #8]
    5ef6:	019a      	lsls	r2, r3, #6
    5ef8:	4b1d      	ldr	r3, [pc, #116]	; (5f70 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    5efa:	18d2      	adds	r2, r2, r3
    5efc:	4b17      	ldr	r3, [pc, #92]	; (5f5c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5efe:	0018      	movs	r0, r3
    5f00:	f7fe fc46 	bl	4790 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetByteCount(ep, length);
    5f04:	68bb      	ldr	r3, [r7, #8]
    5f06:	b2d9      	uxtb	r1, r3
    5f08:	69bb      	ldr	r3, [r7, #24]
    5f0a:	b29a      	uxth	r2, r3
    5f0c:	4b13      	ldr	r3, [pc, #76]	; (5f5c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f0e:	0018      	movs	r0, r3
    5f10:	f7fe fbbc 	bl	468c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

		// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    5f14:	68bb      	ldr	r3, [r7, #8]
    5f16:	b2da      	uxtb	r2, r3
    5f18:	4b10      	ldr	r3, [pc, #64]	; (5f5c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f1a:	0011      	movs	r1, r2
    5f1c:	0018      	movs	r0, r3
    5f1e:	f7fe fa6d 	bl	43fc <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    5f22:	68bb      	ldr	r3, [r7, #8]
    5f24:	b2da      	uxtb	r2, r3
    5f26:	4b0d      	ldr	r3, [pc, #52]	; (5f5c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f28:	0011      	movs	r1, r2
    5f2a:	0018      	movs	r0, r3
    5f2c:	f7fe fb35 	bl	459a <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

		written += length;
    5f30:	69fa      	ldr	r2, [r7, #28]
    5f32:	69bb      	ldr	r3, [r7, #24]
    5f34:	18d3      	adds	r3, r2, r3
    5f36:	61fb      	str	r3, [r7, #28]
		len -= length;
    5f38:	683a      	ldr	r2, [r7, #0]
    5f3a:	69bb      	ldr	r3, [r7, #24]
    5f3c:	1ad3      	subs	r3, r2, r3
    5f3e:	603b      	str	r3, [r7, #0]
		data = (char *)data + length;
    5f40:	687a      	ldr	r2, [r7, #4]
    5f42:	69bb      	ldr	r3, [r7, #24]
    5f44:	18d3      	adds	r3, r2, r3
    5f46:	607b      	str	r3, [r7, #4]
	while (len != 0)
    5f48:	e772      	b.n	5e30 <_ZN14USBDeviceClass4sendEmPKvm+0x58>
	}
	return written;
    5f4a:	69fb      	ldr	r3, [r7, #28]
}
    5f4c:	0018      	movs	r0, r3
    5f4e:	46bd      	mov	sp, r7
    5f50:	b008      	add	sp, #32
    5f52:	bd80      	pop	{r7, pc}
    5f54:	20000440 	.word	0x20000440
    5f58:	2000043c 	.word	0x2000043c
    5f5c:	20000338 	.word	0x20000338
    5f60:	20000048 	.word	0x20000048
    5f64:	000f4240 	.word	0x000f4240
    5f68:	00011170 	.word	0x00011170
    5f6c:	200008e8 	.word	0x200008e8
    5f70:	20000608 	.word	0x20000608

00005f74 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    5f74:	b580      	push	{r7, lr}
    5f76:	b084      	sub	sp, #16
    5f78:	af00      	add	r7, sp, #0
    5f7a:	60f8      	str	r0, [r7, #12]
    5f7c:	60b9      	str	r1, [r7, #8]
    5f7e:	607a      	str	r2, [r7, #4]
    5f80:	603b      	str	r3, [r7, #0]
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    5f82:	68bb      	ldr	r3, [r7, #8]
    5f84:	019a      	lsls	r2, r3, #6
    5f86:	4b12      	ldr	r3, [pc, #72]	; (5fd0 <_ZN14USBDeviceClass7armSendEmPKvm+0x5c>)
    5f88:	18d3      	adds	r3, r2, r3
    5f8a:	683a      	ldr	r2, [r7, #0]
    5f8c:	6879      	ldr	r1, [r7, #4]
    5f8e:	0018      	movs	r0, r3
    5f90:	f00a fc3f 	bl	10812 <memcpy>

	// Get endpoint configuration from setting register
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5f94:	68bb      	ldr	r3, [r7, #8]
    5f96:	b2d9      	uxtb	r1, r3
    5f98:	68bb      	ldr	r3, [r7, #8]
    5f9a:	019a      	lsls	r2, r3, #6
    5f9c:	4b0c      	ldr	r3, [pc, #48]	; (5fd0 <_ZN14USBDeviceClass7armSendEmPKvm+0x5c>)
    5f9e:	18d2      	adds	r2, r2, r3
    5fa0:	4b0c      	ldr	r3, [pc, #48]	; (5fd4 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    5fa2:	0018      	movs	r0, r3
    5fa4:	f7fe fbf4 	bl	4790 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
	usbd.epBank1SetMultiPacketSize(ep, 0);
    5fa8:	68bb      	ldr	r3, [r7, #8]
    5faa:	b2d9      	uxtb	r1, r3
    5fac:	4b09      	ldr	r3, [pc, #36]	; (5fd4 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    5fae:	2200      	movs	r2, #0
    5fb0:	0018      	movs	r0, r3
    5fb2:	f7fe fbb1 	bl	4718 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht>
	usbd.epBank1SetByteCount(ep, len);
    5fb6:	68bb      	ldr	r3, [r7, #8]
    5fb8:	b2d9      	uxtb	r1, r3
    5fba:	683b      	ldr	r3, [r7, #0]
    5fbc:	b29a      	uxth	r2, r3
    5fbe:	4b05      	ldr	r3, [pc, #20]	; (5fd4 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    5fc0:	0018      	movs	r0, r3
    5fc2:	f7fe fb63 	bl	468c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

	return len;
    5fc6:	683b      	ldr	r3, [r7, #0]
}
    5fc8:	0018      	movs	r0, r3
    5fca:	46bd      	mov	sp, r7
    5fcc:	b004      	add	sp, #16
    5fce:	bd80      	pop	{r7, pc}
    5fd0:	20000608 	.word	0x20000608
    5fd4:	20000338 	.word	0x20000338

00005fd8 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    5fd8:	b580      	push	{r7, lr}
    5fda:	b088      	sub	sp, #32
    5fdc:	af00      	add	r7, sp, #0
    5fde:	60f8      	str	r0, [r7, #12]
    5fe0:	60b9      	str	r1, [r7, #8]
    5fe2:	607a      	str	r2, [r7, #4]
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
    5fe4:	68bb      	ldr	r3, [r7, #8]
    5fe6:	61bb      	str	r3, [r7, #24]
	uint32_t length = len;
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	617b      	str	r3, [r7, #20]
	uint32_t sent = 0;
    5fec:	2300      	movs	r3, #0
    5fee:	613b      	str	r3, [r7, #16]
	uint32_t pos = 0;
    5ff0:	2300      	movs	r3, #0
    5ff2:	61fb      	str	r3, [r7, #28]

	if (_dry_run == true)
    5ff4:	4b1c      	ldr	r3, [pc, #112]	; (6068 <_ZN14USBDeviceClass11sendControlEPKvm+0x90>)
    5ff6:	781b      	ldrb	r3, [r3, #0]
    5ff8:	2b00      	cmp	r3, #0
    5ffa:	d001      	beq.n	6000 <_ZN14USBDeviceClass11sendControlEPKvm+0x28>
		return length;
    5ffc:	697b      	ldr	r3, [r7, #20]
    5ffe:	e02e      	b.n	605e <_ZN14USBDeviceClass11sendControlEPKvm+0x86>

	if (_pack_message == true) {
    6000:	4b1a      	ldr	r3, [pc, #104]	; (606c <_ZN14USBDeviceClass11sendControlEPKvm+0x94>)
    6002:	781b      	ldrb	r3, [r3, #0]
    6004:	2b00      	cmp	r3, #0
    6006:	d013      	beq.n	6030 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>
		memcpy(&_pack_buffer[_pack_size], data, len);
    6008:	4b19      	ldr	r3, [pc, #100]	; (6070 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    600a:	881b      	ldrh	r3, [r3, #0]
    600c:	001a      	movs	r2, r3
    600e:	4b19      	ldr	r3, [pc, #100]	; (6074 <_ZN14USBDeviceClass11sendControlEPKvm+0x9c>)
    6010:	18d3      	adds	r3, r2, r3
    6012:	687a      	ldr	r2, [r7, #4]
    6014:	69b9      	ldr	r1, [r7, #24]
    6016:	0018      	movs	r0, r3
    6018:	f00a fbfb 	bl	10812 <memcpy>
		_pack_size += len;
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	b29a      	uxth	r2, r3
    6020:	4b13      	ldr	r3, [pc, #76]	; (6070 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    6022:	881b      	ldrh	r3, [r3, #0]
    6024:	18d3      	adds	r3, r2, r3
    6026:	b29a      	uxth	r2, r3
    6028:	4b11      	ldr	r3, [pc, #68]	; (6070 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    602a:	801a      	strh	r2, [r3, #0]
		return length;
    602c:	697b      	ldr	r3, [r7, #20]
    602e:	e016      	b.n	605e <_ZN14USBDeviceClass11sendControlEPKvm+0x86>
	}

 	while (len > 0)
    6030:	687b      	ldr	r3, [r7, #4]
    6032:	2b00      	cmp	r3, #0
    6034:	d012      	beq.n	605c <_ZN14USBDeviceClass11sendControlEPKvm+0x84>
 	{
		sent = armSend(EP0, data + pos, len);
    6036:	69ba      	ldr	r2, [r7, #24]
    6038:	69fb      	ldr	r3, [r7, #28]
    603a:	18d2      	adds	r2, r2, r3
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	68f8      	ldr	r0, [r7, #12]
    6040:	2100      	movs	r1, #0
    6042:	f7ff ff97 	bl	5f74 <_ZN14USBDeviceClass7armSendEmPKvm>
    6046:	0003      	movs	r3, r0
    6048:	613b      	str	r3, [r7, #16]
		pos += sent;
    604a:	69fa      	ldr	r2, [r7, #28]
    604c:	693b      	ldr	r3, [r7, #16]
    604e:	18d3      	adds	r3, r2, r3
    6050:	61fb      	str	r3, [r7, #28]
		len -= sent;
    6052:	687a      	ldr	r2, [r7, #4]
    6054:	693b      	ldr	r3, [r7, #16]
    6056:	1ad3      	subs	r3, r2, r3
    6058:	607b      	str	r3, [r7, #4]
 	while (len > 0)
    605a:	e7e9      	b.n	6030 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>
 	}

	return length;
    605c:	697b      	ldr	r3, [r7, #20]
}
    605e:	0018      	movs	r0, r3
    6060:	46bd      	mov	sp, r7
    6062:	b008      	add	sp, #32
    6064:	bd80      	pop	{r7, pc}
    6066:	46c0      	nop			; (mov r8, r8)
    6068:	200007e4 	.word	0x200007e4
    606c:	200007e5 	.word	0x200007e5
    6070:	200007e6 	.word	0x200007e6
    6074:	200007e8 	.word	0x200007e8

00006078 <_ZN14USBDeviceClass7sendZlpEm>:

void USBDeviceClass::sendZlp(uint32_t ep)
{
    6078:	b580      	push	{r7, lr}
    607a:	b082      	sub	sp, #8
    607c:	af00      	add	r7, sp, #0
    607e:	6078      	str	r0, [r7, #4]
    6080:	6039      	str	r1, [r7, #0]
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
    6082:	683b      	ldr	r3, [r7, #0]
    6084:	b2d9      	uxtb	r1, r3
    6086:	4b04      	ldr	r3, [pc, #16]	; (6098 <_ZN14USBDeviceClass7sendZlpEm+0x20>)
    6088:	2200      	movs	r2, #0
    608a:	0018      	movs	r0, r3
    608c:	f7fe fafe 	bl	468c <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
}
    6090:	46c0      	nop			; (mov r8, r8)
    6092:	46bd      	mov	sp, r7
    6094:	b002      	add	sp, #8
    6096:	bd80      	pop	{r7, pc}
    6098:	20000338 	.word	0x20000338

0000609c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    609c:	b580      	push	{r7, lr}
    609e:	b086      	sub	sp, #24
    60a0:	af00      	add	r7, sp, #0
    60a2:	6078      	str	r0, [r7, #4]
    60a4:	6039      	str	r1, [r7, #0]
	switch (setup.bRequest) {
    60a6:	683b      	ldr	r3, [r7, #0]
    60a8:	785b      	ldrb	r3, [r3, #1]
    60aa:	2b0b      	cmp	r3, #11
    60ac:	d900      	bls.n	60b0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x14>
    60ae:	e0cd      	b.n	624c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b0>
    60b0:	009a      	lsls	r2, r3, #2
    60b2:	4b69      	ldr	r3, [pc, #420]	; (6258 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1bc>)
    60b4:	18d3      	adds	r3, r2, r3
    60b6:	681b      	ldr	r3, [r3, #0]
    60b8:	469f      	mov	pc, r3
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    60ba:	683b      	ldr	r3, [r7, #0]
    60bc:	781b      	ldrb	r3, [r3, #0]
    60be:	2b00      	cmp	r3, #0
    60c0:	d110      	bne.n	60e4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x48>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
    60c2:	2314      	movs	r3, #20
    60c4:	18fb      	adds	r3, r7, r3
    60c6:	2200      	movs	r2, #0
    60c8:	701a      	strb	r2, [r3, #0]
    60ca:	2314      	movs	r3, #20
    60cc:	18fb      	adds	r3, r7, r3
    60ce:	2200      	movs	r2, #0
    60d0:	705a      	strb	r2, [r3, #1]
			armSend(0, buff, 2);
    60d2:	2314      	movs	r3, #20
    60d4:	18fa      	adds	r2, r7, r3
    60d6:	6878      	ldr	r0, [r7, #4]
    60d8:	2302      	movs	r3, #2
    60da:	2100      	movs	r1, #0
    60dc:	f7ff ff4a 	bl	5f74 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    60e0:	2301      	movs	r3, #1
    60e2:	e0b4      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		// if( setup.bmRequestType == 2 ) // Endpoint:
		else
		{
			// Send the endpoint status
			// Check if the endpoint if currently halted
			uint8_t buff[] = { 0, 0 };
    60e4:	2310      	movs	r3, #16
    60e6:	18fb      	adds	r3, r7, r3
    60e8:	2200      	movs	r2, #0
    60ea:	701a      	strb	r2, [r3, #0]
    60ec:	2310      	movs	r3, #16
    60ee:	18fb      	adds	r3, r7, r3
    60f0:	2200      	movs	r2, #0
    60f2:	705a      	strb	r2, [r3, #1]
			if (isEndpointHalt == 1)
    60f4:	4b59      	ldr	r3, [pc, #356]	; (625c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    60f6:	781b      	ldrb	r3, [r3, #0]
    60f8:	2b01      	cmp	r3, #1
    60fa:	d103      	bne.n	6104 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x68>
				buff[0] = 1;
    60fc:	2310      	movs	r3, #16
    60fe:	18fb      	adds	r3, r7, r3
    6100:	2201      	movs	r2, #1
    6102:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 2);
    6104:	2310      	movs	r3, #16
    6106:	18fa      	adds	r2, r7, r3
    6108:	6878      	ldr	r0, [r7, #4]
    610a:	2302      	movs	r3, #2
    610c:	2100      	movs	r1, #0
    610e:	f7ff ff31 	bl	5f74 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    6112:	2301      	movs	r3, #1
    6114:	e09b      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case CLEAR_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    6116:	683b      	ldr	r3, [r7, #0]
    6118:	789b      	ldrb	r3, [r3, #2]
    611a:	2b01      	cmp	r3, #1
    611c:	d118      	bne.n	6150 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xb4>
		{
			// Enable remote wake-up and send a ZLP
			uint8_t buff[] = { 0, 0 };
    611e:	230c      	movs	r3, #12
    6120:	18fb      	adds	r3, r7, r3
    6122:	2200      	movs	r2, #0
    6124:	701a      	strb	r2, [r3, #0]
    6126:	230c      	movs	r3, #12
    6128:	18fb      	adds	r3, r7, r3
    612a:	2200      	movs	r2, #0
    612c:	705a      	strb	r2, [r3, #1]
			if (isRemoteWakeUpEnabled == 1)
    612e:	4b4c      	ldr	r3, [pc, #304]	; (6260 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c4>)
    6130:	781b      	ldrb	r3, [r3, #0]
    6132:	2b01      	cmp	r3, #1
    6134:	d103      	bne.n	613e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xa2>
				buff[0] = 1;
    6136:	230c      	movs	r3, #12
    6138:	18fb      	adds	r3, r7, r3
    613a:	2201      	movs	r2, #1
    613c:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 2);
    613e:	230c      	movs	r3, #12
    6140:	18fa      	adds	r2, r7, r3
    6142:	6878      	ldr	r0, [r7, #4]
    6144:	2302      	movs	r3, #2
    6146:	2100      	movs	r1, #0
    6148:	f7ff ff14 	bl	5f74 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    614c:	2301      	movs	r3, #1
    614e:	e07e      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}
		else // if( setup.wValueL == 0) // ENDPOINTHALT
		{
			isEndpointHalt = 0;
    6150:	4b42      	ldr	r3, [pc, #264]	; (625c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    6152:	2200      	movs	r2, #0
    6154:	701a      	strb	r2, [r3, #0]
			sendZlp(0);
    6156:	687b      	ldr	r3, [r7, #4]
    6158:	2100      	movs	r1, #0
    615a:	0018      	movs	r0, r3
    615c:	f7ff ff8c 	bl	6078 <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    6160:	2301      	movs	r3, #1
    6162:	e074      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    6164:	683b      	ldr	r3, [r7, #0]
    6166:	789b      	ldrb	r3, [r3, #2]
    6168:	2b01      	cmp	r3, #1
    616a:	d10f      	bne.n	618c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    616c:	4b3c      	ldr	r3, [pc, #240]	; (6260 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c4>)
    616e:	2201      	movs	r2, #1
    6170:	701a      	strb	r2, [r3, #0]
			uint8_t buff[] = { 0 };
    6172:	2308      	movs	r3, #8
    6174:	18fb      	adds	r3, r7, r3
    6176:	2200      	movs	r2, #0
    6178:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 1);
    617a:	2308      	movs	r3, #8
    617c:	18fa      	adds	r2, r7, r3
    617e:	6878      	ldr	r0, [r7, #4]
    6180:	2301      	movs	r3, #1
    6182:	2100      	movs	r1, #0
    6184:	f7ff fef6 	bl	5f74 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    6188:	2301      	movs	r3, #1
    618a:	e060      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}
		if (setup.wValueL == 0) // ENDPOINTHALT
    618c:	683b      	ldr	r3, [r7, #0]
    618e:	789b      	ldrb	r3, [r3, #2]
    6190:	2b00      	cmp	r3, #0
    6192:	d109      	bne.n	61a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x10c>
		{
			// Halt endpoint
			isEndpointHalt = 1;
    6194:	4b31      	ldr	r3, [pc, #196]	; (625c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    6196:	2201      	movs	r2, #1
    6198:	701a      	strb	r2, [r3, #0]
			sendZlp(0);
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	2100      	movs	r1, #0
    619e:	0018      	movs	r0, r3
    61a0:	f7ff ff6a 	bl	6078 <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    61a4:	2301      	movs	r3, #1
    61a6:	e052      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case SET_ADDRESS:
		setAddress(setup.wValueL);
    61a8:	683b      	ldr	r3, [r7, #0]
    61aa:	789b      	ldrb	r3, [r3, #2]
    61ac:	001a      	movs	r2, r3
    61ae:	687b      	ldr	r3, [r7, #4]
    61b0:	0011      	movs	r1, r2
    61b2:	0018      	movs	r0, r3
    61b4:	f7ff fad2 	bl	575c <_ZN14USBDeviceClass10setAddressEm>
		return true;
    61b8:	2301      	movs	r3, #1
    61ba:	e048      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);
    61bc:	683a      	ldr	r2, [r7, #0]
    61be:	687b      	ldr	r3, [r7, #4]
    61c0:	0011      	movs	r1, r2
    61c2:	0018      	movs	r0, r3
    61c4:	f7ff f8e4 	bl	5390 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    61c8:	0003      	movs	r3, r0
    61ca:	e040      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_DESCRIPTOR:
		return false;
    61cc:	2300      	movs	r3, #0
    61ce:	e03e      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
    61d0:	4a24      	ldr	r2, [pc, #144]	; (6264 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c8>)
    61d2:	6878      	ldr	r0, [r7, #4]
    61d4:	2301      	movs	r3, #1
    61d6:	2100      	movs	r1, #0
    61d8:	f7ff fecc 	bl	5f74 <_ZN14USBDeviceClass7armSendEmPKvm>
		return true;
    61dc:	2301      	movs	r3, #1
    61de:	e036      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    61e0:	683b      	ldr	r3, [r7, #0]
    61e2:	781b      	ldrb	r3, [r3, #0]
    61e4:	001a      	movs	r2, r3
    61e6:	231f      	movs	r3, #31
    61e8:	4013      	ands	r3, r2
    61ea:	d119      	bne.n	6220 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x184>

			initEndpoints();
    61ec:	687b      	ldr	r3, [r7, #4]
    61ee:	0018      	movs	r0, r3
    61f0:	f7ff fb36 	bl	5860 <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    61f4:	683b      	ldr	r3, [r7, #0]
    61f6:	789b      	ldrb	r3, [r3, #2]
    61f8:	001a      	movs	r2, r3
    61fa:	4b1a      	ldr	r3, [pc, #104]	; (6264 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c8>)
    61fc:	601a      	str	r2, [r3, #0]

			#if defined(CDC_ENABLED)
			// Enable interrupt for CDC reception from host (OUT packet)
			usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
    61fe:	4b1a      	ldr	r3, [pc, #104]	; (6268 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1cc>)
    6200:	2101      	movs	r1, #1
    6202:	0018      	movs	r0, r3
    6204:	f7fe f93f 	bl	4486 <_ZN20USBDevice_SAMD21G18x29epBank1EnableTransferCompleteEh>
			usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
    6208:	4b17      	ldr	r3, [pc, #92]	; (6268 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1cc>)
    620a:	2102      	movs	r1, #2
    620c:	0018      	movs	r0, r3
    620e:	f7fe f922 	bl	4456 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
			#endif

			sendZlp(0);
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	2100      	movs	r1, #0
    6216:	0018      	movs	r0, r3
    6218:	f7ff ff2e 	bl	6078 <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    621c:	2301      	movs	r3, #1
    621e:	e016      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		} else {
			return false;
    6220:	2300      	movs	r3, #0
    6222:	e014      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
    6224:	4a11      	ldr	r2, [pc, #68]	; (626c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1d0>)
    6226:	6878      	ldr	r0, [r7, #4]
    6228:	2301      	movs	r3, #1
    622a:	2100      	movs	r1, #0
    622c:	f7ff fea2 	bl	5f74 <_ZN14USBDeviceClass7armSendEmPKvm>
		return true;
    6230:	2301      	movs	r3, #1
    6232:	e00c      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_INTERFACE:
		_usbSetInterface = setup.wValueL;
    6234:	683b      	ldr	r3, [r7, #0]
    6236:	789b      	ldrb	r3, [r3, #2]
    6238:	001a      	movs	r2, r3
    623a:	4b0c      	ldr	r3, [pc, #48]	; (626c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1d0>)
    623c:	601a      	str	r2, [r3, #0]
		sendZlp(0);
    623e:	687b      	ldr	r3, [r7, #4]
    6240:	2100      	movs	r1, #0
    6242:	0018      	movs	r0, r3
    6244:	f7ff ff18 	bl	6078 <_ZN14USBDeviceClass7sendZlpEm>
		return true;
    6248:	2301      	movs	r3, #1
    624a:	e000      	b.n	624e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	default:
		return true;
    624c:	2301      	movs	r3, #1
	}
}
    624e:	0018      	movs	r0, r3
    6250:	46bd      	mov	sp, r7
    6252:	b006      	add	sp, #24
    6254:	bd80      	pop	{r7, pc}
    6256:	46c0      	nop			; (mov r8, r8)
    6258:	00013498 	.word	0x00013498
    625c:	2000043f 	.word	0x2000043f
    6260:	2000043e 	.word	0x2000043e
    6264:	20000440 	.word	0x20000440
    6268:	20000338 	.word	0x20000338
    626c:	20000444 	.word	0x20000444

00006270 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
    6270:	b590      	push	{r4, r7, lr}
    6272:	b085      	sub	sp, #20
    6274:	af00      	add	r7, sp, #0
    6276:	6078      	str	r0, [r7, #4]

	if (_pack_message == true) {
    6278:	4b95      	ldr	r3, [pc, #596]	; (64d0 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    627a:	781b      	ldrb	r3, [r3, #0]
    627c:	2b00      	cmp	r3, #0
    627e:	d000      	beq.n	6282 <_ZN14USBDeviceClass10ISRHandlerEv+0x12>
    6280:	e120      	b.n	64c4 <_ZN14USBDeviceClass10ISRHandlerEv+0x254>
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    6282:	4b94      	ldr	r3, [pc, #592]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6284:	0018      	movs	r0, r3
    6286:	f7fd ff7d 	bl	4184 <_ZN20USBDevice_SAMD21G18x21isEndOfResetInterruptEv>
    628a:	1e03      	subs	r3, r0, #0
    628c:	d011      	beq.n	62b2 <_ZN14USBDeviceClass10ISRHandlerEv+0x42>
	{
		// Configure EP 0
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);
    628e:	687b      	ldr	r3, [r7, #4]
    6290:	2200      	movs	r2, #0
    6292:	2100      	movs	r1, #0
    6294:	0018      	movs	r0, r3
    6296:	f7ff fb13 	bl	58c0 <_ZN14USBDeviceClass6initEPEmm>

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);
    629a:	4b8e      	ldr	r3, [pc, #568]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    629c:	2100      	movs	r1, #0
    629e:	0018      	movs	r0, r3
    62a0:	f7fe f8c1 	bl	4426 <_ZN20USBDevice_SAMD21G18x26epBank0EnableSetupReceivedEh>

		_usbConfiguration = 0;
    62a4:	4b8c      	ldr	r3, [pc, #560]	; (64d8 <_ZN14USBDeviceClass10ISRHandlerEv+0x268>)
    62a6:	2200      	movs	r2, #0
    62a8:	601a      	str	r2, [r3, #0]

		usbd.ackEndOfResetInterrupt();
    62aa:	4b8a      	ldr	r3, [pc, #552]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    62ac:	0018      	movs	r0, r3
    62ae:	f7fd ff77 	bl	41a0 <_ZN20USBDevice_SAMD21G18x22ackEndOfResetInterruptEv>
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    62b2:	4b88      	ldr	r3, [pc, #544]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    62b4:	0018      	movs	r0, r3
    62b6:	f7fd ff8d 	bl	41d4 <_ZN20USBDevice_SAMD21G18x23isStartOfFrameInterruptEv>
    62ba:	1e03      	subs	r3, r0, #0
    62bc:	d03b      	beq.n	6336 <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
	{
		usbd.ackStartOfFrameInterrupt();
    62be:	4b85      	ldr	r3, [pc, #532]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    62c0:	0018      	movs	r0, r3
    62c2:	f7fd ff95 	bl	41f0 <_ZN20USBDevice_SAMD21G18x24ackStartOfFrameInterruptEv>

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    62c6:	4b85      	ldr	r3, [pc, #532]	; (64dc <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    62c8:	781b      	ldrb	r3, [r3, #0]
    62ca:	b2db      	uxtb	r3, r3
    62cc:	17da      	asrs	r2, r3, #31
    62ce:	1ad3      	subs	r3, r2, r3
    62d0:	0fdb      	lsrs	r3, r3, #31
    62d2:	b2db      	uxtb	r3, r3
    62d4:	2b00      	cmp	r3, #0
    62d6:	d012      	beq.n	62fe <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
			txLEDPulse--;
    62d8:	4b80      	ldr	r3, [pc, #512]	; (64dc <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    62da:	781b      	ldrb	r3, [r3, #0]
    62dc:	b2db      	uxtb	r3, r3
    62de:	3b01      	subs	r3, #1
    62e0:	b2da      	uxtb	r2, r3
    62e2:	4b7e      	ldr	r3, [pc, #504]	; (64dc <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    62e4:	701a      	strb	r2, [r3, #0]
			if (txLEDPulse == 0)
    62e6:	4b7d      	ldr	r3, [pc, #500]	; (64dc <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    62e8:	781b      	ldrb	r3, [r3, #0]
    62ea:	b2db      	uxtb	r3, r3
    62ec:	425a      	negs	r2, r3
    62ee:	4153      	adcs	r3, r2
    62f0:	b2db      	uxtb	r3, r3
    62f2:	2b00      	cmp	r3, #0
    62f4:	d003      	beq.n	62fe <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
				digitalWrite(PIN_LED_TXL, HIGH);
    62f6:	2101      	movs	r1, #1
    62f8:	201f      	movs	r0, #31
    62fa:	f000 fbcd 	bl	6a98 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    62fe:	4b78      	ldr	r3, [pc, #480]	; (64e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6300:	781b      	ldrb	r3, [r3, #0]
    6302:	b2db      	uxtb	r3, r3
    6304:	17da      	asrs	r2, r3, #31
    6306:	1ad3      	subs	r3, r2, r3
    6308:	0fdb      	lsrs	r3, r3, #31
    630a:	b2db      	uxtb	r3, r3
    630c:	2b00      	cmp	r3, #0
    630e:	d012      	beq.n	6336 <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
			rxLEDPulse--;
    6310:	4b73      	ldr	r3, [pc, #460]	; (64e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6312:	781b      	ldrb	r3, [r3, #0]
    6314:	b2db      	uxtb	r3, r3
    6316:	3b01      	subs	r3, #1
    6318:	b2da      	uxtb	r2, r3
    631a:	4b71      	ldr	r3, [pc, #452]	; (64e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    631c:	701a      	strb	r2, [r3, #0]
			if (rxLEDPulse == 0)
    631e:	4b70      	ldr	r3, [pc, #448]	; (64e0 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6320:	781b      	ldrb	r3, [r3, #0]
    6322:	b2db      	uxtb	r3, r3
    6324:	425a      	negs	r2, r3
    6326:	4153      	adcs	r3, r2
    6328:	b2db      	uxtb	r3, r3
    632a:	2b00      	cmp	r3, #0
    632c:	d003      	beq.n	6336 <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
				digitalWrite(PIN_LED_RXL, HIGH);
    632e:	2101      	movs	r1, #1
    6330:	201e      	movs	r0, #30
    6332:	f000 fbb1 	bl	6a98 <digitalWrite>
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    6336:	4b67      	ldr	r3, [pc, #412]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6338:	2100      	movs	r1, #0
    633a:	0018      	movs	r0, r3
    633c:	f7fd ffc7 	bl	42ce <_ZN20USBDevice_SAMD21G18x22epBank0IsSetupReceivedEh>
    6340:	1e03      	subs	r3, r0, #0
    6342:	d047      	beq.n	63d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x164>
	{
		usbd.epBank0AckSetupReceived(0);
    6344:	4b63      	ldr	r3, [pc, #396]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6346:	2100      	movs	r1, #0
    6348:	0018      	movs	r0, r3
    634a:	f7fe f818 	bl	437e <_ZN20USBDevice_SAMD21G18x23epBank0AckSetupReceivedEh>

		USBSetup *setup = reinterpret_cast<USBSetup *>(udd_ep_out_cache_buffer[0]);
    634e:	4b65      	ldr	r3, [pc, #404]	; (64e4 <_ZN14USBDeviceClass10ISRHandlerEv+0x274>)
    6350:	60bb      	str	r3, [r7, #8]

		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);
    6352:	4b60      	ldr	r3, [pc, #384]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6354:	2100      	movs	r1, #0
    6356:	0018      	movs	r0, r3
    6358:	f7fe f936 	bl	45c8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    635c:	68bb      	ldr	r3, [r7, #8]
    635e:	781b      	ldrb	r3, [r3, #0]
    6360:	001a      	movs	r2, r3
    6362:	2360      	movs	r3, #96	; 0x60
    6364:	4013      	ands	r3, r2
    6366:	d10a      	bne.n	637e <_ZN14USBDeviceClass10ISRHandlerEv+0x10e>
			// Standard Requests
			ok = handleStandardSetup(*setup);
    6368:	230f      	movs	r3, #15
    636a:	18fc      	adds	r4, r7, r3
    636c:	68ba      	ldr	r2, [r7, #8]
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	0011      	movs	r1, r2
    6372:	0018      	movs	r0, r3
    6374:	f7ff fe92 	bl	609c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
    6378:	0003      	movs	r3, r0
    637a:	7023      	strb	r3, [r4, #0]
    637c:	e009      	b.n	6392 <_ZN14USBDeviceClass10ISRHandlerEv+0x122>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
    637e:	230f      	movs	r3, #15
    6380:	18fc      	adds	r4, r7, r3
    6382:	68ba      	ldr	r2, [r7, #8]
    6384:	687b      	ldr	r3, [r7, #4]
    6386:	0011      	movs	r1, r2
    6388:	0018      	movs	r0, r3
    638a:	f7ff fa27 	bl	57dc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    638e:	0003      	movs	r3, r0
    6390:	7023      	strb	r3, [r4, #0]
		}

		if (ok) {
    6392:	230f      	movs	r3, #15
    6394:	18fb      	adds	r3, r7, r3
    6396:	781b      	ldrb	r3, [r3, #0]
    6398:	2b00      	cmp	r3, #0
    639a:	d005      	beq.n	63a8 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>
			usbd.epBank1SetReady(0);
    639c:	4b4d      	ldr	r3, [pc, #308]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    639e:	2100      	movs	r1, #0
    63a0:	0018      	movs	r0, r3
    63a2:	f7fe f8fa 	bl	459a <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>
    63a6:	e004      	b.n	63b2 <_ZN14USBDeviceClass10ISRHandlerEv+0x142>
		} else {
			stall(0);
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	2100      	movs	r1, #0
    63ac:	0018      	movs	r0, r3
    63ae:	f7ff fb5d 	bl	5a6c <_ZN14USBDeviceClass5stallEm>
		}

		if (usbd.epBank1IsStalled(0))
    63b2:	4b48      	ldr	r3, [pc, #288]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63b4:	2100      	movs	r1, #0
    63b6:	0018      	movs	r0, r3
    63b8:	f7fd ff9f 	bl	42fa <_ZN20USBDevice_SAMD21G18x16epBank1IsStalledEh>
    63bc:	1e03      	subs	r3, r0, #0
    63be:	d009      	beq.n	63d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x164>
		{
			usbd.epBank1AckStalled(0);
    63c0:	4b44      	ldr	r3, [pc, #272]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63c2:	2100      	movs	r1, #0
    63c4:	0018      	movs	r0, r3
    63c6:	f7fd ffef 	bl	43a8 <_ZN20USBDevice_SAMD21G18x17epBank1AckStalledEh>

			// Remove stall request
			usbd.epBank1DisableStalled(0);
    63ca:	4b42      	ldr	r3, [pc, #264]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63cc:	2100      	movs	r1, #0
    63ce:	0018      	movs	r0, r3
    63d0:	f7fe f871 	bl	44b6 <_ZN20USBDevice_SAMD21G18x21epBank1DisableStalledEh>
		}

	} // end Received Setup handler

	uint8_t i=0;
    63d4:	230e      	movs	r3, #14
    63d6:	18fb      	adds	r3, r7, r3
    63d8:	2200      	movs	r2, #0
    63da:	701a      	strb	r2, [r3, #0]
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    63dc:	4b3d      	ldr	r3, [pc, #244]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63de:	0018      	movs	r0, r3
    63e0:	f7fd ff69 	bl	42b6 <_ZN20USBDevice_SAMD21G18x18epInterruptSummaryEv>
    63e4:	0003      	movs	r3, r0
    63e6:	b2da      	uxtb	r2, r3
    63e8:	230d      	movs	r3, #13
    63ea:	18fb      	adds	r3, r7, r3
    63ec:	2101      	movs	r1, #1
    63ee:	438a      	bics	r2, r1
    63f0:	701a      	strb	r2, [r3, #0]
	while (ept_int != 0)
    63f2:	230d      	movs	r3, #13
    63f4:	18fb      	adds	r3, r7, r3
    63f6:	781b      	ldrb	r3, [r3, #0]
    63f8:	2b00      	cmp	r3, #0
    63fa:	d066      	beq.n	64ca <_ZN14USBDeviceClass10ISRHandlerEv+0x25a>
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    63fc:	230d      	movs	r3, #13
    63fe:	18fb      	adds	r3, r7, r3
    6400:	781a      	ldrb	r2, [r3, #0]
    6402:	230e      	movs	r3, #14
    6404:	18fb      	adds	r3, r7, r3
    6406:	781b      	ldrb	r3, [r3, #0]
    6408:	411a      	asrs	r2, r3
    640a:	0013      	movs	r3, r2
    640c:	2201      	movs	r2, #1
    640e:	4013      	ands	r3, r2
    6410:	d04b      	beq.n	64aa <_ZN14USBDeviceClass10ISRHandlerEv+0x23a>
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    6412:	230e      	movs	r3, #14
    6414:	18fb      	adds	r3, r7, r3
    6416:	781a      	ldrb	r2, [r3, #0]
    6418:	4b2e      	ldr	r3, [pc, #184]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    641a:	0011      	movs	r1, r2
    641c:	0018      	movs	r0, r3
    641e:	f7fd ff82 	bl	4326 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    6422:	1e03      	subs	r3, r0, #0
    6424:	d109      	bne.n	643a <_ZN14USBDeviceClass10ISRHandlerEv+0x1ca>
			    usbd.epBank1IsTransferComplete(i))
    6426:	230e      	movs	r3, #14
    6428:	18fb      	adds	r3, r7, r3
    642a:	781a      	ldrb	r2, [r3, #0]
    642c:	4b29      	ldr	r3, [pc, #164]	; (64d4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    642e:	0011      	movs	r1, r2
    6430:	0018      	movs	r0, r3
    6432:	f7fd ff8e 	bl	4352 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    6436:	1e03      	subs	r3, r0, #0
			if (usbd.epBank0IsTransferComplete(i) ||
    6438:	d001      	beq.n	643e <_ZN14USBDeviceClass10ISRHandlerEv+0x1ce>
    643a:	2301      	movs	r3, #1
    643c:	e000      	b.n	6440 <_ZN14USBDeviceClass10ISRHandlerEv+0x1d0>
    643e:	2300      	movs	r3, #0
    6440:	2b00      	cmp	r3, #0
    6442:	d020      	beq.n	6486 <_ZN14USBDeviceClass10ISRHandlerEv+0x216>
			{
				if (epHandlers[i]) {
    6444:	230e      	movs	r3, #14
    6446:	18fb      	adds	r3, r7, r3
    6448:	781a      	ldrb	r2, [r3, #0]
    644a:	4b27      	ldr	r3, [pc, #156]	; (64e8 <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    644c:	0092      	lsls	r2, r2, #2
    644e:	58d3      	ldr	r3, [r2, r3]
    6450:	2b00      	cmp	r3, #0
    6452:	d010      	beq.n	6476 <_ZN14USBDeviceClass10ISRHandlerEv+0x206>
					epHandlers[i]->handleEndpoint();
    6454:	230e      	movs	r3, #14
    6456:	18fb      	adds	r3, r7, r3
    6458:	781a      	ldrb	r2, [r3, #0]
    645a:	4b23      	ldr	r3, [pc, #140]	; (64e8 <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    645c:	0092      	lsls	r2, r2, #2
    645e:	58d3      	ldr	r3, [r2, r3]
    6460:	681b      	ldr	r3, [r3, #0]
    6462:	681b      	ldr	r3, [r3, #0]
    6464:	220e      	movs	r2, #14
    6466:	18ba      	adds	r2, r7, r2
    6468:	7811      	ldrb	r1, [r2, #0]
    646a:	4a1f      	ldr	r2, [pc, #124]	; (64e8 <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    646c:	0089      	lsls	r1, r1, #2
    646e:	588a      	ldr	r2, [r1, r2]
    6470:	0010      	movs	r0, r2
    6472:	4798      	blx	r3
    6474:	e007      	b.n	6486 <_ZN14USBDeviceClass10ISRHandlerEv+0x216>
				} else {
					handleEndpoint(i);
    6476:	230e      	movs	r3, #14
    6478:	18fb      	adds	r3, r7, r3
    647a:	781a      	ldrb	r2, [r3, #0]
    647c:	687b      	ldr	r3, [r7, #4]
    647e:	0011      	movs	r1, r2
    6480:	0018      	movs	r0, r3
    6482:	f7ff f881 	bl	5588 <_ZN14USBDeviceClass14handleEndpointEh>
				}
			}
			ept_int &= ~(1 << i);
    6486:	230e      	movs	r3, #14
    6488:	18fb      	adds	r3, r7, r3
    648a:	781b      	ldrb	r3, [r3, #0]
    648c:	2201      	movs	r2, #1
    648e:	409a      	lsls	r2, r3
    6490:	0013      	movs	r3, r2
    6492:	b25b      	sxtb	r3, r3
    6494:	43db      	mvns	r3, r3
    6496:	b25b      	sxtb	r3, r3
    6498:	220d      	movs	r2, #13
    649a:	18ba      	adds	r2, r7, r2
    649c:	7812      	ldrb	r2, [r2, #0]
    649e:	b252      	sxtb	r2, r2
    64a0:	4013      	ands	r3, r2
    64a2:	b25a      	sxtb	r2, r3
    64a4:	230d      	movs	r3, #13
    64a6:	18fb      	adds	r3, r7, r3
    64a8:	701a      	strb	r2, [r3, #0]
		}
		i++;
    64aa:	230e      	movs	r3, #14
    64ac:	18fb      	adds	r3, r7, r3
    64ae:	781a      	ldrb	r2, [r3, #0]
    64b0:	230e      	movs	r3, #14
    64b2:	18fb      	adds	r3, r7, r3
    64b4:	3201      	adds	r2, #1
    64b6:	701a      	strb	r2, [r3, #0]
		if (i > USB_EPT_NUM)
    64b8:	230e      	movs	r3, #14
    64ba:	18fb      	adds	r3, r7, r3
    64bc:	781b      	ldrb	r3, [r3, #0]
    64be:	2b08      	cmp	r3, #8
    64c0:	dc02      	bgt.n	64c8 <_ZN14USBDeviceClass10ISRHandlerEv+0x258>
	while (ept_int != 0)
    64c2:	e796      	b.n	63f2 <_ZN14USBDeviceClass10ISRHandlerEv+0x182>
		return;
    64c4:	46c0      	nop			; (mov r8, r8)
    64c6:	e000      	b.n	64ca <_ZN14USBDeviceClass10ISRHandlerEv+0x25a>
			break;  // fire exit
    64c8:	46c0      	nop			; (mov r8, r8)
	}
}
    64ca:	46bd      	mov	sp, r7
    64cc:	b005      	add	sp, #20
    64ce:	bd90      	pop	{r4, r7, pc}
    64d0:	200007e5 	.word	0x200007e5
    64d4:	20000338 	.word	0x20000338
    64d8:	20000440 	.word	0x20000440
    64dc:	2000043c 	.word	0x2000043c
    64e0:	2000043d 	.word	0x2000043d
    64e4:	20000448 	.word	0x20000448
    64e8:	200007c8 	.word	0x200007c8

000064ec <_Z41__static_initialization_and_destruction_0ii>:
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    64ec:	b580      	push	{r7, lr}
    64ee:	b082      	sub	sp, #8
    64f0:	af00      	add	r7, sp, #0
    64f2:	6078      	str	r0, [r7, #4]
    64f4:	6039      	str	r1, [r7, #0]
    64f6:	687b      	ldr	r3, [r7, #4]
    64f8:	2b01      	cmp	r3, #1
    64fa:	d10b      	bne.n	6514 <_Z41__static_initialization_and_destruction_0ii+0x28>
    64fc:	683b      	ldr	r3, [r7, #0]
    64fe:	4a07      	ldr	r2, [pc, #28]	; (651c <_Z41__static_initialization_and_destruction_0ii+0x30>)
    6500:	4293      	cmp	r3, r2
    6502:	d107      	bne.n	6514 <_Z41__static_initialization_and_destruction_0ii+0x28>
USBDevice_SAMD21G18x usbd;
    6504:	4b06      	ldr	r3, [pc, #24]	; (6520 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    6506:	0018      	movs	r0, r3
    6508:	f7fd fddc 	bl	40c4 <_ZN20USBDevice_SAMD21G18xC1Ev>
USBDeviceClass USBDevice;
    650c:	4b05      	ldr	r3, [pc, #20]	; (6524 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    650e:	0018      	movs	r0, r3
    6510:	f7fd fdb2 	bl	4078 <_ZN14USBDeviceClassC1Ev>
    6514:	46c0      	nop			; (mov r8, r8)
    6516:	46bd      	mov	sp, r7
    6518:	b002      	add	sp, #8
    651a:	bd80      	pop	{r7, pc}
    651c:	0000ffff 	.word	0x0000ffff
    6520:	20000338 	.word	0x20000338
    6524:	200008f0 	.word	0x200008f0

00006528 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
    6528:	b580      	push	{r7, lr}
    652a:	af00      	add	r7, sp, #0
    652c:	4b03      	ldr	r3, [pc, #12]	; (653c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x14>)
    652e:	0019      	movs	r1, r3
    6530:	2001      	movs	r0, #1
    6532:	f7ff ffdb 	bl	64ec <_Z41__static_initialization_and_destruction_0ii>
    6536:	46bd      	mov	sp, r7
    6538:	bd80      	pop	{r7, pc}
    653a:	46c0      	nop			; (mov r8, r8)
    653c:	0000ffff 	.word	0x0000ffff

00006540 <__NVIC_SetPriority>:
{
    6540:	b5b0      	push	{r4, r5, r7, lr}
    6542:	b082      	sub	sp, #8
    6544:	af00      	add	r7, sp, #0
    6546:	0002      	movs	r2, r0
    6548:	6039      	str	r1, [r7, #0]
    654a:	1dfb      	adds	r3, r7, #7
    654c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    654e:	1dfb      	adds	r3, r7, #7
    6550:	781b      	ldrb	r3, [r3, #0]
    6552:	2b7f      	cmp	r3, #127	; 0x7f
    6554:	d828      	bhi.n	65a8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6556:	4c2f      	ldr	r4, [pc, #188]	; (6614 <__NVIC_SetPriority+0xd4>)
    6558:	1dfb      	adds	r3, r7, #7
    655a:	781b      	ldrb	r3, [r3, #0]
    655c:	b25b      	sxtb	r3, r3
    655e:	089b      	lsrs	r3, r3, #2
    6560:	492c      	ldr	r1, [pc, #176]	; (6614 <__NVIC_SetPriority+0xd4>)
    6562:	1dfa      	adds	r2, r7, #7
    6564:	7812      	ldrb	r2, [r2, #0]
    6566:	b252      	sxtb	r2, r2
    6568:	0892      	lsrs	r2, r2, #2
    656a:	32c0      	adds	r2, #192	; 0xc0
    656c:	0092      	lsls	r2, r2, #2
    656e:	5852      	ldr	r2, [r2, r1]
    6570:	1df9      	adds	r1, r7, #7
    6572:	7809      	ldrb	r1, [r1, #0]
    6574:	0008      	movs	r0, r1
    6576:	2103      	movs	r1, #3
    6578:	4001      	ands	r1, r0
    657a:	00c9      	lsls	r1, r1, #3
    657c:	20ff      	movs	r0, #255	; 0xff
    657e:	4088      	lsls	r0, r1
    6580:	0001      	movs	r1, r0
    6582:	43c9      	mvns	r1, r1
    6584:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    6586:	683a      	ldr	r2, [r7, #0]
    6588:	0192      	lsls	r2, r2, #6
    658a:	20ff      	movs	r0, #255	; 0xff
    658c:	4010      	ands	r0, r2
    658e:	1dfa      	adds	r2, r7, #7
    6590:	7812      	ldrb	r2, [r2, #0]
    6592:	0015      	movs	r5, r2
    6594:	2203      	movs	r2, #3
    6596:	402a      	ands	r2, r5
    6598:	00d2      	lsls	r2, r2, #3
    659a:	4090      	lsls	r0, r2
    659c:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    659e:	430a      	orrs	r2, r1
    65a0:	33c0      	adds	r3, #192	; 0xc0
    65a2:	009b      	lsls	r3, r3, #2
    65a4:	511a      	str	r2, [r3, r4]
}
    65a6:	e031      	b.n	660c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    65a8:	4c1b      	ldr	r4, [pc, #108]	; (6618 <__NVIC_SetPriority+0xd8>)
    65aa:	1dfb      	adds	r3, r7, #7
    65ac:	781b      	ldrb	r3, [r3, #0]
    65ae:	001a      	movs	r2, r3
    65b0:	230f      	movs	r3, #15
    65b2:	4013      	ands	r3, r2
    65b4:	3b08      	subs	r3, #8
    65b6:	0899      	lsrs	r1, r3, #2
    65b8:	4a17      	ldr	r2, [pc, #92]	; (6618 <__NVIC_SetPriority+0xd8>)
    65ba:	1dfb      	adds	r3, r7, #7
    65bc:	781b      	ldrb	r3, [r3, #0]
    65be:	0018      	movs	r0, r3
    65c0:	230f      	movs	r3, #15
    65c2:	4003      	ands	r3, r0
    65c4:	3b08      	subs	r3, #8
    65c6:	089b      	lsrs	r3, r3, #2
    65c8:	3306      	adds	r3, #6
    65ca:	009b      	lsls	r3, r3, #2
    65cc:	18d3      	adds	r3, r2, r3
    65ce:	3304      	adds	r3, #4
    65d0:	681b      	ldr	r3, [r3, #0]
    65d2:	1dfa      	adds	r2, r7, #7
    65d4:	7812      	ldrb	r2, [r2, #0]
    65d6:	0010      	movs	r0, r2
    65d8:	2203      	movs	r2, #3
    65da:	4002      	ands	r2, r0
    65dc:	00d2      	lsls	r2, r2, #3
    65de:	20ff      	movs	r0, #255	; 0xff
    65e0:	4090      	lsls	r0, r2
    65e2:	0002      	movs	r2, r0
    65e4:	43d2      	mvns	r2, r2
    65e6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    65e8:	683b      	ldr	r3, [r7, #0]
    65ea:	019b      	lsls	r3, r3, #6
    65ec:	20ff      	movs	r0, #255	; 0xff
    65ee:	4018      	ands	r0, r3
    65f0:	1dfb      	adds	r3, r7, #7
    65f2:	781b      	ldrb	r3, [r3, #0]
    65f4:	001d      	movs	r5, r3
    65f6:	2303      	movs	r3, #3
    65f8:	402b      	ands	r3, r5
    65fa:	00db      	lsls	r3, r3, #3
    65fc:	4098      	lsls	r0, r3
    65fe:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6600:	431a      	orrs	r2, r3
    6602:	1d8b      	adds	r3, r1, #6
    6604:	009b      	lsls	r3, r3, #2
    6606:	18e3      	adds	r3, r4, r3
    6608:	3304      	adds	r3, #4
    660a:	601a      	str	r2, [r3, #0]
}
    660c:	46c0      	nop			; (mov r8, r8)
    660e:	46bd      	mov	sp, r7
    6610:	b002      	add	sp, #8
    6612:	bdb0      	pop	{r4, r5, r7, pc}
    6614:	e000e100 	.word	0xe000e100
    6618:	e000ed00 	.word	0xe000ed00

0000661c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    661c:	b580      	push	{r7, lr}
    661e:	b082      	sub	sp, #8
    6620:	af00      	add	r7, sp, #0
    6622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    6624:	687b      	ldr	r3, [r7, #4]
    6626:	3b01      	subs	r3, #1
    6628:	4a0c      	ldr	r2, [pc, #48]	; (665c <SysTick_Config+0x40>)
    662a:	4293      	cmp	r3, r2
    662c:	d901      	bls.n	6632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
    662e:	2301      	movs	r3, #1
    6630:	e010      	b.n	6654 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    6632:	4b0b      	ldr	r3, [pc, #44]	; (6660 <SysTick_Config+0x44>)
    6634:	687a      	ldr	r2, [r7, #4]
    6636:	3a01      	subs	r2, #1
    6638:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    663a:	2301      	movs	r3, #1
    663c:	425b      	negs	r3, r3
    663e:	2103      	movs	r1, #3
    6640:	0018      	movs	r0, r3
    6642:	f7ff ff7d 	bl	6540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    6646:	4b06      	ldr	r3, [pc, #24]	; (6660 <SysTick_Config+0x44>)
    6648:	2200      	movs	r2, #0
    664a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    664c:	4b04      	ldr	r3, [pc, #16]	; (6660 <SysTick_Config+0x44>)
    664e:	2207      	movs	r2, #7
    6650:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    6652:	2300      	movs	r3, #0
}
    6654:	0018      	movs	r0, r3
    6656:	46bd      	mov	sp, r7
    6658:	b002      	add	sp, #8
    665a:	bd80      	pop	{r7, pc}
    665c:	00ffffff 	.word	0x00ffffff
    6660:	e000e010 	.word	0xe000e010

00006664 <init>:
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz.
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    6664:	b580      	push	{r7, lr}
    6666:	b082      	sub	sp, #8
    6668:	af00      	add	r7, sp, #0
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    666a:	4b3d      	ldr	r3, [pc, #244]	; (6760 <init+0xfc>)
    666c:	681a      	ldr	r2, [r3, #0]
    666e:	23fa      	movs	r3, #250	; 0xfa
    6670:	0099      	lsls	r1, r3, #2
    6672:	0010      	movs	r0, r2
    6674:	f008 f900 	bl	e878 <__udivsi3>
    6678:	0003      	movs	r3, r0
    667a:	0018      	movs	r0, r3
    667c:	f7ff ffce 	bl	661c <SysTick_Config>
    6680:	1e03      	subs	r3, r0, #0
    6682:	d000      	beq.n	6686 <init+0x22>
  {
    // Capture error
    while ( 1 ) ;
    6684:	e7fe      	b.n	6684 <init+0x20>
  }
  NVIC_SetPriority (SysTick_IRQn,  (1 << __NVIC_PRIO_BITS) - 2);  /* set Priority for Systick Interrupt (2nd lowest) */
    6686:	2301      	movs	r3, #1
    6688:	425b      	negs	r3, r3
    668a:	2102      	movs	r1, #2
    668c:	0018      	movs	r0, r3
    668e:	f7ff ff57 	bl	6540 <__NVIC_SetPriority>
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    6692:	4b34      	ldr	r3, [pc, #208]	; (6764 <init+0x100>)
    6694:	4a33      	ldr	r2, [pc, #204]	; (6764 <init+0x100>)
    6696:	6a12      	ldr	r2, [r2, #32]
    6698:	21fc      	movs	r1, #252	; 0xfc
    669a:	430a      	orrs	r2, r1
    669c:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    669e:	4b31      	ldr	r3, [pc, #196]	; (6764 <init+0x100>)
    66a0:	4a30      	ldr	r2, [pc, #192]	; (6764 <init+0x100>)
    66a2:	6a12      	ldr	r2, [r2, #32]
    66a4:	21fc      	movs	r1, #252	; 0xfc
    66a6:	0189      	lsls	r1, r1, #6
    66a8:	430a      	orrs	r2, r1
    66aa:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    66ac:	4b2d      	ldr	r3, [pc, #180]	; (6764 <init+0x100>)
    66ae:	4a2d      	ldr	r2, [pc, #180]	; (6764 <init+0x100>)
    66b0:	6a12      	ldr	r2, [r2, #32]
    66b2:	21a0      	movs	r1, #160	; 0xa0
    66b4:	02c9      	lsls	r1, r1, #11
    66b6:	430a      	orrs	r2, r1
    66b8:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    66ba:	2300      	movs	r3, #0
    66bc:	607b      	str	r3, [r7, #4]
    66be:	e007      	b.n	66d0 <init+0x6c>
  {
    pinMode( ul, INPUT ) ;
    66c0:	687b      	ldr	r3, [r7, #4]
    66c2:	2100      	movs	r1, #0
    66c4:	0018      	movs	r0, r3
    66c6:	f000 f8bd 	bl	6844 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	3301      	adds	r3, #1
    66ce:	607b      	str	r3, [r7, #4]
    66d0:	687b      	ldr	r3, [r7, #4]
    66d2:	2b12      	cmp	r3, #18
    66d4:	d9f4      	bls.n	66c0 <init+0x5c>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    66d6:	46c0      	nop			; (mov r8, r8)
    66d8:	4b23      	ldr	r3, [pc, #140]	; (6768 <init+0x104>)
    66da:	785b      	ldrb	r3, [r3, #1]
    66dc:	b2db      	uxtb	r3, r3
    66de:	b25b      	sxtb	r3, r3
    66e0:	2b00      	cmp	r3, #0
    66e2:	dbf9      	blt.n	66d8 <init+0x74>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    66e4:	4b20      	ldr	r3, [pc, #128]	; (6768 <init+0x104>)
    66e6:	4a21      	ldr	r2, [pc, #132]	; (676c <init+0x108>)
    66e8:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    66ea:	46c0      	nop			; (mov r8, r8)
    66ec:	4b20      	ldr	r3, [pc, #128]	; (6770 <init+0x10c>)
    66ee:	7e5b      	ldrb	r3, [r3, #25]
    66f0:	061b      	lsls	r3, r3, #24
    66f2:	0fdb      	lsrs	r3, r3, #31
    66f4:	b2db      	uxtb	r3, r3
    66f6:	2b01      	cmp	r3, #1
    66f8:	d0f8      	beq.n	66ec <init+0x88>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    66fa:	4b1d      	ldr	r3, [pc, #116]	; (6770 <init+0x10c>)
    66fc:	22e4      	movs	r2, #228	; 0xe4
    66fe:	00d2      	lsls	r2, r2, #3
    6700:	809a      	strh	r2, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    6702:	4b1b      	ldr	r3, [pc, #108]	; (6770 <init+0x10c>)
    6704:	223f      	movs	r2, #63	; 0x3f
    6706:	70da      	strb	r2, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    6708:	46c0      	nop			; (mov r8, r8)
    670a:	4b19      	ldr	r3, [pc, #100]	; (6770 <init+0x10c>)
    670c:	7e5b      	ldrb	r3, [r3, #25]
    670e:	061b      	lsls	r3, r3, #24
    6710:	0fdb      	lsrs	r3, r3, #31
    6712:	b2db      	uxtb	r3, r3
    6714:	2b01      	cmp	r3, #1
    6716:	d0f8      	beq.n	670a <init+0xa6>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    6718:	4b15      	ldr	r3, [pc, #84]	; (6770 <init+0x10c>)
    671a:	22c0      	movs	r2, #192	; 0xc0
    671c:	0152      	lsls	r2, r2, #5
    671e:	611a      	str	r2, [r3, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    6720:	4b13      	ldr	r3, [pc, #76]	; (6770 <init+0x10c>)
    6722:	2200      	movs	r2, #0
    6724:	709a      	strb	r2, [r3, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    6726:	2000      	movs	r0, #0
    6728:	f000 f828 	bl	677c <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    672c:	46c0      	nop			; (mov r8, r8)
    672e:	4b0e      	ldr	r3, [pc, #56]	; (6768 <init+0x104>)
    6730:	785b      	ldrb	r3, [r3, #1]
    6732:	b2db      	uxtb	r3, r3
    6734:	b25b      	sxtb	r3, r3
    6736:	2b00      	cmp	r3, #0
    6738:	dbf9      	blt.n	672e <init+0xca>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    673a:	4b0b      	ldr	r3, [pc, #44]	; (6768 <init+0x104>)
    673c:	4a0d      	ldr	r2, [pc, #52]	; (6774 <init+0x110>)
    673e:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    6740:	46c0      	nop			; (mov r8, r8)
    6742:	4b0d      	ldr	r3, [pc, #52]	; (6778 <init+0x114>)
    6744:	79db      	ldrb	r3, [r3, #7]
    6746:	061b      	lsls	r3, r3, #24
    6748:	0fdb      	lsrs	r3, r3, #31
    674a:	b2db      	uxtb	r3, r3
    674c:	2b01      	cmp	r3, #1
    674e:	d0f8      	beq.n	6742 <init+0xde>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    6750:	4b09      	ldr	r3, [pc, #36]	; (6778 <init+0x114>)
    6752:	2241      	movs	r2, #65	; 0x41
    6754:	705a      	strb	r2, [r3, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    6756:	46c0      	nop			; (mov r8, r8)
    6758:	46bd      	mov	sp, r7
    675a:	b002      	add	sp, #8
    675c:	bd80      	pop	{r7, pc}
    675e:	46c0      	nop			; (mov r8, r8)
    6760:	20000048 	.word	0x20000048
    6764:	40000400 	.word	0x40000400
    6768:	40000c00 	.word	0x40000c00
    676c:	0000401e 	.word	0x0000401e
    6770:	42004000 	.word	0x42004000
    6774:	00004021 	.word	0x00004021
    6778:	42004800 	.word	0x42004800

0000677c <analogReference>:
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    677c:	b580      	push	{r7, lr}
    677e:	b082      	sub	sp, #8
    6780:	af00      	add	r7, sp, #0
    6782:	0002      	movs	r2, r0
    6784:	1dfb      	adds	r3, r7, #7
    6786:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    6788:	4b2b      	ldr	r3, [pc, #172]	; (6838 <analogReference+0xbc>)
    678a:	7e5b      	ldrb	r3, [r3, #25]
    678c:	061b      	lsls	r3, r3, #24
    678e:	0fdb      	lsrs	r3, r3, #31
    6790:	b2db      	uxtb	r3, r3
    6792:	2b01      	cmp	r3, #1
    6794:	d0f8      	beq.n	6788 <analogReference+0xc>
  syncADC();
  switch (mode)
    6796:	1dfb      	adds	r3, r7, #7
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	2b05      	cmp	r3, #5
    679c:	d839      	bhi.n	6812 <analogReference+0x96>
    679e:	009a      	lsls	r2, r3, #2
    67a0:	4b26      	ldr	r3, [pc, #152]	; (683c <analogReference+0xc0>)
    67a2:	18d3      	adds	r3, r2, r3
    67a4:	681b      	ldr	r3, [r3, #0]
    67a6:	469f      	mov	pc, r3
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    67a8:	4a23      	ldr	r2, [pc, #140]	; (6838 <analogReference+0xbc>)
    67aa:	6913      	ldr	r3, [r2, #16]
    67ac:	4924      	ldr	r1, [pc, #144]	; (6840 <analogReference+0xc4>)
    67ae:	400b      	ands	r3, r1
    67b0:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    67b2:	4a21      	ldr	r2, [pc, #132]	; (6838 <analogReference+0xbc>)
    67b4:	7853      	ldrb	r3, [r2, #1]
    67b6:	210f      	movs	r1, #15
    67b8:	438b      	bics	r3, r1
    67ba:	1c19      	adds	r1, r3, #0
    67bc:	2301      	movs	r3, #1
    67be:	430b      	orrs	r3, r1
    67c0:	7053      	strb	r3, [r2, #1]
      break;
    67c2:	e035      	b.n	6830 <analogReference+0xb4>

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    67c4:	4a1c      	ldr	r2, [pc, #112]	; (6838 <analogReference+0xbc>)
    67c6:	6913      	ldr	r3, [r2, #16]
    67c8:	491d      	ldr	r1, [pc, #116]	; (6840 <analogReference+0xc4>)
    67ca:	400b      	ands	r3, r1
    67cc:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    67ce:	4a1a      	ldr	r2, [pc, #104]	; (6838 <analogReference+0xbc>)
    67d0:	7853      	ldrb	r3, [r2, #1]
    67d2:	210f      	movs	r1, #15
    67d4:	438b      	bics	r3, r1
    67d6:	1c19      	adds	r1, r3, #0
    67d8:	2303      	movs	r3, #3
    67da:	430b      	orrs	r3, r1
    67dc:	7053      	strb	r3, [r2, #1]
      break;
    67de:	e027      	b.n	6830 <analogReference+0xb4>

    case AR_INTERNAL1V0:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    67e0:	4a15      	ldr	r2, [pc, #84]	; (6838 <analogReference+0xbc>)
    67e2:	6913      	ldr	r3, [r2, #16]
    67e4:	4916      	ldr	r1, [pc, #88]	; (6840 <analogReference+0xc4>)
    67e6:	400b      	ands	r3, r1
    67e8:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
    67ea:	4a13      	ldr	r2, [pc, #76]	; (6838 <analogReference+0xbc>)
    67ec:	7853      	ldrb	r3, [r2, #1]
    67ee:	210f      	movs	r1, #15
    67f0:	438b      	bics	r3, r1
    67f2:	7053      	strb	r3, [r2, #1]
      break;
    67f4:	e01c      	b.n	6830 <analogReference+0xb4>

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    67f6:	4a10      	ldr	r2, [pc, #64]	; (6838 <analogReference+0xbc>)
    67f8:	6913      	ldr	r3, [r2, #16]
    67fa:	4911      	ldr	r1, [pc, #68]	; (6840 <analogReference+0xc4>)
    67fc:	400b      	ands	r3, r1
    67fe:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    6800:	4a0d      	ldr	r2, [pc, #52]	; (6838 <analogReference+0xbc>)
    6802:	7853      	ldrb	r3, [r2, #1]
    6804:	210f      	movs	r1, #15
    6806:	438b      	bics	r3, r1
    6808:	1c19      	adds	r1, r3, #0
    680a:	2302      	movs	r3, #2
    680c:	430b      	orrs	r3, r1
    680e:	7053      	strb	r3, [r2, #1]
      break;
    6810:	e00e      	b.n	6830 <analogReference+0xb4>

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    6812:	4a09      	ldr	r2, [pc, #36]	; (6838 <analogReference+0xbc>)
    6814:	6913      	ldr	r3, [r2, #16]
    6816:	21f0      	movs	r1, #240	; 0xf0
    6818:	0509      	lsls	r1, r1, #20
    681a:	430b      	orrs	r3, r1
    681c:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    681e:	4a06      	ldr	r2, [pc, #24]	; (6838 <analogReference+0xbc>)
    6820:	7853      	ldrb	r3, [r2, #1]
    6822:	210f      	movs	r1, #15
    6824:	438b      	bics	r3, r1
    6826:	1c19      	adds	r1, r3, #0
    6828:	2302      	movs	r3, #2
    682a:	430b      	orrs	r3, r1
    682c:	7053      	strb	r3, [r2, #1]
      break;
    682e:	46c0      	nop			; (mov r8, r8)
  }
}
    6830:	46c0      	nop			; (mov r8, r8)
    6832:	46bd      	mov	sp, r7
    6834:	b002      	add	sp, #8
    6836:	bd80      	pop	{r7, pc}
    6838:	42004000 	.word	0x42004000
    683c:	000134f0 	.word	0x000134f0
    6840:	f0ffffff 	.word	0xf0ffffff

00006844 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    6844:	b590      	push	{r4, r7, lr}
    6846:	b083      	sub	sp, #12
    6848:	af00      	add	r7, sp, #0
    684a:	6078      	str	r0, [r7, #4]
    684c:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    684e:	4990      	ldr	r1, [pc, #576]	; (6a90 <pinMode+0x24c>)
    6850:	687a      	ldr	r2, [r7, #4]
    6852:	0013      	movs	r3, r2
    6854:	005b      	lsls	r3, r3, #1
    6856:	189b      	adds	r3, r3, r2
    6858:	00db      	lsls	r3, r3, #3
    685a:	18cb      	adds	r3, r1, r3
    685c:	3308      	adds	r3, #8
    685e:	781b      	ldrb	r3, [r3, #0]
    6860:	b25b      	sxtb	r3, r3
    6862:	3301      	adds	r3, #1
    6864:	d100      	bne.n	6868 <pinMode+0x24>
    6866:	e10e      	b.n	6a86 <pinMode+0x242>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    6868:	683b      	ldr	r3, [r7, #0]
    686a:	2b01      	cmp	r3, #1
    686c:	d100      	bne.n	6870 <pinMode+0x2c>
    686e:	e0d6      	b.n	6a1e <pinMode+0x1da>
    6870:	d305      	bcc.n	687e <pinMode+0x3a>
    6872:	2b02      	cmp	r3, #2
    6874:	d037      	beq.n	68e6 <pinMode+0xa2>
    6876:	2b03      	cmp	r3, #3
    6878:	d100      	bne.n	687c <pinMode+0x38>
    687a:	e082      	b.n	6982 <pinMode+0x13e>
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    default:
      // do nothing
    break ;
    687c:	e104      	b.n	6a88 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    687e:	4885      	ldr	r0, [pc, #532]	; (6a94 <pinMode+0x250>)
    6880:	4983      	ldr	r1, [pc, #524]	; (6a90 <pinMode+0x24c>)
    6882:	687a      	ldr	r2, [r7, #4]
    6884:	0013      	movs	r3, r2
    6886:	005b      	lsls	r3, r3, #1
    6888:	189b      	adds	r3, r3, r2
    688a:	00db      	lsls	r3, r3, #3
    688c:	565b      	ldrsb	r3, [r3, r1]
    688e:	001c      	movs	r4, r3
    6890:	497f      	ldr	r1, [pc, #508]	; (6a90 <pinMode+0x24c>)
    6892:	687a      	ldr	r2, [r7, #4]
    6894:	0013      	movs	r3, r2
    6896:	005b      	lsls	r3, r3, #1
    6898:	189b      	adds	r3, r3, r2
    689a:	00db      	lsls	r3, r3, #3
    689c:	18cb      	adds	r3, r1, r3
    689e:	3304      	adds	r3, #4
    68a0:	681b      	ldr	r3, [r3, #0]
    68a2:	2140      	movs	r1, #64	; 0x40
    68a4:	01e2      	lsls	r2, r4, #7
    68a6:	1882      	adds	r2, r0, r2
    68a8:	18d3      	adds	r3, r2, r3
    68aa:	185b      	adds	r3, r3, r1
    68ac:	2202      	movs	r2, #2
    68ae:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    68b0:	4878      	ldr	r0, [pc, #480]	; (6a94 <pinMode+0x250>)
    68b2:	4977      	ldr	r1, [pc, #476]	; (6a90 <pinMode+0x24c>)
    68b4:	687a      	ldr	r2, [r7, #4]
    68b6:	0013      	movs	r3, r2
    68b8:	005b      	lsls	r3, r3, #1
    68ba:	189b      	adds	r3, r3, r2
    68bc:	00db      	lsls	r3, r3, #3
    68be:	565b      	ldrsb	r3, [r3, r1]
    68c0:	001c      	movs	r4, r3
    68c2:	4973      	ldr	r1, [pc, #460]	; (6a90 <pinMode+0x24c>)
    68c4:	687a      	ldr	r2, [r7, #4]
    68c6:	0013      	movs	r3, r2
    68c8:	005b      	lsls	r3, r3, #1
    68ca:	189b      	adds	r3, r3, r2
    68cc:	00db      	lsls	r3, r3, #3
    68ce:	18cb      	adds	r3, r1, r3
    68d0:	3304      	adds	r3, #4
    68d2:	681b      	ldr	r3, [r3, #0]
    68d4:	2201      	movs	r2, #1
    68d6:	409a      	lsls	r2, r3
    68d8:	0013      	movs	r3, r2
    68da:	001a      	movs	r2, r3
    68dc:	01e3      	lsls	r3, r4, #7
    68de:	18c3      	adds	r3, r0, r3
    68e0:	3304      	adds	r3, #4
    68e2:	601a      	str	r2, [r3, #0]
    break ;
    68e4:	e0d0      	b.n	6a88 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    68e6:	486b      	ldr	r0, [pc, #428]	; (6a94 <pinMode+0x250>)
    68e8:	4969      	ldr	r1, [pc, #420]	; (6a90 <pinMode+0x24c>)
    68ea:	687a      	ldr	r2, [r7, #4]
    68ec:	0013      	movs	r3, r2
    68ee:	005b      	lsls	r3, r3, #1
    68f0:	189b      	adds	r3, r3, r2
    68f2:	00db      	lsls	r3, r3, #3
    68f4:	565b      	ldrsb	r3, [r3, r1]
    68f6:	001c      	movs	r4, r3
    68f8:	4965      	ldr	r1, [pc, #404]	; (6a90 <pinMode+0x24c>)
    68fa:	687a      	ldr	r2, [r7, #4]
    68fc:	0013      	movs	r3, r2
    68fe:	005b      	lsls	r3, r3, #1
    6900:	189b      	adds	r3, r3, r2
    6902:	00db      	lsls	r3, r3, #3
    6904:	18cb      	adds	r3, r1, r3
    6906:	3304      	adds	r3, #4
    6908:	681b      	ldr	r3, [r3, #0]
    690a:	2140      	movs	r1, #64	; 0x40
    690c:	01e2      	lsls	r2, r4, #7
    690e:	1882      	adds	r2, r0, r2
    6910:	18d3      	adds	r3, r2, r3
    6912:	185b      	adds	r3, r3, r1
    6914:	2206      	movs	r2, #6
    6916:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6918:	485e      	ldr	r0, [pc, #376]	; (6a94 <pinMode+0x250>)
    691a:	495d      	ldr	r1, [pc, #372]	; (6a90 <pinMode+0x24c>)
    691c:	687a      	ldr	r2, [r7, #4]
    691e:	0013      	movs	r3, r2
    6920:	005b      	lsls	r3, r3, #1
    6922:	189b      	adds	r3, r3, r2
    6924:	00db      	lsls	r3, r3, #3
    6926:	565b      	ldrsb	r3, [r3, r1]
    6928:	001c      	movs	r4, r3
    692a:	4959      	ldr	r1, [pc, #356]	; (6a90 <pinMode+0x24c>)
    692c:	687a      	ldr	r2, [r7, #4]
    692e:	0013      	movs	r3, r2
    6930:	005b      	lsls	r3, r3, #1
    6932:	189b      	adds	r3, r3, r2
    6934:	00db      	lsls	r3, r3, #3
    6936:	18cb      	adds	r3, r1, r3
    6938:	3304      	adds	r3, #4
    693a:	681b      	ldr	r3, [r3, #0]
    693c:	2201      	movs	r2, #1
    693e:	409a      	lsls	r2, r3
    6940:	0013      	movs	r3, r2
    6942:	001a      	movs	r2, r3
    6944:	01e3      	lsls	r3, r4, #7
    6946:	18c3      	adds	r3, r0, r3
    6948:	3304      	adds	r3, #4
    694a:	601a      	str	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    694c:	4851      	ldr	r0, [pc, #324]	; (6a94 <pinMode+0x250>)
    694e:	4950      	ldr	r1, [pc, #320]	; (6a90 <pinMode+0x24c>)
    6950:	687a      	ldr	r2, [r7, #4]
    6952:	0013      	movs	r3, r2
    6954:	005b      	lsls	r3, r3, #1
    6956:	189b      	adds	r3, r3, r2
    6958:	00db      	lsls	r3, r3, #3
    695a:	565b      	ldrsb	r3, [r3, r1]
    695c:	001c      	movs	r4, r3
    695e:	494c      	ldr	r1, [pc, #304]	; (6a90 <pinMode+0x24c>)
    6960:	687a      	ldr	r2, [r7, #4]
    6962:	0013      	movs	r3, r2
    6964:	005b      	lsls	r3, r3, #1
    6966:	189b      	adds	r3, r3, r2
    6968:	00db      	lsls	r3, r3, #3
    696a:	18cb      	adds	r3, r1, r3
    696c:	3304      	adds	r3, #4
    696e:	681b      	ldr	r3, [r3, #0]
    6970:	2201      	movs	r2, #1
    6972:	409a      	lsls	r2, r3
    6974:	0013      	movs	r3, r2
    6976:	001a      	movs	r2, r3
    6978:	01e3      	lsls	r3, r4, #7
    697a:	18c3      	adds	r3, r0, r3
    697c:	3318      	adds	r3, #24
    697e:	601a      	str	r2, [r3, #0]
    break ;
    6980:	e082      	b.n	6a88 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6982:	4844      	ldr	r0, [pc, #272]	; (6a94 <pinMode+0x250>)
    6984:	4942      	ldr	r1, [pc, #264]	; (6a90 <pinMode+0x24c>)
    6986:	687a      	ldr	r2, [r7, #4]
    6988:	0013      	movs	r3, r2
    698a:	005b      	lsls	r3, r3, #1
    698c:	189b      	adds	r3, r3, r2
    698e:	00db      	lsls	r3, r3, #3
    6990:	565b      	ldrsb	r3, [r3, r1]
    6992:	001c      	movs	r4, r3
    6994:	493e      	ldr	r1, [pc, #248]	; (6a90 <pinMode+0x24c>)
    6996:	687a      	ldr	r2, [r7, #4]
    6998:	0013      	movs	r3, r2
    699a:	005b      	lsls	r3, r3, #1
    699c:	189b      	adds	r3, r3, r2
    699e:	00db      	lsls	r3, r3, #3
    69a0:	18cb      	adds	r3, r1, r3
    69a2:	3304      	adds	r3, #4
    69a4:	681b      	ldr	r3, [r3, #0]
    69a6:	2140      	movs	r1, #64	; 0x40
    69a8:	01e2      	lsls	r2, r4, #7
    69aa:	1882      	adds	r2, r0, r2
    69ac:	18d3      	adds	r3, r2, r3
    69ae:	185b      	adds	r3, r3, r1
    69b0:	2206      	movs	r2, #6
    69b2:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    69b4:	4837      	ldr	r0, [pc, #220]	; (6a94 <pinMode+0x250>)
    69b6:	4936      	ldr	r1, [pc, #216]	; (6a90 <pinMode+0x24c>)
    69b8:	687a      	ldr	r2, [r7, #4]
    69ba:	0013      	movs	r3, r2
    69bc:	005b      	lsls	r3, r3, #1
    69be:	189b      	adds	r3, r3, r2
    69c0:	00db      	lsls	r3, r3, #3
    69c2:	565b      	ldrsb	r3, [r3, r1]
    69c4:	001c      	movs	r4, r3
    69c6:	4932      	ldr	r1, [pc, #200]	; (6a90 <pinMode+0x24c>)
    69c8:	687a      	ldr	r2, [r7, #4]
    69ca:	0013      	movs	r3, r2
    69cc:	005b      	lsls	r3, r3, #1
    69ce:	189b      	adds	r3, r3, r2
    69d0:	00db      	lsls	r3, r3, #3
    69d2:	18cb      	adds	r3, r1, r3
    69d4:	3304      	adds	r3, #4
    69d6:	681b      	ldr	r3, [r3, #0]
    69d8:	2201      	movs	r2, #1
    69da:	409a      	lsls	r2, r3
    69dc:	0013      	movs	r3, r2
    69de:	001a      	movs	r2, r3
    69e0:	01e3      	lsls	r3, r4, #7
    69e2:	18c3      	adds	r3, r0, r3
    69e4:	3304      	adds	r3, #4
    69e6:	601a      	str	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    69e8:	482a      	ldr	r0, [pc, #168]	; (6a94 <pinMode+0x250>)
    69ea:	4929      	ldr	r1, [pc, #164]	; (6a90 <pinMode+0x24c>)
    69ec:	687a      	ldr	r2, [r7, #4]
    69ee:	0013      	movs	r3, r2
    69f0:	005b      	lsls	r3, r3, #1
    69f2:	189b      	adds	r3, r3, r2
    69f4:	00db      	lsls	r3, r3, #3
    69f6:	565b      	ldrsb	r3, [r3, r1]
    69f8:	001c      	movs	r4, r3
    69fa:	4925      	ldr	r1, [pc, #148]	; (6a90 <pinMode+0x24c>)
    69fc:	687a      	ldr	r2, [r7, #4]
    69fe:	0013      	movs	r3, r2
    6a00:	005b      	lsls	r3, r3, #1
    6a02:	189b      	adds	r3, r3, r2
    6a04:	00db      	lsls	r3, r3, #3
    6a06:	18cb      	adds	r3, r1, r3
    6a08:	3304      	adds	r3, #4
    6a0a:	681b      	ldr	r3, [r3, #0]
    6a0c:	2201      	movs	r2, #1
    6a0e:	409a      	lsls	r2, r3
    6a10:	0013      	movs	r3, r2
    6a12:	001a      	movs	r2, r3
    6a14:	01e3      	lsls	r3, r4, #7
    6a16:	18c3      	adds	r3, r0, r3
    6a18:	3314      	adds	r3, #20
    6a1a:	601a      	str	r2, [r3, #0]
    break ;
    6a1c:	e034      	b.n	6a88 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    6a1e:	481d      	ldr	r0, [pc, #116]	; (6a94 <pinMode+0x250>)
    6a20:	491b      	ldr	r1, [pc, #108]	; (6a90 <pinMode+0x24c>)
    6a22:	687a      	ldr	r2, [r7, #4]
    6a24:	0013      	movs	r3, r2
    6a26:	005b      	lsls	r3, r3, #1
    6a28:	189b      	adds	r3, r3, r2
    6a2a:	00db      	lsls	r3, r3, #3
    6a2c:	565b      	ldrsb	r3, [r3, r1]
    6a2e:	001c      	movs	r4, r3
    6a30:	4917      	ldr	r1, [pc, #92]	; (6a90 <pinMode+0x24c>)
    6a32:	687a      	ldr	r2, [r7, #4]
    6a34:	0013      	movs	r3, r2
    6a36:	005b      	lsls	r3, r3, #1
    6a38:	189b      	adds	r3, r3, r2
    6a3a:	00db      	lsls	r3, r3, #3
    6a3c:	18cb      	adds	r3, r1, r3
    6a3e:	3304      	adds	r3, #4
    6a40:	681b      	ldr	r3, [r3, #0]
    6a42:	2140      	movs	r1, #64	; 0x40
    6a44:	01e2      	lsls	r2, r4, #7
    6a46:	1882      	adds	r2, r0, r2
    6a48:	18d3      	adds	r3, r2, r3
    6a4a:	185b      	adds	r3, r3, r1
    6a4c:	2202      	movs	r2, #2
    6a4e:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6a50:	4810      	ldr	r0, [pc, #64]	; (6a94 <pinMode+0x250>)
    6a52:	490f      	ldr	r1, [pc, #60]	; (6a90 <pinMode+0x24c>)
    6a54:	687a      	ldr	r2, [r7, #4]
    6a56:	0013      	movs	r3, r2
    6a58:	005b      	lsls	r3, r3, #1
    6a5a:	189b      	adds	r3, r3, r2
    6a5c:	00db      	lsls	r3, r3, #3
    6a5e:	565b      	ldrsb	r3, [r3, r1]
    6a60:	001c      	movs	r4, r3
    6a62:	490b      	ldr	r1, [pc, #44]	; (6a90 <pinMode+0x24c>)
    6a64:	687a      	ldr	r2, [r7, #4]
    6a66:	0013      	movs	r3, r2
    6a68:	005b      	lsls	r3, r3, #1
    6a6a:	189b      	adds	r3, r3, r2
    6a6c:	00db      	lsls	r3, r3, #3
    6a6e:	18cb      	adds	r3, r1, r3
    6a70:	3304      	adds	r3, #4
    6a72:	681b      	ldr	r3, [r3, #0]
    6a74:	2201      	movs	r2, #1
    6a76:	409a      	lsls	r2, r3
    6a78:	0013      	movs	r3, r2
    6a7a:	001a      	movs	r2, r3
    6a7c:	01e3      	lsls	r3, r4, #7
    6a7e:	18c3      	adds	r3, r0, r3
    6a80:	3308      	adds	r3, #8
    6a82:	601a      	str	r2, [r3, #0]
    break ;
    6a84:	e000      	b.n	6a88 <pinMode+0x244>
    return ;
    6a86:	46c0      	nop			; (mov r8, r8)
  }
}
    6a88:	46bd      	mov	sp, r7
    6a8a:	b003      	add	sp, #12
    6a8c:	bd90      	pop	{r4, r7, pc}
    6a8e:	46c0      	nop			; (mov r8, r8)
    6a90:	000136a8 	.word	0x000136a8
    6a94:	41004400 	.word	0x41004400

00006a98 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    6a98:	b590      	push	{r4, r7, lr}
    6a9a:	b087      	sub	sp, #28
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	6078      	str	r0, [r7, #4]
    6aa0:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6aa2:	4934      	ldr	r1, [pc, #208]	; (6b74 <digitalWrite+0xdc>)
    6aa4:	687a      	ldr	r2, [r7, #4]
    6aa6:	0013      	movs	r3, r2
    6aa8:	005b      	lsls	r3, r3, #1
    6aaa:	189b      	adds	r3, r3, r2
    6aac:	00db      	lsls	r3, r3, #3
    6aae:	18cb      	adds	r3, r1, r3
    6ab0:	3308      	adds	r3, #8
    6ab2:	781b      	ldrb	r3, [r3, #0]
    6ab4:	b25b      	sxtb	r3, r3
    6ab6:	3301      	adds	r3, #1
    6ab8:	d058      	beq.n	6b6c <digitalWrite+0xd4>
  {
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
    6aba:	2317      	movs	r3, #23
    6abc:	18f9      	adds	r1, r7, r3
    6abe:	482d      	ldr	r0, [pc, #180]	; (6b74 <digitalWrite+0xdc>)
    6ac0:	687a      	ldr	r2, [r7, #4]
    6ac2:	0013      	movs	r3, r2
    6ac4:	005b      	lsls	r3, r3, #1
    6ac6:	189b      	adds	r3, r3, r2
    6ac8:	00db      	lsls	r3, r3, #3
    6aca:	5c1b      	ldrb	r3, [r3, r0]
    6acc:	700b      	strb	r3, [r1, #0]
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    6ace:	4929      	ldr	r1, [pc, #164]	; (6b74 <digitalWrite+0xdc>)
    6ad0:	687a      	ldr	r2, [r7, #4]
    6ad2:	0013      	movs	r3, r2
    6ad4:	005b      	lsls	r3, r3, #1
    6ad6:	189b      	adds	r3, r3, r2
    6ad8:	00db      	lsls	r3, r3, #3
    6ada:	18cb      	adds	r3, r1, r3
    6adc:	3304      	adds	r3, #4
    6ade:	681b      	ldr	r3, [r3, #0]
    6ae0:	613b      	str	r3, [r7, #16]
  uint32_t pinMask = (1ul << pin);
    6ae2:	2201      	movs	r2, #1
    6ae4:	693b      	ldr	r3, [r7, #16]
    6ae6:	409a      	lsls	r2, r3
    6ae8:	0013      	movs	r3, r2
    6aea:	60fb      	str	r3, [r7, #12]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    6aec:	4a22      	ldr	r2, [pc, #136]	; (6b78 <digitalWrite+0xe0>)
    6aee:	2317      	movs	r3, #23
    6af0:	18fb      	adds	r3, r7, r3
    6af2:	781b      	ldrb	r3, [r3, #0]
    6af4:	b25b      	sxtb	r3, r3
    6af6:	01db      	lsls	r3, r3, #7
    6af8:	18d3      	adds	r3, r2, r3
    6afa:	3308      	adds	r3, #8
    6afc:	681b      	ldr	r3, [r3, #0]
    6afe:	68fa      	ldr	r2, [r7, #12]
    6b00:	4013      	ands	r3, r2
    6b02:	d118      	bne.n	6b36 <digitalWrite+0x9e>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    6b04:	4c1c      	ldr	r4, [pc, #112]	; (6b78 <digitalWrite+0xe0>)
    6b06:	2317      	movs	r3, #23
    6b08:	18fb      	adds	r3, r7, r3
    6b0a:	781b      	ldrb	r3, [r3, #0]
    6b0c:	b25b      	sxtb	r3, r3
    6b0e:	683a      	ldr	r2, [r7, #0]
    6b10:	1e51      	subs	r1, r2, #1
    6b12:	418a      	sbcs	r2, r1
    6b14:	b2d1      	uxtb	r1, r2
    6b16:	2040      	movs	r0, #64	; 0x40
    6b18:	01db      	lsls	r3, r3, #7
    6b1a:	18e2      	adds	r2, r4, r3
    6b1c:	693b      	ldr	r3, [r7, #16]
    6b1e:	18d3      	adds	r3, r2, r3
    6b20:	181a      	adds	r2, r3, r0
    6b22:	7813      	ldrb	r3, [r2, #0]
    6b24:	2001      	movs	r0, #1
    6b26:	4001      	ands	r1, r0
    6b28:	0088      	lsls	r0, r1, #2
    6b2a:	2104      	movs	r1, #4
    6b2c:	438b      	bics	r3, r1
    6b2e:	1c19      	adds	r1, r3, #0
    6b30:	1c03      	adds	r3, r0, #0
    6b32:	430b      	orrs	r3, r1
    6b34:	7013      	strb	r3, [r2, #0]
  }

  switch ( ulVal )
    6b36:	683b      	ldr	r3, [r7, #0]
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d10a      	bne.n	6b52 <digitalWrite+0xba>
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    6b3c:	4a0e      	ldr	r2, [pc, #56]	; (6b78 <digitalWrite+0xe0>)
    6b3e:	2317      	movs	r3, #23
    6b40:	18fb      	adds	r3, r7, r3
    6b42:	781b      	ldrb	r3, [r3, #0]
    6b44:	b25b      	sxtb	r3, r3
    6b46:	01db      	lsls	r3, r3, #7
    6b48:	18d3      	adds	r3, r2, r3
    6b4a:	3314      	adds	r3, #20
    6b4c:	68fa      	ldr	r2, [r7, #12]
    6b4e:	601a      	str	r2, [r3, #0]
    break ;
    6b50:	e00a      	b.n	6b68 <digitalWrite+0xd0>

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    6b52:	4a09      	ldr	r2, [pc, #36]	; (6b78 <digitalWrite+0xe0>)
    6b54:	2317      	movs	r3, #23
    6b56:	18fb      	adds	r3, r7, r3
    6b58:	781b      	ldrb	r3, [r3, #0]
    6b5a:	b25b      	sxtb	r3, r3
    6b5c:	01db      	lsls	r3, r3, #7
    6b5e:	18d3      	adds	r3, r2, r3
    6b60:	3318      	adds	r3, #24
    6b62:	68fa      	ldr	r2, [r7, #12]
    6b64:	601a      	str	r2, [r3, #0]
    break ;
    6b66:	46c0      	nop			; (mov r8, r8)
  }

  return ;
    6b68:	46c0      	nop			; (mov r8, r8)
    6b6a:	e000      	b.n	6b6e <digitalWrite+0xd6>
    return ;
    6b6c:	46c0      	nop			; (mov r8, r8)
}
    6b6e:	46bd      	mov	sp, r7
    6b70:	b007      	add	sp, #28
    6b72:	bd90      	pop	{r4, r7, pc}
    6b74:	000136a8 	.word	0x000136a8
    6b78:	41004400 	.word	0x41004400

00006b7c <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    6b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b7e:	b085      	sub	sp, #20
    6b80:	af00      	add	r7, sp, #0
    6b82:	6078      	str	r0, [r7, #4]
    6b84:	000a      	movs	r2, r1
    6b86:	1cfb      	adds	r3, r7, #3
    6b88:	701a      	strb	r2, [r3, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6b8a:	49a0      	ldr	r1, [pc, #640]	; (6e0c <pinPeripheral+0x290>)
    6b8c:	687a      	ldr	r2, [r7, #4]
    6b8e:	0013      	movs	r3, r2
    6b90:	005b      	lsls	r3, r3, #1
    6b92:	189b      	adds	r3, r3, r2
    6b94:	00db      	lsls	r3, r3, #3
    6b96:	18cb      	adds	r3, r1, r3
    6b98:	3308      	adds	r3, #8
    6b9a:	781b      	ldrb	r3, [r3, #0]
    6b9c:	b25b      	sxtb	r3, r3
    6b9e:	3301      	adds	r3, #1
    6ba0:	d102      	bne.n	6ba8 <pinPeripheral+0x2c>
  {
    return -1 ;
    6ba2:	2301      	movs	r3, #1
    6ba4:	425b      	negs	r3, r3
    6ba6:	e12d      	b.n	6e04 <pinPeripheral+0x288>
  }

  switch ( ulPeripheral )
    6ba8:	1cfb      	adds	r3, r7, #3
    6baa:	781b      	ldrb	r3, [r3, #0]
    6bac:	b25b      	sxtb	r3, r3
    6bae:	3301      	adds	r3, #1
    6bb0:	2b0c      	cmp	r3, #12
    6bb2:	d900      	bls.n	6bb6 <pinPeripheral+0x3a>
    6bb4:	e125      	b.n	6e02 <pinPeripheral+0x286>
    6bb6:	009a      	lsls	r2, r3, #2
    6bb8:	4b95      	ldr	r3, [pc, #596]	; (6e10 <pinPeripheral+0x294>)
    6bba:	18d3      	adds	r3, r2, r3
    6bbc:	681b      	ldr	r3, [r3, #0]
    6bbe:	469f      	mov	pc, r3
    case PIO_OUTPUT:
      // Disable peripheral muxing, done in pinMode
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
    6bc0:	1cfb      	adds	r3, r7, #3
    6bc2:	781b      	ldrb	r3, [r3, #0]
    6bc4:	b25b      	sxtb	r3, r3
    6bc6:	2b09      	cmp	r3, #9
    6bc8:	d105      	bne.n	6bd6 <pinPeripheral+0x5a>
      {
        pinMode( ulPin, INPUT ) ;
    6bca:	687b      	ldr	r3, [r7, #4]
    6bcc:	2100      	movs	r1, #0
    6bce:	0018      	movs	r0, r3
    6bd0:	f7ff fe38 	bl	6844 <pinMode>
          {
            // PIO_DIGITAL, do we have to do something as all cases are covered?
          }
        }
      }
    break ;
    6bd4:	e114      	b.n	6e00 <pinPeripheral+0x284>
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    6bd6:	1cfb      	adds	r3, r7, #3
    6bd8:	781b      	ldrb	r3, [r3, #0]
    6bda:	b25b      	sxtb	r3, r3
    6bdc:	2b0a      	cmp	r3, #10
    6bde:	d105      	bne.n	6bec <pinPeripheral+0x70>
          pinMode( ulPin, INPUT_PULLUP ) ;
    6be0:	687b      	ldr	r3, [r7, #4]
    6be2:	2102      	movs	r1, #2
    6be4:	0018      	movs	r0, r3
    6be6:	f7ff fe2d 	bl	6844 <pinMode>
    break ;
    6bea:	e109      	b.n	6e00 <pinPeripheral+0x284>
          if ( ulPeripheral == PIO_OUTPUT )
    6bec:	1cfb      	adds	r3, r7, #3
    6bee:	781b      	ldrb	r3, [r3, #0]
    6bf0:	b25b      	sxtb	r3, r3
    6bf2:	2b0b      	cmp	r3, #11
    6bf4:	d000      	beq.n	6bf8 <pinPeripheral+0x7c>
    6bf6:	e103      	b.n	6e00 <pinPeripheral+0x284>
            pinMode( ulPin, OUTPUT ) ;
    6bf8:	687b      	ldr	r3, [r7, #4]
    6bfa:	2101      	movs	r1, #1
    6bfc:	0018      	movs	r0, r3
    6bfe:	f7ff fe21 	bl	6844 <pinMode>
    break ;
    6c02:	e0fd      	b.n	6e00 <pinPeripheral+0x284>
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6c04:	4981      	ldr	r1, [pc, #516]	; (6e0c <pinPeripheral+0x290>)
    6c06:	687a      	ldr	r2, [r7, #4]
    6c08:	0013      	movs	r3, r2
    6c0a:	005b      	lsls	r3, r3, #1
    6c0c:	189b      	adds	r3, r3, r2
    6c0e:	00db      	lsls	r3, r3, #3
    6c10:	18cb      	adds	r3, r1, r3
    6c12:	3304      	adds	r3, #4
    6c14:	681b      	ldr	r3, [r3, #0]
    6c16:	2201      	movs	r2, #1
    6c18:	4013      	ands	r3, r2
    6c1a:	d076      	beq.n	6d0a <pinPeripheral+0x18e>
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    6c1c:	487d      	ldr	r0, [pc, #500]	; (6e14 <pinPeripheral+0x298>)
    6c1e:	497b      	ldr	r1, [pc, #492]	; (6e0c <pinPeripheral+0x290>)
    6c20:	687a      	ldr	r2, [r7, #4]
    6c22:	0013      	movs	r3, r2
    6c24:	005b      	lsls	r3, r3, #1
    6c26:	189b      	adds	r3, r3, r2
    6c28:	00db      	lsls	r3, r3, #3
    6c2a:	565b      	ldrsb	r3, [r3, r1]
    6c2c:	001c      	movs	r4, r3
    6c2e:	4977      	ldr	r1, [pc, #476]	; (6e0c <pinPeripheral+0x290>)
    6c30:	687a      	ldr	r2, [r7, #4]
    6c32:	0013      	movs	r3, r2
    6c34:	005b      	lsls	r3, r3, #1
    6c36:	189b      	adds	r3, r3, r2
    6c38:	00db      	lsls	r3, r3, #3
    6c3a:	18cb      	adds	r3, r1, r3
    6c3c:	3304      	adds	r3, #4
    6c3e:	681b      	ldr	r3, [r3, #0]
    6c40:	085b      	lsrs	r3, r3, #1
    6c42:	2130      	movs	r1, #48	; 0x30
    6c44:	01e2      	lsls	r2, r4, #7
    6c46:	1882      	adds	r2, r0, r2
    6c48:	18d3      	adds	r3, r2, r3
    6c4a:	185b      	adds	r3, r3, r1
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	b2db      	uxtb	r3, r3
    6c50:	001a      	movs	r2, r3
    6c52:	230f      	movs	r3, #15
    6c54:	4013      	ands	r3, r2
    6c56:	60fb      	str	r3, [r7, #12]
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    6c58:	486e      	ldr	r0, [pc, #440]	; (6e14 <pinPeripheral+0x298>)
    6c5a:	496c      	ldr	r1, [pc, #432]	; (6e0c <pinPeripheral+0x290>)
    6c5c:	687a      	ldr	r2, [r7, #4]
    6c5e:	0013      	movs	r3, r2
    6c60:	005b      	lsls	r3, r3, #1
    6c62:	189b      	adds	r3, r3, r2
    6c64:	00db      	lsls	r3, r3, #3
    6c66:	565b      	ldrsb	r3, [r3, r1]
    6c68:	001d      	movs	r5, r3
    6c6a:	4968      	ldr	r1, [pc, #416]	; (6e0c <pinPeripheral+0x290>)
    6c6c:	687a      	ldr	r2, [r7, #4]
    6c6e:	0013      	movs	r3, r2
    6c70:	005b      	lsls	r3, r3, #1
    6c72:	189b      	adds	r3, r3, r2
    6c74:	00db      	lsls	r3, r3, #3
    6c76:	18cb      	adds	r3, r1, r3
    6c78:	3304      	adds	r3, #4
    6c7a:	681b      	ldr	r3, [r3, #0]
    6c7c:	085b      	lsrs	r3, r3, #1
    6c7e:	1cfa      	adds	r2, r7, #3
    6c80:	7812      	ldrb	r2, [r2, #0]
    6c82:	0112      	lsls	r2, r2, #4
    6c84:	b2d1      	uxtb	r1, r2
    6c86:	68fa      	ldr	r2, [r7, #12]
    6c88:	b2d2      	uxtb	r2, r2
    6c8a:	430a      	orrs	r2, r1
    6c8c:	b2d4      	uxtb	r4, r2
    6c8e:	2130      	movs	r1, #48	; 0x30
    6c90:	01ea      	lsls	r2, r5, #7
    6c92:	1882      	adds	r2, r0, r2
    6c94:	18d3      	adds	r3, r2, r3
    6c96:	185b      	adds	r3, r3, r1
    6c98:	1c22      	adds	r2, r4, #0
    6c9a:	701a      	strb	r2, [r3, #0]
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    6c9c:	4c5d      	ldr	r4, [pc, #372]	; (6e14 <pinPeripheral+0x298>)
    6c9e:	495b      	ldr	r1, [pc, #364]	; (6e0c <pinPeripheral+0x290>)
    6ca0:	687a      	ldr	r2, [r7, #4]
    6ca2:	0013      	movs	r3, r2
    6ca4:	005b      	lsls	r3, r3, #1
    6ca6:	189b      	adds	r3, r3, r2
    6ca8:	00db      	lsls	r3, r3, #3
    6caa:	565b      	ldrsb	r3, [r3, r1]
    6cac:	001e      	movs	r6, r3
    6cae:	4957      	ldr	r1, [pc, #348]	; (6e0c <pinPeripheral+0x290>)
    6cb0:	687a      	ldr	r2, [r7, #4]
    6cb2:	0013      	movs	r3, r2
    6cb4:	005b      	lsls	r3, r3, #1
    6cb6:	189b      	adds	r3, r3, r2
    6cb8:	00db      	lsls	r3, r3, #3
    6cba:	18cb      	adds	r3, r1, r3
    6cbc:	3304      	adds	r3, #4
    6cbe:	6819      	ldr	r1, [r3, #0]
    6cc0:	4d54      	ldr	r5, [pc, #336]	; (6e14 <pinPeripheral+0x298>)
    6cc2:	4852      	ldr	r0, [pc, #328]	; (6e0c <pinPeripheral+0x290>)
    6cc4:	687a      	ldr	r2, [r7, #4]
    6cc6:	0013      	movs	r3, r2
    6cc8:	005b      	lsls	r3, r3, #1
    6cca:	189b      	adds	r3, r3, r2
    6ccc:	00db      	lsls	r3, r3, #3
    6cce:	561b      	ldrsb	r3, [r3, r0]
    6cd0:	469c      	mov	ip, r3
    6cd2:	484e      	ldr	r0, [pc, #312]	; (6e0c <pinPeripheral+0x290>)
    6cd4:	687a      	ldr	r2, [r7, #4]
    6cd6:	0013      	movs	r3, r2
    6cd8:	005b      	lsls	r3, r3, #1
    6cda:	189b      	adds	r3, r3, r2
    6cdc:	00db      	lsls	r3, r3, #3
    6cde:	18c3      	adds	r3, r0, r3
    6ce0:	3304      	adds	r3, #4
    6ce2:	681b      	ldr	r3, [r3, #0]
    6ce4:	2040      	movs	r0, #64	; 0x40
    6ce6:	4662      	mov	r2, ip
    6ce8:	01d2      	lsls	r2, r2, #7
    6cea:	18aa      	adds	r2, r5, r2
    6cec:	18d3      	adds	r3, r2, r3
    6cee:	181b      	adds	r3, r3, r0
    6cf0:	781b      	ldrb	r3, [r3, #0]
    6cf2:	b2db      	uxtb	r3, r3
    6cf4:	2201      	movs	r2, #1
    6cf6:	4313      	orrs	r3, r2
    6cf8:	b2d8      	uxtb	r0, r3
    6cfa:	2240      	movs	r2, #64	; 0x40
    6cfc:	01f3      	lsls	r3, r6, #7
    6cfe:	18e3      	adds	r3, r4, r3
    6d00:	185b      	adds	r3, r3, r1
    6d02:	189b      	adds	r3, r3, r2
    6d04:	1c02      	adds	r2, r0, #0
    6d06:	701a      	strb	r2, [r3, #0]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
      }
#endif
    break ;
    6d08:	e07b      	b.n	6e02 <pinPeripheral+0x286>
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    6d0a:	4842      	ldr	r0, [pc, #264]	; (6e14 <pinPeripheral+0x298>)
    6d0c:	493f      	ldr	r1, [pc, #252]	; (6e0c <pinPeripheral+0x290>)
    6d0e:	687a      	ldr	r2, [r7, #4]
    6d10:	0013      	movs	r3, r2
    6d12:	005b      	lsls	r3, r3, #1
    6d14:	189b      	adds	r3, r3, r2
    6d16:	00db      	lsls	r3, r3, #3
    6d18:	565b      	ldrsb	r3, [r3, r1]
    6d1a:	001c      	movs	r4, r3
    6d1c:	493b      	ldr	r1, [pc, #236]	; (6e0c <pinPeripheral+0x290>)
    6d1e:	687a      	ldr	r2, [r7, #4]
    6d20:	0013      	movs	r3, r2
    6d22:	005b      	lsls	r3, r3, #1
    6d24:	189b      	adds	r3, r3, r2
    6d26:	00db      	lsls	r3, r3, #3
    6d28:	18cb      	adds	r3, r1, r3
    6d2a:	3304      	adds	r3, #4
    6d2c:	681b      	ldr	r3, [r3, #0]
    6d2e:	085b      	lsrs	r3, r3, #1
    6d30:	2130      	movs	r1, #48	; 0x30
    6d32:	01e2      	lsls	r2, r4, #7
    6d34:	1882      	adds	r2, r0, r2
    6d36:	18d3      	adds	r3, r2, r3
    6d38:	185b      	adds	r3, r3, r1
    6d3a:	781b      	ldrb	r3, [r3, #0]
    6d3c:	b2db      	uxtb	r3, r3
    6d3e:	001a      	movs	r2, r3
    6d40:	23f0      	movs	r3, #240	; 0xf0
    6d42:	4013      	ands	r3, r2
    6d44:	60bb      	str	r3, [r7, #8]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    6d46:	4833      	ldr	r0, [pc, #204]	; (6e14 <pinPeripheral+0x298>)
    6d48:	4930      	ldr	r1, [pc, #192]	; (6e0c <pinPeripheral+0x290>)
    6d4a:	687a      	ldr	r2, [r7, #4]
    6d4c:	0013      	movs	r3, r2
    6d4e:	005b      	lsls	r3, r3, #1
    6d50:	189b      	adds	r3, r3, r2
    6d52:	00db      	lsls	r3, r3, #3
    6d54:	565b      	ldrsb	r3, [r3, r1]
    6d56:	001d      	movs	r5, r3
    6d58:	492c      	ldr	r1, [pc, #176]	; (6e0c <pinPeripheral+0x290>)
    6d5a:	687a      	ldr	r2, [r7, #4]
    6d5c:	0013      	movs	r3, r2
    6d5e:	005b      	lsls	r3, r3, #1
    6d60:	189b      	adds	r3, r3, r2
    6d62:	00db      	lsls	r3, r3, #3
    6d64:	18cb      	adds	r3, r1, r3
    6d66:	3304      	adds	r3, #4
    6d68:	681b      	ldr	r3, [r3, #0]
    6d6a:	085b      	lsrs	r3, r3, #1
    6d6c:	1cfa      	adds	r2, r7, #3
    6d6e:	7812      	ldrb	r2, [r2, #0]
    6d70:	210f      	movs	r1, #15
    6d72:	400a      	ands	r2, r1
    6d74:	b2d1      	uxtb	r1, r2
    6d76:	68ba      	ldr	r2, [r7, #8]
    6d78:	b2d2      	uxtb	r2, r2
    6d7a:	430a      	orrs	r2, r1
    6d7c:	b2d4      	uxtb	r4, r2
    6d7e:	2130      	movs	r1, #48	; 0x30
    6d80:	01ea      	lsls	r2, r5, #7
    6d82:	1882      	adds	r2, r0, r2
    6d84:	18d3      	adds	r3, r2, r3
    6d86:	185b      	adds	r3, r3, r1
    6d88:	1c22      	adds	r2, r4, #0
    6d8a:	701a      	strb	r2, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    6d8c:	4c21      	ldr	r4, [pc, #132]	; (6e14 <pinPeripheral+0x298>)
    6d8e:	491f      	ldr	r1, [pc, #124]	; (6e0c <pinPeripheral+0x290>)
    6d90:	687a      	ldr	r2, [r7, #4]
    6d92:	0013      	movs	r3, r2
    6d94:	005b      	lsls	r3, r3, #1
    6d96:	189b      	adds	r3, r3, r2
    6d98:	00db      	lsls	r3, r3, #3
    6d9a:	565b      	ldrsb	r3, [r3, r1]
    6d9c:	001e      	movs	r6, r3
    6d9e:	491b      	ldr	r1, [pc, #108]	; (6e0c <pinPeripheral+0x290>)
    6da0:	687a      	ldr	r2, [r7, #4]
    6da2:	0013      	movs	r3, r2
    6da4:	005b      	lsls	r3, r3, #1
    6da6:	189b      	adds	r3, r3, r2
    6da8:	00db      	lsls	r3, r3, #3
    6daa:	18cb      	adds	r3, r1, r3
    6dac:	3304      	adds	r3, #4
    6dae:	6819      	ldr	r1, [r3, #0]
    6db0:	4d18      	ldr	r5, [pc, #96]	; (6e14 <pinPeripheral+0x298>)
    6db2:	4816      	ldr	r0, [pc, #88]	; (6e0c <pinPeripheral+0x290>)
    6db4:	687a      	ldr	r2, [r7, #4]
    6db6:	0013      	movs	r3, r2
    6db8:	005b      	lsls	r3, r3, #1
    6dba:	189b      	adds	r3, r3, r2
    6dbc:	00db      	lsls	r3, r3, #3
    6dbe:	561b      	ldrsb	r3, [r3, r0]
    6dc0:	469c      	mov	ip, r3
    6dc2:	4812      	ldr	r0, [pc, #72]	; (6e0c <pinPeripheral+0x290>)
    6dc4:	687a      	ldr	r2, [r7, #4]
    6dc6:	0013      	movs	r3, r2
    6dc8:	005b      	lsls	r3, r3, #1
    6dca:	189b      	adds	r3, r3, r2
    6dcc:	00db      	lsls	r3, r3, #3
    6dce:	18c3      	adds	r3, r0, r3
    6dd0:	3304      	adds	r3, #4
    6dd2:	681b      	ldr	r3, [r3, #0]
    6dd4:	2040      	movs	r0, #64	; 0x40
    6dd6:	4662      	mov	r2, ip
    6dd8:	01d2      	lsls	r2, r2, #7
    6dda:	18aa      	adds	r2, r5, r2
    6ddc:	18d3      	adds	r3, r2, r3
    6dde:	181b      	adds	r3, r3, r0
    6de0:	781b      	ldrb	r3, [r3, #0]
    6de2:	b2db      	uxtb	r3, r3
    6de4:	2201      	movs	r2, #1
    6de6:	4313      	orrs	r3, r2
    6de8:	b2d8      	uxtb	r0, r3
    6dea:	2240      	movs	r2, #64	; 0x40
    6dec:	01f3      	lsls	r3, r6, #7
    6dee:	18e3      	adds	r3, r4, r3
    6df0:	185b      	adds	r3, r3, r1
    6df2:	189b      	adds	r3, r3, r2
    6df4:	1c02      	adds	r2, r0, #0
    6df6:	701a      	strb	r2, [r3, #0]
    break ;
    6df8:	e003      	b.n	6e02 <pinPeripheral+0x286>

    case PIO_NOT_A_PIN:
      return -1l ;
    6dfa:	2301      	movs	r3, #1
    6dfc:	425b      	negs	r3, r3
    6dfe:	e001      	b.n	6e04 <pinPeripheral+0x288>
    break ;
    6e00:	46c0      	nop			; (mov r8, r8)
    break ;
  }

  return 0l ;
    6e02:	2300      	movs	r3, #0
}
    6e04:	0018      	movs	r0, r3
    6e06:	46bd      	mov	sp, r7
    6e08:	b005      	add	sp, #20
    6e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e0c:	000136a8 	.word	0x000136a8
    6e10:	00013508 	.word	0x00013508
    6e14:	41004400 	.word	0x41004400

00006e18 <_Z3maplllll>:

  return random(diff) + howsmall;
}

extern long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6e18:	b580      	push	{r7, lr}
    6e1a:	b084      	sub	sp, #16
    6e1c:	af00      	add	r7, sp, #0
    6e1e:	60f8      	str	r0, [r7, #12]
    6e20:	60b9      	str	r1, [r7, #8]
    6e22:	607a      	str	r2, [r7, #4]
    6e24:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6e26:	68fa      	ldr	r2, [r7, #12]
    6e28:	68bb      	ldr	r3, [r7, #8]
    6e2a:	1ad3      	subs	r3, r2, r3
    6e2c:	69b9      	ldr	r1, [r7, #24]
    6e2e:	683a      	ldr	r2, [r7, #0]
    6e30:	1a8a      	subs	r2, r1, r2
    6e32:	435a      	muls	r2, r3
    6e34:	0010      	movs	r0, r2
    6e36:	687a      	ldr	r2, [r7, #4]
    6e38:	68bb      	ldr	r3, [r7, #8]
    6e3a:	1ad3      	subs	r3, r2, r3
    6e3c:	0019      	movs	r1, r3
    6e3e:	f007 fda5 	bl	e98c <__divsi3>
    6e42:	0003      	movs	r3, r0
    6e44:	001a      	movs	r2, r3
    6e46:	683b      	ldr	r3, [r7, #0]
    6e48:	18d3      	adds	r3, r2, r3
}
    6e4a:	0018      	movs	r0, r3
    6e4c:	46bd      	mov	sp, r7
    6e4e:	b004      	add	sp, #16
    6e50:	bd80      	pop	{r7, pc}

00006e52 <_ZNK6String14StringIfHelperEv>:
{
	// use a function pointer to allow for "if (s)" without the
	// complications of an operator bool(). for more information, see:
	// http://www.artima.com/cppsource/safebool.html
	typedef void (String::*StringIfHelperType)() const;
	void StringIfHelper() const {}
    6e52:	b580      	push	{r7, lr}
    6e54:	b082      	sub	sp, #8
    6e56:	af00      	add	r7, sp, #0
    6e58:	6078      	str	r0, [r7, #4]
    6e5a:	46c0      	nop			; (mov r8, r8)
    6e5c:	46bd      	mov	sp, r7
    6e5e:	b002      	add	sp, #8
    6e60:	bd80      	pop	{r7, pc}
	...

00006e64 <_ZNK6StringcvMS_KFvvEEv>:
	friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    6e64:	b580      	push	{r7, lr}
    6e66:	b082      	sub	sp, #8
    6e68:	af00      	add	r7, sp, #0
    6e6a:	6078      	str	r0, [r7, #4]
    6e6c:	6039      	str	r1, [r7, #0]
    6e6e:	683b      	ldr	r3, [r7, #0]
    6e70:	681b      	ldr	r3, [r3, #0]
    6e72:	2b00      	cmp	r3, #0
    6e74:	d106      	bne.n	6e84 <_ZNK6StringcvMS_KFvvEEv+0x20>
    6e76:	687b      	ldr	r3, [r7, #4]
    6e78:	2200      	movs	r2, #0
    6e7a:	601a      	str	r2, [r3, #0]
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	2200      	movs	r2, #0
    6e80:	605a      	str	r2, [r3, #4]
    6e82:	e005      	b.n	6e90 <_ZNK6StringcvMS_KFvvEEv+0x2c>
    6e84:	687b      	ldr	r3, [r7, #4]
    6e86:	4a04      	ldr	r2, [pc, #16]	; (6e98 <_ZNK6StringcvMS_KFvvEEv+0x34>)
    6e88:	601a      	str	r2, [r3, #0]
    6e8a:	687b      	ldr	r3, [r7, #4]
    6e8c:	2200      	movs	r2, #0
    6e8e:	605a      	str	r2, [r3, #4]
    6e90:	6878      	ldr	r0, [r7, #4]
    6e92:	46bd      	mov	sp, r7
    6e94:	b002      	add	sp, #8
    6e96:	bd80      	pop	{r7, pc}
    6e98:	00006e53 	.word	0x00006e53

00006e9c <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    6e9c:	b580      	push	{r7, lr}
    6e9e:	b086      	sub	sp, #24
    6ea0:	af00      	add	r7, sp, #0
    6ea2:	6078      	str	r0, [r7, #4]
    6ea4:	0008      	movs	r0, r1
    6ea6:	0011      	movs	r1, r2
    6ea8:	1cfb      	adds	r3, r7, #3
    6eaa:	1c02      	adds	r2, r0, #0
    6eac:	701a      	strb	r2, [r3, #0]
    6eae:	1cbb      	adds	r3, r7, #2
    6eb0:	1c0a      	adds	r2, r1, #0
    6eb2:	701a      	strb	r2, [r3, #0]
{
	init();
    6eb4:	687b      	ldr	r3, [r7, #4]
    6eb6:	0018      	movs	r0, r3
    6eb8:	f000 f842 	bl	6f40 <_ZN6String4initEv>
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
    6ebc:	1cfb      	adds	r3, r7, #3
    6ebe:	7818      	ldrb	r0, [r3, #0]
    6ec0:	1cbb      	adds	r3, r7, #2
    6ec2:	781a      	ldrb	r2, [r3, #0]
    6ec4:	230c      	movs	r3, #12
    6ec6:	18fb      	adds	r3, r7, r3
    6ec8:	0019      	movs	r1, r3
    6eca:	f006 fb8c 	bl	d5e6 <utoa>
	*this = buf;
    6ece:	230c      	movs	r3, #12
    6ed0:	18fa      	adds	r2, r7, r3
    6ed2:	687b      	ldr	r3, [r7, #4]
    6ed4:	0011      	movs	r1, r2
    6ed6:	0018      	movs	r0, r3
    6ed8:	f000 f936 	bl	7148 <_ZN6StringaSEPKc>
}
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	0018      	movs	r0, r3
    6ee0:	46bd      	mov	sp, r7
    6ee2:	b006      	add	sp, #24
    6ee4:	bd80      	pop	{r7, pc}

00006ee6 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
    6ee6:	b580      	push	{r7, lr}
    6ee8:	b08e      	sub	sp, #56	; 0x38
    6eea:	af00      	add	r7, sp, #0
    6eec:	60f8      	str	r0, [r7, #12]
    6eee:	60b9      	str	r1, [r7, #8]
    6ef0:	1dfb      	adds	r3, r7, #7
    6ef2:	701a      	strb	r2, [r3, #0]
{
	init();
    6ef4:	68fb      	ldr	r3, [r7, #12]
    6ef6:	0018      	movs	r0, r3
    6ef8:	f000 f822 	bl	6f40 <_ZN6String4initEv>
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
    6efc:	1dfb      	adds	r3, r7, #7
    6efe:	781a      	ldrb	r2, [r3, #0]
    6f00:	2314      	movs	r3, #20
    6f02:	18f9      	adds	r1, r7, r3
    6f04:	68bb      	ldr	r3, [r7, #8]
    6f06:	0018      	movs	r0, r3
    6f08:	f006 fae6 	bl	d4d8 <itoa>
	*this = buf;
    6f0c:	2314      	movs	r3, #20
    6f0e:	18fa      	adds	r2, r7, r3
    6f10:	68fb      	ldr	r3, [r7, #12]
    6f12:	0011      	movs	r1, r2
    6f14:	0018      	movs	r0, r3
    6f16:	f000 f917 	bl	7148 <_ZN6StringaSEPKc>
}
    6f1a:	68fb      	ldr	r3, [r7, #12]
    6f1c:	0018      	movs	r0, r3
    6f1e:	46bd      	mov	sp, r7
    6f20:	b00e      	add	sp, #56	; 0x38
    6f22:	bd80      	pop	{r7, pc}

00006f24 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
    6f24:	b580      	push	{r7, lr}
    6f26:	b082      	sub	sp, #8
    6f28:	af00      	add	r7, sp, #0
    6f2a:	6078      	str	r0, [r7, #4]
{
	free(buffer);
    6f2c:	687b      	ldr	r3, [r7, #4]
    6f2e:	681b      	ldr	r3, [r3, #0]
    6f30:	0018      	movs	r0, r3
    6f32:	f009 fc43 	bl	107bc <free>
}
    6f36:	687b      	ldr	r3, [r7, #4]
    6f38:	0018      	movs	r0, r3
    6f3a:	46bd      	mov	sp, r7
    6f3c:	b002      	add	sp, #8
    6f3e:	bd80      	pop	{r7, pc}

00006f40 <_ZN6String4initEv>:
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
    6f40:	b580      	push	{r7, lr}
    6f42:	b082      	sub	sp, #8
    6f44:	af00      	add	r7, sp, #0
    6f46:	6078      	str	r0, [r7, #4]
	buffer = NULL;
    6f48:	687b      	ldr	r3, [r7, #4]
    6f4a:	2200      	movs	r2, #0
    6f4c:	601a      	str	r2, [r3, #0]
	capacity = 0;
    6f4e:	687b      	ldr	r3, [r7, #4]
    6f50:	2200      	movs	r2, #0
    6f52:	605a      	str	r2, [r3, #4]
	len = 0;
    6f54:	687b      	ldr	r3, [r7, #4]
    6f56:	2200      	movs	r2, #0
    6f58:	609a      	str	r2, [r3, #8]
}
    6f5a:	46c0      	nop			; (mov r8, r8)
    6f5c:	46bd      	mov	sp, r7
    6f5e:	b002      	add	sp, #8
    6f60:	bd80      	pop	{r7, pc}

00006f62 <_ZN6String10invalidateEv>:

void String::invalidate(void)
{
    6f62:	b580      	push	{r7, lr}
    6f64:	b082      	sub	sp, #8
    6f66:	af00      	add	r7, sp, #0
    6f68:	6078      	str	r0, [r7, #4]
	if (buffer) free(buffer);
    6f6a:	687b      	ldr	r3, [r7, #4]
    6f6c:	681b      	ldr	r3, [r3, #0]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d004      	beq.n	6f7c <_ZN6String10invalidateEv+0x1a>
    6f72:	687b      	ldr	r3, [r7, #4]
    6f74:	681b      	ldr	r3, [r3, #0]
    6f76:	0018      	movs	r0, r3
    6f78:	f009 fc20 	bl	107bc <free>
	buffer = NULL;
    6f7c:	687b      	ldr	r3, [r7, #4]
    6f7e:	2200      	movs	r2, #0
    6f80:	601a      	str	r2, [r3, #0]
	capacity = len = 0;
    6f82:	687b      	ldr	r3, [r7, #4]
    6f84:	2200      	movs	r2, #0
    6f86:	609a      	str	r2, [r3, #8]
    6f88:	687b      	ldr	r3, [r7, #4]
    6f8a:	689a      	ldr	r2, [r3, #8]
    6f8c:	687b      	ldr	r3, [r7, #4]
    6f8e:	605a      	str	r2, [r3, #4]
}
    6f90:	46c0      	nop			; (mov r8, r8)
    6f92:	46bd      	mov	sp, r7
    6f94:	b002      	add	sp, #8
    6f96:	bd80      	pop	{r7, pc}

00006f98 <_ZN6String7reserveEj>:

unsigned char String::reserve(unsigned int size)
{
    6f98:	b580      	push	{r7, lr}
    6f9a:	b082      	sub	sp, #8
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	6078      	str	r0, [r7, #4]
    6fa0:	6039      	str	r1, [r7, #0]
	if (buffer && capacity >= size) return 1;
    6fa2:	687b      	ldr	r3, [r7, #4]
    6fa4:	681b      	ldr	r3, [r3, #0]
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d006      	beq.n	6fb8 <_ZN6String7reserveEj+0x20>
    6faa:	687b      	ldr	r3, [r7, #4]
    6fac:	685a      	ldr	r2, [r3, #4]
    6fae:	683b      	ldr	r3, [r7, #0]
    6fb0:	429a      	cmp	r2, r3
    6fb2:	d301      	bcc.n	6fb8 <_ZN6String7reserveEj+0x20>
    6fb4:	2301      	movs	r3, #1
    6fb6:	e016      	b.n	6fe6 <_ZN6String7reserveEj+0x4e>
	if (changeBuffer(size)) {
    6fb8:	683a      	ldr	r2, [r7, #0]
    6fba:	687b      	ldr	r3, [r7, #4]
    6fbc:	0011      	movs	r1, r2
    6fbe:	0018      	movs	r0, r3
    6fc0:	f000 f815 	bl	6fee <_ZN6String12changeBufferEj>
    6fc4:	0003      	movs	r3, r0
    6fc6:	1e5a      	subs	r2, r3, #1
    6fc8:	4193      	sbcs	r3, r2
    6fca:	b2db      	uxtb	r3, r3
    6fcc:	2b00      	cmp	r3, #0
    6fce:	d009      	beq.n	6fe4 <_ZN6String7reserveEj+0x4c>
		if (len == 0) buffer[0] = 0;
    6fd0:	687b      	ldr	r3, [r7, #4]
    6fd2:	689b      	ldr	r3, [r3, #8]
    6fd4:	2b00      	cmp	r3, #0
    6fd6:	d103      	bne.n	6fe0 <_ZN6String7reserveEj+0x48>
    6fd8:	687b      	ldr	r3, [r7, #4]
    6fda:	681b      	ldr	r3, [r3, #0]
    6fdc:	2200      	movs	r2, #0
    6fde:	701a      	strb	r2, [r3, #0]
		return 1;
    6fe0:	2301      	movs	r3, #1
    6fe2:	e000      	b.n	6fe6 <_ZN6String7reserveEj+0x4e>
	}
	return 0;
    6fe4:	2300      	movs	r3, #0
}
    6fe6:	0018      	movs	r0, r3
    6fe8:	46bd      	mov	sp, r7
    6fea:	b002      	add	sp, #8
    6fec:	bd80      	pop	{r7, pc}

00006fee <_ZN6String12changeBufferEj>:

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    6fee:	b580      	push	{r7, lr}
    6ff0:	b084      	sub	sp, #16
    6ff2:	af00      	add	r7, sp, #0
    6ff4:	6078      	str	r0, [r7, #4]
    6ff6:	6039      	str	r1, [r7, #0]
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6ff8:	687b      	ldr	r3, [r7, #4]
    6ffa:	681a      	ldr	r2, [r3, #0]
    6ffc:	683b      	ldr	r3, [r7, #0]
    6ffe:	3301      	adds	r3, #1
    7000:	0019      	movs	r1, r3
    7002:	0010      	movs	r0, r2
    7004:	f00a fa72 	bl	114ec <realloc>
    7008:	0003      	movs	r3, r0
    700a:	60fb      	str	r3, [r7, #12]
	if (newbuffer) {
    700c:	68fb      	ldr	r3, [r7, #12]
    700e:	2b00      	cmp	r3, #0
    7010:	d007      	beq.n	7022 <_ZN6String12changeBufferEj+0x34>
		buffer = newbuffer;
    7012:	687b      	ldr	r3, [r7, #4]
    7014:	68fa      	ldr	r2, [r7, #12]
    7016:	601a      	str	r2, [r3, #0]
		capacity = maxStrLen;
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	683a      	ldr	r2, [r7, #0]
    701c:	605a      	str	r2, [r3, #4]
		return 1;
    701e:	2301      	movs	r3, #1
    7020:	e000      	b.n	7024 <_ZN6String12changeBufferEj+0x36>
	}
	return 0;
    7022:	2300      	movs	r3, #0
}
    7024:	0018      	movs	r0, r3
    7026:	46bd      	mov	sp, r7
    7028:	b004      	add	sp, #16
    702a:	bd80      	pop	{r7, pc}

0000702c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    702c:	b580      	push	{r7, lr}
    702e:	b084      	sub	sp, #16
    7030:	af00      	add	r7, sp, #0
    7032:	60f8      	str	r0, [r7, #12]
    7034:	60b9      	str	r1, [r7, #8]
    7036:	607a      	str	r2, [r7, #4]
	if (!reserve(length)) {
    7038:	687a      	ldr	r2, [r7, #4]
    703a:	68fb      	ldr	r3, [r7, #12]
    703c:	0011      	movs	r1, r2
    703e:	0018      	movs	r0, r3
    7040:	f7ff ffaa 	bl	6f98 <_ZN6String7reserveEj>
    7044:	0003      	movs	r3, r0
    7046:	425a      	negs	r2, r3
    7048:	4153      	adcs	r3, r2
    704a:	b2db      	uxtb	r3, r3
    704c:	2b00      	cmp	r3, #0
    704e:	d005      	beq.n	705c <_ZN6String4copyEPKcj+0x30>
		invalidate();
    7050:	68fb      	ldr	r3, [r7, #12]
    7052:	0018      	movs	r0, r3
    7054:	f7ff ff85 	bl	6f62 <_ZN6String10invalidateEv>
		return *this;
    7058:	68fb      	ldr	r3, [r7, #12]
    705a:	e00a      	b.n	7072 <_ZN6String4copyEPKcj+0x46>
	}
	len = length;
    705c:	68fb      	ldr	r3, [r7, #12]
    705e:	687a      	ldr	r2, [r7, #4]
    7060:	609a      	str	r2, [r3, #8]
	strcpy(buffer, cstr);
    7062:	68fb      	ldr	r3, [r7, #12]
    7064:	681b      	ldr	r3, [r3, #0]
    7066:	68ba      	ldr	r2, [r7, #8]
    7068:	0011      	movs	r1, r2
    706a:	0018      	movs	r0, r3
    706c:	f00a fa68 	bl	11540 <strcpy>
	return *this;
    7070:	68fb      	ldr	r3, [r7, #12]
}
    7072:	0018      	movs	r0, r3
    7074:	46bd      	mov	sp, r7
    7076:	b004      	add	sp, #16
    7078:	bd80      	pop	{r7, pc}

0000707a <_ZN6String4moveERS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    707a:	b580      	push	{r7, lr}
    707c:	b084      	sub	sp, #16
    707e:	af00      	add	r7, sp, #0
    7080:	6078      	str	r0, [r7, #4]
    7082:	6039      	str	r1, [r7, #0]
	if (buffer) {
    7084:	687b      	ldr	r3, [r7, #4]
    7086:	681b      	ldr	r3, [r3, #0]
    7088:	2b00      	cmp	r3, #0
    708a:	d031      	beq.n	70f0 <_ZN6String4moveERS_+0x76>
		if (rhs && capacity >= rhs.len) {
    708c:	2308      	movs	r3, #8
    708e:	18fb      	adds	r3, r7, r3
    7090:	683a      	ldr	r2, [r7, #0]
    7092:	0011      	movs	r1, r2
    7094:	0018      	movs	r0, r3
    7096:	f7ff fee5 	bl	6e64 <_ZNK6StringcvMS_KFvvEEv>
    709a:	2308      	movs	r3, #8
    709c:	18fb      	adds	r3, r7, r3
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	2b00      	cmp	r3, #0
    70a2:	d105      	bne.n	70b0 <_ZN6String4moveERS_+0x36>
    70a4:	2308      	movs	r3, #8
    70a6:	18fb      	adds	r3, r7, r3
    70a8:	685b      	ldr	r3, [r3, #4]
    70aa:	2201      	movs	r2, #1
    70ac:	4013      	ands	r3, r2
    70ae:	d007      	beq.n	70c0 <_ZN6String4moveERS_+0x46>
    70b0:	687b      	ldr	r3, [r7, #4]
    70b2:	685a      	ldr	r2, [r3, #4]
    70b4:	683b      	ldr	r3, [r7, #0]
    70b6:	689b      	ldr	r3, [r3, #8]
    70b8:	429a      	cmp	r2, r3
    70ba:	d301      	bcc.n	70c0 <_ZN6String4moveERS_+0x46>
    70bc:	2301      	movs	r3, #1
    70be:	e000      	b.n	70c2 <_ZN6String4moveERS_+0x48>
    70c0:	2300      	movs	r3, #0
    70c2:	2b00      	cmp	r3, #0
    70c4:	d00f      	beq.n	70e6 <_ZN6String4moveERS_+0x6c>
			strcpy(buffer, rhs.buffer);
    70c6:	687b      	ldr	r3, [r7, #4]
    70c8:	681a      	ldr	r2, [r3, #0]
    70ca:	683b      	ldr	r3, [r7, #0]
    70cc:	681b      	ldr	r3, [r3, #0]
    70ce:	0019      	movs	r1, r3
    70d0:	0010      	movs	r0, r2
    70d2:	f00a fa35 	bl	11540 <strcpy>
			len = rhs.len;
    70d6:	683b      	ldr	r3, [r7, #0]
    70d8:	689a      	ldr	r2, [r3, #8]
    70da:	687b      	ldr	r3, [r7, #4]
    70dc:	609a      	str	r2, [r3, #8]
			rhs.len = 0;
    70de:	683b      	ldr	r3, [r7, #0]
    70e0:	2200      	movs	r2, #0
    70e2:	609a      	str	r2, [r3, #8]
			return;
    70e4:	e019      	b.n	711a <_ZN6String4moveERS_+0xa0>
		} else {
			free(buffer);
    70e6:	687b      	ldr	r3, [r7, #4]
    70e8:	681b      	ldr	r3, [r3, #0]
    70ea:	0018      	movs	r0, r3
    70ec:	f009 fb66 	bl	107bc <free>
		}
	}
	buffer = rhs.buffer;
    70f0:	683b      	ldr	r3, [r7, #0]
    70f2:	681a      	ldr	r2, [r3, #0]
    70f4:	687b      	ldr	r3, [r7, #4]
    70f6:	601a      	str	r2, [r3, #0]
	capacity = rhs.capacity;
    70f8:	683b      	ldr	r3, [r7, #0]
    70fa:	685a      	ldr	r2, [r3, #4]
    70fc:	687b      	ldr	r3, [r7, #4]
    70fe:	605a      	str	r2, [r3, #4]
	len = rhs.len;
    7100:	683b      	ldr	r3, [r7, #0]
    7102:	689a      	ldr	r2, [r3, #8]
    7104:	687b      	ldr	r3, [r7, #4]
    7106:	609a      	str	r2, [r3, #8]
	rhs.buffer = NULL;
    7108:	683b      	ldr	r3, [r7, #0]
    710a:	2200      	movs	r2, #0
    710c:	601a      	str	r2, [r3, #0]
	rhs.capacity = 0;
    710e:	683b      	ldr	r3, [r7, #0]
    7110:	2200      	movs	r2, #0
    7112:	605a      	str	r2, [r3, #4]
	rhs.len = 0;
    7114:	683b      	ldr	r3, [r7, #0]
    7116:	2200      	movs	r2, #0
    7118:	609a      	str	r2, [r3, #8]
}
    711a:	46bd      	mov	sp, r7
    711c:	b004      	add	sp, #16
    711e:	bd80      	pop	{r7, pc}

00007120 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    7120:	b580      	push	{r7, lr}
    7122:	b082      	sub	sp, #8
    7124:	af00      	add	r7, sp, #0
    7126:	6078      	str	r0, [r7, #4]
    7128:	6039      	str	r1, [r7, #0]
	if (this != &rval) move(rval);
    712a:	687a      	ldr	r2, [r7, #4]
    712c:	683b      	ldr	r3, [r7, #0]
    712e:	429a      	cmp	r2, r3
    7130:	d005      	beq.n	713e <_ZN6StringaSEOS_+0x1e>
    7132:	683a      	ldr	r2, [r7, #0]
    7134:	687b      	ldr	r3, [r7, #4]
    7136:	0011      	movs	r1, r2
    7138:	0018      	movs	r0, r3
    713a:	f7ff ff9e 	bl	707a <_ZN6String4moveERS_>
	return *this;
    713e:	687b      	ldr	r3, [r7, #4]
}
    7140:	0018      	movs	r0, r3
    7142:	46bd      	mov	sp, r7
    7144:	b002      	add	sp, #8
    7146:	bd80      	pop	{r7, pc}

00007148 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    7148:	b580      	push	{r7, lr}
    714a:	b082      	sub	sp, #8
    714c:	af00      	add	r7, sp, #0
    714e:	6078      	str	r0, [r7, #4]
    7150:	6039      	str	r1, [r7, #0]
	if (cstr) copy(cstr, strlen(cstr));
    7152:	683b      	ldr	r3, [r7, #0]
    7154:	2b00      	cmp	r3, #0
    7156:	d00a      	beq.n	716e <_ZN6StringaSEPKc+0x26>
    7158:	683b      	ldr	r3, [r7, #0]
    715a:	0018      	movs	r0, r3
    715c:	f00a f9f8 	bl	11550 <strlen>
    7160:	0002      	movs	r2, r0
    7162:	6839      	ldr	r1, [r7, #0]
    7164:	687b      	ldr	r3, [r7, #4]
    7166:	0018      	movs	r0, r3
    7168:	f7ff ff60 	bl	702c <_ZN6String4copyEPKcj>
    716c:	e003      	b.n	7176 <_ZN6StringaSEPKc+0x2e>
	else invalidate();
    716e:	687b      	ldr	r3, [r7, #4]
    7170:	0018      	movs	r0, r3
    7172:	f7ff fef6 	bl	6f62 <_ZN6String10invalidateEv>
	
	return *this;
    7176:	687b      	ldr	r3, [r7, #4]
}
    7178:	0018      	movs	r0, r3
    717a:	46bd      	mov	sp, r7
    717c:	b002      	add	sp, #8
    717e:	bd80      	pop	{r7, pc}

00007180 <_ZNK6String6charAtEj>:
/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
    7180:	b580      	push	{r7, lr}
    7182:	b082      	sub	sp, #8
    7184:	af00      	add	r7, sp, #0
    7186:	6078      	str	r0, [r7, #4]
    7188:	6039      	str	r1, [r7, #0]
	return operator[](loc);
    718a:	683a      	ldr	r2, [r7, #0]
    718c:	687b      	ldr	r3, [r7, #4]
    718e:	0011      	movs	r1, r2
    7190:	0018      	movs	r0, r3
    7192:	f000 f805 	bl	71a0 <_ZNK6StringixEj>
    7196:	0003      	movs	r3, r0
}
    7198:	0018      	movs	r0, r3
    719a:	46bd      	mov	sp, r7
    719c:	b002      	add	sp, #8
    719e:	bd80      	pop	{r7, pc}

000071a0 <_ZNK6StringixEj>:
	}
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
    71a0:	b580      	push	{r7, lr}
    71a2:	b082      	sub	sp, #8
    71a4:	af00      	add	r7, sp, #0
    71a6:	6078      	str	r0, [r7, #4]
    71a8:	6039      	str	r1, [r7, #0]
	if (index >= len || !buffer) return 0;
    71aa:	687b      	ldr	r3, [r7, #4]
    71ac:	689a      	ldr	r2, [r3, #8]
    71ae:	683b      	ldr	r3, [r7, #0]
    71b0:	429a      	cmp	r2, r3
    71b2:	d903      	bls.n	71bc <_ZNK6StringixEj+0x1c>
    71b4:	687b      	ldr	r3, [r7, #4]
    71b6:	681b      	ldr	r3, [r3, #0]
    71b8:	2b00      	cmp	r3, #0
    71ba:	d101      	bne.n	71c0 <_ZNK6StringixEj+0x20>
    71bc:	2300      	movs	r3, #0
    71be:	e004      	b.n	71ca <_ZNK6StringixEj+0x2a>
	return buffer[index];
    71c0:	687b      	ldr	r3, [r7, #4]
    71c2:	681a      	ldr	r2, [r3, #0]
    71c4:	683b      	ldr	r3, [r7, #0]
    71c6:	18d3      	adds	r3, r2, r3
    71c8:	781b      	ldrb	r3, [r3, #0]
}
    71ca:	0018      	movs	r0, r3
    71cc:	46bd      	mov	sp, r7
    71ce:	b002      	add	sp, #8
    71d0:	bd80      	pop	{r7, pc}

000071d2 <_ZN15Adafruit_FT6206C1Ev>:
/*! 
    @brief  Instantiates a new FT6206 class
*/
/**************************************************************************/
// I2C, no address adjustments or pins
Adafruit_FT6206::Adafruit_FT6206() {
    71d2:	b580      	push	{r7, lr}
    71d4:	b082      	sub	sp, #8
    71d6:	af00      	add	r7, sp, #0
    71d8:	6078      	str	r0, [r7, #4]
  touches = 0;
    71da:	687b      	ldr	r3, [r7, #4]
    71dc:	2200      	movs	r2, #0
    71de:	701a      	strb	r2, [r3, #0]
}
    71e0:	687b      	ldr	r3, [r7, #4]
    71e2:	0018      	movs	r0, r3
    71e4:	46bd      	mov	sp, r7
    71e6:	b002      	add	sp, #8
    71e8:	bd80      	pop	{r7, pc}
	...

000071ec <_ZN15Adafruit_FT62065beginEh>:
    @brief  Setups the I2C interface and hardware, identifies if chip is found
    @param  thresh Optional threshhold-for-touch value, default is FT6206_DEFAULT_THRESSHOLD but you can try changing it if your screen is too/not sensitive.
    @returns True if an FT6206 is found, false on any failure
*/
/**************************************************************************/
boolean Adafruit_FT6206::begin(uint8_t thresh) {
    71ec:	b590      	push	{r4, r7, lr}
    71ee:	b085      	sub	sp, #20
    71f0:	af00      	add	r7, sp, #0
    71f2:	6078      	str	r0, [r7, #4]
    71f4:	000a      	movs	r2, r1
    71f6:	1cfb      	adds	r3, r7, #3
    71f8:	701a      	strb	r2, [r3, #0]
  Wire.begin();
    71fa:	4b1c      	ldr	r3, [pc, #112]	; (726c <_ZN15Adafruit_FT62065beginEh+0x80>)
    71fc:	0018      	movs	r0, r3
    71fe:	f004 fbdf 	bl	b9c0 <_ZN7TwoWire5beginEv>
    Serial.print(" = 0x"); Serial.println(readRegister8(i), HEX);
  }
#endif

  // change threshhold to be higher/lower
  writeRegister8(FT62XX_REG_THRESHHOLD, thresh);
    7202:	1cfb      	adds	r3, r7, #3
    7204:	781a      	ldrb	r2, [r3, #0]
    7206:	687b      	ldr	r3, [r7, #4]
    7208:	2180      	movs	r1, #128	; 0x80
    720a:	0018      	movs	r0, r3
    720c:	f000 f9b8 	bl	7580 <_ZN15Adafruit_FT620614writeRegister8Ehh>
  
  if (readRegister8(FT62XX_REG_VENDID) != FT62XX_VENDID) {
    7210:	687b      	ldr	r3, [r7, #4]
    7212:	21a8      	movs	r1, #168	; 0xa8
    7214:	0018      	movs	r0, r3
    7216:	f000 f985 	bl	7524 <_ZN15Adafruit_FT620613readRegister8Eh>
    721a:	0003      	movs	r3, r0
    721c:	3b11      	subs	r3, #17
    721e:	1e5a      	subs	r2, r3, #1
    7220:	4193      	sbcs	r3, r2
    7222:	b2db      	uxtb	r3, r3
    7224:	2b00      	cmp	r3, #0
    7226:	d001      	beq.n	722c <_ZN15Adafruit_FT62065beginEh+0x40>
    return false;
    7228:	2300      	movs	r3, #0
    722a:	e01a      	b.n	7262 <_ZN15Adafruit_FT62065beginEh+0x76>
  }
  uint8_t id = readRegister8(FT62XX_REG_CHIPID);
    722c:	230f      	movs	r3, #15
    722e:	18fc      	adds	r4, r7, r3
    7230:	687b      	ldr	r3, [r7, #4]
    7232:	21a3      	movs	r1, #163	; 0xa3
    7234:	0018      	movs	r0, r3
    7236:	f000 f975 	bl	7524 <_ZN15Adafruit_FT620613readRegister8Eh>
    723a:	0003      	movs	r3, r0
    723c:	7023      	strb	r3, [r4, #0]
  if ((id != FT6206_CHIPID) && (id != FT6236_CHIPID) && (id != FT6236U_CHIPID)) {
    723e:	230f      	movs	r3, #15
    7240:	18fb      	adds	r3, r7, r3
    7242:	781b      	ldrb	r3, [r3, #0]
    7244:	2b06      	cmp	r3, #6
    7246:	d00b      	beq.n	7260 <_ZN15Adafruit_FT62065beginEh+0x74>
    7248:	230f      	movs	r3, #15
    724a:	18fb      	adds	r3, r7, r3
    724c:	781b      	ldrb	r3, [r3, #0]
    724e:	2b36      	cmp	r3, #54	; 0x36
    7250:	d006      	beq.n	7260 <_ZN15Adafruit_FT62065beginEh+0x74>
    7252:	230f      	movs	r3, #15
    7254:	18fb      	adds	r3, r7, r3
    7256:	781b      	ldrb	r3, [r3, #0]
    7258:	2b64      	cmp	r3, #100	; 0x64
    725a:	d001      	beq.n	7260 <_ZN15Adafruit_FT62065beginEh+0x74>
    return false;
    725c:	2300      	movs	r3, #0
    725e:	e000      	b.n	7262 <_ZN15Adafruit_FT62065beginEh+0x76>
  }

  return true;
    7260:	2301      	movs	r3, #1
}
    7262:	0018      	movs	r0, r3
    7264:	46bd      	mov	sp, r7
    7266:	b005      	add	sp, #20
    7268:	bd90      	pop	{r4, r7, pc}
    726a:	46c0      	nop			; (mov r8, r8)
    726c:	20000b8c 	.word	0x20000b8c

00007270 <_ZN15Adafruit_FT62067touchedEv>:
/*! 
    @brief  Determines if there are any touches detected
    @returns Number of touches detected, can be 0, 1 or 2
*/
/**************************************************************************/
uint8_t Adafruit_FT6206::touched(void) {
    7270:	b590      	push	{r4, r7, lr}
    7272:	b085      	sub	sp, #20
    7274:	af00      	add	r7, sp, #0
    7276:	6078      	str	r0, [r7, #4]
  uint8_t n = readRegister8(FT62XX_REG_NUMTOUCHES);
    7278:	230f      	movs	r3, #15
    727a:	18fc      	adds	r4, r7, r3
    727c:	687b      	ldr	r3, [r7, #4]
    727e:	2102      	movs	r1, #2
    7280:	0018      	movs	r0, r3
    7282:	f000 f94f 	bl	7524 <_ZN15Adafruit_FT620613readRegister8Eh>
    7286:	0003      	movs	r3, r0
    7288:	7023      	strb	r3, [r4, #0]
  if (n > 2) {
    728a:	230f      	movs	r3, #15
    728c:	18fb      	adds	r3, r7, r3
    728e:	781b      	ldrb	r3, [r3, #0]
    7290:	2b02      	cmp	r3, #2
    7292:	dd03      	ble.n	729c <_ZN15Adafruit_FT62067touchedEv+0x2c>
    n = 0;
    7294:	230f      	movs	r3, #15
    7296:	18fb      	adds	r3, r7, r3
    7298:	2200      	movs	r2, #0
    729a:	701a      	strb	r2, [r3, #0]
  }
  return n;
    729c:	230f      	movs	r3, #15
    729e:	18fb      	adds	r3, r7, r3
    72a0:	781b      	ldrb	r3, [r3, #0]
}
    72a2:	0018      	movs	r0, r3
    72a4:	46bd      	mov	sp, r7
    72a6:	b005      	add	sp, #20
    72a8:	bd90      	pop	{r4, r7, pc}

000072aa <_ZN15Adafruit_FT62068getPointEh>:
    @brief  Queries the chip and retrieves a point data
    @param  n The # index (0 or 1) to the points we can detect. In theory we can detect 2 points but we've found that you should only use this for single-touch since the two points cant share the same half of the screen.
    @returns {@link TS_Point} object that has the x and y coordinets set. If the z coordinate is 0 it means the point is not touched. If z is 1, it is currently touched.
*/
/**************************************************************************/
TS_Point Adafruit_FT6206::getPoint(uint8_t n) {
    72aa:	b580      	push	{r7, lr}
    72ac:	b084      	sub	sp, #16
    72ae:	af00      	add	r7, sp, #0
    72b0:	60f8      	str	r0, [r7, #12]
    72b2:	60b9      	str	r1, [r7, #8]
    72b4:	1dfb      	adds	r3, r7, #7
    72b6:	701a      	strb	r2, [r3, #0]
  readData();
    72b8:	68bb      	ldr	r3, [r7, #8]
    72ba:	0018      	movs	r0, r3
    72bc:	f000 f828 	bl	7310 <_ZN15Adafruit_FT62068readDataEv>
  if ((touches == 0) || (n > 1)) {
    72c0:	68bb      	ldr	r3, [r7, #8]
    72c2:	781b      	ldrb	r3, [r3, #0]
    72c4:	2b00      	cmp	r3, #0
    72c6:	d003      	beq.n	72d0 <_ZN15Adafruit_FT62068getPointEh+0x26>
    72c8:	1dfb      	adds	r3, r7, #7
    72ca:	781b      	ldrb	r3, [r3, #0]
    72cc:	2b01      	cmp	r3, #1
    72ce:	dd06      	ble.n	72de <_ZN15Adafruit_FT62068getPointEh+0x34>
    return TS_Point(0, 0, 0);
    72d0:	68f8      	ldr	r0, [r7, #12]
    72d2:	2300      	movs	r3, #0
    72d4:	2200      	movs	r2, #0
    72d6:	2100      	movs	r1, #0
    72d8:	f000 f98d 	bl	75f6 <_ZN8TS_PointC1Esss>
    72dc:	e013      	b.n	7306 <_ZN15Adafruit_FT62068getPointEh+0x5c>
  } else {
    return TS_Point(touchX[n], touchY[n], 1);
    72de:	1dfb      	adds	r3, r7, #7
    72e0:	781b      	ldrb	r3, [r3, #0]
    72e2:	68ba      	ldr	r2, [r7, #8]
    72e4:	005b      	lsls	r3, r3, #1
    72e6:	18d3      	adds	r3, r2, r3
    72e8:	3302      	adds	r3, #2
    72ea:	881b      	ldrh	r3, [r3, #0]
    72ec:	b219      	sxth	r1, r3
    72ee:	1dfb      	adds	r3, r7, #7
    72f0:	781b      	ldrb	r3, [r3, #0]
    72f2:	68ba      	ldr	r2, [r7, #8]
    72f4:	005b      	lsls	r3, r3, #1
    72f6:	18d3      	adds	r3, r2, r3
    72f8:	3306      	adds	r3, #6
    72fa:	881b      	ldrh	r3, [r3, #0]
    72fc:	b21a      	sxth	r2, r3
    72fe:	68f8      	ldr	r0, [r7, #12]
    7300:	2301      	movs	r3, #1
    7302:	f000 f978 	bl	75f6 <_ZN8TS_PointC1Esss>
  }
}
    7306:	68f8      	ldr	r0, [r7, #12]
    7308:	46bd      	mov	sp, r7
    730a:	b004      	add	sp, #16
    730c:	bd80      	pop	{r7, pc}
	...

00007310 <_ZN15Adafruit_FT62068readDataEv>:
/**************************************************************************/
/*! 
    @brief  Reads the bulk of data from captouch chip. Fill in {@link touches}, {@link touchX}, {@link touchY} and {@link touchID} with results
*/
/**************************************************************************/
void Adafruit_FT6206::readData(void) {
    7310:	b590      	push	{r4, r7, lr}
    7312:	b089      	sub	sp, #36	; 0x24
    7314:	af00      	add	r7, sp, #0
    7316:	6078      	str	r0, [r7, #4]

  uint8_t i2cdat[16];
  Wire.beginTransmission(FT62XX_ADDR);
    7318:	4b81      	ldr	r3, [pc, #516]	; (7520 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    731a:	2138      	movs	r1, #56	; 0x38
    731c:	0018      	movs	r0, r3
    731e:	f004 fc0c 	bl	bb3a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)0);  
    7322:	4b7f      	ldr	r3, [pc, #508]	; (7520 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    7324:	2100      	movs	r1, #0
    7326:	0018      	movs	r0, r3
    7328:	f004 fc8a 	bl	bc40 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    732c:	4b7c      	ldr	r3, [pc, #496]	; (7520 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    732e:	0018      	movs	r0, r3
    7330:	f004 fc78 	bl	bc24 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom((byte)FT62XX_ADDR, (byte)16);
    7334:	4b7a      	ldr	r3, [pc, #488]	; (7520 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    7336:	2210      	movs	r2, #16
    7338:	2138      	movs	r1, #56	; 0x38
    733a:	0018      	movs	r0, r3
    733c:	f004 fbe7 	bl	bb0e <_ZN7TwoWire11requestFromEhj>
  for (uint8_t i=0; i<16; i++)
    7340:	231f      	movs	r3, #31
    7342:	18fb      	adds	r3, r7, r3
    7344:	2200      	movs	r2, #0
    7346:	701a      	strb	r2, [r3, #0]
    7348:	231f      	movs	r3, #31
    734a:	18fb      	adds	r3, r7, r3
    734c:	781b      	ldrb	r3, [r3, #0]
    734e:	2b0f      	cmp	r3, #15
    7350:	dc13      	bgt.n	737a <_ZN15Adafruit_FT62068readDataEv+0x6a>
    i2cdat[i] = Wire.read();
    7352:	231f      	movs	r3, #31
    7354:	18fb      	adds	r3, r7, r3
    7356:	781c      	ldrb	r4, [r3, #0]
    7358:	4b71      	ldr	r3, [pc, #452]	; (7520 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    735a:	0018      	movs	r0, r3
    735c:	f004 fcd1 	bl	bd02 <_ZN7TwoWire4readEv>
    7360:	0003      	movs	r3, r0
    7362:	b2da      	uxtb	r2, r3
    7364:	230c      	movs	r3, #12
    7366:	18fb      	adds	r3, r7, r3
    7368:	551a      	strb	r2, [r3, r4]
  for (uint8_t i=0; i<16; i++)
    736a:	231f      	movs	r3, #31
    736c:	18fb      	adds	r3, r7, r3
    736e:	781a      	ldrb	r2, [r3, #0]
    7370:	231f      	movs	r3, #31
    7372:	18fb      	adds	r3, r7, r3
    7374:	3201      	adds	r2, #1
    7376:	701a      	strb	r2, [r3, #0]
    7378:	e7e6      	b.n	7348 <_ZN15Adafruit_FT62068readDataEv+0x38>
    Serial.print("I2C $"); Serial.print(i, HEX); 
    Serial.print(" = 0x"); Serial.println(i2cdat[i], HEX);
  }
#endif

  touches = i2cdat[0x02];
    737a:	230c      	movs	r3, #12
    737c:	18fb      	adds	r3, r7, r3
    737e:	789a      	ldrb	r2, [r3, #2]
    7380:	687b      	ldr	r3, [r7, #4]
    7382:	701a      	strb	r2, [r3, #0]
  if ((touches > 2) || (touches == 0)) {
    7384:	687b      	ldr	r3, [r7, #4]
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	2b02      	cmp	r3, #2
    738a:	dc03      	bgt.n	7394 <_ZN15Adafruit_FT62068readDataEv+0x84>
    738c:	687b      	ldr	r3, [r7, #4]
    738e:	781b      	ldrb	r3, [r3, #0]
    7390:	2b00      	cmp	r3, #0
    7392:	d102      	bne.n	739a <_ZN15Adafruit_FT62068readDataEv+0x8a>
    touches = 0;
    7394:	687b      	ldr	r3, [r7, #4]
    7396:	2200      	movs	r2, #0
    7398:	701a      	strb	r2, [r3, #0]
    Serial.print("Gesture #"); 
    Serial.println(i2cdat[0x01]);
  }
#endif

  for (uint8_t i=0; i<2; i++) {
    739a:	231e      	movs	r3, #30
    739c:	18fb      	adds	r3, r7, r3
    739e:	2200      	movs	r2, #0
    73a0:	701a      	strb	r2, [r3, #0]
    73a2:	231e      	movs	r3, #30
    73a4:	18fb      	adds	r3, r7, r3
    73a6:	781b      	ldrb	r3, [r3, #0]
    73a8:	2b01      	cmp	r3, #1
    73aa:	dd00      	ble.n	73ae <_ZN15Adafruit_FT62068readDataEv+0x9e>
    73ac:	e0b3      	b.n	7516 <_ZN15Adafruit_FT62068readDataEv+0x206>
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    73ae:	231e      	movs	r3, #30
    73b0:	18fb      	adds	r3, r7, r3
    73b2:	7819      	ldrb	r1, [r3, #0]
    73b4:	231e      	movs	r3, #30
    73b6:	18fb      	adds	r3, r7, r3
    73b8:	781a      	ldrb	r2, [r3, #0]
    73ba:	0013      	movs	r3, r2
    73bc:	005b      	lsls	r3, r3, #1
    73be:	189b      	adds	r3, r3, r2
    73c0:	005b      	lsls	r3, r3, #1
    73c2:	3303      	adds	r3, #3
    73c4:	220c      	movs	r2, #12
    73c6:	18ba      	adds	r2, r7, r2
    73c8:	5cd3      	ldrb	r3, [r2, r3]
    73ca:	b29b      	uxth	r3, r3
    73cc:	220f      	movs	r2, #15
    73ce:	4013      	ands	r3, r2
    73d0:	b298      	uxth	r0, r3
    73d2:	687a      	ldr	r2, [r7, #4]
    73d4:	004b      	lsls	r3, r1, #1
    73d6:	18d3      	adds	r3, r2, r3
    73d8:	3302      	adds	r3, #2
    73da:	1c02      	adds	r2, r0, #0
    73dc:	801a      	strh	r2, [r3, #0]
    touchX[i] <<= 8;
    73de:	231e      	movs	r3, #30
    73e0:	18fb      	adds	r3, r7, r3
    73e2:	781b      	ldrb	r3, [r3, #0]
    73e4:	221e      	movs	r2, #30
    73e6:	18ba      	adds	r2, r7, r2
    73e8:	7812      	ldrb	r2, [r2, #0]
    73ea:	6879      	ldr	r1, [r7, #4]
    73ec:	0052      	lsls	r2, r2, #1
    73ee:	188a      	adds	r2, r1, r2
    73f0:	3202      	adds	r2, #2
    73f2:	8812      	ldrh	r2, [r2, #0]
    73f4:	0212      	lsls	r2, r2, #8
    73f6:	b291      	uxth	r1, r2
    73f8:	687a      	ldr	r2, [r7, #4]
    73fa:	005b      	lsls	r3, r3, #1
    73fc:	18d3      	adds	r3, r2, r3
    73fe:	3302      	adds	r3, #2
    7400:	1c0a      	adds	r2, r1, #0
    7402:	801a      	strh	r2, [r3, #0]
    touchX[i] |= i2cdat[0x04 + i*6]; 
    7404:	231e      	movs	r3, #30
    7406:	18fb      	adds	r3, r7, r3
    7408:	7819      	ldrb	r1, [r3, #0]
    740a:	231e      	movs	r3, #30
    740c:	18fb      	adds	r3, r7, r3
    740e:	781b      	ldrb	r3, [r3, #0]
    7410:	687a      	ldr	r2, [r7, #4]
    7412:	005b      	lsls	r3, r3, #1
    7414:	18d3      	adds	r3, r2, r3
    7416:	3302      	adds	r3, #2
    7418:	8818      	ldrh	r0, [r3, #0]
    741a:	231e      	movs	r3, #30
    741c:	18fb      	adds	r3, r7, r3
    741e:	781a      	ldrb	r2, [r3, #0]
    7420:	0013      	movs	r3, r2
    7422:	005b      	lsls	r3, r3, #1
    7424:	189b      	adds	r3, r3, r2
    7426:	005b      	lsls	r3, r3, #1
    7428:	3304      	adds	r3, #4
    742a:	220c      	movs	r2, #12
    742c:	18ba      	adds	r2, r7, r2
    742e:	5cd3      	ldrb	r3, [r2, r3]
    7430:	b29b      	uxth	r3, r3
    7432:	4303      	orrs	r3, r0
    7434:	b298      	uxth	r0, r3
    7436:	687a      	ldr	r2, [r7, #4]
    7438:	004b      	lsls	r3, r1, #1
    743a:	18d3      	adds	r3, r2, r3
    743c:	3302      	adds	r3, #2
    743e:	1c02      	adds	r2, r0, #0
    7440:	801a      	strh	r2, [r3, #0]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    7442:	231e      	movs	r3, #30
    7444:	18fb      	adds	r3, r7, r3
    7446:	7819      	ldrb	r1, [r3, #0]
    7448:	231e      	movs	r3, #30
    744a:	18fb      	adds	r3, r7, r3
    744c:	781a      	ldrb	r2, [r3, #0]
    744e:	0013      	movs	r3, r2
    7450:	005b      	lsls	r3, r3, #1
    7452:	189b      	adds	r3, r3, r2
    7454:	005b      	lsls	r3, r3, #1
    7456:	3305      	adds	r3, #5
    7458:	220c      	movs	r2, #12
    745a:	18ba      	adds	r2, r7, r2
    745c:	5cd3      	ldrb	r3, [r2, r3]
    745e:	b29b      	uxth	r3, r3
    7460:	220f      	movs	r2, #15
    7462:	4013      	ands	r3, r2
    7464:	b298      	uxth	r0, r3
    7466:	687a      	ldr	r2, [r7, #4]
    7468:	004b      	lsls	r3, r1, #1
    746a:	18d3      	adds	r3, r2, r3
    746c:	3306      	adds	r3, #6
    746e:	1c02      	adds	r2, r0, #0
    7470:	801a      	strh	r2, [r3, #0]
    touchY[i] <<= 8;
    7472:	231e      	movs	r3, #30
    7474:	18fb      	adds	r3, r7, r3
    7476:	781b      	ldrb	r3, [r3, #0]
    7478:	221e      	movs	r2, #30
    747a:	18ba      	adds	r2, r7, r2
    747c:	7812      	ldrb	r2, [r2, #0]
    747e:	6879      	ldr	r1, [r7, #4]
    7480:	0052      	lsls	r2, r2, #1
    7482:	188a      	adds	r2, r1, r2
    7484:	3206      	adds	r2, #6
    7486:	8812      	ldrh	r2, [r2, #0]
    7488:	0212      	lsls	r2, r2, #8
    748a:	b291      	uxth	r1, r2
    748c:	687a      	ldr	r2, [r7, #4]
    748e:	005b      	lsls	r3, r3, #1
    7490:	18d3      	adds	r3, r2, r3
    7492:	3306      	adds	r3, #6
    7494:	1c0a      	adds	r2, r1, #0
    7496:	801a      	strh	r2, [r3, #0]
    touchY[i] |= i2cdat[0x06 + i*6];
    7498:	231e      	movs	r3, #30
    749a:	18fb      	adds	r3, r7, r3
    749c:	7819      	ldrb	r1, [r3, #0]
    749e:	231e      	movs	r3, #30
    74a0:	18fb      	adds	r3, r7, r3
    74a2:	781b      	ldrb	r3, [r3, #0]
    74a4:	687a      	ldr	r2, [r7, #4]
    74a6:	005b      	lsls	r3, r3, #1
    74a8:	18d3      	adds	r3, r2, r3
    74aa:	3306      	adds	r3, #6
    74ac:	8818      	ldrh	r0, [r3, #0]
    74ae:	231e      	movs	r3, #30
    74b0:	18fb      	adds	r3, r7, r3
    74b2:	781b      	ldrb	r3, [r3, #0]
    74b4:	1c5a      	adds	r2, r3, #1
    74b6:	0013      	movs	r3, r2
    74b8:	005b      	lsls	r3, r3, #1
    74ba:	189b      	adds	r3, r3, r2
    74bc:	005b      	lsls	r3, r3, #1
    74be:	001a      	movs	r2, r3
    74c0:	230c      	movs	r3, #12
    74c2:	18fb      	adds	r3, r7, r3
    74c4:	5c9b      	ldrb	r3, [r3, r2]
    74c6:	b29b      	uxth	r3, r3
    74c8:	4303      	orrs	r3, r0
    74ca:	b298      	uxth	r0, r3
    74cc:	687a      	ldr	r2, [r7, #4]
    74ce:	004b      	lsls	r3, r1, #1
    74d0:	18d3      	adds	r3, r2, r3
    74d2:	3306      	adds	r3, #6
    74d4:	1c02      	adds	r2, r0, #0
    74d6:	801a      	strh	r2, [r3, #0]
    touchID[i] = i2cdat[0x05 + i*6] >> 4;
    74d8:	231e      	movs	r3, #30
    74da:	18fb      	adds	r3, r7, r3
    74dc:	7819      	ldrb	r1, [r3, #0]
    74de:	231e      	movs	r3, #30
    74e0:	18fb      	adds	r3, r7, r3
    74e2:	781a      	ldrb	r2, [r3, #0]
    74e4:	0013      	movs	r3, r2
    74e6:	005b      	lsls	r3, r3, #1
    74e8:	189b      	adds	r3, r3, r2
    74ea:	005b      	lsls	r3, r3, #1
    74ec:	3305      	adds	r3, #5
    74ee:	220c      	movs	r2, #12
    74f0:	18ba      	adds	r2, r7, r2
    74f2:	5cd3      	ldrb	r3, [r2, r3]
    74f4:	111b      	asrs	r3, r3, #4
    74f6:	b298      	uxth	r0, r3
    74f8:	687a      	ldr	r2, [r7, #4]
    74fa:	1d0b      	adds	r3, r1, #4
    74fc:	005b      	lsls	r3, r3, #1
    74fe:	18d3      	adds	r3, r2, r3
    7500:	3302      	adds	r3, #2
    7502:	1c02      	adds	r2, r0, #0
    7504:	801a      	strh	r2, [r3, #0]
  for (uint8_t i=0; i<2; i++) {
    7506:	231e      	movs	r3, #30
    7508:	18fb      	adds	r3, r7, r3
    750a:	781a      	ldrb	r2, [r3, #0]
    750c:	231e      	movs	r3, #30
    750e:	18fb      	adds	r3, r7, r3
    7510:	3201      	adds	r2, #1
    7512:	701a      	strb	r2, [r3, #0]
    7514:	e745      	b.n	73a2 <_ZN15Adafruit_FT62068readDataEv+0x92>
    Serial.print(", "); Serial.print(touchY[i]);
    Serial.print (") ");
  }
  Serial.println();
#endif
}
    7516:	46c0      	nop			; (mov r8, r8)
    7518:	46bd      	mov	sp, r7
    751a:	b009      	add	sp, #36	; 0x24
    751c:	bd90      	pop	{r4, r7, pc}
    751e:	46c0      	nop			; (mov r8, r8)
    7520:	20000b8c 	.word	0x20000b8c

00007524 <_ZN15Adafruit_FT620613readRegister8Eh>:

uint8_t Adafruit_FT6206::readRegister8(uint8_t reg) {
    7524:	b580      	push	{r7, lr}
    7526:	b084      	sub	sp, #16
    7528:	af00      	add	r7, sp, #0
    752a:	6078      	str	r0, [r7, #4]
    752c:	000a      	movs	r2, r1
    752e:	1cfb      	adds	r3, r7, #3
    7530:	701a      	strb	r2, [r3, #0]
  uint8_t x ;
  // use i2c
  Wire.beginTransmission(FT62XX_ADDR);
    7532:	4b12      	ldr	r3, [pc, #72]	; (757c <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7534:	2138      	movs	r1, #56	; 0x38
    7536:	0018      	movs	r0, r3
    7538:	f004 faff 	bl	bb3a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    753c:	1cfb      	adds	r3, r7, #3
    753e:	781a      	ldrb	r2, [r3, #0]
    7540:	4b0e      	ldr	r3, [pc, #56]	; (757c <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7542:	0011      	movs	r1, r2
    7544:	0018      	movs	r0, r3
    7546:	f004 fb7b 	bl	bc40 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    754a:	4b0c      	ldr	r3, [pc, #48]	; (757c <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    754c:	0018      	movs	r0, r3
    754e:	f004 fb69 	bl	bc24 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.requestFrom((byte)FT62XX_ADDR, (byte)1);
    7552:	4b0a      	ldr	r3, [pc, #40]	; (757c <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7554:	2201      	movs	r2, #1
    7556:	2138      	movs	r1, #56	; 0x38
    7558:	0018      	movs	r0, r3
    755a:	f004 fad8 	bl	bb0e <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
    755e:	4b07      	ldr	r3, [pc, #28]	; (757c <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7560:	0018      	movs	r0, r3
    7562:	f004 fbce 	bl	bd02 <_ZN7TwoWire4readEv>
    7566:	0002      	movs	r2, r0
    7568:	230f      	movs	r3, #15
    756a:	18fb      	adds	r3, r7, r3
    756c:	701a      	strb	r2, [r3, #0]
#ifdef I2C_DEBUG
  Serial.print("$"); Serial.print(reg, HEX); 
  Serial.print(": 0x"); Serial.println(x, HEX);
#endif

  return x;
    756e:	230f      	movs	r3, #15
    7570:	18fb      	adds	r3, r7, r3
    7572:	781b      	ldrb	r3, [r3, #0]
}
    7574:	0018      	movs	r0, r3
    7576:	46bd      	mov	sp, r7
    7578:	b004      	add	sp, #16
    757a:	bd80      	pop	{r7, pc}
    757c:	20000b8c 	.word	0x20000b8c

00007580 <_ZN15Adafruit_FT620614writeRegister8Ehh>:

void Adafruit_FT6206::writeRegister8(uint8_t reg, uint8_t val) {
    7580:	b580      	push	{r7, lr}
    7582:	b082      	sub	sp, #8
    7584:	af00      	add	r7, sp, #0
    7586:	6078      	str	r0, [r7, #4]
    7588:	0008      	movs	r0, r1
    758a:	0011      	movs	r1, r2
    758c:	1cfb      	adds	r3, r7, #3
    758e:	1c02      	adds	r2, r0, #0
    7590:	701a      	strb	r2, [r3, #0]
    7592:	1cbb      	adds	r3, r7, #2
    7594:	1c0a      	adds	r2, r1, #0
    7596:	701a      	strb	r2, [r3, #0]
  // use i2c
  Wire.beginTransmission(FT62XX_ADDR);
    7598:	4b0d      	ldr	r3, [pc, #52]	; (75d0 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    759a:	2138      	movs	r1, #56	; 0x38
    759c:	0018      	movs	r0, r3
    759e:	f004 facc 	bl	bb3a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    75a2:	1cfb      	adds	r3, r7, #3
    75a4:	781a      	ldrb	r2, [r3, #0]
    75a6:	4b0a      	ldr	r3, [pc, #40]	; (75d0 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    75a8:	0011      	movs	r1, r2
    75aa:	0018      	movs	r0, r3
    75ac:	f004 fb48 	bl	bc40 <_ZN7TwoWire5writeEh>
  Wire.write((byte)val);
    75b0:	1cbb      	adds	r3, r7, #2
    75b2:	781a      	ldrb	r2, [r3, #0]
    75b4:	4b06      	ldr	r3, [pc, #24]	; (75d0 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    75b6:	0011      	movs	r1, r2
    75b8:	0018      	movs	r0, r3
    75ba:	f004 fb41 	bl	bc40 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    75be:	4b04      	ldr	r3, [pc, #16]	; (75d0 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    75c0:	0018      	movs	r0, r3
    75c2:	f004 fb2f 	bl	bc24 <_ZN7TwoWire15endTransmissionEv>
}
    75c6:	46c0      	nop			; (mov r8, r8)
    75c8:	46bd      	mov	sp, r7
    75ca:	b002      	add	sp, #8
    75cc:	bd80      	pop	{r7, pc}
    75ce:	46c0      	nop			; (mov r8, r8)
    75d0:	20000b8c 	.word	0x20000b8c

000075d4 <_ZN8TS_PointC1Ev>:
}
*/

/****************/

TS_Point::TS_Point(void) {
    75d4:	b580      	push	{r7, lr}
    75d6:	b082      	sub	sp, #8
    75d8:	af00      	add	r7, sp, #0
    75da:	6078      	str	r0, [r7, #4]
  x = y = 0;
    75dc:	687b      	ldr	r3, [r7, #4]
    75de:	2200      	movs	r2, #0
    75e0:	805a      	strh	r2, [r3, #2]
    75e2:	687b      	ldr	r3, [r7, #4]
    75e4:	2202      	movs	r2, #2
    75e6:	5e9a      	ldrsh	r2, [r3, r2]
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	801a      	strh	r2, [r3, #0]
}
    75ec:	687b      	ldr	r3, [r7, #4]
    75ee:	0018      	movs	r0, r3
    75f0:	46bd      	mov	sp, r7
    75f2:	b002      	add	sp, #8
    75f4:	bd80      	pop	{r7, pc}

000075f6 <_ZN8TS_PointC1Esss>:

TS_Point::TS_Point(int16_t x0, int16_t y0, int16_t z0) {
    75f6:	b590      	push	{r4, r7, lr}
    75f8:	b085      	sub	sp, #20
    75fa:	af00      	add	r7, sp, #0
    75fc:	60f8      	str	r0, [r7, #12]
    75fe:	000c      	movs	r4, r1
    7600:	0010      	movs	r0, r2
    7602:	0019      	movs	r1, r3
    7604:	230a      	movs	r3, #10
    7606:	18fb      	adds	r3, r7, r3
    7608:	1c22      	adds	r2, r4, #0
    760a:	801a      	strh	r2, [r3, #0]
    760c:	2308      	movs	r3, #8
    760e:	18fb      	adds	r3, r7, r3
    7610:	1c02      	adds	r2, r0, #0
    7612:	801a      	strh	r2, [r3, #0]
    7614:	1dbb      	adds	r3, r7, #6
    7616:	1c0a      	adds	r2, r1, #0
    7618:	801a      	strh	r2, [r3, #0]
  x = x0;
    761a:	68fb      	ldr	r3, [r7, #12]
    761c:	220a      	movs	r2, #10
    761e:	18ba      	adds	r2, r7, r2
    7620:	8812      	ldrh	r2, [r2, #0]
    7622:	801a      	strh	r2, [r3, #0]
  y = y0;
    7624:	68fb      	ldr	r3, [r7, #12]
    7626:	2208      	movs	r2, #8
    7628:	18ba      	adds	r2, r7, r2
    762a:	8812      	ldrh	r2, [r2, #0]
    762c:	805a      	strh	r2, [r3, #2]
  z = z0;
    762e:	68fb      	ldr	r3, [r7, #12]
    7630:	1dba      	adds	r2, r7, #6
    7632:	8812      	ldrh	r2, [r2, #0]
    7634:	809a      	strh	r2, [r3, #4]
}
    7636:	68fb      	ldr	r3, [r7, #12]
    7638:	0018      	movs	r0, r3
    763a:	46bd      	mov	sp, r7
    763c:	b005      	add	sp, #20
    763e:	bd90      	pop	{r4, r7, pc}

00007640 <_ZN11SPISettingsC1Em8BitOrderh>:
  // Conservatively, the divider is set for a 12 MHz maximum SPI clock.
  #define SPI_MIN_CLOCK_DIVIDER (uint8_t)(1 + ((F_CPU - 1) / 12000000))

class SPISettings {
  public:
  SPISettings(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    7640:	b590      	push	{r4, r7, lr}
    7642:	b085      	sub	sp, #20
    7644:	af00      	add	r7, sp, #0
    7646:	60f8      	str	r0, [r7, #12]
    7648:	60b9      	str	r1, [r7, #8]
    764a:	0019      	movs	r1, r3
    764c:	1dfb      	adds	r3, r7, #7
    764e:	701a      	strb	r2, [r3, #0]
    7650:	1dbb      	adds	r3, r7, #6
    7652:	1c0a      	adds	r2, r1, #0
    7654:	701a      	strb	r2, [r3, #0]
    if (__builtin_constant_p(clock)) {
      init_AlwaysInline(clock, bitOrder, dataMode);
    } else {
      init_MightInline(clock, bitOrder, dataMode);
    7656:	1dbb      	adds	r3, r7, #6
    7658:	781c      	ldrb	r4, [r3, #0]
    765a:	1dfb      	adds	r3, r7, #7
    765c:	781a      	ldrb	r2, [r3, #0]
    765e:	68b9      	ldr	r1, [r7, #8]
    7660:	68f8      	ldr	r0, [r7, #12]
    7662:	0023      	movs	r3, r4
    7664:	f000 f806 	bl	7674 <_ZN11SPISettings16init_MightInlineEm8BitOrderh>
    }
  }
    7668:	68fb      	ldr	r3, [r7, #12]
    766a:	0018      	movs	r0, r3
    766c:	46bd      	mov	sp, r7
    766e:	b005      	add	sp, #20
    7670:	bd90      	pop	{r4, r7, pc}
	...

00007674 <_ZN11SPISettings16init_MightInlineEm8BitOrderh>:

  // Default speed set to 4MHz, SPI mode set to MODE 0 and Bit order set to MSB first.
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }

  private:
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    7674:	b580      	push	{r7, lr}
    7676:	b088      	sub	sp, #32
    7678:	af00      	add	r7, sp, #0
    767a:	60f8      	str	r0, [r7, #12]
    767c:	60b9      	str	r1, [r7, #8]
    767e:	0019      	movs	r1, r3
    7680:	1dfb      	adds	r3, r7, #7
    7682:	701a      	strb	r2, [r3, #0]
    7684:	1dbb      	adds	r3, r7, #6
    7686:	1c0a      	adds	r2, r1, #0
    7688:	701a      	strb	r2, [r3, #0]
    768a:	68fb      	ldr	r3, [r7, #12]
    768c:	61fb      	str	r3, [r7, #28]
    768e:	68bb      	ldr	r3, [r7, #8]
    7690:	61bb      	str	r3, [r7, #24]
    7692:	2317      	movs	r3, #23
    7694:	18fb      	adds	r3, r7, r3
    7696:	1dfa      	adds	r2, r7, #7
    7698:	7812      	ldrb	r2, [r2, #0]
    769a:	701a      	strb	r2, [r3, #0]
    769c:	2316      	movs	r3, #22
    769e:	18fb      	adds	r3, r7, r3
    76a0:	1dba      	adds	r2, r7, #6
    76a2:	7812      	ldrb	r2, [r2, #0]
    76a4:	701a      	strb	r2, [r3, #0]
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    76a6:	69bb      	ldr	r3, [r7, #24]
    76a8:	4a1a      	ldr	r2, [pc, #104]	; (7714 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0xa0>)
    76aa:	4293      	cmp	r3, r2
    76ac:	d900      	bls.n	76b0 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x3c>
    76ae:	4b19      	ldr	r3, [pc, #100]	; (7714 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0xa0>)
    76b0:	69fa      	ldr	r2, [r7, #28]
    76b2:	6013      	str	r3, [r2, #0]

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    76b4:	2317      	movs	r3, #23
    76b6:	18fb      	adds	r3, r7, r3
    76b8:	781b      	ldrb	r3, [r3, #0]
    76ba:	2b01      	cmp	r3, #1
    76bc:	d101      	bne.n	76c2 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x4e>
    76be:	2200      	movs	r2, #0
    76c0:	e000      	b.n	76c4 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x50>
    76c2:	2201      	movs	r2, #1
    76c4:	69fb      	ldr	r3, [r7, #28]
    76c6:	715a      	strb	r2, [r3, #5]

    switch (dataMode)
    76c8:	2316      	movs	r3, #22
    76ca:	18fb      	adds	r3, r7, r3
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	2b01      	cmp	r3, #1
    76d0:	d014      	beq.n	76fc <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x88>
    76d2:	dc02      	bgt.n	76da <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x66>
    76d4:	2b00      	cmp	r3, #0
    76d6:	d009      	beq.n	76ec <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x78>
    76d8:	e014      	b.n	7704 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x90>
    76da:	2b02      	cmp	r3, #2
    76dc:	d002      	beq.n	76e4 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x70>
    76de:	2b03      	cmp	r3, #3
    76e0:	d008      	beq.n	76f4 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x80>
    76e2:	e00f      	b.n	7704 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x90>
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    76e4:	69fb      	ldr	r3, [r7, #28]
    76e6:	2200      	movs	r2, #0
    76e8:	711a      	strb	r2, [r3, #4]
  }
    76ea:	e00e      	b.n	770a <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE1:
        this->dataMode = SERCOM_SPI_MODE_1; break;
    76ec:	69fb      	ldr	r3, [r7, #28]
    76ee:	2201      	movs	r2, #1
    76f0:	711a      	strb	r2, [r3, #4]
  }
    76f2:	e00a      	b.n	770a <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE2:
        this->dataMode = SERCOM_SPI_MODE_2; break;
    76f4:	69fb      	ldr	r3, [r7, #28]
    76f6:	2202      	movs	r2, #2
    76f8:	711a      	strb	r2, [r3, #4]
  }
    76fa:	e006      	b.n	770a <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE3:
        this->dataMode = SERCOM_SPI_MODE_3; break;
    76fc:	69fb      	ldr	r3, [r7, #28]
    76fe:	2203      	movs	r2, #3
    7700:	711a      	strb	r2, [r3, #4]
  }
    7702:	e002      	b.n	770a <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      default:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    7704:	69fb      	ldr	r3, [r7, #28]
    7706:	2200      	movs	r2, #0
    7708:	711a      	strb	r2, [r3, #4]
  }
    770a:	46c0      	nop			; (mov r8, r8)
    770c:	46bd      	mov	sp, r7
    770e:	b008      	add	sp, #32
    7710:	bd80      	pop	{r7, pc}
    7712:	46c0      	nop			; (mov r8, r8)
    7714:	00b71b00 	.word	0x00b71b00

00007718 <_ZN16Adafruit_ILI93418color565Ehhh>:
#define SPI_WRITE16(s)          if(_sclk < 0){HSPI_WRITE16(s);}else{SSPI_WRITE16(s);}
#define SPI_WRITE32(l)          if(_sclk < 0){HSPI_WRITE32(l);}else{SSPI_WRITE32(l);}
#define SPI_WRITE_PIXELS(c,l)   if(_sclk < 0){HSPI_WRITE_PIXELS(c,l);}else{SSPI_WRITE_PIXELS(c,l);}

// Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t Adafruit_ILI9341::color565(uint8_t r, uint8_t g, uint8_t b) {
    7718:	b590      	push	{r4, r7, lr}
    771a:	b083      	sub	sp, #12
    771c:	af00      	add	r7, sp, #0
    771e:	6078      	str	r0, [r7, #4]
    7720:	000c      	movs	r4, r1
    7722:	0010      	movs	r0, r2
    7724:	0019      	movs	r1, r3
    7726:	1cfb      	adds	r3, r7, #3
    7728:	1c22      	adds	r2, r4, #0
    772a:	701a      	strb	r2, [r3, #0]
    772c:	1cbb      	adds	r3, r7, #2
    772e:	1c02      	adds	r2, r0, #0
    7730:	701a      	strb	r2, [r3, #0]
    7732:	1c7b      	adds	r3, r7, #1
    7734:	1c0a      	adds	r2, r1, #0
    7736:	701a      	strb	r2, [r3, #0]
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    7738:	1cfb      	adds	r3, r7, #3
    773a:	781b      	ldrb	r3, [r3, #0]
    773c:	021b      	lsls	r3, r3, #8
    773e:	b21b      	sxth	r3, r3
    7740:	0adb      	lsrs	r3, r3, #11
    7742:	02db      	lsls	r3, r3, #11
    7744:	b21a      	sxth	r2, r3
    7746:	1cbb      	adds	r3, r7, #2
    7748:	781b      	ldrb	r3, [r3, #0]
    774a:	00db      	lsls	r3, r3, #3
    774c:	b219      	sxth	r1, r3
    774e:	23fc      	movs	r3, #252	; 0xfc
    7750:	00db      	lsls	r3, r3, #3
    7752:	400b      	ands	r3, r1
    7754:	b21b      	sxth	r3, r3
    7756:	4313      	orrs	r3, r2
    7758:	b21a      	sxth	r2, r3
    775a:	1c7b      	adds	r3, r7, #1
    775c:	781b      	ldrb	r3, [r3, #0]
    775e:	08db      	lsrs	r3, r3, #3
    7760:	b2db      	uxtb	r3, r3
    7762:	b21b      	sxth	r3, r3
    7764:	4313      	orrs	r3, r2
    7766:	b21b      	sxth	r3, r3
    7768:	b29b      	uxth	r3, r3
}
    776a:	0018      	movs	r0, r3
    776c:	46bd      	mov	sp, r7
    776e:	b003      	add	sp, #12
    7770:	bd90      	pop	{r4, r7, pc}
	...

00007774 <_ZN16Adafruit_ILI9341C1Eaaa>:
        misopinmask = 0;
    }
#endif
}

Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT) {
    7774:	b590      	push	{r4, r7, lr}
    7776:	b083      	sub	sp, #12
    7778:	af00      	add	r7, sp, #0
    777a:	6078      	str	r0, [r7, #4]
    777c:	000c      	movs	r4, r1
    777e:	0010      	movs	r0, r2
    7780:	0019      	movs	r1, r3
    7782:	1cfb      	adds	r3, r7, #3
    7784:	1c22      	adds	r2, r4, #0
    7786:	701a      	strb	r2, [r3, #0]
    7788:	1cbb      	adds	r3, r7, #2
    778a:	1c02      	adds	r2, r0, #0
    778c:	701a      	strb	r2, [r3, #0]
    778e:	1c7b      	adds	r3, r7, #1
    7790:	1c0a      	adds	r2, r1, #0
    7792:	701a      	strb	r2, [r3, #0]
    7794:	6878      	ldr	r0, [r7, #4]
    7796:	23a0      	movs	r3, #160	; 0xa0
    7798:	005b      	lsls	r3, r3, #1
    779a:	001a      	movs	r2, r3
    779c:	21f0      	movs	r1, #240	; 0xf0
    779e:	f004 fd6f 	bl	c280 <_ZN12Adafruit_GFXC1Ess>
    77a2:	4a3c      	ldr	r2, [pc, #240]	; (7894 <_ZN16Adafruit_ILI9341C1Eaaa+0x120>)
    77a4:	687b      	ldr	r3, [r7, #4]
    77a6:	601a      	str	r2, [r3, #0]
    _cs   = cs;
    77a8:	1cfb      	adds	r3, r7, #3
    77aa:	2200      	movs	r2, #0
    77ac:	569a      	ldrsb	r2, [r3, r2]
    77ae:	687b      	ldr	r3, [r7, #4]
    77b0:	625a      	str	r2, [r3, #36]	; 0x24
    _dc   = dc;
    77b2:	1cbb      	adds	r3, r7, #2
    77b4:	2200      	movs	r2, #0
    77b6:	569a      	ldrsb	r2, [r3, r2]
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	629a      	str	r2, [r3, #40]	; 0x28
    _rst  = rst;
    77bc:	1c7b      	adds	r3, r7, #1
    77be:	2200      	movs	r2, #0
    77c0:	569a      	ldrsb	r2, [r3, r2]
    77c2:	687b      	ldr	r3, [r7, #4]
    77c4:	62da      	str	r2, [r3, #44]	; 0x2c
    _sclk  = -1;
    77c6:	687b      	ldr	r3, [r7, #4]
    77c8:	2201      	movs	r2, #1
    77ca:	4252      	negs	r2, r2
    77cc:	631a      	str	r2, [r3, #48]	; 0x30
    _mosi  = -1;
    77ce:	687b      	ldr	r3, [r7, #4]
    77d0:	2201      	movs	r2, #1
    77d2:	4252      	negs	r2, r2
    77d4:	635a      	str	r2, [r3, #52]	; 0x34
    _miso  = -1;
    77d6:	687b      	ldr	r3, [r7, #4]
    77d8:	2201      	movs	r2, #1
    77da:	4252      	negs	r2, r2
    77dc:	639a      	str	r2, [r3, #56]	; 0x38
    _freq = 0;
    77de:	687b      	ldr	r3, [r7, #4]
    77e0:	2200      	movs	r2, #0
    77e2:	621a      	str	r2, [r3, #32]
#ifdef USE_FAST_PINIO
    csport    = portOutputRegister(digitalPinToPort(_cs));
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    77e8:	492b      	ldr	r1, [pc, #172]	; (7898 <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    77ea:	0013      	movs	r3, r2
    77ec:	005b      	lsls	r3, r3, #1
    77ee:	189b      	adds	r3, r3, r2
    77f0:	00db      	lsls	r3, r3, #3
    77f2:	565b      	ldrsb	r3, [r3, r1]
    77f4:	01db      	lsls	r3, r3, #7
    77f6:	4a29      	ldr	r2, [pc, #164]	; (789c <_ZN16Adafruit_ILI9341C1Eaaa+0x128>)
    77f8:	4694      	mov	ip, r2
    77fa:	4463      	add	r3, ip
    77fc:	3310      	adds	r3, #16
    77fe:	001a      	movs	r2, r3
    7800:	687b      	ldr	r3, [r7, #4]
    7802:	64da      	str	r2, [r3, #76]	; 0x4c
    cspinmask = digitalPinToBitMask(_cs);
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7808:	4923      	ldr	r1, [pc, #140]	; (7898 <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    780a:	0013      	movs	r3, r2
    780c:	005b      	lsls	r3, r3, #1
    780e:	189b      	adds	r3, r3, r2
    7810:	00db      	lsls	r3, r3, #3
    7812:	18cb      	adds	r3, r1, r3
    7814:	3304      	adds	r3, #4
    7816:	681b      	ldr	r3, [r3, #0]
    7818:	2201      	movs	r2, #1
    781a:	409a      	lsls	r2, r3
    781c:	0013      	movs	r3, r2
    781e:	001a      	movs	r2, r3
    7820:	687b      	ldr	r3, [r7, #4]
    7822:	65da      	str	r2, [r3, #92]	; 0x5c
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    7824:	687b      	ldr	r3, [r7, #4]
    7826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7828:	491b      	ldr	r1, [pc, #108]	; (7898 <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    782a:	0013      	movs	r3, r2
    782c:	005b      	lsls	r3, r3, #1
    782e:	189b      	adds	r3, r3, r2
    7830:	00db      	lsls	r3, r3, #3
    7832:	565b      	ldrsb	r3, [r3, r1]
    7834:	01db      	lsls	r3, r3, #7
    7836:	4a19      	ldr	r2, [pc, #100]	; (789c <_ZN16Adafruit_ILI9341C1Eaaa+0x128>)
    7838:	4694      	mov	ip, r2
    783a:	4463      	add	r3, ip
    783c:	3310      	adds	r3, #16
    783e:	001a      	movs	r2, r3
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	649a      	str	r2, [r3, #72]	; 0x48
    dcpinmask = digitalPinToBitMask(_dc);
    7844:	687b      	ldr	r3, [r7, #4]
    7846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7848:	4913      	ldr	r1, [pc, #76]	; (7898 <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    784a:	0013      	movs	r3, r2
    784c:	005b      	lsls	r3, r3, #1
    784e:	189b      	adds	r3, r3, r2
    7850:	00db      	lsls	r3, r3, #3
    7852:	18cb      	adds	r3, r1, r3
    7854:	3304      	adds	r3, #4
    7856:	681b      	ldr	r3, [r3, #0]
    7858:	2201      	movs	r2, #1
    785a:	409a      	lsls	r2, r3
    785c:	0013      	movs	r3, r2
    785e:	001a      	movs	r2, r3
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	661a      	str	r2, [r3, #96]	; 0x60
    clkport     = 0;
    7864:	687b      	ldr	r3, [r7, #4]
    7866:	2200      	movs	r2, #0
    7868:	645a      	str	r2, [r3, #68]	; 0x44
    clkpinmask  = 0;
    786a:	687b      	ldr	r3, [r7, #4]
    786c:	2200      	movs	r2, #0
    786e:	659a      	str	r2, [r3, #88]	; 0x58
    mosiport    = 0;
    7870:	687b      	ldr	r3, [r7, #4]
    7872:	2200      	movs	r2, #0
    7874:	63da      	str	r2, [r3, #60]	; 0x3c
    mosipinmask = 0;
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	2200      	movs	r2, #0
    787a:	651a      	str	r2, [r3, #80]	; 0x50
    misoport    = 0;
    787c:	687b      	ldr	r3, [r7, #4]
    787e:	2200      	movs	r2, #0
    7880:	641a      	str	r2, [r3, #64]	; 0x40
    misopinmask = 0;
    7882:	687b      	ldr	r3, [r7, #4]
    7884:	2200      	movs	r2, #0
    7886:	655a      	str	r2, [r3, #84]	; 0x54
#endif
}
    7888:	687b      	ldr	r3, [r7, #4]
    788a:	0018      	movs	r0, r3
    788c:	46bd      	mov	sp, r7
    788e:	b003      	add	sp, #12
    7890:	bd90      	pop	{r4, r7, pc}
    7892:	46c0      	nop			; (mov r8, r8)
    7894:	00013544 	.word	0x00013544
    7898:	000136a8 	.word	0x000136a8
    789c:	41004400 	.word	0x41004400

000078a0 <_ZN16Adafruit_ILI93415beginEm>:
#ifdef ESP32
void Adafruit_ILI9341::begin(uint32_t freq, SPIClass &spi)
#else
void Adafruit_ILI9341::begin(uint32_t freq)
#endif
{
    78a0:	b580      	push	{r7, lr}
    78a2:	b082      	sub	sp, #8
    78a4:	af00      	add	r7, sp, #0
    78a6:	6078      	str	r0, [r7, #4]
    78a8:	6039      	str	r1, [r7, #0]
#ifdef ESP32
    _spi = spi;
#endif
    if(!freq){
    78aa:	683b      	ldr	r3, [r7, #0]
    78ac:	2b00      	cmp	r3, #0
    78ae:	d101      	bne.n	78b4 <_ZN16Adafruit_ILI93415beginEm+0x14>
        freq = SPI_DEFAULT_FREQ;
    78b0:	4ba6      	ldr	r3, [pc, #664]	; (7b4c <_ZN16Adafruit_ILI93415beginEm+0x2ac>)
    78b2:	603b      	str	r3, [r7, #0]
    }
    _freq = freq;
    78b4:	687b      	ldr	r3, [r7, #4]
    78b6:	683a      	ldr	r2, [r7, #0]
    78b8:	621a      	str	r2, [r3, #32]

    // Control Pins
    pinMode(_dc, OUTPUT);
    78ba:	687b      	ldr	r3, [r7, #4]
    78bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78be:	2101      	movs	r1, #1
    78c0:	0018      	movs	r0, r3
    78c2:	f7fe ffbf 	bl	6844 <pinMode>
    digitalWrite(_dc, LOW);
    78c6:	687b      	ldr	r3, [r7, #4]
    78c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78ca:	2100      	movs	r1, #0
    78cc:	0018      	movs	r0, r3
    78ce:	f7ff f8e3 	bl	6a98 <digitalWrite>
    pinMode(_cs, OUTPUT);
    78d2:	687b      	ldr	r3, [r7, #4]
    78d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78d6:	2101      	movs	r1, #1
    78d8:	0018      	movs	r0, r3
    78da:	f7fe ffb3 	bl	6844 <pinMode>
    digitalWrite(_cs, HIGH);
    78de:	687b      	ldr	r3, [r7, #4]
    78e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78e2:	2101      	movs	r1, #1
    78e4:	0018      	movs	r0, r3
    78e6:	f7ff f8d7 	bl	6a98 <digitalWrite>

    // Software SPI
    if(_sclk >= 0){
    78ea:	687b      	ldr	r3, [r7, #4]
    78ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    78ee:	2b00      	cmp	r3, #0
    78f0:	db21      	blt.n	7936 <_ZN16Adafruit_ILI93415beginEm+0x96>
        pinMode(_mosi, OUTPUT);
    78f2:	687b      	ldr	r3, [r7, #4]
    78f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    78f6:	2101      	movs	r1, #1
    78f8:	0018      	movs	r0, r3
    78fa:	f7fe ffa3 	bl	6844 <pinMode>
        digitalWrite(_mosi, LOW);
    78fe:	687b      	ldr	r3, [r7, #4]
    7900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7902:	2100      	movs	r1, #0
    7904:	0018      	movs	r0, r3
    7906:	f7ff f8c7 	bl	6a98 <digitalWrite>
        pinMode(_sclk, OUTPUT);
    790a:	687b      	ldr	r3, [r7, #4]
    790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    790e:	2101      	movs	r1, #1
    7910:	0018      	movs	r0, r3
    7912:	f7fe ff97 	bl	6844 <pinMode>
        digitalWrite(_sclk, HIGH);
    7916:	687b      	ldr	r3, [r7, #4]
    7918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    791a:	2101      	movs	r1, #1
    791c:	0018      	movs	r0, r3
    791e:	f7ff f8bb 	bl	6a98 <digitalWrite>
        if(_miso >= 0){
    7922:	687b      	ldr	r3, [r7, #4]
    7924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7926:	2b00      	cmp	r3, #0
    7928:	db05      	blt.n	7936 <_ZN16Adafruit_ILI93415beginEm+0x96>
            pinMode(_miso, INPUT);
    792a:	687b      	ldr	r3, [r7, #4]
    792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    792e:	2100      	movs	r1, #0
    7930:	0018      	movs	r0, r3
    7932:	f7fe ff87 	bl	6844 <pinMode>
        }
    }

    // Hardware SPI
    SPI_BEGIN();
    7936:	687b      	ldr	r3, [r7, #4]
    7938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    793a:	2b00      	cmp	r3, #0
    793c:	da03      	bge.n	7946 <_ZN16Adafruit_ILI93415beginEm+0xa6>
    793e:	4b84      	ldr	r3, [pc, #528]	; (7b50 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7940:	0018      	movs	r0, r3
    7942:	f003 fed7 	bl	b6f4 <_ZN8SPIClass5beginEv>

    // toggle RST low to reset
    if (_rst >= 0) {
    7946:	687b      	ldr	r3, [r7, #4]
    7948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    794a:	2b00      	cmp	r3, #0
    794c:	db20      	blt.n	7990 <_ZN16Adafruit_ILI93415beginEm+0xf0>
        pinMode(_rst, OUTPUT);
    794e:	687b      	ldr	r3, [r7, #4]
    7950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7952:	2101      	movs	r1, #1
    7954:	0018      	movs	r0, r3
    7956:	f7fe ff75 	bl	6844 <pinMode>
        digitalWrite(_rst, HIGH);
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    795e:	2101      	movs	r1, #1
    7960:	0018      	movs	r0, r3
    7962:	f7ff f899 	bl	6a98 <digitalWrite>
        delay(100);
    7966:	2064      	movs	r0, #100	; 0x64
    7968:	f7fb fa50 	bl	2e0c <delay>
        digitalWrite(_rst, LOW);
    796c:	687b      	ldr	r3, [r7, #4]
    796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7970:	2100      	movs	r1, #0
    7972:	0018      	movs	r0, r3
    7974:	f7ff f890 	bl	6a98 <digitalWrite>
        delay(100);
    7978:	2064      	movs	r0, #100	; 0x64
    797a:	f7fb fa47 	bl	2e0c <delay>
        digitalWrite(_rst, HIGH);
    797e:	687b      	ldr	r3, [r7, #4]
    7980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7982:	2101      	movs	r1, #1
    7984:	0018      	movs	r0, r3
    7986:	f7ff f887 	bl	6a98 <digitalWrite>
        delay(200);
    798a:	20c8      	movs	r0, #200	; 0xc8
    798c:	f7fb fa3e 	bl	2e0c <delay>
    }

    startWrite();
    7990:	687b      	ldr	r3, [r7, #4]
    7992:	681b      	ldr	r3, [r3, #0]
    7994:	3314      	adds	r3, #20
    7996:	681b      	ldr	r3, [r3, #0]
    7998:	687a      	ldr	r2, [r7, #4]
    799a:	0010      	movs	r0, r2
    799c:	4798      	blx	r3

    writeCommand(0xEF);
    799e:	687b      	ldr	r3, [r7, #4]
    79a0:	21ef      	movs	r1, #239	; 0xef
    79a2:	0018      	movs	r0, r3
    79a4:	f000 fb0c 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x03);
    79a8:	687b      	ldr	r3, [r7, #4]
    79aa:	2103      	movs	r1, #3
    79ac:	0018      	movs	r0, r3
    79ae:	f000 fa69 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x80);
    79b2:	687b      	ldr	r3, [r7, #4]
    79b4:	2180      	movs	r1, #128	; 0x80
    79b6:	0018      	movs	r0, r3
    79b8:	f000 fa64 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x02);
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	2102      	movs	r1, #2
    79c0:	0018      	movs	r0, r3
    79c2:	f000 fa5f 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xCF);
    79c6:	687b      	ldr	r3, [r7, #4]
    79c8:	21cf      	movs	r1, #207	; 0xcf
    79ca:	0018      	movs	r0, r3
    79cc:	f000 faf8 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    79d0:	687b      	ldr	r3, [r7, #4]
    79d2:	2100      	movs	r1, #0
    79d4:	0018      	movs	r0, r3
    79d6:	f000 fa55 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0XC1);
    79da:	687b      	ldr	r3, [r7, #4]
    79dc:	21c1      	movs	r1, #193	; 0xc1
    79de:	0018      	movs	r0, r3
    79e0:	f000 fa50 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X30);
    79e4:	687b      	ldr	r3, [r7, #4]
    79e6:	2130      	movs	r1, #48	; 0x30
    79e8:	0018      	movs	r0, r3
    79ea:	f000 fa4b 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xED);
    79ee:	687b      	ldr	r3, [r7, #4]
    79f0:	21ed      	movs	r1, #237	; 0xed
    79f2:	0018      	movs	r0, r3
    79f4:	f000 fae4 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x64);
    79f8:	687b      	ldr	r3, [r7, #4]
    79fa:	2164      	movs	r1, #100	; 0x64
    79fc:	0018      	movs	r0, r3
    79fe:	f000 fa41 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7a02:	687b      	ldr	r3, [r7, #4]
    7a04:	2103      	movs	r1, #3
    7a06:	0018      	movs	r0, r3
    7a08:	f000 fa3c 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X12);
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	2112      	movs	r1, #18
    7a10:	0018      	movs	r0, r3
    7a12:	f000 fa37 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X81);
    7a16:	687b      	ldr	r3, [r7, #4]
    7a18:	2181      	movs	r1, #129	; 0x81
    7a1a:	0018      	movs	r0, r3
    7a1c:	f000 fa32 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xE8);
    7a20:	687b      	ldr	r3, [r7, #4]
    7a22:	21e8      	movs	r1, #232	; 0xe8
    7a24:	0018      	movs	r0, r3
    7a26:	f000 facb 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x85);
    7a2a:	687b      	ldr	r3, [r7, #4]
    7a2c:	2185      	movs	r1, #133	; 0x85
    7a2e:	0018      	movs	r0, r3
    7a30:	f000 fa28 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	2100      	movs	r1, #0
    7a38:	0018      	movs	r0, r3
    7a3a:	f000 fa23 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x78);
    7a3e:	687b      	ldr	r3, [r7, #4]
    7a40:	2178      	movs	r1, #120	; 0x78
    7a42:	0018      	movs	r0, r3
    7a44:	f000 fa1e 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xCB);
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	21cb      	movs	r1, #203	; 0xcb
    7a4c:	0018      	movs	r0, r3
    7a4e:	f000 fab7 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x39);
    7a52:	687b      	ldr	r3, [r7, #4]
    7a54:	2139      	movs	r1, #57	; 0x39
    7a56:	0018      	movs	r0, r3
    7a58:	f000 fa14 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x2C);
    7a5c:	687b      	ldr	r3, [r7, #4]
    7a5e:	212c      	movs	r1, #44	; 0x2c
    7a60:	0018      	movs	r0, r3
    7a62:	f000 fa0f 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7a66:	687b      	ldr	r3, [r7, #4]
    7a68:	2100      	movs	r1, #0
    7a6a:	0018      	movs	r0, r3
    7a6c:	f000 fa0a 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x34);
    7a70:	687b      	ldr	r3, [r7, #4]
    7a72:	2134      	movs	r1, #52	; 0x34
    7a74:	0018      	movs	r0, r3
    7a76:	f000 fa05 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x02);
    7a7a:	687b      	ldr	r3, [r7, #4]
    7a7c:	2102      	movs	r1, #2
    7a7e:	0018      	movs	r0, r3
    7a80:	f000 fa00 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xF7);
    7a84:	687b      	ldr	r3, [r7, #4]
    7a86:	21f7      	movs	r1, #247	; 0xf7
    7a88:	0018      	movs	r0, r3
    7a8a:	f000 fa99 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x20);
    7a8e:	687b      	ldr	r3, [r7, #4]
    7a90:	2120      	movs	r1, #32
    7a92:	0018      	movs	r0, r3
    7a94:	f000 f9f6 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xEA);
    7a98:	687b      	ldr	r3, [r7, #4]
    7a9a:	21ea      	movs	r1, #234	; 0xea
    7a9c:	0018      	movs	r0, r3
    7a9e:	f000 fa8f 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7aa2:	687b      	ldr	r3, [r7, #4]
    7aa4:	2100      	movs	r1, #0
    7aa6:	0018      	movs	r0, r3
    7aa8:	f000 f9ec 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7aac:	687b      	ldr	r3, [r7, #4]
    7aae:	2100      	movs	r1, #0
    7ab0:	0018      	movs	r0, r3
    7ab2:	f000 f9e7 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PWCTR1);    //Power control
    7ab6:	687b      	ldr	r3, [r7, #4]
    7ab8:	21c0      	movs	r1, #192	; 0xc0
    7aba:	0018      	movs	r0, r3
    7abc:	f000 fa80 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x23);   //VRH[5:0]
    7ac0:	687b      	ldr	r3, [r7, #4]
    7ac2:	2123      	movs	r1, #35	; 0x23
    7ac4:	0018      	movs	r0, r3
    7ac6:	f000 f9dd 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PWCTR2);    //Power control
    7aca:	687b      	ldr	r3, [r7, #4]
    7acc:	21c1      	movs	r1, #193	; 0xc1
    7ace:	0018      	movs	r0, r3
    7ad0:	f000 fa76 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x10);   //SAP[2:0];BT[3:0]
    7ad4:	687b      	ldr	r3, [r7, #4]
    7ad6:	2110      	movs	r1, #16
    7ad8:	0018      	movs	r0, r3
    7ada:	f000 f9d3 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VMCTR1);    //VCM control
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	21c5      	movs	r1, #197	; 0xc5
    7ae2:	0018      	movs	r0, r3
    7ae4:	f000 fa6c 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x3e);
    7ae8:	687b      	ldr	r3, [r7, #4]
    7aea:	213e      	movs	r1, #62	; 0x3e
    7aec:	0018      	movs	r0, r3
    7aee:	f000 f9c9 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x28);
    7af2:	687b      	ldr	r3, [r7, #4]
    7af4:	2128      	movs	r1, #40	; 0x28
    7af6:	0018      	movs	r0, r3
    7af8:	f000 f9c4 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VMCTR2);    //VCM control2
    7afc:	687b      	ldr	r3, [r7, #4]
    7afe:	21c7      	movs	r1, #199	; 0xc7
    7b00:	0018      	movs	r0, r3
    7b02:	f000 fa5d 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x86);  //--
    7b06:	687b      	ldr	r3, [r7, #4]
    7b08:	2186      	movs	r1, #134	; 0x86
    7b0a:	0018      	movs	r0, r3
    7b0c:	f000 f9ba 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_MADCTL);    // Memory Access Control
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	2136      	movs	r1, #54	; 0x36
    7b14:	0018      	movs	r0, r3
    7b16:	f000 fa53 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x48);
    7b1a:	687b      	ldr	r3, [r7, #4]
    7b1c:	2148      	movs	r1, #72	; 0x48
    7b1e:	0018      	movs	r0, r3
    7b20:	f000 f9b0 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VSCRSADD); // Vertical scroll
    7b24:	687b      	ldr	r3, [r7, #4]
    7b26:	2137      	movs	r1, #55	; 0x37
    7b28:	0018      	movs	r0, r3
    7b2a:	f000 fa49 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE16(0);                 // Zero
    7b2e:	687b      	ldr	r3, [r7, #4]
    7b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b32:	2b00      	cmp	r3, #0
    7b34:	da0e      	bge.n	7b54 <_ZN16Adafruit_ILI93415beginEm+0x2b4>
    7b36:	4b06      	ldr	r3, [pc, #24]	; (7b50 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7b38:	2100      	movs	r1, #0
    7b3a:	0018      	movs	r0, r3
    7b3c:	f003 fec6 	bl	b8cc <_ZN8SPIClass8transferEh>
    7b40:	4b03      	ldr	r3, [pc, #12]	; (7b50 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7b42:	2100      	movs	r1, #0
    7b44:	0018      	movs	r0, r3
    7b46:	f003 fec1 	bl	b8cc <_ZN8SPIClass8transferEh>
    7b4a:	e00d      	b.n	7b68 <_ZN16Adafruit_ILI93415beginEm+0x2c8>
    7b4c:	016e3600 	.word	0x016e3600
    7b50:	20000b7c 	.word	0x20000b7c
    7b54:	687b      	ldr	r3, [r7, #4]
    7b56:	2100      	movs	r1, #0
    7b58:	0018      	movs	r0, r3
    7b5a:	f000 f993 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    7b5e:	687b      	ldr	r3, [r7, #4]
    7b60:	2100      	movs	r1, #0
    7b62:	0018      	movs	r0, r3
    7b64:	f000 f98e 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PIXFMT);
    7b68:	687b      	ldr	r3, [r7, #4]
    7b6a:	213a      	movs	r1, #58	; 0x3a
    7b6c:	0018      	movs	r0, r3
    7b6e:	f000 fa27 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x55);
    7b72:	687b      	ldr	r3, [r7, #4]
    7b74:	2155      	movs	r1, #85	; 0x55
    7b76:	0018      	movs	r0, r3
    7b78:	f000 f984 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_FRMCTR1);
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	21b1      	movs	r1, #177	; 0xb1
    7b80:	0018      	movs	r0, r3
    7b82:	f000 fa1d 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7b86:	687b      	ldr	r3, [r7, #4]
    7b88:	2100      	movs	r1, #0
    7b8a:	0018      	movs	r0, r3
    7b8c:	f000 f97a 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x18);
    7b90:	687b      	ldr	r3, [r7, #4]
    7b92:	2118      	movs	r1, #24
    7b94:	0018      	movs	r0, r3
    7b96:	f000 f975 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_DFUNCTR);    // Display Function Control
    7b9a:	687b      	ldr	r3, [r7, #4]
    7b9c:	21b6      	movs	r1, #182	; 0xb6
    7b9e:	0018      	movs	r0, r3
    7ba0:	f000 fa0e 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x08);
    7ba4:	687b      	ldr	r3, [r7, #4]
    7ba6:	2108      	movs	r1, #8
    7ba8:	0018      	movs	r0, r3
    7baa:	f000 f96b 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x82);
    7bae:	687b      	ldr	r3, [r7, #4]
    7bb0:	2182      	movs	r1, #130	; 0x82
    7bb2:	0018      	movs	r0, r3
    7bb4:	f000 f966 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x27);
    7bb8:	687b      	ldr	r3, [r7, #4]
    7bba:	2127      	movs	r1, #39	; 0x27
    7bbc:	0018      	movs	r0, r3
    7bbe:	f000 f961 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xF2);    // 3Gamma Function Disable
    7bc2:	687b      	ldr	r3, [r7, #4]
    7bc4:	21f2      	movs	r1, #242	; 0xf2
    7bc6:	0018      	movs	r0, r3
    7bc8:	f000 f9fa 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	2100      	movs	r1, #0
    7bd0:	0018      	movs	r0, r3
    7bd2:	f000 f957 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GAMMASET);    //Gamma curve selected
    7bd6:	687b      	ldr	r3, [r7, #4]
    7bd8:	2126      	movs	r1, #38	; 0x26
    7bda:	0018      	movs	r0, r3
    7bdc:	f000 f9f0 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x01);
    7be0:	687b      	ldr	r3, [r7, #4]
    7be2:	2101      	movs	r1, #1
    7be4:	0018      	movs	r0, r3
    7be6:	f000 f94d 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GMCTRP1);    //Set Gamma
    7bea:	687b      	ldr	r3, [r7, #4]
    7bec:	21e0      	movs	r1, #224	; 0xe0
    7bee:	0018      	movs	r0, r3
    7bf0:	f000 f9e6 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x0F);
    7bf4:	687b      	ldr	r3, [r7, #4]
    7bf6:	210f      	movs	r1, #15
    7bf8:	0018      	movs	r0, r3
    7bfa:	f000 f943 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7bfe:	687b      	ldr	r3, [r7, #4]
    7c00:	2131      	movs	r1, #49	; 0x31
    7c02:	0018      	movs	r0, r3
    7c04:	f000 f93e 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x2B);
    7c08:	687b      	ldr	r3, [r7, #4]
    7c0a:	212b      	movs	r1, #43	; 0x2b
    7c0c:	0018      	movs	r0, r3
    7c0e:	f000 f939 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0C);
    7c12:	687b      	ldr	r3, [r7, #4]
    7c14:	210c      	movs	r1, #12
    7c16:	0018      	movs	r0, r3
    7c18:	f000 f934 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	210e      	movs	r1, #14
    7c20:	0018      	movs	r0, r3
    7c22:	f000 f92f 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x08);
    7c26:	687b      	ldr	r3, [r7, #4]
    7c28:	2108      	movs	r1, #8
    7c2a:	0018      	movs	r0, r3
    7c2c:	f000 f92a 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x4E);
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	214e      	movs	r1, #78	; 0x4e
    7c34:	0018      	movs	r0, r3
    7c36:	f000 f925 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0xF1);
    7c3a:	687b      	ldr	r3, [r7, #4]
    7c3c:	21f1      	movs	r1, #241	; 0xf1
    7c3e:	0018      	movs	r0, r3
    7c40:	f000 f920 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x37);
    7c44:	687b      	ldr	r3, [r7, #4]
    7c46:	2137      	movs	r1, #55	; 0x37
    7c48:	0018      	movs	r0, r3
    7c4a:	f000 f91b 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x07);
    7c4e:	687b      	ldr	r3, [r7, #4]
    7c50:	2107      	movs	r1, #7
    7c52:	0018      	movs	r0, r3
    7c54:	f000 f916 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x10);
    7c58:	687b      	ldr	r3, [r7, #4]
    7c5a:	2110      	movs	r1, #16
    7c5c:	0018      	movs	r0, r3
    7c5e:	f000 f911 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7c62:	687b      	ldr	r3, [r7, #4]
    7c64:	2103      	movs	r1, #3
    7c66:	0018      	movs	r0, r3
    7c68:	f000 f90c 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7c6c:	687b      	ldr	r3, [r7, #4]
    7c6e:	210e      	movs	r1, #14
    7c70:	0018      	movs	r0, r3
    7c72:	f000 f907 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x09);
    7c76:	687b      	ldr	r3, [r7, #4]
    7c78:	2109      	movs	r1, #9
    7c7a:	0018      	movs	r0, r3
    7c7c:	f000 f902 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7c80:	687b      	ldr	r3, [r7, #4]
    7c82:	2100      	movs	r1, #0
    7c84:	0018      	movs	r0, r3
    7c86:	f000 f8fd 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GMCTRN1);    //Set Gamma
    7c8a:	687b      	ldr	r3, [r7, #4]
    7c8c:	21e1      	movs	r1, #225	; 0xe1
    7c8e:	0018      	movs	r0, r3
    7c90:	f000 f996 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	2100      	movs	r1, #0
    7c98:	0018      	movs	r0, r3
    7c9a:	f000 f8f3 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7c9e:	687b      	ldr	r3, [r7, #4]
    7ca0:	210e      	movs	r1, #14
    7ca2:	0018      	movs	r0, r3
    7ca4:	f000 f8ee 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x14);
    7ca8:	687b      	ldr	r3, [r7, #4]
    7caa:	2114      	movs	r1, #20
    7cac:	0018      	movs	r0, r3
    7cae:	f000 f8e9 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7cb2:	687b      	ldr	r3, [r7, #4]
    7cb4:	2103      	movs	r1, #3
    7cb6:	0018      	movs	r0, r3
    7cb8:	f000 f8e4 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x11);
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	2111      	movs	r1, #17
    7cc0:	0018      	movs	r0, r3
    7cc2:	f000 f8df 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x07);
    7cc6:	687b      	ldr	r3, [r7, #4]
    7cc8:	2107      	movs	r1, #7
    7cca:	0018      	movs	r0, r3
    7ccc:	f000 f8da 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7cd0:	687b      	ldr	r3, [r7, #4]
    7cd2:	2131      	movs	r1, #49	; 0x31
    7cd4:	0018      	movs	r0, r3
    7cd6:	f000 f8d5 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0xC1);
    7cda:	687b      	ldr	r3, [r7, #4]
    7cdc:	21c1      	movs	r1, #193	; 0xc1
    7cde:	0018      	movs	r0, r3
    7ce0:	f000 f8d0 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x48);
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	2148      	movs	r1, #72	; 0x48
    7ce8:	0018      	movs	r0, r3
    7cea:	f000 f8cb 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x08);
    7cee:	687b      	ldr	r3, [r7, #4]
    7cf0:	2108      	movs	r1, #8
    7cf2:	0018      	movs	r0, r3
    7cf4:	f000 f8c6 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0F);
    7cf8:	687b      	ldr	r3, [r7, #4]
    7cfa:	210f      	movs	r1, #15
    7cfc:	0018      	movs	r0, r3
    7cfe:	f000 f8c1 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0C);
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	210c      	movs	r1, #12
    7d06:	0018      	movs	r0, r3
    7d08:	f000 f8bc 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7d0c:	687b      	ldr	r3, [r7, #4]
    7d0e:	2131      	movs	r1, #49	; 0x31
    7d10:	0018      	movs	r0, r3
    7d12:	f000 f8b7 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x36);
    7d16:	687b      	ldr	r3, [r7, #4]
    7d18:	2136      	movs	r1, #54	; 0x36
    7d1a:	0018      	movs	r0, r3
    7d1c:	f000 f8b2 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0F);
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	210f      	movs	r1, #15
    7d24:	0018      	movs	r0, r3
    7d26:	f000 f8ad 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_SLPOUT);    //Exit Sleep
    7d2a:	687b      	ldr	r3, [r7, #4]
    7d2c:	2111      	movs	r1, #17
    7d2e:	0018      	movs	r0, r3
    7d30:	f000 f946 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    delay(120);
    7d34:	2078      	movs	r0, #120	; 0x78
    7d36:	f7fb f869 	bl	2e0c <delay>
    writeCommand(ILI9341_DISPON);    //Display on
    7d3a:	687b      	ldr	r3, [r7, #4]
    7d3c:	2129      	movs	r1, #41	; 0x29
    7d3e:	0018      	movs	r0, r3
    7d40:	f000 f93e 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    delay(120);
    7d44:	2078      	movs	r0, #120	; 0x78
    7d46:	f7fb f861 	bl	2e0c <delay>
    endWrite();
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	681b      	ldr	r3, [r3, #0]
    7d4e:	332c      	adds	r3, #44	; 0x2c
    7d50:	681b      	ldr	r3, [r3, #0]
    7d52:	687a      	ldr	r2, [r7, #4]
    7d54:	0010      	movs	r0, r2
    7d56:	4798      	blx	r3

    _width  = ILI9341_TFTWIDTH;
    7d58:	687b      	ldr	r3, [r7, #4]
    7d5a:	22f0      	movs	r2, #240	; 0xf0
    7d5c:	819a      	strh	r2, [r3, #12]
    _height = ILI9341_TFTHEIGHT;
    7d5e:	687b      	ldr	r3, [r7, #4]
    7d60:	22a0      	movs	r2, #160	; 0xa0
    7d62:	0052      	lsls	r2, r2, #1
    7d64:	81da      	strh	r2, [r3, #14]
}
    7d66:	46c0      	nop			; (mov r8, r8)
    7d68:	46bd      	mov	sp, r7
    7d6a:	b002      	add	sp, #8
    7d6c:	bd80      	pop	{r7, pc}
    7d6e:	46c0      	nop			; (mov r8, r8)

00007d70 <_ZN16Adafruit_ILI934111setRotationEh>:

void Adafruit_ILI9341::setRotation(uint8_t m) {
    7d70:	b580      	push	{r7, lr}
    7d72:	b082      	sub	sp, #8
    7d74:	af00      	add	r7, sp, #0
    7d76:	6078      	str	r0, [r7, #4]
    7d78:	000a      	movs	r2, r1
    7d7a:	1cfb      	adds	r3, r7, #3
    7d7c:	701a      	strb	r2, [r3, #0]
    rotation = m % 4; // can't be higher than 3
    7d7e:	1cfb      	adds	r3, r7, #3
    7d80:	781b      	ldrb	r3, [r3, #0]
    7d82:	2203      	movs	r2, #3
    7d84:	4013      	ands	r3, r2
    7d86:	b2da      	uxtb	r2, r3
    7d88:	687b      	ldr	r3, [r7, #4]
    7d8a:	765a      	strb	r2, [r3, #25]
    switch (rotation) {
    7d8c:	687b      	ldr	r3, [r7, #4]
    7d8e:	7e5b      	ldrb	r3, [r3, #25]
    7d90:	2b01      	cmp	r3, #1
    7d92:	d013      	beq.n	7dbc <_ZN16Adafruit_ILI934111setRotationEh+0x4c>
    7d94:	dc02      	bgt.n	7d9c <_ZN16Adafruit_ILI934111setRotationEh+0x2c>
    7d96:	2b00      	cmp	r3, #0
    7d98:	d005      	beq.n	7da6 <_ZN16Adafruit_ILI934111setRotationEh+0x36>
    7d9a:	e030      	b.n	7dfe <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
    7d9c:	2b02      	cmp	r3, #2
    7d9e:	d018      	beq.n	7dd2 <_ZN16Adafruit_ILI934111setRotationEh+0x62>
    7da0:	2b03      	cmp	r3, #3
    7da2:	d021      	beq.n	7de8 <_ZN16Adafruit_ILI934111setRotationEh+0x78>
    7da4:	e02b      	b.n	7dfe <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 0:
            m = (MADCTL_MX | MADCTL_BGR);
    7da6:	1cfb      	adds	r3, r7, #3
    7da8:	2248      	movs	r2, #72	; 0x48
    7daa:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTWIDTH;
    7dac:	687b      	ldr	r3, [r7, #4]
    7dae:	22f0      	movs	r2, #240	; 0xf0
    7db0:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTHEIGHT;
    7db2:	687b      	ldr	r3, [r7, #4]
    7db4:	22a0      	movs	r2, #160	; 0xa0
    7db6:	0052      	lsls	r2, r2, #1
    7db8:	81da      	strh	r2, [r3, #14]
            break;
    7dba:	e020      	b.n	7dfe <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 1:
            m = (MADCTL_MV | MADCTL_BGR);
    7dbc:	1cfb      	adds	r3, r7, #3
    7dbe:	2228      	movs	r2, #40	; 0x28
    7dc0:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTHEIGHT;
    7dc2:	687b      	ldr	r3, [r7, #4]
    7dc4:	22a0      	movs	r2, #160	; 0xa0
    7dc6:	0052      	lsls	r2, r2, #1
    7dc8:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTWIDTH;
    7dca:	687b      	ldr	r3, [r7, #4]
    7dcc:	22f0      	movs	r2, #240	; 0xf0
    7dce:	81da      	strh	r2, [r3, #14]
            break;
    7dd0:	e015      	b.n	7dfe <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 2:
            m = (MADCTL_MY | MADCTL_BGR);
    7dd2:	1cfb      	adds	r3, r7, #3
    7dd4:	2288      	movs	r2, #136	; 0x88
    7dd6:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTWIDTH;
    7dd8:	687b      	ldr	r3, [r7, #4]
    7dda:	22f0      	movs	r2, #240	; 0xf0
    7ddc:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTHEIGHT;
    7dde:	687b      	ldr	r3, [r7, #4]
    7de0:	22a0      	movs	r2, #160	; 0xa0
    7de2:	0052      	lsls	r2, r2, #1
    7de4:	81da      	strh	r2, [r3, #14]
            break;
    7de6:	e00a      	b.n	7dfe <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 3:
            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
    7de8:	1cfb      	adds	r3, r7, #3
    7dea:	22e8      	movs	r2, #232	; 0xe8
    7dec:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTHEIGHT;
    7dee:	687b      	ldr	r3, [r7, #4]
    7df0:	22a0      	movs	r2, #160	; 0xa0
    7df2:	0052      	lsls	r2, r2, #1
    7df4:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTWIDTH;
    7df6:	687b      	ldr	r3, [r7, #4]
    7df8:	22f0      	movs	r2, #240	; 0xf0
    7dfa:	81da      	strh	r2, [r3, #14]
            break;
    7dfc:	46c0      	nop			; (mov r8, r8)
    }

    startWrite();
    7dfe:	687b      	ldr	r3, [r7, #4]
    7e00:	681b      	ldr	r3, [r3, #0]
    7e02:	3314      	adds	r3, #20
    7e04:	681b      	ldr	r3, [r3, #0]
    7e06:	687a      	ldr	r2, [r7, #4]
    7e08:	0010      	movs	r0, r2
    7e0a:	4798      	blx	r3
    writeCommand(ILI9341_MADCTL);
    7e0c:	687b      	ldr	r3, [r7, #4]
    7e0e:	2136      	movs	r1, #54	; 0x36
    7e10:	0018      	movs	r0, r3
    7e12:	f000 f8d5 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(m);
    7e16:	1cfb      	adds	r3, r7, #3
    7e18:	781a      	ldrb	r2, [r3, #0]
    7e1a:	687b      	ldr	r3, [r7, #4]
    7e1c:	0011      	movs	r1, r2
    7e1e:	0018      	movs	r0, r3
    7e20:	f000 f830 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    endWrite();
    7e24:	687b      	ldr	r3, [r7, #4]
    7e26:	681b      	ldr	r3, [r3, #0]
    7e28:	332c      	adds	r3, #44	; 0x2c
    7e2a:	681b      	ldr	r3, [r3, #0]
    7e2c:	687a      	ldr	r2, [r7, #4]
    7e2e:	0010      	movs	r0, r2
    7e30:	4798      	blx	r3
}
    7e32:	46c0      	nop			; (mov r8, r8)
    7e34:	46bd      	mov	sp, r7
    7e36:	b002      	add	sp, #8
    7e38:	bd80      	pop	{r7, pc}

00007e3a <_ZN16Adafruit_ILI934113invertDisplayEb>:

void Adafruit_ILI9341::invertDisplay(boolean i) {
    7e3a:	b580      	push	{r7, lr}
    7e3c:	b082      	sub	sp, #8
    7e3e:	af00      	add	r7, sp, #0
    7e40:	6078      	str	r0, [r7, #4]
    7e42:	000a      	movs	r2, r1
    7e44:	1cfb      	adds	r3, r7, #3
    7e46:	701a      	strb	r2, [r3, #0]
    startWrite();
    7e48:	687b      	ldr	r3, [r7, #4]
    7e4a:	681b      	ldr	r3, [r3, #0]
    7e4c:	3314      	adds	r3, #20
    7e4e:	681b      	ldr	r3, [r3, #0]
    7e50:	687a      	ldr	r2, [r7, #4]
    7e52:	0010      	movs	r0, r2
    7e54:	4798      	blx	r3
    writeCommand(i ? ILI9341_INVON : ILI9341_INVOFF);
    7e56:	1cfb      	adds	r3, r7, #3
    7e58:	781b      	ldrb	r3, [r3, #0]
    7e5a:	2b00      	cmp	r3, #0
    7e5c:	d001      	beq.n	7e62 <_ZN16Adafruit_ILI934113invertDisplayEb+0x28>
    7e5e:	2321      	movs	r3, #33	; 0x21
    7e60:	e000      	b.n	7e64 <_ZN16Adafruit_ILI934113invertDisplayEb+0x2a>
    7e62:	2320      	movs	r3, #32
    7e64:	687a      	ldr	r2, [r7, #4]
    7e66:	0019      	movs	r1, r3
    7e68:	0010      	movs	r0, r2
    7e6a:	f000 f8a9 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    endWrite();
    7e6e:	687b      	ldr	r3, [r7, #4]
    7e70:	681b      	ldr	r3, [r3, #0]
    7e72:	332c      	adds	r3, #44	; 0x2c
    7e74:	681b      	ldr	r3, [r3, #0]
    7e76:	687a      	ldr	r2, [r7, #4]
    7e78:	0010      	movs	r0, r2
    7e7a:	4798      	blx	r3
}
    7e7c:	46c0      	nop			; (mov r8, r8)
    7e7e:	46bd      	mov	sp, r7
    7e80:	b002      	add	sp, #8
    7e82:	bd80      	pop	{r7, pc}

00007e84 <_ZN16Adafruit_ILI93418spiWriteEh>:
        }
    }
    return r;
}

void Adafruit_ILI9341::spiWrite(uint8_t b) {
    7e84:	b580      	push	{r7, lr}
    7e86:	b084      	sub	sp, #16
    7e88:	af00      	add	r7, sp, #0
    7e8a:	6078      	str	r0, [r7, #4]
    7e8c:	000a      	movs	r2, r1
    7e8e:	1cfb      	adds	r3, r7, #3
    7e90:	701a      	strb	r2, [r3, #0]
    if(_sclk < 0){
    7e92:	687b      	ldr	r3, [r7, #4]
    7e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7e96:	2b00      	cmp	r3, #0
    7e98:	da07      	bge.n	7eaa <_ZN16Adafruit_ILI93418spiWriteEh+0x26>
        HSPI_WRITE(b);
    7e9a:	1cfb      	adds	r3, r7, #3
    7e9c:	781a      	ldrb	r2, [r3, #0]
    7e9e:	4b25      	ldr	r3, [pc, #148]	; (7f34 <_ZN16Adafruit_ILI93418spiWriteEh+0xb0>)
    7ea0:	0011      	movs	r1, r2
    7ea2:	0018      	movs	r0, r3
    7ea4:	f003 fd12 	bl	b8cc <_ZN8SPIClass8transferEh>
        return;
    7ea8:	e040      	b.n	7f2c <_ZN16Adafruit_ILI93418spiWriteEh+0xa8>
    }
    for(uint8_t bit = 0x80; bit; bit >>= 1){
    7eaa:	230f      	movs	r3, #15
    7eac:	18fb      	adds	r3, r7, r3
    7eae:	2280      	movs	r2, #128	; 0x80
    7eb0:	701a      	strb	r2, [r3, #0]
    7eb2:	230f      	movs	r3, #15
    7eb4:	18fb      	adds	r3, r7, r3
    7eb6:	781b      	ldrb	r3, [r3, #0]
    7eb8:	2b00      	cmp	r3, #0
    7eba:	d037      	beq.n	7f2c <_ZN16Adafruit_ILI93418spiWriteEh+0xa8>
        if((b) & bit){
    7ebc:	1cfb      	adds	r3, r7, #3
    7ebe:	220f      	movs	r2, #15
    7ec0:	18ba      	adds	r2, r7, r2
    7ec2:	781b      	ldrb	r3, [r3, #0]
    7ec4:	7812      	ldrb	r2, [r2, #0]
    7ec6:	4013      	ands	r3, r2
    7ec8:	b2db      	uxtb	r3, r3
    7eca:	2b00      	cmp	r3, #0
    7ecc:	d009      	beq.n	7ee2 <_ZN16Adafruit_ILI93418spiWriteEh+0x5e>
            SSPI_MOSI_HIGH();
    7ece:	687b      	ldr	r3, [r7, #4]
    7ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7ed2:	687a      	ldr	r2, [r7, #4]
    7ed4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    7ed6:	6811      	ldr	r1, [r2, #0]
    7ed8:	687a      	ldr	r2, [r7, #4]
    7eda:	6d12      	ldr	r2, [r2, #80]	; 0x50
    7edc:	430a      	orrs	r2, r1
    7ede:	601a      	str	r2, [r3, #0]
    7ee0:	e009      	b.n	7ef6 <_ZN16Adafruit_ILI93418spiWriteEh+0x72>
        } else {
            SSPI_MOSI_LOW();
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7ee6:	687a      	ldr	r2, [r7, #4]
    7ee8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    7eea:	6811      	ldr	r1, [r2, #0]
    7eec:	687a      	ldr	r2, [r7, #4]
    7eee:	6d12      	ldr	r2, [r2, #80]	; 0x50
    7ef0:	43d2      	mvns	r2, r2
    7ef2:	400a      	ands	r2, r1
    7ef4:	601a      	str	r2, [r3, #0]
        }
        SSPI_SCK_LOW();
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7efa:	687a      	ldr	r2, [r7, #4]
    7efc:	6c52      	ldr	r2, [r2, #68]	; 0x44
    7efe:	6811      	ldr	r1, [r2, #0]
    7f00:	687a      	ldr	r2, [r7, #4]
    7f02:	6d92      	ldr	r2, [r2, #88]	; 0x58
    7f04:	43d2      	mvns	r2, r2
    7f06:	400a      	ands	r2, r1
    7f08:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7f0a:	687b      	ldr	r3, [r7, #4]
    7f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7f0e:	687a      	ldr	r2, [r7, #4]
    7f10:	6c52      	ldr	r2, [r2, #68]	; 0x44
    7f12:	6811      	ldr	r1, [r2, #0]
    7f14:	687a      	ldr	r2, [r7, #4]
    7f16:	6d92      	ldr	r2, [r2, #88]	; 0x58
    7f18:	430a      	orrs	r2, r1
    7f1a:	601a      	str	r2, [r3, #0]
    for(uint8_t bit = 0x80; bit; bit >>= 1){
    7f1c:	230f      	movs	r3, #15
    7f1e:	18fb      	adds	r3, r7, r3
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	105a      	asrs	r2, r3, #1
    7f24:	230f      	movs	r3, #15
    7f26:	18fb      	adds	r3, r7, r3
    7f28:	701a      	strb	r2, [r3, #0]
    7f2a:	e7c2      	b.n	7eb2 <_ZN16Adafruit_ILI93418spiWriteEh+0x2e>
    }
}
    7f2c:	46bd      	mov	sp, r7
    7f2e:	b004      	add	sp, #16
    7f30:	bd80      	pop	{r7, pc}
    7f32:	46c0      	nop			; (mov r8, r8)
    7f34:	20000b7c 	.word	0x20000b7c

00007f38 <_ZN16Adafruit_ILI934110startWriteEv>:

/*
 * Transaction API
 * */

void Adafruit_ILI9341::startWrite(void){
    7f38:	b580      	push	{r7, lr}
    7f3a:	b084      	sub	sp, #16
    7f3c:	af00      	add	r7, sp, #0
    7f3e:	6078      	str	r0, [r7, #4]
    SPI_BEGIN_TRANSACTION();
    7f40:	687b      	ldr	r3, [r7, #4]
    7f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7f44:	2b00      	cmp	r3, #0
    7f46:	da0e      	bge.n	7f66 <_ZN16Adafruit_ILI934110startWriteEv+0x2e>
    7f48:	687b      	ldr	r3, [r7, #4]
    7f4a:	6a19      	ldr	r1, [r3, #32]
    7f4c:	2308      	movs	r3, #8
    7f4e:	18f8      	adds	r0, r7, r3
    7f50:	2302      	movs	r3, #2
    7f52:	2201      	movs	r2, #1
    7f54:	f7ff fb74 	bl	7640 <_ZN11SPISettingsC1Em8BitOrderh>
    7f58:	2308      	movs	r3, #8
    7f5a:	18fb      	adds	r3, r7, r3
    7f5c:	4809      	ldr	r0, [pc, #36]	; (7f84 <_ZN16Adafruit_ILI934110startWriteEv+0x4c>)
    7f5e:	6819      	ldr	r1, [r3, #0]
    7f60:	685a      	ldr	r2, [r3, #4]
    7f62:	f003 fc57 	bl	b814 <_ZN8SPIClass16beginTransactionE11SPISettings>
    SPI_CS_LOW();
    7f66:	687b      	ldr	r3, [r7, #4]
    7f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7f6a:	687a      	ldr	r2, [r7, #4]
    7f6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    7f6e:	6811      	ldr	r1, [r2, #0]
    7f70:	687a      	ldr	r2, [r7, #4]
    7f72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    7f74:	43d2      	mvns	r2, r2
    7f76:	400a      	ands	r2, r1
    7f78:	601a      	str	r2, [r3, #0]
}
    7f7a:	46c0      	nop			; (mov r8, r8)
    7f7c:	46bd      	mov	sp, r7
    7f7e:	b004      	add	sp, #16
    7f80:	bd80      	pop	{r7, pc}
    7f82:	46c0      	nop			; (mov r8, r8)
    7f84:	20000b7c 	.word	0x20000b7c

00007f88 <_ZN16Adafruit_ILI93418endWriteEv>:

void Adafruit_ILI9341::endWrite(void){
    7f88:	b580      	push	{r7, lr}
    7f8a:	b082      	sub	sp, #8
    7f8c:	af00      	add	r7, sp, #0
    7f8e:	6078      	str	r0, [r7, #4]
    SPI_CS_HIGH();
    7f90:	687b      	ldr	r3, [r7, #4]
    7f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7f94:	687a      	ldr	r2, [r7, #4]
    7f96:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    7f98:	6811      	ldr	r1, [r2, #0]
    7f9a:	687a      	ldr	r2, [r7, #4]
    7f9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    7f9e:	430a      	orrs	r2, r1
    7fa0:	601a      	str	r2, [r3, #0]
    SPI_END_TRANSACTION();
    7fa2:	687b      	ldr	r3, [r7, #4]
    7fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7fa6:	2b00      	cmp	r3, #0
    7fa8:	da03      	bge.n	7fb2 <_ZN16Adafruit_ILI93418endWriteEv+0x2a>
    7faa:	4b04      	ldr	r3, [pc, #16]	; (7fbc <_ZN16Adafruit_ILI93418endWriteEv+0x34>)
    7fac:	0018      	movs	r0, r3
    7fae:	f003 fc67 	bl	b880 <_ZN8SPIClass14endTransactionEv>
}
    7fb2:	46c0      	nop			; (mov r8, r8)
    7fb4:	46bd      	mov	sp, r7
    7fb6:	b002      	add	sp, #8
    7fb8:	bd80      	pop	{r7, pc}
    7fba:	46c0      	nop			; (mov r8, r8)
    7fbc:	20000b7c 	.word	0x20000b7c

00007fc0 <_ZN16Adafruit_ILI934112writeCommandEh>:

void Adafruit_ILI9341::writeCommand(uint8_t cmd){
    7fc0:	b580      	push	{r7, lr}
    7fc2:	b082      	sub	sp, #8
    7fc4:	af00      	add	r7, sp, #0
    7fc6:	6078      	str	r0, [r7, #4]
    7fc8:	000a      	movs	r2, r1
    7fca:	1cfb      	adds	r3, r7, #3
    7fcc:	701a      	strb	r2, [r3, #0]
    SPI_DC_LOW();
    7fce:	687b      	ldr	r3, [r7, #4]
    7fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7fd2:	687a      	ldr	r2, [r7, #4]
    7fd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
    7fd6:	6811      	ldr	r1, [r2, #0]
    7fd8:	687a      	ldr	r2, [r7, #4]
    7fda:	6e12      	ldr	r2, [r2, #96]	; 0x60
    7fdc:	43d2      	mvns	r2, r2
    7fde:	400a      	ands	r2, r1
    7fe0:	601a      	str	r2, [r3, #0]
    spiWrite(cmd);
    7fe2:	1cfb      	adds	r3, r7, #3
    7fe4:	781a      	ldrb	r2, [r3, #0]
    7fe6:	687b      	ldr	r3, [r7, #4]
    7fe8:	0011      	movs	r1, r2
    7fea:	0018      	movs	r0, r3
    7fec:	f7ff ff4a 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    SPI_DC_HIGH();
    7ff0:	687b      	ldr	r3, [r7, #4]
    7ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7ff4:	687a      	ldr	r2, [r7, #4]
    7ff6:	6c92      	ldr	r2, [r2, #72]	; 0x48
    7ff8:	6811      	ldr	r1, [r2, #0]
    7ffa:	687a      	ldr	r2, [r7, #4]
    7ffc:	6e12      	ldr	r2, [r2, #96]	; 0x60
    7ffe:	430a      	orrs	r2, r1
    8000:	601a      	str	r2, [r3, #0]
}
    8002:	46c0      	nop			; (mov r8, r8)
    8004:	46bd      	mov	sp, r7
    8006:	b002      	add	sp, #8
    8008:	bd80      	pop	{r7, pc}
	...

0000800c <_ZN16Adafruit_ILI934113setAddrWindowEtttt>:

void Adafruit_ILI9341::setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
    800c:	b590      	push	{r4, r7, lr}
    800e:	b087      	sub	sp, #28
    8010:	af00      	add	r7, sp, #0
    8012:	60f8      	str	r0, [r7, #12]
    8014:	000c      	movs	r4, r1
    8016:	0010      	movs	r0, r2
    8018:	0019      	movs	r1, r3
    801a:	230a      	movs	r3, #10
    801c:	18fb      	adds	r3, r7, r3
    801e:	1c22      	adds	r2, r4, #0
    8020:	801a      	strh	r2, [r3, #0]
    8022:	2308      	movs	r3, #8
    8024:	18fb      	adds	r3, r7, r3
    8026:	1c02      	adds	r2, r0, #0
    8028:	801a      	strh	r2, [r3, #0]
    802a:	1dbb      	adds	r3, r7, #6
    802c:	1c0a      	adds	r2, r1, #0
    802e:	801a      	strh	r2, [r3, #0]
    uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
    8030:	230a      	movs	r3, #10
    8032:	18fb      	adds	r3, r7, r3
    8034:	881b      	ldrh	r3, [r3, #0]
    8036:	041b      	lsls	r3, r3, #16
    8038:	220a      	movs	r2, #10
    803a:	18ba      	adds	r2, r7, r2
    803c:	8811      	ldrh	r1, [r2, #0]
    803e:	1dba      	adds	r2, r7, #6
    8040:	8812      	ldrh	r2, [r2, #0]
    8042:	188a      	adds	r2, r1, r2
    8044:	3a01      	subs	r2, #1
    8046:	4313      	orrs	r3, r2
    8048:	617b      	str	r3, [r7, #20]
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
    804a:	2308      	movs	r3, #8
    804c:	18fb      	adds	r3, r7, r3
    804e:	881b      	ldrh	r3, [r3, #0]
    8050:	041b      	lsls	r3, r3, #16
    8052:	2208      	movs	r2, #8
    8054:	18ba      	adds	r2, r7, r2
    8056:	8811      	ldrh	r1, [r2, #0]
    8058:	2228      	movs	r2, #40	; 0x28
    805a:	18ba      	adds	r2, r7, r2
    805c:	8812      	ldrh	r2, [r2, #0]
    805e:	188a      	adds	r2, r1, r2
    8060:	3a01      	subs	r2, #1
    8062:	4313      	orrs	r3, r2
    8064:	613b      	str	r3, [r7, #16]
    writeCommand(ILI9341_CASET); // Column addr set
    8066:	68fb      	ldr	r3, [r7, #12]
    8068:	212a      	movs	r1, #42	; 0x2a
    806a:	0018      	movs	r0, r3
    806c:	f7ff ffa8 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE32(xa);
    8070:	68fb      	ldr	r3, [r7, #12]
    8072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8074:	2b00      	cmp	r3, #0
    8076:	da1f      	bge.n	80b8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xac>
    8078:	697b      	ldr	r3, [r7, #20]
    807a:	0e1b      	lsrs	r3, r3, #24
    807c:	b2da      	uxtb	r2, r3
    807e:	4b46      	ldr	r3, [pc, #280]	; (8198 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8080:	0011      	movs	r1, r2
    8082:	0018      	movs	r0, r3
    8084:	f003 fc22 	bl	b8cc <_ZN8SPIClass8transferEh>
    8088:	697b      	ldr	r3, [r7, #20]
    808a:	0c1b      	lsrs	r3, r3, #16
    808c:	b2da      	uxtb	r2, r3
    808e:	4b42      	ldr	r3, [pc, #264]	; (8198 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8090:	0011      	movs	r1, r2
    8092:	0018      	movs	r0, r3
    8094:	f003 fc1a 	bl	b8cc <_ZN8SPIClass8transferEh>
    8098:	697b      	ldr	r3, [r7, #20]
    809a:	0a1b      	lsrs	r3, r3, #8
    809c:	b2da      	uxtb	r2, r3
    809e:	4b3e      	ldr	r3, [pc, #248]	; (8198 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    80a0:	0011      	movs	r1, r2
    80a2:	0018      	movs	r0, r3
    80a4:	f003 fc12 	bl	b8cc <_ZN8SPIClass8transferEh>
    80a8:	697b      	ldr	r3, [r7, #20]
    80aa:	b2da      	uxtb	r2, r3
    80ac:	4b3a      	ldr	r3, [pc, #232]	; (8198 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    80ae:	0011      	movs	r1, r2
    80b0:	0018      	movs	r0, r3
    80b2:	f003 fc0b 	bl	b8cc <_ZN8SPIClass8transferEh>
    80b6:	e01e      	b.n	80f6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xea>
    80b8:	697b      	ldr	r3, [r7, #20]
    80ba:	0e1b      	lsrs	r3, r3, #24
    80bc:	b2da      	uxtb	r2, r3
    80be:	68fb      	ldr	r3, [r7, #12]
    80c0:	0011      	movs	r1, r2
    80c2:	0018      	movs	r0, r3
    80c4:	f7ff fede 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    80c8:	697b      	ldr	r3, [r7, #20]
    80ca:	0c1b      	lsrs	r3, r3, #16
    80cc:	b2da      	uxtb	r2, r3
    80ce:	68fb      	ldr	r3, [r7, #12]
    80d0:	0011      	movs	r1, r2
    80d2:	0018      	movs	r0, r3
    80d4:	f7ff fed6 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    80d8:	697b      	ldr	r3, [r7, #20]
    80da:	0a1b      	lsrs	r3, r3, #8
    80dc:	b2da      	uxtb	r2, r3
    80de:	68fb      	ldr	r3, [r7, #12]
    80e0:	0011      	movs	r1, r2
    80e2:	0018      	movs	r0, r3
    80e4:	f7ff fece 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    80e8:	697b      	ldr	r3, [r7, #20]
    80ea:	b2da      	uxtb	r2, r3
    80ec:	68fb      	ldr	r3, [r7, #12]
    80ee:	0011      	movs	r1, r2
    80f0:	0018      	movs	r0, r3
    80f2:	f7ff fec7 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_PASET); // Row addr set
    80f6:	68fb      	ldr	r3, [r7, #12]
    80f8:	212b      	movs	r1, #43	; 0x2b
    80fa:	0018      	movs	r0, r3
    80fc:	f7ff ff60 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE32(ya);
    8100:	68fb      	ldr	r3, [r7, #12]
    8102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8104:	2b00      	cmp	r3, #0
    8106:	da1f      	bge.n	8148 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x13c>
    8108:	693b      	ldr	r3, [r7, #16]
    810a:	0e1b      	lsrs	r3, r3, #24
    810c:	b2da      	uxtb	r2, r3
    810e:	4b22      	ldr	r3, [pc, #136]	; (8198 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8110:	0011      	movs	r1, r2
    8112:	0018      	movs	r0, r3
    8114:	f003 fbda 	bl	b8cc <_ZN8SPIClass8transferEh>
    8118:	693b      	ldr	r3, [r7, #16]
    811a:	0c1b      	lsrs	r3, r3, #16
    811c:	b2da      	uxtb	r2, r3
    811e:	4b1e      	ldr	r3, [pc, #120]	; (8198 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8120:	0011      	movs	r1, r2
    8122:	0018      	movs	r0, r3
    8124:	f003 fbd2 	bl	b8cc <_ZN8SPIClass8transferEh>
    8128:	693b      	ldr	r3, [r7, #16]
    812a:	0a1b      	lsrs	r3, r3, #8
    812c:	b2da      	uxtb	r2, r3
    812e:	4b1a      	ldr	r3, [pc, #104]	; (8198 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8130:	0011      	movs	r1, r2
    8132:	0018      	movs	r0, r3
    8134:	f003 fbca 	bl	b8cc <_ZN8SPIClass8transferEh>
    8138:	693b      	ldr	r3, [r7, #16]
    813a:	b2da      	uxtb	r2, r3
    813c:	4b16      	ldr	r3, [pc, #88]	; (8198 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    813e:	0011      	movs	r1, r2
    8140:	0018      	movs	r0, r3
    8142:	f003 fbc3 	bl	b8cc <_ZN8SPIClass8transferEh>
    8146:	e01e      	b.n	8186 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x17a>
    8148:	693b      	ldr	r3, [r7, #16]
    814a:	0e1b      	lsrs	r3, r3, #24
    814c:	b2da      	uxtb	r2, r3
    814e:	68fb      	ldr	r3, [r7, #12]
    8150:	0011      	movs	r1, r2
    8152:	0018      	movs	r0, r3
    8154:	f7ff fe96 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    8158:	693b      	ldr	r3, [r7, #16]
    815a:	0c1b      	lsrs	r3, r3, #16
    815c:	b2da      	uxtb	r2, r3
    815e:	68fb      	ldr	r3, [r7, #12]
    8160:	0011      	movs	r1, r2
    8162:	0018      	movs	r0, r3
    8164:	f7ff fe8e 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    8168:	693b      	ldr	r3, [r7, #16]
    816a:	0a1b      	lsrs	r3, r3, #8
    816c:	b2da      	uxtb	r2, r3
    816e:	68fb      	ldr	r3, [r7, #12]
    8170:	0011      	movs	r1, r2
    8172:	0018      	movs	r0, r3
    8174:	f7ff fe86 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    8178:	693b      	ldr	r3, [r7, #16]
    817a:	b2da      	uxtb	r2, r3
    817c:	68fb      	ldr	r3, [r7, #12]
    817e:	0011      	movs	r1, r2
    8180:	0018      	movs	r0, r3
    8182:	f7ff fe7f 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_RAMWR); // write to RAM
    8186:	68fb      	ldr	r3, [r7, #12]
    8188:	212c      	movs	r1, #44	; 0x2c
    818a:	0018      	movs	r0, r3
    818c:	f7ff ff18 	bl	7fc0 <_ZN16Adafruit_ILI934112writeCommandEh>
}
    8190:	46c0      	nop			; (mov r8, r8)
    8192:	46bd      	mov	sp, r7
    8194:	b007      	add	sp, #28
    8196:	bd90      	pop	{r4, r7, pc}
    8198:	20000b7c 	.word	0x20000b7c

0000819c <_ZN16Adafruit_ILI934110writePixelEt>:
void Adafruit_ILI9341::pushColor(uint16_t color) {
  SPI_WRITE16(color);
}


void Adafruit_ILI9341::writePixel(uint16_t color){
    819c:	b580      	push	{r7, lr}
    819e:	b082      	sub	sp, #8
    81a0:	af00      	add	r7, sp, #0
    81a2:	6078      	str	r0, [r7, #4]
    81a4:	000a      	movs	r2, r1
    81a6:	1cbb      	adds	r3, r7, #2
    81a8:	801a      	strh	r2, [r3, #0]
    SPI_WRITE16(color);
    81aa:	687b      	ldr	r3, [r7, #4]
    81ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    81ae:	2b00      	cmp	r3, #0
    81b0:	da11      	bge.n	81d6 <_ZN16Adafruit_ILI934110writePixelEt+0x3a>
    81b2:	1cbb      	adds	r3, r7, #2
    81b4:	881b      	ldrh	r3, [r3, #0]
    81b6:	121b      	asrs	r3, r3, #8
    81b8:	b2da      	uxtb	r2, r3
    81ba:	4b11      	ldr	r3, [pc, #68]	; (8200 <_ZN16Adafruit_ILI934110writePixelEt+0x64>)
    81bc:	0011      	movs	r1, r2
    81be:	0018      	movs	r0, r3
    81c0:	f003 fb84 	bl	b8cc <_ZN8SPIClass8transferEh>
    81c4:	1cbb      	adds	r3, r7, #2
    81c6:	881b      	ldrh	r3, [r3, #0]
    81c8:	b2da      	uxtb	r2, r3
    81ca:	4b0d      	ldr	r3, [pc, #52]	; (8200 <_ZN16Adafruit_ILI934110writePixelEt+0x64>)
    81cc:	0011      	movs	r1, r2
    81ce:	0018      	movs	r0, r3
    81d0:	f003 fb7c 	bl	b8cc <_ZN8SPIClass8transferEh>
}
    81d4:	e010      	b.n	81f8 <_ZN16Adafruit_ILI934110writePixelEt+0x5c>
    SPI_WRITE16(color);
    81d6:	1cbb      	adds	r3, r7, #2
    81d8:	881b      	ldrh	r3, [r3, #0]
    81da:	121b      	asrs	r3, r3, #8
    81dc:	b2da      	uxtb	r2, r3
    81de:	687b      	ldr	r3, [r7, #4]
    81e0:	0011      	movs	r1, r2
    81e2:	0018      	movs	r0, r3
    81e4:	f7ff fe4e 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    81e8:	1cbb      	adds	r3, r7, #2
    81ea:	881b      	ldrh	r3, [r3, #0]
    81ec:	b2da      	uxtb	r2, r3
    81ee:	687b      	ldr	r3, [r7, #4]
    81f0:	0011      	movs	r1, r2
    81f2:	0018      	movs	r0, r3
    81f4:	f7ff fe46 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
}
    81f8:	46c0      	nop			; (mov r8, r8)
    81fa:	46bd      	mov	sp, r7
    81fc:	b002      	add	sp, #8
    81fe:	bd80      	pop	{r7, pc}
    8200:	20000b7c 	.word	0x20000b7c

00008204 <_ZN16Adafruit_ILI934110writeColorEtm>:

void Adafruit_ILI9341::writePixels(uint16_t * colors, uint32_t len){
    SPI_WRITE_PIXELS((uint8_t*)colors , len * 2);
}

void Adafruit_ILI9341::writeColor(uint16_t color, uint32_t len){
    8204:	b580      	push	{r7, lr}
    8206:	b088      	sub	sp, #32
    8208:	af00      	add	r7, sp, #0
    820a:	60f8      	str	r0, [r7, #12]
    820c:	607a      	str	r2, [r7, #4]
    820e:	230a      	movs	r3, #10
    8210:	18fb      	adds	r3, r7, r3
    8212:	1c0a      	adds	r2, r1, #0
    8214:	801a      	strh	r2, [r3, #0]
        tlen = (len>blen)?blen:len;
        writePixels(temp, tlen);
        len -= tlen;
    }
#else
    uint8_t hi = color >> 8, lo = color;
    8216:	230a      	movs	r3, #10
    8218:	18fb      	adds	r3, r7, r3
    821a:	881b      	ldrh	r3, [r3, #0]
    821c:	121a      	asrs	r2, r3, #8
    821e:	2317      	movs	r3, #23
    8220:	18fb      	adds	r3, r7, r3
    8222:	701a      	strb	r2, [r3, #0]
    8224:	2316      	movs	r3, #22
    8226:	18fb      	adds	r3, r7, r3
    8228:	220a      	movs	r2, #10
    822a:	18ba      	adds	r2, r7, r2
    822c:	8812      	ldrh	r2, [r2, #0]
    822e:	701a      	strb	r2, [r3, #0]
    if(_sclk < 0){ //AVR Optimization
    8230:	68fb      	ldr	r3, [r7, #12]
    8232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8234:	2b00      	cmp	r3, #0
    8236:	da18      	bge.n	826a <_ZN16Adafruit_ILI934110writeColorEtm+0x66>
        for (uint32_t t=len; t; t--){
    8238:	687b      	ldr	r3, [r7, #4]
    823a:	61fb      	str	r3, [r7, #28]
    823c:	69fb      	ldr	r3, [r7, #28]
    823e:	2b00      	cmp	r3, #0
    8240:	d02c      	beq.n	829c <_ZN16Adafruit_ILI934110writeColorEtm+0x98>
            HSPI_WRITE(hi);
    8242:	2317      	movs	r3, #23
    8244:	18fb      	adds	r3, r7, r3
    8246:	781a      	ldrb	r2, [r3, #0]
    8248:	4b16      	ldr	r3, [pc, #88]	; (82a4 <_ZN16Adafruit_ILI934110writeColorEtm+0xa0>)
    824a:	0011      	movs	r1, r2
    824c:	0018      	movs	r0, r3
    824e:	f003 fb3d 	bl	b8cc <_ZN8SPIClass8transferEh>
            HSPI_WRITE(lo);
    8252:	2316      	movs	r3, #22
    8254:	18fb      	adds	r3, r7, r3
    8256:	781a      	ldrb	r2, [r3, #0]
    8258:	4b12      	ldr	r3, [pc, #72]	; (82a4 <_ZN16Adafruit_ILI934110writeColorEtm+0xa0>)
    825a:	0011      	movs	r1, r2
    825c:	0018      	movs	r0, r3
    825e:	f003 fb35 	bl	b8cc <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    8262:	69fb      	ldr	r3, [r7, #28]
    8264:	3b01      	subs	r3, #1
    8266:	61fb      	str	r3, [r7, #28]
    8268:	e7e8      	b.n	823c <_ZN16Adafruit_ILI934110writeColorEtm+0x38>
        }
        return;
    }
    for (uint32_t t=len; t; t--){
    826a:	687b      	ldr	r3, [r7, #4]
    826c:	61bb      	str	r3, [r7, #24]
    826e:	69bb      	ldr	r3, [r7, #24]
    8270:	2b00      	cmp	r3, #0
    8272:	d014      	beq.n	829e <_ZN16Adafruit_ILI934110writeColorEtm+0x9a>
        spiWrite(hi);
    8274:	2317      	movs	r3, #23
    8276:	18fb      	adds	r3, r7, r3
    8278:	781a      	ldrb	r2, [r3, #0]
    827a:	68fb      	ldr	r3, [r7, #12]
    827c:	0011      	movs	r1, r2
    827e:	0018      	movs	r0, r3
    8280:	f7ff fe00 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
        spiWrite(lo);
    8284:	2316      	movs	r3, #22
    8286:	18fb      	adds	r3, r7, r3
    8288:	781a      	ldrb	r2, [r3, #0]
    828a:	68fb      	ldr	r3, [r7, #12]
    828c:	0011      	movs	r1, r2
    828e:	0018      	movs	r0, r3
    8290:	f7ff fdf8 	bl	7e84 <_ZN16Adafruit_ILI93418spiWriteEh>
    for (uint32_t t=len; t; t--){
    8294:	69bb      	ldr	r3, [r7, #24]
    8296:	3b01      	subs	r3, #1
    8298:	61bb      	str	r3, [r7, #24]
    829a:	e7e8      	b.n	826e <_ZN16Adafruit_ILI934110writeColorEtm+0x6a>
        return;
    829c:	46c0      	nop			; (mov r8, r8)
    }
#endif
}
    829e:	46bd      	mov	sp, r7
    82a0:	b008      	add	sp, #32
    82a2:	bd80      	pop	{r7, pc}
    82a4:	20000b7c 	.word	0x20000b7c

000082a8 <_ZN16Adafruit_ILI934110writePixelEsst>:

void Adafruit_ILI9341::writePixel(int16_t x, int16_t y, uint16_t color) {
    82a8:	b590      	push	{r4, r7, lr}
    82aa:	b087      	sub	sp, #28
    82ac:	af02      	add	r7, sp, #8
    82ae:	60f8      	str	r0, [r7, #12]
    82b0:	000c      	movs	r4, r1
    82b2:	0010      	movs	r0, r2
    82b4:	0019      	movs	r1, r3
    82b6:	230a      	movs	r3, #10
    82b8:	18fb      	adds	r3, r7, r3
    82ba:	1c22      	adds	r2, r4, #0
    82bc:	801a      	strh	r2, [r3, #0]
    82be:	2308      	movs	r3, #8
    82c0:	18fb      	adds	r3, r7, r3
    82c2:	1c02      	adds	r2, r0, #0
    82c4:	801a      	strh	r2, [r3, #0]
    82c6:	1dbb      	adds	r3, r7, #6
    82c8:	1c0a      	adds	r2, r1, #0
    82ca:	801a      	strh	r2, [r3, #0]
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    82cc:	230a      	movs	r3, #10
    82ce:	18fb      	adds	r3, r7, r3
    82d0:	2200      	movs	r2, #0
    82d2:	5e9b      	ldrsh	r3, [r3, r2]
    82d4:	2b00      	cmp	r3, #0
    82d6:	db2b      	blt.n	8330 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    82d8:	68fb      	ldr	r3, [r7, #12]
    82da:	220c      	movs	r2, #12
    82dc:	5e9b      	ldrsh	r3, [r3, r2]
    82de:	220a      	movs	r2, #10
    82e0:	18ba      	adds	r2, r7, r2
    82e2:	2100      	movs	r1, #0
    82e4:	5e52      	ldrsh	r2, [r2, r1]
    82e6:	429a      	cmp	r2, r3
    82e8:	da22      	bge.n	8330 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    82ea:	2308      	movs	r3, #8
    82ec:	18fb      	adds	r3, r7, r3
    82ee:	2200      	movs	r2, #0
    82f0:	5e9b      	ldrsh	r3, [r3, r2]
    82f2:	2b00      	cmp	r3, #0
    82f4:	db1c      	blt.n	8330 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    82f6:	68fb      	ldr	r3, [r7, #12]
    82f8:	220e      	movs	r2, #14
    82fa:	5e9b      	ldrsh	r3, [r3, r2]
    82fc:	2208      	movs	r2, #8
    82fe:	18ba      	adds	r2, r7, r2
    8300:	2100      	movs	r1, #0
    8302:	5e52      	ldrsh	r2, [r2, r1]
    8304:	429a      	cmp	r2, r3
    8306:	da13      	bge.n	8330 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    setAddrWindow(x,y,1,1);
    8308:	230a      	movs	r3, #10
    830a:	18fb      	adds	r3, r7, r3
    830c:	8819      	ldrh	r1, [r3, #0]
    830e:	2308      	movs	r3, #8
    8310:	18fb      	adds	r3, r7, r3
    8312:	881a      	ldrh	r2, [r3, #0]
    8314:	68f8      	ldr	r0, [r7, #12]
    8316:	2301      	movs	r3, #1
    8318:	9300      	str	r3, [sp, #0]
    831a:	2301      	movs	r3, #1
    831c:	f7ff fe76 	bl	800c <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    writePixel(color);
    8320:	1dbb      	adds	r3, r7, #6
    8322:	881a      	ldrh	r2, [r3, #0]
    8324:	68fb      	ldr	r3, [r7, #12]
    8326:	0011      	movs	r1, r2
    8328:	0018      	movs	r0, r3
    832a:	f7ff ff37 	bl	819c <_ZN16Adafruit_ILI934110writePixelEt>
    832e:	e000      	b.n	8332 <_ZN16Adafruit_ILI934110writePixelEsst+0x8a>
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    8330:	46c0      	nop			; (mov r8, r8)
}
    8332:	46bd      	mov	sp, r7
    8334:	b005      	add	sp, #20
    8336:	bd90      	pop	{r4, r7, pc}

00008338 <_ZN16Adafruit_ILI934113writeFillRectEsssst>:

void Adafruit_ILI9341::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
    8338:	b590      	push	{r4, r7, lr}
    833a:	b089      	sub	sp, #36	; 0x24
    833c:	af02      	add	r7, sp, #8
    833e:	60f8      	str	r0, [r7, #12]
    8340:	000c      	movs	r4, r1
    8342:	0010      	movs	r0, r2
    8344:	0019      	movs	r1, r3
    8346:	230a      	movs	r3, #10
    8348:	18fb      	adds	r3, r7, r3
    834a:	1c22      	adds	r2, r4, #0
    834c:	801a      	strh	r2, [r3, #0]
    834e:	2308      	movs	r3, #8
    8350:	18fb      	adds	r3, r7, r3
    8352:	1c02      	adds	r2, r0, #0
    8354:	801a      	strh	r2, [r3, #0]
    8356:	1dbb      	adds	r3, r7, #6
    8358:	1c0a      	adds	r2, r1, #0
    835a:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
    835c:	68fb      	ldr	r3, [r7, #12]
    835e:	220c      	movs	r2, #12
    8360:	5e9b      	ldrsh	r3, [r3, r2]
    8362:	220a      	movs	r2, #10
    8364:	18ba      	adds	r2, r7, r2
    8366:	2100      	movs	r1, #0
    8368:	5e52      	ldrsh	r2, [r2, r1]
    836a:	429a      	cmp	r2, r3
    836c:	db00      	blt.n	8370 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x38>
    836e:	e09e      	b.n	84ae <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x176>
    8370:	68fb      	ldr	r3, [r7, #12]
    8372:	220e      	movs	r2, #14
    8374:	5e9b      	ldrsh	r3, [r3, r2]
    8376:	2208      	movs	r2, #8
    8378:	18ba      	adds	r2, r7, r2
    837a:	2100      	movs	r1, #0
    837c:	5e52      	ldrsh	r2, [r2, r1]
    837e:	429a      	cmp	r2, r3
    8380:	db00      	blt.n	8384 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x4c>
    8382:	e094      	b.n	84ae <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x176>
    int16_t x2 = x + w - 1, y2 = y + h - 1;
    8384:	230a      	movs	r3, #10
    8386:	18fb      	adds	r3, r7, r3
    8388:	881a      	ldrh	r2, [r3, #0]
    838a:	1dbb      	adds	r3, r7, #6
    838c:	881b      	ldrh	r3, [r3, #0]
    838e:	18d3      	adds	r3, r2, r3
    8390:	b29b      	uxth	r3, r3
    8392:	3b01      	subs	r3, #1
    8394:	b29a      	uxth	r2, r3
    8396:	2316      	movs	r3, #22
    8398:	18fb      	adds	r3, r7, r3
    839a:	801a      	strh	r2, [r3, #0]
    839c:	2308      	movs	r3, #8
    839e:	18fb      	adds	r3, r7, r3
    83a0:	881a      	ldrh	r2, [r3, #0]
    83a2:	2328      	movs	r3, #40	; 0x28
    83a4:	18fb      	adds	r3, r7, r3
    83a6:	881b      	ldrh	r3, [r3, #0]
    83a8:	18d3      	adds	r3, r2, r3
    83aa:	b29b      	uxth	r3, r3
    83ac:	3b01      	subs	r3, #1
    83ae:	b29a      	uxth	r2, r3
    83b0:	2314      	movs	r3, #20
    83b2:	18fb      	adds	r3, r7, r3
    83b4:	801a      	strh	r2, [r3, #0]
    if((x2 < 0) || (y2 < 0)) return;
    83b6:	2316      	movs	r3, #22
    83b8:	18fb      	adds	r3, r7, r3
    83ba:	2200      	movs	r2, #0
    83bc:	5e9b      	ldrsh	r3, [r3, r2]
    83be:	2b00      	cmp	r3, #0
    83c0:	da00      	bge.n	83c4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x8c>
    83c2:	e076      	b.n	84b2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17a>
    83c4:	2314      	movs	r3, #20
    83c6:	18fb      	adds	r3, r7, r3
    83c8:	2200      	movs	r2, #0
    83ca:	5e9b      	ldrsh	r3, [r3, r2]
    83cc:	2b00      	cmp	r3, #0
    83ce:	da00      	bge.n	83d2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x9a>
    83d0:	e06f      	b.n	84b2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17a>

    // Clip left/top
    if(x < 0) {
    83d2:	230a      	movs	r3, #10
    83d4:	18fb      	adds	r3, r7, r3
    83d6:	2200      	movs	r2, #0
    83d8:	5e9b      	ldrsh	r3, [r3, r2]
    83da:	2b00      	cmp	r3, #0
    83dc:	da0a      	bge.n	83f4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0xbc>
        x = 0;
    83de:	230a      	movs	r3, #10
    83e0:	18fb      	adds	r3, r7, r3
    83e2:	2200      	movs	r2, #0
    83e4:	801a      	strh	r2, [r3, #0]
        w = x2 + 1;
    83e6:	2316      	movs	r3, #22
    83e8:	18fb      	adds	r3, r7, r3
    83ea:	881b      	ldrh	r3, [r3, #0]
    83ec:	3301      	adds	r3, #1
    83ee:	b29a      	uxth	r2, r3
    83f0:	1dbb      	adds	r3, r7, #6
    83f2:	801a      	strh	r2, [r3, #0]
    }
    if(y < 0) {
    83f4:	2308      	movs	r3, #8
    83f6:	18fb      	adds	r3, r7, r3
    83f8:	2200      	movs	r2, #0
    83fa:	5e9b      	ldrsh	r3, [r3, r2]
    83fc:	2b00      	cmp	r3, #0
    83fe:	da0b      	bge.n	8418 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0xe0>
        y = 0;
    8400:	2308      	movs	r3, #8
    8402:	18fb      	adds	r3, r7, r3
    8404:	2200      	movs	r2, #0
    8406:	801a      	strh	r2, [r3, #0]
        h = y2 + 1;
    8408:	2314      	movs	r3, #20
    840a:	18fb      	adds	r3, r7, r3
    840c:	881b      	ldrh	r3, [r3, #0]
    840e:	3301      	adds	r3, #1
    8410:	b29a      	uxth	r2, r3
    8412:	2328      	movs	r3, #40	; 0x28
    8414:	18fb      	adds	r3, r7, r3
    8416:	801a      	strh	r2, [r3, #0]
    }

    // Clip right/bottom
    if(x2 >= _width)  w = _width  - x;
    8418:	68fb      	ldr	r3, [r7, #12]
    841a:	220c      	movs	r2, #12
    841c:	5e9b      	ldrsh	r3, [r3, r2]
    841e:	2216      	movs	r2, #22
    8420:	18ba      	adds	r2, r7, r2
    8422:	2100      	movs	r1, #0
    8424:	5e52      	ldrsh	r2, [r2, r1]
    8426:	429a      	cmp	r2, r3
    8428:	db0a      	blt.n	8440 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x108>
    842a:	68fb      	ldr	r3, [r7, #12]
    842c:	220c      	movs	r2, #12
    842e:	5e9b      	ldrsh	r3, [r3, r2]
    8430:	b29a      	uxth	r2, r3
    8432:	230a      	movs	r3, #10
    8434:	18fb      	adds	r3, r7, r3
    8436:	881b      	ldrh	r3, [r3, #0]
    8438:	1ad3      	subs	r3, r2, r3
    843a:	b29a      	uxth	r2, r3
    843c:	1dbb      	adds	r3, r7, #6
    843e:	801a      	strh	r2, [r3, #0]
    if(y2 >= _height) h = _height - y;
    8440:	68fb      	ldr	r3, [r7, #12]
    8442:	220e      	movs	r2, #14
    8444:	5e9b      	ldrsh	r3, [r3, r2]
    8446:	2214      	movs	r2, #20
    8448:	18ba      	adds	r2, r7, r2
    844a:	2100      	movs	r1, #0
    844c:	5e52      	ldrsh	r2, [r2, r1]
    844e:	429a      	cmp	r2, r3
    8450:	db0b      	blt.n	846a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x132>
    8452:	68fb      	ldr	r3, [r7, #12]
    8454:	220e      	movs	r2, #14
    8456:	5e9b      	ldrsh	r3, [r3, r2]
    8458:	b29a      	uxth	r2, r3
    845a:	2308      	movs	r3, #8
    845c:	18fb      	adds	r3, r7, r3
    845e:	881b      	ldrh	r3, [r3, #0]
    8460:	1ad3      	subs	r3, r2, r3
    8462:	b29a      	uxth	r2, r3
    8464:	2328      	movs	r3, #40	; 0x28
    8466:	18fb      	adds	r3, r7, r3
    8468:	801a      	strh	r2, [r3, #0]

    int32_t len = (int32_t)w * h;
    846a:	1dbb      	adds	r3, r7, #6
    846c:	2200      	movs	r2, #0
    846e:	5e9b      	ldrsh	r3, [r3, r2]
    8470:	2228      	movs	r2, #40	; 0x28
    8472:	18ba      	adds	r2, r7, r2
    8474:	2100      	movs	r1, #0
    8476:	5e52      	ldrsh	r2, [r2, r1]
    8478:	4353      	muls	r3, r2
    847a:	613b      	str	r3, [r7, #16]
    setAddrWindow(x, y, w, h);
    847c:	230a      	movs	r3, #10
    847e:	18fb      	adds	r3, r7, r3
    8480:	8819      	ldrh	r1, [r3, #0]
    8482:	2308      	movs	r3, #8
    8484:	18fb      	adds	r3, r7, r3
    8486:	881a      	ldrh	r2, [r3, #0]
    8488:	1dbb      	adds	r3, r7, #6
    848a:	881c      	ldrh	r4, [r3, #0]
    848c:	2328      	movs	r3, #40	; 0x28
    848e:	18fb      	adds	r3, r7, r3
    8490:	881b      	ldrh	r3, [r3, #0]
    8492:	68f8      	ldr	r0, [r7, #12]
    8494:	9300      	str	r3, [sp, #0]
    8496:	0023      	movs	r3, r4
    8498:	f7ff fdb8 	bl	800c <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    writeColor(color, len);
    849c:	693a      	ldr	r2, [r7, #16]
    849e:	232c      	movs	r3, #44	; 0x2c
    84a0:	18fb      	adds	r3, r7, r3
    84a2:	8819      	ldrh	r1, [r3, #0]
    84a4:	68fb      	ldr	r3, [r7, #12]
    84a6:	0018      	movs	r0, r3
    84a8:	f7ff feac 	bl	8204 <_ZN16Adafruit_ILI934110writeColorEtm>
    84ac:	e002      	b.n	84b4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17c>
    if((x >= _width) || (y >= _height)) return;
    84ae:	46c0      	nop			; (mov r8, r8)
    84b0:	e000      	b.n	84b4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17c>
    if((x2 < 0) || (y2 < 0)) return;
    84b2:	46c0      	nop			; (mov r8, r8)
}
    84b4:	46bd      	mov	sp, r7
    84b6:	b007      	add	sp, #28
    84b8:	bd90      	pop	{r4, r7, pc}

000084ba <_ZN16Adafruit_ILI934114writeFastVLineEssst>:

void Adafruit_ILI9341::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color){
    84ba:	b5b0      	push	{r4, r5, r7, lr}
    84bc:	b086      	sub	sp, #24
    84be:	af02      	add	r7, sp, #8
    84c0:	60f8      	str	r0, [r7, #12]
    84c2:	000c      	movs	r4, r1
    84c4:	0010      	movs	r0, r2
    84c6:	0019      	movs	r1, r3
    84c8:	230a      	movs	r3, #10
    84ca:	18fb      	adds	r3, r7, r3
    84cc:	1c22      	adds	r2, r4, #0
    84ce:	801a      	strh	r2, [r3, #0]
    84d0:	2308      	movs	r3, #8
    84d2:	18fb      	adds	r3, r7, r3
    84d4:	1c02      	adds	r2, r0, #0
    84d6:	801a      	strh	r2, [r3, #0]
    84d8:	1dbb      	adds	r3, r7, #6
    84da:	1c0a      	adds	r2, r1, #0
    84dc:	801a      	strh	r2, [r3, #0]
    writeFillRect(x, y, 1, h, color);
    84de:	68fb      	ldr	r3, [r7, #12]
    84e0:	681b      	ldr	r3, [r3, #0]
    84e2:	331c      	adds	r3, #28
    84e4:	681c      	ldr	r4, [r3, #0]
    84e6:	2308      	movs	r3, #8
    84e8:	18fb      	adds	r3, r7, r3
    84ea:	2200      	movs	r2, #0
    84ec:	5e9a      	ldrsh	r2, [r3, r2]
    84ee:	230a      	movs	r3, #10
    84f0:	18fb      	adds	r3, r7, r3
    84f2:	2100      	movs	r1, #0
    84f4:	5e59      	ldrsh	r1, [r3, r1]
    84f6:	68f8      	ldr	r0, [r7, #12]
    84f8:	2320      	movs	r3, #32
    84fa:	18fb      	adds	r3, r7, r3
    84fc:	881b      	ldrh	r3, [r3, #0]
    84fe:	9301      	str	r3, [sp, #4]
    8500:	1dbb      	adds	r3, r7, #6
    8502:	2500      	movs	r5, #0
    8504:	5f5b      	ldrsh	r3, [r3, r5]
    8506:	9300      	str	r3, [sp, #0]
    8508:	2301      	movs	r3, #1
    850a:	47a0      	blx	r4
}
    850c:	46c0      	nop			; (mov r8, r8)
    850e:	46bd      	mov	sp, r7
    8510:	b004      	add	sp, #16
    8512:	bdb0      	pop	{r4, r5, r7, pc}

00008514 <_ZN16Adafruit_ILI934114writeFastHLineEssst>:

void Adafruit_ILI9341::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color){
    8514:	b5b0      	push	{r4, r5, r7, lr}
    8516:	b086      	sub	sp, #24
    8518:	af02      	add	r7, sp, #8
    851a:	60f8      	str	r0, [r7, #12]
    851c:	000c      	movs	r4, r1
    851e:	0010      	movs	r0, r2
    8520:	0019      	movs	r1, r3
    8522:	230a      	movs	r3, #10
    8524:	18fb      	adds	r3, r7, r3
    8526:	1c22      	adds	r2, r4, #0
    8528:	801a      	strh	r2, [r3, #0]
    852a:	2308      	movs	r3, #8
    852c:	18fb      	adds	r3, r7, r3
    852e:	1c02      	adds	r2, r0, #0
    8530:	801a      	strh	r2, [r3, #0]
    8532:	1dbb      	adds	r3, r7, #6
    8534:	1c0a      	adds	r2, r1, #0
    8536:	801a      	strh	r2, [r3, #0]
    writeFillRect(x, y, w, 1, color);
    8538:	68fb      	ldr	r3, [r7, #12]
    853a:	681b      	ldr	r3, [r3, #0]
    853c:	331c      	adds	r3, #28
    853e:	681c      	ldr	r4, [r3, #0]
    8540:	1dbb      	adds	r3, r7, #6
    8542:	2500      	movs	r5, #0
    8544:	5f5d      	ldrsh	r5, [r3, r5]
    8546:	2308      	movs	r3, #8
    8548:	18fb      	adds	r3, r7, r3
    854a:	2200      	movs	r2, #0
    854c:	5e9a      	ldrsh	r2, [r3, r2]
    854e:	230a      	movs	r3, #10
    8550:	18fb      	adds	r3, r7, r3
    8552:	2100      	movs	r1, #0
    8554:	5e59      	ldrsh	r1, [r3, r1]
    8556:	68f8      	ldr	r0, [r7, #12]
    8558:	2320      	movs	r3, #32
    855a:	18fb      	adds	r3, r7, r3
    855c:	881b      	ldrh	r3, [r3, #0]
    855e:	9301      	str	r3, [sp, #4]
    8560:	2301      	movs	r3, #1
    8562:	9300      	str	r3, [sp, #0]
    8564:	002b      	movs	r3, r5
    8566:	47a0      	blx	r4
}
    8568:	46c0      	nop			; (mov r8, r8)
    856a:	46bd      	mov	sp, r7
    856c:	b004      	add	sp, #16
    856e:	bdb0      	pop	{r4, r5, r7, pc}

00008570 <_ZN16Adafruit_ILI93419drawPixelEsst>:
    endWrite();
    _freq = freq;
    return r;
}

void Adafruit_ILI9341::drawPixel(int16_t x, int16_t y, uint16_t color){
    8570:	b5b0      	push	{r4, r5, r7, lr}
    8572:	b084      	sub	sp, #16
    8574:	af00      	add	r7, sp, #0
    8576:	60f8      	str	r0, [r7, #12]
    8578:	000c      	movs	r4, r1
    857a:	0010      	movs	r0, r2
    857c:	0019      	movs	r1, r3
    857e:	230a      	movs	r3, #10
    8580:	18fb      	adds	r3, r7, r3
    8582:	1c22      	adds	r2, r4, #0
    8584:	801a      	strh	r2, [r3, #0]
    8586:	2308      	movs	r3, #8
    8588:	18fb      	adds	r3, r7, r3
    858a:	1c02      	adds	r2, r0, #0
    858c:	801a      	strh	r2, [r3, #0]
    858e:	1dbb      	adds	r3, r7, #6
    8590:	1c0a      	adds	r2, r1, #0
    8592:	801a      	strh	r2, [r3, #0]
    startWrite();
    8594:	68fb      	ldr	r3, [r7, #12]
    8596:	681b      	ldr	r3, [r3, #0]
    8598:	3314      	adds	r3, #20
    859a:	681b      	ldr	r3, [r3, #0]
    859c:	68fa      	ldr	r2, [r7, #12]
    859e:	0010      	movs	r0, r2
    85a0:	4798      	blx	r3
    writePixel(x, y, color);
    85a2:	68fb      	ldr	r3, [r7, #12]
    85a4:	681b      	ldr	r3, [r3, #0]
    85a6:	3318      	adds	r3, #24
    85a8:	681c      	ldr	r4, [r3, #0]
    85aa:	1dbb      	adds	r3, r7, #6
    85ac:	881d      	ldrh	r5, [r3, #0]
    85ae:	2308      	movs	r3, #8
    85b0:	18fb      	adds	r3, r7, r3
    85b2:	2200      	movs	r2, #0
    85b4:	5e9a      	ldrsh	r2, [r3, r2]
    85b6:	230a      	movs	r3, #10
    85b8:	18fb      	adds	r3, r7, r3
    85ba:	2100      	movs	r1, #0
    85bc:	5e59      	ldrsh	r1, [r3, r1]
    85be:	68f8      	ldr	r0, [r7, #12]
    85c0:	002b      	movs	r3, r5
    85c2:	47a0      	blx	r4
    endWrite();
    85c4:	68fb      	ldr	r3, [r7, #12]
    85c6:	681b      	ldr	r3, [r3, #0]
    85c8:	332c      	adds	r3, #44	; 0x2c
    85ca:	681b      	ldr	r3, [r3, #0]
    85cc:	68fa      	ldr	r2, [r7, #12]
    85ce:	0010      	movs	r0, r2
    85d0:	4798      	blx	r3
}
    85d2:	46c0      	nop			; (mov r8, r8)
    85d4:	46bd      	mov	sp, r7
    85d6:	b004      	add	sp, #16
    85d8:	bdb0      	pop	{r4, r5, r7, pc}

000085da <_ZN16Adafruit_ILI934113drawFastVLineEssst>:

void Adafruit_ILI9341::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    85da:	b5b0      	push	{r4, r5, r7, lr}
    85dc:	b086      	sub	sp, #24
    85de:	af02      	add	r7, sp, #8
    85e0:	60f8      	str	r0, [r7, #12]
    85e2:	000c      	movs	r4, r1
    85e4:	0010      	movs	r0, r2
    85e6:	0019      	movs	r1, r3
    85e8:	230a      	movs	r3, #10
    85ea:	18fb      	adds	r3, r7, r3
    85ec:	1c22      	adds	r2, r4, #0
    85ee:	801a      	strh	r2, [r3, #0]
    85f0:	2308      	movs	r3, #8
    85f2:	18fb      	adds	r3, r7, r3
    85f4:	1c02      	adds	r2, r0, #0
    85f6:	801a      	strh	r2, [r3, #0]
    85f8:	1dbb      	adds	r3, r7, #6
    85fa:	1c0a      	adds	r2, r1, #0
    85fc:	801a      	strh	r2, [r3, #0]
    startWrite();
    85fe:	68fb      	ldr	r3, [r7, #12]
    8600:	681b      	ldr	r3, [r3, #0]
    8602:	3314      	adds	r3, #20
    8604:	681b      	ldr	r3, [r3, #0]
    8606:	68fa      	ldr	r2, [r7, #12]
    8608:	0010      	movs	r0, r2
    860a:	4798      	blx	r3
    writeFastVLine(x, y, h, color);
    860c:	68fb      	ldr	r3, [r7, #12]
    860e:	681b      	ldr	r3, [r3, #0]
    8610:	3320      	adds	r3, #32
    8612:	681c      	ldr	r4, [r3, #0]
    8614:	1dbb      	adds	r3, r7, #6
    8616:	2500      	movs	r5, #0
    8618:	5f5d      	ldrsh	r5, [r3, r5]
    861a:	2308      	movs	r3, #8
    861c:	18fb      	adds	r3, r7, r3
    861e:	2200      	movs	r2, #0
    8620:	5e9a      	ldrsh	r2, [r3, r2]
    8622:	230a      	movs	r3, #10
    8624:	18fb      	adds	r3, r7, r3
    8626:	2100      	movs	r1, #0
    8628:	5e59      	ldrsh	r1, [r3, r1]
    862a:	68f8      	ldr	r0, [r7, #12]
    862c:	2320      	movs	r3, #32
    862e:	18fb      	adds	r3, r7, r3
    8630:	881b      	ldrh	r3, [r3, #0]
    8632:	9300      	str	r3, [sp, #0]
    8634:	002b      	movs	r3, r5
    8636:	47a0      	blx	r4
    endWrite();
    8638:	68fb      	ldr	r3, [r7, #12]
    863a:	681b      	ldr	r3, [r3, #0]
    863c:	332c      	adds	r3, #44	; 0x2c
    863e:	681b      	ldr	r3, [r3, #0]
    8640:	68fa      	ldr	r2, [r7, #12]
    8642:	0010      	movs	r0, r2
    8644:	4798      	blx	r3
}
    8646:	46c0      	nop			; (mov r8, r8)
    8648:	46bd      	mov	sp, r7
    864a:	b004      	add	sp, #16
    864c:	bdb0      	pop	{r4, r5, r7, pc}

0000864e <_ZN16Adafruit_ILI934113drawFastHLineEssst>:

void Adafruit_ILI9341::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    864e:	b5b0      	push	{r4, r5, r7, lr}
    8650:	b086      	sub	sp, #24
    8652:	af02      	add	r7, sp, #8
    8654:	60f8      	str	r0, [r7, #12]
    8656:	000c      	movs	r4, r1
    8658:	0010      	movs	r0, r2
    865a:	0019      	movs	r1, r3
    865c:	230a      	movs	r3, #10
    865e:	18fb      	adds	r3, r7, r3
    8660:	1c22      	adds	r2, r4, #0
    8662:	801a      	strh	r2, [r3, #0]
    8664:	2308      	movs	r3, #8
    8666:	18fb      	adds	r3, r7, r3
    8668:	1c02      	adds	r2, r0, #0
    866a:	801a      	strh	r2, [r3, #0]
    866c:	1dbb      	adds	r3, r7, #6
    866e:	1c0a      	adds	r2, r1, #0
    8670:	801a      	strh	r2, [r3, #0]
    startWrite();
    8672:	68fb      	ldr	r3, [r7, #12]
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	3314      	adds	r3, #20
    8678:	681b      	ldr	r3, [r3, #0]
    867a:	68fa      	ldr	r2, [r7, #12]
    867c:	0010      	movs	r0, r2
    867e:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
    8680:	68fb      	ldr	r3, [r7, #12]
    8682:	681b      	ldr	r3, [r3, #0]
    8684:	3324      	adds	r3, #36	; 0x24
    8686:	681c      	ldr	r4, [r3, #0]
    8688:	1dbb      	adds	r3, r7, #6
    868a:	2500      	movs	r5, #0
    868c:	5f5d      	ldrsh	r5, [r3, r5]
    868e:	2308      	movs	r3, #8
    8690:	18fb      	adds	r3, r7, r3
    8692:	2200      	movs	r2, #0
    8694:	5e9a      	ldrsh	r2, [r3, r2]
    8696:	230a      	movs	r3, #10
    8698:	18fb      	adds	r3, r7, r3
    869a:	2100      	movs	r1, #0
    869c:	5e59      	ldrsh	r1, [r3, r1]
    869e:	68f8      	ldr	r0, [r7, #12]
    86a0:	2320      	movs	r3, #32
    86a2:	18fb      	adds	r3, r7, r3
    86a4:	881b      	ldrh	r3, [r3, #0]
    86a6:	9300      	str	r3, [sp, #0]
    86a8:	002b      	movs	r3, r5
    86aa:	47a0      	blx	r4
    endWrite();
    86ac:	68fb      	ldr	r3, [r7, #12]
    86ae:	681b      	ldr	r3, [r3, #0]
    86b0:	332c      	adds	r3, #44	; 0x2c
    86b2:	681b      	ldr	r3, [r3, #0]
    86b4:	68fa      	ldr	r2, [r7, #12]
    86b6:	0010      	movs	r0, r2
    86b8:	4798      	blx	r3
}
    86ba:	46c0      	nop			; (mov r8, r8)
    86bc:	46bd      	mov	sp, r7
    86be:	b004      	add	sp, #16
    86c0:	bdb0      	pop	{r4, r5, r7, pc}

000086c2 <_ZN16Adafruit_ILI93418fillRectEsssst>:

void Adafruit_ILI9341::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    86c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    86c4:	b087      	sub	sp, #28
    86c6:	af02      	add	r7, sp, #8
    86c8:	60f8      	str	r0, [r7, #12]
    86ca:	000c      	movs	r4, r1
    86cc:	0010      	movs	r0, r2
    86ce:	0019      	movs	r1, r3
    86d0:	230a      	movs	r3, #10
    86d2:	18fb      	adds	r3, r7, r3
    86d4:	1c22      	adds	r2, r4, #0
    86d6:	801a      	strh	r2, [r3, #0]
    86d8:	2308      	movs	r3, #8
    86da:	18fb      	adds	r3, r7, r3
    86dc:	1c02      	adds	r2, r0, #0
    86de:	801a      	strh	r2, [r3, #0]
    86e0:	1dbb      	adds	r3, r7, #6
    86e2:	1c0a      	adds	r2, r1, #0
    86e4:	801a      	strh	r2, [r3, #0]
    startWrite();
    86e6:	68fb      	ldr	r3, [r7, #12]
    86e8:	681b      	ldr	r3, [r3, #0]
    86ea:	3314      	adds	r3, #20
    86ec:	681b      	ldr	r3, [r3, #0]
    86ee:	68fa      	ldr	r2, [r7, #12]
    86f0:	0010      	movs	r0, r2
    86f2:	4798      	blx	r3
    writeFillRect(x,y,w,h,color);
    86f4:	68fb      	ldr	r3, [r7, #12]
    86f6:	681b      	ldr	r3, [r3, #0]
    86f8:	331c      	adds	r3, #28
    86fa:	681c      	ldr	r4, [r3, #0]
    86fc:	1dbb      	adds	r3, r7, #6
    86fe:	2500      	movs	r5, #0
    8700:	5f5d      	ldrsh	r5, [r3, r5]
    8702:	2308      	movs	r3, #8
    8704:	18fb      	adds	r3, r7, r3
    8706:	2200      	movs	r2, #0
    8708:	5e9a      	ldrsh	r2, [r3, r2]
    870a:	230a      	movs	r3, #10
    870c:	18fb      	adds	r3, r7, r3
    870e:	2100      	movs	r1, #0
    8710:	5e59      	ldrsh	r1, [r3, r1]
    8712:	68f8      	ldr	r0, [r7, #12]
    8714:	2324      	movs	r3, #36	; 0x24
    8716:	2608      	movs	r6, #8
    8718:	46b4      	mov	ip, r6
    871a:	44bc      	add	ip, r7
    871c:	4463      	add	r3, ip
    871e:	881b      	ldrh	r3, [r3, #0]
    8720:	9301      	str	r3, [sp, #4]
    8722:	2320      	movs	r3, #32
    8724:	2608      	movs	r6, #8
    8726:	46b4      	mov	ip, r6
    8728:	44bc      	add	ip, r7
    872a:	4463      	add	r3, ip
    872c:	2600      	movs	r6, #0
    872e:	5f9b      	ldrsh	r3, [r3, r6]
    8730:	9300      	str	r3, [sp, #0]
    8732:	002b      	movs	r3, r5
    8734:	47a0      	blx	r4
    endWrite();
    8736:	68fb      	ldr	r3, [r7, #12]
    8738:	681b      	ldr	r3, [r3, #0]
    873a:	332c      	adds	r3, #44	; 0x2c
    873c:	681b      	ldr	r3, [r3, #0]
    873e:	68fa      	ldr	r2, [r7, #12]
    8740:	0010      	movs	r0, r2
    8742:	4798      	blx	r3
}
    8744:	46c0      	nop			; (mov r8, r8)
    8746:	46bd      	mov	sp, r7
    8748:	b005      	add	sp, #20
    874a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000874c <_ZN5Print13setWriteErrorEi>:
    void setWriteError(int err = 1) { write_error = err; }
    874c:	b580      	push	{r7, lr}
    874e:	b082      	sub	sp, #8
    8750:	af00      	add	r7, sp, #0
    8752:	6078      	str	r0, [r7, #4]
    8754:	6039      	str	r1, [r7, #0]
    8756:	687b      	ldr	r3, [r7, #4]
    8758:	683a      	ldr	r2, [r7, #0]
    875a:	605a      	str	r2, [r3, #4]
    875c:	46c0      	nop			; (mov r8, r8)
    875e:	46bd      	mov	sp, r7
    8760:	b002      	add	sp, #8
    8762:	bd80      	pop	{r7, pc}

00008764 <_ZN5Print13getWriteErrorEv>:
    int getWriteError() { return write_error; }
    8764:	b580      	push	{r7, lr}
    8766:	b082      	sub	sp, #8
    8768:	af00      	add	r7, sp, #0
    876a:	6078      	str	r0, [r7, #4]
    876c:	687b      	ldr	r3, [r7, #4]
    876e:	685b      	ldr	r3, [r3, #4]
    8770:	0018      	movs	r0, r3
    8772:	46bd      	mov	sp, r7
    8774:	b002      	add	sp, #8
    8776:	bd80      	pop	{r7, pc}

00008778 <_ZN5Print15clearWriteErrorEv>:
    void clearWriteError() { setWriteError(0); }
    8778:	b580      	push	{r7, lr}
    877a:	b082      	sub	sp, #8
    877c:	af00      	add	r7, sp, #0
    877e:	6078      	str	r0, [r7, #4]
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	2100      	movs	r1, #0
    8784:	0018      	movs	r0, r3
    8786:	f7ff ffe1 	bl	874c <_ZN5Print13setWriteErrorEi>
    878a:	46c0      	nop			; (mov r8, r8)
    878c:	46bd      	mov	sp, r7
    878e:	b002      	add	sp, #8
    8790:	bd80      	pop	{r7, pc}

00008792 <_ZNK6SdFile11curPositionEv>:
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    8792:	b580      	push	{r7, lr}
    8794:	b082      	sub	sp, #8
    8796:	af00      	add	r7, sp, #0
    8798:	6078      	str	r0, [r7, #4]
    879a:	687b      	ldr	r3, [r7, #4]
    879c:	691b      	ldr	r3, [r3, #16]
    879e:	0018      	movs	r0, r3
    87a0:	46bd      	mov	sp, r7
    87a2:	b002      	add	sp, #8
    87a4:	bd80      	pop	{r7, pc}

000087a6 <_ZNK6SdFile8fileSizeEv>:
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    87a6:	b580      	push	{r7, lr}
    87a8:	b082      	sub	sp, #8
    87aa:	af00      	add	r7, sp, #0
    87ac:	6078      	str	r0, [r7, #4]
    87ae:	687b      	ldr	r3, [r7, #4]
    87b0:	69db      	ldr	r3, [r3, #28]
    87b2:	0018      	movs	r0, r3
    87b4:	46bd      	mov	sp, r7
    87b6:	b002      	add	sp, #8
    87b8:	bd80      	pop	{r7, pc}

000087ba <_ZNK6SdFile5isDirEv>:
  /** \return The first cluster number for a file or directory. */
  uint32_t firstCluster(void) const {return firstCluster_;}
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    87ba:	b580      	push	{r7, lr}
    87bc:	b082      	sub	sp, #8
    87be:	af00      	add	r7, sp, #0
    87c0:	6078      	str	r0, [r7, #4]
    87c2:	687b      	ldr	r3, [r7, #4]
    87c4:	7a5b      	ldrb	r3, [r3, #9]
    87c6:	2201      	movs	r2, #1
    87c8:	2b01      	cmp	r3, #1
    87ca:	dc01      	bgt.n	87d0 <_ZNK6SdFile5isDirEv+0x16>
    87cc:	2300      	movs	r3, #0
    87ce:	1c1a      	adds	r2, r3, #0
    87d0:	b2d3      	uxtb	r3, r2
    87d2:	0018      	movs	r0, r3
    87d4:	46bd      	mov	sp, r7
    87d6:	b002      	add	sp, #8
    87d8:	bd80      	pop	{r7, pc}

000087da <_ZNK6SdFile6isOpenEv>:
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    87da:	b580      	push	{r7, lr}
    87dc:	b082      	sub	sp, #8
    87de:	af00      	add	r7, sp, #0
    87e0:	6078      	str	r0, [r7, #4]
    87e2:	687b      	ldr	r3, [r7, #4]
    87e4:	7a5b      	ldrb	r3, [r3, #9]
    87e6:	1e5a      	subs	r2, r3, #1
    87e8:	4193      	sbcs	r3, r2
    87ea:	b2db      	uxtb	r3, r3
    87ec:	0018      	movs	r0, r3
    87ee:	46bd      	mov	sp, r7
    87f0:	b002      	add	sp, #8
    87f2:	bd80      	pop	{r7, pc}

000087f4 <_ZN6SdFile4readEv>:
   * Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    87f4:	b580      	push	{r7, lr}
    87f6:	b084      	sub	sp, #16
    87f8:	af00      	add	r7, sp, #0
    87fa:	6078      	str	r0, [r7, #4]
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    87fc:	230f      	movs	r3, #15
    87fe:	18f9      	adds	r1, r7, r3
    8800:	687b      	ldr	r3, [r7, #4]
    8802:	2201      	movs	r2, #1
    8804:	0018      	movs	r0, r3
    8806:	f001 fe7f 	bl	a508 <_ZN6SdFile4readEPvt>
    880a:	0003      	movs	r3, r0
    880c:	2b01      	cmp	r3, #1
    880e:	d104      	bne.n	881a <_ZN6SdFile4readEv+0x26>
    8810:	230f      	movs	r3, #15
    8812:	18fb      	adds	r3, r7, r3
    8814:	781b      	ldrb	r3, [r3, #0]
    8816:	b21b      	sxth	r3, r3
    8818:	e001      	b.n	881e <_ZN6SdFile4readEv+0x2a>
    881a:	2301      	movs	r3, #1
    881c:	425b      	negs	r3, r3
  }
    881e:	0018      	movs	r0, r3
    8820:	46bd      	mov	sp, r7
    8822:	b004      	add	sp, #16
    8824:	bd80      	pop	{r7, pc}

00008826 <_ZN6SdFile7seekCurEm>:
    curPosition_ = curCluster_ = 0;
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    8826:	b580      	push	{r7, lr}
    8828:	b082      	sub	sp, #8
    882a:	af00      	add	r7, sp, #0
    882c:	6078      	str	r0, [r7, #4]
    882e:	6039      	str	r1, [r7, #0]
    return seekSet(curPosition_ + pos);
    8830:	687b      	ldr	r3, [r7, #4]
    8832:	691a      	ldr	r2, [r3, #16]
    8834:	683b      	ldr	r3, [r7, #0]
    8836:	18d2      	adds	r2, r2, r3
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	0011      	movs	r1, r2
    883c:	0018      	movs	r0, r3
    883e:	f001 ffc1 	bl	a7c4 <_ZN6SdFile7seekSetEm>
    8842:	0003      	movs	r3, r0
  }
    8844:	0018      	movs	r0, r3
    8846:	46bd      	mov	sp, r7
    8848:	b002      	add	sp, #8
    884a:	bd80      	pop	{r7, pc}

0000884c <_ZN5SDLib4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    884c:	b580      	push	{r7, lr}
    884e:	b084      	sub	sp, #16
    8850:	af00      	add	r7, sp, #0
    8852:	60f8      	str	r0, [r7, #12]
    8854:	60b9      	str	r1, [r7, #8]
    8856:	607a      	str	r2, [r7, #4]
    8858:	68fb      	ldr	r3, [r7, #12]
    885a:	0018      	movs	r0, r3
    885c:	f7fa fec0 	bl	35e0 <_ZN6StreamC1Ev>
    8860:	4a11      	ldr	r2, [pc, #68]	; (88a8 <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>)
    8862:	68fb      	ldr	r3, [r7, #12]
    8864:	601a      	str	r2, [r3, #0]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    8866:	2028      	movs	r0, #40	; 0x28
    8868:	f007 ff9e 	bl	107a8 <malloc>
    886c:	0003      	movs	r3, r0
    886e:	001a      	movs	r2, r3
    8870:	68fb      	ldr	r3, [r7, #12]
    8872:	621a      	str	r2, [r3, #32]
  if (_file) {
    8874:	68fb      	ldr	r3, [r7, #12]
    8876:	6a1b      	ldr	r3, [r3, #32]
    8878:	2b00      	cmp	r3, #0
    887a:	d010      	beq.n	889e <_ZN5SDLib4FileC1E6SdFilePKc+0x52>
    memcpy(_file, &f, sizeof(SdFile));
    887c:	68fb      	ldr	r3, [r7, #12]
    887e:	6a1b      	ldr	r3, [r3, #32]
    8880:	68b9      	ldr	r1, [r7, #8]
    8882:	2228      	movs	r2, #40	; 0x28
    8884:	0018      	movs	r0, r3
    8886:	f007 ffc4 	bl	10812 <memcpy>
    
    strncpy(_name, n, 12);
    888a:	68fb      	ldr	r3, [r7, #12]
    888c:	3310      	adds	r3, #16
    888e:	6879      	ldr	r1, [r7, #4]
    8890:	220c      	movs	r2, #12
    8892:	0018      	movs	r0, r3
    8894:	f008 fe63 	bl	1155e <strncpy>
    _name[12] = 0;
    8898:	68fb      	ldr	r3, [r7, #12]
    889a:	2200      	movs	r2, #0
    889c:	771a      	strb	r2, [r3, #28]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    889e:	68fb      	ldr	r3, [r7, #12]
    88a0:	0018      	movs	r0, r3
    88a2:	46bd      	mov	sp, r7
    88a4:	b004      	add	sp, #16
    88a6:	bd80      	pop	{r7, pc}
    88a8:	0001359c 	.word	0x0001359c

000088ac <_ZN5SDLib4FileC1Ev>:

File::File(void) {
    88ac:	b580      	push	{r7, lr}
    88ae:	b082      	sub	sp, #8
    88b0:	af00      	add	r7, sp, #0
    88b2:	6078      	str	r0, [r7, #4]
    88b4:	687b      	ldr	r3, [r7, #4]
    88b6:	0018      	movs	r0, r3
    88b8:	f7fa fe92 	bl	35e0 <_ZN6StreamC1Ev>
    88bc:	4a06      	ldr	r2, [pc, #24]	; (88d8 <_ZN5SDLib4FileC1Ev+0x2c>)
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	601a      	str	r2, [r3, #0]
  _file = 0;
    88c2:	687b      	ldr	r3, [r7, #4]
    88c4:	2200      	movs	r2, #0
    88c6:	621a      	str	r2, [r3, #32]
  _name[0] = 0;
    88c8:	687b      	ldr	r3, [r7, #4]
    88ca:	2200      	movs	r2, #0
    88cc:	741a      	strb	r2, [r3, #16]
  //Serial.print("Created empty file object");
}
    88ce:	687b      	ldr	r3, [r7, #4]
    88d0:	0018      	movs	r0, r3
    88d2:	46bd      	mov	sp, r7
    88d4:	b002      	add	sp, #8
    88d6:	bd80      	pop	{r7, pc}
    88d8:	0001359c 	.word	0x0001359c

000088dc <_ZN5SDLib4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    88dc:	b580      	push	{r7, lr}
    88de:	b082      	sub	sp, #8
    88e0:	af00      	add	r7, sp, #0
    88e2:	6078      	str	r0, [r7, #4]
    88e4:	000a      	movs	r2, r1
    88e6:	1cfb      	adds	r3, r7, #3
    88e8:	701a      	strb	r2, [r3, #0]
  return write(&val, 1);
    88ea:	687b      	ldr	r3, [r7, #4]
    88ec:	681b      	ldr	r3, [r3, #0]
    88ee:	3304      	adds	r3, #4
    88f0:	681b      	ldr	r3, [r3, #0]
    88f2:	1cf9      	adds	r1, r7, #3
    88f4:	6878      	ldr	r0, [r7, #4]
    88f6:	2201      	movs	r2, #1
    88f8:	4798      	blx	r3
    88fa:	0003      	movs	r3, r0
}
    88fc:	0018      	movs	r0, r3
    88fe:	46bd      	mov	sp, r7
    8900:	b002      	add	sp, #8
    8902:	bd80      	pop	{r7, pc}

00008904 <_ZN5SDLib4File5writeEPKhj>:

size_t File::write(const uint8_t *buf, size_t size) {
    8904:	b580      	push	{r7, lr}
    8906:	b086      	sub	sp, #24
    8908:	af00      	add	r7, sp, #0
    890a:	60f8      	str	r0, [r7, #12]
    890c:	60b9      	str	r1, [r7, #8]
    890e:	607a      	str	r2, [r7, #4]
  size_t t;
  if (!_file) {
    8910:	68fb      	ldr	r3, [r7, #12]
    8912:	6a1b      	ldr	r3, [r3, #32]
    8914:	2b00      	cmp	r3, #0
    8916:	d106      	bne.n	8926 <_ZN5SDLib4File5writeEPKhj+0x22>
    setWriteError();
    8918:	68fb      	ldr	r3, [r7, #12]
    891a:	2101      	movs	r1, #1
    891c:	0018      	movs	r0, r3
    891e:	f7ff ff15 	bl	874c <_ZN5Print13setWriteErrorEi>
    return 0;
    8922:	2300      	movs	r3, #0
    8924:	e021      	b.n	896a <_ZN5SDLib4File5writeEPKhj+0x66>
  }
  _file->clearWriteError();
    8926:	68fb      	ldr	r3, [r7, #12]
    8928:	6a1b      	ldr	r3, [r3, #32]
    892a:	0018      	movs	r0, r3
    892c:	f7ff ff24 	bl	8778 <_ZN5Print15clearWriteErrorEv>
  t = _file->write(buf, size);
    8930:	68fb      	ldr	r3, [r7, #12]
    8932:	6a1b      	ldr	r3, [r3, #32]
    8934:	687a      	ldr	r2, [r7, #4]
    8936:	b292      	uxth	r2, r2
    8938:	68b9      	ldr	r1, [r7, #8]
    893a:	0018      	movs	r0, r3
    893c:	f002 f924 	bl	ab88 <_ZN6SdFile5writeEPKvt>
    8940:	0003      	movs	r3, r0
    8942:	617b      	str	r3, [r7, #20]
  if (_file->getWriteError()) {
    8944:	68fb      	ldr	r3, [r7, #12]
    8946:	6a1b      	ldr	r3, [r3, #32]
    8948:	0018      	movs	r0, r3
    894a:	f7ff ff0b 	bl	8764 <_ZN5Print13getWriteErrorEv>
    894e:	0003      	movs	r3, r0
    8950:	1e5a      	subs	r2, r3, #1
    8952:	4193      	sbcs	r3, r2
    8954:	b2db      	uxtb	r3, r3
    8956:	2b00      	cmp	r3, #0
    8958:	d006      	beq.n	8968 <_ZN5SDLib4File5writeEPKhj+0x64>
    setWriteError();
    895a:	68fb      	ldr	r3, [r7, #12]
    895c:	2101      	movs	r1, #1
    895e:	0018      	movs	r0, r3
    8960:	f7ff fef4 	bl	874c <_ZN5Print13setWriteErrorEi>
    return 0;
    8964:	2300      	movs	r3, #0
    8966:	e000      	b.n	896a <_ZN5SDLib4File5writeEPKhj+0x66>
  }
  return t;
    8968:	697b      	ldr	r3, [r7, #20]
}
    896a:	0018      	movs	r0, r3
    896c:	46bd      	mov	sp, r7
    896e:	b006      	add	sp, #24
    8970:	bd80      	pop	{r7, pc}

00008972 <_ZN5SDLib4File4peekEv>:

int File::peek() {
    8972:	b580      	push	{r7, lr}
    8974:	b084      	sub	sp, #16
    8976:	af00      	add	r7, sp, #0
    8978:	6078      	str	r0, [r7, #4]
  if (! _file) 
    897a:	687b      	ldr	r3, [r7, #4]
    897c:	6a1b      	ldr	r3, [r3, #32]
    897e:	2b00      	cmp	r3, #0
    8980:	d101      	bne.n	8986 <_ZN5SDLib4File4peekEv+0x14>
    return 0;
    8982:	2300      	movs	r3, #0
    8984:	e012      	b.n	89ac <_ZN5SDLib4File4peekEv+0x3a>

  int c = _file->read();
    8986:	687b      	ldr	r3, [r7, #4]
    8988:	6a1b      	ldr	r3, [r3, #32]
    898a:	0018      	movs	r0, r3
    898c:	f7ff ff32 	bl	87f4 <_ZN6SdFile4readEv>
    8990:	0003      	movs	r3, r0
    8992:	60fb      	str	r3, [r7, #12]
  if (c != -1) _file->seekCur(-1);
    8994:	68fb      	ldr	r3, [r7, #12]
    8996:	3301      	adds	r3, #1
    8998:	d007      	beq.n	89aa <_ZN5SDLib4File4peekEv+0x38>
    899a:	687b      	ldr	r3, [r7, #4]
    899c:	6a1a      	ldr	r2, [r3, #32]
    899e:	2301      	movs	r3, #1
    89a0:	425b      	negs	r3, r3
    89a2:	0019      	movs	r1, r3
    89a4:	0010      	movs	r0, r2
    89a6:	f7ff ff3e 	bl	8826 <_ZN6SdFile7seekCurEm>
  return c;
    89aa:	68fb      	ldr	r3, [r7, #12]
}
    89ac:	0018      	movs	r0, r3
    89ae:	46bd      	mov	sp, r7
    89b0:	b004      	add	sp, #16
    89b2:	bd80      	pop	{r7, pc}

000089b4 <_ZN5SDLib4File4readEv>:

int File::read() {
    89b4:	b580      	push	{r7, lr}
    89b6:	b082      	sub	sp, #8
    89b8:	af00      	add	r7, sp, #0
    89ba:	6078      	str	r0, [r7, #4]
  if (_file) 
    89bc:	687b      	ldr	r3, [r7, #4]
    89be:	6a1b      	ldr	r3, [r3, #32]
    89c0:	2b00      	cmp	r3, #0
    89c2:	d006      	beq.n	89d2 <_ZN5SDLib4File4readEv+0x1e>
    return _file->read();
    89c4:	687b      	ldr	r3, [r7, #4]
    89c6:	6a1b      	ldr	r3, [r3, #32]
    89c8:	0018      	movs	r0, r3
    89ca:	f7ff ff13 	bl	87f4 <_ZN6SdFile4readEv>
    89ce:	0003      	movs	r3, r0
    89d0:	e001      	b.n	89d6 <_ZN5SDLib4File4readEv+0x22>
  return -1;
    89d2:	2301      	movs	r3, #1
    89d4:	425b      	negs	r3, r3
}
    89d6:	0018      	movs	r0, r3
    89d8:	46bd      	mov	sp, r7
    89da:	b002      	add	sp, #8
    89dc:	bd80      	pop	{r7, pc}

000089de <_ZN5SDLib4File4readEPvt>:

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
    89de:	b580      	push	{r7, lr}
    89e0:	b084      	sub	sp, #16
    89e2:	af00      	add	r7, sp, #0
    89e4:	60f8      	str	r0, [r7, #12]
    89e6:	60b9      	str	r1, [r7, #8]
    89e8:	1dbb      	adds	r3, r7, #6
    89ea:	801a      	strh	r2, [r3, #0]
  if (_file) 
    89ec:	68fb      	ldr	r3, [r7, #12]
    89ee:	6a1b      	ldr	r3, [r3, #32]
    89f0:	2b00      	cmp	r3, #0
    89f2:	d009      	beq.n	8a08 <_ZN5SDLib4File4readEPvt+0x2a>
    return _file->read(buf, nbyte);
    89f4:	68fb      	ldr	r3, [r7, #12]
    89f6:	6a18      	ldr	r0, [r3, #32]
    89f8:	1dbb      	adds	r3, r7, #6
    89fa:	881a      	ldrh	r2, [r3, #0]
    89fc:	68bb      	ldr	r3, [r7, #8]
    89fe:	0019      	movs	r1, r3
    8a00:	f001 fd82 	bl	a508 <_ZN6SdFile4readEPvt>
    8a04:	0003      	movs	r3, r0
    8a06:	e000      	b.n	8a0a <_ZN5SDLib4File4readEPvt+0x2c>
  return 0;
    8a08:	2300      	movs	r3, #0
}
    8a0a:	0018      	movs	r0, r3
    8a0c:	46bd      	mov	sp, r7
    8a0e:	b004      	add	sp, #16
    8a10:	bd80      	pop	{r7, pc}
	...

00008a14 <_ZN5SDLib4File9availableEv>:

int File::available() {
    8a14:	b590      	push	{r4, r7, lr}
    8a16:	b085      	sub	sp, #20
    8a18:	af00      	add	r7, sp, #0
    8a1a:	6078      	str	r0, [r7, #4]
  if (! _file) return 0;
    8a1c:	687b      	ldr	r3, [r7, #4]
    8a1e:	6a1b      	ldr	r3, [r3, #32]
    8a20:	2b00      	cmp	r3, #0
    8a22:	d101      	bne.n	8a28 <_ZN5SDLib4File9availableEv+0x14>
    8a24:	2300      	movs	r3, #0
    8a26:	e010      	b.n	8a4a <_ZN5SDLib4File9availableEv+0x36>

  uint32_t n = size() - position();
    8a28:	687b      	ldr	r3, [r7, #4]
    8a2a:	0018      	movs	r0, r3
    8a2c:	f000 f854 	bl	8ad8 <_ZN5SDLib4File4sizeEv>
    8a30:	0004      	movs	r4, r0
    8a32:	687b      	ldr	r3, [r7, #4]
    8a34:	0018      	movs	r0, r3
    8a36:	f000 f83a 	bl	8aae <_ZN5SDLib4File8positionEv>
    8a3a:	0003      	movs	r3, r0
    8a3c:	1ae3      	subs	r3, r4, r3
    8a3e:	60fb      	str	r3, [r7, #12]

  return n > 0X7FFF ? 0X7FFF : n;
    8a40:	68fb      	ldr	r3, [r7, #12]
    8a42:	4a04      	ldr	r2, [pc, #16]	; (8a54 <_ZN5SDLib4File9availableEv+0x40>)
    8a44:	4293      	cmp	r3, r2
    8a46:	d900      	bls.n	8a4a <_ZN5SDLib4File9availableEv+0x36>
    8a48:	4b02      	ldr	r3, [pc, #8]	; (8a54 <_ZN5SDLib4File9availableEv+0x40>)
}
    8a4a:	0018      	movs	r0, r3
    8a4c:	46bd      	mov	sp, r7
    8a4e:	b005      	add	sp, #20
    8a50:	bd90      	pop	{r4, r7, pc}
    8a52:	46c0      	nop			; (mov r8, r8)
    8a54:	00007fff 	.word	0x00007fff

00008a58 <_ZN5SDLib4File5flushEv>:

void File::flush() {
    8a58:	b580      	push	{r7, lr}
    8a5a:	b082      	sub	sp, #8
    8a5c:	af00      	add	r7, sp, #0
    8a5e:	6078      	str	r0, [r7, #4]
  if (_file)
    8a60:	687b      	ldr	r3, [r7, #4]
    8a62:	6a1b      	ldr	r3, [r3, #32]
    8a64:	2b00      	cmp	r3, #0
    8a66:	d004      	beq.n	8a72 <_ZN5SDLib4File5flushEv+0x1a>
    _file->sync();
    8a68:	687b      	ldr	r3, [r7, #4]
    8a6a:	6a1b      	ldr	r3, [r3, #32]
    8a6c:	0018      	movs	r0, r3
    8a6e:	f001 ff19 	bl	a8a4 <_ZN6SdFile4syncEv>
}
    8a72:	46c0      	nop			; (mov r8, r8)
    8a74:	46bd      	mov	sp, r7
    8a76:	b002      	add	sp, #8
    8a78:	bd80      	pop	{r7, pc}

00008a7a <_ZN5SDLib4File4seekEm>:

boolean File::seek(uint32_t pos) {
    8a7a:	b580      	push	{r7, lr}
    8a7c:	b082      	sub	sp, #8
    8a7e:	af00      	add	r7, sp, #0
    8a80:	6078      	str	r0, [r7, #4]
    8a82:	6039      	str	r1, [r7, #0]
  if (! _file) return false;
    8a84:	687b      	ldr	r3, [r7, #4]
    8a86:	6a1b      	ldr	r3, [r3, #32]
    8a88:	2b00      	cmp	r3, #0
    8a8a:	d101      	bne.n	8a90 <_ZN5SDLib4File4seekEm+0x16>
    8a8c:	2300      	movs	r3, #0
    8a8e:	e00a      	b.n	8aa6 <_ZN5SDLib4File4seekEm+0x2c>

  return _file->seekSet(pos);
    8a90:	687b      	ldr	r3, [r7, #4]
    8a92:	6a1b      	ldr	r3, [r3, #32]
    8a94:	683a      	ldr	r2, [r7, #0]
    8a96:	0011      	movs	r1, r2
    8a98:	0018      	movs	r0, r3
    8a9a:	f001 fe93 	bl	a7c4 <_ZN6SdFile7seekSetEm>
    8a9e:	0003      	movs	r3, r0
    8aa0:	1e5a      	subs	r2, r3, #1
    8aa2:	4193      	sbcs	r3, r2
    8aa4:	b2db      	uxtb	r3, r3
}
    8aa6:	0018      	movs	r0, r3
    8aa8:	46bd      	mov	sp, r7
    8aaa:	b002      	add	sp, #8
    8aac:	bd80      	pop	{r7, pc}

00008aae <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
    8aae:	b580      	push	{r7, lr}
    8ab0:	b082      	sub	sp, #8
    8ab2:	af00      	add	r7, sp, #0
    8ab4:	6078      	str	r0, [r7, #4]
  if (! _file) return -1;
    8ab6:	687b      	ldr	r3, [r7, #4]
    8ab8:	6a1b      	ldr	r3, [r3, #32]
    8aba:	2b00      	cmp	r3, #0
    8abc:	d102      	bne.n	8ac4 <_ZN5SDLib4File8positionEv+0x16>
    8abe:	2301      	movs	r3, #1
    8ac0:	425b      	negs	r3, r3
    8ac2:	e005      	b.n	8ad0 <_ZN5SDLib4File8positionEv+0x22>
  return _file->curPosition();
    8ac4:	687b      	ldr	r3, [r7, #4]
    8ac6:	6a1b      	ldr	r3, [r3, #32]
    8ac8:	0018      	movs	r0, r3
    8aca:	f7ff fe62 	bl	8792 <_ZNK6SdFile11curPositionEv>
    8ace:	0003      	movs	r3, r0
}
    8ad0:	0018      	movs	r0, r3
    8ad2:	46bd      	mov	sp, r7
    8ad4:	b002      	add	sp, #8
    8ad6:	bd80      	pop	{r7, pc}

00008ad8 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
    8ad8:	b580      	push	{r7, lr}
    8ada:	b082      	sub	sp, #8
    8adc:	af00      	add	r7, sp, #0
    8ade:	6078      	str	r0, [r7, #4]
  if (! _file) return 0;
    8ae0:	687b      	ldr	r3, [r7, #4]
    8ae2:	6a1b      	ldr	r3, [r3, #32]
    8ae4:	2b00      	cmp	r3, #0
    8ae6:	d101      	bne.n	8aec <_ZN5SDLib4File4sizeEv+0x14>
    8ae8:	2300      	movs	r3, #0
    8aea:	e005      	b.n	8af8 <_ZN5SDLib4File4sizeEv+0x20>
  return _file->fileSize();
    8aec:	687b      	ldr	r3, [r7, #4]
    8aee:	6a1b      	ldr	r3, [r3, #32]
    8af0:	0018      	movs	r0, r3
    8af2:	f7ff fe58 	bl	87a6 <_ZNK6SdFile8fileSizeEv>
    8af6:	0003      	movs	r3, r0
}
    8af8:	0018      	movs	r0, r3
    8afa:	46bd      	mov	sp, r7
    8afc:	b002      	add	sp, #8
    8afe:	bd80      	pop	{r7, pc}

00008b00 <_ZN5SDLib4File5closeEv>:

void File::close() {
    8b00:	b580      	push	{r7, lr}
    8b02:	b082      	sub	sp, #8
    8b04:	af00      	add	r7, sp, #0
    8b06:	6078      	str	r0, [r7, #4]
  if (_file) {
    8b08:	687b      	ldr	r3, [r7, #4]
    8b0a:	6a1b      	ldr	r3, [r3, #32]
    8b0c:	2b00      	cmp	r3, #0
    8b0e:	d00c      	beq.n	8b2a <_ZN5SDLib4File5closeEv+0x2a>
    _file->close();
    8b10:	687b      	ldr	r3, [r7, #4]
    8b12:	6a1b      	ldr	r3, [r3, #32]
    8b14:	0018      	movs	r0, r3
    8b16:	f001 f9d5 	bl	9ec4 <_ZN6SdFile5closeEv>
    free(_file); 
    8b1a:	687b      	ldr	r3, [r7, #4]
    8b1c:	6a1b      	ldr	r3, [r3, #32]
    8b1e:	0018      	movs	r0, r3
    8b20:	f007 fe4c 	bl	107bc <free>
    _file = 0;
    8b24:	687b      	ldr	r3, [r7, #4]
    8b26:	2200      	movs	r2, #0
    8b28:	621a      	str	r2, [r3, #32]
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    8b2a:	46c0      	nop			; (mov r8, r8)
    8b2c:	46bd      	mov	sp, r7
    8b2e:	b002      	add	sp, #8
    8b30:	bd80      	pop	{r7, pc}

00008b32 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
    8b32:	b580      	push	{r7, lr}
    8b34:	b082      	sub	sp, #8
    8b36:	af00      	add	r7, sp, #0
    8b38:	6078      	str	r0, [r7, #4]
  if (_file) 
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	6a1b      	ldr	r3, [r3, #32]
    8b3e:	2b00      	cmp	r3, #0
    8b40:	d009      	beq.n	8b56 <_ZN5SDLib4FilecvbEv+0x24>
    return  _file->isOpen();
    8b42:	687b      	ldr	r3, [r7, #4]
    8b44:	6a1b      	ldr	r3, [r3, #32]
    8b46:	0018      	movs	r0, r3
    8b48:	f7ff fe47 	bl	87da <_ZNK6SdFile6isOpenEv>
    8b4c:	0003      	movs	r3, r0
    8b4e:	1e5a      	subs	r2, r3, #1
    8b50:	4193      	sbcs	r3, r2
    8b52:	b2db      	uxtb	r3, r3
    8b54:	e000      	b.n	8b58 <_ZN5SDLib4FilecvbEv+0x26>
  return false;
    8b56:	2300      	movs	r3, #0
}
    8b58:	0018      	movs	r0, r3
    8b5a:	46bd      	mov	sp, r7
    8b5c:	b002      	add	sp, #8
    8b5e:	bd80      	pop	{r7, pc}

00008b60 <_ZN7Sd2CardC1Ev>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    8b60:	b580      	push	{r7, lr}
    8b62:	b082      	sub	sp, #8
    8b64:	af00      	add	r7, sp, #0
    8b66:	6078      	str	r0, [r7, #4]
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	2200      	movs	r2, #0
    8b6c:	715a      	strb	r2, [r3, #5]
    8b6e:	687b      	ldr	r3, [r7, #4]
    8b70:	2200      	movs	r2, #0
    8b72:	719a      	strb	r2, [r3, #6]
    8b74:	687b      	ldr	r3, [r7, #4]
    8b76:	2200      	movs	r2, #0
    8b78:	729a      	strb	r2, [r3, #10]
    8b7a:	687b      	ldr	r3, [r7, #4]
    8b7c:	2200      	movs	r2, #0
    8b7e:	731a      	strb	r2, [r3, #12]
    8b80:	687b      	ldr	r3, [r7, #4]
    8b82:	0018      	movs	r0, r3
    8b84:	46bd      	mov	sp, r7
    8b86:	b002      	add	sp, #8
    8b88:	bd80      	pop	{r7, pc}
	...

00008b8c <_ZN6SdFileC1Ev>:
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    8b8c:	b580      	push	{r7, lr}
    8b8e:	b082      	sub	sp, #8
    8b90:	af00      	add	r7, sp, #0
    8b92:	6078      	str	r0, [r7, #4]
    8b94:	687b      	ldr	r3, [r7, #4]
    8b96:	0018      	movs	r0, r3
    8b98:	f7fa fd10 	bl	35bc <_ZN5PrintC1Ev>
    8b9c:	4a05      	ldr	r2, [pc, #20]	; (8bb4 <_ZN6SdFileC1Ev+0x28>)
    8b9e:	687b      	ldr	r3, [r7, #4]
    8ba0:	601a      	str	r2, [r3, #0]
    8ba2:	687b      	ldr	r3, [r7, #4]
    8ba4:	2200      	movs	r2, #0
    8ba6:	725a      	strb	r2, [r3, #9]
    8ba8:	687b      	ldr	r3, [r7, #4]
    8baa:	0018      	movs	r0, r3
    8bac:	46bd      	mov	sp, r7
    8bae:	b002      	add	sp, #8
    8bb0:	bd80      	pop	{r7, pc}
    8bb2:	46c0      	nop			; (mov r8, r8)
    8bb4:	000135ec 	.word	0x000135ec

00008bb8 <_ZN6SdFile6rewindEv>:
  void rewind(void) {
    8bb8:	b580      	push	{r7, lr}
    8bba:	b082      	sub	sp, #8
    8bbc:	af00      	add	r7, sp, #0
    8bbe:	6078      	str	r0, [r7, #4]
    curPosition_ = curCluster_ = 0;
    8bc0:	687b      	ldr	r3, [r7, #4]
    8bc2:	2200      	movs	r2, #0
    8bc4:	60da      	str	r2, [r3, #12]
    8bc6:	687b      	ldr	r3, [r7, #4]
    8bc8:	68da      	ldr	r2, [r3, #12]
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	611a      	str	r2, [r3, #16]
  }
    8bce:	46c0      	nop			; (mov r8, r8)
    8bd0:	46bd      	mov	sp, r7
    8bd2:	b002      	add	sp, #8
    8bd4:	bd80      	pop	{r7, pc}

00008bd6 <_ZN6SdFile4openERS_PKch>:
    return makeDir(&dir, dirName);
  }
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    8bd6:	b580      	push	{r7, lr}
    8bd8:	b084      	sub	sp, #16
    8bda:	af00      	add	r7, sp, #0
    8bdc:	60f8      	str	r0, [r7, #12]
    8bde:	60b9      	str	r1, [r7, #8]
    8be0:	607a      	str	r2, [r7, #4]
    8be2:	001a      	movs	r2, r3
    8be4:	1cfb      	adds	r3, r7, #3
    8be6:	701a      	strb	r2, [r3, #0]
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    8be8:	1cfb      	adds	r3, r7, #3
    8bea:	781b      	ldrb	r3, [r3, #0]
    8bec:	687a      	ldr	r2, [r7, #4]
    8bee:	68b9      	ldr	r1, [r7, #8]
    8bf0:	68f8      	ldr	r0, [r7, #12]
    8bf2:	f001 fa29 	bl	a048 <_ZN6SdFile4openEPS_PKch>
    8bf6:	0003      	movs	r3, r0
  }
    8bf8:	0018      	movs	r0, r3
    8bfa:	46bd      	mov	sp, r7
    8bfc:	b004      	add	sp, #16
    8bfe:	bd80      	pop	{r7, pc}

00008c00 <_ZN6SdFile8openRootER8SdVolume>:
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    8c00:	b580      	push	{r7, lr}
    8c02:	b082      	sub	sp, #8
    8c04:	af00      	add	r7, sp, #0
    8c06:	6078      	str	r0, [r7, #4]
    8c08:	6039      	str	r1, [r7, #0]
    8c0a:	683a      	ldr	r2, [r7, #0]
    8c0c:	687b      	ldr	r3, [r7, #4]
    8c0e:	0011      	movs	r1, r2
    8c10:	0018      	movs	r0, r3
    8c12:	f001 fc0f 	bl	a434 <_ZN6SdFile8openRootEP8SdVolume>
    8c16:	0003      	movs	r3, r0
    8c18:	0018      	movs	r0, r3
    8c1a:	46bd      	mov	sp, r7
    8c1c:	b002      	add	sp, #8
    8c1e:	bd80      	pop	{r7, pc}

00008c20 <_ZN8SdVolumeC1Ev>:
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    8c20:	b580      	push	{r7, lr}
    8c22:	b082      	sub	sp, #8
    8c24:	af00      	add	r7, sp, #0
    8c26:	6078      	str	r0, [r7, #4]
    8c28:	687b      	ldr	r3, [r7, #4]
    8c2a:	2202      	movs	r2, #2
    8c2c:	601a      	str	r2, [r3, #0]
    8c2e:	687b      	ldr	r3, [r7, #4]
    8c30:	2220      	movs	r2, #32
    8c32:	2100      	movs	r1, #0
    8c34:	5499      	strb	r1, [r3, r2]
    8c36:	687b      	ldr	r3, [r7, #4]
    8c38:	0018      	movs	r0, r3
    8c3a:	46bd      	mov	sp, r7
    8c3c:	b002      	add	sp, #8
    8c3e:	bd80      	pop	{r7, pc}

00008c40 <_ZN8SdVolume4initEP7Sd2Card>:
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    8c40:	b580      	push	{r7, lr}
    8c42:	b082      	sub	sp, #8
    8c44:	af00      	add	r7, sp, #0
    8c46:	6078      	str	r0, [r7, #4]
    8c48:	6039      	str	r1, [r7, #0]
    8c4a:	6839      	ldr	r1, [r7, #0]
    8c4c:	687b      	ldr	r3, [r7, #4]
    8c4e:	2201      	movs	r2, #1
    8c50:	0018      	movs	r0, r3
    8c52:	f002 fbb1 	bl	b3b8 <_ZN8SdVolume4initEP7Sd2Cardh>
    8c56:	1e03      	subs	r3, r0, #0
    8c58:	d107      	bne.n	8c6a <_ZN8SdVolume4initEP7Sd2Card+0x2a>
    8c5a:	6839      	ldr	r1, [r7, #0]
    8c5c:	687b      	ldr	r3, [r7, #4]
    8c5e:	2200      	movs	r2, #0
    8c60:	0018      	movs	r0, r3
    8c62:	f002 fba9 	bl	b3b8 <_ZN8SdVolume4initEP7Sd2Cardh>
    8c66:	0003      	movs	r3, r0
    8c68:	e000      	b.n	8c6c <_ZN8SdVolume4initEP7Sd2Card+0x2c>
    8c6a:	2301      	movs	r3, #1
    8c6c:	0018      	movs	r0, r3
    8c6e:	46bd      	mov	sp, r7
    8c70:	b002      	add	sp, #8
    8c72:	bd80      	pop	{r7, pc}

00008c74 <_ZN8SdVolume4initER7Sd2Card>:
  static Sd2Card* sdCard(void) {return sdCard_;}
//------------------------------------------------------------------------------
#if ALLOW_DEPRECATED_FUNCTIONS
  // Deprecated functions  - suppress cpplint warnings with NOLINT comment
  /** \deprecated Use: uint8_t SdVolume::init(Sd2Card* dev); */
  uint8_t init(Sd2Card& dev) {return init(&dev);}  // NOLINT
    8c74:	b580      	push	{r7, lr}
    8c76:	b082      	sub	sp, #8
    8c78:	af00      	add	r7, sp, #0
    8c7a:	6078      	str	r0, [r7, #4]
    8c7c:	6039      	str	r1, [r7, #0]
    8c7e:	683a      	ldr	r2, [r7, #0]
    8c80:	687b      	ldr	r3, [r7, #4]
    8c82:	0011      	movs	r1, r2
    8c84:	0018      	movs	r0, r3
    8c86:	f7ff ffdb 	bl	8c40 <_ZN8SdVolume4initEP7Sd2Card>
    8c8a:	0003      	movs	r3, r0
    8c8c:	0018      	movs	r0, r3
    8c8e:	46bd      	mov	sp, r7
    8c90:	b002      	add	sp, #8
    8c92:	bd80      	pop	{r7, pc}

00008c94 <_ZN5SDLib7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    8c94:	b580      	push	{r7, lr}
    8c96:	b082      	sub	sp, #8
    8c98:	af00      	add	r7, sp, #0
    8c9a:	6078      	str	r0, [r7, #4]
    8c9c:	000a      	movs	r2, r1
    8c9e:	1cfb      	adds	r3, r7, #3
    8ca0:	701a      	strb	r2, [r3, #0]
  if(root.isOpen()) root.close();
    8ca2:	687b      	ldr	r3, [r7, #4]
    8ca4:	3338      	adds	r3, #56	; 0x38
    8ca6:	0018      	movs	r0, r3
    8ca8:	f7ff fd97 	bl	87da <_ZNK6SdFile6isOpenEv>
    8cac:	0003      	movs	r3, r0
    8cae:	1e5a      	subs	r2, r3, #1
    8cb0:	4193      	sbcs	r3, r2
    8cb2:	b2db      	uxtb	r3, r3
    8cb4:	2b00      	cmp	r3, #0
    8cb6:	d004      	beq.n	8cc2 <_ZN5SDLib7SDClass5beginEh+0x2e>
    8cb8:	687b      	ldr	r3, [r7, #4]
    8cba:	3338      	adds	r3, #56	; 0x38
    8cbc:	0018      	movs	r0, r3
    8cbe:	f001 f901 	bl	9ec4 <_ZN6SdFile5closeEv>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    8cc2:	6878      	ldr	r0, [r7, #4]
    8cc4:	1cfb      	adds	r3, r7, #3
    8cc6:	781b      	ldrb	r3, [r3, #0]
    8cc8:	001a      	movs	r2, r3
    8cca:	2101      	movs	r1, #1
    8ccc:	f000 fb46 	bl	935c <_ZN7Sd2Card4initEhh>
    8cd0:	1e03      	subs	r3, r0, #0
         volume.init(card) &&
    8cd2:	d015      	beq.n	8d00 <_ZN5SDLib7SDClass5beginEh+0x6c>
    8cd4:	687b      	ldr	r3, [r7, #4]
    8cd6:	3310      	adds	r3, #16
    8cd8:	687a      	ldr	r2, [r7, #4]
    8cda:	0011      	movs	r1, r2
    8cdc:	0018      	movs	r0, r3
    8cde:	f7ff ffc9 	bl	8c74 <_ZN8SdVolume4initER7Sd2Card>
    8ce2:	1e03      	subs	r3, r0, #0
  return card.init(SPI_HALF_SPEED, csPin) &&
    8ce4:	d00c      	beq.n	8d00 <_ZN5SDLib7SDClass5beginEh+0x6c>
         root.openRoot(volume);
    8ce6:	687b      	ldr	r3, [r7, #4]
    8ce8:	3338      	adds	r3, #56	; 0x38
    8cea:	001a      	movs	r2, r3
    8cec:	687b      	ldr	r3, [r7, #4]
    8cee:	3310      	adds	r3, #16
    8cf0:	0019      	movs	r1, r3
    8cf2:	0010      	movs	r0, r2
    8cf4:	f7ff ff84 	bl	8c00 <_ZN6SdFile8openRootER8SdVolume>
    8cf8:	1e03      	subs	r3, r0, #0
         volume.init(card) &&
    8cfa:	d001      	beq.n	8d00 <_ZN5SDLib7SDClass5beginEh+0x6c>
    8cfc:	2301      	movs	r3, #1
    8cfe:	e000      	b.n	8d02 <_ZN5SDLib7SDClass5beginEh+0x6e>
    8d00:	2300      	movs	r3, #0
}
    8d02:	0018      	movs	r0, r3
    8d04:	46bd      	mov	sp, r7
    8d06:	b002      	add	sp, #8
    8d08:	bd80      	pop	{r7, pc}
	...

00008d0c <_ZN5PrintC1ERKS_>:
class Print
    8d0c:	b580      	push	{r7, lr}
    8d0e:	b082      	sub	sp, #8
    8d10:	af00      	add	r7, sp, #0
    8d12:	6078      	str	r0, [r7, #4]
    8d14:	6039      	str	r1, [r7, #0]
    8d16:	4a06      	ldr	r2, [pc, #24]	; (8d30 <_ZN5PrintC1ERKS_+0x24>)
    8d18:	687b      	ldr	r3, [r7, #4]
    8d1a:	601a      	str	r2, [r3, #0]
    8d1c:	683b      	ldr	r3, [r7, #0]
    8d1e:	685a      	ldr	r2, [r3, #4]
    8d20:	687b      	ldr	r3, [r7, #4]
    8d22:	605a      	str	r2, [r3, #4]
    8d24:	687b      	ldr	r3, [r7, #4]
    8d26:	0018      	movs	r0, r3
    8d28:	46bd      	mov	sp, r7
    8d2a:	b002      	add	sp, #8
    8d2c:	bd80      	pop	{r7, pc}
    8d2e:	46c0      	nop			; (mov r8, r8)
    8d30:	000133a4 	.word	0x000133a4

00008d34 <_ZN6SdFileC1ERKS_>:
class SdFile : public Print {
    8d34:	b580      	push	{r7, lr}
    8d36:	b082      	sub	sp, #8
    8d38:	af00      	add	r7, sp, #0
    8d3a:	6078      	str	r0, [r7, #4]
    8d3c:	6039      	str	r1, [r7, #0]
    8d3e:	687b      	ldr	r3, [r7, #4]
    8d40:	683a      	ldr	r2, [r7, #0]
    8d42:	0011      	movs	r1, r2
    8d44:	0018      	movs	r0, r3
    8d46:	f7ff ffe1 	bl	8d0c <_ZN5PrintC1ERKS_>
    8d4a:	4a16      	ldr	r2, [pc, #88]	; (8da4 <_ZN6SdFileC1ERKS_+0x70>)
    8d4c:	687b      	ldr	r3, [r7, #4]
    8d4e:	601a      	str	r2, [r3, #0]
    8d50:	683b      	ldr	r3, [r7, #0]
    8d52:	7a1a      	ldrb	r2, [r3, #8]
    8d54:	687b      	ldr	r3, [r7, #4]
    8d56:	721a      	strb	r2, [r3, #8]
    8d58:	683b      	ldr	r3, [r7, #0]
    8d5a:	7a5a      	ldrb	r2, [r3, #9]
    8d5c:	687b      	ldr	r3, [r7, #4]
    8d5e:	725a      	strb	r2, [r3, #9]
    8d60:	683b      	ldr	r3, [r7, #0]
    8d62:	68da      	ldr	r2, [r3, #12]
    8d64:	687b      	ldr	r3, [r7, #4]
    8d66:	60da      	str	r2, [r3, #12]
    8d68:	683b      	ldr	r3, [r7, #0]
    8d6a:	691a      	ldr	r2, [r3, #16]
    8d6c:	687b      	ldr	r3, [r7, #4]
    8d6e:	611a      	str	r2, [r3, #16]
    8d70:	683b      	ldr	r3, [r7, #0]
    8d72:	695a      	ldr	r2, [r3, #20]
    8d74:	687b      	ldr	r3, [r7, #4]
    8d76:	615a      	str	r2, [r3, #20]
    8d78:	683b      	ldr	r3, [r7, #0]
    8d7a:	7e1a      	ldrb	r2, [r3, #24]
    8d7c:	687b      	ldr	r3, [r7, #4]
    8d7e:	761a      	strb	r2, [r3, #24]
    8d80:	683b      	ldr	r3, [r7, #0]
    8d82:	69da      	ldr	r2, [r3, #28]
    8d84:	687b      	ldr	r3, [r7, #4]
    8d86:	61da      	str	r2, [r3, #28]
    8d88:	683b      	ldr	r3, [r7, #0]
    8d8a:	6a1a      	ldr	r2, [r3, #32]
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	621a      	str	r2, [r3, #32]
    8d90:	683b      	ldr	r3, [r7, #0]
    8d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	625a      	str	r2, [r3, #36]	; 0x24
    8d98:	687b      	ldr	r3, [r7, #4]
    8d9a:	0018      	movs	r0, r3
    8d9c:	46bd      	mov	sp, r7
    8d9e:	b002      	add	sp, #8
    8da0:	bd80      	pop	{r7, pc}
    8da2:	46c0      	nop			; (mov r8, r8)
    8da4:	000135ec 	.word	0x000135ec

00008da8 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
{
  root.close();
}

// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    8da8:	b580      	push	{r7, lr}
    8daa:	b0a2      	sub	sp, #136	; 0x88
    8dac:	af00      	add	r7, sp, #0
    8dae:	60f8      	str	r0, [r7, #12]
    8db0:	60b9      	str	r1, [r7, #8]
    8db2:	607a      	str	r2, [r7, #4]
    8db4:	603b      	str	r3, [r7, #0]
  // get parent directory
  SdFile d1;
    8db6:	234c      	movs	r3, #76	; 0x4c
    8db8:	18fb      	adds	r3, r7, r3
    8dba:	0018      	movs	r0, r3
    8dbc:	f7ff fee6 	bl	8b8c <_ZN6SdFileC1Ev>
  SdFile d2;
    8dc0:	2324      	movs	r3, #36	; 0x24
    8dc2:	18fb      	adds	r3, r7, r3
    8dc4:	0018      	movs	r0, r3
    8dc6:	f7ff fee1 	bl	8b8c <_ZN6SdFileC1Ev>

  d1.openRoot(volume); // start with the mostparent, root!
    8dca:	68bb      	ldr	r3, [r7, #8]
    8dcc:	3310      	adds	r3, #16
    8dce:	001a      	movs	r2, r3
    8dd0:	234c      	movs	r3, #76	; 0x4c
    8dd2:	18fb      	adds	r3, r7, r3
    8dd4:	0011      	movs	r1, r2
    8dd6:	0018      	movs	r0, r3
    8dd8:	f7ff ff12 	bl	8c00 <_ZN6SdFile8openRootER8SdVolume>

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    8ddc:	234c      	movs	r3, #76	; 0x4c
    8dde:	18fb      	adds	r3, r7, r3
    8de0:	2284      	movs	r2, #132	; 0x84
    8de2:	18ba      	adds	r2, r7, r2
    8de4:	6013      	str	r3, [r2, #0]
  SdFile *subdir = &d2;
    8de6:	2324      	movs	r3, #36	; 0x24
    8de8:	18fb      	adds	r3, r7, r3
    8dea:	2280      	movs	r2, #128	; 0x80
    8dec:	18ba      	adds	r2, r7, r2
    8dee:	6013      	str	r3, [r2, #0]
  
  const char *origpath = filepath;
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	67bb      	str	r3, [r7, #120]	; 0x78

  while (strchr(filepath, '/')) {
    8df4:	687b      	ldr	r3, [r7, #4]
    8df6:	212f      	movs	r1, #47	; 0x2f
    8df8:	0018      	movs	r0, r3
    8dfa:	f008 fb93 	bl	11524 <strchr>
    8dfe:	1e03      	subs	r3, r0, #0
    8e00:	d06b      	beq.n	8eda <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x132>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    8e02:	687b      	ldr	r3, [r7, #4]
    8e04:	781b      	ldrb	r3, [r3, #0]
    8e06:	2b2f      	cmp	r3, #47	; 0x2f
    8e08:	d103      	bne.n	8e12 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6a>
      filepath++;
    8e0a:	687b      	ldr	r3, [r7, #4]
    8e0c:	3301      	adds	r3, #1
    8e0e:	607b      	str	r3, [r7, #4]
    8e10:	e7f0      	b.n	8df4 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x4c>
      continue;
    }
    
    if (! strchr(filepath, '/')) {
    8e12:	687b      	ldr	r3, [r7, #4]
    8e14:	212f      	movs	r1, #47	; 0x2f
    8e16:	0018      	movs	r0, r3
    8e18:	f008 fb84 	bl	11524 <strchr>
    8e1c:	1e03      	subs	r3, r0, #0
    8e1e:	d05b      	beq.n	8ed8 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x130>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    8e20:	687b      	ldr	r3, [r7, #4]
    8e22:	212f      	movs	r1, #47	; 0x2f
    8e24:	0018      	movs	r0, r3
    8e26:	f008 fb7d 	bl	11524 <strchr>
    8e2a:	0003      	movs	r3, r0
    8e2c:	001a      	movs	r2, r3
    8e2e:	687b      	ldr	r3, [r7, #4]
    8e30:	1ad2      	subs	r2, r2, r3
    8e32:	237f      	movs	r3, #127	; 0x7f
    8e34:	18fb      	adds	r3, r7, r3
    8e36:	701a      	strb	r2, [r3, #0]
    if (idx > 12)
    8e38:	237f      	movs	r3, #127	; 0x7f
    8e3a:	18fb      	adds	r3, r7, r3
    8e3c:	781b      	ldrb	r3, [r3, #0]
    8e3e:	2b0c      	cmp	r3, #12
    8e40:	dd03      	ble.n	8e4a <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa2>
      idx = 12;    // dont let them specify long names
    8e42:	237f      	movs	r3, #127	; 0x7f
    8e44:	18fb      	adds	r3, r7, r3
    8e46:	220c      	movs	r2, #12
    8e48:	701a      	strb	r2, [r3, #0]
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    8e4a:	237f      	movs	r3, #127	; 0x7f
    8e4c:	18fb      	adds	r3, r7, r3
    8e4e:	781a      	ldrb	r2, [r3, #0]
    8e50:	6879      	ldr	r1, [r7, #4]
    8e52:	2314      	movs	r3, #20
    8e54:	18fb      	adds	r3, r7, r3
    8e56:	0018      	movs	r0, r3
    8e58:	f008 fb81 	bl	1155e <strncpy>
    subdirname[idx] = 0;
    8e5c:	237f      	movs	r3, #127	; 0x7f
    8e5e:	18fb      	adds	r3, r7, r3
    8e60:	781b      	ldrb	r3, [r3, #0]
    8e62:	2214      	movs	r2, #20
    8e64:	18ba      	adds	r2, r7, r2
    8e66:	2100      	movs	r1, #0
    8e68:	54d1      	strb	r1, [r2, r3]

    // close the subdir (we reuse them) if open
    subdir->close();
    8e6a:	2380      	movs	r3, #128	; 0x80
    8e6c:	18fb      	adds	r3, r7, r3
    8e6e:	681b      	ldr	r3, [r3, #0]
    8e70:	0018      	movs	r0, r3
    8e72:	f001 f827 	bl	9ec4 <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    8e76:	2314      	movs	r3, #20
    8e78:	18fa      	adds	r2, r7, r3
    8e7a:	2384      	movs	r3, #132	; 0x84
    8e7c:	18fb      	adds	r3, r7, r3
    8e7e:	6819      	ldr	r1, [r3, #0]
    8e80:	2380      	movs	r3, #128	; 0x80
    8e82:	18fb      	adds	r3, r7, r3
    8e84:	6818      	ldr	r0, [r3, #0]
    8e86:	2301      	movs	r3, #1
    8e88:	f001 f8de 	bl	a048 <_ZN6SdFile4openEPS_PKch>
    8e8c:	0003      	movs	r3, r0
    8e8e:	425a      	negs	r2, r3
    8e90:	4153      	adcs	r3, r2
    8e92:	b2db      	uxtb	r3, r3
    8e94:	2b00      	cmp	r3, #0
    8e96:	d004      	beq.n	8ea2 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xfa>
      // failed to open one of the subdirectories
      return SdFile();
    8e98:	68fb      	ldr	r3, [r7, #12]
    8e9a:	0018      	movs	r0, r3
    8e9c:	f7ff fe76 	bl	8b8c <_ZN6SdFileC1Ev>
    8ea0:	e028      	b.n	8ef4 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x14c>
    }
    // move forward to the next subdirectory
    filepath += idx;
    8ea2:	237f      	movs	r3, #127	; 0x7f
    8ea4:	18fb      	adds	r3, r7, r3
    8ea6:	781b      	ldrb	r3, [r3, #0]
    8ea8:	687a      	ldr	r2, [r7, #4]
    8eaa:	18d3      	adds	r3, r2, r3
    8eac:	607b      	str	r3, [r7, #4]

    // we reuse the objects, close it.
    parent->close();
    8eae:	2384      	movs	r3, #132	; 0x84
    8eb0:	18fb      	adds	r3, r7, r3
    8eb2:	681b      	ldr	r3, [r3, #0]
    8eb4:	0018      	movs	r0, r3
    8eb6:	f001 f805 	bl	9ec4 <_ZN6SdFile5closeEv>

    // swap the pointers
    SdFile *t = parent;
    8eba:	2384      	movs	r3, #132	; 0x84
    8ebc:	18fb      	adds	r3, r7, r3
    8ebe:	681b      	ldr	r3, [r3, #0]
    8ec0:	677b      	str	r3, [r7, #116]	; 0x74
    parent = subdir;
    8ec2:	2380      	movs	r3, #128	; 0x80
    8ec4:	18fb      	adds	r3, r7, r3
    8ec6:	681b      	ldr	r3, [r3, #0]
    8ec8:	2284      	movs	r2, #132	; 0x84
    8eca:	18ba      	adds	r2, r7, r2
    8ecc:	6013      	str	r3, [r2, #0]
    subdir = t;
    8ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8ed0:	2280      	movs	r2, #128	; 0x80
    8ed2:	18ba      	adds	r2, r7, r2
    8ed4:	6013      	str	r3, [r2, #0]
  while (strchr(filepath, '/')) {
    8ed6:	e78d      	b.n	8df4 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x4c>
      break;
    8ed8:	46c0      	nop			; (mov r8, r8)
  }

  *index = (int)(filepath - origpath);
    8eda:	687a      	ldr	r2, [r7, #4]
    8edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8ede:	1ad2      	subs	r2, r2, r3
    8ee0:	683b      	ldr	r3, [r7, #0]
    8ee2:	601a      	str	r2, [r3, #0]
  // parent is now the parent diretory of the file!
  return *parent;
    8ee4:	2384      	movs	r3, #132	; 0x84
    8ee6:	18fb      	adds	r3, r7, r3
    8ee8:	681a      	ldr	r2, [r3, #0]
    8eea:	68fb      	ldr	r3, [r7, #12]
    8eec:	0011      	movs	r1, r2
    8eee:	0018      	movs	r0, r3
    8ef0:	f7ff ff20 	bl	8d34 <_ZN6SdFileC1ERKS_>
}
    8ef4:	68f8      	ldr	r0, [r7, #12]
    8ef6:	46bd      	mov	sp, r7
    8ef8:	b022      	add	sp, #136	; 0x88
    8efa:	bd80      	pop	{r7, pc}

00008efc <_ZN5SDLib7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    8efc:	b580      	push	{r7, lr}
    8efe:	b0ae      	sub	sp, #184	; 0xb8
    8f00:	af00      	add	r7, sp, #0
    8f02:	60f8      	str	r0, [r7, #12]
    8f04:	60b9      	str	r1, [r7, #8]
    8f06:	607a      	str	r2, [r7, #4]
    8f08:	001a      	movs	r2, r3
    8f0a:	1cfb      	adds	r3, r7, #3
    8f0c:	701a      	strb	r2, [r3, #0]
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    8f0e:	233c      	movs	r3, #60	; 0x3c
    8f10:	18f8      	adds	r0, r7, r3
    8f12:	2364      	movs	r3, #100	; 0x64
    8f14:	18fb      	adds	r3, r7, r3
    8f16:	687a      	ldr	r2, [r7, #4]
    8f18:	68b9      	ldr	r1, [r7, #8]
    8f1a:	f7ff ff45 	bl	8da8 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    8f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    8f20:	001a      	movs	r2, r3
    8f22:	687b      	ldr	r3, [r7, #4]
    8f24:	189b      	adds	r3, r3, r2
    8f26:	607b      	str	r3, [r7, #4]

  if (! filepath[0]) {
    8f28:	687b      	ldr	r3, [r7, #4]
    8f2a:	781b      	ldrb	r3, [r3, #0]
    8f2c:	2b00      	cmp	r3, #0
    8f2e:	d10f      	bne.n	8f50 <_ZN5SDLib7SDClass4openEPKch+0x54>
    // it was the directory itself!
    return File(parentdir, "/");
    8f30:	233c      	movs	r3, #60	; 0x3c
    8f32:	18fa      	adds	r2, r7, r3
    8f34:	2368      	movs	r3, #104	; 0x68
    8f36:	18fb      	adds	r3, r7, r3
    8f38:	0011      	movs	r1, r2
    8f3a:	0018      	movs	r0, r3
    8f3c:	f7ff fefa 	bl	8d34 <_ZN6SdFileC1ERKS_>
    8f40:	4a2d      	ldr	r2, [pc, #180]	; (8ff8 <_ZN5SDLib7SDClass4openEPKch+0xfc>)
    8f42:	2368      	movs	r3, #104	; 0x68
    8f44:	18f9      	adds	r1, r7, r3
    8f46:	68fb      	ldr	r3, [r7, #12]
    8f48:	0018      	movs	r0, r3
    8f4a:	f7ff fc7f 	bl	884c <_ZN5SDLib4FileC1E6SdFilePKc>
    8f4e:	e04e      	b.n	8fee <_ZN5SDLib7SDClass4openEPKch+0xf2>
  }

  // Open the file itself
  SdFile file;
    8f50:	2314      	movs	r3, #20
    8f52:	18fb      	adds	r3, r7, r3
    8f54:	0018      	movs	r0, r3
    8f56:	f7ff fe19 	bl	8b8c <_ZN6SdFileC1Ev>

  // failed to open a subdir!
  if (!parentdir.isOpen())
    8f5a:	233c      	movs	r3, #60	; 0x3c
    8f5c:	18fb      	adds	r3, r7, r3
    8f5e:	0018      	movs	r0, r3
    8f60:	f7ff fc3b 	bl	87da <_ZNK6SdFile6isOpenEv>
    8f64:	0003      	movs	r3, r0
    8f66:	425a      	negs	r2, r3
    8f68:	4153      	adcs	r3, r2
    8f6a:	b2db      	uxtb	r3, r3
    8f6c:	2b00      	cmp	r3, #0
    8f6e:	d004      	beq.n	8f7a <_ZN5SDLib7SDClass4openEPKch+0x7e>
    return File();
    8f70:	68fb      	ldr	r3, [r7, #12]
    8f72:	0018      	movs	r0, r3
    8f74:	f7ff fc9a 	bl	88ac <_ZN5SDLib4FileC1Ev>
    8f78:	e039      	b.n	8fee <_ZN5SDLib7SDClass4openEPKch+0xf2>

  if ( ! file.open(parentdir, filepath, mode)) {
    8f7a:	1cfb      	adds	r3, r7, #3
    8f7c:	781b      	ldrb	r3, [r3, #0]
    8f7e:	687a      	ldr	r2, [r7, #4]
    8f80:	213c      	movs	r1, #60	; 0x3c
    8f82:	1879      	adds	r1, r7, r1
    8f84:	2014      	movs	r0, #20
    8f86:	1838      	adds	r0, r7, r0
    8f88:	f7ff fe25 	bl	8bd6 <_ZN6SdFile4openERS_PKch>
    8f8c:	0003      	movs	r3, r0
    8f8e:	425a      	negs	r2, r3
    8f90:	4153      	adcs	r3, r2
    8f92:	b2db      	uxtb	r3, r3
    8f94:	2b00      	cmp	r3, #0
    8f96:	d004      	beq.n	8fa2 <_ZN5SDLib7SDClass4openEPKch+0xa6>
    return File();
    8f98:	68fb      	ldr	r3, [r7, #12]
    8f9a:	0018      	movs	r0, r3
    8f9c:	f7ff fc86 	bl	88ac <_ZN5SDLib4FileC1Ev>
    8fa0:	e025      	b.n	8fee <_ZN5SDLib7SDClass4openEPKch+0xf2>
  }
  // close the parent
  parentdir.close();
    8fa2:	233c      	movs	r3, #60	; 0x3c
    8fa4:	18fb      	adds	r3, r7, r3
    8fa6:	0018      	movs	r0, r3
    8fa8:	f000 ff8c 	bl	9ec4 <_ZN6SdFile5closeEv>

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    8fac:	1cfb      	adds	r3, r7, #3
    8fae:	781b      	ldrb	r3, [r3, #0]
    8fb0:	2206      	movs	r2, #6
    8fb2:	4013      	ands	r3, r2
    8fb4:	2b06      	cmp	r3, #6
    8fb6:	d10b      	bne.n	8fd0 <_ZN5SDLib7SDClass4openEPKch+0xd4>
    file.seekSet(file.fileSize());
    8fb8:	2314      	movs	r3, #20
    8fba:	18fb      	adds	r3, r7, r3
    8fbc:	0018      	movs	r0, r3
    8fbe:	f7ff fbf2 	bl	87a6 <_ZNK6SdFile8fileSizeEv>
    8fc2:	0002      	movs	r2, r0
    8fc4:	2314      	movs	r3, #20
    8fc6:	18fb      	adds	r3, r7, r3
    8fc8:	0011      	movs	r1, r2
    8fca:	0018      	movs	r0, r3
    8fcc:	f001 fbfa 	bl	a7c4 <_ZN6SdFile7seekSetEm>
  return File(file, filepath);
    8fd0:	2314      	movs	r3, #20
    8fd2:	18fa      	adds	r2, r7, r3
    8fd4:	2390      	movs	r3, #144	; 0x90
    8fd6:	18fb      	adds	r3, r7, r3
    8fd8:	0011      	movs	r1, r2
    8fda:	0018      	movs	r0, r3
    8fdc:	f7ff feaa 	bl	8d34 <_ZN6SdFileC1ERKS_>
    8fe0:	687a      	ldr	r2, [r7, #4]
    8fe2:	2390      	movs	r3, #144	; 0x90
    8fe4:	18f9      	adds	r1, r7, r3
    8fe6:	68fb      	ldr	r3, [r7, #12]
    8fe8:	0018      	movs	r0, r3
    8fea:	f7ff fc2f 	bl	884c <_ZN5SDLib4FileC1E6SdFilePKc>
}
    8fee:	68f8      	ldr	r0, [r7, #12]
    8ff0:	46bd      	mov	sp, r7
    8ff2:	b02e      	add	sp, #184	; 0xb8
    8ff4:	bd80      	pop	{r7, pc}
    8ff6:	46c0      	nop			; (mov r8, r8)
    8ff8:	000135b8 	.word	0x000135b8

00008ffc <_ZN5SDLib7SDClassC1Ev>:
  void rewindDirectory(void);
  
  using Print::write;
};

class SDClass {
    8ffc:	b580      	push	{r7, lr}
    8ffe:	b082      	sub	sp, #8
    9000:	af00      	add	r7, sp, #0
    9002:	6078      	str	r0, [r7, #4]
    9004:	687b      	ldr	r3, [r7, #4]
    9006:	0018      	movs	r0, r3
    9008:	f7ff fdaa 	bl	8b60 <_ZN7Sd2CardC1Ev>
    900c:	687b      	ldr	r3, [r7, #4]
    900e:	3310      	adds	r3, #16
    9010:	0018      	movs	r0, r3
    9012:	f7ff fe05 	bl	8c20 <_ZN8SdVolumeC1Ev>
    9016:	687b      	ldr	r3, [r7, #4]
    9018:	3338      	adds	r3, #56	; 0x38
    901a:	0018      	movs	r0, r3
    901c:	f7ff fdb6 	bl	8b8c <_ZN6SdFileC1Ev>
    9020:	687b      	ldr	r3, [r7, #4]
    9022:	0018      	movs	r0, r3
    9024:	46bd      	mov	sp, r7
    9026:	b002      	add	sp, #8
    9028:	bd80      	pop	{r7, pc}
	...

0000902c <_Z41__static_initialization_and_destruction_0ii>:
    _file->rewind();
}

SDClass SD;

};
    902c:	b580      	push	{r7, lr}
    902e:	b082      	sub	sp, #8
    9030:	af00      	add	r7, sp, #0
    9032:	6078      	str	r0, [r7, #4]
    9034:	6039      	str	r1, [r7, #0]
    9036:	687b      	ldr	r3, [r7, #4]
    9038:	2b01      	cmp	r3, #1
    903a:	d107      	bne.n	904c <_Z41__static_initialization_and_destruction_0ii+0x20>
    903c:	683b      	ldr	r3, [r7, #0]
    903e:	4a05      	ldr	r2, [pc, #20]	; (9054 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    9040:	4293      	cmp	r3, r2
    9042:	d103      	bne.n	904c <_Z41__static_initialization_and_destruction_0ii+0x20>
SDClass SD;
    9044:	4b04      	ldr	r3, [pc, #16]	; (9058 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    9046:	0018      	movs	r0, r3
    9048:	f7ff ffd8 	bl	8ffc <_ZN5SDLib7SDClassC1Ev>
};
    904c:	46c0      	nop			; (mov r8, r8)
    904e:	46bd      	mov	sp, r7
    9050:	b002      	add	sp, #8
    9052:	bd80      	pop	{r7, pc}
    9054:	0000ffff 	.word	0x0000ffff
    9058:	200008f4 	.word	0x200008f4

0000905c <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
    905c:	b580      	push	{r7, lr}
    905e:	af00      	add	r7, sp, #0
    9060:	4b03      	ldr	r3, [pc, #12]	; (9070 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x14>)
    9062:	0019      	movs	r1, r3
    9064:	2001      	movs	r0, #1
    9066:	f7ff ffe1 	bl	902c <_Z41__static_initialization_and_destruction_0ii>
    906a:	46bd      	mov	sp, r7
    906c:	bd80      	pop	{r7, pc}
    906e:	46c0      	nop			; (mov r8, r8)
    9070:	0000ffff 	.word	0x0000ffff

00009074 <_ZNK7Sd2Card4typeEv>:
  uint8_t setSckRate(uint8_t sckRateID);
#ifdef USE_SPI_LIB
  uint8_t setSpiClock(uint32_t clock);
#endif
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t type(void) const {return type_;}
    9074:	b580      	push	{r7, lr}
    9076:	b082      	sub	sp, #8
    9078:	af00      	add	r7, sp, #0
    907a:	6078      	str	r0, [r7, #4]
    907c:	687b      	ldr	r3, [r7, #4]
    907e:	7b1b      	ldrb	r3, [r3, #12]
    9080:	0018      	movs	r0, r3
    9082:	46bd      	mov	sp, r7
    9084:	b002      	add	sp, #8
    9086:	bd80      	pop	{r7, pc}

00009088 <_ZN7Sd2Card8cardAcmdEhm>:
  uint16_t offset_;
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    9088:	b580      	push	{r7, lr}
    908a:	b084      	sub	sp, #16
    908c:	af00      	add	r7, sp, #0
    908e:	60f8      	str	r0, [r7, #12]
    9090:	607a      	str	r2, [r7, #4]
    9092:	230b      	movs	r3, #11
    9094:	18fb      	adds	r3, r7, r3
    9096:	1c0a      	adds	r2, r1, #0
    9098:	701a      	strb	r2, [r3, #0]
    cardCommand(CMD55, 0);
    909a:	68fb      	ldr	r3, [r7, #12]
    909c:	2200      	movs	r2, #0
    909e:	2137      	movs	r1, #55	; 0x37
    90a0:	0018      	movs	r0, r3
    90a2:	f000 f899 	bl	91d8 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    90a6:	687a      	ldr	r2, [r7, #4]
    90a8:	230b      	movs	r3, #11
    90aa:	18fb      	adds	r3, r7, r3
    90ac:	7819      	ldrb	r1, [r3, #0]
    90ae:	68fb      	ldr	r3, [r7, #12]
    90b0:	0018      	movs	r0, r3
    90b2:	f000 f891 	bl	91d8 <_ZN7Sd2Card11cardCommandEhm>
    90b6:	0003      	movs	r3, r0
  }
    90b8:	0018      	movs	r0, r3
    90ba:	46bd      	mov	sp, r7
    90bc:	b004      	add	sp, #16
    90be:	bd80      	pop	{r7, pc}

000090c0 <_ZN7Sd2Card5errorEh>:
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    90c0:	b580      	push	{r7, lr}
    90c2:	b082      	sub	sp, #8
    90c4:	af00      	add	r7, sp, #0
    90c6:	6078      	str	r0, [r7, #4]
    90c8:	000a      	movs	r2, r1
    90ca:	1cfb      	adds	r3, r7, #3
    90cc:	701a      	strb	r2, [r3, #0]
    90ce:	687b      	ldr	r3, [r7, #4]
    90d0:	1cfa      	adds	r2, r7, #3
    90d2:	7812      	ldrb	r2, [r2, #0]
    90d4:	715a      	strb	r2, [r3, #5]
    90d6:	46c0      	nop			; (mov r8, r8)
    90d8:	46bd      	mov	sp, r7
    90da:	b002      	add	sp, #8
    90dc:	bd80      	pop	{r7, pc}

000090de <_ZN7Sd2Card4typeEh>:
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    90de:	b580      	push	{r7, lr}
    90e0:	b082      	sub	sp, #8
    90e2:	af00      	add	r7, sp, #0
    90e4:	6078      	str	r0, [r7, #4]
    90e6:	000a      	movs	r2, r1
    90e8:	1cfb      	adds	r3, r7, #3
    90ea:	701a      	strb	r2, [r3, #0]
    90ec:	687b      	ldr	r3, [r7, #4]
    90ee:	1cfa      	adds	r2, r7, #3
    90f0:	7812      	ldrb	r2, [r2, #0]
    90f2:	731a      	strb	r2, [r3, #12]
    90f4:	46c0      	nop			; (mov r8, r8)
    90f6:	46bd      	mov	sp, r7
    90f8:	b002      	add	sp, #8
    90fa:	bd80      	pop	{r7, pc}

000090fc <_ZN11SPISettingsC1Ev>:
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }
    90fc:	b580      	push	{r7, lr}
    90fe:	b086      	sub	sp, #24
    9100:	af00      	add	r7, sp, #0
    9102:	6078      	str	r0, [r7, #4]
    9104:	687b      	ldr	r3, [r7, #4]
    9106:	617b      	str	r3, [r7, #20]
    9108:	4b20      	ldr	r3, [pc, #128]	; (918c <_ZN11SPISettingsC1Ev+0x90>)
    910a:	613b      	str	r3, [r7, #16]
    910c:	230f      	movs	r3, #15
    910e:	18fb      	adds	r3, r7, r3
    9110:	2201      	movs	r2, #1
    9112:	701a      	strb	r2, [r3, #0]
    9114:	230e      	movs	r3, #14
    9116:	18fb      	adds	r3, r7, r3
    9118:	2202      	movs	r2, #2
    911a:	701a      	strb	r2, [r3, #0]
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    911c:	693b      	ldr	r3, [r7, #16]
    911e:	4a1c      	ldr	r2, [pc, #112]	; (9190 <_ZN11SPISettingsC1Ev+0x94>)
    9120:	4293      	cmp	r3, r2
    9122:	d900      	bls.n	9126 <_ZN11SPISettingsC1Ev+0x2a>
    9124:	4b1a      	ldr	r3, [pc, #104]	; (9190 <_ZN11SPISettingsC1Ev+0x94>)
    9126:	697a      	ldr	r2, [r7, #20]
    9128:	6013      	str	r3, [r2, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    912a:	230f      	movs	r3, #15
    912c:	18fb      	adds	r3, r7, r3
    912e:	781b      	ldrb	r3, [r3, #0]
    9130:	2b01      	cmp	r3, #1
    9132:	d101      	bne.n	9138 <_ZN11SPISettingsC1Ev+0x3c>
    9134:	2200      	movs	r2, #0
    9136:	e000      	b.n	913a <_ZN11SPISettingsC1Ev+0x3e>
    9138:	2201      	movs	r2, #1
    913a:	697b      	ldr	r3, [r7, #20]
    913c:	715a      	strb	r2, [r3, #5]
    switch (dataMode)
    913e:	230e      	movs	r3, #14
    9140:	18fb      	adds	r3, r7, r3
    9142:	781b      	ldrb	r3, [r3, #0]
    9144:	2b01      	cmp	r3, #1
    9146:	d014      	beq.n	9172 <_ZN11SPISettingsC1Ev+0x76>
    9148:	dc02      	bgt.n	9150 <_ZN11SPISettingsC1Ev+0x54>
    914a:	2b00      	cmp	r3, #0
    914c:	d009      	beq.n	9162 <_ZN11SPISettingsC1Ev+0x66>
    914e:	e014      	b.n	917a <_ZN11SPISettingsC1Ev+0x7e>
    9150:	2b02      	cmp	r3, #2
    9152:	d002      	beq.n	915a <_ZN11SPISettingsC1Ev+0x5e>
    9154:	2b03      	cmp	r3, #3
    9156:	d008      	beq.n	916a <_ZN11SPISettingsC1Ev+0x6e>
    9158:	e00f      	b.n	917a <_ZN11SPISettingsC1Ev+0x7e>
        this->dataMode = SERCOM_SPI_MODE_0; break;
    915a:	697b      	ldr	r3, [r7, #20]
    915c:	2200      	movs	r2, #0
    915e:	711a      	strb	r2, [r3, #4]
    9160:	e00e      	b.n	9180 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_1; break;
    9162:	697b      	ldr	r3, [r7, #20]
    9164:	2201      	movs	r2, #1
    9166:	711a      	strb	r2, [r3, #4]
    9168:	e00a      	b.n	9180 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_2; break;
    916a:	697b      	ldr	r3, [r7, #20]
    916c:	2202      	movs	r2, #2
    916e:	711a      	strb	r2, [r3, #4]
    9170:	e006      	b.n	9180 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_3; break;
    9172:	697b      	ldr	r3, [r7, #20]
    9174:	2203      	movs	r2, #3
    9176:	711a      	strb	r2, [r3, #4]
    9178:	e002      	b.n	9180 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_0; break;
    917a:	697b      	ldr	r3, [r7, #20]
    917c:	2200      	movs	r2, #0
    917e:	711a      	strb	r2, [r3, #4]
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }
    9180:	687b      	ldr	r3, [r7, #4]
    9182:	0018      	movs	r0, r3
    9184:	46bd      	mov	sp, r7
    9186:	b006      	add	sp, #24
    9188:	bd80      	pop	{r7, pc}
    918a:	46c0      	nop			; (mov r8, r8)
    918c:	003d0900 	.word	0x003d0900
    9190:	00b71b00 	.word	0x00b71b00

00009194 <_ZL7spiSendh>:
#include <SPI.h>
static SPISettings settings;
#endif
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
    9194:	b580      	push	{r7, lr}
    9196:	b082      	sub	sp, #8
    9198:	af00      	add	r7, sp, #0
    919a:	0002      	movs	r2, r0
    919c:	1dfb      	adds	r3, r7, #7
    919e:	701a      	strb	r2, [r3, #0]
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SDCARD_SPI.transfer(b);
    91a0:	1dfb      	adds	r3, r7, #7
    91a2:	781a      	ldrb	r2, [r3, #0]
    91a4:	4b04      	ldr	r3, [pc, #16]	; (91b8 <_ZL7spiSendh+0x24>)
    91a6:	0011      	movs	r1, r2
    91a8:	0018      	movs	r0, r3
    91aa:	f002 fb8f 	bl	b8cc <_ZN8SPIClass8transferEh>
#endif
}
    91ae:	46c0      	nop			; (mov r8, r8)
    91b0:	46bd      	mov	sp, r7
    91b2:	b002      	add	sp, #8
    91b4:	bd80      	pop	{r7, pc}
    91b6:	46c0      	nop			; (mov r8, r8)
    91b8:	20000b7c 	.word	0x20000b7c

000091bc <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
    91bc:	b580      	push	{r7, lr}
    91be:	af00      	add	r7, sp, #0
#ifndef USE_SPI_LIB
  spiSend(0XFF);
  return SPDR;
#else
  return SDCARD_SPI.transfer(0xFF);
    91c0:	4b04      	ldr	r3, [pc, #16]	; (91d4 <_ZL6spiRecv+0x18>)
    91c2:	21ff      	movs	r1, #255	; 0xff
    91c4:	0018      	movs	r0, r3
    91c6:	f002 fb81 	bl	b8cc <_ZN8SPIClass8transferEh>
    91ca:	0003      	movs	r3, r0
#endif
}
    91cc:	0018      	movs	r0, r3
    91ce:	46bd      	mov	sp, r7
    91d0:	bd80      	pop	{r7, pc}
    91d2:	46c0      	nop			; (mov r8, r8)
    91d4:	20000b7c 	.word	0x20000b7c

000091d8 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    91d8:	b580      	push	{r7, lr}
    91da:	b086      	sub	sp, #24
    91dc:	af00      	add	r7, sp, #0
    91de:	60f8      	str	r0, [r7, #12]
    91e0:	607a      	str	r2, [r7, #4]
    91e2:	230b      	movs	r3, #11
    91e4:	18fb      	adds	r3, r7, r3
    91e6:	1c0a      	adds	r2, r1, #0
    91e8:	701a      	strb	r2, [r3, #0]
  // end read if in partialBlockRead mode
  readEnd();
    91ea:	68fb      	ldr	r3, [r7, #12]
    91ec:	0018      	movs	r0, r3
    91ee:	f000 fac9 	bl	9784 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
    91f2:	68fb      	ldr	r3, [r7, #12]
    91f4:	0018      	movs	r0, r3
    91f6:	f000 f88f 	bl	9318 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    91fa:	2396      	movs	r3, #150	; 0x96
    91fc:	005a      	lsls	r2, r3, #1
    91fe:	68fb      	ldr	r3, [r7, #12]
    9200:	0011      	movs	r1, r2
    9202:	0018      	movs	r0, r3
    9204:	f000 fb80 	bl	9908 <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
    9208:	230b      	movs	r3, #11
    920a:	18fb      	adds	r3, r7, r3
    920c:	781b      	ldrb	r3, [r3, #0]
    920e:	2240      	movs	r2, #64	; 0x40
    9210:	4313      	orrs	r3, r2
    9212:	b2db      	uxtb	r3, r3
    9214:	0018      	movs	r0, r3
    9216:	f7ff ffbd 	bl	9194 <_ZL7spiSendh>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    921a:	2317      	movs	r3, #23
    921c:	18fb      	adds	r3, r7, r3
    921e:	2218      	movs	r2, #24
    9220:	701a      	strb	r2, [r3, #0]
    9222:	2317      	movs	r3, #23
    9224:	18fb      	adds	r3, r7, r3
    9226:	781b      	ldrb	r3, [r3, #0]
    9228:	2b7f      	cmp	r3, #127	; 0x7f
    922a:	d813      	bhi.n	9254 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    922c:	2317      	movs	r3, #23
    922e:	18fb      	adds	r3, r7, r3
    9230:	781b      	ldrb	r3, [r3, #0]
    9232:	b25b      	sxtb	r3, r3
    9234:	687a      	ldr	r2, [r7, #4]
    9236:	40da      	lsrs	r2, r3
    9238:	0013      	movs	r3, r2
    923a:	b2db      	uxtb	r3, r3
    923c:	0018      	movs	r0, r3
    923e:	f7ff ffa9 	bl	9194 <_ZL7spiSendh>
    9242:	2317      	movs	r3, #23
    9244:	18fb      	adds	r3, r7, r3
    9246:	781b      	ldrb	r3, [r3, #0]
    9248:	3b08      	subs	r3, #8
    924a:	b2da      	uxtb	r2, r3
    924c:	2317      	movs	r3, #23
    924e:	18fb      	adds	r3, r7, r3
    9250:	701a      	strb	r2, [r3, #0]
    9252:	e7e6      	b.n	9222 <_ZN7Sd2Card11cardCommandEhm+0x4a>

  // send CRC
  uint8_t crc = 0XFF;
    9254:	2316      	movs	r3, #22
    9256:	18fb      	adds	r3, r7, r3
    9258:	22ff      	movs	r2, #255	; 0xff
    925a:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    925c:	230b      	movs	r3, #11
    925e:	18fb      	adds	r3, r7, r3
    9260:	781b      	ldrb	r3, [r3, #0]
    9262:	2b00      	cmp	r3, #0
    9264:	d103      	bne.n	926e <_ZN7Sd2Card11cardCommandEhm+0x96>
    9266:	2316      	movs	r3, #22
    9268:	18fb      	adds	r3, r7, r3
    926a:	2295      	movs	r2, #149	; 0x95
    926c:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    926e:	230b      	movs	r3, #11
    9270:	18fb      	adds	r3, r7, r3
    9272:	781b      	ldrb	r3, [r3, #0]
    9274:	2b08      	cmp	r3, #8
    9276:	d103      	bne.n	9280 <_ZN7Sd2Card11cardCommandEhm+0xa8>
    9278:	2316      	movs	r3, #22
    927a:	18fb      	adds	r3, r7, r3
    927c:	2287      	movs	r2, #135	; 0x87
    927e:	701a      	strb	r2, [r3, #0]
  spiSend(crc);
    9280:	2316      	movs	r3, #22
    9282:	18fb      	adds	r3, r7, r3
    9284:	781b      	ldrb	r3, [r3, #0]
    9286:	0018      	movs	r0, r3
    9288:	f7ff ff84 	bl	9194 <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    928c:	2315      	movs	r3, #21
    928e:	18fb      	adds	r3, r7, r3
    9290:	2200      	movs	r2, #0
    9292:	701a      	strb	r2, [r3, #0]
    9294:	f7ff ff92 	bl	91bc <_ZL6spiRecv>
    9298:	0003      	movs	r3, r0
    929a:	001a      	movs	r2, r3
    929c:	68fb      	ldr	r3, [r7, #12]
    929e:	72da      	strb	r2, [r3, #11]
    92a0:	68fb      	ldr	r3, [r7, #12]
    92a2:	7adb      	ldrb	r3, [r3, #11]
    92a4:	b25b      	sxtb	r3, r3
    92a6:	2b00      	cmp	r3, #0
    92a8:	da06      	bge.n	92b8 <_ZN7Sd2Card11cardCommandEhm+0xe0>
    92aa:	2315      	movs	r3, #21
    92ac:	18fb      	adds	r3, r7, r3
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	2bff      	cmp	r3, #255	; 0xff
    92b2:	d001      	beq.n	92b8 <_ZN7Sd2Card11cardCommandEhm+0xe0>
    92b4:	2301      	movs	r3, #1
    92b6:	e000      	b.n	92ba <_ZN7Sd2Card11cardCommandEhm+0xe2>
    92b8:	2300      	movs	r3, #0
    92ba:	2b00      	cmp	r3, #0
    92bc:	d007      	beq.n	92ce <_ZN7Sd2Card11cardCommandEhm+0xf6>
    92be:	2315      	movs	r3, #21
    92c0:	18fb      	adds	r3, r7, r3
    92c2:	781a      	ldrb	r2, [r3, #0]
    92c4:	2315      	movs	r3, #21
    92c6:	18fb      	adds	r3, r7, r3
    92c8:	3201      	adds	r2, #1
    92ca:	701a      	strb	r2, [r3, #0]
    92cc:	e7e2      	b.n	9294 <_ZN7Sd2Card11cardCommandEhm+0xbc>
    ;
  return status_;
    92ce:	68fb      	ldr	r3, [r7, #12]
    92d0:	7adb      	ldrb	r3, [r3, #11]
}
    92d2:	0018      	movs	r0, r3
    92d4:	46bd      	mov	sp, r7
    92d6:	b006      	add	sp, #24
    92d8:	bd80      	pop	{r7, pc}
	...

000092dc <_ZN7Sd2Card14chipSelectHighEv>:
  }
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
    92dc:	b580      	push	{r7, lr}
    92de:	b082      	sub	sp, #8
    92e0:	af00      	add	r7, sp, #0
    92e2:	6078      	str	r0, [r7, #4]
  digitalWrite(chipSelectPin_, HIGH);
    92e4:	687b      	ldr	r3, [r7, #4]
    92e6:	791b      	ldrb	r3, [r3, #4]
    92e8:	2101      	movs	r1, #1
    92ea:	0018      	movs	r0, r3
    92ec:	f7fd fbd4 	bl	6a98 <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    92f0:	4b07      	ldr	r3, [pc, #28]	; (9310 <_ZN7Sd2Card14chipSelectHighEv+0x34>)
    92f2:	781b      	ldrb	r3, [r3, #0]
    92f4:	2b00      	cmp	r3, #0
    92f6:	d006      	beq.n	9306 <_ZN7Sd2Card14chipSelectHighEv+0x2a>
    chip_select_asserted = 0;
    92f8:	4b05      	ldr	r3, [pc, #20]	; (9310 <_ZN7Sd2Card14chipSelectHighEv+0x34>)
    92fa:	2200      	movs	r2, #0
    92fc:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.endTransaction();
    92fe:	4b05      	ldr	r3, [pc, #20]	; (9314 <_ZN7Sd2Card14chipSelectHighEv+0x38>)
    9300:	0018      	movs	r0, r3
    9302:	f002 fabd 	bl	b880 <_ZN8SPIClass14endTransactionEv>
  }
#endif
}
    9306:	46c0      	nop			; (mov r8, r8)
    9308:	46bd      	mov	sp, r7
    930a:	b002      	add	sp, #8
    930c:	bd80      	pop	{r7, pc}
    930e:	46c0      	nop			; (mov r8, r8)
    9310:	20000960 	.word	0x20000960
    9314:	20000b7c 	.word	0x20000b7c

00009318 <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    9318:	b580      	push	{r7, lr}
    931a:	b082      	sub	sp, #8
    931c:	af00      	add	r7, sp, #0
    931e:	6078      	str	r0, [r7, #4]
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    9320:	4b0b      	ldr	r3, [pc, #44]	; (9350 <_ZN7Sd2Card13chipSelectLowEv+0x38>)
    9322:	781b      	ldrb	r3, [r3, #0]
    9324:	2b00      	cmp	r3, #0
    9326:	d108      	bne.n	933a <_ZN7Sd2Card13chipSelectLowEv+0x22>
    chip_select_asserted = 1;
    9328:	4b09      	ldr	r3, [pc, #36]	; (9350 <_ZN7Sd2Card13chipSelectLowEv+0x38>)
    932a:	2201      	movs	r2, #1
    932c:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.beginTransaction(settings);
    932e:	4b09      	ldr	r3, [pc, #36]	; (9354 <_ZN7Sd2Card13chipSelectLowEv+0x3c>)
    9330:	4809      	ldr	r0, [pc, #36]	; (9358 <_ZN7Sd2Card13chipSelectLowEv+0x40>)
    9332:	6819      	ldr	r1, [r3, #0]
    9334:	685a      	ldr	r2, [r3, #4]
    9336:	f002 fa6d 	bl	b814 <_ZN8SPIClass16beginTransactionE11SPISettings>
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    933a:	687b      	ldr	r3, [r7, #4]
    933c:	791b      	ldrb	r3, [r3, #4]
    933e:	2100      	movs	r1, #0
    9340:	0018      	movs	r0, r3
    9342:	f7fd fba9 	bl	6a98 <digitalWrite>
}
    9346:	46c0      	nop			; (mov r8, r8)
    9348:	46bd      	mov	sp, r7
    934a:	b002      	add	sp, #8
    934c:	bd80      	pop	{r7, pc}
    934e:	46c0      	nop			; (mov r8, r8)
    9350:	20000960 	.word	0x20000960
    9354:	20000958 	.word	0x20000958
    9358:	20000b7c 	.word	0x20000b7c

0000935c <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    935c:	b580      	push	{r7, lr}
    935e:	b08a      	sub	sp, #40	; 0x28
    9360:	af00      	add	r7, sp, #0
    9362:	6078      	str	r0, [r7, #4]
    9364:	0008      	movs	r0, r1
    9366:	0011      	movs	r1, r2
    9368:	1cfb      	adds	r3, r7, #3
    936a:	1c02      	adds	r2, r0, #0
    936c:	701a      	strb	r2, [r3, #0]
    936e:	1cbb      	adds	r3, r7, #2
    9370:	1c0a      	adds	r2, r1, #0
    9372:	701a      	strb	r2, [r3, #0]
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    9374:	687b      	ldr	r3, [r7, #4]
    9376:	2200      	movs	r2, #0
    9378:	731a      	strb	r2, [r3, #12]
    937a:	687b      	ldr	r3, [r7, #4]
    937c:	7b1a      	ldrb	r2, [r3, #12]
    937e:	687b      	ldr	r3, [r7, #4]
    9380:	729a      	strb	r2, [r3, #10]
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	7a9a      	ldrb	r2, [r3, #10]
    9386:	687b      	ldr	r3, [r7, #4]
    9388:	719a      	strb	r2, [r3, #6]
    938a:	687b      	ldr	r3, [r7, #4]
    938c:	799a      	ldrb	r2, [r3, #6]
    938e:	687b      	ldr	r3, [r7, #4]
    9390:	715a      	strb	r2, [r3, #5]
  chipSelectPin_ = chipSelectPin;
    9392:	687b      	ldr	r3, [r7, #4]
    9394:	1cba      	adds	r2, r7, #2
    9396:	7812      	ldrb	r2, [r2, #0]
    9398:	711a      	strb	r2, [r3, #4]
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
    939a:	f7f9 fd2d 	bl	2df8 <millis>
    939e:	0003      	movs	r3, r0
    93a0:	623b      	str	r3, [r7, #32]
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	791b      	ldrb	r3, [r3, #4]
    93a6:	2101      	movs	r1, #1
    93a8:	0018      	movs	r0, r3
    93aa:	f7fd fa4b 	bl	6844 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    93ae:	687b      	ldr	r3, [r7, #4]
    93b0:	791b      	ldrb	r3, [r3, #4]
    93b2:	2101      	movs	r1, #1
    93b4:	0018      	movs	r0, r3
    93b6:	f7fd fb6f 	bl	6a98 <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SDCARD_SPI.begin();
    93ba:	4b8c      	ldr	r3, [pc, #560]	; (95ec <_ZN7Sd2Card4initEhh+0x290>)
    93bc:	0018      	movs	r0, r3
    93be:	f002 f999 	bl	b6f4 <_ZN8SPIClass5beginEv>
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    93c2:	498b      	ldr	r1, [pc, #556]	; (95f0 <_ZN7Sd2Card4initEhh+0x294>)
    93c4:	230c      	movs	r3, #12
    93c6:	18f8      	adds	r0, r7, r3
    93c8:	2302      	movs	r3, #2
    93ca:	2201      	movs	r2, #1
    93cc:	f7fe f938 	bl	7640 <_ZN11SPISettingsC1Em8BitOrderh>
    93d0:	4b88      	ldr	r3, [pc, #544]	; (95f4 <_ZN7Sd2Card4initEhh+0x298>)
    93d2:	220c      	movs	r2, #12
    93d4:	18ba      	adds	r2, r7, r2
    93d6:	6811      	ldr	r1, [r2, #0]
    93d8:	6019      	str	r1, [r3, #0]
    93da:	8892      	ldrh	r2, [r2, #4]
    93dc:	809a      	strh	r2, [r3, #4]
#endif // USE_SPI_LIB
#endif // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
#ifdef USE_SPI_LIB
  SDCARD_SPI.beginTransaction(settings);
    93de:	4b85      	ldr	r3, [pc, #532]	; (95f4 <_ZN7Sd2Card4initEhh+0x298>)
    93e0:	4882      	ldr	r0, [pc, #520]	; (95ec <_ZN7Sd2Card4initEhh+0x290>)
    93e2:	6819      	ldr	r1, [r3, #0]
    93e4:	685a      	ldr	r2, [r3, #4]
    93e6:	f002 fa15 	bl	b814 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    93ea:	2327      	movs	r3, #39	; 0x27
    93ec:	18fb      	adds	r3, r7, r3
    93ee:	2200      	movs	r2, #0
    93f0:	701a      	strb	r2, [r3, #0]
    93f2:	2327      	movs	r3, #39	; 0x27
    93f4:	18fb      	adds	r3, r7, r3
    93f6:	781b      	ldrb	r3, [r3, #0]
    93f8:	2b09      	cmp	r3, #9
    93fa:	dc0a      	bgt.n	9412 <_ZN7Sd2Card4initEhh+0xb6>
    93fc:	20ff      	movs	r0, #255	; 0xff
    93fe:	f7ff fec9 	bl	9194 <_ZL7spiSendh>
    9402:	2327      	movs	r3, #39	; 0x27
    9404:	18fb      	adds	r3, r7, r3
    9406:	781a      	ldrb	r2, [r3, #0]
    9408:	2327      	movs	r3, #39	; 0x27
    940a:	18fb      	adds	r3, r7, r3
    940c:	3201      	adds	r2, #1
    940e:	701a      	strb	r2, [r3, #0]
    9410:	e7ef      	b.n	93f2 <_ZN7Sd2Card4initEhh+0x96>
#ifdef USE_SPI_LIB
  SDCARD_SPI.endTransaction();
    9412:	4b76      	ldr	r3, [pc, #472]	; (95ec <_ZN7Sd2Card4initEhh+0x290>)
    9414:	0018      	movs	r0, r3
    9416:	f002 fa33 	bl	b880 <_ZN8SPIClass14endTransactionEv>
#endif

  chipSelectLow();
    941a:	687b      	ldr	r3, [r7, #4]
    941c:	0018      	movs	r0, r3
    941e:	f7ff ff7b 	bl	9318 <_ZN7Sd2Card13chipSelectLowEv>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    9422:	687b      	ldr	r3, [r7, #4]
    9424:	2200      	movs	r2, #0
    9426:	2100      	movs	r1, #0
    9428:	0018      	movs	r0, r3
    942a:	f7ff fed5 	bl	91d8 <_ZN7Sd2Card11cardCommandEhm>
    942e:	0003      	movs	r3, r0
    9430:	001a      	movs	r2, r3
    9432:	687b      	ldr	r3, [r7, #4]
    9434:	72da      	strb	r2, [r3, #11]
    9436:	687b      	ldr	r3, [r7, #4]
    9438:	7adb      	ldrb	r3, [r3, #11]
    943a:	3b01      	subs	r3, #1
    943c:	1e5a      	subs	r2, r3, #1
    943e:	4193      	sbcs	r3, r2
    9440:	b2db      	uxtb	r3, r3
    9442:	2b00      	cmp	r3, #0
    9444:	d010      	beq.n	9468 <_ZN7Sd2Card4initEhh+0x10c>
    unsigned int d = millis() - t0;
    9446:	f7f9 fcd7 	bl	2df8 <millis>
    944a:	0002      	movs	r2, r0
    944c:	6a3b      	ldr	r3, [r7, #32]
    944e:	1ad3      	subs	r3, r2, r3
    9450:	61fb      	str	r3, [r7, #28]
    if (d > SD_INIT_TIMEOUT) {
    9452:	69fa      	ldr	r2, [r7, #28]
    9454:	23fa      	movs	r3, #250	; 0xfa
    9456:	00db      	lsls	r3, r3, #3
    9458:	429a      	cmp	r2, r3
    945a:	d9e2      	bls.n	9422 <_ZN7Sd2Card4initEhh+0xc6>
      error(SD_CARD_ERROR_CMD0);
    945c:	687b      	ldr	r3, [r7, #4]
    945e:	2101      	movs	r1, #1
    9460:	0018      	movs	r0, r3
    9462:	f7ff fe2d 	bl	90c0 <_ZN7Sd2Card5errorEh>
      goto fail;
    9466:	e0b7      	b.n	95d8 <_ZN7Sd2Card4initEhh+0x27c>
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    9468:	23d5      	movs	r3, #213	; 0xd5
    946a:	005a      	lsls	r2, r3, #1
    946c:	687b      	ldr	r3, [r7, #4]
    946e:	2108      	movs	r1, #8
    9470:	0018      	movs	r0, r3
    9472:	f7ff feb1 	bl	91d8 <_ZN7Sd2Card11cardCommandEhm>
    9476:	0003      	movs	r3, r0
    9478:	001a      	movs	r2, r3
    947a:	2304      	movs	r3, #4
    947c:	4013      	ands	r3, r2
    947e:	1e5a      	subs	r2, r3, #1
    9480:	4193      	sbcs	r3, r2
    9482:	b2db      	uxtb	r3, r3
    9484:	2b00      	cmp	r3, #0
    9486:	d005      	beq.n	9494 <_ZN7Sd2Card4initEhh+0x138>
    type(SD_CARD_TYPE_SD1);
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	2101      	movs	r1, #1
    948c:	0018      	movs	r0, r3
    948e:	f7ff fe26 	bl	90de <_ZN7Sd2Card4typeEh>
    9492:	e025      	b.n	94e0 <_ZN7Sd2Card4initEhh+0x184>
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    9494:	2326      	movs	r3, #38	; 0x26
    9496:	18fb      	adds	r3, r7, r3
    9498:	2200      	movs	r2, #0
    949a:	701a      	strb	r2, [r3, #0]
    949c:	2326      	movs	r3, #38	; 0x26
    949e:	18fb      	adds	r3, r7, r3
    94a0:	781b      	ldrb	r3, [r3, #0]
    94a2:	2b03      	cmp	r3, #3
    94a4:	dc0d      	bgt.n	94c2 <_ZN7Sd2Card4initEhh+0x166>
    94a6:	f7ff fe89 	bl	91bc <_ZL6spiRecv>
    94aa:	0003      	movs	r3, r0
    94ac:	001a      	movs	r2, r3
    94ae:	687b      	ldr	r3, [r7, #4]
    94b0:	72da      	strb	r2, [r3, #11]
    94b2:	2326      	movs	r3, #38	; 0x26
    94b4:	18fb      	adds	r3, r7, r3
    94b6:	781a      	ldrb	r2, [r3, #0]
    94b8:	2326      	movs	r3, #38	; 0x26
    94ba:	18fb      	adds	r3, r7, r3
    94bc:	3201      	adds	r2, #1
    94be:	701a      	strb	r2, [r3, #0]
    94c0:	e7ec      	b.n	949c <_ZN7Sd2Card4initEhh+0x140>
    if (status_ != 0XAA) {
    94c2:	687b      	ldr	r3, [r7, #4]
    94c4:	7adb      	ldrb	r3, [r3, #11]
    94c6:	2baa      	cmp	r3, #170	; 0xaa
    94c8:	d005      	beq.n	94d6 <_ZN7Sd2Card4initEhh+0x17a>
      error(SD_CARD_ERROR_CMD8);
    94ca:	687b      	ldr	r3, [r7, #4]
    94cc:	2102      	movs	r1, #2
    94ce:	0018      	movs	r0, r3
    94d0:	f7ff fdf6 	bl	90c0 <_ZN7Sd2Card5errorEh>
      goto fail;
    94d4:	e080      	b.n	95d8 <_ZN7Sd2Card4initEhh+0x27c>
    }
    type(SD_CARD_TYPE_SD2);
    94d6:	687b      	ldr	r3, [r7, #4]
    94d8:	2102      	movs	r1, #2
    94da:	0018      	movs	r0, r3
    94dc:	f7ff fdff 	bl	90de <_ZN7Sd2Card4typeEh>
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    94e0:	687b      	ldr	r3, [r7, #4]
    94e2:	0018      	movs	r0, r3
    94e4:	f7ff fdc6 	bl	9074 <_ZNK7Sd2Card4typeEv>
    94e8:	0003      	movs	r3, r0
    94ea:	2b02      	cmp	r3, #2
    94ec:	d102      	bne.n	94f4 <_ZN7Sd2Card4initEhh+0x198>
    94ee:	2380      	movs	r3, #128	; 0x80
    94f0:	05db      	lsls	r3, r3, #23
    94f2:	e000      	b.n	94f6 <_ZN7Sd2Card4initEhh+0x19a>
    94f4:	2300      	movs	r3, #0
    94f6:	61bb      	str	r3, [r7, #24]

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    94f8:	69ba      	ldr	r2, [r7, #24]
    94fa:	687b      	ldr	r3, [r7, #4]
    94fc:	2129      	movs	r1, #41	; 0x29
    94fe:	0018      	movs	r0, r3
    9500:	f7ff fdc2 	bl	9088 <_ZN7Sd2Card8cardAcmdEhm>
    9504:	0003      	movs	r3, r0
    9506:	001a      	movs	r2, r3
    9508:	687b      	ldr	r3, [r7, #4]
    950a:	72da      	strb	r2, [r3, #11]
    950c:	687b      	ldr	r3, [r7, #4]
    950e:	7adb      	ldrb	r3, [r3, #11]
    9510:	1e5a      	subs	r2, r3, #1
    9512:	4193      	sbcs	r3, r2
    9514:	b2db      	uxtb	r3, r3
    9516:	2b00      	cmp	r3, #0
    9518:	d010      	beq.n	953c <_ZN7Sd2Card4initEhh+0x1e0>
    // check for timeout
    unsigned int d = millis() - t0;
    951a:	f7f9 fc6d 	bl	2df8 <millis>
    951e:	0002      	movs	r2, r0
    9520:	6a3b      	ldr	r3, [r7, #32]
    9522:	1ad3      	subs	r3, r2, r3
    9524:	617b      	str	r3, [r7, #20]
    if (d > SD_INIT_TIMEOUT) {
    9526:	697a      	ldr	r2, [r7, #20]
    9528:	23fa      	movs	r3, #250	; 0xfa
    952a:	00db      	lsls	r3, r3, #3
    952c:	429a      	cmp	r2, r3
    952e:	d9e3      	bls.n	94f8 <_ZN7Sd2Card4initEhh+0x19c>
      error(SD_CARD_ERROR_ACMD41);
    9530:	687b      	ldr	r3, [r7, #4]
    9532:	2108      	movs	r1, #8
    9534:	0018      	movs	r0, r3
    9536:	f7ff fdc3 	bl	90c0 <_ZN7Sd2Card5errorEh>
      goto fail;
    953a:	e04d      	b.n	95d8 <_ZN7Sd2Card4initEhh+0x27c>
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    953c:	687b      	ldr	r3, [r7, #4]
    953e:	0018      	movs	r0, r3
    9540:	f7ff fd98 	bl	9074 <_ZNK7Sd2Card4typeEv>
    9544:	0003      	movs	r3, r0
    9546:	3b02      	subs	r3, #2
    9548:	425a      	negs	r2, r3
    954a:	4153      	adcs	r3, r2
    954c:	b2db      	uxtb	r3, r3
    954e:	2b00      	cmp	r3, #0
    9550:	d035      	beq.n	95be <_ZN7Sd2Card4initEhh+0x262>
    if (cardCommand(CMD58, 0)) {
    9552:	687b      	ldr	r3, [r7, #4]
    9554:	2200      	movs	r2, #0
    9556:	213a      	movs	r1, #58	; 0x3a
    9558:	0018      	movs	r0, r3
    955a:	f7ff fe3d 	bl	91d8 <_ZN7Sd2Card11cardCommandEhm>
    955e:	0003      	movs	r3, r0
    9560:	1e5a      	subs	r2, r3, #1
    9562:	4193      	sbcs	r3, r2
    9564:	b2db      	uxtb	r3, r3
    9566:	2b00      	cmp	r3, #0
    9568:	d005      	beq.n	9576 <_ZN7Sd2Card4initEhh+0x21a>
      error(SD_CARD_ERROR_CMD58);
    956a:	687b      	ldr	r3, [r7, #4]
    956c:	2106      	movs	r1, #6
    956e:	0018      	movs	r0, r3
    9570:	f7ff fda6 	bl	90c0 <_ZN7Sd2Card5errorEh>
      goto fail;
    9574:	e030      	b.n	95d8 <_ZN7Sd2Card4initEhh+0x27c>
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    9576:	f7ff fe21 	bl	91bc <_ZL6spiRecv>
    957a:	0003      	movs	r3, r0
    957c:	001a      	movs	r2, r3
    957e:	23c0      	movs	r3, #192	; 0xc0
    9580:	4013      	ands	r3, r2
    9582:	3bc0      	subs	r3, #192	; 0xc0
    9584:	425a      	negs	r2, r3
    9586:	4153      	adcs	r3, r2
    9588:	b2db      	uxtb	r3, r3
    958a:	2b00      	cmp	r3, #0
    958c:	d004      	beq.n	9598 <_ZN7Sd2Card4initEhh+0x23c>
    958e:	687b      	ldr	r3, [r7, #4]
    9590:	2103      	movs	r1, #3
    9592:	0018      	movs	r0, r3
    9594:	f7ff fda3 	bl	90de <_ZN7Sd2Card4typeEh>
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    9598:	2325      	movs	r3, #37	; 0x25
    959a:	18fb      	adds	r3, r7, r3
    959c:	2200      	movs	r2, #0
    959e:	701a      	strb	r2, [r3, #0]
    95a0:	2325      	movs	r3, #37	; 0x25
    95a2:	18fb      	adds	r3, r7, r3
    95a4:	781b      	ldrb	r3, [r3, #0]
    95a6:	2b02      	cmp	r3, #2
    95a8:	dc09      	bgt.n	95be <_ZN7Sd2Card4initEhh+0x262>
    95aa:	f7ff fe07 	bl	91bc <_ZL6spiRecv>
    95ae:	2325      	movs	r3, #37	; 0x25
    95b0:	18fb      	adds	r3, r7, r3
    95b2:	781a      	ldrb	r2, [r3, #0]
    95b4:	2325      	movs	r3, #37	; 0x25
    95b6:	18fb      	adds	r3, r7, r3
    95b8:	3201      	adds	r2, #1
    95ba:	701a      	strb	r2, [r3, #0]
    95bc:	e7f0      	b.n	95a0 <_ZN7Sd2Card4initEhh+0x244>
  }
  chipSelectHigh();
    95be:	687b      	ldr	r3, [r7, #4]
    95c0:	0018      	movs	r0, r3
    95c2:	f7ff fe8b 	bl	92dc <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    95c6:	1cfb      	adds	r3, r7, #3
    95c8:	781a      	ldrb	r2, [r3, #0]
    95ca:	687b      	ldr	r3, [r7, #4]
    95cc:	0011      	movs	r1, r2
    95ce:	0018      	movs	r0, r3
    95d0:	f000 f900 	bl	97d4 <_ZN7Sd2Card10setSckRateEh>
    95d4:	0003      	movs	r3, r0
    95d6:	e004      	b.n	95e2 <_ZN7Sd2Card4initEhh+0x286>
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    95d8:	687b      	ldr	r3, [r7, #4]
    95da:	0018      	movs	r0, r3
    95dc:	f7ff fe7e 	bl	92dc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    95e0:	2300      	movs	r3, #0
}
    95e2:	0018      	movs	r0, r3
    95e4:	46bd      	mov	sp, r7
    95e6:	b00a      	add	sp, #40	; 0x28
    95e8:	bd80      	pop	{r7, pc}
    95ea:	46c0      	nop			; (mov r8, r8)
    95ec:	20000b7c 	.word	0x20000b7c
    95f0:	0003d090 	.word	0x0003d090
    95f4:	20000958 	.word	0x20000958

000095f8 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    95f8:	b580      	push	{r7, lr}
    95fa:	b086      	sub	sp, #24
    95fc:	af02      	add	r7, sp, #8
    95fe:	60f8      	str	r0, [r7, #12]
    9600:	60b9      	str	r1, [r7, #8]
    9602:	607a      	str	r2, [r7, #4]
  return readData(block, 0, 512, dst);
    9604:	2380      	movs	r3, #128	; 0x80
    9606:	009a      	lsls	r2, r3, #2
    9608:	68b9      	ldr	r1, [r7, #8]
    960a:	68f8      	ldr	r0, [r7, #12]
    960c:	687b      	ldr	r3, [r7, #4]
    960e:	9300      	str	r3, [sp, #0]
    9610:	0013      	movs	r3, r2
    9612:	2200      	movs	r2, #0
    9614:	f000 f806 	bl	9624 <_ZN7Sd2Card8readDataEmttPh>
    9618:	0003      	movs	r3, r0
}
    961a:	0018      	movs	r0, r3
    961c:	46bd      	mov	sp, r7
    961e:	b004      	add	sp, #16
    9620:	bd80      	pop	{r7, pc}
	...

00009624 <_ZN7Sd2Card8readDataEmttPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    9624:	b590      	push	{r4, r7, lr}
    9626:	b087      	sub	sp, #28
    9628:	af00      	add	r7, sp, #0
    962a:	60f8      	str	r0, [r7, #12]
    962c:	60b9      	str	r1, [r7, #8]
    962e:	0019      	movs	r1, r3
    9630:	1dbb      	adds	r3, r7, #6
    9632:	801a      	strh	r2, [r3, #0]
    9634:	1d3b      	adds	r3, r7, #4
    9636:	1c0a      	adds	r2, r1, #0
    9638:	801a      	strh	r2, [r3, #0]
  if (count == 0) return true;
    963a:	1d3b      	adds	r3, r7, #4
    963c:	881b      	ldrh	r3, [r3, #0]
    963e:	2b00      	cmp	r3, #0
    9640:	d101      	bne.n	9646 <_ZN7Sd2Card8readDataEmttPh+0x22>
    9642:	2301      	movs	r3, #1
    9644:	e097      	b.n	9776 <_ZN7Sd2Card8readDataEmttPh+0x152>
  if ((count + offset) > 512) {
    9646:	1d3b      	adds	r3, r7, #4
    9648:	881a      	ldrh	r2, [r3, #0]
    964a:	1dbb      	adds	r3, r7, #6
    964c:	881b      	ldrh	r3, [r3, #0]
    964e:	18d2      	adds	r2, r2, r3
    9650:	2380      	movs	r3, #128	; 0x80
    9652:	009b      	lsls	r3, r3, #2
    9654:	429a      	cmp	r2, r3
    9656:	dd00      	ble.n	965a <_ZN7Sd2Card8readDataEmttPh+0x36>
    9658:	e085      	b.n	9766 <_ZN7Sd2Card8readDataEmttPh+0x142>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    965a:	68fb      	ldr	r3, [r7, #12]
    965c:	799b      	ldrb	r3, [r3, #6]
    965e:	2b00      	cmp	r3, #0
    9660:	d00a      	beq.n	9678 <_ZN7Sd2Card8readDataEmttPh+0x54>
    9662:	68fb      	ldr	r3, [r7, #12]
    9664:	681a      	ldr	r2, [r3, #0]
    9666:	68bb      	ldr	r3, [r7, #8]
    9668:	429a      	cmp	r2, r3
    966a:	d105      	bne.n	9678 <_ZN7Sd2Card8readDataEmttPh+0x54>
    966c:	1dbb      	adds	r3, r7, #6
    966e:	881b      	ldrh	r3, [r3, #0]
    9670:	68fa      	ldr	r2, [r7, #12]
    9672:	8912      	ldrh	r2, [r2, #8]
    9674:	4293      	cmp	r3, r2
    9676:	da32      	bge.n	96de <_ZN7Sd2Card8readDataEmttPh+0xba>
    block_ = block;
    9678:	68fb      	ldr	r3, [r7, #12]
    967a:	68ba      	ldr	r2, [r7, #8]
    967c:	601a      	str	r2, [r3, #0]
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    967e:	68fb      	ldr	r3, [r7, #12]
    9680:	0018      	movs	r0, r3
    9682:	f7ff fcf7 	bl	9074 <_ZNK7Sd2Card4typeEv>
    9686:	0003      	movs	r3, r0
    9688:	3b03      	subs	r3, #3
    968a:	1e5a      	subs	r2, r3, #1
    968c:	4193      	sbcs	r3, r2
    968e:	b2db      	uxtb	r3, r3
    9690:	2b00      	cmp	r3, #0
    9692:	d002      	beq.n	969a <_ZN7Sd2Card8readDataEmttPh+0x76>
    9694:	68bb      	ldr	r3, [r7, #8]
    9696:	025b      	lsls	r3, r3, #9
    9698:	60bb      	str	r3, [r7, #8]
    if (cardCommand(CMD17, block)) {
    969a:	68ba      	ldr	r2, [r7, #8]
    969c:	68fb      	ldr	r3, [r7, #12]
    969e:	2111      	movs	r1, #17
    96a0:	0018      	movs	r0, r3
    96a2:	f7ff fd99 	bl	91d8 <_ZN7Sd2Card11cardCommandEhm>
    96a6:	0003      	movs	r3, r0
    96a8:	1e5a      	subs	r2, r3, #1
    96aa:	4193      	sbcs	r3, r2
    96ac:	b2db      	uxtb	r3, r3
    96ae:	2b00      	cmp	r3, #0
    96b0:	d005      	beq.n	96be <_ZN7Sd2Card8readDataEmttPh+0x9a>
      error(SD_CARD_ERROR_CMD17);
    96b2:	68fb      	ldr	r3, [r7, #12]
    96b4:	2103      	movs	r1, #3
    96b6:	0018      	movs	r0, r3
    96b8:	f7ff fd02 	bl	90c0 <_ZN7Sd2Card5errorEh>
      goto fail;
    96bc:	e056      	b.n	976c <_ZN7Sd2Card8readDataEmttPh+0x148>
    }
    if (!waitStartBlock()) {
    96be:	68fb      	ldr	r3, [r7, #12]
    96c0:	0018      	movs	r0, r3
    96c2:	f000 f945 	bl	9950 <_ZN7Sd2Card14waitStartBlockEv>
    96c6:	0003      	movs	r3, r0
    96c8:	425a      	negs	r2, r3
    96ca:	4153      	adcs	r3, r2
    96cc:	b2db      	uxtb	r3, r3
    96ce:	2b00      	cmp	r3, #0
    96d0:	d14b      	bne.n	976a <_ZN7Sd2Card8readDataEmttPh+0x146>
      goto fail;
    }
    offset_ = 0;
    96d2:	68fb      	ldr	r3, [r7, #12]
    96d4:	2200      	movs	r2, #0
    96d6:	811a      	strh	r2, [r3, #8]
    inBlock_ = 1;
    96d8:	68fb      	ldr	r3, [r7, #12]
    96da:	2201      	movs	r2, #1
    96dc:	719a      	strb	r2, [r3, #6]
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    96de:	68fb      	ldr	r3, [r7, #12]
    96e0:	891b      	ldrh	r3, [r3, #8]
    96e2:	001a      	movs	r2, r3
    96e4:	1dbb      	adds	r3, r7, #6
    96e6:	881b      	ldrh	r3, [r3, #0]
    96e8:	429a      	cmp	r2, r3
    96ea:	da08      	bge.n	96fe <_ZN7Sd2Card8readDataEmttPh+0xda>
    spiRec();
    96ec:	f7ff fd66 	bl	91bc <_ZL6spiRecv>
  for (;offset_ < offset; offset_++) {
    96f0:	68fb      	ldr	r3, [r7, #12]
    96f2:	891b      	ldrh	r3, [r3, #8]
    96f4:	3301      	adds	r3, #1
    96f6:	b29a      	uxth	r2, r3
    96f8:	68fb      	ldr	r3, [r7, #12]
    96fa:	811a      	strh	r2, [r3, #8]
    96fc:	e7ef      	b.n	96de <_ZN7Sd2Card8readDataEmttPh+0xba>
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    96fe:	2316      	movs	r3, #22
    9700:	18fb      	adds	r3, r7, r3
    9702:	2200      	movs	r2, #0
    9704:	801a      	strh	r2, [r3, #0]
    9706:	2316      	movs	r3, #22
    9708:	18fb      	adds	r3, r7, r3
    970a:	881a      	ldrh	r2, [r3, #0]
    970c:	1d3b      	adds	r3, r7, #4
    970e:	881b      	ldrh	r3, [r3, #0]
    9710:	429a      	cmp	r2, r3
    9712:	da10      	bge.n	9736 <_ZN7Sd2Card8readDataEmttPh+0x112>
    dst[i] = spiRec();
    9714:	2316      	movs	r3, #22
    9716:	18fb      	adds	r3, r7, r3
    9718:	881b      	ldrh	r3, [r3, #0]
    971a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    971c:	18d4      	adds	r4, r2, r3
    971e:	f7ff fd4d 	bl	91bc <_ZL6spiRecv>
    9722:	0003      	movs	r3, r0
    9724:	7023      	strb	r3, [r4, #0]
  for (uint16_t i = 0; i < count; i++) {
    9726:	2316      	movs	r3, #22
    9728:	18fb      	adds	r3, r7, r3
    972a:	881a      	ldrh	r2, [r3, #0]
    972c:	2316      	movs	r3, #22
    972e:	18fb      	adds	r3, r7, r3
    9730:	3201      	adds	r2, #1
    9732:	801a      	strh	r2, [r3, #0]
    9734:	e7e7      	b.n	9706 <_ZN7Sd2Card8readDataEmttPh+0xe2>
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    9736:	68fb      	ldr	r3, [r7, #12]
    9738:	891a      	ldrh	r2, [r3, #8]
    973a:	1d3b      	adds	r3, r7, #4
    973c:	881b      	ldrh	r3, [r3, #0]
    973e:	18d3      	adds	r3, r2, r3
    9740:	b29a      	uxth	r2, r3
    9742:	68fb      	ldr	r3, [r7, #12]
    9744:	811a      	strh	r2, [r3, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    9746:	68fb      	ldr	r3, [r7, #12]
    9748:	7a9b      	ldrb	r3, [r3, #10]
    974a:	2b00      	cmp	r3, #0
    974c:	d005      	beq.n	975a <_ZN7Sd2Card8readDataEmttPh+0x136>
    974e:	68fb      	ldr	r3, [r7, #12]
    9750:	891b      	ldrh	r3, [r3, #8]
    9752:	001a      	movs	r2, r3
    9754:	4b0a      	ldr	r3, [pc, #40]	; (9780 <_ZN7Sd2Card8readDataEmttPh+0x15c>)
    9756:	429a      	cmp	r2, r3
    9758:	dd03      	ble.n	9762 <_ZN7Sd2Card8readDataEmttPh+0x13e>
    // read rest of data, checksum and set chip select high
    readEnd();
    975a:	68fb      	ldr	r3, [r7, #12]
    975c:	0018      	movs	r0, r3
    975e:	f000 f811 	bl	9784 <_ZN7Sd2Card7readEndEv>
  }
  return true;
    9762:	2301      	movs	r3, #1
    9764:	e007      	b.n	9776 <_ZN7Sd2Card8readDataEmttPh+0x152>
    goto fail;
    9766:	46c0      	nop			; (mov r8, r8)
    9768:	e000      	b.n	976c <_ZN7Sd2Card8readDataEmttPh+0x148>
      goto fail;
    976a:	46c0      	nop			; (mov r8, r8)

 fail:
  chipSelectHigh();
    976c:	68fb      	ldr	r3, [r7, #12]
    976e:	0018      	movs	r0, r3
    9770:	f7ff fdb4 	bl	92dc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9774:	2300      	movs	r3, #0
}
    9776:	0018      	movs	r0, r3
    9778:	46bd      	mov	sp, r7
    977a:	b007      	add	sp, #28
    977c:	bd90      	pop	{r4, r7, pc}
    977e:	46c0      	nop			; (mov r8, r8)
    9780:	000001ff 	.word	0x000001ff

00009784 <_ZN7Sd2Card7readEndEv>:
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    9784:	b580      	push	{r7, lr}
    9786:	b082      	sub	sp, #8
    9788:	af00      	add	r7, sp, #0
    978a:	6078      	str	r0, [r7, #4]
  if (inBlock_) {
    978c:	687b      	ldr	r3, [r7, #4]
    978e:	799b      	ldrb	r3, [r3, #6]
    9790:	2b00      	cmp	r3, #0
    9792:	d019      	beq.n	97c8 <_ZN7Sd2Card7readEndEv+0x44>
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    9794:	687b      	ldr	r3, [r7, #4]
    9796:	891b      	ldrh	r3, [r3, #8]
    9798:	1c5a      	adds	r2, r3, #1
    979a:	b291      	uxth	r1, r2
    979c:	687a      	ldr	r2, [r7, #4]
    979e:	8111      	strh	r1, [r2, #8]
    97a0:	001a      	movs	r2, r3
    97a2:	4b0b      	ldr	r3, [pc, #44]	; (97d0 <_ZN7Sd2Card7readEndEv+0x4c>)
    97a4:	0fd0      	lsrs	r0, r2, #31
    97a6:	17d9      	asrs	r1, r3, #31
    97a8:	4293      	cmp	r3, r2
    97aa:	4148      	adcs	r0, r1
    97ac:	0003      	movs	r3, r0
    97ae:	b2db      	uxtb	r3, r3
    97b0:	2b00      	cmp	r3, #0
    97b2:	d002      	beq.n	97ba <_ZN7Sd2Card7readEndEv+0x36>
    97b4:	f7ff fd02 	bl	91bc <_ZL6spiRecv>
    97b8:	e7ec      	b.n	9794 <_ZN7Sd2Card7readEndEv+0x10>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    97ba:	687b      	ldr	r3, [r7, #4]
    97bc:	0018      	movs	r0, r3
    97be:	f7ff fd8d 	bl	92dc <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    97c2:	687b      	ldr	r3, [r7, #4]
    97c4:	2200      	movs	r2, #0
    97c6:	719a      	strb	r2, [r3, #6]
  }
}
    97c8:	46c0      	nop			; (mov r8, r8)
    97ca:	46bd      	mov	sp, r7
    97cc:	b002      	add	sp, #8
    97ce:	bd80      	pop	{r7, pc}
    97d0:	00000201 	.word	0x00000201

000097d4 <_ZN7Sd2Card10setSckRateEh>:
 * for \a scsRateID = 6.
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
    97d4:	b580      	push	{r7, lr}
    97d6:	b090      	sub	sp, #64	; 0x40
    97d8:	af00      	add	r7, sp, #0
    97da:	6078      	str	r0, [r7, #4]
    97dc:	000a      	movs	r2, r1
    97de:	1cfb      	adds	r3, r7, #3
    97e0:	701a      	strb	r2, [r3, #0]
  if (sckRateID > 6) {
    97e2:	1cfb      	adds	r3, r7, #3
    97e4:	781b      	ldrb	r3, [r3, #0]
    97e6:	2b06      	cmp	r3, #6
    97e8:	dd06      	ble.n	97f8 <_ZN7Sd2Card10setSckRateEh+0x24>
    error(SD_CARD_ERROR_SCK_RATE);
    97ea:	687b      	ldr	r3, [r7, #4]
    97ec:	2116      	movs	r1, #22
    97ee:	0018      	movs	r0, r3
    97f0:	f7ff fc66 	bl	90c0 <_ZN7Sd2Card5errorEh>
    return false;
    97f4:	2300      	movs	r3, #0
    97f6:	e071      	b.n	98dc <_ZN7Sd2Card10setSckRateEh+0x108>
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    97f8:	1cfb      	adds	r3, r7, #3
    97fa:	781b      	ldrb	r3, [r3, #0]
    97fc:	2b05      	cmp	r3, #5
    97fe:	d85e      	bhi.n	98be <_ZN7Sd2Card10setSckRateEh+0xea>
    9800:	009a      	lsls	r2, r3, #2
    9802:	4b38      	ldr	r3, [pc, #224]	; (98e4 <_ZN7Sd2Card10setSckRateEh+0x110>)
    9804:	18d3      	adds	r3, r2, r3
    9806:	681b      	ldr	r3, [r3, #0]
    9808:	469f      	mov	pc, r3
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    980a:	4937      	ldr	r1, [pc, #220]	; (98e8 <_ZN7Sd2Card10setSckRateEh+0x114>)
    980c:	2308      	movs	r3, #8
    980e:	18f8      	adds	r0, r7, r3
    9810:	2302      	movs	r3, #2
    9812:	2201      	movs	r2, #1
    9814:	f7fd ff14 	bl	7640 <_ZN11SPISettingsC1Em8BitOrderh>
    9818:	4b34      	ldr	r3, [pc, #208]	; (98ec <_ZN7Sd2Card10setSckRateEh+0x118>)
    981a:	2208      	movs	r2, #8
    981c:	18ba      	adds	r2, r7, r2
    981e:	6811      	ldr	r1, [r2, #0]
    9820:	6019      	str	r1, [r3, #0]
    9822:	8892      	ldrh	r2, [r2, #4]
    9824:	809a      	strh	r2, [r3, #4]
    9826:	e058      	b.n	98da <_ZN7Sd2Card10setSckRateEh+0x106>
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    9828:	4931      	ldr	r1, [pc, #196]	; (98f0 <_ZN7Sd2Card10setSckRateEh+0x11c>)
    982a:	2310      	movs	r3, #16
    982c:	18f8      	adds	r0, r7, r3
    982e:	2302      	movs	r3, #2
    9830:	2201      	movs	r2, #1
    9832:	f7fd ff05 	bl	7640 <_ZN11SPISettingsC1Em8BitOrderh>
    9836:	4b2d      	ldr	r3, [pc, #180]	; (98ec <_ZN7Sd2Card10setSckRateEh+0x118>)
    9838:	2210      	movs	r2, #16
    983a:	18ba      	adds	r2, r7, r2
    983c:	6811      	ldr	r1, [r2, #0]
    983e:	6019      	str	r1, [r3, #0]
    9840:	8892      	ldrh	r2, [r2, #4]
    9842:	809a      	strh	r2, [r3, #4]
    9844:	e049      	b.n	98da <_ZN7Sd2Card10setSckRateEh+0x106>
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    9846:	492b      	ldr	r1, [pc, #172]	; (98f4 <_ZN7Sd2Card10setSckRateEh+0x120>)
    9848:	2318      	movs	r3, #24
    984a:	18f8      	adds	r0, r7, r3
    984c:	2302      	movs	r3, #2
    984e:	2201      	movs	r2, #1
    9850:	f7fd fef6 	bl	7640 <_ZN11SPISettingsC1Em8BitOrderh>
    9854:	4b25      	ldr	r3, [pc, #148]	; (98ec <_ZN7Sd2Card10setSckRateEh+0x118>)
    9856:	2218      	movs	r2, #24
    9858:	18ba      	adds	r2, r7, r2
    985a:	6811      	ldr	r1, [r2, #0]
    985c:	6019      	str	r1, [r3, #0]
    985e:	8892      	ldrh	r2, [r2, #4]
    9860:	809a      	strh	r2, [r3, #4]
    9862:	e03a      	b.n	98da <_ZN7Sd2Card10setSckRateEh+0x106>
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    9864:	4924      	ldr	r1, [pc, #144]	; (98f8 <_ZN7Sd2Card10setSckRateEh+0x124>)
    9866:	2320      	movs	r3, #32
    9868:	18f8      	adds	r0, r7, r3
    986a:	2302      	movs	r3, #2
    986c:	2201      	movs	r2, #1
    986e:	f7fd fee7 	bl	7640 <_ZN11SPISettingsC1Em8BitOrderh>
    9872:	4b1e      	ldr	r3, [pc, #120]	; (98ec <_ZN7Sd2Card10setSckRateEh+0x118>)
    9874:	2220      	movs	r2, #32
    9876:	18ba      	adds	r2, r7, r2
    9878:	6811      	ldr	r1, [r2, #0]
    987a:	6019      	str	r1, [r3, #0]
    987c:	8892      	ldrh	r2, [r2, #4]
    987e:	809a      	strh	r2, [r3, #4]
    9880:	e02b      	b.n	98da <_ZN7Sd2Card10setSckRateEh+0x106>
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    9882:	491e      	ldr	r1, [pc, #120]	; (98fc <_ZN7Sd2Card10setSckRateEh+0x128>)
    9884:	2328      	movs	r3, #40	; 0x28
    9886:	18f8      	adds	r0, r7, r3
    9888:	2302      	movs	r3, #2
    988a:	2201      	movs	r2, #1
    988c:	f7fd fed8 	bl	7640 <_ZN11SPISettingsC1Em8BitOrderh>
    9890:	4b16      	ldr	r3, [pc, #88]	; (98ec <_ZN7Sd2Card10setSckRateEh+0x118>)
    9892:	2228      	movs	r2, #40	; 0x28
    9894:	18ba      	adds	r2, r7, r2
    9896:	6811      	ldr	r1, [r2, #0]
    9898:	6019      	str	r1, [r3, #0]
    989a:	8892      	ldrh	r2, [r2, #4]
    989c:	809a      	strh	r2, [r3, #4]
    989e:	e01c      	b.n	98da <_ZN7Sd2Card10setSckRateEh+0x106>
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    98a0:	4917      	ldr	r1, [pc, #92]	; (9900 <_ZN7Sd2Card10setSckRateEh+0x12c>)
    98a2:	2330      	movs	r3, #48	; 0x30
    98a4:	18f8      	adds	r0, r7, r3
    98a6:	2302      	movs	r3, #2
    98a8:	2201      	movs	r2, #1
    98aa:	f7fd fec9 	bl	7640 <_ZN11SPISettingsC1Em8BitOrderh>
    98ae:	4b0f      	ldr	r3, [pc, #60]	; (98ec <_ZN7Sd2Card10setSckRateEh+0x118>)
    98b0:	2230      	movs	r2, #48	; 0x30
    98b2:	18ba      	adds	r2, r7, r2
    98b4:	6811      	ldr	r1, [r2, #0]
    98b6:	6019      	str	r1, [r3, #0]
    98b8:	8892      	ldrh	r2, [r2, #4]
    98ba:	809a      	strh	r2, [r3, #4]
    98bc:	e00d      	b.n	98da <_ZN7Sd2Card10setSckRateEh+0x106>
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    98be:	4911      	ldr	r1, [pc, #68]	; (9904 <_ZN7Sd2Card10setSckRateEh+0x130>)
    98c0:	2338      	movs	r3, #56	; 0x38
    98c2:	18f8      	adds	r0, r7, r3
    98c4:	2302      	movs	r3, #2
    98c6:	2201      	movs	r2, #1
    98c8:	f7fd feba 	bl	7640 <_ZN11SPISettingsC1Em8BitOrderh>
    98cc:	4b07      	ldr	r3, [pc, #28]	; (98ec <_ZN7Sd2Card10setSckRateEh+0x118>)
    98ce:	2238      	movs	r2, #56	; 0x38
    98d0:	18ba      	adds	r2, r7, r2
    98d2:	6811      	ldr	r1, [r2, #0]
    98d4:	6019      	str	r1, [r3, #0]
    98d6:	8892      	ldrh	r2, [r2, #4]
    98d8:	809a      	strh	r2, [r3, #4]
  }
#endif // USE_SPI_LIB
  return true;
    98da:	2301      	movs	r3, #1
}
    98dc:	0018      	movs	r0, r3
    98de:	46bd      	mov	sp, r7
    98e0:	b010      	add	sp, #64	; 0x40
    98e2:	bd80      	pop	{r7, pc}
    98e4:	000135bc 	.word	0x000135bc
    98e8:	017d7840 	.word	0x017d7840
    98ec:	20000958 	.word	0x20000958
    98f0:	003d0900 	.word	0x003d0900
    98f4:	001e8480 	.word	0x001e8480
    98f8:	000f4240 	.word	0x000f4240
    98fc:	0007a120 	.word	0x0007a120
    9900:	0003d090 	.word	0x0003d090
    9904:	0001e848 	.word	0x0001e848

00009908 <_ZN7Sd2Card11waitNotBusyEj>:
  return true;
}
#endif
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    9908:	b580      	push	{r7, lr}
    990a:	b084      	sub	sp, #16
    990c:	af00      	add	r7, sp, #0
    990e:	6078      	str	r0, [r7, #4]
    9910:	6039      	str	r1, [r7, #0]
  unsigned int t0 = millis();
    9912:	f7f9 fa71 	bl	2df8 <millis>
    9916:	0003      	movs	r3, r0
    9918:	60fb      	str	r3, [r7, #12]
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    991a:	f7ff fc4f 	bl	91bc <_ZL6spiRecv>
    991e:	0003      	movs	r3, r0
    9920:	3bff      	subs	r3, #255	; 0xff
    9922:	425a      	negs	r2, r3
    9924:	4153      	adcs	r3, r2
    9926:	b2db      	uxtb	r3, r3
    9928:	2b00      	cmp	r3, #0
    992a:	d001      	beq.n	9930 <_ZN7Sd2Card11waitNotBusyEj+0x28>
    992c:	2301      	movs	r3, #1
    992e:	e00b      	b.n	9948 <_ZN7Sd2Card11waitNotBusyEj+0x40>
    d = millis() - t0;
    9930:	f7f9 fa62 	bl	2df8 <millis>
    9934:	0002      	movs	r2, r0
    9936:	68fb      	ldr	r3, [r7, #12]
    9938:	1ad3      	subs	r3, r2, r3
    993a:	60bb      	str	r3, [r7, #8]
  }
  while (d < timeoutMillis);
    993c:	68ba      	ldr	r2, [r7, #8]
    993e:	683b      	ldr	r3, [r7, #0]
    9940:	429a      	cmp	r2, r3
    9942:	d200      	bcs.n	9946 <_ZN7Sd2Card11waitNotBusyEj+0x3e>
  do {
    9944:	e7e9      	b.n	991a <_ZN7Sd2Card11waitNotBusyEj+0x12>
  return false;
    9946:	2300      	movs	r3, #0
}
    9948:	0018      	movs	r0, r3
    994a:	46bd      	mov	sp, r7
    994c:	b004      	add	sp, #16
    994e:	bd80      	pop	{r7, pc}

00009950 <_ZN7Sd2Card14waitStartBlockEv>:
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    9950:	b580      	push	{r7, lr}
    9952:	b084      	sub	sp, #16
    9954:	af00      	add	r7, sp, #0
    9956:	6078      	str	r0, [r7, #4]
  unsigned int t0 = millis();
    9958:	f7f9 fa4e 	bl	2df8 <millis>
    995c:	0003      	movs	r3, r0
    995e:	60fb      	str	r3, [r7, #12]
  while ((status_ = spiRec()) == 0XFF) {
    9960:	f7ff fc2c 	bl	91bc <_ZL6spiRecv>
    9964:	0003      	movs	r3, r0
    9966:	001a      	movs	r2, r3
    9968:	687b      	ldr	r3, [r7, #4]
    996a:	72da      	strb	r2, [r3, #11]
    996c:	687b      	ldr	r3, [r7, #4]
    996e:	7adb      	ldrb	r3, [r3, #11]
    9970:	3bff      	subs	r3, #255	; 0xff
    9972:	425a      	negs	r2, r3
    9974:	4153      	adcs	r3, r2
    9976:	b2db      	uxtb	r3, r3
    9978:	2b00      	cmp	r3, #0
    997a:	d010      	beq.n	999e <_ZN7Sd2Card14waitStartBlockEv+0x4e>
    unsigned int d = millis() - t0;
    997c:	f7f9 fa3c 	bl	2df8 <millis>
    9980:	0002      	movs	r2, r0
    9982:	68fb      	ldr	r3, [r7, #12]
    9984:	1ad3      	subs	r3, r2, r3
    9986:	60bb      	str	r3, [r7, #8]
    if (d > SD_READ_TIMEOUT) {
    9988:	68ba      	ldr	r2, [r7, #8]
    998a:	2396      	movs	r3, #150	; 0x96
    998c:	005b      	lsls	r3, r3, #1
    998e:	429a      	cmp	r2, r3
    9990:	d9e6      	bls.n	9960 <_ZN7Sd2Card14waitStartBlockEv+0x10>
      error(SD_CARD_ERROR_READ_TIMEOUT);
    9992:	687b      	ldr	r3, [r7, #4]
    9994:	210f      	movs	r1, #15
    9996:	0018      	movs	r0, r3
    9998:	f7ff fb92 	bl	90c0 <_ZN7Sd2Card5errorEh>
      goto fail;
    999c:	e00b      	b.n	99b6 <_ZN7Sd2Card14waitStartBlockEv+0x66>
    }
  }
  if (status_ != DATA_START_BLOCK) {
    999e:	687b      	ldr	r3, [r7, #4]
    99a0:	7adb      	ldrb	r3, [r3, #11]
    99a2:	2bfe      	cmp	r3, #254	; 0xfe
    99a4:	d005      	beq.n	99b2 <_ZN7Sd2Card14waitStartBlockEv+0x62>
    error(SD_CARD_ERROR_READ);
    99a6:	687b      	ldr	r3, [r7, #4]
    99a8:	210d      	movs	r1, #13
    99aa:	0018      	movs	r0, r3
    99ac:	f7ff fb88 	bl	90c0 <_ZN7Sd2Card5errorEh>
    goto fail;
    99b0:	e001      	b.n	99b6 <_ZN7Sd2Card14waitStartBlockEv+0x66>
  }
  return true;
    99b2:	2301      	movs	r3, #1
    99b4:	e004      	b.n	99c0 <_ZN7Sd2Card14waitStartBlockEv+0x70>

 fail:
  chipSelectHigh();
    99b6:	687b      	ldr	r3, [r7, #4]
    99b8:	0018      	movs	r0, r3
    99ba:	f7ff fc8f 	bl	92dc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    99be:	2300      	movs	r3, #0
}
    99c0:	0018      	movs	r0, r3
    99c2:	46bd      	mov	sp, r7
    99c4:	b004      	add	sp, #16
    99c6:	bd80      	pop	{r7, pc}

000099c8 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    99c8:	b580      	push	{r7, lr}
    99ca:	b084      	sub	sp, #16
    99cc:	af00      	add	r7, sp, #0
    99ce:	60f8      	str	r0, [r7, #12]
    99d0:	60b9      	str	r1, [r7, #8]
    99d2:	607a      	str	r2, [r7, #4]
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    99d4:	68bb      	ldr	r3, [r7, #8]
    99d6:	2b00      	cmp	r3, #0
    99d8:	d105      	bne.n	99e6 <_ZN7Sd2Card10writeBlockEmPKh+0x1e>
    error(SD_CARD_ERROR_WRITE_BLOCK_ZERO);
    99da:	68fb      	ldr	r3, [r7, #12]
    99dc:	2112      	movs	r1, #18
    99de:	0018      	movs	r0, r3
    99e0:	f7ff fb6e 	bl	90c0 <_ZN7Sd2Card5errorEh>
    goto fail;
    99e4:	e05c      	b.n	9aa0 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    99e6:	68fb      	ldr	r3, [r7, #12]
    99e8:	0018      	movs	r0, r3
    99ea:	f7ff fb43 	bl	9074 <_ZNK7Sd2Card4typeEv>
    99ee:	0003      	movs	r3, r0
    99f0:	3b03      	subs	r3, #3
    99f2:	1e5a      	subs	r2, r3, #1
    99f4:	4193      	sbcs	r3, r2
    99f6:	b2db      	uxtb	r3, r3
    99f8:	2b00      	cmp	r3, #0
    99fa:	d002      	beq.n	9a02 <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
    99fc:	68bb      	ldr	r3, [r7, #8]
    99fe:	025b      	lsls	r3, r3, #9
    9a00:	60bb      	str	r3, [r7, #8]
  if (cardCommand(CMD24, blockNumber)) {
    9a02:	68ba      	ldr	r2, [r7, #8]
    9a04:	68fb      	ldr	r3, [r7, #12]
    9a06:	2118      	movs	r1, #24
    9a08:	0018      	movs	r0, r3
    9a0a:	f7ff fbe5 	bl	91d8 <_ZN7Sd2Card11cardCommandEhm>
    9a0e:	0003      	movs	r3, r0
    9a10:	1e5a      	subs	r2, r3, #1
    9a12:	4193      	sbcs	r3, r2
    9a14:	b2db      	uxtb	r3, r3
    9a16:	2b00      	cmp	r3, #0
    9a18:	d005      	beq.n	9a26 <_ZN7Sd2Card10writeBlockEmPKh+0x5e>
    error(SD_CARD_ERROR_CMD24);
    9a1a:	68fb      	ldr	r3, [r7, #12]
    9a1c:	2104      	movs	r1, #4
    9a1e:	0018      	movs	r0, r3
    9a20:	f7ff fb4e 	bl	90c0 <_ZN7Sd2Card5errorEh>
    goto fail;
    9a24:	e03c      	b.n	9aa0 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    9a26:	687a      	ldr	r2, [r7, #4]
    9a28:	68fb      	ldr	r3, [r7, #12]
    9a2a:	21fe      	movs	r1, #254	; 0xfe
    9a2c:	0018      	movs	r0, r3
    9a2e:	f000 f841 	bl	9ab4 <_ZN7Sd2Card9writeDataEhPKh>
    9a32:	0003      	movs	r3, r0
    9a34:	425a      	negs	r2, r3
    9a36:	4153      	adcs	r3, r2
    9a38:	b2db      	uxtb	r3, r3
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	d12f      	bne.n	9a9e <_ZN7Sd2Card10writeBlockEmPKh+0xd6>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9a3e:	2396      	movs	r3, #150	; 0x96
    9a40:	009a      	lsls	r2, r3, #2
    9a42:	68fb      	ldr	r3, [r7, #12]
    9a44:	0011      	movs	r1, r2
    9a46:	0018      	movs	r0, r3
    9a48:	f7ff ff5e 	bl	9908 <_ZN7Sd2Card11waitNotBusyEj>
    9a4c:	0003      	movs	r3, r0
    9a4e:	425a      	negs	r2, r3
    9a50:	4153      	adcs	r3, r2
    9a52:	b2db      	uxtb	r3, r3
    9a54:	2b00      	cmp	r3, #0
    9a56:	d005      	beq.n	9a64 <_ZN7Sd2Card10writeBlockEmPKh+0x9c>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    9a58:	68fb      	ldr	r3, [r7, #12]
    9a5a:	2115      	movs	r1, #21
    9a5c:	0018      	movs	r0, r3
    9a5e:	f7ff fb2f 	bl	90c0 <_ZN7Sd2Card5errorEh>
    goto fail;
    9a62:	e01d      	b.n	9aa0 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    9a64:	68fb      	ldr	r3, [r7, #12]
    9a66:	2200      	movs	r2, #0
    9a68:	210d      	movs	r1, #13
    9a6a:	0018      	movs	r0, r3
    9a6c:	f7ff fbb4 	bl	91d8 <_ZN7Sd2Card11cardCommandEhm>
    9a70:	1e03      	subs	r3, r0, #0
    9a72:	d103      	bne.n	9a7c <_ZN7Sd2Card10writeBlockEmPKh+0xb4>
    9a74:	f7ff fba2 	bl	91bc <_ZL6spiRecv>
    9a78:	1e03      	subs	r3, r0, #0
    9a7a:	d001      	beq.n	9a80 <_ZN7Sd2Card10writeBlockEmPKh+0xb8>
    9a7c:	2301      	movs	r3, #1
    9a7e:	e000      	b.n	9a82 <_ZN7Sd2Card10writeBlockEmPKh+0xba>
    9a80:	2300      	movs	r3, #0
    9a82:	2b00      	cmp	r3, #0
    9a84:	d005      	beq.n	9a92 <_ZN7Sd2Card10writeBlockEmPKh+0xca>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    9a86:	68fb      	ldr	r3, [r7, #12]
    9a88:	2114      	movs	r1, #20
    9a8a:	0018      	movs	r0, r3
    9a8c:	f7ff fb18 	bl	90c0 <_ZN7Sd2Card5errorEh>
    goto fail;
    9a90:	e006      	b.n	9aa0 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  chipSelectHigh();
    9a92:	68fb      	ldr	r3, [r7, #12]
    9a94:	0018      	movs	r0, r3
    9a96:	f7ff fc21 	bl	92dc <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    9a9a:	2301      	movs	r3, #1
    9a9c:	e005      	b.n	9aaa <_ZN7Sd2Card10writeBlockEmPKh+0xe2>
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    9a9e:	46c0      	nop			; (mov r8, r8)

 fail:
  chipSelectHigh();
    9aa0:	68fb      	ldr	r3, [r7, #12]
    9aa2:	0018      	movs	r0, r3
    9aa4:	f7ff fc1a 	bl	92dc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9aa8:	2300      	movs	r3, #0
}
    9aaa:	0018      	movs	r0, r3
    9aac:	46bd      	mov	sp, r7
    9aae:	b004      	add	sp, #16
    9ab0:	bd80      	pop	{r7, pc}
	...

00009ab4 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    9ab4:	b580      	push	{r7, lr}
    9ab6:	b086      	sub	sp, #24
    9ab8:	af00      	add	r7, sp, #0
    9aba:	60f8      	str	r0, [r7, #12]
    9abc:	607a      	str	r2, [r7, #4]
    9abe:	230b      	movs	r3, #11
    9ac0:	18fb      	adds	r3, r7, r3
    9ac2:	1c0a      	adds	r2, r1, #0
    9ac4:	701a      	strb	r2, [r3, #0]
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
    9ac6:	230b      	movs	r3, #11
    9ac8:	18fb      	adds	r3, r7, r3
    9aca:	781b      	ldrb	r3, [r3, #0]
    9acc:	0018      	movs	r0, r3
    9ace:	f7ff fb61 	bl	9194 <_ZL7spiSendh>
  for (uint16_t i = 0; i < 512; i++) {
    9ad2:	2316      	movs	r3, #22
    9ad4:	18fb      	adds	r3, r7, r3
    9ad6:	2200      	movs	r2, #0
    9ad8:	801a      	strh	r2, [r3, #0]
    9ada:	2316      	movs	r3, #22
    9adc:	18fb      	adds	r3, r7, r3
    9ade:	881b      	ldrh	r3, [r3, #0]
    9ae0:	4a1b      	ldr	r2, [pc, #108]	; (9b50 <_ZN7Sd2Card9writeDataEhPKh+0x9c>)
    9ae2:	4293      	cmp	r3, r2
    9ae4:	dc10      	bgt.n	9b08 <_ZN7Sd2Card9writeDataEhPKh+0x54>
    spiSend(src[i]);
    9ae6:	2316      	movs	r3, #22
    9ae8:	18fb      	adds	r3, r7, r3
    9aea:	881b      	ldrh	r3, [r3, #0]
    9aec:	687a      	ldr	r2, [r7, #4]
    9aee:	18d3      	adds	r3, r2, r3
    9af0:	781b      	ldrb	r3, [r3, #0]
    9af2:	0018      	movs	r0, r3
    9af4:	f7ff fb4e 	bl	9194 <_ZL7spiSendh>
  for (uint16_t i = 0; i < 512; i++) {
    9af8:	2316      	movs	r3, #22
    9afa:	18fb      	adds	r3, r7, r3
    9afc:	881a      	ldrh	r2, [r3, #0]
    9afe:	2316      	movs	r3, #22
    9b00:	18fb      	adds	r3, r7, r3
    9b02:	3201      	adds	r2, #1
    9b04:	801a      	strh	r2, [r3, #0]
    9b06:	e7e8      	b.n	9ada <_ZN7Sd2Card9writeDataEhPKh+0x26>
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
    9b08:	20ff      	movs	r0, #255	; 0xff
    9b0a:	f7ff fb43 	bl	9194 <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
    9b0e:	20ff      	movs	r0, #255	; 0xff
    9b10:	f7ff fb40 	bl	9194 <_ZL7spiSendh>

  status_ = spiRec();
    9b14:	f7ff fb52 	bl	91bc <_ZL6spiRecv>
    9b18:	0003      	movs	r3, r0
    9b1a:	001a      	movs	r2, r3
    9b1c:	68fb      	ldr	r3, [r7, #12]
    9b1e:	72da      	strb	r2, [r3, #11]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    9b20:	68fb      	ldr	r3, [r7, #12]
    9b22:	7adb      	ldrb	r3, [r3, #11]
    9b24:	001a      	movs	r2, r3
    9b26:	231f      	movs	r3, #31
    9b28:	4013      	ands	r3, r2
    9b2a:	2b05      	cmp	r3, #5
    9b2c:	d00a      	beq.n	9b44 <_ZN7Sd2Card9writeDataEhPKh+0x90>
    error(SD_CARD_ERROR_WRITE);
    9b2e:	68fb      	ldr	r3, [r7, #12]
    9b30:	2111      	movs	r1, #17
    9b32:	0018      	movs	r0, r3
    9b34:	f7ff fac4 	bl	90c0 <_ZN7Sd2Card5errorEh>
    chipSelectHigh();
    9b38:	68fb      	ldr	r3, [r7, #12]
    9b3a:	0018      	movs	r0, r3
    9b3c:	f7ff fbce 	bl	92dc <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    9b40:	2300      	movs	r3, #0
    9b42:	e000      	b.n	9b46 <_ZN7Sd2Card9writeDataEhPKh+0x92>
  }
  return true;
    9b44:	2301      	movs	r3, #1
}
    9b46:	0018      	movs	r0, r3
    9b48:	46bd      	mov	sp, r7
    9b4a:	b006      	add	sp, #24
    9b4c:	bd80      	pop	{r7, pc}
    9b4e:	46c0      	nop			; (mov r8, r8)
    9b50:	000001ff 	.word	0x000001ff

00009b54 <_Z41__static_initialization_and_destruction_0ii>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    9b54:	b580      	push	{r7, lr}
    9b56:	b082      	sub	sp, #8
    9b58:	af00      	add	r7, sp, #0
    9b5a:	6078      	str	r0, [r7, #4]
    9b5c:	6039      	str	r1, [r7, #0]
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	2b01      	cmp	r3, #1
    9b62:	d107      	bne.n	9b74 <_Z41__static_initialization_and_destruction_0ii+0x20>
    9b64:	683b      	ldr	r3, [r7, #0]
    9b66:	4a05      	ldr	r2, [pc, #20]	; (9b7c <_Z41__static_initialization_and_destruction_0ii+0x28>)
    9b68:	4293      	cmp	r3, r2
    9b6a:	d103      	bne.n	9b74 <_Z41__static_initialization_and_destruction_0ii+0x20>
static SPISettings settings;
    9b6c:	4b04      	ldr	r3, [pc, #16]	; (9b80 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    9b6e:	0018      	movs	r0, r3
    9b70:	f7ff fac4 	bl	90fc <_ZN11SPISettingsC1Ev>
}
    9b74:	46c0      	nop			; (mov r8, r8)
    9b76:	46bd      	mov	sp, r7
    9b78:	b002      	add	sp, #8
    9b7a:	bd80      	pop	{r7, pc}
    9b7c:	0000ffff 	.word	0x0000ffff
    9b80:	20000958 	.word	0x20000958

00009b84 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    9b84:	b580      	push	{r7, lr}
    9b86:	af00      	add	r7, sp, #0
    9b88:	4b03      	ldr	r3, [pc, #12]	; (9b98 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x14>)
    9b8a:	0019      	movs	r1, r3
    9b8c:	2001      	movs	r0, #1
    9b8e:	f7ff ffe1 	bl	9b54 <_Z41__static_initialization_and_destruction_0ii>
    9b92:	46bd      	mov	sp, r7
    9b94:	bd80      	pop	{r7, pc}
    9b96:	46c0      	nop			; (mov r8, r8)
    9b98:	0000ffff 	.word	0x0000ffff

00009b9c <_ZL11DIR_IS_FILEPK14directoryEntry>:
  return (dir->attributes & DIR_ATT_LONG_NAME_MASK) == DIR_ATT_LONG_NAME;
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
    9b9c:	b580      	push	{r7, lr}
    9b9e:	b082      	sub	sp, #8
    9ba0:	af00      	add	r7, sp, #0
    9ba2:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    9ba4:	687b      	ldr	r3, [r7, #4]
    9ba6:	7adb      	ldrb	r3, [r3, #11]
    9ba8:	001a      	movs	r2, r3
    9baa:	2318      	movs	r3, #24
    9bac:	4013      	ands	r3, r2
    9bae:	425a      	negs	r2, r3
    9bb0:	4153      	adcs	r3, r2
    9bb2:	b2db      	uxtb	r3, r3
}
    9bb4:	0018      	movs	r0, r3
    9bb6:	46bd      	mov	sp, r7
    9bb8:	b002      	add	sp, #8
    9bba:	bd80      	pop	{r7, pc}

00009bbc <_ZL13DIR_IS_SUBDIRPK14directoryEntry>:
/** Directory entry is for a subdirectory */
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
    9bbc:	b580      	push	{r7, lr}
    9bbe:	b082      	sub	sp, #8
    9bc0:	af00      	add	r7, sp, #0
    9bc2:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
    9bc4:	687b      	ldr	r3, [r7, #4]
    9bc6:	7adb      	ldrb	r3, [r3, #11]
    9bc8:	001a      	movs	r2, r3
    9bca:	2318      	movs	r3, #24
    9bcc:	4013      	ands	r3, r2
    9bce:	3b10      	subs	r3, #16
    9bd0:	425a      	negs	r2, r3
    9bd2:	4153      	adcs	r3, r2
    9bd4:	b2db      	uxtb	r3, r3
}
    9bd6:	0018      	movs	r0, r3
    9bd8:	46bd      	mov	sp, r7
    9bda:	b002      	add	sp, #8
    9bdc:	bd80      	pop	{r7, pc}

00009bde <_ZNK6SdFile6isFileEv>:
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
    9bde:	b580      	push	{r7, lr}
    9be0:	b082      	sub	sp, #8
    9be2:	af00      	add	r7, sp, #0
    9be4:	6078      	str	r0, [r7, #4]
    9be6:	687b      	ldr	r3, [r7, #4]
    9be8:	7a5b      	ldrb	r3, [r3, #9]
    9bea:	3b01      	subs	r3, #1
    9bec:	425a      	negs	r2, r3
    9bee:	4153      	adcs	r3, r2
    9bf0:	b2db      	uxtb	r3, r3
    9bf2:	0018      	movs	r0, r3
    9bf4:	46bd      	mov	sp, r7
    9bf6:	b002      	add	sp, #8
    9bf8:	bd80      	pop	{r7, pc}

00009bfa <_ZN6SdFile7seekEndEv>:
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    9bfa:	b580      	push	{r7, lr}
    9bfc:	b082      	sub	sp, #8
    9bfe:	af00      	add	r7, sp, #0
    9c00:	6078      	str	r0, [r7, #4]
    9c02:	687b      	ldr	r3, [r7, #4]
    9c04:	69da      	ldr	r2, [r3, #28]
    9c06:	687b      	ldr	r3, [r7, #4]
    9c08:	0011      	movs	r1, r2
    9c0a:	0018      	movs	r0, r3
    9c0c:	f000 fdda 	bl	a7c4 <_ZN6SdFile7seekSetEm>
    9c10:	0003      	movs	r3, r0
    9c12:	0018      	movs	r0, r3
    9c14:	46bd      	mov	sp, r7
    9c16:	b002      	add	sp, #8
    9c18:	bd80      	pop	{r7, pc}

00009c1a <_ZNK6SdFile14unbufferedReadEv>:
  uint8_t unbufferedRead(void) const {
    9c1a:	b580      	push	{r7, lr}
    9c1c:	b082      	sub	sp, #8
    9c1e:	af00      	add	r7, sp, #0
    9c20:	6078      	str	r0, [r7, #4]
    return flags_ & F_FILE_UNBUFFERED_READ;
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	7a1b      	ldrb	r3, [r3, #8]
    9c26:	2240      	movs	r2, #64	; 0x40
    9c28:	4013      	ands	r3, r2
    9c2a:	b2db      	uxtb	r3, r3
  }
    9c2c:	0018      	movs	r0, r3
    9c2e:	46bd      	mov	sp, r7
    9c30:	b002      	add	sp, #8
    9c32:	bd80      	pop	{r7, pc}

00009c34 <_ZNK8SdVolume7fatTypeEv>:
  uint8_t fatType(void) const {return fatType_;}
    9c34:	b580      	push	{r7, lr}
    9c36:	b082      	sub	sp, #8
    9c38:	af00      	add	r7, sp, #0
    9c3a:	6078      	str	r0, [r7, #4]
    9c3c:	687b      	ldr	r3, [r7, #4]
    9c3e:	2220      	movs	r2, #32
    9c40:	5c9b      	ldrb	r3, [r3, r2]
    9c42:	0018      	movs	r0, r3
    9c44:	46bd      	mov	sp, r7
    9c46:	b002      	add	sp, #8
    9c48:	bd80      	pop	{r7, pc}

00009c4a <_ZNK8SdVolume17rootDirEntryCountEv>:
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
    9c4a:	b580      	push	{r7, lr}
    9c4c:	b082      	sub	sp, #8
    9c4e:	af00      	add	r7, sp, #0
    9c50:	6078      	str	r0, [r7, #4]
    9c52:	687b      	ldr	r3, [r7, #4]
    9c54:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9c56:	0018      	movs	r0, r3
    9c58:	46bd      	mov	sp, r7
    9c5a:	b002      	add	sp, #8
    9c5c:	bd80      	pop	{r7, pc}

00009c5e <_ZNK8SdVolume12rootDirStartEv>:
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    9c5e:	b580      	push	{r7, lr}
    9c60:	b082      	sub	sp, #8
    9c62:	af00      	add	r7, sp, #0
    9c64:	6078      	str	r0, [r7, #4]
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9c6a:	0018      	movs	r0, r3
    9c6c:	46bd      	mov	sp, r7
    9c6e:	b002      	add	sp, #8
    9c70:	bd80      	pop	{r7, pc}

00009c72 <_ZNK8SdVolume14blockOfClusterEm>:
  uint8_t fatType_;             // volume type (12, 16, OR 32)
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    9c72:	b580      	push	{r7, lr}
    9c74:	b082      	sub	sp, #8
    9c76:	af00      	add	r7, sp, #0
    9c78:	6078      	str	r0, [r7, #4]
    9c7a:	6039      	str	r1, [r7, #0]
          return (position >> 9) & (blocksPerCluster_ - 1);}
    9c7c:	683b      	ldr	r3, [r7, #0]
    9c7e:	0a5b      	lsrs	r3, r3, #9
    9c80:	b2db      	uxtb	r3, r3
    9c82:	687a      	ldr	r2, [r7, #4]
    9c84:	7912      	ldrb	r2, [r2, #4]
    9c86:	3a01      	subs	r2, #1
    9c88:	b2d2      	uxtb	r2, r2
    9c8a:	4013      	ands	r3, r2
    9c8c:	b2db      	uxtb	r3, r3
    9c8e:	0018      	movs	r0, r3
    9c90:	46bd      	mov	sp, r7
    9c92:	b002      	add	sp, #8
    9c94:	bd80      	pop	{r7, pc}

00009c96 <_ZNK8SdVolume17clusterStartBlockEm>:
  uint32_t clusterStartBlock(uint32_t cluster) const {
    9c96:	b580      	push	{r7, lr}
    9c98:	b082      	sub	sp, #8
    9c9a:	af00      	add	r7, sp, #0
    9c9c:	6078      	str	r0, [r7, #4]
    9c9e:	6039      	str	r1, [r7, #0]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    9ca0:	687b      	ldr	r3, [r7, #4]
    9ca2:	695a      	ldr	r2, [r3, #20]
    9ca4:	683b      	ldr	r3, [r7, #0]
    9ca6:	3b02      	subs	r3, #2
    9ca8:	6879      	ldr	r1, [r7, #4]
    9caa:	7c09      	ldrb	r1, [r1, #16]
    9cac:	408b      	lsls	r3, r1
    9cae:	18d3      	adds	r3, r2, r3
    9cb0:	0018      	movs	r0, r3
    9cb2:	46bd      	mov	sp, r7
    9cb4:	b002      	add	sp, #8
    9cb6:	bd80      	pop	{r7, pc}

00009cb8 <_ZN8SdVolume13cacheSetDirtyEv>:
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    9cb8:	b580      	push	{r7, lr}
    9cba:	af00      	add	r7, sp, #0
    9cbc:	4b04      	ldr	r3, [pc, #16]	; (9cd0 <_ZN8SdVolume13cacheSetDirtyEv+0x18>)
    9cbe:	781b      	ldrb	r3, [r3, #0]
    9cc0:	2201      	movs	r2, #1
    9cc2:	4313      	orrs	r3, r2
    9cc4:	b2da      	uxtb	r2, r3
    9cc6:	4b02      	ldr	r3, [pc, #8]	; (9cd0 <_ZN8SdVolume13cacheSetDirtyEv+0x18>)
    9cc8:	701a      	strb	r2, [r3, #0]
    9cca:	46c0      	nop			; (mov r8, r8)
    9ccc:	46bd      	mov	sp, r7
    9cce:	bd80      	pop	{r7, pc}
    9cd0:	20000b6c 	.word	0x20000b6c

00009cd4 <_ZN8SdVolume9fatPutEOCEm>:
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    9cd4:	b580      	push	{r7, lr}
    9cd6:	b082      	sub	sp, #8
    9cd8:	af00      	add	r7, sp, #0
    9cda:	6078      	str	r0, [r7, #4]
    9cdc:	6039      	str	r1, [r7, #0]
    return fatPut(cluster, 0x0FFFFFFF);
    9cde:	4a05      	ldr	r2, [pc, #20]	; (9cf4 <_ZN8SdVolume9fatPutEOCEm+0x20>)
    9ce0:	6839      	ldr	r1, [r7, #0]
    9ce2:	687b      	ldr	r3, [r7, #4]
    9ce4:	0018      	movs	r0, r3
    9ce6:	f001 facb 	bl	b280 <_ZN8SdVolume6fatPutEmm>
    9cea:	0003      	movs	r3, r0
  }
    9cec:	0018      	movs	r0, r3
    9cee:	46bd      	mov	sp, r7
    9cf0:	b002      	add	sp, #8
    9cf2:	bd80      	pop	{r7, pc}
    9cf4:	0fffffff 	.word	0x0fffffff

00009cf8 <_ZNK8SdVolume5isEOCEm>:
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    9cf8:	b580      	push	{r7, lr}
    9cfa:	b082      	sub	sp, #8
    9cfc:	af00      	add	r7, sp, #0
    9cfe:	6078      	str	r0, [r7, #4]
    9d00:	6039      	str	r1, [r7, #0]
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    9d02:	687b      	ldr	r3, [r7, #4]
    9d04:	2220      	movs	r2, #32
    9d06:	5c9b      	ldrb	r3, [r3, r2]
    9d08:	2b10      	cmp	r3, #16
    9d0a:	d101      	bne.n	9d10 <_ZNK8SdVolume5isEOCEm+0x18>
    9d0c:	4a05      	ldr	r2, [pc, #20]	; (9d24 <_ZNK8SdVolume5isEOCEm+0x2c>)
    9d0e:	e000      	b.n	9d12 <_ZNK8SdVolume5isEOCEm+0x1a>
    9d10:	4a05      	ldr	r2, [pc, #20]	; (9d28 <_ZNK8SdVolume5isEOCEm+0x30>)
    9d12:	6839      	ldr	r1, [r7, #0]
    9d14:	2300      	movs	r3, #0
    9d16:	4291      	cmp	r1, r2
    9d18:	415b      	adcs	r3, r3
    9d1a:	b2db      	uxtb	r3, r3
  }
    9d1c:	0018      	movs	r0, r3
    9d1e:	46bd      	mov	sp, r7
    9d20:	b002      	add	sp, #8
    9d22:	bd80      	pop	{r7, pc}
    9d24:	0000fff8 	.word	0x0000fff8
    9d28:	0ffffff8 	.word	0x0ffffff8

00009d2c <_ZN8SdVolume8readDataEmttPh>:
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    9d2c:	b590      	push	{r4, r7, lr}
    9d2e:	b087      	sub	sp, #28
    9d30:	af02      	add	r7, sp, #8
    9d32:	60f8      	str	r0, [r7, #12]
    9d34:	60b9      	str	r1, [r7, #8]
    9d36:	0019      	movs	r1, r3
    9d38:	1dbb      	adds	r3, r7, #6
    9d3a:	801a      	strh	r2, [r3, #0]
    9d3c:	1d3b      	adds	r3, r7, #4
    9d3e:	1c0a      	adds	r2, r1, #0
    9d40:	801a      	strh	r2, [r3, #0]
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    9d42:	4b08      	ldr	r3, [pc, #32]	; (9d64 <_ZN8SdVolume8readDataEmttPh+0x38>)
    9d44:	6818      	ldr	r0, [r3, #0]
    9d46:	1d3b      	adds	r3, r7, #4
    9d48:	881c      	ldrh	r4, [r3, #0]
    9d4a:	1dbb      	adds	r3, r7, #6
    9d4c:	881a      	ldrh	r2, [r3, #0]
    9d4e:	68b9      	ldr	r1, [r7, #8]
    9d50:	6a3b      	ldr	r3, [r7, #32]
    9d52:	9300      	str	r3, [sp, #0]
    9d54:	0023      	movs	r3, r4
    9d56:	f7ff fc65 	bl	9624 <_ZN7Sd2Card8readDataEmttPh>
    9d5a:	0003      	movs	r3, r0
  }
    9d5c:	0018      	movs	r0, r3
    9d5e:	46bd      	mov	sp, r7
    9d60:	b005      	add	sp, #20
    9d62:	bd90      	pop	{r4, r7, pc}
    9d64:	20000b68 	.word	0x20000b68

00009d68 <_ZN8SdVolume10writeBlockEmPKh>:
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    9d68:	b580      	push	{r7, lr}
    9d6a:	b084      	sub	sp, #16
    9d6c:	af00      	add	r7, sp, #0
    9d6e:	60f8      	str	r0, [r7, #12]
    9d70:	60b9      	str	r1, [r7, #8]
    9d72:	607a      	str	r2, [r7, #4]
    return sdCard_->writeBlock(block, dst);
    9d74:	4b05      	ldr	r3, [pc, #20]	; (9d8c <_ZN8SdVolume10writeBlockEmPKh+0x24>)
    9d76:	681b      	ldr	r3, [r3, #0]
    9d78:	687a      	ldr	r2, [r7, #4]
    9d7a:	68b9      	ldr	r1, [r7, #8]
    9d7c:	0018      	movs	r0, r3
    9d7e:	f7ff fe23 	bl	99c8 <_ZN7Sd2Card10writeBlockEmPKh>
    9d82:	0003      	movs	r3, r0
  }
    9d84:	0018      	movs	r0, r3
    9d86:	46bd      	mov	sp, r7
    9d88:	b004      	add	sp, #16
    9d8a:	bd80      	pop	{r7, pc}
    9d8c:	20000b68 	.word	0x20000b68

00009d90 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    9d90:	b580      	push	{r7, lr}
    9d92:	b082      	sub	sp, #8
    9d94:	af00      	add	r7, sp, #0
    9d96:	6078      	str	r0, [r7, #4]
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    9d98:	687b      	ldr	r3, [r7, #4]
    9d9a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    9d9c:	687b      	ldr	r3, [r7, #4]
    9d9e:	330c      	adds	r3, #12
    9da0:	001a      	movs	r2, r3
    9da2:	2101      	movs	r1, #1
    9da4:	f001 f88e 	bl	aec4 <_ZN8SdVolume15allocContiguousEmPm>
    9da8:	0003      	movs	r3, r0
    9daa:	425a      	negs	r2, r3
    9dac:	4153      	adcs	r3, r2
    9dae:	b2db      	uxtb	r3, r3
    9db0:	2b00      	cmp	r3, #0
    9db2:	d001      	beq.n	9db8 <_ZN6SdFile10addClusterEv+0x28>
    9db4:	2300      	movs	r3, #0
    9db6:	e010      	b.n	9dda <_ZN6SdFile10addClusterEv+0x4a>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    9db8:	687b      	ldr	r3, [r7, #4]
    9dba:	6a1b      	ldr	r3, [r3, #32]
    9dbc:	2b00      	cmp	r3, #0
    9dbe:	d10b      	bne.n	9dd8 <_ZN6SdFile10addClusterEv+0x48>
    firstCluster_ = curCluster_;
    9dc0:	687b      	ldr	r3, [r7, #4]
    9dc2:	68da      	ldr	r2, [r3, #12]
    9dc4:	687b      	ldr	r3, [r7, #4]
    9dc6:	621a      	str	r2, [r3, #32]
    flags_ |= F_FILE_DIR_DIRTY;
    9dc8:	687b      	ldr	r3, [r7, #4]
    9dca:	7a1b      	ldrb	r3, [r3, #8]
    9dcc:	2280      	movs	r2, #128	; 0x80
    9dce:	4252      	negs	r2, r2
    9dd0:	4313      	orrs	r3, r2
    9dd2:	b2da      	uxtb	r2, r3
    9dd4:	687b      	ldr	r3, [r7, #4]
    9dd6:	721a      	strb	r2, [r3, #8]
  }
  return true;
    9dd8:	2301      	movs	r3, #1
}
    9dda:	0018      	movs	r0, r3
    9ddc:	46bd      	mov	sp, r7
    9dde:	b002      	add	sp, #8
    9de0:	bd80      	pop	{r7, pc}

00009de2 <_ZN6SdFile13addDirClusterEv>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    9de2:	b580      	push	{r7, lr}
    9de4:	b084      	sub	sp, #16
    9de6:	af00      	add	r7, sp, #0
    9de8:	6078      	str	r0, [r7, #4]
  if (!addCluster()) return false;
    9dea:	687b      	ldr	r3, [r7, #4]
    9dec:	0018      	movs	r0, r3
    9dee:	f7ff ffcf 	bl	9d90 <_ZN6SdFile10addClusterEv>
    9df2:	0003      	movs	r3, r0
    9df4:	425a      	negs	r2, r3
    9df6:	4153      	adcs	r3, r2
    9df8:	b2db      	uxtb	r3, r3
    9dfa:	2b00      	cmp	r3, #0
    9dfc:	d001      	beq.n	9e02 <_ZN6SdFile13addDirClusterEv+0x20>
    9dfe:	2300      	movs	r3, #0
    9e00:	e03a      	b.n	9e78 <_ZN6SdFile13addDirClusterEv+0x96>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    9e02:	687b      	ldr	r3, [r7, #4]
    9e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9e06:	687b      	ldr	r3, [r7, #4]
    9e08:	68db      	ldr	r3, [r3, #12]
    9e0a:	0019      	movs	r1, r3
    9e0c:	0010      	movs	r0, r2
    9e0e:	f7ff ff42 	bl	9c96 <_ZNK8SdVolume17clusterStartBlockEm>
    9e12:	0003      	movs	r3, r0
    9e14:	60bb      	str	r3, [r7, #8]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    9e16:	687b      	ldr	r3, [r7, #4]
    9e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9e1a:	230f      	movs	r3, #15
    9e1c:	18fb      	adds	r3, r7, r3
    9e1e:	7912      	ldrb	r2, [r2, #4]
    9e20:	701a      	strb	r2, [r3, #0]
    9e22:	230f      	movs	r3, #15
    9e24:	18fb      	adds	r3, r7, r3
    9e26:	781b      	ldrb	r3, [r3, #0]
    9e28:	2b00      	cmp	r3, #0
    9e2a:	d018      	beq.n	9e5e <_ZN6SdFile13addDirClusterEv+0x7c>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    9e2c:	230f      	movs	r3, #15
    9e2e:	18fb      	adds	r3, r7, r3
    9e30:	781a      	ldrb	r2, [r3, #0]
    9e32:	68bb      	ldr	r3, [r7, #8]
    9e34:	18d3      	adds	r3, r2, r3
    9e36:	3b01      	subs	r3, #1
    9e38:	0018      	movs	r0, r3
    9e3a:	f001 f963 	bl	b104 <_ZN8SdVolume14cacheZeroBlockEm>
    9e3e:	0003      	movs	r3, r0
    9e40:	425a      	negs	r2, r3
    9e42:	4153      	adcs	r3, r2
    9e44:	b2db      	uxtb	r3, r3
    9e46:	2b00      	cmp	r3, #0
    9e48:	d001      	beq.n	9e4e <_ZN6SdFile13addDirClusterEv+0x6c>
    9e4a:	2300      	movs	r3, #0
    9e4c:	e014      	b.n	9e78 <_ZN6SdFile13addDirClusterEv+0x96>
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    9e4e:	230f      	movs	r3, #15
    9e50:	18fb      	adds	r3, r7, r3
    9e52:	781a      	ldrb	r2, [r3, #0]
    9e54:	230f      	movs	r3, #15
    9e56:	18fb      	adds	r3, r7, r3
    9e58:	3a01      	subs	r2, #1
    9e5a:	701a      	strb	r2, [r3, #0]
    9e5c:	e7e1      	b.n	9e22 <_ZN6SdFile13addDirClusterEv+0x40>
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    9e5e:	687b      	ldr	r3, [r7, #4]
    9e60:	69da      	ldr	r2, [r3, #28]
    9e62:	687b      	ldr	r3, [r7, #4]
    9e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9e66:	7c1b      	ldrb	r3, [r3, #16]
    9e68:	0019      	movs	r1, r3
    9e6a:	2380      	movs	r3, #128	; 0x80
    9e6c:	009b      	lsls	r3, r3, #2
    9e6e:	408b      	lsls	r3, r1
    9e70:	18d2      	adds	r2, r2, r3
    9e72:	687b      	ldr	r3, [r7, #4]
    9e74:	61da      	str	r2, [r3, #28]
  return true;
    9e76:	2301      	movs	r3, #1
}
    9e78:	0018      	movs	r0, r3
    9e7a:	46bd      	mov	sp, r7
    9e7c:	b004      	add	sp, #16
    9e7e:	bd80      	pop	{r7, pc}

00009e80 <_ZN6SdFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    9e80:	b580      	push	{r7, lr}
    9e82:	b082      	sub	sp, #8
    9e84:	af00      	add	r7, sp, #0
    9e86:	6078      	str	r0, [r7, #4]
    9e88:	000a      	movs	r2, r1
    9e8a:	1cfb      	adds	r3, r7, #3
    9e8c:	701a      	strb	r2, [r3, #0]
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    9e8e:	687b      	ldr	r3, [r7, #4]
    9e90:	695a      	ldr	r2, [r3, #20]
    9e92:	1cfb      	adds	r3, r7, #3
    9e94:	781b      	ldrb	r3, [r3, #0]
    9e96:	0019      	movs	r1, r3
    9e98:	0010      	movs	r0, r2
    9e9a:	f001 f8f5 	bl	b088 <_ZN8SdVolume13cacheRawBlockEmh>
    9e9e:	0003      	movs	r3, r0
    9ea0:	425a      	negs	r2, r3
    9ea2:	4153      	adcs	r3, r2
    9ea4:	b2db      	uxtb	r3, r3
    9ea6:	2b00      	cmp	r3, #0
    9ea8:	d001      	beq.n	9eae <_ZN6SdFile13cacheDirEntryEh+0x2e>
    9eaa:	2300      	movs	r3, #0
    9eac:	e004      	b.n	9eb8 <_ZN6SdFile13cacheDirEntryEh+0x38>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    9eae:	687b      	ldr	r3, [r7, #4]
    9eb0:	7e1b      	ldrb	r3, [r3, #24]
    9eb2:	015a      	lsls	r2, r3, #5
    9eb4:	4b02      	ldr	r3, [pc, #8]	; (9ec0 <_ZN6SdFile13cacheDirEntryEh+0x40>)
    9eb6:	18d3      	adds	r3, r2, r3
}
    9eb8:	0018      	movs	r0, r3
    9eba:	46bd      	mov	sp, r7
    9ebc:	b002      	add	sp, #8
    9ebe:	bd80      	pop	{r7, pc}
    9ec0:	20000968 	.word	0x20000968

00009ec4 <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    9ec4:	b580      	push	{r7, lr}
    9ec6:	b082      	sub	sp, #8
    9ec8:	af00      	add	r7, sp, #0
    9eca:	6078      	str	r0, [r7, #4]
  if (!sync())return false;
    9ecc:	687b      	ldr	r3, [r7, #4]
    9ece:	0018      	movs	r0, r3
    9ed0:	f000 fce8 	bl	a8a4 <_ZN6SdFile4syncEv>
    9ed4:	0003      	movs	r3, r0
    9ed6:	425a      	negs	r2, r3
    9ed8:	4153      	adcs	r3, r2
    9eda:	b2db      	uxtb	r3, r3
    9edc:	2b00      	cmp	r3, #0
    9ede:	d001      	beq.n	9ee4 <_ZN6SdFile5closeEv+0x20>
    9ee0:	2300      	movs	r3, #0
    9ee2:	e003      	b.n	9eec <_ZN6SdFile5closeEv+0x28>
  type_ = FAT_FILE_TYPE_CLOSED;
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	2200      	movs	r2, #0
    9ee8:	725a      	strb	r2, [r3, #9]
  return true;
    9eea:	2301      	movs	r3, #1
}
    9eec:	0018      	movs	r0, r3
    9eee:	46bd      	mov	sp, r7
    9ef0:	b002      	add	sp, #8
    9ef2:	bd80      	pop	{r7, pc}

00009ef4 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    9ef4:	b590      	push	{r4, r7, lr}
    9ef6:	b08b      	sub	sp, #44	; 0x2c
    9ef8:	af00      	add	r7, sp, #0
    9efa:	6078      	str	r0, [r7, #4]
    9efc:	6039      	str	r1, [r7, #0]
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
    9efe:	2327      	movs	r3, #39	; 0x27
    9f00:	18fb      	adds	r3, r7, r3
    9f02:	2207      	movs	r2, #7
    9f04:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
    9f06:	2326      	movs	r3, #38	; 0x26
    9f08:	18fb      	adds	r3, r7, r3
    9f0a:	2200      	movs	r2, #0
    9f0c:	701a      	strb	r2, [r3, #0]
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    9f0e:	2326      	movs	r3, #38	; 0x26
    9f10:	18fb      	adds	r3, r7, r3
    9f12:	781b      	ldrb	r3, [r3, #0]
    9f14:	2b0a      	cmp	r3, #10
    9f16:	dc0c      	bgt.n	9f32 <_ZN6SdFile10make83NameEPKcPh+0x3e>
    9f18:	2326      	movs	r3, #38	; 0x26
    9f1a:	18fb      	adds	r3, r7, r3
    9f1c:	781b      	ldrb	r3, [r3, #0]
    9f1e:	2226      	movs	r2, #38	; 0x26
    9f20:	18ba      	adds	r2, r7, r2
    9f22:	1c59      	adds	r1, r3, #1
    9f24:	7011      	strb	r1, [r2, #0]
    9f26:	001a      	movs	r2, r3
    9f28:	683b      	ldr	r3, [r7, #0]
    9f2a:	189b      	adds	r3, r3, r2
    9f2c:	2220      	movs	r2, #32
    9f2e:	701a      	strb	r2, [r3, #0]
    9f30:	e7ed      	b.n	9f0e <_ZN6SdFile10make83NameEPKcPh+0x1a>
  i = 0;
    9f32:	2326      	movs	r3, #38	; 0x26
    9f34:	18fb      	adds	r3, r7, r3
    9f36:	2200      	movs	r2, #0
    9f38:	701a      	strb	r2, [r3, #0]
  while ((c = *str++) != '\0') {
    9f3a:	687b      	ldr	r3, [r7, #4]
    9f3c:	1c5a      	adds	r2, r3, #1
    9f3e:	607a      	str	r2, [r7, #4]
    9f40:	221f      	movs	r2, #31
    9f42:	18ba      	adds	r2, r7, r2
    9f44:	781b      	ldrb	r3, [r3, #0]
    9f46:	7013      	strb	r3, [r2, #0]
    9f48:	231f      	movs	r3, #31
    9f4a:	18fb      	adds	r3, r7, r3
    9f4c:	781b      	ldrb	r3, [r3, #0]
    9f4e:	1e5a      	subs	r2, r3, #1
    9f50:	4193      	sbcs	r3, r2
    9f52:	b2db      	uxtb	r3, r3
    9f54:	2b00      	cmp	r3, #0
    9f56:	d100      	bne.n	9f5a <_ZN6SdFile10make83NameEPKcPh+0x66>
    9f58:	e06a      	b.n	a030 <_ZN6SdFile10make83NameEPKcPh+0x13c>
    if (c == '.') {
    9f5a:	231f      	movs	r3, #31
    9f5c:	18fb      	adds	r3, r7, r3
    9f5e:	781b      	ldrb	r3, [r3, #0]
    9f60:	2b2e      	cmp	r3, #46	; 0x2e
    9f62:	d10f      	bne.n	9f84 <_ZN6SdFile10make83NameEPKcPh+0x90>
      if (n == 10) return false;  // only one dot allowed
    9f64:	2327      	movs	r3, #39	; 0x27
    9f66:	18fb      	adds	r3, r7, r3
    9f68:	781b      	ldrb	r3, [r3, #0]
    9f6a:	2b0a      	cmp	r3, #10
    9f6c:	d101      	bne.n	9f72 <_ZN6SdFile10make83NameEPKcPh+0x7e>
    9f6e:	2300      	movs	r3, #0
    9f70:	e064      	b.n	a03c <_ZN6SdFile10make83NameEPKcPh+0x148>
      n = 10;  // max index for full 8.3 name
    9f72:	2327      	movs	r3, #39	; 0x27
    9f74:	18fb      	adds	r3, r7, r3
    9f76:	220a      	movs	r2, #10
    9f78:	701a      	strb	r2, [r3, #0]
      i = 8;   // place for extension
    9f7a:	2326      	movs	r3, #38	; 0x26
    9f7c:	18fb      	adds	r3, r7, r3
    9f7e:	2208      	movs	r2, #8
    9f80:	701a      	strb	r2, [r3, #0]
    9f82:	e7da      	b.n	9f3a <_ZN6SdFile10make83NameEPKcPh+0x46>
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
#elif defined(__arm__)
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    9f84:	230c      	movs	r3, #12
    9f86:	18fb      	adds	r3, r7, r3
    9f88:	4a2e      	ldr	r2, [pc, #184]	; (a044 <_ZN6SdFile10make83NameEPKcPh+0x150>)
    9f8a:	ca13      	ldmia	r2!, {r0, r1, r4}
    9f8c:	c313      	stmia	r3!, {r0, r1, r4}
    9f8e:	6812      	ldr	r2, [r2, #0]
    9f90:	601a      	str	r2, [r3, #0]
      const uint8_t *p = valid;
    9f92:	230c      	movs	r3, #12
    9f94:	18fb      	adds	r3, r7, r3
    9f96:	623b      	str	r3, [r7, #32]
      while ((b = *p++)) if (b == c) return false;
    9f98:	6a3b      	ldr	r3, [r7, #32]
    9f9a:	1c5a      	adds	r2, r3, #1
    9f9c:	623a      	str	r2, [r7, #32]
    9f9e:	221e      	movs	r2, #30
    9fa0:	18ba      	adds	r2, r7, r2
    9fa2:	781b      	ldrb	r3, [r3, #0]
    9fa4:	7013      	strb	r3, [r2, #0]
    9fa6:	231e      	movs	r3, #30
    9fa8:	18fb      	adds	r3, r7, r3
    9faa:	781b      	ldrb	r3, [r3, #0]
    9fac:	1e5a      	subs	r2, r3, #1
    9fae:	4193      	sbcs	r3, r2
    9fb0:	b2db      	uxtb	r3, r3
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	d009      	beq.n	9fca <_ZN6SdFile10make83NameEPKcPh+0xd6>
    9fb6:	231e      	movs	r3, #30
    9fb8:	18fa      	adds	r2, r7, r3
    9fba:	231f      	movs	r3, #31
    9fbc:	18fb      	adds	r3, r7, r3
    9fbe:	7812      	ldrb	r2, [r2, #0]
    9fc0:	781b      	ldrb	r3, [r3, #0]
    9fc2:	429a      	cmp	r2, r3
    9fc4:	d1e8      	bne.n	9f98 <_ZN6SdFile10make83NameEPKcPh+0xa4>
    9fc6:	2300      	movs	r3, #0
    9fc8:	e038      	b.n	a03c <_ZN6SdFile10make83NameEPKcPh+0x148>
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    9fca:	2326      	movs	r3, #38	; 0x26
    9fcc:	18fb      	adds	r3, r7, r3
    9fce:	781a      	ldrb	r2, [r3, #0]
    9fd0:	2327      	movs	r3, #39	; 0x27
    9fd2:	18fb      	adds	r3, r7, r3
    9fd4:	781b      	ldrb	r3, [r3, #0]
    9fd6:	429a      	cmp	r2, r3
    9fd8:	dc09      	bgt.n	9fee <_ZN6SdFile10make83NameEPKcPh+0xfa>
    9fda:	231f      	movs	r3, #31
    9fdc:	18fb      	adds	r3, r7, r3
    9fde:	781b      	ldrb	r3, [r3, #0]
    9fe0:	2b20      	cmp	r3, #32
    9fe2:	dd04      	ble.n	9fee <_ZN6SdFile10make83NameEPKcPh+0xfa>
    9fe4:	231f      	movs	r3, #31
    9fe6:	18fb      	adds	r3, r7, r3
    9fe8:	781b      	ldrb	r3, [r3, #0]
    9fea:	2b7e      	cmp	r3, #126	; 0x7e
    9fec:	dd01      	ble.n	9ff2 <_ZN6SdFile10make83NameEPKcPh+0xfe>
    9fee:	2300      	movs	r3, #0
    9ff0:	e024      	b.n	a03c <_ZN6SdFile10make83NameEPKcPh+0x148>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    9ff2:	2326      	movs	r3, #38	; 0x26
    9ff4:	18fb      	adds	r3, r7, r3
    9ff6:	781b      	ldrb	r3, [r3, #0]
    9ff8:	2226      	movs	r2, #38	; 0x26
    9ffa:	18ba      	adds	r2, r7, r2
    9ffc:	1c59      	adds	r1, r3, #1
    9ffe:	7011      	strb	r1, [r2, #0]
    a000:	001a      	movs	r2, r3
    a002:	683b      	ldr	r3, [r7, #0]
    a004:	189a      	adds	r2, r3, r2
    a006:	231f      	movs	r3, #31
    a008:	18fb      	adds	r3, r7, r3
    a00a:	781b      	ldrb	r3, [r3, #0]
    a00c:	2b60      	cmp	r3, #96	; 0x60
    a00e:	dd0a      	ble.n	a026 <_ZN6SdFile10make83NameEPKcPh+0x132>
    a010:	231f      	movs	r3, #31
    a012:	18fb      	adds	r3, r7, r3
    a014:	781b      	ldrb	r3, [r3, #0]
    a016:	2b7a      	cmp	r3, #122	; 0x7a
    a018:	dc05      	bgt.n	a026 <_ZN6SdFile10make83NameEPKcPh+0x132>
    a01a:	231f      	movs	r3, #31
    a01c:	18fb      	adds	r3, r7, r3
    a01e:	781b      	ldrb	r3, [r3, #0]
    a020:	3b20      	subs	r3, #32
    a022:	b2db      	uxtb	r3, r3
    a024:	e002      	b.n	a02c <_ZN6SdFile10make83NameEPKcPh+0x138>
    a026:	231f      	movs	r3, #31
    a028:	18fb      	adds	r3, r7, r3
    a02a:	781b      	ldrb	r3, [r3, #0]
    a02c:	7013      	strb	r3, [r2, #0]
  while ((c = *str++) != '\0') {
    a02e:	e784      	b.n	9f3a <_ZN6SdFile10make83NameEPKcPh+0x46>
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    a030:	683b      	ldr	r3, [r7, #0]
    a032:	781b      	ldrb	r3, [r3, #0]
    a034:	3b20      	subs	r3, #32
    a036:	1e5a      	subs	r2, r3, #1
    a038:	4193      	sbcs	r3, r2
    a03a:	b2db      	uxtb	r3, r3
}
    a03c:	0018      	movs	r0, r3
    a03e:	46bd      	mov	sp, r7
    a040:	b00b      	add	sp, #44	; 0x2c
    a042:	bd90      	pop	{r4, r7, pc}
    a044:	000135d4 	.word	0x000135d4

0000a048 <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    a048:	b590      	push	{r4, r7, lr}
    a04a:	b08b      	sub	sp, #44	; 0x2c
    a04c:	af00      	add	r7, sp, #0
    a04e:	60f8      	str	r0, [r7, #12]
    a050:	60b9      	str	r1, [r7, #8]
    a052:	607a      	str	r2, [r7, #4]
    a054:	001a      	movs	r2, r3
    a056:	1cfb      	adds	r3, r7, #3
    a058:	701a      	strb	r2, [r3, #0]
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    a05a:	68fb      	ldr	r3, [r7, #12]
    a05c:	0018      	movs	r0, r3
    a05e:	f7fe fbbc 	bl	87da <_ZNK6SdFile6isOpenEv>
    a062:	0003      	movs	r3, r0
    a064:	1e5a      	subs	r2, r3, #1
    a066:	4193      	sbcs	r3, r2
    a068:	b2db      	uxtb	r3, r3
    a06a:	2b00      	cmp	r3, #0
    a06c:	d001      	beq.n	a072 <_ZN6SdFile4openEPS_PKch+0x2a>
    a06e:	2300      	movs	r3, #0
    a070:	e13c      	b.n	a2ec <_ZN6SdFile4openEPS_PKch+0x2a4>

  if (!make83Name(fileName, dname)) return false;
    a072:	2314      	movs	r3, #20
    a074:	18fa      	adds	r2, r7, r3
    a076:	687b      	ldr	r3, [r7, #4]
    a078:	0011      	movs	r1, r2
    a07a:	0018      	movs	r0, r3
    a07c:	f7ff ff3a 	bl	9ef4 <_ZN6SdFile10make83NameEPKcPh>
    a080:	0003      	movs	r3, r0
    a082:	425a      	negs	r2, r3
    a084:	4153      	adcs	r3, r2
    a086:	b2db      	uxtb	r3, r3
    a088:	2b00      	cmp	r3, #0
    a08a:	d001      	beq.n	a090 <_ZN6SdFile4openEPS_PKch+0x48>
    a08c:	2300      	movs	r3, #0
    a08e:	e12d      	b.n	a2ec <_ZN6SdFile4openEPS_PKch+0x2a4>
  vol_ = dirFile->vol_;
    a090:	68bb      	ldr	r3, [r7, #8]
    a092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a094:	68fb      	ldr	r3, [r7, #12]
    a096:	625a      	str	r2, [r3, #36]	; 0x24
  dirFile->rewind();
    a098:	68bb      	ldr	r3, [r7, #8]
    a09a:	0018      	movs	r0, r3
    a09c:	f7fe fd8c 	bl	8bb8 <_ZN6SdFile6rewindEv>

  // bool for empty entry found
  uint8_t emptyFound = false;
    a0a0:	2323      	movs	r3, #35	; 0x23
    a0a2:	18fb      	adds	r3, r7, r3
    a0a4:	2200      	movs	r2, #0
    a0a6:	701a      	strb	r2, [r3, #0]

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    a0a8:	68bb      	ldr	r3, [r7, #8]
    a0aa:	691a      	ldr	r2, [r3, #16]
    a0ac:	68bb      	ldr	r3, [r7, #8]
    a0ae:	69db      	ldr	r3, [r3, #28]
    a0b0:	429a      	cmp	r2, r3
    a0b2:	d252      	bcs.n	a15a <_ZN6SdFile4openEPS_PKch+0x112>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    a0b4:	68bb      	ldr	r3, [r7, #8]
    a0b6:	691b      	ldr	r3, [r3, #16]
    a0b8:	095b      	lsrs	r3, r3, #5
    a0ba:	b2da      	uxtb	r2, r3
    a0bc:	2322      	movs	r3, #34	; 0x22
    a0be:	18fb      	adds	r3, r7, r3
    a0c0:	210f      	movs	r1, #15
    a0c2:	400a      	ands	r2, r1
    a0c4:	701a      	strb	r2, [r3, #0]
    p = dirFile->readDirCache();
    a0c6:	68bb      	ldr	r3, [r7, #8]
    a0c8:	0018      	movs	r0, r3
    a0ca:	f000 fb43 	bl	a754 <_ZN6SdFile12readDirCacheEv>
    a0ce:	0003      	movs	r3, r0
    a0d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (p == NULL) return false;
    a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0d4:	2b00      	cmp	r3, #0
    a0d6:	d101      	bne.n	a0dc <_ZN6SdFile4openEPS_PKch+0x94>
    a0d8:	2300      	movs	r3, #0
    a0da:	e107      	b.n	a2ec <_ZN6SdFile4openEPS_PKch+0x2a4>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0de:	781b      	ldrb	r3, [r3, #0]
    a0e0:	2b00      	cmp	r3, #0
    a0e2:	d003      	beq.n	a0ec <_ZN6SdFile4openEPS_PKch+0xa4>
    a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0e6:	781b      	ldrb	r3, [r3, #0]
    a0e8:	2be5      	cmp	r3, #229	; 0xe5
    a0ea:	d116      	bne.n	a11a <_ZN6SdFile4openEPS_PKch+0xd2>
      // remember first empty slot
      if (!emptyFound) {
    a0ec:	2323      	movs	r3, #35	; 0x23
    a0ee:	18fb      	adds	r3, r7, r3
    a0f0:	781b      	ldrb	r3, [r3, #0]
    a0f2:	2b00      	cmp	r3, #0
    a0f4:	d10c      	bne.n	a110 <_ZN6SdFile4openEPS_PKch+0xc8>
        emptyFound = true;
    a0f6:	2323      	movs	r3, #35	; 0x23
    a0f8:	18fb      	adds	r3, r7, r3
    a0fa:	2201      	movs	r2, #1
    a0fc:	701a      	strb	r2, [r3, #0]
        dirIndex_ = index;
    a0fe:	68fb      	ldr	r3, [r7, #12]
    a100:	2222      	movs	r2, #34	; 0x22
    a102:	18ba      	adds	r2, r7, r2
    a104:	7812      	ldrb	r2, [r2, #0]
    a106:	761a      	strb	r2, [r3, #24]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    a108:	4b7a      	ldr	r3, [pc, #488]	; (a2f4 <_ZN6SdFile4openEPS_PKch+0x2ac>)
    a10a:	681a      	ldr	r2, [r3, #0]
    a10c:	68fb      	ldr	r3, [r7, #12]
    a10e:	615a      	str	r2, [r3, #20]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a112:	781b      	ldrb	r3, [r3, #0]
    a114:	2b00      	cmp	r3, #0
    a116:	d11f      	bne.n	a158 <_ZN6SdFile4openEPS_PKch+0x110>
    a118:	e01f      	b.n	a15a <_ZN6SdFile4openEPS_PKch+0x112>
    } else if (!memcmp(dname, p->name, 11)) {
    a11a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a11c:	2314      	movs	r3, #20
    a11e:	18fb      	adds	r3, r7, r3
    a120:	220b      	movs	r2, #11
    a122:	0018      	movs	r0, r3
    a124:	f006 fb66 	bl	107f4 <memcmp>
    a128:	1e03      	subs	r3, r0, #0
    a12a:	d1bd      	bne.n	a0a8 <_ZN6SdFile4openEPS_PKch+0x60>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    a12c:	1cfb      	adds	r3, r7, #3
    a12e:	781b      	ldrb	r3, [r3, #0]
    a130:	2230      	movs	r2, #48	; 0x30
    a132:	4013      	ands	r3, r2
    a134:	2b30      	cmp	r3, #48	; 0x30
    a136:	d101      	bne.n	a13c <_ZN6SdFile4openEPS_PKch+0xf4>
    a138:	2300      	movs	r3, #0
    a13a:	e0d7      	b.n	a2ec <_ZN6SdFile4openEPS_PKch+0x2a4>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    a13c:	2322      	movs	r3, #34	; 0x22
    a13e:	18fb      	adds	r3, r7, r3
    a140:	781b      	ldrb	r3, [r3, #0]
    a142:	220f      	movs	r2, #15
    a144:	4013      	ands	r3, r2
    a146:	b2d9      	uxtb	r1, r3
    a148:	1cfb      	adds	r3, r7, #3
    a14a:	781a      	ldrb	r2, [r3, #0]
    a14c:	68fb      	ldr	r3, [r7, #12]
    a14e:	0018      	movs	r0, r3
    a150:	f000 f8d6 	bl	a300 <_ZN6SdFile15openCachedEntryEhh>
    a154:	0003      	movs	r3, r0
    a156:	e0c9      	b.n	a2ec <_ZN6SdFile4openEPS_PKch+0x2a4>
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    a158:	e7a6      	b.n	a0a8 <_ZN6SdFile4openEPS_PKch+0x60>
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    a15a:	1cfb      	adds	r3, r7, #3
    a15c:	781b      	ldrb	r3, [r3, #0]
    a15e:	2212      	movs	r2, #18
    a160:	4013      	ands	r3, r2
    a162:	2b12      	cmp	r3, #18
    a164:	d001      	beq.n	a16a <_ZN6SdFile4openEPS_PKch+0x122>
    a166:	2300      	movs	r3, #0
    a168:	e0c0      	b.n	a2ec <_ZN6SdFile4openEPS_PKch+0x2a4>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    a16a:	2323      	movs	r3, #35	; 0x23
    a16c:	18fb      	adds	r3, r7, r3
    a16e:	781b      	ldrb	r3, [r3, #0]
    a170:	2b00      	cmp	r3, #0
    a172:	d00b      	beq.n	a18c <_ZN6SdFile4openEPS_PKch+0x144>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    a174:	68fb      	ldr	r3, [r7, #12]
    a176:	2101      	movs	r1, #1
    a178:	0018      	movs	r0, r3
    a17a:	f7ff fe81 	bl	9e80 <_ZN6SdFile13cacheDirEntryEh>
    a17e:	0003      	movs	r3, r0
    a180:	627b      	str	r3, [r7, #36]	; 0x24
    if (!p) return false;
    a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a184:	2b00      	cmp	r3, #0
    a186:	d118      	bne.n	a1ba <_ZN6SdFile4openEPS_PKch+0x172>
    a188:	2300      	movs	r3, #0
    a18a:	e0af      	b.n	a2ec <_ZN6SdFile4openEPS_PKch+0x2a4>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    a18c:	68bb      	ldr	r3, [r7, #8]
    a18e:	7a5b      	ldrb	r3, [r3, #9]
    a190:	2b02      	cmp	r3, #2
    a192:	d101      	bne.n	a198 <_ZN6SdFile4openEPS_PKch+0x150>
    a194:	2300      	movs	r3, #0
    a196:	e0a9      	b.n	a2ec <_ZN6SdFile4openEPS_PKch+0x2a4>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    a198:	68bb      	ldr	r3, [r7, #8]
    a19a:	0018      	movs	r0, r3
    a19c:	f7ff fe21 	bl	9de2 <_ZN6SdFile13addDirClusterEv>
    a1a0:	0003      	movs	r3, r0
    a1a2:	425a      	negs	r2, r3
    a1a4:	4153      	adcs	r3, r2
    a1a6:	b2db      	uxtb	r3, r3
    a1a8:	2b00      	cmp	r3, #0
    a1aa:	d001      	beq.n	a1b0 <_ZN6SdFile4openEPS_PKch+0x168>
    a1ac:	2300      	movs	r3, #0
    a1ae:	e09d      	b.n	a2ec <_ZN6SdFile4openEPS_PKch+0x2a4>

    // use first entry in cluster
    dirIndex_ = 0;
    a1b0:	68fb      	ldr	r3, [r7, #12]
    a1b2:	2200      	movs	r2, #0
    a1b4:	761a      	strb	r2, [r3, #24]
    p = SdVolume::cacheBuffer_.dir;
    a1b6:	4b50      	ldr	r3, [pc, #320]	; (a2f8 <_ZN6SdFile4openEPS_PKch+0x2b0>)
    a1b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1bc:	2220      	movs	r2, #32
    a1be:	2100      	movs	r1, #0
    a1c0:	0018      	movs	r0, r3
    a1c2:	f006 fb2f 	bl	10824 <memset>
  memcpy(p->name, dname, 11);
    a1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a1c8:	2314      	movs	r3, #20
    a1ca:	18fb      	adds	r3, r7, r3
    a1cc:	0010      	movs	r0, r2
    a1ce:	0019      	movs	r1, r3
    a1d0:	230b      	movs	r3, #11
    a1d2:	001a      	movs	r2, r3
    a1d4:	f006 fb1d 	bl	10812 <memcpy>

  // set timestamps
  if (dateTime_) {
    a1d8:	4b48      	ldr	r3, [pc, #288]	; (a2fc <_ZN6SdFile4openEPS_PKch+0x2b4>)
    a1da:	681b      	ldr	r3, [r3, #0]
    a1dc:	2b00      	cmp	r3, #0
    a1de:	d009      	beq.n	a1f4 <_ZN6SdFile4openEPS_PKch+0x1ac>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    a1e0:	4b46      	ldr	r3, [pc, #280]	; (a2fc <_ZN6SdFile4openEPS_PKch+0x2b4>)
    a1e2:	681b      	ldr	r3, [r3, #0]
    a1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a1e6:	3210      	adds	r2, #16
    a1e8:	0010      	movs	r0, r2
    a1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a1ec:	320e      	adds	r2, #14
    a1ee:	0011      	movs	r1, r2
    a1f0:	4798      	blx	r3
    a1f2:	e01a      	b.n	a22a <_ZN6SdFile4openEPS_PKch+0x1e2>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1f6:	7c1a      	ldrb	r2, [r3, #16]
    a1f8:	2100      	movs	r1, #0
    a1fa:	400a      	ands	r2, r1
    a1fc:	1c11      	adds	r1, r2, #0
    a1fe:	2221      	movs	r2, #33	; 0x21
    a200:	430a      	orrs	r2, r1
    a202:	741a      	strb	r2, [r3, #16]
    a204:	7c5a      	ldrb	r2, [r3, #17]
    a206:	2100      	movs	r1, #0
    a208:	400a      	ands	r2, r1
    a20a:	1c11      	adds	r1, r2, #0
    a20c:	2228      	movs	r2, #40	; 0x28
    a20e:	430a      	orrs	r2, r1
    a210:	745a      	strb	r2, [r3, #17]
    p->creationTime = FAT_DEFAULT_TIME;
    a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a214:	7b9a      	ldrb	r2, [r3, #14]
    a216:	2100      	movs	r1, #0
    a218:	400a      	ands	r2, r1
    a21a:	739a      	strb	r2, [r3, #14]
    a21c:	7bda      	ldrb	r2, [r3, #15]
    a21e:	2100      	movs	r1, #0
    a220:	400a      	ands	r2, r1
    a222:	1c11      	adds	r1, r2, #0
    a224:	2208      	movs	r2, #8
    a226:	430a      	orrs	r2, r1
    a228:	73da      	strb	r2, [r3, #15]
  }
  p->lastAccessDate = p->creationDate;
    a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a22c:	7c1a      	ldrb	r2, [r3, #16]
    a22e:	7c5b      	ldrb	r3, [r3, #17]
    a230:	021b      	lsls	r3, r3, #8
    a232:	4313      	orrs	r3, r2
    a234:	b29a      	uxth	r2, r3
    a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a238:	21ff      	movs	r1, #255	; 0xff
    a23a:	4011      	ands	r1, r2
    a23c:	000c      	movs	r4, r1
    a23e:	7c99      	ldrb	r1, [r3, #18]
    a240:	2000      	movs	r0, #0
    a242:	4001      	ands	r1, r0
    a244:	1c08      	adds	r0, r1, #0
    a246:	1c21      	adds	r1, r4, #0
    a248:	4301      	orrs	r1, r0
    a24a:	7499      	strb	r1, [r3, #18]
    a24c:	0a12      	lsrs	r2, r2, #8
    a24e:	b290      	uxth	r0, r2
    a250:	7cda      	ldrb	r2, [r3, #19]
    a252:	2100      	movs	r1, #0
    a254:	400a      	ands	r2, r1
    a256:	1c11      	adds	r1, r2, #0
    a258:	1c02      	adds	r2, r0, #0
    a25a:	430a      	orrs	r2, r1
    a25c:	74da      	strb	r2, [r3, #19]
  p->lastWriteDate = p->creationDate;
    a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a260:	7c1a      	ldrb	r2, [r3, #16]
    a262:	7c5b      	ldrb	r3, [r3, #17]
    a264:	021b      	lsls	r3, r3, #8
    a266:	4313      	orrs	r3, r2
    a268:	b29a      	uxth	r2, r3
    a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a26c:	21ff      	movs	r1, #255	; 0xff
    a26e:	4011      	ands	r1, r2
    a270:	000c      	movs	r4, r1
    a272:	7e19      	ldrb	r1, [r3, #24]
    a274:	2000      	movs	r0, #0
    a276:	4001      	ands	r1, r0
    a278:	1c08      	adds	r0, r1, #0
    a27a:	1c21      	adds	r1, r4, #0
    a27c:	4301      	orrs	r1, r0
    a27e:	7619      	strb	r1, [r3, #24]
    a280:	0a12      	lsrs	r2, r2, #8
    a282:	b290      	uxth	r0, r2
    a284:	7e5a      	ldrb	r2, [r3, #25]
    a286:	2100      	movs	r1, #0
    a288:	400a      	ands	r2, r1
    a28a:	1c11      	adds	r1, r2, #0
    a28c:	1c02      	adds	r2, r0, #0
    a28e:	430a      	orrs	r2, r1
    a290:	765a      	strb	r2, [r3, #25]
  p->lastWriteTime = p->creationTime;
    a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a294:	7b9a      	ldrb	r2, [r3, #14]
    a296:	7bdb      	ldrb	r3, [r3, #15]
    a298:	021b      	lsls	r3, r3, #8
    a29a:	4313      	orrs	r3, r2
    a29c:	b29a      	uxth	r2, r3
    a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2a0:	21ff      	movs	r1, #255	; 0xff
    a2a2:	4011      	ands	r1, r2
    a2a4:	000c      	movs	r4, r1
    a2a6:	7d99      	ldrb	r1, [r3, #22]
    a2a8:	2000      	movs	r0, #0
    a2aa:	4001      	ands	r1, r0
    a2ac:	1c08      	adds	r0, r1, #0
    a2ae:	1c21      	adds	r1, r4, #0
    a2b0:	4301      	orrs	r1, r0
    a2b2:	7599      	strb	r1, [r3, #22]
    a2b4:	0a12      	lsrs	r2, r2, #8
    a2b6:	b290      	uxth	r0, r2
    a2b8:	7dda      	ldrb	r2, [r3, #23]
    a2ba:	2100      	movs	r1, #0
    a2bc:	400a      	ands	r2, r1
    a2be:	1c11      	adds	r1, r2, #0
    a2c0:	1c02      	adds	r2, r0, #0
    a2c2:	430a      	orrs	r2, r1
    a2c4:	75da      	strb	r2, [r3, #23]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    a2c6:	f000 fea1 	bl	b00c <_ZN8SdVolume10cacheFlushEv>
    a2ca:	0003      	movs	r3, r0
    a2cc:	425a      	negs	r2, r3
    a2ce:	4153      	adcs	r3, r2
    a2d0:	b2db      	uxtb	r3, r3
    a2d2:	2b00      	cmp	r3, #0
    a2d4:	d001      	beq.n	a2da <_ZN6SdFile4openEPS_PKch+0x292>
    a2d6:	2300      	movs	r3, #0
    a2d8:	e008      	b.n	a2ec <_ZN6SdFile4openEPS_PKch+0x2a4>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    a2da:	68fb      	ldr	r3, [r7, #12]
    a2dc:	7e19      	ldrb	r1, [r3, #24]
    a2de:	1cfb      	adds	r3, r7, #3
    a2e0:	781a      	ldrb	r2, [r3, #0]
    a2e2:	68fb      	ldr	r3, [r7, #12]
    a2e4:	0018      	movs	r0, r3
    a2e6:	f000 f80b 	bl	a300 <_ZN6SdFile15openCachedEntryEhh>
    a2ea:	0003      	movs	r3, r0
}
    a2ec:	0018      	movs	r0, r3
    a2ee:	46bd      	mov	sp, r7
    a2f0:	b00b      	add	sp, #44	; 0x2c
    a2f2:	bd90      	pop	{r4, r7, pc}
    a2f4:	2000004c 	.word	0x2000004c
    a2f8:	20000968 	.word	0x20000968
    a2fc:	20000964 	.word	0x20000964

0000a300 <_ZN6SdFile15openCachedEntryEhh>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    a300:	b580      	push	{r7, lr}
    a302:	b084      	sub	sp, #16
    a304:	af00      	add	r7, sp, #0
    a306:	6078      	str	r0, [r7, #4]
    a308:	0008      	movs	r0, r1
    a30a:	0011      	movs	r1, r2
    a30c:	1cfb      	adds	r3, r7, #3
    a30e:	1c02      	adds	r2, r0, #0
    a310:	701a      	strb	r2, [r3, #0]
    a312:	1cbb      	adds	r3, r7, #2
    a314:	1c0a      	adds	r2, r1, #0
    a316:	701a      	strb	r2, [r3, #0]
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    a318:	1cfb      	adds	r3, r7, #3
    a31a:	781b      	ldrb	r3, [r3, #0]
    a31c:	015a      	lsls	r2, r3, #5
    a31e:	4b43      	ldr	r3, [pc, #268]	; (a42c <_ZN6SdFile15openCachedEntryEhh+0x12c>)
    a320:	18d3      	adds	r3, r2, r3
    a322:	60fb      	str	r3, [r7, #12]

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    a324:	68fb      	ldr	r3, [r7, #12]
    a326:	7adb      	ldrb	r3, [r3, #11]
    a328:	001a      	movs	r2, r3
    a32a:	2311      	movs	r3, #17
    a32c:	4013      	ands	r3, r2
    a32e:	d006      	beq.n	a33e <_ZN6SdFile15openCachedEntryEhh+0x3e>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    a330:	1cbb      	adds	r3, r7, #2
    a332:	781b      	ldrb	r3, [r3, #0]
    a334:	2242      	movs	r2, #66	; 0x42
    a336:	4013      	ands	r3, r2
    a338:	d001      	beq.n	a33e <_ZN6SdFile15openCachedEntryEhh+0x3e>
    a33a:	2300      	movs	r3, #0
    a33c:	e072      	b.n	a424 <_ZN6SdFile15openCachedEntryEhh+0x124>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    a33e:	687b      	ldr	r3, [r7, #4]
    a340:	1cfa      	adds	r2, r7, #3
    a342:	7812      	ldrb	r2, [r2, #0]
    a344:	761a      	strb	r2, [r3, #24]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    a346:	4b3a      	ldr	r3, [pc, #232]	; (a430 <_ZN6SdFile15openCachedEntryEhh+0x130>)
    a348:	681a      	ldr	r2, [r3, #0]
    a34a:	687b      	ldr	r3, [r7, #4]
    a34c:	615a      	str	r2, [r3, #20]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    a34e:	68fb      	ldr	r3, [r7, #12]
    a350:	7d1a      	ldrb	r2, [r3, #20]
    a352:	7d5b      	ldrb	r3, [r3, #21]
    a354:	021b      	lsls	r3, r3, #8
    a356:	4313      	orrs	r3, r2
    a358:	b29b      	uxth	r3, r3
    a35a:	041a      	lsls	r2, r3, #16
    a35c:	687b      	ldr	r3, [r7, #4]
    a35e:	621a      	str	r2, [r3, #32]
  firstCluster_ |= p->firstClusterLow;
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	6a1a      	ldr	r2, [r3, #32]
    a364:	68fb      	ldr	r3, [r7, #12]
    a366:	7e99      	ldrb	r1, [r3, #26]
    a368:	7edb      	ldrb	r3, [r3, #27]
    a36a:	021b      	lsls	r3, r3, #8
    a36c:	430b      	orrs	r3, r1
    a36e:	b29b      	uxth	r3, r3
    a370:	431a      	orrs	r2, r3
    a372:	687b      	ldr	r3, [r7, #4]
    a374:	621a      	str	r2, [r3, #32]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    a376:	68fb      	ldr	r3, [r7, #12]
    a378:	0018      	movs	r0, r3
    a37a:	f7ff fc0f 	bl	9b9c <_ZL11DIR_IS_FILEPK14directoryEntry>
    a37e:	0003      	movs	r3, r0
    a380:	1e5a      	subs	r2, r3, #1
    a382:	4193      	sbcs	r3, r2
    a384:	b2db      	uxtb	r3, r3
    a386:	2b00      	cmp	r3, #0
    a388:	d011      	beq.n	a3ae <_ZN6SdFile15openCachedEntryEhh+0xae>
    fileSize_ = p->fileSize;
    a38a:	68fb      	ldr	r3, [r7, #12]
    a38c:	7f1a      	ldrb	r2, [r3, #28]
    a38e:	7f59      	ldrb	r1, [r3, #29]
    a390:	0209      	lsls	r1, r1, #8
    a392:	430a      	orrs	r2, r1
    a394:	7f99      	ldrb	r1, [r3, #30]
    a396:	0409      	lsls	r1, r1, #16
    a398:	430a      	orrs	r2, r1
    a39a:	7fdb      	ldrb	r3, [r3, #31]
    a39c:	061b      	lsls	r3, r3, #24
    a39e:	4313      	orrs	r3, r2
    a3a0:	001a      	movs	r2, r3
    a3a2:	687b      	ldr	r3, [r7, #4]
    a3a4:	61da      	str	r2, [r3, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
    a3a6:	687b      	ldr	r3, [r7, #4]
    a3a8:	2201      	movs	r2, #1
    a3aa:	725a      	strb	r2, [r3, #9]
    a3ac:	e020      	b.n	a3f0 <_ZN6SdFile15openCachedEntryEhh+0xf0>
  } else if (DIR_IS_SUBDIR(p)) {
    a3ae:	68fb      	ldr	r3, [r7, #12]
    a3b0:	0018      	movs	r0, r3
    a3b2:	f7ff fc03 	bl	9bbc <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
    a3b6:	0003      	movs	r3, r0
    a3b8:	1e5a      	subs	r2, r3, #1
    a3ba:	4193      	sbcs	r3, r2
    a3bc:	b2db      	uxtb	r3, r3
    a3be:	2b00      	cmp	r3, #0
    a3c0:	d014      	beq.n	a3ec <_ZN6SdFile15openCachedEntryEhh+0xec>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    a3c2:	687b      	ldr	r3, [r7, #4]
    a3c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a3c6:	687b      	ldr	r3, [r7, #4]
    a3c8:	6a19      	ldr	r1, [r3, #32]
    a3ca:	687b      	ldr	r3, [r7, #4]
    a3cc:	331c      	adds	r3, #28
    a3ce:	001a      	movs	r2, r3
    a3d0:	f000 fece 	bl	b170 <_ZNK8SdVolume9chainSizeEmPm>
    a3d4:	0003      	movs	r3, r0
    a3d6:	425a      	negs	r2, r3
    a3d8:	4153      	adcs	r3, r2
    a3da:	b2db      	uxtb	r3, r3
    a3dc:	2b00      	cmp	r3, #0
    a3de:	d001      	beq.n	a3e4 <_ZN6SdFile15openCachedEntryEhh+0xe4>
    a3e0:	2300      	movs	r3, #0
    a3e2:	e01f      	b.n	a424 <_ZN6SdFile15openCachedEntryEhh+0x124>
    type_ = FAT_FILE_TYPE_SUBDIR;
    a3e4:	687b      	ldr	r3, [r7, #4]
    a3e6:	2204      	movs	r2, #4
    a3e8:	725a      	strb	r2, [r3, #9]
    a3ea:	e001      	b.n	a3f0 <_ZN6SdFile15openCachedEntryEhh+0xf0>
  } else {
    return false;
    a3ec:	2300      	movs	r3, #0
    a3ee:	e019      	b.n	a424 <_ZN6SdFile15openCachedEntryEhh+0x124>
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    a3f0:	1cbb      	adds	r3, r7, #2
    a3f2:	781b      	ldrb	r3, [r3, #0]
    a3f4:	220f      	movs	r2, #15
    a3f6:	4013      	ands	r3, r2
    a3f8:	b2da      	uxtb	r2, r3
    a3fa:	687b      	ldr	r3, [r7, #4]
    a3fc:	721a      	strb	r2, [r3, #8]

  // set to start of file
  curCluster_ = 0;
    a3fe:	687b      	ldr	r3, [r7, #4]
    a400:	2200      	movs	r2, #0
    a402:	60da      	str	r2, [r3, #12]
  curPosition_ = 0;
    a404:	687b      	ldr	r3, [r7, #4]
    a406:	2200      	movs	r2, #0
    a408:	611a      	str	r2, [r3, #16]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    a40a:	1cbb      	adds	r3, r7, #2
    a40c:	781b      	ldrb	r3, [r3, #0]
    a40e:	2240      	movs	r2, #64	; 0x40
    a410:	4013      	ands	r3, r2
    a412:	d006      	beq.n	a422 <_ZN6SdFile15openCachedEntryEhh+0x122>
    a414:	687b      	ldr	r3, [r7, #4]
    a416:	2100      	movs	r1, #0
    a418:	0018      	movs	r0, r3
    a41a:	f000 fb01 	bl	aa20 <_ZN6SdFile8truncateEm>
    a41e:	0003      	movs	r3, r0
    a420:	e000      	b.n	a424 <_ZN6SdFile15openCachedEntryEhh+0x124>
  return true;
    a422:	2301      	movs	r3, #1
}
    a424:	0018      	movs	r0, r3
    a426:	46bd      	mov	sp, r7
    a428:	b004      	add	sp, #16
    a42a:	bd80      	pop	{r7, pc}
    a42c:	20000968 	.word	0x20000968
    a430:	2000004c 	.word	0x2000004c

0000a434 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    a434:	b580      	push	{r7, lr}
    a436:	b082      	sub	sp, #8
    a438:	af00      	add	r7, sp, #0
    a43a:	6078      	str	r0, [r7, #4]
    a43c:	6039      	str	r1, [r7, #0]
  // error if file is already open
  if (isOpen()) return false;
    a43e:	687b      	ldr	r3, [r7, #4]
    a440:	0018      	movs	r0, r3
    a442:	f7fe f9ca 	bl	87da <_ZNK6SdFile6isOpenEv>
    a446:	0003      	movs	r3, r0
    a448:	1e5a      	subs	r2, r3, #1
    a44a:	4193      	sbcs	r3, r2
    a44c:	b2db      	uxtb	r3, r3
    a44e:	2b00      	cmp	r3, #0
    a450:	d001      	beq.n	a456 <_ZN6SdFile8openRootEP8SdVolume+0x22>
    a452:	2300      	movs	r3, #0
    a454:	e054      	b.n	a500 <_ZN6SdFile8openRootEP8SdVolume+0xcc>

  if (vol->fatType() == 16) {
    a456:	683b      	ldr	r3, [r7, #0]
    a458:	0018      	movs	r0, r3
    a45a:	f7ff fbeb 	bl	9c34 <_ZNK8SdVolume7fatTypeEv>
    a45e:	0003      	movs	r3, r0
    a460:	3b10      	subs	r3, #16
    a462:	425a      	negs	r2, r3
    a464:	4153      	adcs	r3, r2
    a466:	b2db      	uxtb	r3, r3
    a468:	2b00      	cmp	r3, #0
    a46a:	d00e      	beq.n	a48a <_ZN6SdFile8openRootEP8SdVolume+0x56>
    type_ = FAT_FILE_TYPE_ROOT16;
    a46c:	687b      	ldr	r3, [r7, #4]
    a46e:	2202      	movs	r2, #2
    a470:	725a      	strb	r2, [r3, #9]
    firstCluster_ = 0;
    a472:	687b      	ldr	r3, [r7, #4]
    a474:	2200      	movs	r2, #0
    a476:	621a      	str	r2, [r3, #32]
    fileSize_ = 32 * vol->rootDirEntryCount();
    a478:	683b      	ldr	r3, [r7, #0]
    a47a:	0018      	movs	r0, r3
    a47c:	f7ff fbe5 	bl	9c4a <_ZNK8SdVolume17rootDirEntryCountEv>
    a480:	0003      	movs	r3, r0
    a482:	015a      	lsls	r2, r3, #5
    a484:	687b      	ldr	r3, [r7, #4]
    a486:	61da      	str	r2, [r3, #28]
    a488:	e027      	b.n	a4da <_ZN6SdFile8openRootEP8SdVolume+0xa6>
  } else if (vol->fatType() == 32) {
    a48a:	683b      	ldr	r3, [r7, #0]
    a48c:	0018      	movs	r0, r3
    a48e:	f7ff fbd1 	bl	9c34 <_ZNK8SdVolume7fatTypeEv>
    a492:	0003      	movs	r3, r0
    a494:	3b20      	subs	r3, #32
    a496:	425a      	negs	r2, r3
    a498:	4153      	adcs	r3, r2
    a49a:	b2db      	uxtb	r3, r3
    a49c:	2b00      	cmp	r3, #0
    a49e:	d01a      	beq.n	a4d6 <_ZN6SdFile8openRootEP8SdVolume+0xa2>
    type_ = FAT_FILE_TYPE_ROOT32;
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	2203      	movs	r2, #3
    a4a4:	725a      	strb	r2, [r3, #9]
    firstCluster_ = vol->rootDirStart();
    a4a6:	683b      	ldr	r3, [r7, #0]
    a4a8:	0018      	movs	r0, r3
    a4aa:	f7ff fbd8 	bl	9c5e <_ZNK8SdVolume12rootDirStartEv>
    a4ae:	0002      	movs	r2, r0
    a4b0:	687b      	ldr	r3, [r7, #4]
    a4b2:	621a      	str	r2, [r3, #32]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    a4b4:	687b      	ldr	r3, [r7, #4]
    a4b6:	6a19      	ldr	r1, [r3, #32]
    a4b8:	687b      	ldr	r3, [r7, #4]
    a4ba:	331c      	adds	r3, #28
    a4bc:	001a      	movs	r2, r3
    a4be:	683b      	ldr	r3, [r7, #0]
    a4c0:	0018      	movs	r0, r3
    a4c2:	f000 fe55 	bl	b170 <_ZNK8SdVolume9chainSizeEmPm>
    a4c6:	0003      	movs	r3, r0
    a4c8:	425a      	negs	r2, r3
    a4ca:	4153      	adcs	r3, r2
    a4cc:	b2db      	uxtb	r3, r3
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d003      	beq.n	a4da <_ZN6SdFile8openRootEP8SdVolume+0xa6>
    a4d2:	2300      	movs	r3, #0
    a4d4:	e014      	b.n	a500 <_ZN6SdFile8openRootEP8SdVolume+0xcc>
  } else {
    // volume is not initialized or FAT12
    return false;
    a4d6:	2300      	movs	r3, #0
    a4d8:	e012      	b.n	a500 <_ZN6SdFile8openRootEP8SdVolume+0xcc>
  }
  vol_ = vol;
    a4da:	687b      	ldr	r3, [r7, #4]
    a4dc:	683a      	ldr	r2, [r7, #0]
    a4de:	625a      	str	r2, [r3, #36]	; 0x24
  // read only
  flags_ = O_READ;
    a4e0:	687b      	ldr	r3, [r7, #4]
    a4e2:	2201      	movs	r2, #1
    a4e4:	721a      	strb	r2, [r3, #8]

  // set to start of file
  curCluster_ = 0;
    a4e6:	687b      	ldr	r3, [r7, #4]
    a4e8:	2200      	movs	r2, #0
    a4ea:	60da      	str	r2, [r3, #12]
  curPosition_ = 0;
    a4ec:	687b      	ldr	r3, [r7, #4]
    a4ee:	2200      	movs	r2, #0
    a4f0:	611a      	str	r2, [r3, #16]

  // root has no directory entry
  dirBlock_ = 0;
    a4f2:	687b      	ldr	r3, [r7, #4]
    a4f4:	2200      	movs	r2, #0
    a4f6:	615a      	str	r2, [r3, #20]
  dirIndex_ = 0;
    a4f8:	687b      	ldr	r3, [r7, #4]
    a4fa:	2200      	movs	r2, #0
    a4fc:	761a      	strb	r2, [r3, #24]
  return true;
    a4fe:	2301      	movs	r3, #1
}
    a500:	0018      	movs	r0, r3
    a502:	46bd      	mov	sp, r7
    a504:	b002      	add	sp, #8
    a506:	bd80      	pop	{r7, pc}

0000a508 <_ZN6SdFile4readEPvt>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    a508:	b590      	push	{r4, r7, lr}
    a50a:	b08f      	sub	sp, #60	; 0x3c
    a50c:	af02      	add	r7, sp, #8
    a50e:	60f8      	str	r0, [r7, #12]
    a510:	60b9      	str	r1, [r7, #8]
    a512:	1dbb      	adds	r3, r7, #6
    a514:	801a      	strh	r2, [r3, #0]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    a516:	68bb      	ldr	r3, [r7, #8]
    a518:	62fb      	str	r3, [r7, #44]	; 0x2c

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    a51a:	68fb      	ldr	r3, [r7, #12]
    a51c:	0018      	movs	r0, r3
    a51e:	f7fe f95c 	bl	87da <_ZNK6SdFile6isOpenEv>
    a522:	1e03      	subs	r3, r0, #0
    a524:	d005      	beq.n	a532 <_ZN6SdFile4readEPvt+0x2a>
    a526:	68fb      	ldr	r3, [r7, #12]
    a528:	7a1b      	ldrb	r3, [r3, #8]
    a52a:	001a      	movs	r2, r3
    a52c:	2301      	movs	r3, #1
    a52e:	4013      	ands	r3, r2
    a530:	d101      	bne.n	a536 <_ZN6SdFile4readEPvt+0x2e>
    a532:	2301      	movs	r3, #1
    a534:	e000      	b.n	a538 <_ZN6SdFile4readEPvt+0x30>
    a536:	2300      	movs	r3, #0
    a538:	2b00      	cmp	r3, #0
    a53a:	d002      	beq.n	a542 <_ZN6SdFile4readEPvt+0x3a>
    a53c:	2301      	movs	r3, #1
    a53e:	425b      	negs	r3, r3
    a540:	e0ff      	b.n	a742 <_ZN6SdFile4readEPvt+0x23a>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    a542:	1dbb      	adds	r3, r7, #6
    a544:	881a      	ldrh	r2, [r3, #0]
    a546:	68fb      	ldr	r3, [r7, #12]
    a548:	69d9      	ldr	r1, [r3, #28]
    a54a:	68fb      	ldr	r3, [r7, #12]
    a54c:	691b      	ldr	r3, [r3, #16]
    a54e:	1acb      	subs	r3, r1, r3
    a550:	429a      	cmp	r2, r3
    a552:	d908      	bls.n	a566 <_ZN6SdFile4readEPvt+0x5e>
    a554:	68fb      	ldr	r3, [r7, #12]
    a556:	69db      	ldr	r3, [r3, #28]
    a558:	b299      	uxth	r1, r3
    a55a:	68fb      	ldr	r3, [r7, #12]
    a55c:	691b      	ldr	r3, [r3, #16]
    a55e:	b29a      	uxth	r2, r3
    a560:	1dbb      	adds	r3, r7, #6
    a562:	1a8a      	subs	r2, r1, r2
    a564:	801a      	strh	r2, [r3, #0]

  // amount left to read
  uint16_t toRead = nbyte;
    a566:	232a      	movs	r3, #42	; 0x2a
    a568:	18fb      	adds	r3, r7, r3
    a56a:	1dba      	adds	r2, r7, #6
    a56c:	8812      	ldrh	r2, [r2, #0]
    a56e:	801a      	strh	r2, [r3, #0]
  while (toRead > 0) {
    a570:	232a      	movs	r3, #42	; 0x2a
    a572:	18fb      	adds	r3, r7, r3
    a574:	881b      	ldrh	r3, [r3, #0]
    a576:	2b00      	cmp	r3, #0
    a578:	dc00      	bgt.n	a57c <_ZN6SdFile4readEPvt+0x74>
    a57a:	e0df      	b.n	a73c <_ZN6SdFile4readEPvt+0x234>
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    a57c:	68fb      	ldr	r3, [r7, #12]
    a57e:	691b      	ldr	r3, [r3, #16]
    a580:	b29a      	uxth	r2, r3
    a582:	231a      	movs	r3, #26
    a584:	18fb      	adds	r3, r7, r3
    a586:	05d2      	lsls	r2, r2, #23
    a588:	0dd2      	lsrs	r2, r2, #23
    a58a:	801a      	strh	r2, [r3, #0]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    a58c:	68fb      	ldr	r3, [r7, #12]
    a58e:	7a5b      	ldrb	r3, [r3, #9]
    a590:	2b02      	cmp	r3, #2
    a592:	d10b      	bne.n	a5ac <_ZN6SdFile4readEPvt+0xa4>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    a594:	68fb      	ldr	r3, [r7, #12]
    a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a598:	0018      	movs	r0, r3
    a59a:	f7ff fb60 	bl	9c5e <_ZNK8SdVolume12rootDirStartEv>
    a59e:	0002      	movs	r2, r0
    a5a0:	68fb      	ldr	r3, [r7, #12]
    a5a2:	691b      	ldr	r3, [r3, #16]
    a5a4:	0a5b      	lsrs	r3, r3, #9
    a5a6:	18d3      	adds	r3, r2, r3
    a5a8:	627b      	str	r3, [r7, #36]	; 0x24
    a5aa:	e03e      	b.n	a62a <_ZN6SdFile4readEPvt+0x122>
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    a5ac:	68fb      	ldr	r3, [r7, #12]
    a5ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a5b0:	68fb      	ldr	r3, [r7, #12]
    a5b2:	691b      	ldr	r3, [r3, #16]
    a5b4:	2113      	movs	r1, #19
    a5b6:	187c      	adds	r4, r7, r1
    a5b8:	0019      	movs	r1, r3
    a5ba:	0010      	movs	r0, r2
    a5bc:	f7ff fb59 	bl	9c72 <_ZNK8SdVolume14blockOfClusterEm>
    a5c0:	0003      	movs	r3, r0
    a5c2:	7023      	strb	r3, [r4, #0]
      if (offset == 0 && blockOfCluster == 0) {
    a5c4:	231a      	movs	r3, #26
    a5c6:	18fb      	adds	r3, r7, r3
    a5c8:	881b      	ldrh	r3, [r3, #0]
    a5ca:	2b00      	cmp	r3, #0
    a5cc:	d11f      	bne.n	a60e <_ZN6SdFile4readEPvt+0x106>
    a5ce:	2313      	movs	r3, #19
    a5d0:	18fb      	adds	r3, r7, r3
    a5d2:	781b      	ldrb	r3, [r3, #0]
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d11a      	bne.n	a60e <_ZN6SdFile4readEPvt+0x106>
        // start of new cluster
        if (curPosition_ == 0) {
    a5d8:	68fb      	ldr	r3, [r7, #12]
    a5da:	691b      	ldr	r3, [r3, #16]
    a5dc:	2b00      	cmp	r3, #0
    a5de:	d104      	bne.n	a5ea <_ZN6SdFile4readEPvt+0xe2>
          // use first cluster in file
          curCluster_ = firstCluster_;
    a5e0:	68fb      	ldr	r3, [r7, #12]
    a5e2:	6a1a      	ldr	r2, [r3, #32]
    a5e4:	68fb      	ldr	r3, [r7, #12]
    a5e6:	60da      	str	r2, [r3, #12]
    a5e8:	e011      	b.n	a60e <_ZN6SdFile4readEPvt+0x106>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    a5ea:	68fb      	ldr	r3, [r7, #12]
    a5ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a5ee:	68fb      	ldr	r3, [r7, #12]
    a5f0:	68d9      	ldr	r1, [r3, #12]
    a5f2:	68fb      	ldr	r3, [r7, #12]
    a5f4:	330c      	adds	r3, #12
    a5f6:	001a      	movs	r2, r3
    a5f8:	f000 fdf0 	bl	b1dc <_ZNK8SdVolume6fatGetEmPm>
    a5fc:	0003      	movs	r3, r0
    a5fe:	425a      	negs	r2, r3
    a600:	4153      	adcs	r3, r2
    a602:	b2db      	uxtb	r3, r3
    a604:	2b00      	cmp	r3, #0
    a606:	d002      	beq.n	a60e <_ZN6SdFile4readEPvt+0x106>
    a608:	2301      	movs	r3, #1
    a60a:	425b      	negs	r3, r3
    a60c:	e099      	b.n	a742 <_ZN6SdFile4readEPvt+0x23a>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    a60e:	68fb      	ldr	r3, [r7, #12]
    a610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a612:	68fb      	ldr	r3, [r7, #12]
    a614:	68db      	ldr	r3, [r3, #12]
    a616:	0019      	movs	r1, r3
    a618:	0010      	movs	r0, r2
    a61a:	f7ff fb3c 	bl	9c96 <_ZNK8SdVolume17clusterStartBlockEm>
    a61e:	0002      	movs	r2, r0
    a620:	2313      	movs	r3, #19
    a622:	18fb      	adds	r3, r7, r3
    a624:	781b      	ldrb	r3, [r3, #0]
    a626:	18d3      	adds	r3, r2, r3
    a628:	627b      	str	r3, [r7, #36]	; 0x24
    }
    uint16_t n = toRead;
    a62a:	2322      	movs	r3, #34	; 0x22
    a62c:	18fb      	adds	r3, r7, r3
    a62e:	222a      	movs	r2, #42	; 0x2a
    a630:	18ba      	adds	r2, r7, r2
    a632:	8812      	ldrh	r2, [r2, #0]
    a634:	801a      	strh	r2, [r3, #0]

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    a636:	2322      	movs	r3, #34	; 0x22
    a638:	18fb      	adds	r3, r7, r3
    a63a:	881a      	ldrh	r2, [r3, #0]
    a63c:	231a      	movs	r3, #26
    a63e:	18fb      	adds	r3, r7, r3
    a640:	881b      	ldrh	r3, [r3, #0]
    a642:	2180      	movs	r1, #128	; 0x80
    a644:	0089      	lsls	r1, r1, #2
    a646:	1acb      	subs	r3, r1, r3
    a648:	429a      	cmp	r2, r3
    a64a:	dd08      	ble.n	a65e <_ZN6SdFile4readEPvt+0x156>
    a64c:	2322      	movs	r3, #34	; 0x22
    a64e:	18fb      	adds	r3, r7, r3
    a650:	221a      	movs	r2, #26
    a652:	18ba      	adds	r2, r7, r2
    a654:	8812      	ldrh	r2, [r2, #0]
    a656:	2180      	movs	r1, #128	; 0x80
    a658:	0089      	lsls	r1, r1, #2
    a65a:	1a8a      	subs	r2, r1, r2
    a65c:	801a      	strh	r2, [r3, #0]

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    a65e:	68fb      	ldr	r3, [r7, #12]
    a660:	0018      	movs	r0, r3
    a662:	f7ff fada 	bl	9c1a <_ZNK6SdFile14unbufferedReadEv>
    a666:	1e03      	subs	r3, r0, #0
    a668:	d106      	bne.n	a678 <_ZN6SdFile4readEPvt+0x170>
    a66a:	2322      	movs	r3, #34	; 0x22
    a66c:	18fb      	adds	r3, r7, r3
    a66e:	881a      	ldrh	r2, [r3, #0]
    a670:	2380      	movs	r3, #128	; 0x80
    a672:	009b      	lsls	r3, r3, #2
    a674:	429a      	cmp	r2, r3
    a676:	d106      	bne.n	a686 <_ZN6SdFile4readEPvt+0x17e>
      block != SdVolume::cacheBlockNumber_) {
    a678:	4b34      	ldr	r3, [pc, #208]	; (a74c <_ZN6SdFile4readEPvt+0x244>)
    a67a:	681b      	ldr	r3, [r3, #0]
    if ((unbufferedRead() || n == 512) &&
    a67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a67e:	429a      	cmp	r2, r3
    a680:	d001      	beq.n	a686 <_ZN6SdFile4readEPvt+0x17e>
    a682:	2301      	movs	r3, #1
    a684:	e000      	b.n	a688 <_ZN6SdFile4readEPvt+0x180>
    a686:	2300      	movs	r3, #0
    a688:	2b00      	cmp	r3, #0
    a68a:	d01d      	beq.n	a6c8 <_ZN6SdFile4readEPvt+0x1c0>
      if (!vol_->readData(block, offset, n, dst)) return -1;
    a68c:	68fb      	ldr	r3, [r7, #12]
    a68e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a690:	2322      	movs	r3, #34	; 0x22
    a692:	18fb      	adds	r3, r7, r3
    a694:	881c      	ldrh	r4, [r3, #0]
    a696:	231a      	movs	r3, #26
    a698:	18fb      	adds	r3, r7, r3
    a69a:	881a      	ldrh	r2, [r3, #0]
    a69c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a6a0:	9300      	str	r3, [sp, #0]
    a6a2:	0023      	movs	r3, r4
    a6a4:	f7ff fb42 	bl	9d2c <_ZN8SdVolume8readDataEmttPh>
    a6a8:	0003      	movs	r3, r0
    a6aa:	425a      	negs	r2, r3
    a6ac:	4153      	adcs	r3, r2
    a6ae:	b2db      	uxtb	r3, r3
    a6b0:	2b00      	cmp	r3, #0
    a6b2:	d002      	beq.n	a6ba <_ZN6SdFile4readEPvt+0x1b2>
    a6b4:	2301      	movs	r3, #1
    a6b6:	425b      	negs	r3, r3
    a6b8:	e043      	b.n	a742 <_ZN6SdFile4readEPvt+0x23a>
      dst += n;
    a6ba:	2322      	movs	r3, #34	; 0x22
    a6bc:	18fb      	adds	r3, r7, r3
    a6be:	881b      	ldrh	r3, [r3, #0]
    a6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a6c2:	18d3      	adds	r3, r2, r3
    a6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    a6c6:	e026      	b.n	a716 <_ZN6SdFile4readEPvt+0x20e>
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a6ca:	2100      	movs	r1, #0
    a6cc:	0018      	movs	r0, r3
    a6ce:	f000 fcdb 	bl	b088 <_ZN8SdVolume13cacheRawBlockEmh>
    a6d2:	0003      	movs	r3, r0
    a6d4:	425a      	negs	r2, r3
    a6d6:	4153      	adcs	r3, r2
    a6d8:	b2db      	uxtb	r3, r3
    a6da:	2b00      	cmp	r3, #0
    a6dc:	d002      	beq.n	a6e4 <_ZN6SdFile4readEPvt+0x1dc>
    a6de:	2301      	movs	r3, #1
    a6e0:	425b      	negs	r3, r3
    a6e2:	e02e      	b.n	a742 <_ZN6SdFile4readEPvt+0x23a>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    a6e4:	231a      	movs	r3, #26
    a6e6:	18fb      	adds	r3, r7, r3
    a6e8:	881a      	ldrh	r2, [r3, #0]
    a6ea:	4b19      	ldr	r3, [pc, #100]	; (a750 <_ZN6SdFile4readEPvt+0x248>)
    a6ec:	18d3      	adds	r3, r2, r3
    a6ee:	61fb      	str	r3, [r7, #28]
      uint8_t* end = src + n;
    a6f0:	2322      	movs	r3, #34	; 0x22
    a6f2:	18fb      	adds	r3, r7, r3
    a6f4:	881b      	ldrh	r3, [r3, #0]
    a6f6:	69fa      	ldr	r2, [r7, #28]
    a6f8:	18d3      	adds	r3, r2, r3
    a6fa:	617b      	str	r3, [r7, #20]
      while (src != end) *dst++ = *src++;
    a6fc:	69fa      	ldr	r2, [r7, #28]
    a6fe:	697b      	ldr	r3, [r7, #20]
    a700:	429a      	cmp	r2, r3
    a702:	d008      	beq.n	a716 <_ZN6SdFile4readEPvt+0x20e>
    a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a706:	1c5a      	adds	r2, r3, #1
    a708:	62fa      	str	r2, [r7, #44]	; 0x2c
    a70a:	69fa      	ldr	r2, [r7, #28]
    a70c:	1c51      	adds	r1, r2, #1
    a70e:	61f9      	str	r1, [r7, #28]
    a710:	7812      	ldrb	r2, [r2, #0]
    a712:	701a      	strb	r2, [r3, #0]
    a714:	e7f2      	b.n	a6fc <_ZN6SdFile4readEPvt+0x1f4>
    }
    curPosition_ += n;
    a716:	68fb      	ldr	r3, [r7, #12]
    a718:	691a      	ldr	r2, [r3, #16]
    a71a:	2322      	movs	r3, #34	; 0x22
    a71c:	18fb      	adds	r3, r7, r3
    a71e:	881b      	ldrh	r3, [r3, #0]
    a720:	18d2      	adds	r2, r2, r3
    a722:	68fb      	ldr	r3, [r7, #12]
    a724:	611a      	str	r2, [r3, #16]
    toRead -= n;
    a726:	232a      	movs	r3, #42	; 0x2a
    a728:	18fb      	adds	r3, r7, r3
    a72a:	222a      	movs	r2, #42	; 0x2a
    a72c:	18b9      	adds	r1, r7, r2
    a72e:	2222      	movs	r2, #34	; 0x22
    a730:	18ba      	adds	r2, r7, r2
    a732:	8809      	ldrh	r1, [r1, #0]
    a734:	8812      	ldrh	r2, [r2, #0]
    a736:	1a8a      	subs	r2, r1, r2
    a738:	801a      	strh	r2, [r3, #0]
  while (toRead > 0) {
    a73a:	e719      	b.n	a570 <_ZN6SdFile4readEPvt+0x68>
  }
  return nbyte;
    a73c:	1dbb      	adds	r3, r7, #6
    a73e:	2200      	movs	r2, #0
    a740:	5e9b      	ldrsh	r3, [r3, r2]
}
    a742:	0018      	movs	r0, r3
    a744:	46bd      	mov	sp, r7
    a746:	b00d      	add	sp, #52	; 0x34
    a748:	bd90      	pop	{r4, r7, pc}
    a74a:	46c0      	nop			; (mov r8, r8)
    a74c:	2000004c 	.word	0x2000004c
    a750:	20000968 	.word	0x20000968

0000a754 <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    a754:	b580      	push	{r7, lr}
    a756:	b084      	sub	sp, #16
    a758:	af00      	add	r7, sp, #0
    a75a:	6078      	str	r0, [r7, #4]
  // error if not directory
  if (!isDir()) return NULL;
    a75c:	687b      	ldr	r3, [r7, #4]
    a75e:	0018      	movs	r0, r3
    a760:	f7fe f82b 	bl	87ba <_ZNK6SdFile5isDirEv>
    a764:	0003      	movs	r3, r0
    a766:	425a      	negs	r2, r3
    a768:	4153      	adcs	r3, r2
    a76a:	b2db      	uxtb	r3, r3
    a76c:	2b00      	cmp	r3, #0
    a76e:	d001      	beq.n	a774 <_ZN6SdFile12readDirCacheEv+0x20>
    a770:	2300      	movs	r3, #0
    a772:	e020      	b.n	a7b6 <_ZN6SdFile12readDirCacheEv+0x62>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    a774:	687b      	ldr	r3, [r7, #4]
    a776:	691b      	ldr	r3, [r3, #16]
    a778:	095b      	lsrs	r3, r3, #5
    a77a:	b2da      	uxtb	r2, r3
    a77c:	230f      	movs	r3, #15
    a77e:	18fb      	adds	r3, r7, r3
    a780:	210f      	movs	r1, #15
    a782:	400a      	ands	r2, r1
    a784:	701a      	strb	r2, [r3, #0]

  // use read to locate and cache block
  if (read() < 0) return NULL;
    a786:	687b      	ldr	r3, [r7, #4]
    a788:	0018      	movs	r0, r3
    a78a:	f7fe f833 	bl	87f4 <_ZN6SdFile4readEv>
    a78e:	0003      	movs	r3, r0
    a790:	b29b      	uxth	r3, r3
    a792:	0bdb      	lsrs	r3, r3, #15
    a794:	b2db      	uxtb	r3, r3
    a796:	2b00      	cmp	r3, #0
    a798:	d001      	beq.n	a79e <_ZN6SdFile12readDirCacheEv+0x4a>
    a79a:	2300      	movs	r3, #0
    a79c:	e00b      	b.n	a7b6 <_ZN6SdFile12readDirCacheEv+0x62>

  // advance to next entry
  curPosition_ += 31;
    a79e:	687b      	ldr	r3, [r7, #4]
    a7a0:	691b      	ldr	r3, [r3, #16]
    a7a2:	331f      	adds	r3, #31
    a7a4:	001a      	movs	r2, r3
    a7a6:	687b      	ldr	r3, [r7, #4]
    a7a8:	611a      	str	r2, [r3, #16]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    a7aa:	230f      	movs	r3, #15
    a7ac:	18fb      	adds	r3, r7, r3
    a7ae:	781b      	ldrb	r3, [r3, #0]
    a7b0:	015a      	lsls	r2, r3, #5
    a7b2:	4b03      	ldr	r3, [pc, #12]	; (a7c0 <_ZN6SdFile12readDirCacheEv+0x6c>)
    a7b4:	18d3      	adds	r3, r2, r3
}
    a7b6:	0018      	movs	r0, r3
    a7b8:	46bd      	mov	sp, r7
    a7ba:	b004      	add	sp, #16
    a7bc:	bd80      	pop	{r7, pc}
    a7be:	46c0      	nop			; (mov r8, r8)
    a7c0:	20000968 	.word	0x20000968

0000a7c4 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    a7c4:	b580      	push	{r7, lr}
    a7c6:	b084      	sub	sp, #16
    a7c8:	af00      	add	r7, sp, #0
    a7ca:	6078      	str	r0, [r7, #4]
    a7cc:	6039      	str	r1, [r7, #0]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    a7ce:	687b      	ldr	r3, [r7, #4]
    a7d0:	0018      	movs	r0, r3
    a7d2:	f7fe f802 	bl	87da <_ZNK6SdFile6isOpenEv>
    a7d6:	1e03      	subs	r3, r0, #0
    a7d8:	d004      	beq.n	a7e4 <_ZN6SdFile7seekSetEm+0x20>
    a7da:	687b      	ldr	r3, [r7, #4]
    a7dc:	69da      	ldr	r2, [r3, #28]
    a7de:	683b      	ldr	r3, [r7, #0]
    a7e0:	429a      	cmp	r2, r3
    a7e2:	d201      	bcs.n	a7e8 <_ZN6SdFile7seekSetEm+0x24>
    a7e4:	2301      	movs	r3, #1
    a7e6:	e000      	b.n	a7ea <_ZN6SdFile7seekSetEm+0x26>
    a7e8:	2300      	movs	r3, #0
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	d001      	beq.n	a7f2 <_ZN6SdFile7seekSetEm+0x2e>
    a7ee:	2300      	movs	r3, #0
    a7f0:	e054      	b.n	a89c <_ZN6SdFile7seekSetEm+0xd8>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    a7f2:	687b      	ldr	r3, [r7, #4]
    a7f4:	7a5b      	ldrb	r3, [r3, #9]
    a7f6:	2b02      	cmp	r3, #2
    a7f8:	d104      	bne.n	a804 <_ZN6SdFile7seekSetEm+0x40>
    curPosition_ = pos;
    a7fa:	687b      	ldr	r3, [r7, #4]
    a7fc:	683a      	ldr	r2, [r7, #0]
    a7fe:	611a      	str	r2, [r3, #16]
    return true;
    a800:	2301      	movs	r3, #1
    a802:	e04b      	b.n	a89c <_ZN6SdFile7seekSetEm+0xd8>
  }
  if (pos == 0) {
    a804:	683b      	ldr	r3, [r7, #0]
    a806:	2b00      	cmp	r3, #0
    a808:	d107      	bne.n	a81a <_ZN6SdFile7seekSetEm+0x56>
    // set position to start of file
    curCluster_ = 0;
    a80a:	687b      	ldr	r3, [r7, #4]
    a80c:	2200      	movs	r2, #0
    a80e:	60da      	str	r2, [r3, #12]
    curPosition_ = 0;
    a810:	687b      	ldr	r3, [r7, #4]
    a812:	2200      	movs	r2, #0
    a814:	611a      	str	r2, [r3, #16]
    return true;
    a816:	2301      	movs	r3, #1
    a818:	e040      	b.n	a89c <_ZN6SdFile7seekSetEm+0xd8>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    a81a:	687b      	ldr	r3, [r7, #4]
    a81c:	691b      	ldr	r3, [r3, #16]
    a81e:	1e5a      	subs	r2, r3, #1
    a820:	687b      	ldr	r3, [r7, #4]
    a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a824:	7c1b      	ldrb	r3, [r3, #16]
    a826:	3309      	adds	r3, #9
    a828:	40da      	lsrs	r2, r3
    a82a:	0013      	movs	r3, r2
    a82c:	60bb      	str	r3, [r7, #8]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    a82e:	683b      	ldr	r3, [r7, #0]
    a830:	1e5a      	subs	r2, r3, #1
    a832:	687b      	ldr	r3, [r7, #4]
    a834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a836:	7c1b      	ldrb	r3, [r3, #16]
    a838:	3309      	adds	r3, #9
    a83a:	40da      	lsrs	r2, r3
    a83c:	0013      	movs	r3, r2
    a83e:	60fb      	str	r3, [r7, #12]

  if (nNew < nCur || curPosition_ == 0) {
    a840:	68fa      	ldr	r2, [r7, #12]
    a842:	68bb      	ldr	r3, [r7, #8]
    a844:	429a      	cmp	r2, r3
    a846:	d303      	bcc.n	a850 <_ZN6SdFile7seekSetEm+0x8c>
    a848:	687b      	ldr	r3, [r7, #4]
    a84a:	691b      	ldr	r3, [r3, #16]
    a84c:	2b00      	cmp	r3, #0
    a84e:	d104      	bne.n	a85a <_ZN6SdFile7seekSetEm+0x96>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    a850:	687b      	ldr	r3, [r7, #4]
    a852:	6a1a      	ldr	r2, [r3, #32]
    a854:	687b      	ldr	r3, [r7, #4]
    a856:	60da      	str	r2, [r3, #12]
    a858:	e003      	b.n	a862 <_ZN6SdFile7seekSetEm+0x9e>
  } else {
    // advance from curPosition
    nNew -= nCur;
    a85a:	68fa      	ldr	r2, [r7, #12]
    a85c:	68bb      	ldr	r3, [r7, #8]
    a85e:	1ad3      	subs	r3, r2, r3
    a860:	60fb      	str	r3, [r7, #12]
  }
  while (nNew--) {
    a862:	68fb      	ldr	r3, [r7, #12]
    a864:	1e5a      	subs	r2, r3, #1
    a866:	60fa      	str	r2, [r7, #12]
    a868:	1e5a      	subs	r2, r3, #1
    a86a:	4193      	sbcs	r3, r2
    a86c:	b2db      	uxtb	r3, r3
    a86e:	2b00      	cmp	r3, #0
    a870:	d010      	beq.n	a894 <_ZN6SdFile7seekSetEm+0xd0>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    a872:	687b      	ldr	r3, [r7, #4]
    a874:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a876:	687b      	ldr	r3, [r7, #4]
    a878:	68d9      	ldr	r1, [r3, #12]
    a87a:	687b      	ldr	r3, [r7, #4]
    a87c:	330c      	adds	r3, #12
    a87e:	001a      	movs	r2, r3
    a880:	f000 fcac 	bl	b1dc <_ZNK8SdVolume6fatGetEmPm>
    a884:	0003      	movs	r3, r0
    a886:	425a      	negs	r2, r3
    a888:	4153      	adcs	r3, r2
    a88a:	b2db      	uxtb	r3, r3
    a88c:	2b00      	cmp	r3, #0
    a88e:	d0e8      	beq.n	a862 <_ZN6SdFile7seekSetEm+0x9e>
    a890:	2300      	movs	r3, #0
    a892:	e003      	b.n	a89c <_ZN6SdFile7seekSetEm+0xd8>
  }
  curPosition_ = pos;
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	683a      	ldr	r2, [r7, #0]
    a898:	611a      	str	r2, [r3, #16]
  return true;
    a89a:	2301      	movs	r3, #1
}
    a89c:	0018      	movs	r0, r3
    a89e:	46bd      	mov	sp, r7
    a8a0:	b004      	add	sp, #16
    a8a2:	bd80      	pop	{r7, pc}

0000a8a4 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    a8a4:	b590      	push	{r4, r7, lr}
    a8a6:	b085      	sub	sp, #20
    a8a8:	af00      	add	r7, sp, #0
    a8aa:	6078      	str	r0, [r7, #4]
  // only allow open files and directories
  if (!isOpen()) return false;
    a8ac:	687b      	ldr	r3, [r7, #4]
    a8ae:	0018      	movs	r0, r3
    a8b0:	f7fd ff93 	bl	87da <_ZNK6SdFile6isOpenEv>
    a8b4:	0003      	movs	r3, r0
    a8b6:	425a      	negs	r2, r3
    a8b8:	4153      	adcs	r3, r2
    a8ba:	b2db      	uxtb	r3, r3
    a8bc:	2b00      	cmp	r3, #0
    a8be:	d001      	beq.n	a8c4 <_ZN6SdFile4syncEv+0x20>
    a8c0:	2300      	movs	r3, #0
    a8c2:	e0a6      	b.n	aa12 <_ZN6SdFile4syncEv+0x16e>

  if (flags_ & F_FILE_DIR_DIRTY) {
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	7a1b      	ldrb	r3, [r3, #8]
    a8c8:	b25b      	sxtb	r3, r3
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	db00      	blt.n	a8d0 <_ZN6SdFile4syncEv+0x2c>
    a8ce:	e09d      	b.n	aa0c <_ZN6SdFile4syncEv+0x168>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    a8d0:	687b      	ldr	r3, [r7, #4]
    a8d2:	2101      	movs	r1, #1
    a8d4:	0018      	movs	r0, r3
    a8d6:	f7ff fad3 	bl	9e80 <_ZN6SdFile13cacheDirEntryEh>
    a8da:	0003      	movs	r3, r0
    a8dc:	60fb      	str	r3, [r7, #12]
    if (!d) return false;
    a8de:	68fb      	ldr	r3, [r7, #12]
    a8e0:	2b00      	cmp	r3, #0
    a8e2:	d101      	bne.n	a8e8 <_ZN6SdFile4syncEv+0x44>
    a8e4:	2300      	movs	r3, #0
    a8e6:	e094      	b.n	aa12 <_ZN6SdFile4syncEv+0x16e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    a8e8:	687b      	ldr	r3, [r7, #4]
    a8ea:	0018      	movs	r0, r3
    a8ec:	f7fd ff65 	bl	87ba <_ZNK6SdFile5isDirEv>
    a8f0:	0003      	movs	r3, r0
    a8f2:	425a      	negs	r2, r3
    a8f4:	4153      	adcs	r3, r2
    a8f6:	b2db      	uxtb	r3, r3
    a8f8:	2b00      	cmp	r3, #0
    a8fa:	d02a      	beq.n	a952 <_ZN6SdFile4syncEv+0xae>
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	69da      	ldr	r2, [r3, #28]
    a900:	68fb      	ldr	r3, [r7, #12]
    a902:	21ff      	movs	r1, #255	; 0xff
    a904:	4011      	ands	r1, r2
    a906:	000c      	movs	r4, r1
    a908:	7f19      	ldrb	r1, [r3, #28]
    a90a:	2000      	movs	r0, #0
    a90c:	4001      	ands	r1, r0
    a90e:	1c08      	adds	r0, r1, #0
    a910:	1c21      	adds	r1, r4, #0
    a912:	4301      	orrs	r1, r0
    a914:	7719      	strb	r1, [r3, #28]
    a916:	0a11      	lsrs	r1, r2, #8
    a918:	20ff      	movs	r0, #255	; 0xff
    a91a:	4001      	ands	r1, r0
    a91c:	000c      	movs	r4, r1
    a91e:	7f59      	ldrb	r1, [r3, #29]
    a920:	2000      	movs	r0, #0
    a922:	4001      	ands	r1, r0
    a924:	1c08      	adds	r0, r1, #0
    a926:	1c21      	adds	r1, r4, #0
    a928:	4301      	orrs	r1, r0
    a92a:	7759      	strb	r1, [r3, #29]
    a92c:	0c11      	lsrs	r1, r2, #16
    a92e:	20ff      	movs	r0, #255	; 0xff
    a930:	4001      	ands	r1, r0
    a932:	000c      	movs	r4, r1
    a934:	7f99      	ldrb	r1, [r3, #30]
    a936:	2000      	movs	r0, #0
    a938:	4001      	ands	r1, r0
    a93a:	1c08      	adds	r0, r1, #0
    a93c:	1c21      	adds	r1, r4, #0
    a93e:	4301      	orrs	r1, r0
    a940:	7799      	strb	r1, [r3, #30]
    a942:	0e10      	lsrs	r0, r2, #24
    a944:	7fda      	ldrb	r2, [r3, #31]
    a946:	2100      	movs	r1, #0
    a948:	400a      	ands	r2, r1
    a94a:	1c11      	adds	r1, r2, #0
    a94c:	1c02      	adds	r2, r0, #0
    a94e:	430a      	orrs	r2, r1
    a950:	77da      	strb	r2, [r3, #31]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    a952:	687b      	ldr	r3, [r7, #4]
    a954:	6a1b      	ldr	r3, [r3, #32]
    a956:	b29a      	uxth	r2, r3
    a958:	68fb      	ldr	r3, [r7, #12]
    a95a:	21ff      	movs	r1, #255	; 0xff
    a95c:	4011      	ands	r1, r2
    a95e:	000c      	movs	r4, r1
    a960:	7e99      	ldrb	r1, [r3, #26]
    a962:	2000      	movs	r0, #0
    a964:	4001      	ands	r1, r0
    a966:	1c08      	adds	r0, r1, #0
    a968:	1c21      	adds	r1, r4, #0
    a96a:	4301      	orrs	r1, r0
    a96c:	7699      	strb	r1, [r3, #26]
    a96e:	0a12      	lsrs	r2, r2, #8
    a970:	b290      	uxth	r0, r2
    a972:	7eda      	ldrb	r2, [r3, #27]
    a974:	2100      	movs	r1, #0
    a976:	400a      	ands	r2, r1
    a978:	1c11      	adds	r1, r2, #0
    a97a:	1c02      	adds	r2, r0, #0
    a97c:	430a      	orrs	r2, r1
    a97e:	76da      	strb	r2, [r3, #27]
    d->firstClusterHigh = firstCluster_ >> 16;
    a980:	687b      	ldr	r3, [r7, #4]
    a982:	6a1b      	ldr	r3, [r3, #32]
    a984:	0c1b      	lsrs	r3, r3, #16
    a986:	b29a      	uxth	r2, r3
    a988:	68fb      	ldr	r3, [r7, #12]
    a98a:	21ff      	movs	r1, #255	; 0xff
    a98c:	4011      	ands	r1, r2
    a98e:	000c      	movs	r4, r1
    a990:	7d19      	ldrb	r1, [r3, #20]
    a992:	2000      	movs	r0, #0
    a994:	4001      	ands	r1, r0
    a996:	1c08      	adds	r0, r1, #0
    a998:	1c21      	adds	r1, r4, #0
    a99a:	4301      	orrs	r1, r0
    a99c:	7519      	strb	r1, [r3, #20]
    a99e:	0a12      	lsrs	r2, r2, #8
    a9a0:	b290      	uxth	r0, r2
    a9a2:	7d5a      	ldrb	r2, [r3, #21]
    a9a4:	2100      	movs	r1, #0
    a9a6:	400a      	ands	r2, r1
    a9a8:	1c11      	adds	r1, r2, #0
    a9aa:	1c02      	adds	r2, r0, #0
    a9ac:	430a      	orrs	r2, r1
    a9ae:	755a      	strb	r2, [r3, #21]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    a9b0:	4b1a      	ldr	r3, [pc, #104]	; (aa1c <_ZN6SdFile4syncEv+0x178>)
    a9b2:	681b      	ldr	r3, [r3, #0]
    a9b4:	2b00      	cmp	r3, #0
    a9b6:	d022      	beq.n	a9fe <_ZN6SdFile4syncEv+0x15a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    a9b8:	4b18      	ldr	r3, [pc, #96]	; (aa1c <_ZN6SdFile4syncEv+0x178>)
    a9ba:	681b      	ldr	r3, [r3, #0]
    a9bc:	68fa      	ldr	r2, [r7, #12]
    a9be:	3218      	adds	r2, #24
    a9c0:	0010      	movs	r0, r2
    a9c2:	68fa      	ldr	r2, [r7, #12]
    a9c4:	3216      	adds	r2, #22
    a9c6:	0011      	movs	r1, r2
    a9c8:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    a9ca:	68fb      	ldr	r3, [r7, #12]
    a9cc:	7e1a      	ldrb	r2, [r3, #24]
    a9ce:	7e5b      	ldrb	r3, [r3, #25]
    a9d0:	021b      	lsls	r3, r3, #8
    a9d2:	4313      	orrs	r3, r2
    a9d4:	b29a      	uxth	r2, r3
    a9d6:	68fb      	ldr	r3, [r7, #12]
    a9d8:	21ff      	movs	r1, #255	; 0xff
    a9da:	4011      	ands	r1, r2
    a9dc:	000c      	movs	r4, r1
    a9de:	7c99      	ldrb	r1, [r3, #18]
    a9e0:	2000      	movs	r0, #0
    a9e2:	4001      	ands	r1, r0
    a9e4:	1c08      	adds	r0, r1, #0
    a9e6:	1c21      	adds	r1, r4, #0
    a9e8:	4301      	orrs	r1, r0
    a9ea:	7499      	strb	r1, [r3, #18]
    a9ec:	0a12      	lsrs	r2, r2, #8
    a9ee:	b290      	uxth	r0, r2
    a9f0:	7cda      	ldrb	r2, [r3, #19]
    a9f2:	2100      	movs	r1, #0
    a9f4:	400a      	ands	r2, r1
    a9f6:	1c11      	adds	r1, r2, #0
    a9f8:	1c02      	adds	r2, r0, #0
    a9fa:	430a      	orrs	r2, r1
    a9fc:	74da      	strb	r2, [r3, #19]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    a9fe:	687b      	ldr	r3, [r7, #4]
    aa00:	7a1b      	ldrb	r3, [r3, #8]
    aa02:	227f      	movs	r2, #127	; 0x7f
    aa04:	4013      	ands	r3, r2
    aa06:	b2da      	uxtb	r2, r3
    aa08:	687b      	ldr	r3, [r7, #4]
    aa0a:	721a      	strb	r2, [r3, #8]
  }
  return SdVolume::cacheFlush();
    aa0c:	f000 fafe 	bl	b00c <_ZN8SdVolume10cacheFlushEv>
    aa10:	0003      	movs	r3, r0
}
    aa12:	0018      	movs	r0, r3
    aa14:	46bd      	mov	sp, r7
    aa16:	b005      	add	sp, #20
    aa18:	bd90      	pop	{r4, r7, pc}
    aa1a:	46c0      	nop			; (mov r8, r8)
    aa1c:	20000964 	.word	0x20000964

0000aa20 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    aa20:	b580      	push	{r7, lr}
    aa22:	b084      	sub	sp, #16
    aa24:	af00      	add	r7, sp, #0
    aa26:	6078      	str	r0, [r7, #4]
    aa28:	6039      	str	r1, [r7, #0]
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    aa2a:	687b      	ldr	r3, [r7, #4]
    aa2c:	0018      	movs	r0, r3
    aa2e:	f7ff f8d6 	bl	9bde <_ZNK6SdFile6isFileEv>
    aa32:	1e03      	subs	r3, r0, #0
    aa34:	d005      	beq.n	aa42 <_ZN6SdFile8truncateEm+0x22>
    aa36:	687b      	ldr	r3, [r7, #4]
    aa38:	7a1b      	ldrb	r3, [r3, #8]
    aa3a:	001a      	movs	r2, r3
    aa3c:	2302      	movs	r3, #2
    aa3e:	4013      	ands	r3, r2
    aa40:	d101      	bne.n	aa46 <_ZN6SdFile8truncateEm+0x26>
    aa42:	2301      	movs	r3, #1
    aa44:	e000      	b.n	aa48 <_ZN6SdFile8truncateEm+0x28>
    aa46:	2300      	movs	r3, #0
    aa48:	2b00      	cmp	r3, #0
    aa4a:	d001      	beq.n	aa50 <_ZN6SdFile8truncateEm+0x30>
    aa4c:	2300      	movs	r3, #0
    aa4e:	e096      	b.n	ab7e <_ZN6SdFile8truncateEm+0x15e>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    aa50:	687b      	ldr	r3, [r7, #4]
    aa52:	69da      	ldr	r2, [r3, #28]
    aa54:	683b      	ldr	r3, [r7, #0]
    aa56:	429a      	cmp	r2, r3
    aa58:	d201      	bcs.n	aa5e <_ZN6SdFile8truncateEm+0x3e>
    aa5a:	2300      	movs	r3, #0
    aa5c:	e08f      	b.n	ab7e <_ZN6SdFile8truncateEm+0x15e>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    aa5e:	687b      	ldr	r3, [r7, #4]
    aa60:	69db      	ldr	r3, [r3, #28]
    aa62:	2b00      	cmp	r3, #0
    aa64:	d101      	bne.n	aa6a <_ZN6SdFile8truncateEm+0x4a>
    aa66:	2301      	movs	r3, #1
    aa68:	e089      	b.n	ab7e <_ZN6SdFile8truncateEm+0x15e>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    aa6a:	687b      	ldr	r3, [r7, #4]
    aa6c:	691a      	ldr	r2, [r3, #16]
    aa6e:	683b      	ldr	r3, [r7, #0]
    aa70:	429a      	cmp	r2, r3
    aa72:	d802      	bhi.n	aa7a <_ZN6SdFile8truncateEm+0x5a>
    aa74:	687b      	ldr	r3, [r7, #4]
    aa76:	691b      	ldr	r3, [r3, #16]
    aa78:	e000      	b.n	aa7c <_ZN6SdFile8truncateEm+0x5c>
    aa7a:	683b      	ldr	r3, [r7, #0]
    aa7c:	60fb      	str	r3, [r7, #12]

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    aa7e:	683a      	ldr	r2, [r7, #0]
    aa80:	687b      	ldr	r3, [r7, #4]
    aa82:	0011      	movs	r1, r2
    aa84:	0018      	movs	r0, r3
    aa86:	f7ff fe9d 	bl	a7c4 <_ZN6SdFile7seekSetEm>
    aa8a:	0003      	movs	r3, r0
    aa8c:	425a      	negs	r2, r3
    aa8e:	4153      	adcs	r3, r2
    aa90:	b2db      	uxtb	r3, r3
    aa92:	2b00      	cmp	r3, #0
    aa94:	d001      	beq.n	aa9a <_ZN6SdFile8truncateEm+0x7a>
    aa96:	2300      	movs	r3, #0
    aa98:	e071      	b.n	ab7e <_ZN6SdFile8truncateEm+0x15e>

  if (length == 0) {
    aa9a:	683b      	ldr	r3, [r7, #0]
    aa9c:	2b00      	cmp	r3, #0
    aa9e:	d113      	bne.n	aac8 <_ZN6SdFile8truncateEm+0xa8>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    aaa0:	687b      	ldr	r3, [r7, #4]
    aaa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    aaa4:	687b      	ldr	r3, [r7, #4]
    aaa6:	6a1b      	ldr	r3, [r3, #32]
    aaa8:	0019      	movs	r1, r3
    aaaa:	0010      	movs	r0, r2
    aaac:	f000 fc4a 	bl	b344 <_ZN8SdVolume9freeChainEm>
    aab0:	0003      	movs	r3, r0
    aab2:	425a      	negs	r2, r3
    aab4:	4153      	adcs	r3, r2
    aab6:	b2db      	uxtb	r3, r3
    aab8:	2b00      	cmp	r3, #0
    aaba:	d001      	beq.n	aac0 <_ZN6SdFile8truncateEm+0xa0>
    aabc:	2300      	movs	r3, #0
    aabe:	e05e      	b.n	ab7e <_ZN6SdFile8truncateEm+0x15e>
    firstCluster_ = 0;
    aac0:	687b      	ldr	r3, [r7, #4]
    aac2:	2200      	movs	r2, #0
    aac4:	621a      	str	r2, [r3, #32]
    aac6:	e03c      	b.n	ab42 <_ZN6SdFile8truncateEm+0x122>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    aac8:	687b      	ldr	r3, [r7, #4]
    aaca:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aacc:	687b      	ldr	r3, [r7, #4]
    aace:	68db      	ldr	r3, [r3, #12]
    aad0:	2208      	movs	r2, #8
    aad2:	18ba      	adds	r2, r7, r2
    aad4:	0019      	movs	r1, r3
    aad6:	f000 fb81 	bl	b1dc <_ZNK8SdVolume6fatGetEmPm>
    aada:	0003      	movs	r3, r0
    aadc:	425a      	negs	r2, r3
    aade:	4153      	adcs	r3, r2
    aae0:	b2db      	uxtb	r3, r3
    aae2:	2b00      	cmp	r3, #0
    aae4:	d001      	beq.n	aaea <_ZN6SdFile8truncateEm+0xca>
    aae6:	2300      	movs	r3, #0
    aae8:	e049      	b.n	ab7e <_ZN6SdFile8truncateEm+0x15e>

    if (!vol_->isEOC(toFree)) {
    aaea:	687b      	ldr	r3, [r7, #4]
    aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aaee:	68ba      	ldr	r2, [r7, #8]
    aaf0:	0011      	movs	r1, r2
    aaf2:	0018      	movs	r0, r3
    aaf4:	f7ff f900 	bl	9cf8 <_ZNK8SdVolume5isEOCEm>
    aaf8:	0003      	movs	r3, r0
    aafa:	425a      	negs	r2, r3
    aafc:	4153      	adcs	r3, r2
    aafe:	b2db      	uxtb	r3, r3
    ab00:	2b00      	cmp	r3, #0
    ab02:	d01e      	beq.n	ab42 <_ZN6SdFile8truncateEm+0x122>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    ab04:	687b      	ldr	r3, [r7, #4]
    ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ab08:	68ba      	ldr	r2, [r7, #8]
    ab0a:	0011      	movs	r1, r2
    ab0c:	0018      	movs	r0, r3
    ab0e:	f000 fc19 	bl	b344 <_ZN8SdVolume9freeChainEm>
    ab12:	0003      	movs	r3, r0
    ab14:	425a      	negs	r2, r3
    ab16:	4153      	adcs	r3, r2
    ab18:	b2db      	uxtb	r3, r3
    ab1a:	2b00      	cmp	r3, #0
    ab1c:	d001      	beq.n	ab22 <_ZN6SdFile8truncateEm+0x102>
    ab1e:	2300      	movs	r3, #0
    ab20:	e02d      	b.n	ab7e <_ZN6SdFile8truncateEm+0x15e>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    ab22:	687b      	ldr	r3, [r7, #4]
    ab24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ab26:	687b      	ldr	r3, [r7, #4]
    ab28:	68db      	ldr	r3, [r3, #12]
    ab2a:	0019      	movs	r1, r3
    ab2c:	0010      	movs	r0, r2
    ab2e:	f7ff f8d1 	bl	9cd4 <_ZN8SdVolume9fatPutEOCEm>
    ab32:	0003      	movs	r3, r0
    ab34:	425a      	negs	r2, r3
    ab36:	4153      	adcs	r3, r2
    ab38:	b2db      	uxtb	r3, r3
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d001      	beq.n	ab42 <_ZN6SdFile8truncateEm+0x122>
    ab3e:	2300      	movs	r3, #0
    ab40:	e01d      	b.n	ab7e <_ZN6SdFile8truncateEm+0x15e>
    }
  }
  fileSize_ = length;
    ab42:	687b      	ldr	r3, [r7, #4]
    ab44:	683a      	ldr	r2, [r7, #0]
    ab46:	61da      	str	r2, [r3, #28]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    ab48:	687b      	ldr	r3, [r7, #4]
    ab4a:	7a1b      	ldrb	r3, [r3, #8]
    ab4c:	2280      	movs	r2, #128	; 0x80
    ab4e:	4252      	negs	r2, r2
    ab50:	4313      	orrs	r3, r2
    ab52:	b2da      	uxtb	r2, r3
    ab54:	687b      	ldr	r3, [r7, #4]
    ab56:	721a      	strb	r2, [r3, #8]

  if (!sync()) return false;
    ab58:	687b      	ldr	r3, [r7, #4]
    ab5a:	0018      	movs	r0, r3
    ab5c:	f7ff fea2 	bl	a8a4 <_ZN6SdFile4syncEv>
    ab60:	0003      	movs	r3, r0
    ab62:	425a      	negs	r2, r3
    ab64:	4153      	adcs	r3, r2
    ab66:	b2db      	uxtb	r3, r3
    ab68:	2b00      	cmp	r3, #0
    ab6a:	d001      	beq.n	ab70 <_ZN6SdFile8truncateEm+0x150>
    ab6c:	2300      	movs	r3, #0
    ab6e:	e006      	b.n	ab7e <_ZN6SdFile8truncateEm+0x15e>

  // set file to correct position
  return seekSet(newPos);
    ab70:	68fa      	ldr	r2, [r7, #12]
    ab72:	687b      	ldr	r3, [r7, #4]
    ab74:	0011      	movs	r1, r2
    ab76:	0018      	movs	r0, r3
    ab78:	f7ff fe24 	bl	a7c4 <_ZN6SdFile7seekSetEm>
    ab7c:	0003      	movs	r3, r0
}
    ab7e:	0018      	movs	r0, r3
    ab80:	46bd      	mov	sp, r7
    ab82:	b004      	add	sp, #16
    ab84:	bd80      	pop	{r7, pc}
	...

0000ab88 <_ZN6SdFile5writeEPKvt>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    ab88:	b590      	push	{r4, r7, lr}
    ab8a:	b08d      	sub	sp, #52	; 0x34
    ab8c:	af00      	add	r7, sp, #0
    ab8e:	60f8      	str	r0, [r7, #12]
    ab90:	60b9      	str	r1, [r7, #8]
    ab92:	1dbb      	adds	r3, r7, #6
    ab94:	801a      	strh	r2, [r3, #0]
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    ab96:	68bb      	ldr	r3, [r7, #8]
    ab98:	62fb      	str	r3, [r7, #44]	; 0x2c

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
    ab9a:	232a      	movs	r3, #42	; 0x2a
    ab9c:	18fb      	adds	r3, r7, r3
    ab9e:	1dba      	adds	r2, r7, #6
    aba0:	8812      	ldrh	r2, [r2, #0]
    aba2:	801a      	strh	r2, [r3, #0]

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    aba4:	68fb      	ldr	r3, [r7, #12]
    aba6:	0018      	movs	r0, r3
    aba8:	f7ff f819 	bl	9bde <_ZNK6SdFile6isFileEv>
    abac:	1e03      	subs	r3, r0, #0
    abae:	d005      	beq.n	abbc <_ZN6SdFile5writeEPKvt+0x34>
    abb0:	68fb      	ldr	r3, [r7, #12]
    abb2:	7a1b      	ldrb	r3, [r3, #8]
    abb4:	001a      	movs	r2, r3
    abb6:	2302      	movs	r3, #2
    abb8:	4013      	ands	r3, r2
    abba:	d101      	bne.n	abc0 <_ZN6SdFile5writeEPKvt+0x38>
    abbc:	2301      	movs	r3, #1
    abbe:	e000      	b.n	abc2 <_ZN6SdFile5writeEPKvt+0x3a>
    abc0:	2300      	movs	r3, #0
    abc2:	2b00      	cmp	r3, #0
    abc4:	d000      	beq.n	abc8 <_ZN6SdFile5writeEPKvt+0x40>
    abc6:	e150      	b.n	ae6a <_ZN6SdFile5writeEPKvt+0x2e2>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    abc8:	68fb      	ldr	r3, [r7, #12]
    abca:	7a1b      	ldrb	r3, [r3, #8]
    abcc:	001a      	movs	r2, r3
    abce:	2304      	movs	r3, #4
    abd0:	4013      	ands	r3, r2
    abd2:	d010      	beq.n	abf6 <_ZN6SdFile5writeEPKvt+0x6e>
    abd4:	68fb      	ldr	r3, [r7, #12]
    abd6:	691a      	ldr	r2, [r3, #16]
    abd8:	68fb      	ldr	r3, [r7, #12]
    abda:	69db      	ldr	r3, [r3, #28]
    abdc:	429a      	cmp	r2, r3
    abde:	d00a      	beq.n	abf6 <_ZN6SdFile5writeEPKvt+0x6e>
    if (!seekEnd()) goto writeErrorReturn;
    abe0:	68fb      	ldr	r3, [r7, #12]
    abe2:	0018      	movs	r0, r3
    abe4:	f7ff f809 	bl	9bfa <_ZN6SdFile7seekEndEv>
    abe8:	0003      	movs	r3, r0
    abea:	425a      	negs	r2, r3
    abec:	4153      	adcs	r3, r2
    abee:	b2db      	uxtb	r3, r3
    abf0:	2b00      	cmp	r3, #0
    abf2:	d000      	beq.n	abf6 <_ZN6SdFile5writeEPKvt+0x6e>
    abf4:	e13b      	b.n	ae6e <_ZN6SdFile5writeEPKvt+0x2e6>
  }

  while (nToWrite > 0) {
    abf6:	232a      	movs	r3, #42	; 0x2a
    abf8:	18fb      	adds	r3, r7, r3
    abfa:	881b      	ldrh	r3, [r3, #0]
    abfc:	2b00      	cmp	r3, #0
    abfe:	dc00      	bgt.n	ac02 <_ZN6SdFile5writeEPKvt+0x7a>
    ac00:	e0fd      	b.n	adfe <_ZN6SdFile5writeEPKvt+0x276>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    ac02:	68fb      	ldr	r3, [r7, #12]
    ac04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ac06:	68fb      	ldr	r3, [r7, #12]
    ac08:	691b      	ldr	r3, [r3, #16]
    ac0a:	2123      	movs	r1, #35	; 0x23
    ac0c:	187c      	adds	r4, r7, r1
    ac0e:	0019      	movs	r1, r3
    ac10:	0010      	movs	r0, r2
    ac12:	f7ff f82e 	bl	9c72 <_ZNK8SdVolume14blockOfClusterEm>
    ac16:	0003      	movs	r3, r0
    ac18:	7023      	strb	r3, [r4, #0]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    ac1a:	68fb      	ldr	r3, [r7, #12]
    ac1c:	691b      	ldr	r3, [r3, #16]
    ac1e:	b29a      	uxth	r2, r3
    ac20:	2320      	movs	r3, #32
    ac22:	18fb      	adds	r3, r7, r3
    ac24:	05d2      	lsls	r2, r2, #23
    ac26:	0dd2      	lsrs	r2, r2, #23
    ac28:	801a      	strh	r2, [r3, #0]
    if (blockOfCluster == 0 && blockOffset == 0) {
    ac2a:	2323      	movs	r3, #35	; 0x23
    ac2c:	18fb      	adds	r3, r7, r3
    ac2e:	781b      	ldrb	r3, [r3, #0]
    ac30:	2b00      	cmp	r3, #0
    ac32:	d148      	bne.n	acc6 <_ZN6SdFile5writeEPKvt+0x13e>
    ac34:	2320      	movs	r3, #32
    ac36:	18fb      	adds	r3, r7, r3
    ac38:	881b      	ldrh	r3, [r3, #0]
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d143      	bne.n	acc6 <_ZN6SdFile5writeEPKvt+0x13e>
      // start of new cluster
      if (curCluster_ == 0) {
    ac3e:	68fb      	ldr	r3, [r7, #12]
    ac40:	68db      	ldr	r3, [r3, #12]
    ac42:	2b00      	cmp	r3, #0
    ac44:	d113      	bne.n	ac6e <_ZN6SdFile5writeEPKvt+0xe6>
        if (firstCluster_ == 0) {
    ac46:	68fb      	ldr	r3, [r7, #12]
    ac48:	6a1b      	ldr	r3, [r3, #32]
    ac4a:	2b00      	cmp	r3, #0
    ac4c:	d10a      	bne.n	ac64 <_ZN6SdFile5writeEPKvt+0xdc>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
    ac4e:	68fb      	ldr	r3, [r7, #12]
    ac50:	0018      	movs	r0, r3
    ac52:	f7ff f89d 	bl	9d90 <_ZN6SdFile10addClusterEv>
    ac56:	0003      	movs	r3, r0
    ac58:	425a      	negs	r2, r3
    ac5a:	4153      	adcs	r3, r2
    ac5c:	b2db      	uxtb	r3, r3
    ac5e:	2b00      	cmp	r3, #0
    ac60:	d031      	beq.n	acc6 <_ZN6SdFile5writeEPKvt+0x13e>
    ac62:	e10d      	b.n	ae80 <_ZN6SdFile5writeEPKvt+0x2f8>
        } else {
          curCluster_ = firstCluster_;
    ac64:	68fb      	ldr	r3, [r7, #12]
    ac66:	6a1a      	ldr	r2, [r3, #32]
    ac68:	68fb      	ldr	r3, [r7, #12]
    ac6a:	60da      	str	r2, [r3, #12]
    ac6c:	e02b      	b.n	acc6 <_ZN6SdFile5writeEPKvt+0x13e>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    ac6e:	68fb      	ldr	r3, [r7, #12]
    ac70:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ac72:	68fb      	ldr	r3, [r7, #12]
    ac74:	68db      	ldr	r3, [r3, #12]
    ac76:	2214      	movs	r2, #20
    ac78:	18ba      	adds	r2, r7, r2
    ac7a:	0019      	movs	r1, r3
    ac7c:	f000 faae 	bl	b1dc <_ZNK8SdVolume6fatGetEmPm>
    ac80:	0003      	movs	r3, r0
    ac82:	425a      	negs	r2, r3
    ac84:	4153      	adcs	r3, r2
    ac86:	b2db      	uxtb	r3, r3
    ac88:	2b00      	cmp	r3, #0
    ac8a:	d001      	beq.n	ac90 <_ZN6SdFile5writeEPKvt+0x108>
    ac8c:	2300      	movs	r3, #0
    ac8e:	e0fd      	b.n	ae8c <_ZN6SdFile5writeEPKvt+0x304>
        if (vol_->isEOC(next)) {
    ac90:	68fb      	ldr	r3, [r7, #12]
    ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ac94:	697a      	ldr	r2, [r7, #20]
    ac96:	0011      	movs	r1, r2
    ac98:	0018      	movs	r0, r3
    ac9a:	f7ff f82d 	bl	9cf8 <_ZNK8SdVolume5isEOCEm>
    ac9e:	0003      	movs	r3, r0
    aca0:	1e5a      	subs	r2, r3, #1
    aca2:	4193      	sbcs	r3, r2
    aca4:	b2db      	uxtb	r3, r3
    aca6:	2b00      	cmp	r3, #0
    aca8:	d00a      	beq.n	acc0 <_ZN6SdFile5writeEPKvt+0x138>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    acaa:	68fb      	ldr	r3, [r7, #12]
    acac:	0018      	movs	r0, r3
    acae:	f7ff f86f 	bl	9d90 <_ZN6SdFile10addClusterEv>
    acb2:	0003      	movs	r3, r0
    acb4:	425a      	negs	r2, r3
    acb6:	4153      	adcs	r3, r2
    acb8:	b2db      	uxtb	r3, r3
    acba:	2b00      	cmp	r3, #0
    acbc:	d003      	beq.n	acc6 <_ZN6SdFile5writeEPKvt+0x13e>
    acbe:	e0df      	b.n	ae80 <_ZN6SdFile5writeEPKvt+0x2f8>
        } else {
          curCluster_ = next;
    acc0:	697a      	ldr	r2, [r7, #20]
    acc2:	68fb      	ldr	r3, [r7, #12]
    acc4:	60da      	str	r2, [r3, #12]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    acc6:	2328      	movs	r3, #40	; 0x28
    acc8:	18fb      	adds	r3, r7, r3
    acca:	2220      	movs	r2, #32
    accc:	18ba      	adds	r2, r7, r2
    acce:	8812      	ldrh	r2, [r2, #0]
    acd0:	2180      	movs	r1, #128	; 0x80
    acd2:	0089      	lsls	r1, r1, #2
    acd4:	1a8a      	subs	r2, r1, r2
    acd6:	801a      	strh	r2, [r3, #0]

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    acd8:	2328      	movs	r3, #40	; 0x28
    acda:	18fb      	adds	r3, r7, r3
    acdc:	881a      	ldrh	r2, [r3, #0]
    acde:	232a      	movs	r3, #42	; 0x2a
    ace0:	18fb      	adds	r3, r7, r3
    ace2:	881b      	ldrh	r3, [r3, #0]
    ace4:	429a      	cmp	r2, r3
    ace6:	dd05      	ble.n	acf4 <_ZN6SdFile5writeEPKvt+0x16c>
    ace8:	2328      	movs	r3, #40	; 0x28
    acea:	18fb      	adds	r3, r7, r3
    acec:	222a      	movs	r2, #42	; 0x2a
    acee:	18ba      	adds	r2, r7, r2
    acf0:	8812      	ldrh	r2, [r2, #0]
    acf2:	801a      	strh	r2, [r3, #0]

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    acf4:	68fb      	ldr	r3, [r7, #12]
    acf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    acf8:	68fb      	ldr	r3, [r7, #12]
    acfa:	68db      	ldr	r3, [r3, #12]
    acfc:	0019      	movs	r1, r3
    acfe:	0010      	movs	r0, r2
    ad00:	f7fe ffc9 	bl	9c96 <_ZNK8SdVolume17clusterStartBlockEm>
    ad04:	0002      	movs	r2, r0
    ad06:	2323      	movs	r3, #35	; 0x23
    ad08:	18fb      	adds	r3, r7, r3
    ad0a:	781b      	ldrb	r3, [r3, #0]
    ad0c:	18d3      	adds	r3, r2, r3
    ad0e:	61fb      	str	r3, [r7, #28]
    if (n == 512) {
    ad10:	2328      	movs	r3, #40	; 0x28
    ad12:	18fb      	adds	r3, r7, r3
    ad14:	881a      	ldrh	r2, [r3, #0]
    ad16:	2380      	movs	r3, #128	; 0x80
    ad18:	009b      	lsls	r3, r3, #2
    ad1a:	429a      	cmp	r2, r3
    ad1c:	d11d      	bne.n	ad5a <_ZN6SdFile5writeEPKvt+0x1d2>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    ad1e:	4b5d      	ldr	r3, [pc, #372]	; (ae94 <_ZN6SdFile5writeEPKvt+0x30c>)
    ad20:	681a      	ldr	r2, [r3, #0]
    ad22:	69fb      	ldr	r3, [r7, #28]
    ad24:	429a      	cmp	r2, r3
    ad26:	d103      	bne.n	ad30 <_ZN6SdFile5writeEPKvt+0x1a8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    ad28:	4b5a      	ldr	r3, [pc, #360]	; (ae94 <_ZN6SdFile5writeEPKvt+0x30c>)
    ad2a:	2201      	movs	r2, #1
    ad2c:	4252      	negs	r2, r2
    ad2e:	601a      	str	r2, [r3, #0]
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    ad30:	68fb      	ldr	r3, [r7, #12]
    ad32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ad34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ad36:	69f9      	ldr	r1, [r7, #28]
    ad38:	0018      	movs	r0, r3
    ad3a:	f7ff f815 	bl	9d68 <_ZN8SdVolume10writeBlockEmPKh>
    ad3e:	0003      	movs	r3, r0
    ad40:	425a      	negs	r2, r3
    ad42:	4153      	adcs	r3, r2
    ad44:	b2db      	uxtb	r3, r3
    ad46:	2b00      	cmp	r3, #0
    ad48:	d000      	beq.n	ad4c <_ZN6SdFile5writeEPKvt+0x1c4>
    ad4a:	e092      	b.n	ae72 <_ZN6SdFile5writeEPKvt+0x2ea>
      src += 512;
    ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad4e:	2280      	movs	r2, #128	; 0x80
    ad50:	0092      	lsls	r2, r2, #2
    ad52:	4694      	mov	ip, r2
    ad54:	4463      	add	r3, ip
    ad56:	62fb      	str	r3, [r7, #44]	; 0x2c
    ad58:	e03e      	b.n	add8 <_ZN6SdFile5writeEPKvt+0x250>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    ad5a:	2320      	movs	r3, #32
    ad5c:	18fb      	adds	r3, r7, r3
    ad5e:	881b      	ldrh	r3, [r3, #0]
    ad60:	2b00      	cmp	r3, #0
    ad62:	d114      	bne.n	ad8e <_ZN6SdFile5writeEPKvt+0x206>
    ad64:	68fb      	ldr	r3, [r7, #12]
    ad66:	691a      	ldr	r2, [r3, #16]
    ad68:	68fb      	ldr	r3, [r7, #12]
    ad6a:	69db      	ldr	r3, [r3, #28]
    ad6c:	429a      	cmp	r2, r3
    ad6e:	d30e      	bcc.n	ad8e <_ZN6SdFile5writeEPKvt+0x206>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    ad70:	f000 f94c 	bl	b00c <_ZN8SdVolume10cacheFlushEv>
    ad74:	0003      	movs	r3, r0
    ad76:	425a      	negs	r2, r3
    ad78:	4153      	adcs	r3, r2
    ad7a:	b2db      	uxtb	r3, r3
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d000      	beq.n	ad82 <_ZN6SdFile5writeEPKvt+0x1fa>
    ad80:	e079      	b.n	ae76 <_ZN6SdFile5writeEPKvt+0x2ee>
        SdVolume::cacheBlockNumber_ = block;
    ad82:	4b44      	ldr	r3, [pc, #272]	; (ae94 <_ZN6SdFile5writeEPKvt+0x30c>)
    ad84:	69fa      	ldr	r2, [r7, #28]
    ad86:	601a      	str	r2, [r3, #0]
        SdVolume::cacheSetDirty();
    ad88:	f7fe ff96 	bl	9cb8 <_ZN8SdVolume13cacheSetDirtyEv>
    ad8c:	e00b      	b.n	ada6 <_ZN6SdFile5writeEPKvt+0x21e>
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    ad8e:	69fb      	ldr	r3, [r7, #28]
    ad90:	2101      	movs	r1, #1
    ad92:	0018      	movs	r0, r3
    ad94:	f000 f978 	bl	b088 <_ZN8SdVolume13cacheRawBlockEmh>
    ad98:	0003      	movs	r3, r0
    ad9a:	425a      	negs	r2, r3
    ad9c:	4153      	adcs	r3, r2
    ad9e:	b2db      	uxtb	r3, r3
    ada0:	2b00      	cmp	r3, #0
    ada2:	d000      	beq.n	ada6 <_ZN6SdFile5writeEPKvt+0x21e>
    ada4:	e069      	b.n	ae7a <_ZN6SdFile5writeEPKvt+0x2f2>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    ada6:	2320      	movs	r3, #32
    ada8:	18fb      	adds	r3, r7, r3
    adaa:	881a      	ldrh	r2, [r3, #0]
    adac:	4b3a      	ldr	r3, [pc, #232]	; (ae98 <_ZN6SdFile5writeEPKvt+0x310>)
    adae:	18d3      	adds	r3, r2, r3
    adb0:	627b      	str	r3, [r7, #36]	; 0x24
      uint8_t* end = dst + n;
    adb2:	2328      	movs	r3, #40	; 0x28
    adb4:	18fb      	adds	r3, r7, r3
    adb6:	881b      	ldrh	r3, [r3, #0]
    adb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    adba:	18d3      	adds	r3, r2, r3
    adbc:	61bb      	str	r3, [r7, #24]
      while (dst != end) *dst++ = *src++;
    adbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    adc0:	69bb      	ldr	r3, [r7, #24]
    adc2:	429a      	cmp	r2, r3
    adc4:	d008      	beq.n	add8 <_ZN6SdFile5writeEPKvt+0x250>
    adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    adc8:	1c5a      	adds	r2, r3, #1
    adca:	627a      	str	r2, [r7, #36]	; 0x24
    adcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    adce:	1c51      	adds	r1, r2, #1
    add0:	62f9      	str	r1, [r7, #44]	; 0x2c
    add2:	7812      	ldrb	r2, [r2, #0]
    add4:	701a      	strb	r2, [r3, #0]
    add6:	e7f2      	b.n	adbe <_ZN6SdFile5writeEPKvt+0x236>
    }
    nToWrite -= n;
    add8:	232a      	movs	r3, #42	; 0x2a
    adda:	18fb      	adds	r3, r7, r3
    addc:	222a      	movs	r2, #42	; 0x2a
    adde:	18b9      	adds	r1, r7, r2
    ade0:	2228      	movs	r2, #40	; 0x28
    ade2:	18ba      	adds	r2, r7, r2
    ade4:	8809      	ldrh	r1, [r1, #0]
    ade6:	8812      	ldrh	r2, [r2, #0]
    ade8:	1a8a      	subs	r2, r1, r2
    adea:	801a      	strh	r2, [r3, #0]
    curPosition_ += n;
    adec:	68fb      	ldr	r3, [r7, #12]
    adee:	691a      	ldr	r2, [r3, #16]
    adf0:	2328      	movs	r3, #40	; 0x28
    adf2:	18fb      	adds	r3, r7, r3
    adf4:	881b      	ldrh	r3, [r3, #0]
    adf6:	18d2      	adds	r2, r2, r3
    adf8:	68fb      	ldr	r3, [r7, #12]
    adfa:	611a      	str	r2, [r3, #16]
  while (nToWrite > 0) {
    adfc:	e6fb      	b.n	abf6 <_ZN6SdFile5writeEPKvt+0x6e>
  }
  if (curPosition_ > fileSize_) {
    adfe:	68fb      	ldr	r3, [r7, #12]
    ae00:	691a      	ldr	r2, [r3, #16]
    ae02:	68fb      	ldr	r3, [r7, #12]
    ae04:	69db      	ldr	r3, [r3, #28]
    ae06:	429a      	cmp	r2, r3
    ae08:	d90c      	bls.n	ae24 <_ZN6SdFile5writeEPKvt+0x29c>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    ae0a:	68fb      	ldr	r3, [r7, #12]
    ae0c:	691a      	ldr	r2, [r3, #16]
    ae0e:	68fb      	ldr	r3, [r7, #12]
    ae10:	61da      	str	r2, [r3, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    ae12:	68fb      	ldr	r3, [r7, #12]
    ae14:	7a1b      	ldrb	r3, [r3, #8]
    ae16:	2280      	movs	r2, #128	; 0x80
    ae18:	4252      	negs	r2, r2
    ae1a:	4313      	orrs	r3, r2
    ae1c:	b2da      	uxtb	r2, r3
    ae1e:	68fb      	ldr	r3, [r7, #12]
    ae20:	721a      	strb	r2, [r3, #8]
    ae22:	e00f      	b.n	ae44 <_ZN6SdFile5writeEPKvt+0x2bc>
  } else if (dateTime_ && nbyte) {
    ae24:	4b1d      	ldr	r3, [pc, #116]	; (ae9c <_ZN6SdFile5writeEPKvt+0x314>)
    ae26:	681b      	ldr	r3, [r3, #0]
    ae28:	2b00      	cmp	r3, #0
    ae2a:	d00b      	beq.n	ae44 <_ZN6SdFile5writeEPKvt+0x2bc>
    ae2c:	1dbb      	adds	r3, r7, #6
    ae2e:	881b      	ldrh	r3, [r3, #0]
    ae30:	2b00      	cmp	r3, #0
    ae32:	d007      	beq.n	ae44 <_ZN6SdFile5writeEPKvt+0x2bc>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    ae34:	68fb      	ldr	r3, [r7, #12]
    ae36:	7a1b      	ldrb	r3, [r3, #8]
    ae38:	2280      	movs	r2, #128	; 0x80
    ae3a:	4252      	negs	r2, r2
    ae3c:	4313      	orrs	r3, r2
    ae3e:	b2da      	uxtb	r2, r3
    ae40:	68fb      	ldr	r3, [r7, #12]
    ae42:	721a      	strb	r2, [r3, #8]
  }

  if (flags_ & O_SYNC) {
    ae44:	68fb      	ldr	r3, [r7, #12]
    ae46:	7a1b      	ldrb	r3, [r3, #8]
    ae48:	001a      	movs	r2, r3
    ae4a:	2308      	movs	r3, #8
    ae4c:	4013      	ands	r3, r2
    ae4e:	d009      	beq.n	ae64 <_ZN6SdFile5writeEPKvt+0x2dc>
    if (!sync()) goto writeErrorReturn;
    ae50:	68fb      	ldr	r3, [r7, #12]
    ae52:	0018      	movs	r0, r3
    ae54:	f7ff fd26 	bl	a8a4 <_ZN6SdFile4syncEv>
    ae58:	0003      	movs	r3, r0
    ae5a:	425a      	negs	r2, r3
    ae5c:	4153      	adcs	r3, r2
    ae5e:	b2db      	uxtb	r3, r3
    ae60:	2b00      	cmp	r3, #0
    ae62:	d10c      	bne.n	ae7e <_ZN6SdFile5writeEPKvt+0x2f6>
  }
  return nbyte;
    ae64:	1dbb      	adds	r3, r7, #6
    ae66:	881b      	ldrh	r3, [r3, #0]
    ae68:	e010      	b.n	ae8c <_ZN6SdFile5writeEPKvt+0x304>
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    ae6a:	46c0      	nop			; (mov r8, r8)
    ae6c:	e008      	b.n	ae80 <_ZN6SdFile5writeEPKvt+0x2f8>
    if (!seekEnd()) goto writeErrorReturn;
    ae6e:	46c0      	nop			; (mov r8, r8)
    ae70:	e006      	b.n	ae80 <_ZN6SdFile5writeEPKvt+0x2f8>
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    ae72:	46c0      	nop			; (mov r8, r8)
    ae74:	e004      	b.n	ae80 <_ZN6SdFile5writeEPKvt+0x2f8>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    ae76:	46c0      	nop			; (mov r8, r8)
    ae78:	e002      	b.n	ae80 <_ZN6SdFile5writeEPKvt+0x2f8>
          goto writeErrorReturn;
    ae7a:	46c0      	nop			; (mov r8, r8)
    ae7c:	e000      	b.n	ae80 <_ZN6SdFile5writeEPKvt+0x2f8>
    if (!sync()) goto writeErrorReturn;
    ae7e:	46c0      	nop			; (mov r8, r8)

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
    ae80:	68fb      	ldr	r3, [r7, #12]
    ae82:	2101      	movs	r1, #1
    ae84:	0018      	movs	r0, r3
    ae86:	f7fd fc61 	bl	874c <_ZN5Print13setWriteErrorEi>
  return 0;
    ae8a:	2300      	movs	r3, #0
}
    ae8c:	0018      	movs	r0, r3
    ae8e:	46bd      	mov	sp, r7
    ae90:	b00d      	add	sp, #52	; 0x34
    ae92:	bd90      	pop	{r4, r7, pc}
    ae94:	2000004c 	.word	0x2000004c
    ae98:	20000968 	.word	0x20000968
    ae9c:	20000964 	.word	0x20000964

0000aea0 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    aea0:	b580      	push	{r7, lr}
    aea2:	b082      	sub	sp, #8
    aea4:	af00      	add	r7, sp, #0
    aea6:	6078      	str	r0, [r7, #4]
    aea8:	000a      	movs	r2, r1
    aeaa:	1cfb      	adds	r3, r7, #3
    aeac:	701a      	strb	r2, [r3, #0]
  return write(&b, 1);
    aeae:	1cf9      	adds	r1, r7, #3
    aeb0:	687b      	ldr	r3, [r7, #4]
    aeb2:	2201      	movs	r2, #1
    aeb4:	0018      	movs	r0, r3
    aeb6:	f7ff fe67 	bl	ab88 <_ZN6SdFile5writeEPKvt>
    aeba:	0003      	movs	r3, r0
}
    aebc:	0018      	movs	r0, r3
    aebe:	46bd      	mov	sp, r7
    aec0:	b002      	add	sp, #8
    aec2:	bd80      	pop	{r7, pc}

0000aec4 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    aec4:	b580      	push	{r7, lr}
    aec6:	b08a      	sub	sp, #40	; 0x28
    aec8:	af00      	add	r7, sp, #0
    aeca:	60f8      	str	r0, [r7, #12]
    aecc:	60b9      	str	r1, [r7, #8]
    aece:	607a      	str	r2, [r7, #4]

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    aed0:	687b      	ldr	r3, [r7, #4]
    aed2:	681b      	ldr	r3, [r3, #0]
    aed4:	2b00      	cmp	r3, #0
    aed6:	d008      	beq.n	aeea <_ZN8SdVolume15allocContiguousEmPm+0x26>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    aed8:	687b      	ldr	r3, [r7, #4]
    aeda:	681b      	ldr	r3, [r3, #0]
    aedc:	3301      	adds	r3, #1
    aede:	627b      	str	r3, [r7, #36]	; 0x24

    // don't save new start location
    setStart = false;
    aee0:	2323      	movs	r3, #35	; 0x23
    aee2:	18fb      	adds	r3, r7, r3
    aee4:	2200      	movs	r2, #0
    aee6:	701a      	strb	r2, [r3, #0]
    aee8:	e00a      	b.n	af00 <_ZN8SdVolume15allocContiguousEmPm+0x3c>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    aeea:	68fb      	ldr	r3, [r7, #12]
    aeec:	681b      	ldr	r3, [r3, #0]
    aeee:	627b      	str	r3, [r7, #36]	; 0x24

    // save next search start if one cluster
    setStart = 1 == count;
    aef0:	68bb      	ldr	r3, [r7, #8]
    aef2:	3b01      	subs	r3, #1
    aef4:	425a      	negs	r2, r3
    aef6:	4153      	adcs	r3, r2
    aef8:	b2da      	uxtb	r2, r3
    aefa:	2323      	movs	r3, #35	; 0x23
    aefc:	18fb      	adds	r3, r7, r3
    aefe:	701a      	strb	r2, [r3, #0]
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af02:	61fb      	str	r3, [r7, #28]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    af04:	68fb      	ldr	r3, [r7, #12]
    af06:	68db      	ldr	r3, [r3, #12]
    af08:	3301      	adds	r3, #1
    af0a:	617b      	str	r3, [r7, #20]

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    af0c:	2300      	movs	r3, #0
    af0e:	61bb      	str	r3, [r7, #24]
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    af10:	68fb      	ldr	r3, [r7, #12]
    af12:	68da      	ldr	r2, [r3, #12]
    af14:	69bb      	ldr	r3, [r7, #24]
    af16:	429a      	cmp	r2, r3
    af18:	d801      	bhi.n	af1e <_ZN8SdVolume15allocContiguousEmPm+0x5a>
    af1a:	2300      	movs	r3, #0
    af1c:	e071      	b.n	b002 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    af1e:	69fa      	ldr	r2, [r7, #28]
    af20:	697b      	ldr	r3, [r7, #20]
    af22:	429a      	cmp	r2, r3
    af24:	d903      	bls.n	af2e <_ZN8SdVolume15allocContiguousEmPm+0x6a>
      bgnCluster = endCluster = 2;
    af26:	2302      	movs	r3, #2
    af28:	61fb      	str	r3, [r7, #28]
    af2a:	69fb      	ldr	r3, [r7, #28]
    af2c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    af2e:	2310      	movs	r3, #16
    af30:	18fa      	adds	r2, r7, r3
    af32:	69f9      	ldr	r1, [r7, #28]
    af34:	68fb      	ldr	r3, [r7, #12]
    af36:	0018      	movs	r0, r3
    af38:	f000 f950 	bl	b1dc <_ZNK8SdVolume6fatGetEmPm>
    af3c:	0003      	movs	r3, r0
    af3e:	425a      	negs	r2, r3
    af40:	4153      	adcs	r3, r2
    af42:	b2db      	uxtb	r3, r3
    af44:	2b00      	cmp	r3, #0
    af46:	d001      	beq.n	af4c <_ZN8SdVolume15allocContiguousEmPm+0x88>
    af48:	2300      	movs	r3, #0
    af4a:	e05a      	b.n	b002 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

    if (f != 0) {
    af4c:	693b      	ldr	r3, [r7, #16]
    af4e:	2b00      	cmp	r3, #0
    af50:	d003      	beq.n	af5a <_ZN8SdVolume15allocContiguousEmPm+0x96>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    af52:	69fb      	ldr	r3, [r7, #28]
    af54:	3301      	adds	r3, #1
    af56:	627b      	str	r3, [r7, #36]	; 0x24
    af58:	e013      	b.n	af82 <_ZN8SdVolume15allocContiguousEmPm+0xbe>
    } else if ((endCluster - bgnCluster + 1) == count) {
    af5a:	69fa      	ldr	r2, [r7, #28]
    af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af5e:	1ad3      	subs	r3, r2, r3
    af60:	1c5a      	adds	r2, r3, #1
    af62:	68bb      	ldr	r3, [r7, #8]
    af64:	429a      	cmp	r2, r3
    af66:	d10c      	bne.n	af82 <_ZN8SdVolume15allocContiguousEmPm+0xbe>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    af68:	69fa      	ldr	r2, [r7, #28]
    af6a:	68fb      	ldr	r3, [r7, #12]
    af6c:	0011      	movs	r1, r2
    af6e:	0018      	movs	r0, r3
    af70:	f7fe feb0 	bl	9cd4 <_ZN8SdVolume9fatPutEOCEm>
    af74:	0003      	movs	r3, r0
    af76:	425a      	negs	r2, r3
    af78:	4153      	adcs	r3, r2
    af7a:	b2db      	uxtb	r3, r3
    af7c:	2b00      	cmp	r3, #0
    af7e:	d107      	bne.n	af90 <_ZN8SdVolume15allocContiguousEmPm+0xcc>
    af80:	e008      	b.n	af94 <_ZN8SdVolume15allocContiguousEmPm+0xd0>
  for (uint32_t n = 0;; n++, endCluster++) {
    af82:	69bb      	ldr	r3, [r7, #24]
    af84:	3301      	adds	r3, #1
    af86:	61bb      	str	r3, [r7, #24]
    af88:	69fb      	ldr	r3, [r7, #28]
    af8a:	3301      	adds	r3, #1
    af8c:	61fb      	str	r3, [r7, #28]
  }
    af8e:	e7bf      	b.n	af10 <_ZN8SdVolume15allocContiguousEmPm+0x4c>
  if (!fatPutEOC(endCluster)) return false;
    af90:	2300      	movs	r3, #0
    af92:	e036      	b.n	b002 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

  // link clusters
  while (endCluster > bgnCluster) {
    af94:	69fa      	ldr	r2, [r7, #28]
    af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af98:	429a      	cmp	r2, r3
    af9a:	d912      	bls.n	afc2 <_ZN8SdVolume15allocContiguousEmPm+0xfe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    af9c:	69fb      	ldr	r3, [r7, #28]
    af9e:	1e59      	subs	r1, r3, #1
    afa0:	69fa      	ldr	r2, [r7, #28]
    afa2:	68fb      	ldr	r3, [r7, #12]
    afa4:	0018      	movs	r0, r3
    afa6:	f000 f96b 	bl	b280 <_ZN8SdVolume6fatPutEmm>
    afaa:	0003      	movs	r3, r0
    afac:	425a      	negs	r2, r3
    afae:	4153      	adcs	r3, r2
    afb0:	b2db      	uxtb	r3, r3
    afb2:	2b00      	cmp	r3, #0
    afb4:	d001      	beq.n	afba <_ZN8SdVolume15allocContiguousEmPm+0xf6>
    afb6:	2300      	movs	r3, #0
    afb8:	e023      	b.n	b002 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    endCluster--;
    afba:	69fb      	ldr	r3, [r7, #28]
    afbc:	3b01      	subs	r3, #1
    afbe:	61fb      	str	r3, [r7, #28]
  while (endCluster > bgnCluster) {
    afc0:	e7e8      	b.n	af94 <_ZN8SdVolume15allocContiguousEmPm+0xd0>
  }
  if (*curCluster != 0) {
    afc2:	687b      	ldr	r3, [r7, #4]
    afc4:	681b      	ldr	r3, [r3, #0]
    afc6:	2b00      	cmp	r3, #0
    afc8:	d00e      	beq.n	afe8 <_ZN8SdVolume15allocContiguousEmPm+0x124>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    afca:	687b      	ldr	r3, [r7, #4]
    afcc:	6819      	ldr	r1, [r3, #0]
    afce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    afd0:	68fb      	ldr	r3, [r7, #12]
    afd2:	0018      	movs	r0, r3
    afd4:	f000 f954 	bl	b280 <_ZN8SdVolume6fatPutEmm>
    afd8:	0003      	movs	r3, r0
    afda:	425a      	negs	r2, r3
    afdc:	4153      	adcs	r3, r2
    afde:	b2db      	uxtb	r3, r3
    afe0:	2b00      	cmp	r3, #0
    afe2:	d001      	beq.n	afe8 <_ZN8SdVolume15allocContiguousEmPm+0x124>
    afe4:	2300      	movs	r3, #0
    afe6:	e00c      	b.n	b002 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    afe8:	687b      	ldr	r3, [r7, #4]
    afea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    afec:	601a      	str	r2, [r3, #0]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    afee:	2323      	movs	r3, #35	; 0x23
    aff0:	18fb      	adds	r3, r7, r3
    aff2:	781b      	ldrb	r3, [r3, #0]
    aff4:	2b00      	cmp	r3, #0
    aff6:	d003      	beq.n	b000 <_ZN8SdVolume15allocContiguousEmPm+0x13c>
    aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    affa:	1c5a      	adds	r2, r3, #1
    affc:	68fb      	ldr	r3, [r7, #12]
    affe:	601a      	str	r2, [r3, #0]

  return true;
    b000:	2301      	movs	r3, #1
}
    b002:	0018      	movs	r0, r3
    b004:	46bd      	mov	sp, r7
    b006:	b00a      	add	sp, #40	; 0x28
    b008:	bd80      	pop	{r7, pc}
	...

0000b00c <_ZN8SdVolume10cacheFlushEv>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    b00c:	b580      	push	{r7, lr}
    b00e:	af00      	add	r7, sp, #0
  if (cacheDirty_) {
    b010:	4b18      	ldr	r3, [pc, #96]	; (b074 <_ZN8SdVolume10cacheFlushEv+0x68>)
    b012:	781b      	ldrb	r3, [r3, #0]
    b014:	2b00      	cmp	r3, #0
    b016:	d029      	beq.n	b06c <_ZN8SdVolume10cacheFlushEv+0x60>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    b018:	4b17      	ldr	r3, [pc, #92]	; (b078 <_ZN8SdVolume10cacheFlushEv+0x6c>)
    b01a:	6818      	ldr	r0, [r3, #0]
    b01c:	4b17      	ldr	r3, [pc, #92]	; (b07c <_ZN8SdVolume10cacheFlushEv+0x70>)
    b01e:	681b      	ldr	r3, [r3, #0]
    b020:	4a17      	ldr	r2, [pc, #92]	; (b080 <_ZN8SdVolume10cacheFlushEv+0x74>)
    b022:	0019      	movs	r1, r3
    b024:	f7fe fcd0 	bl	99c8 <_ZN7Sd2Card10writeBlockEmPKh>
    b028:	0003      	movs	r3, r0
    b02a:	425a      	negs	r2, r3
    b02c:	4153      	adcs	r3, r2
    b02e:	b2db      	uxtb	r3, r3
    b030:	2b00      	cmp	r3, #0
    b032:	d001      	beq.n	b038 <_ZN8SdVolume10cacheFlushEv+0x2c>
      return false;
    b034:	2300      	movs	r3, #0
    b036:	e01a      	b.n	b06e <_ZN8SdVolume10cacheFlushEv+0x62>
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    b038:	4b12      	ldr	r3, [pc, #72]	; (b084 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b03a:	681b      	ldr	r3, [r3, #0]
    b03c:	2b00      	cmp	r3, #0
    b03e:	d012      	beq.n	b066 <_ZN8SdVolume10cacheFlushEv+0x5a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    b040:	4b0d      	ldr	r3, [pc, #52]	; (b078 <_ZN8SdVolume10cacheFlushEv+0x6c>)
    b042:	6818      	ldr	r0, [r3, #0]
    b044:	4b0f      	ldr	r3, [pc, #60]	; (b084 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b046:	681b      	ldr	r3, [r3, #0]
    b048:	4a0d      	ldr	r2, [pc, #52]	; (b080 <_ZN8SdVolume10cacheFlushEv+0x74>)
    b04a:	0019      	movs	r1, r3
    b04c:	f7fe fcbc 	bl	99c8 <_ZN7Sd2Card10writeBlockEmPKh>
    b050:	0003      	movs	r3, r0
    b052:	425a      	negs	r2, r3
    b054:	4153      	adcs	r3, r2
    b056:	b2db      	uxtb	r3, r3
    b058:	2b00      	cmp	r3, #0
    b05a:	d001      	beq.n	b060 <_ZN8SdVolume10cacheFlushEv+0x54>
        return false;
    b05c:	2300      	movs	r3, #0
    b05e:	e006      	b.n	b06e <_ZN8SdVolume10cacheFlushEv+0x62>
      }
      cacheMirrorBlock_ = 0;
    b060:	4b08      	ldr	r3, [pc, #32]	; (b084 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b062:	2200      	movs	r2, #0
    b064:	601a      	str	r2, [r3, #0]
    }
    cacheDirty_ = 0;
    b066:	4b03      	ldr	r3, [pc, #12]	; (b074 <_ZN8SdVolume10cacheFlushEv+0x68>)
    b068:	2200      	movs	r2, #0
    b06a:	701a      	strb	r2, [r3, #0]
  }
  return true;
    b06c:	2301      	movs	r3, #1
}
    b06e:	0018      	movs	r0, r3
    b070:	46bd      	mov	sp, r7
    b072:	bd80      	pop	{r7, pc}
    b074:	20000b6c 	.word	0x20000b6c
    b078:	20000b68 	.word	0x20000b68
    b07c:	2000004c 	.word	0x2000004c
    b080:	20000968 	.word	0x20000968
    b084:	20000b70 	.word	0x20000b70

0000b088 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    b088:	b580      	push	{r7, lr}
    b08a:	b082      	sub	sp, #8
    b08c:	af00      	add	r7, sp, #0
    b08e:	6078      	str	r0, [r7, #4]
    b090:	000a      	movs	r2, r1
    b092:	1cfb      	adds	r3, r7, #3
    b094:	701a      	strb	r2, [r3, #0]
  if (cacheBlockNumber_ != blockNumber) {
    b096:	4b17      	ldr	r3, [pc, #92]	; (b0f4 <_ZN8SdVolume13cacheRawBlockEmh+0x6c>)
    b098:	681a      	ldr	r2, [r3, #0]
    b09a:	687b      	ldr	r3, [r7, #4]
    b09c:	429a      	cmp	r2, r3
    b09e:	d01b      	beq.n	b0d8 <_ZN8SdVolume13cacheRawBlockEmh+0x50>
    if (!cacheFlush()) return false;
    b0a0:	f7ff ffb4 	bl	b00c <_ZN8SdVolume10cacheFlushEv>
    b0a4:	0003      	movs	r3, r0
    b0a6:	425a      	negs	r2, r3
    b0a8:	4153      	adcs	r3, r2
    b0aa:	b2db      	uxtb	r3, r3
    b0ac:	2b00      	cmp	r3, #0
    b0ae:	d001      	beq.n	b0b4 <_ZN8SdVolume13cacheRawBlockEmh+0x2c>
    b0b0:	2300      	movs	r3, #0
    b0b2:	e01a      	b.n	b0ea <_ZN8SdVolume13cacheRawBlockEmh+0x62>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    b0b4:	4b10      	ldr	r3, [pc, #64]	; (b0f8 <_ZN8SdVolume13cacheRawBlockEmh+0x70>)
    b0b6:	681b      	ldr	r3, [r3, #0]
    b0b8:	4a10      	ldr	r2, [pc, #64]	; (b0fc <_ZN8SdVolume13cacheRawBlockEmh+0x74>)
    b0ba:	6879      	ldr	r1, [r7, #4]
    b0bc:	0018      	movs	r0, r3
    b0be:	f7fe fa9b 	bl	95f8 <_ZN7Sd2Card9readBlockEmPh>
    b0c2:	0003      	movs	r3, r0
    b0c4:	425a      	negs	r2, r3
    b0c6:	4153      	adcs	r3, r2
    b0c8:	b2db      	uxtb	r3, r3
    b0ca:	2b00      	cmp	r3, #0
    b0cc:	d001      	beq.n	b0d2 <_ZN8SdVolume13cacheRawBlockEmh+0x4a>
    b0ce:	2300      	movs	r3, #0
    b0d0:	e00b      	b.n	b0ea <_ZN8SdVolume13cacheRawBlockEmh+0x62>
    cacheBlockNumber_ = blockNumber;
    b0d2:	4b08      	ldr	r3, [pc, #32]	; (b0f4 <_ZN8SdVolume13cacheRawBlockEmh+0x6c>)
    b0d4:	687a      	ldr	r2, [r7, #4]
    b0d6:	601a      	str	r2, [r3, #0]
  }
  cacheDirty_ |= action;
    b0d8:	4b09      	ldr	r3, [pc, #36]	; (b100 <_ZN8SdVolume13cacheRawBlockEmh+0x78>)
    b0da:	781a      	ldrb	r2, [r3, #0]
    b0dc:	1cfb      	adds	r3, r7, #3
    b0de:	781b      	ldrb	r3, [r3, #0]
    b0e0:	4313      	orrs	r3, r2
    b0e2:	b2da      	uxtb	r2, r3
    b0e4:	4b06      	ldr	r3, [pc, #24]	; (b100 <_ZN8SdVolume13cacheRawBlockEmh+0x78>)
    b0e6:	701a      	strb	r2, [r3, #0]
  return true;
    b0e8:	2301      	movs	r3, #1
}
    b0ea:	0018      	movs	r0, r3
    b0ec:	46bd      	mov	sp, r7
    b0ee:	b002      	add	sp, #8
    b0f0:	bd80      	pop	{r7, pc}
    b0f2:	46c0      	nop			; (mov r8, r8)
    b0f4:	2000004c 	.word	0x2000004c
    b0f8:	20000b68 	.word	0x20000b68
    b0fc:	20000968 	.word	0x20000968
    b100:	20000b6c 	.word	0x20000b6c

0000b104 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    b104:	b580      	push	{r7, lr}
    b106:	b084      	sub	sp, #16
    b108:	af00      	add	r7, sp, #0
    b10a:	6078      	str	r0, [r7, #4]
  if (!cacheFlush()) return false;
    b10c:	f7ff ff7e 	bl	b00c <_ZN8SdVolume10cacheFlushEv>
    b110:	0003      	movs	r3, r0
    b112:	425a      	negs	r2, r3
    b114:	4153      	adcs	r3, r2
    b116:	b2db      	uxtb	r3, r3
    b118:	2b00      	cmp	r3, #0
    b11a:	d001      	beq.n	b120 <_ZN8SdVolume14cacheZeroBlockEm+0x1c>
    b11c:	2300      	movs	r3, #0
    b11e:	e01d      	b.n	b15c <_ZN8SdVolume14cacheZeroBlockEm+0x58>

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    b120:	230e      	movs	r3, #14
    b122:	18fb      	adds	r3, r7, r3
    b124:	2200      	movs	r2, #0
    b126:	801a      	strh	r2, [r3, #0]
    b128:	230e      	movs	r3, #14
    b12a:	18fb      	adds	r3, r7, r3
    b12c:	881b      	ldrh	r3, [r3, #0]
    b12e:	4a0d      	ldr	r2, [pc, #52]	; (b164 <_ZN8SdVolume14cacheZeroBlockEm+0x60>)
    b130:	4293      	cmp	r3, r2
    b132:	dc0d      	bgt.n	b150 <_ZN8SdVolume14cacheZeroBlockEm+0x4c>
    cacheBuffer_.data[i] = 0;
    b134:	230e      	movs	r3, #14
    b136:	18fb      	adds	r3, r7, r3
    b138:	881b      	ldrh	r3, [r3, #0]
    b13a:	4a0b      	ldr	r2, [pc, #44]	; (b168 <_ZN8SdVolume14cacheZeroBlockEm+0x64>)
    b13c:	2100      	movs	r1, #0
    b13e:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i = 0; i < 512; i++) {
    b140:	230e      	movs	r3, #14
    b142:	18fb      	adds	r3, r7, r3
    b144:	881a      	ldrh	r2, [r3, #0]
    b146:	230e      	movs	r3, #14
    b148:	18fb      	adds	r3, r7, r3
    b14a:	3201      	adds	r2, #1
    b14c:	801a      	strh	r2, [r3, #0]
    b14e:	e7eb      	b.n	b128 <_ZN8SdVolume14cacheZeroBlockEm+0x24>
  }
  cacheBlockNumber_ = blockNumber;
    b150:	4b06      	ldr	r3, [pc, #24]	; (b16c <_ZN8SdVolume14cacheZeroBlockEm+0x68>)
    b152:	687a      	ldr	r2, [r7, #4]
    b154:	601a      	str	r2, [r3, #0]
  cacheSetDirty();
    b156:	f7fe fdaf 	bl	9cb8 <_ZN8SdVolume13cacheSetDirtyEv>
  return true;
    b15a:	2301      	movs	r3, #1
}
    b15c:	0018      	movs	r0, r3
    b15e:	46bd      	mov	sp, r7
    b160:	b004      	add	sp, #16
    b162:	bd80      	pop	{r7, pc}
    b164:	000001ff 	.word	0x000001ff
    b168:	20000968 	.word	0x20000968
    b16c:	2000004c 	.word	0x2000004c

0000b170 <_ZNK8SdVolume9chainSizeEmPm>:
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    b170:	b580      	push	{r7, lr}
    b172:	b086      	sub	sp, #24
    b174:	af00      	add	r7, sp, #0
    b176:	60f8      	str	r0, [r7, #12]
    b178:	60b9      	str	r1, [r7, #8]
    b17a:	607a      	str	r2, [r7, #4]
  uint32_t s = 0;
    b17c:	2300      	movs	r3, #0
    b17e:	617b      	str	r3, [r7, #20]
  do {
    if (!fatGet(cluster, &cluster)) return false;
    b180:	68b9      	ldr	r1, [r7, #8]
    b182:	2308      	movs	r3, #8
    b184:	18fa      	adds	r2, r7, r3
    b186:	68fb      	ldr	r3, [r7, #12]
    b188:	0018      	movs	r0, r3
    b18a:	f000 f827 	bl	b1dc <_ZNK8SdVolume6fatGetEmPm>
    b18e:	0003      	movs	r3, r0
    b190:	425a      	negs	r2, r3
    b192:	4153      	adcs	r3, r2
    b194:	b2db      	uxtb	r3, r3
    b196:	2b00      	cmp	r3, #0
    b198:	d001      	beq.n	b19e <_ZNK8SdVolume9chainSizeEmPm+0x2e>
    b19a:	2300      	movs	r3, #0
    b19c:	e019      	b.n	b1d2 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    s += 512UL << clusterSizeShift_;
    b19e:	68fb      	ldr	r3, [r7, #12]
    b1a0:	7c1b      	ldrb	r3, [r3, #16]
    b1a2:	001a      	movs	r2, r3
    b1a4:	2380      	movs	r3, #128	; 0x80
    b1a6:	009b      	lsls	r3, r3, #2
    b1a8:	4093      	lsls	r3, r2
    b1aa:	697a      	ldr	r2, [r7, #20]
    b1ac:	18d3      	adds	r3, r2, r3
    b1ae:	617b      	str	r3, [r7, #20]
  } while (!isEOC(cluster));
    b1b0:	68ba      	ldr	r2, [r7, #8]
    b1b2:	68fb      	ldr	r3, [r7, #12]
    b1b4:	0011      	movs	r1, r2
    b1b6:	0018      	movs	r0, r3
    b1b8:	f7fe fd9e 	bl	9cf8 <_ZNK8SdVolume5isEOCEm>
    b1bc:	0003      	movs	r3, r0
  do {
    b1be:	425a      	negs	r2, r3
    b1c0:	4153      	adcs	r3, r2
    b1c2:	b2db      	uxtb	r3, r3
    b1c4:	2b00      	cmp	r3, #0
    b1c6:	d000      	beq.n	b1ca <_ZNK8SdVolume9chainSizeEmPm+0x5a>
    b1c8:	e7da      	b.n	b180 <_ZNK8SdVolume9chainSizeEmPm+0x10>
  *size = s;
    b1ca:	687b      	ldr	r3, [r7, #4]
    b1cc:	697a      	ldr	r2, [r7, #20]
    b1ce:	601a      	str	r2, [r3, #0]
  return true;
    b1d0:	2301      	movs	r3, #1
}
    b1d2:	0018      	movs	r0, r3
    b1d4:	46bd      	mov	sp, r7
    b1d6:	b006      	add	sp, #24
    b1d8:	bd80      	pop	{r7, pc}
	...

0000b1dc <_ZNK8SdVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    b1dc:	b580      	push	{r7, lr}
    b1de:	b086      	sub	sp, #24
    b1e0:	af00      	add	r7, sp, #0
    b1e2:	60f8      	str	r0, [r7, #12]
    b1e4:	60b9      	str	r1, [r7, #8]
    b1e6:	607a      	str	r2, [r7, #4]
  if (cluster > (clusterCount_ + 1)) return false;
    b1e8:	68fb      	ldr	r3, [r7, #12]
    b1ea:	68db      	ldr	r3, [r3, #12]
    b1ec:	1c5a      	adds	r2, r3, #1
    b1ee:	68bb      	ldr	r3, [r7, #8]
    b1f0:	429a      	cmp	r2, r3
    b1f2:	d201      	bcs.n	b1f8 <_ZNK8SdVolume6fatGetEmPm+0x1c>
    b1f4:	2300      	movs	r3, #0
    b1f6:	e03b      	b.n	b270 <_ZNK8SdVolume6fatGetEmPm+0x94>
  uint32_t lba = fatStartBlock_;
    b1f8:	68fb      	ldr	r3, [r7, #12]
    b1fa:	69db      	ldr	r3, [r3, #28]
    b1fc:	617b      	str	r3, [r7, #20]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    b1fe:	68fb      	ldr	r3, [r7, #12]
    b200:	2220      	movs	r2, #32
    b202:	5c9b      	ldrb	r3, [r3, r2]
    b204:	2b10      	cmp	r3, #16
    b206:	d102      	bne.n	b20e <_ZNK8SdVolume6fatGetEmPm+0x32>
    b208:	68bb      	ldr	r3, [r7, #8]
    b20a:	0a1b      	lsrs	r3, r3, #8
    b20c:	e001      	b.n	b212 <_ZNK8SdVolume6fatGetEmPm+0x36>
    b20e:	68bb      	ldr	r3, [r7, #8]
    b210:	09db      	lsrs	r3, r3, #7
    b212:	697a      	ldr	r2, [r7, #20]
    b214:	18d3      	adds	r3, r2, r3
    b216:	617b      	str	r3, [r7, #20]
  if (lba != cacheBlockNumber_) {
    b218:	4b17      	ldr	r3, [pc, #92]	; (b278 <_ZNK8SdVolume6fatGetEmPm+0x9c>)
    b21a:	681b      	ldr	r3, [r3, #0]
    b21c:	697a      	ldr	r2, [r7, #20]
    b21e:	429a      	cmp	r2, r3
    b220:	d00c      	beq.n	b23c <_ZNK8SdVolume6fatGetEmPm+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    b222:	697b      	ldr	r3, [r7, #20]
    b224:	2100      	movs	r1, #0
    b226:	0018      	movs	r0, r3
    b228:	f7ff ff2e 	bl	b088 <_ZN8SdVolume13cacheRawBlockEmh>
    b22c:	0003      	movs	r3, r0
    b22e:	425a      	negs	r2, r3
    b230:	4153      	adcs	r3, r2
    b232:	b2db      	uxtb	r3, r3
    b234:	2b00      	cmp	r3, #0
    b236:	d001      	beq.n	b23c <_ZNK8SdVolume6fatGetEmPm+0x60>
    b238:	2300      	movs	r3, #0
    b23a:	e019      	b.n	b270 <_ZNK8SdVolume6fatGetEmPm+0x94>
  }
  if (fatType_ == 16) {
    b23c:	68fb      	ldr	r3, [r7, #12]
    b23e:	2220      	movs	r2, #32
    b240:	5c9b      	ldrb	r3, [r3, r2]
    b242:	2b10      	cmp	r3, #16
    b244:	d109      	bne.n	b25a <_ZNK8SdVolume6fatGetEmPm+0x7e>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    b246:	68bb      	ldr	r3, [r7, #8]
    b248:	22ff      	movs	r2, #255	; 0xff
    b24a:	401a      	ands	r2, r3
    b24c:	4b0b      	ldr	r3, [pc, #44]	; (b27c <_ZNK8SdVolume6fatGetEmPm+0xa0>)
    b24e:	0052      	lsls	r2, r2, #1
    b250:	5ad3      	ldrh	r3, [r2, r3]
    b252:	001a      	movs	r2, r3
    b254:	687b      	ldr	r3, [r7, #4]
    b256:	601a      	str	r2, [r3, #0]
    b258:	e009      	b.n	b26e <_ZNK8SdVolume6fatGetEmPm+0x92>
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    b25a:	68bb      	ldr	r3, [r7, #8]
    b25c:	227f      	movs	r2, #127	; 0x7f
    b25e:	401a      	ands	r2, r3
    b260:	4b06      	ldr	r3, [pc, #24]	; (b27c <_ZNK8SdVolume6fatGetEmPm+0xa0>)
    b262:	0092      	lsls	r2, r2, #2
    b264:	58d3      	ldr	r3, [r2, r3]
    b266:	011b      	lsls	r3, r3, #4
    b268:	091a      	lsrs	r2, r3, #4
    b26a:	687b      	ldr	r3, [r7, #4]
    b26c:	601a      	str	r2, [r3, #0]
  }
  return true;
    b26e:	2301      	movs	r3, #1
}
    b270:	0018      	movs	r0, r3
    b272:	46bd      	mov	sp, r7
    b274:	b006      	add	sp, #24
    b276:	bd80      	pop	{r7, pc}
    b278:	2000004c 	.word	0x2000004c
    b27c:	20000968 	.word	0x20000968

0000b280 <_ZN8SdVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    b280:	b580      	push	{r7, lr}
    b282:	b086      	sub	sp, #24
    b284:	af00      	add	r7, sp, #0
    b286:	60f8      	str	r0, [r7, #12]
    b288:	60b9      	str	r1, [r7, #8]
    b28a:	607a      	str	r2, [r7, #4]
  // error if reserved cluster
  if (cluster < 2) return false;
    b28c:	68bb      	ldr	r3, [r7, #8]
    b28e:	2b01      	cmp	r3, #1
    b290:	d801      	bhi.n	b296 <_ZN8SdVolume6fatPutEmm+0x16>
    b292:	2300      	movs	r3, #0
    b294:	e04b      	b.n	b32e <_ZN8SdVolume6fatPutEmm+0xae>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    b296:	68fb      	ldr	r3, [r7, #12]
    b298:	68db      	ldr	r3, [r3, #12]
    b29a:	1c5a      	adds	r2, r3, #1
    b29c:	68bb      	ldr	r3, [r7, #8]
    b29e:	429a      	cmp	r2, r3
    b2a0:	d201      	bcs.n	b2a6 <_ZN8SdVolume6fatPutEmm+0x26>
    b2a2:	2300      	movs	r3, #0
    b2a4:	e043      	b.n	b32e <_ZN8SdVolume6fatPutEmm+0xae>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    b2a6:	68fb      	ldr	r3, [r7, #12]
    b2a8:	69db      	ldr	r3, [r3, #28]
    b2aa:	617b      	str	r3, [r7, #20]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    b2ac:	68fb      	ldr	r3, [r7, #12]
    b2ae:	2220      	movs	r2, #32
    b2b0:	5c9b      	ldrb	r3, [r3, r2]
    b2b2:	2b10      	cmp	r3, #16
    b2b4:	d102      	bne.n	b2bc <_ZN8SdVolume6fatPutEmm+0x3c>
    b2b6:	68bb      	ldr	r3, [r7, #8]
    b2b8:	0a1b      	lsrs	r3, r3, #8
    b2ba:	e001      	b.n	b2c0 <_ZN8SdVolume6fatPutEmm+0x40>
    b2bc:	68bb      	ldr	r3, [r7, #8]
    b2be:	09db      	lsrs	r3, r3, #7
    b2c0:	697a      	ldr	r2, [r7, #20]
    b2c2:	18d3      	adds	r3, r2, r3
    b2c4:	617b      	str	r3, [r7, #20]

  if (lba != cacheBlockNumber_) {
    b2c6:	4b1c      	ldr	r3, [pc, #112]	; (b338 <_ZN8SdVolume6fatPutEmm+0xb8>)
    b2c8:	681b      	ldr	r3, [r3, #0]
    b2ca:	697a      	ldr	r2, [r7, #20]
    b2cc:	429a      	cmp	r2, r3
    b2ce:	d00c      	beq.n	b2ea <_ZN8SdVolume6fatPutEmm+0x6a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    b2d0:	697b      	ldr	r3, [r7, #20]
    b2d2:	2100      	movs	r1, #0
    b2d4:	0018      	movs	r0, r3
    b2d6:	f7ff fed7 	bl	b088 <_ZN8SdVolume13cacheRawBlockEmh>
    b2da:	0003      	movs	r3, r0
    b2dc:	425a      	negs	r2, r3
    b2de:	4153      	adcs	r3, r2
    b2e0:	b2db      	uxtb	r3, r3
    b2e2:	2b00      	cmp	r3, #0
    b2e4:	d001      	beq.n	b2ea <_ZN8SdVolume6fatPutEmm+0x6a>
    b2e6:	2300      	movs	r3, #0
    b2e8:	e021      	b.n	b32e <_ZN8SdVolume6fatPutEmm+0xae>
  }
  // store entry
  if (fatType_ == 16) {
    b2ea:	68fb      	ldr	r3, [r7, #12]
    b2ec:	2220      	movs	r2, #32
    b2ee:	5c9b      	ldrb	r3, [r3, r2]
    b2f0:	2b10      	cmp	r3, #16
    b2f2:	d108      	bne.n	b306 <_ZN8SdVolume6fatPutEmm+0x86>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    b2f4:	68bb      	ldr	r3, [r7, #8]
    b2f6:	22ff      	movs	r2, #255	; 0xff
    b2f8:	401a      	ands	r2, r3
    b2fa:	687b      	ldr	r3, [r7, #4]
    b2fc:	b299      	uxth	r1, r3
    b2fe:	4b0f      	ldr	r3, [pc, #60]	; (b33c <_ZN8SdVolume6fatPutEmm+0xbc>)
    b300:	0052      	lsls	r2, r2, #1
    b302:	52d1      	strh	r1, [r2, r3]
    b304:	e006      	b.n	b314 <_ZN8SdVolume6fatPutEmm+0x94>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    b306:	68bb      	ldr	r3, [r7, #8]
    b308:	227f      	movs	r2, #127	; 0x7f
    b30a:	401a      	ands	r2, r3
    b30c:	4b0b      	ldr	r3, [pc, #44]	; (b33c <_ZN8SdVolume6fatPutEmm+0xbc>)
    b30e:	0092      	lsls	r2, r2, #2
    b310:	6879      	ldr	r1, [r7, #4]
    b312:	50d1      	str	r1, [r2, r3]
  }
  cacheSetDirty();
    b314:	f7fe fcd0 	bl	9cb8 <_ZN8SdVolume13cacheSetDirtyEv>

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    b318:	68fb      	ldr	r3, [r7, #12]
    b31a:	7e1b      	ldrb	r3, [r3, #24]
    b31c:	2b01      	cmp	r3, #1
    b31e:	dd05      	ble.n	b32c <_ZN8SdVolume6fatPutEmm+0xac>
    b320:	68fb      	ldr	r3, [r7, #12]
    b322:	689a      	ldr	r2, [r3, #8]
    b324:	697b      	ldr	r3, [r7, #20]
    b326:	18d2      	adds	r2, r2, r3
    b328:	4b05      	ldr	r3, [pc, #20]	; (b340 <_ZN8SdVolume6fatPutEmm+0xc0>)
    b32a:	601a      	str	r2, [r3, #0]
  return true;
    b32c:	2301      	movs	r3, #1
}
    b32e:	0018      	movs	r0, r3
    b330:	46bd      	mov	sp, r7
    b332:	b006      	add	sp, #24
    b334:	bd80      	pop	{r7, pc}
    b336:	46c0      	nop			; (mov r8, r8)
    b338:	2000004c 	.word	0x2000004c
    b33c:	20000968 	.word	0x20000968
    b340:	20000b70 	.word	0x20000b70

0000b344 <_ZN8SdVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    b344:	b580      	push	{r7, lr}
    b346:	b084      	sub	sp, #16
    b348:	af00      	add	r7, sp, #0
    b34a:	6078      	str	r0, [r7, #4]
    b34c:	6039      	str	r1, [r7, #0]
  // clear free cluster location
  allocSearchStart_ = 2;
    b34e:	687b      	ldr	r3, [r7, #4]
    b350:	2202      	movs	r2, #2
    b352:	601a      	str	r2, [r3, #0]

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    b354:	230c      	movs	r3, #12
    b356:	18fa      	adds	r2, r7, r3
    b358:	6839      	ldr	r1, [r7, #0]
    b35a:	687b      	ldr	r3, [r7, #4]
    b35c:	0018      	movs	r0, r3
    b35e:	f7ff ff3d 	bl	b1dc <_ZNK8SdVolume6fatGetEmPm>
    b362:	0003      	movs	r3, r0
    b364:	425a      	negs	r2, r3
    b366:	4153      	adcs	r3, r2
    b368:	b2db      	uxtb	r3, r3
    b36a:	2b00      	cmp	r3, #0
    b36c:	d001      	beq.n	b372 <_ZN8SdVolume9freeChainEm+0x2e>
    b36e:	2300      	movs	r3, #0
    b370:	e01d      	b.n	b3ae <_ZN8SdVolume9freeChainEm+0x6a>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    b372:	6839      	ldr	r1, [r7, #0]
    b374:	687b      	ldr	r3, [r7, #4]
    b376:	2200      	movs	r2, #0
    b378:	0018      	movs	r0, r3
    b37a:	f7ff ff81 	bl	b280 <_ZN8SdVolume6fatPutEmm>
    b37e:	0003      	movs	r3, r0
    b380:	425a      	negs	r2, r3
    b382:	4153      	adcs	r3, r2
    b384:	b2db      	uxtb	r3, r3
    b386:	2b00      	cmp	r3, #0
    b388:	d001      	beq.n	b38e <_ZN8SdVolume9freeChainEm+0x4a>
    b38a:	2300      	movs	r3, #0
    b38c:	e00f      	b.n	b3ae <_ZN8SdVolume9freeChainEm+0x6a>

    cluster = next;
    b38e:	68fb      	ldr	r3, [r7, #12]
    b390:	603b      	str	r3, [r7, #0]
  } while (!isEOC(cluster));
    b392:	683a      	ldr	r2, [r7, #0]
    b394:	687b      	ldr	r3, [r7, #4]
    b396:	0011      	movs	r1, r2
    b398:	0018      	movs	r0, r3
    b39a:	f7fe fcad 	bl	9cf8 <_ZNK8SdVolume5isEOCEm>
    b39e:	0003      	movs	r3, r0
  do {
    b3a0:	425a      	negs	r2, r3
    b3a2:	4153      	adcs	r3, r2
    b3a4:	b2db      	uxtb	r3, r3
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	d000      	beq.n	b3ac <_ZN8SdVolume9freeChainEm+0x68>
    b3aa:	e7d3      	b.n	b354 <_ZN8SdVolume9freeChainEm+0x10>

  return true;
    b3ac:	2301      	movs	r3, #1
}
    b3ae:	0018      	movs	r0, r3
    b3b0:	46bd      	mov	sp, r7
    b3b2:	b004      	add	sp, #16
    b3b4:	bd80      	pop	{r7, pc}
	...

0000b3b8 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    b3b8:	b580      	push	{r7, lr}
    b3ba:	b088      	sub	sp, #32
    b3bc:	af00      	add	r7, sp, #0
    b3be:	60f8      	str	r0, [r7, #12]
    b3c0:	60b9      	str	r1, [r7, #8]
    b3c2:	1dfb      	adds	r3, r7, #7
    b3c4:	701a      	strb	r2, [r3, #0]
  uint32_t volumeStartBlock = 0;
    b3c6:	2300      	movs	r3, #0
    b3c8:	61fb      	str	r3, [r7, #28]
  sdCard_ = dev;
    b3ca:	4ba6      	ldr	r3, [pc, #664]	; (b664 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ac>)
    b3cc:	68ba      	ldr	r2, [r7, #8]
    b3ce:	601a      	str	r2, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    b3d0:	1dfb      	adds	r3, r7, #7
    b3d2:	781b      	ldrb	r3, [r3, #0]
    b3d4:	2b00      	cmp	r3, #0
    b3d6:	d04a      	beq.n	b46e <_ZN8SdVolume4initEP7Sd2Cardh+0xb6>
    if (part > 4)return false;
    b3d8:	1dfb      	adds	r3, r7, #7
    b3da:	781b      	ldrb	r3, [r3, #0]
    b3dc:	2b04      	cmp	r3, #4
    b3de:	dd01      	ble.n	b3e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    b3e0:	2300      	movs	r3, #0
    b3e2:	e13b      	b.n	b65c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    b3e4:	69fb      	ldr	r3, [r7, #28]
    b3e6:	2100      	movs	r1, #0
    b3e8:	0018      	movs	r0, r3
    b3ea:	f7ff fe4d 	bl	b088 <_ZN8SdVolume13cacheRawBlockEmh>
    b3ee:	0003      	movs	r3, r0
    b3f0:	425a      	negs	r2, r3
    b3f2:	4153      	adcs	r3, r2
    b3f4:	b2db      	uxtb	r3, r3
    b3f6:	2b00      	cmp	r3, #0
    b3f8:	d001      	beq.n	b3fe <_ZN8SdVolume4initEP7Sd2Cardh+0x46>
    b3fa:	2300      	movs	r3, #0
    b3fc:	e12e      	b.n	b65c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    b3fe:	1dfb      	adds	r3, r7, #7
    b400:	781b      	ldrb	r3, [r3, #0]
    b402:	3b01      	subs	r3, #1
    b404:	011b      	lsls	r3, r3, #4
    b406:	33b9      	adds	r3, #185	; 0xb9
    b408:	33ff      	adds	r3, #255	; 0xff
    b40a:	001a      	movs	r2, r3
    b40c:	4b96      	ldr	r3, [pc, #600]	; (b668 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b0>)
    b40e:	18d3      	adds	r3, r2, r3
    b410:	3306      	adds	r3, #6
    b412:	61bb      	str	r3, [r7, #24]
    if ((p->boot & 0X7F) !=0  ||
    b414:	69bb      	ldr	r3, [r7, #24]
    b416:	781b      	ldrb	r3, [r3, #0]
    b418:	001a      	movs	r2, r3
    b41a:	237f      	movs	r3, #127	; 0x7f
    b41c:	4013      	ands	r3, r2
    b41e:	d118      	bne.n	b452 <_ZN8SdVolume4initEP7Sd2Cardh+0x9a>
      p->totalSectors < 100 ||
    b420:	69bb      	ldr	r3, [r7, #24]
    b422:	7b1a      	ldrb	r2, [r3, #12]
    b424:	7b59      	ldrb	r1, [r3, #13]
    b426:	0209      	lsls	r1, r1, #8
    b428:	430a      	orrs	r2, r1
    b42a:	7b99      	ldrb	r1, [r3, #14]
    b42c:	0409      	lsls	r1, r1, #16
    b42e:	430a      	orrs	r2, r1
    b430:	7bdb      	ldrb	r3, [r3, #15]
    b432:	061b      	lsls	r3, r3, #24
    b434:	4313      	orrs	r3, r2
    if ((p->boot & 0X7F) !=0  ||
    b436:	2b63      	cmp	r3, #99	; 0x63
    b438:	d90b      	bls.n	b452 <_ZN8SdVolume4initEP7Sd2Cardh+0x9a>
      p->firstSector == 0) {
    b43a:	69bb      	ldr	r3, [r7, #24]
    b43c:	7a1a      	ldrb	r2, [r3, #8]
    b43e:	7a59      	ldrb	r1, [r3, #9]
    b440:	0209      	lsls	r1, r1, #8
    b442:	430a      	orrs	r2, r1
    b444:	7a99      	ldrb	r1, [r3, #10]
    b446:	0409      	lsls	r1, r1, #16
    b448:	430a      	orrs	r2, r1
    b44a:	7adb      	ldrb	r3, [r3, #11]
    b44c:	061b      	lsls	r3, r3, #24
    b44e:	4313      	orrs	r3, r2
      p->totalSectors < 100 ||
    b450:	d101      	bne.n	b456 <_ZN8SdVolume4initEP7Sd2Cardh+0x9e>
      // not a valid partition
      return false;
    b452:	2300      	movs	r3, #0
    b454:	e102      	b.n	b65c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    }
    volumeStartBlock = p->firstSector;
    b456:	69bb      	ldr	r3, [r7, #24]
    b458:	7a1a      	ldrb	r2, [r3, #8]
    b45a:	7a59      	ldrb	r1, [r3, #9]
    b45c:	0209      	lsls	r1, r1, #8
    b45e:	430a      	orrs	r2, r1
    b460:	7a99      	ldrb	r1, [r3, #10]
    b462:	0409      	lsls	r1, r1, #16
    b464:	430a      	orrs	r2, r1
    b466:	7adb      	ldrb	r3, [r3, #11]
    b468:	061b      	lsls	r3, r3, #24
    b46a:	4313      	orrs	r3, r2
    b46c:	61fb      	str	r3, [r7, #28]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    b46e:	69fb      	ldr	r3, [r7, #28]
    b470:	2100      	movs	r1, #0
    b472:	0018      	movs	r0, r3
    b474:	f7ff fe08 	bl	b088 <_ZN8SdVolume13cacheRawBlockEmh>
    b478:	0003      	movs	r3, r0
    b47a:	425a      	negs	r2, r3
    b47c:	4153      	adcs	r3, r2
    b47e:	b2db      	uxtb	r3, r3
    b480:	2b00      	cmp	r3, #0
    b482:	d001      	beq.n	b488 <_ZN8SdVolume4initEP7Sd2Cardh+0xd0>
    b484:	2300      	movs	r3, #0
    b486:	e0e9      	b.n	b65c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
    b488:	4b78      	ldr	r3, [pc, #480]	; (b66c <_ZN8SdVolume4initEP7Sd2Cardh+0x2b4>)
    b48a:	617b      	str	r3, [r7, #20]
  if (bpb->bytesPerSector != 512 ||
    b48c:	697b      	ldr	r3, [r7, #20]
    b48e:	781a      	ldrb	r2, [r3, #0]
    b490:	785b      	ldrb	r3, [r3, #1]
    b492:	021b      	lsls	r3, r3, #8
    b494:	4313      	orrs	r3, r2
    b496:	b29a      	uxth	r2, r3
    b498:	2380      	movs	r3, #128	; 0x80
    b49a:	009b      	lsls	r3, r3, #2
    b49c:	429a      	cmp	r2, r3
    b49e:	d10f      	bne.n	b4c0 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->fatCount == 0 ||
    b4a0:	697b      	ldr	r3, [r7, #20]
    b4a2:	795b      	ldrb	r3, [r3, #5]
  if (bpb->bytesPerSector != 512 ||
    b4a4:	2b00      	cmp	r3, #0
    b4a6:	d00b      	beq.n	b4c0 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->reservedSectorCount == 0 ||
    b4a8:	697b      	ldr	r3, [r7, #20]
    b4aa:	78da      	ldrb	r2, [r3, #3]
    b4ac:	791b      	ldrb	r3, [r3, #4]
    b4ae:	021b      	lsls	r3, r3, #8
    b4b0:	4313      	orrs	r3, r2
    b4b2:	b29b      	uxth	r3, r3
    bpb->fatCount == 0 ||
    b4b4:	2b00      	cmp	r3, #0
    b4b6:	d003      	beq.n	b4c0 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->sectorsPerCluster == 0) {
    b4b8:	697b      	ldr	r3, [r7, #20]
    b4ba:	789b      	ldrb	r3, [r3, #2]
    bpb->reservedSectorCount == 0 ||
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d101      	bne.n	b4c4 <_ZN8SdVolume4initEP7Sd2Cardh+0x10c>
       // not valid FAT volume
      return false;
    b4c0:	2300      	movs	r3, #0
    b4c2:	e0cb      	b.n	b65c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  }
  fatCount_ = bpb->fatCount;
    b4c4:	697b      	ldr	r3, [r7, #20]
    b4c6:	795a      	ldrb	r2, [r3, #5]
    b4c8:	68fb      	ldr	r3, [r7, #12]
    b4ca:	761a      	strb	r2, [r3, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;
    b4cc:	697b      	ldr	r3, [r7, #20]
    b4ce:	789a      	ldrb	r2, [r3, #2]
    b4d0:	68fb      	ldr	r3, [r7, #12]
    b4d2:	711a      	strb	r2, [r3, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    b4d4:	68fb      	ldr	r3, [r7, #12]
    b4d6:	2200      	movs	r2, #0
    b4d8:	741a      	strb	r2, [r3, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    b4da:	68fb      	ldr	r3, [r7, #12]
    b4dc:	791b      	ldrb	r3, [r3, #4]
    b4de:	001a      	movs	r2, r3
    b4e0:	68fb      	ldr	r3, [r7, #12]
    b4e2:	7c1b      	ldrb	r3, [r3, #16]
    b4e4:	0019      	movs	r1, r3
    b4e6:	2301      	movs	r3, #1
    b4e8:	408b      	lsls	r3, r1
    b4ea:	429a      	cmp	r2, r3
    b4ec:	d00f      	beq.n	b50e <_ZN8SdVolume4initEP7Sd2Cardh+0x156>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    b4ee:	68fb      	ldr	r3, [r7, #12]
    b4f0:	7c1b      	ldrb	r3, [r3, #16]
    b4f2:	1c5a      	adds	r2, r3, #1
    b4f4:	b2d1      	uxtb	r1, r2
    b4f6:	68fa      	ldr	r2, [r7, #12]
    b4f8:	7411      	strb	r1, [r2, #16]
    b4fa:	2201      	movs	r2, #1
    b4fc:	2b07      	cmp	r3, #7
    b4fe:	dc01      	bgt.n	b504 <_ZN8SdVolume4initEP7Sd2Cardh+0x14c>
    b500:	2300      	movs	r3, #0
    b502:	1c1a      	adds	r2, r3, #0
    b504:	b2d3      	uxtb	r3, r2
    b506:	2b00      	cmp	r3, #0
    b508:	d0e7      	beq.n	b4da <_ZN8SdVolume4initEP7Sd2Cardh+0x122>
    b50a:	2300      	movs	r3, #0
    b50c:	e0a6      	b.n	b65c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    b50e:	697b      	ldr	r3, [r7, #20]
    b510:	7ada      	ldrb	r2, [r3, #11]
    b512:	7b1b      	ldrb	r3, [r3, #12]
    b514:	021b      	lsls	r3, r3, #8
    b516:	4313      	orrs	r3, r2
    b518:	b29b      	uxth	r3, r3
    b51a:	2b00      	cmp	r3, #0
    b51c:	d007      	beq.n	b52e <_ZN8SdVolume4initEP7Sd2Cardh+0x176>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    b51e:	697b      	ldr	r3, [r7, #20]
    b520:	7ada      	ldrb	r2, [r3, #11]
    b522:	7b1b      	ldrb	r3, [r3, #12]
    b524:	021b      	lsls	r3, r3, #8
    b526:	4313      	orrs	r3, r2
    b528:	b29b      	uxth	r3, r3
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    b52a:	001a      	movs	r2, r3
    b52c:	e00b      	b.n	b546 <_ZN8SdVolume4initEP7Sd2Cardh+0x18e>
    b52e:	697b      	ldr	r3, [r7, #20]
    b530:	7e5a      	ldrb	r2, [r3, #25]
    b532:	7e99      	ldrb	r1, [r3, #26]
    b534:	0209      	lsls	r1, r1, #8
    b536:	430a      	orrs	r2, r1
    b538:	7ed9      	ldrb	r1, [r3, #27]
    b53a:	0409      	lsls	r1, r1, #16
    b53c:	430a      	orrs	r2, r1
    b53e:	7f1b      	ldrb	r3, [r3, #28]
    b540:	061b      	lsls	r3, r3, #24
    b542:	4313      	orrs	r3, r2
    b544:	001a      	movs	r2, r3
    b546:	68fb      	ldr	r3, [r7, #12]
    b548:	609a      	str	r2, [r3, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    b54a:	697b      	ldr	r3, [r7, #20]
    b54c:	78da      	ldrb	r2, [r3, #3]
    b54e:	791b      	ldrb	r3, [r3, #4]
    b550:	021b      	lsls	r3, r3, #8
    b552:	4313      	orrs	r3, r2
    b554:	b29b      	uxth	r3, r3
    b556:	001a      	movs	r2, r3
    b558:	69fb      	ldr	r3, [r7, #28]
    b55a:	18d2      	adds	r2, r2, r3
    b55c:	68fb      	ldr	r3, [r7, #12]
    b55e:	61da      	str	r2, [r3, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    b560:	697b      	ldr	r3, [r7, #20]
    b562:	799a      	ldrb	r2, [r3, #6]
    b564:	79db      	ldrb	r3, [r3, #7]
    b566:	021b      	lsls	r3, r3, #8
    b568:	4313      	orrs	r3, r2
    b56a:	b29a      	uxth	r2, r3
    b56c:	68fb      	ldr	r3, [r7, #12]
    b56e:	845a      	strh	r2, [r3, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    b570:	68fb      	ldr	r3, [r7, #12]
    b572:	69da      	ldr	r2, [r3, #28]
    b574:	697b      	ldr	r3, [r7, #20]
    b576:	795b      	ldrb	r3, [r3, #5]
    b578:	0019      	movs	r1, r3
    b57a:	68fb      	ldr	r3, [r7, #12]
    b57c:	689b      	ldr	r3, [r3, #8]
    b57e:	434b      	muls	r3, r1
    b580:	18d2      	adds	r2, r2, r3
    b582:	68fb      	ldr	r3, [r7, #12]
    b584:	625a      	str	r2, [r3, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    b586:	68fb      	ldr	r3, [r7, #12]
    b588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b58a:	697b      	ldr	r3, [r7, #20]
    b58c:	7999      	ldrb	r1, [r3, #6]
    b58e:	79db      	ldrb	r3, [r3, #7]
    b590:	021b      	lsls	r3, r3, #8
    b592:	430b      	orrs	r3, r1
    b594:	b29b      	uxth	r3, r3
    b596:	015b      	lsls	r3, r3, #5
    b598:	4935      	ldr	r1, [pc, #212]	; (b670 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b8>)
    b59a:	468c      	mov	ip, r1
    b59c:	4463      	add	r3, ip
    b59e:	2b00      	cmp	r3, #0
    b5a0:	da02      	bge.n	b5a8 <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    b5a2:	4933      	ldr	r1, [pc, #204]	; (b670 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b8>)
    b5a4:	468c      	mov	ip, r1
    b5a6:	4463      	add	r3, ip
    b5a8:	125b      	asrs	r3, r3, #9
    b5aa:	18d2      	adds	r2, r2, r3
    b5ac:	68fb      	ldr	r3, [r7, #12]
    b5ae:	615a      	str	r2, [r3, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    b5b0:	697b      	ldr	r3, [r7, #20]
    b5b2:	7a1a      	ldrb	r2, [r3, #8]
    b5b4:	7a5b      	ldrb	r3, [r3, #9]
    b5b6:	021b      	lsls	r3, r3, #8
    b5b8:	4313      	orrs	r3, r2
    b5ba:	b29b      	uxth	r3, r3
    b5bc:	2b00      	cmp	r3, #0
    b5be:	d006      	beq.n	b5ce <_ZN8SdVolume4initEP7Sd2Cardh+0x216>
                           bpb->totalSectors16 : bpb->totalSectors32;
    b5c0:	697b      	ldr	r3, [r7, #20]
    b5c2:	7a1a      	ldrb	r2, [r3, #8]
    b5c4:	7a5b      	ldrb	r3, [r3, #9]
    b5c6:	021b      	lsls	r3, r3, #8
    b5c8:	4313      	orrs	r3, r2
    b5ca:	b29b      	uxth	r3, r3
    b5cc:	e00a      	b.n	b5e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x22c>
  uint32_t totalBlocks = bpb->totalSectors16 ?
    b5ce:	697b      	ldr	r3, [r7, #20]
    b5d0:	7d5a      	ldrb	r2, [r3, #21]
    b5d2:	7d99      	ldrb	r1, [r3, #22]
    b5d4:	0209      	lsls	r1, r1, #8
    b5d6:	430a      	orrs	r2, r1
    b5d8:	7dd9      	ldrb	r1, [r3, #23]
    b5da:	0409      	lsls	r1, r1, #16
    b5dc:	430a      	orrs	r2, r1
    b5de:	7e1b      	ldrb	r3, [r3, #24]
    b5e0:	061b      	lsls	r3, r3, #24
    b5e2:	4313      	orrs	r3, r2
                           bpb->totalSectors16 : bpb->totalSectors32;
    b5e4:	613b      	str	r3, [r7, #16]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    b5e6:	68fb      	ldr	r3, [r7, #12]
    b5e8:	695b      	ldr	r3, [r3, #20]
    b5ea:	69fa      	ldr	r2, [r7, #28]
    b5ec:	1ad2      	subs	r2, r2, r3
    b5ee:	693b      	ldr	r3, [r7, #16]
    b5f0:	18d2      	adds	r2, r2, r3
    b5f2:	68fb      	ldr	r3, [r7, #12]
    b5f4:	60da      	str	r2, [r3, #12]

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    b5f6:	68fb      	ldr	r3, [r7, #12]
    b5f8:	68db      	ldr	r3, [r3, #12]
    b5fa:	68fa      	ldr	r2, [r7, #12]
    b5fc:	7c12      	ldrb	r2, [r2, #16]
    b5fe:	40d3      	lsrs	r3, r2
    b600:	001a      	movs	r2, r3
    b602:	68fb      	ldr	r3, [r7, #12]
    b604:	60da      	str	r2, [r3, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    b606:	68fb      	ldr	r3, [r7, #12]
    b608:	68db      	ldr	r3, [r3, #12]
    b60a:	4a1a      	ldr	r2, [pc, #104]	; (b674 <_ZN8SdVolume4initEP7Sd2Cardh+0x2bc>)
    b60c:	4293      	cmp	r3, r2
    b60e:	d804      	bhi.n	b61a <_ZN8SdVolume4initEP7Sd2Cardh+0x262>
    fatType_ = 12;
    b610:	68fb      	ldr	r3, [r7, #12]
    b612:	2220      	movs	r2, #32
    b614:	210c      	movs	r1, #12
    b616:	5499      	strb	r1, [r3, r2]
    b618:	e01f      	b.n	b65a <_ZN8SdVolume4initEP7Sd2Cardh+0x2a2>
  } else if (clusterCount_ < 65525) {
    b61a:	68fb      	ldr	r3, [r7, #12]
    b61c:	68db      	ldr	r3, [r3, #12]
    b61e:	4a16      	ldr	r2, [pc, #88]	; (b678 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c0>)
    b620:	4293      	cmp	r3, r2
    b622:	d804      	bhi.n	b62e <_ZN8SdVolume4initEP7Sd2Cardh+0x276>
    fatType_ = 16;
    b624:	68fb      	ldr	r3, [r7, #12]
    b626:	2220      	movs	r2, #32
    b628:	2110      	movs	r1, #16
    b62a:	5499      	strb	r1, [r3, r2]
    b62c:	e015      	b.n	b65a <_ZN8SdVolume4initEP7Sd2Cardh+0x2a2>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    b62e:	697b      	ldr	r3, [r7, #20]
    b630:	2221      	movs	r2, #33	; 0x21
    b632:	5c9a      	ldrb	r2, [r3, r2]
    b634:	2122      	movs	r1, #34	; 0x22
    b636:	5c59      	ldrb	r1, [r3, r1]
    b638:	0209      	lsls	r1, r1, #8
    b63a:	430a      	orrs	r2, r1
    b63c:	2123      	movs	r1, #35	; 0x23
    b63e:	5c59      	ldrb	r1, [r3, r1]
    b640:	0409      	lsls	r1, r1, #16
    b642:	430a      	orrs	r2, r1
    b644:	2124      	movs	r1, #36	; 0x24
    b646:	5c5b      	ldrb	r3, [r3, r1]
    b648:	061b      	lsls	r3, r3, #24
    b64a:	4313      	orrs	r3, r2
    b64c:	001a      	movs	r2, r3
    b64e:	68fb      	ldr	r3, [r7, #12]
    b650:	625a      	str	r2, [r3, #36]	; 0x24
    fatType_ = 32;
    b652:	68fb      	ldr	r3, [r7, #12]
    b654:	2220      	movs	r2, #32
    b656:	2120      	movs	r1, #32
    b658:	5499      	strb	r1, [r3, r2]
  }
  return true;
    b65a:	2301      	movs	r3, #1
}
    b65c:	0018      	movs	r0, r3
    b65e:	46bd      	mov	sp, r7
    b660:	b008      	add	sp, #32
    b662:	bd80      	pop	{r7, pc}
    b664:	20000b68 	.word	0x20000b68
    b668:	20000968 	.word	0x20000968
    b66c:	20000973 	.word	0x20000973
    b670:	000001ff 	.word	0x000001ff
    b674:	00000ff4 	.word	0x00000ff4
    b678:	0000fff4 	.word	0x0000fff4

0000b67c <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
#define SPI_IMODE_EXTINT 1
#define SPI_IMODE_GLOBAL 2

const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();

SPIClass::SPIClass(SERCOM *p_sercom, uint8_t uc_pinMISO, uint8_t uc_pinSCK, uint8_t uc_pinMOSI, SercomSpiTXPad PadTx, SercomRXPad PadRx)
    b67c:	b580      	push	{r7, lr}
    b67e:	b084      	sub	sp, #16
    b680:	af00      	add	r7, sp, #0
    b682:	60f8      	str	r0, [r7, #12]
    b684:	60b9      	str	r1, [r7, #8]
    b686:	0019      	movs	r1, r3
    b688:	1dfb      	adds	r3, r7, #7
    b68a:	701a      	strb	r2, [r3, #0]
    b68c:	1dbb      	adds	r3, r7, #6
    b68e:	1c0a      	adds	r2, r1, #0
    b690:	701a      	strb	r2, [r3, #0]
{
  initialized = false;
    b692:	68fb      	ldr	r3, [r7, #12]
    b694:	2200      	movs	r2, #0
    b696:	725a      	strb	r2, [r3, #9]
  assert(p_sercom != NULL);
    b698:	68bb      	ldr	r3, [r7, #8]
    b69a:	2b00      	cmp	r3, #0
    b69c:	d105      	bne.n	b6aa <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2e>
    b69e:	4b12      	ldr	r3, [pc, #72]	; (b6e8 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x6c>)
    b6a0:	4a12      	ldr	r2, [pc, #72]	; (b6ec <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x70>)
    b6a2:	4813      	ldr	r0, [pc, #76]	; (b6f0 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x74>)
    b6a4:	2122      	movs	r1, #34	; 0x22
    b6a6:	f005 f81f 	bl	106e8 <__assert_func>
  _p_sercom = p_sercom;
    b6aa:	68fb      	ldr	r3, [r7, #12]
    b6ac:	68ba      	ldr	r2, [r7, #8]
    b6ae:	601a      	str	r2, [r3, #0]

  // pins
  _uc_pinMiso = uc_pinMISO;
    b6b0:	68fb      	ldr	r3, [r7, #12]
    b6b2:	1dfa      	adds	r2, r7, #7
    b6b4:	7812      	ldrb	r2, [r2, #0]
    b6b6:	711a      	strb	r2, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    b6b8:	68fb      	ldr	r3, [r7, #12]
    b6ba:	1dba      	adds	r2, r7, #6
    b6bc:	7812      	ldrb	r2, [r2, #0]
    b6be:	719a      	strb	r2, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    b6c0:	68fb      	ldr	r3, [r7, #12]
    b6c2:	2218      	movs	r2, #24
    b6c4:	18ba      	adds	r2, r7, r2
    b6c6:	7812      	ldrb	r2, [r2, #0]
    b6c8:	715a      	strb	r2, [r3, #5]

  // SERCOM pads
  _padTx=PadTx;
    b6ca:	68fb      	ldr	r3, [r7, #12]
    b6cc:	221c      	movs	r2, #28
    b6ce:	18ba      	adds	r2, r7, r2
    b6d0:	7812      	ldrb	r2, [r2, #0]
    b6d2:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    b6d4:	68fb      	ldr	r3, [r7, #12]
    b6d6:	2220      	movs	r2, #32
    b6d8:	18ba      	adds	r2, r7, r2
    b6da:	7812      	ldrb	r2, [r2, #0]
    b6dc:	721a      	strb	r2, [r3, #8]
}
    b6de:	68fb      	ldr	r3, [r7, #12]
    b6e0:	0018      	movs	r0, r3
    b6e2:	46bd      	mov	sp, r7
    b6e4:	b004      	add	sp, #16
    b6e6:	bd80      	pop	{r7, pc}
    b6e8:	000135fc 	.word	0x000135fc
    b6ec:	00013630 	.word	0x00013630
    b6f0:	00013610 	.word	0x00013610

0000b6f4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    b6f4:	b580      	push	{r7, lr}
    b6f6:	b082      	sub	sp, #8
    b6f8:	af00      	add	r7, sp, #0
    b6fa:	6078      	str	r0, [r7, #4]
  init();
    b6fc:	687b      	ldr	r3, [r7, #4]
    b6fe:	0018      	movs	r0, r3
    b700:	f000 f844 	bl	b78c <_ZN8SPIClass4initEv>

  // PIO init
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    b704:	687b      	ldr	r3, [r7, #4]
    b706:	791b      	ldrb	r3, [r3, #4]
    b708:	0018      	movs	r0, r3
    b70a:	687b      	ldr	r3, [r7, #4]
    b70c:	791b      	ldrb	r3, [r3, #4]
    b70e:	0019      	movs	r1, r3
    b710:	4a1c      	ldr	r2, [pc, #112]	; (b784 <_ZN8SPIClass5beginEv+0x90>)
    b712:	000b      	movs	r3, r1
    b714:	005b      	lsls	r3, r3, #1
    b716:	185b      	adds	r3, r3, r1
    b718:	00db      	lsls	r3, r3, #3
    b71a:	18d3      	adds	r3, r2, r3
    b71c:	3308      	adds	r3, #8
    b71e:	781b      	ldrb	r3, [r3, #0]
    b720:	b25b      	sxtb	r3, r3
    b722:	0019      	movs	r1, r3
    b724:	f7fb fa2a 	bl	6b7c <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
    b728:	687b      	ldr	r3, [r7, #4]
    b72a:	799b      	ldrb	r3, [r3, #6]
    b72c:	0018      	movs	r0, r3
    b72e:	687b      	ldr	r3, [r7, #4]
    b730:	799b      	ldrb	r3, [r3, #6]
    b732:	0019      	movs	r1, r3
    b734:	4a13      	ldr	r2, [pc, #76]	; (b784 <_ZN8SPIClass5beginEv+0x90>)
    b736:	000b      	movs	r3, r1
    b738:	005b      	lsls	r3, r3, #1
    b73a:	185b      	adds	r3, r3, r1
    b73c:	00db      	lsls	r3, r3, #3
    b73e:	18d3      	adds	r3, r2, r3
    b740:	3308      	adds	r3, #8
    b742:	781b      	ldrb	r3, [r3, #0]
    b744:	b25b      	sxtb	r3, r3
    b746:	0019      	movs	r1, r3
    b748:	f7fb fa18 	bl	6b7c <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
    b74c:	687b      	ldr	r3, [r7, #4]
    b74e:	795b      	ldrb	r3, [r3, #5]
    b750:	0018      	movs	r0, r3
    b752:	687b      	ldr	r3, [r7, #4]
    b754:	795b      	ldrb	r3, [r3, #5]
    b756:	0019      	movs	r1, r3
    b758:	4a0a      	ldr	r2, [pc, #40]	; (b784 <_ZN8SPIClass5beginEv+0x90>)
    b75a:	000b      	movs	r3, r1
    b75c:	005b      	lsls	r3, r3, #1
    b75e:	185b      	adds	r3, r3, r1
    b760:	00db      	lsls	r3, r3, #3
    b762:	18d3      	adds	r3, r2, r3
    b764:	3308      	adds	r3, #8
    b766:	781b      	ldrb	r3, [r3, #0]
    b768:	b25b      	sxtb	r3, r3
    b76a:	0019      	movs	r1, r3
    b76c:	f7fb fa06 	bl	6b7c <pinPeripheral>

  config(DEFAULT_SPI_SETTINGS);
    b770:	4b05      	ldr	r3, [pc, #20]	; (b788 <_ZN8SPIClass5beginEv+0x94>)
    b772:	6878      	ldr	r0, [r7, #4]
    b774:	6819      	ldr	r1, [r3, #0]
    b776:	685a      	ldr	r2, [r3, #4]
    b778:	f000 f821 	bl	b7be <_ZN8SPIClass6configE11SPISettings>
}
    b77c:	46c0      	nop			; (mov r8, r8)
    b77e:	46bd      	mov	sp, r7
    b780:	b002      	add	sp, #8
    b782:	bd80      	pop	{r7, pc}
    b784:	000136a8 	.word	0x000136a8
    b788:	20000b74 	.word	0x20000b74

0000b78c <_ZN8SPIClass4initEv>:

void SPIClass::init()
{
    b78c:	b580      	push	{r7, lr}
    b78e:	b082      	sub	sp, #8
    b790:	af00      	add	r7, sp, #0
    b792:	6078      	str	r0, [r7, #4]
  if (initialized)
    b794:	687b      	ldr	r3, [r7, #4]
    b796:	7a5b      	ldrb	r3, [r3, #9]
    b798:	2b00      	cmp	r3, #0
    b79a:	d10c      	bne.n	b7b6 <_ZN8SPIClass4initEv+0x2a>
    return;
  interruptMode = SPI_IMODE_NONE;
    b79c:	687b      	ldr	r3, [r7, #4]
    b79e:	2200      	movs	r2, #0
    b7a0:	729a      	strb	r2, [r3, #10]
  interruptSave = 0;
    b7a2:	687b      	ldr	r3, [r7, #4]
    b7a4:	2200      	movs	r2, #0
    b7a6:	72da      	strb	r2, [r3, #11]
  interruptMask = 0;
    b7a8:	687b      	ldr	r3, [r7, #4]
    b7aa:	2200      	movs	r2, #0
    b7ac:	60da      	str	r2, [r3, #12]
  initialized = true;
    b7ae:	687b      	ldr	r3, [r7, #4]
    b7b0:	2201      	movs	r2, #1
    b7b2:	725a      	strb	r2, [r3, #9]
    b7b4:	e000      	b.n	b7b8 <_ZN8SPIClass4initEv+0x2c>
    return;
    b7b6:	46c0      	nop			; (mov r8, r8)
}
    b7b8:	46bd      	mov	sp, r7
    b7ba:	b002      	add	sp, #8
    b7bc:	bd80      	pop	{r7, pc}

0000b7be <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    b7be:	b580      	push	{r7, lr}
    b7c0:	b086      	sub	sp, #24
    b7c2:	af02      	add	r7, sp, #8
    b7c4:	60f8      	str	r0, [r7, #12]
    b7c6:	1d3b      	adds	r3, r7, #4
    b7c8:	6019      	str	r1, [r3, #0]
    b7ca:	605a      	str	r2, [r3, #4]
  _p_sercom->disableSPI();
    b7cc:	68fb      	ldr	r3, [r7, #12]
    b7ce:	681b      	ldr	r3, [r3, #0]
    b7d0:	0018      	movs	r0, r3
    b7d2:	f002 fa9e 	bl	dd12 <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    b7d6:	68fb      	ldr	r3, [r7, #12]
    b7d8:	6818      	ldr	r0, [r3, #0]
    b7da:	68fb      	ldr	r3, [r7, #12]
    b7dc:	79d9      	ldrb	r1, [r3, #7]
    b7de:	68fb      	ldr	r3, [r7, #12]
    b7e0:	7a1a      	ldrb	r2, [r3, #8]
    b7e2:	1d3b      	adds	r3, r7, #4
    b7e4:	795b      	ldrb	r3, [r3, #5]
    b7e6:	9300      	str	r3, [sp, #0]
    b7e8:	2300      	movs	r3, #0
    b7ea:	f002 f9df 	bl	dbac <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    b7ee:	68fb      	ldr	r3, [r7, #12]
    b7f0:	6818      	ldr	r0, [r3, #0]
    b7f2:	1d3b      	adds	r3, r7, #4
    b7f4:	7919      	ldrb	r1, [r3, #4]
    b7f6:	1d3b      	adds	r3, r7, #4
    b7f8:	681b      	ldr	r3, [r3, #0]
    b7fa:	001a      	movs	r2, r3
    b7fc:	f002 fa15 	bl	dc2a <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    b800:	68fb      	ldr	r3, [r7, #12]
    b802:	681b      	ldr	r3, [r3, #0]
    b804:	0018      	movs	r0, r3
    b806:	f002 fa6d 	bl	dce4 <_ZN6SERCOM9enableSPIEv>
}
    b80a:	46c0      	nop			; (mov r8, r8)
    b80c:	46bd      	mov	sp, r7
    b80e:	b004      	add	sp, #16
    b810:	bd80      	pop	{r7, pc}
	...

0000b814 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    b814:	b580      	push	{r7, lr}
    b816:	b086      	sub	sp, #24
    b818:	af00      	add	r7, sp, #0
    b81a:	60f8      	str	r0, [r7, #12]
    b81c:	1d3b      	adds	r3, r7, #4
    b81e:	6019      	str	r1, [r3, #0]
    b820:	605a      	str	r2, [r3, #4]
  if (interruptMode != SPI_IMODE_NONE)
    b822:	68fb      	ldr	r3, [r7, #12]
    b824:	7a9b      	ldrb	r3, [r3, #10]
    b826:	2b00      	cmp	r3, #0
    b828:	d01d      	beq.n	b866 <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    b82a:	68fb      	ldr	r3, [r7, #12]
    b82c:	7a9b      	ldrb	r3, [r3, #10]
    b82e:	001a      	movs	r2, r3
    b830:	2302      	movs	r3, #2
    b832:	4013      	ands	r3, r2
    b834:	d00b      	beq.n	b84e <_ZN8SPIClass16beginTransactionE11SPISettings+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b836:	f3ef 8310 	mrs	r3, PRIMASK
    b83a:	617b      	str	r3, [r7, #20]
  return(result);
    b83c:	697b      	ldr	r3, [r7, #20]
  return (__get_PRIMASK() ? 0 : 1);
    b83e:	425a      	negs	r2, r3
    b840:	4153      	adcs	r3, r2
    b842:	b2db      	uxtb	r3, r3
    b844:	001a      	movs	r2, r3
    {
      interruptSave = interruptsStatus();
    b846:	68fb      	ldr	r3, [r7, #12]
    b848:	72da      	strb	r2, [r3, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    b84a:	b672      	cpsid	i
    b84c:	e00b      	b.n	b866 <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
      noInterrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
    b84e:	68fb      	ldr	r3, [r7, #12]
    b850:	7a9b      	ldrb	r3, [r3, #10]
    b852:	001a      	movs	r2, r3
    b854:	2301      	movs	r3, #1
    b856:	4013      	ands	r3, r2
    b858:	d005      	beq.n	b866 <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    b85a:	4a08      	ldr	r2, [pc, #32]	; (b87c <_ZN8SPIClass16beginTransactionE11SPISettings+0x68>)
    b85c:	68fb      	ldr	r3, [r7, #12]
    b85e:	68db      	ldr	r3, [r3, #12]
    b860:	041b      	lsls	r3, r3, #16
    b862:	0c1b      	lsrs	r3, r3, #16
    b864:	6093      	str	r3, [r2, #8]
  }

  config(settings);
    b866:	1d3b      	adds	r3, r7, #4
    b868:	68f8      	ldr	r0, [r7, #12]
    b86a:	6819      	ldr	r1, [r3, #0]
    b86c:	685a      	ldr	r2, [r3, #4]
    b86e:	f7ff ffa6 	bl	b7be <_ZN8SPIClass6configE11SPISettings>
}
    b872:	46c0      	nop			; (mov r8, r8)
    b874:	46bd      	mov	sp, r7
    b876:	b006      	add	sp, #24
    b878:	bd80      	pop	{r7, pc}
    b87a:	46c0      	nop			; (mov r8, r8)
    b87c:	40001800 	.word	0x40001800

0000b880 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
    b880:	b580      	push	{r7, lr}
    b882:	b082      	sub	sp, #8
    b884:	af00      	add	r7, sp, #0
    b886:	6078      	str	r0, [r7, #4]
  if (interruptMode != SPI_IMODE_NONE)
    b888:	687b      	ldr	r3, [r7, #4]
    b88a:	7a9b      	ldrb	r3, [r3, #10]
    b88c:	2b00      	cmp	r3, #0
    b88e:	d017      	beq.n	b8c0 <_ZN8SPIClass14endTransactionEv+0x40>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    b890:	687b      	ldr	r3, [r7, #4]
    b892:	7a9b      	ldrb	r3, [r3, #10]
    b894:	001a      	movs	r2, r3
    b896:	2302      	movs	r3, #2
    b898:	4013      	ands	r3, r2
    b89a:	d005      	beq.n	b8a8 <_ZN8SPIClass14endTransactionEv+0x28>
    {
      if (interruptSave)
    b89c:	687b      	ldr	r3, [r7, #4]
    b89e:	7adb      	ldrb	r3, [r3, #11]
    b8a0:	2b00      	cmp	r3, #0
    b8a2:	d00d      	beq.n	b8c0 <_ZN8SPIClass14endTransactionEv+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
    b8a4:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    b8a6:	e00b      	b.n	b8c0 <_ZN8SPIClass14endTransactionEv+0x40>
    else if (interruptMode & SPI_IMODE_EXTINT)
    b8a8:	687b      	ldr	r3, [r7, #4]
    b8aa:	7a9b      	ldrb	r3, [r3, #10]
    b8ac:	001a      	movs	r2, r3
    b8ae:	2301      	movs	r3, #1
    b8b0:	4013      	ands	r3, r2
    b8b2:	d005      	beq.n	b8c0 <_ZN8SPIClass14endTransactionEv+0x40>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    b8b4:	4a04      	ldr	r2, [pc, #16]	; (b8c8 <_ZN8SPIClass14endTransactionEv+0x48>)
    b8b6:	687b      	ldr	r3, [r7, #4]
    b8b8:	68db      	ldr	r3, [r3, #12]
    b8ba:	041b      	lsls	r3, r3, #16
    b8bc:	0c1b      	lsrs	r3, r3, #16
    b8be:	60d3      	str	r3, [r2, #12]
}
    b8c0:	46c0      	nop			; (mov r8, r8)
    b8c2:	46bd      	mov	sp, r7
    b8c4:	b002      	add	sp, #8
    b8c6:	bd80      	pop	{r7, pc}
    b8c8:	40001800 	.word	0x40001800

0000b8cc <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    b8cc:	b580      	push	{r7, lr}
    b8ce:	b082      	sub	sp, #8
    b8d0:	af00      	add	r7, sp, #0
    b8d2:	6078      	str	r0, [r7, #4]
    b8d4:	000a      	movs	r2, r1
    b8d6:	1cfb      	adds	r3, r7, #3
    b8d8:	701a      	strb	r2, [r3, #0]
  return _p_sercom->transferDataSPI(data);
    b8da:	687b      	ldr	r3, [r7, #4]
    b8dc:	681a      	ldr	r2, [r3, #0]
    b8de:	1cfb      	adds	r3, r7, #3
    b8e0:	781b      	ldrb	r3, [r3, #0]
    b8e2:	0019      	movs	r1, r3
    b8e4:	0010      	movs	r0, r2
    b8e6:	f002 fa2b 	bl	dd40 <_ZN6SERCOM15transferDataSPIEh>
    b8ea:	0003      	movs	r3, r0
}
    b8ec:	0018      	movs	r0, r3
    b8ee:	46bd      	mov	sp, r7
    b8f0:	b002      	add	sp, #8
    b8f2:	bd80      	pop	{r7, pc}

0000b8f4 <_Z41__static_initialization_and_destruction_0ii>:
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    b8f4:	b580      	push	{r7, lr}
    b8f6:	b086      	sub	sp, #24
    b8f8:	af04      	add	r7, sp, #16
    b8fa:	6078      	str	r0, [r7, #4]
    b8fc:	6039      	str	r1, [r7, #0]
    b8fe:	687b      	ldr	r3, [r7, #4]
    b900:	2b01      	cmp	r3, #1
    b902:	d113      	bne.n	b92c <_Z41__static_initialization_and_destruction_0ii+0x38>
    b904:	683b      	ldr	r3, [r7, #0]
    b906:	4a0b      	ldr	r2, [pc, #44]	; (b934 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    b908:	4293      	cmp	r3, r2
    b90a:	d10f      	bne.n	b92c <_Z41__static_initialization_and_destruction_0ii+0x38>
const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();
    b90c:	4b0a      	ldr	r3, [pc, #40]	; (b938 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    b90e:	0018      	movs	r0, r3
    b910:	f7fd fbf4 	bl	90fc <_ZN11SPISettingsC1Ev>
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    b914:	4909      	ldr	r1, [pc, #36]	; (b93c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    b916:	480a      	ldr	r0, [pc, #40]	; (b940 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    b918:	2300      	movs	r3, #0
    b91a:	9302      	str	r3, [sp, #8]
    b91c:	2301      	movs	r3, #1
    b91e:	9301      	str	r3, [sp, #4]
    b920:	2315      	movs	r3, #21
    b922:	9300      	str	r3, [sp, #0]
    b924:	2314      	movs	r3, #20
    b926:	2212      	movs	r2, #18
    b928:	f7ff fea8 	bl	b67c <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>
    b92c:	46c0      	nop			; (mov r8, r8)
    b92e:	46bd      	mov	sp, r7
    b930:	b002      	add	sp, #8
    b932:	bd80      	pop	{r7, pc}
    b934:	0000ffff 	.word	0x0000ffff
    b938:	20000b74 	.word	0x20000b74
    b93c:	20000dd0 	.word	0x20000dd0
    b940:	20000b7c 	.word	0x20000b7c

0000b944 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
    b944:	b580      	push	{r7, lr}
    b946:	af00      	add	r7, sp, #0
    b948:	4b03      	ldr	r3, [pc, #12]	; (b958 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x14>)
    b94a:	0019      	movs	r1, r3
    b94c:	2001      	movs	r0, #1
    b94e:	f7ff ffd1 	bl	b8f4 <_Z41__static_initialization_and_destruction_0ii>
    b952:	46bd      	mov	sp, r7
    b954:	bd80      	pop	{r7, pc}
    b956:	46c0      	nop			; (mov r8, r8)
    b958:	0000ffff 	.word	0x0000ffff

0000b95c <_ZN7TwoWireC1EP6SERCOMhh>:
#include <Arduino.h>
#include <wiring_private.h>

#include "Wire.h"

TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
    b95c:	b580      	push	{r7, lr}
    b95e:	b084      	sub	sp, #16
    b960:	af00      	add	r7, sp, #0
    b962:	60f8      	str	r0, [r7, #12]
    b964:	60b9      	str	r1, [r7, #8]
    b966:	0019      	movs	r1, r3
    b968:	1dfb      	adds	r3, r7, #7
    b96a:	701a      	strb	r2, [r3, #0]
    b96c:	1dbb      	adds	r3, r7, #6
    b96e:	1c0a      	adds	r2, r1, #0
    b970:	701a      	strb	r2, [r3, #0]
    b972:	68fb      	ldr	r3, [r7, #12]
    b974:	0018      	movs	r0, r3
    b976:	f7f7 fe33 	bl	35e0 <_ZN6StreamC1Ev>
    b97a:	4a10      	ldr	r2, [pc, #64]	; (b9bc <_ZN7TwoWireC1EP6SERCOMhh+0x60>)
    b97c:	68fb      	ldr	r3, [r7, #12]
    b97e:	601a      	str	r2, [r3, #0]
    b980:	68fb      	ldr	r3, [r7, #12]
    b982:	3318      	adds	r3, #24
    b984:	0018      	movs	r0, r3
    b986:	f000 fad1 	bl	bf2c <_ZN11RingBufferNILi256EEC1Ev>
    b98a:	68fb      	ldr	r3, [r7, #12]
    b98c:	3321      	adds	r3, #33	; 0x21
    b98e:	33ff      	adds	r3, #255	; 0xff
    b990:	0018      	movs	r0, r3
    b992:	f000 facb 	bl	bf2c <_ZN11RingBufferNILi256EEC1Ev>
{
  this->sercom = s;
    b996:	68fb      	ldr	r3, [r7, #12]
    b998:	68ba      	ldr	r2, [r7, #8]
    b99a:	611a      	str	r2, [r3, #16]
  this->_uc_pinSDA=pinSDA;
    b99c:	68fb      	ldr	r3, [r7, #12]
    b99e:	1dfa      	adds	r2, r7, #7
    b9a0:	7812      	ldrb	r2, [r2, #0]
    b9a2:	751a      	strb	r2, [r3, #20]
  this->_uc_pinSCL=pinSCL;
    b9a4:	68fb      	ldr	r3, [r7, #12]
    b9a6:	1dba      	adds	r2, r7, #6
    b9a8:	7812      	ldrb	r2, [r2, #0]
    b9aa:	755a      	strb	r2, [r3, #21]
  transmissionBegun = false;
    b9ac:	68fb      	ldr	r3, [r7, #12]
    b9ae:	2200      	movs	r2, #0
    b9b0:	759a      	strb	r2, [r3, #22]
}
    b9b2:	68fb      	ldr	r3, [r7, #12]
    b9b4:	0018      	movs	r0, r3
    b9b6:	46bd      	mov	sp, r7
    b9b8:	b004      	add	sp, #16
    b9ba:	bd80      	pop	{r7, pc}
    b9bc:	0001368c 	.word	0x0001368c

0000b9c0 <_ZN7TwoWire5beginEv>:

void TwoWire::begin(void) {
    b9c0:	b580      	push	{r7, lr}
    b9c2:	b082      	sub	sp, #8
    b9c4:	af00      	add	r7, sp, #0
    b9c6:	6078      	str	r0, [r7, #4]
  //Master Mode
  sercom->initMasterWIRE(TWI_CLOCK);
    b9c8:	687b      	ldr	r3, [r7, #4]
    b9ca:	691b      	ldr	r3, [r3, #16]
    b9cc:	4a18      	ldr	r2, [pc, #96]	; (ba30 <_ZN7TwoWire5beginEv+0x70>)
    b9ce:	0011      	movs	r1, r2
    b9d0:	0018      	movs	r0, r3
    b9d2:	f002 fa47 	bl	de64 <_ZN6SERCOM14initMasterWIREEm>
  sercom->enableWIRE();
    b9d6:	687b      	ldr	r3, [r7, #4]
    b9d8:	691b      	ldr	r3, [r3, #16]
    b9da:	0018      	movs	r0, r3
    b9dc:	f002 fa18 	bl	de10 <_ZN6SERCOM10enableWIREEv>

  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    b9e0:	687b      	ldr	r3, [r7, #4]
    b9e2:	7d1b      	ldrb	r3, [r3, #20]
    b9e4:	0018      	movs	r0, r3
    b9e6:	687b      	ldr	r3, [r7, #4]
    b9e8:	7d1b      	ldrb	r3, [r3, #20]
    b9ea:	0019      	movs	r1, r3
    b9ec:	4a11      	ldr	r2, [pc, #68]	; (ba34 <_ZN7TwoWire5beginEv+0x74>)
    b9ee:	000b      	movs	r3, r1
    b9f0:	005b      	lsls	r3, r3, #1
    b9f2:	185b      	adds	r3, r3, r1
    b9f4:	00db      	lsls	r3, r3, #3
    b9f6:	18d3      	adds	r3, r2, r3
    b9f8:	3308      	adds	r3, #8
    b9fa:	781b      	ldrb	r3, [r3, #0]
    b9fc:	b25b      	sxtb	r3, r3
    b9fe:	0019      	movs	r1, r3
    ba00:	f7fb f8bc 	bl	6b7c <pinPeripheral>
  pinPeripheral(_uc_pinSCL, g_APinDescription[_uc_pinSCL].ulPinType);
    ba04:	687b      	ldr	r3, [r7, #4]
    ba06:	7d5b      	ldrb	r3, [r3, #21]
    ba08:	0018      	movs	r0, r3
    ba0a:	687b      	ldr	r3, [r7, #4]
    ba0c:	7d5b      	ldrb	r3, [r3, #21]
    ba0e:	0019      	movs	r1, r3
    ba10:	4a08      	ldr	r2, [pc, #32]	; (ba34 <_ZN7TwoWire5beginEv+0x74>)
    ba12:	000b      	movs	r3, r1
    ba14:	005b      	lsls	r3, r3, #1
    ba16:	185b      	adds	r3, r3, r1
    ba18:	00db      	lsls	r3, r3, #3
    ba1a:	18d3      	adds	r3, r2, r3
    ba1c:	3308      	adds	r3, #8
    ba1e:	781b      	ldrb	r3, [r3, #0]
    ba20:	b25b      	sxtb	r3, r3
    ba22:	0019      	movs	r1, r3
    ba24:	f7fb f8aa 	bl	6b7c <pinPeripheral>
}
    ba28:	46c0      	nop			; (mov r8, r8)
    ba2a:	46bd      	mov	sp, r7
    ba2c:	b002      	add	sp, #8
    ba2e:	bd80      	pop	{r7, pc}
    ba30:	000186a0 	.word	0x000186a0
    ba34:	000136a8 	.word	0x000136a8

0000ba38 <_ZN7TwoWire11requestFromEhjb>:
void TwoWire::end() {
  sercom->disableWIRE();
}

uint8_t TwoWire::requestFrom(uint8_t address, size_t quantity, bool stopBit)
{
    ba38:	b590      	push	{r4, r7, lr}
    ba3a:	b087      	sub	sp, #28
    ba3c:	af00      	add	r7, sp, #0
    ba3e:	60f8      	str	r0, [r7, #12]
    ba40:	0008      	movs	r0, r1
    ba42:	607a      	str	r2, [r7, #4]
    ba44:	0019      	movs	r1, r3
    ba46:	230b      	movs	r3, #11
    ba48:	18fb      	adds	r3, r7, r3
    ba4a:	1c02      	adds	r2, r0, #0
    ba4c:	701a      	strb	r2, [r3, #0]
    ba4e:	230a      	movs	r3, #10
    ba50:	18fb      	adds	r3, r7, r3
    ba52:	1c0a      	adds	r2, r1, #0
    ba54:	701a      	strb	r2, [r3, #0]
  if(quantity == 0)
    ba56:	687b      	ldr	r3, [r7, #4]
    ba58:	2b00      	cmp	r3, #0
    ba5a:	d101      	bne.n	ba60 <_ZN7TwoWire11requestFromEhjb+0x28>
  {
    return 0;
    ba5c:	2300      	movs	r3, #0
    ba5e:	e052      	b.n	bb06 <_ZN7TwoWire11requestFromEhjb+0xce>
  }

  size_t byteRead = 0;
    ba60:	2300      	movs	r3, #0
    ba62:	617b      	str	r3, [r7, #20]

  rxBuffer.clear();
    ba64:	68fb      	ldr	r3, [r7, #12]
    ba66:	3318      	adds	r3, #24
    ba68:	0018      	movs	r0, r3
    ba6a:	f000 fa73 	bl	bf54 <_ZN11RingBufferNILi256EE5clearEv>

  if(sercom->startTransmissionWIRE(address, WIRE_READ_FLAG))
    ba6e:	68fb      	ldr	r3, [r7, #12]
    ba70:	6918      	ldr	r0, [r3, #16]
    ba72:	230b      	movs	r3, #11
    ba74:	18fb      	adds	r3, r7, r3
    ba76:	781b      	ldrb	r3, [r3, #0]
    ba78:	2201      	movs	r2, #1
    ba7a:	0019      	movs	r1, r3
    ba7c:	f002 faac 	bl	dfd8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    ba80:	1e03      	subs	r3, r0, #0
    ba82:	d03e      	beq.n	bb02 <_ZN7TwoWire11requestFromEhjb+0xca>
  {
    // Read first data
    rxBuffer.store_char(sercom->readDataWIRE());
    ba84:	68fb      	ldr	r3, [r7, #12]
    ba86:	3318      	adds	r3, #24
    ba88:	001c      	movs	r4, r3
    ba8a:	68fb      	ldr	r3, [r7, #12]
    ba8c:	691b      	ldr	r3, [r3, #16]
    ba8e:	0018      	movs	r0, r3
    ba90:	f002 fc07 	bl	e2a2 <_ZN6SERCOM12readDataWIREEv>
    ba94:	0003      	movs	r3, r0
    ba96:	0019      	movs	r1, r3
    ba98:	0020      	movs	r0, r4
    ba9a:	f000 fa6d 	bl	bf78 <_ZN11RingBufferNILi256EE10store_charEh>

    // Connected to slave
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    ba9e:	2301      	movs	r3, #1
    baa0:	617b      	str	r3, [r7, #20]
    baa2:	697a      	ldr	r2, [r7, #20]
    baa4:	687b      	ldr	r3, [r7, #4]
    baa6:	429a      	cmp	r2, r3
    baa8:	d21b      	bcs.n	bae2 <_ZN7TwoWire11requestFromEhjb+0xaa>
    {
      sercom->prepareAckBitWIRE();                          // Prepare Acknowledge
    baaa:	68fb      	ldr	r3, [r7, #12]
    baac:	691b      	ldr	r3, [r3, #16]
    baae:	0018      	movs	r0, r3
    bab0:	f002 fa3a 	bl	df28 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_READ); // Prepare the ACK command for the slave
    bab4:	68fb      	ldr	r3, [r7, #12]
    bab6:	691b      	ldr	r3, [r3, #16]
    bab8:	2102      	movs	r1, #2
    baba:	0018      	movs	r0, r3
    babc:	f002 fa52 	bl	df64 <_ZN6SERCOM22prepareCommandBitsWireEh>
      rxBuffer.store_char(sercom->readDataWIRE());          // Read data and send the ACK
    bac0:	68fb      	ldr	r3, [r7, #12]
    bac2:	3318      	adds	r3, #24
    bac4:	001c      	movs	r4, r3
    bac6:	68fb      	ldr	r3, [r7, #12]
    bac8:	691b      	ldr	r3, [r3, #16]
    baca:	0018      	movs	r0, r3
    bacc:	f002 fbe9 	bl	e2a2 <_ZN6SERCOM12readDataWIREEv>
    bad0:	0003      	movs	r3, r0
    bad2:	0019      	movs	r1, r3
    bad4:	0020      	movs	r0, r4
    bad6:	f000 fa4f 	bl	bf78 <_ZN11RingBufferNILi256EE10store_charEh>
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    bada:	697b      	ldr	r3, [r7, #20]
    badc:	3301      	adds	r3, #1
    bade:	617b      	str	r3, [r7, #20]
    bae0:	e7df      	b.n	baa2 <_ZN7TwoWire11requestFromEhjb+0x6a>
    }
    sercom->prepareNackBitWIRE();                           // Prepare NACK to stop slave transmission
    bae2:	68fb      	ldr	r3, [r7, #12]
    bae4:	691b      	ldr	r3, [r3, #16]
    bae6:	0018      	movs	r0, r3
    bae8:	f002 fa00 	bl	deec <_ZN6SERCOM18prepareNackBitWIREEv>
    //sercom->readDataWIRE();                               // Clear data register to send NACK

    if (stopBit)
    baec:	230a      	movs	r3, #10
    baee:	18fb      	adds	r3, r7, r3
    baf0:	781b      	ldrb	r3, [r3, #0]
    baf2:	2b00      	cmp	r3, #0
    baf4:	d005      	beq.n	bb02 <_ZN7TwoWire11requestFromEhjb+0xca>
    {
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);   // Send Stop
    baf6:	68fb      	ldr	r3, [r7, #12]
    baf8:	691b      	ldr	r3, [r3, #16]
    bafa:	2103      	movs	r1, #3
    bafc:	0018      	movs	r0, r3
    bafe:	f002 fa31 	bl	df64 <_ZN6SERCOM22prepareCommandBitsWireEh>
    }
  }

  return byteRead;
    bb02:	697b      	ldr	r3, [r7, #20]
    bb04:	b2db      	uxtb	r3, r3
}
    bb06:	0018      	movs	r0, r3
    bb08:	46bd      	mov	sp, r7
    bb0a:	b007      	add	sp, #28
    bb0c:	bd90      	pop	{r4, r7, pc}

0000bb0e <_ZN7TwoWire11requestFromEhj>:

uint8_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
    bb0e:	b580      	push	{r7, lr}
    bb10:	b084      	sub	sp, #16
    bb12:	af00      	add	r7, sp, #0
    bb14:	60f8      	str	r0, [r7, #12]
    bb16:	607a      	str	r2, [r7, #4]
    bb18:	230b      	movs	r3, #11
    bb1a:	18fb      	adds	r3, r7, r3
    bb1c:	1c0a      	adds	r2, r1, #0
    bb1e:	701a      	strb	r2, [r3, #0]
  return requestFrom(address, quantity, true);
    bb20:	687a      	ldr	r2, [r7, #4]
    bb22:	230b      	movs	r3, #11
    bb24:	18fb      	adds	r3, r7, r3
    bb26:	7819      	ldrb	r1, [r3, #0]
    bb28:	68f8      	ldr	r0, [r7, #12]
    bb2a:	2301      	movs	r3, #1
    bb2c:	f7ff ff84 	bl	ba38 <_ZN7TwoWire11requestFromEhjb>
    bb30:	0003      	movs	r3, r0
}
    bb32:	0018      	movs	r0, r3
    bb34:	46bd      	mov	sp, r7
    bb36:	b004      	add	sp, #16
    bb38:	bd80      	pop	{r7, pc}

0000bb3a <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address) {
    bb3a:	b580      	push	{r7, lr}
    bb3c:	b082      	sub	sp, #8
    bb3e:	af00      	add	r7, sp, #0
    bb40:	6078      	str	r0, [r7, #4]
    bb42:	000a      	movs	r2, r1
    bb44:	1cfb      	adds	r3, r7, #3
    bb46:	701a      	strb	r2, [r3, #0]
  // save address of target and clear buffer
  txAddress = address;
    bb48:	687a      	ldr	r2, [r7, #4]
    bb4a:	1cf9      	adds	r1, r7, #3
    bb4c:	238a      	movs	r3, #138	; 0x8a
    bb4e:	009b      	lsls	r3, r3, #2
    bb50:	7809      	ldrb	r1, [r1, #0]
    bb52:	54d1      	strb	r1, [r2, r3]
  txBuffer.clear();
    bb54:	687b      	ldr	r3, [r7, #4]
    bb56:	3321      	adds	r3, #33	; 0x21
    bb58:	33ff      	adds	r3, #255	; 0xff
    bb5a:	0018      	movs	r0, r3
    bb5c:	f000 f9fa 	bl	bf54 <_ZN11RingBufferNILi256EE5clearEv>

  transmissionBegun = true;
    bb60:	687b      	ldr	r3, [r7, #4]
    bb62:	2201      	movs	r2, #1
    bb64:	759a      	strb	r2, [r3, #22]
}
    bb66:	46c0      	nop			; (mov r8, r8)
    bb68:	46bd      	mov	sp, r7
    bb6a:	b002      	add	sp, #8
    bb6c:	bd80      	pop	{r7, pc}

0000bb6e <_ZN7TwoWire15endTransmissionEb>:
//  1 : Data too long
//  2 : NACK on transmit of address
//  3 : NACK on transmit of data
//  4 : Other error
uint8_t TwoWire::endTransmission(bool stopBit)
{
    bb6e:	b590      	push	{r4, r7, lr}
    bb70:	b083      	sub	sp, #12
    bb72:	af00      	add	r7, sp, #0
    bb74:	6078      	str	r0, [r7, #4]
    bb76:	000a      	movs	r2, r1
    bb78:	1cfb      	adds	r3, r7, #3
    bb7a:	701a      	strb	r2, [r3, #0]
  transmissionBegun = false ;
    bb7c:	687b      	ldr	r3, [r7, #4]
    bb7e:	2200      	movs	r2, #0
    bb80:	759a      	strb	r2, [r3, #22]

  // Start I2C transmission
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    bb82:	687b      	ldr	r3, [r7, #4]
    bb84:	6918      	ldr	r0, [r3, #16]
    bb86:	687a      	ldr	r2, [r7, #4]
    bb88:	238a      	movs	r3, #138	; 0x8a
    bb8a:	009b      	lsls	r3, r3, #2
    bb8c:	5cd3      	ldrb	r3, [r2, r3]
    bb8e:	2200      	movs	r2, #0
    bb90:	0019      	movs	r1, r3
    bb92:	f002 fa21 	bl	dfd8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    bb96:	0003      	movs	r3, r0
    bb98:	001a      	movs	r2, r3
    bb9a:	2301      	movs	r3, #1
    bb9c:	4053      	eors	r3, r2
    bb9e:	b2db      	uxtb	r3, r3
    bba0:	2b00      	cmp	r3, #0
    bba2:	d007      	beq.n	bbb4 <_ZN7TwoWire15endTransmissionEb+0x46>
  {
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    bba4:	687b      	ldr	r3, [r7, #4]
    bba6:	691b      	ldr	r3, [r3, #16]
    bba8:	2103      	movs	r1, #3
    bbaa:	0018      	movs	r0, r3
    bbac:	f002 f9da 	bl	df64 <_ZN6SERCOM22prepareCommandBitsWireEh>
    return 2 ;  // Address error
    bbb0:	2302      	movs	r3, #2
    bbb2:	e033      	b.n	bc1c <_ZN7TwoWire15endTransmissionEb+0xae>
  }

  // Send all buffer
  while( txBuffer.available() )
    bbb4:	687b      	ldr	r3, [r7, #4]
    bbb6:	3321      	adds	r3, #33	; 0x21
    bbb8:	33ff      	adds	r3, #255	; 0xff
    bbba:	0018      	movs	r0, r3
    bbbc:	f000 fa0a 	bl	bfd4 <_ZN11RingBufferNILi256EE9availableEv>
    bbc0:	0003      	movs	r3, r0
    bbc2:	1e5a      	subs	r2, r3, #1
    bbc4:	4193      	sbcs	r3, r2
    bbc6:	b2db      	uxtb	r3, r3
    bbc8:	2b00      	cmp	r3, #0
    bbca:	d01c      	beq.n	bc06 <_ZN7TwoWire15endTransmissionEb+0x98>
  {
    // Trying to send data
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    bbcc:	687b      	ldr	r3, [r7, #4]
    bbce:	691c      	ldr	r4, [r3, #16]
    bbd0:	687b      	ldr	r3, [r7, #4]
    bbd2:	3321      	adds	r3, #33	; 0x21
    bbd4:	33ff      	adds	r3, #255	; 0xff
    bbd6:	0018      	movs	r0, r3
    bbd8:	f000 fa16 	bl	c008 <_ZN11RingBufferNILi256EE9read_charEv>
    bbdc:	0003      	movs	r3, r0
    bbde:	b2db      	uxtb	r3, r3
    bbe0:	0019      	movs	r1, r3
    bbe2:	0020      	movs	r0, r4
    bbe4:	f002 fa75 	bl	e0d2 <_ZN6SERCOM18sendDataMasterWIREEh>
    bbe8:	0003      	movs	r3, r0
    bbea:	001a      	movs	r2, r3
    bbec:	2301      	movs	r3, #1
    bbee:	4053      	eors	r3, r2
    bbf0:	b2db      	uxtb	r3, r3
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	d0de      	beq.n	bbb4 <_ZN7TwoWire15endTransmissionEb+0x46>
    {
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    bbf6:	687b      	ldr	r3, [r7, #4]
    bbf8:	691b      	ldr	r3, [r3, #16]
    bbfa:	2103      	movs	r1, #3
    bbfc:	0018      	movs	r0, r3
    bbfe:	f002 f9b1 	bl	df64 <_ZN6SERCOM22prepareCommandBitsWireEh>
      return 3 ;  // Nack or error
    bc02:	2303      	movs	r3, #3
    bc04:	e00a      	b.n	bc1c <_ZN7TwoWire15endTransmissionEb+0xae>
    }
  }
  
  if (stopBit)
    bc06:	1cfb      	adds	r3, r7, #3
    bc08:	781b      	ldrb	r3, [r3, #0]
    bc0a:	2b00      	cmp	r3, #0
    bc0c:	d005      	beq.n	bc1a <_ZN7TwoWire15endTransmissionEb+0xac>
  {
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    bc0e:	687b      	ldr	r3, [r7, #4]
    bc10:	691b      	ldr	r3, [r3, #16]
    bc12:	2103      	movs	r1, #3
    bc14:	0018      	movs	r0, r3
    bc16:	f002 f9a5 	bl	df64 <_ZN6SERCOM22prepareCommandBitsWireEh>
  }   

  return 0;
    bc1a:	2300      	movs	r3, #0
}
    bc1c:	0018      	movs	r0, r3
    bc1e:	46bd      	mov	sp, r7
    bc20:	b003      	add	sp, #12
    bc22:	bd90      	pop	{r4, r7, pc}

0000bc24 <_ZN7TwoWire15endTransmissionEv>:

uint8_t TwoWire::endTransmission()
{
    bc24:	b580      	push	{r7, lr}
    bc26:	b082      	sub	sp, #8
    bc28:	af00      	add	r7, sp, #0
    bc2a:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
    bc2c:	687b      	ldr	r3, [r7, #4]
    bc2e:	2101      	movs	r1, #1
    bc30:	0018      	movs	r0, r3
    bc32:	f7ff ff9c 	bl	bb6e <_ZN7TwoWire15endTransmissionEb>
    bc36:	0003      	movs	r3, r0
}
    bc38:	0018      	movs	r0, r3
    bc3a:	46bd      	mov	sp, r7
    bc3c:	b002      	add	sp, #8
    bc3e:	bd80      	pop	{r7, pc}

0000bc40 <_ZN7TwoWire5writeEh>:

size_t TwoWire::write(uint8_t ucData)
{
    bc40:	b580      	push	{r7, lr}
    bc42:	b082      	sub	sp, #8
    bc44:	af00      	add	r7, sp, #0
    bc46:	6078      	str	r0, [r7, #4]
    bc48:	000a      	movs	r2, r1
    bc4a:	1cfb      	adds	r3, r7, #3
    bc4c:	701a      	strb	r2, [r3, #0]
  // No writing, without begun transmission or a full buffer
  if ( !transmissionBegun || txBuffer.isFull() )
    bc4e:	687b      	ldr	r3, [r7, #4]
    bc50:	7d9b      	ldrb	r3, [r3, #22]
    bc52:	2201      	movs	r2, #1
    bc54:	4053      	eors	r3, r2
    bc56:	b2db      	uxtb	r3, r3
    bc58:	2b00      	cmp	r3, #0
    bc5a:	d107      	bne.n	bc6c <_ZN7TwoWire5writeEh+0x2c>
    bc5c:	687b      	ldr	r3, [r7, #4]
    bc5e:	3321      	adds	r3, #33	; 0x21
    bc60:	33ff      	adds	r3, #255	; 0xff
    bc62:	0018      	movs	r0, r3
    bc64:	f000 fa03 	bl	c06e <_ZN11RingBufferNILi256EE6isFullEv>
    bc68:	1e03      	subs	r3, r0, #0
    bc6a:	d001      	beq.n	bc70 <_ZN7TwoWire5writeEh+0x30>
    bc6c:	2301      	movs	r3, #1
    bc6e:	e000      	b.n	bc72 <_ZN7TwoWire5writeEh+0x32>
    bc70:	2300      	movs	r3, #0
    bc72:	2b00      	cmp	r3, #0
    bc74:	d001      	beq.n	bc7a <_ZN7TwoWire5writeEh+0x3a>
  {
    return 0 ;
    bc76:	2300      	movs	r3, #0
    bc78:	e00a      	b.n	bc90 <_ZN7TwoWire5writeEh+0x50>
  }

  txBuffer.store_char( ucData ) ;
    bc7a:	687b      	ldr	r3, [r7, #4]
    bc7c:	3321      	adds	r3, #33	; 0x21
    bc7e:	33ff      	adds	r3, #255	; 0xff
    bc80:	001a      	movs	r2, r3
    bc82:	1cfb      	adds	r3, r7, #3
    bc84:	781b      	ldrb	r3, [r3, #0]
    bc86:	0019      	movs	r1, r3
    bc88:	0010      	movs	r0, r2
    bc8a:	f000 f975 	bl	bf78 <_ZN11RingBufferNILi256EE10store_charEh>

  return 1 ;
    bc8e:	2301      	movs	r3, #1
}
    bc90:	0018      	movs	r0, r3
    bc92:	46bd      	mov	sp, r7
    bc94:	b002      	add	sp, #8
    bc96:	bd80      	pop	{r7, pc}

0000bc98 <_ZN7TwoWire5writeEPKhj>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    bc98:	b580      	push	{r7, lr}
    bc9a:	b086      	sub	sp, #24
    bc9c:	af00      	add	r7, sp, #0
    bc9e:	60f8      	str	r0, [r7, #12]
    bca0:	60b9      	str	r1, [r7, #8]
    bca2:	607a      	str	r2, [r7, #4]
  //Try to store all data
  for(size_t i = 0; i < quantity; ++i)
    bca4:	2300      	movs	r3, #0
    bca6:	617b      	str	r3, [r7, #20]
    bca8:	697a      	ldr	r2, [r7, #20]
    bcaa:	687b      	ldr	r3, [r7, #4]
    bcac:	429a      	cmp	r2, r3
    bcae:	d215      	bcs.n	bcdc <_ZN7TwoWire5writeEPKhj+0x44>
  {
    //Return the number of data stored, when the buffer is full (if write return 0)
    if(!write(data[i]))
    bcb0:	68fb      	ldr	r3, [r7, #12]
    bcb2:	681b      	ldr	r3, [r3, #0]
    bcb4:	681b      	ldr	r3, [r3, #0]
    bcb6:	68b9      	ldr	r1, [r7, #8]
    bcb8:	697a      	ldr	r2, [r7, #20]
    bcba:	188a      	adds	r2, r1, r2
    bcbc:	7811      	ldrb	r1, [r2, #0]
    bcbe:	68fa      	ldr	r2, [r7, #12]
    bcc0:	0010      	movs	r0, r2
    bcc2:	4798      	blx	r3
    bcc4:	0003      	movs	r3, r0
    bcc6:	425a      	negs	r2, r3
    bcc8:	4153      	adcs	r3, r2
    bcca:	b2db      	uxtb	r3, r3
    bccc:	2b00      	cmp	r3, #0
    bcce:	d001      	beq.n	bcd4 <_ZN7TwoWire5writeEPKhj+0x3c>
      return i;
    bcd0:	697b      	ldr	r3, [r7, #20]
    bcd2:	e004      	b.n	bcde <_ZN7TwoWire5writeEPKhj+0x46>
  for(size_t i = 0; i < quantity; ++i)
    bcd4:	697b      	ldr	r3, [r7, #20]
    bcd6:	3301      	adds	r3, #1
    bcd8:	617b      	str	r3, [r7, #20]
    bcda:	e7e5      	b.n	bca8 <_ZN7TwoWire5writeEPKhj+0x10>
  }

  //All data stored
  return quantity;
    bcdc:	687b      	ldr	r3, [r7, #4]
}
    bcde:	0018      	movs	r0, r3
    bce0:	46bd      	mov	sp, r7
    bce2:	b006      	add	sp, #24
    bce4:	bd80      	pop	{r7, pc}

0000bce6 <_ZN7TwoWire9availableEv>:

int TwoWire::available(void)
{
    bce6:	b580      	push	{r7, lr}
    bce8:	b082      	sub	sp, #8
    bcea:	af00      	add	r7, sp, #0
    bcec:	6078      	str	r0, [r7, #4]
  return rxBuffer.available();
    bcee:	687b      	ldr	r3, [r7, #4]
    bcf0:	3318      	adds	r3, #24
    bcf2:	0018      	movs	r0, r3
    bcf4:	f000 f96e 	bl	bfd4 <_ZN11RingBufferNILi256EE9availableEv>
    bcf8:	0003      	movs	r3, r0
}
    bcfa:	0018      	movs	r0, r3
    bcfc:	46bd      	mov	sp, r7
    bcfe:	b002      	add	sp, #8
    bd00:	bd80      	pop	{r7, pc}

0000bd02 <_ZN7TwoWire4readEv>:

int TwoWire::read(void)
{
    bd02:	b580      	push	{r7, lr}
    bd04:	b082      	sub	sp, #8
    bd06:	af00      	add	r7, sp, #0
    bd08:	6078      	str	r0, [r7, #4]
  return rxBuffer.read_char();
    bd0a:	687b      	ldr	r3, [r7, #4]
    bd0c:	3318      	adds	r3, #24
    bd0e:	0018      	movs	r0, r3
    bd10:	f000 f97a 	bl	c008 <_ZN11RingBufferNILi256EE9read_charEv>
    bd14:	0003      	movs	r3, r0
}
    bd16:	0018      	movs	r0, r3
    bd18:	46bd      	mov	sp, r7
    bd1a:	b002      	add	sp, #8
    bd1c:	bd80      	pop	{r7, pc}

0000bd1e <_ZN7TwoWire4peekEv>:

int TwoWire::peek(void)
{
    bd1e:	b580      	push	{r7, lr}
    bd20:	b082      	sub	sp, #8
    bd22:	af00      	add	r7, sp, #0
    bd24:	6078      	str	r0, [r7, #4]
  return rxBuffer.peek();
    bd26:	687b      	ldr	r3, [r7, #4]
    bd28:	3318      	adds	r3, #24
    bd2a:	0018      	movs	r0, r3
    bd2c:	f000 f9b9 	bl	c0a2 <_ZN11RingBufferNILi256EE4peekEv>
    bd30:	0003      	movs	r3, r0
}
    bd32:	0018      	movs	r0, r3
    bd34:	46bd      	mov	sp, r7
    bd36:	b002      	add	sp, #8
    bd38:	bd80      	pop	{r7, pc}

0000bd3a <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    bd3a:	b580      	push	{r7, lr}
    bd3c:	b082      	sub	sp, #8
    bd3e:	af00      	add	r7, sp, #0
    bd40:	6078      	str	r0, [r7, #4]
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
    bd42:	46c0      	nop			; (mov r8, r8)
    bd44:	46bd      	mov	sp, r7
    bd46:	b002      	add	sp, #8
    bd48:	bd80      	pop	{r7, pc}

0000bd4a <_ZN7TwoWire9onServiceEv>:
{
  onRequestCallback = function;
}

void TwoWire::onService(void)
{
    bd4a:	b590      	push	{r4, r7, lr}
    bd4c:	b085      	sub	sp, #20
    bd4e:	af00      	add	r7, sp, #0
    bd50:	6078      	str	r0, [r7, #4]
  if ( sercom->isSlaveWIRE() )
    bd52:	687b      	ldr	r3, [r7, #4]
    bd54:	691b      	ldr	r3, [r3, #16]
    bd56:	0018      	movs	r0, r3
    bd58:	f002 fa27 	bl	e1aa <_ZN6SERCOM11isSlaveWIREEv>
    bd5c:	1e03      	subs	r3, r0, #0
    bd5e:	d100      	bne.n	bd62 <_ZN7TwoWire9onServiceEv+0x18>
    bd60:	e0d3      	b.n	bf0a <_ZN7TwoWire9onServiceEv+0x1c0>
  {
    if(sercom->isStopDetectedWIRE() || 
    bd62:	687b      	ldr	r3, [r7, #4]
    bd64:	691b      	ldr	r3, [r3, #16]
    bd66:	0018      	movs	r0, r3
    bd68:	f002 fa63 	bl	e232 <_ZN6SERCOM18isStopDetectedWIREEv>
    bd6c:	1e03      	subs	r3, r0, #0
    bd6e:	d119      	bne.n	bda4 <_ZN7TwoWire9onServiceEv+0x5a>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    bd70:	687b      	ldr	r3, [r7, #4]
    bd72:	691b      	ldr	r3, [r3, #16]
    bd74:	0018      	movs	r0, r3
    bd76:	f002 fa78 	bl	e26a <_ZN6SERCOM14isAddressMatchEv>
    bd7a:	1e03      	subs	r3, r0, #0
    if(sercom->isStopDetectedWIRE() || 
    bd7c:	d014      	beq.n	bda8 <_ZN7TwoWire9onServiceEv+0x5e>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    bd7e:	687b      	ldr	r3, [r7, #4]
    bd80:	691b      	ldr	r3, [r3, #16]
    bd82:	0018      	movs	r0, r3
    bd84:	f002 fa63 	bl	e24e <_ZN6SERCOM21isRestartDetectedWIREEv>
    bd88:	1e03      	subs	r3, r0, #0
    bd8a:	d00d      	beq.n	bda8 <_ZN7TwoWire9onServiceEv+0x5e>
    bd8c:	687b      	ldr	r3, [r7, #4]
    bd8e:	691b      	ldr	r3, [r3, #16]
    bd90:	0018      	movs	r0, r3
    bd92:	f002 fa78 	bl	e286 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    bd96:	0003      	movs	r3, r0
    bd98:	001a      	movs	r2, r3
    bd9a:	2301      	movs	r3, #1
    bd9c:	4053      	eors	r3, r2
    bd9e:	b2db      	uxtb	r3, r3
    bda0:	2b00      	cmp	r3, #0
    bda2:	d001      	beq.n	bda8 <_ZN7TwoWire9onServiceEv+0x5e>
    if(sercom->isStopDetectedWIRE() || 
    bda4:	2301      	movs	r3, #1
    bda6:	e000      	b.n	bdaa <_ZN7TwoWire9onServiceEv+0x60>
    bda8:	2300      	movs	r3, #0
    bdaa:	2b00      	cmp	r3, #0
    bdac:	d024      	beq.n	bdf8 <_ZN7TwoWire9onServiceEv+0xae>
    {
      sercom->prepareAckBitWIRE();
    bdae:	687b      	ldr	r3, [r7, #4]
    bdb0:	691b      	ldr	r3, [r3, #16]
    bdb2:	0018      	movs	r0, r3
    bdb4:	f002 f8b8 	bl	df28 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    bdb8:	687b      	ldr	r3, [r7, #4]
    bdba:	691b      	ldr	r3, [r3, #16]
    bdbc:	2103      	movs	r1, #3
    bdbe:	0018      	movs	r0, r3
    bdc0:	f002 f8d0 	bl	df64 <_ZN6SERCOM22prepareCommandBitsWireEh>

      //Calling onReceiveCallback, if exists
      if(onReceiveCallback)
    bdc4:	687a      	ldr	r2, [r7, #4]
    bdc6:	238c      	movs	r3, #140	; 0x8c
    bdc8:	009b      	lsls	r3, r3, #2
    bdca:	58d3      	ldr	r3, [r2, r3]
    bdcc:	2b00      	cmp	r3, #0
    bdce:	d00d      	beq.n	bdec <_ZN7TwoWire9onServiceEv+0xa2>
      {
        onReceiveCallback(available());
    bdd0:	687a      	ldr	r2, [r7, #4]
    bdd2:	238c      	movs	r3, #140	; 0x8c
    bdd4:	009b      	lsls	r3, r3, #2
    bdd6:	58d4      	ldr	r4, [r2, r3]
    bdd8:	687b      	ldr	r3, [r7, #4]
    bdda:	681b      	ldr	r3, [r3, #0]
    bddc:	3310      	adds	r3, #16
    bdde:	681b      	ldr	r3, [r3, #0]
    bde0:	687a      	ldr	r2, [r7, #4]
    bde2:	0010      	movs	r0, r2
    bde4:	4798      	blx	r3
    bde6:	0003      	movs	r3, r0
    bde8:	0018      	movs	r0, r3
    bdea:	47a0      	blx	r4
      }
      
      rxBuffer.clear();
    bdec:	687b      	ldr	r3, [r7, #4]
    bdee:	3318      	adds	r3, #24
    bdf0:	0018      	movs	r0, r3
    bdf2:	f000 f8af 	bl	bf54 <_ZN11RingBufferNILi256EE5clearEv>

        sercom->prepareCommandBitsWire(0x03);
      }
    }
  }
}
    bdf6:	e088      	b.n	bf0a <_ZN7TwoWire9onServiceEv+0x1c0>
    else if(sercom->isAddressMatch())  //Address Match
    bdf8:	687b      	ldr	r3, [r7, #4]
    bdfa:	691b      	ldr	r3, [r3, #16]
    bdfc:	0018      	movs	r0, r3
    bdfe:	f002 fa34 	bl	e26a <_ZN6SERCOM14isAddressMatchEv>
    be02:	1e03      	subs	r3, r0, #0
    be04:	d026      	beq.n	be54 <_ZN7TwoWire9onServiceEv+0x10a>
      sercom->prepareAckBitWIRE();
    be06:	687b      	ldr	r3, [r7, #4]
    be08:	691b      	ldr	r3, [r3, #16]
    be0a:	0018      	movs	r0, r3
    be0c:	f002 f88c 	bl	df28 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    be10:	687b      	ldr	r3, [r7, #4]
    be12:	691b      	ldr	r3, [r3, #16]
    be14:	2103      	movs	r1, #3
    be16:	0018      	movs	r0, r3
    be18:	f002 f8a4 	bl	df64 <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
    be1c:	687b      	ldr	r3, [r7, #4]
    be1e:	691b      	ldr	r3, [r3, #16]
    be20:	0018      	movs	r0, r3
    be22:	f002 fa30 	bl	e286 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    be26:	1e03      	subs	r3, r0, #0
    be28:	d06f      	beq.n	bf0a <_ZN7TwoWire9onServiceEv+0x1c0>
        txBuffer.clear();
    be2a:	687b      	ldr	r3, [r7, #4]
    be2c:	3321      	adds	r3, #33	; 0x21
    be2e:	33ff      	adds	r3, #255	; 0xff
    be30:	0018      	movs	r0, r3
    be32:	f000 f88f 	bl	bf54 <_ZN11RingBufferNILi256EE5clearEv>
        transmissionBegun = true;
    be36:	687b      	ldr	r3, [r7, #4]
    be38:	2201      	movs	r2, #1
    be3a:	759a      	strb	r2, [r3, #22]
        if(onRequestCallback)
    be3c:	687a      	ldr	r2, [r7, #4]
    be3e:	238b      	movs	r3, #139	; 0x8b
    be40:	009b      	lsls	r3, r3, #2
    be42:	58d3      	ldr	r3, [r2, r3]
    be44:	2b00      	cmp	r3, #0
    be46:	d060      	beq.n	bf0a <_ZN7TwoWire9onServiceEv+0x1c0>
          onRequestCallback();
    be48:	687a      	ldr	r2, [r7, #4]
    be4a:	238b      	movs	r3, #139	; 0x8b
    be4c:	009b      	lsls	r3, r3, #2
    be4e:	58d3      	ldr	r3, [r2, r3]
    be50:	4798      	blx	r3
}
    be52:	e05a      	b.n	bf0a <_ZN7TwoWire9onServiceEv+0x1c0>
    else if(sercom->isDataReadyWIRE())
    be54:	687b      	ldr	r3, [r7, #4]
    be56:	691b      	ldr	r3, [r3, #16]
    be58:	0018      	movs	r0, r3
    be5a:	f002 f9dc 	bl	e216 <_ZN6SERCOM15isDataReadyWIREEv>
    be5e:	1e03      	subs	r3, r0, #0
    be60:	d053      	beq.n	bf0a <_ZN7TwoWire9onServiceEv+0x1c0>
      if (sercom->isMasterReadOperationWIRE())
    be62:	687b      	ldr	r3, [r7, #4]
    be64:	691b      	ldr	r3, [r3, #16]
    be66:	0018      	movs	r0, r3
    be68:	f002 fa0d 	bl	e286 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    be6c:	1e03      	subs	r3, r0, #0
    be6e:	d027      	beq.n	bec0 <_ZN7TwoWire9onServiceEv+0x176>
        uint8_t c = 0xff;
    be70:	230f      	movs	r3, #15
    be72:	18fb      	adds	r3, r7, r3
    be74:	22ff      	movs	r2, #255	; 0xff
    be76:	701a      	strb	r2, [r3, #0]
        if( txBuffer.available() ) {
    be78:	687b      	ldr	r3, [r7, #4]
    be7a:	3321      	adds	r3, #33	; 0x21
    be7c:	33ff      	adds	r3, #255	; 0xff
    be7e:	0018      	movs	r0, r3
    be80:	f000 f8a8 	bl	bfd4 <_ZN11RingBufferNILi256EE9availableEv>
    be84:	0003      	movs	r3, r0
    be86:	1e5a      	subs	r2, r3, #1
    be88:	4193      	sbcs	r3, r2
    be8a:	b2db      	uxtb	r3, r3
    be8c:	2b00      	cmp	r3, #0
    be8e:	d009      	beq.n	bea4 <_ZN7TwoWire9onServiceEv+0x15a>
          c = txBuffer.read_char();
    be90:	687b      	ldr	r3, [r7, #4]
    be92:	3321      	adds	r3, #33	; 0x21
    be94:	33ff      	adds	r3, #255	; 0xff
    be96:	0018      	movs	r0, r3
    be98:	f000 f8b6 	bl	c008 <_ZN11RingBufferNILi256EE9read_charEv>
    be9c:	0002      	movs	r2, r0
    be9e:	230f      	movs	r3, #15
    bea0:	18fb      	adds	r3, r7, r3
    bea2:	701a      	strb	r2, [r3, #0]
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
    bea4:	687b      	ldr	r3, [r7, #4]
    bea6:	691a      	ldr	r2, [r3, #16]
    bea8:	230f      	movs	r3, #15
    beaa:	18fb      	adds	r3, r7, r3
    beac:	781b      	ldrb	r3, [r3, #0]
    beae:	0019      	movs	r1, r3
    beb0:	0010      	movs	r0, r2
    beb2:	f002 f93f 	bl	e134 <_ZN6SERCOM17sendDataSlaveWIREEh>
    beb6:	0003      	movs	r3, r0
    beb8:	001a      	movs	r2, r3
    beba:	687b      	ldr	r3, [r7, #4]
    bebc:	759a      	strb	r2, [r3, #22]
}
    bebe:	e024      	b.n	bf0a <_ZN7TwoWire9onServiceEv+0x1c0>
        if (rxBuffer.isFull()) {
    bec0:	687b      	ldr	r3, [r7, #4]
    bec2:	3318      	adds	r3, #24
    bec4:	0018      	movs	r0, r3
    bec6:	f000 f8d2 	bl	c06e <_ZN11RingBufferNILi256EE6isFullEv>
    beca:	1e03      	subs	r3, r0, #0
    becc:	d005      	beq.n	beda <_ZN7TwoWire9onServiceEv+0x190>
          sercom->prepareNackBitWIRE(); 
    bece:	687b      	ldr	r3, [r7, #4]
    bed0:	691b      	ldr	r3, [r3, #16]
    bed2:	0018      	movs	r0, r3
    bed4:	f002 f80a 	bl	deec <_ZN6SERCOM18prepareNackBitWIREEv>
    bed8:	e011      	b.n	befe <_ZN7TwoWire9onServiceEv+0x1b4>
          rxBuffer.store_char(sercom->readDataWIRE());
    beda:	687b      	ldr	r3, [r7, #4]
    bedc:	3318      	adds	r3, #24
    bede:	001c      	movs	r4, r3
    bee0:	687b      	ldr	r3, [r7, #4]
    bee2:	691b      	ldr	r3, [r3, #16]
    bee4:	0018      	movs	r0, r3
    bee6:	f002 f9dc 	bl	e2a2 <_ZN6SERCOM12readDataWIREEv>
    beea:	0003      	movs	r3, r0
    beec:	0019      	movs	r1, r3
    beee:	0020      	movs	r0, r4
    bef0:	f000 f842 	bl	bf78 <_ZN11RingBufferNILi256EE10store_charEh>
          sercom->prepareAckBitWIRE(); 
    bef4:	687b      	ldr	r3, [r7, #4]
    bef6:	691b      	ldr	r3, [r3, #16]
    bef8:	0018      	movs	r0, r3
    befa:	f002 f815 	bl	df28 <_ZN6SERCOM17prepareAckBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
    befe:	687b      	ldr	r3, [r7, #4]
    bf00:	691b      	ldr	r3, [r3, #16]
    bf02:	2103      	movs	r1, #3
    bf04:	0018      	movs	r0, r3
    bf06:	f002 f82d 	bl	df64 <_ZN6SERCOM22prepareCommandBitsWireEh>
}
    bf0a:	46c0      	nop			; (mov r8, r8)
    bf0c:	46bd      	mov	sp, r7
    bf0e:	b005      	add	sp, #20
    bf10:	bd90      	pop	{r4, r7, pc}
	...

0000bf14 <SERCOM3_Handler>:
    #define PERIPH_WIRE          sercom3
    #define WIRE_IT_HANDLER      SERCOM3_Handler
  #endif // PERIPH_WIRE
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);

  void WIRE_IT_HANDLER(void) {
    bf14:	b580      	push	{r7, lr}
    bf16:	af00      	add	r7, sp, #0
    Wire.onService();
    bf18:	4b03      	ldr	r3, [pc, #12]	; (bf28 <SERCOM3_Handler+0x14>)
    bf1a:	0018      	movs	r0, r3
    bf1c:	f7ff ff15 	bl	bd4a <_ZN7TwoWire9onServiceEv>
  }
    bf20:	46c0      	nop			; (mov r8, r8)
    bf22:	46bd      	mov	sp, r7
    bf24:	bd80      	pop	{r7, pc}
    bf26:	46c0      	nop			; (mov r8, r8)
    bf28:	20000b8c 	.word	0x20000b8c

0000bf2c <_ZN11RingBufferNILi256EEC1Ev>:
RingBufferN<N>::RingBufferN( void )
    bf2c:	b580      	push	{r7, lr}
    bf2e:	b082      	sub	sp, #8
    bf30:	af00      	add	r7, sp, #0
    bf32:	6078      	str	r0, [r7, #4]
    memset( _aucBuffer, 0, N ) ;
    bf34:	6878      	ldr	r0, [r7, #4]
    bf36:	2380      	movs	r3, #128	; 0x80
    bf38:	005b      	lsls	r3, r3, #1
    bf3a:	001a      	movs	r2, r3
    bf3c:	2100      	movs	r1, #0
    bf3e:	f004 fc71 	bl	10824 <memset>
    clear();
    bf42:	687b      	ldr	r3, [r7, #4]
    bf44:	0018      	movs	r0, r3
    bf46:	f000 f805 	bl	bf54 <_ZN11RingBufferNILi256EE5clearEv>
}
    bf4a:	687b      	ldr	r3, [r7, #4]
    bf4c:	0018      	movs	r0, r3
    bf4e:	46bd      	mov	sp, r7
    bf50:	b002      	add	sp, #8
    bf52:	bd80      	pop	{r7, pc}

0000bf54 <_ZN11RingBufferNILi256EE5clearEv>:
void RingBufferN<N>::clear()
    bf54:	b580      	push	{r7, lr}
    bf56:	b082      	sub	sp, #8
    bf58:	af00      	add	r7, sp, #0
    bf5a:	6078      	str	r0, [r7, #4]
  _iHead = 0;
    bf5c:	687a      	ldr	r2, [r7, #4]
    bf5e:	2380      	movs	r3, #128	; 0x80
    bf60:	005b      	lsls	r3, r3, #1
    bf62:	2100      	movs	r1, #0
    bf64:	50d1      	str	r1, [r2, r3]
  _iTail = 0;
    bf66:	687a      	ldr	r2, [r7, #4]
    bf68:	2382      	movs	r3, #130	; 0x82
    bf6a:	005b      	lsls	r3, r3, #1
    bf6c:	2100      	movs	r1, #0
    bf6e:	50d1      	str	r1, [r2, r3]
}
    bf70:	46c0      	nop			; (mov r8, r8)
    bf72:	46bd      	mov	sp, r7
    bf74:	b002      	add	sp, #8
    bf76:	bd80      	pop	{r7, pc}

0000bf78 <_ZN11RingBufferNILi256EE10store_charEh>:
void RingBufferN<N>::store_char( uint8_t c )
    bf78:	b580      	push	{r7, lr}
    bf7a:	b084      	sub	sp, #16
    bf7c:	af00      	add	r7, sp, #0
    bf7e:	6078      	str	r0, [r7, #4]
    bf80:	000a      	movs	r2, r1
    bf82:	1cfb      	adds	r3, r7, #3
    bf84:	701a      	strb	r2, [r3, #0]
  int i = nextIndex(_iHead);
    bf86:	687a      	ldr	r2, [r7, #4]
    bf88:	2380      	movs	r3, #128	; 0x80
    bf8a:	005b      	lsls	r3, r3, #1
    bf8c:	58d2      	ldr	r2, [r2, r3]
    bf8e:	687b      	ldr	r3, [r7, #4]
    bf90:	0011      	movs	r1, r2
    bf92:	0018      	movs	r0, r3
    bf94:	f000 f8a4 	bl	c0e0 <_ZN11RingBufferNILi256EE9nextIndexEi>
    bf98:	0003      	movs	r3, r0
    bf9a:	60fb      	str	r3, [r7, #12]
  if ( i != _iTail )
    bf9c:	687a      	ldr	r2, [r7, #4]
    bf9e:	2382      	movs	r3, #130	; 0x82
    bfa0:	005b      	lsls	r3, r3, #1
    bfa2:	58d2      	ldr	r2, [r2, r3]
    bfa4:	68fb      	ldr	r3, [r7, #12]
    bfa6:	1ad3      	subs	r3, r2, r3
    bfa8:	1e5a      	subs	r2, r3, #1
    bfaa:	4193      	sbcs	r3, r2
    bfac:	b2db      	uxtb	r3, r3
    bfae:	2b00      	cmp	r3, #0
    bfb0:	d00c      	beq.n	bfcc <_ZN11RingBufferNILi256EE10store_charEh+0x54>
    _aucBuffer[_iHead] = c ;
    bfb2:	687a      	ldr	r2, [r7, #4]
    bfb4:	2380      	movs	r3, #128	; 0x80
    bfb6:	005b      	lsls	r3, r3, #1
    bfb8:	58d3      	ldr	r3, [r2, r3]
    bfba:	687a      	ldr	r2, [r7, #4]
    bfbc:	1cf9      	adds	r1, r7, #3
    bfbe:	7809      	ldrb	r1, [r1, #0]
    bfc0:	54d1      	strb	r1, [r2, r3]
    _iHead = i ;
    bfc2:	687a      	ldr	r2, [r7, #4]
    bfc4:	2380      	movs	r3, #128	; 0x80
    bfc6:	005b      	lsls	r3, r3, #1
    bfc8:	68f9      	ldr	r1, [r7, #12]
    bfca:	50d1      	str	r1, [r2, r3]
}
    bfcc:	46c0      	nop			; (mov r8, r8)
    bfce:	46bd      	mov	sp, r7
    bfd0:	b004      	add	sp, #16
    bfd2:	bd80      	pop	{r7, pc}

0000bfd4 <_ZN11RingBufferNILi256EE9availableEv>:
int RingBufferN<N>::available()
    bfd4:	b580      	push	{r7, lr}
    bfd6:	b084      	sub	sp, #16
    bfd8:	af00      	add	r7, sp, #0
    bfda:	6078      	str	r0, [r7, #4]
  int delta = _iHead - _iTail;
    bfdc:	687a      	ldr	r2, [r7, #4]
    bfde:	2380      	movs	r3, #128	; 0x80
    bfe0:	005b      	lsls	r3, r3, #1
    bfe2:	58d2      	ldr	r2, [r2, r3]
    bfe4:	6879      	ldr	r1, [r7, #4]
    bfe6:	2382      	movs	r3, #130	; 0x82
    bfe8:	005b      	lsls	r3, r3, #1
    bfea:	58cb      	ldr	r3, [r1, r3]
    bfec:	1ad3      	subs	r3, r2, r3
    bfee:	60fb      	str	r3, [r7, #12]
  if(delta < 0)
    bff0:	68fb      	ldr	r3, [r7, #12]
    bff2:	2b00      	cmp	r3, #0
    bff4:	da03      	bge.n	bffe <_ZN11RingBufferNILi256EE9availableEv+0x2a>
    return N + delta;
    bff6:	68fb      	ldr	r3, [r7, #12]
    bff8:	3301      	adds	r3, #1
    bffa:	33ff      	adds	r3, #255	; 0xff
    bffc:	e000      	b.n	c000 <_ZN11RingBufferNILi256EE9availableEv+0x2c>
    return delta;
    bffe:	68fb      	ldr	r3, [r7, #12]
}
    c000:	0018      	movs	r0, r3
    c002:	46bd      	mov	sp, r7
    c004:	b004      	add	sp, #16
    c006:	bd80      	pop	{r7, pc}

0000c008 <_ZN11RingBufferNILi256EE9read_charEv>:
int RingBufferN<N>::read_char()
    c008:	b580      	push	{r7, lr}
    c00a:	b084      	sub	sp, #16
    c00c:	af00      	add	r7, sp, #0
    c00e:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    c010:	687a      	ldr	r2, [r7, #4]
    c012:	2382      	movs	r3, #130	; 0x82
    c014:	005b      	lsls	r3, r3, #1
    c016:	58d2      	ldr	r2, [r2, r3]
    c018:	6879      	ldr	r1, [r7, #4]
    c01a:	2380      	movs	r3, #128	; 0x80
    c01c:	005b      	lsls	r3, r3, #1
    c01e:	58cb      	ldr	r3, [r1, r3]
    c020:	1ad3      	subs	r3, r2, r3
    c022:	425a      	negs	r2, r3
    c024:	4153      	adcs	r3, r2
    c026:	b2db      	uxtb	r3, r3
    c028:	2b00      	cmp	r3, #0
    c02a:	d002      	beq.n	c032 <_ZN11RingBufferNILi256EE9read_charEv+0x2a>
    return -1;
    c02c:	2301      	movs	r3, #1
    c02e:	425b      	negs	r3, r3
    c030:	e019      	b.n	c066 <_ZN11RingBufferNILi256EE9read_charEv+0x5e>
  uint8_t value = _aucBuffer[_iTail];
    c032:	687a      	ldr	r2, [r7, #4]
    c034:	2382      	movs	r3, #130	; 0x82
    c036:	005b      	lsls	r3, r3, #1
    c038:	58d2      	ldr	r2, [r2, r3]
    c03a:	230f      	movs	r3, #15
    c03c:	18fb      	adds	r3, r7, r3
    c03e:	6879      	ldr	r1, [r7, #4]
    c040:	5c8a      	ldrb	r2, [r1, r2]
    c042:	701a      	strb	r2, [r3, #0]
  _iTail = nextIndex(_iTail);
    c044:	687a      	ldr	r2, [r7, #4]
    c046:	2382      	movs	r3, #130	; 0x82
    c048:	005b      	lsls	r3, r3, #1
    c04a:	58d2      	ldr	r2, [r2, r3]
    c04c:	687b      	ldr	r3, [r7, #4]
    c04e:	0011      	movs	r1, r2
    c050:	0018      	movs	r0, r3
    c052:	f000 f845 	bl	c0e0 <_ZN11RingBufferNILi256EE9nextIndexEi>
    c056:	0001      	movs	r1, r0
    c058:	687a      	ldr	r2, [r7, #4]
    c05a:	2382      	movs	r3, #130	; 0x82
    c05c:	005b      	lsls	r3, r3, #1
    c05e:	50d1      	str	r1, [r2, r3]
  return value;
    c060:	230f      	movs	r3, #15
    c062:	18fb      	adds	r3, r7, r3
    c064:	781b      	ldrb	r3, [r3, #0]
}
    c066:	0018      	movs	r0, r3
    c068:	46bd      	mov	sp, r7
    c06a:	b004      	add	sp, #16
    c06c:	bd80      	pop	{r7, pc}

0000c06e <_ZN11RingBufferNILi256EE6isFullEv>:
bool RingBufferN<N>::isFull()
    c06e:	b580      	push	{r7, lr}
    c070:	b082      	sub	sp, #8
    c072:	af00      	add	r7, sp, #0
    c074:	6078      	str	r0, [r7, #4]
  return (nextIndex(_iHead) == _iTail);
    c076:	687a      	ldr	r2, [r7, #4]
    c078:	2380      	movs	r3, #128	; 0x80
    c07a:	005b      	lsls	r3, r3, #1
    c07c:	58d2      	ldr	r2, [r2, r3]
    c07e:	687b      	ldr	r3, [r7, #4]
    c080:	0011      	movs	r1, r2
    c082:	0018      	movs	r0, r3
    c084:	f000 f82c 	bl	c0e0 <_ZN11RingBufferNILi256EE9nextIndexEi>
    c088:	0001      	movs	r1, r0
    c08a:	687a      	ldr	r2, [r7, #4]
    c08c:	2382      	movs	r3, #130	; 0x82
    c08e:	005b      	lsls	r3, r3, #1
    c090:	58d3      	ldr	r3, [r2, r3]
    c092:	1acb      	subs	r3, r1, r3
    c094:	425a      	negs	r2, r3
    c096:	4153      	adcs	r3, r2
    c098:	b2db      	uxtb	r3, r3
}
    c09a:	0018      	movs	r0, r3
    c09c:	46bd      	mov	sp, r7
    c09e:	b002      	add	sp, #8
    c0a0:	bd80      	pop	{r7, pc}

0000c0a2 <_ZN11RingBufferNILi256EE4peekEv>:
int RingBufferN<N>::peek()
    c0a2:	b580      	push	{r7, lr}
    c0a4:	b082      	sub	sp, #8
    c0a6:	af00      	add	r7, sp, #0
    c0a8:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    c0aa:	687a      	ldr	r2, [r7, #4]
    c0ac:	2382      	movs	r3, #130	; 0x82
    c0ae:	005b      	lsls	r3, r3, #1
    c0b0:	58d2      	ldr	r2, [r2, r3]
    c0b2:	6879      	ldr	r1, [r7, #4]
    c0b4:	2380      	movs	r3, #128	; 0x80
    c0b6:	005b      	lsls	r3, r3, #1
    c0b8:	58cb      	ldr	r3, [r1, r3]
    c0ba:	1ad3      	subs	r3, r2, r3
    c0bc:	425a      	negs	r2, r3
    c0be:	4153      	adcs	r3, r2
    c0c0:	b2db      	uxtb	r3, r3
    c0c2:	2b00      	cmp	r3, #0
    c0c4:	d002      	beq.n	c0cc <_ZN11RingBufferNILi256EE4peekEv+0x2a>
    return -1;
    c0c6:	2301      	movs	r3, #1
    c0c8:	425b      	negs	r3, r3
    c0ca:	e005      	b.n	c0d8 <_ZN11RingBufferNILi256EE4peekEv+0x36>
  return _aucBuffer[_iTail];
    c0cc:	687a      	ldr	r2, [r7, #4]
    c0ce:	2382      	movs	r3, #130	; 0x82
    c0d0:	005b      	lsls	r3, r3, #1
    c0d2:	58d3      	ldr	r3, [r2, r3]
    c0d4:	687a      	ldr	r2, [r7, #4]
    c0d6:	5cd3      	ldrb	r3, [r2, r3]
}
    c0d8:	0018      	movs	r0, r3
    c0da:	46bd      	mov	sp, r7
    c0dc:	b002      	add	sp, #8
    c0de:	bd80      	pop	{r7, pc}

0000c0e0 <_ZN11RingBufferNILi256EE9nextIndexEi>:
int RingBufferN<N>::nextIndex(int index)
    c0e0:	b580      	push	{r7, lr}
    c0e2:	b082      	sub	sp, #8
    c0e4:	af00      	add	r7, sp, #0
    c0e6:	6078      	str	r0, [r7, #4]
    c0e8:	6039      	str	r1, [r7, #0]
  return (uint32_t)(index + 1) % N;
    c0ea:	683b      	ldr	r3, [r7, #0]
    c0ec:	3301      	adds	r3, #1
    c0ee:	22ff      	movs	r2, #255	; 0xff
    c0f0:	4013      	ands	r3, r2
}
    c0f2:	0018      	movs	r0, r3
    c0f4:	46bd      	mov	sp, r7
    c0f6:	b002      	add	sp, #8
    c0f8:	bd80      	pop	{r7, pc}
	...

0000c0fc <_Z41__static_initialization_and_destruction_0ii>:
    c0fc:	b580      	push	{r7, lr}
    c0fe:	b082      	sub	sp, #8
    c100:	af00      	add	r7, sp, #0
    c102:	6078      	str	r0, [r7, #4]
    c104:	6039      	str	r1, [r7, #0]
    c106:	687b      	ldr	r3, [r7, #4]
    c108:	2b01      	cmp	r3, #1
    c10a:	d109      	bne.n	c120 <_Z41__static_initialization_and_destruction_0ii+0x24>
    c10c:	683b      	ldr	r3, [r7, #0]
    c10e:	4a06      	ldr	r2, [pc, #24]	; (c128 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    c110:	4293      	cmp	r3, r2
    c112:	d105      	bne.n	c120 <_Z41__static_initialization_and_destruction_0ii+0x24>
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
    c114:	4905      	ldr	r1, [pc, #20]	; (c12c <_Z41__static_initialization_and_destruction_0ii+0x30>)
    c116:	4806      	ldr	r0, [pc, #24]	; (c130 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    c118:	2311      	movs	r3, #17
    c11a:	2210      	movs	r2, #16
    c11c:	f7ff fc1e 	bl	b95c <_ZN7TwoWireC1EP6SERCOMhh>
  }
    c120:	46c0      	nop			; (mov r8, r8)
    c122:	46bd      	mov	sp, r7
    c124:	b002      	add	sp, #8
    c126:	bd80      	pop	{r7, pc}
    c128:	0000ffff 	.word	0x0000ffff
    c12c:	20000dcc 	.word	0x20000dcc
    c130:	20000b8c 	.word	0x20000b8c

0000c134 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
    c134:	b580      	push	{r7, lr}
    c136:	af00      	add	r7, sp, #0
    c138:	4b03      	ldr	r3, [pc, #12]	; (c148 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
    c13a:	0019      	movs	r1, r3
    c13c:	2001      	movs	r0, #1
    c13e:	f7ff ffdd 	bl	c0fc <_Z41__static_initialization_and_destruction_0ii>
    c142:	46bd      	mov	sp, r7
    c144:	bd80      	pop	{r7, pc}
    c146:	46c0      	nop			; (mov r8, r8)
    c148:	0000ffff 	.word	0x0000ffff

0000c14c <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    c14c:	b580      	push	{r7, lr}
    c14e:	af00      	add	r7, sp, #0
  Serial1.IrqHandler();
    c150:	4b03      	ldr	r3, [pc, #12]	; (c160 <SERCOM0_Handler+0x14>)
    c152:	0018      	movs	r0, r3
    c154:	f7f7 fc76 	bl	3a44 <_ZN4Uart10IrqHandlerEv>
}
    c158:	46c0      	nop			; (mov r8, r8)
    c15a:	46bd      	mov	sp, r7
    c15c:	bd80      	pop	{r7, pc}
    c15e:	46c0      	nop			; (mov r8, r8)
    c160:	20000dd8 	.word	0x20000dd8

0000c164 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    c164:	b580      	push	{r7, lr}
    c166:	af00      	add	r7, sp, #0
  Serial.IrqHandler();
    c168:	4b03      	ldr	r3, [pc, #12]	; (c178 <SERCOM5_Handler+0x14>)
    c16a:	0018      	movs	r0, r3
    c16c:	f7f7 fc6a 	bl	3a44 <_ZN4Uart10IrqHandlerEv>
}
    c170:	46c0      	nop			; (mov r8, r8)
    c172:	46bd      	mov	sp, r7
    c174:	bd80      	pop	{r7, pc}
    c176:	46c0      	nop			; (mov r8, r8)
    c178:	20000e94 	.word	0x20000e94

0000c17c <_Z41__static_initialization_and_destruction_0ii>:
    c17c:	b580      	push	{r7, lr}
    c17e:	b084      	sub	sp, #16
    c180:	af02      	add	r7, sp, #8
    c182:	6078      	str	r0, [r7, #4]
    c184:	6039      	str	r1, [r7, #0]
    c186:	687b      	ldr	r3, [r7, #4]
    c188:	2b01      	cmp	r3, #1
    c18a:	d147      	bne.n	c21c <_Z41__static_initialization_and_destruction_0ii+0xa0>
    c18c:	683b      	ldr	r3, [r7, #0]
    c18e:	4a25      	ldr	r2, [pc, #148]	; (c224 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    c190:	4293      	cmp	r3, r2
    c192:	d143      	bne.n	c21c <_Z41__static_initialization_and_destruction_0ii+0xa0>
SERCOM sercom0( SERCOM0 ) ;
    c194:	4a24      	ldr	r2, [pc, #144]	; (c228 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    c196:	4b25      	ldr	r3, [pc, #148]	; (c22c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    c198:	0011      	movs	r1, r2
    c19a:	0018      	movs	r0, r3
    c19c:	f001 fb32 	bl	d804 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    c1a0:	4a23      	ldr	r2, [pc, #140]	; (c230 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    c1a2:	4b24      	ldr	r3, [pc, #144]	; (c234 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    c1a4:	0011      	movs	r1, r2
    c1a6:	0018      	movs	r0, r3
    c1a8:	f001 fb2c 	bl	d804 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    c1ac:	4a22      	ldr	r2, [pc, #136]	; (c238 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    c1ae:	4b23      	ldr	r3, [pc, #140]	; (c23c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    c1b0:	0011      	movs	r1, r2
    c1b2:	0018      	movs	r0, r3
    c1b4:	f001 fb26 	bl	d804 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    c1b8:	4a21      	ldr	r2, [pc, #132]	; (c240 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    c1ba:	4b22      	ldr	r3, [pc, #136]	; (c244 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    c1bc:	0011      	movs	r1, r2
    c1be:	0018      	movs	r0, r3
    c1c0:	f001 fb20 	bl	d804 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    c1c4:	4a20      	ldr	r2, [pc, #128]	; (c248 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    c1c6:	4b21      	ldr	r3, [pc, #132]	; (c24c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    c1c8:	0011      	movs	r1, r2
    c1ca:	0018      	movs	r0, r3
    c1cc:	f001 fb1a 	bl	d804 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    c1d0:	4a1f      	ldr	r2, [pc, #124]	; (c250 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    c1d2:	4b20      	ldr	r3, [pc, #128]	; (c254 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    c1d4:	0011      	movs	r1, r2
    c1d6:	0018      	movs	r0, r3
    c1d8:	f001 fb14 	bl	d804 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    c1dc:	4913      	ldr	r1, [pc, #76]	; (c22c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    c1de:	481e      	ldr	r0, [pc, #120]	; (c258 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    c1e0:	2301      	movs	r3, #1
    c1e2:	9301      	str	r3, [sp, #4]
    c1e4:	2303      	movs	r3, #3
    c1e6:	9300      	str	r3, [sp, #0]
    c1e8:	2301      	movs	r3, #1
    c1ea:	2200      	movs	r2, #0
    c1ec:	f7f7 faa3 	bl	3736 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    c1f0:	4a1a      	ldr	r2, [pc, #104]	; (c25c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    c1f2:	491b      	ldr	r1, [pc, #108]	; (c260 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    c1f4:	4b18      	ldr	r3, [pc, #96]	; (c258 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    c1f6:	0018      	movs	r0, r3
    c1f8:	f002 fb36 	bl	e868 <__aeabi_atexit>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    c1fc:	4915      	ldr	r1, [pc, #84]	; (c254 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    c1fe:	4819      	ldr	r0, [pc, #100]	; (c264 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    c200:	2301      	movs	r3, #1
    c202:	9301      	str	r3, [sp, #4]
    c204:	2303      	movs	r3, #3
    c206:	9300      	str	r3, [sp, #0]
    c208:	2323      	movs	r3, #35	; 0x23
    c20a:	2224      	movs	r2, #36	; 0x24
    c20c:	f7f7 fa93 	bl	3736 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    c210:	4a12      	ldr	r2, [pc, #72]	; (c25c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    c212:	4913      	ldr	r1, [pc, #76]	; (c260 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    c214:	4b13      	ldr	r3, [pc, #76]	; (c264 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    c216:	0018      	movs	r0, r3
    c218:	f002 fb26 	bl	e868 <__aeabi_atexit>
}
    c21c:	46c0      	nop			; (mov r8, r8)
    c21e:	46bd      	mov	sp, r7
    c220:	b002      	add	sp, #8
    c222:	bd80      	pop	{r7, pc}
    c224:	0000ffff 	.word	0x0000ffff
    c228:	42000800 	.word	0x42000800
    c22c:	20000dc0 	.word	0x20000dc0
    c230:	42000c00 	.word	0x42000c00
    c234:	20000dc4 	.word	0x20000dc4
    c238:	42001000 	.word	0x42001000
    c23c:	20000dc8 	.word	0x20000dc8
    c240:	42001400 	.word	0x42001400
    c244:	20000dcc 	.word	0x20000dcc
    c248:	42001800 	.word	0x42001800
    c24c:	20000dd0 	.word	0x20000dd0
    c250:	42001c00 	.word	0x42001c00
    c254:	20000dd4 	.word	0x20000dd4
    c258:	20000dd8 	.word	0x20000dd8
    c25c:	20000000 	.word	0x20000000
    c260:	00003f21 	.word	0x00003f21
    c264:	20000e94 	.word	0x20000e94

0000c268 <_GLOBAL__sub_I_g_APinDescription>:
    c268:	b580      	push	{r7, lr}
    c26a:	af00      	add	r7, sp, #0
    c26c:	4b03      	ldr	r3, [pc, #12]	; (c27c <_GLOBAL__sub_I_g_APinDescription+0x14>)
    c26e:	0019      	movs	r1, r3
    c270:	2001      	movs	r0, #1
    c272:	f7ff ff83 	bl	c17c <_Z41__static_initialization_and_destruction_0ii>
    c276:	46bd      	mov	sp, r7
    c278:	bd80      	pop	{r7, pc}
    c27a:	46c0      	nop			; (mov r8, r8)
    c27c:	0000ffff 	.word	0x0000ffff

0000c280 <_ZN12Adafruit_GFXC1Ess>:

#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
    c280:	b580      	push	{r7, lr}
    c282:	b082      	sub	sp, #8
    c284:	af00      	add	r7, sp, #0
    c286:	6078      	str	r0, [r7, #4]
    c288:	0008      	movs	r0, r1
    c28a:	0011      	movs	r1, r2
    c28c:	1cbb      	adds	r3, r7, #2
    c28e:	1c02      	adds	r2, r0, #0
    c290:	801a      	strh	r2, [r3, #0]
    c292:	003b      	movs	r3, r7
    c294:	1c0a      	adds	r2, r1, #0
    c296:	801a      	strh	r2, [r3, #0]
WIDTH(w), HEIGHT(h)
    c298:	687b      	ldr	r3, [r7, #4]
    c29a:	0018      	movs	r0, r3
    c29c:	f7f7 f98e 	bl	35bc <_ZN5PrintC1Ev>
    c2a0:	4a1c      	ldr	r2, [pc, #112]	; (c314 <_ZN12Adafruit_GFXC1Ess+0x94>)
    c2a2:	687b      	ldr	r3, [r7, #4]
    c2a4:	601a      	str	r2, [r3, #0]
    c2a6:	687b      	ldr	r3, [r7, #4]
    c2a8:	1cba      	adds	r2, r7, #2
    c2aa:	8812      	ldrh	r2, [r2, #0]
    c2ac:	811a      	strh	r2, [r3, #8]
    c2ae:	687b      	ldr	r3, [r7, #4]
    c2b0:	003a      	movs	r2, r7
    c2b2:	8812      	ldrh	r2, [r2, #0]
    c2b4:	815a      	strh	r2, [r3, #10]
{
    _width    = WIDTH;
    c2b6:	687b      	ldr	r3, [r7, #4]
    c2b8:	2208      	movs	r2, #8
    c2ba:	5e9a      	ldrsh	r2, [r3, r2]
    c2bc:	687b      	ldr	r3, [r7, #4]
    c2be:	819a      	strh	r2, [r3, #12]
    _height   = HEIGHT;
    c2c0:	687b      	ldr	r3, [r7, #4]
    c2c2:	220a      	movs	r2, #10
    c2c4:	5e9a      	ldrsh	r2, [r3, r2]
    c2c6:	687b      	ldr	r3, [r7, #4]
    c2c8:	81da      	strh	r2, [r3, #14]
    rotation  = 0;
    c2ca:	687b      	ldr	r3, [r7, #4]
    c2cc:	2200      	movs	r2, #0
    c2ce:	765a      	strb	r2, [r3, #25]
    cursor_y  = cursor_x    = 0;
    c2d0:	687b      	ldr	r3, [r7, #4]
    c2d2:	2200      	movs	r2, #0
    c2d4:	821a      	strh	r2, [r3, #16]
    c2d6:	687b      	ldr	r3, [r7, #4]
    c2d8:	2210      	movs	r2, #16
    c2da:	5e9a      	ldrsh	r2, [r3, r2]
    c2dc:	687b      	ldr	r3, [r7, #4]
    c2de:	825a      	strh	r2, [r3, #18]
    textsize  = 1;
    c2e0:	687b      	ldr	r3, [r7, #4]
    c2e2:	2201      	movs	r2, #1
    c2e4:	761a      	strb	r2, [r3, #24]
    textcolor = textbgcolor = 0xFFFF;
    c2e6:	687b      	ldr	r3, [r7, #4]
    c2e8:	2201      	movs	r2, #1
    c2ea:	4252      	negs	r2, r2
    c2ec:	82da      	strh	r2, [r3, #22]
    c2ee:	687b      	ldr	r3, [r7, #4]
    c2f0:	8ada      	ldrh	r2, [r3, #22]
    c2f2:	687b      	ldr	r3, [r7, #4]
    c2f4:	829a      	strh	r2, [r3, #20]
    wrap      = true;
    c2f6:	687b      	ldr	r3, [r7, #4]
    c2f8:	2201      	movs	r2, #1
    c2fa:	769a      	strb	r2, [r3, #26]
    _cp437    = false;
    c2fc:	687b      	ldr	r3, [r7, #4]
    c2fe:	2200      	movs	r2, #0
    c300:	76da      	strb	r2, [r3, #27]
    gfxFont   = NULL;
    c302:	687b      	ldr	r3, [r7, #4]
    c304:	2200      	movs	r2, #0
    c306:	61da      	str	r2, [r3, #28]
}
    c308:	687b      	ldr	r3, [r7, #4]
    c30a:	0018      	movs	r0, r3
    c30c:	46bd      	mov	sp, r7
    c30e:	b002      	add	sp, #8
    c310:	bd80      	pop	{r7, pc}
    c312:	46c0      	nop			; (mov r8, r8)
    c314:	00014030 	.word	0x00014030

0000c318 <_ZN12Adafruit_GFX9writeLineEsssst>:

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    c318:	b5b0      	push	{r4, r5, r7, lr}
    c31a:	b08a      	sub	sp, #40	; 0x28
    c31c:	af00      	add	r7, sp, #0
    c31e:	60f8      	str	r0, [r7, #12]
    c320:	000c      	movs	r4, r1
    c322:	0010      	movs	r0, r2
    c324:	0019      	movs	r1, r3
    c326:	230a      	movs	r3, #10
    c328:	18fb      	adds	r3, r7, r3
    c32a:	1c22      	adds	r2, r4, #0
    c32c:	801a      	strh	r2, [r3, #0]
    c32e:	2308      	movs	r3, #8
    c330:	18fb      	adds	r3, r7, r3
    c332:	1c02      	adds	r2, r0, #0
    c334:	801a      	strh	r2, [r3, #0]
    c336:	1dbb      	adds	r3, r7, #6
    c338:	1c0a      	adds	r2, r1, #0
    c33a:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    c33c:	2338      	movs	r3, #56	; 0x38
    c33e:	18fb      	adds	r3, r7, r3
    c340:	2200      	movs	r2, #0
    c342:	5e9a      	ldrsh	r2, [r3, r2]
    c344:	2308      	movs	r3, #8
    c346:	18fb      	adds	r3, r7, r3
    c348:	2100      	movs	r1, #0
    c34a:	5e5b      	ldrsh	r3, [r3, r1]
    c34c:	1ad3      	subs	r3, r2, r3
    c34e:	17d9      	asrs	r1, r3, #31
    c350:	185a      	adds	r2, r3, r1
    c352:	404a      	eors	r2, r1
    c354:	1dbb      	adds	r3, r7, #6
    c356:	2100      	movs	r1, #0
    c358:	5e59      	ldrsh	r1, [r3, r1]
    c35a:	230a      	movs	r3, #10
    c35c:	18fb      	adds	r3, r7, r3
    c35e:	2000      	movs	r0, #0
    c360:	5e1b      	ldrsh	r3, [r3, r0]
    c362:	1acb      	subs	r3, r1, r3
    c364:	17d9      	asrs	r1, r3, #31
    c366:	185b      	adds	r3, r3, r1
    c368:	404b      	eors	r3, r1
    c36a:	2101      	movs	r1, #1
    c36c:	429a      	cmp	r2, r3
    c36e:	dc01      	bgt.n	c374 <_ZN12Adafruit_GFX9writeLineEsssst+0x5c>
    c370:	2300      	movs	r3, #0
    c372:	1c19      	adds	r1, r3, #0
    c374:	b2ca      	uxtb	r2, r1
    c376:	2322      	movs	r3, #34	; 0x22
    c378:	18fb      	adds	r3, r7, r3
    c37a:	801a      	strh	r2, [r3, #0]
    if (steep) {
    c37c:	2322      	movs	r3, #34	; 0x22
    c37e:	18fb      	adds	r3, r7, r3
    c380:	2200      	movs	r2, #0
    c382:	5e9b      	ldrsh	r3, [r3, r2]
    c384:	2b00      	cmp	r3, #0
    c386:	d021      	beq.n	c3cc <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
        _swap_int16_t(x0, y0);
    c388:	2320      	movs	r3, #32
    c38a:	18fb      	adds	r3, r7, r3
    c38c:	220a      	movs	r2, #10
    c38e:	18ba      	adds	r2, r7, r2
    c390:	8812      	ldrh	r2, [r2, #0]
    c392:	801a      	strh	r2, [r3, #0]
    c394:	230a      	movs	r3, #10
    c396:	18fb      	adds	r3, r7, r3
    c398:	2208      	movs	r2, #8
    c39a:	18ba      	adds	r2, r7, r2
    c39c:	8812      	ldrh	r2, [r2, #0]
    c39e:	801a      	strh	r2, [r3, #0]
    c3a0:	2308      	movs	r3, #8
    c3a2:	18fb      	adds	r3, r7, r3
    c3a4:	2220      	movs	r2, #32
    c3a6:	18ba      	adds	r2, r7, r2
    c3a8:	8812      	ldrh	r2, [r2, #0]
    c3aa:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
    c3ac:	231e      	movs	r3, #30
    c3ae:	18fb      	adds	r3, r7, r3
    c3b0:	1dba      	adds	r2, r7, #6
    c3b2:	8812      	ldrh	r2, [r2, #0]
    c3b4:	801a      	strh	r2, [r3, #0]
    c3b6:	1dbb      	adds	r3, r7, #6
    c3b8:	2238      	movs	r2, #56	; 0x38
    c3ba:	18ba      	adds	r2, r7, r2
    c3bc:	8812      	ldrh	r2, [r2, #0]
    c3be:	801a      	strh	r2, [r3, #0]
    c3c0:	2338      	movs	r3, #56	; 0x38
    c3c2:	18fa      	adds	r2, r7, r3
    c3c4:	231e      	movs	r3, #30
    c3c6:	18fb      	adds	r3, r7, r3
    c3c8:	881b      	ldrh	r3, [r3, #0]
    c3ca:	8013      	strh	r3, [r2, #0]
    }

    if (x0 > x1) {
    c3cc:	230a      	movs	r3, #10
    c3ce:	18fa      	adds	r2, r7, r3
    c3d0:	1dbb      	adds	r3, r7, #6
    c3d2:	2100      	movs	r1, #0
    c3d4:	5e52      	ldrsh	r2, [r2, r1]
    c3d6:	2100      	movs	r1, #0
    c3d8:	5e5b      	ldrsh	r3, [r3, r1]
    c3da:	429a      	cmp	r2, r3
    c3dc:	dd21      	ble.n	c422 <_ZN12Adafruit_GFX9writeLineEsssst+0x10a>
        _swap_int16_t(x0, x1);
    c3de:	231c      	movs	r3, #28
    c3e0:	18fb      	adds	r3, r7, r3
    c3e2:	220a      	movs	r2, #10
    c3e4:	18ba      	adds	r2, r7, r2
    c3e6:	8812      	ldrh	r2, [r2, #0]
    c3e8:	801a      	strh	r2, [r3, #0]
    c3ea:	230a      	movs	r3, #10
    c3ec:	18fb      	adds	r3, r7, r3
    c3ee:	1dba      	adds	r2, r7, #6
    c3f0:	8812      	ldrh	r2, [r2, #0]
    c3f2:	801a      	strh	r2, [r3, #0]
    c3f4:	1dbb      	adds	r3, r7, #6
    c3f6:	221c      	movs	r2, #28
    c3f8:	18ba      	adds	r2, r7, r2
    c3fa:	8812      	ldrh	r2, [r2, #0]
    c3fc:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
    c3fe:	231a      	movs	r3, #26
    c400:	18fb      	adds	r3, r7, r3
    c402:	2208      	movs	r2, #8
    c404:	18ba      	adds	r2, r7, r2
    c406:	8812      	ldrh	r2, [r2, #0]
    c408:	801a      	strh	r2, [r3, #0]
    c40a:	2308      	movs	r3, #8
    c40c:	18fb      	adds	r3, r7, r3
    c40e:	2238      	movs	r2, #56	; 0x38
    c410:	18ba      	adds	r2, r7, r2
    c412:	8812      	ldrh	r2, [r2, #0]
    c414:	801a      	strh	r2, [r3, #0]
    c416:	2338      	movs	r3, #56	; 0x38
    c418:	18fa      	adds	r2, r7, r3
    c41a:	231a      	movs	r3, #26
    c41c:	18fb      	adds	r3, r7, r3
    c41e:	881b      	ldrh	r3, [r3, #0]
    c420:	8013      	strh	r3, [r2, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
    c422:	1dbb      	adds	r3, r7, #6
    c424:	881a      	ldrh	r2, [r3, #0]
    c426:	230a      	movs	r3, #10
    c428:	18fb      	adds	r3, r7, r3
    c42a:	881b      	ldrh	r3, [r3, #0]
    c42c:	1ad3      	subs	r3, r2, r3
    c42e:	b29a      	uxth	r2, r3
    c430:	2318      	movs	r3, #24
    c432:	18fb      	adds	r3, r7, r3
    c434:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
    c436:	2338      	movs	r3, #56	; 0x38
    c438:	18fb      	adds	r3, r7, r3
    c43a:	2200      	movs	r2, #0
    c43c:	5e9a      	ldrsh	r2, [r3, r2]
    c43e:	2308      	movs	r3, #8
    c440:	18fb      	adds	r3, r7, r3
    c442:	2100      	movs	r1, #0
    c444:	5e5b      	ldrsh	r3, [r3, r1]
    c446:	1ad3      	subs	r3, r2, r3
    c448:	17d9      	asrs	r1, r3, #31
    c44a:	185a      	adds	r2, r3, r1
    c44c:	404a      	eors	r2, r1
    c44e:	2316      	movs	r3, #22
    c450:	18fb      	adds	r3, r7, r3
    c452:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
    c454:	2326      	movs	r3, #38	; 0x26
    c456:	18fa      	adds	r2, r7, r3
    c458:	2318      	movs	r3, #24
    c45a:	18fb      	adds	r3, r7, r3
    c45c:	2100      	movs	r1, #0
    c45e:	5e5b      	ldrsh	r3, [r3, r1]
    c460:	2b00      	cmp	r3, #0
    c462:	da00      	bge.n	c466 <_ZN12Adafruit_GFX9writeLineEsssst+0x14e>
    c464:	3301      	adds	r3, #1
    c466:	105b      	asrs	r3, r3, #1
    c468:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
    c46a:	2308      	movs	r3, #8
    c46c:	18fb      	adds	r3, r7, r3
    c46e:	2238      	movs	r2, #56	; 0x38
    c470:	18b9      	adds	r1, r7, r2
    c472:	2200      	movs	r2, #0
    c474:	5e9a      	ldrsh	r2, [r3, r2]
    c476:	2300      	movs	r3, #0
    c478:	5ecb      	ldrsh	r3, [r1, r3]
    c47a:	429a      	cmp	r2, r3
    c47c:	da04      	bge.n	c488 <_ZN12Adafruit_GFX9writeLineEsssst+0x170>
        ystep = 1;
    c47e:	2324      	movs	r3, #36	; 0x24
    c480:	18fb      	adds	r3, r7, r3
    c482:	2201      	movs	r2, #1
    c484:	801a      	strh	r2, [r3, #0]
    c486:	e004      	b.n	c492 <_ZN12Adafruit_GFX9writeLineEsssst+0x17a>
    } else {
        ystep = -1;
    c488:	2324      	movs	r3, #36	; 0x24
    c48a:	18fb      	adds	r3, r7, r3
    c48c:	2201      	movs	r2, #1
    c48e:	4252      	negs	r2, r2
    c490:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
    c492:	230a      	movs	r3, #10
    c494:	18fa      	adds	r2, r7, r3
    c496:	1dbb      	adds	r3, r7, #6
    c498:	2100      	movs	r1, #0
    c49a:	5e52      	ldrsh	r2, [r2, r1]
    c49c:	2100      	movs	r1, #0
    c49e:	5e5b      	ldrsh	r3, [r3, r1]
    c4a0:	429a      	cmp	r2, r3
    c4a2:	dc62      	bgt.n	c56a <_ZN12Adafruit_GFX9writeLineEsssst+0x252>
        if (steep) {
    c4a4:	2322      	movs	r3, #34	; 0x22
    c4a6:	18fb      	adds	r3, r7, r3
    c4a8:	2200      	movs	r2, #0
    c4aa:	5e9b      	ldrsh	r3, [r3, r2]
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	d012      	beq.n	c4d6 <_ZN12Adafruit_GFX9writeLineEsssst+0x1be>
            writePixel(y0, x0, color);
    c4b0:	68fb      	ldr	r3, [r7, #12]
    c4b2:	681b      	ldr	r3, [r3, #0]
    c4b4:	3318      	adds	r3, #24
    c4b6:	681c      	ldr	r4, [r3, #0]
    c4b8:	233c      	movs	r3, #60	; 0x3c
    c4ba:	18fb      	adds	r3, r7, r3
    c4bc:	881d      	ldrh	r5, [r3, #0]
    c4be:	230a      	movs	r3, #10
    c4c0:	18fb      	adds	r3, r7, r3
    c4c2:	2200      	movs	r2, #0
    c4c4:	5e9a      	ldrsh	r2, [r3, r2]
    c4c6:	2308      	movs	r3, #8
    c4c8:	18fb      	adds	r3, r7, r3
    c4ca:	2100      	movs	r1, #0
    c4cc:	5e59      	ldrsh	r1, [r3, r1]
    c4ce:	68f8      	ldr	r0, [r7, #12]
    c4d0:	002b      	movs	r3, r5
    c4d2:	47a0      	blx	r4
    c4d4:	e011      	b.n	c4fa <_ZN12Adafruit_GFX9writeLineEsssst+0x1e2>
        } else {
            writePixel(x0, y0, color);
    c4d6:	68fb      	ldr	r3, [r7, #12]
    c4d8:	681b      	ldr	r3, [r3, #0]
    c4da:	3318      	adds	r3, #24
    c4dc:	681c      	ldr	r4, [r3, #0]
    c4de:	233c      	movs	r3, #60	; 0x3c
    c4e0:	18fb      	adds	r3, r7, r3
    c4e2:	881d      	ldrh	r5, [r3, #0]
    c4e4:	2308      	movs	r3, #8
    c4e6:	18fb      	adds	r3, r7, r3
    c4e8:	2200      	movs	r2, #0
    c4ea:	5e9a      	ldrsh	r2, [r3, r2]
    c4ec:	230a      	movs	r3, #10
    c4ee:	18fb      	adds	r3, r7, r3
    c4f0:	2100      	movs	r1, #0
    c4f2:	5e59      	ldrsh	r1, [r3, r1]
    c4f4:	68f8      	ldr	r0, [r7, #12]
    c4f6:	002b      	movs	r3, r5
    c4f8:	47a0      	blx	r4
        }
        err -= dy;
    c4fa:	2326      	movs	r3, #38	; 0x26
    c4fc:	18fb      	adds	r3, r7, r3
    c4fe:	881a      	ldrh	r2, [r3, #0]
    c500:	2316      	movs	r3, #22
    c502:	18fb      	adds	r3, r7, r3
    c504:	881b      	ldrh	r3, [r3, #0]
    c506:	1ad3      	subs	r3, r2, r3
    c508:	b29a      	uxth	r2, r3
    c50a:	2326      	movs	r3, #38	; 0x26
    c50c:	18fb      	adds	r3, r7, r3
    c50e:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
    c510:	2326      	movs	r3, #38	; 0x26
    c512:	18fb      	adds	r3, r7, r3
    c514:	2200      	movs	r2, #0
    c516:	5e9b      	ldrsh	r3, [r3, r2]
    c518:	2b00      	cmp	r3, #0
    c51a:	da15      	bge.n	c548 <_ZN12Adafruit_GFX9writeLineEsssst+0x230>
            y0 += ystep;
    c51c:	2308      	movs	r3, #8
    c51e:	18fb      	adds	r3, r7, r3
    c520:	881a      	ldrh	r2, [r3, #0]
    c522:	2324      	movs	r3, #36	; 0x24
    c524:	18fb      	adds	r3, r7, r3
    c526:	881b      	ldrh	r3, [r3, #0]
    c528:	18d3      	adds	r3, r2, r3
    c52a:	b29a      	uxth	r2, r3
    c52c:	2308      	movs	r3, #8
    c52e:	18fb      	adds	r3, r7, r3
    c530:	801a      	strh	r2, [r3, #0]
            err += dx;
    c532:	2326      	movs	r3, #38	; 0x26
    c534:	18fb      	adds	r3, r7, r3
    c536:	881a      	ldrh	r2, [r3, #0]
    c538:	2318      	movs	r3, #24
    c53a:	18fb      	adds	r3, r7, r3
    c53c:	881b      	ldrh	r3, [r3, #0]
    c53e:	18d3      	adds	r3, r2, r3
    c540:	b29a      	uxth	r2, r3
    c542:	2326      	movs	r3, #38	; 0x26
    c544:	18fb      	adds	r3, r7, r3
    c546:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
    c548:	230a      	movs	r3, #10
    c54a:	18fb      	adds	r3, r7, r3
    c54c:	2200      	movs	r2, #0
    c54e:	5e9b      	ldrsh	r3, [r3, r2]
    c550:	b29b      	uxth	r3, r3
    c552:	3301      	adds	r3, #1
    c554:	b29a      	uxth	r2, r3
    c556:	230a      	movs	r3, #10
    c558:	18fb      	adds	r3, r7, r3
    c55a:	801a      	strh	r2, [r3, #0]
    c55c:	2324      	movs	r3, #36	; 0x24
    c55e:	18fb      	adds	r3, r7, r3
    c560:	2224      	movs	r2, #36	; 0x24
    c562:	18ba      	adds	r2, r7, r2
    c564:	8812      	ldrh	r2, [r2, #0]
    c566:	801a      	strh	r2, [r3, #0]
    c568:	e793      	b.n	c492 <_ZN12Adafruit_GFX9writeLineEsssst+0x17a>
        }
    }
}
    c56a:	46c0      	nop			; (mov r8, r8)
    c56c:	46bd      	mov	sp, r7
    c56e:	b00a      	add	sp, #40	; 0x28
    c570:	bdb0      	pop	{r4, r5, r7, pc}

0000c572 <_ZN12Adafruit_GFX10startWriteEv>:

void Adafruit_GFX::startWrite(){
    c572:	b580      	push	{r7, lr}
    c574:	b082      	sub	sp, #8
    c576:	af00      	add	r7, sp, #0
    c578:	6078      	str	r0, [r7, #4]
    // Overwrite in subclasses if desired!
}
    c57a:	46c0      	nop			; (mov r8, r8)
    c57c:	46bd      	mov	sp, r7
    c57e:	b002      	add	sp, #8
    c580:	bd80      	pop	{r7, pc}

0000c582 <_ZN12Adafruit_GFX10writePixelEsst>:

void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    c582:	b5b0      	push	{r4, r5, r7, lr}
    c584:	b084      	sub	sp, #16
    c586:	af00      	add	r7, sp, #0
    c588:	60f8      	str	r0, [r7, #12]
    c58a:	000c      	movs	r4, r1
    c58c:	0010      	movs	r0, r2
    c58e:	0019      	movs	r1, r3
    c590:	230a      	movs	r3, #10
    c592:	18fb      	adds	r3, r7, r3
    c594:	1c22      	adds	r2, r4, #0
    c596:	801a      	strh	r2, [r3, #0]
    c598:	2308      	movs	r3, #8
    c59a:	18fb      	adds	r3, r7, r3
    c59c:	1c02      	adds	r2, r0, #0
    c59e:	801a      	strh	r2, [r3, #0]
    c5a0:	1dbb      	adds	r3, r7, #6
    c5a2:	1c0a      	adds	r2, r1, #0
    c5a4:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    c5a6:	68fb      	ldr	r3, [r7, #12]
    c5a8:	681b      	ldr	r3, [r3, #0]
    c5aa:	3310      	adds	r3, #16
    c5ac:	681c      	ldr	r4, [r3, #0]
    c5ae:	1dbb      	adds	r3, r7, #6
    c5b0:	881d      	ldrh	r5, [r3, #0]
    c5b2:	2308      	movs	r3, #8
    c5b4:	18fb      	adds	r3, r7, r3
    c5b6:	2200      	movs	r2, #0
    c5b8:	5e9a      	ldrsh	r2, [r3, r2]
    c5ba:	230a      	movs	r3, #10
    c5bc:	18fb      	adds	r3, r7, r3
    c5be:	2100      	movs	r1, #0
    c5c0:	5e59      	ldrsh	r1, [r3, r1]
    c5c2:	68f8      	ldr	r0, [r7, #12]
    c5c4:	002b      	movs	r3, r5
    c5c6:	47a0      	blx	r4
}
    c5c8:	46c0      	nop			; (mov r8, r8)
    c5ca:	46bd      	mov	sp, r7
    c5cc:	b004      	add	sp, #16
    c5ce:	bdb0      	pop	{r4, r5, r7, pc}

0000c5d0 <_ZN12Adafruit_GFX14writeFastVLineEssst>:

// (x,y) is topmost point; if unsure, calling function
// should sort endpoints or call writeLine() instead
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    c5d0:	b5b0      	push	{r4, r5, r7, lr}
    c5d2:	b086      	sub	sp, #24
    c5d4:	af02      	add	r7, sp, #8
    c5d6:	60f8      	str	r0, [r7, #12]
    c5d8:	000c      	movs	r4, r1
    c5da:	0010      	movs	r0, r2
    c5dc:	0019      	movs	r1, r3
    c5de:	230a      	movs	r3, #10
    c5e0:	18fb      	adds	r3, r7, r3
    c5e2:	1c22      	adds	r2, r4, #0
    c5e4:	801a      	strh	r2, [r3, #0]
    c5e6:	2308      	movs	r3, #8
    c5e8:	18fb      	adds	r3, r7, r3
    c5ea:	1c02      	adds	r2, r0, #0
    c5ec:	801a      	strh	r2, [r3, #0]
    c5ee:	1dbb      	adds	r3, r7, #6
    c5f0:	1c0a      	adds	r2, r1, #0
    c5f2:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    c5f4:	68fb      	ldr	r3, [r7, #12]
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	3338      	adds	r3, #56	; 0x38
    c5fa:	681c      	ldr	r4, [r3, #0]
    c5fc:	1dbb      	adds	r3, r7, #6
    c5fe:	2500      	movs	r5, #0
    c600:	5f5d      	ldrsh	r5, [r3, r5]
    c602:	2308      	movs	r3, #8
    c604:	18fb      	adds	r3, r7, r3
    c606:	2200      	movs	r2, #0
    c608:	5e9a      	ldrsh	r2, [r3, r2]
    c60a:	230a      	movs	r3, #10
    c60c:	18fb      	adds	r3, r7, r3
    c60e:	2100      	movs	r1, #0
    c610:	5e59      	ldrsh	r1, [r3, r1]
    c612:	68f8      	ldr	r0, [r7, #12]
    c614:	2320      	movs	r3, #32
    c616:	18fb      	adds	r3, r7, r3
    c618:	881b      	ldrh	r3, [r3, #0]
    c61a:	9300      	str	r3, [sp, #0]
    c61c:	002b      	movs	r3, r5
    c61e:	47a0      	blx	r4
}
    c620:	46c0      	nop			; (mov r8, r8)
    c622:	46bd      	mov	sp, r7
    c624:	b004      	add	sp, #16
    c626:	bdb0      	pop	{r4, r5, r7, pc}

0000c628 <_ZN12Adafruit_GFX14writeFastHLineEssst>:

// (x,y) is leftmost point; if unsure, calling function
// should sort endpoints or call writeLine() instead
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    c628:	b5b0      	push	{r4, r5, r7, lr}
    c62a:	b086      	sub	sp, #24
    c62c:	af02      	add	r7, sp, #8
    c62e:	60f8      	str	r0, [r7, #12]
    c630:	000c      	movs	r4, r1
    c632:	0010      	movs	r0, r2
    c634:	0019      	movs	r1, r3
    c636:	230a      	movs	r3, #10
    c638:	18fb      	adds	r3, r7, r3
    c63a:	1c22      	adds	r2, r4, #0
    c63c:	801a      	strh	r2, [r3, #0]
    c63e:	2308      	movs	r3, #8
    c640:	18fb      	adds	r3, r7, r3
    c642:	1c02      	adds	r2, r0, #0
    c644:	801a      	strh	r2, [r3, #0]
    c646:	1dbb      	adds	r3, r7, #6
    c648:	1c0a      	adds	r2, r1, #0
    c64a:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    c64c:	68fb      	ldr	r3, [r7, #12]
    c64e:	681b      	ldr	r3, [r3, #0]
    c650:	333c      	adds	r3, #60	; 0x3c
    c652:	681c      	ldr	r4, [r3, #0]
    c654:	1dbb      	adds	r3, r7, #6
    c656:	2500      	movs	r5, #0
    c658:	5f5d      	ldrsh	r5, [r3, r5]
    c65a:	2308      	movs	r3, #8
    c65c:	18fb      	adds	r3, r7, r3
    c65e:	2200      	movs	r2, #0
    c660:	5e9a      	ldrsh	r2, [r3, r2]
    c662:	230a      	movs	r3, #10
    c664:	18fb      	adds	r3, r7, r3
    c666:	2100      	movs	r1, #0
    c668:	5e59      	ldrsh	r1, [r3, r1]
    c66a:	68f8      	ldr	r0, [r7, #12]
    c66c:	2320      	movs	r3, #32
    c66e:	18fb      	adds	r3, r7, r3
    c670:	881b      	ldrh	r3, [r3, #0]
    c672:	9300      	str	r3, [sp, #0]
    c674:	002b      	movs	r3, r5
    c676:	47a0      	blx	r4
}
    c678:	46c0      	nop			; (mov r8, r8)
    c67a:	46bd      	mov	sp, r7
    c67c:	b004      	add	sp, #16
    c67e:	bdb0      	pop	{r4, r5, r7, pc}

0000c680 <_ZN12Adafruit_GFX13writeFillRectEsssst>:

void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    c680:	b5f0      	push	{r4, r5, r6, r7, lr}
    c682:	b087      	sub	sp, #28
    c684:	af02      	add	r7, sp, #8
    c686:	60f8      	str	r0, [r7, #12]
    c688:	000c      	movs	r4, r1
    c68a:	0010      	movs	r0, r2
    c68c:	0019      	movs	r1, r3
    c68e:	230a      	movs	r3, #10
    c690:	18fb      	adds	r3, r7, r3
    c692:	1c22      	adds	r2, r4, #0
    c694:	801a      	strh	r2, [r3, #0]
    c696:	2308      	movs	r3, #8
    c698:	18fb      	adds	r3, r7, r3
    c69a:	1c02      	adds	r2, r0, #0
    c69c:	801a      	strh	r2, [r3, #0]
    c69e:	1dbb      	adds	r3, r7, #6
    c6a0:	1c0a      	adds	r2, r1, #0
    c6a2:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    c6a4:	68fb      	ldr	r3, [r7, #12]
    c6a6:	681b      	ldr	r3, [r3, #0]
    c6a8:	3340      	adds	r3, #64	; 0x40
    c6aa:	681c      	ldr	r4, [r3, #0]
    c6ac:	1dbb      	adds	r3, r7, #6
    c6ae:	2500      	movs	r5, #0
    c6b0:	5f5d      	ldrsh	r5, [r3, r5]
    c6b2:	2308      	movs	r3, #8
    c6b4:	18fb      	adds	r3, r7, r3
    c6b6:	2200      	movs	r2, #0
    c6b8:	5e9a      	ldrsh	r2, [r3, r2]
    c6ba:	230a      	movs	r3, #10
    c6bc:	18fb      	adds	r3, r7, r3
    c6be:	2100      	movs	r1, #0
    c6c0:	5e59      	ldrsh	r1, [r3, r1]
    c6c2:	68f8      	ldr	r0, [r7, #12]
    c6c4:	2324      	movs	r3, #36	; 0x24
    c6c6:	2608      	movs	r6, #8
    c6c8:	46b4      	mov	ip, r6
    c6ca:	44bc      	add	ip, r7
    c6cc:	4463      	add	r3, ip
    c6ce:	881b      	ldrh	r3, [r3, #0]
    c6d0:	9301      	str	r3, [sp, #4]
    c6d2:	2320      	movs	r3, #32
    c6d4:	2608      	movs	r6, #8
    c6d6:	46b4      	mov	ip, r6
    c6d8:	44bc      	add	ip, r7
    c6da:	4463      	add	r3, ip
    c6dc:	2600      	movs	r6, #0
    c6de:	5f9b      	ldrsh	r3, [r3, r6]
    c6e0:	9300      	str	r3, [sp, #0]
    c6e2:	002b      	movs	r3, r5
    c6e4:	47a0      	blx	r4
}
    c6e6:	46c0      	nop			; (mov r8, r8)
    c6e8:	46bd      	mov	sp, r7
    c6ea:	b005      	add	sp, #20
    c6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c6ee <_ZN12Adafruit_GFX8endWriteEv>:

void Adafruit_GFX::endWrite(){
    c6ee:	b580      	push	{r7, lr}
    c6f0:	b082      	sub	sp, #8
    c6f2:	af00      	add	r7, sp, #0
    c6f4:	6078      	str	r0, [r7, #4]
    // Overwrite in subclasses if startWrite is defined!
}
    c6f6:	46c0      	nop			; (mov r8, r8)
    c6f8:	46bd      	mov	sp, r7
    c6fa:	b002      	add	sp, #8
    c6fc:	bd80      	pop	{r7, pc}

0000c6fe <_ZN12Adafruit_GFX13drawFastVLineEssst>:

// (x,y) is topmost point; if unsure, calling function
// should sort endpoints or call drawLine() instead
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    c6fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    c700:	b087      	sub	sp, #28
    c702:	af02      	add	r7, sp, #8
    c704:	60f8      	str	r0, [r7, #12]
    c706:	000c      	movs	r4, r1
    c708:	0010      	movs	r0, r2
    c70a:	0019      	movs	r1, r3
    c70c:	230a      	movs	r3, #10
    c70e:	18fb      	adds	r3, r7, r3
    c710:	1c22      	adds	r2, r4, #0
    c712:	801a      	strh	r2, [r3, #0]
    c714:	2308      	movs	r3, #8
    c716:	18fb      	adds	r3, r7, r3
    c718:	1c02      	adds	r2, r0, #0
    c71a:	801a      	strh	r2, [r3, #0]
    c71c:	1dbb      	adds	r3, r7, #6
    c71e:	1c0a      	adds	r2, r1, #0
    c720:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c722:	68fb      	ldr	r3, [r7, #12]
    c724:	681b      	ldr	r3, [r3, #0]
    c726:	3314      	adds	r3, #20
    c728:	681b      	ldr	r3, [r3, #0]
    c72a:	68fa      	ldr	r2, [r7, #12]
    c72c:	0010      	movs	r0, r2
    c72e:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
    c730:	68fb      	ldr	r3, [r7, #12]
    c732:	681b      	ldr	r3, [r3, #0]
    c734:	3328      	adds	r3, #40	; 0x28
    c736:	681c      	ldr	r4, [r3, #0]
    c738:	2308      	movs	r3, #8
    c73a:	18fb      	adds	r3, r7, r3
    c73c:	881a      	ldrh	r2, [r3, #0]
    c73e:	1dbb      	adds	r3, r7, #6
    c740:	881b      	ldrh	r3, [r3, #0]
    c742:	18d3      	adds	r3, r2, r3
    c744:	b29b      	uxth	r3, r3
    c746:	3b01      	subs	r3, #1
    c748:	b29b      	uxth	r3, r3
    c74a:	b21b      	sxth	r3, r3
    c74c:	220a      	movs	r2, #10
    c74e:	18ba      	adds	r2, r7, r2
    c750:	2600      	movs	r6, #0
    c752:	5f96      	ldrsh	r6, [r2, r6]
    c754:	2208      	movs	r2, #8
    c756:	18ba      	adds	r2, r7, r2
    c758:	2500      	movs	r5, #0
    c75a:	5f55      	ldrsh	r5, [r2, r5]
    c75c:	220a      	movs	r2, #10
    c75e:	18ba      	adds	r2, r7, r2
    c760:	2100      	movs	r1, #0
    c762:	5e51      	ldrsh	r1, [r2, r1]
    c764:	68f8      	ldr	r0, [r7, #12]
    c766:	2228      	movs	r2, #40	; 0x28
    c768:	18ba      	adds	r2, r7, r2
    c76a:	8812      	ldrh	r2, [r2, #0]
    c76c:	9201      	str	r2, [sp, #4]
    c76e:	9300      	str	r3, [sp, #0]
    c770:	0033      	movs	r3, r6
    c772:	002a      	movs	r2, r5
    c774:	47a0      	blx	r4
    endWrite();
    c776:	68fb      	ldr	r3, [r7, #12]
    c778:	681b      	ldr	r3, [r3, #0]
    c77a:	332c      	adds	r3, #44	; 0x2c
    c77c:	681b      	ldr	r3, [r3, #0]
    c77e:	68fa      	ldr	r2, [r7, #12]
    c780:	0010      	movs	r0, r2
    c782:	4798      	blx	r3
}
    c784:	46c0      	nop			; (mov r8, r8)
    c786:	46bd      	mov	sp, r7
    c788:	b005      	add	sp, #20
    c78a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c78c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

// (x,y) is leftmost point; if unsure, calling function
// should sort endpoints or call drawLine() instead
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    c78c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c78e:	b087      	sub	sp, #28
    c790:	af02      	add	r7, sp, #8
    c792:	60f8      	str	r0, [r7, #12]
    c794:	000c      	movs	r4, r1
    c796:	0010      	movs	r0, r2
    c798:	0019      	movs	r1, r3
    c79a:	230a      	movs	r3, #10
    c79c:	18fb      	adds	r3, r7, r3
    c79e:	1c22      	adds	r2, r4, #0
    c7a0:	801a      	strh	r2, [r3, #0]
    c7a2:	2308      	movs	r3, #8
    c7a4:	18fb      	adds	r3, r7, r3
    c7a6:	1c02      	adds	r2, r0, #0
    c7a8:	801a      	strh	r2, [r3, #0]
    c7aa:	1dbb      	adds	r3, r7, #6
    c7ac:	1c0a      	adds	r2, r1, #0
    c7ae:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c7b0:	68fb      	ldr	r3, [r7, #12]
    c7b2:	681b      	ldr	r3, [r3, #0]
    c7b4:	3314      	adds	r3, #20
    c7b6:	681b      	ldr	r3, [r3, #0]
    c7b8:	68fa      	ldr	r2, [r7, #12]
    c7ba:	0010      	movs	r0, r2
    c7bc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
    c7be:	68fb      	ldr	r3, [r7, #12]
    c7c0:	681b      	ldr	r3, [r3, #0]
    c7c2:	3328      	adds	r3, #40	; 0x28
    c7c4:	681c      	ldr	r4, [r3, #0]
    c7c6:	230a      	movs	r3, #10
    c7c8:	18fb      	adds	r3, r7, r3
    c7ca:	881a      	ldrh	r2, [r3, #0]
    c7cc:	1dbb      	adds	r3, r7, #6
    c7ce:	881b      	ldrh	r3, [r3, #0]
    c7d0:	18d3      	adds	r3, r2, r3
    c7d2:	b29b      	uxth	r3, r3
    c7d4:	3b01      	subs	r3, #1
    c7d6:	b29b      	uxth	r3, r3
    c7d8:	b21d      	sxth	r5, r3
    c7da:	2308      	movs	r3, #8
    c7dc:	18fb      	adds	r3, r7, r3
    c7de:	2200      	movs	r2, #0
    c7e0:	5e9a      	ldrsh	r2, [r3, r2]
    c7e2:	230a      	movs	r3, #10
    c7e4:	18fb      	adds	r3, r7, r3
    c7e6:	2100      	movs	r1, #0
    c7e8:	5e59      	ldrsh	r1, [r3, r1]
    c7ea:	68f8      	ldr	r0, [r7, #12]
    c7ec:	2320      	movs	r3, #32
    c7ee:	2608      	movs	r6, #8
    c7f0:	46b4      	mov	ip, r6
    c7f2:	44bc      	add	ip, r7
    c7f4:	4463      	add	r3, ip
    c7f6:	881b      	ldrh	r3, [r3, #0]
    c7f8:	9301      	str	r3, [sp, #4]
    c7fa:	2308      	movs	r3, #8
    c7fc:	18fb      	adds	r3, r7, r3
    c7fe:	2600      	movs	r6, #0
    c800:	5f9b      	ldrsh	r3, [r3, r6]
    c802:	9300      	str	r3, [sp, #0]
    c804:	002b      	movs	r3, r5
    c806:	47a0      	blx	r4
    endWrite();
    c808:	68fb      	ldr	r3, [r7, #12]
    c80a:	681b      	ldr	r3, [r3, #0]
    c80c:	332c      	adds	r3, #44	; 0x2c
    c80e:	681b      	ldr	r3, [r3, #0]
    c810:	68fa      	ldr	r2, [r7, #12]
    c812:	0010      	movs	r0, r2
    c814:	4798      	blx	r3
}
    c816:	46c0      	nop			; (mov r8, r8)
    c818:	46bd      	mov	sp, r7
    c81a:	b005      	add	sp, #20
    c81c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c81e <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    c81e:	b5b0      	push	{r4, r5, r7, lr}
    c820:	b088      	sub	sp, #32
    c822:	af02      	add	r7, sp, #8
    c824:	60f8      	str	r0, [r7, #12]
    c826:	000c      	movs	r4, r1
    c828:	0010      	movs	r0, r2
    c82a:	0019      	movs	r1, r3
    c82c:	230a      	movs	r3, #10
    c82e:	18fb      	adds	r3, r7, r3
    c830:	1c22      	adds	r2, r4, #0
    c832:	801a      	strh	r2, [r3, #0]
    c834:	2308      	movs	r3, #8
    c836:	18fb      	adds	r3, r7, r3
    c838:	1c02      	adds	r2, r0, #0
    c83a:	801a      	strh	r2, [r3, #0]
    c83c:	1dbb      	adds	r3, r7, #6
    c83e:	1c0a      	adds	r2, r1, #0
    c840:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c842:	68fb      	ldr	r3, [r7, #12]
    c844:	681b      	ldr	r3, [r3, #0]
    c846:	3314      	adds	r3, #20
    c848:	681b      	ldr	r3, [r3, #0]
    c84a:	68fa      	ldr	r2, [r7, #12]
    c84c:	0010      	movs	r0, r2
    c84e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
    c850:	2316      	movs	r3, #22
    c852:	18fb      	adds	r3, r7, r3
    c854:	220a      	movs	r2, #10
    c856:	18ba      	adds	r2, r7, r2
    c858:	8812      	ldrh	r2, [r2, #0]
    c85a:	801a      	strh	r2, [r3, #0]
    c85c:	2316      	movs	r3, #22
    c85e:	18fb      	adds	r3, r7, r3
    c860:	2200      	movs	r2, #0
    c862:	5e9a      	ldrsh	r2, [r3, r2]
    c864:	230a      	movs	r3, #10
    c866:	18fb      	adds	r3, r7, r3
    c868:	2100      	movs	r1, #0
    c86a:	5e59      	ldrsh	r1, [r3, r1]
    c86c:	1dbb      	adds	r3, r7, #6
    c86e:	2000      	movs	r0, #0
    c870:	5e1b      	ldrsh	r3, [r3, r0]
    c872:	18cb      	adds	r3, r1, r3
    c874:	429a      	cmp	r2, r3
    c876:	da21      	bge.n	c8bc <_ZN12Adafruit_GFX8fillRectEsssst+0x9e>
        writeFastVLine(i, y, h, color);
    c878:	68fb      	ldr	r3, [r7, #12]
    c87a:	681b      	ldr	r3, [r3, #0]
    c87c:	3320      	adds	r3, #32
    c87e:	681c      	ldr	r4, [r3, #0]
    c880:	2328      	movs	r3, #40	; 0x28
    c882:	18fb      	adds	r3, r7, r3
    c884:	2500      	movs	r5, #0
    c886:	5f5d      	ldrsh	r5, [r3, r5]
    c888:	2308      	movs	r3, #8
    c88a:	18fb      	adds	r3, r7, r3
    c88c:	2200      	movs	r2, #0
    c88e:	5e9a      	ldrsh	r2, [r3, r2]
    c890:	2316      	movs	r3, #22
    c892:	18fb      	adds	r3, r7, r3
    c894:	2100      	movs	r1, #0
    c896:	5e59      	ldrsh	r1, [r3, r1]
    c898:	68f8      	ldr	r0, [r7, #12]
    c89a:	232c      	movs	r3, #44	; 0x2c
    c89c:	18fb      	adds	r3, r7, r3
    c89e:	881b      	ldrh	r3, [r3, #0]
    c8a0:	9300      	str	r3, [sp, #0]
    c8a2:	002b      	movs	r3, r5
    c8a4:	47a0      	blx	r4
    for (int16_t i=x; i<x+w; i++) {
    c8a6:	2316      	movs	r3, #22
    c8a8:	18fb      	adds	r3, r7, r3
    c8aa:	2200      	movs	r2, #0
    c8ac:	5e9b      	ldrsh	r3, [r3, r2]
    c8ae:	b29b      	uxth	r3, r3
    c8b0:	3301      	adds	r3, #1
    c8b2:	b29a      	uxth	r2, r3
    c8b4:	2316      	movs	r3, #22
    c8b6:	18fb      	adds	r3, r7, r3
    c8b8:	801a      	strh	r2, [r3, #0]
    c8ba:	e7cf      	b.n	c85c <_ZN12Adafruit_GFX8fillRectEsssst+0x3e>
    }
    endWrite();
    c8bc:	68fb      	ldr	r3, [r7, #12]
    c8be:	681b      	ldr	r3, [r3, #0]
    c8c0:	332c      	adds	r3, #44	; 0x2c
    c8c2:	681b      	ldr	r3, [r3, #0]
    c8c4:	68fa      	ldr	r2, [r7, #12]
    c8c6:	0010      	movs	r0, r2
    c8c8:	4798      	blx	r3
}
    c8ca:	46c0      	nop			; (mov r8, r8)
    c8cc:	46bd      	mov	sp, r7
    c8ce:	b006      	add	sp, #24
    c8d0:	bdb0      	pop	{r4, r5, r7, pc}

0000c8d2 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
    c8d2:	b590      	push	{r4, r7, lr}
    c8d4:	b085      	sub	sp, #20
    c8d6:	af02      	add	r7, sp, #8
    c8d8:	6078      	str	r0, [r7, #4]
    c8da:	000a      	movs	r2, r1
    c8dc:	1cbb      	adds	r3, r7, #2
    c8de:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    fillRect(0, 0, _width, _height, color);
    c8e0:	687b      	ldr	r3, [r7, #4]
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	3340      	adds	r3, #64	; 0x40
    c8e6:	681c      	ldr	r4, [r3, #0]
    c8e8:	687b      	ldr	r3, [r7, #4]
    c8ea:	210c      	movs	r1, #12
    c8ec:	5e59      	ldrsh	r1, [r3, r1]
    c8ee:	687b      	ldr	r3, [r7, #4]
    c8f0:	220e      	movs	r2, #14
    c8f2:	5e9b      	ldrsh	r3, [r3, r2]
    c8f4:	6878      	ldr	r0, [r7, #4]
    c8f6:	1cba      	adds	r2, r7, #2
    c8f8:	8812      	ldrh	r2, [r2, #0]
    c8fa:	9201      	str	r2, [sp, #4]
    c8fc:	9300      	str	r3, [sp, #0]
    c8fe:	000b      	movs	r3, r1
    c900:	2200      	movs	r2, #0
    c902:	2100      	movs	r1, #0
    c904:	47a0      	blx	r4
}
    c906:	46c0      	nop			; (mov r8, r8)
    c908:	46bd      	mov	sp, r7
    c90a:	b003      	add	sp, #12
    c90c:	bd90      	pop	{r4, r7, pc}

0000c90e <_ZN12Adafruit_GFX8drawLineEsssst>:

void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    c90e:	b5f0      	push	{r4, r5, r6, r7, lr}
    c910:	b089      	sub	sp, #36	; 0x24
    c912:	af02      	add	r7, sp, #8
    c914:	60f8      	str	r0, [r7, #12]
    c916:	000c      	movs	r4, r1
    c918:	0010      	movs	r0, r2
    c91a:	0019      	movs	r1, r3
    c91c:	230a      	movs	r3, #10
    c91e:	18fb      	adds	r3, r7, r3
    c920:	1c22      	adds	r2, r4, #0
    c922:	801a      	strh	r2, [r3, #0]
    c924:	2308      	movs	r3, #8
    c926:	18fb      	adds	r3, r7, r3
    c928:	1c02      	adds	r2, r0, #0
    c92a:	801a      	strh	r2, [r3, #0]
    c92c:	1dbb      	adds	r3, r7, #6
    c92e:	1c0a      	adds	r2, r1, #0
    c930:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    if(x0 == x1){
    c932:	230a      	movs	r3, #10
    c934:	18fa      	adds	r2, r7, r3
    c936:	1dbb      	adds	r3, r7, #6
    c938:	2100      	movs	r1, #0
    c93a:	5e52      	ldrsh	r2, [r2, r1]
    c93c:	2100      	movs	r1, #0
    c93e:	5e5b      	ldrsh	r3, [r3, r1]
    c940:	429a      	cmp	r2, r3
    c942:	d147      	bne.n	c9d4 <_ZN12Adafruit_GFX8drawLineEsssst+0xc6>
        if(y0 > y1) _swap_int16_t(y0, y1);
    c944:	2308      	movs	r3, #8
    c946:	18fb      	adds	r3, r7, r3
    c948:	2228      	movs	r2, #40	; 0x28
    c94a:	2108      	movs	r1, #8
    c94c:	1879      	adds	r1, r7, r1
    c94e:	1889      	adds	r1, r1, r2
    c950:	2200      	movs	r2, #0
    c952:	5e9a      	ldrsh	r2, [r3, r2]
    c954:	2300      	movs	r3, #0
    c956:	5ecb      	ldrsh	r3, [r1, r3]
    c958:	429a      	cmp	r2, r3
    c95a:	dd16      	ble.n	c98a <_ZN12Adafruit_GFX8drawLineEsssst+0x7c>
    c95c:	2316      	movs	r3, #22
    c95e:	18fb      	adds	r3, r7, r3
    c960:	2208      	movs	r2, #8
    c962:	18ba      	adds	r2, r7, r2
    c964:	8812      	ldrh	r2, [r2, #0]
    c966:	801a      	strh	r2, [r3, #0]
    c968:	2308      	movs	r3, #8
    c96a:	18fb      	adds	r3, r7, r3
    c96c:	2228      	movs	r2, #40	; 0x28
    c96e:	2108      	movs	r1, #8
    c970:	468c      	mov	ip, r1
    c972:	44bc      	add	ip, r7
    c974:	4462      	add	r2, ip
    c976:	8812      	ldrh	r2, [r2, #0]
    c978:	801a      	strh	r2, [r3, #0]
    c97a:	2328      	movs	r3, #40	; 0x28
    c97c:	2208      	movs	r2, #8
    c97e:	18ba      	adds	r2, r7, r2
    c980:	18d2      	adds	r2, r2, r3
    c982:	2316      	movs	r3, #22
    c984:	18fb      	adds	r3, r7, r3
    c986:	881b      	ldrh	r3, [r3, #0]
    c988:	8013      	strh	r3, [r2, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    c98a:	68fb      	ldr	r3, [r7, #12]
    c98c:	681b      	ldr	r3, [r3, #0]
    c98e:	3338      	adds	r3, #56	; 0x38
    c990:	681c      	ldr	r4, [r3, #0]
    c992:	2328      	movs	r3, #40	; 0x28
    c994:	2208      	movs	r2, #8
    c996:	4694      	mov	ip, r2
    c998:	44bc      	add	ip, r7
    c99a:	4463      	add	r3, ip
    c99c:	881a      	ldrh	r2, [r3, #0]
    c99e:	2308      	movs	r3, #8
    c9a0:	18fb      	adds	r3, r7, r3
    c9a2:	881b      	ldrh	r3, [r3, #0]
    c9a4:	1ad3      	subs	r3, r2, r3
    c9a6:	b29b      	uxth	r3, r3
    c9a8:	3301      	adds	r3, #1
    c9aa:	b29b      	uxth	r3, r3
    c9ac:	b21d      	sxth	r5, r3
    c9ae:	2308      	movs	r3, #8
    c9b0:	18fb      	adds	r3, r7, r3
    c9b2:	2200      	movs	r2, #0
    c9b4:	5e9a      	ldrsh	r2, [r3, r2]
    c9b6:	230a      	movs	r3, #10
    c9b8:	18fb      	adds	r3, r7, r3
    c9ba:	2100      	movs	r1, #0
    c9bc:	5e59      	ldrsh	r1, [r3, r1]
    c9be:	68f8      	ldr	r0, [r7, #12]
    c9c0:	232c      	movs	r3, #44	; 0x2c
    c9c2:	2608      	movs	r6, #8
    c9c4:	46b4      	mov	ip, r6
    c9c6:	44bc      	add	ip, r7
    c9c8:	4463      	add	r3, ip
    c9ca:	881b      	ldrh	r3, [r3, #0]
    c9cc:	9300      	str	r3, [sp, #0]
    c9ce:	002b      	movs	r3, r5
    c9d0:	47a0      	blx	r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
    c9d2:	e074      	b.n	cabe <_ZN12Adafruit_GFX8drawLineEsssst+0x1b0>
    } else if(y0 == y1){
    c9d4:	2308      	movs	r3, #8
    c9d6:	18fb      	adds	r3, r7, r3
    c9d8:	2228      	movs	r2, #40	; 0x28
    c9da:	2108      	movs	r1, #8
    c9dc:	1879      	adds	r1, r7, r1
    c9de:	1889      	adds	r1, r1, r2
    c9e0:	2200      	movs	r2, #0
    c9e2:	5e9a      	ldrsh	r2, [r3, r2]
    c9e4:	2300      	movs	r3, #0
    c9e6:	5ecb      	ldrsh	r3, [r1, r3]
    c9e8:	429a      	cmp	r2, r3
    c9ea:	d139      	bne.n	ca60 <_ZN12Adafruit_GFX8drawLineEsssst+0x152>
        if(x0 > x1) _swap_int16_t(x0, x1);
    c9ec:	230a      	movs	r3, #10
    c9ee:	18fa      	adds	r2, r7, r3
    c9f0:	1dbb      	adds	r3, r7, #6
    c9f2:	2100      	movs	r1, #0
    c9f4:	5e52      	ldrsh	r2, [r2, r1]
    c9f6:	2100      	movs	r1, #0
    c9f8:	5e5b      	ldrsh	r3, [r3, r1]
    c9fa:	429a      	cmp	r2, r3
    c9fc:	dd0f      	ble.n	ca1e <_ZN12Adafruit_GFX8drawLineEsssst+0x110>
    c9fe:	2314      	movs	r3, #20
    ca00:	18fb      	adds	r3, r7, r3
    ca02:	220a      	movs	r2, #10
    ca04:	18ba      	adds	r2, r7, r2
    ca06:	8812      	ldrh	r2, [r2, #0]
    ca08:	801a      	strh	r2, [r3, #0]
    ca0a:	230a      	movs	r3, #10
    ca0c:	18fb      	adds	r3, r7, r3
    ca0e:	1dba      	adds	r2, r7, #6
    ca10:	8812      	ldrh	r2, [r2, #0]
    ca12:	801a      	strh	r2, [r3, #0]
    ca14:	1dbb      	adds	r3, r7, #6
    ca16:	2214      	movs	r2, #20
    ca18:	18ba      	adds	r2, r7, r2
    ca1a:	8812      	ldrh	r2, [r2, #0]
    ca1c:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    ca1e:	68fb      	ldr	r3, [r7, #12]
    ca20:	681b      	ldr	r3, [r3, #0]
    ca22:	333c      	adds	r3, #60	; 0x3c
    ca24:	681c      	ldr	r4, [r3, #0]
    ca26:	1dbb      	adds	r3, r7, #6
    ca28:	881a      	ldrh	r2, [r3, #0]
    ca2a:	230a      	movs	r3, #10
    ca2c:	18fb      	adds	r3, r7, r3
    ca2e:	881b      	ldrh	r3, [r3, #0]
    ca30:	1ad3      	subs	r3, r2, r3
    ca32:	b29b      	uxth	r3, r3
    ca34:	3301      	adds	r3, #1
    ca36:	b29b      	uxth	r3, r3
    ca38:	b21d      	sxth	r5, r3
    ca3a:	2308      	movs	r3, #8
    ca3c:	18fb      	adds	r3, r7, r3
    ca3e:	2200      	movs	r2, #0
    ca40:	5e9a      	ldrsh	r2, [r3, r2]
    ca42:	230a      	movs	r3, #10
    ca44:	18fb      	adds	r3, r7, r3
    ca46:	2100      	movs	r1, #0
    ca48:	5e59      	ldrsh	r1, [r3, r1]
    ca4a:	68f8      	ldr	r0, [r7, #12]
    ca4c:	232c      	movs	r3, #44	; 0x2c
    ca4e:	2608      	movs	r6, #8
    ca50:	46b4      	mov	ip, r6
    ca52:	44bc      	add	ip, r7
    ca54:	4463      	add	r3, ip
    ca56:	881b      	ldrh	r3, [r3, #0]
    ca58:	9300      	str	r3, [sp, #0]
    ca5a:	002b      	movs	r3, r5
    ca5c:	47a0      	blx	r4
}
    ca5e:	e02e      	b.n	cabe <_ZN12Adafruit_GFX8drawLineEsssst+0x1b0>
        startWrite();
    ca60:	68fb      	ldr	r3, [r7, #12]
    ca62:	681b      	ldr	r3, [r3, #0]
    ca64:	3314      	adds	r3, #20
    ca66:	681b      	ldr	r3, [r3, #0]
    ca68:	68fa      	ldr	r2, [r7, #12]
    ca6a:	0010      	movs	r0, r2
    ca6c:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
    ca6e:	68fb      	ldr	r3, [r7, #12]
    ca70:	681b      	ldr	r3, [r3, #0]
    ca72:	3328      	adds	r3, #40	; 0x28
    ca74:	681c      	ldr	r4, [r3, #0]
    ca76:	1dbb      	adds	r3, r7, #6
    ca78:	2500      	movs	r5, #0
    ca7a:	5f5d      	ldrsh	r5, [r3, r5]
    ca7c:	2308      	movs	r3, #8
    ca7e:	18fb      	adds	r3, r7, r3
    ca80:	2200      	movs	r2, #0
    ca82:	5e9a      	ldrsh	r2, [r3, r2]
    ca84:	230a      	movs	r3, #10
    ca86:	18fb      	adds	r3, r7, r3
    ca88:	2100      	movs	r1, #0
    ca8a:	5e59      	ldrsh	r1, [r3, r1]
    ca8c:	68f8      	ldr	r0, [r7, #12]
    ca8e:	232c      	movs	r3, #44	; 0x2c
    ca90:	2608      	movs	r6, #8
    ca92:	46b4      	mov	ip, r6
    ca94:	44bc      	add	ip, r7
    ca96:	4463      	add	r3, ip
    ca98:	881b      	ldrh	r3, [r3, #0]
    ca9a:	9301      	str	r3, [sp, #4]
    ca9c:	2328      	movs	r3, #40	; 0x28
    ca9e:	2608      	movs	r6, #8
    caa0:	46b4      	mov	ip, r6
    caa2:	44bc      	add	ip, r7
    caa4:	4463      	add	r3, ip
    caa6:	2600      	movs	r6, #0
    caa8:	5f9b      	ldrsh	r3, [r3, r6]
    caaa:	9300      	str	r3, [sp, #0]
    caac:	002b      	movs	r3, r5
    caae:	47a0      	blx	r4
        endWrite();
    cab0:	68fb      	ldr	r3, [r7, #12]
    cab2:	681b      	ldr	r3, [r3, #0]
    cab4:	332c      	adds	r3, #44	; 0x2c
    cab6:	681b      	ldr	r3, [r3, #0]
    cab8:	68fa      	ldr	r2, [r7, #12]
    caba:	0010      	movs	r0, r2
    cabc:	4798      	blx	r3
}
    cabe:	46c0      	nop			; (mov r8, r8)
    cac0:	46bd      	mov	sp, r7
    cac2:	b007      	add	sp, #28
    cac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cac6 <_ZN12Adafruit_GFX8drawRectEsssst>:
    }
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    cac6:	b5b0      	push	{r4, r5, r7, lr}
    cac8:	b086      	sub	sp, #24
    caca:	af02      	add	r7, sp, #8
    cacc:	60f8      	str	r0, [r7, #12]
    cace:	000c      	movs	r4, r1
    cad0:	0010      	movs	r0, r2
    cad2:	0019      	movs	r1, r3
    cad4:	230a      	movs	r3, #10
    cad6:	18fb      	adds	r3, r7, r3
    cad8:	1c22      	adds	r2, r4, #0
    cada:	801a      	strh	r2, [r3, #0]
    cadc:	2308      	movs	r3, #8
    cade:	18fb      	adds	r3, r7, r3
    cae0:	1c02      	adds	r2, r0, #0
    cae2:	801a      	strh	r2, [r3, #0]
    cae4:	1dbb      	adds	r3, r7, #6
    cae6:	1c0a      	adds	r2, r1, #0
    cae8:	801a      	strh	r2, [r3, #0]
    startWrite();
    caea:	68fb      	ldr	r3, [r7, #12]
    caec:	681b      	ldr	r3, [r3, #0]
    caee:	3314      	adds	r3, #20
    caf0:	681b      	ldr	r3, [r3, #0]
    caf2:	68fa      	ldr	r2, [r7, #12]
    caf4:	0010      	movs	r0, r2
    caf6:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
    caf8:	68fb      	ldr	r3, [r7, #12]
    cafa:	681b      	ldr	r3, [r3, #0]
    cafc:	3324      	adds	r3, #36	; 0x24
    cafe:	681c      	ldr	r4, [r3, #0]
    cb00:	1dbb      	adds	r3, r7, #6
    cb02:	2500      	movs	r5, #0
    cb04:	5f5d      	ldrsh	r5, [r3, r5]
    cb06:	2308      	movs	r3, #8
    cb08:	18fb      	adds	r3, r7, r3
    cb0a:	2200      	movs	r2, #0
    cb0c:	5e9a      	ldrsh	r2, [r3, r2]
    cb0e:	230a      	movs	r3, #10
    cb10:	18fb      	adds	r3, r7, r3
    cb12:	2100      	movs	r1, #0
    cb14:	5e59      	ldrsh	r1, [r3, r1]
    cb16:	68f8      	ldr	r0, [r7, #12]
    cb18:	2324      	movs	r3, #36	; 0x24
    cb1a:	18fb      	adds	r3, r7, r3
    cb1c:	881b      	ldrh	r3, [r3, #0]
    cb1e:	9300      	str	r3, [sp, #0]
    cb20:	002b      	movs	r3, r5
    cb22:	47a0      	blx	r4
    writeFastHLine(x, y+h-1, w, color);
    cb24:	68fb      	ldr	r3, [r7, #12]
    cb26:	681b      	ldr	r3, [r3, #0]
    cb28:	3324      	adds	r3, #36	; 0x24
    cb2a:	681c      	ldr	r4, [r3, #0]
    cb2c:	2308      	movs	r3, #8
    cb2e:	18fb      	adds	r3, r7, r3
    cb30:	881a      	ldrh	r2, [r3, #0]
    cb32:	2320      	movs	r3, #32
    cb34:	18fb      	adds	r3, r7, r3
    cb36:	881b      	ldrh	r3, [r3, #0]
    cb38:	18d3      	adds	r3, r2, r3
    cb3a:	b29b      	uxth	r3, r3
    cb3c:	3b01      	subs	r3, #1
    cb3e:	b29b      	uxth	r3, r3
    cb40:	b21a      	sxth	r2, r3
    cb42:	1dbb      	adds	r3, r7, #6
    cb44:	2500      	movs	r5, #0
    cb46:	5f5d      	ldrsh	r5, [r3, r5]
    cb48:	230a      	movs	r3, #10
    cb4a:	18fb      	adds	r3, r7, r3
    cb4c:	2100      	movs	r1, #0
    cb4e:	5e59      	ldrsh	r1, [r3, r1]
    cb50:	68f8      	ldr	r0, [r7, #12]
    cb52:	2324      	movs	r3, #36	; 0x24
    cb54:	18fb      	adds	r3, r7, r3
    cb56:	881b      	ldrh	r3, [r3, #0]
    cb58:	9300      	str	r3, [sp, #0]
    cb5a:	002b      	movs	r3, r5
    cb5c:	47a0      	blx	r4
    writeFastVLine(x, y, h, color);
    cb5e:	68fb      	ldr	r3, [r7, #12]
    cb60:	681b      	ldr	r3, [r3, #0]
    cb62:	3320      	adds	r3, #32
    cb64:	681c      	ldr	r4, [r3, #0]
    cb66:	2320      	movs	r3, #32
    cb68:	18fb      	adds	r3, r7, r3
    cb6a:	2500      	movs	r5, #0
    cb6c:	5f5d      	ldrsh	r5, [r3, r5]
    cb6e:	2308      	movs	r3, #8
    cb70:	18fb      	adds	r3, r7, r3
    cb72:	2200      	movs	r2, #0
    cb74:	5e9a      	ldrsh	r2, [r3, r2]
    cb76:	230a      	movs	r3, #10
    cb78:	18fb      	adds	r3, r7, r3
    cb7a:	2100      	movs	r1, #0
    cb7c:	5e59      	ldrsh	r1, [r3, r1]
    cb7e:	68f8      	ldr	r0, [r7, #12]
    cb80:	2324      	movs	r3, #36	; 0x24
    cb82:	18fb      	adds	r3, r7, r3
    cb84:	881b      	ldrh	r3, [r3, #0]
    cb86:	9300      	str	r3, [sp, #0]
    cb88:	002b      	movs	r3, r5
    cb8a:	47a0      	blx	r4
    writeFastVLine(x+w-1, y, h, color);
    cb8c:	68fb      	ldr	r3, [r7, #12]
    cb8e:	681b      	ldr	r3, [r3, #0]
    cb90:	3320      	adds	r3, #32
    cb92:	681c      	ldr	r4, [r3, #0]
    cb94:	230a      	movs	r3, #10
    cb96:	18fb      	adds	r3, r7, r3
    cb98:	881a      	ldrh	r2, [r3, #0]
    cb9a:	1dbb      	adds	r3, r7, #6
    cb9c:	881b      	ldrh	r3, [r3, #0]
    cb9e:	18d3      	adds	r3, r2, r3
    cba0:	b29b      	uxth	r3, r3
    cba2:	3b01      	subs	r3, #1
    cba4:	b29b      	uxth	r3, r3
    cba6:	b219      	sxth	r1, r3
    cba8:	2320      	movs	r3, #32
    cbaa:	18fb      	adds	r3, r7, r3
    cbac:	2500      	movs	r5, #0
    cbae:	5f5d      	ldrsh	r5, [r3, r5]
    cbb0:	2308      	movs	r3, #8
    cbb2:	18fb      	adds	r3, r7, r3
    cbb4:	2200      	movs	r2, #0
    cbb6:	5e9a      	ldrsh	r2, [r3, r2]
    cbb8:	68f8      	ldr	r0, [r7, #12]
    cbba:	2324      	movs	r3, #36	; 0x24
    cbbc:	18fb      	adds	r3, r7, r3
    cbbe:	881b      	ldrh	r3, [r3, #0]
    cbc0:	9300      	str	r3, [sp, #0]
    cbc2:	002b      	movs	r3, r5
    cbc4:	47a0      	blx	r4
    endWrite();
    cbc6:	68fb      	ldr	r3, [r7, #12]
    cbc8:	681b      	ldr	r3, [r3, #0]
    cbca:	332c      	adds	r3, #44	; 0x2c
    cbcc:	681b      	ldr	r3, [r3, #0]
    cbce:	68fa      	ldr	r2, [r7, #12]
    cbd0:	0010      	movs	r0, r2
    cbd2:	4798      	blx	r3
}
    cbd4:	46c0      	nop			; (mov r8, r8)
    cbd6:	46bd      	mov	sp, r7
    cbd8:	b004      	add	sp, #16
    cbda:	bdb0      	pop	{r4, r5, r7, pc}

0000cbdc <_ZN12Adafruit_GFX8drawCharEsshtth>:

// TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    cbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbde:	b08f      	sub	sp, #60	; 0x3c
    cbe0:	af02      	add	r7, sp, #8
    cbe2:	60f8      	str	r0, [r7, #12]
    cbe4:	000c      	movs	r4, r1
    cbe6:	0010      	movs	r0, r2
    cbe8:	0019      	movs	r1, r3
    cbea:	230a      	movs	r3, #10
    cbec:	18fb      	adds	r3, r7, r3
    cbee:	1c22      	adds	r2, r4, #0
    cbf0:	801a      	strh	r2, [r3, #0]
    cbf2:	2308      	movs	r3, #8
    cbf4:	18fb      	adds	r3, r7, r3
    cbf6:	1c02      	adds	r2, r0, #0
    cbf8:	801a      	strh	r2, [r3, #0]
    cbfa:	1dfb      	adds	r3, r7, #7
    cbfc:	1c0a      	adds	r2, r1, #0
    cbfe:	701a      	strb	r2, [r3, #0]

    if(!gfxFont) { // 'Classic' built-in font
    cc00:	68fb      	ldr	r3, [r7, #12]
    cc02:	69db      	ldr	r3, [r3, #28]
    cc04:	2b00      	cmp	r3, #0
    cc06:	d000      	beq.n	cc0a <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
    cc08:	e1a8      	b.n	cf5c <_ZN12Adafruit_GFX8drawCharEsshtth+0x380>

        if((x >= _width)            || // Clip right
    cc0a:	68fb      	ldr	r3, [r7, #12]
    cc0c:	220c      	movs	r2, #12
    cc0e:	5e9b      	ldrsh	r3, [r3, r2]
    cc10:	220a      	movs	r2, #10
    cc12:	18ba      	adds	r2, r7, r2
    cc14:	2100      	movs	r1, #0
    cc16:	5e52      	ldrsh	r2, [r2, r1]
    cc18:	429a      	cmp	r2, r3
    cc1a:	db00      	blt.n	cc1e <_ZN12Adafruit_GFX8drawCharEsshtth+0x42>
    cc1c:	e2c7      	b.n	d1ae <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           (y >= _height)           || // Clip bottom
    cc1e:	68fb      	ldr	r3, [r7, #12]
    cc20:	220e      	movs	r2, #14
    cc22:	5e9b      	ldrsh	r3, [r3, r2]
        if((x >= _width)            || // Clip right
    cc24:	2208      	movs	r2, #8
    cc26:	18ba      	adds	r2, r7, r2
    cc28:	2100      	movs	r1, #0
    cc2a:	5e52      	ldrsh	r2, [r2, r1]
    cc2c:	429a      	cmp	r2, r3
    cc2e:	db00      	blt.n	cc32 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
    cc30:	e2bd      	b.n	d1ae <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           ((x + 6 * size - 1) < 0) || // Clip left
    cc32:	230a      	movs	r3, #10
    cc34:	18fb      	adds	r3, r7, r3
    cc36:	2100      	movs	r1, #0
    cc38:	5e59      	ldrsh	r1, [r3, r1]
    cc3a:	2350      	movs	r3, #80	; 0x50
    cc3c:	18fb      	adds	r3, r7, r3
    cc3e:	781a      	ldrb	r2, [r3, #0]
    cc40:	0013      	movs	r3, r2
    cc42:	005b      	lsls	r3, r3, #1
    cc44:	189b      	adds	r3, r3, r2
    cc46:	005b      	lsls	r3, r3, #1
    cc48:	18cb      	adds	r3, r1, r3
    cc4a:	3b01      	subs	r3, #1
           (y >= _height)           || // Clip bottom
    cc4c:	2b00      	cmp	r3, #0
    cc4e:	da00      	bge.n	cc52 <_ZN12Adafruit_GFX8drawCharEsshtth+0x76>
    cc50:	e2ad      	b.n	d1ae <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           ((y + 8 * size - 1) < 0))   // Clip top
    cc52:	2308      	movs	r3, #8
    cc54:	18fb      	adds	r3, r7, r3
    cc56:	2200      	movs	r2, #0
    cc58:	5e9a      	ldrsh	r2, [r3, r2]
    cc5a:	2350      	movs	r3, #80	; 0x50
    cc5c:	18fb      	adds	r3, r7, r3
    cc5e:	781b      	ldrb	r3, [r3, #0]
    cc60:	00db      	lsls	r3, r3, #3
    cc62:	18d3      	adds	r3, r2, r3
    cc64:	3b01      	subs	r3, #1
           ((x + 6 * size - 1) < 0) || // Clip left
    cc66:	2b00      	cmp	r3, #0
    cc68:	da00      	bge.n	cc6c <_ZN12Adafruit_GFX8drawCharEsshtth+0x90>
    cc6a:	e2a0      	b.n	d1ae <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
    cc6c:	68fb      	ldr	r3, [r7, #12]
    cc6e:	7edb      	ldrb	r3, [r3, #27]
    cc70:	2201      	movs	r2, #1
    cc72:	4053      	eors	r3, r2
    cc74:	b2db      	uxtb	r3, r3
    cc76:	2b00      	cmp	r3, #0
    cc78:	d008      	beq.n	cc8c <_ZN12Adafruit_GFX8drawCharEsshtth+0xb0>
    cc7a:	1dfb      	adds	r3, r7, #7
    cc7c:	781b      	ldrb	r3, [r3, #0]
    cc7e:	2baf      	cmp	r3, #175	; 0xaf
    cc80:	dd04      	ble.n	cc8c <_ZN12Adafruit_GFX8drawCharEsshtth+0xb0>
    cc82:	1dfb      	adds	r3, r7, #7
    cc84:	781a      	ldrb	r2, [r3, #0]
    cc86:	1dfb      	adds	r3, r7, #7
    cc88:	3201      	adds	r2, #1
    cc8a:	701a      	strb	r2, [r3, #0]

        startWrite();
    cc8c:	68fb      	ldr	r3, [r7, #12]
    cc8e:	681b      	ldr	r3, [r3, #0]
    cc90:	3314      	adds	r3, #20
    cc92:	681b      	ldr	r3, [r3, #0]
    cc94:	68fa      	ldr	r2, [r7, #12]
    cc96:	0010      	movs	r0, r2
    cc98:	4798      	blx	r3
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    cc9a:	232f      	movs	r3, #47	; 0x2f
    cc9c:	18fb      	adds	r3, r7, r3
    cc9e:	2200      	movs	r2, #0
    cca0:	701a      	strb	r2, [r3, #0]
    cca2:	232f      	movs	r3, #47	; 0x2f
    cca4:	18fb      	adds	r3, r7, r3
    cca6:	781b      	ldrb	r3, [r3, #0]
    cca8:	b25b      	sxtb	r3, r3
    ccaa:	2b04      	cmp	r3, #4
    ccac:	dd00      	ble.n	ccb0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd4>
    ccae:	e0fd      	b.n	ceac <_ZN12Adafruit_GFX8drawCharEsshtth+0x2d0>
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    ccb0:	1dfb      	adds	r3, r7, #7
    ccb2:	781a      	ldrb	r2, [r3, #0]
    ccb4:	0013      	movs	r3, r2
    ccb6:	009b      	lsls	r3, r3, #2
    ccb8:	189a      	adds	r2, r3, r2
    ccba:	232f      	movs	r3, #47	; 0x2f
    ccbc:	18fb      	adds	r3, r7, r3
    ccbe:	781b      	ldrb	r3, [r3, #0]
    ccc0:	b25b      	sxtb	r3, r3
    ccc2:	18d2      	adds	r2, r2, r3
    ccc4:	232e      	movs	r3, #46	; 0x2e
    ccc6:	18fb      	adds	r3, r7, r3
    ccc8:	49a3      	ldr	r1, [pc, #652]	; (cf58 <_ZN12Adafruit_GFX8drawCharEsshtth+0x37c>)
    ccca:	5c8a      	ldrb	r2, [r1, r2]
    cccc:	701a      	strb	r2, [r3, #0]
            for(int8_t j=0; j<8; j++, line >>= 1) {
    ccce:	232d      	movs	r3, #45	; 0x2d
    ccd0:	18fb      	adds	r3, r7, r3
    ccd2:	2200      	movs	r2, #0
    ccd4:	701a      	strb	r2, [r3, #0]
    ccd6:	232d      	movs	r3, #45	; 0x2d
    ccd8:	18fb      	adds	r3, r7, r3
    ccda:	781b      	ldrb	r3, [r3, #0]
    ccdc:	b25b      	sxtb	r3, r3
    ccde:	2b07      	cmp	r3, #7
    cce0:	dd00      	ble.n	cce4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
    cce2:	e0d8      	b.n	ce96 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2ba>
                if(line & 1) {
    cce4:	232e      	movs	r3, #46	; 0x2e
    cce6:	18fb      	adds	r3, r7, r3
    cce8:	781b      	ldrb	r3, [r3, #0]
    ccea:	2201      	movs	r2, #1
    ccec:	4013      	ands	r3, r2
    ccee:	d05c      	beq.n	cdaa <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ce>
                    if(size == 1)
    ccf0:	2350      	movs	r3, #80	; 0x50
    ccf2:	18fb      	adds	r3, r7, r3
    ccf4:	781b      	ldrb	r3, [r3, #0]
    ccf6:	2b01      	cmp	r3, #1
    ccf8:	d11f      	bne.n	cd3a <_ZN12Adafruit_GFX8drawCharEsshtth+0x15e>
                        writePixel(x+i, y+j, color);
    ccfa:	68fb      	ldr	r3, [r7, #12]
    ccfc:	681b      	ldr	r3, [r3, #0]
    ccfe:	3318      	adds	r3, #24
    cd00:	681c      	ldr	r4, [r3, #0]
    cd02:	232f      	movs	r3, #47	; 0x2f
    cd04:	18fb      	adds	r3, r7, r3
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	b25b      	sxtb	r3, r3
    cd0a:	b29a      	uxth	r2, r3
    cd0c:	230a      	movs	r3, #10
    cd0e:	18fb      	adds	r3, r7, r3
    cd10:	881b      	ldrh	r3, [r3, #0]
    cd12:	18d3      	adds	r3, r2, r3
    cd14:	b29b      	uxth	r3, r3
    cd16:	b219      	sxth	r1, r3
    cd18:	232d      	movs	r3, #45	; 0x2d
    cd1a:	18fb      	adds	r3, r7, r3
    cd1c:	781b      	ldrb	r3, [r3, #0]
    cd1e:	b25b      	sxtb	r3, r3
    cd20:	b29a      	uxth	r2, r3
    cd22:	2308      	movs	r3, #8
    cd24:	18fb      	adds	r3, r7, r3
    cd26:	881b      	ldrh	r3, [r3, #0]
    cd28:	18d3      	adds	r3, r2, r3
    cd2a:	b29b      	uxth	r3, r3
    cd2c:	b21a      	sxth	r2, r3
    cd2e:	2348      	movs	r3, #72	; 0x48
    cd30:	18fb      	adds	r3, r7, r3
    cd32:	881b      	ldrh	r3, [r3, #0]
    cd34:	68f8      	ldr	r0, [r7, #12]
    cd36:	47a0      	blx	r4
    cd38:	e09b      	b.n	ce72 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
    cd3a:	68fb      	ldr	r3, [r7, #12]
    cd3c:	681b      	ldr	r3, [r3, #0]
    cd3e:	331c      	adds	r3, #28
    cd40:	681c      	ldr	r4, [r3, #0]
    cd42:	232f      	movs	r3, #47	; 0x2f
    cd44:	18fb      	adds	r3, r7, r3
    cd46:	781b      	ldrb	r3, [r3, #0]
    cd48:	b25b      	sxtb	r3, r3
    cd4a:	b29b      	uxth	r3, r3
    cd4c:	2250      	movs	r2, #80	; 0x50
    cd4e:	18ba      	adds	r2, r7, r2
    cd50:	7812      	ldrb	r2, [r2, #0]
    cd52:	b292      	uxth	r2, r2
    cd54:	4353      	muls	r3, r2
    cd56:	b29a      	uxth	r2, r3
    cd58:	230a      	movs	r3, #10
    cd5a:	18fb      	adds	r3, r7, r3
    cd5c:	881b      	ldrh	r3, [r3, #0]
    cd5e:	18d3      	adds	r3, r2, r3
    cd60:	b29b      	uxth	r3, r3
    cd62:	b219      	sxth	r1, r3
    cd64:	232d      	movs	r3, #45	; 0x2d
    cd66:	18fb      	adds	r3, r7, r3
    cd68:	781b      	ldrb	r3, [r3, #0]
    cd6a:	b25b      	sxtb	r3, r3
    cd6c:	b29b      	uxth	r3, r3
    cd6e:	2250      	movs	r2, #80	; 0x50
    cd70:	18ba      	adds	r2, r7, r2
    cd72:	7812      	ldrb	r2, [r2, #0]
    cd74:	b292      	uxth	r2, r2
    cd76:	4353      	muls	r3, r2
    cd78:	b29a      	uxth	r2, r3
    cd7a:	2308      	movs	r3, #8
    cd7c:	18fb      	adds	r3, r7, r3
    cd7e:	881b      	ldrh	r3, [r3, #0]
    cd80:	18d3      	adds	r3, r2, r3
    cd82:	b29b      	uxth	r3, r3
    cd84:	b21d      	sxth	r5, r3
    cd86:	2350      	movs	r3, #80	; 0x50
    cd88:	18fb      	adds	r3, r7, r3
    cd8a:	781b      	ldrb	r3, [r3, #0]
    cd8c:	b21e      	sxth	r6, r3
    cd8e:	2350      	movs	r3, #80	; 0x50
    cd90:	18fb      	adds	r3, r7, r3
    cd92:	781b      	ldrb	r3, [r3, #0]
    cd94:	b21b      	sxth	r3, r3
    cd96:	68f8      	ldr	r0, [r7, #12]
    cd98:	2248      	movs	r2, #72	; 0x48
    cd9a:	18ba      	adds	r2, r7, r2
    cd9c:	8812      	ldrh	r2, [r2, #0]
    cd9e:	9201      	str	r2, [sp, #4]
    cda0:	9300      	str	r3, [sp, #0]
    cda2:	0033      	movs	r3, r6
    cda4:	002a      	movs	r2, r5
    cda6:	47a0      	blx	r4
    cda8:	e063      	b.n	ce72 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                } else if(bg != color) {
    cdaa:	234c      	movs	r3, #76	; 0x4c
    cdac:	18fb      	adds	r3, r7, r3
    cdae:	2248      	movs	r2, #72	; 0x48
    cdb0:	18b9      	adds	r1, r7, r2
    cdb2:	881a      	ldrh	r2, [r3, #0]
    cdb4:	880b      	ldrh	r3, [r1, #0]
    cdb6:	429a      	cmp	r2, r3
    cdb8:	d05b      	beq.n	ce72 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    if(size == 1)
    cdba:	2350      	movs	r3, #80	; 0x50
    cdbc:	18fb      	adds	r3, r7, r3
    cdbe:	781b      	ldrb	r3, [r3, #0]
    cdc0:	2b01      	cmp	r3, #1
    cdc2:	d11f      	bne.n	ce04 <_ZN12Adafruit_GFX8drawCharEsshtth+0x228>
                        writePixel(x+i, y+j, bg);
    cdc4:	68fb      	ldr	r3, [r7, #12]
    cdc6:	681b      	ldr	r3, [r3, #0]
    cdc8:	3318      	adds	r3, #24
    cdca:	681c      	ldr	r4, [r3, #0]
    cdcc:	232f      	movs	r3, #47	; 0x2f
    cdce:	18fb      	adds	r3, r7, r3
    cdd0:	781b      	ldrb	r3, [r3, #0]
    cdd2:	b25b      	sxtb	r3, r3
    cdd4:	b29a      	uxth	r2, r3
    cdd6:	230a      	movs	r3, #10
    cdd8:	18fb      	adds	r3, r7, r3
    cdda:	881b      	ldrh	r3, [r3, #0]
    cddc:	18d3      	adds	r3, r2, r3
    cdde:	b29b      	uxth	r3, r3
    cde0:	b219      	sxth	r1, r3
    cde2:	232d      	movs	r3, #45	; 0x2d
    cde4:	18fb      	adds	r3, r7, r3
    cde6:	781b      	ldrb	r3, [r3, #0]
    cde8:	b25b      	sxtb	r3, r3
    cdea:	b29a      	uxth	r2, r3
    cdec:	2308      	movs	r3, #8
    cdee:	18fb      	adds	r3, r7, r3
    cdf0:	881b      	ldrh	r3, [r3, #0]
    cdf2:	18d3      	adds	r3, r2, r3
    cdf4:	b29b      	uxth	r3, r3
    cdf6:	b21a      	sxth	r2, r3
    cdf8:	234c      	movs	r3, #76	; 0x4c
    cdfa:	18fb      	adds	r3, r7, r3
    cdfc:	881b      	ldrh	r3, [r3, #0]
    cdfe:	68f8      	ldr	r0, [r7, #12]
    ce00:	47a0      	blx	r4
    ce02:	e036      	b.n	ce72 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    ce04:	68fb      	ldr	r3, [r7, #12]
    ce06:	681b      	ldr	r3, [r3, #0]
    ce08:	331c      	adds	r3, #28
    ce0a:	681c      	ldr	r4, [r3, #0]
    ce0c:	232f      	movs	r3, #47	; 0x2f
    ce0e:	18fb      	adds	r3, r7, r3
    ce10:	781b      	ldrb	r3, [r3, #0]
    ce12:	b25b      	sxtb	r3, r3
    ce14:	b29b      	uxth	r3, r3
    ce16:	2250      	movs	r2, #80	; 0x50
    ce18:	18ba      	adds	r2, r7, r2
    ce1a:	7812      	ldrb	r2, [r2, #0]
    ce1c:	b292      	uxth	r2, r2
    ce1e:	4353      	muls	r3, r2
    ce20:	b29a      	uxth	r2, r3
    ce22:	230a      	movs	r3, #10
    ce24:	18fb      	adds	r3, r7, r3
    ce26:	881b      	ldrh	r3, [r3, #0]
    ce28:	18d3      	adds	r3, r2, r3
    ce2a:	b29b      	uxth	r3, r3
    ce2c:	b219      	sxth	r1, r3
    ce2e:	232d      	movs	r3, #45	; 0x2d
    ce30:	18fb      	adds	r3, r7, r3
    ce32:	781b      	ldrb	r3, [r3, #0]
    ce34:	b25b      	sxtb	r3, r3
    ce36:	b29b      	uxth	r3, r3
    ce38:	2250      	movs	r2, #80	; 0x50
    ce3a:	18ba      	adds	r2, r7, r2
    ce3c:	7812      	ldrb	r2, [r2, #0]
    ce3e:	b292      	uxth	r2, r2
    ce40:	4353      	muls	r3, r2
    ce42:	b29a      	uxth	r2, r3
    ce44:	2308      	movs	r3, #8
    ce46:	18fb      	adds	r3, r7, r3
    ce48:	881b      	ldrh	r3, [r3, #0]
    ce4a:	18d3      	adds	r3, r2, r3
    ce4c:	b29b      	uxth	r3, r3
    ce4e:	b21d      	sxth	r5, r3
    ce50:	2350      	movs	r3, #80	; 0x50
    ce52:	18fb      	adds	r3, r7, r3
    ce54:	781b      	ldrb	r3, [r3, #0]
    ce56:	b21e      	sxth	r6, r3
    ce58:	2350      	movs	r3, #80	; 0x50
    ce5a:	18fb      	adds	r3, r7, r3
    ce5c:	781b      	ldrb	r3, [r3, #0]
    ce5e:	b21b      	sxth	r3, r3
    ce60:	68f8      	ldr	r0, [r7, #12]
    ce62:	224c      	movs	r2, #76	; 0x4c
    ce64:	18ba      	adds	r2, r7, r2
    ce66:	8812      	ldrh	r2, [r2, #0]
    ce68:	9201      	str	r2, [sp, #4]
    ce6a:	9300      	str	r3, [sp, #0]
    ce6c:	0033      	movs	r3, r6
    ce6e:	002a      	movs	r2, r5
    ce70:	47a0      	blx	r4
            for(int8_t j=0; j<8; j++, line >>= 1) {
    ce72:	232d      	movs	r3, #45	; 0x2d
    ce74:	18fb      	adds	r3, r7, r3
    ce76:	781b      	ldrb	r3, [r3, #0]
    ce78:	b25b      	sxtb	r3, r3
    ce7a:	b2db      	uxtb	r3, r3
    ce7c:	3301      	adds	r3, #1
    ce7e:	b2da      	uxtb	r2, r3
    ce80:	232d      	movs	r3, #45	; 0x2d
    ce82:	18fb      	adds	r3, r7, r3
    ce84:	701a      	strb	r2, [r3, #0]
    ce86:	232e      	movs	r3, #46	; 0x2e
    ce88:	18fb      	adds	r3, r7, r3
    ce8a:	781b      	ldrb	r3, [r3, #0]
    ce8c:	105a      	asrs	r2, r3, #1
    ce8e:	232e      	movs	r3, #46	; 0x2e
    ce90:	18fb      	adds	r3, r7, r3
    ce92:	701a      	strb	r2, [r3, #0]
    ce94:	e71f      	b.n	ccd6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xfa>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    ce96:	232f      	movs	r3, #47	; 0x2f
    ce98:	18fb      	adds	r3, r7, r3
    ce9a:	781b      	ldrb	r3, [r3, #0]
    ce9c:	b25b      	sxtb	r3, r3
    ce9e:	b2db      	uxtb	r3, r3
    cea0:	3301      	adds	r3, #1
    cea2:	b2da      	uxtb	r2, r3
    cea4:	232f      	movs	r3, #47	; 0x2f
    cea6:	18fb      	adds	r3, r7, r3
    cea8:	701a      	strb	r2, [r3, #0]
    ceaa:	e6fa      	b.n	cca2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc6>
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
    ceac:	234c      	movs	r3, #76	; 0x4c
    ceae:	18fb      	adds	r3, r7, r3
    ceb0:	2248      	movs	r2, #72	; 0x48
    ceb2:	18b9      	adds	r1, r7, r2
    ceb4:	881a      	ldrh	r2, [r3, #0]
    ceb6:	880b      	ldrh	r3, [r1, #0]
    ceb8:	429a      	cmp	r2, r3
    ceba:	d044      	beq.n	cf46 <_ZN12Adafruit_GFX8drawCharEsshtth+0x36a>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
    cebc:	2350      	movs	r3, #80	; 0x50
    cebe:	18fb      	adds	r3, r7, r3
    cec0:	781b      	ldrb	r3, [r3, #0]
    cec2:	2b01      	cmp	r3, #1
    cec4:	d115      	bne.n	cef2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x316>
    cec6:	68fb      	ldr	r3, [r7, #12]
    cec8:	681b      	ldr	r3, [r3, #0]
    ceca:	3320      	adds	r3, #32
    cecc:	681c      	ldr	r4, [r3, #0]
    cece:	230a      	movs	r3, #10
    ced0:	18fb      	adds	r3, r7, r3
    ced2:	881b      	ldrh	r3, [r3, #0]
    ced4:	3305      	adds	r3, #5
    ced6:	b29b      	uxth	r3, r3
    ced8:	b219      	sxth	r1, r3
    ceda:	2308      	movs	r3, #8
    cedc:	18fb      	adds	r3, r7, r3
    cede:	2200      	movs	r2, #0
    cee0:	5e9a      	ldrsh	r2, [r3, r2]
    cee2:	68f8      	ldr	r0, [r7, #12]
    cee4:	234c      	movs	r3, #76	; 0x4c
    cee6:	18fb      	adds	r3, r7, r3
    cee8:	881b      	ldrh	r3, [r3, #0]
    ceea:	9300      	str	r3, [sp, #0]
    ceec:	2308      	movs	r3, #8
    ceee:	47a0      	blx	r4
    cef0:	e029      	b.n	cf46 <_ZN12Adafruit_GFX8drawCharEsshtth+0x36a>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
    cef2:	68fb      	ldr	r3, [r7, #12]
    cef4:	681b      	ldr	r3, [r3, #0]
    cef6:	331c      	adds	r3, #28
    cef8:	681c      	ldr	r4, [r3, #0]
    cefa:	2350      	movs	r3, #80	; 0x50
    cefc:	18fb      	adds	r3, r7, r3
    cefe:	781b      	ldrb	r3, [r3, #0]
    cf00:	b29b      	uxth	r3, r3
    cf02:	1c1a      	adds	r2, r3, #0
    cf04:	0092      	lsls	r2, r2, #2
    cf06:	18d3      	adds	r3, r2, r3
    cf08:	b29a      	uxth	r2, r3
    cf0a:	230a      	movs	r3, #10
    cf0c:	18fb      	adds	r3, r7, r3
    cf0e:	881b      	ldrh	r3, [r3, #0]
    cf10:	18d3      	adds	r3, r2, r3
    cf12:	b29b      	uxth	r3, r3
    cf14:	b219      	sxth	r1, r3
    cf16:	2350      	movs	r3, #80	; 0x50
    cf18:	18fb      	adds	r3, r7, r3
    cf1a:	781b      	ldrb	r3, [r3, #0]
    cf1c:	b21e      	sxth	r6, r3
    cf1e:	2350      	movs	r3, #80	; 0x50
    cf20:	18fb      	adds	r3, r7, r3
    cf22:	781b      	ldrb	r3, [r3, #0]
    cf24:	b29b      	uxth	r3, r3
    cf26:	00db      	lsls	r3, r3, #3
    cf28:	b29b      	uxth	r3, r3
    cf2a:	b21b      	sxth	r3, r3
    cf2c:	2208      	movs	r2, #8
    cf2e:	18ba      	adds	r2, r7, r2
    cf30:	2500      	movs	r5, #0
    cf32:	5f55      	ldrsh	r5, [r2, r5]
    cf34:	68f8      	ldr	r0, [r7, #12]
    cf36:	224c      	movs	r2, #76	; 0x4c
    cf38:	18ba      	adds	r2, r7, r2
    cf3a:	8812      	ldrh	r2, [r2, #0]
    cf3c:	9201      	str	r2, [sp, #4]
    cf3e:	9300      	str	r3, [sp, #0]
    cf40:	0033      	movs	r3, r6
    cf42:	002a      	movs	r2, r5
    cf44:	47a0      	blx	r4
        }
        endWrite();
    cf46:	68fb      	ldr	r3, [r7, #12]
    cf48:	681b      	ldr	r3, [r3, #0]
    cf4a:	332c      	adds	r3, #44	; 0x2c
    cf4c:	681b      	ldr	r3, [r3, #0]
    cf4e:	68fa      	ldr	r2, [r7, #12]
    cf50:	0010      	movs	r0, r2
    cf52:	4798      	blx	r3
    cf54:	e12c      	b.n	d1b0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d4>
    cf56:	46c0      	nop			; (mov r8, r8)
    cf58:	00013b28 	.word	0x00013b28

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    cf5c:	68fb      	ldr	r3, [r7, #12]
    cf5e:	69db      	ldr	r3, [r3, #28]
    cf60:	3308      	adds	r3, #8
    cf62:	781a      	ldrb	r2, [r3, #0]
    cf64:	1dfb      	adds	r3, r7, #7
    cf66:	1df9      	adds	r1, r7, #7
    cf68:	7809      	ldrb	r1, [r1, #0]
    cf6a:	1a8a      	subs	r2, r1, r2
    cf6c:	701a      	strb	r2, [r3, #0]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    cf6e:	1dfb      	adds	r3, r7, #7
    cf70:	781b      	ldrb	r3, [r3, #0]
    cf72:	00da      	lsls	r2, r3, #3
    cf74:	68fb      	ldr	r3, [r7, #12]
    cf76:	69db      	ldr	r3, [r3, #28]
    cf78:	3304      	adds	r3, #4
    cf7a:	681b      	ldr	r3, [r3, #0]
    cf7c:	18d3      	adds	r3, r2, r3
    cf7e:	61fb      	str	r3, [r7, #28]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    cf80:	68fb      	ldr	r3, [r7, #12]
    cf82:	69db      	ldr	r3, [r3, #28]
    cf84:	681b      	ldr	r3, [r3, #0]
    cf86:	61bb      	str	r3, [r7, #24]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    cf88:	69fa      	ldr	r2, [r7, #28]
    cf8a:	232a      	movs	r3, #42	; 0x2a
    cf8c:	18fb      	adds	r3, r7, r3
    cf8e:	8812      	ldrh	r2, [r2, #0]
    cf90:	801a      	strh	r2, [r3, #0]
        uint8_t  w  = pgm_read_byte(&glyph->width),
    cf92:	69fb      	ldr	r3, [r7, #28]
    cf94:	1c9a      	adds	r2, r3, #2
    cf96:	2317      	movs	r3, #23
    cf98:	18fb      	adds	r3, r7, r3
    cf9a:	7812      	ldrb	r2, [r2, #0]
    cf9c:	701a      	strb	r2, [r3, #0]
                 h  = pgm_read_byte(&glyph->height);
    cf9e:	69fb      	ldr	r3, [r7, #28]
    cfa0:	1cda      	adds	r2, r3, #3
    cfa2:	2316      	movs	r3, #22
    cfa4:	18fb      	adds	r3, r7, r3
    cfa6:	7812      	ldrb	r2, [r2, #0]
    cfa8:	701a      	strb	r2, [r3, #0]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
    cfaa:	69fb      	ldr	r3, [r7, #28]
    cfac:	3305      	adds	r3, #5
    cfae:	781a      	ldrb	r2, [r3, #0]
    cfb0:	2315      	movs	r3, #21
    cfb2:	18fb      	adds	r3, r7, r3
    cfb4:	701a      	strb	r2, [r3, #0]
                 yo = pgm_read_byte(&glyph->yOffset);
    cfb6:	69fb      	ldr	r3, [r7, #28]
    cfb8:	3306      	adds	r3, #6
    cfba:	781a      	ldrb	r2, [r3, #0]
    cfbc:	2314      	movs	r3, #20
    cfbe:	18fb      	adds	r3, r7, r3
    cfc0:	701a      	strb	r2, [r3, #0]
        uint8_t  xx, yy, bits = 0, bit = 0;
    cfc2:	2327      	movs	r3, #39	; 0x27
    cfc4:	18fb      	adds	r3, r7, r3
    cfc6:	2200      	movs	r2, #0
    cfc8:	701a      	strb	r2, [r3, #0]
    cfca:	2326      	movs	r3, #38	; 0x26
    cfcc:	18fb      	adds	r3, r7, r3
    cfce:	2200      	movs	r2, #0
    cfd0:	701a      	strb	r2, [r3, #0]
        int16_t  xo16 = 0, yo16 = 0;
    cfd2:	2324      	movs	r3, #36	; 0x24
    cfd4:	18fb      	adds	r3, r7, r3
    cfd6:	2200      	movs	r2, #0
    cfd8:	801a      	strh	r2, [r3, #0]
    cfda:	2322      	movs	r3, #34	; 0x22
    cfdc:	18fb      	adds	r3, r7, r3
    cfde:	2200      	movs	r2, #0
    cfe0:	801a      	strh	r2, [r3, #0]

        if(size > 1) {
    cfe2:	2350      	movs	r3, #80	; 0x50
    cfe4:	18fb      	adds	r3, r7, r3
    cfe6:	781b      	ldrb	r3, [r3, #0]
    cfe8:	2b01      	cmp	r3, #1
    cfea:	dd0d      	ble.n	d008 <_ZN12Adafruit_GFX8drawCharEsshtth+0x42c>
            xo16 = xo;
    cfec:	2324      	movs	r3, #36	; 0x24
    cfee:	18fb      	adds	r3, r7, r3
    cff0:	2215      	movs	r2, #21
    cff2:	18ba      	adds	r2, r7, r2
    cff4:	7812      	ldrb	r2, [r2, #0]
    cff6:	b252      	sxtb	r2, r2
    cff8:	801a      	strh	r2, [r3, #0]
            yo16 = yo;
    cffa:	2322      	movs	r3, #34	; 0x22
    cffc:	18fb      	adds	r3, r7, r3
    cffe:	2214      	movs	r2, #20
    d000:	18ba      	adds	r2, r7, r2
    d002:	7812      	ldrb	r2, [r2, #0]
    d004:	b252      	sxtb	r2, r2
    d006:	801a      	strh	r2, [r3, #0]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
    d008:	68fb      	ldr	r3, [r7, #12]
    d00a:	681b      	ldr	r3, [r3, #0]
    d00c:	3314      	adds	r3, #20
    d00e:	681b      	ldr	r3, [r3, #0]
    d010:	68fa      	ldr	r2, [r7, #12]
    d012:	0010      	movs	r0, r2
    d014:	4798      	blx	r3
        for(yy=0; yy<h; yy++) {
    d016:	2328      	movs	r3, #40	; 0x28
    d018:	18fb      	adds	r3, r7, r3
    d01a:	2200      	movs	r2, #0
    d01c:	701a      	strb	r2, [r3, #0]
    d01e:	2328      	movs	r3, #40	; 0x28
    d020:	18fb      	adds	r3, r7, r3
    d022:	781a      	ldrb	r2, [r3, #0]
    d024:	2316      	movs	r3, #22
    d026:	18fb      	adds	r3, r7, r3
    d028:	781b      	ldrb	r3, [r3, #0]
    d02a:	429a      	cmp	r2, r3
    d02c:	db00      	blt.n	d030 <_ZN12Adafruit_GFX8drawCharEsshtth+0x454>
    d02e:	e0b6      	b.n	d19e <_ZN12Adafruit_GFX8drawCharEsshtth+0x5c2>
            for(xx=0; xx<w; xx++) {
    d030:	2329      	movs	r3, #41	; 0x29
    d032:	18fb      	adds	r3, r7, r3
    d034:	2200      	movs	r2, #0
    d036:	701a      	strb	r2, [r3, #0]
    d038:	2329      	movs	r3, #41	; 0x29
    d03a:	18fb      	adds	r3, r7, r3
    d03c:	781a      	ldrb	r2, [r3, #0]
    d03e:	2317      	movs	r3, #23
    d040:	18fb      	adds	r3, r7, r3
    d042:	781b      	ldrb	r3, [r3, #0]
    d044:	429a      	cmp	r2, r3
    d046:	db00      	blt.n	d04a <_ZN12Adafruit_GFX8drawCharEsshtth+0x46e>
    d048:	e0a1      	b.n	d18e <_ZN12Adafruit_GFX8drawCharEsshtth+0x5b2>
                if(!(bit++ & 7)) {
    d04a:	2326      	movs	r3, #38	; 0x26
    d04c:	18fb      	adds	r3, r7, r3
    d04e:	781b      	ldrb	r3, [r3, #0]
    d050:	2226      	movs	r2, #38	; 0x26
    d052:	18ba      	adds	r2, r7, r2
    d054:	1c59      	adds	r1, r3, #1
    d056:	7011      	strb	r1, [r2, #0]
    d058:	001a      	movs	r2, r3
    d05a:	2307      	movs	r3, #7
    d05c:	4013      	ands	r3, r2
    d05e:	425a      	negs	r2, r3
    d060:	4153      	adcs	r3, r2
    d062:	b2db      	uxtb	r3, r3
    d064:	2b00      	cmp	r3, #0
    d066:	d00d      	beq.n	d084 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4a8>
                    bits = pgm_read_byte(&bitmap[bo++]);
    d068:	232a      	movs	r3, #42	; 0x2a
    d06a:	18fb      	adds	r3, r7, r3
    d06c:	881b      	ldrh	r3, [r3, #0]
    d06e:	222a      	movs	r2, #42	; 0x2a
    d070:	18ba      	adds	r2, r7, r2
    d072:	1c59      	adds	r1, r3, #1
    d074:	8011      	strh	r1, [r2, #0]
    d076:	001a      	movs	r2, r3
    d078:	69bb      	ldr	r3, [r7, #24]
    d07a:	189a      	adds	r2, r3, r2
    d07c:	2327      	movs	r3, #39	; 0x27
    d07e:	18fb      	adds	r3, r7, r3
    d080:	7812      	ldrb	r2, [r2, #0]
    d082:	701a      	strb	r2, [r3, #0]
                }
                if(bits & 0x80) {
    d084:	2327      	movs	r3, #39	; 0x27
    d086:	18fb      	adds	r3, r7, r3
    d088:	781b      	ldrb	r3, [r3, #0]
    d08a:	b25b      	sxtb	r3, r3
    d08c:	2b00      	cmp	r3, #0
    d08e:	da6f      	bge.n	d170 <_ZN12Adafruit_GFX8drawCharEsshtth+0x594>
                    if(size == 1) {
    d090:	2350      	movs	r3, #80	; 0x50
    d092:	18fb      	adds	r3, r7, r3
    d094:	781b      	ldrb	r3, [r3, #0]
    d096:	2b01      	cmp	r3, #1
    d098:	d12b      	bne.n	d0f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x516>
                        writePixel(x+xo+xx, y+yo+yy, color);
    d09a:	68fb      	ldr	r3, [r7, #12]
    d09c:	681b      	ldr	r3, [r3, #0]
    d09e:	3318      	adds	r3, #24
    d0a0:	681c      	ldr	r4, [r3, #0]
    d0a2:	2315      	movs	r3, #21
    d0a4:	18fb      	adds	r3, r7, r3
    d0a6:	781b      	ldrb	r3, [r3, #0]
    d0a8:	b25b      	sxtb	r3, r3
    d0aa:	b29a      	uxth	r2, r3
    d0ac:	230a      	movs	r3, #10
    d0ae:	18fb      	adds	r3, r7, r3
    d0b0:	881b      	ldrh	r3, [r3, #0]
    d0b2:	18d3      	adds	r3, r2, r3
    d0b4:	b29a      	uxth	r2, r3
    d0b6:	2329      	movs	r3, #41	; 0x29
    d0b8:	18fb      	adds	r3, r7, r3
    d0ba:	781b      	ldrb	r3, [r3, #0]
    d0bc:	b29b      	uxth	r3, r3
    d0be:	18d3      	adds	r3, r2, r3
    d0c0:	b29b      	uxth	r3, r3
    d0c2:	b219      	sxth	r1, r3
    d0c4:	2314      	movs	r3, #20
    d0c6:	18fb      	adds	r3, r7, r3
    d0c8:	781b      	ldrb	r3, [r3, #0]
    d0ca:	b25b      	sxtb	r3, r3
    d0cc:	b29a      	uxth	r2, r3
    d0ce:	2308      	movs	r3, #8
    d0d0:	18fb      	adds	r3, r7, r3
    d0d2:	881b      	ldrh	r3, [r3, #0]
    d0d4:	18d3      	adds	r3, r2, r3
    d0d6:	b29a      	uxth	r2, r3
    d0d8:	2328      	movs	r3, #40	; 0x28
    d0da:	18fb      	adds	r3, r7, r3
    d0dc:	781b      	ldrb	r3, [r3, #0]
    d0de:	b29b      	uxth	r3, r3
    d0e0:	18d3      	adds	r3, r2, r3
    d0e2:	b29b      	uxth	r3, r3
    d0e4:	b21a      	sxth	r2, r3
    d0e6:	2348      	movs	r3, #72	; 0x48
    d0e8:	18fb      	adds	r3, r7, r3
    d0ea:	881b      	ldrh	r3, [r3, #0]
    d0ec:	68f8      	ldr	r0, [r7, #12]
    d0ee:	47a0      	blx	r4
    d0f0:	e03e      	b.n	d170 <_ZN12Adafruit_GFX8drawCharEsshtth+0x594>
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
                          size, size, color);
    d0f2:	68fb      	ldr	r3, [r7, #12]
    d0f4:	681b      	ldr	r3, [r3, #0]
    d0f6:	331c      	adds	r3, #28
    d0f8:	681c      	ldr	r4, [r3, #0]
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    d0fa:	2324      	movs	r3, #36	; 0x24
    d0fc:	18fb      	adds	r3, r7, r3
    d0fe:	2200      	movs	r2, #0
    d100:	5e9a      	ldrsh	r2, [r3, r2]
    d102:	2329      	movs	r3, #41	; 0x29
    d104:	18fb      	adds	r3, r7, r3
    d106:	781b      	ldrb	r3, [r3, #0]
    d108:	18d3      	adds	r3, r2, r3
    d10a:	b29b      	uxth	r3, r3
    d10c:	2250      	movs	r2, #80	; 0x50
    d10e:	18ba      	adds	r2, r7, r2
    d110:	7812      	ldrb	r2, [r2, #0]
    d112:	b292      	uxth	r2, r2
    d114:	4353      	muls	r3, r2
    d116:	b29a      	uxth	r2, r3
    d118:	230a      	movs	r3, #10
    d11a:	18fb      	adds	r3, r7, r3
    d11c:	881b      	ldrh	r3, [r3, #0]
    d11e:	18d3      	adds	r3, r2, r3
    d120:	b29b      	uxth	r3, r3
    d122:	b219      	sxth	r1, r3
    d124:	2322      	movs	r3, #34	; 0x22
    d126:	18fb      	adds	r3, r7, r3
    d128:	2200      	movs	r2, #0
    d12a:	5e9a      	ldrsh	r2, [r3, r2]
    d12c:	2328      	movs	r3, #40	; 0x28
    d12e:	18fb      	adds	r3, r7, r3
    d130:	781b      	ldrb	r3, [r3, #0]
    d132:	18d3      	adds	r3, r2, r3
    d134:	b29b      	uxth	r3, r3
    d136:	2250      	movs	r2, #80	; 0x50
    d138:	18ba      	adds	r2, r7, r2
    d13a:	7812      	ldrb	r2, [r2, #0]
    d13c:	b292      	uxth	r2, r2
    d13e:	4353      	muls	r3, r2
    d140:	b29a      	uxth	r2, r3
    d142:	2308      	movs	r3, #8
    d144:	18fb      	adds	r3, r7, r3
    d146:	881b      	ldrh	r3, [r3, #0]
    d148:	18d3      	adds	r3, r2, r3
    d14a:	b29b      	uxth	r3, r3
    d14c:	b21d      	sxth	r5, r3
    d14e:	2350      	movs	r3, #80	; 0x50
    d150:	18fb      	adds	r3, r7, r3
    d152:	781b      	ldrb	r3, [r3, #0]
    d154:	b21e      	sxth	r6, r3
    d156:	2350      	movs	r3, #80	; 0x50
    d158:	18fb      	adds	r3, r7, r3
    d15a:	781b      	ldrb	r3, [r3, #0]
    d15c:	b21b      	sxth	r3, r3
                          size, size, color);
    d15e:	68f8      	ldr	r0, [r7, #12]
    d160:	2248      	movs	r2, #72	; 0x48
    d162:	18ba      	adds	r2, r7, r2
    d164:	8812      	ldrh	r2, [r2, #0]
    d166:	9201      	str	r2, [sp, #4]
    d168:	9300      	str	r3, [sp, #0]
    d16a:	0033      	movs	r3, r6
    d16c:	002a      	movs	r2, r5
    d16e:	47a0      	blx	r4
                    }
                }
                bits <<= 1;
    d170:	2327      	movs	r3, #39	; 0x27
    d172:	18fa      	adds	r2, r7, r3
    d174:	2327      	movs	r3, #39	; 0x27
    d176:	18fb      	adds	r3, r7, r3
    d178:	781b      	ldrb	r3, [r3, #0]
    d17a:	18db      	adds	r3, r3, r3
    d17c:	7013      	strb	r3, [r2, #0]
            for(xx=0; xx<w; xx++) {
    d17e:	2329      	movs	r3, #41	; 0x29
    d180:	18fb      	adds	r3, r7, r3
    d182:	781a      	ldrb	r2, [r3, #0]
    d184:	2329      	movs	r3, #41	; 0x29
    d186:	18fb      	adds	r3, r7, r3
    d188:	3201      	adds	r2, #1
    d18a:	701a      	strb	r2, [r3, #0]
    d18c:	e754      	b.n	d038 <_ZN12Adafruit_GFX8drawCharEsshtth+0x45c>
        for(yy=0; yy<h; yy++) {
    d18e:	2328      	movs	r3, #40	; 0x28
    d190:	18fb      	adds	r3, r7, r3
    d192:	781a      	ldrb	r2, [r3, #0]
    d194:	2328      	movs	r3, #40	; 0x28
    d196:	18fb      	adds	r3, r7, r3
    d198:	3201      	adds	r2, #1
    d19a:	701a      	strb	r2, [r3, #0]
    d19c:	e73f      	b.n	d01e <_ZN12Adafruit_GFX8drawCharEsshtth+0x442>
            }
        }
        endWrite();
    d19e:	68fb      	ldr	r3, [r7, #12]
    d1a0:	681b      	ldr	r3, [r3, #0]
    d1a2:	332c      	adds	r3, #44	; 0x2c
    d1a4:	681b      	ldr	r3, [r3, #0]
    d1a6:	68fa      	ldr	r2, [r7, #12]
    d1a8:	0010      	movs	r0, r2
    d1aa:	4798      	blx	r3
    d1ac:	e000      	b.n	d1b0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d4>
            return;
    d1ae:	46c0      	nop			; (mov r8, r8)

    } // End classic vs custom font
}
    d1b0:	46bd      	mov	sp, r7
    d1b2:	b00d      	add	sp, #52	; 0x34
    d1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1b6:	46c0      	nop			; (mov r8, r8)

0000d1b8 <_ZN12Adafruit_GFX5writeEh>:

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
    d1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1ba:	b08b      	sub	sp, #44	; 0x2c
    d1bc:	af04      	add	r7, sp, #16
    d1be:	6078      	str	r0, [r7, #4]
    d1c0:	000a      	movs	r2, r1
    d1c2:	1cfb      	adds	r3, r7, #3
    d1c4:	701a      	strb	r2, [r3, #0]
#else
void Adafruit_GFX::write(uint8_t c) {
#endif
    if(!gfxFont) { // 'Classic' built-in font
    d1c6:	687b      	ldr	r3, [r7, #4]
    d1c8:	69db      	ldr	r3, [r3, #28]
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	d16a      	bne.n	d2a4 <_ZN12Adafruit_GFX5writeEh+0xec>

        if(c == '\n') {                        // Newline?
    d1ce:	1cfb      	adds	r3, r7, #3
    d1d0:	781b      	ldrb	r3, [r3, #0]
    d1d2:	2b0a      	cmp	r3, #10
    d1d4:	d111      	bne.n	d1fa <_ZN12Adafruit_GFX5writeEh+0x42>
            cursor_x  = 0;                     // Reset x to zero,
    d1d6:	687b      	ldr	r3, [r7, #4]
    d1d8:	2200      	movs	r2, #0
    d1da:	821a      	strh	r2, [r3, #16]
            cursor_y += textsize * 8;          // advance y one line
    d1dc:	687b      	ldr	r3, [r7, #4]
    d1de:	2212      	movs	r2, #18
    d1e0:	5e9b      	ldrsh	r3, [r3, r2]
    d1e2:	b29a      	uxth	r2, r3
    d1e4:	687b      	ldr	r3, [r7, #4]
    d1e6:	7e1b      	ldrb	r3, [r3, #24]
    d1e8:	b29b      	uxth	r3, r3
    d1ea:	00db      	lsls	r3, r3, #3
    d1ec:	b29b      	uxth	r3, r3
    d1ee:	18d3      	adds	r3, r2, r3
    d1f0:	b29b      	uxth	r3, r3
    d1f2:	b21a      	sxth	r2, r3
    d1f4:	687b      	ldr	r3, [r7, #4]
    d1f6:	825a      	strh	r2, [r3, #18]
    d1f8:	e110      	b.n	d41c <_ZN12Adafruit_GFX5writeEh+0x264>
        } else if(c != '\r') {                 // Ignore carriage returns
    d1fa:	1cfb      	adds	r3, r7, #3
    d1fc:	781b      	ldrb	r3, [r3, #0]
    d1fe:	2b0d      	cmp	r3, #13
    d200:	d100      	bne.n	d204 <_ZN12Adafruit_GFX5writeEh+0x4c>
    d202:	e10b      	b.n	d41c <_ZN12Adafruit_GFX5writeEh+0x264>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
    d204:	687b      	ldr	r3, [r7, #4]
    d206:	7e9b      	ldrb	r3, [r3, #26]
    d208:	2b00      	cmp	r3, #0
    d20a:	d021      	beq.n	d250 <_ZN12Adafruit_GFX5writeEh+0x98>
    d20c:	687b      	ldr	r3, [r7, #4]
    d20e:	2210      	movs	r2, #16
    d210:	5e9b      	ldrsh	r3, [r3, r2]
    d212:	0019      	movs	r1, r3
    d214:	687b      	ldr	r3, [r7, #4]
    d216:	7e1b      	ldrb	r3, [r3, #24]
    d218:	001a      	movs	r2, r3
    d21a:	0013      	movs	r3, r2
    d21c:	005b      	lsls	r3, r3, #1
    d21e:	189b      	adds	r3, r3, r2
    d220:	005b      	lsls	r3, r3, #1
    d222:	18cb      	adds	r3, r1, r3
    d224:	687a      	ldr	r2, [r7, #4]
    d226:	210c      	movs	r1, #12
    d228:	5e52      	ldrsh	r2, [r2, r1]
    d22a:	4293      	cmp	r3, r2
    d22c:	dd10      	ble.n	d250 <_ZN12Adafruit_GFX5writeEh+0x98>
                cursor_x  = 0;                 // Reset x to zero,
    d22e:	687b      	ldr	r3, [r7, #4]
    d230:	2200      	movs	r2, #0
    d232:	821a      	strh	r2, [r3, #16]
                cursor_y += textsize * 8;      // advance y one line
    d234:	687b      	ldr	r3, [r7, #4]
    d236:	2212      	movs	r2, #18
    d238:	5e9b      	ldrsh	r3, [r3, r2]
    d23a:	b29a      	uxth	r2, r3
    d23c:	687b      	ldr	r3, [r7, #4]
    d23e:	7e1b      	ldrb	r3, [r3, #24]
    d240:	b29b      	uxth	r3, r3
    d242:	00db      	lsls	r3, r3, #3
    d244:	b29b      	uxth	r3, r3
    d246:	18d3      	adds	r3, r2, r3
    d248:	b29b      	uxth	r3, r3
    d24a:	b21a      	sxth	r2, r3
    d24c:	687b      	ldr	r3, [r7, #4]
    d24e:	825a      	strh	r2, [r3, #18]
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    d250:	687b      	ldr	r3, [r7, #4]
    d252:	2410      	movs	r4, #16
    d254:	5f1c      	ldrsh	r4, [r3, r4]
    d256:	687b      	ldr	r3, [r7, #4]
    d258:	2512      	movs	r5, #18
    d25a:	5f5d      	ldrsh	r5, [r3, r5]
    d25c:	687b      	ldr	r3, [r7, #4]
    d25e:	8a9b      	ldrh	r3, [r3, #20]
    d260:	687a      	ldr	r2, [r7, #4]
    d262:	8ad2      	ldrh	r2, [r2, #22]
    d264:	6879      	ldr	r1, [r7, #4]
    d266:	7e09      	ldrb	r1, [r1, #24]
    d268:	1cf8      	adds	r0, r7, #3
    d26a:	7806      	ldrb	r6, [r0, #0]
    d26c:	6878      	ldr	r0, [r7, #4]
    d26e:	9102      	str	r1, [sp, #8]
    d270:	9201      	str	r2, [sp, #4]
    d272:	9300      	str	r3, [sp, #0]
    d274:	0033      	movs	r3, r6
    d276:	002a      	movs	r2, r5
    d278:	0021      	movs	r1, r4
    d27a:	f7ff fcaf 	bl	cbdc <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
    d27e:	687b      	ldr	r3, [r7, #4]
    d280:	2210      	movs	r2, #16
    d282:	5e9b      	ldrsh	r3, [r3, r2]
    d284:	b29a      	uxth	r2, r3
    d286:	687b      	ldr	r3, [r7, #4]
    d288:	7e1b      	ldrb	r3, [r3, #24]
    d28a:	b29b      	uxth	r3, r3
    d28c:	1c19      	adds	r1, r3, #0
    d28e:	1c0b      	adds	r3, r1, #0
    d290:	18db      	adds	r3, r3, r3
    d292:	185b      	adds	r3, r3, r1
    d294:	18db      	adds	r3, r3, r3
    d296:	b29b      	uxth	r3, r3
    d298:	18d3      	adds	r3, r2, r3
    d29a:	b29b      	uxth	r3, r3
    d29c:	b21a      	sxth	r2, r3
    d29e:	687b      	ldr	r3, [r7, #4]
    d2a0:	821a      	strh	r2, [r3, #16]
    d2a2:	e0bb      	b.n	d41c <_ZN12Adafruit_GFX5writeEh+0x264>
        }

    } else { // Custom font

        if(c == '\n') {
    d2a4:	1cfb      	adds	r3, r7, #3
    d2a6:	781b      	ldrb	r3, [r3, #0]
    d2a8:	2b0a      	cmp	r3, #10
    d2aa:	d116      	bne.n	d2da <_ZN12Adafruit_GFX5writeEh+0x122>
            cursor_x  = 0;
    d2ac:	687b      	ldr	r3, [r7, #4]
    d2ae:	2200      	movs	r2, #0
    d2b0:	821a      	strh	r2, [r3, #16]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d2b2:	687b      	ldr	r3, [r7, #4]
    d2b4:	2212      	movs	r2, #18
    d2b6:	5e9b      	ldrsh	r3, [r3, r2]
    d2b8:	b29a      	uxth	r2, r3
            cursor_y += (int16_t)textsize *
    d2ba:	687b      	ldr	r3, [r7, #4]
    d2bc:	7e1b      	ldrb	r3, [r3, #24]
    d2be:	b299      	uxth	r1, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d2c0:	687b      	ldr	r3, [r7, #4]
    d2c2:	69db      	ldr	r3, [r3, #28]
    d2c4:	330a      	adds	r3, #10
    d2c6:	781b      	ldrb	r3, [r3, #0]
    d2c8:	b29b      	uxth	r3, r3
            cursor_y += (int16_t)textsize *
    d2ca:	434b      	muls	r3, r1
    d2cc:	b29b      	uxth	r3, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d2ce:	18d3      	adds	r3, r2, r3
    d2d0:	b29b      	uxth	r3, r3
    d2d2:	b21a      	sxth	r2, r3
            cursor_y += (int16_t)textsize *
    d2d4:	687b      	ldr	r3, [r7, #4]
    d2d6:	825a      	strh	r2, [r3, #18]
    d2d8:	e0a0      	b.n	d41c <_ZN12Adafruit_GFX5writeEh+0x264>
        } else if(c != '\r') {
    d2da:	1cfb      	adds	r3, r7, #3
    d2dc:	781b      	ldrb	r3, [r3, #0]
    d2de:	2b0d      	cmp	r3, #13
    d2e0:	d100      	bne.n	d2e4 <_ZN12Adafruit_GFX5writeEh+0x12c>
    d2e2:	e09b      	b.n	d41c <_ZN12Adafruit_GFX5writeEh+0x264>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    d2e4:	687b      	ldr	r3, [r7, #4]
    d2e6:	69db      	ldr	r3, [r3, #28]
    d2e8:	3308      	adds	r3, #8
    d2ea:	001a      	movs	r2, r3
    d2ec:	2317      	movs	r3, #23
    d2ee:	18fb      	adds	r3, r7, r3
    d2f0:	7812      	ldrb	r2, [r2, #0]
    d2f2:	701a      	strb	r2, [r3, #0]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    d2f4:	1cfb      	adds	r3, r7, #3
    d2f6:	781a      	ldrb	r2, [r3, #0]
    d2f8:	2317      	movs	r3, #23
    d2fa:	18fb      	adds	r3, r7, r3
    d2fc:	781b      	ldrb	r3, [r3, #0]
    d2fe:	429a      	cmp	r2, r3
    d300:	da00      	bge.n	d304 <_ZN12Adafruit_GFX5writeEh+0x14c>
    d302:	e08b      	b.n	d41c <_ZN12Adafruit_GFX5writeEh+0x264>
    d304:	1cfb      	adds	r3, r7, #3
    d306:	781a      	ldrb	r2, [r3, #0]
    d308:	687b      	ldr	r3, [r7, #4]
    d30a:	69db      	ldr	r3, [r3, #28]
    d30c:	3309      	adds	r3, #9
    d30e:	781b      	ldrb	r3, [r3, #0]
    d310:	429a      	cmp	r2, r3
    d312:	dd00      	ble.n	d316 <_ZN12Adafruit_GFX5writeEh+0x15e>
    d314:	e082      	b.n	d41c <_ZN12Adafruit_GFX5writeEh+0x264>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
    d316:	1cfb      	adds	r3, r7, #3
    d318:	781a      	ldrb	r2, [r3, #0]
    d31a:	2317      	movs	r3, #23
    d31c:	18fb      	adds	r3, r7, r3
    d31e:	781b      	ldrb	r3, [r3, #0]
    d320:	1ad3      	subs	r3, r2, r3
    d322:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
    d324:	687b      	ldr	r3, [r7, #4]
    d326:	69db      	ldr	r3, [r3, #28]
    d328:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
    d32a:	681b      	ldr	r3, [r3, #0]
    d32c:	18d3      	adds	r3, r2, r3
    d32e:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
    d330:	693b      	ldr	r3, [r7, #16]
    d332:	1c9a      	adds	r2, r3, #2
    d334:	230f      	movs	r3, #15
    d336:	18fb      	adds	r3, r7, r3
    d338:	7812      	ldrb	r2, [r2, #0]
    d33a:	701a      	strb	r2, [r3, #0]
                          h     = pgm_read_byte(&glyph->height);
    d33c:	693b      	ldr	r3, [r7, #16]
    d33e:	1cda      	adds	r2, r3, #3
    d340:	230e      	movs	r3, #14
    d342:	18fb      	adds	r3, r7, r3
    d344:	7812      	ldrb	r2, [r2, #0]
    d346:	701a      	strb	r2, [r3, #0]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    d348:	230f      	movs	r3, #15
    d34a:	18fb      	adds	r3, r7, r3
    d34c:	781b      	ldrb	r3, [r3, #0]
    d34e:	2b00      	cmp	r3, #0
    d350:	dd52      	ble.n	d3f8 <_ZN12Adafruit_GFX5writeEh+0x240>
    d352:	230e      	movs	r3, #14
    d354:	18fb      	adds	r3, r7, r3
    d356:	781b      	ldrb	r3, [r3, #0]
    d358:	2b00      	cmp	r3, #0
    d35a:	dd4d      	ble.n	d3f8 <_ZN12Adafruit_GFX5writeEh+0x240>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    d35c:	693b      	ldr	r3, [r7, #16]
    d35e:	3305      	adds	r3, #5
    d360:	781b      	ldrb	r3, [r3, #0]
    d362:	b25a      	sxtb	r2, r3
    d364:	230c      	movs	r3, #12
    d366:	18fb      	adds	r3, r7, r3
    d368:	801a      	strh	r2, [r3, #0]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
    d36a:	687b      	ldr	r3, [r7, #4]
    d36c:	7e9b      	ldrb	r3, [r3, #26]
    d36e:	2b00      	cmp	r3, #0
    d370:	d02b      	beq.n	d3ca <_ZN12Adafruit_GFX5writeEh+0x212>
    d372:	687b      	ldr	r3, [r7, #4]
    d374:	2210      	movs	r2, #16
    d376:	5e9b      	ldrsh	r3, [r3, r2]
    d378:	0019      	movs	r1, r3
    d37a:	687b      	ldr	r3, [r7, #4]
    d37c:	7e1b      	ldrb	r3, [r3, #24]
    d37e:	0018      	movs	r0, r3
    d380:	230c      	movs	r3, #12
    d382:	18fb      	adds	r3, r7, r3
    d384:	2200      	movs	r2, #0
    d386:	5e9a      	ldrsh	r2, [r3, r2]
    d388:	230f      	movs	r3, #15
    d38a:	18fb      	adds	r3, r7, r3
    d38c:	781b      	ldrb	r3, [r3, #0]
    d38e:	18d3      	adds	r3, r2, r3
    d390:	4343      	muls	r3, r0
    d392:	18cb      	adds	r3, r1, r3
    d394:	687a      	ldr	r2, [r7, #4]
    d396:	210c      	movs	r1, #12
    d398:	5e52      	ldrsh	r2, [r2, r1]
    d39a:	4293      	cmp	r3, r2
    d39c:	dd15      	ble.n	d3ca <_ZN12Adafruit_GFX5writeEh+0x212>
                        cursor_x  = 0;
    d39e:	687b      	ldr	r3, [r7, #4]
    d3a0:	2200      	movs	r2, #0
    d3a2:	821a      	strh	r2, [r3, #16]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d3a4:	687b      	ldr	r3, [r7, #4]
    d3a6:	2212      	movs	r2, #18
    d3a8:	5e9b      	ldrsh	r3, [r3, r2]
    d3aa:	b29a      	uxth	r2, r3
                        cursor_y += (int16_t)textsize *
    d3ac:	687b      	ldr	r3, [r7, #4]
    d3ae:	7e1b      	ldrb	r3, [r3, #24]
    d3b0:	b299      	uxth	r1, r3
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d3b2:	687b      	ldr	r3, [r7, #4]
    d3b4:	69db      	ldr	r3, [r3, #28]
    d3b6:	330a      	adds	r3, #10
    d3b8:	781b      	ldrb	r3, [r3, #0]
    d3ba:	b29b      	uxth	r3, r3
                        cursor_y += (int16_t)textsize *
    d3bc:	434b      	muls	r3, r1
    d3be:	b29b      	uxth	r3, r3
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d3c0:	18d3      	adds	r3, r2, r3
    d3c2:	b29b      	uxth	r3, r3
    d3c4:	b21a      	sxth	r2, r3
                        cursor_y += (int16_t)textsize *
    d3c6:	687b      	ldr	r3, [r7, #4]
    d3c8:	825a      	strh	r2, [r3, #18]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    d3ca:	687b      	ldr	r3, [r7, #4]
    d3cc:	2410      	movs	r4, #16
    d3ce:	5f1c      	ldrsh	r4, [r3, r4]
    d3d0:	687b      	ldr	r3, [r7, #4]
    d3d2:	2512      	movs	r5, #18
    d3d4:	5f5d      	ldrsh	r5, [r3, r5]
    d3d6:	687b      	ldr	r3, [r7, #4]
    d3d8:	8a9b      	ldrh	r3, [r3, #20]
    d3da:	687a      	ldr	r2, [r7, #4]
    d3dc:	8ad2      	ldrh	r2, [r2, #22]
    d3de:	6879      	ldr	r1, [r7, #4]
    d3e0:	7e09      	ldrb	r1, [r1, #24]
    d3e2:	1cf8      	adds	r0, r7, #3
    d3e4:	7806      	ldrb	r6, [r0, #0]
    d3e6:	6878      	ldr	r0, [r7, #4]
    d3e8:	9102      	str	r1, [sp, #8]
    d3ea:	9201      	str	r2, [sp, #4]
    d3ec:	9300      	str	r3, [sp, #0]
    d3ee:	0033      	movs	r3, r6
    d3f0:	002a      	movs	r2, r5
    d3f2:	0021      	movs	r1, r4
    d3f4:	f7ff fbf2 	bl	cbdc <_ZN12Adafruit_GFX8drawCharEsshtth>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    d3f8:	687b      	ldr	r3, [r7, #4]
    d3fa:	2210      	movs	r2, #16
    d3fc:	5e9b      	ldrsh	r3, [r3, r2]
    d3fe:	b29a      	uxth	r2, r3
    d400:	693b      	ldr	r3, [r7, #16]
    d402:	3304      	adds	r3, #4
    d404:	781b      	ldrb	r3, [r3, #0]
    d406:	b29b      	uxth	r3, r3
    d408:	6879      	ldr	r1, [r7, #4]
    d40a:	7e09      	ldrb	r1, [r1, #24]
    d40c:	b289      	uxth	r1, r1
    d40e:	434b      	muls	r3, r1
    d410:	b29b      	uxth	r3, r3
    d412:	18d3      	adds	r3, r2, r3
    d414:	b29b      	uxth	r3, r3
    d416:	b21a      	sxth	r2, r3
    d418:	687b      	ldr	r3, [r7, #4]
    d41a:	821a      	strh	r2, [r3, #16]
            }
        }

    }
#if ARDUINO >= 100
    return 1;
    d41c:	2301      	movs	r3, #1
#endif
}
    d41e:	0018      	movs	r0, r3
    d420:	46bd      	mov	sp, r7
    d422:	b007      	add	sp, #28
    d424:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d426 <_ZN12Adafruit_GFX11setRotationEh>:

uint8_t Adafruit_GFX::getRotation(void) const {
    return rotation;
}

void Adafruit_GFX::setRotation(uint8_t x) {
    d426:	b580      	push	{r7, lr}
    d428:	b082      	sub	sp, #8
    d42a:	af00      	add	r7, sp, #0
    d42c:	6078      	str	r0, [r7, #4]
    d42e:	000a      	movs	r2, r1
    d430:	1cfb      	adds	r3, r7, #3
    d432:	701a      	strb	r2, [r3, #0]
    rotation = (x & 3);
    d434:	1cfb      	adds	r3, r7, #3
    d436:	781b      	ldrb	r3, [r3, #0]
    d438:	2203      	movs	r2, #3
    d43a:	4013      	ands	r3, r2
    d43c:	b2da      	uxtb	r2, r3
    d43e:	687b      	ldr	r3, [r7, #4]
    d440:	765a      	strb	r2, [r3, #25]
    switch(rotation) {
    d442:	687b      	ldr	r3, [r7, #4]
    d444:	7e5b      	ldrb	r3, [r3, #25]
    d446:	2b01      	cmp	r3, #1
    d448:	d013      	beq.n	d472 <_ZN12Adafruit_GFX11setRotationEh+0x4c>
    d44a:	dc02      	bgt.n	d452 <_ZN12Adafruit_GFX11setRotationEh+0x2c>
    d44c:	2b00      	cmp	r3, #0
    d44e:	d005      	beq.n	d45c <_ZN12Adafruit_GFX11setRotationEh+0x36>
        case 3:
            _width  = HEIGHT;
            _height = WIDTH;
            break;
    }
}
    d450:	e01a      	b.n	d488 <_ZN12Adafruit_GFX11setRotationEh+0x62>
    switch(rotation) {
    d452:	2b02      	cmp	r3, #2
    d454:	d002      	beq.n	d45c <_ZN12Adafruit_GFX11setRotationEh+0x36>
    d456:	2b03      	cmp	r3, #3
    d458:	d00b      	beq.n	d472 <_ZN12Adafruit_GFX11setRotationEh+0x4c>
}
    d45a:	e015      	b.n	d488 <_ZN12Adafruit_GFX11setRotationEh+0x62>
            _width  = WIDTH;
    d45c:	687b      	ldr	r3, [r7, #4]
    d45e:	2208      	movs	r2, #8
    d460:	5e9a      	ldrsh	r2, [r3, r2]
    d462:	687b      	ldr	r3, [r7, #4]
    d464:	819a      	strh	r2, [r3, #12]
            _height = HEIGHT;
    d466:	687b      	ldr	r3, [r7, #4]
    d468:	220a      	movs	r2, #10
    d46a:	5e9a      	ldrsh	r2, [r3, r2]
    d46c:	687b      	ldr	r3, [r7, #4]
    d46e:	81da      	strh	r2, [r3, #14]
            break;
    d470:	e00a      	b.n	d488 <_ZN12Adafruit_GFX11setRotationEh+0x62>
            _width  = HEIGHT;
    d472:	687b      	ldr	r3, [r7, #4]
    d474:	220a      	movs	r2, #10
    d476:	5e9a      	ldrsh	r2, [r3, r2]
    d478:	687b      	ldr	r3, [r7, #4]
    d47a:	819a      	strh	r2, [r3, #12]
            _height = WIDTH;
    d47c:	687b      	ldr	r3, [r7, #4]
    d47e:	2208      	movs	r2, #8
    d480:	5e9a      	ldrsh	r2, [r3, r2]
    d482:	687b      	ldr	r3, [r7, #4]
    d484:	81da      	strh	r2, [r3, #14]
            break;
    d486:	46c0      	nop			; (mov r8, r8)
}
    d488:	46c0      	nop			; (mov r8, r8)
    d48a:	46bd      	mov	sp, r7
    d48c:	b002      	add	sp, #8
    d48e:	bd80      	pop	{r7, pc}

0000d490 <_ZNK12Adafruit_GFX5widthEv>:
        *h  = maxy - miny + 1;
    }
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
    d490:	b580      	push	{r7, lr}
    d492:	b082      	sub	sp, #8
    d494:	af00      	add	r7, sp, #0
    d496:	6078      	str	r0, [r7, #4]
    return _width;
    d498:	687b      	ldr	r3, [r7, #4]
    d49a:	220c      	movs	r2, #12
    d49c:	5e9b      	ldrsh	r3, [r3, r2]
}
    d49e:	0018      	movs	r0, r3
    d4a0:	46bd      	mov	sp, r7
    d4a2:	b002      	add	sp, #8
    d4a4:	bd80      	pop	{r7, pc}

0000d4a6 <_ZNK12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) const {
    d4a6:	b580      	push	{r7, lr}
    d4a8:	b082      	sub	sp, #8
    d4aa:	af00      	add	r7, sp, #0
    d4ac:	6078      	str	r0, [r7, #4]
    return _height;
    d4ae:	687b      	ldr	r3, [r7, #4]
    d4b0:	220e      	movs	r2, #14
    d4b2:	5e9b      	ldrsh	r3, [r3, r2]
}
    d4b4:	0018      	movs	r0, r3
    d4b6:	46bd      	mov	sp, r7
    d4b8:	b002      	add	sp, #8
    d4ba:	bd80      	pop	{r7, pc}

0000d4bc <_ZN12Adafruit_GFX13invertDisplayEb>:

void Adafruit_GFX::invertDisplay(boolean i) {
    d4bc:	b580      	push	{r7, lr}
    d4be:	b082      	sub	sp, #8
    d4c0:	af00      	add	r7, sp, #0
    d4c2:	6078      	str	r0, [r7, #4]
    d4c4:	000a      	movs	r2, r1
    d4c6:	1cfb      	adds	r3, r7, #3
    d4c8:	701a      	strb	r2, [r3, #0]
    // Do nothing, must be subclassed if supported by hardware
}
    d4ca:	46c0      	nop			; (mov r8, r8)
    d4cc:	46bd      	mov	sp, r7
    d4ce:	b002      	add	sp, #8
    d4d0:	bd80      	pop	{r7, pc}

0000d4d2 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    d4d2:	b580      	push	{r7, lr}
    d4d4:	af00      	add	r7, sp, #0
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  while (1)
    d4d6:	e7fe      	b.n	d4d6 <__cxa_pure_virtual+0x4>

0000d4d8 <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
    d4d8:	b580      	push	{r7, lr}
    d4da:	b084      	sub	sp, #16
    d4dc:	af00      	add	r7, sp, #0
    d4de:	60f8      	str	r0, [r7, #12]
    d4e0:	60b9      	str	r1, [r7, #8]
    d4e2:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
    d4e4:	687a      	ldr	r2, [r7, #4]
    d4e6:	68b9      	ldr	r1, [r7, #8]
    d4e8:	68fb      	ldr	r3, [r7, #12]
    d4ea:	0018      	movs	r0, r3
    d4ec:	f000 f805 	bl	d4fa <ltoa>
    d4f0:	0003      	movs	r3, r0
        }
    d4f2:	0018      	movs	r0, r3
    d4f4:	46bd      	mov	sp, r7
    d4f6:	b004      	add	sp, #16
    d4f8:	bd80      	pop	{r7, pc}

0000d4fa <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
    d4fa:	b580      	push	{r7, lr}
    d4fc:	b092      	sub	sp, #72	; 0x48
    d4fe:	af00      	add	r7, sp, #0
    d500:	60f8      	str	r0, [r7, #12]
    d502:	60b9      	str	r1, [r7, #8]
    d504:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    d506:	2310      	movs	r3, #16
    d508:	18fb      	adds	r3, r7, r3
    d50a:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
    d50c:	68bb      	ldr	r3, [r7, #8]
    d50e:	2b00      	cmp	r3, #0
    d510:	d101      	bne.n	d516 <ltoa+0x1c>
            {
                return 0;
    d512:	2300      	movs	r3, #0
    d514:	e063      	b.n	d5de <ltoa+0xe4>
            }

            if (radix > 36 || radix <= 1)
    d516:	687b      	ldr	r3, [r7, #4]
    d518:	2b24      	cmp	r3, #36	; 0x24
    d51a:	dc02      	bgt.n	d522 <ltoa+0x28>
    d51c:	687b      	ldr	r3, [r7, #4]
    d51e:	2b01      	cmp	r3, #1
    d520:	dc01      	bgt.n	d526 <ltoa+0x2c>
            {
                return 0;
    d522:	2300      	movs	r3, #0
    d524:	e05b      	b.n	d5de <ltoa+0xe4>
            }

            sign = (radix == 10 && value < 0);
    d526:	687b      	ldr	r3, [r7, #4]
    d528:	2b0a      	cmp	r3, #10
    d52a:	d104      	bne.n	d536 <ltoa+0x3c>
    d52c:	68fb      	ldr	r3, [r7, #12]
    d52e:	2b00      	cmp	r3, #0
    d530:	da01      	bge.n	d536 <ltoa+0x3c>
    d532:	2301      	movs	r3, #1
    d534:	e000      	b.n	d538 <ltoa+0x3e>
    d536:	2300      	movs	r3, #0
    d538:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
    d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d53c:	2b00      	cmp	r3, #0
    d53e:	d003      	beq.n	d548 <ltoa+0x4e>
            {
                v = -value;
    d540:	68fb      	ldr	r3, [r7, #12]
    d542:	425b      	negs	r3, r3
    d544:	643b      	str	r3, [r7, #64]	; 0x40
    d546:	e025      	b.n	d594 <ltoa+0x9a>
            }
            else
            {
                v = (unsigned long)value;
    d548:	68fb      	ldr	r3, [r7, #12]
    d54a:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
    d54c:	e022      	b.n	d594 <ltoa+0x9a>
            {
                i = v % radix;
    d54e:	687a      	ldr	r2, [r7, #4]
    d550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d552:	0011      	movs	r1, r2
    d554:	0018      	movs	r0, r3
    d556:	f001 fa15 	bl	e984 <__aeabi_uidivmod>
    d55a:	000b      	movs	r3, r1
    d55c:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
    d55e:	687b      	ldr	r3, [r7, #4]
    d560:	0019      	movs	r1, r3
    d562:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d564:	f001 f988 	bl	e878 <__udivsi3>
    d568:	0003      	movs	r3, r0
    d56a:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    d56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d56e:	2b09      	cmp	r3, #9
    d570:	dc08      	bgt.n	d584 <ltoa+0x8a>
                    *tp++ = i + '0';
    d572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d574:	1c5a      	adds	r2, r3, #1
    d576:	647a      	str	r2, [r7, #68]	; 0x44
    d578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d57a:	b2d2      	uxtb	r2, r2
    d57c:	3230      	adds	r2, #48	; 0x30
    d57e:	b2d2      	uxtb	r2, r2
    d580:	701a      	strb	r2, [r3, #0]
    d582:	e007      	b.n	d594 <ltoa+0x9a>
                else
                    *tp++ = i + 'a' - 10;
    d584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d586:	1c5a      	adds	r2, r3, #1
    d588:	647a      	str	r2, [r7, #68]	; 0x44
    d58a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d58c:	b2d2      	uxtb	r2, r2
    d58e:	3257      	adds	r2, #87	; 0x57
    d590:	b2d2      	uxtb	r2, r2
    d592:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    d594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d596:	2b00      	cmp	r3, #0
    d598:	d1d9      	bne.n	d54e <ltoa+0x54>
    d59a:	2310      	movs	r3, #16
    d59c:	18fb      	adds	r3, r7, r3
    d59e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d5a0:	429a      	cmp	r2, r3
    d5a2:	d0d4      	beq.n	d54e <ltoa+0x54>
            }

            sp = string;
    d5a4:	68bb      	ldr	r3, [r7, #8]
    d5a6:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
    d5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d5aa:	2b00      	cmp	r3, #0
    d5ac:	d00e      	beq.n	d5cc <ltoa+0xd2>
                *sp++ = '-';
    d5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5b0:	1c5a      	adds	r2, r3, #1
    d5b2:	63fa      	str	r2, [r7, #60]	; 0x3c
    d5b4:	222d      	movs	r2, #45	; 0x2d
    d5b6:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d5b8:	e008      	b.n	d5cc <ltoa+0xd2>
                *sp++ = *--tp;
    d5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5bc:	1c5a      	adds	r2, r3, #1
    d5be:	63fa      	str	r2, [r7, #60]	; 0x3c
    d5c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d5c2:	3a01      	subs	r2, #1
    d5c4:	647a      	str	r2, [r7, #68]	; 0x44
    d5c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d5c8:	7812      	ldrb	r2, [r2, #0]
    d5ca:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d5cc:	2310      	movs	r3, #16
    d5ce:	18fb      	adds	r3, r7, r3
    d5d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d5d2:	429a      	cmp	r2, r3
    d5d4:	d8f1      	bhi.n	d5ba <ltoa+0xc0>
            *sp = 0;
    d5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5d8:	2200      	movs	r2, #0
    d5da:	701a      	strb	r2, [r3, #0]

            return string;
    d5dc:	68bb      	ldr	r3, [r7, #8]
        }
    d5de:	0018      	movs	r0, r3
    d5e0:	46bd      	mov	sp, r7
    d5e2:	b012      	add	sp, #72	; 0x48
    d5e4:	bd80      	pop	{r7, pc}

0000d5e6 <utoa>:

        extern char* utoa(unsigned value, char*string, int radix)
        {
    d5e6:	b580      	push	{r7, lr}
    d5e8:	b084      	sub	sp, #16
    d5ea:	af00      	add	r7, sp, #0
    d5ec:	60f8      	str	r0, [r7, #12]
    d5ee:	60b9      	str	r1, [r7, #8]
    d5f0:	607a      	str	r2, [r7, #4]
            return ultoa(value, string, radix);
    d5f2:	687a      	ldr	r2, [r7, #4]
    d5f4:	68b9      	ldr	r1, [r7, #8]
    d5f6:	68fb      	ldr	r3, [r7, #12]
    d5f8:	0018      	movs	r0, r3
    d5fa:	f000 f805 	bl	d608 <ultoa>
    d5fe:	0003      	movs	r3, r0
        }
    d600:	0018      	movs	r0, r3
    d602:	46bd      	mov	sp, r7
    d604:	b004      	add	sp, #16
    d606:	bd80      	pop	{r7, pc}

0000d608 <ultoa>:

        extern char* ultoa(unsigned long value, char*string, int radix)
        {
    d608:	b580      	push	{r7, lr}
    d60a:	b092      	sub	sp, #72	; 0x48
    d60c:	af00      	add	r7, sp, #0
    d60e:	60f8      	str	r0, [r7, #12]
    d610:	60b9      	str	r1, [r7, #8]
    d612:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    d614:	2314      	movs	r3, #20
    d616:	18fb      	adds	r3, r7, r3
    d618:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v = value;
    d61a:	68fb      	ldr	r3, [r7, #12]
    d61c:	643b      	str	r3, [r7, #64]	; 0x40
            char* sp;

            if (string == NULL)
    d61e:	68bb      	ldr	r3, [r7, #8]
    d620:	2b00      	cmp	r3, #0
    d622:	d101      	bne.n	d628 <ultoa+0x20>
            {
                return 0;
    d624:	2300      	movs	r3, #0
    d626:	e047      	b.n	d6b8 <ultoa+0xb0>
            }

            if (radix > 36 || radix <= 1)
    d628:	687b      	ldr	r3, [r7, #4]
    d62a:	2b24      	cmp	r3, #36	; 0x24
    d62c:	dc02      	bgt.n	d634 <ultoa+0x2c>
    d62e:	687b      	ldr	r3, [r7, #4]
    d630:	2b01      	cmp	r3, #1
    d632:	dc24      	bgt.n	d67e <ultoa+0x76>
            {
                return 0;
    d634:	2300      	movs	r3, #0
    d636:	e03f      	b.n	d6b8 <ultoa+0xb0>
            }

            while (v || tp == tmp)
            {
                i = v % radix;
    d638:	687a      	ldr	r2, [r7, #4]
    d63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d63c:	0011      	movs	r1, r2
    d63e:	0018      	movs	r0, r3
    d640:	f001 f9a0 	bl	e984 <__aeabi_uidivmod>
    d644:	000b      	movs	r3, r1
    d646:	63bb      	str	r3, [r7, #56]	; 0x38
                v = v / radix;
    d648:	687b      	ldr	r3, [r7, #4]
    d64a:	0019      	movs	r1, r3
    d64c:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d64e:	f001 f913 	bl	e878 <__udivsi3>
    d652:	0003      	movs	r3, r0
    d654:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    d656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d658:	2b09      	cmp	r3, #9
    d65a:	dc08      	bgt.n	d66e <ultoa+0x66>
                    *tp++ = i + '0';
    d65c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d65e:	1c5a      	adds	r2, r3, #1
    d660:	647a      	str	r2, [r7, #68]	; 0x44
    d662:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d664:	b2d2      	uxtb	r2, r2
    d666:	3230      	adds	r2, #48	; 0x30
    d668:	b2d2      	uxtb	r2, r2
    d66a:	701a      	strb	r2, [r3, #0]
    d66c:	e007      	b.n	d67e <ultoa+0x76>
                else
                    *tp++ = i + 'a' - 10;
    d66e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d670:	1c5a      	adds	r2, r3, #1
    d672:	647a      	str	r2, [r7, #68]	; 0x44
    d674:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d676:	b2d2      	uxtb	r2, r2
    d678:	3257      	adds	r2, #87	; 0x57
    d67a:	b2d2      	uxtb	r2, r2
    d67c:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    d67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d680:	2b00      	cmp	r3, #0
    d682:	d1d9      	bne.n	d638 <ultoa+0x30>
    d684:	2314      	movs	r3, #20
    d686:	18fb      	adds	r3, r7, r3
    d688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d68a:	429a      	cmp	r2, r3
    d68c:	d0d4      	beq.n	d638 <ultoa+0x30>
            }

            sp = string;
    d68e:	68bb      	ldr	r3, [r7, #8]
    d690:	63fb      	str	r3, [r7, #60]	; 0x3c


            while (tp > tmp)
    d692:	e008      	b.n	d6a6 <ultoa+0x9e>
                *sp++ = *--tp;
    d694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d696:	1c5a      	adds	r2, r3, #1
    d698:	63fa      	str	r2, [r7, #60]	; 0x3c
    d69a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d69c:	3a01      	subs	r2, #1
    d69e:	647a      	str	r2, [r7, #68]	; 0x44
    d6a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d6a2:	7812      	ldrb	r2, [r2, #0]
    d6a4:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d6a6:	2314      	movs	r3, #20
    d6a8:	18fb      	adds	r3, r7, r3
    d6aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d6ac:	429a      	cmp	r2, r3
    d6ae:	d8f1      	bhi.n	d694 <ultoa+0x8c>
            *sp = 0;
    d6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d6b2:	2200      	movs	r2, #0
    d6b4:	701a      	strb	r2, [r3, #0]

            return string;
    d6b6:	68bb      	ldr	r3, [r7, #8]
        }
    d6b8:	0018      	movs	r0, r3
    d6ba:	46bd      	mov	sp, r7
    d6bc:	b012      	add	sp, #72	; 0x48
    d6be:	bd80      	pop	{r7, pc}

0000d6c0 <_Znwj>:
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <stdlib.h>

void *operator new(size_t size) {
    d6c0:	b580      	push	{r7, lr}
    d6c2:	b082      	sub	sp, #8
    d6c4:	af00      	add	r7, sp, #0
    d6c6:	6078      	str	r0, [r7, #4]
  return malloc(size);
    d6c8:	687b      	ldr	r3, [r7, #4]
    d6ca:	0018      	movs	r0, r3
    d6cc:	f003 f86c 	bl	107a8 <malloc>
    d6d0:	0003      	movs	r3, r0
}
    d6d2:	0018      	movs	r0, r3
    d6d4:	46bd      	mov	sp, r7
    d6d6:	b002      	add	sp, #8
    d6d8:	bd80      	pop	{r7, pc}

0000d6da <_ZdlPv>:

void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
    d6da:	b580      	push	{r7, lr}
    d6dc:	b082      	sub	sp, #8
    d6de:	af00      	add	r7, sp, #0
    d6e0:	6078      	str	r0, [r7, #4]
  free(ptr);
    d6e2:	687b      	ldr	r3, [r7, #4]
    d6e4:	0018      	movs	r0, r3
    d6e6:	f003 f869 	bl	107bc <free>
}
    d6ea:	46c0      	nop			; (mov r8, r8)
    d6ec:	46bd      	mov	sp, r7
    d6ee:	b002      	add	sp, #8
    d6f0:	bd80      	pop	{r7, pc}
	...

0000d6f4 <__NVIC_EnableIRQ>:
{
    d6f4:	b580      	push	{r7, lr}
    d6f6:	b082      	sub	sp, #8
    d6f8:	af00      	add	r7, sp, #0
    d6fa:	0002      	movs	r2, r0
    d6fc:	1dfb      	adds	r3, r7, #7
    d6fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    d700:	1dfb      	adds	r3, r7, #7
    d702:	781b      	ldrb	r3, [r3, #0]
    d704:	2b7f      	cmp	r3, #127	; 0x7f
    d706:	d809      	bhi.n	d71c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    d708:	4b06      	ldr	r3, [pc, #24]	; (d724 <__NVIC_EnableIRQ+0x30>)
    d70a:	1dfa      	adds	r2, r7, #7
    d70c:	7812      	ldrb	r2, [r2, #0]
    d70e:	b252      	sxtb	r2, r2
    d710:	211f      	movs	r1, #31
    d712:	400a      	ands	r2, r1
    d714:	2101      	movs	r1, #1
    d716:	4091      	lsls	r1, r2
    d718:	000a      	movs	r2, r1
    d71a:	601a      	str	r2, [r3, #0]
}
    d71c:	46c0      	nop			; (mov r8, r8)
    d71e:	46bd      	mov	sp, r7
    d720:	b002      	add	sp, #8
    d722:	bd80      	pop	{r7, pc}
    d724:	e000e100 	.word	0xe000e100

0000d728 <__NVIC_SetPriority>:
{
    d728:	b5b0      	push	{r4, r5, r7, lr}
    d72a:	b082      	sub	sp, #8
    d72c:	af00      	add	r7, sp, #0
    d72e:	0002      	movs	r2, r0
    d730:	6039      	str	r1, [r7, #0]
    d732:	1dfb      	adds	r3, r7, #7
    d734:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    d736:	1dfb      	adds	r3, r7, #7
    d738:	781b      	ldrb	r3, [r3, #0]
    d73a:	2b7f      	cmp	r3, #127	; 0x7f
    d73c:	d828      	bhi.n	d790 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d73e:	4c2f      	ldr	r4, [pc, #188]	; (d7fc <__NVIC_SetPriority+0xd4>)
    d740:	1dfb      	adds	r3, r7, #7
    d742:	781b      	ldrb	r3, [r3, #0]
    d744:	b25b      	sxtb	r3, r3
    d746:	089b      	lsrs	r3, r3, #2
    d748:	492c      	ldr	r1, [pc, #176]	; (d7fc <__NVIC_SetPriority+0xd4>)
    d74a:	1dfa      	adds	r2, r7, #7
    d74c:	7812      	ldrb	r2, [r2, #0]
    d74e:	b252      	sxtb	r2, r2
    d750:	0892      	lsrs	r2, r2, #2
    d752:	32c0      	adds	r2, #192	; 0xc0
    d754:	0092      	lsls	r2, r2, #2
    d756:	5852      	ldr	r2, [r2, r1]
    d758:	1df9      	adds	r1, r7, #7
    d75a:	7809      	ldrb	r1, [r1, #0]
    d75c:	b249      	sxtb	r1, r1
    d75e:	2003      	movs	r0, #3
    d760:	4001      	ands	r1, r0
    d762:	00c9      	lsls	r1, r1, #3
    d764:	20ff      	movs	r0, #255	; 0xff
    d766:	4088      	lsls	r0, r1
    d768:	0001      	movs	r1, r0
    d76a:	43c9      	mvns	r1, r1
    d76c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    d76e:	683a      	ldr	r2, [r7, #0]
    d770:	0192      	lsls	r2, r2, #6
    d772:	20ff      	movs	r0, #255	; 0xff
    d774:	4010      	ands	r0, r2
    d776:	1dfa      	adds	r2, r7, #7
    d778:	7812      	ldrb	r2, [r2, #0]
    d77a:	b252      	sxtb	r2, r2
    d77c:	2503      	movs	r5, #3
    d77e:	402a      	ands	r2, r5
    d780:	00d2      	lsls	r2, r2, #3
    d782:	4090      	lsls	r0, r2
    d784:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d786:	430a      	orrs	r2, r1
    d788:	33c0      	adds	r3, #192	; 0xc0
    d78a:	009b      	lsls	r3, r3, #2
    d78c:	511a      	str	r2, [r3, r4]
}
    d78e:	e031      	b.n	d7f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d790:	4c1b      	ldr	r4, [pc, #108]	; (d800 <__NVIC_SetPriority+0xd8>)
    d792:	1dfb      	adds	r3, r7, #7
    d794:	781b      	ldrb	r3, [r3, #0]
    d796:	b25b      	sxtb	r3, r3
    d798:	220f      	movs	r2, #15
    d79a:	4013      	ands	r3, r2
    d79c:	3b08      	subs	r3, #8
    d79e:	0899      	lsrs	r1, r3, #2
    d7a0:	4a17      	ldr	r2, [pc, #92]	; (d800 <__NVIC_SetPriority+0xd8>)
    d7a2:	1dfb      	adds	r3, r7, #7
    d7a4:	781b      	ldrb	r3, [r3, #0]
    d7a6:	b25b      	sxtb	r3, r3
    d7a8:	200f      	movs	r0, #15
    d7aa:	4003      	ands	r3, r0
    d7ac:	3b08      	subs	r3, #8
    d7ae:	089b      	lsrs	r3, r3, #2
    d7b0:	3306      	adds	r3, #6
    d7b2:	009b      	lsls	r3, r3, #2
    d7b4:	18d3      	adds	r3, r2, r3
    d7b6:	3304      	adds	r3, #4
    d7b8:	681b      	ldr	r3, [r3, #0]
    d7ba:	1dfa      	adds	r2, r7, #7
    d7bc:	7812      	ldrb	r2, [r2, #0]
    d7be:	b252      	sxtb	r2, r2
    d7c0:	2003      	movs	r0, #3
    d7c2:	4002      	ands	r2, r0
    d7c4:	00d2      	lsls	r2, r2, #3
    d7c6:	20ff      	movs	r0, #255	; 0xff
    d7c8:	4090      	lsls	r0, r2
    d7ca:	0002      	movs	r2, r0
    d7cc:	43d2      	mvns	r2, r2
    d7ce:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    d7d0:	683b      	ldr	r3, [r7, #0]
    d7d2:	019b      	lsls	r3, r3, #6
    d7d4:	20ff      	movs	r0, #255	; 0xff
    d7d6:	4018      	ands	r0, r3
    d7d8:	1dfb      	adds	r3, r7, #7
    d7da:	781b      	ldrb	r3, [r3, #0]
    d7dc:	b25b      	sxtb	r3, r3
    d7de:	2503      	movs	r5, #3
    d7e0:	402b      	ands	r3, r5
    d7e2:	00db      	lsls	r3, r3, #3
    d7e4:	4098      	lsls	r0, r3
    d7e6:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d7e8:	431a      	orrs	r2, r3
    d7ea:	1d8b      	adds	r3, r1, #6
    d7ec:	009b      	lsls	r3, r3, #2
    d7ee:	18e3      	adds	r3, r4, r3
    d7f0:	3304      	adds	r3, #4
    d7f2:	601a      	str	r2, [r3, #0]
}
    d7f4:	46c0      	nop			; (mov r8, r8)
    d7f6:	46bd      	mov	sp, r7
    d7f8:	b002      	add	sp, #8
    d7fa:	bdb0      	pop	{r4, r5, r7, pc}
    d7fc:	e000e100 	.word	0xe000e100
    d800:	e000ed00 	.word	0xe000ed00

0000d804 <_ZN6SERCOMC1EP6Sercom>:
// Default rise time in nanoseconds, based on 4.7K ohm pull up resistors
// you can override this value in your variant if needed
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
    d804:	b580      	push	{r7, lr}
    d806:	b082      	sub	sp, #8
    d808:	af00      	add	r7, sp, #0
    d80a:	6078      	str	r0, [r7, #4]
    d80c:	6039      	str	r1, [r7, #0]
{
  sercom = s;
    d80e:	687b      	ldr	r3, [r7, #4]
    d810:	683a      	ldr	r2, [r7, #0]
    d812:	601a      	str	r2, [r3, #0]
}
    d814:	687b      	ldr	r3, [r7, #4]
    d816:	0018      	movs	r0, r3
    d818:	46bd      	mov	sp, r7
    d81a:	b002      	add	sp, #8
    d81c:	bd80      	pop	{r7, pc}
	...

0000d820 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
/* 	=========================
 *	===== Sercom UART
 *	=========================
*/
void SERCOM::initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate)
{
    d820:	b580      	push	{r7, lr}
    d822:	b086      	sub	sp, #24
    d824:	af00      	add	r7, sp, #0
    d826:	60f8      	str	r0, [r7, #12]
    d828:	0008      	movs	r0, r1
    d82a:	0011      	movs	r1, r2
    d82c:	607b      	str	r3, [r7, #4]
    d82e:	230b      	movs	r3, #11
    d830:	18fb      	adds	r3, r7, r3
    d832:	1c02      	adds	r2, r0, #0
    d834:	701a      	strb	r2, [r3, #0]
    d836:	230a      	movs	r3, #10
    d838:	18fb      	adds	r3, r7, r3
    d83a:	1c0a      	adds	r2, r1, #0
    d83c:	701a      	strb	r2, [r3, #0]
  initClockNVIC();
    d83e:	68fb      	ldr	r3, [r7, #12]
    d840:	0018      	movs	r0, r3
    d842:	f000 fd53 	bl	e2ec <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    d846:	68fb      	ldr	r3, [r7, #12]
    d848:	0018      	movs	r0, r3
    d84a:	f000 f8d0 	bl	d9ee <_ZN6SERCOM9resetUARTEv>

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    d84e:	68fb      	ldr	r3, [r7, #12]
    d850:	681b      	ldr	r3, [r3, #0]
    d852:	220b      	movs	r2, #11
    d854:	18ba      	adds	r2, r7, r2
    d856:	7812      	ldrb	r2, [r2, #0]
    d858:	0092      	lsls	r2, r2, #2
    d85a:	0011      	movs	r1, r2
    d85c:	221c      	movs	r2, #28
    d85e:	4011      	ands	r1, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    d860:	220a      	movs	r2, #10
    d862:	18ba      	adds	r2, r7, r2
    d864:	7812      	ldrb	r2, [r2, #0]
    d866:	0352      	lsls	r2, r2, #13
    d868:	0412      	lsls	r2, r2, #16
    d86a:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    d86c:	430a      	orrs	r2, r1
    d86e:	601a      	str	r2, [r3, #0]

  //Setting the Interrupt register
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    d870:	68fb      	ldr	r3, [r7, #12]
    d872:	681b      	ldr	r3, [r3, #0]
    d874:	2284      	movs	r2, #132	; 0x84
    d876:	759a      	strb	r2, [r3, #22]
                                SERCOM_USART_INTENSET_ERROR; //All others errors

  if ( mode == UART_INT_CLOCK )
    d878:	230b      	movs	r3, #11
    d87a:	18fb      	adds	r3, r7, r3
    d87c:	781b      	ldrb	r3, [r3, #0]
    d87e:	2b01      	cmp	r3, #1
    d880:	d13b      	bne.n	d8fa <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xda>
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    d882:	230a      	movs	r3, #10
    d884:	18fb      	adds	r3, r7, r3
    d886:	781b      	ldrb	r3, [r3, #0]
    d888:	2b01      	cmp	r3, #1
    d88a:	d104      	bne.n	d896 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x76>
      sampleRateValue = 16;
    d88c:	2316      	movs	r3, #22
    d88e:	18fb      	adds	r3, r7, r3
    d890:	2210      	movs	r2, #16
    d892:	801a      	strh	r2, [r3, #0]
    d894:	e003      	b.n	d89e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x7e>
    } else {
      sampleRateValue = 8;
    d896:	2316      	movs	r3, #22
    d898:	18fb      	adds	r3, r7, r3
    d89a:	2208      	movs	r2, #8
    d89c:	801a      	strh	r2, [r3, #0]
    }

    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    d89e:	4b19      	ldr	r3, [pc, #100]	; (d904 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xe4>)
    d8a0:	681b      	ldr	r3, [r3, #0]
    d8a2:	00d8      	lsls	r0, r3, #3
    d8a4:	2316      	movs	r3, #22
    d8a6:	18fb      	adds	r3, r7, r3
    d8a8:	881b      	ldrh	r3, [r3, #0]
    d8aa:	687a      	ldr	r2, [r7, #4]
    d8ac:	4353      	muls	r3, r2
    d8ae:	0019      	movs	r1, r3
    d8b0:	f000 ffe2 	bl	e878 <__udivsi3>
    d8b4:	0003      	movs	r3, r0
    d8b6:	613b      	str	r3, [r7, #16]

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    d8b8:	68fb      	ldr	r3, [r7, #12]
    d8ba:	681a      	ldr	r2, [r3, #0]
    d8bc:	693b      	ldr	r3, [r7, #16]
    d8be:	b2db      	uxtb	r3, r3
    d8c0:	1c19      	adds	r1, r3, #0
    d8c2:	2307      	movs	r3, #7
    d8c4:	400b      	ands	r3, r1
    d8c6:	b2d9      	uxtb	r1, r3
    d8c8:	8993      	ldrh	r3, [r2, #12]
    d8ca:	0348      	lsls	r0, r1, #13
    d8cc:	04db      	lsls	r3, r3, #19
    d8ce:	0cdb      	lsrs	r3, r3, #19
    d8d0:	1c19      	adds	r1, r3, #0
    d8d2:	1c03      	adds	r3, r0, #0
    d8d4:	430b      	orrs	r3, r1
    d8d6:	8193      	strh	r3, [r2, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    d8d8:	68fb      	ldr	r3, [r7, #12]
    d8da:	681a      	ldr	r2, [r3, #0]
    d8dc:	693b      	ldr	r3, [r7, #16]
    d8de:	08db      	lsrs	r3, r3, #3
    d8e0:	b29b      	uxth	r3, r3
    d8e2:	04db      	lsls	r3, r3, #19
    d8e4:	0cdb      	lsrs	r3, r3, #19
    d8e6:	b299      	uxth	r1, r3
    d8e8:	8993      	ldrh	r3, [r2, #12]
    d8ea:	04c9      	lsls	r1, r1, #19
    d8ec:	0cc8      	lsrs	r0, r1, #19
    d8ee:	0b5b      	lsrs	r3, r3, #13
    d8f0:	035b      	lsls	r3, r3, #13
    d8f2:	1c19      	adds	r1, r3, #0
    d8f4:	1c03      	adds	r3, r0, #0
    d8f6:	430b      	orrs	r3, r1
    d8f8:	8193      	strh	r3, [r2, #12]
  }
}
    d8fa:	46c0      	nop			; (mov r8, r8)
    d8fc:	46bd      	mov	sp, r7
    d8fe:	b006      	add	sp, #24
    d900:	bd80      	pop	{r7, pc}
    d902:	46c0      	nop			; (mov r8, r8)
    d904:	20000048 	.word	0x20000048

0000d908 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    d908:	b590      	push	{r4, r7, lr}
    d90a:	b083      	sub	sp, #12
    d90c:	af00      	add	r7, sp, #0
    d90e:	6078      	str	r0, [r7, #4]
    d910:	000c      	movs	r4, r1
    d912:	0010      	movs	r0, r2
    d914:	0019      	movs	r1, r3
    d916:	1cfb      	adds	r3, r7, #3
    d918:	1c22      	adds	r2, r4, #0
    d91a:	701a      	strb	r2, [r3, #0]
    d91c:	1cbb      	adds	r3, r7, #2
    d91e:	1c02      	adds	r2, r0, #0
    d920:	701a      	strb	r2, [r3, #0]
    d922:	1c7b      	adds	r3, r7, #1
    d924:	1c0a      	adds	r2, r1, #0
    d926:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d928:	687b      	ldr	r3, [r7, #4]
    d92a:	681b      	ldr	r3, [r3, #0]
    d92c:	687a      	ldr	r2, [r7, #4]
    d92e:	6812      	ldr	r2, [r2, #0]
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    d930:	6811      	ldr	r1, [r2, #0]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d932:	1c7a      	adds	r2, r7, #1
    d934:	7812      	ldrb	r2, [r2, #0]
    d936:	3a02      	subs	r2, #2
    d938:	1e50      	subs	r0, r2, #1
    d93a:	4182      	sbcs	r2, r0
    d93c:	b2d2      	uxtb	r2, r2
    d93e:	0612      	lsls	r2, r2, #24
    d940:	0010      	movs	r0, r2
    d942:	22f0      	movs	r2, #240	; 0xf0
    d944:	0512      	lsls	r2, r2, #20
    d946:	4002      	ands	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    d948:	1cb8      	adds	r0, r7, #2
    d94a:	7800      	ldrb	r0, [r0, #0]
    d94c:	0780      	lsls	r0, r0, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d94e:	4302      	orrs	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    d950:	430a      	orrs	r2, r1
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d952:	601a      	str	r2, [r3, #0]

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d954:	687b      	ldr	r3, [r7, #4]
    d956:	681b      	ldr	r3, [r3, #0]
    d958:	687a      	ldr	r2, [r7, #4]
    d95a:	6812      	ldr	r2, [r2, #0]
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    d95c:	6851      	ldr	r1, [r2, #4]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d95e:	1cfa      	adds	r2, r7, #3
    d960:	7812      	ldrb	r2, [r2, #0]
    d962:	2007      	movs	r0, #7
    d964:	4002      	ands	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    d966:	2018      	movs	r0, #24
    d968:	1838      	adds	r0, r7, r0
    d96a:	7800      	ldrb	r0, [r0, #0]
    d96c:	0180      	lsls	r0, r0, #6
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d96e:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    d970:	1c78      	adds	r0, r7, #1
    d972:	7800      	ldrb	r0, [r0, #0]
    d974:	2802      	cmp	r0, #2
    d976:	d003      	beq.n	d980 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x78>
    d978:	1c78      	adds	r0, r7, #1
    d97a:	7800      	ldrb	r0, [r0, #0]
    d97c:	0340      	lsls	r0, r0, #13
    d97e:	e000      	b.n	d982 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x7a>
    d980:	2000      	movs	r0, #0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    d982:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    d984:	430a      	orrs	r2, r1
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d986:	605a      	str	r2, [r3, #4]
}
    d988:	46c0      	nop			; (mov r8, r8)
    d98a:	46bd      	mov	sp, r7
    d98c:	b003      	add	sp, #12
    d98e:	bd90      	pop	{r4, r7, pc}

0000d990 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    d990:	b590      	push	{r4, r7, lr}
    d992:	b083      	sub	sp, #12
    d994:	af00      	add	r7, sp, #0
    d996:	6078      	str	r0, [r7, #4]
    d998:	0008      	movs	r0, r1
    d99a:	0011      	movs	r1, r2
    d99c:	1cfb      	adds	r3, r7, #3
    d99e:	1c02      	adds	r2, r0, #0
    d9a0:	701a      	strb	r2, [r3, #0]
    d9a2:	1cbb      	adds	r3, r7, #2
    d9a4:	1c0a      	adds	r2, r1, #0
    d9a6:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    d9a8:	687b      	ldr	r3, [r7, #4]
    d9aa:	681b      	ldr	r3, [r3, #0]
    d9ac:	687a      	ldr	r2, [r7, #4]
    d9ae:	6812      	ldr	r2, [r2, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    d9b0:	6811      	ldr	r1, [r2, #0]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    d9b2:	1cfa      	adds	r2, r7, #3
    d9b4:	7812      	ldrb	r2, [r2, #0]
    d9b6:	0412      	lsls	r2, r2, #16
    d9b8:	0010      	movs	r0, r2
    d9ba:	22c0      	movs	r2, #192	; 0xc0
    d9bc:	0292      	lsls	r2, r2, #10
    d9be:	4010      	ands	r0, r2
                SERCOM_USART_CTRLA_RXPO(rxPad);
    d9c0:	1cba      	adds	r2, r7, #2
    d9c2:	7812      	ldrb	r2, [r2, #0]
    d9c4:	0512      	lsls	r2, r2, #20
    d9c6:	0014      	movs	r4, r2
    d9c8:	22c0      	movs	r2, #192	; 0xc0
    d9ca:	0392      	lsls	r2, r2, #14
    d9cc:	4022      	ands	r2, r4
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    d9ce:	4302      	orrs	r2, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    d9d0:	430a      	orrs	r2, r1
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    d9d2:	601a      	str	r2, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    d9d4:	687b      	ldr	r3, [r7, #4]
    d9d6:	681b      	ldr	r3, [r3, #0]
    d9d8:	687a      	ldr	r2, [r7, #4]
    d9da:	6812      	ldr	r2, [r2, #0]
    d9dc:	6852      	ldr	r2, [r2, #4]
    d9de:	21c0      	movs	r1, #192	; 0xc0
    d9e0:	0289      	lsls	r1, r1, #10
    d9e2:	430a      	orrs	r2, r1
    d9e4:	605a      	str	r2, [r3, #4]
}
    d9e6:	46c0      	nop			; (mov r8, r8)
    d9e8:	46bd      	mov	sp, r7
    d9ea:	b003      	add	sp, #12
    d9ec:	bd90      	pop	{r4, r7, pc}

0000d9ee <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
    d9ee:	b580      	push	{r7, lr}
    d9f0:	b082      	sub	sp, #8
    d9f2:	af00      	add	r7, sp, #0
    d9f4:	6078      	str	r0, [r7, #4]
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    d9f6:	687b      	ldr	r3, [r7, #4]
    d9f8:	681b      	ldr	r3, [r3, #0]
    d9fa:	681a      	ldr	r2, [r3, #0]
    d9fc:	2101      	movs	r1, #1
    d9fe:	430a      	orrs	r2, r1
    da00:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    da02:	687b      	ldr	r3, [r7, #4]
    da04:	681b      	ldr	r3, [r3, #0]
    da06:	681b      	ldr	r3, [r3, #0]
    da08:	07db      	lsls	r3, r3, #31
    da0a:	0fdb      	lsrs	r3, r3, #31
    da0c:	b2db      	uxtb	r3, r3
    da0e:	2b00      	cmp	r3, #0
    da10:	d107      	bne.n	da22 <_ZN6SERCOM9resetUARTEv+0x34>
    da12:	687b      	ldr	r3, [r7, #4]
    da14:	681b      	ldr	r3, [r3, #0]
    da16:	69db      	ldr	r3, [r3, #28]
    da18:	07db      	lsls	r3, r3, #31
    da1a:	0fdb      	lsrs	r3, r3, #31
    da1c:	b2db      	uxtb	r3, r3
    da1e:	2b00      	cmp	r3, #0
    da20:	d001      	beq.n	da26 <_ZN6SERCOM9resetUARTEv+0x38>
    da22:	2301      	movs	r3, #1
    da24:	e000      	b.n	da28 <_ZN6SERCOM9resetUARTEv+0x3a>
    da26:	2300      	movs	r3, #0
    da28:	2b00      	cmp	r3, #0
    da2a:	d000      	beq.n	da2e <_ZN6SERCOM9resetUARTEv+0x40>
    da2c:	e7e9      	b.n	da02 <_ZN6SERCOM9resetUARTEv+0x14>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    da2e:	46c0      	nop			; (mov r8, r8)
    da30:	46bd      	mov	sp, r7
    da32:	b002      	add	sp, #8
    da34:	bd80      	pop	{r7, pc}

0000da36 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
    da36:	b580      	push	{r7, lr}
    da38:	b082      	sub	sp, #8
    da3a:	af00      	add	r7, sp, #0
    da3c:	6078      	str	r0, [r7, #4]
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    da3e:	687b      	ldr	r3, [r7, #4]
    da40:	681b      	ldr	r3, [r3, #0]
    da42:	681a      	ldr	r2, [r3, #0]
    da44:	2102      	movs	r1, #2
    da46:	430a      	orrs	r2, r1
    da48:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    da4a:	687b      	ldr	r3, [r7, #4]
    da4c:	681b      	ldr	r3, [r3, #0]
    da4e:	69db      	ldr	r3, [r3, #28]
    da50:	079b      	lsls	r3, r3, #30
    da52:	0fdb      	lsrs	r3, r3, #31
    da54:	b2db      	uxtb	r3, r3
    da56:	2b00      	cmp	r3, #0
    da58:	d000      	beq.n	da5c <_ZN6SERCOM10enableUARTEv+0x26>
    da5a:	e7f6      	b.n	da4a <_ZN6SERCOM10enableUARTEv+0x14>
}
    da5c:	46c0      	nop			; (mov r8, r8)
    da5e:	46bd      	mov	sp, r7
    da60:	b002      	add	sp, #8
    da62:	bd80      	pop	{r7, pc}

0000da64 <_ZN6SERCOM9flushUARTEv>:

void SERCOM::flushUART()
{
    da64:	b580      	push	{r7, lr}
    da66:	b082      	sub	sp, #8
    da68:	af00      	add	r7, sp, #0
    da6a:	6078      	str	r0, [r7, #4]
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    da6c:	687b      	ldr	r3, [r7, #4]
    da6e:	0018      	movs	r0, r3
    da70:	f000 f849 	bl	db06 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    da74:	1e03      	subs	r3, r0, #0
    da76:	d10b      	bne.n	da90 <_ZN6SERCOM9flushUARTEv+0x2c>
    return;

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
    da78:	687b      	ldr	r3, [r7, #4]
    da7a:	681b      	ldr	r3, [r3, #0]
    da7c:	7e1b      	ldrb	r3, [r3, #24]
    da7e:	079b      	lsls	r3, r3, #30
    da80:	0fdb      	lsrs	r3, r3, #31
    da82:	b2db      	uxtb	r3, r3
    da84:	2201      	movs	r2, #1
    da86:	4053      	eors	r3, r2
    da88:	b2db      	uxtb	r3, r3
    da8a:	2b00      	cmp	r3, #0
    da8c:	d001      	beq.n	da92 <_ZN6SERCOM9flushUARTEv+0x2e>
    da8e:	e7f3      	b.n	da78 <_ZN6SERCOM9flushUARTEv+0x14>
    return;
    da90:	46c0      	nop			; (mov r8, r8)
}
    da92:	46bd      	mov	sp, r7
    da94:	b002      	add	sp, #8
    da96:	bd80      	pop	{r7, pc}

0000da98 <_ZN6SERCOM15clearStatusUARTEv>:

void SERCOM::clearStatusUART()
{
    da98:	b580      	push	{r7, lr}
    da9a:	b082      	sub	sp, #8
    da9c:	af00      	add	r7, sp, #0
    da9e:	6078      	str	r0, [r7, #4]
  //Reset (with 0) the STATUS register
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    daa0:	687b      	ldr	r3, [r7, #4]
    daa2:	681b      	ldr	r3, [r3, #0]
    daa4:	2200      	movs	r2, #0
    daa6:	835a      	strh	r2, [r3, #26]
}
    daa8:	46c0      	nop			; (mov r8, r8)
    daaa:	46bd      	mov	sp, r7
    daac:	b002      	add	sp, #8
    daae:	bd80      	pop	{r7, pc}

0000dab0 <_ZN6SERCOM17availableDataUARTEv>:

bool SERCOM::availableDataUART()
{
    dab0:	b580      	push	{r7, lr}
    dab2:	b082      	sub	sp, #8
    dab4:	af00      	add	r7, sp, #0
    dab6:	6078      	str	r0, [r7, #4]
  //RXC : Receive Complete
  return sercom->USART.INTFLAG.bit.RXC;
    dab8:	687b      	ldr	r3, [r7, #4]
    daba:	681b      	ldr	r3, [r3, #0]
    dabc:	7e1b      	ldrb	r3, [r3, #24]
    dabe:	075b      	lsls	r3, r3, #29
    dac0:	0fdb      	lsrs	r3, r3, #31
    dac2:	b2db      	uxtb	r3, r3
}
    dac4:	0018      	movs	r0, r3
    dac6:	46bd      	mov	sp, r7
    dac8:	b002      	add	sp, #8
    daca:	bd80      	pop	{r7, pc}

0000dacc <_ZN6SERCOM11isUARTErrorEv>:

bool SERCOM::isUARTError()
{
    dacc:	b580      	push	{r7, lr}
    dace:	b082      	sub	sp, #8
    dad0:	af00      	add	r7, sp, #0
    dad2:	6078      	str	r0, [r7, #4]
  return sercom->USART.INTFLAG.bit.ERROR;
    dad4:	687b      	ldr	r3, [r7, #4]
    dad6:	681b      	ldr	r3, [r3, #0]
    dad8:	7e1b      	ldrb	r3, [r3, #24]
    dada:	061b      	lsls	r3, r3, #24
    dadc:	0fdb      	lsrs	r3, r3, #31
    dade:	b2db      	uxtb	r3, r3
}
    dae0:	0018      	movs	r0, r3
    dae2:	46bd      	mov	sp, r7
    dae4:	b002      	add	sp, #8
    dae6:	bd80      	pop	{r7, pc}

0000dae8 <_ZN6SERCOM20acknowledgeUARTErrorEv>:

void SERCOM::acknowledgeUARTError()
{
    dae8:	b580      	push	{r7, lr}
    daea:	b082      	sub	sp, #8
    daec:	af00      	add	r7, sp, #0
    daee:	6078      	str	r0, [r7, #4]
  sercom->USART.INTFLAG.bit.ERROR = 1;
    daf0:	687b      	ldr	r3, [r7, #4]
    daf2:	681a      	ldr	r2, [r3, #0]
    daf4:	7e13      	ldrb	r3, [r2, #24]
    daf6:	2180      	movs	r1, #128	; 0x80
    daf8:	4249      	negs	r1, r1
    dafa:	430b      	orrs	r3, r1
    dafc:	7613      	strb	r3, [r2, #24]
}
    dafe:	46c0      	nop			; (mov r8, r8)
    db00:	46bd      	mov	sp, r7
    db02:	b002      	add	sp, #8
    db04:	bd80      	pop	{r7, pc}

0000db06 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  //PERR : Parity Error
  return sercom->USART.STATUS.bit.PERR;
}

bool SERCOM::isDataRegisterEmptyUART()
{
    db06:	b580      	push	{r7, lr}
    db08:	b082      	sub	sp, #8
    db0a:	af00      	add	r7, sp, #0
    db0c:	6078      	str	r0, [r7, #4]
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    db0e:	687b      	ldr	r3, [r7, #4]
    db10:	681b      	ldr	r3, [r3, #0]
    db12:	7e1b      	ldrb	r3, [r3, #24]
    db14:	07db      	lsls	r3, r3, #31
    db16:	0fdb      	lsrs	r3, r3, #31
    db18:	b2db      	uxtb	r3, r3
}
    db1a:	0018      	movs	r0, r3
    db1c:	46bd      	mov	sp, r7
    db1e:	b002      	add	sp, #8
    db20:	bd80      	pop	{r7, pc}

0000db22 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
    db22:	b580      	push	{r7, lr}
    db24:	b082      	sub	sp, #8
    db26:	af00      	add	r7, sp, #0
    db28:	6078      	str	r0, [r7, #4]
  return sercom->USART.DATA.bit.DATA;
    db2a:	687b      	ldr	r3, [r7, #4]
    db2c:	681b      	ldr	r3, [r3, #0]
    db2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    db30:	05db      	lsls	r3, r3, #23
    db32:	0ddb      	lsrs	r3, r3, #23
    db34:	b29b      	uxth	r3, r3
    db36:	b2db      	uxtb	r3, r3
}
    db38:	0018      	movs	r0, r3
    db3a:	46bd      	mov	sp, r7
    db3c:	b002      	add	sp, #8
    db3e:	bd80      	pop	{r7, pc}

0000db40 <_ZN6SERCOM13writeDataUARTEh>:

int SERCOM::writeDataUART(uint8_t data)
{
    db40:	b580      	push	{r7, lr}
    db42:	b082      	sub	sp, #8
    db44:	af00      	add	r7, sp, #0
    db46:	6078      	str	r0, [r7, #4]
    db48:	000a      	movs	r2, r1
    db4a:	1cfb      	adds	r3, r7, #3
    db4c:	701a      	strb	r2, [r3, #0]
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    db4e:	687b      	ldr	r3, [r7, #4]
    db50:	0018      	movs	r0, r3
    db52:	f7ff ffd8 	bl	db06 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    db56:	0003      	movs	r3, r0
    db58:	001a      	movs	r2, r3
    db5a:	2301      	movs	r3, #1
    db5c:	4053      	eors	r3, r2
    db5e:	b2db      	uxtb	r3, r3
    db60:	2b00      	cmp	r3, #0
    db62:	d000      	beq.n	db66 <_ZN6SERCOM13writeDataUARTEh+0x26>
    db64:	e7f3      	b.n	db4e <_ZN6SERCOM13writeDataUARTEh+0xe>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    db66:	687b      	ldr	r3, [r7, #4]
    db68:	681b      	ldr	r3, [r3, #0]
    db6a:	1cfa      	adds	r2, r7, #3
    db6c:	7812      	ldrb	r2, [r2, #0]
    db6e:	b292      	uxth	r2, r2
    db70:	851a      	strh	r2, [r3, #40]	; 0x28
  return 1;
    db72:	2301      	movs	r3, #1
}
    db74:	0018      	movs	r0, r3
    db76:	46bd      	mov	sp, r7
    db78:	b002      	add	sp, #8
    db7a:	bd80      	pop	{r7, pc}

0000db7c <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
    db7c:	b580      	push	{r7, lr}
    db7e:	b082      	sub	sp, #8
    db80:	af00      	add	r7, sp, #0
    db82:	6078      	str	r0, [r7, #4]
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    db84:	687b      	ldr	r3, [r7, #4]
    db86:	681b      	ldr	r3, [r3, #0]
    db88:	2201      	movs	r2, #1
    db8a:	759a      	strb	r2, [r3, #22]
}
    db8c:	46c0      	nop			; (mov r8, r8)
    db8e:	46bd      	mov	sp, r7
    db90:	b002      	add	sp, #8
    db92:	bd80      	pop	{r7, pc}

0000db94 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
    db94:	b580      	push	{r7, lr}
    db96:	b082      	sub	sp, #8
    db98:	af00      	add	r7, sp, #0
    db9a:	6078      	str	r0, [r7, #4]
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    db9c:	687b      	ldr	r3, [r7, #4]
    db9e:	681b      	ldr	r3, [r3, #0]
    dba0:	2201      	movs	r2, #1
    dba2:	751a      	strb	r2, [r3, #20]
}
    dba4:	46c0      	nop			; (mov r8, r8)
    dba6:	46bd      	mov	sp, r7
    dba8:	b002      	add	sp, #8
    dbaa:	bd80      	pop	{r7, pc}

0000dbac <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
/*	=========================
 *	===== Sercom SPI
 *	=========================
*/
void SERCOM::initSPI(SercomSpiTXPad mosi, SercomRXPad miso, SercomSpiCharSize charSize, SercomDataOrder dataOrder)
{
    dbac:	b590      	push	{r4, r7, lr}
    dbae:	b083      	sub	sp, #12
    dbb0:	af00      	add	r7, sp, #0
    dbb2:	6078      	str	r0, [r7, #4]
    dbb4:	000c      	movs	r4, r1
    dbb6:	0010      	movs	r0, r2
    dbb8:	0019      	movs	r1, r3
    dbba:	1cfb      	adds	r3, r7, #3
    dbbc:	1c22      	adds	r2, r4, #0
    dbbe:	701a      	strb	r2, [r3, #0]
    dbc0:	1cbb      	adds	r3, r7, #2
    dbc2:	1c02      	adds	r2, r0, #0
    dbc4:	701a      	strb	r2, [r3, #0]
    dbc6:	1c7b      	adds	r3, r7, #1
    dbc8:	1c0a      	adds	r2, r1, #0
    dbca:	701a      	strb	r2, [r3, #0]
  resetSPI();
    dbcc:	687b      	ldr	r3, [r7, #4]
    dbce:	0018      	movs	r0, r3
    dbd0:	f000 f864 	bl	dc9c <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    dbd4:	687b      	ldr	r3, [r7, #4]
    dbd6:	0018      	movs	r0, r3
    dbd8:	f000 fb88 	bl	e2ec <_ZN6SERCOM13initClockNVICEv>

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    dbdc:	687b      	ldr	r3, [r7, #4]
    dbde:	681b      	ldr	r3, [r3, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    dbe0:	1cfa      	adds	r2, r7, #3
    dbe2:	7812      	ldrb	r2, [r2, #0]
    dbe4:	0412      	lsls	r2, r2, #16
    dbe6:	0011      	movs	r1, r2
    dbe8:	22c0      	movs	r2, #192	; 0xc0
    dbea:	0292      	lsls	r2, r2, #10
    dbec:	4011      	ands	r1, r2
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    dbee:	1cba      	adds	r2, r7, #2
    dbf0:	7812      	ldrb	r2, [r2, #0]
    dbf2:	0512      	lsls	r2, r2, #20
    dbf4:	0010      	movs	r0, r2
    dbf6:	22c0      	movs	r2, #192	; 0xc0
    dbf8:	0392      	lsls	r2, r2, #14
    dbfa:	4002      	ands	r2, r0
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    dbfc:	430a      	orrs	r2, r1
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    dbfe:	2118      	movs	r1, #24
    dc00:	1879      	adds	r1, r7, r1
    dc02:	7809      	ldrb	r1, [r1, #0]
    dc04:	0789      	lsls	r1, r1, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    dc06:	430a      	orrs	r2, r1
    dc08:	210c      	movs	r1, #12
    dc0a:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    dc0c:	601a      	str	r2, [r3, #0]

  //Setting the CTRLB register
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    dc0e:	687b      	ldr	r3, [r7, #4]
    dc10:	681b      	ldr	r3, [r3, #0]
    dc12:	1c7a      	adds	r2, r7, #1
    dc14:	7812      	ldrb	r2, [r2, #0]
    dc16:	2107      	movs	r1, #7
    dc18:	400a      	ands	r2, r1
    dc1a:	2180      	movs	r1, #128	; 0x80
    dc1c:	0289      	lsls	r1, r1, #10
    dc1e:	430a      	orrs	r2, r1
    dc20:	605a      	str	r2, [r3, #4]
                          SERCOM_SPI_CTRLB_RXEN;	//Active the SPI receiver.


}
    dc22:	46c0      	nop			; (mov r8, r8)
    dc24:	46bd      	mov	sp, r7
    dc26:	b003      	add	sp, #12
    dc28:	bd90      	pop	{r4, r7, pc}

0000dc2a <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    dc2a:	b590      	push	{r4, r7, lr}
    dc2c:	b087      	sub	sp, #28
    dc2e:	af00      	add	r7, sp, #0
    dc30:	60f8      	str	r0, [r7, #12]
    dc32:	607a      	str	r2, [r7, #4]
    dc34:	230b      	movs	r3, #11
    dc36:	18fb      	adds	r3, r7, r3
    dc38:	1c0a      	adds	r2, r1, #0
    dc3a:	701a      	strb	r2, [r3, #0]
  //Extract data from clockMode
  int cpha, cpol;

  if((clockMode & (0x1ul)) == 0 )
    dc3c:	230b      	movs	r3, #11
    dc3e:	18fb      	adds	r3, r7, r3
    dc40:	781b      	ldrb	r3, [r3, #0]
    dc42:	2201      	movs	r2, #1
    dc44:	4013      	ands	r3, r2
    dc46:	d102      	bne.n	dc4e <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x24>
    cpha = 0;
    dc48:	2300      	movs	r3, #0
    dc4a:	617b      	str	r3, [r7, #20]
    dc4c:	e001      	b.n	dc52 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x28>
  else
    cpha = 1;
    dc4e:	2301      	movs	r3, #1
    dc50:	617b      	str	r3, [r7, #20]

  if((clockMode & (0x2ul)) == 0)
    dc52:	230b      	movs	r3, #11
    dc54:	18fb      	adds	r3, r7, r3
    dc56:	781b      	ldrb	r3, [r3, #0]
    dc58:	2202      	movs	r2, #2
    dc5a:	4013      	ands	r3, r2
    dc5c:	d102      	bne.n	dc64 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x3a>
    cpol = 0;
    dc5e:	2300      	movs	r3, #0
    dc60:	613b      	str	r3, [r7, #16]
    dc62:	e001      	b.n	dc68 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x3e>
  else
    cpol = 1;
    dc64:	2301      	movs	r3, #1
    dc66:	613b      	str	r3, [r7, #16]

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dc68:	68fb      	ldr	r3, [r7, #12]
    dc6a:	681b      	ldr	r3, [r3, #0]
    dc6c:	68fa      	ldr	r2, [r7, #12]
    dc6e:	6812      	ldr	r2, [r2, #0]
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    dc70:	6812      	ldr	r2, [r2, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dc72:	6979      	ldr	r1, [r7, #20]
    dc74:	0708      	lsls	r0, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    dc76:	6939      	ldr	r1, [r7, #16]
    dc78:	0749      	lsls	r1, r1, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dc7a:	4301      	orrs	r1, r0
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    dc7c:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dc7e:	601a      	str	r2, [r3, #0]

  //Synchronous arithmetic
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    dc80:	68fb      	ldr	r3, [r7, #12]
    dc82:	681c      	ldr	r4, [r3, #0]
    dc84:	687a      	ldr	r2, [r7, #4]
    dc86:	68fb      	ldr	r3, [r7, #12]
    dc88:	0011      	movs	r1, r2
    dc8a:	0018      	movs	r0, r3
    dc8c:	f000 f886 	bl	dd9c <_ZN6SERCOM28calculateBaudrateSynchronousEm>
    dc90:	0003      	movs	r3, r0
    dc92:	7323      	strb	r3, [r4, #12]
}
    dc94:	46c0      	nop			; (mov r8, r8)
    dc96:	46bd      	mov	sp, r7
    dc98:	b007      	add	sp, #28
    dc9a:	bd90      	pop	{r4, r7, pc}

0000dc9c <_ZN6SERCOM8resetSPIEv>:

void SERCOM::resetSPI()
{
    dc9c:	b580      	push	{r7, lr}
    dc9e:	b082      	sub	sp, #8
    dca0:	af00      	add	r7, sp, #0
    dca2:	6078      	str	r0, [r7, #4]
  //Setting the Software Reset bit to 1
  sercom->SPI.CTRLA.bit.SWRST = 1;
    dca4:	687b      	ldr	r3, [r7, #4]
    dca6:	681b      	ldr	r3, [r3, #0]
    dca8:	681a      	ldr	r2, [r3, #0]
    dcaa:	2101      	movs	r1, #1
    dcac:	430a      	orrs	r2, r1
    dcae:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    dcb0:	687b      	ldr	r3, [r7, #4]
    dcb2:	681b      	ldr	r3, [r3, #0]
    dcb4:	681b      	ldr	r3, [r3, #0]
    dcb6:	07db      	lsls	r3, r3, #31
    dcb8:	0fdb      	lsrs	r3, r3, #31
    dcba:	b2db      	uxtb	r3, r3
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d107      	bne.n	dcd0 <_ZN6SERCOM8resetSPIEv+0x34>
    dcc0:	687b      	ldr	r3, [r7, #4]
    dcc2:	681b      	ldr	r3, [r3, #0]
    dcc4:	69db      	ldr	r3, [r3, #28]
    dcc6:	07db      	lsls	r3, r3, #31
    dcc8:	0fdb      	lsrs	r3, r3, #31
    dcca:	b2db      	uxtb	r3, r3
    dccc:	2b00      	cmp	r3, #0
    dcce:	d001      	beq.n	dcd4 <_ZN6SERCOM8resetSPIEv+0x38>
    dcd0:	2301      	movs	r3, #1
    dcd2:	e000      	b.n	dcd6 <_ZN6SERCOM8resetSPIEv+0x3a>
    dcd4:	2300      	movs	r3, #0
    dcd6:	2b00      	cmp	r3, #0
    dcd8:	d000      	beq.n	dcdc <_ZN6SERCOM8resetSPIEv+0x40>
    dcda:	e7e9      	b.n	dcb0 <_ZN6SERCOM8resetSPIEv+0x14>
}
    dcdc:	46c0      	nop			; (mov r8, r8)
    dcde:	46bd      	mov	sp, r7
    dce0:	b002      	add	sp, #8
    dce2:	bd80      	pop	{r7, pc}

0000dce4 <_ZN6SERCOM9enableSPIEv>:

void SERCOM::enableSPI()
{
    dce4:	b580      	push	{r7, lr}
    dce6:	b082      	sub	sp, #8
    dce8:	af00      	add	r7, sp, #0
    dcea:	6078      	str	r0, [r7, #4]
  //Setting the enable bit to 1
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    dcec:	687b      	ldr	r3, [r7, #4]
    dcee:	681b      	ldr	r3, [r3, #0]
    dcf0:	681a      	ldr	r2, [r3, #0]
    dcf2:	2102      	movs	r1, #2
    dcf4:	430a      	orrs	r2, r1
    dcf6:	601a      	str	r2, [r3, #0]

  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    dcf8:	687b      	ldr	r3, [r7, #4]
    dcfa:	681b      	ldr	r3, [r3, #0]
    dcfc:	69db      	ldr	r3, [r3, #28]
    dcfe:	079b      	lsls	r3, r3, #30
    dd00:	0fdb      	lsrs	r3, r3, #31
    dd02:	b2db      	uxtb	r3, r3
    dd04:	2b00      	cmp	r3, #0
    dd06:	d000      	beq.n	dd0a <_ZN6SERCOM9enableSPIEv+0x26>
    dd08:	e7f6      	b.n	dcf8 <_ZN6SERCOM9enableSPIEv+0x14>
  {
    //Waiting then enable bit from SYNCBUSY is equal to 0;
  }
}
    dd0a:	46c0      	nop			; (mov r8, r8)
    dd0c:	46bd      	mov	sp, r7
    dd0e:	b002      	add	sp, #8
    dd10:	bd80      	pop	{r7, pc}

0000dd12 <_ZN6SERCOM10disableSPIEv>:

void SERCOM::disableSPI()
{
    dd12:	b580      	push	{r7, lr}
    dd14:	b082      	sub	sp, #8
    dd16:	af00      	add	r7, sp, #0
    dd18:	6078      	str	r0, [r7, #4]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    dd1a:	687b      	ldr	r3, [r7, #4]
    dd1c:	681b      	ldr	r3, [r3, #0]
    dd1e:	69db      	ldr	r3, [r3, #28]
    dd20:	079b      	lsls	r3, r3, #30
    dd22:	0fdb      	lsrs	r3, r3, #31
    dd24:	b2db      	uxtb	r3, r3
    dd26:	2b00      	cmp	r3, #0
    dd28:	d000      	beq.n	dd2c <_ZN6SERCOM10disableSPIEv+0x1a>
    dd2a:	e7f6      	b.n	dd1a <_ZN6SERCOM10disableSPIEv+0x8>
  {
    //Waiting then enable bit from SYNCBUSY is equal to 0;
  }

  //Setting the enable bit to 0
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    dd2c:	687b      	ldr	r3, [r7, #4]
    dd2e:	681b      	ldr	r3, [r3, #0]
    dd30:	681a      	ldr	r2, [r3, #0]
    dd32:	2102      	movs	r1, #2
    dd34:	438a      	bics	r2, r1
    dd36:	601a      	str	r2, [r3, #0]
}
    dd38:	46c0      	nop			; (mov r8, r8)
    dd3a:	46bd      	mov	sp, r7
    dd3c:	b002      	add	sp, #8
    dd3e:	bd80      	pop	{r7, pc}

0000dd40 <_ZN6SERCOM15transferDataSPIEh>:

  enableSPI();
}

uint8_t SERCOM::transferDataSPI(uint8_t data)
{
    dd40:	b580      	push	{r7, lr}
    dd42:	b082      	sub	sp, #8
    dd44:	af00      	add	r7, sp, #0
    dd46:	6078      	str	r0, [r7, #4]
    dd48:	000a      	movs	r2, r1
    dd4a:	1cfb      	adds	r3, r7, #3
    dd4c:	701a      	strb	r2, [r3, #0]
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    dd4e:	687b      	ldr	r3, [r7, #4]
    dd50:	681b      	ldr	r3, [r3, #0]
    dd52:	1cfa      	adds	r2, r7, #3
    dd54:	7812      	ldrb	r2, [r2, #0]
    dd56:	b292      	uxth	r2, r2
    dd58:	05d2      	lsls	r2, r2, #23
    dd5a:	0dd2      	lsrs	r2, r2, #23
    dd5c:	b291      	uxth	r1, r2
    dd5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dd60:	05c9      	lsls	r1, r1, #23
    dd62:	0dc9      	lsrs	r1, r1, #23
    dd64:	0a52      	lsrs	r2, r2, #9
    dd66:	0252      	lsls	r2, r2, #9
    dd68:	430a      	orrs	r2, r1
    dd6a:	629a      	str	r2, [r3, #40]	; 0x28

  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    dd6c:	687b      	ldr	r3, [r7, #4]
    dd6e:	681b      	ldr	r3, [r3, #0]
    dd70:	7e1b      	ldrb	r3, [r3, #24]
    dd72:	075b      	lsls	r3, r3, #29
    dd74:	0fdb      	lsrs	r3, r3, #31
    dd76:	b2db      	uxtb	r3, r3
    dd78:	2201      	movs	r2, #1
    dd7a:	4053      	eors	r3, r2
    dd7c:	b2db      	uxtb	r3, r3
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d000      	beq.n	dd84 <_ZN6SERCOM15transferDataSPIEh+0x44>
    dd82:	e7f3      	b.n	dd6c <_ZN6SERCOM15transferDataSPIEh+0x2c>
  {
    // Waiting Complete Reception
  }

  return sercom->SPI.DATA.bit.DATA;  // Reading data
    dd84:	687b      	ldr	r3, [r7, #4]
    dd86:	681b      	ldr	r3, [r3, #0]
    dd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd8a:	05db      	lsls	r3, r3, #23
    dd8c:	0ddb      	lsrs	r3, r3, #23
    dd8e:	b29b      	uxth	r3, r3
    dd90:	b2db      	uxtb	r3, r3
}
    dd92:	0018      	movs	r0, r3
    dd94:	46bd      	mov	sp, r7
    dd96:	b002      	add	sp, #8
    dd98:	bd80      	pop	{r7, pc}
	...

0000dd9c <_ZN6SERCOM28calculateBaudrateSynchronousEm>:
//	//RXC : Receive complete
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
    dd9c:	b580      	push	{r7, lr}
    dd9e:	b082      	sub	sp, #8
    dda0:	af00      	add	r7, sp, #0
    dda2:	6078      	str	r0, [r7, #4]
    dda4:	6039      	str	r1, [r7, #0]
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    dda6:	683b      	ldr	r3, [r7, #0]
    dda8:	005b      	lsls	r3, r3, #1
    ddaa:	0019      	movs	r1, r3
    ddac:	4805      	ldr	r0, [pc, #20]	; (ddc4 <_ZN6SERCOM28calculateBaudrateSynchronousEm+0x28>)
    ddae:	f000 fd63 	bl	e878 <__udivsi3>
    ddb2:	0003      	movs	r3, r0
    ddb4:	b2db      	uxtb	r3, r3
    ddb6:	3b01      	subs	r3, #1
    ddb8:	b2db      	uxtb	r3, r3
}
    ddba:	0018      	movs	r0, r3
    ddbc:	46bd      	mov	sp, r7
    ddbe:	b002      	add	sp, #8
    ddc0:	bd80      	pop	{r7, pc}
    ddc2:	46c0      	nop			; (mov r8, r8)
    ddc4:	02dc6c00 	.word	0x02dc6c00

0000ddc8 <_ZN6SERCOM9resetWIREEv>:
/*	=========================
 *	===== Sercom WIRE
 *	=========================
 */
void SERCOM::resetWIRE()
{
    ddc8:	b580      	push	{r7, lr}
    ddca:	b082      	sub	sp, #8
    ddcc:	af00      	add	r7, sp, #0
    ddce:	6078      	str	r0, [r7, #4]
  //I2CM OR I2CS, no matter SWRST is the same bit.

  //Setting the Software bit to 1
  sercom->I2CM.CTRLA.bit.SWRST = 1;
    ddd0:	687b      	ldr	r3, [r7, #4]
    ddd2:	681b      	ldr	r3, [r3, #0]
    ddd4:	681a      	ldr	r2, [r3, #0]
    ddd6:	2101      	movs	r1, #1
    ddd8:	430a      	orrs	r2, r1
    ddda:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
    dddc:	687b      	ldr	r3, [r7, #4]
    ddde:	681b      	ldr	r3, [r3, #0]
    dde0:	681b      	ldr	r3, [r3, #0]
    dde2:	07db      	lsls	r3, r3, #31
    dde4:	0fdb      	lsrs	r3, r3, #31
    dde6:	b2db      	uxtb	r3, r3
    dde8:	2b00      	cmp	r3, #0
    ddea:	d107      	bne.n	ddfc <_ZN6SERCOM9resetWIREEv+0x34>
    ddec:	687b      	ldr	r3, [r7, #4]
    ddee:	681b      	ldr	r3, [r3, #0]
    ddf0:	69db      	ldr	r3, [r3, #28]
    ddf2:	07db      	lsls	r3, r3, #31
    ddf4:	0fdb      	lsrs	r3, r3, #31
    ddf6:	b2db      	uxtb	r3, r3
    ddf8:	2b00      	cmp	r3, #0
    ddfa:	d001      	beq.n	de00 <_ZN6SERCOM9resetWIREEv+0x38>
    ddfc:	2301      	movs	r3, #1
    ddfe:	e000      	b.n	de02 <_ZN6SERCOM9resetWIREEv+0x3a>
    de00:	2300      	movs	r3, #0
    de02:	2b00      	cmp	r3, #0
    de04:	d000      	beq.n	de08 <_ZN6SERCOM9resetWIREEv+0x40>
    de06:	e7e9      	b.n	dddc <_ZN6SERCOM9resetWIREEv+0x14>
}
    de08:	46c0      	nop			; (mov r8, r8)
    de0a:	46bd      	mov	sp, r7
    de0c:	b002      	add	sp, #8
    de0e:	bd80      	pop	{r7, pc}

0000de10 <_ZN6SERCOM10enableWIREEv>:

void SERCOM::enableWIRE()
{
    de10:	b580      	push	{r7, lr}
    de12:	b082      	sub	sp, #8
    de14:	af00      	add	r7, sp, #0
    de16:	6078      	str	r0, [r7, #4]
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    de18:	687b      	ldr	r3, [r7, #4]
    de1a:	681b      	ldr	r3, [r3, #0]
    de1c:	681a      	ldr	r2, [r3, #0]
    de1e:	2102      	movs	r1, #2
    de20:	430a      	orrs	r2, r1
    de22:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    de24:	687b      	ldr	r3, [r7, #4]
    de26:	681b      	ldr	r3, [r3, #0]
    de28:	69db      	ldr	r3, [r3, #28]
    de2a:	079b      	lsls	r3, r3, #30
    de2c:	0fdb      	lsrs	r3, r3, #31
    de2e:	b2db      	uxtb	r3, r3
    de30:	2b00      	cmp	r3, #0
    de32:	d000      	beq.n	de36 <_ZN6SERCOM10enableWIREEv+0x26>
    de34:	e7f6      	b.n	de24 <_ZN6SERCOM10enableWIREEv+0x14>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    de36:	687b      	ldr	r3, [r7, #4]
    de38:	681a      	ldr	r2, [r3, #0]
    de3a:	8b53      	ldrh	r3, [r2, #26]
    de3c:	2130      	movs	r1, #48	; 0x30
    de3e:	438b      	bics	r3, r1
    de40:	1c19      	adds	r1, r3, #0
    de42:	2310      	movs	r3, #16
    de44:	430b      	orrs	r3, r1
    de46:	8353      	strh	r3, [r2, #26]

  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
    de48:	687b      	ldr	r3, [r7, #4]
    de4a:	681b      	ldr	r3, [r3, #0]
    de4c:	69db      	ldr	r3, [r3, #28]
    de4e:	075b      	lsls	r3, r3, #29
    de50:	0fdb      	lsrs	r3, r3, #31
    de52:	b2db      	uxtb	r3, r3
    de54:	2b00      	cmp	r3, #0
    de56:	d000      	beq.n	de5a <_ZN6SERCOM10enableWIREEv+0x4a>
    de58:	e7f6      	b.n	de48 <_ZN6SERCOM10enableWIREEv+0x38>
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    de5a:	46c0      	nop			; (mov r8, r8)
    de5c:	46bd      	mov	sp, r7
    de5e:	b002      	add	sp, #8
    de60:	bd80      	pop	{r7, pc}
	...

0000de64 <_ZN6SERCOM14initMasterWIREEm>:
    // Wait the SYSOP bit from SYNCBUSY to come back to 0
  }
}

void SERCOM::initMasterWIRE( uint32_t baudrate )
{
    de64:	b5b0      	push	{r4, r5, r7, lr}
    de66:	b082      	sub	sp, #8
    de68:	af00      	add	r7, sp, #0
    de6a:	6078      	str	r0, [r7, #4]
    de6c:	6039      	str	r1, [r7, #0]
  // Initialize the peripheral clock and interruption
  initClockNVIC() ;
    de6e:	687b      	ldr	r3, [r7, #4]
    de70:	0018      	movs	r0, r3
    de72:	f000 fa3b 	bl	e2ec <_ZN6SERCOM13initClockNVICEv>

  resetWIRE() ;
    de76:	687b      	ldr	r3, [r7, #4]
    de78:	0018      	movs	r0, r3
    de7a:	f7ff ffa5 	bl	ddc8 <_ZN6SERCOM9resetWIREEv>

  // Set master mode and enable SCL Clock Stretch mode (stretch after ACK bit)
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    de7e:	687b      	ldr	r3, [r7, #4]
    de80:	681b      	ldr	r3, [r3, #0]
    de82:	2214      	movs	r2, #20
    de84:	601a      	str	r2, [r3, #0]

  // Enable all interrupts
//  sercom->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB | SERCOM_I2CM_INTENSET_ERROR ;

  // Synchronous arithmetic baudrate
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    de86:	687b      	ldr	r3, [r7, #4]
    de88:	681c      	ldr	r4, [r3, #0]
    de8a:	4b16      	ldr	r3, [pc, #88]	; (dee4 <_ZN6SERCOM14initMasterWIREEm+0x80>)
    de8c:	681a      	ldr	r2, [r3, #0]
    de8e:	683b      	ldr	r3, [r7, #0]
    de90:	005b      	lsls	r3, r3, #1
    de92:	0019      	movs	r1, r3
    de94:	0010      	movs	r0, r2
    de96:	f000 fcef 	bl	e878 <__udivsi3>
    de9a:	0003      	movs	r3, r0
    de9c:	b2dd      	uxtb	r5, r3
    de9e:	4b11      	ldr	r3, [pc, #68]	; (dee4 <_ZN6SERCOM14initMasterWIREEm+0x80>)
    dea0:	681b      	ldr	r3, [r3, #0]
    dea2:	4911      	ldr	r1, [pc, #68]	; (dee8 <_ZN6SERCOM14initMasterWIREEm+0x84>)
    dea4:	0018      	movs	r0, r3
    dea6:	f000 fce7 	bl	e878 <__udivsi3>
    deaa:	0003      	movs	r3, r0
    deac:	001a      	movs	r2, r3
    deae:	0013      	movs	r3, r2
    deb0:	015b      	lsls	r3, r3, #5
    deb2:	1a9b      	subs	r3, r3, r2
    deb4:	009b      	lsls	r3, r3, #2
    deb6:	189a      	adds	r2, r3, r2
    deb8:	23fa      	movs	r3, #250	; 0xfa
    deba:	00d9      	lsls	r1, r3, #3
    debc:	0010      	movs	r0, r2
    debe:	f000 fcdb 	bl	e878 <__udivsi3>
    dec2:	0003      	movs	r3, r0
    dec4:	b2db      	uxtb	r3, r3
    dec6:	1aeb      	subs	r3, r5, r3
    dec8:	b2db      	uxtb	r3, r3
    deca:	3b05      	subs	r3, #5
    decc:	b2da      	uxtb	r2, r3
    dece:	68e3      	ldr	r3, [r4, #12]
    ded0:	21ff      	movs	r1, #255	; 0xff
    ded2:	400a      	ands	r2, r1
    ded4:	21ff      	movs	r1, #255	; 0xff
    ded6:	438b      	bics	r3, r1
    ded8:	4313      	orrs	r3, r2
    deda:	60e3      	str	r3, [r4, #12]
}
    dedc:	46c0      	nop			; (mov r8, r8)
    dede:	46bd      	mov	sp, r7
    dee0:	b002      	add	sp, #8
    dee2:	bdb0      	pop	{r4, r5, r7, pc}
    dee4:	20000048 	.word	0x20000048
    dee8:	000f4240 	.word	0x000f4240

0000deec <_ZN6SERCOM18prepareNackBitWIREEv>:

void SERCOM::prepareNackBitWIRE( void )
{
    deec:	b580      	push	{r7, lr}
    deee:	b082      	sub	sp, #8
    def0:	af00      	add	r7, sp, #0
    def2:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE()) {
    def4:	687b      	ldr	r3, [r7, #4]
    def6:	0018      	movs	r0, r3
    def8:	f000 f945 	bl	e186 <_ZN6SERCOM12isMasterWIREEv>
    defc:	1e03      	subs	r3, r0, #0
    defe:	d007      	beq.n	df10 <_ZN6SERCOM18prepareNackBitWIREEv+0x24>
    // Send a NACK
    sercom->I2CM.CTRLB.bit.ACKACT = 1;
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	681b      	ldr	r3, [r3, #0]
    df04:	685a      	ldr	r2, [r3, #4]
    df06:	2180      	movs	r1, #128	; 0x80
    df08:	02c9      	lsls	r1, r1, #11
    df0a:	430a      	orrs	r2, r1
    df0c:	605a      	str	r2, [r3, #4]
  } else {
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
  }
}
    df0e:	e006      	b.n	df1e <_ZN6SERCOM18prepareNackBitWIREEv+0x32>
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	681b      	ldr	r3, [r3, #0]
    df14:	685a      	ldr	r2, [r3, #4]
    df16:	2180      	movs	r1, #128	; 0x80
    df18:	02c9      	lsls	r1, r1, #11
    df1a:	430a      	orrs	r2, r1
    df1c:	605a      	str	r2, [r3, #4]
}
    df1e:	46c0      	nop			; (mov r8, r8)
    df20:	46bd      	mov	sp, r7
    df22:	b002      	add	sp, #8
    df24:	bd80      	pop	{r7, pc}
	...

0000df28 <_ZN6SERCOM17prepareAckBitWIREEv>:

void SERCOM::prepareAckBitWIRE( void )
{
    df28:	b580      	push	{r7, lr}
    df2a:	b082      	sub	sp, #8
    df2c:	af00      	add	r7, sp, #0
    df2e:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE()) {
    df30:	687b      	ldr	r3, [r7, #4]
    df32:	0018      	movs	r0, r3
    df34:	f000 f927 	bl	e186 <_ZN6SERCOM12isMasterWIREEv>
    df38:	1e03      	subs	r3, r0, #0
    df3a:	d006      	beq.n	df4a <_ZN6SERCOM17prepareAckBitWIREEv+0x22>
    // Send an ACK
    sercom->I2CM.CTRLB.bit.ACKACT = 0;
    df3c:	687b      	ldr	r3, [r7, #4]
    df3e:	681b      	ldr	r3, [r3, #0]
    df40:	685a      	ldr	r2, [r3, #4]
    df42:	4907      	ldr	r1, [pc, #28]	; (df60 <_ZN6SERCOM17prepareAckBitWIREEv+0x38>)
    df44:	400a      	ands	r2, r1
    df46:	605a      	str	r2, [r3, #4]
  } else {
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
  }
}
    df48:	e005      	b.n	df56 <_ZN6SERCOM17prepareAckBitWIREEv+0x2e>
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    df4a:	687b      	ldr	r3, [r7, #4]
    df4c:	681b      	ldr	r3, [r3, #0]
    df4e:	685a      	ldr	r2, [r3, #4]
    df50:	4903      	ldr	r1, [pc, #12]	; (df60 <_ZN6SERCOM17prepareAckBitWIREEv+0x38>)
    df52:	400a      	ands	r2, r1
    df54:	605a      	str	r2, [r3, #4]
}
    df56:	46c0      	nop			; (mov r8, r8)
    df58:	46bd      	mov	sp, r7
    df5a:	b002      	add	sp, #8
    df5c:	bd80      	pop	{r7, pc}
    df5e:	46c0      	nop			; (mov r8, r8)
    df60:	fffbffff 	.word	0xfffbffff

0000df64 <_ZN6SERCOM22prepareCommandBitsWireEh>:

void SERCOM::prepareCommandBitsWire(uint8_t cmd)
{
    df64:	b580      	push	{r7, lr}
    df66:	b082      	sub	sp, #8
    df68:	af00      	add	r7, sp, #0
    df6a:	6078      	str	r0, [r7, #4]
    df6c:	000a      	movs	r2, r1
    df6e:	1cfb      	adds	r3, r7, #3
    df70:	701a      	strb	r2, [r3, #0]
  if(isMasterWIRE()) {
    df72:	687b      	ldr	r3, [r7, #4]
    df74:	0018      	movs	r0, r3
    df76:	f000 f906 	bl	e186 <_ZN6SERCOM12isMasterWIREEv>
    df7a:	1e03      	subs	r3, r0, #0
    df7c:	d017      	beq.n	dfae <_ZN6SERCOM22prepareCommandBitsWireEh+0x4a>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    df7e:	687b      	ldr	r3, [r7, #4]
    df80:	681b      	ldr	r3, [r3, #0]
    df82:	1cfa      	adds	r2, r7, #3
    df84:	7812      	ldrb	r2, [r2, #0]
    df86:	2103      	movs	r1, #3
    df88:	400a      	ands	r2, r1
    df8a:	b2d1      	uxtb	r1, r2
    df8c:	685a      	ldr	r2, [r3, #4]
    df8e:	2003      	movs	r0, #3
    df90:	4001      	ands	r1, r0
    df92:	0409      	lsls	r1, r1, #16
    df94:	480f      	ldr	r0, [pc, #60]	; (dfd4 <_ZN6SERCOM22prepareCommandBitsWireEh+0x70>)
    df96:	4002      	ands	r2, r0
    df98:	430a      	orrs	r2, r1
    df9a:	605a      	str	r2, [r3, #4]

    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
    df9c:	687b      	ldr	r3, [r7, #4]
    df9e:	681b      	ldr	r3, [r3, #0]
    dfa0:	69db      	ldr	r3, [r3, #28]
    dfa2:	075b      	lsls	r3, r3, #29
    dfa4:	0fdb      	lsrs	r3, r3, #31
    dfa6:	b2db      	uxtb	r3, r3
    dfa8:	2b00      	cmp	r3, #0
    dfaa:	d00f      	beq.n	dfcc <_ZN6SERCOM22prepareCommandBitsWireEh+0x68>
    dfac:	e7f6      	b.n	df9c <_ZN6SERCOM22prepareCommandBitsWireEh+0x38>
    {
      // Waiting for synchronization
    }
  } else {
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    dfae:	687b      	ldr	r3, [r7, #4]
    dfb0:	681b      	ldr	r3, [r3, #0]
    dfb2:	1cfa      	adds	r2, r7, #3
    dfb4:	7812      	ldrb	r2, [r2, #0]
    dfb6:	2103      	movs	r1, #3
    dfb8:	400a      	ands	r2, r1
    dfba:	b2d1      	uxtb	r1, r2
    dfbc:	685a      	ldr	r2, [r3, #4]
    dfbe:	2003      	movs	r0, #3
    dfc0:	4001      	ands	r1, r0
    dfc2:	0409      	lsls	r1, r1, #16
    dfc4:	4803      	ldr	r0, [pc, #12]	; (dfd4 <_ZN6SERCOM22prepareCommandBitsWireEh+0x70>)
    dfc6:	4002      	ands	r2, r0
    dfc8:	430a      	orrs	r2, r1
    dfca:	605a      	str	r2, [r3, #4]
  }
}
    dfcc:	46c0      	nop			; (mov r8, r8)
    dfce:	46bd      	mov	sp, r7
    dfd0:	b002      	add	sp, #8
    dfd2:	bd80      	pop	{r7, pc}
    dfd4:	fffcffff 	.word	0xfffcffff

0000dfd8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>:

bool SERCOM::startTransmissionWIRE(uint8_t address, SercomWireReadWriteFlag flag)
{
    dfd8:	b580      	push	{r7, lr}
    dfda:	b082      	sub	sp, #8
    dfdc:	af00      	add	r7, sp, #0
    dfde:	6078      	str	r0, [r7, #4]
    dfe0:	0008      	movs	r0, r1
    dfe2:	0011      	movs	r1, r2
    dfe4:	1cfb      	adds	r3, r7, #3
    dfe6:	1c02      	adds	r2, r0, #0
    dfe8:	701a      	strb	r2, [r3, #0]
    dfea:	1cbb      	adds	r3, r7, #2
    dfec:	1c0a      	adds	r2, r1, #0
    dfee:	701a      	strb	r2, [r3, #0]
  // 7-bits address + 1-bits R/W
  address = (address << 0x1ul) | flag;
    dff0:	1cfb      	adds	r3, r7, #3
    dff2:	781b      	ldrb	r3, [r3, #0]
    dff4:	005b      	lsls	r3, r3, #1
    dff6:	b25a      	sxtb	r2, r3
    dff8:	1cbb      	adds	r3, r7, #2
    dffa:	781b      	ldrb	r3, [r3, #0]
    dffc:	b25b      	sxtb	r3, r3
    dffe:	4313      	orrs	r3, r2
    e000:	b25a      	sxtb	r2, r3
    e002:	1cfb      	adds	r3, r7, #3
    e004:	701a      	strb	r2, [r3, #0]

  // Wait idle or owner bus mode
  while ( !isBusIdleWIRE() && !isBusOwnerWIRE() );
    e006:	687b      	ldr	r3, [r7, #4]
    e008:	0018      	movs	r0, r3
    e00a:	f000 f8e0 	bl	e1ce <_ZN6SERCOM13isBusIdleWIREEv>
    e00e:	0003      	movs	r3, r0
    e010:	001a      	movs	r2, r3
    e012:	2301      	movs	r3, #1
    e014:	4053      	eors	r3, r2
    e016:	b2db      	uxtb	r3, r3
    e018:	2b00      	cmp	r3, #0
    e01a:	d00c      	beq.n	e036 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5e>
    e01c:	687b      	ldr	r3, [r7, #4]
    e01e:	0018      	movs	r0, r3
    e020:	f000 f8e7 	bl	e1f2 <_ZN6SERCOM14isBusOwnerWIREEv>
    e024:	0003      	movs	r3, r0
    e026:	001a      	movs	r2, r3
    e028:	2301      	movs	r3, #1
    e02a:	4053      	eors	r3, r2
    e02c:	b2db      	uxtb	r3, r3
    e02e:	2b00      	cmp	r3, #0
    e030:	d001      	beq.n	e036 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5e>
    e032:	2301      	movs	r3, #1
    e034:	e000      	b.n	e038 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x60>
    e036:	2300      	movs	r3, #0
    e038:	2b00      	cmp	r3, #0
    e03a:	d000      	beq.n	e03e <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x66>
    e03c:	e7e3      	b.n	e006 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>

  // Send start and address
  sercom->I2CM.ADDR.bit.ADDR = address;
    e03e:	687b      	ldr	r3, [r7, #4]
    e040:	681b      	ldr	r3, [r3, #0]
    e042:	1cfa      	adds	r2, r7, #3
    e044:	7812      	ldrb	r2, [r2, #0]
    e046:	b292      	uxth	r2, r2
    e048:	0552      	lsls	r2, r2, #21
    e04a:	0d52      	lsrs	r2, r2, #21
    e04c:	b291      	uxth	r1, r2
    e04e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e050:	0549      	lsls	r1, r1, #21
    e052:	0d49      	lsrs	r1, r1, #21
    e054:	0ad2      	lsrs	r2, r2, #11
    e056:	02d2      	lsls	r2, r2, #11
    e058:	430a      	orrs	r2, r1
    e05a:	625a      	str	r2, [r3, #36]	; 0x24

  // Address Transmitted
  if ( flag == WIRE_WRITE_FLAG ) // Write mode
    e05c:	1cbb      	adds	r3, r7, #2
    e05e:	781b      	ldrb	r3, [r3, #0]
    e060:	2b00      	cmp	r3, #0
    e062:	d10b      	bne.n	e07c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xa4>
  {
    while( !sercom->I2CM.INTFLAG.bit.MB )
    e064:	687b      	ldr	r3, [r7, #4]
    e066:	681b      	ldr	r3, [r3, #0]
    e068:	7e1b      	ldrb	r3, [r3, #24]
    e06a:	07db      	lsls	r3, r3, #31
    e06c:	0fdb      	lsrs	r3, r3, #31
    e06e:	b2db      	uxtb	r3, r3
    e070:	2201      	movs	r2, #1
    e072:	4053      	eors	r3, r2
    e074:	b2db      	uxtb	r3, r3
    e076:	2b00      	cmp	r3, #0
    e078:	d01c      	beq.n	e0b4 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xdc>
    e07a:	e7f3      	b.n	e064 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x8c>
      // Wait transmission complete
    }
  }
  else  // Read mode
  {
    while( !sercom->I2CM.INTFLAG.bit.SB )
    e07c:	687b      	ldr	r3, [r7, #4]
    e07e:	681b      	ldr	r3, [r3, #0]
    e080:	7e1b      	ldrb	r3, [r3, #24]
    e082:	079b      	lsls	r3, r3, #30
    e084:	0fdb      	lsrs	r3, r3, #31
    e086:	b2db      	uxtb	r3, r3
    e088:	2201      	movs	r2, #1
    e08a:	4053      	eors	r3, r2
    e08c:	b2db      	uxtb	r3, r3
    e08e:	2b00      	cmp	r3, #0
    e090:	d010      	beq.n	e0b4 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xdc>
    {
        // If the slave NACKS the address, the MB bit will be set.
        // In that case, send a stop condition and return false.
        if (sercom->I2CM.INTFLAG.bit.MB) {
    e092:	687b      	ldr	r3, [r7, #4]
    e094:	681b      	ldr	r3, [r3, #0]
    e096:	7e1b      	ldrb	r3, [r3, #24]
    e098:	07db      	lsls	r3, r3, #31
    e09a:	0fdb      	lsrs	r3, r3, #31
    e09c:	b2db      	uxtb	r3, r3
    e09e:	2b00      	cmp	r3, #0
    e0a0:	d0ec      	beq.n	e07c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xa4>
            sercom->I2CM.CTRLB.bit.CMD = 3; // Stop condition
    e0a2:	687b      	ldr	r3, [r7, #4]
    e0a4:	681b      	ldr	r3, [r3, #0]
    e0a6:	685a      	ldr	r2, [r3, #4]
    e0a8:	21c0      	movs	r1, #192	; 0xc0
    e0aa:	0289      	lsls	r1, r1, #10
    e0ac:	430a      	orrs	r2, r1
    e0ae:	605a      	str	r2, [r3, #4]
            return false;
    e0b0:	2300      	movs	r3, #0
    e0b2:	e00a      	b.n	e0ca <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf2>
    //sercom->I2CM.INTFLAG.bit.SB = 0x1ul;
  }


  //ACK received (0: ACK, 1: NACK)
  if(sercom->I2CM.STATUS.bit.RXNACK)
    e0b4:	687b      	ldr	r3, [r7, #4]
    e0b6:	681b      	ldr	r3, [r3, #0]
    e0b8:	8b5b      	ldrh	r3, [r3, #26]
    e0ba:	075b      	lsls	r3, r3, #29
    e0bc:	0fdb      	lsrs	r3, r3, #31
    e0be:	b2db      	uxtb	r3, r3
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	d001      	beq.n	e0c8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf0>
  {
    return false;
    e0c4:	2300      	movs	r3, #0
    e0c6:	e000      	b.n	e0ca <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf2>
  }
  else
  {
    return true;
    e0c8:	2301      	movs	r3, #1
  }
}
    e0ca:	0018      	movs	r0, r3
    e0cc:	46bd      	mov	sp, r7
    e0ce:	b002      	add	sp, #8
    e0d0:	bd80      	pop	{r7, pc}

0000e0d2 <_ZN6SERCOM18sendDataMasterWIREEh>:

bool SERCOM::sendDataMasterWIRE(uint8_t data)
{
    e0d2:	b580      	push	{r7, lr}
    e0d4:	b082      	sub	sp, #8
    e0d6:	af00      	add	r7, sp, #0
    e0d8:	6078      	str	r0, [r7, #4]
    e0da:	000a      	movs	r2, r1
    e0dc:	1cfb      	adds	r3, r7, #3
    e0de:	701a      	strb	r2, [r3, #0]
  //Send data
  sercom->I2CM.DATA.bit.DATA = data;
    e0e0:	687b      	ldr	r3, [r7, #4]
    e0e2:	681b      	ldr	r3, [r3, #0]
    e0e4:	1cfa      	adds	r2, r7, #3
    e0e6:	2128      	movs	r1, #40	; 0x28
    e0e8:	7812      	ldrb	r2, [r2, #0]
    e0ea:	545a      	strb	r2, [r3, r1]

  //Wait transmission successful
  while(!sercom->I2CM.INTFLAG.bit.MB) {
    e0ec:	687b      	ldr	r3, [r7, #4]
    e0ee:	681b      	ldr	r3, [r3, #0]
    e0f0:	7e1b      	ldrb	r3, [r3, #24]
    e0f2:	07db      	lsls	r3, r3, #31
    e0f4:	0fdb      	lsrs	r3, r3, #31
    e0f6:	b2db      	uxtb	r3, r3
    e0f8:	2201      	movs	r2, #1
    e0fa:	4053      	eors	r3, r2
    e0fc:	b2db      	uxtb	r3, r3
    e0fe:	2b00      	cmp	r3, #0
    e100:	d009      	beq.n	e116 <_ZN6SERCOM18sendDataMasterWIREEh+0x44>

    // If a bus error occurs, the MB bit may never be set.
    // Check the bus error bit and bail if it's set.
    if (sercom->I2CM.STATUS.bit.BUSERR) {
    e102:	687b      	ldr	r3, [r7, #4]
    e104:	681b      	ldr	r3, [r3, #0]
    e106:	8b5b      	ldrh	r3, [r3, #26]
    e108:	07db      	lsls	r3, r3, #31
    e10a:	0fdb      	lsrs	r3, r3, #31
    e10c:	b2db      	uxtb	r3, r3
    e10e:	2b00      	cmp	r3, #0
    e110:	d0ec      	beq.n	e0ec <_ZN6SERCOM18sendDataMasterWIREEh+0x1a>
      return false;
    e112:	2300      	movs	r3, #0
    e114:	e00a      	b.n	e12c <_ZN6SERCOM18sendDataMasterWIREEh+0x5a>
    }
  }

  //Problems on line? nack received?
  if(sercom->I2CM.STATUS.bit.RXNACK)
    e116:	687b      	ldr	r3, [r7, #4]
    e118:	681b      	ldr	r3, [r3, #0]
    e11a:	8b5b      	ldrh	r3, [r3, #26]
    e11c:	075b      	lsls	r3, r3, #29
    e11e:	0fdb      	lsrs	r3, r3, #31
    e120:	b2db      	uxtb	r3, r3
    e122:	2b00      	cmp	r3, #0
    e124:	d001      	beq.n	e12a <_ZN6SERCOM18sendDataMasterWIREEh+0x58>
    return false;
    e126:	2300      	movs	r3, #0
    e128:	e000      	b.n	e12c <_ZN6SERCOM18sendDataMasterWIREEh+0x5a>
  else
    return true;
    e12a:	2301      	movs	r3, #1
}
    e12c:	0018      	movs	r0, r3
    e12e:	46bd      	mov	sp, r7
    e130:	b002      	add	sp, #8
    e132:	bd80      	pop	{r7, pc}

0000e134 <_ZN6SERCOM17sendDataSlaveWIREEh>:

bool SERCOM::sendDataSlaveWIRE(uint8_t data)
{
    e134:	b580      	push	{r7, lr}
    e136:	b082      	sub	sp, #8
    e138:	af00      	add	r7, sp, #0
    e13a:	6078      	str	r0, [r7, #4]
    e13c:	000a      	movs	r2, r1
    e13e:	1cfb      	adds	r3, r7, #3
    e140:	701a      	strb	r2, [r3, #0]
  //Send data
  sercom->I2CS.DATA.bit.DATA = data;
    e142:	687b      	ldr	r3, [r7, #4]
    e144:	681b      	ldr	r3, [r3, #0]
    e146:	1cfa      	adds	r2, r7, #3
    e148:	2128      	movs	r1, #40	; 0x28
    e14a:	7812      	ldrb	r2, [r2, #0]
    e14c:	545a      	strb	r2, [r3, r1]

  //Problems on line? nack received?
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
    e14e:	687b      	ldr	r3, [r7, #4]
    e150:	681b      	ldr	r3, [r3, #0]
    e152:	7e1b      	ldrb	r3, [r3, #24]
    e154:	075b      	lsls	r3, r3, #29
    e156:	0fdb      	lsrs	r3, r3, #31
    e158:	b2db      	uxtb	r3, r3
    e15a:	2b00      	cmp	r3, #0
    e15c:	d007      	beq.n	e16e <_ZN6SERCOM17sendDataSlaveWIREEh+0x3a>
    e15e:	687b      	ldr	r3, [r7, #4]
    e160:	681b      	ldr	r3, [r3, #0]
    e162:	8b5b      	ldrh	r3, [r3, #26]
    e164:	075b      	lsls	r3, r3, #29
    e166:	0fdb      	lsrs	r3, r3, #31
    e168:	b2db      	uxtb	r3, r3
    e16a:	2b00      	cmp	r3, #0
    e16c:	d001      	beq.n	e172 <_ZN6SERCOM17sendDataSlaveWIREEh+0x3e>
    e16e:	2301      	movs	r3, #1
    e170:	e000      	b.n	e174 <_ZN6SERCOM17sendDataSlaveWIREEh+0x40>
    e172:	2300      	movs	r3, #0
    e174:	2b00      	cmp	r3, #0
    e176:	d001      	beq.n	e17c <_ZN6SERCOM17sendDataSlaveWIREEh+0x48>
    return false;
    e178:	2300      	movs	r3, #0
    e17a:	e000      	b.n	e17e <_ZN6SERCOM17sendDataSlaveWIREEh+0x4a>
  else
    return true;
    e17c:	2301      	movs	r3, #1
}
    e17e:	0018      	movs	r0, r3
    e180:	46bd      	mov	sp, r7
    e182:	b002      	add	sp, #8
    e184:	bd80      	pop	{r7, pc}

0000e186 <_ZN6SERCOM12isMasterWIREEv>:

bool SERCOM::isMasterWIRE( void )
{
    e186:	b580      	push	{r7, lr}
    e188:	b082      	sub	sp, #8
    e18a:	af00      	add	r7, sp, #0
    e18c:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    e18e:	687b      	ldr	r3, [r7, #4]
    e190:	681b      	ldr	r3, [r3, #0]
    e192:	681b      	ldr	r3, [r3, #0]
    e194:	06db      	lsls	r3, r3, #27
    e196:	0f5b      	lsrs	r3, r3, #29
    e198:	b2db      	uxtb	r3, r3
    e19a:	3b05      	subs	r3, #5
    e19c:	425a      	negs	r2, r3
    e19e:	4153      	adcs	r3, r2
    e1a0:	b2db      	uxtb	r3, r3
}
    e1a2:	0018      	movs	r0, r3
    e1a4:	46bd      	mov	sp, r7
    e1a6:	b002      	add	sp, #8
    e1a8:	bd80      	pop	{r7, pc}

0000e1aa <_ZN6SERCOM11isSlaveWIREEv>:

bool SERCOM::isSlaveWIRE( void )
{
    e1aa:	b580      	push	{r7, lr}
    e1ac:	b082      	sub	sp, #8
    e1ae:	af00      	add	r7, sp, #0
    e1b0:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
    e1b2:	687b      	ldr	r3, [r7, #4]
    e1b4:	681b      	ldr	r3, [r3, #0]
    e1b6:	681b      	ldr	r3, [r3, #0]
    e1b8:	06db      	lsls	r3, r3, #27
    e1ba:	0f5b      	lsrs	r3, r3, #29
    e1bc:	b2db      	uxtb	r3, r3
    e1be:	3b04      	subs	r3, #4
    e1c0:	425a      	negs	r2, r3
    e1c2:	4153      	adcs	r3, r2
    e1c4:	b2db      	uxtb	r3, r3
}
    e1c6:	0018      	movs	r0, r3
    e1c8:	46bd      	mov	sp, r7
    e1ca:	b002      	add	sp, #8
    e1cc:	bd80      	pop	{r7, pc}

0000e1ce <_ZN6SERCOM13isBusIdleWIREEv>:

bool SERCOM::isBusIdleWIRE( void )
{
    e1ce:	b580      	push	{r7, lr}
    e1d0:	b082      	sub	sp, #8
    e1d2:	af00      	add	r7, sp, #0
    e1d4:	6078      	str	r0, [r7, #4]
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    e1d6:	687b      	ldr	r3, [r7, #4]
    e1d8:	681b      	ldr	r3, [r3, #0]
    e1da:	8b5b      	ldrh	r3, [r3, #26]
    e1dc:	069b      	lsls	r3, r3, #26
    e1de:	0f9b      	lsrs	r3, r3, #30
    e1e0:	b2db      	uxtb	r3, r3
    e1e2:	3b01      	subs	r3, #1
    e1e4:	425a      	negs	r2, r3
    e1e6:	4153      	adcs	r3, r2
    e1e8:	b2db      	uxtb	r3, r3
}
    e1ea:	0018      	movs	r0, r3
    e1ec:	46bd      	mov	sp, r7
    e1ee:	b002      	add	sp, #8
    e1f0:	bd80      	pop	{r7, pc}

0000e1f2 <_ZN6SERCOM14isBusOwnerWIREEv>:

bool SERCOM::isBusOwnerWIRE( void )
{
    e1f2:	b580      	push	{r7, lr}
    e1f4:	b082      	sub	sp, #8
    e1f6:	af00      	add	r7, sp, #0
    e1f8:	6078      	str	r0, [r7, #4]
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    e1fa:	687b      	ldr	r3, [r7, #4]
    e1fc:	681b      	ldr	r3, [r3, #0]
    e1fe:	8b5b      	ldrh	r3, [r3, #26]
    e200:	069b      	lsls	r3, r3, #26
    e202:	0f9b      	lsrs	r3, r3, #30
    e204:	b2db      	uxtb	r3, r3
    e206:	3b02      	subs	r3, #2
    e208:	425a      	negs	r2, r3
    e20a:	4153      	adcs	r3, r2
    e20c:	b2db      	uxtb	r3, r3
}
    e20e:	0018      	movs	r0, r3
    e210:	46bd      	mov	sp, r7
    e212:	b002      	add	sp, #8
    e214:	bd80      	pop	{r7, pc}

0000e216 <_ZN6SERCOM15isDataReadyWIREEv>:

bool SERCOM::isDataReadyWIRE( void )
{
    e216:	b580      	push	{r7, lr}
    e218:	b082      	sub	sp, #8
    e21a:	af00      	add	r7, sp, #0
    e21c:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.DRDY;
    e21e:	687b      	ldr	r3, [r7, #4]
    e220:	681b      	ldr	r3, [r3, #0]
    e222:	7e1b      	ldrb	r3, [r3, #24]
    e224:	075b      	lsls	r3, r3, #29
    e226:	0fdb      	lsrs	r3, r3, #31
    e228:	b2db      	uxtb	r3, r3
}
    e22a:	0018      	movs	r0, r3
    e22c:	46bd      	mov	sp, r7
    e22e:	b002      	add	sp, #8
    e230:	bd80      	pop	{r7, pc}

0000e232 <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
    e232:	b580      	push	{r7, lr}
    e234:	b082      	sub	sp, #8
    e236:	af00      	add	r7, sp, #0
    e238:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.PREC;
    e23a:	687b      	ldr	r3, [r7, #4]
    e23c:	681b      	ldr	r3, [r3, #0]
    e23e:	7e1b      	ldrb	r3, [r3, #24]
    e240:	07db      	lsls	r3, r3, #31
    e242:	0fdb      	lsrs	r3, r3, #31
    e244:	b2db      	uxtb	r3, r3
}
    e246:	0018      	movs	r0, r3
    e248:	46bd      	mov	sp, r7
    e24a:	b002      	add	sp, #8
    e24c:	bd80      	pop	{r7, pc}

0000e24e <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
    e24e:	b580      	push	{r7, lr}
    e250:	b082      	sub	sp, #8
    e252:	af00      	add	r7, sp, #0
    e254:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.STATUS.bit.SR;
    e256:	687b      	ldr	r3, [r7, #4]
    e258:	681b      	ldr	r3, [r3, #0]
    e25a:	8b5b      	ldrh	r3, [r3, #26]
    e25c:	06db      	lsls	r3, r3, #27
    e25e:	0fdb      	lsrs	r3, r3, #31
    e260:	b2db      	uxtb	r3, r3
}
    e262:	0018      	movs	r0, r3
    e264:	46bd      	mov	sp, r7
    e266:	b002      	add	sp, #8
    e268:	bd80      	pop	{r7, pc}

0000e26a <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
    e26a:	b580      	push	{r7, lr}
    e26c:	b082      	sub	sp, #8
    e26e:	af00      	add	r7, sp, #0
    e270:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.AMATCH;
    e272:	687b      	ldr	r3, [r7, #4]
    e274:	681b      	ldr	r3, [r3, #0]
    e276:	7e1b      	ldrb	r3, [r3, #24]
    e278:	079b      	lsls	r3, r3, #30
    e27a:	0fdb      	lsrs	r3, r3, #31
    e27c:	b2db      	uxtb	r3, r3
}
    e27e:	0018      	movs	r0, r3
    e280:	46bd      	mov	sp, r7
    e282:	b002      	add	sp, #8
    e284:	bd80      	pop	{r7, pc}

0000e286 <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
    e286:	b580      	push	{r7, lr}
    e288:	b082      	sub	sp, #8
    e28a:	af00      	add	r7, sp, #0
    e28c:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.STATUS.bit.DIR;
    e28e:	687b      	ldr	r3, [r7, #4]
    e290:	681b      	ldr	r3, [r3, #0]
    e292:	8b5b      	ldrh	r3, [r3, #26]
    e294:	071b      	lsls	r3, r3, #28
    e296:	0fdb      	lsrs	r3, r3, #31
    e298:	b2db      	uxtb	r3, r3
}
    e29a:	0018      	movs	r0, r3
    e29c:	46bd      	mov	sp, r7
    e29e:	b002      	add	sp, #8
    e2a0:	bd80      	pop	{r7, pc}

0000e2a2 <_ZN6SERCOM12readDataWIREEv>:
  else
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
    e2a2:	b580      	push	{r7, lr}
    e2a4:	b082      	sub	sp, #8
    e2a6:	af00      	add	r7, sp, #0
    e2a8:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE())
    e2aa:	687b      	ldr	r3, [r7, #4]
    e2ac:	0018      	movs	r0, r3
    e2ae:	f7ff ff6a 	bl	e186 <_ZN6SERCOM12isMasterWIREEv>
    e2b2:	1e03      	subs	r3, r0, #0
    e2b4:	d011      	beq.n	e2da <_ZN6SERCOM12readDataWIREEv+0x38>
  {
    while( sercom->I2CM.INTFLAG.bit.SB == 0 )
    e2b6:	687b      	ldr	r3, [r7, #4]
    e2b8:	681b      	ldr	r3, [r3, #0]
    e2ba:	7e1b      	ldrb	r3, [r3, #24]
    e2bc:	079b      	lsls	r3, r3, #30
    e2be:	0fdb      	lsrs	r3, r3, #31
    e2c0:	b2db      	uxtb	r3, r3
    e2c2:	2201      	movs	r2, #1
    e2c4:	4053      	eors	r3, r2
    e2c6:	b2db      	uxtb	r3, r3
    e2c8:	2b00      	cmp	r3, #0
    e2ca:	d000      	beq.n	e2ce <_ZN6SERCOM12readDataWIREEv+0x2c>
    e2cc:	e7f3      	b.n	e2b6 <_ZN6SERCOM12readDataWIREEv+0x14>
    {
      // Waiting complete receive
    }

    return sercom->I2CM.DATA.bit.DATA ;
    e2ce:	687b      	ldr	r3, [r7, #4]
    e2d0:	681b      	ldr	r3, [r3, #0]
    e2d2:	2228      	movs	r2, #40	; 0x28
    e2d4:	5c9b      	ldrb	r3, [r3, r2]
    e2d6:	b2db      	uxtb	r3, r3
    e2d8:	e004      	b.n	e2e4 <_ZN6SERCOM12readDataWIREEv+0x42>
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
    e2da:	687b      	ldr	r3, [r7, #4]
    e2dc:	681b      	ldr	r3, [r3, #0]
    e2de:	2228      	movs	r2, #40	; 0x28
    e2e0:	5c9b      	ldrb	r3, [r3, r2]
    e2e2:	b2db      	uxtb	r3, r3
  }
}
    e2e4:	0018      	movs	r0, r3
    e2e6:	46bd      	mov	sp, r7
    e2e8:	b002      	add	sp, #8
    e2ea:	bd80      	pop	{r7, pc}

0000e2ec <_ZN6SERCOM13initClockNVICEv>:


void SERCOM::initClockNVIC( void )
{
    e2ec:	b580      	push	{r7, lr}
    e2ee:	b084      	sub	sp, #16
    e2f0:	af00      	add	r7, sp, #0
    e2f2:	6078      	str	r0, [r7, #4]
  uint8_t clockId = 0;
    e2f4:	230f      	movs	r3, #15
    e2f6:	18fb      	adds	r3, r7, r3
    e2f8:	2200      	movs	r2, #0
    e2fa:	701a      	strb	r2, [r3, #0]
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
    e2fc:	230e      	movs	r3, #14
    e2fe:	18fb      	adds	r3, r7, r3
    e300:	22fe      	movs	r2, #254	; 0xfe
    e302:	701a      	strb	r2, [r3, #0]

  if(sercom == SERCOM0)
    e304:	687b      	ldr	r3, [r7, #4]
    e306:	681b      	ldr	r3, [r3, #0]
    e308:	4a40      	ldr	r2, [pc, #256]	; (e40c <_ZN6SERCOM13initClockNVICEv+0x120>)
    e30a:	4293      	cmp	r3, r2
    e30c:	d108      	bne.n	e320 <_ZN6SERCOM13initClockNVICEv+0x34>
  {
    clockId = GCM_SERCOM0_CORE;
    e30e:	230f      	movs	r3, #15
    e310:	18fb      	adds	r3, r7, r3
    e312:	2214      	movs	r2, #20
    e314:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM0_IRQn;
    e316:	230e      	movs	r3, #14
    e318:	18fb      	adds	r3, r7, r3
    e31a:	2209      	movs	r2, #9
    e31c:	701a      	strb	r2, [r3, #0]
    e31e:	e044      	b.n	e3aa <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM1)
    e320:	687b      	ldr	r3, [r7, #4]
    e322:	681b      	ldr	r3, [r3, #0]
    e324:	4a3a      	ldr	r2, [pc, #232]	; (e410 <_ZN6SERCOM13initClockNVICEv+0x124>)
    e326:	4293      	cmp	r3, r2
    e328:	d108      	bne.n	e33c <_ZN6SERCOM13initClockNVICEv+0x50>
  {
    clockId = GCM_SERCOM1_CORE;
    e32a:	230f      	movs	r3, #15
    e32c:	18fb      	adds	r3, r7, r3
    e32e:	2215      	movs	r2, #21
    e330:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM1_IRQn;
    e332:	230e      	movs	r3, #14
    e334:	18fb      	adds	r3, r7, r3
    e336:	220a      	movs	r2, #10
    e338:	701a      	strb	r2, [r3, #0]
    e33a:	e036      	b.n	e3aa <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM2)
    e33c:	687b      	ldr	r3, [r7, #4]
    e33e:	681b      	ldr	r3, [r3, #0]
    e340:	4a34      	ldr	r2, [pc, #208]	; (e414 <_ZN6SERCOM13initClockNVICEv+0x128>)
    e342:	4293      	cmp	r3, r2
    e344:	d108      	bne.n	e358 <_ZN6SERCOM13initClockNVICEv+0x6c>
  {
    clockId = GCM_SERCOM2_CORE;
    e346:	230f      	movs	r3, #15
    e348:	18fb      	adds	r3, r7, r3
    e34a:	2216      	movs	r2, #22
    e34c:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM2_IRQn;
    e34e:	230e      	movs	r3, #14
    e350:	18fb      	adds	r3, r7, r3
    e352:	220b      	movs	r2, #11
    e354:	701a      	strb	r2, [r3, #0]
    e356:	e028      	b.n	e3aa <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM3)
    e358:	687b      	ldr	r3, [r7, #4]
    e35a:	681b      	ldr	r3, [r3, #0]
    e35c:	4a2e      	ldr	r2, [pc, #184]	; (e418 <_ZN6SERCOM13initClockNVICEv+0x12c>)
    e35e:	4293      	cmp	r3, r2
    e360:	d108      	bne.n	e374 <_ZN6SERCOM13initClockNVICEv+0x88>
  {
    clockId = GCM_SERCOM3_CORE;
    e362:	230f      	movs	r3, #15
    e364:	18fb      	adds	r3, r7, r3
    e366:	2217      	movs	r2, #23
    e368:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM3_IRQn;
    e36a:	230e      	movs	r3, #14
    e36c:	18fb      	adds	r3, r7, r3
    e36e:	220c      	movs	r2, #12
    e370:	701a      	strb	r2, [r3, #0]
    e372:	e01a      	b.n	e3aa <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    e374:	687b      	ldr	r3, [r7, #4]
    e376:	681b      	ldr	r3, [r3, #0]
    e378:	4a28      	ldr	r2, [pc, #160]	; (e41c <_ZN6SERCOM13initClockNVICEv+0x130>)
    e37a:	4293      	cmp	r3, r2
    e37c:	d108      	bne.n	e390 <_ZN6SERCOM13initClockNVICEv+0xa4>
  {
    clockId = GCM_SERCOM4_CORE;
    e37e:	230f      	movs	r3, #15
    e380:	18fb      	adds	r3, r7, r3
    e382:	2218      	movs	r2, #24
    e384:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM4_IRQn;
    e386:	230e      	movs	r3, #14
    e388:	18fb      	adds	r3, r7, r3
    e38a:	220d      	movs	r2, #13
    e38c:	701a      	strb	r2, [r3, #0]
    e38e:	e00c      	b.n	e3aa <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    e390:	687b      	ldr	r3, [r7, #4]
    e392:	681b      	ldr	r3, [r3, #0]
    e394:	4a22      	ldr	r2, [pc, #136]	; (e420 <_ZN6SERCOM13initClockNVICEv+0x134>)
    e396:	4293      	cmp	r3, r2
    e398:	d107      	bne.n	e3aa <_ZN6SERCOM13initClockNVICEv+0xbe>
  {
    clockId = GCM_SERCOM5_CORE;
    e39a:	230f      	movs	r3, #15
    e39c:	18fb      	adds	r3, r7, r3
    e39e:	2219      	movs	r2, #25
    e3a0:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM5_IRQn;
    e3a2:	230e      	movs	r3, #14
    e3a4:	18fb      	adds	r3, r7, r3
    e3a6:	220e      	movs	r2, #14
    e3a8:	701a      	strb	r2, [r3, #0]
  }
  #endif // SERCOM5

  if ( IdNvic == PendSV_IRQn )
    e3aa:	230e      	movs	r3, #14
    e3ac:	18fb      	adds	r3, r7, r3
    e3ae:	781b      	ldrb	r3, [r3, #0]
    e3b0:	b25b      	sxtb	r3, r3
    e3b2:	3302      	adds	r3, #2
    e3b4:	d025      	beq.n	e402 <_ZN6SERCOM13initClockNVICEv+0x116>
    // We got a problem here
    return ;
  }

  // Setting NVIC
  NVIC_EnableIRQ(IdNvic);
    e3b6:	230e      	movs	r3, #14
    e3b8:	18fb      	adds	r3, r7, r3
    e3ba:	781b      	ldrb	r3, [r3, #0]
    e3bc:	b25b      	sxtb	r3, r3
    e3be:	0018      	movs	r0, r3
    e3c0:	f7ff f998 	bl	d6f4 <__NVIC_EnableIRQ>
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */
    e3c4:	230e      	movs	r3, #14
    e3c6:	18fb      	adds	r3, r7, r3
    e3c8:	781b      	ldrb	r3, [r3, #0]
    e3ca:	b25b      	sxtb	r3, r3
    e3cc:	2103      	movs	r1, #3
    e3ce:	0018      	movs	r0, r3
    e3d0:	f7ff f9aa 	bl	d728 <__NVIC_SetPriority>

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    e3d4:	4913      	ldr	r1, [pc, #76]	; (e424 <_ZN6SERCOM13initClockNVICEv+0x138>)
    e3d6:	230f      	movs	r3, #15
    e3d8:	18fb      	adds	r3, r7, r3
    e3da:	781b      	ldrb	r3, [r3, #0]
    e3dc:	b29b      	uxth	r3, r3
    e3de:	223f      	movs	r2, #63	; 0x3f
    e3e0:	4013      	ands	r3, r2
    e3e2:	b29b      	uxth	r3, r3
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    e3e4:	2280      	movs	r2, #128	; 0x80
    e3e6:	01d2      	lsls	r2, r2, #7
    e3e8:	4313      	orrs	r3, r2
    e3ea:	b29b      	uxth	r3, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    e3ec:	804b      	strh	r3, [r1, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    e3ee:	4b0d      	ldr	r3, [pc, #52]	; (e424 <_ZN6SERCOM13initClockNVICEv+0x138>)
    e3f0:	785b      	ldrb	r3, [r3, #1]
    e3f2:	b2db      	uxtb	r3, r3
    e3f4:	b25b      	sxtb	r3, r3
    e3f6:	b2db      	uxtb	r3, r3
    e3f8:	09db      	lsrs	r3, r3, #7
    e3fa:	b2db      	uxtb	r3, r3
    e3fc:	2b00      	cmp	r3, #0
    e3fe:	d001      	beq.n	e404 <_ZN6SERCOM13initClockNVICEv+0x118>
    e400:	e7f5      	b.n	e3ee <_ZN6SERCOM13initClockNVICEv+0x102>
    return ;
    e402:	46c0      	nop			; (mov r8, r8)
  {
    /* Wait for synchronization */
  }
}
    e404:	46bd      	mov	sp, r7
    e406:	b004      	add	sp, #16
    e408:	bd80      	pop	{r7, pc}
    e40a:	46c0      	nop			; (mov r8, r8)
    e40c:	42000800 	.word	0x42000800
    e410:	42000c00 	.word	0x42000c00
    e414:	42001000 	.word	0x42001000
    e418:	42001400 	.word	0x42001400
    e41c:	42001800 	.word	0x42001800
    e420:	42001c00 	.word	0x42001c00
    e424:	40000c00 	.word	0x40000c00

0000e428 <_ZN7Serial_C1ER14USBDeviceClass>:
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    e428:	b580      	push	{r7, lr}
    e42a:	b082      	sub	sp, #8
    e42c:	af00      	add	r7, sp, #0
    e42e:	6078      	str	r0, [r7, #4]
    e430:	6039      	str	r1, [r7, #0]
    e432:	687b      	ldr	r3, [r7, #4]
    e434:	0018      	movs	r0, r3
    e436:	f7f5 f8d3 	bl	35e0 <_ZN6StreamC1Ev>
    e43a:	4a07      	ldr	r2, [pc, #28]	; (e458 <_ZN7Serial_C1ER14USBDeviceClass+0x30>)
    e43c:	687b      	ldr	r3, [r7, #4]
    e43e:	601a      	str	r2, [r3, #0]
    e440:	687b      	ldr	r3, [r7, #4]
    e442:	683a      	ldr	r2, [r7, #0]
    e444:	611a      	str	r2, [r3, #16]
    e446:	687b      	ldr	r3, [r7, #4]
    e448:	2200      	movs	r2, #0
    e44a:	761a      	strb	r2, [r3, #24]
    e44c:	687b      	ldr	r3, [r7, #4]
    e44e:	0018      	movs	r0, r3
    e450:	46bd      	mov	sp, r7
    e452:	b002      	add	sp, #8
    e454:	bd80      	pop	{r7, pc}
    e456:	46c0      	nop			; (mov r8, r8)
    e458:	00014088 	.word	0x00014088

0000e45c <_Z16CDC_GetInterfacePh>:
{
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
    e45c:	b580      	push	{r7, lr}
    e45e:	b082      	sub	sp, #8
    e460:	af00      	add	r7, sp, #0
    e462:	6078      	str	r0, [r7, #4]
	interfaceNum[0] += 2;	// uses 2
    e464:	687b      	ldr	r3, [r7, #4]
    e466:	781b      	ldrb	r3, [r3, #0]
    e468:	3302      	adds	r3, #2
    e46a:	b2da      	uxtb	r2, r3
    e46c:	687b      	ldr	r3, [r7, #4]
    e46e:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    e470:	4905      	ldr	r1, [pc, #20]	; (e488 <_Z16CDC_GetInterfacePh+0x2c>)
    e472:	4b06      	ldr	r3, [pc, #24]	; (e48c <_Z16CDC_GetInterfacePh+0x30>)
    e474:	2242      	movs	r2, #66	; 0x42
    e476:	0018      	movs	r0, r3
    e478:	f7f7 fdae 	bl	5fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
    e47c:	0003      	movs	r3, r0
}
    e47e:	0018      	movs	r0, r3
    e480:	46bd      	mov	sp, r7
    e482:	b002      	add	sp, #8
    e484:	bd80      	pop	{r7, pc}
    e486:	46c0      	nop			; (mov r8, r8)
    e488:	2000005c 	.word	0x2000005c
    e48c:	200008f0 	.word	0x200008f0

0000e490 <_Z9CDC_SetupR8USBSetup>:

bool CDC_Setup(USBSetup& setup)
{
    e490:	b580      	push	{r7, lr}
    e492:	b084      	sub	sp, #16
    e494:	af00      	add	r7, sp, #0
    e496:	6078      	str	r0, [r7, #4]
	uint8_t requestType = setup.bmRequestType;
    e498:	230f      	movs	r3, #15
    e49a:	18fb      	adds	r3, r7, r3
    e49c:	687a      	ldr	r2, [r7, #4]
    e49e:	7812      	ldrb	r2, [r2, #0]
    e4a0:	701a      	strb	r2, [r3, #0]
	uint8_t r = setup.bRequest;
    e4a2:	230e      	movs	r3, #14
    e4a4:	18fb      	adds	r3, r7, r3
    e4a6:	687a      	ldr	r2, [r7, #4]
    e4a8:	7852      	ldrb	r2, [r2, #1]
    e4aa:	701a      	strb	r2, [r3, #0]

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    e4ac:	230f      	movs	r3, #15
    e4ae:	18fb      	adds	r3, r7, r3
    e4b0:	781b      	ldrb	r3, [r3, #0]
    e4b2:	2ba1      	cmp	r3, #161	; 0xa1
    e4b4:	d10c      	bne.n	e4d0 <_Z9CDC_SetupR8USBSetup+0x40>
	{
		if (r == CDC_GET_LINE_CODING)
    e4b6:	230e      	movs	r3, #14
    e4b8:	18fb      	adds	r3, r7, r3
    e4ba:	781b      	ldrb	r3, [r3, #0]
    e4bc:	2b21      	cmp	r3, #33	; 0x21
    e4be:	d107      	bne.n	e4d0 <_Z9CDC_SetupR8USBSetup+0x40>
		{
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    e4c0:	492c      	ldr	r1, [pc, #176]	; (e574 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e4c2:	4b2d      	ldr	r3, [pc, #180]	; (e578 <_Z9CDC_SetupR8USBSetup+0xe8>)
    e4c4:	2207      	movs	r2, #7
    e4c6:	0018      	movs	r0, r3
    e4c8:	f7f7 fd86 	bl	5fd8 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    e4cc:	2301      	movs	r3, #1
    e4ce:	e04c      	b.n	e56a <_Z9CDC_SetupR8USBSetup+0xda>
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    e4d0:	230f      	movs	r3, #15
    e4d2:	18fb      	adds	r3, r7, r3
    e4d4:	781b      	ldrb	r3, [r3, #0]
    e4d6:	2b21      	cmp	r3, #33	; 0x21
    e4d8:	d146      	bne.n	e568 <_Z9CDC_SetupR8USBSetup+0xd8>
	{
		if (r == CDC_SET_LINE_CODING)
    e4da:	230e      	movs	r3, #14
    e4dc:	18fb      	adds	r3, r7, r3
    e4de:	781b      	ldrb	r3, [r3, #0]
    e4e0:	2b20      	cmp	r3, #32
    e4e2:	d105      	bne.n	e4f0 <_Z9CDC_SetupR8USBSetup+0x60>
		{
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    e4e4:	4923      	ldr	r1, [pc, #140]	; (e574 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e4e6:	4b24      	ldr	r3, [pc, #144]	; (e578 <_Z9CDC_SetupR8USBSetup+0xe8>)
    e4e8:	2207      	movs	r2, #7
    e4ea:	0018      	movs	r0, r3
    e4ec:	f7f7 fad2 	bl	5a94 <_ZN14USBDeviceClass11recvControlEPvm>
		}

		if (r == CDC_SET_CONTROL_LINE_STATE)
    e4f0:	230e      	movs	r3, #14
    e4f2:	18fb      	adds	r3, r7, r3
    e4f4:	781b      	ldrb	r3, [r3, #0]
    e4f6:	2b22      	cmp	r3, #34	; 0x22
    e4f8:	d103      	bne.n	e502 <_Z9CDC_SetupR8USBSetup+0x72>
		{
			_usbLineInfo.lineState = setup.wValueL;
    e4fa:	687b      	ldr	r3, [r7, #4]
    e4fc:	789a      	ldrb	r2, [r3, #2]
    e4fe:	4b1d      	ldr	r3, [pc, #116]	; (e574 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e500:	71da      	strb	r2, [r3, #7]
		}

		if (r == CDC_SET_LINE_CODING || r == CDC_SET_CONTROL_LINE_STATE)
    e502:	230e      	movs	r3, #14
    e504:	18fb      	adds	r3, r7, r3
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	2b20      	cmp	r3, #32
    e50a:	d004      	beq.n	e516 <_Z9CDC_SetupR8USBSetup+0x86>
    e50c:	230e      	movs	r3, #14
    e50e:	18fb      	adds	r3, r7, r3
    e510:	781b      	ldrb	r3, [r3, #0]
    e512:	2b22      	cmp	r3, #34	; 0x22
    e514:	d119      	bne.n	e54a <_Z9CDC_SetupR8USBSetup+0xba>
		{
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed. We check DTR state to determine if host 
			// port is open (bit 0 of lineState).
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    e516:	4b17      	ldr	r3, [pc, #92]	; (e574 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e518:	681a      	ldr	r2, [r3, #0]
    e51a:	2396      	movs	r3, #150	; 0x96
    e51c:	00db      	lsls	r3, r3, #3
    e51e:	429a      	cmp	r2, r3
    e520:	d108      	bne.n	e534 <_Z9CDC_SetupR8USBSetup+0xa4>
    e522:	4b14      	ldr	r3, [pc, #80]	; (e574 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e524:	79db      	ldrb	r3, [r3, #7]
    e526:	b2db      	uxtb	r3, r3
    e528:	001a      	movs	r2, r3
    e52a:	2301      	movs	r3, #1
    e52c:	4013      	ands	r3, r2
    e52e:	d101      	bne.n	e534 <_Z9CDC_SetupR8USBSetup+0xa4>
    e530:	2301      	movs	r3, #1
    e532:	e000      	b.n	e536 <_Z9CDC_SetupR8USBSetup+0xa6>
    e534:	2300      	movs	r3, #0
    e536:	2b00      	cmp	r3, #0
    e538:	d003      	beq.n	e542 <_Z9CDC_SetupR8USBSetup+0xb2>
			{
				initiateReset(250);
    e53a:	20fa      	movs	r0, #250	; 0xfa
    e53c:	f7f4 fefc 	bl	3338 <initiateReset>
    e540:	e001      	b.n	e546 <_Z9CDC_SetupR8USBSetup+0xb6>
			}
			else
			{
				cancelReset();
    e542:	f7f4 ff07 	bl	3354 <cancelReset>
			}
			return false;
    e546:	2300      	movs	r3, #0
    e548:	e00f      	b.n	e56a <_Z9CDC_SetupR8USBSetup+0xda>
		}

		if (CDC_SEND_BREAK == r)
    e54a:	230e      	movs	r3, #14
    e54c:	18fb      	adds	r3, r7, r3
    e54e:	781b      	ldrb	r3, [r3, #0]
    e550:	2b23      	cmp	r3, #35	; 0x23
    e552:	d109      	bne.n	e568 <_Z9CDC_SetupR8USBSetup+0xd8>
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    e554:	687b      	ldr	r3, [r7, #4]
    e556:	78db      	ldrb	r3, [r3, #3]
    e558:	021b      	lsls	r3, r3, #8
    e55a:	687a      	ldr	r2, [r7, #4]
    e55c:	7892      	ldrb	r2, [r2, #2]
    e55e:	431a      	orrs	r2, r3
    e560:	4b06      	ldr	r3, [pc, #24]	; (e57c <_Z9CDC_SetupR8USBSetup+0xec>)
    e562:	601a      	str	r2, [r3, #0]
			return false;
    e564:	2300      	movs	r3, #0
    e566:	e000      	b.n	e56a <_Z9CDC_SetupR8USBSetup+0xda>
		}
	}
	return false;
    e568:	2300      	movs	r3, #0
}
    e56a:	0018      	movs	r0, r3
    e56c:	46bd      	mov	sp, r7
    e56e:	b004      	add	sp, #16
    e570:	bd80      	pop	{r7, pc}
    e572:	46c0      	nop			; (mov r8, r8)
    e574:	20000050 	.word	0x20000050
    e578:	200008f0 	.word	0x200008f0
    e57c:	20000058 	.word	0x20000058

0000e580 <_ZN7Serial_9availableEv>:
void Serial_::end(void)
{
}

int Serial_::available(void)
{
    e580:	b580      	push	{r7, lr}
    e582:	b082      	sub	sp, #8
    e584:	af00      	add	r7, sp, #0
    e586:	6078      	str	r0, [r7, #4]
	return usb.available(CDC_ENDPOINT_OUT);
    e588:	687b      	ldr	r3, [r7, #4]
    e58a:	691b      	ldr	r3, [r3, #16]
    e58c:	2102      	movs	r1, #2
    e58e:	0018      	movs	r0, r3
    e590:	f7f7 fab8 	bl	5b04 <_ZN14USBDeviceClass9availableEm>
    e594:	0003      	movs	r3, r0
}
    e596:	0018      	movs	r0, r3
    e598:	46bd      	mov	sp, r7
    e59a:	b002      	add	sp, #8
    e59c:	bd80      	pop	{r7, pc}

0000e59e <_ZN7Serial_17availableForWriteEv>:

int Serial_::availableForWrite(void)
{
    e59e:	b580      	push	{r7, lr}
    e5a0:	b082      	sub	sp, #8
    e5a2:	af00      	add	r7, sp, #0
    e5a4:	6078      	str	r0, [r7, #4]
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
    e5a6:	233f      	movs	r3, #63	; 0x3f
}
    e5a8:	0018      	movs	r0, r3
    e5aa:	46bd      	mov	sp, r7
    e5ac:	b002      	add	sp, #8
    e5ae:	bd80      	pop	{r7, pc}

0000e5b0 <_ZN7Serial_4peekEv>:

int _serialPeek = -1;

int Serial_::peek(void)
{
    e5b0:	b580      	push	{r7, lr}
    e5b2:	b082      	sub	sp, #8
    e5b4:	af00      	add	r7, sp, #0
    e5b6:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1)
    e5b8:	4b0b      	ldr	r3, [pc, #44]	; (e5e8 <_ZN7Serial_4peekEv+0x38>)
    e5ba:	681b      	ldr	r3, [r3, #0]
    e5bc:	3301      	adds	r3, #1
    e5be:	d002      	beq.n	e5c6 <_ZN7Serial_4peekEv+0x16>
		return _serialPeek;
    e5c0:	4b09      	ldr	r3, [pc, #36]	; (e5e8 <_ZN7Serial_4peekEv+0x38>)
    e5c2:	681b      	ldr	r3, [r3, #0]
    e5c4:	e00b      	b.n	e5de <_ZN7Serial_4peekEv+0x2e>
	_serialPeek = read();
    e5c6:	687b      	ldr	r3, [r7, #4]
    e5c8:	681b      	ldr	r3, [r3, #0]
    e5ca:	3314      	adds	r3, #20
    e5cc:	681b      	ldr	r3, [r3, #0]
    e5ce:	687a      	ldr	r2, [r7, #4]
    e5d0:	0010      	movs	r0, r2
    e5d2:	4798      	blx	r3
    e5d4:	0002      	movs	r2, r0
    e5d6:	4b04      	ldr	r3, [pc, #16]	; (e5e8 <_ZN7Serial_4peekEv+0x38>)
    e5d8:	601a      	str	r2, [r3, #0]
	return _serialPeek;
    e5da:	4b03      	ldr	r3, [pc, #12]	; (e5e8 <_ZN7Serial_4peekEv+0x38>)
    e5dc:	681b      	ldr	r3, [r3, #0]
}
    e5de:	0018      	movs	r0, r3
    e5e0:	46bd      	mov	sp, r7
    e5e2:	b002      	add	sp, #8
    e5e4:	bd80      	pop	{r7, pc}
    e5e6:	46c0      	nop			; (mov r8, r8)
    e5e8:	200000a0 	.word	0x200000a0

0000e5ec <_ZN7Serial_4readEv>:

int Serial_::read(void)
{
    e5ec:	b580      	push	{r7, lr}
    e5ee:	b084      	sub	sp, #16
    e5f0:	af00      	add	r7, sp, #0
    e5f2:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1) {
    e5f4:	4b0b      	ldr	r3, [pc, #44]	; (e624 <_ZN7Serial_4readEv+0x38>)
    e5f6:	681b      	ldr	r3, [r3, #0]
    e5f8:	3301      	adds	r3, #1
    e5fa:	d008      	beq.n	e60e <_ZN7Serial_4readEv+0x22>
		int res = _serialPeek;
    e5fc:	4b09      	ldr	r3, [pc, #36]	; (e624 <_ZN7Serial_4readEv+0x38>)
    e5fe:	681b      	ldr	r3, [r3, #0]
    e600:	60fb      	str	r3, [r7, #12]
		_serialPeek = -1;
    e602:	4b08      	ldr	r3, [pc, #32]	; (e624 <_ZN7Serial_4readEv+0x38>)
    e604:	2201      	movs	r2, #1
    e606:	4252      	negs	r2, r2
    e608:	601a      	str	r2, [r3, #0]
		return res;
    e60a:	68fb      	ldr	r3, [r7, #12]
    e60c:	e006      	b.n	e61c <_ZN7Serial_4readEv+0x30>
	}
	return usb.recv(CDC_ENDPOINT_OUT);
    e60e:	687b      	ldr	r3, [r7, #4]
    e610:	691b      	ldr	r3, [r3, #16]
    e612:	2102      	movs	r1, #2
    e614:	0018      	movs	r0, r3
    e616:	f7f7 fb35 	bl	5c84 <_ZN14USBDeviceClass4recvEm>
    e61a:	0003      	movs	r3, r0
}
    e61c:	0018      	movs	r0, r3
    e61e:	46bd      	mov	sp, r7
    e620:	b004      	add	sp, #16
    e622:	bd80      	pop	{r7, pc}
    e624:	200000a0 	.word	0x200000a0

0000e628 <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
    e628:	b580      	push	{r7, lr}
    e62a:	b082      	sub	sp, #8
    e62c:	af00      	add	r7, sp, #0
    e62e:	6078      	str	r0, [r7, #4]
	usb.flush(CDC_ENDPOINT_IN);
    e630:	687b      	ldr	r3, [r7, #4]
    e632:	691b      	ldr	r3, [r3, #16]
    e634:	2103      	movs	r1, #3
    e636:	0018      	movs	r0, r3
    e638:	f7f7 f9f2 	bl	5a20 <_ZN14USBDeviceClass5flushEm>
}
    e63c:	46c0      	nop			; (mov r8, r8)
    e63e:	46bd      	mov	sp, r7
    e640:	b002      	add	sp, #8
    e642:	bd80      	pop	{r7, pc}

0000e644 <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
    e644:	b580      	push	{r7, lr}
    e646:	b086      	sub	sp, #24
    e648:	af00      	add	r7, sp, #0
    e64a:	60f8      	str	r0, [r7, #12]
    e64c:	60b9      	str	r1, [r7, #8]
    e64e:	607a      	str	r2, [r7, #4]
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    e650:	68fb      	ldr	r3, [r7, #12]
    e652:	6918      	ldr	r0, [r3, #16]
    e654:	687b      	ldr	r3, [r7, #4]
    e656:	68ba      	ldr	r2, [r7, #8]
    e658:	2103      	movs	r1, #3
    e65a:	f7f7 fbbd 	bl	5dd8 <_ZN14USBDeviceClass4sendEmPKvm>
    e65e:	0003      	movs	r3, r0
    e660:	617b      	str	r3, [r7, #20]

	if (r > 0) {
    e662:	697b      	ldr	r3, [r7, #20]
    e664:	2b00      	cmp	r3, #0
    e666:	d001      	beq.n	e66c <_ZN7Serial_5writeEPKhj+0x28>
		return r;
    e668:	697b      	ldr	r3, [r7, #20]
    e66a:	e005      	b.n	e678 <_ZN7Serial_5writeEPKhj+0x34>
	} else {
		setWriteError();
    e66c:	68fb      	ldr	r3, [r7, #12]
    e66e:	2101      	movs	r1, #1
    e670:	0018      	movs	r0, r3
    e672:	f7fa f86b 	bl	874c <_ZN5Print13setWriteErrorEi>
		return 0;
    e676:	2300      	movs	r3, #0
	}
}
    e678:	0018      	movs	r0, r3
    e67a:	46bd      	mov	sp, r7
    e67c:	b006      	add	sp, #24
    e67e:	bd80      	pop	{r7, pc}

0000e680 <_ZN7Serial_5writeEh>:

size_t Serial_::write(uint8_t c) {
    e680:	b580      	push	{r7, lr}
    e682:	b082      	sub	sp, #8
    e684:	af00      	add	r7, sp, #0
    e686:	6078      	str	r0, [r7, #4]
    e688:	000a      	movs	r2, r1
    e68a:	1cfb      	adds	r3, r7, #3
    e68c:	701a      	strb	r2, [r3, #0]
	return write(&c, 1);
    e68e:	687b      	ldr	r3, [r7, #4]
    e690:	681b      	ldr	r3, [r3, #0]
    e692:	3304      	adds	r3, #4
    e694:	681b      	ldr	r3, [r3, #0]
    e696:	1cf9      	adds	r1, r7, #3
    e698:	6878      	ldr	r0, [r7, #4]
    e69a:	2201      	movs	r2, #1
    e69c:	4798      	blx	r3
    e69e:	0003      	movs	r3, r0
}
    e6a0:	0018      	movs	r0, r3
    e6a2:	46bd      	mov	sp, r7
    e6a4:	b002      	add	sp, #8
    e6a6:	bd80      	pop	{r7, pc}

0000e6a8 <_Z41__static_initialization_and_destruction_0ii>:

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    e6a8:	b580      	push	{r7, lr}
    e6aa:	b082      	sub	sp, #8
    e6ac:	af00      	add	r7, sp, #0
    e6ae:	6078      	str	r0, [r7, #4]
    e6b0:	6039      	str	r1, [r7, #0]
    e6b2:	687b      	ldr	r3, [r7, #4]
    e6b4:	2b01      	cmp	r3, #1
    e6b6:	d109      	bne.n	e6cc <_Z41__static_initialization_and_destruction_0ii+0x24>
    e6b8:	683b      	ldr	r3, [r7, #0]
    e6ba:	4a06      	ldr	r2, [pc, #24]	; (e6d4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    e6bc:	4293      	cmp	r3, r2
    e6be:	d105      	bne.n	e6cc <_Z41__static_initialization_and_destruction_0ii+0x24>
    e6c0:	4a05      	ldr	r2, [pc, #20]	; (e6d8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    e6c2:	4b06      	ldr	r3, [pc, #24]	; (e6dc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e6c4:	0011      	movs	r1, r2
    e6c6:	0018      	movs	r0, r3
    e6c8:	f7ff feae 	bl	e428 <_ZN7Serial_C1ER14USBDeviceClass>
    e6cc:	46c0      	nop			; (mov r8, r8)
    e6ce:	46bd      	mov	sp, r7
    e6d0:	b002      	add	sp, #8
    e6d2:	bd80      	pop	{r7, pc}
    e6d4:	0000ffff 	.word	0x0000ffff
    e6d8:	200008f0 	.word	0x200008f0
    e6dc:	20000f50 	.word	0x20000f50

0000e6e0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    e6e0:	b580      	push	{r7, lr}
    e6e2:	af00      	add	r7, sp, #0
    e6e4:	4b03      	ldr	r3, [pc, #12]	; (e6f4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x14>)
    e6e6:	0019      	movs	r1, r3
    e6e8:	2001      	movs	r0, #1
    e6ea:	f7ff ffdd 	bl	e6a8 <_Z41__static_initialization_and_destruction_0ii>
    e6ee:	46bd      	mov	sp, r7
    e6f0:	bd80      	pop	{r7, pc}
    e6f2:	46c0      	nop			; (mov r8, r8)
    e6f4:	0000ffff 	.word	0x0000ffff

0000e6f8 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    e6f8:	b580      	push	{r7, lr}
    e6fa:	b086      	sub	sp, #24
    e6fc:	af00      	add	r7, sp, #0
    e6fe:	6078      	str	r0, [r7, #4]
    e700:	6039      	str	r1, [r7, #0]
	int sent = 0;
    e702:	2300      	movs	r3, #0
    e704:	617b      	str	r3, [r7, #20]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e706:	687b      	ldr	r3, [r7, #4]
    e708:	685b      	ldr	r3, [r3, #4]
    e70a:	613b      	str	r3, [r7, #16]
    e70c:	693b      	ldr	r3, [r7, #16]
    e70e:	2b00      	cmp	r3, #0
    e710:	d017      	beq.n	e742 <_ZN13PluggableUSB_12getInterfaceEPh+0x4a>
		int res = node->getInterface(interfaceCount);
    e712:	693b      	ldr	r3, [r7, #16]
    e714:	681b      	ldr	r3, [r3, #0]
    e716:	3304      	adds	r3, #4
    e718:	681b      	ldr	r3, [r3, #0]
    e71a:	6839      	ldr	r1, [r7, #0]
    e71c:	693a      	ldr	r2, [r7, #16]
    e71e:	0010      	movs	r0, r2
    e720:	4798      	blx	r3
    e722:	0003      	movs	r3, r0
    e724:	60fb      	str	r3, [r7, #12]
		if (res < 0)
    e726:	68fb      	ldr	r3, [r7, #12]
    e728:	2b00      	cmp	r3, #0
    e72a:	da02      	bge.n	e732 <_ZN13PluggableUSB_12getInterfaceEPh+0x3a>
			return -1;
    e72c:	2301      	movs	r3, #1
    e72e:	425b      	negs	r3, r3
    e730:	e008      	b.n	e744 <_ZN13PluggableUSB_12getInterfaceEPh+0x4c>
		sent += res;
    e732:	697a      	ldr	r2, [r7, #20]
    e734:	68fb      	ldr	r3, [r7, #12]
    e736:	18d3      	adds	r3, r2, r3
    e738:	617b      	str	r3, [r7, #20]
	for (node = rootNode; node; node = node->next) {
    e73a:	693b      	ldr	r3, [r7, #16]
    e73c:	68db      	ldr	r3, [r3, #12]
    e73e:	613b      	str	r3, [r7, #16]
    e740:	e7e4      	b.n	e70c <_ZN13PluggableUSB_12getInterfaceEPh+0x14>
	}
	return sent;
    e742:	697b      	ldr	r3, [r7, #20]
}
    e744:	0018      	movs	r0, r3
    e746:	46bd      	mov	sp, r7
    e748:	b006      	add	sp, #24
    e74a:	bd80      	pop	{r7, pc}

0000e74c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    e74c:	b580      	push	{r7, lr}
    e74e:	b084      	sub	sp, #16
    e750:	af00      	add	r7, sp, #0
    e752:	6078      	str	r0, [r7, #4]
    e754:	6039      	str	r1, [r7, #0]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e756:	687b      	ldr	r3, [r7, #4]
    e758:	685b      	ldr	r3, [r3, #4]
    e75a:	60fb      	str	r3, [r7, #12]
    e75c:	68fb      	ldr	r3, [r7, #12]
    e75e:	2b00      	cmp	r3, #0
    e760:	d012      	beq.n	e788 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x3c>
		int ret = node->getDescriptor(setup);
    e762:	68fb      	ldr	r3, [r7, #12]
    e764:	681b      	ldr	r3, [r3, #0]
    e766:	3308      	adds	r3, #8
    e768:	681b      	ldr	r3, [r3, #0]
    e76a:	6839      	ldr	r1, [r7, #0]
    e76c:	68fa      	ldr	r2, [r7, #12]
    e76e:	0010      	movs	r0, r2
    e770:	4798      	blx	r3
    e772:	0003      	movs	r3, r0
    e774:	60bb      	str	r3, [r7, #8]
		// ret!=0 -> request has been processed
		if (ret)
    e776:	68bb      	ldr	r3, [r7, #8]
    e778:	2b00      	cmp	r3, #0
    e77a:	d001      	beq.n	e780 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
			return ret;
    e77c:	68bb      	ldr	r3, [r7, #8]
    e77e:	e004      	b.n	e78a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x3e>
	for (node = rootNode; node; node = node->next) {
    e780:	68fb      	ldr	r3, [r7, #12]
    e782:	68db      	ldr	r3, [r3, #12]
    e784:	60fb      	str	r3, [r7, #12]
    e786:	e7e9      	b.n	e75c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
	}
	return 0;
    e788:	2300      	movs	r3, #0
}
    e78a:	0018      	movs	r0, r3
    e78c:	46bd      	mov	sp, r7
    e78e:	b004      	add	sp, #16
    e790:	bd80      	pop	{r7, pc}

0000e792 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    e792:	b580      	push	{r7, lr}
    e794:	b084      	sub	sp, #16
    e796:	af00      	add	r7, sp, #0
    e798:	6078      	str	r0, [r7, #4]
    e79a:	6039      	str	r1, [r7, #0]
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    e79c:	687b      	ldr	r3, [r7, #4]
    e79e:	685b      	ldr	r3, [r3, #4]
    e7a0:	60fb      	str	r3, [r7, #12]
    e7a2:	68fb      	ldr	r3, [r7, #12]
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	d010      	beq.n	e7ca <_ZN13PluggableUSB_12getShortNameEPc+0x38>
               iSerialNum += node->getShortName(iSerialNum);
    e7a8:	68fb      	ldr	r3, [r7, #12]
    e7aa:	681b      	ldr	r3, [r3, #0]
    e7ac:	330c      	adds	r3, #12
    e7ae:	681b      	ldr	r3, [r3, #0]
    e7b0:	6839      	ldr	r1, [r7, #0]
    e7b2:	68fa      	ldr	r2, [r7, #12]
    e7b4:	0010      	movs	r0, r2
    e7b6:	4798      	blx	r3
    e7b8:	0003      	movs	r3, r0
    e7ba:	001a      	movs	r2, r3
    e7bc:	683b      	ldr	r3, [r7, #0]
    e7be:	189b      	adds	r3, r3, r2
    e7c0:	603b      	str	r3, [r7, #0]
       for (node = rootNode; node; node = node->next) {
    e7c2:	68fb      	ldr	r3, [r7, #12]
    e7c4:	68db      	ldr	r3, [r3, #12]
    e7c6:	60fb      	str	r3, [r7, #12]
    e7c8:	e7eb      	b.n	e7a2 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
       }
       *iSerialNum = 0;
    e7ca:	683b      	ldr	r3, [r7, #0]
    e7cc:	2200      	movs	r2, #0
    e7ce:	701a      	strb	r2, [r3, #0]
}
    e7d0:	46c0      	nop			; (mov r8, r8)
    e7d2:	46bd      	mov	sp, r7
    e7d4:	b004      	add	sp, #16
    e7d6:	bd80      	pop	{r7, pc}

0000e7d8 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    e7d8:	b580      	push	{r7, lr}
    e7da:	b084      	sub	sp, #16
    e7dc:	af00      	add	r7, sp, #0
    e7de:	6078      	str	r0, [r7, #4]
    e7e0:	6039      	str	r1, [r7, #0]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e7e2:	687b      	ldr	r3, [r7, #4]
    e7e4:	685b      	ldr	r3, [r3, #4]
    e7e6:	60fb      	str	r3, [r7, #12]
    e7e8:	68fb      	ldr	r3, [r7, #12]
    e7ea:	2b00      	cmp	r3, #0
    e7ec:	d00e      	beq.n	e80c <_ZN13PluggableUSB_5setupER8USBSetup+0x34>
		if (node->setup(setup)) {
    e7ee:	68fb      	ldr	r3, [r7, #12]
    e7f0:	681b      	ldr	r3, [r3, #0]
    e7f2:	681b      	ldr	r3, [r3, #0]
    e7f4:	6839      	ldr	r1, [r7, #0]
    e7f6:	68fa      	ldr	r2, [r7, #12]
    e7f8:	0010      	movs	r0, r2
    e7fa:	4798      	blx	r3
    e7fc:	1e03      	subs	r3, r0, #0
    e7fe:	d001      	beq.n	e804 <_ZN13PluggableUSB_5setupER8USBSetup+0x2c>
			return true;
    e800:	2301      	movs	r3, #1
    e802:	e004      	b.n	e80e <_ZN13PluggableUSB_5setupER8USBSetup+0x36>
	for (node = rootNode; node; node = node->next) {
    e804:	68fb      	ldr	r3, [r7, #12]
    e806:	68db      	ldr	r3, [r3, #12]
    e808:	60fb      	str	r3, [r7, #12]
    e80a:	e7ed      	b.n	e7e8 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
		}
	}
	return false;
    e80c:	2300      	movs	r3, #0
}
    e80e:	0018      	movs	r0, r3
    e810:	46bd      	mov	sp, r7
    e812:	b004      	add	sp, #16
    e814:	bd80      	pop	{r7, pc}
	...

0000e818 <_Z12PluggableUSBv>:
	return true;
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
    e818:	b580      	push	{r7, lr}
    e81a:	af00      	add	r7, sp, #0
	static PluggableUSB_ obj;
    e81c:	4b07      	ldr	r3, [pc, #28]	; (e83c <_Z12PluggableUSBv+0x24>)
    e81e:	681b      	ldr	r3, [r3, #0]
    e820:	2201      	movs	r2, #1
    e822:	4013      	ands	r3, r2
    e824:	d106      	bne.n	e834 <_Z12PluggableUSBv+0x1c>
    e826:	4b06      	ldr	r3, [pc, #24]	; (e840 <_Z12PluggableUSBv+0x28>)
    e828:	0018      	movs	r0, r3
    e82a:	f000 f80b 	bl	e844 <_ZN13PluggableUSB_C1Ev>
    e82e:	4b03      	ldr	r3, [pc, #12]	; (e83c <_Z12PluggableUSBv+0x24>)
    e830:	2201      	movs	r2, #1
    e832:	601a      	str	r2, [r3, #0]
	return obj;
    e834:	4b02      	ldr	r3, [pc, #8]	; (e840 <_Z12PluggableUSBv+0x28>)
}
    e836:	0018      	movs	r0, r3
    e838:	46bd      	mov	sp, r7
    e83a:	bd80      	pop	{r7, pc}
    e83c:	20000f74 	.word	0x20000f74
    e840:	20000f6c 	.word	0x20000f6c

0000e844 <_ZN13PluggableUSB_C1Ev>:

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
    e844:	b580      	push	{r7, lr}
    e846:	b082      	sub	sp, #8
    e848:	af00      	add	r7, sp, #0
    e84a:	6078      	str	r0, [r7, #4]
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    e84c:	687b      	ldr	r3, [r7, #4]
    e84e:	2202      	movs	r2, #2
    e850:	701a      	strb	r2, [r3, #0]
    e852:	687b      	ldr	r3, [r7, #4]
    e854:	2204      	movs	r2, #4
    e856:	705a      	strb	r2, [r3, #1]
    e858:	687b      	ldr	r3, [r7, #4]
    e85a:	2200      	movs	r2, #0
    e85c:	605a      	str	r2, [r3, #4]
{
	// Empty
}
    e85e:	687b      	ldr	r3, [r7, #4]
    e860:	0018      	movs	r0, r3
    e862:	46bd      	mov	sp, r7
    e864:	b002      	add	sp, #8
    e866:	bd80      	pop	{r7, pc}

0000e868 <__aeabi_atexit>:
    e868:	000b      	movs	r3, r1
    e86a:	b510      	push	{r4, lr}
    e86c:	0001      	movs	r1, r0
    e86e:	0018      	movs	r0, r3
    e870:	f001 ff58 	bl	10724 <__cxa_atexit>
    e874:	bd10      	pop	{r4, pc}
	...

0000e878 <__udivsi3>:
    e878:	2200      	movs	r2, #0
    e87a:	0843      	lsrs	r3, r0, #1
    e87c:	428b      	cmp	r3, r1
    e87e:	d374      	bcc.n	e96a <__udivsi3+0xf2>
    e880:	0903      	lsrs	r3, r0, #4
    e882:	428b      	cmp	r3, r1
    e884:	d35f      	bcc.n	e946 <__udivsi3+0xce>
    e886:	0a03      	lsrs	r3, r0, #8
    e888:	428b      	cmp	r3, r1
    e88a:	d344      	bcc.n	e916 <__udivsi3+0x9e>
    e88c:	0b03      	lsrs	r3, r0, #12
    e88e:	428b      	cmp	r3, r1
    e890:	d328      	bcc.n	e8e4 <__udivsi3+0x6c>
    e892:	0c03      	lsrs	r3, r0, #16
    e894:	428b      	cmp	r3, r1
    e896:	d30d      	bcc.n	e8b4 <__udivsi3+0x3c>
    e898:	22ff      	movs	r2, #255	; 0xff
    e89a:	0209      	lsls	r1, r1, #8
    e89c:	ba12      	rev	r2, r2
    e89e:	0c03      	lsrs	r3, r0, #16
    e8a0:	428b      	cmp	r3, r1
    e8a2:	d302      	bcc.n	e8aa <__udivsi3+0x32>
    e8a4:	1212      	asrs	r2, r2, #8
    e8a6:	0209      	lsls	r1, r1, #8
    e8a8:	d065      	beq.n	e976 <__udivsi3+0xfe>
    e8aa:	0b03      	lsrs	r3, r0, #12
    e8ac:	428b      	cmp	r3, r1
    e8ae:	d319      	bcc.n	e8e4 <__udivsi3+0x6c>
    e8b0:	e000      	b.n	e8b4 <__udivsi3+0x3c>
    e8b2:	0a09      	lsrs	r1, r1, #8
    e8b4:	0bc3      	lsrs	r3, r0, #15
    e8b6:	428b      	cmp	r3, r1
    e8b8:	d301      	bcc.n	e8be <__udivsi3+0x46>
    e8ba:	03cb      	lsls	r3, r1, #15
    e8bc:	1ac0      	subs	r0, r0, r3
    e8be:	4152      	adcs	r2, r2
    e8c0:	0b83      	lsrs	r3, r0, #14
    e8c2:	428b      	cmp	r3, r1
    e8c4:	d301      	bcc.n	e8ca <__udivsi3+0x52>
    e8c6:	038b      	lsls	r3, r1, #14
    e8c8:	1ac0      	subs	r0, r0, r3
    e8ca:	4152      	adcs	r2, r2
    e8cc:	0b43      	lsrs	r3, r0, #13
    e8ce:	428b      	cmp	r3, r1
    e8d0:	d301      	bcc.n	e8d6 <__udivsi3+0x5e>
    e8d2:	034b      	lsls	r3, r1, #13
    e8d4:	1ac0      	subs	r0, r0, r3
    e8d6:	4152      	adcs	r2, r2
    e8d8:	0b03      	lsrs	r3, r0, #12
    e8da:	428b      	cmp	r3, r1
    e8dc:	d301      	bcc.n	e8e2 <__udivsi3+0x6a>
    e8de:	030b      	lsls	r3, r1, #12
    e8e0:	1ac0      	subs	r0, r0, r3
    e8e2:	4152      	adcs	r2, r2
    e8e4:	0ac3      	lsrs	r3, r0, #11
    e8e6:	428b      	cmp	r3, r1
    e8e8:	d301      	bcc.n	e8ee <__udivsi3+0x76>
    e8ea:	02cb      	lsls	r3, r1, #11
    e8ec:	1ac0      	subs	r0, r0, r3
    e8ee:	4152      	adcs	r2, r2
    e8f0:	0a83      	lsrs	r3, r0, #10
    e8f2:	428b      	cmp	r3, r1
    e8f4:	d301      	bcc.n	e8fa <__udivsi3+0x82>
    e8f6:	028b      	lsls	r3, r1, #10
    e8f8:	1ac0      	subs	r0, r0, r3
    e8fa:	4152      	adcs	r2, r2
    e8fc:	0a43      	lsrs	r3, r0, #9
    e8fe:	428b      	cmp	r3, r1
    e900:	d301      	bcc.n	e906 <__udivsi3+0x8e>
    e902:	024b      	lsls	r3, r1, #9
    e904:	1ac0      	subs	r0, r0, r3
    e906:	4152      	adcs	r2, r2
    e908:	0a03      	lsrs	r3, r0, #8
    e90a:	428b      	cmp	r3, r1
    e90c:	d301      	bcc.n	e912 <__udivsi3+0x9a>
    e90e:	020b      	lsls	r3, r1, #8
    e910:	1ac0      	subs	r0, r0, r3
    e912:	4152      	adcs	r2, r2
    e914:	d2cd      	bcs.n	e8b2 <__udivsi3+0x3a>
    e916:	09c3      	lsrs	r3, r0, #7
    e918:	428b      	cmp	r3, r1
    e91a:	d301      	bcc.n	e920 <__udivsi3+0xa8>
    e91c:	01cb      	lsls	r3, r1, #7
    e91e:	1ac0      	subs	r0, r0, r3
    e920:	4152      	adcs	r2, r2
    e922:	0983      	lsrs	r3, r0, #6
    e924:	428b      	cmp	r3, r1
    e926:	d301      	bcc.n	e92c <__udivsi3+0xb4>
    e928:	018b      	lsls	r3, r1, #6
    e92a:	1ac0      	subs	r0, r0, r3
    e92c:	4152      	adcs	r2, r2
    e92e:	0943      	lsrs	r3, r0, #5
    e930:	428b      	cmp	r3, r1
    e932:	d301      	bcc.n	e938 <__udivsi3+0xc0>
    e934:	014b      	lsls	r3, r1, #5
    e936:	1ac0      	subs	r0, r0, r3
    e938:	4152      	adcs	r2, r2
    e93a:	0903      	lsrs	r3, r0, #4
    e93c:	428b      	cmp	r3, r1
    e93e:	d301      	bcc.n	e944 <__udivsi3+0xcc>
    e940:	010b      	lsls	r3, r1, #4
    e942:	1ac0      	subs	r0, r0, r3
    e944:	4152      	adcs	r2, r2
    e946:	08c3      	lsrs	r3, r0, #3
    e948:	428b      	cmp	r3, r1
    e94a:	d301      	bcc.n	e950 <__udivsi3+0xd8>
    e94c:	00cb      	lsls	r3, r1, #3
    e94e:	1ac0      	subs	r0, r0, r3
    e950:	4152      	adcs	r2, r2
    e952:	0883      	lsrs	r3, r0, #2
    e954:	428b      	cmp	r3, r1
    e956:	d301      	bcc.n	e95c <__udivsi3+0xe4>
    e958:	008b      	lsls	r3, r1, #2
    e95a:	1ac0      	subs	r0, r0, r3
    e95c:	4152      	adcs	r2, r2
    e95e:	0843      	lsrs	r3, r0, #1
    e960:	428b      	cmp	r3, r1
    e962:	d301      	bcc.n	e968 <__udivsi3+0xf0>
    e964:	004b      	lsls	r3, r1, #1
    e966:	1ac0      	subs	r0, r0, r3
    e968:	4152      	adcs	r2, r2
    e96a:	1a41      	subs	r1, r0, r1
    e96c:	d200      	bcs.n	e970 <__udivsi3+0xf8>
    e96e:	4601      	mov	r1, r0
    e970:	4152      	adcs	r2, r2
    e972:	4610      	mov	r0, r2
    e974:	4770      	bx	lr
    e976:	e7ff      	b.n	e978 <__udivsi3+0x100>
    e978:	b501      	push	{r0, lr}
    e97a:	2000      	movs	r0, #0
    e97c:	f000 f8f0 	bl	eb60 <__aeabi_idiv0>
    e980:	bd02      	pop	{r1, pc}
    e982:	46c0      	nop			; (mov r8, r8)

0000e984 <__aeabi_uidivmod>:
    e984:	2900      	cmp	r1, #0
    e986:	d0f7      	beq.n	e978 <__udivsi3+0x100>
    e988:	e776      	b.n	e878 <__udivsi3>
    e98a:	4770      	bx	lr

0000e98c <__divsi3>:
    e98c:	4603      	mov	r3, r0
    e98e:	430b      	orrs	r3, r1
    e990:	d47f      	bmi.n	ea92 <__divsi3+0x106>
    e992:	2200      	movs	r2, #0
    e994:	0843      	lsrs	r3, r0, #1
    e996:	428b      	cmp	r3, r1
    e998:	d374      	bcc.n	ea84 <__divsi3+0xf8>
    e99a:	0903      	lsrs	r3, r0, #4
    e99c:	428b      	cmp	r3, r1
    e99e:	d35f      	bcc.n	ea60 <__divsi3+0xd4>
    e9a0:	0a03      	lsrs	r3, r0, #8
    e9a2:	428b      	cmp	r3, r1
    e9a4:	d344      	bcc.n	ea30 <__divsi3+0xa4>
    e9a6:	0b03      	lsrs	r3, r0, #12
    e9a8:	428b      	cmp	r3, r1
    e9aa:	d328      	bcc.n	e9fe <__divsi3+0x72>
    e9ac:	0c03      	lsrs	r3, r0, #16
    e9ae:	428b      	cmp	r3, r1
    e9b0:	d30d      	bcc.n	e9ce <__divsi3+0x42>
    e9b2:	22ff      	movs	r2, #255	; 0xff
    e9b4:	0209      	lsls	r1, r1, #8
    e9b6:	ba12      	rev	r2, r2
    e9b8:	0c03      	lsrs	r3, r0, #16
    e9ba:	428b      	cmp	r3, r1
    e9bc:	d302      	bcc.n	e9c4 <__divsi3+0x38>
    e9be:	1212      	asrs	r2, r2, #8
    e9c0:	0209      	lsls	r1, r1, #8
    e9c2:	d065      	beq.n	ea90 <__divsi3+0x104>
    e9c4:	0b03      	lsrs	r3, r0, #12
    e9c6:	428b      	cmp	r3, r1
    e9c8:	d319      	bcc.n	e9fe <__divsi3+0x72>
    e9ca:	e000      	b.n	e9ce <__divsi3+0x42>
    e9cc:	0a09      	lsrs	r1, r1, #8
    e9ce:	0bc3      	lsrs	r3, r0, #15
    e9d0:	428b      	cmp	r3, r1
    e9d2:	d301      	bcc.n	e9d8 <__divsi3+0x4c>
    e9d4:	03cb      	lsls	r3, r1, #15
    e9d6:	1ac0      	subs	r0, r0, r3
    e9d8:	4152      	adcs	r2, r2
    e9da:	0b83      	lsrs	r3, r0, #14
    e9dc:	428b      	cmp	r3, r1
    e9de:	d301      	bcc.n	e9e4 <__divsi3+0x58>
    e9e0:	038b      	lsls	r3, r1, #14
    e9e2:	1ac0      	subs	r0, r0, r3
    e9e4:	4152      	adcs	r2, r2
    e9e6:	0b43      	lsrs	r3, r0, #13
    e9e8:	428b      	cmp	r3, r1
    e9ea:	d301      	bcc.n	e9f0 <__divsi3+0x64>
    e9ec:	034b      	lsls	r3, r1, #13
    e9ee:	1ac0      	subs	r0, r0, r3
    e9f0:	4152      	adcs	r2, r2
    e9f2:	0b03      	lsrs	r3, r0, #12
    e9f4:	428b      	cmp	r3, r1
    e9f6:	d301      	bcc.n	e9fc <__divsi3+0x70>
    e9f8:	030b      	lsls	r3, r1, #12
    e9fa:	1ac0      	subs	r0, r0, r3
    e9fc:	4152      	adcs	r2, r2
    e9fe:	0ac3      	lsrs	r3, r0, #11
    ea00:	428b      	cmp	r3, r1
    ea02:	d301      	bcc.n	ea08 <__divsi3+0x7c>
    ea04:	02cb      	lsls	r3, r1, #11
    ea06:	1ac0      	subs	r0, r0, r3
    ea08:	4152      	adcs	r2, r2
    ea0a:	0a83      	lsrs	r3, r0, #10
    ea0c:	428b      	cmp	r3, r1
    ea0e:	d301      	bcc.n	ea14 <__divsi3+0x88>
    ea10:	028b      	lsls	r3, r1, #10
    ea12:	1ac0      	subs	r0, r0, r3
    ea14:	4152      	adcs	r2, r2
    ea16:	0a43      	lsrs	r3, r0, #9
    ea18:	428b      	cmp	r3, r1
    ea1a:	d301      	bcc.n	ea20 <__divsi3+0x94>
    ea1c:	024b      	lsls	r3, r1, #9
    ea1e:	1ac0      	subs	r0, r0, r3
    ea20:	4152      	adcs	r2, r2
    ea22:	0a03      	lsrs	r3, r0, #8
    ea24:	428b      	cmp	r3, r1
    ea26:	d301      	bcc.n	ea2c <__divsi3+0xa0>
    ea28:	020b      	lsls	r3, r1, #8
    ea2a:	1ac0      	subs	r0, r0, r3
    ea2c:	4152      	adcs	r2, r2
    ea2e:	d2cd      	bcs.n	e9cc <__divsi3+0x40>
    ea30:	09c3      	lsrs	r3, r0, #7
    ea32:	428b      	cmp	r3, r1
    ea34:	d301      	bcc.n	ea3a <__divsi3+0xae>
    ea36:	01cb      	lsls	r3, r1, #7
    ea38:	1ac0      	subs	r0, r0, r3
    ea3a:	4152      	adcs	r2, r2
    ea3c:	0983      	lsrs	r3, r0, #6
    ea3e:	428b      	cmp	r3, r1
    ea40:	d301      	bcc.n	ea46 <__divsi3+0xba>
    ea42:	018b      	lsls	r3, r1, #6
    ea44:	1ac0      	subs	r0, r0, r3
    ea46:	4152      	adcs	r2, r2
    ea48:	0943      	lsrs	r3, r0, #5
    ea4a:	428b      	cmp	r3, r1
    ea4c:	d301      	bcc.n	ea52 <__divsi3+0xc6>
    ea4e:	014b      	lsls	r3, r1, #5
    ea50:	1ac0      	subs	r0, r0, r3
    ea52:	4152      	adcs	r2, r2
    ea54:	0903      	lsrs	r3, r0, #4
    ea56:	428b      	cmp	r3, r1
    ea58:	d301      	bcc.n	ea5e <__divsi3+0xd2>
    ea5a:	010b      	lsls	r3, r1, #4
    ea5c:	1ac0      	subs	r0, r0, r3
    ea5e:	4152      	adcs	r2, r2
    ea60:	08c3      	lsrs	r3, r0, #3
    ea62:	428b      	cmp	r3, r1
    ea64:	d301      	bcc.n	ea6a <__divsi3+0xde>
    ea66:	00cb      	lsls	r3, r1, #3
    ea68:	1ac0      	subs	r0, r0, r3
    ea6a:	4152      	adcs	r2, r2
    ea6c:	0883      	lsrs	r3, r0, #2
    ea6e:	428b      	cmp	r3, r1
    ea70:	d301      	bcc.n	ea76 <__divsi3+0xea>
    ea72:	008b      	lsls	r3, r1, #2
    ea74:	1ac0      	subs	r0, r0, r3
    ea76:	4152      	adcs	r2, r2
    ea78:	0843      	lsrs	r3, r0, #1
    ea7a:	428b      	cmp	r3, r1
    ea7c:	d301      	bcc.n	ea82 <__divsi3+0xf6>
    ea7e:	004b      	lsls	r3, r1, #1
    ea80:	1ac0      	subs	r0, r0, r3
    ea82:	4152      	adcs	r2, r2
    ea84:	1a41      	subs	r1, r0, r1
    ea86:	d200      	bcs.n	ea8a <__divsi3+0xfe>
    ea88:	4601      	mov	r1, r0
    ea8a:	4152      	adcs	r2, r2
    ea8c:	4610      	mov	r0, r2
    ea8e:	4770      	bx	lr
    ea90:	e05d      	b.n	eb4e <__divsi3+0x1c2>
    ea92:	0fca      	lsrs	r2, r1, #31
    ea94:	d000      	beq.n	ea98 <__divsi3+0x10c>
    ea96:	4249      	negs	r1, r1
    ea98:	1003      	asrs	r3, r0, #32
    ea9a:	d300      	bcc.n	ea9e <__divsi3+0x112>
    ea9c:	4240      	negs	r0, r0
    ea9e:	4053      	eors	r3, r2
    eaa0:	2200      	movs	r2, #0
    eaa2:	469c      	mov	ip, r3
    eaa4:	0903      	lsrs	r3, r0, #4
    eaa6:	428b      	cmp	r3, r1
    eaa8:	d32d      	bcc.n	eb06 <__divsi3+0x17a>
    eaaa:	0a03      	lsrs	r3, r0, #8
    eaac:	428b      	cmp	r3, r1
    eaae:	d312      	bcc.n	ead6 <__divsi3+0x14a>
    eab0:	22fc      	movs	r2, #252	; 0xfc
    eab2:	0189      	lsls	r1, r1, #6
    eab4:	ba12      	rev	r2, r2
    eab6:	0a03      	lsrs	r3, r0, #8
    eab8:	428b      	cmp	r3, r1
    eaba:	d30c      	bcc.n	ead6 <__divsi3+0x14a>
    eabc:	0189      	lsls	r1, r1, #6
    eabe:	1192      	asrs	r2, r2, #6
    eac0:	428b      	cmp	r3, r1
    eac2:	d308      	bcc.n	ead6 <__divsi3+0x14a>
    eac4:	0189      	lsls	r1, r1, #6
    eac6:	1192      	asrs	r2, r2, #6
    eac8:	428b      	cmp	r3, r1
    eaca:	d304      	bcc.n	ead6 <__divsi3+0x14a>
    eacc:	0189      	lsls	r1, r1, #6
    eace:	d03a      	beq.n	eb46 <__divsi3+0x1ba>
    ead0:	1192      	asrs	r2, r2, #6
    ead2:	e000      	b.n	ead6 <__divsi3+0x14a>
    ead4:	0989      	lsrs	r1, r1, #6
    ead6:	09c3      	lsrs	r3, r0, #7
    ead8:	428b      	cmp	r3, r1
    eada:	d301      	bcc.n	eae0 <__divsi3+0x154>
    eadc:	01cb      	lsls	r3, r1, #7
    eade:	1ac0      	subs	r0, r0, r3
    eae0:	4152      	adcs	r2, r2
    eae2:	0983      	lsrs	r3, r0, #6
    eae4:	428b      	cmp	r3, r1
    eae6:	d301      	bcc.n	eaec <__divsi3+0x160>
    eae8:	018b      	lsls	r3, r1, #6
    eaea:	1ac0      	subs	r0, r0, r3
    eaec:	4152      	adcs	r2, r2
    eaee:	0943      	lsrs	r3, r0, #5
    eaf0:	428b      	cmp	r3, r1
    eaf2:	d301      	bcc.n	eaf8 <__divsi3+0x16c>
    eaf4:	014b      	lsls	r3, r1, #5
    eaf6:	1ac0      	subs	r0, r0, r3
    eaf8:	4152      	adcs	r2, r2
    eafa:	0903      	lsrs	r3, r0, #4
    eafc:	428b      	cmp	r3, r1
    eafe:	d301      	bcc.n	eb04 <__divsi3+0x178>
    eb00:	010b      	lsls	r3, r1, #4
    eb02:	1ac0      	subs	r0, r0, r3
    eb04:	4152      	adcs	r2, r2
    eb06:	08c3      	lsrs	r3, r0, #3
    eb08:	428b      	cmp	r3, r1
    eb0a:	d301      	bcc.n	eb10 <__divsi3+0x184>
    eb0c:	00cb      	lsls	r3, r1, #3
    eb0e:	1ac0      	subs	r0, r0, r3
    eb10:	4152      	adcs	r2, r2
    eb12:	0883      	lsrs	r3, r0, #2
    eb14:	428b      	cmp	r3, r1
    eb16:	d301      	bcc.n	eb1c <__divsi3+0x190>
    eb18:	008b      	lsls	r3, r1, #2
    eb1a:	1ac0      	subs	r0, r0, r3
    eb1c:	4152      	adcs	r2, r2
    eb1e:	d2d9      	bcs.n	ead4 <__divsi3+0x148>
    eb20:	0843      	lsrs	r3, r0, #1
    eb22:	428b      	cmp	r3, r1
    eb24:	d301      	bcc.n	eb2a <__divsi3+0x19e>
    eb26:	004b      	lsls	r3, r1, #1
    eb28:	1ac0      	subs	r0, r0, r3
    eb2a:	4152      	adcs	r2, r2
    eb2c:	1a41      	subs	r1, r0, r1
    eb2e:	d200      	bcs.n	eb32 <__divsi3+0x1a6>
    eb30:	4601      	mov	r1, r0
    eb32:	4663      	mov	r3, ip
    eb34:	4152      	adcs	r2, r2
    eb36:	105b      	asrs	r3, r3, #1
    eb38:	4610      	mov	r0, r2
    eb3a:	d301      	bcc.n	eb40 <__divsi3+0x1b4>
    eb3c:	4240      	negs	r0, r0
    eb3e:	2b00      	cmp	r3, #0
    eb40:	d500      	bpl.n	eb44 <__divsi3+0x1b8>
    eb42:	4249      	negs	r1, r1
    eb44:	4770      	bx	lr
    eb46:	4663      	mov	r3, ip
    eb48:	105b      	asrs	r3, r3, #1
    eb4a:	d300      	bcc.n	eb4e <__divsi3+0x1c2>
    eb4c:	4240      	negs	r0, r0
    eb4e:	b501      	push	{r0, lr}
    eb50:	2000      	movs	r0, #0
    eb52:	f000 f805 	bl	eb60 <__aeabi_idiv0>
    eb56:	bd02      	pop	{r1, pc}

0000eb58 <__aeabi_idivmod>:
    eb58:	2900      	cmp	r1, #0
    eb5a:	d0f8      	beq.n	eb4e <__divsi3+0x1c2>
    eb5c:	e716      	b.n	e98c <__divsi3>
    eb5e:	4770      	bx	lr

0000eb60 <__aeabi_idiv0>:
    eb60:	4770      	bx	lr
    eb62:	46c0      	nop			; (mov r8, r8)

0000eb64 <__aeabi_cdrcmple>:
    eb64:	4684      	mov	ip, r0
    eb66:	1c10      	adds	r0, r2, #0
    eb68:	4662      	mov	r2, ip
    eb6a:	468c      	mov	ip, r1
    eb6c:	1c19      	adds	r1, r3, #0
    eb6e:	4663      	mov	r3, ip
    eb70:	e000      	b.n	eb74 <__aeabi_cdcmpeq>
    eb72:	46c0      	nop			; (mov r8, r8)

0000eb74 <__aeabi_cdcmpeq>:
    eb74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    eb76:	f000 ff15 	bl	f9a4 <__ledf2>
    eb7a:	2800      	cmp	r0, #0
    eb7c:	d401      	bmi.n	eb82 <__aeabi_cdcmpeq+0xe>
    eb7e:	2100      	movs	r1, #0
    eb80:	42c8      	cmn	r0, r1
    eb82:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000eb84 <__aeabi_dcmpeq>:
    eb84:	b510      	push	{r4, lr}
    eb86:	f000 fe6f 	bl	f868 <__eqdf2>
    eb8a:	4240      	negs	r0, r0
    eb8c:	3001      	adds	r0, #1
    eb8e:	bd10      	pop	{r4, pc}

0000eb90 <__aeabi_dcmplt>:
    eb90:	b510      	push	{r4, lr}
    eb92:	f000 ff07 	bl	f9a4 <__ledf2>
    eb96:	2800      	cmp	r0, #0
    eb98:	db01      	blt.n	eb9e <__aeabi_dcmplt+0xe>
    eb9a:	2000      	movs	r0, #0
    eb9c:	bd10      	pop	{r4, pc}
    eb9e:	2001      	movs	r0, #1
    eba0:	bd10      	pop	{r4, pc}
    eba2:	46c0      	nop			; (mov r8, r8)

0000eba4 <__aeabi_dcmple>:
    eba4:	b510      	push	{r4, lr}
    eba6:	f000 fefd 	bl	f9a4 <__ledf2>
    ebaa:	2800      	cmp	r0, #0
    ebac:	dd01      	ble.n	ebb2 <__aeabi_dcmple+0xe>
    ebae:	2000      	movs	r0, #0
    ebb0:	bd10      	pop	{r4, pc}
    ebb2:	2001      	movs	r0, #1
    ebb4:	bd10      	pop	{r4, pc}
    ebb6:	46c0      	nop			; (mov r8, r8)

0000ebb8 <__aeabi_dcmpgt>:
    ebb8:	b510      	push	{r4, lr}
    ebba:	f000 fe8f 	bl	f8dc <__gedf2>
    ebbe:	2800      	cmp	r0, #0
    ebc0:	dc01      	bgt.n	ebc6 <__aeabi_dcmpgt+0xe>
    ebc2:	2000      	movs	r0, #0
    ebc4:	bd10      	pop	{r4, pc}
    ebc6:	2001      	movs	r0, #1
    ebc8:	bd10      	pop	{r4, pc}
    ebca:	46c0      	nop			; (mov r8, r8)

0000ebcc <__aeabi_dcmpge>:
    ebcc:	b510      	push	{r4, lr}
    ebce:	f000 fe85 	bl	f8dc <__gedf2>
    ebd2:	2800      	cmp	r0, #0
    ebd4:	da01      	bge.n	ebda <__aeabi_dcmpge+0xe>
    ebd6:	2000      	movs	r0, #0
    ebd8:	bd10      	pop	{r4, pc}
    ebda:	2001      	movs	r0, #1
    ebdc:	bd10      	pop	{r4, pc}
    ebde:	46c0      	nop			; (mov r8, r8)

0000ebe0 <__aeabi_dadd>:
    ebe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebe2:	4645      	mov	r5, r8
    ebe4:	46de      	mov	lr, fp
    ebe6:	4657      	mov	r7, sl
    ebe8:	464e      	mov	r6, r9
    ebea:	030c      	lsls	r4, r1, #12
    ebec:	b5e0      	push	{r5, r6, r7, lr}
    ebee:	004e      	lsls	r6, r1, #1
    ebf0:	0fc9      	lsrs	r1, r1, #31
    ebf2:	4688      	mov	r8, r1
    ebf4:	000d      	movs	r5, r1
    ebf6:	0a61      	lsrs	r1, r4, #9
    ebf8:	0f44      	lsrs	r4, r0, #29
    ebfa:	430c      	orrs	r4, r1
    ebfc:	00c7      	lsls	r7, r0, #3
    ebfe:	0319      	lsls	r1, r3, #12
    ec00:	0058      	lsls	r0, r3, #1
    ec02:	0fdb      	lsrs	r3, r3, #31
    ec04:	469b      	mov	fp, r3
    ec06:	0a4b      	lsrs	r3, r1, #9
    ec08:	0f51      	lsrs	r1, r2, #29
    ec0a:	430b      	orrs	r3, r1
    ec0c:	0d76      	lsrs	r6, r6, #21
    ec0e:	0d40      	lsrs	r0, r0, #21
    ec10:	0019      	movs	r1, r3
    ec12:	00d2      	lsls	r2, r2, #3
    ec14:	45d8      	cmp	r8, fp
    ec16:	d100      	bne.n	ec1a <__aeabi_dadd+0x3a>
    ec18:	e0ae      	b.n	ed78 <__aeabi_dadd+0x198>
    ec1a:	1a35      	subs	r5, r6, r0
    ec1c:	2d00      	cmp	r5, #0
    ec1e:	dc00      	bgt.n	ec22 <__aeabi_dadd+0x42>
    ec20:	e0f6      	b.n	ee10 <__aeabi_dadd+0x230>
    ec22:	2800      	cmp	r0, #0
    ec24:	d10f      	bne.n	ec46 <__aeabi_dadd+0x66>
    ec26:	4313      	orrs	r3, r2
    ec28:	d100      	bne.n	ec2c <__aeabi_dadd+0x4c>
    ec2a:	e0db      	b.n	ede4 <__aeabi_dadd+0x204>
    ec2c:	1e6b      	subs	r3, r5, #1
    ec2e:	2b00      	cmp	r3, #0
    ec30:	d000      	beq.n	ec34 <__aeabi_dadd+0x54>
    ec32:	e137      	b.n	eea4 <__aeabi_dadd+0x2c4>
    ec34:	1aba      	subs	r2, r7, r2
    ec36:	4297      	cmp	r7, r2
    ec38:	41bf      	sbcs	r7, r7
    ec3a:	1a64      	subs	r4, r4, r1
    ec3c:	427f      	negs	r7, r7
    ec3e:	1be4      	subs	r4, r4, r7
    ec40:	2601      	movs	r6, #1
    ec42:	0017      	movs	r7, r2
    ec44:	e024      	b.n	ec90 <__aeabi_dadd+0xb0>
    ec46:	4bc6      	ldr	r3, [pc, #792]	; (ef60 <__aeabi_dadd+0x380>)
    ec48:	429e      	cmp	r6, r3
    ec4a:	d04d      	beq.n	ece8 <__aeabi_dadd+0x108>
    ec4c:	2380      	movs	r3, #128	; 0x80
    ec4e:	041b      	lsls	r3, r3, #16
    ec50:	4319      	orrs	r1, r3
    ec52:	2d38      	cmp	r5, #56	; 0x38
    ec54:	dd00      	ble.n	ec58 <__aeabi_dadd+0x78>
    ec56:	e107      	b.n	ee68 <__aeabi_dadd+0x288>
    ec58:	2d1f      	cmp	r5, #31
    ec5a:	dd00      	ble.n	ec5e <__aeabi_dadd+0x7e>
    ec5c:	e138      	b.n	eed0 <__aeabi_dadd+0x2f0>
    ec5e:	2020      	movs	r0, #32
    ec60:	1b43      	subs	r3, r0, r5
    ec62:	469a      	mov	sl, r3
    ec64:	000b      	movs	r3, r1
    ec66:	4650      	mov	r0, sl
    ec68:	4083      	lsls	r3, r0
    ec6a:	4699      	mov	r9, r3
    ec6c:	0013      	movs	r3, r2
    ec6e:	4648      	mov	r0, r9
    ec70:	40eb      	lsrs	r3, r5
    ec72:	4318      	orrs	r0, r3
    ec74:	0003      	movs	r3, r0
    ec76:	4650      	mov	r0, sl
    ec78:	4082      	lsls	r2, r0
    ec7a:	1e50      	subs	r0, r2, #1
    ec7c:	4182      	sbcs	r2, r0
    ec7e:	40e9      	lsrs	r1, r5
    ec80:	431a      	orrs	r2, r3
    ec82:	1aba      	subs	r2, r7, r2
    ec84:	1a61      	subs	r1, r4, r1
    ec86:	4297      	cmp	r7, r2
    ec88:	41a4      	sbcs	r4, r4
    ec8a:	0017      	movs	r7, r2
    ec8c:	4264      	negs	r4, r4
    ec8e:	1b0c      	subs	r4, r1, r4
    ec90:	0223      	lsls	r3, r4, #8
    ec92:	d562      	bpl.n	ed5a <__aeabi_dadd+0x17a>
    ec94:	0264      	lsls	r4, r4, #9
    ec96:	0a65      	lsrs	r5, r4, #9
    ec98:	2d00      	cmp	r5, #0
    ec9a:	d100      	bne.n	ec9e <__aeabi_dadd+0xbe>
    ec9c:	e0df      	b.n	ee5e <__aeabi_dadd+0x27e>
    ec9e:	0028      	movs	r0, r5
    eca0:	f001 fd04 	bl	106ac <__clzsi2>
    eca4:	0003      	movs	r3, r0
    eca6:	3b08      	subs	r3, #8
    eca8:	2b1f      	cmp	r3, #31
    ecaa:	dd00      	ble.n	ecae <__aeabi_dadd+0xce>
    ecac:	e0d2      	b.n	ee54 <__aeabi_dadd+0x274>
    ecae:	2220      	movs	r2, #32
    ecb0:	003c      	movs	r4, r7
    ecb2:	1ad2      	subs	r2, r2, r3
    ecb4:	409d      	lsls	r5, r3
    ecb6:	40d4      	lsrs	r4, r2
    ecb8:	409f      	lsls	r7, r3
    ecba:	4325      	orrs	r5, r4
    ecbc:	429e      	cmp	r6, r3
    ecbe:	dd00      	ble.n	ecc2 <__aeabi_dadd+0xe2>
    ecc0:	e0c4      	b.n	ee4c <__aeabi_dadd+0x26c>
    ecc2:	1b9e      	subs	r6, r3, r6
    ecc4:	1c73      	adds	r3, r6, #1
    ecc6:	2b1f      	cmp	r3, #31
    ecc8:	dd00      	ble.n	eccc <__aeabi_dadd+0xec>
    ecca:	e0f1      	b.n	eeb0 <__aeabi_dadd+0x2d0>
    eccc:	2220      	movs	r2, #32
    ecce:	0038      	movs	r0, r7
    ecd0:	0029      	movs	r1, r5
    ecd2:	1ad2      	subs	r2, r2, r3
    ecd4:	40d8      	lsrs	r0, r3
    ecd6:	4091      	lsls	r1, r2
    ecd8:	4097      	lsls	r7, r2
    ecda:	002c      	movs	r4, r5
    ecdc:	4301      	orrs	r1, r0
    ecde:	1e78      	subs	r0, r7, #1
    ece0:	4187      	sbcs	r7, r0
    ece2:	40dc      	lsrs	r4, r3
    ece4:	2600      	movs	r6, #0
    ece6:	430f      	orrs	r7, r1
    ece8:	077b      	lsls	r3, r7, #29
    ecea:	d009      	beq.n	ed00 <__aeabi_dadd+0x120>
    ecec:	230f      	movs	r3, #15
    ecee:	403b      	ands	r3, r7
    ecf0:	2b04      	cmp	r3, #4
    ecf2:	d005      	beq.n	ed00 <__aeabi_dadd+0x120>
    ecf4:	1d3b      	adds	r3, r7, #4
    ecf6:	42bb      	cmp	r3, r7
    ecf8:	41bf      	sbcs	r7, r7
    ecfa:	427f      	negs	r7, r7
    ecfc:	19e4      	adds	r4, r4, r7
    ecfe:	001f      	movs	r7, r3
    ed00:	0223      	lsls	r3, r4, #8
    ed02:	d52c      	bpl.n	ed5e <__aeabi_dadd+0x17e>
    ed04:	4b96      	ldr	r3, [pc, #600]	; (ef60 <__aeabi_dadd+0x380>)
    ed06:	3601      	adds	r6, #1
    ed08:	429e      	cmp	r6, r3
    ed0a:	d100      	bne.n	ed0e <__aeabi_dadd+0x12e>
    ed0c:	e09a      	b.n	ee44 <__aeabi_dadd+0x264>
    ed0e:	4645      	mov	r5, r8
    ed10:	4b94      	ldr	r3, [pc, #592]	; (ef64 <__aeabi_dadd+0x384>)
    ed12:	08ff      	lsrs	r7, r7, #3
    ed14:	401c      	ands	r4, r3
    ed16:	0760      	lsls	r0, r4, #29
    ed18:	0576      	lsls	r6, r6, #21
    ed1a:	0264      	lsls	r4, r4, #9
    ed1c:	4307      	orrs	r7, r0
    ed1e:	0b24      	lsrs	r4, r4, #12
    ed20:	0d76      	lsrs	r6, r6, #21
    ed22:	2100      	movs	r1, #0
    ed24:	0324      	lsls	r4, r4, #12
    ed26:	0b23      	lsrs	r3, r4, #12
    ed28:	0d0c      	lsrs	r4, r1, #20
    ed2a:	4a8f      	ldr	r2, [pc, #572]	; (ef68 <__aeabi_dadd+0x388>)
    ed2c:	0524      	lsls	r4, r4, #20
    ed2e:	431c      	orrs	r4, r3
    ed30:	4014      	ands	r4, r2
    ed32:	0533      	lsls	r3, r6, #20
    ed34:	4323      	orrs	r3, r4
    ed36:	005b      	lsls	r3, r3, #1
    ed38:	07ed      	lsls	r5, r5, #31
    ed3a:	085b      	lsrs	r3, r3, #1
    ed3c:	432b      	orrs	r3, r5
    ed3e:	0038      	movs	r0, r7
    ed40:	0019      	movs	r1, r3
    ed42:	bc3c      	pop	{r2, r3, r4, r5}
    ed44:	4690      	mov	r8, r2
    ed46:	4699      	mov	r9, r3
    ed48:	46a2      	mov	sl, r4
    ed4a:	46ab      	mov	fp, r5
    ed4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed4e:	4664      	mov	r4, ip
    ed50:	4304      	orrs	r4, r0
    ed52:	d100      	bne.n	ed56 <__aeabi_dadd+0x176>
    ed54:	e211      	b.n	f17a <__aeabi_dadd+0x59a>
    ed56:	0004      	movs	r4, r0
    ed58:	4667      	mov	r7, ip
    ed5a:	077b      	lsls	r3, r7, #29
    ed5c:	d1c6      	bne.n	ecec <__aeabi_dadd+0x10c>
    ed5e:	4645      	mov	r5, r8
    ed60:	0760      	lsls	r0, r4, #29
    ed62:	08ff      	lsrs	r7, r7, #3
    ed64:	4307      	orrs	r7, r0
    ed66:	08e4      	lsrs	r4, r4, #3
    ed68:	4b7d      	ldr	r3, [pc, #500]	; (ef60 <__aeabi_dadd+0x380>)
    ed6a:	429e      	cmp	r6, r3
    ed6c:	d030      	beq.n	edd0 <__aeabi_dadd+0x1f0>
    ed6e:	0324      	lsls	r4, r4, #12
    ed70:	0576      	lsls	r6, r6, #21
    ed72:	0b24      	lsrs	r4, r4, #12
    ed74:	0d76      	lsrs	r6, r6, #21
    ed76:	e7d4      	b.n	ed22 <__aeabi_dadd+0x142>
    ed78:	1a33      	subs	r3, r6, r0
    ed7a:	469a      	mov	sl, r3
    ed7c:	2b00      	cmp	r3, #0
    ed7e:	dd78      	ble.n	ee72 <__aeabi_dadd+0x292>
    ed80:	2800      	cmp	r0, #0
    ed82:	d031      	beq.n	ede8 <__aeabi_dadd+0x208>
    ed84:	4876      	ldr	r0, [pc, #472]	; (ef60 <__aeabi_dadd+0x380>)
    ed86:	4286      	cmp	r6, r0
    ed88:	d0ae      	beq.n	ece8 <__aeabi_dadd+0x108>
    ed8a:	2080      	movs	r0, #128	; 0x80
    ed8c:	0400      	lsls	r0, r0, #16
    ed8e:	4301      	orrs	r1, r0
    ed90:	4653      	mov	r3, sl
    ed92:	2b38      	cmp	r3, #56	; 0x38
    ed94:	dc00      	bgt.n	ed98 <__aeabi_dadd+0x1b8>
    ed96:	e0e9      	b.n	ef6c <__aeabi_dadd+0x38c>
    ed98:	430a      	orrs	r2, r1
    ed9a:	1e51      	subs	r1, r2, #1
    ed9c:	418a      	sbcs	r2, r1
    ed9e:	2100      	movs	r1, #0
    eda0:	19d2      	adds	r2, r2, r7
    eda2:	42ba      	cmp	r2, r7
    eda4:	41bf      	sbcs	r7, r7
    eda6:	1909      	adds	r1, r1, r4
    eda8:	427c      	negs	r4, r7
    edaa:	0017      	movs	r7, r2
    edac:	190c      	adds	r4, r1, r4
    edae:	0223      	lsls	r3, r4, #8
    edb0:	d5d3      	bpl.n	ed5a <__aeabi_dadd+0x17a>
    edb2:	4b6b      	ldr	r3, [pc, #428]	; (ef60 <__aeabi_dadd+0x380>)
    edb4:	3601      	adds	r6, #1
    edb6:	429e      	cmp	r6, r3
    edb8:	d100      	bne.n	edbc <__aeabi_dadd+0x1dc>
    edba:	e13a      	b.n	f032 <__aeabi_dadd+0x452>
    edbc:	2001      	movs	r0, #1
    edbe:	4b69      	ldr	r3, [pc, #420]	; (ef64 <__aeabi_dadd+0x384>)
    edc0:	401c      	ands	r4, r3
    edc2:	087b      	lsrs	r3, r7, #1
    edc4:	4007      	ands	r7, r0
    edc6:	431f      	orrs	r7, r3
    edc8:	07e0      	lsls	r0, r4, #31
    edca:	4307      	orrs	r7, r0
    edcc:	0864      	lsrs	r4, r4, #1
    edce:	e78b      	b.n	ece8 <__aeabi_dadd+0x108>
    edd0:	0023      	movs	r3, r4
    edd2:	433b      	orrs	r3, r7
    edd4:	d100      	bne.n	edd8 <__aeabi_dadd+0x1f8>
    edd6:	e1cb      	b.n	f170 <__aeabi_dadd+0x590>
    edd8:	2280      	movs	r2, #128	; 0x80
    edda:	0312      	lsls	r2, r2, #12
    eddc:	4314      	orrs	r4, r2
    edde:	0324      	lsls	r4, r4, #12
    ede0:	0b24      	lsrs	r4, r4, #12
    ede2:	e79e      	b.n	ed22 <__aeabi_dadd+0x142>
    ede4:	002e      	movs	r6, r5
    ede6:	e77f      	b.n	ece8 <__aeabi_dadd+0x108>
    ede8:	0008      	movs	r0, r1
    edea:	4310      	orrs	r0, r2
    edec:	d100      	bne.n	edf0 <__aeabi_dadd+0x210>
    edee:	e0b4      	b.n	ef5a <__aeabi_dadd+0x37a>
    edf0:	1e58      	subs	r0, r3, #1
    edf2:	2800      	cmp	r0, #0
    edf4:	d000      	beq.n	edf8 <__aeabi_dadd+0x218>
    edf6:	e0de      	b.n	efb6 <__aeabi_dadd+0x3d6>
    edf8:	18ba      	adds	r2, r7, r2
    edfa:	42ba      	cmp	r2, r7
    edfc:	419b      	sbcs	r3, r3
    edfe:	1864      	adds	r4, r4, r1
    ee00:	425b      	negs	r3, r3
    ee02:	18e4      	adds	r4, r4, r3
    ee04:	0017      	movs	r7, r2
    ee06:	2601      	movs	r6, #1
    ee08:	0223      	lsls	r3, r4, #8
    ee0a:	d5a6      	bpl.n	ed5a <__aeabi_dadd+0x17a>
    ee0c:	2602      	movs	r6, #2
    ee0e:	e7d5      	b.n	edbc <__aeabi_dadd+0x1dc>
    ee10:	2d00      	cmp	r5, #0
    ee12:	d16e      	bne.n	eef2 <__aeabi_dadd+0x312>
    ee14:	1c70      	adds	r0, r6, #1
    ee16:	0540      	lsls	r0, r0, #21
    ee18:	0d40      	lsrs	r0, r0, #21
    ee1a:	2801      	cmp	r0, #1
    ee1c:	dc00      	bgt.n	ee20 <__aeabi_dadd+0x240>
    ee1e:	e0f9      	b.n	f014 <__aeabi_dadd+0x434>
    ee20:	1ab8      	subs	r0, r7, r2
    ee22:	4684      	mov	ip, r0
    ee24:	4287      	cmp	r7, r0
    ee26:	4180      	sbcs	r0, r0
    ee28:	1ae5      	subs	r5, r4, r3
    ee2a:	4240      	negs	r0, r0
    ee2c:	1a2d      	subs	r5, r5, r0
    ee2e:	0228      	lsls	r0, r5, #8
    ee30:	d400      	bmi.n	ee34 <__aeabi_dadd+0x254>
    ee32:	e089      	b.n	ef48 <__aeabi_dadd+0x368>
    ee34:	1bd7      	subs	r7, r2, r7
    ee36:	42ba      	cmp	r2, r7
    ee38:	4192      	sbcs	r2, r2
    ee3a:	1b1c      	subs	r4, r3, r4
    ee3c:	4252      	negs	r2, r2
    ee3e:	1aa5      	subs	r5, r4, r2
    ee40:	46d8      	mov	r8, fp
    ee42:	e729      	b.n	ec98 <__aeabi_dadd+0xb8>
    ee44:	4645      	mov	r5, r8
    ee46:	2400      	movs	r4, #0
    ee48:	2700      	movs	r7, #0
    ee4a:	e76a      	b.n	ed22 <__aeabi_dadd+0x142>
    ee4c:	4c45      	ldr	r4, [pc, #276]	; (ef64 <__aeabi_dadd+0x384>)
    ee4e:	1af6      	subs	r6, r6, r3
    ee50:	402c      	ands	r4, r5
    ee52:	e749      	b.n	ece8 <__aeabi_dadd+0x108>
    ee54:	003d      	movs	r5, r7
    ee56:	3828      	subs	r0, #40	; 0x28
    ee58:	4085      	lsls	r5, r0
    ee5a:	2700      	movs	r7, #0
    ee5c:	e72e      	b.n	ecbc <__aeabi_dadd+0xdc>
    ee5e:	0038      	movs	r0, r7
    ee60:	f001 fc24 	bl	106ac <__clzsi2>
    ee64:	3020      	adds	r0, #32
    ee66:	e71d      	b.n	eca4 <__aeabi_dadd+0xc4>
    ee68:	430a      	orrs	r2, r1
    ee6a:	1e51      	subs	r1, r2, #1
    ee6c:	418a      	sbcs	r2, r1
    ee6e:	2100      	movs	r1, #0
    ee70:	e707      	b.n	ec82 <__aeabi_dadd+0xa2>
    ee72:	2b00      	cmp	r3, #0
    ee74:	d000      	beq.n	ee78 <__aeabi_dadd+0x298>
    ee76:	e0f3      	b.n	f060 <__aeabi_dadd+0x480>
    ee78:	1c70      	adds	r0, r6, #1
    ee7a:	0543      	lsls	r3, r0, #21
    ee7c:	0d5b      	lsrs	r3, r3, #21
    ee7e:	2b01      	cmp	r3, #1
    ee80:	dc00      	bgt.n	ee84 <__aeabi_dadd+0x2a4>
    ee82:	e0ad      	b.n	efe0 <__aeabi_dadd+0x400>
    ee84:	4b36      	ldr	r3, [pc, #216]	; (ef60 <__aeabi_dadd+0x380>)
    ee86:	4298      	cmp	r0, r3
    ee88:	d100      	bne.n	ee8c <__aeabi_dadd+0x2ac>
    ee8a:	e0d1      	b.n	f030 <__aeabi_dadd+0x450>
    ee8c:	18ba      	adds	r2, r7, r2
    ee8e:	42ba      	cmp	r2, r7
    ee90:	41bf      	sbcs	r7, r7
    ee92:	1864      	adds	r4, r4, r1
    ee94:	427f      	negs	r7, r7
    ee96:	19e4      	adds	r4, r4, r7
    ee98:	07e7      	lsls	r7, r4, #31
    ee9a:	0852      	lsrs	r2, r2, #1
    ee9c:	4317      	orrs	r7, r2
    ee9e:	0864      	lsrs	r4, r4, #1
    eea0:	0006      	movs	r6, r0
    eea2:	e721      	b.n	ece8 <__aeabi_dadd+0x108>
    eea4:	482e      	ldr	r0, [pc, #184]	; (ef60 <__aeabi_dadd+0x380>)
    eea6:	4285      	cmp	r5, r0
    eea8:	d100      	bne.n	eeac <__aeabi_dadd+0x2cc>
    eeaa:	e093      	b.n	efd4 <__aeabi_dadd+0x3f4>
    eeac:	001d      	movs	r5, r3
    eeae:	e6d0      	b.n	ec52 <__aeabi_dadd+0x72>
    eeb0:	0029      	movs	r1, r5
    eeb2:	3e1f      	subs	r6, #31
    eeb4:	40f1      	lsrs	r1, r6
    eeb6:	2b20      	cmp	r3, #32
    eeb8:	d100      	bne.n	eebc <__aeabi_dadd+0x2dc>
    eeba:	e08d      	b.n	efd8 <__aeabi_dadd+0x3f8>
    eebc:	2240      	movs	r2, #64	; 0x40
    eebe:	1ad3      	subs	r3, r2, r3
    eec0:	409d      	lsls	r5, r3
    eec2:	432f      	orrs	r7, r5
    eec4:	1e7d      	subs	r5, r7, #1
    eec6:	41af      	sbcs	r7, r5
    eec8:	2400      	movs	r4, #0
    eeca:	430f      	orrs	r7, r1
    eecc:	2600      	movs	r6, #0
    eece:	e744      	b.n	ed5a <__aeabi_dadd+0x17a>
    eed0:	002b      	movs	r3, r5
    eed2:	0008      	movs	r0, r1
    eed4:	3b20      	subs	r3, #32
    eed6:	40d8      	lsrs	r0, r3
    eed8:	0003      	movs	r3, r0
    eeda:	2d20      	cmp	r5, #32
    eedc:	d100      	bne.n	eee0 <__aeabi_dadd+0x300>
    eede:	e07d      	b.n	efdc <__aeabi_dadd+0x3fc>
    eee0:	2040      	movs	r0, #64	; 0x40
    eee2:	1b45      	subs	r5, r0, r5
    eee4:	40a9      	lsls	r1, r5
    eee6:	430a      	orrs	r2, r1
    eee8:	1e51      	subs	r1, r2, #1
    eeea:	418a      	sbcs	r2, r1
    eeec:	2100      	movs	r1, #0
    eeee:	431a      	orrs	r2, r3
    eef0:	e6c7      	b.n	ec82 <__aeabi_dadd+0xa2>
    eef2:	2e00      	cmp	r6, #0
    eef4:	d050      	beq.n	ef98 <__aeabi_dadd+0x3b8>
    eef6:	4e1a      	ldr	r6, [pc, #104]	; (ef60 <__aeabi_dadd+0x380>)
    eef8:	42b0      	cmp	r0, r6
    eefa:	d057      	beq.n	efac <__aeabi_dadd+0x3cc>
    eefc:	2680      	movs	r6, #128	; 0x80
    eefe:	426b      	negs	r3, r5
    ef00:	4699      	mov	r9, r3
    ef02:	0436      	lsls	r6, r6, #16
    ef04:	4334      	orrs	r4, r6
    ef06:	464b      	mov	r3, r9
    ef08:	2b38      	cmp	r3, #56	; 0x38
    ef0a:	dd00      	ble.n	ef0e <__aeabi_dadd+0x32e>
    ef0c:	e0d6      	b.n	f0bc <__aeabi_dadd+0x4dc>
    ef0e:	2b1f      	cmp	r3, #31
    ef10:	dd00      	ble.n	ef14 <__aeabi_dadd+0x334>
    ef12:	e135      	b.n	f180 <__aeabi_dadd+0x5a0>
    ef14:	2620      	movs	r6, #32
    ef16:	1af5      	subs	r5, r6, r3
    ef18:	0026      	movs	r6, r4
    ef1a:	40ae      	lsls	r6, r5
    ef1c:	46b2      	mov	sl, r6
    ef1e:	003e      	movs	r6, r7
    ef20:	40de      	lsrs	r6, r3
    ef22:	46ac      	mov	ip, r5
    ef24:	0035      	movs	r5, r6
    ef26:	4656      	mov	r6, sl
    ef28:	432e      	orrs	r6, r5
    ef2a:	4665      	mov	r5, ip
    ef2c:	40af      	lsls	r7, r5
    ef2e:	1e7d      	subs	r5, r7, #1
    ef30:	41af      	sbcs	r7, r5
    ef32:	40dc      	lsrs	r4, r3
    ef34:	4337      	orrs	r7, r6
    ef36:	1bd7      	subs	r7, r2, r7
    ef38:	42ba      	cmp	r2, r7
    ef3a:	4192      	sbcs	r2, r2
    ef3c:	1b0c      	subs	r4, r1, r4
    ef3e:	4252      	negs	r2, r2
    ef40:	1aa4      	subs	r4, r4, r2
    ef42:	0006      	movs	r6, r0
    ef44:	46d8      	mov	r8, fp
    ef46:	e6a3      	b.n	ec90 <__aeabi_dadd+0xb0>
    ef48:	4664      	mov	r4, ip
    ef4a:	4667      	mov	r7, ip
    ef4c:	432c      	orrs	r4, r5
    ef4e:	d000      	beq.n	ef52 <__aeabi_dadd+0x372>
    ef50:	e6a2      	b.n	ec98 <__aeabi_dadd+0xb8>
    ef52:	2500      	movs	r5, #0
    ef54:	2600      	movs	r6, #0
    ef56:	2700      	movs	r7, #0
    ef58:	e706      	b.n	ed68 <__aeabi_dadd+0x188>
    ef5a:	001e      	movs	r6, r3
    ef5c:	e6c4      	b.n	ece8 <__aeabi_dadd+0x108>
    ef5e:	46c0      	nop			; (mov r8, r8)
    ef60:	000007ff 	.word	0x000007ff
    ef64:	ff7fffff 	.word	0xff7fffff
    ef68:	800fffff 	.word	0x800fffff
    ef6c:	2b1f      	cmp	r3, #31
    ef6e:	dc63      	bgt.n	f038 <__aeabi_dadd+0x458>
    ef70:	2020      	movs	r0, #32
    ef72:	1ac3      	subs	r3, r0, r3
    ef74:	0008      	movs	r0, r1
    ef76:	4098      	lsls	r0, r3
    ef78:	469c      	mov	ip, r3
    ef7a:	4683      	mov	fp, r0
    ef7c:	4653      	mov	r3, sl
    ef7e:	0010      	movs	r0, r2
    ef80:	40d8      	lsrs	r0, r3
    ef82:	0003      	movs	r3, r0
    ef84:	4658      	mov	r0, fp
    ef86:	4318      	orrs	r0, r3
    ef88:	4663      	mov	r3, ip
    ef8a:	409a      	lsls	r2, r3
    ef8c:	1e53      	subs	r3, r2, #1
    ef8e:	419a      	sbcs	r2, r3
    ef90:	4653      	mov	r3, sl
    ef92:	4302      	orrs	r2, r0
    ef94:	40d9      	lsrs	r1, r3
    ef96:	e703      	b.n	eda0 <__aeabi_dadd+0x1c0>
    ef98:	0026      	movs	r6, r4
    ef9a:	433e      	orrs	r6, r7
    ef9c:	d006      	beq.n	efac <__aeabi_dadd+0x3cc>
    ef9e:	43eb      	mvns	r3, r5
    efa0:	4699      	mov	r9, r3
    efa2:	2b00      	cmp	r3, #0
    efa4:	d0c7      	beq.n	ef36 <__aeabi_dadd+0x356>
    efa6:	4e94      	ldr	r6, [pc, #592]	; (f1f8 <__aeabi_dadd+0x618>)
    efa8:	42b0      	cmp	r0, r6
    efaa:	d1ac      	bne.n	ef06 <__aeabi_dadd+0x326>
    efac:	000c      	movs	r4, r1
    efae:	0017      	movs	r7, r2
    efb0:	0006      	movs	r6, r0
    efb2:	46d8      	mov	r8, fp
    efb4:	e698      	b.n	ece8 <__aeabi_dadd+0x108>
    efb6:	4b90      	ldr	r3, [pc, #576]	; (f1f8 <__aeabi_dadd+0x618>)
    efb8:	459a      	cmp	sl, r3
    efba:	d00b      	beq.n	efd4 <__aeabi_dadd+0x3f4>
    efbc:	4682      	mov	sl, r0
    efbe:	e6e7      	b.n	ed90 <__aeabi_dadd+0x1b0>
    efc0:	2800      	cmp	r0, #0
    efc2:	d000      	beq.n	efc6 <__aeabi_dadd+0x3e6>
    efc4:	e09e      	b.n	f104 <__aeabi_dadd+0x524>
    efc6:	0018      	movs	r0, r3
    efc8:	4310      	orrs	r0, r2
    efca:	d100      	bne.n	efce <__aeabi_dadd+0x3ee>
    efcc:	e0e9      	b.n	f1a2 <__aeabi_dadd+0x5c2>
    efce:	001c      	movs	r4, r3
    efd0:	0017      	movs	r7, r2
    efd2:	46d8      	mov	r8, fp
    efd4:	4e88      	ldr	r6, [pc, #544]	; (f1f8 <__aeabi_dadd+0x618>)
    efd6:	e687      	b.n	ece8 <__aeabi_dadd+0x108>
    efd8:	2500      	movs	r5, #0
    efda:	e772      	b.n	eec2 <__aeabi_dadd+0x2e2>
    efdc:	2100      	movs	r1, #0
    efde:	e782      	b.n	eee6 <__aeabi_dadd+0x306>
    efe0:	0023      	movs	r3, r4
    efe2:	433b      	orrs	r3, r7
    efe4:	2e00      	cmp	r6, #0
    efe6:	d000      	beq.n	efea <__aeabi_dadd+0x40a>
    efe8:	e0ab      	b.n	f142 <__aeabi_dadd+0x562>
    efea:	2b00      	cmp	r3, #0
    efec:	d100      	bne.n	eff0 <__aeabi_dadd+0x410>
    efee:	e0e7      	b.n	f1c0 <__aeabi_dadd+0x5e0>
    eff0:	000b      	movs	r3, r1
    eff2:	4313      	orrs	r3, r2
    eff4:	d100      	bne.n	eff8 <__aeabi_dadd+0x418>
    eff6:	e677      	b.n	ece8 <__aeabi_dadd+0x108>
    eff8:	18ba      	adds	r2, r7, r2
    effa:	42ba      	cmp	r2, r7
    effc:	41bf      	sbcs	r7, r7
    effe:	1864      	adds	r4, r4, r1
    f000:	427f      	negs	r7, r7
    f002:	19e4      	adds	r4, r4, r7
    f004:	0223      	lsls	r3, r4, #8
    f006:	d400      	bmi.n	f00a <__aeabi_dadd+0x42a>
    f008:	e0f2      	b.n	f1f0 <__aeabi_dadd+0x610>
    f00a:	4b7c      	ldr	r3, [pc, #496]	; (f1fc <__aeabi_dadd+0x61c>)
    f00c:	0017      	movs	r7, r2
    f00e:	401c      	ands	r4, r3
    f010:	0006      	movs	r6, r0
    f012:	e669      	b.n	ece8 <__aeabi_dadd+0x108>
    f014:	0020      	movs	r0, r4
    f016:	4338      	orrs	r0, r7
    f018:	2e00      	cmp	r6, #0
    f01a:	d1d1      	bne.n	efc0 <__aeabi_dadd+0x3e0>
    f01c:	2800      	cmp	r0, #0
    f01e:	d15b      	bne.n	f0d8 <__aeabi_dadd+0x4f8>
    f020:	001c      	movs	r4, r3
    f022:	4314      	orrs	r4, r2
    f024:	d100      	bne.n	f028 <__aeabi_dadd+0x448>
    f026:	e0a8      	b.n	f17a <__aeabi_dadd+0x59a>
    f028:	001c      	movs	r4, r3
    f02a:	0017      	movs	r7, r2
    f02c:	46d8      	mov	r8, fp
    f02e:	e65b      	b.n	ece8 <__aeabi_dadd+0x108>
    f030:	0006      	movs	r6, r0
    f032:	2400      	movs	r4, #0
    f034:	2700      	movs	r7, #0
    f036:	e697      	b.n	ed68 <__aeabi_dadd+0x188>
    f038:	4650      	mov	r0, sl
    f03a:	000b      	movs	r3, r1
    f03c:	3820      	subs	r0, #32
    f03e:	40c3      	lsrs	r3, r0
    f040:	4699      	mov	r9, r3
    f042:	4653      	mov	r3, sl
    f044:	2b20      	cmp	r3, #32
    f046:	d100      	bne.n	f04a <__aeabi_dadd+0x46a>
    f048:	e095      	b.n	f176 <__aeabi_dadd+0x596>
    f04a:	2340      	movs	r3, #64	; 0x40
    f04c:	4650      	mov	r0, sl
    f04e:	1a1b      	subs	r3, r3, r0
    f050:	4099      	lsls	r1, r3
    f052:	430a      	orrs	r2, r1
    f054:	1e51      	subs	r1, r2, #1
    f056:	418a      	sbcs	r2, r1
    f058:	464b      	mov	r3, r9
    f05a:	2100      	movs	r1, #0
    f05c:	431a      	orrs	r2, r3
    f05e:	e69f      	b.n	eda0 <__aeabi_dadd+0x1c0>
    f060:	2e00      	cmp	r6, #0
    f062:	d130      	bne.n	f0c6 <__aeabi_dadd+0x4e6>
    f064:	0026      	movs	r6, r4
    f066:	433e      	orrs	r6, r7
    f068:	d067      	beq.n	f13a <__aeabi_dadd+0x55a>
    f06a:	43db      	mvns	r3, r3
    f06c:	469a      	mov	sl, r3
    f06e:	2b00      	cmp	r3, #0
    f070:	d01c      	beq.n	f0ac <__aeabi_dadd+0x4cc>
    f072:	4e61      	ldr	r6, [pc, #388]	; (f1f8 <__aeabi_dadd+0x618>)
    f074:	42b0      	cmp	r0, r6
    f076:	d060      	beq.n	f13a <__aeabi_dadd+0x55a>
    f078:	4653      	mov	r3, sl
    f07a:	2b38      	cmp	r3, #56	; 0x38
    f07c:	dd00      	ble.n	f080 <__aeabi_dadd+0x4a0>
    f07e:	e096      	b.n	f1ae <__aeabi_dadd+0x5ce>
    f080:	2b1f      	cmp	r3, #31
    f082:	dd00      	ble.n	f086 <__aeabi_dadd+0x4a6>
    f084:	e09f      	b.n	f1c6 <__aeabi_dadd+0x5e6>
    f086:	2620      	movs	r6, #32
    f088:	1af3      	subs	r3, r6, r3
    f08a:	0026      	movs	r6, r4
    f08c:	409e      	lsls	r6, r3
    f08e:	469c      	mov	ip, r3
    f090:	46b3      	mov	fp, r6
    f092:	4653      	mov	r3, sl
    f094:	003e      	movs	r6, r7
    f096:	40de      	lsrs	r6, r3
    f098:	0033      	movs	r3, r6
    f09a:	465e      	mov	r6, fp
    f09c:	431e      	orrs	r6, r3
    f09e:	4663      	mov	r3, ip
    f0a0:	409f      	lsls	r7, r3
    f0a2:	1e7b      	subs	r3, r7, #1
    f0a4:	419f      	sbcs	r7, r3
    f0a6:	4653      	mov	r3, sl
    f0a8:	40dc      	lsrs	r4, r3
    f0aa:	4337      	orrs	r7, r6
    f0ac:	18bf      	adds	r7, r7, r2
    f0ae:	4297      	cmp	r7, r2
    f0b0:	4192      	sbcs	r2, r2
    f0b2:	1864      	adds	r4, r4, r1
    f0b4:	4252      	negs	r2, r2
    f0b6:	18a4      	adds	r4, r4, r2
    f0b8:	0006      	movs	r6, r0
    f0ba:	e678      	b.n	edae <__aeabi_dadd+0x1ce>
    f0bc:	4327      	orrs	r7, r4
    f0be:	1e7c      	subs	r4, r7, #1
    f0c0:	41a7      	sbcs	r7, r4
    f0c2:	2400      	movs	r4, #0
    f0c4:	e737      	b.n	ef36 <__aeabi_dadd+0x356>
    f0c6:	4e4c      	ldr	r6, [pc, #304]	; (f1f8 <__aeabi_dadd+0x618>)
    f0c8:	42b0      	cmp	r0, r6
    f0ca:	d036      	beq.n	f13a <__aeabi_dadd+0x55a>
    f0cc:	2680      	movs	r6, #128	; 0x80
    f0ce:	425b      	negs	r3, r3
    f0d0:	0436      	lsls	r6, r6, #16
    f0d2:	469a      	mov	sl, r3
    f0d4:	4334      	orrs	r4, r6
    f0d6:	e7cf      	b.n	f078 <__aeabi_dadd+0x498>
    f0d8:	0018      	movs	r0, r3
    f0da:	4310      	orrs	r0, r2
    f0dc:	d100      	bne.n	f0e0 <__aeabi_dadd+0x500>
    f0de:	e603      	b.n	ece8 <__aeabi_dadd+0x108>
    f0e0:	1ab8      	subs	r0, r7, r2
    f0e2:	4684      	mov	ip, r0
    f0e4:	4567      	cmp	r7, ip
    f0e6:	41ad      	sbcs	r5, r5
    f0e8:	1ae0      	subs	r0, r4, r3
    f0ea:	426d      	negs	r5, r5
    f0ec:	1b40      	subs	r0, r0, r5
    f0ee:	0205      	lsls	r5, r0, #8
    f0f0:	d400      	bmi.n	f0f4 <__aeabi_dadd+0x514>
    f0f2:	e62c      	b.n	ed4e <__aeabi_dadd+0x16e>
    f0f4:	1bd7      	subs	r7, r2, r7
    f0f6:	42ba      	cmp	r2, r7
    f0f8:	4192      	sbcs	r2, r2
    f0fa:	1b1c      	subs	r4, r3, r4
    f0fc:	4252      	negs	r2, r2
    f0fe:	1aa4      	subs	r4, r4, r2
    f100:	46d8      	mov	r8, fp
    f102:	e5f1      	b.n	ece8 <__aeabi_dadd+0x108>
    f104:	0018      	movs	r0, r3
    f106:	4310      	orrs	r0, r2
    f108:	d100      	bne.n	f10c <__aeabi_dadd+0x52c>
    f10a:	e763      	b.n	efd4 <__aeabi_dadd+0x3f4>
    f10c:	08f8      	lsrs	r0, r7, #3
    f10e:	0767      	lsls	r7, r4, #29
    f110:	4307      	orrs	r7, r0
    f112:	2080      	movs	r0, #128	; 0x80
    f114:	08e4      	lsrs	r4, r4, #3
    f116:	0300      	lsls	r0, r0, #12
    f118:	4204      	tst	r4, r0
    f11a:	d008      	beq.n	f12e <__aeabi_dadd+0x54e>
    f11c:	08dd      	lsrs	r5, r3, #3
    f11e:	4205      	tst	r5, r0
    f120:	d105      	bne.n	f12e <__aeabi_dadd+0x54e>
    f122:	08d2      	lsrs	r2, r2, #3
    f124:	0759      	lsls	r1, r3, #29
    f126:	4311      	orrs	r1, r2
    f128:	000f      	movs	r7, r1
    f12a:	002c      	movs	r4, r5
    f12c:	46d8      	mov	r8, fp
    f12e:	0f7b      	lsrs	r3, r7, #29
    f130:	00e4      	lsls	r4, r4, #3
    f132:	431c      	orrs	r4, r3
    f134:	00ff      	lsls	r7, r7, #3
    f136:	4e30      	ldr	r6, [pc, #192]	; (f1f8 <__aeabi_dadd+0x618>)
    f138:	e5d6      	b.n	ece8 <__aeabi_dadd+0x108>
    f13a:	000c      	movs	r4, r1
    f13c:	0017      	movs	r7, r2
    f13e:	0006      	movs	r6, r0
    f140:	e5d2      	b.n	ece8 <__aeabi_dadd+0x108>
    f142:	2b00      	cmp	r3, #0
    f144:	d038      	beq.n	f1b8 <__aeabi_dadd+0x5d8>
    f146:	000b      	movs	r3, r1
    f148:	4313      	orrs	r3, r2
    f14a:	d100      	bne.n	f14e <__aeabi_dadd+0x56e>
    f14c:	e742      	b.n	efd4 <__aeabi_dadd+0x3f4>
    f14e:	08f8      	lsrs	r0, r7, #3
    f150:	0767      	lsls	r7, r4, #29
    f152:	4307      	orrs	r7, r0
    f154:	2080      	movs	r0, #128	; 0x80
    f156:	08e4      	lsrs	r4, r4, #3
    f158:	0300      	lsls	r0, r0, #12
    f15a:	4204      	tst	r4, r0
    f15c:	d0e7      	beq.n	f12e <__aeabi_dadd+0x54e>
    f15e:	08cb      	lsrs	r3, r1, #3
    f160:	4203      	tst	r3, r0
    f162:	d1e4      	bne.n	f12e <__aeabi_dadd+0x54e>
    f164:	08d2      	lsrs	r2, r2, #3
    f166:	0749      	lsls	r1, r1, #29
    f168:	4311      	orrs	r1, r2
    f16a:	000f      	movs	r7, r1
    f16c:	001c      	movs	r4, r3
    f16e:	e7de      	b.n	f12e <__aeabi_dadd+0x54e>
    f170:	2700      	movs	r7, #0
    f172:	2400      	movs	r4, #0
    f174:	e5d5      	b.n	ed22 <__aeabi_dadd+0x142>
    f176:	2100      	movs	r1, #0
    f178:	e76b      	b.n	f052 <__aeabi_dadd+0x472>
    f17a:	2500      	movs	r5, #0
    f17c:	2700      	movs	r7, #0
    f17e:	e5f3      	b.n	ed68 <__aeabi_dadd+0x188>
    f180:	464e      	mov	r6, r9
    f182:	0025      	movs	r5, r4
    f184:	3e20      	subs	r6, #32
    f186:	40f5      	lsrs	r5, r6
    f188:	464b      	mov	r3, r9
    f18a:	002e      	movs	r6, r5
    f18c:	2b20      	cmp	r3, #32
    f18e:	d02d      	beq.n	f1ec <__aeabi_dadd+0x60c>
    f190:	2540      	movs	r5, #64	; 0x40
    f192:	1aed      	subs	r5, r5, r3
    f194:	40ac      	lsls	r4, r5
    f196:	4327      	orrs	r7, r4
    f198:	1e7c      	subs	r4, r7, #1
    f19a:	41a7      	sbcs	r7, r4
    f19c:	2400      	movs	r4, #0
    f19e:	4337      	orrs	r7, r6
    f1a0:	e6c9      	b.n	ef36 <__aeabi_dadd+0x356>
    f1a2:	2480      	movs	r4, #128	; 0x80
    f1a4:	2500      	movs	r5, #0
    f1a6:	0324      	lsls	r4, r4, #12
    f1a8:	4e13      	ldr	r6, [pc, #76]	; (f1f8 <__aeabi_dadd+0x618>)
    f1aa:	2700      	movs	r7, #0
    f1ac:	e5dc      	b.n	ed68 <__aeabi_dadd+0x188>
    f1ae:	4327      	orrs	r7, r4
    f1b0:	1e7c      	subs	r4, r7, #1
    f1b2:	41a7      	sbcs	r7, r4
    f1b4:	2400      	movs	r4, #0
    f1b6:	e779      	b.n	f0ac <__aeabi_dadd+0x4cc>
    f1b8:	000c      	movs	r4, r1
    f1ba:	0017      	movs	r7, r2
    f1bc:	4e0e      	ldr	r6, [pc, #56]	; (f1f8 <__aeabi_dadd+0x618>)
    f1be:	e593      	b.n	ece8 <__aeabi_dadd+0x108>
    f1c0:	000c      	movs	r4, r1
    f1c2:	0017      	movs	r7, r2
    f1c4:	e590      	b.n	ece8 <__aeabi_dadd+0x108>
    f1c6:	4656      	mov	r6, sl
    f1c8:	0023      	movs	r3, r4
    f1ca:	3e20      	subs	r6, #32
    f1cc:	40f3      	lsrs	r3, r6
    f1ce:	4699      	mov	r9, r3
    f1d0:	4653      	mov	r3, sl
    f1d2:	2b20      	cmp	r3, #32
    f1d4:	d00e      	beq.n	f1f4 <__aeabi_dadd+0x614>
    f1d6:	2340      	movs	r3, #64	; 0x40
    f1d8:	4656      	mov	r6, sl
    f1da:	1b9b      	subs	r3, r3, r6
    f1dc:	409c      	lsls	r4, r3
    f1de:	4327      	orrs	r7, r4
    f1e0:	1e7c      	subs	r4, r7, #1
    f1e2:	41a7      	sbcs	r7, r4
    f1e4:	464b      	mov	r3, r9
    f1e6:	2400      	movs	r4, #0
    f1e8:	431f      	orrs	r7, r3
    f1ea:	e75f      	b.n	f0ac <__aeabi_dadd+0x4cc>
    f1ec:	2400      	movs	r4, #0
    f1ee:	e7d2      	b.n	f196 <__aeabi_dadd+0x5b6>
    f1f0:	0017      	movs	r7, r2
    f1f2:	e5b2      	b.n	ed5a <__aeabi_dadd+0x17a>
    f1f4:	2400      	movs	r4, #0
    f1f6:	e7f2      	b.n	f1de <__aeabi_dadd+0x5fe>
    f1f8:	000007ff 	.word	0x000007ff
    f1fc:	ff7fffff 	.word	0xff7fffff

0000f200 <__aeabi_ddiv>:
    f200:	b5f0      	push	{r4, r5, r6, r7, lr}
    f202:	4657      	mov	r7, sl
    f204:	4645      	mov	r5, r8
    f206:	46de      	mov	lr, fp
    f208:	464e      	mov	r6, r9
    f20a:	b5e0      	push	{r5, r6, r7, lr}
    f20c:	004c      	lsls	r4, r1, #1
    f20e:	030e      	lsls	r6, r1, #12
    f210:	b087      	sub	sp, #28
    f212:	4683      	mov	fp, r0
    f214:	4692      	mov	sl, r2
    f216:	001d      	movs	r5, r3
    f218:	4680      	mov	r8, r0
    f21a:	0b36      	lsrs	r6, r6, #12
    f21c:	0d64      	lsrs	r4, r4, #21
    f21e:	0fcf      	lsrs	r7, r1, #31
    f220:	2c00      	cmp	r4, #0
    f222:	d04f      	beq.n	f2c4 <__aeabi_ddiv+0xc4>
    f224:	4b6f      	ldr	r3, [pc, #444]	; (f3e4 <__aeabi_ddiv+0x1e4>)
    f226:	429c      	cmp	r4, r3
    f228:	d035      	beq.n	f296 <__aeabi_ddiv+0x96>
    f22a:	2380      	movs	r3, #128	; 0x80
    f22c:	0f42      	lsrs	r2, r0, #29
    f22e:	041b      	lsls	r3, r3, #16
    f230:	00f6      	lsls	r6, r6, #3
    f232:	4313      	orrs	r3, r2
    f234:	4333      	orrs	r3, r6
    f236:	4699      	mov	r9, r3
    f238:	00c3      	lsls	r3, r0, #3
    f23a:	4698      	mov	r8, r3
    f23c:	4b6a      	ldr	r3, [pc, #424]	; (f3e8 <__aeabi_ddiv+0x1e8>)
    f23e:	2600      	movs	r6, #0
    f240:	469c      	mov	ip, r3
    f242:	2300      	movs	r3, #0
    f244:	4464      	add	r4, ip
    f246:	9303      	str	r3, [sp, #12]
    f248:	032b      	lsls	r3, r5, #12
    f24a:	0b1b      	lsrs	r3, r3, #12
    f24c:	469b      	mov	fp, r3
    f24e:	006b      	lsls	r3, r5, #1
    f250:	0fed      	lsrs	r5, r5, #31
    f252:	4650      	mov	r0, sl
    f254:	0d5b      	lsrs	r3, r3, #21
    f256:	9501      	str	r5, [sp, #4]
    f258:	d05e      	beq.n	f318 <__aeabi_ddiv+0x118>
    f25a:	4a62      	ldr	r2, [pc, #392]	; (f3e4 <__aeabi_ddiv+0x1e4>)
    f25c:	4293      	cmp	r3, r2
    f25e:	d053      	beq.n	f308 <__aeabi_ddiv+0x108>
    f260:	465a      	mov	r2, fp
    f262:	00d1      	lsls	r1, r2, #3
    f264:	2280      	movs	r2, #128	; 0x80
    f266:	0f40      	lsrs	r0, r0, #29
    f268:	0412      	lsls	r2, r2, #16
    f26a:	4302      	orrs	r2, r0
    f26c:	430a      	orrs	r2, r1
    f26e:	4693      	mov	fp, r2
    f270:	4652      	mov	r2, sl
    f272:	00d1      	lsls	r1, r2, #3
    f274:	4a5c      	ldr	r2, [pc, #368]	; (f3e8 <__aeabi_ddiv+0x1e8>)
    f276:	4694      	mov	ip, r2
    f278:	2200      	movs	r2, #0
    f27a:	4463      	add	r3, ip
    f27c:	0038      	movs	r0, r7
    f27e:	4068      	eors	r0, r5
    f280:	4684      	mov	ip, r0
    f282:	9002      	str	r0, [sp, #8]
    f284:	1ae4      	subs	r4, r4, r3
    f286:	4316      	orrs	r6, r2
    f288:	2e0f      	cmp	r6, #15
    f28a:	d900      	bls.n	f28e <__aeabi_ddiv+0x8e>
    f28c:	e0b4      	b.n	f3f8 <__aeabi_ddiv+0x1f8>
    f28e:	4b57      	ldr	r3, [pc, #348]	; (f3ec <__aeabi_ddiv+0x1ec>)
    f290:	00b6      	lsls	r6, r6, #2
    f292:	599b      	ldr	r3, [r3, r6]
    f294:	469f      	mov	pc, r3
    f296:	0003      	movs	r3, r0
    f298:	4333      	orrs	r3, r6
    f29a:	4699      	mov	r9, r3
    f29c:	d16c      	bne.n	f378 <__aeabi_ddiv+0x178>
    f29e:	2300      	movs	r3, #0
    f2a0:	4698      	mov	r8, r3
    f2a2:	3302      	adds	r3, #2
    f2a4:	2608      	movs	r6, #8
    f2a6:	9303      	str	r3, [sp, #12]
    f2a8:	e7ce      	b.n	f248 <__aeabi_ddiv+0x48>
    f2aa:	46cb      	mov	fp, r9
    f2ac:	4641      	mov	r1, r8
    f2ae:	9a03      	ldr	r2, [sp, #12]
    f2b0:	9701      	str	r7, [sp, #4]
    f2b2:	2a02      	cmp	r2, #2
    f2b4:	d165      	bne.n	f382 <__aeabi_ddiv+0x182>
    f2b6:	9b01      	ldr	r3, [sp, #4]
    f2b8:	4c4a      	ldr	r4, [pc, #296]	; (f3e4 <__aeabi_ddiv+0x1e4>)
    f2ba:	469c      	mov	ip, r3
    f2bc:	2300      	movs	r3, #0
    f2be:	2200      	movs	r2, #0
    f2c0:	4698      	mov	r8, r3
    f2c2:	e06b      	b.n	f39c <__aeabi_ddiv+0x19c>
    f2c4:	0003      	movs	r3, r0
    f2c6:	4333      	orrs	r3, r6
    f2c8:	4699      	mov	r9, r3
    f2ca:	d04e      	beq.n	f36a <__aeabi_ddiv+0x16a>
    f2cc:	2e00      	cmp	r6, #0
    f2ce:	d100      	bne.n	f2d2 <__aeabi_ddiv+0xd2>
    f2d0:	e1bc      	b.n	f64c <__aeabi_ddiv+0x44c>
    f2d2:	0030      	movs	r0, r6
    f2d4:	f001 f9ea 	bl	106ac <__clzsi2>
    f2d8:	0003      	movs	r3, r0
    f2da:	3b0b      	subs	r3, #11
    f2dc:	2b1c      	cmp	r3, #28
    f2de:	dd00      	ble.n	f2e2 <__aeabi_ddiv+0xe2>
    f2e0:	e1ac      	b.n	f63c <__aeabi_ddiv+0x43c>
    f2e2:	221d      	movs	r2, #29
    f2e4:	1ad3      	subs	r3, r2, r3
    f2e6:	465a      	mov	r2, fp
    f2e8:	0001      	movs	r1, r0
    f2ea:	40da      	lsrs	r2, r3
    f2ec:	3908      	subs	r1, #8
    f2ee:	408e      	lsls	r6, r1
    f2f0:	0013      	movs	r3, r2
    f2f2:	4333      	orrs	r3, r6
    f2f4:	4699      	mov	r9, r3
    f2f6:	465b      	mov	r3, fp
    f2f8:	408b      	lsls	r3, r1
    f2fa:	4698      	mov	r8, r3
    f2fc:	2300      	movs	r3, #0
    f2fe:	4c3c      	ldr	r4, [pc, #240]	; (f3f0 <__aeabi_ddiv+0x1f0>)
    f300:	2600      	movs	r6, #0
    f302:	1a24      	subs	r4, r4, r0
    f304:	9303      	str	r3, [sp, #12]
    f306:	e79f      	b.n	f248 <__aeabi_ddiv+0x48>
    f308:	4651      	mov	r1, sl
    f30a:	465a      	mov	r2, fp
    f30c:	4311      	orrs	r1, r2
    f30e:	d129      	bne.n	f364 <__aeabi_ddiv+0x164>
    f310:	2200      	movs	r2, #0
    f312:	4693      	mov	fp, r2
    f314:	3202      	adds	r2, #2
    f316:	e7b1      	b.n	f27c <__aeabi_ddiv+0x7c>
    f318:	4659      	mov	r1, fp
    f31a:	4301      	orrs	r1, r0
    f31c:	d01e      	beq.n	f35c <__aeabi_ddiv+0x15c>
    f31e:	465b      	mov	r3, fp
    f320:	2b00      	cmp	r3, #0
    f322:	d100      	bne.n	f326 <__aeabi_ddiv+0x126>
    f324:	e19e      	b.n	f664 <__aeabi_ddiv+0x464>
    f326:	4658      	mov	r0, fp
    f328:	f001 f9c0 	bl	106ac <__clzsi2>
    f32c:	0003      	movs	r3, r0
    f32e:	3b0b      	subs	r3, #11
    f330:	2b1c      	cmp	r3, #28
    f332:	dd00      	ble.n	f336 <__aeabi_ddiv+0x136>
    f334:	e18f      	b.n	f656 <__aeabi_ddiv+0x456>
    f336:	0002      	movs	r2, r0
    f338:	4659      	mov	r1, fp
    f33a:	3a08      	subs	r2, #8
    f33c:	4091      	lsls	r1, r2
    f33e:	468b      	mov	fp, r1
    f340:	211d      	movs	r1, #29
    f342:	1acb      	subs	r3, r1, r3
    f344:	4651      	mov	r1, sl
    f346:	40d9      	lsrs	r1, r3
    f348:	000b      	movs	r3, r1
    f34a:	4659      	mov	r1, fp
    f34c:	430b      	orrs	r3, r1
    f34e:	4651      	mov	r1, sl
    f350:	469b      	mov	fp, r3
    f352:	4091      	lsls	r1, r2
    f354:	4b26      	ldr	r3, [pc, #152]	; (f3f0 <__aeabi_ddiv+0x1f0>)
    f356:	2200      	movs	r2, #0
    f358:	1a1b      	subs	r3, r3, r0
    f35a:	e78f      	b.n	f27c <__aeabi_ddiv+0x7c>
    f35c:	2300      	movs	r3, #0
    f35e:	2201      	movs	r2, #1
    f360:	469b      	mov	fp, r3
    f362:	e78b      	b.n	f27c <__aeabi_ddiv+0x7c>
    f364:	4651      	mov	r1, sl
    f366:	2203      	movs	r2, #3
    f368:	e788      	b.n	f27c <__aeabi_ddiv+0x7c>
    f36a:	2300      	movs	r3, #0
    f36c:	4698      	mov	r8, r3
    f36e:	3301      	adds	r3, #1
    f370:	2604      	movs	r6, #4
    f372:	2400      	movs	r4, #0
    f374:	9303      	str	r3, [sp, #12]
    f376:	e767      	b.n	f248 <__aeabi_ddiv+0x48>
    f378:	2303      	movs	r3, #3
    f37a:	46b1      	mov	r9, r6
    f37c:	9303      	str	r3, [sp, #12]
    f37e:	260c      	movs	r6, #12
    f380:	e762      	b.n	f248 <__aeabi_ddiv+0x48>
    f382:	2a03      	cmp	r2, #3
    f384:	d100      	bne.n	f388 <__aeabi_ddiv+0x188>
    f386:	e25c      	b.n	f842 <__aeabi_ddiv+0x642>
    f388:	9b01      	ldr	r3, [sp, #4]
    f38a:	2a01      	cmp	r2, #1
    f38c:	d000      	beq.n	f390 <__aeabi_ddiv+0x190>
    f38e:	e1e4      	b.n	f75a <__aeabi_ddiv+0x55a>
    f390:	4013      	ands	r3, r2
    f392:	469c      	mov	ip, r3
    f394:	2300      	movs	r3, #0
    f396:	2400      	movs	r4, #0
    f398:	2200      	movs	r2, #0
    f39a:	4698      	mov	r8, r3
    f39c:	2100      	movs	r1, #0
    f39e:	0312      	lsls	r2, r2, #12
    f3a0:	0b13      	lsrs	r3, r2, #12
    f3a2:	0d0a      	lsrs	r2, r1, #20
    f3a4:	0512      	lsls	r2, r2, #20
    f3a6:	431a      	orrs	r2, r3
    f3a8:	0523      	lsls	r3, r4, #20
    f3aa:	4c12      	ldr	r4, [pc, #72]	; (f3f4 <__aeabi_ddiv+0x1f4>)
    f3ac:	4640      	mov	r0, r8
    f3ae:	4022      	ands	r2, r4
    f3b0:	4313      	orrs	r3, r2
    f3b2:	4662      	mov	r2, ip
    f3b4:	005b      	lsls	r3, r3, #1
    f3b6:	07d2      	lsls	r2, r2, #31
    f3b8:	085b      	lsrs	r3, r3, #1
    f3ba:	4313      	orrs	r3, r2
    f3bc:	0019      	movs	r1, r3
    f3be:	b007      	add	sp, #28
    f3c0:	bc3c      	pop	{r2, r3, r4, r5}
    f3c2:	4690      	mov	r8, r2
    f3c4:	4699      	mov	r9, r3
    f3c6:	46a2      	mov	sl, r4
    f3c8:	46ab      	mov	fp, r5
    f3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3cc:	2300      	movs	r3, #0
    f3ce:	2280      	movs	r2, #128	; 0x80
    f3d0:	469c      	mov	ip, r3
    f3d2:	0312      	lsls	r2, r2, #12
    f3d4:	4698      	mov	r8, r3
    f3d6:	4c03      	ldr	r4, [pc, #12]	; (f3e4 <__aeabi_ddiv+0x1e4>)
    f3d8:	e7e0      	b.n	f39c <__aeabi_ddiv+0x19c>
    f3da:	2300      	movs	r3, #0
    f3dc:	4c01      	ldr	r4, [pc, #4]	; (f3e4 <__aeabi_ddiv+0x1e4>)
    f3de:	2200      	movs	r2, #0
    f3e0:	4698      	mov	r8, r3
    f3e2:	e7db      	b.n	f39c <__aeabi_ddiv+0x19c>
    f3e4:	000007ff 	.word	0x000007ff
    f3e8:	fffffc01 	.word	0xfffffc01
    f3ec:	000140a4 	.word	0x000140a4
    f3f0:	fffffc0d 	.word	0xfffffc0d
    f3f4:	800fffff 	.word	0x800fffff
    f3f8:	45d9      	cmp	r9, fp
    f3fa:	d900      	bls.n	f3fe <__aeabi_ddiv+0x1fe>
    f3fc:	e139      	b.n	f672 <__aeabi_ddiv+0x472>
    f3fe:	d100      	bne.n	f402 <__aeabi_ddiv+0x202>
    f400:	e134      	b.n	f66c <__aeabi_ddiv+0x46c>
    f402:	2300      	movs	r3, #0
    f404:	4646      	mov	r6, r8
    f406:	464d      	mov	r5, r9
    f408:	469a      	mov	sl, r3
    f40a:	3c01      	subs	r4, #1
    f40c:	465b      	mov	r3, fp
    f40e:	0e0a      	lsrs	r2, r1, #24
    f410:	021b      	lsls	r3, r3, #8
    f412:	431a      	orrs	r2, r3
    f414:	020b      	lsls	r3, r1, #8
    f416:	0c17      	lsrs	r7, r2, #16
    f418:	9303      	str	r3, [sp, #12]
    f41a:	0413      	lsls	r3, r2, #16
    f41c:	0c1b      	lsrs	r3, r3, #16
    f41e:	0039      	movs	r1, r7
    f420:	0028      	movs	r0, r5
    f422:	4690      	mov	r8, r2
    f424:	9301      	str	r3, [sp, #4]
    f426:	f7ff fa27 	bl	e878 <__udivsi3>
    f42a:	0002      	movs	r2, r0
    f42c:	9b01      	ldr	r3, [sp, #4]
    f42e:	4683      	mov	fp, r0
    f430:	435a      	muls	r2, r3
    f432:	0028      	movs	r0, r5
    f434:	0039      	movs	r1, r7
    f436:	4691      	mov	r9, r2
    f438:	f7ff faa4 	bl	e984 <__aeabi_uidivmod>
    f43c:	0c35      	lsrs	r5, r6, #16
    f43e:	0409      	lsls	r1, r1, #16
    f440:	430d      	orrs	r5, r1
    f442:	45a9      	cmp	r9, r5
    f444:	d90d      	bls.n	f462 <__aeabi_ddiv+0x262>
    f446:	465b      	mov	r3, fp
    f448:	4445      	add	r5, r8
    f44a:	3b01      	subs	r3, #1
    f44c:	45a8      	cmp	r8, r5
    f44e:	d900      	bls.n	f452 <__aeabi_ddiv+0x252>
    f450:	e13a      	b.n	f6c8 <__aeabi_ddiv+0x4c8>
    f452:	45a9      	cmp	r9, r5
    f454:	d800      	bhi.n	f458 <__aeabi_ddiv+0x258>
    f456:	e137      	b.n	f6c8 <__aeabi_ddiv+0x4c8>
    f458:	2302      	movs	r3, #2
    f45a:	425b      	negs	r3, r3
    f45c:	469c      	mov	ip, r3
    f45e:	4445      	add	r5, r8
    f460:	44e3      	add	fp, ip
    f462:	464b      	mov	r3, r9
    f464:	1aeb      	subs	r3, r5, r3
    f466:	0039      	movs	r1, r7
    f468:	0018      	movs	r0, r3
    f46a:	9304      	str	r3, [sp, #16]
    f46c:	f7ff fa04 	bl	e878 <__udivsi3>
    f470:	9b01      	ldr	r3, [sp, #4]
    f472:	0005      	movs	r5, r0
    f474:	4343      	muls	r3, r0
    f476:	0039      	movs	r1, r7
    f478:	9804      	ldr	r0, [sp, #16]
    f47a:	4699      	mov	r9, r3
    f47c:	f7ff fa82 	bl	e984 <__aeabi_uidivmod>
    f480:	0433      	lsls	r3, r6, #16
    f482:	0409      	lsls	r1, r1, #16
    f484:	0c1b      	lsrs	r3, r3, #16
    f486:	430b      	orrs	r3, r1
    f488:	4599      	cmp	r9, r3
    f48a:	d909      	bls.n	f4a0 <__aeabi_ddiv+0x2a0>
    f48c:	4443      	add	r3, r8
    f48e:	1e6a      	subs	r2, r5, #1
    f490:	4598      	cmp	r8, r3
    f492:	d900      	bls.n	f496 <__aeabi_ddiv+0x296>
    f494:	e11a      	b.n	f6cc <__aeabi_ddiv+0x4cc>
    f496:	4599      	cmp	r9, r3
    f498:	d800      	bhi.n	f49c <__aeabi_ddiv+0x29c>
    f49a:	e117      	b.n	f6cc <__aeabi_ddiv+0x4cc>
    f49c:	3d02      	subs	r5, #2
    f49e:	4443      	add	r3, r8
    f4a0:	464a      	mov	r2, r9
    f4a2:	1a9b      	subs	r3, r3, r2
    f4a4:	465a      	mov	r2, fp
    f4a6:	0412      	lsls	r2, r2, #16
    f4a8:	432a      	orrs	r2, r5
    f4aa:	9903      	ldr	r1, [sp, #12]
    f4ac:	4693      	mov	fp, r2
    f4ae:	0c10      	lsrs	r0, r2, #16
    f4b0:	0c0a      	lsrs	r2, r1, #16
    f4b2:	4691      	mov	r9, r2
    f4b4:	0409      	lsls	r1, r1, #16
    f4b6:	465a      	mov	r2, fp
    f4b8:	0c09      	lsrs	r1, r1, #16
    f4ba:	464e      	mov	r6, r9
    f4bc:	000d      	movs	r5, r1
    f4be:	0412      	lsls	r2, r2, #16
    f4c0:	0c12      	lsrs	r2, r2, #16
    f4c2:	4345      	muls	r5, r0
    f4c4:	9105      	str	r1, [sp, #20]
    f4c6:	4351      	muls	r1, r2
    f4c8:	4372      	muls	r2, r6
    f4ca:	4370      	muls	r0, r6
    f4cc:	1952      	adds	r2, r2, r5
    f4ce:	0c0e      	lsrs	r6, r1, #16
    f4d0:	18b2      	adds	r2, r6, r2
    f4d2:	4295      	cmp	r5, r2
    f4d4:	d903      	bls.n	f4de <__aeabi_ddiv+0x2de>
    f4d6:	2580      	movs	r5, #128	; 0x80
    f4d8:	026d      	lsls	r5, r5, #9
    f4da:	46ac      	mov	ip, r5
    f4dc:	4460      	add	r0, ip
    f4de:	0c15      	lsrs	r5, r2, #16
    f4e0:	0409      	lsls	r1, r1, #16
    f4e2:	0412      	lsls	r2, r2, #16
    f4e4:	0c09      	lsrs	r1, r1, #16
    f4e6:	1828      	adds	r0, r5, r0
    f4e8:	1852      	adds	r2, r2, r1
    f4ea:	4283      	cmp	r3, r0
    f4ec:	d200      	bcs.n	f4f0 <__aeabi_ddiv+0x2f0>
    f4ee:	e0ce      	b.n	f68e <__aeabi_ddiv+0x48e>
    f4f0:	d100      	bne.n	f4f4 <__aeabi_ddiv+0x2f4>
    f4f2:	e0c8      	b.n	f686 <__aeabi_ddiv+0x486>
    f4f4:	1a1d      	subs	r5, r3, r0
    f4f6:	4653      	mov	r3, sl
    f4f8:	1a9e      	subs	r6, r3, r2
    f4fa:	45b2      	cmp	sl, r6
    f4fc:	4192      	sbcs	r2, r2
    f4fe:	4252      	negs	r2, r2
    f500:	1aab      	subs	r3, r5, r2
    f502:	469a      	mov	sl, r3
    f504:	4598      	cmp	r8, r3
    f506:	d100      	bne.n	f50a <__aeabi_ddiv+0x30a>
    f508:	e117      	b.n	f73a <__aeabi_ddiv+0x53a>
    f50a:	0039      	movs	r1, r7
    f50c:	0018      	movs	r0, r3
    f50e:	f7ff f9b3 	bl	e878 <__udivsi3>
    f512:	9b01      	ldr	r3, [sp, #4]
    f514:	0005      	movs	r5, r0
    f516:	4343      	muls	r3, r0
    f518:	0039      	movs	r1, r7
    f51a:	4650      	mov	r0, sl
    f51c:	9304      	str	r3, [sp, #16]
    f51e:	f7ff fa31 	bl	e984 <__aeabi_uidivmod>
    f522:	9804      	ldr	r0, [sp, #16]
    f524:	040b      	lsls	r3, r1, #16
    f526:	0c31      	lsrs	r1, r6, #16
    f528:	4319      	orrs	r1, r3
    f52a:	4288      	cmp	r0, r1
    f52c:	d909      	bls.n	f542 <__aeabi_ddiv+0x342>
    f52e:	4441      	add	r1, r8
    f530:	1e6b      	subs	r3, r5, #1
    f532:	4588      	cmp	r8, r1
    f534:	d900      	bls.n	f538 <__aeabi_ddiv+0x338>
    f536:	e107      	b.n	f748 <__aeabi_ddiv+0x548>
    f538:	4288      	cmp	r0, r1
    f53a:	d800      	bhi.n	f53e <__aeabi_ddiv+0x33e>
    f53c:	e104      	b.n	f748 <__aeabi_ddiv+0x548>
    f53e:	3d02      	subs	r5, #2
    f540:	4441      	add	r1, r8
    f542:	9b04      	ldr	r3, [sp, #16]
    f544:	1acb      	subs	r3, r1, r3
    f546:	0018      	movs	r0, r3
    f548:	0039      	movs	r1, r7
    f54a:	9304      	str	r3, [sp, #16]
    f54c:	f7ff f994 	bl	e878 <__udivsi3>
    f550:	9b01      	ldr	r3, [sp, #4]
    f552:	4682      	mov	sl, r0
    f554:	4343      	muls	r3, r0
    f556:	0039      	movs	r1, r7
    f558:	9804      	ldr	r0, [sp, #16]
    f55a:	9301      	str	r3, [sp, #4]
    f55c:	f7ff fa12 	bl	e984 <__aeabi_uidivmod>
    f560:	9801      	ldr	r0, [sp, #4]
    f562:	040b      	lsls	r3, r1, #16
    f564:	0431      	lsls	r1, r6, #16
    f566:	0c09      	lsrs	r1, r1, #16
    f568:	4319      	orrs	r1, r3
    f56a:	4288      	cmp	r0, r1
    f56c:	d90d      	bls.n	f58a <__aeabi_ddiv+0x38a>
    f56e:	4653      	mov	r3, sl
    f570:	4441      	add	r1, r8
    f572:	3b01      	subs	r3, #1
    f574:	4588      	cmp	r8, r1
    f576:	d900      	bls.n	f57a <__aeabi_ddiv+0x37a>
    f578:	e0e8      	b.n	f74c <__aeabi_ddiv+0x54c>
    f57a:	4288      	cmp	r0, r1
    f57c:	d800      	bhi.n	f580 <__aeabi_ddiv+0x380>
    f57e:	e0e5      	b.n	f74c <__aeabi_ddiv+0x54c>
    f580:	2302      	movs	r3, #2
    f582:	425b      	negs	r3, r3
    f584:	469c      	mov	ip, r3
    f586:	4441      	add	r1, r8
    f588:	44e2      	add	sl, ip
    f58a:	9b01      	ldr	r3, [sp, #4]
    f58c:	042d      	lsls	r5, r5, #16
    f58e:	1ace      	subs	r6, r1, r3
    f590:	4651      	mov	r1, sl
    f592:	4329      	orrs	r1, r5
    f594:	9d05      	ldr	r5, [sp, #20]
    f596:	464f      	mov	r7, r9
    f598:	002a      	movs	r2, r5
    f59a:	040b      	lsls	r3, r1, #16
    f59c:	0c08      	lsrs	r0, r1, #16
    f59e:	0c1b      	lsrs	r3, r3, #16
    f5a0:	435a      	muls	r2, r3
    f5a2:	4345      	muls	r5, r0
    f5a4:	437b      	muls	r3, r7
    f5a6:	4378      	muls	r0, r7
    f5a8:	195b      	adds	r3, r3, r5
    f5aa:	0c17      	lsrs	r7, r2, #16
    f5ac:	18fb      	adds	r3, r7, r3
    f5ae:	429d      	cmp	r5, r3
    f5b0:	d903      	bls.n	f5ba <__aeabi_ddiv+0x3ba>
    f5b2:	2580      	movs	r5, #128	; 0x80
    f5b4:	026d      	lsls	r5, r5, #9
    f5b6:	46ac      	mov	ip, r5
    f5b8:	4460      	add	r0, ip
    f5ba:	0c1d      	lsrs	r5, r3, #16
    f5bc:	0412      	lsls	r2, r2, #16
    f5be:	041b      	lsls	r3, r3, #16
    f5c0:	0c12      	lsrs	r2, r2, #16
    f5c2:	1828      	adds	r0, r5, r0
    f5c4:	189b      	adds	r3, r3, r2
    f5c6:	4286      	cmp	r6, r0
    f5c8:	d200      	bcs.n	f5cc <__aeabi_ddiv+0x3cc>
    f5ca:	e093      	b.n	f6f4 <__aeabi_ddiv+0x4f4>
    f5cc:	d100      	bne.n	f5d0 <__aeabi_ddiv+0x3d0>
    f5ce:	e08e      	b.n	f6ee <__aeabi_ddiv+0x4ee>
    f5d0:	2301      	movs	r3, #1
    f5d2:	4319      	orrs	r1, r3
    f5d4:	4ba0      	ldr	r3, [pc, #640]	; (f858 <__aeabi_ddiv+0x658>)
    f5d6:	18e3      	adds	r3, r4, r3
    f5d8:	2b00      	cmp	r3, #0
    f5da:	dc00      	bgt.n	f5de <__aeabi_ddiv+0x3de>
    f5dc:	e099      	b.n	f712 <__aeabi_ddiv+0x512>
    f5de:	074a      	lsls	r2, r1, #29
    f5e0:	d000      	beq.n	f5e4 <__aeabi_ddiv+0x3e4>
    f5e2:	e09e      	b.n	f722 <__aeabi_ddiv+0x522>
    f5e4:	465a      	mov	r2, fp
    f5e6:	01d2      	lsls	r2, r2, #7
    f5e8:	d506      	bpl.n	f5f8 <__aeabi_ddiv+0x3f8>
    f5ea:	465a      	mov	r2, fp
    f5ec:	4b9b      	ldr	r3, [pc, #620]	; (f85c <__aeabi_ddiv+0x65c>)
    f5ee:	401a      	ands	r2, r3
    f5f0:	2380      	movs	r3, #128	; 0x80
    f5f2:	4693      	mov	fp, r2
    f5f4:	00db      	lsls	r3, r3, #3
    f5f6:	18e3      	adds	r3, r4, r3
    f5f8:	4a99      	ldr	r2, [pc, #612]	; (f860 <__aeabi_ddiv+0x660>)
    f5fa:	4293      	cmp	r3, r2
    f5fc:	dd68      	ble.n	f6d0 <__aeabi_ddiv+0x4d0>
    f5fe:	2301      	movs	r3, #1
    f600:	9a02      	ldr	r2, [sp, #8]
    f602:	4c98      	ldr	r4, [pc, #608]	; (f864 <__aeabi_ddiv+0x664>)
    f604:	401a      	ands	r2, r3
    f606:	2300      	movs	r3, #0
    f608:	4694      	mov	ip, r2
    f60a:	4698      	mov	r8, r3
    f60c:	2200      	movs	r2, #0
    f60e:	e6c5      	b.n	f39c <__aeabi_ddiv+0x19c>
    f610:	2280      	movs	r2, #128	; 0x80
    f612:	464b      	mov	r3, r9
    f614:	0312      	lsls	r2, r2, #12
    f616:	4213      	tst	r3, r2
    f618:	d00a      	beq.n	f630 <__aeabi_ddiv+0x430>
    f61a:	465b      	mov	r3, fp
    f61c:	4213      	tst	r3, r2
    f61e:	d106      	bne.n	f62e <__aeabi_ddiv+0x42e>
    f620:	431a      	orrs	r2, r3
    f622:	0312      	lsls	r2, r2, #12
    f624:	0b12      	lsrs	r2, r2, #12
    f626:	46ac      	mov	ip, r5
    f628:	4688      	mov	r8, r1
    f62a:	4c8e      	ldr	r4, [pc, #568]	; (f864 <__aeabi_ddiv+0x664>)
    f62c:	e6b6      	b.n	f39c <__aeabi_ddiv+0x19c>
    f62e:	464b      	mov	r3, r9
    f630:	431a      	orrs	r2, r3
    f632:	0312      	lsls	r2, r2, #12
    f634:	0b12      	lsrs	r2, r2, #12
    f636:	46bc      	mov	ip, r7
    f638:	4c8a      	ldr	r4, [pc, #552]	; (f864 <__aeabi_ddiv+0x664>)
    f63a:	e6af      	b.n	f39c <__aeabi_ddiv+0x19c>
    f63c:	0003      	movs	r3, r0
    f63e:	465a      	mov	r2, fp
    f640:	3b28      	subs	r3, #40	; 0x28
    f642:	409a      	lsls	r2, r3
    f644:	2300      	movs	r3, #0
    f646:	4691      	mov	r9, r2
    f648:	4698      	mov	r8, r3
    f64a:	e657      	b.n	f2fc <__aeabi_ddiv+0xfc>
    f64c:	4658      	mov	r0, fp
    f64e:	f001 f82d 	bl	106ac <__clzsi2>
    f652:	3020      	adds	r0, #32
    f654:	e640      	b.n	f2d8 <__aeabi_ddiv+0xd8>
    f656:	0003      	movs	r3, r0
    f658:	4652      	mov	r2, sl
    f65a:	3b28      	subs	r3, #40	; 0x28
    f65c:	409a      	lsls	r2, r3
    f65e:	2100      	movs	r1, #0
    f660:	4693      	mov	fp, r2
    f662:	e677      	b.n	f354 <__aeabi_ddiv+0x154>
    f664:	f001 f822 	bl	106ac <__clzsi2>
    f668:	3020      	adds	r0, #32
    f66a:	e65f      	b.n	f32c <__aeabi_ddiv+0x12c>
    f66c:	4588      	cmp	r8, r1
    f66e:	d200      	bcs.n	f672 <__aeabi_ddiv+0x472>
    f670:	e6c7      	b.n	f402 <__aeabi_ddiv+0x202>
    f672:	464b      	mov	r3, r9
    f674:	07de      	lsls	r6, r3, #31
    f676:	085d      	lsrs	r5, r3, #1
    f678:	4643      	mov	r3, r8
    f67a:	085b      	lsrs	r3, r3, #1
    f67c:	431e      	orrs	r6, r3
    f67e:	4643      	mov	r3, r8
    f680:	07db      	lsls	r3, r3, #31
    f682:	469a      	mov	sl, r3
    f684:	e6c2      	b.n	f40c <__aeabi_ddiv+0x20c>
    f686:	2500      	movs	r5, #0
    f688:	4592      	cmp	sl, r2
    f68a:	d300      	bcc.n	f68e <__aeabi_ddiv+0x48e>
    f68c:	e733      	b.n	f4f6 <__aeabi_ddiv+0x2f6>
    f68e:	9e03      	ldr	r6, [sp, #12]
    f690:	4659      	mov	r1, fp
    f692:	46b4      	mov	ip, r6
    f694:	44e2      	add	sl, ip
    f696:	45b2      	cmp	sl, r6
    f698:	41ad      	sbcs	r5, r5
    f69a:	426d      	negs	r5, r5
    f69c:	4445      	add	r5, r8
    f69e:	18eb      	adds	r3, r5, r3
    f6a0:	3901      	subs	r1, #1
    f6a2:	4598      	cmp	r8, r3
    f6a4:	d207      	bcs.n	f6b6 <__aeabi_ddiv+0x4b6>
    f6a6:	4298      	cmp	r0, r3
    f6a8:	d900      	bls.n	f6ac <__aeabi_ddiv+0x4ac>
    f6aa:	e07f      	b.n	f7ac <__aeabi_ddiv+0x5ac>
    f6ac:	d100      	bne.n	f6b0 <__aeabi_ddiv+0x4b0>
    f6ae:	e0bc      	b.n	f82a <__aeabi_ddiv+0x62a>
    f6b0:	1a1d      	subs	r5, r3, r0
    f6b2:	468b      	mov	fp, r1
    f6b4:	e71f      	b.n	f4f6 <__aeabi_ddiv+0x2f6>
    f6b6:	4598      	cmp	r8, r3
    f6b8:	d1fa      	bne.n	f6b0 <__aeabi_ddiv+0x4b0>
    f6ba:	9d03      	ldr	r5, [sp, #12]
    f6bc:	4555      	cmp	r5, sl
    f6be:	d9f2      	bls.n	f6a6 <__aeabi_ddiv+0x4a6>
    f6c0:	4643      	mov	r3, r8
    f6c2:	468b      	mov	fp, r1
    f6c4:	1a1d      	subs	r5, r3, r0
    f6c6:	e716      	b.n	f4f6 <__aeabi_ddiv+0x2f6>
    f6c8:	469b      	mov	fp, r3
    f6ca:	e6ca      	b.n	f462 <__aeabi_ddiv+0x262>
    f6cc:	0015      	movs	r5, r2
    f6ce:	e6e7      	b.n	f4a0 <__aeabi_ddiv+0x2a0>
    f6d0:	465a      	mov	r2, fp
    f6d2:	08c9      	lsrs	r1, r1, #3
    f6d4:	0752      	lsls	r2, r2, #29
    f6d6:	430a      	orrs	r2, r1
    f6d8:	055b      	lsls	r3, r3, #21
    f6da:	4690      	mov	r8, r2
    f6dc:	0d5c      	lsrs	r4, r3, #21
    f6de:	465a      	mov	r2, fp
    f6e0:	2301      	movs	r3, #1
    f6e2:	9902      	ldr	r1, [sp, #8]
    f6e4:	0252      	lsls	r2, r2, #9
    f6e6:	4019      	ands	r1, r3
    f6e8:	0b12      	lsrs	r2, r2, #12
    f6ea:	468c      	mov	ip, r1
    f6ec:	e656      	b.n	f39c <__aeabi_ddiv+0x19c>
    f6ee:	2b00      	cmp	r3, #0
    f6f0:	d100      	bne.n	f6f4 <__aeabi_ddiv+0x4f4>
    f6f2:	e76f      	b.n	f5d4 <__aeabi_ddiv+0x3d4>
    f6f4:	4446      	add	r6, r8
    f6f6:	1e4a      	subs	r2, r1, #1
    f6f8:	45b0      	cmp	r8, r6
    f6fa:	d929      	bls.n	f750 <__aeabi_ddiv+0x550>
    f6fc:	0011      	movs	r1, r2
    f6fe:	4286      	cmp	r6, r0
    f700:	d000      	beq.n	f704 <__aeabi_ddiv+0x504>
    f702:	e765      	b.n	f5d0 <__aeabi_ddiv+0x3d0>
    f704:	9a03      	ldr	r2, [sp, #12]
    f706:	4293      	cmp	r3, r2
    f708:	d000      	beq.n	f70c <__aeabi_ddiv+0x50c>
    f70a:	e761      	b.n	f5d0 <__aeabi_ddiv+0x3d0>
    f70c:	e762      	b.n	f5d4 <__aeabi_ddiv+0x3d4>
    f70e:	2101      	movs	r1, #1
    f710:	4249      	negs	r1, r1
    f712:	2001      	movs	r0, #1
    f714:	1ac2      	subs	r2, r0, r3
    f716:	2a38      	cmp	r2, #56	; 0x38
    f718:	dd21      	ble.n	f75e <__aeabi_ddiv+0x55e>
    f71a:	9b02      	ldr	r3, [sp, #8]
    f71c:	4003      	ands	r3, r0
    f71e:	469c      	mov	ip, r3
    f720:	e638      	b.n	f394 <__aeabi_ddiv+0x194>
    f722:	220f      	movs	r2, #15
    f724:	400a      	ands	r2, r1
    f726:	2a04      	cmp	r2, #4
    f728:	d100      	bne.n	f72c <__aeabi_ddiv+0x52c>
    f72a:	e75b      	b.n	f5e4 <__aeabi_ddiv+0x3e4>
    f72c:	000a      	movs	r2, r1
    f72e:	1d11      	adds	r1, r2, #4
    f730:	4291      	cmp	r1, r2
    f732:	4192      	sbcs	r2, r2
    f734:	4252      	negs	r2, r2
    f736:	4493      	add	fp, r2
    f738:	e754      	b.n	f5e4 <__aeabi_ddiv+0x3e4>
    f73a:	4b47      	ldr	r3, [pc, #284]	; (f858 <__aeabi_ddiv+0x658>)
    f73c:	18e3      	adds	r3, r4, r3
    f73e:	2b00      	cmp	r3, #0
    f740:	dde5      	ble.n	f70e <__aeabi_ddiv+0x50e>
    f742:	2201      	movs	r2, #1
    f744:	4252      	negs	r2, r2
    f746:	e7f2      	b.n	f72e <__aeabi_ddiv+0x52e>
    f748:	001d      	movs	r5, r3
    f74a:	e6fa      	b.n	f542 <__aeabi_ddiv+0x342>
    f74c:	469a      	mov	sl, r3
    f74e:	e71c      	b.n	f58a <__aeabi_ddiv+0x38a>
    f750:	42b0      	cmp	r0, r6
    f752:	d839      	bhi.n	f7c8 <__aeabi_ddiv+0x5c8>
    f754:	d06e      	beq.n	f834 <__aeabi_ddiv+0x634>
    f756:	0011      	movs	r1, r2
    f758:	e73a      	b.n	f5d0 <__aeabi_ddiv+0x3d0>
    f75a:	9302      	str	r3, [sp, #8]
    f75c:	e73a      	b.n	f5d4 <__aeabi_ddiv+0x3d4>
    f75e:	2a1f      	cmp	r2, #31
    f760:	dc3c      	bgt.n	f7dc <__aeabi_ddiv+0x5dc>
    f762:	2320      	movs	r3, #32
    f764:	1a9b      	subs	r3, r3, r2
    f766:	000c      	movs	r4, r1
    f768:	4658      	mov	r0, fp
    f76a:	4099      	lsls	r1, r3
    f76c:	4098      	lsls	r0, r3
    f76e:	1e4b      	subs	r3, r1, #1
    f770:	4199      	sbcs	r1, r3
    f772:	465b      	mov	r3, fp
    f774:	40d4      	lsrs	r4, r2
    f776:	40d3      	lsrs	r3, r2
    f778:	4320      	orrs	r0, r4
    f77a:	4308      	orrs	r0, r1
    f77c:	001a      	movs	r2, r3
    f77e:	0743      	lsls	r3, r0, #29
    f780:	d009      	beq.n	f796 <__aeabi_ddiv+0x596>
    f782:	230f      	movs	r3, #15
    f784:	4003      	ands	r3, r0
    f786:	2b04      	cmp	r3, #4
    f788:	d005      	beq.n	f796 <__aeabi_ddiv+0x596>
    f78a:	0001      	movs	r1, r0
    f78c:	1d08      	adds	r0, r1, #4
    f78e:	4288      	cmp	r0, r1
    f790:	419b      	sbcs	r3, r3
    f792:	425b      	negs	r3, r3
    f794:	18d2      	adds	r2, r2, r3
    f796:	0213      	lsls	r3, r2, #8
    f798:	d53a      	bpl.n	f810 <__aeabi_ddiv+0x610>
    f79a:	2301      	movs	r3, #1
    f79c:	9a02      	ldr	r2, [sp, #8]
    f79e:	2401      	movs	r4, #1
    f7a0:	401a      	ands	r2, r3
    f7a2:	2300      	movs	r3, #0
    f7a4:	4694      	mov	ip, r2
    f7a6:	4698      	mov	r8, r3
    f7a8:	2200      	movs	r2, #0
    f7aa:	e5f7      	b.n	f39c <__aeabi_ddiv+0x19c>
    f7ac:	2102      	movs	r1, #2
    f7ae:	4249      	negs	r1, r1
    f7b0:	468c      	mov	ip, r1
    f7b2:	9d03      	ldr	r5, [sp, #12]
    f7b4:	44e3      	add	fp, ip
    f7b6:	46ac      	mov	ip, r5
    f7b8:	44e2      	add	sl, ip
    f7ba:	45aa      	cmp	sl, r5
    f7bc:	41ad      	sbcs	r5, r5
    f7be:	426d      	negs	r5, r5
    f7c0:	4445      	add	r5, r8
    f7c2:	18ed      	adds	r5, r5, r3
    f7c4:	1a2d      	subs	r5, r5, r0
    f7c6:	e696      	b.n	f4f6 <__aeabi_ddiv+0x2f6>
    f7c8:	1e8a      	subs	r2, r1, #2
    f7ca:	9903      	ldr	r1, [sp, #12]
    f7cc:	004d      	lsls	r5, r1, #1
    f7ce:	428d      	cmp	r5, r1
    f7d0:	4189      	sbcs	r1, r1
    f7d2:	4249      	negs	r1, r1
    f7d4:	4441      	add	r1, r8
    f7d6:	1876      	adds	r6, r6, r1
    f7d8:	9503      	str	r5, [sp, #12]
    f7da:	e78f      	b.n	f6fc <__aeabi_ddiv+0x4fc>
    f7dc:	201f      	movs	r0, #31
    f7de:	4240      	negs	r0, r0
    f7e0:	1ac3      	subs	r3, r0, r3
    f7e2:	4658      	mov	r0, fp
    f7e4:	40d8      	lsrs	r0, r3
    f7e6:	0003      	movs	r3, r0
    f7e8:	2a20      	cmp	r2, #32
    f7ea:	d028      	beq.n	f83e <__aeabi_ddiv+0x63e>
    f7ec:	2040      	movs	r0, #64	; 0x40
    f7ee:	465d      	mov	r5, fp
    f7f0:	1a82      	subs	r2, r0, r2
    f7f2:	4095      	lsls	r5, r2
    f7f4:	4329      	orrs	r1, r5
    f7f6:	1e4a      	subs	r2, r1, #1
    f7f8:	4191      	sbcs	r1, r2
    f7fa:	4319      	orrs	r1, r3
    f7fc:	2307      	movs	r3, #7
    f7fe:	2200      	movs	r2, #0
    f800:	400b      	ands	r3, r1
    f802:	d009      	beq.n	f818 <__aeabi_ddiv+0x618>
    f804:	230f      	movs	r3, #15
    f806:	2200      	movs	r2, #0
    f808:	400b      	ands	r3, r1
    f80a:	0008      	movs	r0, r1
    f80c:	2b04      	cmp	r3, #4
    f80e:	d1bd      	bne.n	f78c <__aeabi_ddiv+0x58c>
    f810:	0001      	movs	r1, r0
    f812:	0753      	lsls	r3, r2, #29
    f814:	0252      	lsls	r2, r2, #9
    f816:	0b12      	lsrs	r2, r2, #12
    f818:	08c9      	lsrs	r1, r1, #3
    f81a:	4319      	orrs	r1, r3
    f81c:	2301      	movs	r3, #1
    f81e:	4688      	mov	r8, r1
    f820:	9902      	ldr	r1, [sp, #8]
    f822:	2400      	movs	r4, #0
    f824:	4019      	ands	r1, r3
    f826:	468c      	mov	ip, r1
    f828:	e5b8      	b.n	f39c <__aeabi_ddiv+0x19c>
    f82a:	4552      	cmp	r2, sl
    f82c:	d8be      	bhi.n	f7ac <__aeabi_ddiv+0x5ac>
    f82e:	468b      	mov	fp, r1
    f830:	2500      	movs	r5, #0
    f832:	e660      	b.n	f4f6 <__aeabi_ddiv+0x2f6>
    f834:	9d03      	ldr	r5, [sp, #12]
    f836:	429d      	cmp	r5, r3
    f838:	d3c6      	bcc.n	f7c8 <__aeabi_ddiv+0x5c8>
    f83a:	0011      	movs	r1, r2
    f83c:	e762      	b.n	f704 <__aeabi_ddiv+0x504>
    f83e:	2500      	movs	r5, #0
    f840:	e7d8      	b.n	f7f4 <__aeabi_ddiv+0x5f4>
    f842:	2280      	movs	r2, #128	; 0x80
    f844:	465b      	mov	r3, fp
    f846:	0312      	lsls	r2, r2, #12
    f848:	431a      	orrs	r2, r3
    f84a:	9b01      	ldr	r3, [sp, #4]
    f84c:	0312      	lsls	r2, r2, #12
    f84e:	0b12      	lsrs	r2, r2, #12
    f850:	469c      	mov	ip, r3
    f852:	4688      	mov	r8, r1
    f854:	4c03      	ldr	r4, [pc, #12]	; (f864 <__aeabi_ddiv+0x664>)
    f856:	e5a1      	b.n	f39c <__aeabi_ddiv+0x19c>
    f858:	000003ff 	.word	0x000003ff
    f85c:	feffffff 	.word	0xfeffffff
    f860:	000007fe 	.word	0x000007fe
    f864:	000007ff 	.word	0x000007ff

0000f868 <__eqdf2>:
    f868:	b5f0      	push	{r4, r5, r6, r7, lr}
    f86a:	464f      	mov	r7, r9
    f86c:	4646      	mov	r6, r8
    f86e:	46d6      	mov	lr, sl
    f870:	005c      	lsls	r4, r3, #1
    f872:	b5c0      	push	{r6, r7, lr}
    f874:	031f      	lsls	r7, r3, #12
    f876:	0fdb      	lsrs	r3, r3, #31
    f878:	469a      	mov	sl, r3
    f87a:	4b17      	ldr	r3, [pc, #92]	; (f8d8 <__eqdf2+0x70>)
    f87c:	030e      	lsls	r6, r1, #12
    f87e:	004d      	lsls	r5, r1, #1
    f880:	4684      	mov	ip, r0
    f882:	4680      	mov	r8, r0
    f884:	0b36      	lsrs	r6, r6, #12
    f886:	0d6d      	lsrs	r5, r5, #21
    f888:	0fc9      	lsrs	r1, r1, #31
    f88a:	4691      	mov	r9, r2
    f88c:	0b3f      	lsrs	r7, r7, #12
    f88e:	0d64      	lsrs	r4, r4, #21
    f890:	2001      	movs	r0, #1
    f892:	429d      	cmp	r5, r3
    f894:	d008      	beq.n	f8a8 <__eqdf2+0x40>
    f896:	429c      	cmp	r4, r3
    f898:	d001      	beq.n	f89e <__eqdf2+0x36>
    f89a:	42a5      	cmp	r5, r4
    f89c:	d00b      	beq.n	f8b6 <__eqdf2+0x4e>
    f89e:	bc1c      	pop	{r2, r3, r4}
    f8a0:	4690      	mov	r8, r2
    f8a2:	4699      	mov	r9, r3
    f8a4:	46a2      	mov	sl, r4
    f8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8a8:	4663      	mov	r3, ip
    f8aa:	4333      	orrs	r3, r6
    f8ac:	d1f7      	bne.n	f89e <__eqdf2+0x36>
    f8ae:	42ac      	cmp	r4, r5
    f8b0:	d1f5      	bne.n	f89e <__eqdf2+0x36>
    f8b2:	433a      	orrs	r2, r7
    f8b4:	d1f3      	bne.n	f89e <__eqdf2+0x36>
    f8b6:	2001      	movs	r0, #1
    f8b8:	42be      	cmp	r6, r7
    f8ba:	d1f0      	bne.n	f89e <__eqdf2+0x36>
    f8bc:	45c8      	cmp	r8, r9
    f8be:	d1ee      	bne.n	f89e <__eqdf2+0x36>
    f8c0:	4551      	cmp	r1, sl
    f8c2:	d007      	beq.n	f8d4 <__eqdf2+0x6c>
    f8c4:	2d00      	cmp	r5, #0
    f8c6:	d1ea      	bne.n	f89e <__eqdf2+0x36>
    f8c8:	4663      	mov	r3, ip
    f8ca:	431e      	orrs	r6, r3
    f8cc:	0030      	movs	r0, r6
    f8ce:	1e46      	subs	r6, r0, #1
    f8d0:	41b0      	sbcs	r0, r6
    f8d2:	e7e4      	b.n	f89e <__eqdf2+0x36>
    f8d4:	2000      	movs	r0, #0
    f8d6:	e7e2      	b.n	f89e <__eqdf2+0x36>
    f8d8:	000007ff 	.word	0x000007ff

0000f8dc <__gedf2>:
    f8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8de:	4645      	mov	r5, r8
    f8e0:	46de      	mov	lr, fp
    f8e2:	4657      	mov	r7, sl
    f8e4:	464e      	mov	r6, r9
    f8e6:	b5e0      	push	{r5, r6, r7, lr}
    f8e8:	031f      	lsls	r7, r3, #12
    f8ea:	0b3d      	lsrs	r5, r7, #12
    f8ec:	4f2c      	ldr	r7, [pc, #176]	; (f9a0 <__gedf2+0xc4>)
    f8ee:	030e      	lsls	r6, r1, #12
    f8f0:	004c      	lsls	r4, r1, #1
    f8f2:	46ab      	mov	fp, r5
    f8f4:	005d      	lsls	r5, r3, #1
    f8f6:	4684      	mov	ip, r0
    f8f8:	0b36      	lsrs	r6, r6, #12
    f8fa:	0d64      	lsrs	r4, r4, #21
    f8fc:	0fc9      	lsrs	r1, r1, #31
    f8fe:	4690      	mov	r8, r2
    f900:	0d6d      	lsrs	r5, r5, #21
    f902:	0fdb      	lsrs	r3, r3, #31
    f904:	42bc      	cmp	r4, r7
    f906:	d02a      	beq.n	f95e <__gedf2+0x82>
    f908:	4f25      	ldr	r7, [pc, #148]	; (f9a0 <__gedf2+0xc4>)
    f90a:	42bd      	cmp	r5, r7
    f90c:	d02d      	beq.n	f96a <__gedf2+0x8e>
    f90e:	2c00      	cmp	r4, #0
    f910:	d10f      	bne.n	f932 <__gedf2+0x56>
    f912:	4330      	orrs	r0, r6
    f914:	0007      	movs	r7, r0
    f916:	4681      	mov	r9, r0
    f918:	4278      	negs	r0, r7
    f91a:	4178      	adcs	r0, r7
    f91c:	b2c0      	uxtb	r0, r0
    f91e:	2d00      	cmp	r5, #0
    f920:	d117      	bne.n	f952 <__gedf2+0x76>
    f922:	465f      	mov	r7, fp
    f924:	433a      	orrs	r2, r7
    f926:	d114      	bne.n	f952 <__gedf2+0x76>
    f928:	464b      	mov	r3, r9
    f92a:	2000      	movs	r0, #0
    f92c:	2b00      	cmp	r3, #0
    f92e:	d00a      	beq.n	f946 <__gedf2+0x6a>
    f930:	e006      	b.n	f940 <__gedf2+0x64>
    f932:	2d00      	cmp	r5, #0
    f934:	d102      	bne.n	f93c <__gedf2+0x60>
    f936:	4658      	mov	r0, fp
    f938:	4302      	orrs	r2, r0
    f93a:	d001      	beq.n	f940 <__gedf2+0x64>
    f93c:	4299      	cmp	r1, r3
    f93e:	d018      	beq.n	f972 <__gedf2+0x96>
    f940:	4248      	negs	r0, r1
    f942:	2101      	movs	r1, #1
    f944:	4308      	orrs	r0, r1
    f946:	bc3c      	pop	{r2, r3, r4, r5}
    f948:	4690      	mov	r8, r2
    f94a:	4699      	mov	r9, r3
    f94c:	46a2      	mov	sl, r4
    f94e:	46ab      	mov	fp, r5
    f950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f952:	2800      	cmp	r0, #0
    f954:	d0f2      	beq.n	f93c <__gedf2+0x60>
    f956:	2001      	movs	r0, #1
    f958:	3b01      	subs	r3, #1
    f95a:	4318      	orrs	r0, r3
    f95c:	e7f3      	b.n	f946 <__gedf2+0x6a>
    f95e:	0037      	movs	r7, r6
    f960:	4307      	orrs	r7, r0
    f962:	d0d1      	beq.n	f908 <__gedf2+0x2c>
    f964:	2002      	movs	r0, #2
    f966:	4240      	negs	r0, r0
    f968:	e7ed      	b.n	f946 <__gedf2+0x6a>
    f96a:	465f      	mov	r7, fp
    f96c:	4317      	orrs	r7, r2
    f96e:	d0ce      	beq.n	f90e <__gedf2+0x32>
    f970:	e7f8      	b.n	f964 <__gedf2+0x88>
    f972:	42ac      	cmp	r4, r5
    f974:	dce4      	bgt.n	f940 <__gedf2+0x64>
    f976:	da03      	bge.n	f980 <__gedf2+0xa4>
    f978:	1e48      	subs	r0, r1, #1
    f97a:	2101      	movs	r1, #1
    f97c:	4308      	orrs	r0, r1
    f97e:	e7e2      	b.n	f946 <__gedf2+0x6a>
    f980:	455e      	cmp	r6, fp
    f982:	d8dd      	bhi.n	f940 <__gedf2+0x64>
    f984:	d006      	beq.n	f994 <__gedf2+0xb8>
    f986:	2000      	movs	r0, #0
    f988:	455e      	cmp	r6, fp
    f98a:	d2dc      	bcs.n	f946 <__gedf2+0x6a>
    f98c:	2301      	movs	r3, #1
    f98e:	1e48      	subs	r0, r1, #1
    f990:	4318      	orrs	r0, r3
    f992:	e7d8      	b.n	f946 <__gedf2+0x6a>
    f994:	45c4      	cmp	ip, r8
    f996:	d8d3      	bhi.n	f940 <__gedf2+0x64>
    f998:	2000      	movs	r0, #0
    f99a:	45c4      	cmp	ip, r8
    f99c:	d3f6      	bcc.n	f98c <__gedf2+0xb0>
    f99e:	e7d2      	b.n	f946 <__gedf2+0x6a>
    f9a0:	000007ff 	.word	0x000007ff

0000f9a4 <__ledf2>:
    f9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9a6:	464e      	mov	r6, r9
    f9a8:	4645      	mov	r5, r8
    f9aa:	46de      	mov	lr, fp
    f9ac:	4657      	mov	r7, sl
    f9ae:	005c      	lsls	r4, r3, #1
    f9b0:	b5e0      	push	{r5, r6, r7, lr}
    f9b2:	031f      	lsls	r7, r3, #12
    f9b4:	0fdb      	lsrs	r3, r3, #31
    f9b6:	4699      	mov	r9, r3
    f9b8:	4b2a      	ldr	r3, [pc, #168]	; (fa64 <__ledf2+0xc0>)
    f9ba:	030e      	lsls	r6, r1, #12
    f9bc:	004d      	lsls	r5, r1, #1
    f9be:	0fc9      	lsrs	r1, r1, #31
    f9c0:	4684      	mov	ip, r0
    f9c2:	0b36      	lsrs	r6, r6, #12
    f9c4:	0d6d      	lsrs	r5, r5, #21
    f9c6:	468b      	mov	fp, r1
    f9c8:	4690      	mov	r8, r2
    f9ca:	0b3f      	lsrs	r7, r7, #12
    f9cc:	0d64      	lsrs	r4, r4, #21
    f9ce:	429d      	cmp	r5, r3
    f9d0:	d020      	beq.n	fa14 <__ledf2+0x70>
    f9d2:	4b24      	ldr	r3, [pc, #144]	; (fa64 <__ledf2+0xc0>)
    f9d4:	429c      	cmp	r4, r3
    f9d6:	d022      	beq.n	fa1e <__ledf2+0x7a>
    f9d8:	2d00      	cmp	r5, #0
    f9da:	d112      	bne.n	fa02 <__ledf2+0x5e>
    f9dc:	4330      	orrs	r0, r6
    f9de:	4243      	negs	r3, r0
    f9e0:	4143      	adcs	r3, r0
    f9e2:	b2db      	uxtb	r3, r3
    f9e4:	2c00      	cmp	r4, #0
    f9e6:	d01f      	beq.n	fa28 <__ledf2+0x84>
    f9e8:	2b00      	cmp	r3, #0
    f9ea:	d00c      	beq.n	fa06 <__ledf2+0x62>
    f9ec:	464b      	mov	r3, r9
    f9ee:	2001      	movs	r0, #1
    f9f0:	3b01      	subs	r3, #1
    f9f2:	4303      	orrs	r3, r0
    f9f4:	0018      	movs	r0, r3
    f9f6:	bc3c      	pop	{r2, r3, r4, r5}
    f9f8:	4690      	mov	r8, r2
    f9fa:	4699      	mov	r9, r3
    f9fc:	46a2      	mov	sl, r4
    f9fe:	46ab      	mov	fp, r5
    fa00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa02:	2c00      	cmp	r4, #0
    fa04:	d016      	beq.n	fa34 <__ledf2+0x90>
    fa06:	45cb      	cmp	fp, r9
    fa08:	d017      	beq.n	fa3a <__ledf2+0x96>
    fa0a:	465b      	mov	r3, fp
    fa0c:	4259      	negs	r1, r3
    fa0e:	2301      	movs	r3, #1
    fa10:	430b      	orrs	r3, r1
    fa12:	e7ef      	b.n	f9f4 <__ledf2+0x50>
    fa14:	0031      	movs	r1, r6
    fa16:	2302      	movs	r3, #2
    fa18:	4301      	orrs	r1, r0
    fa1a:	d1eb      	bne.n	f9f4 <__ledf2+0x50>
    fa1c:	e7d9      	b.n	f9d2 <__ledf2+0x2e>
    fa1e:	0039      	movs	r1, r7
    fa20:	2302      	movs	r3, #2
    fa22:	4311      	orrs	r1, r2
    fa24:	d1e6      	bne.n	f9f4 <__ledf2+0x50>
    fa26:	e7d7      	b.n	f9d8 <__ledf2+0x34>
    fa28:	433a      	orrs	r2, r7
    fa2a:	d1dd      	bne.n	f9e8 <__ledf2+0x44>
    fa2c:	2300      	movs	r3, #0
    fa2e:	2800      	cmp	r0, #0
    fa30:	d0e0      	beq.n	f9f4 <__ledf2+0x50>
    fa32:	e7ea      	b.n	fa0a <__ledf2+0x66>
    fa34:	433a      	orrs	r2, r7
    fa36:	d1e6      	bne.n	fa06 <__ledf2+0x62>
    fa38:	e7e7      	b.n	fa0a <__ledf2+0x66>
    fa3a:	42a5      	cmp	r5, r4
    fa3c:	dce5      	bgt.n	fa0a <__ledf2+0x66>
    fa3e:	db05      	blt.n	fa4c <__ledf2+0xa8>
    fa40:	42be      	cmp	r6, r7
    fa42:	d8e2      	bhi.n	fa0a <__ledf2+0x66>
    fa44:	d007      	beq.n	fa56 <__ledf2+0xb2>
    fa46:	2300      	movs	r3, #0
    fa48:	42be      	cmp	r6, r7
    fa4a:	d2d3      	bcs.n	f9f4 <__ledf2+0x50>
    fa4c:	4659      	mov	r1, fp
    fa4e:	2301      	movs	r3, #1
    fa50:	3901      	subs	r1, #1
    fa52:	430b      	orrs	r3, r1
    fa54:	e7ce      	b.n	f9f4 <__ledf2+0x50>
    fa56:	45c4      	cmp	ip, r8
    fa58:	d8d7      	bhi.n	fa0a <__ledf2+0x66>
    fa5a:	2300      	movs	r3, #0
    fa5c:	45c4      	cmp	ip, r8
    fa5e:	d3f5      	bcc.n	fa4c <__ledf2+0xa8>
    fa60:	e7c8      	b.n	f9f4 <__ledf2+0x50>
    fa62:	46c0      	nop			; (mov r8, r8)
    fa64:	000007ff 	.word	0x000007ff

0000fa68 <__aeabi_dmul>:
    fa68:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa6a:	4657      	mov	r7, sl
    fa6c:	4645      	mov	r5, r8
    fa6e:	46de      	mov	lr, fp
    fa70:	464e      	mov	r6, r9
    fa72:	b5e0      	push	{r5, r6, r7, lr}
    fa74:	030c      	lsls	r4, r1, #12
    fa76:	4698      	mov	r8, r3
    fa78:	004e      	lsls	r6, r1, #1
    fa7a:	0b23      	lsrs	r3, r4, #12
    fa7c:	b087      	sub	sp, #28
    fa7e:	0007      	movs	r7, r0
    fa80:	4692      	mov	sl, r2
    fa82:	469b      	mov	fp, r3
    fa84:	0d76      	lsrs	r6, r6, #21
    fa86:	0fcd      	lsrs	r5, r1, #31
    fa88:	2e00      	cmp	r6, #0
    fa8a:	d06b      	beq.n	fb64 <__aeabi_dmul+0xfc>
    fa8c:	4b6d      	ldr	r3, [pc, #436]	; (fc44 <__aeabi_dmul+0x1dc>)
    fa8e:	429e      	cmp	r6, r3
    fa90:	d035      	beq.n	fafe <__aeabi_dmul+0x96>
    fa92:	2480      	movs	r4, #128	; 0x80
    fa94:	465b      	mov	r3, fp
    fa96:	0f42      	lsrs	r2, r0, #29
    fa98:	0424      	lsls	r4, r4, #16
    fa9a:	00db      	lsls	r3, r3, #3
    fa9c:	4314      	orrs	r4, r2
    fa9e:	431c      	orrs	r4, r3
    faa0:	00c3      	lsls	r3, r0, #3
    faa2:	4699      	mov	r9, r3
    faa4:	4b68      	ldr	r3, [pc, #416]	; (fc48 <__aeabi_dmul+0x1e0>)
    faa6:	46a3      	mov	fp, r4
    faa8:	469c      	mov	ip, r3
    faaa:	2300      	movs	r3, #0
    faac:	2700      	movs	r7, #0
    faae:	4466      	add	r6, ip
    fab0:	9302      	str	r3, [sp, #8]
    fab2:	4643      	mov	r3, r8
    fab4:	031c      	lsls	r4, r3, #12
    fab6:	005a      	lsls	r2, r3, #1
    fab8:	0fdb      	lsrs	r3, r3, #31
    faba:	4650      	mov	r0, sl
    fabc:	0b24      	lsrs	r4, r4, #12
    fabe:	0d52      	lsrs	r2, r2, #21
    fac0:	4698      	mov	r8, r3
    fac2:	d100      	bne.n	fac6 <__aeabi_dmul+0x5e>
    fac4:	e076      	b.n	fbb4 <__aeabi_dmul+0x14c>
    fac6:	4b5f      	ldr	r3, [pc, #380]	; (fc44 <__aeabi_dmul+0x1dc>)
    fac8:	429a      	cmp	r2, r3
    faca:	d06d      	beq.n	fba8 <__aeabi_dmul+0x140>
    facc:	2380      	movs	r3, #128	; 0x80
    face:	0f41      	lsrs	r1, r0, #29
    fad0:	041b      	lsls	r3, r3, #16
    fad2:	430b      	orrs	r3, r1
    fad4:	495c      	ldr	r1, [pc, #368]	; (fc48 <__aeabi_dmul+0x1e0>)
    fad6:	00e4      	lsls	r4, r4, #3
    fad8:	468c      	mov	ip, r1
    fada:	431c      	orrs	r4, r3
    fadc:	00c3      	lsls	r3, r0, #3
    fade:	2000      	movs	r0, #0
    fae0:	4462      	add	r2, ip
    fae2:	4641      	mov	r1, r8
    fae4:	18b6      	adds	r6, r6, r2
    fae6:	4069      	eors	r1, r5
    fae8:	1c72      	adds	r2, r6, #1
    faea:	9101      	str	r1, [sp, #4]
    faec:	4694      	mov	ip, r2
    faee:	4307      	orrs	r7, r0
    faf0:	2f0f      	cmp	r7, #15
    faf2:	d900      	bls.n	faf6 <__aeabi_dmul+0x8e>
    faf4:	e0b0      	b.n	fc58 <__aeabi_dmul+0x1f0>
    faf6:	4a55      	ldr	r2, [pc, #340]	; (fc4c <__aeabi_dmul+0x1e4>)
    faf8:	00bf      	lsls	r7, r7, #2
    fafa:	59d2      	ldr	r2, [r2, r7]
    fafc:	4697      	mov	pc, r2
    fafe:	465b      	mov	r3, fp
    fb00:	4303      	orrs	r3, r0
    fb02:	4699      	mov	r9, r3
    fb04:	d000      	beq.n	fb08 <__aeabi_dmul+0xa0>
    fb06:	e087      	b.n	fc18 <__aeabi_dmul+0x1b0>
    fb08:	2300      	movs	r3, #0
    fb0a:	469b      	mov	fp, r3
    fb0c:	3302      	adds	r3, #2
    fb0e:	2708      	movs	r7, #8
    fb10:	9302      	str	r3, [sp, #8]
    fb12:	e7ce      	b.n	fab2 <__aeabi_dmul+0x4a>
    fb14:	4642      	mov	r2, r8
    fb16:	9201      	str	r2, [sp, #4]
    fb18:	2802      	cmp	r0, #2
    fb1a:	d067      	beq.n	fbec <__aeabi_dmul+0x184>
    fb1c:	2803      	cmp	r0, #3
    fb1e:	d100      	bne.n	fb22 <__aeabi_dmul+0xba>
    fb20:	e20e      	b.n	ff40 <__aeabi_dmul+0x4d8>
    fb22:	2801      	cmp	r0, #1
    fb24:	d000      	beq.n	fb28 <__aeabi_dmul+0xc0>
    fb26:	e162      	b.n	fdee <__aeabi_dmul+0x386>
    fb28:	2300      	movs	r3, #0
    fb2a:	2400      	movs	r4, #0
    fb2c:	2200      	movs	r2, #0
    fb2e:	4699      	mov	r9, r3
    fb30:	9901      	ldr	r1, [sp, #4]
    fb32:	4001      	ands	r1, r0
    fb34:	b2cd      	uxtb	r5, r1
    fb36:	2100      	movs	r1, #0
    fb38:	0312      	lsls	r2, r2, #12
    fb3a:	0d0b      	lsrs	r3, r1, #20
    fb3c:	0b12      	lsrs	r2, r2, #12
    fb3e:	051b      	lsls	r3, r3, #20
    fb40:	4313      	orrs	r3, r2
    fb42:	4a43      	ldr	r2, [pc, #268]	; (fc50 <__aeabi_dmul+0x1e8>)
    fb44:	0524      	lsls	r4, r4, #20
    fb46:	4013      	ands	r3, r2
    fb48:	431c      	orrs	r4, r3
    fb4a:	0064      	lsls	r4, r4, #1
    fb4c:	07ed      	lsls	r5, r5, #31
    fb4e:	0864      	lsrs	r4, r4, #1
    fb50:	432c      	orrs	r4, r5
    fb52:	4648      	mov	r0, r9
    fb54:	0021      	movs	r1, r4
    fb56:	b007      	add	sp, #28
    fb58:	bc3c      	pop	{r2, r3, r4, r5}
    fb5a:	4690      	mov	r8, r2
    fb5c:	4699      	mov	r9, r3
    fb5e:	46a2      	mov	sl, r4
    fb60:	46ab      	mov	fp, r5
    fb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb64:	4303      	orrs	r3, r0
    fb66:	4699      	mov	r9, r3
    fb68:	d04f      	beq.n	fc0a <__aeabi_dmul+0x1a2>
    fb6a:	465b      	mov	r3, fp
    fb6c:	2b00      	cmp	r3, #0
    fb6e:	d100      	bne.n	fb72 <__aeabi_dmul+0x10a>
    fb70:	e189      	b.n	fe86 <__aeabi_dmul+0x41e>
    fb72:	4658      	mov	r0, fp
    fb74:	f000 fd9a 	bl	106ac <__clzsi2>
    fb78:	0003      	movs	r3, r0
    fb7a:	3b0b      	subs	r3, #11
    fb7c:	2b1c      	cmp	r3, #28
    fb7e:	dd00      	ble.n	fb82 <__aeabi_dmul+0x11a>
    fb80:	e17a      	b.n	fe78 <__aeabi_dmul+0x410>
    fb82:	221d      	movs	r2, #29
    fb84:	1ad3      	subs	r3, r2, r3
    fb86:	003a      	movs	r2, r7
    fb88:	0001      	movs	r1, r0
    fb8a:	465c      	mov	r4, fp
    fb8c:	40da      	lsrs	r2, r3
    fb8e:	3908      	subs	r1, #8
    fb90:	408c      	lsls	r4, r1
    fb92:	0013      	movs	r3, r2
    fb94:	408f      	lsls	r7, r1
    fb96:	4323      	orrs	r3, r4
    fb98:	469b      	mov	fp, r3
    fb9a:	46b9      	mov	r9, r7
    fb9c:	2300      	movs	r3, #0
    fb9e:	4e2d      	ldr	r6, [pc, #180]	; (fc54 <__aeabi_dmul+0x1ec>)
    fba0:	2700      	movs	r7, #0
    fba2:	1a36      	subs	r6, r6, r0
    fba4:	9302      	str	r3, [sp, #8]
    fba6:	e784      	b.n	fab2 <__aeabi_dmul+0x4a>
    fba8:	4653      	mov	r3, sl
    fbaa:	4323      	orrs	r3, r4
    fbac:	d12a      	bne.n	fc04 <__aeabi_dmul+0x19c>
    fbae:	2400      	movs	r4, #0
    fbb0:	2002      	movs	r0, #2
    fbb2:	e796      	b.n	fae2 <__aeabi_dmul+0x7a>
    fbb4:	4653      	mov	r3, sl
    fbb6:	4323      	orrs	r3, r4
    fbb8:	d020      	beq.n	fbfc <__aeabi_dmul+0x194>
    fbba:	2c00      	cmp	r4, #0
    fbbc:	d100      	bne.n	fbc0 <__aeabi_dmul+0x158>
    fbbe:	e157      	b.n	fe70 <__aeabi_dmul+0x408>
    fbc0:	0020      	movs	r0, r4
    fbc2:	f000 fd73 	bl	106ac <__clzsi2>
    fbc6:	0003      	movs	r3, r0
    fbc8:	3b0b      	subs	r3, #11
    fbca:	2b1c      	cmp	r3, #28
    fbcc:	dd00      	ble.n	fbd0 <__aeabi_dmul+0x168>
    fbce:	e149      	b.n	fe64 <__aeabi_dmul+0x3fc>
    fbd0:	211d      	movs	r1, #29
    fbd2:	1acb      	subs	r3, r1, r3
    fbd4:	4651      	mov	r1, sl
    fbd6:	0002      	movs	r2, r0
    fbd8:	40d9      	lsrs	r1, r3
    fbda:	4653      	mov	r3, sl
    fbdc:	3a08      	subs	r2, #8
    fbde:	4094      	lsls	r4, r2
    fbe0:	4093      	lsls	r3, r2
    fbe2:	430c      	orrs	r4, r1
    fbe4:	4a1b      	ldr	r2, [pc, #108]	; (fc54 <__aeabi_dmul+0x1ec>)
    fbe6:	1a12      	subs	r2, r2, r0
    fbe8:	2000      	movs	r0, #0
    fbea:	e77a      	b.n	fae2 <__aeabi_dmul+0x7a>
    fbec:	2501      	movs	r5, #1
    fbee:	9b01      	ldr	r3, [sp, #4]
    fbf0:	4c14      	ldr	r4, [pc, #80]	; (fc44 <__aeabi_dmul+0x1dc>)
    fbf2:	401d      	ands	r5, r3
    fbf4:	2300      	movs	r3, #0
    fbf6:	2200      	movs	r2, #0
    fbf8:	4699      	mov	r9, r3
    fbfa:	e79c      	b.n	fb36 <__aeabi_dmul+0xce>
    fbfc:	2400      	movs	r4, #0
    fbfe:	2200      	movs	r2, #0
    fc00:	2001      	movs	r0, #1
    fc02:	e76e      	b.n	fae2 <__aeabi_dmul+0x7a>
    fc04:	4653      	mov	r3, sl
    fc06:	2003      	movs	r0, #3
    fc08:	e76b      	b.n	fae2 <__aeabi_dmul+0x7a>
    fc0a:	2300      	movs	r3, #0
    fc0c:	469b      	mov	fp, r3
    fc0e:	3301      	adds	r3, #1
    fc10:	2704      	movs	r7, #4
    fc12:	2600      	movs	r6, #0
    fc14:	9302      	str	r3, [sp, #8]
    fc16:	e74c      	b.n	fab2 <__aeabi_dmul+0x4a>
    fc18:	2303      	movs	r3, #3
    fc1a:	4681      	mov	r9, r0
    fc1c:	270c      	movs	r7, #12
    fc1e:	9302      	str	r3, [sp, #8]
    fc20:	e747      	b.n	fab2 <__aeabi_dmul+0x4a>
    fc22:	2280      	movs	r2, #128	; 0x80
    fc24:	2300      	movs	r3, #0
    fc26:	2500      	movs	r5, #0
    fc28:	0312      	lsls	r2, r2, #12
    fc2a:	4699      	mov	r9, r3
    fc2c:	4c05      	ldr	r4, [pc, #20]	; (fc44 <__aeabi_dmul+0x1dc>)
    fc2e:	e782      	b.n	fb36 <__aeabi_dmul+0xce>
    fc30:	465c      	mov	r4, fp
    fc32:	464b      	mov	r3, r9
    fc34:	9802      	ldr	r0, [sp, #8]
    fc36:	e76f      	b.n	fb18 <__aeabi_dmul+0xb0>
    fc38:	465c      	mov	r4, fp
    fc3a:	464b      	mov	r3, r9
    fc3c:	9501      	str	r5, [sp, #4]
    fc3e:	9802      	ldr	r0, [sp, #8]
    fc40:	e76a      	b.n	fb18 <__aeabi_dmul+0xb0>
    fc42:	46c0      	nop			; (mov r8, r8)
    fc44:	000007ff 	.word	0x000007ff
    fc48:	fffffc01 	.word	0xfffffc01
    fc4c:	000140e4 	.word	0x000140e4
    fc50:	800fffff 	.word	0x800fffff
    fc54:	fffffc0d 	.word	0xfffffc0d
    fc58:	464a      	mov	r2, r9
    fc5a:	4649      	mov	r1, r9
    fc5c:	0c17      	lsrs	r7, r2, #16
    fc5e:	0c1a      	lsrs	r2, r3, #16
    fc60:	041b      	lsls	r3, r3, #16
    fc62:	0c1b      	lsrs	r3, r3, #16
    fc64:	0408      	lsls	r0, r1, #16
    fc66:	0019      	movs	r1, r3
    fc68:	0c00      	lsrs	r0, r0, #16
    fc6a:	4341      	muls	r1, r0
    fc6c:	0015      	movs	r5, r2
    fc6e:	4688      	mov	r8, r1
    fc70:	0019      	movs	r1, r3
    fc72:	437d      	muls	r5, r7
    fc74:	4379      	muls	r1, r7
    fc76:	9503      	str	r5, [sp, #12]
    fc78:	4689      	mov	r9, r1
    fc7a:	0029      	movs	r1, r5
    fc7c:	0015      	movs	r5, r2
    fc7e:	4345      	muls	r5, r0
    fc80:	444d      	add	r5, r9
    fc82:	9502      	str	r5, [sp, #8]
    fc84:	4645      	mov	r5, r8
    fc86:	0c2d      	lsrs	r5, r5, #16
    fc88:	46aa      	mov	sl, r5
    fc8a:	9d02      	ldr	r5, [sp, #8]
    fc8c:	4455      	add	r5, sl
    fc8e:	45a9      	cmp	r9, r5
    fc90:	d906      	bls.n	fca0 <__aeabi_dmul+0x238>
    fc92:	468a      	mov	sl, r1
    fc94:	2180      	movs	r1, #128	; 0x80
    fc96:	0249      	lsls	r1, r1, #9
    fc98:	4689      	mov	r9, r1
    fc9a:	44ca      	add	sl, r9
    fc9c:	4651      	mov	r1, sl
    fc9e:	9103      	str	r1, [sp, #12]
    fca0:	0c29      	lsrs	r1, r5, #16
    fca2:	9104      	str	r1, [sp, #16]
    fca4:	4641      	mov	r1, r8
    fca6:	0409      	lsls	r1, r1, #16
    fca8:	042d      	lsls	r5, r5, #16
    fcaa:	0c09      	lsrs	r1, r1, #16
    fcac:	4688      	mov	r8, r1
    fcae:	0029      	movs	r1, r5
    fcb0:	0c25      	lsrs	r5, r4, #16
    fcb2:	0424      	lsls	r4, r4, #16
    fcb4:	4441      	add	r1, r8
    fcb6:	0c24      	lsrs	r4, r4, #16
    fcb8:	9105      	str	r1, [sp, #20]
    fcba:	0021      	movs	r1, r4
    fcbc:	4341      	muls	r1, r0
    fcbe:	4688      	mov	r8, r1
    fcc0:	0021      	movs	r1, r4
    fcc2:	4379      	muls	r1, r7
    fcc4:	468a      	mov	sl, r1
    fcc6:	4368      	muls	r0, r5
    fcc8:	4641      	mov	r1, r8
    fcca:	4450      	add	r0, sl
    fccc:	4681      	mov	r9, r0
    fcce:	0c08      	lsrs	r0, r1, #16
    fcd0:	4448      	add	r0, r9
    fcd2:	436f      	muls	r7, r5
    fcd4:	4582      	cmp	sl, r0
    fcd6:	d903      	bls.n	fce0 <__aeabi_dmul+0x278>
    fcd8:	2180      	movs	r1, #128	; 0x80
    fcda:	0249      	lsls	r1, r1, #9
    fcdc:	4689      	mov	r9, r1
    fcde:	444f      	add	r7, r9
    fce0:	0c01      	lsrs	r1, r0, #16
    fce2:	4689      	mov	r9, r1
    fce4:	0039      	movs	r1, r7
    fce6:	4449      	add	r1, r9
    fce8:	9102      	str	r1, [sp, #8]
    fcea:	4641      	mov	r1, r8
    fcec:	040f      	lsls	r7, r1, #16
    fcee:	9904      	ldr	r1, [sp, #16]
    fcf0:	0c3f      	lsrs	r7, r7, #16
    fcf2:	4688      	mov	r8, r1
    fcf4:	0400      	lsls	r0, r0, #16
    fcf6:	19c0      	adds	r0, r0, r7
    fcf8:	4480      	add	r8, r0
    fcfa:	4641      	mov	r1, r8
    fcfc:	9104      	str	r1, [sp, #16]
    fcfe:	4659      	mov	r1, fp
    fd00:	0c0f      	lsrs	r7, r1, #16
    fd02:	0409      	lsls	r1, r1, #16
    fd04:	0c09      	lsrs	r1, r1, #16
    fd06:	4688      	mov	r8, r1
    fd08:	4359      	muls	r1, r3
    fd0a:	468a      	mov	sl, r1
    fd0c:	0039      	movs	r1, r7
    fd0e:	4351      	muls	r1, r2
    fd10:	4689      	mov	r9, r1
    fd12:	4641      	mov	r1, r8
    fd14:	434a      	muls	r2, r1
    fd16:	4651      	mov	r1, sl
    fd18:	0c09      	lsrs	r1, r1, #16
    fd1a:	468b      	mov	fp, r1
    fd1c:	437b      	muls	r3, r7
    fd1e:	18d2      	adds	r2, r2, r3
    fd20:	445a      	add	r2, fp
    fd22:	4293      	cmp	r3, r2
    fd24:	d903      	bls.n	fd2e <__aeabi_dmul+0x2c6>
    fd26:	2380      	movs	r3, #128	; 0x80
    fd28:	025b      	lsls	r3, r3, #9
    fd2a:	469b      	mov	fp, r3
    fd2c:	44d9      	add	r9, fp
    fd2e:	4651      	mov	r1, sl
    fd30:	0409      	lsls	r1, r1, #16
    fd32:	0c09      	lsrs	r1, r1, #16
    fd34:	468a      	mov	sl, r1
    fd36:	4641      	mov	r1, r8
    fd38:	4361      	muls	r1, r4
    fd3a:	437c      	muls	r4, r7
    fd3c:	0c13      	lsrs	r3, r2, #16
    fd3e:	0412      	lsls	r2, r2, #16
    fd40:	444b      	add	r3, r9
    fd42:	4452      	add	r2, sl
    fd44:	46a1      	mov	r9, r4
    fd46:	468a      	mov	sl, r1
    fd48:	003c      	movs	r4, r7
    fd4a:	4641      	mov	r1, r8
    fd4c:	436c      	muls	r4, r5
    fd4e:	434d      	muls	r5, r1
    fd50:	4651      	mov	r1, sl
    fd52:	444d      	add	r5, r9
    fd54:	0c0f      	lsrs	r7, r1, #16
    fd56:	197d      	adds	r5, r7, r5
    fd58:	45a9      	cmp	r9, r5
    fd5a:	d903      	bls.n	fd64 <__aeabi_dmul+0x2fc>
    fd5c:	2180      	movs	r1, #128	; 0x80
    fd5e:	0249      	lsls	r1, r1, #9
    fd60:	4688      	mov	r8, r1
    fd62:	4444      	add	r4, r8
    fd64:	9f04      	ldr	r7, [sp, #16]
    fd66:	9903      	ldr	r1, [sp, #12]
    fd68:	46b8      	mov	r8, r7
    fd6a:	4441      	add	r1, r8
    fd6c:	468b      	mov	fp, r1
    fd6e:	4583      	cmp	fp, r0
    fd70:	4180      	sbcs	r0, r0
    fd72:	4241      	negs	r1, r0
    fd74:	4688      	mov	r8, r1
    fd76:	4651      	mov	r1, sl
    fd78:	0408      	lsls	r0, r1, #16
    fd7a:	042f      	lsls	r7, r5, #16
    fd7c:	0c00      	lsrs	r0, r0, #16
    fd7e:	183f      	adds	r7, r7, r0
    fd80:	4658      	mov	r0, fp
    fd82:	9902      	ldr	r1, [sp, #8]
    fd84:	1810      	adds	r0, r2, r0
    fd86:	4689      	mov	r9, r1
    fd88:	4290      	cmp	r0, r2
    fd8a:	4192      	sbcs	r2, r2
    fd8c:	444f      	add	r7, r9
    fd8e:	46ba      	mov	sl, r7
    fd90:	4252      	negs	r2, r2
    fd92:	4699      	mov	r9, r3
    fd94:	4693      	mov	fp, r2
    fd96:	44c2      	add	sl, r8
    fd98:	44d1      	add	r9, sl
    fd9a:	44cb      	add	fp, r9
    fd9c:	428f      	cmp	r7, r1
    fd9e:	41bf      	sbcs	r7, r7
    fda0:	45c2      	cmp	sl, r8
    fda2:	4189      	sbcs	r1, r1
    fda4:	4599      	cmp	r9, r3
    fda6:	419b      	sbcs	r3, r3
    fda8:	4593      	cmp	fp, r2
    fdaa:	4192      	sbcs	r2, r2
    fdac:	427f      	negs	r7, r7
    fdae:	4249      	negs	r1, r1
    fdb0:	0c2d      	lsrs	r5, r5, #16
    fdb2:	4252      	negs	r2, r2
    fdb4:	430f      	orrs	r7, r1
    fdb6:	425b      	negs	r3, r3
    fdb8:	4313      	orrs	r3, r2
    fdba:	197f      	adds	r7, r7, r5
    fdbc:	18ff      	adds	r7, r7, r3
    fdbe:	465b      	mov	r3, fp
    fdc0:	193c      	adds	r4, r7, r4
    fdc2:	0ddb      	lsrs	r3, r3, #23
    fdc4:	9a05      	ldr	r2, [sp, #20]
    fdc6:	0264      	lsls	r4, r4, #9
    fdc8:	431c      	orrs	r4, r3
    fdca:	0243      	lsls	r3, r0, #9
    fdcc:	4313      	orrs	r3, r2
    fdce:	1e5d      	subs	r5, r3, #1
    fdd0:	41ab      	sbcs	r3, r5
    fdd2:	465a      	mov	r2, fp
    fdd4:	0dc0      	lsrs	r0, r0, #23
    fdd6:	4303      	orrs	r3, r0
    fdd8:	0252      	lsls	r2, r2, #9
    fdda:	4313      	orrs	r3, r2
    fddc:	01e2      	lsls	r2, r4, #7
    fdde:	d556      	bpl.n	fe8e <__aeabi_dmul+0x426>
    fde0:	2001      	movs	r0, #1
    fde2:	085a      	lsrs	r2, r3, #1
    fde4:	4003      	ands	r3, r0
    fde6:	4313      	orrs	r3, r2
    fde8:	07e2      	lsls	r2, r4, #31
    fdea:	4313      	orrs	r3, r2
    fdec:	0864      	lsrs	r4, r4, #1
    fdee:	485a      	ldr	r0, [pc, #360]	; (ff58 <__aeabi_dmul+0x4f0>)
    fdf0:	4460      	add	r0, ip
    fdf2:	2800      	cmp	r0, #0
    fdf4:	dd4d      	ble.n	fe92 <__aeabi_dmul+0x42a>
    fdf6:	075a      	lsls	r2, r3, #29
    fdf8:	d009      	beq.n	fe0e <__aeabi_dmul+0x3a6>
    fdfa:	220f      	movs	r2, #15
    fdfc:	401a      	ands	r2, r3
    fdfe:	2a04      	cmp	r2, #4
    fe00:	d005      	beq.n	fe0e <__aeabi_dmul+0x3a6>
    fe02:	1d1a      	adds	r2, r3, #4
    fe04:	429a      	cmp	r2, r3
    fe06:	419b      	sbcs	r3, r3
    fe08:	425b      	negs	r3, r3
    fe0a:	18e4      	adds	r4, r4, r3
    fe0c:	0013      	movs	r3, r2
    fe0e:	01e2      	lsls	r2, r4, #7
    fe10:	d504      	bpl.n	fe1c <__aeabi_dmul+0x3b4>
    fe12:	2080      	movs	r0, #128	; 0x80
    fe14:	4a51      	ldr	r2, [pc, #324]	; (ff5c <__aeabi_dmul+0x4f4>)
    fe16:	00c0      	lsls	r0, r0, #3
    fe18:	4014      	ands	r4, r2
    fe1a:	4460      	add	r0, ip
    fe1c:	4a50      	ldr	r2, [pc, #320]	; (ff60 <__aeabi_dmul+0x4f8>)
    fe1e:	4290      	cmp	r0, r2
    fe20:	dd00      	ble.n	fe24 <__aeabi_dmul+0x3bc>
    fe22:	e6e3      	b.n	fbec <__aeabi_dmul+0x184>
    fe24:	2501      	movs	r5, #1
    fe26:	08db      	lsrs	r3, r3, #3
    fe28:	0762      	lsls	r2, r4, #29
    fe2a:	431a      	orrs	r2, r3
    fe2c:	0264      	lsls	r4, r4, #9
    fe2e:	9b01      	ldr	r3, [sp, #4]
    fe30:	4691      	mov	r9, r2
    fe32:	0b22      	lsrs	r2, r4, #12
    fe34:	0544      	lsls	r4, r0, #21
    fe36:	0d64      	lsrs	r4, r4, #21
    fe38:	401d      	ands	r5, r3
    fe3a:	e67c      	b.n	fb36 <__aeabi_dmul+0xce>
    fe3c:	2280      	movs	r2, #128	; 0x80
    fe3e:	4659      	mov	r1, fp
    fe40:	0312      	lsls	r2, r2, #12
    fe42:	4211      	tst	r1, r2
    fe44:	d008      	beq.n	fe58 <__aeabi_dmul+0x3f0>
    fe46:	4214      	tst	r4, r2
    fe48:	d106      	bne.n	fe58 <__aeabi_dmul+0x3f0>
    fe4a:	4322      	orrs	r2, r4
    fe4c:	0312      	lsls	r2, r2, #12
    fe4e:	0b12      	lsrs	r2, r2, #12
    fe50:	4645      	mov	r5, r8
    fe52:	4699      	mov	r9, r3
    fe54:	4c43      	ldr	r4, [pc, #268]	; (ff64 <__aeabi_dmul+0x4fc>)
    fe56:	e66e      	b.n	fb36 <__aeabi_dmul+0xce>
    fe58:	465b      	mov	r3, fp
    fe5a:	431a      	orrs	r2, r3
    fe5c:	0312      	lsls	r2, r2, #12
    fe5e:	0b12      	lsrs	r2, r2, #12
    fe60:	4c40      	ldr	r4, [pc, #256]	; (ff64 <__aeabi_dmul+0x4fc>)
    fe62:	e668      	b.n	fb36 <__aeabi_dmul+0xce>
    fe64:	0003      	movs	r3, r0
    fe66:	4654      	mov	r4, sl
    fe68:	3b28      	subs	r3, #40	; 0x28
    fe6a:	409c      	lsls	r4, r3
    fe6c:	2300      	movs	r3, #0
    fe6e:	e6b9      	b.n	fbe4 <__aeabi_dmul+0x17c>
    fe70:	f000 fc1c 	bl	106ac <__clzsi2>
    fe74:	3020      	adds	r0, #32
    fe76:	e6a6      	b.n	fbc6 <__aeabi_dmul+0x15e>
    fe78:	0003      	movs	r3, r0
    fe7a:	3b28      	subs	r3, #40	; 0x28
    fe7c:	409f      	lsls	r7, r3
    fe7e:	2300      	movs	r3, #0
    fe80:	46bb      	mov	fp, r7
    fe82:	4699      	mov	r9, r3
    fe84:	e68a      	b.n	fb9c <__aeabi_dmul+0x134>
    fe86:	f000 fc11 	bl	106ac <__clzsi2>
    fe8a:	3020      	adds	r0, #32
    fe8c:	e674      	b.n	fb78 <__aeabi_dmul+0x110>
    fe8e:	46b4      	mov	ip, r6
    fe90:	e7ad      	b.n	fdee <__aeabi_dmul+0x386>
    fe92:	2501      	movs	r5, #1
    fe94:	1a2a      	subs	r2, r5, r0
    fe96:	2a38      	cmp	r2, #56	; 0x38
    fe98:	dd06      	ble.n	fea8 <__aeabi_dmul+0x440>
    fe9a:	9b01      	ldr	r3, [sp, #4]
    fe9c:	2400      	movs	r4, #0
    fe9e:	401d      	ands	r5, r3
    fea0:	2300      	movs	r3, #0
    fea2:	2200      	movs	r2, #0
    fea4:	4699      	mov	r9, r3
    fea6:	e646      	b.n	fb36 <__aeabi_dmul+0xce>
    fea8:	2a1f      	cmp	r2, #31
    feaa:	dc21      	bgt.n	fef0 <__aeabi_dmul+0x488>
    feac:	2520      	movs	r5, #32
    feae:	0020      	movs	r0, r4
    feb0:	1aad      	subs	r5, r5, r2
    feb2:	001e      	movs	r6, r3
    feb4:	40ab      	lsls	r3, r5
    feb6:	40a8      	lsls	r0, r5
    feb8:	40d6      	lsrs	r6, r2
    feba:	1e5d      	subs	r5, r3, #1
    febc:	41ab      	sbcs	r3, r5
    febe:	4330      	orrs	r0, r6
    fec0:	4318      	orrs	r0, r3
    fec2:	40d4      	lsrs	r4, r2
    fec4:	0743      	lsls	r3, r0, #29
    fec6:	d009      	beq.n	fedc <__aeabi_dmul+0x474>
    fec8:	230f      	movs	r3, #15
    feca:	4003      	ands	r3, r0
    fecc:	2b04      	cmp	r3, #4
    fece:	d005      	beq.n	fedc <__aeabi_dmul+0x474>
    fed0:	0003      	movs	r3, r0
    fed2:	1d18      	adds	r0, r3, #4
    fed4:	4298      	cmp	r0, r3
    fed6:	419b      	sbcs	r3, r3
    fed8:	425b      	negs	r3, r3
    feda:	18e4      	adds	r4, r4, r3
    fedc:	0223      	lsls	r3, r4, #8
    fede:	d521      	bpl.n	ff24 <__aeabi_dmul+0x4bc>
    fee0:	2501      	movs	r5, #1
    fee2:	9b01      	ldr	r3, [sp, #4]
    fee4:	2401      	movs	r4, #1
    fee6:	401d      	ands	r5, r3
    fee8:	2300      	movs	r3, #0
    feea:	2200      	movs	r2, #0
    feec:	4699      	mov	r9, r3
    feee:	e622      	b.n	fb36 <__aeabi_dmul+0xce>
    fef0:	251f      	movs	r5, #31
    fef2:	0021      	movs	r1, r4
    fef4:	426d      	negs	r5, r5
    fef6:	1a28      	subs	r0, r5, r0
    fef8:	40c1      	lsrs	r1, r0
    fefa:	0008      	movs	r0, r1
    fefc:	2a20      	cmp	r2, #32
    fefe:	d01d      	beq.n	ff3c <__aeabi_dmul+0x4d4>
    ff00:	355f      	adds	r5, #95	; 0x5f
    ff02:	1aaa      	subs	r2, r5, r2
    ff04:	4094      	lsls	r4, r2
    ff06:	4323      	orrs	r3, r4
    ff08:	1e5c      	subs	r4, r3, #1
    ff0a:	41a3      	sbcs	r3, r4
    ff0c:	2507      	movs	r5, #7
    ff0e:	4303      	orrs	r3, r0
    ff10:	401d      	ands	r5, r3
    ff12:	2200      	movs	r2, #0
    ff14:	2d00      	cmp	r5, #0
    ff16:	d009      	beq.n	ff2c <__aeabi_dmul+0x4c4>
    ff18:	220f      	movs	r2, #15
    ff1a:	2400      	movs	r4, #0
    ff1c:	401a      	ands	r2, r3
    ff1e:	0018      	movs	r0, r3
    ff20:	2a04      	cmp	r2, #4
    ff22:	d1d6      	bne.n	fed2 <__aeabi_dmul+0x46a>
    ff24:	0003      	movs	r3, r0
    ff26:	0765      	lsls	r5, r4, #29
    ff28:	0264      	lsls	r4, r4, #9
    ff2a:	0b22      	lsrs	r2, r4, #12
    ff2c:	08db      	lsrs	r3, r3, #3
    ff2e:	432b      	orrs	r3, r5
    ff30:	2501      	movs	r5, #1
    ff32:	4699      	mov	r9, r3
    ff34:	9b01      	ldr	r3, [sp, #4]
    ff36:	2400      	movs	r4, #0
    ff38:	401d      	ands	r5, r3
    ff3a:	e5fc      	b.n	fb36 <__aeabi_dmul+0xce>
    ff3c:	2400      	movs	r4, #0
    ff3e:	e7e2      	b.n	ff06 <__aeabi_dmul+0x49e>
    ff40:	2280      	movs	r2, #128	; 0x80
    ff42:	2501      	movs	r5, #1
    ff44:	0312      	lsls	r2, r2, #12
    ff46:	4322      	orrs	r2, r4
    ff48:	9901      	ldr	r1, [sp, #4]
    ff4a:	0312      	lsls	r2, r2, #12
    ff4c:	0b12      	lsrs	r2, r2, #12
    ff4e:	400d      	ands	r5, r1
    ff50:	4699      	mov	r9, r3
    ff52:	4c04      	ldr	r4, [pc, #16]	; (ff64 <__aeabi_dmul+0x4fc>)
    ff54:	e5ef      	b.n	fb36 <__aeabi_dmul+0xce>
    ff56:	46c0      	nop			; (mov r8, r8)
    ff58:	000003ff 	.word	0x000003ff
    ff5c:	feffffff 	.word	0xfeffffff
    ff60:	000007fe 	.word	0x000007fe
    ff64:	000007ff 	.word	0x000007ff

0000ff68 <__aeabi_dsub>:
    ff68:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff6a:	4646      	mov	r6, r8
    ff6c:	46d6      	mov	lr, sl
    ff6e:	464f      	mov	r7, r9
    ff70:	030c      	lsls	r4, r1, #12
    ff72:	b5c0      	push	{r6, r7, lr}
    ff74:	0fcd      	lsrs	r5, r1, #31
    ff76:	004e      	lsls	r6, r1, #1
    ff78:	0a61      	lsrs	r1, r4, #9
    ff7a:	0f44      	lsrs	r4, r0, #29
    ff7c:	430c      	orrs	r4, r1
    ff7e:	00c1      	lsls	r1, r0, #3
    ff80:	0058      	lsls	r0, r3, #1
    ff82:	0d40      	lsrs	r0, r0, #21
    ff84:	4684      	mov	ip, r0
    ff86:	468a      	mov	sl, r1
    ff88:	000f      	movs	r7, r1
    ff8a:	0319      	lsls	r1, r3, #12
    ff8c:	0f50      	lsrs	r0, r2, #29
    ff8e:	0a49      	lsrs	r1, r1, #9
    ff90:	4301      	orrs	r1, r0
    ff92:	48c6      	ldr	r0, [pc, #792]	; (102ac <__aeabi_dsub+0x344>)
    ff94:	0d76      	lsrs	r6, r6, #21
    ff96:	46a8      	mov	r8, r5
    ff98:	0fdb      	lsrs	r3, r3, #31
    ff9a:	00d2      	lsls	r2, r2, #3
    ff9c:	4584      	cmp	ip, r0
    ff9e:	d100      	bne.n	ffa2 <__aeabi_dsub+0x3a>
    ffa0:	e0d8      	b.n	10154 <__aeabi_dsub+0x1ec>
    ffa2:	2001      	movs	r0, #1
    ffa4:	4043      	eors	r3, r0
    ffa6:	42ab      	cmp	r3, r5
    ffa8:	d100      	bne.n	ffac <__aeabi_dsub+0x44>
    ffaa:	e0a6      	b.n	100fa <__aeabi_dsub+0x192>
    ffac:	4660      	mov	r0, ip
    ffae:	1a35      	subs	r5, r6, r0
    ffb0:	2d00      	cmp	r5, #0
    ffb2:	dc00      	bgt.n	ffb6 <__aeabi_dsub+0x4e>
    ffb4:	e105      	b.n	101c2 <__aeabi_dsub+0x25a>
    ffb6:	2800      	cmp	r0, #0
    ffb8:	d110      	bne.n	ffdc <__aeabi_dsub+0x74>
    ffba:	000b      	movs	r3, r1
    ffbc:	4313      	orrs	r3, r2
    ffbe:	d100      	bne.n	ffc2 <__aeabi_dsub+0x5a>
    ffc0:	e0d7      	b.n	10172 <__aeabi_dsub+0x20a>
    ffc2:	1e6b      	subs	r3, r5, #1
    ffc4:	2b00      	cmp	r3, #0
    ffc6:	d000      	beq.n	ffca <__aeabi_dsub+0x62>
    ffc8:	e14b      	b.n	10262 <__aeabi_dsub+0x2fa>
    ffca:	4653      	mov	r3, sl
    ffcc:	1a9f      	subs	r7, r3, r2
    ffce:	45ba      	cmp	sl, r7
    ffd0:	4180      	sbcs	r0, r0
    ffd2:	1a64      	subs	r4, r4, r1
    ffd4:	4240      	negs	r0, r0
    ffd6:	1a24      	subs	r4, r4, r0
    ffd8:	2601      	movs	r6, #1
    ffda:	e01e      	b.n	1001a <__aeabi_dsub+0xb2>
    ffdc:	4bb3      	ldr	r3, [pc, #716]	; (102ac <__aeabi_dsub+0x344>)
    ffde:	429e      	cmp	r6, r3
    ffe0:	d048      	beq.n	10074 <__aeabi_dsub+0x10c>
    ffe2:	2380      	movs	r3, #128	; 0x80
    ffe4:	041b      	lsls	r3, r3, #16
    ffe6:	4319      	orrs	r1, r3
    ffe8:	2d38      	cmp	r5, #56	; 0x38
    ffea:	dd00      	ble.n	ffee <__aeabi_dsub+0x86>
    ffec:	e119      	b.n	10222 <__aeabi_dsub+0x2ba>
    ffee:	2d1f      	cmp	r5, #31
    fff0:	dd00      	ble.n	fff4 <__aeabi_dsub+0x8c>
    fff2:	e14c      	b.n	1028e <__aeabi_dsub+0x326>
    fff4:	2320      	movs	r3, #32
    fff6:	000f      	movs	r7, r1
    fff8:	1b5b      	subs	r3, r3, r5
    fffa:	0010      	movs	r0, r2
    fffc:	409a      	lsls	r2, r3
    fffe:	409f      	lsls	r7, r3
   10000:	40e8      	lsrs	r0, r5
   10002:	1e53      	subs	r3, r2, #1
   10004:	419a      	sbcs	r2, r3
   10006:	40e9      	lsrs	r1, r5
   10008:	4307      	orrs	r7, r0
   1000a:	4317      	orrs	r7, r2
   1000c:	4653      	mov	r3, sl
   1000e:	1bdf      	subs	r7, r3, r7
   10010:	1a61      	subs	r1, r4, r1
   10012:	45ba      	cmp	sl, r7
   10014:	41a4      	sbcs	r4, r4
   10016:	4264      	negs	r4, r4
   10018:	1b0c      	subs	r4, r1, r4
   1001a:	0223      	lsls	r3, r4, #8
   1001c:	d400      	bmi.n	10020 <__aeabi_dsub+0xb8>
   1001e:	e0c5      	b.n	101ac <__aeabi_dsub+0x244>
   10020:	0264      	lsls	r4, r4, #9
   10022:	0a65      	lsrs	r5, r4, #9
   10024:	2d00      	cmp	r5, #0
   10026:	d100      	bne.n	1002a <__aeabi_dsub+0xc2>
   10028:	e0f6      	b.n	10218 <__aeabi_dsub+0x2b0>
   1002a:	0028      	movs	r0, r5
   1002c:	f000 fb3e 	bl	106ac <__clzsi2>
   10030:	0003      	movs	r3, r0
   10032:	3b08      	subs	r3, #8
   10034:	2b1f      	cmp	r3, #31
   10036:	dd00      	ble.n	1003a <__aeabi_dsub+0xd2>
   10038:	e0e9      	b.n	1020e <__aeabi_dsub+0x2a6>
   1003a:	2220      	movs	r2, #32
   1003c:	003c      	movs	r4, r7
   1003e:	1ad2      	subs	r2, r2, r3
   10040:	409d      	lsls	r5, r3
   10042:	40d4      	lsrs	r4, r2
   10044:	409f      	lsls	r7, r3
   10046:	4325      	orrs	r5, r4
   10048:	429e      	cmp	r6, r3
   1004a:	dd00      	ble.n	1004e <__aeabi_dsub+0xe6>
   1004c:	e0db      	b.n	10206 <__aeabi_dsub+0x29e>
   1004e:	1b9e      	subs	r6, r3, r6
   10050:	1c73      	adds	r3, r6, #1
   10052:	2b1f      	cmp	r3, #31
   10054:	dd00      	ble.n	10058 <__aeabi_dsub+0xf0>
   10056:	e10a      	b.n	1026e <__aeabi_dsub+0x306>
   10058:	2220      	movs	r2, #32
   1005a:	0038      	movs	r0, r7
   1005c:	1ad2      	subs	r2, r2, r3
   1005e:	0029      	movs	r1, r5
   10060:	4097      	lsls	r7, r2
   10062:	002c      	movs	r4, r5
   10064:	4091      	lsls	r1, r2
   10066:	40d8      	lsrs	r0, r3
   10068:	1e7a      	subs	r2, r7, #1
   1006a:	4197      	sbcs	r7, r2
   1006c:	40dc      	lsrs	r4, r3
   1006e:	2600      	movs	r6, #0
   10070:	4301      	orrs	r1, r0
   10072:	430f      	orrs	r7, r1
   10074:	077b      	lsls	r3, r7, #29
   10076:	d009      	beq.n	1008c <__aeabi_dsub+0x124>
   10078:	230f      	movs	r3, #15
   1007a:	403b      	ands	r3, r7
   1007c:	2b04      	cmp	r3, #4
   1007e:	d005      	beq.n	1008c <__aeabi_dsub+0x124>
   10080:	1d3b      	adds	r3, r7, #4
   10082:	42bb      	cmp	r3, r7
   10084:	41bf      	sbcs	r7, r7
   10086:	427f      	negs	r7, r7
   10088:	19e4      	adds	r4, r4, r7
   1008a:	001f      	movs	r7, r3
   1008c:	0223      	lsls	r3, r4, #8
   1008e:	d525      	bpl.n	100dc <__aeabi_dsub+0x174>
   10090:	4b86      	ldr	r3, [pc, #536]	; (102ac <__aeabi_dsub+0x344>)
   10092:	3601      	adds	r6, #1
   10094:	429e      	cmp	r6, r3
   10096:	d100      	bne.n	1009a <__aeabi_dsub+0x132>
   10098:	e0af      	b.n	101fa <__aeabi_dsub+0x292>
   1009a:	4b85      	ldr	r3, [pc, #532]	; (102b0 <__aeabi_dsub+0x348>)
   1009c:	2501      	movs	r5, #1
   1009e:	401c      	ands	r4, r3
   100a0:	4643      	mov	r3, r8
   100a2:	0762      	lsls	r2, r4, #29
   100a4:	08ff      	lsrs	r7, r7, #3
   100a6:	0264      	lsls	r4, r4, #9
   100a8:	0576      	lsls	r6, r6, #21
   100aa:	4317      	orrs	r7, r2
   100ac:	0b24      	lsrs	r4, r4, #12
   100ae:	0d76      	lsrs	r6, r6, #21
   100b0:	401d      	ands	r5, r3
   100b2:	2100      	movs	r1, #0
   100b4:	0324      	lsls	r4, r4, #12
   100b6:	0b23      	lsrs	r3, r4, #12
   100b8:	0d0c      	lsrs	r4, r1, #20
   100ba:	4a7e      	ldr	r2, [pc, #504]	; (102b4 <__aeabi_dsub+0x34c>)
   100bc:	0524      	lsls	r4, r4, #20
   100be:	431c      	orrs	r4, r3
   100c0:	4014      	ands	r4, r2
   100c2:	0533      	lsls	r3, r6, #20
   100c4:	4323      	orrs	r3, r4
   100c6:	005b      	lsls	r3, r3, #1
   100c8:	07ed      	lsls	r5, r5, #31
   100ca:	085b      	lsrs	r3, r3, #1
   100cc:	432b      	orrs	r3, r5
   100ce:	0038      	movs	r0, r7
   100d0:	0019      	movs	r1, r3
   100d2:	bc1c      	pop	{r2, r3, r4}
   100d4:	4690      	mov	r8, r2
   100d6:	4699      	mov	r9, r3
   100d8:	46a2      	mov	sl, r4
   100da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100dc:	2501      	movs	r5, #1
   100de:	4643      	mov	r3, r8
   100e0:	0762      	lsls	r2, r4, #29
   100e2:	08ff      	lsrs	r7, r7, #3
   100e4:	4317      	orrs	r7, r2
   100e6:	08e4      	lsrs	r4, r4, #3
   100e8:	401d      	ands	r5, r3
   100ea:	4b70      	ldr	r3, [pc, #448]	; (102ac <__aeabi_dsub+0x344>)
   100ec:	429e      	cmp	r6, r3
   100ee:	d036      	beq.n	1015e <__aeabi_dsub+0x1f6>
   100f0:	0324      	lsls	r4, r4, #12
   100f2:	0576      	lsls	r6, r6, #21
   100f4:	0b24      	lsrs	r4, r4, #12
   100f6:	0d76      	lsrs	r6, r6, #21
   100f8:	e7db      	b.n	100b2 <__aeabi_dsub+0x14a>
   100fa:	4663      	mov	r3, ip
   100fc:	1af3      	subs	r3, r6, r3
   100fe:	2b00      	cmp	r3, #0
   10100:	dc00      	bgt.n	10104 <__aeabi_dsub+0x19c>
   10102:	e094      	b.n	1022e <__aeabi_dsub+0x2c6>
   10104:	4660      	mov	r0, ip
   10106:	2800      	cmp	r0, #0
   10108:	d035      	beq.n	10176 <__aeabi_dsub+0x20e>
   1010a:	4868      	ldr	r0, [pc, #416]	; (102ac <__aeabi_dsub+0x344>)
   1010c:	4286      	cmp	r6, r0
   1010e:	d0b1      	beq.n	10074 <__aeabi_dsub+0x10c>
   10110:	2780      	movs	r7, #128	; 0x80
   10112:	043f      	lsls	r7, r7, #16
   10114:	4339      	orrs	r1, r7
   10116:	2b38      	cmp	r3, #56	; 0x38
   10118:	dc00      	bgt.n	1011c <__aeabi_dsub+0x1b4>
   1011a:	e0fd      	b.n	10318 <__aeabi_dsub+0x3b0>
   1011c:	430a      	orrs	r2, r1
   1011e:	0017      	movs	r7, r2
   10120:	2100      	movs	r1, #0
   10122:	1e7a      	subs	r2, r7, #1
   10124:	4197      	sbcs	r7, r2
   10126:	4457      	add	r7, sl
   10128:	4557      	cmp	r7, sl
   1012a:	4180      	sbcs	r0, r0
   1012c:	1909      	adds	r1, r1, r4
   1012e:	4244      	negs	r4, r0
   10130:	190c      	adds	r4, r1, r4
   10132:	0223      	lsls	r3, r4, #8
   10134:	d53a      	bpl.n	101ac <__aeabi_dsub+0x244>
   10136:	4b5d      	ldr	r3, [pc, #372]	; (102ac <__aeabi_dsub+0x344>)
   10138:	3601      	adds	r6, #1
   1013a:	429e      	cmp	r6, r3
   1013c:	d100      	bne.n	10140 <__aeabi_dsub+0x1d8>
   1013e:	e14b      	b.n	103d8 <__aeabi_dsub+0x470>
   10140:	2201      	movs	r2, #1
   10142:	4b5b      	ldr	r3, [pc, #364]	; (102b0 <__aeabi_dsub+0x348>)
   10144:	401c      	ands	r4, r3
   10146:	087b      	lsrs	r3, r7, #1
   10148:	4017      	ands	r7, r2
   1014a:	431f      	orrs	r7, r3
   1014c:	07e2      	lsls	r2, r4, #31
   1014e:	4317      	orrs	r7, r2
   10150:	0864      	lsrs	r4, r4, #1
   10152:	e78f      	b.n	10074 <__aeabi_dsub+0x10c>
   10154:	0008      	movs	r0, r1
   10156:	4310      	orrs	r0, r2
   10158:	d000      	beq.n	1015c <__aeabi_dsub+0x1f4>
   1015a:	e724      	b.n	ffa6 <__aeabi_dsub+0x3e>
   1015c:	e721      	b.n	ffa2 <__aeabi_dsub+0x3a>
   1015e:	0023      	movs	r3, r4
   10160:	433b      	orrs	r3, r7
   10162:	d100      	bne.n	10166 <__aeabi_dsub+0x1fe>
   10164:	e1b9      	b.n	104da <__aeabi_dsub+0x572>
   10166:	2280      	movs	r2, #128	; 0x80
   10168:	0312      	lsls	r2, r2, #12
   1016a:	4314      	orrs	r4, r2
   1016c:	0324      	lsls	r4, r4, #12
   1016e:	0b24      	lsrs	r4, r4, #12
   10170:	e79f      	b.n	100b2 <__aeabi_dsub+0x14a>
   10172:	002e      	movs	r6, r5
   10174:	e77e      	b.n	10074 <__aeabi_dsub+0x10c>
   10176:	0008      	movs	r0, r1
   10178:	4310      	orrs	r0, r2
   1017a:	d100      	bne.n	1017e <__aeabi_dsub+0x216>
   1017c:	e0ca      	b.n	10314 <__aeabi_dsub+0x3ac>
   1017e:	1e58      	subs	r0, r3, #1
   10180:	4684      	mov	ip, r0
   10182:	2800      	cmp	r0, #0
   10184:	d000      	beq.n	10188 <__aeabi_dsub+0x220>
   10186:	e0e7      	b.n	10358 <__aeabi_dsub+0x3f0>
   10188:	4452      	add	r2, sl
   1018a:	4552      	cmp	r2, sl
   1018c:	4180      	sbcs	r0, r0
   1018e:	1864      	adds	r4, r4, r1
   10190:	4240      	negs	r0, r0
   10192:	1824      	adds	r4, r4, r0
   10194:	0017      	movs	r7, r2
   10196:	2601      	movs	r6, #1
   10198:	0223      	lsls	r3, r4, #8
   1019a:	d507      	bpl.n	101ac <__aeabi_dsub+0x244>
   1019c:	2602      	movs	r6, #2
   1019e:	e7cf      	b.n	10140 <__aeabi_dsub+0x1d8>
   101a0:	4664      	mov	r4, ip
   101a2:	432c      	orrs	r4, r5
   101a4:	d100      	bne.n	101a8 <__aeabi_dsub+0x240>
   101a6:	e1b3      	b.n	10510 <__aeabi_dsub+0x5a8>
   101a8:	002c      	movs	r4, r5
   101aa:	4667      	mov	r7, ip
   101ac:	077b      	lsls	r3, r7, #29
   101ae:	d000      	beq.n	101b2 <__aeabi_dsub+0x24a>
   101b0:	e762      	b.n	10078 <__aeabi_dsub+0x110>
   101b2:	0763      	lsls	r3, r4, #29
   101b4:	08ff      	lsrs	r7, r7, #3
   101b6:	431f      	orrs	r7, r3
   101b8:	2501      	movs	r5, #1
   101ba:	4643      	mov	r3, r8
   101bc:	08e4      	lsrs	r4, r4, #3
   101be:	401d      	ands	r5, r3
   101c0:	e793      	b.n	100ea <__aeabi_dsub+0x182>
   101c2:	2d00      	cmp	r5, #0
   101c4:	d178      	bne.n	102b8 <__aeabi_dsub+0x350>
   101c6:	1c75      	adds	r5, r6, #1
   101c8:	056d      	lsls	r5, r5, #21
   101ca:	0d6d      	lsrs	r5, r5, #21
   101cc:	2d01      	cmp	r5, #1
   101ce:	dc00      	bgt.n	101d2 <__aeabi_dsub+0x26a>
   101d0:	e0f2      	b.n	103b8 <__aeabi_dsub+0x450>
   101d2:	4650      	mov	r0, sl
   101d4:	1a80      	subs	r0, r0, r2
   101d6:	4582      	cmp	sl, r0
   101d8:	41bf      	sbcs	r7, r7
   101da:	1a65      	subs	r5, r4, r1
   101dc:	427f      	negs	r7, r7
   101de:	1bed      	subs	r5, r5, r7
   101e0:	4684      	mov	ip, r0
   101e2:	0228      	lsls	r0, r5, #8
   101e4:	d400      	bmi.n	101e8 <__aeabi_dsub+0x280>
   101e6:	e08c      	b.n	10302 <__aeabi_dsub+0x39a>
   101e8:	4650      	mov	r0, sl
   101ea:	1a17      	subs	r7, r2, r0
   101ec:	42ba      	cmp	r2, r7
   101ee:	4192      	sbcs	r2, r2
   101f0:	1b0c      	subs	r4, r1, r4
   101f2:	4255      	negs	r5, r2
   101f4:	1b65      	subs	r5, r4, r5
   101f6:	4698      	mov	r8, r3
   101f8:	e714      	b.n	10024 <__aeabi_dsub+0xbc>
   101fa:	2501      	movs	r5, #1
   101fc:	4643      	mov	r3, r8
   101fe:	2400      	movs	r4, #0
   10200:	401d      	ands	r5, r3
   10202:	2700      	movs	r7, #0
   10204:	e755      	b.n	100b2 <__aeabi_dsub+0x14a>
   10206:	4c2a      	ldr	r4, [pc, #168]	; (102b0 <__aeabi_dsub+0x348>)
   10208:	1af6      	subs	r6, r6, r3
   1020a:	402c      	ands	r4, r5
   1020c:	e732      	b.n	10074 <__aeabi_dsub+0x10c>
   1020e:	003d      	movs	r5, r7
   10210:	3828      	subs	r0, #40	; 0x28
   10212:	4085      	lsls	r5, r0
   10214:	2700      	movs	r7, #0
   10216:	e717      	b.n	10048 <__aeabi_dsub+0xe0>
   10218:	0038      	movs	r0, r7
   1021a:	f000 fa47 	bl	106ac <__clzsi2>
   1021e:	3020      	adds	r0, #32
   10220:	e706      	b.n	10030 <__aeabi_dsub+0xc8>
   10222:	430a      	orrs	r2, r1
   10224:	0017      	movs	r7, r2
   10226:	2100      	movs	r1, #0
   10228:	1e7a      	subs	r2, r7, #1
   1022a:	4197      	sbcs	r7, r2
   1022c:	e6ee      	b.n	1000c <__aeabi_dsub+0xa4>
   1022e:	2b00      	cmp	r3, #0
   10230:	d000      	beq.n	10234 <__aeabi_dsub+0x2cc>
   10232:	e0e5      	b.n	10400 <__aeabi_dsub+0x498>
   10234:	1c73      	adds	r3, r6, #1
   10236:	469c      	mov	ip, r3
   10238:	055b      	lsls	r3, r3, #21
   1023a:	0d5b      	lsrs	r3, r3, #21
   1023c:	2b01      	cmp	r3, #1
   1023e:	dc00      	bgt.n	10242 <__aeabi_dsub+0x2da>
   10240:	e09f      	b.n	10382 <__aeabi_dsub+0x41a>
   10242:	4b1a      	ldr	r3, [pc, #104]	; (102ac <__aeabi_dsub+0x344>)
   10244:	459c      	cmp	ip, r3
   10246:	d100      	bne.n	1024a <__aeabi_dsub+0x2e2>
   10248:	e0c5      	b.n	103d6 <__aeabi_dsub+0x46e>
   1024a:	4452      	add	r2, sl
   1024c:	4552      	cmp	r2, sl
   1024e:	4180      	sbcs	r0, r0
   10250:	1864      	adds	r4, r4, r1
   10252:	4240      	negs	r0, r0
   10254:	1824      	adds	r4, r4, r0
   10256:	07e7      	lsls	r7, r4, #31
   10258:	0852      	lsrs	r2, r2, #1
   1025a:	4317      	orrs	r7, r2
   1025c:	0864      	lsrs	r4, r4, #1
   1025e:	4666      	mov	r6, ip
   10260:	e708      	b.n	10074 <__aeabi_dsub+0x10c>
   10262:	4812      	ldr	r0, [pc, #72]	; (102ac <__aeabi_dsub+0x344>)
   10264:	4285      	cmp	r5, r0
   10266:	d100      	bne.n	1026a <__aeabi_dsub+0x302>
   10268:	e085      	b.n	10376 <__aeabi_dsub+0x40e>
   1026a:	001d      	movs	r5, r3
   1026c:	e6bc      	b.n	ffe8 <__aeabi_dsub+0x80>
   1026e:	0029      	movs	r1, r5
   10270:	3e1f      	subs	r6, #31
   10272:	40f1      	lsrs	r1, r6
   10274:	2b20      	cmp	r3, #32
   10276:	d100      	bne.n	1027a <__aeabi_dsub+0x312>
   10278:	e07f      	b.n	1037a <__aeabi_dsub+0x412>
   1027a:	2240      	movs	r2, #64	; 0x40
   1027c:	1ad3      	subs	r3, r2, r3
   1027e:	409d      	lsls	r5, r3
   10280:	432f      	orrs	r7, r5
   10282:	1e7d      	subs	r5, r7, #1
   10284:	41af      	sbcs	r7, r5
   10286:	2400      	movs	r4, #0
   10288:	430f      	orrs	r7, r1
   1028a:	2600      	movs	r6, #0
   1028c:	e78e      	b.n	101ac <__aeabi_dsub+0x244>
   1028e:	002b      	movs	r3, r5
   10290:	000f      	movs	r7, r1
   10292:	3b20      	subs	r3, #32
   10294:	40df      	lsrs	r7, r3
   10296:	2d20      	cmp	r5, #32
   10298:	d071      	beq.n	1037e <__aeabi_dsub+0x416>
   1029a:	2340      	movs	r3, #64	; 0x40
   1029c:	1b5d      	subs	r5, r3, r5
   1029e:	40a9      	lsls	r1, r5
   102a0:	430a      	orrs	r2, r1
   102a2:	1e51      	subs	r1, r2, #1
   102a4:	418a      	sbcs	r2, r1
   102a6:	2100      	movs	r1, #0
   102a8:	4317      	orrs	r7, r2
   102aa:	e6af      	b.n	1000c <__aeabi_dsub+0xa4>
   102ac:	000007ff 	.word	0x000007ff
   102b0:	ff7fffff 	.word	0xff7fffff
   102b4:	800fffff 	.word	0x800fffff
   102b8:	2e00      	cmp	r6, #0
   102ba:	d03e      	beq.n	1033a <__aeabi_dsub+0x3d2>
   102bc:	4eb3      	ldr	r6, [pc, #716]	; (1058c <__aeabi_dsub+0x624>)
   102be:	45b4      	cmp	ip, r6
   102c0:	d045      	beq.n	1034e <__aeabi_dsub+0x3e6>
   102c2:	2680      	movs	r6, #128	; 0x80
   102c4:	0436      	lsls	r6, r6, #16
   102c6:	426d      	negs	r5, r5
   102c8:	4334      	orrs	r4, r6
   102ca:	2d38      	cmp	r5, #56	; 0x38
   102cc:	dd00      	ble.n	102d0 <__aeabi_dsub+0x368>
   102ce:	e0a8      	b.n	10422 <__aeabi_dsub+0x4ba>
   102d0:	2d1f      	cmp	r5, #31
   102d2:	dd00      	ble.n	102d6 <__aeabi_dsub+0x36e>
   102d4:	e11f      	b.n	10516 <__aeabi_dsub+0x5ae>
   102d6:	2620      	movs	r6, #32
   102d8:	0027      	movs	r7, r4
   102da:	4650      	mov	r0, sl
   102dc:	1b76      	subs	r6, r6, r5
   102de:	40b7      	lsls	r7, r6
   102e0:	40e8      	lsrs	r0, r5
   102e2:	4307      	orrs	r7, r0
   102e4:	4650      	mov	r0, sl
   102e6:	40b0      	lsls	r0, r6
   102e8:	1e46      	subs	r6, r0, #1
   102ea:	41b0      	sbcs	r0, r6
   102ec:	40ec      	lsrs	r4, r5
   102ee:	4338      	orrs	r0, r7
   102f0:	1a17      	subs	r7, r2, r0
   102f2:	42ba      	cmp	r2, r7
   102f4:	4192      	sbcs	r2, r2
   102f6:	1b0c      	subs	r4, r1, r4
   102f8:	4252      	negs	r2, r2
   102fa:	1aa4      	subs	r4, r4, r2
   102fc:	4666      	mov	r6, ip
   102fe:	4698      	mov	r8, r3
   10300:	e68b      	b.n	1001a <__aeabi_dsub+0xb2>
   10302:	4664      	mov	r4, ip
   10304:	4667      	mov	r7, ip
   10306:	432c      	orrs	r4, r5
   10308:	d000      	beq.n	1030c <__aeabi_dsub+0x3a4>
   1030a:	e68b      	b.n	10024 <__aeabi_dsub+0xbc>
   1030c:	2500      	movs	r5, #0
   1030e:	2600      	movs	r6, #0
   10310:	2700      	movs	r7, #0
   10312:	e6ea      	b.n	100ea <__aeabi_dsub+0x182>
   10314:	001e      	movs	r6, r3
   10316:	e6ad      	b.n	10074 <__aeabi_dsub+0x10c>
   10318:	2b1f      	cmp	r3, #31
   1031a:	dc60      	bgt.n	103de <__aeabi_dsub+0x476>
   1031c:	2720      	movs	r7, #32
   1031e:	1af8      	subs	r0, r7, r3
   10320:	000f      	movs	r7, r1
   10322:	4684      	mov	ip, r0
   10324:	4087      	lsls	r7, r0
   10326:	0010      	movs	r0, r2
   10328:	40d8      	lsrs	r0, r3
   1032a:	4307      	orrs	r7, r0
   1032c:	4660      	mov	r0, ip
   1032e:	4082      	lsls	r2, r0
   10330:	1e50      	subs	r0, r2, #1
   10332:	4182      	sbcs	r2, r0
   10334:	40d9      	lsrs	r1, r3
   10336:	4317      	orrs	r7, r2
   10338:	e6f5      	b.n	10126 <__aeabi_dsub+0x1be>
   1033a:	0026      	movs	r6, r4
   1033c:	4650      	mov	r0, sl
   1033e:	4306      	orrs	r6, r0
   10340:	d005      	beq.n	1034e <__aeabi_dsub+0x3e6>
   10342:	43ed      	mvns	r5, r5
   10344:	2d00      	cmp	r5, #0
   10346:	d0d3      	beq.n	102f0 <__aeabi_dsub+0x388>
   10348:	4e90      	ldr	r6, [pc, #576]	; (1058c <__aeabi_dsub+0x624>)
   1034a:	45b4      	cmp	ip, r6
   1034c:	d1bd      	bne.n	102ca <__aeabi_dsub+0x362>
   1034e:	000c      	movs	r4, r1
   10350:	0017      	movs	r7, r2
   10352:	4666      	mov	r6, ip
   10354:	4698      	mov	r8, r3
   10356:	e68d      	b.n	10074 <__aeabi_dsub+0x10c>
   10358:	488c      	ldr	r0, [pc, #560]	; (1058c <__aeabi_dsub+0x624>)
   1035a:	4283      	cmp	r3, r0
   1035c:	d00b      	beq.n	10376 <__aeabi_dsub+0x40e>
   1035e:	4663      	mov	r3, ip
   10360:	e6d9      	b.n	10116 <__aeabi_dsub+0x1ae>
   10362:	2d00      	cmp	r5, #0
   10364:	d000      	beq.n	10368 <__aeabi_dsub+0x400>
   10366:	e096      	b.n	10496 <__aeabi_dsub+0x52e>
   10368:	0008      	movs	r0, r1
   1036a:	4310      	orrs	r0, r2
   1036c:	d100      	bne.n	10370 <__aeabi_dsub+0x408>
   1036e:	e0e2      	b.n	10536 <__aeabi_dsub+0x5ce>
   10370:	000c      	movs	r4, r1
   10372:	0017      	movs	r7, r2
   10374:	4698      	mov	r8, r3
   10376:	4e85      	ldr	r6, [pc, #532]	; (1058c <__aeabi_dsub+0x624>)
   10378:	e67c      	b.n	10074 <__aeabi_dsub+0x10c>
   1037a:	2500      	movs	r5, #0
   1037c:	e780      	b.n	10280 <__aeabi_dsub+0x318>
   1037e:	2100      	movs	r1, #0
   10380:	e78e      	b.n	102a0 <__aeabi_dsub+0x338>
   10382:	0023      	movs	r3, r4
   10384:	4650      	mov	r0, sl
   10386:	4303      	orrs	r3, r0
   10388:	2e00      	cmp	r6, #0
   1038a:	d000      	beq.n	1038e <__aeabi_dsub+0x426>
   1038c:	e0a8      	b.n	104e0 <__aeabi_dsub+0x578>
   1038e:	2b00      	cmp	r3, #0
   10390:	d100      	bne.n	10394 <__aeabi_dsub+0x42c>
   10392:	e0de      	b.n	10552 <__aeabi_dsub+0x5ea>
   10394:	000b      	movs	r3, r1
   10396:	4313      	orrs	r3, r2
   10398:	d100      	bne.n	1039c <__aeabi_dsub+0x434>
   1039a:	e66b      	b.n	10074 <__aeabi_dsub+0x10c>
   1039c:	4452      	add	r2, sl
   1039e:	4552      	cmp	r2, sl
   103a0:	4180      	sbcs	r0, r0
   103a2:	1864      	adds	r4, r4, r1
   103a4:	4240      	negs	r0, r0
   103a6:	1824      	adds	r4, r4, r0
   103a8:	0017      	movs	r7, r2
   103aa:	0223      	lsls	r3, r4, #8
   103ac:	d400      	bmi.n	103b0 <__aeabi_dsub+0x448>
   103ae:	e6fd      	b.n	101ac <__aeabi_dsub+0x244>
   103b0:	4b77      	ldr	r3, [pc, #476]	; (10590 <__aeabi_dsub+0x628>)
   103b2:	4666      	mov	r6, ip
   103b4:	401c      	ands	r4, r3
   103b6:	e65d      	b.n	10074 <__aeabi_dsub+0x10c>
   103b8:	0025      	movs	r5, r4
   103ba:	4650      	mov	r0, sl
   103bc:	4305      	orrs	r5, r0
   103be:	2e00      	cmp	r6, #0
   103c0:	d1cf      	bne.n	10362 <__aeabi_dsub+0x3fa>
   103c2:	2d00      	cmp	r5, #0
   103c4:	d14f      	bne.n	10466 <__aeabi_dsub+0x4fe>
   103c6:	000c      	movs	r4, r1
   103c8:	4314      	orrs	r4, r2
   103ca:	d100      	bne.n	103ce <__aeabi_dsub+0x466>
   103cc:	e0a0      	b.n	10510 <__aeabi_dsub+0x5a8>
   103ce:	000c      	movs	r4, r1
   103d0:	0017      	movs	r7, r2
   103d2:	4698      	mov	r8, r3
   103d4:	e64e      	b.n	10074 <__aeabi_dsub+0x10c>
   103d6:	4666      	mov	r6, ip
   103d8:	2400      	movs	r4, #0
   103da:	2700      	movs	r7, #0
   103dc:	e685      	b.n	100ea <__aeabi_dsub+0x182>
   103de:	001f      	movs	r7, r3
   103e0:	0008      	movs	r0, r1
   103e2:	3f20      	subs	r7, #32
   103e4:	40f8      	lsrs	r0, r7
   103e6:	0007      	movs	r7, r0
   103e8:	2b20      	cmp	r3, #32
   103ea:	d100      	bne.n	103ee <__aeabi_dsub+0x486>
   103ec:	e08e      	b.n	1050c <__aeabi_dsub+0x5a4>
   103ee:	2040      	movs	r0, #64	; 0x40
   103f0:	1ac3      	subs	r3, r0, r3
   103f2:	4099      	lsls	r1, r3
   103f4:	430a      	orrs	r2, r1
   103f6:	1e51      	subs	r1, r2, #1
   103f8:	418a      	sbcs	r2, r1
   103fa:	2100      	movs	r1, #0
   103fc:	4317      	orrs	r7, r2
   103fe:	e692      	b.n	10126 <__aeabi_dsub+0x1be>
   10400:	2e00      	cmp	r6, #0
   10402:	d114      	bne.n	1042e <__aeabi_dsub+0x4c6>
   10404:	0026      	movs	r6, r4
   10406:	4650      	mov	r0, sl
   10408:	4306      	orrs	r6, r0
   1040a:	d062      	beq.n	104d2 <__aeabi_dsub+0x56a>
   1040c:	43db      	mvns	r3, r3
   1040e:	2b00      	cmp	r3, #0
   10410:	d15c      	bne.n	104cc <__aeabi_dsub+0x564>
   10412:	1887      	adds	r7, r0, r2
   10414:	4297      	cmp	r7, r2
   10416:	4192      	sbcs	r2, r2
   10418:	1864      	adds	r4, r4, r1
   1041a:	4252      	negs	r2, r2
   1041c:	18a4      	adds	r4, r4, r2
   1041e:	4666      	mov	r6, ip
   10420:	e687      	b.n	10132 <__aeabi_dsub+0x1ca>
   10422:	4650      	mov	r0, sl
   10424:	4320      	orrs	r0, r4
   10426:	1e44      	subs	r4, r0, #1
   10428:	41a0      	sbcs	r0, r4
   1042a:	2400      	movs	r4, #0
   1042c:	e760      	b.n	102f0 <__aeabi_dsub+0x388>
   1042e:	4e57      	ldr	r6, [pc, #348]	; (1058c <__aeabi_dsub+0x624>)
   10430:	45b4      	cmp	ip, r6
   10432:	d04e      	beq.n	104d2 <__aeabi_dsub+0x56a>
   10434:	2680      	movs	r6, #128	; 0x80
   10436:	0436      	lsls	r6, r6, #16
   10438:	425b      	negs	r3, r3
   1043a:	4334      	orrs	r4, r6
   1043c:	2b38      	cmp	r3, #56	; 0x38
   1043e:	dd00      	ble.n	10442 <__aeabi_dsub+0x4da>
   10440:	e07f      	b.n	10542 <__aeabi_dsub+0x5da>
   10442:	2b1f      	cmp	r3, #31
   10444:	dd00      	ble.n	10448 <__aeabi_dsub+0x4e0>
   10446:	e08b      	b.n	10560 <__aeabi_dsub+0x5f8>
   10448:	2620      	movs	r6, #32
   1044a:	0027      	movs	r7, r4
   1044c:	4650      	mov	r0, sl
   1044e:	1af6      	subs	r6, r6, r3
   10450:	40b7      	lsls	r7, r6
   10452:	40d8      	lsrs	r0, r3
   10454:	4307      	orrs	r7, r0
   10456:	4650      	mov	r0, sl
   10458:	40b0      	lsls	r0, r6
   1045a:	1e46      	subs	r6, r0, #1
   1045c:	41b0      	sbcs	r0, r6
   1045e:	4307      	orrs	r7, r0
   10460:	40dc      	lsrs	r4, r3
   10462:	18bf      	adds	r7, r7, r2
   10464:	e7d6      	b.n	10414 <__aeabi_dsub+0x4ac>
   10466:	000d      	movs	r5, r1
   10468:	4315      	orrs	r5, r2
   1046a:	d100      	bne.n	1046e <__aeabi_dsub+0x506>
   1046c:	e602      	b.n	10074 <__aeabi_dsub+0x10c>
   1046e:	4650      	mov	r0, sl
   10470:	1a80      	subs	r0, r0, r2
   10472:	4582      	cmp	sl, r0
   10474:	41bf      	sbcs	r7, r7
   10476:	1a65      	subs	r5, r4, r1
   10478:	427f      	negs	r7, r7
   1047a:	1bed      	subs	r5, r5, r7
   1047c:	4684      	mov	ip, r0
   1047e:	0228      	lsls	r0, r5, #8
   10480:	d400      	bmi.n	10484 <__aeabi_dsub+0x51c>
   10482:	e68d      	b.n	101a0 <__aeabi_dsub+0x238>
   10484:	4650      	mov	r0, sl
   10486:	1a17      	subs	r7, r2, r0
   10488:	42ba      	cmp	r2, r7
   1048a:	4192      	sbcs	r2, r2
   1048c:	1b0c      	subs	r4, r1, r4
   1048e:	4252      	negs	r2, r2
   10490:	1aa4      	subs	r4, r4, r2
   10492:	4698      	mov	r8, r3
   10494:	e5ee      	b.n	10074 <__aeabi_dsub+0x10c>
   10496:	000d      	movs	r5, r1
   10498:	4315      	orrs	r5, r2
   1049a:	d100      	bne.n	1049e <__aeabi_dsub+0x536>
   1049c:	e76b      	b.n	10376 <__aeabi_dsub+0x40e>
   1049e:	4650      	mov	r0, sl
   104a0:	0767      	lsls	r7, r4, #29
   104a2:	08c0      	lsrs	r0, r0, #3
   104a4:	4307      	orrs	r7, r0
   104a6:	2080      	movs	r0, #128	; 0x80
   104a8:	08e4      	lsrs	r4, r4, #3
   104aa:	0300      	lsls	r0, r0, #12
   104ac:	4204      	tst	r4, r0
   104ae:	d007      	beq.n	104c0 <__aeabi_dsub+0x558>
   104b0:	08cd      	lsrs	r5, r1, #3
   104b2:	4205      	tst	r5, r0
   104b4:	d104      	bne.n	104c0 <__aeabi_dsub+0x558>
   104b6:	002c      	movs	r4, r5
   104b8:	4698      	mov	r8, r3
   104ba:	08d7      	lsrs	r7, r2, #3
   104bc:	0749      	lsls	r1, r1, #29
   104be:	430f      	orrs	r7, r1
   104c0:	0f7b      	lsrs	r3, r7, #29
   104c2:	00e4      	lsls	r4, r4, #3
   104c4:	431c      	orrs	r4, r3
   104c6:	00ff      	lsls	r7, r7, #3
   104c8:	4e30      	ldr	r6, [pc, #192]	; (1058c <__aeabi_dsub+0x624>)
   104ca:	e5d3      	b.n	10074 <__aeabi_dsub+0x10c>
   104cc:	4e2f      	ldr	r6, [pc, #188]	; (1058c <__aeabi_dsub+0x624>)
   104ce:	45b4      	cmp	ip, r6
   104d0:	d1b4      	bne.n	1043c <__aeabi_dsub+0x4d4>
   104d2:	000c      	movs	r4, r1
   104d4:	0017      	movs	r7, r2
   104d6:	4666      	mov	r6, ip
   104d8:	e5cc      	b.n	10074 <__aeabi_dsub+0x10c>
   104da:	2700      	movs	r7, #0
   104dc:	2400      	movs	r4, #0
   104de:	e5e8      	b.n	100b2 <__aeabi_dsub+0x14a>
   104e0:	2b00      	cmp	r3, #0
   104e2:	d039      	beq.n	10558 <__aeabi_dsub+0x5f0>
   104e4:	000b      	movs	r3, r1
   104e6:	4313      	orrs	r3, r2
   104e8:	d100      	bne.n	104ec <__aeabi_dsub+0x584>
   104ea:	e744      	b.n	10376 <__aeabi_dsub+0x40e>
   104ec:	08c0      	lsrs	r0, r0, #3
   104ee:	0767      	lsls	r7, r4, #29
   104f0:	4307      	orrs	r7, r0
   104f2:	2080      	movs	r0, #128	; 0x80
   104f4:	08e4      	lsrs	r4, r4, #3
   104f6:	0300      	lsls	r0, r0, #12
   104f8:	4204      	tst	r4, r0
   104fa:	d0e1      	beq.n	104c0 <__aeabi_dsub+0x558>
   104fc:	08cb      	lsrs	r3, r1, #3
   104fe:	4203      	tst	r3, r0
   10500:	d1de      	bne.n	104c0 <__aeabi_dsub+0x558>
   10502:	08d7      	lsrs	r7, r2, #3
   10504:	0749      	lsls	r1, r1, #29
   10506:	430f      	orrs	r7, r1
   10508:	001c      	movs	r4, r3
   1050a:	e7d9      	b.n	104c0 <__aeabi_dsub+0x558>
   1050c:	2100      	movs	r1, #0
   1050e:	e771      	b.n	103f4 <__aeabi_dsub+0x48c>
   10510:	2500      	movs	r5, #0
   10512:	2700      	movs	r7, #0
   10514:	e5e9      	b.n	100ea <__aeabi_dsub+0x182>
   10516:	002e      	movs	r6, r5
   10518:	0027      	movs	r7, r4
   1051a:	3e20      	subs	r6, #32
   1051c:	40f7      	lsrs	r7, r6
   1051e:	2d20      	cmp	r5, #32
   10520:	d02f      	beq.n	10582 <__aeabi_dsub+0x61a>
   10522:	2640      	movs	r6, #64	; 0x40
   10524:	1b75      	subs	r5, r6, r5
   10526:	40ac      	lsls	r4, r5
   10528:	4650      	mov	r0, sl
   1052a:	4320      	orrs	r0, r4
   1052c:	1e44      	subs	r4, r0, #1
   1052e:	41a0      	sbcs	r0, r4
   10530:	2400      	movs	r4, #0
   10532:	4338      	orrs	r0, r7
   10534:	e6dc      	b.n	102f0 <__aeabi_dsub+0x388>
   10536:	2480      	movs	r4, #128	; 0x80
   10538:	2500      	movs	r5, #0
   1053a:	0324      	lsls	r4, r4, #12
   1053c:	4e13      	ldr	r6, [pc, #76]	; (1058c <__aeabi_dsub+0x624>)
   1053e:	2700      	movs	r7, #0
   10540:	e5d3      	b.n	100ea <__aeabi_dsub+0x182>
   10542:	4650      	mov	r0, sl
   10544:	4320      	orrs	r0, r4
   10546:	0007      	movs	r7, r0
   10548:	1e78      	subs	r0, r7, #1
   1054a:	4187      	sbcs	r7, r0
   1054c:	2400      	movs	r4, #0
   1054e:	18bf      	adds	r7, r7, r2
   10550:	e760      	b.n	10414 <__aeabi_dsub+0x4ac>
   10552:	000c      	movs	r4, r1
   10554:	0017      	movs	r7, r2
   10556:	e58d      	b.n	10074 <__aeabi_dsub+0x10c>
   10558:	000c      	movs	r4, r1
   1055a:	0017      	movs	r7, r2
   1055c:	4e0b      	ldr	r6, [pc, #44]	; (1058c <__aeabi_dsub+0x624>)
   1055e:	e589      	b.n	10074 <__aeabi_dsub+0x10c>
   10560:	001e      	movs	r6, r3
   10562:	0027      	movs	r7, r4
   10564:	3e20      	subs	r6, #32
   10566:	40f7      	lsrs	r7, r6
   10568:	2b20      	cmp	r3, #32
   1056a:	d00c      	beq.n	10586 <__aeabi_dsub+0x61e>
   1056c:	2640      	movs	r6, #64	; 0x40
   1056e:	1af3      	subs	r3, r6, r3
   10570:	409c      	lsls	r4, r3
   10572:	4650      	mov	r0, sl
   10574:	4320      	orrs	r0, r4
   10576:	1e44      	subs	r4, r0, #1
   10578:	41a0      	sbcs	r0, r4
   1057a:	4307      	orrs	r7, r0
   1057c:	2400      	movs	r4, #0
   1057e:	18bf      	adds	r7, r7, r2
   10580:	e748      	b.n	10414 <__aeabi_dsub+0x4ac>
   10582:	2400      	movs	r4, #0
   10584:	e7d0      	b.n	10528 <__aeabi_dsub+0x5c0>
   10586:	2400      	movs	r4, #0
   10588:	e7f3      	b.n	10572 <__aeabi_dsub+0x60a>
   1058a:	46c0      	nop			; (mov r8, r8)
   1058c:	000007ff 	.word	0x000007ff
   10590:	ff7fffff 	.word	0xff7fffff

00010594 <__aeabi_dcmpun>:
   10594:	b570      	push	{r4, r5, r6, lr}
   10596:	4e0e      	ldr	r6, [pc, #56]	; (105d0 <__aeabi_dcmpun+0x3c>)
   10598:	030d      	lsls	r5, r1, #12
   1059a:	031c      	lsls	r4, r3, #12
   1059c:	0049      	lsls	r1, r1, #1
   1059e:	005b      	lsls	r3, r3, #1
   105a0:	0b2d      	lsrs	r5, r5, #12
   105a2:	0d49      	lsrs	r1, r1, #21
   105a4:	0b24      	lsrs	r4, r4, #12
   105a6:	0d5b      	lsrs	r3, r3, #21
   105a8:	42b1      	cmp	r1, r6
   105aa:	d004      	beq.n	105b6 <__aeabi_dcmpun+0x22>
   105ac:	4908      	ldr	r1, [pc, #32]	; (105d0 <__aeabi_dcmpun+0x3c>)
   105ae:	2000      	movs	r0, #0
   105b0:	428b      	cmp	r3, r1
   105b2:	d008      	beq.n	105c6 <__aeabi_dcmpun+0x32>
   105b4:	bd70      	pop	{r4, r5, r6, pc}
   105b6:	4305      	orrs	r5, r0
   105b8:	2001      	movs	r0, #1
   105ba:	2d00      	cmp	r5, #0
   105bc:	d1fa      	bne.n	105b4 <__aeabi_dcmpun+0x20>
   105be:	4904      	ldr	r1, [pc, #16]	; (105d0 <__aeabi_dcmpun+0x3c>)
   105c0:	2000      	movs	r0, #0
   105c2:	428b      	cmp	r3, r1
   105c4:	d1f6      	bne.n	105b4 <__aeabi_dcmpun+0x20>
   105c6:	4314      	orrs	r4, r2
   105c8:	0020      	movs	r0, r4
   105ca:	1e44      	subs	r4, r0, #1
   105cc:	41a0      	sbcs	r0, r4
   105ce:	e7f1      	b.n	105b4 <__aeabi_dcmpun+0x20>
   105d0:	000007ff 	.word	0x000007ff

000105d4 <__aeabi_d2iz>:
   105d4:	b530      	push	{r4, r5, lr}
   105d6:	4d13      	ldr	r5, [pc, #76]	; (10624 <__aeabi_d2iz+0x50>)
   105d8:	030a      	lsls	r2, r1, #12
   105da:	004b      	lsls	r3, r1, #1
   105dc:	0b12      	lsrs	r2, r2, #12
   105de:	0d5b      	lsrs	r3, r3, #21
   105e0:	0fc9      	lsrs	r1, r1, #31
   105e2:	2400      	movs	r4, #0
   105e4:	42ab      	cmp	r3, r5
   105e6:	dd10      	ble.n	1060a <__aeabi_d2iz+0x36>
   105e8:	4c0f      	ldr	r4, [pc, #60]	; (10628 <__aeabi_d2iz+0x54>)
   105ea:	42a3      	cmp	r3, r4
   105ec:	dc0f      	bgt.n	1060e <__aeabi_d2iz+0x3a>
   105ee:	2480      	movs	r4, #128	; 0x80
   105f0:	4d0e      	ldr	r5, [pc, #56]	; (1062c <__aeabi_d2iz+0x58>)
   105f2:	0364      	lsls	r4, r4, #13
   105f4:	4322      	orrs	r2, r4
   105f6:	1aed      	subs	r5, r5, r3
   105f8:	2d1f      	cmp	r5, #31
   105fa:	dd0b      	ble.n	10614 <__aeabi_d2iz+0x40>
   105fc:	480c      	ldr	r0, [pc, #48]	; (10630 <__aeabi_d2iz+0x5c>)
   105fe:	1ac3      	subs	r3, r0, r3
   10600:	40da      	lsrs	r2, r3
   10602:	4254      	negs	r4, r2
   10604:	2900      	cmp	r1, #0
   10606:	d100      	bne.n	1060a <__aeabi_d2iz+0x36>
   10608:	0014      	movs	r4, r2
   1060a:	0020      	movs	r0, r4
   1060c:	bd30      	pop	{r4, r5, pc}
   1060e:	4b09      	ldr	r3, [pc, #36]	; (10634 <__aeabi_d2iz+0x60>)
   10610:	18cc      	adds	r4, r1, r3
   10612:	e7fa      	b.n	1060a <__aeabi_d2iz+0x36>
   10614:	4c08      	ldr	r4, [pc, #32]	; (10638 <__aeabi_d2iz+0x64>)
   10616:	40e8      	lsrs	r0, r5
   10618:	46a4      	mov	ip, r4
   1061a:	4463      	add	r3, ip
   1061c:	409a      	lsls	r2, r3
   1061e:	4302      	orrs	r2, r0
   10620:	e7ef      	b.n	10602 <__aeabi_d2iz+0x2e>
   10622:	46c0      	nop			; (mov r8, r8)
   10624:	000003fe 	.word	0x000003fe
   10628:	0000041d 	.word	0x0000041d
   1062c:	00000433 	.word	0x00000433
   10630:	00000413 	.word	0x00000413
   10634:	7fffffff 	.word	0x7fffffff
   10638:	fffffbed 	.word	0xfffffbed

0001063c <__aeabi_ui2d>:
   1063c:	b510      	push	{r4, lr}
   1063e:	1e04      	subs	r4, r0, #0
   10640:	d028      	beq.n	10694 <__aeabi_ui2d+0x58>
   10642:	f000 f833 	bl	106ac <__clzsi2>
   10646:	4b15      	ldr	r3, [pc, #84]	; (1069c <__aeabi_ui2d+0x60>)
   10648:	4a15      	ldr	r2, [pc, #84]	; (106a0 <__aeabi_ui2d+0x64>)
   1064a:	1a1b      	subs	r3, r3, r0
   1064c:	1ad2      	subs	r2, r2, r3
   1064e:	2a1f      	cmp	r2, #31
   10650:	dd15      	ble.n	1067e <__aeabi_ui2d+0x42>
   10652:	4a14      	ldr	r2, [pc, #80]	; (106a4 <__aeabi_ui2d+0x68>)
   10654:	1ad2      	subs	r2, r2, r3
   10656:	4094      	lsls	r4, r2
   10658:	2200      	movs	r2, #0
   1065a:	0324      	lsls	r4, r4, #12
   1065c:	055b      	lsls	r3, r3, #21
   1065e:	0b24      	lsrs	r4, r4, #12
   10660:	0d5b      	lsrs	r3, r3, #21
   10662:	2100      	movs	r1, #0
   10664:	0010      	movs	r0, r2
   10666:	0324      	lsls	r4, r4, #12
   10668:	0d0a      	lsrs	r2, r1, #20
   1066a:	0b24      	lsrs	r4, r4, #12
   1066c:	0512      	lsls	r2, r2, #20
   1066e:	4322      	orrs	r2, r4
   10670:	4c0d      	ldr	r4, [pc, #52]	; (106a8 <__aeabi_ui2d+0x6c>)
   10672:	051b      	lsls	r3, r3, #20
   10674:	4022      	ands	r2, r4
   10676:	4313      	orrs	r3, r2
   10678:	005b      	lsls	r3, r3, #1
   1067a:	0859      	lsrs	r1, r3, #1
   1067c:	bd10      	pop	{r4, pc}
   1067e:	0021      	movs	r1, r4
   10680:	4091      	lsls	r1, r2
   10682:	000a      	movs	r2, r1
   10684:	210b      	movs	r1, #11
   10686:	1a08      	subs	r0, r1, r0
   10688:	40c4      	lsrs	r4, r0
   1068a:	055b      	lsls	r3, r3, #21
   1068c:	0324      	lsls	r4, r4, #12
   1068e:	0b24      	lsrs	r4, r4, #12
   10690:	0d5b      	lsrs	r3, r3, #21
   10692:	e7e6      	b.n	10662 <__aeabi_ui2d+0x26>
   10694:	2300      	movs	r3, #0
   10696:	2400      	movs	r4, #0
   10698:	2200      	movs	r2, #0
   1069a:	e7e2      	b.n	10662 <__aeabi_ui2d+0x26>
   1069c:	0000041e 	.word	0x0000041e
   106a0:	00000433 	.word	0x00000433
   106a4:	00000413 	.word	0x00000413
   106a8:	800fffff 	.word	0x800fffff

000106ac <__clzsi2>:
   106ac:	211c      	movs	r1, #28
   106ae:	2301      	movs	r3, #1
   106b0:	041b      	lsls	r3, r3, #16
   106b2:	4298      	cmp	r0, r3
   106b4:	d301      	bcc.n	106ba <__clzsi2+0xe>
   106b6:	0c00      	lsrs	r0, r0, #16
   106b8:	3910      	subs	r1, #16
   106ba:	0a1b      	lsrs	r3, r3, #8
   106bc:	4298      	cmp	r0, r3
   106be:	d301      	bcc.n	106c4 <__clzsi2+0x18>
   106c0:	0a00      	lsrs	r0, r0, #8
   106c2:	3908      	subs	r1, #8
   106c4:	091b      	lsrs	r3, r3, #4
   106c6:	4298      	cmp	r0, r3
   106c8:	d301      	bcc.n	106ce <__clzsi2+0x22>
   106ca:	0900      	lsrs	r0, r0, #4
   106cc:	3904      	subs	r1, #4
   106ce:	a202      	add	r2, pc, #8	; (adr r2, 106d8 <__clzsi2+0x2c>)
   106d0:	5c10      	ldrb	r0, [r2, r0]
   106d2:	1840      	adds	r0, r0, r1
   106d4:	4770      	bx	lr
   106d6:	46c0      	nop			; (mov r8, r8)
   106d8:	02020304 	.word	0x02020304
   106dc:	01010101 	.word	0x01010101
	...

000106e8 <__assert_func>:
   106e8:	b530      	push	{r4, r5, lr}
   106ea:	001c      	movs	r4, r3
   106ec:	4b09      	ldr	r3, [pc, #36]	; (10714 <__assert_func+0x2c>)
   106ee:	0005      	movs	r5, r0
   106f0:	681b      	ldr	r3, [r3, #0]
   106f2:	b085      	sub	sp, #20
   106f4:	68d8      	ldr	r0, [r3, #12]
   106f6:	4b08      	ldr	r3, [pc, #32]	; (10718 <__assert_func+0x30>)
   106f8:	2a00      	cmp	r2, #0
   106fa:	d101      	bne.n	10700 <__assert_func+0x18>
   106fc:	4b07      	ldr	r3, [pc, #28]	; (1071c <__assert_func+0x34>)
   106fe:	001a      	movs	r2, r3
   10700:	9202      	str	r2, [sp, #8]
   10702:	9301      	str	r3, [sp, #4]
   10704:	9100      	str	r1, [sp, #0]
   10706:	002b      	movs	r3, r5
   10708:	0022      	movs	r2, r4
   1070a:	4905      	ldr	r1, [pc, #20]	; (10720 <__assert_func+0x38>)
   1070c:	f000 f818 	bl	10740 <fiprintf>
   10710:	f001 f812 	bl	11738 <abort>
   10714:	200000a4 	.word	0x200000a4
   10718:	00014124 	.word	0x00014124
   1071c:	0001415f 	.word	0x0001415f
   10720:	00014131 	.word	0x00014131

00010724 <__cxa_atexit>:
   10724:	b570      	push	{r4, r5, r6, lr}
   10726:	4c05      	ldr	r4, [pc, #20]	; (1073c <__cxa_atexit+0x18>)
   10728:	0005      	movs	r5, r0
   1072a:	0013      	movs	r3, r2
   1072c:	1e20      	subs	r0, r4, #0
   1072e:	d004      	beq.n	1073a <__cxa_atexit+0x16>
   10730:	000a      	movs	r2, r1
   10732:	2002      	movs	r0, #2
   10734:	0029      	movs	r1, r5
   10736:	e000      	b.n	1073a <__cxa_atexit+0x16>
   10738:	bf00      	nop
   1073a:	bd70      	pop	{r4, r5, r6, pc}
   1073c:	00000000 	.word	0x00000000

00010740 <fiprintf>:
   10740:	b40e      	push	{r1, r2, r3}
   10742:	b503      	push	{r0, r1, lr}
   10744:	0001      	movs	r1, r0
   10746:	ab03      	add	r3, sp, #12
   10748:	4804      	ldr	r0, [pc, #16]	; (1075c <fiprintf+0x1c>)
   1074a:	cb04      	ldmia	r3!, {r2}
   1074c:	6800      	ldr	r0, [r0, #0]
   1074e:	9301      	str	r3, [sp, #4]
   10750:	f000 f940 	bl	109d4 <_vfiprintf_r>
   10754:	b002      	add	sp, #8
   10756:	bc08      	pop	{r3}
   10758:	b003      	add	sp, #12
   1075a:	4718      	bx	r3
   1075c:	200000a4 	.word	0x200000a4

00010760 <__libc_init_array>:
   10760:	b570      	push	{r4, r5, r6, lr}
   10762:	2600      	movs	r6, #0
   10764:	4d0c      	ldr	r5, [pc, #48]	; (10798 <__libc_init_array+0x38>)
   10766:	4c0d      	ldr	r4, [pc, #52]	; (1079c <__libc_init_array+0x3c>)
   10768:	1b64      	subs	r4, r4, r5
   1076a:	10a4      	asrs	r4, r4, #2
   1076c:	42a6      	cmp	r6, r4
   1076e:	d109      	bne.n	10784 <__libc_init_array+0x24>
   10770:	2600      	movs	r6, #0
   10772:	f002 fd2b 	bl	131cc <_init>
   10776:	4d0a      	ldr	r5, [pc, #40]	; (107a0 <__libc_init_array+0x40>)
   10778:	4c0a      	ldr	r4, [pc, #40]	; (107a4 <__libc_init_array+0x44>)
   1077a:	1b64      	subs	r4, r4, r5
   1077c:	10a4      	asrs	r4, r4, #2
   1077e:	42a6      	cmp	r6, r4
   10780:	d105      	bne.n	1078e <__libc_init_array+0x2e>
   10782:	bd70      	pop	{r4, r5, r6, pc}
   10784:	00b3      	lsls	r3, r6, #2
   10786:	58eb      	ldr	r3, [r5, r3]
   10788:	4798      	blx	r3
   1078a:	3601      	adds	r6, #1
   1078c:	e7ee      	b.n	1076c <__libc_init_array+0xc>
   1078e:	00b3      	lsls	r3, r6, #2
   10790:	58eb      	ldr	r3, [r5, r3]
   10792:	4798      	blx	r3
   10794:	3601      	adds	r6, #1
   10796:	e7f2      	b.n	1077e <__libc_init_array+0x1e>
   10798:	20000274 	.word	0x20000274
   1079c:	20000274 	.word	0x20000274
   107a0:	20000274 	.word	0x20000274
   107a4:	20000298 	.word	0x20000298

000107a8 <malloc>:
   107a8:	b510      	push	{r4, lr}
   107aa:	4b03      	ldr	r3, [pc, #12]	; (107b8 <malloc+0x10>)
   107ac:	0001      	movs	r1, r0
   107ae:	6818      	ldr	r0, [r3, #0]
   107b0:	f000 f88a 	bl	108c8 <_malloc_r>
   107b4:	bd10      	pop	{r4, pc}
   107b6:	46c0      	nop			; (mov r8, r8)
   107b8:	200000a4 	.word	0x200000a4

000107bc <free>:
   107bc:	b510      	push	{r4, lr}
   107be:	4b03      	ldr	r3, [pc, #12]	; (107cc <free+0x10>)
   107c0:	0001      	movs	r1, r0
   107c2:	6818      	ldr	r0, [r3, #0]
   107c4:	f000 f836 	bl	10834 <_free_r>
   107c8:	bd10      	pop	{r4, pc}
   107ca:	46c0      	nop			; (mov r8, r8)
   107cc:	200000a4 	.word	0x200000a4

000107d0 <__ascii_mbtowc>:
   107d0:	b082      	sub	sp, #8
   107d2:	2900      	cmp	r1, #0
   107d4:	d100      	bne.n	107d8 <__ascii_mbtowc+0x8>
   107d6:	a901      	add	r1, sp, #4
   107d8:	1e10      	subs	r0, r2, #0
   107da:	d006      	beq.n	107ea <__ascii_mbtowc+0x1a>
   107dc:	2b00      	cmp	r3, #0
   107de:	d006      	beq.n	107ee <__ascii_mbtowc+0x1e>
   107e0:	7813      	ldrb	r3, [r2, #0]
   107e2:	600b      	str	r3, [r1, #0]
   107e4:	7810      	ldrb	r0, [r2, #0]
   107e6:	1e43      	subs	r3, r0, #1
   107e8:	4198      	sbcs	r0, r3
   107ea:	b002      	add	sp, #8
   107ec:	4770      	bx	lr
   107ee:	2002      	movs	r0, #2
   107f0:	4240      	negs	r0, r0
   107f2:	e7fa      	b.n	107ea <__ascii_mbtowc+0x1a>

000107f4 <memcmp>:
   107f4:	b530      	push	{r4, r5, lr}
   107f6:	2400      	movs	r4, #0
   107f8:	42a2      	cmp	r2, r4
   107fa:	d101      	bne.n	10800 <memcmp+0xc>
   107fc:	2000      	movs	r0, #0
   107fe:	e005      	b.n	1080c <memcmp+0x18>
   10800:	5d03      	ldrb	r3, [r0, r4]
   10802:	1c65      	adds	r5, r4, #1
   10804:	5d0c      	ldrb	r4, [r1, r4]
   10806:	42a3      	cmp	r3, r4
   10808:	d001      	beq.n	1080e <memcmp+0x1a>
   1080a:	1b18      	subs	r0, r3, r4
   1080c:	bd30      	pop	{r4, r5, pc}
   1080e:	002c      	movs	r4, r5
   10810:	e7f2      	b.n	107f8 <memcmp+0x4>

00010812 <memcpy>:
   10812:	2300      	movs	r3, #0
   10814:	b510      	push	{r4, lr}
   10816:	429a      	cmp	r2, r3
   10818:	d100      	bne.n	1081c <memcpy+0xa>
   1081a:	bd10      	pop	{r4, pc}
   1081c:	5ccc      	ldrb	r4, [r1, r3]
   1081e:	54c4      	strb	r4, [r0, r3]
   10820:	3301      	adds	r3, #1
   10822:	e7f8      	b.n	10816 <memcpy+0x4>

00010824 <memset>:
   10824:	0003      	movs	r3, r0
   10826:	1882      	adds	r2, r0, r2
   10828:	4293      	cmp	r3, r2
   1082a:	d100      	bne.n	1082e <memset+0xa>
   1082c:	4770      	bx	lr
   1082e:	7019      	strb	r1, [r3, #0]
   10830:	3301      	adds	r3, #1
   10832:	e7f9      	b.n	10828 <memset+0x4>

00010834 <_free_r>:
   10834:	b570      	push	{r4, r5, r6, lr}
   10836:	0005      	movs	r5, r0
   10838:	2900      	cmp	r1, #0
   1083a:	d010      	beq.n	1085e <_free_r+0x2a>
   1083c:	1f0c      	subs	r4, r1, #4
   1083e:	6823      	ldr	r3, [r4, #0]
   10840:	2b00      	cmp	r3, #0
   10842:	da00      	bge.n	10846 <_free_r+0x12>
   10844:	18e4      	adds	r4, r4, r3
   10846:	0028      	movs	r0, r5
   10848:	f001 fffb 	bl	12842 <__malloc_lock>
   1084c:	4a1d      	ldr	r2, [pc, #116]	; (108c4 <_free_r+0x90>)
   1084e:	6813      	ldr	r3, [r2, #0]
   10850:	2b00      	cmp	r3, #0
   10852:	d105      	bne.n	10860 <_free_r+0x2c>
   10854:	6063      	str	r3, [r4, #4]
   10856:	6014      	str	r4, [r2, #0]
   10858:	0028      	movs	r0, r5
   1085a:	f001 fff3 	bl	12844 <__malloc_unlock>
   1085e:	bd70      	pop	{r4, r5, r6, pc}
   10860:	42a3      	cmp	r3, r4
   10862:	d909      	bls.n	10878 <_free_r+0x44>
   10864:	6821      	ldr	r1, [r4, #0]
   10866:	1860      	adds	r0, r4, r1
   10868:	4283      	cmp	r3, r0
   1086a:	d1f3      	bne.n	10854 <_free_r+0x20>
   1086c:	6818      	ldr	r0, [r3, #0]
   1086e:	685b      	ldr	r3, [r3, #4]
   10870:	1841      	adds	r1, r0, r1
   10872:	6021      	str	r1, [r4, #0]
   10874:	e7ee      	b.n	10854 <_free_r+0x20>
   10876:	0013      	movs	r3, r2
   10878:	685a      	ldr	r2, [r3, #4]
   1087a:	2a00      	cmp	r2, #0
   1087c:	d001      	beq.n	10882 <_free_r+0x4e>
   1087e:	42a2      	cmp	r2, r4
   10880:	d9f9      	bls.n	10876 <_free_r+0x42>
   10882:	6819      	ldr	r1, [r3, #0]
   10884:	1858      	adds	r0, r3, r1
   10886:	42a0      	cmp	r0, r4
   10888:	d10b      	bne.n	108a2 <_free_r+0x6e>
   1088a:	6820      	ldr	r0, [r4, #0]
   1088c:	1809      	adds	r1, r1, r0
   1088e:	1858      	adds	r0, r3, r1
   10890:	6019      	str	r1, [r3, #0]
   10892:	4282      	cmp	r2, r0
   10894:	d1e0      	bne.n	10858 <_free_r+0x24>
   10896:	6810      	ldr	r0, [r2, #0]
   10898:	6852      	ldr	r2, [r2, #4]
   1089a:	1841      	adds	r1, r0, r1
   1089c:	6019      	str	r1, [r3, #0]
   1089e:	605a      	str	r2, [r3, #4]
   108a0:	e7da      	b.n	10858 <_free_r+0x24>
   108a2:	42a0      	cmp	r0, r4
   108a4:	d902      	bls.n	108ac <_free_r+0x78>
   108a6:	230c      	movs	r3, #12
   108a8:	602b      	str	r3, [r5, #0]
   108aa:	e7d5      	b.n	10858 <_free_r+0x24>
   108ac:	6821      	ldr	r1, [r4, #0]
   108ae:	1860      	adds	r0, r4, r1
   108b0:	4282      	cmp	r2, r0
   108b2:	d103      	bne.n	108bc <_free_r+0x88>
   108b4:	6810      	ldr	r0, [r2, #0]
   108b6:	6852      	ldr	r2, [r2, #4]
   108b8:	1841      	adds	r1, r0, r1
   108ba:	6021      	str	r1, [r4, #0]
   108bc:	6062      	str	r2, [r4, #4]
   108be:	605c      	str	r4, [r3, #4]
   108c0:	e7ca      	b.n	10858 <_free_r+0x24>
   108c2:	46c0      	nop			; (mov r8, r8)
   108c4:	20000f78 	.word	0x20000f78

000108c8 <_malloc_r>:
   108c8:	2303      	movs	r3, #3
   108ca:	b570      	push	{r4, r5, r6, lr}
   108cc:	1ccd      	adds	r5, r1, #3
   108ce:	439d      	bics	r5, r3
   108d0:	3508      	adds	r5, #8
   108d2:	0006      	movs	r6, r0
   108d4:	2d0c      	cmp	r5, #12
   108d6:	d21e      	bcs.n	10916 <_malloc_r+0x4e>
   108d8:	250c      	movs	r5, #12
   108da:	42a9      	cmp	r1, r5
   108dc:	d81d      	bhi.n	1091a <_malloc_r+0x52>
   108de:	0030      	movs	r0, r6
   108e0:	f001 ffaf 	bl	12842 <__malloc_lock>
   108e4:	4a25      	ldr	r2, [pc, #148]	; (1097c <_malloc_r+0xb4>)
   108e6:	6814      	ldr	r4, [r2, #0]
   108e8:	0021      	movs	r1, r4
   108ea:	2900      	cmp	r1, #0
   108ec:	d119      	bne.n	10922 <_malloc_r+0x5a>
   108ee:	4c24      	ldr	r4, [pc, #144]	; (10980 <_malloc_r+0xb8>)
   108f0:	6823      	ldr	r3, [r4, #0]
   108f2:	2b00      	cmp	r3, #0
   108f4:	d103      	bne.n	108fe <_malloc_r+0x36>
   108f6:	0030      	movs	r0, r6
   108f8:	f000 fe02 	bl	11500 <_sbrk_r>
   108fc:	6020      	str	r0, [r4, #0]
   108fe:	0029      	movs	r1, r5
   10900:	0030      	movs	r0, r6
   10902:	f000 fdfd 	bl	11500 <_sbrk_r>
   10906:	1c43      	adds	r3, r0, #1
   10908:	d12c      	bne.n	10964 <_malloc_r+0x9c>
   1090a:	230c      	movs	r3, #12
   1090c:	0030      	movs	r0, r6
   1090e:	6033      	str	r3, [r6, #0]
   10910:	f001 ff98 	bl	12844 <__malloc_unlock>
   10914:	e003      	b.n	1091e <_malloc_r+0x56>
   10916:	2d00      	cmp	r5, #0
   10918:	dadf      	bge.n	108da <_malloc_r+0x12>
   1091a:	230c      	movs	r3, #12
   1091c:	6033      	str	r3, [r6, #0]
   1091e:	2000      	movs	r0, #0
   10920:	bd70      	pop	{r4, r5, r6, pc}
   10922:	680b      	ldr	r3, [r1, #0]
   10924:	1b5b      	subs	r3, r3, r5
   10926:	d41a      	bmi.n	1095e <_malloc_r+0x96>
   10928:	2b0b      	cmp	r3, #11
   1092a:	d903      	bls.n	10934 <_malloc_r+0x6c>
   1092c:	600b      	str	r3, [r1, #0]
   1092e:	18cc      	adds	r4, r1, r3
   10930:	6025      	str	r5, [r4, #0]
   10932:	e003      	b.n	1093c <_malloc_r+0x74>
   10934:	428c      	cmp	r4, r1
   10936:	d10e      	bne.n	10956 <_malloc_r+0x8e>
   10938:	6863      	ldr	r3, [r4, #4]
   1093a:	6013      	str	r3, [r2, #0]
   1093c:	0030      	movs	r0, r6
   1093e:	f001 ff81 	bl	12844 <__malloc_unlock>
   10942:	0020      	movs	r0, r4
   10944:	2207      	movs	r2, #7
   10946:	300b      	adds	r0, #11
   10948:	1d23      	adds	r3, r4, #4
   1094a:	4390      	bics	r0, r2
   1094c:	1ac3      	subs	r3, r0, r3
   1094e:	d0e7      	beq.n	10920 <_malloc_r+0x58>
   10950:	425a      	negs	r2, r3
   10952:	50e2      	str	r2, [r4, r3]
   10954:	e7e4      	b.n	10920 <_malloc_r+0x58>
   10956:	684b      	ldr	r3, [r1, #4]
   10958:	6063      	str	r3, [r4, #4]
   1095a:	000c      	movs	r4, r1
   1095c:	e7ee      	b.n	1093c <_malloc_r+0x74>
   1095e:	000c      	movs	r4, r1
   10960:	6849      	ldr	r1, [r1, #4]
   10962:	e7c2      	b.n	108ea <_malloc_r+0x22>
   10964:	2303      	movs	r3, #3
   10966:	1cc4      	adds	r4, r0, #3
   10968:	439c      	bics	r4, r3
   1096a:	42a0      	cmp	r0, r4
   1096c:	d0e0      	beq.n	10930 <_malloc_r+0x68>
   1096e:	1a21      	subs	r1, r4, r0
   10970:	0030      	movs	r0, r6
   10972:	f000 fdc5 	bl	11500 <_sbrk_r>
   10976:	1c43      	adds	r3, r0, #1
   10978:	d1da      	bne.n	10930 <_malloc_r+0x68>
   1097a:	e7c6      	b.n	1090a <_malloc_r+0x42>
   1097c:	20000f78 	.word	0x20000f78
   10980:	20000f7c 	.word	0x20000f7c

00010984 <__sfputc_r>:
   10984:	6893      	ldr	r3, [r2, #8]
   10986:	b510      	push	{r4, lr}
   10988:	3b01      	subs	r3, #1
   1098a:	6093      	str	r3, [r2, #8]
   1098c:	2b00      	cmp	r3, #0
   1098e:	da05      	bge.n	1099c <__sfputc_r+0x18>
   10990:	6994      	ldr	r4, [r2, #24]
   10992:	42a3      	cmp	r3, r4
   10994:	db08      	blt.n	109a8 <__sfputc_r+0x24>
   10996:	b2cb      	uxtb	r3, r1
   10998:	2b0a      	cmp	r3, #10
   1099a:	d005      	beq.n	109a8 <__sfputc_r+0x24>
   1099c:	6813      	ldr	r3, [r2, #0]
   1099e:	1c58      	adds	r0, r3, #1
   109a0:	6010      	str	r0, [r2, #0]
   109a2:	7019      	strb	r1, [r3, #0]
   109a4:	b2c8      	uxtb	r0, r1
   109a6:	bd10      	pop	{r4, pc}
   109a8:	f000 fdee 	bl	11588 <__swbuf_r>
   109ac:	e7fb      	b.n	109a6 <__sfputc_r+0x22>

000109ae <__sfputs_r>:
   109ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109b0:	0006      	movs	r6, r0
   109b2:	000f      	movs	r7, r1
   109b4:	0014      	movs	r4, r2
   109b6:	18d5      	adds	r5, r2, r3
   109b8:	42ac      	cmp	r4, r5
   109ba:	d101      	bne.n	109c0 <__sfputs_r+0x12>
   109bc:	2000      	movs	r0, #0
   109be:	e007      	b.n	109d0 <__sfputs_r+0x22>
   109c0:	7821      	ldrb	r1, [r4, #0]
   109c2:	003a      	movs	r2, r7
   109c4:	0030      	movs	r0, r6
   109c6:	f7ff ffdd 	bl	10984 <__sfputc_r>
   109ca:	3401      	adds	r4, #1
   109cc:	1c43      	adds	r3, r0, #1
   109ce:	d1f3      	bne.n	109b8 <__sfputs_r+0xa>
   109d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000109d4 <_vfiprintf_r>:
   109d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   109d6:	b09f      	sub	sp, #124	; 0x7c
   109d8:	0006      	movs	r6, r0
   109da:	000f      	movs	r7, r1
   109dc:	0014      	movs	r4, r2
   109de:	9305      	str	r3, [sp, #20]
   109e0:	2800      	cmp	r0, #0
   109e2:	d004      	beq.n	109ee <_vfiprintf_r+0x1a>
   109e4:	6983      	ldr	r3, [r0, #24]
   109e6:	2b00      	cmp	r3, #0
   109e8:	d101      	bne.n	109ee <_vfiprintf_r+0x1a>
   109ea:	f001 fe11 	bl	12610 <__sinit>
   109ee:	4b7f      	ldr	r3, [pc, #508]	; (10bec <_vfiprintf_r+0x218>)
   109f0:	429f      	cmp	r7, r3
   109f2:	d15c      	bne.n	10aae <_vfiprintf_r+0xda>
   109f4:	6877      	ldr	r7, [r6, #4]
   109f6:	89bb      	ldrh	r3, [r7, #12]
   109f8:	071b      	lsls	r3, r3, #28
   109fa:	d562      	bpl.n	10ac2 <_vfiprintf_r+0xee>
   109fc:	693b      	ldr	r3, [r7, #16]
   109fe:	2b00      	cmp	r3, #0
   10a00:	d05f      	beq.n	10ac2 <_vfiprintf_r+0xee>
   10a02:	2300      	movs	r3, #0
   10a04:	ad06      	add	r5, sp, #24
   10a06:	616b      	str	r3, [r5, #20]
   10a08:	3320      	adds	r3, #32
   10a0a:	766b      	strb	r3, [r5, #25]
   10a0c:	3310      	adds	r3, #16
   10a0e:	76ab      	strb	r3, [r5, #26]
   10a10:	9402      	str	r4, [sp, #8]
   10a12:	9c02      	ldr	r4, [sp, #8]
   10a14:	7823      	ldrb	r3, [r4, #0]
   10a16:	2b00      	cmp	r3, #0
   10a18:	d15d      	bne.n	10ad6 <_vfiprintf_r+0x102>
   10a1a:	9b02      	ldr	r3, [sp, #8]
   10a1c:	1ae3      	subs	r3, r4, r3
   10a1e:	9304      	str	r3, [sp, #16]
   10a20:	d00d      	beq.n	10a3e <_vfiprintf_r+0x6a>
   10a22:	9b04      	ldr	r3, [sp, #16]
   10a24:	9a02      	ldr	r2, [sp, #8]
   10a26:	0039      	movs	r1, r7
   10a28:	0030      	movs	r0, r6
   10a2a:	f7ff ffc0 	bl	109ae <__sfputs_r>
   10a2e:	1c43      	adds	r3, r0, #1
   10a30:	d100      	bne.n	10a34 <_vfiprintf_r+0x60>
   10a32:	e0cc      	b.n	10bce <_vfiprintf_r+0x1fa>
   10a34:	696a      	ldr	r2, [r5, #20]
   10a36:	9b04      	ldr	r3, [sp, #16]
   10a38:	4694      	mov	ip, r2
   10a3a:	4463      	add	r3, ip
   10a3c:	616b      	str	r3, [r5, #20]
   10a3e:	7823      	ldrb	r3, [r4, #0]
   10a40:	2b00      	cmp	r3, #0
   10a42:	d100      	bne.n	10a46 <_vfiprintf_r+0x72>
   10a44:	e0c3      	b.n	10bce <_vfiprintf_r+0x1fa>
   10a46:	2201      	movs	r2, #1
   10a48:	2300      	movs	r3, #0
   10a4a:	4252      	negs	r2, r2
   10a4c:	606a      	str	r2, [r5, #4]
   10a4e:	a902      	add	r1, sp, #8
   10a50:	3254      	adds	r2, #84	; 0x54
   10a52:	1852      	adds	r2, r2, r1
   10a54:	3401      	adds	r4, #1
   10a56:	602b      	str	r3, [r5, #0]
   10a58:	60eb      	str	r3, [r5, #12]
   10a5a:	60ab      	str	r3, [r5, #8]
   10a5c:	7013      	strb	r3, [r2, #0]
   10a5e:	65ab      	str	r3, [r5, #88]	; 0x58
   10a60:	7821      	ldrb	r1, [r4, #0]
   10a62:	2205      	movs	r2, #5
   10a64:	4862      	ldr	r0, [pc, #392]	; (10bf0 <_vfiprintf_r+0x21c>)
   10a66:	f001 fee1 	bl	1282c <memchr>
   10a6a:	1c63      	adds	r3, r4, #1
   10a6c:	469c      	mov	ip, r3
   10a6e:	2800      	cmp	r0, #0
   10a70:	d135      	bne.n	10ade <_vfiprintf_r+0x10a>
   10a72:	6829      	ldr	r1, [r5, #0]
   10a74:	06cb      	lsls	r3, r1, #27
   10a76:	d504      	bpl.n	10a82 <_vfiprintf_r+0xae>
   10a78:	2353      	movs	r3, #83	; 0x53
   10a7a:	aa02      	add	r2, sp, #8
   10a7c:	3020      	adds	r0, #32
   10a7e:	189b      	adds	r3, r3, r2
   10a80:	7018      	strb	r0, [r3, #0]
   10a82:	070b      	lsls	r3, r1, #28
   10a84:	d504      	bpl.n	10a90 <_vfiprintf_r+0xbc>
   10a86:	2353      	movs	r3, #83	; 0x53
   10a88:	202b      	movs	r0, #43	; 0x2b
   10a8a:	aa02      	add	r2, sp, #8
   10a8c:	189b      	adds	r3, r3, r2
   10a8e:	7018      	strb	r0, [r3, #0]
   10a90:	7823      	ldrb	r3, [r4, #0]
   10a92:	2b2a      	cmp	r3, #42	; 0x2a
   10a94:	d02c      	beq.n	10af0 <_vfiprintf_r+0x11c>
   10a96:	2000      	movs	r0, #0
   10a98:	210a      	movs	r1, #10
   10a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a9c:	7822      	ldrb	r2, [r4, #0]
   10a9e:	3a30      	subs	r2, #48	; 0x30
   10aa0:	2a09      	cmp	r2, #9
   10aa2:	d800      	bhi.n	10aa6 <_vfiprintf_r+0xd2>
   10aa4:	e06b      	b.n	10b7e <_vfiprintf_r+0x1aa>
   10aa6:	2800      	cmp	r0, #0
   10aa8:	d02a      	beq.n	10b00 <_vfiprintf_r+0x12c>
   10aaa:	9309      	str	r3, [sp, #36]	; 0x24
   10aac:	e028      	b.n	10b00 <_vfiprintf_r+0x12c>
   10aae:	4b51      	ldr	r3, [pc, #324]	; (10bf4 <_vfiprintf_r+0x220>)
   10ab0:	429f      	cmp	r7, r3
   10ab2:	d101      	bne.n	10ab8 <_vfiprintf_r+0xe4>
   10ab4:	68b7      	ldr	r7, [r6, #8]
   10ab6:	e79e      	b.n	109f6 <_vfiprintf_r+0x22>
   10ab8:	4b4f      	ldr	r3, [pc, #316]	; (10bf8 <_vfiprintf_r+0x224>)
   10aba:	429f      	cmp	r7, r3
   10abc:	d19b      	bne.n	109f6 <_vfiprintf_r+0x22>
   10abe:	68f7      	ldr	r7, [r6, #12]
   10ac0:	e799      	b.n	109f6 <_vfiprintf_r+0x22>
   10ac2:	0039      	movs	r1, r7
   10ac4:	0030      	movs	r0, r6
   10ac6:	f000 fdc1 	bl	1164c <__swsetup_r>
   10aca:	2800      	cmp	r0, #0
   10acc:	d099      	beq.n	10a02 <_vfiprintf_r+0x2e>
   10ace:	2001      	movs	r0, #1
   10ad0:	4240      	negs	r0, r0
   10ad2:	b01f      	add	sp, #124	; 0x7c
   10ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ad6:	2b25      	cmp	r3, #37	; 0x25
   10ad8:	d09f      	beq.n	10a1a <_vfiprintf_r+0x46>
   10ada:	3401      	adds	r4, #1
   10adc:	e79a      	b.n	10a14 <_vfiprintf_r+0x40>
   10ade:	4b44      	ldr	r3, [pc, #272]	; (10bf0 <_vfiprintf_r+0x21c>)
   10ae0:	6829      	ldr	r1, [r5, #0]
   10ae2:	1ac0      	subs	r0, r0, r3
   10ae4:	2301      	movs	r3, #1
   10ae6:	4083      	lsls	r3, r0
   10ae8:	430b      	orrs	r3, r1
   10aea:	602b      	str	r3, [r5, #0]
   10aec:	4664      	mov	r4, ip
   10aee:	e7b7      	b.n	10a60 <_vfiprintf_r+0x8c>
   10af0:	9b05      	ldr	r3, [sp, #20]
   10af2:	1d18      	adds	r0, r3, #4
   10af4:	681b      	ldr	r3, [r3, #0]
   10af6:	9005      	str	r0, [sp, #20]
   10af8:	2b00      	cmp	r3, #0
   10afa:	db3a      	blt.n	10b72 <_vfiprintf_r+0x19e>
   10afc:	9309      	str	r3, [sp, #36]	; 0x24
   10afe:	4664      	mov	r4, ip
   10b00:	7823      	ldrb	r3, [r4, #0]
   10b02:	2b2e      	cmp	r3, #46	; 0x2e
   10b04:	d10b      	bne.n	10b1e <_vfiprintf_r+0x14a>
   10b06:	7863      	ldrb	r3, [r4, #1]
   10b08:	1c62      	adds	r2, r4, #1
   10b0a:	2b2a      	cmp	r3, #42	; 0x2a
   10b0c:	d13f      	bne.n	10b8e <_vfiprintf_r+0x1ba>
   10b0e:	9b05      	ldr	r3, [sp, #20]
   10b10:	3402      	adds	r4, #2
   10b12:	1d1a      	adds	r2, r3, #4
   10b14:	681b      	ldr	r3, [r3, #0]
   10b16:	9205      	str	r2, [sp, #20]
   10b18:	2b00      	cmp	r3, #0
   10b1a:	db35      	blt.n	10b88 <_vfiprintf_r+0x1b4>
   10b1c:	9307      	str	r3, [sp, #28]
   10b1e:	7821      	ldrb	r1, [r4, #0]
   10b20:	2203      	movs	r2, #3
   10b22:	4836      	ldr	r0, [pc, #216]	; (10bfc <_vfiprintf_r+0x228>)
   10b24:	f001 fe82 	bl	1282c <memchr>
   10b28:	2800      	cmp	r0, #0
   10b2a:	d007      	beq.n	10b3c <_vfiprintf_r+0x168>
   10b2c:	4b33      	ldr	r3, [pc, #204]	; (10bfc <_vfiprintf_r+0x228>)
   10b2e:	682a      	ldr	r2, [r5, #0]
   10b30:	1ac0      	subs	r0, r0, r3
   10b32:	2340      	movs	r3, #64	; 0x40
   10b34:	4083      	lsls	r3, r0
   10b36:	4313      	orrs	r3, r2
   10b38:	602b      	str	r3, [r5, #0]
   10b3a:	3401      	adds	r4, #1
   10b3c:	7821      	ldrb	r1, [r4, #0]
   10b3e:	1c63      	adds	r3, r4, #1
   10b40:	2206      	movs	r2, #6
   10b42:	482f      	ldr	r0, [pc, #188]	; (10c00 <_vfiprintf_r+0x22c>)
   10b44:	9302      	str	r3, [sp, #8]
   10b46:	7629      	strb	r1, [r5, #24]
   10b48:	f001 fe70 	bl	1282c <memchr>
   10b4c:	2800      	cmp	r0, #0
   10b4e:	d044      	beq.n	10bda <_vfiprintf_r+0x206>
   10b50:	4b2c      	ldr	r3, [pc, #176]	; (10c04 <_vfiprintf_r+0x230>)
   10b52:	2b00      	cmp	r3, #0
   10b54:	d12f      	bne.n	10bb6 <_vfiprintf_r+0x1e2>
   10b56:	6829      	ldr	r1, [r5, #0]
   10b58:	9b05      	ldr	r3, [sp, #20]
   10b5a:	2207      	movs	r2, #7
   10b5c:	05c9      	lsls	r1, r1, #23
   10b5e:	d528      	bpl.n	10bb2 <_vfiprintf_r+0x1de>
   10b60:	189b      	adds	r3, r3, r2
   10b62:	4393      	bics	r3, r2
   10b64:	3308      	adds	r3, #8
   10b66:	9305      	str	r3, [sp, #20]
   10b68:	696b      	ldr	r3, [r5, #20]
   10b6a:	9a03      	ldr	r2, [sp, #12]
   10b6c:	189b      	adds	r3, r3, r2
   10b6e:	616b      	str	r3, [r5, #20]
   10b70:	e74f      	b.n	10a12 <_vfiprintf_r+0x3e>
   10b72:	425b      	negs	r3, r3
   10b74:	60eb      	str	r3, [r5, #12]
   10b76:	2302      	movs	r3, #2
   10b78:	430b      	orrs	r3, r1
   10b7a:	602b      	str	r3, [r5, #0]
   10b7c:	e7bf      	b.n	10afe <_vfiprintf_r+0x12a>
   10b7e:	434b      	muls	r3, r1
   10b80:	3401      	adds	r4, #1
   10b82:	189b      	adds	r3, r3, r2
   10b84:	2001      	movs	r0, #1
   10b86:	e789      	b.n	10a9c <_vfiprintf_r+0xc8>
   10b88:	2301      	movs	r3, #1
   10b8a:	425b      	negs	r3, r3
   10b8c:	e7c6      	b.n	10b1c <_vfiprintf_r+0x148>
   10b8e:	2300      	movs	r3, #0
   10b90:	0014      	movs	r4, r2
   10b92:	200a      	movs	r0, #10
   10b94:	001a      	movs	r2, r3
   10b96:	606b      	str	r3, [r5, #4]
   10b98:	7821      	ldrb	r1, [r4, #0]
   10b9a:	3930      	subs	r1, #48	; 0x30
   10b9c:	2909      	cmp	r1, #9
   10b9e:	d903      	bls.n	10ba8 <_vfiprintf_r+0x1d4>
   10ba0:	2b00      	cmp	r3, #0
   10ba2:	d0bc      	beq.n	10b1e <_vfiprintf_r+0x14a>
   10ba4:	9207      	str	r2, [sp, #28]
   10ba6:	e7ba      	b.n	10b1e <_vfiprintf_r+0x14a>
   10ba8:	4342      	muls	r2, r0
   10baa:	3401      	adds	r4, #1
   10bac:	1852      	adds	r2, r2, r1
   10bae:	2301      	movs	r3, #1
   10bb0:	e7f2      	b.n	10b98 <_vfiprintf_r+0x1c4>
   10bb2:	3307      	adds	r3, #7
   10bb4:	e7d5      	b.n	10b62 <_vfiprintf_r+0x18e>
   10bb6:	ab05      	add	r3, sp, #20
   10bb8:	9300      	str	r3, [sp, #0]
   10bba:	003a      	movs	r2, r7
   10bbc:	4b12      	ldr	r3, [pc, #72]	; (10c08 <_vfiprintf_r+0x234>)
   10bbe:	0029      	movs	r1, r5
   10bc0:	0030      	movs	r0, r6
   10bc2:	f000 f8bf 	bl	10d44 <_printf_float>
   10bc6:	9003      	str	r0, [sp, #12]
   10bc8:	9b03      	ldr	r3, [sp, #12]
   10bca:	3301      	adds	r3, #1
   10bcc:	d1cc      	bne.n	10b68 <_vfiprintf_r+0x194>
   10bce:	89bb      	ldrh	r3, [r7, #12]
   10bd0:	065b      	lsls	r3, r3, #25
   10bd2:	d500      	bpl.n	10bd6 <_vfiprintf_r+0x202>
   10bd4:	e77b      	b.n	10ace <_vfiprintf_r+0xfa>
   10bd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10bd8:	e77b      	b.n	10ad2 <_vfiprintf_r+0xfe>
   10bda:	ab05      	add	r3, sp, #20
   10bdc:	9300      	str	r3, [sp, #0]
   10bde:	003a      	movs	r2, r7
   10be0:	4b09      	ldr	r3, [pc, #36]	; (10c08 <_vfiprintf_r+0x234>)
   10be2:	0029      	movs	r1, r5
   10be4:	0030      	movs	r0, r6
   10be6:	f000 fb67 	bl	112b8 <_printf_i>
   10bea:	e7ec      	b.n	10bc6 <_vfiprintf_r+0x1f2>
   10bec:	000142e4 	.word	0x000142e4
   10bf0:	0001416e 	.word	0x0001416e
   10bf4:	00014304 	.word	0x00014304
   10bf8:	000142c4 	.word	0x000142c4
   10bfc:	00014174 	.word	0x00014174
   10c00:	00014178 	.word	0x00014178
   10c04:	00010d45 	.word	0x00010d45
   10c08:	000109af 	.word	0x000109af

00010c0c <__cvt>:
   10c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c0e:	b08b      	sub	sp, #44	; 0x2c
   10c10:	0014      	movs	r4, r2
   10c12:	1e1d      	subs	r5, r3, #0
   10c14:	9912      	ldr	r1, [sp, #72]	; 0x48
   10c16:	da53      	bge.n	10cc0 <__cvt+0xb4>
   10c18:	2480      	movs	r4, #128	; 0x80
   10c1a:	0624      	lsls	r4, r4, #24
   10c1c:	191b      	adds	r3, r3, r4
   10c1e:	001d      	movs	r5, r3
   10c20:	0014      	movs	r4, r2
   10c22:	232d      	movs	r3, #45	; 0x2d
   10c24:	700b      	strb	r3, [r1, #0]
   10c26:	2320      	movs	r3, #32
   10c28:	9e14      	ldr	r6, [sp, #80]	; 0x50
   10c2a:	2203      	movs	r2, #3
   10c2c:	439e      	bics	r6, r3
   10c2e:	2e46      	cmp	r6, #70	; 0x46
   10c30:	d007      	beq.n	10c42 <__cvt+0x36>
   10c32:	0033      	movs	r3, r6
   10c34:	3b45      	subs	r3, #69	; 0x45
   10c36:	4259      	negs	r1, r3
   10c38:	414b      	adcs	r3, r1
   10c3a:	9910      	ldr	r1, [sp, #64]	; 0x40
   10c3c:	3a01      	subs	r2, #1
   10c3e:	18cb      	adds	r3, r1, r3
   10c40:	9310      	str	r3, [sp, #64]	; 0x40
   10c42:	ab09      	add	r3, sp, #36	; 0x24
   10c44:	9304      	str	r3, [sp, #16]
   10c46:	ab08      	add	r3, sp, #32
   10c48:	9303      	str	r3, [sp, #12]
   10c4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10c4c:	9200      	str	r2, [sp, #0]
   10c4e:	9302      	str	r3, [sp, #8]
   10c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10c52:	0022      	movs	r2, r4
   10c54:	9301      	str	r3, [sp, #4]
   10c56:	002b      	movs	r3, r5
   10c58:	f000 fdfa 	bl	11850 <_dtoa_r>
   10c5c:	0007      	movs	r7, r0
   10c5e:	2e47      	cmp	r6, #71	; 0x47
   10c60:	d102      	bne.n	10c68 <__cvt+0x5c>
   10c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10c64:	07db      	lsls	r3, r3, #31
   10c66:	d524      	bpl.n	10cb2 <__cvt+0xa6>
   10c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10c6a:	18fb      	adds	r3, r7, r3
   10c6c:	9307      	str	r3, [sp, #28]
   10c6e:	2e46      	cmp	r6, #70	; 0x46
   10c70:	d114      	bne.n	10c9c <__cvt+0x90>
   10c72:	783b      	ldrb	r3, [r7, #0]
   10c74:	2b30      	cmp	r3, #48	; 0x30
   10c76:	d10c      	bne.n	10c92 <__cvt+0x86>
   10c78:	2200      	movs	r2, #0
   10c7a:	2300      	movs	r3, #0
   10c7c:	0020      	movs	r0, r4
   10c7e:	0029      	movs	r1, r5
   10c80:	f7fd ff80 	bl	eb84 <__aeabi_dcmpeq>
   10c84:	2800      	cmp	r0, #0
   10c86:	d104      	bne.n	10c92 <__cvt+0x86>
   10c88:	2301      	movs	r3, #1
   10c8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10c8c:	1a9b      	subs	r3, r3, r2
   10c8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10c90:	6013      	str	r3, [r2, #0]
   10c92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10c94:	9a07      	ldr	r2, [sp, #28]
   10c96:	681b      	ldr	r3, [r3, #0]
   10c98:	18d3      	adds	r3, r2, r3
   10c9a:	9307      	str	r3, [sp, #28]
   10c9c:	2200      	movs	r2, #0
   10c9e:	2300      	movs	r3, #0
   10ca0:	0020      	movs	r0, r4
   10ca2:	0029      	movs	r1, r5
   10ca4:	f7fd ff6e 	bl	eb84 <__aeabi_dcmpeq>
   10ca8:	2230      	movs	r2, #48	; 0x30
   10caa:	2800      	cmp	r0, #0
   10cac:	d00d      	beq.n	10cca <__cvt+0xbe>
   10cae:	9b07      	ldr	r3, [sp, #28]
   10cb0:	9309      	str	r3, [sp, #36]	; 0x24
   10cb2:	0038      	movs	r0, r7
   10cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10cb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10cb8:	1bdb      	subs	r3, r3, r7
   10cba:	6013      	str	r3, [r2, #0]
   10cbc:	b00b      	add	sp, #44	; 0x2c
   10cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cc0:	2300      	movs	r3, #0
   10cc2:	e7af      	b.n	10c24 <__cvt+0x18>
   10cc4:	1c59      	adds	r1, r3, #1
   10cc6:	9109      	str	r1, [sp, #36]	; 0x24
   10cc8:	701a      	strb	r2, [r3, #0]
   10cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ccc:	9907      	ldr	r1, [sp, #28]
   10cce:	4299      	cmp	r1, r3
   10cd0:	d8f8      	bhi.n	10cc4 <__cvt+0xb8>
   10cd2:	e7ee      	b.n	10cb2 <__cvt+0xa6>

00010cd4 <__exponent>:
   10cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cd6:	232b      	movs	r3, #43	; 0x2b
   10cd8:	b085      	sub	sp, #20
   10cda:	0007      	movs	r7, r0
   10cdc:	000c      	movs	r4, r1
   10cde:	7002      	strb	r2, [r0, #0]
   10ce0:	1c86      	adds	r6, r0, #2
   10ce2:	2900      	cmp	r1, #0
   10ce4:	da01      	bge.n	10cea <__exponent+0x16>
   10ce6:	232d      	movs	r3, #45	; 0x2d
   10ce8:	424c      	negs	r4, r1
   10cea:	707b      	strb	r3, [r7, #1]
   10cec:	2c09      	cmp	r4, #9
   10cee:	dd23      	ble.n	10d38 <__exponent+0x64>
   10cf0:	ab02      	add	r3, sp, #8
   10cf2:	1ddd      	adds	r5, r3, #7
   10cf4:	1e6b      	subs	r3, r5, #1
   10cf6:	0020      	movs	r0, r4
   10cf8:	210a      	movs	r1, #10
   10cfa:	9301      	str	r3, [sp, #4]
   10cfc:	f7fd ff2c 	bl	eb58 <__aeabi_idivmod>
   10d00:	1e6b      	subs	r3, r5, #1
   10d02:	3130      	adds	r1, #48	; 0x30
   10d04:	7019      	strb	r1, [r3, #0]
   10d06:	0020      	movs	r0, r4
   10d08:	210a      	movs	r1, #10
   10d0a:	f7fd fe3f 	bl	e98c <__divsi3>
   10d0e:	0004      	movs	r4, r0
   10d10:	2809      	cmp	r0, #9
   10d12:	dc0a      	bgt.n	10d2a <__exponent+0x56>
   10d14:	3d02      	subs	r5, #2
   10d16:	3430      	adds	r4, #48	; 0x30
   10d18:	702c      	strb	r4, [r5, #0]
   10d1a:	ab02      	add	r3, sp, #8
   10d1c:	3307      	adds	r3, #7
   10d1e:	0030      	movs	r0, r6
   10d20:	42ab      	cmp	r3, r5
   10d22:	d804      	bhi.n	10d2e <__exponent+0x5a>
   10d24:	1bc0      	subs	r0, r0, r7
   10d26:	b005      	add	sp, #20
   10d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d2a:	9d01      	ldr	r5, [sp, #4]
   10d2c:	e7e2      	b.n	10cf4 <__exponent+0x20>
   10d2e:	782b      	ldrb	r3, [r5, #0]
   10d30:	3501      	adds	r5, #1
   10d32:	7033      	strb	r3, [r6, #0]
   10d34:	3601      	adds	r6, #1
   10d36:	e7f0      	b.n	10d1a <__exponent+0x46>
   10d38:	2330      	movs	r3, #48	; 0x30
   10d3a:	18e4      	adds	r4, r4, r3
   10d3c:	7033      	strb	r3, [r6, #0]
   10d3e:	1cb0      	adds	r0, r6, #2
   10d40:	7074      	strb	r4, [r6, #1]
   10d42:	e7ef      	b.n	10d24 <__exponent+0x50>

00010d44 <_printf_float>:
   10d44:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d46:	b095      	sub	sp, #84	; 0x54
   10d48:	000c      	movs	r4, r1
   10d4a:	920a      	str	r2, [sp, #40]	; 0x28
   10d4c:	930b      	str	r3, [sp, #44]	; 0x2c
   10d4e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   10d50:	9009      	str	r0, [sp, #36]	; 0x24
   10d52:	f001 fcf3 	bl	1273c <_localeconv_r>
   10d56:	6803      	ldr	r3, [r0, #0]
   10d58:	0018      	movs	r0, r3
   10d5a:	930d      	str	r3, [sp, #52]	; 0x34
   10d5c:	f000 fbf8 	bl	11550 <strlen>
   10d60:	2300      	movs	r3, #0
   10d62:	9312      	str	r3, [sp, #72]	; 0x48
   10d64:	6823      	ldr	r3, [r4, #0]
   10d66:	900e      	str	r0, [sp, #56]	; 0x38
   10d68:	930c      	str	r3, [sp, #48]	; 0x30
   10d6a:	990c      	ldr	r1, [sp, #48]	; 0x30
   10d6c:	7e27      	ldrb	r7, [r4, #24]
   10d6e:	682b      	ldr	r3, [r5, #0]
   10d70:	2207      	movs	r2, #7
   10d72:	05c9      	lsls	r1, r1, #23
   10d74:	d547      	bpl.n	10e06 <_printf_float+0xc2>
   10d76:	189b      	adds	r3, r3, r2
   10d78:	4393      	bics	r3, r2
   10d7a:	001a      	movs	r2, r3
   10d7c:	3208      	adds	r2, #8
   10d7e:	602a      	str	r2, [r5, #0]
   10d80:	681a      	ldr	r2, [r3, #0]
   10d82:	685b      	ldr	r3, [r3, #4]
   10d84:	64a2      	str	r2, [r4, #72]	; 0x48
   10d86:	64e3      	str	r3, [r4, #76]	; 0x4c
   10d88:	2201      	movs	r2, #1
   10d8a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   10d8c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   10d8e:	006b      	lsls	r3, r5, #1
   10d90:	085b      	lsrs	r3, r3, #1
   10d92:	930f      	str	r3, [sp, #60]	; 0x3c
   10d94:	4252      	negs	r2, r2
   10d96:	4ba7      	ldr	r3, [pc, #668]	; (11034 <_printf_float+0x2f0>)
   10d98:	0030      	movs	r0, r6
   10d9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10d9c:	f7ff fbfa 	bl	10594 <__aeabi_dcmpun>
   10da0:	2800      	cmp	r0, #0
   10da2:	d000      	beq.n	10da6 <_printf_float+0x62>
   10da4:	e206      	b.n	111b4 <_printf_float+0x470>
   10da6:	2201      	movs	r2, #1
   10da8:	4ba2      	ldr	r3, [pc, #648]	; (11034 <_printf_float+0x2f0>)
   10daa:	4252      	negs	r2, r2
   10dac:	0030      	movs	r0, r6
   10dae:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10db0:	f7fd fef8 	bl	eba4 <__aeabi_dcmple>
   10db4:	2800      	cmp	r0, #0
   10db6:	d000      	beq.n	10dba <_printf_float+0x76>
   10db8:	e1fc      	b.n	111b4 <_printf_float+0x470>
   10dba:	2200      	movs	r2, #0
   10dbc:	2300      	movs	r3, #0
   10dbe:	0030      	movs	r0, r6
   10dc0:	0029      	movs	r1, r5
   10dc2:	f7fd fee5 	bl	eb90 <__aeabi_dcmplt>
   10dc6:	2800      	cmp	r0, #0
   10dc8:	d003      	beq.n	10dd2 <_printf_float+0x8e>
   10dca:	0023      	movs	r3, r4
   10dcc:	222d      	movs	r2, #45	; 0x2d
   10dce:	3343      	adds	r3, #67	; 0x43
   10dd0:	701a      	strb	r2, [r3, #0]
   10dd2:	4d99      	ldr	r5, [pc, #612]	; (11038 <_printf_float+0x2f4>)
   10dd4:	2f47      	cmp	r7, #71	; 0x47
   10dd6:	d800      	bhi.n	10dda <_printf_float+0x96>
   10dd8:	4d98      	ldr	r5, [pc, #608]	; (1103c <_printf_float+0x2f8>)
   10dda:	2303      	movs	r3, #3
   10ddc:	2600      	movs	r6, #0
   10dde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10de0:	6123      	str	r3, [r4, #16]
   10de2:	3301      	adds	r3, #1
   10de4:	439a      	bics	r2, r3
   10de6:	6022      	str	r2, [r4, #0]
   10de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10dea:	aa13      	add	r2, sp, #76	; 0x4c
   10dec:	9300      	str	r3, [sp, #0]
   10dee:	0021      	movs	r1, r4
   10df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10df2:	9809      	ldr	r0, [sp, #36]	; 0x24
   10df4:	f000 f9f2 	bl	111dc <_printf_common>
   10df8:	1c43      	adds	r3, r0, #1
   10dfa:	d000      	beq.n	10dfe <_printf_float+0xba>
   10dfc:	e09c      	b.n	10f38 <_printf_float+0x1f4>
   10dfe:	2001      	movs	r0, #1
   10e00:	4240      	negs	r0, r0
   10e02:	b015      	add	sp, #84	; 0x54
   10e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e06:	3307      	adds	r3, #7
   10e08:	e7b6      	b.n	10d78 <_printf_float+0x34>
   10e0a:	2380      	movs	r3, #128	; 0x80
   10e0c:	6862      	ldr	r2, [r4, #4]
   10e0e:	00db      	lsls	r3, r3, #3
   10e10:	1c51      	adds	r1, r2, #1
   10e12:	d145      	bne.n	10ea0 <_printf_float+0x15c>
   10e14:	3207      	adds	r2, #7
   10e16:	6062      	str	r2, [r4, #4]
   10e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10e1a:	2100      	movs	r1, #0
   10e1c:	4313      	orrs	r3, r2
   10e1e:	aa12      	add	r2, sp, #72	; 0x48
   10e20:	9205      	str	r2, [sp, #20]
   10e22:	aa11      	add	r2, sp, #68	; 0x44
   10e24:	9203      	str	r2, [sp, #12]
   10e26:	2223      	movs	r2, #35	; 0x23
   10e28:	6023      	str	r3, [r4, #0]
   10e2a:	9106      	str	r1, [sp, #24]
   10e2c:	9301      	str	r3, [sp, #4]
   10e2e:	a908      	add	r1, sp, #32
   10e30:	6863      	ldr	r3, [r4, #4]
   10e32:	1852      	adds	r2, r2, r1
   10e34:	9202      	str	r2, [sp, #8]
   10e36:	9300      	str	r3, [sp, #0]
   10e38:	0032      	movs	r2, r6
   10e3a:	002b      	movs	r3, r5
   10e3c:	9704      	str	r7, [sp, #16]
   10e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e40:	f7ff fee4 	bl	10c0c <__cvt>
   10e44:	2320      	movs	r3, #32
   10e46:	003a      	movs	r2, r7
   10e48:	0005      	movs	r5, r0
   10e4a:	439a      	bics	r2, r3
   10e4c:	2a47      	cmp	r2, #71	; 0x47
   10e4e:	d107      	bne.n	10e60 <_printf_float+0x11c>
   10e50:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e52:	1cda      	adds	r2, r3, #3
   10e54:	db02      	blt.n	10e5c <_printf_float+0x118>
   10e56:	6862      	ldr	r2, [r4, #4]
   10e58:	4293      	cmp	r3, r2
   10e5a:	dd5b      	ble.n	10f14 <_printf_float+0x1d0>
   10e5c:	3f02      	subs	r7, #2
   10e5e:	b2ff      	uxtb	r7, r7
   10e60:	9911      	ldr	r1, [sp, #68]	; 0x44
   10e62:	2f65      	cmp	r7, #101	; 0x65
   10e64:	d83b      	bhi.n	10ede <_printf_float+0x19a>
   10e66:	0020      	movs	r0, r4
   10e68:	3901      	subs	r1, #1
   10e6a:	003a      	movs	r2, r7
   10e6c:	3050      	adds	r0, #80	; 0x50
   10e6e:	9111      	str	r1, [sp, #68]	; 0x44
   10e70:	f7ff ff30 	bl	10cd4 <__exponent>
   10e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10e76:	0006      	movs	r6, r0
   10e78:	1883      	adds	r3, r0, r2
   10e7a:	6123      	str	r3, [r4, #16]
   10e7c:	2a01      	cmp	r2, #1
   10e7e:	dc02      	bgt.n	10e86 <_printf_float+0x142>
   10e80:	6822      	ldr	r2, [r4, #0]
   10e82:	07d2      	lsls	r2, r2, #31
   10e84:	d501      	bpl.n	10e8a <_printf_float+0x146>
   10e86:	3301      	adds	r3, #1
   10e88:	6123      	str	r3, [r4, #16]
   10e8a:	2323      	movs	r3, #35	; 0x23
   10e8c:	aa08      	add	r2, sp, #32
   10e8e:	189b      	adds	r3, r3, r2
   10e90:	781b      	ldrb	r3, [r3, #0]
   10e92:	2b00      	cmp	r3, #0
   10e94:	d0a8      	beq.n	10de8 <_printf_float+0xa4>
   10e96:	0023      	movs	r3, r4
   10e98:	222d      	movs	r2, #45	; 0x2d
   10e9a:	3343      	adds	r3, #67	; 0x43
   10e9c:	701a      	strb	r2, [r3, #0]
   10e9e:	e7a3      	b.n	10de8 <_printf_float+0xa4>
   10ea0:	2f67      	cmp	r7, #103	; 0x67
   10ea2:	d001      	beq.n	10ea8 <_printf_float+0x164>
   10ea4:	2f47      	cmp	r7, #71	; 0x47
   10ea6:	d1b7      	bne.n	10e18 <_printf_float+0xd4>
   10ea8:	2a00      	cmp	r2, #0
   10eaa:	d016      	beq.n	10eda <_printf_float+0x196>
   10eac:	990c      	ldr	r1, [sp, #48]	; 0x30
   10eae:	a808      	add	r0, sp, #32
   10eb0:	430b      	orrs	r3, r1
   10eb2:	2100      	movs	r1, #0
   10eb4:	9106      	str	r1, [sp, #24]
   10eb6:	a912      	add	r1, sp, #72	; 0x48
   10eb8:	9105      	str	r1, [sp, #20]
   10eba:	a911      	add	r1, sp, #68	; 0x44
   10ebc:	9103      	str	r1, [sp, #12]
   10ebe:	2123      	movs	r1, #35	; 0x23
   10ec0:	1809      	adds	r1, r1, r0
   10ec2:	6023      	str	r3, [r4, #0]
   10ec4:	9301      	str	r3, [sp, #4]
   10ec6:	9200      	str	r2, [sp, #0]
   10ec8:	002b      	movs	r3, r5
   10eca:	9704      	str	r7, [sp, #16]
   10ecc:	9102      	str	r1, [sp, #8]
   10ece:	0032      	movs	r2, r6
   10ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
   10ed2:	f7ff fe9b 	bl	10c0c <__cvt>
   10ed6:	0005      	movs	r5, r0
   10ed8:	e7ba      	b.n	10e50 <_printf_float+0x10c>
   10eda:	2201      	movs	r2, #1
   10edc:	e79b      	b.n	10e16 <_printf_float+0xd2>
   10ede:	2f66      	cmp	r7, #102	; 0x66
   10ee0:	d119      	bne.n	10f16 <_printf_float+0x1d2>
   10ee2:	6863      	ldr	r3, [r4, #4]
   10ee4:	2900      	cmp	r1, #0
   10ee6:	dd0c      	ble.n	10f02 <_printf_float+0x1be>
   10ee8:	6121      	str	r1, [r4, #16]
   10eea:	2b00      	cmp	r3, #0
   10eec:	d102      	bne.n	10ef4 <_printf_float+0x1b0>
   10eee:	6822      	ldr	r2, [r4, #0]
   10ef0:	07d2      	lsls	r2, r2, #31
   10ef2:	d502      	bpl.n	10efa <_printf_float+0x1b6>
   10ef4:	3301      	adds	r3, #1
   10ef6:	185b      	adds	r3, r3, r1
   10ef8:	6123      	str	r3, [r4, #16]
   10efa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10efc:	2600      	movs	r6, #0
   10efe:	65a3      	str	r3, [r4, #88]	; 0x58
   10f00:	e7c3      	b.n	10e8a <_printf_float+0x146>
   10f02:	2b00      	cmp	r3, #0
   10f04:	d103      	bne.n	10f0e <_printf_float+0x1ca>
   10f06:	2201      	movs	r2, #1
   10f08:	6821      	ldr	r1, [r4, #0]
   10f0a:	4211      	tst	r1, r2
   10f0c:	d000      	beq.n	10f10 <_printf_float+0x1cc>
   10f0e:	1c9a      	adds	r2, r3, #2
   10f10:	6122      	str	r2, [r4, #16]
   10f12:	e7f2      	b.n	10efa <_printf_float+0x1b6>
   10f14:	2767      	movs	r7, #103	; 0x67
   10f16:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10f18:	9812      	ldr	r0, [sp, #72]	; 0x48
   10f1a:	4283      	cmp	r3, r0
   10f1c:	db05      	blt.n	10f2a <_printf_float+0x1e6>
   10f1e:	6822      	ldr	r2, [r4, #0]
   10f20:	6123      	str	r3, [r4, #16]
   10f22:	07d2      	lsls	r2, r2, #31
   10f24:	d5e9      	bpl.n	10efa <_printf_float+0x1b6>
   10f26:	3301      	adds	r3, #1
   10f28:	e7e6      	b.n	10ef8 <_printf_float+0x1b4>
   10f2a:	2201      	movs	r2, #1
   10f2c:	2b00      	cmp	r3, #0
   10f2e:	dc01      	bgt.n	10f34 <_printf_float+0x1f0>
   10f30:	1892      	adds	r2, r2, r2
   10f32:	1ad2      	subs	r2, r2, r3
   10f34:	1812      	adds	r2, r2, r0
   10f36:	e7eb      	b.n	10f10 <_printf_float+0x1cc>
   10f38:	6822      	ldr	r2, [r4, #0]
   10f3a:	0553      	lsls	r3, r2, #21
   10f3c:	d408      	bmi.n	10f50 <_printf_float+0x20c>
   10f3e:	6923      	ldr	r3, [r4, #16]
   10f40:	002a      	movs	r2, r5
   10f42:	990a      	ldr	r1, [sp, #40]	; 0x28
   10f44:	9809      	ldr	r0, [sp, #36]	; 0x24
   10f46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10f48:	47a8      	blx	r5
   10f4a:	1c43      	adds	r3, r0, #1
   10f4c:	d129      	bne.n	10fa2 <_printf_float+0x25e>
   10f4e:	e756      	b.n	10dfe <_printf_float+0xba>
   10f50:	2f65      	cmp	r7, #101	; 0x65
   10f52:	d800      	bhi.n	10f56 <_printf_float+0x212>
   10f54:	e0dc      	b.n	11110 <_printf_float+0x3cc>
   10f56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   10f58:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   10f5a:	2200      	movs	r2, #0
   10f5c:	2300      	movs	r3, #0
   10f5e:	f7fd fe11 	bl	eb84 <__aeabi_dcmpeq>
   10f62:	2800      	cmp	r0, #0
   10f64:	d035      	beq.n	10fd2 <_printf_float+0x28e>
   10f66:	2301      	movs	r3, #1
   10f68:	4a35      	ldr	r2, [pc, #212]	; (11040 <_printf_float+0x2fc>)
   10f6a:	990a      	ldr	r1, [sp, #40]	; 0x28
   10f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
   10f6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10f70:	47a8      	blx	r5
   10f72:	1c43      	adds	r3, r0, #1
   10f74:	d100      	bne.n	10f78 <_printf_float+0x234>
   10f76:	e742      	b.n	10dfe <_printf_float+0xba>
   10f78:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10f7c:	4293      	cmp	r3, r2
   10f7e:	db02      	blt.n	10f86 <_printf_float+0x242>
   10f80:	6823      	ldr	r3, [r4, #0]
   10f82:	07db      	lsls	r3, r3, #31
   10f84:	d50d      	bpl.n	10fa2 <_printf_float+0x25e>
   10f86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10f8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10f8c:	990a      	ldr	r1, [sp, #40]	; 0x28
   10f8e:	9809      	ldr	r0, [sp, #36]	; 0x24
   10f90:	47a8      	blx	r5
   10f92:	2500      	movs	r5, #0
   10f94:	1c43      	adds	r3, r0, #1
   10f96:	d100      	bne.n	10f9a <_printf_float+0x256>
   10f98:	e731      	b.n	10dfe <_printf_float+0xba>
   10f9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10f9c:	3b01      	subs	r3, #1
   10f9e:	429d      	cmp	r5, r3
   10fa0:	db0b      	blt.n	10fba <_printf_float+0x276>
   10fa2:	6823      	ldr	r3, [r4, #0]
   10fa4:	2500      	movs	r5, #0
   10fa6:	079b      	lsls	r3, r3, #30
   10fa8:	d500      	bpl.n	10fac <_printf_float+0x268>
   10faa:	e0fd      	b.n	111a8 <_printf_float+0x464>
   10fac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10fae:	68e0      	ldr	r0, [r4, #12]
   10fb0:	4298      	cmp	r0, r3
   10fb2:	db00      	blt.n	10fb6 <_printf_float+0x272>
   10fb4:	e725      	b.n	10e02 <_printf_float+0xbe>
   10fb6:	0018      	movs	r0, r3
   10fb8:	e723      	b.n	10e02 <_printf_float+0xbe>
   10fba:	0022      	movs	r2, r4
   10fbc:	2301      	movs	r3, #1
   10fbe:	321a      	adds	r2, #26
   10fc0:	990a      	ldr	r1, [sp, #40]	; 0x28
   10fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
   10fc4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10fc6:	47b0      	blx	r6
   10fc8:	1c43      	adds	r3, r0, #1
   10fca:	d100      	bne.n	10fce <_printf_float+0x28a>
   10fcc:	e717      	b.n	10dfe <_printf_float+0xba>
   10fce:	3501      	adds	r5, #1
   10fd0:	e7e3      	b.n	10f9a <_printf_float+0x256>
   10fd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10fd4:	2b00      	cmp	r3, #0
   10fd6:	dc35      	bgt.n	11044 <_printf_float+0x300>
   10fd8:	2301      	movs	r3, #1
   10fda:	4a19      	ldr	r2, [pc, #100]	; (11040 <_printf_float+0x2fc>)
   10fdc:	990a      	ldr	r1, [sp, #40]	; 0x28
   10fde:	9809      	ldr	r0, [sp, #36]	; 0x24
   10fe0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10fe2:	47b0      	blx	r6
   10fe4:	1c43      	adds	r3, r0, #1
   10fe6:	d100      	bne.n	10fea <_printf_float+0x2a6>
   10fe8:	e709      	b.n	10dfe <_printf_float+0xba>
   10fea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10fec:	2b00      	cmp	r3, #0
   10fee:	d105      	bne.n	10ffc <_printf_float+0x2b8>
   10ff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10ff2:	2b00      	cmp	r3, #0
   10ff4:	d102      	bne.n	10ffc <_printf_float+0x2b8>
   10ff6:	6823      	ldr	r3, [r4, #0]
   10ff8:	07db      	lsls	r3, r3, #31
   10ffa:	d5d2      	bpl.n	10fa2 <_printf_float+0x25e>
   10ffc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11002:	990a      	ldr	r1, [sp, #40]	; 0x28
   11004:	9809      	ldr	r0, [sp, #36]	; 0x24
   11006:	47b0      	blx	r6
   11008:	2600      	movs	r6, #0
   1100a:	1c43      	adds	r3, r0, #1
   1100c:	d100      	bne.n	11010 <_printf_float+0x2cc>
   1100e:	e6f6      	b.n	10dfe <_printf_float+0xba>
   11010:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11012:	425b      	negs	r3, r3
   11014:	429e      	cmp	r6, r3
   11016:	db01      	blt.n	1101c <_printf_float+0x2d8>
   11018:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1101a:	e791      	b.n	10f40 <_printf_float+0x1fc>
   1101c:	0022      	movs	r2, r4
   1101e:	2301      	movs	r3, #1
   11020:	321a      	adds	r2, #26
   11022:	990a      	ldr	r1, [sp, #40]	; 0x28
   11024:	9809      	ldr	r0, [sp, #36]	; 0x24
   11026:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11028:	47b8      	blx	r7
   1102a:	1c43      	adds	r3, r0, #1
   1102c:	d100      	bne.n	11030 <_printf_float+0x2ec>
   1102e:	e6e6      	b.n	10dfe <_printf_float+0xba>
   11030:	3601      	adds	r6, #1
   11032:	e7ed      	b.n	11010 <_printf_float+0x2cc>
   11034:	7fefffff 	.word	0x7fefffff
   11038:	00014183 	.word	0x00014183
   1103c:	0001417f 	.word	0x0001417f
   11040:	0001418f 	.word	0x0001418f
   11044:	6da3      	ldr	r3, [r4, #88]	; 0x58
   11046:	9e12      	ldr	r6, [sp, #72]	; 0x48
   11048:	429e      	cmp	r6, r3
   1104a:	dd00      	ble.n	1104e <_printf_float+0x30a>
   1104c:	001e      	movs	r6, r3
   1104e:	2e00      	cmp	r6, #0
   11050:	dc35      	bgt.n	110be <_printf_float+0x37a>
   11052:	2300      	movs	r3, #0
   11054:	930c      	str	r3, [sp, #48]	; 0x30
   11056:	43f3      	mvns	r3, r6
   11058:	17db      	asrs	r3, r3, #31
   1105a:	930f      	str	r3, [sp, #60]	; 0x3c
   1105c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1105e:	6da7      	ldr	r7, [r4, #88]	; 0x58
   11060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11062:	4033      	ands	r3, r6
   11064:	1afb      	subs	r3, r7, r3
   11066:	429a      	cmp	r2, r3
   11068:	db32      	blt.n	110d0 <_printf_float+0x38c>
   1106a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1106c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1106e:	4293      	cmp	r3, r2
   11070:	db3c      	blt.n	110ec <_printf_float+0x3a8>
   11072:	6823      	ldr	r3, [r4, #0]
   11074:	07db      	lsls	r3, r3, #31
   11076:	d439      	bmi.n	110ec <_printf_float+0x3a8>
   11078:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1107a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1107c:	1bf3      	subs	r3, r6, r7
   1107e:	1ab6      	subs	r6, r6, r2
   11080:	429e      	cmp	r6, r3
   11082:	dd00      	ble.n	11086 <_printf_float+0x342>
   11084:	001e      	movs	r6, r3
   11086:	2e00      	cmp	r6, #0
   11088:	dc39      	bgt.n	110fe <_printf_float+0x3ba>
   1108a:	43f7      	mvns	r7, r6
   1108c:	2500      	movs	r5, #0
   1108e:	17fb      	asrs	r3, r7, #31
   11090:	930c      	str	r3, [sp, #48]	; 0x30
   11092:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11094:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11096:	990c      	ldr	r1, [sp, #48]	; 0x30
   11098:	1a9b      	subs	r3, r3, r2
   1109a:	0032      	movs	r2, r6
   1109c:	400a      	ands	r2, r1
   1109e:	1a9b      	subs	r3, r3, r2
   110a0:	429d      	cmp	r5, r3
   110a2:	db00      	blt.n	110a6 <_printf_float+0x362>
   110a4:	e77d      	b.n	10fa2 <_printf_float+0x25e>
   110a6:	0022      	movs	r2, r4
   110a8:	2301      	movs	r3, #1
   110aa:	321a      	adds	r2, #26
   110ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   110ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   110b0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   110b2:	47b8      	blx	r7
   110b4:	1c43      	adds	r3, r0, #1
   110b6:	d100      	bne.n	110ba <_printf_float+0x376>
   110b8:	e6a1      	b.n	10dfe <_printf_float+0xba>
   110ba:	3501      	adds	r5, #1
   110bc:	e7e9      	b.n	11092 <_printf_float+0x34e>
   110be:	0033      	movs	r3, r6
   110c0:	002a      	movs	r2, r5
   110c2:	990a      	ldr	r1, [sp, #40]	; 0x28
   110c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   110c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   110c8:	47b8      	blx	r7
   110ca:	1c43      	adds	r3, r0, #1
   110cc:	d1c1      	bne.n	11052 <_printf_float+0x30e>
   110ce:	e696      	b.n	10dfe <_printf_float+0xba>
   110d0:	0022      	movs	r2, r4
   110d2:	2301      	movs	r3, #1
   110d4:	321a      	adds	r2, #26
   110d6:	990a      	ldr	r1, [sp, #40]	; 0x28
   110d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   110da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   110dc:	47b8      	blx	r7
   110de:	1c43      	adds	r3, r0, #1
   110e0:	d100      	bne.n	110e4 <_printf_float+0x3a0>
   110e2:	e68c      	b.n	10dfe <_printf_float+0xba>
   110e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   110e6:	3301      	adds	r3, #1
   110e8:	930c      	str	r3, [sp, #48]	; 0x30
   110ea:	e7b7      	b.n	1105c <_printf_float+0x318>
   110ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   110ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   110f0:	990a      	ldr	r1, [sp, #40]	; 0x28
   110f2:	9809      	ldr	r0, [sp, #36]	; 0x24
   110f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   110f6:	47b0      	blx	r6
   110f8:	1c43      	adds	r3, r0, #1
   110fa:	d1bd      	bne.n	11078 <_printf_float+0x334>
   110fc:	e67f      	b.n	10dfe <_printf_float+0xba>
   110fe:	19ea      	adds	r2, r5, r7
   11100:	0033      	movs	r3, r6
   11102:	990a      	ldr	r1, [sp, #40]	; 0x28
   11104:	9809      	ldr	r0, [sp, #36]	; 0x24
   11106:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11108:	47a8      	blx	r5
   1110a:	1c43      	adds	r3, r0, #1
   1110c:	d1bd      	bne.n	1108a <_printf_float+0x346>
   1110e:	e676      	b.n	10dfe <_printf_float+0xba>
   11110:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11112:	2b01      	cmp	r3, #1
   11114:	dc02      	bgt.n	1111c <_printf_float+0x3d8>
   11116:	2301      	movs	r3, #1
   11118:	421a      	tst	r2, r3
   1111a:	d038      	beq.n	1118e <_printf_float+0x44a>
   1111c:	2301      	movs	r3, #1
   1111e:	002a      	movs	r2, r5
   11120:	990a      	ldr	r1, [sp, #40]	; 0x28
   11122:	9809      	ldr	r0, [sp, #36]	; 0x24
   11124:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11126:	47b8      	blx	r7
   11128:	1c43      	adds	r3, r0, #1
   1112a:	d100      	bne.n	1112e <_printf_float+0x3ea>
   1112c:	e667      	b.n	10dfe <_printf_float+0xba>
   1112e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11132:	990a      	ldr	r1, [sp, #40]	; 0x28
   11134:	9809      	ldr	r0, [sp, #36]	; 0x24
   11136:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11138:	47b8      	blx	r7
   1113a:	1c43      	adds	r3, r0, #1
   1113c:	d100      	bne.n	11140 <_printf_float+0x3fc>
   1113e:	e65e      	b.n	10dfe <_printf_float+0xba>
   11140:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   11142:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   11144:	2200      	movs	r2, #0
   11146:	2300      	movs	r3, #0
   11148:	f7fd fd1c 	bl	eb84 <__aeabi_dcmpeq>
   1114c:	2800      	cmp	r0, #0
   1114e:	d008      	beq.n	11162 <_printf_float+0x41e>
   11150:	2500      	movs	r5, #0
   11152:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11154:	3b01      	subs	r3, #1
   11156:	429d      	cmp	r5, r3
   11158:	db0d      	blt.n	11176 <_printf_float+0x432>
   1115a:	0022      	movs	r2, r4
   1115c:	0033      	movs	r3, r6
   1115e:	3250      	adds	r2, #80	; 0x50
   11160:	e6ef      	b.n	10f42 <_printf_float+0x1fe>
   11162:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11164:	1c6a      	adds	r2, r5, #1
   11166:	3b01      	subs	r3, #1
   11168:	990a      	ldr	r1, [sp, #40]	; 0x28
   1116a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1116c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1116e:	47a8      	blx	r5
   11170:	1c43      	adds	r3, r0, #1
   11172:	d1f2      	bne.n	1115a <_printf_float+0x416>
   11174:	e643      	b.n	10dfe <_printf_float+0xba>
   11176:	0022      	movs	r2, r4
   11178:	2301      	movs	r3, #1
   1117a:	321a      	adds	r2, #26
   1117c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1117e:	9809      	ldr	r0, [sp, #36]	; 0x24
   11180:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11182:	47b8      	blx	r7
   11184:	1c43      	adds	r3, r0, #1
   11186:	d100      	bne.n	1118a <_printf_float+0x446>
   11188:	e639      	b.n	10dfe <_printf_float+0xba>
   1118a:	3501      	adds	r5, #1
   1118c:	e7e1      	b.n	11152 <_printf_float+0x40e>
   1118e:	002a      	movs	r2, r5
   11190:	e7ea      	b.n	11168 <_printf_float+0x424>
   11192:	0022      	movs	r2, r4
   11194:	2301      	movs	r3, #1
   11196:	3219      	adds	r2, #25
   11198:	990a      	ldr	r1, [sp, #40]	; 0x28
   1119a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1119c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1119e:	47b0      	blx	r6
   111a0:	1c43      	adds	r3, r0, #1
   111a2:	d100      	bne.n	111a6 <_printf_float+0x462>
   111a4:	e62b      	b.n	10dfe <_printf_float+0xba>
   111a6:	3501      	adds	r5, #1
   111a8:	68e3      	ldr	r3, [r4, #12]
   111aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   111ac:	1a9b      	subs	r3, r3, r2
   111ae:	429d      	cmp	r5, r3
   111b0:	dbef      	blt.n	11192 <_printf_float+0x44e>
   111b2:	e6fb      	b.n	10fac <_printf_float+0x268>
   111b4:	0032      	movs	r2, r6
   111b6:	002b      	movs	r3, r5
   111b8:	0030      	movs	r0, r6
   111ba:	0029      	movs	r1, r5
   111bc:	f7ff f9ea 	bl	10594 <__aeabi_dcmpun>
   111c0:	2800      	cmp	r0, #0
   111c2:	d100      	bne.n	111c6 <_printf_float+0x482>
   111c4:	e621      	b.n	10e0a <_printf_float+0xc6>
   111c6:	4d03      	ldr	r5, [pc, #12]	; (111d4 <_printf_float+0x490>)
   111c8:	2f47      	cmp	r7, #71	; 0x47
   111ca:	d900      	bls.n	111ce <_printf_float+0x48a>
   111cc:	e605      	b.n	10dda <_printf_float+0x96>
   111ce:	4d02      	ldr	r5, [pc, #8]	; (111d8 <_printf_float+0x494>)
   111d0:	e603      	b.n	10dda <_printf_float+0x96>
   111d2:	46c0      	nop			; (mov r8, r8)
   111d4:	0001418b 	.word	0x0001418b
   111d8:	00014187 	.word	0x00014187

000111dc <_printf_common>:
   111dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   111de:	0015      	movs	r5, r2
   111e0:	9301      	str	r3, [sp, #4]
   111e2:	688a      	ldr	r2, [r1, #8]
   111e4:	690b      	ldr	r3, [r1, #16]
   111e6:	9000      	str	r0, [sp, #0]
   111e8:	000c      	movs	r4, r1
   111ea:	4293      	cmp	r3, r2
   111ec:	da00      	bge.n	111f0 <_printf_common+0x14>
   111ee:	0013      	movs	r3, r2
   111f0:	0022      	movs	r2, r4
   111f2:	602b      	str	r3, [r5, #0]
   111f4:	3243      	adds	r2, #67	; 0x43
   111f6:	7812      	ldrb	r2, [r2, #0]
   111f8:	2a00      	cmp	r2, #0
   111fa:	d001      	beq.n	11200 <_printf_common+0x24>
   111fc:	3301      	adds	r3, #1
   111fe:	602b      	str	r3, [r5, #0]
   11200:	6823      	ldr	r3, [r4, #0]
   11202:	069b      	lsls	r3, r3, #26
   11204:	d502      	bpl.n	1120c <_printf_common+0x30>
   11206:	682b      	ldr	r3, [r5, #0]
   11208:	3302      	adds	r3, #2
   1120a:	602b      	str	r3, [r5, #0]
   1120c:	2706      	movs	r7, #6
   1120e:	6823      	ldr	r3, [r4, #0]
   11210:	401f      	ands	r7, r3
   11212:	d027      	beq.n	11264 <_printf_common+0x88>
   11214:	0023      	movs	r3, r4
   11216:	3343      	adds	r3, #67	; 0x43
   11218:	781b      	ldrb	r3, [r3, #0]
   1121a:	1e5a      	subs	r2, r3, #1
   1121c:	4193      	sbcs	r3, r2
   1121e:	6822      	ldr	r2, [r4, #0]
   11220:	0692      	lsls	r2, r2, #26
   11222:	d430      	bmi.n	11286 <_printf_common+0xaa>
   11224:	0022      	movs	r2, r4
   11226:	9901      	ldr	r1, [sp, #4]
   11228:	3243      	adds	r2, #67	; 0x43
   1122a:	9800      	ldr	r0, [sp, #0]
   1122c:	9e08      	ldr	r6, [sp, #32]
   1122e:	47b0      	blx	r6
   11230:	1c43      	adds	r3, r0, #1
   11232:	d025      	beq.n	11280 <_printf_common+0xa4>
   11234:	2306      	movs	r3, #6
   11236:	6820      	ldr	r0, [r4, #0]
   11238:	682a      	ldr	r2, [r5, #0]
   1123a:	68e1      	ldr	r1, [r4, #12]
   1123c:	4003      	ands	r3, r0
   1123e:	2500      	movs	r5, #0
   11240:	2b04      	cmp	r3, #4
   11242:	d103      	bne.n	1124c <_printf_common+0x70>
   11244:	1a8d      	subs	r5, r1, r2
   11246:	43eb      	mvns	r3, r5
   11248:	17db      	asrs	r3, r3, #31
   1124a:	401d      	ands	r5, r3
   1124c:	68a3      	ldr	r3, [r4, #8]
   1124e:	6922      	ldr	r2, [r4, #16]
   11250:	4293      	cmp	r3, r2
   11252:	dd01      	ble.n	11258 <_printf_common+0x7c>
   11254:	1a9b      	subs	r3, r3, r2
   11256:	18ed      	adds	r5, r5, r3
   11258:	2700      	movs	r7, #0
   1125a:	42bd      	cmp	r5, r7
   1125c:	d120      	bne.n	112a0 <_printf_common+0xc4>
   1125e:	2000      	movs	r0, #0
   11260:	e010      	b.n	11284 <_printf_common+0xa8>
   11262:	3701      	adds	r7, #1
   11264:	68e3      	ldr	r3, [r4, #12]
   11266:	682a      	ldr	r2, [r5, #0]
   11268:	1a9b      	subs	r3, r3, r2
   1126a:	429f      	cmp	r7, r3
   1126c:	dad2      	bge.n	11214 <_printf_common+0x38>
   1126e:	0022      	movs	r2, r4
   11270:	2301      	movs	r3, #1
   11272:	3219      	adds	r2, #25
   11274:	9901      	ldr	r1, [sp, #4]
   11276:	9800      	ldr	r0, [sp, #0]
   11278:	9e08      	ldr	r6, [sp, #32]
   1127a:	47b0      	blx	r6
   1127c:	1c43      	adds	r3, r0, #1
   1127e:	d1f0      	bne.n	11262 <_printf_common+0x86>
   11280:	2001      	movs	r0, #1
   11282:	4240      	negs	r0, r0
   11284:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11286:	2030      	movs	r0, #48	; 0x30
   11288:	18e1      	adds	r1, r4, r3
   1128a:	3143      	adds	r1, #67	; 0x43
   1128c:	7008      	strb	r0, [r1, #0]
   1128e:	0021      	movs	r1, r4
   11290:	1c5a      	adds	r2, r3, #1
   11292:	3145      	adds	r1, #69	; 0x45
   11294:	7809      	ldrb	r1, [r1, #0]
   11296:	18a2      	adds	r2, r4, r2
   11298:	3243      	adds	r2, #67	; 0x43
   1129a:	3302      	adds	r3, #2
   1129c:	7011      	strb	r1, [r2, #0]
   1129e:	e7c1      	b.n	11224 <_printf_common+0x48>
   112a0:	0022      	movs	r2, r4
   112a2:	2301      	movs	r3, #1
   112a4:	321a      	adds	r2, #26
   112a6:	9901      	ldr	r1, [sp, #4]
   112a8:	9800      	ldr	r0, [sp, #0]
   112aa:	9e08      	ldr	r6, [sp, #32]
   112ac:	47b0      	blx	r6
   112ae:	1c43      	adds	r3, r0, #1
   112b0:	d0e6      	beq.n	11280 <_printf_common+0xa4>
   112b2:	3701      	adds	r7, #1
   112b4:	e7d1      	b.n	1125a <_printf_common+0x7e>
	...

000112b8 <_printf_i>:
   112b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   112ba:	b08b      	sub	sp, #44	; 0x2c
   112bc:	9206      	str	r2, [sp, #24]
   112be:	000a      	movs	r2, r1
   112c0:	3243      	adds	r2, #67	; 0x43
   112c2:	9307      	str	r3, [sp, #28]
   112c4:	9005      	str	r0, [sp, #20]
   112c6:	9204      	str	r2, [sp, #16]
   112c8:	7e0a      	ldrb	r2, [r1, #24]
   112ca:	000c      	movs	r4, r1
   112cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   112ce:	2a6e      	cmp	r2, #110	; 0x6e
   112d0:	d100      	bne.n	112d4 <_printf_i+0x1c>
   112d2:	e08f      	b.n	113f4 <_printf_i+0x13c>
   112d4:	d817      	bhi.n	11306 <_printf_i+0x4e>
   112d6:	2a63      	cmp	r2, #99	; 0x63
   112d8:	d02c      	beq.n	11334 <_printf_i+0x7c>
   112da:	d808      	bhi.n	112ee <_printf_i+0x36>
   112dc:	2a00      	cmp	r2, #0
   112de:	d100      	bne.n	112e2 <_printf_i+0x2a>
   112e0:	e099      	b.n	11416 <_printf_i+0x15e>
   112e2:	2a58      	cmp	r2, #88	; 0x58
   112e4:	d054      	beq.n	11390 <_printf_i+0xd8>
   112e6:	0026      	movs	r6, r4
   112e8:	3642      	adds	r6, #66	; 0x42
   112ea:	7032      	strb	r2, [r6, #0]
   112ec:	e029      	b.n	11342 <_printf_i+0x8a>
   112ee:	2a64      	cmp	r2, #100	; 0x64
   112f0:	d001      	beq.n	112f6 <_printf_i+0x3e>
   112f2:	2a69      	cmp	r2, #105	; 0x69
   112f4:	d1f7      	bne.n	112e6 <_printf_i+0x2e>
   112f6:	6821      	ldr	r1, [r4, #0]
   112f8:	681a      	ldr	r2, [r3, #0]
   112fa:	0608      	lsls	r0, r1, #24
   112fc:	d523      	bpl.n	11346 <_printf_i+0x8e>
   112fe:	1d11      	adds	r1, r2, #4
   11300:	6019      	str	r1, [r3, #0]
   11302:	6815      	ldr	r5, [r2, #0]
   11304:	e025      	b.n	11352 <_printf_i+0x9a>
   11306:	2a73      	cmp	r2, #115	; 0x73
   11308:	d100      	bne.n	1130c <_printf_i+0x54>
   1130a:	e088      	b.n	1141e <_printf_i+0x166>
   1130c:	d808      	bhi.n	11320 <_printf_i+0x68>
   1130e:	2a6f      	cmp	r2, #111	; 0x6f
   11310:	d029      	beq.n	11366 <_printf_i+0xae>
   11312:	2a70      	cmp	r2, #112	; 0x70
   11314:	d1e7      	bne.n	112e6 <_printf_i+0x2e>
   11316:	2220      	movs	r2, #32
   11318:	6809      	ldr	r1, [r1, #0]
   1131a:	430a      	orrs	r2, r1
   1131c:	6022      	str	r2, [r4, #0]
   1131e:	e003      	b.n	11328 <_printf_i+0x70>
   11320:	2a75      	cmp	r2, #117	; 0x75
   11322:	d020      	beq.n	11366 <_printf_i+0xae>
   11324:	2a78      	cmp	r2, #120	; 0x78
   11326:	d1de      	bne.n	112e6 <_printf_i+0x2e>
   11328:	0022      	movs	r2, r4
   1132a:	2178      	movs	r1, #120	; 0x78
   1132c:	3245      	adds	r2, #69	; 0x45
   1132e:	7011      	strb	r1, [r2, #0]
   11330:	4a6c      	ldr	r2, [pc, #432]	; (114e4 <_printf_i+0x22c>)
   11332:	e030      	b.n	11396 <_printf_i+0xde>
   11334:	000e      	movs	r6, r1
   11336:	681a      	ldr	r2, [r3, #0]
   11338:	3642      	adds	r6, #66	; 0x42
   1133a:	1d11      	adds	r1, r2, #4
   1133c:	6019      	str	r1, [r3, #0]
   1133e:	6813      	ldr	r3, [r2, #0]
   11340:	7033      	strb	r3, [r6, #0]
   11342:	2301      	movs	r3, #1
   11344:	e079      	b.n	1143a <_printf_i+0x182>
   11346:	0649      	lsls	r1, r1, #25
   11348:	d5d9      	bpl.n	112fe <_printf_i+0x46>
   1134a:	1d11      	adds	r1, r2, #4
   1134c:	6019      	str	r1, [r3, #0]
   1134e:	2300      	movs	r3, #0
   11350:	5ed5      	ldrsh	r5, [r2, r3]
   11352:	2d00      	cmp	r5, #0
   11354:	da03      	bge.n	1135e <_printf_i+0xa6>
   11356:	232d      	movs	r3, #45	; 0x2d
   11358:	9a04      	ldr	r2, [sp, #16]
   1135a:	426d      	negs	r5, r5
   1135c:	7013      	strb	r3, [r2, #0]
   1135e:	4b62      	ldr	r3, [pc, #392]	; (114e8 <_printf_i+0x230>)
   11360:	270a      	movs	r7, #10
   11362:	9303      	str	r3, [sp, #12]
   11364:	e02f      	b.n	113c6 <_printf_i+0x10e>
   11366:	6820      	ldr	r0, [r4, #0]
   11368:	6819      	ldr	r1, [r3, #0]
   1136a:	0605      	lsls	r5, r0, #24
   1136c:	d503      	bpl.n	11376 <_printf_i+0xbe>
   1136e:	1d08      	adds	r0, r1, #4
   11370:	6018      	str	r0, [r3, #0]
   11372:	680d      	ldr	r5, [r1, #0]
   11374:	e005      	b.n	11382 <_printf_i+0xca>
   11376:	0640      	lsls	r0, r0, #25
   11378:	d5f9      	bpl.n	1136e <_printf_i+0xb6>
   1137a:	680d      	ldr	r5, [r1, #0]
   1137c:	1d08      	adds	r0, r1, #4
   1137e:	6018      	str	r0, [r3, #0]
   11380:	b2ad      	uxth	r5, r5
   11382:	4b59      	ldr	r3, [pc, #356]	; (114e8 <_printf_i+0x230>)
   11384:	2708      	movs	r7, #8
   11386:	9303      	str	r3, [sp, #12]
   11388:	2a6f      	cmp	r2, #111	; 0x6f
   1138a:	d018      	beq.n	113be <_printf_i+0x106>
   1138c:	270a      	movs	r7, #10
   1138e:	e016      	b.n	113be <_printf_i+0x106>
   11390:	3145      	adds	r1, #69	; 0x45
   11392:	700a      	strb	r2, [r1, #0]
   11394:	4a54      	ldr	r2, [pc, #336]	; (114e8 <_printf_i+0x230>)
   11396:	9203      	str	r2, [sp, #12]
   11398:	681a      	ldr	r2, [r3, #0]
   1139a:	6821      	ldr	r1, [r4, #0]
   1139c:	1d10      	adds	r0, r2, #4
   1139e:	6018      	str	r0, [r3, #0]
   113a0:	6815      	ldr	r5, [r2, #0]
   113a2:	0608      	lsls	r0, r1, #24
   113a4:	d522      	bpl.n	113ec <_printf_i+0x134>
   113a6:	07cb      	lsls	r3, r1, #31
   113a8:	d502      	bpl.n	113b0 <_printf_i+0xf8>
   113aa:	2320      	movs	r3, #32
   113ac:	4319      	orrs	r1, r3
   113ae:	6021      	str	r1, [r4, #0]
   113b0:	2710      	movs	r7, #16
   113b2:	2d00      	cmp	r5, #0
   113b4:	d103      	bne.n	113be <_printf_i+0x106>
   113b6:	2320      	movs	r3, #32
   113b8:	6822      	ldr	r2, [r4, #0]
   113ba:	439a      	bics	r2, r3
   113bc:	6022      	str	r2, [r4, #0]
   113be:	0023      	movs	r3, r4
   113c0:	2200      	movs	r2, #0
   113c2:	3343      	adds	r3, #67	; 0x43
   113c4:	701a      	strb	r2, [r3, #0]
   113c6:	6863      	ldr	r3, [r4, #4]
   113c8:	60a3      	str	r3, [r4, #8]
   113ca:	2b00      	cmp	r3, #0
   113cc:	db5c      	blt.n	11488 <_printf_i+0x1d0>
   113ce:	2204      	movs	r2, #4
   113d0:	6821      	ldr	r1, [r4, #0]
   113d2:	4391      	bics	r1, r2
   113d4:	6021      	str	r1, [r4, #0]
   113d6:	2d00      	cmp	r5, #0
   113d8:	d158      	bne.n	1148c <_printf_i+0x1d4>
   113da:	9e04      	ldr	r6, [sp, #16]
   113dc:	2b00      	cmp	r3, #0
   113de:	d064      	beq.n	114aa <_printf_i+0x1f2>
   113e0:	0026      	movs	r6, r4
   113e2:	9b03      	ldr	r3, [sp, #12]
   113e4:	3642      	adds	r6, #66	; 0x42
   113e6:	781b      	ldrb	r3, [r3, #0]
   113e8:	7033      	strb	r3, [r6, #0]
   113ea:	e05e      	b.n	114aa <_printf_i+0x1f2>
   113ec:	0648      	lsls	r0, r1, #25
   113ee:	d5da      	bpl.n	113a6 <_printf_i+0xee>
   113f0:	b2ad      	uxth	r5, r5
   113f2:	e7d8      	b.n	113a6 <_printf_i+0xee>
   113f4:	6809      	ldr	r1, [r1, #0]
   113f6:	681a      	ldr	r2, [r3, #0]
   113f8:	0608      	lsls	r0, r1, #24
   113fa:	d505      	bpl.n	11408 <_printf_i+0x150>
   113fc:	1d11      	adds	r1, r2, #4
   113fe:	6019      	str	r1, [r3, #0]
   11400:	6813      	ldr	r3, [r2, #0]
   11402:	6962      	ldr	r2, [r4, #20]
   11404:	601a      	str	r2, [r3, #0]
   11406:	e006      	b.n	11416 <_printf_i+0x15e>
   11408:	0649      	lsls	r1, r1, #25
   1140a:	d5f7      	bpl.n	113fc <_printf_i+0x144>
   1140c:	1d11      	adds	r1, r2, #4
   1140e:	6019      	str	r1, [r3, #0]
   11410:	6813      	ldr	r3, [r2, #0]
   11412:	8aa2      	ldrh	r2, [r4, #20]
   11414:	801a      	strh	r2, [r3, #0]
   11416:	2300      	movs	r3, #0
   11418:	9e04      	ldr	r6, [sp, #16]
   1141a:	6123      	str	r3, [r4, #16]
   1141c:	e054      	b.n	114c8 <_printf_i+0x210>
   1141e:	681a      	ldr	r2, [r3, #0]
   11420:	1d11      	adds	r1, r2, #4
   11422:	6019      	str	r1, [r3, #0]
   11424:	6816      	ldr	r6, [r2, #0]
   11426:	2100      	movs	r1, #0
   11428:	6862      	ldr	r2, [r4, #4]
   1142a:	0030      	movs	r0, r6
   1142c:	f001 f9fe 	bl	1282c <memchr>
   11430:	2800      	cmp	r0, #0
   11432:	d001      	beq.n	11438 <_printf_i+0x180>
   11434:	1b80      	subs	r0, r0, r6
   11436:	6060      	str	r0, [r4, #4]
   11438:	6863      	ldr	r3, [r4, #4]
   1143a:	6123      	str	r3, [r4, #16]
   1143c:	2300      	movs	r3, #0
   1143e:	9a04      	ldr	r2, [sp, #16]
   11440:	7013      	strb	r3, [r2, #0]
   11442:	e041      	b.n	114c8 <_printf_i+0x210>
   11444:	6923      	ldr	r3, [r4, #16]
   11446:	0032      	movs	r2, r6
   11448:	9906      	ldr	r1, [sp, #24]
   1144a:	9805      	ldr	r0, [sp, #20]
   1144c:	9d07      	ldr	r5, [sp, #28]
   1144e:	47a8      	blx	r5
   11450:	1c43      	adds	r3, r0, #1
   11452:	d043      	beq.n	114dc <_printf_i+0x224>
   11454:	6823      	ldr	r3, [r4, #0]
   11456:	2500      	movs	r5, #0
   11458:	079b      	lsls	r3, r3, #30
   1145a:	d40f      	bmi.n	1147c <_printf_i+0x1c4>
   1145c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1145e:	68e0      	ldr	r0, [r4, #12]
   11460:	4298      	cmp	r0, r3
   11462:	da3d      	bge.n	114e0 <_printf_i+0x228>
   11464:	0018      	movs	r0, r3
   11466:	e03b      	b.n	114e0 <_printf_i+0x228>
   11468:	0022      	movs	r2, r4
   1146a:	2301      	movs	r3, #1
   1146c:	3219      	adds	r2, #25
   1146e:	9906      	ldr	r1, [sp, #24]
   11470:	9805      	ldr	r0, [sp, #20]
   11472:	9e07      	ldr	r6, [sp, #28]
   11474:	47b0      	blx	r6
   11476:	1c43      	adds	r3, r0, #1
   11478:	d030      	beq.n	114dc <_printf_i+0x224>
   1147a:	3501      	adds	r5, #1
   1147c:	68e3      	ldr	r3, [r4, #12]
   1147e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11480:	1a9b      	subs	r3, r3, r2
   11482:	429d      	cmp	r5, r3
   11484:	dbf0      	blt.n	11468 <_printf_i+0x1b0>
   11486:	e7e9      	b.n	1145c <_printf_i+0x1a4>
   11488:	2d00      	cmp	r5, #0
   1148a:	d0a9      	beq.n	113e0 <_printf_i+0x128>
   1148c:	9e04      	ldr	r6, [sp, #16]
   1148e:	0028      	movs	r0, r5
   11490:	0039      	movs	r1, r7
   11492:	f7fd fa77 	bl	e984 <__aeabi_uidivmod>
   11496:	9b03      	ldr	r3, [sp, #12]
   11498:	3e01      	subs	r6, #1
   1149a:	5c5b      	ldrb	r3, [r3, r1]
   1149c:	0028      	movs	r0, r5
   1149e:	7033      	strb	r3, [r6, #0]
   114a0:	0039      	movs	r1, r7
   114a2:	f7fd f9e9 	bl	e878 <__udivsi3>
   114a6:	1e05      	subs	r5, r0, #0
   114a8:	d1f1      	bne.n	1148e <_printf_i+0x1d6>
   114aa:	2f08      	cmp	r7, #8
   114ac:	d109      	bne.n	114c2 <_printf_i+0x20a>
   114ae:	6823      	ldr	r3, [r4, #0]
   114b0:	07db      	lsls	r3, r3, #31
   114b2:	d506      	bpl.n	114c2 <_printf_i+0x20a>
   114b4:	6863      	ldr	r3, [r4, #4]
   114b6:	6922      	ldr	r2, [r4, #16]
   114b8:	4293      	cmp	r3, r2
   114ba:	dc02      	bgt.n	114c2 <_printf_i+0x20a>
   114bc:	2330      	movs	r3, #48	; 0x30
   114be:	3e01      	subs	r6, #1
   114c0:	7033      	strb	r3, [r6, #0]
   114c2:	9b04      	ldr	r3, [sp, #16]
   114c4:	1b9b      	subs	r3, r3, r6
   114c6:	6123      	str	r3, [r4, #16]
   114c8:	9b07      	ldr	r3, [sp, #28]
   114ca:	aa09      	add	r2, sp, #36	; 0x24
   114cc:	9300      	str	r3, [sp, #0]
   114ce:	0021      	movs	r1, r4
   114d0:	9b06      	ldr	r3, [sp, #24]
   114d2:	9805      	ldr	r0, [sp, #20]
   114d4:	f7ff fe82 	bl	111dc <_printf_common>
   114d8:	1c43      	adds	r3, r0, #1
   114da:	d1b3      	bne.n	11444 <_printf_i+0x18c>
   114dc:	2001      	movs	r0, #1
   114de:	4240      	negs	r0, r0
   114e0:	b00b      	add	sp, #44	; 0x2c
   114e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114e4:	000141a2 	.word	0x000141a2
   114e8:	00014191 	.word	0x00014191

000114ec <realloc>:
   114ec:	b510      	push	{r4, lr}
   114ee:	4b03      	ldr	r3, [pc, #12]	; (114fc <realloc+0x10>)
   114f0:	000a      	movs	r2, r1
   114f2:	0001      	movs	r1, r0
   114f4:	6818      	ldr	r0, [r3, #0]
   114f6:	f001 fc97 	bl	12e28 <_realloc_r>
   114fa:	bd10      	pop	{r4, pc}
   114fc:	200000a4 	.word	0x200000a4

00011500 <_sbrk_r>:
   11500:	2300      	movs	r3, #0
   11502:	b570      	push	{r4, r5, r6, lr}
   11504:	4c06      	ldr	r4, [pc, #24]	; (11520 <_sbrk_r+0x20>)
   11506:	0005      	movs	r5, r0
   11508:	0008      	movs	r0, r1
   1150a:	6023      	str	r3, [r4, #0]
   1150c:	f001 fe46 	bl	1319c <_sbrk>
   11510:	1c43      	adds	r3, r0, #1
   11512:	d103      	bne.n	1151c <_sbrk_r+0x1c>
   11514:	6823      	ldr	r3, [r4, #0]
   11516:	2b00      	cmp	r3, #0
   11518:	d000      	beq.n	1151c <_sbrk_r+0x1c>
   1151a:	602b      	str	r3, [r5, #0]
   1151c:	bd70      	pop	{r4, r5, r6, pc}
   1151e:	46c0      	nop			; (mov r8, r8)
   11520:	20000f84 	.word	0x20000f84

00011524 <strchr>:
   11524:	b2c9      	uxtb	r1, r1
   11526:	7803      	ldrb	r3, [r0, #0]
   11528:	2b00      	cmp	r3, #0
   1152a:	d004      	beq.n	11536 <strchr+0x12>
   1152c:	4299      	cmp	r1, r3
   1152e:	d100      	bne.n	11532 <strchr+0xe>
   11530:	4770      	bx	lr
   11532:	3001      	adds	r0, #1
   11534:	e7f7      	b.n	11526 <strchr+0x2>
   11536:	424b      	negs	r3, r1
   11538:	4159      	adcs	r1, r3
   1153a:	4249      	negs	r1, r1
   1153c:	4008      	ands	r0, r1
   1153e:	e7f7      	b.n	11530 <strchr+0xc>

00011540 <strcpy>:
   11540:	1c03      	adds	r3, r0, #0
   11542:	780a      	ldrb	r2, [r1, #0]
   11544:	3101      	adds	r1, #1
   11546:	701a      	strb	r2, [r3, #0]
   11548:	3301      	adds	r3, #1
   1154a:	2a00      	cmp	r2, #0
   1154c:	d1f9      	bne.n	11542 <strcpy+0x2>
   1154e:	4770      	bx	lr

00011550 <strlen>:
   11550:	2300      	movs	r3, #0
   11552:	5cc2      	ldrb	r2, [r0, r3]
   11554:	3301      	adds	r3, #1
   11556:	2a00      	cmp	r2, #0
   11558:	d1fb      	bne.n	11552 <strlen+0x2>
   1155a:	1e58      	subs	r0, r3, #1
   1155c:	4770      	bx	lr

0001155e <strncpy>:
   1155e:	b570      	push	{r4, r5, r6, lr}
   11560:	0004      	movs	r4, r0
   11562:	2a00      	cmp	r2, #0
   11564:	d100      	bne.n	11568 <strncpy+0xa>
   11566:	bd70      	pop	{r4, r5, r6, pc}
   11568:	780d      	ldrb	r5, [r1, #0]
   1156a:	1e56      	subs	r6, r2, #1
   1156c:	1c63      	adds	r3, r4, #1
   1156e:	7025      	strb	r5, [r4, #0]
   11570:	3101      	adds	r1, #1
   11572:	2d00      	cmp	r5, #0
   11574:	d105      	bne.n	11582 <strncpy+0x24>
   11576:	18a4      	adds	r4, r4, r2
   11578:	429c      	cmp	r4, r3
   1157a:	d0f4      	beq.n	11566 <strncpy+0x8>
   1157c:	701d      	strb	r5, [r3, #0]
   1157e:	3301      	adds	r3, #1
   11580:	e7fa      	b.n	11578 <strncpy+0x1a>
   11582:	001c      	movs	r4, r3
   11584:	0032      	movs	r2, r6
   11586:	e7ec      	b.n	11562 <strncpy+0x4>

00011588 <__swbuf_r>:
   11588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1158a:	0005      	movs	r5, r0
   1158c:	000e      	movs	r6, r1
   1158e:	0014      	movs	r4, r2
   11590:	2800      	cmp	r0, #0
   11592:	d004      	beq.n	1159e <__swbuf_r+0x16>
   11594:	6983      	ldr	r3, [r0, #24]
   11596:	2b00      	cmp	r3, #0
   11598:	d101      	bne.n	1159e <__swbuf_r+0x16>
   1159a:	f001 f839 	bl	12610 <__sinit>
   1159e:	4b22      	ldr	r3, [pc, #136]	; (11628 <__swbuf_r+0xa0>)
   115a0:	429c      	cmp	r4, r3
   115a2:	d12d      	bne.n	11600 <__swbuf_r+0x78>
   115a4:	686c      	ldr	r4, [r5, #4]
   115a6:	69a3      	ldr	r3, [r4, #24]
   115a8:	60a3      	str	r3, [r4, #8]
   115aa:	89a3      	ldrh	r3, [r4, #12]
   115ac:	071b      	lsls	r3, r3, #28
   115ae:	d531      	bpl.n	11614 <__swbuf_r+0x8c>
   115b0:	6923      	ldr	r3, [r4, #16]
   115b2:	2b00      	cmp	r3, #0
   115b4:	d02e      	beq.n	11614 <__swbuf_r+0x8c>
   115b6:	6823      	ldr	r3, [r4, #0]
   115b8:	6922      	ldr	r2, [r4, #16]
   115ba:	b2f7      	uxtb	r7, r6
   115bc:	1a98      	subs	r0, r3, r2
   115be:	6963      	ldr	r3, [r4, #20]
   115c0:	b2f6      	uxtb	r6, r6
   115c2:	4298      	cmp	r0, r3
   115c4:	db05      	blt.n	115d2 <__swbuf_r+0x4a>
   115c6:	0021      	movs	r1, r4
   115c8:	0028      	movs	r0, r5
   115ca:	f000 ffb3 	bl	12534 <_fflush_r>
   115ce:	2800      	cmp	r0, #0
   115d0:	d126      	bne.n	11620 <__swbuf_r+0x98>
   115d2:	68a3      	ldr	r3, [r4, #8]
   115d4:	3001      	adds	r0, #1
   115d6:	3b01      	subs	r3, #1
   115d8:	60a3      	str	r3, [r4, #8]
   115da:	6823      	ldr	r3, [r4, #0]
   115dc:	1c5a      	adds	r2, r3, #1
   115de:	6022      	str	r2, [r4, #0]
   115e0:	701f      	strb	r7, [r3, #0]
   115e2:	6963      	ldr	r3, [r4, #20]
   115e4:	4298      	cmp	r0, r3
   115e6:	d004      	beq.n	115f2 <__swbuf_r+0x6a>
   115e8:	89a3      	ldrh	r3, [r4, #12]
   115ea:	07db      	lsls	r3, r3, #31
   115ec:	d51a      	bpl.n	11624 <__swbuf_r+0x9c>
   115ee:	2e0a      	cmp	r6, #10
   115f0:	d118      	bne.n	11624 <__swbuf_r+0x9c>
   115f2:	0021      	movs	r1, r4
   115f4:	0028      	movs	r0, r5
   115f6:	f000 ff9d 	bl	12534 <_fflush_r>
   115fa:	2800      	cmp	r0, #0
   115fc:	d012      	beq.n	11624 <__swbuf_r+0x9c>
   115fe:	e00f      	b.n	11620 <__swbuf_r+0x98>
   11600:	4b0a      	ldr	r3, [pc, #40]	; (1162c <__swbuf_r+0xa4>)
   11602:	429c      	cmp	r4, r3
   11604:	d101      	bne.n	1160a <__swbuf_r+0x82>
   11606:	68ac      	ldr	r4, [r5, #8]
   11608:	e7cd      	b.n	115a6 <__swbuf_r+0x1e>
   1160a:	4b09      	ldr	r3, [pc, #36]	; (11630 <__swbuf_r+0xa8>)
   1160c:	429c      	cmp	r4, r3
   1160e:	d1ca      	bne.n	115a6 <__swbuf_r+0x1e>
   11610:	68ec      	ldr	r4, [r5, #12]
   11612:	e7c8      	b.n	115a6 <__swbuf_r+0x1e>
   11614:	0021      	movs	r1, r4
   11616:	0028      	movs	r0, r5
   11618:	f000 f818 	bl	1164c <__swsetup_r>
   1161c:	2800      	cmp	r0, #0
   1161e:	d0ca      	beq.n	115b6 <__swbuf_r+0x2e>
   11620:	2601      	movs	r6, #1
   11622:	4276      	negs	r6, r6
   11624:	0030      	movs	r0, r6
   11626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11628:	000142e4 	.word	0x000142e4
   1162c:	00014304 	.word	0x00014304
   11630:	000142c4 	.word	0x000142c4

00011634 <__ascii_wctomb>:
   11634:	1e0b      	subs	r3, r1, #0
   11636:	d004      	beq.n	11642 <__ascii_wctomb+0xe>
   11638:	2aff      	cmp	r2, #255	; 0xff
   1163a:	d904      	bls.n	11646 <__ascii_wctomb+0x12>
   1163c:	238a      	movs	r3, #138	; 0x8a
   1163e:	6003      	str	r3, [r0, #0]
   11640:	3b8b      	subs	r3, #139	; 0x8b
   11642:	0018      	movs	r0, r3
   11644:	4770      	bx	lr
   11646:	700a      	strb	r2, [r1, #0]
   11648:	2301      	movs	r3, #1
   1164a:	e7fa      	b.n	11642 <__ascii_wctomb+0xe>

0001164c <__swsetup_r>:
   1164c:	4b36      	ldr	r3, [pc, #216]	; (11728 <__swsetup_r+0xdc>)
   1164e:	b570      	push	{r4, r5, r6, lr}
   11650:	681d      	ldr	r5, [r3, #0]
   11652:	0006      	movs	r6, r0
   11654:	000c      	movs	r4, r1
   11656:	2d00      	cmp	r5, #0
   11658:	d005      	beq.n	11666 <__swsetup_r+0x1a>
   1165a:	69ab      	ldr	r3, [r5, #24]
   1165c:	2b00      	cmp	r3, #0
   1165e:	d102      	bne.n	11666 <__swsetup_r+0x1a>
   11660:	0028      	movs	r0, r5
   11662:	f000 ffd5 	bl	12610 <__sinit>
   11666:	4b31      	ldr	r3, [pc, #196]	; (1172c <__swsetup_r+0xe0>)
   11668:	429c      	cmp	r4, r3
   1166a:	d10f      	bne.n	1168c <__swsetup_r+0x40>
   1166c:	686c      	ldr	r4, [r5, #4]
   1166e:	230c      	movs	r3, #12
   11670:	5ee2      	ldrsh	r2, [r4, r3]
   11672:	b293      	uxth	r3, r2
   11674:	0719      	lsls	r1, r3, #28
   11676:	d42d      	bmi.n	116d4 <__swsetup_r+0x88>
   11678:	06d9      	lsls	r1, r3, #27
   1167a:	d411      	bmi.n	116a0 <__swsetup_r+0x54>
   1167c:	2309      	movs	r3, #9
   1167e:	2001      	movs	r0, #1
   11680:	6033      	str	r3, [r6, #0]
   11682:	3337      	adds	r3, #55	; 0x37
   11684:	4313      	orrs	r3, r2
   11686:	81a3      	strh	r3, [r4, #12]
   11688:	4240      	negs	r0, r0
   1168a:	bd70      	pop	{r4, r5, r6, pc}
   1168c:	4b28      	ldr	r3, [pc, #160]	; (11730 <__swsetup_r+0xe4>)
   1168e:	429c      	cmp	r4, r3
   11690:	d101      	bne.n	11696 <__swsetup_r+0x4a>
   11692:	68ac      	ldr	r4, [r5, #8]
   11694:	e7eb      	b.n	1166e <__swsetup_r+0x22>
   11696:	4b27      	ldr	r3, [pc, #156]	; (11734 <__swsetup_r+0xe8>)
   11698:	429c      	cmp	r4, r3
   1169a:	d1e8      	bne.n	1166e <__swsetup_r+0x22>
   1169c:	68ec      	ldr	r4, [r5, #12]
   1169e:	e7e6      	b.n	1166e <__swsetup_r+0x22>
   116a0:	075b      	lsls	r3, r3, #29
   116a2:	d513      	bpl.n	116cc <__swsetup_r+0x80>
   116a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   116a6:	2900      	cmp	r1, #0
   116a8:	d008      	beq.n	116bc <__swsetup_r+0x70>
   116aa:	0023      	movs	r3, r4
   116ac:	3344      	adds	r3, #68	; 0x44
   116ae:	4299      	cmp	r1, r3
   116b0:	d002      	beq.n	116b8 <__swsetup_r+0x6c>
   116b2:	0030      	movs	r0, r6
   116b4:	f7ff f8be 	bl	10834 <_free_r>
   116b8:	2300      	movs	r3, #0
   116ba:	6363      	str	r3, [r4, #52]	; 0x34
   116bc:	2224      	movs	r2, #36	; 0x24
   116be:	89a3      	ldrh	r3, [r4, #12]
   116c0:	4393      	bics	r3, r2
   116c2:	81a3      	strh	r3, [r4, #12]
   116c4:	2300      	movs	r3, #0
   116c6:	6063      	str	r3, [r4, #4]
   116c8:	6923      	ldr	r3, [r4, #16]
   116ca:	6023      	str	r3, [r4, #0]
   116cc:	2308      	movs	r3, #8
   116ce:	89a2      	ldrh	r2, [r4, #12]
   116d0:	4313      	orrs	r3, r2
   116d2:	81a3      	strh	r3, [r4, #12]
   116d4:	6923      	ldr	r3, [r4, #16]
   116d6:	2b00      	cmp	r3, #0
   116d8:	d10b      	bne.n	116f2 <__swsetup_r+0xa6>
   116da:	21a0      	movs	r1, #160	; 0xa0
   116dc:	2280      	movs	r2, #128	; 0x80
   116de:	89a3      	ldrh	r3, [r4, #12]
   116e0:	0089      	lsls	r1, r1, #2
   116e2:	0092      	lsls	r2, r2, #2
   116e4:	400b      	ands	r3, r1
   116e6:	4293      	cmp	r3, r2
   116e8:	d003      	beq.n	116f2 <__swsetup_r+0xa6>
   116ea:	0021      	movs	r1, r4
   116ec:	0030      	movs	r0, r6
   116ee:	f001 f859 	bl	127a4 <__smakebuf_r>
   116f2:	2301      	movs	r3, #1
   116f4:	89a2      	ldrh	r2, [r4, #12]
   116f6:	4013      	ands	r3, r2
   116f8:	d011      	beq.n	1171e <__swsetup_r+0xd2>
   116fa:	2300      	movs	r3, #0
   116fc:	60a3      	str	r3, [r4, #8]
   116fe:	6963      	ldr	r3, [r4, #20]
   11700:	425b      	negs	r3, r3
   11702:	61a3      	str	r3, [r4, #24]
   11704:	2000      	movs	r0, #0
   11706:	6923      	ldr	r3, [r4, #16]
   11708:	4283      	cmp	r3, r0
   1170a:	d1be      	bne.n	1168a <__swsetup_r+0x3e>
   1170c:	230c      	movs	r3, #12
   1170e:	5ee2      	ldrsh	r2, [r4, r3]
   11710:	0613      	lsls	r3, r2, #24
   11712:	d5ba      	bpl.n	1168a <__swsetup_r+0x3e>
   11714:	2340      	movs	r3, #64	; 0x40
   11716:	4313      	orrs	r3, r2
   11718:	81a3      	strh	r3, [r4, #12]
   1171a:	3801      	subs	r0, #1
   1171c:	e7b5      	b.n	1168a <__swsetup_r+0x3e>
   1171e:	0792      	lsls	r2, r2, #30
   11720:	d400      	bmi.n	11724 <__swsetup_r+0xd8>
   11722:	6963      	ldr	r3, [r4, #20]
   11724:	60a3      	str	r3, [r4, #8]
   11726:	e7ed      	b.n	11704 <__swsetup_r+0xb8>
   11728:	200000a4 	.word	0x200000a4
   1172c:	000142e4 	.word	0x000142e4
   11730:	00014304 	.word	0x00014304
   11734:	000142c4 	.word	0x000142c4

00011738 <abort>:
   11738:	b510      	push	{r4, lr}
   1173a:	2006      	movs	r0, #6
   1173c:	f001 fbc4 	bl	12ec8 <raise>
   11740:	2001      	movs	r0, #1
   11742:	f001 fd41 	bl	131c8 <_exit>

00011746 <quorem>:
   11746:	b5f0      	push	{r4, r5, r6, r7, lr}
   11748:	6903      	ldr	r3, [r0, #16]
   1174a:	690c      	ldr	r4, [r1, #16]
   1174c:	b089      	sub	sp, #36	; 0x24
   1174e:	0007      	movs	r7, r0
   11750:	9105      	str	r1, [sp, #20]
   11752:	2600      	movs	r6, #0
   11754:	429c      	cmp	r4, r3
   11756:	dc6d      	bgt.n	11834 <quorem+0xee>
   11758:	000b      	movs	r3, r1
   1175a:	3c01      	subs	r4, #1
   1175c:	3314      	adds	r3, #20
   1175e:	00a5      	lsls	r5, r4, #2
   11760:	9303      	str	r3, [sp, #12]
   11762:	195b      	adds	r3, r3, r5
   11764:	9304      	str	r3, [sp, #16]
   11766:	0003      	movs	r3, r0
   11768:	3314      	adds	r3, #20
   1176a:	9302      	str	r3, [sp, #8]
   1176c:	195d      	adds	r5, r3, r5
   1176e:	9b04      	ldr	r3, [sp, #16]
   11770:	6828      	ldr	r0, [r5, #0]
   11772:	681b      	ldr	r3, [r3, #0]
   11774:	1c59      	adds	r1, r3, #1
   11776:	9301      	str	r3, [sp, #4]
   11778:	f7fd f87e 	bl	e878 <__udivsi3>
   1177c:	9001      	str	r0, [sp, #4]
   1177e:	42b0      	cmp	r0, r6
   11780:	d02d      	beq.n	117de <quorem+0x98>
   11782:	9b03      	ldr	r3, [sp, #12]
   11784:	9802      	ldr	r0, [sp, #8]
   11786:	469c      	mov	ip, r3
   11788:	9606      	str	r6, [sp, #24]
   1178a:	4662      	mov	r2, ip
   1178c:	ca08      	ldmia	r2!, {r3}
   1178e:	4694      	mov	ip, r2
   11790:	9a01      	ldr	r2, [sp, #4]
   11792:	b299      	uxth	r1, r3
   11794:	4351      	muls	r1, r2
   11796:	0c1b      	lsrs	r3, r3, #16
   11798:	4353      	muls	r3, r2
   1179a:	1989      	adds	r1, r1, r6
   1179c:	0c0a      	lsrs	r2, r1, #16
   1179e:	189b      	adds	r3, r3, r2
   117a0:	9307      	str	r3, [sp, #28]
   117a2:	8802      	ldrh	r2, [r0, #0]
   117a4:	0c1e      	lsrs	r6, r3, #16
   117a6:	9b06      	ldr	r3, [sp, #24]
   117a8:	b289      	uxth	r1, r1
   117aa:	18d2      	adds	r2, r2, r3
   117ac:	6803      	ldr	r3, [r0, #0]
   117ae:	1a52      	subs	r2, r2, r1
   117b0:	0c19      	lsrs	r1, r3, #16
   117b2:	466b      	mov	r3, sp
   117b4:	8b9b      	ldrh	r3, [r3, #28]
   117b6:	1acb      	subs	r3, r1, r3
   117b8:	1411      	asrs	r1, r2, #16
   117ba:	185b      	adds	r3, r3, r1
   117bc:	1419      	asrs	r1, r3, #16
   117be:	b292      	uxth	r2, r2
   117c0:	041b      	lsls	r3, r3, #16
   117c2:	431a      	orrs	r2, r3
   117c4:	9b04      	ldr	r3, [sp, #16]
   117c6:	9106      	str	r1, [sp, #24]
   117c8:	c004      	stmia	r0!, {r2}
   117ca:	4563      	cmp	r3, ip
   117cc:	d2dd      	bcs.n	1178a <quorem+0x44>
   117ce:	682b      	ldr	r3, [r5, #0]
   117d0:	2b00      	cmp	r3, #0
   117d2:	d104      	bne.n	117de <quorem+0x98>
   117d4:	9b02      	ldr	r3, [sp, #8]
   117d6:	3d04      	subs	r5, #4
   117d8:	42ab      	cmp	r3, r5
   117da:	d32e      	bcc.n	1183a <quorem+0xf4>
   117dc:	613c      	str	r4, [r7, #16]
   117de:	9905      	ldr	r1, [sp, #20]
   117e0:	0038      	movs	r0, r7
   117e2:	f001 fa42 	bl	12c6a <__mcmp>
   117e6:	2800      	cmp	r0, #0
   117e8:	db23      	blt.n	11832 <quorem+0xec>
   117ea:	2500      	movs	r5, #0
   117ec:	9b01      	ldr	r3, [sp, #4]
   117ee:	9802      	ldr	r0, [sp, #8]
   117f0:	3301      	adds	r3, #1
   117f2:	9903      	ldr	r1, [sp, #12]
   117f4:	9301      	str	r3, [sp, #4]
   117f6:	c908      	ldmia	r1!, {r3}
   117f8:	8802      	ldrh	r2, [r0, #0]
   117fa:	1955      	adds	r5, r2, r5
   117fc:	b29a      	uxth	r2, r3
   117fe:	1aaa      	subs	r2, r5, r2
   11800:	6805      	ldr	r5, [r0, #0]
   11802:	0c1b      	lsrs	r3, r3, #16
   11804:	0c2d      	lsrs	r5, r5, #16
   11806:	1aeb      	subs	r3, r5, r3
   11808:	1415      	asrs	r5, r2, #16
   1180a:	195b      	adds	r3, r3, r5
   1180c:	141d      	asrs	r5, r3, #16
   1180e:	b292      	uxth	r2, r2
   11810:	041b      	lsls	r3, r3, #16
   11812:	4313      	orrs	r3, r2
   11814:	c008      	stmia	r0!, {r3}
   11816:	9b04      	ldr	r3, [sp, #16]
   11818:	428b      	cmp	r3, r1
   1181a:	d2ec      	bcs.n	117f6 <quorem+0xb0>
   1181c:	9a02      	ldr	r2, [sp, #8]
   1181e:	00a3      	lsls	r3, r4, #2
   11820:	18d3      	adds	r3, r2, r3
   11822:	681a      	ldr	r2, [r3, #0]
   11824:	2a00      	cmp	r2, #0
   11826:	d104      	bne.n	11832 <quorem+0xec>
   11828:	9a02      	ldr	r2, [sp, #8]
   1182a:	3b04      	subs	r3, #4
   1182c:	429a      	cmp	r2, r3
   1182e:	d309      	bcc.n	11844 <quorem+0xfe>
   11830:	613c      	str	r4, [r7, #16]
   11832:	9e01      	ldr	r6, [sp, #4]
   11834:	0030      	movs	r0, r6
   11836:	b009      	add	sp, #36	; 0x24
   11838:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1183a:	682b      	ldr	r3, [r5, #0]
   1183c:	2b00      	cmp	r3, #0
   1183e:	d1cd      	bne.n	117dc <quorem+0x96>
   11840:	3c01      	subs	r4, #1
   11842:	e7c7      	b.n	117d4 <quorem+0x8e>
   11844:	681a      	ldr	r2, [r3, #0]
   11846:	2a00      	cmp	r2, #0
   11848:	d1f2      	bne.n	11830 <quorem+0xea>
   1184a:	3c01      	subs	r4, #1
   1184c:	e7ec      	b.n	11828 <quorem+0xe2>
	...

00011850 <_dtoa_r>:
   11850:	b5f0      	push	{r4, r5, r6, r7, lr}
   11852:	0016      	movs	r6, r2
   11854:	001f      	movs	r7, r3
   11856:	6a44      	ldr	r4, [r0, #36]	; 0x24
   11858:	b09d      	sub	sp, #116	; 0x74
   1185a:	9004      	str	r0, [sp, #16]
   1185c:	9d25      	ldr	r5, [sp, #148]	; 0x94
   1185e:	9606      	str	r6, [sp, #24]
   11860:	9707      	str	r7, [sp, #28]
   11862:	2c00      	cmp	r4, #0
   11864:	d108      	bne.n	11878 <_dtoa_r+0x28>
   11866:	2010      	movs	r0, #16
   11868:	f7fe ff9e 	bl	107a8 <malloc>
   1186c:	9b04      	ldr	r3, [sp, #16]
   1186e:	6258      	str	r0, [r3, #36]	; 0x24
   11870:	6044      	str	r4, [r0, #4]
   11872:	6084      	str	r4, [r0, #8]
   11874:	6004      	str	r4, [r0, #0]
   11876:	60c4      	str	r4, [r0, #12]
   11878:	9b04      	ldr	r3, [sp, #16]
   1187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1187c:	6819      	ldr	r1, [r3, #0]
   1187e:	2900      	cmp	r1, #0
   11880:	d00b      	beq.n	1189a <_dtoa_r+0x4a>
   11882:	685a      	ldr	r2, [r3, #4]
   11884:	2301      	movs	r3, #1
   11886:	4093      	lsls	r3, r2
   11888:	604a      	str	r2, [r1, #4]
   1188a:	608b      	str	r3, [r1, #8]
   1188c:	9804      	ldr	r0, [sp, #16]
   1188e:	f001 f812 	bl	128b6 <_Bfree>
   11892:	2200      	movs	r2, #0
   11894:	9b04      	ldr	r3, [sp, #16]
   11896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11898:	601a      	str	r2, [r3, #0]
   1189a:	9b07      	ldr	r3, [sp, #28]
   1189c:	2b00      	cmp	r3, #0
   1189e:	da1f      	bge.n	118e0 <_dtoa_r+0x90>
   118a0:	2301      	movs	r3, #1
   118a2:	602b      	str	r3, [r5, #0]
   118a4:	007b      	lsls	r3, r7, #1
   118a6:	085b      	lsrs	r3, r3, #1
   118a8:	9307      	str	r3, [sp, #28]
   118aa:	9c07      	ldr	r4, [sp, #28]
   118ac:	4bb7      	ldr	r3, [pc, #732]	; (11b8c <_dtoa_r+0x33c>)
   118ae:	0022      	movs	r2, r4
   118b0:	9319      	str	r3, [sp, #100]	; 0x64
   118b2:	401a      	ands	r2, r3
   118b4:	429a      	cmp	r2, r3
   118b6:	d116      	bne.n	118e6 <_dtoa_r+0x96>
   118b8:	4bb5      	ldr	r3, [pc, #724]	; (11b90 <_dtoa_r+0x340>)
   118ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
   118bc:	6013      	str	r3, [r2, #0]
   118be:	9b06      	ldr	r3, [sp, #24]
   118c0:	2b00      	cmp	r3, #0
   118c2:	d103      	bne.n	118cc <_dtoa_r+0x7c>
   118c4:	0324      	lsls	r4, r4, #12
   118c6:	d101      	bne.n	118cc <_dtoa_r+0x7c>
   118c8:	f000 fd91 	bl	123ee <_dtoa_r+0xb9e>
   118cc:	4bb1      	ldr	r3, [pc, #708]	; (11b94 <_dtoa_r+0x344>)
   118ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
   118d0:	930a      	str	r3, [sp, #40]	; 0x28
   118d2:	4bb1      	ldr	r3, [pc, #708]	; (11b98 <_dtoa_r+0x348>)
   118d4:	2a00      	cmp	r2, #0
   118d6:	d001      	beq.n	118dc <_dtoa_r+0x8c>
   118d8:	f000 fd8f 	bl	123fa <_dtoa_r+0xbaa>
   118dc:	f000 fd8f 	bl	123fe <_dtoa_r+0xbae>
   118e0:	2300      	movs	r3, #0
   118e2:	602b      	str	r3, [r5, #0]
   118e4:	e7e1      	b.n	118aa <_dtoa_r+0x5a>
   118e6:	9e06      	ldr	r6, [sp, #24]
   118e8:	9f07      	ldr	r7, [sp, #28]
   118ea:	2200      	movs	r2, #0
   118ec:	2300      	movs	r3, #0
   118ee:	0030      	movs	r0, r6
   118f0:	0039      	movs	r1, r7
   118f2:	f7fd f947 	bl	eb84 <__aeabi_dcmpeq>
   118f6:	1e05      	subs	r5, r0, #0
   118f8:	d00e      	beq.n	11918 <_dtoa_r+0xc8>
   118fa:	2301      	movs	r3, #1
   118fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   118fe:	6013      	str	r3, [r2, #0]
   11900:	4ba6      	ldr	r3, [pc, #664]	; (11b9c <_dtoa_r+0x34c>)
   11902:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11904:	930a      	str	r3, [sp, #40]	; 0x28
   11906:	2a00      	cmp	r2, #0
   11908:	d101      	bne.n	1190e <_dtoa_r+0xbe>
   1190a:	f000 fd78 	bl	123fe <_dtoa_r+0xbae>
   1190e:	4aa4      	ldr	r2, [pc, #656]	; (11ba0 <_dtoa_r+0x350>)
   11910:	9926      	ldr	r1, [sp, #152]	; 0x98
   11912:	600a      	str	r2, [r1, #0]
   11914:	f000 fd73 	bl	123fe <_dtoa_r+0xbae>
   11918:	ab1a      	add	r3, sp, #104	; 0x68
   1191a:	9301      	str	r3, [sp, #4]
   1191c:	ab1b      	add	r3, sp, #108	; 0x6c
   1191e:	9300      	str	r3, [sp, #0]
   11920:	0032      	movs	r2, r6
   11922:	003b      	movs	r3, r7
   11924:	9804      	ldr	r0, [sp, #16]
   11926:	f001 fa1d 	bl	12d64 <__d2b>
   1192a:	0063      	lsls	r3, r4, #1
   1192c:	9005      	str	r0, [sp, #20]
   1192e:	0d5b      	lsrs	r3, r3, #21
   11930:	d100      	bne.n	11934 <_dtoa_r+0xe4>
   11932:	e07f      	b.n	11a34 <_dtoa_r+0x1e4>
   11934:	033a      	lsls	r2, r7, #12
   11936:	4c9b      	ldr	r4, [pc, #620]	; (11ba4 <_dtoa_r+0x354>)
   11938:	0b12      	lsrs	r2, r2, #12
   1193a:	4314      	orrs	r4, r2
   1193c:	0021      	movs	r1, r4
   1193e:	4a9a      	ldr	r2, [pc, #616]	; (11ba8 <_dtoa_r+0x358>)
   11940:	0030      	movs	r0, r6
   11942:	9518      	str	r5, [sp, #96]	; 0x60
   11944:	189e      	adds	r6, r3, r2
   11946:	2200      	movs	r2, #0
   11948:	4b98      	ldr	r3, [pc, #608]	; (11bac <_dtoa_r+0x35c>)
   1194a:	f7fe fb0d 	bl	ff68 <__aeabi_dsub>
   1194e:	4a98      	ldr	r2, [pc, #608]	; (11bb0 <_dtoa_r+0x360>)
   11950:	4b98      	ldr	r3, [pc, #608]	; (11bb4 <_dtoa_r+0x364>)
   11952:	f7fe f889 	bl	fa68 <__aeabi_dmul>
   11956:	4a98      	ldr	r2, [pc, #608]	; (11bb8 <_dtoa_r+0x368>)
   11958:	4b98      	ldr	r3, [pc, #608]	; (11bbc <_dtoa_r+0x36c>)
   1195a:	f7fd f941 	bl	ebe0 <__aeabi_dadd>
   1195e:	0004      	movs	r4, r0
   11960:	0030      	movs	r0, r6
   11962:	000d      	movs	r5, r1
   11964:	f001 fba0 	bl	130a8 <__aeabi_i2d>
   11968:	4a95      	ldr	r2, [pc, #596]	; (11bc0 <_dtoa_r+0x370>)
   1196a:	4b96      	ldr	r3, [pc, #600]	; (11bc4 <_dtoa_r+0x374>)
   1196c:	f7fe f87c 	bl	fa68 <__aeabi_dmul>
   11970:	0002      	movs	r2, r0
   11972:	000b      	movs	r3, r1
   11974:	0020      	movs	r0, r4
   11976:	0029      	movs	r1, r5
   11978:	f7fd f932 	bl	ebe0 <__aeabi_dadd>
   1197c:	0004      	movs	r4, r0
   1197e:	000d      	movs	r5, r1
   11980:	f7fe fe28 	bl	105d4 <__aeabi_d2iz>
   11984:	2200      	movs	r2, #0
   11986:	9003      	str	r0, [sp, #12]
   11988:	2300      	movs	r3, #0
   1198a:	0020      	movs	r0, r4
   1198c:	0029      	movs	r1, r5
   1198e:	f7fd f8ff 	bl	eb90 <__aeabi_dcmplt>
   11992:	2800      	cmp	r0, #0
   11994:	d00e      	beq.n	119b4 <_dtoa_r+0x164>
   11996:	9803      	ldr	r0, [sp, #12]
   11998:	f001 fb86 	bl	130a8 <__aeabi_i2d>
   1199c:	000b      	movs	r3, r1
   1199e:	0002      	movs	r2, r0
   119a0:	0029      	movs	r1, r5
   119a2:	0020      	movs	r0, r4
   119a4:	f7fd f8ee 	bl	eb84 <__aeabi_dcmpeq>
   119a8:	0003      	movs	r3, r0
   119aa:	4258      	negs	r0, r3
   119ac:	4158      	adcs	r0, r3
   119ae:	9b03      	ldr	r3, [sp, #12]
   119b0:	1a1b      	subs	r3, r3, r0
   119b2:	9303      	str	r3, [sp, #12]
   119b4:	2301      	movs	r3, #1
   119b6:	9316      	str	r3, [sp, #88]	; 0x58
   119b8:	9b03      	ldr	r3, [sp, #12]
   119ba:	2b16      	cmp	r3, #22
   119bc:	d80f      	bhi.n	119de <_dtoa_r+0x18e>
   119be:	4982      	ldr	r1, [pc, #520]	; (11bc8 <_dtoa_r+0x378>)
   119c0:	00db      	lsls	r3, r3, #3
   119c2:	18c9      	adds	r1, r1, r3
   119c4:	6808      	ldr	r0, [r1, #0]
   119c6:	6849      	ldr	r1, [r1, #4]
   119c8:	9a06      	ldr	r2, [sp, #24]
   119ca:	9b07      	ldr	r3, [sp, #28]
   119cc:	f7fd f8f4 	bl	ebb8 <__aeabi_dcmpgt>
   119d0:	2800      	cmp	r0, #0
   119d2:	d04b      	beq.n	11a6c <_dtoa_r+0x21c>
   119d4:	9b03      	ldr	r3, [sp, #12]
   119d6:	3b01      	subs	r3, #1
   119d8:	9303      	str	r3, [sp, #12]
   119da:	2300      	movs	r3, #0
   119dc:	9316      	str	r3, [sp, #88]	; 0x58
   119de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   119e0:	1b9e      	subs	r6, r3, r6
   119e2:	2300      	movs	r3, #0
   119e4:	930b      	str	r3, [sp, #44]	; 0x2c
   119e6:	0033      	movs	r3, r6
   119e8:	3b01      	subs	r3, #1
   119ea:	930c      	str	r3, [sp, #48]	; 0x30
   119ec:	d504      	bpl.n	119f8 <_dtoa_r+0x1a8>
   119ee:	2301      	movs	r3, #1
   119f0:	1b9b      	subs	r3, r3, r6
   119f2:	930b      	str	r3, [sp, #44]	; 0x2c
   119f4:	2300      	movs	r3, #0
   119f6:	930c      	str	r3, [sp, #48]	; 0x30
   119f8:	9b03      	ldr	r3, [sp, #12]
   119fa:	2b00      	cmp	r3, #0
   119fc:	db38      	blt.n	11a70 <_dtoa_r+0x220>
   119fe:	9a03      	ldr	r2, [sp, #12]
   11a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11a02:	4694      	mov	ip, r2
   11a04:	4463      	add	r3, ip
   11a06:	930c      	str	r3, [sp, #48]	; 0x30
   11a08:	2300      	movs	r3, #0
   11a0a:	920f      	str	r2, [sp, #60]	; 0x3c
   11a0c:	9308      	str	r3, [sp, #32]
   11a0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11a10:	2501      	movs	r5, #1
   11a12:	2b09      	cmp	r3, #9
   11a14:	d900      	bls.n	11a18 <_dtoa_r+0x1c8>
   11a16:	e091      	b.n	11b3c <_dtoa_r+0x2ec>
   11a18:	2b05      	cmp	r3, #5
   11a1a:	dd02      	ble.n	11a22 <_dtoa_r+0x1d2>
   11a1c:	2500      	movs	r5, #0
   11a1e:	3b04      	subs	r3, #4
   11a20:	9322      	str	r3, [sp, #136]	; 0x88
   11a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11a24:	1e98      	subs	r0, r3, #2
   11a26:	2803      	cmp	r0, #3
   11a28:	d900      	bls.n	11a2c <_dtoa_r+0x1dc>
   11a2a:	e091      	b.n	11b50 <_dtoa_r+0x300>
   11a2c:	f001 fb32 	bl	13094 <__gnu_thumb1_case_uqi>
   11a30:	76298482 	.word	0x76298482
   11a34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11a36:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11a38:	189e      	adds	r6, r3, r2
   11a3a:	4b64      	ldr	r3, [pc, #400]	; (11bcc <_dtoa_r+0x37c>)
   11a3c:	18f2      	adds	r2, r6, r3
   11a3e:	2a20      	cmp	r2, #32
   11a40:	dd0f      	ble.n	11a62 <_dtoa_r+0x212>
   11a42:	4b63      	ldr	r3, [pc, #396]	; (11bd0 <_dtoa_r+0x380>)
   11a44:	9806      	ldr	r0, [sp, #24]
   11a46:	18f3      	adds	r3, r6, r3
   11a48:	40d8      	lsrs	r0, r3
   11a4a:	2340      	movs	r3, #64	; 0x40
   11a4c:	1a9b      	subs	r3, r3, r2
   11a4e:	409c      	lsls	r4, r3
   11a50:	4320      	orrs	r0, r4
   11a52:	f7fe fdf3 	bl	1063c <__aeabi_ui2d>
   11a56:	2301      	movs	r3, #1
   11a58:	4c5e      	ldr	r4, [pc, #376]	; (11bd4 <_dtoa_r+0x384>)
   11a5a:	3e01      	subs	r6, #1
   11a5c:	1909      	adds	r1, r1, r4
   11a5e:	9318      	str	r3, [sp, #96]	; 0x60
   11a60:	e771      	b.n	11946 <_dtoa_r+0xf6>
   11a62:	2320      	movs	r3, #32
   11a64:	9806      	ldr	r0, [sp, #24]
   11a66:	1a9b      	subs	r3, r3, r2
   11a68:	4098      	lsls	r0, r3
   11a6a:	e7f2      	b.n	11a52 <_dtoa_r+0x202>
   11a6c:	9016      	str	r0, [sp, #88]	; 0x58
   11a6e:	e7b6      	b.n	119de <_dtoa_r+0x18e>
   11a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a72:	9a03      	ldr	r2, [sp, #12]
   11a74:	1a9b      	subs	r3, r3, r2
   11a76:	930b      	str	r3, [sp, #44]	; 0x2c
   11a78:	4253      	negs	r3, r2
   11a7a:	9308      	str	r3, [sp, #32]
   11a7c:	2300      	movs	r3, #0
   11a7e:	930f      	str	r3, [sp, #60]	; 0x3c
   11a80:	e7c5      	b.n	11a0e <_dtoa_r+0x1be>
   11a82:	2301      	movs	r3, #1
   11a84:	930e      	str	r3, [sp, #56]	; 0x38
   11a86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11a88:	2b00      	cmp	r3, #0
   11a8a:	dd65      	ble.n	11b58 <_dtoa_r+0x308>
   11a8c:	001f      	movs	r7, r3
   11a8e:	930d      	str	r3, [sp, #52]	; 0x34
   11a90:	9a04      	ldr	r2, [sp, #16]
   11a92:	6a54      	ldr	r4, [r2, #36]	; 0x24
   11a94:	2200      	movs	r2, #0
   11a96:	6062      	str	r2, [r4, #4]
   11a98:	3204      	adds	r2, #4
   11a9a:	0011      	movs	r1, r2
   11a9c:	3114      	adds	r1, #20
   11a9e:	4299      	cmp	r1, r3
   11aa0:	d95f      	bls.n	11b62 <_dtoa_r+0x312>
   11aa2:	6861      	ldr	r1, [r4, #4]
   11aa4:	9804      	ldr	r0, [sp, #16]
   11aa6:	f000 fece 	bl	12846 <_Balloc>
   11aaa:	9b04      	ldr	r3, [sp, #16]
   11aac:	6020      	str	r0, [r4, #0]
   11aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11ab0:	681b      	ldr	r3, [r3, #0]
   11ab2:	930a      	str	r3, [sp, #40]	; 0x28
   11ab4:	2f0e      	cmp	r7, #14
   11ab6:	d900      	bls.n	11aba <_dtoa_r+0x26a>
   11ab8:	e105      	b.n	11cc6 <_dtoa_r+0x476>
   11aba:	2d00      	cmp	r5, #0
   11abc:	d100      	bne.n	11ac0 <_dtoa_r+0x270>
   11abe:	e102      	b.n	11cc6 <_dtoa_r+0x476>
   11ac0:	9b06      	ldr	r3, [sp, #24]
   11ac2:	9c07      	ldr	r4, [sp, #28]
   11ac4:	9314      	str	r3, [sp, #80]	; 0x50
   11ac6:	9415      	str	r4, [sp, #84]	; 0x54
   11ac8:	9b03      	ldr	r3, [sp, #12]
   11aca:	2b00      	cmp	r3, #0
   11acc:	dc00      	bgt.n	11ad0 <_dtoa_r+0x280>
   11ace:	e085      	b.n	11bdc <_dtoa_r+0x38c>
   11ad0:	001a      	movs	r2, r3
   11ad2:	210f      	movs	r1, #15
   11ad4:	4b3c      	ldr	r3, [pc, #240]	; (11bc8 <_dtoa_r+0x378>)
   11ad6:	400a      	ands	r2, r1
   11ad8:	00d2      	lsls	r2, r2, #3
   11ada:	189b      	adds	r3, r3, r2
   11adc:	685c      	ldr	r4, [r3, #4]
   11ade:	681b      	ldr	r3, [r3, #0]
   11ae0:	9310      	str	r3, [sp, #64]	; 0x40
   11ae2:	9411      	str	r4, [sp, #68]	; 0x44
   11ae4:	9b03      	ldr	r3, [sp, #12]
   11ae6:	2402      	movs	r4, #2
   11ae8:	111d      	asrs	r5, r3, #4
   11aea:	06eb      	lsls	r3, r5, #27
   11aec:	d50a      	bpl.n	11b04 <_dtoa_r+0x2b4>
   11aee:	4b3a      	ldr	r3, [pc, #232]	; (11bd8 <_dtoa_r+0x388>)
   11af0:	400d      	ands	r5, r1
   11af2:	6a1a      	ldr	r2, [r3, #32]
   11af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11af6:	9814      	ldr	r0, [sp, #80]	; 0x50
   11af8:	9915      	ldr	r1, [sp, #84]	; 0x54
   11afa:	f7fd fb81 	bl	f200 <__aeabi_ddiv>
   11afe:	9006      	str	r0, [sp, #24]
   11b00:	9107      	str	r1, [sp, #28]
   11b02:	3401      	adds	r4, #1
   11b04:	4e34      	ldr	r6, [pc, #208]	; (11bd8 <_dtoa_r+0x388>)
   11b06:	2d00      	cmp	r5, #0
   11b08:	d130      	bne.n	11b6c <_dtoa_r+0x31c>
   11b0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11b0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11b0e:	9806      	ldr	r0, [sp, #24]
   11b10:	9907      	ldr	r1, [sp, #28]
   11b12:	f7fd fb75 	bl	f200 <__aeabi_ddiv>
   11b16:	9006      	str	r0, [sp, #24]
   11b18:	9107      	str	r1, [sp, #28]
   11b1a:	e07a      	b.n	11c12 <_dtoa_r+0x3c2>
   11b1c:	2301      	movs	r3, #1
   11b1e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11b20:	930e      	str	r3, [sp, #56]	; 0x38
   11b22:	4694      	mov	ip, r2
   11b24:	9b03      	ldr	r3, [sp, #12]
   11b26:	4463      	add	r3, ip
   11b28:	1c5f      	adds	r7, r3, #1
   11b2a:	930d      	str	r3, [sp, #52]	; 0x34
   11b2c:	1e3b      	subs	r3, r7, #0
   11b2e:	dcaf      	bgt.n	11a90 <_dtoa_r+0x240>
   11b30:	2301      	movs	r3, #1
   11b32:	e7ad      	b.n	11a90 <_dtoa_r+0x240>
   11b34:	2300      	movs	r3, #0
   11b36:	e7a5      	b.n	11a84 <_dtoa_r+0x234>
   11b38:	2300      	movs	r3, #0
   11b3a:	e7f0      	b.n	11b1e <_dtoa_r+0x2ce>
   11b3c:	2300      	movs	r3, #0
   11b3e:	950e      	str	r5, [sp, #56]	; 0x38
   11b40:	9322      	str	r3, [sp, #136]	; 0x88
   11b42:	3b01      	subs	r3, #1
   11b44:	2200      	movs	r2, #0
   11b46:	930d      	str	r3, [sp, #52]	; 0x34
   11b48:	001f      	movs	r7, r3
   11b4a:	3313      	adds	r3, #19
   11b4c:	9223      	str	r2, [sp, #140]	; 0x8c
   11b4e:	e79f      	b.n	11a90 <_dtoa_r+0x240>
   11b50:	2301      	movs	r3, #1
   11b52:	930e      	str	r3, [sp, #56]	; 0x38
   11b54:	3b02      	subs	r3, #2
   11b56:	e7f5      	b.n	11b44 <_dtoa_r+0x2f4>
   11b58:	2301      	movs	r3, #1
   11b5a:	930d      	str	r3, [sp, #52]	; 0x34
   11b5c:	001f      	movs	r7, r3
   11b5e:	001a      	movs	r2, r3
   11b60:	e7f4      	b.n	11b4c <_dtoa_r+0x2fc>
   11b62:	6861      	ldr	r1, [r4, #4]
   11b64:	0052      	lsls	r2, r2, #1
   11b66:	3101      	adds	r1, #1
   11b68:	6061      	str	r1, [r4, #4]
   11b6a:	e796      	b.n	11a9a <_dtoa_r+0x24a>
   11b6c:	2301      	movs	r3, #1
   11b6e:	421d      	tst	r5, r3
   11b70:	d008      	beq.n	11b84 <_dtoa_r+0x334>
   11b72:	9810      	ldr	r0, [sp, #64]	; 0x40
   11b74:	9911      	ldr	r1, [sp, #68]	; 0x44
   11b76:	18e4      	adds	r4, r4, r3
   11b78:	6832      	ldr	r2, [r6, #0]
   11b7a:	6873      	ldr	r3, [r6, #4]
   11b7c:	f7fd ff74 	bl	fa68 <__aeabi_dmul>
   11b80:	9010      	str	r0, [sp, #64]	; 0x40
   11b82:	9111      	str	r1, [sp, #68]	; 0x44
   11b84:	106d      	asrs	r5, r5, #1
   11b86:	3608      	adds	r6, #8
   11b88:	e7bd      	b.n	11b06 <_dtoa_r+0x2b6>
   11b8a:	46c0      	nop			; (mov r8, r8)
   11b8c:	7ff00000 	.word	0x7ff00000
   11b90:	0000270f 	.word	0x0000270f
   11b94:	000142bd 	.word	0x000142bd
   11b98:	000142c0 	.word	0x000142c0
   11b9c:	0001418f 	.word	0x0001418f
   11ba0:	00014190 	.word	0x00014190
   11ba4:	3ff00000 	.word	0x3ff00000
   11ba8:	fffffc01 	.word	0xfffffc01
   11bac:	3ff80000 	.word	0x3ff80000
   11bb0:	636f4361 	.word	0x636f4361
   11bb4:	3fd287a7 	.word	0x3fd287a7
   11bb8:	8b60c8b3 	.word	0x8b60c8b3
   11bbc:	3fc68a28 	.word	0x3fc68a28
   11bc0:	509f79fb 	.word	0x509f79fb
   11bc4:	3fd34413 	.word	0x3fd34413
   11bc8:	00014350 	.word	0x00014350
   11bcc:	00000432 	.word	0x00000432
   11bd0:	00000412 	.word	0x00000412
   11bd4:	fe100000 	.word	0xfe100000
   11bd8:	00014328 	.word	0x00014328
   11bdc:	9b03      	ldr	r3, [sp, #12]
   11bde:	2402      	movs	r4, #2
   11be0:	2b00      	cmp	r3, #0
   11be2:	d016      	beq.n	11c12 <_dtoa_r+0x3c2>
   11be4:	9814      	ldr	r0, [sp, #80]	; 0x50
   11be6:	9915      	ldr	r1, [sp, #84]	; 0x54
   11be8:	425d      	negs	r5, r3
   11bea:	230f      	movs	r3, #15
   11bec:	4aca      	ldr	r2, [pc, #808]	; (11f18 <_dtoa_r+0x6c8>)
   11bee:	402b      	ands	r3, r5
   11bf0:	00db      	lsls	r3, r3, #3
   11bf2:	18d3      	adds	r3, r2, r3
   11bf4:	681a      	ldr	r2, [r3, #0]
   11bf6:	685b      	ldr	r3, [r3, #4]
   11bf8:	f7fd ff36 	bl	fa68 <__aeabi_dmul>
   11bfc:	2300      	movs	r3, #0
   11bfe:	9006      	str	r0, [sp, #24]
   11c00:	9107      	str	r1, [sp, #28]
   11c02:	4ec6      	ldr	r6, [pc, #792]	; (11f1c <_dtoa_r+0x6cc>)
   11c04:	112d      	asrs	r5, r5, #4
   11c06:	2d00      	cmp	r5, #0
   11c08:	d000      	beq.n	11c0c <_dtoa_r+0x3bc>
   11c0a:	e08c      	b.n	11d26 <_dtoa_r+0x4d6>
   11c0c:	2b00      	cmp	r3, #0
   11c0e:	d000      	beq.n	11c12 <_dtoa_r+0x3c2>
   11c10:	e781      	b.n	11b16 <_dtoa_r+0x2c6>
   11c12:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11c14:	2b00      	cmp	r3, #0
   11c16:	d100      	bne.n	11c1a <_dtoa_r+0x3ca>
   11c18:	e091      	b.n	11d3e <_dtoa_r+0x4ee>
   11c1a:	9a06      	ldr	r2, [sp, #24]
   11c1c:	9b07      	ldr	r3, [sp, #28]
   11c1e:	9210      	str	r2, [sp, #64]	; 0x40
   11c20:	9311      	str	r3, [sp, #68]	; 0x44
   11c22:	9810      	ldr	r0, [sp, #64]	; 0x40
   11c24:	9911      	ldr	r1, [sp, #68]	; 0x44
   11c26:	2200      	movs	r2, #0
   11c28:	4bbd      	ldr	r3, [pc, #756]	; (11f20 <_dtoa_r+0x6d0>)
   11c2a:	f7fc ffb1 	bl	eb90 <__aeabi_dcmplt>
   11c2e:	2800      	cmp	r0, #0
   11c30:	d100      	bne.n	11c34 <_dtoa_r+0x3e4>
   11c32:	e084      	b.n	11d3e <_dtoa_r+0x4ee>
   11c34:	2f00      	cmp	r7, #0
   11c36:	d100      	bne.n	11c3a <_dtoa_r+0x3ea>
   11c38:	e081      	b.n	11d3e <_dtoa_r+0x4ee>
   11c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	dd3e      	ble.n	11cbe <_dtoa_r+0x46e>
   11c40:	9810      	ldr	r0, [sp, #64]	; 0x40
   11c42:	9911      	ldr	r1, [sp, #68]	; 0x44
   11c44:	9b03      	ldr	r3, [sp, #12]
   11c46:	2200      	movs	r2, #0
   11c48:	1e5e      	subs	r6, r3, #1
   11c4a:	4bb6      	ldr	r3, [pc, #728]	; (11f24 <_dtoa_r+0x6d4>)
   11c4c:	f7fd ff0c 	bl	fa68 <__aeabi_dmul>
   11c50:	9006      	str	r0, [sp, #24]
   11c52:	9107      	str	r1, [sp, #28]
   11c54:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   11c56:	3401      	adds	r4, #1
   11c58:	0020      	movs	r0, r4
   11c5a:	f001 fa25 	bl	130a8 <__aeabi_i2d>
   11c5e:	9a06      	ldr	r2, [sp, #24]
   11c60:	9b07      	ldr	r3, [sp, #28]
   11c62:	f7fd ff01 	bl	fa68 <__aeabi_dmul>
   11c66:	2200      	movs	r2, #0
   11c68:	4baf      	ldr	r3, [pc, #700]	; (11f28 <_dtoa_r+0x6d8>)
   11c6a:	f7fc ffb9 	bl	ebe0 <__aeabi_dadd>
   11c6e:	9012      	str	r0, [sp, #72]	; 0x48
   11c70:	9113      	str	r1, [sp, #76]	; 0x4c
   11c72:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11c74:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11c76:	4aad      	ldr	r2, [pc, #692]	; (11f2c <_dtoa_r+0x6dc>)
   11c78:	9310      	str	r3, [sp, #64]	; 0x40
   11c7a:	9411      	str	r4, [sp, #68]	; 0x44
   11c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11c7e:	189c      	adds	r4, r3, r2
   11c80:	9411      	str	r4, [sp, #68]	; 0x44
   11c82:	2d00      	cmp	r5, #0
   11c84:	d15e      	bne.n	11d44 <_dtoa_r+0x4f4>
   11c86:	9806      	ldr	r0, [sp, #24]
   11c88:	9907      	ldr	r1, [sp, #28]
   11c8a:	2200      	movs	r2, #0
   11c8c:	4ba8      	ldr	r3, [pc, #672]	; (11f30 <_dtoa_r+0x6e0>)
   11c8e:	f7fe f96b 	bl	ff68 <__aeabi_dsub>
   11c92:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11c94:	0023      	movs	r3, r4
   11c96:	9006      	str	r0, [sp, #24]
   11c98:	9107      	str	r1, [sp, #28]
   11c9a:	f7fc ff8d 	bl	ebb8 <__aeabi_dcmpgt>
   11c9e:	2800      	cmp	r0, #0
   11ca0:	d000      	beq.n	11ca4 <_dtoa_r+0x454>
   11ca2:	e301      	b.n	122a8 <_dtoa_r+0xa58>
   11ca4:	48a3      	ldr	r0, [pc, #652]	; (11f34 <_dtoa_r+0x6e4>)
   11ca6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11ca8:	4684      	mov	ip, r0
   11caa:	4461      	add	r1, ip
   11cac:	000b      	movs	r3, r1
   11cae:	9806      	ldr	r0, [sp, #24]
   11cb0:	9907      	ldr	r1, [sp, #28]
   11cb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11cb4:	f7fc ff6c 	bl	eb90 <__aeabi_dcmplt>
   11cb8:	2800      	cmp	r0, #0
   11cba:	d000      	beq.n	11cbe <_dtoa_r+0x46e>
   11cbc:	e2e8      	b.n	12290 <_dtoa_r+0xa40>
   11cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11cc0:	9c15      	ldr	r4, [sp, #84]	; 0x54
   11cc2:	9306      	str	r3, [sp, #24]
   11cc4:	9407      	str	r4, [sp, #28]
   11cc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11cc8:	2b00      	cmp	r3, #0
   11cca:	da00      	bge.n	11cce <_dtoa_r+0x47e>
   11ccc:	e157      	b.n	11f7e <_dtoa_r+0x72e>
   11cce:	9a03      	ldr	r2, [sp, #12]
   11cd0:	2a0e      	cmp	r2, #14
   11cd2:	dd00      	ble.n	11cd6 <_dtoa_r+0x486>
   11cd4:	e153      	b.n	11f7e <_dtoa_r+0x72e>
   11cd6:	4b90      	ldr	r3, [pc, #576]	; (11f18 <_dtoa_r+0x6c8>)
   11cd8:	00d2      	lsls	r2, r2, #3
   11cda:	189b      	adds	r3, r3, r2
   11cdc:	685c      	ldr	r4, [r3, #4]
   11cde:	681b      	ldr	r3, [r3, #0]
   11ce0:	9308      	str	r3, [sp, #32]
   11ce2:	9409      	str	r4, [sp, #36]	; 0x24
   11ce4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11ce6:	2b00      	cmp	r3, #0
   11ce8:	db00      	blt.n	11cec <_dtoa_r+0x49c>
   11cea:	e0ce      	b.n	11e8a <_dtoa_r+0x63a>
   11cec:	2f00      	cmp	r7, #0
   11cee:	dd00      	ble.n	11cf2 <_dtoa_r+0x4a2>
   11cf0:	e0cb      	b.n	11e8a <_dtoa_r+0x63a>
   11cf2:	d000      	beq.n	11cf6 <_dtoa_r+0x4a6>
   11cf4:	e2cf      	b.n	12296 <_dtoa_r+0xa46>
   11cf6:	9808      	ldr	r0, [sp, #32]
   11cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
   11cfa:	2200      	movs	r2, #0
   11cfc:	4b8c      	ldr	r3, [pc, #560]	; (11f30 <_dtoa_r+0x6e0>)
   11cfe:	f7fd feb3 	bl	fa68 <__aeabi_dmul>
   11d02:	9a06      	ldr	r2, [sp, #24]
   11d04:	9b07      	ldr	r3, [sp, #28]
   11d06:	f7fc ff61 	bl	ebcc <__aeabi_dcmpge>
   11d0a:	003e      	movs	r6, r7
   11d0c:	9708      	str	r7, [sp, #32]
   11d0e:	2800      	cmp	r0, #0
   11d10:	d000      	beq.n	11d14 <_dtoa_r+0x4c4>
   11d12:	e2a4      	b.n	1225e <_dtoa_r+0xa0e>
   11d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11d18:	1c5d      	adds	r5, r3, #1
   11d1a:	2331      	movs	r3, #49	; 0x31
   11d1c:	7013      	strb	r3, [r2, #0]
   11d1e:	9b03      	ldr	r3, [sp, #12]
   11d20:	3301      	adds	r3, #1
   11d22:	9303      	str	r3, [sp, #12]
   11d24:	e29f      	b.n	12266 <_dtoa_r+0xa16>
   11d26:	2201      	movs	r2, #1
   11d28:	4215      	tst	r5, r2
   11d2a:	d005      	beq.n	11d38 <_dtoa_r+0x4e8>
   11d2c:	18a4      	adds	r4, r4, r2
   11d2e:	6832      	ldr	r2, [r6, #0]
   11d30:	6873      	ldr	r3, [r6, #4]
   11d32:	f7fd fe99 	bl	fa68 <__aeabi_dmul>
   11d36:	2301      	movs	r3, #1
   11d38:	106d      	asrs	r5, r5, #1
   11d3a:	3608      	adds	r6, #8
   11d3c:	e763      	b.n	11c06 <_dtoa_r+0x3b6>
   11d3e:	9e03      	ldr	r6, [sp, #12]
   11d40:	003d      	movs	r5, r7
   11d42:	e789      	b.n	11c58 <_dtoa_r+0x408>
   11d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11d46:	1e69      	subs	r1, r5, #1
   11d48:	1952      	adds	r2, r2, r5
   11d4a:	9217      	str	r2, [sp, #92]	; 0x5c
   11d4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11d4e:	4b72      	ldr	r3, [pc, #456]	; (11f18 <_dtoa_r+0x6c8>)
   11d50:	00c9      	lsls	r1, r1, #3
   11d52:	2a00      	cmp	r2, #0
   11d54:	d04a      	beq.n	11dec <_dtoa_r+0x59c>
   11d56:	185b      	adds	r3, r3, r1
   11d58:	681a      	ldr	r2, [r3, #0]
   11d5a:	685b      	ldr	r3, [r3, #4]
   11d5c:	2000      	movs	r0, #0
   11d5e:	4976      	ldr	r1, [pc, #472]	; (11f38 <_dtoa_r+0x6e8>)
   11d60:	f7fd fa4e 	bl	f200 <__aeabi_ddiv>
   11d64:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11d68:	f7fe f8fe 	bl	ff68 <__aeabi_dsub>
   11d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d6e:	9010      	str	r0, [sp, #64]	; 0x40
   11d70:	9111      	str	r1, [sp, #68]	; 0x44
   11d72:	9312      	str	r3, [sp, #72]	; 0x48
   11d74:	9806      	ldr	r0, [sp, #24]
   11d76:	9907      	ldr	r1, [sp, #28]
   11d78:	f7fe fc2c 	bl	105d4 <__aeabi_d2iz>
   11d7c:	0004      	movs	r4, r0
   11d7e:	f001 f993 	bl	130a8 <__aeabi_i2d>
   11d82:	0002      	movs	r2, r0
   11d84:	000b      	movs	r3, r1
   11d86:	9806      	ldr	r0, [sp, #24]
   11d88:	9907      	ldr	r1, [sp, #28]
   11d8a:	f7fe f8ed 	bl	ff68 <__aeabi_dsub>
   11d8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11d90:	3430      	adds	r4, #48	; 0x30
   11d92:	1c5d      	adds	r5, r3, #1
   11d94:	701c      	strb	r4, [r3, #0]
   11d96:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11d98:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11d9a:	9006      	str	r0, [sp, #24]
   11d9c:	9107      	str	r1, [sp, #28]
   11d9e:	f7fc fef7 	bl	eb90 <__aeabi_dcmplt>
   11da2:	2800      	cmp	r0, #0
   11da4:	d165      	bne.n	11e72 <_dtoa_r+0x622>
   11da6:	9a06      	ldr	r2, [sp, #24]
   11da8:	9b07      	ldr	r3, [sp, #28]
   11daa:	2000      	movs	r0, #0
   11dac:	495c      	ldr	r1, [pc, #368]	; (11f20 <_dtoa_r+0x6d0>)
   11dae:	f7fe f8db 	bl	ff68 <__aeabi_dsub>
   11db2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11db4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11db6:	f7fc feeb 	bl	eb90 <__aeabi_dcmplt>
   11dba:	2800      	cmp	r0, #0
   11dbc:	d000      	beq.n	11dc0 <_dtoa_r+0x570>
   11dbe:	e0be      	b.n	11f3e <_dtoa_r+0x6ee>
   11dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11dc2:	429d      	cmp	r5, r3
   11dc4:	d100      	bne.n	11dc8 <_dtoa_r+0x578>
   11dc6:	e77a      	b.n	11cbe <_dtoa_r+0x46e>
   11dc8:	9810      	ldr	r0, [sp, #64]	; 0x40
   11dca:	9911      	ldr	r1, [sp, #68]	; 0x44
   11dcc:	2200      	movs	r2, #0
   11dce:	4b55      	ldr	r3, [pc, #340]	; (11f24 <_dtoa_r+0x6d4>)
   11dd0:	f7fd fe4a 	bl	fa68 <__aeabi_dmul>
   11dd4:	2200      	movs	r2, #0
   11dd6:	9010      	str	r0, [sp, #64]	; 0x40
   11dd8:	9111      	str	r1, [sp, #68]	; 0x44
   11dda:	9806      	ldr	r0, [sp, #24]
   11ddc:	9907      	ldr	r1, [sp, #28]
   11dde:	4b51      	ldr	r3, [pc, #324]	; (11f24 <_dtoa_r+0x6d4>)
   11de0:	f7fd fe42 	bl	fa68 <__aeabi_dmul>
   11de4:	9512      	str	r5, [sp, #72]	; 0x48
   11de6:	9006      	str	r0, [sp, #24]
   11de8:	9107      	str	r1, [sp, #28]
   11dea:	e7c3      	b.n	11d74 <_dtoa_r+0x524>
   11dec:	1859      	adds	r1, r3, r1
   11dee:	6808      	ldr	r0, [r1, #0]
   11df0:	6849      	ldr	r1, [r1, #4]
   11df2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11df4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11df6:	f7fd fe37 	bl	fa68 <__aeabi_dmul>
   11dfa:	9010      	str	r0, [sp, #64]	; 0x40
   11dfc:	9111      	str	r1, [sp, #68]	; 0x44
   11dfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11e00:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   11e02:	9806      	ldr	r0, [sp, #24]
   11e04:	9907      	ldr	r1, [sp, #28]
   11e06:	f7fe fbe5 	bl	105d4 <__aeabi_d2iz>
   11e0a:	9012      	str	r0, [sp, #72]	; 0x48
   11e0c:	f001 f94c 	bl	130a8 <__aeabi_i2d>
   11e10:	0002      	movs	r2, r0
   11e12:	000b      	movs	r3, r1
   11e14:	9806      	ldr	r0, [sp, #24]
   11e16:	9907      	ldr	r1, [sp, #28]
   11e18:	f7fe f8a6 	bl	ff68 <__aeabi_dsub>
   11e1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e1e:	9006      	str	r0, [sp, #24]
   11e20:	9107      	str	r1, [sp, #28]
   11e22:	3330      	adds	r3, #48	; 0x30
   11e24:	7023      	strb	r3, [r4, #0]
   11e26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11e28:	3401      	adds	r4, #1
   11e2a:	2200      	movs	r2, #0
   11e2c:	42a3      	cmp	r3, r4
   11e2e:	d124      	bne.n	11e7a <_dtoa_r+0x62a>
   11e30:	4b41      	ldr	r3, [pc, #260]	; (11f38 <_dtoa_r+0x6e8>)
   11e32:	9810      	ldr	r0, [sp, #64]	; 0x40
   11e34:	9911      	ldr	r1, [sp, #68]	; 0x44
   11e36:	f7fc fed3 	bl	ebe0 <__aeabi_dadd>
   11e3a:	0002      	movs	r2, r0
   11e3c:	000b      	movs	r3, r1
   11e3e:	9806      	ldr	r0, [sp, #24]
   11e40:	9907      	ldr	r1, [sp, #28]
   11e42:	f7fc feb9 	bl	ebb8 <__aeabi_dcmpgt>
   11e46:	2800      	cmp	r0, #0
   11e48:	d000      	beq.n	11e4c <_dtoa_r+0x5fc>
   11e4a:	e078      	b.n	11f3e <_dtoa_r+0x6ee>
   11e4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11e4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11e50:	2000      	movs	r0, #0
   11e52:	4939      	ldr	r1, [pc, #228]	; (11f38 <_dtoa_r+0x6e8>)
   11e54:	f7fe f888 	bl	ff68 <__aeabi_dsub>
   11e58:	0002      	movs	r2, r0
   11e5a:	000b      	movs	r3, r1
   11e5c:	9806      	ldr	r0, [sp, #24]
   11e5e:	9907      	ldr	r1, [sp, #28]
   11e60:	f7fc fe96 	bl	eb90 <__aeabi_dcmplt>
   11e64:	2800      	cmp	r0, #0
   11e66:	d100      	bne.n	11e6a <_dtoa_r+0x61a>
   11e68:	e729      	b.n	11cbe <_dtoa_r+0x46e>
   11e6a:	1e6b      	subs	r3, r5, #1
   11e6c:	781a      	ldrb	r2, [r3, #0]
   11e6e:	2a30      	cmp	r2, #48	; 0x30
   11e70:	d001      	beq.n	11e76 <_dtoa_r+0x626>
   11e72:	9603      	str	r6, [sp, #12]
   11e74:	e03f      	b.n	11ef6 <_dtoa_r+0x6a6>
   11e76:	001d      	movs	r5, r3
   11e78:	e7f7      	b.n	11e6a <_dtoa_r+0x61a>
   11e7a:	9806      	ldr	r0, [sp, #24]
   11e7c:	9907      	ldr	r1, [sp, #28]
   11e7e:	4b29      	ldr	r3, [pc, #164]	; (11f24 <_dtoa_r+0x6d4>)
   11e80:	f7fd fdf2 	bl	fa68 <__aeabi_dmul>
   11e84:	9006      	str	r0, [sp, #24]
   11e86:	9107      	str	r1, [sp, #28]
   11e88:	e7bb      	b.n	11e02 <_dtoa_r+0x5b2>
   11e8a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   11e8c:	9a08      	ldr	r2, [sp, #32]
   11e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11e90:	9806      	ldr	r0, [sp, #24]
   11e92:	9907      	ldr	r1, [sp, #28]
   11e94:	f7fd f9b4 	bl	f200 <__aeabi_ddiv>
   11e98:	f7fe fb9c 	bl	105d4 <__aeabi_d2iz>
   11e9c:	0004      	movs	r4, r0
   11e9e:	f001 f903 	bl	130a8 <__aeabi_i2d>
   11ea2:	9a08      	ldr	r2, [sp, #32]
   11ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ea6:	f7fd fddf 	bl	fa68 <__aeabi_dmul>
   11eaa:	000b      	movs	r3, r1
   11eac:	0002      	movs	r2, r0
   11eae:	9806      	ldr	r0, [sp, #24]
   11eb0:	9907      	ldr	r1, [sp, #28]
   11eb2:	f7fe f859 	bl	ff68 <__aeabi_dsub>
   11eb6:	0023      	movs	r3, r4
   11eb8:	3330      	adds	r3, #48	; 0x30
   11eba:	7033      	strb	r3, [r6, #0]
   11ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ebe:	1c75      	adds	r5, r6, #1
   11ec0:	1aeb      	subs	r3, r5, r3
   11ec2:	429f      	cmp	r7, r3
   11ec4:	d14c      	bne.n	11f60 <_dtoa_r+0x710>
   11ec6:	0002      	movs	r2, r0
   11ec8:	000b      	movs	r3, r1
   11eca:	f7fc fe89 	bl	ebe0 <__aeabi_dadd>
   11ece:	0006      	movs	r6, r0
   11ed0:	000f      	movs	r7, r1
   11ed2:	0002      	movs	r2, r0
   11ed4:	000b      	movs	r3, r1
   11ed6:	9808      	ldr	r0, [sp, #32]
   11ed8:	9909      	ldr	r1, [sp, #36]	; 0x24
   11eda:	f7fc fe59 	bl	eb90 <__aeabi_dcmplt>
   11ede:	2800      	cmp	r0, #0
   11ee0:	d12c      	bne.n	11f3c <_dtoa_r+0x6ec>
   11ee2:	9808      	ldr	r0, [sp, #32]
   11ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
   11ee6:	0032      	movs	r2, r6
   11ee8:	003b      	movs	r3, r7
   11eea:	f7fc fe4b 	bl	eb84 <__aeabi_dcmpeq>
   11eee:	2800      	cmp	r0, #0
   11ef0:	d001      	beq.n	11ef6 <_dtoa_r+0x6a6>
   11ef2:	07e3      	lsls	r3, r4, #31
   11ef4:	d422      	bmi.n	11f3c <_dtoa_r+0x6ec>
   11ef6:	9905      	ldr	r1, [sp, #20]
   11ef8:	9804      	ldr	r0, [sp, #16]
   11efa:	f000 fcdc 	bl	128b6 <_Bfree>
   11efe:	2300      	movs	r3, #0
   11f00:	702b      	strb	r3, [r5, #0]
   11f02:	9b03      	ldr	r3, [sp, #12]
   11f04:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11f06:	3301      	adds	r3, #1
   11f08:	6013      	str	r3, [r2, #0]
   11f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11f0c:	2b00      	cmp	r3, #0
   11f0e:	d100      	bne.n	11f12 <_dtoa_r+0x6c2>
   11f10:	e275      	b.n	123fe <_dtoa_r+0xbae>
   11f12:	601d      	str	r5, [r3, #0]
   11f14:	e273      	b.n	123fe <_dtoa_r+0xbae>
   11f16:	46c0      	nop			; (mov r8, r8)
   11f18:	00014350 	.word	0x00014350
   11f1c:	00014328 	.word	0x00014328
   11f20:	3ff00000 	.word	0x3ff00000
   11f24:	40240000 	.word	0x40240000
   11f28:	401c0000 	.word	0x401c0000
   11f2c:	fcc00000 	.word	0xfcc00000
   11f30:	40140000 	.word	0x40140000
   11f34:	7cc00000 	.word	0x7cc00000
   11f38:	3fe00000 	.word	0x3fe00000
   11f3c:	9e03      	ldr	r6, [sp, #12]
   11f3e:	1e6b      	subs	r3, r5, #1
   11f40:	781a      	ldrb	r2, [r3, #0]
   11f42:	2a39      	cmp	r2, #57	; 0x39
   11f44:	d106      	bne.n	11f54 <_dtoa_r+0x704>
   11f46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11f48:	429a      	cmp	r2, r3
   11f4a:	d107      	bne.n	11f5c <_dtoa_r+0x70c>
   11f4c:	2330      	movs	r3, #48	; 0x30
   11f4e:	7013      	strb	r3, [r2, #0]
   11f50:	0013      	movs	r3, r2
   11f52:	3601      	adds	r6, #1
   11f54:	781a      	ldrb	r2, [r3, #0]
   11f56:	3201      	adds	r2, #1
   11f58:	701a      	strb	r2, [r3, #0]
   11f5a:	e78a      	b.n	11e72 <_dtoa_r+0x622>
   11f5c:	001d      	movs	r5, r3
   11f5e:	e7ee      	b.n	11f3e <_dtoa_r+0x6ee>
   11f60:	2200      	movs	r2, #0
   11f62:	4bcf      	ldr	r3, [pc, #828]	; (122a0 <_dtoa_r+0xa50>)
   11f64:	f7fd fd80 	bl	fa68 <__aeabi_dmul>
   11f68:	2200      	movs	r2, #0
   11f6a:	2300      	movs	r3, #0
   11f6c:	9006      	str	r0, [sp, #24]
   11f6e:	9107      	str	r1, [sp, #28]
   11f70:	002e      	movs	r6, r5
   11f72:	f7fc fe07 	bl	eb84 <__aeabi_dcmpeq>
   11f76:	2800      	cmp	r0, #0
   11f78:	d100      	bne.n	11f7c <_dtoa_r+0x72c>
   11f7a:	e787      	b.n	11e8c <_dtoa_r+0x63c>
   11f7c:	e7bb      	b.n	11ef6 <_dtoa_r+0x6a6>
   11f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11f80:	2a00      	cmp	r2, #0
   11f82:	d100      	bne.n	11f86 <_dtoa_r+0x736>
   11f84:	e087      	b.n	12096 <_dtoa_r+0x846>
   11f86:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11f88:	2a01      	cmp	r2, #1
   11f8a:	dc6e      	bgt.n	1206a <_dtoa_r+0x81a>
   11f8c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11f8e:	2a00      	cmp	r2, #0
   11f90:	d067      	beq.n	12062 <_dtoa_r+0x812>
   11f92:	4ac4      	ldr	r2, [pc, #784]	; (122a4 <_dtoa_r+0xa54>)
   11f94:	189b      	adds	r3, r3, r2
   11f96:	9d08      	ldr	r5, [sp, #32]
   11f98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   11f9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11f9c:	2101      	movs	r1, #1
   11f9e:	18d2      	adds	r2, r2, r3
   11fa0:	920b      	str	r2, [sp, #44]	; 0x2c
   11fa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11fa4:	9804      	ldr	r0, [sp, #16]
   11fa6:	18d3      	adds	r3, r2, r3
   11fa8:	930c      	str	r3, [sp, #48]	; 0x30
   11faa:	f000 fd22 	bl	129f2 <__i2b>
   11fae:	0006      	movs	r6, r0
   11fb0:	2c00      	cmp	r4, #0
   11fb2:	dd0e      	ble.n	11fd2 <_dtoa_r+0x782>
   11fb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11fb6:	2b00      	cmp	r3, #0
   11fb8:	dd0b      	ble.n	11fd2 <_dtoa_r+0x782>
   11fba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11fbc:	0023      	movs	r3, r4
   11fbe:	4294      	cmp	r4, r2
   11fc0:	dd00      	ble.n	11fc4 <_dtoa_r+0x774>
   11fc2:	0013      	movs	r3, r2
   11fc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11fc6:	1ae4      	subs	r4, r4, r3
   11fc8:	1ad2      	subs	r2, r2, r3
   11fca:	920b      	str	r2, [sp, #44]	; 0x2c
   11fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11fce:	1ad3      	subs	r3, r2, r3
   11fd0:	930c      	str	r3, [sp, #48]	; 0x30
   11fd2:	9b08      	ldr	r3, [sp, #32]
   11fd4:	2b00      	cmp	r3, #0
   11fd6:	d01e      	beq.n	12016 <_dtoa_r+0x7c6>
   11fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11fda:	2b00      	cmp	r3, #0
   11fdc:	d05f      	beq.n	1209e <_dtoa_r+0x84e>
   11fde:	2d00      	cmp	r5, #0
   11fe0:	dd11      	ble.n	12006 <_dtoa_r+0x7b6>
   11fe2:	0031      	movs	r1, r6
   11fe4:	002a      	movs	r2, r5
   11fe6:	9804      	ldr	r0, [sp, #16]
   11fe8:	f000 fd9c 	bl	12b24 <__pow5mult>
   11fec:	9a05      	ldr	r2, [sp, #20]
   11fee:	0001      	movs	r1, r0
   11ff0:	0006      	movs	r6, r0
   11ff2:	9804      	ldr	r0, [sp, #16]
   11ff4:	f000 fd06 	bl	12a04 <__multiply>
   11ff8:	9905      	ldr	r1, [sp, #20]
   11ffa:	9010      	str	r0, [sp, #64]	; 0x40
   11ffc:	9804      	ldr	r0, [sp, #16]
   11ffe:	f000 fc5a 	bl	128b6 <_Bfree>
   12002:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12004:	9305      	str	r3, [sp, #20]
   12006:	9b08      	ldr	r3, [sp, #32]
   12008:	1b5a      	subs	r2, r3, r5
   1200a:	d004      	beq.n	12016 <_dtoa_r+0x7c6>
   1200c:	9905      	ldr	r1, [sp, #20]
   1200e:	9804      	ldr	r0, [sp, #16]
   12010:	f000 fd88 	bl	12b24 <__pow5mult>
   12014:	9005      	str	r0, [sp, #20]
   12016:	2101      	movs	r1, #1
   12018:	9804      	ldr	r0, [sp, #16]
   1201a:	f000 fcea 	bl	129f2 <__i2b>
   1201e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12020:	9008      	str	r0, [sp, #32]
   12022:	2b00      	cmp	r3, #0
   12024:	dd3d      	ble.n	120a2 <_dtoa_r+0x852>
   12026:	001a      	movs	r2, r3
   12028:	0001      	movs	r1, r0
   1202a:	9804      	ldr	r0, [sp, #16]
   1202c:	f000 fd7a 	bl	12b24 <__pow5mult>
   12030:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12032:	9008      	str	r0, [sp, #32]
   12034:	2500      	movs	r5, #0
   12036:	2b01      	cmp	r3, #1
   12038:	dc3b      	bgt.n	120b2 <_dtoa_r+0x862>
   1203a:	2500      	movs	r5, #0
   1203c:	9b06      	ldr	r3, [sp, #24]
   1203e:	42ab      	cmp	r3, r5
   12040:	d133      	bne.n	120aa <_dtoa_r+0x85a>
   12042:	9b07      	ldr	r3, [sp, #28]
   12044:	031b      	lsls	r3, r3, #12
   12046:	42ab      	cmp	r3, r5
   12048:	d12f      	bne.n	120aa <_dtoa_r+0x85a>
   1204a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1204c:	9a07      	ldr	r2, [sp, #28]
   1204e:	4213      	tst	r3, r2
   12050:	d02b      	beq.n	120aa <_dtoa_r+0x85a>
   12052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12054:	3501      	adds	r5, #1
   12056:	3301      	adds	r3, #1
   12058:	930b      	str	r3, [sp, #44]	; 0x2c
   1205a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1205c:	3301      	adds	r3, #1
   1205e:	930c      	str	r3, [sp, #48]	; 0x30
   12060:	e023      	b.n	120aa <_dtoa_r+0x85a>
   12062:	2336      	movs	r3, #54	; 0x36
   12064:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12066:	1a9b      	subs	r3, r3, r2
   12068:	e795      	b.n	11f96 <_dtoa_r+0x746>
   1206a:	9b08      	ldr	r3, [sp, #32]
   1206c:	1e7d      	subs	r5, r7, #1
   1206e:	42ab      	cmp	r3, r5
   12070:	db06      	blt.n	12080 <_dtoa_r+0x830>
   12072:	1b5d      	subs	r5, r3, r5
   12074:	2f00      	cmp	r7, #0
   12076:	da0b      	bge.n	12090 <_dtoa_r+0x840>
   12078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1207a:	1bdc      	subs	r4, r3, r7
   1207c:	2300      	movs	r3, #0
   1207e:	e78c      	b.n	11f9a <_dtoa_r+0x74a>
   12080:	9b08      	ldr	r3, [sp, #32]
   12082:	9508      	str	r5, [sp, #32]
   12084:	1aea      	subs	r2, r5, r3
   12086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12088:	2500      	movs	r5, #0
   1208a:	189b      	adds	r3, r3, r2
   1208c:	930f      	str	r3, [sp, #60]	; 0x3c
   1208e:	e7f1      	b.n	12074 <_dtoa_r+0x824>
   12090:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   12092:	003b      	movs	r3, r7
   12094:	e781      	b.n	11f9a <_dtoa_r+0x74a>
   12096:	9d08      	ldr	r5, [sp, #32]
   12098:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1209a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1209c:	e788      	b.n	11fb0 <_dtoa_r+0x760>
   1209e:	9a08      	ldr	r2, [sp, #32]
   120a0:	e7b4      	b.n	1200c <_dtoa_r+0x7bc>
   120a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   120a4:	2500      	movs	r5, #0
   120a6:	2b01      	cmp	r3, #1
   120a8:	ddc7      	ble.n	1203a <_dtoa_r+0x7ea>
   120aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120ac:	2001      	movs	r0, #1
   120ae:	2b00      	cmp	r3, #0
   120b0:	d00b      	beq.n	120ca <_dtoa_r+0x87a>
   120b2:	9b08      	ldr	r3, [sp, #32]
   120b4:	9a08      	ldr	r2, [sp, #32]
   120b6:	691b      	ldr	r3, [r3, #16]
   120b8:	930f      	str	r3, [sp, #60]	; 0x3c
   120ba:	3303      	adds	r3, #3
   120bc:	009b      	lsls	r3, r3, #2
   120be:	18d3      	adds	r3, r2, r3
   120c0:	6858      	ldr	r0, [r3, #4]
   120c2:	f000 fc4d 	bl	12960 <__hi0bits>
   120c6:	2320      	movs	r3, #32
   120c8:	1a18      	subs	r0, r3, r0
   120ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   120cc:	18c0      	adds	r0, r0, r3
   120ce:	231f      	movs	r3, #31
   120d0:	4018      	ands	r0, r3
   120d2:	d100      	bne.n	120d6 <_dtoa_r+0x886>
   120d4:	e0ab      	b.n	1222e <_dtoa_r+0x9de>
   120d6:	3301      	adds	r3, #1
   120d8:	1a1b      	subs	r3, r3, r0
   120da:	2b04      	cmp	r3, #4
   120dc:	dc00      	bgt.n	120e0 <_dtoa_r+0x890>
   120de:	e09b      	b.n	12218 <_dtoa_r+0x9c8>
   120e0:	231c      	movs	r3, #28
   120e2:	1a18      	subs	r0, r3, r0
   120e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   120e6:	1824      	adds	r4, r4, r0
   120e8:	181b      	adds	r3, r3, r0
   120ea:	930b      	str	r3, [sp, #44]	; 0x2c
   120ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   120ee:	181b      	adds	r3, r3, r0
   120f0:	930c      	str	r3, [sp, #48]	; 0x30
   120f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   120f4:	2b00      	cmp	r3, #0
   120f6:	dd05      	ble.n	12104 <_dtoa_r+0x8b4>
   120f8:	001a      	movs	r2, r3
   120fa:	9905      	ldr	r1, [sp, #20]
   120fc:	9804      	ldr	r0, [sp, #16]
   120fe:	f000 fd63 	bl	12bc8 <__lshift>
   12102:	9005      	str	r0, [sp, #20]
   12104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12106:	2b00      	cmp	r3, #0
   12108:	dd05      	ble.n	12116 <_dtoa_r+0x8c6>
   1210a:	001a      	movs	r2, r3
   1210c:	9908      	ldr	r1, [sp, #32]
   1210e:	9804      	ldr	r0, [sp, #16]
   12110:	f000 fd5a 	bl	12bc8 <__lshift>
   12114:	9008      	str	r0, [sp, #32]
   12116:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12118:	2b00      	cmp	r3, #0
   1211a:	d100      	bne.n	1211e <_dtoa_r+0x8ce>
   1211c:	e089      	b.n	12232 <_dtoa_r+0x9e2>
   1211e:	9908      	ldr	r1, [sp, #32]
   12120:	9805      	ldr	r0, [sp, #20]
   12122:	f000 fda2 	bl	12c6a <__mcmp>
   12126:	2800      	cmp	r0, #0
   12128:	db00      	blt.n	1212c <_dtoa_r+0x8dc>
   1212a:	e082      	b.n	12232 <_dtoa_r+0x9e2>
   1212c:	9b03      	ldr	r3, [sp, #12]
   1212e:	220a      	movs	r2, #10
   12130:	3b01      	subs	r3, #1
   12132:	9303      	str	r3, [sp, #12]
   12134:	9905      	ldr	r1, [sp, #20]
   12136:	2300      	movs	r3, #0
   12138:	9804      	ldr	r0, [sp, #16]
   1213a:	f000 fbd5 	bl	128e8 <__multadd>
   1213e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12140:	9005      	str	r0, [sp, #20]
   12142:	2b00      	cmp	r3, #0
   12144:	d100      	bne.n	12148 <_dtoa_r+0x8f8>
   12146:	e15d      	b.n	12404 <_dtoa_r+0xbb4>
   12148:	2300      	movs	r3, #0
   1214a:	0031      	movs	r1, r6
   1214c:	220a      	movs	r2, #10
   1214e:	9804      	ldr	r0, [sp, #16]
   12150:	f000 fbca 	bl	128e8 <__multadd>
   12154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12156:	0006      	movs	r6, r0
   12158:	2b00      	cmp	r3, #0
   1215a:	dc02      	bgt.n	12162 <_dtoa_r+0x912>
   1215c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1215e:	2b02      	cmp	r3, #2
   12160:	dc6d      	bgt.n	1223e <_dtoa_r+0x9ee>
   12162:	2c00      	cmp	r4, #0
   12164:	dd05      	ble.n	12172 <_dtoa_r+0x922>
   12166:	0031      	movs	r1, r6
   12168:	0022      	movs	r2, r4
   1216a:	9804      	ldr	r0, [sp, #16]
   1216c:	f000 fd2c 	bl	12bc8 <__lshift>
   12170:	0006      	movs	r6, r0
   12172:	0030      	movs	r0, r6
   12174:	2d00      	cmp	r5, #0
   12176:	d011      	beq.n	1219c <_dtoa_r+0x94c>
   12178:	6871      	ldr	r1, [r6, #4]
   1217a:	9804      	ldr	r0, [sp, #16]
   1217c:	f000 fb63 	bl	12846 <_Balloc>
   12180:	0031      	movs	r1, r6
   12182:	0004      	movs	r4, r0
   12184:	6933      	ldr	r3, [r6, #16]
   12186:	310c      	adds	r1, #12
   12188:	1c9a      	adds	r2, r3, #2
   1218a:	0092      	lsls	r2, r2, #2
   1218c:	300c      	adds	r0, #12
   1218e:	f7fe fb40 	bl	10812 <memcpy>
   12192:	2201      	movs	r2, #1
   12194:	0021      	movs	r1, r4
   12196:	9804      	ldr	r0, [sp, #16]
   12198:	f000 fd16 	bl	12bc8 <__lshift>
   1219c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1219e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   121a0:	3f01      	subs	r7, #1
   121a2:	930b      	str	r3, [sp, #44]	; 0x2c
   121a4:	19db      	adds	r3, r3, r7
   121a6:	0037      	movs	r7, r6
   121a8:	0006      	movs	r6, r0
   121aa:	930f      	str	r3, [sp, #60]	; 0x3c
   121ac:	9908      	ldr	r1, [sp, #32]
   121ae:	9805      	ldr	r0, [sp, #20]
   121b0:	f7ff fac9 	bl	11746 <quorem>
   121b4:	0039      	movs	r1, r7
   121b6:	900d      	str	r0, [sp, #52]	; 0x34
   121b8:	0004      	movs	r4, r0
   121ba:	9805      	ldr	r0, [sp, #20]
   121bc:	f000 fd55 	bl	12c6a <__mcmp>
   121c0:	0032      	movs	r2, r6
   121c2:	900e      	str	r0, [sp, #56]	; 0x38
   121c4:	9908      	ldr	r1, [sp, #32]
   121c6:	9804      	ldr	r0, [sp, #16]
   121c8:	f000 fd68 	bl	12c9c <__mdiff>
   121cc:	2301      	movs	r3, #1
   121ce:	930c      	str	r3, [sp, #48]	; 0x30
   121d0:	68c3      	ldr	r3, [r0, #12]
   121d2:	3430      	adds	r4, #48	; 0x30
   121d4:	0005      	movs	r5, r0
   121d6:	2b00      	cmp	r3, #0
   121d8:	d104      	bne.n	121e4 <_dtoa_r+0x994>
   121da:	0001      	movs	r1, r0
   121dc:	9805      	ldr	r0, [sp, #20]
   121de:	f000 fd44 	bl	12c6a <__mcmp>
   121e2:	900c      	str	r0, [sp, #48]	; 0x30
   121e4:	0029      	movs	r1, r5
   121e6:	9804      	ldr	r0, [sp, #16]
   121e8:	f000 fb65 	bl	128b6 <_Bfree>
   121ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   121ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
   121f0:	4313      	orrs	r3, r2
   121f2:	d000      	beq.n	121f6 <_dtoa_r+0x9a6>
   121f4:	e089      	b.n	1230a <_dtoa_r+0xaba>
   121f6:	9a06      	ldr	r2, [sp, #24]
   121f8:	3301      	adds	r3, #1
   121fa:	4213      	tst	r3, r2
   121fc:	d000      	beq.n	12200 <_dtoa_r+0x9b0>
   121fe:	e084      	b.n	1230a <_dtoa_r+0xaba>
   12200:	2c39      	cmp	r4, #57	; 0x39
   12202:	d100      	bne.n	12206 <_dtoa_r+0x9b6>
   12204:	e0a3      	b.n	1234e <_dtoa_r+0xafe>
   12206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12208:	2b00      	cmp	r3, #0
   1220a:	dd01      	ble.n	12210 <_dtoa_r+0x9c0>
   1220c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1220e:	3431      	adds	r4, #49	; 0x31
   12210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12212:	1c5d      	adds	r5, r3, #1
   12214:	701c      	strb	r4, [r3, #0]
   12216:	e027      	b.n	12268 <_dtoa_r+0xa18>
   12218:	2b04      	cmp	r3, #4
   1221a:	d100      	bne.n	1221e <_dtoa_r+0x9ce>
   1221c:	e769      	b.n	120f2 <_dtoa_r+0x8a2>
   1221e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12220:	331c      	adds	r3, #28
   12222:	18d2      	adds	r2, r2, r3
   12224:	920b      	str	r2, [sp, #44]	; 0x2c
   12226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12228:	18e4      	adds	r4, r4, r3
   1222a:	18d3      	adds	r3, r2, r3
   1222c:	e760      	b.n	120f0 <_dtoa_r+0x8a0>
   1222e:	0003      	movs	r3, r0
   12230:	e7f5      	b.n	1221e <_dtoa_r+0x9ce>
   12232:	2f00      	cmp	r7, #0
   12234:	dc3c      	bgt.n	122b0 <_dtoa_r+0xa60>
   12236:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12238:	2b02      	cmp	r3, #2
   1223a:	dd39      	ble.n	122b0 <_dtoa_r+0xa60>
   1223c:	970d      	str	r7, [sp, #52]	; 0x34
   1223e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12240:	2b00      	cmp	r3, #0
   12242:	d10c      	bne.n	1225e <_dtoa_r+0xa0e>
   12244:	9908      	ldr	r1, [sp, #32]
   12246:	2205      	movs	r2, #5
   12248:	9804      	ldr	r0, [sp, #16]
   1224a:	f000 fb4d 	bl	128e8 <__multadd>
   1224e:	9008      	str	r0, [sp, #32]
   12250:	0001      	movs	r1, r0
   12252:	9805      	ldr	r0, [sp, #20]
   12254:	f000 fd09 	bl	12c6a <__mcmp>
   12258:	2800      	cmp	r0, #0
   1225a:	dd00      	ble.n	1225e <_dtoa_r+0xa0e>
   1225c:	e55a      	b.n	11d14 <_dtoa_r+0x4c4>
   1225e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12260:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   12262:	43db      	mvns	r3, r3
   12264:	9303      	str	r3, [sp, #12]
   12266:	2700      	movs	r7, #0
   12268:	9908      	ldr	r1, [sp, #32]
   1226a:	9804      	ldr	r0, [sp, #16]
   1226c:	f000 fb23 	bl	128b6 <_Bfree>
   12270:	2e00      	cmp	r6, #0
   12272:	d100      	bne.n	12276 <_dtoa_r+0xa26>
   12274:	e63f      	b.n	11ef6 <_dtoa_r+0x6a6>
   12276:	2f00      	cmp	r7, #0
   12278:	d005      	beq.n	12286 <_dtoa_r+0xa36>
   1227a:	42b7      	cmp	r7, r6
   1227c:	d003      	beq.n	12286 <_dtoa_r+0xa36>
   1227e:	0039      	movs	r1, r7
   12280:	9804      	ldr	r0, [sp, #16]
   12282:	f000 fb18 	bl	128b6 <_Bfree>
   12286:	0031      	movs	r1, r6
   12288:	9804      	ldr	r0, [sp, #16]
   1228a:	f000 fb14 	bl	128b6 <_Bfree>
   1228e:	e632      	b.n	11ef6 <_dtoa_r+0x6a6>
   12290:	9508      	str	r5, [sp, #32]
   12292:	002e      	movs	r6, r5
   12294:	e7e3      	b.n	1225e <_dtoa_r+0xa0e>
   12296:	2300      	movs	r3, #0
   12298:	9308      	str	r3, [sp, #32]
   1229a:	001e      	movs	r6, r3
   1229c:	e7df      	b.n	1225e <_dtoa_r+0xa0e>
   1229e:	46c0      	nop			; (mov r8, r8)
   122a0:	40240000 	.word	0x40240000
   122a4:	00000433 	.word	0x00000433
   122a8:	9603      	str	r6, [sp, #12]
   122aa:	9508      	str	r5, [sp, #32]
   122ac:	002e      	movs	r6, r5
   122ae:	e531      	b.n	11d14 <_dtoa_r+0x4c4>
   122b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   122b2:	970d      	str	r7, [sp, #52]	; 0x34
   122b4:	2b00      	cmp	r3, #0
   122b6:	d000      	beq.n	122ba <_dtoa_r+0xa6a>
   122b8:	e753      	b.n	12162 <_dtoa_r+0x912>
   122ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   122bc:	9908      	ldr	r1, [sp, #32]
   122be:	9805      	ldr	r0, [sp, #20]
   122c0:	f7ff fa41 	bl	11746 <quorem>
   122c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   122c6:	3030      	adds	r0, #48	; 0x30
   122c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   122ca:	7028      	strb	r0, [r5, #0]
   122cc:	3501      	adds	r5, #1
   122ce:	0004      	movs	r4, r0
   122d0:	1aeb      	subs	r3, r5, r3
   122d2:	429a      	cmp	r2, r3
   122d4:	dc78      	bgt.n	123c8 <_dtoa_r+0xb78>
   122d6:	1e15      	subs	r5, r2, #0
   122d8:	dc00      	bgt.n	122dc <_dtoa_r+0xa8c>
   122da:	2501      	movs	r5, #1
   122dc:	2700      	movs	r7, #0
   122de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   122e0:	195d      	adds	r5, r3, r5
   122e2:	9905      	ldr	r1, [sp, #20]
   122e4:	2201      	movs	r2, #1
   122e6:	9804      	ldr	r0, [sp, #16]
   122e8:	f000 fc6e 	bl	12bc8 <__lshift>
   122ec:	9908      	ldr	r1, [sp, #32]
   122ee:	9005      	str	r0, [sp, #20]
   122f0:	f000 fcbb 	bl	12c6a <__mcmp>
   122f4:	2800      	cmp	r0, #0
   122f6:	dc2f      	bgt.n	12358 <_dtoa_r+0xb08>
   122f8:	d101      	bne.n	122fe <_dtoa_r+0xaae>
   122fa:	07e3      	lsls	r3, r4, #31
   122fc:	d42c      	bmi.n	12358 <_dtoa_r+0xb08>
   122fe:	1e6b      	subs	r3, r5, #1
   12300:	781a      	ldrb	r2, [r3, #0]
   12302:	2a30      	cmp	r2, #48	; 0x30
   12304:	d1b0      	bne.n	12268 <_dtoa_r+0xa18>
   12306:	001d      	movs	r5, r3
   12308:	e7f9      	b.n	122fe <_dtoa_r+0xaae>
   1230a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1230c:	2b00      	cmp	r3, #0
   1230e:	db07      	blt.n	12320 <_dtoa_r+0xad0>
   12310:	001d      	movs	r5, r3
   12312:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12314:	431d      	orrs	r5, r3
   12316:	d126      	bne.n	12366 <_dtoa_r+0xb16>
   12318:	2301      	movs	r3, #1
   1231a:	9a06      	ldr	r2, [sp, #24]
   1231c:	4213      	tst	r3, r2
   1231e:	d122      	bne.n	12366 <_dtoa_r+0xb16>
   12320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12322:	2b00      	cmp	r3, #0
   12324:	dc00      	bgt.n	12328 <_dtoa_r+0xad8>
   12326:	e773      	b.n	12210 <_dtoa_r+0x9c0>
   12328:	9905      	ldr	r1, [sp, #20]
   1232a:	2201      	movs	r2, #1
   1232c:	9804      	ldr	r0, [sp, #16]
   1232e:	f000 fc4b 	bl	12bc8 <__lshift>
   12332:	9908      	ldr	r1, [sp, #32]
   12334:	9005      	str	r0, [sp, #20]
   12336:	f000 fc98 	bl	12c6a <__mcmp>
   1233a:	2800      	cmp	r0, #0
   1233c:	dc04      	bgt.n	12348 <_dtoa_r+0xaf8>
   1233e:	d000      	beq.n	12342 <_dtoa_r+0xaf2>
   12340:	e766      	b.n	12210 <_dtoa_r+0x9c0>
   12342:	07e3      	lsls	r3, r4, #31
   12344:	d400      	bmi.n	12348 <_dtoa_r+0xaf8>
   12346:	e763      	b.n	12210 <_dtoa_r+0x9c0>
   12348:	2c39      	cmp	r4, #57	; 0x39
   1234a:	d000      	beq.n	1234e <_dtoa_r+0xafe>
   1234c:	e75e      	b.n	1220c <_dtoa_r+0x9bc>
   1234e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12352:	1c5d      	adds	r5, r3, #1
   12354:	2339      	movs	r3, #57	; 0x39
   12356:	7013      	strb	r3, [r2, #0]
   12358:	1e6b      	subs	r3, r5, #1
   1235a:	781a      	ldrb	r2, [r3, #0]
   1235c:	2a39      	cmp	r2, #57	; 0x39
   1235e:	d03b      	beq.n	123d8 <_dtoa_r+0xb88>
   12360:	3201      	adds	r2, #1
   12362:	701a      	strb	r2, [r3, #0]
   12364:	e780      	b.n	12268 <_dtoa_r+0xa18>
   12366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12368:	3301      	adds	r3, #1
   1236a:	930d      	str	r3, [sp, #52]	; 0x34
   1236c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1236e:	2b00      	cmp	r3, #0
   12370:	dd05      	ble.n	1237e <_dtoa_r+0xb2e>
   12372:	2c39      	cmp	r4, #57	; 0x39
   12374:	d0eb      	beq.n	1234e <_dtoa_r+0xafe>
   12376:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   12378:	3401      	adds	r4, #1
   1237a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1237c:	e74a      	b.n	12214 <_dtoa_r+0x9c4>
   1237e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12380:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12382:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   12384:	701c      	strb	r4, [r3, #0]
   12386:	4293      	cmp	r3, r2
   12388:	d0ab      	beq.n	122e2 <_dtoa_r+0xa92>
   1238a:	2300      	movs	r3, #0
   1238c:	220a      	movs	r2, #10
   1238e:	9905      	ldr	r1, [sp, #20]
   12390:	9804      	ldr	r0, [sp, #16]
   12392:	f000 faa9 	bl	128e8 <__multadd>
   12396:	2300      	movs	r3, #0
   12398:	9005      	str	r0, [sp, #20]
   1239a:	220a      	movs	r2, #10
   1239c:	0039      	movs	r1, r7
   1239e:	9804      	ldr	r0, [sp, #16]
   123a0:	42b7      	cmp	r7, r6
   123a2:	d106      	bne.n	123b2 <_dtoa_r+0xb62>
   123a4:	f000 faa0 	bl	128e8 <__multadd>
   123a8:	0007      	movs	r7, r0
   123aa:	0006      	movs	r6, r0
   123ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   123ae:	930b      	str	r3, [sp, #44]	; 0x2c
   123b0:	e6fc      	b.n	121ac <_dtoa_r+0x95c>
   123b2:	f000 fa99 	bl	128e8 <__multadd>
   123b6:	0031      	movs	r1, r6
   123b8:	0007      	movs	r7, r0
   123ba:	2300      	movs	r3, #0
   123bc:	220a      	movs	r2, #10
   123be:	9804      	ldr	r0, [sp, #16]
   123c0:	f000 fa92 	bl	128e8 <__multadd>
   123c4:	0006      	movs	r6, r0
   123c6:	e7f1      	b.n	123ac <_dtoa_r+0xb5c>
   123c8:	2300      	movs	r3, #0
   123ca:	220a      	movs	r2, #10
   123cc:	9905      	ldr	r1, [sp, #20]
   123ce:	9804      	ldr	r0, [sp, #16]
   123d0:	f000 fa8a 	bl	128e8 <__multadd>
   123d4:	9005      	str	r0, [sp, #20]
   123d6:	e771      	b.n	122bc <_dtoa_r+0xa6c>
   123d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   123da:	429a      	cmp	r2, r3
   123dc:	d105      	bne.n	123ea <_dtoa_r+0xb9a>
   123de:	9b03      	ldr	r3, [sp, #12]
   123e0:	3301      	adds	r3, #1
   123e2:	9303      	str	r3, [sp, #12]
   123e4:	2331      	movs	r3, #49	; 0x31
   123e6:	7013      	strb	r3, [r2, #0]
   123e8:	e73e      	b.n	12268 <_dtoa_r+0xa18>
   123ea:	001d      	movs	r5, r3
   123ec:	e7b4      	b.n	12358 <_dtoa_r+0xb08>
   123ee:	4b0a      	ldr	r3, [pc, #40]	; (12418 <_dtoa_r+0xbc8>)
   123f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   123f2:	930a      	str	r3, [sp, #40]	; 0x28
   123f4:	4b09      	ldr	r3, [pc, #36]	; (1241c <_dtoa_r+0xbcc>)
   123f6:	2a00      	cmp	r2, #0
   123f8:	d001      	beq.n	123fe <_dtoa_r+0xbae>
   123fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   123fc:	6013      	str	r3, [r2, #0]
   123fe:	980a      	ldr	r0, [sp, #40]	; 0x28
   12400:	b01d      	add	sp, #116	; 0x74
   12402:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12406:	2b00      	cmp	r3, #0
   12408:	dd00      	ble.n	1240c <_dtoa_r+0xbbc>
   1240a:	e756      	b.n	122ba <_dtoa_r+0xa6a>
   1240c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1240e:	2b02      	cmp	r3, #2
   12410:	dc00      	bgt.n	12414 <_dtoa_r+0xbc4>
   12412:	e752      	b.n	122ba <_dtoa_r+0xa6a>
   12414:	e713      	b.n	1223e <_dtoa_r+0x9ee>
   12416:	46c0      	nop			; (mov r8, r8)
   12418:	000142b4 	.word	0x000142b4
   1241c:	000142bc 	.word	0x000142bc

00012420 <__sflush_r>:
   12420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12422:	898a      	ldrh	r2, [r1, #12]
   12424:	0005      	movs	r5, r0
   12426:	000c      	movs	r4, r1
   12428:	0713      	lsls	r3, r2, #28
   1242a:	d460      	bmi.n	124ee <__sflush_r+0xce>
   1242c:	684b      	ldr	r3, [r1, #4]
   1242e:	2b00      	cmp	r3, #0
   12430:	dc04      	bgt.n	1243c <__sflush_r+0x1c>
   12432:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   12434:	2b00      	cmp	r3, #0
   12436:	dc01      	bgt.n	1243c <__sflush_r+0x1c>
   12438:	2000      	movs	r0, #0
   1243a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1243c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1243e:	2f00      	cmp	r7, #0
   12440:	d0fa      	beq.n	12438 <__sflush_r+0x18>
   12442:	2300      	movs	r3, #0
   12444:	682e      	ldr	r6, [r5, #0]
   12446:	602b      	str	r3, [r5, #0]
   12448:	2380      	movs	r3, #128	; 0x80
   1244a:	015b      	lsls	r3, r3, #5
   1244c:	401a      	ands	r2, r3
   1244e:	d034      	beq.n	124ba <__sflush_r+0x9a>
   12450:	6d60      	ldr	r0, [r4, #84]	; 0x54
   12452:	89a3      	ldrh	r3, [r4, #12]
   12454:	075b      	lsls	r3, r3, #29
   12456:	d506      	bpl.n	12466 <__sflush_r+0x46>
   12458:	6863      	ldr	r3, [r4, #4]
   1245a:	1ac0      	subs	r0, r0, r3
   1245c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1245e:	2b00      	cmp	r3, #0
   12460:	d001      	beq.n	12466 <__sflush_r+0x46>
   12462:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12464:	1ac0      	subs	r0, r0, r3
   12466:	0002      	movs	r2, r0
   12468:	6a21      	ldr	r1, [r4, #32]
   1246a:	2300      	movs	r3, #0
   1246c:	0028      	movs	r0, r5
   1246e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   12470:	47b8      	blx	r7
   12472:	89a1      	ldrh	r1, [r4, #12]
   12474:	1c43      	adds	r3, r0, #1
   12476:	d106      	bne.n	12486 <__sflush_r+0x66>
   12478:	682b      	ldr	r3, [r5, #0]
   1247a:	2b1d      	cmp	r3, #29
   1247c:	d831      	bhi.n	124e2 <__sflush_r+0xc2>
   1247e:	4a2c      	ldr	r2, [pc, #176]	; (12530 <__sflush_r+0x110>)
   12480:	40da      	lsrs	r2, r3
   12482:	07d3      	lsls	r3, r2, #31
   12484:	d52d      	bpl.n	124e2 <__sflush_r+0xc2>
   12486:	2300      	movs	r3, #0
   12488:	6063      	str	r3, [r4, #4]
   1248a:	6923      	ldr	r3, [r4, #16]
   1248c:	6023      	str	r3, [r4, #0]
   1248e:	04cb      	lsls	r3, r1, #19
   12490:	d505      	bpl.n	1249e <__sflush_r+0x7e>
   12492:	1c43      	adds	r3, r0, #1
   12494:	d102      	bne.n	1249c <__sflush_r+0x7c>
   12496:	682b      	ldr	r3, [r5, #0]
   12498:	2b00      	cmp	r3, #0
   1249a:	d100      	bne.n	1249e <__sflush_r+0x7e>
   1249c:	6560      	str	r0, [r4, #84]	; 0x54
   1249e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   124a0:	602e      	str	r6, [r5, #0]
   124a2:	2900      	cmp	r1, #0
   124a4:	d0c8      	beq.n	12438 <__sflush_r+0x18>
   124a6:	0023      	movs	r3, r4
   124a8:	3344      	adds	r3, #68	; 0x44
   124aa:	4299      	cmp	r1, r3
   124ac:	d002      	beq.n	124b4 <__sflush_r+0x94>
   124ae:	0028      	movs	r0, r5
   124b0:	f7fe f9c0 	bl	10834 <_free_r>
   124b4:	2000      	movs	r0, #0
   124b6:	6360      	str	r0, [r4, #52]	; 0x34
   124b8:	e7bf      	b.n	1243a <__sflush_r+0x1a>
   124ba:	2301      	movs	r3, #1
   124bc:	6a21      	ldr	r1, [r4, #32]
   124be:	0028      	movs	r0, r5
   124c0:	47b8      	blx	r7
   124c2:	1c43      	adds	r3, r0, #1
   124c4:	d1c5      	bne.n	12452 <__sflush_r+0x32>
   124c6:	682b      	ldr	r3, [r5, #0]
   124c8:	2b00      	cmp	r3, #0
   124ca:	d0c2      	beq.n	12452 <__sflush_r+0x32>
   124cc:	2b1d      	cmp	r3, #29
   124ce:	d001      	beq.n	124d4 <__sflush_r+0xb4>
   124d0:	2b16      	cmp	r3, #22
   124d2:	d101      	bne.n	124d8 <__sflush_r+0xb8>
   124d4:	602e      	str	r6, [r5, #0]
   124d6:	e7af      	b.n	12438 <__sflush_r+0x18>
   124d8:	2340      	movs	r3, #64	; 0x40
   124da:	89a2      	ldrh	r2, [r4, #12]
   124dc:	4313      	orrs	r3, r2
   124de:	81a3      	strh	r3, [r4, #12]
   124e0:	e7ab      	b.n	1243a <__sflush_r+0x1a>
   124e2:	2340      	movs	r3, #64	; 0x40
   124e4:	430b      	orrs	r3, r1
   124e6:	2001      	movs	r0, #1
   124e8:	81a3      	strh	r3, [r4, #12]
   124ea:	4240      	negs	r0, r0
   124ec:	e7a5      	b.n	1243a <__sflush_r+0x1a>
   124ee:	690f      	ldr	r7, [r1, #16]
   124f0:	2f00      	cmp	r7, #0
   124f2:	d0a1      	beq.n	12438 <__sflush_r+0x18>
   124f4:	680b      	ldr	r3, [r1, #0]
   124f6:	600f      	str	r7, [r1, #0]
   124f8:	1bdb      	subs	r3, r3, r7
   124fa:	9301      	str	r3, [sp, #4]
   124fc:	2300      	movs	r3, #0
   124fe:	0792      	lsls	r2, r2, #30
   12500:	d100      	bne.n	12504 <__sflush_r+0xe4>
   12502:	694b      	ldr	r3, [r1, #20]
   12504:	60a3      	str	r3, [r4, #8]
   12506:	9b01      	ldr	r3, [sp, #4]
   12508:	2b00      	cmp	r3, #0
   1250a:	dc00      	bgt.n	1250e <__sflush_r+0xee>
   1250c:	e794      	b.n	12438 <__sflush_r+0x18>
   1250e:	9b01      	ldr	r3, [sp, #4]
   12510:	003a      	movs	r2, r7
   12512:	6a21      	ldr	r1, [r4, #32]
   12514:	0028      	movs	r0, r5
   12516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   12518:	47b0      	blx	r6
   1251a:	2800      	cmp	r0, #0
   1251c:	dc03      	bgt.n	12526 <__sflush_r+0x106>
   1251e:	2340      	movs	r3, #64	; 0x40
   12520:	89a2      	ldrh	r2, [r4, #12]
   12522:	4313      	orrs	r3, r2
   12524:	e7df      	b.n	124e6 <__sflush_r+0xc6>
   12526:	9b01      	ldr	r3, [sp, #4]
   12528:	183f      	adds	r7, r7, r0
   1252a:	1a1b      	subs	r3, r3, r0
   1252c:	9301      	str	r3, [sp, #4]
   1252e:	e7ea      	b.n	12506 <__sflush_r+0xe6>
   12530:	20400001 	.word	0x20400001

00012534 <_fflush_r>:
   12534:	690b      	ldr	r3, [r1, #16]
   12536:	b570      	push	{r4, r5, r6, lr}
   12538:	0005      	movs	r5, r0
   1253a:	000c      	movs	r4, r1
   1253c:	2b00      	cmp	r3, #0
   1253e:	d101      	bne.n	12544 <_fflush_r+0x10>
   12540:	2000      	movs	r0, #0
   12542:	bd70      	pop	{r4, r5, r6, pc}
   12544:	2800      	cmp	r0, #0
   12546:	d004      	beq.n	12552 <_fflush_r+0x1e>
   12548:	6983      	ldr	r3, [r0, #24]
   1254a:	2b00      	cmp	r3, #0
   1254c:	d101      	bne.n	12552 <_fflush_r+0x1e>
   1254e:	f000 f85f 	bl	12610 <__sinit>
   12552:	4b0b      	ldr	r3, [pc, #44]	; (12580 <_fflush_r+0x4c>)
   12554:	429c      	cmp	r4, r3
   12556:	d109      	bne.n	1256c <_fflush_r+0x38>
   12558:	686c      	ldr	r4, [r5, #4]
   1255a:	220c      	movs	r2, #12
   1255c:	5ea3      	ldrsh	r3, [r4, r2]
   1255e:	2b00      	cmp	r3, #0
   12560:	d0ee      	beq.n	12540 <_fflush_r+0xc>
   12562:	0021      	movs	r1, r4
   12564:	0028      	movs	r0, r5
   12566:	f7ff ff5b 	bl	12420 <__sflush_r>
   1256a:	e7ea      	b.n	12542 <_fflush_r+0xe>
   1256c:	4b05      	ldr	r3, [pc, #20]	; (12584 <_fflush_r+0x50>)
   1256e:	429c      	cmp	r4, r3
   12570:	d101      	bne.n	12576 <_fflush_r+0x42>
   12572:	68ac      	ldr	r4, [r5, #8]
   12574:	e7f1      	b.n	1255a <_fflush_r+0x26>
   12576:	4b04      	ldr	r3, [pc, #16]	; (12588 <_fflush_r+0x54>)
   12578:	429c      	cmp	r4, r3
   1257a:	d1ee      	bne.n	1255a <_fflush_r+0x26>
   1257c:	68ec      	ldr	r4, [r5, #12]
   1257e:	e7ec      	b.n	1255a <_fflush_r+0x26>
   12580:	000142e4 	.word	0x000142e4
   12584:	00014304 	.word	0x00014304
   12588:	000142c4 	.word	0x000142c4

0001258c <_cleanup_r>:
   1258c:	b510      	push	{r4, lr}
   1258e:	4902      	ldr	r1, [pc, #8]	; (12598 <_cleanup_r+0xc>)
   12590:	f000 f8b2 	bl	126f8 <_fwalk_reent>
   12594:	bd10      	pop	{r4, pc}
   12596:	46c0      	nop			; (mov r8, r8)
   12598:	00012535 	.word	0x00012535

0001259c <std.isra.0>:
   1259c:	2300      	movs	r3, #0
   1259e:	b510      	push	{r4, lr}
   125a0:	0004      	movs	r4, r0
   125a2:	6003      	str	r3, [r0, #0]
   125a4:	6043      	str	r3, [r0, #4]
   125a6:	6083      	str	r3, [r0, #8]
   125a8:	8181      	strh	r1, [r0, #12]
   125aa:	6643      	str	r3, [r0, #100]	; 0x64
   125ac:	81c2      	strh	r2, [r0, #14]
   125ae:	6103      	str	r3, [r0, #16]
   125b0:	6143      	str	r3, [r0, #20]
   125b2:	6183      	str	r3, [r0, #24]
   125b4:	0019      	movs	r1, r3
   125b6:	2208      	movs	r2, #8
   125b8:	305c      	adds	r0, #92	; 0x5c
   125ba:	f7fe f933 	bl	10824 <memset>
   125be:	4b05      	ldr	r3, [pc, #20]	; (125d4 <std.isra.0+0x38>)
   125c0:	6224      	str	r4, [r4, #32]
   125c2:	6263      	str	r3, [r4, #36]	; 0x24
   125c4:	4b04      	ldr	r3, [pc, #16]	; (125d8 <std.isra.0+0x3c>)
   125c6:	62a3      	str	r3, [r4, #40]	; 0x28
   125c8:	4b04      	ldr	r3, [pc, #16]	; (125dc <std.isra.0+0x40>)
   125ca:	62e3      	str	r3, [r4, #44]	; 0x2c
   125cc:	4b04      	ldr	r3, [pc, #16]	; (125e0 <std.isra.0+0x44>)
   125ce:	6323      	str	r3, [r4, #48]	; 0x30
   125d0:	bd10      	pop	{r4, pc}
   125d2:	46c0      	nop			; (mov r8, r8)
   125d4:	00012f09 	.word	0x00012f09
   125d8:	00012f31 	.word	0x00012f31
   125dc:	00012f69 	.word	0x00012f69
   125e0:	00012f95 	.word	0x00012f95

000125e4 <__sfmoreglue>:
   125e4:	b570      	push	{r4, r5, r6, lr}
   125e6:	2568      	movs	r5, #104	; 0x68
   125e8:	1e4a      	subs	r2, r1, #1
   125ea:	4355      	muls	r5, r2
   125ec:	000e      	movs	r6, r1
   125ee:	0029      	movs	r1, r5
   125f0:	3174      	adds	r1, #116	; 0x74
   125f2:	f7fe f969 	bl	108c8 <_malloc_r>
   125f6:	1e04      	subs	r4, r0, #0
   125f8:	d008      	beq.n	1260c <__sfmoreglue+0x28>
   125fa:	2100      	movs	r1, #0
   125fc:	002a      	movs	r2, r5
   125fe:	6001      	str	r1, [r0, #0]
   12600:	6046      	str	r6, [r0, #4]
   12602:	300c      	adds	r0, #12
   12604:	60a0      	str	r0, [r4, #8]
   12606:	3268      	adds	r2, #104	; 0x68
   12608:	f7fe f90c 	bl	10824 <memset>
   1260c:	0020      	movs	r0, r4
   1260e:	bd70      	pop	{r4, r5, r6, pc}

00012610 <__sinit>:
   12610:	6983      	ldr	r3, [r0, #24]
   12612:	b513      	push	{r0, r1, r4, lr}
   12614:	0004      	movs	r4, r0
   12616:	2b00      	cmp	r3, #0
   12618:	d128      	bne.n	1266c <__sinit+0x5c>
   1261a:	6483      	str	r3, [r0, #72]	; 0x48
   1261c:	64c3      	str	r3, [r0, #76]	; 0x4c
   1261e:	6503      	str	r3, [r0, #80]	; 0x50
   12620:	4b13      	ldr	r3, [pc, #76]	; (12670 <__sinit+0x60>)
   12622:	4a14      	ldr	r2, [pc, #80]	; (12674 <__sinit+0x64>)
   12624:	681b      	ldr	r3, [r3, #0]
   12626:	6282      	str	r2, [r0, #40]	; 0x28
   12628:	9301      	str	r3, [sp, #4]
   1262a:	4298      	cmp	r0, r3
   1262c:	d101      	bne.n	12632 <__sinit+0x22>
   1262e:	2301      	movs	r3, #1
   12630:	6183      	str	r3, [r0, #24]
   12632:	0020      	movs	r0, r4
   12634:	f000 f820 	bl	12678 <__sfp>
   12638:	6060      	str	r0, [r4, #4]
   1263a:	0020      	movs	r0, r4
   1263c:	f000 f81c 	bl	12678 <__sfp>
   12640:	60a0      	str	r0, [r4, #8]
   12642:	0020      	movs	r0, r4
   12644:	f000 f818 	bl	12678 <__sfp>
   12648:	2200      	movs	r2, #0
   1264a:	60e0      	str	r0, [r4, #12]
   1264c:	2104      	movs	r1, #4
   1264e:	6860      	ldr	r0, [r4, #4]
   12650:	f7ff ffa4 	bl	1259c <std.isra.0>
   12654:	2201      	movs	r2, #1
   12656:	2109      	movs	r1, #9
   12658:	68a0      	ldr	r0, [r4, #8]
   1265a:	f7ff ff9f 	bl	1259c <std.isra.0>
   1265e:	2202      	movs	r2, #2
   12660:	2112      	movs	r1, #18
   12662:	68e0      	ldr	r0, [r4, #12]
   12664:	f7ff ff9a 	bl	1259c <std.isra.0>
   12668:	2301      	movs	r3, #1
   1266a:	61a3      	str	r3, [r4, #24]
   1266c:	bd13      	pop	{r0, r1, r4, pc}
   1266e:	46c0      	nop			; (mov r8, r8)
   12670:	00014160 	.word	0x00014160
   12674:	0001258d 	.word	0x0001258d

00012678 <__sfp>:
   12678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1267a:	4b1e      	ldr	r3, [pc, #120]	; (126f4 <__sfp+0x7c>)
   1267c:	0007      	movs	r7, r0
   1267e:	681e      	ldr	r6, [r3, #0]
   12680:	69b3      	ldr	r3, [r6, #24]
   12682:	2b00      	cmp	r3, #0
   12684:	d102      	bne.n	1268c <__sfp+0x14>
   12686:	0030      	movs	r0, r6
   12688:	f7ff ffc2 	bl	12610 <__sinit>
   1268c:	3648      	adds	r6, #72	; 0x48
   1268e:	68b4      	ldr	r4, [r6, #8]
   12690:	6873      	ldr	r3, [r6, #4]
   12692:	3b01      	subs	r3, #1
   12694:	d504      	bpl.n	126a0 <__sfp+0x28>
   12696:	6833      	ldr	r3, [r6, #0]
   12698:	2b00      	cmp	r3, #0
   1269a:	d007      	beq.n	126ac <__sfp+0x34>
   1269c:	6836      	ldr	r6, [r6, #0]
   1269e:	e7f6      	b.n	1268e <__sfp+0x16>
   126a0:	220c      	movs	r2, #12
   126a2:	5ea5      	ldrsh	r5, [r4, r2]
   126a4:	2d00      	cmp	r5, #0
   126a6:	d00d      	beq.n	126c4 <__sfp+0x4c>
   126a8:	3468      	adds	r4, #104	; 0x68
   126aa:	e7f2      	b.n	12692 <__sfp+0x1a>
   126ac:	2104      	movs	r1, #4
   126ae:	0038      	movs	r0, r7
   126b0:	f7ff ff98 	bl	125e4 <__sfmoreglue>
   126b4:	6030      	str	r0, [r6, #0]
   126b6:	2800      	cmp	r0, #0
   126b8:	d1f0      	bne.n	1269c <__sfp+0x24>
   126ba:	230c      	movs	r3, #12
   126bc:	0004      	movs	r4, r0
   126be:	603b      	str	r3, [r7, #0]
   126c0:	0020      	movs	r0, r4
   126c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   126c4:	2301      	movs	r3, #1
   126c6:	0020      	movs	r0, r4
   126c8:	425b      	negs	r3, r3
   126ca:	81e3      	strh	r3, [r4, #14]
   126cc:	3302      	adds	r3, #2
   126ce:	81a3      	strh	r3, [r4, #12]
   126d0:	6665      	str	r5, [r4, #100]	; 0x64
   126d2:	6025      	str	r5, [r4, #0]
   126d4:	60a5      	str	r5, [r4, #8]
   126d6:	6065      	str	r5, [r4, #4]
   126d8:	6125      	str	r5, [r4, #16]
   126da:	6165      	str	r5, [r4, #20]
   126dc:	61a5      	str	r5, [r4, #24]
   126de:	2208      	movs	r2, #8
   126e0:	0029      	movs	r1, r5
   126e2:	305c      	adds	r0, #92	; 0x5c
   126e4:	f7fe f89e 	bl	10824 <memset>
   126e8:	6365      	str	r5, [r4, #52]	; 0x34
   126ea:	63a5      	str	r5, [r4, #56]	; 0x38
   126ec:	64a5      	str	r5, [r4, #72]	; 0x48
   126ee:	64e5      	str	r5, [r4, #76]	; 0x4c
   126f0:	e7e6      	b.n	126c0 <__sfp+0x48>
   126f2:	46c0      	nop			; (mov r8, r8)
   126f4:	00014160 	.word	0x00014160

000126f8 <_fwalk_reent>:
   126f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   126fa:	0004      	movs	r4, r0
   126fc:	0007      	movs	r7, r0
   126fe:	2600      	movs	r6, #0
   12700:	9101      	str	r1, [sp, #4]
   12702:	3448      	adds	r4, #72	; 0x48
   12704:	2c00      	cmp	r4, #0
   12706:	d101      	bne.n	1270c <_fwalk_reent+0x14>
   12708:	0030      	movs	r0, r6
   1270a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1270c:	6863      	ldr	r3, [r4, #4]
   1270e:	68a5      	ldr	r5, [r4, #8]
   12710:	9300      	str	r3, [sp, #0]
   12712:	9b00      	ldr	r3, [sp, #0]
   12714:	3b01      	subs	r3, #1
   12716:	9300      	str	r3, [sp, #0]
   12718:	d501      	bpl.n	1271e <_fwalk_reent+0x26>
   1271a:	6824      	ldr	r4, [r4, #0]
   1271c:	e7f2      	b.n	12704 <_fwalk_reent+0xc>
   1271e:	89ab      	ldrh	r3, [r5, #12]
   12720:	2b01      	cmp	r3, #1
   12722:	d908      	bls.n	12736 <_fwalk_reent+0x3e>
   12724:	220e      	movs	r2, #14
   12726:	5eab      	ldrsh	r3, [r5, r2]
   12728:	3301      	adds	r3, #1
   1272a:	d004      	beq.n	12736 <_fwalk_reent+0x3e>
   1272c:	0029      	movs	r1, r5
   1272e:	0038      	movs	r0, r7
   12730:	9b01      	ldr	r3, [sp, #4]
   12732:	4798      	blx	r3
   12734:	4306      	orrs	r6, r0
   12736:	3568      	adds	r5, #104	; 0x68
   12738:	e7eb      	b.n	12712 <_fwalk_reent+0x1a>
	...

0001273c <_localeconv_r>:
   1273c:	4b03      	ldr	r3, [pc, #12]	; (1274c <_localeconv_r+0x10>)
   1273e:	681b      	ldr	r3, [r3, #0]
   12740:	6a18      	ldr	r0, [r3, #32]
   12742:	2800      	cmp	r0, #0
   12744:	d100      	bne.n	12748 <_localeconv_r+0xc>
   12746:	4802      	ldr	r0, [pc, #8]	; (12750 <_localeconv_r+0x14>)
   12748:	30f0      	adds	r0, #240	; 0xf0
   1274a:	4770      	bx	lr
   1274c:	200000a4 	.word	0x200000a4
   12750:	20000108 	.word	0x20000108

00012754 <__swhatbuf_r>:
   12754:	b570      	push	{r4, r5, r6, lr}
   12756:	000e      	movs	r6, r1
   12758:	001d      	movs	r5, r3
   1275a:	230e      	movs	r3, #14
   1275c:	5ec9      	ldrsh	r1, [r1, r3]
   1275e:	b090      	sub	sp, #64	; 0x40
   12760:	0014      	movs	r4, r2
   12762:	2900      	cmp	r1, #0
   12764:	da07      	bge.n	12776 <__swhatbuf_r+0x22>
   12766:	2300      	movs	r3, #0
   12768:	602b      	str	r3, [r5, #0]
   1276a:	89b3      	ldrh	r3, [r6, #12]
   1276c:	061b      	lsls	r3, r3, #24
   1276e:	d411      	bmi.n	12794 <__swhatbuf_r+0x40>
   12770:	2380      	movs	r3, #128	; 0x80
   12772:	00db      	lsls	r3, r3, #3
   12774:	e00f      	b.n	12796 <__swhatbuf_r+0x42>
   12776:	aa01      	add	r2, sp, #4
   12778:	f000 fc38 	bl	12fec <_fstat_r>
   1277c:	2800      	cmp	r0, #0
   1277e:	dbf2      	blt.n	12766 <__swhatbuf_r+0x12>
   12780:	22f0      	movs	r2, #240	; 0xf0
   12782:	9b02      	ldr	r3, [sp, #8]
   12784:	0212      	lsls	r2, r2, #8
   12786:	4013      	ands	r3, r2
   12788:	4a05      	ldr	r2, [pc, #20]	; (127a0 <__swhatbuf_r+0x4c>)
   1278a:	189b      	adds	r3, r3, r2
   1278c:	425a      	negs	r2, r3
   1278e:	4153      	adcs	r3, r2
   12790:	602b      	str	r3, [r5, #0]
   12792:	e7ed      	b.n	12770 <__swhatbuf_r+0x1c>
   12794:	2340      	movs	r3, #64	; 0x40
   12796:	2000      	movs	r0, #0
   12798:	6023      	str	r3, [r4, #0]
   1279a:	b010      	add	sp, #64	; 0x40
   1279c:	bd70      	pop	{r4, r5, r6, pc}
   1279e:	46c0      	nop			; (mov r8, r8)
   127a0:	ffffe000 	.word	0xffffe000

000127a4 <__smakebuf_r>:
   127a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   127a6:	2602      	movs	r6, #2
   127a8:	898b      	ldrh	r3, [r1, #12]
   127aa:	0005      	movs	r5, r0
   127ac:	000c      	movs	r4, r1
   127ae:	4233      	tst	r3, r6
   127b0:	d006      	beq.n	127c0 <__smakebuf_r+0x1c>
   127b2:	0023      	movs	r3, r4
   127b4:	3347      	adds	r3, #71	; 0x47
   127b6:	6023      	str	r3, [r4, #0]
   127b8:	6123      	str	r3, [r4, #16]
   127ba:	2301      	movs	r3, #1
   127bc:	6163      	str	r3, [r4, #20]
   127be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   127c0:	ab01      	add	r3, sp, #4
   127c2:	466a      	mov	r2, sp
   127c4:	f7ff ffc6 	bl	12754 <__swhatbuf_r>
   127c8:	9900      	ldr	r1, [sp, #0]
   127ca:	0007      	movs	r7, r0
   127cc:	0028      	movs	r0, r5
   127ce:	f7fe f87b 	bl	108c8 <_malloc_r>
   127d2:	2800      	cmp	r0, #0
   127d4:	d108      	bne.n	127e8 <__smakebuf_r+0x44>
   127d6:	220c      	movs	r2, #12
   127d8:	5ea3      	ldrsh	r3, [r4, r2]
   127da:	059a      	lsls	r2, r3, #22
   127dc:	d4ef      	bmi.n	127be <__smakebuf_r+0x1a>
   127de:	2203      	movs	r2, #3
   127e0:	4393      	bics	r3, r2
   127e2:	431e      	orrs	r6, r3
   127e4:	81a6      	strh	r6, [r4, #12]
   127e6:	e7e4      	b.n	127b2 <__smakebuf_r+0xe>
   127e8:	4b0f      	ldr	r3, [pc, #60]	; (12828 <__smakebuf_r+0x84>)
   127ea:	62ab      	str	r3, [r5, #40]	; 0x28
   127ec:	2380      	movs	r3, #128	; 0x80
   127ee:	89a2      	ldrh	r2, [r4, #12]
   127f0:	6020      	str	r0, [r4, #0]
   127f2:	4313      	orrs	r3, r2
   127f4:	81a3      	strh	r3, [r4, #12]
   127f6:	9b00      	ldr	r3, [sp, #0]
   127f8:	6120      	str	r0, [r4, #16]
   127fa:	6163      	str	r3, [r4, #20]
   127fc:	9b01      	ldr	r3, [sp, #4]
   127fe:	2b00      	cmp	r3, #0
   12800:	d00d      	beq.n	1281e <__smakebuf_r+0x7a>
   12802:	230e      	movs	r3, #14
   12804:	5ee1      	ldrsh	r1, [r4, r3]
   12806:	0028      	movs	r0, r5
   12808:	f000 fc02 	bl	13010 <_isatty_r>
   1280c:	2800      	cmp	r0, #0
   1280e:	d006      	beq.n	1281e <__smakebuf_r+0x7a>
   12810:	2203      	movs	r2, #3
   12812:	89a3      	ldrh	r3, [r4, #12]
   12814:	4393      	bics	r3, r2
   12816:	001a      	movs	r2, r3
   12818:	2301      	movs	r3, #1
   1281a:	4313      	orrs	r3, r2
   1281c:	81a3      	strh	r3, [r4, #12]
   1281e:	89a0      	ldrh	r0, [r4, #12]
   12820:	4338      	orrs	r0, r7
   12822:	81a0      	strh	r0, [r4, #12]
   12824:	e7cb      	b.n	127be <__smakebuf_r+0x1a>
   12826:	46c0      	nop			; (mov r8, r8)
   12828:	0001258d 	.word	0x0001258d

0001282c <memchr>:
   1282c:	b2c9      	uxtb	r1, r1
   1282e:	1882      	adds	r2, r0, r2
   12830:	4290      	cmp	r0, r2
   12832:	d101      	bne.n	12838 <memchr+0xc>
   12834:	2000      	movs	r0, #0
   12836:	4770      	bx	lr
   12838:	7803      	ldrb	r3, [r0, #0]
   1283a:	428b      	cmp	r3, r1
   1283c:	d0fb      	beq.n	12836 <memchr+0xa>
   1283e:	3001      	adds	r0, #1
   12840:	e7f6      	b.n	12830 <memchr+0x4>

00012842 <__malloc_lock>:
   12842:	4770      	bx	lr

00012844 <__malloc_unlock>:
   12844:	4770      	bx	lr

00012846 <_Balloc>:
   12846:	b570      	push	{r4, r5, r6, lr}
   12848:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1284a:	0004      	movs	r4, r0
   1284c:	000d      	movs	r5, r1
   1284e:	2e00      	cmp	r6, #0
   12850:	d107      	bne.n	12862 <_Balloc+0x1c>
   12852:	2010      	movs	r0, #16
   12854:	f7fd ffa8 	bl	107a8 <malloc>
   12858:	6260      	str	r0, [r4, #36]	; 0x24
   1285a:	6046      	str	r6, [r0, #4]
   1285c:	6086      	str	r6, [r0, #8]
   1285e:	6006      	str	r6, [r0, #0]
   12860:	60c6      	str	r6, [r0, #12]
   12862:	6a66      	ldr	r6, [r4, #36]	; 0x24
   12864:	68f3      	ldr	r3, [r6, #12]
   12866:	2b00      	cmp	r3, #0
   12868:	d013      	beq.n	12892 <_Balloc+0x4c>
   1286a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1286c:	00aa      	lsls	r2, r5, #2
   1286e:	68db      	ldr	r3, [r3, #12]
   12870:	189b      	adds	r3, r3, r2
   12872:	6818      	ldr	r0, [r3, #0]
   12874:	2800      	cmp	r0, #0
   12876:	d118      	bne.n	128aa <_Balloc+0x64>
   12878:	2101      	movs	r1, #1
   1287a:	000e      	movs	r6, r1
   1287c:	40ae      	lsls	r6, r5
   1287e:	1d72      	adds	r2, r6, #5
   12880:	0092      	lsls	r2, r2, #2
   12882:	0020      	movs	r0, r4
   12884:	f000 fac2 	bl	12e0c <_calloc_r>
   12888:	2800      	cmp	r0, #0
   1288a:	d00c      	beq.n	128a6 <_Balloc+0x60>
   1288c:	6045      	str	r5, [r0, #4]
   1288e:	6086      	str	r6, [r0, #8]
   12890:	e00d      	b.n	128ae <_Balloc+0x68>
   12892:	2221      	movs	r2, #33	; 0x21
   12894:	2104      	movs	r1, #4
   12896:	0020      	movs	r0, r4
   12898:	f000 fab8 	bl	12e0c <_calloc_r>
   1289c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1289e:	60f0      	str	r0, [r6, #12]
   128a0:	68db      	ldr	r3, [r3, #12]
   128a2:	2b00      	cmp	r3, #0
   128a4:	d1e1      	bne.n	1286a <_Balloc+0x24>
   128a6:	2000      	movs	r0, #0
   128a8:	bd70      	pop	{r4, r5, r6, pc}
   128aa:	6802      	ldr	r2, [r0, #0]
   128ac:	601a      	str	r2, [r3, #0]
   128ae:	2300      	movs	r3, #0
   128b0:	6103      	str	r3, [r0, #16]
   128b2:	60c3      	str	r3, [r0, #12]
   128b4:	e7f8      	b.n	128a8 <_Balloc+0x62>

000128b6 <_Bfree>:
   128b6:	b570      	push	{r4, r5, r6, lr}
   128b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   128ba:	0006      	movs	r6, r0
   128bc:	000d      	movs	r5, r1
   128be:	2c00      	cmp	r4, #0
   128c0:	d107      	bne.n	128d2 <_Bfree+0x1c>
   128c2:	2010      	movs	r0, #16
   128c4:	f7fd ff70 	bl	107a8 <malloc>
   128c8:	6270      	str	r0, [r6, #36]	; 0x24
   128ca:	6044      	str	r4, [r0, #4]
   128cc:	6084      	str	r4, [r0, #8]
   128ce:	6004      	str	r4, [r0, #0]
   128d0:	60c4      	str	r4, [r0, #12]
   128d2:	2d00      	cmp	r5, #0
   128d4:	d007      	beq.n	128e6 <_Bfree+0x30>
   128d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   128d8:	686a      	ldr	r2, [r5, #4]
   128da:	68db      	ldr	r3, [r3, #12]
   128dc:	0092      	lsls	r2, r2, #2
   128de:	189b      	adds	r3, r3, r2
   128e0:	681a      	ldr	r2, [r3, #0]
   128e2:	602a      	str	r2, [r5, #0]
   128e4:	601d      	str	r5, [r3, #0]
   128e6:	bd70      	pop	{r4, r5, r6, pc}

000128e8 <__multadd>:
   128e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   128ea:	001e      	movs	r6, r3
   128ec:	2314      	movs	r3, #20
   128ee:	469c      	mov	ip, r3
   128f0:	0007      	movs	r7, r0
   128f2:	000c      	movs	r4, r1
   128f4:	2000      	movs	r0, #0
   128f6:	690d      	ldr	r5, [r1, #16]
   128f8:	448c      	add	ip, r1
   128fa:	4663      	mov	r3, ip
   128fc:	8819      	ldrh	r1, [r3, #0]
   128fe:	681b      	ldr	r3, [r3, #0]
   12900:	4351      	muls	r1, r2
   12902:	0c1b      	lsrs	r3, r3, #16
   12904:	4353      	muls	r3, r2
   12906:	1989      	adds	r1, r1, r6
   12908:	0c0e      	lsrs	r6, r1, #16
   1290a:	199b      	adds	r3, r3, r6
   1290c:	b289      	uxth	r1, r1
   1290e:	0c1e      	lsrs	r6, r3, #16
   12910:	041b      	lsls	r3, r3, #16
   12912:	185b      	adds	r3, r3, r1
   12914:	4661      	mov	r1, ip
   12916:	3001      	adds	r0, #1
   12918:	c108      	stmia	r1!, {r3}
   1291a:	468c      	mov	ip, r1
   1291c:	4285      	cmp	r5, r0
   1291e:	dcec      	bgt.n	128fa <__multadd+0x12>
   12920:	2e00      	cmp	r6, #0
   12922:	d01b      	beq.n	1295c <__multadd+0x74>
   12924:	68a3      	ldr	r3, [r4, #8]
   12926:	429d      	cmp	r5, r3
   12928:	db12      	blt.n	12950 <__multadd+0x68>
   1292a:	6863      	ldr	r3, [r4, #4]
   1292c:	0038      	movs	r0, r7
   1292e:	1c59      	adds	r1, r3, #1
   12930:	f7ff ff89 	bl	12846 <_Balloc>
   12934:	0021      	movs	r1, r4
   12936:	6923      	ldr	r3, [r4, #16]
   12938:	9001      	str	r0, [sp, #4]
   1293a:	1c9a      	adds	r2, r3, #2
   1293c:	0092      	lsls	r2, r2, #2
   1293e:	310c      	adds	r1, #12
   12940:	300c      	adds	r0, #12
   12942:	f7fd ff66 	bl	10812 <memcpy>
   12946:	0021      	movs	r1, r4
   12948:	0038      	movs	r0, r7
   1294a:	f7ff ffb4 	bl	128b6 <_Bfree>
   1294e:	9c01      	ldr	r4, [sp, #4]
   12950:	1d2b      	adds	r3, r5, #4
   12952:	009b      	lsls	r3, r3, #2
   12954:	18e3      	adds	r3, r4, r3
   12956:	3501      	adds	r5, #1
   12958:	605e      	str	r6, [r3, #4]
   1295a:	6125      	str	r5, [r4, #16]
   1295c:	0020      	movs	r0, r4
   1295e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00012960 <__hi0bits>:
   12960:	0003      	movs	r3, r0
   12962:	0c02      	lsrs	r2, r0, #16
   12964:	2000      	movs	r0, #0
   12966:	4282      	cmp	r2, r0
   12968:	d101      	bne.n	1296e <__hi0bits+0xe>
   1296a:	041b      	lsls	r3, r3, #16
   1296c:	3010      	adds	r0, #16
   1296e:	0e1a      	lsrs	r2, r3, #24
   12970:	d101      	bne.n	12976 <__hi0bits+0x16>
   12972:	3008      	adds	r0, #8
   12974:	021b      	lsls	r3, r3, #8
   12976:	0f1a      	lsrs	r2, r3, #28
   12978:	d101      	bne.n	1297e <__hi0bits+0x1e>
   1297a:	3004      	adds	r0, #4
   1297c:	011b      	lsls	r3, r3, #4
   1297e:	0f9a      	lsrs	r2, r3, #30
   12980:	d101      	bne.n	12986 <__hi0bits+0x26>
   12982:	3002      	adds	r0, #2
   12984:	009b      	lsls	r3, r3, #2
   12986:	2b00      	cmp	r3, #0
   12988:	db03      	blt.n	12992 <__hi0bits+0x32>
   1298a:	3001      	adds	r0, #1
   1298c:	005b      	lsls	r3, r3, #1
   1298e:	d400      	bmi.n	12992 <__hi0bits+0x32>
   12990:	2020      	movs	r0, #32
   12992:	4770      	bx	lr

00012994 <__lo0bits>:
   12994:	2207      	movs	r2, #7
   12996:	6803      	ldr	r3, [r0, #0]
   12998:	b510      	push	{r4, lr}
   1299a:	0001      	movs	r1, r0
   1299c:	401a      	ands	r2, r3
   1299e:	d00d      	beq.n	129bc <__lo0bits+0x28>
   129a0:	2401      	movs	r4, #1
   129a2:	2000      	movs	r0, #0
   129a4:	4223      	tst	r3, r4
   129a6:	d105      	bne.n	129b4 <__lo0bits+0x20>
   129a8:	3002      	adds	r0, #2
   129aa:	4203      	tst	r3, r0
   129ac:	d003      	beq.n	129b6 <__lo0bits+0x22>
   129ae:	40e3      	lsrs	r3, r4
   129b0:	0020      	movs	r0, r4
   129b2:	600b      	str	r3, [r1, #0]
   129b4:	bd10      	pop	{r4, pc}
   129b6:	089b      	lsrs	r3, r3, #2
   129b8:	600b      	str	r3, [r1, #0]
   129ba:	e7fb      	b.n	129b4 <__lo0bits+0x20>
   129bc:	b29c      	uxth	r4, r3
   129be:	0010      	movs	r0, r2
   129c0:	2c00      	cmp	r4, #0
   129c2:	d101      	bne.n	129c8 <__lo0bits+0x34>
   129c4:	2010      	movs	r0, #16
   129c6:	0c1b      	lsrs	r3, r3, #16
   129c8:	b2da      	uxtb	r2, r3
   129ca:	2a00      	cmp	r2, #0
   129cc:	d101      	bne.n	129d2 <__lo0bits+0x3e>
   129ce:	3008      	adds	r0, #8
   129d0:	0a1b      	lsrs	r3, r3, #8
   129d2:	071a      	lsls	r2, r3, #28
   129d4:	d101      	bne.n	129da <__lo0bits+0x46>
   129d6:	3004      	adds	r0, #4
   129d8:	091b      	lsrs	r3, r3, #4
   129da:	079a      	lsls	r2, r3, #30
   129dc:	d101      	bne.n	129e2 <__lo0bits+0x4e>
   129de:	3002      	adds	r0, #2
   129e0:	089b      	lsrs	r3, r3, #2
   129e2:	07da      	lsls	r2, r3, #31
   129e4:	d4e8      	bmi.n	129b8 <__lo0bits+0x24>
   129e6:	085b      	lsrs	r3, r3, #1
   129e8:	d001      	beq.n	129ee <__lo0bits+0x5a>
   129ea:	3001      	adds	r0, #1
   129ec:	e7e4      	b.n	129b8 <__lo0bits+0x24>
   129ee:	2020      	movs	r0, #32
   129f0:	e7e0      	b.n	129b4 <__lo0bits+0x20>

000129f2 <__i2b>:
   129f2:	b510      	push	{r4, lr}
   129f4:	000c      	movs	r4, r1
   129f6:	2101      	movs	r1, #1
   129f8:	f7ff ff25 	bl	12846 <_Balloc>
   129fc:	2301      	movs	r3, #1
   129fe:	6144      	str	r4, [r0, #20]
   12a00:	6103      	str	r3, [r0, #16]
   12a02:	bd10      	pop	{r4, pc}

00012a04 <__multiply>:
   12a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a06:	690b      	ldr	r3, [r1, #16]
   12a08:	0015      	movs	r5, r2
   12a0a:	6912      	ldr	r2, [r2, #16]
   12a0c:	b089      	sub	sp, #36	; 0x24
   12a0e:	000c      	movs	r4, r1
   12a10:	4293      	cmp	r3, r2
   12a12:	da01      	bge.n	12a18 <__multiply+0x14>
   12a14:	002c      	movs	r4, r5
   12a16:	000d      	movs	r5, r1
   12a18:	6927      	ldr	r7, [r4, #16]
   12a1a:	692e      	ldr	r6, [r5, #16]
   12a1c:	68a2      	ldr	r2, [r4, #8]
   12a1e:	19bb      	adds	r3, r7, r6
   12a20:	6861      	ldr	r1, [r4, #4]
   12a22:	9301      	str	r3, [sp, #4]
   12a24:	4293      	cmp	r3, r2
   12a26:	dd00      	ble.n	12a2a <__multiply+0x26>
   12a28:	3101      	adds	r1, #1
   12a2a:	f7ff ff0c 	bl	12846 <_Balloc>
   12a2e:	0003      	movs	r3, r0
   12a30:	3314      	adds	r3, #20
   12a32:	9300      	str	r3, [sp, #0]
   12a34:	9a00      	ldr	r2, [sp, #0]
   12a36:	19bb      	adds	r3, r7, r6
   12a38:	4694      	mov	ip, r2
   12a3a:	009b      	lsls	r3, r3, #2
   12a3c:	449c      	add	ip, r3
   12a3e:	0013      	movs	r3, r2
   12a40:	2200      	movs	r2, #0
   12a42:	9004      	str	r0, [sp, #16]
   12a44:	4563      	cmp	r3, ip
   12a46:	d31c      	bcc.n	12a82 <__multiply+0x7e>
   12a48:	002a      	movs	r2, r5
   12a4a:	3414      	adds	r4, #20
   12a4c:	00bf      	lsls	r7, r7, #2
   12a4e:	19e3      	adds	r3, r4, r7
   12a50:	3214      	adds	r2, #20
   12a52:	00b6      	lsls	r6, r6, #2
   12a54:	9305      	str	r3, [sp, #20]
   12a56:	1993      	adds	r3, r2, r6
   12a58:	9402      	str	r4, [sp, #8]
   12a5a:	9306      	str	r3, [sp, #24]
   12a5c:	9b06      	ldr	r3, [sp, #24]
   12a5e:	429a      	cmp	r2, r3
   12a60:	d311      	bcc.n	12a86 <__multiply+0x82>
   12a62:	9b01      	ldr	r3, [sp, #4]
   12a64:	2b00      	cmp	r3, #0
   12a66:	dd06      	ble.n	12a76 <__multiply+0x72>
   12a68:	2304      	movs	r3, #4
   12a6a:	425b      	negs	r3, r3
   12a6c:	449c      	add	ip, r3
   12a6e:	4663      	mov	r3, ip
   12a70:	681b      	ldr	r3, [r3, #0]
   12a72:	2b00      	cmp	r3, #0
   12a74:	d051      	beq.n	12b1a <__multiply+0x116>
   12a76:	9b04      	ldr	r3, [sp, #16]
   12a78:	9a01      	ldr	r2, [sp, #4]
   12a7a:	0018      	movs	r0, r3
   12a7c:	611a      	str	r2, [r3, #16]
   12a7e:	b009      	add	sp, #36	; 0x24
   12a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a82:	c304      	stmia	r3!, {r2}
   12a84:	e7de      	b.n	12a44 <__multiply+0x40>
   12a86:	8814      	ldrh	r4, [r2, #0]
   12a88:	2c00      	cmp	r4, #0
   12a8a:	d01e      	beq.n	12aca <__multiply+0xc6>
   12a8c:	2600      	movs	r6, #0
   12a8e:	9d00      	ldr	r5, [sp, #0]
   12a90:	9f02      	ldr	r7, [sp, #8]
   12a92:	cf01      	ldmia	r7!, {r0}
   12a94:	9507      	str	r5, [sp, #28]
   12a96:	cd08      	ldmia	r5!, {r3}
   12a98:	9303      	str	r3, [sp, #12]
   12a9a:	b283      	uxth	r3, r0
   12a9c:	4363      	muls	r3, r4
   12a9e:	0019      	movs	r1, r3
   12aa0:	466b      	mov	r3, sp
   12aa2:	0c00      	lsrs	r0, r0, #16
   12aa4:	899b      	ldrh	r3, [r3, #12]
   12aa6:	4360      	muls	r0, r4
   12aa8:	18cb      	adds	r3, r1, r3
   12aaa:	9903      	ldr	r1, [sp, #12]
   12aac:	199b      	adds	r3, r3, r6
   12aae:	0c09      	lsrs	r1, r1, #16
   12ab0:	1841      	adds	r1, r0, r1
   12ab2:	0c18      	lsrs	r0, r3, #16
   12ab4:	1809      	adds	r1, r1, r0
   12ab6:	0c0e      	lsrs	r6, r1, #16
   12ab8:	b29b      	uxth	r3, r3
   12aba:	0409      	lsls	r1, r1, #16
   12abc:	430b      	orrs	r3, r1
   12abe:	9907      	ldr	r1, [sp, #28]
   12ac0:	600b      	str	r3, [r1, #0]
   12ac2:	9b05      	ldr	r3, [sp, #20]
   12ac4:	42bb      	cmp	r3, r7
   12ac6:	d8e4      	bhi.n	12a92 <__multiply+0x8e>
   12ac8:	602e      	str	r6, [r5, #0]
   12aca:	6813      	ldr	r3, [r2, #0]
   12acc:	0c1b      	lsrs	r3, r3, #16
   12ace:	9303      	str	r3, [sp, #12]
   12ad0:	d01e      	beq.n	12b10 <__multiply+0x10c>
   12ad2:	2600      	movs	r6, #0
   12ad4:	9b00      	ldr	r3, [sp, #0]
   12ad6:	9c02      	ldr	r4, [sp, #8]
   12ad8:	681b      	ldr	r3, [r3, #0]
   12ada:	9800      	ldr	r0, [sp, #0]
   12adc:	0007      	movs	r7, r0
   12ade:	8821      	ldrh	r1, [r4, #0]
   12ae0:	9d03      	ldr	r5, [sp, #12]
   12ae2:	b29b      	uxth	r3, r3
   12ae4:	4369      	muls	r1, r5
   12ae6:	c820      	ldmia	r0!, {r5}
   12ae8:	0c2d      	lsrs	r5, r5, #16
   12aea:	1949      	adds	r1, r1, r5
   12aec:	198e      	adds	r6, r1, r6
   12aee:	0431      	lsls	r1, r6, #16
   12af0:	430b      	orrs	r3, r1
   12af2:	603b      	str	r3, [r7, #0]
   12af4:	cc08      	ldmia	r4!, {r3}
   12af6:	9903      	ldr	r1, [sp, #12]
   12af8:	0c1b      	lsrs	r3, r3, #16
   12afa:	434b      	muls	r3, r1
   12afc:	6879      	ldr	r1, [r7, #4]
   12afe:	0c36      	lsrs	r6, r6, #16
   12b00:	b289      	uxth	r1, r1
   12b02:	185b      	adds	r3, r3, r1
   12b04:	9905      	ldr	r1, [sp, #20]
   12b06:	199b      	adds	r3, r3, r6
   12b08:	0c1e      	lsrs	r6, r3, #16
   12b0a:	42a1      	cmp	r1, r4
   12b0c:	d8e6      	bhi.n	12adc <__multiply+0xd8>
   12b0e:	6003      	str	r3, [r0, #0]
   12b10:	9b00      	ldr	r3, [sp, #0]
   12b12:	3204      	adds	r2, #4
   12b14:	3304      	adds	r3, #4
   12b16:	9300      	str	r3, [sp, #0]
   12b18:	e7a0      	b.n	12a5c <__multiply+0x58>
   12b1a:	9b01      	ldr	r3, [sp, #4]
   12b1c:	3b01      	subs	r3, #1
   12b1e:	9301      	str	r3, [sp, #4]
   12b20:	e79f      	b.n	12a62 <__multiply+0x5e>
	...

00012b24 <__pow5mult>:
   12b24:	2303      	movs	r3, #3
   12b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b28:	4013      	ands	r3, r2
   12b2a:	0005      	movs	r5, r0
   12b2c:	000e      	movs	r6, r1
   12b2e:	0014      	movs	r4, r2
   12b30:	2b00      	cmp	r3, #0
   12b32:	d008      	beq.n	12b46 <__pow5mult+0x22>
   12b34:	4922      	ldr	r1, [pc, #136]	; (12bc0 <__pow5mult+0x9c>)
   12b36:	3b01      	subs	r3, #1
   12b38:	009a      	lsls	r2, r3, #2
   12b3a:	5852      	ldr	r2, [r2, r1]
   12b3c:	2300      	movs	r3, #0
   12b3e:	0031      	movs	r1, r6
   12b40:	f7ff fed2 	bl	128e8 <__multadd>
   12b44:	0006      	movs	r6, r0
   12b46:	10a3      	asrs	r3, r4, #2
   12b48:	9301      	str	r3, [sp, #4]
   12b4a:	d036      	beq.n	12bba <__pow5mult+0x96>
   12b4c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   12b4e:	2c00      	cmp	r4, #0
   12b50:	d107      	bne.n	12b62 <__pow5mult+0x3e>
   12b52:	2010      	movs	r0, #16
   12b54:	f7fd fe28 	bl	107a8 <malloc>
   12b58:	6268      	str	r0, [r5, #36]	; 0x24
   12b5a:	6044      	str	r4, [r0, #4]
   12b5c:	6084      	str	r4, [r0, #8]
   12b5e:	6004      	str	r4, [r0, #0]
   12b60:	60c4      	str	r4, [r0, #12]
   12b62:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   12b64:	68bc      	ldr	r4, [r7, #8]
   12b66:	2c00      	cmp	r4, #0
   12b68:	d107      	bne.n	12b7a <__pow5mult+0x56>
   12b6a:	4916      	ldr	r1, [pc, #88]	; (12bc4 <__pow5mult+0xa0>)
   12b6c:	0028      	movs	r0, r5
   12b6e:	f7ff ff40 	bl	129f2 <__i2b>
   12b72:	2300      	movs	r3, #0
   12b74:	0004      	movs	r4, r0
   12b76:	60b8      	str	r0, [r7, #8]
   12b78:	6003      	str	r3, [r0, #0]
   12b7a:	2201      	movs	r2, #1
   12b7c:	9b01      	ldr	r3, [sp, #4]
   12b7e:	4213      	tst	r3, r2
   12b80:	d00a      	beq.n	12b98 <__pow5mult+0x74>
   12b82:	0031      	movs	r1, r6
   12b84:	0022      	movs	r2, r4
   12b86:	0028      	movs	r0, r5
   12b88:	f7ff ff3c 	bl	12a04 <__multiply>
   12b8c:	0007      	movs	r7, r0
   12b8e:	0031      	movs	r1, r6
   12b90:	0028      	movs	r0, r5
   12b92:	f7ff fe90 	bl	128b6 <_Bfree>
   12b96:	003e      	movs	r6, r7
   12b98:	9b01      	ldr	r3, [sp, #4]
   12b9a:	105b      	asrs	r3, r3, #1
   12b9c:	9301      	str	r3, [sp, #4]
   12b9e:	d00c      	beq.n	12bba <__pow5mult+0x96>
   12ba0:	6820      	ldr	r0, [r4, #0]
   12ba2:	2800      	cmp	r0, #0
   12ba4:	d107      	bne.n	12bb6 <__pow5mult+0x92>
   12ba6:	0022      	movs	r2, r4
   12ba8:	0021      	movs	r1, r4
   12baa:	0028      	movs	r0, r5
   12bac:	f7ff ff2a 	bl	12a04 <__multiply>
   12bb0:	2300      	movs	r3, #0
   12bb2:	6020      	str	r0, [r4, #0]
   12bb4:	6003      	str	r3, [r0, #0]
   12bb6:	0004      	movs	r4, r0
   12bb8:	e7df      	b.n	12b7a <__pow5mult+0x56>
   12bba:	0030      	movs	r0, r6
   12bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12bbe:	46c0      	nop			; (mov r8, r8)
   12bc0:	00014418 	.word	0x00014418
   12bc4:	00000271 	.word	0x00000271

00012bc8 <__lshift>:
   12bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bca:	000d      	movs	r5, r1
   12bcc:	0017      	movs	r7, r2
   12bce:	692b      	ldr	r3, [r5, #16]
   12bd0:	1154      	asrs	r4, r2, #5
   12bd2:	b085      	sub	sp, #20
   12bd4:	18e3      	adds	r3, r4, r3
   12bd6:	9302      	str	r3, [sp, #8]
   12bd8:	3301      	adds	r3, #1
   12bda:	9301      	str	r3, [sp, #4]
   12bdc:	6849      	ldr	r1, [r1, #4]
   12bde:	68ab      	ldr	r3, [r5, #8]
   12be0:	9003      	str	r0, [sp, #12]
   12be2:	9a01      	ldr	r2, [sp, #4]
   12be4:	4293      	cmp	r3, r2
   12be6:	db34      	blt.n	12c52 <__lshift+0x8a>
   12be8:	9803      	ldr	r0, [sp, #12]
   12bea:	f7ff fe2c 	bl	12846 <_Balloc>
   12bee:	2300      	movs	r3, #0
   12bf0:	0002      	movs	r2, r0
   12bf2:	0006      	movs	r6, r0
   12bf4:	0019      	movs	r1, r3
   12bf6:	3214      	adds	r2, #20
   12bf8:	42a3      	cmp	r3, r4
   12bfa:	db2d      	blt.n	12c58 <__lshift+0x90>
   12bfc:	43e3      	mvns	r3, r4
   12bfe:	17db      	asrs	r3, r3, #31
   12c00:	401c      	ands	r4, r3
   12c02:	002b      	movs	r3, r5
   12c04:	211f      	movs	r1, #31
   12c06:	00a4      	lsls	r4, r4, #2
   12c08:	1914      	adds	r4, r2, r4
   12c0a:	692a      	ldr	r2, [r5, #16]
   12c0c:	3314      	adds	r3, #20
   12c0e:	0092      	lsls	r2, r2, #2
   12c10:	189a      	adds	r2, r3, r2
   12c12:	400f      	ands	r7, r1
   12c14:	d024      	beq.n	12c60 <__lshift+0x98>
   12c16:	3101      	adds	r1, #1
   12c18:	1bc9      	subs	r1, r1, r7
   12c1a:	468c      	mov	ip, r1
   12c1c:	2100      	movs	r1, #0
   12c1e:	6818      	ldr	r0, [r3, #0]
   12c20:	40b8      	lsls	r0, r7
   12c22:	4301      	orrs	r1, r0
   12c24:	4660      	mov	r0, ip
   12c26:	6021      	str	r1, [r4, #0]
   12c28:	cb02      	ldmia	r3!, {r1}
   12c2a:	3404      	adds	r4, #4
   12c2c:	40c1      	lsrs	r1, r0
   12c2e:	429a      	cmp	r2, r3
   12c30:	d8f5      	bhi.n	12c1e <__lshift+0x56>
   12c32:	6021      	str	r1, [r4, #0]
   12c34:	2900      	cmp	r1, #0
   12c36:	d002      	beq.n	12c3e <__lshift+0x76>
   12c38:	9b02      	ldr	r3, [sp, #8]
   12c3a:	3302      	adds	r3, #2
   12c3c:	9301      	str	r3, [sp, #4]
   12c3e:	9b01      	ldr	r3, [sp, #4]
   12c40:	9803      	ldr	r0, [sp, #12]
   12c42:	3b01      	subs	r3, #1
   12c44:	6133      	str	r3, [r6, #16]
   12c46:	0029      	movs	r1, r5
   12c48:	f7ff fe35 	bl	128b6 <_Bfree>
   12c4c:	0030      	movs	r0, r6
   12c4e:	b005      	add	sp, #20
   12c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c52:	3101      	adds	r1, #1
   12c54:	005b      	lsls	r3, r3, #1
   12c56:	e7c4      	b.n	12be2 <__lshift+0x1a>
   12c58:	0098      	lsls	r0, r3, #2
   12c5a:	5011      	str	r1, [r2, r0]
   12c5c:	3301      	adds	r3, #1
   12c5e:	e7cb      	b.n	12bf8 <__lshift+0x30>
   12c60:	cb02      	ldmia	r3!, {r1}
   12c62:	c402      	stmia	r4!, {r1}
   12c64:	429a      	cmp	r2, r3
   12c66:	d8fb      	bhi.n	12c60 <__lshift+0x98>
   12c68:	e7e9      	b.n	12c3e <__lshift+0x76>

00012c6a <__mcmp>:
   12c6a:	690a      	ldr	r2, [r1, #16]
   12c6c:	6903      	ldr	r3, [r0, #16]
   12c6e:	b530      	push	{r4, r5, lr}
   12c70:	1a9b      	subs	r3, r3, r2
   12c72:	d10e      	bne.n	12c92 <__mcmp+0x28>
   12c74:	0092      	lsls	r2, r2, #2
   12c76:	3014      	adds	r0, #20
   12c78:	3114      	adds	r1, #20
   12c7a:	1884      	adds	r4, r0, r2
   12c7c:	1889      	adds	r1, r1, r2
   12c7e:	3c04      	subs	r4, #4
   12c80:	3904      	subs	r1, #4
   12c82:	6822      	ldr	r2, [r4, #0]
   12c84:	680d      	ldr	r5, [r1, #0]
   12c86:	42aa      	cmp	r2, r5
   12c88:	d005      	beq.n	12c96 <__mcmp+0x2c>
   12c8a:	42aa      	cmp	r2, r5
   12c8c:	4192      	sbcs	r2, r2
   12c8e:	2301      	movs	r3, #1
   12c90:	4313      	orrs	r3, r2
   12c92:	0018      	movs	r0, r3
   12c94:	bd30      	pop	{r4, r5, pc}
   12c96:	42a0      	cmp	r0, r4
   12c98:	d3f1      	bcc.n	12c7e <__mcmp+0x14>
   12c9a:	e7fa      	b.n	12c92 <__mcmp+0x28>

00012c9c <__mdiff>:
   12c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c9e:	000d      	movs	r5, r1
   12ca0:	b085      	sub	sp, #20
   12ca2:	0007      	movs	r7, r0
   12ca4:	0011      	movs	r1, r2
   12ca6:	0028      	movs	r0, r5
   12ca8:	0014      	movs	r4, r2
   12caa:	f7ff ffde 	bl	12c6a <__mcmp>
   12cae:	1e06      	subs	r6, r0, #0
   12cb0:	d108      	bne.n	12cc4 <__mdiff+0x28>
   12cb2:	0001      	movs	r1, r0
   12cb4:	0038      	movs	r0, r7
   12cb6:	f7ff fdc6 	bl	12846 <_Balloc>
   12cba:	2301      	movs	r3, #1
   12cbc:	6146      	str	r6, [r0, #20]
   12cbe:	6103      	str	r3, [r0, #16]
   12cc0:	b005      	add	sp, #20
   12cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cc4:	2301      	movs	r3, #1
   12cc6:	9301      	str	r3, [sp, #4]
   12cc8:	2800      	cmp	r0, #0
   12cca:	db04      	blt.n	12cd6 <__mdiff+0x3a>
   12ccc:	0023      	movs	r3, r4
   12cce:	002c      	movs	r4, r5
   12cd0:	001d      	movs	r5, r3
   12cd2:	2300      	movs	r3, #0
   12cd4:	9301      	str	r3, [sp, #4]
   12cd6:	6861      	ldr	r1, [r4, #4]
   12cd8:	0038      	movs	r0, r7
   12cda:	f7ff fdb4 	bl	12846 <_Balloc>
   12cde:	002f      	movs	r7, r5
   12ce0:	2200      	movs	r2, #0
   12ce2:	9b01      	ldr	r3, [sp, #4]
   12ce4:	6926      	ldr	r6, [r4, #16]
   12ce6:	60c3      	str	r3, [r0, #12]
   12ce8:	3414      	adds	r4, #20
   12cea:	00b3      	lsls	r3, r6, #2
   12cec:	18e3      	adds	r3, r4, r3
   12cee:	9302      	str	r3, [sp, #8]
   12cf0:	692b      	ldr	r3, [r5, #16]
   12cf2:	3714      	adds	r7, #20
   12cf4:	009b      	lsls	r3, r3, #2
   12cf6:	18fb      	adds	r3, r7, r3
   12cf8:	9303      	str	r3, [sp, #12]
   12cfa:	0003      	movs	r3, r0
   12cfc:	4694      	mov	ip, r2
   12cfe:	3314      	adds	r3, #20
   12d00:	cc20      	ldmia	r4!, {r5}
   12d02:	cf04      	ldmia	r7!, {r2}
   12d04:	9201      	str	r2, [sp, #4]
   12d06:	b2aa      	uxth	r2, r5
   12d08:	4494      	add	ip, r2
   12d0a:	466a      	mov	r2, sp
   12d0c:	4661      	mov	r1, ip
   12d0e:	8892      	ldrh	r2, [r2, #4]
   12d10:	0c2d      	lsrs	r5, r5, #16
   12d12:	1a8a      	subs	r2, r1, r2
   12d14:	9901      	ldr	r1, [sp, #4]
   12d16:	0c09      	lsrs	r1, r1, #16
   12d18:	1a69      	subs	r1, r5, r1
   12d1a:	1415      	asrs	r5, r2, #16
   12d1c:	1949      	adds	r1, r1, r5
   12d1e:	140d      	asrs	r5, r1, #16
   12d20:	b292      	uxth	r2, r2
   12d22:	0409      	lsls	r1, r1, #16
   12d24:	430a      	orrs	r2, r1
   12d26:	601a      	str	r2, [r3, #0]
   12d28:	9a03      	ldr	r2, [sp, #12]
   12d2a:	46ac      	mov	ip, r5
   12d2c:	3304      	adds	r3, #4
   12d2e:	42ba      	cmp	r2, r7
   12d30:	d8e6      	bhi.n	12d00 <__mdiff+0x64>
   12d32:	9902      	ldr	r1, [sp, #8]
   12d34:	001a      	movs	r2, r3
   12d36:	428c      	cmp	r4, r1
   12d38:	d305      	bcc.n	12d46 <__mdiff+0xaa>
   12d3a:	3a04      	subs	r2, #4
   12d3c:	6813      	ldr	r3, [r2, #0]
   12d3e:	2b00      	cmp	r3, #0
   12d40:	d00e      	beq.n	12d60 <__mdiff+0xc4>
   12d42:	6106      	str	r6, [r0, #16]
   12d44:	e7bc      	b.n	12cc0 <__mdiff+0x24>
   12d46:	cc04      	ldmia	r4!, {r2}
   12d48:	b291      	uxth	r1, r2
   12d4a:	4461      	add	r1, ip
   12d4c:	140d      	asrs	r5, r1, #16
   12d4e:	0c12      	lsrs	r2, r2, #16
   12d50:	1952      	adds	r2, r2, r5
   12d52:	1415      	asrs	r5, r2, #16
   12d54:	b289      	uxth	r1, r1
   12d56:	0412      	lsls	r2, r2, #16
   12d58:	430a      	orrs	r2, r1
   12d5a:	46ac      	mov	ip, r5
   12d5c:	c304      	stmia	r3!, {r2}
   12d5e:	e7e8      	b.n	12d32 <__mdiff+0x96>
   12d60:	3e01      	subs	r6, #1
   12d62:	e7ea      	b.n	12d3a <__mdiff+0x9e>

00012d64 <__d2b>:
   12d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12d66:	001d      	movs	r5, r3
   12d68:	2101      	movs	r1, #1
   12d6a:	9f08      	ldr	r7, [sp, #32]
   12d6c:	0014      	movs	r4, r2
   12d6e:	f7ff fd6a 	bl	12846 <_Balloc>
   12d72:	032b      	lsls	r3, r5, #12
   12d74:	006d      	lsls	r5, r5, #1
   12d76:	0006      	movs	r6, r0
   12d78:	0b1b      	lsrs	r3, r3, #12
   12d7a:	0d6d      	lsrs	r5, r5, #21
   12d7c:	d124      	bne.n	12dc8 <__d2b+0x64>
   12d7e:	9301      	str	r3, [sp, #4]
   12d80:	2c00      	cmp	r4, #0
   12d82:	d027      	beq.n	12dd4 <__d2b+0x70>
   12d84:	4668      	mov	r0, sp
   12d86:	9400      	str	r4, [sp, #0]
   12d88:	f7ff fe04 	bl	12994 <__lo0bits>
   12d8c:	9c00      	ldr	r4, [sp, #0]
   12d8e:	2800      	cmp	r0, #0
   12d90:	d01e      	beq.n	12dd0 <__d2b+0x6c>
   12d92:	9b01      	ldr	r3, [sp, #4]
   12d94:	2120      	movs	r1, #32
   12d96:	001a      	movs	r2, r3
   12d98:	1a09      	subs	r1, r1, r0
   12d9a:	408a      	lsls	r2, r1
   12d9c:	40c3      	lsrs	r3, r0
   12d9e:	4322      	orrs	r2, r4
   12da0:	6172      	str	r2, [r6, #20]
   12da2:	9301      	str	r3, [sp, #4]
   12da4:	9c01      	ldr	r4, [sp, #4]
   12da6:	61b4      	str	r4, [r6, #24]
   12da8:	1e63      	subs	r3, r4, #1
   12daa:	419c      	sbcs	r4, r3
   12dac:	3401      	adds	r4, #1
   12dae:	6134      	str	r4, [r6, #16]
   12db0:	2d00      	cmp	r5, #0
   12db2:	d018      	beq.n	12de6 <__d2b+0x82>
   12db4:	4b12      	ldr	r3, [pc, #72]	; (12e00 <__d2b+0x9c>)
   12db6:	18ed      	adds	r5, r5, r3
   12db8:	2335      	movs	r3, #53	; 0x35
   12dba:	182d      	adds	r5, r5, r0
   12dbc:	603d      	str	r5, [r7, #0]
   12dbe:	1a18      	subs	r0, r3, r0
   12dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12dc2:	6018      	str	r0, [r3, #0]
   12dc4:	0030      	movs	r0, r6
   12dc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12dc8:	2280      	movs	r2, #128	; 0x80
   12dca:	0352      	lsls	r2, r2, #13
   12dcc:	4313      	orrs	r3, r2
   12dce:	e7d6      	b.n	12d7e <__d2b+0x1a>
   12dd0:	6174      	str	r4, [r6, #20]
   12dd2:	e7e7      	b.n	12da4 <__d2b+0x40>
   12dd4:	a801      	add	r0, sp, #4
   12dd6:	f7ff fddd 	bl	12994 <__lo0bits>
   12dda:	2401      	movs	r4, #1
   12ddc:	9b01      	ldr	r3, [sp, #4]
   12dde:	6134      	str	r4, [r6, #16]
   12de0:	6173      	str	r3, [r6, #20]
   12de2:	3020      	adds	r0, #32
   12de4:	e7e4      	b.n	12db0 <__d2b+0x4c>
   12de6:	4b07      	ldr	r3, [pc, #28]	; (12e04 <__d2b+0xa0>)
   12de8:	18c0      	adds	r0, r0, r3
   12dea:	4b07      	ldr	r3, [pc, #28]	; (12e08 <__d2b+0xa4>)
   12dec:	6038      	str	r0, [r7, #0]
   12dee:	18e3      	adds	r3, r4, r3
   12df0:	009b      	lsls	r3, r3, #2
   12df2:	18f3      	adds	r3, r6, r3
   12df4:	6958      	ldr	r0, [r3, #20]
   12df6:	f7ff fdb3 	bl	12960 <__hi0bits>
   12dfa:	0164      	lsls	r4, r4, #5
   12dfc:	1a20      	subs	r0, r4, r0
   12dfe:	e7df      	b.n	12dc0 <__d2b+0x5c>
   12e00:	fffffbcd 	.word	0xfffffbcd
   12e04:	fffffbce 	.word	0xfffffbce
   12e08:	3fffffff 	.word	0x3fffffff

00012e0c <_calloc_r>:
   12e0c:	434a      	muls	r2, r1
   12e0e:	b570      	push	{r4, r5, r6, lr}
   12e10:	0011      	movs	r1, r2
   12e12:	0014      	movs	r4, r2
   12e14:	f7fd fd58 	bl	108c8 <_malloc_r>
   12e18:	1e05      	subs	r5, r0, #0
   12e1a:	d003      	beq.n	12e24 <_calloc_r+0x18>
   12e1c:	0022      	movs	r2, r4
   12e1e:	2100      	movs	r1, #0
   12e20:	f7fd fd00 	bl	10824 <memset>
   12e24:	0028      	movs	r0, r5
   12e26:	bd70      	pop	{r4, r5, r6, pc}

00012e28 <_realloc_r>:
   12e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e2a:	0007      	movs	r7, r0
   12e2c:	000d      	movs	r5, r1
   12e2e:	0016      	movs	r6, r2
   12e30:	2900      	cmp	r1, #0
   12e32:	d105      	bne.n	12e40 <_realloc_r+0x18>
   12e34:	0011      	movs	r1, r2
   12e36:	f7fd fd47 	bl	108c8 <_malloc_r>
   12e3a:	0004      	movs	r4, r0
   12e3c:	0020      	movs	r0, r4
   12e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e40:	2a00      	cmp	r2, #0
   12e42:	d103      	bne.n	12e4c <_realloc_r+0x24>
   12e44:	f7fd fcf6 	bl	10834 <_free_r>
   12e48:	0034      	movs	r4, r6
   12e4a:	e7f7      	b.n	12e3c <_realloc_r+0x14>
   12e4c:	f000 f906 	bl	1305c <_malloc_usable_size_r>
   12e50:	002c      	movs	r4, r5
   12e52:	4286      	cmp	r6, r0
   12e54:	d9f2      	bls.n	12e3c <_realloc_r+0x14>
   12e56:	0031      	movs	r1, r6
   12e58:	0038      	movs	r0, r7
   12e5a:	f7fd fd35 	bl	108c8 <_malloc_r>
   12e5e:	1e04      	subs	r4, r0, #0
   12e60:	d0ec      	beq.n	12e3c <_realloc_r+0x14>
   12e62:	0029      	movs	r1, r5
   12e64:	0032      	movs	r2, r6
   12e66:	f7fd fcd4 	bl	10812 <memcpy>
   12e6a:	0029      	movs	r1, r5
   12e6c:	0038      	movs	r0, r7
   12e6e:	f7fd fce1 	bl	10834 <_free_r>
   12e72:	e7e3      	b.n	12e3c <_realloc_r+0x14>

00012e74 <_raise_r>:
   12e74:	b570      	push	{r4, r5, r6, lr}
   12e76:	0004      	movs	r4, r0
   12e78:	000d      	movs	r5, r1
   12e7a:	291f      	cmp	r1, #31
   12e7c:	d904      	bls.n	12e88 <_raise_r+0x14>
   12e7e:	2316      	movs	r3, #22
   12e80:	6003      	str	r3, [r0, #0]
   12e82:	2001      	movs	r0, #1
   12e84:	4240      	negs	r0, r0
   12e86:	bd70      	pop	{r4, r5, r6, pc}
   12e88:	6c43      	ldr	r3, [r0, #68]	; 0x44
   12e8a:	2b00      	cmp	r3, #0
   12e8c:	d004      	beq.n	12e98 <_raise_r+0x24>
   12e8e:	008a      	lsls	r2, r1, #2
   12e90:	189b      	adds	r3, r3, r2
   12e92:	681a      	ldr	r2, [r3, #0]
   12e94:	2a00      	cmp	r2, #0
   12e96:	d108      	bne.n	12eaa <_raise_r+0x36>
   12e98:	0020      	movs	r0, r4
   12e9a:	f000 f831 	bl	12f00 <_getpid_r>
   12e9e:	002a      	movs	r2, r5
   12ea0:	0001      	movs	r1, r0
   12ea2:	0020      	movs	r0, r4
   12ea4:	f000 f81a 	bl	12edc <_kill_r>
   12ea8:	e7ed      	b.n	12e86 <_raise_r+0x12>
   12eaa:	2000      	movs	r0, #0
   12eac:	2a01      	cmp	r2, #1
   12eae:	d0ea      	beq.n	12e86 <_raise_r+0x12>
   12eb0:	1c51      	adds	r1, r2, #1
   12eb2:	d103      	bne.n	12ebc <_raise_r+0x48>
   12eb4:	2316      	movs	r3, #22
   12eb6:	3001      	adds	r0, #1
   12eb8:	6023      	str	r3, [r4, #0]
   12eba:	e7e4      	b.n	12e86 <_raise_r+0x12>
   12ebc:	2400      	movs	r4, #0
   12ebe:	0028      	movs	r0, r5
   12ec0:	601c      	str	r4, [r3, #0]
   12ec2:	4790      	blx	r2
   12ec4:	0020      	movs	r0, r4
   12ec6:	e7de      	b.n	12e86 <_raise_r+0x12>

00012ec8 <raise>:
   12ec8:	b510      	push	{r4, lr}
   12eca:	4b03      	ldr	r3, [pc, #12]	; (12ed8 <raise+0x10>)
   12ecc:	0001      	movs	r1, r0
   12ece:	6818      	ldr	r0, [r3, #0]
   12ed0:	f7ff ffd0 	bl	12e74 <_raise_r>
   12ed4:	bd10      	pop	{r4, pc}
   12ed6:	46c0      	nop			; (mov r8, r8)
   12ed8:	200000a4 	.word	0x200000a4

00012edc <_kill_r>:
   12edc:	2300      	movs	r3, #0
   12ede:	b570      	push	{r4, r5, r6, lr}
   12ee0:	4c06      	ldr	r4, [pc, #24]	; (12efc <_kill_r+0x20>)
   12ee2:	0005      	movs	r5, r0
   12ee4:	0008      	movs	r0, r1
   12ee6:	0011      	movs	r1, r2
   12ee8:	6023      	str	r3, [r4, #0]
   12eea:	f000 f93f 	bl	1316c <_kill>
   12eee:	1c43      	adds	r3, r0, #1
   12ef0:	d103      	bne.n	12efa <_kill_r+0x1e>
   12ef2:	6823      	ldr	r3, [r4, #0]
   12ef4:	2b00      	cmp	r3, #0
   12ef6:	d000      	beq.n	12efa <_kill_r+0x1e>
   12ef8:	602b      	str	r3, [r5, #0]
   12efa:	bd70      	pop	{r4, r5, r6, pc}
   12efc:	20000f84 	.word	0x20000f84

00012f00 <_getpid_r>:
   12f00:	b510      	push	{r4, lr}
   12f02:	f000 f923 	bl	1314c <_getpid>
   12f06:	bd10      	pop	{r4, pc}

00012f08 <__sread>:
   12f08:	b570      	push	{r4, r5, r6, lr}
   12f0a:	000c      	movs	r4, r1
   12f0c:	250e      	movs	r5, #14
   12f0e:	5f49      	ldrsh	r1, [r1, r5]
   12f10:	f000 f8ac 	bl	1306c <_read_r>
   12f14:	2800      	cmp	r0, #0
   12f16:	db03      	blt.n	12f20 <__sread+0x18>
   12f18:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12f1a:	181b      	adds	r3, r3, r0
   12f1c:	6563      	str	r3, [r4, #84]	; 0x54
   12f1e:	bd70      	pop	{r4, r5, r6, pc}
   12f20:	89a3      	ldrh	r3, [r4, #12]
   12f22:	4a02      	ldr	r2, [pc, #8]	; (12f2c <__sread+0x24>)
   12f24:	4013      	ands	r3, r2
   12f26:	81a3      	strh	r3, [r4, #12]
   12f28:	e7f9      	b.n	12f1e <__sread+0x16>
   12f2a:	46c0      	nop			; (mov r8, r8)
   12f2c:	ffffefff 	.word	0xffffefff

00012f30 <__swrite>:
   12f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f32:	001f      	movs	r7, r3
   12f34:	898b      	ldrh	r3, [r1, #12]
   12f36:	0005      	movs	r5, r0
   12f38:	000c      	movs	r4, r1
   12f3a:	0016      	movs	r6, r2
   12f3c:	05db      	lsls	r3, r3, #23
   12f3e:	d505      	bpl.n	12f4c <__swrite+0x1c>
   12f40:	230e      	movs	r3, #14
   12f42:	5ec9      	ldrsh	r1, [r1, r3]
   12f44:	2200      	movs	r2, #0
   12f46:	2302      	movs	r3, #2
   12f48:	f000 f874 	bl	13034 <_lseek_r>
   12f4c:	89a3      	ldrh	r3, [r4, #12]
   12f4e:	4a05      	ldr	r2, [pc, #20]	; (12f64 <__swrite+0x34>)
   12f50:	0028      	movs	r0, r5
   12f52:	4013      	ands	r3, r2
   12f54:	81a3      	strh	r3, [r4, #12]
   12f56:	0032      	movs	r2, r6
   12f58:	230e      	movs	r3, #14
   12f5a:	5ee1      	ldrsh	r1, [r4, r3]
   12f5c:	003b      	movs	r3, r7
   12f5e:	f000 f81f 	bl	12fa0 <_write_r>
   12f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f64:	ffffefff 	.word	0xffffefff

00012f68 <__sseek>:
   12f68:	b570      	push	{r4, r5, r6, lr}
   12f6a:	000c      	movs	r4, r1
   12f6c:	250e      	movs	r5, #14
   12f6e:	5f49      	ldrsh	r1, [r1, r5]
   12f70:	f000 f860 	bl	13034 <_lseek_r>
   12f74:	89a3      	ldrh	r3, [r4, #12]
   12f76:	1c42      	adds	r2, r0, #1
   12f78:	d103      	bne.n	12f82 <__sseek+0x1a>
   12f7a:	4a05      	ldr	r2, [pc, #20]	; (12f90 <__sseek+0x28>)
   12f7c:	4013      	ands	r3, r2
   12f7e:	81a3      	strh	r3, [r4, #12]
   12f80:	bd70      	pop	{r4, r5, r6, pc}
   12f82:	2280      	movs	r2, #128	; 0x80
   12f84:	0152      	lsls	r2, r2, #5
   12f86:	4313      	orrs	r3, r2
   12f88:	81a3      	strh	r3, [r4, #12]
   12f8a:	6560      	str	r0, [r4, #84]	; 0x54
   12f8c:	e7f8      	b.n	12f80 <__sseek+0x18>
   12f8e:	46c0      	nop			; (mov r8, r8)
   12f90:	ffffefff 	.word	0xffffefff

00012f94 <__sclose>:
   12f94:	b510      	push	{r4, lr}
   12f96:	230e      	movs	r3, #14
   12f98:	5ec9      	ldrsh	r1, [r1, r3]
   12f9a:	f000 f815 	bl	12fc8 <_close_r>
   12f9e:	bd10      	pop	{r4, pc}

00012fa0 <_write_r>:
   12fa0:	b570      	push	{r4, r5, r6, lr}
   12fa2:	0005      	movs	r5, r0
   12fa4:	0008      	movs	r0, r1
   12fa6:	0011      	movs	r1, r2
   12fa8:	2200      	movs	r2, #0
   12faa:	4c06      	ldr	r4, [pc, #24]	; (12fc4 <_write_r+0x24>)
   12fac:	6022      	str	r2, [r4, #0]
   12fae:	001a      	movs	r2, r3
   12fb0:	f000 f902 	bl	131b8 <_write>
   12fb4:	1c43      	adds	r3, r0, #1
   12fb6:	d103      	bne.n	12fc0 <_write_r+0x20>
   12fb8:	6823      	ldr	r3, [r4, #0]
   12fba:	2b00      	cmp	r3, #0
   12fbc:	d000      	beq.n	12fc0 <_write_r+0x20>
   12fbe:	602b      	str	r3, [r5, #0]
   12fc0:	bd70      	pop	{r4, r5, r6, pc}
   12fc2:	46c0      	nop			; (mov r8, r8)
   12fc4:	20000f84 	.word	0x20000f84

00012fc8 <_close_r>:
   12fc8:	2300      	movs	r3, #0
   12fca:	b570      	push	{r4, r5, r6, lr}
   12fcc:	4c06      	ldr	r4, [pc, #24]	; (12fe8 <_close_r+0x20>)
   12fce:	0005      	movs	r5, r0
   12fd0:	0008      	movs	r0, r1
   12fd2:	6023      	str	r3, [r4, #0]
   12fd4:	f000 f8aa 	bl	1312c <_close>
   12fd8:	1c43      	adds	r3, r0, #1
   12fda:	d103      	bne.n	12fe4 <_close_r+0x1c>
   12fdc:	6823      	ldr	r3, [r4, #0]
   12fde:	2b00      	cmp	r3, #0
   12fe0:	d000      	beq.n	12fe4 <_close_r+0x1c>
   12fe2:	602b      	str	r3, [r5, #0]
   12fe4:	bd70      	pop	{r4, r5, r6, pc}
   12fe6:	46c0      	nop			; (mov r8, r8)
   12fe8:	20000f84 	.word	0x20000f84

00012fec <_fstat_r>:
   12fec:	2300      	movs	r3, #0
   12fee:	b570      	push	{r4, r5, r6, lr}
   12ff0:	4c06      	ldr	r4, [pc, #24]	; (1300c <_fstat_r+0x20>)
   12ff2:	0005      	movs	r5, r0
   12ff4:	0008      	movs	r0, r1
   12ff6:	0011      	movs	r1, r2
   12ff8:	6023      	str	r3, [r4, #0]
   12ffa:	f000 f89f 	bl	1313c <_fstat>
   12ffe:	1c43      	adds	r3, r0, #1
   13000:	d103      	bne.n	1300a <_fstat_r+0x1e>
   13002:	6823      	ldr	r3, [r4, #0]
   13004:	2b00      	cmp	r3, #0
   13006:	d000      	beq.n	1300a <_fstat_r+0x1e>
   13008:	602b      	str	r3, [r5, #0]
   1300a:	bd70      	pop	{r4, r5, r6, pc}
   1300c:	20000f84 	.word	0x20000f84

00013010 <_isatty_r>:
   13010:	2300      	movs	r3, #0
   13012:	b570      	push	{r4, r5, r6, lr}
   13014:	4c06      	ldr	r4, [pc, #24]	; (13030 <_isatty_r+0x20>)
   13016:	0005      	movs	r5, r0
   13018:	0008      	movs	r0, r1
   1301a:	6023      	str	r3, [r4, #0]
   1301c:	f000 f89e 	bl	1315c <_isatty>
   13020:	1c43      	adds	r3, r0, #1
   13022:	d103      	bne.n	1302c <_isatty_r+0x1c>
   13024:	6823      	ldr	r3, [r4, #0]
   13026:	2b00      	cmp	r3, #0
   13028:	d000      	beq.n	1302c <_isatty_r+0x1c>
   1302a:	602b      	str	r3, [r5, #0]
   1302c:	bd70      	pop	{r4, r5, r6, pc}
   1302e:	46c0      	nop			; (mov r8, r8)
   13030:	20000f84 	.word	0x20000f84

00013034 <_lseek_r>:
   13034:	b570      	push	{r4, r5, r6, lr}
   13036:	0005      	movs	r5, r0
   13038:	0008      	movs	r0, r1
   1303a:	0011      	movs	r1, r2
   1303c:	2200      	movs	r2, #0
   1303e:	4c06      	ldr	r4, [pc, #24]	; (13058 <_lseek_r+0x24>)
   13040:	6022      	str	r2, [r4, #0]
   13042:	001a      	movs	r2, r3
   13044:	f000 f89a 	bl	1317c <_lseek>
   13048:	1c43      	adds	r3, r0, #1
   1304a:	d103      	bne.n	13054 <_lseek_r+0x20>
   1304c:	6823      	ldr	r3, [r4, #0]
   1304e:	2b00      	cmp	r3, #0
   13050:	d000      	beq.n	13054 <_lseek_r+0x20>
   13052:	602b      	str	r3, [r5, #0]
   13054:	bd70      	pop	{r4, r5, r6, pc}
   13056:	46c0      	nop			; (mov r8, r8)
   13058:	20000f84 	.word	0x20000f84

0001305c <_malloc_usable_size_r>:
   1305c:	1f0b      	subs	r3, r1, #4
   1305e:	681b      	ldr	r3, [r3, #0]
   13060:	1f18      	subs	r0, r3, #4
   13062:	2b00      	cmp	r3, #0
   13064:	da01      	bge.n	1306a <_malloc_usable_size_r+0xe>
   13066:	580b      	ldr	r3, [r1, r0]
   13068:	18c0      	adds	r0, r0, r3
   1306a:	4770      	bx	lr

0001306c <_read_r>:
   1306c:	b570      	push	{r4, r5, r6, lr}
   1306e:	0005      	movs	r5, r0
   13070:	0008      	movs	r0, r1
   13072:	0011      	movs	r1, r2
   13074:	2200      	movs	r2, #0
   13076:	4c06      	ldr	r4, [pc, #24]	; (13090 <_read_r+0x24>)
   13078:	6022      	str	r2, [r4, #0]
   1307a:	001a      	movs	r2, r3
   1307c:	f000 f886 	bl	1318c <_read>
   13080:	1c43      	adds	r3, r0, #1
   13082:	d103      	bne.n	1308c <_read_r+0x20>
   13084:	6823      	ldr	r3, [r4, #0]
   13086:	2b00      	cmp	r3, #0
   13088:	d000      	beq.n	1308c <_read_r+0x20>
   1308a:	602b      	str	r3, [r5, #0]
   1308c:	bd70      	pop	{r4, r5, r6, pc}
   1308e:	46c0      	nop			; (mov r8, r8)
   13090:	20000f84 	.word	0x20000f84

00013094 <__gnu_thumb1_case_uqi>:
   13094:	b402      	push	{r1}
   13096:	4671      	mov	r1, lr
   13098:	0849      	lsrs	r1, r1, #1
   1309a:	0049      	lsls	r1, r1, #1
   1309c:	5c09      	ldrb	r1, [r1, r0]
   1309e:	0049      	lsls	r1, r1, #1
   130a0:	448e      	add	lr, r1
   130a2:	bc02      	pop	{r1}
   130a4:	4770      	bx	lr
   130a6:	46c0      	nop			; (mov r8, r8)

000130a8 <__aeabi_i2d>:
   130a8:	b570      	push	{r4, r5, r6, lr}
   130aa:	2800      	cmp	r0, #0
   130ac:	d030      	beq.n	13110 <__aeabi_i2d+0x68>
   130ae:	17c3      	asrs	r3, r0, #31
   130b0:	18c4      	adds	r4, r0, r3
   130b2:	405c      	eors	r4, r3
   130b4:	0fc5      	lsrs	r5, r0, #31
   130b6:	0020      	movs	r0, r4
   130b8:	f7fd faf8 	bl	106ac <__clzsi2>
   130bc:	4b17      	ldr	r3, [pc, #92]	; (1311c <__aeabi_i2d+0x74>)
   130be:	4a18      	ldr	r2, [pc, #96]	; (13120 <__aeabi_i2d+0x78>)
   130c0:	1a1b      	subs	r3, r3, r0
   130c2:	1ad2      	subs	r2, r2, r3
   130c4:	2a1f      	cmp	r2, #31
   130c6:	dd18      	ble.n	130fa <__aeabi_i2d+0x52>
   130c8:	4a16      	ldr	r2, [pc, #88]	; (13124 <__aeabi_i2d+0x7c>)
   130ca:	1ad2      	subs	r2, r2, r3
   130cc:	4094      	lsls	r4, r2
   130ce:	2200      	movs	r2, #0
   130d0:	0324      	lsls	r4, r4, #12
   130d2:	055b      	lsls	r3, r3, #21
   130d4:	0b24      	lsrs	r4, r4, #12
   130d6:	0d5b      	lsrs	r3, r3, #21
   130d8:	2100      	movs	r1, #0
   130da:	0010      	movs	r0, r2
   130dc:	0324      	lsls	r4, r4, #12
   130de:	0d0a      	lsrs	r2, r1, #20
   130e0:	0b24      	lsrs	r4, r4, #12
   130e2:	0512      	lsls	r2, r2, #20
   130e4:	4322      	orrs	r2, r4
   130e6:	4c10      	ldr	r4, [pc, #64]	; (13128 <__aeabi_i2d+0x80>)
   130e8:	051b      	lsls	r3, r3, #20
   130ea:	4022      	ands	r2, r4
   130ec:	4313      	orrs	r3, r2
   130ee:	005b      	lsls	r3, r3, #1
   130f0:	07ed      	lsls	r5, r5, #31
   130f2:	085b      	lsrs	r3, r3, #1
   130f4:	432b      	orrs	r3, r5
   130f6:	0019      	movs	r1, r3
   130f8:	bd70      	pop	{r4, r5, r6, pc}
   130fa:	0021      	movs	r1, r4
   130fc:	4091      	lsls	r1, r2
   130fe:	000a      	movs	r2, r1
   13100:	210b      	movs	r1, #11
   13102:	1a08      	subs	r0, r1, r0
   13104:	40c4      	lsrs	r4, r0
   13106:	055b      	lsls	r3, r3, #21
   13108:	0324      	lsls	r4, r4, #12
   1310a:	0b24      	lsrs	r4, r4, #12
   1310c:	0d5b      	lsrs	r3, r3, #21
   1310e:	e7e3      	b.n	130d8 <__aeabi_i2d+0x30>
   13110:	2500      	movs	r5, #0
   13112:	2300      	movs	r3, #0
   13114:	2400      	movs	r4, #0
   13116:	2200      	movs	r2, #0
   13118:	e7de      	b.n	130d8 <__aeabi_i2d+0x30>
   1311a:	46c0      	nop			; (mov r8, r8)
   1311c:	0000041e 	.word	0x0000041e
   13120:	00000433 	.word	0x00000433
   13124:	00000413 	.word	0x00000413
   13128:	800fffff 	.word	0x800fffff

0001312c <_close>:
   1312c:	2258      	movs	r2, #88	; 0x58
   1312e:	2001      	movs	r0, #1
   13130:	4b01      	ldr	r3, [pc, #4]	; (13138 <_close+0xc>)
   13132:	4240      	negs	r0, r0
   13134:	601a      	str	r2, [r3, #0]
   13136:	4770      	bx	lr
   13138:	20000f84 	.word	0x20000f84

0001313c <_fstat>:
   1313c:	2258      	movs	r2, #88	; 0x58
   1313e:	2001      	movs	r0, #1
   13140:	4b01      	ldr	r3, [pc, #4]	; (13148 <_fstat+0xc>)
   13142:	4240      	negs	r0, r0
   13144:	601a      	str	r2, [r3, #0]
   13146:	4770      	bx	lr
   13148:	20000f84 	.word	0x20000f84

0001314c <_getpid>:
   1314c:	2258      	movs	r2, #88	; 0x58
   1314e:	2001      	movs	r0, #1
   13150:	4b01      	ldr	r3, [pc, #4]	; (13158 <_getpid+0xc>)
   13152:	4240      	negs	r0, r0
   13154:	601a      	str	r2, [r3, #0]
   13156:	4770      	bx	lr
   13158:	20000f84 	.word	0x20000f84

0001315c <_isatty>:
   1315c:	2258      	movs	r2, #88	; 0x58
   1315e:	4b02      	ldr	r3, [pc, #8]	; (13168 <_isatty+0xc>)
   13160:	2000      	movs	r0, #0
   13162:	601a      	str	r2, [r3, #0]
   13164:	4770      	bx	lr
   13166:	46c0      	nop			; (mov r8, r8)
   13168:	20000f84 	.word	0x20000f84

0001316c <_kill>:
   1316c:	2258      	movs	r2, #88	; 0x58
   1316e:	2001      	movs	r0, #1
   13170:	4b01      	ldr	r3, [pc, #4]	; (13178 <_kill+0xc>)
   13172:	4240      	negs	r0, r0
   13174:	601a      	str	r2, [r3, #0]
   13176:	4770      	bx	lr
   13178:	20000f84 	.word	0x20000f84

0001317c <_lseek>:
   1317c:	2258      	movs	r2, #88	; 0x58
   1317e:	2001      	movs	r0, #1
   13180:	4b01      	ldr	r3, [pc, #4]	; (13188 <_lseek+0xc>)
   13182:	4240      	negs	r0, r0
   13184:	601a      	str	r2, [r3, #0]
   13186:	4770      	bx	lr
   13188:	20000f84 	.word	0x20000f84

0001318c <_read>:
   1318c:	2258      	movs	r2, #88	; 0x58
   1318e:	2001      	movs	r0, #1
   13190:	4b01      	ldr	r3, [pc, #4]	; (13198 <_read+0xc>)
   13192:	4240      	negs	r0, r0
   13194:	601a      	str	r2, [r3, #0]
   13196:	4770      	bx	lr
   13198:	20000f84 	.word	0x20000f84

0001319c <_sbrk>:
   1319c:	4a04      	ldr	r2, [pc, #16]	; (131b0 <_sbrk+0x14>)
   1319e:	6813      	ldr	r3, [r2, #0]
   131a0:	2b00      	cmp	r3, #0
   131a2:	d003      	beq.n	131ac <_sbrk+0x10>
   131a4:	1818      	adds	r0, r3, r0
   131a6:	6010      	str	r0, [r2, #0]
   131a8:	0018      	movs	r0, r3
   131aa:	4770      	bx	lr
   131ac:	4b01      	ldr	r3, [pc, #4]	; (131b4 <_sbrk+0x18>)
   131ae:	e7f9      	b.n	131a4 <_sbrk+0x8>
   131b0:	20000f80 	.word	0x20000f80
   131b4:	20000f88 	.word	0x20000f88

000131b8 <_write>:
   131b8:	2258      	movs	r2, #88	; 0x58
   131ba:	2001      	movs	r0, #1
   131bc:	4b01      	ldr	r3, [pc, #4]	; (131c4 <_write+0xc>)
   131be:	4240      	negs	r0, r0
   131c0:	601a      	str	r2, [r3, #0]
   131c2:	4770      	bx	lr
   131c4:	20000f84 	.word	0x20000f84

000131c8 <_exit>:
   131c8:	e7fe      	b.n	131c8 <_exit>
   131ca:	46c0      	nop			; (mov r8, r8)

000131cc <_init>:
   131cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131ce:	46c0      	nop			; (mov r8, r8)
   131d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   131d2:	bc08      	pop	{r3}
   131d4:	469e      	mov	lr, r3
   131d6:	4770      	bx	lr

000131d8 <_fini>:
   131d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131da:	46c0      	nop			; (mov r8, r8)
   131dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   131de:	bc08      	pop	{r3}
   131e0:	469e      	mov	lr, r3
   131e2:	4770      	bx	lr
   131e4:	64616f4c 	.word	0x64616f4c
   131e8:	20676e69 	.word	0x20676e69
   131ec:	67616d69 	.word	0x67616d69
   131f0:	00272065 	.word	0x00272065
   131f4:	656c6946 	.word	0x656c6946
   131f8:	616d2820 	.word	0x616d2820
   131fc:	29656279 	.word	0x29656279
   13200:	746f6e20 	.word	0x746f6e20
   13204:	756f6620 	.word	0x756f6620
   13208:	0000646e 	.word	0x0000646e
   1320c:	72617453 	.word	0x72617453
   13210:	61702074 	.word	0x61702074
   13214:	00657372 	.word	0x00657372
   13218:	656c6946 	.word	0x656c6946
   1321c:	7a697320 	.word	0x7a697320
   13220:	00203a65 	.word	0x00203a65
   13224:	67616d49 	.word	0x67616d49
   13228:	664f2065 	.word	0x664f2065
   1322c:	74657366 	.word	0x74657366
   13230:	0000203a 	.word	0x0000203a
   13234:	64616548 	.word	0x64616548
   13238:	73207265 	.word	0x73207265
   1323c:	3a657a69 	.word	0x3a657a69
   13240:	00000020 	.word	0x00000020
   13244:	20746942 	.word	0x20746942
   13248:	74706544 	.word	0x74706544
   1324c:	00203a68 	.word	0x00203a68
   13250:	67616d49 	.word	0x67616d49
   13254:	69732065 	.word	0x69732065
   13258:	203a657a 	.word	0x203a657a
   1325c:	00000000 	.word	0x00000000
   13260:	64616f4c 	.word	0x64616f4c
   13264:	69206465 	.word	0x69206465
   13268:	0000206e 	.word	0x0000206e
   1326c:	00736d20 	.word	0x00736d20
   13270:	20504d42 	.word	0x20504d42
   13274:	6d726f66 	.word	0x6d726f66
   13278:	6e207461 	.word	0x6e207461
   1327c:	7220746f 	.word	0x7220746f
   13280:	676f6365 	.word	0x676f6365
   13284:	657a696e 	.word	0x657a696e
   13288:	726f2064 	.word	0x726f2064
   1328c:	20445320 	.word	0x20445320
   13290:	20746f6e 	.word	0x20746f6e
   13294:	6e756f6d 	.word	0x6e756f6d
   13298:	00646574 	.word	0x00646574
   1329c:	4d646461 	.word	0x4d646461
   132a0:	2c65766f 	.word	0x2c65766f
   132a4:	616c7020 	.word	0x616c7020
   132a8:	20726579 	.word	0x20726579
   132ac:	0000203d 	.word	0x0000203d
   132b0:	73696874 	.word	0x73696874
   132b4:	67696d20 	.word	0x67696d20
   132b8:	62207468 	.word	0x62207468
   132bc:	20612065 	.word	0x20612065
   132c0:	736f7263 	.word	0x736f7263
   132c4:	00000073 	.word	0x00000073
   132c8:	73696874 	.word	0x73696874
   132cc:	67696d20 	.word	0x67696d20
   132d0:	62207468 	.word	0x62207468
   132d4:	20612065 	.word	0x20612065
   132d8:	67756f6e 	.word	0x67756f6e
   132dc:	00007468 	.word	0x00007468
   132e0:	6e6e6977 	.word	0x6e6e6977
   132e4:	3d207265 	.word	0x3d207265
   132e8:	00000020 	.word	0x00000020
   132ec:	6f727245 	.word	0x6f727245
   132f0:	00000072 	.word	0x00000072
   132f4:	0000ffff 	.word	0x0000ffff
   132f8:	ffffffff 	.word	0xffffffff
   132fc:	ffffffff 	.word	0xffffffff
   13300:	000000ff 	.word	0x000000ff
   13304:	6b6f7242 	.word	0x6b6f7242
   13308:	68772065 	.word	0x68772065
   1330c:	20656c69 	.word	0x20656c69
   13310:	706f6f6c 	.word	0x706f6f6c
   13314:	00000000 	.word	0x00000000
   13318:	6c756f43 	.word	0x6c756f43
   1331c:	74276e64 	.word	0x74276e64
   13320:	61747320 	.word	0x61747320
   13324:	46207472 	.word	0x46207472
   13328:	30323654 	.word	0x30323654
   1332c:	6f742036 	.word	0x6f742036
   13330:	73686375 	.word	0x73686375
   13334:	65657263 	.word	0x65657263
   13338:	6f63206e 	.word	0x6f63206e
   1333c:	6f72746e 	.word	0x6f72746e
   13340:	72656c6c 	.word	0x72656c6c
   13344:	00000000 	.word	0x00000000
   13348:	76697244 	.word	0x76697244
   1334c:	6d207265 	.word	0x6d207265
   13350:	74686769 	.word	0x74686769
   13354:	746f6e20 	.word	0x746f6e20
   13358:	76616820 	.word	0x76616820
   1335c:	65622065 	.word	0x65622065
   13360:	66206e65 	.word	0x66206e65
   13364:	646e756f 	.word	0x646e756f
   13368:	00000000 	.word	0x00000000
   1336c:	6c696146 	.word	0x6c696146
   13370:	74206465 	.word	0x74206465
   13374:	6e69206f 	.word	0x6e69206f
   13378:	61697469 	.word	0x61697469
   1337c:	6573696c 	.word	0x6573696c
   13380:	20445320 	.word	0x20445320
   13384:	64726163 	.word	0x64726163
   13388:	00000000 	.word	0x00000000
   1338c:	00000a0d 	.word	0x00000a0d
   13390:	006e616e 	.word	0x006e616e
   13394:	00666e69 	.word	0x00666e69
   13398:	0066766f 	.word	0x0066766f

0001339c <_ZTV5Print>:
	...
   133a4:	0000d4d3 00002f1b 00002ef9 00002f0b     ...../......./..

000133b4 <_ZTV4Uart>:
	...
   133bc:	00003bd1 00002f1b 00003b45 00003a13     .;.../..E;...:..
   133cc:	00003b29 00003b7d 00003b61 00003f21     );..};..a;..!?..
   133dc:	00003f45 00003811 00003839 000039e5     E?...8..98...9..
   133ec:	00003725                                %7..

000133f0 <_ZTV14HardwareSerial>:
	...
   133f8:	0000d4d3 00002f1b 00002ef9 0000d4d3     ...../..........
   13408:	0000d4d3 0000d4d3 0000d4d3 00000000     ................
   13418:	00000000 0000366f 00003681 00003697     ....o6...6...6..
   13428:	0000d4d3                                ....

0001342c <_ZTV6Stream>:
	...
   13434:	0000d4d3 00002f1b 00002ef9 00002f0b     ...../......./..
   13444:	0000d4d3 0000d4d3 0000d4d3              ............

00013450 <_ZL15STRING_LANGUAGE>:
   13450:	04090304                                ....

00013454 <_ZL14STRING_PRODUCT>:
   13454:	75647241 206f6e69 5020304d 00006f72     Arduino M0 Pro..

00013464 <_ZL19STRING_MANUFACTURER>:
   13464:	75647241 206f6e69 00434c4c              Arduino LLC.

00013470 <_ZL21USB_DeviceDescriptorB>:
   13470:	02000112 400102ef 804f2a03 02010100     .......@.*O.....
   13480:	00000103                                ....

00013484 <_ZL20USB_DeviceDescriptor>:
   13484:	02000112 40000000 804f2a03 02010100     .......@.*O.....
   13494:	00000103 000060ba 00006116 0000624c     .....`...a..Lb..
   134a4:	00006164 0000624c 000061a8 000061bc     da..Lb...a...a..
   134b4:	000061cc 000061d0 000061e0 00006224     .a...a...a..$b..
   134c4:	00006234                                4b..

000134c8 <_ZTV26DoubleBufferedEPOutHandler>:
	...
   134d0:	00004d95 00004b69 00004f1d              .M..iK...O..

000134dc <_ZTV9EPHandler>:
	...
   134e4:	0000d4d3 0000d4d3 0000d4d3 00006812     .............h..
   134f4:	000067a8 000067c4 000067e0 000067f6     .g...g...g...g..
   13504:	000067a8 00006dfa 00006c04 00006c04     .g...m...l...l..
   13514:	00006c04 00006c04 00006c04 00006c04     .l...l...l...l..
   13524:	00006c04 00006c04 00006bc0 00006bc0     .l...l...k...k..
   13534:	00006bc0 00006bc0                       .k...k..

0001353c <_ZTV16Adafruit_ILI9341>:
	...
   13544:	0000d1b9 00002f1b 00002ef9 00002f0b     ...../......./..
   13554:	00008571 00007f39 000082a9 00008339     q...9.......9...
   13564:	000084bb 00008515 0000c319 00007f89     ................
   13574:	00007d71 00007e3b 000085db 0000864f     q}..;~......O...
   13584:	000086c3 0000c8d3 0000c90f 0000cac7     ................

00013594 <_ZTVN5SDLib4FileE>:
	...
   1359c:	000088dd 00008905 00002ef9 00008a59     ............Y...
   135ac:	00008a15 000089b5 00008973 0000002f     ........s.../...
   135bc:	0000980a 00009828 00009846 00009864     ....(...F...d...
   135cc:	00009882 000098a0 5e3e3c7c 2f3f3d2b     ........|<>^+=?/
   135dc:	2c3b5d5b 005c222a                       [];,*"\.

000135e4 <_ZTV6SdFile>:
	...
   135ec:	0000aea1 00002f1b 00002ef9 00002f0b     ...../......./..
   135fc:	65735f70 6d6f6372 203d2120 4c4c554e     p_sercom != NULL
   1360c:	00000000 732f2e2e 6c2f6372 61726269     ....../src/libra
   1361c:	73656972 6970732f 4950532f 7070632e     ries/spi/SPI.cpp
   1362c:	00000000                                ....

00013630 <_ZZN8SPIClassC4EP6SERCOMhhh14SercomSpiTXPad11SercomRXPadE19__PRETTY_FUNCTION__>:
   13630:	43495053 7373616c 50533a3a 616c4349     SPIClass::SPICla
   13640:	53287373 4f435245 202c2a4d 746e6975     ss(SERCOM*, uint
   13650:	2c745f38 6e697520 745f3874 6975202c     8_t, uint8_t, ui
   13660:	5f38746e 53202c74 6f637265 6970536d     nt8_t, SercomSpi
   13670:	61505854 53202c64 6f637265 5058526d     TXPad, SercomRXP
   13680:	00296461                                ad).

00013684 <_ZTV7TwoWire>:
	...
   1368c:	0000bc41 0000bc99 00002ef9 0000bd3b     A...........;...
   1369c:	0000bce7 0000bd03 0000bd1f              ............

000136a8 <g_APinDescription>:
   136a8:	00000000 0000000b 00000002 00000004     ................
   136b8:	ffff00ff 000bffff 00000000 0000000a     ................
   136c8:	00000002 00000004 ffff00ff 000affff     ................
   136d8:	00000000 00000008 00000004 0000001c     ................
   136e8:	000000ff 00ff0000 00000000 00000009     ................
   136f8:	00000004 0000001c 000100ff 00090001     ................
   13708:	00000000 0000000e 00000004 0000001c     ................
   13718:	030000ff 000e0300 00000000 0000000f     ................
   13728:	00000004 0000001c 030100ff 000f0301     ................
   13738:	00000000 00000014 00000005 0000001c     ................
   13748:	000200ff 00040002 00000000 00000015     ................
   13758:	00000005 0000001c 000300ff 00050003     ................
   13768:	00000000 00000006 00000004 0000001c     ................
   13778:	010000ff 00060100 00000000 00000007     ................
   13788:	00000004 0000001c 010100ff 00070101     ................
   13798:	00000000 00000012 00000004 0000001c     ................
   137a8:	030000ff 00020300 00000000 00000010     ................
   137b8:	00000004 0000001c 020000ff 00000200     ................
   137c8:	00000000 00000013 00000004 0000001c     ................
   137d8:	030100ff 00030301 00000000 00000011     ................
   137e8:	00000004 0000000c 020100ff 0001ffff     ................
   137f8:	000000ff 00000000 000000ff 00000000     ................
   13808:	ffff00ff 00ffffff 00000000 00000003     ................
   13818:	00000001 00000002 ffff00ff 00ffffff     ................
   13828:	00000000 00000016 00000002 00000004     ................
   13838:	ffff00ff 0006ffff 00000000 00000017     ................
   13848:	00000002 00000004 ffff00ff 0007ffff     ................
   13858:	00000000 0000000c 00000003 00000004     ................
   13868:	ffff00ff 000cffff 000000ff 00000000     ................
   13878:	000000ff 00000000 ffff00ff 00ffffff     ................
   13888:	00000001 0000000b 00000003 00000004     ................
   13898:	ffff00ff 000bffff 00000001 0000000a     ................
   138a8:	00000003 00000004 ffff00ff 000affff     ................
   138b8:	000000ff 00000000 000000ff 00000000     ................
   138c8:	ffff00ff 00ffffff 000000ff 00000000     ................
   138d8:	000000ff 00000000 ffff00ff 00ffffff     ................
   138e8:	00000000 00000002 00000001 00000002     ................
   138f8:	ffff0000 0002ffff 00000001 00000008     ................
   13908:	00000001 00000002 ffff0002 0008ffff     ................
   13918:	00000001 00000009 00000001 00000002     ................
   13928:	ffff0003 0009ffff 00000000 00000004     ................
   13938:	00000001 00000002 ffff0004 0004ffff     ................
   13948:	00000000 00000005 00000001 00000002     ................
   13958:	ffff0005 0005ffff 00000001 00000002     ................
   13968:	00000001 00000002 ffff000a 0002ffff     ................
   13978:	00000001 00000003 0000000b 00000004     ................
   13988:	ffff00ff 00ffffff 00000000 0000001b     ................
   13998:	0000000b 00000004 ffff00ff 00ffffff     ................
   139a8:	00000000 0000001c 00000006 00000000     ................
   139b8:	ffff00ff 00ffffff 00000000 00000018     ................
   139c8:	00000006 00000000 ffff00ff 00ffffff     ................
   139d8:	00000000 00000019 00000006 00000000     ................
   139e8:	ffff00ff 00ffffff 00000001 00000016     ................
   139f8:	00000003 00000000 ffff00ff 00ffffff     ................
   13a08:	00000001 00000017 00000003 00000000     ................
   13a18:	ffff00ff 00ffffff 00000000 00000016     ................
   13a28:	00000002 00000000 ffff00ff 00ffffff     ................
   13a38:	00000000 00000017 00000002 00000000     ................
   13a48:	ffff00ff 00ffffff 00000000 00000013     ................
   13a58:	00000002 00000000 ffff00ff 00ffffff     ................
   13a68:	00000000 00000010 00000002 00000000     ................
   13a78:	ffff00ff 00ffffff 00000000 00000012     ................
   13a88:	00000002 00000000 ffff00ff 00ffffff     ................
   13a98:	00000000 00000011 00000002 00000000     ................
   13aa8:	ffff00ff 00ffffff 00000000 0000000d     ................
   13ab8:	00000004 0000000c 000100ff 000dffff     ................
   13ac8:	00000000 00000015 00000005 0000000c     ................
   13ad8:	000300ff 00ffffff 00000000 00000006     ................
   13ae8:	00000004 0000000c 010000ff 00ffffff     ................
   13af8:	00000000 00000007 00000004 0000000c     ................
   13b08:	010100ff 00ffffff 00000000 00000002     ................
   13b18:	00000001 00000002 ffff0014 0002ffff     ................

00013b28 <_ZL4font>:
   13b28:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   13b38:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   13b48:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   13b58:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   13b68:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   13b78:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   13b88:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   13b98:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   13ba8:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   13bb8:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   13bc8:	00000000 5f000000 07000000 14000700     ......._........
   13bd8:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   13be8:	00502056 00030708 41221c00 22410000     V P......."A..A"
   13bf8:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   13c08:	08080800 00000808 20006060 02040810     ........``. ....
   13c18:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   13c28:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   13c38:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   13c48:	00001e29 00000014 00003440 22140800     ).......@4....."
   13c58:	14141441 41001414 02081422 06095901     A......A"....Y..
   13c68:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   13c78:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   13c88:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   13c98:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   13ca8:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   13cb8:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   13cc8:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   13cd8:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   13ce8:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   13cf8:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   13d08:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   13d18:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   13d28:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   13d38:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   13d48:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   13d58:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   13d68:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   13d78:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   13d88:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   13d98:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   13da8:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   13db8:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   13dc8:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   13dd8:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   13de8:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   13df8:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   13e08:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   13e18:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   13e28:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   13e38:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   13e48:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   13e58:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   13e68:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   13e78:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   13e88:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   13e98:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   13ea8:	00ff0000 ff101010 14141400 101000ff     ................
   13eb8:	10ff00ff f010f010 fc141414 f7141400     ................
   13ec8:	0000ff00 14ff00ff fc04f414 10171414     ................
   13ed8:	1f10101f 14141f10 10001f14 00f01010     ................
   13ee8:	1f000000 10101010 1010101f 0010f010     ................
   13ef8:	10ff0000 10101010 10101010 000010ff     ................
   13f08:	0014ff00 ff00ff00 101f0000 fc000017     ................
   13f18:	1414f404 14171017 f404f414 00ff0000     ................
   13f28:	141414f7 14141414 14f700f7 14171414     ................
   13f38:	101f1010 1414141f 101014f4 00f010f0     ................
   13f48:	1f101f00 1f000000 00000014 000014fc     ................
   13f58:	10f010f0 ff10ff10 ff141414 10101014     ................
   13f68:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   13f78:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   13f88:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   13f98:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   13fa8:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   13fb8:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   13fc8:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   13fd8:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   13fe8:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   13ff8:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   14008:	00000018 30001010 0101ff40 01011f00     .......0@.......
   14018:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

00014028 <_ZTV12Adafruit_GFX>:
	...
   14030:	0000d1b9 00002f1b 00002ef9 00002f0b     ...../......./..
   14040:	0000d4d3 0000c573 0000c583 0000c681     ....s...........
   14050:	0000c5d1 0000c629 0000c319 0000c6ef     ....)...........
   14060:	0000d427 0000d4bd 0000c6ff 0000c78d     '...............
   14070:	0000c81f 0000c8d3 0000c90f 0000cac7     ................

00014080 <_ZTV7Serial_>:
	...
   14088:	0000e681 0000e645 0000e59f 0000e629     ....E.......)...
   14098:	0000e581 0000e5ed 0000e5b1 0000f3f8     ................
   140a8:	0000f3da 0000f394 0000f2b2 0000f394     ................
   140b8:	0000f3cc 0000f394 0000f2b2 0000f3da     ................
   140c8:	0000f3da 0000f3cc 0000f2b2 0000f2aa     ................
   140d8:	0000f2aa 0000f2aa 0000f610 0000fc58     ............X...
   140e8:	0000fb18 0000fb18 0000fb14 0000fc30     ............0...
   140f8:	0000fc30 0000fc22 0000fb14 0000fc30     0...".......0...
   14108:	0000fc22 0000fc30 0000fb14 0000fc38     "...0.......8...
   14118:	0000fc38 0000fc38 0000fe3c 7566202c     8...8...<..., fu
   14128:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
   14138:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
   14148:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
   14158:	73256425 000a7325                       %d%s%s..

00014160 <_global_impure_ptr>:
   14160:	200000a8 4f500043 00584953 2d23002e     ... C.POSIX...#-
   14170:	00202b30 004c6c68 45676665 49004746     0+ .hlL.efgEFG.I
   14180:	6900464e 4e00666e 6e004e41 30006e61     NF.inf.NAN.nan.0
   14190:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   141a0:	31300046 35343332 39383736 64636261     F.0123456789abcd
   141b0:	00006665                                         ef.

000141b3 <_ctype_>:
   141b3:	20202000 20202020 28282020 20282828     .         ((((( 
   141c3:	20202020 20202020 20202020 20202020                     
   141d3:	10108820 10101010 10101010 10101010      ...............
   141e3:	04040410 04040404 10040404 10101010     ................
   141f3:	41411010 41414141 01010101 01010101     ..AAAAAA........
   14203:	01010101 01010101 01010101 10101010     ................
   14213:	42421010 42424242 02020202 02020202     ..BBBBBB........
   14223:	02020202 02020202 02020202 10101010     ................
   14233:	00000020 00000000 00000000 00000000      ...............
	...
   142b3:	666e4900 74696e69 614e0079 0000004e     .Infinity.NaN...
	...

000142c4 <__sf_fake_stderr>:
	...

000142e4 <__sf_fake_stdin>:
	...

00014304 <__sf_fake_stdout>:
	...

00014328 <__mprec_bigtens>:
   14328:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   14338:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   14348:	7f73bf3c 75154fdd                       <.s..O.u

00014350 <__mprec_tens>:
   14350:	00000000 3ff00000 00000000 40240000     .......?......$@
   14360:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   14370:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   14380:	00000000 412e8480 00000000 416312d0     .......A......cA
   14390:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   143a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   143b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   143c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   143d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   143e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   143f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   14400:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   14410:	79d99db4 44ea7843                       ...yCx.D

00014418 <p05.6047>:
   14418:	00000005 00000019 0000007d              ........}...

00014424 <__EH_FRAME_BEGIN__>:
   14424:	00000000                                ....

Disassembly of section .ramfunc:

00014428 <banzai>:
static void banzai() {
   14428:	b580      	push	{r7, lr}
   1442a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
   1442c:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
   1442e:	4b17      	ldr	r3, [pc, #92]	; (1448c <banzai+0x64>)
   14430:	3304      	adds	r3, #4
   14432:	4a17      	ldr	r2, [pc, #92]	; (14490 <banzai+0x68>)
   14434:	4293      	cmp	r3, r2
   14436:	d925      	bls.n	14484 <banzai+0x5c>
	while (!nvmReady())
   14438:	f7ee ff6e 	bl	3318 <nvmReady>
   1443c:	0003      	movs	r3, r0
   1443e:	001a      	movs	r2, r3
   14440:	2301      	movs	r3, #1
   14442:	4053      	eors	r3, r2
   14444:	b2db      	uxtb	r3, r3
   14446:	2b00      	cmp	r3, #0
   14448:	d000      	beq.n	1444c <banzai+0x24>
   1444a:	e7f5      	b.n	14438 <banzai+0x10>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   1444c:	4911      	ldr	r1, [pc, #68]	; (14494 <banzai+0x6c>)
   1444e:	4b11      	ldr	r3, [pc, #68]	; (14494 <banzai+0x6c>)
   14450:	8b1b      	ldrh	r3, [r3, #24]
   14452:	b29b      	uxth	r3, r3
   14454:	2220      	movs	r2, #32
   14456:	32ff      	adds	r2, #255	; 0xff
   14458:	4313      	orrs	r3, r2
   1445a:	b29b      	uxth	r3, r3
   1445c:	830b      	strh	r3, [r1, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
   1445e:	4b0d      	ldr	r3, [pc, #52]	; (14494 <banzai+0x6c>)
   14460:	4a0a      	ldr	r2, [pc, #40]	; (1448c <banzai+0x64>)
   14462:	3204      	adds	r2, #4
   14464:	0892      	lsrs	r2, r2, #2
   14466:	0052      	lsls	r2, r2, #1
   14468:	61da      	str	r2, [r3, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
   1446a:	4b0a      	ldr	r3, [pc, #40]	; (14494 <banzai+0x6c>)
   1446c:	4a0a      	ldr	r2, [pc, #40]	; (14498 <banzai+0x70>)
   1446e:	801a      	strh	r2, [r3, #0]
	while (!nvmReady())
   14470:	f7ee ff52 	bl	3318 <nvmReady>
   14474:	0003      	movs	r3, r0
   14476:	001a      	movs	r2, r3
   14478:	2301      	movs	r3, #1
   1447a:	4053      	eors	r3, r2
   1447c:	b2db      	uxtb	r3, r3
   1447e:	2b00      	cmp	r3, #0
   14480:	d001      	beq.n	14486 <banzai+0x5e>
   14482:	e7f5      	b.n	14470 <banzai+0x48>
		goto reset;
   14484:	46c0      	nop			; (mov r8, r8)
	NVIC_SystemReset() ;
   14486:	f7ee ff37 	bl	32f8 <NVIC_SystemReset>
	while (true);
   1448a:	e7fe      	b.n	1448a <banzai+0x62>
   1448c:	00000000 	.word	0x00000000
   14490:	00000203 	.word	0x00000203
   14494:	41004000 	.word	0x41004000
   14498:	ffffa502 	.word	0xffffa502
