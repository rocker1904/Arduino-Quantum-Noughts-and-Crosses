
arduino-noughts-and-crosses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a70  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  20000000  00006a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ce8  20000130  00006ba0  00020130  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
  5 .debug_info   000a7bb3  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000c3bd  00000000  00000000  000c7d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000187b0  00000000  00000000  000d4121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00001540  00000000  00000000  000ec8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00002fe8  00000000  00000000  000ede11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00021394  00000000  00000000  000f0df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00019393  00000000  00000000  0011218d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00087578  00000000  00000000  0012b520  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000400c  00000000  00000000  001b2a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stabstr      000001b9  00000000  00000000  001b6aa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 c9 08 00 00 b1 08 00 00 b1 08 00 00     ... ............
	...
      2c:	b1 08 00 00 00 00 00 00 00 00 00 00 b1 08 00 00     ................
      3c:	1d 09 00 00 b1 08 00 00 b1 08 00 00 b1 08 00 00     ................
      4c:	b1 08 00 00 b1 08 00 00 b1 08 00 00 b1 08 00 00     ................
      5c:	b5 08 00 00 b1 08 00 00 4d 48 00 00 b1 08 00 00     ........MH......
      6c:	b1 08 00 00 25 48 00 00 b1 08 00 00 5d 48 00 00     ....%H......]H..
      7c:	b1 08 00 00 b1 08 00 00 b1 08 00 00 b1 08 00 00     ................
      8c:	b1 08 00 00 00 00 00 00 b1 08 00 00 b1 08 00 00     ................
      9c:	b1 08 00 00 b1 08 00 00 b1 08 00 00 b1 08 00 00     ................
      ac:	b1 08 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000130 	.word	0x20000130
      d4:	00000000 	.word	0x00000000
      d8:	00006a6c 	.word	0x00006a6c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000134 	.word	0x20000134
     108:	00006a6c 	.word	0x00006a6c
     10c:	2000012c 	.word	0x2000012c
     110:	00000000 	.word	0x00000000

00000114 <_Z6read16RN5SDLib4FileE>:
	
// These read 16-bit and 32-bit types from the SD card file.
// BMP data is stored little-endian, Arduino is little-endian too.
// May need to reverse subscript order if porting elsewhere.

uint16_t read16(File &f) {
     114:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint16_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     116:	6803      	ldr	r3, [r0, #0]
uint16_t read16(File &f) {
     118:	0004      	movs	r4, r0
	((uint8_t *) &result)[0] = f.read(); // LSB
     11a:	695b      	ldr	r3, [r3, #20]
     11c:	4798      	blx	r3
     11e:	466b      	mov	r3, sp
     120:	1d9d      	adds	r5, r3, #6
     122:	7198      	strb	r0, [r3, #6]
	((uint8_t *) &result)[1] = f.read(); // MSB
     124:	6823      	ldr	r3, [r4, #0]
     126:	0020      	movs	r0, r4
     128:	695b      	ldr	r3, [r3, #20]
     12a:	4798      	blx	r3
     12c:	7068      	strb	r0, [r5, #1]
	return result;
     12e:	8828      	ldrh	r0, [r5, #0]
}
     130:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00000132 <_Z6read32RN5SDLib4FileE>:

uint32_t read32(File &f) {
	uint32_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     132:	6803      	ldr	r3, [r0, #0]
uint32_t read32(File &f) {
     134:	b537      	push	{r0, r1, r2, r4, r5, lr}
     136:	0004      	movs	r4, r0
	((uint8_t *) &result)[0] = f.read(); // LSB
     138:	695b      	ldr	r3, [r3, #20]
     13a:	4798      	blx	r3
	((uint8_t *) &result)[1] = f.read();
     13c:	6823      	ldr	r3, [r4, #0]
	((uint8_t *) &result)[0] = f.read(); // LSB
     13e:	ad01      	add	r5, sp, #4
     140:	7028      	strb	r0, [r5, #0]
	((uint8_t *) &result)[1] = f.read();
     142:	695b      	ldr	r3, [r3, #20]
     144:	0020      	movs	r0, r4
     146:	4798      	blx	r3
	((uint8_t *) &result)[2] = f.read();
     148:	6823      	ldr	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read();
     14a:	7068      	strb	r0, [r5, #1]
	((uint8_t *) &result)[2] = f.read();
     14c:	695b      	ldr	r3, [r3, #20]
     14e:	0020      	movs	r0, r4
     150:	4798      	blx	r3
	((uint8_t *) &result)[3] = f.read(); // MSB
     152:	6823      	ldr	r3, [r4, #0]
	((uint8_t *) &result)[2] = f.read();
     154:	70a8      	strb	r0, [r5, #2]
	((uint8_t *) &result)[3] = f.read(); // MSB
     156:	695b      	ldr	r3, [r3, #20]
     158:	0020      	movs	r0, r4
     15a:	4798      	blx	r3
     15c:	70e8      	strb	r0, [r5, #3]
	return result;
}
     15e:	9801      	ldr	r0, [sp, #4]
     160:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00000164 <_Z8getPointv>:
	if (!goodBmp)
	Serial.println(F("BMP format not recognized or SD not mounted"));
	Serial.println();
}

TS_Point getPoint() {
     164:	b537      	push	{r0, r1, r2, r4, r5, lr}
     166:	0004      	movs	r4, r0
	TS_Point point = touchScreen.getPoint();
     168:	2200      	movs	r2, #0
     16a:	490c      	ldr	r1, [pc, #48]	; (19c <_Z8getPointv+0x38>)
     16c:	f002 fa2a 	bl	25c4 <_ZN15Adafruit_FT62068getPointEh>
	// convert point to match display coordinate system
	point.x = map(point.x, 0, 240, 240, 0);
     170:	2500      	movs	r5, #0
     172:	2300      	movs	r3, #0
     174:	5ee0      	ldrsh	r0, [r4, r3]
     176:	23f0      	movs	r3, #240	; 0xf0
     178:	0029      	movs	r1, r5
     17a:	001a      	movs	r2, r3
     17c:	9500      	str	r5, [sp, #0]
     17e:	f002 f90b 	bl	2398 <_Z3maplllll>
	point.y = map(point.y, 0, 320, 320, 0);
     182:	22a0      	movs	r2, #160	; 0xa0
     184:	0052      	lsls	r2, r2, #1
	point.x = map(point.x, 0, 240, 240, 0);
     186:	8020      	strh	r0, [r4, #0]
	point.y = map(point.y, 0, 320, 320, 0);
     188:	9500      	str	r5, [sp, #0]
     18a:	2302      	movs	r3, #2
     18c:	5ee0      	ldrsh	r0, [r4, r3]
     18e:	0029      	movs	r1, r5
     190:	0013      	movs	r3, r2
     192:	f002 f901 	bl	2398 <_Z3maplllll>
     196:	8060      	strh	r0, [r4, #2]
	return point;
}
     198:	0020      	movs	r0, r4
     19a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     19c:	200001b0 	.word	0x200001b0

000001a0 <loop>:

	startScreen();

}

void loop() {
     1a0:	b510      	push	{r4, lr}

	if (!touchScreen.touched()) return;
     1a2:	4806      	ldr	r0, [pc, #24]	; (1bc <loop+0x1c>)
     1a4:	f002 fa66 	bl	2674 <_ZN15Adafruit_FT62067touchedEv>
     1a8:	2800      	cmp	r0, #0
     1aa:	d006      	beq.n	1ba <loop+0x1a>

	//  TS_Point point = getPoint();
	//
	//  Serial.println(
	//      "screen pressed at: (" + (String) point.x + "," + (String) point.y + ")");
	Serial.println(F("loooop"));
     1ac:	4904      	ldr	r1, [pc, #16]	; (1c0 <loop+0x20>)
     1ae:	4805      	ldr	r0, [pc, #20]	; (1c4 <loop+0x24>)
     1b0:	f000 fc3e 	bl	a30 <_ZN5Print7printlnEPK19__FlashStringHelper>
	delay(100);
     1b4:	2064      	movs	r0, #100	; 0x64
     1b6:	f000 fbc5 	bl	944 <delay>

     1ba:	bd10      	pop	{r4, pc}
     1bc:	200001b0 	.word	0x200001b0
     1c0:	00005e52 	.word	0x00005e52
     1c4:	20000c50 	.word	0x20000c50

000001c8 <_GLOBAL__sub_I_tftDisplay>:
Adafruit_ILI9341 tftDisplay = Adafruit_ILI9341(tftDisplay_CS, tftDisplay_DC);
     1c8:	2301      	movs	r3, #1
     1ca:	b510      	push	{r4, lr}
Adafruit_ILI9341 tftDisplay = Adafruit_ILI9341(tftDisplay_CS, tftDisplay_DC);
     1cc:	425b      	negs	r3, r3
     1ce:	2209      	movs	r2, #9
     1d0:	210a      	movs	r1, #10
     1d2:	4803      	ldr	r0, [pc, #12]	; (1e0 <_GLOBAL__sub_I_tftDisplay+0x18>)
     1d4:	f002 fb06 	bl	27e4 <_ZN16Adafruit_ILI9341C1Eaaa>
Adafruit_FT6206 touchScreen = Adafruit_FT6206();
     1d8:	4802      	ldr	r0, [pc, #8]	; (1e4 <_GLOBAL__sub_I_tftDisplay+0x1c>)
     1da:	f002 f989 	bl	24f0 <_ZN15Adafruit_FT6206C1Ev>
     1de:	bd10      	pop	{r4, pc}
     1e0:	2000014c 	.word	0x2000014c
     1e4:	200001b0 	.word	0x200001b0

000001e8 <_Z10drawBitmapcss>:
void drawBitmap(char fileInput, int16_t x, int16_t y) {
     1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ea:	b0a7      	sub	sp, #156	; 0x9c
	File bmpFile;
     1ec:	ac0e      	add	r4, sp, #56	; 0x38
void drawBitmap(char fileInput, int16_t x, int16_t y) {
     1ee:	0005      	movs	r5, r0
	File bmpFile;
     1f0:	0020      	movs	r0, r4
void drawBitmap(char fileInput, int16_t x, int16_t y) {
     1f2:	9102      	str	r1, [sp, #8]
     1f4:	9203      	str	r2, [sp, #12]
	File bmpFile;
     1f6:	f002 ff07 	bl	3008 <_ZN5SDLib4FileC1Ev>
	uint32_t pos = 0, startTime = millis();
     1fa:	f000 fb9d 	bl	938 <millis>
	char filename[6] = {fileInput, '.', 'b', 'm', 'p'};
     1fe:	ae0c      	add	r6, sp, #48	; 0x30
	uint32_t pos = 0, startTime = millis();
     200:	900a      	str	r0, [sp, #40]	; 0x28
	char filename[6] = {fileInput, '.', 'b', 'm', 'p'};
     202:	2206      	movs	r2, #6
     204:	2100      	movs	r1, #0
     206:	0030      	movs	r0, r6
     208:	f005 fc5e 	bl	5ac8 <memset>
     20c:	232e      	movs	r3, #46	; 0x2e
     20e:	7035      	strb	r5, [r6, #0]
     210:	7073      	strb	r3, [r6, #1]
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     212:	4dc2      	ldr	r5, [pc, #776]	; (51c <_Z10drawBitmapcss+0x334>)
	char filename[6] = {fileInput, '.', 'b', 'm', 'p'};
     214:	3334      	adds	r3, #52	; 0x34
     216:	70b3      	strb	r3, [r6, #2]
     218:	330b      	adds	r3, #11
     21a:	70f3      	strb	r3, [r6, #3]
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     21c:	0028      	movs	r0, r5
	char filename[6] = {fileInput, '.', 'b', 'm', 'p'};
     21e:	3303      	adds	r3, #3
     220:	7133      	strb	r3, [r6, #4]
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     222:	f004 fedd 	bl	4fe0 <_ZNK12Adafruit_GFX5widthEv>
     226:	9b02      	ldr	r3, [sp, #8]
     228:	4298      	cmp	r0, r3
     22a:	dd4b      	ble.n	2c4 <_Z10drawBitmapcss+0xdc>
     22c:	0028      	movs	r0, r5
     22e:	f004 feda 	bl	4fe6 <_ZNK12Adafruit_GFX6heightEv>
     232:	9b03      	ldr	r3, [sp, #12]
     234:	4298      	cmp	r0, r3
     236:	dd45      	ble.n	2c4 <_Z10drawBitmapcss+0xdc>
	Serial.println();
     238:	4db9      	ldr	r5, [pc, #740]	; (520 <_Z10drawBitmapcss+0x338>)
	if ((bmpFile = SD.open(filename))) {
     23a:	af17      	add	r7, sp, #92	; 0x5c
	Serial.println();
     23c:	0028      	movs	r0, r5
     23e:	f000 fbef 	bl	a20 <_ZN5Print7printlnEv>
	Serial.print(F("Loading image '"));
     242:	49b8      	ldr	r1, [pc, #736]	; (524 <_Z10drawBitmapcss+0x33c>)
     244:	0028      	movs	r0, r5
     246:	f000 fbde 	bl	a06 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(filename);
     24a:	0031      	movs	r1, r6
     24c:	0028      	movs	r0, r5
     24e:	f000 fbde 	bl	a0e <_ZN5Print5printEPKc>
	Serial.println('\'');
     252:	2127      	movs	r1, #39	; 0x27
     254:	0028      	movs	r0, r5
     256:	f000 fbf5 	bl	a44 <_ZN5Print7printlnEc>
	if ((bmpFile = SD.open(filename))) {
     25a:	2301      	movs	r3, #1
     25c:	0032      	movs	r2, r6
     25e:	49b2      	ldr	r1, [pc, #712]	; (528 <_Z10drawBitmapcss+0x340>)
     260:	0038      	movs	r0, r7
     262:	f002 ffcf 	bl	3204 <_ZN5SDLib7SDClass4openEPKch>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     266:	9b18      	ldr	r3, [sp, #96]	; 0x60
     268:	6063      	str	r3, [r4, #4]
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     26a:	68bb      	ldr	r3, [r7, #8]
     26c:	60a3      	str	r3, [r4, #8]
     26e:	68fb      	ldr	r3, [r7, #12]
     270:	60e3      	str	r3, [r4, #12]
     272:	2310      	movs	r3, #16
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
     274:	5cfa      	ldrb	r2, [r7, r3]
     276:	551a      	strb	r2, [r3, r4]
     278:	3301      	adds	r3, #1
     27a:	2b1d      	cmp	r3, #29
     27c:	d1fa      	bne.n	274 <_Z10drawBitmapcss+0x8c>
     27e:	6a3b      	ldr	r3, [r7, #32]
     280:	0020      	movs	r0, r4
     282:	6223      	str	r3, [r4, #32]
     284:	f002 ff0d 	bl	30a2 <_ZN5SDLib4FilecvbEv>
     288:	2800      	cmp	r0, #0
     28a:	d003      	beq.n	294 <_Z10drawBitmapcss+0xac>
		Serial.println(F("File (maybe) not found"));
     28c:	49a7      	ldr	r1, [pc, #668]	; (52c <_Z10drawBitmapcss+0x344>)
     28e:	0028      	movs	r0, r5
     290:	f000 fbce 	bl	a30 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println(F("Start parse"));
     294:	49a6      	ldr	r1, [pc, #664]	; (530 <_Z10drawBitmapcss+0x348>)
     296:	0028      	movs	r0, r5
     298:	f000 fbca 	bl	a30 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     29c:	0020      	movs	r0, r4
     29e:	f7ff ff39 	bl	114 <_Z6read16RN5SDLib4FileE>
     2a2:	4ba4      	ldr	r3, [pc, #656]	; (534 <_Z10drawBitmapcss+0x34c>)
     2a4:	4298      	cmp	r0, r3
     2a6:	d00f      	beq.n	2c8 <_Z10drawBitmapcss+0xe0>
	boolean goodBmp = false;       // Set to true on valid header parse
     2a8:	2500      	movs	r5, #0
	bmpFile.close();
     2aa:	a80e      	add	r0, sp, #56	; 0x38
     2ac:	f002 feec 	bl	3088 <_ZN5SDLib4File5closeEv>
     2b0:	4c9b      	ldr	r4, [pc, #620]	; (520 <_Z10drawBitmapcss+0x338>)
	if (!goodBmp)
     2b2:	2d00      	cmp	r5, #0
     2b4:	d103      	bne.n	2be <_Z10drawBitmapcss+0xd6>
	Serial.println(F("BMP format not recognized or SD not mounted"));
     2b6:	49a0      	ldr	r1, [pc, #640]	; (538 <_Z10drawBitmapcss+0x350>)
     2b8:	0020      	movs	r0, r4
     2ba:	f000 fbb9 	bl	a30 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println();
     2be:	0020      	movs	r0, r4
     2c0:	f000 fbae 	bl	a20 <_ZN5Print7printlnEv>
}
     2c4:	b027      	add	sp, #156	; 0x9c
     2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Serial.print(F("File size: "));
     2c8:	499c      	ldr	r1, [pc, #624]	; (53c <_Z10drawBitmapcss+0x354>)
     2ca:	0028      	movs	r0, r5
     2cc:	f000 fb9b 	bl	a06 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     2d0:	0020      	movs	r0, r4
     2d2:	f7ff ff2e 	bl	132 <_Z6read32RN5SDLib4FileE>
     2d6:	220a      	movs	r2, #10
     2d8:	0001      	movs	r1, r0
     2da:	0028      	movs	r0, r5
     2dc:	f000 fc2b 	bl	b36 <_ZN5Print7printlnEmi>
		(void) read32(bmpFile); // Read & ignore creator bytes
     2e0:	0020      	movs	r0, r4
     2e2:	f7ff ff26 	bl	132 <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     2e6:	0020      	movs	r0, r4
     2e8:	f7ff ff23 	bl	132 <_Z6read32RN5SDLib4FileE>
		Serial.print(F("Image Offset: "));
     2ec:	4994      	ldr	r1, [pc, #592]	; (540 <_Z10drawBitmapcss+0x358>)
		bmpImageoffset = read32(bmpFile); // Start of image data
     2ee:	9007      	str	r0, [sp, #28]
		Serial.print(F("Image Offset: "));
     2f0:	0028      	movs	r0, r5
     2f2:	f000 fb88 	bl	a06 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(bmpImageoffset, DEC);
     2f6:	220a      	movs	r2, #10
     2f8:	9907      	ldr	r1, [sp, #28]
     2fa:	0028      	movs	r0, r5
     2fc:	f000 fc1b 	bl	b36 <_ZN5Print7printlnEmi>
		Serial.print(F("Header size: "));
     300:	4990      	ldr	r1, [pc, #576]	; (544 <_Z10drawBitmapcss+0x35c>)
     302:	0028      	movs	r0, r5
     304:	f000 fb7f 	bl	a06 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     308:	0020      	movs	r0, r4
     30a:	f7ff ff12 	bl	132 <_Z6read32RN5SDLib4FileE>
     30e:	220a      	movs	r2, #10
     310:	0001      	movs	r1, r0
     312:	0028      	movs	r0, r5
     314:	f000 fc0f 	bl	b36 <_ZN5Print7printlnEmi>
		bmpWidth = read32(bmpFile);
     318:	0020      	movs	r0, r4
     31a:	f7ff ff0a 	bl	132 <_Z6read32RN5SDLib4FileE>
     31e:	9006      	str	r0, [sp, #24]
		bmpHeight = read32(bmpFile);
     320:	0020      	movs	r0, r4
     322:	f7ff ff06 	bl	132 <_Z6read32RN5SDLib4FileE>
     326:	0007      	movs	r7, r0
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     328:	0020      	movs	r0, r4
     32a:	f7ff fef3 	bl	114 <_Z6read16RN5SDLib4FileE>
     32e:	9004      	str	r0, [sp, #16]
     330:	2801      	cmp	r0, #1
     332:	d1b9      	bne.n	2a8 <_Z10drawBitmapcss+0xc0>
			bmpDepth = read16(bmpFile); // bits per pixel
     334:	0020      	movs	r0, r4
     336:	f7ff feed 	bl	114 <_Z6read16RN5SDLib4FileE>
			Serial.print(F("Bit Depth: "));
     33a:	4983      	ldr	r1, [pc, #524]	; (548 <_Z10drawBitmapcss+0x360>)
			bmpDepth = read16(bmpFile); // bits per pixel
     33c:	b2c6      	uxtb	r6, r0
			Serial.print(F("Bit Depth: "));
     33e:	0028      	movs	r0, r5
     340:	f000 fb61 	bl	a06 <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(bmpDepth);
     344:	220a      	movs	r2, #10
     346:	0031      	movs	r1, r6
     348:	0028      	movs	r0, r5
     34a:	f000 fbea 	bl	b22 <_ZN5Print7printlnEhi>
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     34e:	2e18      	cmp	r6, #24
     350:	d1aa      	bne.n	2a8 <_Z10drawBitmapcss+0xc0>
     352:	0020      	movs	r0, r4
     354:	f7ff feed 	bl	132 <_Z6read32RN5SDLib4FileE>
     358:	1e04      	subs	r4, r0, #0
     35a:	d1a5      	bne.n	2a8 <_Z10drawBitmapcss+0xc0>
				Serial.print(F("Image size: "));
     35c:	497b      	ldr	r1, [pc, #492]	; (54c <_Z10drawBitmapcss+0x364>)
     35e:	0028      	movs	r0, r5
     360:	f000 fb51 	bl	a06 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(bmpWidth);
     364:	220a      	movs	r2, #10
     366:	9906      	ldr	r1, [sp, #24]
     368:	0028      	movs	r0, r5
     36a:	f000 fbc0 	bl	aee <_ZN5Print5printEii>
				Serial.print('x');
     36e:	2178      	movs	r1, #120	; 0x78
     370:	0028      	movs	r0, r5
     372:	f000 fb50 	bl	a16 <_ZN5Print5printEc>
				Serial.println(bmpHeight);
     376:	220a      	movs	r2, #10
     378:	0039      	movs	r1, r7
     37a:	0028      	movs	r0, r5
     37c:	f000 fbbb 	bl	af6 <_ZN5Print7printlnEii>
				if (bmpHeight < 0) {
     380:	2f00      	cmp	r7, #0
     382:	db02      	blt.n	38a <_Z10drawBitmapcss+0x1a2>
	boolean flip = true;        // BMP is stored bottom-to-top
     384:	9b04      	ldr	r3, [sp, #16]
     386:	9308      	str	r3, [sp, #32]
     388:	e001      	b.n	38e <_Z10drawBitmapcss+0x1a6>
					bmpHeight = -bmpHeight;
     38a:	427f      	negs	r7, r7
					flip = false;
     38c:	9408      	str	r4, [sp, #32]
				x2 = x + bmpWidth - 1; // Lower-right corner
     38e:	9a02      	ldr	r2, [sp, #8]
     390:	9b06      	ldr	r3, [sp, #24]
     392:	4694      	mov	ip, r2
     394:	4463      	add	r3, ip
     396:	9304      	str	r3, [sp, #16]
				y2 = y + bmpHeight - 1;
     398:	9b03      	ldr	r3, [sp, #12]
     39a:	18fb      	adds	r3, r7, r3
     39c:	9305      	str	r3, [sp, #20]
     39e:	1e5d      	subs	r5, r3, #1
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     3a0:	9b04      	ldr	r3, [sp, #16]
     3a2:	3b01      	subs	r3, #1
     3a4:	930b      	str	r3, [sp, #44]	; 0x2c
     3a6:	d500      	bpl.n	3aa <_Z10drawBitmapcss+0x1c2>
     3a8:	e0a4      	b.n	4f4 <_Z10drawBitmapcss+0x30c>
     3aa:	2d00      	cmp	r5, #0
     3ac:	da00      	bge.n	3b0 <_Z10drawBitmapcss+0x1c8>
     3ae:	e0a1      	b.n	4f4 <_Z10drawBitmapcss+0x30c>
					if (x < 0) { // Clip left
     3b0:	2a00      	cmp	r2, #0
     3b2:	db00      	blt.n	3b6 <_Z10drawBitmapcss+0x1ce>
     3b4:	e08a      	b.n	4cc <_Z10drawBitmapcss+0x2e4>
						bx1 = -x;
     3b6:	4253      	negs	r3, r2
     3b8:	9309      	str	r3, [sp, #36]	; 0x24
						x = 0;
     3ba:	2300      	movs	r3, #0
     3bc:	9302      	str	r3, [sp, #8]
					if (y < 0) { // Clip top
     3be:	9b03      	ldr	r3, [sp, #12]
     3c0:	2b00      	cmp	r3, #0
     3c2:	db00      	blt.n	3c6 <_Z10drawBitmapcss+0x1de>
     3c4:	e087      	b.n	4d6 <_Z10drawBitmapcss+0x2ee>
						by1 = -y;
     3c6:	425e      	negs	r6, r3
						y = 0;
     3c8:	2300      	movs	r3, #0
     3ca:	9303      	str	r3, [sp, #12]
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     3cc:	4c53      	ldr	r4, [pc, #332]	; (51c <_Z10drawBitmapcss+0x334>)
     3ce:	0020      	movs	r0, r4
     3d0:	f004 fe06 	bl	4fe0 <_ZNK12Adafruit_GFX5widthEv>
     3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     3d6:	4283      	cmp	r3, r0
     3d8:	db05      	blt.n	3e6 <_Z10drawBitmapcss+0x1fe>
     3da:	0020      	movs	r0, r4
     3dc:	f004 fe00 	bl	4fe0 <_ZNK12Adafruit_GFX5widthEv>
     3e0:	9b02      	ldr	r3, [sp, #8]
     3e2:	1ac3      	subs	r3, r0, r3
     3e4:	9304      	str	r3, [sp, #16]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     3e6:	4c4d      	ldr	r4, [pc, #308]	; (51c <_Z10drawBitmapcss+0x334>)
     3e8:	0020      	movs	r0, r4
     3ea:	f004 fdfc 	bl	4fe6 <_ZNK12Adafruit_GFX6heightEv>
     3ee:	4285      	cmp	r5, r0
     3f0:	db05      	blt.n	3fe <_Z10drawBitmapcss+0x216>
     3f2:	0020      	movs	r0, r4
     3f4:	f004 fdf7 	bl	4fe6 <_ZNK12Adafruit_GFX6heightEv>
     3f8:	9b03      	ldr	r3, [sp, #12]
     3fa:	1ac3      	subs	r3, r0, r3
     3fc:	9305      	str	r3, [sp, #20]
				rowSize = (bmpWidth * 3 + 3) & ~3;
     3fe:	2403      	movs	r4, #3
     400:	9b06      	ldr	r3, [sp, #24]
					tftDisplay.startWrite(); // Requires start/end transaction now
     402:	4d46      	ldr	r5, [pc, #280]	; (51c <_Z10drawBitmapcss+0x334>)
				rowSize = (bmpWidth * 3 + 3) & ~3;
     404:	3301      	adds	r3, #1
     406:	4363      	muls	r3, r4
					tftDisplay.startWrite(); // Requires start/end transaction now
     408:	0028      	movs	r0, r5
				rowSize = (bmpWidth * 3 + 3) & ~3;
     40a:	43a3      	bics	r3, r4
     40c:	9306      	str	r3, [sp, #24]
					tftDisplay.startWrite(); // Requires start/end transaction now
     40e:	f002 f9b1 	bl	2774 <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
     412:	4668      	mov	r0, sp
     414:	466b      	mov	r3, sp
     416:	466a      	mov	r2, sp
     418:	4669      	mov	r1, sp
     41a:	8a80      	ldrh	r0, [r0, #20]
     41c:	8a1b      	ldrh	r3, [r3, #16]
     41e:	8992      	ldrh	r2, [r2, #12]
     420:	8909      	ldrh	r1, [r1, #8]
     422:	9000      	str	r0, [sp, #0]
     424:	0028      	movs	r0, r5
     426:	f002 fc69 	bl	2cfc <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
						pos += bx1 * 3; // Factor in starting column (bx1)
     42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     42c:	3f01      	subs	r7, #1
     42e:	4363      	muls	r3, r4
     430:	9303      	str	r3, [sp, #12]
     432:	9b06      	ldr	r3, [sp, #24]
     434:	1bbf      	subs	r7, r7, r6
     436:	435f      	muls	r7, r3
     438:	9b07      	ldr	r3, [sp, #28]
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     43a:	3439      	adds	r4, #57	; 0x39
     43c:	18ff      	adds	r7, r7, r3
     43e:	9b06      	ldr	r3, [sp, #24]
     440:	435e      	muls	r6, r3
     442:	9b07      	ldr	r3, [sp, #28]
     444:	18f3      	adds	r3, r6, r3
					for (row = 0; row < h; row++) { // For each scanline...
     446:	2600      	movs	r6, #0
     448:	9302      	str	r3, [sp, #8]
     44a:	9b05      	ldr	r3, [sp, #20]
     44c:	42b3      	cmp	r3, r6
     44e:	dd4e      	ble.n	4ee <_Z10drawBitmapcss+0x306>
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
     450:	9b08      	ldr	r3, [sp, #32]
						pos = bmpImageoffset + (row + by1) * rowSize;
     452:	9d02      	ldr	r5, [sp, #8]
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
     454:	2b00      	cmp	r3, #0
     456:	d000      	beq.n	45a <_Z10drawBitmapcss+0x272>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
     458:	003d      	movs	r5, r7
						pos += bx1 * 3; // Factor in starting column (bx1)
     45a:	9b03      	ldr	r3, [sp, #12]
						if (bmpFile.position() != pos) { // Need seek?
     45c:	a80e      	add	r0, sp, #56	; 0x38
						pos += bx1 * 3; // Factor in starting column (bx1)
     45e:	18ed      	adds	r5, r5, r3
						if (bmpFile.position() != pos) { // Need seek?
     460:	f002 fdf1 	bl	3046 <_ZN5SDLib4File8positionEv>
     464:	4285      	cmp	r5, r0
     466:	d00b      	beq.n	480 <_Z10drawBitmapcss+0x298>
							tftDisplay.endWrite(); // End tftDisplay transaction
     468:	4c2c      	ldr	r4, [pc, #176]	; (51c <_Z10drawBitmapcss+0x334>)
     46a:	0020      	movs	r0, r4
     46c:	f002 f9a0 	bl	27b0 <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
     470:	0029      	movs	r1, r5
     472:	a80e      	add	r0, sp, #56	; 0x38
     474:	f002 fddd 	bl	3032 <_ZN5SDLib4File4seekEm>
							tftDisplay.startWrite(); // Start new tftDisplay transaction
     478:	0020      	movs	r0, r4
     47a:	f002 f97b 	bl	2774 <_ZN16Adafruit_ILI934110startWriteEv>
							buffidx = sizeof(sdbuffer); // Force buffer reload
     47e:	243c      	movs	r4, #60	; 0x3c
     480:	2500      	movs	r5, #0
						for (col = 0; col < w; col++) { // For each pixel...
     482:	9b04      	ldr	r3, [sp, #16]
     484:	42ab      	cmp	r3, r5
     486:	dd29      	ble.n	4dc <_Z10drawBitmapcss+0x2f4>
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
     488:	2c3b      	cmp	r4, #59	; 0x3b
     48a:	d90c      	bls.n	4a6 <_Z10drawBitmapcss+0x2be>
								tftDisplay.endWrite(); // End tftDisplay transaction
     48c:	4c23      	ldr	r4, [pc, #140]	; (51c <_Z10drawBitmapcss+0x334>)
     48e:	0020      	movs	r0, r4
     490:	f002 f98e 	bl	27b0 <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
     494:	223c      	movs	r2, #60	; 0x3c
     496:	a917      	add	r1, sp, #92	; 0x5c
     498:	a80e      	add	r0, sp, #56	; 0x38
     49a:	f002 fdc3 	bl	3024 <_ZN5SDLib4File4readEPvt>
								tftDisplay.startWrite(); // Start new tftDisplay transaction
     49e:	0020      	movs	r0, r4
     4a0:	f002 f968 	bl	2774 <_ZN16Adafruit_ILI934110startWriteEv>
								buffidx = 0; // Set index to beginning
     4a4:	2400      	movs	r4, #0
							g = sdbuffer[buffidx++];
     4a6:	1ca1      	adds	r1, r4, #2
							b = sdbuffer[buffidx++];
     4a8:	1c62      	adds	r2, r4, #1
     4aa:	a817      	add	r0, sp, #92	; 0x5c
							g = sdbuffer[buffidx++];
     4ac:	b2c9      	uxtb	r1, r1
     4ae:	b2d2      	uxtb	r2, r2
							b = sdbuffer[buffidx++];
     4b0:	5d03      	ldrb	r3, [r0, r4]
							g = sdbuffer[buffidx++];
     4b2:	5c82      	ldrb	r2, [r0, r2]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
     4b4:	5c41      	ldrb	r1, [r0, r1]
     4b6:	4819      	ldr	r0, [pc, #100]	; (51c <_Z10drawBitmapcss+0x334>)
     4b8:	f002 f98a 	bl	27d0 <_ZN16Adafruit_ILI93418color565Ehhh>
							r = sdbuffer[buffidx++];
     4bc:	3403      	adds	r4, #3
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
     4be:	0001      	movs	r1, r0
     4c0:	4816      	ldr	r0, [pc, #88]	; (51c <_Z10drawBitmapcss+0x334>)
							r = sdbuffer[buffidx++];
     4c2:	b2e4      	uxtb	r4, r4
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
     4c4:	f002 fc8e 	bl	2de4 <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
     4c8:	3501      	adds	r5, #1
     4ca:	e7da      	b.n	482 <_Z10drawBitmapcss+0x29a>
					w = bmpWidth; // Width/height of section to load/display
     4cc:	9b06      	ldr	r3, [sp, #24]
     4ce:	9304      	str	r3, [sp, #16]
					bx1 = by1 = 0; // UL coordinate in BMP file
     4d0:	2300      	movs	r3, #0
     4d2:	9309      	str	r3, [sp, #36]	; 0x24
     4d4:	e773      	b.n	3be <_Z10drawBitmapcss+0x1d6>
					h = bmpHeight;
     4d6:	9705      	str	r7, [sp, #20]
					bx1 = by1 = 0; // UL coordinate in BMP file
     4d8:	2600      	movs	r6, #0
     4da:	e777      	b.n	3cc <_Z10drawBitmapcss+0x1e4>
     4dc:	9a06      	ldr	r2, [sp, #24]
     4de:	9b06      	ldr	r3, [sp, #24]
     4e0:	4694      	mov	ip, r2
     4e2:	1aff      	subs	r7, r7, r3
     4e4:	9b02      	ldr	r3, [sp, #8]
					for (row = 0; row < h; row++) { // For each scanline...
     4e6:	3601      	adds	r6, #1
     4e8:	4463      	add	r3, ip
     4ea:	9302      	str	r3, [sp, #8]
     4ec:	e7ad      	b.n	44a <_Z10drawBitmapcss+0x262>
					tftDisplay.endWrite(); // End last tftDisplay transaction
     4ee:	480b      	ldr	r0, [pc, #44]	; (51c <_Z10drawBitmapcss+0x334>)
     4f0:	f002 f95e 	bl	27b0 <_ZN16Adafruit_ILI93418endWriteEv>
				Serial.print(F("Loaded in "));
     4f4:	4c0a      	ldr	r4, [pc, #40]	; (520 <_Z10drawBitmapcss+0x338>)
     4f6:	4916      	ldr	r1, [pc, #88]	; (550 <_Z10drawBitmapcss+0x368>)
     4f8:	0020      	movs	r0, r4
     4fa:	f000 fa84 	bl	a06 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(millis() - startTime);
     4fe:	f000 fa1b 	bl	938 <millis>
     502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     504:	220a      	movs	r2, #10
     506:	1ac1      	subs	r1, r0, r3
     508:	0020      	movs	r0, r4
     50a:	f000 fafe 	bl	b0a <_ZN5Print5printEmi>
				Serial.println(F(" ms"));
     50e:	4911      	ldr	r1, [pc, #68]	; (554 <_Z10drawBitmapcss+0x36c>)
     510:	0020      	movs	r0, r4
     512:	f000 fa8d 	bl	a30 <_ZN5Print7printlnEPK19__FlashStringHelper>
				goodBmp = true; // Supported BMP format -- proceed!
     516:	2501      	movs	r5, #1
     518:	e6c7      	b.n	2aa <_Z10drawBitmapcss+0xc2>
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	2000014c 	.word	0x2000014c
     520:	20000c50 	.word	0x20000c50
     524:	00005deb 	.word	0x00005deb
     528:	20000784 	.word	0x20000784
     52c:	00005d58 	.word	0x00005d58
     530:	00005d6f 	.word	0x00005d6f
     534:	00004d42 	.word	0x00004d42
     538:	00005dbf 	.word	0x00005dbf
     53c:	00005d7b 	.word	0x00005d7b
     540:	00005d87 	.word	0x00005d87
     544:	00005d96 	.word	0x00005d96
     548:	00005da4 	.word	0x00005da4
     54c:	00005dfb 	.word	0x00005dfb
     550:	00005db0 	.word	0x00005db0
     554:	00005dbb 	.word	0x00005dbb

00000558 <_Z7addMoveh8TS_Point5State>:
State addMove(uint8_t square, TS_Point marker, State player) {
     558:	b5f0      	push	{r4, r5, r6, r7, lr}
	Serial.print(F("addMove, player = "));
     55a:	4f19      	ldr	r7, [pc, #100]	; (5c0 <_Z7addMoveh8TS_Point5State+0x68>)
State addMove(uint8_t square, TS_Point marker, State player) {
     55c:	b085      	sub	sp, #20
     55e:	0004      	movs	r4, r0
     560:	b20d      	sxth	r5, r1
     562:	140e      	asrs	r6, r1, #16
	Serial.print(F("addMove, player = "));
     564:	0038      	movs	r0, r7
     566:	4917      	ldr	r1, [pc, #92]	; (5c4 <_Z7addMoveh8TS_Point5State+0x6c>)
State addMove(uint8_t square, TS_Point marker, State player) {
     568:	9301      	str	r3, [sp, #4]
	Serial.print(F("addMove, player = "));
     56a:	f000 fa4c 	bl	a06 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(player);
     56e:	220a      	movs	r2, #10
     570:	9901      	ldr	r1, [sp, #4]
     572:	0038      	movs	r0, r7
     574:	f000 fabf 	bl	af6 <_ZN5Print7printlnEii>
	if (player == cross) {
     578:	9b01      	ldr	r3, [sp, #4]
     57a:	2b02      	cmp	r3, #2
     57c:	d10f      	bne.n	59e <_Z7addMoveh8TS_Point5State+0x46>
		Serial.println(F("this might be a cross"));
     57e:	0038      	movs	r0, r7
		if (square % 2) {
     580:	2701      	movs	r7, #1
		Serial.println(F("this might be a cross"));
     582:	4911      	ldr	r1, [pc, #68]	; (5c8 <_Z7addMoveh8TS_Point5State+0x70>)
		if (square % 2) {
     584:	403c      	ands	r4, r7
		Serial.println(F("this might be a cross"));
     586:	f000 fa53 	bl	a30 <_ZN5Print7printlnEPK19__FlashStringHelper>
			bitmap = 'k';
     58a:	4260      	negs	r0, r4
     58c:	4160      	adcs	r0, r4
		drawBitmap(bitmap, marker.x, marker.y);
     58e:	0032      	movs	r2, r6
			bitmap = 'k';
     590:	306a      	adds	r0, #106	; 0x6a
		drawBitmap(bitmap, marker.x, marker.y);
     592:	0029      	movs	r1, r5
     594:	f7ff fe28 	bl	1e8 <_Z10drawBitmapcss>
		player = nought;
     598:	0038      	movs	r0, r7
}
     59a:	b005      	add	sp, #20
     59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Serial.println(F("this might be a nought"));
     59e:	490b      	ldr	r1, [pc, #44]	; (5cc <_Z7addMoveh8TS_Point5State+0x74>)
     5a0:	0038      	movs	r0, r7
     5a2:	f000 fa45 	bl	a30 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if (square % 2) {
     5a6:	2001      	movs	r0, #1
     5a8:	4004      	ands	r4, r0
			bitmap = 'i';
     5aa:	4260      	negs	r0, r4
     5ac:	4160      	adcs	r0, r4
		drawBitmap(bitmap, marker.x - 2, marker.y);
     5ae:	3d02      	subs	r5, #2
			bitmap = 'i';
     5b0:	3068      	adds	r0, #104	; 0x68
		drawBitmap(bitmap, marker.x - 2, marker.y);
     5b2:	b229      	sxth	r1, r5
     5b4:	0032      	movs	r2, r6
     5b6:	f7ff fe17 	bl	1e8 <_Z10drawBitmapcss>
		player = cross;
     5ba:	2002      	movs	r0, #2
     5bc:	e7ed      	b.n	59a <_Z7addMoveh8TS_Point5State+0x42>
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	20000c50 	.word	0x20000c50
     5c4:	00005e12 	.word	0x00005e12
     5c8:	00005e25 	.word	0x00005e25
     5cc:	00005e3b 	.word	0x00005e3b

000005d0 <_Z11updateScoreii>:
void updateScore(int noughtsScore, int crossesScore) {
     5d0:	b510      	push	{r4, lr}
     5d2:	000c      	movs	r4, r1
     5d4:	b086      	sub	sp, #24
	String s = (String) noughtsScore;
     5d6:	220a      	movs	r2, #10
     5d8:	0001      	movs	r1, r0
     5da:	4668      	mov	r0, sp
     5dc:	f001 ff68 	bl	24b0 <_ZN6StringC1Eih>
	char newScore = s.charAt(0);
     5e0:	2100      	movs	r1, #0
     5e2:	4668      	mov	r0, sp
     5e4:	f001 ff80 	bl	24e8 <_ZNK6String6charAtEj>
	drawBitmap(newScore, 95, 29);
     5e8:	221d      	movs	r2, #29
     5ea:	215f      	movs	r1, #95	; 0x5f
     5ec:	f7ff fdfc 	bl	1e8 <_Z10drawBitmapcss>
	s = (String) crossesScore;
     5f0:	220a      	movs	r2, #10
     5f2:	0021      	movs	r1, r4
     5f4:	a803      	add	r0, sp, #12
     5f6:	f001 ff5b 	bl	24b0 <_ZN6StringC1Eih>
     5fa:	a903      	add	r1, sp, #12
     5fc:	4668      	mov	r0, sp
     5fe:	f001 ff3e 	bl	247e <_ZN6StringaSEOS_>
     602:	a803      	add	r0, sp, #12
     604:	f001 fed3 	bl	23ae <_ZN6StringD1Ev>
	newScore = s.charAt(0);
     608:	2100      	movs	r1, #0
     60a:	4668      	mov	r0, sp
     60c:	f001 ff6c 	bl	24e8 <_ZNK6String6charAtEj>
	drawBitmap(newScore, 132, 28);
     610:	221c      	movs	r2, #28
     612:	2184      	movs	r1, #132	; 0x84
     614:	f7ff fde8 	bl	1e8 <_Z10drawBitmapcss>
	String s = (String) noughtsScore;
     618:	4668      	mov	r0, sp
     61a:	f001 fec8 	bl	23ae <_ZN6StringD1Ev>
}
     61e:	b006      	add	sp, #24
     620:	bd10      	pop	{r4, pc}
	...

00000624 <_Z4gamehh>:
State game(uint8_t noughtsScore, uint8_t crossesScore) {
     624:	b5f0      	push	{r4, r5, r6, r7, lr}
     626:	b08b      	sub	sp, #44	; 0x2c
	empty};
     628:	2209      	movs	r2, #9
     62a:	2100      	movs	r1, #0
     62c:	a807      	add	r0, sp, #28
     62e:	f005 fa4b 	bl	5ac8 <memset>
	TS_Point marker;
     632:	a803      	add	r0, sp, #12
     634:	f001 ff5f 	bl	24f6 <_ZN8TS_PointC1Ev>
	drawBitmap('d', 0, 80);
     638:	2250      	movs	r2, #80	; 0x50
     63a:	2100      	movs	r1, #0
     63c:	2064      	movs	r0, #100	; 0x64
     63e:	f7ff fdd3 	bl	1e8 <_Z10drawBitmapcss>
	uint8_t placedCounters = 0;
     642:	2300      	movs	r3, #0
	uint8_t square = 255;
     644:	24ff      	movs	r4, #255	; 0xff
					marker.x = 175;
     646:	27af      	movs	r7, #175	; 0xaf
	uint8_t placedCounters = 0;
     648:	9301      	str	r3, [sp, #4]
	State player = nought;
     64a:	3301      	adds	r3, #1
     64c:	9300      	str	r3, [sp, #0]
	while (placedCounters < 9) {
     64e:	9b01      	ldr	r3, [sp, #4]
     650:	2b08      	cmp	r3, #8
     652:	dd00      	ble.n	656 <_Z4gamehh+0x32>
     654:	e087      	b.n	766 <_Z4gamehh+0x142>
			if (!touchScreen.touched()) continue;
     656:	4846      	ldr	r0, [pc, #280]	; (770 <_Z4gamehh+0x14c>)
     658:	f002 f80c 	bl	2674 <_ZN15Adafruit_FT62067touchedEv>
     65c:	2800      	cmp	r0, #0
     65e:	d0fa      	beq.n	656 <_Z4gamehh+0x32>
			TS_Point point = getPoint();
     660:	ad05      	add	r5, sp, #20
     662:	0028      	movs	r0, r5
     664:	f7ff fd7e 	bl	164 <_Z8getPointv>
     668:	2202      	movs	r2, #2
     66a:	5ea9      	ldrsh	r1, [r5, r2]
     66c:	2200      	movs	r2, #0
     66e:	5eab      	ldrsh	r3, [r5, r2]
			if (point.y > 79 and point.y < 161) {
     670:	b28a      	uxth	r2, r1
     672:	0010      	movs	r0, r2
     674:	3850      	subs	r0, #80	; 0x50
     676:	2850      	cmp	r0, #80	; 0x50
     678:	d813      	bhi.n	6a2 <_Z4gamehh+0x7e>
     67a:	aa03      	add	r2, sp, #12
				if (point.x < 81) {
     67c:	2b50      	cmp	r3, #80	; 0x50
     67e:	dc05      	bgt.n	68c <_Z4gamehh+0x68>
					marker.x = 15;
     680:	230f      	movs	r3, #15
					square = 0;
     682:	2400      	movs	r4, #0
					marker.x = 15;
     684:	8013      	strh	r3, [r2, #0]
				marker.y = 95;
     686:	235f      	movs	r3, #95	; 0x5f
				marker.y = 255;
     688:	8053      	strh	r3, [r2, #2]
     68a:	e014      	b.n	6b6 <_Z4gamehh+0x92>
					} else if (point.x < 161) {
     68c:	2ba0      	cmp	r3, #160	; 0xa0
     68e:	dc03      	bgt.n	698 <_Z4gamehh+0x74>
					marker.x = 95;
     690:	235f      	movs	r3, #95	; 0x5f
					square = 1;
     692:	2401      	movs	r4, #1
					marker.x = 95;
     694:	8013      	strh	r3, [r2, #0]
     696:	e7f6      	b.n	686 <_Z4gamehh+0x62>
					} else if (point.x < 240) {
     698:	2bef      	cmp	r3, #239	; 0xef
     69a:	dcf4      	bgt.n	686 <_Z4gamehh+0x62>
					marker.x = 175;
     69c:	8017      	strh	r7, [r2, #0]
					square = 2;
     69e:	2402      	movs	r4, #2
     6a0:	e7f1      	b.n	686 <_Z4gamehh+0x62>
				} else if (point.y > 160 and point.y < 241) {
     6a2:	3aa1      	subs	r2, #161	; 0xa1
     6a4:	2a4f      	cmp	r2, #79	; 0x4f
     6a6:	d849      	bhi.n	73c <_Z4gamehh+0x118>
     6a8:	aa03      	add	r2, sp, #12
				if (point.x < 81) {
     6aa:	2b50      	cmp	r3, #80	; 0x50
     6ac:	dc3b      	bgt.n	726 <_Z4gamehh+0x102>
					marker.x = 15;
     6ae:	230f      	movs	r3, #15
					square = 3;
     6b0:	2403      	movs	r4, #3
					marker.x = 15;
     6b2:	8013      	strh	r3, [r2, #0]
				marker.y = 175;
     6b4:	8057      	strh	r7, [r2, #2]
			if (!(square == 255)) break;
     6b6:	2cff      	cmp	r4, #255	; 0xff
     6b8:	d0cd      	beq.n	656 <_Z4gamehh+0x32>
		if (!(boardState[square] == empty)) continue;
     6ba:	ae07      	add	r6, sp, #28
     6bc:	5d35      	ldrb	r5, [r6, r4]
     6be:	2d00      	cmp	r5, #0
     6c0:	d1c5      	bne.n	64e <_Z4gamehh+0x2a>
		boardState[square] = player;
     6c2:	466b      	mov	r3, sp
     6c4:	781b      	ldrb	r3, [r3, #0]
		player = addMove(square, marker, player);
     6c6:	9a04      	ldr	r2, [sp, #16]
		boardState[square] = player;
     6c8:	5533      	strb	r3, [r6, r4]
		player = addMove(square, marker, player);
     6ca:	9903      	ldr	r1, [sp, #12]
     6cc:	9b00      	ldr	r3, [sp, #0]
     6ce:	0020      	movs	r0, r4
     6d0:	f7ff ff42 	bl	558 <_Z7addMoveh8TS_Point5State>
		placedCounters++;
     6d4:	9b01      	ldr	r3, [sp, #4]
			if (boardState[winIndexes[i][0]] == boardState[winIndexes[i][1]]
     6d6:	4a27      	ldr	r2, [pc, #156]	; (774 <_Z4gamehh+0x150>)
		placedCounters++;
     6d8:	3301      	adds	r3, #1
     6da:	b2db      	uxtb	r3, r3
     6dc:	9301      	str	r3, [sp, #4]
			if (boardState[winIndexes[i][0]] == boardState[winIndexes[i][1]]
     6de:	4694      	mov	ip, r2
		placedCounters++;
     6e0:	002b      	movs	r3, r5
		player = addMove(square, marker, player);
     6e2:	9000      	str	r0, [sp, #0]
			if (boardState[winIndexes[i][0]] == boardState[winIndexes[i][1]]
     6e4:	4662      	mov	r2, ip
     6e6:	5c9a      	ldrb	r2, [r3, r2]
     6e8:	5cb0      	ldrb	r0, [r6, r2]
     6ea:	4662      	mov	r2, ip
     6ec:	18d1      	adds	r1, r2, r3
     6ee:	784a      	ldrb	r2, [r1, #1]
     6f0:	5cb2      	ldrb	r2, [r6, r2]
     6f2:	4282      	cmp	r2, r0
     6f4:	d104      	bne.n	700 <_Z4gamehh+0xdc>
			and boardState[winIndexes[i][0]] == boardState[winIndexes[i][2]]) {
     6f6:	7889      	ldrb	r1, [r1, #2]
     6f8:	5c71      	ldrb	r1, [r6, r1]
     6fa:	4291      	cmp	r1, r2
     6fc:	d100      	bne.n	700 <_Z4gamehh+0xdc>
     6fe:	000d      	movs	r5, r1
     700:	3303      	adds	r3, #3
		for (uint8_t i = 0; i < 8; i++) {
     702:	2b18      	cmp	r3, #24
     704:	d1ee      	bne.n	6e4 <_Z4gamehh+0xc0>
		Serial.print(F("winner = "));
     706:	4e1c      	ldr	r6, [pc, #112]	; (778 <_Z4gamehh+0x154>)
     708:	491c      	ldr	r1, [pc, #112]	; (77c <_Z4gamehh+0x158>)
     70a:	0030      	movs	r0, r6
     70c:	f000 f97b 	bl	a06 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(winner);
     710:	220a      	movs	r2, #10
     712:	0029      	movs	r1, r5
     714:	0030      	movs	r0, r6
     716:	f000 f9ee 	bl	af6 <_ZN5Print7printlnEii>
		if (!(winner == empty)) break;
     71a:	2d00      	cmp	r5, #0
     71c:	d124      	bne.n	768 <_Z4gamehh+0x144>
		delay(100);
     71e:	2064      	movs	r0, #100	; 0x64
     720:	f000 f910 	bl	944 <delay>
     724:	e793      	b.n	64e <_Z4gamehh+0x2a>
					} else if (point.x < 161) {
     726:	2ba0      	cmp	r3, #160	; 0xa0
     728:	dc03      	bgt.n	732 <_Z4gamehh+0x10e>
					marker.x = 95;
     72a:	235f      	movs	r3, #95	; 0x5f
					square = 4;
     72c:	2404      	movs	r4, #4
					marker.x = 95;
     72e:	8013      	strh	r3, [r2, #0]
     730:	e7c0      	b.n	6b4 <_Z4gamehh+0x90>
					} else if (point.x < 240) {
     732:	2bef      	cmp	r3, #239	; 0xef
     734:	dcbe      	bgt.n	6b4 <_Z4gamehh+0x90>
					marker.x = 175;
     736:	8017      	strh	r7, [r2, #0]
					square = 5;
     738:	2405      	movs	r4, #5
     73a:	e7bb      	b.n	6b4 <_Z4gamehh+0x90>
				} else if (point.y > 240) {
     73c:	29f0      	cmp	r1, #240	; 0xf0
     73e:	ddba      	ble.n	6b6 <_Z4gamehh+0x92>
     740:	aa03      	add	r2, sp, #12
				if (point.x < 81) {
     742:	2b50      	cmp	r3, #80	; 0x50
     744:	dc04      	bgt.n	750 <_Z4gamehh+0x12c>
					marker.x = 15;
     746:	230f      	movs	r3, #15
					square = 6;
     748:	2406      	movs	r4, #6
					marker.x = 15;
     74a:	8013      	strh	r3, [r2, #0]
				marker.y = 255;
     74c:	23ff      	movs	r3, #255	; 0xff
     74e:	e79b      	b.n	688 <_Z4gamehh+0x64>
					} else if (point.x < 161) {
     750:	2ba0      	cmp	r3, #160	; 0xa0
     752:	dc03      	bgt.n	75c <_Z4gamehh+0x138>
					marker.x = 95;
     754:	235f      	movs	r3, #95	; 0x5f
					square = 7;
     756:	2407      	movs	r4, #7
					marker.x = 95;
     758:	8013      	strh	r3, [r2, #0]
     75a:	e7f7      	b.n	74c <_Z4gamehh+0x128>
					} else if (point.x < 240) {
     75c:	2bef      	cmp	r3, #239	; 0xef
     75e:	dcf5      	bgt.n	74c <_Z4gamehh+0x128>
					marker.x = 175;
     760:	8017      	strh	r7, [r2, #0]
					square = 8;
     762:	2408      	movs	r4, #8
     764:	e7f2      	b.n	74c <_Z4gamehh+0x128>
     766:	2500      	movs	r5, #0
}
     768:	0028      	movs	r0, r5
     76a:	b00b      	add	sp, #44	; 0x2c
     76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	200001b0 	.word	0x200001b0
     774:	20000000 	.word	0x20000000
     778:	20000c50 	.word	0x20000c50
     77c:	00005e08 	.word	0x00005e08

00000780 <_Z9playMatchi>:
void playMatch(int maxGames) {
     780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	drawBitmap('a', 0, 0);
     782:	2200      	movs	r2, #0
void playMatch(int maxGames) {
     784:	9001      	str	r0, [sp, #4]
	drawBitmap('a', 0, 0);
     786:	0011      	movs	r1, r2
     788:	2061      	movs	r0, #97	; 0x61
     78a:	f7ff fd2d 	bl	1e8 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
     78e:	2220      	movs	r2, #32
     790:	2176      	movs	r1, #118	; 0x76
     792:	2063      	movs	r0, #99	; 0x63
     794:	f7ff fd28 	bl	1e8 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
     798:	2100      	movs	r1, #0
	uint8_t gamesPlayed = 0;
     79a:	2400      	movs	r4, #0
	updateScore(noughtsScore, crossesScore);
     79c:	0008      	movs	r0, r1
     79e:	f7ff ff17 	bl	5d0 <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
     7a2:	220a      	movs	r2, #10
     7a4:	2151      	movs	r1, #81	; 0x51
     7a6:	2062      	movs	r0, #98	; 0x62
     7a8:	f7ff fd1e 	bl	1e8 <_Z10drawBitmapcss>
	uint8_t crossesScore = 0;
     7ac:	0026      	movs	r6, r4
	uint8_t noughtsScore = 0;
     7ae:	0025      	movs	r5, r4
	while (gamesPlayed < maxGames) {
     7b0:	9b01      	ldr	r3, [sp, #4]
     7b2:	429c      	cmp	r4, r3
     7b4:	da24      	bge.n	800 <_Z9playMatchi+0x80>
		State winner = game(noughtsScore, crossesScore);
     7b6:	0031      	movs	r1, r6
     7b8:	0028      	movs	r0, r5
     7ba:	f7ff ff33 	bl	624 <_Z4gamehh>
		gamesPlayed++;
     7be:	3401      	adds	r4, #1
     7c0:	b2e4      	uxtb	r4, r4
		switch (winner) {
     7c2:	2801      	cmp	r0, #1
     7c4:	d018      	beq.n	7f8 <_Z9playMatchi+0x78>
     7c6:	2800      	cmp	r0, #0
     7c8:	d010      	beq.n	7ec <_Z9playMatchi+0x6c>
     7ca:	2802      	cmp	r0, #2
     7cc:	d010      	beq.n	7f0 <_Z9playMatchi+0x70>
		drawBitmap(bitmap, 0, 110);
     7ce:	2100      	movs	r1, #0
     7d0:	0038      	movs	r0, r7
     7d2:	226e      	movs	r2, #110	; 0x6e
     7d4:	f7ff fd08 	bl	1e8 <_Z10drawBitmapcss>
		updateScore(noughtsScore, crossesScore);
     7d8:	0031      	movs	r1, r6
     7da:	0028      	movs	r0, r5
     7dc:	f7ff fef8 	bl	5d0 <_Z11updateScoreii>
		if (touchScreen.touched()) break;
     7e0:	4808      	ldr	r0, [pc, #32]	; (804 <_Z9playMatchi+0x84>)
     7e2:	f001 ff47 	bl	2674 <_ZN15Adafruit_FT62067touchedEv>
     7e6:	2800      	cmp	r0, #0
     7e8:	d0fa      	beq.n	7e0 <_Z9playMatchi+0x60>
     7ea:	e7e1      	b.n	7b0 <_Z9playMatchi+0x30>
			bitmap = 'f';
     7ec:	2766      	movs	r7, #102	; 0x66
     7ee:	e7ee      	b.n	7ce <_Z9playMatchi+0x4e>
			crossesScore++;
     7f0:	3601      	adds	r6, #1
     7f2:	b2f6      	uxtb	r6, r6
			bitmap = 'e';
     7f4:	2765      	movs	r7, #101	; 0x65
			break;
     7f6:	e7ea      	b.n	7ce <_Z9playMatchi+0x4e>
			noughtsScore++;
     7f8:	3501      	adds	r5, #1
     7fa:	b2ed      	uxtb	r5, r5
			bitmap = 'g';
     7fc:	2767      	movs	r7, #103	; 0x67
			break;
     7fe:	e7e6      	b.n	7ce <_Z9playMatchi+0x4e>
}
     800:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	200001b0 	.word	0x200001b0

00000808 <_Z11startScreenv>:
void startScreen() {
     808:	b507      	push	{r0, r1, r2, lr}
	drawBitmap('l', 0, 0);
     80a:	2200      	movs	r2, #0
     80c:	206c      	movs	r0, #108	; 0x6c
     80e:	0011      	movs	r1, r2
     810:	f7ff fcea 	bl	1e8 <_Z10drawBitmapcss>
		if (touchScreen.touched()) {
     814:	480a      	ldr	r0, [pc, #40]	; (840 <_Z11startScreenv+0x38>)
     816:	f001 ff2d 	bl	2674 <_ZN15Adafruit_FT62067touchedEv>
     81a:	2800      	cmp	r0, #0
     81c:	d0fa      	beq.n	814 <_Z11startScreenv+0xc>
			TS_Point point = getPoint();
     81e:	4668      	mov	r0, sp
     820:	f7ff fca0 	bl	164 <_Z8getPointv>
			if (point.x > 24 and point.x < 216 and point.y > 204 and point.y < 256) {
     824:	466b      	mov	r3, sp
     826:	881b      	ldrh	r3, [r3, #0]
     828:	3b19      	subs	r3, #25
     82a:	2bbe      	cmp	r3, #190	; 0xbe
     82c:	d8f2      	bhi.n	814 <_Z11startScreenv+0xc>
     82e:	466b      	mov	r3, sp
     830:	885b      	ldrh	r3, [r3, #2]
     832:	3bcd      	subs	r3, #205	; 0xcd
     834:	2b32      	cmp	r3, #50	; 0x32
     836:	d8ed      	bhi.n	814 <_Z11startScreenv+0xc>
	playMatch(maxGames);
     838:	2005      	movs	r0, #5
     83a:	f7ff ffa1 	bl	780 <_Z9playMatchi>
}
     83e:	bd07      	pop	{r0, r1, r2, pc}
     840:	200001b0 	.word	0x200001b0

00000844 <setup>:
	Serial.begin(9600);
     844:	2196      	movs	r1, #150	; 0x96
void setup() {
     846:	b510      	push	{r4, lr}
	Serial.begin(9600);
     848:	4c12      	ldr	r4, [pc, #72]	; (894 <setup+0x50>)
     84a:	0189      	lsls	r1, r1, #6
     84c:	0020      	movs	r0, r4
     84e:	f000 fa79 	bl	d44 <_ZN4Uart5beginEm>
	tftDisplay.begin();
     852:	2100      	movs	r1, #0
     854:	4810      	ldr	r0, [pc, #64]	; (898 <setup+0x54>)
     856:	f002 f837 	bl	28c8 <_ZN16Adafruit_ILI93415beginEm>
	if (!touchScreen.begin()) {
     85a:	2180      	movs	r1, #128	; 0x80
     85c:	480f      	ldr	r0, [pc, #60]	; (89c <setup+0x58>)
     85e:	f001 fee7 	bl	2630 <_ZN15Adafruit_FT62065beginEh>
     862:	2800      	cmp	r0, #0
     864:	d108      	bne.n	878 <setup+0x34>
		Serial.println(F("Couldn't start FT6206 touchscreen controller"));
     866:	490e      	ldr	r1, [pc, #56]	; (8a0 <setup+0x5c>)
     868:	0020      	movs	r0, r4
     86a:	f000 f8e1 	bl	a30 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Driver might not have been found"));
     86e:	490d      	ldr	r1, [pc, #52]	; (8a4 <setup+0x60>)
     870:	0020      	movs	r0, r4
     872:	f000 f8dd 	bl	a30 <_ZN5Print7printlnEPK19__FlashStringHelper>
     876:	e7fe      	b.n	876 <setup+0x32>
	if (!SD.begin(SD_CS)) {
     878:	2104      	movs	r1, #4
     87a:	480b      	ldr	r0, [pc, #44]	; (8a8 <setup+0x64>)
     87c:	f002 fc28 	bl	30d0 <_ZN5SDLib7SDClass5beginEh>
     880:	2800      	cmp	r0, #0
     882:	d103      	bne.n	88c <setup+0x48>
		Serial.println(F("Failed to initialise SD card"));
     884:	4909      	ldr	r1, [pc, #36]	; (8ac <setup+0x68>)
     886:	0020      	movs	r0, r4
     888:	f000 f8d2 	bl	a30 <_ZN5Print7printlnEPK19__FlashStringHelper>
	startScreen();
     88c:	f7ff ffbc 	bl	808 <_Z11startScreenv>
}
     890:	bd10      	pop	{r4, pc}
     892:	46c0      	nop			; (mov r8, r8)
     894:	20000c50 	.word	0x20000c50
     898:	2000014c 	.word	0x2000014c
     89c:	200001b0 	.word	0x200001b0
     8a0:	00005e59 	.word	0x00005e59
     8a4:	00005e86 	.word	0x00005e86
     8a8:	20000784 	.word	0x20000784
     8ac:	00005ea7 	.word	0x00005ea7

000008b0 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     8b0:	be03      	bkpt	0x0003
     8b2:	e7fe      	b.n	8b2 <Dummy_Handler+0x2>

000008b4 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     8b4:	4b03      	ldr	r3, [pc, #12]	; (8c4 <USB_Handler+0x10>)
{
     8b6:	b510      	push	{r4, lr}
  if (usb_isr)
     8b8:	681b      	ldr	r3, [r3, #0]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d000      	beq.n	8c0 <USB_Handler+0xc>
    usb_isr();
     8be:	4798      	blx	r3
}
     8c0:	bd10      	pop	{r4, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	200001c0 	.word	0x200001c0

000008c8 <Reset_Handler>:
{
     8c8:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     8ca:	490f      	ldr	r1, [pc, #60]	; (908 <Reset_Handler+0x40>)
     8cc:	4c0f      	ldr	r4, [pc, #60]	; (90c <Reset_Handler+0x44>)
     8ce:	42a1      	cmp	r1, r4
     8d0:	d104      	bne.n	8dc <Reset_Handler+0x14>
  SystemInit();
     8d2:	f000 f985 	bl	be0 <SystemInit>
  main();
     8d6:	f000 f851 	bl	97c <main>
     8da:	e7fe      	b.n	8da <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     8dc:	4d0c      	ldr	r5, [pc, #48]	; (910 <Reset_Handler+0x48>)
     8de:	2300      	movs	r3, #0
     8e0:	428d      	cmp	r5, r1
     8e2:	d0f6      	beq.n	8d2 <Reset_Handler+0xa>
     8e4:	18ca      	adds	r2, r1, r3
     8e6:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     8e8:	42a2      	cmp	r2, r4
     8ea:	d305      	bcc.n	8f8 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     8ec:	4290      	cmp	r0, r2
     8ee:	d0f0      	beq.n	8d2 <Reset_Handler+0xa>
     8f0:	4b08      	ldr	r3, [pc, #32]	; (914 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     8f2:	4909      	ldr	r1, [pc, #36]	; (918 <Reset_Handler+0x50>)
      *pDest = 0;
     8f4:	2200      	movs	r2, #0
     8f6:	e004      	b.n	902 <Reset_Handler+0x3a>
      *pDest = *pSrc;
     8f8:	6800      	ldr	r0, [r0, #0]
     8fa:	3304      	adds	r3, #4
     8fc:	6010      	str	r0, [r2, #0]
     8fe:	e7f1      	b.n	8e4 <Reset_Handler+0x1c>
      *pDest = 0;
     900:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     902:	428b      	cmp	r3, r1
     904:	d3fc      	bcc.n	900 <Reset_Handler+0x38>
     906:	e7e4      	b.n	8d2 <Reset_Handler+0xa>
     908:	20000000 	.word	0x20000000
     90c:	20000130 	.word	0x20000130
     910:	00006a70 	.word	0x00006a70
     914:	20000130 	.word	0x20000130
     918:	20000e18 	.word	0x20000e18

0000091c <SysTick_Handler>:
{
     91c:	b510      	push	{r4, lr}
  if (sysTickHook())
     91e:	f000 f82a 	bl	976 <sysTickHook>
     922:	2800      	cmp	r0, #0
     924:	d101      	bne.n	92a <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     926:	f000 f81b 	bl	960 <SysTick_DefaultHandler>
}
     92a:	bd10      	pop	{r4, pc}

0000092c <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     92c:	4b01      	ldr	r3, [pc, #4]	; (934 <USB_SetHandler+0x8>)
     92e:	6018      	str	r0, [r3, #0]
}
     930:	4770      	bx	lr
     932:	46c0      	nop			; (mov r8, r8)
     934:	200001c0 	.word	0x200001c0

00000938 <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
     938:	4b01      	ldr	r3, [pc, #4]	; (940 <millis+0x8>)
     93a:	6818      	ldr	r0, [r3, #0]
}
     93c:	4770      	bx	lr
     93e:	46c0      	nop			; (mov r8, r8)
     940:	200001c4 	.word	0x200001c4

00000944 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
     944:	b570      	push	{r4, r5, r6, lr}
     946:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
     948:	d007      	beq.n	95a <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     94a:	4d04      	ldr	r5, [pc, #16]	; (95c <delay+0x18>)
     94c:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
     94e:	f000 f811 	bl	974 <yield>
  } while ( _ulTickCount - start < ms ) ;
     952:	682b      	ldr	r3, [r5, #0]
     954:	1b9b      	subs	r3, r3, r6
     956:	429c      	cmp	r4, r3
     958:	d8f9      	bhi.n	94e <delay+0xa>
}
     95a:	bd70      	pop	{r4, r5, r6, pc}
     95c:	200001c4 	.word	0x200001c4

00000960 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     960:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     962:	4a03      	ldr	r2, [pc, #12]	; (970 <SysTick_DefaultHandler+0x10>)
     964:	6813      	ldr	r3, [r2, #0]
     966:	3301      	adds	r3, #1
     968:	6013      	str	r3, [r2, #0]
  tickReset();
     96a:	f000 f8fd 	bl	b68 <tickReset>
}
     96e:	bd10      	pop	{r4, pc}
     970:	200001c4 	.word	0x200001c4

00000974 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     974:	4770      	bx	lr

00000976 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     976:	2000      	movs	r0, #0
     978:	4770      	bx	lr

0000097a <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     97a:	4770      	bx	lr

0000097c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     97c:	b510      	push	{r4, lr}
  init();
     97e:	f001 fb8b 	bl	2098 <init>

  __libc_init_array();
     982:	f005 f851 	bl	5a28 <__libc_init_array>

  initVariant();
     986:	f7ff fff8 	bl	97a <_Z11initVariantv>

  delay(1);
     98a:	2001      	movs	r0, #1
     98c:	f7ff ffda 	bl	944 <delay>
#if defined(USBCON)
  USBDevice.init();
     990:	4c08      	ldr	r4, [pc, #32]	; (9b4 <main+0x38>)
     992:	0020      	movs	r0, r4
     994:	f000 fe10 	bl	15b8 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     998:	0020      	movs	r0, r4
     99a:	f000 fe85 	bl	16a8 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     99e:	f7ff ff51 	bl	844 <setup>

  for (;;)
  {
    loop();
     9a2:	f7ff fbfd 	bl	1a0 <loop>
    if (serialEventRun) serialEventRun();
     9a6:	4b04      	ldr	r3, [pc, #16]	; (9b8 <main+0x3c>)
     9a8:	2b00      	cmp	r3, #0
     9aa:	d0fa      	beq.n	9a2 <main+0x26>
     9ac:	e000      	b.n	9b0 <main+0x34>
     9ae:	bf00      	nop
     9b0:	e7f7      	b.n	9a2 <main+0x26>
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	200001c8 	.word	0x200001c8
     9b8:	00000000 	.word	0x00000000

000009bc <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     9bc:	2000      	movs	r0, #0
     9be:	4770      	bx	lr

000009c0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     9c0:	4770      	bx	lr

000009c2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     9c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     9c4:	0006      	movs	r6, r0
     9c6:	000d      	movs	r5, r1
     9c8:	000c      	movs	r4, r1
     9ca:	188b      	adds	r3, r1, r2
     9cc:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
     9ce:	9b01      	ldr	r3, [sp, #4]
     9d0:	1b67      	subs	r7, r4, r5
     9d2:	429c      	cmp	r4, r3
     9d4:	d007      	beq.n	9e6 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
     9d6:	6833      	ldr	r3, [r6, #0]
     9d8:	7821      	ldrb	r1, [r4, #0]
     9da:	681b      	ldr	r3, [r3, #0]
     9dc:	0030      	movs	r0, r6
     9de:	4798      	blx	r3
     9e0:	3401      	adds	r4, #1
     9e2:	2800      	cmp	r0, #0
     9e4:	d1f3      	bne.n	9ce <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     9e6:	0038      	movs	r0, r7
     9e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000009ea <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
     9ea:	b570      	push	{r4, r5, r6, lr}
     9ec:	0005      	movs	r5, r0
     9ee:	000c      	movs	r4, r1
      if (str == NULL) return 0;
     9f0:	1e08      	subs	r0, r1, #0
     9f2:	d007      	beq.n	a04 <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
     9f4:	f005 f94a 	bl	5c8c <strlen>
     9f8:	682b      	ldr	r3, [r5, #0]
     9fa:	0002      	movs	r2, r0
     9fc:	685b      	ldr	r3, [r3, #4]
     9fe:	0021      	movs	r1, r4
     a00:	0028      	movs	r0, r5
     a02:	4798      	blx	r3
    }
     a04:	bd70      	pop	{r4, r5, r6, pc}

00000a06 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
     a06:	b510      	push	{r4, lr}
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     a08:	f7ff ffef 	bl	9ea <_ZN5Print5writeEPKc>
}
     a0c:	bd10      	pop	{r4, pc}

00000a0e <_ZN5Print5printEPKc>:
{
     a0e:	b510      	push	{r4, lr}
  return write(str);
     a10:	f7ff ffeb 	bl	9ea <_ZN5Print5writeEPKc>
}
     a14:	bd10      	pop	{r4, pc}

00000a16 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     a16:	b510      	push	{r4, lr}
  return write(c);
     a18:	6803      	ldr	r3, [r0, #0]
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	4798      	blx	r3
}
     a1e:	bd10      	pop	{r4, pc}

00000a20 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     a20:	b510      	push	{r4, lr}
  return write("\r\n");
     a22:	4902      	ldr	r1, [pc, #8]	; (a2c <_ZN5Print7printlnEv+0xc>)
     a24:	f7ff ffe1 	bl	9ea <_ZN5Print5writeEPKc>
}
     a28:	bd10      	pop	{r4, pc}
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	00005ec4 	.word	0x00005ec4

00000a30 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
     a30:	b570      	push	{r4, r5, r6, lr}
     a32:	0004      	movs	r4, r0
  return write(str);
     a34:	f7ff ffd9 	bl	9ea <_ZN5Print5writeEPKc>
     a38:	0005      	movs	r5, r0
  n += println();
     a3a:	0020      	movs	r0, r4
     a3c:	f7ff fff0 	bl	a20 <_ZN5Print7printlnEv>
     a40:	1940      	adds	r0, r0, r5
}
     a42:	bd70      	pop	{r4, r5, r6, pc}

00000a44 <_ZN5Print7printlnEc>:
  n += println();
  return n;
}

size_t Print::println(char c)
{
     a44:	b570      	push	{r4, r5, r6, lr}
     a46:	0005      	movs	r5, r0
  size_t n = print(c);
     a48:	f7ff ffe5 	bl	a16 <_ZN5Print5printEc>
     a4c:	0004      	movs	r4, r0
  n += println();
     a4e:	0028      	movs	r0, r5
     a50:	f7ff ffe6 	bl	a20 <_ZN5Print7printlnEv>
     a54:	1820      	adds	r0, r4, r0
  return n;
}
     a56:	bd70      	pop	{r4, r5, r6, pc}

00000a58 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     a58:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5a:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     a5c:	2200      	movs	r2, #0
{
     a5e:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
     a60:	ab02      	add	r3, sp, #8
     a62:	3305      	adds	r3, #5
{
     a64:	9001      	str	r0, [sp, #4]
     a66:	000d      	movs	r5, r1
  *str = '\0';
     a68:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     a6a:	2e01      	cmp	r6, #1
     a6c:	dc00      	bgt.n	a70 <_ZN5Print11printNumberEmh+0x18>
     a6e:	260a      	movs	r6, #10
     a70:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
     a72:	0028      	movs	r0, r5
     a74:	0031      	movs	r1, r6
     a76:	f004 fee7 	bl	5848 <__aeabi_uidivmod>
     a7a:	000f      	movs	r7, r1
     a7c:	b2cb      	uxtb	r3, r1
    n /= base;
     a7e:	0028      	movs	r0, r5
     a80:	0031      	movs	r1, r6
    char c = n % base;
     a82:	9300      	str	r3, [sp, #0]
    n /= base;
     a84:	f004 fe5a 	bl	573c <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     a88:	b2fb      	uxtb	r3, r7
     a8a:	3337      	adds	r3, #55	; 0x37
    n /= base;
     a8c:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     a8e:	3c01      	subs	r4, #1
     a90:	b2db      	uxtb	r3, r3
     a92:	2f09      	cmp	r7, #9
     a94:	d802      	bhi.n	a9c <_ZN5Print11printNumberEmh+0x44>
     a96:	9b00      	ldr	r3, [sp, #0]
     a98:	3330      	adds	r3, #48	; 0x30
     a9a:	b2db      	uxtb	r3, r3
     a9c:	7023      	strb	r3, [r4, #0]
  } while(n);
     a9e:	2d00      	cmp	r5, #0
     aa0:	d1e7      	bne.n	a72 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
     aa2:	0021      	movs	r1, r4
     aa4:	9801      	ldr	r0, [sp, #4]
     aa6:	f7ff ffa0 	bl	9ea <_ZN5Print5writeEPKc>
}
     aaa:	b00d      	add	sp, #52	; 0x34
     aac:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000aae <_ZN5Print5printEli>:
{
     aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ab0:	0006      	movs	r6, r0
     ab2:	000c      	movs	r4, r1
     ab4:	1e15      	subs	r5, r2, #0
  if (base == 0) {
     ab6:	d104      	bne.n	ac2 <_ZN5Print5printEli+0x14>
    return write(n);
     ab8:	6803      	ldr	r3, [r0, #0]
     aba:	b2c9      	uxtb	r1, r1
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	4798      	blx	r3
}
     ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return printNumber(n, base);
     ac2:	b2d2      	uxtb	r2, r2
  } else if (base == 10) {
     ac4:	2d0a      	cmp	r5, #10
     ac6:	d10d      	bne.n	ae4 <_ZN5Print5printEli+0x36>
    return printNumber(n, 10);
     ac8:	002a      	movs	r2, r5
    if (n < 0) {
     aca:	2900      	cmp	r1, #0
     acc:	da0a      	bge.n	ae4 <_ZN5Print5printEli+0x36>
      int t = print('-');
     ace:	212d      	movs	r1, #45	; 0x2d
     ad0:	f7ff ffa1 	bl	a16 <_ZN5Print5printEc>
      n = -n;
     ad4:	4261      	negs	r1, r4
      int t = print('-');
     ad6:	0007      	movs	r7, r0
      return printNumber(n, 10) + t;
     ad8:	002a      	movs	r2, r5
     ada:	0030      	movs	r0, r6
     adc:	f7ff ffbc 	bl	a58 <_ZN5Print11printNumberEmh>
     ae0:	1838      	adds	r0, r7, r0
     ae2:	e7ed      	b.n	ac0 <_ZN5Print5printEli+0x12>
    return printNumber(n, base);
     ae4:	0021      	movs	r1, r4
     ae6:	0030      	movs	r0, r6
     ae8:	f7ff ffb6 	bl	a58 <_ZN5Print11printNumberEmh>
     aec:	e7e8      	b.n	ac0 <_ZN5Print5printEli+0x12>

00000aee <_ZN5Print5printEii>:
{
     aee:	b510      	push	{r4, lr}
  return print((long) n, base);
     af0:	f7ff ffdd 	bl	aae <_ZN5Print5printEli>
}
     af4:	bd10      	pop	{r4, pc}

00000af6 <_ZN5Print7printlnEii>:
{
     af6:	b570      	push	{r4, r5, r6, lr}
     af8:	0004      	movs	r4, r0
  return print((long) n, base);
     afa:	f7ff ffd8 	bl	aae <_ZN5Print5printEli>
     afe:	0005      	movs	r5, r0
  n += println();
     b00:	0020      	movs	r0, r4
     b02:	f7ff ff8d 	bl	a20 <_ZN5Print7printlnEv>
     b06:	1940      	adds	r0, r0, r5
}
     b08:	bd70      	pop	{r4, r5, r6, pc}

00000b0a <_ZN5Print5printEmi>:
{
     b0a:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
     b0c:	2a00      	cmp	r2, #0
     b0e:	d104      	bne.n	b1a <_ZN5Print5printEmi+0x10>
     b10:	6803      	ldr	r3, [r0, #0]
     b12:	b2c9      	uxtb	r1, r1
     b14:	681b      	ldr	r3, [r3, #0]
     b16:	4798      	blx	r3
}
     b18:	bd10      	pop	{r4, pc}
  else return printNumber(n, base);
     b1a:	b2d2      	uxtb	r2, r2
     b1c:	f7ff ff9c 	bl	a58 <_ZN5Print11printNumberEmh>
     b20:	e7fa      	b.n	b18 <_ZN5Print5printEmi+0xe>

00000b22 <_ZN5Print7printlnEhi>:
{
     b22:	b570      	push	{r4, r5, r6, lr}
     b24:	0004      	movs	r4, r0
  return print((unsigned long) b, base);
     b26:	f7ff fff0 	bl	b0a <_ZN5Print5printEmi>
     b2a:	0005      	movs	r5, r0
  n += println();
     b2c:	0020      	movs	r0, r4
     b2e:	f7ff ff77 	bl	a20 <_ZN5Print7printlnEv>
     b32:	1940      	adds	r0, r0, r5
}
     b34:	bd70      	pop	{r4, r5, r6, pc}

00000b36 <_ZN5Print7printlnEmi>:
{
     b36:	b570      	push	{r4, r5, r6, lr}
     b38:	0005      	movs	r5, r0
  size_t n = print(num, base);
     b3a:	f7ff ffe6 	bl	b0a <_ZN5Print5printEmi>
     b3e:	0004      	movs	r4, r0
  n += println();
     b40:	0028      	movs	r0, r5
     b42:	f7ff ff6d 	bl	a20 <_ZN5Print7printlnEv>
     b46:	1820      	adds	r0, r4, r0
}
     b48:	bd70      	pop	{r4, r5, r6, pc}
	...

00000b4c <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
     b4c:	4b01      	ldr	r3, [pc, #4]	; (b54 <initiateReset+0x8>)
     b4e:	6018      	str	r0, [r3, #0]
}
     b50:	4770      	bx	lr
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	20000018 	.word	0x20000018

00000b58 <cancelReset>:

void cancelReset() {
	ticks = -1;
     b58:	2201      	movs	r2, #1
     b5a:	4b02      	ldr	r3, [pc, #8]	; (b64 <cancelReset+0xc>)
     b5c:	4252      	negs	r2, r2
     b5e:	601a      	str	r2, [r3, #0]
}
     b60:	4770      	bx	lr
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	20000018 	.word	0x20000018

00000b68 <tickReset>:

void tickReset() {
	if (ticks == -1)
     b68:	4a16      	ldr	r2, [pc, #88]	; (bc4 <tickReset+0x5c>)
void tickReset() {
     b6a:	b510      	push	{r4, lr}
	if (ticks == -1)
     b6c:	6813      	ldr	r3, [r2, #0]
     b6e:	1c59      	adds	r1, r3, #1
     b70:	d027      	beq.n	bc2 <tickReset+0x5a>
		return;
	ticks--;
     b72:	3b01      	subs	r3, #1
     b74:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     b76:	2b00      	cmp	r3, #0
     b78:	d123      	bne.n	bc2 <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     b7a:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     b7c:	4b12      	ldr	r3, [pc, #72]	; (bc8 <tickReset+0x60>)
     b7e:	4a13      	ldr	r2, [pc, #76]	; (bcc <tickReset+0x64>)
     b80:	3304      	adds	r3, #4
     b82:	4293      	cmp	r3, r2
     b84:	d808      	bhi.n	b98 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     b86:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     b8a:	4a11      	ldr	r2, [pc, #68]	; (bd0 <tickReset+0x68>)
     b8c:	4b11      	ldr	r3, [pc, #68]	; (bd4 <tickReset+0x6c>)
     b8e:	60da      	str	r2, [r3, #12]
     b90:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     b94:	46c0      	nop			; (mov r8, r8)
     b96:	e7fd      	b.n	b94 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     b98:	4a0f      	ldr	r2, [pc, #60]	; (bd8 <tickReset+0x70>)
	while (!nvmReady())
     b9a:	2101      	movs	r1, #1
     b9c:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     b9e:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     ba0:	420c      	tst	r4, r1
     ba2:	d0fc      	beq.n	b9e <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     ba4:	2120      	movs	r1, #32
     ba6:	8b14      	ldrh	r4, [r2, #24]
     ba8:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     baa:	089b      	lsrs	r3, r3, #2
     bac:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     bae:	4321      	orrs	r1, r4
     bb0:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     bb2:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     bb4:	4b09      	ldr	r3, [pc, #36]	; (bdc <tickReset+0x74>)
     bb6:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     bb8:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     bba:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     bbc:	421a      	tst	r2, r3
     bbe:	d0fc      	beq.n	bba <tickReset+0x52>
     bc0:	e7e1      	b.n	b86 <tickReset+0x1e>
		banzai();
}
     bc2:	bd10      	pop	{r4, pc}
     bc4:	20000018 	.word	0x20000018
     bc8:	00000000 	.word	0x00000000
     bcc:	00000203 	.word	0x00000203
     bd0:	05fa0004 	.word	0x05fa0004
     bd4:	e000ed00 	.word	0xe000ed00
     bd8:	41004000 	.word	0x41004000
     bdc:	ffffa502 	.word	0xffffa502

00000be0 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     be0:	221e      	movs	r2, #30
{
     be2:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     be4:	4846      	ldr	r0, [pc, #280]	; (d00 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     be6:	4947      	ldr	r1, [pc, #284]	; (d04 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     be8:	6843      	ldr	r3, [r0, #4]
     bea:	4393      	bics	r3, r2
     bec:	3a1c      	subs	r2, #28
     bee:	4313      	orrs	r3, r2
     bf0:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     bf2:	2308      	movs	r3, #8
     bf4:	698c      	ldr	r4, [r1, #24]
     bf6:	4323      	orrs	r3, r4
     bf8:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     bfa:	4c43      	ldr	r4, [pc, #268]	; (d08 <SystemInit+0x128>)
     bfc:	4b43      	ldr	r3, [pc, #268]	; (d0c <SystemInit+0x12c>)
     bfe:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     c00:	8a9c      	ldrh	r4, [r3, #20]
     c02:	4314      	orrs	r4, r2
     c04:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     c06:	68dc      	ldr	r4, [r3, #12]
     c08:	4214      	tst	r4, r2
     c0a:	d0fc      	beq.n	c06 <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     c0c:	2401      	movs	r4, #1
     c0e:	4a40      	ldr	r2, [pc, #256]	; (d10 <SystemInit+0x130>)
     c10:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     c12:	7815      	ldrb	r5, [r2, #0]
     c14:	4225      	tst	r5, r4
     c16:	d003      	beq.n	c20 <SystemInit+0x40>
     c18:	7855      	ldrb	r5, [r2, #1]
     c1a:	b26d      	sxtb	r5, r5
     c1c:	2d00      	cmp	r5, #0
     c1e:	dbf8      	blt.n	c12 <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     c20:	2401      	movs	r4, #1
     c22:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c24:	7854      	ldrb	r4, [r2, #1]
     c26:	b264      	sxtb	r4, r4
     c28:	2c00      	cmp	r4, #0
     c2a:	dbfb      	blt.n	c24 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     c2c:	4c39      	ldr	r4, [pc, #228]	; (d14 <SystemInit+0x134>)
     c2e:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c30:	7854      	ldrb	r4, [r2, #1]
     c32:	b264      	sxtb	r4, r4
     c34:	2c00      	cmp	r4, #0
     c36:	dbfb      	blt.n	c30 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     c38:	2482      	movs	r4, #130	; 0x82
     c3a:	01e4      	lsls	r4, r4, #7
     c3c:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c3e:	7854      	ldrb	r4, [r2, #1]
     c40:	b264      	sxtb	r4, r4
     c42:	2c00      	cmp	r4, #0
     c44:	dbfb      	blt.n	c3e <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     c46:	2402      	movs	r4, #2
     c48:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c4a:	340e      	adds	r4, #14
     c4c:	68dd      	ldr	r5, [r3, #12]
     c4e:	4225      	tst	r5, r4
     c50:	d0fc      	beq.n	c4c <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     c52:	4c31      	ldr	r4, [pc, #196]	; (d18 <SystemInit+0x138>)
     c54:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c56:	2410      	movs	r4, #16
     c58:	68dd      	ldr	r5, [r3, #12]
     c5a:	4225      	tst	r5, r4
     c5c:	d0fc      	beq.n	c58 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     c5e:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     c60:	4c2e      	ldr	r4, [pc, #184]	; (d1c <SystemInit+0x13c>)
     c62:	432c      	orrs	r4, r5
     c64:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c66:	2410      	movs	r4, #16
     c68:	68dd      	ldr	r5, [r3, #12]
     c6a:	4225      	tst	r5, r4
     c6c:	d0fc      	beq.n	c68 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     c6e:	2402      	movs	r4, #2
     c70:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     c72:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     c74:	432c      	orrs	r4, r5
     c76:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     c78:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     c7a:	68dd      	ldr	r5, [r3, #12]
     c7c:	4235      	tst	r5, r6
     c7e:	d0fc      	beq.n	c7a <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     c80:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     c82:	4225      	tst	r5, r4
     c84:	d0f9      	beq.n	c7a <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c86:	2410      	movs	r4, #16
     c88:	68dd      	ldr	r5, [r3, #12]
     c8a:	4225      	tst	r5, r4
     c8c:	d0fc      	beq.n	c88 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     c8e:	2400      	movs	r4, #0
     c90:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c92:	7854      	ldrb	r4, [r2, #1]
     c94:	b264      	sxtb	r4, r4
     c96:	2c00      	cmp	r4, #0
     c98:	dbfb      	blt.n	c92 <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     c9a:	4c21      	ldr	r4, [pc, #132]	; (d20 <SystemInit+0x140>)
     c9c:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c9e:	7854      	ldrb	r4, [r2, #1]
     ca0:	b264      	sxtb	r4, r4
     ca2:	2c00      	cmp	r4, #0
     ca4:	dbfb      	blt.n	c9e <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     ca6:	6a1c      	ldr	r4, [r3, #32]
     ca8:	4d1e      	ldr	r5, [pc, #120]	; (d24 <SystemInit+0x144>)
     caa:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     cac:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     cae:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     cb0:	6a1c      	ldr	r4, [r3, #32]
     cb2:	43ac      	bics	r4, r5
     cb4:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     cb6:	2303      	movs	r3, #3
     cb8:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     cba:	4b1b      	ldr	r3, [pc, #108]	; (d28 <SystemInit+0x148>)
     cbc:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     cbe:	7853      	ldrb	r3, [r2, #1]
     cc0:	b25b      	sxtb	r3, r3
     cc2:	2b00      	cmp	r3, #0
     cc4:	dbfb      	blt.n	cbe <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     cc6:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     cc8:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     cca:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     ccc:	4a17      	ldr	r2, [pc, #92]	; (d2c <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     cce:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     cd0:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     cd2:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     cd4:	4b16      	ldr	r3, [pc, #88]	; (d30 <SystemInit+0x150>)
     cd6:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     cd8:	4b16      	ldr	r3, [pc, #88]	; (d34 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     cda:	4a17      	ldr	r2, [pc, #92]	; (d38 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     cdc:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     cde:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     ce0:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     ce2:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     ce4:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     ce6:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     ce8:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     cea:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     cec:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     cee:	4313      	orrs	r3, r2
     cf0:	4a12      	ldr	r2, [pc, #72]	; (d3c <SystemInit+0x15c>)
     cf2:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     cf4:	2380      	movs	r3, #128	; 0x80
     cf6:	6842      	ldr	r2, [r0, #4]
     cf8:	4313      	orrs	r3, r2
     cfa:	6043      	str	r3, [r0, #4]
}
     cfc:	bd70      	pop	{r4, r5, r6, pc}
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	41004000 	.word	0x41004000
     d04:	40000400 	.word	0x40000400
     d08:	0000060c 	.word	0x0000060c
     d0c:	40000800 	.word	0x40000800
     d10:	40000c00 	.word	0x40000c00
     d14:	00010501 	.word	0x00010501
     d18:	7dff05b9 	.word	0x7dff05b9
     d1c:	00000a04 	.word	0x00000a04
     d20:	00030700 	.word	0x00030700
     d24:	fffffcff 	.word	0xfffffcff
     d28:	00010603 	.word	0x00010603
     d2c:	02dc6c00 	.word	0x02dc6c00
     d30:	20000044 	.word	0x20000044
     d34:	00806024 	.word	0x00806024
     d38:	00806020 	.word	0x00806020
     d3c:	42004000 	.word	0x42004000

00000d40 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
     d40:	2001      	movs	r0, #1
     d42:	4770      	bx	lr

00000d44 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
     d44:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
     d46:	6803      	ldr	r3, [r0, #0]
     d48:	4a01      	ldr	r2, [pc, #4]	; (d50 <_ZN4Uart5beginEm+0xc>)
     d4a:	6a1b      	ldr	r3, [r3, #32]
     d4c:	4798      	blx	r3
}
     d4e:	bd10      	pop	{r4, pc}
     d50:	00000413 	.word	0x00000413

00000d54 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
     d54:	6d82      	ldr	r2, [r0, #88]	; 0x58
     d56:	6d43      	ldr	r3, [r0, #84]	; 0x54
     d58:	429a      	cmp	r2, r3
     d5a:	d003      	beq.n	d64 <_ZN4Uart4peekEv+0x10>
    return -1;

  return _aucBuffer[_iTail];
     d5c:	6d83      	ldr	r3, [r0, #88]	; 0x58
     d5e:	18c0      	adds	r0, r0, r3
     d60:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
     d62:	4770      	bx	lr
    return -1;
     d64:	2001      	movs	r0, #1
     d66:	4240      	negs	r0, r0
  return rxBuffer.peek();
     d68:	e7fb      	b.n	d62 <_ZN4Uart4peekEv+0xe>

00000d6a <_ZN4Uart3endEv>:
{
     d6a:	b510      	push	{r4, lr}
     d6c:	0004      	movs	r4, r0
  sercom->resetUART();
     d6e:	6900      	ldr	r0, [r0, #16]
     d70:	f004 f9b5 	bl	50de <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
     d74:	2300      	movs	r3, #0
     d76:	0022      	movs	r2, r4
     d78:	6563      	str	r3, [r4, #84]	; 0x54
     d7a:	329c      	adds	r2, #156	; 0x9c
  _iTail = 0;
     d7c:	65a3      	str	r3, [r4, #88]	; 0x58
     d7e:	34a0      	adds	r4, #160	; 0xa0
  _iHead = 0;
     d80:	6013      	str	r3, [r2, #0]
  _iTail = 0;
     d82:	6023      	str	r3, [r4, #0]
}
     d84:	bd10      	pop	{r4, pc}

00000d86 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
     d86:	20f0      	movs	r0, #240	; 0xf0
     d88:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
     d8a:	3930      	subs	r1, #48	; 0x30
     d8c:	4248      	negs	r0, r1
     d8e:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
     d90:	4770      	bx	lr

00000d92 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
     d92:	23f0      	movs	r3, #240	; 0xf0
     d94:	011b      	lsls	r3, r3, #4
     d96:	4019      	ands	r1, r3
     d98:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
     d9a:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
     d9c:	009b      	lsls	r3, r3, #2
     d9e:	4299      	cmp	r1, r3
     da0:	d00a      	beq.n	db8 <_ZN4Uart15extractCharSizeEt+0x26>
     da2:	3301      	adds	r3, #1
     da4:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
     da6:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
     da8:	4299      	cmp	r1, r3
     daa:	d005      	beq.n	db8 <_ZN4Uart15extractCharSizeEt+0x26>
     dac:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
     dae:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
     db0:	005b      	lsls	r3, r3, #1
     db2:	4299      	cmp	r1, r3
     db4:	d000      	beq.n	db8 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
     db6:	2000      	movs	r0, #0

  }
}
     db8:	4770      	bx	lr

00000dba <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
     dba:	200f      	movs	r0, #15
     dbc:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
     dbe:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
     dc0:	2901      	cmp	r1, #1
     dc2:	d003      	beq.n	dcc <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
     dc4:	3902      	subs	r1, #2
     dc6:	1e48      	subs	r0, r1, #1
     dc8:	4181      	sbcs	r1, r0
     dca:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
     dcc:	4770      	bx	lr
	...

00000dd0 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     dd0:	0003      	movs	r3, r0
{
     dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     dd4:	2618      	movs	r6, #24
{
     dd6:	b085      	sub	sp, #20
     dd8:	9103      	str	r1, [sp, #12]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     dda:	33a4      	adds	r3, #164	; 0xa4
{
     ddc:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     dde:	7818      	ldrb	r0, [r3, #0]
     de0:	0033      	movs	r3, r6
     de2:	2108      	movs	r1, #8
     de4:	4343      	muls	r3, r0
     de6:	4d33      	ldr	r5, [pc, #204]	; (eb4 <_ZN4Uart5beginEmt+0xe4>)
{
     de8:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     dea:	18eb      	adds	r3, r5, r3
     dec:	5659      	ldrsb	r1, [r3, r1]
     dee:	f001 fa75 	bl	22dc <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
     df2:	0023      	movs	r3, r4
     df4:	33a5      	adds	r3, #165	; 0xa5
     df6:	7818      	ldrb	r0, [r3, #0]
     df8:	0033      	movs	r3, r6
     dfa:	2108      	movs	r1, #8
     dfc:	4343      	muls	r3, r0
     dfe:	18eb      	adds	r3, r5, r3
     e00:	5659      	ldrsb	r1, [r3, r1]
     e02:	f001 fa6b 	bl	22dc <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
     e06:	0023      	movs	r3, r4
     e08:	33a7      	adds	r3, #167	; 0xa7
     e0a:	781b      	ldrb	r3, [r3, #0]
     e0c:	2b02      	cmp	r3, #2
     e0e:	d10a      	bne.n	e26 <_ZN4Uart5beginEmt+0x56>
    if (uc_pinCTS != NO_CTS_PIN) {
     e10:	0023      	movs	r3, r4
     e12:	33b8      	adds	r3, #184	; 0xb8
     e14:	7818      	ldrb	r0, [r3, #0]
     e16:	28ff      	cmp	r0, #255	; 0xff
     e18:	d005      	beq.n	e26 <_ZN4Uart5beginEmt+0x56>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
     e1a:	2108      	movs	r1, #8
     e1c:	4346      	muls	r6, r0
     e1e:	19ae      	adds	r6, r5, r6
     e20:	5671      	ldrsb	r1, [r6, r1]
     e22:	f001 fa5b 	bl	22dc <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
     e26:	0026      	movs	r6, r4
     e28:	36a8      	adds	r6, #168	; 0xa8
     e2a:	7830      	ldrb	r0, [r6, #0]
     e2c:	28ff      	cmp	r0, #255	; 0xff
     e2e:	d019      	beq.n	e64 <_ZN4Uart5beginEmt+0x94>
    pinMode(uc_pinRTS, OUTPUT);
     e30:	2101      	movs	r1, #1
     e32:	f001 f9db 	bl	21ec <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     e36:	2218      	movs	r2, #24
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     e38:	0021      	movs	r1, r4
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     e3a:	7833      	ldrb	r3, [r6, #0]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     e3c:	481e      	ldr	r0, [pc, #120]	; (eb8 <_ZN4Uart5beginEmt+0xe8>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     e3e:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     e40:	56ab      	ldrsb	r3, [r5, r2]
     e42:	31ac      	adds	r1, #172	; 0xac
     e44:	01db      	lsls	r3, r3, #7
     e46:	1818      	adds	r0, r3, r0
     e48:	6008      	str	r0, [r1, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     e4a:	491c      	ldr	r1, [pc, #112]	; (ebc <_ZN4Uart5beginEmt+0xec>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     e4c:	18ad      	adds	r5, r5, r2
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     e4e:	185b      	adds	r3, r3, r1
     e50:	0021      	movs	r1, r4
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     e52:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     e54:	31b0      	adds	r1, #176	; 0xb0
     e56:	600b      	str	r3, [r1, #0]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     e58:	6869      	ldr	r1, [r5, #4]
     e5a:	408a      	lsls	r2, r1
     e5c:	0021      	movs	r1, r4
     e5e:	31b4      	adds	r1, #180	; 0xb4
     e60:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
     e62:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
     e64:	2201      	movs	r2, #1
     e66:	9b03      	ldr	r3, [sp, #12]
     e68:	0011      	movs	r1, r2
     e6a:	6920      	ldr	r0, [r4, #16]
     e6c:	f004 fae0 	bl	5430 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
     e70:	0039      	movs	r1, r7
     e72:	0020      	movs	r0, r4
     e74:	f7ff ff8d 	bl	d92 <_ZN4Uart15extractCharSizeEt>
     e78:	0039      	movs	r1, r7
     e7a:	0005      	movs	r5, r0
     e7c:	0020      	movs	r0, r4
     e7e:	f7ff ff9c 	bl	dba <_ZN4Uart13extractParityEt>
     e82:	0039      	movs	r1, r7
     e84:	0006      	movs	r6, r0
     e86:	0020      	movs	r0, r4
     e88:	f7ff ff7d 	bl	d86 <_ZN4Uart16extractNbStopBitEt>
     e8c:	0033      	movs	r3, r6
     e8e:	9000      	str	r0, [sp, #0]
     e90:	0029      	movs	r1, r5
     e92:	6920      	ldr	r0, [r4, #16]
     e94:	2201      	movs	r2, #1
     e96:	f004 f8f6 	bl	5086 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
     e9a:	0023      	movs	r3, r4
     e9c:	33a6      	adds	r3, #166	; 0xa6
     e9e:	781a      	ldrb	r2, [r3, #0]
     ea0:	7859      	ldrb	r1, [r3, #1]
     ea2:	6920      	ldr	r0, [r4, #16]
     ea4:	f004 f909 	bl	50ba <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
     ea8:	6920      	ldr	r0, [r4, #16]
     eaa:	f004 f924 	bl	50f6 <_ZN6SERCOM10enableUARTEv>
}
     eae:	b005      	add	sp, #20
     eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	00006010 	.word	0x00006010
     eb8:	41004418 	.word	0x41004418
     ebc:	41004414 	.word	0x41004414

00000ec0 <_ZN11RingBufferNILi64EEC1Ev>:
RingBufferN<N>::RingBufferN( void )
     ec0:	b510      	push	{r4, lr}
    memset( _aucBuffer, 0, N ) ;
     ec2:	2240      	movs	r2, #64	; 0x40
     ec4:	2100      	movs	r1, #0
RingBufferN<N>::RingBufferN( void )
     ec6:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
     ec8:	f004 fdfe 	bl	5ac8 <memset>
  _iHead = 0;
     ecc:	2300      	movs	r3, #0
}
     ece:	0020      	movs	r0, r4
  _iHead = 0;
     ed0:	6423      	str	r3, [r4, #64]	; 0x40
  _iTail = 0;
     ed2:	6463      	str	r3, [r4, #68]	; 0x44
}
     ed4:	bd10      	pop	{r4, pc}
	...

00000ed8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
     ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     eda:	001d      	movs	r5, r3
     edc:	ab08      	add	r3, sp, #32
     ede:	781b      	ldrb	r3, [r3, #0]
     ee0:	0004      	movs	r4, r0
     ee2:	9300      	str	r3, [sp, #0]
     ee4:	ab09      	add	r3, sp, #36	; 0x24
     ee6:	781b      	ldrb	r3, [r3, #0]
     ee8:	0016      	movs	r6, r2
     eea:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
     eec:	2300      	movs	r3, #0
     eee:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     ef0:	23fa      	movs	r3, #250	; 0xfa
     ef2:	009b      	lsls	r3, r3, #2
     ef4:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
     ef6:	4b0e      	ldr	r3, [pc, #56]	; (f30 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
     ef8:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
     efa:	3308      	adds	r3, #8
     efc:	6003      	str	r3, [r0, #0]
     efe:	3014      	adds	r0, #20
     f00:	f7ff ffde 	bl	ec0 <_ZN11RingBufferNILi64EEC1Ev>
     f04:	0020      	movs	r0, r4
     f06:	305c      	adds	r0, #92	; 0x5c
     f08:	f7ff ffda 	bl	ec0 <_ZN11RingBufferNILi64EEC1Ev>
  uc_padRX = _padRX ;
     f0c:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
     f0e:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
     f10:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
     f12:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
     f14:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
     f16:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
     f18:	466a      	mov	r2, sp
     f1a:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
     f1c:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
     f1e:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
     f20:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
     f22:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
     f24:	23ff      	movs	r3, #255	; 0xff
     f26:	32a8      	adds	r2, #168	; 0xa8
}
     f28:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
     f2a:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
     f2c:	7413      	strb	r3, [r2, #16]
}
     f2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     f30:	00005ec8 	.word	0x00005ec8

00000f34 <_ZN11RingBufferNILi64EE9availableEv>:
  int delta = _iHead - _iTail;
     f34:	6c03      	ldr	r3, [r0, #64]	; 0x40
     f36:	6c40      	ldr	r0, [r0, #68]	; 0x44
     f38:	1a18      	subs	r0, r3, r0
  if(delta < 0)
     f3a:	d500      	bpl.n	f3e <_ZN11RingBufferNILi64EE9availableEv+0xa>
    return N + delta;
     f3c:	3040      	adds	r0, #64	; 0x40
}
     f3e:	4770      	bx	lr

00000f40 <_ZN4Uart5flushEv>:
{
     f40:	b510      	push	{r4, lr}
     f42:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
     f44:	0020      	movs	r0, r4
     f46:	305c      	adds	r0, #92	; 0x5c
     f48:	f7ff fff4 	bl	f34 <_ZN11RingBufferNILi64EE9availableEv>
     f4c:	2800      	cmp	r0, #0
     f4e:	d1f9      	bne.n	f44 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
     f50:	6920      	ldr	r0, [r4, #16]
     f52:	f004 f8d9 	bl	5108 <_ZN6SERCOM9flushUARTEv>
}
     f56:	bd10      	pop	{r4, pc}

00000f58 <_ZN4Uart9availableEv>:
{
     f58:	b510      	push	{r4, lr}
  return rxBuffer.available();
     f5a:	3014      	adds	r0, #20
     f5c:	f7ff ffea 	bl	f34 <_ZN11RingBufferNILi64EE9availableEv>
}
     f60:	bd10      	pop	{r4, pc}

00000f62 <_ZN11RingBufferNILi64EE17availableForStoreEv>:
  if (_iHead >= _iTail)
     f62:	6c02      	ldr	r2, [r0, #64]	; 0x40
     f64:	6c43      	ldr	r3, [r0, #68]	; 0x44
     f66:	429a      	cmp	r2, r3
     f68:	db04      	blt.n	f74 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x12>
    return N - 1 - _iHead + _iTail;
     f6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
     f6c:	6c40      	ldr	r0, [r0, #68]	; 0x44
     f6e:	1ac0      	subs	r0, r0, r3
     f70:	303f      	adds	r0, #63	; 0x3f
}
     f72:	4770      	bx	lr
    return _iTail - _iHead - 1;
     f74:	6c43      	ldr	r3, [r0, #68]	; 0x44
     f76:	6c00      	ldr	r0, [r0, #64]	; 0x40
     f78:	1a18      	subs	r0, r3, r0
     f7a:	3801      	subs	r0, #1
     f7c:	e7f9      	b.n	f72 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x10>

00000f7e <_ZN4Uart17availableForWriteEv>:
{
     f7e:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
     f80:	305c      	adds	r0, #92	; 0x5c
     f82:	f7ff ffee 	bl	f62 <_ZN11RingBufferNILi64EE17availableForStoreEv>
}
     f86:	bd10      	pop	{r4, pc}

00000f88 <_ZN4Uart10IrqHandlerEv>:
{
     f88:	b570      	push	{r4, r5, r6, lr}
     f8a:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
     f8c:	6900      	ldr	r0, [r0, #16]
     f8e:	f004 f8c7 	bl	5120 <_ZN6SERCOM17availableDataUARTEv>
     f92:	2800      	cmp	r0, #0
     f94:	d01f      	beq.n	fd6 <_ZN4Uart10IrqHandlerEv+0x4e>
    rxBuffer.store_char(sercom->readDataUART());
     f96:	6920      	ldr	r0, [r4, #16]
     f98:	f004 f8d7 	bl	514a <_ZN6SERCOM12readDataUARTEv>
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
     f9c:	223f      	movs	r2, #63	; 0x3f
  int i = nextIndex(_iHead);
     f9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (uint32_t)(index + 1) % N;
     fa0:	3301      	adds	r3, #1
     fa2:	4013      	ands	r3, r2
  if ( i != _iTail )
     fa4:	6da2      	ldr	r2, [r4, #88]	; 0x58
     fa6:	4293      	cmp	r3, r2
     fa8:	d003      	beq.n	fb2 <_ZN4Uart10IrqHandlerEv+0x2a>
    _aucBuffer[_iHead] = c ;
     faa:	6d62      	ldr	r2, [r4, #84]	; 0x54
     fac:	18a2      	adds	r2, r4, r2
     fae:	7510      	strb	r0, [r2, #20]
    _iHead = i ;
     fb0:	6563      	str	r3, [r4, #84]	; 0x54
    if (uc_pinRTS != NO_RTS_PIN) {
     fb2:	0023      	movs	r3, r4
     fb4:	33a8      	adds	r3, #168	; 0xa8
     fb6:	781b      	ldrb	r3, [r3, #0]
     fb8:	2bff      	cmp	r3, #255	; 0xff
     fba:	d00c      	beq.n	fd6 <_ZN4Uart10IrqHandlerEv+0x4e>
    rxBuffer.store_char(sercom->readDataUART());
     fbc:	0020      	movs	r0, r4
     fbe:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
     fc0:	f7ff ffcf 	bl	f62 <_ZN11RingBufferNILi64EE17availableForStoreEv>
     fc4:	2809      	cmp	r0, #9
     fc6:	dc06      	bgt.n	fd6 <_ZN4Uart10IrqHandlerEv+0x4e>
        *pul_outsetRTS = ul_pinMaskRTS;
     fc8:	0023      	movs	r3, r4
     fca:	0022      	movs	r2, r4
     fcc:	33ac      	adds	r3, #172	; 0xac
     fce:	32b4      	adds	r2, #180	; 0xb4
     fd0:	681b      	ldr	r3, [r3, #0]
     fd2:	6812      	ldr	r2, [r2, #0]
     fd4:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
     fd6:	6920      	ldr	r0, [r4, #16]
     fd8:	f004 f8b2 	bl	5140 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     fdc:	2800      	cmp	r0, #0
     fde:	d019      	beq.n	1014 <_ZN4Uart10IrqHandlerEv+0x8c>
    if (txBuffer.available()) {
     fe0:	0025      	movs	r5, r4
     fe2:	355c      	adds	r5, #92	; 0x5c
     fe4:	0028      	movs	r0, r5
     fe6:	f7ff ffa5 	bl	f34 <_ZN11RingBufferNILi64EE9availableEv>
     fea:	2800      	cmp	r0, #0
     fec:	d021      	beq.n	1032 <_ZN4Uart10IrqHandlerEv+0xaa>
  if(_iTail == _iHead)
     fee:	0022      	movs	r2, r4
     ff0:	0023      	movs	r3, r4
     ff2:	32a0      	adds	r2, #160	; 0xa0
     ff4:	339c      	adds	r3, #156	; 0x9c
     ff6:	6811      	ldr	r1, [r2, #0]
     ff8:	681b      	ldr	r3, [r3, #0]
     ffa:	4299      	cmp	r1, r3
     ffc:	d016      	beq.n	102c <_ZN4Uart10IrqHandlerEv+0xa4>
  return (uint32_t)(index + 1) % N;
     ffe:	203f      	movs	r0, #63	; 0x3f
  uint8_t value = _aucBuffer[_iTail];
    1000:	6813      	ldr	r3, [r2, #0]
    1002:	5ce9      	ldrb	r1, [r5, r3]
  _iTail = nextIndex(_iTail);
    1004:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(index + 1) % N;
    1006:	3301      	adds	r3, #1
    1008:	4003      	ands	r3, r0
  _iTail = nextIndex(_iTail);
    100a:	6013      	str	r3, [r2, #0]
      sercom->writeDataUART(data);
    100c:	b2c9      	uxtb	r1, r1
    100e:	6920      	ldr	r0, [r4, #16]
    1010:	f004 f89f 	bl	5152 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    1014:	6920      	ldr	r0, [r4, #16]
    1016:	f004 f888 	bl	512a <_ZN6SERCOM11isUARTErrorEv>
    101a:	2800      	cmp	r0, #0
    101c:	d005      	beq.n	102a <_ZN4Uart10IrqHandlerEv+0xa2>
    sercom->acknowledgeUARTError();
    101e:	6920      	ldr	r0, [r4, #16]
    1020:	f004 f887 	bl	5132 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    1024:	6920      	ldr	r0, [r4, #16]
    1026:	f004 f877 	bl	5118 <_ZN6SERCOM15clearStatusUARTEv>
}
    102a:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    102c:	2101      	movs	r1, #1
    102e:	4249      	negs	r1, r1
    1030:	e7ec      	b.n	100c <_ZN4Uart10IrqHandlerEv+0x84>
      sercom->disableDataRegisterEmptyInterruptUART();
    1032:	6920      	ldr	r0, [r4, #16]
    1034:	f004 f899 	bl	516a <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    1038:	e7ec      	b.n	1014 <_ZN4Uart10IrqHandlerEv+0x8c>
	...

0000103c <_ZN4Uart5writeEh>:
{
    103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    103e:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    1040:	6900      	ldr	r0, [r0, #16]
{
    1042:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    1044:	f004 f87c 	bl	5140 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    1048:	2800      	cmp	r0, #0
    104a:	d126      	bne.n	109a <_ZN4Uart5writeEh+0x5e>
  return (uint32_t)(index + 1) % N;
    104c:	263f      	movs	r6, #63	; 0x3f
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);
    104e:	2701      	movs	r7, #1
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    1050:	0022      	movs	r2, r4
    1052:	0021      	movs	r1, r4
    1054:	329c      	adds	r2, #156	; 0x9c
    1056:	6813      	ldr	r3, [r2, #0]
    1058:	31a0      	adds	r1, #160	; 0xa0
    105a:	6808      	ldr	r0, [r1, #0]
  return (uint32_t)(index + 1) % N;
    105c:	3301      	adds	r3, #1
    105e:	4033      	ands	r3, r6
    while(txBuffer.isFull()) {
    1060:	4283      	cmp	r3, r0
    1062:	d12e      	bne.n	10c2 <_ZN4Uart5writeEh+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1064:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    1068:	423b      	tst	r3, r7
    106a:	d10d      	bne.n	1088 <_ZN4Uart5writeEh+0x4c>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    106c:	4b1d      	ldr	r3, [pc, #116]	; (10e4 <_ZN4Uart5writeEh+0xa8>)
    106e:	685b      	ldr	r3, [r3, #4]
    1070:	05db      	lsls	r3, r3, #23
    1072:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    1074:	d0ec      	beq.n	1050 <_ZN4Uart5writeEh+0x14>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    1076:	3b10      	subs	r3, #16
    1078:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    107a:	2b00      	cmp	r3, #0
    107c:	db18      	blt.n	10b0 <_ZN4Uart5writeEh+0x74>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    107e:	089b      	lsrs	r3, r3, #2
    1080:	33c0      	adds	r3, #192	; 0xc0
    1082:	4a19      	ldr	r2, [pc, #100]	; (10e8 <_ZN4Uart5writeEh+0xac>)
    1084:	009b      	lsls	r3, r3, #2
    1086:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    1088:	6920      	ldr	r0, [r4, #16]
    108a:	f004 f859 	bl	5140 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    108e:	2800      	cmp	r0, #0
    1090:	d0de      	beq.n	1050 <_ZN4Uart5writeEh+0x14>
        IrqHandler();
    1092:	0020      	movs	r0, r4
    1094:	f7ff ff78 	bl	f88 <_ZN4Uart10IrqHandlerEv>
    1098:	e7da      	b.n	1050 <_ZN4Uart5writeEh+0x14>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    109a:	0020      	movs	r0, r4
    109c:	305c      	adds	r0, #92	; 0x5c
    109e:	f7ff ff49 	bl	f34 <_ZN11RingBufferNILi64EE9availableEv>
    10a2:	2800      	cmp	r0, #0
    10a4:	d1d2      	bne.n	104c <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    10a6:	0029      	movs	r1, r5
    10a8:	6920      	ldr	r0, [r4, #16]
    10aa:	f004 f852 	bl	5152 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    10ae:	e016      	b.n	10de <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    10b0:	220f      	movs	r2, #15
    10b2:	4013      	ands	r3, r2
    10b4:	3b08      	subs	r3, #8
    10b6:	089b      	lsrs	r3, r3, #2
    10b8:	4a0c      	ldr	r2, [pc, #48]	; (10ec <_ZN4Uart5writeEh+0xb0>)
    10ba:	009b      	lsls	r3, r3, #2
    10bc:	189b      	adds	r3, r3, r2
    10be:	681b      	ldr	r3, [r3, #0]
    10c0:	e7e2      	b.n	1088 <_ZN4Uart5writeEh+0x4c>
  int i = nextIndex(_iHead);
    10c2:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(index + 1) % N;
    10c4:	3301      	adds	r3, #1
    10c6:	401e      	ands	r6, r3
  if ( i != _iTail )
    10c8:	680b      	ldr	r3, [r1, #0]
    10ca:	429e      	cmp	r6, r3
    10cc:	d004      	beq.n	10d8 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    10ce:	0021      	movs	r1, r4
    10d0:	6813      	ldr	r3, [r2, #0]
    10d2:	315c      	adds	r1, #92	; 0x5c
    10d4:	54cd      	strb	r5, [r1, r3]
    _iHead = i ;
    10d6:	6016      	str	r6, [r2, #0]
    sercom->enableDataRegisterEmptyInterruptUART();
    10d8:	6920      	ldr	r0, [r4, #16]
    10da:	f004 f842 	bl	5162 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    10de:	2001      	movs	r0, #1
    10e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	e000ed00 	.word	0xe000ed00
    10e8:	e000e100 	.word	0xe000e100
    10ec:	e000ed1c 	.word	0xe000ed1c

000010f0 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    10f0:	6d82      	ldr	r2, [r0, #88]	; 0x58
    10f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
    10f4:	b570      	push	{r4, r5, r6, lr}
    10f6:	0004      	movs	r4, r0
    10f8:	429a      	cmp	r2, r3
    10fa:	d01a      	beq.n	1132 <_ZN4Uart4readEv+0x42>
  return (uint32_t)(index + 1) % N;
    10fc:	223f      	movs	r2, #63	; 0x3f
  uint8_t value = _aucBuffer[_iTail];
    10fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
    1100:	18c3      	adds	r3, r0, r3
    1102:	7d1d      	ldrb	r5, [r3, #20]
  _iTail = nextIndex(_iTail);
    1104:	6d83      	ldr	r3, [r0, #88]	; 0x58
  return (uint32_t)(index + 1) % N;
    1106:	3301      	adds	r3, #1
    1108:	4013      	ands	r3, r2
  _iTail = nextIndex(_iTail);
    110a:	6583      	str	r3, [r0, #88]	; 0x58
  if (uc_pinRTS != NO_RTS_PIN) {
    110c:	0023      	movs	r3, r4
    110e:	33a8      	adds	r3, #168	; 0xa8
    1110:	781b      	ldrb	r3, [r3, #0]
    1112:	2bff      	cmp	r3, #255	; 0xff
    1114:	d00b      	beq.n	112e <_ZN4Uart4readEv+0x3e>
  int c = rxBuffer.read_char();
    1116:	0020      	movs	r0, r4
    1118:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    111a:	f7ff ff22 	bl	f62 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    111e:	280a      	cmp	r0, #10
    1120:	dd05      	ble.n	112e <_ZN4Uart4readEv+0x3e>
      *pul_outclrRTS = ul_pinMaskRTS;
    1122:	0023      	movs	r3, r4
    1124:	34b4      	adds	r4, #180	; 0xb4
    1126:	33b0      	adds	r3, #176	; 0xb0
    1128:	681b      	ldr	r3, [r3, #0]
    112a:	6822      	ldr	r2, [r4, #0]
    112c:	601a      	str	r2, [r3, #0]
}
    112e:	0028      	movs	r0, r5
    1130:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    1132:	2501      	movs	r5, #1
    1134:	426d      	negs	r5, r5
    1136:	e7e9      	b.n	110c <_ZN4Uart4readEv+0x1c>

00001138 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    1138:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    113a:	250f      	movs	r5, #15
    113c:	1dcb      	adds	r3, r1, #7
    113e:	3901      	subs	r1, #1
    1140:	0002      	movs	r2, r0
    1142:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    1144:	0014      	movs	r4, r2
		val = (val >> 4);
    1146:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    1148:	3430      	adds	r4, #48	; 0x30
    114a:	2a09      	cmp	r2, #9
    114c:	dd01      	ble.n	1152 <_ZL5utox8mPc+0x1a>
    114e:	3237      	adds	r2, #55	; 0x37
    1150:	0014      	movs	r4, r2
    1152:	701c      	strb	r4, [r3, #0]
    1154:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    1156:	428b      	cmp	r3, r1
    1158:	d1f2      	bne.n	1140 <_ZL5utox8mPc+0x8>
	}
}
    115a:	bd30      	pop	{r4, r5, pc}

0000115c <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    115c:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    115e:	2982      	cmp	r1, #130	; 0x82
    1160:	d11f      	bne.n	11a2 <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1162:	b2c3      	uxtb	r3, r0
    1164:	4d2c      	ldr	r5, [pc, #176]	; (1218 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    1166:	015a      	lsls	r2, r3, #5
    1168:	18aa      	adds	r2, r5, r2
    116a:	6991      	ldr	r1, [r2, #24]
    116c:	4c2b      	ldr	r4, [pc, #172]	; (121c <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    116e:	0180      	lsls	r0, r0, #6
    1170:	400c      	ands	r4, r1
    1172:	21c0      	movs	r1, #192	; 0xc0
    1174:	0589      	lsls	r1, r1, #22
    1176:	4321      	orrs	r1, r4
    1178:	6191      	str	r1, [r2, #24]
    117a:	4929      	ldr	r1, [pc, #164]	; (1220 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    117c:	3308      	adds	r3, #8
    117e:	1808      	adds	r0, r1, r0
    1180:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1182:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    1184:	682a      	ldr	r2, [r5, #0]
    1186:	015b      	lsls	r3, r3, #5
    1188:	18d0      	adds	r0, r2, r3
    118a:	7904      	ldrb	r4, [r0, #4]
    118c:	4249      	negs	r1, r1
    118e:	4321      	orrs	r1, r4
    1190:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1192:	2070      	movs	r0, #112	; 0x70
    1194:	5c99      	ldrb	r1, [r3, r2]
    1196:	4381      	bics	r1, r0
    1198:	0008      	movs	r0, r1
    119a:	2130      	movs	r1, #48	; 0x30
    119c:	4301      	orrs	r1, r0
    119e:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    11a0:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    11a2:	2900      	cmp	r1, #0
    11a4:	d1fc      	bne.n	11a0 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    11a6:	24c0      	movs	r4, #192	; 0xc0
    11a8:	b2c1      	uxtb	r1, r0
    11aa:	4e1b      	ldr	r6, [pc, #108]	; (1218 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    11ac:	014b      	lsls	r3, r1, #5
    11ae:	18f3      	adds	r3, r6, r3
    11b0:	689a      	ldr	r2, [r3, #8]
    11b2:	4d1a      	ldr	r5, [pc, #104]	; (121c <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    11b4:	05a4      	lsls	r4, r4, #22
    11b6:	402a      	ands	r2, r5
    11b8:	4322      	orrs	r2, r4
    11ba:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    11bc:	4a19      	ldr	r2, [pc, #100]	; (1224 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    11be:	0180      	lsls	r0, r0, #6
    11c0:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    11c2:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    11c4:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    11c6:	6830      	ldr	r0, [r6, #0]
    11c8:	2607      	movs	r6, #7
    11ca:	3208      	adds	r2, #8
    11cc:	0152      	lsls	r2, r2, #5
    11ce:	5c11      	ldrb	r1, [r2, r0]
    11d0:	43b1      	bics	r1, r6
    11d2:	000e      	movs	r6, r1
    11d4:	2101      	movs	r1, #1
    11d6:	4331      	orrs	r1, r6
    11d8:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    11da:	6999      	ldr	r1, [r3, #24]
    11dc:	400d      	ands	r5, r1
    11de:	432c      	orrs	r4, r5
    11e0:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    11e2:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    11e4:	490e      	ldr	r1, [pc, #56]	; (1220 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    11e6:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    11e8:	5c11      	ldrb	r1, [r2, r0]
    11ea:	43a1      	bics	r1, r4
    11ec:	000c      	movs	r4, r1
    11ee:	2110      	movs	r1, #16
    11f0:	4321      	orrs	r1, r4
    11f2:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    11f4:	6899      	ldr	r1, [r3, #8]
    11f6:	4c0c      	ldr	r4, [pc, #48]	; (1228 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    11f8:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    11fa:	400c      	ands	r4, r1
    11fc:	2180      	movs	r1, #128	; 0x80
    11fe:	0349      	lsls	r1, r1, #13
    1200:	4321      	orrs	r1, r4
    1202:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1204:	6899      	ldr	r1, [r3, #8]
    1206:	0b89      	lsrs	r1, r1, #14
    1208:	0389      	lsls	r1, r1, #14
    120a:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    120c:	2340      	movs	r3, #64	; 0x40
    120e:	7951      	ldrb	r1, [r2, #5]
    1210:	430b      	orrs	r3, r1
    1212:	7153      	strb	r3, [r2, #5]
    1214:	e7c4      	b.n	11a0 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	20000680 	.word	0x20000680
    121c:	8fffffff 	.word	0x8fffffff
    1220:	200001f4 	.word	0x200001f4
    1224:	200003b4 	.word	0x200003b4
    1228:	f0003fff 	.word	0xf0003fff

0000122c <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    122c:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    122e:	0004      	movs	r4, r0
    1230:	2301      	movs	r3, #1
    1232:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    1234:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    1236:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    1238:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    123a:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    123c:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    123e:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    1240:	0052      	lsls	r2, r2, #1
    1242:	f004 fc41 	bl	5ac8 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    1246:	78ab      	ldrb	r3, [r5, #2]
    1248:	07db      	lsls	r3, r3, #31
    124a:	d4fc      	bmi.n	1246 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    124c:	626c      	str	r4, [r5, #36]	; 0x24
}
    124e:	bd70      	pop	{r4, r5, r6, pc}

00001250 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    1250:	221f      	movs	r2, #31
    1252:	4b14      	ldr	r3, [pc, #80]	; (12a4 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    1254:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    1256:	681b      	ldr	r3, [r3, #0]
    1258:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    125a:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    125c:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    125e:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    1260:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    1262:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
    1264:	291f      	cmp	r1, #31
    1266:	d100      	bne.n	126a <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    1268:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    126a:	2a1f      	cmp	r2, #31
    126c:	d100      	bne.n	1270 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    126e:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    1270:	2b07      	cmp	r3, #7
    1272:	d100      	bne.n	1276 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    1274:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
    1276:	251f      	movs	r5, #31
    1278:	6800      	ldr	r0, [r0, #0]
    127a:	018e      	lsls	r6, r1, #6
    127c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    127e:	490a      	ldr	r1, [pc, #40]	; (12a8 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    1280:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    1282:	4021      	ands	r1, r4
    1284:	4331      	orrs	r1, r6
    1286:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    1288:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    128a:	0014      	movs	r4, r2
    128c:	000a      	movs	r2, r1
    128e:	43aa      	bics	r2, r5
    1290:	4322      	orrs	r2, r4
    1292:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    1294:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    1296:	0319      	lsls	r1, r3, #12
    1298:	4b04      	ldr	r3, [pc, #16]	; (12ac <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    129a:	4013      	ands	r3, r2
    129c:	430b      	orrs	r3, r1
    129e:	8503      	strh	r3, [r0, #40]	; 0x28
}
    12a0:	bd70      	pop	{r4, r5, r6, pc}
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	00806024 	.word	0x00806024
    12a8:	fffff83f 	.word	0xfffff83f
    12ac:	ffff8fff 	.word	0xffff8fff

000012b0 <_ZN7__GuardC1Ev>:
    12b0:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    12b4:	6003      	str	r3, [r0, #0]
    12b6:	2301      	movs	r3, #1
    12b8:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    12ba:	b672      	cpsid	i
		__disable_irq();
	}
    12bc:	4770      	bx	lr

000012be <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
    12be:	6803      	ldr	r3, [r0, #0]
    12c0:	2b00      	cmp	r3, #0
    12c2:	d102      	bne.n	12ca <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    12c4:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    12c6:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    12ca:	4770      	bx	lr

000012cc <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    12cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    12ce:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    12d0:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    12d2:	4668      	mov	r0, sp
		if (current == 0) {
    12d4:	2d00      	cmp	r5, #0
    12d6:	d114      	bne.n	1302 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    12d8:	f7ff ffea 	bl	12b0 <_ZN7__GuardC1Ev>
    12dc:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    12de:	1d62      	adds	r2, r4, #5
			synchronized {
    12e0:	3b01      	subs	r3, #1
    12e2:	d302      	bcc.n	12ea <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    12e4:	7fd5      	ldrb	r5, [r2, #31]
    12e6:	b2ed      	uxtb	r5, r5
    12e8:	e7fa      	b.n	12e0 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    12ea:	4668      	mov	r0, sp
    12ec:	9301      	str	r3, [sp, #4]
    12ee:	f7ff ffe6 	bl	12be <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    12f2:	2d00      	cmp	r5, #0
    12f4:	d101      	bne.n	12fa <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    12f6:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    12f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    12fa:	6a20      	ldr	r0, [r4, #32]
    12fc:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    12fe:	1ac0      	subs	r0, r0, r3
    1300:	e7fa      	b.n	12f8 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    1302:	f7ff ffd5 	bl	12b0 <_ZN7__GuardC1Ev>
				ready = ready1;
    1306:	0022      	movs	r2, r4
			bool ready = false;
    1308:	2500      	movs	r5, #0
    130a:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    130c:	3234      	adds	r2, #52	; 0x34
			synchronized {
    130e:	3b01      	subs	r3, #1
    1310:	d302      	bcc.n	1318 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    1312:	7815      	ldrb	r5, [r2, #0]
    1314:	b2ed      	uxtb	r5, r5
			synchronized {
    1316:	e7fa      	b.n	130e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    1318:	4668      	mov	r0, sp
    131a:	9301      	str	r3, [sp, #4]
    131c:	f7ff ffcf 	bl	12be <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    1320:	2d00      	cmp	r5, #0
    1322:	d0e8      	beq.n	12f6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    1324:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1326:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1328:	e7e9      	b.n	12fe <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

0000132c <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    132c:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    132e:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    1330:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1332:	7a03      	ldrb	r3, [r0, #8]
    1334:	6831      	ldr	r1, [r6, #0]
    1336:	015a      	lsls	r2, r3, #5
    1338:	188c      	adds	r4, r1, r2
    133a:	34ff      	adds	r4, #255	; 0xff
    133c:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    133e:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1340:	433d      	orrs	r5, r7
    1342:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    1344:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1346:	4d09      	ldr	r5, [pc, #36]	; (136c <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    1348:	6890      	ldr	r0, [r2, #8]
    134a:	04a4      	lsls	r4, r4, #18
    134c:	4028      	ands	r0, r5
    134e:	0924      	lsrs	r4, r4, #4
    1350:	4320      	orrs	r0, r4
    1352:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1354:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1356:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1358:	0b80      	lsrs	r0, r0, #14
    135a:	0380      	lsls	r0, r0, #14
    135c:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    135e:	2240      	movs	r2, #64	; 0x40
    1360:	015b      	lsls	r3, r3, #5
    1362:	18cb      	adds	r3, r1, r3
    1364:	7919      	ldrb	r1, [r3, #4]
    1366:	430a      	orrs	r2, r1
    1368:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    136c:	f0003fff 	.word	0xf0003fff

00001370 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    1370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    1372:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    1374:	0004      	movs	r4, r0
    1376:	000e      	movs	r6, r1
    1378:	0017      	movs	r7, r2
			synchronized {
    137a:	4668      	mov	r0, sp
		if (current == 0) {
    137c:	2b00      	cmp	r3, #0
    137e:	d13d      	bne.n	13fc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    1380:	f7ff ff96 	bl	12b0 <_ZN7__GuardC1Ev>
    1384:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    1386:	1d61      	adds	r1, r4, #5
    1388:	3b01      	subs	r3, #1
			synchronized {
    138a:	1c5a      	adds	r2, r3, #1
    138c:	d00c      	beq.n	13a8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    138e:	7fcd      	ldrb	r5, [r1, #31]
    1390:	1e5a      	subs	r2, r3, #1
    1392:	b2ed      	uxtb	r5, r5
    1394:	2d00      	cmp	r5, #0
    1396:	d105      	bne.n	13a4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    1398:	4668      	mov	r0, sp
    139a:	9301      	str	r3, [sp, #4]
    139c:	f7ff ff8f 	bl	12be <_ZN7__GuardD1Ev>
	}
    13a0:	0028      	movs	r0, r5
    13a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    13a4:	0013      	movs	r3, r2
    13a6:	e7f0      	b.n	138a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    13a8:	4668      	mov	r0, sp
    13aa:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    13ac:	2500      	movs	r5, #0
			synchronized {
    13ae:	f7ff ff86 	bl	12be <_ZN7__GuardD1Ev>
    13b2:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    13b4:	42af      	cmp	r7, r5
    13b6:	d002      	beq.n	13be <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    13b8:	6a22      	ldr	r2, [r4, #32]
    13ba:	4293      	cmp	r3, r2
    13bc:	d357      	bcc.n	146e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    13be:	6a22      	ldr	r2, [r4, #32]
    13c0:	4293      	cmp	r3, r2
    13c2:	d1ed      	bne.n	13a0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    13c4:	2300      	movs	r3, #0
    13c6:	61e3      	str	r3, [r4, #28]
				current = 1;
    13c8:	3301      	adds	r3, #1
    13ca:	6123      	str	r3, [r4, #16]
				synchronized {
    13cc:	4668      	mov	r0, sp
    13ce:	f7ff ff6f 	bl	12b0 <_ZN7__GuardC1Ev>
					if (notify) {
    13d2:	0022      	movs	r2, r4
					ready0 = false;
    13d4:	2100      	movs	r1, #0
    13d6:	9b01      	ldr	r3, [sp, #4]
    13d8:	1d67      	adds	r7, r4, #5
    13da:	3b01      	subs	r3, #1
					if (notify) {
    13dc:	3235      	adds	r2, #53	; 0x35
				synchronized {
    13de:	1c58      	adds	r0, r3, #1
    13e0:	d0da      	beq.n	1398 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    13e2:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    13e4:	7810      	ldrb	r0, [r2, #0]
    13e6:	1e5e      	subs	r6, r3, #1
    13e8:	2800      	cmp	r0, #0
    13ea:	d005      	beq.n	13f8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    13ec:	7011      	strb	r1, [r2, #0]
						release();
    13ee:	0020      	movs	r0, r4
    13f0:	9301      	str	r3, [sp, #4]
    13f2:	f7ff ff9b 	bl	132c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    13f6:	e7ec      	b.n	13d2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    13f8:	0033      	movs	r3, r6
    13fa:	e7f0      	b.n	13de <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    13fc:	f7ff ff58 	bl	12b0 <_ZN7__GuardC1Ev>
				if (!ready1) {
    1400:	0021      	movs	r1, r4
    1402:	9b01      	ldr	r3, [sp, #4]
    1404:	3134      	adds	r1, #52	; 0x34
    1406:	3b01      	subs	r3, #1
			synchronized {
    1408:	1c5a      	adds	r2, r3, #1
    140a:	d006      	beq.n	141a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    140c:	780d      	ldrb	r5, [r1, #0]
    140e:	1e5a      	subs	r2, r3, #1
    1410:	b2ed      	uxtb	r5, r5
    1412:	2d00      	cmp	r5, #0
    1414:	d0c0      	beq.n	1398 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    1416:	0013      	movs	r3, r2
    1418:	e7f6      	b.n	1408 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    141a:	4668      	mov	r0, sp
    141c:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    141e:	2500      	movs	r5, #0
			synchronized {
    1420:	f7ff ff4d 	bl	12be <_ZN7__GuardD1Ev>
    1424:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    1426:	42bd      	cmp	r5, r7
    1428:	d002      	beq.n	1430 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    142a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    142c:	4293      	cmp	r3, r2
    142e:	d326      	bcc.n	147e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    1430:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1432:	4293      	cmp	r3, r2
    1434:	d1b4      	bne.n	13a0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    1436:	2300      	movs	r3, #0
				synchronized {
    1438:	4668      	mov	r0, sp
				first1 = 0;
    143a:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    143c:	6123      	str	r3, [r4, #16]
				synchronized {
    143e:	f7ff ff37 	bl	12b0 <_ZN7__GuardC1Ev>
					ready1 = false;
    1442:	0027      	movs	r7, r4
					if (notify) {
    1444:	0022      	movs	r2, r4
					ready1 = false;
    1446:	2100      	movs	r1, #0
    1448:	9b01      	ldr	r3, [sp, #4]
    144a:	3734      	adds	r7, #52	; 0x34
    144c:	3b01      	subs	r3, #1
					if (notify) {
    144e:	3235      	adds	r2, #53	; 0x35
				synchronized {
    1450:	1c58      	adds	r0, r3, #1
    1452:	d0a1      	beq.n	1398 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    1454:	7039      	strb	r1, [r7, #0]
					if (notify) {
    1456:	7810      	ldrb	r0, [r2, #0]
    1458:	1e5e      	subs	r6, r3, #1
    145a:	2800      	cmp	r0, #0
    145c:	d005      	beq.n	146a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    145e:	7011      	strb	r1, [r2, #0]
						release();
    1460:	0020      	movs	r0, r4
    1462:	9301      	str	r3, [sp, #4]
    1464:	f7ff ff62 	bl	132c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1468:	e7eb      	b.n	1442 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    146a:	0033      	movs	r3, r6
    146c:	e7f0      	b.n	1450 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    146e:	1c5a      	adds	r2, r3, #1
    1470:	61e2      	str	r2, [r4, #28]
    1472:	69a2      	ldr	r2, [r4, #24]
    1474:	18d3      	adds	r3, r2, r3
    1476:	781b      	ldrb	r3, [r3, #0]
    1478:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    147a:	3501      	adds	r5, #1
    147c:	e799      	b.n	13b2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    147e:	1c5a      	adds	r2, r3, #1
    1480:	62e2      	str	r2, [r4, #44]	; 0x2c
    1482:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1484:	18d3      	adds	r3, r2, r3
    1486:	781b      	ldrb	r3, [r3, #0]
    1488:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    148a:	3501      	adds	r5, #1
    148c:	e7ca      	b.n	1424 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

0000148e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    148e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1490:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    1492:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1494:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    1496:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1498:	3108      	adds	r1, #8
    149a:	6818      	ldr	r0, [r3, #0]
    149c:	0149      	lsls	r1, r1, #5
    149e:	1841      	adds	r1, r0, r1
    14a0:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    14a2:	07c0      	lsls	r0, r0, #31
    14a4:	d527      	bpl.n	14f6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    14a6:	2501      	movs	r5, #1
    14a8:	0152      	lsls	r2, r2, #5
    14aa:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    14ac:	189b      	adds	r3, r3, r2
    14ae:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    14b0:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    14b2:	0492      	lsls	r2, r2, #18
    14b4:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    14b6:	2900      	cmp	r1, #0
    14b8:	d121      	bne.n	14fe <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    14ba:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    14bc:	6a22      	ldr	r2, [r4, #32]
    14be:	2a00      	cmp	r2, #0
    14c0:	d03e      	beq.n	1540 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    14c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    14c4:	6165      	str	r5, [r4, #20]
					synchronized {
    14c6:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    14c8:	605a      	str	r2, [r3, #4]
					synchronized {
    14ca:	f7ff fef1 	bl	12b0 <_ZN7__GuardC1Ev>
						if (ready1) {
    14ce:	0027      	movs	r7, r4
    14d0:	0021      	movs	r1, r4
    14d2:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    14d4:	1d66      	adds	r6, r4, #5
    14d6:	3b01      	subs	r3, #1
						if (ready1) {
    14d8:	3734      	adds	r7, #52	; 0x34
    14da:	3135      	adds	r1, #53	; 0x35
					synchronized {
    14dc:	1c5a      	adds	r2, r3, #1
    14de:	d02b      	beq.n	1538 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    14e0:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    14e2:	783a      	ldrb	r2, [r7, #0]
    14e4:	1e58      	subs	r0, r3, #1
    14e6:	b2d2      	uxtb	r2, r2
    14e8:	2a00      	cmp	r2, #0
    14ea:	d005      	beq.n	14f8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    14ec:	9301      	str	r3, [sp, #4]
							return;
    14ee:	4668      	mov	r0, sp
							notify = true;
    14f0:	700d      	strb	r5, [r1, #0]
							return;
    14f2:	f7ff fee4 	bl	12be <_ZN7__GuardD1Ev>
	}
    14f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    14f8:	700a      	strb	r2, [r1, #0]
					synchronized {
    14fa:	0003      	movs	r3, r0
    14fc:	e7ee      	b.n	14dc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    14fe:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    1500:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1502:	2a00      	cmp	r2, #0
    1504:	d01c      	beq.n	1540 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    1506:	2200      	movs	r2, #0
    1508:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    150a:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    150c:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    150e:	605a      	str	r2, [r3, #4]
					synchronized {
    1510:	f7ff fece 	bl	12b0 <_ZN7__GuardC1Ev>
						ready1 = true;
    1514:	0026      	movs	r6, r4
    1516:	0021      	movs	r1, r4
    1518:	9b01      	ldr	r3, [sp, #4]
    151a:	3634      	adds	r6, #52	; 0x34
    151c:	3b01      	subs	r3, #1
						if (ready0) {
    151e:	1d67      	adds	r7, r4, #5
    1520:	3135      	adds	r1, #53	; 0x35
					synchronized {
    1522:	1c5a      	adds	r2, r3, #1
    1524:	d008      	beq.n	1538 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    1526:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    1528:	7ffa      	ldrb	r2, [r7, #31]
    152a:	1e58      	subs	r0, r3, #1
    152c:	b2d2      	uxtb	r2, r2
    152e:	2a00      	cmp	r2, #0
    1530:	d1dc      	bne.n	14ec <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    1532:	700a      	strb	r2, [r1, #0]
					synchronized {
    1534:	0003      	movs	r3, r0
    1536:	e7f4      	b.n	1522 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    1538:	4668      	mov	r0, sp
    153a:	9301      	str	r3, [sp, #4]
    153c:	f7ff febf 	bl	12be <_ZN7__GuardD1Ev>
			release();
    1540:	0020      	movs	r0, r4
    1542:	f7ff fef3 	bl	132c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1546:	e7d6      	b.n	14f6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00001548 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    1548:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    154a:	466b      	mov	r3, sp
    154c:	1ddc      	adds	r4, r3, #7
    154e:	2300      	movs	r3, #0
{
    1550:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    1552:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    1554:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    1556:	f004 f831 	bl	55bc <_Z16CDC_GetInterfacePh>
    155a:	682b      	ldr	r3, [r5, #0]
    155c:	1818      	adds	r0, r3, r0
    155e:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    1560:	f004 f8d0 	bl	5704 <_Z12PluggableUSBv>
    1564:	0021      	movs	r1, r4
    1566:	f004 f889 	bl	567c <_ZN13PluggableUSB_12getInterfaceEPh>
    156a:	682b      	ldr	r3, [r5, #0]
    156c:	1818      	adds	r0, r3, r0
    156e:	6028      	str	r0, [r5, #0]
	return interfaces;
    1570:	7820      	ldrb	r0, [r4, #0]
}
    1572:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00001574 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    1574:	2903      	cmp	r1, #3
    1576:	d10e      	bne.n	1596 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    1578:	2280      	movs	r2, #128	; 0x80
    157a:	4b0e      	ldr	r3, [pc, #56]	; (15b4 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    157c:	3162      	adds	r1, #98	; 0x62
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	31ff      	adds	r1, #255	; 0xff
    1582:	5c58      	ldrb	r0, [r3, r1]
    1584:	4252      	negs	r2, r2
    1586:	4302      	orrs	r2, r0
    1588:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    158a:	2268      	movs	r2, #104	; 0x68
    158c:	3963      	subs	r1, #99	; 0x63
    158e:	39ff      	subs	r1, #255	; 0xff
    1590:	32ff      	adds	r2, #255	; 0xff
    1592:	5499      	strb	r1, [r3, r2]
}
    1594:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    1596:	2901      	cmp	r1, #1
    1598:	d1fc      	bne.n	1594 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    159a:	2280      	movs	r2, #128	; 0x80
    159c:	4b05      	ldr	r3, [pc, #20]	; (15b4 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    159e:	3124      	adds	r1, #36	; 0x24
    15a0:	681b      	ldr	r3, [r3, #0]
    15a2:	31ff      	adds	r1, #255	; 0xff
    15a4:	5c58      	ldrb	r0, [r3, r1]
    15a6:	4252      	negs	r2, r2
    15a8:	4302      	orrs	r2, r0
    15aa:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    15ac:	3923      	subs	r1, #35	; 0x23
    15ae:	39ff      	subs	r1, #255	; 0xff
    15b0:	2228      	movs	r2, #40	; 0x28
    15b2:	e7ed      	b.n	1590 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    15b4:	20000680 	.word	0x20000680

000015b8 <_ZN14USBDeviceClass4initEv>:
{
    15b8:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
    15ba:	2500      	movs	r5, #0
    15bc:	4b2f      	ldr	r3, [pc, #188]	; (167c <_ZN14USBDeviceClass4initEv+0xc4>)
	pinMode(PIN_LED_TXL, OUTPUT);
    15be:	2101      	movs	r1, #1
{
    15c0:	0004      	movs	r4, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    15c2:	201f      	movs	r0, #31
	txLEDPulse = 0;
    15c4:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    15c6:	f000 fe11 	bl	21ec <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    15ca:	2101      	movs	r1, #1
    15cc:	201f      	movs	r0, #31
    15ce:	f000 fe59 	bl	2284 <digitalWrite>
	rxLEDPulse = 0;
    15d2:	4b2b      	ldr	r3, [pc, #172]	; (1680 <_ZN14USBDeviceClass4initEv+0xc8>)
	pinMode(PIN_LED_RXL, OUTPUT);
    15d4:	2101      	movs	r1, #1
    15d6:	201e      	movs	r0, #30
	rxLEDPulse = 0;
    15d8:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    15da:	f000 fe07 	bl	21ec <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    15de:	2101      	movs	r1, #1
    15e0:	201e      	movs	r0, #30
    15e2:	f000 fe4f 	bl	2284 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    15e6:	2320      	movs	r3, #32
    15e8:	4a26      	ldr	r2, [pc, #152]	; (1684 <_ZN14USBDeviceClass4initEv+0xcc>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    15ea:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    15ec:	69d1      	ldr	r1, [r2, #28]
    15ee:	430b      	orrs	r3, r1
    15f0:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    15f2:	2201      	movs	r2, #1
    15f4:	4924      	ldr	r1, [pc, #144]	; (1688 <_ZN14USBDeviceClass4initEv+0xd0>)
    15f6:	780b      	ldrb	r3, [r1, #0]
    15f8:	4313      	orrs	r3, r2
    15fa:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    15fc:	4b23      	ldr	r3, [pc, #140]	; (168c <_ZN14USBDeviceClass4initEv+0xd4>)
    15fe:	7819      	ldrb	r1, [r3, #0]
    1600:	4381      	bics	r1, r0
    1602:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    1604:	2106      	movs	r1, #6
    1606:	781d      	ldrb	r5, [r3, #0]
    1608:	4329      	orrs	r1, r5
    160a:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    160c:	4920      	ldr	r1, [pc, #128]	; (1690 <_ZN14USBDeviceClass4initEv+0xd8>)
    160e:	780d      	ldrb	r5, [r1, #0]
    1610:	432a      	orrs	r2, r5
    1612:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    1614:	781a      	ldrb	r2, [r3, #0]
    1616:	4002      	ands	r2, r0
    1618:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    161a:	2260      	movs	r2, #96	; 0x60
    161c:	7819      	ldrb	r1, [r3, #0]
    161e:	430a      	orrs	r2, r1
    1620:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    1622:	4b1c      	ldr	r3, [pc, #112]	; (1694 <_ZN14USBDeviceClass4initEv+0xdc>)
    1624:	4a1c      	ldr	r2, [pc, #112]	; (1698 <_ZN14USBDeviceClass4initEv+0xe0>)
    1626:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    1628:	785a      	ldrb	r2, [r3, #1]
    162a:	09d2      	lsrs	r2, r2, #7
    162c:	d1fc      	bne.n	1628 <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
    162e:	481b      	ldr	r0, [pc, #108]	; (169c <_ZN14USBDeviceClass4initEv+0xe4>)
    1630:	f7ff f97c 	bl	92c <USB_SetHandler>
	usbd.reset();
    1634:	4d1a      	ldr	r5, [pc, #104]	; (16a0 <_ZN14USBDeviceClass4initEv+0xe8>)
    1636:	0028      	movs	r0, r5
    1638:	f7ff fdf8 	bl	122c <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    163c:	0028      	movs	r0, r5
    163e:	f7ff fe07 	bl	1250 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    1642:	217f      	movs	r1, #127	; 0x7f
    1644:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1646:	20c1      	movs	r0, #193	; 0xc1
    1648:	781a      	ldrb	r2, [r3, #0]
    164a:	0080      	lsls	r0, r0, #2
    164c:	400a      	ands	r2, r1
    164e:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    1650:	2204      	movs	r2, #4
    1652:	7819      	ldrb	r1, [r3, #0]
    1654:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    1656:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    1658:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    165a:	891a      	ldrh	r2, [r3, #8]
    165c:	438a      	bics	r2, r1
    165e:	4911      	ldr	r1, [pc, #68]	; (16a4 <_ZN14USBDeviceClass4initEv+0xec>)
    1660:	811a      	strh	r2, [r3, #8]
    1662:	580a      	ldr	r2, [r1, r0]
    1664:	0212      	lsls	r2, r2, #8
    1666:	0a12      	lsrs	r2, r2, #8
    1668:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    166a:	2280      	movs	r2, #128	; 0x80
    166c:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    166e:	7819      	ldrb	r1, [r3, #0]
    1670:	3a7e      	subs	r2, #126	; 0x7e
    1672:	430a      	orrs	r2, r1
    1674:	701a      	strb	r2, [r3, #0]
	initialized = true;
    1676:	2301      	movs	r3, #1
    1678:	7023      	strb	r3, [r4, #0]
}
    167a:	bd70      	pop	{r4, r5, r6, pc}
    167c:	200001e9 	.word	0x200001e9
    1680:	200001e8 	.word	0x200001e8
    1684:	40000400 	.word	0x40000400
    1688:	41004458 	.word	0x41004458
    168c:	4100443c 	.word	0x4100443c
    1690:	41004459 	.word	0x41004459
    1694:	40000c00 	.word	0x40000c00
    1698:	00004006 	.word	0x00004006
    169c:	00002079 	.word	0x00002079
    16a0:	20000680 	.word	0x20000680
    16a4:	e000e100 	.word	0xe000e100

000016a8 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    16a8:	7800      	ldrb	r0, [r0, #0]
    16aa:	2800      	cmp	r0, #0
    16ac:	d010      	beq.n	16d0 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    16ae:	2101      	movs	r1, #1
    16b0:	4b08      	ldr	r3, [pc, #32]	; (16d4 <_ZN14USBDeviceClass6attachEv+0x2c>)
    16b2:	681b      	ldr	r3, [r3, #0]
    16b4:	891a      	ldrh	r2, [r3, #8]
    16b6:	438a      	bics	r2, r1
    16b8:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    16ba:	2208      	movs	r2, #8
    16bc:	8b19      	ldrh	r1, [r3, #24]
    16be:	430a      	orrs	r2, r1
    16c0:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    16c2:	2204      	movs	r2, #4
    16c4:	8b19      	ldrh	r1, [r3, #24]
    16c6:	430a      	orrs	r2, r1
    16c8:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    16ca:	2200      	movs	r2, #0
    16cc:	4b02      	ldr	r3, [pc, #8]	; (16d8 <_ZN14USBDeviceClass6attachEv+0x30>)
    16ce:	601a      	str	r2, [r3, #0]
}
    16d0:	4770      	bx	lr
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	20000680 	.word	0x20000680
    16d8:	20000678 	.word	0x20000678

000016dc <_ZN14USBDeviceClass10setAddressEm>:
{
    16dc:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    16de:	4a0f      	ldr	r2, [pc, #60]	; (171c <_ZN14USBDeviceClass10setAddressEm+0x40>)
    16e0:	6993      	ldr	r3, [r2, #24]
    16e2:	0b9b      	lsrs	r3, r3, #14
    16e4:	039b      	lsls	r3, r3, #14
    16e6:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    16e8:	6813      	ldr	r3, [r2, #0]
    16ea:	2202      	movs	r2, #2
    16ec:	33ff      	adds	r3, #255	; 0xff
    16ee:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    16f0:	7998      	ldrb	r0, [r3, #6]
    16f2:	3a82      	subs	r2, #130	; 0x82
    16f4:	4302      	orrs	r2, r0
    16f6:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    16f8:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    16fa:	0792      	lsls	r2, r2, #30
    16fc:	d5fc      	bpl.n	16f8 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    16fe:	247f      	movs	r4, #127	; 0x7f
    1700:	4a07      	ldr	r2, [pc, #28]	; (1720 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    1702:	4021      	ands	r1, r4
    1704:	7a93      	ldrb	r3, [r2, #10]
    1706:	0008      	movs	r0, r1
    1708:	43a3      	bics	r3, r4
    170a:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    170c:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    170e:	4301      	orrs	r1, r0
    1710:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    1712:	7a91      	ldrb	r1, [r2, #10]
    1714:	425b      	negs	r3, r3
    1716:	430b      	orrs	r3, r1
    1718:	7293      	strb	r3, [r2, #10]
}
    171a:	bd10      	pop	{r4, pc}
    171c:	20000680 	.word	0x20000680
    1720:	41005000 	.word	0x41005000

00001724 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    1724:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    1726:	790b      	ldrb	r3, [r1, #4]
{
    1728:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    172a:	2b00      	cmp	r3, #0
    172c:	d10c      	bne.n	1748 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    172e:	0008      	movs	r0, r1
    1730:	f003 ff52 	bl	55d8 <_Z9CDC_SetupR8USBSetup>
    1734:	2800      	cmp	r0, #0
    1736:	d001      	beq.n	173c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    1738:	2001      	movs	r0, #1
}
    173a:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    173c:	4a09      	ldr	r2, [pc, #36]	; (1764 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    173e:	6993      	ldr	r3, [r2, #24]
    1740:	0b9b      	lsrs	r3, r3, #14
    1742:	039b      	lsls	r3, r3, #14
    1744:	6193      	str	r3, [r2, #24]
    1746:	e7f7      	b.n	1738 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    1748:	f003 ffdc 	bl	5704 <_Z12PluggableUSBv>
    174c:	0021      	movs	r1, r4
    174e:	f003 ffc8 	bl	56e2 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    1752:	2800      	cmp	r0, #0
    1754:	d1f0      	bne.n	1738 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    1756:	4a03      	ldr	r2, [pc, #12]	; (1764 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    1758:	6993      	ldr	r3, [r2, #24]
    175a:	0b9b      	lsrs	r3, r3, #14
    175c:	039b      	lsls	r3, r3, #14
    175e:	6193      	str	r3, [r2, #24]
    1760:	e7eb      	b.n	173a <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	20000680 	.word	0x20000680

00001768 <_ZN14USBDeviceClass6initEPEmm>:
{
    1768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    176a:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    176c:	2a83      	cmp	r2, #131	; 0x83
    176e:	d119      	bne.n	17a4 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1770:	b2cb      	uxtb	r3, r1
    1772:	4c32      	ldr	r4, [pc, #200]	; (183c <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    1774:	015a      	lsls	r2, r3, #5
    1776:	18a2      	adds	r2, r4, r2
    1778:	6991      	ldr	r1, [r2, #24]
    177a:	4831      	ldr	r0, [pc, #196]	; (1840 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    177c:	01ad      	lsls	r5, r5, #6
    177e:	4008      	ands	r0, r1
    1780:	21c0      	movs	r1, #192	; 0xc0
    1782:	0589      	lsls	r1, r1, #22
    1784:	4301      	orrs	r1, r0
    1786:	6191      	str	r1, [r2, #24]
    1788:	492e      	ldr	r1, [pc, #184]	; (1844 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    178a:	6820      	ldr	r0, [r4, #0]
    178c:	194d      	adds	r5, r1, r5
    178e:	2170      	movs	r1, #112	; 0x70
    1790:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1792:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1794:	015b      	lsls	r3, r3, #5
    1796:	5c1a      	ldrb	r2, [r3, r0]
    1798:	438a      	bics	r2, r1
    179a:	0011      	movs	r1, r2
    179c:	2240      	movs	r2, #64	; 0x40
    179e:	430a      	orrs	r2, r1
    17a0:	541a      	strb	r2, [r3, r0]
}
    17a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    17a4:	2a02      	cmp	r2, #2
    17a6:	d144      	bne.n	1832 <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
    17a8:	008b      	lsls	r3, r1, #2
    17aa:	9301      	str	r3, [sp, #4]
    17ac:	4b26      	ldr	r3, [pc, #152]	; (1848 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    17ae:	008a      	lsls	r2, r1, #2
    17b0:	58d6      	ldr	r6, [r2, r3]
    17b2:	2e00      	cmp	r6, #0
    17b4:	d1f5      	bne.n	17a2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    17b6:	2038      	movs	r0, #56	; 0x38
    17b8:	f003 fc5f 	bl	507a <_Znwj>
		notify(false)
    17bc:	4b23      	ldr	r3, [pc, #140]	; (184c <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    17be:	4f1f      	ldr	r7, [pc, #124]	; (183c <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    17c0:	6003      	str	r3, [r0, #0]
    17c2:	2380      	movs	r3, #128	; 0x80
    17c4:	005b      	lsls	r3, r3, #1
    17c6:	60c3      	str	r3, [r0, #12]
    17c8:	1d43      	adds	r3, r0, #5
    17ca:	6206      	str	r6, [r0, #32]
    17cc:	6085      	str	r5, [r0, #8]
    17ce:	6106      	str	r6, [r0, #16]
    17d0:	6146      	str	r6, [r0, #20]
    17d2:	61c6      	str	r6, [r0, #28]
    17d4:	0004      	movs	r4, r0
    17d6:	6047      	str	r7, [r0, #4]
    17d8:	77de      	strb	r6, [r3, #31]
    17da:	62c6      	str	r6, [r0, #44]	; 0x2c
    17dc:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    17de:	2080      	movs	r0, #128	; 0x80
		notify(false)
    17e0:	332f      	adds	r3, #47	; 0x2f
    17e2:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    17e4:	0040      	lsls	r0, r0, #1
		notify(false)
    17e6:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    17e8:	f004 f942 	bl	5a70 <malloc>
    17ec:	0006      	movs	r6, r0
    17ee:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    17f0:	2080      	movs	r0, #128	; 0x80
    17f2:	0040      	lsls	r0, r0, #1
    17f4:	f004 f93c 	bl	5a70 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    17f8:	b2ed      	uxtb	r5, r5
    17fa:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    17fc:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    17fe:	18fb      	adds	r3, r7, r3
    1800:	689a      	ldr	r2, [r3, #8]
    1802:	490f      	ldr	r1, [pc, #60]	; (1840 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    1804:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1806:	4011      	ands	r1, r2
    1808:	22c0      	movs	r2, #192	; 0xc0
    180a:	0592      	lsls	r2, r2, #22
    180c:	430a      	orrs	r2, r1
    180e:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    1810:	683a      	ldr	r2, [r7, #0]
    1812:	3508      	adds	r5, #8
    1814:	016d      	lsls	r5, r5, #5
    1816:	5ca9      	ldrb	r1, [r5, r2]
    1818:	4381      	bics	r1, r0
    181a:	0008      	movs	r0, r1
    181c:	2103      	movs	r1, #3
    181e:	4301      	orrs	r1, r0
    1820:	54a9      	strb	r1, [r5, r2]
		release();
    1822:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1824:	605e      	str	r6, [r3, #4]
		release();
    1826:	f7ff fd81 	bl	132c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    182a:	4b07      	ldr	r3, [pc, #28]	; (1848 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    182c:	9a01      	ldr	r2, [sp, #4]
    182e:	50d4      	str	r4, [r2, r3]
    1830:	e7b7      	b.n	17a2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    1832:	0011      	movs	r1, r2
    1834:	0028      	movs	r0, r5
    1836:	f7ff fc91 	bl	115c <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    183a:	e7b2      	b.n	17a2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    183c:	20000680 	.word	0x20000680
    1840:	8fffffff 	.word	0x8fffffff
    1844:	200001f4 	.word	0x200001f4
    1848:	200001cc 	.word	0x200001cc
    184c:	00005f04 	.word	0x00005f04

00001850 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    1850:	b570      	push	{r4, r5, r6, lr}
    1852:	0005      	movs	r5, r0
    1854:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    1856:	4b06      	ldr	r3, [pc, #24]	; (1870 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    1858:	00a2      	lsls	r2, r4, #2
    185a:	58d2      	ldr	r2, [r2, r3]
    185c:	2a00      	cmp	r2, #0
    185e:	d005      	beq.n	186c <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    1860:	0021      	movs	r1, r4
    1862:	0028      	movs	r0, r5
    1864:	f7ff ff80 	bl	1768 <_ZN14USBDeviceClass6initEPEmm>
    1868:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    186a:	e7f4      	b.n	1856 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    186c:	bd70      	pop	{r4, r5, r6, pc}
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	2000001c 	.word	0x2000001c

00001874 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    1874:	4b08      	ldr	r3, [pc, #32]	; (1898 <_ZN14USBDeviceClass9availableEm+0x24>)
    1876:	008a      	lsls	r2, r1, #2
    1878:	58d0      	ldr	r0, [r2, r3]
{
    187a:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    187c:	2800      	cmp	r0, #0
    187e:	d003      	beq.n	1888 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    1880:	6803      	ldr	r3, [r0, #0]
    1882:	689b      	ldr	r3, [r3, #8]
    1884:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    1886:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1888:	b2c9      	uxtb	r1, r1
    188a:	4b04      	ldr	r3, [pc, #16]	; (189c <_ZN14USBDeviceClass9availableEm+0x28>)
    188c:	0149      	lsls	r1, r1, #5
    188e:	1859      	adds	r1, r3, r1
    1890:	6888      	ldr	r0, [r1, #8]
    1892:	0480      	lsls	r0, r0, #18
    1894:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    1896:	e7f6      	b.n	1886 <_ZN14USBDeviceClass9availableEm+0x12>
    1898:	200001cc 	.word	0x200001cc
    189c:	20000680 	.word	0x20000680

000018a0 <_ZN14USBDeviceClass5flushEm>:
{
    18a0:	b510      	push	{r4, lr}
    18a2:	000c      	movs	r4, r1
	if (available(ep)) {
    18a4:	f7ff ffe6 	bl	1874 <_ZN14USBDeviceClass9availableEm>
    18a8:	2800      	cmp	r0, #0
    18aa:	d00c      	beq.n	18c6 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    18ac:	4b06      	ldr	r3, [pc, #24]	; (18c8 <_ZN14USBDeviceClass5flushEm+0x28>)
    18ae:	b2e4      	uxtb	r4, r4
    18b0:	681b      	ldr	r3, [r3, #0]
    18b2:	3408      	adds	r4, #8
    18b4:	0164      	lsls	r4, r4, #5
    18b6:	191c      	adds	r4, r3, r4
    18b8:	2380      	movs	r3, #128	; 0x80
    18ba:	7962      	ldrb	r2, [r4, #5]
    18bc:	425b      	negs	r3, r3
    18be:	4313      	orrs	r3, r2
    18c0:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    18c2:	2302      	movs	r3, #2
    18c4:	71e3      	strb	r3, [r4, #7]
}
    18c6:	bd10      	pop	{r4, pc}
    18c8:	20000680 	.word	0x20000680

000018cc <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    18cc:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    18ce:	4b13      	ldr	r3, [pc, #76]	; (191c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    18d0:	b2cc      	uxtb	r4, r1
    18d2:	4a13      	ldr	r2, [pc, #76]	; (1920 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    18d4:	0160      	lsls	r0, r4, #5
    18d6:	0189      	lsls	r1, r1, #6
    18d8:	1859      	adds	r1, r3, r1
    18da:	1813      	adds	r3, r2, r0
    18dc:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    18de:	6899      	ldr	r1, [r3, #8]
    18e0:	4d10      	ldr	r5, [pc, #64]	; (1924 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    18e2:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    18e4:	400d      	ands	r5, r1
    18e6:	2180      	movs	r1, #128	; 0x80
    18e8:	0289      	lsls	r1, r1, #10
    18ea:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    18ec:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    18ee:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    18f0:	6899      	ldr	r1, [r3, #8]
    18f2:	0b89      	lsrs	r1, r1, #14
    18f4:	0389      	lsls	r1, r1, #14
    18f6:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    18f8:	6811      	ldr	r1, [r2, #0]
    18fa:	0163      	lsls	r3, r4, #5
    18fc:	18cb      	adds	r3, r1, r3
    18fe:	791e      	ldrb	r6, [r3, #4]
    1900:	4335      	orrs	r5, r6
    1902:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    1904:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    1906:	066d      	lsls	r5, r5, #25
    1908:	d5fc      	bpl.n	1904 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    190a:	0164      	lsls	r4, r4, #5
    190c:	1909      	adds	r1, r1, r4
    190e:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    1910:	07db      	lsls	r3, r3, #31
    1912:	d5fc      	bpl.n	190e <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1914:	1812      	adds	r2, r2, r0
    1916:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    1918:	b2c0      	uxtb	r0, r0
}
    191a:	bd70      	pop	{r4, r5, r6, pc}
    191c:	200003b4 	.word	0x200003b4
    1920:	20000680 	.word	0x20000680
    1924:	f0003fff 	.word	0xf0003fff

00001928 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    1928:	b570      	push	{r4, r5, r6, lr}
    192a:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    192c:	2240      	movs	r2, #64	; 0x40
    192e:	4b0b      	ldr	r3, [pc, #44]	; (195c <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    1930:	000d      	movs	r5, r1
    1932:	681b      	ldr	r3, [r3, #0]
    1934:	33ff      	adds	r3, #255	; 0xff
    1936:	7959      	ldrb	r1, [r3, #5]
    1938:	430a      	orrs	r2, r1
    193a:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    193c:	2100      	movs	r1, #0
    193e:	f7ff ffc5 	bl	18cc <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    1942:	42a0      	cmp	r0, r4
    1944:	d900      	bls.n	1948 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    1946:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    1948:	2300      	movs	r3, #0
		data[i] = buffer[i];
    194a:	4905      	ldr	r1, [pc, #20]	; (1960 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    194c:	42a3      	cmp	r3, r4
    194e:	d003      	beq.n	1958 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    1950:	5c5a      	ldrb	r2, [r3, r1]
    1952:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    1954:	3301      	adds	r3, #1
    1956:	e7f9      	b.n	194c <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    1958:	bd70      	pop	{r4, r5, r6, pc}
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	20000680 	.word	0x20000680
    1960:	200003b4 	.word	0x200003b4

00001964 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    1964:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1966:	b2c9      	uxtb	r1, r1
    1968:	480b      	ldr	r0, [pc, #44]	; (1998 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    196a:	0149      	lsls	r1, r1, #5
    196c:	1842      	adds	r2, r0, r1
    196e:	6893      	ldr	r3, [r2, #8]
    1970:	049b      	lsls	r3, r3, #18
    1972:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    1974:	2b3f      	cmp	r3, #63	; 0x3f
    1976:	dd0b      	ble.n	1990 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1978:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    197a:	3b40      	subs	r3, #64	; 0x40
    197c:	049b      	lsls	r3, r3, #18
    197e:	0ba4      	lsrs	r4, r4, #14
    1980:	0c9b      	lsrs	r3, r3, #18
    1982:	03a4      	lsls	r4, r4, #14
    1984:	4323      	orrs	r3, r4
    1986:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1988:	1841      	adds	r1, r0, r1
    198a:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    198c:	b2c0      	uxtb	r0, r0
}
    198e:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1990:	6893      	ldr	r3, [r2, #8]
    1992:	0b9b      	lsrs	r3, r3, #14
    1994:	039b      	lsls	r3, r3, #14
    1996:	e7f6      	b.n	1986 <_ZN14USBDeviceClass7armRecvEm+0x22>
    1998:	20000680 	.word	0x20000680

0000199c <_ZN14USBDeviceClass4recvEmPvm>:
{
    199c:	b5f0      	push	{r4, r5, r6, r7, lr}
    199e:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    19a0:	4b30      	ldr	r3, [pc, #192]	; (1a64 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    19a2:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    19a4:	681b      	ldr	r3, [r3, #0]
{
    19a6:	0006      	movs	r6, r0
    19a8:	000d      	movs	r5, r1
    19aa:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    19ac:	2b00      	cmp	r3, #0
    19ae:	d055      	beq.n	1a5c <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
    19b0:	4f2d      	ldr	r7, [pc, #180]	; (1a68 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    19b2:	7839      	ldrb	r1, [r7, #0]
    19b4:	b2c9      	uxtb	r1, r1
    19b6:	2900      	cmp	r1, #0
    19b8:	d102      	bne.n	19c0 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    19ba:	201e      	movs	r0, #30
    19bc:	f000 fc62 	bl	2284 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
    19c0:	2364      	movs	r3, #100	; 0x64
    19c2:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
    19c4:	4b29      	ldr	r3, [pc, #164]	; (1a6c <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    19c6:	00aa      	lsls	r2, r5, #2
    19c8:	58d0      	ldr	r0, [r2, r3]
    19ca:	2800      	cmp	r0, #0
    19cc:	d008      	beq.n	19e0 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    19ce:	6803      	ldr	r3, [r0, #0]
    19d0:	0022      	movs	r2, r4
    19d2:	685b      	ldr	r3, [r3, #4]
    19d4:	9901      	ldr	r1, [sp, #4]
    19d6:	4798      	blx	r3
    19d8:	0004      	movs	r4, r0
}
    19da:	0020      	movs	r0, r4
    19dc:	b005      	add	sp, #20
    19de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    19e0:	0029      	movs	r1, r5
    19e2:	0030      	movs	r0, r6
    19e4:	f7ff ff46 	bl	1874 <_ZN14USBDeviceClass9availableEm>
    19e8:	4284      	cmp	r4, r0
    19ea:	d904      	bls.n	19f6 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    19ec:	0029      	movs	r1, r5
    19ee:	0030      	movs	r0, r6
    19f0:	f7ff ff40 	bl	1874 <_ZN14USBDeviceClass9availableEm>
    19f4:	0004      	movs	r4, r0
	armRecv(ep);
    19f6:	0029      	movs	r1, r5
    19f8:	0030      	movs	r0, r6
    19fa:	f7ff ffb3 	bl	1964 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    19fe:	2101      	movs	r1, #1
    1a00:	b2eb      	uxtb	r3, r5
    1a02:	4f1b      	ldr	r7, [pc, #108]	; (1a70 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    1a04:	9303      	str	r3, [sp, #12]
    1a06:	015b      	lsls	r3, r3, #5
    1a08:	9302      	str	r3, [sp, #8]
    1a0a:	9a02      	ldr	r2, [sp, #8]
    1a0c:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    1a0e:	9801      	ldr	r0, [sp, #4]
    1a10:	189b      	adds	r3, r3, r2
    1a12:	33ff      	adds	r3, #255	; 0xff
    1a14:	7a5a      	ldrb	r2, [r3, #9]
    1a16:	430a      	orrs	r2, r1
    1a18:	4916      	ldr	r1, [pc, #88]	; (1a74 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    1a1a:	725a      	strb	r2, [r3, #9]
    1a1c:	01ab      	lsls	r3, r5, #6
    1a1e:	18c9      	adds	r1, r1, r3
    1a20:	0022      	movs	r2, r4
    1a22:	f004 f848 	bl	5ab6 <memcpy>
	if (len && !available(ep)) {
    1a26:	2c00      	cmp	r4, #0
    1a28:	d0d7      	beq.n	19da <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    1a2a:	0029      	movs	r1, r5
    1a2c:	0030      	movs	r0, r6
    1a2e:	f7ff ff21 	bl	1874 <_ZN14USBDeviceClass9availableEm>
    1a32:	2800      	cmp	r0, #0
    1a34:	d1d1      	bne.n	19da <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1a36:	2140      	movs	r1, #64	; 0x40
    1a38:	9b03      	ldr	r3, [sp, #12]
    1a3a:	683a      	ldr	r2, [r7, #0]
    1a3c:	3308      	adds	r3, #8
    1a3e:	015b      	lsls	r3, r3, #5
    1a40:	18d3      	adds	r3, r2, r3
    1a42:	7918      	ldrb	r0, [r3, #4]
    1a44:	4301      	orrs	r1, r0
    1a46:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    1a48:	2101      	movs	r1, #1
    1a4a:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1a4c:	2101      	movs	r1, #1
    1a4e:	9b02      	ldr	r3, [sp, #8]
    1a50:	18d3      	adds	r3, r2, r3
    1a52:	33ff      	adds	r3, #255	; 0xff
    1a54:	7a9a      	ldrb	r2, [r3, #10]
    1a56:	430a      	orrs	r2, r1
    1a58:	729a      	strb	r2, [r3, #10]
    1a5a:	e7be      	b.n	19da <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    1a5c:	2401      	movs	r4, #1
    1a5e:	4264      	negs	r4, r4
    1a60:	e7bb      	b.n	19da <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	20000678 	.word	0x20000678
    1a68:	200001e8 	.word	0x200001e8
    1a6c:	200001cc 	.word	0x200001cc
    1a70:	20000680 	.word	0x20000680
    1a74:	200003b4 	.word	0x200003b4

00001a78 <_ZN14USBDeviceClass4recvEm>:
{
    1a78:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    1a7a:	466b      	mov	r3, sp
    1a7c:	1ddc      	adds	r4, r3, #7
    1a7e:	0022      	movs	r2, r4
    1a80:	2301      	movs	r3, #1
    1a82:	f7ff ff8b 	bl	199c <_ZN14USBDeviceClass4recvEmPvm>
    1a86:	2801      	cmp	r0, #1
    1a88:	d101      	bne.n	1a8e <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    1a8a:	7820      	ldrb	r0, [r4, #0]
}
    1a8c:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    1a8e:	2001      	movs	r0, #1
    1a90:	4240      	negs	r0, r0
    1a92:	e7fb      	b.n	1a8c <_ZN14USBDeviceClass4recvEm+0x14>

00001a94 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    1a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a96:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    1a98:	4b3a      	ldr	r3, [pc, #232]	; (1b84 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
    1a9a:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    1a9c:	681b      	ldr	r3, [r3, #0]
{
    1a9e:	000f      	movs	r7, r1
    1aa0:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d03f      	beq.n	1b26 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    1aa6:	2380      	movs	r3, #128	; 0x80
    1aa8:	01db      	lsls	r3, r3, #7
    1aaa:	429e      	cmp	r6, r3
    1aac:	d83b      	bhi.n	1b26 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    1aae:	4c36      	ldr	r4, [pc, #216]	; (1b88 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    1ab0:	7821      	ldrb	r1, [r4, #0]
    1ab2:	b2c9      	uxtb	r1, r1
    1ab4:	2900      	cmp	r1, #0
    1ab6:	d102      	bne.n	1abe <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    1ab8:	201f      	movs	r0, #31
    1aba:	f000 fbe3 	bl	2284 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    1abe:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    1ac0:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1ac2:	4a32      	ldr	r2, [pc, #200]	; (1b8c <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    1ac4:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1ac6:	01bb      	lsls	r3, r7, #6
    1ac8:	18d3      	adds	r3, r2, r3
    1aca:	9302      	str	r3, [sp, #8]
	while (len != 0)
    1acc:	2e00      	cmp	r6, #0
    1ace:	d02c      	beq.n	1b2a <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    1ad0:	4b2f      	ldr	r3, [pc, #188]	; (1b90 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	9303      	str	r3, [sp, #12]
    1ad6:	23ff      	movs	r3, #255	; 0xff
    1ad8:	403b      	ands	r3, r7
    1ada:	001c      	movs	r4, r3
    1adc:	9300      	str	r3, [sp, #0]
    1ade:	3408      	adds	r4, #8
    1ae0:	9b03      	ldr	r3, [sp, #12]
    1ae2:	0164      	lsls	r4, r4, #5
    1ae4:	191c      	adds	r4, r3, r4
    1ae6:	79a3      	ldrb	r3, [r4, #6]
    1ae8:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    1aea:	d021      	beq.n	1b30 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    1aec:	4b29      	ldr	r3, [pc, #164]	; (1b94 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    1aee:	492a      	ldr	r1, [pc, #168]	; (1b98 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    1af0:	6818      	ldr	r0, [r3, #0]
    1af2:	f003 fe23 	bl	573c <__udivsi3>
    1af6:	4b29      	ldr	r3, [pc, #164]	; (1b9c <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    1af8:	2117      	movs	r1, #23
    1afa:	4358      	muls	r0, r3
    1afc:	f003 fe1e 	bl	573c <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1b00:	4b27      	ldr	r3, [pc, #156]	; (1ba0 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1b02:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    1b04:	0792      	lsls	r2, r2, #30
    1b06:	d413      	bmi.n	1b30 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1b08:	5dda      	ldrb	r2, [r3, r7]
    1b0a:	2a00      	cmp	r2, #0
    1b0c:	d101      	bne.n	1b12 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    1b0e:	3801      	subs	r0, #1
    1b10:	d2f7      	bcs.n	1b02 <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    1b12:	2201      	movs	r2, #1
    1b14:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1b16:	9b00      	ldr	r3, [sp, #0]
    1b18:	015a      	lsls	r2, r3, #5
    1b1a:	4b1d      	ldr	r3, [pc, #116]	; (1b90 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    1b1c:	189b      	adds	r3, r3, r2
    1b1e:	699a      	ldr	r2, [r3, #24]
    1b20:	0b92      	lsrs	r2, r2, #14
    1b22:	0392      	lsls	r2, r2, #14
    1b24:	619a      	str	r2, [r3, #24]
					return -1;
    1b26:	2501      	movs	r5, #1
    1b28:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    1b2a:	0028      	movs	r0, r5
    1b2c:	b005      	add	sp, #20
    1b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    1b30:	2200      	movs	r2, #0
    1b32:	4b1b      	ldr	r3, [pc, #108]	; (1ba0 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    1b34:	0034      	movs	r4, r6
    1b36:	55da      	strb	r2, [r3, r7]
    1b38:	2e3f      	cmp	r6, #63	; 0x3f
    1b3a:	d900      	bls.n	1b3e <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
    1b3c:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1b3e:	0022      	movs	r2, r4
    1b40:	9901      	ldr	r1, [sp, #4]
    1b42:	9802      	ldr	r0, [sp, #8]
    1b44:	f003 ffb7 	bl	5ab6 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1b48:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1b4a:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1b4c:	015a      	lsls	r2, r3, #5
    1b4e:	4b10      	ldr	r3, [pc, #64]	; (1b90 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1b50:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1b52:	189b      	adds	r3, r3, r2
    1b54:	9a02      	ldr	r2, [sp, #8]
		written += length;
    1b56:	192d      	adds	r5, r5, r4
    1b58:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1b5a:	699a      	ldr	r2, [r3, #24]
		len -= length;
    1b5c:	1b36      	subs	r6, r6, r4
    1b5e:	0b92      	lsrs	r2, r2, #14
    1b60:	0392      	lsls	r2, r2, #14
    1b62:	430a      	orrs	r2, r1
    1b64:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1b66:	9b00      	ldr	r3, [sp, #0]
    1b68:	9a03      	ldr	r2, [sp, #12]
    1b6a:	3308      	adds	r3, #8
    1b6c:	015b      	lsls	r3, r3, #5
    1b6e:	18d3      	adds	r3, r2, r3
    1b70:	2202      	movs	r2, #2
    1b72:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1b74:	7959      	ldrb	r1, [r3, #5]
    1b76:	3a82      	subs	r2, #130	; 0x82
    1b78:	430a      	orrs	r2, r1
    1b7a:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    1b7c:	9b01      	ldr	r3, [sp, #4]
    1b7e:	191b      	adds	r3, r3, r4
    1b80:	9301      	str	r3, [sp, #4]
	while (len != 0)
    1b82:	e7a3      	b.n	1acc <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    1b84:	20000678 	.word	0x20000678
    1b88:	200001e9 	.word	0x200001e9
    1b8c:	200001f4 	.word	0x200001f4
    1b90:	20000680 	.word	0x20000680
    1b94:	20000044 	.word	0x20000044
    1b98:	000f4240 	.word	0x000f4240
    1b9c:	00011170 	.word	0x00011170
    1ba0:	200001eb 	.word	0x200001eb

00001ba4 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    1ba4:	b570      	push	{r4, r5, r6, lr}
    1ba6:	000d      	movs	r5, r1
    1ba8:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1baa:	4e0d      	ldr	r6, [pc, #52]	; (1be0 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    1bac:	01ab      	lsls	r3, r5, #6
    1bae:	18f6      	adds	r6, r6, r3
{
    1bb0:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1bb2:	0030      	movs	r0, r6
    1bb4:	0022      	movs	r2, r4
    1bb6:	f003 ff7e 	bl	5ab6 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1bba:	b2ed      	uxtb	r5, r5
    1bbc:	4909      	ldr	r1, [pc, #36]	; (1be4 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    1bbe:	016d      	lsls	r5, r5, #5
    1bc0:	194d      	adds	r5, r1, r5
    1bc2:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1bc4:	69ab      	ldr	r3, [r5, #24]
    1bc6:	4a08      	ldr	r2, [pc, #32]	; (1be8 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    1bc8:	0020      	movs	r0, r4
    1bca:	4013      	ands	r3, r2
    1bcc:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1bce:	69ab      	ldr	r3, [r5, #24]
    1bd0:	04a2      	lsls	r2, r4, #18
    1bd2:	0b9b      	lsrs	r3, r3, #14
    1bd4:	0c92      	lsrs	r2, r2, #18
    1bd6:	039b      	lsls	r3, r3, #14
    1bd8:	4313      	orrs	r3, r2
    1bda:	61ab      	str	r3, [r5, #24]
    1bdc:	bd70      	pop	{r4, r5, r6, pc}
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	200001f4 	.word	0x200001f4
    1be4:	20000680 	.word	0x20000680
    1be8:	f0003fff 	.word	0xf0003fff

00001bec <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1bee:	4b10      	ldr	r3, [pc, #64]	; (1c30 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    1bf0:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    1bf2:	781b      	ldrb	r3, [r3, #0]
{
    1bf4:	000f      	movs	r7, r1
    1bf6:	0015      	movs	r5, r2
	if (_dry_run == true)
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d10c      	bne.n	1c16 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    1bfc:	4b0d      	ldr	r3, [pc, #52]	; (1c34 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    1bfe:	0016      	movs	r6, r2
    1c00:	781c      	ldrb	r4, [r3, #0]
    1c02:	2c00      	cmp	r4, #0
    1c04:	d009      	beq.n	1c1a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    1c06:	4e0c      	ldr	r6, [pc, #48]	; (1c38 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    1c08:	480c      	ldr	r0, [pc, #48]	; (1c3c <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    1c0a:	8834      	ldrh	r4, [r6, #0]
    1c0c:	1900      	adds	r0, r0, r4
		_pack_size += len;
    1c0e:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    1c10:	f003 ff51 	bl	5ab6 <memcpy>
		_pack_size += len;
    1c14:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    1c16:	0028      	movs	r0, r5
    1c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    1c1a:	2e00      	cmp	r6, #0
    1c1c:	d0fb      	beq.n	1c16 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    1c1e:	193a      	adds	r2, r7, r4
    1c20:	0033      	movs	r3, r6
    1c22:	2100      	movs	r1, #0
    1c24:	9801      	ldr	r0, [sp, #4]
    1c26:	f7ff ffbd 	bl	1ba4 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    1c2a:	1824      	adds	r4, r4, r0
		len -= sent;
    1c2c:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    1c2e:	e7f4      	b.n	1c1a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    1c30:	20000574 	.word	0x20000574
    1c34:	20000675 	.word	0x20000675
    1c38:	20000676 	.word	0x20000676
    1c3c:	20000575 	.word	0x20000575

00001c40 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    1c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    1c42:	2000      	movs	r0, #0
{
    1c44:	af00      	add	r7, sp, #0
    1c46:	000e      	movs	r6, r1
    1c48:	0015      	movs	r5, r2
	if (maxlen < 2)
    1c4a:	2a01      	cmp	r2, #1
    1c4c:	dd26      	ble.n	1c9c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    1c4e:	1dd3      	adds	r3, r2, #7
    1c50:	466a      	mov	r2, sp
    1c52:	08db      	lsrs	r3, r3, #3
    1c54:	00db      	lsls	r3, r3, #3
    1c56:	1ad3      	subs	r3, r2, r3
    1c58:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1c5a:	0008      	movs	r0, r1
    1c5c:	f004 f816 	bl	5c8c <strlen>
	uint8_t buffer[maxlen];
    1c60:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    1c62:	2303      	movs	r3, #3
		buffer[i] = 0;
    1c64:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1c66:	3001      	adds	r0, #1
    1c68:	0040      	lsls	r0, r0, #1
    1c6a:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    1c6c:	7063      	strb	r3, [r4, #1]
    1c6e:	1e5a      	subs	r2, r3, #1
    1c70:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    1c72:	4295      	cmp	r5, r2
    1c74:	dd0b      	ble.n	1c8e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    1c76:	7830      	ldrb	r0, [r6, #0]
    1c78:	2800      	cmp	r0, #0
    1c7a:	d008      	beq.n	1c8e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    1c7c:	3601      	adds	r6, #1
    1c7e:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    1c80:	429d      	cmp	r5, r3
    1c82:	d003      	beq.n	1c8c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    1c84:	54e1      	strb	r1, [r4, r3]
    1c86:	3302      	adds	r3, #2
    1c88:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    1c8a:	e7f0      	b.n	1c6e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    1c8c:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    1c8e:	0021      	movs	r1, r4
    1c90:	4803      	ldr	r0, [pc, #12]	; (1ca0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    1c92:	f7ff ffab 	bl	1bec <_ZN14USBDeviceClass11sendControlEPKvm>
    1c96:	1e43      	subs	r3, r0, #1
    1c98:	4198      	sbcs	r0, r3
    1c9a:	b2c0      	uxtb	r0, r0
}
    1c9c:	46bd      	mov	sp, r7
    1c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ca0:	200001c8 	.word	0x200001c8

00001ca4 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    1ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    1ca6:	2700      	movs	r7, #0
	_dry_run = true;
    1ca8:	2601      	movs	r6, #1
{
    1caa:	b087      	sub	sp, #28
	_dry_run = true;
    1cac:	4b1e      	ldr	r3, [pc, #120]	; (1d28 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    1cae:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    1cb0:	a902      	add	r1, sp, #8
	_dry_run = true;
    1cb2:	701e      	strb	r6, [r3, #0]
{
    1cb4:	0005      	movs	r5, r0
	uint32_t total = 0;
    1cb6:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    1cb8:	f7ff fc46 	bl	1548 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1cbc:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    1cbe:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1cc0:	2209      	movs	r2, #9
    1cc2:	0039      	movs	r1, r7
    1cc4:	0020      	movs	r0, r4
    1cc6:	f003 feff 	bl	5ac8 <memset>
    1cca:	2309      	movs	r3, #9
    1ccc:	7023      	strb	r3, [r4, #0]
    1cce:	2302      	movs	r3, #2
    1cd0:	7063      	strb	r3, [r4, #1]
    1cd2:	339e      	adds	r3, #158	; 0x9e
    1cd4:	71e3      	strb	r3, [r4, #7]
    1cd6:	335a      	adds	r3, #90	; 0x5a
    1cd8:	7223      	strb	r3, [r4, #8]
    1cda:	9b02      	ldr	r3, [sp, #8]
    1cdc:	7166      	strb	r6, [r4, #5]
    1cde:	3309      	adds	r3, #9
    1ce0:	8063      	strh	r3, [r4, #2]
    1ce2:	466b      	mov	r3, sp
    1ce4:	791b      	ldrb	r3, [r3, #4]
    1ce6:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    1ce8:	4b0f      	ldr	r3, [pc, #60]	; (1d28 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    1cea:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1cec:	9b00      	ldr	r3, [sp, #0]
    1cee:	2b09      	cmp	r3, #9
    1cf0:	d107      	bne.n	1d02 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    1cf2:	001a      	movs	r2, r3
    1cf4:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    1cf6:	0028      	movs	r0, r5
    1cf8:	f7ff ff78 	bl	1bec <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1cfc:	2001      	movs	r0, #1
    1cfe:	b007      	add	sp, #28
    1d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    1d02:	4b0a      	ldr	r3, [pc, #40]	; (1d2c <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1d04:	2209      	movs	r2, #9
		_pack_message = true;
    1d06:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    1d08:	4e09      	ldr	r6, [pc, #36]	; (1d30 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1d0a:	0021      	movs	r1, r4
    1d0c:	0028      	movs	r0, r5
	total = 0;
    1d0e:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    1d10:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    1d12:	f7ff ff6b 	bl	1bec <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    1d16:	a902      	add	r1, sp, #8
    1d18:	0028      	movs	r0, r5
    1d1a:	f7ff fc15 	bl	1548 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    1d1e:	4b03      	ldr	r3, [pc, #12]	; (1d2c <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    1d20:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    1d22:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    1d24:	4903      	ldr	r1, [pc, #12]	; (1d34 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    1d26:	e7e6      	b.n	1cf6 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    1d28:	20000574 	.word	0x20000574
    1d2c:	20000675 	.word	0x20000675
    1d30:	20000676 	.word	0x20000676
    1d34:	20000575 	.word	0x20000575

00001d38 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    1d38:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    1d3a:	78ce      	ldrb	r6, [r1, #3]
{
    1d3c:	b092      	sub	sp, #72	; 0x48
    1d3e:	0005      	movs	r5, r0
    1d40:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    1d42:	2e02      	cmp	r6, #2
    1d44:	d108      	bne.n	1d58 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    1d46:	88c9      	ldrh	r1, [r1, #6]
    1d48:	482b      	ldr	r0, [pc, #172]	; (1df8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    1d4a:	f7ff ffab 	bl	1ca4 <_ZN14USBDeviceClass17sendConfigurationEm>
    1d4e:	1e43      	subs	r3, r0, #1
    1d50:	4198      	sbcs	r0, r3
    1d52:	b2c0      	uxtb	r0, r0
}
    1d54:	b012      	add	sp, #72	; 0x48
    1d56:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    1d58:	f003 fcd4 	bl	5704 <_Z12PluggableUSBv>
    1d5c:	0021      	movs	r1, r4
    1d5e:	f003 fca1 	bl	56a4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    1d62:	2800      	cmp	r0, #0
    1d64:	d003      	beq.n	1d6e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    1d66:	17c3      	asrs	r3, r0, #31
    1d68:	1a18      	subs	r0, r3, r0
    1d6a:	0fc0      	lsrs	r0, r0, #31
    1d6c:	e7f2      	b.n	1d54 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    1d6e:	2e01      	cmp	r6, #1
    1d70:	d10b      	bne.n	1d8a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    1d72:	88e2      	ldrh	r2, [r4, #6]
    1d74:	4921      	ldr	r1, [pc, #132]	; (1dfc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
		if (*desc_addr > setup.wLength) {
    1d76:	2a11      	cmp	r2, #17
    1d78:	dc10      	bgt.n	1d9c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    1d7a:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    1d7c:	2a00      	cmp	r2, #0
    1d7e:	d00d      	beq.n	1d9c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    1d80:	0028      	movs	r0, r5
    1d82:	f7ff ff33 	bl	1bec <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    1d86:	2001      	movs	r0, #1
    1d88:	e7e4      	b.n	1d54 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1d8a:	2e03      	cmp	r6, #3
    1d8c:	d1e2      	bne.n	1d54 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    1d8e:	78a3      	ldrb	r3, [r4, #2]
    1d90:	2b00      	cmp	r3, #0
    1d92:	d105      	bne.n	1da0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    1d94:	88e2      	ldrh	r2, [r4, #6]
    1d96:	491a      	ldr	r1, [pc, #104]	; (1e00 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    1d98:	2a03      	cmp	r2, #3
    1d9a:	ddee      	ble.n	1d7a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    1d9c:	780a      	ldrb	r2, [r1, #0]
    1d9e:	e7ef      	b.n	1d80 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    1da0:	2b02      	cmp	r3, #2
    1da2:	d105      	bne.n	1db0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1da4:	79a2      	ldrb	r2, [r4, #6]
    1da6:	4917      	ldr	r1, [pc, #92]	; (1e04 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1da8:	0028      	movs	r0, r5
    1daa:	f7ff ff49 	bl	1c40 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    1dae:	e7d1      	b.n	1d54 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    1db0:	2b01      	cmp	r3, #1
    1db2:	d102      	bne.n	1dba <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1db4:	79a2      	ldrb	r2, [r4, #6]
    1db6:	4914      	ldr	r1, [pc, #80]	; (1e08 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    1db8:	e7f6      	b.n	1da8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    1dba:	2b03      	cmp	r3, #3
    1dbc:	d1ca      	bne.n	1d54 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    1dbe:	4b13      	ldr	r3, [pc, #76]	; (1e0c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    1dc0:	a901      	add	r1, sp, #4
    1dc2:	6818      	ldr	r0, [r3, #0]
    1dc4:	f7ff f9b8 	bl	1138 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    1dc8:	4b11      	ldr	r3, [pc, #68]	; (1e10 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    1dca:	a903      	add	r1, sp, #12
    1dcc:	6818      	ldr	r0, [r3, #0]
    1dce:	f7ff f9b3 	bl	1138 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    1dd2:	4b10      	ldr	r3, [pc, #64]	; (1e14 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    1dd4:	a905      	add	r1, sp, #20
    1dd6:	6818      	ldr	r0, [r3, #0]
    1dd8:	f7ff f9ae 	bl	1138 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    1ddc:	4b0e      	ldr	r3, [pc, #56]	; (1e18 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    1dde:	a907      	add	r1, sp, #28
    1de0:	6818      	ldr	r0, [r3, #0]
    1de2:	f7ff f9a9 	bl	1138 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    1de6:	f003 fc8d 	bl	5704 <_Z12PluggableUSBv>
    1dea:	a909      	add	r1, sp, #36	; 0x24
    1dec:	f003 fc6a 	bl	56c4 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1df0:	79a2      	ldrb	r2, [r4, #6]
    1df2:	a901      	add	r1, sp, #4
    1df4:	e7d8      	b.n	1da8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	200001c8 	.word	0x200001c8
    1dfc:	00005f30 	.word	0x00005f30
    1e00:	00005f20 	.word	0x00005f20
    1e04:	00005f10 	.word	0x00005f10
    1e08:	00005f24 	.word	0x00005f24
    1e0c:	0080a00c 	.word	0x0080a00c
    1e10:	0080a040 	.word	0x0080a040
    1e14:	0080a044 	.word	0x0080a044
    1e18:	0080a048 	.word	0x0080a048

00001e1c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    1e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1e1e:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    1e20:	7848      	ldrb	r0, [r1, #1]
{
    1e22:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    1e24:	280b      	cmp	r0, #11
    1e26:	d811      	bhi.n	1e4c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    1e28:	f003 fc7e 	bl	5728 <__gnu_thumb1_case_uqi>
    1e2c:	2e101d06 	.word	0x2e101d06
    1e30:	70484310 	.word	0x70484310
    1e34:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    1e38:	7809      	ldrb	r1, [r1, #0]
    1e3a:	aa01      	add	r2, sp, #4
    1e3c:	2900      	cmp	r1, #0
    1e3e:	d107      	bne.n	1e50 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    1e40:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    1e42:	7011      	strb	r1, [r2, #0]
    1e44:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    1e46:	0030      	movs	r0, r6
    1e48:	f7ff feac 	bl	1ba4 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    1e4c:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    1e4e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    1e50:	2300      	movs	r3, #0
    1e52:	7013      	strb	r3, [r2, #0]
    1e54:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    1e56:	4b2e      	ldr	r3, [pc, #184]	; (1f10 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    1e58:	781b      	ldrb	r3, [r3, #0]
    1e5a:	2b01      	cmp	r3, #1
    1e5c:	d100      	bne.n	1e60 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    1e5e:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1e60:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    1e62:	2100      	movs	r1, #0
    1e64:	e7ef      	b.n	1e46 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1e66:	788a      	ldrb	r2, [r1, #2]
    1e68:	2300      	movs	r3, #0
    1e6a:	2a01      	cmp	r2, #1
    1e6c:	d104      	bne.n	1e78 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    1e6e:	aa01      	add	r2, sp, #4
    1e70:	7013      	strb	r3, [r2, #0]
    1e72:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1e74:	4b27      	ldr	r3, [pc, #156]	; (1f14 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    1e76:	e7ef      	b.n	1e58 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1e78:	4a25      	ldr	r2, [pc, #148]	; (1f10 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    1e7a:	7013      	strb	r3, [r2, #0]
    1e7c:	4a26      	ldr	r2, [pc, #152]	; (1f18 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1e7e:	6993      	ldr	r3, [r2, #24]
    1e80:	0b9b      	lsrs	r3, r3, #14
    1e82:	039b      	lsls	r3, r3, #14
    1e84:	6193      	str	r3, [r2, #24]
    1e86:	e7e1      	b.n	1e4c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1e88:	788c      	ldrb	r4, [r1, #2]
    1e8a:	2c01      	cmp	r4, #1
    1e8c:	d106      	bne.n	1e9c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    1e8e:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    1e90:	4b20      	ldr	r3, [pc, #128]	; (1f14 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    1e92:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1e94:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1e96:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1e98:	0023      	movs	r3, r4
    1e9a:	e7d4      	b.n	1e46 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    1e9c:	2c00      	cmp	r4, #0
    1e9e:	d108      	bne.n	1eb2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    1ea0:	2001      	movs	r0, #1
    1ea2:	4b1b      	ldr	r3, [pc, #108]	; (1f10 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    1ea4:	4a1c      	ldr	r2, [pc, #112]	; (1f18 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1ea6:	7018      	strb	r0, [r3, #0]
    1ea8:	6993      	ldr	r3, [r2, #24]
    1eaa:	0b9b      	lsrs	r3, r3, #14
    1eac:	039b      	lsls	r3, r3, #14
    1eae:	6193      	str	r3, [r2, #24]
			return true;
    1eb0:	e7cd      	b.n	1e4e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    1eb2:	78a9      	ldrb	r1, [r5, #2]
    1eb4:	0030      	movs	r0, r6
    1eb6:	f7ff fc11 	bl	16dc <_ZN14USBDeviceClass10setAddressEm>
    1eba:	e7c7      	b.n	1e4c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1ebc:	0030      	movs	r0, r6
    1ebe:	f7ff ff3b 	bl	1d38 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1ec2:	e7c4      	b.n	1e4e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1ec4:	2301      	movs	r3, #1
    1ec6:	4a15      	ldr	r2, [pc, #84]	; (1f1c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    1ec8:	e7cb      	b.n	1e62 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1eca:	780b      	ldrb	r3, [r1, #0]
			return false;
    1ecc:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1ece:	06db      	lsls	r3, r3, #27
    1ed0:	d1bd      	bne.n	1e4e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    1ed2:	0030      	movs	r0, r6
    1ed4:	f7ff fcbc 	bl	1850 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    1ed8:	202a      	movs	r0, #42	; 0x2a
    1eda:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    1edc:	78aa      	ldrb	r2, [r5, #2]
    1ede:	4b0f      	ldr	r3, [pc, #60]	; (1f1c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    1ee0:	30ff      	adds	r0, #255	; 0xff
    1ee2:	601a      	str	r2, [r3, #0]
    1ee4:	4a0c      	ldr	r2, [pc, #48]	; (1f18 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1ee6:	6813      	ldr	r3, [r2, #0]
    1ee8:	5c1c      	ldrb	r4, [r3, r0]
    1eea:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1eec:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    1eee:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1ef0:	34ff      	adds	r4, #255	; 0xff
    1ef2:	5d19      	ldrb	r1, [r3, r4]
    1ef4:	3829      	subs	r0, #41	; 0x29
    1ef6:	38ff      	subs	r0, #255	; 0xff
    1ef8:	4301      	orrs	r1, r0
    1efa:	5519      	strb	r1, [r3, r4]
    1efc:	e7d4      	b.n	1ea8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    1efe:	2301      	movs	r3, #1
    1f00:	4a07      	ldr	r2, [pc, #28]	; (1f20 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1f02:	e7ae      	b.n	1e62 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1f04:	788a      	ldrb	r2, [r1, #2]
    1f06:	4b06      	ldr	r3, [pc, #24]	; (1f20 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1f08:	601a      	str	r2, [r3, #0]
    1f0a:	e7b7      	b.n	1e7c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    1f0c:	2000      	movs	r0, #0
    1f0e:	e79e      	b.n	1e4e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    1f10:	200001ea 	.word	0x200001ea
    1f14:	200001f2 	.word	0x200001f2
    1f18:	20000680 	.word	0x20000680
    1f1c:	20000678 	.word	0x20000678
    1f20:	2000067c 	.word	0x2000067c

00001f24 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    1f24:	4b4c      	ldr	r3, [pc, #304]	; (2058 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
{
    1f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    1f28:	781c      	ldrb	r4, [r3, #0]
{
    1f2a:	0007      	movs	r7, r0
	if (_pack_message == true) {
    1f2c:	2c00      	cmp	r4, #0
    1f2e:	d000      	beq.n	1f32 <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    1f30:	e07d      	b.n	202e <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    1f32:	4e4a      	ldr	r6, [pc, #296]	; (205c <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    1f34:	6833      	ldr	r3, [r6, #0]
    1f36:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    1f38:	071b      	lsls	r3, r3, #28
    1f3a:	d50e      	bpl.n	1f5a <_ZN14USBDeviceClass10ISRHandlerEv+0x36>
    1f3c:	0021      	movs	r1, r4
    1f3e:	0020      	movs	r0, r4
    1f40:	f7ff f90c 	bl	115c <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1f44:	6832      	ldr	r2, [r6, #0]
    1f46:	2310      	movs	r3, #16
    1f48:	0011      	movs	r1, r2
    1f4a:	31ff      	adds	r1, #255	; 0xff
    1f4c:	7a88      	ldrb	r0, [r1, #10]
    1f4e:	4303      	orrs	r3, r0
    1f50:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    1f52:	4b43      	ldr	r3, [pc, #268]	; (2060 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    1f54:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    1f56:	2308      	movs	r3, #8
    1f58:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1f5a:	6833      	ldr	r3, [r6, #0]
    1f5c:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    1f5e:	0752      	lsls	r2, r2, #29
    1f60:	d51f      	bpl.n	1fa2 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    1f62:	2204      	movs	r2, #4
    1f64:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    1f66:	4a3f      	ldr	r2, [pc, #252]	; (2064 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    1f68:	7813      	ldrb	r3, [r2, #0]
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	d00a      	beq.n	1f84 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
			txLEDPulse--;
    1f6e:	7813      	ldrb	r3, [r2, #0]
    1f70:	3b01      	subs	r3, #1
    1f72:	b2db      	uxtb	r3, r3
    1f74:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    1f76:	7813      	ldrb	r3, [r2, #0]
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d103      	bne.n	1f84 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
				digitalWrite(PIN_LED_TXL, HIGH);
    1f7c:	2101      	movs	r1, #1
    1f7e:	201f      	movs	r0, #31
    1f80:	f000 f980 	bl	2284 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1f84:	4a38      	ldr	r2, [pc, #224]	; (2068 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    1f86:	7813      	ldrb	r3, [r2, #0]
    1f88:	2b00      	cmp	r3, #0
    1f8a:	d00a      	beq.n	1fa2 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
			rxLEDPulse--;
    1f8c:	7813      	ldrb	r3, [r2, #0]
    1f8e:	3b01      	subs	r3, #1
    1f90:	b2db      	uxtb	r3, r3
    1f92:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1f94:	7813      	ldrb	r3, [r2, #0]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d103      	bne.n	1fa2 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
				digitalWrite(PIN_LED_RXL, HIGH);
    1f9a:	2101      	movs	r1, #1
    1f9c:	201e      	movs	r0, #30
    1f9e:	f000 f971 	bl	2284 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1fa2:	6833      	ldr	r3, [r6, #0]
    1fa4:	33ff      	adds	r3, #255	; 0xff
    1fa6:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    1fa8:	06d2      	lsls	r2, r2, #27
    1faa:	d520      	bpl.n	1fee <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    1fac:	2210      	movs	r2, #16
    1fae:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1fb0:	7959      	ldrb	r1, [r3, #5]
    1fb2:	3230      	adds	r2, #48	; 0x30
    1fb4:	430a      	orrs	r2, r1
    1fb6:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    1fb8:	2360      	movs	r3, #96	; 0x60
    1fba:	492c      	ldr	r1, [pc, #176]	; (206c <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    1fbc:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    1fbe:	780a      	ldrb	r2, [r1, #0]
    1fc0:	421a      	tst	r2, r3
    1fc2:	d135      	bne.n	2030 <_ZN14USBDeviceClass10ISRHandlerEv+0x10c>
			ok = handleStandardSetup(*setup);
    1fc4:	f7ff ff2a 	bl	1e1c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    1fc8:	2800      	cmp	r0, #0
    1fca:	d034      	beq.n	2036 <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1fcc:	2280      	movs	r2, #128	; 0x80
    1fce:	6833      	ldr	r3, [r6, #0]
    1fd0:	4252      	negs	r2, r2
    1fd2:	33ff      	adds	r3, #255	; 0xff
    1fd4:	7999      	ldrb	r1, [r3, #6]
    1fd6:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1fd8:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    1fda:	6833      	ldr	r3, [r6, #0]
    1fdc:	33ff      	adds	r3, #255	; 0xff
    1fde:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1fe0:	0652      	lsls	r2, r2, #25
    1fe2:	d504      	bpl.n	1fee <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    1fe4:	2240      	movs	r2, #64	; 0x40
    1fe6:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1fe8:	7a59      	ldrb	r1, [r3, #9]
    1fea:	430a      	orrs	r2, r1
    1fec:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    1fee:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    1ff0:	2500      	movs	r5, #0
    1ff2:	8c1c      	ldrh	r4, [r3, #32]
    1ff4:	2301      	movs	r3, #1
    1ff6:	439c      	bics	r4, r3
    1ff8:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    1ffa:	9301      	str	r3, [sp, #4]
    1ffc:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    1ffe:	2c00      	cmp	r4, #0
    2000:	d015      	beq.n	202e <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
		if ((ept_int & (1 << i)) != 0)
    2002:	0023      	movs	r3, r4
    2004:	412b      	asrs	r3, r5
    2006:	9a01      	ldr	r2, [sp, #4]
    2008:	4213      	tst	r3, r2
    200a:	d00d      	beq.n	2028 <_ZN14USBDeviceClass10ISRHandlerEv+0x104>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    200c:	002b      	movs	r3, r5
    200e:	6832      	ldr	r2, [r6, #0]
    2010:	3308      	adds	r3, #8
    2012:	015b      	lsls	r3, r3, #5
    2014:	18d3      	adds	r3, r2, r3
    2016:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    2018:	07d2      	lsls	r2, r2, #31
    201a:	d413      	bmi.n	2044 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    201c:	79db      	ldrb	r3, [r3, #7]
    201e:	079b      	lsls	r3, r3, #30
    2020:	d410      	bmi.n	2044 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    2022:	9b01      	ldr	r3, [sp, #4]
    2024:	40ab      	lsls	r3, r5
    2026:	439c      	bics	r4, r3
    2028:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    202a:	2d09      	cmp	r5, #9
    202c:	d1e6      	bne.n	1ffc <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
			break;  // fire exit
	}
}
    202e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    2030:	f7ff fb78 	bl	1724 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    2034:	e7c8      	b.n	1fc8 <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    2036:	2220      	movs	r2, #32
    2038:	4b0d      	ldr	r3, [pc, #52]	; (2070 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    203a:	e7cd      	b.n	1fd8 <_ZN14USBDeviceClass10ISRHandlerEv+0xb4>
					epHandlers[i]->handleEndpoint();
    203c:	6803      	ldr	r3, [r0, #0]
    203e:	681b      	ldr	r3, [r3, #0]
    2040:	4798      	blx	r3
    2042:	e7ee      	b.n	2022 <_ZN14USBDeviceClass10ISRHandlerEv+0xfe>
				if (epHandlers[i]) {
    2044:	4b0b      	ldr	r3, [pc, #44]	; (2074 <_ZN14USBDeviceClass10ISRHandlerEv+0x150>)
    2046:	00aa      	lsls	r2, r5, #2
    2048:	58d0      	ldr	r0, [r2, r3]
    204a:	2800      	cmp	r0, #0
    204c:	d1f6      	bne.n	203c <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
					handleEndpoint(i);
    204e:	0038      	movs	r0, r7
    2050:	f7ff fa90 	bl	1574 <_ZN14USBDeviceClass14handleEndpointEh>
    2054:	e7e5      	b.n	2022 <_ZN14USBDeviceClass10ISRHandlerEv+0xfe>
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	20000675 	.word	0x20000675
    205c:	20000680 	.word	0x20000680
    2060:	20000678 	.word	0x20000678
    2064:	200001e9 	.word	0x200001e9
    2068:	200001e8 	.word	0x200001e8
    206c:	200003b4 	.word	0x200003b4
    2070:	410050ff 	.word	0x410050ff
    2074:	200001cc 	.word	0x200001cc

00002078 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    2078:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    207a:	4802      	ldr	r0, [pc, #8]	; (2084 <UDD_Handler+0xc>)
    207c:	f7ff ff52 	bl	1f24 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    2080:	bd10      	pop	{r4, pc}
    2082:	46c0      	nop			; (mov r8, r8)
    2084:	200001c8 	.word	0x200001c8

00002088 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    2088:	4a01      	ldr	r2, [pc, #4]	; (2090 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    208a:	4b02      	ldr	r3, [pc, #8]	; (2094 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    208c:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    208e:	4770      	bx	lr
    2090:	41005000 	.word	0x41005000
    2094:	20000680 	.word	0x20000680

00002098 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    2098:	21fa      	movs	r1, #250	; 0xfa
    209a:	4b31      	ldr	r3, [pc, #196]	; (2160 <init+0xc8>)
{
    209c:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    209e:	6818      	ldr	r0, [r3, #0]
    20a0:	0089      	lsls	r1, r1, #2
    20a2:	f003 fb4b 	bl	573c <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    20a6:	4b2f      	ldr	r3, [pc, #188]	; (2164 <init+0xcc>)
    20a8:	3801      	subs	r0, #1
    20aa:	4298      	cmp	r0, r3
    20ac:	d856      	bhi.n	215c <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    20ae:	492e      	ldr	r1, [pc, #184]	; (2168 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    20b0:	4a2e      	ldr	r2, [pc, #184]	; (216c <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    20b2:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    20b4:	20c0      	movs	r0, #192	; 0xc0
    20b6:	6a13      	ldr	r3, [r2, #32]
    20b8:	0600      	lsls	r0, r0, #24
    20ba:	021b      	lsls	r3, r3, #8
    20bc:	0a1b      	lsrs	r3, r3, #8
    20be:	4303      	orrs	r3, r0
    20c0:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    20c2:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    20c4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    20c6:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    20c8:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    20ca:	2180      	movs	r1, #128	; 0x80
    20cc:	6a13      	ldr	r3, [r2, #32]
    20ce:	0609      	lsls	r1, r1, #24
    20d0:	021b      	lsls	r3, r3, #8
    20d2:	0a1b      	lsrs	r3, r3, #8
    20d4:	430b      	orrs	r3, r1
    20d6:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    20d8:	22fc      	movs	r2, #252	; 0xfc
    20da:	4b25      	ldr	r3, [pc, #148]	; (2170 <init+0xd8>)
    20dc:	6a19      	ldr	r1, [r3, #32]
    20de:	430a      	orrs	r2, r1
    20e0:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    20e2:	22fc      	movs	r2, #252	; 0xfc
    20e4:	6a19      	ldr	r1, [r3, #32]
    20e6:	0192      	lsls	r2, r2, #6
    20e8:	430a      	orrs	r2, r1
    20ea:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    20ec:	22a0      	movs	r2, #160	; 0xa0
    20ee:	6a19      	ldr	r1, [r3, #32]
    20f0:	02d2      	lsls	r2, r2, #11
    20f2:	430a      	orrs	r2, r1
    20f4:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    20f6:	0020      	movs	r0, r4
    20f8:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    20fa:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    20fc:	f000 f876 	bl	21ec <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    2100:	2c13      	cmp	r4, #19
    2102:	d1f8      	bne.n	20f6 <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    2104:	4b1b      	ldr	r3, [pc, #108]	; (2174 <init+0xdc>)
    2106:	001c      	movs	r4, r3
    2108:	785a      	ldrb	r2, [r3, #1]
    210a:	b252      	sxtb	r2, r2
    210c:	2a00      	cmp	r2, #0
    210e:	dbfb      	blt.n	2108 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    2110:	4a19      	ldr	r2, [pc, #100]	; (2178 <init+0xe0>)
    2112:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    2114:	4b19      	ldr	r3, [pc, #100]	; (217c <init+0xe4>)
    2116:	001a      	movs	r2, r3
    2118:	7e59      	ldrb	r1, [r3, #25]
    211a:	09c9      	lsrs	r1, r1, #7
    211c:	2901      	cmp	r1, #1
    211e:	d0fb      	beq.n	2118 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    2120:	21e4      	movs	r1, #228	; 0xe4
    2122:	00c9      	lsls	r1, r1, #3
    2124:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    2126:	213f      	movs	r1, #63	; 0x3f
    2128:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    212a:	7e53      	ldrb	r3, [r2, #25]
    212c:	09db      	lsrs	r3, r3, #7
    212e:	2b01      	cmp	r3, #1
    2130:	d0fb      	beq.n	212a <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    2132:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    2134:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    2136:	015b      	lsls	r3, r3, #5
    2138:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    213a:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    213c:	f000 f824 	bl	2188 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    2140:	7863      	ldrb	r3, [r4, #1]
    2142:	b25b      	sxtb	r3, r3
    2144:	2b00      	cmp	r3, #0
    2146:	dbfb      	blt.n	2140 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    2148:	4b0d      	ldr	r3, [pc, #52]	; (2180 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    214a:	4a0e      	ldr	r2, [pc, #56]	; (2184 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    214c:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    214e:	79d3      	ldrb	r3, [r2, #7]
    2150:	09db      	lsrs	r3, r3, #7
    2152:	2b01      	cmp	r3, #1
    2154:	d0fb      	beq.n	214e <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    2156:	2341      	movs	r3, #65	; 0x41
    2158:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    215a:	bd10      	pop	{r4, pc}
    215c:	e7fe      	b.n	215c <init+0xc4>
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	20000044 	.word	0x20000044
    2164:	00ffffff 	.word	0x00ffffff
    2168:	e000e010 	.word	0xe000e010
    216c:	e000ed00 	.word	0xe000ed00
    2170:	40000400 	.word	0x40000400
    2174:	40000c00 	.word	0x40000c00
    2178:	0000401e 	.word	0x0000401e
    217c:	42004000 	.word	0x42004000
    2180:	00004021 	.word	0x00004021
    2184:	42004800 	.word	0x42004800

00002188 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    2188:	4a16      	ldr	r2, [pc, #88]	; (21e4 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    218a:	b500      	push	{lr}
    218c:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    218e:	7e51      	ldrb	r1, [r2, #25]
    2190:	09c9      	lsrs	r1, r1, #7
    2192:	2901      	cmp	r1, #1
    2194:	d0fb      	beq.n	218e <analogReference+0x6>
  syncADC();
  switch (mode)
    2196:	3801      	subs	r0, #1
    2198:	2804      	cmp	r0, #4
    219a:	d816      	bhi.n	21ca <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    219c:	6919      	ldr	r1, [r3, #16]
    219e:	4a12      	ldr	r2, [pc, #72]	; (21e8 <analogReference+0x60>)
    21a0:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    21a2:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    21a4:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    21a6:	785a      	ldrb	r2, [r3, #1]
    21a8:	438a      	bics	r2, r1
  switch (mode)
    21aa:	f003 fabd 	bl	5728 <__gnu_thumb1_case_uqi>
    21ae:	0803      	.short	0x0803
    21b0:	0b06      	.short	0x0b06
    21b2:	03          	.byte	0x03
    21b3:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    21b4:	0011      	movs	r1, r2
    21b6:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    21b8:	430a      	orrs	r2, r1
    21ba:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    21bc:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    21be:	0011      	movs	r1, r2
    21c0:	2203      	movs	r2, #3
    21c2:	e7f9      	b.n	21b8 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    21c4:	0011      	movs	r1, r2
    21c6:	2202      	movs	r2, #2
    21c8:	e7f6      	b.n	21b8 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    21ca:	23f0      	movs	r3, #240	; 0xf0
    21cc:	6911      	ldr	r1, [r2, #16]
    21ce:	051b      	lsls	r3, r3, #20
    21d0:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    21d2:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    21d4:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    21d6:	7853      	ldrb	r3, [r2, #1]
    21d8:	438b      	bics	r3, r1
    21da:	0019      	movs	r1, r3
    21dc:	2302      	movs	r3, #2
    21de:	430b      	orrs	r3, r1
    21e0:	7053      	strb	r3, [r2, #1]
}
    21e2:	e7eb      	b.n	21bc <analogReference+0x34>
    21e4:	42004000 	.word	0x42004000
    21e8:	f0ffffff 	.word	0xf0ffffff

000021ec <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    21ec:	2318      	movs	r3, #24
{
    21ee:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    21f0:	001d      	movs	r5, r3
{
    21f2:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    21f4:	4345      	muls	r5, r0
    21f6:	2008      	movs	r0, #8
    21f8:	4a20      	ldr	r2, [pc, #128]	; (227c <pinMode+0x90>)
    21fa:	1955      	adds	r5, r2, r5
    21fc:	5628      	ldrsb	r0, [r5, r0]
    21fe:	3001      	adds	r0, #1
    2200:	d014      	beq.n	222c <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    2202:	2903      	cmp	r1, #3
    2204:	d812      	bhi.n	222c <pinMode+0x40>
    2206:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    2208:	4363      	muls	r3, r4
    220a:	56d1      	ldrsb	r1, [r2, r3]
    220c:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    220e:	f003 fa8b 	bl	5728 <__gnu_thumb1_case_uqi>
    2212:	2802      	.short	0x2802
    2214:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    2216:	6858      	ldr	r0, [r3, #4]
    2218:	01cb      	lsls	r3, r1, #7
    221a:	2102      	movs	r1, #2
    221c:	4a18      	ldr	r2, [pc, #96]	; (2280 <pinMode+0x94>)
    221e:	189b      	adds	r3, r3, r2
    2220:	181a      	adds	r2, r3, r0
    2222:	3240      	adds	r2, #64	; 0x40
    2224:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2226:	2201      	movs	r2, #1
    2228:	4082      	lsls	r2, r0
    222a:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    222c:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    222e:	6858      	ldr	r0, [r3, #4]
    2230:	01cb      	lsls	r3, r1, #7
    2232:	2106      	movs	r1, #6
    2234:	4a12      	ldr	r2, [pc, #72]	; (2280 <pinMode+0x94>)
    2236:	189b      	adds	r3, r3, r2
    2238:	181a      	adds	r2, r3, r0
    223a:	3240      	adds	r2, #64	; 0x40
    223c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    223e:	2201      	movs	r2, #1
    2240:	4082      	lsls	r2, r0
    2242:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2244:	619a      	str	r2, [r3, #24]
    break ;
    2246:	e7f1      	b.n	222c <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    2248:	6858      	ldr	r0, [r3, #4]
    224a:	01cb      	lsls	r3, r1, #7
    224c:	2106      	movs	r1, #6
    224e:	4a0c      	ldr	r2, [pc, #48]	; (2280 <pinMode+0x94>)
    2250:	189b      	adds	r3, r3, r2
    2252:	181a      	adds	r2, r3, r0
    2254:	3240      	adds	r2, #64	; 0x40
    2256:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2258:	2201      	movs	r2, #1
    225a:	4082      	lsls	r2, r0
    225c:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    225e:	615a      	str	r2, [r3, #20]
    break ;
    2260:	e7e4      	b.n	222c <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    2262:	6858      	ldr	r0, [r3, #4]
    2264:	01cb      	lsls	r3, r1, #7
    2266:	2102      	movs	r1, #2
    2268:	4a05      	ldr	r2, [pc, #20]	; (2280 <pinMode+0x94>)
    226a:	189b      	adds	r3, r3, r2
    226c:	181a      	adds	r2, r3, r0
    226e:	3240      	adds	r2, #64	; 0x40
    2270:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2272:	2201      	movs	r2, #1
    2274:	4082      	lsls	r2, r0
    2276:	609a      	str	r2, [r3, #8]
    break ;
    2278:	e7d8      	b.n	222c <pinMode+0x40>
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	00006010 	.word	0x00006010
    2280:	41004400 	.word	0x41004400

00002284 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2284:	2318      	movs	r3, #24
{
    2286:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2288:	2408      	movs	r4, #8
    228a:	4358      	muls	r0, r3
    228c:	4a11      	ldr	r2, [pc, #68]	; (22d4 <digitalWrite+0x50>)
    228e:	1813      	adds	r3, r2, r0
    2290:	571c      	ldrsb	r4, [r3, r4]
    2292:	3401      	adds	r4, #1
    2294:	d01b      	beq.n	22ce <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    2296:	2601      	movs	r6, #1
    2298:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    229a:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    229c:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    229e:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    22a0:	4a0d      	ldr	r2, [pc, #52]	; (22d8 <digitalWrite+0x54>)
    22a2:	01db      	lsls	r3, r3, #7
    22a4:	189a      	adds	r2, r3, r2
    22a6:	6890      	ldr	r0, [r2, #8]
    22a8:	4228      	tst	r0, r5
    22aa:	d10b      	bne.n	22c4 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    22ac:	000c      	movs	r4, r1
    22ae:	1e60      	subs	r0, r4, #1
    22b0:	4184      	sbcs	r4, r0
    22b2:	19d2      	adds	r2, r2, r7
    22b4:	3240      	adds	r2, #64	; 0x40
    22b6:	7810      	ldrb	r0, [r2, #0]
    22b8:	4034      	ands	r4, r6
    22ba:	3603      	adds	r6, #3
    22bc:	00a4      	lsls	r4, r4, #2
    22be:	43b0      	bics	r0, r6
    22c0:	4320      	orrs	r0, r4
    22c2:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    22c4:	4a04      	ldr	r2, [pc, #16]	; (22d8 <digitalWrite+0x54>)
    22c6:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    22c8:	2900      	cmp	r1, #0
    22ca:	d101      	bne.n	22d0 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    22cc:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    22ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    22d0:	619d      	str	r5, [r3, #24]
    break ;
    22d2:	e7fc      	b.n	22ce <digitalWrite+0x4a>
    22d4:	00006010 	.word	0x00006010
    22d8:	41004400 	.word	0x41004400

000022dc <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    22dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22de:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    22e0:	2018      	movs	r0, #24
    22e2:	4358      	muls	r0, r3
    22e4:	4a2a      	ldr	r2, [pc, #168]	; (2390 <pinPeripheral+0xb4>)
    22e6:	1810      	adds	r0, r2, r0
    22e8:	7a00      	ldrb	r0, [r0, #8]
    22ea:	b240      	sxtb	r0, r0
  {
    return -1 ;
    22ec:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    22ee:	3001      	adds	r0, #1
    22f0:	d013      	beq.n	231a <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    22f2:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    22f4:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    22f6:	280c      	cmp	r0, #12
    22f8:	d80f      	bhi.n	231a <pinPeripheral+0x3e>
    22fa:	f003 fa15 	bl	5728 <__gnu_thumb1_case_uqi>
    22fe:	1c45      	.short	0x1c45
    2300:	1c1c1c1c 	.word	0x1c1c1c1c
    2304:	071c1c1c 	.word	0x071c1c1c
    2308:	0707      	.short	0x0707
    230a:	07          	.byte	0x07
    230b:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    230c:	2909      	cmp	r1, #9
    230e:	d106      	bne.n	231e <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    2310:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    2312:	0018      	movs	r0, r3
    2314:	f7ff ff6a 	bl	21ec <pinMode>
  return 0l ;
    2318:	2400      	movs	r4, #0
}
    231a:	0020      	movs	r0, r4
    231c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    231e:	290a      	cmp	r1, #10
    2320:	d101      	bne.n	2326 <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    2322:	3908      	subs	r1, #8
    2324:	e7f5      	b.n	2312 <pinPeripheral+0x36>
  return 0l ;
    2326:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    2328:	290b      	cmp	r1, #11
    232a:	d1f6      	bne.n	231a <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    232c:	390a      	subs	r1, #10
    232e:	0018      	movs	r0, r3
    2330:	f7ff ff5c 	bl	21ec <pinMode>
    2334:	e7f1      	b.n	231a <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2336:	2018      	movs	r0, #24
    2338:	4343      	muls	r3, r0
    233a:	18d0      	adds	r0, r2, r3
    233c:	6846      	ldr	r6, [r0, #4]
    233e:	2501      	movs	r5, #1
    2340:	0034      	movs	r4, r6
    2342:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2344:	4813      	ldr	r0, [pc, #76]	; (2394 <pinPeripheral+0xb8>)
    2346:	01d2      	lsls	r2, r2, #7
    2348:	1812      	adds	r2, r2, r0
    234a:	0873      	lsrs	r3, r6, #1
    234c:	18d3      	adds	r3, r2, r3
    234e:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2350:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2352:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2354:	2c00      	cmp	r4, #0
    2356:	d00b      	beq.n	2370 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    2358:	240f      	movs	r4, #15
    235a:	0109      	lsls	r1, r1, #4
    235c:	4020      	ands	r0, r4
    235e:	4301      	orrs	r1, r0
    2360:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    2362:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    2364:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    2366:	3240      	adds	r2, #64	; 0x40
    2368:	7813      	ldrb	r3, [r2, #0]
    236a:	431d      	orrs	r5, r3
    236c:	7015      	strb	r5, [r2, #0]
    236e:	e7d3      	b.n	2318 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    2370:	270f      	movs	r7, #15
    2372:	43b8      	bics	r0, r7
    2374:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    2376:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    2378:	b2c9      	uxtb	r1, r1
    237a:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    237c:	0013      	movs	r3, r2
    237e:	3340      	adds	r3, #64	; 0x40
    2380:	781a      	ldrb	r2, [r3, #0]
    2382:	4315      	orrs	r5, r2
    2384:	701d      	strb	r5, [r3, #0]
    2386:	e7c8      	b.n	231a <pinPeripheral+0x3e>
      return -1l ;
    2388:	2401      	movs	r4, #1
    238a:	4264      	negs	r4, r4
    238c:	e7c5      	b.n	231a <pinPeripheral+0x3e>
    238e:	46c0      	nop			; (mov r8, r8)
    2390:	00006010 	.word	0x00006010
    2394:	41004400 	.word	0x41004400

00002398 <_Z3maplllll>:

  return random(diff) + howsmall;
}

extern long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    2398:	b510      	push	{r4, lr}
    239a:	001c      	movs	r4, r3
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    239c:	1a43      	subs	r3, r0, r1
    239e:	9802      	ldr	r0, [sp, #8]
    23a0:	1a51      	subs	r1, r2, r1
    23a2:	1b00      	subs	r0, r0, r4
    23a4:	4358      	muls	r0, r3
    23a6:	f003 fa53 	bl	5850 <__divsi3>
    23aa:	1900      	adds	r0, r0, r4
}
    23ac:	bd10      	pop	{r4, pc}

000023ae <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
    23ae:	b510      	push	{r4, lr}
    23b0:	0004      	movs	r4, r0
{
	free(buffer);
    23b2:	6800      	ldr	r0, [r0, #0]
    23b4:	f003 fb66 	bl	5a84 <free>
}
    23b8:	0020      	movs	r0, r4
    23ba:	bd10      	pop	{r4, pc}

000023bc <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    23bc:	b510      	push	{r4, lr}
    23be:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    23c0:	6800      	ldr	r0, [r0, #0]
    23c2:	2800      	cmp	r0, #0
    23c4:	d001      	beq.n	23ca <_ZN6String10invalidateEv+0xe>
    23c6:	f003 fb5d 	bl	5a84 <free>
	buffer = NULL;
    23ca:	2300      	movs	r3, #0
    23cc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    23ce:	60a3      	str	r3, [r4, #8]
    23d0:	6063      	str	r3, [r4, #4]
}
    23d2:	bd10      	pop	{r4, pc}

000023d4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    23d4:	b570      	push	{r4, r5, r6, lr}
    23d6:	0004      	movs	r4, r0
    23d8:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    23da:	6800      	ldr	r0, [r0, #0]
    23dc:	3101      	adds	r1, #1
    23de:	f003 fc23 	bl	5c28 <realloc>
    23e2:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    23e4:	d001      	beq.n	23ea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
		return 1;
    23e6:	2001      	movs	r0, #1
		capacity = maxStrLen;
    23e8:	c428      	stmia	r4!, {r3, r5}
	}
	return 0;
}
    23ea:	bd70      	pop	{r4, r5, r6, pc}

000023ec <_ZN6String7reserveEj>:
	if (buffer && capacity >= size) return 1;
    23ec:	6803      	ldr	r3, [r0, #0]
{
    23ee:	b510      	push	{r4, lr}
    23f0:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    23f2:	2b00      	cmp	r3, #0
    23f4:	d004      	beq.n	2400 <_ZN6String7reserveEj+0x14>
    23f6:	6843      	ldr	r3, [r0, #4]
    23f8:	428b      	cmp	r3, r1
    23fa:	d301      	bcc.n	2400 <_ZN6String7reserveEj+0x14>
		if (len == 0) buffer[0] = 0;
    23fc:	2001      	movs	r0, #1
}
    23fe:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
    2400:	0020      	movs	r0, r4
    2402:	f7ff ffe7 	bl	23d4 <_ZN6String12changeBufferEj>
    2406:	2800      	cmp	r0, #0
    2408:	d0f9      	beq.n	23fe <_ZN6String7reserveEj+0x12>
		if (len == 0) buffer[0] = 0;
    240a:	68a3      	ldr	r3, [r4, #8]
    240c:	2b00      	cmp	r3, #0
    240e:	d1f5      	bne.n	23fc <_ZN6String7reserveEj+0x10>
    2410:	6822      	ldr	r2, [r4, #0]
    2412:	7013      	strb	r3, [r2, #0]
    2414:	e7f2      	b.n	23fc <_ZN6String7reserveEj+0x10>

00002416 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2416:	b570      	push	{r4, r5, r6, lr}
    2418:	000e      	movs	r6, r1
	if (!reserve(length)) {
    241a:	0011      	movs	r1, r2
{
    241c:	0004      	movs	r4, r0
    241e:	0015      	movs	r5, r2
	if (!reserve(length)) {
    2420:	f7ff ffe4 	bl	23ec <_ZN6String7reserveEj>
    2424:	2800      	cmp	r0, #0
    2426:	d104      	bne.n	2432 <_ZN6String4copyEPKcj+0x1c>
		invalidate();
    2428:	0020      	movs	r0, r4
    242a:	f7ff ffc7 	bl	23bc <_ZN6String10invalidateEv>
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    242e:	0020      	movs	r0, r4
    2430:	bd70      	pop	{r4, r5, r6, pc}
	len = length;
    2432:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    2434:	0031      	movs	r1, r6
    2436:	6820      	ldr	r0, [r4, #0]
    2438:	f003 fc20 	bl	5c7c <strcpy>
	return *this;
    243c:	e7f7      	b.n	242e <_ZN6String4copyEPKcj+0x18>

0000243e <_ZN6String4moveERS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    243e:	b570      	push	{r4, r5, r6, lr}
    2440:	0005      	movs	r5, r0
	if (buffer) {
    2442:	6800      	ldr	r0, [r0, #0]
{
    2444:	000c      	movs	r4, r1
	if (buffer) {
    2446:	2800      	cmp	r0, #0
    2448:	d004      	beq.n	2454 <_ZN6String4moveERS_+0x16>
    244a:	6809      	ldr	r1, [r1, #0]
	friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    244c:	2900      	cmp	r1, #0
    244e:	d10b      	bne.n	2468 <_ZN6String4moveERS_+0x2a>
			strcpy(buffer, rhs.buffer);
			len = rhs.len;
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    2450:	f003 fb18 	bl	5a84 <free>
		}
	}
	buffer = rhs.buffer;
    2454:	6823      	ldr	r3, [r4, #0]
    2456:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
    2458:	6863      	ldr	r3, [r4, #4]
    245a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
    245c:	68a3      	ldr	r3, [r4, #8]
    245e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
    2460:	2300      	movs	r3, #0
    2462:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    2464:	6063      	str	r3, [r4, #4]
    2466:	e008      	b.n	247a <_ZN6String4moveERS_+0x3c>
		if (rhs && capacity >= rhs.len) {
    2468:	686b      	ldr	r3, [r5, #4]
    246a:	68a2      	ldr	r2, [r4, #8]
    246c:	4293      	cmp	r3, r2
    246e:	d3ef      	bcc.n	2450 <_ZN6String4moveERS_+0x12>
			strcpy(buffer, rhs.buffer);
    2470:	f003 fc04 	bl	5c7c <strcpy>
			len = rhs.len;
    2474:	68a3      	ldr	r3, [r4, #8]
    2476:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
    2478:	2300      	movs	r3, #0
	rhs.len = 0;
    247a:	60a3      	str	r3, [r4, #8]
}
    247c:	bd70      	pop	{r4, r5, r6, pc}

0000247e <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    247e:	b510      	push	{r4, lr}
    2480:	0004      	movs	r4, r0
	if (this != &rval) move(rval);
    2482:	4288      	cmp	r0, r1
    2484:	d001      	beq.n	248a <_ZN6StringaSEOS_+0xc>
    2486:	f7ff ffda 	bl	243e <_ZN6String4moveERS_>
	return *this;
}
    248a:	0020      	movs	r0, r4
    248c:	bd10      	pop	{r4, pc}

0000248e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    248e:	b570      	push	{r4, r5, r6, lr}
    2490:	0004      	movs	r4, r0
    2492:	1e0d      	subs	r5, r1, #0
	if (cstr) copy(cstr, strlen(cstr));
    2494:	d009      	beq.n	24aa <_ZN6StringaSEPKc+0x1c>
    2496:	0008      	movs	r0, r1
    2498:	f003 fbf8 	bl	5c8c <strlen>
    249c:	0029      	movs	r1, r5
    249e:	0002      	movs	r2, r0
    24a0:	0020      	movs	r0, r4
    24a2:	f7ff ffb8 	bl	2416 <_ZN6String4copyEPKcj>
	else invalidate();
	
	return *this;
}
    24a6:	0020      	movs	r0, r4
    24a8:	bd70      	pop	{r4, r5, r6, pc}
	else invalidate();
    24aa:	f7ff ff87 	bl	23bc <_ZN6String10invalidateEv>
    24ae:	e7fa      	b.n	24a6 <_ZN6StringaSEPKc+0x18>

000024b0 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
    24b0:	b510      	push	{r4, lr}
	buffer = NULL;
    24b2:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
    24b4:	0004      	movs	r4, r0
    24b6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
    24b8:	6023      	str	r3, [r4, #0]
	capacity = 0;
    24ba:	6063      	str	r3, [r4, #4]
	len = 0;
    24bc:	60a3      	str	r3, [r4, #8]
String::String(int value, unsigned char base)
    24be:	0008      	movs	r0, r1
	itoa(value, buf, base);
    24c0:	a901      	add	r1, sp, #4
    24c2:	f002 fdd6 	bl	5072 <itoa>
	*this = buf;
    24c6:	a901      	add	r1, sp, #4
    24c8:	0020      	movs	r0, r4
    24ca:	f7ff ffe0 	bl	248e <_ZN6StringaSEPKc>
}
    24ce:	0020      	movs	r0, r4
    24d0:	b00a      	add	sp, #40	; 0x28
    24d2:	bd10      	pop	{r4, pc}

000024d4 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    24d4:	6882      	ldr	r2, [r0, #8]
    24d6:	2300      	movs	r3, #0
    24d8:	428a      	cmp	r2, r1
    24da:	d903      	bls.n	24e4 <_ZNK6StringixEj+0x10>
    24dc:	6802      	ldr	r2, [r0, #0]
    24de:	429a      	cmp	r2, r3
    24e0:	d000      	beq.n	24e4 <_ZNK6StringixEj+0x10>
	return buffer[index];
    24e2:	5c53      	ldrb	r3, [r2, r1]
}
    24e4:	0018      	movs	r0, r3
    24e6:	4770      	bx	lr

000024e8 <_ZNK6String6charAtEj>:
{
    24e8:	b510      	push	{r4, lr}
	return operator[](loc);
    24ea:	f7ff fff3 	bl	24d4 <_ZNK6StringixEj>
}
    24ee:	bd10      	pop	{r4, pc}

000024f0 <_ZN15Adafruit_FT6206C1Ev>:
    @brief  Instantiates a new FT6206 class
*/
/**************************************************************************/
// I2C, no address adjustments or pins
Adafruit_FT6206::Adafruit_FT6206() {
  touches = 0;
    24f0:	2300      	movs	r3, #0
    24f2:	7003      	strb	r3, [r0, #0]
}
    24f4:	4770      	bx	lr

000024f6 <_ZN8TS_PointC1Ev>:
*/

/****************/

TS_Point::TS_Point(void) {
  x = y = 0;
    24f6:	2300      	movs	r3, #0
    24f8:	8043      	strh	r3, [r0, #2]
    24fa:	8003      	strh	r3, [r0, #0]
}
    24fc:	4770      	bx	lr
	...

00002500 <_ZN15Adafruit_FT620614writeRegister8Ehh>:
void Adafruit_FT6206::writeRegister8(uint8_t reg, uint8_t val) {
    2500:	b570      	push	{r4, r5, r6, lr}
    2502:	000e      	movs	r6, r1
    2504:	0015      	movs	r5, r2
  Wire.beginTransmission(FT62XX_ADDR);
    2506:	4c08      	ldr	r4, [pc, #32]	; (2528 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x28>)
    2508:	2138      	movs	r1, #56	; 0x38
    250a:	0020      	movs	r0, r4
    250c:	f002 f848 	bl	45a0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    2510:	0031      	movs	r1, r6
    2512:	0020      	movs	r0, r4
    2514:	f002 f892 	bl	463c <_ZN7TwoWire5writeEh>
  Wire.write((byte)val);
    2518:	0029      	movs	r1, r5
    251a:	0020      	movs	r0, r4
    251c:	f002 f88e 	bl	463c <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    2520:	0020      	movs	r0, r4
    2522:	f002 f8e8 	bl	46f6 <_ZN7TwoWire15endTransmissionEv>
}
    2526:	bd70      	pop	{r4, r5, r6, pc}
    2528:	20000a1c 	.word	0x20000a1c

0000252c <_ZN15Adafruit_FT62068readDataEv>:
void Adafruit_FT6206::readData(void) {
    252c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Wire.beginTransmission(FT62XX_ADDR);
    252e:	4d24      	ldr	r5, [pc, #144]	; (25c0 <_ZN15Adafruit_FT62068readDataEv+0x94>)
    2530:	2138      	movs	r1, #56	; 0x38
void Adafruit_FT6206::readData(void) {
    2532:	0004      	movs	r4, r0
  Wire.beginTransmission(FT62XX_ADDR);
    2534:	0028      	movs	r0, r5
    2536:	f002 f833 	bl	45a0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)0);  
    253a:	2100      	movs	r1, #0
    253c:	0028      	movs	r0, r5
    253e:	f002 f87d 	bl	463c <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    2542:	0028      	movs	r0, r5
    2544:	f002 f8d7 	bl	46f6 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)FT62XX_ADDR, (byte)16);
    2548:	2210      	movs	r2, #16
    254a:	2138      	movs	r1, #56	; 0x38
    254c:	0028      	movs	r0, r5
    254e:	f002 f870 	bl	4632 <_ZN7TwoWire11requestFromEhj>
    2552:	2600      	movs	r6, #0
    i2cdat[i] = Wire.read();
    2554:	0028      	movs	r0, r5
    2556:	f002 f8d3 	bl	4700 <_ZN7TwoWire4readEv>
    255a:	466b      	mov	r3, sp
    255c:	54f0      	strb	r0, [r6, r3]
    255e:	3601      	adds	r6, #1
  for (uint8_t i=0; i<16; i++)
    2560:	2e10      	cmp	r6, #16
    2562:	d1f7      	bne.n	2554 <_ZN15Adafruit_FT62068readDataEv+0x28>
  touches = i2cdat[0x02];
    2564:	789b      	ldrb	r3, [r3, #2]
  if ((touches > 2) || (touches == 0)) {
    2566:	1e5a      	subs	r2, r3, #1
    2568:	2a01      	cmp	r2, #1
    256a:	d827      	bhi.n	25bc <_ZN15Adafruit_FT62068readDataEv+0x90>
    touches = 0;
    256c:	7023      	strb	r3, [r4, #0]
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    256e:	466b      	mov	r3, sp
    touchX[i] |= i2cdat[0x04 + i*6]; 
    2570:	4669      	mov	r1, sp
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    2572:	78da      	ldrb	r2, [r3, #3]
    2574:	230f      	movs	r3, #15
    touchX[i] |= i2cdat[0x04 + i*6]; 
    2576:	7909      	ldrb	r1, [r1, #4]
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    2578:	401a      	ands	r2, r3
    touchX[i] <<= 8;
    257a:	0212      	lsls	r2, r2, #8
    touchX[i] |= i2cdat[0x04 + i*6]; 
    257c:	430a      	orrs	r2, r1
    257e:	8062      	strh	r2, [r4, #2]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    2580:	466a      	mov	r2, sp
    2582:	7952      	ldrb	r2, [r2, #5]
    touchY[i] |= i2cdat[0x06 + i*6];
    2584:	4669      	mov	r1, sp
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    2586:	0010      	movs	r0, r2
    touchY[i] |= i2cdat[0x06 + i*6];
    2588:	7989      	ldrb	r1, [r1, #6]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    258a:	4018      	ands	r0, r3
    touchID[i] = i2cdat[0x05 + i*6] >> 4;
    258c:	1112      	asrs	r2, r2, #4
    258e:	8162      	strh	r2, [r4, #10]
    touchY[i] <<= 8;
    2590:	0200      	lsls	r0, r0, #8
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    2592:	466a      	mov	r2, sp
    touchY[i] |= i2cdat[0x06 + i*6];
    2594:	4301      	orrs	r1, r0
    2596:	80e1      	strh	r1, [r4, #6]
    touchX[i] |= i2cdat[0x04 + i*6]; 
    2598:	4669      	mov	r1, sp
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    259a:	7a52      	ldrb	r2, [r2, #9]
    touchX[i] |= i2cdat[0x04 + i*6]; 
    259c:	7a89      	ldrb	r1, [r1, #10]
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    259e:	401a      	ands	r2, r3
    touchX[i] <<= 8;
    25a0:	0212      	lsls	r2, r2, #8
    touchX[i] |= i2cdat[0x04 + i*6]; 
    25a2:	430a      	orrs	r2, r1
    25a4:	80a2      	strh	r2, [r4, #4]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    25a6:	466a      	mov	r2, sp
    touchY[i] |= i2cdat[0x06 + i*6];
    25a8:	4669      	mov	r1, sp
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    25aa:	7ad2      	ldrb	r2, [r2, #11]
    touchY[i] |= i2cdat[0x06 + i*6];
    25ac:	7b09      	ldrb	r1, [r1, #12]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    25ae:	4013      	ands	r3, r2
    touchY[i] <<= 8;
    25b0:	021b      	lsls	r3, r3, #8
    touchY[i] |= i2cdat[0x06 + i*6];
    25b2:	430b      	orrs	r3, r1
    touchID[i] = i2cdat[0x05 + i*6] >> 4;
    25b4:	1112      	asrs	r2, r2, #4
    touchY[i] |= i2cdat[0x06 + i*6];
    25b6:	8123      	strh	r3, [r4, #8]
    touchID[i] = i2cdat[0x05 + i*6] >> 4;
    25b8:	81a2      	strh	r2, [r4, #12]
}
    25ba:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    touches = 0;
    25bc:	2300      	movs	r3, #0
    25be:	e7d5      	b.n	256c <_ZN15Adafruit_FT62068readDataEv+0x40>
    25c0:	20000a1c 	.word	0x20000a1c

000025c4 <_ZN15Adafruit_FT62068getPointEh>:
TS_Point Adafruit_FT6206::getPoint(uint8_t n) {
    25c4:	b570      	push	{r4, r5, r6, lr}
    25c6:	000d      	movs	r5, r1
    25c8:	0004      	movs	r4, r0
  readData();
    25ca:	0008      	movs	r0, r1
TS_Point Adafruit_FT6206::getPoint(uint8_t n) {
    25cc:	0016      	movs	r6, r2
  readData();
    25ce:	f7ff ffad 	bl	252c <_ZN15Adafruit_FT62068readDataEv>
  if ((touches == 0) || (n > 1)) {
    25d2:	782b      	ldrb	r3, [r5, #0]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d001      	beq.n	25dc <_ZN15Adafruit_FT62068getPointEh+0x18>
    25d8:	2e01      	cmp	r6, #1
    25da:	dd05      	ble.n	25e8 <_ZN15Adafruit_FT62068getPointEh+0x24>

TS_Point::TS_Point(int16_t x0, int16_t y0, int16_t z0) {
  x = x0;
    25dc:	2300      	movs	r3, #0
    25de:	8023      	strh	r3, [r4, #0]
  y = y0;
    25e0:	8063      	strh	r3, [r4, #2]
}
    25e2:	0020      	movs	r0, r4
  z = z0;
    25e4:	80a3      	strh	r3, [r4, #4]
}
    25e6:	bd70      	pop	{r4, r5, r6, pc}
    25e8:	0076      	lsls	r6, r6, #1
    25ea:	19ad      	adds	r5, r5, r6
    return TS_Point(touchX[n], touchY[n], 1);
    25ec:	2302      	movs	r3, #2
    25ee:	5eea      	ldrsh	r2, [r5, r3]
    25f0:	2106      	movs	r1, #6
    25f2:	5e6b      	ldrsh	r3, [r5, r1]
  x = x0;
    25f4:	8022      	strh	r2, [r4, #0]
  y = y0;
    25f6:	8063      	strh	r3, [r4, #2]
  z = z0;
    25f8:	2301      	movs	r3, #1
    25fa:	e7f2      	b.n	25e2 <_ZN15Adafruit_FT62068getPointEh+0x1e>

000025fc <_ZN15Adafruit_FT620613readRegister8Eh>:
uint8_t Adafruit_FT6206::readRegister8(uint8_t reg) {
    25fc:	b570      	push	{r4, r5, r6, lr}
    25fe:	000d      	movs	r5, r1
  Wire.beginTransmission(FT62XX_ADDR);
    2600:	4c0a      	ldr	r4, [pc, #40]	; (262c <_ZN15Adafruit_FT620613readRegister8Eh+0x30>)
    2602:	2138      	movs	r1, #56	; 0x38
    2604:	0020      	movs	r0, r4
    2606:	f001 ffcb 	bl	45a0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    260a:	0029      	movs	r1, r5
    260c:	0020      	movs	r0, r4
    260e:	f002 f815 	bl	463c <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    2612:	0020      	movs	r0, r4
    2614:	f002 f86f 	bl	46f6 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)FT62XX_ADDR, (byte)1);
    2618:	2201      	movs	r2, #1
    261a:	2138      	movs	r1, #56	; 0x38
    261c:	0020      	movs	r0, r4
    261e:	f002 f808 	bl	4632 <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
    2622:	0020      	movs	r0, r4
    2624:	f002 f86c 	bl	4700 <_ZN7TwoWire4readEv>
  return x;
    2628:	b2c0      	uxtb	r0, r0
}
    262a:	bd70      	pop	{r4, r5, r6, pc}
    262c:	20000a1c 	.word	0x20000a1c

00002630 <_ZN15Adafruit_FT62065beginEh>:
boolean Adafruit_FT6206::begin(uint8_t thresh) {
    2630:	b570      	push	{r4, r5, r6, lr}
    2632:	0004      	movs	r4, r0
    2634:	000d      	movs	r5, r1
  Wire.begin();
    2636:	480e      	ldr	r0, [pc, #56]	; (2670 <_ZN15Adafruit_FT62065beginEh+0x40>)
    2638:	f001 ff92 	bl	4560 <_ZN7TwoWire5beginEv>
  writeRegister8(FT62XX_REG_THRESHHOLD, thresh);
    263c:	2180      	movs	r1, #128	; 0x80
    263e:	0020      	movs	r0, r4
    2640:	002a      	movs	r2, r5
    2642:	f7ff ff5d 	bl	2500 <_ZN15Adafruit_FT620614writeRegister8Ehh>
  if (readRegister8(FT62XX_REG_VENDID) != FT62XX_VENDID) {
    2646:	21a8      	movs	r1, #168	; 0xa8
    2648:	0020      	movs	r0, r4
    264a:	f7ff ffd7 	bl	25fc <_ZN15Adafruit_FT620613readRegister8Eh>
    264e:	2811      	cmp	r0, #17
    2650:	d002      	beq.n	2658 <_ZN15Adafruit_FT62065beginEh+0x28>
    return false;
    2652:	2300      	movs	r3, #0
}
    2654:	0018      	movs	r0, r3
    2656:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t id = readRegister8(FT62XX_REG_CHIPID);
    2658:	21a3      	movs	r1, #163	; 0xa3
    265a:	0020      	movs	r0, r4
    265c:	f7ff ffce 	bl	25fc <_ZN15Adafruit_FT620613readRegister8Eh>
  return true;
    2660:	2301      	movs	r3, #1
  if ((id != FT6206_CHIPID) && (id != FT6236_CHIPID) && (id != FT6236U_CHIPID)) {
    2662:	2806      	cmp	r0, #6
    2664:	d0f6      	beq.n	2654 <_ZN15Adafruit_FT62065beginEh+0x24>
    2666:	2836      	cmp	r0, #54	; 0x36
    2668:	d0f4      	beq.n	2654 <_ZN15Adafruit_FT62065beginEh+0x24>
    266a:	2864      	cmp	r0, #100	; 0x64
    266c:	d1f1      	bne.n	2652 <_ZN15Adafruit_FT62065beginEh+0x22>
    266e:	e7f1      	b.n	2654 <_ZN15Adafruit_FT62065beginEh+0x24>
    2670:	20000a1c 	.word	0x20000a1c

00002674 <_ZN15Adafruit_FT62067touchedEv>:
uint8_t Adafruit_FT6206::touched(void) {
    2674:	b510      	push	{r4, lr}
  uint8_t n = readRegister8(FT62XX_REG_NUMTOUCHES);
    2676:	2102      	movs	r1, #2
    2678:	f7ff ffc0 	bl	25fc <_ZN15Adafruit_FT620613readRegister8Eh>
  if (n > 2) {
    267c:	2802      	cmp	r0, #2
    267e:	dd00      	ble.n	2682 <_ZN15Adafruit_FT62067touchedEv+0xe>
    n = 0;
    2680:	2000      	movs	r0, #0
}
    2682:	bd10      	pop	{r4, pc}

00002684 <_ZN16Adafruit_ILI934114writeFastVLineEssst>:
    int32_t len = (int32_t)w * h;
    setAddrWindow(x, y, w, h);
    writeColor(color, len);
}

void Adafruit_ILI9341::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color){
    2684:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2686:	ac06      	add	r4, sp, #24
    2688:	8825      	ldrh	r5, [r4, #0]
    writeFillRect(x, y, 1, h, color);
    268a:	6804      	ldr	r4, [r0, #0]
    268c:	9501      	str	r5, [sp, #4]
    268e:	9300      	str	r3, [sp, #0]
    2690:	69e4      	ldr	r4, [r4, #28]
    2692:	2301      	movs	r3, #1
    2694:	47a0      	blx	r4
}
    2696:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

00002698 <_ZN16Adafruit_ILI934114writeFastHLineEssst>:

void Adafruit_ILI9341::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color){
    2698:	b537      	push	{r0, r1, r2, r4, r5, lr}
    269a:	ac06      	add	r4, sp, #24
    269c:	8825      	ldrh	r5, [r4, #0]
    writeFillRect(x, y, w, 1, color);
    269e:	6804      	ldr	r4, [r0, #0]
    26a0:	9501      	str	r5, [sp, #4]
    26a2:	2501      	movs	r5, #1
    26a4:	9500      	str	r5, [sp, #0]
    26a6:	69e4      	ldr	r4, [r4, #28]
    26a8:	47a0      	blx	r4
}
    26aa:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

000026ac <_ZN16Adafruit_ILI93419drawPixelEsst>:
    endWrite();
    _freq = freq;
    return r;
}

void Adafruit_ILI9341::drawPixel(int16_t x, int16_t y, uint16_t color){
    26ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26ae:	0004      	movs	r4, r0
    26b0:	0016      	movs	r6, r2
    26b2:	001f      	movs	r7, r3
    startWrite();
    26b4:	6803      	ldr	r3, [r0, #0]
void Adafruit_ILI9341::drawPixel(int16_t x, int16_t y, uint16_t color){
    26b6:	9101      	str	r1, [sp, #4]
    startWrite();
    26b8:	695b      	ldr	r3, [r3, #20]
    26ba:	4798      	blx	r3
    writePixel(x, y, color);
    26bc:	6823      	ldr	r3, [r4, #0]
    26be:	0032      	movs	r2, r6
    26c0:	699d      	ldr	r5, [r3, #24]
    26c2:	9901      	ldr	r1, [sp, #4]
    26c4:	003b      	movs	r3, r7
    26c6:	0020      	movs	r0, r4
    26c8:	47a8      	blx	r5
    endWrite();
    26ca:	6823      	ldr	r3, [r4, #0]
    26cc:	0020      	movs	r0, r4
    26ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26d0:	4798      	blx	r3
}
    26d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000026d4 <_ZN16Adafruit_ILI934113drawFastVLineEssst>:

void Adafruit_ILI9341::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    26d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d6:	0004      	movs	r4, r0
    26d8:	0016      	movs	r6, r2
    26da:	001f      	movs	r7, r3
    26dc:	b085      	sub	sp, #20
    26de:	ab0a      	add	r3, sp, #40	; 0x28
    26e0:	881d      	ldrh	r5, [r3, #0]
    startWrite();
    26e2:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
    26e4:	9103      	str	r1, [sp, #12]
    startWrite();
    26e6:	695b      	ldr	r3, [r3, #20]
    26e8:	4798      	blx	r3
    writeFastVLine(x, y, h, color);
    26ea:	6823      	ldr	r3, [r4, #0]
    26ec:	9500      	str	r5, [sp, #0]
    26ee:	6a1d      	ldr	r5, [r3, #32]
    26f0:	0032      	movs	r2, r6
    26f2:	003b      	movs	r3, r7
    26f4:	9903      	ldr	r1, [sp, #12]
    26f6:	0020      	movs	r0, r4
    26f8:	47a8      	blx	r5
    endWrite();
    26fa:	6823      	ldr	r3, [r4, #0]
    26fc:	0020      	movs	r0, r4
    26fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2700:	4798      	blx	r3
}
    2702:	b005      	add	sp, #20
    2704:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002706 <_ZN16Adafruit_ILI934113drawFastHLineEssst>:

void Adafruit_ILI9341::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    2706:	b5f0      	push	{r4, r5, r6, r7, lr}
    2708:	0004      	movs	r4, r0
    270a:	0016      	movs	r6, r2
    270c:	001f      	movs	r7, r3
    270e:	b085      	sub	sp, #20
    2710:	ab0a      	add	r3, sp, #40	; 0x28
    2712:	881d      	ldrh	r5, [r3, #0]
    startWrite();
    2714:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
    2716:	9103      	str	r1, [sp, #12]
    startWrite();
    2718:	695b      	ldr	r3, [r3, #20]
    271a:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
    271c:	6823      	ldr	r3, [r4, #0]
    271e:	9500      	str	r5, [sp, #0]
    2720:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    2722:	0032      	movs	r2, r6
    2724:	003b      	movs	r3, r7
    2726:	9903      	ldr	r1, [sp, #12]
    2728:	0020      	movs	r0, r4
    272a:	47a8      	blx	r5
    endWrite();
    272c:	6823      	ldr	r3, [r4, #0]
    272e:	0020      	movs	r0, r4
    2730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2732:	4798      	blx	r3
}
    2734:	b005      	add	sp, #20
    2736:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002738 <_ZN16Adafruit_ILI93418fillRectEsssst>:

void Adafruit_ILI9341::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    2738:	b5f0      	push	{r4, r5, r6, r7, lr}
    273a:	0004      	movs	r4, r0
    273c:	001d      	movs	r5, r3
    273e:	b085      	sub	sp, #20
    2740:	ab0a      	add	r3, sp, #40	; 0x28
    2742:	2600      	movs	r6, #0
    2744:	5f9e      	ldrsh	r6, [r3, r6]
    2746:	ab0b      	add	r3, sp, #44	; 0x2c
    2748:	881f      	ldrh	r7, [r3, #0]
    startWrite();
    274a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
    274c:	9102      	str	r1, [sp, #8]
    274e:	9203      	str	r2, [sp, #12]
    startWrite();
    2750:	695b      	ldr	r3, [r3, #20]
    2752:	4798      	blx	r3
    writeFillRect(x,y,w,h,color);
    2754:	6823      	ldr	r3, [r4, #0]
    2756:	9701      	str	r7, [sp, #4]
    2758:	9600      	str	r6, [sp, #0]
    275a:	69de      	ldr	r6, [r3, #28]
    275c:	9a03      	ldr	r2, [sp, #12]
    275e:	002b      	movs	r3, r5
    2760:	9902      	ldr	r1, [sp, #8]
    2762:	0020      	movs	r0, r4
    2764:	47b0      	blx	r6
    endWrite();
    2766:	6823      	ldr	r3, [r4, #0]
    2768:	0020      	movs	r0, r4
    276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    276c:	4798      	blx	r3
}
    276e:	b005      	add	sp, #20
    2770:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00002774 <_ZN16Adafruit_ILI934110startWriteEv>:
    SPI_BEGIN_TRANSACTION();
    2774:	6b03      	ldr	r3, [r0, #48]	; 0x30
void Adafruit_ILI9341::startWrite(void){
    2776:	b513      	push	{r0, r1, r4, lr}
    2778:	0004      	movs	r4, r0
    SPI_BEGIN_TRANSACTION();
    277a:	2b00      	cmp	r3, #0
    277c:	da0d      	bge.n	279a <_ZN16Adafruit_ILI934110startWriteEv+0x26>
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    277e:	6a01      	ldr	r1, [r0, #32]
    2780:	4b09      	ldr	r3, [pc, #36]	; (27a8 <_ZN16Adafruit_ILI934110startWriteEv+0x34>)
    2782:	4299      	cmp	r1, r3
    2784:	d900      	bls.n	2788 <_ZN16Adafruit_ILI934110startWriteEv+0x14>
    2786:	0019      	movs	r1, r3

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    2788:	466a      	mov	r2, sp
    278a:	2300      	movs	r3, #0
    278c:	7153      	strb	r3, [r2, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    278e:	7113      	strb	r3, [r2, #4]
    2790:	9a01      	ldr	r2, [sp, #4]
    2792:	4806      	ldr	r0, [pc, #24]	; (27ac <_ZN16Adafruit_ILI934110startWriteEv+0x38>)
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    2794:	9100      	str	r1, [sp, #0]
    2796:	f001 fe37 	bl	4408 <_ZN8SPIClass16beginTransactionE11SPISettings>
    SPI_CS_LOW();
    279a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    279c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    279e:	6813      	ldr	r3, [r2, #0]
    27a0:	438b      	bics	r3, r1
    27a2:	6013      	str	r3, [r2, #0]
}
    27a4:	bd13      	pop	{r0, r1, r4, pc}
    27a6:	46c0      	nop			; (mov r8, r8)
    27a8:	00b71b00 	.word	0x00b71b00
    27ac:	20000a04 	.word	0x20000a04

000027b0 <_ZN16Adafruit_ILI93418endWriteEv>:
    SPI_CS_HIGH();
    27b0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    27b2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    27b4:	6813      	ldr	r3, [r2, #0]
void Adafruit_ILI9341::endWrite(void){
    27b6:	b510      	push	{r4, lr}
    SPI_CS_HIGH();
    27b8:	430b      	orrs	r3, r1
    27ba:	6013      	str	r3, [r2, #0]
    SPI_END_TRANSACTION();
    27bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    27be:	2b00      	cmp	r3, #0
    27c0:	da02      	bge.n	27c8 <_ZN16Adafruit_ILI93418endWriteEv+0x18>
    27c2:	4802      	ldr	r0, [pc, #8]	; (27cc <_ZN16Adafruit_ILI93418endWriteEv+0x1c>)
    27c4:	f001 fe3c 	bl	4440 <_ZN8SPIClass14endTransactionEv>
}
    27c8:	bd10      	pop	{r4, pc}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	20000a04 	.word	0x20000a04

000027d0 <_ZN16Adafruit_ILI93418color565Ehhh>:
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    27d0:	20fc      	movs	r0, #252	; 0xfc
    27d2:	00d2      	lsls	r2, r2, #3
    27d4:	00c0      	lsls	r0, r0, #3
    27d6:	4002      	ands	r2, r0
    27d8:	08c9      	lsrs	r1, r1, #3
    27da:	08d8      	lsrs	r0, r3, #3
    27dc:	4310      	orrs	r0, r2
    27de:	02c9      	lsls	r1, r1, #11
    27e0:	4308      	orrs	r0, r1
}
    27e2:	4770      	bx	lr

000027e4 <_ZN16Adafruit_ILI9341C1Eaaa>:
Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT) {
    27e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27e6:	0016      	movs	r6, r2
    27e8:	22a0      	movs	r2, #160	; 0xa0
    27ea:	000d      	movs	r5, r1
    27ec:	0052      	lsls	r2, r2, #1
    27ee:	21f0      	movs	r1, #240	; 0xf0
    27f0:	0004      	movs	r4, r0
    27f2:	001f      	movs	r7, r3
    27f4:	f002 fa0c 	bl	4c10 <_ZN12Adafruit_GFXC1Ess>
    csport    = portOutputRegister(digitalPinToPort(_cs));
    27f8:	2118      	movs	r1, #24
    _cs   = cs;
    27fa:	6265      	str	r5, [r4, #36]	; 0x24
    csport    = portOutputRegister(digitalPinToPort(_cs));
    27fc:	434d      	muls	r5, r1
Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT) {
    27fe:	4b15      	ldr	r3, [pc, #84]	; (2854 <_ZN16Adafruit_ILI9341C1Eaaa+0x70>)
    csport    = portOutputRegister(digitalPinToPort(_cs));
    2800:	4a15      	ldr	r2, [pc, #84]	; (2858 <_ZN16Adafruit_ILI9341C1Eaaa+0x74>)
Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT) {
    2802:	3308      	adds	r3, #8
    csport    = portOutputRegister(digitalPinToPort(_cs));
    2804:	56a8      	ldrsb	r0, [r5, r2]
Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT) {
    2806:	6023      	str	r3, [r4, #0]
    _sclk  = -1;
    2808:	2301      	movs	r3, #1
    _rst  = rst;
    280a:	62e7      	str	r7, [r4, #44]	; 0x2c
    csport    = portOutputRegister(digitalPinToPort(_cs));
    280c:	4f13      	ldr	r7, [pc, #76]	; (285c <_ZN16Adafruit_ILI9341C1Eaaa+0x78>)
    280e:	01c0      	lsls	r0, r0, #7
    2810:	19c0      	adds	r0, r0, r7
    2812:	64e0      	str	r0, [r4, #76]	; 0x4c
    cspinmask = digitalPinToBitMask(_cs);
    2814:	2001      	movs	r0, #1
    _sclk  = -1;
    2816:	425b      	negs	r3, r3
    2818:	6323      	str	r3, [r4, #48]	; 0x30
    _mosi  = -1;
    281a:	6363      	str	r3, [r4, #52]	; 0x34
    _miso  = -1;
    281c:	63a3      	str	r3, [r4, #56]	; 0x38
    _freq = 0;
    281e:	2300      	movs	r3, #0
    cspinmask = digitalPinToBitMask(_cs);
    2820:	0007      	movs	r7, r0
    _dc   = dc;
    2822:	62a6      	str	r6, [r4, #40]	; 0x28
    _freq = 0;
    2824:	6223      	str	r3, [r4, #32]
    cspinmask = digitalPinToBitMask(_cs);
    2826:	1955      	adds	r5, r2, r5
    2828:	686d      	ldr	r5, [r5, #4]
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    282a:	434e      	muls	r6, r1
    cspinmask = digitalPinToBitMask(_cs);
    282c:	40af      	lsls	r7, r5
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    282e:	56b1      	ldrsb	r1, [r6, r2]
    cspinmask = digitalPinToBitMask(_cs);
    2830:	65e7      	str	r7, [r4, #92]	; 0x5c
    dcpinmask = digitalPinToBitMask(_dc);
    2832:	1992      	adds	r2, r2, r6
    2834:	6852      	ldr	r2, [r2, #4]
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    2836:	4d09      	ldr	r5, [pc, #36]	; (285c <_ZN16Adafruit_ILI9341C1Eaaa+0x78>)
    dcpinmask = digitalPinToBitMask(_dc);
    2838:	4090      	lsls	r0, r2
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    283a:	01c9      	lsls	r1, r1, #7
    283c:	1949      	adds	r1, r1, r5
    dcpinmask = digitalPinToBitMask(_dc);
    283e:	6620      	str	r0, [r4, #96]	; 0x60
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    2840:	64a1      	str	r1, [r4, #72]	; 0x48
}
    2842:	0020      	movs	r0, r4
    clkport     = 0;
    2844:	6463      	str	r3, [r4, #68]	; 0x44
    clkpinmask  = 0;
    2846:	65a3      	str	r3, [r4, #88]	; 0x58
    mosiport    = 0;
    2848:	63e3      	str	r3, [r4, #60]	; 0x3c
    mosipinmask = 0;
    284a:	6523      	str	r3, [r4, #80]	; 0x50
    misoport    = 0;
    284c:	6423      	str	r3, [r4, #64]	; 0x40
    misopinmask = 0;
    284e:	6563      	str	r3, [r4, #84]	; 0x54
}
    2850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	00005f44 	.word	0x00005f44
    2858:	00006010 	.word	0x00006010
    285c:	41004410 	.word	0x41004410

00002860 <_ZN16Adafruit_ILI93418spiWriteEh>:
void Adafruit_ILI9341::spiWrite(uint8_t b) {
    2860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(_sclk < 0){
    2862:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2864:	2b00      	cmp	r3, #0
    2866:	da03      	bge.n	2870 <_ZN16Adafruit_ILI93418spiWriteEh+0x10>
        HSPI_WRITE(b);
    2868:	480e      	ldr	r0, [pc, #56]	; (28a4 <_ZN16Adafruit_ILI93418spiWriteEh+0x44>)
    286a:	f001 fdfd 	bl	4468 <_ZN8SPIClass8transferEh>
}
    286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SSPI_SCK_LOW();
    2870:	2408      	movs	r4, #8
    2872:	2580      	movs	r5, #128	; 0x80
    2874:	6c43      	ldr	r3, [r0, #68]	; 0x44
    2876:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    2878:	6d07      	ldr	r7, [r0, #80]	; 0x50
            SSPI_MOSI_HIGH();
    287a:	6816      	ldr	r6, [r2, #0]
        if((b) & bit){
    287c:	420d      	tst	r5, r1
    287e:	d00e      	beq.n	289e <_ZN16Adafruit_ILI93418spiWriteEh+0x3e>
            SSPI_MOSI_HIGH();
    2880:	433e      	orrs	r6, r7
            SSPI_MOSI_LOW();
    2882:	6016      	str	r6, [r2, #0]
        SSPI_SCK_LOW();
    2884:	681a      	ldr	r2, [r3, #0]
    2886:	6d86      	ldr	r6, [r0, #88]	; 0x58
    2888:	3c01      	subs	r4, #1
    288a:	43b2      	bics	r2, r6
    288c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    288e:	681a      	ldr	r2, [r3, #0]
    2890:	6d86      	ldr	r6, [r0, #88]	; 0x58
    for(uint8_t bit = 0x80; bit; bit >>= 1){
    2892:	086d      	lsrs	r5, r5, #1
        SSPI_SCK_HIGH();
    2894:	4332      	orrs	r2, r6
    2896:	601a      	str	r2, [r3, #0]
    for(uint8_t bit = 0x80; bit; bit >>= 1){
    2898:	2c00      	cmp	r4, #0
    289a:	d1ec      	bne.n	2876 <_ZN16Adafruit_ILI93418spiWriteEh+0x16>
    289c:	e7e7      	b.n	286e <_ZN16Adafruit_ILI93418spiWriteEh+0xe>
            SSPI_MOSI_LOW();
    289e:	43be      	bics	r6, r7
    28a0:	e7ef      	b.n	2882 <_ZN16Adafruit_ILI93418spiWriteEh+0x22>
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	20000a04 	.word	0x20000a04

000028a8 <_ZN16Adafruit_ILI934112writeCommandEh>:
void Adafruit_ILI9341::writeCommand(uint8_t cmd){
    28a8:	b510      	push	{r4, lr}
    28aa:	0004      	movs	r4, r0
    SPI_DC_LOW();
    28ac:	6c82      	ldr	r2, [r0, #72]	; 0x48
    28ae:	6e00      	ldr	r0, [r0, #96]	; 0x60
    28b0:	6813      	ldr	r3, [r2, #0]
    28b2:	4383      	bics	r3, r0
    28b4:	6013      	str	r3, [r2, #0]
    spiWrite(cmd);
    28b6:	0020      	movs	r0, r4
    28b8:	f7ff ffd2 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    SPI_DC_HIGH();
    28bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    28be:	6e21      	ldr	r1, [r4, #96]	; 0x60
    28c0:	6813      	ldr	r3, [r2, #0]
    28c2:	430b      	orrs	r3, r1
    28c4:	6013      	str	r3, [r2, #0]
}
    28c6:	bd10      	pop	{r4, pc}

000028c8 <_ZN16Adafruit_ILI93415beginEm>:
{
    28c8:	b570      	push	{r4, r5, r6, lr}
    28ca:	0004      	movs	r4, r0
    if(!freq){
    28cc:	2900      	cmp	r1, #0
    28ce:	d100      	bne.n	28d2 <_ZN16Adafruit_ILI93415beginEm+0xa>
        freq = SPI_DEFAULT_FREQ;
    28d0:	49e8      	ldr	r1, [pc, #928]	; (2c74 <_ZN16Adafruit_ILI93415beginEm+0x3ac>)
    _freq = freq;
    28d2:	6221      	str	r1, [r4, #32]
    pinMode(_dc, OUTPUT);
    28d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    28d6:	2101      	movs	r1, #1
    28d8:	f7ff fc88 	bl	21ec <pinMode>
    digitalWrite(_dc, LOW);
    28dc:	2100      	movs	r1, #0
    28de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    28e0:	f7ff fcd0 	bl	2284 <digitalWrite>
    pinMode(_cs, OUTPUT);
    28e4:	2101      	movs	r1, #1
    28e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    28e8:	f7ff fc80 	bl	21ec <pinMode>
    digitalWrite(_cs, HIGH);
    28ec:	2101      	movs	r1, #1
    28ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    28f0:	f7ff fcc8 	bl	2284 <digitalWrite>
    if(_sclk >= 0){
    28f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    28f6:	2b00      	cmp	r3, #0
    28f8:	db18      	blt.n	292c <_ZN16Adafruit_ILI93415beginEm+0x64>
        pinMode(_mosi, OUTPUT);
    28fa:	2101      	movs	r1, #1
    28fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    28fe:	f7ff fc75 	bl	21ec <pinMode>
        digitalWrite(_mosi, LOW);
    2902:	2100      	movs	r1, #0
    2904:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2906:	f7ff fcbd 	bl	2284 <digitalWrite>
        pinMode(_sclk, OUTPUT);
    290a:	2101      	movs	r1, #1
    290c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    290e:	f7ff fc6d 	bl	21ec <pinMode>
        digitalWrite(_sclk, HIGH);
    2912:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2914:	2101      	movs	r1, #1
    2916:	f7ff fcb5 	bl	2284 <digitalWrite>
        if(_miso >= 0){
    291a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    291c:	2800      	cmp	r0, #0
    291e:	db02      	blt.n	2926 <_ZN16Adafruit_ILI93415beginEm+0x5e>
            pinMode(_miso, INPUT);
    2920:	2100      	movs	r1, #0
    2922:	f7ff fc63 	bl	21ec <pinMode>
    SPI_BEGIN();
    2926:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2928:	2b00      	cmp	r3, #0
    292a:	da02      	bge.n	2932 <_ZN16Adafruit_ILI93415beginEm+0x6a>
    292c:	48d2      	ldr	r0, [pc, #840]	; (2c78 <_ZN16Adafruit_ILI93415beginEm+0x3b0>)
    292e:	f001 fd43 	bl	43b8 <_ZN8SPIClass5beginEv>
    if (_rst >= 0) {
    2932:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2934:	2800      	cmp	r0, #0
    2936:	db17      	blt.n	2968 <_ZN16Adafruit_ILI93415beginEm+0xa0>
        pinMode(_rst, OUTPUT);
    2938:	2101      	movs	r1, #1
    293a:	f7ff fc57 	bl	21ec <pinMode>
        digitalWrite(_rst, HIGH);
    293e:	2101      	movs	r1, #1
    2940:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2942:	f7ff fc9f 	bl	2284 <digitalWrite>
        delay(100);
    2946:	2064      	movs	r0, #100	; 0x64
    2948:	f7fd fffc 	bl	944 <delay>
        digitalWrite(_rst, LOW);
    294c:	2100      	movs	r1, #0
    294e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2950:	f7ff fc98 	bl	2284 <digitalWrite>
        delay(100);
    2954:	2064      	movs	r0, #100	; 0x64
    2956:	f7fd fff5 	bl	944 <delay>
        digitalWrite(_rst, HIGH);
    295a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    295c:	2101      	movs	r1, #1
    295e:	f7ff fc91 	bl	2284 <digitalWrite>
        delay(200);
    2962:	20c8      	movs	r0, #200	; 0xc8
    2964:	f7fd ffee 	bl	944 <delay>
    startWrite();
    2968:	6823      	ldr	r3, [r4, #0]
    296a:	0020      	movs	r0, r4
    296c:	695b      	ldr	r3, [r3, #20]
    296e:	4798      	blx	r3
    writeCommand(0xEF);
    2970:	21ef      	movs	r1, #239	; 0xef
    2972:	0020      	movs	r0, r4
    2974:	f7ff ff98 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x03);
    2978:	2103      	movs	r1, #3
    297a:	0020      	movs	r0, r4
    297c:	f7ff ff70 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x80);
    2980:	2180      	movs	r1, #128	; 0x80
    2982:	0020      	movs	r0, r4
    2984:	f7ff ff6c 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x02);
    2988:	2102      	movs	r1, #2
    298a:	0020      	movs	r0, r4
    298c:	f7ff ff68 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(0xCF);
    2990:	21cf      	movs	r1, #207	; 0xcf
    2992:	0020      	movs	r0, r4
    2994:	f7ff ff88 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    2998:	2100      	movs	r1, #0
    299a:	0020      	movs	r0, r4
    299c:	f7ff ff60 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0XC1);
    29a0:	21c1      	movs	r1, #193	; 0xc1
    29a2:	0020      	movs	r0, r4
    29a4:	f7ff ff5c 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X30);
    29a8:	2130      	movs	r1, #48	; 0x30
    29aa:	0020      	movs	r0, r4
    29ac:	f7ff ff58 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(0xED);
    29b0:	21ed      	movs	r1, #237	; 0xed
    29b2:	0020      	movs	r0, r4
    29b4:	f7ff ff78 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x64);
    29b8:	2164      	movs	r1, #100	; 0x64
    29ba:	0020      	movs	r0, r4
    29bc:	f7ff ff50 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    29c0:	2103      	movs	r1, #3
    29c2:	0020      	movs	r0, r4
    29c4:	f7ff ff4c 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X12);
    29c8:	2112      	movs	r1, #18
    29ca:	0020      	movs	r0, r4
    29cc:	f7ff ff48 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X81);
    29d0:	2181      	movs	r1, #129	; 0x81
    29d2:	0020      	movs	r0, r4
    29d4:	f7ff ff44 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(0xE8);
    29d8:	21e8      	movs	r1, #232	; 0xe8
    29da:	0020      	movs	r0, r4
    29dc:	f7ff ff64 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x85);
    29e0:	2185      	movs	r1, #133	; 0x85
    29e2:	0020      	movs	r0, r4
    29e4:	f7ff ff3c 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    29e8:	2100      	movs	r1, #0
    29ea:	0020      	movs	r0, r4
    29ec:	f7ff ff38 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x78);
    29f0:	2178      	movs	r1, #120	; 0x78
    29f2:	0020      	movs	r0, r4
    29f4:	f7ff ff34 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(0xCB);
    29f8:	21cb      	movs	r1, #203	; 0xcb
    29fa:	0020      	movs	r0, r4
    29fc:	f7ff ff54 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x39);
    2a00:	2139      	movs	r1, #57	; 0x39
    2a02:	0020      	movs	r0, r4
    2a04:	f7ff ff2c 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x2C);
    2a08:	212c      	movs	r1, #44	; 0x2c
    2a0a:	0020      	movs	r0, r4
    2a0c:	f7ff ff28 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    2a10:	2100      	movs	r1, #0
    2a12:	0020      	movs	r0, r4
    2a14:	f7ff ff24 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x34);
    2a18:	2134      	movs	r1, #52	; 0x34
    2a1a:	0020      	movs	r0, r4
    2a1c:	f7ff ff20 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x02);
    2a20:	2102      	movs	r1, #2
    2a22:	0020      	movs	r0, r4
    2a24:	f7ff ff1c 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(0xF7);
    2a28:	21f7      	movs	r1, #247	; 0xf7
    2a2a:	0020      	movs	r0, r4
    2a2c:	f7ff ff3c 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x20);
    2a30:	2120      	movs	r1, #32
    2a32:	0020      	movs	r0, r4
    2a34:	f7ff ff14 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(0xEA);
    2a38:	21ea      	movs	r1, #234	; 0xea
    2a3a:	0020      	movs	r0, r4
    2a3c:	f7ff ff34 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    2a40:	2100      	movs	r1, #0
    2a42:	0020      	movs	r0, r4
    2a44:	f7ff ff0c 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    2a48:	2100      	movs	r1, #0
    2a4a:	0020      	movs	r0, r4
    2a4c:	f7ff ff08 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_PWCTR1);    //Power control
    2a50:	21c0      	movs	r1, #192	; 0xc0
    2a52:	0020      	movs	r0, r4
    2a54:	f7ff ff28 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x23);   //VRH[5:0]
    2a58:	2123      	movs	r1, #35	; 0x23
    2a5a:	0020      	movs	r0, r4
    2a5c:	f7ff ff00 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_PWCTR2);    //Power control
    2a60:	21c1      	movs	r1, #193	; 0xc1
    2a62:	0020      	movs	r0, r4
    2a64:	f7ff ff20 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x10);   //SAP[2:0];BT[3:0]
    2a68:	2110      	movs	r1, #16
    2a6a:	0020      	movs	r0, r4
    2a6c:	f7ff fef8 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_VMCTR1);    //VCM control
    2a70:	21c5      	movs	r1, #197	; 0xc5
    2a72:	0020      	movs	r0, r4
    2a74:	f7ff ff18 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x3e);
    2a78:	213e      	movs	r1, #62	; 0x3e
    2a7a:	0020      	movs	r0, r4
    2a7c:	f7ff fef0 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x28);
    2a80:	2128      	movs	r1, #40	; 0x28
    2a82:	0020      	movs	r0, r4
    2a84:	f7ff feec 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_VMCTR2);    //VCM control2
    2a88:	21c7      	movs	r1, #199	; 0xc7
    2a8a:	0020      	movs	r0, r4
    2a8c:	f7ff ff0c 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x86);  //--
    2a90:	2186      	movs	r1, #134	; 0x86
    2a92:	0020      	movs	r0, r4
    2a94:	f7ff fee4 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_MADCTL);    // Memory Access Control
    2a98:	2136      	movs	r1, #54	; 0x36
    2a9a:	0020      	movs	r0, r4
    2a9c:	f7ff ff04 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x48);
    2aa0:	2148      	movs	r1, #72	; 0x48
    2aa2:	0020      	movs	r0, r4
    2aa4:	f7ff fedc 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_VSCRSADD); // Vertical scroll
    2aa8:	2137      	movs	r1, #55	; 0x37
    2aaa:	0020      	movs	r0, r4
    2aac:	f7ff fefc 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE16(0);                 // Zero
    2ab0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	db00      	blt.n	2ab8 <_ZN16Adafruit_ILI93415beginEm+0x1f0>
    2ab6:	e0d3      	b.n	2c60 <_ZN16Adafruit_ILI93415beginEm+0x398>
    2ab8:	4d6f      	ldr	r5, [pc, #444]	; (2c78 <_ZN16Adafruit_ILI93415beginEm+0x3b0>)
    2aba:	2100      	movs	r1, #0
    2abc:	0028      	movs	r0, r5
    2abe:	f001 fcd3 	bl	4468 <_ZN8SPIClass8transferEh>
    2ac2:	2100      	movs	r1, #0
    2ac4:	0028      	movs	r0, r5
    2ac6:	f001 fccf 	bl	4468 <_ZN8SPIClass8transferEh>
    writeCommand(ILI9341_PIXFMT);
    2aca:	213a      	movs	r1, #58	; 0x3a
    2acc:	0020      	movs	r0, r4
    2ace:	f7ff feeb 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x55);
    2ad2:	2155      	movs	r1, #85	; 0x55
    2ad4:	0020      	movs	r0, r4
    2ad6:	f7ff fec3 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_FRMCTR1);
    2ada:	21b1      	movs	r1, #177	; 0xb1
    2adc:	0020      	movs	r0, r4
    2ade:	f7ff fee3 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    2ae2:	2100      	movs	r1, #0
    2ae4:	0020      	movs	r0, r4
    2ae6:	f7ff febb 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x18);
    2aea:	2118      	movs	r1, #24
    2aec:	0020      	movs	r0, r4
    2aee:	f7ff feb7 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_DFUNCTR);    // Display Function Control
    2af2:	21b6      	movs	r1, #182	; 0xb6
    2af4:	0020      	movs	r0, r4
    2af6:	f7ff fed7 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x08);
    2afa:	2108      	movs	r1, #8
    2afc:	0020      	movs	r0, r4
    2afe:	f7ff feaf 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x82);
    2b02:	2182      	movs	r1, #130	; 0x82
    2b04:	0020      	movs	r0, r4
    2b06:	f7ff feab 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x27);
    2b0a:	2127      	movs	r1, #39	; 0x27
    2b0c:	0020      	movs	r0, r4
    2b0e:	f7ff fea7 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(0xF2);    // 3Gamma Function Disable
    2b12:	21f2      	movs	r1, #242	; 0xf2
    2b14:	0020      	movs	r0, r4
    2b16:	f7ff fec7 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    2b1a:	2100      	movs	r1, #0
    2b1c:	0020      	movs	r0, r4
    2b1e:	f7ff fe9f 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_GAMMASET);    //Gamma curve selected
    2b22:	2126      	movs	r1, #38	; 0x26
    2b24:	0020      	movs	r0, r4
    2b26:	f7ff febf 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x01);
    2b2a:	2101      	movs	r1, #1
    2b2c:	0020      	movs	r0, r4
    2b2e:	f7ff fe97 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_GMCTRP1);    //Set Gamma
    2b32:	21e0      	movs	r1, #224	; 0xe0
    2b34:	0020      	movs	r0, r4
    2b36:	f7ff feb7 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x0F);
    2b3a:	210f      	movs	r1, #15
    2b3c:	0020      	movs	r0, r4
    2b3e:	f7ff fe8f 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    2b42:	2131      	movs	r1, #49	; 0x31
    2b44:	0020      	movs	r0, r4
    2b46:	f7ff fe8b 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x2B);
    2b4a:	212b      	movs	r1, #43	; 0x2b
    2b4c:	0020      	movs	r0, r4
    2b4e:	f7ff fe87 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0C);
    2b52:	210c      	movs	r1, #12
    2b54:	0020      	movs	r0, r4
    2b56:	f7ff fe83 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    2b5a:	210e      	movs	r1, #14
    2b5c:	0020      	movs	r0, r4
    2b5e:	f7ff fe7f 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x08);
    2b62:	2108      	movs	r1, #8
    2b64:	0020      	movs	r0, r4
    2b66:	f7ff fe7b 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x4E);
    2b6a:	214e      	movs	r1, #78	; 0x4e
    2b6c:	0020      	movs	r0, r4
    2b6e:	f7ff fe77 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0xF1);
    2b72:	21f1      	movs	r1, #241	; 0xf1
    2b74:	0020      	movs	r0, r4
    2b76:	f7ff fe73 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x37);
    2b7a:	2137      	movs	r1, #55	; 0x37
    2b7c:	0020      	movs	r0, r4
    2b7e:	f7ff fe6f 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x07);
    2b82:	2107      	movs	r1, #7
    2b84:	0020      	movs	r0, r4
    2b86:	f7ff fe6b 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x10);
    2b8a:	2110      	movs	r1, #16
    2b8c:	0020      	movs	r0, r4
    2b8e:	f7ff fe67 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    2b92:	2103      	movs	r1, #3
    2b94:	0020      	movs	r0, r4
    2b96:	f7ff fe63 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    2b9a:	210e      	movs	r1, #14
    2b9c:	0020      	movs	r0, r4
    2b9e:	f7ff fe5f 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x09);
    2ba2:	2109      	movs	r1, #9
    2ba4:	0020      	movs	r0, r4
    2ba6:	f7ff fe5b 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    2baa:	2100      	movs	r1, #0
    2bac:	0020      	movs	r0, r4
    2bae:	f7ff fe57 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_GMCTRN1);    //Set Gamma
    2bb2:	21e1      	movs	r1, #225	; 0xe1
    2bb4:	0020      	movs	r0, r4
    2bb6:	f7ff fe77 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    2bba:	2100      	movs	r1, #0
    2bbc:	0020      	movs	r0, r4
    2bbe:	f7ff fe4f 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    2bc2:	210e      	movs	r1, #14
    2bc4:	0020      	movs	r0, r4
    2bc6:	f7ff fe4b 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x14);
    2bca:	2114      	movs	r1, #20
    2bcc:	0020      	movs	r0, r4
    2bce:	f7ff fe47 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    2bd2:	2103      	movs	r1, #3
    2bd4:	0020      	movs	r0, r4
    2bd6:	f7ff fe43 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x11);
    2bda:	2111      	movs	r1, #17
    2bdc:	0020      	movs	r0, r4
    2bde:	f7ff fe3f 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x07);
    2be2:	2107      	movs	r1, #7
    2be4:	0020      	movs	r0, r4
    2be6:	f7ff fe3b 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    2bea:	2131      	movs	r1, #49	; 0x31
    2bec:	0020      	movs	r0, r4
    2bee:	f7ff fe37 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0xC1);
    2bf2:	21c1      	movs	r1, #193	; 0xc1
    2bf4:	0020      	movs	r0, r4
    2bf6:	f7ff fe33 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x48);
    2bfa:	2148      	movs	r1, #72	; 0x48
    2bfc:	0020      	movs	r0, r4
    2bfe:	f7ff fe2f 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x08);
    2c02:	2108      	movs	r1, #8
    2c04:	0020      	movs	r0, r4
    2c06:	f7ff fe2b 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0F);
    2c0a:	210f      	movs	r1, #15
    2c0c:	0020      	movs	r0, r4
    2c0e:	f7ff fe27 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0C);
    2c12:	210c      	movs	r1, #12
    2c14:	0020      	movs	r0, r4
    2c16:	f7ff fe23 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    2c1a:	2131      	movs	r1, #49	; 0x31
    2c1c:	0020      	movs	r0, r4
    2c1e:	f7ff fe1f 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x36);
    2c22:	2136      	movs	r1, #54	; 0x36
    2c24:	0020      	movs	r0, r4
    2c26:	f7ff fe1b 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0F);
    2c2a:	210f      	movs	r1, #15
    2c2c:	0020      	movs	r0, r4
    2c2e:	f7ff fe17 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_SLPOUT);    //Exit Sleep
    2c32:	2111      	movs	r1, #17
    2c34:	0020      	movs	r0, r4
    2c36:	f7ff fe37 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    delay(120);
    2c3a:	2078      	movs	r0, #120	; 0x78
    2c3c:	f7fd fe82 	bl	944 <delay>
    writeCommand(ILI9341_DISPON);    //Display on
    2c40:	2129      	movs	r1, #41	; 0x29
    2c42:	0020      	movs	r0, r4
    2c44:	f7ff fe30 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    delay(120);
    2c48:	2078      	movs	r0, #120	; 0x78
    2c4a:	f7fd fe7b 	bl	944 <delay>
    endWrite();
    2c4e:	6823      	ldr	r3, [r4, #0]
    2c50:	0020      	movs	r0, r4
    2c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c54:	4798      	blx	r3
    _width  = ILI9341_TFTWIDTH;
    2c56:	23f0      	movs	r3, #240	; 0xf0
    2c58:	81a3      	strh	r3, [r4, #12]
    _height = ILI9341_TFTHEIGHT;
    2c5a:	3350      	adds	r3, #80	; 0x50
    2c5c:	81e3      	strh	r3, [r4, #14]
}
    2c5e:	bd70      	pop	{r4, r5, r6, pc}
    SPI_WRITE16(0);                 // Zero
    2c60:	0020      	movs	r0, r4
    2c62:	2100      	movs	r1, #0
    2c64:	f7ff fdfc 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2c68:	2100      	movs	r1, #0
    2c6a:	0020      	movs	r0, r4
    2c6c:	f7ff fdf8 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2c70:	e72b      	b.n	2aca <_ZN16Adafruit_ILI93415beginEm+0x202>
    2c72:	46c0      	nop			; (mov r8, r8)
    2c74:	016e3600 	.word	0x016e3600
    2c78:	20000a04 	.word	0x20000a04

00002c7c <_ZN16Adafruit_ILI934111setRotationEh>:
    rotation = m % 4; // can't be higher than 3
    2c7c:	2303      	movs	r3, #3
    2c7e:	22a0      	movs	r2, #160	; 0xa0
    2c80:	4019      	ands	r1, r3
void Adafruit_ILI9341::setRotation(uint8_t m) {
    2c82:	b570      	push	{r4, r5, r6, lr}
    2c84:	33ed      	adds	r3, #237	; 0xed
    2c86:	0004      	movs	r4, r0
    rotation = m % 4; // can't be higher than 3
    2c88:	7641      	strb	r1, [r0, #25]
    2c8a:	0052      	lsls	r2, r2, #1
    switch (rotation) {
    2c8c:	2902      	cmp	r1, #2
    2c8e:	d01b      	beq.n	2cc8 <_ZN16Adafruit_ILI934111setRotationEh+0x4c>
    2c90:	2903      	cmp	r1, #3
    2c92:	d01d      	beq.n	2cd0 <_ZN16Adafruit_ILI934111setRotationEh+0x54>
    2c94:	2901      	cmp	r1, #1
    2c96:	d013      	beq.n	2cc0 <_ZN16Adafruit_ILI934111setRotationEh+0x44>
            m = (MADCTL_MX | MADCTL_BGR);
    2c98:	2548      	movs	r5, #72	; 0x48
            _width  = ILI9341_TFTWIDTH;
    2c9a:	8183      	strh	r3, [r0, #12]
            _height = ILI9341_TFTHEIGHT;
    2c9c:	81c2      	strh	r2, [r0, #14]
    startWrite();
    2c9e:	6823      	ldr	r3, [r4, #0]
    2ca0:	0020      	movs	r0, r4
    2ca2:	695b      	ldr	r3, [r3, #20]
    2ca4:	4798      	blx	r3
    writeCommand(ILI9341_MADCTL);
    2ca6:	0020      	movs	r0, r4
    2ca8:	2136      	movs	r1, #54	; 0x36
    2caa:	f7ff fdfd 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(m);
    2cae:	0029      	movs	r1, r5
    2cb0:	0020      	movs	r0, r4
    2cb2:	f7ff fdd5 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    endWrite();
    2cb6:	6823      	ldr	r3, [r4, #0]
    2cb8:	0020      	movs	r0, r4
    2cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2cbc:	4798      	blx	r3
}
    2cbe:	bd70      	pop	{r4, r5, r6, pc}
            _width  = ILI9341_TFTHEIGHT;
    2cc0:	8182      	strh	r2, [r0, #12]
            _height = ILI9341_TFTWIDTH;
    2cc2:	81c3      	strh	r3, [r0, #14]
            m = (MADCTL_MV | MADCTL_BGR);
    2cc4:	2528      	movs	r5, #40	; 0x28
            break;
    2cc6:	e7ea      	b.n	2c9e <_ZN16Adafruit_ILI934111setRotationEh+0x22>
            _width  = ILI9341_TFTWIDTH;
    2cc8:	8183      	strh	r3, [r0, #12]
            _height = ILI9341_TFTHEIGHT;
    2cca:	81c2      	strh	r2, [r0, #14]
            m = (MADCTL_MY | MADCTL_BGR);
    2ccc:	2588      	movs	r5, #136	; 0x88
            break;
    2cce:	e7e6      	b.n	2c9e <_ZN16Adafruit_ILI934111setRotationEh+0x22>
            _width  = ILI9341_TFTHEIGHT;
    2cd0:	8182      	strh	r2, [r0, #12]
            _height = ILI9341_TFTWIDTH;
    2cd2:	81c3      	strh	r3, [r0, #14]
            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
    2cd4:	25e8      	movs	r5, #232	; 0xe8
            break;
    2cd6:	e7e2      	b.n	2c9e <_ZN16Adafruit_ILI934111setRotationEh+0x22>

00002cd8 <_ZN16Adafruit_ILI934113invertDisplayEb>:
void Adafruit_ILI9341::invertDisplay(boolean i) {
    2cd8:	b570      	push	{r4, r5, r6, lr}
    2cda:	000d      	movs	r5, r1
    writeCommand(i ? ILI9341_INVON : ILI9341_INVOFF);
    2cdc:	1e69      	subs	r1, r5, #1
    2cde:	418d      	sbcs	r5, r1
    startWrite();
    2ce0:	6803      	ldr	r3, [r0, #0]
void Adafruit_ILI9341::invertDisplay(boolean i) {
    2ce2:	0004      	movs	r4, r0
    startWrite();
    2ce4:	695b      	ldr	r3, [r3, #20]
    2ce6:	4798      	blx	r3
    writeCommand(i ? ILI9341_INVON : ILI9341_INVOFF);
    2ce8:	0029      	movs	r1, r5
    2cea:	0020      	movs	r0, r4
    2cec:	3120      	adds	r1, #32
    2cee:	f7ff fddb 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    endWrite();
    2cf2:	6823      	ldr	r3, [r4, #0]
    2cf4:	0020      	movs	r0, r4
    2cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2cf8:	4798      	blx	r3
}
    2cfa:	bd70      	pop	{r4, r5, r6, pc}

00002cfc <_ZN16Adafruit_ILI934113setAddrWindowEtttt>:
void Adafruit_ILI9341::setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
    2cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2cfe:	001e      	movs	r6, r3
    2d00:	0004      	movs	r4, r0
    2d02:	ab08      	add	r3, sp, #32
    2d04:	881d      	ldrh	r5, [r3, #0]
    uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
    2d06:	198e      	adds	r6, r1, r6
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
    2d08:	1955      	adds	r5, r2, r5
    uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
    2d0a:	0409      	lsls	r1, r1, #16
    2d0c:	3e01      	subs	r6, #1
    2d0e:	430e      	orrs	r6, r1
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
    2d10:	0412      	lsls	r2, r2, #16
    writeCommand(ILI9341_CASET); // Column addr set
    2d12:	212a      	movs	r1, #42	; 0x2a
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
    2d14:	3d01      	subs	r5, #1
    2d16:	4315      	orrs	r5, r2
    writeCommand(ILI9341_CASET); // Column addr set
    2d18:	f7ff fdc6 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    2d1c:	0c33      	lsrs	r3, r6, #16
    2d1e:	9300      	str	r3, [sp, #0]
    2d20:	0a33      	lsrs	r3, r6, #8
    2d22:	9301      	str	r3, [sp, #4]
    SPI_WRITE32(xa);
    2d24:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2d26:	0e31      	lsrs	r1, r6, #24
    2d28:	b2c9      	uxtb	r1, r1
    2d2a:	b2f6      	uxtb	r6, r6
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	da34      	bge.n	2d9a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x9e>
    2d30:	4f2b      	ldr	r7, [pc, #172]	; (2de0 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe4>)
    2d32:	0038      	movs	r0, r7
    2d34:	f001 fb98 	bl	4468 <_ZN8SPIClass8transferEh>
    2d38:	466b      	mov	r3, sp
    2d3a:	0038      	movs	r0, r7
    2d3c:	7819      	ldrb	r1, [r3, #0]
    2d3e:	f001 fb93 	bl	4468 <_ZN8SPIClass8transferEh>
    2d42:	466b      	mov	r3, sp
    2d44:	0038      	movs	r0, r7
    2d46:	7919      	ldrb	r1, [r3, #4]
    2d48:	f001 fb8e 	bl	4468 <_ZN8SPIClass8transferEh>
    2d4c:	0031      	movs	r1, r6
    2d4e:	0038      	movs	r0, r7
    2d50:	f001 fb8a 	bl	4468 <_ZN8SPIClass8transferEh>
    writeCommand(ILI9341_PASET); // Row addr set
    2d54:	212b      	movs	r1, #43	; 0x2b
    2d56:	0020      	movs	r0, r4
    2d58:	f7ff fda6 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
    2d5c:	0a2b      	lsrs	r3, r5, #8
    2d5e:	9300      	str	r3, [sp, #0]
    SPI_WRITE32(ya);
    2d60:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2d62:	0e29      	lsrs	r1, r5, #24
    2d64:	0c2e      	lsrs	r6, r5, #16
    2d66:	b2c9      	uxtb	r1, r1
    2d68:	b2ed      	uxtb	r5, r5
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	da27      	bge.n	2dbe <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc2>
    2d6e:	4f1c      	ldr	r7, [pc, #112]	; (2de0 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe4>)
    2d70:	0038      	movs	r0, r7
    2d72:	f001 fb79 	bl	4468 <_ZN8SPIClass8transferEh>
    2d76:	b2f1      	uxtb	r1, r6
    2d78:	0038      	movs	r0, r7
    2d7a:	f001 fb75 	bl	4468 <_ZN8SPIClass8transferEh>
    2d7e:	466b      	mov	r3, sp
    2d80:	0038      	movs	r0, r7
    2d82:	7819      	ldrb	r1, [r3, #0]
    2d84:	f001 fb70 	bl	4468 <_ZN8SPIClass8transferEh>
    2d88:	0029      	movs	r1, r5
    2d8a:	0038      	movs	r0, r7
    2d8c:	f001 fb6c 	bl	4468 <_ZN8SPIClass8transferEh>
    writeCommand(ILI9341_RAMWR); // write to RAM
    2d90:	212c      	movs	r1, #44	; 0x2c
    2d92:	0020      	movs	r0, r4
    2d94:	f7ff fd88 	bl	28a8 <_ZN16Adafruit_ILI934112writeCommandEh>
}
    2d98:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    SPI_WRITE32(xa);
    2d9a:	0020      	movs	r0, r4
    2d9c:	f7ff fd60 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2da0:	466b      	mov	r3, sp
    2da2:	0020      	movs	r0, r4
    2da4:	7819      	ldrb	r1, [r3, #0]
    2da6:	f7ff fd5b 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2daa:	466b      	mov	r3, sp
    2dac:	0020      	movs	r0, r4
    2dae:	7919      	ldrb	r1, [r3, #4]
    2db0:	f7ff fd56 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2db4:	0031      	movs	r1, r6
    2db6:	0020      	movs	r0, r4
    2db8:	f7ff fd52 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2dbc:	e7ca      	b.n	2d54 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x58>
    SPI_WRITE32(ya);
    2dbe:	0020      	movs	r0, r4
    2dc0:	f7ff fd4e 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2dc4:	b2f1      	uxtb	r1, r6
    2dc6:	0020      	movs	r0, r4
    2dc8:	f7ff fd4a 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2dcc:	466b      	mov	r3, sp
    2dce:	0020      	movs	r0, r4
    2dd0:	7819      	ldrb	r1, [r3, #0]
    2dd2:	f7ff fd45 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2dd6:	0029      	movs	r1, r5
    2dd8:	0020      	movs	r0, r4
    2dda:	f7ff fd41 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2dde:	e7d7      	b.n	2d90 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x94>
    2de0:	20000a04 	.word	0x20000a04

00002de4 <_ZN16Adafruit_ILI934110writePixelEt>:
    SPI_WRITE16(color);
    2de4:	6b02      	ldr	r2, [r0, #48]	; 0x30
    2de6:	120b      	asrs	r3, r1, #8
void Adafruit_ILI9341::writePixel(uint16_t color){
    2de8:	b570      	push	{r4, r5, r6, lr}
    2dea:	b2cc      	uxtb	r4, r1
    2dec:	0005      	movs	r5, r0
    SPI_WRITE16(color);
    2dee:	b2d9      	uxtb	r1, r3
    2df0:	2a00      	cmp	r2, #0
    2df2:	da08      	bge.n	2e06 <_ZN16Adafruit_ILI934110writePixelEt+0x22>
    2df4:	4d07      	ldr	r5, [pc, #28]	; (2e14 <_ZN16Adafruit_ILI934110writePixelEt+0x30>)
    2df6:	0028      	movs	r0, r5
    2df8:	f001 fb36 	bl	4468 <_ZN8SPIClass8transferEh>
    2dfc:	0021      	movs	r1, r4
    2dfe:	0028      	movs	r0, r5
    2e00:	f001 fb32 	bl	4468 <_ZN8SPIClass8transferEh>
}
    2e04:	bd70      	pop	{r4, r5, r6, pc}
    SPI_WRITE16(color);
    2e06:	f7ff fd2b 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    2e0a:	0021      	movs	r1, r4
    2e0c:	0028      	movs	r0, r5
    2e0e:	f7ff fd27 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
}
    2e12:	e7f7      	b.n	2e04 <_ZN16Adafruit_ILI934110writePixelEt+0x20>
    2e14:	20000a04 	.word	0x20000a04

00002e18 <_ZN16Adafruit_ILI934110writePixelEsst>:
void Adafruit_ILI9341::writePixel(int16_t x, int16_t y, uint16_t color) {
    2e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2e1a:	0004      	movs	r4, r0
    2e1c:	001d      	movs	r5, r3
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    2e1e:	2900      	cmp	r1, #0
    2e20:	db14      	blt.n	2e4c <_ZN16Adafruit_ILI934110writePixelEsst+0x34>
    2e22:	200c      	movs	r0, #12
    2e24:	5e23      	ldrsh	r3, [r4, r0]
    2e26:	428b      	cmp	r3, r1
    2e28:	dd10      	ble.n	2e4c <_ZN16Adafruit_ILI934110writePixelEsst+0x34>
    2e2a:	2a00      	cmp	r2, #0
    2e2c:	db0e      	blt.n	2e4c <_ZN16Adafruit_ILI934110writePixelEsst+0x34>
    2e2e:	200e      	movs	r0, #14
    2e30:	5e23      	ldrsh	r3, [r4, r0]
    2e32:	4293      	cmp	r3, r2
    2e34:	dd0a      	ble.n	2e4c <_ZN16Adafruit_ILI934110writePixelEsst+0x34>
    setAddrWindow(x,y,1,1);
    2e36:	2301      	movs	r3, #1
    2e38:	b289      	uxth	r1, r1
    2e3a:	0020      	movs	r0, r4
    2e3c:	b292      	uxth	r2, r2
    2e3e:	9300      	str	r3, [sp, #0]
    2e40:	f7ff ff5c 	bl	2cfc <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    writePixel(color);
    2e44:	0029      	movs	r1, r5
    2e46:	0020      	movs	r0, r4
    2e48:	f7ff ffcc 	bl	2de4 <_ZN16Adafruit_ILI934110writePixelEt>
}
    2e4c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

00002e50 <_ZN16Adafruit_ILI934110writeColorEtm>:
void Adafruit_ILI9341::writeColor(uint16_t color, uint32_t len){
    2e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(_sclk < 0){ //AVR Optimization
    2e52:	6b03      	ldr	r3, [r0, #48]	; 0x30
void Adafruit_ILI9341::writeColor(uint16_t color, uint32_t len){
    2e54:	0006      	movs	r6, r0
    2e56:	0014      	movs	r4, r2
    uint8_t hi = color >> 8, lo = color;
    2e58:	0a0f      	lsrs	r7, r1, #8
    2e5a:	b2cd      	uxtb	r5, r1
    if(_sclk < 0){ //AVR Optimization
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	da0c      	bge.n	2e7a <_ZN16Adafruit_ILI934110writeColorEtm+0x2a>
        for (uint32_t t=len; t; t--){
    2e60:	2c00      	cmp	r4, #0
    2e62:	d016      	beq.n	2e92 <_ZN16Adafruit_ILI934110writeColorEtm+0x42>
            HSPI_WRITE(hi);
    2e64:	4e0b      	ldr	r6, [pc, #44]	; (2e94 <_ZN16Adafruit_ILI934110writeColorEtm+0x44>)
    2e66:	0039      	movs	r1, r7
    2e68:	0030      	movs	r0, r6
    2e6a:	f001 fafd 	bl	4468 <_ZN8SPIClass8transferEh>
            HSPI_WRITE(lo);
    2e6e:	0029      	movs	r1, r5
    2e70:	0030      	movs	r0, r6
    2e72:	f001 faf9 	bl	4468 <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    2e76:	3c01      	subs	r4, #1
    2e78:	e7f2      	b.n	2e60 <_ZN16Adafruit_ILI934110writeColorEtm+0x10>
    for (uint32_t t=len; t; t--){
    2e7a:	2c00      	cmp	r4, #0
    2e7c:	d009      	beq.n	2e92 <_ZN16Adafruit_ILI934110writeColorEtm+0x42>
        spiWrite(hi);
    2e7e:	0039      	movs	r1, r7
    2e80:	0030      	movs	r0, r6
    2e82:	f7ff fced 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
        spiWrite(lo);
    2e86:	0029      	movs	r1, r5
    2e88:	0030      	movs	r0, r6
    2e8a:	f7ff fce9 	bl	2860 <_ZN16Adafruit_ILI93418spiWriteEh>
    for (uint32_t t=len; t; t--){
    2e8e:	3c01      	subs	r4, #1
    2e90:	e7f3      	b.n	2e7a <_ZN16Adafruit_ILI934110writeColorEtm+0x2a>
}
    2e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e94:	20000a04 	.word	0x20000a04

00002e98 <_ZN16Adafruit_ILI934113writeFillRectEsssst>:
void Adafruit_ILI9341::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
    2e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e9a:	0004      	movs	r4, r0
    2e9c:	b087      	sub	sp, #28
    2e9e:	a80c      	add	r0, sp, #48	; 0x30
    2ea0:	2500      	movs	r5, #0
    2ea2:	5f40      	ldrsh	r0, [r0, r5]
    2ea4:	ad0d      	add	r5, sp, #52	; 0x34
    2ea6:	882d      	ldrh	r5, [r5, #0]
    2ea8:	9505      	str	r5, [sp, #20]
    if((x >= _width) || (y >= _height)) return;
    2eaa:	260c      	movs	r6, #12
    2eac:	5fa5      	ldrsh	r5, [r4, r6]
    2eae:	428d      	cmp	r5, r1
    2eb0:	dd39      	ble.n	2f26 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x8e>
    2eb2:	270e      	movs	r7, #14
    2eb4:	5fe6      	ldrsh	r6, [r4, r7]
    2eb6:	46b4      	mov	ip, r6
    2eb8:	4296      	cmp	r6, r2
    2eba:	dd34      	ble.n	2f26 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x8e>
    int16_t x2 = x + w - 1, y2 = y + h - 1;
    2ebc:	18ce      	adds	r6, r1, r3
    2ebe:	b2b6      	uxth	r6, r6
    2ec0:	9602      	str	r6, [sp, #8]
    2ec2:	1817      	adds	r7, r2, r0
    2ec4:	3e01      	subs	r6, #1
    2ec6:	b236      	sxth	r6, r6
    2ec8:	b2bf      	uxth	r7, r7
    2eca:	9603      	str	r6, [sp, #12]
    2ecc:	1e7e      	subs	r6, r7, #1
    2ece:	b236      	sxth	r6, r6
    2ed0:	9604      	str	r6, [sp, #16]
    if((x2 < 0) || (y2 < 0)) return;
    2ed2:	9e03      	ldr	r6, [sp, #12]
    2ed4:	2e00      	cmp	r6, #0
    2ed6:	db26      	blt.n	2f26 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x8e>
    2ed8:	9e04      	ldr	r6, [sp, #16]
    2eda:	2e00      	cmp	r6, #0
    2edc:	db23      	blt.n	2f26 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x8e>
    if(x < 0) {
    2ede:	2900      	cmp	r1, #0
    2ee0:	da03      	bge.n	2eea <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x52>
        w = x2 + 1;
    2ee2:	466b      	mov	r3, sp
    2ee4:	2108      	movs	r1, #8
    2ee6:	5e5b      	ldrsh	r3, [r3, r1]
        x = 0;
    2ee8:	2100      	movs	r1, #0
    if(y < 0) {
    2eea:	2a00      	cmp	r2, #0
    2eec:	da01      	bge.n	2ef2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x5a>
        y = 0;
    2eee:	2200      	movs	r2, #0
        h = y2 + 1;
    2ef0:	b238      	sxth	r0, r7
    if(x2 >= _width)  w = _width  - x;
    2ef2:	9e03      	ldr	r6, [sp, #12]
    2ef4:	42b5      	cmp	r5, r6
    2ef6:	dc01      	bgt.n	2efc <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x64>
    2ef8:	1a6b      	subs	r3, r5, r1
    2efa:	b21b      	sxth	r3, r3
    if(y2 >= _height) h = _height - y;
    2efc:	9d04      	ldr	r5, [sp, #16]
    2efe:	45ac      	cmp	ip, r5
    2f00:	dc02      	bgt.n	2f08 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x70>
    2f02:	4660      	mov	r0, ip
    2f04:	1a80      	subs	r0, r0, r2
    2f06:	b200      	sxth	r0, r0
    int32_t len = (int32_t)w * h;
    2f08:	0005      	movs	r5, r0
    2f0a:	435d      	muls	r5, r3
    setAddrWindow(x, y, w, h);
    2f0c:	b280      	uxth	r0, r0
    2f0e:	b292      	uxth	r2, r2
    2f10:	b289      	uxth	r1, r1
    2f12:	9000      	str	r0, [sp, #0]
    2f14:	b29b      	uxth	r3, r3
    2f16:	0020      	movs	r0, r4
    2f18:	f7ff fef0 	bl	2cfc <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    writeColor(color, len);
    2f1c:	002a      	movs	r2, r5
    2f1e:	9905      	ldr	r1, [sp, #20]
    2f20:	0020      	movs	r0, r4
    2f22:	f7ff ff95 	bl	2e50 <_ZN16Adafruit_ILI934110writeColorEtm>
}
    2f26:	b007      	add	sp, #28
    2f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f2a <_ZN5SDLib4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    2f2a:	b513      	push	{r0, r1, r4, lr}
    2f2c:	466b      	mov	r3, sp
  return write(&val, 1);
    2f2e:	6802      	ldr	r2, [r0, #0]
size_t File::write(uint8_t val) {
    2f30:	71d9      	strb	r1, [r3, #7]
    2f32:	3307      	adds	r3, #7
  return write(&val, 1);
    2f34:	6854      	ldr	r4, [r2, #4]
    2f36:	0019      	movs	r1, r3
    2f38:	2201      	movs	r2, #1
    2f3a:	47a0      	blx	r4
}
    2f3c:	bd16      	pop	{r1, r2, r4, pc}

00002f3e <_ZN5SDLib4File5writeEPKhj>:

size_t File::write(const uint8_t *buf, size_t size) {
    2f3e:	b510      	push	{r4, lr}
    2f40:	0004      	movs	r4, r0
  size_t t;
  if (!_file) {
    2f42:	6a00      	ldr	r0, [r0, #32]
    2f44:	2800      	cmp	r0, #0
    2f46:	d103      	bne.n	2f50 <_ZN5SDLib4File5writeEPKhj+0x12>
    void setWriteError(int err = 1) { write_error = err; }
    2f48:	2301      	movs	r3, #1
    setWriteError();
    return 0;
    2f4a:	2000      	movs	r0, #0
    2f4c:	6063      	str	r3, [r4, #4]
  if (_file->getWriteError()) {
    setWriteError();
    return 0;
  }
  return t;
}
    2f4e:	bd10      	pop	{r4, pc}
    2f50:	2300      	movs	r3, #0
  t = _file->write(buf, size);
    2f52:	b292      	uxth	r2, r2
    2f54:	6043      	str	r3, [r0, #4]
    2f56:	f000 ff13 	bl	3d80 <_ZN6SdFile5writeEPKvt>
  if (_file->getWriteError()) {
    2f5a:	6a23      	ldr	r3, [r4, #32]
    2f5c:	685b      	ldr	r3, [r3, #4]
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d1f2      	bne.n	2f48 <_ZN5SDLib4File5writeEPKhj+0xa>
    2f62:	e7f4      	b.n	2f4e <_ZN5SDLib4File5writeEPKhj+0x10>

00002f64 <_ZN5SDLib4File5flushEv>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    2f64:	6a00      	ldr	r0, [r0, #32]
void File::flush() {
    2f66:	b510      	push	{r4, lr}
  if (_file)
    2f68:	2800      	cmp	r0, #0
    2f6a:	d001      	beq.n	2f70 <_ZN5SDLib4File5flushEv+0xc>
    _file->sync();
    2f6c:	f000 fd92 	bl	3a94 <_ZN6SdFile4syncEv>
}
    2f70:	bd10      	pop	{r4, pc}

00002f72 <_ZN6SdFile4readEv>:
   * Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    2f72:	b513      	push	{r0, r1, r4, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    2f74:	466b      	mov	r3, sp
    2f76:	1ddc      	adds	r4, r3, #7
    2f78:	2201      	movs	r2, #1
    2f7a:	0021      	movs	r1, r4
    2f7c:	f000 fcb6 	bl	38ec <_ZN6SdFile4readEPvt>
    2f80:	2801      	cmp	r0, #1
    2f82:	d101      	bne.n	2f88 <_ZN6SdFile4readEv+0x16>
    2f84:	7820      	ldrb	r0, [r4, #0]
  }
    2f86:	bd16      	pop	{r1, r2, r4, pc}
    return read(&b, 1) == 1 ? b : -1;
    2f88:	2001      	movs	r0, #1
    2f8a:	4240      	negs	r0, r0
    2f8c:	e7fb      	b.n	2f86 <_ZN6SdFile4readEv+0x14>

00002f8e <_ZN5SDLib4File4readEv>:
  if (_file) 
    2f8e:	6a00      	ldr	r0, [r0, #32]
int File::read() {
    2f90:	b510      	push	{r4, lr}
  if (_file) 
    2f92:	2800      	cmp	r0, #0
    2f94:	d002      	beq.n	2f9c <_ZN5SDLib4File4readEv+0xe>
    return _file->read();
    2f96:	f7ff ffec 	bl	2f72 <_ZN6SdFile4readEv>
}
    2f9a:	bd10      	pop	{r4, pc}
  return -1;
    2f9c:	2001      	movs	r0, #1
    2f9e:	4240      	negs	r0, r0
    2fa0:	e7fb      	b.n	2f9a <_ZN5SDLib4File4readEv+0xc>

00002fa2 <_ZN5SDLib4File4peekEv>:
int File::peek() {
    2fa2:	b570      	push	{r4, r5, r6, lr}
    2fa4:	0005      	movs	r5, r0
  if (! _file) 
    2fa6:	6a00      	ldr	r0, [r0, #32]
    return 0;
    2fa8:	1e04      	subs	r4, r0, #0
  if (! _file) 
    2faa:	d009      	beq.n	2fc0 <_ZN5SDLib4File4peekEv+0x1e>
  int c = _file->read();
    2fac:	f7ff ffe1 	bl	2f72 <_ZN6SdFile4readEv>
    2fb0:	0004      	movs	r4, r0
  if (c != -1) _file->seekCur(-1);
    2fb2:	1c43      	adds	r3, r0, #1
    2fb4:	d004      	beq.n	2fc0 <_ZN5SDLib4File4peekEv+0x1e>
    2fb6:	6a28      	ldr	r0, [r5, #32]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    2fb8:	6903      	ldr	r3, [r0, #16]
    2fba:	1e59      	subs	r1, r3, #1
    2fbc:	f000 fd3a 	bl	3a34 <_ZN6SdFile7seekSetEm>
}
    2fc0:	0020      	movs	r0, r4
    2fc2:	bd70      	pop	{r4, r5, r6, pc}

00002fc4 <_ZN5SDLib4FileC1E6SdFilePKc>:
File::File(SdFile f, const char *n) {
    2fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fc6:	23fa      	movs	r3, #250	; 0xfa
    Print() : write_error(0) {}
    2fc8:	2500      	movs	r5, #0
    2fca:	009b      	lsls	r3, r3, #2
    2fcc:	6083      	str	r3, [r0, #8]
    2fce:	4b0d      	ldr	r3, [pc, #52]	; (3004 <_ZN5SDLib4FileC1E6SdFilePKc+0x40>)
    2fd0:	0004      	movs	r4, r0
    2fd2:	3308      	adds	r3, #8
    2fd4:	6045      	str	r5, [r0, #4]
    2fd6:	6003      	str	r3, [r0, #0]
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    2fd8:	2028      	movs	r0, #40	; 0x28
File::File(SdFile f, const char *n) {
    2fda:	000f      	movs	r7, r1
    2fdc:	0016      	movs	r6, r2
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    2fde:	f002 fd47 	bl	5a70 <malloc>
    2fe2:	6220      	str	r0, [r4, #32]
  if (_file) {
    2fe4:	42a8      	cmp	r0, r5
    2fe6:	d00a      	beq.n	2ffe <_ZN5SDLib4FileC1E6SdFilePKc+0x3a>
    memcpy(_file, &f, sizeof(SdFile));
    2fe8:	2228      	movs	r2, #40	; 0x28
    2fea:	0039      	movs	r1, r7
    2fec:	f002 fd63 	bl	5ab6 <memcpy>
    strncpy(_name, n, 12);
    2ff0:	0020      	movs	r0, r4
    2ff2:	220c      	movs	r2, #12
    2ff4:	0031      	movs	r1, r6
    2ff6:	3010      	adds	r0, #16
    2ff8:	f002 fe4f 	bl	5c9a <strncpy>
    _name[12] = 0;
    2ffc:	7725      	strb	r5, [r4, #28]
}
    2ffe:	0020      	movs	r0, r4
    3000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3002:	46c0      	nop			; (mov r8, r8)
    3004:	00005f9c 	.word	0x00005f9c

00003008 <_ZN5SDLib4FileC1Ev>:
    3008:	22fa      	movs	r2, #250	; 0xfa
    300a:	2300      	movs	r3, #0
    300c:	0092      	lsls	r2, r2, #2
    300e:	6082      	str	r2, [r0, #8]
File::File(void) {
    3010:	4a03      	ldr	r2, [pc, #12]	; (3020 <_ZN5SDLib4FileC1Ev+0x18>)
    3012:	6043      	str	r3, [r0, #4]
    3014:	3208      	adds	r2, #8
    3016:	6002      	str	r2, [r0, #0]
  _file = 0;
    3018:	6203      	str	r3, [r0, #32]
  _name[0] = 0;
    301a:	7403      	strb	r3, [r0, #16]
}
    301c:	4770      	bx	lr
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	00005f9c 	.word	0x00005f9c

00003024 <_ZN5SDLib4File4readEPvt>:
  if (_file) 
    3024:	6a03      	ldr	r3, [r0, #32]
int File::read(void *buf, uint16_t nbyte) {
    3026:	b510      	push	{r4, lr}
  return 0;
    3028:	1e18      	subs	r0, r3, #0
  if (_file) 
    302a:	d001      	beq.n	3030 <_ZN5SDLib4File4readEPvt+0xc>
    return _file->read(buf, nbyte);
    302c:	f000 fc5e 	bl	38ec <_ZN6SdFile4readEPvt>
}
    3030:	bd10      	pop	{r4, pc}

00003032 <_ZN5SDLib4File4seekEm>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
    3032:	6a03      	ldr	r3, [r0, #32]
boolean File::seek(uint32_t pos) {
    3034:	b510      	push	{r4, lr}
  if (! _file) return false;
    3036:	1e18      	subs	r0, r3, #0
    3038:	d004      	beq.n	3044 <_ZN5SDLib4File4seekEm+0x12>

  return _file->seekSet(pos);
    303a:	f000 fcfb 	bl	3a34 <_ZN6SdFile7seekSetEm>
    303e:	1e43      	subs	r3, r0, #1
    3040:	4198      	sbcs	r0, r3
    3042:	b2c0      	uxtb	r0, r0
}
    3044:	bd10      	pop	{r4, pc}

00003046 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    3046:	6a03      	ldr	r3, [r0, #32]
    3048:	2b00      	cmp	r3, #0
    304a:	d001      	beq.n	3050 <_ZN5SDLib4File8positionEv+0xa>
    304c:	6918      	ldr	r0, [r3, #16]
  return _file->curPosition();
}
    304e:	4770      	bx	lr
  if (! _file) return -1;
    3050:	2001      	movs	r0, #1
    3052:	4240      	negs	r0, r0
    3054:	e7fb      	b.n	304e <_ZN5SDLib4File8positionEv+0x8>

00003056 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    3056:	6a03      	ldr	r3, [r0, #32]
    3058:	1e18      	subs	r0, r3, #0
    305a:	d000      	beq.n	305e <_ZN5SDLib4File4sizeEv+0x8>
    305c:	69d8      	ldr	r0, [r3, #28]
  return _file->fileSize();
}
    305e:	4770      	bx	lr

00003060 <_ZN5SDLib4File9availableEv>:
int File::available() {
    3060:	b570      	push	{r4, r5, r6, lr}
    3062:	0005      	movs	r5, r0
    3064:	6a00      	ldr	r0, [r0, #32]
  if (! _file) return 0;
    3066:	2800      	cmp	r0, #0
    3068:	d00b      	beq.n	3082 <_ZN5SDLib4File9availableEv+0x22>
  uint32_t n = size() - position();
    306a:	0028      	movs	r0, r5
    306c:	f7ff fff3 	bl	3056 <_ZN5SDLib4File4sizeEv>
    3070:	0004      	movs	r4, r0
    3072:	0028      	movs	r0, r5
    3074:	f7ff ffe7 	bl	3046 <_ZN5SDLib4File8positionEv>
  return n > 0X7FFF ? 0X7FFF : n;
    3078:	4b02      	ldr	r3, [pc, #8]	; (3084 <_ZN5SDLib4File9availableEv+0x24>)
  uint32_t n = size() - position();
    307a:	1a20      	subs	r0, r4, r0
  return n > 0X7FFF ? 0X7FFF : n;
    307c:	4298      	cmp	r0, r3
    307e:	d900      	bls.n	3082 <_ZN5SDLib4File9availableEv+0x22>
    3080:	0018      	movs	r0, r3
}
    3082:	bd70      	pop	{r4, r5, r6, pc}
    3084:	00007fff 	.word	0x00007fff

00003088 <_ZN5SDLib4File5closeEv>:

void File::close() {
    3088:	b510      	push	{r4, lr}
    308a:	0004      	movs	r4, r0
  if (_file) {
    308c:	6a00      	ldr	r0, [r0, #32]
    308e:	2800      	cmp	r0, #0
    3090:	d006      	beq.n	30a0 <_ZN5SDLib4File5closeEv+0x18>
    _file->close();
    3092:	f000 fd3b 	bl	3b0c <_ZN6SdFile5closeEv>
    free(_file); 
    3096:	6a20      	ldr	r0, [r4, #32]
    3098:	f002 fcf4 	bl	5a84 <free>
    _file = 0;
    309c:	2300      	movs	r3, #0
    309e:	6223      	str	r3, [r4, #32]
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    30a0:	bd10      	pop	{r4, pc}

000030a2 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) 
    30a2:	6a03      	ldr	r3, [r0, #32]
    return  _file->isOpen();
  return false;
    30a4:	1e18      	subs	r0, r3, #0
  if (_file) 
    30a6:	d003      	beq.n	30b0 <_ZN5SDLib4FilecvbEv+0xe>
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    30a8:	7a58      	ldrb	r0, [r3, #9]
    30aa:	1e43      	subs	r3, r0, #1
    30ac:	4198      	sbcs	r0, r3
    30ae:	b2c0      	uxtb	r0, r0
}
    30b0:	4770      	bx	lr

000030b2 <_ZN8SdVolume4initEP7Sd2Card>:
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    30b2:	b570      	push	{r4, r5, r6, lr}
    30b4:	2201      	movs	r2, #1
    30b6:	0004      	movs	r4, r0
    30b8:	000d      	movs	r5, r1
    30ba:	f001 f8cd 	bl	4258 <_ZN8SdVolume4initEP7Sd2Cardh>
    30be:	0002      	movs	r2, r0
    30c0:	2001      	movs	r0, #1
    30c2:	2a00      	cmp	r2, #0
    30c4:	d103      	bne.n	30ce <_ZN8SdVolume4initEP7Sd2Card+0x1c>
    30c6:	0029      	movs	r1, r5
    30c8:	0020      	movs	r0, r4
    30ca:	f001 f8c5 	bl	4258 <_ZN8SdVolume4initEP7Sd2Cardh>
    30ce:	bd70      	pop	{r4, r5, r6, pc}

000030d0 <_ZN5SDLib7SDClass5beginEh>:
/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
  if(root.isOpen()) root.close();
    30d0:	0003      	movs	r3, r0
boolean SDClass::begin(uint8_t csPin) {
    30d2:	b570      	push	{r4, r5, r6, lr}
  if(root.isOpen()) root.close();
    30d4:	3341      	adds	r3, #65	; 0x41
    30d6:	781b      	ldrb	r3, [r3, #0]
boolean SDClass::begin(uint8_t csPin) {
    30d8:	0004      	movs	r4, r0
    30da:	000d      	movs	r5, r1
  if(root.isOpen()) root.close();
    30dc:	2b00      	cmp	r3, #0
    30de:	d002      	beq.n	30e6 <_ZN5SDLib7SDClass5beginEh+0x16>
    30e0:	3038      	adds	r0, #56	; 0x38
    30e2:	f000 fd13 	bl	3b0c <_ZN6SdFile5closeEv>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    30e6:	002a      	movs	r2, r5
    30e8:	2101      	movs	r1, #1
    30ea:	0020      	movs	r0, r4
    30ec:	f000 f9b6 	bl	345c <_ZN7Sd2Card4initEhh>
         volume.init(card) &&
    30f0:	2800      	cmp	r0, #0
    30f2:	d101      	bne.n	30f8 <_ZN5SDLib7SDClass5beginEh+0x28>
    30f4:	2000      	movs	r0, #0
         root.openRoot(volume);
}
    30f6:	bd70      	pop	{r4, r5, r6, pc}
         volume.init(card) &&
    30f8:	0025      	movs	r5, r4
    30fa:	3510      	adds	r5, #16
  static Sd2Card* sdCard(void) {return sdCard_;}
//------------------------------------------------------------------------------
#if ALLOW_DEPRECATED_FUNCTIONS
  // Deprecated functions  - suppress cpplint warnings with NOLINT comment
  /** \deprecated Use: uint8_t SdVolume::init(Sd2Card* dev); */
  uint8_t init(Sd2Card& dev) {return init(&dev);}  // NOLINT
    30fc:	0021      	movs	r1, r4
    30fe:	0028      	movs	r0, r5
    3100:	f7ff ffd7 	bl	30b2 <_ZN8SdVolume4initEP7Sd2Card>
  return card.init(SPI_HALF_SPEED, csPin) &&
    3104:	2800      	cmp	r0, #0
    3106:	d0f5      	beq.n	30f4 <_ZN5SDLib7SDClass5beginEh+0x24>
         root.openRoot(volume);
    3108:	0020      	movs	r0, r4
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    310a:	0029      	movs	r1, r5
    310c:	3038      	adds	r0, #56	; 0x38
    310e:	f000 fbc3 	bl	3898 <_ZN6SdFile8openRootEP8SdVolume>
         volume.init(card) &&
    3112:	1e43      	subs	r3, r0, #1
    3114:	4198      	sbcs	r0, r3
    3116:	b2c0      	uxtb	r0, r0
    3118:	e7ed      	b.n	30f6 <_ZN5SDLib7SDClass5beginEh+0x26>
	...

0000311c <_ZN6SdFileC1ERKS_>:
class Print
    311c:	684b      	ldr	r3, [r1, #4]
    311e:	6043      	str	r3, [r0, #4]
class SdFile : public Print {
    3120:	4b0a      	ldr	r3, [pc, #40]	; (314c <_ZN6SdFileC1ERKS_+0x30>)
    3122:	6003      	str	r3, [r0, #0]
    3124:	7a0b      	ldrb	r3, [r1, #8]
    3126:	7203      	strb	r3, [r0, #8]
    3128:	7a4b      	ldrb	r3, [r1, #9]
    312a:	7243      	strb	r3, [r0, #9]
    312c:	68cb      	ldr	r3, [r1, #12]
    312e:	60c3      	str	r3, [r0, #12]
    3130:	690b      	ldr	r3, [r1, #16]
    3132:	6103      	str	r3, [r0, #16]
    3134:	694b      	ldr	r3, [r1, #20]
    3136:	6143      	str	r3, [r0, #20]
    3138:	7e0b      	ldrb	r3, [r1, #24]
    313a:	7603      	strb	r3, [r0, #24]
    313c:	69cb      	ldr	r3, [r1, #28]
    313e:	61c3      	str	r3, [r0, #28]
    3140:	6a0b      	ldr	r3, [r1, #32]
    3142:	6203      	str	r3, [r0, #32]
    3144:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    3146:	6243      	str	r3, [r0, #36]	; 0x24
    3148:	4770      	bx	lr
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	00005fdc 	.word	0x00005fdc

00003150 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
{
  root.close();
}

// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    3150:	b5f0      	push	{r4, r5, r6, r7, lr}
    3152:	b09d      	sub	sp, #116	; 0x74
    3154:	9303      	str	r3, [sp, #12]
    Print() : write_error(0) {}
    3156:	2300      	movs	r3, #0
    3158:	ac08      	add	r4, sp, #32
    315a:	9202      	str	r2, [sp, #8]
    315c:	ae12      	add	r6, sp, #72	; 0x48
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    315e:	4a28      	ldr	r2, [pc, #160]	; (3200 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xb0>)
    3160:	0007      	movs	r7, r0
    3162:	6063      	str	r3, [r4, #4]
    3164:	6073      	str	r3, [r6, #4]
  // get parent directory
  SdFile d1;
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!
    3166:	3110      	adds	r1, #16
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    3168:	0020      	movs	r0, r4
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    316a:	9208      	str	r2, [sp, #32]
    316c:	7263      	strb	r3, [r4, #9]
    316e:	9212      	str	r2, [sp, #72]	; 0x48
    3170:	7273      	strb	r3, [r6, #9]
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    3172:	f000 fb91 	bl	3898 <_ZN6SdFile8openRootEP8SdVolume>
    3176:	9d02      	ldr	r5, [sp, #8]
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    3178:	212f      	movs	r1, #47	; 0x2f
    317a:	0028      	movs	r0, r5
    317c:	f002 fd70 	bl	5c60 <strchr>
    3180:	2800      	cmp	r0, #0
    3182:	d034      	beq.n	31ee <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x9e>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    3184:	782b      	ldrb	r3, [r5, #0]
    3186:	2b2f      	cmp	r3, #47	; 0x2f
    3188:	d107      	bne.n	319a <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x4a>
      filepath++;
      continue;
    318a:	0033      	movs	r3, r6
    318c:	0026      	movs	r6, r4
    318e:	001c      	movs	r4, r3
      filepath++;
    3190:	3501      	adds	r5, #1
      continue;
    3192:	0023      	movs	r3, r4
    3194:	0034      	movs	r4, r6
    3196:	001e      	movs	r6, r3
    3198:	e7ee      	b.n	3178 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x28>
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
    319a:	23ff      	movs	r3, #255	; 0xff
    uint8_t idx = strchr(filepath, '/') - filepath;
    319c:	1b40      	subs	r0, r0, r5
    if (idx > 12)
    319e:	4003      	ands	r3, r0
    31a0:	2b0c      	cmp	r3, #12
    31a2:	dd00      	ble.n	31a6 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x56>
    31a4:	200c      	movs	r0, #12
    31a6:	23ff      	movs	r3, #255	; 0xff
    31a8:	4003      	ands	r3, r0
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    31aa:	001a      	movs	r2, r3
    31ac:	0029      	movs	r1, r5
    31ae:	a804      	add	r0, sp, #16
    31b0:	9301      	str	r3, [sp, #4]
    31b2:	f002 fd72 	bl	5c9a <strncpy>
    subdirname[idx] = 0;
    31b6:	2300      	movs	r3, #0
    31b8:	9901      	ldr	r1, [sp, #4]
    31ba:	aa04      	add	r2, sp, #16

    // close the subdir (we reuse them) if open
    subdir->close();
    31bc:	0030      	movs	r0, r6
    subdirname[idx] = 0;
    31be:	5453      	strb	r3, [r2, r1]
    subdir->close();
    31c0:	f000 fca4 	bl	3b0c <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    31c4:	2301      	movs	r3, #1
    31c6:	aa04      	add	r2, sp, #16
    31c8:	0021      	movs	r1, r4
    31ca:	0030      	movs	r0, r6
    31cc:	f000 fd3c 	bl	3c48 <_ZN6SdFile4openEPS_PKch>
    31d0:	2800      	cmp	r0, #0
    31d2:	d106      	bne.n	31e2 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x92>
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    31d4:	4b0a      	ldr	r3, [pc, #40]	; (3200 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xb0>)
    31d6:	6078      	str	r0, [r7, #4]
    31d8:	603b      	str	r3, [r7, #0]
    31da:	7278      	strb	r0, [r7, #9]
  }

  *index = (int)(filepath - origpath);
  // parent is now the parent diretory of the file!
  return *parent;
}
    31dc:	0038      	movs	r0, r7
    31de:	b01d      	add	sp, #116	; 0x74
    31e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    filepath += idx;
    31e2:	9b01      	ldr	r3, [sp, #4]
    parent->close();
    31e4:	0020      	movs	r0, r4
    filepath += idx;
    31e6:	18ed      	adds	r5, r5, r3
    parent->close();
    31e8:	f000 fc90 	bl	3b0c <_ZN6SdFile5closeEv>
    31ec:	e7d1      	b.n	3192 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x42>
  *index = (int)(filepath - origpath);
    31ee:	9b02      	ldr	r3, [sp, #8]
  return *parent;
    31f0:	0021      	movs	r1, r4
  *index = (int)(filepath - origpath);
    31f2:	1aed      	subs	r5, r5, r3
    31f4:	9b03      	ldr	r3, [sp, #12]
  return *parent;
    31f6:	0038      	movs	r0, r7
  *index = (int)(filepath - origpath);
    31f8:	601d      	str	r5, [r3, #0]
  return *parent;
    31fa:	f7ff ff8f 	bl	311c <_ZN6SdFileC1ERKS_>
    31fe:	e7ed      	b.n	31dc <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x8c>
    3200:	00005fdc 	.word	0x00005fdc

00003204 <_ZN5SDLib7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    3204:	b5f0      	push	{r4, r5, r6, r7, lr}
    3206:	0014      	movs	r4, r2
    3208:	b0a3      	sub	sp, #140	; 0x8c
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    320a:	ae04      	add	r6, sp, #16
File SDClass::open(const char *filepath, uint8_t mode) {
    320c:	9301      	str	r3, [sp, #4]
    320e:	0007      	movs	r7, r0
  SdFile parentdir = getParentDir(filepath, &pathidx);
    3210:	ab03      	add	r3, sp, #12
    3212:	0030      	movs	r0, r6
    3214:	f7ff ff9c 	bl	3150 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    3218:	9b03      	ldr	r3, [sp, #12]
    321a:	18e4      	adds	r4, r4, r3

  if (! filepath[0]) {
    321c:	7823      	ldrb	r3, [r4, #0]
    321e:	2b00      	cmp	r3, #0
    3220:	d109      	bne.n	3236 <_ZN5SDLib7SDClass4openEPKch+0x32>
    // it was the directory itself!
    return File(parentdir, "/");
    3222:	0031      	movs	r1, r6
    3224:	a818      	add	r0, sp, #96	; 0x60
    3226:	f7ff ff79 	bl	311c <_ZN6SdFileC1ERKS_>
    322a:	4a17      	ldr	r2, [pc, #92]	; (3288 <_ZN5SDLib7SDClass4openEPKch+0x84>)
  // close the parent
  parentdir.close();

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    file.seekSet(file.fileSize());
  return File(file, filepath);
    322c:	a918      	add	r1, sp, #96	; 0x60
    322e:	0038      	movs	r0, r7
    3230:	f7ff fec8 	bl	2fc4 <_ZN5SDLib4FileC1E6SdFilePKc>
    3234:	e00b      	b.n	324e <_ZN5SDLib7SDClass4openEPKch+0x4a>
    3236:	2300      	movs	r3, #0
    3238:	ad0e      	add	r5, sp, #56	; 0x38
    323a:	606b      	str	r3, [r5, #4]
    323c:	4a13      	ldr	r2, [pc, #76]	; (328c <_ZN5SDLib7SDClass4openEPKch+0x88>)
    323e:	726b      	strb	r3, [r5, #9]
  if (!parentdir.isOpen())
    3240:	7a73      	ldrb	r3, [r6, #9]
    3242:	920e      	str	r2, [sp, #56]	; 0x38
    3244:	2b00      	cmp	r3, #0
    3246:	d105      	bne.n	3254 <_ZN5SDLib7SDClass4openEPKch+0x50>
    return File();
    3248:	0038      	movs	r0, r7
    324a:	f7ff fedd 	bl	3008 <_ZN5SDLib4FileC1Ev>
}
    324e:	0038      	movs	r0, r7
    3250:	b023      	add	sp, #140	; 0x8c
    3252:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return open(&dirFile, fileName, oflag);
    3254:	9b01      	ldr	r3, [sp, #4]
    3256:	0022      	movs	r2, r4
    3258:	0031      	movs	r1, r6
    325a:	0028      	movs	r0, r5
    325c:	f000 fcf4 	bl	3c48 <_ZN6SdFile4openEPS_PKch>
  if ( ! file.open(parentdir, filepath, mode)) {
    3260:	2800      	cmp	r0, #0
    3262:	d0f1      	beq.n	3248 <_ZN5SDLib7SDClass4openEPKch+0x44>
  parentdir.close();
    3264:	0030      	movs	r0, r6
    3266:	f000 fc51 	bl	3b0c <_ZN6SdFile5closeEv>
  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    326a:	2306      	movs	r3, #6
    326c:	9a01      	ldr	r2, [sp, #4]
    326e:	401a      	ands	r2, r3
    3270:	2a06      	cmp	r2, #6
    3272:	d103      	bne.n	327c <_ZN5SDLib7SDClass4openEPKch+0x78>
    file.seekSet(file.fileSize());
    3274:	9915      	ldr	r1, [sp, #84]	; 0x54
    3276:	0028      	movs	r0, r5
    3278:	f000 fbdc 	bl	3a34 <_ZN6SdFile7seekSetEm>
  return File(file, filepath);
    327c:	0029      	movs	r1, r5
    327e:	a818      	add	r0, sp, #96	; 0x60
    3280:	f7ff ff4c 	bl	311c <_ZN6SdFileC1ERKS_>
    3284:	0022      	movs	r2, r4
    3286:	e7d1      	b.n	322c <_ZN5SDLib7SDClass4openEPKch+0x28>
    3288:	00005fc0 	.word	0x00005fc0
    328c:	00005fdc 	.word	0x00005fdc

00003290 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    3290:	2102      	movs	r1, #2
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    3292:	4b08      	ldr	r3, [pc, #32]	; (32b4 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x24>)
    3294:	2200      	movs	r2, #0
    3296:	6119      	str	r1, [r3, #16]
    3298:	0019      	movs	r1, r3
    329a:	3130      	adds	r1, #48	; 0x30
    329c:	700a      	strb	r2, [r1, #0]
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    329e:	4906      	ldr	r1, [pc, #24]	; (32b8 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x28>)
    32a0:	715a      	strb	r2, [r3, #5]
    32a2:	719a      	strb	r2, [r3, #6]
    32a4:	729a      	strb	r2, [r3, #10]
    32a6:	731a      	strb	r2, [r3, #12]
    32a8:	63da      	str	r2, [r3, #60]	; 0x3c
    32aa:	6399      	str	r1, [r3, #56]	; 0x38
    32ac:	3341      	adds	r3, #65	; 0x41
    32ae:	701a      	strb	r2, [r3, #0]
    _file->rewind();
}

SDClass SD;

};
    32b0:	4770      	bx	lr
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	20000784 	.word	0x20000784
    32b8:	00005fdc 	.word	0x00005fdc

000032bc <_ZL7spiSendh>:
#include <SPI.h>
static SPISettings settings;
#endif
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
    32bc:	b510      	push	{r4, lr}
    32be:	0001      	movs	r1, r0
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SDCARD_SPI.transfer(b);
    32c0:	4801      	ldr	r0, [pc, #4]	; (32c8 <_ZL7spiSendh+0xc>)
    32c2:	f001 f8d1 	bl	4468 <_ZN8SPIClass8transferEh>
#endif
}
    32c6:	bd10      	pop	{r4, pc}
    32c8:	20000a04 	.word	0x20000a04

000032cc <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
    32cc:	b510      	push	{r4, lr}
#ifndef USE_SPI_LIB
  spiSend(0XFF);
  return SPDR;
#else
  return SDCARD_SPI.transfer(0xFF);
    32ce:	21ff      	movs	r1, #255	; 0xff
    32d0:	4801      	ldr	r0, [pc, #4]	; (32d8 <_ZL6spiRecv+0xc>)
    32d2:	f001 f8c9 	bl	4468 <_ZN8SPIClass8transferEh>
#endif
}
    32d6:	bd10      	pop	{r4, pc}
    32d8:	20000a04 	.word	0x20000a04

000032dc <_ZN7Sd2Card14chipSelectHighEv>:
  }
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
    32dc:	b510      	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    32de:	2101      	movs	r1, #1
    32e0:	7900      	ldrb	r0, [r0, #4]
    32e2:	f7fe ffcf 	bl	2284 <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    32e6:	4b05      	ldr	r3, [pc, #20]	; (32fc <_ZN7Sd2Card14chipSelectHighEv+0x20>)
    32e8:	781a      	ldrb	r2, [r3, #0]
    32ea:	2a00      	cmp	r2, #0
    32ec:	d004      	beq.n	32f8 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    chip_select_asserted = 0;
    32ee:	2200      	movs	r2, #0
    SDCARD_SPI.endTransaction();
    32f0:	4803      	ldr	r0, [pc, #12]	; (3300 <_ZN7Sd2Card14chipSelectHighEv+0x24>)
    chip_select_asserted = 0;
    32f2:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.endTransaction();
    32f4:	f001 f8a4 	bl	4440 <_ZN8SPIClass14endTransactionEv>
  }
#endif
}
    32f8:	bd10      	pop	{r4, pc}
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	200007e8 	.word	0x200007e8
    3300:	20000a04 	.word	0x20000a04

00003304 <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    3304:	b510      	push	{r4, lr}
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    3306:	4b08      	ldr	r3, [pc, #32]	; (3328 <_ZN7Sd2Card13chipSelectLowEv+0x24>)
void Sd2Card::chipSelectLow(void) {
    3308:	0004      	movs	r4, r0
  if (!chip_select_asserted) {
    330a:	781a      	ldrb	r2, [r3, #0]
    330c:	2a00      	cmp	r2, #0
    330e:	d106      	bne.n	331e <_ZN7Sd2Card13chipSelectLowEv+0x1a>
    chip_select_asserted = 1;
    3310:	3201      	adds	r2, #1
    3312:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.beginTransaction(settings);
    3314:	4b05      	ldr	r3, [pc, #20]	; (332c <_ZN7Sd2Card13chipSelectLowEv+0x28>)
    3316:	4806      	ldr	r0, [pc, #24]	; (3330 <_ZN7Sd2Card13chipSelectLowEv+0x2c>)
    3318:	cb06      	ldmia	r3!, {r1, r2}
    331a:	f001 f875 	bl	4408 <_ZN8SPIClass16beginTransactionE11SPISettings>
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    331e:	7920      	ldrb	r0, [r4, #4]
    3320:	2100      	movs	r1, #0
    3322:	f7fe ffaf 	bl	2284 <digitalWrite>
}
    3326:	bd10      	pop	{r4, pc}
    3328:	200007e8 	.word	0x200007e8
    332c:	200007ec 	.word	0x200007ec
    3330:	20000a04 	.word	0x20000a04

00003334 <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    3334:	b510      	push	{r4, lr}
  if (inBlock_) {
    3336:	7983      	ldrb	r3, [r0, #6]
void Sd2Card::readEnd(void) {
    3338:	0004      	movs	r4, r0
  if (inBlock_) {
    333a:	2b00      	cmp	r3, #0
    333c:	d00d      	beq.n	335a <_ZN7Sd2Card7readEndEv+0x26>
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    333e:	8923      	ldrh	r3, [r4, #8]
    3340:	1c5a      	adds	r2, r3, #1
    3342:	8122      	strh	r2, [r4, #8]
    3344:	4a05      	ldr	r2, [pc, #20]	; (335c <_ZN7Sd2Card7readEndEv+0x28>)
    3346:	4293      	cmp	r3, r2
    3348:	dc02      	bgt.n	3350 <_ZN7Sd2Card7readEndEv+0x1c>
    334a:	f7ff ffbf 	bl	32cc <_ZL6spiRecv>
    334e:	e7f6      	b.n	333e <_ZN7Sd2Card7readEndEv+0xa>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    3350:	0020      	movs	r0, r4
    3352:	f7ff ffc3 	bl	32dc <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    3356:	2300      	movs	r3, #0
    3358:	71a3      	strb	r3, [r4, #6]
  }
}
    335a:	bd10      	pop	{r4, pc}
    335c:	00000201 	.word	0x00000201

00003360 <_ZN7Sd2Card10setSckRateEh>:
 * for \a scsRateID = 6.
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
    3360:	b500      	push	{lr}
  if (sckRateID > 6) {
    3362:	2906      	cmp	r1, #6
    3364:	dd04      	ble.n	3370 <_ZN7Sd2Card10setSckRateEh+0x10>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    3366:	2316      	movs	r3, #22
    error(SD_CARD_ERROR_SCK_RATE);
    return false;
    3368:	2100      	movs	r1, #0
    336a:	7143      	strb	r3, [r0, #5]
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
  }
#endif // USE_SPI_LIB
  return true;
}
    336c:	0008      	movs	r0, r1
    336e:	bd00      	pop	{pc}
    3370:	4b10      	ldr	r3, [pc, #64]	; (33b4 <_ZN7Sd2Card10setSckRateEh+0x54>)
  switch (sckRateID) {
    3372:	2905      	cmp	r1, #5
    3374:	d819      	bhi.n	33aa <_ZN7Sd2Card10setSckRateEh+0x4a>
    3376:	0008      	movs	r0, r1
    3378:	2200      	movs	r2, #0
    337a:	f002 f9d5 	bl	5728 <__gnu_thumb1_case_uqi>
    337e:	0903      	.short	0x0903
    3380:	1412100e 	.word	0x1412100e
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    3384:	490c      	ldr	r1, [pc, #48]	; (33b8 <_ZN7Sd2Card10setSckRateEh+0x58>)
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    3386:	6019      	str	r1, [r3, #0]
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    3388:	711a      	strb	r2, [r3, #4]
    338a:	715a      	strb	r2, [r3, #5]
    338c:	2101      	movs	r1, #1
    338e:	e7ed      	b.n	336c <_ZN7Sd2Card10setSckRateEh+0xc>
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    3390:	480a      	ldr	r0, [pc, #40]	; (33bc <_ZN7Sd2Card10setSckRateEh+0x5c>)
    3392:	711a      	strb	r2, [r3, #4]
    3394:	6018      	str	r0, [r3, #0]
    3396:	715a      	strb	r2, [r3, #5]
    3398:	e7e8      	b.n	336c <_ZN7Sd2Card10setSckRateEh+0xc>
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    339a:	4909      	ldr	r1, [pc, #36]	; (33c0 <_ZN7Sd2Card10setSckRateEh+0x60>)
    339c:	e7f3      	b.n	3386 <_ZN7Sd2Card10setSckRateEh+0x26>
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    339e:	4909      	ldr	r1, [pc, #36]	; (33c4 <_ZN7Sd2Card10setSckRateEh+0x64>)
    33a0:	e7f1      	b.n	3386 <_ZN7Sd2Card10setSckRateEh+0x26>
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    33a2:	4909      	ldr	r1, [pc, #36]	; (33c8 <_ZN7Sd2Card10setSckRateEh+0x68>)
    33a4:	e7ef      	b.n	3386 <_ZN7Sd2Card10setSckRateEh+0x26>
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    33a6:	4909      	ldr	r1, [pc, #36]	; (33cc <_ZN7Sd2Card10setSckRateEh+0x6c>)
    33a8:	e7ed      	b.n	3386 <_ZN7Sd2Card10setSckRateEh+0x26>
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    33aa:	4a09      	ldr	r2, [pc, #36]	; (33d0 <_ZN7Sd2Card10setSckRateEh+0x70>)
    33ac:	601a      	str	r2, [r3, #0]
    33ae:	2200      	movs	r2, #0
    33b0:	e7ea      	b.n	3388 <_ZN7Sd2Card10setSckRateEh+0x28>
    33b2:	46c0      	nop			; (mov r8, r8)
    33b4:	200007ec 	.word	0x200007ec
    33b8:	00b71b00 	.word	0x00b71b00
    33bc:	003d0900 	.word	0x003d0900
    33c0:	001e8480 	.word	0x001e8480
    33c4:	000f4240 	.word	0x000f4240
    33c8:	0007a120 	.word	0x0007a120
    33cc:	0003d090 	.word	0x0003d090
    33d0:	0001e848 	.word	0x0001e848

000033d4 <_ZN7Sd2Card11waitNotBusyEj>:
  return true;
}
#endif
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    33d4:	b570      	push	{r4, r5, r6, lr}
    33d6:	000c      	movs	r4, r1
  unsigned int t0 = millis();
    33d8:	f7fd faae 	bl	938 <millis>
    33dc:	0005      	movs	r5, r0
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    33de:	f7ff ff75 	bl	32cc <_ZL6spiRecv>
    33e2:	28ff      	cmp	r0, #255	; 0xff
    33e4:	d006      	beq.n	33f4 <_ZN7Sd2Card11waitNotBusyEj+0x20>
    d = millis() - t0;
    33e6:	f7fd faa7 	bl	938 <millis>
    33ea:	1b40      	subs	r0, r0, r5
  }
  while (d < timeoutMillis);
    33ec:	42a0      	cmp	r0, r4
    33ee:	d3f6      	bcc.n	33de <_ZN7Sd2Card11waitNotBusyEj+0xa>
  return false;
    33f0:	2000      	movs	r0, #0
}
    33f2:	bd70      	pop	{r4, r5, r6, pc}
    if (spiRec() == 0XFF) return true;
    33f4:	2001      	movs	r0, #1
    33f6:	e7fc      	b.n	33f2 <_ZN7Sd2Card11waitNotBusyEj+0x1e>

000033f8 <_ZN7Sd2Card11cardCommandEhm>:
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    33f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33fa:	0005      	movs	r5, r0
    33fc:	000e      	movs	r6, r1
    33fe:	0017      	movs	r7, r2
  readEnd();
    3400:	f7ff ff98 	bl	3334 <_ZN7Sd2Card7readEndEv>
  chipSelectLow();
    3404:	0028      	movs	r0, r5
    3406:	f7ff ff7d 	bl	3304 <_ZN7Sd2Card13chipSelectLowEv>
  waitNotBusy(300);
    340a:	2196      	movs	r1, #150	; 0x96
    340c:	0028      	movs	r0, r5
    340e:	0049      	lsls	r1, r1, #1
    3410:	f7ff ffe0 	bl	33d4 <_ZN7Sd2Card11waitNotBusyEj>
  spiSend(cmd | 0x40);
    3414:	2040      	movs	r0, #64	; 0x40
    3416:	4330      	orrs	r0, r6
    3418:	f7ff ff50 	bl	32bc <_ZL7spiSendh>
    341c:	2418      	movs	r4, #24
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    341e:	0038      	movs	r0, r7
    3420:	40e0      	lsrs	r0, r4
    3422:	3c08      	subs	r4, #8
    3424:	b2c0      	uxtb	r0, r0
    3426:	f7ff ff49 	bl	32bc <_ZL7spiSendh>
    342a:	0023      	movs	r3, r4
    342c:	3308      	adds	r3, #8
    342e:	d1f6      	bne.n	341e <_ZN7Sd2Card11cardCommandEhm+0x26>
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    3430:	2095      	movs	r0, #149	; 0x95
    3432:	2e00      	cmp	r6, #0
    3434:	d003      	beq.n	343e <_ZN7Sd2Card11cardCommandEhm+0x46>
  uint8_t crc = 0XFF;
    3436:	306a      	adds	r0, #106	; 0x6a
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    3438:	2e08      	cmp	r6, #8
    343a:	d100      	bne.n	343e <_ZN7Sd2Card11cardCommandEhm+0x46>
    343c:	3878      	subs	r0, #120	; 0x78
  spiSend(crc);
    343e:	f7ff ff3d 	bl	32bc <_ZL7spiSendh>
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    3442:	2400      	movs	r4, #0
    3444:	f7ff ff42 	bl	32cc <_ZL6spiRecv>
    3448:	b243      	sxtb	r3, r0
    344a:	72e8      	strb	r0, [r5, #11]
    344c:	2b00      	cmp	r3, #0
    344e:	da04      	bge.n	345a <_ZN7Sd2Card11cardCommandEhm+0x62>
    3450:	2cff      	cmp	r4, #255	; 0xff
    3452:	d002      	beq.n	345a <_ZN7Sd2Card11cardCommandEhm+0x62>
    3454:	3401      	adds	r4, #1
    3456:	b2e4      	uxtb	r4, r4
    3458:	e7f4      	b.n	3444 <_ZN7Sd2Card11cardCommandEhm+0x4c>
}
    345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000345c <_ZN7Sd2Card4initEhh>:
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    345c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    345e:	2500      	movs	r5, #0
  chipSelectPin_ = chipSelectPin;
    3460:	7102      	strb	r2, [r0, #4]
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    3462:	7305      	strb	r5, [r0, #12]
    3464:	7285      	strb	r5, [r0, #10]
    3466:	7185      	strb	r5, [r0, #6]
    3468:	7145      	strb	r5, [r0, #5]
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    346a:	0004      	movs	r4, r0
    346c:	9101      	str	r1, [sp, #4]
  unsigned int t0 = millis();
    346e:	f7fd fa63 	bl	938 <millis>
  pinMode(chipSelectPin_, OUTPUT);
    3472:	2101      	movs	r1, #1
  unsigned int t0 = millis();
    3474:	0007      	movs	r7, r0
  pinMode(chipSelectPin_, OUTPUT);
    3476:	7920      	ldrb	r0, [r4, #4]
    3478:	f7fe feb8 	bl	21ec <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    347c:	2101      	movs	r1, #1
    347e:	7920      	ldrb	r0, [r4, #4]
    3480:	f7fe ff00 	bl	2284 <digitalWrite>
  SDCARD_SPI.begin();
    3484:	4e42      	ldr	r6, [pc, #264]	; (3590 <_ZN7Sd2Card4initEhh+0x134>)
    3486:	0030      	movs	r0, r6
    3488:	f000 ff96 	bl	43b8 <_ZN8SPIClass5beginEv>
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    348c:	4b41      	ldr	r3, [pc, #260]	; (3594 <_ZN7Sd2Card4initEhh+0x138>)
    348e:	4942      	ldr	r1, [pc, #264]	; (3598 <_ZN7Sd2Card4initEhh+0x13c>)
    3490:	711d      	strb	r5, [r3, #4]
    3492:	715d      	strb	r5, [r3, #5]
    3494:	6019      	str	r1, [r3, #0]
  SDCARD_SPI.beginTransaction(settings);
    3496:	685a      	ldr	r2, [r3, #4]
    3498:	0030      	movs	r0, r6
    349a:	f000 ffb5 	bl	4408 <_ZN8SPIClass16beginTransactionE11SPISettings>
    349e:	350b      	adds	r5, #11
    34a0:	3d01      	subs	r5, #1
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    34a2:	2d00      	cmp	r5, #0
    34a4:	d003      	beq.n	34ae <_ZN7Sd2Card4initEhh+0x52>
    34a6:	20ff      	movs	r0, #255	; 0xff
    34a8:	f7ff ff08 	bl	32bc <_ZL7spiSendh>
    34ac:	e7f8      	b.n	34a0 <_ZN7Sd2Card4initEhh+0x44>
  SDCARD_SPI.endTransaction();
    34ae:	0030      	movs	r0, r6
    34b0:	f000 ffc6 	bl	4440 <_ZN8SPIClass14endTransactionEv>
    if (d > SD_INIT_TIMEOUT) {
    34b4:	26fa      	movs	r6, #250	; 0xfa
  chipSelectLow();
    34b6:	0020      	movs	r0, r4
    34b8:	f7ff ff24 	bl	3304 <_ZN7Sd2Card13chipSelectLowEv>
    if (d > SD_INIT_TIMEOUT) {
    34bc:	00f6      	lsls	r6, r6, #3
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    34be:	2200      	movs	r2, #0
    34c0:	0020      	movs	r0, r4
    34c2:	0011      	movs	r1, r2
    34c4:	f7ff ff98 	bl	33f8 <_ZN7Sd2Card11cardCommandEhm>
    34c8:	0005      	movs	r5, r0
    34ca:	72e0      	strb	r0, [r4, #11]
    34cc:	2801      	cmp	r0, #1
    34ce:	d00b      	beq.n	34e8 <_ZN7Sd2Card4initEhh+0x8c>
    unsigned int d = millis() - t0;
    34d0:	f7fd fa32 	bl	938 <millis>
    34d4:	1bc0      	subs	r0, r0, r7
    if (d > SD_INIT_TIMEOUT) {
    34d6:	42b0      	cmp	r0, r6
    34d8:	d9f1      	bls.n	34be <_ZN7Sd2Card4initEhh+0x62>
    34da:	2301      	movs	r3, #1
  chipSelectHigh();
    34dc:	0020      	movs	r0, r4
    34de:	7163      	strb	r3, [r4, #5]
    34e0:	f7ff fefc 	bl	32dc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    34e4:	2000      	movs	r0, #0
}
    34e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    34e8:	22d5      	movs	r2, #213	; 0xd5
    34ea:	2108      	movs	r1, #8
    34ec:	0052      	lsls	r2, r2, #1
    34ee:	0020      	movs	r0, r4
    34f0:	f7ff ff82 	bl	33f8 <_ZN7Sd2Card11cardCommandEhm>
    34f4:	0743      	lsls	r3, r0, #29
    34f6:	d407      	bmi.n	3508 <_ZN7Sd2Card4initEhh+0xac>
    34f8:	2505      	movs	r5, #5
    34fa:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    34fc:	2d00      	cmp	r5, #0
    34fe:	d01f      	beq.n	3540 <_ZN7Sd2Card4initEhh+0xe4>
    3500:	f7ff fee4 	bl	32cc <_ZL6spiRecv>
    3504:	72e0      	strb	r0, [r4, #11]
    3506:	e7f8      	b.n	34fa <_ZN7Sd2Card4initEhh+0x9e>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    3508:	7325      	strb	r5, [r4, #12]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    350a:	7b25      	ldrb	r5, [r4, #12]
    if (d > SD_INIT_TIMEOUT) {
    350c:	26fa      	movs	r6, #250	; 0xfa
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    350e:	3d02      	subs	r5, #2
    3510:	426b      	negs	r3, r5
    3512:	415d      	adcs	r5, r3
    if (d > SD_INIT_TIMEOUT) {
    3514:	00f6      	lsls	r6, r6, #3
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    3516:	07ad      	lsls	r5, r5, #30
    cardCommand(CMD55, 0);
    3518:	2200      	movs	r2, #0
    351a:	2137      	movs	r1, #55	; 0x37
    351c:	0020      	movs	r0, r4
    351e:	f7ff ff6b 	bl	33f8 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    3522:	002a      	movs	r2, r5
    3524:	2129      	movs	r1, #41	; 0x29
    3526:	0020      	movs	r0, r4
    3528:	f7ff ff66 	bl	33f8 <_ZN7Sd2Card11cardCommandEhm>
    352c:	1e02      	subs	r2, r0, #0
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    352e:	72e0      	strb	r0, [r4, #11]
    3530:	d00c      	beq.n	354c <_ZN7Sd2Card4initEhh+0xf0>
    unsigned int d = millis() - t0;
    3532:	f7fd fa01 	bl	938 <millis>
    3536:	1bc0      	subs	r0, r0, r7
    if (d > SD_INIT_TIMEOUT) {
    3538:	42b0      	cmp	r0, r6
    353a:	d9ed      	bls.n	3518 <_ZN7Sd2Card4initEhh+0xbc>
  void error(uint8_t code) {errorCode_ = code;}
    353c:	2308      	movs	r3, #8
    353e:	e7cd      	b.n	34dc <_ZN7Sd2Card4initEhh+0x80>
    if (status_ != 0XAA) {
    3540:	7ae2      	ldrb	r2, [r4, #11]
    3542:	2302      	movs	r3, #2
    3544:	2aaa      	cmp	r2, #170	; 0xaa
    3546:	d1c9      	bne.n	34dc <_ZN7Sd2Card4initEhh+0x80>
  void type(uint8_t value) {type_ = value;}
    3548:	7323      	strb	r3, [r4, #12]
    354a:	e7de      	b.n	350a <_ZN7Sd2Card4initEhh+0xae>
  if (type() == SD_CARD_TYPE_SD2) {
    354c:	7b23      	ldrb	r3, [r4, #12]
    354e:	2b02      	cmp	r3, #2
    3550:	d115      	bne.n	357e <_ZN7Sd2Card4initEhh+0x122>
    if (cardCommand(CMD58, 0)) {
    3552:	213a      	movs	r1, #58	; 0x3a
    3554:	0020      	movs	r0, r4
    3556:	f7ff ff4f 	bl	33f8 <_ZN7Sd2Card11cardCommandEhm>
    355a:	2800      	cmp	r0, #0
    355c:	d001      	beq.n	3562 <_ZN7Sd2Card4initEhh+0x106>
  void error(uint8_t code) {errorCode_ = code;}
    355e:	2306      	movs	r3, #6
    3560:	e7bc      	b.n	34dc <_ZN7Sd2Card4initEhh+0x80>
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    3562:	f7ff feb3 	bl	32cc <_ZL6spiRecv>
    3566:	23c0      	movs	r3, #192	; 0xc0
    3568:	4018      	ands	r0, r3
    356a:	4298      	cmp	r0, r3
    356c:	d101      	bne.n	3572 <_ZN7Sd2Card4initEhh+0x116>
  void type(uint8_t value) {type_ = value;}
    356e:	3bbd      	subs	r3, #189	; 0xbd
    3570:	7323      	strb	r3, [r4, #12]
    for (uint8_t i = 0; i < 3; i++) spiRec();
    3572:	f7ff feab 	bl	32cc <_ZL6spiRecv>
    3576:	f7ff fea9 	bl	32cc <_ZL6spiRecv>
    357a:	f7ff fea7 	bl	32cc <_ZL6spiRecv>
  chipSelectHigh();
    357e:	0020      	movs	r0, r4
    3580:	f7ff feac 	bl	32dc <_ZN7Sd2Card14chipSelectHighEv>
  return setSckRate(sckRateID);
    3584:	9901      	ldr	r1, [sp, #4]
    3586:	0020      	movs	r0, r4
    3588:	f7ff feea 	bl	3360 <_ZN7Sd2Card10setSckRateEh>
    358c:	e7ab      	b.n	34e6 <_ZN7Sd2Card4initEhh+0x8a>
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	20000a04 	.word	0x20000a04
    3594:	200007ec 	.word	0x200007ec
    3598:	0003d090 	.word	0x0003d090

0000359c <_ZN7Sd2Card14waitStartBlockEv>:
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    359c:	b570      	push	{r4, r5, r6, lr}
    359e:	0004      	movs	r4, r0
  unsigned int t0 = millis();
    35a0:	f7fd f9ca 	bl	938 <millis>
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    35a4:	2596      	movs	r5, #150	; 0x96
  unsigned int t0 = millis();
    35a6:	0006      	movs	r6, r0
    if (d > SD_READ_TIMEOUT) {
    35a8:	006d      	lsls	r5, r5, #1
  while ((status_ = spiRec()) == 0XFF) {
    35aa:	f7ff fe8f 	bl	32cc <_ZL6spiRecv>
    35ae:	0003      	movs	r3, r0
    35b0:	72e0      	strb	r0, [r4, #11]
    35b2:	28ff      	cmp	r0, #255	; 0xff
    35b4:	d10b      	bne.n	35ce <_ZN7Sd2Card14waitStartBlockEv+0x32>
    unsigned int d = millis() - t0;
    35b6:	f7fd f9bf 	bl	938 <millis>
    35ba:	1b80      	subs	r0, r0, r6
    if (d > SD_READ_TIMEOUT) {
    35bc:	42a8      	cmp	r0, r5
    35be:	d9f4      	bls.n	35aa <_ZN7Sd2Card14waitStartBlockEv+0xe>
  void error(uint8_t code) {errorCode_ = code;}
    35c0:	230f      	movs	r3, #15
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    35c2:	0020      	movs	r0, r4
    35c4:	7163      	strb	r3, [r4, #5]
    35c6:	f7ff fe89 	bl	32dc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    35ca:	2000      	movs	r0, #0
}
    35cc:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    35ce:	2001      	movs	r0, #1
  if (status_ != DATA_START_BLOCK) {
    35d0:	2bfe      	cmp	r3, #254	; 0xfe
    35d2:	d0fb      	beq.n	35cc <_ZN7Sd2Card14waitStartBlockEv+0x30>
    35d4:	230d      	movs	r3, #13
    35d6:	e7f4      	b.n	35c2 <_ZN7Sd2Card14waitStartBlockEv+0x26>

000035d8 <_ZN7Sd2Card8readDataEmttPh.part.6>:
uint8_t Sd2Card::readData(uint32_t block,
    35d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35da:	0016      	movs	r6, r2
    35dc:	001d      	movs	r5, r3
  if ((count + offset) > 512) {
    35de:	189a      	adds	r2, r3, r2
    35e0:	2380      	movs	r3, #128	; 0x80
uint8_t Sd2Card::readData(uint32_t block,
    35e2:	0004      	movs	r4, r0
  if ((count + offset) > 512) {
    35e4:	009b      	lsls	r3, r3, #2
    35e6:	429a      	cmp	r2, r3
    35e8:	dc16      	bgt.n	3618 <_ZN7Sd2Card8readDataEmttPh.part.6+0x40>
  if (!inBlock_ || block != block_ || offset < offset_) {
    35ea:	7983      	ldrb	r3, [r0, #6]
    35ec:	2b00      	cmp	r3, #0
    35ee:	d005      	beq.n	35fc <_ZN7Sd2Card8readDataEmttPh.part.6+0x24>
    35f0:	6803      	ldr	r3, [r0, #0]
    35f2:	428b      	cmp	r3, r1
    35f4:	d102      	bne.n	35fc <_ZN7Sd2Card8readDataEmttPh.part.6+0x24>
    35f6:	8903      	ldrh	r3, [r0, #8]
    35f8:	429e      	cmp	r6, r3
    35fa:	da1a      	bge.n	3632 <_ZN7Sd2Card8readDataEmttPh.part.6+0x5a>
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    35fc:	7b23      	ldrb	r3, [r4, #12]
    block_ = block;
    35fe:	6021      	str	r1, [r4, #0]
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    3600:	2b03      	cmp	r3, #3
    3602:	d000      	beq.n	3606 <_ZN7Sd2Card8readDataEmttPh.part.6+0x2e>
    3604:	0249      	lsls	r1, r1, #9
    if (cardCommand(CMD17, block)) {
    3606:	000a      	movs	r2, r1
    3608:	0020      	movs	r0, r4
    360a:	2111      	movs	r1, #17
    360c:	f7ff fef4 	bl	33f8 <_ZN7Sd2Card11cardCommandEhm>
    3610:	1e07      	subs	r7, r0, #0
    3612:	d006      	beq.n	3622 <_ZN7Sd2Card8readDataEmttPh.part.6+0x4a>
    3614:	2303      	movs	r3, #3
    3616:	7163      	strb	r3, [r4, #5]
  chipSelectHigh();
    3618:	0020      	movs	r0, r4
    361a:	f7ff fe5f 	bl	32dc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    361e:	2000      	movs	r0, #0
    3620:	e02a      	b.n	3678 <_ZN7Sd2Card8readDataEmttPh.part.6+0xa0>
    if (!waitStartBlock()) {
    3622:	0020      	movs	r0, r4
    3624:	f7ff ffba 	bl	359c <_ZN7Sd2Card14waitStartBlockEv>
    3628:	2800      	cmp	r0, #0
    362a:	d0f5      	beq.n	3618 <_ZN7Sd2Card8readDataEmttPh.part.6+0x40>
    inBlock_ = 1;
    362c:	2301      	movs	r3, #1
    offset_ = 0;
    362e:	8127      	strh	r7, [r4, #8]
    inBlock_ = 1;
    3630:	71a3      	strb	r3, [r4, #6]
  for (;offset_ < offset; offset_++) {
    3632:	8923      	ldrh	r3, [r4, #8]
    3634:	429e      	cmp	r6, r3
    3636:	dc0a      	bgt.n	364e <_ZN7Sd2Card8readDataEmttPh.part.6+0x76>
    3638:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < count; i++) {
    363a:	42b5      	cmp	r5, r6
    363c:	dd0d      	ble.n	365a <_ZN7Sd2Card8readDataEmttPh.part.6+0x82>
    dst[i] = spiRec();
    363e:	9b06      	ldr	r3, [sp, #24]
    3640:	199f      	adds	r7, r3, r6
    3642:	f7ff fe43 	bl	32cc <_ZL6spiRecv>
  for (uint16_t i = 0; i < count; i++) {
    3646:	3601      	adds	r6, #1
    dst[i] = spiRec();
    3648:	7038      	strb	r0, [r7, #0]
  for (uint16_t i = 0; i < count; i++) {
    364a:	b2b6      	uxth	r6, r6
    364c:	e7f5      	b.n	363a <_ZN7Sd2Card8readDataEmttPh.part.6+0x62>
    spiRec();
    364e:	f7ff fe3d 	bl	32cc <_ZL6spiRecv>
  for (;offset_ < offset; offset_++) {
    3652:	8923      	ldrh	r3, [r4, #8]
    3654:	3301      	adds	r3, #1
    3656:	8123      	strh	r3, [r4, #8]
    3658:	e7eb      	b.n	3632 <_ZN7Sd2Card8readDataEmttPh.part.6+0x5a>
  offset_ += count;
    365a:	8923      	ldrh	r3, [r4, #8]
    365c:	18ed      	adds	r5, r5, r3
  if (!partialBlockRead_ || offset_ >= 512) {
    365e:	7aa3      	ldrb	r3, [r4, #10]
  offset_ += count;
    3660:	b2ad      	uxth	r5, r5
    3662:	8125      	strh	r5, [r4, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    3664:	2b00      	cmp	r3, #0
    3666:	d003      	beq.n	3670 <_ZN7Sd2Card8readDataEmttPh.part.6+0x98>
    3668:	4b04      	ldr	r3, [pc, #16]	; (367c <_ZN7Sd2Card8readDataEmttPh.part.6+0xa4>)
  return true;
    366a:	2001      	movs	r0, #1
  if (!partialBlockRead_ || offset_ >= 512) {
    366c:	429d      	cmp	r5, r3
    366e:	d903      	bls.n	3678 <_ZN7Sd2Card8readDataEmttPh.part.6+0xa0>
    readEnd();
    3670:	0020      	movs	r0, r4
    3672:	f7ff fe5f 	bl	3334 <_ZN7Sd2Card7readEndEv>
  return true;
    3676:	2001      	movs	r0, #1
}
    3678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    367a:	46c0      	nop			; (mov r8, r8)
    367c:	000001ff 	.word	0x000001ff

00003680 <_ZN7Sd2Card8readDataEmttPh>:
        uint16_t offset, uint16_t count, uint8_t* dst) {
    3680:	b513      	push	{r0, r1, r4, lr}
    3682:	0004      	movs	r4, r0
  if (count == 0) return true;
    3684:	2001      	movs	r0, #1
    3686:	2b00      	cmp	r3, #0
    3688:	d004      	beq.n	3694 <_ZN7Sd2Card8readDataEmttPh+0x14>
    368a:	9804      	ldr	r0, [sp, #16]
    368c:	9000      	str	r0, [sp, #0]
    368e:	0020      	movs	r0, r4
    3690:	f7ff ffa2 	bl	35d8 <_ZN7Sd2Card8readDataEmttPh.part.6>
}
    3694:	bd16      	pop	{r1, r2, r4, pc}

00003696 <_ZN7Sd2Card9readBlockEmPh>:
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    3696:	2380      	movs	r3, #128	; 0x80
    3698:	b507      	push	{r0, r1, r2, lr}
    369a:	009b      	lsls	r3, r3, #2
    369c:	9200      	str	r2, [sp, #0]
    369e:	2200      	movs	r2, #0
    36a0:	f7ff ff9a 	bl	35d8 <_ZN7Sd2Card8readDataEmttPh.part.6>
}
    36a4:	bd0e      	pop	{r1, r2, r3, pc}

000036a6 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    36a6:	b570      	push	{r4, r5, r6, lr}
    36a8:	0005      	movs	r5, r0
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
    36aa:	0008      	movs	r0, r1
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    36ac:	0014      	movs	r4, r2
  spiSend(token);
    36ae:	f7ff fe05 	bl	32bc <_ZL7spiSendh>
    36b2:	2380      	movs	r3, #128	; 0x80
    36b4:	009b      	lsls	r3, r3, #2
    36b6:	18e6      	adds	r6, r4, r3
  for (uint16_t i = 0; i < 512; i++) {
    36b8:	42b4      	cmp	r4, r6
    36ba:	d004      	beq.n	36c6 <_ZN7Sd2Card9writeDataEhPKh+0x20>
    spiSend(src[i]);
    36bc:	7820      	ldrb	r0, [r4, #0]
    36be:	f7ff fdfd 	bl	32bc <_ZL7spiSendh>
    36c2:	3401      	adds	r4, #1
  for (uint16_t i = 0; i < 512; i++) {
    36c4:	e7f8      	b.n	36b8 <_ZN7Sd2Card9writeDataEhPKh+0x12>
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
    36c6:	20ff      	movs	r0, #255	; 0xff
    36c8:	f7ff fdf8 	bl	32bc <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
    36cc:	20ff      	movs	r0, #255	; 0xff
    36ce:	f7ff fdf5 	bl	32bc <_ZL7spiSendh>

  status_ = spiRec();
    36d2:	f7ff fdfb 	bl	32cc <_ZL6spiRecv>
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    36d6:	231f      	movs	r3, #31
  status_ = spiRec();
    36d8:	72e8      	strb	r0, [r5, #11]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    36da:	4003      	ands	r3, r0
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    return false;
  }
  return true;
    36dc:	2001      	movs	r0, #1
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    36de:	2b05      	cmp	r3, #5
    36e0:	d005      	beq.n	36ee <_ZN7Sd2Card9writeDataEhPKh+0x48>
    36e2:	2311      	movs	r3, #17
    chipSelectHigh();
    36e4:	0028      	movs	r0, r5
    36e6:	716b      	strb	r3, [r5, #5]
    36e8:	f7ff fdf8 	bl	32dc <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    36ec:	2000      	movs	r0, #0
}
    36ee:	bd70      	pop	{r4, r5, r6, pc}

000036f0 <_ZN7Sd2Card10writeBlockEmPKh>:
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    36f0:	b570      	push	{r4, r5, r6, lr}
    36f2:	2312      	movs	r3, #18
    36f4:	0004      	movs	r4, r0
    36f6:	0016      	movs	r6, r2
  if (blockNumber == 0) {
    36f8:	2900      	cmp	r1, #0
    36fa:	d02b      	beq.n	3754 <_ZN7Sd2Card10writeBlockEmPKh+0x64>
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    36fc:	7b03      	ldrb	r3, [r0, #12]
    36fe:	2b03      	cmp	r3, #3
    3700:	d000      	beq.n	3704 <_ZN7Sd2Card10writeBlockEmPKh+0x14>
    3702:	0249      	lsls	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
    3704:	000a      	movs	r2, r1
    3706:	0020      	movs	r0, r4
    3708:	2118      	movs	r1, #24
    370a:	f7ff fe75 	bl	33f8 <_ZN7Sd2Card11cardCommandEhm>
    370e:	2304      	movs	r3, #4
    3710:	1e05      	subs	r5, r0, #0
    3712:	d11f      	bne.n	3754 <_ZN7Sd2Card10writeBlockEmPKh+0x64>
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    3714:	0032      	movs	r2, r6
    3716:	21fe      	movs	r1, #254	; 0xfe
    3718:	0020      	movs	r0, r4
    371a:	f7ff ffc4 	bl	36a6 <_ZN7Sd2Card9writeDataEhPKh>
    371e:	2800      	cmp	r0, #0
    3720:	d019      	beq.n	3756 <_ZN7Sd2Card10writeBlockEmPKh+0x66>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    3722:	2196      	movs	r1, #150	; 0x96
    3724:	0020      	movs	r0, r4
    3726:	0089      	lsls	r1, r1, #2
    3728:	f7ff fe54 	bl	33d4 <_ZN7Sd2Card11waitNotBusyEj>
    372c:	2315      	movs	r3, #21
    372e:	2800      	cmp	r0, #0
    3730:	d010      	beq.n	3754 <_ZN7Sd2Card10writeBlockEmPKh+0x64>
  if (cardCommand(CMD13, 0) || spiRec()) {
    3732:	002a      	movs	r2, r5
    3734:	210d      	movs	r1, #13
    3736:	0020      	movs	r0, r4
    3738:	f7ff fe5e 	bl	33f8 <_ZN7Sd2Card11cardCommandEhm>
    373c:	2800      	cmp	r0, #0
    373e:	d108      	bne.n	3752 <_ZN7Sd2Card10writeBlockEmPKh+0x62>
    3740:	f7ff fdc4 	bl	32cc <_ZL6spiRecv>
    3744:	2800      	cmp	r0, #0
    3746:	d104      	bne.n	3752 <_ZN7Sd2Card10writeBlockEmPKh+0x62>
  chipSelectHigh();
    3748:	0020      	movs	r0, r4
    374a:	f7ff fdc7 	bl	32dc <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    374e:	2001      	movs	r0, #1
    3750:	e005      	b.n	375e <_ZN7Sd2Card10writeBlockEmPKh+0x6e>
    3752:	2314      	movs	r3, #20
    3754:	7163      	strb	r3, [r4, #5]
  chipSelectHigh();
    3756:	0020      	movs	r0, r4
    3758:	f7ff fdc0 	bl	32dc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    375c:	2000      	movs	r0, #0
}
    375e:	bd70      	pop	{r4, r5, r6, pc}

00003760 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    3760:	4b03      	ldr	r3, [pc, #12]	; (3770 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    3762:	4a04      	ldr	r2, [pc, #16]	; (3774 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x14>)
    3764:	601a      	str	r2, [r3, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    3766:	2200      	movs	r2, #0
    3768:	715a      	strb	r2, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    376a:	711a      	strb	r2, [r3, #4]

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    376c:	4770      	bx	lr
    376e:	46c0      	nop			; (mov r8, r8)
    3770:	200007ec 	.word	0x200007ec
    3774:	003d0900 	.word	0x003d0900

00003778 <_ZN6SdFile10addClusterEv>:
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    3778:	0002      	movs	r2, r0
uint8_t SdFile::addCluster() {
    377a:	b510      	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    377c:	320c      	adds	r2, #12
uint8_t SdFile::addCluster() {
    377e:	0004      	movs	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    3780:	2101      	movs	r1, #1
    3782:	6a40      	ldr	r0, [r0, #36]	; 0x24
    3784:	f000 fce0 	bl	4148 <_ZN8SdVolume15allocContiguousEmPm>
    3788:	2800      	cmp	r0, #0
    378a:	d00a      	beq.n	37a2 <_ZN6SdFile10addClusterEv+0x2a>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    378c:	6a23      	ldr	r3, [r4, #32]
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
  }
  return true;
    378e:	2001      	movs	r0, #1
  if (firstCluster_ == 0) {
    3790:	2b00      	cmp	r3, #0
    3792:	d106      	bne.n	37a2 <_ZN6SdFile10addClusterEv+0x2a>
    firstCluster_ = curCluster_;
    3794:	68e3      	ldr	r3, [r4, #12]
    flags_ |= F_FILE_DIR_DIRTY;
    3796:	7a22      	ldrb	r2, [r4, #8]
    firstCluster_ = curCluster_;
    3798:	6223      	str	r3, [r4, #32]
    flags_ |= F_FILE_DIR_DIRTY;
    379a:	2380      	movs	r3, #128	; 0x80
    379c:	425b      	negs	r3, r3
    379e:	4313      	orrs	r3, r2
    37a0:	7223      	strb	r3, [r4, #8]
}
    37a2:	bd10      	pop	{r4, pc}

000037a4 <_ZN6SdFile13addDirClusterEv>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    37a4:	b570      	push	{r4, r5, r6, lr}
    37a6:	0006      	movs	r6, r0
  if (!addCluster()) return false;
    37a8:	f7ff ffe6 	bl	3778 <_ZN6SdFile10addClusterEv>
    37ac:	2800      	cmp	r0, #0
    37ae:	d101      	bne.n	37b4 <_ZN6SdFile13addDirClusterEv+0x10>
    37b0:	2000      	movs	r0, #0
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
  return true;
}
    37b2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    37b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    37b6:	68f2      	ldr	r2, [r6, #12]
    37b8:	791c      	ldrb	r4, [r3, #4]
    37ba:	1e95      	subs	r5, r2, #2
    37bc:	7c1a      	ldrb	r2, [r3, #16]
    37be:	4095      	lsls	r5, r2
    37c0:	695a      	ldr	r2, [r3, #20]
    37c2:	18ad      	adds	r5, r5, r2
    37c4:	1964      	adds	r4, r4, r5
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    37c6:	42a5      	cmp	r5, r4
    37c8:	d006      	beq.n	37d8 <_ZN6SdFile13addDirClusterEv+0x34>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    37ca:	3c01      	subs	r4, #1
    37cc:	0020      	movs	r0, r4
    37ce:	f000 fc01 	bl	3fd4 <_ZN8SdVolume14cacheZeroBlockEm>
    37d2:	2800      	cmp	r0, #0
    37d4:	d1f7      	bne.n	37c6 <_ZN6SdFile13addDirClusterEv+0x22>
    37d6:	e7eb      	b.n	37b0 <_ZN6SdFile13addDirClusterEv+0xc>
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    37d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    37da:	2001      	movs	r0, #1
    37dc:	7c1a      	ldrb	r2, [r3, #16]
    37de:	2380      	movs	r3, #128	; 0x80
    37e0:	009b      	lsls	r3, r3, #2
    37e2:	4093      	lsls	r3, r2
    37e4:	69f2      	ldr	r2, [r6, #28]
    37e6:	18d3      	adds	r3, r2, r3
    37e8:	61f3      	str	r3, [r6, #28]
    37ea:	e7e2      	b.n	37b2 <_ZN6SdFile13addDirClusterEv+0xe>

000037ec <_ZN6SdFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    37ec:	b510      	push	{r4, lr}
    37ee:	0004      	movs	r4, r0
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    37f0:	6940      	ldr	r0, [r0, #20]
    37f2:	f000 fbcb 	bl	3f8c <_ZN8SdVolume13cacheRawBlockEmh>
    37f6:	2800      	cmp	r0, #0
    37f8:	d003      	beq.n	3802 <_ZN6SdFile13cacheDirEntryEh+0x16>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    37fa:	7e20      	ldrb	r0, [r4, #24]
    37fc:	4b01      	ldr	r3, [pc, #4]	; (3804 <_ZN6SdFile13cacheDirEntryEh+0x18>)
    37fe:	0140      	lsls	r0, r0, #5
    3800:	18c0      	adds	r0, r0, r3
}
    3802:	bd10      	pop	{r4, pc}
    3804:	200007fc 	.word	0x200007fc

00003808 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    3808:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    380a:	2220      	movs	r2, #32
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    380c:	0007      	movs	r7, r0
    380e:	000e      	movs	r6, r1
    3810:	000b      	movs	r3, r1
    3812:	b087      	sub	sp, #28
    3814:	310b      	adds	r1, #11
  while (i < 11) name[i++] = ' ';
    3816:	428b      	cmp	r3, r1
    3818:	d10f      	bne.n	383a <_ZN6SdFile10make83NameEPKcPh+0x32>
    381a:	2307      	movs	r3, #7
    381c:	2500      	movs	r5, #0
    381e:	9301      	str	r3, [sp, #4]
  i = 0;
  while ((c = *str++) != '\0') {
    3820:	783c      	ldrb	r4, [r7, #0]
    3822:	2c00      	cmp	r4, #0
    3824:	d02e      	beq.n	3884 <_ZN6SdFile10make83NameEPKcPh+0x7c>
    if (c == '.') {
    3826:	2c2e      	cmp	r4, #46	; 0x2e
    3828:	d10a      	bne.n	3840 <_ZN6SdFile10make83NameEPKcPh+0x38>
      if (n == 10) return false;  // only one dot allowed
    382a:	9b01      	ldr	r3, [sp, #4]
    382c:	2b0a      	cmp	r3, #10
    382e:	d014      	beq.n	385a <_ZN6SdFile10make83NameEPKcPh+0x52>
      n = 10;  // max index for full 8.3 name
    3830:	230a      	movs	r3, #10
      i = 8;   // place for extension
    3832:	2508      	movs	r5, #8
      n = 10;  // max index for full 8.3 name
    3834:	9301      	str	r3, [sp, #4]
  while ((c = *str++) != '\0') {
    3836:	3701      	adds	r7, #1
    3838:	e7f2      	b.n	3820 <_ZN6SdFile10make83NameEPKcPh+0x18>
  while (i < 11) name[i++] = ' ';
    383a:	701a      	strb	r2, [r3, #0]
    383c:	3301      	adds	r3, #1
    383e:	e7ea      	b.n	3816 <_ZN6SdFile10make83NameEPKcPh+0xe>
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
#elif defined(__arm__)
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    3840:	2210      	movs	r2, #16
    3842:	4914      	ldr	r1, [pc, #80]	; (3894 <_ZN6SdFile10make83NameEPKcPh+0x8c>)
    3844:	a802      	add	r0, sp, #8
    3846:	f002 f936 	bl	5ab6 <memcpy>
    384a:	2300      	movs	r3, #0
      const uint8_t *p = valid;
      while ((b = *p++)) if (b == c) return false;
    384c:	aa02      	add	r2, sp, #8
    384e:	5cd2      	ldrb	r2, [r2, r3]
    3850:	2a00      	cmp	r2, #0
    3852:	d004      	beq.n	385e <_ZN6SdFile10make83NameEPKcPh+0x56>
    3854:	3301      	adds	r3, #1
    3856:	4294      	cmp	r4, r2
    3858:	d1f8      	bne.n	384c <_ZN6SdFile10make83NameEPKcPh+0x44>
      if (n == 10) return false;  // only one dot allowed
    385a:	2000      	movs	r0, #0
    385c:	e017      	b.n	388e <_ZN6SdFile10make83NameEPKcPh+0x86>
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    385e:	9b01      	ldr	r3, [sp, #4]
    3860:	429d      	cmp	r5, r3
    3862:	dcfa      	bgt.n	385a <_ZN6SdFile10make83NameEPKcPh+0x52>
    3864:	0023      	movs	r3, r4
    3866:	3b21      	subs	r3, #33	; 0x21
    3868:	2b5d      	cmp	r3, #93	; 0x5d
    386a:	d8f6      	bhi.n	385a <_ZN6SdFile10make83NameEPKcPh+0x52>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    386c:	0022      	movs	r2, r4
    386e:	1c6b      	adds	r3, r5, #1
    3870:	3a61      	subs	r2, #97	; 0x61
    3872:	b2db      	uxtb	r3, r3
    3874:	1975      	adds	r5, r6, r5
    3876:	2a19      	cmp	r2, #25
    3878:	d801      	bhi.n	387e <_ZN6SdFile10make83NameEPKcPh+0x76>
    387a:	3c20      	subs	r4, #32
    387c:	b2e4      	uxtb	r4, r4
    387e:	702c      	strb	r4, [r5, #0]
    3880:	001d      	movs	r5, r3
    3882:	e7d8      	b.n	3836 <_ZN6SdFile10make83NameEPKcPh+0x2e>
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    3884:	7830      	ldrb	r0, [r6, #0]
    3886:	3820      	subs	r0, #32
    3888:	1e43      	subs	r3, r0, #1
    388a:	4198      	sbcs	r0, r3
    388c:	b2c0      	uxtb	r0, r0
}
    388e:	b007      	add	sp, #28
    3890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3892:	46c0      	nop			; (mov r8, r8)
    3894:	00005fc2 	.word	0x00005fc2

00003898 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    3898:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) return false;
    389a:	7a42      	ldrb	r2, [r0, #9]
uint8_t SdFile::openRoot(SdVolume* vol) {
    389c:	0004      	movs	r4, r0
    389e:	000d      	movs	r5, r1
  if (isOpen()) return false;
    38a0:	2a00      	cmp	r2, #0
    38a2:	d001      	beq.n	38a8 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    38a4:	2000      	movs	r0, #0

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
  return true;
}
    38a6:	bd70      	pop	{r4, r5, r6, pc}
    38a8:	1c4b      	adds	r3, r1, #1
    38aa:	7fdb      	ldrb	r3, [r3, #31]
  if (vol->fatType() == 16) {
    38ac:	2b10      	cmp	r3, #16
    38ae:	d10e      	bne.n	38ce <_ZN6SdFile8openRootEP8SdVolume+0x36>
    type_ = FAT_FILE_TYPE_ROOT16;
    38b0:	3b0e      	subs	r3, #14
    38b2:	7243      	strb	r3, [r0, #9]
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
    38b4:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
    firstCluster_ = 0;
    38b6:	6202      	str	r2, [r0, #32]
    fileSize_ = 32 * vol->rootDirEntryCount();
    38b8:	015b      	lsls	r3, r3, #5
    38ba:	61c3      	str	r3, [r0, #28]
  curCluster_ = 0;
    38bc:	2300      	movs	r3, #0
  flags_ = O_READ;
    38be:	2001      	movs	r0, #1
  vol_ = vol;
    38c0:	6265      	str	r5, [r4, #36]	; 0x24
  flags_ = O_READ;
    38c2:	7220      	strb	r0, [r4, #8]
  curCluster_ = 0;
    38c4:	60e3      	str	r3, [r4, #12]
  curPosition_ = 0;
    38c6:	6123      	str	r3, [r4, #16]
  dirBlock_ = 0;
    38c8:	6163      	str	r3, [r4, #20]
  dirIndex_ = 0;
    38ca:	7623      	strb	r3, [r4, #24]
  return true;
    38cc:	e7eb      	b.n	38a6 <_ZN6SdFile8openRootEP8SdVolume+0xe>
  } else if (vol->fatType() == 32) {
    38ce:	2b20      	cmp	r3, #32
    38d0:	d1e8      	bne.n	38a4 <_ZN6SdFile8openRootEP8SdVolume+0xc>
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    38d2:	0002      	movs	r2, r0
    type_ = FAT_FILE_TYPE_ROOT32;
    38d4:	3b1d      	subs	r3, #29
    38d6:	7243      	strb	r3, [r0, #9]
    38d8:	6a49      	ldr	r1, [r1, #36]	; 0x24
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    38da:	321c      	adds	r2, #28
    firstCluster_ = vol->rootDirStart();
    38dc:	6201      	str	r1, [r0, #32]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    38de:	0028      	movs	r0, r5
    38e0:	f000 fbca 	bl	4078 <_ZNK8SdVolume9chainSizeEmPm>
    38e4:	2800      	cmp	r0, #0
    38e6:	d1e9      	bne.n	38bc <_ZN6SdFile8openRootEP8SdVolume+0x24>
    38e8:	e7dc      	b.n	38a4 <_ZN6SdFile8openRootEP8SdVolume+0xc>
	...

000038ec <_ZN6SdFile4readEPvt>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    38ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    38ee:	7a43      	ldrb	r3, [r0, #9]
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    38f0:	b085      	sub	sp, #20
    38f2:	0004      	movs	r4, r0
    38f4:	9203      	str	r2, [sp, #12]
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    38f6:	2b00      	cmp	r3, #0
    38f8:	d103      	bne.n	3902 <_ZN6SdFile4readEPvt+0x16>
    38fa:	2001      	movs	r0, #1
    38fc:	4240      	negs	r0, r0
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    38fe:	b005      	add	sp, #20
    3900:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    3902:	7a03      	ldrb	r3, [r0, #8]
    3904:	07db      	lsls	r3, r3, #31
    3906:	d5f8      	bpl.n	38fa <_ZN6SdFile4readEPvt+0xe>
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    3908:	6902      	ldr	r2, [r0, #16]
    390a:	69c3      	ldr	r3, [r0, #28]
    390c:	1a9b      	subs	r3, r3, r2
    390e:	9a03      	ldr	r2, [sp, #12]
    3910:	429a      	cmp	r2, r3
    3912:	d901      	bls.n	3918 <_ZN6SdFile4readEPvt+0x2c>
    3914:	b29b      	uxth	r3, r3
    3916:	9303      	str	r3, [sp, #12]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    3918:	000e      	movs	r6, r1
  uint16_t toRead = nbyte;
    391a:	9b03      	ldr	r3, [sp, #12]
    391c:	9302      	str	r3, [sp, #8]
  while (toRead > 0) {
    391e:	9b02      	ldr	r3, [sp, #8]
    3920:	2b00      	cmp	r3, #0
    3922:	d04c      	beq.n	39be <_ZN6SdFile4readEPvt+0xd2>
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    3924:	6923      	ldr	r3, [r4, #16]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    3926:	7a62      	ldrb	r2, [r4, #9]
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    3928:	05df      	lsls	r7, r3, #23
    392a:	0dff      	lsrs	r7, r7, #23
    392c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    392e:	0a5d      	lsrs	r5, r3, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    3930:	2a02      	cmp	r2, #2
    3932:	d125      	bne.n	3980 <_ZN6SdFile4readEPvt+0x94>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    3934:	6a40      	ldr	r0, [r0, #36]	; 0x24
    if (n > (512 - offset)) n = 512 - offset;
    3936:	2380      	movs	r3, #128	; 0x80
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3938:	1940      	adds	r0, r0, r5
    uint16_t n = toRead;
    393a:	9d02      	ldr	r5, [sp, #8]
    if (n > (512 - offset)) n = 512 - offset;
    393c:	009b      	lsls	r3, r3, #2
    393e:	1bdb      	subs	r3, r3, r7
    3940:	429d      	cmp	r5, r3
    3942:	dd00      	ble.n	3946 <_ZN6SdFile4readEPvt+0x5a>
    3944:	b29d      	uxth	r5, r3
    if ((unbufferedRead() || n == 512) &&
    3946:	2240      	movs	r2, #64	; 0x40
    return flags_ & F_FILE_UNBUFFERED_READ;
    3948:	7a23      	ldrb	r3, [r4, #8]
    394a:	4213      	tst	r3, r2
    394c:	d103      	bne.n	3956 <_ZN6SdFile4readEPvt+0x6a>
    394e:	2380      	movs	r3, #128	; 0x80
    3950:	009b      	lsls	r3, r3, #2
    3952:	429d      	cmp	r5, r3
    3954:	d103      	bne.n	395e <_ZN6SdFile4readEPvt+0x72>
      block != SdVolume::cacheBlockNumber_) {
    3956:	4b26      	ldr	r3, [pc, #152]	; (39f0 <_ZN6SdFile4readEPvt+0x104>)
    if ((unbufferedRead() || n == 512) &&
    3958:	681b      	ldr	r3, [r3, #0]
    395a:	4298      	cmp	r0, r3
    395c:	d133      	bne.n	39c6 <_ZN6SdFile4readEPvt+0xda>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    395e:	2100      	movs	r1, #0
    3960:	f000 fb14 	bl	3f8c <_ZN8SdVolume13cacheRawBlockEmh>
    3964:	2800      	cmp	r0, #0
    3966:	d0c8      	beq.n	38fa <_ZN6SdFile4readEPvt+0xe>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    3968:	4b22      	ldr	r3, [pc, #136]	; (39f4 <_ZN6SdFile4readEPvt+0x108>)
    396a:	0031      	movs	r1, r6
    396c:	18ff      	adds	r7, r7, r3
      uint8_t* end = src + n;
    396e:	003a      	movs	r2, r7
    3970:	197b      	adds	r3, r7, r5
      while (src != end) *dst++ = *src++;
    3972:	4293      	cmp	r3, r2
    3974:	d020      	beq.n	39b8 <_ZN6SdFile4readEPvt+0xcc>
    3976:	7810      	ldrb	r0, [r2, #0]
    3978:	3201      	adds	r2, #1
    397a:	7008      	strb	r0, [r1, #0]
    397c:	3101      	adds	r1, #1
    397e:	e7f8      	b.n	3972 <_ZN6SdFile4readEPvt+0x86>
          return (position >> 9) & (blocksPerCluster_ - 1);}
    3980:	7902      	ldrb	r2, [r0, #4]
    3982:	3a01      	subs	r2, #1
    3984:	4015      	ands	r5, r2
    3986:	b2ed      	uxtb	r5, r5
      if (offset == 0 && blockOfCluster == 0) {
    3988:	2f00      	cmp	r7, #0
    398a:	d105      	bne.n	3998 <_ZN6SdFile4readEPvt+0xac>
    398c:	2d00      	cmp	r5, #0
    398e:	d103      	bne.n	3998 <_ZN6SdFile4readEPvt+0xac>
        if (curPosition_ == 0) {
    3990:	2b00      	cmp	r3, #0
    3992:	d109      	bne.n	39a8 <_ZN6SdFile4readEPvt+0xbc>
          curCluster_ = firstCluster_;
    3994:	6a23      	ldr	r3, [r4, #32]
    3996:	60e3      	str	r3, [r4, #12]
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3998:	6a63      	ldr	r3, [r4, #36]	; 0x24
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    399a:	68e2      	ldr	r2, [r4, #12]
    399c:	1e90      	subs	r0, r2, #2
    399e:	7c1a      	ldrb	r2, [r3, #16]
    39a0:	695b      	ldr	r3, [r3, #20]
    39a2:	4090      	lsls	r0, r2
    39a4:	18c0      	adds	r0, r0, r3
    39a6:	e7c6      	b.n	3936 <_ZN6SdFile4readEPvt+0x4a>
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    39a8:	0022      	movs	r2, r4
    39aa:	68e1      	ldr	r1, [r4, #12]
    39ac:	320c      	adds	r2, #12
    39ae:	f000 fb33 	bl	4018 <_ZNK8SdVolume6fatGetEmPm>
    39b2:	2800      	cmp	r0, #0
    39b4:	d1f0      	bne.n	3998 <_ZN6SdFile4readEPvt+0xac>
    39b6:	e7a0      	b.n	38fa <_ZN6SdFile4readEPvt+0xe>
    39b8:	1bdf      	subs	r7, r3, r7
    39ba:	19f6      	adds	r6, r6, r7
    39bc:	e00f      	b.n	39de <_ZN6SdFile4readEPvt+0xf2>
  return nbyte;
    39be:	466b      	mov	r3, sp
    39c0:	200c      	movs	r0, #12
    39c2:	5e18      	ldrsh	r0, [r3, r0]
    39c4:	e79b      	b.n	38fe <_ZN6SdFile4readEPvt+0x12>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    39c6:	0001      	movs	r1, r0
    39c8:	480b      	ldr	r0, [pc, #44]	; (39f8 <_ZN6SdFile4readEPvt+0x10c>)
    39ca:	9600      	str	r6, [sp, #0]
    39cc:	002b      	movs	r3, r5
    39ce:	003a      	movs	r2, r7
    39d0:	6800      	ldr	r0, [r0, #0]
    39d2:	f7ff fe55 	bl	3680 <_ZN7Sd2Card8readDataEmttPh>
      if (!vol_->readData(block, offset, n, dst)) return -1;
    39d6:	2800      	cmp	r0, #0
    39d8:	d100      	bne.n	39dc <_ZN6SdFile4readEPvt+0xf0>
    39da:	e78e      	b.n	38fa <_ZN6SdFile4readEPvt+0xe>
      dst += n;
    39dc:	1976      	adds	r6, r6, r5
    curPosition_ += n;
    39de:	6923      	ldr	r3, [r4, #16]
    39e0:	195b      	adds	r3, r3, r5
    39e2:	6123      	str	r3, [r4, #16]
    toRead -= n;
    39e4:	9b02      	ldr	r3, [sp, #8]
    39e6:	1b5d      	subs	r5, r3, r5
    39e8:	b2ab      	uxth	r3, r5
    39ea:	9302      	str	r3, [sp, #8]
  while (toRead > 0) {
    39ec:	e797      	b.n	391e <_ZN6SdFile4readEPvt+0x32>
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	20000048 	.word	0x20000048
    39f4:	200007fc 	.word	0x200007fc
    39f8:	20000a00 	.word	0x20000a00

000039fc <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    39fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    39fe:	7a43      	ldrb	r3, [r0, #9]
    3a00:	0005      	movs	r5, r0
  // error if not directory
  if (!isDir()) return NULL;
    3a02:	2000      	movs	r0, #0
    3a04:	2b01      	cmp	r3, #1
    3a06:	dd0b      	ble.n	3a20 <_ZN6SdFile12readDirCacheEv+0x24>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    3a08:	692b      	ldr	r3, [r5, #16]
    return read(&b, 1) == 1 ? b : -1;
    3a0a:	2201      	movs	r2, #1
    3a0c:	05dc      	lsls	r4, r3, #23
    3a0e:	466b      	mov	r3, sp
    3a10:	0028      	movs	r0, r5
    3a12:	1dd9      	adds	r1, r3, #7
    3a14:	0f24      	lsrs	r4, r4, #28
    3a16:	f7ff ff69 	bl	38ec <_ZN6SdFile4readEPvt>
    3a1a:	2801      	cmp	r0, #1
    3a1c:	d001      	beq.n	3a22 <_ZN6SdFile12readDirCacheEv+0x26>

  // use read to locate and cache block
  if (read() < 0) return NULL;
    3a1e:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    3a20:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  curPosition_ += 31;
    3a22:	692b      	ldr	r3, [r5, #16]
  return (SdVolume::cacheBuffer_.dir + i);
    3a24:	0160      	lsls	r0, r4, #5
  curPosition_ += 31;
    3a26:	331f      	adds	r3, #31
    3a28:	612b      	str	r3, [r5, #16]
  return (SdVolume::cacheBuffer_.dir + i);
    3a2a:	4b01      	ldr	r3, [pc, #4]	; (3a30 <_ZN6SdFile12readDirCacheEv+0x34>)
    3a2c:	18c0      	adds	r0, r0, r3
    3a2e:	e7f7      	b.n	3a20 <_ZN6SdFile12readDirCacheEv+0x24>
    3a30:	200007fc 	.word	0x200007fc

00003a34 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    3a34:	b570      	push	{r4, r5, r6, lr}
    3a36:	7a43      	ldrb	r3, [r0, #9]
    3a38:	0004      	movs	r4, r0
    3a3a:	000e      	movs	r6, r1
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d101      	bne.n	3a44 <_ZN6SdFile7seekSetEm+0x10>
    3a40:	2000      	movs	r0, #0
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
  return true;
}
    3a42:	bd70      	pop	{r4, r5, r6, pc}
  if (!isOpen() || pos > fileSize_) return false;
    3a44:	69c2      	ldr	r2, [r0, #28]
    3a46:	428a      	cmp	r2, r1
    3a48:	d3fa      	bcc.n	3a40 <_ZN6SdFile7seekSetEm+0xc>
  if (type_ == FAT_FILE_TYPE_ROOT16) {
    3a4a:	2b02      	cmp	r3, #2
    3a4c:	d002      	beq.n	3a54 <_ZN6SdFile7seekSetEm+0x20>
  if (pos == 0) {
    3a4e:	2e00      	cmp	r6, #0
    3a50:	d103      	bne.n	3a5a <_ZN6SdFile7seekSetEm+0x26>
    curCluster_ = 0;
    3a52:	60e6      	str	r6, [r4, #12]
    curPosition_ = 0;
    3a54:	6126      	str	r6, [r4, #16]
    return true;
    3a56:	2001      	movs	r0, #1
    3a58:	e7f3      	b.n	3a42 <_ZN6SdFile7seekSetEm+0xe>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    3a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3a5c:	6921      	ldr	r1, [r4, #16]
    3a5e:	7c1a      	ldrb	r2, [r3, #16]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    3a60:	1e75      	subs	r5, r6, #1
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    3a62:	3209      	adds	r2, #9
    3a64:	1e4b      	subs	r3, r1, #1
    3a66:	40d3      	lsrs	r3, r2
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    3a68:	40d5      	lsrs	r5, r2
  if (nNew < nCur || curPosition_ == 0) {
    3a6a:	42ab      	cmp	r3, r5
    3a6c:	d801      	bhi.n	3a72 <_ZN6SdFile7seekSetEm+0x3e>
    3a6e:	2900      	cmp	r1, #0
    3a70:	d10d      	bne.n	3a8e <_ZN6SdFile7seekSetEm+0x5a>
    curCluster_ = firstCluster_;
    3a72:	6a23      	ldr	r3, [r4, #32]
    3a74:	60e3      	str	r3, [r4, #12]
  while (nNew--) {
    3a76:	2d00      	cmp	r5, #0
    3a78:	d0ec      	beq.n	3a54 <_ZN6SdFile7seekSetEm+0x20>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    3a7a:	0022      	movs	r2, r4
    3a7c:	68e1      	ldr	r1, [r4, #12]
    3a7e:	320c      	adds	r2, #12
    3a80:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3a82:	f000 fac9 	bl	4018 <_ZNK8SdVolume6fatGetEmPm>
    3a86:	3d01      	subs	r5, #1
    3a88:	2800      	cmp	r0, #0
    3a8a:	d1f4      	bne.n	3a76 <_ZN6SdFile7seekSetEm+0x42>
    3a8c:	e7d8      	b.n	3a40 <_ZN6SdFile7seekSetEm+0xc>
    nNew -= nCur;
    3a8e:	1aed      	subs	r5, r5, r3
    3a90:	e7f1      	b.n	3a76 <_ZN6SdFile7seekSetEm+0x42>
	...

00003a94 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    3a94:	b570      	push	{r4, r5, r6, lr}
  // only allow open files and directories
  if (!isOpen()) return false;
    3a96:	7a43      	ldrb	r3, [r0, #9]
uint8_t SdFile::sync(void) {
    3a98:	0005      	movs	r5, r0
  if (!isOpen()) return false;
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d101      	bne.n	3aa2 <_ZN6SdFile4syncEv+0xe>
    3a9e:	2000      	movs	r0, #0
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    3aa0:	bd70      	pop	{r4, r5, r6, pc}
  if (flags_ & F_FILE_DIR_DIRTY) {
    3aa2:	7a03      	ldrb	r3, [r0, #8]
    3aa4:	2b7f      	cmp	r3, #127	; 0x7f
    3aa6:	d92c      	bls.n	3b02 <_ZN6SdFile4syncEv+0x6e>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    3aa8:	2101      	movs	r1, #1
    3aaa:	f7ff fe9f 	bl	37ec <_ZN6SdFile13cacheDirEntryEh>
    3aae:	1e04      	subs	r4, r0, #0
    if (!d) return false;
    3ab0:	d0f5      	beq.n	3a9e <_ZN6SdFile4syncEv+0xa>
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    3ab2:	7a6b      	ldrb	r3, [r5, #9]
    if (!isDir()) d->fileSize = fileSize_;
    3ab4:	2b01      	cmp	r3, #1
    3ab6:	dc07      	bgt.n	3ac8 <_ZN6SdFile4syncEv+0x34>
    3ab8:	7f2b      	ldrb	r3, [r5, #28]
    3aba:	7703      	strb	r3, [r0, #28]
    3abc:	7f6b      	ldrb	r3, [r5, #29]
    3abe:	7743      	strb	r3, [r0, #29]
    3ac0:	7fab      	ldrb	r3, [r5, #30]
    3ac2:	7783      	strb	r3, [r0, #30]
    3ac4:	7feb      	ldrb	r3, [r5, #31]
    3ac6:	77c3      	strb	r3, [r0, #31]
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    3ac8:	6a2b      	ldr	r3, [r5, #32]
    3aca:	b29a      	uxth	r2, r3
    d->firstClusterHigh = firstCluster_ >> 16;
    3acc:	0c1b      	lsrs	r3, r3, #16
    3ace:	7523      	strb	r3, [r4, #20]
    3ad0:	0a1b      	lsrs	r3, r3, #8
    3ad2:	7563      	strb	r3, [r4, #21]
    if (dateTime_) {
    3ad4:	4b0c      	ldr	r3, [pc, #48]	; (3b08 <_ZN6SdFile4syncEv+0x74>)
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    3ad6:	76a2      	strb	r2, [r4, #26]
    if (dateTime_) {
    3ad8:	681b      	ldr	r3, [r3, #0]
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    3ada:	0a12      	lsrs	r2, r2, #8
    3adc:	76e2      	strb	r2, [r4, #27]
    if (dateTime_) {
    3ade:	2b00      	cmp	r3, #0
    3ae0:	d00b      	beq.n	3afa <_ZN6SdFile4syncEv+0x66>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    3ae2:	0021      	movs	r1, r4
    3ae4:	0020      	movs	r0, r4
    3ae6:	3116      	adds	r1, #22
    3ae8:	3018      	adds	r0, #24
    3aea:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    3aec:	7e63      	ldrb	r3, [r4, #25]
    3aee:	7e22      	ldrb	r2, [r4, #24]
    3af0:	021b      	lsls	r3, r3, #8
    3af2:	4313      	orrs	r3, r2
    3af4:	74a3      	strb	r3, [r4, #18]
    3af6:	0a1b      	lsrs	r3, r3, #8
    3af8:	74e3      	strb	r3, [r4, #19]
    flags_ &= ~F_FILE_DIR_DIRTY;
    3afa:	227f      	movs	r2, #127	; 0x7f
    3afc:	7a2b      	ldrb	r3, [r5, #8]
    3afe:	4013      	ands	r3, r2
    3b00:	722b      	strb	r3, [r5, #8]
  return SdVolume::cacheFlush();
    3b02:	f000 fa17 	bl	3f34 <_ZN8SdVolume10cacheFlushEv>
    3b06:	e7cb      	b.n	3aa0 <_ZN6SdFile4syncEv+0xc>
    3b08:	200007f4 	.word	0x200007f4

00003b0c <_ZN6SdFile5closeEv>:
uint8_t SdFile::close(void) {
    3b0c:	b510      	push	{r4, lr}
    3b0e:	0004      	movs	r4, r0
  if (!sync())return false;
    3b10:	f7ff ffc0 	bl	3a94 <_ZN6SdFile4syncEv>
    3b14:	2800      	cmp	r0, #0
    3b16:	d002      	beq.n	3b1e <_ZN6SdFile5closeEv+0x12>
  type_ = FAT_FILE_TYPE_CLOSED;
    3b18:	2300      	movs	r3, #0
  return true;
    3b1a:	2001      	movs	r0, #1
  type_ = FAT_FILE_TYPE_CLOSED;
    3b1c:	7263      	strb	r3, [r4, #9]
}
    3b1e:	bd10      	pop	{r4, pc}

00003b20 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    3b20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3b22:	0004      	movs	r4, r0
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    3b24:	7a40      	ldrb	r0, [r0, #9]
uint8_t SdFile::truncate(uint32_t length) {
    3b26:	000d      	movs	r5, r1
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    3b28:	2801      	cmp	r0, #1
    3b2a:	d001      	beq.n	3b30 <_ZN6SdFile8truncateEm+0x10>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    3b2c:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    3b2e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    3b30:	7a23      	ldrb	r3, [r4, #8]
    3b32:	079b      	lsls	r3, r3, #30
    3b34:	d5fa      	bpl.n	3b2c <_ZN6SdFile8truncateEm+0xc>
  if (length > fileSize_) return false;
    3b36:	69e3      	ldr	r3, [r4, #28]
    3b38:	428b      	cmp	r3, r1
    3b3a:	d3f7      	bcc.n	3b2c <_ZN6SdFile8truncateEm+0xc>
  if (fileSize_ == 0) return true;
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	d0f6      	beq.n	3b2e <_ZN6SdFile8truncateEm+0xe>
  if (!seekSet(length)) return false;
    3b40:	0029      	movs	r1, r5
    3b42:	0020      	movs	r0, r4
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    3b44:	6926      	ldr	r6, [r4, #16]
  if (!seekSet(length)) return false;
    3b46:	f7ff ff75 	bl	3a34 <_ZN6SdFile7seekSetEm>
    3b4a:	2800      	cmp	r0, #0
    3b4c:	d0ee      	beq.n	3b2c <_ZN6SdFile8truncateEm+0xc>
  if (length == 0) {
    3b4e:	2d00      	cmp	r5, #0
    3b50:	d119      	bne.n	3b86 <_ZN6SdFile8truncateEm+0x66>
    if (!vol_->freeChain(firstCluster_)) return false;
    3b52:	6a21      	ldr	r1, [r4, #32]
    3b54:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3b56:	f000 fb59 	bl	420c <_ZN8SdVolume9freeChainEm>
    3b5a:	2800      	cmp	r0, #0
    3b5c:	d0e6      	beq.n	3b2c <_ZN6SdFile8truncateEm+0xc>
    firstCluster_ = 0;
    3b5e:	6225      	str	r5, [r4, #32]
  flags_ |= F_FILE_DIR_DIRTY;
    3b60:	2380      	movs	r3, #128	; 0x80
    3b62:	7a22      	ldrb	r2, [r4, #8]
    3b64:	425b      	negs	r3, r3
    3b66:	4313      	orrs	r3, r2
  fileSize_ = length;
    3b68:	61e5      	str	r5, [r4, #28]
  flags_ |= F_FILE_DIR_DIRTY;
    3b6a:	7223      	strb	r3, [r4, #8]
  if (!sync()) return false;
    3b6c:	0020      	movs	r0, r4
    3b6e:	f7ff ff91 	bl	3a94 <_ZN6SdFile4syncEv>
    3b72:	2800      	cmp	r0, #0
    3b74:	d0da      	beq.n	3b2c <_ZN6SdFile8truncateEm+0xc>
  return seekSet(newPos);
    3b76:	0029      	movs	r1, r5
    3b78:	42b5      	cmp	r5, r6
    3b7a:	d900      	bls.n	3b7e <_ZN6SdFile8truncateEm+0x5e>
    3b7c:	0031      	movs	r1, r6
    3b7e:	0020      	movs	r0, r4
    3b80:	f7ff ff58 	bl	3a34 <_ZN6SdFile7seekSetEm>
    3b84:	e7d3      	b.n	3b2e <_ZN6SdFile8truncateEm+0xe>
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    3b86:	aa01      	add	r2, sp, #4
    3b88:	68e1      	ldr	r1, [r4, #12]
    3b8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3b8c:	f000 fa44 	bl	4018 <_ZNK8SdVolume6fatGetEmPm>
    3b90:	2800      	cmp	r0, #0
    3b92:	d0cb      	beq.n	3b2c <_ZN6SdFile8truncateEm+0xc>
    if (!vol_->isEOC(toFree)) {
    3b94:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3b96:	9901      	ldr	r1, [sp, #4]
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3b98:	1c43      	adds	r3, r0, #1
    3b9a:	7fdb      	ldrb	r3, [r3, #31]
    3b9c:	2b10      	cmp	r3, #16
    3b9e:	d00e      	beq.n	3bbe <_ZN6SdFile8truncateEm+0x9e>
    3ba0:	4b08      	ldr	r3, [pc, #32]	; (3bc4 <_ZN6SdFile8truncateEm+0xa4>)
    3ba2:	4299      	cmp	r1, r3
    3ba4:	d2dc      	bcs.n	3b60 <_ZN6SdFile8truncateEm+0x40>
      if (!vol_->freeChain(toFree)) return false;
    3ba6:	f000 fb31 	bl	420c <_ZN8SdVolume9freeChainEm>
    3baa:	2800      	cmp	r0, #0
    3bac:	d0be      	beq.n	3b2c <_ZN6SdFile8truncateEm+0xc>
    return fatPut(cluster, 0x0FFFFFFF);
    3bae:	4a06      	ldr	r2, [pc, #24]	; (3bc8 <_ZN6SdFile8truncateEm+0xa8>)
    3bb0:	68e1      	ldr	r1, [r4, #12]
    3bb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3bb4:	f000 fa84 	bl	40c0 <_ZN8SdVolume6fatPutEmm>
      if (!vol_->fatPutEOC(curCluster_)) return false;
    3bb8:	2800      	cmp	r0, #0
    3bba:	d1d1      	bne.n	3b60 <_ZN6SdFile8truncateEm+0x40>
    3bbc:	e7b6      	b.n	3b2c <_ZN6SdFile8truncateEm+0xc>
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3bbe:	4b03      	ldr	r3, [pc, #12]	; (3bcc <_ZN6SdFile8truncateEm+0xac>)
    3bc0:	e7ef      	b.n	3ba2 <_ZN6SdFile8truncateEm+0x82>
    3bc2:	46c0      	nop			; (mov r8, r8)
    3bc4:	0ffffff8 	.word	0x0ffffff8
    3bc8:	0fffffff 	.word	0x0fffffff
    3bcc:	0000fff8 	.word	0x0000fff8

00003bd0 <_ZN6SdFile15openCachedEntryEhh>:
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    3bd0:	4b1b      	ldr	r3, [pc, #108]	; (3c40 <_ZN6SdFile15openCachedEntryEhh+0x70>)
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    3bd2:	b570      	push	{r4, r5, r6, lr}
    3bd4:	0015      	movs	r5, r2
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    3bd6:	014a      	lsls	r2, r1, #5
    3bd8:	18d3      	adds	r3, r2, r3
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    3bda:	2211      	movs	r2, #17
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    3bdc:	0004      	movs	r4, r0
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    3bde:	7ad8      	ldrb	r0, [r3, #11]
    3be0:	4210      	tst	r0, r2
    3be2:	d004      	beq.n	3bee <_ZN6SdFile15openCachedEntryEhh+0x1e>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    3be4:	3231      	adds	r2, #49	; 0x31
    3be6:	4215      	tst	r5, r2
    3be8:	d001      	beq.n	3bee <_ZN6SdFile15openCachedEntryEhh+0x1e>
    3bea:	2000      	movs	r0, #0
}
    3bec:	bd70      	pop	{r4, r5, r6, pc}
    3bee:	2018      	movs	r0, #24
  dirBlock_ = SdVolume::cacheBlockNumber_;
    3bf0:	4a14      	ldr	r2, [pc, #80]	; (3c44 <_ZN6SdFile15openCachedEntryEhh+0x74>)
  dirIndex_ = dirIndex;
    3bf2:	7621      	strb	r1, [r4, #24]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    3bf4:	6812      	ldr	r2, [r2, #0]
    3bf6:	6162      	str	r2, [r4, #20]
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    3bf8:	8a99      	ldrh	r1, [r3, #20]
  firstCluster_ |= p->firstClusterLow;
    3bfa:	8b5a      	ldrh	r2, [r3, #26]
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    3bfc:	0409      	lsls	r1, r1, #16
  firstCluster_ |= p->firstClusterLow;
    3bfe:	4311      	orrs	r1, r2
    3c00:	6221      	str	r1, [r4, #32]
    3c02:	7ada      	ldrb	r2, [r3, #11]
    3c04:	4002      	ands	r2, r0
  if (DIR_IS_FILE(p)) {
    3c06:	d110      	bne.n	3c2a <_ZN6SdFile15openCachedEntryEhh+0x5a>
    fileSize_ = p->fileSize;
    3c08:	69db      	ldr	r3, [r3, #28]
    3c0a:	61e3      	str	r3, [r4, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
    3c0c:	2301      	movs	r3, #1
    type_ = FAT_FILE_TYPE_SUBDIR;
    3c0e:	7263      	strb	r3, [r4, #9]
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    3c10:	230f      	movs	r3, #15
  curCluster_ = 0;
    3c12:	2100      	movs	r1, #0
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    3c14:	402b      	ands	r3, r5
    3c16:	7223      	strb	r3, [r4, #8]
  curCluster_ = 0;
    3c18:	60e1      	str	r1, [r4, #12]
  curPosition_ = 0;
    3c1a:	6121      	str	r1, [r4, #16]
  return true;
    3c1c:	2001      	movs	r0, #1
  if (oflag & O_TRUNC) return truncate(0);
    3c1e:	066b      	lsls	r3, r5, #25
    3c20:	d5e4      	bpl.n	3bec <_ZN6SdFile15openCachedEntryEhh+0x1c>
    3c22:	0020      	movs	r0, r4
    3c24:	f7ff ff7c 	bl	3b20 <_ZN6SdFile8truncateEm>
    3c28:	e7e0      	b.n	3bec <_ZN6SdFile15openCachedEntryEhh+0x1c>
  } else if (DIR_IS_SUBDIR(p)) {
    3c2a:	2a10      	cmp	r2, #16
    3c2c:	d1dd      	bne.n	3bea <_ZN6SdFile15openCachedEntryEhh+0x1a>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    3c2e:	0022      	movs	r2, r4
    3c30:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3c32:	321c      	adds	r2, #28
    3c34:	f000 fa20 	bl	4078 <_ZNK8SdVolume9chainSizeEmPm>
    3c38:	2800      	cmp	r0, #0
    3c3a:	d0d6      	beq.n	3bea <_ZN6SdFile15openCachedEntryEhh+0x1a>
    type_ = FAT_FILE_TYPE_SUBDIR;
    3c3c:	2304      	movs	r3, #4
    3c3e:	e7e6      	b.n	3c0e <_ZN6SdFile15openCachedEntryEhh+0x3e>
    3c40:	200007fc 	.word	0x200007fc
    3c44:	20000048 	.word	0x20000048

00003c48 <_ZN6SdFile4openEPS_PKch>:
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    3c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c4a:	0005      	movs	r5, r0
  if (isOpen())return false;
    3c4c:	7a44      	ldrb	r4, [r0, #9]
    3c4e:	2000      	movs	r0, #0
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    3c50:	b087      	sub	sp, #28
    3c52:	000e      	movs	r6, r1
    3c54:	001f      	movs	r7, r3
  if (isOpen())return false;
    3c56:	4284      	cmp	r4, r0
    3c58:	d106      	bne.n	3c68 <_ZN6SdFile4openEPS_PKch+0x20>
  if (!make83Name(fileName, dname)) return false;
    3c5a:	a903      	add	r1, sp, #12
    3c5c:	0010      	movs	r0, r2
    3c5e:	f7ff fdd3 	bl	3808 <_ZN6SdFile10make83NameEPKcPh>
    3c62:	2800      	cmp	r0, #0
    3c64:	d102      	bne.n	3c6c <_ZN6SdFile4openEPS_PKch+0x24>
    3c66:	2000      	movs	r0, #0
}
    3c68:	b007      	add	sp, #28
    3c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  vol_ = dirFile->vol_;
    3c6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    3c6e:	626b      	str	r3, [r5, #36]	; 0x24
    curPosition_ = curCluster_ = 0;
    3c70:	60f4      	str	r4, [r6, #12]
    3c72:	6134      	str	r4, [r6, #16]
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    3c74:	6933      	ldr	r3, [r6, #16]
    3c76:	69f2      	ldr	r2, [r6, #28]
    3c78:	4293      	cmp	r3, r2
    3c7a:	d21c      	bcs.n	3cb6 <_ZN6SdFile4openEPS_PKch+0x6e>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    3c7c:	220f      	movs	r2, #15
    3c7e:	095b      	lsrs	r3, r3, #5
    3c80:	401a      	ands	r2, r3
    p = dirFile->readDirCache();
    3c82:	0030      	movs	r0, r6
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    3c84:	9201      	str	r2, [sp, #4]
    p = dirFile->readDirCache();
    3c86:	f7ff feb9 	bl	39fc <_ZN6SdFile12readDirCacheEv>
    3c8a:	1e01      	subs	r1, r0, #0
    if (p == NULL) return false;
    3c8c:	d0eb      	beq.n	3c66 <_ZN6SdFile4openEPS_PKch+0x1e>
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    3c8e:	7803      	ldrb	r3, [r0, #0]
    3c90:	2b00      	cmp	r3, #0
    3c92:	d005      	beq.n	3ca0 <_ZN6SdFile4openEPS_PKch+0x58>
    3c94:	2be5      	cmp	r3, #229	; 0xe5
    3c96:	d146      	bne.n	3d26 <_ZN6SdFile4openEPS_PKch+0xde>
      if (!emptyFound) {
    3c98:	2c00      	cmp	r4, #0
    3c9a:	d003      	beq.n	3ca4 <_ZN6SdFile4openEPS_PKch+0x5c>
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    3c9c:	2401      	movs	r4, #1
    3c9e:	e7e9      	b.n	3c74 <_ZN6SdFile4openEPS_PKch+0x2c>
      if (!emptyFound) {
    3ca0:	2c00      	cmp	r4, #0
    3ca2:	d108      	bne.n	3cb6 <_ZN6SdFile4openEPS_PKch+0x6e>
        dirIndex_ = index;
    3ca4:	466a      	mov	r2, sp
    3ca6:	7912      	ldrb	r2, [r2, #4]
    3ca8:	762a      	strb	r2, [r5, #24]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    3caa:	4a32      	ldr	r2, [pc, #200]	; (3d74 <_ZN6SdFile4openEPS_PKch+0x12c>)
    3cac:	6812      	ldr	r2, [r2, #0]
    3cae:	616a      	str	r2, [r5, #20]
      if (p->name[0] == DIR_NAME_FREE) break;
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d1f3      	bne.n	3c9c <_ZN6SdFile4openEPS_PKch+0x54>
    3cb4:	2401      	movs	r4, #1
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    3cb6:	2312      	movs	r3, #18
    3cb8:	403b      	ands	r3, r7
    3cba:	2b12      	cmp	r3, #18
    3cbc:	d1d3      	bne.n	3c66 <_ZN6SdFile4openEPS_PKch+0x1e>
  if (emptyFound) {
    3cbe:	2c00      	cmp	r4, #0
    3cc0:	d042      	beq.n	3d48 <_ZN6SdFile4openEPS_PKch+0x100>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    3cc2:	2101      	movs	r1, #1
    3cc4:	0028      	movs	r0, r5
    3cc6:	f7ff fd91 	bl	37ec <_ZN6SdFile13cacheDirEntryEh>
    3cca:	1e04      	subs	r4, r0, #0
    if (!p) return false;
    3ccc:	d0cb      	beq.n	3c66 <_ZN6SdFile4openEPS_PKch+0x1e>
  memset(p, 0, sizeof(dir_t));
    3cce:	2220      	movs	r2, #32
    3cd0:	2100      	movs	r1, #0
    3cd2:	0020      	movs	r0, r4
    3cd4:	f001 fef8 	bl	5ac8 <memset>
  memcpy(p->name, dname, 11);
    3cd8:	220b      	movs	r2, #11
    3cda:	a903      	add	r1, sp, #12
    3cdc:	0020      	movs	r0, r4
    3cde:	f001 feea 	bl	5ab6 <memcpy>
  if (dateTime_) {
    3ce2:	4b25      	ldr	r3, [pc, #148]	; (3d78 <_ZN6SdFile4openEPS_PKch+0x130>)
    3ce4:	681b      	ldr	r3, [r3, #0]
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	d03b      	beq.n	3d62 <_ZN6SdFile4openEPS_PKch+0x11a>
    dateTime_(&p->creationDate, &p->creationTime);
    3cea:	0021      	movs	r1, r4
    3cec:	0020      	movs	r0, r4
    3cee:	310e      	adds	r1, #14
    3cf0:	3010      	adds	r0, #16
    3cf2:	4798      	blx	r3
  p->lastAccessDate = p->creationDate;
    3cf4:	7c63      	ldrb	r3, [r4, #17]
    3cf6:	7c22      	ldrb	r2, [r4, #16]
    3cf8:	021b      	lsls	r3, r3, #8
    3cfa:	4313      	orrs	r3, r2
    3cfc:	22ff      	movs	r2, #255	; 0xff
    3cfe:	401a      	ands	r2, r3
    3d00:	0a1b      	lsrs	r3, r3, #8
    3d02:	74e3      	strb	r3, [r4, #19]
  p->lastWriteDate = p->creationDate;
    3d04:	7663      	strb	r3, [r4, #25]
  p->lastWriteTime = p->creationTime;
    3d06:	7be3      	ldrb	r3, [r4, #15]
  p->lastAccessDate = p->creationDate;
    3d08:	74a2      	strb	r2, [r4, #18]
  p->lastWriteDate = p->creationDate;
    3d0a:	7622      	strb	r2, [r4, #24]
  p->lastWriteTime = p->creationTime;
    3d0c:	7ba2      	ldrb	r2, [r4, #14]
    3d0e:	021b      	lsls	r3, r3, #8
    3d10:	4313      	orrs	r3, r2
    3d12:	75a3      	strb	r3, [r4, #22]
    3d14:	0a1b      	lsrs	r3, r3, #8
    3d16:	75e3      	strb	r3, [r4, #23]
  if (!SdVolume::cacheFlush()) return false;
    3d18:	f000 f90c 	bl	3f34 <_ZN8SdVolume10cacheFlushEv>
    3d1c:	2800      	cmp	r0, #0
    3d1e:	d0a2      	beq.n	3c66 <_ZN6SdFile4openEPS_PKch+0x1e>
  return openCachedEntry(dirIndex_, oflag);
    3d20:	7e29      	ldrb	r1, [r5, #24]
    3d22:	003a      	movs	r2, r7
    3d24:	e00c      	b.n	3d40 <_ZN6SdFile4openEPS_PKch+0xf8>
    } else if (!memcmp(dname, p->name, 11)) {
    3d26:	220b      	movs	r2, #11
    3d28:	a803      	add	r0, sp, #12
    3d2a:	f001 feb5 	bl	5a98 <memcmp>
    3d2e:	2800      	cmp	r0, #0
    3d30:	d1a0      	bne.n	3c74 <_ZN6SdFile4openEPS_PKch+0x2c>
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    3d32:	2330      	movs	r3, #48	; 0x30
    3d34:	403b      	ands	r3, r7
    3d36:	2b30      	cmp	r3, #48	; 0x30
    3d38:	d100      	bne.n	3d3c <_ZN6SdFile4openEPS_PKch+0xf4>
    3d3a:	e794      	b.n	3c66 <_ZN6SdFile4openEPS_PKch+0x1e>
      return openCachedEntry(0XF & index, oflag);
    3d3c:	003a      	movs	r2, r7
    3d3e:	9901      	ldr	r1, [sp, #4]
  return openCachedEntry(dirIndex_, oflag);
    3d40:	0028      	movs	r0, r5
    3d42:	f7ff ff45 	bl	3bd0 <_ZN6SdFile15openCachedEntryEhh>
    3d46:	e78f      	b.n	3c68 <_ZN6SdFile4openEPS_PKch+0x20>
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    3d48:	7a73      	ldrb	r3, [r6, #9]
    3d4a:	2b02      	cmp	r3, #2
    3d4c:	d100      	bne.n	3d50 <_ZN6SdFile4openEPS_PKch+0x108>
    3d4e:	e78a      	b.n	3c66 <_ZN6SdFile4openEPS_PKch+0x1e>
    if (!dirFile->addDirCluster()) return false;
    3d50:	0030      	movs	r0, r6
    3d52:	f7ff fd27 	bl	37a4 <_ZN6SdFile13addDirClusterEv>
    3d56:	2800      	cmp	r0, #0
    3d58:	d100      	bne.n	3d5c <_ZN6SdFile4openEPS_PKch+0x114>
    3d5a:	e784      	b.n	3c66 <_ZN6SdFile4openEPS_PKch+0x1e>
    dirIndex_ = 0;
    3d5c:	762c      	strb	r4, [r5, #24]
    p = SdVolume::cacheBuffer_.dir;
    3d5e:	4c07      	ldr	r4, [pc, #28]	; (3d7c <_ZN6SdFile4openEPS_PKch+0x134>)
    3d60:	e7b5      	b.n	3cce <_ZN6SdFile4openEPS_PKch+0x86>
    p->creationDate = FAT_DEFAULT_DATE;
    3d62:	2221      	movs	r2, #33	; 0x21
    p->creationTime = FAT_DEFAULT_TIME;
    3d64:	73a3      	strb	r3, [r4, #14]
    3d66:	2308      	movs	r3, #8
    p->creationDate = FAT_DEFAULT_DATE;
    3d68:	7422      	strb	r2, [r4, #16]
    3d6a:	3207      	adds	r2, #7
    3d6c:	7462      	strb	r2, [r4, #17]
    p->creationTime = FAT_DEFAULT_TIME;
    3d6e:	73e3      	strb	r3, [r4, #15]
    3d70:	e7c0      	b.n	3cf4 <_ZN6SdFile4openEPS_PKch+0xac>
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	20000048 	.word	0x20000048
    3d78:	200007f4 	.word	0x200007f4
    3d7c:	200007fc 	.word	0x200007fc

00003d80 <_ZN6SdFile5writeEPKvt>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    3d80:	b5f0      	push	{r4, r5, r6, r7, lr}

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3d82:	7a43      	ldrb	r3, [r0, #9]
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    3d84:	b087      	sub	sp, #28
    3d86:	0004      	movs	r4, r0
    3d88:	000e      	movs	r6, r1
    3d8a:	9203      	str	r2, [sp, #12]
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3d8c:	2b01      	cmp	r3, #1
    3d8e:	d12d      	bne.n	3dec <_ZN6SdFile5writeEPKvt+0x6c>
    3d90:	7a03      	ldrb	r3, [r0, #8]
    3d92:	079a      	lsls	r2, r3, #30
    3d94:	d52a      	bpl.n	3dec <_ZN6SdFile5writeEPKvt+0x6c>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3d96:	075b      	lsls	r3, r3, #29
    3d98:	d503      	bpl.n	3da2 <_ZN6SdFile5writeEPKvt+0x22>
    3d9a:	69e1      	ldr	r1, [r4, #28]
    3d9c:	6923      	ldr	r3, [r4, #16]
    3d9e:	428b      	cmp	r3, r1
    3da0:	d11f      	bne.n	3de2 <_ZN6SdFile5writeEPKvt+0x62>
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    3da2:	9b03      	ldr	r3, [sp, #12]
    3da4:	9301      	str	r3, [sp, #4]
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3da6:	9a01      	ldr	r2, [sp, #4]
    3da8:	6923      	ldr	r3, [r4, #16]
    3daa:	2a00      	cmp	r2, #0
    3dac:	d100      	bne.n	3db0 <_ZN6SdFile5writeEPKvt+0x30>
    3dae:	e08b      	b.n	3ec8 <_ZN6SdFile5writeEPKvt+0x148>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    3db0:	6a60      	ldr	r0, [r4, #36]	; 0x24
          return (position >> 9) & (blocksPerCluster_ - 1);}
    3db2:	0a5d      	lsrs	r5, r3, #9
    3db4:	7902      	ldrb	r2, [r0, #4]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3db6:	05db      	lsls	r3, r3, #23
    3db8:	3a01      	subs	r2, #1
    3dba:	4015      	ands	r5, r2
    3dbc:	0ddb      	lsrs	r3, r3, #23
    3dbe:	b2ed      	uxtb	r5, r5
    3dc0:	9302      	str	r3, [sp, #8]
    if (blockOfCluster == 0 && blockOffset == 0) {
    3dc2:	2d00      	cmp	r5, #0
    3dc4:	d117      	bne.n	3df6 <_ZN6SdFile5writeEPKvt+0x76>
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d115      	bne.n	3df6 <_ZN6SdFile5writeEPKvt+0x76>
      // start of new cluster
      if (curCluster_ == 0) {
    3dca:	68e1      	ldr	r1, [r4, #12]
    3dcc:	2900      	cmp	r1, #0
    3dce:	d141      	bne.n	3e54 <_ZN6SdFile5writeEPKvt+0xd4>
        if (firstCluster_ == 0) {
    3dd0:	6a23      	ldr	r3, [r4, #32]
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d10e      	bne.n	3df4 <_ZN6SdFile5writeEPKvt+0x74>
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    3dd6:	0020      	movs	r0, r4
    3dd8:	f7ff fcce 	bl	3778 <_ZN6SdFile10addClusterEv>
    3ddc:	2800      	cmp	r0, #0
    3dde:	d10a      	bne.n	3df6 <_ZN6SdFile5writeEPKvt+0x76>
    3de0:	e004      	b.n	3dec <_ZN6SdFile5writeEPKvt+0x6c>
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    3de2:	0020      	movs	r0, r4
    3de4:	f7ff fe26 	bl	3a34 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    3de8:	2800      	cmp	r0, #0
    3dea:	d1da      	bne.n	3da2 <_ZN6SdFile5writeEPKvt+0x22>
    void setWriteError(int err = 1) { write_error = err; }
    3dec:	2301      	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    3dee:	2000      	movs	r0, #0
    3df0:	6063      	str	r3, [r4, #4]
    3df2:	e07e      	b.n	3ef2 <_ZN6SdFile5writeEPKvt+0x172>
          curCluster_ = firstCluster_;
    3df4:	60e3      	str	r3, [r4, #12]
    uint16_t n = 512 - blockOffset;
    3df6:	2380      	movs	r3, #128	; 0x80
    3df8:	9a02      	ldr	r2, [sp, #8]
    3dfa:	009b      	lsls	r3, r3, #2
    3dfc:	1a9f      	subs	r7, r3, r2
    if (n > nToWrite) n = nToWrite;
    3dfe:	9b01      	ldr	r3, [sp, #4]
    uint16_t n = 512 - blockOffset;
    3e00:	b2bf      	uxth	r7, r7
    if (n > nToWrite) n = nToWrite;
    3e02:	42bb      	cmp	r3, r7
    3e04:	da00      	bge.n	3e08 <_ZN6SdFile5writeEPKvt+0x88>
    3e06:	001f      	movs	r7, r3
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3e08:	6a62      	ldr	r2, [r4, #36]	; 0x24
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    3e0a:	68e3      	ldr	r3, [r4, #12]
    3e0c:	7c11      	ldrb	r1, [r2, #16]
    3e0e:	3b02      	subs	r3, #2
    3e10:	408b      	lsls	r3, r1
    3e12:	6952      	ldr	r2, [r2, #20]
    3e14:	189b      	adds	r3, r3, r2
    3e16:	195d      	adds	r5, r3, r5
    if (n == 512) {
    3e18:	2380      	movs	r3, #128	; 0x80
    3e1a:	009b      	lsls	r3, r3, #2
    3e1c:	429f      	cmp	r7, r3
    3e1e:	d12b      	bne.n	3e78 <_ZN6SdFile5writeEPKvt+0xf8>
      if (SdVolume::cacheBlockNumber_ == block) {
    3e20:	4b38      	ldr	r3, [pc, #224]	; (3f04 <_ZN6SdFile5writeEPKvt+0x184>)
    3e22:	681a      	ldr	r2, [r3, #0]
    3e24:	4295      	cmp	r5, r2
    3e26:	d102      	bne.n	3e2e <_ZN6SdFile5writeEPKvt+0xae>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    3e28:	2201      	movs	r2, #1
    3e2a:	4252      	negs	r2, r2
    3e2c:	601a      	str	r2, [r3, #0]
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    3e2e:	4b36      	ldr	r3, [pc, #216]	; (3f08 <_ZN6SdFile5writeEPKvt+0x188>)
    3e30:	0032      	movs	r2, r6
    3e32:	0029      	movs	r1, r5
    3e34:	6818      	ldr	r0, [r3, #0]
    3e36:	f7ff fc5b 	bl	36f0 <_ZN7Sd2Card10writeBlockEmPKh>
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    3e3a:	2800      	cmp	r0, #0
    3e3c:	d0d6      	beq.n	3dec <_ZN6SdFile5writeEPKvt+0x6c>
      src += 512;
    3e3e:	2380      	movs	r3, #128	; 0x80
    3e40:	009b      	lsls	r3, r3, #2
    3e42:	18f6      	adds	r6, r6, r3
    nToWrite -= n;
    3e44:	9b01      	ldr	r3, [sp, #4]
    3e46:	1bdb      	subs	r3, r3, r7
    3e48:	b29b      	uxth	r3, r3
    3e4a:	9301      	str	r3, [sp, #4]
    curPosition_ += n;
    3e4c:	6923      	ldr	r3, [r4, #16]
    3e4e:	19df      	adds	r7, r3, r7
    3e50:	6127      	str	r7, [r4, #16]
  while (nToWrite > 0) {
    3e52:	e7a8      	b.n	3da6 <_ZN6SdFile5writeEPKvt+0x26>
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3e54:	aa05      	add	r2, sp, #20
    3e56:	f000 f8df 	bl	4018 <_ZNK8SdVolume6fatGetEmPm>
    3e5a:	2800      	cmp	r0, #0
    3e5c:	d049      	beq.n	3ef2 <_ZN6SdFile5writeEPKvt+0x172>
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (vol_->isEOC(next)) {
    3e60:	9a05      	ldr	r2, [sp, #20]
    3e62:	3301      	adds	r3, #1
    3e64:	7fdb      	ldrb	r3, [r3, #31]
    3e66:	2b10      	cmp	r3, #16
    3e68:	d004      	beq.n	3e74 <_ZN6SdFile5writeEPKvt+0xf4>
    3e6a:	4b28      	ldr	r3, [pc, #160]	; (3f0c <_ZN6SdFile5writeEPKvt+0x18c>)
    3e6c:	429a      	cmp	r2, r3
    3e6e:	d2b2      	bcs.n	3dd6 <_ZN6SdFile5writeEPKvt+0x56>
          curCluster_ = next;
    3e70:	60e2      	str	r2, [r4, #12]
    3e72:	e7c0      	b.n	3df6 <_ZN6SdFile5writeEPKvt+0x76>
    3e74:	4b26      	ldr	r3, [pc, #152]	; (3f10 <_ZN6SdFile5writeEPKvt+0x190>)
    3e76:	e7f9      	b.n	3e6c <_ZN6SdFile5writeEPKvt+0xec>
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3e78:	9b02      	ldr	r3, [sp, #8]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d11b      	bne.n	3eb6 <_ZN6SdFile5writeEPKvt+0x136>
    3e7e:	6923      	ldr	r3, [r4, #16]
    3e80:	69e2      	ldr	r2, [r4, #28]
    3e82:	4293      	cmp	r3, r2
    3e84:	d317      	bcc.n	3eb6 <_ZN6SdFile5writeEPKvt+0x136>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    3e86:	f000 f855 	bl	3f34 <_ZN8SdVolume10cacheFlushEv>
    3e8a:	2800      	cmp	r0, #0
    3e8c:	d0ae      	beq.n	3dec <_ZN6SdFile5writeEPKvt+0x6c>
        SdVolume::cacheBlockNumber_ = block;
    3e8e:	4b1d      	ldr	r3, [pc, #116]	; (3f04 <_ZN6SdFile5writeEPKvt+0x184>)
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3e90:	4a20      	ldr	r2, [pc, #128]	; (3f14 <_ZN6SdFile5writeEPKvt+0x194>)
    3e92:	601d      	str	r5, [r3, #0]
    3e94:	2301      	movs	r3, #1
    3e96:	7811      	ldrb	r1, [r2, #0]
    3e98:	430b      	orrs	r3, r1
    3e9a:	7013      	strb	r3, [r2, #0]
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3e9c:	9a02      	ldr	r2, [sp, #8]
    3e9e:	4b1e      	ldr	r3, [pc, #120]	; (3f18 <_ZN6SdFile5writeEPKvt+0x198>)
    3ea0:	0030      	movs	r0, r6
    3ea2:	18d3      	adds	r3, r2, r3
      uint8_t* end = dst + n;
    3ea4:	0019      	movs	r1, r3
    3ea6:	19da      	adds	r2, r3, r7
      while (dst != end) *dst++ = *src++;
    3ea8:	428a      	cmp	r2, r1
    3eaa:	d00b      	beq.n	3ec4 <_ZN6SdFile5writeEPKvt+0x144>
    3eac:	7805      	ldrb	r5, [r0, #0]
    3eae:	3001      	adds	r0, #1
    3eb0:	700d      	strb	r5, [r1, #0]
    3eb2:	3101      	adds	r1, #1
    3eb4:	e7f8      	b.n	3ea8 <_ZN6SdFile5writeEPKvt+0x128>
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3eb6:	2101      	movs	r1, #1
    3eb8:	0028      	movs	r0, r5
    3eba:	f000 f867 	bl	3f8c <_ZN8SdVolume13cacheRawBlockEmh>
    3ebe:	2800      	cmp	r0, #0
    3ec0:	d1ec      	bne.n	3e9c <_ZN6SdFile5writeEPKvt+0x11c>
    3ec2:	e793      	b.n	3dec <_ZN6SdFile5writeEPKvt+0x6c>
    3ec4:	1ad3      	subs	r3, r2, r3
    3ec6:	e7bc      	b.n	3e42 <_ZN6SdFile5writeEPKvt+0xc2>
  if (curPosition_ > fileSize_) {
    3ec8:	69e1      	ldr	r1, [r4, #28]
    3eca:	7a22      	ldrb	r2, [r4, #8]
    3ecc:	428b      	cmp	r3, r1
    3ece:	d905      	bls.n	3edc <_ZN6SdFile5writeEPKvt+0x15c>
    fileSize_ = curPosition_;
    3ed0:	61e3      	str	r3, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    3ed2:	2380      	movs	r3, #128	; 0x80
    3ed4:	425b      	negs	r3, r3
    3ed6:	4313      	orrs	r3, r2
    3ed8:	7223      	strb	r3, [r4, #8]
    3eda:	e006      	b.n	3eea <_ZN6SdFile5writeEPKvt+0x16a>
  } else if (dateTime_ && nbyte) {
    3edc:	4b0f      	ldr	r3, [pc, #60]	; (3f1c <_ZN6SdFile5writeEPKvt+0x19c>)
    3ede:	681b      	ldr	r3, [r3, #0]
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d002      	beq.n	3eea <_ZN6SdFile5writeEPKvt+0x16a>
    3ee4:	9b03      	ldr	r3, [sp, #12]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d1f3      	bne.n	3ed2 <_ZN6SdFile5writeEPKvt+0x152>
  if (flags_ & O_SYNC) {
    3eea:	7a23      	ldrb	r3, [r4, #8]
    3eec:	071b      	lsls	r3, r3, #28
    3eee:	d402      	bmi.n	3ef6 <_ZN6SdFile5writeEPKvt+0x176>
  return nbyte;
    3ef0:	9803      	ldr	r0, [sp, #12]
}
    3ef2:	b007      	add	sp, #28
    3ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!sync()) goto writeErrorReturn;
    3ef6:	0020      	movs	r0, r4
    3ef8:	f7ff fdcc 	bl	3a94 <_ZN6SdFile4syncEv>
    3efc:	2800      	cmp	r0, #0
    3efe:	d100      	bne.n	3f02 <_ZN6SdFile5writeEPKvt+0x182>
    3f00:	e774      	b.n	3dec <_ZN6SdFile5writeEPKvt+0x6c>
    3f02:	e7f5      	b.n	3ef0 <_ZN6SdFile5writeEPKvt+0x170>
    3f04:	20000048 	.word	0x20000048
    3f08:	20000a00 	.word	0x20000a00
    3f0c:	0ffffff8 	.word	0x0ffffff8
    3f10:	0000fff8 	.word	0x0000fff8
    3f14:	200007f8 	.word	0x200007f8
    3f18:	200007fc 	.word	0x200007fc
    3f1c:	200007f4 	.word	0x200007f4

00003f20 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3f20:	b507      	push	{r0, r1, r2, lr}
    3f22:	466b      	mov	r3, sp
    3f24:	71d9      	strb	r1, [r3, #7]
    3f26:	3307      	adds	r3, #7
  return write(&b, 1);
    3f28:	2201      	movs	r2, #1
    3f2a:	0019      	movs	r1, r3
    3f2c:	f7ff ff28 	bl	3d80 <_ZN6SdFile5writeEPKvt>
}
    3f30:	bd0e      	pop	{r1, r2, r3, pc}
	...

00003f34 <_ZN8SdVolume10cacheFlushEv>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    3f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cacheDirty_) {
    3f36:	4c10      	ldr	r4, [pc, #64]	; (3f78 <_ZN8SdVolume10cacheFlushEv+0x44>)
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    3f38:	2001      	movs	r0, #1
  if (cacheDirty_) {
    3f3a:	7823      	ldrb	r3, [r4, #0]
    3f3c:	2b00      	cmp	r3, #0
    3f3e:	d00a      	beq.n	3f56 <_ZN8SdVolume10cacheFlushEv+0x22>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    3f40:	4f0e      	ldr	r7, [pc, #56]	; (3f7c <_ZN8SdVolume10cacheFlushEv+0x48>)
    3f42:	4e0f      	ldr	r6, [pc, #60]	; (3f80 <_ZN8SdVolume10cacheFlushEv+0x4c>)
    3f44:	4b0f      	ldr	r3, [pc, #60]	; (3f84 <_ZN8SdVolume10cacheFlushEv+0x50>)
    3f46:	003a      	movs	r2, r7
    3f48:	6819      	ldr	r1, [r3, #0]
    3f4a:	6830      	ldr	r0, [r6, #0]
    3f4c:	f7ff fbd0 	bl	36f0 <_ZN7Sd2Card10writeBlockEmPKh>
    3f50:	2800      	cmp	r0, #0
    3f52:	d101      	bne.n	3f58 <_ZN8SdVolume10cacheFlushEv+0x24>
      return false;
    3f54:	2000      	movs	r0, #0
}
    3f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (cacheMirrorBlock_) {
    3f58:	4d0b      	ldr	r5, [pc, #44]	; (3f88 <_ZN8SdVolume10cacheFlushEv+0x54>)
    3f5a:	6829      	ldr	r1, [r5, #0]
    3f5c:	2900      	cmp	r1, #0
    3f5e:	d007      	beq.n	3f70 <_ZN8SdVolume10cacheFlushEv+0x3c>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    3f60:	003a      	movs	r2, r7
    3f62:	6830      	ldr	r0, [r6, #0]
    3f64:	f7ff fbc4 	bl	36f0 <_ZN7Sd2Card10writeBlockEmPKh>
    3f68:	2800      	cmp	r0, #0
    3f6a:	d0f3      	beq.n	3f54 <_ZN8SdVolume10cacheFlushEv+0x20>
      cacheMirrorBlock_ = 0;
    3f6c:	2300      	movs	r3, #0
    3f6e:	602b      	str	r3, [r5, #0]
    cacheDirty_ = 0;
    3f70:	2300      	movs	r3, #0
  return true;
    3f72:	2001      	movs	r0, #1
    cacheDirty_ = 0;
    3f74:	7023      	strb	r3, [r4, #0]
    3f76:	e7ee      	b.n	3f56 <_ZN8SdVolume10cacheFlushEv+0x22>
    3f78:	200007f8 	.word	0x200007f8
    3f7c:	200007fc 	.word	0x200007fc
    3f80:	20000a00 	.word	0x20000a00
    3f84:	20000048 	.word	0x20000048
    3f88:	200009fc 	.word	0x200009fc

00003f8c <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3f8c:	b570      	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    3f8e:	4e0d      	ldr	r6, [pc, #52]	; (3fc4 <_ZN8SdVolume13cacheRawBlockEmh+0x38>)
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3f90:	0005      	movs	r5, r0
  if (cacheBlockNumber_ != blockNumber) {
    3f92:	6833      	ldr	r3, [r6, #0]
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3f94:	000c      	movs	r4, r1
  if (cacheBlockNumber_ != blockNumber) {
    3f96:	4283      	cmp	r3, r0
    3f98:	d00e      	beq.n	3fb8 <_ZN8SdVolume13cacheRawBlockEmh+0x2c>
    if (!cacheFlush()) return false;
    3f9a:	f7ff ffcb 	bl	3f34 <_ZN8SdVolume10cacheFlushEv>
    3f9e:	2800      	cmp	r0, #0
    3fa0:	d101      	bne.n	3fa6 <_ZN8SdVolume13cacheRawBlockEmh+0x1a>
    3fa2:	2000      	movs	r0, #0
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
  return true;
}
    3fa4:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    3fa6:	4b08      	ldr	r3, [pc, #32]	; (3fc8 <_ZN8SdVolume13cacheRawBlockEmh+0x3c>)
    3fa8:	4a08      	ldr	r2, [pc, #32]	; (3fcc <_ZN8SdVolume13cacheRawBlockEmh+0x40>)
    3faa:	0029      	movs	r1, r5
    3fac:	6818      	ldr	r0, [r3, #0]
    3fae:	f7ff fb72 	bl	3696 <_ZN7Sd2Card9readBlockEmPh>
    3fb2:	2800      	cmp	r0, #0
    3fb4:	d0f5      	beq.n	3fa2 <_ZN8SdVolume13cacheRawBlockEmh+0x16>
    cacheBlockNumber_ = blockNumber;
    3fb6:	6035      	str	r5, [r6, #0]
  cacheDirty_ |= action;
    3fb8:	4b05      	ldr	r3, [pc, #20]	; (3fd0 <_ZN8SdVolume13cacheRawBlockEmh+0x44>)
  return true;
    3fba:	2001      	movs	r0, #1
  cacheDirty_ |= action;
    3fbc:	781a      	ldrb	r2, [r3, #0]
    3fbe:	4314      	orrs	r4, r2
    3fc0:	701c      	strb	r4, [r3, #0]
  return true;
    3fc2:	e7ef      	b.n	3fa4 <_ZN8SdVolume13cacheRawBlockEmh+0x18>
    3fc4:	20000048 	.word	0x20000048
    3fc8:	20000a00 	.word	0x20000a00
    3fcc:	200007fc 	.word	0x200007fc
    3fd0:	200007f8 	.word	0x200007f8

00003fd4 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    3fd4:	b570      	push	{r4, r5, r6, lr}
    3fd6:	0004      	movs	r4, r0
  if (!cacheFlush()) return false;
    3fd8:	f7ff ffac 	bl	3f34 <_ZN8SdVolume10cacheFlushEv>
    3fdc:	2800      	cmp	r0, #0
    3fde:	d011      	beq.n	4004 <_ZN8SdVolume14cacheZeroBlockEm+0x30>
    3fe0:	2300      	movs	r3, #0

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    3fe2:	0019      	movs	r1, r3
  for (uint16_t i = 0; i < 512; i++) {
    3fe4:	4d08      	ldr	r5, [pc, #32]	; (4008 <_ZN8SdVolume14cacheZeroBlockEm+0x34>)
    cacheBuffer_.data[i] = 0;
    3fe6:	4809      	ldr	r0, [pc, #36]	; (400c <_ZN8SdVolume14cacheZeroBlockEm+0x38>)
    3fe8:	1c5a      	adds	r2, r3, #1
  for (uint16_t i = 0; i < 512; i++) {
    3fea:	42aa      	cmp	r2, r5
    3fec:	d003      	beq.n	3ff6 <_ZN8SdVolume14cacheZeroBlockEm+0x22>
    cacheBuffer_.data[i] = 0;
    3fee:	18c3      	adds	r3, r0, r3
    3ff0:	7019      	strb	r1, [r3, #0]
  for (uint16_t i = 0; i < 512; i++) {
    3ff2:	0013      	movs	r3, r2
    3ff4:	e7f8      	b.n	3fe8 <_ZN8SdVolume14cacheZeroBlockEm+0x14>
    3ff6:	2001      	movs	r0, #1
  }
  cacheBlockNumber_ = blockNumber;
    3ff8:	4b05      	ldr	r3, [pc, #20]	; (4010 <_ZN8SdVolume14cacheZeroBlockEm+0x3c>)
    3ffa:	4a06      	ldr	r2, [pc, #24]	; (4014 <_ZN8SdVolume14cacheZeroBlockEm+0x40>)
    3ffc:	601c      	str	r4, [r3, #0]
    3ffe:	7813      	ldrb	r3, [r2, #0]
    4000:	4303      	orrs	r3, r0
    4002:	7013      	strb	r3, [r2, #0]
  cacheSetDirty();
  return true;
}
    4004:	bd70      	pop	{r4, r5, r6, pc}
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	00000201 	.word	0x00000201
    400c:	200007fc 	.word	0x200007fc
    4010:	20000048 	.word	0x20000048
    4014:	200007f8 	.word	0x200007f8

00004018 <_ZNK8SdVolume6fatGetEmPm>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    4018:	68c3      	ldr	r3, [r0, #12]
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    401a:	b570      	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
    401c:	3301      	adds	r3, #1
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    401e:	000c      	movs	r4, r1
    4020:	0015      	movs	r5, r2
  if (cluster > (clusterCount_ + 1)) return false;
    4022:	428b      	cmp	r3, r1
    4024:	d201      	bcs.n	402a <_ZNK8SdVolume6fatGetEmPm+0x12>
    4026:	2000      	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    4028:	bd70      	pop	{r4, r5, r6, pc}
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    402a:	1c46      	adds	r6, r0, #1
    402c:	7ff2      	ldrb	r2, [r6, #31]
  uint32_t lba = fatStartBlock_;
    402e:	69c3      	ldr	r3, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    4030:	09c8      	lsrs	r0, r1, #7
    4032:	2a10      	cmp	r2, #16
    4034:	d100      	bne.n	4038 <_ZNK8SdVolume6fatGetEmPm+0x20>
    4036:	0a08      	lsrs	r0, r1, #8
    4038:	18c0      	adds	r0, r0, r3
  if (lba != cacheBlockNumber_) {
    403a:	4b0d      	ldr	r3, [pc, #52]	; (4070 <_ZNK8SdVolume6fatGetEmPm+0x58>)
    403c:	681b      	ldr	r3, [r3, #0]
    403e:	4298      	cmp	r0, r3
    4040:	d109      	bne.n	4056 <_ZNK8SdVolume6fatGetEmPm+0x3e>
  if (fatType_ == 16) {
    4042:	7ff2      	ldrb	r2, [r6, #31]
    4044:	4b0b      	ldr	r3, [pc, #44]	; (4074 <_ZNK8SdVolume6fatGetEmPm+0x5c>)
    4046:	2a10      	cmp	r2, #16
    4048:	d10b      	bne.n	4062 <_ZNK8SdVolume6fatGetEmPm+0x4a>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    404a:	b2e4      	uxtb	r4, r4
    404c:	0064      	lsls	r4, r4, #1
    404e:	5b1b      	ldrh	r3, [r3, r4]
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    4050:	602b      	str	r3, [r5, #0]
    4052:	2001      	movs	r0, #1
    4054:	e7e8      	b.n	4028 <_ZNK8SdVolume6fatGetEmPm+0x10>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    4056:	2100      	movs	r1, #0
    4058:	f7ff ff98 	bl	3f8c <_ZN8SdVolume13cacheRawBlockEmh>
    405c:	2800      	cmp	r0, #0
    405e:	d1f0      	bne.n	4042 <_ZNK8SdVolume6fatGetEmPm+0x2a>
    4060:	e7e1      	b.n	4026 <_ZNK8SdVolume6fatGetEmPm+0xe>
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    4062:	227f      	movs	r2, #127	; 0x7f
    4064:	4014      	ands	r4, r2
    4066:	00a4      	lsls	r4, r4, #2
    4068:	591b      	ldr	r3, [r3, r4]
    406a:	011b      	lsls	r3, r3, #4
    406c:	091b      	lsrs	r3, r3, #4
    406e:	e7ef      	b.n	4050 <_ZNK8SdVolume6fatGetEmPm+0x38>
    4070:	20000048 	.word	0x20000048
    4074:	200007fc 	.word	0x200007fc

00004078 <_ZNK8SdVolume9chainSizeEmPm>:
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    4078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    s += 512UL << clusterSizeShift_;
    407a:	2780      	movs	r7, #128	; 0x80
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    407c:	0005      	movs	r5, r0
    407e:	0016      	movs	r6, r2
  uint32_t s = 0;
    4080:	2400      	movs	r4, #0
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    4082:	9101      	str	r1, [sp, #4]
    s += 512UL << clusterSizeShift_;
    4084:	00bf      	lsls	r7, r7, #2
    if (!fatGet(cluster, &cluster)) return false;
    4086:	aa01      	add	r2, sp, #4
    4088:	9901      	ldr	r1, [sp, #4]
    408a:	0028      	movs	r0, r5
    408c:	f7ff ffc4 	bl	4018 <_ZNK8SdVolume6fatGetEmPm>
    4090:	2800      	cmp	r0, #0
    4092:	d00d      	beq.n	40b0 <_ZNK8SdVolume9chainSizeEmPm+0x38>
    s += 512UL << clusterSizeShift_;
    4094:	003a      	movs	r2, r7
    4096:	7c2b      	ldrb	r3, [r5, #16]
    4098:	409a      	lsls	r2, r3
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    409a:	1c6b      	adds	r3, r5, #1
    409c:	7fdb      	ldrb	r3, [r3, #31]
    409e:	18a4      	adds	r4, r4, r2
  } while (!isEOC(cluster));
    40a0:	9a01      	ldr	r2, [sp, #4]
    40a2:	2b10      	cmp	r3, #16
    40a4:	d005      	beq.n	40b2 <_ZNK8SdVolume9chainSizeEmPm+0x3a>
    40a6:	4b04      	ldr	r3, [pc, #16]	; (40b8 <_ZNK8SdVolume9chainSizeEmPm+0x40>)
  do {
    40a8:	429a      	cmp	r2, r3
    40aa:	d3ec      	bcc.n	4086 <_ZNK8SdVolume9chainSizeEmPm+0xe>
  return true;
    40ac:	2001      	movs	r0, #1
  *size = s;
    40ae:	6034      	str	r4, [r6, #0]
}
    40b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    40b2:	4b02      	ldr	r3, [pc, #8]	; (40bc <_ZNK8SdVolume9chainSizeEmPm+0x44>)
    40b4:	e7f8      	b.n	40a8 <_ZNK8SdVolume9chainSizeEmPm+0x30>
    40b6:	46c0      	nop			; (mov r8, r8)
    40b8:	0ffffff8 	.word	0x0ffffff8
    40bc:	0000fff8 	.word	0x0000fff8

000040c0 <_ZN8SdVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    40c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    40c2:	0006      	movs	r6, r0
    40c4:	000c      	movs	r4, r1
    40c6:	9201      	str	r2, [sp, #4]
  // error if reserved cluster
  if (cluster < 2) return false;
    40c8:	2901      	cmp	r1, #1
    40ca:	d801      	bhi.n	40d0 <_ZN8SdVolume6fatPutEmm+0x10>
    40cc:	2000      	movs	r0, #0
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    40ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (cluster > (clusterCount_ + 1)) return false;
    40d0:	68c3      	ldr	r3, [r0, #12]
    40d2:	3301      	adds	r3, #1
    40d4:	4299      	cmp	r1, r3
    40d6:	d8f9      	bhi.n	40cc <_ZN8SdVolume6fatPutEmm+0xc>
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    40d8:	1c47      	adds	r7, r0, #1
    40da:	7ffa      	ldrb	r2, [r7, #31]
  uint32_t lba = fatStartBlock_;
    40dc:	69c5      	ldr	r5, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    40de:	09cb      	lsrs	r3, r1, #7
    40e0:	2a10      	cmp	r2, #16
    40e2:	d100      	bne.n	40e6 <_ZN8SdVolume6fatPutEmm+0x26>
    40e4:	0a0b      	lsrs	r3, r1, #8
    40e6:	18ed      	adds	r5, r5, r3
  if (lba != cacheBlockNumber_) {
    40e8:	4b13      	ldr	r3, [pc, #76]	; (4138 <_ZN8SdVolume6fatPutEmm+0x78>)
    40ea:	681b      	ldr	r3, [r3, #0]
    40ec:	429d      	cmp	r5, r3
    40ee:	d116      	bne.n	411e <_ZN8SdVolume6fatPutEmm+0x5e>
  if (fatType_ == 16) {
    40f0:	7ffa      	ldrb	r2, [r7, #31]
    40f2:	4b12      	ldr	r3, [pc, #72]	; (413c <_ZN8SdVolume6fatPutEmm+0x7c>)
    40f4:	2a10      	cmp	r2, #16
    40f6:	d119      	bne.n	412c <_ZN8SdVolume6fatPutEmm+0x6c>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    40f8:	466a      	mov	r2, sp
    40fa:	b2e4      	uxtb	r4, r4
    40fc:	8892      	ldrh	r2, [r2, #4]
    40fe:	0064      	lsls	r4, r4, #1
    4100:	531a      	strh	r2, [r3, r4]
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    4102:	2301      	movs	r3, #1
    4104:	490e      	ldr	r1, [pc, #56]	; (4140 <_ZN8SdVolume6fatPutEmm+0x80>)
  return true;
    4106:	0018      	movs	r0, r3
    4108:	780a      	ldrb	r2, [r1, #0]
    410a:	431a      	orrs	r2, r3
    410c:	700a      	strb	r2, [r1, #0]
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    410e:	7e32      	ldrb	r2, [r6, #24]
    4110:	429a      	cmp	r2, r3
    4112:	dddc      	ble.n	40ce <_ZN8SdVolume6fatPutEmm+0xe>
    4114:	68b2      	ldr	r2, [r6, #8]
    4116:	1955      	adds	r5, r2, r5
    4118:	4a0a      	ldr	r2, [pc, #40]	; (4144 <_ZN8SdVolume6fatPutEmm+0x84>)
    411a:	6015      	str	r5, [r2, #0]
    411c:	e7d7      	b.n	40ce <_ZN8SdVolume6fatPutEmm+0xe>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    411e:	2100      	movs	r1, #0
    4120:	0028      	movs	r0, r5
    4122:	f7ff ff33 	bl	3f8c <_ZN8SdVolume13cacheRawBlockEmh>
    4126:	2800      	cmp	r0, #0
    4128:	d1e2      	bne.n	40f0 <_ZN8SdVolume6fatPutEmm+0x30>
    412a:	e7cf      	b.n	40cc <_ZN8SdVolume6fatPutEmm+0xc>
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    412c:	227f      	movs	r2, #127	; 0x7f
    412e:	4014      	ands	r4, r2
    4130:	9a01      	ldr	r2, [sp, #4]
    4132:	00a4      	lsls	r4, r4, #2
    4134:	511a      	str	r2, [r3, r4]
    4136:	e7e4      	b.n	4102 <_ZN8SdVolume6fatPutEmm+0x42>
    4138:	20000048 	.word	0x20000048
    413c:	200007fc 	.word	0x200007fc
    4140:	200007f8 	.word	0x200007f8
    4144:	200009fc 	.word	0x200009fc

00004148 <_ZN8SdVolume15allocContiguousEmPm>:
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    4148:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (*curCluster) {
    414a:	6814      	ldr	r4, [r2, #0]
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    414c:	b087      	sub	sp, #28
    414e:	0006      	movs	r6, r0
    4150:	9102      	str	r1, [sp, #8]
    4152:	9201      	str	r2, [sp, #4]
  if (*curCluster) {
    4154:	2c00      	cmp	r4, #0
    4156:	d021      	beq.n	419c <_ZN8SdVolume15allocContiguousEmPm+0x54>
    setStart = false;
    4158:	2700      	movs	r7, #0
    bgnCluster = *curCluster + 1;
    415a:	3401      	adds	r4, #1
  uint32_t fatEnd = clusterCount_ + 1;
    415c:	68f3      	ldr	r3, [r6, #12]
  uint32_t endCluster = bgnCluster;
    415e:	0025      	movs	r5, r4
  uint32_t fatEnd = clusterCount_ + 1;
    4160:	3301      	adds	r3, #1
    4162:	9303      	str	r3, [sp, #12]
  for (uint32_t n = 0;; n++, endCluster++) {
    4164:	2300      	movs	r3, #0
    4166:	9300      	str	r3, [sp, #0]
    if (n >= clusterCount_) return false;
    4168:	9b00      	ldr	r3, [sp, #0]
    416a:	68f2      	ldr	r2, [r6, #12]
    416c:	4293      	cmp	r3, r2
    416e:	d227      	bcs.n	41c0 <_ZN8SdVolume15allocContiguousEmPm+0x78>
    if (endCluster > fatEnd) {
    4170:	9b03      	ldr	r3, [sp, #12]
    4172:	429d      	cmp	r5, r3
    4174:	d901      	bls.n	417a <_ZN8SdVolume15allocContiguousEmPm+0x32>
      bgnCluster = endCluster = 2;
    4176:	2502      	movs	r5, #2
    4178:	002c      	movs	r4, r5
    if (!fatGet(endCluster, &f)) return false;
    417a:	aa05      	add	r2, sp, #20
    417c:	0029      	movs	r1, r5
    417e:	0030      	movs	r0, r6
    4180:	f7ff ff4a 	bl	4018 <_ZNK8SdVolume6fatGetEmPm>
    4184:	2800      	cmp	r0, #0
    4186:	d01b      	beq.n	41c0 <_ZN8SdVolume15allocContiguousEmPm+0x78>
    if (f != 0) {
    4188:	9a05      	ldr	r2, [sp, #20]
    418a:	1c6b      	adds	r3, r5, #1
    418c:	2a00      	cmp	r2, #0
    418e:	d00c      	beq.n	41aa <_ZN8SdVolume15allocContiguousEmPm+0x62>
      bgnCluster = endCluster + 1;
    4190:	001c      	movs	r4, r3
  for (uint32_t n = 0;; n++, endCluster++) {
    4192:	9a00      	ldr	r2, [sp, #0]
    4194:	001d      	movs	r5, r3
    4196:	3201      	adds	r2, #1
    4198:	9200      	str	r2, [sp, #0]
  }
    419a:	e7e5      	b.n	4168 <_ZN8SdVolume15allocContiguousEmPm+0x20>
    setStart = 1 == count;
    419c:	9b02      	ldr	r3, [sp, #8]
    bgnCluster = allocSearchStart_;
    419e:	6804      	ldr	r4, [r0, #0]
    setStart = 1 == count;
    41a0:	3b01      	subs	r3, #1
    41a2:	4259      	negs	r1, r3
    41a4:	4159      	adcs	r1, r3
    41a6:	b2cf      	uxtb	r7, r1
    41a8:	e7d8      	b.n	415c <_ZN8SdVolume15allocContiguousEmPm+0x14>
    } else if ((endCluster - bgnCluster + 1) == count) {
    41aa:	9902      	ldr	r1, [sp, #8]
    41ac:	1b1a      	subs	r2, r3, r4
    41ae:	4291      	cmp	r1, r2
    41b0:	d1ef      	bne.n	4192 <_ZN8SdVolume15allocContiguousEmPm+0x4a>
    return fatPut(cluster, 0x0FFFFFFF);
    41b2:	4a15      	ldr	r2, [pc, #84]	; (4208 <_ZN8SdVolume15allocContiguousEmPm+0xc0>)
    41b4:	0029      	movs	r1, r5
    41b6:	0030      	movs	r0, r6
    41b8:	f7ff ff82 	bl	40c0 <_ZN8SdVolume6fatPutEmm>
  if (!fatPutEOC(endCluster)) return false;
    41bc:	2800      	cmp	r0, #0
    41be:	d103      	bne.n	41c8 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    41c0:	2700      	movs	r7, #0
}
    41c2:	0038      	movs	r0, r7
    41c4:	b007      	add	sp, #28
    41c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (endCluster > bgnCluster) {
    41c8:	42ac      	cmp	r4, r5
    41ca:	d208      	bcs.n	41de <_ZN8SdVolume15allocContiguousEmPm+0x96>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    41cc:	1e6b      	subs	r3, r5, #1
    41ce:	002a      	movs	r2, r5
    41d0:	0019      	movs	r1, r3
    41d2:	0030      	movs	r0, r6
    41d4:	9300      	str	r3, [sp, #0]
    41d6:	f7ff ff73 	bl	40c0 <_ZN8SdVolume6fatPutEmm>
    endCluster--;
    41da:	9d00      	ldr	r5, [sp, #0]
    41dc:	e7ee      	b.n	41bc <_ZN8SdVolume15allocContiguousEmPm+0x74>
  if (*curCluster != 0) {
    41de:	9b01      	ldr	r3, [sp, #4]
    41e0:	6819      	ldr	r1, [r3, #0]
    41e2:	2900      	cmp	r1, #0
    41e4:	d105      	bne.n	41f2 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  *curCluster = bgnCluster;
    41e6:	9b01      	ldr	r3, [sp, #4]
    41e8:	601c      	str	r4, [r3, #0]
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    41ea:	2f00      	cmp	r7, #0
    41ec:	d108      	bne.n	4200 <_ZN8SdVolume15allocContiguousEmPm+0xb8>
  return true;
    41ee:	3701      	adds	r7, #1
    41f0:	e7e7      	b.n	41c2 <_ZN8SdVolume15allocContiguousEmPm+0x7a>
    if (!fatPut(*curCluster, bgnCluster)) return false;
    41f2:	0022      	movs	r2, r4
    41f4:	0030      	movs	r0, r6
    41f6:	f7ff ff63 	bl	40c0 <_ZN8SdVolume6fatPutEmm>
    41fa:	2800      	cmp	r0, #0
    41fc:	d1f3      	bne.n	41e6 <_ZN8SdVolume15allocContiguousEmPm+0x9e>
    41fe:	e7df      	b.n	41c0 <_ZN8SdVolume15allocContiguousEmPm+0x78>
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    4200:	3401      	adds	r4, #1
    4202:	6034      	str	r4, [r6, #0]
    4204:	e7dd      	b.n	41c2 <_ZN8SdVolume15allocContiguousEmPm+0x7a>
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	0fffffff 	.word	0x0fffffff

0000420c <_ZN8SdVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;
    420c:	2302      	movs	r3, #2
uint8_t SdVolume::freeChain(uint32_t cluster) {
    420e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4210:	0005      	movs	r5, r0
    4212:	000c      	movs	r4, r1
  allocSearchStart_ = 2;
    4214:	6003      	str	r3, [r0, #0]

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    4216:	aa01      	add	r2, sp, #4
    4218:	0021      	movs	r1, r4
    421a:	0028      	movs	r0, r5
    421c:	f7ff fefc 	bl	4018 <_ZNK8SdVolume6fatGetEmPm>
    4220:	2800      	cmp	r0, #0
    4222:	d012      	beq.n	424a <_ZN8SdVolume9freeChainEm+0x3e>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    4224:	2200      	movs	r2, #0
    4226:	0021      	movs	r1, r4
    4228:	0028      	movs	r0, r5
    422a:	f7ff ff49 	bl	40c0 <_ZN8SdVolume6fatPutEmm>
    422e:	2800      	cmp	r0, #0
    4230:	d00b      	beq.n	424a <_ZN8SdVolume9freeChainEm+0x3e>
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    4232:	1c6b      	adds	r3, r5, #1
    4234:	7fdb      	ldrb	r3, [r3, #31]

    cluster = next;
    4236:	9c01      	ldr	r4, [sp, #4]
    4238:	2b10      	cmp	r3, #16
    423a:	d004      	beq.n	4246 <_ZN8SdVolume9freeChainEm+0x3a>
    423c:	4b04      	ldr	r3, [pc, #16]	; (4250 <_ZN8SdVolume9freeChainEm+0x44>)
  do {
    423e:	429c      	cmp	r4, r3
    4240:	d3e9      	bcc.n	4216 <_ZN8SdVolume9freeChainEm+0xa>
  } while (!isEOC(cluster));

  return true;
    4242:	2001      	movs	r0, #1
}
    4244:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    4246:	4b03      	ldr	r3, [pc, #12]	; (4254 <_ZN8SdVolume9freeChainEm+0x48>)
    4248:	e7f9      	b.n	423e <_ZN8SdVolume9freeChainEm+0x32>
    if (!fatGet(cluster, &next)) return false;
    424a:	2000      	movs	r0, #0
    424c:	e7fa      	b.n	4244 <_ZN8SdVolume9freeChainEm+0x38>
    424e:	46c0      	nop			; (mov r8, r8)
    4250:	0ffffff8 	.word	0x0ffffff8
    4254:	0000fff8 	.word	0x0000fff8

00004258 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    4258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    425a:	4b40      	ldr	r3, [pc, #256]	; (435c <_ZN8SdVolume4initEP7Sd2Cardh+0x104>)
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    425c:	0005      	movs	r5, r0
    425e:	1e14      	subs	r4, r2, #0
  sdCard_ = dev;
    4260:	6019      	str	r1, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4262:	d020      	beq.n	42a6 <_ZN8SdVolume4initEP7Sd2Cardh+0x4e>
    if (part > 4)return false;
    4264:	2a04      	cmp	r2, #4
    4266:	dd01      	ble.n	426c <_ZN8SdVolume4initEP7Sd2Cardh+0x14>
    4268:	2000      	movs	r0, #0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    426a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    426c:	2100      	movs	r1, #0
    426e:	0008      	movs	r0, r1
    4270:	f7ff fe8c 	bl	3f8c <_ZN8SdVolume13cacheRawBlockEmh>
    4274:	2800      	cmp	r0, #0
    4276:	d0f7      	beq.n	4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    4278:	1e63      	subs	r3, r4, #1
    if ((p->boot & 0X7F) !=0  ||
    427a:	4a39      	ldr	r2, [pc, #228]	; (4360 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>)
    427c:	011b      	lsls	r3, r3, #4
    427e:	18d3      	adds	r3, r2, r3
    4280:	33bf      	adds	r3, #191	; 0xbf
    4282:	33ff      	adds	r3, #255	; 0xff
    4284:	781b      	ldrb	r3, [r3, #0]
    4286:	065b      	lsls	r3, r3, #25
    4288:	d1ee      	bne.n	4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
      p->totalSectors < 100 ||
    428a:	341b      	adds	r4, #27
    428c:	0124      	lsls	r4, r4, #4
    428e:	1914      	adds	r4, r2, r4
    4290:	89a3      	ldrh	r3, [r4, #12]
    4292:	8962      	ldrh	r2, [r4, #10]
    4294:	041b      	lsls	r3, r3, #16
    4296:	4313      	orrs	r3, r2
    if ((p->boot & 0X7F) !=0  ||
    4298:	2b63      	cmp	r3, #99	; 0x63
    429a:	d9e5      	bls.n	4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
      p->firstSector == 0) {
    429c:	88e3      	ldrh	r3, [r4, #6]
    429e:	8924      	ldrh	r4, [r4, #8]
    42a0:	0424      	lsls	r4, r4, #16
    42a2:	431c      	orrs	r4, r3
      p->totalSectors < 100 ||
    42a4:	d0e0      	beq.n	4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    42a6:	2100      	movs	r1, #0
    42a8:	0020      	movs	r0, r4
    42aa:	f7ff fe6f 	bl	3f8c <_ZN8SdVolume13cacheRawBlockEmh>
    42ae:	2800      	cmp	r0, #0
    42b0:	d0da      	beq.n	4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
  if (bpb->bytesPerSector != 512 ||
    42b2:	2180      	movs	r1, #128	; 0x80
    42b4:	4b2a      	ldr	r3, [pc, #168]	; (4360 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>)
    42b6:	0089      	lsls	r1, r1, #2
    42b8:	7b1a      	ldrb	r2, [r3, #12]
    42ba:	7ad8      	ldrb	r0, [r3, #11]
    42bc:	0212      	lsls	r2, r2, #8
    42be:	4302      	orrs	r2, r0
    42c0:	428a      	cmp	r2, r1
    42c2:	d1d1      	bne.n	4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
    bpb->fatCount == 0 ||
    42c4:	7c1a      	ldrb	r2, [r3, #16]
    42c6:	4694      	mov	ip, r2
  if (bpb->bytesPerSector != 512 ||
    42c8:	2a00      	cmp	r2, #0
    42ca:	d0cd      	beq.n	4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
    bpb->reservedSectorCount == 0 ||
    42cc:	89d8      	ldrh	r0, [r3, #14]
    bpb->fatCount == 0 ||
    42ce:	2800      	cmp	r0, #0
    42d0:	d0ca      	beq.n	4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
    bpb->sectorsPerCluster == 0) {
    42d2:	7b5e      	ldrb	r6, [r3, #13]
    bpb->reservedSectorCount == 0 ||
    42d4:	2e00      	cmp	r6, #0
    42d6:	d0c7      	beq.n	4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
  fatCount_ = bpb->fatCount;
    42d8:	762a      	strb	r2, [r5, #24]
  clusterSizeShift_ = 0;
    42da:	2200      	movs	r2, #0
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    42dc:	2701      	movs	r7, #1
  blocksPerCluster_ = bpb->sectorsPerCluster;
    42de:	712e      	strb	r6, [r5, #4]
  clusterSizeShift_ = 0;
    42e0:	742a      	strb	r2, [r5, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    42e2:	003a      	movs	r2, r7
    42e4:	7c29      	ldrb	r1, [r5, #16]
    42e6:	408a      	lsls	r2, r1
    42e8:	4296      	cmp	r6, r2
    42ea:	d004      	beq.n	42f6 <_ZN8SdVolume4initEP7Sd2Cardh+0x9e>
    if (clusterSizeShift_++ > 7) return false;
    42ec:	1c4a      	adds	r2, r1, #1
    42ee:	742a      	strb	r2, [r5, #16]
    42f0:	2907      	cmp	r1, #7
    42f2:	ddf6      	ble.n	42e2 <_ZN8SdVolume4initEP7Sd2Cardh+0x8a>
    42f4:	e7b8      	b.n	4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    42f6:	8ada      	ldrh	r2, [r3, #22]
    42f8:	2a00      	cmp	r2, #0
    42fa:	d100      	bne.n	42fe <_ZN8SdVolume4initEP7Sd2Cardh+0xa6>
    42fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    42fe:	1900      	adds	r0, r0, r4
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    4300:	60aa      	str	r2, [r5, #8]
  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    4302:	61e8      	str	r0, [r5, #28]
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    4304:	691e      	ldr	r6, [r3, #16]
    4306:	0237      	lsls	r7, r6, #8
    4308:	0c3f      	lsrs	r7, r7, #16
    430a:	b2be      	uxth	r6, r7
    430c:	846f      	strh	r7, [r5, #34]	; 0x22
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    430e:	4667      	mov	r7, ip
    4310:	437a      	muls	r2, r7
    4312:	1810      	adds	r0, r2, r0
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    4314:	0172      	lsls	r2, r6, #5
    4316:	4e13      	ldr	r6, [pc, #76]	; (4364 <_ZN8SdVolume4initEP7Sd2Cardh+0x10c>)
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    4318:	6268      	str	r0, [r5, #36]	; 0x24
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    431a:	1992      	adds	r2, r2, r6
    431c:	1252      	asrs	r2, r2, #9
    431e:	1812      	adds	r2, r2, r0
    4320:	616a      	str	r2, [r5, #20]
  uint32_t totalBlocks = bpb->totalSectors16 ?
    4322:	7d18      	ldrb	r0, [r3, #20]
    4324:	7cde      	ldrb	r6, [r3, #19]
    4326:	0200      	lsls	r0, r0, #8
    4328:	4330      	orrs	r0, r6
    432a:	d100      	bne.n	432e <_ZN8SdVolume4initEP7Sd2Cardh+0xd6>
    432c:	6a18      	ldr	r0, [r3, #32]
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    432e:	1aa4      	subs	r4, r4, r2
    4330:	1824      	adds	r4, r4, r0
  clusterCount_ >>= clusterSizeShift_;
    4332:	40cc      	lsrs	r4, r1
  if (clusterCount_ < 4085) {
    4334:	4a0c      	ldr	r2, [pc, #48]	; (4368 <_ZN8SdVolume4initEP7Sd2Cardh+0x110>)
  clusterCount_ >>= clusterSizeShift_;
    4336:	60ec      	str	r4, [r5, #12]
    4338:	1c6b      	adds	r3, r5, #1
  if (clusterCount_ < 4085) {
    433a:	4294      	cmp	r4, r2
    433c:	d803      	bhi.n	4346 <_ZN8SdVolume4initEP7Sd2Cardh+0xee>
    fatType_ = 12;
    433e:	220c      	movs	r2, #12
    fatType_ = 32;
    4340:	77da      	strb	r2, [r3, #31]
  return true;
    4342:	2001      	movs	r0, #1
    4344:	e791      	b.n	426a <_ZN8SdVolume4initEP7Sd2Cardh+0x12>
  } else if (clusterCount_ < 65525) {
    4346:	4a09      	ldr	r2, [pc, #36]	; (436c <_ZN8SdVolume4initEP7Sd2Cardh+0x114>)
    4348:	4294      	cmp	r4, r2
    434a:	d801      	bhi.n	4350 <_ZN8SdVolume4initEP7Sd2Cardh+0xf8>
    fatType_ = 16;
    434c:	2210      	movs	r2, #16
    434e:	e7f7      	b.n	4340 <_ZN8SdVolume4initEP7Sd2Cardh+0xe8>
    rootDirStart_ = bpb->fat32RootCluster;
    4350:	4a03      	ldr	r2, [pc, #12]	; (4360 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>)
    4352:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4354:	626a      	str	r2, [r5, #36]	; 0x24
    fatType_ = 32;
    4356:	2220      	movs	r2, #32
    4358:	e7f2      	b.n	4340 <_ZN8SdVolume4initEP7Sd2Cardh+0xe8>
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	20000a00 	.word	0x20000a00
    4360:	200007fc 	.word	0x200007fc
    4364:	000001ff 	.word	0x000001ff
    4368:	00000ff4 	.word	0x00000ff4
    436c:	0000fff4 	.word	0x0000fff4

00004370 <_ZN8SPIClass4initEv>:
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    4370:	7a43      	ldrb	r3, [r0, #9]
    4372:	2b00      	cmp	r3, #0
    4374:	d104      	bne.n	4380 <_ZN8SPIClass4initEv+0x10>
    return;
  interruptMode = SPI_IMODE_NONE;
    4376:	7283      	strb	r3, [r0, #10]
  interruptSave = 0;
    4378:	72c3      	strb	r3, [r0, #11]
  interruptMask = 0;
    437a:	60c3      	str	r3, [r0, #12]
  initialized = true;
    437c:	3301      	adds	r3, #1
    437e:	7243      	strb	r3, [r0, #9]
}
    4380:	4770      	bx	lr

00004382 <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    4382:	b530      	push	{r4, r5, lr}
    4384:	0004      	movs	r4, r0
    4386:	b085      	sub	sp, #20
    4388:	ad02      	add	r5, sp, #8
  _p_sercom->disableSPI();
    438a:	6800      	ldr	r0, [r0, #0]
{
    438c:	9102      	str	r1, [sp, #8]
    438e:	9203      	str	r2, [sp, #12]
  _p_sercom->disableSPI();
    4390:	f000 ff1b 	bl	51ca <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    4394:	796b      	ldrb	r3, [r5, #5]
    4396:	7a22      	ldrb	r2, [r4, #8]
    4398:	79e1      	ldrb	r1, [r4, #7]
    439a:	9300      	str	r3, [sp, #0]
    439c:	6820      	ldr	r0, [r4, #0]
    439e:	2300      	movs	r3, #0
    43a0:	f001 f878 	bl	5494 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    43a4:	7929      	ldrb	r1, [r5, #4]
    43a6:	9a02      	ldr	r2, [sp, #8]
    43a8:	6820      	ldr	r0, [r4, #0]
    43aa:	f000 fee3 	bl	5174 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    43ae:	6820      	ldr	r0, [r4, #0]
    43b0:	f000 ff02 	bl	51b8 <_ZN6SERCOM9enableSPIEv>
}
    43b4:	b005      	add	sp, #20
    43b6:	bd30      	pop	{r4, r5, pc}

000043b8 <_ZN8SPIClass5beginEv>:
{
    43b8:	b570      	push	{r4, r5, r6, lr}
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    43ba:	2618      	movs	r6, #24
{
    43bc:	0004      	movs	r4, r0
  init();
    43be:	f7ff ffd7 	bl	4370 <_ZN8SPIClass4initEv>
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    43c2:	0033      	movs	r3, r6
    43c4:	2108      	movs	r1, #8
    43c6:	7920      	ldrb	r0, [r4, #4]
    43c8:	4d0d      	ldr	r5, [pc, #52]	; (4400 <_ZN8SPIClass5beginEv+0x48>)
    43ca:	4343      	muls	r3, r0
    43cc:	18eb      	adds	r3, r5, r3
    43ce:	5659      	ldrsb	r1, [r3, r1]
    43d0:	f7fd ff84 	bl	22dc <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
    43d4:	0033      	movs	r3, r6
    43d6:	2108      	movs	r1, #8
    43d8:	79a0      	ldrb	r0, [r4, #6]
    43da:	4343      	muls	r3, r0
    43dc:	18eb      	adds	r3, r5, r3
    43de:	5659      	ldrsb	r1, [r3, r1]
    43e0:	f7fd ff7c 	bl	22dc <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
    43e4:	2108      	movs	r1, #8
    43e6:	7960      	ldrb	r0, [r4, #5]
    43e8:	4346      	muls	r6, r0
    43ea:	19ad      	adds	r5, r5, r6
    43ec:	5669      	ldrsb	r1, [r5, r1]
    43ee:	f7fd ff75 	bl	22dc <pinPeripheral>
  config(DEFAULT_SPI_SETTINGS);
    43f2:	4b04      	ldr	r3, [pc, #16]	; (4404 <_ZN8SPIClass5beginEv+0x4c>)
    43f4:	0020      	movs	r0, r4
    43f6:	cb06      	ldmia	r3!, {r1, r2}
    43f8:	f7ff ffc3 	bl	4382 <_ZN8SPIClass6configE11SPISettings>
}
    43fc:	bd70      	pop	{r4, r5, r6, pc}
    43fe:	46c0      	nop			; (mov r8, r8)
    4400:	00006010 	.word	0x00006010
    4404:	20000a14 	.word	0x20000a14

00004408 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    4408:	b507      	push	{r0, r1, r2, lr}
  if (interruptMode != SPI_IMODE_NONE)
    440a:	7a83      	ldrb	r3, [r0, #10]
{
    440c:	9100      	str	r1, [sp, #0]
    440e:	9201      	str	r2, [sp, #4]
  if (interruptMode != SPI_IMODE_NONE)
    4410:	2b00      	cmp	r3, #0
    4412:	d007      	beq.n	4424 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    4414:	079a      	lsls	r2, r3, #30
    4416:	d50a      	bpl.n	442e <_ZN8SPIClass16beginTransactionE11SPISettings+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4418:	f3ef 8210 	mrs	r2, PRIMASK
  return (__get_PRIMASK() ? 0 : 1);
    441c:	4253      	negs	r3, r2
    441e:	4153      	adcs	r3, r2
    {
      interruptSave = interruptsStatus();
    4420:	72c3      	strb	r3, [r0, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    4422:	b672      	cpsid	i
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
  }

  config(settings);
    4424:	9900      	ldr	r1, [sp, #0]
    4426:	9a01      	ldr	r2, [sp, #4]
    4428:	f7ff ffab 	bl	4382 <_ZN8SPIClass6configE11SPISettings>
}
    442c:	bd07      	pop	{r0, r1, r2, pc}
    else if (interruptMode & SPI_IMODE_EXTINT)
    442e:	07db      	lsls	r3, r3, #31
    4430:	d5f8      	bpl.n	4424 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    4432:	8983      	ldrh	r3, [r0, #12]
    4434:	4a01      	ldr	r2, [pc, #4]	; (443c <_ZN8SPIClass16beginTransactionE11SPISettings+0x34>)
    4436:	6093      	str	r3, [r2, #8]
    4438:	e7f4      	b.n	4424 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
    443a:	46c0      	nop			; (mov r8, r8)
    443c:	40001800 	.word	0x40001800

00004440 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
  if (interruptMode != SPI_IMODE_NONE)
    4440:	7a83      	ldrb	r3, [r0, #10]
    4442:	2b00      	cmp	r3, #0
    4444:	d005      	beq.n	4452 <_ZN8SPIClass14endTransactionEv+0x12>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    4446:	079a      	lsls	r2, r3, #30
    4448:	d504      	bpl.n	4454 <_ZN8SPIClass14endTransactionEv+0x14>
    {
      if (interruptSave)
    444a:	7ac3      	ldrb	r3, [r0, #11]
    444c:	2b00      	cmp	r3, #0
    444e:	d000      	beq.n	4452 <_ZN8SPIClass14endTransactionEv+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
    4450:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    4452:	4770      	bx	lr
    else if (interruptMode & SPI_IMODE_EXTINT)
    4454:	07db      	lsls	r3, r3, #31
    4456:	d5fc      	bpl.n	4452 <_ZN8SPIClass14endTransactionEv+0x12>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    4458:	68c3      	ldr	r3, [r0, #12]
    445a:	4a02      	ldr	r2, [pc, #8]	; (4464 <_ZN8SPIClass14endTransactionEv+0x24>)
    445c:	b29b      	uxth	r3, r3
    445e:	60d3      	str	r3, [r2, #12]
}
    4460:	e7f7      	b.n	4452 <_ZN8SPIClass14endTransactionEv+0x12>
    4462:	46c0      	nop			; (mov r8, r8)
    4464:	40001800 	.word	0x40001800

00004468 <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    4468:	b510      	push	{r4, lr}
  return _p_sercom->transferDataSPI(data);
    446a:	6800      	ldr	r0, [r0, #0]
    446c:	f000 feb6 	bl	51dc <_ZN6SERCOM15transferDataSPIEh>
}
    4470:	bd10      	pop	{r4, pc}
	...

00004474 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    4474:	4b09      	ldr	r3, [pc, #36]	; (449c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x28>)
    4476:	4a0a      	ldr	r2, [pc, #40]	; (44a0 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2c>)
  _p_sercom = p_sercom;
    4478:	490a      	ldr	r1, [pc, #40]	; (44a4 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x30>)
    447a:	601a      	str	r2, [r3, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    447c:	2200      	movs	r2, #0
    447e:	715a      	strb	r2, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    4480:	711a      	strb	r2, [r3, #4]
  initialized = false;
    4482:	4b09      	ldr	r3, [pc, #36]	; (44a8 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x34>)
  _p_sercom = p_sercom;
    4484:	6019      	str	r1, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
    4486:	2112      	movs	r1, #18
    4488:	7119      	strb	r1, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    448a:	3102      	adds	r1, #2
    448c:	7199      	strb	r1, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    448e:	3101      	adds	r1, #1
    4490:	7159      	strb	r1, [r3, #5]
  _padTx=PadTx;
    4492:	3914      	subs	r1, #20
  initialized = false;
    4494:	725a      	strb	r2, [r3, #9]
  _padTx=PadTx;
    4496:	71d9      	strb	r1, [r3, #7]
  _padRx=PadRx;
    4498:	721a      	strb	r2, [r3, #8]
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    449a:	4770      	bx	lr
    449c:	20000a14 	.word	0x20000a14
    44a0:	003d0900 	.word	0x003d0900
    44a4:	20000dd8 	.word	0x20000dd8
    44a8:	20000a04 	.word	0x20000a04

000044ac <_ZN7TwoWire5writeEPKhj>:

  return 1 ;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    44ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44ae:	0005      	movs	r5, r0
    44b0:	000e      	movs	r6, r1
    44b2:	0017      	movs	r7, r2
  //Try to store all data
  for(size_t i = 0; i < quantity; ++i)
    44b4:	2400      	movs	r4, #0
    44b6:	42bc      	cmp	r4, r7
    44b8:	d008      	beq.n	44cc <_ZN7TwoWire5writeEPKhj+0x20>
  {
    //Return the number of data stored, when the buffer is full (if write return 0)
    if(!write(data[i]))
    44ba:	682b      	ldr	r3, [r5, #0]
    44bc:	5d31      	ldrb	r1, [r6, r4]
    44be:	681b      	ldr	r3, [r3, #0]
    44c0:	0028      	movs	r0, r5
    44c2:	4798      	blx	r3
    44c4:	2800      	cmp	r0, #0
    44c6:	d001      	beq.n	44cc <_ZN7TwoWire5writeEPKhj+0x20>
  for(size_t i = 0; i < quantity; ++i)
    44c8:	3401      	adds	r4, #1
    44ca:	e7f4      	b.n	44b6 <_ZN7TwoWire5writeEPKhj+0xa>
      return i;
  }

  //All data stored
  return quantity;
}
    44cc:	0020      	movs	r0, r4
    44ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000044d0 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
    44d0:	4770      	bx	lr

000044d2 <_ZN7TwoWire4peekEv>:
  if(_iTail == _iHead)
    44d2:	0003      	movs	r3, r0
    44d4:	33fc      	adds	r3, #252	; 0xfc
    44d6:	6a19      	ldr	r1, [r3, #32]
    44d8:	69da      	ldr	r2, [r3, #28]
    44da:	4291      	cmp	r1, r2
    44dc:	d003      	beq.n	44e6 <_ZN7TwoWire4peekEv+0x14>
  return _aucBuffer[_iTail];
    44de:	6a1b      	ldr	r3, [r3, #32]
    44e0:	18c0      	adds	r0, r0, r3
    44e2:	7e00      	ldrb	r0, [r0, #24]
}
    44e4:	4770      	bx	lr
    return -1;
    44e6:	2001      	movs	r0, #1
    44e8:	4240      	negs	r0, r0
  return rxBuffer.peek();
    44ea:	e7fb      	b.n	44e4 <_ZN7TwoWire4peekEv+0x12>

000044ec <_ZN7TwoWire9availableEv>:
  int delta = _iHead - _iTail;
    44ec:	0003      	movs	r3, r0
    44ee:	33fc      	adds	r3, #252	; 0xfc
    44f0:	69d8      	ldr	r0, [r3, #28]
    44f2:	6a1b      	ldr	r3, [r3, #32]
    44f4:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    44f6:	d501      	bpl.n	44fc <_ZN7TwoWire9availableEv+0x10>
    return N + delta;
    44f8:	3001      	adds	r0, #1
    44fa:	30ff      	adds	r0, #255	; 0xff
}
    44fc:	4770      	bx	lr
	...

00004500 <_ZN7TwoWireC1EP6SERCOMhh>:
TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
    4500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4502:	9301      	str	r3, [sp, #4]
    4504:	23fa      	movs	r3, #250	; 0xfa
    memset( _aucBuffer, 0, N ) ;
    4506:	2680      	movs	r6, #128	; 0x80
    Print() : write_error(0) {}
    4508:	2500      	movs	r5, #0
    450a:	0004      	movs	r4, r0
    450c:	009b      	lsls	r3, r3, #2
    450e:	6083      	str	r3, [r0, #8]
    4510:	4b12      	ldr	r3, [pc, #72]	; (455c <_ZN7TwoWireC1EP6SERCOMhh+0x5c>)
    4512:	0076      	lsls	r6, r6, #1
    4514:	3308      	adds	r3, #8
    4516:	000f      	movs	r7, r1
    4518:	6045      	str	r5, [r0, #4]
    451a:	0029      	movs	r1, r5
    451c:	9200      	str	r2, [sp, #0]
    451e:	6003      	str	r3, [r0, #0]
    4520:	0032      	movs	r2, r6
    4522:	3018      	adds	r0, #24
    4524:	f001 fad0 	bl	5ac8 <memset>
  _iHead = 0;
    4528:	0023      	movs	r3, r4
    memset( _aucBuffer, 0, N ) ;
    452a:	0020      	movs	r0, r4
  _iHead = 0;
    452c:	33fc      	adds	r3, #252	; 0xfc
    memset( _aucBuffer, 0, N ) ;
    452e:	3021      	adds	r0, #33	; 0x21
  _iHead = 0;
    4530:	61dd      	str	r5, [r3, #28]
    memset( _aucBuffer, 0, N ) ;
    4532:	0032      	movs	r2, r6
  _iTail = 0;
    4534:	621d      	str	r5, [r3, #32]
    memset( _aucBuffer, 0, N ) ;
    4536:	0029      	movs	r1, r5
    4538:	30ff      	adds	r0, #255	; 0xff
    453a:	f001 fac5 	bl	5ac8 <memset>
  _iHead = 0;
    453e:	2387      	movs	r3, #135	; 0x87
    4540:	009b      	lsls	r3, r3, #2
    4542:	18e3      	adds	r3, r4, r3
    4544:	605d      	str	r5, [r3, #4]
  _iTail = 0;
    4546:	609d      	str	r5, [r3, #8]
  this->_uc_pinSDA=pinSDA;
    4548:	466b      	mov	r3, sp
    454a:	781b      	ldrb	r3, [r3, #0]
  this->sercom = s;
    454c:	6127      	str	r7, [r4, #16]
  this->_uc_pinSDA=pinSDA;
    454e:	7523      	strb	r3, [r4, #20]
  this->_uc_pinSCL=pinSCL;
    4550:	466b      	mov	r3, sp
    4552:	791b      	ldrb	r3, [r3, #4]
  transmissionBegun = false;
    4554:	75a5      	strb	r5, [r4, #22]
}
    4556:	0020      	movs	r0, r4
  this->_uc_pinSCL=pinSCL;
    4558:	7563      	strb	r3, [r4, #21]
}
    455a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    455c:	00005fec 	.word	0x00005fec

00004560 <_ZN7TwoWire5beginEv>:
void TwoWire::begin(void) {
    4560:	b570      	push	{r4, r5, r6, lr}
    4562:	0006      	movs	r6, r0
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    4564:	2518      	movs	r5, #24
  sercom->initMasterWIRE(TWI_CLOCK);
    4566:	490c      	ldr	r1, [pc, #48]	; (4598 <_ZN7TwoWire5beginEv+0x38>)
    4568:	6900      	ldr	r0, [r0, #16]
    456a:	f000 ffb7 	bl	54dc <_ZN6SERCOM14initMasterWIREEm>
  sercom->enableWIRE();
    456e:	6930      	ldr	r0, [r6, #16]
    4570:	f000 fe4c 	bl	520c <_ZN6SERCOM10enableWIREEv>
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    4574:	002b      	movs	r3, r5
    4576:	2108      	movs	r1, #8
    4578:	7d30      	ldrb	r0, [r6, #20]
    457a:	4c08      	ldr	r4, [pc, #32]	; (459c <_ZN7TwoWire5beginEv+0x3c>)
    457c:	4343      	muls	r3, r0
    457e:	18e3      	adds	r3, r4, r3
    4580:	5659      	ldrsb	r1, [r3, r1]
    4582:	f7fd feab 	bl	22dc <pinPeripheral>
  pinPeripheral(_uc_pinSCL, g_APinDescription[_uc_pinSCL].ulPinType);
    4586:	2108      	movs	r1, #8
    4588:	7d70      	ldrb	r0, [r6, #21]
    458a:	4345      	muls	r5, r0
    458c:	1964      	adds	r4, r4, r5
    458e:	5661      	ldrsb	r1, [r4, r1]
    4590:	f7fd fea4 	bl	22dc <pinPeripheral>
}
    4594:	bd70      	pop	{r4, r5, r6, pc}
    4596:	46c0      	nop			; (mov r8, r8)
    4598:	000186a0 	.word	0x000186a0
    459c:	00006010 	.word	0x00006010

000045a0 <_ZN7TwoWire17beginTransmissionEh>:
  txAddress = address;
    45a0:	238a      	movs	r3, #138	; 0x8a
  _iHead = 0;
    45a2:	2200      	movs	r2, #0
    45a4:	009b      	lsls	r3, r3, #2
    45a6:	54c1      	strb	r1, [r0, r3]
    45a8:	3b0c      	subs	r3, #12
    45aa:	18c3      	adds	r3, r0, r3
    45ac:	605a      	str	r2, [r3, #4]
  _iTail = 0;
    45ae:	609a      	str	r2, [r3, #8]
  transmissionBegun = true;
    45b0:	2301      	movs	r3, #1
    45b2:	7583      	strb	r3, [r0, #22]
}
    45b4:	4770      	bx	lr

000045b6 <_ZN11RingBufferNILi256EE10store_charEh>:
  int i = nextIndex(_iHead);
    45b6:	0002      	movs	r2, r0
    45b8:	32fc      	adds	r2, #252	; 0xfc
    45ba:	6853      	ldr	r3, [r2, #4]
void RingBufferN<N>::store_char( uint8_t c )
    45bc:	b510      	push	{r4, lr}
  return (uint32_t)(index + 1) % N;
    45be:	3301      	adds	r3, #1
  if ( i != _iTail )
    45c0:	6894      	ldr	r4, [r2, #8]
  return (uint32_t)(index + 1) % N;
    45c2:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    45c4:	429c      	cmp	r4, r3
    45c6:	d002      	beq.n	45ce <_ZN11RingBufferNILi256EE10store_charEh+0x18>
    _aucBuffer[_iHead] = c ;
    45c8:	6854      	ldr	r4, [r2, #4]
    45ca:	5501      	strb	r1, [r0, r4]
    _iHead = i ;
    45cc:	6053      	str	r3, [r2, #4]
}
    45ce:	bd10      	pop	{r4, pc}

000045d0 <_ZN7TwoWire11requestFromEhjb>:
{
    45d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45d2:	2500      	movs	r5, #0
    45d4:	0004      	movs	r4, r0
    45d6:	0017      	movs	r7, r2
    45d8:	9301      	str	r3, [sp, #4]
    return 0;
    45da:	0028      	movs	r0, r5
  if(quantity == 0)
    45dc:	42aa      	cmp	r2, r5
    45de:	d027      	beq.n	4630 <_ZN7TwoWire11requestFromEhjb+0x60>
  _iHead = 0;
    45e0:	0023      	movs	r3, r4
    45e2:	33fc      	adds	r3, #252	; 0xfc
    45e4:	61dd      	str	r5, [r3, #28]
  if(sercom->startTransmissionWIRE(address, WIRE_READ_FLAG))
    45e6:	2201      	movs	r2, #1
  _iTail = 0;
    45e8:	621d      	str	r5, [r3, #32]
    45ea:	6920      	ldr	r0, [r4, #16]
    45ec:	f000 fe50 	bl	5290 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    45f0:	42a8      	cmp	r0, r5
    45f2:	d01c      	beq.n	462e <_ZN7TwoWire11requestFromEhjb+0x5e>
  rxBuffer.clear();
    45f4:	0026      	movs	r6, r4
    45f6:	3618      	adds	r6, #24
    rxBuffer.store_char(sercom->readDataWIRE());
    45f8:	6920      	ldr	r0, [r4, #16]
    45fa:	f000 feb7 	bl	536c <_ZN6SERCOM12readDataWIREEv>
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    45fe:	3501      	adds	r5, #1
    rxBuffer.store_char(sercom->readDataWIRE());
    4600:	0001      	movs	r1, r0
    4602:	0030      	movs	r0, r6
    4604:	f7ff ffd7 	bl	45b6 <_ZN11RingBufferNILi256EE10store_charEh>
    sercom->prepareNackBitWIRE();                           // Prepare NACK to stop slave transmission
    4608:	6920      	ldr	r0, [r4, #16]
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    460a:	42af      	cmp	r7, r5
    460c:	d006      	beq.n	461c <_ZN7TwoWire11requestFromEhjb+0x4c>
      sercom->prepareAckBitWIRE();                          // Prepare Acknowledge
    460e:	f000 fe19 	bl	5244 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_READ); // Prepare the ACK command for the slave
    4612:	2102      	movs	r1, #2
    4614:	6920      	ldr	r0, [r4, #16]
    4616:	f000 fe1f 	bl	5258 <_ZN6SERCOM22prepareCommandBitsWireEh>
    461a:	e7ed      	b.n	45f8 <_ZN7TwoWire11requestFromEhjb+0x28>
    sercom->prepareNackBitWIRE();                           // Prepare NACK to stop slave transmission
    461c:	f000 fe09 	bl	5232 <_ZN6SERCOM18prepareNackBitWIREEv>
    if (stopBit)
    4620:	9b01      	ldr	r3, [sp, #4]
    4622:	2b00      	cmp	r3, #0
    4624:	d003      	beq.n	462e <_ZN7TwoWire11requestFromEhjb+0x5e>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);   // Send Stop
    4626:	2103      	movs	r1, #3
    4628:	6920      	ldr	r0, [r4, #16]
    462a:	f000 fe15 	bl	5258 <_ZN6SERCOM22prepareCommandBitsWireEh>
  return byteRead;
    462e:	b2e8      	uxtb	r0, r5
}
    4630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004632 <_ZN7TwoWire11requestFromEhj>:
{
    4632:	b510      	push	{r4, lr}
  return requestFrom(address, quantity, true);
    4634:	2301      	movs	r3, #1
    4636:	f7ff ffcb 	bl	45d0 <_ZN7TwoWire11requestFromEhjb>
}
    463a:	bd10      	pop	{r4, pc}

0000463c <_ZN7TwoWire5writeEh>:
    return 0 ;
    463c:	2200      	movs	r2, #0
{
    463e:	b510      	push	{r4, lr}
  if ( !transmissionBegun || txBuffer.isFull() )
    4640:	7d83      	ldrb	r3, [r0, #22]
    4642:	4293      	cmp	r3, r2
    4644:	d00d      	beq.n	4662 <_ZN7TwoWire5writeEh+0x26>
  return (nextIndex(_iHead) == _iTail);
    4646:	2387      	movs	r3, #135	; 0x87
    4648:	009b      	lsls	r3, r3, #2
    464a:	18c4      	adds	r4, r0, r3
    464c:	6863      	ldr	r3, [r4, #4]
    464e:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(index + 1) % N;
    4650:	3301      	adds	r3, #1
    4652:	b2db      	uxtb	r3, r3
    4654:	42a3      	cmp	r3, r4
    4656:	d004      	beq.n	4662 <_ZN7TwoWire5writeEh+0x26>
  txBuffer.store_char( ucData ) ;
    4658:	3021      	adds	r0, #33	; 0x21
    465a:	30ff      	adds	r0, #255	; 0xff
    465c:	f7ff ffab 	bl	45b6 <_ZN11RingBufferNILi256EE10store_charEh>
  return 1 ;
    4660:	2201      	movs	r2, #1
}
    4662:	0010      	movs	r0, r2
    4664:	bd10      	pop	{r4, pc}

00004666 <_ZN11RingBufferNILi256EE9read_charEv>:
  if(_iTail == _iHead)
    4666:	0003      	movs	r3, r0
    4668:	33fc      	adds	r3, #252	; 0xfc
    466a:	6899      	ldr	r1, [r3, #8]
    466c:	685a      	ldr	r2, [r3, #4]
    466e:	4291      	cmp	r1, r2
    4670:	d006      	beq.n	4680 <_ZN11RingBufferNILi256EE9read_charEv+0x1a>
  uint8_t value = _aucBuffer[_iTail];
    4672:	689a      	ldr	r2, [r3, #8]
    4674:	5c80      	ldrb	r0, [r0, r2]
  _iTail = nextIndex(_iTail);
    4676:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    4678:	3201      	adds	r2, #1
    467a:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    467c:	609a      	str	r2, [r3, #8]
}
    467e:	4770      	bx	lr
    return -1;
    4680:	2001      	movs	r0, #1
    4682:	4240      	negs	r0, r0
    4684:	e7fb      	b.n	467e <_ZN11RingBufferNILi256EE9read_charEv+0x18>

00004686 <_ZN7TwoWire15endTransmissionEb>:
  transmissionBegun = false ;
    4686:	2200      	movs	r2, #0
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    4688:	238a      	movs	r3, #138	; 0x8a
{
    468a:	b570      	push	{r4, r5, r6, lr}
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    468c:	009b      	lsls	r3, r3, #2
  transmissionBegun = false ;
    468e:	7582      	strb	r2, [r0, #22]
{
    4690:	0005      	movs	r5, r0
    4692:	000e      	movs	r6, r1
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    4694:	5cc1      	ldrb	r1, [r0, r3]
    4696:	6900      	ldr	r0, [r0, #16]
    4698:	f000 fdfa 	bl	5290 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    469c:	2800      	cmp	r0, #0
    469e:	d106      	bne.n	46ae <_ZN7TwoWire15endTransmissionEb+0x28>
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    46a0:	2103      	movs	r1, #3
    46a2:	6928      	ldr	r0, [r5, #16]
    46a4:	f000 fdd8 	bl	5258 <_ZN6SERCOM22prepareCommandBitsWireEh>
    return 2 ;  // Address error
    46a8:	2402      	movs	r4, #2
}
    46aa:	0020      	movs	r0, r4
    46ac:	bd70      	pop	{r4, r5, r6, pc}
  int delta = _iHead - _iTail;
    46ae:	2387      	movs	r3, #135	; 0x87
  while( txBuffer.available() )
    46b0:	0028      	movs	r0, r5
    46b2:	009b      	lsls	r3, r3, #2
    46b4:	18ea      	adds	r2, r5, r3
    46b6:	6853      	ldr	r3, [r2, #4]
    46b8:	6894      	ldr	r4, [r2, #8]
    46ba:	3021      	adds	r0, #33	; 0x21
    46bc:	30ff      	adds	r0, #255	; 0xff
    46be:	1b1c      	subs	r4, r3, r4
  if(delta < 0)
    46c0:	d501      	bpl.n	46c6 <_ZN7TwoWire15endTransmissionEb+0x40>
    return N + delta;
    46c2:	3401      	adds	r4, #1
    46c4:	34ff      	adds	r4, #255	; 0xff
    46c6:	2c00      	cmp	r4, #0
    46c8:	d00e      	beq.n	46e8 <_ZN7TwoWire15endTransmissionEb+0x62>
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    46ca:	692c      	ldr	r4, [r5, #16]
    46cc:	f7ff ffcb 	bl	4666 <_ZN11RingBufferNILi256EE9read_charEv>
    46d0:	b2c1      	uxtb	r1, r0
    46d2:	0020      	movs	r0, r4
    46d4:	f000 fe08 	bl	52e8 <_ZN6SERCOM18sendDataMasterWIREEh>
    46d8:	2800      	cmp	r0, #0
    46da:	d1e8      	bne.n	46ae <_ZN7TwoWire15endTransmissionEb+0x28>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    46dc:	2103      	movs	r1, #3
    46de:	6928      	ldr	r0, [r5, #16]
    46e0:	f000 fdba 	bl	5258 <_ZN6SERCOM22prepareCommandBitsWireEh>
      return 3 ;  // Nack or error
    46e4:	2403      	movs	r4, #3
    46e6:	e7e0      	b.n	46aa <_ZN7TwoWire15endTransmissionEb+0x24>
  if (stopBit)
    46e8:	2e00      	cmp	r6, #0
    46ea:	d0de      	beq.n	46aa <_ZN7TwoWire15endTransmissionEb+0x24>
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    46ec:	2103      	movs	r1, #3
    46ee:	6928      	ldr	r0, [r5, #16]
    46f0:	f000 fdb2 	bl	5258 <_ZN6SERCOM22prepareCommandBitsWireEh>
    46f4:	e7d9      	b.n	46aa <_ZN7TwoWire15endTransmissionEb+0x24>

000046f6 <_ZN7TwoWire15endTransmissionEv>:
{
    46f6:	b510      	push	{r4, lr}
  return endTransmission(true);
    46f8:	2101      	movs	r1, #1
    46fa:	f7ff ffc4 	bl	4686 <_ZN7TwoWire15endTransmissionEb>
}
    46fe:	bd10      	pop	{r4, pc}

00004700 <_ZN7TwoWire4readEv>:
{
    4700:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    4702:	3018      	adds	r0, #24
    4704:	f7ff ffaf 	bl	4666 <_ZN11RingBufferNILi256EE9read_charEv>
}
    4708:	bd10      	pop	{r4, pc}

0000470a <_ZN7TwoWire9onServiceEv>:
{
  onRequestCallback = function;
}

void TwoWire::onService(void)
{
    470a:	b570      	push	{r4, r5, r6, lr}
    470c:	0004      	movs	r4, r0
  if ( sercom->isSlaveWIRE() )
    470e:	6900      	ldr	r0, [r0, #16]
    4710:	f000 fe0a 	bl	5328 <_ZN6SERCOM11isSlaveWIREEv>
    4714:	2800      	cmp	r0, #0
    4716:	d028      	beq.n	476a <_ZN7TwoWire9onServiceEv+0x60>
  {
    if(sercom->isStopDetectedWIRE() || 
    4718:	6920      	ldr	r0, [r4, #16]
    471a:	f000 fe13 	bl	5344 <_ZN6SERCOM18isStopDetectedWIREEv>
    471e:	2800      	cmp	r0, #0
    4720:	d10e      	bne.n	4740 <_ZN7TwoWire9onServiceEv+0x36>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    4722:	6920      	ldr	r0, [r4, #16]
    4724:	f000 fe18 	bl	5358 <_ZN6SERCOM14isAddressMatchEv>
    if(sercom->isStopDetectedWIRE() || 
    4728:	2800      	cmp	r0, #0
    472a:	d055      	beq.n	47d8 <_ZN7TwoWire9onServiceEv+0xce>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    472c:	6920      	ldr	r0, [r4, #16]
    472e:	f000 fe0e 	bl	534e <_ZN6SERCOM21isRestartDetectedWIREEv>
    4732:	2800      	cmp	r0, #0
    4734:	d050      	beq.n	47d8 <_ZN7TwoWire9onServiceEv+0xce>
    4736:	6920      	ldr	r0, [r4, #16]
    4738:	f000 fe13 	bl	5362 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    473c:	2800      	cmp	r0, #0
    473e:	d14b      	bne.n	47d8 <_ZN7TwoWire9onServiceEv+0xce>
    {
      sercom->prepareAckBitWIRE();
    4740:	6920      	ldr	r0, [r4, #16]
    4742:	f000 fd7f 	bl	5244 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    4746:	2103      	movs	r1, #3
    4748:	6920      	ldr	r0, [r4, #16]
    474a:	f000 fd85 	bl	5258 <_ZN6SERCOM22prepareCommandBitsWireEh>

      //Calling onReceiveCallback, if exists
      if(onReceiveCallback)
    474e:	238c      	movs	r3, #140	; 0x8c
    4750:	009b      	lsls	r3, r3, #2
    4752:	58e5      	ldr	r5, [r4, r3]
    4754:	2d00      	cmp	r5, #0
    4756:	d004      	beq.n	4762 <_ZN7TwoWire9onServiceEv+0x58>
      {
        onReceiveCallback(available());
    4758:	6823      	ldr	r3, [r4, #0]
    475a:	0020      	movs	r0, r4
    475c:	691b      	ldr	r3, [r3, #16]
    475e:	4798      	blx	r3
    4760:	47a8      	blx	r5
  _iHead = 0;
    4762:	2300      	movs	r3, #0
    4764:	34fc      	adds	r4, #252	; 0xfc
    4766:	61e3      	str	r3, [r4, #28]
  _iTail = 0;
    4768:	6223      	str	r3, [r4, #32]

        sercom->prepareCommandBitsWire(0x03);
      }
    }
  }
}
    476a:	bd70      	pop	{r4, r5, r6, pc}
      sercom->prepareAckBitWIRE();
    476c:	6920      	ldr	r0, [r4, #16]
    476e:	f000 fd69 	bl	5244 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    4772:	6920      	ldr	r0, [r4, #16]
    4774:	2103      	movs	r1, #3
    4776:	f000 fd6f 	bl	5258 <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
    477a:	6920      	ldr	r0, [r4, #16]
    477c:	f000 fdf1 	bl	5362 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    4780:	2800      	cmp	r0, #0
    4782:	d0f2      	beq.n	476a <_ZN7TwoWire9onServiceEv+0x60>
  _iHead = 0;
    4784:	2387      	movs	r3, #135	; 0x87
    4786:	2200      	movs	r2, #0
    4788:	009b      	lsls	r3, r3, #2
    478a:	18e3      	adds	r3, r4, r3
    478c:	605a      	str	r2, [r3, #4]
  _iTail = 0;
    478e:	609a      	str	r2, [r3, #8]
        transmissionBegun = true;
    4790:	2301      	movs	r3, #1
    4792:	75a3      	strb	r3, [r4, #22]
        if(onRequestCallback)
    4794:	238b      	movs	r3, #139	; 0x8b
    4796:	009b      	lsls	r3, r3, #2
    4798:	58e3      	ldr	r3, [r4, r3]
    479a:	4293      	cmp	r3, r2
    479c:	d0e5      	beq.n	476a <_ZN7TwoWire9onServiceEv+0x60>
          onRequestCallback();
    479e:	4798      	blx	r3
    47a0:	e7e3      	b.n	476a <_ZN7TwoWire9onServiceEv+0x60>
  return (nextIndex(_iHead) == _iTail);
    47a2:	0022      	movs	r2, r4
    47a4:	32fc      	adds	r2, #252	; 0xfc
    47a6:	69d3      	ldr	r3, [r2, #28]
    47a8:	6a12      	ldr	r2, [r2, #32]
  return (uint32_t)(index + 1) % N;
    47aa:	3301      	adds	r3, #1
    47ac:	b2db      	uxtb	r3, r3
          sercom->prepareNackBitWIRE(); 
    47ae:	6920      	ldr	r0, [r4, #16]
        if (rxBuffer.isFull()) {
    47b0:	4293      	cmp	r3, r2
    47b2:	d106      	bne.n	47c2 <_ZN7TwoWire9onServiceEv+0xb8>
          sercom->prepareNackBitWIRE(); 
    47b4:	f000 fd3d 	bl	5232 <_ZN6SERCOM18prepareNackBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
    47b8:	2103      	movs	r1, #3
    47ba:	6920      	ldr	r0, [r4, #16]
    47bc:	f000 fd4c 	bl	5258 <_ZN6SERCOM22prepareCommandBitsWireEh>
}
    47c0:	e7d3      	b.n	476a <_ZN7TwoWire9onServiceEv+0x60>
          rxBuffer.store_char(sercom->readDataWIRE());
    47c2:	f000 fdd3 	bl	536c <_ZN6SERCOM12readDataWIREEv>
    47c6:	0001      	movs	r1, r0
    47c8:	0020      	movs	r0, r4
    47ca:	3018      	adds	r0, #24
    47cc:	f7ff fef3 	bl	45b6 <_ZN11RingBufferNILi256EE10store_charEh>
          sercom->prepareAckBitWIRE(); 
    47d0:	6920      	ldr	r0, [r4, #16]
    47d2:	f000 fd37 	bl	5244 <_ZN6SERCOM17prepareAckBitWIREEv>
    47d6:	e7ef      	b.n	47b8 <_ZN7TwoWire9onServiceEv+0xae>
    else if(sercom->isAddressMatch())  //Address Match
    47d8:	6920      	ldr	r0, [r4, #16]
    47da:	f000 fdbd 	bl	5358 <_ZN6SERCOM14isAddressMatchEv>
    47de:	2800      	cmp	r0, #0
    47e0:	d1c4      	bne.n	476c <_ZN7TwoWire9onServiceEv+0x62>
    else if(sercom->isDataReadyWIRE())
    47e2:	6920      	ldr	r0, [r4, #16]
    47e4:	f000 fda9 	bl	533a <_ZN6SERCOM15isDataReadyWIREEv>
    47e8:	2800      	cmp	r0, #0
    47ea:	d0be      	beq.n	476a <_ZN7TwoWire9onServiceEv+0x60>
      if (sercom->isMasterReadOperationWIRE())
    47ec:	6920      	ldr	r0, [r4, #16]
    47ee:	f000 fdb8 	bl	5362 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    47f2:	2800      	cmp	r0, #0
    47f4:	d0d5      	beq.n	47a2 <_ZN7TwoWire9onServiceEv+0x98>
  int delta = _iHead - _iTail;
    47f6:	2387      	movs	r3, #135	; 0x87
    47f8:	009b      	lsls	r3, r3, #2
    47fa:	18e2      	adds	r2, r4, r3
    47fc:	6853      	ldr	r3, [r2, #4]
    47fe:	6892      	ldr	r2, [r2, #8]
    4800:	1a9b      	subs	r3, r3, r2
  if(delta < 0)
    4802:	d501      	bpl.n	4808 <_ZN7TwoWire9onServiceEv+0xfe>
    return N + delta;
    4804:	3301      	adds	r3, #1
    4806:	33ff      	adds	r3, #255	; 0xff
        uint8_t c = 0xff;
    4808:	21ff      	movs	r1, #255	; 0xff
        if( txBuffer.available() ) {
    480a:	2b00      	cmp	r3, #0
    480c:	d005      	beq.n	481a <_ZN7TwoWire9onServiceEv+0x110>
    480e:	0020      	movs	r0, r4
    4810:	3021      	adds	r0, #33	; 0x21
    4812:	30ff      	adds	r0, #255	; 0xff
          c = txBuffer.read_char();
    4814:	f7ff ff27 	bl	4666 <_ZN11RingBufferNILi256EE9read_charEv>
    4818:	b2c1      	uxtb	r1, r0
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
    481a:	6920      	ldr	r0, [r4, #16]
    481c:	f000 fd76 	bl	530c <_ZN6SERCOM17sendDataSlaveWIREEh>
    4820:	75a0      	strb	r0, [r4, #22]
    4822:	e7a2      	b.n	476a <_ZN7TwoWire9onServiceEv+0x60>

00004824 <SERCOM3_Handler>:
    #define PERIPH_WIRE          sercom3
    #define WIRE_IT_HANDLER      SERCOM3_Handler
  #endif // PERIPH_WIRE
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);

  void WIRE_IT_HANDLER(void) {
    4824:	b510      	push	{r4, lr}
    Wire.onService();
    4826:	4802      	ldr	r0, [pc, #8]	; (4830 <SERCOM3_Handler+0xc>)
    4828:	f7ff ff6f 	bl	470a <_ZN7TwoWire9onServiceEv>
  }
    482c:	bd10      	pop	{r4, pc}
    482e:	46c0      	nop			; (mov r8, r8)
    4830:	20000a1c 	.word	0x20000a1c

00004834 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
    4834:	b510      	push	{r4, lr}
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
    4836:	2311      	movs	r3, #17
    4838:	2210      	movs	r2, #16
    483a:	4902      	ldr	r1, [pc, #8]	; (4844 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x10>)
    483c:	4802      	ldr	r0, [pc, #8]	; (4848 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
    483e:	f7ff fe5f 	bl	4500 <_ZN7TwoWireC1EP6SERCOMhh>
  }
    4842:	bd10      	pop	{r4, pc}
    4844:	20000dd4 	.word	0x20000dd4
    4848:	20000a1c 	.word	0x20000a1c

0000484c <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    484c:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    484e:	4802      	ldr	r0, [pc, #8]	; (4858 <SERCOM0_Handler+0xc>)
    4850:	f7fc fb9a 	bl	f88 <_ZN4Uart10IrqHandlerEv>
}
    4854:	bd10      	pop	{r4, pc}
    4856:	46c0      	nop			; (mov r8, r8)
    4858:	20000d0c 	.word	0x20000d0c

0000485c <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    485c:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    485e:	4802      	ldr	r0, [pc, #8]	; (4868 <SERCOM5_Handler+0xc>)
    4860:	f7fc fb92 	bl	f88 <_ZN4Uart10IrqHandlerEv>
}
    4864:	bd10      	pop	{r4, pc}
    4866:	46c0      	nop			; (mov r8, r8)
    4868:	20000c50 	.word	0x20000c50

0000486c <_GLOBAL__sub_I_g_APinDescription>:
    486c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    486e:	2401      	movs	r4, #1
    4870:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    4872:	4f15      	ldr	r7, [pc, #84]	; (48c8 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    4874:	4915      	ldr	r1, [pc, #84]	; (48cc <_GLOBAL__sub_I_g_APinDescription+0x60>)
    4876:	0038      	movs	r0, r7
    4878:	f000 fc03 	bl	5082 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    487c:	4914      	ldr	r1, [pc, #80]	; (48d0 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    487e:	4815      	ldr	r0, [pc, #84]	; (48d4 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    4880:	f000 fbff 	bl	5082 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    4884:	4914      	ldr	r1, [pc, #80]	; (48d8 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    4886:	4815      	ldr	r0, [pc, #84]	; (48dc <_GLOBAL__sub_I_g_APinDescription+0x70>)
    4888:	f000 fbfb 	bl	5082 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    488c:	4914      	ldr	r1, [pc, #80]	; (48e0 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    488e:	4815      	ldr	r0, [pc, #84]	; (48e4 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    4890:	f000 fbf7 	bl	5082 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    4894:	4914      	ldr	r1, [pc, #80]	; (48e8 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    4896:	4815      	ldr	r0, [pc, #84]	; (48ec <_GLOBAL__sub_I_g_APinDescription+0x80>)
    4898:	f000 fbf3 	bl	5082 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    489c:	4d14      	ldr	r5, [pc, #80]	; (48f0 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    489e:	4915      	ldr	r1, [pc, #84]	; (48f4 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    48a0:	0028      	movs	r0, r5
    48a2:	f000 fbee 	bl	5082 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    48a6:	0039      	movs	r1, r7
    48a8:	9600      	str	r6, [sp, #0]
    48aa:	0023      	movs	r3, r4
    48ac:	9401      	str	r4, [sp, #4]
    48ae:	2200      	movs	r2, #0
    48b0:	4811      	ldr	r0, [pc, #68]	; (48f8 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    48b2:	f7fc fb11 	bl	ed8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    48b6:	9600      	str	r6, [sp, #0]
    48b8:	0029      	movs	r1, r5
    48ba:	9401      	str	r4, [sp, #4]
    48bc:	2323      	movs	r3, #35	; 0x23
    48be:	2224      	movs	r2, #36	; 0x24
    48c0:	480e      	ldr	r0, [pc, #56]	; (48fc <_GLOBAL__sub_I_g_APinDescription+0x90>)
    48c2:	f7fc fb09 	bl	ed8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    48c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    48c8:	20000dc8 	.word	0x20000dc8
    48cc:	42000800 	.word	0x42000800
    48d0:	42000c00 	.word	0x42000c00
    48d4:	20000dcc 	.word	0x20000dcc
    48d8:	42001000 	.word	0x42001000
    48dc:	20000dd0 	.word	0x20000dd0
    48e0:	42001400 	.word	0x42001400
    48e4:	20000dd4 	.word	0x20000dd4
    48e8:	42001800 	.word	0x42001800
    48ec:	20000dd8 	.word	0x20000dd8
    48f0:	20000ddc 	.word	0x20000ddc
    48f4:	42001c00 	.word	0x42001c00
    48f8:	20000d0c 	.word	0x20000d0c
    48fc:	20000c50 	.word	0x20000c50

00004900 <_ZN12Adafruit_GFX9writeLineEsssst>:
    gfxFont   = NULL;
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    4900:	b5f0      	push	{r4, r5, r6, r7, lr}
    4902:	0015      	movs	r5, r2
    4904:	000c      	movs	r4, r1
    4906:	001e      	movs	r6, r3
    4908:	b089      	sub	sp, #36	; 0x24
    490a:	ab0e      	add	r3, sp, #56	; 0x38
    490c:	2200      	movs	r2, #0
    490e:	5e9b      	ldrsh	r3, [r3, r2]
    4910:	aa0f      	add	r2, sp, #60	; 0x3c
    4912:	8812      	ldrh	r2, [r2, #0]
    4914:	9001      	str	r0, [sp, #4]
    4916:	9205      	str	r2, [sp, #20]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    4918:	1b5a      	subs	r2, r3, r5
    491a:	17d1      	asrs	r1, r2, #31
    491c:	1852      	adds	r2, r2, r1
    491e:	404a      	eors	r2, r1
    4920:	9202      	str	r2, [sp, #8]
    4922:	1b32      	subs	r2, r6, r4
    4924:	17d1      	asrs	r1, r2, #31
    4926:	1852      	adds	r2, r2, r1
    4928:	404a      	eors	r2, r1
    492a:	9203      	str	r2, [sp, #12]
    if (steep) {
    492c:	9903      	ldr	r1, [sp, #12]
    492e:	9a02      	ldr	r2, [sp, #8]
    4930:	428a      	cmp	r2, r1
    4932:	dd05      	ble.n	4940 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
    4934:	0032      	movs	r2, r6
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
    4936:	001e      	movs	r6, r3
    4938:	0013      	movs	r3, r2
    if (steep) {
    493a:	0022      	movs	r2, r4
        _swap_int16_t(x0, y0);
    493c:	002c      	movs	r4, r5
    493e:	0015      	movs	r5, r2
    }

    if (x0 > x1) {
    4940:	42b4      	cmp	r4, r6
    4942:	dd05      	ble.n	4950 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
    4944:	002a      	movs	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    4946:	001d      	movs	r5, r3
    4948:	0013      	movs	r3, r2
    if (x0 > x1) {
    494a:	0022      	movs	r2, r4
    494c:	0034      	movs	r4, r6
    494e:	0016      	movs	r6, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
    4950:	1b32      	subs	r2, r6, r4
    4952:	b292      	uxth	r2, r2
    4954:	9204      	str	r2, [sp, #16]
    dy = abs(y1 - y0);
    4956:	1b5a      	subs	r2, r3, r5
    4958:	17d1      	asrs	r1, r2, #31
    495a:	1852      	adds	r2, r2, r1
    495c:	404a      	eors	r2, r1
    495e:	9207      	str	r2, [sp, #28]

    int16_t err = dx / 2;
    4960:	466a      	mov	r2, sp
    4962:	2110      	movs	r1, #16
    4964:	5e51      	ldrsh	r1, [r2, r1]
    4966:	0fca      	lsrs	r2, r1, #31
    4968:	1852      	adds	r2, r2, r1
    496a:	1052      	asrs	r2, r2, #1
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
    496c:	0fd9      	lsrs	r1, r3, #31
    int16_t err = dx / 2;
    496e:	9200      	str	r2, [sp, #0]
        ystep = -1;
    4970:	17ea      	asrs	r2, r5, #31
    4972:	429d      	cmp	r5, r3
    4974:	414a      	adcs	r2, r1
    4976:	2301      	movs	r3, #1
    4978:	4252      	negs	r2, r2
    497a:	4313      	orrs	r3, r2
    497c:	9306      	str	r3, [sp, #24]
    }

    for (; x0<=x1; x0++) {
    497e:	42b4      	cmp	r4, r6
    4980:	dc21      	bgt.n	49c6 <_ZN12Adafruit_GFX9writeLineEsssst+0xc6>
    4982:	9b01      	ldr	r3, [sp, #4]
        if (steep) {
    4984:	9a02      	ldr	r2, [sp, #8]
    4986:	681b      	ldr	r3, [r3, #0]
    4988:	9903      	ldr	r1, [sp, #12]
            writePixel(y0, x0, color);
    498a:	699b      	ldr	r3, [r3, #24]
    498c:	001f      	movs	r7, r3
    498e:	9b05      	ldr	r3, [sp, #20]
        if (steep) {
    4990:	428a      	cmp	r2, r1
    4992:	dd15      	ble.n	49c0 <_ZN12Adafruit_GFX9writeLineEsssst+0xc0>
            writePixel(y0, x0, color);
    4994:	0022      	movs	r2, r4
    4996:	0029      	movs	r1, r5
        } else {
            writePixel(x0, y0, color);
    4998:	9801      	ldr	r0, [sp, #4]
    499a:	47b8      	blx	r7
        }
        err -= dy;
    499c:	9a00      	ldr	r2, [sp, #0]
    499e:	9b07      	ldr	r3, [sp, #28]
    49a0:	1ad3      	subs	r3, r2, r3
    49a2:	b29b      	uxth	r3, r3
    49a4:	b21a      	sxth	r2, r3
    49a6:	9200      	str	r2, [sp, #0]
        if (err < 0) {
    49a8:	2a00      	cmp	r2, #0
    49aa:	da06      	bge.n	49ba <_ZN12Adafruit_GFX9writeLineEsssst+0xba>
            y0 += ystep;
    49ac:	9a06      	ldr	r2, [sp, #24]
    49ae:	18ad      	adds	r5, r5, r2
            err += dx;
    49b0:	9a04      	ldr	r2, [sp, #16]
            y0 += ystep;
    49b2:	b22d      	sxth	r5, r5
            err += dx;
    49b4:	18d3      	adds	r3, r2, r3
    49b6:	b21b      	sxth	r3, r3
    49b8:	9300      	str	r3, [sp, #0]
    49ba:	3401      	adds	r4, #1
    49bc:	b224      	sxth	r4, r4
    for (; x0<=x1; x0++) {
    49be:	e7de      	b.n	497e <_ZN12Adafruit_GFX9writeLineEsssst+0x7e>
            writePixel(x0, y0, color);
    49c0:	002a      	movs	r2, r5
    49c2:	0021      	movs	r1, r4
    49c4:	e7e8      	b.n	4998 <_ZN12Adafruit_GFX9writeLineEsssst+0x98>
        }
    }
}
    49c6:	b009      	add	sp, #36	; 0x24
    49c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000049ca <_ZN12Adafruit_GFX10writePixelEsst>:

void Adafruit_GFX::startWrite(){
    // Overwrite in subclasses if desired!
}

void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    49ca:	b510      	push	{r4, lr}
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    49cc:	6804      	ldr	r4, [r0, #0]
    49ce:	6924      	ldr	r4, [r4, #16]
    49d0:	47a0      	blx	r4
}
    49d2:	bd10      	pop	{r4, pc}

000049d4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:

// (x,y) is topmost point; if unsure, calling function
// should sort endpoints or call writeLine() instead
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    49d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    49d6:	ac06      	add	r4, sp, #24
    49d8:	8825      	ldrh	r5, [r4, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    49da:	6804      	ldr	r4, [r0, #0]
    49dc:	9500      	str	r5, [sp, #0]
    49de:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    49e0:	47a0      	blx	r4
}
    49e2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

000049e4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:

// (x,y) is leftmost point; if unsure, calling function
// should sort endpoints or call writeLine() instead
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    49e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    49e6:	ac06      	add	r4, sp, #24
    49e8:	8825      	ldrh	r5, [r4, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    49ea:	6804      	ldr	r4, [r0, #0]
    49ec:	9500      	str	r5, [sp, #0]
    49ee:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    49f0:	47a0      	blx	r4
}
    49f2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

000049f4 <_ZN12Adafruit_GFX13writeFillRectEsssst>:

void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    49f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    49f6:	ac06      	add	r4, sp, #24
    49f8:	2500      	movs	r5, #0
    49fa:	5f65      	ldrsh	r5, [r4, r5]
    49fc:	ac07      	add	r4, sp, #28
    49fe:	8826      	ldrh	r6, [r4, #0]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    4a00:	6804      	ldr	r4, [r0, #0]
    4a02:	9601      	str	r6, [sp, #4]
    4a04:	9500      	str	r5, [sp, #0]
    4a06:	6c24      	ldr	r4, [r4, #64]	; 0x40
    4a08:	47a0      	blx	r4
}
    4a0a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

00004a0c <_ZN12Adafruit_GFX10startWriteEv>:

void Adafruit_GFX::endWrite(){
    // Overwrite in subclasses if startWrite is defined!
}
    4a0c:	4770      	bx	lr

00004a0e <_ZN12Adafruit_GFX13drawFastVLineEssst>:

// (x,y) is topmost point; if unsure, calling function
// should sort endpoints or call drawLine() instead
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    4a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a10:	0016      	movs	r6, r2
    4a12:	0004      	movs	r4, r0
    4a14:	000d      	movs	r5, r1
    4a16:	b085      	sub	sp, #20
    4a18:	9303      	str	r3, [sp, #12]
    4a1a:	ab0a      	add	r3, sp, #40	; 0x28
    4a1c:	881f      	ldrh	r7, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    4a1e:	6803      	ldr	r3, [r0, #0]
    4a20:	695b      	ldr	r3, [r3, #20]
    4a22:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
    4a24:	9b03      	ldr	r3, [sp, #12]
    4a26:	6822      	ldr	r2, [r4, #0]
    4a28:	3b01      	subs	r3, #1
    4a2a:	199b      	adds	r3, r3, r6
    4a2c:	b21b      	sxth	r3, r3
    4a2e:	9300      	str	r3, [sp, #0]
    4a30:	9701      	str	r7, [sp, #4]
    4a32:	6a97      	ldr	r7, [r2, #40]	; 0x28
    4a34:	002b      	movs	r3, r5
    4a36:	0032      	movs	r2, r6
    4a38:	0029      	movs	r1, r5
    4a3a:	0020      	movs	r0, r4
    4a3c:	47b8      	blx	r7
    endWrite();
    4a3e:	6823      	ldr	r3, [r4, #0]
    4a40:	0020      	movs	r0, r4
    4a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a44:	4798      	blx	r3
}
    4a46:	b005      	add	sp, #20
    4a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004a4a <_ZN12Adafruit_GFX13drawFastHLineEssst>:

// (x,y) is leftmost point; if unsure, calling function
// should sort endpoints or call drawLine() instead
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    4a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a4c:	0005      	movs	r5, r0
    4a4e:	001c      	movs	r4, r3
    4a50:	000e      	movs	r6, r1
    4a52:	0017      	movs	r7, r2
    4a54:	b085      	sub	sp, #20
    4a56:	ab0a      	add	r3, sp, #40	; 0x28
    4a58:	881b      	ldrh	r3, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    writeLine(x, y, x+w-1, y, color);
    4a5a:	3c01      	subs	r4, #1
        int16_t w, uint16_t color) {
    4a5c:	9303      	str	r3, [sp, #12]
    startWrite();
    4a5e:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x+w-1, y, color);
    4a60:	19a4      	adds	r4, r4, r6
    startWrite();
    4a62:	695b      	ldr	r3, [r3, #20]
    4a64:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
    4a66:	9903      	ldr	r1, [sp, #12]
    4a68:	682a      	ldr	r2, [r5, #0]
    4a6a:	9101      	str	r1, [sp, #4]
    4a6c:	9700      	str	r7, [sp, #0]
    4a6e:	b223      	sxth	r3, r4
    4a70:	0031      	movs	r1, r6
    4a72:	6a94      	ldr	r4, [r2, #40]	; 0x28
    4a74:	0028      	movs	r0, r5
    4a76:	003a      	movs	r2, r7
    4a78:	47a0      	blx	r4
    endWrite();
    4a7a:	682b      	ldr	r3, [r5, #0]
    4a7c:	0028      	movs	r0, r5
    4a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a80:	4798      	blx	r3
}
    4a82:	b005      	add	sp, #20
    4a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004a86 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    4a86:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a88:	000e      	movs	r6, r1
    4a8a:	b087      	sub	sp, #28
    4a8c:	9303      	str	r3, [sp, #12]
    4a8e:	ab0c      	add	r3, sp, #48	; 0x30
    4a90:	9202      	str	r2, [sp, #8]
    4a92:	2200      	movs	r2, #0
    4a94:	5e9b      	ldrsh	r3, [r3, r2]
    4a96:	0005      	movs	r5, r0
    4a98:	9304      	str	r3, [sp, #16]
    4a9a:	ab0d      	add	r3, sp, #52	; 0x34
    4a9c:	881b      	ldrh	r3, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
    4a9e:	0034      	movs	r4, r6
        uint16_t color) {
    4aa0:	9305      	str	r3, [sp, #20]
    startWrite();
    4aa2:	6803      	ldr	r3, [r0, #0]
    4aa4:	695b      	ldr	r3, [r3, #20]
    4aa6:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
    4aa8:	9b03      	ldr	r3, [sp, #12]
    4aaa:	682a      	ldr	r2, [r5, #0]
    4aac:	18f3      	adds	r3, r6, r3
    4aae:	429c      	cmp	r4, r3
    4ab0:	da0a      	bge.n	4ac8 <_ZN12Adafruit_GFX8fillRectEsssst+0x42>
        writeFastVLine(i, y, h, color);
    4ab2:	9b05      	ldr	r3, [sp, #20]
    4ab4:	0021      	movs	r1, r4
    4ab6:	9300      	str	r3, [sp, #0]
    4ab8:	6a17      	ldr	r7, [r2, #32]
    4aba:	9b04      	ldr	r3, [sp, #16]
    4abc:	9a02      	ldr	r2, [sp, #8]
    4abe:	0028      	movs	r0, r5
    4ac0:	3401      	adds	r4, #1
    4ac2:	47b8      	blx	r7
    4ac4:	b224      	sxth	r4, r4
    for (int16_t i=x; i<x+w; i++) {
    4ac6:	e7ef      	b.n	4aa8 <_ZN12Adafruit_GFX8fillRectEsssst+0x22>
    }
    endWrite();
    4ac8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4aca:	0028      	movs	r0, r5
    4acc:	4798      	blx	r3
}
    4ace:	b007      	add	sp, #28
    4ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004ad2 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
    4ad2:	b513      	push	{r0, r1, r4, lr}
    // Update in subclasses if desired!
    fillRect(0, 0, _width, _height, color);
    4ad4:	9101      	str	r1, [sp, #4]
    4ad6:	240e      	movs	r4, #14
    4ad8:	5f01      	ldrsh	r1, [r0, r4]
    4ada:	220c      	movs	r2, #12
    4adc:	5e83      	ldrsh	r3, [r0, r2]
    4ade:	6802      	ldr	r2, [r0, #0]
    4ae0:	9100      	str	r1, [sp, #0]
    4ae2:	6c14      	ldr	r4, [r2, #64]	; 0x40
    4ae4:	2200      	movs	r2, #0
    4ae6:	0011      	movs	r1, r2
    4ae8:	47a0      	blx	r4
}
    4aea:	bd13      	pop	{r0, r1, r4, pc}

00004aec <_ZN12Adafruit_GFX8drawLineEsssst>:

void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    4aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aee:	b085      	sub	sp, #20
    4af0:	9302      	str	r3, [sp, #8]
    4af2:	ab0a      	add	r3, sp, #40	; 0x28
    4af4:	2400      	movs	r4, #0
    4af6:	5f1c      	ldrsh	r4, [r3, r4]
    4af8:	ab0b      	add	r3, sp, #44	; 0x2c
    4afa:	881b      	ldrh	r3, [r3, #0]
    4afc:	0017      	movs	r7, r2
    4afe:	9303      	str	r3, [sp, #12]
    // Update in subclasses if desired!
    if(x0 == x1){
    4b00:	9b02      	ldr	r3, [sp, #8]
        uint16_t color) {
    4b02:	0005      	movs	r5, r0
    4b04:	000e      	movs	r6, r1
    4b06:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
    4b08:	4299      	cmp	r1, r3
    4b0a:	d110      	bne.n	4b2e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
    4b0c:	42a7      	cmp	r7, r4
    4b0e:	dd02      	ble.n	4b16 <_ZN12Adafruit_GFX8drawLineEsssst+0x2a>
    4b10:	003b      	movs	r3, r7
    4b12:	0027      	movs	r7, r4
    4b14:	001c      	movs	r4, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    4b16:	9903      	ldr	r1, [sp, #12]
    4b18:	3401      	adds	r4, #1
    4b1a:	9100      	str	r1, [sp, #0]
    4b1c:	1be3      	subs	r3, r4, r7
    4b1e:	6b94      	ldr	r4, [r2, #56]	; 0x38
    4b20:	b21b      	sxth	r3, r3
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    4b22:	003a      	movs	r2, r7
    4b24:	0031      	movs	r1, r6
    4b26:	0028      	movs	r0, r5
    4b28:	47a0      	blx	r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
    4b2a:	b005      	add	sp, #20
    4b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if(y0 == y1){
    4b2e:	42a7      	cmp	r7, r4
    4b30:	d10c      	bne.n	4b4c <_ZN12Adafruit_GFX8drawLineEsssst+0x60>
        if(x0 > x1) _swap_int16_t(x0, x1);
    4b32:	9b02      	ldr	r3, [sp, #8]
    4b34:	4299      	cmp	r1, r3
    4b36:	dd01      	ble.n	4b3c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
    4b38:	9e02      	ldr	r6, [sp, #8]
    4b3a:	9102      	str	r1, [sp, #8]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    4b3c:	9b02      	ldr	r3, [sp, #8]
    4b3e:	9903      	ldr	r1, [sp, #12]
    4b40:	3301      	adds	r3, #1
    4b42:	1b9b      	subs	r3, r3, r6
    4b44:	9100      	str	r1, [sp, #0]
    4b46:	b21b      	sxth	r3, r3
    4b48:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
    4b4a:	e7ea      	b.n	4b22 <_ZN12Adafruit_GFX8drawLineEsssst+0x36>
        startWrite();
    4b4c:	6953      	ldr	r3, [r2, #20]
    4b4e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
    4b50:	9a03      	ldr	r2, [sp, #12]
    4b52:	682b      	ldr	r3, [r5, #0]
    4b54:	9201      	str	r2, [sp, #4]
    4b56:	9400      	str	r4, [sp, #0]
    4b58:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    4b5a:	0028      	movs	r0, r5
    4b5c:	9b02      	ldr	r3, [sp, #8]
    4b5e:	003a      	movs	r2, r7
    4b60:	0031      	movs	r1, r6
    4b62:	47a0      	blx	r4
        endWrite();
    4b64:	682b      	ldr	r3, [r5, #0]
    4b66:	0028      	movs	r0, r5
    4b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b6a:	4798      	blx	r3
}
    4b6c:	e7dd      	b.n	4b2a <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>

00004b6e <_ZN12Adafruit_GFX8drawRectEsssst>:
    }
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    4b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b70:	0004      	movs	r4, r0
    4b72:	0015      	movs	r5, r2
    4b74:	000e      	movs	r6, r1
    4b76:	b087      	sub	sp, #28
    4b78:	9304      	str	r3, [sp, #16]
    4b7a:	ab0c      	add	r3, sp, #48	; 0x30
    4b7c:	2200      	movs	r2, #0
    4b7e:	5e9b      	ldrsh	r3, [r3, r2]
    4b80:	9305      	str	r3, [sp, #20]
    4b82:	ab0d      	add	r3, sp, #52	; 0x34
    4b84:	881b      	ldrh	r3, [r3, #0]
    4b86:	9303      	str	r3, [sp, #12]
    startWrite();
    4b88:	6803      	ldr	r3, [r0, #0]
    4b8a:	695b      	ldr	r3, [r3, #20]
    4b8c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
    4b8e:	9a03      	ldr	r2, [sp, #12]
    4b90:	6823      	ldr	r3, [r4, #0]
    4b92:	9200      	str	r2, [sp, #0]
    4b94:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    4b96:	002a      	movs	r2, r5
    4b98:	9b04      	ldr	r3, [sp, #16]
    4b9a:	0031      	movs	r1, r6
    4b9c:	0020      	movs	r0, r4
    4b9e:	47b8      	blx	r7
    writeFastHLine(x, y+h-1, w, color);
    4ba0:	9b05      	ldr	r3, [sp, #20]
    4ba2:	9903      	ldr	r1, [sp, #12]
    4ba4:	1e5a      	subs	r2, r3, #1
    4ba6:	6823      	ldr	r3, [r4, #0]
    4ba8:	9100      	str	r1, [sp, #0]
    4baa:	1952      	adds	r2, r2, r5
    4bac:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    4bae:	0031      	movs	r1, r6
    4bb0:	9b04      	ldr	r3, [sp, #16]
    4bb2:	0020      	movs	r0, r4
    4bb4:	b212      	sxth	r2, r2
    4bb6:	47b8      	blx	r7
    writeFastVLine(x, y, h, color);
    4bb8:	9a03      	ldr	r2, [sp, #12]
    4bba:	6823      	ldr	r3, [r4, #0]
    4bbc:	9200      	str	r2, [sp, #0]
    4bbe:	6a1f      	ldr	r7, [r3, #32]
    4bc0:	002a      	movs	r2, r5
    4bc2:	9b05      	ldr	r3, [sp, #20]
    4bc4:	0031      	movs	r1, r6
    4bc6:	0020      	movs	r0, r4
    4bc8:	47b8      	blx	r7
    writeFastVLine(x+w-1, y, h, color);
    4bca:	9904      	ldr	r1, [sp, #16]
    4bcc:	9a03      	ldr	r2, [sp, #12]
    4bce:	6823      	ldr	r3, [r4, #0]
    4bd0:	3901      	subs	r1, #1
    4bd2:	9200      	str	r2, [sp, #0]
    4bd4:	1989      	adds	r1, r1, r6
    4bd6:	b209      	sxth	r1, r1
    4bd8:	6a1f      	ldr	r7, [r3, #32]
    4bda:	002a      	movs	r2, r5
    4bdc:	9b05      	ldr	r3, [sp, #20]
    4bde:	0020      	movs	r0, r4
    4be0:	47b8      	blx	r7
    endWrite();
    4be2:	6823      	ldr	r3, [r4, #0]
    4be4:	0020      	movs	r0, r4
    4be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4be8:	4798      	blx	r3
}
    4bea:	b007      	add	sp, #28
    4bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004bee <_ZN12Adafruit_GFX13invertDisplayEb>:
    return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
    4bee:	4770      	bx	lr

00004bf0 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
    4bf0:	2303      	movs	r3, #3
    4bf2:	4019      	ands	r1, r3
    4bf4:	7641      	strb	r1, [r0, #25]
    4bf6:	8903      	ldrh	r3, [r0, #8]
    4bf8:	8942      	ldrh	r2, [r0, #10]
    switch(rotation) {
    4bfa:	2901      	cmp	r1, #1
    4bfc:	d004      	beq.n	4c08 <_ZN12Adafruit_GFX11setRotationEh+0x18>
    4bfe:	2903      	cmp	r1, #3
    4c00:	d002      	beq.n	4c08 <_ZN12Adafruit_GFX11setRotationEh+0x18>
            _width  = WIDTH;
    4c02:	8183      	strh	r3, [r0, #12]
            _height = HEIGHT;
    4c04:	81c2      	strh	r2, [r0, #14]
}
    4c06:	4770      	bx	lr
            _width  = HEIGHT;
    4c08:	8182      	strh	r2, [r0, #12]
            _height = WIDTH;
    4c0a:	81c3      	strh	r3, [r0, #14]
}
    4c0c:	e7fb      	b.n	4c06 <_ZN12Adafruit_GFX11setRotationEh+0x16>
	...

00004c10 <_ZN12Adafruit_GFXC1Ess>:
WIDTH(w), HEIGHT(h)
    4c10:	8101      	strh	r1, [r0, #8]
    _width    = WIDTH;
    4c12:	8181      	strh	r1, [r0, #12]
    textcolor = textbgcolor = 0xFFFF;
    4c14:	2101      	movs	r1, #1
    4c16:	2300      	movs	r3, #0
WIDTH(w), HEIGHT(h)
    4c18:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
    4c1a:	81c2      	strh	r2, [r0, #14]
    textsize  = 1;
    4c1c:	2201      	movs	r2, #1
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
    4c1e:	b510      	push	{r4, lr}
WIDTH(w), HEIGHT(h)
    4c20:	4c07      	ldr	r4, [pc, #28]	; (4c40 <_ZN12Adafruit_GFXC1Ess+0x30>)
    textcolor = textbgcolor = 0xFFFF;
    4c22:	4249      	negs	r1, r1
WIDTH(w), HEIGHT(h)
    4c24:	3408      	adds	r4, #8
    4c26:	6043      	str	r3, [r0, #4]
    4c28:	6004      	str	r4, [r0, #0]
    rotation  = 0;
    4c2a:	7643      	strb	r3, [r0, #25]
    cursor_y  = cursor_x    = 0;
    4c2c:	8203      	strh	r3, [r0, #16]
    4c2e:	8243      	strh	r3, [r0, #18]
    textsize  = 1;
    4c30:	7602      	strb	r2, [r0, #24]
    textcolor = textbgcolor = 0xFFFF;
    4c32:	82c1      	strh	r1, [r0, #22]
    4c34:	8281      	strh	r1, [r0, #20]
    wrap      = true;
    4c36:	7682      	strb	r2, [r0, #26]
    _cp437    = false;
    4c38:	76c3      	strb	r3, [r0, #27]
    gfxFont   = NULL;
    4c3a:	61c3      	str	r3, [r0, #28]
}
    4c3c:	bd10      	pop	{r4, pc}
    4c3e:	46c0      	nop			; (mov r8, r8)
    4c40:	00006990 	.word	0x00006990

00004c44 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  uint16_t color, uint16_t bg, uint8_t size) {
    4c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c46:	b095      	sub	sp, #84	; 0x54
    4c48:	001d      	movs	r5, r3
    4c4a:	ab1a      	add	r3, sp, #104	; 0x68
    4c4c:	881b      	ldrh	r3, [r3, #0]
    4c4e:	0004      	movs	r4, r0
    4c50:	9304      	str	r3, [sp, #16]
    4c52:	ab1b      	add	r3, sp, #108	; 0x6c
    4c54:	881b      	ldrh	r3, [r3, #0]
    4c56:	9108      	str	r1, [sp, #32]
    4c58:	9305      	str	r3, [sp, #20]
    4c5a:	ab1c      	add	r3, sp, #112	; 0x70
    4c5c:	781f      	ldrb	r7, [r3, #0]
    if(!gfxFont) { // 'Classic' built-in font
    4c5e:	69c3      	ldr	r3, [r0, #28]
  uint16_t color, uint16_t bg, uint8_t size) {
    4c60:	9203      	str	r2, [sp, #12]
    if(!gfxFont) { // 'Classic' built-in font
    4c62:	2b00      	cmp	r3, #0
    4c64:	d000      	beq.n	4c68 <_ZN12Adafruit_GFX8drawCharEsshtth+0x24>
    4c66:	e0bd      	b.n	4de4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1a0>
        if((x >= _width)            || // Clip right
    4c68:	220c      	movs	r2, #12
    4c6a:	5e83      	ldrsh	r3, [r0, r2]
    4c6c:	428b      	cmp	r3, r1
    4c6e:	dc00      	bgt.n	4c72 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
    4c70:	e082      	b.n	4d78 <_ZN12Adafruit_GFX8drawCharEsshtth+0x134>
    4c72:	220e      	movs	r2, #14
    4c74:	5e83      	ldrsh	r3, [r0, r2]
    4c76:	9a03      	ldr	r2, [sp, #12]
    4c78:	4293      	cmp	r3, r2
    4c7a:	dc00      	bgt.n	4c7e <_ZN12Adafruit_GFX8drawCharEsshtth+0x3a>
    4c7c:	e07c      	b.n	4d78 <_ZN12Adafruit_GFX8drawCharEsshtth+0x134>
           ((x + 6 * size - 1) < 0) || // Clip left
    4c7e:	2306      	movs	r3, #6
    4c80:	437b      	muls	r3, r7
    4c82:	185b      	adds	r3, r3, r1
           (y >= _height)           || // Clip bottom
    4c84:	2b00      	cmp	r3, #0
    4c86:	dd77      	ble.n	4d78 <_ZN12Adafruit_GFX8drawCharEsshtth+0x134>
           ((y + 8 * size - 1) < 0))   // Clip top
    4c88:	9a03      	ldr	r2, [sp, #12]
    4c8a:	00fb      	lsls	r3, r7, #3
    4c8c:	189b      	adds	r3, r3, r2
           ((x + 6 * size - 1) < 0) || // Clip left
    4c8e:	2b00      	cmp	r3, #0
    4c90:	dd72      	ble.n	4d78 <_ZN12Adafruit_GFX8drawCharEsshtth+0x134>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
    4c92:	7ec3      	ldrb	r3, [r0, #27]
    4c94:	2b00      	cmp	r3, #0
    4c96:	d103      	bne.n	4ca0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5c>
    4c98:	2daf      	cmp	r5, #175	; 0xaf
    4c9a:	dd01      	ble.n	4ca0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5c>
    4c9c:	3501      	adds	r5, #1
    4c9e:	b2ed      	uxtb	r5, r5
        startWrite();
    4ca0:	6823      	ldr	r3, [r4, #0]
    4ca2:	0020      	movs	r0, r4
    4ca4:	695b      	ldr	r3, [r3, #20]
    4ca6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    4ca8:	2305      	movs	r3, #5
    4caa:	435d      	muls	r5, r3
    4cac:	930e      	str	r3, [sp, #56]	; 0x38
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    4cae:	2300      	movs	r3, #0
    4cb0:	930a      	str	r3, [sp, #40]	; 0x28
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    4cb2:	4b8e      	ldr	r3, [pc, #568]	; (4eec <_ZN12Adafruit_GFX8drawCharEsshtth+0x2a8>)
    4cb4:	195b      	adds	r3, r3, r5
    4cb6:	9311      	str	r3, [sp, #68]	; 0x44
    4cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4cba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4cbc:	5c9b      	ldrb	r3, [r3, r2]
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    4cbe:	b2ba      	uxth	r2, r7
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    4cc0:	930c      	str	r3, [sp, #48]	; 0x30
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    4cc2:	466b      	mov	r3, sp
    4cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4cc6:	930b      	str	r3, [sp, #44]	; 0x2c
    4cc8:	b2bb      	uxth	r3, r7
    4cca:	9309      	str	r3, [sp, #36]	; 0x24
    4ccc:	466b      	mov	r3, sp
    4cce:	8c1b      	ldrh	r3, [r3, #32]
    4cd0:	9306      	str	r3, [sp, #24]
    4cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4cd4:	4353      	muls	r3, r2
    4cd6:	9a06      	ldr	r2, [sp, #24]
    4cd8:	18d3      	adds	r3, r2, r3
    4cda:	b21b      	sxth	r3, r3
    4cdc:	930f      	str	r3, [sp, #60]	; 0x3c
    4cde:	466b      	mov	r3, sp
    4ce0:	899d      	ldrh	r5, [r3, #12]
    4ce2:	002b      	movs	r3, r5
    4ce4:	3308      	adds	r3, #8
    4ce6:	b29b      	uxth	r3, r3
    4ce8:	9310      	str	r3, [sp, #64]	; 0x40
    4cea:	9507      	str	r5, [sp, #28]
    4cec:	950d      	str	r5, [sp, #52]	; 0x34
                if(line & 1) {
    4cee:	2201      	movs	r2, #1
    4cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4cf2:	4213      	tst	r3, r2
    4cf4:	d04d      	beq.n	4d92 <_ZN12Adafruit_GFX8drawCharEsshtth+0x14e>
    4cf6:	6820      	ldr	r0, [r4, #0]
                    if(size == 1)
    4cf8:	4297      	cmp	r7, r2
    4cfa:	d13f      	bne.n	4d7c <_ZN12Adafruit_GFX8drawCharEsshtth+0x138>
                        writePixel(x+i, y+j, color);
    4cfc:	466b      	mov	r3, sp
    4cfe:	8b9b      	ldrh	r3, [r3, #28]
    4d00:	9906      	ldr	r1, [sp, #24]
    4d02:	b21a      	sxth	r2, r3
    4d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d06:	1859      	adds	r1, r3, r1
    4d08:	6983      	ldr	r3, [r0, #24]
    4d0a:	b209      	sxth	r1, r1
    4d0c:	001e      	movs	r6, r3
    4d0e:	9b04      	ldr	r3, [sp, #16]
                        writePixel(x+i, y+j, bg);
    4d10:	0020      	movs	r0, r4
    4d12:	47b0      	blx	r6
    4d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
            for(int8_t j=0; j<8; j++, line >>= 1) {
    4d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d18:	4694      	mov	ip, r2
    4d1a:	085b      	lsrs	r3, r3, #1
    4d1c:	930c      	str	r3, [sp, #48]	; 0x30
    4d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4d20:	9e07      	ldr	r6, [sp, #28]
    4d22:	195d      	adds	r5, r3, r5
    4d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4d26:	3601      	adds	r6, #1
    4d28:	4463      	add	r3, ip
    4d2a:	b29b      	uxth	r3, r3
    4d2c:	930d      	str	r3, [sp, #52]	; 0x34
    4d2e:	b2b3      	uxth	r3, r6
    4d30:	9307      	str	r3, [sp, #28]
    4d32:	9a07      	ldr	r2, [sp, #28]
    4d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4d36:	b2ad      	uxth	r5, r5
    4d38:	4293      	cmp	r3, r2
    4d3a:	d1d8      	bne.n	4cee <_ZN12Adafruit_GFX8drawCharEsshtth+0xaa>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    4d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d3e:	3301      	adds	r3, #1
    4d40:	b25b      	sxtb	r3, r3
    4d42:	930a      	str	r3, [sp, #40]	; 0x28
    4d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d46:	3b01      	subs	r3, #1
    4d48:	b2db      	uxtb	r3, r3
    4d4a:	930e      	str	r3, [sp, #56]	; 0x38
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	d1b3      	bne.n	4cb8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x74>
        if(bg != color) { // If opaque, draw vertical line for last column
    4d50:	9b04      	ldr	r3, [sp, #16]
    4d52:	9a05      	ldr	r2, [sp, #20]
    4d54:	4293      	cmp	r3, r2
    4d56:	d00b      	beq.n	4d70 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12c>
    4d58:	6820      	ldr	r0, [r4, #0]
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
    4d5a:	2f01      	cmp	r7, #1
    4d5c:	d131      	bne.n	4dc2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x17e>
    4d5e:	9906      	ldr	r1, [sp, #24]
    4d60:	9200      	str	r2, [sp, #0]
    4d62:	3105      	adds	r1, #5
    4d64:	6a05      	ldr	r5, [r0, #32]
    4d66:	b209      	sxth	r1, r1
    4d68:	2308      	movs	r3, #8
    4d6a:	9a03      	ldr	r2, [sp, #12]
    4d6c:	0020      	movs	r0, r4
    4d6e:	47a8      	blx	r5
        endWrite();
    4d70:	6823      	ldr	r3, [r4, #0]
    4d72:	0020      	movs	r0, r4
    4d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d76:	4798      	blx	r3
}
    4d78:	b015      	add	sp, #84	; 0x54
    4d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        writeFillRect(x+i*size, y+j*size, size, size, color);
    4d7c:	9904      	ldr	r1, [sp, #16]
    4d7e:	b23b      	sxth	r3, r7
    4d80:	b22a      	sxth	r2, r5
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    4d82:	9101      	str	r1, [sp, #4]
    4d84:	9300      	str	r3, [sp, #0]
    4d86:	69c1      	ldr	r1, [r0, #28]
    4d88:	0020      	movs	r0, r4
    4d8a:	000e      	movs	r6, r1
    4d8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    4d8e:	47b0      	blx	r6
    4d90:	e7c0      	b.n	4d14 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd0>
                } else if(bg != color) {
    4d92:	9b04      	ldr	r3, [sp, #16]
    4d94:	9a05      	ldr	r2, [sp, #20]
    4d96:	4293      	cmp	r3, r2
    4d98:	d0bc      	beq.n	4d14 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd0>
    4d9a:	6820      	ldr	r0, [r4, #0]
                    if(size == 1)
    4d9c:	2f01      	cmp	r7, #1
    4d9e:	d10a      	bne.n	4db6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x172>
                        writePixel(x+i, y+j, bg);
    4da0:	466b      	mov	r3, sp
    4da2:	8b9b      	ldrh	r3, [r3, #28]
    4da4:	9906      	ldr	r1, [sp, #24]
    4da6:	b21a      	sxth	r2, r3
    4da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4daa:	1859      	adds	r1, r3, r1
    4dac:	6983      	ldr	r3, [r0, #24]
    4dae:	b209      	sxth	r1, r1
    4db0:	001e      	movs	r6, r3
    4db2:	9b05      	ldr	r3, [sp, #20]
    4db4:	e7ac      	b.n	4d10 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    4db6:	466a      	mov	r2, sp
    4db8:	b23b      	sxth	r3, r7
    4dba:	2134      	movs	r1, #52	; 0x34
    4dbc:	5e52      	ldrsh	r2, [r2, r1]
    4dbe:	9905      	ldr	r1, [sp, #20]
    4dc0:	e7df      	b.n	4d82 <_ZN12Adafruit_GFX8drawCharEsshtth+0x13e>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
    4dc2:	2105      	movs	r1, #5
    4dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4dc6:	b23b      	sxth	r3, r7
    4dc8:	4351      	muls	r1, r2
    4dca:	9a06      	ldr	r2, [sp, #24]
    4dcc:	1851      	adds	r1, r2, r1
    4dce:	9a05      	ldr	r2, [sp, #20]
    4dd0:	b209      	sxth	r1, r1
    4dd2:	9201      	str	r2, [sp, #4]
    4dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4dd6:	00d2      	lsls	r2, r2, #3
    4dd8:	9200      	str	r2, [sp, #0]
    4dda:	69c5      	ldr	r5, [r0, #28]
    4ddc:	9a03      	ldr	r2, [sp, #12]
    4dde:	0020      	movs	r0, r4
    4de0:	47a8      	blx	r5
    4de2:	e7c5      	b.n	4d70 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12c>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    4de4:	7a1a      	ldrb	r2, [r3, #8]
    4de6:	1aad      	subs	r5, r5, r2
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    4de8:	b2ed      	uxtb	r5, r5
    4dea:	685a      	ldr	r2, [r3, #4]
    4dec:	00ed      	lsls	r5, r5, #3
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    4dee:	681b      	ldr	r3, [r3, #0]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    4df0:	18ad      	adds	r5, r5, r2
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    4df2:	930e      	str	r3, [sp, #56]	; 0x38
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    4df4:	882b      	ldrh	r3, [r5, #0]
    4df6:	9307      	str	r3, [sp, #28]
        uint8_t  w  = pgm_read_byte(&glyph->width),
    4df8:	78ab      	ldrb	r3, [r5, #2]
    4dfa:	930f      	str	r3, [sp, #60]	; 0x3c
                 h  = pgm_read_byte(&glyph->height);
    4dfc:	78eb      	ldrb	r3, [r5, #3]
    4dfe:	9310      	str	r3, [sp, #64]	; 0x40
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
    4e00:	2305      	movs	r3, #5
    4e02:	56eb      	ldrsb	r3, [r5, r3]
    4e04:	930b      	str	r3, [sp, #44]	; 0x2c
                 yo = pgm_read_byte(&glyph->yOffset);
    4e06:	2306      	movs	r3, #6
    4e08:	56eb      	ldrsb	r3, [r5, r3]
    4e0a:	930c      	str	r3, [sp, #48]	; 0x30
        if(size > 1) {
    4e0c:	2f01      	cmp	r7, #1
    4e0e:	dd51      	ble.n	4eb4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x270>
            xo16 = xo;
    4e10:	466b      	mov	r3, sp
    4e12:	222c      	movs	r2, #44	; 0x2c
    4e14:	5e9b      	ldrsh	r3, [r3, r2]
    4e16:	9309      	str	r3, [sp, #36]	; 0x24
            yo16 = yo;
    4e18:	466b      	mov	r3, sp
    4e1a:	2230      	movs	r2, #48	; 0x30
    4e1c:	5e9b      	ldrsh	r3, [r3, r2]
    4e1e:	930a      	str	r3, [sp, #40]	; 0x28
        uint8_t  xx, yy, bits = 0, bit = 0;
    4e20:	2600      	movs	r6, #0
        startWrite();
    4e22:	6823      	ldr	r3, [r4, #0]
    4e24:	0020      	movs	r0, r4
    4e26:	695b      	ldr	r3, [r3, #20]
    4e28:	4798      	blx	r3
        uint8_t  xx, yy, bits = 0, bit = 0;
    4e2a:	9606      	str	r6, [sp, #24]
        for(yy=0; yy<h; yy++) {
    4e2c:	9605      	str	r6, [sp, #20]
    4e2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4e30:	9a05      	ldr	r2, [sp, #20]
    4e32:	429a      	cmp	r2, r3
    4e34:	da9c      	bge.n	4d70 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12c>
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    4e36:	b2bb      	uxth	r3, r7
    4e38:	9312      	str	r3, [sp, #72]	; 0x48
    4e3a:	466b      	mov	r3, sp
    4e3c:	899b      	ldrh	r3, [r3, #12]
    4e3e:	930d      	str	r3, [sp, #52]	; 0x34
    4e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4e42:	189b      	adds	r3, r3, r2
    4e44:	b2ba      	uxth	r2, r7
    4e46:	4353      	muls	r3, r2
    4e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4e4a:	18d3      	adds	r3, r2, r3
    4e4c:	b21b      	sxth	r3, r3
    4e4e:	9313      	str	r3, [sp, #76]	; 0x4c
    4e50:	0033      	movs	r3, r6
    4e52:	1b99      	subs	r1, r3, r6
            for(xx=0; xx<w; xx++) {
    4e54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4e56:	b2c9      	uxtb	r1, r1
    4e58:	4291      	cmp	r1, r2
    4e5a:	da41      	bge.n	4ee0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x29c>
                if(!(bit++ & 7)) {
    4e5c:	1c5a      	adds	r2, r3, #1
    4e5e:	b2d2      	uxtb	r2, r2
    4e60:	9211      	str	r2, [sp, #68]	; 0x44
    4e62:	2207      	movs	r2, #7
    4e64:	4213      	tst	r3, r2
    4e66:	d107      	bne.n	4e78 <_ZN12Adafruit_GFX8drawCharEsshtth+0x234>
                    bits = pgm_read_byte(&bitmap[bo++]);
    4e68:	9b07      	ldr	r3, [sp, #28]
    4e6a:	9807      	ldr	r0, [sp, #28]
    4e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4e6e:	3301      	adds	r3, #1
    4e70:	5c12      	ldrb	r2, [r2, r0]
    4e72:	b29b      	uxth	r3, r3
    4e74:	9206      	str	r2, [sp, #24]
    4e76:	9307      	str	r3, [sp, #28]
                if(bits & 0x80) {
    4e78:	466b      	mov	r3, sp
    4e7a:	7e1b      	ldrb	r3, [r3, #24]
    4e7c:	b25b      	sxtb	r3, r3
    4e7e:	2b00      	cmp	r3, #0
    4e80:	da12      	bge.n	4ea8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x264>
                    if(size == 1) {
    4e82:	2f01      	cmp	r7, #1
    4e84:	d11a      	bne.n	4ebc <_ZN12Adafruit_GFX8drawCharEsshtth+0x278>
                        writePixel(x+xo+xx, y+yo+yy, color);
    4e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4e8a:	9808      	ldr	r0, [sp, #32]
    4e8c:	189a      	adds	r2, r3, r2
    4e8e:	9b05      	ldr	r3, [sp, #20]
    4e90:	18d2      	adds	r2, r2, r3
    4e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e94:	b212      	sxth	r2, r2
    4e96:	181b      	adds	r3, r3, r0
    4e98:	1859      	adds	r1, r3, r1
    4e9a:	6823      	ldr	r3, [r4, #0]
    4e9c:	b209      	sxth	r1, r1
    4e9e:	699b      	ldr	r3, [r3, #24]
    4ea0:	0020      	movs	r0, r4
    4ea2:	001d      	movs	r5, r3
    4ea4:	9b04      	ldr	r3, [sp, #16]
    4ea6:	47a8      	blx	r5
                bits <<= 1;
    4ea8:	9b06      	ldr	r3, [sp, #24]
    4eaa:	005b      	lsls	r3, r3, #1
    4eac:	b2db      	uxtb	r3, r3
    4eae:	9306      	str	r3, [sp, #24]
                if(!(bit++ & 7)) {
    4eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
            for(xx=0; xx<w; xx++) {
    4eb2:	e7ce      	b.n	4e52 <_ZN12Adafruit_GFX8drawCharEsshtth+0x20e>
        int16_t  xo16 = 0, yo16 = 0;
    4eb4:	2300      	movs	r3, #0
    4eb6:	930a      	str	r3, [sp, #40]	; 0x28
    4eb8:	9309      	str	r3, [sp, #36]	; 0x24
    4eba:	e7b1      	b.n	4e20 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1dc>
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    4ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
                          size, size, color);
    4ebe:	9804      	ldr	r0, [sp, #16]
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    4ec0:	1851      	adds	r1, r2, r1
    4ec2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    4ec4:	b23b      	sxth	r3, r7
    4ec6:	4351      	muls	r1, r2
    4ec8:	9a08      	ldr	r2, [sp, #32]
                          size, size, color);
    4eca:	9001      	str	r0, [sp, #4]
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    4ecc:	1889      	adds	r1, r1, r2
                          size, size, color);
    4ece:	6822      	ldr	r2, [r4, #0]
    4ed0:	9300      	str	r3, [sp, #0]
    4ed2:	69d2      	ldr	r2, [r2, #28]
    4ed4:	b209      	sxth	r1, r1
    4ed6:	0015      	movs	r5, r2
    4ed8:	0020      	movs	r0, r4
    4eda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4edc:	47a8      	blx	r5
    4ede:	e7e3      	b.n	4ea8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x264>
        for(yy=0; yy<h; yy++) {
    4ee0:	9d05      	ldr	r5, [sp, #20]
    4ee2:	001e      	movs	r6, r3
    4ee4:	3501      	adds	r5, #1
    4ee6:	b2ea      	uxtb	r2, r5
    4ee8:	9205      	str	r2, [sp, #20]
    4eea:	e7a0      	b.n	4e2e <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ea>
    4eec:	00006490 	.word	0x00006490

00004ef0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
    4ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
    4ef2:	69c2      	ldr	r2, [r0, #28]
size_t Adafruit_GFX::write(uint8_t c) {
    4ef4:	b085      	sub	sp, #20
    4ef6:	0004      	movs	r4, r0
    4ef8:	000b      	movs	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
    4efa:	2a00      	cmp	r2, #0
    4efc:	d131      	bne.n	4f62 <_ZN12Adafruit_GFX5writeEh+0x72>
        if(c == '\n') {                        // Newline?
    4efe:	290a      	cmp	r1, #10
    4f00:	d108      	bne.n	4f14 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize * 8;          // advance y one line
    4f02:	7e03      	ldrb	r3, [r0, #24]
            cursor_x  = 0;                     // Reset x to zero,
    4f04:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize * 8;          // advance y one line
    4f06:	00db      	lsls	r3, r3, #3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4f08:	8a62      	ldrh	r2, [r4, #18]
    4f0a:	189b      	adds	r3, r3, r2
            cursor_y += (int16_t)textsize *
    4f0c:	8263      	strh	r3, [r4, #18]
}
    4f0e:	2001      	movs	r0, #1
    4f10:	b005      	add	sp, #20
    4f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
    4f14:	290d      	cmp	r1, #13
    4f16:	d0fa      	beq.n	4f0e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
    4f18:	7e81      	ldrb	r1, [r0, #26]
    4f1a:	7e00      	ldrb	r0, [r0, #24]
    4f1c:	2900      	cmp	r1, #0
    4f1e:	d00d      	beq.n	4f3c <_ZN12Adafruit_GFX5writeEh+0x4c>
    4f20:	2510      	movs	r5, #16
    4f22:	5f61      	ldrsh	r1, [r4, r5]
    4f24:	2506      	movs	r5, #6
    4f26:	4345      	muls	r5, r0
    4f28:	1949      	adds	r1, r1, r5
    4f2a:	260c      	movs	r6, #12
    4f2c:	5fa5      	ldrsh	r5, [r4, r6]
    4f2e:	42a9      	cmp	r1, r5
    4f30:	dd04      	ble.n	4f3c <_ZN12Adafruit_GFX5writeEh+0x4c>
                cursor_x  = 0;                 // Reset x to zero,
    4f32:	8222      	strh	r2, [r4, #16]
                cursor_y += textsize * 8;      // advance y one line
    4f34:	8a62      	ldrh	r2, [r4, #18]
    4f36:	00c1      	lsls	r1, r0, #3
    4f38:	1852      	adds	r2, r2, r1
    4f3a:	8262      	strh	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    4f3c:	9002      	str	r0, [sp, #8]
    4f3e:	8ae0      	ldrh	r0, [r4, #22]
    4f40:	2112      	movs	r1, #18
    4f42:	5e62      	ldrsh	r2, [r4, r1]
    4f44:	9001      	str	r0, [sp, #4]
    4f46:	8aa0      	ldrh	r0, [r4, #20]
    4f48:	2510      	movs	r5, #16
    4f4a:	5f61      	ldrsh	r1, [r4, r5]
    4f4c:	9000      	str	r0, [sp, #0]
    4f4e:	0020      	movs	r0, r4
    4f50:	f7ff fe78 	bl	4c44 <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
    4f54:	2206      	movs	r2, #6
    4f56:	7e23      	ldrb	r3, [r4, #24]
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    4f58:	4353      	muls	r3, r2
    4f5a:	8a22      	ldrh	r2, [r4, #16]
    4f5c:	189b      	adds	r3, r3, r2
    4f5e:	8223      	strh	r3, [r4, #16]
    4f60:	e7d5      	b.n	4f0e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
    4f62:	290a      	cmp	r1, #10
    4f64:	d105      	bne.n	4f72 <_ZN12Adafruit_GFX5writeEh+0x82>
            cursor_x  = 0;
    4f66:	2300      	movs	r3, #0
    4f68:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4f6a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize *
    4f6c:	7e03      	ldrb	r3, [r0, #24]
    4f6e:	4353      	muls	r3, r2
    4f70:	e7ca      	b.n	4f08 <_ZN12Adafruit_GFX5writeEh+0x18>
        } else if(c != '\r') {
    4f72:	290d      	cmp	r1, #13
    4f74:	d0cb      	beq.n	4f0e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    4f76:	7a15      	ldrb	r5, [r2, #8]
    4f78:	42a9      	cmp	r1, r5
    4f7a:	dbc8      	blt.n	4f0e <_ZN12Adafruit_GFX5writeEh+0x1e>
    4f7c:	7a51      	ldrb	r1, [r2, #9]
    4f7e:	428b      	cmp	r3, r1
    4f80:	dcc5      	bgt.n	4f0e <_ZN12Adafruit_GFX5writeEh+0x1e>
                  &gfxFont->glyph))[c - first]);
    4f82:	1b5d      	subs	r5, r3, r5
    4f84:	6851      	ldr	r1, [r2, #4]
    4f86:	00ed      	lsls	r5, r5, #3
    4f88:	186d      	adds	r5, r5, r1
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    4f8a:	78ae      	ldrb	r6, [r5, #2]
    4f8c:	2e00      	cmp	r6, #0
    4f8e:	d024      	beq.n	4fda <_ZN12Adafruit_GFX5writeEh+0xea>
    4f90:	78e9      	ldrb	r1, [r5, #3]
    4f92:	2900      	cmp	r1, #0
    4f94:	d021      	beq.n	4fda <_ZN12Adafruit_GFX5writeEh+0xea>
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
    4f96:	7e81      	ldrb	r1, [r0, #26]
    4f98:	7e00      	ldrb	r0, [r0, #24]
    4f9a:	2900      	cmp	r1, #0
    4f9c:	d011      	beq.n	4fc2 <_ZN12Adafruit_GFX5writeEh+0xd2>
    4f9e:	2105      	movs	r1, #5
    4fa0:	5669      	ldrsb	r1, [r5, r1]
    4fa2:	1989      	adds	r1, r1, r6
    4fa4:	4341      	muls	r1, r0
    4fa6:	2710      	movs	r7, #16
    4fa8:	5fe6      	ldrsh	r6, [r4, r7]
    4faa:	1989      	adds	r1, r1, r6
    4fac:	270c      	movs	r7, #12
    4fae:	5fe6      	ldrsh	r6, [r4, r7]
    4fb0:	42b1      	cmp	r1, r6
    4fb2:	dd06      	ble.n	4fc2 <_ZN12Adafruit_GFX5writeEh+0xd2>
                        cursor_x  = 0;
    4fb4:	2100      	movs	r1, #0
    4fb6:	8221      	strh	r1, [r4, #16]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4fb8:	7a92      	ldrb	r2, [r2, #10]
    4fba:	8a61      	ldrh	r1, [r4, #18]
                        cursor_y += (int16_t)textsize *
    4fbc:	4342      	muls	r2, r0
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4fbe:	1852      	adds	r2, r2, r1
                        cursor_y += (int16_t)textsize *
    4fc0:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    4fc2:	9002      	str	r0, [sp, #8]
    4fc4:	8ae0      	ldrh	r0, [r4, #22]
    4fc6:	2112      	movs	r1, #18
    4fc8:	5e62      	ldrsh	r2, [r4, r1]
    4fca:	9001      	str	r0, [sp, #4]
    4fcc:	8aa0      	ldrh	r0, [r4, #20]
    4fce:	2610      	movs	r6, #16
    4fd0:	5fa1      	ldrsh	r1, [r4, r6]
    4fd2:	9000      	str	r0, [sp, #0]
    4fd4:	0020      	movs	r0, r4
    4fd6:	f7ff fe35 	bl	4c44 <_ZN12Adafruit_GFX8drawCharEsshtth>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    4fda:	792b      	ldrb	r3, [r5, #4]
    4fdc:	7e22      	ldrb	r2, [r4, #24]
    4fde:	e7bb      	b.n	4f58 <_ZN12Adafruit_GFX5writeEh+0x68>

00004fe0 <_ZNK12Adafruit_GFX5widthEv>:
    return _width;
    4fe0:	230c      	movs	r3, #12
    4fe2:	5ec0      	ldrsh	r0, [r0, r3]
}
    4fe4:	4770      	bx	lr

00004fe6 <_ZNK12Adafruit_GFX6heightEv>:
    return _height;
    4fe6:	230e      	movs	r3, #14
    4fe8:	5ec0      	ldrsh	r0, [r0, r3]
}
    4fea:	4770      	bx	lr

00004fec <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    4fec:	e7fe      	b.n	4fec <__cxa_pure_virtual>

00004fee <ltoa>:
        {
            return ltoa(value, string, radix);
        }

        extern char* ltoa(long value, char*string, int radix)
        {
    4fee:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ff0:	b08d      	sub	sp, #52	; 0x34
    4ff2:	1e0e      	subs	r6, r1, #0
    4ff4:	9200      	str	r2, [sp, #0]
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
    4ff6:	d02d      	beq.n	5054 <ltoa+0x66>
            {
                return 0;
            }

            if (radix > 36 || radix <= 1)
    4ff8:	0013      	movs	r3, r2
    4ffa:	3b02      	subs	r3, #2
    4ffc:	2b22      	cmp	r3, #34	; 0x22
    4ffe:	d833      	bhi.n	5068 <ltoa+0x7a>
            {
                return 0;
            }

            sign = (radix == 10 && value < 0);
    5000:	2a0a      	cmp	r2, #10
    5002:	d133      	bne.n	506c <ltoa+0x7e>
    5004:	2800      	cmp	r0, #0
    5006:	da31      	bge.n	506c <ltoa+0x7e>
    5008:	2301      	movs	r3, #1
            if (sign)
            {
                v = -value;
    500a:	4244      	negs	r4, r0
            }
            else
            {
                v = (unsigned long)value;
    500c:	9301      	str	r3, [sp, #4]
    500e:	af03      	add	r7, sp, #12
    5010:	e00e      	b.n	5030 <ltoa+0x42>
            }

            while (v || tp == tmp)
            {
                i = v % radix;
    5012:	0020      	movs	r0, r4
    5014:	9900      	ldr	r1, [sp, #0]
    5016:	f000 fc17 	bl	5848 <__aeabi_uidivmod>
                v = v / radix;
    501a:	0020      	movs	r0, r4
                i = v % radix;
    501c:	000d      	movs	r5, r1
                v = v / radix;
    501e:	9900      	ldr	r1, [sp, #0]
    5020:	f000 fb8c 	bl	573c <__udivsi3>
    5024:	0004      	movs	r4, r0
                if (i < 10)
    5026:	2d09      	cmp	r5, #9
    5028:	d817      	bhi.n	505a <ltoa+0x6c>
                    *tp++ = i + '0';
    502a:	3530      	adds	r5, #48	; 0x30
                else
                    *tp++ = i + 'a' - 10;
    502c:	703d      	strb	r5, [r7, #0]
    502e:	3701      	adds	r7, #1
    5030:	003a      	movs	r2, r7
            while (v || tp == tmp)
    5032:	2c00      	cmp	r4, #0
    5034:	d1ed      	bne.n	5012 <ltoa+0x24>
    5036:	ab03      	add	r3, sp, #12
    5038:	42bb      	cmp	r3, r7
    503a:	d0ea      	beq.n	5012 <ltoa+0x24>
            }

            sp = string;

            if (sign)
    503c:	9901      	ldr	r1, [sp, #4]
    503e:	0033      	movs	r3, r6
    5040:	2900      	cmp	r1, #0
    5042:	d002      	beq.n	504a <ltoa+0x5c>
                *sp++ = '-';
    5044:	212d      	movs	r1, #45	; 0x2d
    5046:	1c73      	adds	r3, r6, #1
    5048:	7031      	strb	r1, [r6, #0]
            while (tp > tmp)
    504a:	a903      	add	r1, sp, #12
    504c:	428a      	cmp	r2, r1
    504e:	d806      	bhi.n	505e <ltoa+0x70>
                *sp++ = *--tp;
            *sp = 0;
    5050:	2200      	movs	r2, #0
    5052:	701a      	strb	r2, [r3, #0]

            return string;
        }
    5054:	0030      	movs	r0, r6
    5056:	b00d      	add	sp, #52	; 0x34
    5058:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    *tp++ = i + 'a' - 10;
    505a:	3557      	adds	r5, #87	; 0x57
    505c:	e7e6      	b.n	502c <ltoa+0x3e>
                *sp++ = *--tp;
    505e:	3a01      	subs	r2, #1
    5060:	7811      	ldrb	r1, [r2, #0]
    5062:	7019      	strb	r1, [r3, #0]
    5064:	3301      	adds	r3, #1
    5066:	e7f0      	b.n	504a <ltoa+0x5c>
                return 0;
    5068:	2600      	movs	r6, #0
    506a:	e7f3      	b.n	5054 <ltoa+0x66>
                v = (unsigned long)value;
    506c:	0004      	movs	r4, r0
    506e:	2300      	movs	r3, #0
    5070:	e7cc      	b.n	500c <ltoa+0x1e>

00005072 <itoa>:
        {
    5072:	b510      	push	{r4, lr}
            return ltoa(value, string, radix);
    5074:	f7ff ffbb 	bl	4fee <ltoa>
        }
    5078:	bd10      	pop	{r4, pc}

0000507a <_Znwj>:
    507a:	b510      	push	{r4, lr}
    507c:	f000 fcf8 	bl	5a70 <malloc>
    5080:	bd10      	pop	{r4, pc}

00005082 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    5082:	6001      	str	r1, [r0, #0]
}
    5084:	4770      	bx	lr

00005086 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    5086:	b5f0      	push	{r4, r5, r6, r7, lr}
    5088:	ac05      	add	r4, sp, #20
    508a:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    508c:	6804      	ldr	r4, [r0, #0]
    508e:	1e98      	subs	r0, r3, #2
    5090:	1e47      	subs	r7, r0, #1
    5092:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    5094:	6826      	ldr	r6, [r4, #0]
    5096:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    5098:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    509a:	4332      	orrs	r2, r6
    509c:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    509e:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    50a0:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    50a2:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    50a4:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    50a6:	6862      	ldr	r2, [r4, #4]
    50a8:	4329      	orrs	r1, r5
    50aa:	2000      	movs	r0, #0
    50ac:	2b02      	cmp	r3, #2
    50ae:	d000      	beq.n	50b2 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    50b0:	0358      	lsls	r0, r3, #13
    50b2:	4311      	orrs	r1, r2
    50b4:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    50b6:	6061      	str	r1, [r4, #4]
}
    50b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000050ba <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    50ba:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    50bc:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    50be:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    50c0:	03a4      	lsls	r4, r4, #14
    50c2:	6818      	ldr	r0, [r3, #0]
    50c4:	0512      	lsls	r2, r2, #20
    50c6:	4022      	ands	r2, r4
    50c8:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    50ca:	20c0      	movs	r0, #192	; 0xc0
    50cc:	0409      	lsls	r1, r1, #16
    50ce:	0280      	lsls	r0, r0, #10
    50d0:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    50d2:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    50d4:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    50d6:	685a      	ldr	r2, [r3, #4]
    50d8:	4310      	orrs	r0, r2
    50da:	6058      	str	r0, [r3, #4]
}
    50dc:	bd10      	pop	{r4, pc}

000050de <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    50de:	2201      	movs	r2, #1
    50e0:	6803      	ldr	r3, [r0, #0]
    50e2:	6819      	ldr	r1, [r3, #0]
    50e4:	430a      	orrs	r2, r1
    50e6:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    50e8:	681a      	ldr	r2, [r3, #0]
    50ea:	07d2      	lsls	r2, r2, #31
    50ec:	d4fc      	bmi.n	50e8 <_ZN6SERCOM9resetUARTEv+0xa>
    50ee:	69da      	ldr	r2, [r3, #28]
    50f0:	07d2      	lsls	r2, r2, #31
    50f2:	d4f9      	bmi.n	50e8 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    50f4:	4770      	bx	lr

000050f6 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    50f6:	2202      	movs	r2, #2
    50f8:	6803      	ldr	r3, [r0, #0]
    50fa:	6819      	ldr	r1, [r3, #0]
    50fc:	430a      	orrs	r2, r1
    50fe:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    5100:	69da      	ldr	r2, [r3, #28]
    5102:	0792      	lsls	r2, r2, #30
    5104:	d4fc      	bmi.n	5100 <_ZN6SERCOM10enableUARTEv+0xa>
}
    5106:	4770      	bx	lr

00005108 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    5108:	6803      	ldr	r3, [r0, #0]
    510a:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    510c:	07d2      	lsls	r2, r2, #31
    510e:	d402      	bmi.n	5116 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    5110:	7e1a      	ldrb	r2, [r3, #24]
    5112:	0792      	lsls	r2, r2, #30
    5114:	d5fc      	bpl.n	5110 <_ZN6SERCOM9flushUARTEv+0x8>
}
    5116:	4770      	bx	lr

00005118 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    5118:	2200      	movs	r2, #0
    511a:	6803      	ldr	r3, [r0, #0]
    511c:	835a      	strh	r2, [r3, #26]
}
    511e:	4770      	bx	lr

00005120 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    5120:	6803      	ldr	r3, [r0, #0]
    5122:	7e18      	ldrb	r0, [r3, #24]
    5124:	0740      	lsls	r0, r0, #29
    5126:	0fc0      	lsrs	r0, r0, #31
}
    5128:	4770      	bx	lr

0000512a <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    512a:	6803      	ldr	r3, [r0, #0]
    512c:	7e18      	ldrb	r0, [r3, #24]
    512e:	09c0      	lsrs	r0, r0, #7
}
    5130:	4770      	bx	lr

00005132 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    5132:	2380      	movs	r3, #128	; 0x80
    5134:	6802      	ldr	r2, [r0, #0]
    5136:	425b      	negs	r3, r3
    5138:	7e11      	ldrb	r1, [r2, #24]
    513a:	430b      	orrs	r3, r1
    513c:	7613      	strb	r3, [r2, #24]
}
    513e:	4770      	bx	lr

00005140 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    5140:	6803      	ldr	r3, [r0, #0]
    5142:	7e18      	ldrb	r0, [r3, #24]
    5144:	07c0      	lsls	r0, r0, #31
    5146:	0fc0      	lsrs	r0, r0, #31
}
    5148:	4770      	bx	lr

0000514a <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    514a:	6803      	ldr	r3, [r0, #0]
    514c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    514e:	b2c0      	uxtb	r0, r0
}
    5150:	4770      	bx	lr

00005152 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    5152:	6803      	ldr	r3, [r0, #0]
    5154:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    5156:	07d2      	lsls	r2, r2, #31
    5158:	d5fc      	bpl.n	5154 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    515a:	b289      	uxth	r1, r1
  return 1;
}
    515c:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    515e:	8519      	strh	r1, [r3, #40]	; 0x28
}
    5160:	4770      	bx	lr

00005162 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    5162:	2201      	movs	r2, #1
    5164:	6803      	ldr	r3, [r0, #0]
    5166:	759a      	strb	r2, [r3, #22]
}
    5168:	4770      	bx	lr

0000516a <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    516a:	2201      	movs	r2, #1
    516c:	6803      	ldr	r3, [r0, #0]
    516e:	751a      	strb	r2, [r3, #20]
}
    5170:	4770      	bx	lr
	...

00005174 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:


}

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    5174:	b570      	push	{r4, r5, r6, lr}
  if((clockMode & (0x1ul)) == 0 )
    cpha = 0;
  else
    cpha = 1;

  if((clockMode & (0x2ul)) == 0)
    5176:	2501      	movs	r5, #1
    cpol = 0;
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    5178:	6804      	ldr	r4, [r0, #0]
  if((clockMode & (0x2ul)) == 0)
    517a:	084b      	lsrs	r3, r1, #1
    517c:	402b      	ands	r3, r5
    cpha = 0;
    517e:	4029      	ands	r1, r5
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    5180:	6820      	ldr	r0, [r4, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    5182:	0709      	lsls	r1, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    5184:	075b      	lsls	r3, r3, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    5186:	430b      	orrs	r3, r1
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    5188:	4303      	orrs	r3, r0
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    518a:	6023      	str	r3, [r4, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    518c:	0051      	lsls	r1, r2, #1
    518e:	4803      	ldr	r0, [pc, #12]	; (519c <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x28>)
    5190:	f000 fad4 	bl	573c <__udivsi3>
    5194:	3801      	subs	r0, #1
    5196:	b2c0      	uxtb	r0, r0
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    5198:	7320      	strb	r0, [r4, #12]
}
    519a:	bd70      	pop	{r4, r5, r6, pc}
    519c:	02dc6c00 	.word	0x02dc6c00

000051a0 <_ZN6SERCOM8resetSPIEv>:
  sercom->SPI.CTRLA.bit.SWRST = 1;
    51a0:	2201      	movs	r2, #1
    51a2:	6803      	ldr	r3, [r0, #0]
    51a4:	6819      	ldr	r1, [r3, #0]
    51a6:	430a      	orrs	r2, r1
    51a8:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    51aa:	681a      	ldr	r2, [r3, #0]
    51ac:	07d2      	lsls	r2, r2, #31
    51ae:	d4fc      	bmi.n	51aa <_ZN6SERCOM8resetSPIEv+0xa>
    51b0:	69da      	ldr	r2, [r3, #28]
    51b2:	07d2      	lsls	r2, r2, #31
    51b4:	d4f9      	bmi.n	51aa <_ZN6SERCOM8resetSPIEv+0xa>
}
    51b6:	4770      	bx	lr

000051b8 <_ZN6SERCOM9enableSPIEv>:
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    51b8:	2202      	movs	r2, #2
    51ba:	6803      	ldr	r3, [r0, #0]
    51bc:	6819      	ldr	r1, [r3, #0]
    51be:	430a      	orrs	r2, r1
    51c0:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    51c2:	69da      	ldr	r2, [r3, #28]
    51c4:	0792      	lsls	r2, r2, #30
    51c6:	d4fc      	bmi.n	51c2 <_ZN6SERCOM9enableSPIEv+0xa>
}
    51c8:	4770      	bx	lr

000051ca <_ZN6SERCOM10disableSPIEv>:
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    51ca:	6803      	ldr	r3, [r0, #0]
    51cc:	69da      	ldr	r2, [r3, #28]
    51ce:	0792      	lsls	r2, r2, #30
    51d0:	d4fc      	bmi.n	51cc <_ZN6SERCOM10disableSPIEv+0x2>
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    51d2:	2102      	movs	r1, #2
    51d4:	681a      	ldr	r2, [r3, #0]
    51d6:	438a      	bics	r2, r1
    51d8:	601a      	str	r2, [r3, #0]
}
    51da:	4770      	bx	lr

000051dc <_ZN6SERCOM15transferDataSPIEh>:
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    51dc:	6802      	ldr	r2, [r0, #0]
    51de:	6a93      	ldr	r3, [r2, #40]	; 0x28
    51e0:	0a5b      	lsrs	r3, r3, #9
    51e2:	025b      	lsls	r3, r3, #9
    51e4:	4319      	orrs	r1, r3
    51e6:	6291      	str	r1, [r2, #40]	; 0x28
  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    51e8:	7e13      	ldrb	r3, [r2, #24]
    51ea:	075b      	lsls	r3, r3, #29
    51ec:	d5fc      	bpl.n	51e8 <_ZN6SERCOM15transferDataSPIEh+0xc>
  return sercom->SPI.DATA.bit.DATA;  // Reading data
    51ee:	6a90      	ldr	r0, [r2, #40]	; 0x28
    51f0:	b2c0      	uxtb	r0, r0
}
    51f2:	4770      	bx	lr

000051f4 <_ZN6SERCOM9resetWIREEv>:
void SERCOM::resetWIRE()
{
  //I2CM OR I2CS, no matter SWRST is the same bit.

  //Setting the Software bit to 1
  sercom->I2CM.CTRLA.bit.SWRST = 1;
    51f4:	2201      	movs	r2, #1
    51f6:	6803      	ldr	r3, [r0, #0]
    51f8:	6819      	ldr	r1, [r3, #0]
    51fa:	430a      	orrs	r2, r1
    51fc:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
    51fe:	681a      	ldr	r2, [r3, #0]
    5200:	07d2      	lsls	r2, r2, #31
    5202:	d4fc      	bmi.n	51fe <_ZN6SERCOM9resetWIREEv+0xa>
    5204:	69da      	ldr	r2, [r3, #28]
    5206:	07d2      	lsls	r2, r2, #31
    5208:	d4f9      	bmi.n	51fe <_ZN6SERCOM9resetWIREEv+0xa>
}
    520a:	4770      	bx	lr

0000520c <_ZN6SERCOM10enableWIREEv>:
void SERCOM::enableWIRE()
{
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    520c:	2202      	movs	r2, #2
    520e:	6803      	ldr	r3, [r0, #0]
    5210:	6819      	ldr	r1, [r3, #0]
    5212:	430a      	orrs	r2, r1
    5214:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    5216:	69da      	ldr	r2, [r3, #28]
    5218:	0792      	lsls	r2, r2, #30
    521a:	d4fc      	bmi.n	5216 <_ZN6SERCOM10enableWIREEv+0xa>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    521c:	2130      	movs	r1, #48	; 0x30
    521e:	8b5a      	ldrh	r2, [r3, #26]
    5220:	438a      	bics	r2, r1
    5222:	0011      	movs	r1, r2
    5224:	2210      	movs	r2, #16
    5226:	430a      	orrs	r2, r1
    5228:	835a      	strh	r2, [r3, #26]

  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
    522a:	69da      	ldr	r2, [r3, #28]
    522c:	0752      	lsls	r2, r2, #29
    522e:	d4fc      	bmi.n	522a <_ZN6SERCOM10enableWIREEv+0x1e>
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    5230:	4770      	bx	lr

00005232 <_ZN6SERCOM18prepareNackBitWIREEv>:
  // Synchronous arithmetic baudrate
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
}

void SERCOM::prepareNackBitWIRE( void )
{
    5232:	2380      	movs	r3, #128	; 0x80
    return true;
}

bool SERCOM::isMasterWIRE( void )
{
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    5234:	6802      	ldr	r2, [r0, #0]
    5236:	02db      	lsls	r3, r3, #11
    5238:	6811      	ldr	r1, [r2, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    523a:	6851      	ldr	r1, [r2, #4]
    523c:	430b      	orrs	r3, r1
    523e:	6053      	str	r3, [r2, #4]
}
    5240:	4770      	bx	lr
	...

00005244 <_ZN6SERCOM17prepareAckBitWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    5244:	6803      	ldr	r3, [r0, #0]
    5246:	4903      	ldr	r1, [pc, #12]	; (5254 <_ZN6SERCOM17prepareAckBitWIREEv+0x10>)
    5248:	681a      	ldr	r2, [r3, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    524a:	685a      	ldr	r2, [r3, #4]
    524c:	400a      	ands	r2, r1
    524e:	605a      	str	r2, [r3, #4]
}
    5250:	4770      	bx	lr
    5252:	46c0      	nop			; (mov r8, r8)
    5254:	fffbffff 	.word	0xfffbffff

00005258 <_ZN6SERCOM22prepareCommandBitsWireEh>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    5258:	6803      	ldr	r3, [r0, #0]
{
    525a:	b510      	push	{r4, lr}
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    525c:	6818      	ldr	r0, [r3, #0]
    525e:	2203      	movs	r2, #3
    5260:	06c0      	lsls	r0, r0, #27
    5262:	0f40      	lsrs	r0, r0, #29
    5264:	4c09      	ldr	r4, [pc, #36]	; (528c <_ZN6SERCOM22prepareCommandBitsWireEh+0x34>)
  if(isMasterWIRE()) {
    5266:	2805      	cmp	r0, #5
    5268:	d109      	bne.n	527e <_ZN6SERCOM22prepareCommandBitsWireEh+0x26>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    526a:	6858      	ldr	r0, [r3, #4]
    526c:	4011      	ands	r1, r2
    526e:	0409      	lsls	r1, r1, #16
    5270:	4020      	ands	r0, r4
    5272:	4301      	orrs	r1, r0
    5274:	6059      	str	r1, [r3, #4]
    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
    5276:	69da      	ldr	r2, [r3, #28]
    5278:	0752      	lsls	r2, r2, #29
    527a:	d4fc      	bmi.n	5276 <_ZN6SERCOM22prepareCommandBitsWireEh+0x1e>
}
    527c:	bd10      	pop	{r4, pc}
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    527e:	6858      	ldr	r0, [r3, #4]
    5280:	4011      	ands	r1, r2
    5282:	0409      	lsls	r1, r1, #16
    5284:	4020      	ands	r0, r4
    5286:	4301      	orrs	r1, r0
    5288:	6059      	str	r1, [r3, #4]
}
    528a:	e7f7      	b.n	527c <_ZN6SERCOM22prepareCommandBitsWireEh+0x24>
    528c:	fffcffff 	.word	0xfffcffff

00005290 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>:
  address = (address << 0x1ul) | flag;
    5290:	0049      	lsls	r1, r1, #1
    5292:	4311      	orrs	r1, r2
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
}

bool SERCOM::isBusIdleWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    5294:	6803      	ldr	r3, [r0, #0]
{
    5296:	b510      	push	{r4, lr}
  address = (address << 0x1ul) | flag;
    5298:	b2cc      	uxtb	r4, r1
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    529a:	8b59      	ldrh	r1, [r3, #26]
    529c:	0689      	lsls	r1, r1, #26
    529e:	0f89      	lsrs	r1, r1, #30
  while ( !isBusIdleWIRE() && !isBusOwnerWIRE() );
    52a0:	2901      	cmp	r1, #1
    52a2:	d004      	beq.n	52ae <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x1e>
}

bool SERCOM::isBusOwnerWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    52a4:	8b59      	ldrh	r1, [r3, #26]
    52a6:	0689      	lsls	r1, r1, #26
    52a8:	0f89      	lsrs	r1, r1, #30
  while ( !isBusIdleWIRE() && !isBusOwnerWIRE() );
    52aa:	2902      	cmp	r1, #2
    52ac:	d1f5      	bne.n	529a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xa>
  sercom->I2CM.ADDR.bit.ADDR = address;
    52ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
    52b0:	0ac9      	lsrs	r1, r1, #11
    52b2:	02c9      	lsls	r1, r1, #11
    52b4:	4321      	orrs	r1, r4
    52b6:	6259      	str	r1, [r3, #36]	; 0x24
  if ( flag == WIRE_WRITE_FLAG ) // Write mode
    52b8:	2a00      	cmp	r2, #0
    52ba:	d00c      	beq.n	52d6 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x46>
    while( !sercom->I2CM.INTFLAG.bit.SB )
    52bc:	7e18      	ldrb	r0, [r3, #24]
    52be:	0780      	lsls	r0, r0, #30
    52c0:	0fc0      	lsrs	r0, r0, #31
    52c2:	d10b      	bne.n	52dc <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x4c>
        if (sercom->I2CM.INTFLAG.bit.MB) {
    52c4:	7e1a      	ldrb	r2, [r3, #24]
    52c6:	07d2      	lsls	r2, r2, #31
    52c8:	d5f8      	bpl.n	52bc <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2c>
            sercom->I2CM.CTRLB.bit.CMD = 3; // Stop condition
    52ca:	22c0      	movs	r2, #192	; 0xc0
    52cc:	6859      	ldr	r1, [r3, #4]
    52ce:	0292      	lsls	r2, r2, #10
    52d0:	430a      	orrs	r2, r1
    52d2:	605a      	str	r2, [r3, #4]
}
    52d4:	bd10      	pop	{r4, pc}
    while( !sercom->I2CM.INTFLAG.bit.MB )
    52d6:	7e1a      	ldrb	r2, [r3, #24]
    52d8:	07d2      	lsls	r2, r2, #31
    52da:	d5fc      	bpl.n	52d6 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x46>
  if(sercom->I2CM.STATUS.bit.RXNACK)
    52dc:	8b58      	ldrh	r0, [r3, #26]
    52de:	0740      	lsls	r0, r0, #29
    52e0:	0fc3      	lsrs	r3, r0, #31
    52e2:	2001      	movs	r0, #1
    52e4:	4058      	eors	r0, r3
    52e6:	e7f5      	b.n	52d4 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x44>

000052e8 <_ZN6SERCOM18sendDataMasterWIREEh>:
  sercom->I2CM.DATA.bit.DATA = data;
    52e8:	6803      	ldr	r3, [r0, #0]
    52ea:	001a      	movs	r2, r3
    52ec:	3228      	adds	r2, #40	; 0x28
    52ee:	7011      	strb	r1, [r2, #0]
  while(!sercom->I2CM.INTFLAG.bit.MB) {
    52f0:	7e18      	ldrb	r0, [r3, #24]
    52f2:	07c0      	lsls	r0, r0, #31
    52f4:	0fc0      	lsrs	r0, r0, #31
    52f6:	d103      	bne.n	5300 <_ZN6SERCOM18sendDataMasterWIREEh+0x18>
    if (sercom->I2CM.STATUS.bit.BUSERR) {
    52f8:	8b5a      	ldrh	r2, [r3, #26]
    52fa:	07d2      	lsls	r2, r2, #31
    52fc:	d5f8      	bpl.n	52f0 <_ZN6SERCOM18sendDataMasterWIREEh+0x8>
}
    52fe:	4770      	bx	lr
  if(sercom->I2CM.STATUS.bit.RXNACK)
    5300:	8b58      	ldrh	r0, [r3, #26]
    5302:	0740      	lsls	r0, r0, #29
    5304:	0fc3      	lsrs	r3, r0, #31
    5306:	2001      	movs	r0, #1
    5308:	4058      	eors	r0, r3
    530a:	e7f8      	b.n	52fe <_ZN6SERCOM18sendDataMasterWIREEh+0x16>

0000530c <_ZN6SERCOM17sendDataSlaveWIREEh>:
  sercom->I2CS.DATA.bit.DATA = data;
    530c:	6803      	ldr	r3, [r0, #0]
    return false;
    530e:	2000      	movs	r0, #0
  sercom->I2CS.DATA.bit.DATA = data;
    5310:	001a      	movs	r2, r3
    5312:	3228      	adds	r2, #40	; 0x28
    5314:	7011      	strb	r1, [r2, #0]
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
    5316:	7e1a      	ldrb	r2, [r3, #24]
    5318:	0752      	lsls	r2, r2, #29
    531a:	d504      	bpl.n	5326 <_ZN6SERCOM17sendDataSlaveWIREEh+0x1a>
    531c:	8b58      	ldrh	r0, [r3, #26]
    531e:	2301      	movs	r3, #1
    5320:	0740      	lsls	r0, r0, #29
    5322:	0fc0      	lsrs	r0, r0, #31
    5324:	4058      	eors	r0, r3
}
    5326:	4770      	bx	lr

00005328 <_ZN6SERCOM11isSlaveWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
    5328:	6803      	ldr	r3, [r0, #0]
    532a:	6818      	ldr	r0, [r3, #0]
    532c:	06c0      	lsls	r0, r0, #27
    532e:	0f40      	lsrs	r0, r0, #29
    5330:	3804      	subs	r0, #4
    5332:	4243      	negs	r3, r0
    5334:	4158      	adcs	r0, r3
    5336:	b2c0      	uxtb	r0, r0
}
    5338:	4770      	bx	lr

0000533a <_ZN6SERCOM15isDataReadyWIREEv>:
}

bool SERCOM::isDataReadyWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.DRDY;
    533a:	6803      	ldr	r3, [r0, #0]
    533c:	7e18      	ldrb	r0, [r3, #24]
    533e:	0740      	lsls	r0, r0, #29
    5340:	0fc0      	lsrs	r0, r0, #31
}
    5342:	4770      	bx	lr

00005344 <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.PREC;
    5344:	6803      	ldr	r3, [r0, #0]
    5346:	7e18      	ldrb	r0, [r3, #24]
    5348:	07c0      	lsls	r0, r0, #31
    534a:	0fc0      	lsrs	r0, r0, #31
}
    534c:	4770      	bx	lr

0000534e <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
  return sercom->I2CS.STATUS.bit.SR;
    534e:	6803      	ldr	r3, [r0, #0]
    5350:	8b58      	ldrh	r0, [r3, #26]
    5352:	06c0      	lsls	r0, r0, #27
    5354:	0fc0      	lsrs	r0, r0, #31
}
    5356:	4770      	bx	lr

00005358 <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
  return sercom->I2CS.INTFLAG.bit.AMATCH;
    5358:	6803      	ldr	r3, [r0, #0]
    535a:	7e18      	ldrb	r0, [r3, #24]
    535c:	0780      	lsls	r0, r0, #30
    535e:	0fc0      	lsrs	r0, r0, #31
}
    5360:	4770      	bx	lr

00005362 <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
  return sercom->I2CS.STATUS.bit.DIR;
    5362:	6803      	ldr	r3, [r0, #0]
    5364:	8b58      	ldrh	r0, [r3, #26]
    5366:	0700      	lsls	r0, r0, #28
    5368:	0fc0      	lsrs	r0, r0, #31
}
    536a:	4770      	bx	lr

0000536c <_ZN6SERCOM12readDataWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    536c:	6803      	ldr	r3, [r0, #0]
    536e:	681a      	ldr	r2, [r3, #0]
    5370:	06d2      	lsls	r2, r2, #27
    5372:	0f52      	lsrs	r2, r2, #29
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
  if(isMasterWIRE())
    5374:	2a05      	cmp	r2, #5
    5376:	d102      	bne.n	537e <_ZN6SERCOM12readDataWIREEv+0x12>
  {
    while( sercom->I2CM.INTFLAG.bit.SB == 0 )
    5378:	7e1a      	ldrb	r2, [r3, #24]
    537a:	0792      	lsls	r2, r2, #30
    537c:	d5fc      	bpl.n	5378 <_ZN6SERCOM12readDataWIREEv+0xc>

    return sercom->I2CM.DATA.bit.DATA ;
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
    537e:	3328      	adds	r3, #40	; 0x28
    5380:	7818      	ldrb	r0, [r3, #0]
    5382:	b2c0      	uxtb	r0, r0
  }
}
    5384:	4770      	bx	lr
	...

00005388 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    5388:	6803      	ldr	r3, [r0, #0]
    538a:	4a21      	ldr	r2, [pc, #132]	; (5410 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    538c:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    538e:	4293      	cmp	r3, r2
    5390:	d011      	beq.n	53b6 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    5392:	4a20      	ldr	r2, [pc, #128]	; (5414 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    5394:	4293      	cmp	r3, r2
    5396:	d02f      	beq.n	53f8 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    5398:	4a1f      	ldr	r2, [pc, #124]	; (5418 <_ZN6SERCOM13initClockNVICEv+0x90>)
    539a:	4293      	cmp	r3, r2
    539c:	d02f      	beq.n	53fe <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    539e:	4a1f      	ldr	r2, [pc, #124]	; (541c <_ZN6SERCOM13initClockNVICEv+0x94>)
    53a0:	4293      	cmp	r3, r2
    53a2:	d02f      	beq.n	5404 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    53a4:	4a1e      	ldr	r2, [pc, #120]	; (5420 <_ZN6SERCOM13initClockNVICEv+0x98>)
    53a6:	4293      	cmp	r3, r2
    53a8:	d02f      	beq.n	540a <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    53aa:	4a1e      	ldr	r2, [pc, #120]	; (5424 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    53ac:	4293      	cmp	r3, r2
    53ae:	d122      	bne.n	53f6 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    53b0:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    53b2:	2219      	movs	r2, #25
    53b4:	e001      	b.n	53ba <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    53b6:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    53b8:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    53ba:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    53bc:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    53be:	4099      	lsls	r1, r3
    53c0:	4819      	ldr	r0, [pc, #100]	; (5428 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    53c2:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    53c4:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    53c6:	0899      	lsrs	r1, r3, #2
    53c8:	402b      	ands	r3, r5
    53ca:	40ab      	lsls	r3, r5
    53cc:	35fc      	adds	r5, #252	; 0xfc
    53ce:	409d      	lsls	r5, r3
    53d0:	0089      	lsls	r1, r1, #2
    53d2:	1809      	adds	r1, r1, r0
    53d4:	00a4      	lsls	r4, r4, #2
    53d6:	5908      	ldr	r0, [r1, r4]
    53d8:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    53da:	25c0      	movs	r5, #192	; 0xc0
    53dc:	409d      	lsls	r5, r3
    53de:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    53e0:	4303      	orrs	r3, r0
    53e2:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    53e4:	2380      	movs	r3, #128	; 0x80
    53e6:	01db      	lsls	r3, r3, #7
    53e8:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    53ea:	4b10      	ldr	r3, [pc, #64]	; (542c <_ZN6SERCOM13initClockNVICEv+0xa4>)
    53ec:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    53ee:	785a      	ldrb	r2, [r3, #1]
    53f0:	b252      	sxtb	r2, r2
    53f2:	2a00      	cmp	r2, #0
    53f4:	dbfb      	blt.n	53ee <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    53f6:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    53f8:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    53fa:	2215      	movs	r2, #21
    53fc:	e7dd      	b.n	53ba <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    53fe:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    5400:	2216      	movs	r2, #22
    5402:	e7da      	b.n	53ba <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    5404:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    5406:	2217      	movs	r2, #23
    5408:	e7d7      	b.n	53ba <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    540a:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    540c:	2218      	movs	r2, #24
    540e:	e7d4      	b.n	53ba <_ZN6SERCOM13initClockNVICEv+0x32>
    5410:	42000800 	.word	0x42000800
    5414:	42000c00 	.word	0x42000c00
    5418:	42001000 	.word	0x42001000
    541c:	42001400 	.word	0x42001400
    5420:	42001800 	.word	0x42001800
    5424:	42001c00 	.word	0x42001c00
    5428:	e000e100 	.word	0xe000e100
    542c:	40000c00 	.word	0x40000c00

00005430 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    5430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5432:	0004      	movs	r4, r0
    5434:	0016      	movs	r6, r2
    5436:	000f      	movs	r7, r1
    5438:	001d      	movs	r5, r3
  initClockNVIC();
    543a:	f7ff ffa5 	bl	5388 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    543e:	0020      	movs	r0, r4
    5440:	f7ff fe4d 	bl	50de <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    5444:	221c      	movs	r2, #28
    5446:	00bb      	lsls	r3, r7, #2
    5448:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    544a:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    544c:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    544e:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    5450:	4313      	orrs	r3, r2
    5452:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    5454:	2384      	movs	r3, #132	; 0x84
    5456:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    5458:	2f01      	cmp	r7, #1
    545a:	d118      	bne.n	548e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    545c:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    545e:	2e01      	cmp	r6, #1
    5460:	d000      	beq.n	5464 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    5462:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    5464:	4b0a      	ldr	r3, [pc, #40]	; (5490 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    5466:	4369      	muls	r1, r5
    5468:	6818      	ldr	r0, [r3, #0]
    546a:	00c0      	lsls	r0, r0, #3
    546c:	f000 f966 	bl	573c <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    5470:	2207      	movs	r2, #7
    5472:	89a3      	ldrh	r3, [r4, #12]
    5474:	4002      	ands	r2, r0
    5476:	04db      	lsls	r3, r3, #19
    5478:	0352      	lsls	r2, r2, #13
    547a:	0cdb      	lsrs	r3, r3, #19
    547c:	4313      	orrs	r3, r2
    547e:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    5480:	0403      	lsls	r3, r0, #16
    5482:	89a0      	ldrh	r0, [r4, #12]
    5484:	0cdb      	lsrs	r3, r3, #19
    5486:	0b40      	lsrs	r0, r0, #13
    5488:	0340      	lsls	r0, r0, #13
    548a:	4318      	orrs	r0, r3
    548c:	81a0      	strh	r0, [r4, #12]
}
    548e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5490:	20000044 	.word	0x20000044

00005494 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
{
    5494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5496:	0007      	movs	r7, r0
    5498:	9301      	str	r3, [sp, #4]
    549a:	ab08      	add	r3, sp, #32
    549c:	781e      	ldrb	r6, [r3, #0]
    549e:	000d      	movs	r5, r1
    54a0:	0014      	movs	r4, r2
  resetSPI();
    54a2:	f7ff fe7d 	bl	51a0 <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    54a6:	0038      	movs	r0, r7
    54a8:	f7ff ff6e 	bl	5388 <_ZN6SERCOM13initClockNVICEv>
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    54ac:	22c0      	movs	r2, #192	; 0xc0
    54ae:	0524      	lsls	r4, r4, #20
    54b0:	0392      	lsls	r2, r2, #14
    54b2:	4014      	ands	r4, r2
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    54b4:	07b2      	lsls	r2, r6, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    54b6:	260c      	movs	r6, #12
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    54b8:	2107      	movs	r1, #7
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    54ba:	4316      	orrs	r6, r2
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    54bc:	9a01      	ldr	r2, [sp, #4]
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    54be:	4334      	orrs	r4, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    54c0:	400a      	ands	r2, r1
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    54c2:	26c0      	movs	r6, #192	; 0xc0
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    54c4:	0011      	movs	r1, r2
    54c6:	2280      	movs	r2, #128	; 0x80
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    54c8:	02b6      	lsls	r6, r6, #10
    54ca:	042d      	lsls	r5, r5, #16
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    54cc:	683b      	ldr	r3, [r7, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    54ce:	4035      	ands	r5, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    54d0:	0292      	lsls	r2, r2, #10
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    54d2:	4325      	orrs	r5, r4
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    54d4:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    54d6:	601d      	str	r5, [r3, #0]
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    54d8:	605a      	str	r2, [r3, #4]
}
    54da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000054dc <_ZN6SERCOM14initMasterWIREEm>:
{
    54dc:	b570      	push	{r4, r5, r6, lr}
    54de:	0005      	movs	r5, r0
    54e0:	000c      	movs	r4, r1
  initClockNVIC() ;
    54e2:	f7ff ff51 	bl	5388 <_ZN6SERCOM13initClockNVICEv>
  resetWIRE() ;
    54e6:	0028      	movs	r0, r5
    54e8:	f7ff fe84 	bl	51f4 <_ZN6SERCOM9resetWIREEv>
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    54ec:	2314      	movs	r3, #20
    54ee:	682d      	ldr	r5, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    54f0:	0061      	lsls	r1, r4, #1
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    54f2:	602b      	str	r3, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    54f4:	4b0c      	ldr	r3, [pc, #48]	; (5528 <_ZN6SERCOM14initMasterWIREEm+0x4c>)
    54f6:	681e      	ldr	r6, [r3, #0]
    54f8:	0030      	movs	r0, r6
    54fa:	f000 f91f 	bl	573c <__udivsi3>
    54fe:	490b      	ldr	r1, [pc, #44]	; (552c <_ZN6SERCOM14initMasterWIREEm+0x50>)
    5500:	0004      	movs	r4, r0
    5502:	0030      	movs	r0, r6
    5504:	f000 f91a 	bl	573c <__udivsi3>
    5508:	237d      	movs	r3, #125	; 0x7d
    550a:	21fa      	movs	r1, #250	; 0xfa
    550c:	4358      	muls	r0, r3
    550e:	00c9      	lsls	r1, r1, #3
    5510:	f000 f914 	bl	573c <__udivsi3>
    5514:	23ff      	movs	r3, #255	; 0xff
    5516:	1a24      	subs	r4, r4, r0
    5518:	68e8      	ldr	r0, [r5, #12]
    551a:	3c05      	subs	r4, #5
    551c:	401c      	ands	r4, r3
    551e:	4398      	bics	r0, r3
    5520:	4304      	orrs	r4, r0
    5522:	60ec      	str	r4, [r5, #12]
}
    5524:	bd70      	pop	{r4, r5, r6, pc}
    5526:	46c0      	nop			; (mov r8, r8)
    5528:	20000044 	.word	0x20000044
    552c:	000f4240 	.word	0x000f4240

00005530 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    5530:	203f      	movs	r0, #63	; 0x3f
    5532:	4770      	bx	lr

00005534 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    5534:	b513      	push	{r0, r1, r4, lr}
    5536:	466b      	mov	r3, sp
	return write(&c, 1);
    5538:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    553a:	71d9      	strb	r1, [r3, #7]
    553c:	3307      	adds	r3, #7
	return write(&c, 1);
    553e:	6854      	ldr	r4, [r2, #4]
    5540:	0019      	movs	r1, r3
    5542:	2201      	movs	r2, #1
    5544:	47a0      	blx	r4
}
    5546:	bd16      	pop	{r1, r2, r4, pc}

00005548 <_ZN7Serial_9availableEv>:
{
    5548:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    554a:	2102      	movs	r1, #2
    554c:	6900      	ldr	r0, [r0, #16]
    554e:	f7fc f991 	bl	1874 <_ZN14USBDeviceClass9availableEm>
}
    5552:	bd10      	pop	{r4, pc}

00005554 <_ZN7Serial_5flushEv>:
{
    5554:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    5556:	2103      	movs	r1, #3
    5558:	6900      	ldr	r0, [r0, #16]
    555a:	f7fc f9a1 	bl	18a0 <_ZN14USBDeviceClass5flushEm>
}
    555e:	bd10      	pop	{r4, pc}

00005560 <_ZN7Serial_5writeEPKhj>:
{
    5560:	b510      	push	{r4, lr}
    5562:	0013      	movs	r3, r2
    5564:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    5566:	000a      	movs	r2, r1
    5568:	6900      	ldr	r0, [r0, #16]
    556a:	2103      	movs	r1, #3
    556c:	f7fc fa92 	bl	1a94 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    5570:	2800      	cmp	r0, #0
    5572:	d101      	bne.n	5578 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    5574:	2301      	movs	r3, #1
    5576:	6063      	str	r3, [r4, #4]
}
    5578:	bd10      	pop	{r4, pc}
	...

0000557c <_ZN7Serial_4peekEv>:
{
    557c:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    557e:	4c05      	ldr	r4, [pc, #20]	; (5594 <_ZN7Serial_4peekEv+0x18>)
    5580:	6823      	ldr	r3, [r4, #0]
    5582:	1c5a      	adds	r2, r3, #1
    5584:	d104      	bne.n	5590 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    5586:	6803      	ldr	r3, [r0, #0]
    5588:	695b      	ldr	r3, [r3, #20]
    558a:	4798      	blx	r3
    558c:	0003      	movs	r3, r0
    558e:	6020      	str	r0, [r4, #0]
}
    5590:	0018      	movs	r0, r3
    5592:	bd10      	pop	{r4, pc}
    5594:	2000009c 	.word	0x2000009c

00005598 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    5598:	4b07      	ldr	r3, [pc, #28]	; (55b8 <_ZN7Serial_4readEv+0x20>)
{
    559a:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    559c:	6818      	ldr	r0, [r3, #0]
{
    559e:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    55a0:	1c41      	adds	r1, r0, #1
    55a2:	d003      	beq.n	55ac <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    55a4:	2201      	movs	r2, #1
    55a6:	4252      	negs	r2, r2
    55a8:	601a      	str	r2, [r3, #0]
}
    55aa:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    55ac:	2102      	movs	r1, #2
    55ae:	6910      	ldr	r0, [r2, #16]
    55b0:	f7fc fa62 	bl	1a78 <_ZN14USBDeviceClass4recvEm>
    55b4:	e7f9      	b.n	55aa <_ZN7Serial_4readEv+0x12>
    55b6:	46c0      	nop			; (mov r8, r8)
    55b8:	2000009c 	.word	0x2000009c

000055bc <_Z16CDC_GetInterfacePh>:
{
    55bc:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    55be:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    55c0:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
    55c2:	3302      	adds	r3, #2
    55c4:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    55c6:	4902      	ldr	r1, [pc, #8]	; (55d0 <_Z16CDC_GetInterfacePh+0x14>)
    55c8:	4802      	ldr	r0, [pc, #8]	; (55d4 <_Z16CDC_GetInterfacePh+0x18>)
    55ca:	f7fc fb0f 	bl	1bec <_ZN14USBDeviceClass11sendControlEPKvm>
}
    55ce:	bd10      	pop	{r4, pc}
    55d0:	20000058 	.word	0x20000058
    55d4:	200001c8 	.word	0x200001c8

000055d8 <_Z9CDC_SetupR8USBSetup>:
{
    55d8:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    55da:	7801      	ldrb	r1, [r0, #0]
{
    55dc:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    55de:	7842      	ldrb	r2, [r0, #1]
	return false;
    55e0:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    55e2:	29a1      	cmp	r1, #161	; 0xa1
    55e4:	d108      	bne.n	55f8 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    55e6:	2a21      	cmp	r2, #33	; 0x21
    55e8:	d105      	bne.n	55f6 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    55ea:	3a1a      	subs	r2, #26
    55ec:	4916      	ldr	r1, [pc, #88]	; (5648 <_Z9CDC_SetupR8USBSetup+0x70>)
    55ee:	4817      	ldr	r0, [pc, #92]	; (564c <_Z9CDC_SetupR8USBSetup+0x74>)
    55f0:	f7fc fafc 	bl	1bec <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    55f4:	2001      	movs	r0, #1
}
    55f6:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    55f8:	2921      	cmp	r1, #33	; 0x21
    55fa:	d1fc      	bne.n	55f6 <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    55fc:	2a20      	cmp	r2, #32
    55fe:	d111      	bne.n	5624 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    5600:	3a19      	subs	r2, #25
    5602:	4911      	ldr	r1, [pc, #68]	; (5648 <_Z9CDC_SetupR8USBSetup+0x70>)
    5604:	4811      	ldr	r0, [pc, #68]	; (564c <_Z9CDC_SetupR8USBSetup+0x74>)
    5606:	f7fc f98f 	bl	1928 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    560a:	2296      	movs	r2, #150	; 0x96
    560c:	4b0e      	ldr	r3, [pc, #56]	; (5648 <_Z9CDC_SetupR8USBSetup+0x70>)
    560e:	00d2      	lsls	r2, r2, #3
    5610:	6819      	ldr	r1, [r3, #0]
    5612:	4291      	cmp	r1, r2
    5614:	d103      	bne.n	561e <_Z9CDC_SetupR8USBSetup+0x46>
    5616:	2401      	movs	r4, #1
    5618:	79d8      	ldrb	r0, [r3, #7]
    561a:	4004      	ands	r4, r0
    561c:	d00e      	beq.n	563c <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    561e:	f7fb fa9b 	bl	b58 <cancelReset>
    5622:	e00e      	b.n	5642 <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    5624:	2a22      	cmp	r2, #34	; 0x22
    5626:	d103      	bne.n	5630 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    5628:	789a      	ldrb	r2, [r3, #2]
    562a:	4b07      	ldr	r3, [pc, #28]	; (5648 <_Z9CDC_SetupR8USBSetup+0x70>)
    562c:	71da      	strb	r2, [r3, #7]
    562e:	e7ec      	b.n	560a <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    5630:	2a23      	cmp	r2, #35	; 0x23
    5632:	d1e0      	bne.n	55f6 <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    5634:	885a      	ldrh	r2, [r3, #2]
    5636:	4b06      	ldr	r3, [pc, #24]	; (5650 <_Z9CDC_SetupR8USBSetup+0x78>)
    5638:	601a      	str	r2, [r3, #0]
			return false;
    563a:	e7dc      	b.n	55f6 <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    563c:	20fa      	movs	r0, #250	; 0xfa
    563e:	f7fb fa85 	bl	b4c <initiateReset>
			return false;
    5642:	2000      	movs	r0, #0
    5644:	e7d7      	b.n	55f6 <_Z9CDC_SetupR8USBSetup+0x1e>
    5646:	46c0      	nop			; (mov r8, r8)
    5648:	20000050 	.word	0x20000050
    564c:	200001c8 	.word	0x200001c8
    5650:	2000004c 	.word	0x2000004c

00005654 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    5654:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    5656:	2100      	movs	r1, #0
    5658:	4b05      	ldr	r3, [pc, #20]	; (5670 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    565a:	0092      	lsls	r2, r2, #2
    565c:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    565e:	4a05      	ldr	r2, [pc, #20]	; (5674 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    5660:	6059      	str	r1, [r3, #4]
    5662:	3208      	adds	r2, #8
    5664:	601a      	str	r2, [r3, #0]
    5666:	4a04      	ldr	r2, [pc, #16]	; (5678 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    5668:	7619      	strb	r1, [r3, #24]
    566a:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    566c:	4770      	bx	lr
    566e:	46c0      	nop			; (mov r8, r8)
    5670:	20000de0 	.word	0x20000de0
    5674:	000069e8 	.word	0x000069e8
    5678:	200001c8 	.word	0x200001c8

0000567c <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    567c:	b570      	push	{r4, r5, r6, lr}
    567e:	000e      	movs	r6, r1
	int sent = 0;
    5680:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5682:	6844      	ldr	r4, [r0, #4]
    5684:	2c00      	cmp	r4, #0
    5686:	d00b      	beq.n	56a0 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    5688:	6823      	ldr	r3, [r4, #0]
    568a:	0031      	movs	r1, r6
    568c:	685b      	ldr	r3, [r3, #4]
    568e:	0020      	movs	r0, r4
    5690:	4798      	blx	r3
		if (res < 0)
    5692:	2800      	cmp	r0, #0
    5694:	db02      	blt.n	569c <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    5696:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    5698:	68e4      	ldr	r4, [r4, #12]
    569a:	e7f3      	b.n	5684 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    569c:	2501      	movs	r5, #1
    569e:	426d      	negs	r5, r5
	}
	return sent;
}
    56a0:	0028      	movs	r0, r5
    56a2:	bd70      	pop	{r4, r5, r6, pc}

000056a4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    56a4:	b570      	push	{r4, r5, r6, lr}
    56a6:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    56a8:	6844      	ldr	r4, [r0, #4]
    56aa:	2c00      	cmp	r4, #0
    56ac:	d008      	beq.n	56c0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    56ae:	6823      	ldr	r3, [r4, #0]
    56b0:	0029      	movs	r1, r5
    56b2:	689b      	ldr	r3, [r3, #8]
    56b4:	0020      	movs	r0, r4
    56b6:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    56b8:	2800      	cmp	r0, #0
    56ba:	d102      	bne.n	56c2 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    56bc:	68e4      	ldr	r4, [r4, #12]
    56be:	e7f4      	b.n	56aa <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    56c0:	0020      	movs	r0, r4
}
    56c2:	bd70      	pop	{r4, r5, r6, pc}

000056c4 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    56c4:	b570      	push	{r4, r5, r6, lr}
    56c6:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    56c8:	6844      	ldr	r4, [r0, #4]
    56ca:	2c00      	cmp	r4, #0
    56cc:	d007      	beq.n	56de <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    56ce:	6823      	ldr	r3, [r4, #0]
    56d0:	0029      	movs	r1, r5
    56d2:	0020      	movs	r0, r4
    56d4:	68db      	ldr	r3, [r3, #12]
    56d6:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    56d8:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    56da:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    56dc:	e7f5      	b.n	56ca <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    56de:	702c      	strb	r4, [r5, #0]
}
    56e0:	bd70      	pop	{r4, r5, r6, pc}

000056e2 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    56e2:	b570      	push	{r4, r5, r6, lr}
    56e4:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    56e6:	6844      	ldr	r4, [r0, #4]
    56e8:	2c00      	cmp	r4, #0
    56ea:	d008      	beq.n	56fe <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    56ec:	6823      	ldr	r3, [r4, #0]
    56ee:	0029      	movs	r1, r5
    56f0:	681b      	ldr	r3, [r3, #0]
    56f2:	0020      	movs	r0, r4
    56f4:	4798      	blx	r3
    56f6:	2800      	cmp	r0, #0
    56f8:	d102      	bne.n	5700 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    56fa:	68e4      	ldr	r4, [r4, #12]
    56fc:	e7f4      	b.n	56e8 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    56fe:	0020      	movs	r0, r4
}
    5700:	bd70      	pop	{r4, r5, r6, pc}
	...

00005704 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    5704:	2101      	movs	r1, #1
    5706:	4a06      	ldr	r2, [pc, #24]	; (5720 <_Z12PluggableUSBv+0x1c>)
{
    5708:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    570a:	6813      	ldr	r3, [r2, #0]
    570c:	4805      	ldr	r0, [pc, #20]	; (5724 <_Z12PluggableUSBv+0x20>)
    570e:	400b      	ands	r3, r1
    5710:	d105      	bne.n	571e <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    5712:	2402      	movs	r4, #2
    5714:	7004      	strb	r4, [r0, #0]
    5716:	1924      	adds	r4, r4, r4
    5718:	7044      	strb	r4, [r0, #1]
    571a:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    571c:	6011      	str	r1, [r2, #0]
}
    571e:	bd10      	pop	{r4, pc}
    5720:	20000dfc 	.word	0x20000dfc
    5724:	20000e00 	.word	0x20000e00

00005728 <__gnu_thumb1_case_uqi>:
    5728:	b402      	push	{r1}
    572a:	4671      	mov	r1, lr
    572c:	0849      	lsrs	r1, r1, #1
    572e:	0049      	lsls	r1, r1, #1
    5730:	5c09      	ldrb	r1, [r1, r0]
    5732:	0049      	lsls	r1, r1, #1
    5734:	448e      	add	lr, r1
    5736:	bc02      	pop	{r1}
    5738:	4770      	bx	lr
    573a:	46c0      	nop			; (mov r8, r8)

0000573c <__udivsi3>:
    573c:	2200      	movs	r2, #0
    573e:	0843      	lsrs	r3, r0, #1
    5740:	428b      	cmp	r3, r1
    5742:	d374      	bcc.n	582e <__udivsi3+0xf2>
    5744:	0903      	lsrs	r3, r0, #4
    5746:	428b      	cmp	r3, r1
    5748:	d35f      	bcc.n	580a <__udivsi3+0xce>
    574a:	0a03      	lsrs	r3, r0, #8
    574c:	428b      	cmp	r3, r1
    574e:	d344      	bcc.n	57da <__udivsi3+0x9e>
    5750:	0b03      	lsrs	r3, r0, #12
    5752:	428b      	cmp	r3, r1
    5754:	d328      	bcc.n	57a8 <__udivsi3+0x6c>
    5756:	0c03      	lsrs	r3, r0, #16
    5758:	428b      	cmp	r3, r1
    575a:	d30d      	bcc.n	5778 <__udivsi3+0x3c>
    575c:	22ff      	movs	r2, #255	; 0xff
    575e:	0209      	lsls	r1, r1, #8
    5760:	ba12      	rev	r2, r2
    5762:	0c03      	lsrs	r3, r0, #16
    5764:	428b      	cmp	r3, r1
    5766:	d302      	bcc.n	576e <__udivsi3+0x32>
    5768:	1212      	asrs	r2, r2, #8
    576a:	0209      	lsls	r1, r1, #8
    576c:	d065      	beq.n	583a <__udivsi3+0xfe>
    576e:	0b03      	lsrs	r3, r0, #12
    5770:	428b      	cmp	r3, r1
    5772:	d319      	bcc.n	57a8 <__udivsi3+0x6c>
    5774:	e000      	b.n	5778 <__udivsi3+0x3c>
    5776:	0a09      	lsrs	r1, r1, #8
    5778:	0bc3      	lsrs	r3, r0, #15
    577a:	428b      	cmp	r3, r1
    577c:	d301      	bcc.n	5782 <__udivsi3+0x46>
    577e:	03cb      	lsls	r3, r1, #15
    5780:	1ac0      	subs	r0, r0, r3
    5782:	4152      	adcs	r2, r2
    5784:	0b83      	lsrs	r3, r0, #14
    5786:	428b      	cmp	r3, r1
    5788:	d301      	bcc.n	578e <__udivsi3+0x52>
    578a:	038b      	lsls	r3, r1, #14
    578c:	1ac0      	subs	r0, r0, r3
    578e:	4152      	adcs	r2, r2
    5790:	0b43      	lsrs	r3, r0, #13
    5792:	428b      	cmp	r3, r1
    5794:	d301      	bcc.n	579a <__udivsi3+0x5e>
    5796:	034b      	lsls	r3, r1, #13
    5798:	1ac0      	subs	r0, r0, r3
    579a:	4152      	adcs	r2, r2
    579c:	0b03      	lsrs	r3, r0, #12
    579e:	428b      	cmp	r3, r1
    57a0:	d301      	bcc.n	57a6 <__udivsi3+0x6a>
    57a2:	030b      	lsls	r3, r1, #12
    57a4:	1ac0      	subs	r0, r0, r3
    57a6:	4152      	adcs	r2, r2
    57a8:	0ac3      	lsrs	r3, r0, #11
    57aa:	428b      	cmp	r3, r1
    57ac:	d301      	bcc.n	57b2 <__udivsi3+0x76>
    57ae:	02cb      	lsls	r3, r1, #11
    57b0:	1ac0      	subs	r0, r0, r3
    57b2:	4152      	adcs	r2, r2
    57b4:	0a83      	lsrs	r3, r0, #10
    57b6:	428b      	cmp	r3, r1
    57b8:	d301      	bcc.n	57be <__udivsi3+0x82>
    57ba:	028b      	lsls	r3, r1, #10
    57bc:	1ac0      	subs	r0, r0, r3
    57be:	4152      	adcs	r2, r2
    57c0:	0a43      	lsrs	r3, r0, #9
    57c2:	428b      	cmp	r3, r1
    57c4:	d301      	bcc.n	57ca <__udivsi3+0x8e>
    57c6:	024b      	lsls	r3, r1, #9
    57c8:	1ac0      	subs	r0, r0, r3
    57ca:	4152      	adcs	r2, r2
    57cc:	0a03      	lsrs	r3, r0, #8
    57ce:	428b      	cmp	r3, r1
    57d0:	d301      	bcc.n	57d6 <__udivsi3+0x9a>
    57d2:	020b      	lsls	r3, r1, #8
    57d4:	1ac0      	subs	r0, r0, r3
    57d6:	4152      	adcs	r2, r2
    57d8:	d2cd      	bcs.n	5776 <__udivsi3+0x3a>
    57da:	09c3      	lsrs	r3, r0, #7
    57dc:	428b      	cmp	r3, r1
    57de:	d301      	bcc.n	57e4 <__udivsi3+0xa8>
    57e0:	01cb      	lsls	r3, r1, #7
    57e2:	1ac0      	subs	r0, r0, r3
    57e4:	4152      	adcs	r2, r2
    57e6:	0983      	lsrs	r3, r0, #6
    57e8:	428b      	cmp	r3, r1
    57ea:	d301      	bcc.n	57f0 <__udivsi3+0xb4>
    57ec:	018b      	lsls	r3, r1, #6
    57ee:	1ac0      	subs	r0, r0, r3
    57f0:	4152      	adcs	r2, r2
    57f2:	0943      	lsrs	r3, r0, #5
    57f4:	428b      	cmp	r3, r1
    57f6:	d301      	bcc.n	57fc <__udivsi3+0xc0>
    57f8:	014b      	lsls	r3, r1, #5
    57fa:	1ac0      	subs	r0, r0, r3
    57fc:	4152      	adcs	r2, r2
    57fe:	0903      	lsrs	r3, r0, #4
    5800:	428b      	cmp	r3, r1
    5802:	d301      	bcc.n	5808 <__udivsi3+0xcc>
    5804:	010b      	lsls	r3, r1, #4
    5806:	1ac0      	subs	r0, r0, r3
    5808:	4152      	adcs	r2, r2
    580a:	08c3      	lsrs	r3, r0, #3
    580c:	428b      	cmp	r3, r1
    580e:	d301      	bcc.n	5814 <__udivsi3+0xd8>
    5810:	00cb      	lsls	r3, r1, #3
    5812:	1ac0      	subs	r0, r0, r3
    5814:	4152      	adcs	r2, r2
    5816:	0883      	lsrs	r3, r0, #2
    5818:	428b      	cmp	r3, r1
    581a:	d301      	bcc.n	5820 <__udivsi3+0xe4>
    581c:	008b      	lsls	r3, r1, #2
    581e:	1ac0      	subs	r0, r0, r3
    5820:	4152      	adcs	r2, r2
    5822:	0843      	lsrs	r3, r0, #1
    5824:	428b      	cmp	r3, r1
    5826:	d301      	bcc.n	582c <__udivsi3+0xf0>
    5828:	004b      	lsls	r3, r1, #1
    582a:	1ac0      	subs	r0, r0, r3
    582c:	4152      	adcs	r2, r2
    582e:	1a41      	subs	r1, r0, r1
    5830:	d200      	bcs.n	5834 <__udivsi3+0xf8>
    5832:	4601      	mov	r1, r0
    5834:	4152      	adcs	r2, r2
    5836:	4610      	mov	r0, r2
    5838:	4770      	bx	lr
    583a:	e7ff      	b.n	583c <__udivsi3+0x100>
    583c:	b501      	push	{r0, lr}
    583e:	2000      	movs	r0, #0
    5840:	f000 f8f0 	bl	5a24 <__aeabi_idiv0>
    5844:	bd02      	pop	{r1, pc}
    5846:	46c0      	nop			; (mov r8, r8)

00005848 <__aeabi_uidivmod>:
    5848:	2900      	cmp	r1, #0
    584a:	d0f7      	beq.n	583c <__udivsi3+0x100>
    584c:	e776      	b.n	573c <__udivsi3>
    584e:	4770      	bx	lr

00005850 <__divsi3>:
    5850:	4603      	mov	r3, r0
    5852:	430b      	orrs	r3, r1
    5854:	d47f      	bmi.n	5956 <__divsi3+0x106>
    5856:	2200      	movs	r2, #0
    5858:	0843      	lsrs	r3, r0, #1
    585a:	428b      	cmp	r3, r1
    585c:	d374      	bcc.n	5948 <__divsi3+0xf8>
    585e:	0903      	lsrs	r3, r0, #4
    5860:	428b      	cmp	r3, r1
    5862:	d35f      	bcc.n	5924 <__divsi3+0xd4>
    5864:	0a03      	lsrs	r3, r0, #8
    5866:	428b      	cmp	r3, r1
    5868:	d344      	bcc.n	58f4 <__divsi3+0xa4>
    586a:	0b03      	lsrs	r3, r0, #12
    586c:	428b      	cmp	r3, r1
    586e:	d328      	bcc.n	58c2 <__divsi3+0x72>
    5870:	0c03      	lsrs	r3, r0, #16
    5872:	428b      	cmp	r3, r1
    5874:	d30d      	bcc.n	5892 <__divsi3+0x42>
    5876:	22ff      	movs	r2, #255	; 0xff
    5878:	0209      	lsls	r1, r1, #8
    587a:	ba12      	rev	r2, r2
    587c:	0c03      	lsrs	r3, r0, #16
    587e:	428b      	cmp	r3, r1
    5880:	d302      	bcc.n	5888 <__divsi3+0x38>
    5882:	1212      	asrs	r2, r2, #8
    5884:	0209      	lsls	r1, r1, #8
    5886:	d065      	beq.n	5954 <__divsi3+0x104>
    5888:	0b03      	lsrs	r3, r0, #12
    588a:	428b      	cmp	r3, r1
    588c:	d319      	bcc.n	58c2 <__divsi3+0x72>
    588e:	e000      	b.n	5892 <__divsi3+0x42>
    5890:	0a09      	lsrs	r1, r1, #8
    5892:	0bc3      	lsrs	r3, r0, #15
    5894:	428b      	cmp	r3, r1
    5896:	d301      	bcc.n	589c <__divsi3+0x4c>
    5898:	03cb      	lsls	r3, r1, #15
    589a:	1ac0      	subs	r0, r0, r3
    589c:	4152      	adcs	r2, r2
    589e:	0b83      	lsrs	r3, r0, #14
    58a0:	428b      	cmp	r3, r1
    58a2:	d301      	bcc.n	58a8 <__divsi3+0x58>
    58a4:	038b      	lsls	r3, r1, #14
    58a6:	1ac0      	subs	r0, r0, r3
    58a8:	4152      	adcs	r2, r2
    58aa:	0b43      	lsrs	r3, r0, #13
    58ac:	428b      	cmp	r3, r1
    58ae:	d301      	bcc.n	58b4 <__divsi3+0x64>
    58b0:	034b      	lsls	r3, r1, #13
    58b2:	1ac0      	subs	r0, r0, r3
    58b4:	4152      	adcs	r2, r2
    58b6:	0b03      	lsrs	r3, r0, #12
    58b8:	428b      	cmp	r3, r1
    58ba:	d301      	bcc.n	58c0 <__divsi3+0x70>
    58bc:	030b      	lsls	r3, r1, #12
    58be:	1ac0      	subs	r0, r0, r3
    58c0:	4152      	adcs	r2, r2
    58c2:	0ac3      	lsrs	r3, r0, #11
    58c4:	428b      	cmp	r3, r1
    58c6:	d301      	bcc.n	58cc <__divsi3+0x7c>
    58c8:	02cb      	lsls	r3, r1, #11
    58ca:	1ac0      	subs	r0, r0, r3
    58cc:	4152      	adcs	r2, r2
    58ce:	0a83      	lsrs	r3, r0, #10
    58d0:	428b      	cmp	r3, r1
    58d2:	d301      	bcc.n	58d8 <__divsi3+0x88>
    58d4:	028b      	lsls	r3, r1, #10
    58d6:	1ac0      	subs	r0, r0, r3
    58d8:	4152      	adcs	r2, r2
    58da:	0a43      	lsrs	r3, r0, #9
    58dc:	428b      	cmp	r3, r1
    58de:	d301      	bcc.n	58e4 <__divsi3+0x94>
    58e0:	024b      	lsls	r3, r1, #9
    58e2:	1ac0      	subs	r0, r0, r3
    58e4:	4152      	adcs	r2, r2
    58e6:	0a03      	lsrs	r3, r0, #8
    58e8:	428b      	cmp	r3, r1
    58ea:	d301      	bcc.n	58f0 <__divsi3+0xa0>
    58ec:	020b      	lsls	r3, r1, #8
    58ee:	1ac0      	subs	r0, r0, r3
    58f0:	4152      	adcs	r2, r2
    58f2:	d2cd      	bcs.n	5890 <__divsi3+0x40>
    58f4:	09c3      	lsrs	r3, r0, #7
    58f6:	428b      	cmp	r3, r1
    58f8:	d301      	bcc.n	58fe <__divsi3+0xae>
    58fa:	01cb      	lsls	r3, r1, #7
    58fc:	1ac0      	subs	r0, r0, r3
    58fe:	4152      	adcs	r2, r2
    5900:	0983      	lsrs	r3, r0, #6
    5902:	428b      	cmp	r3, r1
    5904:	d301      	bcc.n	590a <__divsi3+0xba>
    5906:	018b      	lsls	r3, r1, #6
    5908:	1ac0      	subs	r0, r0, r3
    590a:	4152      	adcs	r2, r2
    590c:	0943      	lsrs	r3, r0, #5
    590e:	428b      	cmp	r3, r1
    5910:	d301      	bcc.n	5916 <__divsi3+0xc6>
    5912:	014b      	lsls	r3, r1, #5
    5914:	1ac0      	subs	r0, r0, r3
    5916:	4152      	adcs	r2, r2
    5918:	0903      	lsrs	r3, r0, #4
    591a:	428b      	cmp	r3, r1
    591c:	d301      	bcc.n	5922 <__divsi3+0xd2>
    591e:	010b      	lsls	r3, r1, #4
    5920:	1ac0      	subs	r0, r0, r3
    5922:	4152      	adcs	r2, r2
    5924:	08c3      	lsrs	r3, r0, #3
    5926:	428b      	cmp	r3, r1
    5928:	d301      	bcc.n	592e <__divsi3+0xde>
    592a:	00cb      	lsls	r3, r1, #3
    592c:	1ac0      	subs	r0, r0, r3
    592e:	4152      	adcs	r2, r2
    5930:	0883      	lsrs	r3, r0, #2
    5932:	428b      	cmp	r3, r1
    5934:	d301      	bcc.n	593a <__divsi3+0xea>
    5936:	008b      	lsls	r3, r1, #2
    5938:	1ac0      	subs	r0, r0, r3
    593a:	4152      	adcs	r2, r2
    593c:	0843      	lsrs	r3, r0, #1
    593e:	428b      	cmp	r3, r1
    5940:	d301      	bcc.n	5946 <__divsi3+0xf6>
    5942:	004b      	lsls	r3, r1, #1
    5944:	1ac0      	subs	r0, r0, r3
    5946:	4152      	adcs	r2, r2
    5948:	1a41      	subs	r1, r0, r1
    594a:	d200      	bcs.n	594e <__divsi3+0xfe>
    594c:	4601      	mov	r1, r0
    594e:	4152      	adcs	r2, r2
    5950:	4610      	mov	r0, r2
    5952:	4770      	bx	lr
    5954:	e05d      	b.n	5a12 <__divsi3+0x1c2>
    5956:	0fca      	lsrs	r2, r1, #31
    5958:	d000      	beq.n	595c <__divsi3+0x10c>
    595a:	4249      	negs	r1, r1
    595c:	1003      	asrs	r3, r0, #32
    595e:	d300      	bcc.n	5962 <__divsi3+0x112>
    5960:	4240      	negs	r0, r0
    5962:	4053      	eors	r3, r2
    5964:	2200      	movs	r2, #0
    5966:	469c      	mov	ip, r3
    5968:	0903      	lsrs	r3, r0, #4
    596a:	428b      	cmp	r3, r1
    596c:	d32d      	bcc.n	59ca <__divsi3+0x17a>
    596e:	0a03      	lsrs	r3, r0, #8
    5970:	428b      	cmp	r3, r1
    5972:	d312      	bcc.n	599a <__divsi3+0x14a>
    5974:	22fc      	movs	r2, #252	; 0xfc
    5976:	0189      	lsls	r1, r1, #6
    5978:	ba12      	rev	r2, r2
    597a:	0a03      	lsrs	r3, r0, #8
    597c:	428b      	cmp	r3, r1
    597e:	d30c      	bcc.n	599a <__divsi3+0x14a>
    5980:	0189      	lsls	r1, r1, #6
    5982:	1192      	asrs	r2, r2, #6
    5984:	428b      	cmp	r3, r1
    5986:	d308      	bcc.n	599a <__divsi3+0x14a>
    5988:	0189      	lsls	r1, r1, #6
    598a:	1192      	asrs	r2, r2, #6
    598c:	428b      	cmp	r3, r1
    598e:	d304      	bcc.n	599a <__divsi3+0x14a>
    5990:	0189      	lsls	r1, r1, #6
    5992:	d03a      	beq.n	5a0a <__divsi3+0x1ba>
    5994:	1192      	asrs	r2, r2, #6
    5996:	e000      	b.n	599a <__divsi3+0x14a>
    5998:	0989      	lsrs	r1, r1, #6
    599a:	09c3      	lsrs	r3, r0, #7
    599c:	428b      	cmp	r3, r1
    599e:	d301      	bcc.n	59a4 <__divsi3+0x154>
    59a0:	01cb      	lsls	r3, r1, #7
    59a2:	1ac0      	subs	r0, r0, r3
    59a4:	4152      	adcs	r2, r2
    59a6:	0983      	lsrs	r3, r0, #6
    59a8:	428b      	cmp	r3, r1
    59aa:	d301      	bcc.n	59b0 <__divsi3+0x160>
    59ac:	018b      	lsls	r3, r1, #6
    59ae:	1ac0      	subs	r0, r0, r3
    59b0:	4152      	adcs	r2, r2
    59b2:	0943      	lsrs	r3, r0, #5
    59b4:	428b      	cmp	r3, r1
    59b6:	d301      	bcc.n	59bc <__divsi3+0x16c>
    59b8:	014b      	lsls	r3, r1, #5
    59ba:	1ac0      	subs	r0, r0, r3
    59bc:	4152      	adcs	r2, r2
    59be:	0903      	lsrs	r3, r0, #4
    59c0:	428b      	cmp	r3, r1
    59c2:	d301      	bcc.n	59c8 <__divsi3+0x178>
    59c4:	010b      	lsls	r3, r1, #4
    59c6:	1ac0      	subs	r0, r0, r3
    59c8:	4152      	adcs	r2, r2
    59ca:	08c3      	lsrs	r3, r0, #3
    59cc:	428b      	cmp	r3, r1
    59ce:	d301      	bcc.n	59d4 <__divsi3+0x184>
    59d0:	00cb      	lsls	r3, r1, #3
    59d2:	1ac0      	subs	r0, r0, r3
    59d4:	4152      	adcs	r2, r2
    59d6:	0883      	lsrs	r3, r0, #2
    59d8:	428b      	cmp	r3, r1
    59da:	d301      	bcc.n	59e0 <__divsi3+0x190>
    59dc:	008b      	lsls	r3, r1, #2
    59de:	1ac0      	subs	r0, r0, r3
    59e0:	4152      	adcs	r2, r2
    59e2:	d2d9      	bcs.n	5998 <__divsi3+0x148>
    59e4:	0843      	lsrs	r3, r0, #1
    59e6:	428b      	cmp	r3, r1
    59e8:	d301      	bcc.n	59ee <__divsi3+0x19e>
    59ea:	004b      	lsls	r3, r1, #1
    59ec:	1ac0      	subs	r0, r0, r3
    59ee:	4152      	adcs	r2, r2
    59f0:	1a41      	subs	r1, r0, r1
    59f2:	d200      	bcs.n	59f6 <__divsi3+0x1a6>
    59f4:	4601      	mov	r1, r0
    59f6:	4663      	mov	r3, ip
    59f8:	4152      	adcs	r2, r2
    59fa:	105b      	asrs	r3, r3, #1
    59fc:	4610      	mov	r0, r2
    59fe:	d301      	bcc.n	5a04 <__divsi3+0x1b4>
    5a00:	4240      	negs	r0, r0
    5a02:	2b00      	cmp	r3, #0
    5a04:	d500      	bpl.n	5a08 <__divsi3+0x1b8>
    5a06:	4249      	negs	r1, r1
    5a08:	4770      	bx	lr
    5a0a:	4663      	mov	r3, ip
    5a0c:	105b      	asrs	r3, r3, #1
    5a0e:	d300      	bcc.n	5a12 <__divsi3+0x1c2>
    5a10:	4240      	negs	r0, r0
    5a12:	b501      	push	{r0, lr}
    5a14:	2000      	movs	r0, #0
    5a16:	f000 f805 	bl	5a24 <__aeabi_idiv0>
    5a1a:	bd02      	pop	{r1, pc}

00005a1c <__aeabi_idivmod>:
    5a1c:	2900      	cmp	r1, #0
    5a1e:	d0f8      	beq.n	5a12 <__divsi3+0x1c2>
    5a20:	e716      	b.n	5850 <__divsi3>
    5a22:	4770      	bx	lr

00005a24 <__aeabi_idiv0>:
    5a24:	4770      	bx	lr
    5a26:	46c0      	nop			; (mov r8, r8)

00005a28 <__libc_init_array>:
    5a28:	b570      	push	{r4, r5, r6, lr}
    5a2a:	2600      	movs	r6, #0
    5a2c:	4d0c      	ldr	r5, [pc, #48]	; (5a60 <__libc_init_array+0x38>)
    5a2e:	4c0d      	ldr	r4, [pc, #52]	; (5a64 <__libc_init_array+0x3c>)
    5a30:	1b64      	subs	r4, r4, r5
    5a32:	10a4      	asrs	r4, r4, #2
    5a34:	42a6      	cmp	r6, r4
    5a36:	d109      	bne.n	5a4c <__libc_init_array+0x24>
    5a38:	2600      	movs	r6, #0
    5a3a:	f000 f981 	bl	5d40 <_init>
    5a3e:	4d0a      	ldr	r5, [pc, #40]	; (5a68 <__libc_init_array+0x40>)
    5a40:	4c0a      	ldr	r4, [pc, #40]	; (5a6c <__libc_init_array+0x44>)
    5a42:	1b64      	subs	r4, r4, r5
    5a44:	10a4      	asrs	r4, r4, #2
    5a46:	42a6      	cmp	r6, r4
    5a48:	d105      	bne.n	5a56 <__libc_init_array+0x2e>
    5a4a:	bd70      	pop	{r4, r5, r6, pc}
    5a4c:	00b3      	lsls	r3, r6, #2
    5a4e:	58eb      	ldr	r3, [r5, r3]
    5a50:	4798      	blx	r3
    5a52:	3601      	adds	r6, #1
    5a54:	e7ee      	b.n	5a34 <__libc_init_array+0xc>
    5a56:	00b3      	lsls	r3, r6, #2
    5a58:	58eb      	ldr	r3, [r5, r3]
    5a5a:	4798      	blx	r3
    5a5c:	3601      	adds	r6, #1
    5a5e:	e7f2      	b.n	5a46 <__libc_init_array+0x1e>
    5a60:	20000104 	.word	0x20000104
    5a64:	20000104 	.word	0x20000104
    5a68:	20000104 	.word	0x20000104
    5a6c:	20000128 	.word	0x20000128

00005a70 <malloc>:
    5a70:	b510      	push	{r4, lr}
    5a72:	4b03      	ldr	r3, [pc, #12]	; (5a80 <malloc+0x10>)
    5a74:	0001      	movs	r1, r0
    5a76:	6818      	ldr	r0, [r3, #0]
    5a78:	f000 f878 	bl	5b6c <_malloc_r>
    5a7c:	bd10      	pop	{r4, pc}
    5a7e:	46c0      	nop			; (mov r8, r8)
    5a80:	200000a0 	.word	0x200000a0

00005a84 <free>:
    5a84:	b510      	push	{r4, lr}
    5a86:	4b03      	ldr	r3, [pc, #12]	; (5a94 <free+0x10>)
    5a88:	0001      	movs	r1, r0
    5a8a:	6818      	ldr	r0, [r3, #0]
    5a8c:	f000 f824 	bl	5ad8 <_free_r>
    5a90:	bd10      	pop	{r4, pc}
    5a92:	46c0      	nop			; (mov r8, r8)
    5a94:	200000a0 	.word	0x200000a0

00005a98 <memcmp>:
    5a98:	b530      	push	{r4, r5, lr}
    5a9a:	2400      	movs	r4, #0
    5a9c:	42a2      	cmp	r2, r4
    5a9e:	d101      	bne.n	5aa4 <memcmp+0xc>
    5aa0:	2000      	movs	r0, #0
    5aa2:	e005      	b.n	5ab0 <memcmp+0x18>
    5aa4:	5d03      	ldrb	r3, [r0, r4]
    5aa6:	1c65      	adds	r5, r4, #1
    5aa8:	5d0c      	ldrb	r4, [r1, r4]
    5aaa:	42a3      	cmp	r3, r4
    5aac:	d001      	beq.n	5ab2 <memcmp+0x1a>
    5aae:	1b18      	subs	r0, r3, r4
    5ab0:	bd30      	pop	{r4, r5, pc}
    5ab2:	002c      	movs	r4, r5
    5ab4:	e7f2      	b.n	5a9c <memcmp+0x4>

00005ab6 <memcpy>:
    5ab6:	2300      	movs	r3, #0
    5ab8:	b510      	push	{r4, lr}
    5aba:	429a      	cmp	r2, r3
    5abc:	d100      	bne.n	5ac0 <memcpy+0xa>
    5abe:	bd10      	pop	{r4, pc}
    5ac0:	5ccc      	ldrb	r4, [r1, r3]
    5ac2:	54c4      	strb	r4, [r0, r3]
    5ac4:	3301      	adds	r3, #1
    5ac6:	e7f8      	b.n	5aba <memcpy+0x4>

00005ac8 <memset>:
    5ac8:	0003      	movs	r3, r0
    5aca:	1882      	adds	r2, r0, r2
    5acc:	4293      	cmp	r3, r2
    5ace:	d100      	bne.n	5ad2 <memset+0xa>
    5ad0:	4770      	bx	lr
    5ad2:	7019      	strb	r1, [r3, #0]
    5ad4:	3301      	adds	r3, #1
    5ad6:	e7f9      	b.n	5acc <memset+0x4>

00005ad8 <_free_r>:
    5ad8:	b570      	push	{r4, r5, r6, lr}
    5ada:	0005      	movs	r5, r0
    5adc:	2900      	cmp	r1, #0
    5ade:	d010      	beq.n	5b02 <_free_r+0x2a>
    5ae0:	1f0c      	subs	r4, r1, #4
    5ae2:	6823      	ldr	r3, [r4, #0]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	da00      	bge.n	5aea <_free_r+0x12>
    5ae8:	18e4      	adds	r4, r4, r3
    5aea:	0028      	movs	r0, r5
    5aec:	f000 f8ea 	bl	5cc4 <__malloc_lock>
    5af0:	4a1d      	ldr	r2, [pc, #116]	; (5b68 <_free_r+0x90>)
    5af2:	6813      	ldr	r3, [r2, #0]
    5af4:	2b00      	cmp	r3, #0
    5af6:	d105      	bne.n	5b04 <_free_r+0x2c>
    5af8:	6063      	str	r3, [r4, #4]
    5afa:	6014      	str	r4, [r2, #0]
    5afc:	0028      	movs	r0, r5
    5afe:	f000 f8e2 	bl	5cc6 <__malloc_unlock>
    5b02:	bd70      	pop	{r4, r5, r6, pc}
    5b04:	42a3      	cmp	r3, r4
    5b06:	d909      	bls.n	5b1c <_free_r+0x44>
    5b08:	6821      	ldr	r1, [r4, #0]
    5b0a:	1860      	adds	r0, r4, r1
    5b0c:	4283      	cmp	r3, r0
    5b0e:	d1f3      	bne.n	5af8 <_free_r+0x20>
    5b10:	6818      	ldr	r0, [r3, #0]
    5b12:	685b      	ldr	r3, [r3, #4]
    5b14:	1841      	adds	r1, r0, r1
    5b16:	6021      	str	r1, [r4, #0]
    5b18:	e7ee      	b.n	5af8 <_free_r+0x20>
    5b1a:	0013      	movs	r3, r2
    5b1c:	685a      	ldr	r2, [r3, #4]
    5b1e:	2a00      	cmp	r2, #0
    5b20:	d001      	beq.n	5b26 <_free_r+0x4e>
    5b22:	42a2      	cmp	r2, r4
    5b24:	d9f9      	bls.n	5b1a <_free_r+0x42>
    5b26:	6819      	ldr	r1, [r3, #0]
    5b28:	1858      	adds	r0, r3, r1
    5b2a:	42a0      	cmp	r0, r4
    5b2c:	d10b      	bne.n	5b46 <_free_r+0x6e>
    5b2e:	6820      	ldr	r0, [r4, #0]
    5b30:	1809      	adds	r1, r1, r0
    5b32:	1858      	adds	r0, r3, r1
    5b34:	6019      	str	r1, [r3, #0]
    5b36:	4282      	cmp	r2, r0
    5b38:	d1e0      	bne.n	5afc <_free_r+0x24>
    5b3a:	6810      	ldr	r0, [r2, #0]
    5b3c:	6852      	ldr	r2, [r2, #4]
    5b3e:	1841      	adds	r1, r0, r1
    5b40:	6019      	str	r1, [r3, #0]
    5b42:	605a      	str	r2, [r3, #4]
    5b44:	e7da      	b.n	5afc <_free_r+0x24>
    5b46:	42a0      	cmp	r0, r4
    5b48:	d902      	bls.n	5b50 <_free_r+0x78>
    5b4a:	230c      	movs	r3, #12
    5b4c:	602b      	str	r3, [r5, #0]
    5b4e:	e7d5      	b.n	5afc <_free_r+0x24>
    5b50:	6821      	ldr	r1, [r4, #0]
    5b52:	1860      	adds	r0, r4, r1
    5b54:	4282      	cmp	r2, r0
    5b56:	d103      	bne.n	5b60 <_free_r+0x88>
    5b58:	6810      	ldr	r0, [r2, #0]
    5b5a:	6852      	ldr	r2, [r2, #4]
    5b5c:	1841      	adds	r1, r0, r1
    5b5e:	6021      	str	r1, [r4, #0]
    5b60:	6062      	str	r2, [r4, #4]
    5b62:	605c      	str	r4, [r3, #4]
    5b64:	e7ca      	b.n	5afc <_free_r+0x24>
    5b66:	46c0      	nop			; (mov r8, r8)
    5b68:	20000e08 	.word	0x20000e08

00005b6c <_malloc_r>:
    5b6c:	2303      	movs	r3, #3
    5b6e:	b570      	push	{r4, r5, r6, lr}
    5b70:	1ccd      	adds	r5, r1, #3
    5b72:	439d      	bics	r5, r3
    5b74:	3508      	adds	r5, #8
    5b76:	0006      	movs	r6, r0
    5b78:	2d0c      	cmp	r5, #12
    5b7a:	d21e      	bcs.n	5bba <_malloc_r+0x4e>
    5b7c:	250c      	movs	r5, #12
    5b7e:	42a9      	cmp	r1, r5
    5b80:	d81d      	bhi.n	5bbe <_malloc_r+0x52>
    5b82:	0030      	movs	r0, r6
    5b84:	f000 f89e 	bl	5cc4 <__malloc_lock>
    5b88:	4a25      	ldr	r2, [pc, #148]	; (5c20 <_malloc_r+0xb4>)
    5b8a:	6814      	ldr	r4, [r2, #0]
    5b8c:	0021      	movs	r1, r4
    5b8e:	2900      	cmp	r1, #0
    5b90:	d119      	bne.n	5bc6 <_malloc_r+0x5a>
    5b92:	4c24      	ldr	r4, [pc, #144]	; (5c24 <_malloc_r+0xb8>)
    5b94:	6823      	ldr	r3, [r4, #0]
    5b96:	2b00      	cmp	r3, #0
    5b98:	d103      	bne.n	5ba2 <_malloc_r+0x36>
    5b9a:	0030      	movs	r0, r6
    5b9c:	f000 f84e 	bl	5c3c <_sbrk_r>
    5ba0:	6020      	str	r0, [r4, #0]
    5ba2:	0029      	movs	r1, r5
    5ba4:	0030      	movs	r0, r6
    5ba6:	f000 f849 	bl	5c3c <_sbrk_r>
    5baa:	1c43      	adds	r3, r0, #1
    5bac:	d12c      	bne.n	5c08 <_malloc_r+0x9c>
    5bae:	230c      	movs	r3, #12
    5bb0:	0030      	movs	r0, r6
    5bb2:	6033      	str	r3, [r6, #0]
    5bb4:	f000 f887 	bl	5cc6 <__malloc_unlock>
    5bb8:	e003      	b.n	5bc2 <_malloc_r+0x56>
    5bba:	2d00      	cmp	r5, #0
    5bbc:	dadf      	bge.n	5b7e <_malloc_r+0x12>
    5bbe:	230c      	movs	r3, #12
    5bc0:	6033      	str	r3, [r6, #0]
    5bc2:	2000      	movs	r0, #0
    5bc4:	bd70      	pop	{r4, r5, r6, pc}
    5bc6:	680b      	ldr	r3, [r1, #0]
    5bc8:	1b5b      	subs	r3, r3, r5
    5bca:	d41a      	bmi.n	5c02 <_malloc_r+0x96>
    5bcc:	2b0b      	cmp	r3, #11
    5bce:	d903      	bls.n	5bd8 <_malloc_r+0x6c>
    5bd0:	600b      	str	r3, [r1, #0]
    5bd2:	18cc      	adds	r4, r1, r3
    5bd4:	6025      	str	r5, [r4, #0]
    5bd6:	e003      	b.n	5be0 <_malloc_r+0x74>
    5bd8:	428c      	cmp	r4, r1
    5bda:	d10e      	bne.n	5bfa <_malloc_r+0x8e>
    5bdc:	6863      	ldr	r3, [r4, #4]
    5bde:	6013      	str	r3, [r2, #0]
    5be0:	0030      	movs	r0, r6
    5be2:	f000 f870 	bl	5cc6 <__malloc_unlock>
    5be6:	0020      	movs	r0, r4
    5be8:	2207      	movs	r2, #7
    5bea:	300b      	adds	r0, #11
    5bec:	1d23      	adds	r3, r4, #4
    5bee:	4390      	bics	r0, r2
    5bf0:	1ac3      	subs	r3, r0, r3
    5bf2:	d0e7      	beq.n	5bc4 <_malloc_r+0x58>
    5bf4:	425a      	negs	r2, r3
    5bf6:	50e2      	str	r2, [r4, r3]
    5bf8:	e7e4      	b.n	5bc4 <_malloc_r+0x58>
    5bfa:	684b      	ldr	r3, [r1, #4]
    5bfc:	6063      	str	r3, [r4, #4]
    5bfe:	000c      	movs	r4, r1
    5c00:	e7ee      	b.n	5be0 <_malloc_r+0x74>
    5c02:	000c      	movs	r4, r1
    5c04:	6849      	ldr	r1, [r1, #4]
    5c06:	e7c2      	b.n	5b8e <_malloc_r+0x22>
    5c08:	2303      	movs	r3, #3
    5c0a:	1cc4      	adds	r4, r0, #3
    5c0c:	439c      	bics	r4, r3
    5c0e:	42a0      	cmp	r0, r4
    5c10:	d0e0      	beq.n	5bd4 <_malloc_r+0x68>
    5c12:	1a21      	subs	r1, r4, r0
    5c14:	0030      	movs	r0, r6
    5c16:	f000 f811 	bl	5c3c <_sbrk_r>
    5c1a:	1c43      	adds	r3, r0, #1
    5c1c:	d1da      	bne.n	5bd4 <_malloc_r+0x68>
    5c1e:	e7c6      	b.n	5bae <_malloc_r+0x42>
    5c20:	20000e08 	.word	0x20000e08
    5c24:	20000e0c 	.word	0x20000e0c

00005c28 <realloc>:
    5c28:	b510      	push	{r4, lr}
    5c2a:	4b03      	ldr	r3, [pc, #12]	; (5c38 <realloc+0x10>)
    5c2c:	000a      	movs	r2, r1
    5c2e:	0001      	movs	r1, r0
    5c30:	6818      	ldr	r0, [r3, #0]
    5c32:	f000 f849 	bl	5cc8 <_realloc_r>
    5c36:	bd10      	pop	{r4, pc}
    5c38:	200000a0 	.word	0x200000a0

00005c3c <_sbrk_r>:
    5c3c:	2300      	movs	r3, #0
    5c3e:	b570      	push	{r4, r5, r6, lr}
    5c40:	4c06      	ldr	r4, [pc, #24]	; (5c5c <_sbrk_r+0x20>)
    5c42:	0005      	movs	r5, r0
    5c44:	0008      	movs	r0, r1
    5c46:	6023      	str	r3, [r4, #0]
    5c48:	f000 f86c 	bl	5d24 <_sbrk>
    5c4c:	1c43      	adds	r3, r0, #1
    5c4e:	d103      	bne.n	5c58 <_sbrk_r+0x1c>
    5c50:	6823      	ldr	r3, [r4, #0]
    5c52:	2b00      	cmp	r3, #0
    5c54:	d000      	beq.n	5c58 <_sbrk_r+0x1c>
    5c56:	602b      	str	r3, [r5, #0]
    5c58:	bd70      	pop	{r4, r5, r6, pc}
    5c5a:	46c0      	nop			; (mov r8, r8)
    5c5c:	20000e14 	.word	0x20000e14

00005c60 <strchr>:
    5c60:	b2c9      	uxtb	r1, r1
    5c62:	7803      	ldrb	r3, [r0, #0]
    5c64:	2b00      	cmp	r3, #0
    5c66:	d004      	beq.n	5c72 <strchr+0x12>
    5c68:	4299      	cmp	r1, r3
    5c6a:	d100      	bne.n	5c6e <strchr+0xe>
    5c6c:	4770      	bx	lr
    5c6e:	3001      	adds	r0, #1
    5c70:	e7f7      	b.n	5c62 <strchr+0x2>
    5c72:	424b      	negs	r3, r1
    5c74:	4159      	adcs	r1, r3
    5c76:	4249      	negs	r1, r1
    5c78:	4008      	ands	r0, r1
    5c7a:	e7f7      	b.n	5c6c <strchr+0xc>

00005c7c <strcpy>:
    5c7c:	1c03      	adds	r3, r0, #0
    5c7e:	780a      	ldrb	r2, [r1, #0]
    5c80:	3101      	adds	r1, #1
    5c82:	701a      	strb	r2, [r3, #0]
    5c84:	3301      	adds	r3, #1
    5c86:	2a00      	cmp	r2, #0
    5c88:	d1f9      	bne.n	5c7e <strcpy+0x2>
    5c8a:	4770      	bx	lr

00005c8c <strlen>:
    5c8c:	2300      	movs	r3, #0
    5c8e:	5cc2      	ldrb	r2, [r0, r3]
    5c90:	3301      	adds	r3, #1
    5c92:	2a00      	cmp	r2, #0
    5c94:	d1fb      	bne.n	5c8e <strlen+0x2>
    5c96:	1e58      	subs	r0, r3, #1
    5c98:	4770      	bx	lr

00005c9a <strncpy>:
    5c9a:	b570      	push	{r4, r5, r6, lr}
    5c9c:	0004      	movs	r4, r0
    5c9e:	2a00      	cmp	r2, #0
    5ca0:	d100      	bne.n	5ca4 <strncpy+0xa>
    5ca2:	bd70      	pop	{r4, r5, r6, pc}
    5ca4:	780d      	ldrb	r5, [r1, #0]
    5ca6:	1e56      	subs	r6, r2, #1
    5ca8:	1c63      	adds	r3, r4, #1
    5caa:	7025      	strb	r5, [r4, #0]
    5cac:	3101      	adds	r1, #1
    5cae:	2d00      	cmp	r5, #0
    5cb0:	d105      	bne.n	5cbe <strncpy+0x24>
    5cb2:	18a4      	adds	r4, r4, r2
    5cb4:	429c      	cmp	r4, r3
    5cb6:	d0f4      	beq.n	5ca2 <strncpy+0x8>
    5cb8:	701d      	strb	r5, [r3, #0]
    5cba:	3301      	adds	r3, #1
    5cbc:	e7fa      	b.n	5cb4 <strncpy+0x1a>
    5cbe:	001c      	movs	r4, r3
    5cc0:	0032      	movs	r2, r6
    5cc2:	e7ec      	b.n	5c9e <strncpy+0x4>

00005cc4 <__malloc_lock>:
    5cc4:	4770      	bx	lr

00005cc6 <__malloc_unlock>:
    5cc6:	4770      	bx	lr

00005cc8 <_realloc_r>:
    5cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cca:	0007      	movs	r7, r0
    5ccc:	000d      	movs	r5, r1
    5cce:	0016      	movs	r6, r2
    5cd0:	2900      	cmp	r1, #0
    5cd2:	d105      	bne.n	5ce0 <_realloc_r+0x18>
    5cd4:	0011      	movs	r1, r2
    5cd6:	f7ff ff49 	bl	5b6c <_malloc_r>
    5cda:	0004      	movs	r4, r0
    5cdc:	0020      	movs	r0, r4
    5cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ce0:	2a00      	cmp	r2, #0
    5ce2:	d103      	bne.n	5cec <_realloc_r+0x24>
    5ce4:	f7ff fef8 	bl	5ad8 <_free_r>
    5ce8:	0034      	movs	r4, r6
    5cea:	e7f7      	b.n	5cdc <_realloc_r+0x14>
    5cec:	f000 f812 	bl	5d14 <_malloc_usable_size_r>
    5cf0:	002c      	movs	r4, r5
    5cf2:	4286      	cmp	r6, r0
    5cf4:	d9f2      	bls.n	5cdc <_realloc_r+0x14>
    5cf6:	0031      	movs	r1, r6
    5cf8:	0038      	movs	r0, r7
    5cfa:	f7ff ff37 	bl	5b6c <_malloc_r>
    5cfe:	1e04      	subs	r4, r0, #0
    5d00:	d0ec      	beq.n	5cdc <_realloc_r+0x14>
    5d02:	0029      	movs	r1, r5
    5d04:	0032      	movs	r2, r6
    5d06:	f7ff fed6 	bl	5ab6 <memcpy>
    5d0a:	0029      	movs	r1, r5
    5d0c:	0038      	movs	r0, r7
    5d0e:	f7ff fee3 	bl	5ad8 <_free_r>
    5d12:	e7e3      	b.n	5cdc <_realloc_r+0x14>

00005d14 <_malloc_usable_size_r>:
    5d14:	1f0b      	subs	r3, r1, #4
    5d16:	681b      	ldr	r3, [r3, #0]
    5d18:	1f18      	subs	r0, r3, #4
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	da01      	bge.n	5d22 <_malloc_usable_size_r+0xe>
    5d1e:	580b      	ldr	r3, [r1, r0]
    5d20:	18c0      	adds	r0, r0, r3
    5d22:	4770      	bx	lr

00005d24 <_sbrk>:
    5d24:	4a04      	ldr	r2, [pc, #16]	; (5d38 <_sbrk+0x14>)
    5d26:	6813      	ldr	r3, [r2, #0]
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d003      	beq.n	5d34 <_sbrk+0x10>
    5d2c:	1818      	adds	r0, r3, r0
    5d2e:	6010      	str	r0, [r2, #0]
    5d30:	0018      	movs	r0, r3
    5d32:	4770      	bx	lr
    5d34:	4b01      	ldr	r3, [pc, #4]	; (5d3c <_sbrk+0x18>)
    5d36:	e7f9      	b.n	5d2c <_sbrk+0x8>
    5d38:	20000e10 	.word	0x20000e10
    5d3c:	20000e18 	.word	0x20000e18

00005d40 <_init>:
    5d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d42:	46c0      	nop			; (mov r8, r8)
    5d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5d46:	bc08      	pop	{r3}
    5d48:	469e      	mov	lr, r3
    5d4a:	4770      	bx	lr

00005d4c <_fini>:
    5d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d4e:	46c0      	nop			; (mov r8, r8)
    5d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5d52:	bc08      	pop	{r3}
    5d54:	469e      	mov	lr, r3
    5d56:	4770      	bx	lr
    5d58:	656c6946 	.word	0x656c6946
    5d5c:	616d2820 	.word	0x616d2820
    5d60:	29656279 	.word	0x29656279
    5d64:	746f6e20 	.word	0x746f6e20
    5d68:	756f6620 	.word	0x756f6620
    5d6c:	5300646e 	.word	0x5300646e
    5d70:	74726174 	.word	0x74726174
    5d74:	72617020 	.word	0x72617020
    5d78:	46006573 	.word	0x46006573
    5d7c:	20656c69 	.word	0x20656c69
    5d80:	657a6973 	.word	0x657a6973
    5d84:	4900203a 	.word	0x4900203a
    5d88:	6567616d 	.word	0x6567616d
    5d8c:	66664f20 	.word	0x66664f20
    5d90:	3a746573 	.word	0x3a746573
    5d94:	65480020 	.word	0x65480020
    5d98:	72656461 	.word	0x72656461
    5d9c:	7a697320 	.word	0x7a697320
    5da0:	00203a65 	.word	0x00203a65
    5da4:	20746942 	.word	0x20746942
    5da8:	74706544 	.word	0x74706544
    5dac:	00203a68 	.word	0x00203a68
    5db0:	64616f4c 	.word	0x64616f4c
    5db4:	69206465 	.word	0x69206465
    5db8:	2000206e 	.word	0x2000206e
    5dbc:	4200736d 	.word	0x4200736d
    5dc0:	6620504d 	.word	0x6620504d
    5dc4:	616d726f 	.word	0x616d726f
    5dc8:	6f6e2074 	.word	0x6f6e2074
    5dcc:	65722074 	.word	0x65722074
    5dd0:	6e676f63 	.word	0x6e676f63
    5dd4:	64657a69 	.word	0x64657a69
    5dd8:	20726f20 	.word	0x20726f20
    5ddc:	6e204453 	.word	0x6e204453
    5de0:	6d20746f 	.word	0x6d20746f
    5de4:	746e756f 	.word	0x746e756f
    5de8:	4c006465 	.word	0x4c006465
    5dec:	6964616f 	.word	0x6964616f
    5df0:	6920676e 	.word	0x6920676e
    5df4:	6567616d 	.word	0x6567616d
    5df8:	49002720 	.word	0x49002720
    5dfc:	6567616d 	.word	0x6567616d
    5e00:	7a697320 	.word	0x7a697320
    5e04:	00203a65 	.word	0x00203a65
    5e08:	6e6e6977 	.word	0x6e6e6977
    5e0c:	3d207265 	.word	0x3d207265
    5e10:	0020      	.short	0x0020
    5e12:	6461      	.short	0x6461
    5e14:	766f4d64 	.word	0x766f4d64
    5e18:	70202c65 	.word	0x70202c65
    5e1c:	6579616c 	.word	0x6579616c
    5e20:	203d2072 	.word	0x203d2072
    5e24:	69687400 	.word	0x69687400
    5e28:	696d2073 	.word	0x696d2073
    5e2c:	20746867 	.word	0x20746867
    5e30:	61206562 	.word	0x61206562
    5e34:	6f726320 	.word	0x6f726320
    5e38:	74007373 	.word	0x74007373
    5e3c:	20736968 	.word	0x20736968
    5e40:	6867696d 	.word	0x6867696d
    5e44:	65622074 	.word	0x65622074
    5e48:	6e206120 	.word	0x6e206120
    5e4c:	6867756f 	.word	0x6867756f
    5e50:	0074      	.short	0x0074
    5e52:	6f6c      	.short	0x6f6c
    5e54:	706f6f6f 	.word	0x706f6f6f
    5e58:	00          	.byte	0x00
    5e59:	43          	.byte	0x43
    5e5a:	756f      	.short	0x756f
    5e5c:	276e646c 	.word	0x276e646c
    5e60:	74732074 	.word	0x74732074
    5e64:	20747261 	.word	0x20747261
    5e68:	32365446 	.word	0x32365446
    5e6c:	74203630 	.word	0x74203630
    5e70:	6863756f 	.word	0x6863756f
    5e74:	65726373 	.word	0x65726373
    5e78:	63206e65 	.word	0x63206e65
    5e7c:	72746e6f 	.word	0x72746e6f
    5e80:	656c6c6f 	.word	0x656c6c6f
    5e84:	72440072 	.word	0x72440072
    5e88:	72657669 	.word	0x72657669
    5e8c:	67696d20 	.word	0x67696d20
    5e90:	6e207468 	.word	0x6e207468
    5e94:	6820746f 	.word	0x6820746f
    5e98:	20657661 	.word	0x20657661
    5e9c:	6e656562 	.word	0x6e656562
    5ea0:	756f6620 	.word	0x756f6620
    5ea4:	4600646e 	.word	0x4600646e
    5ea8:	656c6961 	.word	0x656c6961
    5eac:	6f742064 	.word	0x6f742064
    5eb0:	696e6920 	.word	0x696e6920
    5eb4:	6c616974 	.word	0x6c616974
    5eb8:	20657369 	.word	0x20657369
    5ebc:	63204453 	.word	0x63204453
    5ec0:	00647261 	.word	0x00647261
    5ec4:	00000a0d 	.word	0x00000a0d

00005ec8 <_ZTV4Uart>:
	...
    5ed0:	0000103d 000009c3 00000f7f 00000f41     =...........A...
    5ee0:	00000f59 000010f1 00000d55 00000d45     Y.......U...E...
    5ef0:	00000dd1 00000d6b 00000d41              ....k...A...

00005efc <_ZTV26DoubleBufferedEPOutHandler>:
	...
    5f04:	0000148f 00001371 000012cd              ....q.......

00005f10 <_ZL14STRING_PRODUCT>:
    5f10:	75647241 206f6e69 5020304d 00006f72     Arduino M0 Pro..

00005f20 <_ZL15STRING_LANGUAGE>:
    5f20:	04090304                                ....

00005f24 <_ZL19STRING_MANUFACTURER>:
    5f24:	75647241 206f6e69 00434c4c              Arduino LLC.

00005f30 <_ZL21USB_DeviceDescriptorB>:
    5f30:	02000112 400102ef 804f2a03 02010100     .......@.*O.....
    5f40:	00000103                                ....

00005f44 <_ZTV16Adafruit_ILI9341>:
	...
    5f4c:	00004ef1 000009c3 000009bd 000009c1     .N..............
    5f5c:	000026ad 00002775 00002e19 00002e99     .&..u'..........
    5f6c:	00002685 00002699 00004901 000027b1     .&...&...I...'..
    5f7c:	00002c7d 00002cd9 000026d5 00002707     },...,...&...'..
    5f8c:	00002739 00004ad3 00004aed 00004b6f     9'...J...J..oK..

00005f9c <_ZTVN5SDLib4FileE>:
	...
    5fa4:	00002f2b 00002f3f 000009bd 00002f65     +/..?/......e/..
    5fb4:	00003061 00002f8f 00002fa3 3c7c002f     a0.../.../../.|<
    5fc4:	3d2b5e3e 5d5b2f3f 222a2c3b 0000005c     >^+=?/[];,*"\...

00005fd4 <_ZTV6SdFile>:
	...
    5fdc:	00003f21 000009c3 000009bd 000009c1     !?..............

00005fec <_ZTV7TwoWire>:
	...
    5ff4:	0000463d 000044ad 000009bd 000044d1     =F...D.......D..
    6004:	000044ed 00004701 000044d3              .D...G...D..

00006010 <g_APinDescription>:
    6010:	00000000 0000000b 00000002 00000004     ................
    6020:	ffff00ff 000bffff 00000000 0000000a     ................
    6030:	00000002 00000004 ffff00ff 000affff     ................
    6040:	00000000 00000008 00000004 0000001c     ................
    6050:	000000ff 00ff0000 00000000 00000009     ................
    6060:	00000004 0000001c 000100ff 00090001     ................
    6070:	00000000 0000000e 00000004 0000001c     ................
    6080:	030000ff 000e0300 00000000 0000000f     ................
    6090:	00000004 0000001c 030100ff 000f0301     ................
    60a0:	00000000 00000014 00000005 0000001c     ................
    60b0:	000200ff 00040002 00000000 00000015     ................
    60c0:	00000005 0000001c 000300ff 00050003     ................
    60d0:	00000000 00000006 00000004 0000001c     ................
    60e0:	010000ff 00060100 00000000 00000007     ................
    60f0:	00000004 0000001c 010100ff 00070101     ................
    6100:	00000000 00000012 00000004 0000001c     ................
    6110:	030000ff 00020300 00000000 00000010     ................
    6120:	00000004 0000001c 020000ff 00000200     ................
    6130:	00000000 00000013 00000004 0000001c     ................
    6140:	030100ff 00030301 00000000 00000011     ................
    6150:	00000004 0000000c 020100ff 0001ffff     ................
    6160:	000000ff 00000000 000000ff 00000000     ................
    6170:	ffff00ff 00ffffff 00000000 00000003     ................
    6180:	00000001 00000002 ffff00ff 00ffffff     ................
    6190:	00000000 00000016 00000002 00000004     ................
    61a0:	ffff00ff 0006ffff 00000000 00000017     ................
    61b0:	00000002 00000004 ffff00ff 0007ffff     ................
    61c0:	00000000 0000000c 00000003 00000004     ................
    61d0:	ffff00ff 000cffff 000000ff 00000000     ................
    61e0:	000000ff 00000000 ffff00ff 00ffffff     ................
    61f0:	00000001 0000000b 00000003 00000004     ................
    6200:	ffff00ff 000bffff 00000001 0000000a     ................
    6210:	00000003 00000004 ffff00ff 000affff     ................
    6220:	000000ff 00000000 000000ff 00000000     ................
    6230:	ffff00ff 00ffffff 000000ff 00000000     ................
    6240:	000000ff 00000000 ffff00ff 00ffffff     ................
    6250:	00000000 00000002 00000001 00000002     ................
    6260:	ffff0000 0002ffff 00000001 00000008     ................
    6270:	00000001 00000002 ffff0002 0008ffff     ................
    6280:	00000001 00000009 00000001 00000002     ................
    6290:	ffff0003 0009ffff 00000000 00000004     ................
    62a0:	00000001 00000002 ffff0004 0004ffff     ................
    62b0:	00000000 00000005 00000001 00000002     ................
    62c0:	ffff0005 0005ffff 00000001 00000002     ................
    62d0:	00000001 00000002 ffff000a 0002ffff     ................
    62e0:	00000001 00000003 0000000b 00000004     ................
    62f0:	ffff00ff 00ffffff 00000000 0000001b     ................
    6300:	0000000b 00000004 ffff00ff 00ffffff     ................
    6310:	00000000 0000001c 00000006 00000000     ................
    6320:	ffff00ff 00ffffff 00000000 00000018     ................
    6330:	00000006 00000000 ffff00ff 00ffffff     ................
    6340:	00000000 00000019 00000006 00000000     ................
    6350:	ffff00ff 00ffffff 00000001 00000016     ................
    6360:	00000003 00000000 ffff00ff 00ffffff     ................
    6370:	00000001 00000017 00000003 00000000     ................
    6380:	ffff00ff 00ffffff 00000000 00000016     ................
    6390:	00000002 00000000 ffff00ff 00ffffff     ................
    63a0:	00000000 00000017 00000002 00000000     ................
    63b0:	ffff00ff 00ffffff 00000000 00000013     ................
    63c0:	00000002 00000000 ffff00ff 00ffffff     ................
    63d0:	00000000 00000010 00000002 00000000     ................
    63e0:	ffff00ff 00ffffff 00000000 00000012     ................
    63f0:	00000002 00000000 ffff00ff 00ffffff     ................
    6400:	00000000 00000011 00000002 00000000     ................
    6410:	ffff00ff 00ffffff 00000000 0000000d     ................
    6420:	00000004 0000000c 000100ff 000dffff     ................
    6430:	00000000 00000015 00000005 0000000c     ................
    6440:	000300ff 00ffffff 00000000 00000006     ................
    6450:	00000004 0000000c 010000ff 00ffffff     ................
    6460:	00000000 00000007 00000004 0000000c     ................
    6470:	010100ff 00ffffff 00000000 00000002     ................
    6480:	00000001 00000002 ffff0014 0002ffff     ................

00006490 <_ZL4font>:
    6490:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
    64a0:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
    64b0:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
    64c0:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
    64d0:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
    64e0:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
    64f0:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
    6500:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
    6510:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
    6520:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
    6530:	00000000 5f000000 07000000 14000700     ......._........
    6540:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
    6550:	00502056 00030708 41221c00 22410000     V P......."A..A"
    6560:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
    6570:	08080800 00000808 20006060 02040810     ........``. ....
    6580:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
    6590:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
    65a0:	41314949 07091121 49494936 49494636     II1A!...6III6FII
    65b0:	00001e29 00000014 00003440 22140800     ).......@4....."
    65c0:	14141441 41001414 02081422 06095901     A......A"....Y..
    65d0:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
    65e0:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
    65f0:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
    6600:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
    6610:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
    6620:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
    6630:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
    6640:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
    6650:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
    6660:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
    6670:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
    6680:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
    6690:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
    66a0:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
    66b0:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
    66c0:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
    66d0:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
    66e0:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
    66f0:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
    6700:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
    6710:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
    6720:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
    6730:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
    6740:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
    6750:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
    6760:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
    6770:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
    6780:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
    6790:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
    67a0:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
    67b0:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
    67c0:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
    67d0:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
    67e0:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
    67f0:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
    6800:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
    6810:	00ff0000 ff101010 14141400 101000ff     ................
    6820:	10ff00ff f010f010 fc141414 f7141400     ................
    6830:	0000ff00 14ff00ff fc04f414 10171414     ................
    6840:	1f10101f 14141f10 10001f14 00f01010     ................
    6850:	1f000000 10101010 1010101f 0010f010     ................
    6860:	10ff0000 10101010 10101010 000010ff     ................
    6870:	0014ff00 ff00ff00 101f0000 fc000017     ................
    6880:	1414f404 14171017 f404f414 00ff0000     ................
    6890:	141414f7 14141414 14f700f7 14171414     ................
    68a0:	101f1010 1414141f 101014f4 00f010f0     ................
    68b0:	1f101f00 1f000000 00000014 000014fc     ................
    68c0:	10f010f0 ff10ff10 ff141414 10101014     ................
    68d0:	0000001f ff10f000 ffffffff f0f0f0f0     ................
    68e0:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
    68f0:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
    6900:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
    6910:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
    6920:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
    6930:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
    6940:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
    6950:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
    6960:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
    6970:	00000018 30001010 0101ff40 01011f00     .......0@.......
    6980:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

00006990 <_ZTV12Adafruit_GFX>:
	...
    6998:	00004ef1 000009c3 000009bd 000009c1     .N..............
    69a8:	00004fed 00004a0d 000049cb 000049f5     .O...J...I...I..
    69b8:	000049d5 000049e5 00004901 00004a0d     .I...I...I...J..
    69c8:	00004bf1 00004bef 00004a0f 00004a4b     .K...K...J..KJ..
    69d8:	00004a87 00004ad3 00004aed 00004b6f     .J...J...J..oK..

000069e8 <_ZTV7Serial_>:
	...
    69f0:	00005535 00005561 00005531 00005555     5U..aU..1U..UU..
    6a00:	00005549 00005599 0000557d              IU...U..}U..

00006a0c <__sf_fake_stderr>:
	...

00006a2c <__sf_fake_stdin>:
	...

00006a4c <__sf_fake_stdout>:
	...

00006a6c <__EH_FRAME_BEGIN__>:
    6a6c:	00000000                                ....
