
arduino-noughts-and-crosses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014648  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000074  00014648  00014648  00024648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002a0  20000000  000146bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000ce8  200002a0  0001495c  000302a0  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
  6 .debug_info   000a09b8  00000000  00000000  00030321  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000aa70  00000000  00000000  000d0cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ace7  00000000  00000000  000db749  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001c00  00000000  00000000  000e6430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001c90  00000000  00000000  000e8030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021386  00000000  00000000  000e9cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a08e  00000000  00000000  0010b046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00087927  00000000  00000000  001250d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000786c  00000000  00000000  001ac9fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stab         000000cc  00000000  00000000  001b4268  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      000001b9  00000000  00000000  001b4334  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 80 00 20 49 2f 00 00 41 2f 00 00 41 2f 00 00     ... I/..A/..A/..
	...
      2c:	41 2f 00 00 00 00 00 00 00 00 00 00 41 2f 00 00     A/..........A/..
      3c:	cd 2f 00 00 41 2f 00 00 41 2f 00 00 41 2f 00 00     ./..A/..A/..A/..
      4c:	41 2f 00 00 41 2f 00 00 41 2f 00 00 41 2f 00 00     A/..A/..A/..A/..
      5c:	e5 2f 00 00 41 2f 00 00 71 c3 00 00 41 2f 00 00     ./..A/..q...A/..
      6c:	41 2f 00 00 39 c1 00 00 41 2f 00 00 89 c3 00 00     A/..9...A/......
      7c:	41 2f 00 00 41 2f 00 00 41 2f 00 00 41 2f 00 00     A/..A/..A/..A/..
      8c:	41 2f 00 00 00 00 00 00 41 2f 00 00 41 2f 00 00     A/......A/..A/..
      9c:	41 2f 00 00 41 2f 00 00 41 2f 00 00 41 2f 00 00     A/..A/..A/..A/..
      ac:	41 2f 00 00 00 00 00 00                             A/......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002a0 	.word	0x200002a0
      d4:	00000000 	.word	0x00000000
      d8:	00014644 	.word	0x00014644

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002a4 	.word	0x200002a4
     108:	00014644 	.word	0x00014644
     10c:	2000029c 	.word	0x2000029c
     110:	00000000 	.word	0x00000000

00000114 <_Z6read16RN5SDLib4FileE>:

// These read 16-bit and 32-bit types from the SD card file.
// BMP data is stored little-endian, Arduino is little-endian too.
// May need to reverse subscript order if porting elsewhere.

uint16_t read16(File &f) {
     114:	b590      	push	{r4, r7, lr}
     116:	b085      	sub	sp, #20
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	uint16_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     11c:	230e      	movs	r3, #14
     11e:	18fc      	adds	r4, r7, r3
     120:	687b      	ldr	r3, [r7, #4]
     122:	681b      	ldr	r3, [r3, #0]
     124:	3314      	adds	r3, #20
     126:	681b      	ldr	r3, [r3, #0]
     128:	687a      	ldr	r2, [r7, #4]
     12a:	0010      	movs	r0, r2
     12c:	4798      	blx	r3
     12e:	0003      	movs	r3, r0
     130:	b2db      	uxtb	r3, r3
     132:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read(); // MSB
     134:	230e      	movs	r3, #14
     136:	18fc      	adds	r4, r7, r3
     138:	3401      	adds	r4, #1
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	681b      	ldr	r3, [r3, #0]
     13e:	3314      	adds	r3, #20
     140:	681b      	ldr	r3, [r3, #0]
     142:	687a      	ldr	r2, [r7, #4]
     144:	0010      	movs	r0, r2
     146:	4798      	blx	r3
     148:	0003      	movs	r3, r0
     14a:	b2db      	uxtb	r3, r3
     14c:	7023      	strb	r3, [r4, #0]
	return result;
     14e:	230e      	movs	r3, #14
     150:	18fb      	adds	r3, r7, r3
     152:	881b      	ldrh	r3, [r3, #0]
}
     154:	0018      	movs	r0, r3
     156:	46bd      	mov	sp, r7
     158:	b005      	add	sp, #20
     15a:	bd90      	pop	{r4, r7, pc}

0000015c <_Z6read32RN5SDLib4FileE>:

uint32_t read32(File &f) {
     15c:	b590      	push	{r4, r7, lr}
     15e:	b085      	sub	sp, #20
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
	uint32_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     164:	230c      	movs	r3, #12
     166:	18fc      	adds	r4, r7, r3
     168:	687b      	ldr	r3, [r7, #4]
     16a:	681b      	ldr	r3, [r3, #0]
     16c:	3314      	adds	r3, #20
     16e:	681b      	ldr	r3, [r3, #0]
     170:	687a      	ldr	r2, [r7, #4]
     172:	0010      	movs	r0, r2
     174:	4798      	blx	r3
     176:	0003      	movs	r3, r0
     178:	b2db      	uxtb	r3, r3
     17a:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read();
     17c:	230c      	movs	r3, #12
     17e:	18fc      	adds	r4, r7, r3
     180:	3401      	adds	r4, #1
     182:	687b      	ldr	r3, [r7, #4]
     184:	681b      	ldr	r3, [r3, #0]
     186:	3314      	adds	r3, #20
     188:	681b      	ldr	r3, [r3, #0]
     18a:	687a      	ldr	r2, [r7, #4]
     18c:	0010      	movs	r0, r2
     18e:	4798      	blx	r3
     190:	0003      	movs	r3, r0
     192:	b2db      	uxtb	r3, r3
     194:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[2] = f.read();
     196:	230c      	movs	r3, #12
     198:	18fc      	adds	r4, r7, r3
     19a:	3402      	adds	r4, #2
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	3314      	adds	r3, #20
     1a2:	681b      	ldr	r3, [r3, #0]
     1a4:	687a      	ldr	r2, [r7, #4]
     1a6:	0010      	movs	r0, r2
     1a8:	4798      	blx	r3
     1aa:	0003      	movs	r3, r0
     1ac:	b2db      	uxtb	r3, r3
     1ae:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[3] = f.read(); // MSB
     1b0:	230c      	movs	r3, #12
     1b2:	18fc      	adds	r4, r7, r3
     1b4:	3403      	adds	r4, #3
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	3314      	adds	r3, #20
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	687a      	ldr	r2, [r7, #4]
     1c0:	0010      	movs	r0, r2
     1c2:	4798      	blx	r3
     1c4:	0003      	movs	r3, r0
     1c6:	b2db      	uxtb	r3, r3
     1c8:	7023      	strb	r3, [r4, #0]
	return result;
     1ca:	68fb      	ldr	r3, [r7, #12]
}
     1cc:	0018      	movs	r0, r3
     1ce:	46bd      	mov	sp, r7
     1d0:	b005      	add	sp, #20
     1d2:	bd90      	pop	{r4, r7, pc}

000001d4 <_ZN5PrintaSEOS_>:
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     1d4:	b580      	push	{r7, lr}
     1d6:	b082      	sub	sp, #8
     1d8:	af00      	add	r7, sp, #0
     1da:	6078      	str	r0, [r7, #4]
     1dc:	6039      	str	r1, [r7, #0]
     1de:	683b      	ldr	r3, [r7, #0]
     1e0:	685a      	ldr	r2, [r3, #4]
     1e2:	687b      	ldr	r3, [r7, #4]
     1e4:	605a      	str	r2, [r3, #4]
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	0018      	movs	r0, r3
     1ea:	46bd      	mov	sp, r7
     1ec:	b002      	add	sp, #8
     1ee:	bd80      	pop	{r7, pc}

000001f0 <_ZN6StreamaSEOS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     1f0:	b580      	push	{r7, lr}
     1f2:	b082      	sub	sp, #8
     1f4:	af00      	add	r7, sp, #0
     1f6:	6078      	str	r0, [r7, #4]
     1f8:	6039      	str	r1, [r7, #0]
     1fa:	687b      	ldr	r3, [r7, #4]
     1fc:	683a      	ldr	r2, [r7, #0]
     1fe:	0011      	movs	r1, r2
     200:	0018      	movs	r0, r3
     202:	f7ff ffe7 	bl	1d4 <_ZN5PrintaSEOS_>
     206:	683b      	ldr	r3, [r7, #0]
     208:	689a      	ldr	r2, [r3, #8]
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	609a      	str	r2, [r3, #8]
     20e:	683b      	ldr	r3, [r7, #0]
     210:	68da      	ldr	r2, [r3, #12]
     212:	687b      	ldr	r3, [r7, #4]
     214:	60da      	str	r2, [r3, #12]
     216:	687b      	ldr	r3, [r7, #4]
     218:	0018      	movs	r0, r3
     21a:	46bd      	mov	sp, r7
     21c:	b002      	add	sp, #8
     21e:	bd80      	pop	{r7, pc}

00000220 <_ZN5SDLib4FileaSEOS0_>:
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
     220:	b580      	push	{r7, lr}
     222:	b082      	sub	sp, #8
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
     228:	6039      	str	r1, [r7, #0]
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	683a      	ldr	r2, [r7, #0]
     22e:	0011      	movs	r1, r2
     230:	0018      	movs	r0, r3
     232:	f7ff ffdd 	bl	1f0 <_ZN6StreamaSEOS_>
     236:	687b      	ldr	r3, [r7, #4]
     238:	3310      	adds	r3, #16
     23a:	0019      	movs	r1, r3
     23c:	220c      	movs	r2, #12
     23e:	683b      	ldr	r3, [r7, #0]
     240:	3310      	adds	r3, #16
     242:	2a00      	cmp	r2, #0
     244:	db05      	blt.n	252 <_ZN5SDLib4FileaSEOS0_+0x32>
     246:	7818      	ldrb	r0, [r3, #0]
     248:	7008      	strb	r0, [r1, #0]
     24a:	3101      	adds	r1, #1
     24c:	3301      	adds	r3, #1
     24e:	3a01      	subs	r2, #1
     250:	e7f7      	b.n	242 <_ZN5SDLib4FileaSEOS0_+0x22>
     252:	683b      	ldr	r3, [r7, #0]
     254:	6a1a      	ldr	r2, [r3, #32]
     256:	687b      	ldr	r3, [r7, #4]
     258:	621a      	str	r2, [r3, #32]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	0018      	movs	r0, r3
     25e:	46bd      	mov	sp, r7
     260:	b002      	add	sp, #8
     262:	bd80      	pop	{r7, pc}

00000264 <_Z10drawBitmapcss>:

void drawBitmap(char fileInput, int16_t x, int16_t y) {
     264:	b590      	push	{r4, r7, lr}
     266:	b0eb      	sub	sp, #428	; 0x1ac
     268:	af02      	add	r7, sp, #8
     26a:	0004      	movs	r4, r0
     26c:	0008      	movs	r0, r1
     26e:	0011      	movs	r1, r2
     270:	4bbb      	ldr	r3, [pc, #748]	; (560 <_Z10drawBitmapcss+0x2fc>)
     272:	22d0      	movs	r2, #208	; 0xd0
     274:	0052      	lsls	r2, r2, #1
     276:	4694      	mov	ip, r2
     278:	44bc      	add	ip, r7
     27a:	4463      	add	r3, ip
     27c:	1c22      	adds	r2, r4, #0
     27e:	701a      	strb	r2, [r3, #0]
     280:	4bb8      	ldr	r3, [pc, #736]	; (564 <_Z10drawBitmapcss+0x300>)
     282:	22d0      	movs	r2, #208	; 0xd0
     284:	0052      	lsls	r2, r2, #1
     286:	4694      	mov	ip, r2
     288:	44bc      	add	ip, r7
     28a:	4463      	add	r3, ip
     28c:	1c02      	adds	r2, r0, #0
     28e:	801a      	strh	r2, [r3, #0]
     290:	4bb5      	ldr	r3, [pc, #724]	; (568 <_Z10drawBitmapcss+0x304>)
     292:	22d0      	movs	r2, #208	; 0xd0
     294:	0052      	lsls	r2, r2, #1
     296:	4694      	mov	ip, r2
     298:	44bc      	add	ip, r7
     29a:	4463      	add	r3, ip
     29c:	1c0a      	adds	r2, r1, #0
     29e:	801a      	strh	r2, [r3, #0]

	File bmpFile;
     2a0:	238a      	movs	r3, #138	; 0x8a
     2a2:	005b      	lsls	r3, r3, #1
     2a4:	18fb      	adds	r3, r7, r3
     2a6:	0018      	movs	r0, r3
     2a8:	f008 fc12 	bl	8ad0 <_ZN5SDLib4FileC1Ev>
	int bmpWidth, bmpHeight;   // W+H in pixels
	uint8_t bmpDepth;              // Bit depth (currently must be 24)
	uint32_t bmpImageoffset;        // Start of image data in file
	uint32_t rowSize;               // Not always = bmpWidth; may have padding
	uint8_t sdbuffer[3 * BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     2ac:	239c      	movs	r3, #156	; 0x9c
     2ae:	33ff      	adds	r3, #255	; 0xff
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	22ff      	movs	r2, #255	; 0xff
     2b4:	701a      	strb	r2, [r3, #0]
	boolean goodBmp = false;       // Set to true on valid header parse
     2b6:	23cd      	movs	r3, #205	; 0xcd
     2b8:	005b      	lsls	r3, r3, #1
     2ba:	18fb      	adds	r3, r7, r3
     2bc:	2200      	movs	r2, #0
     2be:	701a      	strb	r2, [r3, #0]
	boolean flip = true;        // BMP is stored bottom-to-top
     2c0:	239a      	movs	r3, #154	; 0x9a
     2c2:	33ff      	adds	r3, #255	; 0xff
     2c4:	18fb      	adds	r3, r7, r3
     2c6:	2201      	movs	r2, #1
     2c8:	701a      	strb	r2, [r3, #0]
	int w, h, row, col, x2, y2, bx1, by1;
	uint8_t r, g, b;
	uint32_t pos = 0, startTime = millis();
     2ca:	2300      	movs	r3, #0
     2cc:	22be      	movs	r2, #190	; 0xbe
     2ce:	0052      	lsls	r2, r2, #1
     2d0:	18ba      	adds	r2, r7, r2
     2d2:	6013      	str	r3, [r2, #0]
     2d4:	f002 fea2 	bl	301c <millis>
     2d8:	0003      	movs	r3, r0
     2da:	22bc      	movs	r2, #188	; 0xbc
     2dc:	0052      	lsls	r2, r2, #1
     2de:	18ba      	adds	r2, r7, r2
     2e0:	6013      	str	r3, [r2, #0]
	char filename[6] = {fileInput, '.', 'b', 'm', 'p'};
     2e2:	4ba2      	ldr	r3, [pc, #648]	; (56c <_Z10drawBitmapcss+0x308>)
     2e4:	22d0      	movs	r2, #208	; 0xd0
     2e6:	0052      	lsls	r2, r2, #1
     2e8:	4694      	mov	ip, r2
     2ea:	44bc      	add	ip, r7
     2ec:	4463      	add	r3, ip
     2ee:	0018      	movs	r0, r3
     2f0:	2306      	movs	r3, #6
     2f2:	001a      	movs	r2, r3
     2f4:	2100      	movs	r1, #0
     2f6:	f010 fba7 	bl	10a48 <memset>
     2fa:	4b9c      	ldr	r3, [pc, #624]	; (56c <_Z10drawBitmapcss+0x308>)
     2fc:	22d0      	movs	r2, #208	; 0xd0
     2fe:	0052      	lsls	r2, r2, #1
     300:	4694      	mov	ip, r2
     302:	44bc      	add	ip, r7
     304:	4463      	add	r3, ip
     306:	222e      	movs	r2, #46	; 0x2e
     308:	705a      	strb	r2, [r3, #1]
     30a:	4b98      	ldr	r3, [pc, #608]	; (56c <_Z10drawBitmapcss+0x308>)
     30c:	22d0      	movs	r2, #208	; 0xd0
     30e:	0052      	lsls	r2, r2, #1
     310:	4694      	mov	ip, r2
     312:	44bc      	add	ip, r7
     314:	4463      	add	r3, ip
     316:	2262      	movs	r2, #98	; 0x62
     318:	709a      	strb	r2, [r3, #2]
     31a:	4b94      	ldr	r3, [pc, #592]	; (56c <_Z10drawBitmapcss+0x308>)
     31c:	22d0      	movs	r2, #208	; 0xd0
     31e:	0052      	lsls	r2, r2, #1
     320:	4694      	mov	ip, r2
     322:	44bc      	add	ip, r7
     324:	4463      	add	r3, ip
     326:	226d      	movs	r2, #109	; 0x6d
     328:	70da      	strb	r2, [r3, #3]
     32a:	4b90      	ldr	r3, [pc, #576]	; (56c <_Z10drawBitmapcss+0x308>)
     32c:	22d0      	movs	r2, #208	; 0xd0
     32e:	0052      	lsls	r2, r2, #1
     330:	4694      	mov	ip, r2
     332:	44bc      	add	ip, r7
     334:	4463      	add	r3, ip
     336:	2270      	movs	r2, #112	; 0x70
     338:	711a      	strb	r2, [r3, #4]
     33a:	4b8c      	ldr	r3, [pc, #560]	; (56c <_Z10drawBitmapcss+0x308>)
     33c:	22d0      	movs	r2, #208	; 0xd0
     33e:	0052      	lsls	r2, r2, #1
     340:	4694      	mov	ip, r2
     342:	44bc      	add	ip, r7
     344:	4463      	add	r3, ip
     346:	4a86      	ldr	r2, [pc, #536]	; (560 <_Z10drawBitmapcss+0x2fc>)
     348:	21d0      	movs	r1, #208	; 0xd0
     34a:	0049      	lsls	r1, r1, #1
     34c:	468c      	mov	ip, r1
     34e:	44bc      	add	ip, r7
     350:	4462      	add	r2, ip
     352:	7812      	ldrb	r2, [r2, #0]
     354:	701a      	strb	r2, [r3, #0]

	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     356:	4b86      	ldr	r3, [pc, #536]	; (570 <_Z10drawBitmapcss+0x30c>)
     358:	0018      	movs	r0, r3
     35a:	f00d f9ab 	bl	d6b4 <_ZNK12Adafruit_GFX5widthEv>
     35e:	0003      	movs	r3, r0
     360:	001a      	movs	r2, r3
     362:	4b80      	ldr	r3, [pc, #512]	; (564 <_Z10drawBitmapcss+0x300>)
     364:	21d0      	movs	r1, #208	; 0xd0
     366:	0049      	lsls	r1, r1, #1
     368:	468c      	mov	ip, r1
     36a:	44bc      	add	ip, r7
     36c:	4463      	add	r3, ip
     36e:	2100      	movs	r1, #0
     370:	5e5b      	ldrsh	r3, [r3, r1]
     372:	4293      	cmp	r3, r2
     374:	da0f      	bge.n	396 <_Z10drawBitmapcss+0x132>
     376:	4b7e      	ldr	r3, [pc, #504]	; (570 <_Z10drawBitmapcss+0x30c>)
     378:	0018      	movs	r0, r3
     37a:	f00d f9a6 	bl	d6ca <_ZNK12Adafruit_GFX6heightEv>
     37e:	0003      	movs	r3, r0
     380:	001a      	movs	r2, r3
     382:	4b79      	ldr	r3, [pc, #484]	; (568 <_Z10drawBitmapcss+0x304>)
     384:	21d0      	movs	r1, #208	; 0xd0
     386:	0049      	lsls	r1, r1, #1
     388:	468c      	mov	ip, r1
     38a:	44bc      	add	ip, r7
     38c:	4463      	add	r3, ip
     38e:	2100      	movs	r1, #0
     390:	5e5b      	ldrsh	r3, [r3, r1]
     392:	4293      	cmp	r3, r2
     394:	db01      	blt.n	39a <_Z10drawBitmapcss+0x136>
     396:	2301      	movs	r3, #1
     398:	e000      	b.n	39c <_Z10drawBitmapcss+0x138>
     39a:	2300      	movs	r3, #0
     39c:	2b00      	cmp	r3, #0
     39e:	d000      	beq.n	3a2 <_Z10drawBitmapcss+0x13e>
     3a0:	e3ae      	b.n	b00 <_Z10drawBitmapcss+0x89c>

	Serial.println();
     3a2:	4b74      	ldr	r3, [pc, #464]	; (574 <_Z10drawBitmapcss+0x310>)
     3a4:	0018      	movs	r0, r3
     3a6:	f002 ffc9 	bl	333c <_ZN5Print7printlnEv>
	Serial.print(F("Loading image '"));
     3aa:	4a73      	ldr	r2, [pc, #460]	; (578 <_Z10drawBitmapcss+0x314>)
     3ac:	4b71      	ldr	r3, [pc, #452]	; (574 <_Z10drawBitmapcss+0x310>)
     3ae:	0011      	movs	r1, r2
     3b0:	0018      	movs	r0, r3
     3b2:	f002 feee 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(filename);
     3b6:	230c      	movs	r3, #12
     3b8:	18fa      	adds	r2, r7, r3
     3ba:	4b6e      	ldr	r3, [pc, #440]	; (574 <_Z10drawBitmapcss+0x310>)
     3bc:	0011      	movs	r1, r2
     3be:	0018      	movs	r0, r3
     3c0:	f002 fef7 	bl	31b2 <_ZN5Print5printEPKc>
	Serial.println('\'');
     3c4:	4b6b      	ldr	r3, [pc, #428]	; (574 <_Z10drawBitmapcss+0x310>)
     3c6:	2127      	movs	r1, #39	; 0x27
     3c8:	0018      	movs	r0, r3
     3ca:	f002 ffe3 	bl	3394 <_ZN5Print7printlnEc>

	// Todo (BROKEN)
	// Open requested file on SD card
	if ((bmpFile = SD.open(filename))) {
     3ce:	239c      	movs	r3, #156	; 0x9c
     3d0:	005b      	lsls	r3, r3, #1
     3d2:	18f8      	adds	r0, r7, r3
     3d4:	230c      	movs	r3, #12
     3d6:	18fa      	adds	r2, r7, r3
     3d8:	4968      	ldr	r1, [pc, #416]	; (57c <_Z10drawBitmapcss+0x318>)
     3da:	2301      	movs	r3, #1
     3dc:	f008 fea0 	bl	9120 <_ZN5SDLib7SDClass4openEPKch>
     3e0:	239c      	movs	r3, #156	; 0x9c
     3e2:	005b      	lsls	r3, r3, #1
     3e4:	18fa      	adds	r2, r7, r3
     3e6:	238a      	movs	r3, #138	; 0x8a
     3e8:	005b      	lsls	r3, r3, #1
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	0011      	movs	r1, r2
     3ee:	0018      	movs	r0, r3
     3f0:	f7ff ff16 	bl	220 <_ZN5SDLib4FileaSEOS0_>
     3f4:	0003      	movs	r3, r0
     3f6:	0018      	movs	r0, r3
     3f8:	f008 fcad 	bl	8d56 <_ZN5SDLib4FilecvbEv>
     3fc:	1e03      	subs	r3, r0, #0
     3fe:	d005      	beq.n	40c <_Z10drawBitmapcss+0x1a8>
		Serial.println(F("File (maybe) not found"));
     400:	4a5f      	ldr	r2, [pc, #380]	; (580 <_Z10drawBitmapcss+0x31c>)
     402:	4b5c      	ldr	r3, [pc, #368]	; (574 <_Z10drawBitmapcss+0x310>)
     404:	0011      	movs	r1, r2
     406:	0018      	movs	r0, r3
     408:	f002 ff7e 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
		// return;
	}

	// Parse BMP header
	Serial.println(F("Start parse"));
     40c:	4a5d      	ldr	r2, [pc, #372]	; (584 <_Z10drawBitmapcss+0x320>)
     40e:	4b59      	ldr	r3, [pc, #356]	; (574 <_Z10drawBitmapcss+0x310>)
     410:	0011      	movs	r1, r2
     412:	0018      	movs	r0, r3
     414:	f002 ff78 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     418:	238a      	movs	r3, #138	; 0x8a
     41a:	005b      	lsls	r3, r3, #1
     41c:	18fb      	adds	r3, r7, r3
     41e:	0018      	movs	r0, r3
     420:	f7ff fe78 	bl	114 <_Z6read16RN5SDLib4FileE>
     424:	0003      	movs	r3, r0
     426:	4a58      	ldr	r2, [pc, #352]	; (588 <_Z10drawBitmapcss+0x324>)
     428:	4694      	mov	ip, r2
     42a:	4463      	add	r3, ip
     42c:	425a      	negs	r2, r3
     42e:	4153      	adcs	r3, r2
     430:	b2db      	uxtb	r3, r3
     432:	2b00      	cmp	r3, #0
     434:	d100      	bne.n	438 <_Z10drawBitmapcss+0x1d4>
     436:	e349      	b.n	acc <_Z10drawBitmapcss+0x868>
		Serial.print(F("File size: "));
     438:	4a54      	ldr	r2, [pc, #336]	; (58c <_Z10drawBitmapcss+0x328>)
     43a:	4b4e      	ldr	r3, [pc, #312]	; (574 <_Z10drawBitmapcss+0x310>)
     43c:	0011      	movs	r1, r2
     43e:	0018      	movs	r0, r3
     440:	f002 fea7 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     444:	238a      	movs	r3, #138	; 0x8a
     446:	005b      	lsls	r3, r3, #1
     448:	18fb      	adds	r3, r7, r3
     44a:	0018      	movs	r0, r3
     44c:	f7ff fe86 	bl	15c <_Z6read32RN5SDLib4FileE>
     450:	0001      	movs	r1, r0
     452:	4b48      	ldr	r3, [pc, #288]	; (574 <_Z10drawBitmapcss+0x310>)
     454:	220a      	movs	r2, #10
     456:	0018      	movs	r0, r3
     458:	f002 fff4 	bl	3444 <_ZN5Print7printlnEmi>
		(void) read32(bmpFile); // Read & ignore creator bytes
     45c:	238a      	movs	r3, #138	; 0x8a
     45e:	005b      	lsls	r3, r3, #1
     460:	18fb      	adds	r3, r7, r3
     462:	0018      	movs	r0, r3
     464:	f7ff fe7a 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     468:	238a      	movs	r3, #138	; 0x8a
     46a:	005b      	lsls	r3, r3, #1
     46c:	18fb      	adds	r3, r7, r3
     46e:	0018      	movs	r0, r3
     470:	f7ff fe74 	bl	15c <_Z6read32RN5SDLib4FileE>
     474:	0003      	movs	r3, r0
     476:	22ba      	movs	r2, #186	; 0xba
     478:	0052      	lsls	r2, r2, #1
     47a:	18ba      	adds	r2, r7, r2
     47c:	6013      	str	r3, [r2, #0]
		Serial.print(F("Image Offset: "));
     47e:	4a44      	ldr	r2, [pc, #272]	; (590 <_Z10drawBitmapcss+0x32c>)
     480:	4b3c      	ldr	r3, [pc, #240]	; (574 <_Z10drawBitmapcss+0x310>)
     482:	0011      	movs	r1, r2
     484:	0018      	movs	r0, r3
     486:	f002 fe84 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(bmpImageoffset, DEC);
     48a:	23ba      	movs	r3, #186	; 0xba
     48c:	005b      	lsls	r3, r3, #1
     48e:	18fb      	adds	r3, r7, r3
     490:	6819      	ldr	r1, [r3, #0]
     492:	4b38      	ldr	r3, [pc, #224]	; (574 <_Z10drawBitmapcss+0x310>)
     494:	220a      	movs	r2, #10
     496:	0018      	movs	r0, r3
     498:	f002 ffd4 	bl	3444 <_ZN5Print7printlnEmi>
		// Read DIB header
		Serial.print(F("Header size: "));
     49c:	4a3d      	ldr	r2, [pc, #244]	; (594 <_Z10drawBitmapcss+0x330>)
     49e:	4b35      	ldr	r3, [pc, #212]	; (574 <_Z10drawBitmapcss+0x310>)
     4a0:	0011      	movs	r1, r2
     4a2:	0018      	movs	r0, r3
     4a4:	f002 fe75 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     4a8:	238a      	movs	r3, #138	; 0x8a
     4aa:	005b      	lsls	r3, r3, #1
     4ac:	18fb      	adds	r3, r7, r3
     4ae:	0018      	movs	r0, r3
     4b0:	f7ff fe54 	bl	15c <_Z6read32RN5SDLib4FileE>
     4b4:	0001      	movs	r1, r0
     4b6:	4b2f      	ldr	r3, [pc, #188]	; (574 <_Z10drawBitmapcss+0x310>)
     4b8:	220a      	movs	r2, #10
     4ba:	0018      	movs	r0, r3
     4bc:	f002 ffc2 	bl	3444 <_ZN5Print7printlnEmi>
		bmpWidth = read32(bmpFile);
     4c0:	238a      	movs	r3, #138	; 0x8a
     4c2:	005b      	lsls	r3, r3, #1
     4c4:	18fb      	adds	r3, r7, r3
     4c6:	0018      	movs	r0, r3
     4c8:	f7ff fe48 	bl	15c <_Z6read32RN5SDLib4FileE>
     4cc:	0003      	movs	r3, r0
     4ce:	22b8      	movs	r2, #184	; 0xb8
     4d0:	0052      	lsls	r2, r2, #1
     4d2:	18ba      	adds	r2, r7, r2
     4d4:	6013      	str	r3, [r2, #0]
		bmpHeight = read32(bmpFile);
     4d6:	238a      	movs	r3, #138	; 0x8a
     4d8:	005b      	lsls	r3, r3, #1
     4da:	18fb      	adds	r3, r7, r3
     4dc:	0018      	movs	r0, r3
     4de:	f7ff fe3d 	bl	15c <_Z6read32RN5SDLib4FileE>
     4e2:	0003      	movs	r3, r0
     4e4:	22ce      	movs	r2, #206	; 0xce
     4e6:	0052      	lsls	r2, r2, #1
     4e8:	18ba      	adds	r2, r7, r2
     4ea:	6013      	str	r3, [r2, #0]
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     4ec:	238a      	movs	r3, #138	; 0x8a
     4ee:	005b      	lsls	r3, r3, #1
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	0018      	movs	r0, r3
     4f4:	f7ff fe0e 	bl	114 <_Z6read16RN5SDLib4FileE>
     4f8:	0003      	movs	r3, r0
     4fa:	3b01      	subs	r3, #1
     4fc:	425a      	negs	r2, r3
     4fe:	4153      	adcs	r3, r2
     500:	b2db      	uxtb	r3, r3
     502:	2b00      	cmp	r3, #0
     504:	d100      	bne.n	508 <_Z10drawBitmapcss+0x2a4>
     506:	e2e1      	b.n	acc <_Z10drawBitmapcss+0x868>
			bmpDepth = read16(bmpFile); // bits per pixel
     508:	238a      	movs	r3, #138	; 0x8a
     50a:	005b      	lsls	r3, r3, #1
     50c:	18fb      	adds	r3, r7, r3
     50e:	0018      	movs	r0, r3
     510:	f7ff fe00 	bl	114 <_Z6read16RN5SDLib4FileE>
     514:	0003      	movs	r3, r0
     516:	001a      	movs	r2, r3
     518:	2370      	movs	r3, #112	; 0x70
     51a:	33ff      	adds	r3, #255	; 0xff
     51c:	18fb      	adds	r3, r7, r3
     51e:	701a      	strb	r2, [r3, #0]
			Serial.print(F("Bit Depth: "));
     520:	4a1d      	ldr	r2, [pc, #116]	; (598 <_Z10drawBitmapcss+0x334>)
     522:	4b14      	ldr	r3, [pc, #80]	; (574 <_Z10drawBitmapcss+0x310>)
     524:	0011      	movs	r1, r2
     526:	0018      	movs	r0, r3
     528:	f002 fe33 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(bmpDepth);
     52c:	2370      	movs	r3, #112	; 0x70
     52e:	33ff      	adds	r3, #255	; 0xff
     530:	18fb      	adds	r3, r7, r3
     532:	7819      	ldrb	r1, [r3, #0]
     534:	4b0f      	ldr	r3, [pc, #60]	; (574 <_Z10drawBitmapcss+0x310>)
     536:	220a      	movs	r2, #10
     538:	0018      	movs	r0, r3
     53a:	f002 ff48 	bl	33ce <_ZN5Print7printlnEhi>
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     53e:	2370      	movs	r3, #112	; 0x70
     540:	33ff      	adds	r3, #255	; 0xff
     542:	18fb      	adds	r3, r7, r3
     544:	781b      	ldrb	r3, [r3, #0]
     546:	2b18      	cmp	r3, #24
     548:	d128      	bne.n	59c <_Z10drawBitmapcss+0x338>
     54a:	238a      	movs	r3, #138	; 0x8a
     54c:	005b      	lsls	r3, r3, #1
     54e:	18fb      	adds	r3, r7, r3
     550:	0018      	movs	r0, r3
     552:	f7ff fe03 	bl	15c <_Z6read32RN5SDLib4FileE>
     556:	1e03      	subs	r3, r0, #0
     558:	d120      	bne.n	59c <_Z10drawBitmapcss+0x338>
     55a:	2301      	movs	r3, #1
     55c:	e01f      	b.n	59e <_Z10drawBitmapcss+0x33a>
     55e:	46c0      	nop			; (mov r8, r8)
     560:	fffffe67 	.word	0xfffffe67
     564:	fffffe64 	.word	0xfffffe64
     568:	fffffe62 	.word	0xfffffe62
     56c:	fffffe6c 	.word	0xfffffe6c
     570:	200002bc 	.word	0x200002bc
     574:	20000e94 	.word	0x20000e94
     578:	00013408 	.word	0x00013408
     57c:	200008f4 	.word	0x200008f4
     580:	00013418 	.word	0x00013418
     584:	00013430 	.word	0x00013430
     588:	ffffb2be 	.word	0xffffb2be
     58c:	0001343c 	.word	0x0001343c
     590:	00013448 	.word	0x00013448
     594:	00013458 	.word	0x00013458
     598:	00013468 	.word	0x00013468
     59c:	2300      	movs	r3, #0
     59e:	2b00      	cmp	r3, #0
     5a0:	d100      	bne.n	5a4 <_Z10drawBitmapcss+0x340>
     5a2:	e293      	b.n	acc <_Z10drawBitmapcss+0x868>

				goodBmp = true; // Supported BMP format -- proceed!
     5a4:	23cd      	movs	r3, #205	; 0xcd
     5a6:	005b      	lsls	r3, r3, #1
     5a8:	18fb      	adds	r3, r7, r3
     5aa:	2201      	movs	r2, #1
     5ac:	701a      	strb	r2, [r3, #0]
				Serial.print(F("Image size: "));
     5ae:	4ac0      	ldr	r2, [pc, #768]	; (8b0 <_Z10drawBitmapcss+0x64c>)
     5b0:	4bc0      	ldr	r3, [pc, #768]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5b2:	0011      	movs	r1, r2
     5b4:	0018      	movs	r0, r3
     5b6:	f002 fdec 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(bmpWidth);
     5ba:	23b8      	movs	r3, #184	; 0xb8
     5bc:	005b      	lsls	r3, r3, #1
     5be:	18fb      	adds	r3, r7, r3
     5c0:	6819      	ldr	r1, [r3, #0]
     5c2:	4bbc      	ldr	r3, [pc, #752]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5c4:	220a      	movs	r2, #10
     5c6:	0018      	movs	r0, r3
     5c8:	f002 fe2d 	bl	3226 <_ZN5Print5printEii>
				Serial.print('x');
     5cc:	4bb9      	ldr	r3, [pc, #740]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5ce:	2178      	movs	r1, #120	; 0x78
     5d0:	0018      	movs	r0, r3
     5d2:	f002 fdfe 	bl	31d2 <_ZN5Print5printEc>
				Serial.println(bmpHeight);
     5d6:	23ce      	movs	r3, #206	; 0xce
     5d8:	005b      	lsls	r3, r3, #1
     5da:	18fb      	adds	r3, r7, r3
     5dc:	6819      	ldr	r1, [r3, #0]
     5de:	4bb5      	ldr	r3, [pc, #724]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5e0:	220a      	movs	r2, #10
     5e2:	0018      	movs	r0, r3
     5e4:	f002 ff13 	bl	340e <_ZN5Print7printlnEii>

				// BMP rows are padded (if needed) to 4-byte boundary
				rowSize = (bmpWidth * 3 + 3) & ~3;
     5e8:	23b8      	movs	r3, #184	; 0xb8
     5ea:	005b      	lsls	r3, r3, #1
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	681b      	ldr	r3, [r3, #0]
     5f0:	1c5a      	adds	r2, r3, #1
     5f2:	0013      	movs	r3, r2
     5f4:	005b      	lsls	r3, r3, #1
     5f6:	189b      	adds	r3, r3, r2
     5f8:	001a      	movs	r2, r3
     5fa:	2303      	movs	r3, #3
     5fc:	439a      	bics	r2, r3
     5fe:	0013      	movs	r3, r2
     600:	22b4      	movs	r2, #180	; 0xb4
     602:	0052      	lsls	r2, r2, #1
     604:	18ba      	adds	r2, r7, r2
     606:	6013      	str	r3, [r2, #0]

				// If bmpHeight is negative, image is in top-down order.
				// This is not canon but has been observed in the wild.
				if (bmpHeight < 0) {
     608:	23ce      	movs	r3, #206	; 0xce
     60a:	005b      	lsls	r3, r3, #1
     60c:	18fb      	adds	r3, r7, r3
     60e:	681b      	ldr	r3, [r3, #0]
     610:	2b00      	cmp	r3, #0
     612:	da0d      	bge.n	630 <_Z10drawBitmapcss+0x3cc>
					bmpHeight = -bmpHeight;
     614:	23ce      	movs	r3, #206	; 0xce
     616:	005b      	lsls	r3, r3, #1
     618:	18fb      	adds	r3, r7, r3
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	425b      	negs	r3, r3
     61e:	22ce      	movs	r2, #206	; 0xce
     620:	0052      	lsls	r2, r2, #1
     622:	18ba      	adds	r2, r7, r2
     624:	6013      	str	r3, [r2, #0]
					flip = false;
     626:	239a      	movs	r3, #154	; 0x9a
     628:	33ff      	adds	r3, #255	; 0xff
     62a:	18fb      	adds	r3, r7, r3
     62c:	2200      	movs	r2, #0
     62e:	701a      	strb	r2, [r3, #0]
				}

				// Crop area to be loaded
				x2 = x + bmpWidth - 1; // Lower-right corner
     630:	4ba1      	ldr	r3, [pc, #644]	; (8b8 <_Z10drawBitmapcss+0x654>)
     632:	22d0      	movs	r2, #208	; 0xd0
     634:	0052      	lsls	r2, r2, #1
     636:	4694      	mov	ip, r2
     638:	44bc      	add	ip, r7
     63a:	4463      	add	r3, ip
     63c:	2200      	movs	r2, #0
     63e:	5e9a      	ldrsh	r2, [r3, r2]
     640:	23b8      	movs	r3, #184	; 0xb8
     642:	005b      	lsls	r3, r3, #1
     644:	18fb      	adds	r3, r7, r3
     646:	681b      	ldr	r3, [r3, #0]
     648:	18d3      	adds	r3, r2, r3
     64a:	3b01      	subs	r3, #1
     64c:	22b2      	movs	r2, #178	; 0xb2
     64e:	0052      	lsls	r2, r2, #1
     650:	18ba      	adds	r2, r7, r2
     652:	6013      	str	r3, [r2, #0]
				y2 = y + bmpHeight - 1;
     654:	4b99      	ldr	r3, [pc, #612]	; (8bc <_Z10drawBitmapcss+0x658>)
     656:	22d0      	movs	r2, #208	; 0xd0
     658:	0052      	lsls	r2, r2, #1
     65a:	4694      	mov	ip, r2
     65c:	44bc      	add	ip, r7
     65e:	4463      	add	r3, ip
     660:	2200      	movs	r2, #0
     662:	5e9a      	ldrsh	r2, [r3, r2]
     664:	23ce      	movs	r3, #206	; 0xce
     666:	005b      	lsls	r3, r3, #1
     668:	18fb      	adds	r3, r7, r3
     66a:	681b      	ldr	r3, [r3, #0]
     66c:	18d3      	adds	r3, r2, r3
     66e:	3b01      	subs	r3, #1
     670:	22b0      	movs	r2, #176	; 0xb0
     672:	0052      	lsls	r2, r2, #1
     674:	18ba      	adds	r2, r7, r2
     676:	6013      	str	r3, [r2, #0]
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     678:	23b2      	movs	r3, #178	; 0xb2
     67a:	005b      	lsls	r3, r3, #1
     67c:	18fb      	adds	r3, r7, r3
     67e:	681b      	ldr	r3, [r3, #0]
     680:	2b00      	cmp	r3, #0
     682:	da00      	bge.n	686 <_Z10drawBitmapcss+0x422>
     684:	e209      	b.n	a9a <_Z10drawBitmapcss+0x836>
     686:	23b0      	movs	r3, #176	; 0xb0
     688:	005b      	lsls	r3, r3, #1
     68a:	18fb      	adds	r3, r7, r3
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	2b00      	cmp	r3, #0
     690:	da00      	bge.n	694 <_Z10drawBitmapcss+0x430>
     692:	e202      	b.n	a9a <_Z10drawBitmapcss+0x836>
					w = bmpWidth; // Width/height of section to load/display
     694:	23b8      	movs	r3, #184	; 0xb8
     696:	005b      	lsls	r3, r3, #1
     698:	18fb      	adds	r3, r7, r3
     69a:	681b      	ldr	r3, [r3, #0]
     69c:	22ca      	movs	r2, #202	; 0xca
     69e:	0052      	lsls	r2, r2, #1
     6a0:	18ba      	adds	r2, r7, r2
     6a2:	6013      	str	r3, [r2, #0]
					h = bmpHeight;
     6a4:	23ce      	movs	r3, #206	; 0xce
     6a6:	005b      	lsls	r3, r3, #1
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	22c8      	movs	r2, #200	; 0xc8
     6ae:	0052      	lsls	r2, r2, #1
     6b0:	18ba      	adds	r2, r7, r2
     6b2:	6013      	str	r3, [r2, #0]
					bx1 = by1 = 0; // UL coordinate in BMP file
     6b4:	2300      	movs	r3, #0
     6b6:	22c0      	movs	r2, #192	; 0xc0
     6b8:	0052      	lsls	r2, r2, #1
     6ba:	18ba      	adds	r2, r7, r2
     6bc:	6013      	str	r3, [r2, #0]
     6be:	23c0      	movs	r3, #192	; 0xc0
     6c0:	005b      	lsls	r3, r3, #1
     6c2:	18fb      	adds	r3, r7, r3
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	22c2      	movs	r2, #194	; 0xc2
     6c8:	0052      	lsls	r2, r2, #1
     6ca:	18ba      	adds	r2, r7, r2
     6cc:	6013      	str	r3, [r2, #0]
					if (x < 0) { // Clip left
     6ce:	4b7a      	ldr	r3, [pc, #488]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6d0:	22d0      	movs	r2, #208	; 0xd0
     6d2:	0052      	lsls	r2, r2, #1
     6d4:	4694      	mov	ip, r2
     6d6:	44bc      	add	ip, r7
     6d8:	4463      	add	r3, ip
     6da:	2200      	movs	r2, #0
     6dc:	5e9b      	ldrsh	r3, [r3, r2]
     6de:	2b00      	cmp	r3, #0
     6e0:	da1d      	bge.n	71e <_Z10drawBitmapcss+0x4ba>
						bx1 = -x;
     6e2:	4b75      	ldr	r3, [pc, #468]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6e4:	22d0      	movs	r2, #208	; 0xd0
     6e6:	0052      	lsls	r2, r2, #1
     6e8:	4694      	mov	ip, r2
     6ea:	44bc      	add	ip, r7
     6ec:	4463      	add	r3, ip
     6ee:	2200      	movs	r2, #0
     6f0:	5e9b      	ldrsh	r3, [r3, r2]
     6f2:	425b      	negs	r3, r3
     6f4:	22c2      	movs	r2, #194	; 0xc2
     6f6:	0052      	lsls	r2, r2, #1
     6f8:	18ba      	adds	r2, r7, r2
     6fa:	6013      	str	r3, [r2, #0]
						x = 0;
     6fc:	4b6e      	ldr	r3, [pc, #440]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6fe:	22d0      	movs	r2, #208	; 0xd0
     700:	0052      	lsls	r2, r2, #1
     702:	4694      	mov	ip, r2
     704:	44bc      	add	ip, r7
     706:	4463      	add	r3, ip
     708:	2200      	movs	r2, #0
     70a:	801a      	strh	r2, [r3, #0]
						w = x2 + 1;
     70c:	23b2      	movs	r3, #178	; 0xb2
     70e:	005b      	lsls	r3, r3, #1
     710:	18fb      	adds	r3, r7, r3
     712:	681b      	ldr	r3, [r3, #0]
     714:	3301      	adds	r3, #1
     716:	22ca      	movs	r2, #202	; 0xca
     718:	0052      	lsls	r2, r2, #1
     71a:	18ba      	adds	r2, r7, r2
     71c:	6013      	str	r3, [r2, #0]
					}
					if (y < 0) { // Clip top
     71e:	4b67      	ldr	r3, [pc, #412]	; (8bc <_Z10drawBitmapcss+0x658>)
     720:	22d0      	movs	r2, #208	; 0xd0
     722:	0052      	lsls	r2, r2, #1
     724:	4694      	mov	ip, r2
     726:	44bc      	add	ip, r7
     728:	4463      	add	r3, ip
     72a:	2200      	movs	r2, #0
     72c:	5e9b      	ldrsh	r3, [r3, r2]
     72e:	2b00      	cmp	r3, #0
     730:	da1d      	bge.n	76e <_Z10drawBitmapcss+0x50a>
						by1 = -y;
     732:	4b62      	ldr	r3, [pc, #392]	; (8bc <_Z10drawBitmapcss+0x658>)
     734:	22d0      	movs	r2, #208	; 0xd0
     736:	0052      	lsls	r2, r2, #1
     738:	4694      	mov	ip, r2
     73a:	44bc      	add	ip, r7
     73c:	4463      	add	r3, ip
     73e:	2200      	movs	r2, #0
     740:	5e9b      	ldrsh	r3, [r3, r2]
     742:	425b      	negs	r3, r3
     744:	22c0      	movs	r2, #192	; 0xc0
     746:	0052      	lsls	r2, r2, #1
     748:	18ba      	adds	r2, r7, r2
     74a:	6013      	str	r3, [r2, #0]
						y = 0;
     74c:	4b5b      	ldr	r3, [pc, #364]	; (8bc <_Z10drawBitmapcss+0x658>)
     74e:	22d0      	movs	r2, #208	; 0xd0
     750:	0052      	lsls	r2, r2, #1
     752:	4694      	mov	ip, r2
     754:	44bc      	add	ip, r7
     756:	4463      	add	r3, ip
     758:	2200      	movs	r2, #0
     75a:	801a      	strh	r2, [r3, #0]
						h = y2 + 1;
     75c:	23b0      	movs	r3, #176	; 0xb0
     75e:	005b      	lsls	r3, r3, #1
     760:	18fb      	adds	r3, r7, r3
     762:	681b      	ldr	r3, [r3, #0]
     764:	3301      	adds	r3, #1
     766:	22c8      	movs	r2, #200	; 0xc8
     768:	0052      	lsls	r2, r2, #1
     76a:	18ba      	adds	r2, r7, r2
     76c:	6013      	str	r3, [r2, #0]
					}
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     76e:	4b54      	ldr	r3, [pc, #336]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     770:	0018      	movs	r0, r3
     772:	f00c ff9f 	bl	d6b4 <_ZNK12Adafruit_GFX5widthEv>
     776:	0003      	movs	r3, r0
     778:	001a      	movs	r2, r3
     77a:	23b2      	movs	r3, #178	; 0xb2
     77c:	005b      	lsls	r3, r3, #1
     77e:	18fb      	adds	r3, r7, r3
     780:	681b      	ldr	r3, [r3, #0]
     782:	0fd0      	lsrs	r0, r2, #31
     784:	17d9      	asrs	r1, r3, #31
     786:	4293      	cmp	r3, r2
     788:	4148      	adcs	r0, r1
     78a:	0003      	movs	r3, r0
     78c:	b2db      	uxtb	r3, r3
     78e:	2b00      	cmp	r3, #0
     790:	d012      	beq.n	7b8 <_Z10drawBitmapcss+0x554>
     792:	4b4b      	ldr	r3, [pc, #300]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     794:	0018      	movs	r0, r3
     796:	f00c ff8d 	bl	d6b4 <_ZNK12Adafruit_GFX5widthEv>
     79a:	0003      	movs	r3, r0
     79c:	001a      	movs	r2, r3
     79e:	4b46      	ldr	r3, [pc, #280]	; (8b8 <_Z10drawBitmapcss+0x654>)
     7a0:	21d0      	movs	r1, #208	; 0xd0
     7a2:	0049      	lsls	r1, r1, #1
     7a4:	468c      	mov	ip, r1
     7a6:	44bc      	add	ip, r7
     7a8:	4463      	add	r3, ip
     7aa:	2100      	movs	r1, #0
     7ac:	5e5b      	ldrsh	r3, [r3, r1]
     7ae:	1ad3      	subs	r3, r2, r3
     7b0:	22ca      	movs	r2, #202	; 0xca
     7b2:	0052      	lsls	r2, r2, #1
     7b4:	18ba      	adds	r2, r7, r2
     7b6:	6013      	str	r3, [r2, #0]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     7b8:	4b41      	ldr	r3, [pc, #260]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     7ba:	0018      	movs	r0, r3
     7bc:	f00c ff85 	bl	d6ca <_ZNK12Adafruit_GFX6heightEv>
     7c0:	0003      	movs	r3, r0
     7c2:	001a      	movs	r2, r3
     7c4:	23b0      	movs	r3, #176	; 0xb0
     7c6:	005b      	lsls	r3, r3, #1
     7c8:	18fb      	adds	r3, r7, r3
     7ca:	681b      	ldr	r3, [r3, #0]
     7cc:	0fd0      	lsrs	r0, r2, #31
     7ce:	17d9      	asrs	r1, r3, #31
     7d0:	4293      	cmp	r3, r2
     7d2:	4148      	adcs	r0, r1
     7d4:	0003      	movs	r3, r0
     7d6:	b2db      	uxtb	r3, r3
     7d8:	2b00      	cmp	r3, #0
     7da:	d012      	beq.n	802 <_Z10drawBitmapcss+0x59e>
     7dc:	4b38      	ldr	r3, [pc, #224]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     7de:	0018      	movs	r0, r3
     7e0:	f00c ff73 	bl	d6ca <_ZNK12Adafruit_GFX6heightEv>
     7e4:	0003      	movs	r3, r0
     7e6:	001a      	movs	r2, r3
     7e8:	4b34      	ldr	r3, [pc, #208]	; (8bc <_Z10drawBitmapcss+0x658>)
     7ea:	21d0      	movs	r1, #208	; 0xd0
     7ec:	0049      	lsls	r1, r1, #1
     7ee:	468c      	mov	ip, r1
     7f0:	44bc      	add	ip, r7
     7f2:	4463      	add	r3, ip
     7f4:	2100      	movs	r1, #0
     7f6:	5e5b      	ldrsh	r3, [r3, r1]
     7f8:	1ad3      	subs	r3, r2, r3
     7fa:	22c8      	movs	r2, #200	; 0xc8
     7fc:	0052      	lsls	r2, r2, #1
     7fe:	18ba      	adds	r2, r7, r2
     800:	6013      	str	r3, [r2, #0]

					// Set tftDisplay address window to clipped image bounds
					tftDisplay.startWrite(); // Requires start/end transaction now
     802:	4b2f      	ldr	r3, [pc, #188]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     804:	0018      	movs	r0, r3
     806:	f007 fca9 	bl	815c <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
     80a:	4b2b      	ldr	r3, [pc, #172]	; (8b8 <_Z10drawBitmapcss+0x654>)
     80c:	22d0      	movs	r2, #208	; 0xd0
     80e:	0052      	lsls	r2, r2, #1
     810:	4694      	mov	ip, r2
     812:	44bc      	add	ip, r7
     814:	4463      	add	r3, ip
     816:	8819      	ldrh	r1, [r3, #0]
     818:	4b28      	ldr	r3, [pc, #160]	; (8bc <_Z10drawBitmapcss+0x658>)
     81a:	22d0      	movs	r2, #208	; 0xd0
     81c:	0052      	lsls	r2, r2, #1
     81e:	4694      	mov	ip, r2
     820:	44bc      	add	ip, r7
     822:	4463      	add	r3, ip
     824:	881a      	ldrh	r2, [r3, #0]
     826:	23ca      	movs	r3, #202	; 0xca
     828:	005b      	lsls	r3, r3, #1
     82a:	18fb      	adds	r3, r7, r3
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	b29c      	uxth	r4, r3
     830:	23c8      	movs	r3, #200	; 0xc8
     832:	005b      	lsls	r3, r3, #1
     834:	18fb      	adds	r3, r7, r3
     836:	681b      	ldr	r3, [r3, #0]
     838:	b29b      	uxth	r3, r3
     83a:	4821      	ldr	r0, [pc, #132]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     83c:	9300      	str	r3, [sp, #0]
     83e:	0023      	movs	r3, r4
     840:	f007 fcf6 	bl	8230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>

					for (row = 0; row < h; row++) { // For each scanline...
     844:	2300      	movs	r3, #0
     846:	22c6      	movs	r2, #198	; 0xc6
     848:	0052      	lsls	r2, r2, #1
     84a:	18ba      	adds	r2, r7, r2
     84c:	6013      	str	r3, [r2, #0]
     84e:	23c6      	movs	r3, #198	; 0xc6
     850:	005b      	lsls	r3, r3, #1
     852:	18fb      	adds	r3, r7, r3
     854:	681a      	ldr	r2, [r3, #0]
     856:	23c8      	movs	r3, #200	; 0xc8
     858:	005b      	lsls	r3, r3, #1
     85a:	18fb      	adds	r3, r7, r3
     85c:	681b      	ldr	r3, [r3, #0]
     85e:	429a      	cmp	r2, r3
     860:	db00      	blt.n	864 <_Z10drawBitmapcss+0x600>
     862:	e116      	b.n	a92 <_Z10drawBitmapcss+0x82e>
						// intensive to be doing this on every line, but this
						// method covers a lot of gritty details like cropping
						// and scanline padding.  Also, the seek only takes
						// place if the file position actually needs to change
						// (avoids a lot of cluster math in SD library).
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
     864:	239a      	movs	r3, #154	; 0x9a
     866:	33ff      	adds	r3, #255	; 0xff
     868:	18fb      	adds	r3, r7, r3
     86a:	781b      	ldrb	r3, [r3, #0]
     86c:	2b00      	cmp	r3, #0
     86e:	d029      	beq.n	8c4 <_Z10drawBitmapcss+0x660>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
     870:	23ce      	movs	r3, #206	; 0xce
     872:	005b      	lsls	r3, r3, #1
     874:	18fb      	adds	r3, r7, r3
     876:	681b      	ldr	r3, [r3, #0]
     878:	1e5a      	subs	r2, r3, #1
     87a:	23c6      	movs	r3, #198	; 0xc6
     87c:	005b      	lsls	r3, r3, #1
     87e:	18fb      	adds	r3, r7, r3
     880:	6819      	ldr	r1, [r3, #0]
     882:	23c0      	movs	r3, #192	; 0xc0
     884:	005b      	lsls	r3, r3, #1
     886:	18fb      	adds	r3, r7, r3
     888:	681b      	ldr	r3, [r3, #0]
     88a:	18cb      	adds	r3, r1, r3
     88c:	1ad3      	subs	r3, r2, r3
     88e:	001a      	movs	r2, r3
     890:	23b4      	movs	r3, #180	; 0xb4
     892:	005b      	lsls	r3, r3, #1
     894:	18fb      	adds	r3, r7, r3
     896:	681b      	ldr	r3, [r3, #0]
     898:	435a      	muls	r2, r3
     89a:	23ba      	movs	r3, #186	; 0xba
     89c:	005b      	lsls	r3, r3, #1
     89e:	18fb      	adds	r3, r7, r3
     8a0:	681b      	ldr	r3, [r3, #0]
     8a2:	18d3      	adds	r3, r2, r3
     8a4:	22be      	movs	r2, #190	; 0xbe
     8a6:	0052      	lsls	r2, r2, #1
     8a8:	18ba      	adds	r2, r7, r2
     8aa:	6013      	str	r3, [r2, #0]
     8ac:	e022      	b.n	8f4 <_Z10drawBitmapcss+0x690>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00013474 	.word	0x00013474
     8b4:	20000e94 	.word	0x20000e94
     8b8:	fffffe64 	.word	0xfffffe64
     8bc:	fffffe62 	.word	0xfffffe62
     8c0:	200002bc 	.word	0x200002bc
						else
						// Bitmap is stored top-to-bottom
						pos = bmpImageoffset + (row + by1) * rowSize;
     8c4:	23c6      	movs	r3, #198	; 0xc6
     8c6:	005b      	lsls	r3, r3, #1
     8c8:	18fb      	adds	r3, r7, r3
     8ca:	681a      	ldr	r2, [r3, #0]
     8cc:	23c0      	movs	r3, #192	; 0xc0
     8ce:	005b      	lsls	r3, r3, #1
     8d0:	18fb      	adds	r3, r7, r3
     8d2:	681b      	ldr	r3, [r3, #0]
     8d4:	18d3      	adds	r3, r2, r3
     8d6:	001a      	movs	r2, r3
     8d8:	23b4      	movs	r3, #180	; 0xb4
     8da:	005b      	lsls	r3, r3, #1
     8dc:	18fb      	adds	r3, r7, r3
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	435a      	muls	r2, r3
     8e2:	23ba      	movs	r3, #186	; 0xba
     8e4:	005b      	lsls	r3, r3, #1
     8e6:	18fb      	adds	r3, r7, r3
     8e8:	681b      	ldr	r3, [r3, #0]
     8ea:	18d3      	adds	r3, r2, r3
     8ec:	22be      	movs	r2, #190	; 0xbe
     8ee:	0052      	lsls	r2, r2, #1
     8f0:	18ba      	adds	r2, r7, r2
     8f2:	6013      	str	r3, [r2, #0]
						pos += bx1 * 3; // Factor in starting column (bx1)
     8f4:	23c2      	movs	r3, #194	; 0xc2
     8f6:	005b      	lsls	r3, r3, #1
     8f8:	18fb      	adds	r3, r7, r3
     8fa:	681a      	ldr	r2, [r3, #0]
     8fc:	0013      	movs	r3, r2
     8fe:	005b      	lsls	r3, r3, #1
     900:	189b      	adds	r3, r3, r2
     902:	001a      	movs	r2, r3
     904:	23be      	movs	r3, #190	; 0xbe
     906:	005b      	lsls	r3, r3, #1
     908:	18fb      	adds	r3, r7, r3
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	189b      	adds	r3, r3, r2
     90e:	22be      	movs	r2, #190	; 0xbe
     910:	0052      	lsls	r2, r2, #1
     912:	18ba      	adds	r2, r7, r2
     914:	6013      	str	r3, [r2, #0]
						if (bmpFile.position() != pos) { // Need seek?
     916:	238a      	movs	r3, #138	; 0x8a
     918:	005b      	lsls	r3, r3, #1
     91a:	18fb      	adds	r3, r7, r3
     91c:	0018      	movs	r0, r3
     91e:	f008 f9d8 	bl	8cd2 <_ZN5SDLib4File8positionEv>
     922:	0002      	movs	r2, r0
     924:	23be      	movs	r3, #190	; 0xbe
     926:	005b      	lsls	r3, r3, #1
     928:	18fb      	adds	r3, r7, r3
     92a:	681b      	ldr	r3, [r3, #0]
     92c:	1ad3      	subs	r3, r2, r3
     92e:	1e5a      	subs	r2, r3, #1
     930:	4193      	sbcs	r3, r2
     932:	b2db      	uxtb	r3, r3
     934:	2b00      	cmp	r3, #0
     936:	d017      	beq.n	968 <_Z10drawBitmapcss+0x704>
							tftDisplay.endWrite(); // End tftDisplay transaction
     938:	4b73      	ldr	r3, [pc, #460]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     93a:	0018      	movs	r0, r3
     93c:	f007 fc36 	bl	81ac <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
     940:	23be      	movs	r3, #190	; 0xbe
     942:	005b      	lsls	r3, r3, #1
     944:	18fb      	adds	r3, r7, r3
     946:	681a      	ldr	r2, [r3, #0]
     948:	238a      	movs	r3, #138	; 0x8a
     94a:	005b      	lsls	r3, r3, #1
     94c:	18fb      	adds	r3, r7, r3
     94e:	0011      	movs	r1, r2
     950:	0018      	movs	r0, r3
     952:	f008 f9a4 	bl	8c9e <_ZN5SDLib4File4seekEm>
							buffidx = sizeof(sdbuffer); // Force buffer reload
     956:	239c      	movs	r3, #156	; 0x9c
     958:	33ff      	adds	r3, #255	; 0xff
     95a:	18fb      	adds	r3, r7, r3
     95c:	22ff      	movs	r2, #255	; 0xff
     95e:	701a      	strb	r2, [r3, #0]
							tftDisplay.startWrite(); // Start new tftDisplay transaction
     960:	4b69      	ldr	r3, [pc, #420]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     962:	0018      	movs	r0, r3
     964:	f007 fbfa 	bl	815c <_ZN16Adafruit_ILI934110startWriteEv>
						}
						for (col = 0; col < w; col++) { // For each pixel...
     968:	2300      	movs	r3, #0
     96a:	22c4      	movs	r2, #196	; 0xc4
     96c:	0052      	lsls	r2, r2, #1
     96e:	18ba      	adds	r2, r7, r2
     970:	6013      	str	r3, [r2, #0]
     972:	23c4      	movs	r3, #196	; 0xc4
     974:	005b      	lsls	r3, r3, #1
     976:	18fb      	adds	r3, r7, r3
     978:	681a      	ldr	r2, [r3, #0]
     97a:	23ca      	movs	r3, #202	; 0xca
     97c:	005b      	lsls	r3, r3, #1
     97e:	18fb      	adds	r3, r7, r3
     980:	681b      	ldr	r3, [r3, #0]
     982:	429a      	cmp	r2, r3
     984:	da7b      	bge.n	a7e <_Z10drawBitmapcss+0x81a>
							// Time to read more pixel data?
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
     986:	239c      	movs	r3, #156	; 0x9c
     988:	33ff      	adds	r3, #255	; 0xff
     98a:	18fb      	adds	r3, r7, r3
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	2bff      	cmp	r3, #255	; 0xff
     990:	d115      	bne.n	9be <_Z10drawBitmapcss+0x75a>
								tftDisplay.endWrite(); // End tftDisplay transaction
     992:	4b5d      	ldr	r3, [pc, #372]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     994:	0018      	movs	r0, r3
     996:	f007 fc09 	bl	81ac <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
     99a:	2314      	movs	r3, #20
     99c:	18f9      	adds	r1, r7, r3
     99e:	238a      	movs	r3, #138	; 0x8a
     9a0:	005b      	lsls	r3, r3, #1
     9a2:	18fb      	adds	r3, r7, r3
     9a4:	22ff      	movs	r2, #255	; 0xff
     9a6:	0018      	movs	r0, r3
     9a8:	f008 f92b 	bl	8c02 <_ZN5SDLib4File4readEPvt>
								buffidx = 0; // Set index to beginning
     9ac:	239c      	movs	r3, #156	; 0x9c
     9ae:	33ff      	adds	r3, #255	; 0xff
     9b0:	18fb      	adds	r3, r7, r3
     9b2:	2200      	movs	r2, #0
     9b4:	701a      	strb	r2, [r3, #0]
								tftDisplay.startWrite(); // Start new tftDisplay transaction
     9b6:	4b54      	ldr	r3, [pc, #336]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     9b8:	0018      	movs	r0, r3
     9ba:	f007 fbcf 	bl	815c <_ZN16Adafruit_ILI934110startWriteEv>
							}
							// Convert pixel from BMP to tftDisplay format, push to display
							b = sdbuffer[buffidx++];
     9be:	239c      	movs	r3, #156	; 0x9c
     9c0:	33ff      	adds	r3, #255	; 0xff
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	229c      	movs	r2, #156	; 0x9c
     9c8:	32ff      	adds	r2, #255	; 0xff
     9ca:	18ba      	adds	r2, r7, r2
     9cc:	1c59      	adds	r1, r3, #1
     9ce:	7011      	strb	r1, [r2, #0]
     9d0:	0019      	movs	r1, r3
     9d2:	2360      	movs	r3, #96	; 0x60
     9d4:	33ff      	adds	r3, #255	; 0xff
     9d6:	18fb      	adds	r3, r7, r3
     9d8:	4a4c      	ldr	r2, [pc, #304]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     9da:	20d0      	movs	r0, #208	; 0xd0
     9dc:	0040      	lsls	r0, r0, #1
     9de:	4684      	mov	ip, r0
     9e0:	44bc      	add	ip, r7
     9e2:	4462      	add	r2, ip
     9e4:	5c52      	ldrb	r2, [r2, r1]
     9e6:	701a      	strb	r2, [r3, #0]
							g = sdbuffer[buffidx++];
     9e8:	239c      	movs	r3, #156	; 0x9c
     9ea:	33ff      	adds	r3, #255	; 0xff
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	229c      	movs	r2, #156	; 0x9c
     9f2:	32ff      	adds	r2, #255	; 0xff
     9f4:	18ba      	adds	r2, r7, r2
     9f6:	1c59      	adds	r1, r3, #1
     9f8:	7011      	strb	r1, [r2, #0]
     9fa:	0019      	movs	r1, r3
     9fc:	23af      	movs	r3, #175	; 0xaf
     9fe:	005b      	lsls	r3, r3, #1
     a00:	18fb      	adds	r3, r7, r3
     a02:	4a42      	ldr	r2, [pc, #264]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     a04:	20d0      	movs	r0, #208	; 0xd0
     a06:	0040      	lsls	r0, r0, #1
     a08:	4684      	mov	ip, r0
     a0a:	44bc      	add	ip, r7
     a0c:	4462      	add	r2, ip
     a0e:	5c52      	ldrb	r2, [r2, r1]
     a10:	701a      	strb	r2, [r3, #0]
							r = sdbuffer[buffidx++];
     a12:	239c      	movs	r3, #156	; 0x9c
     a14:	33ff      	adds	r3, #255	; 0xff
     a16:	18fb      	adds	r3, r7, r3
     a18:	781b      	ldrb	r3, [r3, #0]
     a1a:	229c      	movs	r2, #156	; 0x9c
     a1c:	32ff      	adds	r2, #255	; 0xff
     a1e:	18ba      	adds	r2, r7, r2
     a20:	1c59      	adds	r1, r3, #1
     a22:	7011      	strb	r1, [r2, #0]
     a24:	0019      	movs	r1, r3
     a26:	235e      	movs	r3, #94	; 0x5e
     a28:	33ff      	adds	r3, #255	; 0xff
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	4a37      	ldr	r2, [pc, #220]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     a2e:	20d0      	movs	r0, #208	; 0xd0
     a30:	0040      	lsls	r0, r0, #1
     a32:	4684      	mov	ip, r0
     a34:	44bc      	add	ip, r7
     a36:	4462      	add	r2, ip
     a38:	5c52      	ldrb	r2, [r2, r1]
     a3a:	701a      	strb	r2, [r3, #0]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
     a3c:	2360      	movs	r3, #96	; 0x60
     a3e:	33ff      	adds	r3, #255	; 0xff
     a40:	18fb      	adds	r3, r7, r3
     a42:	781c      	ldrb	r4, [r3, #0]
     a44:	23af      	movs	r3, #175	; 0xaf
     a46:	005b      	lsls	r3, r3, #1
     a48:	18fb      	adds	r3, r7, r3
     a4a:	781a      	ldrb	r2, [r3, #0]
     a4c:	235e      	movs	r3, #94	; 0x5e
     a4e:	33ff      	adds	r3, #255	; 0xff
     a50:	18fb      	adds	r3, r7, r3
     a52:	7819      	ldrb	r1, [r3, #0]
     a54:	482c      	ldr	r0, [pc, #176]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a56:	0023      	movs	r3, r4
     a58:	f006 ff70 	bl	793c <_ZN16Adafruit_ILI93418color565Ehhh>
     a5c:	0003      	movs	r3, r0
     a5e:	001a      	movs	r2, r3
     a60:	4b29      	ldr	r3, [pc, #164]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a62:	0011      	movs	r1, r2
     a64:	0018      	movs	r0, r3
     a66:	f007 fcab 	bl	83c0 <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
     a6a:	23c4      	movs	r3, #196	; 0xc4
     a6c:	005b      	lsls	r3, r3, #1
     a6e:	18fb      	adds	r3, r7, r3
     a70:	681b      	ldr	r3, [r3, #0]
     a72:	3301      	adds	r3, #1
     a74:	22c4      	movs	r2, #196	; 0xc4
     a76:	0052      	lsls	r2, r2, #1
     a78:	18ba      	adds	r2, r7, r2
     a7a:	6013      	str	r3, [r2, #0]
     a7c:	e779      	b.n	972 <_Z10drawBitmapcss+0x70e>
					for (row = 0; row < h; row++) { // For each scanline...
     a7e:	23c6      	movs	r3, #198	; 0xc6
     a80:	005b      	lsls	r3, r3, #1
     a82:	18fb      	adds	r3, r7, r3
     a84:	681b      	ldr	r3, [r3, #0]
     a86:	3301      	adds	r3, #1
     a88:	22c6      	movs	r2, #198	; 0xc6
     a8a:	0052      	lsls	r2, r2, #1
     a8c:	18ba      	adds	r2, r7, r2
     a8e:	6013      	str	r3, [r2, #0]
     a90:	e6dd      	b.n	84e <_Z10drawBitmapcss+0x5ea>
						} // end pixel
					} // end scanline
					tftDisplay.endWrite(); // End last tftDisplay transaction
     a92:	4b1d      	ldr	r3, [pc, #116]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a94:	0018      	movs	r0, r3
     a96:	f007 fb89 	bl	81ac <_ZN16Adafruit_ILI93418endWriteEv>
				} // end onscreen
				Serial.print(F("Loaded in "));
     a9a:	4a1d      	ldr	r2, [pc, #116]	; (b10 <_Z10drawBitmapcss+0x8ac>)
     a9c:	4b1d      	ldr	r3, [pc, #116]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     a9e:	0011      	movs	r1, r2
     aa0:	0018      	movs	r0, r3
     aa2:	f002 fb76 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(millis() - startTime);
     aa6:	f002 fab9 	bl	301c <millis>
     aaa:	0002      	movs	r2, r0
     aac:	23bc      	movs	r3, #188	; 0xbc
     aae:	005b      	lsls	r3, r3, #1
     ab0:	18fb      	adds	r3, r7, r3
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	1ad1      	subs	r1, r2, r3
     ab6:	4b17      	ldr	r3, [pc, #92]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     ab8:	220a      	movs	r2, #10
     aba:	0018      	movs	r0, r3
     abc:	f002 fc05 	bl	32ca <_ZN5Print5printEmi>
				Serial.println(F(" ms"));
     ac0:	4a15      	ldr	r2, [pc, #84]	; (b18 <_Z10drawBitmapcss+0x8b4>)
     ac2:	4b14      	ldr	r3, [pc, #80]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     ac4:	0011      	movs	r1, r2
     ac6:	0018      	movs	r0, r3
     ac8:	f002 fc1e 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
			} // end goodBmp
		}
	}

	bmpFile.close();
     acc:	238a      	movs	r3, #138	; 0x8a
     ace:	005b      	lsls	r3, r3, #1
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	0018      	movs	r0, r3
     ad4:	f008 f926 	bl	8d24 <_ZN5SDLib4File5closeEv>
	if (!goodBmp)
     ad8:	23cd      	movs	r3, #205	; 0xcd
     ada:	005b      	lsls	r3, r3, #1
     adc:	18fb      	adds	r3, r7, r3
     ade:	781b      	ldrb	r3, [r3, #0]
     ae0:	2201      	movs	r2, #1
     ae2:	4053      	eors	r3, r2
     ae4:	b2db      	uxtb	r3, r3
     ae6:	2b00      	cmp	r3, #0
     ae8:	d005      	beq.n	af6 <_Z10drawBitmapcss+0x892>
	Serial.println(F("BMP format not recognized or SD not mounted"));
     aea:	4a0c      	ldr	r2, [pc, #48]	; (b1c <_Z10drawBitmapcss+0x8b8>)
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     aee:	0011      	movs	r1, r2
     af0:	0018      	movs	r0, r3
     af2:	f002 fc09 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println();
     af6:	4b07      	ldr	r3, [pc, #28]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     af8:	0018      	movs	r0, r3
     afa:	f002 fc1f 	bl	333c <_ZN5Print7printlnEv>
     afe:	e000      	b.n	b02 <_Z10drawBitmapcss+0x89e>
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     b00:	46c0      	nop			; (mov r8, r8)
}
     b02:	46bd      	mov	sp, r7
     b04:	b069      	add	sp, #420	; 0x1a4
     b06:	bd90      	pop	{r4, r7, pc}
     b08:	200002bc 	.word	0x200002bc
     b0c:	fffffe74 	.word	0xfffffe74
     b10:	00013484 	.word	0x00013484
     b14:	20000e94 	.word	0x20000e94
     b18:	00013490 	.word	0x00013490
     b1c:	00013494 	.word	0x00013494

00000b20 <_Z10drawBitmapPcss>:

void drawBitmap(char* filename, int16_t x, int16_t y) {
     b20:	b590      	push	{r4, r7, lr}
     b22:	b0e9      	sub	sp, #420	; 0x1a4
     b24:	af02      	add	r7, sp, #8
     b26:	6078      	str	r0, [r7, #4]
     b28:	0008      	movs	r0, r1
     b2a:	0011      	movs	r1, r2
     b2c:	4b99      	ldr	r3, [pc, #612]	; (d94 <_Z10drawBitmapPcss+0x274>)
     b2e:	22cc      	movs	r2, #204	; 0xcc
     b30:	0052      	lsls	r2, r2, #1
     b32:	4694      	mov	ip, r2
     b34:	44bc      	add	ip, r7
     b36:	4463      	add	r3, ip
     b38:	1c02      	adds	r2, r0, #0
     b3a:	801a      	strh	r2, [r3, #0]
     b3c:	4b96      	ldr	r3, [pc, #600]	; (d98 <_Z10drawBitmapPcss+0x278>)
     b3e:	22cc      	movs	r2, #204	; 0xcc
     b40:	0052      	lsls	r2, r2, #1
     b42:	4694      	mov	ip, r2
     b44:	44bc      	add	ip, r7
     b46:	4463      	add	r3, ip
     b48:	1c0a      	adds	r2, r1, #0
     b4a:	801a      	strh	r2, [r3, #0]

	File bmpFile;
     b4c:	2386      	movs	r3, #134	; 0x86
     b4e:	005b      	lsls	r3, r3, #1
     b50:	18fb      	adds	r3, r7, r3
     b52:	0018      	movs	r0, r3
     b54:	f007 ffbc 	bl	8ad0 <_ZN5SDLib4FileC1Ev>
	int bmpWidth, bmpHeight;   // W+H in pixels
	uint8_t bmpDepth;              // Bit depth (currently must be 24)
	uint32_t bmpImageoffset;        // Start of image data in file
	uint32_t rowSize;               // Not always = bmpWidth; may have padding
	uint8_t sdbuffer[3 * BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     b58:	2394      	movs	r3, #148	; 0x94
     b5a:	33ff      	adds	r3, #255	; 0xff
     b5c:	18fb      	adds	r3, r7, r3
     b5e:	22ff      	movs	r2, #255	; 0xff
     b60:	701a      	strb	r2, [r3, #0]
	boolean goodBmp = false;       // Set to true on valid header parse
     b62:	23c9      	movs	r3, #201	; 0xc9
     b64:	005b      	lsls	r3, r3, #1
     b66:	18fb      	adds	r3, r7, r3
     b68:	2200      	movs	r2, #0
     b6a:	701a      	strb	r2, [r3, #0]
	boolean flip = true;        // BMP is stored bottom-to-top
     b6c:	2392      	movs	r3, #146	; 0x92
     b6e:	33ff      	adds	r3, #255	; 0xff
     b70:	18fb      	adds	r3, r7, r3
     b72:	2201      	movs	r2, #1
     b74:	701a      	strb	r2, [r3, #0]
	int w, h, row, col, x2, y2, bx1, by1;
	uint8_t r, g, b;
	uint32_t pos = 0, startTime = millis();
     b76:	2300      	movs	r3, #0
     b78:	22ba      	movs	r2, #186	; 0xba
     b7a:	0052      	lsls	r2, r2, #1
     b7c:	18ba      	adds	r2, r7, r2
     b7e:	6013      	str	r3, [r2, #0]
     b80:	f002 fa4c 	bl	301c <millis>
     b84:	0003      	movs	r3, r0
     b86:	22b8      	movs	r2, #184	; 0xb8
     b88:	0052      	lsls	r2, r2, #1
     b8a:	18ba      	adds	r2, r7, r2
     b8c:	6013      	str	r3, [r2, #0]

	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     b8e:	4b83      	ldr	r3, [pc, #524]	; (d9c <_Z10drawBitmapPcss+0x27c>)
     b90:	0018      	movs	r0, r3
     b92:	f00c fd8f 	bl	d6b4 <_ZNK12Adafruit_GFX5widthEv>
     b96:	0003      	movs	r3, r0
     b98:	001a      	movs	r2, r3
     b9a:	4b7e      	ldr	r3, [pc, #504]	; (d94 <_Z10drawBitmapPcss+0x274>)
     b9c:	21cc      	movs	r1, #204	; 0xcc
     b9e:	0049      	lsls	r1, r1, #1
     ba0:	468c      	mov	ip, r1
     ba2:	44bc      	add	ip, r7
     ba4:	4463      	add	r3, ip
     ba6:	2100      	movs	r1, #0
     ba8:	5e5b      	ldrsh	r3, [r3, r1]
     baa:	4293      	cmp	r3, r2
     bac:	da0f      	bge.n	bce <_Z10drawBitmapPcss+0xae>
     bae:	4b7b      	ldr	r3, [pc, #492]	; (d9c <_Z10drawBitmapPcss+0x27c>)
     bb0:	0018      	movs	r0, r3
     bb2:	f00c fd8a 	bl	d6ca <_ZNK12Adafruit_GFX6heightEv>
     bb6:	0003      	movs	r3, r0
     bb8:	001a      	movs	r2, r3
     bba:	4b77      	ldr	r3, [pc, #476]	; (d98 <_Z10drawBitmapPcss+0x278>)
     bbc:	21cc      	movs	r1, #204	; 0xcc
     bbe:	0049      	lsls	r1, r1, #1
     bc0:	468c      	mov	ip, r1
     bc2:	44bc      	add	ip, r7
     bc4:	4463      	add	r3, ip
     bc6:	2100      	movs	r1, #0
     bc8:	5e5b      	ldrsh	r3, [r3, r1]
     bca:	4293      	cmp	r3, r2
     bcc:	db01      	blt.n	bd2 <_Z10drawBitmapPcss+0xb2>
     bce:	2301      	movs	r3, #1
     bd0:	e000      	b.n	bd4 <_Z10drawBitmapPcss+0xb4>
     bd2:	2300      	movs	r3, #0
     bd4:	2b00      	cmp	r3, #0
     bd6:	d000      	beq.n	bda <_Z10drawBitmapPcss+0xba>
     bd8:	e3a8      	b.n	132c <_Z10drawBitmapPcss+0x80c>

	Serial.println();
     bda:	4b71      	ldr	r3, [pc, #452]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bdc:	0018      	movs	r0, r3
     bde:	f002 fbad 	bl	333c <_ZN5Print7printlnEv>
	Serial.print(F("Loading image '"));
     be2:	4a70      	ldr	r2, [pc, #448]	; (da4 <_Z10drawBitmapPcss+0x284>)
     be4:	4b6e      	ldr	r3, [pc, #440]	; (da0 <_Z10drawBitmapPcss+0x280>)
     be6:	0011      	movs	r1, r2
     be8:	0018      	movs	r0, r3
     bea:	f002 fad2 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(filename);
     bee:	687a      	ldr	r2, [r7, #4]
     bf0:	4b6b      	ldr	r3, [pc, #428]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bf2:	0011      	movs	r1, r2
     bf4:	0018      	movs	r0, r3
     bf6:	f002 fadc 	bl	31b2 <_ZN5Print5printEPKc>
	Serial.println('\'');
     bfa:	4b69      	ldr	r3, [pc, #420]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bfc:	2127      	movs	r1, #39	; 0x27
     bfe:	0018      	movs	r0, r3
     c00:	f002 fbc8 	bl	3394 <_ZN5Print7printlnEc>

	// Todo (BROKEN)
	// Open requested file on SD card
	if ((bmpFile = SD.open(filename))) {
     c04:	2398      	movs	r3, #152	; 0x98
     c06:	005b      	lsls	r3, r3, #1
     c08:	18f8      	adds	r0, r7, r3
     c0a:	687a      	ldr	r2, [r7, #4]
     c0c:	4966      	ldr	r1, [pc, #408]	; (da8 <_Z10drawBitmapPcss+0x288>)
     c0e:	2301      	movs	r3, #1
     c10:	f008 fa86 	bl	9120 <_ZN5SDLib7SDClass4openEPKch>
     c14:	2398      	movs	r3, #152	; 0x98
     c16:	005b      	lsls	r3, r3, #1
     c18:	18fa      	adds	r2, r7, r3
     c1a:	2386      	movs	r3, #134	; 0x86
     c1c:	005b      	lsls	r3, r3, #1
     c1e:	18fb      	adds	r3, r7, r3
     c20:	0011      	movs	r1, r2
     c22:	0018      	movs	r0, r3
     c24:	f7ff fafc 	bl	220 <_ZN5SDLib4FileaSEOS0_>
     c28:	0003      	movs	r3, r0
     c2a:	0018      	movs	r0, r3
     c2c:	f008 f893 	bl	8d56 <_ZN5SDLib4FilecvbEv>
     c30:	1e03      	subs	r3, r0, #0
     c32:	d005      	beq.n	c40 <_Z10drawBitmapPcss+0x120>
		Serial.println(F("File (maybe) not found"));
     c34:	4a5d      	ldr	r2, [pc, #372]	; (dac <_Z10drawBitmapPcss+0x28c>)
     c36:	4b5a      	ldr	r3, [pc, #360]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c38:	0011      	movs	r1, r2
     c3a:	0018      	movs	r0, r3
     c3c:	f002 fb64 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
		// return;
	}

	// Parse BMP header
	Serial.println(F("Start parse"));
     c40:	4a5b      	ldr	r2, [pc, #364]	; (db0 <_Z10drawBitmapPcss+0x290>)
     c42:	4b57      	ldr	r3, [pc, #348]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c44:	0011      	movs	r1, r2
     c46:	0018      	movs	r0, r3
     c48:	f002 fb5e 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     c4c:	2386      	movs	r3, #134	; 0x86
     c4e:	005b      	lsls	r3, r3, #1
     c50:	18fb      	adds	r3, r7, r3
     c52:	0018      	movs	r0, r3
     c54:	f7ff fa5e 	bl	114 <_Z6read16RN5SDLib4FileE>
     c58:	0003      	movs	r3, r0
     c5a:	4a56      	ldr	r2, [pc, #344]	; (db4 <_Z10drawBitmapPcss+0x294>)
     c5c:	4694      	mov	ip, r2
     c5e:	4463      	add	r3, ip
     c60:	425a      	negs	r2, r3
     c62:	4153      	adcs	r3, r2
     c64:	b2db      	uxtb	r3, r3
     c66:	2b00      	cmp	r3, #0
     c68:	d100      	bne.n	c6c <_Z10drawBitmapPcss+0x14c>
     c6a:	e345      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>
		Serial.print(F("File size: "));
     c6c:	4a52      	ldr	r2, [pc, #328]	; (db8 <_Z10drawBitmapPcss+0x298>)
     c6e:	4b4c      	ldr	r3, [pc, #304]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c70:	0011      	movs	r1, r2
     c72:	0018      	movs	r0, r3
     c74:	f002 fa8d 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     c78:	2386      	movs	r3, #134	; 0x86
     c7a:	005b      	lsls	r3, r3, #1
     c7c:	18fb      	adds	r3, r7, r3
     c7e:	0018      	movs	r0, r3
     c80:	f7ff fa6c 	bl	15c <_Z6read32RN5SDLib4FileE>
     c84:	0001      	movs	r1, r0
     c86:	4b46      	ldr	r3, [pc, #280]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c88:	220a      	movs	r2, #10
     c8a:	0018      	movs	r0, r3
     c8c:	f002 fbda 	bl	3444 <_ZN5Print7printlnEmi>
		(void) read32(bmpFile); // Read & ignore creator bytes
     c90:	2386      	movs	r3, #134	; 0x86
     c92:	005b      	lsls	r3, r3, #1
     c94:	18fb      	adds	r3, r7, r3
     c96:	0018      	movs	r0, r3
     c98:	f7ff fa60 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     c9c:	2386      	movs	r3, #134	; 0x86
     c9e:	005b      	lsls	r3, r3, #1
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	0018      	movs	r0, r3
     ca4:	f7ff fa5a 	bl	15c <_Z6read32RN5SDLib4FileE>
     ca8:	0003      	movs	r3, r0
     caa:	22b6      	movs	r2, #182	; 0xb6
     cac:	0052      	lsls	r2, r2, #1
     cae:	18ba      	adds	r2, r7, r2
     cb0:	6013      	str	r3, [r2, #0]
		Serial.print(F("Image Offset: "));
     cb2:	4a42      	ldr	r2, [pc, #264]	; (dbc <_Z10drawBitmapPcss+0x29c>)
     cb4:	4b3a      	ldr	r3, [pc, #232]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cb6:	0011      	movs	r1, r2
     cb8:	0018      	movs	r0, r3
     cba:	f002 fa6a 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(bmpImageoffset, DEC);
     cbe:	23b6      	movs	r3, #182	; 0xb6
     cc0:	005b      	lsls	r3, r3, #1
     cc2:	18fb      	adds	r3, r7, r3
     cc4:	6819      	ldr	r1, [r3, #0]
     cc6:	4b36      	ldr	r3, [pc, #216]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cc8:	220a      	movs	r2, #10
     cca:	0018      	movs	r0, r3
     ccc:	f002 fbba 	bl	3444 <_ZN5Print7printlnEmi>
		// Read DIB header
		Serial.print(F("Header size: "));
     cd0:	4a3b      	ldr	r2, [pc, #236]	; (dc0 <_Z10drawBitmapPcss+0x2a0>)
     cd2:	4b33      	ldr	r3, [pc, #204]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cd4:	0011      	movs	r1, r2
     cd6:	0018      	movs	r0, r3
     cd8:	f002 fa5b 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     cdc:	2386      	movs	r3, #134	; 0x86
     cde:	005b      	lsls	r3, r3, #1
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	0018      	movs	r0, r3
     ce4:	f7ff fa3a 	bl	15c <_Z6read32RN5SDLib4FileE>
     ce8:	0001      	movs	r1, r0
     cea:	4b2d      	ldr	r3, [pc, #180]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cec:	220a      	movs	r2, #10
     cee:	0018      	movs	r0, r3
     cf0:	f002 fba8 	bl	3444 <_ZN5Print7printlnEmi>
		bmpWidth = read32(bmpFile);
     cf4:	2386      	movs	r3, #134	; 0x86
     cf6:	005b      	lsls	r3, r3, #1
     cf8:	18fb      	adds	r3, r7, r3
     cfa:	0018      	movs	r0, r3
     cfc:	f7ff fa2e 	bl	15c <_Z6read32RN5SDLib4FileE>
     d00:	0003      	movs	r3, r0
     d02:	22b4      	movs	r2, #180	; 0xb4
     d04:	0052      	lsls	r2, r2, #1
     d06:	18ba      	adds	r2, r7, r2
     d08:	6013      	str	r3, [r2, #0]
		bmpHeight = read32(bmpFile);
     d0a:	2386      	movs	r3, #134	; 0x86
     d0c:	005b      	lsls	r3, r3, #1
     d0e:	18fb      	adds	r3, r7, r3
     d10:	0018      	movs	r0, r3
     d12:	f7ff fa23 	bl	15c <_Z6read32RN5SDLib4FileE>
     d16:	0003      	movs	r3, r0
     d18:	22ca      	movs	r2, #202	; 0xca
     d1a:	0052      	lsls	r2, r2, #1
     d1c:	18ba      	adds	r2, r7, r2
     d1e:	6013      	str	r3, [r2, #0]
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     d20:	2386      	movs	r3, #134	; 0x86
     d22:	005b      	lsls	r3, r3, #1
     d24:	18fb      	adds	r3, r7, r3
     d26:	0018      	movs	r0, r3
     d28:	f7ff f9f4 	bl	114 <_Z6read16RN5SDLib4FileE>
     d2c:	0003      	movs	r3, r0
     d2e:	3b01      	subs	r3, #1
     d30:	425a      	negs	r2, r3
     d32:	4153      	adcs	r3, r2
     d34:	b2db      	uxtb	r3, r3
     d36:	2b00      	cmp	r3, #0
     d38:	d100      	bne.n	d3c <_Z10drawBitmapPcss+0x21c>
     d3a:	e2dd      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>
			bmpDepth = read16(bmpFile); // bits per pixel
     d3c:	2386      	movs	r3, #134	; 0x86
     d3e:	005b      	lsls	r3, r3, #1
     d40:	18fb      	adds	r3, r7, r3
     d42:	0018      	movs	r0, r3
     d44:	f7ff f9e6 	bl	114 <_Z6read16RN5SDLib4FileE>
     d48:	0003      	movs	r3, r0
     d4a:	001a      	movs	r2, r3
     d4c:	2368      	movs	r3, #104	; 0x68
     d4e:	33ff      	adds	r3, #255	; 0xff
     d50:	18fb      	adds	r3, r7, r3
     d52:	701a      	strb	r2, [r3, #0]
			Serial.print(F("Bit Depth: "));
     d54:	4a1b      	ldr	r2, [pc, #108]	; (dc4 <_Z10drawBitmapPcss+0x2a4>)
     d56:	4b12      	ldr	r3, [pc, #72]	; (da0 <_Z10drawBitmapPcss+0x280>)
     d58:	0011      	movs	r1, r2
     d5a:	0018      	movs	r0, r3
     d5c:	f002 fa19 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(bmpDepth);
     d60:	2368      	movs	r3, #104	; 0x68
     d62:	33ff      	adds	r3, #255	; 0xff
     d64:	18fb      	adds	r3, r7, r3
     d66:	7819      	ldrb	r1, [r3, #0]
     d68:	4b0d      	ldr	r3, [pc, #52]	; (da0 <_Z10drawBitmapPcss+0x280>)
     d6a:	220a      	movs	r2, #10
     d6c:	0018      	movs	r0, r3
     d6e:	f002 fb2e 	bl	33ce <_ZN5Print7printlnEhi>
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     d72:	2368      	movs	r3, #104	; 0x68
     d74:	33ff      	adds	r3, #255	; 0xff
     d76:	18fb      	adds	r3, r7, r3
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	2b18      	cmp	r3, #24
     d7c:	d124      	bne.n	dc8 <_Z10drawBitmapPcss+0x2a8>
     d7e:	2386      	movs	r3, #134	; 0x86
     d80:	005b      	lsls	r3, r3, #1
     d82:	18fb      	adds	r3, r7, r3
     d84:	0018      	movs	r0, r3
     d86:	f7ff f9e9 	bl	15c <_Z6read32RN5SDLib4FileE>
     d8a:	1e03      	subs	r3, r0, #0
     d8c:	d11c      	bne.n	dc8 <_Z10drawBitmapPcss+0x2a8>
     d8e:	2301      	movs	r3, #1
     d90:	e01b      	b.n	dca <_Z10drawBitmapPcss+0x2aa>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	fffffe6a 	.word	0xfffffe6a
     d98:	fffffe68 	.word	0xfffffe68
     d9c:	200002bc 	.word	0x200002bc
     da0:	20000e94 	.word	0x20000e94
     da4:	00013408 	.word	0x00013408
     da8:	200008f4 	.word	0x200008f4
     dac:	00013418 	.word	0x00013418
     db0:	00013430 	.word	0x00013430
     db4:	ffffb2be 	.word	0xffffb2be
     db8:	0001343c 	.word	0x0001343c
     dbc:	00013448 	.word	0x00013448
     dc0:	00013458 	.word	0x00013458
     dc4:	00013468 	.word	0x00013468
     dc8:	2300      	movs	r3, #0
     dca:	2b00      	cmp	r3, #0
     dcc:	d100      	bne.n	dd0 <_Z10drawBitmapPcss+0x2b0>
     dce:	e293      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>

				goodBmp = true; // Supported BMP format -- proceed!
     dd0:	23c9      	movs	r3, #201	; 0xc9
     dd2:	005b      	lsls	r3, r3, #1
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	2201      	movs	r2, #1
     dd8:	701a      	strb	r2, [r3, #0]
				Serial.print(F("Image size: "));
     dda:	4ac0      	ldr	r2, [pc, #768]	; (10dc <_Z10drawBitmapPcss+0x5bc>)
     ddc:	4bc0      	ldr	r3, [pc, #768]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     dde:	0011      	movs	r1, r2
     de0:	0018      	movs	r0, r3
     de2:	f002 f9d6 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(bmpWidth);
     de6:	23b4      	movs	r3, #180	; 0xb4
     de8:	005b      	lsls	r3, r3, #1
     dea:	18fb      	adds	r3, r7, r3
     dec:	6819      	ldr	r1, [r3, #0]
     dee:	4bbc      	ldr	r3, [pc, #752]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     df0:	220a      	movs	r2, #10
     df2:	0018      	movs	r0, r3
     df4:	f002 fa17 	bl	3226 <_ZN5Print5printEii>
				Serial.print('x');
     df8:	4bb9      	ldr	r3, [pc, #740]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     dfa:	2178      	movs	r1, #120	; 0x78
     dfc:	0018      	movs	r0, r3
     dfe:	f002 f9e8 	bl	31d2 <_ZN5Print5printEc>
				Serial.println(bmpHeight);
     e02:	23ca      	movs	r3, #202	; 0xca
     e04:	005b      	lsls	r3, r3, #1
     e06:	18fb      	adds	r3, r7, r3
     e08:	6819      	ldr	r1, [r3, #0]
     e0a:	4bb5      	ldr	r3, [pc, #724]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     e0c:	220a      	movs	r2, #10
     e0e:	0018      	movs	r0, r3
     e10:	f002 fafd 	bl	340e <_ZN5Print7printlnEii>

				// BMP rows are padded (if needed) to 4-byte boundary
				rowSize = (bmpWidth * 3 + 3) & ~3;
     e14:	23b4      	movs	r3, #180	; 0xb4
     e16:	005b      	lsls	r3, r3, #1
     e18:	18fb      	adds	r3, r7, r3
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	1c5a      	adds	r2, r3, #1
     e1e:	0013      	movs	r3, r2
     e20:	005b      	lsls	r3, r3, #1
     e22:	189b      	adds	r3, r3, r2
     e24:	001a      	movs	r2, r3
     e26:	2303      	movs	r3, #3
     e28:	439a      	bics	r2, r3
     e2a:	0013      	movs	r3, r2
     e2c:	22b0      	movs	r2, #176	; 0xb0
     e2e:	0052      	lsls	r2, r2, #1
     e30:	18ba      	adds	r2, r7, r2
     e32:	6013      	str	r3, [r2, #0]

				// If bmpHeight is negative, image is in top-down order.
				// This is not canon but has been observed in the wild.
				if (bmpHeight < 0) {
     e34:	23ca      	movs	r3, #202	; 0xca
     e36:	005b      	lsls	r3, r3, #1
     e38:	18fb      	adds	r3, r7, r3
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	2b00      	cmp	r3, #0
     e3e:	da0d      	bge.n	e5c <_Z10drawBitmapPcss+0x33c>
					bmpHeight = -bmpHeight;
     e40:	23ca      	movs	r3, #202	; 0xca
     e42:	005b      	lsls	r3, r3, #1
     e44:	18fb      	adds	r3, r7, r3
     e46:	681b      	ldr	r3, [r3, #0]
     e48:	425b      	negs	r3, r3
     e4a:	22ca      	movs	r2, #202	; 0xca
     e4c:	0052      	lsls	r2, r2, #1
     e4e:	18ba      	adds	r2, r7, r2
     e50:	6013      	str	r3, [r2, #0]
					flip = false;
     e52:	2392      	movs	r3, #146	; 0x92
     e54:	33ff      	adds	r3, #255	; 0xff
     e56:	18fb      	adds	r3, r7, r3
     e58:	2200      	movs	r2, #0
     e5a:	701a      	strb	r2, [r3, #0]
				}

				// Crop area to be loaded
				x2 = x + bmpWidth - 1; // Lower-right corner
     e5c:	4ba1      	ldr	r3, [pc, #644]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     e5e:	22cc      	movs	r2, #204	; 0xcc
     e60:	0052      	lsls	r2, r2, #1
     e62:	4694      	mov	ip, r2
     e64:	44bc      	add	ip, r7
     e66:	4463      	add	r3, ip
     e68:	2200      	movs	r2, #0
     e6a:	5e9a      	ldrsh	r2, [r3, r2]
     e6c:	23b4      	movs	r3, #180	; 0xb4
     e6e:	005b      	lsls	r3, r3, #1
     e70:	18fb      	adds	r3, r7, r3
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	18d3      	adds	r3, r2, r3
     e76:	3b01      	subs	r3, #1
     e78:	22ae      	movs	r2, #174	; 0xae
     e7a:	0052      	lsls	r2, r2, #1
     e7c:	18ba      	adds	r2, r7, r2
     e7e:	6013      	str	r3, [r2, #0]
				y2 = y + bmpHeight - 1;
     e80:	4b99      	ldr	r3, [pc, #612]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     e82:	22cc      	movs	r2, #204	; 0xcc
     e84:	0052      	lsls	r2, r2, #1
     e86:	4694      	mov	ip, r2
     e88:	44bc      	add	ip, r7
     e8a:	4463      	add	r3, ip
     e8c:	2200      	movs	r2, #0
     e8e:	5e9a      	ldrsh	r2, [r3, r2]
     e90:	23ca      	movs	r3, #202	; 0xca
     e92:	005b      	lsls	r3, r3, #1
     e94:	18fb      	adds	r3, r7, r3
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	18d3      	adds	r3, r2, r3
     e9a:	3b01      	subs	r3, #1
     e9c:	22ac      	movs	r2, #172	; 0xac
     e9e:	0052      	lsls	r2, r2, #1
     ea0:	18ba      	adds	r2, r7, r2
     ea2:	6013      	str	r3, [r2, #0]
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     ea4:	23ae      	movs	r3, #174	; 0xae
     ea6:	005b      	lsls	r3, r3, #1
     ea8:	18fb      	adds	r3, r7, r3
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	2b00      	cmp	r3, #0
     eae:	da00      	bge.n	eb2 <_Z10drawBitmapPcss+0x392>
     eb0:	e209      	b.n	12c6 <_Z10drawBitmapPcss+0x7a6>
     eb2:	23ac      	movs	r3, #172	; 0xac
     eb4:	005b      	lsls	r3, r3, #1
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	2b00      	cmp	r3, #0
     ebc:	da00      	bge.n	ec0 <_Z10drawBitmapPcss+0x3a0>
     ebe:	e202      	b.n	12c6 <_Z10drawBitmapPcss+0x7a6>
					w = bmpWidth; // Width/height of section to load/display
     ec0:	23b4      	movs	r3, #180	; 0xb4
     ec2:	005b      	lsls	r3, r3, #1
     ec4:	18fb      	adds	r3, r7, r3
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	22c6      	movs	r2, #198	; 0xc6
     eca:	0052      	lsls	r2, r2, #1
     ecc:	18ba      	adds	r2, r7, r2
     ece:	6013      	str	r3, [r2, #0]
					h = bmpHeight;
     ed0:	23ca      	movs	r3, #202	; 0xca
     ed2:	005b      	lsls	r3, r3, #1
     ed4:	18fb      	adds	r3, r7, r3
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	22c4      	movs	r2, #196	; 0xc4
     eda:	0052      	lsls	r2, r2, #1
     edc:	18ba      	adds	r2, r7, r2
     ede:	6013      	str	r3, [r2, #0]
					bx1 = by1 = 0; // UL coordinate in BMP file
     ee0:	2300      	movs	r3, #0
     ee2:	22bc      	movs	r2, #188	; 0xbc
     ee4:	0052      	lsls	r2, r2, #1
     ee6:	18ba      	adds	r2, r7, r2
     ee8:	6013      	str	r3, [r2, #0]
     eea:	23bc      	movs	r3, #188	; 0xbc
     eec:	005b      	lsls	r3, r3, #1
     eee:	18fb      	adds	r3, r7, r3
     ef0:	681b      	ldr	r3, [r3, #0]
     ef2:	22be      	movs	r2, #190	; 0xbe
     ef4:	0052      	lsls	r2, r2, #1
     ef6:	18ba      	adds	r2, r7, r2
     ef8:	6013      	str	r3, [r2, #0]
					if (x < 0) { // Clip left
     efa:	4b7a      	ldr	r3, [pc, #488]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     efc:	22cc      	movs	r2, #204	; 0xcc
     efe:	0052      	lsls	r2, r2, #1
     f00:	4694      	mov	ip, r2
     f02:	44bc      	add	ip, r7
     f04:	4463      	add	r3, ip
     f06:	2200      	movs	r2, #0
     f08:	5e9b      	ldrsh	r3, [r3, r2]
     f0a:	2b00      	cmp	r3, #0
     f0c:	da1d      	bge.n	f4a <_Z10drawBitmapPcss+0x42a>
						bx1 = -x;
     f0e:	4b75      	ldr	r3, [pc, #468]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     f10:	22cc      	movs	r2, #204	; 0xcc
     f12:	0052      	lsls	r2, r2, #1
     f14:	4694      	mov	ip, r2
     f16:	44bc      	add	ip, r7
     f18:	4463      	add	r3, ip
     f1a:	2200      	movs	r2, #0
     f1c:	5e9b      	ldrsh	r3, [r3, r2]
     f1e:	425b      	negs	r3, r3
     f20:	22be      	movs	r2, #190	; 0xbe
     f22:	0052      	lsls	r2, r2, #1
     f24:	18ba      	adds	r2, r7, r2
     f26:	6013      	str	r3, [r2, #0]
						x = 0;
     f28:	4b6e      	ldr	r3, [pc, #440]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     f2a:	22cc      	movs	r2, #204	; 0xcc
     f2c:	0052      	lsls	r2, r2, #1
     f2e:	4694      	mov	ip, r2
     f30:	44bc      	add	ip, r7
     f32:	4463      	add	r3, ip
     f34:	2200      	movs	r2, #0
     f36:	801a      	strh	r2, [r3, #0]
						w = x2 + 1;
     f38:	23ae      	movs	r3, #174	; 0xae
     f3a:	005b      	lsls	r3, r3, #1
     f3c:	18fb      	adds	r3, r7, r3
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	3301      	adds	r3, #1
     f42:	22c6      	movs	r2, #198	; 0xc6
     f44:	0052      	lsls	r2, r2, #1
     f46:	18ba      	adds	r2, r7, r2
     f48:	6013      	str	r3, [r2, #0]
					}
					if (y < 0) { // Clip top
     f4a:	4b67      	ldr	r3, [pc, #412]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f4c:	22cc      	movs	r2, #204	; 0xcc
     f4e:	0052      	lsls	r2, r2, #1
     f50:	4694      	mov	ip, r2
     f52:	44bc      	add	ip, r7
     f54:	4463      	add	r3, ip
     f56:	2200      	movs	r2, #0
     f58:	5e9b      	ldrsh	r3, [r3, r2]
     f5a:	2b00      	cmp	r3, #0
     f5c:	da1d      	bge.n	f9a <_Z10drawBitmapPcss+0x47a>
						by1 = -y;
     f5e:	4b62      	ldr	r3, [pc, #392]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f60:	22cc      	movs	r2, #204	; 0xcc
     f62:	0052      	lsls	r2, r2, #1
     f64:	4694      	mov	ip, r2
     f66:	44bc      	add	ip, r7
     f68:	4463      	add	r3, ip
     f6a:	2200      	movs	r2, #0
     f6c:	5e9b      	ldrsh	r3, [r3, r2]
     f6e:	425b      	negs	r3, r3
     f70:	22bc      	movs	r2, #188	; 0xbc
     f72:	0052      	lsls	r2, r2, #1
     f74:	18ba      	adds	r2, r7, r2
     f76:	6013      	str	r3, [r2, #0]
						y = 0;
     f78:	4b5b      	ldr	r3, [pc, #364]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f7a:	22cc      	movs	r2, #204	; 0xcc
     f7c:	0052      	lsls	r2, r2, #1
     f7e:	4694      	mov	ip, r2
     f80:	44bc      	add	ip, r7
     f82:	4463      	add	r3, ip
     f84:	2200      	movs	r2, #0
     f86:	801a      	strh	r2, [r3, #0]
						h = y2 + 1;
     f88:	23ac      	movs	r3, #172	; 0xac
     f8a:	005b      	lsls	r3, r3, #1
     f8c:	18fb      	adds	r3, r7, r3
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	3301      	adds	r3, #1
     f92:	22c4      	movs	r2, #196	; 0xc4
     f94:	0052      	lsls	r2, r2, #1
     f96:	18ba      	adds	r2, r7, r2
     f98:	6013      	str	r3, [r2, #0]
					}
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     f9a:	4b54      	ldr	r3, [pc, #336]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     f9c:	0018      	movs	r0, r3
     f9e:	f00c fb89 	bl	d6b4 <_ZNK12Adafruit_GFX5widthEv>
     fa2:	0003      	movs	r3, r0
     fa4:	001a      	movs	r2, r3
     fa6:	23ae      	movs	r3, #174	; 0xae
     fa8:	005b      	lsls	r3, r3, #1
     faa:	18fb      	adds	r3, r7, r3
     fac:	681b      	ldr	r3, [r3, #0]
     fae:	0fd0      	lsrs	r0, r2, #31
     fb0:	17d9      	asrs	r1, r3, #31
     fb2:	4293      	cmp	r3, r2
     fb4:	4148      	adcs	r0, r1
     fb6:	0003      	movs	r3, r0
     fb8:	b2db      	uxtb	r3, r3
     fba:	2b00      	cmp	r3, #0
     fbc:	d012      	beq.n	fe4 <_Z10drawBitmapPcss+0x4c4>
     fbe:	4b4b      	ldr	r3, [pc, #300]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     fc0:	0018      	movs	r0, r3
     fc2:	f00c fb77 	bl	d6b4 <_ZNK12Adafruit_GFX5widthEv>
     fc6:	0003      	movs	r3, r0
     fc8:	001a      	movs	r2, r3
     fca:	4b46      	ldr	r3, [pc, #280]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     fcc:	21cc      	movs	r1, #204	; 0xcc
     fce:	0049      	lsls	r1, r1, #1
     fd0:	468c      	mov	ip, r1
     fd2:	44bc      	add	ip, r7
     fd4:	4463      	add	r3, ip
     fd6:	2100      	movs	r1, #0
     fd8:	5e5b      	ldrsh	r3, [r3, r1]
     fda:	1ad3      	subs	r3, r2, r3
     fdc:	22c6      	movs	r2, #198	; 0xc6
     fde:	0052      	lsls	r2, r2, #1
     fe0:	18ba      	adds	r2, r7, r2
     fe2:	6013      	str	r3, [r2, #0]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     fe4:	4b41      	ldr	r3, [pc, #260]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     fe6:	0018      	movs	r0, r3
     fe8:	f00c fb6f 	bl	d6ca <_ZNK12Adafruit_GFX6heightEv>
     fec:	0003      	movs	r3, r0
     fee:	001a      	movs	r2, r3
     ff0:	23ac      	movs	r3, #172	; 0xac
     ff2:	005b      	lsls	r3, r3, #1
     ff4:	18fb      	adds	r3, r7, r3
     ff6:	681b      	ldr	r3, [r3, #0]
     ff8:	0fd0      	lsrs	r0, r2, #31
     ffa:	17d9      	asrs	r1, r3, #31
     ffc:	4293      	cmp	r3, r2
     ffe:	4148      	adcs	r0, r1
    1000:	0003      	movs	r3, r0
    1002:	b2db      	uxtb	r3, r3
    1004:	2b00      	cmp	r3, #0
    1006:	d012      	beq.n	102e <_Z10drawBitmapPcss+0x50e>
    1008:	4b38      	ldr	r3, [pc, #224]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    100a:	0018      	movs	r0, r3
    100c:	f00c fb5d 	bl	d6ca <_ZNK12Adafruit_GFX6heightEv>
    1010:	0003      	movs	r3, r0
    1012:	001a      	movs	r2, r3
    1014:	4b34      	ldr	r3, [pc, #208]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
    1016:	21cc      	movs	r1, #204	; 0xcc
    1018:	0049      	lsls	r1, r1, #1
    101a:	468c      	mov	ip, r1
    101c:	44bc      	add	ip, r7
    101e:	4463      	add	r3, ip
    1020:	2100      	movs	r1, #0
    1022:	5e5b      	ldrsh	r3, [r3, r1]
    1024:	1ad3      	subs	r3, r2, r3
    1026:	22c4      	movs	r2, #196	; 0xc4
    1028:	0052      	lsls	r2, r2, #1
    102a:	18ba      	adds	r2, r7, r2
    102c:	6013      	str	r3, [r2, #0]

					// Set tftDisplay address window to clipped image bounds
					tftDisplay.startWrite(); // Requires start/end transaction now
    102e:	4b2f      	ldr	r3, [pc, #188]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    1030:	0018      	movs	r0, r3
    1032:	f007 f893 	bl	815c <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
    1036:	4b2b      	ldr	r3, [pc, #172]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
    1038:	22cc      	movs	r2, #204	; 0xcc
    103a:	0052      	lsls	r2, r2, #1
    103c:	4694      	mov	ip, r2
    103e:	44bc      	add	ip, r7
    1040:	4463      	add	r3, ip
    1042:	8819      	ldrh	r1, [r3, #0]
    1044:	4b28      	ldr	r3, [pc, #160]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
    1046:	22cc      	movs	r2, #204	; 0xcc
    1048:	0052      	lsls	r2, r2, #1
    104a:	4694      	mov	ip, r2
    104c:	44bc      	add	ip, r7
    104e:	4463      	add	r3, ip
    1050:	881a      	ldrh	r2, [r3, #0]
    1052:	23c6      	movs	r3, #198	; 0xc6
    1054:	005b      	lsls	r3, r3, #1
    1056:	18fb      	adds	r3, r7, r3
    1058:	681b      	ldr	r3, [r3, #0]
    105a:	b29c      	uxth	r4, r3
    105c:	23c4      	movs	r3, #196	; 0xc4
    105e:	005b      	lsls	r3, r3, #1
    1060:	18fb      	adds	r3, r7, r3
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	b29b      	uxth	r3, r3
    1066:	4821      	ldr	r0, [pc, #132]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    1068:	9300      	str	r3, [sp, #0]
    106a:	0023      	movs	r3, r4
    106c:	f007 f8e0 	bl	8230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>

					for (row = 0; row < h; row++) { // For each scanline...
    1070:	2300      	movs	r3, #0
    1072:	22c2      	movs	r2, #194	; 0xc2
    1074:	0052      	lsls	r2, r2, #1
    1076:	18ba      	adds	r2, r7, r2
    1078:	6013      	str	r3, [r2, #0]
    107a:	23c2      	movs	r3, #194	; 0xc2
    107c:	005b      	lsls	r3, r3, #1
    107e:	18fb      	adds	r3, r7, r3
    1080:	681a      	ldr	r2, [r3, #0]
    1082:	23c4      	movs	r3, #196	; 0xc4
    1084:	005b      	lsls	r3, r3, #1
    1086:	18fb      	adds	r3, r7, r3
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	429a      	cmp	r2, r3
    108c:	db00      	blt.n	1090 <_Z10drawBitmapPcss+0x570>
    108e:	e116      	b.n	12be <_Z10drawBitmapPcss+0x79e>
						// intensive to be doing this on every line, but this
						// method covers a lot of gritty details like cropping
						// and scanline padding.  Also, the seek only takes
						// place if the file position actually needs to change
						// (avoids a lot of cluster math in SD library).
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
    1090:	2392      	movs	r3, #146	; 0x92
    1092:	33ff      	adds	r3, #255	; 0xff
    1094:	18fb      	adds	r3, r7, r3
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	2b00      	cmp	r3, #0
    109a:	d029      	beq.n	10f0 <_Z10drawBitmapPcss+0x5d0>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
    109c:	23ca      	movs	r3, #202	; 0xca
    109e:	005b      	lsls	r3, r3, #1
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	1e5a      	subs	r2, r3, #1
    10a6:	23c2      	movs	r3, #194	; 0xc2
    10a8:	005b      	lsls	r3, r3, #1
    10aa:	18fb      	adds	r3, r7, r3
    10ac:	6819      	ldr	r1, [r3, #0]
    10ae:	23bc      	movs	r3, #188	; 0xbc
    10b0:	005b      	lsls	r3, r3, #1
    10b2:	18fb      	adds	r3, r7, r3
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	18cb      	adds	r3, r1, r3
    10b8:	1ad3      	subs	r3, r2, r3
    10ba:	001a      	movs	r2, r3
    10bc:	23b0      	movs	r3, #176	; 0xb0
    10be:	005b      	lsls	r3, r3, #1
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	435a      	muls	r2, r3
    10c6:	23b6      	movs	r3, #182	; 0xb6
    10c8:	005b      	lsls	r3, r3, #1
    10ca:	18fb      	adds	r3, r7, r3
    10cc:	681b      	ldr	r3, [r3, #0]
    10ce:	18d3      	adds	r3, r2, r3
    10d0:	22ba      	movs	r2, #186	; 0xba
    10d2:	0052      	lsls	r2, r2, #1
    10d4:	18ba      	adds	r2, r7, r2
    10d6:	6013      	str	r3, [r2, #0]
    10d8:	e022      	b.n	1120 <_Z10drawBitmapPcss+0x600>
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00013474 	.word	0x00013474
    10e0:	20000e94 	.word	0x20000e94
    10e4:	fffffe6a 	.word	0xfffffe6a
    10e8:	fffffe68 	.word	0xfffffe68
    10ec:	200002bc 	.word	0x200002bc
						else
						// Bitmap is stored top-to-bottom
						pos = bmpImageoffset + (row + by1) * rowSize;
    10f0:	23c2      	movs	r3, #194	; 0xc2
    10f2:	005b      	lsls	r3, r3, #1
    10f4:	18fb      	adds	r3, r7, r3
    10f6:	681a      	ldr	r2, [r3, #0]
    10f8:	23bc      	movs	r3, #188	; 0xbc
    10fa:	005b      	lsls	r3, r3, #1
    10fc:	18fb      	adds	r3, r7, r3
    10fe:	681b      	ldr	r3, [r3, #0]
    1100:	18d3      	adds	r3, r2, r3
    1102:	001a      	movs	r2, r3
    1104:	23b0      	movs	r3, #176	; 0xb0
    1106:	005b      	lsls	r3, r3, #1
    1108:	18fb      	adds	r3, r7, r3
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	435a      	muls	r2, r3
    110e:	23b6      	movs	r3, #182	; 0xb6
    1110:	005b      	lsls	r3, r3, #1
    1112:	18fb      	adds	r3, r7, r3
    1114:	681b      	ldr	r3, [r3, #0]
    1116:	18d3      	adds	r3, r2, r3
    1118:	22ba      	movs	r2, #186	; 0xba
    111a:	0052      	lsls	r2, r2, #1
    111c:	18ba      	adds	r2, r7, r2
    111e:	6013      	str	r3, [r2, #0]
						pos += bx1 * 3; // Factor in starting column (bx1)
    1120:	23be      	movs	r3, #190	; 0xbe
    1122:	005b      	lsls	r3, r3, #1
    1124:	18fb      	adds	r3, r7, r3
    1126:	681a      	ldr	r2, [r3, #0]
    1128:	0013      	movs	r3, r2
    112a:	005b      	lsls	r3, r3, #1
    112c:	189b      	adds	r3, r3, r2
    112e:	001a      	movs	r2, r3
    1130:	23ba      	movs	r3, #186	; 0xba
    1132:	005b      	lsls	r3, r3, #1
    1134:	18fb      	adds	r3, r7, r3
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	189b      	adds	r3, r3, r2
    113a:	22ba      	movs	r2, #186	; 0xba
    113c:	0052      	lsls	r2, r2, #1
    113e:	18ba      	adds	r2, r7, r2
    1140:	6013      	str	r3, [r2, #0]
						if (bmpFile.position() != pos) { // Need seek?
    1142:	2386      	movs	r3, #134	; 0x86
    1144:	005b      	lsls	r3, r3, #1
    1146:	18fb      	adds	r3, r7, r3
    1148:	0018      	movs	r0, r3
    114a:	f007 fdc2 	bl	8cd2 <_ZN5SDLib4File8positionEv>
    114e:	0002      	movs	r2, r0
    1150:	23ba      	movs	r3, #186	; 0xba
    1152:	005b      	lsls	r3, r3, #1
    1154:	18fb      	adds	r3, r7, r3
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	1ad3      	subs	r3, r2, r3
    115a:	1e5a      	subs	r2, r3, #1
    115c:	4193      	sbcs	r3, r2
    115e:	b2db      	uxtb	r3, r3
    1160:	2b00      	cmp	r3, #0
    1162:	d017      	beq.n	1194 <_Z10drawBitmapPcss+0x674>
							tftDisplay.endWrite(); // End tftDisplay transaction
    1164:	4b73      	ldr	r3, [pc, #460]	; (1334 <_Z10drawBitmapPcss+0x814>)
    1166:	0018      	movs	r0, r3
    1168:	f007 f820 	bl	81ac <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
    116c:	23ba      	movs	r3, #186	; 0xba
    116e:	005b      	lsls	r3, r3, #1
    1170:	18fb      	adds	r3, r7, r3
    1172:	681a      	ldr	r2, [r3, #0]
    1174:	2386      	movs	r3, #134	; 0x86
    1176:	005b      	lsls	r3, r3, #1
    1178:	18fb      	adds	r3, r7, r3
    117a:	0011      	movs	r1, r2
    117c:	0018      	movs	r0, r3
    117e:	f007 fd8e 	bl	8c9e <_ZN5SDLib4File4seekEm>
							buffidx = sizeof(sdbuffer); // Force buffer reload
    1182:	2394      	movs	r3, #148	; 0x94
    1184:	33ff      	adds	r3, #255	; 0xff
    1186:	18fb      	adds	r3, r7, r3
    1188:	22ff      	movs	r2, #255	; 0xff
    118a:	701a      	strb	r2, [r3, #0]
							tftDisplay.startWrite(); // Start new tftDisplay transaction
    118c:	4b69      	ldr	r3, [pc, #420]	; (1334 <_Z10drawBitmapPcss+0x814>)
    118e:	0018      	movs	r0, r3
    1190:	f006 ffe4 	bl	815c <_ZN16Adafruit_ILI934110startWriteEv>
						}
						for (col = 0; col < w; col++) { // For each pixel...
    1194:	2300      	movs	r3, #0
    1196:	22c0      	movs	r2, #192	; 0xc0
    1198:	0052      	lsls	r2, r2, #1
    119a:	18ba      	adds	r2, r7, r2
    119c:	6013      	str	r3, [r2, #0]
    119e:	23c0      	movs	r3, #192	; 0xc0
    11a0:	005b      	lsls	r3, r3, #1
    11a2:	18fb      	adds	r3, r7, r3
    11a4:	681a      	ldr	r2, [r3, #0]
    11a6:	23c6      	movs	r3, #198	; 0xc6
    11a8:	005b      	lsls	r3, r3, #1
    11aa:	18fb      	adds	r3, r7, r3
    11ac:	681b      	ldr	r3, [r3, #0]
    11ae:	429a      	cmp	r2, r3
    11b0:	da7b      	bge.n	12aa <_Z10drawBitmapPcss+0x78a>
							// Time to read more pixel data?
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
    11b2:	2394      	movs	r3, #148	; 0x94
    11b4:	33ff      	adds	r3, #255	; 0xff
    11b6:	18fb      	adds	r3, r7, r3
    11b8:	781b      	ldrb	r3, [r3, #0]
    11ba:	2bff      	cmp	r3, #255	; 0xff
    11bc:	d115      	bne.n	11ea <_Z10drawBitmapPcss+0x6ca>
								tftDisplay.endWrite(); // End tftDisplay transaction
    11be:	4b5d      	ldr	r3, [pc, #372]	; (1334 <_Z10drawBitmapPcss+0x814>)
    11c0:	0018      	movs	r0, r3
    11c2:	f006 fff3 	bl	81ac <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
    11c6:	230c      	movs	r3, #12
    11c8:	18f9      	adds	r1, r7, r3
    11ca:	2386      	movs	r3, #134	; 0x86
    11cc:	005b      	lsls	r3, r3, #1
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	22ff      	movs	r2, #255	; 0xff
    11d2:	0018      	movs	r0, r3
    11d4:	f007 fd15 	bl	8c02 <_ZN5SDLib4File4readEPvt>
								buffidx = 0; // Set index to beginning
    11d8:	2394      	movs	r3, #148	; 0x94
    11da:	33ff      	adds	r3, #255	; 0xff
    11dc:	18fb      	adds	r3, r7, r3
    11de:	2200      	movs	r2, #0
    11e0:	701a      	strb	r2, [r3, #0]
								tftDisplay.startWrite(); // Start new tftDisplay transaction
    11e2:	4b54      	ldr	r3, [pc, #336]	; (1334 <_Z10drawBitmapPcss+0x814>)
    11e4:	0018      	movs	r0, r3
    11e6:	f006 ffb9 	bl	815c <_ZN16Adafruit_ILI934110startWriteEv>
							}
							// Convert pixel from BMP to tftDisplay format, push to display
							b = sdbuffer[buffidx++];
    11ea:	2394      	movs	r3, #148	; 0x94
    11ec:	33ff      	adds	r3, #255	; 0xff
    11ee:	18fb      	adds	r3, r7, r3
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	2294      	movs	r2, #148	; 0x94
    11f4:	32ff      	adds	r2, #255	; 0xff
    11f6:	18ba      	adds	r2, r7, r2
    11f8:	1c59      	adds	r1, r3, #1
    11fa:	7011      	strb	r1, [r2, #0]
    11fc:	0019      	movs	r1, r3
    11fe:	2358      	movs	r3, #88	; 0x58
    1200:	33ff      	adds	r3, #255	; 0xff
    1202:	18fb      	adds	r3, r7, r3
    1204:	4a4c      	ldr	r2, [pc, #304]	; (1338 <_Z10drawBitmapPcss+0x818>)
    1206:	20cc      	movs	r0, #204	; 0xcc
    1208:	0040      	lsls	r0, r0, #1
    120a:	4684      	mov	ip, r0
    120c:	44bc      	add	ip, r7
    120e:	4462      	add	r2, ip
    1210:	5c52      	ldrb	r2, [r2, r1]
    1212:	701a      	strb	r2, [r3, #0]
							g = sdbuffer[buffidx++];
    1214:	2394      	movs	r3, #148	; 0x94
    1216:	33ff      	adds	r3, #255	; 0xff
    1218:	18fb      	adds	r3, r7, r3
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	2294      	movs	r2, #148	; 0x94
    121e:	32ff      	adds	r2, #255	; 0xff
    1220:	18ba      	adds	r2, r7, r2
    1222:	1c59      	adds	r1, r3, #1
    1224:	7011      	strb	r1, [r2, #0]
    1226:	0019      	movs	r1, r3
    1228:	23ab      	movs	r3, #171	; 0xab
    122a:	005b      	lsls	r3, r3, #1
    122c:	18fb      	adds	r3, r7, r3
    122e:	4a42      	ldr	r2, [pc, #264]	; (1338 <_Z10drawBitmapPcss+0x818>)
    1230:	20cc      	movs	r0, #204	; 0xcc
    1232:	0040      	lsls	r0, r0, #1
    1234:	4684      	mov	ip, r0
    1236:	44bc      	add	ip, r7
    1238:	4462      	add	r2, ip
    123a:	5c52      	ldrb	r2, [r2, r1]
    123c:	701a      	strb	r2, [r3, #0]
							r = sdbuffer[buffidx++];
    123e:	2394      	movs	r3, #148	; 0x94
    1240:	33ff      	adds	r3, #255	; 0xff
    1242:	18fb      	adds	r3, r7, r3
    1244:	781b      	ldrb	r3, [r3, #0]
    1246:	2294      	movs	r2, #148	; 0x94
    1248:	32ff      	adds	r2, #255	; 0xff
    124a:	18ba      	adds	r2, r7, r2
    124c:	1c59      	adds	r1, r3, #1
    124e:	7011      	strb	r1, [r2, #0]
    1250:	0019      	movs	r1, r3
    1252:	2356      	movs	r3, #86	; 0x56
    1254:	33ff      	adds	r3, #255	; 0xff
    1256:	18fb      	adds	r3, r7, r3
    1258:	4a37      	ldr	r2, [pc, #220]	; (1338 <_Z10drawBitmapPcss+0x818>)
    125a:	20cc      	movs	r0, #204	; 0xcc
    125c:	0040      	lsls	r0, r0, #1
    125e:	4684      	mov	ip, r0
    1260:	44bc      	add	ip, r7
    1262:	4462      	add	r2, ip
    1264:	5c52      	ldrb	r2, [r2, r1]
    1266:	701a      	strb	r2, [r3, #0]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
    1268:	2358      	movs	r3, #88	; 0x58
    126a:	33ff      	adds	r3, #255	; 0xff
    126c:	18fb      	adds	r3, r7, r3
    126e:	781c      	ldrb	r4, [r3, #0]
    1270:	23ab      	movs	r3, #171	; 0xab
    1272:	005b      	lsls	r3, r3, #1
    1274:	18fb      	adds	r3, r7, r3
    1276:	781a      	ldrb	r2, [r3, #0]
    1278:	2356      	movs	r3, #86	; 0x56
    127a:	33ff      	adds	r3, #255	; 0xff
    127c:	18fb      	adds	r3, r7, r3
    127e:	7819      	ldrb	r1, [r3, #0]
    1280:	482c      	ldr	r0, [pc, #176]	; (1334 <_Z10drawBitmapPcss+0x814>)
    1282:	0023      	movs	r3, r4
    1284:	f006 fb5a 	bl	793c <_ZN16Adafruit_ILI93418color565Ehhh>
    1288:	0003      	movs	r3, r0
    128a:	001a      	movs	r2, r3
    128c:	4b29      	ldr	r3, [pc, #164]	; (1334 <_Z10drawBitmapPcss+0x814>)
    128e:	0011      	movs	r1, r2
    1290:	0018      	movs	r0, r3
    1292:	f007 f895 	bl	83c0 <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
    1296:	23c0      	movs	r3, #192	; 0xc0
    1298:	005b      	lsls	r3, r3, #1
    129a:	18fb      	adds	r3, r7, r3
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	3301      	adds	r3, #1
    12a0:	22c0      	movs	r2, #192	; 0xc0
    12a2:	0052      	lsls	r2, r2, #1
    12a4:	18ba      	adds	r2, r7, r2
    12a6:	6013      	str	r3, [r2, #0]
    12a8:	e779      	b.n	119e <_Z10drawBitmapPcss+0x67e>
					for (row = 0; row < h; row++) { // For each scanline...
    12aa:	23c2      	movs	r3, #194	; 0xc2
    12ac:	005b      	lsls	r3, r3, #1
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	3301      	adds	r3, #1
    12b4:	22c2      	movs	r2, #194	; 0xc2
    12b6:	0052      	lsls	r2, r2, #1
    12b8:	18ba      	adds	r2, r7, r2
    12ba:	6013      	str	r3, [r2, #0]
    12bc:	e6dd      	b.n	107a <_Z10drawBitmapPcss+0x55a>
						} // end pixel
					} // end scanline
					tftDisplay.endWrite(); // End last tftDisplay transaction
    12be:	4b1d      	ldr	r3, [pc, #116]	; (1334 <_Z10drawBitmapPcss+0x814>)
    12c0:	0018      	movs	r0, r3
    12c2:	f006 ff73 	bl	81ac <_ZN16Adafruit_ILI93418endWriteEv>
				} // end onscreen
				Serial.print(F("Loaded in "));
    12c6:	4a1d      	ldr	r2, [pc, #116]	; (133c <_Z10drawBitmapPcss+0x81c>)
    12c8:	4b1d      	ldr	r3, [pc, #116]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12ca:	0011      	movs	r1, r2
    12cc:	0018      	movs	r0, r3
    12ce:	f001 ff60 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(millis() - startTime);
    12d2:	f001 fea3 	bl	301c <millis>
    12d6:	0002      	movs	r2, r0
    12d8:	23b8      	movs	r3, #184	; 0xb8
    12da:	005b      	lsls	r3, r3, #1
    12dc:	18fb      	adds	r3, r7, r3
    12de:	681b      	ldr	r3, [r3, #0]
    12e0:	1ad1      	subs	r1, r2, r3
    12e2:	4b17      	ldr	r3, [pc, #92]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12e4:	220a      	movs	r2, #10
    12e6:	0018      	movs	r0, r3
    12e8:	f001 ffef 	bl	32ca <_ZN5Print5printEmi>
				Serial.println(F(" ms"));
    12ec:	4a15      	ldr	r2, [pc, #84]	; (1344 <_Z10drawBitmapPcss+0x824>)
    12ee:	4b14      	ldr	r3, [pc, #80]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12f0:	0011      	movs	r1, r2
    12f2:	0018      	movs	r0, r3
    12f4:	f002 f808 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
			} // end goodBmp
		}
	}

	bmpFile.close();
    12f8:	2386      	movs	r3, #134	; 0x86
    12fa:	005b      	lsls	r3, r3, #1
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	0018      	movs	r0, r3
    1300:	f007 fd10 	bl	8d24 <_ZN5SDLib4File5closeEv>
	if (!goodBmp)
    1304:	23c9      	movs	r3, #201	; 0xc9
    1306:	005b      	lsls	r3, r3, #1
    1308:	18fb      	adds	r3, r7, r3
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	2201      	movs	r2, #1
    130e:	4053      	eors	r3, r2
    1310:	b2db      	uxtb	r3, r3
    1312:	2b00      	cmp	r3, #0
    1314:	d005      	beq.n	1322 <_Z10drawBitmapPcss+0x802>
	Serial.println(F("BMP format not recognized or SD not mounted"));
    1316:	4a0c      	ldr	r2, [pc, #48]	; (1348 <_Z10drawBitmapPcss+0x828>)
    1318:	4b09      	ldr	r3, [pc, #36]	; (1340 <_Z10drawBitmapPcss+0x820>)
    131a:	0011      	movs	r1, r2
    131c:	0018      	movs	r0, r3
    131e:	f001 fff3 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println();
    1322:	4b07      	ldr	r3, [pc, #28]	; (1340 <_Z10drawBitmapPcss+0x820>)
    1324:	0018      	movs	r0, r3
    1326:	f002 f809 	bl	333c <_ZN5Print7printlnEv>
    132a:	e000      	b.n	132e <_Z10drawBitmapPcss+0x80e>
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
    132c:	46c0      	nop			; (mov r8, r8)
}
    132e:	46bd      	mov	sp, r7
    1330:	b067      	add	sp, #412	; 0x19c
    1332:	bd90      	pop	{r4, r7, pc}
    1334:	200002bc 	.word	0x200002bc
    1338:	fffffe74 	.word	0xfffffe74
    133c:	00013484 	.word	0x00013484
    1340:	20000e94 	.word	0x20000e94
    1344:	00013490 	.word	0x00013490
    1348:	00013494 	.word	0x00013494

0000134c <_Z8getPointv>:

TS_Point getPoint() {
    134c:	b580      	push	{r7, lr}
    134e:	b084      	sub	sp, #16
    1350:	af02      	add	r7, sp, #8
    1352:	6078      	str	r0, [r7, #4]
	TS_Point point = touchScreen.getPoint();
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	4915      	ldr	r1, [pc, #84]	; (13ac <_Z8getPointv+0x60>)
    1358:	2200      	movs	r2, #0
    135a:	0018      	movs	r0, r3
    135c:	f006 f8b7 	bl	74ce <_ZN15Adafruit_FT62068getPointEh>
	 // Map point so that coordinate system starts from top left
	point.x = map(point.x, 0, 240, 240, 0);
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	2200      	movs	r2, #0
    1364:	5e9b      	ldrsh	r3, [r3, r2]
    1366:	0018      	movs	r0, r3
    1368:	2300      	movs	r3, #0
    136a:	9300      	str	r3, [sp, #0]
    136c:	23f0      	movs	r3, #240	; 0xf0
    136e:	22f0      	movs	r2, #240	; 0xf0
    1370:	2100      	movs	r1, #0
    1372:	f005 fe63 	bl	703c <_Z3maplllll>
    1376:	0003      	movs	r3, r0
    1378:	b21a      	sxth	r2, r3
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	801a      	strh	r2, [r3, #0]
	point.y = map(point.y, 0, 320, 320, 0);
    137e:	687b      	ldr	r3, [r7, #4]
    1380:	2202      	movs	r2, #2
    1382:	5e9b      	ldrsh	r3, [r3, r2]
    1384:	0018      	movs	r0, r3
    1386:	23a0      	movs	r3, #160	; 0xa0
    1388:	0059      	lsls	r1, r3, #1
    138a:	23a0      	movs	r3, #160	; 0xa0
    138c:	005a      	lsls	r2, r3, #1
    138e:	2300      	movs	r3, #0
    1390:	9300      	str	r3, [sp, #0]
    1392:	000b      	movs	r3, r1
    1394:	2100      	movs	r1, #0
    1396:	f005 fe51 	bl	703c <_Z3maplllll>
    139a:	0003      	movs	r3, r0
    139c:	b21a      	sxth	r2, r3
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	805a      	strh	r2, [r3, #2]
	return point;
    13a2:	46c0      	nop			; (mov r8, r8)
}
    13a4:	6878      	ldr	r0, [r7, #4]
    13a6:	46bd      	mov	sp, r7
    13a8:	b002      	add	sp, #8
    13aa:	bd80      	pop	{r7, pc}
    13ac:	20000320 	.word	0x20000320

000013b0 <_Z7addMoveh8TS_Point5State>:

State addMove(uint8_t square, TS_Point marker, State player) {
    13b0:	b590      	push	{r4, r7, lr}
    13b2:	b087      	sub	sp, #28
    13b4:	af00      	add	r7, sp, #0
    13b6:	0004      	movs	r4, r0
    13b8:	1d38      	adds	r0, r7, #4
    13ba:	6001      	str	r1, [r0, #0]
    13bc:	6042      	str	r2, [r0, #4]
    13be:	0019      	movs	r1, r3
    13c0:	230f      	movs	r3, #15
    13c2:	18fb      	adds	r3, r7, r3
    13c4:	1c22      	adds	r2, r4, #0
    13c6:	701a      	strb	r2, [r3, #0]
    13c8:	230e      	movs	r3, #14
    13ca:	18fb      	adds	r3, r7, r3
    13cc:	1c0a      	adds	r2, r1, #0
    13ce:	701a      	strb	r2, [r3, #0]
	char bitmap;
	Serial.print(F("addMove, player = "));
    13d0:	4a32      	ldr	r2, [pc, #200]	; (149c <_Z7addMoveh8TS_Point5State+0xec>)
    13d2:	4b33      	ldr	r3, [pc, #204]	; (14a0 <_Z7addMoveh8TS_Point5State+0xf0>)
    13d4:	0011      	movs	r1, r2
    13d6:	0018      	movs	r0, r3
    13d8:	f001 fedb 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(player);
    13dc:	230e      	movs	r3, #14
    13de:	18fb      	adds	r3, r7, r3
    13e0:	7819      	ldrb	r1, [r3, #0]
    13e2:	4b2f      	ldr	r3, [pc, #188]	; (14a0 <_Z7addMoveh8TS_Point5State+0xf0>)
    13e4:	220a      	movs	r2, #10
    13e6:	0018      	movs	r0, r3
    13e8:	f002 f811 	bl	340e <_ZN5Print7printlnEii>
	if (player == cross) {
    13ec:	230e      	movs	r3, #14
    13ee:	18fb      	adds	r3, r7, r3
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	2b02      	cmp	r3, #2
    13f4:	d125      	bne.n	1442 <_Z7addMoveh8TS_Point5State+0x92>
		Serial.println(F("this might be a cross"));
    13f6:	4a2b      	ldr	r2, [pc, #172]	; (14a4 <_Z7addMoveh8TS_Point5State+0xf4>)
    13f8:	4b29      	ldr	r3, [pc, #164]	; (14a0 <_Z7addMoveh8TS_Point5State+0xf0>)
    13fa:	0011      	movs	r1, r2
    13fc:	0018      	movs	r0, r3
    13fe:	f001 ff83 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if (square % 2) {
    1402:	230f      	movs	r3, #15
    1404:	18fb      	adds	r3, r7, r3
    1406:	781b      	ldrb	r3, [r3, #0]
    1408:	2201      	movs	r2, #1
    140a:	4013      	ands	r3, r2
    140c:	d004      	beq.n	1418 <_Z7addMoveh8TS_Point5State+0x68>
			bitmap = 'j';
    140e:	2317      	movs	r3, #23
    1410:	18fb      	adds	r3, r7, r3
    1412:	226a      	movs	r2, #106	; 0x6a
    1414:	701a      	strb	r2, [r3, #0]
    1416:	e003      	b.n	1420 <_Z7addMoveh8TS_Point5State+0x70>
			} else {
			bitmap = 'k';
    1418:	2317      	movs	r3, #23
    141a:	18fb      	adds	r3, r7, r3
    141c:	226b      	movs	r2, #107	; 0x6b
    141e:	701a      	strb	r2, [r3, #0]
		}
		drawBitmap(bitmap, marker.x, marker.y);
    1420:	1d3b      	adds	r3, r7, #4
    1422:	2100      	movs	r1, #0
    1424:	5e59      	ldrsh	r1, [r3, r1]
    1426:	1d3b      	adds	r3, r7, #4
    1428:	2202      	movs	r2, #2
    142a:	5e9a      	ldrsh	r2, [r3, r2]
    142c:	2317      	movs	r3, #23
    142e:	18fb      	adds	r3, r7, r3
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	0018      	movs	r0, r3
    1434:	f7fe ff16 	bl	264 <_Z10drawBitmapcss>
		// Change players
		player = nought;
    1438:	230e      	movs	r3, #14
    143a:	18fb      	adds	r3, r7, r3
    143c:	2201      	movs	r2, #1
    143e:	701a      	strb	r2, [r3, #0]
    1440:	e024      	b.n	148c <_Z7addMoveh8TS_Point5State+0xdc>
		} else {
		Serial.println(F("this might be a nought"));
    1442:	4a19      	ldr	r2, [pc, #100]	; (14a8 <_Z7addMoveh8TS_Point5State+0xf8>)
    1444:	4b16      	ldr	r3, [pc, #88]	; (14a0 <_Z7addMoveh8TS_Point5State+0xf0>)
    1446:	0011      	movs	r1, r2
    1448:	0018      	movs	r0, r3
    144a:	f001 ff5d 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if (square % 2) {
    144e:	230f      	movs	r3, #15
    1450:	18fb      	adds	r3, r7, r3
    1452:	781b      	ldrb	r3, [r3, #0]
    1454:	2201      	movs	r2, #1
    1456:	4013      	ands	r3, r2
    1458:	d004      	beq.n	1464 <_Z7addMoveh8TS_Point5State+0xb4>
			bitmap = 'h';
    145a:	2317      	movs	r3, #23
    145c:	18fb      	adds	r3, r7, r3
    145e:	2268      	movs	r2, #104	; 0x68
    1460:	701a      	strb	r2, [r3, #0]
    1462:	e003      	b.n	146c <_Z7addMoveh8TS_Point5State+0xbc>
			} else {
			bitmap = 'i';
    1464:	2317      	movs	r3, #23
    1466:	18fb      	adds	r3, r7, r3
    1468:	2269      	movs	r2, #105	; 0x69
    146a:	701a      	strb	r2, [r3, #0]
		}
		drawBitmap(bitmap, marker.x, marker.y);
    146c:	1d3b      	adds	r3, r7, #4
    146e:	2100      	movs	r1, #0
    1470:	5e59      	ldrsh	r1, [r3, r1]
    1472:	1d3b      	adds	r3, r7, #4
    1474:	2202      	movs	r2, #2
    1476:	5e9a      	ldrsh	r2, [r3, r2]
    1478:	2317      	movs	r3, #23
    147a:	18fb      	adds	r3, r7, r3
    147c:	781b      	ldrb	r3, [r3, #0]
    147e:	0018      	movs	r0, r3
    1480:	f7fe fef0 	bl	264 <_Z10drawBitmapcss>
		// Change players
		player = cross;
    1484:	230e      	movs	r3, #14
    1486:	18fb      	adds	r3, r7, r3
    1488:	2202      	movs	r2, #2
    148a:	701a      	strb	r2, [r3, #0]
	}
	return player;
    148c:	230e      	movs	r3, #14
    148e:	18fb      	adds	r3, r7, r3
    1490:	781b      	ldrb	r3, [r3, #0]
}
    1492:	0018      	movs	r0, r3
    1494:	46bd      	mov	sp, r7
    1496:	b007      	add	sp, #28
    1498:	bd90      	pop	{r4, r7, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	000134c0 	.word	0x000134c0
    14a0:	20000e94 	.word	0x20000e94
    14a4:	000134d4 	.word	0x000134d4
    14a8:	000134ec 	.word	0x000134ec

000014ac <_Z11updateScoreii>:

void updateScore(int noughtsScore, int crossesScore) {
    14ac:	b590      	push	{r4, r7, lr}
    14ae:	b08b      	sub	sp, #44	; 0x2c
    14b0:	af00      	add	r7, sp, #0
    14b2:	6078      	str	r0, [r7, #4]
    14b4:	6039      	str	r1, [r7, #0]
	String s = (String) noughtsScore;
    14b6:	6879      	ldr	r1, [r7, #4]
    14b8:	230c      	movs	r3, #12
    14ba:	18fb      	adds	r3, r7, r3
    14bc:	220a      	movs	r2, #10
    14be:	0018      	movs	r0, r3
    14c0:	f005 fe23 	bl	710a <_ZN6StringC1Eih>
	char newScore = s.charAt(0);
    14c4:	2327      	movs	r3, #39	; 0x27
    14c6:	18fc      	adds	r4, r7, r3
    14c8:	230c      	movs	r3, #12
    14ca:	18fb      	adds	r3, r7, r3
    14cc:	2100      	movs	r1, #0
    14ce:	0018      	movs	r0, r3
    14d0:	f005 ff68 	bl	73a4 <_ZNK6String6charAtEj>
    14d4:	0003      	movs	r3, r0
    14d6:	7023      	strb	r3, [r4, #0]
	drawBitmap(newScore, 95, 29);
    14d8:	2327      	movs	r3, #39	; 0x27
    14da:	18fb      	adds	r3, r7, r3
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	221d      	movs	r2, #29
    14e0:	215f      	movs	r1, #95	; 0x5f
    14e2:	0018      	movs	r0, r3
    14e4:	f7fe febe 	bl	264 <_Z10drawBitmapcss>
	s = (String) crossesScore;
    14e8:	6839      	ldr	r1, [r7, #0]
    14ea:	2318      	movs	r3, #24
    14ec:	18fb      	adds	r3, r7, r3
    14ee:	220a      	movs	r2, #10
    14f0:	0018      	movs	r0, r3
    14f2:	f005 fe0a 	bl	710a <_ZN6StringC1Eih>
    14f6:	2318      	movs	r3, #24
    14f8:	18fa      	adds	r2, r7, r3
    14fa:	230c      	movs	r3, #12
    14fc:	18fb      	adds	r3, r7, r3
    14fe:	0011      	movs	r1, r2
    1500:	0018      	movs	r0, r3
    1502:	f005 ff1f 	bl	7344 <_ZN6StringaSEOS_>
    1506:	2318      	movs	r3, #24
    1508:	18fb      	adds	r3, r7, r3
    150a:	0018      	movs	r0, r3
    150c:	f005 fe1c 	bl	7148 <_ZN6StringD1Ev>
	newScore = s.charAt(0);
    1510:	2327      	movs	r3, #39	; 0x27
    1512:	18fc      	adds	r4, r7, r3
    1514:	230c      	movs	r3, #12
    1516:	18fb      	adds	r3, r7, r3
    1518:	2100      	movs	r1, #0
    151a:	0018      	movs	r0, r3
    151c:	f005 ff42 	bl	73a4 <_ZNK6String6charAtEj>
    1520:	0003      	movs	r3, r0
    1522:	7023      	strb	r3, [r4, #0]
	drawBitmap(newScore, 132, 28);
    1524:	2327      	movs	r3, #39	; 0x27
    1526:	18fb      	adds	r3, r7, r3
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	221c      	movs	r2, #28
    152c:	2184      	movs	r1, #132	; 0x84
    152e:	0018      	movs	r0, r3
    1530:	f7fe fe98 	bl	264 <_Z10drawBitmapcss>
	String s = (String) noughtsScore;
    1534:	230c      	movs	r3, #12
    1536:	18fb      	adds	r3, r7, r3
    1538:	0018      	movs	r0, r3
    153a:	f005 fe05 	bl	7148 <_ZN6StringD1Ev>
}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	46bd      	mov	sp, r7
    1542:	b00b      	add	sp, #44	; 0x2c
    1544:	bd90      	pop	{r4, r7, pc}

00001546 <_Z9getSquare8TS_Point>:

uint8_t getSquare(TS_Point point) {
    1546:	b580      	push	{r7, lr}
    1548:	b084      	sub	sp, #16
    154a:	af00      	add	r7, sp, #0
    154c:	003b      	movs	r3, r7
    154e:	6018      	str	r0, [r3, #0]
    1550:	6059      	str	r1, [r3, #4]
	uint8_t square = 255;
    1552:	230f      	movs	r3, #15
    1554:	18fb      	adds	r3, r7, r3
    1556:	22ff      	movs	r2, #255	; 0xff
    1558:	701a      	strb	r2, [r3, #0]
	if (point.y > 79 && point.y < 161) {
    155a:	003b      	movs	r3, r7
    155c:	2202      	movs	r2, #2
    155e:	5e9b      	ldrsh	r3, [r3, r2]
    1560:	2b4f      	cmp	r3, #79	; 0x4f
    1562:	dd22      	ble.n	15aa <_Z9getSquare8TS_Point+0x64>
    1564:	003b      	movs	r3, r7
    1566:	2202      	movs	r2, #2
    1568:	5e9b      	ldrsh	r3, [r3, r2]
    156a:	2ba0      	cmp	r3, #160	; 0xa0
    156c:	dc1d      	bgt.n	15aa <_Z9getSquare8TS_Point+0x64>
		if (point.x < 81) {
    156e:	003b      	movs	r3, r7
    1570:	2200      	movs	r2, #0
    1572:	5e9b      	ldrsh	r3, [r3, r2]
    1574:	2b50      	cmp	r3, #80	; 0x50
    1576:	dc04      	bgt.n	1582 <_Z9getSquare8TS_Point+0x3c>
			square = 0;
    1578:	230f      	movs	r3, #15
    157a:	18fb      	adds	r3, r7, r3
    157c:	2200      	movs	r2, #0
    157e:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1580:	e05e      	b.n	1640 <_Z9getSquare8TS_Point+0xfa>
			} else if (point.x < 161) {
    1582:	003b      	movs	r3, r7
    1584:	2200      	movs	r2, #0
    1586:	5e9b      	ldrsh	r3, [r3, r2]
    1588:	2ba0      	cmp	r3, #160	; 0xa0
    158a:	dc04      	bgt.n	1596 <_Z9getSquare8TS_Point+0x50>
			square = 1;
    158c:	230f      	movs	r3, #15
    158e:	18fb      	adds	r3, r7, r3
    1590:	2201      	movs	r2, #1
    1592:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1594:	e054      	b.n	1640 <_Z9getSquare8TS_Point+0xfa>
			} else if (point.x < 240) {
    1596:	003b      	movs	r3, r7
    1598:	2200      	movs	r2, #0
    159a:	5e9b      	ldrsh	r3, [r3, r2]
    159c:	2bef      	cmp	r3, #239	; 0xef
    159e:	dc4f      	bgt.n	1640 <_Z9getSquare8TS_Point+0xfa>
			square = 2;
    15a0:	230f      	movs	r3, #15
    15a2:	18fb      	adds	r3, r7, r3
    15a4:	2202      	movs	r2, #2
    15a6:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15a8:	e04a      	b.n	1640 <_Z9getSquare8TS_Point+0xfa>
		}

		} else if (point.y > 160 && point.y < 241) {
    15aa:	003b      	movs	r3, r7
    15ac:	2202      	movs	r2, #2
    15ae:	5e9b      	ldrsh	r3, [r3, r2]
    15b0:	2ba0      	cmp	r3, #160	; 0xa0
    15b2:	dd22      	ble.n	15fa <_Z9getSquare8TS_Point+0xb4>
    15b4:	003b      	movs	r3, r7
    15b6:	2202      	movs	r2, #2
    15b8:	5e9b      	ldrsh	r3, [r3, r2]
    15ba:	2bf0      	cmp	r3, #240	; 0xf0
    15bc:	dc1d      	bgt.n	15fa <_Z9getSquare8TS_Point+0xb4>
		if (point.x < 81) {
    15be:	003b      	movs	r3, r7
    15c0:	2200      	movs	r2, #0
    15c2:	5e9b      	ldrsh	r3, [r3, r2]
    15c4:	2b50      	cmp	r3, #80	; 0x50
    15c6:	dc04      	bgt.n	15d2 <_Z9getSquare8TS_Point+0x8c>
			square = 3;
    15c8:	230f      	movs	r3, #15
    15ca:	18fb      	adds	r3, r7, r3
    15cc:	2203      	movs	r2, #3
    15ce:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15d0:	e038      	b.n	1644 <_Z9getSquare8TS_Point+0xfe>
			} else if (point.x < 161) {
    15d2:	003b      	movs	r3, r7
    15d4:	2200      	movs	r2, #0
    15d6:	5e9b      	ldrsh	r3, [r3, r2]
    15d8:	2ba0      	cmp	r3, #160	; 0xa0
    15da:	dc04      	bgt.n	15e6 <_Z9getSquare8TS_Point+0xa0>
			square = 4;
    15dc:	230f      	movs	r3, #15
    15de:	18fb      	adds	r3, r7, r3
    15e0:	2204      	movs	r2, #4
    15e2:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15e4:	e02e      	b.n	1644 <_Z9getSquare8TS_Point+0xfe>
			} else if (point.x < 240) {
    15e6:	003b      	movs	r3, r7
    15e8:	2200      	movs	r2, #0
    15ea:	5e9b      	ldrsh	r3, [r3, r2]
    15ec:	2bef      	cmp	r3, #239	; 0xef
    15ee:	dc29      	bgt.n	1644 <_Z9getSquare8TS_Point+0xfe>
			square = 5;
    15f0:	230f      	movs	r3, #15
    15f2:	18fb      	adds	r3, r7, r3
    15f4:	2205      	movs	r2, #5
    15f6:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15f8:	e024      	b.n	1644 <_Z9getSquare8TS_Point+0xfe>
		}

		} else if (point.y > 240) {
    15fa:	003b      	movs	r3, r7
    15fc:	2202      	movs	r2, #2
    15fe:	5e9b      	ldrsh	r3, [r3, r2]
    1600:	2bf0      	cmp	r3, #240	; 0xf0
    1602:	dd20      	ble.n	1646 <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1604:	003b      	movs	r3, r7
    1606:	2200      	movs	r2, #0
    1608:	5e9b      	ldrsh	r3, [r3, r2]
    160a:	2b50      	cmp	r3, #80	; 0x50
    160c:	dc04      	bgt.n	1618 <_Z9getSquare8TS_Point+0xd2>
			square = 6;
    160e:	230f      	movs	r3, #15
    1610:	18fb      	adds	r3, r7, r3
    1612:	2206      	movs	r2, #6
    1614:	701a      	strb	r2, [r3, #0]
    1616:	e016      	b.n	1646 <_Z9getSquare8TS_Point+0x100>
			} else if (point.x < 161) {
    1618:	003b      	movs	r3, r7
    161a:	2200      	movs	r2, #0
    161c:	5e9b      	ldrsh	r3, [r3, r2]
    161e:	2ba0      	cmp	r3, #160	; 0xa0
    1620:	dc04      	bgt.n	162c <_Z9getSquare8TS_Point+0xe6>
			square = 7;
    1622:	230f      	movs	r3, #15
    1624:	18fb      	adds	r3, r7, r3
    1626:	2207      	movs	r2, #7
    1628:	701a      	strb	r2, [r3, #0]
    162a:	e00c      	b.n	1646 <_Z9getSquare8TS_Point+0x100>
			} else if (point.x < 240) {
    162c:	003b      	movs	r3, r7
    162e:	2200      	movs	r2, #0
    1630:	5e9b      	ldrsh	r3, [r3, r2]
    1632:	2bef      	cmp	r3, #239	; 0xef
    1634:	dc07      	bgt.n	1646 <_Z9getSquare8TS_Point+0x100>
			square = 8;
    1636:	230f      	movs	r3, #15
    1638:	18fb      	adds	r3, r7, r3
    163a:	2208      	movs	r2, #8
    163c:	701a      	strb	r2, [r3, #0]
    163e:	e002      	b.n	1646 <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1640:	46c0      	nop			; (mov r8, r8)
    1642:	e000      	b.n	1646 <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1644:	46c0      	nop			; (mov r8, r8)
		}
	}
	return square;
    1646:	230f      	movs	r3, #15
    1648:	18fb      	adds	r3, r7, r3
    164a:	781b      	ldrb	r3, [r3, #0]
}
    164c:	0018      	movs	r0, r3
    164e:	46bd      	mov	sp, r7
    1650:	b004      	add	sp, #16
    1652:	bd80      	pop	{r7, pc}

00001654 <_Z18getCounterPositionh>:

TS_Point getCounterPosition(uint8_t square) {
    1654:	b580      	push	{r7, lr}
    1656:	b082      	sub	sp, #8
    1658:	af00      	add	r7, sp, #0
    165a:	6078      	str	r0, [r7, #4]
    165c:	000a      	movs	r2, r1
    165e:	1cfb      	adds	r3, r7, #3
    1660:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	0018      	movs	r0, r3
    1666:	f006 f8c7 	bl	77f8 <_ZN8TS_PointC1Ev>
	if (square == 0 || square == 3 || square == 6) {
    166a:	1cfb      	adds	r3, r7, #3
    166c:	781b      	ldrb	r3, [r3, #0]
    166e:	2b00      	cmp	r3, #0
    1670:	d007      	beq.n	1682 <_Z18getCounterPositionh+0x2e>
    1672:	1cfb      	adds	r3, r7, #3
    1674:	781b      	ldrb	r3, [r3, #0]
    1676:	2b03      	cmp	r3, #3
    1678:	d003      	beq.n	1682 <_Z18getCounterPositionh+0x2e>
    167a:	1cfb      	adds	r3, r7, #3
    167c:	781b      	ldrb	r3, [r3, #0]
    167e:	2b06      	cmp	r3, #6
    1680:	d103      	bne.n	168a <_Z18getCounterPositionh+0x36>
		counterPos.x = 0;
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	2200      	movs	r2, #0
    1686:	801a      	strh	r2, [r3, #0]
    1688:	e012      	b.n	16b0 <_Z18getCounterPositionh+0x5c>
	} else if (square == 1 || square == 4 || square == 7) {
    168a:	1cfb      	adds	r3, r7, #3
    168c:	781b      	ldrb	r3, [r3, #0]
    168e:	2b01      	cmp	r3, #1
    1690:	d007      	beq.n	16a2 <_Z18getCounterPositionh+0x4e>
    1692:	1cfb      	adds	r3, r7, #3
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	2b04      	cmp	r3, #4
    1698:	d003      	beq.n	16a2 <_Z18getCounterPositionh+0x4e>
    169a:	1cfb      	adds	r3, r7, #3
    169c:	781b      	ldrb	r3, [r3, #0]
    169e:	2b07      	cmp	r3, #7
    16a0:	d103      	bne.n	16aa <_Z18getCounterPositionh+0x56>
		counterPos.x = 80;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	2250      	movs	r2, #80	; 0x50
    16a6:	801a      	strh	r2, [r3, #0]
    16a8:	e002      	b.n	16b0 <_Z18getCounterPositionh+0x5c>
	} else {
		counterPos.x = 160;
    16aa:	687b      	ldr	r3, [r7, #4]
    16ac:	22a0      	movs	r2, #160	; 0xa0
    16ae:	801a      	strh	r2, [r3, #0]
	}
	
	if (square == 0 || square == 1 || square == 2) {
    16b0:	1cfb      	adds	r3, r7, #3
    16b2:	781b      	ldrb	r3, [r3, #0]
    16b4:	2b00      	cmp	r3, #0
    16b6:	d007      	beq.n	16c8 <_Z18getCounterPositionh+0x74>
    16b8:	1cfb      	adds	r3, r7, #3
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	2b01      	cmp	r3, #1
    16be:	d003      	beq.n	16c8 <_Z18getCounterPositionh+0x74>
    16c0:	1cfb      	adds	r3, r7, #3
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	2b02      	cmp	r3, #2
    16c6:	d103      	bne.n	16d0 <_Z18getCounterPositionh+0x7c>
		counterPos.y = 80;
    16c8:	687b      	ldr	r3, [r7, #4]
    16ca:	2250      	movs	r2, #80	; 0x50
    16cc:	805a      	strh	r2, [r3, #2]
    16ce:	e012      	b.n	16f6 <_Z18getCounterPositionh+0xa2>
	} else if (square == 3 || square == 4 || square == 5) {
    16d0:	1cfb      	adds	r3, r7, #3
    16d2:	781b      	ldrb	r3, [r3, #0]
    16d4:	2b03      	cmp	r3, #3
    16d6:	d007      	beq.n	16e8 <_Z18getCounterPositionh+0x94>
    16d8:	1cfb      	adds	r3, r7, #3
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	2b04      	cmp	r3, #4
    16de:	d003      	beq.n	16e8 <_Z18getCounterPositionh+0x94>
    16e0:	1cfb      	adds	r3, r7, #3
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	2b05      	cmp	r3, #5
    16e6:	d103      	bne.n	16f0 <_Z18getCounterPositionh+0x9c>
		counterPos.y = 160;
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	22a0      	movs	r2, #160	; 0xa0
    16ec:	805a      	strh	r2, [r3, #2]
    16ee:	e002      	b.n	16f6 <_Z18getCounterPositionh+0xa2>
	} else {
		counterPos.y = 240;
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	22f0      	movs	r2, #240	; 0xf0
    16f4:	805a      	strh	r2, [r3, #2]
	}
	return counterPos;
    16f6:	46c0      	nop			; (mov r8, r8)
}
    16f8:	6878      	ldr	r0, [r7, #4]
    16fa:	46bd      	mov	sp, r7
    16fc:	b002      	add	sp, #8
    16fe:	bd80      	pop	{r7, pc}

00001700 <_Z23getSmallCounterPositionhh>:

TS_Point getSmallCounterPosition(uint8_t square, uint8_t turn) {
    1700:	b590      	push	{r4, r7, lr}
    1702:	b085      	sub	sp, #20
    1704:	af00      	add	r7, sp, #0
    1706:	60f8      	str	r0, [r7, #12]
    1708:	0008      	movs	r0, r1
    170a:	0011      	movs	r1, r2
    170c:	230b      	movs	r3, #11
    170e:	18fb      	adds	r3, r7, r3
    1710:	1c02      	adds	r2, r0, #0
    1712:	701a      	strb	r2, [r3, #0]
    1714:	230a      	movs	r3, #10
    1716:	18fb      	adds	r3, r7, r3
    1718:	1c0a      	adds	r2, r1, #0
    171a:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    171c:	68fb      	ldr	r3, [r7, #12]
    171e:	0018      	movs	r0, r3
    1720:	f006 f86a 	bl	77f8 <_ZN8TS_PointC1Ev>
	
	counterPos = getCounterPosition(square);
    1724:	68fc      	ldr	r4, [r7, #12]
    1726:	003a      	movs	r2, r7
    1728:	230b      	movs	r3, #11
    172a:	18fb      	adds	r3, r7, r3
    172c:	781b      	ldrb	r3, [r3, #0]
    172e:	0019      	movs	r1, r3
    1730:	0010      	movs	r0, r2
    1732:	f7ff ff8f 	bl	1654 <_Z18getCounterPositionh>
    1736:	003b      	movs	r3, r7
    1738:	0020      	movs	r0, r4
    173a:	0019      	movs	r1, r3
    173c:	2306      	movs	r3, #6
    173e:	001a      	movs	r2, r3
    1740:	f00f f979 	bl	10a36 <memcpy>
	
	if (turn == 1 || turn == 4 || turn == 7) {
    1744:	230a      	movs	r3, #10
    1746:	18fb      	adds	r3, r7, r3
    1748:	781b      	ldrb	r3, [r3, #0]
    174a:	2b01      	cmp	r3, #1
    174c:	d009      	beq.n	1762 <_Z23getSmallCounterPositionhh+0x62>
    174e:	230a      	movs	r3, #10
    1750:	18fb      	adds	r3, r7, r3
    1752:	781b      	ldrb	r3, [r3, #0]
    1754:	2b04      	cmp	r3, #4
    1756:	d004      	beq.n	1762 <_Z23getSmallCounterPositionhh+0x62>
    1758:	230a      	movs	r3, #10
    175a:	18fb      	adds	r3, r7, r3
    175c:	781b      	ldrb	r3, [r3, #0]
    175e:	2b07      	cmp	r3, #7
    1760:	d109      	bne.n	1776 <_Z23getSmallCounterPositionhh+0x76>
		counterPos.x += 1;
    1762:	68fb      	ldr	r3, [r7, #12]
    1764:	2200      	movs	r2, #0
    1766:	5e9b      	ldrsh	r3, [r3, r2]
    1768:	b29b      	uxth	r3, r3
    176a:	3301      	adds	r3, #1
    176c:	b29b      	uxth	r3, r3
    176e:	b21a      	sxth	r2, r3
    1770:	68fb      	ldr	r3, [r7, #12]
    1772:	801a      	strh	r2, [r3, #0]
    1774:	e021      	b.n	17ba <_Z23getSmallCounterPositionhh+0xba>
		} else if (turn == 2 || turn == 5 || turn == 8) {
    1776:	230a      	movs	r3, #10
    1778:	18fb      	adds	r3, r7, r3
    177a:	781b      	ldrb	r3, [r3, #0]
    177c:	2b02      	cmp	r3, #2
    177e:	d009      	beq.n	1794 <_Z23getSmallCounterPositionhh+0x94>
    1780:	230a      	movs	r3, #10
    1782:	18fb      	adds	r3, r7, r3
    1784:	781b      	ldrb	r3, [r3, #0]
    1786:	2b05      	cmp	r3, #5
    1788:	d004      	beq.n	1794 <_Z23getSmallCounterPositionhh+0x94>
    178a:	230a      	movs	r3, #10
    178c:	18fb      	adds	r3, r7, r3
    178e:	781b      	ldrb	r3, [r3, #0]
    1790:	2b08      	cmp	r3, #8
    1792:	d109      	bne.n	17a8 <_Z23getSmallCounterPositionhh+0xa8>
		counterPos.x += 27;
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	2200      	movs	r2, #0
    1798:	5e9b      	ldrsh	r3, [r3, r2]
    179a:	b29b      	uxth	r3, r3
    179c:	331b      	adds	r3, #27
    179e:	b29b      	uxth	r3, r3
    17a0:	b21a      	sxth	r2, r3
    17a2:	68fb      	ldr	r3, [r7, #12]
    17a4:	801a      	strh	r2, [r3, #0]
    17a6:	e008      	b.n	17ba <_Z23getSmallCounterPositionhh+0xba>
		} else {
		counterPos.x += 53;
    17a8:	68fb      	ldr	r3, [r7, #12]
    17aa:	2200      	movs	r2, #0
    17ac:	5e9b      	ldrsh	r3, [r3, r2]
    17ae:	b29b      	uxth	r3, r3
    17b0:	3335      	adds	r3, #53	; 0x35
    17b2:	b29b      	uxth	r3, r3
    17b4:	b21a      	sxth	r2, r3
    17b6:	68fb      	ldr	r3, [r7, #12]
    17b8:	801a      	strh	r2, [r3, #0]
	}
		
	if (turn == 1 || turn == 2 || turn == 3) {
    17ba:	230a      	movs	r3, #10
    17bc:	18fb      	adds	r3, r7, r3
    17be:	781b      	ldrb	r3, [r3, #0]
    17c0:	2b01      	cmp	r3, #1
    17c2:	d009      	beq.n	17d8 <_Z23getSmallCounterPositionhh+0xd8>
    17c4:	230a      	movs	r3, #10
    17c6:	18fb      	adds	r3, r7, r3
    17c8:	781b      	ldrb	r3, [r3, #0]
    17ca:	2b02      	cmp	r3, #2
    17cc:	d004      	beq.n	17d8 <_Z23getSmallCounterPositionhh+0xd8>
    17ce:	230a      	movs	r3, #10
    17d0:	18fb      	adds	r3, r7, r3
    17d2:	781b      	ldrb	r3, [r3, #0]
    17d4:	2b03      	cmp	r3, #3
    17d6:	d109      	bne.n	17ec <_Z23getSmallCounterPositionhh+0xec>
		counterPos.y += 1;
    17d8:	68fb      	ldr	r3, [r7, #12]
    17da:	2202      	movs	r2, #2
    17dc:	5e9b      	ldrsh	r3, [r3, r2]
    17de:	b29b      	uxth	r3, r3
    17e0:	3301      	adds	r3, #1
    17e2:	b29b      	uxth	r3, r3
    17e4:	b21a      	sxth	r2, r3
    17e6:	68fb      	ldr	r3, [r7, #12]
    17e8:	805a      	strh	r2, [r3, #2]
    17ea:	e021      	b.n	1830 <_Z23getSmallCounterPositionhh+0x130>
		} else if (turn == 4 || turn == 5 || turn == 6) {
    17ec:	230a      	movs	r3, #10
    17ee:	18fb      	adds	r3, r7, r3
    17f0:	781b      	ldrb	r3, [r3, #0]
    17f2:	2b04      	cmp	r3, #4
    17f4:	d009      	beq.n	180a <_Z23getSmallCounterPositionhh+0x10a>
    17f6:	230a      	movs	r3, #10
    17f8:	18fb      	adds	r3, r7, r3
    17fa:	781b      	ldrb	r3, [r3, #0]
    17fc:	2b05      	cmp	r3, #5
    17fe:	d004      	beq.n	180a <_Z23getSmallCounterPositionhh+0x10a>
    1800:	230a      	movs	r3, #10
    1802:	18fb      	adds	r3, r7, r3
    1804:	781b      	ldrb	r3, [r3, #0]
    1806:	2b06      	cmp	r3, #6
    1808:	d109      	bne.n	181e <_Z23getSmallCounterPositionhh+0x11e>
		counterPos.y += 27;
    180a:	68fb      	ldr	r3, [r7, #12]
    180c:	2202      	movs	r2, #2
    180e:	5e9b      	ldrsh	r3, [r3, r2]
    1810:	b29b      	uxth	r3, r3
    1812:	331b      	adds	r3, #27
    1814:	b29b      	uxth	r3, r3
    1816:	b21a      	sxth	r2, r3
    1818:	68fb      	ldr	r3, [r7, #12]
    181a:	805a      	strh	r2, [r3, #2]
    181c:	e008      	b.n	1830 <_Z23getSmallCounterPositionhh+0x130>
		} else {
		counterPos.y += 53;
    181e:	68fb      	ldr	r3, [r7, #12]
    1820:	2202      	movs	r2, #2
    1822:	5e9b      	ldrsh	r3, [r3, r2]
    1824:	b29b      	uxth	r3, r3
    1826:	3335      	adds	r3, #53	; 0x35
    1828:	b29b      	uxth	r3, r3
    182a:	b21a      	sxth	r2, r3
    182c:	68fb      	ldr	r3, [r7, #12]
    182e:	805a      	strh	r2, [r3, #2]
	}
	
	return counterPos;
    1830:	46c0      	nop			; (mov r8, r8)
}
    1832:	68f8      	ldr	r0, [r7, #12]
    1834:	46bd      	mov	sp, r7
    1836:	b005      	add	sp, #20
    1838:	bd90      	pop	{r4, r7, pc}

0000183a <_Z16drawSmallCounterhh>:

void drawSmallCounter(uint8_t square, uint8_t turn) {
    183a:	b590      	push	{r4, r7, lr}
    183c:	b08d      	sub	sp, #52	; 0x34
    183e:	af00      	add	r7, sp, #0
    1840:	0002      	movs	r2, r0
    1842:	230f      	movs	r3, #15
    1844:	18fb      	adds	r3, r7, r3
    1846:	701a      	strb	r2, [r3, #0]
    1848:	230e      	movs	r3, #14
    184a:	18fb      	adds	r3, r7, r3
    184c:	1c0a      	adds	r2, r1, #0
    184e:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    1850:	2318      	movs	r3, #24
    1852:	18fb      	adds	r3, r7, r3
    1854:	0018      	movs	r0, r3
    1856:	f005 ffcf 	bl	77f8 <_ZN8TS_PointC1Ev>
	
	counterPos = getSmallCounterPosition(square, turn);
    185a:	2318      	movs	r3, #24
    185c:	18fc      	adds	r4, r7, r3
    185e:	0038      	movs	r0, r7
    1860:	230e      	movs	r3, #14
    1862:	18fb      	adds	r3, r7, r3
    1864:	781a      	ldrb	r2, [r3, #0]
    1866:	230f      	movs	r3, #15
    1868:	18fb      	adds	r3, r7, r3
    186a:	781b      	ldrb	r3, [r3, #0]
    186c:	0019      	movs	r1, r3
    186e:	f7ff ff47 	bl	1700 <_Z23getSmallCounterPositionhh>
    1872:	003b      	movs	r3, r7
    1874:	0020      	movs	r0, r4
    1876:	0019      	movs	r1, r3
    1878:	2306      	movs	r3, #6
    187a:	001a      	movs	r2, r3
    187c:	f00f f8db 	bl	10a36 <memcpy>
	
	char bg;
	if (square % 2) {
    1880:	230f      	movs	r3, #15
    1882:	18fb      	adds	r3, r7, r3
    1884:	781b      	ldrb	r3, [r3, #0]
    1886:	2201      	movs	r2, #1
    1888:	4013      	ands	r3, r2
    188a:	d004      	beq.n	1896 <_Z16drawSmallCounterhh+0x5c>
		bg = 'b';
    188c:	232f      	movs	r3, #47	; 0x2f
    188e:	18fb      	adds	r3, r7, r3
    1890:	2262      	movs	r2, #98	; 0x62
    1892:	701a      	strb	r2, [r3, #0]
    1894:	e003      	b.n	189e <_Z16drawSmallCounterhh+0x64>
	} else {
		bg = 'w';
    1896:	232f      	movs	r3, #47	; 0x2f
    1898:	18fb      	adds	r3, r7, r3
    189a:	2277      	movs	r2, #119	; 0x77
    189c:	701a      	strb	r2, [r3, #0]
	}
	
	char bitmap[8] = {bg, 'c', ((String) turn).charAt(0), '.', 'b', 'm', 'p'};
    189e:	2310      	movs	r3, #16
    18a0:	18fb      	adds	r3, r7, r3
    18a2:	0018      	movs	r0, r3
    18a4:	2308      	movs	r3, #8
    18a6:	001a      	movs	r2, r3
    18a8:	2100      	movs	r1, #0
    18aa:	f00f f8cd 	bl	10a48 <memset>
    18ae:	2310      	movs	r3, #16
    18b0:	18fb      	adds	r3, r7, r3
    18b2:	2263      	movs	r2, #99	; 0x63
    18b4:	705a      	strb	r2, [r3, #1]
    18b6:	2310      	movs	r3, #16
    18b8:	18fb      	adds	r3, r7, r3
    18ba:	222e      	movs	r2, #46	; 0x2e
    18bc:	70da      	strb	r2, [r3, #3]
    18be:	2310      	movs	r3, #16
    18c0:	18fb      	adds	r3, r7, r3
    18c2:	2262      	movs	r2, #98	; 0x62
    18c4:	711a      	strb	r2, [r3, #4]
    18c6:	2310      	movs	r3, #16
    18c8:	18fb      	adds	r3, r7, r3
    18ca:	226d      	movs	r2, #109	; 0x6d
    18cc:	715a      	strb	r2, [r3, #5]
    18ce:	2310      	movs	r3, #16
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	2270      	movs	r2, #112	; 0x70
    18d4:	719a      	strb	r2, [r3, #6]
    18d6:	2310      	movs	r3, #16
    18d8:	18fb      	adds	r3, r7, r3
    18da:	222f      	movs	r2, #47	; 0x2f
    18dc:	18ba      	adds	r2, r7, r2
    18de:	7812      	ldrb	r2, [r2, #0]
    18e0:	701a      	strb	r2, [r3, #0]
    18e2:	230e      	movs	r3, #14
    18e4:	18fb      	adds	r3, r7, r3
    18e6:	7819      	ldrb	r1, [r3, #0]
    18e8:	2320      	movs	r3, #32
    18ea:	18fb      	adds	r3, r7, r3
    18ec:	220a      	movs	r2, #10
    18ee:	0018      	movs	r0, r3
    18f0:	f005 fbe6 	bl	70c0 <_ZN6StringC1Ehh>
    18f4:	2320      	movs	r3, #32
    18f6:	18fb      	adds	r3, r7, r3
    18f8:	2100      	movs	r1, #0
    18fa:	0018      	movs	r0, r3
    18fc:	f005 fd52 	bl	73a4 <_ZNK6String6charAtEj>
    1900:	0003      	movs	r3, r0
    1902:	001a      	movs	r2, r3
    1904:	2310      	movs	r3, #16
    1906:	18fb      	adds	r3, r7, r3
    1908:	709a      	strb	r2, [r3, #2]
    190a:	2320      	movs	r3, #32
    190c:	18fb      	adds	r3, r7, r3
    190e:	0018      	movs	r0, r3
    1910:	f005 fc1a 	bl	7148 <_ZN6StringD1Ev>
	drawBitmap(bitmap, counterPos.x, counterPos.y);
    1914:	2318      	movs	r3, #24
    1916:	18fb      	adds	r3, r7, r3
    1918:	2100      	movs	r1, #0
    191a:	5e59      	ldrsh	r1, [r3, r1]
    191c:	2318      	movs	r3, #24
    191e:	18fb      	adds	r3, r7, r3
    1920:	2202      	movs	r2, #2
    1922:	5e9a      	ldrsh	r2, [r3, r2]
    1924:	2310      	movs	r3, #16
    1926:	18fb      	adds	r3, r7, r3
    1928:	0018      	movs	r0, r3
    192a:	f7ff f8f9 	bl	b20 <_Z10drawBitmapPcss>
}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	46bd      	mov	sp, r7
    1932:	b00d      	add	sp, #52	; 0x34
    1934:	bd90      	pop	{r4, r7, pc}

00001936 <_Z10findCirclePA11_hhhhPh>:

void findCircle(uint8_t boardState[9][11], uint8_t x, uint8_t y, uint8_t origX, uint8_t subscripts[9]) {
    1936:	b590      	push	{r4, r7, lr}
    1938:	b087      	sub	sp, #28
    193a:	af02      	add	r7, sp, #8
    193c:	6078      	str	r0, [r7, #4]
    193e:	000c      	movs	r4, r1
    1940:	0010      	movs	r0, r2
    1942:	0019      	movs	r1, r3
    1944:	1cfb      	adds	r3, r7, #3
    1946:	1c22      	adds	r2, r4, #0
    1948:	701a      	strb	r2, [r3, #0]
    194a:	1cbb      	adds	r3, r7, #2
    194c:	1c02      	adds	r2, r0, #0
    194e:	701a      	strb	r2, [r3, #0]
    1950:	1c7b      	adds	r3, r7, #1
    1952:	1c0a      	adds	r2, r1, #0
    1954:	701a      	strb	r2, [r3, #0]
	// For each of the possible small counters in this square
	for (uint8_t i = 0; i < 9; i++) {
    1956:	230f      	movs	r3, #15
    1958:	18fb      	adds	r3, r7, r3
    195a:	2200      	movs	r2, #0
    195c:	701a      	strb	r2, [r3, #0]
    195e:	230f      	movs	r3, #15
    1960:	18fb      	adds	r3, r7, r3
    1962:	781b      	ldrb	r3, [r3, #0]
    1964:	2b08      	cmp	r3, #8
    1966:	dd00      	ble.n	196a <_Z10findCirclePA11_hhhhPh+0x34>
    1968:	e090      	b.n	1a8c <_Z10findCirclePA11_hhhhPh+0x156>
		// Find any counters that exist and aren't the current counter
		if (boardState[x][i + 2] != 0 && i + 2 != y) {
    196a:	1cfb      	adds	r3, r7, #3
    196c:	781a      	ldrb	r2, [r3, #0]
    196e:	0013      	movs	r3, r2
    1970:	009b      	lsls	r3, r3, #2
    1972:	189b      	adds	r3, r3, r2
    1974:	005b      	lsls	r3, r3, #1
    1976:	189b      	adds	r3, r3, r2
    1978:	687a      	ldr	r2, [r7, #4]
    197a:	18d2      	adds	r2, r2, r3
    197c:	230f      	movs	r3, #15
    197e:	18fb      	adds	r3, r7, r3
    1980:	781b      	ldrb	r3, [r3, #0]
    1982:	3302      	adds	r3, #2
    1984:	5cd3      	ldrb	r3, [r2, r3]
    1986:	2b00      	cmp	r3, #0
    1988:	d100      	bne.n	198c <_Z10findCirclePA11_hhhhPh+0x56>
    198a:	e077      	b.n	1a7c <_Z10findCirclePA11_hhhhPh+0x146>
    198c:	230f      	movs	r3, #15
    198e:	18fb      	adds	r3, r7, r3
    1990:	781b      	ldrb	r3, [r3, #0]
    1992:	1c9a      	adds	r2, r3, #2
    1994:	1cbb      	adds	r3, r7, #2
    1996:	781b      	ldrb	r3, [r3, #0]
    1998:	429a      	cmp	r2, r3
    199a:	d100      	bne.n	199e <_Z10findCirclePA11_hhhhPh+0x68>
    199c:	e06e      	b.n	1a7c <_Z10findCirclePA11_hhhhPh+0x146>
			// Find the pair counter of the one found
			// By going through all the squares
			for (uint8_t j = 0; j < 9; j++) {
    199e:	230e      	movs	r3, #14
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	2200      	movs	r2, #0
    19a4:	701a      	strb	r2, [r3, #0]
    19a6:	230e      	movs	r3, #14
    19a8:	18fb      	adds	r3, r7, r3
    19aa:	781b      	ldrb	r3, [r3, #0]
    19ac:	2b08      	cmp	r3, #8
    19ae:	dc65      	bgt.n	1a7c <_Z10findCirclePA11_hhhhPh+0x146>
				// And finding a counter of the same subscript that isn't the current one
				if (boardState[j][i + 2] != 0 && j != x) {
    19b0:	230e      	movs	r3, #14
    19b2:	18fb      	adds	r3, r7, r3
    19b4:	781a      	ldrb	r2, [r3, #0]
    19b6:	0013      	movs	r3, r2
    19b8:	009b      	lsls	r3, r3, #2
    19ba:	189b      	adds	r3, r3, r2
    19bc:	005b      	lsls	r3, r3, #1
    19be:	189b      	adds	r3, r3, r2
    19c0:	687a      	ldr	r2, [r7, #4]
    19c2:	18d2      	adds	r2, r2, r3
    19c4:	230f      	movs	r3, #15
    19c6:	18fb      	adds	r3, r7, r3
    19c8:	781b      	ldrb	r3, [r3, #0]
    19ca:	3302      	adds	r3, #2
    19cc:	5cd3      	ldrb	r3, [r2, r3]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d04c      	beq.n	1a6c <_Z10findCirclePA11_hhhhPh+0x136>
    19d2:	230e      	movs	r3, #14
    19d4:	18fa      	adds	r2, r7, r3
    19d6:	1cfb      	adds	r3, r7, #3
    19d8:	7812      	ldrb	r2, [r2, #0]
    19da:	781b      	ldrb	r3, [r3, #0]
    19dc:	429a      	cmp	r2, r3
    19de:	d045      	beq.n	1a6c <_Z10findCirclePA11_hhhhPh+0x136>
					// Check if this is the original square
					if (j == origX) {
    19e0:	230e      	movs	r3, #14
    19e2:	18fa      	adds	r2, r7, r3
    19e4:	1c7b      	adds	r3, r7, #1
    19e6:	7812      	ldrb	r2, [r2, #0]
    19e8:	781b      	ldrb	r3, [r3, #0]
    19ea:	429a      	cmp	r2, r3
    19ec:	d106      	bne.n	19fc <_Z10findCirclePA11_hhhhPh+0xc6>
						subscripts[0] = y - 1;
    19ee:	1cbb      	adds	r3, r7, #2
    19f0:	781b      	ldrb	r3, [r3, #0]
    19f2:	3b01      	subs	r3, #1
    19f4:	b2da      	uxtb	r2, r3
    19f6:	6a3b      	ldr	r3, [r7, #32]
    19f8:	701a      	strb	r2, [r3, #0]
						return;
    19fa:	e047      	b.n	1a8c <_Z10findCirclePA11_hhhhPh+0x156>
					}
					// If not repeat for the next counter
					findCircle(boardState, j, i + 2, origX, subscripts);
    19fc:	230f      	movs	r3, #15
    19fe:	18fb      	adds	r3, r7, r3
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	3302      	adds	r3, #2
    1a04:	b2da      	uxtb	r2, r3
    1a06:	1c7b      	adds	r3, r7, #1
    1a08:	781c      	ldrb	r4, [r3, #0]
    1a0a:	230e      	movs	r3, #14
    1a0c:	18fb      	adds	r3, r7, r3
    1a0e:	7819      	ldrb	r1, [r3, #0]
    1a10:	6878      	ldr	r0, [r7, #4]
    1a12:	6a3b      	ldr	r3, [r7, #32]
    1a14:	9300      	str	r3, [sp, #0]
    1a16:	0023      	movs	r3, r4
    1a18:	f7ff ff8d 	bl	1936 <_Z10findCirclePA11_hhhhPh>
					// When the function returns, check if it found the original square
					if (subscripts[0] != 255) {
    1a1c:	6a3b      	ldr	r3, [r7, #32]
    1a1e:	781b      	ldrb	r3, [r3, #0]
    1a20:	2bff      	cmp	r3, #255	; 0xff
    1a22:	d023      	beq.n	1a6c <_Z10findCirclePA11_hhhhPh+0x136>
						// If it did add this point on the end
						for (uint8_t k = 0; k < 9; k++) {
    1a24:	230d      	movs	r3, #13
    1a26:	18fb      	adds	r3, r7, r3
    1a28:	2200      	movs	r2, #0
    1a2a:	701a      	strb	r2, [r3, #0]
    1a2c:	230d      	movs	r3, #13
    1a2e:	18fb      	adds	r3, r7, r3
    1a30:	781b      	ldrb	r3, [r3, #0]
    1a32:	2b08      	cmp	r3, #8
    1a34:	dc1a      	bgt.n	1a6c <_Z10findCirclePA11_hhhhPh+0x136>
							if (subscripts[k] == 255) {
    1a36:	230d      	movs	r3, #13
    1a38:	18fb      	adds	r3, r7, r3
    1a3a:	781b      	ldrb	r3, [r3, #0]
    1a3c:	6a3a      	ldr	r2, [r7, #32]
    1a3e:	18d3      	adds	r3, r2, r3
    1a40:	781b      	ldrb	r3, [r3, #0]
    1a42:	2bff      	cmp	r3, #255	; 0xff
    1a44:	d10a      	bne.n	1a5c <_Z10findCirclePA11_hhhhPh+0x126>
								subscripts[k] = y - 1;
    1a46:	230d      	movs	r3, #13
    1a48:	18fb      	adds	r3, r7, r3
    1a4a:	781b      	ldrb	r3, [r3, #0]
    1a4c:	6a3a      	ldr	r2, [r7, #32]
    1a4e:	18d3      	adds	r3, r2, r3
    1a50:	1cba      	adds	r2, r7, #2
    1a52:	7812      	ldrb	r2, [r2, #0]
    1a54:	3a01      	subs	r2, #1
    1a56:	b2d2      	uxtb	r2, r2
    1a58:	701a      	strb	r2, [r3, #0]
								return;
    1a5a:	e017      	b.n	1a8c <_Z10findCirclePA11_hhhhPh+0x156>
						for (uint8_t k = 0; k < 9; k++) {
    1a5c:	230d      	movs	r3, #13
    1a5e:	18fb      	adds	r3, r7, r3
    1a60:	781a      	ldrb	r2, [r3, #0]
    1a62:	230d      	movs	r3, #13
    1a64:	18fb      	adds	r3, r7, r3
    1a66:	3201      	adds	r2, #1
    1a68:	701a      	strb	r2, [r3, #0]
    1a6a:	e7df      	b.n	1a2c <_Z10findCirclePA11_hhhhPh+0xf6>
			for (uint8_t j = 0; j < 9; j++) {
    1a6c:	230e      	movs	r3, #14
    1a6e:	18fb      	adds	r3, r7, r3
    1a70:	781a      	ldrb	r2, [r3, #0]
    1a72:	230e      	movs	r3, #14
    1a74:	18fb      	adds	r3, r7, r3
    1a76:	3201      	adds	r2, #1
    1a78:	701a      	strb	r2, [r3, #0]
    1a7a:	e794      	b.n	19a6 <_Z10findCirclePA11_hhhhPh+0x70>
	for (uint8_t i = 0; i < 9; i++) {
    1a7c:	230f      	movs	r3, #15
    1a7e:	18fb      	adds	r3, r7, r3
    1a80:	781a      	ldrb	r2, [r3, #0]
    1a82:	230f      	movs	r3, #15
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	3201      	adds	r2, #1
    1a88:	701a      	strb	r2, [r3, #0]
    1a8a:	e768      	b.n	195e <_Z10findCirclePA11_hhhhPh+0x28>
					}
				}
			}
		}
	}
}
    1a8c:	46bd      	mov	sp, r7
    1a8e:	b005      	add	sp, #20
    1a90:	bd90      	pop	{r4, r7, pc}

00001a92 <_Z21drawClassicalCountersPA11_hhhhh>:

void drawClassicalCounters(uint8_t boardState[9][11], uint8_t x, uint8_t y, uint8_t origX, uint8_t origY) {
    1a92:	b590      	push	{r4, r7, lr}
    1a94:	b08d      	sub	sp, #52	; 0x34
    1a96:	af02      	add	r7, sp, #8
    1a98:	6078      	str	r0, [r7, #4]
    1a9a:	000c      	movs	r4, r1
    1a9c:	0010      	movs	r0, r2
    1a9e:	0019      	movs	r1, r3
    1aa0:	1cfb      	adds	r3, r7, #3
    1aa2:	1c22      	adds	r2, r4, #0
    1aa4:	701a      	strb	r2, [r3, #0]
    1aa6:	1cbb      	adds	r3, r7, #2
    1aa8:	1c02      	adds	r2, r0, #0
    1aaa:	701a      	strb	r2, [r3, #0]
    1aac:	1c7b      	adds	r3, r7, #1
    1aae:	1c0a      	adds	r2, r1, #0
    1ab0:	701a      	strb	r2, [r3, #0]
	// Draw classic counter
	char bg;
	if (x % 2) {
    1ab2:	1cfb      	adds	r3, r7, #3
    1ab4:	781b      	ldrb	r3, [r3, #0]
    1ab6:	2201      	movs	r2, #1
    1ab8:	4013      	ands	r3, r2
    1aba:	d004      	beq.n	1ac6 <_Z21drawClassicalCountersPA11_hhhhh+0x34>
		bg = 'b';
    1abc:	2327      	movs	r3, #39	; 0x27
    1abe:	18fb      	adds	r3, r7, r3
    1ac0:	2262      	movs	r2, #98	; 0x62
    1ac2:	701a      	strb	r2, [r3, #0]
    1ac4:	e003      	b.n	1ace <_Z21drawClassicalCountersPA11_hhhhh+0x3c>
	} else {
		bg = 'w';
    1ac6:	2327      	movs	r3, #39	; 0x27
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	2277      	movs	r2, #119	; 0x77
    1acc:	701a      	strb	r2, [r3, #0]
	}
	uint8_t player;
	if (y % 2) {
    1ace:	1cbb      	adds	r3, r7, #2
    1ad0:	781b      	ldrb	r3, [r3, #0]
    1ad2:	2201      	movs	r2, #1
    1ad4:	4013      	ands	r3, r2
    1ad6:	d004      	beq.n	1ae2 <_Z21drawClassicalCountersPA11_hhhhh+0x50>
		player = 2;
    1ad8:	2326      	movs	r3, #38	; 0x26
    1ada:	18fb      	adds	r3, r7, r3
    1adc:	2202      	movs	r2, #2
    1ade:	701a      	strb	r2, [r3, #0]
    1ae0:	e003      	b.n	1aea <_Z21drawClassicalCountersPA11_hhhhh+0x58>
	} else {
		player = 1;
    1ae2:	2326      	movs	r3, #38	; 0x26
    1ae4:	18fb      	adds	r3, r7, r3
    1ae6:	2201      	movs	r2, #1
    1ae8:	701a      	strb	r2, [r3, #0]
	}
	char bitmap[] = {bg , 'b', ((String) (y - 1)).charAt(0), '.', 'b', 'm', 'p'};
    1aea:	2310      	movs	r3, #16
    1aec:	18fb      	adds	r3, r7, r3
    1aee:	0018      	movs	r0, r3
    1af0:	2307      	movs	r3, #7
    1af2:	001a      	movs	r2, r3
    1af4:	2100      	movs	r1, #0
    1af6:	f00e ffa7 	bl	10a48 <memset>
    1afa:	2310      	movs	r3, #16
    1afc:	18fb      	adds	r3, r7, r3
    1afe:	2262      	movs	r2, #98	; 0x62
    1b00:	705a      	strb	r2, [r3, #1]
    1b02:	2310      	movs	r3, #16
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	222e      	movs	r2, #46	; 0x2e
    1b08:	70da      	strb	r2, [r3, #3]
    1b0a:	2310      	movs	r3, #16
    1b0c:	18fb      	adds	r3, r7, r3
    1b0e:	2262      	movs	r2, #98	; 0x62
    1b10:	711a      	strb	r2, [r3, #4]
    1b12:	2310      	movs	r3, #16
    1b14:	18fb      	adds	r3, r7, r3
    1b16:	226d      	movs	r2, #109	; 0x6d
    1b18:	715a      	strb	r2, [r3, #5]
    1b1a:	2310      	movs	r3, #16
    1b1c:	18fb      	adds	r3, r7, r3
    1b1e:	2270      	movs	r2, #112	; 0x70
    1b20:	719a      	strb	r2, [r3, #6]
    1b22:	2310      	movs	r3, #16
    1b24:	18fb      	adds	r3, r7, r3
    1b26:	2227      	movs	r2, #39	; 0x27
    1b28:	18ba      	adds	r2, r7, r2
    1b2a:	7812      	ldrb	r2, [r2, #0]
    1b2c:	701a      	strb	r2, [r3, #0]
    1b2e:	1cbb      	adds	r3, r7, #2
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	1e59      	subs	r1, r3, #1
    1b34:	2318      	movs	r3, #24
    1b36:	18fb      	adds	r3, r7, r3
    1b38:	220a      	movs	r2, #10
    1b3a:	0018      	movs	r0, r3
    1b3c:	f005 fae5 	bl	710a <_ZN6StringC1Eih>
    1b40:	2318      	movs	r3, #24
    1b42:	18fb      	adds	r3, r7, r3
    1b44:	2100      	movs	r1, #0
    1b46:	0018      	movs	r0, r3
    1b48:	f005 fc2c 	bl	73a4 <_ZNK6String6charAtEj>
    1b4c:	0003      	movs	r3, r0
    1b4e:	001a      	movs	r2, r3
    1b50:	2310      	movs	r3, #16
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	709a      	strb	r2, [r3, #2]
    1b56:	2318      	movs	r3, #24
    1b58:	18fb      	adds	r3, r7, r3
    1b5a:	0018      	movs	r0, r3
    1b5c:	f005 faf4 	bl	7148 <_ZN6StringD1Ev>
	TS_Point counterPos = getCounterPosition(x);
    1b60:	2308      	movs	r3, #8
    1b62:	18fa      	adds	r2, r7, r3
    1b64:	1cfb      	adds	r3, r7, #3
    1b66:	781b      	ldrb	r3, [r3, #0]
    1b68:	0019      	movs	r1, r3
    1b6a:	0010      	movs	r0, r2
    1b6c:	f7ff fd72 	bl	1654 <_Z18getCounterPositionh>
	drawBitmap(bitmap, counterPos.x, counterPos.y);
    1b70:	2308      	movs	r3, #8
    1b72:	18fb      	adds	r3, r7, r3
    1b74:	2100      	movs	r1, #0
    1b76:	5e59      	ldrsh	r1, [r3, r1]
    1b78:	2308      	movs	r3, #8
    1b7a:	18fb      	adds	r3, r7, r3
    1b7c:	2202      	movs	r2, #2
    1b7e:	5e9a      	ldrsh	r2, [r3, r2]
    1b80:	2310      	movs	r3, #16
    1b82:	18fb      	adds	r3, r7, r3
    1b84:	0018      	movs	r0, r3
    1b86:	f7fe ffcb 	bl	b20 <_Z10drawBitmapPcss>
	boardState[x][0] = player;
    1b8a:	1cfb      	adds	r3, r7, #3
    1b8c:	781a      	ldrb	r2, [r3, #0]
    1b8e:	0013      	movs	r3, r2
    1b90:	009b      	lsls	r3, r3, #2
    1b92:	189b      	adds	r3, r3, r2
    1b94:	005b      	lsls	r3, r3, #1
    1b96:	189b      	adds	r3, r3, r2
    1b98:	687a      	ldr	r2, [r7, #4]
    1b9a:	18d3      	adds	r3, r2, r3
    1b9c:	2226      	movs	r2, #38	; 0x26
    1b9e:	18ba      	adds	r2, r7, r2
    1ba0:	7812      	ldrb	r2, [r2, #0]
    1ba2:	701a      	strb	r2, [r3, #0]
	boardState[x][1] = y;
    1ba4:	1cfb      	adds	r3, r7, #3
    1ba6:	781a      	ldrb	r2, [r3, #0]
    1ba8:	0013      	movs	r3, r2
    1baa:	009b      	lsls	r3, r3, #2
    1bac:	189b      	adds	r3, r3, r2
    1bae:	005b      	lsls	r3, r3, #1
    1bb0:	189b      	adds	r3, r3, r2
    1bb2:	687a      	ldr	r2, [r7, #4]
    1bb4:	18d3      	adds	r3, r2, r3
    1bb6:	1cba      	adds	r2, r7, #2
    1bb8:	7812      	ldrb	r2, [r2, #0]
    1bba:	705a      	strb	r2, [r3, #1]
	
	for (uint8_t i = 0; i < 9; i++) {
    1bbc:	2325      	movs	r3, #37	; 0x25
    1bbe:	18fb      	adds	r3, r7, r3
    1bc0:	2200      	movs	r2, #0
    1bc2:	701a      	strb	r2, [r3, #0]
    1bc4:	2325      	movs	r3, #37	; 0x25
    1bc6:	18fb      	adds	r3, r7, r3
    1bc8:	781b      	ldrb	r3, [r3, #0]
    1bca:	2b08      	cmp	r3, #8
    1bcc:	dc6a      	bgt.n	1ca4 <_Z21drawClassicalCountersPA11_hhhhh+0x212>
		if (boardState[x][i + 2] != 0 && i + 2 != y) {
    1bce:	1cfb      	adds	r3, r7, #3
    1bd0:	781a      	ldrb	r2, [r3, #0]
    1bd2:	0013      	movs	r3, r2
    1bd4:	009b      	lsls	r3, r3, #2
    1bd6:	189b      	adds	r3, r3, r2
    1bd8:	005b      	lsls	r3, r3, #1
    1bda:	189b      	adds	r3, r3, r2
    1bdc:	687a      	ldr	r2, [r7, #4]
    1bde:	18d2      	adds	r2, r2, r3
    1be0:	2325      	movs	r3, #37	; 0x25
    1be2:	18fb      	adds	r3, r7, r3
    1be4:	781b      	ldrb	r3, [r3, #0]
    1be6:	3302      	adds	r3, #2
    1be8:	5cd3      	ldrb	r3, [r2, r3]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d052      	beq.n	1c94 <_Z21drawClassicalCountersPA11_hhhhh+0x202>
    1bee:	2325      	movs	r3, #37	; 0x25
    1bf0:	18fb      	adds	r3, r7, r3
    1bf2:	781b      	ldrb	r3, [r3, #0]
    1bf4:	1c9a      	adds	r2, r3, #2
    1bf6:	1cbb      	adds	r3, r7, #2
    1bf8:	781b      	ldrb	r3, [r3, #0]
    1bfa:	429a      	cmp	r2, r3
    1bfc:	d04a      	beq.n	1c94 <_Z21drawClassicalCountersPA11_hhhhh+0x202>
			// Runs when another counter is found in the same square
			for (uint8_t j = 0; j < 9; j++) {
    1bfe:	2324      	movs	r3, #36	; 0x24
    1c00:	18fb      	adds	r3, r7, r3
    1c02:	2200      	movs	r2, #0
    1c04:	701a      	strb	r2, [r3, #0]
    1c06:	2324      	movs	r3, #36	; 0x24
    1c08:	18fb      	adds	r3, r7, r3
    1c0a:	781b      	ldrb	r3, [r3, #0]
    1c0c:	2b08      	cmp	r3, #8
    1c0e:	dc41      	bgt.n	1c94 <_Z21drawClassicalCountersPA11_hhhhh+0x202>
				if (boardState[j][i + 2] != 0 && j != x) {
    1c10:	2324      	movs	r3, #36	; 0x24
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	781a      	ldrb	r2, [r3, #0]
    1c16:	0013      	movs	r3, r2
    1c18:	009b      	lsls	r3, r3, #2
    1c1a:	189b      	adds	r3, r3, r2
    1c1c:	005b      	lsls	r3, r3, #1
    1c1e:	189b      	adds	r3, r3, r2
    1c20:	687a      	ldr	r2, [r7, #4]
    1c22:	18d2      	adds	r2, r2, r3
    1c24:	2325      	movs	r3, #37	; 0x25
    1c26:	18fb      	adds	r3, r7, r3
    1c28:	781b      	ldrb	r3, [r3, #0]
    1c2a:	3302      	adds	r3, #2
    1c2c:	5cd3      	ldrb	r3, [r2, r3]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d028      	beq.n	1c84 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
    1c32:	2324      	movs	r3, #36	; 0x24
    1c34:	18fa      	adds	r2, r7, r3
    1c36:	1cfb      	adds	r3, r7, #3
    1c38:	7812      	ldrb	r2, [r2, #0]
    1c3a:	781b      	ldrb	r3, [r3, #0]
    1c3c:	429a      	cmp	r2, r3
    1c3e:	d021      	beq.n	1c84 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
					// Runs when pair is found at [j][i + 2]
					if (j != origX && i + 2 != origY) {
    1c40:	2324      	movs	r3, #36	; 0x24
    1c42:	18fa      	adds	r2, r7, r3
    1c44:	1c7b      	adds	r3, r7, #1
    1c46:	7812      	ldrb	r2, [r2, #0]
    1c48:	781b      	ldrb	r3, [r3, #0]
    1c4a:	429a      	cmp	r2, r3
    1c4c:	d01a      	beq.n	1c84 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
    1c4e:	2325      	movs	r3, #37	; 0x25
    1c50:	18fb      	adds	r3, r7, r3
    1c52:	781b      	ldrb	r3, [r3, #0]
    1c54:	1c9a      	adds	r2, r3, #2
    1c56:	2338      	movs	r3, #56	; 0x38
    1c58:	18fb      	adds	r3, r7, r3
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	429a      	cmp	r2, r3
    1c5e:	d011      	beq.n	1c84 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
						// Runs if not the original counter
						drawClassicalCounters(boardState, j, i + 2, origX, origY);
    1c60:	2325      	movs	r3, #37	; 0x25
    1c62:	18fb      	adds	r3, r7, r3
    1c64:	781b      	ldrb	r3, [r3, #0]
    1c66:	3302      	adds	r3, #2
    1c68:	b2da      	uxtb	r2, r3
    1c6a:	1c7b      	adds	r3, r7, #1
    1c6c:	781c      	ldrb	r4, [r3, #0]
    1c6e:	2324      	movs	r3, #36	; 0x24
    1c70:	18fb      	adds	r3, r7, r3
    1c72:	7819      	ldrb	r1, [r3, #0]
    1c74:	6878      	ldr	r0, [r7, #4]
    1c76:	2338      	movs	r3, #56	; 0x38
    1c78:	18fb      	adds	r3, r7, r3
    1c7a:	781b      	ldrb	r3, [r3, #0]
    1c7c:	9300      	str	r3, [sp, #0]
    1c7e:	0023      	movs	r3, r4
    1c80:	f7ff ff07 	bl	1a92 <_Z21drawClassicalCountersPA11_hhhhh>
			for (uint8_t j = 0; j < 9; j++) {
    1c84:	2324      	movs	r3, #36	; 0x24
    1c86:	18fb      	adds	r3, r7, r3
    1c88:	781a      	ldrb	r2, [r3, #0]
    1c8a:	2324      	movs	r3, #36	; 0x24
    1c8c:	18fb      	adds	r3, r7, r3
    1c8e:	3201      	adds	r2, #1
    1c90:	701a      	strb	r2, [r3, #0]
    1c92:	e7b8      	b.n	1c06 <_Z21drawClassicalCountersPA11_hhhhh+0x174>
	for (uint8_t i = 0; i < 9; i++) {
    1c94:	2325      	movs	r3, #37	; 0x25
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	781a      	ldrb	r2, [r3, #0]
    1c9a:	2325      	movs	r3, #37	; 0x25
    1c9c:	18fb      	adds	r3, r7, r3
    1c9e:	3201      	adds	r2, #1
    1ca0:	701a      	strb	r2, [r3, #0]
    1ca2:	e78f      	b.n	1bc4 <_Z21drawClassicalCountersPA11_hhhhh+0x132>
					}
				}
			}
		}
	}
}
    1ca4:	46c0      	nop			; (mov r8, r8)
    1ca6:	46bd      	mov	sp, r7
    1ca8:	b00b      	add	sp, #44	; 0x2c
    1caa:	bd90      	pop	{r4, r7, pc}

00001cac <_Z21checkForQuantumWinnerPA11_h>:

uint8_t checkForQuantumWinner(uint8_t boardState[9][11]) {
    1cac:	b590      	push	{r4, r7, lr}
    1cae:	b087      	sub	sp, #28
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
	// winningRows[x][0] = winner
	// winningRows[x][1] = subscript total
	uint8_t winningRows[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    1cb4:	2308      	movs	r3, #8
    1cb6:	18fb      	adds	r3, r7, r3
    1cb8:	0018      	movs	r0, r3
    1cba:	2306      	movs	r3, #6
    1cbc:	001a      	movs	r2, r3
    1cbe:	2100      	movs	r1, #0
    1cc0:	f00e fec2 	bl	10a48 <memset>
	uint8_t numOfWinningRows = 0;
    1cc4:	2317      	movs	r3, #23
    1cc6:	18fb      	adds	r3, r7, r3
    1cc8:	2200      	movs	r2, #0
    1cca:	701a      	strb	r2, [r3, #0]
	uint8_t winner = 0;
    1ccc:	2316      	movs	r3, #22
    1cce:	18fb      	adds	r3, r7, r3
    1cd0:	2200      	movs	r2, #0
    1cd2:	701a      	strb	r2, [r3, #0]
	// Check to see if someone has won
	for (uint8_t i = 0; i < 8; i++) {
    1cd4:	2315      	movs	r3, #21
    1cd6:	18fb      	adds	r3, r7, r3
    1cd8:	2200      	movs	r2, #0
    1cda:	701a      	strb	r2, [r3, #0]
    1cdc:	2315      	movs	r3, #21
    1cde:	18fb      	adds	r3, r7, r3
    1ce0:	781b      	ldrb	r3, [r3, #0]
    1ce2:	2b07      	cmp	r3, #7
    1ce4:	dd00      	ble.n	1ce8 <_Z21checkForQuantumWinnerPA11_h+0x3c>
    1ce6:	e0db      	b.n	1ea0 <_Z21checkForQuantumWinnerPA11_h+0x1f4>
		if (boardState[winIndexes[i][0]][0] == boardState[winIndexes[i][1]][0]
    1ce8:	2315      	movs	r3, #21
    1cea:	18fb      	adds	r3, r7, r3
    1cec:	781a      	ldrb	r2, [r3, #0]
    1cee:	4992      	ldr	r1, [pc, #584]	; (1f38 <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1cf0:	0013      	movs	r3, r2
    1cf2:	005b      	lsls	r3, r3, #1
    1cf4:	189b      	adds	r3, r3, r2
    1cf6:	5c5b      	ldrb	r3, [r3, r1]
    1cf8:	001a      	movs	r2, r3
    1cfa:	0013      	movs	r3, r2
    1cfc:	009b      	lsls	r3, r3, #2
    1cfe:	189b      	adds	r3, r3, r2
    1d00:	005b      	lsls	r3, r3, #1
    1d02:	189b      	adds	r3, r3, r2
    1d04:	687a      	ldr	r2, [r7, #4]
    1d06:	18d3      	adds	r3, r2, r3
    1d08:	7819      	ldrb	r1, [r3, #0]
    1d0a:	2315      	movs	r3, #21
    1d0c:	18fb      	adds	r3, r7, r3
    1d0e:	781a      	ldrb	r2, [r3, #0]
    1d10:	4889      	ldr	r0, [pc, #548]	; (1f38 <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1d12:	0013      	movs	r3, r2
    1d14:	005b      	lsls	r3, r3, #1
    1d16:	189b      	adds	r3, r3, r2
    1d18:	18c3      	adds	r3, r0, r3
    1d1a:	3301      	adds	r3, #1
    1d1c:	781b      	ldrb	r3, [r3, #0]
    1d1e:	001a      	movs	r2, r3
    1d20:	0013      	movs	r3, r2
    1d22:	009b      	lsls	r3, r3, #2
    1d24:	189b      	adds	r3, r3, r2
    1d26:	005b      	lsls	r3, r3, #1
    1d28:	189b      	adds	r3, r3, r2
    1d2a:	687a      	ldr	r2, [r7, #4]
    1d2c:	18d3      	adds	r3, r2, r3
    1d2e:	781b      	ldrb	r3, [r3, #0]
    1d30:	4299      	cmp	r1, r3
    1d32:	d000      	beq.n	1d36 <_Z21checkForQuantumWinnerPA11_h+0x8a>
    1d34:	e0ac      	b.n	1e90 <_Z21checkForQuantumWinnerPA11_h+0x1e4>
		&& boardState[winIndexes[i][0]][0] == boardState[winIndexes[i][2]][0]
    1d36:	2315      	movs	r3, #21
    1d38:	18fb      	adds	r3, r7, r3
    1d3a:	781a      	ldrb	r2, [r3, #0]
    1d3c:	497e      	ldr	r1, [pc, #504]	; (1f38 <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1d3e:	0013      	movs	r3, r2
    1d40:	005b      	lsls	r3, r3, #1
    1d42:	189b      	adds	r3, r3, r2
    1d44:	5c5b      	ldrb	r3, [r3, r1]
    1d46:	001a      	movs	r2, r3
    1d48:	0013      	movs	r3, r2
    1d4a:	009b      	lsls	r3, r3, #2
    1d4c:	189b      	adds	r3, r3, r2
    1d4e:	005b      	lsls	r3, r3, #1
    1d50:	189b      	adds	r3, r3, r2
    1d52:	687a      	ldr	r2, [r7, #4]
    1d54:	18d3      	adds	r3, r2, r3
    1d56:	7819      	ldrb	r1, [r3, #0]
    1d58:	2315      	movs	r3, #21
    1d5a:	18fb      	adds	r3, r7, r3
    1d5c:	781a      	ldrb	r2, [r3, #0]
    1d5e:	4876      	ldr	r0, [pc, #472]	; (1f38 <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1d60:	0013      	movs	r3, r2
    1d62:	005b      	lsls	r3, r3, #1
    1d64:	189b      	adds	r3, r3, r2
    1d66:	18c3      	adds	r3, r0, r3
    1d68:	3302      	adds	r3, #2
    1d6a:	781b      	ldrb	r3, [r3, #0]
    1d6c:	001a      	movs	r2, r3
    1d6e:	0013      	movs	r3, r2
    1d70:	009b      	lsls	r3, r3, #2
    1d72:	189b      	adds	r3, r3, r2
    1d74:	005b      	lsls	r3, r3, #1
    1d76:	189b      	adds	r3, r3, r2
    1d78:	687a      	ldr	r2, [r7, #4]
    1d7a:	18d3      	adds	r3, r2, r3
    1d7c:	781b      	ldrb	r3, [r3, #0]
    1d7e:	4299      	cmp	r1, r3
    1d80:	d000      	beq.n	1d84 <_Z21checkForQuantumWinnerPA11_h+0xd8>
    1d82:	e085      	b.n	1e90 <_Z21checkForQuantumWinnerPA11_h+0x1e4>
		&& boardState[winIndexes[i][0]][0] != 0) {
    1d84:	2315      	movs	r3, #21
    1d86:	18fb      	adds	r3, r7, r3
    1d88:	781a      	ldrb	r2, [r3, #0]
    1d8a:	496b      	ldr	r1, [pc, #428]	; (1f38 <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1d8c:	0013      	movs	r3, r2
    1d8e:	005b      	lsls	r3, r3, #1
    1d90:	189b      	adds	r3, r3, r2
    1d92:	5c5b      	ldrb	r3, [r3, r1]
    1d94:	001a      	movs	r2, r3
    1d96:	0013      	movs	r3, r2
    1d98:	009b      	lsls	r3, r3, #2
    1d9a:	189b      	adds	r3, r3, r2
    1d9c:	005b      	lsls	r3, r3, #1
    1d9e:	189b      	adds	r3, r3, r2
    1da0:	687a      	ldr	r2, [r7, #4]
    1da2:	18d3      	adds	r3, r2, r3
    1da4:	781b      	ldrb	r3, [r3, #0]
    1da6:	2b00      	cmp	r3, #0
    1da8:	d072      	beq.n	1e90 <_Z21checkForQuantumWinnerPA11_h+0x1e4>
			// Someone has won
				
			// Add the player that won to winningRows
			winningRows[numOfWinningRows][0] = boardState[winIndexes[i][0]][0];
    1daa:	2317      	movs	r3, #23
    1dac:	18fb      	adds	r3, r7, r3
    1dae:	7819      	ldrb	r1, [r3, #0]
    1db0:	2315      	movs	r3, #21
    1db2:	18fb      	adds	r3, r7, r3
    1db4:	781a      	ldrb	r2, [r3, #0]
    1db6:	4860      	ldr	r0, [pc, #384]	; (1f38 <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1db8:	0013      	movs	r3, r2
    1dba:	005b      	lsls	r3, r3, #1
    1dbc:	189b      	adds	r3, r3, r2
    1dbe:	5c1b      	ldrb	r3, [r3, r0]
    1dc0:	001a      	movs	r2, r3
    1dc2:	0013      	movs	r3, r2
    1dc4:	009b      	lsls	r3, r3, #2
    1dc6:	189b      	adds	r3, r3, r2
    1dc8:	005b      	lsls	r3, r3, #1
    1dca:	189b      	adds	r3, r3, r2
    1dcc:	687a      	ldr	r2, [r7, #4]
    1dce:	18d3      	adds	r3, r2, r3
    1dd0:	7818      	ldrb	r0, [r3, #0]
    1dd2:	2308      	movs	r3, #8
    1dd4:	18fb      	adds	r3, r7, r3
    1dd6:	004a      	lsls	r2, r1, #1
    1dd8:	1c01      	adds	r1, r0, #0
    1dda:	54d1      	strb	r1, [r2, r3]
				
			// Total the subscripts and store in winningRows
			uint8_t highestSubscript = 0;
    1ddc:	2314      	movs	r3, #20
    1dde:	18fb      	adds	r3, r7, r3
    1de0:	2200      	movs	r2, #0
    1de2:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 3; j++) {
    1de4:	2313      	movs	r3, #19
    1de6:	18fb      	adds	r3, r7, r3
    1de8:	2200      	movs	r2, #0
    1dea:	701a      	strb	r2, [r3, #0]
    1dec:	2313      	movs	r3, #19
    1dee:	18fb      	adds	r3, r7, r3
    1df0:	781b      	ldrb	r3, [r3, #0]
    1df2:	2b02      	cmp	r3, #2
    1df4:	dc39      	bgt.n	1e6a <_Z21checkForQuantumWinnerPA11_h+0x1be>
					if (highestSubscript < boardState[winIndexes[i][j]][1]) {
    1df6:	2314      	movs	r3, #20
    1df8:	18fb      	adds	r3, r7, r3
    1dfa:	7819      	ldrb	r1, [r3, #0]
    1dfc:	2315      	movs	r3, #21
    1dfe:	18fb      	adds	r3, r7, r3
    1e00:	781a      	ldrb	r2, [r3, #0]
    1e02:	2313      	movs	r3, #19
    1e04:	18fb      	adds	r3, r7, r3
    1e06:	7818      	ldrb	r0, [r3, #0]
    1e08:	4c4b      	ldr	r4, [pc, #300]	; (1f38 <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1e0a:	0013      	movs	r3, r2
    1e0c:	005b      	lsls	r3, r3, #1
    1e0e:	189b      	adds	r3, r3, r2
    1e10:	18e3      	adds	r3, r4, r3
    1e12:	5c1b      	ldrb	r3, [r3, r0]
    1e14:	001a      	movs	r2, r3
    1e16:	0013      	movs	r3, r2
    1e18:	009b      	lsls	r3, r3, #2
    1e1a:	189b      	adds	r3, r3, r2
    1e1c:	005b      	lsls	r3, r3, #1
    1e1e:	189b      	adds	r3, r3, r2
    1e20:	687a      	ldr	r2, [r7, #4]
    1e22:	18d3      	adds	r3, r2, r3
    1e24:	785b      	ldrb	r3, [r3, #1]
    1e26:	4299      	cmp	r1, r3
    1e28:	da17      	bge.n	1e5a <_Z21checkForQuantumWinnerPA11_h+0x1ae>
						highestSubscript = boardState[winIndexes[i][j]][1];
    1e2a:	2315      	movs	r3, #21
    1e2c:	18fb      	adds	r3, r7, r3
    1e2e:	781a      	ldrb	r2, [r3, #0]
    1e30:	2313      	movs	r3, #19
    1e32:	18fb      	adds	r3, r7, r3
    1e34:	7819      	ldrb	r1, [r3, #0]
    1e36:	4840      	ldr	r0, [pc, #256]	; (1f38 <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1e38:	0013      	movs	r3, r2
    1e3a:	005b      	lsls	r3, r3, #1
    1e3c:	189b      	adds	r3, r3, r2
    1e3e:	18c3      	adds	r3, r0, r3
    1e40:	5c5b      	ldrb	r3, [r3, r1]
    1e42:	001a      	movs	r2, r3
    1e44:	0013      	movs	r3, r2
    1e46:	009b      	lsls	r3, r3, #2
    1e48:	189b      	adds	r3, r3, r2
    1e4a:	005b      	lsls	r3, r3, #1
    1e4c:	189b      	adds	r3, r3, r2
    1e4e:	687a      	ldr	r2, [r7, #4]
    1e50:	18d2      	adds	r2, r2, r3
    1e52:	2314      	movs	r3, #20
    1e54:	18fb      	adds	r3, r7, r3
    1e56:	7852      	ldrb	r2, [r2, #1]
    1e58:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 3; j++) {
    1e5a:	2313      	movs	r3, #19
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	781a      	ldrb	r2, [r3, #0]
    1e60:	2313      	movs	r3, #19
    1e62:	18fb      	adds	r3, r7, r3
    1e64:	3201      	adds	r2, #1
    1e66:	701a      	strb	r2, [r3, #0]
    1e68:	e7c0      	b.n	1dec <_Z21checkForQuantumWinnerPA11_h+0x140>
					}
			}
			winningRows[numOfWinningRows][1] = highestSubscript;
    1e6a:	2317      	movs	r3, #23
    1e6c:	18fb      	adds	r3, r7, r3
    1e6e:	781b      	ldrb	r3, [r3, #0]
    1e70:	2208      	movs	r2, #8
    1e72:	18ba      	adds	r2, r7, r2
    1e74:	005b      	lsls	r3, r3, #1
    1e76:	18d3      	adds	r3, r2, r3
    1e78:	3301      	adds	r3, #1
    1e7a:	2214      	movs	r2, #20
    1e7c:	18ba      	adds	r2, r7, r2
    1e7e:	7812      	ldrb	r2, [r2, #0]
    1e80:	701a      	strb	r2, [r3, #0]
			numOfWinningRows++;
    1e82:	2317      	movs	r3, #23
    1e84:	18fb      	adds	r3, r7, r3
    1e86:	781a      	ldrb	r2, [r3, #0]
    1e88:	2317      	movs	r3, #23
    1e8a:	18fb      	adds	r3, r7, r3
    1e8c:	3201      	adds	r2, #1
    1e8e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
    1e90:	2315      	movs	r3, #21
    1e92:	18fb      	adds	r3, r7, r3
    1e94:	781a      	ldrb	r2, [r3, #0]
    1e96:	2315      	movs	r3, #21
    1e98:	18fb      	adds	r3, r7, r3
    1e9a:	3201      	adds	r2, #1
    1e9c:	701a      	strb	r2, [r3, #0]
    1e9e:	e71d      	b.n	1cdc <_Z21checkForQuantumWinnerPA11_h+0x30>
		}
	}
		
	// Find the winner if one exists
	uint8_t lowestMaxSubscript = 255;
    1ea0:	2312      	movs	r3, #18
    1ea2:	18fb      	adds	r3, r7, r3
    1ea4:	22ff      	movs	r2, #255	; 0xff
    1ea6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
    1ea8:	2311      	movs	r3, #17
    1eaa:	18fb      	adds	r3, r7, r3
    1eac:	2200      	movs	r2, #0
    1eae:	701a      	strb	r2, [r3, #0]
    1eb0:	2311      	movs	r3, #17
    1eb2:	18fb      	adds	r3, r7, r3
    1eb4:	781b      	ldrb	r3, [r3, #0]
    1eb6:	2b02      	cmp	r3, #2
    1eb8:	dc37      	bgt.n	1f2a <_Z21checkForQuantumWinnerPA11_h+0x27e>
		if (winningRows[i][1] < lowestMaxSubscript && winningRows[i][1] != 0) {
    1eba:	2311      	movs	r3, #17
    1ebc:	18fb      	adds	r3, r7, r3
    1ebe:	781b      	ldrb	r3, [r3, #0]
    1ec0:	2208      	movs	r2, #8
    1ec2:	18ba      	adds	r2, r7, r2
    1ec4:	005b      	lsls	r3, r3, #1
    1ec6:	18d3      	adds	r3, r2, r3
    1ec8:	3301      	adds	r3, #1
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	001a      	movs	r2, r3
    1ece:	2312      	movs	r3, #18
    1ed0:	18fb      	adds	r3, r7, r3
    1ed2:	781b      	ldrb	r3, [r3, #0]
    1ed4:	429a      	cmp	r2, r3
    1ed6:	da20      	bge.n	1f1a <_Z21checkForQuantumWinnerPA11_h+0x26e>
    1ed8:	2311      	movs	r3, #17
    1eda:	18fb      	adds	r3, r7, r3
    1edc:	781b      	ldrb	r3, [r3, #0]
    1ede:	2208      	movs	r2, #8
    1ee0:	18ba      	adds	r2, r7, r2
    1ee2:	005b      	lsls	r3, r3, #1
    1ee4:	18d3      	adds	r3, r2, r3
    1ee6:	3301      	adds	r3, #1
    1ee8:	781b      	ldrb	r3, [r3, #0]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d015      	beq.n	1f1a <_Z21checkForQuantumWinnerPA11_h+0x26e>
			winner = winningRows[i][0];
    1eee:	2311      	movs	r3, #17
    1ef0:	18fb      	adds	r3, r7, r3
    1ef2:	7819      	ldrb	r1, [r3, #0]
    1ef4:	2316      	movs	r3, #22
    1ef6:	18fb      	adds	r3, r7, r3
    1ef8:	2208      	movs	r2, #8
    1efa:	18ba      	adds	r2, r7, r2
    1efc:	0049      	lsls	r1, r1, #1
    1efe:	5c8a      	ldrb	r2, [r1, r2]
    1f00:	701a      	strb	r2, [r3, #0]
			lowestMaxSubscript = winningRows[i][1];
    1f02:	2311      	movs	r3, #17
    1f04:	18fb      	adds	r3, r7, r3
    1f06:	781a      	ldrb	r2, [r3, #0]
    1f08:	2312      	movs	r3, #18
    1f0a:	18fb      	adds	r3, r7, r3
    1f0c:	2108      	movs	r1, #8
    1f0e:	1879      	adds	r1, r7, r1
    1f10:	0052      	lsls	r2, r2, #1
    1f12:	188a      	adds	r2, r1, r2
    1f14:	3201      	adds	r2, #1
    1f16:	7812      	ldrb	r2, [r2, #0]
    1f18:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
    1f1a:	2311      	movs	r3, #17
    1f1c:	18fb      	adds	r3, r7, r3
    1f1e:	781a      	ldrb	r2, [r3, #0]
    1f20:	2311      	movs	r3, #17
    1f22:	18fb      	adds	r3, r7, r3
    1f24:	3201      	adds	r2, #1
    1f26:	701a      	strb	r2, [r3, #0]
    1f28:	e7c2      	b.n	1eb0 <_Z21checkForQuantumWinnerPA11_h+0x204>
		}
	}
	return winner;
    1f2a:	2316      	movs	r3, #22
    1f2c:	18fb      	adds	r3, r7, r3
    1f2e:	781b      	ldrb	r3, [r3, #0]
}
    1f30:	0018      	movs	r0, r3
    1f32:	46bd      	mov	sp, r7
    1f34:	b007      	add	sp, #28
    1f36:	bd90      	pop	{r4, r7, pc}
    1f38:	20000004 	.word	0x20000004

00001f3c <_Z4gamehh>:

State game(uint8_t noughtsScore, uint8_t crossesScore) {
    1f3c:	b590      	push	{r4, r7, lr}
    1f3e:	b09d      	sub	sp, #116	; 0x74
    1f40:	af00      	add	r7, sp, #0
    1f42:	0002      	movs	r2, r0
    1f44:	230f      	movs	r3, #15
    1f46:	18fb      	adds	r3, r7, r3
    1f48:	701a      	strb	r2, [r3, #0]
    1f4a:	230e      	movs	r3, #14
    1f4c:	18fb      	adds	r3, r7, r3
    1f4e:	1c0a      	adds	r2, r1, #0
    1f50:	701a      	strb	r2, [r3, #0]
	State player = cross;
    1f52:	236f      	movs	r3, #111	; 0x6f
    1f54:	18fb      	adds	r3, r7, r3
    1f56:	2202      	movs	r2, #2
    1f58:	701a      	strb	r2, [r3, #0]
	State boardState[9] = {empty, empty, empty, empty, empty, empty, empty, empty,
	empty};
    1f5a:	2320      	movs	r3, #32
    1f5c:	18fb      	adds	r3, r7, r3
    1f5e:	0018      	movs	r0, r3
    1f60:	2309      	movs	r3, #9
    1f62:	001a      	movs	r2, r3
    1f64:	2100      	movs	r1, #0
    1f66:	f00e fd6f 	bl	10a48 <memset>
	State winner = empty;
    1f6a:	236e      	movs	r3, #110	; 0x6e
    1f6c:	18fb      	adds	r3, r7, r3
    1f6e:	2200      	movs	r2, #0
    1f70:	701a      	strb	r2, [r3, #0]
	uint8_t placedCounters = 0;
    1f72:	236d      	movs	r3, #109	; 0x6d
    1f74:	18fb      	adds	r3, r7, r3
    1f76:	2200      	movs	r2, #0
    1f78:	701a      	strb	r2, [r3, #0]
	uint8_t square = 255;
    1f7a:	236b      	movs	r3, #107	; 0x6b
    1f7c:	18fb      	adds	r3, r7, r3
    1f7e:	22ff      	movs	r2, #255	; 0xff
    1f80:	701a      	strb	r2, [r3, #0]
	TS_Point newCounterPos;
    1f82:	2318      	movs	r3, #24
    1f84:	18fb      	adds	r3, r7, r3
    1f86:	0018      	movs	r0, r3
    1f88:	f005 fc36 	bl	77f8 <_ZN8TS_PointC1Ev>

	// Draw grid
	drawBitmap('d', 0, 80);
    1f8c:	2250      	movs	r2, #80	; 0x50
    1f8e:	2100      	movs	r1, #0
    1f90:	2064      	movs	r0, #100	; 0x64
    1f92:	f7fe f967 	bl	264 <_Z10drawBitmapcss>

	// Start game
	while (placedCounters < 9) {
    1f96:	236d      	movs	r3, #109	; 0x6d
    1f98:	18fb      	adds	r3, r7, r3
    1f9a:	781b      	ldrb	r3, [r3, #0]
    1f9c:	2b08      	cmp	r3, #8
    1f9e:	dd00      	ble.n	1fa2 <_Z4gamehh+0x66>
    1fa0:	e0db      	b.n	215a <_Z4gamehh+0x21e>
		while (true) {
			if (!touchScreen.touched()) continue;
    1fa2:	4b71      	ldr	r3, [pc, #452]	; (2168 <_Z4gamehh+0x22c>)
    1fa4:	0018      	movs	r0, r3
    1fa6:	f005 fa75 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    1faa:	0003      	movs	r3, r0
    1fac:	425a      	negs	r2, r3
    1fae:	4153      	adcs	r3, r2
    1fb0:	b2db      	uxtb	r3, r3
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d12e      	bne.n	2014 <_Z4gamehh+0xd8>
			TS_Point pointTouched = getPoint();
    1fb6:	2310      	movs	r3, #16
    1fb8:	18fb      	adds	r3, r7, r3
    1fba:	0018      	movs	r0, r3
    1fbc:	f7ff f9c6 	bl	134c <_Z8getPointv>
			if (verbose)
			Serial.println(
			(String) F("screen pressed at: (") + (String) pointTouched.x + ","
			+ (String) pointTouched.y + (String) F(")"));
			square = getSquare(pointTouched);
    1fc0:	236b      	movs	r3, #107	; 0x6b
    1fc2:	18fc      	adds	r4, r7, r3
    1fc4:	2310      	movs	r3, #16
    1fc6:	18fb      	adds	r3, r7, r3
    1fc8:	6818      	ldr	r0, [r3, #0]
    1fca:	6859      	ldr	r1, [r3, #4]
    1fcc:	f7ff fabb 	bl	1546 <_Z9getSquare8TS_Point>
    1fd0:	0003      	movs	r3, r0
    1fd2:	7023      	strb	r3, [r4, #0]
			newCounterPos = getCounterPosition(square);
    1fd4:	2318      	movs	r3, #24
    1fd6:	18fc      	adds	r4, r7, r3
    1fd8:	003a      	movs	r2, r7
    1fda:	236b      	movs	r3, #107	; 0x6b
    1fdc:	18fb      	adds	r3, r7, r3
    1fde:	781b      	ldrb	r3, [r3, #0]
    1fe0:	0019      	movs	r1, r3
    1fe2:	0010      	movs	r0, r2
    1fe4:	f7ff fb36 	bl	1654 <_Z18getCounterPositionh>
    1fe8:	003b      	movs	r3, r7
    1fea:	0020      	movs	r0, r4
    1fec:	0019      	movs	r1, r3
    1fee:	2306      	movs	r3, #6
    1ff0:	001a      	movs	r2, r3
    1ff2:	f00e fd20 	bl	10a36 <memcpy>
			if (!(square == 255)) break;
    1ff6:	236b      	movs	r3, #107	; 0x6b
    1ff8:	18fb      	adds	r3, r7, r3
    1ffa:	781b      	ldrb	r3, [r3, #0]
    1ffc:	2bff      	cmp	r3, #255	; 0xff
    1ffe:	d0d0      	beq.n	1fa2 <_Z4gamehh+0x66>
		}

		// Check to see if selected square is occupied
		if (boardState[square] != empty) continue;
    2000:	236b      	movs	r3, #107	; 0x6b
    2002:	18fb      	adds	r3, r7, r3
    2004:	781b      	ldrb	r3, [r3, #0]
    2006:	2220      	movs	r2, #32
    2008:	18ba      	adds	r2, r7, r2
    200a:	5cd3      	ldrb	r3, [r2, r3]
    200c:	2b00      	cmp	r3, #0
    200e:	d000      	beq.n	2012 <_Z4gamehh+0xd6>
    2010:	e0a0      	b.n	2154 <_Z4gamehh+0x218>
    2012:	e001      	b.n	2018 <_Z4gamehh+0xdc>
			if (!touchScreen.touched()) continue;
    2014:	46c0      	nop			; (mov r8, r8)
		}
    2016:	e7c4      	b.n	1fa2 <_Z4gamehh+0x66>

		// Update boardState
		boardState[square] = player;
    2018:	236b      	movs	r3, #107	; 0x6b
    201a:	18fb      	adds	r3, r7, r3
    201c:	781b      	ldrb	r3, [r3, #0]
    201e:	2220      	movs	r2, #32
    2020:	18ba      	adds	r2, r7, r2
    2022:	216f      	movs	r1, #111	; 0x6f
    2024:	1879      	adds	r1, r7, r1
    2026:	7809      	ldrb	r1, [r1, #0]
    2028:	54d1      	strb	r1, [r2, r3]

		// Draw nought or cross on selected square and swap player
		player = addMove(square, newCounterPos, player);
    202a:	236f      	movs	r3, #111	; 0x6f
    202c:	18fc      	adds	r4, r7, r3
    202e:	236f      	movs	r3, #111	; 0x6f
    2030:	18fb      	adds	r3, r7, r3
    2032:	7819      	ldrb	r1, [r3, #0]
    2034:	2318      	movs	r3, #24
    2036:	18fa      	adds	r2, r7, r3
    2038:	236b      	movs	r3, #107	; 0x6b
    203a:	18fb      	adds	r3, r7, r3
    203c:	7818      	ldrb	r0, [r3, #0]
    203e:	000b      	movs	r3, r1
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	6852      	ldr	r2, [r2, #4]
    2044:	f7ff f9b4 	bl	13b0 <_Z7addMoveh8TS_Point5State>
    2048:	0003      	movs	r3, r0
    204a:	7023      	strb	r3, [r4, #0]
		placedCounters++;
    204c:	236d      	movs	r3, #109	; 0x6d
    204e:	18fb      	adds	r3, r7, r3
    2050:	781a      	ldrb	r2, [r3, #0]
    2052:	236d      	movs	r3, #109	; 0x6d
    2054:	18fb      	adds	r3, r7, r3
    2056:	3201      	adds	r2, #1
    2058:	701a      	strb	r2, [r3, #0]

		// Check to see if someone has won
		for (uint8_t i = 0; i < 8; i++) {
    205a:	236c      	movs	r3, #108	; 0x6c
    205c:	18fb      	adds	r3, r7, r3
    205e:	2200      	movs	r2, #0
    2060:	701a      	strb	r2, [r3, #0]
    2062:	236c      	movs	r3, #108	; 0x6c
    2064:	18fb      	adds	r3, r7, r3
    2066:	781b      	ldrb	r3, [r3, #0]
    2068:	2b07      	cmp	r3, #7
    206a:	dc5c      	bgt.n	2126 <_Z4gamehh+0x1ea>
			if (boardState[winIndexes[i][0]] == boardState[winIndexes[i][1]]
    206c:	236c      	movs	r3, #108	; 0x6c
    206e:	18fb      	adds	r3, r7, r3
    2070:	781a      	ldrb	r2, [r3, #0]
    2072:	493e      	ldr	r1, [pc, #248]	; (216c <_Z4gamehh+0x230>)
    2074:	0013      	movs	r3, r2
    2076:	005b      	lsls	r3, r3, #1
    2078:	189b      	adds	r3, r3, r2
    207a:	5c5b      	ldrb	r3, [r3, r1]
    207c:	001a      	movs	r2, r3
    207e:	2320      	movs	r3, #32
    2080:	18fb      	adds	r3, r7, r3
    2082:	5c99      	ldrb	r1, [r3, r2]
    2084:	236c      	movs	r3, #108	; 0x6c
    2086:	18fb      	adds	r3, r7, r3
    2088:	781a      	ldrb	r2, [r3, #0]
    208a:	4838      	ldr	r0, [pc, #224]	; (216c <_Z4gamehh+0x230>)
    208c:	0013      	movs	r3, r2
    208e:	005b      	lsls	r3, r3, #1
    2090:	189b      	adds	r3, r3, r2
    2092:	18c3      	adds	r3, r0, r3
    2094:	3301      	adds	r3, #1
    2096:	781b      	ldrb	r3, [r3, #0]
    2098:	001a      	movs	r2, r3
    209a:	2320      	movs	r3, #32
    209c:	18fb      	adds	r3, r7, r3
    209e:	5c9b      	ldrb	r3, [r3, r2]
    20a0:	4299      	cmp	r1, r3
    20a2:	d138      	bne.n	2116 <_Z4gamehh+0x1da>
			&& boardState[winIndexes[i][0]] == boardState[winIndexes[i][2]]
    20a4:	236c      	movs	r3, #108	; 0x6c
    20a6:	18fb      	adds	r3, r7, r3
    20a8:	781a      	ldrb	r2, [r3, #0]
    20aa:	4930      	ldr	r1, [pc, #192]	; (216c <_Z4gamehh+0x230>)
    20ac:	0013      	movs	r3, r2
    20ae:	005b      	lsls	r3, r3, #1
    20b0:	189b      	adds	r3, r3, r2
    20b2:	5c5b      	ldrb	r3, [r3, r1]
    20b4:	001a      	movs	r2, r3
    20b6:	2320      	movs	r3, #32
    20b8:	18fb      	adds	r3, r7, r3
    20ba:	5c99      	ldrb	r1, [r3, r2]
    20bc:	236c      	movs	r3, #108	; 0x6c
    20be:	18fb      	adds	r3, r7, r3
    20c0:	781a      	ldrb	r2, [r3, #0]
    20c2:	482a      	ldr	r0, [pc, #168]	; (216c <_Z4gamehh+0x230>)
    20c4:	0013      	movs	r3, r2
    20c6:	005b      	lsls	r3, r3, #1
    20c8:	189b      	adds	r3, r3, r2
    20ca:	18c3      	adds	r3, r0, r3
    20cc:	3302      	adds	r3, #2
    20ce:	781b      	ldrb	r3, [r3, #0]
    20d0:	001a      	movs	r2, r3
    20d2:	2320      	movs	r3, #32
    20d4:	18fb      	adds	r3, r7, r3
    20d6:	5c9b      	ldrb	r3, [r3, r2]
    20d8:	4299      	cmp	r1, r3
    20da:	d11c      	bne.n	2116 <_Z4gamehh+0x1da>
			&& boardState[winIndexes[i][0]] != empty) {
    20dc:	236c      	movs	r3, #108	; 0x6c
    20de:	18fb      	adds	r3, r7, r3
    20e0:	781a      	ldrb	r2, [r3, #0]
    20e2:	4922      	ldr	r1, [pc, #136]	; (216c <_Z4gamehh+0x230>)
    20e4:	0013      	movs	r3, r2
    20e6:	005b      	lsls	r3, r3, #1
    20e8:	189b      	adds	r3, r3, r2
    20ea:	5c5b      	ldrb	r3, [r3, r1]
    20ec:	001a      	movs	r2, r3
    20ee:	2320      	movs	r3, #32
    20f0:	18fb      	adds	r3, r7, r3
    20f2:	5c9b      	ldrb	r3, [r3, r2]
    20f4:	2b00      	cmp	r3, #0
    20f6:	d00e      	beq.n	2116 <_Z4gamehh+0x1da>
				winner = boardState[winIndexes[i][0]];
    20f8:	236c      	movs	r3, #108	; 0x6c
    20fa:	18fb      	adds	r3, r7, r3
    20fc:	781a      	ldrb	r2, [r3, #0]
    20fe:	491b      	ldr	r1, [pc, #108]	; (216c <_Z4gamehh+0x230>)
    2100:	0013      	movs	r3, r2
    2102:	005b      	lsls	r3, r3, #1
    2104:	189b      	adds	r3, r3, r2
    2106:	5c5b      	ldrb	r3, [r3, r1]
    2108:	0019      	movs	r1, r3
    210a:	236e      	movs	r3, #110	; 0x6e
    210c:	18fb      	adds	r3, r7, r3
    210e:	2220      	movs	r2, #32
    2110:	18ba      	adds	r2, r7, r2
    2112:	5c52      	ldrb	r2, [r2, r1]
    2114:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++) {
    2116:	236c      	movs	r3, #108	; 0x6c
    2118:	18fb      	adds	r3, r7, r3
    211a:	781a      	ldrb	r2, [r3, #0]
    211c:	236c      	movs	r3, #108	; 0x6c
    211e:	18fb      	adds	r3, r7, r3
    2120:	3201      	adds	r2, #1
    2122:	701a      	strb	r2, [r3, #0]
    2124:	e79d      	b.n	2062 <_Z4gamehh+0x126>
			}
		}
		Serial.print(F("winner = "));
    2126:	4a12      	ldr	r2, [pc, #72]	; (2170 <_Z4gamehh+0x234>)
    2128:	4b12      	ldr	r3, [pc, #72]	; (2174 <_Z4gamehh+0x238>)
    212a:	0011      	movs	r1, r2
    212c:	0018      	movs	r0, r3
    212e:	f001 f830 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(winner);
    2132:	236e      	movs	r3, #110	; 0x6e
    2134:	18fb      	adds	r3, r7, r3
    2136:	7819      	ldrb	r1, [r3, #0]
    2138:	4b0e      	ldr	r3, [pc, #56]	; (2174 <_Z4gamehh+0x238>)
    213a:	220a      	movs	r2, #10
    213c:	0018      	movs	r0, r3
    213e:	f001 f966 	bl	340e <_ZN5Print7printlnEii>
		if (!(winner == empty)) break;
    2142:	236e      	movs	r3, #110	; 0x6e
    2144:	18fb      	adds	r3, r7, r3
    2146:	781b      	ldrb	r3, [r3, #0]
    2148:	2b00      	cmp	r3, #0
    214a:	d105      	bne.n	2158 <_Z4gamehh+0x21c>
		delay(100);
    214c:	2064      	movs	r0, #100	; 0x64
    214e:	f000 ff6f 	bl	3030 <delay>
    2152:	e720      	b.n	1f96 <_Z4gamehh+0x5a>
		if (boardState[square] != empty) continue;
    2154:	46c0      	nop			; (mov r8, r8)
	while (placedCounters < 9) {
    2156:	e71e      	b.n	1f96 <_Z4gamehh+0x5a>
		if (!(winner == empty)) break;
    2158:	46c0      	nop			; (mov r8, r8)
	}
	return winner;
    215a:	236e      	movs	r3, #110	; 0x6e
    215c:	18fb      	adds	r3, r7, r3
    215e:	781b      	ldrb	r3, [r3, #0]
}
    2160:	0018      	movs	r0, r3
    2162:	46bd      	mov	sp, r7
    2164:	b01d      	add	sp, #116	; 0x74
    2166:	bd90      	pop	{r4, r7, pc}
    2168:	20000320 	.word	0x20000320
    216c:	20000004 	.word	0x20000004
    2170:	00013504 	.word	0x00013504
    2174:	20000e94 	.word	0x20000e94

00002178 <_Z11quantumGamehh>:

uint8_t quantumGame(uint8_t noughtsScore, uint8_t crossesScore) {
    2178:	b5b0      	push	{r4, r5, r7, lr}
    217a:	b0c2      	sub	sp, #264	; 0x108
    217c:	af02      	add	r7, sp, #8
    217e:	0002      	movs	r2, r0
    2180:	1dfb      	adds	r3, r7, #7
    2182:	701a      	strb	r2, [r3, #0]
    2184:	1dbb      	adds	r3, r7, #6
    2186:	1c0a      	adds	r2, r1, #0
    2188:	701a      	strb	r2, [r3, #0]
	// 0 = none, 1 = cross, 2 = nought
	uint8_t player = 1;
    218a:	23ff      	movs	r3, #255	; 0xff
    218c:	18fb      	adds	r3, r7, r3
    218e:	2201      	movs	r2, #1
    2190:	701a      	strb	r2, [r3, #0]
	uint8_t turn = 1;
    2192:	23fe      	movs	r3, #254	; 0xfe
    2194:	18fb      	adds	r3, r7, r3
    2196:	2201      	movs	r2, #1
    2198:	701a      	strb	r2, [r3, #0]
	uint8_t winner = 0;
    219a:	23fd      	movs	r3, #253	; 0xfd
    219c:	18fb      	adds	r3, r7, r3
    219e:	2200      	movs	r2, #0
    21a0:	701a      	strb	r2, [r3, #0]
	uint8_t boardState[9][11] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    21a2:	2354      	movs	r3, #84	; 0x54
    21a4:	18fb      	adds	r3, r7, r3
    21a6:	0018      	movs	r0, r3
    21a8:	2363      	movs	r3, #99	; 0x63
    21aa:	001a      	movs	r2, r3
    21ac:	2100      	movs	r1, #0
    21ae:	f00e fc4b 	bl	10a48 <memset>
	uint8_t bigCounters = 0;
    21b2:	23f6      	movs	r3, #246	; 0xf6
    21b4:	18fb      	adds	r3, r7, r3
    21b6:	2200      	movs	r2, #0
    21b8:	701a      	strb	r2, [r3, #0]
	TS_Point newCounterPos;
    21ba:	234c      	movs	r3, #76	; 0x4c
    21bc:	18fb      	adds	r3, r7, r3
    21be:	0018      	movs	r0, r3
    21c0:	f005 fb1a 	bl	77f8 <_ZN8TS_PointC1Ev>

	// Draw grid
	drawBitmap('d', 0, 80);
    21c4:	2250      	movs	r2, #80	; 0x50
    21c6:	2100      	movs	r1, #0
    21c8:	2064      	movs	r0, #100	; 0x64
    21ca:	f7fe f84b 	bl	264 <_Z10drawBitmapcss>

	// Start match
	while (bigCounters < 9) {
    21ce:	23f6      	movs	r3, #246	; 0xf6
    21d0:	18fb      	adds	r3, r7, r3
    21d2:	781b      	ldrb	r3, [r3, #0]
    21d4:	2b08      	cmp	r3, #8
    21d6:	dd00      	ble.n	21da <_Z11quantumGamehh+0x62>
    21d8:	e2b9      	b.n	274e <_Z11quantumGamehh+0x5d6>
		uint8_t countersThisTurn = 0;
    21da:	23fc      	movs	r3, #252	; 0xfc
    21dc:	18fb      	adds	r3, r7, r3
    21de:	2200      	movs	r2, #0
    21e0:	701a      	strb	r2, [r3, #0]
		uint8_t square = 255;
    21e2:	23fb      	movs	r3, #251	; 0xfb
    21e4:	18fb      	adds	r3, r7, r3
    21e6:	22ff      	movs	r2, #255	; 0xff
    21e8:	701a      	strb	r2, [r3, #0]
		uint8_t recentSquares[] = {255, 255};
    21ea:	2348      	movs	r3, #72	; 0x48
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	4ae1      	ldr	r2, [pc, #900]	; (2574 <_Z11quantumGamehh+0x3fc>)
    21f0:	8812      	ldrh	r2, [r2, #0]
    21f2:	801a      	strh	r2, [r3, #0]
			
		if (turn == 9) {
    21f4:	23fe      	movs	r3, #254	; 0xfe
    21f6:	18fb      	adds	r3, r7, r3
    21f8:	781b      	ldrb	r3, [r3, #0]
    21fa:	2b09      	cmp	r3, #9
    21fc:	d000      	beq.n	2200 <_Z11quantumGamehh+0x88>
    21fe:	e097      	b.n	2330 <_Z11quantumGamehh+0x1b8>
			uint8_t classicalCounters = 0;
    2200:	23fa      	movs	r3, #250	; 0xfa
    2202:	18fb      	adds	r3, r7, r3
    2204:	2200      	movs	r2, #0
    2206:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 9; i++) {
    2208:	23f9      	movs	r3, #249	; 0xf9
    220a:	18fb      	adds	r3, r7, r3
    220c:	2200      	movs	r2, #0
    220e:	701a      	strb	r2, [r3, #0]
    2210:	23f9      	movs	r3, #249	; 0xf9
    2212:	18fb      	adds	r3, r7, r3
    2214:	781b      	ldrb	r3, [r3, #0]
    2216:	2b08      	cmp	r3, #8
    2218:	dc1b      	bgt.n	2252 <_Z11quantumGamehh+0xda>
				if (boardState[i][0] != 0) {
    221a:	23f9      	movs	r3, #249	; 0xf9
    221c:	18fb      	adds	r3, r7, r3
    221e:	781a      	ldrb	r2, [r3, #0]
    2220:	2354      	movs	r3, #84	; 0x54
    2222:	18f9      	adds	r1, r7, r3
    2224:	0013      	movs	r3, r2
    2226:	009b      	lsls	r3, r3, #2
    2228:	189b      	adds	r3, r3, r2
    222a:	005b      	lsls	r3, r3, #1
    222c:	189b      	adds	r3, r3, r2
    222e:	5c5b      	ldrb	r3, [r3, r1]
    2230:	2b00      	cmp	r3, #0
    2232:	d006      	beq.n	2242 <_Z11quantumGamehh+0xca>
					classicalCounters++;
    2234:	23fa      	movs	r3, #250	; 0xfa
    2236:	18fb      	adds	r3, r7, r3
    2238:	781a      	ldrb	r2, [r3, #0]
    223a:	23fa      	movs	r3, #250	; 0xfa
    223c:	18fb      	adds	r3, r7, r3
    223e:	3201      	adds	r2, #1
    2240:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 9; i++) {
    2242:	23f9      	movs	r3, #249	; 0xf9
    2244:	18fb      	adds	r3, r7, r3
    2246:	781a      	ldrb	r2, [r3, #0]
    2248:	23f9      	movs	r3, #249	; 0xf9
    224a:	18fb      	adds	r3, r7, r3
    224c:	3201      	adds	r2, #1
    224e:	701a      	strb	r2, [r3, #0]
    2250:	e7de      	b.n	2210 <_Z11quantumGamehh+0x98>
				}
			}
			if (classicalCounters == 8) {
    2252:	23fa      	movs	r3, #250	; 0xfa
    2254:	18fb      	adds	r3, r7, r3
    2256:	781b      	ldrb	r3, [r3, #0]
    2258:	2b08      	cmp	r3, #8
    225a:	d169      	bne.n	2330 <_Z11quantumGamehh+0x1b8>
				while (true) {
					if (!touchScreen.touched()) continue;
    225c:	4bc6      	ldr	r3, [pc, #792]	; (2578 <_Z11quantumGamehh+0x400>)
    225e:	0018      	movs	r0, r3
    2260:	f005 f918 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    2264:	0003      	movs	r3, r0
    2266:	425a      	negs	r2, r3
    2268:	4153      	adcs	r3, r2
    226a:	b2db      	uxtb	r3, r3
    226c:	2b00      	cmp	r3, #0
    226e:	d15b      	bne.n	2328 <_Z11quantumGamehh+0x1b0>
					TS_Point point = getPoint();
    2270:	2334      	movs	r3, #52	; 0x34
    2272:	18fb      	adds	r3, r7, r3
    2274:	0018      	movs	r0, r3
    2276:	f7ff f869 	bl	134c <_Z8getPointv>
					square = getSquare(point);
    227a:	23fb      	movs	r3, #251	; 0xfb
    227c:	18fc      	adds	r4, r7, r3
    227e:	2334      	movs	r3, #52	; 0x34
    2280:	18fb      	adds	r3, r7, r3
    2282:	6818      	ldr	r0, [r3, #0]
    2284:	6859      	ldr	r1, [r3, #4]
    2286:	f7ff f95e 	bl	1546 <_Z9getSquare8TS_Point>
    228a:	0003      	movs	r3, r0
    228c:	7023      	strb	r3, [r4, #0]
					if (square == 255) continue;
    228e:	23fb      	movs	r3, #251	; 0xfb
    2290:	18fb      	adds	r3, r7, r3
    2292:	781b      	ldrb	r3, [r3, #0]
    2294:	2bff      	cmp	r3, #255	; 0xff
    2296:	d049      	beq.n	232c <_Z11quantumGamehh+0x1b4>
					if (boardState[square][0] == 0) break;
    2298:	23fb      	movs	r3, #251	; 0xfb
    229a:	18fb      	adds	r3, r7, r3
    229c:	781a      	ldrb	r2, [r3, #0]
    229e:	2354      	movs	r3, #84	; 0x54
    22a0:	18f9      	adds	r1, r7, r3
    22a2:	0013      	movs	r3, r2
    22a4:	009b      	lsls	r3, r3, #2
    22a6:	189b      	adds	r3, r3, r2
    22a8:	005b      	lsls	r3, r3, #1
    22aa:	189b      	adds	r3, r3, r2
    22ac:	5c5b      	ldrb	r3, [r3, r1]
    22ae:	2b00      	cmp	r3, #0
    22b0:	d1d4      	bne.n	225c <_Z11quantumGamehh+0xe4>
				}
				boardState[square][turn + 1] = player;
    22b2:	23fb      	movs	r3, #251	; 0xfb
    22b4:	18fb      	adds	r3, r7, r3
    22b6:	781a      	ldrb	r2, [r3, #0]
    22b8:	23fe      	movs	r3, #254	; 0xfe
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	781b      	ldrb	r3, [r3, #0]
    22be:	1c59      	adds	r1, r3, #1
    22c0:	2354      	movs	r3, #84	; 0x54
    22c2:	18f8      	adds	r0, r7, r3
    22c4:	0013      	movs	r3, r2
    22c6:	009b      	lsls	r3, r3, #2
    22c8:	189b      	adds	r3, r3, r2
    22ca:	005b      	lsls	r3, r3, #1
    22cc:	189b      	adds	r3, r3, r2
    22ce:	18c3      	adds	r3, r0, r3
    22d0:	22ff      	movs	r2, #255	; 0xff
    22d2:	18ba      	adds	r2, r7, r2
    22d4:	7812      	ldrb	r2, [r2, #0]
    22d6:	545a      	strb	r2, [r3, r1]
				drawSmallCounter(square, turn);
    22d8:	23fe      	movs	r3, #254	; 0xfe
    22da:	18fb      	adds	r3, r7, r3
    22dc:	781a      	ldrb	r2, [r3, #0]
    22de:	23fb      	movs	r3, #251	; 0xfb
    22e0:	18fb      	adds	r3, r7, r3
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	0011      	movs	r1, r2
    22e6:	0018      	movs	r0, r3
    22e8:	f7ff faa7 	bl	183a <_Z16drawSmallCounterhh>
				drawClassicalCounters(boardState, square, turn + 1, square, turn + 1);
    22ec:	23fe      	movs	r3, #254	; 0xfe
    22ee:	18fb      	adds	r3, r7, r3
    22f0:	781b      	ldrb	r3, [r3, #0]
    22f2:	3301      	adds	r3, #1
    22f4:	b2dc      	uxtb	r4, r3
    22f6:	23fe      	movs	r3, #254	; 0xfe
    22f8:	18fb      	adds	r3, r7, r3
    22fa:	781b      	ldrb	r3, [r3, #0]
    22fc:	3301      	adds	r3, #1
    22fe:	b2db      	uxtb	r3, r3
    2300:	22fb      	movs	r2, #251	; 0xfb
    2302:	18ba      	adds	r2, r7, r2
    2304:	7815      	ldrb	r5, [r2, #0]
    2306:	22fb      	movs	r2, #251	; 0xfb
    2308:	18ba      	adds	r2, r7, r2
    230a:	7811      	ldrb	r1, [r2, #0]
    230c:	2254      	movs	r2, #84	; 0x54
    230e:	18b8      	adds	r0, r7, r2
    2310:	9300      	str	r3, [sp, #0]
    2312:	002b      	movs	r3, r5
    2314:	0022      	movs	r2, r4
    2316:	f7ff fbbc 	bl	1a92 <_Z21drawClassicalCountersPA11_hhhhh>
				return checkForQuantumWinner(boardState);
    231a:	2354      	movs	r3, #84	; 0x54
    231c:	18fb      	adds	r3, r7, r3
    231e:	0018      	movs	r0, r3
    2320:	f7ff fcc4 	bl	1cac <_Z21checkForQuantumWinnerPA11_h>
    2324:	0003      	movs	r3, r0
    2326:	e215      	b.n	2754 <_Z11quantumGamehh+0x5dc>
					if (!touchScreen.touched()) continue;
    2328:	46c0      	nop			; (mov r8, r8)
    232a:	e797      	b.n	225c <_Z11quantumGamehh+0xe4>
					if (square == 255) continue;
    232c:	46c0      	nop			; (mov r8, r8)
				}
    232e:	e795      	b.n	225c <_Z11quantumGamehh+0xe4>
			}
		}
		
		while (countersThisTurn < 2) {
    2330:	23fc      	movs	r3, #252	; 0xfc
    2332:	18fb      	adds	r3, r7, r3
    2334:	781b      	ldrb	r3, [r3, #0]
    2336:	2b01      	cmp	r3, #1
    2338:	dd00      	ble.n	233c <_Z11quantumGamehh+0x1c4>
    233a:	e07a      	b.n	2432 <_Z11quantumGamehh+0x2ba>
			while (true) {
				if (!touchScreen.touched()) continue;
    233c:	4b8e      	ldr	r3, [pc, #568]	; (2578 <_Z11quantumGamehh+0x400>)
    233e:	0018      	movs	r0, r3
    2340:	f005 f8a8 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    2344:	0003      	movs	r3, r0
    2346:	425a      	negs	r2, r3
    2348:	4153      	adcs	r3, r2
    234a:	b2db      	uxtb	r3, r3
    234c:	2b00      	cmp	r3, #0
    234e:	d121      	bne.n	2394 <_Z11quantumGamehh+0x21c>
				TS_Point pointTouched = getPoint();
    2350:	232c      	movs	r3, #44	; 0x2c
    2352:	18fb      	adds	r3, r7, r3
    2354:	0018      	movs	r0, r3
    2356:	f7fe fff9 	bl	134c <_Z8getPointv>
				if (verbose)
				Serial.println(
				(String) F("screen pressed at: (") + (String) pointTouched.x + ","
				+ (String) pointTouched.y + (String) F(")"));
				square = getSquare(pointTouched);
    235a:	23fb      	movs	r3, #251	; 0xfb
    235c:	18fc      	adds	r4, r7, r3
    235e:	232c      	movs	r3, #44	; 0x2c
    2360:	18fb      	adds	r3, r7, r3
    2362:	6818      	ldr	r0, [r3, #0]
    2364:	6859      	ldr	r1, [r3, #4]
    2366:	f7ff f8ee 	bl	1546 <_Z9getSquare8TS_Point>
    236a:	0003      	movs	r3, r0
    236c:	7023      	strb	r3, [r4, #0]
				if (!(square == 255)) break;
    236e:	23fb      	movs	r3, #251	; 0xfb
    2370:	18fb      	adds	r3, r7, r3
    2372:	781b      	ldrb	r3, [r3, #0]
    2374:	2bff      	cmp	r3, #255	; 0xff
    2376:	d0e1      	beq.n	233c <_Z11quantumGamehh+0x1c4>
			}

			// Check to see if selected square is occupied
			if (boardState[square][0] != 0) continue;
    2378:	23fb      	movs	r3, #251	; 0xfb
    237a:	18fb      	adds	r3, r7, r3
    237c:	781a      	ldrb	r2, [r3, #0]
    237e:	2354      	movs	r3, #84	; 0x54
    2380:	18f9      	adds	r1, r7, r3
    2382:	0013      	movs	r3, r2
    2384:	009b      	lsls	r3, r3, #2
    2386:	189b      	adds	r3, r3, r2
    2388:	005b      	lsls	r3, r3, #1
    238a:	189b      	adds	r3, r3, r2
    238c:	5c5b      	ldrb	r3, [r3, r1]
    238e:	2b00      	cmp	r3, #0
    2390:	d14b      	bne.n	242a <_Z11quantumGamehh+0x2b2>
    2392:	e001      	b.n	2398 <_Z11quantumGamehh+0x220>
				if (!touchScreen.touched()) continue;
    2394:	46c0      	nop			; (mov r8, r8)
			}
    2396:	e7d1      	b.n	233c <_Z11quantumGamehh+0x1c4>
			if (boardState[square][turn + 1] != 0) continue;
    2398:	23fb      	movs	r3, #251	; 0xfb
    239a:	18fb      	adds	r3, r7, r3
    239c:	781a      	ldrb	r2, [r3, #0]
    239e:	23fe      	movs	r3, #254	; 0xfe
    23a0:	18fb      	adds	r3, r7, r3
    23a2:	781b      	ldrb	r3, [r3, #0]
    23a4:	1c59      	adds	r1, r3, #1
    23a6:	2354      	movs	r3, #84	; 0x54
    23a8:	18f8      	adds	r0, r7, r3
    23aa:	0013      	movs	r3, r2
    23ac:	009b      	lsls	r3, r3, #2
    23ae:	189b      	adds	r3, r3, r2
    23b0:	005b      	lsls	r3, r3, #1
    23b2:	189b      	adds	r3, r3, r2
    23b4:	18c3      	adds	r3, r0, r3
    23b6:	5c5b      	ldrb	r3, [r3, r1]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d138      	bne.n	242e <_Z11quantumGamehh+0x2b6>

			// Update board state
			boardState[square][turn + 1] = player;
    23bc:	23fb      	movs	r3, #251	; 0xfb
    23be:	18fb      	adds	r3, r7, r3
    23c0:	781a      	ldrb	r2, [r3, #0]
    23c2:	23fe      	movs	r3, #254	; 0xfe
    23c4:	18fb      	adds	r3, r7, r3
    23c6:	781b      	ldrb	r3, [r3, #0]
    23c8:	1c59      	adds	r1, r3, #1
    23ca:	2354      	movs	r3, #84	; 0x54
    23cc:	18f8      	adds	r0, r7, r3
    23ce:	0013      	movs	r3, r2
    23d0:	009b      	lsls	r3, r3, #2
    23d2:	189b      	adds	r3, r3, r2
    23d4:	005b      	lsls	r3, r3, #1
    23d6:	189b      	adds	r3, r3, r2
    23d8:	18c3      	adds	r3, r0, r3
    23da:	22ff      	movs	r2, #255	; 0xff
    23dc:	18ba      	adds	r2, r7, r2
    23de:	7812      	ldrb	r2, [r2, #0]
    23e0:	545a      	strb	r2, [r3, r1]
			if (recentSquares[0] == 255) {
    23e2:	2348      	movs	r3, #72	; 0x48
    23e4:	18fb      	adds	r3, r7, r3
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	2bff      	cmp	r3, #255	; 0xff
    23ea:	d106      	bne.n	23fa <_Z11quantumGamehh+0x282>
				recentSquares[0] = square;
    23ec:	2348      	movs	r3, #72	; 0x48
    23ee:	18fb      	adds	r3, r7, r3
    23f0:	22fb      	movs	r2, #251	; 0xfb
    23f2:	18ba      	adds	r2, r7, r2
    23f4:	7812      	ldrb	r2, [r2, #0]
    23f6:	701a      	strb	r2, [r3, #0]
    23f8:	e005      	b.n	2406 <_Z11quantumGamehh+0x28e>
			} else {
				recentSquares[1] = square;
    23fa:	2348      	movs	r3, #72	; 0x48
    23fc:	18fb      	adds	r3, r7, r3
    23fe:	22fb      	movs	r2, #251	; 0xfb
    2400:	18ba      	adds	r2, r7, r2
    2402:	7812      	ldrb	r2, [r2, #0]
    2404:	705a      	strb	r2, [r3, #1]
			}
		

			// Draw small nought or cross on selected square
			drawSmallCounter(square, turn);
    2406:	23fe      	movs	r3, #254	; 0xfe
    2408:	18fb      	adds	r3, r7, r3
    240a:	781a      	ldrb	r2, [r3, #0]
    240c:	23fb      	movs	r3, #251	; 0xfb
    240e:	18fb      	adds	r3, r7, r3
    2410:	781b      	ldrb	r3, [r3, #0]
    2412:	0011      	movs	r1, r2
    2414:	0018      	movs	r0, r3
    2416:	f7ff fa10 	bl	183a <_Z16drawSmallCounterhh>
			
			countersThisTurn++;
    241a:	23fc      	movs	r3, #252	; 0xfc
    241c:	18fb      	adds	r3, r7, r3
    241e:	781a      	ldrb	r2, [r3, #0]
    2420:	23fc      	movs	r3, #252	; 0xfc
    2422:	18fb      	adds	r3, r7, r3
    2424:	3201      	adds	r2, #1
    2426:	701a      	strb	r2, [r3, #0]
    2428:	e782      	b.n	2330 <_Z11quantumGamehh+0x1b8>
			if (boardState[square][0] != 0) continue;
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	e780      	b.n	2330 <_Z11quantumGamehh+0x1b8>
			if (boardState[square][turn + 1] != 0) continue;
    242e:	46c0      	nop			; (mov r8, r8)
		while (countersThisTurn < 2) {
    2430:	e77e      	b.n	2330 <_Z11quantumGamehh+0x1b8>
		}
		
		// Check for measurement
		uint8_t circle[9] = {255, 255, 255, 255, 255, 255, 255, 255, 255};
    2432:	233c      	movs	r3, #60	; 0x3c
    2434:	18fb      	adds	r3, r7, r3
    2436:	4a51      	ldr	r2, [pc, #324]	; (257c <_Z11quantumGamehh+0x404>)
    2438:	ca03      	ldmia	r2!, {r0, r1}
    243a:	c303      	stmia	r3!, {r0, r1}
    243c:	7812      	ldrb	r2, [r2, #0]
    243e:	701a      	strb	r2, [r3, #0]
		findCircle(boardState, square, turn + 1, square, circle);
    2440:	23fe      	movs	r3, #254	; 0xfe
    2442:	18fb      	adds	r3, r7, r3
    2444:	781b      	ldrb	r3, [r3, #0]
    2446:	3301      	adds	r3, #1
    2448:	b2da      	uxtb	r2, r3
    244a:	23fb      	movs	r3, #251	; 0xfb
    244c:	18fb      	adds	r3, r7, r3
    244e:	781c      	ldrb	r4, [r3, #0]
    2450:	23fb      	movs	r3, #251	; 0xfb
    2452:	18fb      	adds	r3, r7, r3
    2454:	7819      	ldrb	r1, [r3, #0]
    2456:	2354      	movs	r3, #84	; 0x54
    2458:	18f8      	adds	r0, r7, r3
    245a:	233c      	movs	r3, #60	; 0x3c
    245c:	18fb      	adds	r3, r7, r3
    245e:	9300      	str	r3, [sp, #0]
    2460:	0023      	movs	r3, r4
    2462:	f7ff fa68 	bl	1936 <_Z10findCirclePA11_hhhhPh>
		if (circle[0] != 255) {
    2466:	233c      	movs	r3, #60	; 0x3c
    2468:	18fb      	adds	r3, r7, r3
    246a:	781b      	ldrb	r3, [r3, #0]
    246c:	2bff      	cmp	r3, #255	; 0xff
    246e:	d100      	bne.n	2472 <_Z11quantumGamehh+0x2fa>
    2470:	e13a      	b.n	26e8 <_Z11quantumGamehh+0x570>
			// Circle found
			
			// Ask user how to resolve
			// Underline/Draw box around recent counters
			for (uint8_t i = 0; i < 9; i++) {
    2472:	23f8      	movs	r3, #248	; 0xf8
    2474:	18fb      	adds	r3, r7, r3
    2476:	2200      	movs	r2, #0
    2478:	701a      	strb	r2, [r3, #0]
    247a:	23f8      	movs	r3, #248	; 0xf8
    247c:	18fb      	adds	r3, r7, r3
    247e:	781b      	ldrb	r3, [r3, #0]
    2480:	2b08      	cmp	r3, #8
    2482:	dd00      	ble.n	2486 <_Z11quantumGamehh+0x30e>
    2484:	e07e      	b.n	2584 <_Z11quantumGamehh+0x40c>
				if (boardState[i][turn + 1] != 0) {
    2486:	23f8      	movs	r3, #248	; 0xf8
    2488:	18fb      	adds	r3, r7, r3
    248a:	781a      	ldrb	r2, [r3, #0]
    248c:	23fe      	movs	r3, #254	; 0xfe
    248e:	18fb      	adds	r3, r7, r3
    2490:	781b      	ldrb	r3, [r3, #0]
    2492:	1c59      	adds	r1, r3, #1
    2494:	2354      	movs	r3, #84	; 0x54
    2496:	18f8      	adds	r0, r7, r3
    2498:	0013      	movs	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	189b      	adds	r3, r3, r2
    249e:	005b      	lsls	r3, r3, #1
    24a0:	189b      	adds	r3, r3, r2
    24a2:	18c3      	adds	r3, r0, r3
    24a4:	5c5b      	ldrb	r3, [r3, r1]
    24a6:	2b00      	cmp	r3, #0
    24a8:	d05c      	beq.n	2564 <_Z11quantumGamehh+0x3ec>
					TS_Point point = getSmallCounterPosition(i, turn);
    24aa:	2314      	movs	r3, #20
    24ac:	18f8      	adds	r0, r7, r3
    24ae:	23fe      	movs	r3, #254	; 0xfe
    24b0:	18fb      	adds	r3, r7, r3
    24b2:	781a      	ldrb	r2, [r3, #0]
    24b4:	23f8      	movs	r3, #248	; 0xf8
    24b6:	18fb      	adds	r3, r7, r3
    24b8:	781b      	ldrb	r3, [r3, #0]
    24ba:	0019      	movs	r1, r3
    24bc:	f7ff f920 	bl	1700 <_Z23getSmallCounterPositionhh>
					//tftDisplay.drawRect(point.x, point.y, 25, 25, 0x07FF);
					tftDisplay.drawLine(point.x + 2, point.y + 26, point.x + 24, point.y + 26, 0xF800);
    24c0:	2314      	movs	r3, #20
    24c2:	18fb      	adds	r3, r7, r3
    24c4:	2200      	movs	r2, #0
    24c6:	5e9b      	ldrsh	r3, [r3, r2]
    24c8:	b29b      	uxth	r3, r3
    24ca:	3302      	adds	r3, #2
    24cc:	b29b      	uxth	r3, r3
    24ce:	b219      	sxth	r1, r3
    24d0:	2314      	movs	r3, #20
    24d2:	18fb      	adds	r3, r7, r3
    24d4:	2202      	movs	r2, #2
    24d6:	5e9b      	ldrsh	r3, [r3, r2]
    24d8:	b29b      	uxth	r3, r3
    24da:	331a      	adds	r3, #26
    24dc:	b29b      	uxth	r3, r3
    24de:	b21c      	sxth	r4, r3
    24e0:	2314      	movs	r3, #20
    24e2:	18fb      	adds	r3, r7, r3
    24e4:	2200      	movs	r2, #0
    24e6:	5e9b      	ldrsh	r3, [r3, r2]
    24e8:	b29b      	uxth	r3, r3
    24ea:	3318      	adds	r3, #24
    24ec:	b29b      	uxth	r3, r3
    24ee:	b21d      	sxth	r5, r3
    24f0:	2314      	movs	r3, #20
    24f2:	18fb      	adds	r3, r7, r3
    24f4:	2202      	movs	r2, #2
    24f6:	5e9b      	ldrsh	r3, [r3, r2]
    24f8:	b29b      	uxth	r3, r3
    24fa:	331a      	adds	r3, #26
    24fc:	b29b      	uxth	r3, r3
    24fe:	b21b      	sxth	r3, r3
    2500:	481f      	ldr	r0, [pc, #124]	; (2580 <_Z11quantumGamehh+0x408>)
    2502:	22f8      	movs	r2, #248	; 0xf8
    2504:	0212      	lsls	r2, r2, #8
    2506:	9201      	str	r2, [sp, #4]
    2508:	9300      	str	r3, [sp, #0]
    250a:	002b      	movs	r3, r5
    250c:	0022      	movs	r2, r4
    250e:	f00a fb10 	bl	cb32 <_ZN12Adafruit_GFX8drawLineEsssst>
					tftDisplay.drawLine(point.x + 2, point.y + 25, point.x + 24, point.y + 25, 0xF800);
    2512:	2314      	movs	r3, #20
    2514:	18fb      	adds	r3, r7, r3
    2516:	2200      	movs	r2, #0
    2518:	5e9b      	ldrsh	r3, [r3, r2]
    251a:	b29b      	uxth	r3, r3
    251c:	3302      	adds	r3, #2
    251e:	b29b      	uxth	r3, r3
    2520:	b219      	sxth	r1, r3
    2522:	2314      	movs	r3, #20
    2524:	18fb      	adds	r3, r7, r3
    2526:	2202      	movs	r2, #2
    2528:	5e9b      	ldrsh	r3, [r3, r2]
    252a:	b29b      	uxth	r3, r3
    252c:	3319      	adds	r3, #25
    252e:	b29b      	uxth	r3, r3
    2530:	b21c      	sxth	r4, r3
    2532:	2314      	movs	r3, #20
    2534:	18fb      	adds	r3, r7, r3
    2536:	2200      	movs	r2, #0
    2538:	5e9b      	ldrsh	r3, [r3, r2]
    253a:	b29b      	uxth	r3, r3
    253c:	3318      	adds	r3, #24
    253e:	b29b      	uxth	r3, r3
    2540:	b21d      	sxth	r5, r3
    2542:	2314      	movs	r3, #20
    2544:	18fb      	adds	r3, r7, r3
    2546:	2202      	movs	r2, #2
    2548:	5e9b      	ldrsh	r3, [r3, r2]
    254a:	b29b      	uxth	r3, r3
    254c:	3319      	adds	r3, #25
    254e:	b29b      	uxth	r3, r3
    2550:	b21b      	sxth	r3, r3
    2552:	480b      	ldr	r0, [pc, #44]	; (2580 <_Z11quantumGamehh+0x408>)
    2554:	22f8      	movs	r2, #248	; 0xf8
    2556:	0212      	lsls	r2, r2, #8
    2558:	9201      	str	r2, [sp, #4]
    255a:	9300      	str	r3, [sp, #0]
    255c:	002b      	movs	r3, r5
    255e:	0022      	movs	r2, r4
    2560:	f00a fae7 	bl	cb32 <_ZN12Adafruit_GFX8drawLineEsssst>
			for (uint8_t i = 0; i < 9; i++) {
    2564:	23f8      	movs	r3, #248	; 0xf8
    2566:	18fb      	adds	r3, r7, r3
    2568:	781a      	ldrb	r2, [r3, #0]
    256a:	23f8      	movs	r3, #248	; 0xf8
    256c:	18fb      	adds	r3, r7, r3
    256e:	3201      	adds	r2, #1
    2570:	701a      	strb	r2, [r3, #0]
    2572:	e782      	b.n	247a <_Z11quantumGamehh+0x302>
    2574:	00013518 	.word	0x00013518
    2578:	20000320 	.word	0x20000320
    257c:	0001351c 	.word	0x0001351c
    2580:	200002bc 	.word	0x200002bc
				}
			}
			
			// Get the two boxes parameters
			TS_Point square0 = getCounterPosition(recentSquares[0]);
    2584:	2348      	movs	r3, #72	; 0x48
    2586:	18fb      	adds	r3, r7, r3
    2588:	781a      	ldrb	r2, [r3, #0]
    258a:	2324      	movs	r3, #36	; 0x24
    258c:	18fb      	adds	r3, r7, r3
    258e:	0011      	movs	r1, r2
    2590:	0018      	movs	r0, r3
    2592:	f7ff f85f 	bl	1654 <_Z18getCounterPositionh>
			TS_Point square1 = getCounterPosition(recentSquares[1]);
    2596:	2348      	movs	r3, #72	; 0x48
    2598:	18fb      	adds	r3, r7, r3
    259a:	785a      	ldrb	r2, [r3, #1]
    259c:	231c      	movs	r3, #28
    259e:	18fb      	adds	r3, r7, r3
    25a0:	0011      	movs	r1, r2
    25a2:	0018      	movs	r0, r3
    25a4:	f7ff f856 	bl	1654 <_Z18getCounterPositionh>
			
			
			// Wait for the user to click one of the two boxes
			uint8_t tappedSquare = 255;
    25a8:	23f7      	movs	r3, #247	; 0xf7
    25aa:	18fb      	adds	r3, r7, r3
    25ac:	22ff      	movs	r2, #255	; 0xff
    25ae:	701a      	strb	r2, [r3, #0]
			while (true) {
				if (!touchScreen.touched()) continue;
    25b0:	4b6a      	ldr	r3, [pc, #424]	; (275c <_Z11quantumGamehh+0x5e4>)
    25b2:	0018      	movs	r0, r3
    25b4:	f004 ff6e 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    25b8:	0003      	movs	r3, r0
    25ba:	425a      	negs	r2, r3
    25bc:	4153      	adcs	r3, r2
    25be:	b2db      	uxtb	r3, r3
    25c0:	2b00      	cmp	r3, #0
    25c2:	d000      	beq.n	25c6 <_Z11quantumGamehh+0x44e>
    25c4:	e070      	b.n	26a8 <_Z11quantumGamehh+0x530>
				TS_Point point = getPoint();
    25c6:	230c      	movs	r3, #12
    25c8:	18fb      	adds	r3, r7, r3
    25ca:	0018      	movs	r0, r3
    25cc:	f7fe febe 	bl	134c <_Z8getPointv>
				if (point.x > square0.x && point.x < square0.x + 80 && point.y > square0.y && point.y < square0.y + 80) {
    25d0:	230c      	movs	r3, #12
    25d2:	18fb      	adds	r3, r7, r3
    25d4:	2200      	movs	r2, #0
    25d6:	5e9a      	ldrsh	r2, [r3, r2]
    25d8:	2324      	movs	r3, #36	; 0x24
    25da:	18fb      	adds	r3, r7, r3
    25dc:	2100      	movs	r1, #0
    25de:	5e5b      	ldrsh	r3, [r3, r1]
    25e0:	429a      	cmp	r2, r3
    25e2:	dd28      	ble.n	2636 <_Z11quantumGamehh+0x4be>
    25e4:	230c      	movs	r3, #12
    25e6:	18fb      	adds	r3, r7, r3
    25e8:	2200      	movs	r2, #0
    25ea:	5e9b      	ldrsh	r3, [r3, r2]
    25ec:	001a      	movs	r2, r3
    25ee:	2324      	movs	r3, #36	; 0x24
    25f0:	18fb      	adds	r3, r7, r3
    25f2:	2100      	movs	r1, #0
    25f4:	5e5b      	ldrsh	r3, [r3, r1]
    25f6:	3350      	adds	r3, #80	; 0x50
    25f8:	429a      	cmp	r2, r3
    25fa:	da1c      	bge.n	2636 <_Z11quantumGamehh+0x4be>
    25fc:	230c      	movs	r3, #12
    25fe:	18fb      	adds	r3, r7, r3
    2600:	2202      	movs	r2, #2
    2602:	5e9a      	ldrsh	r2, [r3, r2]
    2604:	2324      	movs	r3, #36	; 0x24
    2606:	18fb      	adds	r3, r7, r3
    2608:	2102      	movs	r1, #2
    260a:	5e5b      	ldrsh	r3, [r3, r1]
    260c:	429a      	cmp	r2, r3
    260e:	dd12      	ble.n	2636 <_Z11quantumGamehh+0x4be>
    2610:	230c      	movs	r3, #12
    2612:	18fb      	adds	r3, r7, r3
    2614:	2202      	movs	r2, #2
    2616:	5e9b      	ldrsh	r3, [r3, r2]
    2618:	001a      	movs	r2, r3
    261a:	2324      	movs	r3, #36	; 0x24
    261c:	18fb      	adds	r3, r7, r3
    261e:	2102      	movs	r1, #2
    2620:	5e5b      	ldrsh	r3, [r3, r1]
    2622:	3350      	adds	r3, #80	; 0x50
    2624:	429a      	cmp	r2, r3
    2626:	da06      	bge.n	2636 <_Z11quantumGamehh+0x4be>
					tappedSquare = recentSquares[0];
    2628:	23f7      	movs	r3, #247	; 0xf7
    262a:	18fb      	adds	r3, r7, r3
    262c:	2248      	movs	r2, #72	; 0x48
    262e:	18ba      	adds	r2, r7, r2
    2630:	7812      	ldrb	r2, [r2, #0]
    2632:	701a      	strb	r2, [r3, #0]
					break;
    2634:	e032      	b.n	269c <_Z11quantumGamehh+0x524>
				} else if (point.x > square1.x && point.x < square1.x + 80 && point.y > square1.y && point.y < square1.y + 80) {
    2636:	230c      	movs	r3, #12
    2638:	18fb      	adds	r3, r7, r3
    263a:	2200      	movs	r2, #0
    263c:	5e9a      	ldrsh	r2, [r3, r2]
    263e:	231c      	movs	r3, #28
    2640:	18fb      	adds	r3, r7, r3
    2642:	2100      	movs	r1, #0
    2644:	5e5b      	ldrsh	r3, [r3, r1]
    2646:	429a      	cmp	r2, r3
    2648:	ddb2      	ble.n	25b0 <_Z11quantumGamehh+0x438>
    264a:	230c      	movs	r3, #12
    264c:	18fb      	adds	r3, r7, r3
    264e:	2200      	movs	r2, #0
    2650:	5e9b      	ldrsh	r3, [r3, r2]
    2652:	001a      	movs	r2, r3
    2654:	231c      	movs	r3, #28
    2656:	18fb      	adds	r3, r7, r3
    2658:	2100      	movs	r1, #0
    265a:	5e5b      	ldrsh	r3, [r3, r1]
    265c:	3350      	adds	r3, #80	; 0x50
    265e:	429a      	cmp	r2, r3
    2660:	daa6      	bge.n	25b0 <_Z11quantumGamehh+0x438>
    2662:	230c      	movs	r3, #12
    2664:	18fb      	adds	r3, r7, r3
    2666:	2202      	movs	r2, #2
    2668:	5e9a      	ldrsh	r2, [r3, r2]
    266a:	231c      	movs	r3, #28
    266c:	18fb      	adds	r3, r7, r3
    266e:	2102      	movs	r1, #2
    2670:	5e5b      	ldrsh	r3, [r3, r1]
    2672:	429a      	cmp	r2, r3
    2674:	dd9c      	ble.n	25b0 <_Z11quantumGamehh+0x438>
    2676:	230c      	movs	r3, #12
    2678:	18fb      	adds	r3, r7, r3
    267a:	2202      	movs	r2, #2
    267c:	5e9b      	ldrsh	r3, [r3, r2]
    267e:	001a      	movs	r2, r3
    2680:	231c      	movs	r3, #28
    2682:	18fb      	adds	r3, r7, r3
    2684:	2102      	movs	r1, #2
    2686:	5e5b      	ldrsh	r3, [r3, r1]
    2688:	3350      	adds	r3, #80	; 0x50
    268a:	429a      	cmp	r2, r3
    268c:	da90      	bge.n	25b0 <_Z11quantumGamehh+0x438>
					tappedSquare = recentSquares[1];
    268e:	23f7      	movs	r3, #247	; 0xf7
    2690:	18fb      	adds	r3, r7, r3
    2692:	2248      	movs	r2, #72	; 0x48
    2694:	18ba      	adds	r2, r7, r2
    2696:	7852      	ldrb	r2, [r2, #1]
    2698:	701a      	strb	r2, [r3, #0]
					break;
    269a:	46c0      	nop			; (mov r8, r8)
				}
			}


			// Turn to classical counters
			if (tappedSquare != 255) {
    269c:	23f7      	movs	r3, #247	; 0xf7
    269e:	18fb      	adds	r3, r7, r3
    26a0:	781b      	ldrb	r3, [r3, #0]
    26a2:	2bff      	cmp	r3, #255	; 0xff
    26a4:	d102      	bne.n	26ac <_Z11quantumGamehh+0x534>
    26a6:	e019      	b.n	26dc <_Z11quantumGamehh+0x564>
				if (!touchScreen.touched()) continue;
    26a8:	46c0      	nop			; (mov r8, r8)
			}
    26aa:	e781      	b.n	25b0 <_Z11quantumGamehh+0x438>
				drawClassicalCounters(boardState, tappedSquare, turn + 1, tappedSquare, turn + 1);
    26ac:	23fe      	movs	r3, #254	; 0xfe
    26ae:	18fb      	adds	r3, r7, r3
    26b0:	781b      	ldrb	r3, [r3, #0]
    26b2:	3301      	adds	r3, #1
    26b4:	b2dc      	uxtb	r4, r3
    26b6:	23fe      	movs	r3, #254	; 0xfe
    26b8:	18fb      	adds	r3, r7, r3
    26ba:	781b      	ldrb	r3, [r3, #0]
    26bc:	3301      	adds	r3, #1
    26be:	b2db      	uxtb	r3, r3
    26c0:	22f7      	movs	r2, #247	; 0xf7
    26c2:	18ba      	adds	r2, r7, r2
    26c4:	7815      	ldrb	r5, [r2, #0]
    26c6:	22f7      	movs	r2, #247	; 0xf7
    26c8:	18ba      	adds	r2, r7, r2
    26ca:	7811      	ldrb	r1, [r2, #0]
    26cc:	2254      	movs	r2, #84	; 0x54
    26ce:	18b8      	adds	r0, r7, r2
    26d0:	9300      	str	r3, [sp, #0]
    26d2:	002b      	movs	r3, r5
    26d4:	0022      	movs	r2, r4
    26d6:	f7ff f9dc 	bl	1a92 <_Z21drawClassicalCountersPA11_hhhhh>
    26da:	e005      	b.n	26e8 <_Z11quantumGamehh+0x570>
			} else {
				Serial.println(F("Error"));
    26dc:	4a20      	ldr	r2, [pc, #128]	; (2760 <_Z11quantumGamehh+0x5e8>)
    26de:	4b21      	ldr	r3, [pc, #132]	; (2764 <_Z11quantumGamehh+0x5ec>)
    26e0:	0011      	movs	r1, r2
    26e2:	0018      	movs	r0, r3
    26e4:	f000 fe10 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
			}
		}

		winner = checkForQuantumWinner(boardState);
    26e8:	23fd      	movs	r3, #253	; 0xfd
    26ea:	18fc      	adds	r4, r7, r3
    26ec:	2354      	movs	r3, #84	; 0x54
    26ee:	18fb      	adds	r3, r7, r3
    26f0:	0018      	movs	r0, r3
    26f2:	f7ff fadb 	bl	1cac <_Z21checkForQuantumWinnerPA11_h>
    26f6:	0003      	movs	r3, r0
    26f8:	7023      	strb	r3, [r4, #0]
		
		Serial.print(F("winner = "));
    26fa:	4a1b      	ldr	r2, [pc, #108]	; (2768 <_Z11quantumGamehh+0x5f0>)
    26fc:	4b19      	ldr	r3, [pc, #100]	; (2764 <_Z11quantumGamehh+0x5ec>)
    26fe:	0011      	movs	r1, r2
    2700:	0018      	movs	r0, r3
    2702:	f000 fd46 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(winner);
    2706:	23fd      	movs	r3, #253	; 0xfd
    2708:	18fb      	adds	r3, r7, r3
    270a:	7819      	ldrb	r1, [r3, #0]
    270c:	4b15      	ldr	r3, [pc, #84]	; (2764 <_Z11quantumGamehh+0x5ec>)
    270e:	220a      	movs	r2, #10
    2710:	0018      	movs	r0, r3
    2712:	f000 fe5c 	bl	33ce <_ZN5Print7printlnEhi>
		if (winner != 0) break;
    2716:	23fd      	movs	r3, #253	; 0xfd
    2718:	18fb      	adds	r3, r7, r3
    271a:	781b      	ldrb	r3, [r3, #0]
    271c:	2b00      	cmp	r3, #0
    271e:	d115      	bne.n	274c <_Z11quantumGamehh+0x5d4>
		
		turn++;
    2720:	23fe      	movs	r3, #254	; 0xfe
    2722:	18fb      	adds	r3, r7, r3
    2724:	781a      	ldrb	r2, [r3, #0]
    2726:	23fe      	movs	r3, #254	; 0xfe
    2728:	18fb      	adds	r3, r7, r3
    272a:	3201      	adds	r2, #1
    272c:	701a      	strb	r2, [r3, #0]
		(player == 1) ? player = 2 : player = 1;
    272e:	23ff      	movs	r3, #255	; 0xff
    2730:	18fb      	adds	r3, r7, r3
    2732:	781b      	ldrb	r3, [r3, #0]
    2734:	2b01      	cmp	r3, #1
    2736:	d104      	bne.n	2742 <_Z11quantumGamehh+0x5ca>
    2738:	23ff      	movs	r3, #255	; 0xff
    273a:	18fb      	adds	r3, r7, r3
    273c:	2202      	movs	r2, #2
    273e:	701a      	strb	r2, [r3, #0]
    2740:	e545      	b.n	21ce <_Z11quantumGamehh+0x56>
    2742:	23ff      	movs	r3, #255	; 0xff
    2744:	18fb      	adds	r3, r7, r3
    2746:	2201      	movs	r2, #1
    2748:	701a      	strb	r2, [r3, #0]
	while (bigCounters < 9) {
    274a:	e540      	b.n	21ce <_Z11quantumGamehh+0x56>
		if (winner != 0) break;
    274c:	46c0      	nop			; (mov r8, r8)
	}
	return winner;
    274e:	23fd      	movs	r3, #253	; 0xfd
    2750:	18fb      	adds	r3, r7, r3
    2752:	781b      	ldrb	r3, [r3, #0]
}
    2754:	0018      	movs	r0, r3
    2756:	46bd      	mov	sp, r7
    2758:	b040      	add	sp, #256	; 0x100
    275a:	bdb0      	pop	{r4, r5, r7, pc}
    275c:	20000320 	.word	0x20000320
    2760:	00013510 	.word	0x00013510
    2764:	20000e94 	.word	0x20000e94
    2768:	00013504 	.word	0x00013504

0000276c <_Z9playMatchi>:

void playMatch(int maxGames) {
    276c:	b590      	push	{r4, r7, lr}
    276e:	b089      	sub	sp, #36	; 0x24
    2770:	af00      	add	r7, sp, #0
    2772:	6078      	str	r0, [r7, #4]
	uint8_t noughtsScore = 0;
    2774:	231f      	movs	r3, #31
    2776:	18fb      	adds	r3, r7, r3
    2778:	2200      	movs	r2, #0
    277a:	701a      	strb	r2, [r3, #0]
	uint8_t crossesScore = 0;
    277c:	231e      	movs	r3, #30
    277e:	18fb      	adds	r3, r7, r3
    2780:	2200      	movs	r2, #0
    2782:	701a      	strb	r2, [r3, #0]
	uint8_t gamesPlayed = 0;
    2784:	231d      	movs	r3, #29
    2786:	18fb      	adds	r3, r7, r3
    2788:	2200      	movs	r2, #0
    278a:	701a      	strb	r2, [r3, #0]

	// Draw score bar for match
	drawBitmap('a', 0, 0);
    278c:	2200      	movs	r2, #0
    278e:	2100      	movs	r1, #0
    2790:	2061      	movs	r0, #97	; 0x61
    2792:	f7fd fd67 	bl	264 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
    2796:	2220      	movs	r2, #32
    2798:	2176      	movs	r1, #118	; 0x76
    279a:	2063      	movs	r0, #99	; 0x63
    279c:	f7fd fd62 	bl	264 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
    27a0:	231f      	movs	r3, #31
    27a2:	18fb      	adds	r3, r7, r3
    27a4:	781a      	ldrb	r2, [r3, #0]
    27a6:	231e      	movs	r3, #30
    27a8:	18fb      	adds	r3, r7, r3
    27aa:	781b      	ldrb	r3, [r3, #0]
    27ac:	0019      	movs	r1, r3
    27ae:	0010      	movs	r0, r2
    27b0:	f7fe fe7c 	bl	14ac <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
    27b4:	220a      	movs	r2, #10
    27b6:	2151      	movs	r1, #81	; 0x51
    27b8:	2062      	movs	r0, #98	; 0x62
    27ba:	f7fd fd53 	bl	264 <_Z10drawBitmapcss>

	while (gamesPlayed < maxGames) {
    27be:	231d      	movs	r3, #29
    27c0:	18fb      	adds	r3, r7, r3
    27c2:	781a      	ldrb	r2, [r3, #0]
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	429a      	cmp	r2, r3
    27c8:	db00      	blt.n	27cc <_Z9playMatchi+0x60>
    27ca:	e0e6      	b.n	299a <_Z9playMatchi+0x22e>
		State winner = game(noughtsScore, crossesScore);
    27cc:	231b      	movs	r3, #27
    27ce:	18fc      	adds	r4, r7, r3
    27d0:	231e      	movs	r3, #30
    27d2:	18fb      	adds	r3, r7, r3
    27d4:	781a      	ldrb	r2, [r3, #0]
    27d6:	231f      	movs	r3, #31
    27d8:	18fb      	adds	r3, r7, r3
    27da:	781b      	ldrb	r3, [r3, #0]
    27dc:	0011      	movs	r1, r2
    27de:	0018      	movs	r0, r3
    27e0:	f7ff fbac 	bl	1f3c <_Z4gamehh>
    27e4:	0003      	movs	r3, r0
    27e6:	7023      	strb	r3, [r4, #0]

		// Select win banner and add to winners score
		char bitmap;
		switch (winner) {
    27e8:	231b      	movs	r3, #27
    27ea:	18fb      	adds	r3, r7, r3
    27ec:	781b      	ldrb	r3, [r3, #0]
    27ee:	2b01      	cmp	r3, #1
    27f0:	d017      	beq.n	2822 <_Z9playMatchi+0xb6>
    27f2:	2b02      	cmp	r3, #2
    27f4:	d002      	beq.n	27fc <_Z9playMatchi+0x90>
    27f6:	2b00      	cmp	r3, #0
    27f8:	d026      	beq.n	2848 <_Z9playMatchi+0xdc>
    27fa:	e02a      	b.n	2852 <_Z9playMatchi+0xe6>
			case cross:
			// Crosses wins
			bitmap = 'e';
    27fc:	231c      	movs	r3, #28
    27fe:	18fb      	adds	r3, r7, r3
    2800:	2265      	movs	r2, #101	; 0x65
    2802:	701a      	strb	r2, [r3, #0]
			crossesScore++;
    2804:	231e      	movs	r3, #30
    2806:	18fb      	adds	r3, r7, r3
    2808:	781a      	ldrb	r2, [r3, #0]
    280a:	231e      	movs	r3, #30
    280c:	18fb      	adds	r3, r7, r3
    280e:	3201      	adds	r2, #1
    2810:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    2812:	231d      	movs	r3, #29
    2814:	18fb      	adds	r3, r7, r3
    2816:	781a      	ldrb	r2, [r3, #0]
    2818:	231d      	movs	r3, #29
    281a:	18fb      	adds	r3, r7, r3
    281c:	3201      	adds	r2, #1
    281e:	701a      	strb	r2, [r3, #0]
			break;
    2820:	e017      	b.n	2852 <_Z9playMatchi+0xe6>
			case nought:
			// Noughts wins
			bitmap = 'g';
    2822:	231c      	movs	r3, #28
    2824:	18fb      	adds	r3, r7, r3
    2826:	2267      	movs	r2, #103	; 0x67
    2828:	701a      	strb	r2, [r3, #0]
			noughtsScore++;
    282a:	231f      	movs	r3, #31
    282c:	18fb      	adds	r3, r7, r3
    282e:	781a      	ldrb	r2, [r3, #0]
    2830:	231f      	movs	r3, #31
    2832:	18fb      	adds	r3, r7, r3
    2834:	3201      	adds	r2, #1
    2836:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    2838:	231d      	movs	r3, #29
    283a:	18fb      	adds	r3, r7, r3
    283c:	781a      	ldrb	r2, [r3, #0]
    283e:	231d      	movs	r3, #29
    2840:	18fb      	adds	r3, r7, r3
    2842:	3201      	adds	r2, #1
    2844:	701a      	strb	r2, [r3, #0]
			break;
    2846:	e004      	b.n	2852 <_Z9playMatchi+0xe6>
			case empty:
			// Game is a draw
			bitmap = 'f';
    2848:	231c      	movs	r3, #28
    284a:	18fb      	adds	r3, r7, r3
    284c:	2266      	movs	r2, #102	; 0x66
    284e:	701a      	strb	r2, [r3, #0]
			break;
    2850:	46c0      	nop			; (mov r8, r8)
		}
		
		updateScore(noughtsScore, crossesScore);
    2852:	231f      	movs	r3, #31
    2854:	18fb      	adds	r3, r7, r3
    2856:	781a      	ldrb	r2, [r3, #0]
    2858:	231e      	movs	r3, #30
    285a:	18fb      	adds	r3, r7, r3
    285c:	781b      	ldrb	r3, [r3, #0]
    285e:	0019      	movs	r1, r3
    2860:	0010      	movs	r0, r2
    2862:	f7fe fe23 	bl	14ac <_Z11updateScoreii>
		
		// If there are still games to be played draw win banner,
		// otherwise draw end game screen
		uint8_t gamesToWin = (maxGames / 2) + 1;
    2866:	687b      	ldr	r3, [r7, #4]
    2868:	2b00      	cmp	r3, #0
    286a:	da00      	bge.n	286e <_Z9playMatchi+0x102>
    286c:	3301      	adds	r3, #1
    286e:	105b      	asrs	r3, r3, #1
    2870:	b2da      	uxtb	r2, r3
    2872:	231a      	movs	r3, #26
    2874:	18fb      	adds	r3, r7, r3
    2876:	3201      	adds	r2, #1
    2878:	701a      	strb	r2, [r3, #0]
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    287a:	231f      	movs	r3, #31
    287c:	18fb      	adds	r3, r7, r3
    287e:	781a      	ldrb	r2, [r3, #0]
    2880:	231a      	movs	r3, #26
    2882:	18fb      	adds	r3, r7, r3
    2884:	781b      	ldrb	r3, [r3, #0]
    2886:	429a      	cmp	r2, r3
    2888:	da1c      	bge.n	28c4 <_Z9playMatchi+0x158>
    288a:	231e      	movs	r3, #30
    288c:	18fb      	adds	r3, r7, r3
    288e:	781a      	ldrb	r2, [r3, #0]
    2890:	231a      	movs	r3, #26
    2892:	18fb      	adds	r3, r7, r3
    2894:	781b      	ldrb	r3, [r3, #0]
    2896:	429a      	cmp	r2, r3
    2898:	da14      	bge.n	28c4 <_Z9playMatchi+0x158>
			drawBitmap(bitmap, 0, 110);
    289a:	231c      	movs	r3, #28
    289c:	18fb      	adds	r3, r7, r3
    289e:	781b      	ldrb	r3, [r3, #0]
    28a0:	226e      	movs	r2, #110	; 0x6e
    28a2:	2100      	movs	r1, #0
    28a4:	0018      	movs	r0, r3
    28a6:	f7fd fcdd 	bl	264 <_Z10drawBitmapcss>
			while (true) if (touchScreen.touched()) break;
    28aa:	4b41      	ldr	r3, [pc, #260]	; (29b0 <_Z9playMatchi+0x244>)
    28ac:	0018      	movs	r0, r3
    28ae:	f004 fdf1 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    28b2:	0003      	movs	r3, r0
    28b4:	1e5a      	subs	r2, r3, #1
    28b6:	4193      	sbcs	r3, r2
    28b8:	b2db      	uxtb	r3, r3
    28ba:	2b00      	cmp	r3, #0
    28bc:	d100      	bne.n	28c0 <_Z9playMatchi+0x154>
    28be:	e7f4      	b.n	28aa <_Z9playMatchi+0x13e>
    28c0:	46c0      	nop			; (mov r8, r8)
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    28c2:	e068      	b.n	2996 <_Z9playMatchi+0x22a>
			} else {
			if (crossesScore > noughtsScore) {
    28c4:	231e      	movs	r3, #30
    28c6:	18fb      	adds	r3, r7, r3
    28c8:	781a      	ldrb	r2, [r3, #0]
    28ca:	231f      	movs	r3, #31
    28cc:	18fb      	adds	r3, r7, r3
    28ce:	781b      	ldrb	r3, [r3, #0]
    28d0:	429a      	cmp	r2, r3
    28d2:	dd30      	ble.n	2936 <_Z9playMatchi+0x1ca>
				// Draw game-over, crosses wins
				drawBitmap('m', 0, 0);
    28d4:	2200      	movs	r2, #0
    28d6:	2100      	movs	r1, #0
    28d8:	206d      	movs	r0, #109	; 0x6d
    28da:	f7fd fcc3 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    28de:	4b34      	ldr	r3, [pc, #208]	; (29b0 <_Z9playMatchi+0x244>)
    28e0:	0018      	movs	r0, r3
    28e2:	f004 fdd7 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    28e6:	0003      	movs	r3, r0
    28e8:	1e5a      	subs	r2, r3, #1
    28ea:	4193      	sbcs	r3, r2
    28ec:	b2db      	uxtb	r3, r3
    28ee:	2b00      	cmp	r3, #0
    28f0:	d01f      	beq.n	2932 <_Z9playMatchi+0x1c6>
						TS_Point point = getPoint();
    28f2:	2314      	movs	r3, #20
    28f4:	18fb      	adds	r3, r7, r3
    28f6:	0018      	movs	r0, r3
    28f8:	f7fe fd28 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    28fc:	2314      	movs	r3, #20
    28fe:	18fb      	adds	r3, r7, r3
    2900:	2200      	movs	r2, #0
    2902:	5e9b      	ldrsh	r3, [r3, r2]
    2904:	2b16      	cmp	r3, #22
    2906:	ddea      	ble.n	28de <_Z9playMatchi+0x172>
    2908:	2314      	movs	r3, #20
    290a:	18fb      	adds	r3, r7, r3
    290c:	2200      	movs	r2, #0
    290e:	5e9b      	ldrsh	r3, [r3, r2]
    2910:	2bd7      	cmp	r3, #215	; 0xd7
    2912:	dce4      	bgt.n	28de <_Z9playMatchi+0x172>
    2914:	2314      	movs	r3, #20
    2916:	18fb      	adds	r3, r7, r3
    2918:	2202      	movs	r2, #2
    291a:	5e9b      	ldrsh	r3, [r3, r2]
    291c:	2bb9      	cmp	r3, #185	; 0xb9
    291e:	ddde      	ble.n	28de <_Z9playMatchi+0x172>
    2920:	2314      	movs	r3, #20
    2922:	18fb      	adds	r3, r7, r3
    2924:	2202      	movs	r2, #2
    2926:	5e9a      	ldrsh	r2, [r3, r2]
    2928:	2384      	movs	r3, #132	; 0x84
    292a:	005b      	lsls	r3, r3, #1
    292c:	429a      	cmp	r2, r3
    292e:	dd33      	ble.n	2998 <_Z9playMatchi+0x22c>
    2930:	e7d5      	b.n	28de <_Z9playMatchi+0x172>
							// They pressed the start button
							goto exit;
						}
						} else {
						continue;
    2932:	46c0      	nop			; (mov r8, r8)
					}
				}
    2934:	e7d3      	b.n	28de <_Z9playMatchi+0x172>
				} else {
				// Draw game-over, noughts wins
				drawBitmap('n', 0, 0);
    2936:	2200      	movs	r2, #0
    2938:	2100      	movs	r1, #0
    293a:	206e      	movs	r0, #110	; 0x6e
    293c:	f7fd fc92 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2940:	4b1b      	ldr	r3, [pc, #108]	; (29b0 <_Z9playMatchi+0x244>)
    2942:	0018      	movs	r0, r3
    2944:	f004 fda6 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    2948:	0003      	movs	r3, r0
    294a:	1e5a      	subs	r2, r3, #1
    294c:	4193      	sbcs	r3, r2
    294e:	b2db      	uxtb	r3, r3
    2950:	2b00      	cmp	r3, #0
    2952:	d0f5      	beq.n	2940 <_Z9playMatchi+0x1d4>
						TS_Point point = getPoint();
    2954:	230c      	movs	r3, #12
    2956:	18fb      	adds	r3, r7, r3
    2958:	0018      	movs	r0, r3
    295a:	f7fe fcf7 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    295e:	230c      	movs	r3, #12
    2960:	18fb      	adds	r3, r7, r3
    2962:	2200      	movs	r2, #0
    2964:	5e9b      	ldrsh	r3, [r3, r2]
    2966:	2b16      	cmp	r3, #22
    2968:	dd13      	ble.n	2992 <_Z9playMatchi+0x226>
    296a:	230c      	movs	r3, #12
    296c:	18fb      	adds	r3, r7, r3
    296e:	2200      	movs	r2, #0
    2970:	5e9b      	ldrsh	r3, [r3, r2]
    2972:	2bd7      	cmp	r3, #215	; 0xd7
    2974:	dc0d      	bgt.n	2992 <_Z9playMatchi+0x226>
    2976:	230c      	movs	r3, #12
    2978:	18fb      	adds	r3, r7, r3
    297a:	2202      	movs	r2, #2
    297c:	5e9b      	ldrsh	r3, [r3, r2]
    297e:	2bb9      	cmp	r3, #185	; 0xb9
    2980:	dd07      	ble.n	2992 <_Z9playMatchi+0x226>
    2982:	230c      	movs	r3, #12
    2984:	18fb      	adds	r3, r7, r3
    2986:	2202      	movs	r2, #2
    2988:	5e9a      	ldrsh	r2, [r3, r2]
    298a:	2384      	movs	r3, #132	; 0x84
    298c:	005b      	lsls	r3, r3, #1
    298e:	429a      	cmp	r2, r3
    2990:	dd03      	ble.n	299a <_Z9playMatchi+0x22e>
							// They pressed the start button
							goto exit;
							} else {
							continue;
    2992:	46c0      	nop			; (mov r8, r8)
						}
					}
				}
    2994:	e7d4      	b.n	2940 <_Z9playMatchi+0x1d4>
	while (gamesPlayed < maxGames) {
    2996:	e712      	b.n	27be <_Z9playMatchi+0x52>
							goto exit;
    2998:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	exit:
	Serial.println("Broke while loop");
    299a:	4a06      	ldr	r2, [pc, #24]	; (29b4 <_Z9playMatchi+0x248>)
    299c:	4b06      	ldr	r3, [pc, #24]	; (29b8 <_Z9playMatchi+0x24c>)
    299e:	0011      	movs	r1, r2
    29a0:	0018      	movs	r0, r3
    29a2:	f000 fcdd 	bl	3360 <_ZN5Print7printlnEPKc>
}
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	46bd      	mov	sp, r7
    29aa:	b009      	add	sp, #36	; 0x24
    29ac:	bd90      	pop	{r4, r7, pc}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	20000320 	.word	0x20000320
    29b4:	00013528 	.word	0x00013528
    29b8:	20000e94 	.word	0x20000e94

000029bc <_Z16playQuantumMatchi>:

void playQuantumMatch(int maxGames) {
    29bc:	b590      	push	{r4, r7, lr}
    29be:	b089      	sub	sp, #36	; 0x24
    29c0:	af00      	add	r7, sp, #0
    29c2:	6078      	str	r0, [r7, #4]
	uint8_t noughtsScore = 0;
    29c4:	231f      	movs	r3, #31
    29c6:	18fb      	adds	r3, r7, r3
    29c8:	2200      	movs	r2, #0
    29ca:	701a      	strb	r2, [r3, #0]
	uint8_t crossesScore = 0;
    29cc:	231e      	movs	r3, #30
    29ce:	18fb      	adds	r3, r7, r3
    29d0:	2200      	movs	r2, #0
    29d2:	701a      	strb	r2, [r3, #0]
	uint8_t gamesPlayed = 0;
    29d4:	231d      	movs	r3, #29
    29d6:	18fb      	adds	r3, r7, r3
    29d8:	2200      	movs	r2, #0
    29da:	701a      	strb	r2, [r3, #0]

	// Draw score bar for match
	drawBitmap('a', 0, 0);
    29dc:	2200      	movs	r2, #0
    29de:	2100      	movs	r1, #0
    29e0:	2061      	movs	r0, #97	; 0x61
    29e2:	f7fd fc3f 	bl	264 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
    29e6:	2220      	movs	r2, #32
    29e8:	2176      	movs	r1, #118	; 0x76
    29ea:	2063      	movs	r0, #99	; 0x63
    29ec:	f7fd fc3a 	bl	264 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
    29f0:	231f      	movs	r3, #31
    29f2:	18fb      	adds	r3, r7, r3
    29f4:	781a      	ldrb	r2, [r3, #0]
    29f6:	231e      	movs	r3, #30
    29f8:	18fb      	adds	r3, r7, r3
    29fa:	781b      	ldrb	r3, [r3, #0]
    29fc:	0019      	movs	r1, r3
    29fe:	0010      	movs	r0, r2
    2a00:	f7fe fd54 	bl	14ac <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
    2a04:	220a      	movs	r2, #10
    2a06:	2151      	movs	r1, #81	; 0x51
    2a08:	2062      	movs	r0, #98	; 0x62
    2a0a:	f7fd fc2b 	bl	264 <_Z10drawBitmapcss>

	while (gamesPlayed < maxGames) {
    2a0e:	231d      	movs	r3, #29
    2a10:	18fb      	adds	r3, r7, r3
    2a12:	781a      	ldrb	r2, [r3, #0]
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	429a      	cmp	r2, r3
    2a18:	db00      	blt.n	2a1c <_Z16playQuantumMatchi+0x60>
    2a1a:	e0e6      	b.n	2bea <_Z16playQuantumMatchi+0x22e>
		uint8_t winner = quantumGame(noughtsScore, crossesScore);
    2a1c:	231b      	movs	r3, #27
    2a1e:	18fc      	adds	r4, r7, r3
    2a20:	231e      	movs	r3, #30
    2a22:	18fb      	adds	r3, r7, r3
    2a24:	781a      	ldrb	r2, [r3, #0]
    2a26:	231f      	movs	r3, #31
    2a28:	18fb      	adds	r3, r7, r3
    2a2a:	781b      	ldrb	r3, [r3, #0]
    2a2c:	0011      	movs	r1, r2
    2a2e:	0018      	movs	r0, r3
    2a30:	f7ff fba2 	bl	2178 <_Z11quantumGamehh>
    2a34:	0003      	movs	r3, r0
    2a36:	7023      	strb	r3, [r4, #0]

		// Select win banner and add to winners score
		char bitmap;
		switch (winner) {
    2a38:	231b      	movs	r3, #27
    2a3a:	18fb      	adds	r3, r7, r3
    2a3c:	781b      	ldrb	r3, [r3, #0]
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d004      	beq.n	2a4c <_Z16playQuantumMatchi+0x90>
    2a42:	2b02      	cmp	r3, #2
    2a44:	d015      	beq.n	2a72 <_Z16playQuantumMatchi+0xb6>
    2a46:	2b00      	cmp	r3, #0
    2a48:	d026      	beq.n	2a98 <_Z16playQuantumMatchi+0xdc>
    2a4a:	e02a      	b.n	2aa2 <_Z16playQuantumMatchi+0xe6>
			case 1:
			// Crosses wins
			bitmap = 'e';
    2a4c:	231c      	movs	r3, #28
    2a4e:	18fb      	adds	r3, r7, r3
    2a50:	2265      	movs	r2, #101	; 0x65
    2a52:	701a      	strb	r2, [r3, #0]
			crossesScore++;
    2a54:	231e      	movs	r3, #30
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	781a      	ldrb	r2, [r3, #0]
    2a5a:	231e      	movs	r3, #30
    2a5c:	18fb      	adds	r3, r7, r3
    2a5e:	3201      	adds	r2, #1
    2a60:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    2a62:	231d      	movs	r3, #29
    2a64:	18fb      	adds	r3, r7, r3
    2a66:	781a      	ldrb	r2, [r3, #0]
    2a68:	231d      	movs	r3, #29
    2a6a:	18fb      	adds	r3, r7, r3
    2a6c:	3201      	adds	r2, #1
    2a6e:	701a      	strb	r2, [r3, #0]
			break;
    2a70:	e017      	b.n	2aa2 <_Z16playQuantumMatchi+0xe6>
			case 2:
			// Noughts wins
			bitmap = 'g';
    2a72:	231c      	movs	r3, #28
    2a74:	18fb      	adds	r3, r7, r3
    2a76:	2267      	movs	r2, #103	; 0x67
    2a78:	701a      	strb	r2, [r3, #0]
			noughtsScore++;
    2a7a:	231f      	movs	r3, #31
    2a7c:	18fb      	adds	r3, r7, r3
    2a7e:	781a      	ldrb	r2, [r3, #0]
    2a80:	231f      	movs	r3, #31
    2a82:	18fb      	adds	r3, r7, r3
    2a84:	3201      	adds	r2, #1
    2a86:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    2a88:	231d      	movs	r3, #29
    2a8a:	18fb      	adds	r3, r7, r3
    2a8c:	781a      	ldrb	r2, [r3, #0]
    2a8e:	231d      	movs	r3, #29
    2a90:	18fb      	adds	r3, r7, r3
    2a92:	3201      	adds	r2, #1
    2a94:	701a      	strb	r2, [r3, #0]
			break;
    2a96:	e004      	b.n	2aa2 <_Z16playQuantumMatchi+0xe6>
			case 0:
			// Game is a draw
			bitmap = 'f';
    2a98:	231c      	movs	r3, #28
    2a9a:	18fb      	adds	r3, r7, r3
    2a9c:	2266      	movs	r2, #102	; 0x66
    2a9e:	701a      	strb	r2, [r3, #0]
			break;
    2aa0:	46c0      	nop			; (mov r8, r8)
		}
		
		updateScore(noughtsScore, crossesScore);
    2aa2:	231f      	movs	r3, #31
    2aa4:	18fb      	adds	r3, r7, r3
    2aa6:	781a      	ldrb	r2, [r3, #0]
    2aa8:	231e      	movs	r3, #30
    2aaa:	18fb      	adds	r3, r7, r3
    2aac:	781b      	ldrb	r3, [r3, #0]
    2aae:	0019      	movs	r1, r3
    2ab0:	0010      	movs	r0, r2
    2ab2:	f7fe fcfb 	bl	14ac <_Z11updateScoreii>
		
		// If there are still games to be played draw win banner,
		// otherwise draw end game screen
		uint8_t gamesToWin = (maxGames / 2) + 1;
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	2b00      	cmp	r3, #0
    2aba:	da00      	bge.n	2abe <_Z16playQuantumMatchi+0x102>
    2abc:	3301      	adds	r3, #1
    2abe:	105b      	asrs	r3, r3, #1
    2ac0:	b2da      	uxtb	r2, r3
    2ac2:	231a      	movs	r3, #26
    2ac4:	18fb      	adds	r3, r7, r3
    2ac6:	3201      	adds	r2, #1
    2ac8:	701a      	strb	r2, [r3, #0]
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    2aca:	231f      	movs	r3, #31
    2acc:	18fb      	adds	r3, r7, r3
    2ace:	781a      	ldrb	r2, [r3, #0]
    2ad0:	231a      	movs	r3, #26
    2ad2:	18fb      	adds	r3, r7, r3
    2ad4:	781b      	ldrb	r3, [r3, #0]
    2ad6:	429a      	cmp	r2, r3
    2ad8:	da1c      	bge.n	2b14 <_Z16playQuantumMatchi+0x158>
    2ada:	231e      	movs	r3, #30
    2adc:	18fb      	adds	r3, r7, r3
    2ade:	781a      	ldrb	r2, [r3, #0]
    2ae0:	231a      	movs	r3, #26
    2ae2:	18fb      	adds	r3, r7, r3
    2ae4:	781b      	ldrb	r3, [r3, #0]
    2ae6:	429a      	cmp	r2, r3
    2ae8:	da14      	bge.n	2b14 <_Z16playQuantumMatchi+0x158>
			drawBitmap(bitmap, 0, 110);
    2aea:	231c      	movs	r3, #28
    2aec:	18fb      	adds	r3, r7, r3
    2aee:	781b      	ldrb	r3, [r3, #0]
    2af0:	226e      	movs	r2, #110	; 0x6e
    2af2:	2100      	movs	r1, #0
    2af4:	0018      	movs	r0, r3
    2af6:	f7fd fbb5 	bl	264 <_Z10drawBitmapcss>
			while (true) if (touchScreen.touched()) break;
    2afa:	4b41      	ldr	r3, [pc, #260]	; (2c00 <_Z16playQuantumMatchi+0x244>)
    2afc:	0018      	movs	r0, r3
    2afe:	f004 fcc9 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    2b02:	0003      	movs	r3, r0
    2b04:	1e5a      	subs	r2, r3, #1
    2b06:	4193      	sbcs	r3, r2
    2b08:	b2db      	uxtb	r3, r3
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d100      	bne.n	2b10 <_Z16playQuantumMatchi+0x154>
    2b0e:	e7f4      	b.n	2afa <_Z16playQuantumMatchi+0x13e>
    2b10:	46c0      	nop			; (mov r8, r8)
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    2b12:	e068      	b.n	2be6 <_Z16playQuantumMatchi+0x22a>
			} else {
			if (crossesScore > noughtsScore) {
    2b14:	231e      	movs	r3, #30
    2b16:	18fb      	adds	r3, r7, r3
    2b18:	781a      	ldrb	r2, [r3, #0]
    2b1a:	231f      	movs	r3, #31
    2b1c:	18fb      	adds	r3, r7, r3
    2b1e:	781b      	ldrb	r3, [r3, #0]
    2b20:	429a      	cmp	r2, r3
    2b22:	dd30      	ble.n	2b86 <_Z16playQuantumMatchi+0x1ca>
				// Draw game-over, crosses wins
				drawBitmap('m', 0, 0);
    2b24:	2200      	movs	r2, #0
    2b26:	2100      	movs	r1, #0
    2b28:	206d      	movs	r0, #109	; 0x6d
    2b2a:	f7fd fb9b 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2b2e:	4b34      	ldr	r3, [pc, #208]	; (2c00 <_Z16playQuantumMatchi+0x244>)
    2b30:	0018      	movs	r0, r3
    2b32:	f004 fcaf 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    2b36:	0003      	movs	r3, r0
    2b38:	1e5a      	subs	r2, r3, #1
    2b3a:	4193      	sbcs	r3, r2
    2b3c:	b2db      	uxtb	r3, r3
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d01f      	beq.n	2b82 <_Z16playQuantumMatchi+0x1c6>
						TS_Point point = getPoint();
    2b42:	2314      	movs	r3, #20
    2b44:	18fb      	adds	r3, r7, r3
    2b46:	0018      	movs	r0, r3
    2b48:	f7fe fc00 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    2b4c:	2314      	movs	r3, #20
    2b4e:	18fb      	adds	r3, r7, r3
    2b50:	2200      	movs	r2, #0
    2b52:	5e9b      	ldrsh	r3, [r3, r2]
    2b54:	2b16      	cmp	r3, #22
    2b56:	ddea      	ble.n	2b2e <_Z16playQuantumMatchi+0x172>
    2b58:	2314      	movs	r3, #20
    2b5a:	18fb      	adds	r3, r7, r3
    2b5c:	2200      	movs	r2, #0
    2b5e:	5e9b      	ldrsh	r3, [r3, r2]
    2b60:	2bd7      	cmp	r3, #215	; 0xd7
    2b62:	dce4      	bgt.n	2b2e <_Z16playQuantumMatchi+0x172>
    2b64:	2314      	movs	r3, #20
    2b66:	18fb      	adds	r3, r7, r3
    2b68:	2202      	movs	r2, #2
    2b6a:	5e9b      	ldrsh	r3, [r3, r2]
    2b6c:	2bb9      	cmp	r3, #185	; 0xb9
    2b6e:	ddde      	ble.n	2b2e <_Z16playQuantumMatchi+0x172>
    2b70:	2314      	movs	r3, #20
    2b72:	18fb      	adds	r3, r7, r3
    2b74:	2202      	movs	r2, #2
    2b76:	5e9a      	ldrsh	r2, [r3, r2]
    2b78:	2384      	movs	r3, #132	; 0x84
    2b7a:	005b      	lsls	r3, r3, #1
    2b7c:	429a      	cmp	r2, r3
    2b7e:	dd33      	ble.n	2be8 <_Z16playQuantumMatchi+0x22c>
    2b80:	e7d5      	b.n	2b2e <_Z16playQuantumMatchi+0x172>
							// They pressed the start button
							goto exit;
						}
						} else {
						continue;
    2b82:	46c0      	nop			; (mov r8, r8)
					}
				}
    2b84:	e7d3      	b.n	2b2e <_Z16playQuantumMatchi+0x172>
				} else {
				// Draw game-over, noughts wins
				drawBitmap('n', 0, 0);
    2b86:	2200      	movs	r2, #0
    2b88:	2100      	movs	r1, #0
    2b8a:	206e      	movs	r0, #110	; 0x6e
    2b8c:	f7fd fb6a 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2b90:	4b1b      	ldr	r3, [pc, #108]	; (2c00 <_Z16playQuantumMatchi+0x244>)
    2b92:	0018      	movs	r0, r3
    2b94:	f004 fc7e 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    2b98:	0003      	movs	r3, r0
    2b9a:	1e5a      	subs	r2, r3, #1
    2b9c:	4193      	sbcs	r3, r2
    2b9e:	b2db      	uxtb	r3, r3
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d0f5      	beq.n	2b90 <_Z16playQuantumMatchi+0x1d4>
						TS_Point point = getPoint();
    2ba4:	230c      	movs	r3, #12
    2ba6:	18fb      	adds	r3, r7, r3
    2ba8:	0018      	movs	r0, r3
    2baa:	f7fe fbcf 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    2bae:	230c      	movs	r3, #12
    2bb0:	18fb      	adds	r3, r7, r3
    2bb2:	2200      	movs	r2, #0
    2bb4:	5e9b      	ldrsh	r3, [r3, r2]
    2bb6:	2b16      	cmp	r3, #22
    2bb8:	dd13      	ble.n	2be2 <_Z16playQuantumMatchi+0x226>
    2bba:	230c      	movs	r3, #12
    2bbc:	18fb      	adds	r3, r7, r3
    2bbe:	2200      	movs	r2, #0
    2bc0:	5e9b      	ldrsh	r3, [r3, r2]
    2bc2:	2bd7      	cmp	r3, #215	; 0xd7
    2bc4:	dc0d      	bgt.n	2be2 <_Z16playQuantumMatchi+0x226>
    2bc6:	230c      	movs	r3, #12
    2bc8:	18fb      	adds	r3, r7, r3
    2bca:	2202      	movs	r2, #2
    2bcc:	5e9b      	ldrsh	r3, [r3, r2]
    2bce:	2bb9      	cmp	r3, #185	; 0xb9
    2bd0:	dd07      	ble.n	2be2 <_Z16playQuantumMatchi+0x226>
    2bd2:	230c      	movs	r3, #12
    2bd4:	18fb      	adds	r3, r7, r3
    2bd6:	2202      	movs	r2, #2
    2bd8:	5e9a      	ldrsh	r2, [r3, r2]
    2bda:	2384      	movs	r3, #132	; 0x84
    2bdc:	005b      	lsls	r3, r3, #1
    2bde:	429a      	cmp	r2, r3
    2be0:	dd03      	ble.n	2bea <_Z16playQuantumMatchi+0x22e>
							// They pressed the start button
							goto exit;
							} else {
							continue;
    2be2:	46c0      	nop			; (mov r8, r8)
						}
					}
				}
    2be4:	e7d4      	b.n	2b90 <_Z16playQuantumMatchi+0x1d4>
	while (gamesPlayed < maxGames) {
    2be6:	e712      	b.n	2a0e <_Z16playQuantumMatchi+0x52>
							goto exit;
    2be8:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	exit:
	Serial.println("Broke while loop");
    2bea:	4a06      	ldr	r2, [pc, #24]	; (2c04 <_Z16playQuantumMatchi+0x248>)
    2bec:	4b06      	ldr	r3, [pc, #24]	; (2c08 <_Z16playQuantumMatchi+0x24c>)
    2bee:	0011      	movs	r1, r2
    2bf0:	0018      	movs	r0, r3
    2bf2:	f000 fbb5 	bl	3360 <_ZN5Print7printlnEPKc>
}
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	46bd      	mov	sp, r7
    2bfa:	b009      	add	sp, #36	; 0x24
    2bfc:	bd90      	pop	{r4, r7, pc}
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	20000320 	.word	0x20000320
    2c04:	00013528 	.word	0x00013528
    2c08:	20000e94 	.word	0x20000e94

00002c0c <setup>:

void setup() {
    2c0c:	b580      	push	{r7, lr}
    2c0e:	af00      	add	r7, sp, #0

	Serial.begin(9600);
    2c10:	2396      	movs	r3, #150	; 0x96
    2c12:	019a      	lsls	r2, r3, #6
    2c14:	4b1b      	ldr	r3, [pc, #108]	; (2c84 <setup+0x78>)
    2c16:	0011      	movs	r1, r2
    2c18:	0018      	movs	r0, r3
    2c1a:	f000 ff0b 	bl	3a34 <_ZN4Uart5beginEm>

	tftDisplay.begin();
    2c1e:	4b1a      	ldr	r3, [pc, #104]	; (2c88 <setup+0x7c>)
    2c20:	2100      	movs	r1, #0
    2c22:	0018      	movs	r0, r3
    2c24:	f004 ff4e 	bl	7ac4 <_ZN16Adafruit_ILI93415beginEm>

	if (!touchScreen.begin()) {
    2c28:	4b18      	ldr	r3, [pc, #96]	; (2c8c <setup+0x80>)
    2c2a:	2180      	movs	r1, #128	; 0x80
    2c2c:	0018      	movs	r0, r3
    2c2e:	f004 fbef 	bl	7410 <_ZN15Adafruit_FT62065beginEh>
    2c32:	0003      	movs	r3, r0
    2c34:	001a      	movs	r2, r3
    2c36:	2301      	movs	r3, #1
    2c38:	4053      	eors	r3, r2
    2c3a:	b2db      	uxtb	r3, r3
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d00c      	beq.n	2c5a <setup+0x4e>
		Serial.println(F("Couldn't start FT6206 touchscreen controller"));
    2c40:	4a13      	ldr	r2, [pc, #76]	; (2c90 <setup+0x84>)
    2c42:	4b10      	ldr	r3, [pc, #64]	; (2c84 <setup+0x78>)
    2c44:	0011      	movs	r1, r2
    2c46:	0018      	movs	r0, r3
    2c48:	f000 fb5e 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Driver might not have been found"));
    2c4c:	4a11      	ldr	r2, [pc, #68]	; (2c94 <setup+0x88>)
    2c4e:	4b0d      	ldr	r3, [pc, #52]	; (2c84 <setup+0x78>)
    2c50:	0011      	movs	r1, r2
    2c52:	0018      	movs	r0, r3
    2c54:	f000 fb58 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
		while (true);
    2c58:	e7fe      	b.n	2c58 <setup+0x4c>
	}

	if (verbose) Serial.println(F("Display and touchscreen started"));

	if (!SD.begin(SD_CS)) {
    2c5a:	4b0f      	ldr	r3, [pc, #60]	; (2c98 <setup+0x8c>)
    2c5c:	2104      	movs	r1, #4
    2c5e:	0018      	movs	r0, r3
    2c60:	f006 f92a 	bl	8eb8 <_ZN5SDLib7SDClass5beginEh>
    2c64:	0003      	movs	r3, r0
    2c66:	001a      	movs	r2, r3
    2c68:	2301      	movs	r3, #1
    2c6a:	4053      	eors	r3, r2
    2c6c:	b2db      	uxtb	r3, r3
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d005      	beq.n	2c7e <setup+0x72>
		Serial.println(F("Failed to initialise SD card"));
    2c72:	4a0a      	ldr	r2, [pc, #40]	; (2c9c <setup+0x90>)
    2c74:	4b03      	ldr	r3, [pc, #12]	; (2c84 <setup+0x78>)
    2c76:	0011      	movs	r1, r2
    2c78:	0018      	movs	r0, r3
    2c7a:	f000 fb45 	bl	3308 <_ZN5Print7printlnEPK19__FlashStringHelper>
	} else if (verbose) Serial.println(F("SD card mounted"));
}
    2c7e:	46c0      	nop			; (mov r8, r8)
    2c80:	46bd      	mov	sp, r7
    2c82:	bd80      	pop	{r7, pc}
    2c84:	20000e94 	.word	0x20000e94
    2c88:	200002bc 	.word	0x200002bc
    2c8c:	20000320 	.word	0x20000320
    2c90:	0001353c 	.word	0x0001353c
    2c94:	0001356c 	.word	0x0001356c
    2c98:	200008f4 	.word	0x200008f4
    2c9c:	00013590 	.word	0x00013590

00002ca0 <loop>:

void loop() {
    2ca0:	b590      	push	{r4, r7, lr}
    2ca2:	b08f      	sub	sp, #60	; 0x3c
    2ca4:	af00      	add	r7, sp, #0
	uint8_t maxGames = 1;
    2ca6:	2337      	movs	r3, #55	; 0x37
    2ca8:	18fb      	adds	r3, r7, r3
    2caa:	2201      	movs	r2, #1
    2cac:	701a      	strb	r2, [r3, #0]
	drawBitmap('l', 0, 0);
    2cae:	2200      	movs	r2, #0
    2cb0:	2100      	movs	r1, #0
    2cb2:	206c      	movs	r0, #108	; 0x6c
    2cb4:	f7fd fad6 	bl	264 <_Z10drawBitmapcss>
	String s = (String) maxGames;
    2cb8:	2337      	movs	r3, #55	; 0x37
    2cba:	18fb      	adds	r3, r7, r3
    2cbc:	7819      	ldrb	r1, [r3, #0]
    2cbe:	2324      	movs	r3, #36	; 0x24
    2cc0:	18fb      	adds	r3, r7, r3
    2cc2:	220a      	movs	r2, #10
    2cc4:	0018      	movs	r0, r3
    2cc6:	f004 f9fb 	bl	70c0 <_ZN6StringC1Ehh>
	char maxGamesChar = s.charAt(0);
    2cca:	2335      	movs	r3, #53	; 0x35
    2ccc:	18fc      	adds	r4, r7, r3
    2cce:	2324      	movs	r3, #36	; 0x24
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	2100      	movs	r1, #0
    2cd4:	0018      	movs	r0, r3
    2cd6:	f004 fb65 	bl	73a4 <_ZNK6String6charAtEj>
    2cda:	0003      	movs	r3, r0
    2cdc:	7023      	strb	r3, [r4, #0]
	drawBitmap(maxGamesChar, 173, 115);
    2cde:	2335      	movs	r3, #53	; 0x35
    2ce0:	18fb      	adds	r3, r7, r3
    2ce2:	781b      	ldrb	r3, [r3, #0]
    2ce4:	2273      	movs	r2, #115	; 0x73
    2ce6:	21ad      	movs	r1, #173	; 0xad
    2ce8:	0018      	movs	r0, r3
    2cea:	f7fd fabb 	bl	264 <_Z10drawBitmapcss>
	boolean quantumMatch;

	while (true) {
		if (touchScreen.touched()) {
    2cee:	4b7c      	ldr	r3, [pc, #496]	; (2ee0 <loop+0x240>)
    2cf0:	0018      	movs	r0, r3
    2cf2:	f004 fbcf 	bl	7494 <_ZN15Adafruit_FT62067touchedEv>
    2cf6:	0003      	movs	r3, r0
    2cf8:	1e5a      	subs	r2, r3, #1
    2cfa:	4193      	sbcs	r3, r2
    2cfc:	b2db      	uxtb	r3, r3
    2cfe:	2b00      	cmp	r3, #0
    2d00:	d100      	bne.n	2d04 <loop+0x64>
    2d02:	e0ce      	b.n	2ea2 <loop+0x202>
			TS_Point point = getPoint();
    2d04:	231c      	movs	r3, #28
    2d06:	18fb      	adds	r3, r7, r3
    2d08:	0018      	movs	r0, r3
    2d0a:	f7fe fb1f 	bl	134c <_Z8getPointv>
			if (point.x > 20 && point.x < 220 && point.y > 240 && point.y < 315) {
    2d0e:	231c      	movs	r3, #28
    2d10:	18fb      	adds	r3, r7, r3
    2d12:	2200      	movs	r2, #0
    2d14:	5e9b      	ldrsh	r3, [r3, r2]
    2d16:	2b14      	cmp	r3, #20
    2d18:	dd18      	ble.n	2d4c <loop+0xac>
    2d1a:	231c      	movs	r3, #28
    2d1c:	18fb      	adds	r3, r7, r3
    2d1e:	2200      	movs	r2, #0
    2d20:	5e9b      	ldrsh	r3, [r3, r2]
    2d22:	2bdb      	cmp	r3, #219	; 0xdb
    2d24:	dc12      	bgt.n	2d4c <loop+0xac>
    2d26:	231c      	movs	r3, #28
    2d28:	18fb      	adds	r3, r7, r3
    2d2a:	2202      	movs	r2, #2
    2d2c:	5e9b      	ldrsh	r3, [r3, r2]
    2d2e:	2bf0      	cmp	r3, #240	; 0xf0
    2d30:	dd0c      	ble.n	2d4c <loop+0xac>
    2d32:	231c      	movs	r3, #28
    2d34:	18fb      	adds	r3, r7, r3
    2d36:	2202      	movs	r2, #2
    2d38:	5e9a      	ldrsh	r2, [r3, r2]
    2d3a:	239d      	movs	r3, #157	; 0x9d
    2d3c:	005b      	lsls	r3, r3, #1
    2d3e:	429a      	cmp	r2, r3
    2d40:	dc04      	bgt.n	2d4c <loop+0xac>
				// They pressed the quantum button
				quantumMatch = true;
    2d42:	2336      	movs	r3, #54	; 0x36
    2d44:	18fb      	adds	r3, r7, r3
    2d46:	2201      	movs	r2, #1
    2d48:	701a      	strb	r2, [r3, #0]
				break;
    2d4a:	e0a4      	b.n	2e96 <loop+0x1f6>
			} else if (point.x > 20 && point.x < 220 && point.y > 170 && point.y < 241) {
    2d4c:	231c      	movs	r3, #28
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	2200      	movs	r2, #0
    2d52:	5e9b      	ldrsh	r3, [r3, r2]
    2d54:	2b14      	cmp	r3, #20
    2d56:	dd16      	ble.n	2d86 <loop+0xe6>
    2d58:	231c      	movs	r3, #28
    2d5a:	18fb      	adds	r3, r7, r3
    2d5c:	2200      	movs	r2, #0
    2d5e:	5e9b      	ldrsh	r3, [r3, r2]
    2d60:	2bdb      	cmp	r3, #219	; 0xdb
    2d62:	dc10      	bgt.n	2d86 <loop+0xe6>
    2d64:	231c      	movs	r3, #28
    2d66:	18fb      	adds	r3, r7, r3
    2d68:	2202      	movs	r2, #2
    2d6a:	5e9b      	ldrsh	r3, [r3, r2]
    2d6c:	2baa      	cmp	r3, #170	; 0xaa
    2d6e:	dd0a      	ble.n	2d86 <loop+0xe6>
    2d70:	231c      	movs	r3, #28
    2d72:	18fb      	adds	r3, r7, r3
    2d74:	2202      	movs	r2, #2
    2d76:	5e9b      	ldrsh	r3, [r3, r2]
    2d78:	2bf0      	cmp	r3, #240	; 0xf0
    2d7a:	dc04      	bgt.n	2d86 <loop+0xe6>
				// They pressed the classic button
				quantumMatch = false;
    2d7c:	2336      	movs	r3, #54	; 0x36
    2d7e:	18fb      	adds	r3, r7, r3
    2d80:	2200      	movs	r2, #0
    2d82:	701a      	strb	r2, [r3, #0]
				break;
    2d84:	e087      	b.n	2e96 <loop+0x1f6>
			} else if (point.x > 105 && point.x < 181 && point.y > 90 && point.y < 171) {
    2d86:	231c      	movs	r3, #28
    2d88:	18fb      	adds	r3, r7, r3
    2d8a:	2200      	movs	r2, #0
    2d8c:	5e9b      	ldrsh	r3, [r3, r2]
    2d8e:	2b69      	cmp	r3, #105	; 0x69
    2d90:	dd3f      	ble.n	2e12 <loop+0x172>
    2d92:	231c      	movs	r3, #28
    2d94:	18fb      	adds	r3, r7, r3
    2d96:	2200      	movs	r2, #0
    2d98:	5e9b      	ldrsh	r3, [r3, r2]
    2d9a:	2bb4      	cmp	r3, #180	; 0xb4
    2d9c:	dc39      	bgt.n	2e12 <loop+0x172>
    2d9e:	231c      	movs	r3, #28
    2da0:	18fb      	adds	r3, r7, r3
    2da2:	2202      	movs	r2, #2
    2da4:	5e9b      	ldrsh	r3, [r3, r2]
    2da6:	2b5a      	cmp	r3, #90	; 0x5a
    2da8:	dd33      	ble.n	2e12 <loop+0x172>
    2daa:	231c      	movs	r3, #28
    2dac:	18fb      	adds	r3, r7, r3
    2dae:	2202      	movs	r2, #2
    2db0:	5e9b      	ldrsh	r3, [r3, r2]
    2db2:	2baa      	cmp	r3, #170	; 0xaa
    2db4:	dc2d      	bgt.n	2e12 <loop+0x172>
				// They pressed the left "best of:" button
				if (maxGames != 1) {
    2db6:	2337      	movs	r3, #55	; 0x37
    2db8:	18fb      	adds	r3, r7, r3
    2dba:	781b      	ldrb	r3, [r3, #0]
    2dbc:	2b01      	cmp	r3, #1
    2dbe:	d100      	bne.n	2dc2 <loop+0x122>
    2dc0:	e071      	b.n	2ea6 <loop+0x206>
					maxGames -= 2;
    2dc2:	2337      	movs	r3, #55	; 0x37
    2dc4:	18fb      	adds	r3, r7, r3
    2dc6:	2237      	movs	r2, #55	; 0x37
    2dc8:	18ba      	adds	r2, r7, r2
    2dca:	7812      	ldrb	r2, [r2, #0]
    2dcc:	3a02      	subs	r2, #2
    2dce:	701a      	strb	r2, [r3, #0]
					// Update score
					String s = (String) maxGames;
    2dd0:	2337      	movs	r3, #55	; 0x37
    2dd2:	18fb      	adds	r3, r7, r3
    2dd4:	7819      	ldrb	r1, [r3, #0]
    2dd6:	2310      	movs	r3, #16
    2dd8:	18fb      	adds	r3, r7, r3
    2dda:	220a      	movs	r2, #10
    2ddc:	0018      	movs	r0, r3
    2dde:	f004 f96f 	bl	70c0 <_ZN6StringC1Ehh>
					char maxGamesChar = s.charAt(0);
    2de2:	2334      	movs	r3, #52	; 0x34
    2de4:	18fc      	adds	r4, r7, r3
    2de6:	2310      	movs	r3, #16
    2de8:	18fb      	adds	r3, r7, r3
    2dea:	2100      	movs	r1, #0
    2dec:	0018      	movs	r0, r3
    2dee:	f004 fad9 	bl	73a4 <_ZNK6String6charAtEj>
    2df2:	0003      	movs	r3, r0
    2df4:	7023      	strb	r3, [r4, #0]
					drawBitmap(maxGamesChar, 173, 115);
    2df6:	2334      	movs	r3, #52	; 0x34
    2df8:	18fb      	adds	r3, r7, r3
    2dfa:	781b      	ldrb	r3, [r3, #0]
    2dfc:	2273      	movs	r2, #115	; 0x73
    2dfe:	21ad      	movs	r1, #173	; 0xad
    2e00:	0018      	movs	r0, r3
    2e02:	f7fd fa2f 	bl	264 <_Z10drawBitmapcss>
					String s = (String) maxGames;
    2e06:	2310      	movs	r3, #16
    2e08:	18fb      	adds	r3, r7, r3
    2e0a:	0018      	movs	r0, r3
    2e0c:	f004 f99c 	bl	7148 <_ZN6StringD1Ev>
				}
				continue;
    2e10:	e049      	b.n	2ea6 <loop+0x206>
			} else if (point.x > 180 && point.x < 241 && point.y > 90 && point.y < 171) {
    2e12:	231c      	movs	r3, #28
    2e14:	18fb      	adds	r3, r7, r3
    2e16:	2200      	movs	r2, #0
    2e18:	5e9b      	ldrsh	r3, [r3, r2]
    2e1a:	2bb4      	cmp	r3, #180	; 0xb4
    2e1c:	dd45      	ble.n	2eaa <loop+0x20a>
    2e1e:	231c      	movs	r3, #28
    2e20:	18fb      	adds	r3, r7, r3
    2e22:	2200      	movs	r2, #0
    2e24:	5e9b      	ldrsh	r3, [r3, r2]
    2e26:	2bf0      	cmp	r3, #240	; 0xf0
    2e28:	dc3f      	bgt.n	2eaa <loop+0x20a>
    2e2a:	231c      	movs	r3, #28
    2e2c:	18fb      	adds	r3, r7, r3
    2e2e:	2202      	movs	r2, #2
    2e30:	5e9b      	ldrsh	r3, [r3, r2]
    2e32:	2b5a      	cmp	r3, #90	; 0x5a
    2e34:	dd39      	ble.n	2eaa <loop+0x20a>
    2e36:	231c      	movs	r3, #28
    2e38:	18fb      	adds	r3, r7, r3
    2e3a:	2202      	movs	r2, #2
    2e3c:	5e9b      	ldrsh	r3, [r3, r2]
    2e3e:	2baa      	cmp	r3, #170	; 0xaa
    2e40:	dc33      	bgt.n	2eaa <loop+0x20a>
				// They pressed the left "best of:" button
				if (maxGames != 9) {
    2e42:	2337      	movs	r3, #55	; 0x37
    2e44:	18fb      	adds	r3, r7, r3
    2e46:	781b      	ldrb	r3, [r3, #0]
    2e48:	2b09      	cmp	r3, #9
    2e4a:	d030      	beq.n	2eae <loop+0x20e>
					maxGames += 2;
    2e4c:	2337      	movs	r3, #55	; 0x37
    2e4e:	18fb      	adds	r3, r7, r3
    2e50:	2237      	movs	r2, #55	; 0x37
    2e52:	18ba      	adds	r2, r7, r2
    2e54:	7812      	ldrb	r2, [r2, #0]
    2e56:	3202      	adds	r2, #2
    2e58:	701a      	strb	r2, [r3, #0]
					// Update score
					String s = (String) maxGames;
    2e5a:	2337      	movs	r3, #55	; 0x37
    2e5c:	18fb      	adds	r3, r7, r3
    2e5e:	7819      	ldrb	r1, [r3, #0]
    2e60:	1d3b      	adds	r3, r7, #4
    2e62:	220a      	movs	r2, #10
    2e64:	0018      	movs	r0, r3
    2e66:	f004 f92b 	bl	70c0 <_ZN6StringC1Ehh>
					char maxGamesChar = s.charAt(0);
    2e6a:	2333      	movs	r3, #51	; 0x33
    2e6c:	18fc      	adds	r4, r7, r3
    2e6e:	1d3b      	adds	r3, r7, #4
    2e70:	2100      	movs	r1, #0
    2e72:	0018      	movs	r0, r3
    2e74:	f004 fa96 	bl	73a4 <_ZNK6String6charAtEj>
    2e78:	0003      	movs	r3, r0
    2e7a:	7023      	strb	r3, [r4, #0]
					drawBitmap(maxGamesChar, 173, 115);
    2e7c:	2333      	movs	r3, #51	; 0x33
    2e7e:	18fb      	adds	r3, r7, r3
    2e80:	781b      	ldrb	r3, [r3, #0]
    2e82:	2273      	movs	r2, #115	; 0x73
    2e84:	21ad      	movs	r1, #173	; 0xad
    2e86:	0018      	movs	r0, r3
    2e88:	f7fd f9ec 	bl	264 <_Z10drawBitmapcss>
					String s = (String) maxGames;
    2e8c:	1d3b      	adds	r3, r7, #4
    2e8e:	0018      	movs	r0, r3
    2e90:	f004 f95a 	bl	7148 <_ZN6StringD1Ev>
				}
				continue;
    2e94:	e00b      	b.n	2eae <loop+0x20e>
		} else {
			continue;
		}
	}
	
	if (quantumMatch) {
    2e96:	2336      	movs	r3, #54	; 0x36
    2e98:	18fb      	adds	r3, r7, r3
    2e9a:	781b      	ldrb	r3, [r3, #0]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d108      	bne.n	2eb2 <loop+0x212>
    2ea0:	e00e      	b.n	2ec0 <loop+0x220>
			continue;
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	e723      	b.n	2cee <loop+0x4e>
				continue;
    2ea6:	46c0      	nop			; (mov r8, r8)
    2ea8:	e721      	b.n	2cee <loop+0x4e>
				continue;
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	e71f      	b.n	2cee <loop+0x4e>
				continue;
    2eae:	46c0      	nop			; (mov r8, r8)
	}
    2eb0:	e71d      	b.n	2cee <loop+0x4e>
		playQuantumMatch(maxGames);
    2eb2:	2337      	movs	r3, #55	; 0x37
    2eb4:	18fb      	adds	r3, r7, r3
    2eb6:	781b      	ldrb	r3, [r3, #0]
    2eb8:	0018      	movs	r0, r3
    2eba:	f7ff fd7f 	bl	29bc <_Z16playQuantumMatchi>
    2ebe:	e005      	b.n	2ecc <loop+0x22c>
		} else {
		playMatch(maxGames);
    2ec0:	2337      	movs	r3, #55	; 0x37
    2ec2:	18fb      	adds	r3, r7, r3
    2ec4:	781b      	ldrb	r3, [r3, #0]
    2ec6:	0018      	movs	r0, r3
    2ec8:	f7ff fc50 	bl	276c <_Z9playMatchi>
	String s = (String) maxGames;
    2ecc:	2324      	movs	r3, #36	; 0x24
    2ece:	18fb      	adds	r3, r7, r3
    2ed0:	0018      	movs	r0, r3
    2ed2:	f004 f939 	bl	7148 <_ZN6StringD1Ev>
	}
    2ed6:	46c0      	nop			; (mov r8, r8)
    2ed8:	46bd      	mov	sp, r7
    2eda:	b00f      	add	sp, #60	; 0x3c
    2edc:	bd90      	pop	{r4, r7, pc}
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	20000320 	.word	0x20000320

00002ee4 <_Z41__static_initialization_and_destruction_0ii>:
    2ee4:	b580      	push	{r7, lr}
    2ee6:	b082      	sub	sp, #8
    2ee8:	af00      	add	r7, sp, #0
    2eea:	6078      	str	r0, [r7, #4]
    2eec:	6039      	str	r1, [r7, #0]
    2eee:	687b      	ldr	r3, [r7, #4]
    2ef0:	2b01      	cmp	r3, #1
    2ef2:	d10e      	bne.n	2f12 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    2ef4:	683b      	ldr	r3, [r7, #0]
    2ef6:	4a09      	ldr	r2, [pc, #36]	; (2f1c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2ef8:	4293      	cmp	r3, r2
    2efa:	d10a      	bne.n	2f12 <_Z41__static_initialization_and_destruction_0ii+0x2e>
Adafruit_ILI9341 tftDisplay = Adafruit_ILI9341(tftDisplay_CS, tftDisplay_DC);
    2efc:	2301      	movs	r3, #1
    2efe:	425b      	negs	r3, r3
    2f00:	4807      	ldr	r0, [pc, #28]	; (2f20 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2f02:	2209      	movs	r2, #9
    2f04:	210a      	movs	r1, #10
    2f06:	f004 fd47 	bl	7998 <_ZN16Adafruit_ILI9341C1Eaaa>
Adafruit_FT6206 touchScreen = Adafruit_FT6206();
    2f0a:	4b06      	ldr	r3, [pc, #24]	; (2f24 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2f0c:	0018      	movs	r0, r3
    2f0e:	f004 fa72 	bl	73f6 <_ZN15Adafruit_FT6206C1Ev>
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	46bd      	mov	sp, r7
    2f16:	b002      	add	sp, #8
    2f18:	bd80      	pop	{r7, pc}
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	0000ffff 	.word	0x0000ffff
    2f20:	200002bc 	.word	0x200002bc
    2f24:	20000320 	.word	0x20000320

00002f28 <_GLOBAL__sub_I_tftDisplay>:
    2f28:	b580      	push	{r7, lr}
    2f2a:	af00      	add	r7, sp, #0
    2f2c:	4b03      	ldr	r3, [pc, #12]	; (2f3c <_GLOBAL__sub_I_tftDisplay+0x14>)
    2f2e:	0019      	movs	r1, r3
    2f30:	2001      	movs	r0, #1
    2f32:	f7ff ffd7 	bl	2ee4 <_Z41__static_initialization_and_destruction_0ii>
    2f36:	46bd      	mov	sp, r7
    2f38:	bd80      	pop	{r7, pc}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	0000ffff 	.word	0x0000ffff

00002f40 <Dummy_Handler>:
extern void pendSVHook(void);
extern int sysTickHook(void);

/* Default empty handler */
void Dummy_Handler(void)
{
    2f40:	b580      	push	{r7, lr}
    2f42:	af00      	add	r7, sp, #0
#if defined DEBUG
  __BKPT(3);
    2f44:	be03      	bkpt	0x0003
#endif
  for (;;) { }
    2f46:	e7fe      	b.n	2f46 <Dummy_Handler+0x6>

00002f48 <Reset_Handler>:

extern int main(void);

/* This is called on processor reset to initialize the device and call main() */
void Reset_Handler(void)
{
    2f48:	b580      	push	{r7, lr}
    2f4a:	b082      	sub	sp, #8
    2f4c:	af00      	add	r7, sp, #0
  uint32_t *pSrc, *pDest;

  /* Initialize the initialized data section */
  pSrc = &__etext;
    2f4e:	4b1a      	ldr	r3, [pc, #104]	; (2fb8 <Reset_Handler+0x70>)
    2f50:	607b      	str	r3, [r7, #4]
  pDest = &__data_start__;
    2f52:	4b1a      	ldr	r3, [pc, #104]	; (2fbc <Reset_Handler+0x74>)
    2f54:	603b      	str	r3, [r7, #0]

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2f56:	4a19      	ldr	r2, [pc, #100]	; (2fbc <Reset_Handler+0x74>)
    2f58:	4b19      	ldr	r3, [pc, #100]	; (2fc0 <Reset_Handler+0x78>)
    2f5a:	429a      	cmp	r2, r3
    2f5c:	d012      	beq.n	2f84 <Reset_Handler+0x3c>
    2f5e:	687a      	ldr	r2, [r7, #4]
    2f60:	683b      	ldr	r3, [r7, #0]
    2f62:	429a      	cmp	r2, r3
    2f64:	d00e      	beq.n	2f84 <Reset_Handler+0x3c>
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2f66:	e009      	b.n	2f7c <Reset_Handler+0x34>
      *pDest = *pSrc;
    2f68:	687b      	ldr	r3, [r7, #4]
    2f6a:	681a      	ldr	r2, [r3, #0]
    2f6c:	683b      	ldr	r3, [r7, #0]
    2f6e:	601a      	str	r2, [r3, #0]
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2f70:	683b      	ldr	r3, [r7, #0]
    2f72:	3304      	adds	r3, #4
    2f74:	603b      	str	r3, [r7, #0]
    2f76:	687b      	ldr	r3, [r7, #4]
    2f78:	3304      	adds	r3, #4
    2f7a:	607b      	str	r3, [r7, #4]
    2f7c:	683a      	ldr	r2, [r7, #0]
    2f7e:	4b10      	ldr	r3, [pc, #64]	; (2fc0 <Reset_Handler+0x78>)
    2f80:	429a      	cmp	r2, r3
    2f82:	d3f1      	bcc.n	2f68 <Reset_Handler+0x20>
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2f84:	4a0d      	ldr	r2, [pc, #52]	; (2fbc <Reset_Handler+0x74>)
    2f86:	4b0e      	ldr	r3, [pc, #56]	; (2fc0 <Reset_Handler+0x78>)
    2f88:	429a      	cmp	r2, r3
    2f8a:	d010      	beq.n	2fae <Reset_Handler+0x66>
    2f8c:	687a      	ldr	r2, [r7, #4]
    2f8e:	683b      	ldr	r3, [r7, #0]
    2f90:	429a      	cmp	r2, r3
    2f92:	d00c      	beq.n	2fae <Reset_Handler+0x66>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2f94:	4b0b      	ldr	r3, [pc, #44]	; (2fc4 <Reset_Handler+0x7c>)
    2f96:	603b      	str	r3, [r7, #0]
    2f98:	e005      	b.n	2fa6 <Reset_Handler+0x5e>
      *pDest = 0;
    2f9a:	683b      	ldr	r3, [r7, #0]
    2f9c:	2200      	movs	r2, #0
    2f9e:	601a      	str	r2, [r3, #0]
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2fa0:	683b      	ldr	r3, [r7, #0]
    2fa2:	3304      	adds	r3, #4
    2fa4:	603b      	str	r3, [r7, #0]
    2fa6:	683a      	ldr	r2, [r7, #0]
    2fa8:	4b07      	ldr	r3, [pc, #28]	; (2fc8 <Reset_Handler+0x80>)
    2faa:	429a      	cmp	r2, r3
    2fac:	d3f5      	bcc.n	2f9a <Reset_Handler+0x52>
  }

  SystemInit();
    2fae:	f000 fb09 	bl	35c4 <SystemInit>

  main();
    2fb2:	f000 f875 	bl	30a0 <main>

  while (1)
    2fb6:	e7fe      	b.n	2fb6 <Reset_Handler+0x6e>
    2fb8:	000146bc 	.word	0x000146bc
    2fbc:	20000000 	.word	0x20000000
    2fc0:	200002a0 	.word	0x200002a0
    2fc4:	200002a0 	.word	0x200002a0
    2fc8:	20000f88 	.word	0x20000f88

00002fcc <SysTick_Handler>:

/* Default Arduino systick handler */
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
    2fcc:	b580      	push	{r7, lr}
    2fce:	af00      	add	r7, sp, #0
  if (sysTickHook())
    2fd0:	f000 f85b 	bl	308a <sysTickHook>
    2fd4:	1e03      	subs	r3, r0, #0
    2fd6:	d102      	bne.n	2fde <SysTick_Handler+0x12>
    return;
  SysTick_DefaultHandler();
    2fd8:	f000 f844 	bl	3064 <SysTick_DefaultHandler>
    2fdc:	e000      	b.n	2fe0 <SysTick_Handler+0x14>
    return;
    2fde:	46c0      	nop			; (mov r8, r8)
}
    2fe0:	46bd      	mov	sp, r7
    2fe2:	bd80      	pop	{r7, pc}

00002fe4 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
    2fe4:	b580      	push	{r7, lr}
    2fe6:	af00      	add	r7, sp, #0
  if (usb_isr)
    2fe8:	4b04      	ldr	r3, [pc, #16]	; (2ffc <USB_Handler+0x18>)
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d002      	beq.n	2ff6 <USB_Handler+0x12>
    usb_isr();
    2ff0:	4b02      	ldr	r3, [pc, #8]	; (2ffc <USB_Handler+0x18>)
    2ff2:	681b      	ldr	r3, [r3, #0]
    2ff4:	4798      	blx	r3
}
    2ff6:	46c0      	nop			; (mov r8, r8)
    2ff8:	46bd      	mov	sp, r7
    2ffa:	bd80      	pop	{r7, pc}
    2ffc:	20000330 	.word	0x20000330

00003000 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
    3000:	b580      	push	{r7, lr}
    3002:	b082      	sub	sp, #8
    3004:	af00      	add	r7, sp, #0
    3006:	6078      	str	r0, [r7, #4]
  usb_isr = new_usb_isr;
    3008:	4b03      	ldr	r3, [pc, #12]	; (3018 <USB_SetHandler+0x18>)
    300a:	687a      	ldr	r2, [r7, #4]
    300c:	601a      	str	r2, [r3, #0]
}
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	46bd      	mov	sp, r7
    3012:	b002      	add	sp, #8
    3014:	bd80      	pop	{r7, pc}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	20000330 	.word	0x20000330

0000301c <millis>:

/** Tick Counter united by ms */
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
    301c:	b580      	push	{r7, lr}
    301e:	af00      	add	r7, sp, #0
// todo: ensure no interrupts
  return _ulTickCount ;
    3020:	4b02      	ldr	r3, [pc, #8]	; (302c <millis+0x10>)
    3022:	681b      	ldr	r3, [r3, #0]
}
    3024:	0018      	movs	r0, r3
    3026:	46bd      	mov	sp, r7
    3028:	bd80      	pop	{r7, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	20000334 	.word	0x20000334

00003030 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
    3030:	b580      	push	{r7, lr}
    3032:	b084      	sub	sp, #16
    3034:	af00      	add	r7, sp, #0
    3036:	6078      	str	r0, [r7, #4]
  if ( ms == 0 )
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	2b00      	cmp	r3, #0
    303c:	d00c      	beq.n	3058 <delay+0x28>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
    303e:	4b08      	ldr	r3, [pc, #32]	; (3060 <delay+0x30>)
    3040:	681b      	ldr	r3, [r3, #0]
    3042:	60fb      	str	r3, [r7, #12]

  do
  {
    yield() ;
    3044:	f000 f81c 	bl	3080 <yield>
  } while ( _ulTickCount - start < ms ) ;
    3048:	4b05      	ldr	r3, [pc, #20]	; (3060 <delay+0x30>)
    304a:	681a      	ldr	r2, [r3, #0]
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	1ad2      	subs	r2, r2, r3
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	429a      	cmp	r2, r3
    3054:	d3f6      	bcc.n	3044 <delay+0x14>
    3056:	e000      	b.n	305a <delay+0x2a>
    return ;
    3058:	46c0      	nop			; (mov r8, r8)
}
    305a:	46bd      	mov	sp, r7
    305c:	b004      	add	sp, #16
    305e:	bd80      	pop	{r7, pc}
    3060:	20000334 	.word	0x20000334

00003064 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    3064:	b580      	push	{r7, lr}
    3066:	af00      	add	r7, sp, #0
  // Increment tick count each ms
  _ulTickCount++;
    3068:	4b04      	ldr	r3, [pc, #16]	; (307c <SysTick_DefaultHandler+0x18>)
    306a:	681b      	ldr	r3, [r3, #0]
    306c:	1c5a      	adds	r2, r3, #1
    306e:	4b03      	ldr	r3, [pc, #12]	; (307c <SysTick_DefaultHandler+0x18>)
    3070:	601a      	str	r2, [r3, #0]
  tickReset();
    3072:	f000 fa8d 	bl	3590 <tickReset>
}
    3076:	46c0      	nop			; (mov r8, r8)
    3078:	46bd      	mov	sp, r7
    307a:	bd80      	pop	{r7, pc}
    307c:	20000334 	.word	0x20000334

00003080 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3080:	b580      	push	{r7, lr}
    3082:	af00      	add	r7, sp, #0
	// Empty
}
    3084:	46c0      	nop			; (mov r8, r8)
    3086:	46bd      	mov	sp, r7
    3088:	bd80      	pop	{r7, pc}

0000308a <sysTickHook>:
 * SysTick hook
 *
 * This function is called from SysTick handler, before the default
 * handler provided by Arduino.
 */
static int __false() {
    308a:	b580      	push	{r7, lr}
    308c:	af00      	add	r7, sp, #0
	// Return false
	return 0;
    308e:	2300      	movs	r3, #0
}
    3090:	0018      	movs	r0, r3
    3092:	46bd      	mov	sp, r7
    3094:	bd80      	pop	{r7, pc}

00003096 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    3096:	b580      	push	{r7, lr}
    3098:	af00      	add	r7, sp, #0
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	46bd      	mov	sp, r7
    309e:	bd80      	pop	{r7, pc}

000030a0 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    30a0:	b580      	push	{r7, lr}
    30a2:	af00      	add	r7, sp, #0
  init();
    30a4:	f003 fbf0 	bl	6888 <init>

  __libc_init_array();
    30a8:	f00d fc6c 	bl	10984 <__libc_init_array>

  initVariant();
    30ac:	f7ff fff3 	bl	3096 <_Z11initVariantv>

  delay(1);
    30b0:	2001      	movs	r0, #1
    30b2:	f7ff ffbd 	bl	3030 <delay>
#if defined(USBCON)
  USBDevice.init();
    30b6:	4b09      	ldr	r3, [pc, #36]	; (30dc <main+0x3c>)
    30b8:	0018      	movs	r0, r3
    30ba:	f002 fba1 	bl	5800 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    30be:	4b07      	ldr	r3, [pc, #28]	; (30dc <main+0x3c>)
    30c0:	0018      	movs	r0, r3
    30c2:	f002 fc37 	bl	5934 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    30c6:	f7ff fda1 	bl	2c0c <setup>

  for (;;)
  {
    loop();
    30ca:	f7ff fde9 	bl	2ca0 <loop>
    if (serialEventRun) serialEventRun();
    30ce:	4b04      	ldr	r3, [pc, #16]	; (30e0 <main+0x40>)
    30d0:	2b00      	cmp	r3, #0
    30d2:	d0fa      	beq.n	30ca <main+0x2a>
    30d4:	e000      	b.n	30d8 <main+0x38>
    30d6:	bf00      	nop
    loop();
    30d8:	e7f7      	b.n	30ca <main+0x2a>
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	200008f0 	.word	0x200008f0
    30e0:	00000000 	.word	0x00000000

000030e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    30e4:	b590      	push	{r4, r7, lr}
    30e6:	b083      	sub	sp, #12
    30e8:	af00      	add	r7, sp, #0
    30ea:	6078      	str	r0, [r7, #4]
    30ec:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    30ee:	683b      	ldr	r3, [r7, #0]
    30f0:	2b00      	cmp	r3, #0
    30f2:	d101      	bne.n	30f8 <_ZN5Print5writeEPKc+0x14>
    30f4:	2300      	movs	r3, #0
    30f6:	e00d      	b.n	3114 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    30f8:	687b      	ldr	r3, [r7, #4]
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	3304      	adds	r3, #4
    30fe:	681c      	ldr	r4, [r3, #0]
    3100:	683b      	ldr	r3, [r7, #0]
    3102:	0018      	movs	r0, r3
    3104:	f00e fb36 	bl	11774 <strlen>
    3108:	0002      	movs	r2, r0
    310a:	6839      	ldr	r1, [r7, #0]
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	0018      	movs	r0, r3
    3110:	47a0      	blx	r4
    3112:	0003      	movs	r3, r0
    }
    3114:	0018      	movs	r0, r3
    3116:	46bd      	mov	sp, r7
    3118:	b003      	add	sp, #12
    311a:	bd90      	pop	{r4, r7, pc}

0000311c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    311c:	b580      	push	{r7, lr}
    311e:	b082      	sub	sp, #8
    3120:	af00      	add	r7, sp, #0
    3122:	6078      	str	r0, [r7, #4]
    3124:	2300      	movs	r3, #0
    3126:	0018      	movs	r0, r3
    3128:	46bd      	mov	sp, r7
    312a:	b002      	add	sp, #8
    312c:	bd80      	pop	{r7, pc}

0000312e <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    312e:	b580      	push	{r7, lr}
    3130:	b082      	sub	sp, #8
    3132:	af00      	add	r7, sp, #0
    3134:	6078      	str	r0, [r7, #4]
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	46bd      	mov	sp, r7
    313a:	b002      	add	sp, #8
    313c:	bd80      	pop	{r7, pc}

0000313e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    313e:	b580      	push	{r7, lr}
    3140:	b086      	sub	sp, #24
    3142:	af00      	add	r7, sp, #0
    3144:	60f8      	str	r0, [r7, #12]
    3146:	60b9      	str	r1, [r7, #8]
    3148:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    314a:	2300      	movs	r3, #0
    314c:	617b      	str	r3, [r7, #20]
  while (size--) {
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	1e5a      	subs	r2, r3, #1
    3152:	607a      	str	r2, [r7, #4]
    3154:	1e5a      	subs	r2, r3, #1
    3156:	4193      	sbcs	r3, r2
    3158:	b2db      	uxtb	r3, r3
    315a:	2b00      	cmp	r3, #0
    315c:	d014      	beq.n	3188 <_ZN5Print5writeEPKhj+0x4a>
    if (write(*buffer++)) n++;
    315e:	68fb      	ldr	r3, [r7, #12]
    3160:	681b      	ldr	r3, [r3, #0]
    3162:	681a      	ldr	r2, [r3, #0]
    3164:	68bb      	ldr	r3, [r7, #8]
    3166:	1c59      	adds	r1, r3, #1
    3168:	60b9      	str	r1, [r7, #8]
    316a:	7819      	ldrb	r1, [r3, #0]
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	0018      	movs	r0, r3
    3170:	4790      	blx	r2
    3172:	0003      	movs	r3, r0
    3174:	1e5a      	subs	r2, r3, #1
    3176:	4193      	sbcs	r3, r2
    3178:	b2db      	uxtb	r3, r3
    317a:	2b00      	cmp	r3, #0
    317c:	d003      	beq.n	3186 <_ZN5Print5writeEPKhj+0x48>
    317e:	697b      	ldr	r3, [r7, #20]
    3180:	3301      	adds	r3, #1
    3182:	617b      	str	r3, [r7, #20]
  while (size--) {
    3184:	e7e3      	b.n	314e <_ZN5Print5writeEPKhj+0x10>
    else break;
    3186:	46c0      	nop			; (mov r8, r8)
  }
  return n;
    3188:	697b      	ldr	r3, [r7, #20]
}
    318a:	0018      	movs	r0, r3
    318c:	46bd      	mov	sp, r7
    318e:	b006      	add	sp, #24
    3190:	bd80      	pop	{r7, pc}

00003192 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    3192:	b580      	push	{r7, lr}
    3194:	b082      	sub	sp, #8
    3196:	af00      	add	r7, sp, #0
    3198:	6078      	str	r0, [r7, #4]
    319a:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
    319c:	683a      	ldr	r2, [r7, #0]
    319e:	687b      	ldr	r3, [r7, #4]
    31a0:	0011      	movs	r1, r2
    31a2:	0018      	movs	r0, r3
    31a4:	f000 f805 	bl	31b2 <_ZN5Print5printEPKc>
    31a8:	0003      	movs	r3, r0
}
    31aa:	0018      	movs	r0, r3
    31ac:	46bd      	mov	sp, r7
    31ae:	b002      	add	sp, #8
    31b0:	bd80      	pop	{r7, pc}

000031b2 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    31b2:	b580      	push	{r7, lr}
    31b4:	b082      	sub	sp, #8
    31b6:	af00      	add	r7, sp, #0
    31b8:	6078      	str	r0, [r7, #4]
    31ba:	6039      	str	r1, [r7, #0]
  return write(str);
    31bc:	683a      	ldr	r2, [r7, #0]
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	0011      	movs	r1, r2
    31c2:	0018      	movs	r0, r3
    31c4:	f7ff ff8e 	bl	30e4 <_ZN5Print5writeEPKc>
    31c8:	0003      	movs	r3, r0
}
    31ca:	0018      	movs	r0, r3
    31cc:	46bd      	mov	sp, r7
    31ce:	b002      	add	sp, #8
    31d0:	bd80      	pop	{r7, pc}

000031d2 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    31d2:	b580      	push	{r7, lr}
    31d4:	b082      	sub	sp, #8
    31d6:	af00      	add	r7, sp, #0
    31d8:	6078      	str	r0, [r7, #4]
    31da:	000a      	movs	r2, r1
    31dc:	1cfb      	adds	r3, r7, #3
    31de:	701a      	strb	r2, [r3, #0]
  return write(c);
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	681b      	ldr	r3, [r3, #0]
    31e6:	1cfa      	adds	r2, r7, #3
    31e8:	7811      	ldrb	r1, [r2, #0]
    31ea:	687a      	ldr	r2, [r7, #4]
    31ec:	0010      	movs	r0, r2
    31ee:	4798      	blx	r3
    31f0:	0003      	movs	r3, r0
}
    31f2:	0018      	movs	r0, r3
    31f4:	46bd      	mov	sp, r7
    31f6:	b002      	add	sp, #8
    31f8:	bd80      	pop	{r7, pc}

000031fa <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
    31fa:	b580      	push	{r7, lr}
    31fc:	b084      	sub	sp, #16
    31fe:	af00      	add	r7, sp, #0
    3200:	60f8      	str	r0, [r7, #12]
    3202:	607a      	str	r2, [r7, #4]
    3204:	230b      	movs	r3, #11
    3206:	18fb      	adds	r3, r7, r3
    3208:	1c0a      	adds	r2, r1, #0
    320a:	701a      	strb	r2, [r3, #0]
  return print((unsigned long) b, base);
    320c:	230b      	movs	r3, #11
    320e:	18fb      	adds	r3, r7, r3
    3210:	7819      	ldrb	r1, [r3, #0]
    3212:	687a      	ldr	r2, [r7, #4]
    3214:	68fb      	ldr	r3, [r7, #12]
    3216:	0018      	movs	r0, r3
    3218:	f000 f857 	bl	32ca <_ZN5Print5printEmi>
    321c:	0003      	movs	r3, r0
}
    321e:	0018      	movs	r0, r3
    3220:	46bd      	mov	sp, r7
    3222:	b004      	add	sp, #16
    3224:	bd80      	pop	{r7, pc}

00003226 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    3226:	b580      	push	{r7, lr}
    3228:	b084      	sub	sp, #16
    322a:	af00      	add	r7, sp, #0
    322c:	60f8      	str	r0, [r7, #12]
    322e:	60b9      	str	r1, [r7, #8]
    3230:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    3232:	687a      	ldr	r2, [r7, #4]
    3234:	68b9      	ldr	r1, [r7, #8]
    3236:	68fb      	ldr	r3, [r7, #12]
    3238:	0018      	movs	r0, r3
    323a:	f000 f805 	bl	3248 <_ZN5Print5printEli>
    323e:	0003      	movs	r3, r0
}
    3240:	0018      	movs	r0, r3
    3242:	46bd      	mov	sp, r7
    3244:	b004      	add	sp, #16
    3246:	bd80      	pop	{r7, pc}

00003248 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3248:	b580      	push	{r7, lr}
    324a:	b086      	sub	sp, #24
    324c:	af00      	add	r7, sp, #0
    324e:	60f8      	str	r0, [r7, #12]
    3250:	60b9      	str	r1, [r7, #8]
    3252:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    3254:	687b      	ldr	r3, [r7, #4]
    3256:	2b00      	cmp	r3, #0
    3258:	d109      	bne.n	326e <_ZN5Print5printEli+0x26>
    return write(n);
    325a:	68fb      	ldr	r3, [r7, #12]
    325c:	681b      	ldr	r3, [r3, #0]
    325e:	681b      	ldr	r3, [r3, #0]
    3260:	68ba      	ldr	r2, [r7, #8]
    3262:	b2d1      	uxtb	r1, r2
    3264:	68fa      	ldr	r2, [r7, #12]
    3266:	0010      	movs	r0, r2
    3268:	4798      	blx	r3
    326a:	0003      	movs	r3, r0
    326c:	e029      	b.n	32c2 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
    326e:	687b      	ldr	r3, [r7, #4]
    3270:	2b0a      	cmp	r3, #10
    3272:	d11e      	bne.n	32b2 <_ZN5Print5printEli+0x6a>
    if (n < 0) {
    3274:	68bb      	ldr	r3, [r7, #8]
    3276:	2b00      	cmp	r3, #0
    3278:	da13      	bge.n	32a2 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    327a:	68fb      	ldr	r3, [r7, #12]
    327c:	212d      	movs	r1, #45	; 0x2d
    327e:	0018      	movs	r0, r3
    3280:	f7ff ffa7 	bl	31d2 <_ZN5Print5printEc>
    3284:	0003      	movs	r3, r0
    3286:	617b      	str	r3, [r7, #20]
      n = -n;
    3288:	68bb      	ldr	r3, [r7, #8]
    328a:	425b      	negs	r3, r3
    328c:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    328e:	68b9      	ldr	r1, [r7, #8]
    3290:	68fb      	ldr	r3, [r7, #12]
    3292:	220a      	movs	r2, #10
    3294:	0018      	movs	r0, r3
    3296:	f000 f8f0 	bl	347a <_ZN5Print11printNumberEmh>
    329a:	0002      	movs	r2, r0
    329c:	697b      	ldr	r3, [r7, #20]
    329e:	18d3      	adds	r3, r2, r3
    32a0:	e00f      	b.n	32c2 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
    32a2:	68b9      	ldr	r1, [r7, #8]
    32a4:	68fb      	ldr	r3, [r7, #12]
    32a6:	220a      	movs	r2, #10
    32a8:	0018      	movs	r0, r3
    32aa:	f000 f8e6 	bl	347a <_ZN5Print11printNumberEmh>
    32ae:	0003      	movs	r3, r0
    32b0:	e007      	b.n	32c2 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
    32b2:	68b9      	ldr	r1, [r7, #8]
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	b2da      	uxtb	r2, r3
    32b8:	68fb      	ldr	r3, [r7, #12]
    32ba:	0018      	movs	r0, r3
    32bc:	f000 f8dd 	bl	347a <_ZN5Print11printNumberEmh>
    32c0:	0003      	movs	r3, r0
  }
}
    32c2:	0018      	movs	r0, r3
    32c4:	46bd      	mov	sp, r7
    32c6:	b006      	add	sp, #24
    32c8:	bd80      	pop	{r7, pc}

000032ca <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    32ca:	b580      	push	{r7, lr}
    32cc:	b084      	sub	sp, #16
    32ce:	af00      	add	r7, sp, #0
    32d0:	60f8      	str	r0, [r7, #12]
    32d2:	60b9      	str	r1, [r7, #8]
    32d4:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    32d6:	687b      	ldr	r3, [r7, #4]
    32d8:	2b00      	cmp	r3, #0
    32da:	d109      	bne.n	32f0 <_ZN5Print5printEmi+0x26>
    32dc:	68fb      	ldr	r3, [r7, #12]
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	681b      	ldr	r3, [r3, #0]
    32e2:	68ba      	ldr	r2, [r7, #8]
    32e4:	b2d1      	uxtb	r1, r2
    32e6:	68fa      	ldr	r2, [r7, #12]
    32e8:	0010      	movs	r0, r2
    32ea:	4798      	blx	r3
    32ec:	0003      	movs	r3, r0
    32ee:	e007      	b.n	3300 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	b2da      	uxtb	r2, r3
    32f4:	68b9      	ldr	r1, [r7, #8]
    32f6:	68fb      	ldr	r3, [r7, #12]
    32f8:	0018      	movs	r0, r3
    32fa:	f000 f8be 	bl	347a <_ZN5Print11printNumberEmh>
    32fe:	0003      	movs	r3, r0
}
    3300:	0018      	movs	r0, r3
    3302:	46bd      	mov	sp, r7
    3304:	b004      	add	sp, #16
    3306:	bd80      	pop	{r7, pc}

00003308 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    3308:	b580      	push	{r7, lr}
    330a:	b084      	sub	sp, #16
    330c:	af00      	add	r7, sp, #0
    330e:	6078      	str	r0, [r7, #4]
    3310:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
    3312:	683a      	ldr	r2, [r7, #0]
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	0011      	movs	r1, r2
    3318:	0018      	movs	r0, r3
    331a:	f7ff ff3a 	bl	3192 <_ZN5Print5printEPK19__FlashStringHelper>
    331e:	0003      	movs	r3, r0
    3320:	60fb      	str	r3, [r7, #12]
  n += println();
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	0018      	movs	r0, r3
    3326:	f000 f809 	bl	333c <_ZN5Print7printlnEv>
    332a:	0002      	movs	r2, r0
    332c:	68fb      	ldr	r3, [r7, #12]
    332e:	189b      	adds	r3, r3, r2
    3330:	60fb      	str	r3, [r7, #12]
  return n;
    3332:	68fb      	ldr	r3, [r7, #12]
}
    3334:	0018      	movs	r0, r3
    3336:	46bd      	mov	sp, r7
    3338:	b004      	add	sp, #16
    333a:	bd80      	pop	{r7, pc}

0000333c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    333c:	b580      	push	{r7, lr}
    333e:	b082      	sub	sp, #8
    3340:	af00      	add	r7, sp, #0
    3342:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    3344:	4a05      	ldr	r2, [pc, #20]	; (335c <_ZN5Print7printlnEv+0x20>)
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	0011      	movs	r1, r2
    334a:	0018      	movs	r0, r3
    334c:	f7ff feca 	bl	30e4 <_ZN5Print5writeEPKc>
    3350:	0003      	movs	r3, r0
}
    3352:	0018      	movs	r0, r3
    3354:	46bd      	mov	sp, r7
    3356:	b002      	add	sp, #8
    3358:	bd80      	pop	{r7, pc}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	000135b0 	.word	0x000135b0

00003360 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    3360:	b580      	push	{r7, lr}
    3362:	b084      	sub	sp, #16
    3364:	af00      	add	r7, sp, #0
    3366:	6078      	str	r0, [r7, #4]
    3368:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
    336a:	683a      	ldr	r2, [r7, #0]
    336c:	687b      	ldr	r3, [r7, #4]
    336e:	0011      	movs	r1, r2
    3370:	0018      	movs	r0, r3
    3372:	f7ff ff1e 	bl	31b2 <_ZN5Print5printEPKc>
    3376:	0003      	movs	r3, r0
    3378:	60fb      	str	r3, [r7, #12]
  n += println();
    337a:	687b      	ldr	r3, [r7, #4]
    337c:	0018      	movs	r0, r3
    337e:	f7ff ffdd 	bl	333c <_ZN5Print7printlnEv>
    3382:	0002      	movs	r2, r0
    3384:	68fb      	ldr	r3, [r7, #12]
    3386:	189b      	adds	r3, r3, r2
    3388:	60fb      	str	r3, [r7, #12]
  return n;
    338a:	68fb      	ldr	r3, [r7, #12]
}
    338c:	0018      	movs	r0, r3
    338e:	46bd      	mov	sp, r7
    3390:	b004      	add	sp, #16
    3392:	bd80      	pop	{r7, pc}

00003394 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    3394:	b580      	push	{r7, lr}
    3396:	b084      	sub	sp, #16
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
    339c:	000a      	movs	r2, r1
    339e:	1cfb      	adds	r3, r7, #3
    33a0:	701a      	strb	r2, [r3, #0]
  size_t n = print(c);
    33a2:	1cfb      	adds	r3, r7, #3
    33a4:	781a      	ldrb	r2, [r3, #0]
    33a6:	687b      	ldr	r3, [r7, #4]
    33a8:	0011      	movs	r1, r2
    33aa:	0018      	movs	r0, r3
    33ac:	f7ff ff11 	bl	31d2 <_ZN5Print5printEc>
    33b0:	0003      	movs	r3, r0
    33b2:	60fb      	str	r3, [r7, #12]
  n += println();
    33b4:	687b      	ldr	r3, [r7, #4]
    33b6:	0018      	movs	r0, r3
    33b8:	f7ff ffc0 	bl	333c <_ZN5Print7printlnEv>
    33bc:	0002      	movs	r2, r0
    33be:	68fb      	ldr	r3, [r7, #12]
    33c0:	189b      	adds	r3, r3, r2
    33c2:	60fb      	str	r3, [r7, #12]
  return n;
    33c4:	68fb      	ldr	r3, [r7, #12]
}
    33c6:	0018      	movs	r0, r3
    33c8:	46bd      	mov	sp, r7
    33ca:	b004      	add	sp, #16
    33cc:	bd80      	pop	{r7, pc}

000033ce <_ZN5Print7printlnEhi>:

size_t Print::println(unsigned char b, int base)
{
    33ce:	b580      	push	{r7, lr}
    33d0:	b086      	sub	sp, #24
    33d2:	af00      	add	r7, sp, #0
    33d4:	60f8      	str	r0, [r7, #12]
    33d6:	607a      	str	r2, [r7, #4]
    33d8:	230b      	movs	r3, #11
    33da:	18fb      	adds	r3, r7, r3
    33dc:	1c0a      	adds	r2, r1, #0
    33de:	701a      	strb	r2, [r3, #0]
  size_t n = print(b, base);
    33e0:	687a      	ldr	r2, [r7, #4]
    33e2:	230b      	movs	r3, #11
    33e4:	18fb      	adds	r3, r7, r3
    33e6:	7819      	ldrb	r1, [r3, #0]
    33e8:	68fb      	ldr	r3, [r7, #12]
    33ea:	0018      	movs	r0, r3
    33ec:	f7ff ff05 	bl	31fa <_ZN5Print5printEhi>
    33f0:	0003      	movs	r3, r0
    33f2:	617b      	str	r3, [r7, #20]
  n += println();
    33f4:	68fb      	ldr	r3, [r7, #12]
    33f6:	0018      	movs	r0, r3
    33f8:	f7ff ffa0 	bl	333c <_ZN5Print7printlnEv>
    33fc:	0002      	movs	r2, r0
    33fe:	697b      	ldr	r3, [r7, #20]
    3400:	189b      	adds	r3, r3, r2
    3402:	617b      	str	r3, [r7, #20]
  return n;
    3404:	697b      	ldr	r3, [r7, #20]
}
    3406:	0018      	movs	r0, r3
    3408:	46bd      	mov	sp, r7
    340a:	b006      	add	sp, #24
    340c:	bd80      	pop	{r7, pc}

0000340e <_ZN5Print7printlnEii>:

size_t Print::println(int num, int base)
{
    340e:	b580      	push	{r7, lr}
    3410:	b086      	sub	sp, #24
    3412:	af00      	add	r7, sp, #0
    3414:	60f8      	str	r0, [r7, #12]
    3416:	60b9      	str	r1, [r7, #8]
    3418:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
    341a:	687a      	ldr	r2, [r7, #4]
    341c:	68b9      	ldr	r1, [r7, #8]
    341e:	68fb      	ldr	r3, [r7, #12]
    3420:	0018      	movs	r0, r3
    3422:	f7ff ff00 	bl	3226 <_ZN5Print5printEii>
    3426:	0003      	movs	r3, r0
    3428:	617b      	str	r3, [r7, #20]
  n += println();
    342a:	68fb      	ldr	r3, [r7, #12]
    342c:	0018      	movs	r0, r3
    342e:	f7ff ff85 	bl	333c <_ZN5Print7printlnEv>
    3432:	0002      	movs	r2, r0
    3434:	697b      	ldr	r3, [r7, #20]
    3436:	189b      	adds	r3, r3, r2
    3438:	617b      	str	r3, [r7, #20]
  return n;
    343a:	697b      	ldr	r3, [r7, #20]
}
    343c:	0018      	movs	r0, r3
    343e:	46bd      	mov	sp, r7
    3440:	b006      	add	sp, #24
    3442:	bd80      	pop	{r7, pc}

00003444 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3444:	b580      	push	{r7, lr}
    3446:	b086      	sub	sp, #24
    3448:	af00      	add	r7, sp, #0
    344a:	60f8      	str	r0, [r7, #12]
    344c:	60b9      	str	r1, [r7, #8]
    344e:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
    3450:	687a      	ldr	r2, [r7, #4]
    3452:	68b9      	ldr	r1, [r7, #8]
    3454:	68fb      	ldr	r3, [r7, #12]
    3456:	0018      	movs	r0, r3
    3458:	f7ff ff37 	bl	32ca <_ZN5Print5printEmi>
    345c:	0003      	movs	r3, r0
    345e:	617b      	str	r3, [r7, #20]
  n += println();
    3460:	68fb      	ldr	r3, [r7, #12]
    3462:	0018      	movs	r0, r3
    3464:	f7ff ff6a 	bl	333c <_ZN5Print7printlnEv>
    3468:	0002      	movs	r2, r0
    346a:	697b      	ldr	r3, [r7, #20]
    346c:	189b      	adds	r3, r3, r2
    346e:	617b      	str	r3, [r7, #20]
  return n;
    3470:	697b      	ldr	r3, [r7, #20]
}
    3472:	0018      	movs	r0, r3
    3474:	46bd      	mov	sp, r7
    3476:	b006      	add	sp, #24
    3478:	bd80      	pop	{r7, pc}

0000347a <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    347a:	b580      	push	{r7, lr}
    347c:	b08e      	sub	sp, #56	; 0x38
    347e:	af00      	add	r7, sp, #0
    3480:	60f8      	str	r0, [r7, #12]
    3482:	60b9      	str	r1, [r7, #8]
    3484:	1dfb      	adds	r3, r7, #7
    3486:	701a      	strb	r2, [r3, #0]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    3488:	2310      	movs	r3, #16
    348a:	18fb      	adds	r3, r7, r3
    348c:	3320      	adds	r3, #32
    348e:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    3490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3492:	2200      	movs	r2, #0
    3494:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3496:	1dfb      	adds	r3, r7, #7
    3498:	781b      	ldrb	r3, [r3, #0]
    349a:	2b01      	cmp	r3, #1
    349c:	dc02      	bgt.n	34a4 <_ZN5Print11printNumberEmh+0x2a>
    349e:	1dfb      	adds	r3, r7, #7
    34a0:	220a      	movs	r2, #10
    34a2:	701a      	strb	r2, [r3, #0]

  do {
    char c = n % base;
    34a4:	1dfb      	adds	r3, r7, #7
    34a6:	781a      	ldrb	r2, [r3, #0]
    34a8:	68bb      	ldr	r3, [r7, #8]
    34aa:	0011      	movs	r1, r2
    34ac:	0018      	movs	r0, r3
    34ae:	f00b fb7b 	bl	eba8 <__aeabi_uidivmod>
    34b2:	000b      	movs	r3, r1
    34b4:	001a      	movs	r2, r3
    34b6:	2333      	movs	r3, #51	; 0x33
    34b8:	18fb      	adds	r3, r7, r3
    34ba:	701a      	strb	r2, [r3, #0]
    n /= base;
    34bc:	1dfb      	adds	r3, r7, #7
    34be:	781b      	ldrb	r3, [r3, #0]
    34c0:	0019      	movs	r1, r3
    34c2:	68b8      	ldr	r0, [r7, #8]
    34c4:	f00b faea 	bl	ea9c <__udivsi3>
    34c8:	0003      	movs	r3, r0
    34ca:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    34cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34ce:	3b01      	subs	r3, #1
    34d0:	637b      	str	r3, [r7, #52]	; 0x34
    34d2:	2333      	movs	r3, #51	; 0x33
    34d4:	18fb      	adds	r3, r7, r3
    34d6:	781b      	ldrb	r3, [r3, #0]
    34d8:	2b09      	cmp	r3, #9
    34da:	dc05      	bgt.n	34e8 <_ZN5Print11printNumberEmh+0x6e>
    34dc:	2333      	movs	r3, #51	; 0x33
    34de:	18fb      	adds	r3, r7, r3
    34e0:	781b      	ldrb	r3, [r3, #0]
    34e2:	3330      	adds	r3, #48	; 0x30
    34e4:	b2db      	uxtb	r3, r3
    34e6:	e004      	b.n	34f2 <_ZN5Print11printNumberEmh+0x78>
    34e8:	2333      	movs	r3, #51	; 0x33
    34ea:	18fb      	adds	r3, r7, r3
    34ec:	781b      	ldrb	r3, [r3, #0]
    34ee:	3337      	adds	r3, #55	; 0x37
    34f0:	b2db      	uxtb	r3, r3
    34f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    34f4:	7013      	strb	r3, [r2, #0]
  } while(n);
    34f6:	68bb      	ldr	r3, [r7, #8]
    34f8:	2b00      	cmp	r3, #0
    34fa:	d004      	beq.n	3506 <_ZN5Print11printNumberEmh+0x8c>
    34fc:	1dfb      	adds	r3, r7, #7
    34fe:	1dfa      	adds	r2, r7, #7
    3500:	7812      	ldrb	r2, [r2, #0]
    3502:	701a      	strb	r2, [r3, #0]
  do {
    3504:	e7ce      	b.n	34a4 <_ZN5Print11printNumberEmh+0x2a>

  return write(str);
    3506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3508:	68fb      	ldr	r3, [r7, #12]
    350a:	0011      	movs	r1, r2
    350c:	0018      	movs	r0, r3
    350e:	f7ff fde9 	bl	30e4 <_ZN5Print5writeEPKc>
    3512:	0003      	movs	r3, r0
}
    3514:	0018      	movs	r0, r3
    3516:	46bd      	mov	sp, r7
    3518:	b00e      	add	sp, #56	; 0x38
    351a:	bd80      	pop	{r7, pc}

0000351c <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    351c:	b580      	push	{r7, lr}
    351e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3520:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    3524:	4b03      	ldr	r3, [pc, #12]	; (3534 <NVIC_SystemReset+0x18>)
    3526:	4a04      	ldr	r2, [pc, #16]	; (3538 <NVIC_SystemReset+0x1c>)
    3528:	60da      	str	r2, [r3, #12]
    352a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    352e:	46c0      	nop			; (mov r8, r8)
    3530:	e7fd      	b.n	352e <NVIC_SystemReset+0x12>
    3532:	46c0      	nop			; (mov r8, r8)
    3534:	e000ed00 	.word	0xe000ed00
    3538:	05fa0004 	.word	0x05fa0004

0000353c <nvmReady>:

#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
    353c:	b580      	push	{r7, lr}
    353e:	af00      	add	r7, sp, #0
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    3540:	4b05      	ldr	r3, [pc, #20]	; (3558 <nvmReady+0x1c>)
    3542:	7d1b      	ldrb	r3, [r3, #20]
    3544:	b2db      	uxtb	r3, r3
    3546:	001a      	movs	r2, r3
    3548:	2301      	movs	r3, #1
    354a:	4013      	ands	r3, r2
    354c:	1e5a      	subs	r2, r3, #1
    354e:	4193      	sbcs	r3, r2
    3550:	b2db      	uxtb	r3, r3
}
    3552:	0018      	movs	r0, r3
    3554:	46bd      	mov	sp, r7
    3556:	bd80      	pop	{r7, pc}
    3558:	41004000 	.word	0x41004000

0000355c <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
    355c:	b580      	push	{r7, lr}
    355e:	b082      	sub	sp, #8
    3560:	af00      	add	r7, sp, #0
    3562:	6078      	str	r0, [r7, #4]
	ticks = _ticks;
    3564:	4b03      	ldr	r3, [pc, #12]	; (3574 <initiateReset+0x18>)
    3566:	687a      	ldr	r2, [r7, #4]
    3568:	601a      	str	r2, [r3, #0]
}
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	46bd      	mov	sp, r7
    356e:	b002      	add	sp, #8
    3570:	bd80      	pop	{r7, pc}
    3572:	46c0      	nop			; (mov r8, r8)
    3574:	2000001c 	.word	0x2000001c

00003578 <cancelReset>:

void cancelReset() {
    3578:	b580      	push	{r7, lr}
    357a:	af00      	add	r7, sp, #0
	ticks = -1;
    357c:	4b03      	ldr	r3, [pc, #12]	; (358c <cancelReset+0x14>)
    357e:	2201      	movs	r2, #1
    3580:	4252      	negs	r2, r2
    3582:	601a      	str	r2, [r3, #0]
}
    3584:	46c0      	nop			; (mov r8, r8)
    3586:	46bd      	mov	sp, r7
    3588:	bd80      	pop	{r7, pc}
    358a:	46c0      	nop			; (mov r8, r8)
    358c:	2000001c 	.word	0x2000001c

00003590 <tickReset>:

void tickReset() {
    3590:	b580      	push	{r7, lr}
    3592:	af00      	add	r7, sp, #0
	if (ticks == -1)
    3594:	4b09      	ldr	r3, [pc, #36]	; (35bc <tickReset+0x2c>)
    3596:	681b      	ldr	r3, [r3, #0]
    3598:	3301      	adds	r3, #1
    359a:	d00b      	beq.n	35b4 <tickReset+0x24>
		return;
	ticks--;
    359c:	4b07      	ldr	r3, [pc, #28]	; (35bc <tickReset+0x2c>)
    359e:	681b      	ldr	r3, [r3, #0]
    35a0:	1e5a      	subs	r2, r3, #1
    35a2:	4b06      	ldr	r3, [pc, #24]	; (35bc <tickReset+0x2c>)
    35a4:	601a      	str	r2, [r3, #0]
	if (ticks == 0)
    35a6:	4b05      	ldr	r3, [pc, #20]	; (35bc <tickReset+0x2c>)
    35a8:	681b      	ldr	r3, [r3, #0]
    35aa:	2b00      	cmp	r3, #0
    35ac:	d103      	bne.n	35b6 <tickReset+0x26>
		banzai();
    35ae:	4b04      	ldr	r3, [pc, #16]	; (35c0 <tickReset+0x30>)
    35b0:	4798      	blx	r3
    35b2:	e000      	b.n	35b6 <tickReset+0x26>
		return;
    35b4:	46c0      	nop			; (mov r8, r8)
}
    35b6:	46bd      	mov	sp, r7
    35b8:	bd80      	pop	{r7, pc}
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	2000001c 	.word	0x2000001c
    35c0:	00014649 	.word	0x00014649

000035c4 <SystemInit>:
#define GENERIC_CLOCK_GENERATOR_OSC8M     (3u)
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
    35c4:	b580      	push	{r7, lr}
    35c6:	b082      	sub	sp, #8
    35c8:	af00      	add	r7, sp, #0
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    35ca:	4a75      	ldr	r2, [pc, #468]	; (37a0 <SystemInit+0x1dc>)
    35cc:	6853      	ldr	r3, [r2, #4]
    35ce:	211e      	movs	r1, #30
    35d0:	438b      	bics	r3, r1
    35d2:	2102      	movs	r1, #2
    35d4:	430b      	orrs	r3, r1
    35d6:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    35d8:	4b72      	ldr	r3, [pc, #456]	; (37a4 <SystemInit+0x1e0>)
    35da:	4a72      	ldr	r2, [pc, #456]	; (37a4 <SystemInit+0x1e0>)
    35dc:	6992      	ldr	r2, [r2, #24]
    35de:	2108      	movs	r1, #8
    35e0:	430a      	orrs	r2, r1
    35e2:	619a      	str	r2, [r3, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    35e4:	4b70      	ldr	r3, [pc, #448]	; (37a8 <SystemInit+0x1e4>)
    35e6:	4a71      	ldr	r2, [pc, #452]	; (37ac <SystemInit+0x1e8>)
    35e8:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    35ea:	4a6f      	ldr	r2, [pc, #444]	; (37a8 <SystemInit+0x1e4>)
    35ec:	8a93      	ldrh	r3, [r2, #20]
    35ee:	2102      	movs	r1, #2
    35f0:	430b      	orrs	r3, r1
    35f2:	8293      	strh	r3, [r2, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    35f4:	46c0      	nop			; (mov r8, r8)
    35f6:	4b6c      	ldr	r3, [pc, #432]	; (37a8 <SystemInit+0x1e4>)
    35f8:	68db      	ldr	r3, [r3, #12]
    35fa:	2202      	movs	r2, #2
    35fc:	4013      	ands	r3, r2
    35fe:	d0fa      	beq.n	35f6 <SystemInit+0x32>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    3600:	4b6b      	ldr	r3, [pc, #428]	; (37b0 <SystemInit+0x1ec>)
    3602:	2201      	movs	r2, #1
    3604:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    3606:	46c0      	nop			; (mov r8, r8)
    3608:	4b69      	ldr	r3, [pc, #420]	; (37b0 <SystemInit+0x1ec>)
    360a:	781b      	ldrb	r3, [r3, #0]
    360c:	b2db      	uxtb	r3, r3
    360e:	001a      	movs	r2, r3
    3610:	2301      	movs	r3, #1
    3612:	4013      	ands	r3, r2
    3614:	d005      	beq.n	3622 <SystemInit+0x5e>
    3616:	4b66      	ldr	r3, [pc, #408]	; (37b0 <SystemInit+0x1ec>)
    3618:	785b      	ldrb	r3, [r3, #1]
    361a:	b2db      	uxtb	r3, r3
    361c:	b25b      	sxtb	r3, r3
    361e:	2b00      	cmp	r3, #0
    3620:	dbf2      	blt.n	3608 <SystemInit+0x44>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    3622:	4b63      	ldr	r3, [pc, #396]	; (37b0 <SystemInit+0x1ec>)
    3624:	2201      	movs	r2, #1
    3626:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3628:	46c0      	nop			; (mov r8, r8)
    362a:	4b61      	ldr	r3, [pc, #388]	; (37b0 <SystemInit+0x1ec>)
    362c:	785b      	ldrb	r3, [r3, #1]
    362e:	b2db      	uxtb	r3, r3
    3630:	b25b      	sxtb	r3, r3
    3632:	2b00      	cmp	r3, #0
    3634:	dbf9      	blt.n	362a <SystemInit+0x66>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    3636:	4b5e      	ldr	r3, [pc, #376]	; (37b0 <SystemInit+0x1ec>)
    3638:	4a5e      	ldr	r2, [pc, #376]	; (37b4 <SystemInit+0x1f0>)
    363a:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    363c:	46c0      	nop			; (mov r8, r8)
    363e:	4b5c      	ldr	r3, [pc, #368]	; (37b0 <SystemInit+0x1ec>)
    3640:	785b      	ldrb	r3, [r3, #1]
    3642:	b2db      	uxtb	r3, r3
    3644:	b25b      	sxtb	r3, r3
    3646:	2b00      	cmp	r3, #0
    3648:	dbf9      	blt.n	363e <SystemInit+0x7a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    364a:	4b59      	ldr	r3, [pc, #356]	; (37b0 <SystemInit+0x1ec>)
    364c:	2282      	movs	r2, #130	; 0x82
    364e:	01d2      	lsls	r2, r2, #7
    3650:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	4b56      	ldr	r3, [pc, #344]	; (37b0 <SystemInit+0x1ec>)
    3656:	785b      	ldrb	r3, [r3, #1]
    3658:	b2db      	uxtb	r3, r3
    365a:	b25b      	sxtb	r3, r3
    365c:	2b00      	cmp	r3, #0
    365e:	dbf9      	blt.n	3654 <SystemInit+0x90>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3660:	4b51      	ldr	r3, [pc, #324]	; (37a8 <SystemInit+0x1e4>)
    3662:	2202      	movs	r2, #2
    3664:	849a      	strh	r2, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    3666:	46c0      	nop			; (mov r8, r8)
    3668:	4b4f      	ldr	r3, [pc, #316]	; (37a8 <SystemInit+0x1e4>)
    366a:	68db      	ldr	r3, [r3, #12]
    366c:	2210      	movs	r2, #16
    366e:	4013      	ands	r3, r2
    3670:	d0fa      	beq.n	3668 <SystemInit+0xa4>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    3672:	4b4d      	ldr	r3, [pc, #308]	; (37a8 <SystemInit+0x1e4>)
    3674:	4a50      	ldr	r2, [pc, #320]	; (37b8 <SystemInit+0x1f4>)
    3676:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    3678:	46c0      	nop			; (mov r8, r8)
    367a:	4b4b      	ldr	r3, [pc, #300]	; (37a8 <SystemInit+0x1e4>)
    367c:	68db      	ldr	r3, [r3, #12]
    367e:	2210      	movs	r2, #16
    3680:	4013      	ands	r3, r2
    3682:	d0fa      	beq.n	367a <SystemInit+0xb6>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    3684:	4a48      	ldr	r2, [pc, #288]	; (37a8 <SystemInit+0x1e4>)
    3686:	4b48      	ldr	r3, [pc, #288]	; (37a8 <SystemInit+0x1e4>)
    3688:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    368a:	b29b      	uxth	r3, r3
    368c:	494b      	ldr	r1, [pc, #300]	; (37bc <SystemInit+0x1f8>)
    368e:	430b      	orrs	r3, r1
    3690:	b29b      	uxth	r3, r3
    3692:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    3694:	46c0      	nop			; (mov r8, r8)
    3696:	4b44      	ldr	r3, [pc, #272]	; (37a8 <SystemInit+0x1e4>)
    3698:	68db      	ldr	r3, [r3, #12]
    369a:	2210      	movs	r2, #16
    369c:	4013      	ands	r3, r2
    369e:	d0fa      	beq.n	3696 <SystemInit+0xd2>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    36a0:	4a41      	ldr	r2, [pc, #260]	; (37a8 <SystemInit+0x1e4>)
    36a2:	4b41      	ldr	r3, [pc, #260]	; (37a8 <SystemInit+0x1e4>)
    36a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    36a6:	b29b      	uxth	r3, r3
    36a8:	2102      	movs	r1, #2
    36aa:	430b      	orrs	r3, r1
    36ac:	b29b      	uxth	r3, r3
    36ae:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    36b0:	46c0      	nop			; (mov r8, r8)
    36b2:	4b3d      	ldr	r3, [pc, #244]	; (37a8 <SystemInit+0x1e4>)
    36b4:	68db      	ldr	r3, [r3, #12]
    36b6:	2280      	movs	r2, #128	; 0x80
    36b8:	4013      	ands	r3, r2
    36ba:	d0fa      	beq.n	36b2 <SystemInit+0xee>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    36bc:	4b3a      	ldr	r3, [pc, #232]	; (37a8 <SystemInit+0x1e4>)
    36be:	68db      	ldr	r3, [r3, #12]
    36c0:	2240      	movs	r2, #64	; 0x40
    36c2:	4013      	ands	r3, r2
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    36c4:	d0f5      	beq.n	36b2 <SystemInit+0xee>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    36c6:	46c0      	nop			; (mov r8, r8)
    36c8:	4b37      	ldr	r3, [pc, #220]	; (37a8 <SystemInit+0x1e4>)
    36ca:	68db      	ldr	r3, [r3, #12]
    36cc:	2210      	movs	r2, #16
    36ce:	4013      	ands	r3, r2
    36d0:	d0fa      	beq.n	36c8 <SystemInit+0x104>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    36d2:	4b37      	ldr	r3, [pc, #220]	; (37b0 <SystemInit+0x1ec>)
    36d4:	2200      	movs	r2, #0
    36d6:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    36d8:	46c0      	nop			; (mov r8, r8)
    36da:	4b35      	ldr	r3, [pc, #212]	; (37b0 <SystemInit+0x1ec>)
    36dc:	785b      	ldrb	r3, [r3, #1]
    36de:	b2db      	uxtb	r3, r3
    36e0:	b25b      	sxtb	r3, r3
    36e2:	2b00      	cmp	r3, #0
    36e4:	dbf9      	blt.n	36da <SystemInit+0x116>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    36e6:	4b32      	ldr	r3, [pc, #200]	; (37b0 <SystemInit+0x1ec>)
    36e8:	4a35      	ldr	r2, [pc, #212]	; (37c0 <SystemInit+0x1fc>)
    36ea:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    36ec:	46c0      	nop			; (mov r8, r8)
    36ee:	4b30      	ldr	r3, [pc, #192]	; (37b0 <SystemInit+0x1ec>)
    36f0:	785b      	ldrb	r3, [r3, #1]
    36f2:	b2db      	uxtb	r3, r3
    36f4:	b25b      	sxtb	r3, r3
    36f6:	2b00      	cmp	r3, #0
    36f8:	dbf9      	blt.n	36ee <SystemInit+0x12a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    36fa:	4a2b      	ldr	r2, [pc, #172]	; (37a8 <SystemInit+0x1e4>)
    36fc:	6a13      	ldr	r3, [r2, #32]
    36fe:	4931      	ldr	r1, [pc, #196]	; (37c4 <SystemInit+0x200>)
    3700:	400b      	ands	r3, r1
    3702:	6213      	str	r3, [r2, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    3704:	4a28      	ldr	r2, [pc, #160]	; (37a8 <SystemInit+0x1e4>)
    3706:	6a13      	ldr	r3, [r2, #32]
    3708:	2180      	movs	r1, #128	; 0x80
    370a:	438b      	bics	r3, r1
    370c:	6213      	str	r3, [r2, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    370e:	4b28      	ldr	r3, [pc, #160]	; (37b0 <SystemInit+0x1ec>)
    3710:	2203      	movs	r2, #3
    3712:	609a      	str	r2, [r3, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    3714:	4b26      	ldr	r3, [pc, #152]	; (37b0 <SystemInit+0x1ec>)
    3716:	4a2c      	ldr	r2, [pc, #176]	; (37c8 <SystemInit+0x204>)
    3718:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    371a:	46c0      	nop			; (mov r8, r8)
    371c:	4b24      	ldr	r3, [pc, #144]	; (37b0 <SystemInit+0x1ec>)
    371e:	785b      	ldrb	r3, [r3, #1]
    3720:	b2db      	uxtb	r3, r3
    3722:	b25b      	sxtb	r3, r3
    3724:	2b00      	cmp	r3, #0
    3726:	dbf9      	blt.n	371c <SystemInit+0x158>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    3728:	4b1e      	ldr	r3, [pc, #120]	; (37a4 <SystemInit+0x1e0>)
    372a:	2200      	movs	r2, #0
    372c:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    372e:	4b1d      	ldr	r3, [pc, #116]	; (37a4 <SystemInit+0x1e0>)
    3730:	2200      	movs	r2, #0
    3732:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    3734:	4b1b      	ldr	r3, [pc, #108]	; (37a4 <SystemInit+0x1e0>)
    3736:	2200      	movs	r2, #0
    3738:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    373a:	4b1a      	ldr	r3, [pc, #104]	; (37a4 <SystemInit+0x1e0>)
    373c:	2200      	movs	r2, #0
    373e:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=VARIANT_MCK ;
    3740:	4b22      	ldr	r3, [pc, #136]	; (37cc <SystemInit+0x208>)
    3742:	4a23      	ldr	r2, [pc, #140]	; (37d0 <SystemInit+0x20c>)
    3744:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    3746:	4b23      	ldr	r3, [pc, #140]	; (37d4 <SystemInit+0x210>)
    3748:	681b      	ldr	r3, [r3, #0]
    374a:	08db      	lsrs	r3, r3, #3
    374c:	2207      	movs	r2, #7
    374e:	4013      	ands	r3, r2
    3750:	607b      	str	r3, [r7, #4]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    3752:	4b21      	ldr	r3, [pc, #132]	; (37d8 <SystemInit+0x214>)
    3754:	681b      	ldr	r3, [r3, #0]
    3756:	0edb      	lsrs	r3, r3, #27
    3758:	603b      	str	r3, [r7, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    375a:	4b1e      	ldr	r3, [pc, #120]	; (37d4 <SystemInit+0x210>)
    375c:	681b      	ldr	r3, [r3, #0]
    375e:	015b      	lsls	r3, r3, #5
    3760:	22ff      	movs	r2, #255	; 0xff
    3762:	4013      	ands	r3, r2
    3764:	683a      	ldr	r2, [r7, #0]
    3766:	4313      	orrs	r3, r2
    3768:	603b      	str	r3, [r7, #0]

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    376a:	491c      	ldr	r1, [pc, #112]	; (37dc <SystemInit+0x218>)
    376c:	687b      	ldr	r3, [r7, #4]
    376e:	b29b      	uxth	r3, r3
    3770:	021b      	lsls	r3, r3, #8
    3772:	b29a      	uxth	r2, r3
    3774:	23e0      	movs	r3, #224	; 0xe0
    3776:	00db      	lsls	r3, r3, #3
    3778:	4013      	ands	r3, r2
    377a:	b29a      	uxth	r2, r3
    377c:	683b      	ldr	r3, [r7, #0]
    377e:	b29b      	uxth	r3, r3
    3780:	20ff      	movs	r0, #255	; 0xff
    3782:	4003      	ands	r3, r0
    3784:	b29b      	uxth	r3, r3
    3786:	4313      	orrs	r3, r2
    3788:	b29b      	uxth	r3, r3
    378a:	850b      	strh	r3, [r1, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    378c:	4a04      	ldr	r2, [pc, #16]	; (37a0 <SystemInit+0x1dc>)
    378e:	6853      	ldr	r3, [r2, #4]
    3790:	2180      	movs	r1, #128	; 0x80
    3792:	430b      	orrs	r3, r1
    3794:	6053      	str	r3, [r2, #4]
}
    3796:	46c0      	nop			; (mov r8, r8)
    3798:	46bd      	mov	sp, r7
    379a:	b002      	add	sp, #8
    379c:	bd80      	pop	{r7, pc}
    379e:	46c0      	nop			; (mov r8, r8)
    37a0:	41004000 	.word	0x41004000
    37a4:	40000400 	.word	0x40000400
    37a8:	40000800 	.word	0x40000800
    37ac:	0000060c 	.word	0x0000060c
    37b0:	40000c00 	.word	0x40000c00
    37b4:	00010501 	.word	0x00010501
    37b8:	7dff05b9 	.word	0x7dff05b9
    37bc:	00000a04 	.word	0x00000a04
    37c0:	00030700 	.word	0x00030700
    37c4:	fffffcff 	.word	0xfffffcff
    37c8:	00010603 	.word	0x00010603
    37cc:	20000048 	.word	0x20000048
    37d0:	02dc6c00 	.word	0x02dc6c00
    37d4:	00806024 	.word	0x00806024
    37d8:	00806020 	.word	0x00806020
    37dc:	42004000 	.word	0x42004000

000037e0 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
    37e0:	b580      	push	{r7, lr}
    37e2:	b082      	sub	sp, #8
    37e4:	af00      	add	r7, sp, #0
    37e6:	6078      	str	r0, [r7, #4]
    37e8:	4a05      	ldr	r2, [pc, #20]	; (3800 <_ZN5PrintC1Ev+0x20>)
    37ea:	687b      	ldr	r3, [r7, #4]
    37ec:	601a      	str	r2, [r3, #0]
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	2200      	movs	r2, #0
    37f2:	605a      	str	r2, [r3, #4]
    37f4:	687b      	ldr	r3, [r7, #4]
    37f6:	0018      	movs	r0, r3
    37f8:	46bd      	mov	sp, r7
    37fa:	b002      	add	sp, #8
    37fc:	bd80      	pop	{r7, pc}
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	000135c8 	.word	0x000135c8

00003804 <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3804:	b580      	push	{r7, lr}
    3806:	b082      	sub	sp, #8
    3808:	af00      	add	r7, sp, #0
    380a:	6078      	str	r0, [r7, #4]
    380c:	687b      	ldr	r3, [r7, #4]
    380e:	0018      	movs	r0, r3
    3810:	f7ff ffe6 	bl	37e0 <_ZN5PrintC1Ev>
    3814:	4a05      	ldr	r2, [pc, #20]	; (382c <_ZN6StreamC1Ev+0x28>)
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	601a      	str	r2, [r3, #0]
    381a:	687b      	ldr	r3, [r7, #4]
    381c:	22fa      	movs	r2, #250	; 0xfa
    381e:	0092      	lsls	r2, r2, #2
    3820:	609a      	str	r2, [r3, #8]
    3822:	687b      	ldr	r3, [r7, #4]
    3824:	0018      	movs	r0, r3
    3826:	46bd      	mov	sp, r7
    3828:	b002      	add	sp, #8
    382a:	bd80      	pop	{r7, pc}
    382c:	00013658 	.word	0x00013658

00003830 <_ZN14HardwareSerialC1Ev>:

class HardwareSerial : public Stream
{
	public:
	
	HardwareSerial() {};
    3830:	b580      	push	{r7, lr}
    3832:	b082      	sub	sp, #8
    3834:	af00      	add	r7, sp, #0
    3836:	6078      	str	r0, [r7, #4]
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	0018      	movs	r0, r3
    383c:	f7ff ffe2 	bl	3804 <_ZN6StreamC1Ev>
    3840:	4a03      	ldr	r2, [pc, #12]	; (3850 <_ZN14HardwareSerialC1Ev+0x20>)
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	601a      	str	r2, [r3, #0]
    3846:	687b      	ldr	r3, [r7, #4]
    3848:	0018      	movs	r0, r3
    384a:	46bd      	mov	sp, r7
    384c:	b002      	add	sp, #8
    384e:	bd80      	pop	{r7, pc}
    3850:	0001361c 	.word	0x0001361c

00003854 <_ZN14HardwareSerialD1Ev>:
	virtual ~HardwareSerial() {};
    3854:	b580      	push	{r7, lr}
    3856:	b082      	sub	sp, #8
    3858:	af00      	add	r7, sp, #0
    385a:	6078      	str	r0, [r7, #4]
    385c:	4a03      	ldr	r2, [pc, #12]	; (386c <_ZN14HardwareSerialD1Ev+0x18>)
    385e:	687b      	ldr	r3, [r7, #4]
    3860:	601a      	str	r2, [r3, #0]
    3862:	687b      	ldr	r3, [r7, #4]
    3864:	0018      	movs	r0, r3
    3866:	46bd      	mov	sp, r7
    3868:	b002      	add	sp, #8
    386a:	bd80      	pop	{r7, pc}
    386c:	0001361c 	.word	0x0001361c

00003870 <_ZN14HardwareSerialD0Ev>:
    3870:	b580      	push	{r7, lr}
    3872:	b082      	sub	sp, #8
    3874:	af00      	add	r7, sp, #0
    3876:	6078      	str	r0, [r7, #4]
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	0018      	movs	r0, r3
    387c:	f7ff ffea 	bl	3854 <_ZN14HardwareSerialD1Ev>
    3880:	687b      	ldr	r3, [r7, #4]
    3882:	0018      	movs	r0, r3
    3884:	f00a f83b 	bl	d8fe <_ZdlPv>
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	0018      	movs	r0, r3
    388c:	46bd      	mov	sp, r7
    388e:	b002      	add	sp, #8
    3890:	bd80      	pop	{r7, pc}

00003892 <_ZN14HardwareSerial5beginEm>:
	
	virtual void begin(unsigned long) {};
    3892:	b580      	push	{r7, lr}
    3894:	b082      	sub	sp, #8
    3896:	af00      	add	r7, sp, #0
    3898:	6078      	str	r0, [r7, #4]
    389a:	6039      	str	r1, [r7, #0]
    389c:	46c0      	nop			; (mov r8, r8)
    389e:	46bd      	mov	sp, r7
    38a0:	b002      	add	sp, #8
    38a2:	bd80      	pop	{r7, pc}

000038a4 <_ZN14HardwareSerial5beginEmt>:
	virtual void begin(unsigned long baudrate, uint16_t config) {};
    38a4:	b580      	push	{r7, lr}
    38a6:	b084      	sub	sp, #16
    38a8:	af00      	add	r7, sp, #0
    38aa:	60f8      	str	r0, [r7, #12]
    38ac:	60b9      	str	r1, [r7, #8]
    38ae:	1dbb      	adds	r3, r7, #6
    38b0:	801a      	strh	r2, [r3, #0]
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	46bd      	mov	sp, r7
    38b6:	b004      	add	sp, #16
    38b8:	bd80      	pop	{r7, pc}

000038ba <_ZN14HardwareSerial3endEv>:
	virtual void end() {};
    38ba:	b580      	push	{r7, lr}
    38bc:	b082      	sub	sp, #8
    38be:	af00      	add	r7, sp, #0
    38c0:	6078      	str	r0, [r7, #4]
    38c2:	46c0      	nop			; (mov r8, r8)
    38c4:	46bd      	mov	sp, r7
    38c6:	b002      	add	sp, #8
    38c8:	bd80      	pop	{r7, pc}
	...

000038cc <__NVIC_GetPriority>:
{
    38cc:	b580      	push	{r7, lr}
    38ce:	b082      	sub	sp, #8
    38d0:	af00      	add	r7, sp, #0
    38d2:	0002      	movs	r2, r0
    38d4:	1dfb      	adds	r3, r7, #7
    38d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    38d8:	1dfb      	adds	r3, r7, #7
    38da:	781b      	ldrb	r3, [r3, #0]
    38dc:	2b7f      	cmp	r3, #127	; 0x7f
    38de:	d813      	bhi.n	3908 <__NVIC_GetPriority+0x3c>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    38e0:	4a17      	ldr	r2, [pc, #92]	; (3940 <__NVIC_GetPriority+0x74>)
    38e2:	1dfb      	adds	r3, r7, #7
    38e4:	781b      	ldrb	r3, [r3, #0]
    38e6:	b25b      	sxtb	r3, r3
    38e8:	089b      	lsrs	r3, r3, #2
    38ea:	33c0      	adds	r3, #192	; 0xc0
    38ec:	009b      	lsls	r3, r3, #2
    38ee:	589a      	ldr	r2, [r3, r2]
    38f0:	1dfb      	adds	r3, r7, #7
    38f2:	781b      	ldrb	r3, [r3, #0]
    38f4:	b25b      	sxtb	r3, r3
    38f6:	2103      	movs	r1, #3
    38f8:	400b      	ands	r3, r1
    38fa:	00db      	lsls	r3, r3, #3
    38fc:	40da      	lsrs	r2, r3
    38fe:	0013      	movs	r3, r2
    3900:	099b      	lsrs	r3, r3, #6
    3902:	2203      	movs	r2, #3
    3904:	4013      	ands	r3, r2
    3906:	e017      	b.n	3938 <__NVIC_GetPriority+0x6c>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    3908:	4a0e      	ldr	r2, [pc, #56]	; (3944 <__NVIC_GetPriority+0x78>)
    390a:	1dfb      	adds	r3, r7, #7
    390c:	781b      	ldrb	r3, [r3, #0]
    390e:	b25b      	sxtb	r3, r3
    3910:	210f      	movs	r1, #15
    3912:	400b      	ands	r3, r1
    3914:	3b08      	subs	r3, #8
    3916:	089b      	lsrs	r3, r3, #2
    3918:	3306      	adds	r3, #6
    391a:	009b      	lsls	r3, r3, #2
    391c:	18d3      	adds	r3, r2, r3
    391e:	3304      	adds	r3, #4
    3920:	681a      	ldr	r2, [r3, #0]
    3922:	1dfb      	adds	r3, r7, #7
    3924:	781b      	ldrb	r3, [r3, #0]
    3926:	b25b      	sxtb	r3, r3
    3928:	2103      	movs	r1, #3
    392a:	400b      	ands	r3, r1
    392c:	00db      	lsls	r3, r3, #3
    392e:	40da      	lsrs	r2, r3
    3930:	0013      	movs	r3, r2
    3932:	099b      	lsrs	r3, r3, #6
    3934:	2203      	movs	r2, #3
    3936:	4013      	ands	r3, r2
}
    3938:	0018      	movs	r0, r3
    393a:	46bd      	mov	sp, r7
    393c:	b002      	add	sp, #8
    393e:	bd80      	pop	{r7, pc}
    3940:	e000e100 	.word	0xe000e100
    3944:	e000ed00 	.word	0xe000ed00

00003948 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    3948:	b580      	push	{r7, lr}
    394a:	b082      	sub	sp, #8
    394c:	af00      	add	r7, sp, #0
    394e:	6078      	str	r0, [r7, #4]
    3950:	2301      	movs	r3, #1
    3952:	0018      	movs	r0, r3
    3954:	46bd      	mov	sp, r7
    3956:	b002      	add	sp, #8
    3958:	bd80      	pop	{r7, pc}

0000395a <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:

#define NO_RTS_PIN 255
#define NO_CTS_PIN 255
#define RTS_RX_THRESHOLD 10

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    395a:	b590      	push	{r4, r7, lr}
    395c:	b089      	sub	sp, #36	; 0x24
    395e:	af04      	add	r7, sp, #16
    3960:	60f8      	str	r0, [r7, #12]
    3962:	60b9      	str	r1, [r7, #8]
    3964:	0019      	movs	r1, r3
    3966:	1dfb      	adds	r3, r7, #7
    3968:	701a      	strb	r2, [r3, #0]
    396a:	1dbb      	adds	r3, r7, #6
    396c:	1c0a      	adds	r2, r1, #0
    396e:	701a      	strb	r2, [r3, #0]
  Uart(_s, _pinRX, _pinTX, _padRX, _padTX, NO_RTS_PIN, NO_CTS_PIN)
    3970:	1dbb      	adds	r3, r7, #6
    3972:	781c      	ldrb	r4, [r3, #0]
    3974:	1dfb      	adds	r3, r7, #7
    3976:	781a      	ldrb	r2, [r3, #0]
    3978:	68b9      	ldr	r1, [r7, #8]
    397a:	68f8      	ldr	r0, [r7, #12]
    397c:	23ff      	movs	r3, #255	; 0xff
    397e:	9303      	str	r3, [sp, #12]
    3980:	23ff      	movs	r3, #255	; 0xff
    3982:	9302      	str	r3, [sp, #8]
    3984:	2324      	movs	r3, #36	; 0x24
    3986:	18fb      	adds	r3, r7, r3
    3988:	781b      	ldrb	r3, [r3, #0]
    398a:	9301      	str	r3, [sp, #4]
    398c:	2320      	movs	r3, #32
    398e:	18fb      	adds	r3, r7, r3
    3990:	781b      	ldrb	r3, [r3, #0]
    3992:	9300      	str	r3, [sp, #0]
    3994:	0023      	movs	r3, r4
    3996:	f000 f805 	bl	39a4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>
{
}
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	0018      	movs	r0, r3
    399e:	46bd      	mov	sp, r7
    39a0:	b005      	add	sp, #20
    39a2:	bd90      	pop	{r4, r7, pc}

000039a4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>:

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    39a4:	b580      	push	{r7, lr}
    39a6:	b084      	sub	sp, #16
    39a8:	af00      	add	r7, sp, #0
    39aa:	60f8      	str	r0, [r7, #12]
    39ac:	60b9      	str	r1, [r7, #8]
    39ae:	0019      	movs	r1, r3
    39b0:	1dfb      	adds	r3, r7, #7
    39b2:	701a      	strb	r2, [r3, #0]
    39b4:	1dbb      	adds	r3, r7, #6
    39b6:	1c0a      	adds	r2, r1, #0
    39b8:	701a      	strb	r2, [r3, #0]
    39ba:	68fb      	ldr	r3, [r7, #12]
    39bc:	0018      	movs	r0, r3
    39be:	f7ff ff37 	bl	3830 <_ZN14HardwareSerialC1Ev>
    39c2:	4a1b      	ldr	r2, [pc, #108]	; (3a30 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x8c>)
    39c4:	68fb      	ldr	r3, [r7, #12]
    39c6:	601a      	str	r2, [r3, #0]
    39c8:	68fb      	ldr	r3, [r7, #12]
    39ca:	3314      	adds	r3, #20
    39cc:	0018      	movs	r0, r3
    39ce:	f000 fad6 	bl	3f7e <_ZN11RingBufferNILi64EEC1Ev>
    39d2:	68fb      	ldr	r3, [r7, #12]
    39d4:	335c      	adds	r3, #92	; 0x5c
    39d6:	0018      	movs	r0, r3
    39d8:	f000 fad1 	bl	3f7e <_ZN11RingBufferNILi64EEC1Ev>
{
  sercom = _s;
    39dc:	68fb      	ldr	r3, [r7, #12]
    39de:	68ba      	ldr	r2, [r7, #8]
    39e0:	611a      	str	r2, [r3, #16]
  uc_pinRX = _pinRX;
    39e2:	68fb      	ldr	r3, [r7, #12]
    39e4:	1dfa      	adds	r2, r7, #7
    39e6:	21a4      	movs	r1, #164	; 0xa4
    39e8:	7812      	ldrb	r2, [r2, #0]
    39ea:	545a      	strb	r2, [r3, r1]
  uc_pinTX = _pinTX;
    39ec:	68fb      	ldr	r3, [r7, #12]
    39ee:	1dba      	adds	r2, r7, #6
    39f0:	21a5      	movs	r1, #165	; 0xa5
    39f2:	7812      	ldrb	r2, [r2, #0]
    39f4:	545a      	strb	r2, [r3, r1]
  uc_padRX = _padRX ;
    39f6:	68fb      	ldr	r3, [r7, #12]
    39f8:	2218      	movs	r2, #24
    39fa:	18ba      	adds	r2, r7, r2
    39fc:	21a6      	movs	r1, #166	; 0xa6
    39fe:	7812      	ldrb	r2, [r2, #0]
    3a00:	545a      	strb	r2, [r3, r1]
  uc_padTX = _padTX;
    3a02:	68fb      	ldr	r3, [r7, #12]
    3a04:	221c      	movs	r2, #28
    3a06:	18ba      	adds	r2, r7, r2
    3a08:	21a7      	movs	r1, #167	; 0xa7
    3a0a:	7812      	ldrb	r2, [r2, #0]
    3a0c:	545a      	strb	r2, [r3, r1]
  uc_pinRTS = _pinRTS;
    3a0e:	68fb      	ldr	r3, [r7, #12]
    3a10:	2220      	movs	r2, #32
    3a12:	18ba      	adds	r2, r7, r2
    3a14:	21a8      	movs	r1, #168	; 0xa8
    3a16:	7812      	ldrb	r2, [r2, #0]
    3a18:	545a      	strb	r2, [r3, r1]
  uc_pinCTS = _pinCTS;
    3a1a:	68fb      	ldr	r3, [r7, #12]
    3a1c:	2224      	movs	r2, #36	; 0x24
    3a1e:	18ba      	adds	r2, r7, r2
    3a20:	21b8      	movs	r1, #184	; 0xb8
    3a22:	7812      	ldrb	r2, [r2, #0]
    3a24:	545a      	strb	r2, [r3, r1]
}
    3a26:	68fb      	ldr	r3, [r7, #12]
    3a28:	0018      	movs	r0, r3
    3a2a:	46bd      	mov	sp, r7
    3a2c:	b004      	add	sp, #16
    3a2e:	bd80      	pop	{r7, pc}
    3a30:	000135e0 	.word	0x000135e0

00003a34 <_ZN4Uart5beginEm>:

void Uart::begin(unsigned long baudrate)
{
    3a34:	b580      	push	{r7, lr}
    3a36:	b082      	sub	sp, #8
    3a38:	af00      	add	r7, sp, #0
    3a3a:	6078      	str	r0, [r7, #4]
    3a3c:	6039      	str	r1, [r7, #0]
  begin(baudrate, SERIAL_8N1);
    3a3e:	687b      	ldr	r3, [r7, #4]
    3a40:	681b      	ldr	r3, [r3, #0]
    3a42:	3328      	adds	r3, #40	; 0x28
    3a44:	681b      	ldr	r3, [r3, #0]
    3a46:	4a04      	ldr	r2, [pc, #16]	; (3a58 <_ZN4Uart5beginEm+0x24>)
    3a48:	6839      	ldr	r1, [r7, #0]
    3a4a:	6878      	ldr	r0, [r7, #4]
    3a4c:	4798      	blx	r3
}
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	46bd      	mov	sp, r7
    3a52:	b002      	add	sp, #8
    3a54:	bd80      	pop	{r7, pc}
    3a56:	46c0      	nop			; (mov r8, r8)
    3a58:	00000413 	.word	0x00000413

00003a5c <_ZN4Uart5beginEmt>:

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    3a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a5e:	b089      	sub	sp, #36	; 0x24
    3a60:	af02      	add	r7, sp, #8
    3a62:	60f8      	str	r0, [r7, #12]
    3a64:	60b9      	str	r1, [r7, #8]
    3a66:	1dbb      	adds	r3, r7, #6
    3a68:	801a      	strh	r2, [r3, #0]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3a6a:	68fb      	ldr	r3, [r7, #12]
    3a6c:	22a4      	movs	r2, #164	; 0xa4
    3a6e:	5c9b      	ldrb	r3, [r3, r2]
    3a70:	0018      	movs	r0, r3
    3a72:	68fb      	ldr	r3, [r7, #12]
    3a74:	22a4      	movs	r2, #164	; 0xa4
    3a76:	5c9b      	ldrb	r3, [r3, r2]
    3a78:	0019      	movs	r1, r3
    3a7a:	4a61      	ldr	r2, [pc, #388]	; (3c00 <_ZN4Uart5beginEmt+0x1a4>)
    3a7c:	000b      	movs	r3, r1
    3a7e:	005b      	lsls	r3, r3, #1
    3a80:	185b      	adds	r3, r3, r1
    3a82:	00db      	lsls	r3, r3, #3
    3a84:	18d3      	adds	r3, r2, r3
    3a86:	3308      	adds	r3, #8
    3a88:	781b      	ldrb	r3, [r3, #0]
    3a8a:	b25b      	sxtb	r3, r3
    3a8c:	0019      	movs	r1, r3
    3a8e:	f003 f987 	bl	6da0 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    3a92:	68fb      	ldr	r3, [r7, #12]
    3a94:	22a5      	movs	r2, #165	; 0xa5
    3a96:	5c9b      	ldrb	r3, [r3, r2]
    3a98:	0018      	movs	r0, r3
    3a9a:	68fb      	ldr	r3, [r7, #12]
    3a9c:	22a5      	movs	r2, #165	; 0xa5
    3a9e:	5c9b      	ldrb	r3, [r3, r2]
    3aa0:	0019      	movs	r1, r3
    3aa2:	4a57      	ldr	r2, [pc, #348]	; (3c00 <_ZN4Uart5beginEmt+0x1a4>)
    3aa4:	000b      	movs	r3, r1
    3aa6:	005b      	lsls	r3, r3, #1
    3aa8:	185b      	adds	r3, r3, r1
    3aaa:	00db      	lsls	r3, r3, #3
    3aac:	18d3      	adds	r3, r2, r3
    3aae:	3308      	adds	r3, #8
    3ab0:	781b      	ldrb	r3, [r3, #0]
    3ab2:	b25b      	sxtb	r3, r3
    3ab4:	0019      	movs	r1, r3
    3ab6:	f003 f973 	bl	6da0 <pinPeripheral>

  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    3aba:	68fb      	ldr	r3, [r7, #12]
    3abc:	22a7      	movs	r2, #167	; 0xa7
    3abe:	5c9b      	ldrb	r3, [r3, r2]
    3ac0:	2b02      	cmp	r3, #2
    3ac2:	d118      	bne.n	3af6 <_ZN4Uart5beginEmt+0x9a>
    if (uc_pinCTS != NO_CTS_PIN) {
    3ac4:	68fb      	ldr	r3, [r7, #12]
    3ac6:	22b8      	movs	r2, #184	; 0xb8
    3ac8:	5c9b      	ldrb	r3, [r3, r2]
    3aca:	2bff      	cmp	r3, #255	; 0xff
    3acc:	d013      	beq.n	3af6 <_ZN4Uart5beginEmt+0x9a>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    3ace:	68fb      	ldr	r3, [r7, #12]
    3ad0:	22b8      	movs	r2, #184	; 0xb8
    3ad2:	5c9b      	ldrb	r3, [r3, r2]
    3ad4:	0018      	movs	r0, r3
    3ad6:	68fb      	ldr	r3, [r7, #12]
    3ad8:	22b8      	movs	r2, #184	; 0xb8
    3ada:	5c9b      	ldrb	r3, [r3, r2]
    3adc:	0019      	movs	r1, r3
    3ade:	4a48      	ldr	r2, [pc, #288]	; (3c00 <_ZN4Uart5beginEmt+0x1a4>)
    3ae0:	000b      	movs	r3, r1
    3ae2:	005b      	lsls	r3, r3, #1
    3ae4:	185b      	adds	r3, r3, r1
    3ae6:	00db      	lsls	r3, r3, #3
    3ae8:	18d3      	adds	r3, r2, r3
    3aea:	3308      	adds	r3, #8
    3aec:	781b      	ldrb	r3, [r3, #0]
    3aee:	b25b      	sxtb	r3, r3
    3af0:	0019      	movs	r1, r3
    3af2:	f003 f955 	bl	6da0 <pinPeripheral>
    }
  }

  if (uc_pinRTS != NO_RTS_PIN) {
    3af6:	68fb      	ldr	r3, [r7, #12]
    3af8:	22a8      	movs	r2, #168	; 0xa8
    3afa:	5c9b      	ldrb	r3, [r3, r2]
    3afc:	2bff      	cmp	r3, #255	; 0xff
    3afe:	d041      	beq.n	3b84 <_ZN4Uart5beginEmt+0x128>
    pinMode(uc_pinRTS, OUTPUT);
    3b00:	68fb      	ldr	r3, [r7, #12]
    3b02:	22a8      	movs	r2, #168	; 0xa8
    3b04:	5c9b      	ldrb	r3, [r3, r2]
    3b06:	2101      	movs	r1, #1
    3b08:	0018      	movs	r0, r3
    3b0a:	f002 ffad 	bl	6a68 <pinMode>

    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    3b0e:	68fb      	ldr	r3, [r7, #12]
    3b10:	22a8      	movs	r2, #168	; 0xa8
    3b12:	5c9b      	ldrb	r3, [r3, r2]
    3b14:	0018      	movs	r0, r3
    3b16:	2317      	movs	r3, #23
    3b18:	18fa      	adds	r2, r7, r3
    3b1a:	4939      	ldr	r1, [pc, #228]	; (3c00 <_ZN4Uart5beginEmt+0x1a4>)
    3b1c:	0003      	movs	r3, r0
    3b1e:	005b      	lsls	r3, r3, #1
    3b20:	181b      	adds	r3, r3, r0
    3b22:	00db      	lsls	r3, r3, #3
    3b24:	5c5b      	ldrb	r3, [r3, r1]
    3b26:	7013      	strb	r3, [r2, #0]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    3b28:	2317      	movs	r3, #23
    3b2a:	18fb      	adds	r3, r7, r3
    3b2c:	781b      	ldrb	r3, [r3, #0]
    3b2e:	b25b      	sxtb	r3, r3
    3b30:	01db      	lsls	r3, r3, #7
    3b32:	3318      	adds	r3, #24
    3b34:	4a33      	ldr	r2, [pc, #204]	; (3c04 <_ZN4Uart5beginEmt+0x1a8>)
    3b36:	189a      	adds	r2, r3, r2
    3b38:	68fb      	ldr	r3, [r7, #12]
    3b3a:	21ac      	movs	r1, #172	; 0xac
    3b3c:	505a      	str	r2, [r3, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    3b3e:	2317      	movs	r3, #23
    3b40:	18fb      	adds	r3, r7, r3
    3b42:	781b      	ldrb	r3, [r3, #0]
    3b44:	b25b      	sxtb	r3, r3
    3b46:	01db      	lsls	r3, r3, #7
    3b48:	3314      	adds	r3, #20
    3b4a:	4a2e      	ldr	r2, [pc, #184]	; (3c04 <_ZN4Uart5beginEmt+0x1a8>)
    3b4c:	189a      	adds	r2, r3, r2
    3b4e:	68fb      	ldr	r3, [r7, #12]
    3b50:	21b0      	movs	r1, #176	; 0xb0
    3b52:	505a      	str	r2, [r3, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    3b54:	68fb      	ldr	r3, [r7, #12]
    3b56:	22a8      	movs	r2, #168	; 0xa8
    3b58:	5c9b      	ldrb	r3, [r3, r2]
    3b5a:	0019      	movs	r1, r3
    3b5c:	4a28      	ldr	r2, [pc, #160]	; (3c00 <_ZN4Uart5beginEmt+0x1a4>)
    3b5e:	000b      	movs	r3, r1
    3b60:	005b      	lsls	r3, r3, #1
    3b62:	185b      	adds	r3, r3, r1
    3b64:	00db      	lsls	r3, r3, #3
    3b66:	18d3      	adds	r3, r2, r3
    3b68:	3304      	adds	r3, #4
    3b6a:	681b      	ldr	r3, [r3, #0]
    3b6c:	2201      	movs	r2, #1
    3b6e:	409a      	lsls	r2, r3
    3b70:	68fb      	ldr	r3, [r7, #12]
    3b72:	21b4      	movs	r1, #180	; 0xb4
    3b74:	505a      	str	r2, [r3, r1]

    *pul_outclrRTS = ul_pinMaskRTS;
    3b76:	68fb      	ldr	r3, [r7, #12]
    3b78:	22b0      	movs	r2, #176	; 0xb0
    3b7a:	589b      	ldr	r3, [r3, r2]
    3b7c:	68fa      	ldr	r2, [r7, #12]
    3b7e:	21b4      	movs	r1, #180	; 0xb4
    3b80:	5852      	ldr	r2, [r2, r1]
    3b82:	601a      	str	r2, [r3, #0]
  }

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    3b84:	68fb      	ldr	r3, [r7, #12]
    3b86:	6918      	ldr	r0, [r3, #16]
    3b88:	68bb      	ldr	r3, [r7, #8]
    3b8a:	2201      	movs	r2, #1
    3b8c:	2101      	movs	r1, #1
    3b8e:	f009 ff59 	bl	da44 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    3b92:	68fb      	ldr	r3, [r7, #12]
    3b94:	691c      	ldr	r4, [r3, #16]
    3b96:	1dbb      	adds	r3, r7, #6
    3b98:	881a      	ldrh	r2, [r3, #0]
    3b9a:	68fb      	ldr	r3, [r7, #12]
    3b9c:	0011      	movs	r1, r2
    3b9e:	0018      	movs	r0, r3
    3ba0:	f000 f9b2 	bl	3f08 <_ZN4Uart15extractCharSizeEt>
    3ba4:	0003      	movs	r3, r0
    3ba6:	001d      	movs	r5, r3
    3ba8:	1dbb      	adds	r3, r7, #6
    3baa:	881a      	ldrh	r2, [r3, #0]
    3bac:	68fb      	ldr	r3, [r7, #12]
    3bae:	0011      	movs	r1, r2
    3bb0:	0018      	movs	r0, r3
    3bb2:	f000 f9cc 	bl	3f4e <_ZN4Uart13extractParityEt>
    3bb6:	0003      	movs	r3, r0
    3bb8:	001e      	movs	r6, r3
    3bba:	1dbb      	adds	r3, r7, #6
    3bbc:	881a      	ldrh	r2, [r3, #0]
    3bbe:	68fb      	ldr	r3, [r7, #12]
    3bc0:	0011      	movs	r1, r2
    3bc2:	0018      	movs	r0, r3
    3bc4:	f000 f98c 	bl	3ee0 <_ZN4Uart16extractNbStopBitEt>
    3bc8:	0003      	movs	r3, r0
    3bca:	9300      	str	r3, [sp, #0]
    3bcc:	0033      	movs	r3, r6
    3bce:	2201      	movs	r2, #1
    3bd0:	0029      	movs	r1, r5
    3bd2:	0020      	movs	r0, r4
    3bd4:	f009 ffaa 	bl	db2c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    3bd8:	68fb      	ldr	r3, [r7, #12]
    3bda:	6918      	ldr	r0, [r3, #16]
    3bdc:	68fb      	ldr	r3, [r7, #12]
    3bde:	22a7      	movs	r2, #167	; 0xa7
    3be0:	5c99      	ldrb	r1, [r3, r2]
    3be2:	68fb      	ldr	r3, [r7, #12]
    3be4:	22a6      	movs	r2, #166	; 0xa6
    3be6:	5c9b      	ldrb	r3, [r3, r2]
    3be8:	001a      	movs	r2, r3
    3bea:	f009 ffe3 	bl	dbb4 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    3bee:	68fb      	ldr	r3, [r7, #12]
    3bf0:	691b      	ldr	r3, [r3, #16]
    3bf2:	0018      	movs	r0, r3
    3bf4:	f00a f831 	bl	dc5a <_ZN6SERCOM10enableUARTEv>
}
    3bf8:	46c0      	nop			; (mov r8, r8)
    3bfa:	46bd      	mov	sp, r7
    3bfc:	b007      	add	sp, #28
    3bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c00:	000138cc 	.word	0x000138cc
    3c04:	41004400 	.word	0x41004400

00003c08 <_ZN4Uart3endEv>:

void Uart::end()
{
    3c08:	b580      	push	{r7, lr}
    3c0a:	b082      	sub	sp, #8
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
  sercom->resetUART();
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	691b      	ldr	r3, [r3, #16]
    3c14:	0018      	movs	r0, r3
    3c16:	f009 fffc 	bl	dc12 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    3c1a:	687b      	ldr	r3, [r7, #4]
    3c1c:	3314      	adds	r3, #20
    3c1e:	0018      	movs	r0, r3
    3c20:	f000 f9c0 	bl	3fa4 <_ZN11RingBufferNILi64EE5clearEv>
  txBuffer.clear();
    3c24:	687b      	ldr	r3, [r7, #4]
    3c26:	335c      	adds	r3, #92	; 0x5c
    3c28:	0018      	movs	r0, r3
    3c2a:	f000 f9bb 	bl	3fa4 <_ZN11RingBufferNILi64EE5clearEv>
}
    3c2e:	46c0      	nop			; (mov r8, r8)
    3c30:	46bd      	mov	sp, r7
    3c32:	b002      	add	sp, #8
    3c34:	bd80      	pop	{r7, pc}

00003c36 <_ZN4Uart5flushEv>:

void Uart::flush()
{
    3c36:	b580      	push	{r7, lr}
    3c38:	b082      	sub	sp, #8
    3c3a:	af00      	add	r7, sp, #0
    3c3c:	6078      	str	r0, [r7, #4]
  while(txBuffer.available()); // wait until TX buffer is empty
    3c3e:	687b      	ldr	r3, [r7, #4]
    3c40:	335c      	adds	r3, #92	; 0x5c
    3c42:	0018      	movs	r0, r3
    3c44:	f000 f9bc 	bl	3fc0 <_ZN11RingBufferNILi64EE9availableEv>
    3c48:	0003      	movs	r3, r0
    3c4a:	1e5a      	subs	r2, r3, #1
    3c4c:	4193      	sbcs	r3, r2
    3c4e:	b2db      	uxtb	r3, r3
    3c50:	2b00      	cmp	r3, #0
    3c52:	d000      	beq.n	3c56 <_ZN4Uart5flushEv+0x20>
    3c54:	e7f3      	b.n	3c3e <_ZN4Uart5flushEv+0x8>

  sercom->flushUART();
    3c56:	687b      	ldr	r3, [r7, #4]
    3c58:	691b      	ldr	r3, [r3, #16]
    3c5a:	0018      	movs	r0, r3
    3c5c:	f00a f814 	bl	dc88 <_ZN6SERCOM9flushUARTEv>
}
    3c60:	46c0      	nop			; (mov r8, r8)
    3c62:	46bd      	mov	sp, r7
    3c64:	b002      	add	sp, #8
    3c66:	bd80      	pop	{r7, pc}

00003c68 <_ZN4Uart10IrqHandlerEv>:

void Uart::IrqHandler()
{
    3c68:	b590      	push	{r4, r7, lr}
    3c6a:	b085      	sub	sp, #20
    3c6c:	af00      	add	r7, sp, #0
    3c6e:	6078      	str	r0, [r7, #4]
  if (sercom->availableDataUART()) {
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	691b      	ldr	r3, [r3, #16]
    3c74:	0018      	movs	r0, r3
    3c76:	f00a f82d 	bl	dcd4 <_ZN6SERCOM17availableDataUARTEv>
    3c7a:	1e03      	subs	r3, r0, #0
    3c7c:	d027      	beq.n	3cce <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	3314      	adds	r3, #20
    3c82:	001c      	movs	r4, r3
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	691b      	ldr	r3, [r3, #16]
    3c88:	0018      	movs	r0, r3
    3c8a:	f00a f85c 	bl	dd46 <_ZN6SERCOM12readDataUARTEv>
    3c8e:	0003      	movs	r3, r0
    3c90:	0019      	movs	r1, r3
    3c92:	0020      	movs	r0, r4
    3c94:	f000 f9a9 	bl	3fea <_ZN11RingBufferNILi64EE10store_charEh>

    if (uc_pinRTS != NO_RTS_PIN) {
    3c98:	687b      	ldr	r3, [r7, #4]
    3c9a:	22a8      	movs	r2, #168	; 0xa8
    3c9c:	5c9b      	ldrb	r3, [r3, r2]
    3c9e:	2bff      	cmp	r3, #255	; 0xff
    3ca0:	d015      	beq.n	3cce <_ZN4Uart10IrqHandlerEv+0x66>
      // RX buffer space is below the threshold, de-assert RTS
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    3ca2:	687b      	ldr	r3, [r7, #4]
    3ca4:	3314      	adds	r3, #20
    3ca6:	0018      	movs	r0, r3
    3ca8:	f000 f9c5 	bl	4036 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3cac:	0002      	movs	r2, r0
    3cae:	2309      	movs	r3, #9
    3cb0:	0fd0      	lsrs	r0, r2, #31
    3cb2:	17d9      	asrs	r1, r3, #31
    3cb4:	4293      	cmp	r3, r2
    3cb6:	4148      	adcs	r0, r1
    3cb8:	0003      	movs	r3, r0
    3cba:	b2db      	uxtb	r3, r3
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d006      	beq.n	3cce <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    3cc0:	687b      	ldr	r3, [r7, #4]
    3cc2:	22ac      	movs	r2, #172	; 0xac
    3cc4:	589b      	ldr	r3, [r3, r2]
    3cc6:	687a      	ldr	r2, [r7, #4]
    3cc8:	21b4      	movs	r1, #180	; 0xb4
    3cca:	5852      	ldr	r2, [r2, r1]
    3ccc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  if (sercom->isDataRegisterEmptyUART()) {
    3cce:	687b      	ldr	r3, [r7, #4]
    3cd0:	691b      	ldr	r3, [r3, #16]
    3cd2:	0018      	movs	r0, r3
    3cd4:	f00a f829 	bl	dd2a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3cd8:	1e03      	subs	r3, r0, #0
    3cda:	d022      	beq.n	3d22 <_ZN4Uart10IrqHandlerEv+0xba>
    if (txBuffer.available()) {
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	335c      	adds	r3, #92	; 0x5c
    3ce0:	0018      	movs	r0, r3
    3ce2:	f000 f96d 	bl	3fc0 <_ZN11RingBufferNILi64EE9availableEv>
    3ce6:	0003      	movs	r3, r0
    3ce8:	1e5a      	subs	r2, r3, #1
    3cea:	4193      	sbcs	r3, r2
    3cec:	b2db      	uxtb	r3, r3
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d012      	beq.n	3d18 <_ZN4Uart10IrqHandlerEv+0xb0>
      uint8_t data = txBuffer.read_char();
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	335c      	adds	r3, #92	; 0x5c
    3cf6:	0018      	movs	r0, r3
    3cf8:	f000 f9bf 	bl	407a <_ZN11RingBufferNILi64EE9read_charEv>
    3cfc:	0002      	movs	r2, r0
    3cfe:	230f      	movs	r3, #15
    3d00:	18fb      	adds	r3, r7, r3
    3d02:	701a      	strb	r2, [r3, #0]

      sercom->writeDataUART(data);
    3d04:	687b      	ldr	r3, [r7, #4]
    3d06:	691a      	ldr	r2, [r3, #16]
    3d08:	230f      	movs	r3, #15
    3d0a:	18fb      	adds	r3, r7, r3
    3d0c:	781b      	ldrb	r3, [r3, #0]
    3d0e:	0019      	movs	r1, r3
    3d10:	0010      	movs	r0, r2
    3d12:	f00a f827 	bl	dd64 <_ZN6SERCOM13writeDataUARTEh>
    3d16:	e004      	b.n	3d22 <_ZN4Uart10IrqHandlerEv+0xba>
    } else {
      sercom->disableDataRegisterEmptyInterruptUART();
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	691b      	ldr	r3, [r3, #16]
    3d1c:	0018      	movs	r0, r3
    3d1e:	f00a f84b 	bl	ddb8 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    }
  }

  if (sercom->isUARTError()) {
    3d22:	687b      	ldr	r3, [r7, #4]
    3d24:	691b      	ldr	r3, [r3, #16]
    3d26:	0018      	movs	r0, r3
    3d28:	f009 ffe2 	bl	dcf0 <_ZN6SERCOM11isUARTErrorEv>
    3d2c:	1e03      	subs	r3, r0, #0
    3d2e:	d009      	beq.n	3d44 <_ZN4Uart10IrqHandlerEv+0xdc>
    sercom->acknowledgeUARTError();
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	691b      	ldr	r3, [r3, #16]
    3d34:	0018      	movs	r0, r3
    3d36:	f009 ffe9 	bl	dd0c <_ZN6SERCOM20acknowledgeUARTErrorEv>
    // TODO: if (sercom->isBufferOverflowErrorUART()) ....
    // TODO: if (sercom->isFrameErrorUART()) ....
    // TODO: if (sercom->isParityErrorUART()) ....
    sercom->clearStatusUART();
    3d3a:	687b      	ldr	r3, [r7, #4]
    3d3c:	691b      	ldr	r3, [r3, #16]
    3d3e:	0018      	movs	r0, r3
    3d40:	f009 ffbc 	bl	dcbc <_ZN6SERCOM15clearStatusUARTEv>
  }
}
    3d44:	46c0      	nop			; (mov r8, r8)
    3d46:	46bd      	mov	sp, r7
    3d48:	b005      	add	sp, #20
    3d4a:	bd90      	pop	{r4, r7, pc}

00003d4c <_ZN4Uart9availableEv>:

int Uart::available()
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b082      	sub	sp, #8
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
  return rxBuffer.available();
    3d54:	687b      	ldr	r3, [r7, #4]
    3d56:	3314      	adds	r3, #20
    3d58:	0018      	movs	r0, r3
    3d5a:	f000 f931 	bl	3fc0 <_ZN11RingBufferNILi64EE9availableEv>
    3d5e:	0003      	movs	r3, r0
}
    3d60:	0018      	movs	r0, r3
    3d62:	46bd      	mov	sp, r7
    3d64:	b002      	add	sp, #8
    3d66:	bd80      	pop	{r7, pc}

00003d68 <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    3d68:	b580      	push	{r7, lr}
    3d6a:	b082      	sub	sp, #8
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	6078      	str	r0, [r7, #4]
  return txBuffer.availableForStore();
    3d70:	687b      	ldr	r3, [r7, #4]
    3d72:	335c      	adds	r3, #92	; 0x5c
    3d74:	0018      	movs	r0, r3
    3d76:	f000 f95e 	bl	4036 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3d7a:	0003      	movs	r3, r0
}
    3d7c:	0018      	movs	r0, r3
    3d7e:	46bd      	mov	sp, r7
    3d80:	b002      	add	sp, #8
    3d82:	bd80      	pop	{r7, pc}

00003d84 <_ZN4Uart4peekEv>:

int Uart::peek()
{
    3d84:	b580      	push	{r7, lr}
    3d86:	b082      	sub	sp, #8
    3d88:	af00      	add	r7, sp, #0
    3d8a:	6078      	str	r0, [r7, #4]
  return rxBuffer.peek();
    3d8c:	687b      	ldr	r3, [r7, #4]
    3d8e:	3314      	adds	r3, #20
    3d90:	0018      	movs	r0, r3
    3d92:	f000 f99b 	bl	40cc <_ZN11RingBufferNILi64EE4peekEv>
    3d96:	0003      	movs	r3, r0
}
    3d98:	0018      	movs	r0, r3
    3d9a:	46bd      	mov	sp, r7
    3d9c:	b002      	add	sp, #8
    3d9e:	bd80      	pop	{r7, pc}

00003da0 <_ZN4Uart4readEv>:

int Uart::read()
{
    3da0:	b580      	push	{r7, lr}
    3da2:	b084      	sub	sp, #16
    3da4:	af00      	add	r7, sp, #0
    3da6:	6078      	str	r0, [r7, #4]
  int c = rxBuffer.read_char();
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	3314      	adds	r3, #20
    3dac:	0018      	movs	r0, r3
    3dae:	f000 f964 	bl	407a <_ZN11RingBufferNILi64EE9read_charEv>
    3db2:	0003      	movs	r3, r0
    3db4:	60fb      	str	r3, [r7, #12]

  if (uc_pinRTS != NO_RTS_PIN) {
    3db6:	687b      	ldr	r3, [r7, #4]
    3db8:	22a8      	movs	r2, #168	; 0xa8
    3dba:	5c9b      	ldrb	r3, [r3, r2]
    3dbc:	2bff      	cmp	r3, #255	; 0xff
    3dbe:	d014      	beq.n	3dea <_ZN4Uart4readEv+0x4a>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    3dc0:	687b      	ldr	r3, [r7, #4]
    3dc2:	3314      	adds	r3, #20
    3dc4:	0018      	movs	r0, r3
    3dc6:	f000 f936 	bl	4036 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3dca:	0003      	movs	r3, r0
    3dcc:	2201      	movs	r2, #1
    3dce:	2b0a      	cmp	r3, #10
    3dd0:	dc01      	bgt.n	3dd6 <_ZN4Uart4readEv+0x36>
    3dd2:	2300      	movs	r3, #0
    3dd4:	1c1a      	adds	r2, r3, #0
    3dd6:	b2d3      	uxtb	r3, r2
    3dd8:	2b00      	cmp	r3, #0
    3dda:	d006      	beq.n	3dea <_ZN4Uart4readEv+0x4a>
      *pul_outclrRTS = ul_pinMaskRTS;
    3ddc:	687b      	ldr	r3, [r7, #4]
    3dde:	22b0      	movs	r2, #176	; 0xb0
    3de0:	589b      	ldr	r3, [r3, r2]
    3de2:	687a      	ldr	r2, [r7, #4]
    3de4:	21b4      	movs	r1, #180	; 0xb4
    3de6:	5852      	ldr	r2, [r2, r1]
    3de8:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
    3dea:	68fb      	ldr	r3, [r7, #12]
}
    3dec:	0018      	movs	r0, r3
    3dee:	46bd      	mov	sp, r7
    3df0:	b004      	add	sp, #16
    3df2:	bd80      	pop	{r7, pc}

00003df4 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    3df4:	b580      	push	{r7, lr}
    3df6:	b086      	sub	sp, #24
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
    3dfc:	000a      	movs	r2, r1
    3dfe:	1cfb      	adds	r3, r7, #3
    3e00:	701a      	strb	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	691b      	ldr	r3, [r3, #16]
    3e06:	0018      	movs	r0, r3
    3e08:	f009 ff8f 	bl	dd2a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3e0c:	1e03      	subs	r3, r0, #0
    3e0e:	d008      	beq.n	3e22 <_ZN4Uart5writeEh+0x2e>
    3e10:	687b      	ldr	r3, [r7, #4]
    3e12:	335c      	adds	r3, #92	; 0x5c
    3e14:	0018      	movs	r0, r3
    3e16:	f000 f8d3 	bl	3fc0 <_ZN11RingBufferNILi64EE9availableEv>
    3e1a:	1e03      	subs	r3, r0, #0
    3e1c:	d101      	bne.n	3e22 <_ZN4Uart5writeEh+0x2e>
    3e1e:	2301      	movs	r3, #1
    3e20:	e000      	b.n	3e24 <_ZN4Uart5writeEh+0x30>
    3e22:	2300      	movs	r3, #0
    3e24:	2b00      	cmp	r3, #0
    3e26:	d008      	beq.n	3e3a <_ZN4Uart5writeEh+0x46>
    sercom->writeDataUART(data);
    3e28:	687b      	ldr	r3, [r7, #4]
    3e2a:	691a      	ldr	r2, [r3, #16]
    3e2c:	1cfb      	adds	r3, r7, #3
    3e2e:	781b      	ldrb	r3, [r3, #0]
    3e30:	0019      	movs	r1, r3
    3e32:	0010      	movs	r0, r2
    3e34:	f009 ff96 	bl	dd64 <_ZN6SERCOM13writeDataUARTEh>
    3e38:	e04b      	b.n	3ed2 <_ZN4Uart5writeEh+0xde>
  } else {
    // spin lock until a spot opens up in the buffer
    while(txBuffer.isFull()) {
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	335c      	adds	r3, #92	; 0x5c
    3e3e:	0018      	movs	r0, r3
    3e40:	f000 f95d 	bl	40fe <_ZN11RingBufferNILi64EE6isFullEv>
    3e44:	1e03      	subs	r3, r0, #0
    3e46:	d036      	beq.n	3eb6 <_ZN4Uart5writeEh+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e48:	f3ef 8310 	mrs	r3, PRIMASK
    3e4c:	60fb      	str	r3, [r7, #12]
  return(result);
    3e4e:	68fb      	ldr	r3, [r7, #12]
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);
    3e50:	2201      	movs	r2, #1
    3e52:	4013      	ands	r3, r2
    3e54:	425a      	negs	r2, r3
    3e56:	4153      	adcs	r3, r2
    3e58:	b2da      	uxtb	r2, r3
    3e5a:	2317      	movs	r3, #23
    3e5c:	18fb      	adds	r3, r7, r3
    3e5e:	701a      	strb	r2, [r3, #0]

      if (interruptsEnabled) {
    3e60:	2317      	movs	r3, #23
    3e62:	18fb      	adds	r3, r7, r3
    3e64:	781b      	ldrb	r3, [r3, #0]
    3e66:	2b00      	cmp	r3, #0
    3e68:	d017      	beq.n	3e9a <_ZN4Uart5writeEh+0xa6>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    3e6a:	4b1c      	ldr	r3, [pc, #112]	; (3edc <_ZN4Uart5writeEh+0xe8>)
    3e6c:	685b      	ldr	r3, [r3, #4]
    3e6e:	05db      	lsls	r3, r3, #23
    3e70:	0ddb      	lsrs	r3, r3, #23
    3e72:	613b      	str	r3, [r7, #16]

        if (exceptionNumber == 0 ||
    3e74:	693b      	ldr	r3, [r7, #16]
    3e76:	2b00      	cmp	r3, #0
    3e78:	d00a      	beq.n	3e90 <_ZN4Uart5writeEh+0x9c>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    3e7a:	693b      	ldr	r3, [r7, #16]
    3e7c:	b2db      	uxtb	r3, r3
    3e7e:	3b10      	subs	r3, #16
    3e80:	b2db      	uxtb	r3, r3
    3e82:	b25b      	sxtb	r3, r3
    3e84:	0018      	movs	r0, r3
    3e86:	f7ff fd21 	bl	38cc <__NVIC_GetPriority>
    3e8a:	0003      	movs	r3, r0
        if (exceptionNumber == 0 ||
    3e8c:	2b03      	cmp	r3, #3
    3e8e:	d901      	bls.n	3e94 <_ZN4Uart5writeEh+0xa0>
    3e90:	2301      	movs	r3, #1
    3e92:	e000      	b.n	3e96 <_ZN4Uart5writeEh+0xa2>
    3e94:	2300      	movs	r3, #0
    3e96:	2b00      	cmp	r3, #0
    3e98:	d10b      	bne.n	3eb2 <_ZN4Uart5writeEh+0xbe>
        }
      }

      // interrupts are disabled or called from ISR with higher or equal priority than the SERCOM IRQ
      // manually call the UART IRQ handler when the data register is empty
      if (sercom->isDataRegisterEmptyUART()) {
    3e9a:	687b      	ldr	r3, [r7, #4]
    3e9c:	691b      	ldr	r3, [r3, #16]
    3e9e:	0018      	movs	r0, r3
    3ea0:	f009 ff43 	bl	dd2a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3ea4:	1e03      	subs	r3, r0, #0
    3ea6:	d0c8      	beq.n	3e3a <_ZN4Uart5writeEh+0x46>
        IrqHandler();
    3ea8:	687b      	ldr	r3, [r7, #4]
    3eaa:	0018      	movs	r0, r3
    3eac:	f7ff fedc 	bl	3c68 <_ZN4Uart10IrqHandlerEv>
    3eb0:	e7c3      	b.n	3e3a <_ZN4Uart5writeEh+0x46>
          continue;
    3eb2:	46c0      	nop			; (mov r8, r8)
    while(txBuffer.isFull()) {
    3eb4:	e7c1      	b.n	3e3a <_ZN4Uart5writeEh+0x46>
      }
    }

    txBuffer.store_char(data);
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	335c      	adds	r3, #92	; 0x5c
    3eba:	001a      	movs	r2, r3
    3ebc:	1cfb      	adds	r3, r7, #3
    3ebe:	781b      	ldrb	r3, [r3, #0]
    3ec0:	0019      	movs	r1, r3
    3ec2:	0010      	movs	r0, r2
    3ec4:	f000 f891 	bl	3fea <_ZN11RingBufferNILi64EE10store_charEh>

    sercom->enableDataRegisterEmptyInterruptUART();
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	691b      	ldr	r3, [r3, #16]
    3ecc:	0018      	movs	r0, r3
    3ece:	f009 ff67 	bl	dda0 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
  }

  return 1;
    3ed2:	2301      	movs	r3, #1
}
    3ed4:	0018      	movs	r0, r3
    3ed6:	46bd      	mov	sp, r7
    3ed8:	b006      	add	sp, #24
    3eda:	bd80      	pop	{r7, pc}
    3edc:	e000ed00 	.word	0xe000ed00

00003ee0 <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
    3ee0:	b580      	push	{r7, lr}
    3ee2:	b082      	sub	sp, #8
    3ee4:	af00      	add	r7, sp, #0
    3ee6:	6078      	str	r0, [r7, #4]
    3ee8:	000a      	movs	r2, r1
    3eea:	1cbb      	adds	r3, r7, #2
    3eec:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_STOP_BIT_MASK)
    3eee:	1cbb      	adds	r3, r7, #2
    3ef0:	881b      	ldrh	r3, [r3, #0]
    3ef2:	22f0      	movs	r2, #240	; 0xf0
    3ef4:	4013      	ands	r3, r2
    3ef6:	2b30      	cmp	r3, #48	; 0x30
    3ef8:	d001      	beq.n	3efe <_ZN4Uart16extractNbStopBitEt+0x1e>
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    3efa:	2300      	movs	r3, #0
    3efc:	e000      	b.n	3f00 <_ZN4Uart16extractNbStopBitEt+0x20>

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
    3efe:	2301      	movs	r3, #1
  }
}
    3f00:	0018      	movs	r0, r3
    3f02:	46bd      	mov	sp, r7
    3f04:	b002      	add	sp, #8
    3f06:	bd80      	pop	{r7, pc}

00003f08 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b082      	sub	sp, #8
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	6078      	str	r0, [r7, #4]
    3f10:	000a      	movs	r2, r1
    3f12:	1cbb      	adds	r3, r7, #2
    3f14:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_DATA_MASK)
    3f16:	1cbb      	adds	r3, r7, #2
    3f18:	881a      	ldrh	r2, [r3, #0]
    3f1a:	23f0      	movs	r3, #240	; 0xf0
    3f1c:	011b      	lsls	r3, r3, #4
    3f1e:	4013      	ands	r3, r2
    3f20:	2280      	movs	r2, #128	; 0x80
    3f22:	0092      	lsls	r2, r2, #2
    3f24:	4293      	cmp	r3, r2
    3f26:	d009      	beq.n	3f3c <_ZN4Uart15extractCharSizeEt+0x34>
    3f28:	22c0      	movs	r2, #192	; 0xc0
    3f2a:	0092      	lsls	r2, r2, #2
    3f2c:	4293      	cmp	r3, r2
    3f2e:	d007      	beq.n	3f40 <_ZN4Uart15extractCharSizeEt+0x38>
    3f30:	2280      	movs	r2, #128	; 0x80
    3f32:	0052      	lsls	r2, r2, #1
    3f34:	4293      	cmp	r3, r2
    3f36:	d105      	bne.n	3f44 <_ZN4Uart15extractCharSizeEt+0x3c>
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;
    3f38:	2305      	movs	r3, #5
    3f3a:	e004      	b.n	3f46 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    3f3c:	2306      	movs	r3, #6
    3f3e:	e002      	b.n	3f46 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    3f40:	2307      	movs	r3, #7
    3f42:	e000      	b.n	3f46 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    3f44:	2300      	movs	r3, #0

  }
}
    3f46:	0018      	movs	r0, r3
    3f48:	46bd      	mov	sp, r7
    3f4a:	b002      	add	sp, #8
    3f4c:	bd80      	pop	{r7, pc}

00003f4e <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
    3f4e:	b580      	push	{r7, lr}
    3f50:	b082      	sub	sp, #8
    3f52:	af00      	add	r7, sp, #0
    3f54:	6078      	str	r0, [r7, #4]
    3f56:	000a      	movs	r2, r1
    3f58:	1cbb      	adds	r3, r7, #2
    3f5a:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_PARITY_MASK)
    3f5c:	1cbb      	adds	r3, r7, #2
    3f5e:	881b      	ldrh	r3, [r3, #0]
    3f60:	220f      	movs	r2, #15
    3f62:	4013      	ands	r3, r2
    3f64:	2b01      	cmp	r3, #1
    3f66:	d003      	beq.n	3f70 <_ZN4Uart13extractParityEt+0x22>
    3f68:	2b02      	cmp	r3, #2
    3f6a:	d003      	beq.n	3f74 <_ZN4Uart13extractParityEt+0x26>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    3f6c:	2302      	movs	r3, #2
    3f6e:	e002      	b.n	3f76 <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    3f70:	2300      	movs	r3, #0
    3f72:	e000      	b.n	3f76 <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
    3f74:	2301      	movs	r3, #1
  }
}
    3f76:	0018      	movs	r0, r3
    3f78:	46bd      	mov	sp, r7
    3f7a:	b002      	add	sp, #8
    3f7c:	bd80      	pop	{r7, pc}

00003f7e <_ZN11RingBufferNILi64EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;


template <int N>
RingBufferN<N>::RingBufferN( void )
    3f7e:	b580      	push	{r7, lr}
    3f80:	b082      	sub	sp, #8
    3f82:	af00      	add	r7, sp, #0
    3f84:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	2240      	movs	r2, #64	; 0x40
    3f8a:	2100      	movs	r1, #0
    3f8c:	0018      	movs	r0, r3
    3f8e:	f00c fd5b 	bl	10a48 <memset>
    clear();
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	0018      	movs	r0, r3
    3f96:	f000 f805 	bl	3fa4 <_ZN11RingBufferNILi64EE5clearEv>
}
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	0018      	movs	r0, r3
    3f9e:	46bd      	mov	sp, r7
    3fa0:	b002      	add	sp, #8
    3fa2:	bd80      	pop	{r7, pc}

00003fa4 <_ZN11RingBufferNILi64EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
    3fa4:	b580      	push	{r7, lr}
    3fa6:	b082      	sub	sp, #8
    3fa8:	af00      	add	r7, sp, #0
    3faa:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	2200      	movs	r2, #0
    3fb0:	641a      	str	r2, [r3, #64]	; 0x40
  _iTail = 0;
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	2200      	movs	r2, #0
    3fb6:	645a      	str	r2, [r3, #68]	; 0x44
}
    3fb8:	46c0      	nop			; (mov r8, r8)
    3fba:	46bd      	mov	sp, r7
    3fbc:	b002      	add	sp, #8
    3fbe:	bd80      	pop	{r7, pc}

00003fc0 <_ZN11RingBufferNILi64EE9availableEv>:

  return value;
}

template <int N>
int RingBufferN<N>::available()
    3fc0:	b580      	push	{r7, lr}
    3fc2:	b084      	sub	sp, #16
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	6078      	str	r0, [r7, #4]
{
  int delta = _iHead - _iTail;
    3fc8:	687b      	ldr	r3, [r7, #4]
    3fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3fd0:	1ad3      	subs	r3, r2, r3
    3fd2:	60fb      	str	r3, [r7, #12]

  if(delta < 0)
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	da02      	bge.n	3fe0 <_ZN11RingBufferNILi64EE9availableEv+0x20>
    return N + delta;
    3fda:	68fb      	ldr	r3, [r7, #12]
    3fdc:	3340      	adds	r3, #64	; 0x40
    3fde:	e000      	b.n	3fe2 <_ZN11RingBufferNILi64EE9availableEv+0x22>
  else
    return delta;
    3fe0:	68fb      	ldr	r3, [r7, #12]
}
    3fe2:	0018      	movs	r0, r3
    3fe4:	46bd      	mov	sp, r7
    3fe6:	b004      	add	sp, #16
    3fe8:	bd80      	pop	{r7, pc}

00003fea <_ZN11RingBufferNILi64EE10store_charEh>:
void RingBufferN<N>::store_char( uint8_t c )
    3fea:	b580      	push	{r7, lr}
    3fec:	b084      	sub	sp, #16
    3fee:	af00      	add	r7, sp, #0
    3ff0:	6078      	str	r0, [r7, #4]
    3ff2:	000a      	movs	r2, r1
    3ff4:	1cfb      	adds	r3, r7, #3
    3ff6:	701a      	strb	r2, [r3, #0]
  int i = nextIndex(_iHead);
    3ff8:	687b      	ldr	r3, [r7, #4]
    3ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	0011      	movs	r1, r2
    4000:	0018      	movs	r0, r3
    4002:	f000 f892 	bl	412a <_ZN11RingBufferNILi64EE9nextIndexEi>
    4006:	0003      	movs	r3, r0
    4008:	60fb      	str	r3, [r7, #12]
  if ( i != _iTail )
    400a:	687b      	ldr	r3, [r7, #4]
    400c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    400e:	68fb      	ldr	r3, [r7, #12]
    4010:	1ad3      	subs	r3, r2, r3
    4012:	1e5a      	subs	r2, r3, #1
    4014:	4193      	sbcs	r3, r2
    4016:	b2db      	uxtb	r3, r3
    4018:	2b00      	cmp	r3, #0
    401a:	d008      	beq.n	402e <_ZN11RingBufferNILi64EE10store_charEh+0x44>
    _aucBuffer[_iHead] = c ;
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4020:	687a      	ldr	r2, [r7, #4]
    4022:	1cf9      	adds	r1, r7, #3
    4024:	7809      	ldrb	r1, [r1, #0]
    4026:	54d1      	strb	r1, [r2, r3]
    _iHead = i ;
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	68fa      	ldr	r2, [r7, #12]
    402c:	641a      	str	r2, [r3, #64]	; 0x40
}
    402e:	46c0      	nop			; (mov r8, r8)
    4030:	46bd      	mov	sp, r7
    4032:	b004      	add	sp, #16
    4034:	bd80      	pop	{r7, pc}

00004036 <_ZN11RingBufferNILi64EE17availableForStoreEv>:

template <int N>
int RingBufferN<N>::availableForStore()
    4036:	b580      	push	{r7, lr}
    4038:	b082      	sub	sp, #8
    403a:	af00      	add	r7, sp, #0
    403c:	6078      	str	r0, [r7, #4]
{
  if (_iHead >= _iTail)
    403e:	687b      	ldr	r3, [r7, #4]
    4040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4046:	17d0      	asrs	r0, r2, #31
    4048:	0fd9      	lsrs	r1, r3, #31
    404a:	429a      	cmp	r2, r3
    404c:	4148      	adcs	r0, r1
    404e:	0003      	movs	r3, r0
    4050:	b2db      	uxtb	r3, r3
    4052:	2b00      	cmp	r3, #0
    4054:	d007      	beq.n	4066 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x30>
    return N - 1 - _iHead + _iTail;
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    405a:	223f      	movs	r2, #63	; 0x3f
    405c:	1ad2      	subs	r2, r2, r3
    405e:	687b      	ldr	r3, [r7, #4]
    4060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4062:	18d3      	adds	r3, r2, r3
    4064:	e005      	b.n	4072 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x3c>
  else
    return _iTail - _iHead - 1;
    4066:	687b      	ldr	r3, [r7, #4]
    4068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    406a:	687b      	ldr	r3, [r7, #4]
    406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    406e:	1ad3      	subs	r3, r2, r3
    4070:	3b01      	subs	r3, #1
}
    4072:	0018      	movs	r0, r3
    4074:	46bd      	mov	sp, r7
    4076:	b002      	add	sp, #8
    4078:	bd80      	pop	{r7, pc}

0000407a <_ZN11RingBufferNILi64EE9read_charEv>:
int RingBufferN<N>::read_char()
    407a:	b580      	push	{r7, lr}
    407c:	b084      	sub	sp, #16
    407e:	af00      	add	r7, sp, #0
    4080:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    4082:	687b      	ldr	r3, [r7, #4]
    4084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    408a:	1ad3      	subs	r3, r2, r3
    408c:	425a      	negs	r2, r3
    408e:	4153      	adcs	r3, r2
    4090:	b2db      	uxtb	r3, r3
    4092:	2b00      	cmp	r3, #0
    4094:	d002      	beq.n	409c <_ZN11RingBufferNILi64EE9read_charEv+0x22>
    return -1;
    4096:	2301      	movs	r3, #1
    4098:	425b      	negs	r3, r3
    409a:	e013      	b.n	40c4 <_ZN11RingBufferNILi64EE9read_charEv+0x4a>
  uint8_t value = _aucBuffer[_iTail];
    409c:	687b      	ldr	r3, [r7, #4]
    409e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    40a0:	230f      	movs	r3, #15
    40a2:	18fb      	adds	r3, r7, r3
    40a4:	6879      	ldr	r1, [r7, #4]
    40a6:	5c8a      	ldrb	r2, [r1, r2]
    40a8:	701a      	strb	r2, [r3, #0]
  _iTail = nextIndex(_iTail);
    40aa:	687b      	ldr	r3, [r7, #4]
    40ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    40ae:	687b      	ldr	r3, [r7, #4]
    40b0:	0011      	movs	r1, r2
    40b2:	0018      	movs	r0, r3
    40b4:	f000 f839 	bl	412a <_ZN11RingBufferNILi64EE9nextIndexEi>
    40b8:	0002      	movs	r2, r0
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	645a      	str	r2, [r3, #68]	; 0x44
  return value;
    40be:	230f      	movs	r3, #15
    40c0:	18fb      	adds	r3, r7, r3
    40c2:	781b      	ldrb	r3, [r3, #0]
}
    40c4:	0018      	movs	r0, r3
    40c6:	46bd      	mov	sp, r7
    40c8:	b004      	add	sp, #16
    40ca:	bd80      	pop	{r7, pc}

000040cc <_ZN11RingBufferNILi64EE4peekEv>:

template <int N>
int RingBufferN<N>::peek()
    40cc:	b580      	push	{r7, lr}
    40ce:	b082      	sub	sp, #8
    40d0:	af00      	add	r7, sp, #0
    40d2:	6078      	str	r0, [r7, #4]
{
  if(_iTail == _iHead)
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    40dc:	1ad3      	subs	r3, r2, r3
    40de:	425a      	negs	r2, r3
    40e0:	4153      	adcs	r3, r2
    40e2:	b2db      	uxtb	r3, r3
    40e4:	2b00      	cmp	r3, #0
    40e6:	d002      	beq.n	40ee <_ZN11RingBufferNILi64EE4peekEv+0x22>
    return -1;
    40e8:	2301      	movs	r3, #1
    40ea:	425b      	negs	r3, r3
    40ec:	e003      	b.n	40f6 <_ZN11RingBufferNILi64EE4peekEv+0x2a>

  return _aucBuffer[_iTail];
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    40f2:	687a      	ldr	r2, [r7, #4]
    40f4:	5cd3      	ldrb	r3, [r2, r3]
}
    40f6:	0018      	movs	r0, r3
    40f8:	46bd      	mov	sp, r7
    40fa:	b002      	add	sp, #8
    40fc:	bd80      	pop	{r7, pc}

000040fe <_ZN11RingBufferNILi64EE6isFullEv>:
{
  return (uint32_t)(index + 1) % N;
}

template <int N>
bool RingBufferN<N>::isFull()
    40fe:	b580      	push	{r7, lr}
    4100:	b082      	sub	sp, #8
    4102:	af00      	add	r7, sp, #0
    4104:	6078      	str	r0, [r7, #4]
{
  return (nextIndex(_iHead) == _iTail);
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	0011      	movs	r1, r2
    410e:	0018      	movs	r0, r3
    4110:	f000 f80b 	bl	412a <_ZN11RingBufferNILi64EE9nextIndexEi>
    4114:	0002      	movs	r2, r0
    4116:	687b      	ldr	r3, [r7, #4]
    4118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    411a:	1ad3      	subs	r3, r2, r3
    411c:	425a      	negs	r2, r3
    411e:	4153      	adcs	r3, r2
    4120:	b2db      	uxtb	r3, r3
}
    4122:	0018      	movs	r0, r3
    4124:	46bd      	mov	sp, r7
    4126:	b002      	add	sp, #8
    4128:	bd80      	pop	{r7, pc}

0000412a <_ZN11RingBufferNILi64EE9nextIndexEi>:
int RingBufferN<N>::nextIndex(int index)
    412a:	b580      	push	{r7, lr}
    412c:	b082      	sub	sp, #8
    412e:	af00      	add	r7, sp, #0
    4130:	6078      	str	r0, [r7, #4]
    4132:	6039      	str	r1, [r7, #0]
  return (uint32_t)(index + 1) % N;
    4134:	683b      	ldr	r3, [r7, #0]
    4136:	3301      	adds	r3, #1
    4138:	223f      	movs	r2, #63	; 0x3f
    413a:	4013      	ands	r3, r2
}
    413c:	0018      	movs	r0, r3
    413e:	46bd      	mov	sp, r7
    4140:	b002      	add	sp, #8
    4142:	bd80      	pop	{r7, pc}

00004144 <_ZN4UartD1Ev>:
class Uart : public HardwareSerial
    4144:	b580      	push	{r7, lr}
    4146:	b082      	sub	sp, #8
    4148:	af00      	add	r7, sp, #0
    414a:	6078      	str	r0, [r7, #4]
    414c:	4a05      	ldr	r2, [pc, #20]	; (4164 <_ZN4UartD1Ev+0x20>)
    414e:	687b      	ldr	r3, [r7, #4]
    4150:	601a      	str	r2, [r3, #0]
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	0018      	movs	r0, r3
    4156:	f7ff fb7d 	bl	3854 <_ZN14HardwareSerialD1Ev>
    415a:	687b      	ldr	r3, [r7, #4]
    415c:	0018      	movs	r0, r3
    415e:	46bd      	mov	sp, r7
    4160:	b002      	add	sp, #8
    4162:	bd80      	pop	{r7, pc}
    4164:	000135e0 	.word	0x000135e0

00004168 <_ZN4UartD0Ev>:
    4168:	b580      	push	{r7, lr}
    416a:	b082      	sub	sp, #8
    416c:	af00      	add	r7, sp, #0
    416e:	6078      	str	r0, [r7, #4]
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	0018      	movs	r0, r3
    4174:	f7ff ffe6 	bl	4144 <_ZN4UartD1Ev>
    4178:	687b      	ldr	r3, [r7, #4]
    417a:	0018      	movs	r0, r3
    417c:	f009 fbbf 	bl	d8fe <_ZdlPv>
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	0018      	movs	r0, r3
    4184:	46bd      	mov	sp, r7
    4186:	b002      	add	sp, #8
    4188:	bd80      	pop	{r7, pc}
	...

0000418c <__NVIC_EnableIRQ>:
{
    418c:	b580      	push	{r7, lr}
    418e:	b082      	sub	sp, #8
    4190:	af00      	add	r7, sp, #0
    4192:	0002      	movs	r2, r0
    4194:	1dfb      	adds	r3, r7, #7
    4196:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    4198:	1dfb      	adds	r3, r7, #7
    419a:	781b      	ldrb	r3, [r3, #0]
    419c:	2b7f      	cmp	r3, #127	; 0x7f
    419e:	d809      	bhi.n	41b4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    41a0:	4b06      	ldr	r3, [pc, #24]	; (41bc <__NVIC_EnableIRQ+0x30>)
    41a2:	1dfa      	adds	r2, r7, #7
    41a4:	7812      	ldrb	r2, [r2, #0]
    41a6:	b252      	sxtb	r2, r2
    41a8:	211f      	movs	r1, #31
    41aa:	400a      	ands	r2, r1
    41ac:	2101      	movs	r1, #1
    41ae:	4091      	lsls	r1, r2
    41b0:	000a      	movs	r2, r1
    41b2:	601a      	str	r2, [r3, #0]
}
    41b4:	46c0      	nop			; (mov r8, r8)
    41b6:	46bd      	mov	sp, r7
    41b8:	b002      	add	sp, #8
    41ba:	bd80      	pop	{r7, pc}
    41bc:	e000e100 	.word	0xe000e100

000041c0 <__NVIC_SetPriority>:
{
    41c0:	b5b0      	push	{r4, r5, r7, lr}
    41c2:	b082      	sub	sp, #8
    41c4:	af00      	add	r7, sp, #0
    41c6:	0002      	movs	r2, r0
    41c8:	6039      	str	r1, [r7, #0]
    41ca:	1dfb      	adds	r3, r7, #7
    41cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    41ce:	1dfb      	adds	r3, r7, #7
    41d0:	781b      	ldrb	r3, [r3, #0]
    41d2:	2b7f      	cmp	r3, #127	; 0x7f
    41d4:	d828      	bhi.n	4228 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    41d6:	4c2f      	ldr	r4, [pc, #188]	; (4294 <__NVIC_SetPriority+0xd4>)
    41d8:	1dfb      	adds	r3, r7, #7
    41da:	781b      	ldrb	r3, [r3, #0]
    41dc:	b25b      	sxtb	r3, r3
    41de:	089b      	lsrs	r3, r3, #2
    41e0:	492c      	ldr	r1, [pc, #176]	; (4294 <__NVIC_SetPriority+0xd4>)
    41e2:	1dfa      	adds	r2, r7, #7
    41e4:	7812      	ldrb	r2, [r2, #0]
    41e6:	b252      	sxtb	r2, r2
    41e8:	0892      	lsrs	r2, r2, #2
    41ea:	32c0      	adds	r2, #192	; 0xc0
    41ec:	0092      	lsls	r2, r2, #2
    41ee:	5852      	ldr	r2, [r2, r1]
    41f0:	1df9      	adds	r1, r7, #7
    41f2:	7809      	ldrb	r1, [r1, #0]
    41f4:	b249      	sxtb	r1, r1
    41f6:	2003      	movs	r0, #3
    41f8:	4001      	ands	r1, r0
    41fa:	00c9      	lsls	r1, r1, #3
    41fc:	20ff      	movs	r0, #255	; 0xff
    41fe:	4088      	lsls	r0, r1
    4200:	0001      	movs	r1, r0
    4202:	43c9      	mvns	r1, r1
    4204:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    4206:	683a      	ldr	r2, [r7, #0]
    4208:	0192      	lsls	r2, r2, #6
    420a:	20ff      	movs	r0, #255	; 0xff
    420c:	4010      	ands	r0, r2
    420e:	1dfa      	adds	r2, r7, #7
    4210:	7812      	ldrb	r2, [r2, #0]
    4212:	b252      	sxtb	r2, r2
    4214:	2503      	movs	r5, #3
    4216:	402a      	ands	r2, r5
    4218:	00d2      	lsls	r2, r2, #3
    421a:	4090      	lsls	r0, r2
    421c:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    421e:	430a      	orrs	r2, r1
    4220:	33c0      	adds	r3, #192	; 0xc0
    4222:	009b      	lsls	r3, r3, #2
    4224:	511a      	str	r2, [r3, r4]
}
    4226:	e031      	b.n	428c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4228:	4c1b      	ldr	r4, [pc, #108]	; (4298 <__NVIC_SetPriority+0xd8>)
    422a:	1dfb      	adds	r3, r7, #7
    422c:	781b      	ldrb	r3, [r3, #0]
    422e:	b25b      	sxtb	r3, r3
    4230:	220f      	movs	r2, #15
    4232:	4013      	ands	r3, r2
    4234:	3b08      	subs	r3, #8
    4236:	0899      	lsrs	r1, r3, #2
    4238:	4a17      	ldr	r2, [pc, #92]	; (4298 <__NVIC_SetPriority+0xd8>)
    423a:	1dfb      	adds	r3, r7, #7
    423c:	781b      	ldrb	r3, [r3, #0]
    423e:	b25b      	sxtb	r3, r3
    4240:	200f      	movs	r0, #15
    4242:	4003      	ands	r3, r0
    4244:	3b08      	subs	r3, #8
    4246:	089b      	lsrs	r3, r3, #2
    4248:	3306      	adds	r3, #6
    424a:	009b      	lsls	r3, r3, #2
    424c:	18d3      	adds	r3, r2, r3
    424e:	3304      	adds	r3, #4
    4250:	681b      	ldr	r3, [r3, #0]
    4252:	1dfa      	adds	r2, r7, #7
    4254:	7812      	ldrb	r2, [r2, #0]
    4256:	b252      	sxtb	r2, r2
    4258:	2003      	movs	r0, #3
    425a:	4002      	ands	r2, r0
    425c:	00d2      	lsls	r2, r2, #3
    425e:	20ff      	movs	r0, #255	; 0xff
    4260:	4090      	lsls	r0, r2
    4262:	0002      	movs	r2, r0
    4264:	43d2      	mvns	r2, r2
    4266:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    4268:	683b      	ldr	r3, [r7, #0]
    426a:	019b      	lsls	r3, r3, #6
    426c:	20ff      	movs	r0, #255	; 0xff
    426e:	4018      	ands	r0, r3
    4270:	1dfb      	adds	r3, r7, #7
    4272:	781b      	ldrb	r3, [r3, #0]
    4274:	b25b      	sxtb	r3, r3
    4276:	2503      	movs	r5, #3
    4278:	402b      	ands	r3, r5
    427a:	00db      	lsls	r3, r3, #3
    427c:	4098      	lsls	r0, r3
    427e:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4280:	431a      	orrs	r2, r3
    4282:	1d8b      	adds	r3, r1, #6
    4284:	009b      	lsls	r3, r3, #2
    4286:	18e3      	adds	r3, r4, r3
    4288:	3304      	adds	r3, #4
    428a:	601a      	str	r2, [r3, #0]
}
    428c:	46c0      	nop			; (mov r8, r8)
    428e:	46bd      	mov	sp, r7
    4290:	b002      	add	sp, #8
    4292:	bdb0      	pop	{r4, r5, r7, pc}
    4294:	e000e100 	.word	0xe000e100
    4298:	e000ed00 	.word	0xe000ed00

0000429c <_ZN14USBDeviceClassC1Ev>:
	uint16_t wLength;
} USBSetup;

class USBDeviceClass {
public:
	USBDeviceClass() {};
    429c:	b580      	push	{r7, lr}
    429e:	b082      	sub	sp, #8
    42a0:	af00      	add	r7, sp, #0
    42a2:	6078      	str	r0, [r7, #4]
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	0018      	movs	r0, r3
    42a8:	46bd      	mov	sp, r7
    42aa:	b002      	add	sp, #8
    42ac:	bd80      	pop	{r7, pc}

000042ae <_ZN17UsbDeviceDescBankC1Ev>:
  __IO USB_DEVICE_ADDR_Type      ADDR;        /**< \brief Offset: 0x000 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Adress of Data Buffer */
  __IO USB_DEVICE_PCKSIZE_Type   PCKSIZE;     /**< \brief Offset: 0x004 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Packet Size */
  __IO USB_DEVICE_EXTREG_Type    EXTREG;      /**< \brief Offset: 0x008 (R/W 16) DEVICE_DESC_BANK Endpoint Bank, Extended */
  __IO USB_DEVICE_STATUS_BK_Type STATUS_BK;   /**< \brief Offset: 0x00A (R/W  8) DEVICE_DESC_BANK Enpoint Bank, Status of Bank */
       RoReg8                    Reserved1[0x5];
} UsbDeviceDescBank;
    42ae:	b580      	push	{r7, lr}
    42b0:	b082      	sub	sp, #8
    42b2:	af00      	add	r7, sp, #0
    42b4:	6078      	str	r0, [r7, #4]
    42b6:	687b      	ldr	r3, [r7, #4]
    42b8:	0018      	movs	r0, r3
    42ba:	46bd      	mov	sp, r7
    42bc:	b002      	add	sp, #8
    42be:	bd80      	pop	{r7, pc}

000042c0 <_ZN19UsbDeviceDescriptorC1Ev>:

/** \brief USB_DEVICE Descriptor SRAM registers */
#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
typedef struct { /* USB is Device */
       UsbDeviceDescBank         DeviceDescBank[2]; /**< \brief Offset: 0x000 UsbDeviceDescBank groups */
} UsbDeviceDescriptor;
    42c0:	b5b0      	push	{r4, r5, r7, lr}
    42c2:	b082      	sub	sp, #8
    42c4:	af00      	add	r7, sp, #0
    42c6:	6078      	str	r0, [r7, #4]
    42c8:	687b      	ldr	r3, [r7, #4]
    42ca:	2401      	movs	r4, #1
    42cc:	001d      	movs	r5, r3
    42ce:	2c00      	cmp	r4, #0
    42d0:	db05      	blt.n	42de <_ZN19UsbDeviceDescriptorC1Ev+0x1e>
    42d2:	0028      	movs	r0, r5
    42d4:	f7ff ffeb 	bl	42ae <_ZN17UsbDeviceDescBankC1Ev>
    42d8:	3510      	adds	r5, #16
    42da:	3c01      	subs	r4, #1
    42dc:	e7f7      	b.n	42ce <_ZN19UsbDeviceDescriptorC1Ev+0xe>
    42de:	687b      	ldr	r3, [r7, #4]
    42e0:	0018      	movs	r0, r3
    42e2:	46bd      	mov	sp, r7
    42e4:	b002      	add	sp, #8
    42e6:	bdb0      	pop	{r4, r5, r7, pc}

000042e8 <_ZN20USBDevice_SAMD21G18xC1Ev>:

typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    42e8:	b5b0      	push	{r4, r5, r7, lr}
    42ea:	b082      	sub	sp, #8
    42ec:	af00      	add	r7, sp, #0
    42ee:	6078      	str	r0, [r7, #4]
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	4a09      	ldr	r2, [pc, #36]	; (4318 <_ZN20USBDevice_SAMD21G18xC1Ev+0x30>)
    42f4:	601a      	str	r2, [r3, #0]
    42f6:	687b      	ldr	r3, [r7, #4]
    42f8:	3304      	adds	r3, #4
    42fa:	2407      	movs	r4, #7
    42fc:	001d      	movs	r5, r3
    42fe:	2c00      	cmp	r4, #0
    4300:	db05      	blt.n	430e <_ZN20USBDevice_SAMD21G18xC1Ev+0x26>
    4302:	0028      	movs	r0, r5
    4304:	f7ff ffdc 	bl	42c0 <_ZN19UsbDeviceDescriptorC1Ev>
    4308:	3520      	adds	r5, #32
    430a:	3c01      	subs	r4, #1
    430c:	e7f7      	b.n	42fe <_ZN20USBDevice_SAMD21G18xC1Ev+0x16>
		// Empty
	}
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	0018      	movs	r0, r3
    4312:	46bd      	mov	sp, r7
    4314:	b002      	add	sp, #8
    4316:	bdb0      	pop	{r4, r5, r7, pc}
    4318:	41005000 	.word	0x41005000

0000431c <_ZN20USBDevice_SAMD21G18x6enableEv>:

	// Reset USB Device
	void reset();

	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    431c:	b580      	push	{r7, lr}
    431e:	b082      	sub	sp, #8
    4320:	af00      	add	r7, sp, #0
    4322:	6078      	str	r0, [r7, #4]
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	681a      	ldr	r2, [r3, #0]
    4328:	7813      	ldrb	r3, [r2, #0]
    432a:	2102      	movs	r1, #2
    432c:	430b      	orrs	r3, r1
    432e:	7013      	strb	r3, [r2, #0]
    4330:	46c0      	nop			; (mov r8, r8)
    4332:	46bd      	mov	sp, r7
    4334:	b002      	add	sp, #8
    4336:	bd80      	pop	{r7, pc}

00004338 <_ZN20USBDevice_SAMD21G18x16setUSBDeviceModeEv>:
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    4338:	b580      	push	{r7, lr}
    433a:	b082      	sub	sp, #8
    433c:	af00      	add	r7, sp, #0
    433e:	6078      	str	r0, [r7, #4]
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	681a      	ldr	r2, [r3, #0]
    4344:	7813      	ldrb	r3, [r2, #0]
    4346:	217f      	movs	r1, #127	; 0x7f
    4348:	400b      	ands	r3, r1
    434a:	7013      	strb	r3, [r2, #0]
    434c:	46c0      	nop			; (mov r8, r8)
    434e:	46bd      	mov	sp, r7
    4350:	b002      	add	sp, #8
    4352:	bd80      	pop	{r7, pc}

00004354 <_ZN20USBDevice_SAMD21G18x12runInStandbyEv>:
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    4354:	b580      	push	{r7, lr}
    4356:	b082      	sub	sp, #8
    4358:	af00      	add	r7, sp, #0
    435a:	6078      	str	r0, [r7, #4]
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	681a      	ldr	r2, [r3, #0]
    4360:	7813      	ldrb	r3, [r2, #0]
    4362:	2104      	movs	r1, #4
    4364:	430b      	orrs	r3, r1
    4366:	7013      	strb	r3, [r2, #0]
    4368:	46c0      	nop			; (mov r8, r8)
    436a:	46bd      	mov	sp, r7
    436c:	b002      	add	sp, #8
    436e:	bd80      	pop	{r7, pc}

00004370 <_ZN20USBDevice_SAMD21G18x12setFullSpeedEv>:
	inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }
	inline void wakeupHost()     { usb.CTRLB.bit.UPRSM = 1; }

	// USB speed
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    4370:	b580      	push	{r7, lr}
    4372:	b082      	sub	sp, #8
    4374:	af00      	add	r7, sp, #0
    4376:	6078      	str	r0, [r7, #4]
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	681a      	ldr	r2, [r3, #0]
    437c:	8913      	ldrh	r3, [r2, #8]
    437e:	210c      	movs	r1, #12
    4380:	438b      	bics	r3, r1
    4382:	8113      	strh	r3, [r2, #8]
    4384:	46c0      	nop			; (mov r8, r8)
    4386:	46bd      	mov	sp, r7
    4388:	b002      	add	sp, #8
    438a:	bd80      	pop	{r7, pc}

0000438c <_ZN20USBDevice_SAMD21G18x6attachEv>:
	inline void setLowSpeed()        { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;   }
	inline void setHiSpeed()         { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HS_Val;   }
	inline void setHiSpeedTestMode() { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HSTM_Val; }

	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    438c:	b580      	push	{r7, lr}
    438e:	b082      	sub	sp, #8
    4390:	af00      	add	r7, sp, #0
    4392:	6078      	str	r0, [r7, #4]
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	681a      	ldr	r2, [r3, #0]
    4398:	8913      	ldrh	r3, [r2, #8]
    439a:	2101      	movs	r1, #1
    439c:	438b      	bics	r3, r1
    439e:	8113      	strh	r3, [r2, #8]
    43a0:	46c0      	nop			; (mov r8, r8)
    43a2:	46bd      	mov	sp, r7
    43a4:	b002      	add	sp, #8
    43a6:	bd80      	pop	{r7, pc}

000043a8 <_ZN20USBDevice_SAMD21G18x21isEndOfResetInterruptEv>:
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    43a8:	b580      	push	{r7, lr}
    43aa:	b082      	sub	sp, #8
    43ac:	af00      	add	r7, sp, #0
    43ae:	6078      	str	r0, [r7, #4]
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	681b      	ldr	r3, [r3, #0]
    43b4:	8b9b      	ldrh	r3, [r3, #28]
    43b6:	071b      	lsls	r3, r3, #28
    43b8:	0fdb      	lsrs	r3, r3, #31
    43ba:	b2db      	uxtb	r3, r3
    43bc:	0018      	movs	r0, r3
    43be:	46bd      	mov	sp, r7
    43c0:	b002      	add	sp, #8
    43c2:	bd80      	pop	{r7, pc}

000043c4 <_ZN20USBDevice_SAMD21G18x22ackEndOfResetInterruptEv>:
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    43c4:	b580      	push	{r7, lr}
    43c6:	b082      	sub	sp, #8
    43c8:	af00      	add	r7, sp, #0
    43ca:	6078      	str	r0, [r7, #4]
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	2208      	movs	r2, #8
    43d2:	839a      	strh	r2, [r3, #28]
    43d4:	46c0      	nop			; (mov r8, r8)
    43d6:	46bd      	mov	sp, r7
    43d8:	b002      	add	sp, #8
    43da:	bd80      	pop	{r7, pc}

000043dc <_ZN20USBDevice_SAMD21G18x25enableEndOfResetInterruptEv>:
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    43dc:	b580      	push	{r7, lr}
    43de:	b082      	sub	sp, #8
    43e0:	af00      	add	r7, sp, #0
    43e2:	6078      	str	r0, [r7, #4]
    43e4:	687b      	ldr	r3, [r7, #4]
    43e6:	681a      	ldr	r2, [r3, #0]
    43e8:	8b13      	ldrh	r3, [r2, #24]
    43ea:	2108      	movs	r1, #8
    43ec:	430b      	orrs	r3, r1
    43ee:	8313      	strh	r3, [r2, #24]
    43f0:	46c0      	nop			; (mov r8, r8)
    43f2:	46bd      	mov	sp, r7
    43f4:	b002      	add	sp, #8
    43f6:	bd80      	pop	{r7, pc}

000043f8 <_ZN20USBDevice_SAMD21G18x23isStartOfFrameInterruptEv>:
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    43f8:	b580      	push	{r7, lr}
    43fa:	b082      	sub	sp, #8
    43fc:	af00      	add	r7, sp, #0
    43fe:	6078      	str	r0, [r7, #4]
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	681b      	ldr	r3, [r3, #0]
    4404:	8b9b      	ldrh	r3, [r3, #28]
    4406:	075b      	lsls	r3, r3, #29
    4408:	0fdb      	lsrs	r3, r3, #31
    440a:	b2db      	uxtb	r3, r3
    440c:	0018      	movs	r0, r3
    440e:	46bd      	mov	sp, r7
    4410:	b002      	add	sp, #8
    4412:	bd80      	pop	{r7, pc}

00004414 <_ZN20USBDevice_SAMD21G18x24ackStartOfFrameInterruptEv>:
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    4414:	b580      	push	{r7, lr}
    4416:	b082      	sub	sp, #8
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
    441c:	687b      	ldr	r3, [r7, #4]
    441e:	681b      	ldr	r3, [r3, #0]
    4420:	2204      	movs	r2, #4
    4422:	839a      	strh	r2, [r3, #28]
    4424:	46c0      	nop			; (mov r8, r8)
    4426:	46bd      	mov	sp, r7
    4428:	b002      	add	sp, #8
    442a:	bd80      	pop	{r7, pc}

0000442c <_ZN20USBDevice_SAMD21G18x27enableStartOfFrameInterruptEv>:
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    442c:	b580      	push	{r7, lr}
    442e:	b082      	sub	sp, #8
    4430:	af00      	add	r7, sp, #0
    4432:	6078      	str	r0, [r7, #4]
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	681a      	ldr	r2, [r3, #0]
    4438:	8b13      	ldrh	r3, [r2, #24]
    443a:	2104      	movs	r1, #4
    443c:	430b      	orrs	r3, r1
    443e:	8313      	strh	r3, [r2, #24]
    4440:	46c0      	nop			; (mov r8, r8)
    4442:	46bd      	mov	sp, r7
    4444:	b002      	add	sp, #8
    4446:	bd80      	pop	{r7, pc}

00004448 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>:

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    4448:	b590      	push	{r4, r7, lr}
    444a:	b083      	sub	sp, #12
    444c:	af00      	add	r7, sp, #0
    444e:	6078      	str	r0, [r7, #4]
    4450:	0008      	movs	r0, r1
    4452:	0011      	movs	r1, r2
    4454:	1cfb      	adds	r3, r7, #3
    4456:	1c02      	adds	r2, r0, #0
    4458:	701a      	strb	r2, [r3, #0]
    445a:	1cbb      	adds	r3, r7, #2
    445c:	1c0a      	adds	r2, r1, #0
    445e:	701a      	strb	r2, [r3, #0]
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	681a      	ldr	r2, [r3, #0]
    4464:	1cfb      	adds	r3, r7, #3
    4466:	781b      	ldrb	r3, [r3, #0]
    4468:	1cb9      	adds	r1, r7, #2
    446a:	7809      	ldrb	r1, [r1, #0]
    446c:	2007      	movs	r0, #7
    446e:	4001      	ands	r1, r0
    4470:	b2c8      	uxtb	r0, r1
    4472:	3308      	adds	r3, #8
    4474:	0159      	lsls	r1, r3, #5
    4476:	5c8b      	ldrb	r3, [r1, r2]
    4478:	2407      	movs	r4, #7
    447a:	4004      	ands	r4, r0
    447c:	2007      	movs	r0, #7
    447e:	4383      	bics	r3, r0
    4480:	1c18      	adds	r0, r3, #0
    4482:	1c23      	adds	r3, r4, #0
    4484:	4303      	orrs	r3, r0
    4486:	548b      	strb	r3, [r1, r2]
    4488:	46c0      	nop			; (mov r8, r8)
    448a:	46bd      	mov	sp, r7
    448c:	b003      	add	sp, #12
    448e:	bd90      	pop	{r4, r7, pc}

00004490 <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>:
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    4490:	b590      	push	{r4, r7, lr}
    4492:	b083      	sub	sp, #12
    4494:	af00      	add	r7, sp, #0
    4496:	6078      	str	r0, [r7, #4]
    4498:	0008      	movs	r0, r1
    449a:	0011      	movs	r1, r2
    449c:	1cfb      	adds	r3, r7, #3
    449e:	1c02      	adds	r2, r0, #0
    44a0:	701a      	strb	r2, [r3, #0]
    44a2:	1cbb      	adds	r3, r7, #2
    44a4:	1c0a      	adds	r2, r1, #0
    44a6:	701a      	strb	r2, [r3, #0]
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	681a      	ldr	r2, [r3, #0]
    44ac:	1cfb      	adds	r3, r7, #3
    44ae:	781b      	ldrb	r3, [r3, #0]
    44b0:	1cb9      	adds	r1, r7, #2
    44b2:	7809      	ldrb	r1, [r1, #0]
    44b4:	2007      	movs	r0, #7
    44b6:	4001      	ands	r1, r0
    44b8:	b2c8      	uxtb	r0, r1
    44ba:	3308      	adds	r3, #8
    44bc:	0159      	lsls	r1, r3, #5
    44be:	5c8b      	ldrb	r3, [r1, r2]
    44c0:	2407      	movs	r4, #7
    44c2:	4020      	ands	r0, r4
    44c4:	0104      	lsls	r4, r0, #4
    44c6:	2070      	movs	r0, #112	; 0x70
    44c8:	4383      	bics	r3, r0
    44ca:	1c18      	adds	r0, r3, #0
    44cc:	1c23      	adds	r3, r4, #0
    44ce:	4303      	orrs	r3, r0
    44d0:	548b      	strb	r3, [r1, r2]
    44d2:	46c0      	nop			; (mov r8, r8)
    44d4:	46bd      	mov	sp, r7
    44d6:	b003      	add	sp, #12
    44d8:	bd90      	pop	{r4, r7, pc}

000044da <_ZN20USBDevice_SAMD21G18x18epInterruptSummaryEv>:

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    44da:	b580      	push	{r7, lr}
    44dc:	b082      	sub	sp, #8
    44de:	af00      	add	r7, sp, #0
    44e0:	6078      	str	r0, [r7, #4]
    44e2:	687b      	ldr	r3, [r7, #4]
    44e4:	681b      	ldr	r3, [r3, #0]
    44e6:	8c1b      	ldrh	r3, [r3, #32]
    44e8:	b29b      	uxth	r3, r3
    44ea:	0018      	movs	r0, r3
    44ec:	46bd      	mov	sp, r7
    44ee:	b002      	add	sp, #8
    44f0:	bd80      	pop	{r7, pc}

000044f2 <_ZN20USBDevice_SAMD21G18x22epBank0IsSetupReceivedEh>:

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    44f2:	b580      	push	{r7, lr}
    44f4:	b082      	sub	sp, #8
    44f6:	af00      	add	r7, sp, #0
    44f8:	6078      	str	r0, [r7, #4]
    44fa:	000a      	movs	r2, r1
    44fc:	1cfb      	adds	r3, r7, #3
    44fe:	701a      	strb	r2, [r3, #0]
    4500:	687b      	ldr	r3, [r7, #4]
    4502:	681a      	ldr	r2, [r3, #0]
    4504:	1cfb      	adds	r3, r7, #3
    4506:	781b      	ldrb	r3, [r3, #0]
    4508:	3308      	adds	r3, #8
    450a:	015b      	lsls	r3, r3, #5
    450c:	18d3      	adds	r3, r2, r3
    450e:	79db      	ldrb	r3, [r3, #7]
    4510:	06db      	lsls	r3, r3, #27
    4512:	0fdb      	lsrs	r3, r3, #31
    4514:	b2db      	uxtb	r3, r3
    4516:	0018      	movs	r0, r3
    4518:	46bd      	mov	sp, r7
    451a:	b002      	add	sp, #8
    451c:	bd80      	pop	{r7, pc}

0000451e <_ZN20USBDevice_SAMD21G18x16epBank1IsStalledEh>:
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    451e:	b580      	push	{r7, lr}
    4520:	b082      	sub	sp, #8
    4522:	af00      	add	r7, sp, #0
    4524:	6078      	str	r0, [r7, #4]
    4526:	000a      	movs	r2, r1
    4528:	1cfb      	adds	r3, r7, #3
    452a:	701a      	strb	r2, [r3, #0]
    452c:	687b      	ldr	r3, [r7, #4]
    452e:	681a      	ldr	r2, [r3, #0]
    4530:	1cfb      	adds	r3, r7, #3
    4532:	781b      	ldrb	r3, [r3, #0]
    4534:	3308      	adds	r3, #8
    4536:	015b      	lsls	r3, r3, #5
    4538:	18d3      	adds	r3, r2, r3
    453a:	79db      	ldrb	r3, [r3, #7]
    453c:	065b      	lsls	r3, r3, #25
    453e:	0fdb      	lsrs	r3, r3, #31
    4540:	b2db      	uxtb	r3, r3
    4542:	0018      	movs	r0, r3
    4544:	46bd      	mov	sp, r7
    4546:	b002      	add	sp, #8
    4548:	bd80      	pop	{r7, pc}

0000454a <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>:
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    454a:	b580      	push	{r7, lr}
    454c:	b082      	sub	sp, #8
    454e:	af00      	add	r7, sp, #0
    4550:	6078      	str	r0, [r7, #4]
    4552:	000a      	movs	r2, r1
    4554:	1cfb      	adds	r3, r7, #3
    4556:	701a      	strb	r2, [r3, #0]
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	681a      	ldr	r2, [r3, #0]
    455c:	1cfb      	adds	r3, r7, #3
    455e:	781b      	ldrb	r3, [r3, #0]
    4560:	3308      	adds	r3, #8
    4562:	015b      	lsls	r3, r3, #5
    4564:	18d3      	adds	r3, r2, r3
    4566:	79db      	ldrb	r3, [r3, #7]
    4568:	07db      	lsls	r3, r3, #31
    456a:	0fdb      	lsrs	r3, r3, #31
    456c:	b2db      	uxtb	r3, r3
    456e:	0018      	movs	r0, r3
    4570:	46bd      	mov	sp, r7
    4572:	b002      	add	sp, #8
    4574:	bd80      	pop	{r7, pc}

00004576 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>:
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    4576:	b580      	push	{r7, lr}
    4578:	b082      	sub	sp, #8
    457a:	af00      	add	r7, sp, #0
    457c:	6078      	str	r0, [r7, #4]
    457e:	000a      	movs	r2, r1
    4580:	1cfb      	adds	r3, r7, #3
    4582:	701a      	strb	r2, [r3, #0]
    4584:	687b      	ldr	r3, [r7, #4]
    4586:	681a      	ldr	r2, [r3, #0]
    4588:	1cfb      	adds	r3, r7, #3
    458a:	781b      	ldrb	r3, [r3, #0]
    458c:	3308      	adds	r3, #8
    458e:	015b      	lsls	r3, r3, #5
    4590:	18d3      	adds	r3, r2, r3
    4592:	79db      	ldrb	r3, [r3, #7]
    4594:	079b      	lsls	r3, r3, #30
    4596:	0fdb      	lsrs	r3, r3, #31
    4598:	b2db      	uxtb	r3, r3
    459a:	0018      	movs	r0, r3
    459c:	46bd      	mov	sp, r7
    459e:	b002      	add	sp, #8
    45a0:	bd80      	pop	{r7, pc}

000045a2 <_ZN20USBDevice_SAMD21G18x23epBank0AckSetupReceivedEh>:

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    45a2:	b580      	push	{r7, lr}
    45a4:	b082      	sub	sp, #8
    45a6:	af00      	add	r7, sp, #0
    45a8:	6078      	str	r0, [r7, #4]
    45aa:	000a      	movs	r2, r1
    45ac:	1cfb      	adds	r3, r7, #3
    45ae:	701a      	strb	r2, [r3, #0]
    45b0:	687b      	ldr	r3, [r7, #4]
    45b2:	681a      	ldr	r2, [r3, #0]
    45b4:	1cfb      	adds	r3, r7, #3
    45b6:	781b      	ldrb	r3, [r3, #0]
    45b8:	3308      	adds	r3, #8
    45ba:	015b      	lsls	r3, r3, #5
    45bc:	18d3      	adds	r3, r2, r3
    45be:	3307      	adds	r3, #7
    45c0:	2210      	movs	r2, #16
    45c2:	701a      	strb	r2, [r3, #0]
    45c4:	46c0      	nop			; (mov r8, r8)
    45c6:	46bd      	mov	sp, r7
    45c8:	b002      	add	sp, #8
    45ca:	bd80      	pop	{r7, pc}

000045cc <_ZN20USBDevice_SAMD21G18x17epBank1AckStalledEh>:
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    45cc:	b580      	push	{r7, lr}
    45ce:	b082      	sub	sp, #8
    45d0:	af00      	add	r7, sp, #0
    45d2:	6078      	str	r0, [r7, #4]
    45d4:	000a      	movs	r2, r1
    45d6:	1cfb      	adds	r3, r7, #3
    45d8:	701a      	strb	r2, [r3, #0]
    45da:	687b      	ldr	r3, [r7, #4]
    45dc:	681a      	ldr	r2, [r3, #0]
    45de:	1cfb      	adds	r3, r7, #3
    45e0:	781b      	ldrb	r3, [r3, #0]
    45e2:	3308      	adds	r3, #8
    45e4:	015b      	lsls	r3, r3, #5
    45e6:	18d3      	adds	r3, r2, r3
    45e8:	3307      	adds	r3, #7
    45ea:	2240      	movs	r2, #64	; 0x40
    45ec:	701a      	strb	r2, [r3, #0]
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	46bd      	mov	sp, r7
    45f2:	b002      	add	sp, #8
    45f4:	bd80      	pop	{r7, pc}

000045f6 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>:
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    45f6:	b580      	push	{r7, lr}
    45f8:	b082      	sub	sp, #8
    45fa:	af00      	add	r7, sp, #0
    45fc:	6078      	str	r0, [r7, #4]
    45fe:	000a      	movs	r2, r1
    4600:	1cfb      	adds	r3, r7, #3
    4602:	701a      	strb	r2, [r3, #0]
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	681a      	ldr	r2, [r3, #0]
    4608:	1cfb      	adds	r3, r7, #3
    460a:	781b      	ldrb	r3, [r3, #0]
    460c:	3308      	adds	r3, #8
    460e:	015b      	lsls	r3, r3, #5
    4610:	18d3      	adds	r3, r2, r3
    4612:	3307      	adds	r3, #7
    4614:	2201      	movs	r2, #1
    4616:	701a      	strb	r2, [r3, #0]
    4618:	46c0      	nop			; (mov r8, r8)
    461a:	46bd      	mov	sp, r7
    461c:	b002      	add	sp, #8
    461e:	bd80      	pop	{r7, pc}

00004620 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>:
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    4620:	b580      	push	{r7, lr}
    4622:	b082      	sub	sp, #8
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
    4628:	000a      	movs	r2, r1
    462a:	1cfb      	adds	r3, r7, #3
    462c:	701a      	strb	r2, [r3, #0]
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	681a      	ldr	r2, [r3, #0]
    4632:	1cfb      	adds	r3, r7, #3
    4634:	781b      	ldrb	r3, [r3, #0]
    4636:	3308      	adds	r3, #8
    4638:	015b      	lsls	r3, r3, #5
    463a:	18d3      	adds	r3, r2, r3
    463c:	3307      	adds	r3, #7
    463e:	2202      	movs	r2, #2
    4640:	701a      	strb	r2, [r3, #0]
    4642:	46c0      	nop			; (mov r8, r8)
    4644:	46bd      	mov	sp, r7
    4646:	b002      	add	sp, #8
    4648:	bd80      	pop	{r7, pc}

0000464a <_ZN20USBDevice_SAMD21G18x26epBank0EnableSetupReceivedEh>:

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    464a:	b580      	push	{r7, lr}
    464c:	b082      	sub	sp, #8
    464e:	af00      	add	r7, sp, #0
    4650:	6078      	str	r0, [r7, #4]
    4652:	000a      	movs	r2, r1
    4654:	1cfb      	adds	r3, r7, #3
    4656:	701a      	strb	r2, [r3, #0]
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	6819      	ldr	r1, [r3, #0]
    465c:	1cfb      	adds	r3, r7, #3
    465e:	781a      	ldrb	r2, [r3, #0]
    4660:	2384      	movs	r3, #132	; 0x84
    4662:	005b      	lsls	r3, r3, #1
    4664:	0152      	lsls	r2, r2, #5
    4666:	188a      	adds	r2, r1, r2
    4668:	18d2      	adds	r2, r2, r3
    466a:	7853      	ldrb	r3, [r2, #1]
    466c:	2110      	movs	r1, #16
    466e:	430b      	orrs	r3, r1
    4670:	7053      	strb	r3, [r2, #1]
    4672:	46c0      	nop			; (mov r8, r8)
    4674:	46bd      	mov	sp, r7
    4676:	b002      	add	sp, #8
    4678:	bd80      	pop	{r7, pc}

0000467a <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>:
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    467a:	b580      	push	{r7, lr}
    467c:	b082      	sub	sp, #8
    467e:	af00      	add	r7, sp, #0
    4680:	6078      	str	r0, [r7, #4]
    4682:	000a      	movs	r2, r1
    4684:	1cfb      	adds	r3, r7, #3
    4686:	701a      	strb	r2, [r3, #0]
    4688:	687b      	ldr	r3, [r7, #4]
    468a:	6819      	ldr	r1, [r3, #0]
    468c:	1cfb      	adds	r3, r7, #3
    468e:	781a      	ldrb	r2, [r3, #0]
    4690:	2384      	movs	r3, #132	; 0x84
    4692:	005b      	lsls	r3, r3, #1
    4694:	0152      	lsls	r2, r2, #5
    4696:	188a      	adds	r2, r1, r2
    4698:	18d2      	adds	r2, r2, r3
    469a:	7853      	ldrb	r3, [r2, #1]
    469c:	2101      	movs	r1, #1
    469e:	430b      	orrs	r3, r1
    46a0:	7053      	strb	r3, [r2, #1]
    46a2:	46c0      	nop			; (mov r8, r8)
    46a4:	46bd      	mov	sp, r7
    46a6:	b002      	add	sp, #8
    46a8:	bd80      	pop	{r7, pc}

000046aa <_ZN20USBDevice_SAMD21G18x29epBank1EnableTransferCompleteEh>:
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    46aa:	b580      	push	{r7, lr}
    46ac:	b082      	sub	sp, #8
    46ae:	af00      	add	r7, sp, #0
    46b0:	6078      	str	r0, [r7, #4]
    46b2:	000a      	movs	r2, r1
    46b4:	1cfb      	adds	r3, r7, #3
    46b6:	701a      	strb	r2, [r3, #0]
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	6819      	ldr	r1, [r3, #0]
    46bc:	1cfb      	adds	r3, r7, #3
    46be:	781a      	ldrb	r2, [r3, #0]
    46c0:	2384      	movs	r3, #132	; 0x84
    46c2:	005b      	lsls	r3, r3, #1
    46c4:	0152      	lsls	r2, r2, #5
    46c6:	188a      	adds	r2, r1, r2
    46c8:	18d2      	adds	r2, r2, r3
    46ca:	7853      	ldrb	r3, [r2, #1]
    46cc:	2102      	movs	r1, #2
    46ce:	430b      	orrs	r3, r1
    46d0:	7053      	strb	r3, [r2, #1]
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	46bd      	mov	sp, r7
    46d6:	b002      	add	sp, #8
    46d8:	bd80      	pop	{r7, pc}

000046da <_ZN20USBDevice_SAMD21G18x21epBank1DisableStalledEh>:

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    46da:	b580      	push	{r7, lr}
    46dc:	b082      	sub	sp, #8
    46de:	af00      	add	r7, sp, #0
    46e0:	6078      	str	r0, [r7, #4]
    46e2:	000a      	movs	r2, r1
    46e4:	1cfb      	adds	r3, r7, #3
    46e6:	701a      	strb	r2, [r3, #0]
    46e8:	687b      	ldr	r3, [r7, #4]
    46ea:	6819      	ldr	r1, [r3, #0]
    46ec:	1cfb      	adds	r3, r7, #3
    46ee:	781a      	ldrb	r2, [r3, #0]
    46f0:	2384      	movs	r3, #132	; 0x84
    46f2:	005b      	lsls	r3, r3, #1
    46f4:	0152      	lsls	r2, r2, #5
    46f6:	188a      	adds	r2, r1, r2
    46f8:	18d2      	adds	r2, r2, r3
    46fa:	7813      	ldrb	r3, [r2, #0]
    46fc:	2140      	movs	r1, #64	; 0x40
    46fe:	430b      	orrs	r3, r1
    4700:	7013      	strb	r3, [r2, #0]
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	46bd      	mov	sp, r7
    4706:	b002      	add	sp, #8
    4708:	bd80      	pop	{r7, pc}

0000470a <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>:
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    470a:	b580      	push	{r7, lr}
    470c:	b082      	sub	sp, #8
    470e:	af00      	add	r7, sp, #0
    4710:	6078      	str	r0, [r7, #4]
    4712:	000a      	movs	r2, r1
    4714:	1cfb      	adds	r3, r7, #3
    4716:	701a      	strb	r2, [r3, #0]
    4718:	687b      	ldr	r3, [r7, #4]
    471a:	6819      	ldr	r1, [r3, #0]
    471c:	1cfb      	adds	r3, r7, #3
    471e:	781a      	ldrb	r2, [r3, #0]
    4720:	2384      	movs	r3, #132	; 0x84
    4722:	005b      	lsls	r3, r3, #1
    4724:	0152      	lsls	r2, r2, #5
    4726:	188a      	adds	r2, r1, r2
    4728:	18d2      	adds	r2, r2, r3
    472a:	7813      	ldrb	r3, [r2, #0]
    472c:	2101      	movs	r1, #1
    472e:	430b      	orrs	r3, r1
    4730:	7013      	strb	r3, [r2, #0]
    4732:	46c0      	nop			; (mov r8, r8)
    4734:	46bd      	mov	sp, r7
    4736:	b002      	add	sp, #8
    4738:	bd80      	pop	{r7, pc}

0000473a <_ZN20USBDevice_SAMD21G18x14epBank0IsReadyEh>:
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    473a:	b580      	push	{r7, lr}
    473c:	b082      	sub	sp, #8
    473e:	af00      	add	r7, sp, #0
    4740:	6078      	str	r0, [r7, #4]
    4742:	000a      	movs	r2, r1
    4744:	1cfb      	adds	r3, r7, #3
    4746:	701a      	strb	r2, [r3, #0]
    4748:	687b      	ldr	r3, [r7, #4]
    474a:	681a      	ldr	r2, [r3, #0]
    474c:	1cfb      	adds	r3, r7, #3
    474e:	781b      	ldrb	r3, [r3, #0]
    4750:	3308      	adds	r3, #8
    4752:	015b      	lsls	r3, r3, #5
    4754:	18d3      	adds	r3, r2, r3
    4756:	799b      	ldrb	r3, [r3, #6]
    4758:	065b      	lsls	r3, r3, #25
    475a:	0fdb      	lsrs	r3, r3, #31
    475c:	b2db      	uxtb	r3, r3
    475e:	0018      	movs	r0, r3
    4760:	46bd      	mov	sp, r7
    4762:	b002      	add	sp, #8
    4764:	bd80      	pop	{r7, pc}

00004766 <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>:
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    4766:	b580      	push	{r7, lr}
    4768:	b082      	sub	sp, #8
    476a:	af00      	add	r7, sp, #0
    476c:	6078      	str	r0, [r7, #4]
    476e:	000a      	movs	r2, r1
    4770:	1cfb      	adds	r3, r7, #3
    4772:	701a      	strb	r2, [r3, #0]
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	681a      	ldr	r2, [r3, #0]
    4778:	1cfb      	adds	r3, r7, #3
    477a:	781b      	ldrb	r3, [r3, #0]
    477c:	3308      	adds	r3, #8
    477e:	015b      	lsls	r3, r3, #5
    4780:	18d3      	adds	r3, r2, r3
    4782:	799b      	ldrb	r3, [r3, #6]
    4784:	061b      	lsls	r3, r3, #24
    4786:	0fdb      	lsrs	r3, r3, #31
    4788:	b2db      	uxtb	r3, r3
    478a:	0018      	movs	r0, r3
    478c:	46bd      	mov	sp, r7
    478e:	b002      	add	sp, #8
    4790:	bd80      	pop	{r7, pc}

00004792 <_ZN20USBDevice_SAMD21G18x15epBank0SetReadyEh>:
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    4792:	b580      	push	{r7, lr}
    4794:	b082      	sub	sp, #8
    4796:	af00      	add	r7, sp, #0
    4798:	6078      	str	r0, [r7, #4]
    479a:	000a      	movs	r2, r1
    479c:	1cfb      	adds	r3, r7, #3
    479e:	701a      	strb	r2, [r3, #0]
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	681a      	ldr	r2, [r3, #0]
    47a4:	1cfb      	adds	r3, r7, #3
    47a6:	781b      	ldrb	r3, [r3, #0]
    47a8:	3308      	adds	r3, #8
    47aa:	015b      	lsls	r3, r3, #5
    47ac:	18d2      	adds	r2, r2, r3
    47ae:	7953      	ldrb	r3, [r2, #5]
    47b0:	2140      	movs	r1, #64	; 0x40
    47b2:	430b      	orrs	r3, r1
    47b4:	7153      	strb	r3, [r2, #5]
    47b6:	46c0      	nop			; (mov r8, r8)
    47b8:	46bd      	mov	sp, r7
    47ba:	b002      	add	sp, #8
    47bc:	bd80      	pop	{r7, pc}

000047be <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>:
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    47be:	b580      	push	{r7, lr}
    47c0:	b082      	sub	sp, #8
    47c2:	af00      	add	r7, sp, #0
    47c4:	6078      	str	r0, [r7, #4]
    47c6:	000a      	movs	r2, r1
    47c8:	1cfb      	adds	r3, r7, #3
    47ca:	701a      	strb	r2, [r3, #0]
    47cc:	687b      	ldr	r3, [r7, #4]
    47ce:	681a      	ldr	r2, [r3, #0]
    47d0:	1cfb      	adds	r3, r7, #3
    47d2:	781b      	ldrb	r3, [r3, #0]
    47d4:	3308      	adds	r3, #8
    47d6:	015b      	lsls	r3, r3, #5
    47d8:	18d2      	adds	r2, r2, r3
    47da:	7953      	ldrb	r3, [r2, #5]
    47dc:	2180      	movs	r1, #128	; 0x80
    47de:	4249      	negs	r1, r1
    47e0:	430b      	orrs	r3, r1
    47e2:	7153      	strb	r3, [r2, #5]
    47e4:	46c0      	nop			; (mov r8, r8)
    47e6:	46bd      	mov	sp, r7
    47e8:	b002      	add	sp, #8
    47ea:	bd80      	pop	{r7, pc}

000047ec <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>:
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0
    47f2:	6078      	str	r0, [r7, #4]
    47f4:	000a      	movs	r2, r1
    47f6:	1cfb      	adds	r3, r7, #3
    47f8:	701a      	strb	r2, [r3, #0]
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	681a      	ldr	r2, [r3, #0]
    47fe:	1cfb      	adds	r3, r7, #3
    4800:	781b      	ldrb	r3, [r3, #0]
    4802:	3308      	adds	r3, #8
    4804:	015b      	lsls	r3, r3, #5
    4806:	18d2      	adds	r2, r2, r3
    4808:	7913      	ldrb	r3, [r2, #4]
    480a:	2140      	movs	r1, #64	; 0x40
    480c:	430b      	orrs	r3, r1
    480e:	7113      	strb	r3, [r2, #4]
    4810:	46c0      	nop			; (mov r8, r8)
    4812:	46bd      	mov	sp, r7
    4814:	b002      	add	sp, #8
    4816:	bd80      	pop	{r7, pc}

00004818 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>:
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    4818:	b580      	push	{r7, lr}
    481a:	b082      	sub	sp, #8
    481c:	af00      	add	r7, sp, #0
    481e:	6078      	str	r0, [r7, #4]
    4820:	000a      	movs	r2, r1
    4822:	1cfb      	adds	r3, r7, #3
    4824:	701a      	strb	r2, [r3, #0]
    4826:	687b      	ldr	r3, [r7, #4]
    4828:	681a      	ldr	r2, [r3, #0]
    482a:	1cfb      	adds	r3, r7, #3
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	3308      	adds	r3, #8
    4830:	015b      	lsls	r3, r3, #5
    4832:	18d2      	adds	r2, r2, r3
    4834:	7913      	ldrb	r3, [r2, #4]
    4836:	2180      	movs	r1, #128	; 0x80
    4838:	4249      	negs	r1, r1
    483a:	430b      	orrs	r3, r1
    483c:	7113      	strb	r3, [r2, #4]
    483e:	46c0      	nop			; (mov r8, r8)
    4840:	46bd      	mov	sp, r7
    4842:	b002      	add	sp, #8
    4844:	bd80      	pop	{r7, pc}

00004846 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>:
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    4846:	b580      	push	{r7, lr}
    4848:	b082      	sub	sp, #8
    484a:	af00      	add	r7, sp, #0
    484c:	6078      	str	r0, [r7, #4]
    484e:	000a      	movs	r2, r1
    4850:	1cfb      	adds	r3, r7, #3
    4852:	701a      	strb	r2, [r3, #0]
    4854:	1cfb      	adds	r3, r7, #3
    4856:	781b      	ldrb	r3, [r3, #0]
    4858:	687a      	ldr	r2, [r7, #4]
    485a:	015b      	lsls	r3, r3, #5
    485c:	18d3      	adds	r3, r2, r3
    485e:	689b      	ldr	r3, [r3, #8]
    4860:	049b      	lsls	r3, r3, #18
    4862:	0c9b      	lsrs	r3, r3, #18
    4864:	b29b      	uxth	r3, r3
    4866:	0018      	movs	r0, r3
    4868:	46bd      	mov	sp, r7
    486a:	b002      	add	sp, #8
    486c:	bd80      	pop	{r7, pc}

0000486e <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>:
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    486e:	b580      	push	{r7, lr}
    4870:	b082      	sub	sp, #8
    4872:	af00      	add	r7, sp, #0
    4874:	6078      	str	r0, [r7, #4]
    4876:	0008      	movs	r0, r1
    4878:	0011      	movs	r1, r2
    487a:	1cfb      	adds	r3, r7, #3
    487c:	1c02      	adds	r2, r0, #0
    487e:	701a      	strb	r2, [r3, #0]
    4880:	003b      	movs	r3, r7
    4882:	1c0a      	adds	r2, r1, #0
    4884:	801a      	strh	r2, [r3, #0]
    4886:	1cfb      	adds	r3, r7, #3
    4888:	781b      	ldrb	r3, [r3, #0]
    488a:	003a      	movs	r2, r7
    488c:	8812      	ldrh	r2, [r2, #0]
    488e:	0492      	lsls	r2, r2, #18
    4890:	0c92      	lsrs	r2, r2, #18
    4892:	b291      	uxth	r1, r2
    4894:	687a      	ldr	r2, [r7, #4]
    4896:	015b      	lsls	r3, r3, #5
    4898:	18d3      	adds	r3, r2, r3
    489a:	689a      	ldr	r2, [r3, #8]
    489c:	0489      	lsls	r1, r1, #18
    489e:	0c89      	lsrs	r1, r1, #18
    48a0:	0b92      	lsrs	r2, r2, #14
    48a2:	0392      	lsls	r2, r2, #14
    48a4:	430a      	orrs	r2, r1
    48a6:	609a      	str	r2, [r3, #8]
    48a8:	46c0      	nop			; (mov r8, r8)
    48aa:	46bd      	mov	sp, r7
    48ac:	b002      	add	sp, #8
    48ae:	bd80      	pop	{r7, pc}

000048b0 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>:
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    48b0:	b580      	push	{r7, lr}
    48b2:	b082      	sub	sp, #8
    48b4:	af00      	add	r7, sp, #0
    48b6:	6078      	str	r0, [r7, #4]
    48b8:	0008      	movs	r0, r1
    48ba:	0011      	movs	r1, r2
    48bc:	1cfb      	adds	r3, r7, #3
    48be:	1c02      	adds	r2, r0, #0
    48c0:	701a      	strb	r2, [r3, #0]
    48c2:	003b      	movs	r3, r7
    48c4:	1c0a      	adds	r2, r1, #0
    48c6:	801a      	strh	r2, [r3, #0]
    48c8:	1cfb      	adds	r3, r7, #3
    48ca:	781b      	ldrb	r3, [r3, #0]
    48cc:	003a      	movs	r2, r7
    48ce:	8812      	ldrh	r2, [r2, #0]
    48d0:	0492      	lsls	r2, r2, #18
    48d2:	0c92      	lsrs	r2, r2, #18
    48d4:	b291      	uxth	r1, r2
    48d6:	687a      	ldr	r2, [r7, #4]
    48d8:	015b      	lsls	r3, r3, #5
    48da:	18d3      	adds	r3, r2, r3
    48dc:	3310      	adds	r3, #16
    48de:	689a      	ldr	r2, [r3, #8]
    48e0:	0489      	lsls	r1, r1, #18
    48e2:	0c89      	lsrs	r1, r1, #18
    48e4:	0b92      	lsrs	r2, r2, #14
    48e6:	0392      	lsls	r2, r2, #14
    48e8:	430a      	orrs	r2, r1
    48ea:	609a      	str	r2, [r3, #8]
    48ec:	46c0      	nop			; (mov r8, r8)
    48ee:	46bd      	mov	sp, r7
    48f0:	b002      	add	sp, #8
    48f2:	bd80      	pop	{r7, pc}

000048f4 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>:
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    48f4:	b580      	push	{r7, lr}
    48f6:	b082      	sub	sp, #8
    48f8:	af00      	add	r7, sp, #0
    48fa:	6078      	str	r0, [r7, #4]
    48fc:	0008      	movs	r0, r1
    48fe:	0011      	movs	r1, r2
    4900:	1cfb      	adds	r3, r7, #3
    4902:	1c02      	adds	r2, r0, #0
    4904:	701a      	strb	r2, [r3, #0]
    4906:	003b      	movs	r3, r7
    4908:	1c0a      	adds	r2, r1, #0
    490a:	801a      	strh	r2, [r3, #0]
    490c:	1cfb      	adds	r3, r7, #3
    490e:	781b      	ldrb	r3, [r3, #0]
    4910:	003a      	movs	r2, r7
    4912:	8812      	ldrh	r2, [r2, #0]
    4914:	0492      	lsls	r2, r2, #18
    4916:	0c92      	lsrs	r2, r2, #18
    4918:	b291      	uxth	r1, r2
    491a:	687a      	ldr	r2, [r7, #4]
    491c:	015b      	lsls	r3, r3, #5
    491e:	18d3      	adds	r3, r2, r3
    4920:	689a      	ldr	r2, [r3, #8]
    4922:	0489      	lsls	r1, r1, #18
    4924:	0c89      	lsrs	r1, r1, #18
    4926:	0389      	lsls	r1, r1, #14
    4928:	4803      	ldr	r0, [pc, #12]	; (4938 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht+0x44>)
    492a:	4002      	ands	r2, r0
    492c:	430a      	orrs	r2, r1
    492e:	609a      	str	r2, [r3, #8]
    4930:	46c0      	nop			; (mov r8, r8)
    4932:	46bd      	mov	sp, r7
    4934:	b002      	add	sp, #8
    4936:	bd80      	pop	{r7, pc}
    4938:	f0003fff 	.word	0xf0003fff

0000493c <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht>:
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    493c:	b580      	push	{r7, lr}
    493e:	b082      	sub	sp, #8
    4940:	af00      	add	r7, sp, #0
    4942:	6078      	str	r0, [r7, #4]
    4944:	0008      	movs	r0, r1
    4946:	0011      	movs	r1, r2
    4948:	1cfb      	adds	r3, r7, #3
    494a:	1c02      	adds	r2, r0, #0
    494c:	701a      	strb	r2, [r3, #0]
    494e:	003b      	movs	r3, r7
    4950:	1c0a      	adds	r2, r1, #0
    4952:	801a      	strh	r2, [r3, #0]
    4954:	1cfb      	adds	r3, r7, #3
    4956:	781b      	ldrb	r3, [r3, #0]
    4958:	003a      	movs	r2, r7
    495a:	8812      	ldrh	r2, [r2, #0]
    495c:	0492      	lsls	r2, r2, #18
    495e:	0c92      	lsrs	r2, r2, #18
    4960:	b291      	uxth	r1, r2
    4962:	687a      	ldr	r2, [r7, #4]
    4964:	015b      	lsls	r3, r3, #5
    4966:	18d3      	adds	r3, r2, r3
    4968:	3310      	adds	r3, #16
    496a:	689a      	ldr	r2, [r3, #8]
    496c:	0489      	lsls	r1, r1, #18
    496e:	0c89      	lsrs	r1, r1, #18
    4970:	0389      	lsls	r1, r1, #14
    4972:	4804      	ldr	r0, [pc, #16]	; (4984 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht+0x48>)
    4974:	4002      	ands	r2, r0
    4976:	430a      	orrs	r2, r1
    4978:	609a      	str	r2, [r3, #8]
    497a:	46c0      	nop			; (mov r8, r8)
    497c:	46bd      	mov	sp, r7
    497e:	b002      	add	sp, #8
    4980:	bd80      	pop	{r7, pc}
    4982:	46c0      	nop			; (mov r8, r8)
    4984:	f0003fff 	.word	0xf0003fff

00004988 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>:

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    4988:	b580      	push	{r7, lr}
    498a:	b084      	sub	sp, #16
    498c:	af00      	add	r7, sp, #0
    498e:	60f8      	str	r0, [r7, #12]
    4990:	607a      	str	r2, [r7, #4]
    4992:	230b      	movs	r3, #11
    4994:	18fb      	adds	r3, r7, r3
    4996:	1c0a      	adds	r2, r1, #0
    4998:	701a      	strb	r2, [r3, #0]
    499a:	230b      	movs	r3, #11
    499c:	18fb      	adds	r3, r7, r3
    499e:	781b      	ldrb	r3, [r3, #0]
    49a0:	687a      	ldr	r2, [r7, #4]
    49a2:	68f9      	ldr	r1, [r7, #12]
    49a4:	015b      	lsls	r3, r3, #5
    49a6:	18cb      	adds	r3, r1, r3
    49a8:	3304      	adds	r3, #4
    49aa:	601a      	str	r2, [r3, #0]
    49ac:	46c0      	nop			; (mov r8, r8)
    49ae:	46bd      	mov	sp, r7
    49b0:	b004      	add	sp, #16
    49b2:	bd80      	pop	{r7, pc}

000049b4 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>:
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    49b4:	b580      	push	{r7, lr}
    49b6:	b084      	sub	sp, #16
    49b8:	af00      	add	r7, sp, #0
    49ba:	60f8      	str	r0, [r7, #12]
    49bc:	607a      	str	r2, [r7, #4]
    49be:	230b      	movs	r3, #11
    49c0:	18fb      	adds	r3, r7, r3
    49c2:	1c0a      	adds	r2, r1, #0
    49c4:	701a      	strb	r2, [r3, #0]
    49c6:	230b      	movs	r3, #11
    49c8:	18fb      	adds	r3, r7, r3
    49ca:	781b      	ldrb	r3, [r3, #0]
    49cc:	687a      	ldr	r2, [r7, #4]
    49ce:	68f9      	ldr	r1, [r7, #12]
    49d0:	015b      	lsls	r3, r3, #5
    49d2:	18cb      	adds	r3, r1, r3
    49d4:	3314      	adds	r3, #20
    49d6:	601a      	str	r2, [r3, #0]
    49d8:	46c0      	nop			; (mov r8, r8)
    49da:	46bd      	mov	sp, r7
    49dc:	b004      	add	sp, #16
    49de:	bd80      	pop	{r7, pc}

000049e0 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>:
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    49e0:	b590      	push	{r4, r7, lr}
    49e2:	b083      	sub	sp, #12
    49e4:	af00      	add	r7, sp, #0
    49e6:	6078      	str	r0, [r7, #4]
    49e8:	0008      	movs	r0, r1
    49ea:	0011      	movs	r1, r2
    49ec:	1cfb      	adds	r3, r7, #3
    49ee:	1c02      	adds	r2, r0, #0
    49f0:	701a      	strb	r2, [r3, #0]
    49f2:	003b      	movs	r3, r7
    49f4:	1c0a      	adds	r2, r1, #0
    49f6:	801a      	strh	r2, [r3, #0]
    49f8:	1cfb      	adds	r3, r7, #3
    49fa:	781c      	ldrb	r4, [r3, #0]
    49fc:	003b      	movs	r3, r7
    49fe:	881a      	ldrh	r2, [r3, #0]
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	0011      	movs	r1, r2
    4a04:	0018      	movs	r0, r3
    4a06:	f000 f843 	bl	4a90 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>
    4a0a:	0003      	movs	r3, r0
    4a0c:	1c1a      	adds	r2, r3, #0
    4a0e:	2307      	movs	r3, #7
    4a10:	4013      	ands	r3, r2
    4a12:	b2d9      	uxtb	r1, r3
    4a14:	687a      	ldr	r2, [r7, #4]
    4a16:	0163      	lsls	r3, r4, #5
    4a18:	18d3      	adds	r3, r2, r3
    4a1a:	689a      	ldr	r2, [r3, #8]
    4a1c:	2007      	movs	r0, #7
    4a1e:	4001      	ands	r1, r0
    4a20:	0709      	lsls	r1, r1, #28
    4a22:	4804      	ldr	r0, [pc, #16]	; (4a34 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht+0x54>)
    4a24:	4002      	ands	r2, r0
    4a26:	430a      	orrs	r2, r1
    4a28:	609a      	str	r2, [r3, #8]
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	46bd      	mov	sp, r7
    4a2e:	b003      	add	sp, #12
    4a30:	bd90      	pop	{r4, r7, pc}
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	8fffffff 	.word	0x8fffffff

00004a38 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>:
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    4a38:	b590      	push	{r4, r7, lr}
    4a3a:	b083      	sub	sp, #12
    4a3c:	af00      	add	r7, sp, #0
    4a3e:	6078      	str	r0, [r7, #4]
    4a40:	0008      	movs	r0, r1
    4a42:	0011      	movs	r1, r2
    4a44:	1cfb      	adds	r3, r7, #3
    4a46:	1c02      	adds	r2, r0, #0
    4a48:	701a      	strb	r2, [r3, #0]
    4a4a:	003b      	movs	r3, r7
    4a4c:	1c0a      	adds	r2, r1, #0
    4a4e:	801a      	strh	r2, [r3, #0]
    4a50:	1cfb      	adds	r3, r7, #3
    4a52:	781c      	ldrb	r4, [r3, #0]
    4a54:	003b      	movs	r3, r7
    4a56:	881a      	ldrh	r2, [r3, #0]
    4a58:	687b      	ldr	r3, [r7, #4]
    4a5a:	0011      	movs	r1, r2
    4a5c:	0018      	movs	r0, r3
    4a5e:	f000 f817 	bl	4a90 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>
    4a62:	0003      	movs	r3, r0
    4a64:	1c1a      	adds	r2, r3, #0
    4a66:	2307      	movs	r3, #7
    4a68:	4013      	ands	r3, r2
    4a6a:	b2d9      	uxtb	r1, r3
    4a6c:	687a      	ldr	r2, [r7, #4]
    4a6e:	0163      	lsls	r3, r4, #5
    4a70:	18d3      	adds	r3, r2, r3
    4a72:	3310      	adds	r3, #16
    4a74:	689a      	ldr	r2, [r3, #8]
    4a76:	2007      	movs	r0, #7
    4a78:	4001      	ands	r1, r0
    4a7a:	0709      	lsls	r1, r1, #28
    4a7c:	4803      	ldr	r0, [pc, #12]	; (4a8c <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht+0x54>)
    4a7e:	4002      	ands	r2, r0
    4a80:	430a      	orrs	r2, r1
    4a82:	609a      	str	r2, [r3, #8]
    4a84:	46c0      	nop			; (mov r8, r8)
    4a86:	46bd      	mov	sp, r7
    4a88:	b003      	add	sp, #12
    4a8a:	bd90      	pop	{r4, r7, pc}
    4a8c:	8fffffff 	.word	0x8fffffff

00004a90 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>:
	inline uint8_t EP_PCKSIZE_SIZE(uint16_t size) {
    4a90:	b580      	push	{r7, lr}
    4a92:	b082      	sub	sp, #8
    4a94:	af00      	add	r7, sp, #0
    4a96:	6078      	str	r0, [r7, #4]
    4a98:	000a      	movs	r2, r1
    4a9a:	1cbb      	adds	r3, r7, #2
    4a9c:	801a      	strh	r2, [r3, #0]
		switch (size) {
    4a9e:	1cbb      	adds	r3, r7, #2
    4aa0:	881b      	ldrh	r3, [r3, #0]
    4aa2:	2b40      	cmp	r3, #64	; 0x40
    4aa4:	d020      	beq.n	4ae8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x58>
    4aa6:	dc06      	bgt.n	4ab6 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x26>
    4aa8:	2b10      	cmp	r3, #16
    4aaa:	d019      	beq.n	4ae0 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x50>
    4aac:	2b20      	cmp	r3, #32
    4aae:	d019      	beq.n	4ae4 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x54>
    4ab0:	2b08      	cmp	r3, #8
    4ab2:	d013      	beq.n	4adc <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x4c>
    4ab4:	e022      	b.n	4afc <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
    4ab6:	2280      	movs	r2, #128	; 0x80
    4ab8:	0052      	lsls	r2, r2, #1
    4aba:	4293      	cmp	r3, r2
    4abc:	d018      	beq.n	4af0 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x60>
    4abe:	2280      	movs	r2, #128	; 0x80
    4ac0:	0052      	lsls	r2, r2, #1
    4ac2:	4293      	cmp	r3, r2
    4ac4:	dc02      	bgt.n	4acc <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x3c>
    4ac6:	2b80      	cmp	r3, #128	; 0x80
    4ac8:	d010      	beq.n	4aec <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x5c>
    4aca:	e017      	b.n	4afc <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
    4acc:	2280      	movs	r2, #128	; 0x80
    4ace:	0092      	lsls	r2, r2, #2
    4ad0:	4293      	cmp	r3, r2
    4ad2:	d00f      	beq.n	4af4 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x64>
    4ad4:	4a0c      	ldr	r2, [pc, #48]	; (4b08 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x78>)
    4ad6:	4293      	cmp	r3, r2
    4ad8:	d00e      	beq.n	4af8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x68>
    4ada:	e00f      	b.n	4afc <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
		case 8:    return 0;
    4adc:	2300      	movs	r3, #0
    4ade:	e00e      	b.n	4afe <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 16:   return 1;
    4ae0:	2301      	movs	r3, #1
    4ae2:	e00c      	b.n	4afe <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 32:   return 2;
    4ae4:	2302      	movs	r3, #2
    4ae6:	e00a      	b.n	4afe <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 64:   return 3;
    4ae8:	2303      	movs	r3, #3
    4aea:	e008      	b.n	4afe <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 128:  return 4;
    4aec:	2304      	movs	r3, #4
    4aee:	e006      	b.n	4afe <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 256:  return 5;
    4af0:	2305      	movs	r3, #5
    4af2:	e004      	b.n	4afe <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 512:  return 6;
    4af4:	2306      	movs	r3, #6
    4af6:	e002      	b.n	4afe <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 1023: return 7;
    4af8:	2307      	movs	r3, #7
    4afa:	e000      	b.n	4afe <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		default:   return 0;
    4afc:	2300      	movs	r3, #0
		}
	}
    4afe:	0018      	movs	r0, r3
    4b00:	46bd      	mov	sp, r7
    4b02:	b002      	add	sp, #8
    4b04:	bd80      	pop	{r7, pc}
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	000003ff 	.word	0x000003ff

00004b0c <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    4b0c:	b580      	push	{r7, lr}
    4b0e:	b082      	sub	sp, #8
    4b10:	af00      	add	r7, sp, #0
    4b12:	6078      	str	r0, [r7, #4]
	usb.CTRLA.bit.SWRST = 1;
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	681a      	ldr	r2, [r3, #0]
    4b18:	7813      	ldrb	r3, [r2, #0]
    4b1a:	2101      	movs	r1, #1
    4b1c:	430b      	orrs	r3, r1
    4b1e:	7013      	strb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
    4b20:	687b      	ldr	r3, [r7, #4]
    4b22:	1d18      	adds	r0, r3, #4
    4b24:	2380      	movs	r3, #128	; 0x80
    4b26:	005b      	lsls	r3, r3, #1
    4b28:	001a      	movs	r2, r3
    4b2a:	2100      	movs	r1, #0
    4b2c:	f00b ff8c 	bl	10a48 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    4b30:	687b      	ldr	r3, [r7, #4]
    4b32:	681b      	ldr	r3, [r3, #0]
    4b34:	789b      	ldrb	r3, [r3, #2]
    4b36:	07db      	lsls	r3, r3, #31
    4b38:	0fdb      	lsrs	r3, r3, #31
    4b3a:	b2db      	uxtb	r3, r3
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	d000      	beq.n	4b42 <_ZN20USBDevice_SAMD21G18x5resetEv+0x36>
    4b40:	e7f6      	b.n	4b30 <_ZN20USBDevice_SAMD21G18x5resetEv+0x24>
	usb.DESCADD.reg = (uint32_t)(&EP);
    4b42:	687b      	ldr	r3, [r7, #4]
    4b44:	681b      	ldr	r3, [r3, #0]
    4b46:	687a      	ldr	r2, [r7, #4]
    4b48:	3204      	adds	r2, #4
    4b4a:	625a      	str	r2, [r3, #36]	; 0x24
}
    4b4c:	46c0      	nop			; (mov r8, r8)
    4b4e:	46bd      	mov	sp, r7
    4b50:	b002      	add	sp, #8
    4b52:	bd80      	pop	{r7, pc}

00004b54 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:

void USBDevice_SAMD21G18x::calibrate() {
    4b54:	b580      	push	{r7, lr}
    4b56:	b088      	sub	sp, #32
    4b58:	af00      	add	r7, sp, #0
    4b5a:	6078      	str	r0, [r7, #4]
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
    4b5c:	4b31      	ldr	r3, [pc, #196]	; (4c24 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    4b5e:	613b      	str	r3, [r7, #16]
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
    4b60:	4b30      	ldr	r3, [pc, #192]	; (4c24 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    4b62:	60fb      	str	r3, [r7, #12]
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;
    4b64:	4b2f      	ldr	r3, [pc, #188]	; (4c24 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    4b66:	60bb      	str	r3, [r7, #8]

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    4b68:	693b      	ldr	r3, [r7, #16]
    4b6a:	681b      	ldr	r3, [r3, #0]
    4b6c:	0b5b      	lsrs	r3, r3, #13
    4b6e:	221f      	movs	r2, #31
    4b70:	4013      	ands	r3, r2
    4b72:	61fb      	str	r3, [r7, #28]
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    4b74:	68fb      	ldr	r3, [r7, #12]
    4b76:	681b      	ldr	r3, [r3, #0]
    4b78:	0c9b      	lsrs	r3, r3, #18
    4b7a:	221f      	movs	r2, #31
    4b7c:	4013      	ands	r3, r2
    4b7e:	61bb      	str	r3, [r7, #24]
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    4b80:	68bb      	ldr	r3, [r7, #8]
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	0ddb      	lsrs	r3, r3, #23
    4b86:	2207      	movs	r2, #7
    4b88:	4013      	ands	r3, r2
    4b8a:	617b      	str	r3, [r7, #20]

	if (pad_transn == 0x1F)  // maximum value (31)
    4b8c:	69fb      	ldr	r3, [r7, #28]
    4b8e:	2b1f      	cmp	r3, #31
    4b90:	d101      	bne.n	4b96 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x42>
		pad_transn = 5;
    4b92:	2305      	movs	r3, #5
    4b94:	61fb      	str	r3, [r7, #28]
	if (pad_transp == 0x1F)  // maximum value (31)
    4b96:	69bb      	ldr	r3, [r7, #24]
    4b98:	2b1f      	cmp	r3, #31
    4b9a:	d101      	bne.n	4ba0 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x4c>
		pad_transp = 29;
    4b9c:	231d      	movs	r3, #29
    4b9e:	61bb      	str	r3, [r7, #24]
	if (pad_trim == 0x7)     // maximum value (7)
    4ba0:	697b      	ldr	r3, [r7, #20]
    4ba2:	2b07      	cmp	r3, #7
    4ba4:	d101      	bne.n	4baa <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x56>
		pad_trim = 3;
    4ba6:	2303      	movs	r3, #3
    4ba8:	617b      	str	r3, [r7, #20]

	usb.PADCAL.bit.TRANSN = pad_transn;
    4baa:	687b      	ldr	r3, [r7, #4]
    4bac:	681a      	ldr	r2, [r3, #0]
    4bae:	69fb      	ldr	r3, [r7, #28]
    4bb0:	b2db      	uxtb	r3, r3
    4bb2:	1c19      	adds	r1, r3, #0
    4bb4:	231f      	movs	r3, #31
    4bb6:	400b      	ands	r3, r1
    4bb8:	b2d9      	uxtb	r1, r3
    4bba:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4bbc:	1c08      	adds	r0, r1, #0
    4bbe:	211f      	movs	r1, #31
    4bc0:	4001      	ands	r1, r0
    4bc2:	0188      	lsls	r0, r1, #6
    4bc4:	4918      	ldr	r1, [pc, #96]	; (4c28 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd4>)
    4bc6:	400b      	ands	r3, r1
    4bc8:	1c19      	adds	r1, r3, #0
    4bca:	1c03      	adds	r3, r0, #0
    4bcc:	430b      	orrs	r3, r1
    4bce:	8513      	strh	r3, [r2, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    4bd0:	687b      	ldr	r3, [r7, #4]
    4bd2:	681a      	ldr	r2, [r3, #0]
    4bd4:	69bb      	ldr	r3, [r7, #24]
    4bd6:	b2db      	uxtb	r3, r3
    4bd8:	1c19      	adds	r1, r3, #0
    4bda:	231f      	movs	r3, #31
    4bdc:	400b      	ands	r3, r1
    4bde:	b2d9      	uxtb	r1, r3
    4be0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4be2:	1c08      	adds	r0, r1, #0
    4be4:	211f      	movs	r1, #31
    4be6:	4008      	ands	r0, r1
    4be8:	211f      	movs	r1, #31
    4bea:	438b      	bics	r3, r1
    4bec:	1c19      	adds	r1, r3, #0
    4bee:	1c03      	adds	r3, r0, #0
    4bf0:	430b      	orrs	r3, r1
    4bf2:	8513      	strh	r3, [r2, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	681a      	ldr	r2, [r3, #0]
    4bf8:	697b      	ldr	r3, [r7, #20]
    4bfa:	b2db      	uxtb	r3, r3
    4bfc:	1c19      	adds	r1, r3, #0
    4bfe:	2307      	movs	r3, #7
    4c00:	400b      	ands	r3, r1
    4c02:	b2d9      	uxtb	r1, r3
    4c04:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4c06:	1c08      	adds	r0, r1, #0
    4c08:	2107      	movs	r1, #7
    4c0a:	4001      	ands	r1, r0
    4c0c:	0308      	lsls	r0, r1, #12
    4c0e:	4907      	ldr	r1, [pc, #28]	; (4c2c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd8>)
    4c10:	400b      	ands	r3, r1
    4c12:	1c19      	adds	r1, r3, #0
    4c14:	1c03      	adds	r3, r0, #0
    4c16:	430b      	orrs	r3, r1
    4c18:	8513      	strh	r3, [r2, #40]	; 0x28
}
    4c1a:	46c0      	nop			; (mov r8, r8)
    4c1c:	46bd      	mov	sp, r7
    4c1e:	b008      	add	sp, #32
    4c20:	bd80      	pop	{r7, pc}
    4c22:	46c0      	nop			; (mov r8, r8)
    4c24:	00806024 	.word	0x00806024
    4c28:	fffff83f 	.word	0xfffff83f
    4c2c:	ffff8fff 	.word	0xffff8fff

00004c30 <_ZN7__GuardC1Ev>:
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    4c30:	b580      	push	{r7, lr}
    4c32:	b084      	sub	sp, #16
    4c34:	af00      	add	r7, sp, #0
    4c36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4c38:	f3ef 8310 	mrs	r3, PRIMASK
    4c3c:	60fb      	str	r3, [r7, #12]
  return(result);
    4c3e:	68fa      	ldr	r2, [r7, #12]
    4c40:	687b      	ldr	r3, [r7, #4]
    4c42:	601a      	str	r2, [r3, #0]
    4c44:	687b      	ldr	r3, [r7, #4]
    4c46:	2201      	movs	r2, #1
    4c48:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4c4a:	b672      	cpsid	i
		__disable_irq();
	}
    4c4c:	687b      	ldr	r3, [r7, #4]
    4c4e:	0018      	movs	r0, r3
    4c50:	46bd      	mov	sp, r7
    4c52:	b004      	add	sp, #16
    4c54:	bd80      	pop	{r7, pc}

00004c56 <_ZN7__GuardD1Ev>:
	~__Guard() {
    4c56:	b580      	push	{r7, lr}
    4c58:	b082      	sub	sp, #8
    4c5a:	af00      	add	r7, sp, #0
    4c5c:	6078      	str	r0, [r7, #4]
		if (primask == 0) {
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	681b      	ldr	r3, [r3, #0]
    4c62:	2b00      	cmp	r3, #0
    4c64:	d102      	bne.n	4c6c <_ZN7__GuardD1Ev+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
    4c66:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    4c68:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    4c6c:	687b      	ldr	r3, [r7, #4]
    4c6e:	0018      	movs	r0, r3
    4c70:	46bd      	mov	sp, r7
    4c72:	b002      	add	sp, #8
    4c74:	bd80      	pop	{r7, pc}

00004c76 <_ZN7__Guard5enterEv>:
	uint32_t enter() { return loops--; }
    4c76:	b580      	push	{r7, lr}
    4c78:	b082      	sub	sp, #8
    4c7a:	af00      	add	r7, sp, #0
    4c7c:	6078      	str	r0, [r7, #4]
    4c7e:	687b      	ldr	r3, [r7, #4]
    4c80:	685a      	ldr	r2, [r3, #4]
    4c82:	1e51      	subs	r1, r2, #1
    4c84:	687b      	ldr	r3, [r7, #4]
    4c86:	6059      	str	r1, [r3, #4]
    4c88:	0013      	movs	r3, r2
    4c8a:	0018      	movs	r0, r3
    4c8c:	46bd      	mov	sp, r7
    4c8e:	b002      	add	sp, #8
    4c90:	bd80      	pop	{r7, pc}
	...

00004c94 <_ZN9EPHandlerC1Ev>:

/*
 * USB EP generic handlers.
 */

class EPHandler {
    4c94:	b580      	push	{r7, lr}
    4c96:	b082      	sub	sp, #8
    4c98:	af00      	add	r7, sp, #0
    4c9a:	6078      	str	r0, [r7, #4]
    4c9c:	4a03      	ldr	r2, [pc, #12]	; (4cac <_ZN9EPHandlerC1Ev+0x18>)
    4c9e:	687b      	ldr	r3, [r7, #4]
    4ca0:	601a      	str	r2, [r3, #0]
    4ca2:	687b      	ldr	r3, [r7, #4]
    4ca4:	0018      	movs	r0, r3
    4ca6:	46bd      	mov	sp, r7
    4ca8:	b002      	add	sp, #8
    4caa:	bd80      	pop	{r7, pc}
    4cac:	00013708 	.word	0x00013708

00004cb0 <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm>:
	virtual uint32_t available() const = 0;
};

class DoubleBufferedEPOutHandler : public EPHandler {
public:
	DoubleBufferedEPOutHandler(USBDevice_SAMD21G18x &usbDev, uint32_t endPoint, uint32_t bufferSize) :
    4cb0:	b580      	push	{r7, lr}
    4cb2:	b084      	sub	sp, #16
    4cb4:	af00      	add	r7, sp, #0
    4cb6:	60f8      	str	r0, [r7, #12]
    4cb8:	60b9      	str	r1, [r7, #8]
    4cba:	607a      	str	r2, [r7, #4]
    4cbc:	603b      	str	r3, [r7, #0]
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    4cbe:	68fb      	ldr	r3, [r7, #12]
    4cc0:	0018      	movs	r0, r3
    4cc2:	f7ff ffe7 	bl	4c94 <_ZN9EPHandlerC1Ev>
    4cc6:	4a30      	ldr	r2, [pc, #192]	; (4d88 <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm+0xd8>)
    4cc8:	68fb      	ldr	r3, [r7, #12]
    4cca:	601a      	str	r2, [r3, #0]
    4ccc:	68fb      	ldr	r3, [r7, #12]
    4cce:	68ba      	ldr	r2, [r7, #8]
    4cd0:	605a      	str	r2, [r3, #4]
    4cd2:	68fb      	ldr	r3, [r7, #12]
    4cd4:	687a      	ldr	r2, [r7, #4]
    4cd6:	609a      	str	r2, [r3, #8]
    4cd8:	68fb      	ldr	r3, [r7, #12]
    4cda:	683a      	ldr	r2, [r7, #0]
    4cdc:	60da      	str	r2, [r3, #12]
    4cde:	68fb      	ldr	r3, [r7, #12]
    4ce0:	2200      	movs	r2, #0
    4ce2:	611a      	str	r2, [r3, #16]
    4ce4:	68fb      	ldr	r3, [r7, #12]
    4ce6:	2200      	movs	r2, #0
    4ce8:	615a      	str	r2, [r3, #20]
    4cea:	68fb      	ldr	r3, [r7, #12]
    4cec:	2200      	movs	r2, #0
    4cee:	61da      	str	r2, [r3, #28]
    4cf0:	68fb      	ldr	r3, [r7, #12]
    4cf2:	2200      	movs	r2, #0
    4cf4:	621a      	str	r2, [r3, #32]
    4cf6:	68fb      	ldr	r3, [r7, #12]
    4cf8:	2224      	movs	r2, #36	; 0x24
    4cfa:	2100      	movs	r1, #0
    4cfc:	5499      	strb	r1, [r3, r2]
    4cfe:	68fb      	ldr	r3, [r7, #12]
    4d00:	2200      	movs	r2, #0
    4d02:	62da      	str	r2, [r3, #44]	; 0x2c
    4d04:	68fb      	ldr	r3, [r7, #12]
    4d06:	2200      	movs	r2, #0
    4d08:	631a      	str	r2, [r3, #48]	; 0x30
    4d0a:	68fb      	ldr	r3, [r7, #12]
    4d0c:	2234      	movs	r2, #52	; 0x34
    4d0e:	2100      	movs	r1, #0
    4d10:	5499      	strb	r1, [r3, r2]
    4d12:	68fb      	ldr	r3, [r7, #12]
    4d14:	2235      	movs	r2, #53	; 0x35
    4d16:	2100      	movs	r1, #0
    4d18:	5499      	strb	r1, [r3, r2]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    4d1a:	68fb      	ldr	r3, [r7, #12]
    4d1c:	68db      	ldr	r3, [r3, #12]
    4d1e:	0018      	movs	r0, r3
    4d20:	f00b fe54 	bl	109cc <malloc>
    4d24:	0003      	movs	r3, r0
    4d26:	001a      	movs	r2, r3
    4d28:	68fb      	ldr	r3, [r7, #12]
    4d2a:	619a      	str	r2, [r3, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    4d2c:	68fb      	ldr	r3, [r7, #12]
    4d2e:	68db      	ldr	r3, [r3, #12]
    4d30:	0018      	movs	r0, r3
    4d32:	f00b fe4b 	bl	109cc <malloc>
    4d36:	0003      	movs	r3, r0
    4d38:	001a      	movs	r2, r3
    4d3a:	68fb      	ldr	r3, [r7, #12]
    4d3c:	629a      	str	r2, [r3, #40]	; 0x28

		usbd.epBank0SetSize(ep, 64);
    4d3e:	68fb      	ldr	r3, [r7, #12]
    4d40:	6858      	ldr	r0, [r3, #4]
    4d42:	68fb      	ldr	r3, [r7, #12]
    4d44:	689b      	ldr	r3, [r3, #8]
    4d46:	b2db      	uxtb	r3, r3
    4d48:	2240      	movs	r2, #64	; 0x40
    4d4a:	0019      	movs	r1, r3
    4d4c:	f7ff fe48 	bl	49e0 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>
		usbd.epBank0SetType(ep, 3); // BULK OUT
    4d50:	68fb      	ldr	r3, [r7, #12]
    4d52:	6858      	ldr	r0, [r3, #4]
    4d54:	68fb      	ldr	r3, [r7, #12]
    4d56:	689b      	ldr	r3, [r3, #8]
    4d58:	b2db      	uxtb	r3, r3
    4d5a:	2203      	movs	r2, #3
    4d5c:	0019      	movs	r1, r3
    4d5e:	f7ff fb73 	bl	4448 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    4d62:	68fb      	ldr	r3, [r7, #12]
    4d64:	6858      	ldr	r0, [r3, #4]
    4d66:	68fb      	ldr	r3, [r7, #12]
    4d68:	689b      	ldr	r3, [r3, #8]
    4d6a:	b2d9      	uxtb	r1, r3
    4d6c:	68fb      	ldr	r3, [r7, #12]
    4d6e:	699b      	ldr	r3, [r3, #24]
    4d70:	001a      	movs	r2, r3
    4d72:	f7ff fe09 	bl	4988 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>

		release();
    4d76:	68fb      	ldr	r3, [r7, #12]
    4d78:	0018      	movs	r0, r3
    4d7a:	f000 fa47 	bl	520c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	}
    4d7e:	68fb      	ldr	r3, [r7, #12]
    4d80:	0018      	movs	r0, r3
    4d82:	46bd      	mov	sp, r7
    4d84:	b004      	add	sp, #16
    4d86:	bd80      	pop	{r7, pc}
    4d88:	000136f4 	.word	0x000136f4

00004d8c <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:

	virtual uint32_t recv(void *_data, uint32_t len)
    4d8c:	b5b0      	push	{r4, r5, r7, lr}
    4d8e:	b090      	sub	sp, #64	; 0x40
    4d90:	af00      	add	r7, sp, #0
    4d92:	60f8      	str	r0, [r7, #12]
    4d94:	60b9      	str	r1, [r7, #8]
    4d96:	607a      	str	r2, [r7, #4]
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);
    4d98:	68bb      	ldr	r3, [r7, #8]
    4d9a:	637b      	str	r3, [r7, #52]	; 0x34

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    4d9c:	68fb      	ldr	r3, [r7, #12]
    4d9e:	691b      	ldr	r3, [r3, #16]
    4da0:	2b00      	cmp	r3, #0
    4da2:	d000      	beq.n	4da6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
    4da4:	e082      	b.n	4eac <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x120>
			synchronized {
    4da6:	232c      	movs	r3, #44	; 0x2c
    4da8:	18fb      	adds	r3, r7, r3
    4daa:	0018      	movs	r0, r3
    4dac:	f7ff ff40 	bl	4c30 <_ZN7__GuardC1Ev>
    4db0:	232c      	movs	r3, #44	; 0x2c
    4db2:	18fb      	adds	r3, r7, r3
    4db4:	0018      	movs	r0, r3
    4db6:	f7ff ff5e 	bl	4c76 <_ZN7__Guard5enterEv>
    4dba:	0003      	movs	r3, r0
    4dbc:	1e5a      	subs	r2, r3, #1
    4dbe:	4193      	sbcs	r3, r2
    4dc0:	b2db      	uxtb	r3, r3
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d00b      	beq.n	4dde <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x52>
				if (!ready0) {
    4dc6:	68fb      	ldr	r3, [r7, #12]
    4dc8:	2224      	movs	r2, #36	; 0x24
    4dca:	5c9b      	ldrb	r3, [r3, r2]
    4dcc:	b2db      	uxtb	r3, r3
    4dce:	2201      	movs	r2, #1
    4dd0:	4053      	eors	r3, r2
    4dd2:	b2db      	uxtb	r3, r3
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d0eb      	beq.n	4db0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x24>
					return 0;
    4dd8:	2400      	movs	r4, #0
    4dda:	2500      	movs	r5, #0
    4ddc:	e000      	b.n	4de0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x54>
    4dde:	2501      	movs	r5, #1
    4de0:	232c      	movs	r3, #44	; 0x2c
    4de2:	18fb      	adds	r3, r7, r3
    4de4:	0018      	movs	r0, r3
    4de6:	f7ff ff36 	bl	4c56 <_ZN7__GuardD1Ev>
    4dea:	2d01      	cmp	r5, #1
    4dec:	d000      	beq.n	4df0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x64>
    4dee:	e0de      	b.n	4fae <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
			synchronized {
    4df0:	46c0      	nop			; (mov r8, r8)
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    4df2:	2300      	movs	r3, #0
    4df4:	63fb      	str	r3, [r7, #60]	; 0x3c
    4df6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	429a      	cmp	r2, r3
    4dfc:	d207      	bcs.n	4e0e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    4dfe:	68fb      	ldr	r3, [r7, #12]
    4e00:	69da      	ldr	r2, [r3, #28]
    4e02:	68fb      	ldr	r3, [r7, #12]
    4e04:	6a1b      	ldr	r3, [r3, #32]
    4e06:	429a      	cmp	r2, r3
    4e08:	d201      	bcs.n	4e0e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    4e0a:	2301      	movs	r3, #1
    4e0c:	e000      	b.n	4e10 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x84>
    4e0e:	2300      	movs	r3, #0
    4e10:	2b00      	cmp	r3, #0
    4e12:	d011      	beq.n	4e38 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xac>
				data[i] = data0[first0++];
    4e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4e18:	18d1      	adds	r1, r2, r3
    4e1a:	68fb      	ldr	r3, [r7, #12]
    4e1c:	6998      	ldr	r0, [r3, #24]
    4e1e:	68fb      	ldr	r3, [r7, #12]
    4e20:	69db      	ldr	r3, [r3, #28]
    4e22:	1c5c      	adds	r4, r3, #1
    4e24:	68fa      	ldr	r2, [r7, #12]
    4e26:	61d4      	str	r4, [r2, #28]
    4e28:	18c3      	adds	r3, r0, r3
    4e2a:	781b      	ldrb	r3, [r3, #0]
    4e2c:	b2db      	uxtb	r3, r3
    4e2e:	700b      	strb	r3, [r1, #0]
			for (i=0; i<len && first0 < last0; i++) {
    4e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4e32:	3301      	adds	r3, #1
    4e34:	63fb      	str	r3, [r7, #60]	; 0x3c
    4e36:	e7de      	b.n	4df6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6a>
			}
			if (first0 == last0) {
    4e38:	68fb      	ldr	r3, [r7, #12]
    4e3a:	69da      	ldr	r2, [r3, #28]
    4e3c:	68fb      	ldr	r3, [r7, #12]
    4e3e:	6a1b      	ldr	r3, [r3, #32]
    4e40:	1ad3      	subs	r3, r2, r3
    4e42:	425a      	negs	r2, r3
    4e44:	4153      	adcs	r3, r2
    4e46:	b2db      	uxtb	r3, r3
    4e48:	2b00      	cmp	r3, #0
    4e4a:	d02d      	beq.n	4ea8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x11c>
				first0 = 0;
    4e4c:	68fb      	ldr	r3, [r7, #12]
    4e4e:	2200      	movs	r2, #0
    4e50:	61da      	str	r2, [r3, #28]
				current = 1;
    4e52:	68fb      	ldr	r3, [r7, #12]
    4e54:	2201      	movs	r2, #1
    4e56:	611a      	str	r2, [r3, #16]
				synchronized {
    4e58:	2324      	movs	r3, #36	; 0x24
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	0018      	movs	r0, r3
    4e5e:	f7ff fee7 	bl	4c30 <_ZN7__GuardC1Ev>
    4e62:	2324      	movs	r3, #36	; 0x24
    4e64:	18fb      	adds	r3, r7, r3
    4e66:	0018      	movs	r0, r3
    4e68:	f7ff ff05 	bl	4c76 <_ZN7__Guard5enterEv>
    4e6c:	0003      	movs	r3, r0
    4e6e:	1e5a      	subs	r2, r3, #1
    4e70:	4193      	sbcs	r3, r2
    4e72:	b2db      	uxtb	r3, r3
    4e74:	2b00      	cmp	r3, #0
    4e76:	d012      	beq.n	4e9e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x112>
					ready0 = false;
    4e78:	68fb      	ldr	r3, [r7, #12]
    4e7a:	2224      	movs	r2, #36	; 0x24
    4e7c:	2100      	movs	r1, #0
    4e7e:	5499      	strb	r1, [r3, r2]
					if (notify) {
    4e80:	68fb      	ldr	r3, [r7, #12]
    4e82:	2235      	movs	r2, #53	; 0x35
    4e84:	5c9b      	ldrb	r3, [r3, r2]
    4e86:	b2db      	uxtb	r3, r3
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d0ea      	beq.n	4e62 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
						notify = false;
    4e8c:	68fb      	ldr	r3, [r7, #12]
    4e8e:	2235      	movs	r2, #53	; 0x35
    4e90:	2100      	movs	r1, #0
    4e92:	5499      	strb	r1, [r3, r2]
						release();
    4e94:	68fb      	ldr	r3, [r7, #12]
    4e96:	0018      	movs	r0, r3
    4e98:	f000 f9b8 	bl	520c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
				synchronized {
    4e9c:	e7e1      	b.n	4e62 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
    4e9e:	2324      	movs	r3, #36	; 0x24
    4ea0:	18fb      	adds	r3, r7, r3
    4ea2:	0018      	movs	r0, r3
    4ea4:	f7ff fed7 	bl	4c56 <_ZN7__GuardD1Ev>
					}
				}
			}
			return i;
    4ea8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    4eaa:	e080      	b.n	4fae <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
		} else {
			synchronized {
    4eac:	231c      	movs	r3, #28
    4eae:	18fb      	adds	r3, r7, r3
    4eb0:	0018      	movs	r0, r3
    4eb2:	f7ff febd 	bl	4c30 <_ZN7__GuardC1Ev>
    4eb6:	231c      	movs	r3, #28
    4eb8:	18fb      	adds	r3, r7, r3
    4eba:	0018      	movs	r0, r3
    4ebc:	f7ff fedb 	bl	4c76 <_ZN7__Guard5enterEv>
    4ec0:	0003      	movs	r3, r0
    4ec2:	1e5a      	subs	r2, r3, #1
    4ec4:	4193      	sbcs	r3, r2
    4ec6:	b2db      	uxtb	r3, r3
    4ec8:	2b00      	cmp	r3, #0
    4eca:	d00b      	beq.n	4ee4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x158>
				if (!ready1) {
    4ecc:	68fb      	ldr	r3, [r7, #12]
    4ece:	2234      	movs	r2, #52	; 0x34
    4ed0:	5c9b      	ldrb	r3, [r3, r2]
    4ed2:	b2db      	uxtb	r3, r3
    4ed4:	2201      	movs	r2, #1
    4ed6:	4053      	eors	r3, r2
    4ed8:	b2db      	uxtb	r3, r3
    4eda:	2b00      	cmp	r3, #0
    4edc:	d0eb      	beq.n	4eb6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12a>
					return 0;
    4ede:	2400      	movs	r4, #0
    4ee0:	2500      	movs	r5, #0
    4ee2:	e000      	b.n	4ee6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x15a>
    4ee4:	2501      	movs	r5, #1
    4ee6:	231c      	movs	r3, #28
    4ee8:	18fb      	adds	r3, r7, r3
    4eea:	0018      	movs	r0, r3
    4eec:	f7ff feb3 	bl	4c56 <_ZN7__GuardD1Ev>
    4ef0:	2d01      	cmp	r5, #1
    4ef2:	d15c      	bne.n	4fae <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
			synchronized {
    4ef4:	46c0      	nop			; (mov r8, r8)
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    4ef6:	2300      	movs	r3, #0
    4ef8:	63bb      	str	r3, [r7, #56]	; 0x38
    4efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	429a      	cmp	r2, r3
    4f00:	d207      	bcs.n	4f12 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x186>
    4f02:	68fb      	ldr	r3, [r7, #12]
    4f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f06:	68fb      	ldr	r3, [r7, #12]
    4f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4f0a:	429a      	cmp	r2, r3
    4f0c:	d201      	bcs.n	4f12 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x186>
    4f0e:	2301      	movs	r3, #1
    4f10:	e000      	b.n	4f14 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x188>
    4f12:	2300      	movs	r3, #0
    4f14:	2b00      	cmp	r3, #0
    4f16:	d011      	beq.n	4f3c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1b0>
				data[i] = data1[first1++];
    4f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4f1c:	18d1      	adds	r1, r2, r3
    4f1e:	68fb      	ldr	r3, [r7, #12]
    4f20:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4f22:	68fb      	ldr	r3, [r7, #12]
    4f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f26:	1c5c      	adds	r4, r3, #1
    4f28:	68fa      	ldr	r2, [r7, #12]
    4f2a:	62d4      	str	r4, [r2, #44]	; 0x2c
    4f2c:	18c3      	adds	r3, r0, r3
    4f2e:	781b      	ldrb	r3, [r3, #0]
    4f30:	b2db      	uxtb	r3, r3
    4f32:	700b      	strb	r3, [r1, #0]
			for (i=0; i<len && first1 < last1; i++) {
    4f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4f36:	3301      	adds	r3, #1
    4f38:	63bb      	str	r3, [r7, #56]	; 0x38
    4f3a:	e7de      	b.n	4efa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x16e>
			}
			if (first1 == last1) {
    4f3c:	68fb      	ldr	r3, [r7, #12]
    4f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f40:	68fb      	ldr	r3, [r7, #12]
    4f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4f44:	1ad3      	subs	r3, r2, r3
    4f46:	425a      	negs	r2, r3
    4f48:	4153      	adcs	r3, r2
    4f4a:	b2db      	uxtb	r3, r3
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d02d      	beq.n	4fac <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x220>
				first1 = 0;
    4f50:	68fb      	ldr	r3, [r7, #12]
    4f52:	2200      	movs	r2, #0
    4f54:	62da      	str	r2, [r3, #44]	; 0x2c
				current = 0;
    4f56:	68fb      	ldr	r3, [r7, #12]
    4f58:	2200      	movs	r2, #0
    4f5a:	611a      	str	r2, [r3, #16]
				synchronized {
    4f5c:	2314      	movs	r3, #20
    4f5e:	18fb      	adds	r3, r7, r3
    4f60:	0018      	movs	r0, r3
    4f62:	f7ff fe65 	bl	4c30 <_ZN7__GuardC1Ev>
    4f66:	2314      	movs	r3, #20
    4f68:	18fb      	adds	r3, r7, r3
    4f6a:	0018      	movs	r0, r3
    4f6c:	f7ff fe83 	bl	4c76 <_ZN7__Guard5enterEv>
    4f70:	0003      	movs	r3, r0
    4f72:	1e5a      	subs	r2, r3, #1
    4f74:	4193      	sbcs	r3, r2
    4f76:	b2db      	uxtb	r3, r3
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d012      	beq.n	4fa2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x216>
					ready1 = false;
    4f7c:	68fb      	ldr	r3, [r7, #12]
    4f7e:	2234      	movs	r2, #52	; 0x34
    4f80:	2100      	movs	r1, #0
    4f82:	5499      	strb	r1, [r3, r2]
					if (notify) {
    4f84:	68fb      	ldr	r3, [r7, #12]
    4f86:	2235      	movs	r2, #53	; 0x35
    4f88:	5c9b      	ldrb	r3, [r3, r2]
    4f8a:	b2db      	uxtb	r3, r3
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d0ea      	beq.n	4f66 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1da>
						notify = false;
    4f90:	68fb      	ldr	r3, [r7, #12]
    4f92:	2235      	movs	r2, #53	; 0x35
    4f94:	2100      	movs	r1, #0
    4f96:	5499      	strb	r1, [r3, r2]
						release();
    4f98:	68fb      	ldr	r3, [r7, #12]
    4f9a:	0018      	movs	r0, r3
    4f9c:	f000 f936 	bl	520c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
				synchronized {
    4fa0:	e7e1      	b.n	4f66 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1da>
    4fa2:	2314      	movs	r3, #20
    4fa4:	18fb      	adds	r3, r7, r3
    4fa6:	0018      	movs	r0, r3
    4fa8:	f7ff fe55 	bl	4c56 <_ZN7__GuardD1Ev>
					}
				}
			}
			return i;
    4fac:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    4fae:	0023      	movs	r3, r4
		}
	}
    4fb0:	0018      	movs	r0, r3
    4fb2:	46bd      	mov	sp, r7
    4fb4:	b010      	add	sp, #64	; 0x40
    4fb6:	bdb0      	pop	{r4, r5, r7, pc}

00004fb8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:

	virtual void handleEndpoint()
    4fb8:	b590      	push	{r4, r7, lr}
    4fba:	b087      	sub	sp, #28
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	6078      	str	r0, [r7, #4]
	{
		// R/W : incoming, ready0/1
		//   W : last0/1, notify
		if (usbd.epBank0IsTransferComplete(ep))
    4fc0:	687b      	ldr	r3, [r7, #4]
    4fc2:	685a      	ldr	r2, [r3, #4]
    4fc4:	687b      	ldr	r3, [r7, #4]
    4fc6:	689b      	ldr	r3, [r3, #8]
    4fc8:	b2db      	uxtb	r3, r3
    4fca:	0019      	movs	r1, r3
    4fcc:	0010      	movs	r0, r2
    4fce:	f7ff fabc 	bl	454a <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    4fd2:	1e03      	subs	r3, r0, #0
    4fd4:	d100      	bne.n	4fd8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x20>
    4fd6:	e0b0      	b.n	513a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
		{
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
    4fd8:	687b      	ldr	r3, [r7, #4]
    4fda:	685a      	ldr	r2, [r3, #4]
    4fdc:	687b      	ldr	r3, [r7, #4]
    4fde:	689b      	ldr	r3, [r3, #8]
    4fe0:	b2db      	uxtb	r3, r3
    4fe2:	0019      	movs	r1, r3
    4fe4:	0010      	movs	r0, r2
    4fe6:	f7ff fb06 	bl	45f6 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks for non-ZLP's
			if (incoming == 0) {
    4fea:	687b      	ldr	r3, [r7, #4]
    4fec:	695b      	ldr	r3, [r3, #20]
    4fee:	2b00      	cmp	r3, #0
    4ff0:	d14f      	bne.n	5092 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
				last0 = usbd.epBank0ByteCount(ep);
    4ff2:	687b      	ldr	r3, [r7, #4]
    4ff4:	685a      	ldr	r2, [r3, #4]
    4ff6:	687b      	ldr	r3, [r7, #4]
    4ff8:	689b      	ldr	r3, [r3, #8]
    4ffa:	b2db      	uxtb	r3, r3
    4ffc:	0019      	movs	r1, r3
    4ffe:	0010      	movs	r0, r2
    5000:	f7ff fc21 	bl	4846 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5004:	0003      	movs	r3, r0
    5006:	001a      	movs	r2, r3
    5008:	687b      	ldr	r3, [r7, #4]
    500a:	621a      	str	r2, [r3, #32]
				if (last0 != 0) {
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	6a1b      	ldr	r3, [r3, #32]
    5010:	1e5a      	subs	r2, r3, #1
    5012:	4193      	sbcs	r3, r2
    5014:	b2db      	uxtb	r3, r3
    5016:	2b00      	cmp	r3, #0
    5018:	d100      	bne.n	501c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x64>
    501a:	e08a      	b.n	5132 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					incoming = 1;
    501c:	687b      	ldr	r3, [r7, #4]
    501e:	2201      	movs	r2, #1
    5020:	615a      	str	r2, [r3, #20]
					usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    5022:	687b      	ldr	r3, [r7, #4]
    5024:	6858      	ldr	r0, [r3, #4]
    5026:	687b      	ldr	r3, [r7, #4]
    5028:	689b      	ldr	r3, [r3, #8]
    502a:	b2d9      	uxtb	r1, r3
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5030:	001a      	movs	r2, r3
    5032:	f7ff fca9 	bl	4988 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
					synchronized {
    5036:	2310      	movs	r3, #16
    5038:	18fb      	adds	r3, r7, r3
    503a:	0018      	movs	r0, r3
    503c:	f7ff fdf8 	bl	4c30 <_ZN7__GuardC1Ev>
    5040:	2310      	movs	r3, #16
    5042:	18fb      	adds	r3, r7, r3
    5044:	0018      	movs	r0, r3
    5046:	f7ff fe16 	bl	4c76 <_ZN7__Guard5enterEv>
    504a:	0003      	movs	r3, r0
    504c:	1e5a      	subs	r2, r3, #1
    504e:	4193      	sbcs	r3, r2
    5050:	b2db      	uxtb	r3, r3
    5052:	2b00      	cmp	r3, #0
    5054:	d014      	beq.n	5080 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xc8>
						ready0 = true;
    5056:	687b      	ldr	r3, [r7, #4]
    5058:	2224      	movs	r2, #36	; 0x24
    505a:	2101      	movs	r1, #1
    505c:	5499      	strb	r1, [r3, r2]
						if (ready1) {
    505e:	687b      	ldr	r3, [r7, #4]
    5060:	2234      	movs	r2, #52	; 0x34
    5062:	5c9b      	ldrb	r3, [r3, r2]
    5064:	b2db      	uxtb	r3, r3
    5066:	2b00      	cmp	r3, #0
    5068:	d005      	beq.n	5076 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xbe>
							notify = true;
    506a:	687b      	ldr	r3, [r7, #4]
    506c:	2235      	movs	r2, #53	; 0x35
    506e:	2101      	movs	r1, #1
    5070:	5499      	strb	r1, [r3, r2]
    5072:	2400      	movs	r4, #0
							return;
    5074:	e005      	b.n	5082 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xca>
						}
						notify = false;
    5076:	687b      	ldr	r3, [r7, #4]
    5078:	2235      	movs	r2, #53	; 0x35
    507a:	2100      	movs	r1, #0
    507c:	5499      	strb	r1, [r3, r2]
					synchronized {
    507e:	e7df      	b.n	5040 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x88>
    5080:	2401      	movs	r4, #1
    5082:	2310      	movs	r3, #16
    5084:	18fb      	adds	r3, r7, r3
    5086:	0018      	movs	r0, r3
    5088:	f7ff fde5 	bl	4c56 <_ZN7__GuardD1Ev>
    508c:	2c01      	cmp	r4, #1
    508e:	d04f      	beq.n	5130 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x178>
    5090:	e053      	b.n	513a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
					}
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
    5092:	687b      	ldr	r3, [r7, #4]
    5094:	685a      	ldr	r2, [r3, #4]
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	689b      	ldr	r3, [r3, #8]
    509a:	b2db      	uxtb	r3, r3
    509c:	0019      	movs	r1, r3
    509e:	0010      	movs	r0, r2
    50a0:	f7ff fbd1 	bl	4846 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    50a4:	0003      	movs	r3, r0
    50a6:	001a      	movs	r2, r3
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	631a      	str	r2, [r3, #48]	; 0x30
				if (last1 != 0) {
    50ac:	687b      	ldr	r3, [r7, #4]
    50ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    50b0:	1e5a      	subs	r2, r3, #1
    50b2:	4193      	sbcs	r3, r2
    50b4:	b2db      	uxtb	r3, r3
    50b6:	2b00      	cmp	r3, #0
    50b8:	d03b      	beq.n	5132 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					incoming = 0;
    50ba:	687b      	ldr	r3, [r7, #4]
    50bc:	2200      	movs	r2, #0
    50be:	615a      	str	r2, [r3, #20]
					usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    50c0:	687b      	ldr	r3, [r7, #4]
    50c2:	6858      	ldr	r0, [r3, #4]
    50c4:	687b      	ldr	r3, [r7, #4]
    50c6:	689b      	ldr	r3, [r3, #8]
    50c8:	b2d9      	uxtb	r1, r3
    50ca:	687b      	ldr	r3, [r7, #4]
    50cc:	699b      	ldr	r3, [r3, #24]
    50ce:	001a      	movs	r2, r3
    50d0:	f7ff fc5a 	bl	4988 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
					synchronized {
    50d4:	2308      	movs	r3, #8
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	0018      	movs	r0, r3
    50da:	f7ff fda9 	bl	4c30 <_ZN7__GuardC1Ev>
    50de:	2308      	movs	r3, #8
    50e0:	18fb      	adds	r3, r7, r3
    50e2:	0018      	movs	r0, r3
    50e4:	f7ff fdc7 	bl	4c76 <_ZN7__Guard5enterEv>
    50e8:	0003      	movs	r3, r0
    50ea:	1e5a      	subs	r2, r3, #1
    50ec:	4193      	sbcs	r3, r2
    50ee:	b2db      	uxtb	r3, r3
    50f0:	2b00      	cmp	r3, #0
    50f2:	d014      	beq.n	511e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x166>
						ready1 = true;
    50f4:	687b      	ldr	r3, [r7, #4]
    50f6:	2234      	movs	r2, #52	; 0x34
    50f8:	2101      	movs	r1, #1
    50fa:	5499      	strb	r1, [r3, r2]
						if (ready0) {
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	2224      	movs	r2, #36	; 0x24
    5100:	5c9b      	ldrb	r3, [r3, r2]
    5102:	b2db      	uxtb	r3, r3
    5104:	2b00      	cmp	r3, #0
    5106:	d005      	beq.n	5114 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x15c>
							notify = true;
    5108:	687b      	ldr	r3, [r7, #4]
    510a:	2235      	movs	r2, #53	; 0x35
    510c:	2101      	movs	r1, #1
    510e:	5499      	strb	r1, [r3, r2]
    5110:	2400      	movs	r4, #0
							return;
    5112:	e005      	b.n	5120 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x168>
						}
						notify = false;
    5114:	687b      	ldr	r3, [r7, #4]
    5116:	2235      	movs	r2, #53	; 0x35
    5118:	2100      	movs	r1, #0
    511a:	5499      	strb	r1, [r3, r2]
					synchronized {
    511c:	e7df      	b.n	50de <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x126>
    511e:	2401      	movs	r4, #1
    5120:	2308      	movs	r3, #8
    5122:	18fb      	adds	r3, r7, r3
    5124:	0018      	movs	r0, r3
    5126:	f7ff fd96 	bl	4c56 <_ZN7__GuardD1Ev>
    512a:	2c01      	cmp	r4, #1
    512c:	d105      	bne.n	513a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
    512e:	e000      	b.n	5132 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					synchronized {
    5130:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
			release();
    5132:	687b      	ldr	r3, [r7, #4]
    5134:	0018      	movs	r0, r3
    5136:	f000 f869 	bl	520c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
		}
	}
    513a:	46bd      	mov	sp, r7
    513c:	b007      	add	sp, #28
    513e:	bd90      	pop	{r4, r7, pc}

00005140 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    5140:	b580      	push	{r7, lr}
    5142:	b088      	sub	sp, #32
    5144:	af00      	add	r7, sp, #0
    5146:	6078      	str	r0, [r7, #4]
		if (current == 0) {
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	691b      	ldr	r3, [r3, #16]
    514c:	2b00      	cmp	r3, #0
    514e:	d12c      	bne.n	51aa <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x6a>
			bool ready = false;
    5150:	231f      	movs	r3, #31
    5152:	18fb      	adds	r3, r7, r3
    5154:	2200      	movs	r2, #0
    5156:	701a      	strb	r2, [r3, #0]
			synchronized {
    5158:	2314      	movs	r3, #20
    515a:	18fb      	adds	r3, r7, r3
    515c:	0018      	movs	r0, r3
    515e:	f7ff fd67 	bl	4c30 <_ZN7__GuardC1Ev>
    5162:	2314      	movs	r3, #20
    5164:	18fb      	adds	r3, r7, r3
    5166:	0018      	movs	r0, r3
    5168:	f7ff fd85 	bl	4c76 <_ZN7__Guard5enterEv>
    516c:	0003      	movs	r3, r0
    516e:	1e5a      	subs	r2, r3, #1
    5170:	4193      	sbcs	r3, r2
    5172:	b2db      	uxtb	r3, r3
    5174:	2b00      	cmp	r3, #0
    5176:	d006      	beq.n	5186 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x46>
				ready = ready0;
    5178:	231f      	movs	r3, #31
    517a:	18fb      	adds	r3, r7, r3
    517c:	687a      	ldr	r2, [r7, #4]
    517e:	2124      	movs	r1, #36	; 0x24
    5180:	5c52      	ldrb	r2, [r2, r1]
    5182:	701a      	strb	r2, [r3, #0]
			synchronized {
    5184:	e7ed      	b.n	5162 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x22>
    5186:	2314      	movs	r3, #20
    5188:	18fb      	adds	r3, r7, r3
    518a:	0018      	movs	r0, r3
    518c:	f7ff fd63 	bl	4c56 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    5190:	231f      	movs	r3, #31
    5192:	18fb      	adds	r3, r7, r3
    5194:	781b      	ldrb	r3, [r3, #0]
    5196:	2b00      	cmp	r3, #0
    5198:	d005      	beq.n	51a6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x66>
    519a:	687b      	ldr	r3, [r7, #4]
    519c:	6a1a      	ldr	r2, [r3, #32]
    519e:	687b      	ldr	r3, [r7, #4]
    51a0:	69db      	ldr	r3, [r3, #28]
    51a2:	1ad3      	subs	r3, r2, r3
    51a4:	e02e      	b.n	5204 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc4>
    51a6:	2300      	movs	r3, #0
    51a8:	e02c      	b.n	5204 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc4>
		} else {
			bool ready = false;
    51aa:	231e      	movs	r3, #30
    51ac:	18fb      	adds	r3, r7, r3
    51ae:	2200      	movs	r2, #0
    51b0:	701a      	strb	r2, [r3, #0]
			synchronized {
    51b2:	230c      	movs	r3, #12
    51b4:	18fb      	adds	r3, r7, r3
    51b6:	0018      	movs	r0, r3
    51b8:	f7ff fd3a 	bl	4c30 <_ZN7__GuardC1Ev>
    51bc:	230c      	movs	r3, #12
    51be:	18fb      	adds	r3, r7, r3
    51c0:	0018      	movs	r0, r3
    51c2:	f7ff fd58 	bl	4c76 <_ZN7__Guard5enterEv>
    51c6:	0003      	movs	r3, r0
    51c8:	1e5a      	subs	r2, r3, #1
    51ca:	4193      	sbcs	r3, r2
    51cc:	b2db      	uxtb	r3, r3
    51ce:	2b00      	cmp	r3, #0
    51d0:	d006      	beq.n	51e0 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xa0>
				ready = ready1;
    51d2:	231e      	movs	r3, #30
    51d4:	18fb      	adds	r3, r7, r3
    51d6:	687a      	ldr	r2, [r7, #4]
    51d8:	2134      	movs	r1, #52	; 0x34
    51da:	5c52      	ldrb	r2, [r2, r1]
    51dc:	701a      	strb	r2, [r3, #0]
			synchronized {
    51de:	e7ed      	b.n	51bc <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x7c>
    51e0:	230c      	movs	r3, #12
    51e2:	18fb      	adds	r3, r7, r3
    51e4:	0018      	movs	r0, r3
    51e6:	f7ff fd36 	bl	4c56 <_ZN7__GuardD1Ev>
			}
			return ready ? (last1 - first1) : 0;
    51ea:	231e      	movs	r3, #30
    51ec:	18fb      	adds	r3, r7, r3
    51ee:	781b      	ldrb	r3, [r3, #0]
    51f0:	2b00      	cmp	r3, #0
    51f2:	d005      	beq.n	5200 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc0>
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    51f8:	687b      	ldr	r3, [r7, #4]
    51fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51fc:	1ad3      	subs	r3, r2, r3
    51fe:	e000      	b.n	5202 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc2>
    5200:	2300      	movs	r3, #0
    5202:	46c0      	nop			; (mov r8, r8)
		}
	}
    5204:	0018      	movs	r0, r3
    5206:	46bd      	mov	sp, r7
    5208:	b008      	add	sp, #32
    520a:	bd80      	pop	{r7, pc}

0000520c <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    520c:	b580      	push	{r7, lr}
    520e:	b082      	sub	sp, #8
    5210:	af00      	add	r7, sp, #0
    5212:	6078      	str	r0, [r7, #4]
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    5214:	687b      	ldr	r3, [r7, #4]
    5216:	685a      	ldr	r2, [r3, #4]
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	689b      	ldr	r3, [r3, #8]
    521c:	b2db      	uxtb	r3, r3
    521e:	0019      	movs	r1, r3
    5220:	0010      	movs	r0, r2
    5222:	f7ff fa2a 	bl	467a <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
		usbd.epBank0SetMultiPacketSize(ep, size);
    5226:	687b      	ldr	r3, [r7, #4]
    5228:	6858      	ldr	r0, [r3, #4]
    522a:	687b      	ldr	r3, [r7, #4]
    522c:	689b      	ldr	r3, [r3, #8]
    522e:	b2d9      	uxtb	r1, r3
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	68db      	ldr	r3, [r3, #12]
    5234:	b29b      	uxth	r3, r3
    5236:	001a      	movs	r2, r3
    5238:	f7ff fb5c 	bl	48f4 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
		usbd.epBank0SetByteCount(ep, 0);
    523c:	687b      	ldr	r3, [r7, #4]
    523e:	6858      	ldr	r0, [r3, #4]
    5240:	687b      	ldr	r3, [r7, #4]
    5242:	689b      	ldr	r3, [r3, #8]
    5244:	b2db      	uxtb	r3, r3
    5246:	2200      	movs	r2, #0
    5248:	0019      	movs	r1, r3
    524a:	f7ff fb10 	bl	486e <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
		usbd.epBank0ResetReady(ep);
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	685a      	ldr	r2, [r3, #4]
    5252:	687b      	ldr	r3, [r7, #4]
    5254:	689b      	ldr	r3, [r3, #8]
    5256:	b2db      	uxtb	r3, r3
    5258:	0019      	movs	r1, r3
    525a:	0010      	movs	r0, r2
    525c:	f7ff fac6 	bl	47ec <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>
	}
    5260:	46c0      	nop			; (mov r8, r8)
    5262:	46bd      	mov	sp, r7
    5264:	b002      	add	sp, #8
    5266:	bd80      	pop	{r7, pc}

00005268 <UDD_Handler>:
static char isEndpointHalt = 0;

extern void (*gpf_isr)(void);

// USB_Handler ISR
extern "C" void UDD_Handler(void) {
    5268:	b580      	push	{r7, lr}
    526a:	af00      	add	r7, sp, #0
	USBDevice.ISRHandler();
    526c:	4b03      	ldr	r3, [pc, #12]	; (527c <UDD_Handler+0x14>)
    526e:	0018      	movs	r0, r3
    5270:	f001 f910 	bl	6494 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    5274:	46c0      	nop			; (mov r8, r8)
    5276:	46bd      	mov	sp, r7
    5278:	bd80      	pop	{r7, pc}
    527a:	46c0      	nop			; (mov r8, r8)
    527c:	200008f0 	.word	0x200008f0

00005280 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    5280:	b5f0      	push	{r4, r5, r6, r7, lr}
    5282:	b08d      	sub	sp, #52	; 0x34
    5284:	af00      	add	r7, sp, #0
    5286:	61f8      	str	r0, [r7, #28]
    5288:	61b9      	str	r1, [r7, #24]
    528a:	0011      	movs	r1, r2
    528c:	2217      	movs	r2, #23
    528e:	18ba      	adds	r2, r7, r2
    5290:	7011      	strb	r1, [r2, #0]
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
    5292:	466a      	mov	r2, sp
    5294:	613a      	str	r2, [r7, #16]
	if (maxlen < 2)
    5296:	2217      	movs	r2, #23
    5298:	18ba      	adds	r2, r7, r2
    529a:	7812      	ldrb	r2, [r2, #0]
    529c:	2a01      	cmp	r2, #1
    529e:	dc01      	bgt.n	52a4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x24>
		return false;
    52a0:	2300      	movs	r3, #0
    52a2:	e092      	b.n	53ca <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x14a>
	uint8_t buffer[maxlen];
    52a4:	2217      	movs	r2, #23
    52a6:	18ba      	adds	r2, r7, r2
    52a8:	7812      	ldrb	r2, [r2, #0]
    52aa:	3a01      	subs	r2, #1
    52ac:	62ba      	str	r2, [r7, #40]	; 0x28
    52ae:	0011      	movs	r1, r2
    52b0:	3101      	adds	r1, #1
    52b2:	60b9      	str	r1, [r7, #8]
    52b4:	2100      	movs	r1, #0
    52b6:	60f9      	str	r1, [r7, #12]
    52b8:	68b9      	ldr	r1, [r7, #8]
    52ba:	0f49      	lsrs	r1, r1, #29
    52bc:	68f8      	ldr	r0, [r7, #12]
    52be:	00c6      	lsls	r6, r0, #3
    52c0:	430e      	orrs	r6, r1
    52c2:	68b9      	ldr	r1, [r7, #8]
    52c4:	00cd      	lsls	r5, r1, #3
    52c6:	0011      	movs	r1, r2
    52c8:	3101      	adds	r1, #1
    52ca:	6039      	str	r1, [r7, #0]
    52cc:	2100      	movs	r1, #0
    52ce:	6079      	str	r1, [r7, #4]
    52d0:	683d      	ldr	r5, [r7, #0]
    52d2:	687e      	ldr	r6, [r7, #4]
    52d4:	0029      	movs	r1, r5
    52d6:	0f49      	lsrs	r1, r1, #29
    52d8:	0030      	movs	r0, r6
    52da:	00c4      	lsls	r4, r0, #3
    52dc:	430c      	orrs	r4, r1
    52de:	0029      	movs	r1, r5
    52e0:	00cb      	lsls	r3, r1, #3
    52e2:	0013      	movs	r3, r2
    52e4:	3301      	adds	r3, #1
    52e6:	3307      	adds	r3, #7
    52e8:	08db      	lsrs	r3, r3, #3
    52ea:	00db      	lsls	r3, r3, #3
    52ec:	466a      	mov	r2, sp
    52ee:	1ad3      	subs	r3, r2, r3
    52f0:	469d      	mov	sp, r3
    52f2:	466b      	mov	r3, sp
    52f4:	3300      	adds	r3, #0
    52f6:	627b      	str	r3, [r7, #36]	; 0x24
	buffer[0] = strlen((const char*)string) * 2 + 2;
    52f8:	69bb      	ldr	r3, [r7, #24]
    52fa:	0018      	movs	r0, r3
    52fc:	f00c fa3a 	bl	11774 <strlen>
    5300:	0003      	movs	r3, r0
    5302:	3301      	adds	r3, #1
    5304:	b2db      	uxtb	r3, r3
    5306:	18db      	adds	r3, r3, r3
    5308:	b2da      	uxtb	r2, r3
    530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    530c:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x03;
    530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5310:	2203      	movs	r2, #3
    5312:	705a      	strb	r2, [r3, #1]
	for (i = 2; i < maxlen && *string; i++) {
    5314:	231f      	movs	r3, #31
    5316:	2210      	movs	r2, #16
    5318:	4694      	mov	ip, r2
    531a:	44bc      	add	ip, r7
    531c:	4463      	add	r3, ip
    531e:	2202      	movs	r2, #2
    5320:	701a      	strb	r2, [r3, #0]
    5322:	231f      	movs	r3, #31
    5324:	2210      	movs	r2, #16
    5326:	4694      	mov	ip, r2
    5328:	44bc      	add	ip, r7
    532a:	4463      	add	r3, ip
    532c:	781a      	ldrb	r2, [r3, #0]
    532e:	2317      	movs	r3, #23
    5330:	18fb      	adds	r3, r7, r3
    5332:	781b      	ldrb	r3, [r3, #0]
    5334:	429a      	cmp	r2, r3
    5336:	da39      	bge.n	53ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12c>
    5338:	69bb      	ldr	r3, [r7, #24]
    533a:	781b      	ldrb	r3, [r3, #0]
    533c:	2b00      	cmp	r3, #0
    533e:	d035      	beq.n	53ac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12c>
		buffer[i++] = *string++;
    5340:	231f      	movs	r3, #31
    5342:	2210      	movs	r2, #16
    5344:	4694      	mov	ip, r2
    5346:	44bc      	add	ip, r7
    5348:	4463      	add	r3, ip
    534a:	781b      	ldrb	r3, [r3, #0]
    534c:	221f      	movs	r2, #31
    534e:	2110      	movs	r1, #16
    5350:	468c      	mov	ip, r1
    5352:	44bc      	add	ip, r7
    5354:	4462      	add	r2, ip
    5356:	1c59      	adds	r1, r3, #1
    5358:	7011      	strb	r1, [r2, #0]
    535a:	0019      	movs	r1, r3
    535c:	69bb      	ldr	r3, [r7, #24]
    535e:	1c5a      	adds	r2, r3, #1
    5360:	61ba      	str	r2, [r7, #24]
    5362:	781a      	ldrb	r2, [r3, #0]
    5364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5366:	545a      	strb	r2, [r3, r1]
		if (i == maxlen) break;
    5368:	231f      	movs	r3, #31
    536a:	2210      	movs	r2, #16
    536c:	18ba      	adds	r2, r7, r2
    536e:	18d2      	adds	r2, r2, r3
    5370:	2317      	movs	r3, #23
    5372:	18fb      	adds	r3, r7, r3
    5374:	7812      	ldrb	r2, [r2, #0]
    5376:	781b      	ldrb	r3, [r3, #0]
    5378:	429a      	cmp	r2, r3
    537a:	d016      	beq.n	53aa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12a>
		buffer[i] = 0;
    537c:	231f      	movs	r3, #31
    537e:	2210      	movs	r2, #16
    5380:	4694      	mov	ip, r2
    5382:	44bc      	add	ip, r7
    5384:	4463      	add	r3, ip
    5386:	781b      	ldrb	r3, [r3, #0]
    5388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    538a:	2100      	movs	r1, #0
    538c:	54d1      	strb	r1, [r2, r3]
	for (i = 2; i < maxlen && *string; i++) {
    538e:	231f      	movs	r3, #31
    5390:	2210      	movs	r2, #16
    5392:	4694      	mov	ip, r2
    5394:	44bc      	add	ip, r7
    5396:	4463      	add	r3, ip
    5398:	781a      	ldrb	r2, [r3, #0]
    539a:	231f      	movs	r3, #31
    539c:	2110      	movs	r1, #16
    539e:	468c      	mov	ip, r1
    53a0:	44bc      	add	ip, r7
    53a2:	4463      	add	r3, ip
    53a4:	3201      	adds	r2, #1
    53a6:	701a      	strb	r2, [r3, #0]
    53a8:	e7bb      	b.n	5322 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xa2>
		if (i == maxlen) break;
    53aa:	46c0      	nop			; (mov r8, r8)
	return USBDevice.sendControl(buffer, i);
    53ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
    53ae:	231f      	movs	r3, #31
    53b0:	2210      	movs	r2, #16
    53b2:	4694      	mov	ip, r2
    53b4:	44bc      	add	ip, r7
    53b6:	4463      	add	r3, ip
    53b8:	781a      	ldrb	r2, [r3, #0]
    53ba:	4b07      	ldr	r3, [pc, #28]	; (53d8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x158>)
    53bc:	0018      	movs	r0, r3
    53be:	f000 ff1d 	bl	61fc <_ZN14USBDeviceClass11sendControlEPKvm>
    53c2:	0003      	movs	r3, r0
    53c4:	1e5a      	subs	r2, r3, #1
    53c6:	4193      	sbcs	r3, r2
    53c8:	b2db      	uxtb	r3, r3
    53ca:	693a      	ldr	r2, [r7, #16]
    53cc:	4695      	mov	sp, r2
}
    53ce:	0018      	movs	r0, r3
    53d0:	46bd      	mov	sp, r7
    53d2:	b00d      	add	sp, #52	; 0x34
    53d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53d6:	46c0      	nop			; (mov r8, r8)
    53d8:	200008f0 	.word	0x200008f0

000053dc <_ZN14USBDeviceClass12packMessagesEb>:
bool _pack_message = false;
uint16_t _pack_size = 0;
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
    53dc:	b580      	push	{r7, lr}
    53de:	b082      	sub	sp, #8
    53e0:	af00      	add	r7, sp, #0
    53e2:	6078      	str	r0, [r7, #4]
    53e4:	000a      	movs	r2, r1
    53e6:	1cfb      	adds	r3, r7, #3
    53e8:	701a      	strb	r2, [r3, #0]
	if (val) {
    53ea:	1cfb      	adds	r3, r7, #3
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	2b00      	cmp	r3, #0
    53f0:	d006      	beq.n	5400 <_ZN14USBDeviceClass12packMessagesEb+0x24>
		_pack_message = true;
    53f2:	4b0b      	ldr	r3, [pc, #44]	; (5420 <_ZN14USBDeviceClass12packMessagesEb+0x44>)
    53f4:	2201      	movs	r2, #1
    53f6:	701a      	strb	r2, [r3, #0]
		_pack_size = 0;
    53f8:	4b0a      	ldr	r3, [pc, #40]	; (5424 <_ZN14USBDeviceClass12packMessagesEb+0x48>)
    53fa:	2200      	movs	r2, #0
    53fc:	801a      	strh	r2, [r3, #0]
	} else {
		_pack_message = false;
		sendControl(_pack_buffer, _pack_size);
	}
}
    53fe:	e00a      	b.n	5416 <_ZN14USBDeviceClass12packMessagesEb+0x3a>
		_pack_message = false;
    5400:	4b07      	ldr	r3, [pc, #28]	; (5420 <_ZN14USBDeviceClass12packMessagesEb+0x44>)
    5402:	2200      	movs	r2, #0
    5404:	701a      	strb	r2, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    5406:	4b07      	ldr	r3, [pc, #28]	; (5424 <_ZN14USBDeviceClass12packMessagesEb+0x48>)
    5408:	881b      	ldrh	r3, [r3, #0]
    540a:	001a      	movs	r2, r3
    540c:	4906      	ldr	r1, [pc, #24]	; (5428 <_ZN14USBDeviceClass12packMessagesEb+0x4c>)
    540e:	687b      	ldr	r3, [r7, #4]
    5410:	0018      	movs	r0, r3
    5412:	f000 fef3 	bl	61fc <_ZN14USBDeviceClass11sendControlEPKvm>
}
    5416:	46c0      	nop			; (mov r8, r8)
    5418:	46bd      	mov	sp, r7
    541a:	b002      	add	sp, #8
    541c:	bd80      	pop	{r7, pc}
    541e:	46c0      	nop			; (mov r8, r8)
    5420:	200007e5 	.word	0x200007e5
    5424:	200007e6 	.word	0x200007e6
    5428:	200007e8 	.word	0x200007e8

0000542c <_ZN14USBDeviceClass14SendInterfacesEPm>:

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
    542c:	b580      	push	{r7, lr}
    542e:	b084      	sub	sp, #16
    5430:	af00      	add	r7, sp, #0
    5432:	6078      	str	r0, [r7, #4]
    5434:	6039      	str	r1, [r7, #0]
	uint8_t interfaces = 0;
    5436:	230f      	movs	r3, #15
    5438:	18fb      	adds	r3, r7, r3
    543a:	2200      	movs	r2, #0
    543c:	701a      	strb	r2, [r3, #0]

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    543e:	230f      	movs	r3, #15
    5440:	18fb      	adds	r3, r7, r3
    5442:	0018      	movs	r0, r3
    5444:	f009 f91c 	bl	e680 <_Z16CDC_GetInterfacePh>
    5448:	0002      	movs	r2, r0
    544a:	683b      	ldr	r3, [r7, #0]
    544c:	681b      	ldr	r3, [r3, #0]
    544e:	189a      	adds	r2, r3, r2
    5450:	683b      	ldr	r3, [r7, #0]
    5452:	601a      	str	r2, [r3, #0]
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
    5454:	f009 faf2 	bl	ea3c <_Z12PluggableUSBv>
    5458:	0002      	movs	r2, r0
    545a:	230f      	movs	r3, #15
    545c:	18fb      	adds	r3, r7, r3
    545e:	0019      	movs	r1, r3
    5460:	0010      	movs	r0, r2
    5462:	f009 fa5b 	bl	e91c <_ZN13PluggableUSB_12getInterfaceEPh>
    5466:	0002      	movs	r2, r0
    5468:	683b      	ldr	r3, [r7, #0]
    546a:	681b      	ldr	r3, [r3, #0]
    546c:	189a      	adds	r2, r3, r2
    546e:	683b      	ldr	r3, [r7, #0]
    5470:	601a      	str	r2, [r3, #0]
#endif

	return interfaces;
    5472:	230f      	movs	r3, #15
    5474:	18fb      	adds	r3, r7, r3
    5476:	781b      	ldrb	r3, [r3, #0]
}
    5478:	0018      	movs	r0, r3
    547a:	46bd      	mov	sp, r7
    547c:	b004      	add	sp, #16
    547e:	bd80      	pop	{r7, pc}

00005480 <_ZN14USBDeviceClass17sendConfigurationEm>:

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    5480:	b590      	push	{r4, r7, lr}
    5482:	b089      	sub	sp, #36	; 0x24
    5484:	af00      	add	r7, sp, #0
    5486:	6078      	str	r0, [r7, #4]
    5488:	6039      	str	r1, [r7, #0]
	uint32_t total = 0;
    548a:	2300      	movs	r3, #0
    548c:	61bb      	str	r3, [r7, #24]
	// Count and measure interfaces
	_dry_run = true;
    548e:	4b32      	ldr	r3, [pc, #200]	; (5558 <_ZN14USBDeviceClass17sendConfigurationEm+0xd8>)
    5490:	2201      	movs	r2, #1
    5492:	701a      	strb	r2, [r3, #0]
	uint8_t interfaces = SendInterfaces(&total);
    5494:	231f      	movs	r3, #31
    5496:	18fc      	adds	r4, r7, r3
    5498:	2318      	movs	r3, #24
    549a:	18fa      	adds	r2, r7, r3
    549c:	687b      	ldr	r3, [r7, #4]
    549e:	0011      	movs	r1, r2
    54a0:	0018      	movs	r0, r3
    54a2:	f7ff ffc3 	bl	542c <_ZN14USBDeviceClass14SendInterfacesEPm>
    54a6:	0003      	movs	r3, r0
    54a8:	7023      	strb	r3, [r4, #0]

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    54aa:	230c      	movs	r3, #12
    54ac:	18fb      	adds	r3, r7, r3
    54ae:	0018      	movs	r0, r3
    54b0:	2309      	movs	r3, #9
    54b2:	001a      	movs	r2, r3
    54b4:	2100      	movs	r1, #0
    54b6:	f00b fac7 	bl	10a48 <memset>
    54ba:	230c      	movs	r3, #12
    54bc:	18fb      	adds	r3, r7, r3
    54be:	2209      	movs	r2, #9
    54c0:	701a      	strb	r2, [r3, #0]
    54c2:	230c      	movs	r3, #12
    54c4:	18fb      	adds	r3, r7, r3
    54c6:	2202      	movs	r2, #2
    54c8:	705a      	strb	r2, [r3, #1]
    54ca:	230c      	movs	r3, #12
    54cc:	18fb      	adds	r3, r7, r3
    54ce:	2201      	movs	r2, #1
    54d0:	715a      	strb	r2, [r3, #5]
    54d2:	230c      	movs	r3, #12
    54d4:	18fb      	adds	r3, r7, r3
    54d6:	22a0      	movs	r2, #160	; 0xa0
    54d8:	71da      	strb	r2, [r3, #7]
    54da:	230c      	movs	r3, #12
    54dc:	18fb      	adds	r3, r7, r3
    54de:	22fa      	movs	r2, #250	; 0xfa
    54e0:	721a      	strb	r2, [r3, #8]
    54e2:	69bb      	ldr	r3, [r7, #24]
    54e4:	b29b      	uxth	r3, r3
    54e6:	3309      	adds	r3, #9
    54e8:	b29a      	uxth	r2, r3
    54ea:	230c      	movs	r3, #12
    54ec:	18fb      	adds	r3, r7, r3
    54ee:	805a      	strh	r2, [r3, #2]
    54f0:	230c      	movs	r3, #12
    54f2:	18fb      	adds	r3, r7, r3
    54f4:	221f      	movs	r2, #31
    54f6:	18ba      	adds	r2, r7, r2
    54f8:	7812      	ldrb	r2, [r2, #0]
    54fa:	711a      	strb	r2, [r3, #4]
	_Pragma("pack()")

	//	Now send them
	_dry_run = false;
    54fc:	4b16      	ldr	r3, [pc, #88]	; (5558 <_ZN14USBDeviceClass17sendConfigurationEm+0xd8>)
    54fe:	2200      	movs	r2, #0
    5500:	701a      	strb	r2, [r3, #0]

	if (maxlen == sizeof(ConfigDescriptor)) {
    5502:	683b      	ldr	r3, [r7, #0]
    5504:	2b09      	cmp	r3, #9
    5506:	d108      	bne.n	551a <_ZN14USBDeviceClass17sendConfigurationEm+0x9a>
		sendControl(&config, sizeof(ConfigDescriptor));
    5508:	230c      	movs	r3, #12
    550a:	18f9      	adds	r1, r7, r3
    550c:	687b      	ldr	r3, [r7, #4]
    550e:	2209      	movs	r2, #9
    5510:	0018      	movs	r0, r3
    5512:	f000 fe73 	bl	61fc <_ZN14USBDeviceClass11sendControlEPKvm>
		return true;
    5516:	2301      	movs	r3, #1
    5518:	e01a      	b.n	5550 <_ZN14USBDeviceClass17sendConfigurationEm+0xd0>
	}

	total = 0;
    551a:	2300      	movs	r3, #0
    551c:	61bb      	str	r3, [r7, #24]

	packMessages(true);
    551e:	687b      	ldr	r3, [r7, #4]
    5520:	2101      	movs	r1, #1
    5522:	0018      	movs	r0, r3
    5524:	f7ff ff5a 	bl	53dc <_ZN14USBDeviceClass12packMessagesEb>
	sendControl(&config, sizeof(ConfigDescriptor));
    5528:	230c      	movs	r3, #12
    552a:	18f9      	adds	r1, r7, r3
    552c:	687b      	ldr	r3, [r7, #4]
    552e:	2209      	movs	r2, #9
    5530:	0018      	movs	r0, r3
    5532:	f000 fe63 	bl	61fc <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    5536:	2318      	movs	r3, #24
    5538:	18fa      	adds	r2, r7, r3
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	0011      	movs	r1, r2
    553e:	0018      	movs	r0, r3
    5540:	f7ff ff74 	bl	542c <_ZN14USBDeviceClass14SendInterfacesEPm>
	packMessages(false);
    5544:	687b      	ldr	r3, [r7, #4]
    5546:	2100      	movs	r1, #0
    5548:	0018      	movs	r0, r3
    554a:	f7ff ff47 	bl	53dc <_ZN14USBDeviceClass12packMessagesEb>

	return true;
    554e:	2301      	movs	r3, #1
}
    5550:	0018      	movs	r0, r3
    5552:	46bd      	mov	sp, r7
    5554:	b009      	add	sp, #36	; 0x24
    5556:	bd90      	pop	{r4, r7, pc}
    5558:	200007e4 	.word	0x200007e4

0000555c <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
    555c:	b580      	push	{r7, lr}
    555e:	b084      	sub	sp, #16
    5560:	af00      	add	r7, sp, #0
    5562:	6078      	str	r0, [r7, #4]
    5564:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 8; i++) {
    5566:	2300      	movs	r3, #0
    5568:	60fb      	str	r3, [r7, #12]
    556a:	68fb      	ldr	r3, [r7, #12]
    556c:	2b07      	cmp	r3, #7
    556e:	dc1d      	bgt.n	55ac <_ZL5utox8mPc+0x50>
		int d = val & 0XF;
    5570:	687b      	ldr	r3, [r7, #4]
    5572:	220f      	movs	r2, #15
    5574:	4013      	ands	r3, r2
    5576:	60bb      	str	r3, [r7, #8]
		val = (val >> 4);
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	091b      	lsrs	r3, r3, #4
    557c:	607b      	str	r3, [r7, #4]

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    557e:	68fb      	ldr	r3, [r7, #12]
    5580:	2207      	movs	r2, #7
    5582:	1ad3      	subs	r3, r2, r3
    5584:	001a      	movs	r2, r3
    5586:	683b      	ldr	r3, [r7, #0]
    5588:	189a      	adds	r2, r3, r2
    558a:	68bb      	ldr	r3, [r7, #8]
    558c:	2b09      	cmp	r3, #9
    558e:	dd04      	ble.n	559a <_ZL5utox8mPc+0x3e>
    5590:	68bb      	ldr	r3, [r7, #8]
    5592:	b2db      	uxtb	r3, r3
    5594:	3337      	adds	r3, #55	; 0x37
    5596:	b2db      	uxtb	r3, r3
    5598:	e003      	b.n	55a2 <_ZL5utox8mPc+0x46>
    559a:	68bb      	ldr	r3, [r7, #8]
    559c:	b2db      	uxtb	r3, r3
    559e:	3330      	adds	r3, #48	; 0x30
    55a0:	b2db      	uxtb	r3, r3
    55a2:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < 8; i++) {
    55a4:	68fb      	ldr	r3, [r7, #12]
    55a6:	3301      	adds	r3, #1
    55a8:	60fb      	str	r3, [r7, #12]
    55aa:	e7de      	b.n	556a <_ZL5utox8mPc+0xe>
	}
}
    55ac:	46c0      	nop			; (mov r8, r8)
    55ae:	46bd      	mov	sp, r7
    55b0:	b004      	add	sp, #16
    55b2:	bd80      	pop	{r7, pc}

000055b4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    55b4:	b580      	push	{r7, lr}
    55b6:	b098      	sub	sp, #96	; 0x60
    55b8:	af00      	add	r7, sp, #0
    55ba:	6078      	str	r0, [r7, #4]
    55bc:	6039      	str	r1, [r7, #0]
	uint8_t t = setup.wValueH;
    55be:	2357      	movs	r3, #87	; 0x57
    55c0:	18fb      	adds	r3, r7, r3
    55c2:	683a      	ldr	r2, [r7, #0]
    55c4:	78d2      	ldrb	r2, [r2, #3]
    55c6:	701a      	strb	r2, [r3, #0]
	uint8_t desc_length = 0;
    55c8:	235f      	movs	r3, #95	; 0x5f
    55ca:	18fb      	adds	r3, r7, r3
    55cc:	2200      	movs	r2, #0
    55ce:	701a      	strb	r2, [r3, #0]
	bool _cdcComposite;
	int ret;
	const uint8_t *desc_addr = 0;
    55d0:	2300      	movs	r3, #0
    55d2:	65bb      	str	r3, [r7, #88]	; 0x58

	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    55d4:	2357      	movs	r3, #87	; 0x57
    55d6:	18fb      	adds	r3, r7, r3
    55d8:	781b      	ldrb	r3, [r3, #0]
    55da:	2b02      	cmp	r3, #2
    55dc:	d10c      	bne.n	55f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x44>
	{
		return USBDevice.sendConfiguration(setup.wLength);
    55de:	683b      	ldr	r3, [r7, #0]
    55e0:	88db      	ldrh	r3, [r3, #6]
    55e2:	001a      	movs	r2, r3
    55e4:	4b67      	ldr	r3, [pc, #412]	; (5784 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d0>)
    55e6:	0011      	movs	r1, r2
    55e8:	0018      	movs	r0, r3
    55ea:	f7ff ff49 	bl	5480 <_ZN14USBDeviceClass17sendConfigurationEm>
    55ee:	0003      	movs	r3, r0
    55f0:	1e5a      	subs	r2, r3, #1
    55f2:	4193      	sbcs	r3, r2
    55f4:	b2db      	uxtb	r3, r3
    55f6:	e0c1      	b.n	577c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}

#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    55f8:	f009 fa20 	bl	ea3c <_Z12PluggableUSBv>
    55fc:	0002      	movs	r2, r0
    55fe:	683b      	ldr	r3, [r7, #0]
    5600:	0019      	movs	r1, r3
    5602:	0010      	movs	r0, r2
    5604:	f009 f9b4 	bl	e970 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    5608:	0003      	movs	r3, r0
    560a:	653b      	str	r3, [r7, #80]	; 0x50
	if (ret != 0) {
    560c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    560e:	2b00      	cmp	r3, #0
    5610:	d005      	beq.n	561e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x6a>
		return (ret > 0 ? true : false);
    5612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5614:	17da      	asrs	r2, r3, #31
    5616:	1ad3      	subs	r3, r2, r3
    5618:	0fdb      	lsrs	r3, r3, #31
    561a:	b2db      	uxtb	r3, r3
    561c:	e0ae      	b.n	577c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}
#endif

	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    561e:	2357      	movs	r3, #87	; 0x57
    5620:	18fb      	adds	r3, r7, r3
    5622:	781b      	ldrb	r3, [r3, #0]
    5624:	2b01      	cmp	r3, #1
    5626:	d11e      	bne.n	5666 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb2>
	{
		if (setup.wLength == 8)
    5628:	683b      	ldr	r3, [r7, #0]
    562a:	88db      	ldrh	r3, [r3, #6]
    562c:	2b08      	cmp	r3, #8
    562e:	d103      	bne.n	5638 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
			_cdcComposite = 1;
    5630:	235e      	movs	r3, #94	; 0x5e
    5632:	18fb      	adds	r3, r7, r3
    5634:	2201      	movs	r2, #1
    5636:	701a      	strb	r2, [r3, #0]

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;
    5638:	235e      	movs	r3, #94	; 0x5e
    563a:	18fb      	adds	r3, r7, r3
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	2b00      	cmp	r3, #0
    5640:	d001      	beq.n	5646 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x92>
    5642:	4b51      	ldr	r3, [pc, #324]	; (5788 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d4>)
    5644:	e000      	b.n	5648 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
    5646:	4b51      	ldr	r3, [pc, #324]	; (578c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d8>)
    5648:	65bb      	str	r3, [r7, #88]	; 0x58

		if (*desc_addr > setup.wLength) {
    564a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    564c:	781b      	ldrb	r3, [r3, #0]
    564e:	001a      	movs	r2, r3
    5650:	683b      	ldr	r3, [r7, #0]
    5652:	88db      	ldrh	r3, [r3, #6]
    5654:	429a      	cmp	r2, r3
    5656:	dc00      	bgt.n	565a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa6>
    5658:	e078      	b.n	574c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
			desc_length = setup.wLength;
    565a:	683b      	ldr	r3, [r7, #0]
    565c:	88da      	ldrh	r2, [r3, #6]
    565e:	235f      	movs	r3, #95	; 0x5f
    5660:	18fb      	adds	r3, r7, r3
    5662:	701a      	strb	r2, [r3, #0]
    5664:	e072      	b.n	574c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    5666:	2357      	movs	r3, #87	; 0x57
    5668:	18fb      	adds	r3, r7, r3
    566a:	781b      	ldrb	r3, [r3, #0]
    566c:	2b03      	cmp	r3, #3
    566e:	d000      	beq.n	5672 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xbe>
    5670:	e06c      	b.n	574c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
	{
		if (setup.wValueL == 0) {
    5672:	683b      	ldr	r3, [r7, #0]
    5674:	789b      	ldrb	r3, [r3, #2]
    5676:	2b00      	cmp	r3, #0
    5678:	d109      	bne.n	568e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xda>
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
    567a:	4b45      	ldr	r3, [pc, #276]	; (5790 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1dc>)
    567c:	65bb      	str	r3, [r7, #88]	; 0x58
#endif
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
    567e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5680:	781b      	ldrb	r3, [r3, #0]
    5682:	001a      	movs	r2, r3
    5684:	683b      	ldr	r3, [r7, #0]
    5686:	88db      	ldrh	r3, [r3, #6]
    5688:	429a      	cmp	r2, r3
    568a:	dd5f      	ble.n	574c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
    568c:	e059      	b.n	5742 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x18e>
		else if (setup.wValueL == IPRODUCT) {
    568e:	683b      	ldr	r3, [r7, #0]
    5690:	789b      	ldrb	r3, [r3, #2]
    5692:	2b02      	cmp	r3, #2
    5694:	d109      	bne.n	56aa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xf6>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    5696:	683b      	ldr	r3, [r7, #0]
    5698:	88db      	ldrh	r3, [r3, #6]
    569a:	b2da      	uxtb	r2, r3
    569c:	493d      	ldr	r1, [pc, #244]	; (5794 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e0>)
    569e:	687b      	ldr	r3, [r7, #4]
    56a0:	0018      	movs	r0, r3
    56a2:	f7ff fded 	bl	5280 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    56a6:	0003      	movs	r3, r0
    56a8:	e068      	b.n	577c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
		else if (setup.wValueL == IMANUFACTURER) {
    56aa:	683b      	ldr	r3, [r7, #0]
    56ac:	789b      	ldrb	r3, [r3, #2]
    56ae:	2b01      	cmp	r3, #1
    56b0:	d109      	bne.n	56c6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x112>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    56b2:	683b      	ldr	r3, [r7, #0]
    56b4:	88db      	ldrh	r3, [r3, #6]
    56b6:	b2da      	uxtb	r2, r3
    56b8:	4937      	ldr	r1, [pc, #220]	; (5798 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e4>)
    56ba:	687b      	ldr	r3, [r7, #4]
    56bc:	0018      	movs	r0, r3
    56be:	f7ff fddf 	bl	5280 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    56c2:	0003      	movs	r3, r0
    56c4:	e05a      	b.n	577c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
		else if (setup.wValueL == ISERIAL) {
    56c6:	683b      	ldr	r3, [r7, #0]
    56c8:	789b      	ldrb	r3, [r3, #2]
    56ca:	2b03      	cmp	r3, #3
    56cc:	d137      	bne.n	573e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x18a>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    56ce:	4b33      	ldr	r3, [pc, #204]	; (579c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e8>)
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	220c      	movs	r2, #12
    56d4:	18ba      	adds	r2, r7, r2
    56d6:	0011      	movs	r1, r2
    56d8:	0018      	movs	r0, r3
    56da:	f7ff ff3f 	bl	555c <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    56de:	4b30      	ldr	r3, [pc, #192]	; (57a0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1ec>)
    56e0:	681a      	ldr	r2, [r3, #0]
    56e2:	230c      	movs	r3, #12
    56e4:	18fb      	adds	r3, r7, r3
    56e6:	3308      	adds	r3, #8
    56e8:	0019      	movs	r1, r3
    56ea:	0010      	movs	r0, r2
    56ec:	f7ff ff36 	bl	555c <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    56f0:	4b2c      	ldr	r3, [pc, #176]	; (57a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1f0>)
    56f2:	681a      	ldr	r2, [r3, #0]
    56f4:	230c      	movs	r3, #12
    56f6:	18fb      	adds	r3, r7, r3
    56f8:	3310      	adds	r3, #16
    56fa:	0019      	movs	r1, r3
    56fc:	0010      	movs	r0, r2
    56fe:	f7ff ff2d 	bl	555c <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    5702:	4b29      	ldr	r3, [pc, #164]	; (57a8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1f4>)
    5704:	681a      	ldr	r2, [r3, #0]
    5706:	230c      	movs	r3, #12
    5708:	18fb      	adds	r3, r7, r3
    570a:	3318      	adds	r3, #24
    570c:	0019      	movs	r1, r3
    570e:	0010      	movs	r0, r2
    5710:	f7ff ff24 	bl	555c <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    5714:	f009 f992 	bl	ea3c <_Z12PluggableUSBv>
    5718:	0002      	movs	r2, r0
    571a:	230c      	movs	r3, #12
    571c:	18fb      	adds	r3, r7, r3
    571e:	3320      	adds	r3, #32
    5720:	0019      	movs	r1, r3
    5722:	0010      	movs	r0, r2
    5724:	f009 f947 	bl	e9b6 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    5728:	683b      	ldr	r3, [r7, #0]
    572a:	88db      	ldrh	r3, [r3, #6]
    572c:	b2da      	uxtb	r2, r3
    572e:	230c      	movs	r3, #12
    5730:	18f9      	adds	r1, r7, r3
    5732:	687b      	ldr	r3, [r7, #4]
    5734:	0018      	movs	r0, r3
    5736:	f7ff fda3 	bl	5280 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    573a:	0003      	movs	r3, r0
    573c:	e01e      	b.n	577c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
			return false;
    573e:	2300      	movs	r3, #0
    5740:	e01c      	b.n	577c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
			desc_length = setup.wLength;
    5742:	683b      	ldr	r3, [r7, #0]
    5744:	88da      	ldrh	r2, [r3, #6]
    5746:	235f      	movs	r3, #95	; 0x5f
    5748:	18fb      	adds	r3, r7, r3
    574a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}

	if (desc_addr == 0) {
    574c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    574e:	2b00      	cmp	r3, #0
    5750:	d101      	bne.n	5756 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1a2>
		return false;
    5752:	2300      	movs	r3, #0
    5754:	e012      	b.n	577c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}

	if (desc_length == 0) {
    5756:	235f      	movs	r3, #95	; 0x5f
    5758:	18fb      	adds	r3, r7, r3
    575a:	781b      	ldrb	r3, [r3, #0]
    575c:	2b00      	cmp	r3, #0
    575e:	d104      	bne.n	576a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1b6>
		desc_length = *desc_addr;
    5760:	235f      	movs	r3, #95	; 0x5f
    5762:	18fb      	adds	r3, r7, r3
    5764:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5766:	7812      	ldrb	r2, [r2, #0]
    5768:	701a      	strb	r2, [r3, #0]
	}

	sendControl(desc_addr, desc_length);
    576a:	235f      	movs	r3, #95	; 0x5f
    576c:	18fb      	adds	r3, r7, r3
    576e:	781a      	ldrb	r2, [r3, #0]
    5770:	6db9      	ldr	r1, [r7, #88]	; 0x58
    5772:	687b      	ldr	r3, [r7, #4]
    5774:	0018      	movs	r0, r3
    5776:	f000 fd41 	bl	61fc <_ZN14USBDeviceClass11sendControlEPKvm>

	return true;
    577a:	2301      	movs	r3, #1
}
    577c:	0018      	movs	r0, r3
    577e:	46bd      	mov	sp, r7
    5780:	b018      	add	sp, #96	; 0x60
    5782:	bd80      	pop	{r7, pc}
    5784:	200008f0 	.word	0x200008f0
    5788:	00013694 	.word	0x00013694
    578c:	000136a8 	.word	0x000136a8
    5790:	00013674 	.word	0x00013674
    5794:	00013678 	.word	0x00013678
    5798:	00013688 	.word	0x00013688
    579c:	0080a00c 	.word	0x0080a00c
    57a0:	0080a040 	.word	0x0080a040
    57a4:	0080a044 	.word	0x0080a044
    57a8:	0080a048 	.word	0x0080a048

000057ac <_ZN14USBDeviceClass14handleEndpointEh>:
	usbd.noRunInStandby();
}


void USBDeviceClass::handleEndpoint(uint8_t ep)
{
    57ac:	b580      	push	{r7, lr}
    57ae:	b082      	sub	sp, #8
    57b0:	af00      	add	r7, sp, #0
    57b2:	6078      	str	r0, [r7, #4]
    57b4:	000a      	movs	r2, r1
    57b6:	1cfb      	adds	r3, r7, #3
    57b8:	701a      	strb	r2, [r3, #0]
#if defined(CDC_ENABLED)
	if (ep == CDC_ENDPOINT_IN)
    57ba:	1cfb      	adds	r3, r7, #3
    57bc:	781b      	ldrb	r3, [r3, #0]
    57be:	2b03      	cmp	r3, #3
    57c0:	d109      	bne.n	57d6 <_ZN14USBDeviceClass14handleEndpointEh+0x2a>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_IN);
    57c2:	4b0e      	ldr	r3, [pc, #56]	; (57fc <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    57c4:	2103      	movs	r1, #3
    57c6:	0018      	movs	r0, r3
    57c8:	f7ff f826 	bl	4818 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_IN);
    57cc:	4b0b      	ldr	r3, [pc, #44]	; (57fc <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    57ce:	2103      	movs	r1, #3
    57d0:	0018      	movs	r0, r3
    57d2:	f7fe ff25 	bl	4620 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
	if (ep == CDC_ENDPOINT_ACM)
    57d6:	1cfb      	adds	r3, r7, #3
    57d8:	781b      	ldrb	r3, [r3, #0]
    57da:	2b01      	cmp	r3, #1
    57dc:	d109      	bne.n	57f2 <_ZN14USBDeviceClass14handleEndpointEh+0x46>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_ACM);
    57de:	4b07      	ldr	r3, [pc, #28]	; (57fc <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    57e0:	2101      	movs	r1, #1
    57e2:	0018      	movs	r0, r3
    57e4:	f7ff f818 	bl	4818 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_ACM);
    57e8:	4b04      	ldr	r3, [pc, #16]	; (57fc <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    57ea:	2101      	movs	r1, #1
    57ec:	0018      	movs	r0, r3
    57ee:	f7fe ff17 	bl	4620 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
#endif

#if defined(PLUGGABLE_USB_ENABLED)
	// Empty
#endif
}
    57f2:	46c0      	nop			; (mov r8, r8)
    57f4:	46bd      	mov	sp, r7
    57f6:	b002      	add	sp, #8
    57f8:	bd80      	pop	{r7, pc}
    57fa:	46c0      	nop			; (mov r8, r8)
    57fc:	20000338 	.word	0x20000338

00005800 <_ZN14USBDeviceClass4initEv>:

void USBDeviceClass::init()
{
    5800:	b580      	push	{r7, lr}
    5802:	b082      	sub	sp, #8
    5804:	af00      	add	r7, sp, #0
    5806:	6078      	str	r0, [r7, #4]
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    5808:	4b42      	ldr	r3, [pc, #264]	; (5914 <_ZN14USBDeviceClass4initEv+0x114>)
    580a:	2200      	movs	r2, #0
    580c:	701a      	strb	r2, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    580e:	2101      	movs	r1, #1
    5810:	201f      	movs	r0, #31
    5812:	f001 f929 	bl	6a68 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    5816:	2101      	movs	r1, #1
    5818:	201f      	movs	r0, #31
    581a:	f001 fa4f 	bl	6cbc <digitalWrite>
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    581e:	4b3e      	ldr	r3, [pc, #248]	; (5918 <_ZN14USBDeviceClass4initEv+0x118>)
    5820:	2200      	movs	r2, #0
    5822:	701a      	strb	r2, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    5824:	2101      	movs	r1, #1
    5826:	201e      	movs	r0, #30
    5828:	f001 f91e 	bl	6a68 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    582c:	2101      	movs	r1, #1
    582e:	201e      	movs	r0, #30
    5830:	f001 fa44 	bl	6cbc <digitalWrite>
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5834:	4b39      	ldr	r3, [pc, #228]	; (591c <_ZN14USBDeviceClass4initEv+0x11c>)
    5836:	4a39      	ldr	r2, [pc, #228]	; (591c <_ZN14USBDeviceClass4initEv+0x11c>)
    5838:	69d2      	ldr	r2, [r2, #28]
    583a:	2120      	movs	r1, #32
    583c:	430a      	orrs	r2, r1
    583e:	61da      	str	r2, [r3, #28]

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    5840:	4937      	ldr	r1, [pc, #220]	; (5920 <_ZN14USBDeviceClass4initEv+0x120>)
    5842:	2258      	movs	r2, #88	; 0x58
    5844:	5c8b      	ldrb	r3, [r1, r2]
    5846:	2001      	movs	r0, #1
    5848:	4303      	orrs	r3, r0
    584a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    584c:	4a34      	ldr	r2, [pc, #208]	; (5920 <_ZN14USBDeviceClass4initEv+0x120>)
    584e:	4934      	ldr	r1, [pc, #208]	; (5920 <_ZN14USBDeviceClass4initEv+0x120>)
    5850:	233c      	movs	r3, #60	; 0x3c
    5852:	5ccb      	ldrb	r3, [r1, r3]
    5854:	b2db      	uxtb	r3, r3
    5856:	210f      	movs	r1, #15
    5858:	438b      	bics	r3, r1
    585a:	b2d9      	uxtb	r1, r3
    585c:	233c      	movs	r3, #60	; 0x3c
    585e:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    5860:	4a2f      	ldr	r2, [pc, #188]	; (5920 <_ZN14USBDeviceClass4initEv+0x120>)
    5862:	492f      	ldr	r1, [pc, #188]	; (5920 <_ZN14USBDeviceClass4initEv+0x120>)
    5864:	233c      	movs	r3, #60	; 0x3c
    5866:	5ccb      	ldrb	r3, [r1, r3]
    5868:	b2db      	uxtb	r3, r3
    586a:	2106      	movs	r1, #6
    586c:	430b      	orrs	r3, r1
    586e:	b2d9      	uxtb	r1, r3
    5870:	233c      	movs	r3, #60	; 0x3c
    5872:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    5874:	492a      	ldr	r1, [pc, #168]	; (5920 <_ZN14USBDeviceClass4initEv+0x120>)
    5876:	2259      	movs	r2, #89	; 0x59
    5878:	5c8b      	ldrb	r3, [r1, r2]
    587a:	2001      	movs	r0, #1
    587c:	4303      	orrs	r3, r0
    587e:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    5880:	4a27      	ldr	r2, [pc, #156]	; (5920 <_ZN14USBDeviceClass4initEv+0x120>)
    5882:	4927      	ldr	r1, [pc, #156]	; (5920 <_ZN14USBDeviceClass4initEv+0x120>)
    5884:	233c      	movs	r3, #60	; 0x3c
    5886:	5ccb      	ldrb	r3, [r1, r3]
    5888:	b2db      	uxtb	r3, r3
    588a:	210f      	movs	r1, #15
    588c:	400b      	ands	r3, r1
    588e:	b2d9      	uxtb	r1, r3
    5890:	233c      	movs	r3, #60	; 0x3c
    5892:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    5894:	4a22      	ldr	r2, [pc, #136]	; (5920 <_ZN14USBDeviceClass4initEv+0x120>)
    5896:	4922      	ldr	r1, [pc, #136]	; (5920 <_ZN14USBDeviceClass4initEv+0x120>)
    5898:	233c      	movs	r3, #60	; 0x3c
    589a:	5ccb      	ldrb	r3, [r1, r3]
    589c:	b2db      	uxtb	r3, r3
    589e:	2160      	movs	r1, #96	; 0x60
    58a0:	430b      	orrs	r3, r1
    58a2:	b2d9      	uxtb	r1, r3
    58a4:	233c      	movs	r3, #60	; 0x3c
    58a6:	54d1      	strb	r1, [r2, r3]

	// Put Generic Clock Generator 0 as source for Generic Clock Multiplexer 6 (USB reference)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    58a8:	4b1e      	ldr	r3, [pc, #120]	; (5924 <_ZN14USBDeviceClass4initEv+0x124>)
    58aa:	4a1f      	ldr	r2, [pc, #124]	; (5928 <_ZN14USBDeviceClass4initEv+0x128>)
    58ac:	805a      	strh	r2, [r3, #2]
	                    GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
	                    GCLK_CLKCTRL_CLKEN;
	while (GCLK->STATUS.bit.SYNCBUSY)
    58ae:	4b1d      	ldr	r3, [pc, #116]	; (5924 <_ZN14USBDeviceClass4initEv+0x124>)
    58b0:	785b      	ldrb	r3, [r3, #1]
    58b2:	061b      	lsls	r3, r3, #24
    58b4:	0fdb      	lsrs	r3, r3, #31
    58b6:	b2db      	uxtb	r3, r3
    58b8:	2b00      	cmp	r3, #0
    58ba:	d000      	beq.n	58be <_ZN14USBDeviceClass4initEv+0xbe>
    58bc:	e7f7      	b.n	58ae <_ZN14USBDeviceClass4initEv+0xae>
		;

	USB_SetHandler(&UDD_Handler);
    58be:	4b1b      	ldr	r3, [pc, #108]	; (592c <_ZN14USBDeviceClass4initEv+0x12c>)
    58c0:	0018      	movs	r0, r3
    58c2:	f7fd fb9d 	bl	3000 <USB_SetHandler>

	// Reset USB Device
	usbd.reset();
    58c6:	4b1a      	ldr	r3, [pc, #104]	; (5930 <_ZN14USBDeviceClass4initEv+0x130>)
    58c8:	0018      	movs	r0, r3
    58ca:	f7ff f91f 	bl	4b0c <_ZN20USBDevice_SAMD21G18x5resetEv>

	usbd.calibrate();
    58ce:	4b18      	ldr	r3, [pc, #96]	; (5930 <_ZN14USBDeviceClass4initEv+0x130>)
    58d0:	0018      	movs	r0, r3
    58d2:	f7ff f93f 	bl	4b54 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	usbd.setUSBDeviceMode();
    58d6:	4b16      	ldr	r3, [pc, #88]	; (5930 <_ZN14USBDeviceClass4initEv+0x130>)
    58d8:	0018      	movs	r0, r3
    58da:	f7fe fd2d 	bl	4338 <_ZN20USBDevice_SAMD21G18x16setUSBDeviceModeEv>
	usbd.runInStandby();
    58de:	4b14      	ldr	r3, [pc, #80]	; (5930 <_ZN14USBDeviceClass4initEv+0x130>)
    58e0:	0018      	movs	r0, r3
    58e2:	f7fe fd37 	bl	4354 <_ZN20USBDevice_SAMD21G18x12runInStandbyEv>
	usbd.setFullSpeed();
    58e6:	4b12      	ldr	r3, [pc, #72]	; (5930 <_ZN14USBDeviceClass4initEv+0x130>)
    58e8:	0018      	movs	r0, r3
    58ea:	f7fe fd41 	bl	4370 <_ZN20USBDevice_SAMD21G18x12setFullSpeedEv>

	// Configure interrupts
	NVIC_SetPriority((IRQn_Type) USB_IRQn, 0UL);
    58ee:	2100      	movs	r1, #0
    58f0:	2007      	movs	r0, #7
    58f2:	f7fe fc65 	bl	41c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ((IRQn_Type) USB_IRQn);
    58f6:	2007      	movs	r0, #7
    58f8:	f7fe fc48 	bl	418c <__NVIC_EnableIRQ>

	usbd.enable();
    58fc:	4b0c      	ldr	r3, [pc, #48]	; (5930 <_ZN14USBDeviceClass4initEv+0x130>)
    58fe:	0018      	movs	r0, r3
    5900:	f7fe fd0c 	bl	431c <_ZN20USBDevice_SAMD21G18x6enableEv>

	initialized = true;
    5904:	687b      	ldr	r3, [r7, #4]
    5906:	2201      	movs	r2, #1
    5908:	701a      	strb	r2, [r3, #0]
}
    590a:	46c0      	nop			; (mov r8, r8)
    590c:	46bd      	mov	sp, r7
    590e:	b002      	add	sp, #8
    5910:	bd80      	pop	{r7, pc}
    5912:	46c0      	nop			; (mov r8, r8)
    5914:	2000043c 	.word	0x2000043c
    5918:	2000043d 	.word	0x2000043d
    591c:	40000400 	.word	0x40000400
    5920:	41004400 	.word	0x41004400
    5924:	40000c00 	.word	0x40000c00
    5928:	00004006 	.word	0x00004006
    592c:	00005269 	.word	0x00005269
    5930:	20000338 	.word	0x20000338

00005934 <_ZN14USBDeviceClass6attachEv>:

bool USBDeviceClass::attach()
{
    5934:	b580      	push	{r7, lr}
    5936:	b082      	sub	sp, #8
    5938:	af00      	add	r7, sp, #0
    593a:	6078      	str	r0, [r7, #4]
	if (!initialized)
    593c:	687b      	ldr	r3, [r7, #4]
    593e:	781b      	ldrb	r3, [r3, #0]
    5940:	2201      	movs	r2, #1
    5942:	4053      	eors	r3, r2
    5944:	b2db      	uxtb	r3, r3
    5946:	2b00      	cmp	r3, #0
    5948:	d001      	beq.n	594e <_ZN14USBDeviceClass6attachEv+0x1a>
		return false;
    594a:	2300      	movs	r3, #0
    594c:	e00f      	b.n	596e <_ZN14USBDeviceClass6attachEv+0x3a>

	usbd.attach();
    594e:	4b0a      	ldr	r3, [pc, #40]	; (5978 <_ZN14USBDeviceClass6attachEv+0x44>)
    5950:	0018      	movs	r0, r3
    5952:	f7fe fd1b 	bl	438c <_ZN20USBDevice_SAMD21G18x6attachEv>
	usbd.enableEndOfResetInterrupt();
    5956:	4b08      	ldr	r3, [pc, #32]	; (5978 <_ZN14USBDeviceClass6attachEv+0x44>)
    5958:	0018      	movs	r0, r3
    595a:	f7fe fd3f 	bl	43dc <_ZN20USBDevice_SAMD21G18x25enableEndOfResetInterruptEv>
	usbd.enableStartOfFrameInterrupt();
    595e:	4b06      	ldr	r3, [pc, #24]	; (5978 <_ZN14USBDeviceClass6attachEv+0x44>)
    5960:	0018      	movs	r0, r3
    5962:	f7fe fd63 	bl	442c <_ZN20USBDevice_SAMD21G18x27enableStartOfFrameInterruptEv>

	_usbConfiguration = 0;
    5966:	4b05      	ldr	r3, [pc, #20]	; (597c <_ZN14USBDeviceClass6attachEv+0x48>)
    5968:	2200      	movs	r2, #0
    596a:	601a      	str	r2, [r3, #0]
	return true;
    596c:	2301      	movs	r3, #1
}
    596e:	0018      	movs	r0, r3
    5970:	46bd      	mov	sp, r7
    5972:	b002      	add	sp, #8
    5974:	bd80      	pop	{r7, pc}
    5976:	46c0      	nop			; (mov r8, r8)
    5978:	20000338 	.word	0x20000338
    597c:	20000440 	.word	0x20000440

00005980 <_ZN14USBDeviceClass10setAddressEm>:

void USBDeviceClass::setAddress(uint32_t addr)
{
    5980:	b580      	push	{r7, lr}
    5982:	b082      	sub	sp, #8
    5984:	af00      	add	r7, sp, #0
    5986:	6078      	str	r0, [r7, #4]
    5988:	6039      	str	r1, [r7, #0]
	usbd.epBank1SetByteCount(0, 0);
    598a:	4b1b      	ldr	r3, [pc, #108]	; (59f8 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    598c:	2200      	movs	r2, #0
    598e:	2100      	movs	r1, #0
    5990:	0018      	movs	r0, r3
    5992:	f7fe ff8d 	bl	48b0 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
	usbd.epBank1AckTransferComplete(0);
    5996:	4b18      	ldr	r3, [pc, #96]	; (59f8 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    5998:	2100      	movs	r1, #0
    599a:	0018      	movs	r0, r3
    599c:	f7fe fe40 	bl	4620 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(0);
    59a0:	4b15      	ldr	r3, [pc, #84]	; (59f8 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    59a2:	2100      	movs	r1, #0
    59a4:	0018      	movs	r0, r3
    59a6:	f7fe ff0a 	bl	47be <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	// Wait for transfer to complete
	while (!usbd.epBank1IsTransferComplete(0)) {}
    59aa:	4b13      	ldr	r3, [pc, #76]	; (59f8 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    59ac:	2100      	movs	r1, #0
    59ae:	0018      	movs	r0, r3
    59b0:	f7fe fde1 	bl	4576 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    59b4:	0003      	movs	r3, r0
    59b6:	001a      	movs	r2, r3
    59b8:	2301      	movs	r3, #1
    59ba:	4053      	eors	r3, r2
    59bc:	b2db      	uxtb	r3, r3
    59be:	2b00      	cmp	r3, #0
    59c0:	d000      	beq.n	59c4 <_ZN14USBDeviceClass10setAddressEm+0x44>
    59c2:	e7f2      	b.n	59aa <_ZN14USBDeviceClass10setAddressEm+0x2a>

	// Set USB address to addr
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    59c4:	4a0d      	ldr	r2, [pc, #52]	; (59fc <_ZN14USBDeviceClass10setAddressEm+0x7c>)
    59c6:	683b      	ldr	r3, [r7, #0]
    59c8:	b2db      	uxtb	r3, r3
    59ca:	1c19      	adds	r1, r3, #0
    59cc:	237f      	movs	r3, #127	; 0x7f
    59ce:	400b      	ands	r3, r1
    59d0:	b2d9      	uxtb	r1, r3
    59d2:	7a93      	ldrb	r3, [r2, #10]
    59d4:	207f      	movs	r0, #127	; 0x7f
    59d6:	4008      	ands	r0, r1
    59d8:	217f      	movs	r1, #127	; 0x7f
    59da:	438b      	bics	r3, r1
    59dc:	1c19      	adds	r1, r3, #0
    59de:	1c03      	adds	r3, r0, #0
    59e0:	430b      	orrs	r3, r1
    59e2:	7293      	strb	r3, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    59e4:	4a05      	ldr	r2, [pc, #20]	; (59fc <_ZN14USBDeviceClass10setAddressEm+0x7c>)
    59e6:	7a93      	ldrb	r3, [r2, #10]
    59e8:	2180      	movs	r1, #128	; 0x80
    59ea:	4249      	negs	r1, r1
    59ec:	430b      	orrs	r3, r1
    59ee:	7293      	strb	r3, [r2, #10]
}
    59f0:	46c0      	nop			; (mov r8, r8)
    59f2:	46bd      	mov	sp, r7
    59f4:	b002      	add	sp, #8
    59f6:	bd80      	pop	{r7, pc}
    59f8:	20000338 	.word	0x20000338
    59fc:	41005000 	.word	0x41005000

00005a00 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
    5a00:	b590      	push	{r4, r7, lr}
    5a02:	b085      	sub	sp, #20
    5a04:	af00      	add	r7, sp, #0
    5a06:	6078      	str	r0, [r7, #4]
    5a08:	6039      	str	r1, [r7, #0]
	uint8_t i = setup.wIndex;
    5a0a:	683b      	ldr	r3, [r7, #0]
    5a0c:	889a      	ldrh	r2, [r3, #4]
    5a0e:	230f      	movs	r3, #15
    5a10:	18fb      	adds	r3, r7, r3
    5a12:	701a      	strb	r2, [r3, #0]

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
    5a14:	230f      	movs	r3, #15
    5a16:	18fb      	adds	r3, r7, r3
    5a18:	781b      	ldrb	r3, [r3, #0]
    5a1a:	2b00      	cmp	r3, #0
    5a1c:	d111      	bne.n	5a42 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x42>
	{
		if (CDC_Setup(setup) == false) {
    5a1e:	683b      	ldr	r3, [r7, #0]
    5a20:	0018      	movs	r0, r3
    5a22:	f008 fe47 	bl	e6b4 <_Z9CDC_SetupR8USBSetup>
    5a26:	0003      	movs	r3, r0
    5a28:	001a      	movs	r2, r3
    5a2a:	2301      	movs	r3, #1
    5a2c:	4053      	eors	r3, r2
    5a2e:	b2db      	uxtb	r3, r3
    5a30:	2b00      	cmp	r3, #0
    5a32:	d004      	beq.n	5a3e <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3e>
			sendZlp(0);
    5a34:	687b      	ldr	r3, [r7, #4]
    5a36:	2100      	movs	r1, #0
    5a38:	0018      	movs	r0, r3
    5a3a:	f000 fc2f 	bl	629c <_ZN14USBDeviceClass7sendZlpEm>
		}
		return true;
    5a3e:	2301      	movs	r3, #1
    5a40:	e01b      	b.n	5a7a <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x7a>
	}
	#endif

	#if defined(PLUGGABLE_USB_ENABLED)
	bool ret = PluggableUSB().setup(setup);
    5a42:	f008 fffb 	bl	ea3c <_Z12PluggableUSBv>
    5a46:	0002      	movs	r2, r0
    5a48:	230e      	movs	r3, #14
    5a4a:	18fc      	adds	r4, r7, r3
    5a4c:	683b      	ldr	r3, [r7, #0]
    5a4e:	0019      	movs	r1, r3
    5a50:	0010      	movs	r0, r2
    5a52:	f008 ffd3 	bl	e9fc <_ZN13PluggableUSB_5setupER8USBSetup>
    5a56:	0003      	movs	r3, r0
    5a58:	7023      	strb	r3, [r4, #0]
	if ( ret == false) {
    5a5a:	230e      	movs	r3, #14
    5a5c:	18fb      	adds	r3, r7, r3
    5a5e:	781b      	ldrb	r3, [r3, #0]
    5a60:	2201      	movs	r2, #1
    5a62:	4053      	eors	r3, r2
    5a64:	b2db      	uxtb	r3, r3
    5a66:	2b00      	cmp	r3, #0
    5a68:	d004      	beq.n	5a74 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x74>
		sendZlp(0);
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	2100      	movs	r1, #0
    5a6e:	0018      	movs	r0, r3
    5a70:	f000 fc14 	bl	629c <_ZN14USBDeviceClass7sendZlpEm>
	}
	return ret;
    5a74:	230e      	movs	r3, #14
    5a76:	18fb      	adds	r3, r7, r3
    5a78:	781b      	ldrb	r3, [r3, #0]
	#endif

	return false;
}
    5a7a:	0018      	movs	r0, r3
    5a7c:	46bd      	mov	sp, r7
    5a7e:	b005      	add	sp, #20
    5a80:	bd90      	pop	{r4, r7, pc}
	...

00005a84 <_ZN14USBDeviceClass13initEndpointsEv>:
	0,
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
    5a84:	b580      	push	{r7, lr}
    5a86:	b084      	sub	sp, #16
    5a88:	af00      	add	r7, sp, #0
    5a8a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5a8c:	230f      	movs	r3, #15
    5a8e:	18fb      	adds	r3, r7, r3
    5a90:	2201      	movs	r2, #1
    5a92:	701a      	strb	r2, [r3, #0]
    5a94:	230f      	movs	r3, #15
    5a96:	18fb      	adds	r3, r7, r3
    5a98:	781b      	ldrb	r3, [r3, #0]
    5a9a:	2b27      	cmp	r3, #39	; 0x27
    5a9c:	d81c      	bhi.n	5ad8 <_ZN14USBDeviceClass13initEndpointsEv+0x54>
    5a9e:	230f      	movs	r3, #15
    5aa0:	18fb      	adds	r3, r7, r3
    5aa2:	781a      	ldrb	r2, [r3, #0]
    5aa4:	4b0e      	ldr	r3, [pc, #56]	; (5ae0 <_ZN14USBDeviceClass13initEndpointsEv+0x5c>)
    5aa6:	0092      	lsls	r2, r2, #2
    5aa8:	58d3      	ldr	r3, [r2, r3]
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d014      	beq.n	5ad8 <_ZN14USBDeviceClass13initEndpointsEv+0x54>
		initEP(i, EndPoints[i]);
    5aae:	230f      	movs	r3, #15
    5ab0:	18fb      	adds	r3, r7, r3
    5ab2:	7819      	ldrb	r1, [r3, #0]
    5ab4:	230f      	movs	r3, #15
    5ab6:	18fb      	adds	r3, r7, r3
    5ab8:	781a      	ldrb	r2, [r3, #0]
    5aba:	4b09      	ldr	r3, [pc, #36]	; (5ae0 <_ZN14USBDeviceClass13initEndpointsEv+0x5c>)
    5abc:	0092      	lsls	r2, r2, #2
    5abe:	58d2      	ldr	r2, [r2, r3]
    5ac0:	687b      	ldr	r3, [r7, #4]
    5ac2:	0018      	movs	r0, r3
    5ac4:	f000 f80e 	bl	5ae4 <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5ac8:	230f      	movs	r3, #15
    5aca:	18fb      	adds	r3, r7, r3
    5acc:	781a      	ldrb	r2, [r3, #0]
    5ace:	230f      	movs	r3, #15
    5ad0:	18fb      	adds	r3, r7, r3
    5ad2:	3201      	adds	r2, #1
    5ad4:	701a      	strb	r2, [r3, #0]
    5ad6:	e7dd      	b.n	5a94 <_ZN14USBDeviceClass13initEndpointsEv+0x10>
	}
}
    5ad8:	46c0      	nop			; (mov r8, r8)
    5ada:	46bd      	mov	sp, r7
    5adc:	b004      	add	sp, #16
    5ade:	bd80      	pop	{r7, pc}
    5ae0:	20000020 	.word	0x20000020

00005ae4 <_ZN14USBDeviceClass6initEPEmm>:

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
{
    5ae4:	b590      	push	{r4, r7, lr}
    5ae6:	b085      	sub	sp, #20
    5ae8:	af00      	add	r7, sp, #0
    5aea:	60f8      	str	r0, [r7, #12]
    5aec:	60b9      	str	r1, [r7, #8]
    5aee:	607a      	str	r2, [r7, #4]
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    5af0:	687b      	ldr	r3, [r7, #4]
    5af2:	2b83      	cmp	r3, #131	; 0x83
    5af4:	d118      	bne.n	5b28 <_ZN14USBDeviceClass6initEPEmm+0x44>
	{
		usbd.epBank1SetSize(ep, 64);
    5af6:	68bb      	ldr	r3, [r7, #8]
    5af8:	b2d9      	uxtb	r1, r3
    5afa:	4b4e      	ldr	r3, [pc, #312]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5afc:	2240      	movs	r2, #64	; 0x40
    5afe:	0018      	movs	r0, r3
    5b00:	f7fe ff9a 	bl	4a38 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5b04:	68bb      	ldr	r3, [r7, #8]
    5b06:	b2d9      	uxtb	r1, r3
    5b08:	68bb      	ldr	r3, [r7, #8]
    5b0a:	019a      	lsls	r2, r3, #6
    5b0c:	4b4a      	ldr	r3, [pc, #296]	; (5c38 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    5b0e:	18d2      	adds	r2, r2, r3
    5b10:	4b48      	ldr	r3, [pc, #288]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5b12:	0018      	movs	r0, r3
    5b14:	f7fe ff4e 	bl	49b4 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
    5b18:	68bb      	ldr	r3, [r7, #8]
    5b1a:	b2d9      	uxtb	r1, r3
    5b1c:	4b45      	ldr	r3, [pc, #276]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5b1e:	2204      	movs	r2, #4
    5b20:	0018      	movs	r0, r3
    5b22:	f7fe fcb5 	bl	4490 <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    5b26:	e081      	b.n	5c2c <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	2b02      	cmp	r3, #2
    5b2c:	d116      	bne.n	5b5c <_ZN14USBDeviceClass6initEPEmm+0x78>
		if (epHandlers[ep] == NULL) {
    5b2e:	4b43      	ldr	r3, [pc, #268]	; (5c3c <_ZN14USBDeviceClass6initEPEmm+0x158>)
    5b30:	68ba      	ldr	r2, [r7, #8]
    5b32:	0092      	lsls	r2, r2, #2
    5b34:	58d3      	ldr	r3, [r2, r3]
    5b36:	2b00      	cmp	r3, #0
    5b38:	d178      	bne.n	5c2c <_ZN14USBDeviceClass6initEPEmm+0x148>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    5b3a:	2038      	movs	r0, #56	; 0x38
    5b3c:	f007 fed2 	bl	d8e4 <_Znwj>
    5b40:	0003      	movs	r3, r0
    5b42:	001c      	movs	r4, r3
    5b44:	2380      	movs	r3, #128	; 0x80
    5b46:	005b      	lsls	r3, r3, #1
    5b48:	68ba      	ldr	r2, [r7, #8]
    5b4a:	493a      	ldr	r1, [pc, #232]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5b4c:	0020      	movs	r0, r4
    5b4e:	f7ff f8af 	bl	4cb0 <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm>
    5b52:	4b3a      	ldr	r3, [pc, #232]	; (5c3c <_ZN14USBDeviceClass6initEPEmm+0x158>)
    5b54:	68ba      	ldr	r2, [r7, #8]
    5b56:	0092      	lsls	r2, r2, #2
    5b58:	50d4      	str	r4, [r2, r3]
}
    5b5a:	e067      	b.n	5c2c <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	2b82      	cmp	r3, #130	; 0x82
    5b60:	d11f      	bne.n	5ba2 <_ZN14USBDeviceClass6initEPEmm+0xbe>
		usbd.epBank1SetSize(ep, 64);
    5b62:	68bb      	ldr	r3, [r7, #8]
    5b64:	b2d9      	uxtb	r1, r3
    5b66:	4b33      	ldr	r3, [pc, #204]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5b68:	2240      	movs	r2, #64	; 0x40
    5b6a:	0018      	movs	r0, r3
    5b6c:	f7fe ff64 	bl	4a38 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5b70:	68bb      	ldr	r3, [r7, #8]
    5b72:	b2d9      	uxtb	r1, r3
    5b74:	68bb      	ldr	r3, [r7, #8]
    5b76:	019a      	lsls	r2, r3, #6
    5b78:	4b2f      	ldr	r3, [pc, #188]	; (5c38 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    5b7a:	18d2      	adds	r2, r2, r3
    5b7c:	4b2d      	ldr	r3, [pc, #180]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5b7e:	0018      	movs	r0, r3
    5b80:	f7fe ff18 	bl	49b4 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1ResetReady(ep);
    5b84:	68bb      	ldr	r3, [r7, #8]
    5b86:	b2da      	uxtb	r2, r3
    5b88:	4b2a      	ldr	r3, [pc, #168]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5b8a:	0011      	movs	r1, r2
    5b8c:	0018      	movs	r0, r3
    5b8e:	f7fe fe43 	bl	4818 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1SetType(ep, 3); // BULK IN
    5b92:	68bb      	ldr	r3, [r7, #8]
    5b94:	b2d9      	uxtb	r1, r3
    5b96:	4b27      	ldr	r3, [pc, #156]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5b98:	2203      	movs	r2, #3
    5b9a:	0018      	movs	r0, r3
    5b9c:	f7fe fc78 	bl	4490 <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
}
    5ba0:	e044      	b.n	5c2c <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    5ba2:	687b      	ldr	r3, [r7, #4]
    5ba4:	2b00      	cmp	r3, #0
    5ba6:	d141      	bne.n	5c2c <_ZN14USBDeviceClass6initEPEmm+0x148>
		usbd.epBank0SetSize(ep, 64);
    5ba8:	68bb      	ldr	r3, [r7, #8]
    5baa:	b2d9      	uxtb	r1, r3
    5bac:	4b21      	ldr	r3, [pc, #132]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5bae:	2240      	movs	r2, #64	; 0x40
    5bb0:	0018      	movs	r0, r3
    5bb2:	f7fe ff15 	bl	49e0 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5bb6:	68bb      	ldr	r3, [r7, #8]
    5bb8:	b2d9      	uxtb	r1, r3
    5bba:	68bb      	ldr	r3, [r7, #8]
    5bbc:	019a      	lsls	r2, r3, #6
    5bbe:	4b20      	ldr	r3, [pc, #128]	; (5c40 <_ZN14USBDeviceClass6initEPEmm+0x15c>)
    5bc0:	18d2      	adds	r2, r2, r3
    5bc2:	4b1c      	ldr	r3, [pc, #112]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5bc4:	0018      	movs	r0, r3
    5bc6:	f7fe fedf 	bl	4988 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
		usbd.epBank0SetType(ep, 1); // CONTROL OUT / SETUP
    5bca:	68bb      	ldr	r3, [r7, #8]
    5bcc:	b2d9      	uxtb	r1, r3
    5bce:	4b19      	ldr	r3, [pc, #100]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5bd0:	2201      	movs	r2, #1
    5bd2:	0018      	movs	r0, r3
    5bd4:	f7fe fc38 	bl	4448 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>
		usbd.epBank1SetSize(ep, 64);
    5bd8:	68bb      	ldr	r3, [r7, #8]
    5bda:	b2d9      	uxtb	r1, r3
    5bdc:	4b15      	ldr	r3, [pc, #84]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5bde:	2240      	movs	r2, #64	; 0x40
    5be0:	0018      	movs	r0, r3
    5be2:	f7fe ff29 	bl	4a38 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[0]);
    5be6:	68bb      	ldr	r3, [r7, #8]
    5be8:	b2d9      	uxtb	r1, r3
    5bea:	4a13      	ldr	r2, [pc, #76]	; (5c38 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    5bec:	4b11      	ldr	r3, [pc, #68]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5bee:	0018      	movs	r0, r3
    5bf0:	f7fe fee0 	bl	49b4 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetType(ep, 1); // CONTROL IN
    5bf4:	68bb      	ldr	r3, [r7, #8]
    5bf6:	b2d9      	uxtb	r1, r3
    5bf8:	4b0e      	ldr	r3, [pc, #56]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5bfa:	2201      	movs	r2, #1
    5bfc:	0018      	movs	r0, r3
    5bfe:	f7fe fc47 	bl	4490 <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
		usbd.epBank0SetMultiPacketSize(ep, 64);
    5c02:	68bb      	ldr	r3, [r7, #8]
    5c04:	b2d9      	uxtb	r1, r3
    5c06:	4b0b      	ldr	r3, [pc, #44]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5c08:	2240      	movs	r2, #64	; 0x40
    5c0a:	0018      	movs	r0, r3
    5c0c:	f7fe fe72 	bl	48f4 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
		usbd.epBank0SetByteCount(ep, 0);
    5c10:	68bb      	ldr	r3, [r7, #8]
    5c12:	b2d9      	uxtb	r1, r3
    5c14:	4b07      	ldr	r3, [pc, #28]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5c16:	2200      	movs	r2, #0
    5c18:	0018      	movs	r0, r3
    5c1a:	f7fe fe28 	bl	486e <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
		usbd.epBank0SetReady(ep);
    5c1e:	68bb      	ldr	r3, [r7, #8]
    5c20:	b2da      	uxtb	r2, r3
    5c22:	4b04      	ldr	r3, [pc, #16]	; (5c34 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5c24:	0011      	movs	r1, r2
    5c26:	0018      	movs	r0, r3
    5c28:	f7fe fdb3 	bl	4792 <_ZN20USBDevice_SAMD21G18x15epBank0SetReadyEh>
}
    5c2c:	46c0      	nop			; (mov r8, r8)
    5c2e:	46bd      	mov	sp, r7
    5c30:	b005      	add	sp, #20
    5c32:	bd90      	pop	{r4, r7, pc}
    5c34:	20000338 	.word	0x20000338
    5c38:	20000608 	.word	0x20000608
    5c3c:	200007c8 	.word	0x200007c8
    5c40:	20000448 	.word	0x20000448

00005c44 <_ZN14USBDeviceClass5flushEm>:

void USBDeviceClass::flush(uint32_t ep)
{
    5c44:	b580      	push	{r7, lr}
    5c46:	b082      	sub	sp, #8
    5c48:	af00      	add	r7, sp, #0
    5c4a:	6078      	str	r0, [r7, #4]
    5c4c:	6039      	str	r1, [r7, #0]
	if (available(ep)) {
    5c4e:	683a      	ldr	r2, [r7, #0]
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	0011      	movs	r1, r2
    5c54:	0018      	movs	r0, r3
    5c56:	f000 f867 	bl	5d28 <_ZN14USBDeviceClass9availableEm>
    5c5a:	0003      	movs	r3, r0
    5c5c:	1e5a      	subs	r2, r3, #1
    5c5e:	4193      	sbcs	r3, r2
    5c60:	b2db      	uxtb	r3, r3
    5c62:	2b00      	cmp	r3, #0
    5c64:	d00d      	beq.n	5c82 <_ZN14USBDeviceClass5flushEm+0x3e>
		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    5c66:	683b      	ldr	r3, [r7, #0]
    5c68:	b2da      	uxtb	r2, r3
    5c6a:	4b08      	ldr	r3, [pc, #32]	; (5c8c <_ZN14USBDeviceClass5flushEm+0x48>)
    5c6c:	0011      	movs	r1, r2
    5c6e:	0018      	movs	r0, r3
    5c70:	f7fe fda5 	bl	47be <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    5c74:	683b      	ldr	r3, [r7, #0]
    5c76:	b2da      	uxtb	r2, r3
    5c78:	4b04      	ldr	r3, [pc, #16]	; (5c8c <_ZN14USBDeviceClass5flushEm+0x48>)
    5c7a:	0011      	movs	r1, r2
    5c7c:	0018      	movs	r0, r3
    5c7e:	f7fe fccf 	bl	4620 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
}
    5c82:	46c0      	nop			; (mov r8, r8)
    5c84:	46bd      	mov	sp, r7
    5c86:	b002      	add	sp, #8
    5c88:	bd80      	pop	{r7, pc}
    5c8a:	46c0      	nop			; (mov r8, r8)
    5c8c:	20000338 	.word	0x20000338

00005c90 <_ZN14USBDeviceClass5stallEm>:

void USBDeviceClass::stall(uint32_t ep)
{
    5c90:	b580      	push	{r7, lr}
    5c92:	b082      	sub	sp, #8
    5c94:	af00      	add	r7, sp, #0
    5c96:	6078      	str	r0, [r7, #4]
    5c98:	6039      	str	r1, [r7, #0]
	// TODO: test
	// TODO: use .bit. notation

	// Stall endpoint
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    5c9a:	4a06      	ldr	r2, [pc, #24]	; (5cb4 <_ZN14USBDeviceClass5stallEm+0x24>)
    5c9c:	683b      	ldr	r3, [r7, #0]
    5c9e:	3308      	adds	r3, #8
    5ca0:	015b      	lsls	r3, r3, #5
    5ca2:	18d3      	adds	r3, r2, r3
    5ca4:	3305      	adds	r3, #5
    5ca6:	2220      	movs	r2, #32
    5ca8:	701a      	strb	r2, [r3, #0]
}
    5caa:	46c0      	nop			; (mov r8, r8)
    5cac:	46bd      	mov	sp, r7
    5cae:	b002      	add	sp, #8
    5cb0:	bd80      	pop	{r7, pc}
    5cb2:	46c0      	nop			; (mov r8, r8)
    5cb4:	41005000 	.word	0x41005000

00005cb8 <_ZN14USBDeviceClass11recvControlEPvm>:
	return f != USB->DEVICE.FNUM.bit.FNUM;
}


uint32_t USBDeviceClass::recvControl(void *_data, uint32_t len)
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	b088      	sub	sp, #32
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	60f8      	str	r0, [r7, #12]
    5cc0:	60b9      	str	r1, [r7, #8]
    5cc2:	607a      	str	r2, [r7, #4]
	uint8_t *data = reinterpret_cast<uint8_t *>(_data);
    5cc4:	68bb      	ldr	r3, [r7, #8]
    5cc6:	617b      	str	r3, [r7, #20]

	// The RAM Buffer is empty: we can receive data
	usbd.epBank0ResetReady(0);
    5cc8:	4b15      	ldr	r3, [pc, #84]	; (5d20 <_ZN14USBDeviceClass11recvControlEPvm+0x68>)
    5cca:	2100      	movs	r1, #0
    5ccc:	0018      	movs	r0, r3
    5cce:	f7fe fd8d 	bl	47ec <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

	//usbd.epBank0AckSetupReceived(0);
	uint32_t read = armRecvCtrlOUT(0);
    5cd2:	68fb      	ldr	r3, [r7, #12]
    5cd4:	2100      	movs	r1, #0
    5cd6:	0018      	movs	r0, r3
    5cd8:	f000 f904 	bl	5ee4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    5cdc:	0003      	movs	r3, r0
    5cde:	61fb      	str	r3, [r7, #28]
	if (read > len)
    5ce0:	69fa      	ldr	r2, [r7, #28]
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	429a      	cmp	r2, r3
    5ce6:	d901      	bls.n	5cec <_ZN14USBDeviceClass11recvControlEPvm+0x34>
		read = len;
    5ce8:	687b      	ldr	r3, [r7, #4]
    5cea:	61fb      	str	r3, [r7, #28]
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
    5cec:	4b0d      	ldr	r3, [pc, #52]	; (5d24 <_ZN14USBDeviceClass11recvControlEPvm+0x6c>)
    5cee:	613b      	str	r3, [r7, #16]
	for (uint32_t i=0; i<len; i++) {
    5cf0:	2300      	movs	r3, #0
    5cf2:	61bb      	str	r3, [r7, #24]
    5cf4:	69ba      	ldr	r2, [r7, #24]
    5cf6:	687b      	ldr	r3, [r7, #4]
    5cf8:	429a      	cmp	r2, r3
    5cfa:	d20b      	bcs.n	5d14 <_ZN14USBDeviceClass11recvControlEPvm+0x5c>
		data[i] = buffer[i];
    5cfc:	697a      	ldr	r2, [r7, #20]
    5cfe:	69bb      	ldr	r3, [r7, #24]
    5d00:	18d3      	adds	r3, r2, r3
    5d02:	6939      	ldr	r1, [r7, #16]
    5d04:	69ba      	ldr	r2, [r7, #24]
    5d06:	188a      	adds	r2, r1, r2
    5d08:	7812      	ldrb	r2, [r2, #0]
    5d0a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i<len; i++) {
    5d0c:	69bb      	ldr	r3, [r7, #24]
    5d0e:	3301      	adds	r3, #1
    5d10:	61bb      	str	r3, [r7, #24]
    5d12:	e7ef      	b.n	5cf4 <_ZN14USBDeviceClass11recvControlEPvm+0x3c>
	}

	return read;
    5d14:	69fb      	ldr	r3, [r7, #28]
}
    5d16:	0018      	movs	r0, r3
    5d18:	46bd      	mov	sp, r7
    5d1a:	b008      	add	sp, #32
    5d1c:	bd80      	pop	{r7, pc}
    5d1e:	46c0      	nop			; (mov r8, r8)
    5d20:	20000338 	.word	0x20000338
    5d24:	20000448 	.word	0x20000448

00005d28 <_ZN14USBDeviceClass9availableEm>:

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
    5d28:	b580      	push	{r7, lr}
    5d2a:	b082      	sub	sp, #8
    5d2c:	af00      	add	r7, sp, #0
    5d2e:	6078      	str	r0, [r7, #4]
    5d30:	6039      	str	r1, [r7, #0]
	if (epHandlers[ep]) {
    5d32:	4b10      	ldr	r3, [pc, #64]	; (5d74 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5d34:	683a      	ldr	r2, [r7, #0]
    5d36:	0092      	lsls	r2, r2, #2
    5d38:	58d3      	ldr	r3, [r2, r3]
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	d00e      	beq.n	5d5c <_ZN14USBDeviceClass9availableEm+0x34>
		return epHandlers[ep]->available();
    5d3e:	4b0d      	ldr	r3, [pc, #52]	; (5d74 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5d40:	683a      	ldr	r2, [r7, #0]
    5d42:	0092      	lsls	r2, r2, #2
    5d44:	58d3      	ldr	r3, [r2, r3]
    5d46:	681b      	ldr	r3, [r3, #0]
    5d48:	3308      	adds	r3, #8
    5d4a:	681b      	ldr	r3, [r3, #0]
    5d4c:	4a09      	ldr	r2, [pc, #36]	; (5d74 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5d4e:	6839      	ldr	r1, [r7, #0]
    5d50:	0089      	lsls	r1, r1, #2
    5d52:	588a      	ldr	r2, [r1, r2]
    5d54:	0010      	movs	r0, r2
    5d56:	4798      	blx	r3
    5d58:	0003      	movs	r3, r0
    5d5a:	e007      	b.n	5d6c <_ZN14USBDeviceClass9availableEm+0x44>
	} else {
		return usbd.epBank0ByteCount(ep);
    5d5c:	683b      	ldr	r3, [r7, #0]
    5d5e:	b2da      	uxtb	r2, r3
    5d60:	4b05      	ldr	r3, [pc, #20]	; (5d78 <_ZN14USBDeviceClass9availableEm+0x50>)
    5d62:	0011      	movs	r1, r2
    5d64:	0018      	movs	r0, r3
    5d66:	f7fe fd6e 	bl	4846 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5d6a:	0003      	movs	r3, r0
	}
}
    5d6c:	0018      	movs	r0, r3
    5d6e:	46bd      	mov	sp, r7
    5d70:	b002      	add	sp, #8
    5d72:	bd80      	pop	{r7, pc}
    5d74:	200007c8 	.word	0x200007c8
    5d78:	20000338 	.word	0x20000338

00005d7c <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    5d7c:	b580      	push	{r7, lr}
    5d7e:	b084      	sub	sp, #16
    5d80:	af00      	add	r7, sp, #0
    5d82:	60f8      	str	r0, [r7, #12]
    5d84:	60b9      	str	r1, [r7, #8]
    5d86:	607a      	str	r2, [r7, #4]
    5d88:	603b      	str	r3, [r7, #0]
	if (!_usbConfiguration)
    5d8a:	4b42      	ldr	r3, [pc, #264]	; (5e94 <_ZN14USBDeviceClass4recvEmPvm+0x118>)
    5d8c:	681b      	ldr	r3, [r3, #0]
    5d8e:	425a      	negs	r2, r3
    5d90:	4153      	adcs	r3, r2
    5d92:	b2db      	uxtb	r3, r3
    5d94:	2b00      	cmp	r3, #0
    5d96:	d002      	beq.n	5d9e <_ZN14USBDeviceClass4recvEmPvm+0x22>
		return -1;
    5d98:	2301      	movs	r3, #1
    5d9a:	425b      	negs	r3, r3
    5d9c:	e076      	b.n	5e8c <_ZN14USBDeviceClass4recvEmPvm+0x110>

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    5d9e:	4b3e      	ldr	r3, [pc, #248]	; (5e98 <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
    5da0:	781b      	ldrb	r3, [r3, #0]
    5da2:	b2db      	uxtb	r3, r3
    5da4:	425a      	negs	r2, r3
    5da6:	4153      	adcs	r3, r2
    5da8:	b2db      	uxtb	r3, r3
    5daa:	2b00      	cmp	r3, #0
    5dac:	d003      	beq.n	5db6 <_ZN14USBDeviceClass4recvEmPvm+0x3a>
		digitalWrite(PIN_LED_RXL, LOW);
    5dae:	2100      	movs	r1, #0
    5db0:	201e      	movs	r0, #30
    5db2:	f000 ff83 	bl	6cbc <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    5db6:	4b38      	ldr	r3, [pc, #224]	; (5e98 <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
    5db8:	2264      	movs	r2, #100	; 0x64
    5dba:	701a      	strb	r2, [r3, #0]
#endif

	if (epHandlers[ep]) {
    5dbc:	4b37      	ldr	r3, [pc, #220]	; (5e9c <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5dbe:	68ba      	ldr	r2, [r7, #8]
    5dc0:	0092      	lsls	r2, r2, #2
    5dc2:	58d3      	ldr	r3, [r2, r3]
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d00f      	beq.n	5de8 <_ZN14USBDeviceClass4recvEmPvm+0x6c>
		return epHandlers[ep]->recv(_data, len);
    5dc8:	4b34      	ldr	r3, [pc, #208]	; (5e9c <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5dca:	68ba      	ldr	r2, [r7, #8]
    5dcc:	0092      	lsls	r2, r2, #2
    5dce:	58d3      	ldr	r3, [r2, r3]
    5dd0:	681b      	ldr	r3, [r3, #0]
    5dd2:	3304      	adds	r3, #4
    5dd4:	681b      	ldr	r3, [r3, #0]
    5dd6:	4a31      	ldr	r2, [pc, #196]	; (5e9c <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5dd8:	68b9      	ldr	r1, [r7, #8]
    5dda:	0089      	lsls	r1, r1, #2
    5ddc:	5888      	ldr	r0, [r1, r2]
    5dde:	683a      	ldr	r2, [r7, #0]
    5de0:	6879      	ldr	r1, [r7, #4]
    5de2:	4798      	blx	r3
    5de4:	0003      	movs	r3, r0
    5de6:	e051      	b.n	5e8c <_ZN14USBDeviceClass4recvEmPvm+0x110>
	}

	if (available(ep) < len)
    5de8:	68ba      	ldr	r2, [r7, #8]
    5dea:	68fb      	ldr	r3, [r7, #12]
    5dec:	0011      	movs	r1, r2
    5dee:	0018      	movs	r0, r3
    5df0:	f7ff ff9a 	bl	5d28 <_ZN14USBDeviceClass9availableEm>
    5df4:	0002      	movs	r2, r0
    5df6:	683b      	ldr	r3, [r7, #0]
    5df8:	429a      	cmp	r2, r3
    5dfa:	419b      	sbcs	r3, r3
    5dfc:	425b      	negs	r3, r3
    5dfe:	b2db      	uxtb	r3, r3
    5e00:	2b00      	cmp	r3, #0
    5e02:	d007      	beq.n	5e14 <_ZN14USBDeviceClass4recvEmPvm+0x98>
		len = available(ep);
    5e04:	68ba      	ldr	r2, [r7, #8]
    5e06:	68fb      	ldr	r3, [r7, #12]
    5e08:	0011      	movs	r1, r2
    5e0a:	0018      	movs	r0, r3
    5e0c:	f7ff ff8c 	bl	5d28 <_ZN14USBDeviceClass9availableEm>
    5e10:	0003      	movs	r3, r0
    5e12:	603b      	str	r3, [r7, #0]

	armRecv(ep);
    5e14:	68ba      	ldr	r2, [r7, #8]
    5e16:	68fb      	ldr	r3, [r7, #12]
    5e18:	0011      	movs	r1, r2
    5e1a:	0018      	movs	r0, r3
    5e1c:	f000 f8b6 	bl	5f8c <_ZN14USBDeviceClass7armRecvEm>

	usbd.epBank0DisableTransferComplete(ep);
    5e20:	68bb      	ldr	r3, [r7, #8]
    5e22:	b2da      	uxtb	r2, r3
    5e24:	4b1e      	ldr	r3, [pc, #120]	; (5ea0 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5e26:	0011      	movs	r1, r2
    5e28:	0018      	movs	r0, r3
    5e2a:	f7fe fc6e 	bl	470a <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>

	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    5e2e:	68bb      	ldr	r3, [r7, #8]
    5e30:	019a      	lsls	r2, r3, #6
    5e32:	4b1c      	ldr	r3, [pc, #112]	; (5ea4 <_ZN14USBDeviceClass4recvEmPvm+0x128>)
    5e34:	18d1      	adds	r1, r2, r3
    5e36:	683a      	ldr	r2, [r7, #0]
    5e38:	687b      	ldr	r3, [r7, #4]
    5e3a:	0018      	movs	r0, r3
    5e3c:	f00a fdfb 	bl	10a36 <memcpy>

	// release empty buffer
	if (len && !available(ep)) {
    5e40:	683b      	ldr	r3, [r7, #0]
    5e42:	2b00      	cmp	r3, #0
    5e44:	d009      	beq.n	5e5a <_ZN14USBDeviceClass4recvEmPvm+0xde>
    5e46:	68ba      	ldr	r2, [r7, #8]
    5e48:	68fb      	ldr	r3, [r7, #12]
    5e4a:	0011      	movs	r1, r2
    5e4c:	0018      	movs	r0, r3
    5e4e:	f7ff ff6b 	bl	5d28 <_ZN14USBDeviceClass9availableEm>
    5e52:	1e03      	subs	r3, r0, #0
    5e54:	d101      	bne.n	5e5a <_ZN14USBDeviceClass4recvEmPvm+0xde>
    5e56:	2301      	movs	r3, #1
    5e58:	e000      	b.n	5e5c <_ZN14USBDeviceClass4recvEmPvm+0xe0>
    5e5a:	2300      	movs	r3, #0
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d014      	beq.n	5e8a <_ZN14USBDeviceClass4recvEmPvm+0x10e>
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(ep);
    5e60:	68bb      	ldr	r3, [r7, #8]
    5e62:	b2da      	uxtb	r2, r3
    5e64:	4b0e      	ldr	r3, [pc, #56]	; (5ea0 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5e66:	0011      	movs	r1, r2
    5e68:	0018      	movs	r0, r3
    5e6a:	f7fe fcbf 	bl	47ec <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		// Clear Transfer complete 0 flag
		usbd.epBank0AckTransferComplete(ep);
    5e6e:	68bb      	ldr	r3, [r7, #8]
    5e70:	b2da      	uxtb	r2, r3
    5e72:	4b0b      	ldr	r3, [pc, #44]	; (5ea0 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5e74:	0011      	movs	r1, r2
    5e76:	0018      	movs	r0, r3
    5e78:	f7fe fbbd 	bl	45f6 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>

		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
    5e7c:	68bb      	ldr	r3, [r7, #8]
    5e7e:	b2da      	uxtb	r2, r3
    5e80:	4b07      	ldr	r3, [pc, #28]	; (5ea0 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5e82:	0011      	movs	r1, r2
    5e84:	0018      	movs	r0, r3
    5e86:	f7fe fbf8 	bl	467a <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
	}

	return len;
    5e8a:	683b      	ldr	r3, [r7, #0]
}
    5e8c:	0018      	movs	r0, r3
    5e8e:	46bd      	mov	sp, r7
    5e90:	b004      	add	sp, #16
    5e92:	bd80      	pop	{r7, pc}
    5e94:	20000440 	.word	0x20000440
    5e98:	2000043d 	.word	0x2000043d
    5e9c:	200007c8 	.word	0x200007c8
    5ea0:	20000338 	.word	0x20000338
    5ea4:	20000448 	.word	0x20000448

00005ea8 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    5ea8:	b580      	push	{r7, lr}
    5eaa:	b084      	sub	sp, #16
    5eac:	af00      	add	r7, sp, #0
    5eae:	6078      	str	r0, [r7, #4]
    5eb0:	6039      	str	r1, [r7, #0]
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    5eb2:	230f      	movs	r3, #15
    5eb4:	18fa      	adds	r2, r7, r3
    5eb6:	6839      	ldr	r1, [r7, #0]
    5eb8:	6878      	ldr	r0, [r7, #4]
    5eba:	2301      	movs	r3, #1
    5ebc:	f7ff ff5e 	bl	5d7c <_ZN14USBDeviceClass4recvEmPvm>
    5ec0:	0003      	movs	r3, r0
    5ec2:	3b01      	subs	r3, #1
    5ec4:	1e5a      	subs	r2, r3, #1
    5ec6:	4193      	sbcs	r3, r2
    5ec8:	b2db      	uxtb	r3, r3
    5eca:	2b00      	cmp	r3, #0
    5ecc:	d002      	beq.n	5ed4 <_ZN14USBDeviceClass4recvEm+0x2c>
		return -1;
    5ece:	2301      	movs	r3, #1
    5ed0:	425b      	negs	r3, r3
    5ed2:	e002      	b.n	5eda <_ZN14USBDeviceClass4recvEm+0x32>
	} else {
		return c;
    5ed4:	230f      	movs	r3, #15
    5ed6:	18fb      	adds	r3, r7, r3
    5ed8:	781b      	ldrb	r3, [r3, #0]
	}
}
    5eda:	0018      	movs	r0, r3
    5edc:	46bd      	mov	sp, r7
    5ede:	b004      	add	sp, #16
    5ee0:	bd80      	pop	{r7, pc}
	...

00005ee4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    5ee4:	b580      	push	{r7, lr}
    5ee6:	b082      	sub	sp, #8
    5ee8:	af00      	add	r7, sp, #0
    5eea:	6078      	str	r0, [r7, #4]
    5eec:	6039      	str	r1, [r7, #0]
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5eee:	683b      	ldr	r3, [r7, #0]
    5ef0:	b2d9      	uxtb	r1, r3
    5ef2:	683b      	ldr	r3, [r7, #0]
    5ef4:	019a      	lsls	r2, r3, #6
    5ef6:	4b23      	ldr	r3, [pc, #140]	; (5f84 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa0>)
    5ef8:	18d2      	adds	r2, r2, r3
    5efa:	4b23      	ldr	r3, [pc, #140]	; (5f88 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5efc:	0018      	movs	r0, r3
    5efe:	f7fe fd43 	bl	4988 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
	usbd.epBank0SetMultiPacketSize(ep, 8);
    5f02:	683b      	ldr	r3, [r7, #0]
    5f04:	b2d9      	uxtb	r1, r3
    5f06:	4b20      	ldr	r3, [pc, #128]	; (5f88 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5f08:	2208      	movs	r2, #8
    5f0a:	0018      	movs	r0, r3
    5f0c:	f7fe fcf2 	bl	48f4 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
	usbd.epBank0SetByteCount(ep, 0);
    5f10:	683b      	ldr	r3, [r7, #0]
    5f12:	b2d9      	uxtb	r1, r3
    5f14:	4b1c      	ldr	r3, [pc, #112]	; (5f88 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5f16:	2200      	movs	r2, #0
    5f18:	0018      	movs	r0, r3
    5f1a:	f7fe fca8 	bl	486e <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>

	usbd.epBank0ResetReady(ep);
    5f1e:	683b      	ldr	r3, [r7, #0]
    5f20:	b2da      	uxtb	r2, r3
    5f22:	4b19      	ldr	r3, [pc, #100]	; (5f88 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5f24:	0011      	movs	r1, r2
    5f26:	0018      	movs	r0, r3
    5f28:	f7fe fc60 	bl	47ec <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	b2da      	uxtb	r2, r3
    5f30:	4b15      	ldr	r3, [pc, #84]	; (5f88 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5f32:	0011      	movs	r1, r2
    5f34:	0018      	movs	r0, r3
    5f36:	f7fe fc00 	bl	473a <_ZN20USBDevice_SAMD21G18x14epBank0IsReadyEh>
    5f3a:	0003      	movs	r3, r0
    5f3c:	001a      	movs	r2, r3
    5f3e:	2301      	movs	r3, #1
    5f40:	4053      	eors	r3, r2
    5f42:	b2db      	uxtb	r3, r3
    5f44:	2b00      	cmp	r3, #0
    5f46:	d000      	beq.n	5f4a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x66>
    5f48:	e7f0      	b.n	5f2c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x48>
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    5f4a:	683b      	ldr	r3, [r7, #0]
    5f4c:	b2da      	uxtb	r2, r3
    5f4e:	4b0e      	ldr	r3, [pc, #56]	; (5f88 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5f50:	0011      	movs	r1, r2
    5f52:	0018      	movs	r0, r3
    5f54:	f7fe faf9 	bl	454a <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    5f58:	0003      	movs	r3, r0
    5f5a:	001a      	movs	r2, r3
    5f5c:	2301      	movs	r3, #1
    5f5e:	4053      	eors	r3, r2
    5f60:	b2db      	uxtb	r3, r3
    5f62:	2b00      	cmp	r3, #0
    5f64:	d000      	beq.n	5f68 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x84>
    5f66:	e7f0      	b.n	5f4a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x66>
	return usbd.epBank0ByteCount(ep);
    5f68:	683b      	ldr	r3, [r7, #0]
    5f6a:	b2da      	uxtb	r2, r3
    5f6c:	4b06      	ldr	r3, [pc, #24]	; (5f88 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5f6e:	0011      	movs	r1, r2
    5f70:	0018      	movs	r0, r3
    5f72:	f7fe fc68 	bl	4846 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5f76:	0003      	movs	r3, r0
    5f78:	b2db      	uxtb	r3, r3
}
    5f7a:	0018      	movs	r0, r3
    5f7c:	46bd      	mov	sp, r7
    5f7e:	b002      	add	sp, #8
    5f80:	bd80      	pop	{r7, pc}
    5f82:	46c0      	nop			; (mov r8, r8)
    5f84:	20000448 	.word	0x20000448
    5f88:	20000338 	.word	0x20000338

00005f8c <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    5f8c:	b590      	push	{r4, r7, lr}
    5f8e:	b085      	sub	sp, #20
    5f90:	af00      	add	r7, sp, #0
    5f92:	6078      	str	r0, [r7, #4]
    5f94:	6039      	str	r1, [r7, #0]
	uint16_t count = usbd.epBank0ByteCount(ep);
    5f96:	683b      	ldr	r3, [r7, #0]
    5f98:	b2da      	uxtb	r2, r3
    5f9a:	230e      	movs	r3, #14
    5f9c:	18fc      	adds	r4, r7, r3
    5f9e:	4b16      	ldr	r3, [pc, #88]	; (5ff8 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5fa0:	0011      	movs	r1, r2
    5fa2:	0018      	movs	r0, r3
    5fa4:	f7fe fc4f 	bl	4846 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5fa8:	0003      	movs	r3, r0
    5faa:	8023      	strh	r3, [r4, #0]
	if (count >= 64) {
    5fac:	230e      	movs	r3, #14
    5fae:	18fb      	adds	r3, r7, r3
    5fb0:	881b      	ldrh	r3, [r3, #0]
    5fb2:	2b3f      	cmp	r3, #63	; 0x3f
    5fb4:	dd0b      	ble.n	5fce <_ZN14USBDeviceClass7armRecvEm+0x42>
		usbd.epBank0SetByteCount(ep, count - 64);
    5fb6:	683b      	ldr	r3, [r7, #0]
    5fb8:	b2d9      	uxtb	r1, r3
    5fba:	230e      	movs	r3, #14
    5fbc:	18fb      	adds	r3, r7, r3
    5fbe:	881b      	ldrh	r3, [r3, #0]
    5fc0:	3b40      	subs	r3, #64	; 0x40
    5fc2:	b29a      	uxth	r2, r3
    5fc4:	4b0c      	ldr	r3, [pc, #48]	; (5ff8 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5fc6:	0018      	movs	r0, r3
    5fc8:	f7fe fc51 	bl	486e <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
    5fcc:	e006      	b.n	5fdc <_ZN14USBDeviceClass7armRecvEm+0x50>
	} else {
		usbd.epBank0SetByteCount(ep, 0);
    5fce:	683b      	ldr	r3, [r7, #0]
    5fd0:	b2d9      	uxtb	r1, r3
    5fd2:	4b09      	ldr	r3, [pc, #36]	; (5ff8 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5fd4:	2200      	movs	r2, #0
    5fd6:	0018      	movs	r0, r3
    5fd8:	f7fe fc49 	bl	486e <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
	}
	return usbd.epBank0ByteCount(ep);
    5fdc:	683b      	ldr	r3, [r7, #0]
    5fde:	b2da      	uxtb	r2, r3
    5fe0:	4b05      	ldr	r3, [pc, #20]	; (5ff8 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5fe2:	0011      	movs	r1, r2
    5fe4:	0018      	movs	r0, r3
    5fe6:	f7fe fc2e 	bl	4846 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5fea:	0003      	movs	r3, r0
    5fec:	b2db      	uxtb	r3, r3
}
    5fee:	0018      	movs	r0, r3
    5ff0:	46bd      	mov	sp, r7
    5ff2:	b005      	add	sp, #20
    5ff4:	bd90      	pop	{r4, r7, pc}
    5ff6:	46c0      	nop			; (mov r8, r8)
    5ff8:	20000338 	.word	0x20000338

00005ffc <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    5ffc:	b580      	push	{r7, lr}
    5ffe:	b088      	sub	sp, #32
    6000:	af00      	add	r7, sp, #0
    6002:	60f8      	str	r0, [r7, #12]
    6004:	60b9      	str	r1, [r7, #8]
    6006:	607a      	str	r2, [r7, #4]
    6008:	603b      	str	r3, [r7, #0]
	uint32_t written = 0;
    600a:	2300      	movs	r3, #0
    600c:	61fb      	str	r3, [r7, #28]
	uint32_t length = 0;
    600e:	2300      	movs	r3, #0
    6010:	61bb      	str	r3, [r7, #24]

	if (!_usbConfiguration)
    6012:	4b59      	ldr	r3, [pc, #356]	; (6178 <_ZN14USBDeviceClass4sendEmPKvm+0x17c>)
    6014:	681b      	ldr	r3, [r3, #0]
    6016:	425a      	negs	r2, r3
    6018:	4153      	adcs	r3, r2
    601a:	b2db      	uxtb	r3, r3
    601c:	2b00      	cmp	r3, #0
    601e:	d002      	beq.n	6026 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		return -1;
    6020:	2301      	movs	r3, #1
    6022:	425b      	negs	r3, r3
    6024:	e0a4      	b.n	6170 <_ZN14USBDeviceClass4sendEmPKvm+0x174>
	if (len > 16384)
    6026:	683a      	ldr	r2, [r7, #0]
    6028:	2380      	movs	r3, #128	; 0x80
    602a:	01db      	lsls	r3, r3, #7
    602c:	429a      	cmp	r2, r3
    602e:	d902      	bls.n	6036 <_ZN14USBDeviceClass4sendEmPKvm+0x3a>
		return -1;
    6030:	2301      	movs	r3, #1
    6032:	425b      	negs	r3, r3
    6034:	e09c      	b.n	6170 <_ZN14USBDeviceClass4sendEmPKvm+0x174>

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    6036:	4b51      	ldr	r3, [pc, #324]	; (617c <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    6038:	781b      	ldrb	r3, [r3, #0]
    603a:	b2db      	uxtb	r3, r3
    603c:	425a      	negs	r2, r3
    603e:	4153      	adcs	r3, r2
    6040:	b2db      	uxtb	r3, r3
    6042:	2b00      	cmp	r3, #0
    6044:	d003      	beq.n	604e <_ZN14USBDeviceClass4sendEmPKvm+0x52>
		digitalWrite(PIN_LED_TXL, LOW);
    6046:	2100      	movs	r1, #0
    6048:	201f      	movs	r0, #31
    604a:	f000 fe37 	bl	6cbc <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    604e:	4b4b      	ldr	r3, [pc, #300]	; (617c <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    6050:	2264      	movs	r2, #100	; 0x64
    6052:	701a      	strb	r2, [r3, #0]
#endif

	// Flash area
	while (len != 0)
    6054:	683b      	ldr	r3, [r7, #0]
    6056:	2b00      	cmp	r3, #0
    6058:	d100      	bne.n	605c <_ZN14USBDeviceClass4sendEmPKvm+0x60>
    605a:	e088      	b.n	616e <_ZN14USBDeviceClass4sendEmPKvm+0x172>
	{
		if (usbd.epBank1IsReady(ep)) {
    605c:	68bb      	ldr	r3, [r7, #8]
    605e:	b2da      	uxtb	r2, r3
    6060:	4b47      	ldr	r3, [pc, #284]	; (6180 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    6062:	0011      	movs	r1, r2
    6064:	0018      	movs	r0, r3
    6066:	f7fe fb7e 	bl	4766 <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>
    606a:	1e03      	subs	r3, r0, #0
    606c:	d03c      	beq.n	60e8 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
			// previous transfer is still not complete

			// convert the timeout from microseconds to a number of times through
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    606e:	4b45      	ldr	r3, [pc, #276]	; (6184 <_ZN14USBDeviceClass4sendEmPKvm+0x188>)
    6070:	681b      	ldr	r3, [r3, #0]
    6072:	4945      	ldr	r1, [pc, #276]	; (6188 <_ZN14USBDeviceClass4sendEmPKvm+0x18c>)
    6074:	0018      	movs	r0, r3
    6076:	f008 fd11 	bl	ea9c <__udivsi3>
    607a:	0003      	movs	r3, r0
    607c:	001a      	movs	r2, r3
    607e:	4b43      	ldr	r3, [pc, #268]	; (618c <_ZN14USBDeviceClass4sendEmPKvm+0x190>)
    6080:	4353      	muls	r3, r2
    6082:	2117      	movs	r1, #23
    6084:	0018      	movs	r0, r3
    6086:	f008 fd09 	bl	ea9c <__udivsi3>
    608a:	0003      	movs	r3, r0
    608c:	617b      	str	r3, [r7, #20]

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
    608e:	68bb      	ldr	r3, [r7, #8]
    6090:	b2da      	uxtb	r2, r3
    6092:	4b3b      	ldr	r3, [pc, #236]	; (6180 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    6094:	0011      	movs	r1, r2
    6096:	0018      	movs	r0, r3
    6098:	f7fe fa6d 	bl	4576 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    609c:	0003      	movs	r3, r0
    609e:	001a      	movs	r2, r3
    60a0:	2301      	movs	r3, #1
    60a2:	4053      	eors	r3, r2
    60a4:	b2db      	uxtb	r3, r3
    60a6:	2b00      	cmp	r3, #0
    60a8:	d01e      	beq.n	60e8 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    60aa:	4a39      	ldr	r2, [pc, #228]	; (6190 <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    60ac:	68bb      	ldr	r3, [r7, #8]
    60ae:	18d3      	adds	r3, r2, r3
    60b0:	781b      	ldrb	r3, [r3, #0]
    60b2:	2b00      	cmp	r3, #0
    60b4:	d104      	bne.n	60c0 <_ZN14USBDeviceClass4sendEmPKvm+0xc4>
    60b6:	697b      	ldr	r3, [r7, #20]
    60b8:	1e5a      	subs	r2, r3, #1
    60ba:	617a      	str	r2, [r7, #20]
    60bc:	2b00      	cmp	r3, #0
    60be:	d101      	bne.n	60c4 <_ZN14USBDeviceClass4sendEmPKvm+0xc8>
    60c0:	2301      	movs	r3, #1
    60c2:	e000      	b.n	60c6 <_ZN14USBDeviceClass4sendEmPKvm+0xca>
    60c4:	2300      	movs	r3, #0
    60c6:	2b00      	cmp	r3, #0
    60c8:	d0e1      	beq.n	608e <_ZN14USBDeviceClass4sendEmPKvm+0x92>
					LastTransmitTimedOut[ep] = 1;
    60ca:	4a31      	ldr	r2, [pc, #196]	; (6190 <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    60cc:	68bb      	ldr	r3, [r7, #8]
    60ce:	18d3      	adds	r3, r2, r3
    60d0:	2201      	movs	r2, #1
    60d2:	701a      	strb	r2, [r3, #0]

					// set byte count to zero, so that ZLP is sent
					// instead of stale data
					usbd.epBank1SetByteCount(ep, 0);
    60d4:	68bb      	ldr	r3, [r7, #8]
    60d6:	b2d9      	uxtb	r1, r3
    60d8:	4b29      	ldr	r3, [pc, #164]	; (6180 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    60da:	2200      	movs	r2, #0
    60dc:	0018      	movs	r0, r3
    60de:	f7fe fbe7 	bl	48b0 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
					return -1;
    60e2:	2301      	movs	r3, #1
    60e4:	425b      	negs	r3, r3
    60e6:	e043      	b.n	6170 <_ZN14USBDeviceClass4sendEmPKvm+0x174>
				}
			}
		}

		LastTransmitTimedOut[ep] = 0;
    60e8:	4a29      	ldr	r2, [pc, #164]	; (6190 <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    60ea:	68bb      	ldr	r3, [r7, #8]
    60ec:	18d3      	adds	r3, r2, r3
    60ee:	2200      	movs	r2, #0
    60f0:	701a      	strb	r2, [r3, #0]

		if (len >= EPX_SIZE) {
    60f2:	683b      	ldr	r3, [r7, #0]
    60f4:	2b3f      	cmp	r3, #63	; 0x3f
    60f6:	d902      	bls.n	60fe <_ZN14USBDeviceClass4sendEmPKvm+0x102>
			length = EPX_SIZE - 1;
    60f8:	233f      	movs	r3, #63	; 0x3f
    60fa:	61bb      	str	r3, [r7, #24]
    60fc:	e001      	b.n	6102 <_ZN14USBDeviceClass4sendEmPKvm+0x106>
		} else {
			length = len;
    60fe:	683b      	ldr	r3, [r7, #0]
    6100:	61bb      	str	r3, [r7, #24]
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    6102:	68bb      	ldr	r3, [r7, #8]
    6104:	019a      	lsls	r2, r3, #6
    6106:	4b23      	ldr	r3, [pc, #140]	; (6194 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    6108:	18d3      	adds	r3, r2, r3
    610a:	69ba      	ldr	r2, [r7, #24]
    610c:	6879      	ldr	r1, [r7, #4]
    610e:	0018      	movs	r0, r3
    6110:	f00a fc91 	bl	10a36 <memcpy>

		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    6114:	68bb      	ldr	r3, [r7, #8]
    6116:	b2d9      	uxtb	r1, r3
    6118:	68bb      	ldr	r3, [r7, #8]
    611a:	019a      	lsls	r2, r3, #6
    611c:	4b1d      	ldr	r3, [pc, #116]	; (6194 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    611e:	18d2      	adds	r2, r2, r3
    6120:	4b17      	ldr	r3, [pc, #92]	; (6180 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    6122:	0018      	movs	r0, r3
    6124:	f7fe fc46 	bl	49b4 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetByteCount(ep, length);
    6128:	68bb      	ldr	r3, [r7, #8]
    612a:	b2d9      	uxtb	r1, r3
    612c:	69bb      	ldr	r3, [r7, #24]
    612e:	b29a      	uxth	r2, r3
    6130:	4b13      	ldr	r3, [pc, #76]	; (6180 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    6132:	0018      	movs	r0, r3
    6134:	f7fe fbbc 	bl	48b0 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

		// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    6138:	68bb      	ldr	r3, [r7, #8]
    613a:	b2da      	uxtb	r2, r3
    613c:	4b10      	ldr	r3, [pc, #64]	; (6180 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    613e:	0011      	movs	r1, r2
    6140:	0018      	movs	r0, r3
    6142:	f7fe fa6d 	bl	4620 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    6146:	68bb      	ldr	r3, [r7, #8]
    6148:	b2da      	uxtb	r2, r3
    614a:	4b0d      	ldr	r3, [pc, #52]	; (6180 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    614c:	0011      	movs	r1, r2
    614e:	0018      	movs	r0, r3
    6150:	f7fe fb35 	bl	47be <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

		written += length;
    6154:	69fa      	ldr	r2, [r7, #28]
    6156:	69bb      	ldr	r3, [r7, #24]
    6158:	18d3      	adds	r3, r2, r3
    615a:	61fb      	str	r3, [r7, #28]
		len -= length;
    615c:	683a      	ldr	r2, [r7, #0]
    615e:	69bb      	ldr	r3, [r7, #24]
    6160:	1ad3      	subs	r3, r2, r3
    6162:	603b      	str	r3, [r7, #0]
		data = (char *)data + length;
    6164:	687a      	ldr	r2, [r7, #4]
    6166:	69bb      	ldr	r3, [r7, #24]
    6168:	18d3      	adds	r3, r2, r3
    616a:	607b      	str	r3, [r7, #4]
	while (len != 0)
    616c:	e772      	b.n	6054 <_ZN14USBDeviceClass4sendEmPKvm+0x58>
	}
	return written;
    616e:	69fb      	ldr	r3, [r7, #28]
}
    6170:	0018      	movs	r0, r3
    6172:	46bd      	mov	sp, r7
    6174:	b008      	add	sp, #32
    6176:	bd80      	pop	{r7, pc}
    6178:	20000440 	.word	0x20000440
    617c:	2000043c 	.word	0x2000043c
    6180:	20000338 	.word	0x20000338
    6184:	20000048 	.word	0x20000048
    6188:	000f4240 	.word	0x000f4240
    618c:	00011170 	.word	0x00011170
    6190:	200008e8 	.word	0x200008e8
    6194:	20000608 	.word	0x20000608

00006198 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    6198:	b580      	push	{r7, lr}
    619a:	b084      	sub	sp, #16
    619c:	af00      	add	r7, sp, #0
    619e:	60f8      	str	r0, [r7, #12]
    61a0:	60b9      	str	r1, [r7, #8]
    61a2:	607a      	str	r2, [r7, #4]
    61a4:	603b      	str	r3, [r7, #0]
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    61a6:	68bb      	ldr	r3, [r7, #8]
    61a8:	019a      	lsls	r2, r3, #6
    61aa:	4b12      	ldr	r3, [pc, #72]	; (61f4 <_ZN14USBDeviceClass7armSendEmPKvm+0x5c>)
    61ac:	18d3      	adds	r3, r2, r3
    61ae:	683a      	ldr	r2, [r7, #0]
    61b0:	6879      	ldr	r1, [r7, #4]
    61b2:	0018      	movs	r0, r3
    61b4:	f00a fc3f 	bl	10a36 <memcpy>

	// Get endpoint configuration from setting register
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    61b8:	68bb      	ldr	r3, [r7, #8]
    61ba:	b2d9      	uxtb	r1, r3
    61bc:	68bb      	ldr	r3, [r7, #8]
    61be:	019a      	lsls	r2, r3, #6
    61c0:	4b0c      	ldr	r3, [pc, #48]	; (61f4 <_ZN14USBDeviceClass7armSendEmPKvm+0x5c>)
    61c2:	18d2      	adds	r2, r2, r3
    61c4:	4b0c      	ldr	r3, [pc, #48]	; (61f8 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    61c6:	0018      	movs	r0, r3
    61c8:	f7fe fbf4 	bl	49b4 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
	usbd.epBank1SetMultiPacketSize(ep, 0);
    61cc:	68bb      	ldr	r3, [r7, #8]
    61ce:	b2d9      	uxtb	r1, r3
    61d0:	4b09      	ldr	r3, [pc, #36]	; (61f8 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    61d2:	2200      	movs	r2, #0
    61d4:	0018      	movs	r0, r3
    61d6:	f7fe fbb1 	bl	493c <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht>
	usbd.epBank1SetByteCount(ep, len);
    61da:	68bb      	ldr	r3, [r7, #8]
    61dc:	b2d9      	uxtb	r1, r3
    61de:	683b      	ldr	r3, [r7, #0]
    61e0:	b29a      	uxth	r2, r3
    61e2:	4b05      	ldr	r3, [pc, #20]	; (61f8 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    61e4:	0018      	movs	r0, r3
    61e6:	f7fe fb63 	bl	48b0 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

	return len;
    61ea:	683b      	ldr	r3, [r7, #0]
}
    61ec:	0018      	movs	r0, r3
    61ee:	46bd      	mov	sp, r7
    61f0:	b004      	add	sp, #16
    61f2:	bd80      	pop	{r7, pc}
    61f4:	20000608 	.word	0x20000608
    61f8:	20000338 	.word	0x20000338

000061fc <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    61fc:	b580      	push	{r7, lr}
    61fe:	b088      	sub	sp, #32
    6200:	af00      	add	r7, sp, #0
    6202:	60f8      	str	r0, [r7, #12]
    6204:	60b9      	str	r1, [r7, #8]
    6206:	607a      	str	r2, [r7, #4]
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
    6208:	68bb      	ldr	r3, [r7, #8]
    620a:	61bb      	str	r3, [r7, #24]
	uint32_t length = len;
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	617b      	str	r3, [r7, #20]
	uint32_t sent = 0;
    6210:	2300      	movs	r3, #0
    6212:	613b      	str	r3, [r7, #16]
	uint32_t pos = 0;
    6214:	2300      	movs	r3, #0
    6216:	61fb      	str	r3, [r7, #28]

	if (_dry_run == true)
    6218:	4b1c      	ldr	r3, [pc, #112]	; (628c <_ZN14USBDeviceClass11sendControlEPKvm+0x90>)
    621a:	781b      	ldrb	r3, [r3, #0]
    621c:	2b00      	cmp	r3, #0
    621e:	d001      	beq.n	6224 <_ZN14USBDeviceClass11sendControlEPKvm+0x28>
		return length;
    6220:	697b      	ldr	r3, [r7, #20]
    6222:	e02e      	b.n	6282 <_ZN14USBDeviceClass11sendControlEPKvm+0x86>

	if (_pack_message == true) {
    6224:	4b1a      	ldr	r3, [pc, #104]	; (6290 <_ZN14USBDeviceClass11sendControlEPKvm+0x94>)
    6226:	781b      	ldrb	r3, [r3, #0]
    6228:	2b00      	cmp	r3, #0
    622a:	d013      	beq.n	6254 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>
		memcpy(&_pack_buffer[_pack_size], data, len);
    622c:	4b19      	ldr	r3, [pc, #100]	; (6294 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    622e:	881b      	ldrh	r3, [r3, #0]
    6230:	001a      	movs	r2, r3
    6232:	4b19      	ldr	r3, [pc, #100]	; (6298 <_ZN14USBDeviceClass11sendControlEPKvm+0x9c>)
    6234:	18d3      	adds	r3, r2, r3
    6236:	687a      	ldr	r2, [r7, #4]
    6238:	69b9      	ldr	r1, [r7, #24]
    623a:	0018      	movs	r0, r3
    623c:	f00a fbfb 	bl	10a36 <memcpy>
		_pack_size += len;
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	b29a      	uxth	r2, r3
    6244:	4b13      	ldr	r3, [pc, #76]	; (6294 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    6246:	881b      	ldrh	r3, [r3, #0]
    6248:	18d3      	adds	r3, r2, r3
    624a:	b29a      	uxth	r2, r3
    624c:	4b11      	ldr	r3, [pc, #68]	; (6294 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    624e:	801a      	strh	r2, [r3, #0]
		return length;
    6250:	697b      	ldr	r3, [r7, #20]
    6252:	e016      	b.n	6282 <_ZN14USBDeviceClass11sendControlEPKvm+0x86>
	}

 	while (len > 0)
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	2b00      	cmp	r3, #0
    6258:	d012      	beq.n	6280 <_ZN14USBDeviceClass11sendControlEPKvm+0x84>
 	{
		sent = armSend(EP0, data + pos, len);
    625a:	69ba      	ldr	r2, [r7, #24]
    625c:	69fb      	ldr	r3, [r7, #28]
    625e:	18d2      	adds	r2, r2, r3
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	68f8      	ldr	r0, [r7, #12]
    6264:	2100      	movs	r1, #0
    6266:	f7ff ff97 	bl	6198 <_ZN14USBDeviceClass7armSendEmPKvm>
    626a:	0003      	movs	r3, r0
    626c:	613b      	str	r3, [r7, #16]
		pos += sent;
    626e:	69fa      	ldr	r2, [r7, #28]
    6270:	693b      	ldr	r3, [r7, #16]
    6272:	18d3      	adds	r3, r2, r3
    6274:	61fb      	str	r3, [r7, #28]
		len -= sent;
    6276:	687a      	ldr	r2, [r7, #4]
    6278:	693b      	ldr	r3, [r7, #16]
    627a:	1ad3      	subs	r3, r2, r3
    627c:	607b      	str	r3, [r7, #4]
 	while (len > 0)
    627e:	e7e9      	b.n	6254 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>
 	}

	return length;
    6280:	697b      	ldr	r3, [r7, #20]
}
    6282:	0018      	movs	r0, r3
    6284:	46bd      	mov	sp, r7
    6286:	b008      	add	sp, #32
    6288:	bd80      	pop	{r7, pc}
    628a:	46c0      	nop			; (mov r8, r8)
    628c:	200007e4 	.word	0x200007e4
    6290:	200007e5 	.word	0x200007e5
    6294:	200007e6 	.word	0x200007e6
    6298:	200007e8 	.word	0x200007e8

0000629c <_ZN14USBDeviceClass7sendZlpEm>:

void USBDeviceClass::sendZlp(uint32_t ep)
{
    629c:	b580      	push	{r7, lr}
    629e:	b082      	sub	sp, #8
    62a0:	af00      	add	r7, sp, #0
    62a2:	6078      	str	r0, [r7, #4]
    62a4:	6039      	str	r1, [r7, #0]
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
    62a6:	683b      	ldr	r3, [r7, #0]
    62a8:	b2d9      	uxtb	r1, r3
    62aa:	4b04      	ldr	r3, [pc, #16]	; (62bc <_ZN14USBDeviceClass7sendZlpEm+0x20>)
    62ac:	2200      	movs	r2, #0
    62ae:	0018      	movs	r0, r3
    62b0:	f7fe fafe 	bl	48b0 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
}
    62b4:	46c0      	nop			; (mov r8, r8)
    62b6:	46bd      	mov	sp, r7
    62b8:	b002      	add	sp, #8
    62ba:	bd80      	pop	{r7, pc}
    62bc:	20000338 	.word	0x20000338

000062c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    62c0:	b580      	push	{r7, lr}
    62c2:	b086      	sub	sp, #24
    62c4:	af00      	add	r7, sp, #0
    62c6:	6078      	str	r0, [r7, #4]
    62c8:	6039      	str	r1, [r7, #0]
	switch (setup.bRequest) {
    62ca:	683b      	ldr	r3, [r7, #0]
    62cc:	785b      	ldrb	r3, [r3, #1]
    62ce:	2b0b      	cmp	r3, #11
    62d0:	d900      	bls.n	62d4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x14>
    62d2:	e0cd      	b.n	6470 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b0>
    62d4:	009a      	lsls	r2, r3, #2
    62d6:	4b69      	ldr	r3, [pc, #420]	; (647c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1bc>)
    62d8:	18d3      	adds	r3, r2, r3
    62da:	681b      	ldr	r3, [r3, #0]
    62dc:	469f      	mov	pc, r3
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    62de:	683b      	ldr	r3, [r7, #0]
    62e0:	781b      	ldrb	r3, [r3, #0]
    62e2:	2b00      	cmp	r3, #0
    62e4:	d110      	bne.n	6308 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x48>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
    62e6:	2314      	movs	r3, #20
    62e8:	18fb      	adds	r3, r7, r3
    62ea:	2200      	movs	r2, #0
    62ec:	701a      	strb	r2, [r3, #0]
    62ee:	2314      	movs	r3, #20
    62f0:	18fb      	adds	r3, r7, r3
    62f2:	2200      	movs	r2, #0
    62f4:	705a      	strb	r2, [r3, #1]
			armSend(0, buff, 2);
    62f6:	2314      	movs	r3, #20
    62f8:	18fa      	adds	r2, r7, r3
    62fa:	6878      	ldr	r0, [r7, #4]
    62fc:	2302      	movs	r3, #2
    62fe:	2100      	movs	r1, #0
    6300:	f7ff ff4a 	bl	6198 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    6304:	2301      	movs	r3, #1
    6306:	e0b4      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		// if( setup.bmRequestType == 2 ) // Endpoint:
		else
		{
			// Send the endpoint status
			// Check if the endpoint if currently halted
			uint8_t buff[] = { 0, 0 };
    6308:	2310      	movs	r3, #16
    630a:	18fb      	adds	r3, r7, r3
    630c:	2200      	movs	r2, #0
    630e:	701a      	strb	r2, [r3, #0]
    6310:	2310      	movs	r3, #16
    6312:	18fb      	adds	r3, r7, r3
    6314:	2200      	movs	r2, #0
    6316:	705a      	strb	r2, [r3, #1]
			if (isEndpointHalt == 1)
    6318:	4b59      	ldr	r3, [pc, #356]	; (6480 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    631a:	781b      	ldrb	r3, [r3, #0]
    631c:	2b01      	cmp	r3, #1
    631e:	d103      	bne.n	6328 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x68>
				buff[0] = 1;
    6320:	2310      	movs	r3, #16
    6322:	18fb      	adds	r3, r7, r3
    6324:	2201      	movs	r2, #1
    6326:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 2);
    6328:	2310      	movs	r3, #16
    632a:	18fa      	adds	r2, r7, r3
    632c:	6878      	ldr	r0, [r7, #4]
    632e:	2302      	movs	r3, #2
    6330:	2100      	movs	r1, #0
    6332:	f7ff ff31 	bl	6198 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    6336:	2301      	movs	r3, #1
    6338:	e09b      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case CLEAR_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    633a:	683b      	ldr	r3, [r7, #0]
    633c:	789b      	ldrb	r3, [r3, #2]
    633e:	2b01      	cmp	r3, #1
    6340:	d118      	bne.n	6374 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xb4>
		{
			// Enable remote wake-up and send a ZLP
			uint8_t buff[] = { 0, 0 };
    6342:	230c      	movs	r3, #12
    6344:	18fb      	adds	r3, r7, r3
    6346:	2200      	movs	r2, #0
    6348:	701a      	strb	r2, [r3, #0]
    634a:	230c      	movs	r3, #12
    634c:	18fb      	adds	r3, r7, r3
    634e:	2200      	movs	r2, #0
    6350:	705a      	strb	r2, [r3, #1]
			if (isRemoteWakeUpEnabled == 1)
    6352:	4b4c      	ldr	r3, [pc, #304]	; (6484 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c4>)
    6354:	781b      	ldrb	r3, [r3, #0]
    6356:	2b01      	cmp	r3, #1
    6358:	d103      	bne.n	6362 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xa2>
				buff[0] = 1;
    635a:	230c      	movs	r3, #12
    635c:	18fb      	adds	r3, r7, r3
    635e:	2201      	movs	r2, #1
    6360:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 2);
    6362:	230c      	movs	r3, #12
    6364:	18fa      	adds	r2, r7, r3
    6366:	6878      	ldr	r0, [r7, #4]
    6368:	2302      	movs	r3, #2
    636a:	2100      	movs	r1, #0
    636c:	f7ff ff14 	bl	6198 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    6370:	2301      	movs	r3, #1
    6372:	e07e      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}
		else // if( setup.wValueL == 0) // ENDPOINTHALT
		{
			isEndpointHalt = 0;
    6374:	4b42      	ldr	r3, [pc, #264]	; (6480 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    6376:	2200      	movs	r2, #0
    6378:	701a      	strb	r2, [r3, #0]
			sendZlp(0);
    637a:	687b      	ldr	r3, [r7, #4]
    637c:	2100      	movs	r1, #0
    637e:	0018      	movs	r0, r3
    6380:	f7ff ff8c 	bl	629c <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    6384:	2301      	movs	r3, #1
    6386:	e074      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    6388:	683b      	ldr	r3, [r7, #0]
    638a:	789b      	ldrb	r3, [r3, #2]
    638c:	2b01      	cmp	r3, #1
    638e:	d10f      	bne.n	63b0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    6390:	4b3c      	ldr	r3, [pc, #240]	; (6484 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c4>)
    6392:	2201      	movs	r2, #1
    6394:	701a      	strb	r2, [r3, #0]
			uint8_t buff[] = { 0 };
    6396:	2308      	movs	r3, #8
    6398:	18fb      	adds	r3, r7, r3
    639a:	2200      	movs	r2, #0
    639c:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 1);
    639e:	2308      	movs	r3, #8
    63a0:	18fa      	adds	r2, r7, r3
    63a2:	6878      	ldr	r0, [r7, #4]
    63a4:	2301      	movs	r3, #1
    63a6:	2100      	movs	r1, #0
    63a8:	f7ff fef6 	bl	6198 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    63ac:	2301      	movs	r3, #1
    63ae:	e060      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}
		if (setup.wValueL == 0) // ENDPOINTHALT
    63b0:	683b      	ldr	r3, [r7, #0]
    63b2:	789b      	ldrb	r3, [r3, #2]
    63b4:	2b00      	cmp	r3, #0
    63b6:	d109      	bne.n	63cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x10c>
		{
			// Halt endpoint
			isEndpointHalt = 1;
    63b8:	4b31      	ldr	r3, [pc, #196]	; (6480 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    63ba:	2201      	movs	r2, #1
    63bc:	701a      	strb	r2, [r3, #0]
			sendZlp(0);
    63be:	687b      	ldr	r3, [r7, #4]
    63c0:	2100      	movs	r1, #0
    63c2:	0018      	movs	r0, r3
    63c4:	f7ff ff6a 	bl	629c <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    63c8:	2301      	movs	r3, #1
    63ca:	e052      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case SET_ADDRESS:
		setAddress(setup.wValueL);
    63cc:	683b      	ldr	r3, [r7, #0]
    63ce:	789b      	ldrb	r3, [r3, #2]
    63d0:	001a      	movs	r2, r3
    63d2:	687b      	ldr	r3, [r7, #4]
    63d4:	0011      	movs	r1, r2
    63d6:	0018      	movs	r0, r3
    63d8:	f7ff fad2 	bl	5980 <_ZN14USBDeviceClass10setAddressEm>
		return true;
    63dc:	2301      	movs	r3, #1
    63de:	e048      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);
    63e0:	683a      	ldr	r2, [r7, #0]
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	0011      	movs	r1, r2
    63e6:	0018      	movs	r0, r3
    63e8:	f7ff f8e4 	bl	55b4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    63ec:	0003      	movs	r3, r0
    63ee:	e040      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_DESCRIPTOR:
		return false;
    63f0:	2300      	movs	r3, #0
    63f2:	e03e      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
    63f4:	4a24      	ldr	r2, [pc, #144]	; (6488 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c8>)
    63f6:	6878      	ldr	r0, [r7, #4]
    63f8:	2301      	movs	r3, #1
    63fa:	2100      	movs	r1, #0
    63fc:	f7ff fecc 	bl	6198 <_ZN14USBDeviceClass7armSendEmPKvm>
		return true;
    6400:	2301      	movs	r3, #1
    6402:	e036      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    6404:	683b      	ldr	r3, [r7, #0]
    6406:	781b      	ldrb	r3, [r3, #0]
    6408:	001a      	movs	r2, r3
    640a:	231f      	movs	r3, #31
    640c:	4013      	ands	r3, r2
    640e:	d119      	bne.n	6444 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x184>

			initEndpoints();
    6410:	687b      	ldr	r3, [r7, #4]
    6412:	0018      	movs	r0, r3
    6414:	f7ff fb36 	bl	5a84 <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    6418:	683b      	ldr	r3, [r7, #0]
    641a:	789b      	ldrb	r3, [r3, #2]
    641c:	001a      	movs	r2, r3
    641e:	4b1a      	ldr	r3, [pc, #104]	; (6488 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c8>)
    6420:	601a      	str	r2, [r3, #0]

			#if defined(CDC_ENABLED)
			// Enable interrupt for CDC reception from host (OUT packet)
			usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
    6422:	4b1a      	ldr	r3, [pc, #104]	; (648c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1cc>)
    6424:	2101      	movs	r1, #1
    6426:	0018      	movs	r0, r3
    6428:	f7fe f93f 	bl	46aa <_ZN20USBDevice_SAMD21G18x29epBank1EnableTransferCompleteEh>
			usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
    642c:	4b17      	ldr	r3, [pc, #92]	; (648c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1cc>)
    642e:	2102      	movs	r1, #2
    6430:	0018      	movs	r0, r3
    6432:	f7fe f922 	bl	467a <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
			#endif

			sendZlp(0);
    6436:	687b      	ldr	r3, [r7, #4]
    6438:	2100      	movs	r1, #0
    643a:	0018      	movs	r0, r3
    643c:	f7ff ff2e 	bl	629c <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    6440:	2301      	movs	r3, #1
    6442:	e016      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		} else {
			return false;
    6444:	2300      	movs	r3, #0
    6446:	e014      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
    6448:	4a11      	ldr	r2, [pc, #68]	; (6490 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1d0>)
    644a:	6878      	ldr	r0, [r7, #4]
    644c:	2301      	movs	r3, #1
    644e:	2100      	movs	r1, #0
    6450:	f7ff fea2 	bl	6198 <_ZN14USBDeviceClass7armSendEmPKvm>
		return true;
    6454:	2301      	movs	r3, #1
    6456:	e00c      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_INTERFACE:
		_usbSetInterface = setup.wValueL;
    6458:	683b      	ldr	r3, [r7, #0]
    645a:	789b      	ldrb	r3, [r3, #2]
    645c:	001a      	movs	r2, r3
    645e:	4b0c      	ldr	r3, [pc, #48]	; (6490 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1d0>)
    6460:	601a      	str	r2, [r3, #0]
		sendZlp(0);
    6462:	687b      	ldr	r3, [r7, #4]
    6464:	2100      	movs	r1, #0
    6466:	0018      	movs	r0, r3
    6468:	f7ff ff18 	bl	629c <_ZN14USBDeviceClass7sendZlpEm>
		return true;
    646c:	2301      	movs	r3, #1
    646e:	e000      	b.n	6472 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	default:
		return true;
    6470:	2301      	movs	r3, #1
	}
}
    6472:	0018      	movs	r0, r3
    6474:	46bd      	mov	sp, r7
    6476:	b006      	add	sp, #24
    6478:	bd80      	pop	{r7, pc}
    647a:	46c0      	nop			; (mov r8, r8)
    647c:	000136bc 	.word	0x000136bc
    6480:	2000043f 	.word	0x2000043f
    6484:	2000043e 	.word	0x2000043e
    6488:	20000440 	.word	0x20000440
    648c:	20000338 	.word	0x20000338
    6490:	20000444 	.word	0x20000444

00006494 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
    6494:	b590      	push	{r4, r7, lr}
    6496:	b085      	sub	sp, #20
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]

	if (_pack_message == true) {
    649c:	4b95      	ldr	r3, [pc, #596]	; (66f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    649e:	781b      	ldrb	r3, [r3, #0]
    64a0:	2b00      	cmp	r3, #0
    64a2:	d000      	beq.n	64a6 <_ZN14USBDeviceClass10ISRHandlerEv+0x12>
    64a4:	e120      	b.n	66e8 <_ZN14USBDeviceClass10ISRHandlerEv+0x254>
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    64a6:	4b94      	ldr	r3, [pc, #592]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    64a8:	0018      	movs	r0, r3
    64aa:	f7fd ff7d 	bl	43a8 <_ZN20USBDevice_SAMD21G18x21isEndOfResetInterruptEv>
    64ae:	1e03      	subs	r3, r0, #0
    64b0:	d011      	beq.n	64d6 <_ZN14USBDeviceClass10ISRHandlerEv+0x42>
	{
		// Configure EP 0
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);
    64b2:	687b      	ldr	r3, [r7, #4]
    64b4:	2200      	movs	r2, #0
    64b6:	2100      	movs	r1, #0
    64b8:	0018      	movs	r0, r3
    64ba:	f7ff fb13 	bl	5ae4 <_ZN14USBDeviceClass6initEPEmm>

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);
    64be:	4b8e      	ldr	r3, [pc, #568]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    64c0:	2100      	movs	r1, #0
    64c2:	0018      	movs	r0, r3
    64c4:	f7fe f8c1 	bl	464a <_ZN20USBDevice_SAMD21G18x26epBank0EnableSetupReceivedEh>

		_usbConfiguration = 0;
    64c8:	4b8c      	ldr	r3, [pc, #560]	; (66fc <_ZN14USBDeviceClass10ISRHandlerEv+0x268>)
    64ca:	2200      	movs	r2, #0
    64cc:	601a      	str	r2, [r3, #0]

		usbd.ackEndOfResetInterrupt();
    64ce:	4b8a      	ldr	r3, [pc, #552]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    64d0:	0018      	movs	r0, r3
    64d2:	f7fd ff77 	bl	43c4 <_ZN20USBDevice_SAMD21G18x22ackEndOfResetInterruptEv>
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    64d6:	4b88      	ldr	r3, [pc, #544]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    64d8:	0018      	movs	r0, r3
    64da:	f7fd ff8d 	bl	43f8 <_ZN20USBDevice_SAMD21G18x23isStartOfFrameInterruptEv>
    64de:	1e03      	subs	r3, r0, #0
    64e0:	d03b      	beq.n	655a <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
	{
		usbd.ackStartOfFrameInterrupt();
    64e2:	4b85      	ldr	r3, [pc, #532]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    64e4:	0018      	movs	r0, r3
    64e6:	f7fd ff95 	bl	4414 <_ZN20USBDevice_SAMD21G18x24ackStartOfFrameInterruptEv>

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    64ea:	4b85      	ldr	r3, [pc, #532]	; (6700 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    64ec:	781b      	ldrb	r3, [r3, #0]
    64ee:	b2db      	uxtb	r3, r3
    64f0:	17da      	asrs	r2, r3, #31
    64f2:	1ad3      	subs	r3, r2, r3
    64f4:	0fdb      	lsrs	r3, r3, #31
    64f6:	b2db      	uxtb	r3, r3
    64f8:	2b00      	cmp	r3, #0
    64fa:	d012      	beq.n	6522 <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
			txLEDPulse--;
    64fc:	4b80      	ldr	r3, [pc, #512]	; (6700 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    64fe:	781b      	ldrb	r3, [r3, #0]
    6500:	b2db      	uxtb	r3, r3
    6502:	3b01      	subs	r3, #1
    6504:	b2da      	uxtb	r2, r3
    6506:	4b7e      	ldr	r3, [pc, #504]	; (6700 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    6508:	701a      	strb	r2, [r3, #0]
			if (txLEDPulse == 0)
    650a:	4b7d      	ldr	r3, [pc, #500]	; (6700 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    650c:	781b      	ldrb	r3, [r3, #0]
    650e:	b2db      	uxtb	r3, r3
    6510:	425a      	negs	r2, r3
    6512:	4153      	adcs	r3, r2
    6514:	b2db      	uxtb	r3, r3
    6516:	2b00      	cmp	r3, #0
    6518:	d003      	beq.n	6522 <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
				digitalWrite(PIN_LED_TXL, HIGH);
    651a:	2101      	movs	r1, #1
    651c:	201f      	movs	r0, #31
    651e:	f000 fbcd 	bl	6cbc <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    6522:	4b78      	ldr	r3, [pc, #480]	; (6704 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6524:	781b      	ldrb	r3, [r3, #0]
    6526:	b2db      	uxtb	r3, r3
    6528:	17da      	asrs	r2, r3, #31
    652a:	1ad3      	subs	r3, r2, r3
    652c:	0fdb      	lsrs	r3, r3, #31
    652e:	b2db      	uxtb	r3, r3
    6530:	2b00      	cmp	r3, #0
    6532:	d012      	beq.n	655a <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
			rxLEDPulse--;
    6534:	4b73      	ldr	r3, [pc, #460]	; (6704 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6536:	781b      	ldrb	r3, [r3, #0]
    6538:	b2db      	uxtb	r3, r3
    653a:	3b01      	subs	r3, #1
    653c:	b2da      	uxtb	r2, r3
    653e:	4b71      	ldr	r3, [pc, #452]	; (6704 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6540:	701a      	strb	r2, [r3, #0]
			if (rxLEDPulse == 0)
    6542:	4b70      	ldr	r3, [pc, #448]	; (6704 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6544:	781b      	ldrb	r3, [r3, #0]
    6546:	b2db      	uxtb	r3, r3
    6548:	425a      	negs	r2, r3
    654a:	4153      	adcs	r3, r2
    654c:	b2db      	uxtb	r3, r3
    654e:	2b00      	cmp	r3, #0
    6550:	d003      	beq.n	655a <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
				digitalWrite(PIN_LED_RXL, HIGH);
    6552:	2101      	movs	r1, #1
    6554:	201e      	movs	r0, #30
    6556:	f000 fbb1 	bl	6cbc <digitalWrite>
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    655a:	4b67      	ldr	r3, [pc, #412]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    655c:	2100      	movs	r1, #0
    655e:	0018      	movs	r0, r3
    6560:	f7fd ffc7 	bl	44f2 <_ZN20USBDevice_SAMD21G18x22epBank0IsSetupReceivedEh>
    6564:	1e03      	subs	r3, r0, #0
    6566:	d047      	beq.n	65f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x164>
	{
		usbd.epBank0AckSetupReceived(0);
    6568:	4b63      	ldr	r3, [pc, #396]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    656a:	2100      	movs	r1, #0
    656c:	0018      	movs	r0, r3
    656e:	f7fe f818 	bl	45a2 <_ZN20USBDevice_SAMD21G18x23epBank0AckSetupReceivedEh>

		USBSetup *setup = reinterpret_cast<USBSetup *>(udd_ep_out_cache_buffer[0]);
    6572:	4b65      	ldr	r3, [pc, #404]	; (6708 <_ZN14USBDeviceClass10ISRHandlerEv+0x274>)
    6574:	60bb      	str	r3, [r7, #8]

		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);
    6576:	4b60      	ldr	r3, [pc, #384]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6578:	2100      	movs	r1, #0
    657a:	0018      	movs	r0, r3
    657c:	f7fe f936 	bl	47ec <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    6580:	68bb      	ldr	r3, [r7, #8]
    6582:	781b      	ldrb	r3, [r3, #0]
    6584:	001a      	movs	r2, r3
    6586:	2360      	movs	r3, #96	; 0x60
    6588:	4013      	ands	r3, r2
    658a:	d10a      	bne.n	65a2 <_ZN14USBDeviceClass10ISRHandlerEv+0x10e>
			// Standard Requests
			ok = handleStandardSetup(*setup);
    658c:	230f      	movs	r3, #15
    658e:	18fc      	adds	r4, r7, r3
    6590:	68ba      	ldr	r2, [r7, #8]
    6592:	687b      	ldr	r3, [r7, #4]
    6594:	0011      	movs	r1, r2
    6596:	0018      	movs	r0, r3
    6598:	f7ff fe92 	bl	62c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
    659c:	0003      	movs	r3, r0
    659e:	7023      	strb	r3, [r4, #0]
    65a0:	e009      	b.n	65b6 <_ZN14USBDeviceClass10ISRHandlerEv+0x122>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
    65a2:	230f      	movs	r3, #15
    65a4:	18fc      	adds	r4, r7, r3
    65a6:	68ba      	ldr	r2, [r7, #8]
    65a8:	687b      	ldr	r3, [r7, #4]
    65aa:	0011      	movs	r1, r2
    65ac:	0018      	movs	r0, r3
    65ae:	f7ff fa27 	bl	5a00 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    65b2:	0003      	movs	r3, r0
    65b4:	7023      	strb	r3, [r4, #0]
		}

		if (ok) {
    65b6:	230f      	movs	r3, #15
    65b8:	18fb      	adds	r3, r7, r3
    65ba:	781b      	ldrb	r3, [r3, #0]
    65bc:	2b00      	cmp	r3, #0
    65be:	d005      	beq.n	65cc <_ZN14USBDeviceClass10ISRHandlerEv+0x138>
			usbd.epBank1SetReady(0);
    65c0:	4b4d      	ldr	r3, [pc, #308]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    65c2:	2100      	movs	r1, #0
    65c4:	0018      	movs	r0, r3
    65c6:	f7fe f8fa 	bl	47be <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>
    65ca:	e004      	b.n	65d6 <_ZN14USBDeviceClass10ISRHandlerEv+0x142>
		} else {
			stall(0);
    65cc:	687b      	ldr	r3, [r7, #4]
    65ce:	2100      	movs	r1, #0
    65d0:	0018      	movs	r0, r3
    65d2:	f7ff fb5d 	bl	5c90 <_ZN14USBDeviceClass5stallEm>
		}

		if (usbd.epBank1IsStalled(0))
    65d6:	4b48      	ldr	r3, [pc, #288]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    65d8:	2100      	movs	r1, #0
    65da:	0018      	movs	r0, r3
    65dc:	f7fd ff9f 	bl	451e <_ZN20USBDevice_SAMD21G18x16epBank1IsStalledEh>
    65e0:	1e03      	subs	r3, r0, #0
    65e2:	d009      	beq.n	65f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x164>
		{
			usbd.epBank1AckStalled(0);
    65e4:	4b44      	ldr	r3, [pc, #272]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    65e6:	2100      	movs	r1, #0
    65e8:	0018      	movs	r0, r3
    65ea:	f7fd ffef 	bl	45cc <_ZN20USBDevice_SAMD21G18x17epBank1AckStalledEh>

			// Remove stall request
			usbd.epBank1DisableStalled(0);
    65ee:	4b42      	ldr	r3, [pc, #264]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    65f0:	2100      	movs	r1, #0
    65f2:	0018      	movs	r0, r3
    65f4:	f7fe f871 	bl	46da <_ZN20USBDevice_SAMD21G18x21epBank1DisableStalledEh>
		}

	} // end Received Setup handler

	uint8_t i=0;
    65f8:	230e      	movs	r3, #14
    65fa:	18fb      	adds	r3, r7, r3
    65fc:	2200      	movs	r2, #0
    65fe:	701a      	strb	r2, [r3, #0]
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    6600:	4b3d      	ldr	r3, [pc, #244]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6602:	0018      	movs	r0, r3
    6604:	f7fd ff69 	bl	44da <_ZN20USBDevice_SAMD21G18x18epInterruptSummaryEv>
    6608:	0003      	movs	r3, r0
    660a:	b2da      	uxtb	r2, r3
    660c:	230d      	movs	r3, #13
    660e:	18fb      	adds	r3, r7, r3
    6610:	2101      	movs	r1, #1
    6612:	438a      	bics	r2, r1
    6614:	701a      	strb	r2, [r3, #0]
	while (ept_int != 0)
    6616:	230d      	movs	r3, #13
    6618:	18fb      	adds	r3, r7, r3
    661a:	781b      	ldrb	r3, [r3, #0]
    661c:	2b00      	cmp	r3, #0
    661e:	d066      	beq.n	66ee <_ZN14USBDeviceClass10ISRHandlerEv+0x25a>
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    6620:	230d      	movs	r3, #13
    6622:	18fb      	adds	r3, r7, r3
    6624:	781a      	ldrb	r2, [r3, #0]
    6626:	230e      	movs	r3, #14
    6628:	18fb      	adds	r3, r7, r3
    662a:	781b      	ldrb	r3, [r3, #0]
    662c:	411a      	asrs	r2, r3
    662e:	0013      	movs	r3, r2
    6630:	2201      	movs	r2, #1
    6632:	4013      	ands	r3, r2
    6634:	d04b      	beq.n	66ce <_ZN14USBDeviceClass10ISRHandlerEv+0x23a>
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    6636:	230e      	movs	r3, #14
    6638:	18fb      	adds	r3, r7, r3
    663a:	781a      	ldrb	r2, [r3, #0]
    663c:	4b2e      	ldr	r3, [pc, #184]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    663e:	0011      	movs	r1, r2
    6640:	0018      	movs	r0, r3
    6642:	f7fd ff82 	bl	454a <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    6646:	1e03      	subs	r3, r0, #0
    6648:	d109      	bne.n	665e <_ZN14USBDeviceClass10ISRHandlerEv+0x1ca>
			    usbd.epBank1IsTransferComplete(i))
    664a:	230e      	movs	r3, #14
    664c:	18fb      	adds	r3, r7, r3
    664e:	781a      	ldrb	r2, [r3, #0]
    6650:	4b29      	ldr	r3, [pc, #164]	; (66f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6652:	0011      	movs	r1, r2
    6654:	0018      	movs	r0, r3
    6656:	f7fd ff8e 	bl	4576 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    665a:	1e03      	subs	r3, r0, #0
			if (usbd.epBank0IsTransferComplete(i) ||
    665c:	d001      	beq.n	6662 <_ZN14USBDeviceClass10ISRHandlerEv+0x1ce>
    665e:	2301      	movs	r3, #1
    6660:	e000      	b.n	6664 <_ZN14USBDeviceClass10ISRHandlerEv+0x1d0>
    6662:	2300      	movs	r3, #0
    6664:	2b00      	cmp	r3, #0
    6666:	d020      	beq.n	66aa <_ZN14USBDeviceClass10ISRHandlerEv+0x216>
			{
				if (epHandlers[i]) {
    6668:	230e      	movs	r3, #14
    666a:	18fb      	adds	r3, r7, r3
    666c:	781a      	ldrb	r2, [r3, #0]
    666e:	4b27      	ldr	r3, [pc, #156]	; (670c <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    6670:	0092      	lsls	r2, r2, #2
    6672:	58d3      	ldr	r3, [r2, r3]
    6674:	2b00      	cmp	r3, #0
    6676:	d010      	beq.n	669a <_ZN14USBDeviceClass10ISRHandlerEv+0x206>
					epHandlers[i]->handleEndpoint();
    6678:	230e      	movs	r3, #14
    667a:	18fb      	adds	r3, r7, r3
    667c:	781a      	ldrb	r2, [r3, #0]
    667e:	4b23      	ldr	r3, [pc, #140]	; (670c <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    6680:	0092      	lsls	r2, r2, #2
    6682:	58d3      	ldr	r3, [r2, r3]
    6684:	681b      	ldr	r3, [r3, #0]
    6686:	681b      	ldr	r3, [r3, #0]
    6688:	220e      	movs	r2, #14
    668a:	18ba      	adds	r2, r7, r2
    668c:	7811      	ldrb	r1, [r2, #0]
    668e:	4a1f      	ldr	r2, [pc, #124]	; (670c <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    6690:	0089      	lsls	r1, r1, #2
    6692:	588a      	ldr	r2, [r1, r2]
    6694:	0010      	movs	r0, r2
    6696:	4798      	blx	r3
    6698:	e007      	b.n	66aa <_ZN14USBDeviceClass10ISRHandlerEv+0x216>
				} else {
					handleEndpoint(i);
    669a:	230e      	movs	r3, #14
    669c:	18fb      	adds	r3, r7, r3
    669e:	781a      	ldrb	r2, [r3, #0]
    66a0:	687b      	ldr	r3, [r7, #4]
    66a2:	0011      	movs	r1, r2
    66a4:	0018      	movs	r0, r3
    66a6:	f7ff f881 	bl	57ac <_ZN14USBDeviceClass14handleEndpointEh>
				}
			}
			ept_int &= ~(1 << i);
    66aa:	230e      	movs	r3, #14
    66ac:	18fb      	adds	r3, r7, r3
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	2201      	movs	r2, #1
    66b2:	409a      	lsls	r2, r3
    66b4:	0013      	movs	r3, r2
    66b6:	b25b      	sxtb	r3, r3
    66b8:	43db      	mvns	r3, r3
    66ba:	b25b      	sxtb	r3, r3
    66bc:	220d      	movs	r2, #13
    66be:	18ba      	adds	r2, r7, r2
    66c0:	7812      	ldrb	r2, [r2, #0]
    66c2:	b252      	sxtb	r2, r2
    66c4:	4013      	ands	r3, r2
    66c6:	b25a      	sxtb	r2, r3
    66c8:	230d      	movs	r3, #13
    66ca:	18fb      	adds	r3, r7, r3
    66cc:	701a      	strb	r2, [r3, #0]
		}
		i++;
    66ce:	230e      	movs	r3, #14
    66d0:	18fb      	adds	r3, r7, r3
    66d2:	781a      	ldrb	r2, [r3, #0]
    66d4:	230e      	movs	r3, #14
    66d6:	18fb      	adds	r3, r7, r3
    66d8:	3201      	adds	r2, #1
    66da:	701a      	strb	r2, [r3, #0]
		if (i > USB_EPT_NUM)
    66dc:	230e      	movs	r3, #14
    66de:	18fb      	adds	r3, r7, r3
    66e0:	781b      	ldrb	r3, [r3, #0]
    66e2:	2b08      	cmp	r3, #8
    66e4:	dc02      	bgt.n	66ec <_ZN14USBDeviceClass10ISRHandlerEv+0x258>
	while (ept_int != 0)
    66e6:	e796      	b.n	6616 <_ZN14USBDeviceClass10ISRHandlerEv+0x182>
		return;
    66e8:	46c0      	nop			; (mov r8, r8)
    66ea:	e000      	b.n	66ee <_ZN14USBDeviceClass10ISRHandlerEv+0x25a>
			break;  // fire exit
    66ec:	46c0      	nop			; (mov r8, r8)
	}
}
    66ee:	46bd      	mov	sp, r7
    66f0:	b005      	add	sp, #20
    66f2:	bd90      	pop	{r4, r7, pc}
    66f4:	200007e5 	.word	0x200007e5
    66f8:	20000338 	.word	0x20000338
    66fc:	20000440 	.word	0x20000440
    6700:	2000043c 	.word	0x2000043c
    6704:	2000043d 	.word	0x2000043d
    6708:	20000448 	.word	0x20000448
    670c:	200007c8 	.word	0x200007c8

00006710 <_Z41__static_initialization_and_destruction_0ii>:
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    6710:	b580      	push	{r7, lr}
    6712:	b082      	sub	sp, #8
    6714:	af00      	add	r7, sp, #0
    6716:	6078      	str	r0, [r7, #4]
    6718:	6039      	str	r1, [r7, #0]
    671a:	687b      	ldr	r3, [r7, #4]
    671c:	2b01      	cmp	r3, #1
    671e:	d10b      	bne.n	6738 <_Z41__static_initialization_and_destruction_0ii+0x28>
    6720:	683b      	ldr	r3, [r7, #0]
    6722:	4a07      	ldr	r2, [pc, #28]	; (6740 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    6724:	4293      	cmp	r3, r2
    6726:	d107      	bne.n	6738 <_Z41__static_initialization_and_destruction_0ii+0x28>
USBDevice_SAMD21G18x usbd;
    6728:	4b06      	ldr	r3, [pc, #24]	; (6744 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    672a:	0018      	movs	r0, r3
    672c:	f7fd fddc 	bl	42e8 <_ZN20USBDevice_SAMD21G18xC1Ev>
USBDeviceClass USBDevice;
    6730:	4b05      	ldr	r3, [pc, #20]	; (6748 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    6732:	0018      	movs	r0, r3
    6734:	f7fd fdb2 	bl	429c <_ZN14USBDeviceClassC1Ev>
    6738:	46c0      	nop			; (mov r8, r8)
    673a:	46bd      	mov	sp, r7
    673c:	b002      	add	sp, #8
    673e:	bd80      	pop	{r7, pc}
    6740:	0000ffff 	.word	0x0000ffff
    6744:	20000338 	.word	0x20000338
    6748:	200008f0 	.word	0x200008f0

0000674c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
    674c:	b580      	push	{r7, lr}
    674e:	af00      	add	r7, sp, #0
    6750:	4b03      	ldr	r3, [pc, #12]	; (6760 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x14>)
    6752:	0019      	movs	r1, r3
    6754:	2001      	movs	r0, #1
    6756:	f7ff ffdb 	bl	6710 <_Z41__static_initialization_and_destruction_0ii>
    675a:	46bd      	mov	sp, r7
    675c:	bd80      	pop	{r7, pc}
    675e:	46c0      	nop			; (mov r8, r8)
    6760:	0000ffff 	.word	0x0000ffff

00006764 <__NVIC_SetPriority>:
{
    6764:	b5b0      	push	{r4, r5, r7, lr}
    6766:	b082      	sub	sp, #8
    6768:	af00      	add	r7, sp, #0
    676a:	0002      	movs	r2, r0
    676c:	6039      	str	r1, [r7, #0]
    676e:	1dfb      	adds	r3, r7, #7
    6770:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    6772:	1dfb      	adds	r3, r7, #7
    6774:	781b      	ldrb	r3, [r3, #0]
    6776:	2b7f      	cmp	r3, #127	; 0x7f
    6778:	d828      	bhi.n	67cc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    677a:	4c2f      	ldr	r4, [pc, #188]	; (6838 <__NVIC_SetPriority+0xd4>)
    677c:	1dfb      	adds	r3, r7, #7
    677e:	781b      	ldrb	r3, [r3, #0]
    6780:	b25b      	sxtb	r3, r3
    6782:	089b      	lsrs	r3, r3, #2
    6784:	492c      	ldr	r1, [pc, #176]	; (6838 <__NVIC_SetPriority+0xd4>)
    6786:	1dfa      	adds	r2, r7, #7
    6788:	7812      	ldrb	r2, [r2, #0]
    678a:	b252      	sxtb	r2, r2
    678c:	0892      	lsrs	r2, r2, #2
    678e:	32c0      	adds	r2, #192	; 0xc0
    6790:	0092      	lsls	r2, r2, #2
    6792:	5852      	ldr	r2, [r2, r1]
    6794:	1df9      	adds	r1, r7, #7
    6796:	7809      	ldrb	r1, [r1, #0]
    6798:	0008      	movs	r0, r1
    679a:	2103      	movs	r1, #3
    679c:	4001      	ands	r1, r0
    679e:	00c9      	lsls	r1, r1, #3
    67a0:	20ff      	movs	r0, #255	; 0xff
    67a2:	4088      	lsls	r0, r1
    67a4:	0001      	movs	r1, r0
    67a6:	43c9      	mvns	r1, r1
    67a8:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    67aa:	683a      	ldr	r2, [r7, #0]
    67ac:	0192      	lsls	r2, r2, #6
    67ae:	20ff      	movs	r0, #255	; 0xff
    67b0:	4010      	ands	r0, r2
    67b2:	1dfa      	adds	r2, r7, #7
    67b4:	7812      	ldrb	r2, [r2, #0]
    67b6:	0015      	movs	r5, r2
    67b8:	2203      	movs	r2, #3
    67ba:	402a      	ands	r2, r5
    67bc:	00d2      	lsls	r2, r2, #3
    67be:	4090      	lsls	r0, r2
    67c0:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    67c2:	430a      	orrs	r2, r1
    67c4:	33c0      	adds	r3, #192	; 0xc0
    67c6:	009b      	lsls	r3, r3, #2
    67c8:	511a      	str	r2, [r3, r4]
}
    67ca:	e031      	b.n	6830 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    67cc:	4c1b      	ldr	r4, [pc, #108]	; (683c <__NVIC_SetPriority+0xd8>)
    67ce:	1dfb      	adds	r3, r7, #7
    67d0:	781b      	ldrb	r3, [r3, #0]
    67d2:	001a      	movs	r2, r3
    67d4:	230f      	movs	r3, #15
    67d6:	4013      	ands	r3, r2
    67d8:	3b08      	subs	r3, #8
    67da:	0899      	lsrs	r1, r3, #2
    67dc:	4a17      	ldr	r2, [pc, #92]	; (683c <__NVIC_SetPriority+0xd8>)
    67de:	1dfb      	adds	r3, r7, #7
    67e0:	781b      	ldrb	r3, [r3, #0]
    67e2:	0018      	movs	r0, r3
    67e4:	230f      	movs	r3, #15
    67e6:	4003      	ands	r3, r0
    67e8:	3b08      	subs	r3, #8
    67ea:	089b      	lsrs	r3, r3, #2
    67ec:	3306      	adds	r3, #6
    67ee:	009b      	lsls	r3, r3, #2
    67f0:	18d3      	adds	r3, r2, r3
    67f2:	3304      	adds	r3, #4
    67f4:	681b      	ldr	r3, [r3, #0]
    67f6:	1dfa      	adds	r2, r7, #7
    67f8:	7812      	ldrb	r2, [r2, #0]
    67fa:	0010      	movs	r0, r2
    67fc:	2203      	movs	r2, #3
    67fe:	4002      	ands	r2, r0
    6800:	00d2      	lsls	r2, r2, #3
    6802:	20ff      	movs	r0, #255	; 0xff
    6804:	4090      	lsls	r0, r2
    6806:	0002      	movs	r2, r0
    6808:	43d2      	mvns	r2, r2
    680a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    680c:	683b      	ldr	r3, [r7, #0]
    680e:	019b      	lsls	r3, r3, #6
    6810:	20ff      	movs	r0, #255	; 0xff
    6812:	4018      	ands	r0, r3
    6814:	1dfb      	adds	r3, r7, #7
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	001d      	movs	r5, r3
    681a:	2303      	movs	r3, #3
    681c:	402b      	ands	r3, r5
    681e:	00db      	lsls	r3, r3, #3
    6820:	4098      	lsls	r0, r3
    6822:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6824:	431a      	orrs	r2, r3
    6826:	1d8b      	adds	r3, r1, #6
    6828:	009b      	lsls	r3, r3, #2
    682a:	18e3      	adds	r3, r4, r3
    682c:	3304      	adds	r3, #4
    682e:	601a      	str	r2, [r3, #0]
}
    6830:	46c0      	nop			; (mov r8, r8)
    6832:	46bd      	mov	sp, r7
    6834:	b002      	add	sp, #8
    6836:	bdb0      	pop	{r4, r5, r7, pc}
    6838:	e000e100 	.word	0xe000e100
    683c:	e000ed00 	.word	0xe000ed00

00006840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    6840:	b580      	push	{r7, lr}
    6842:	b082      	sub	sp, #8
    6844:	af00      	add	r7, sp, #0
    6846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    6848:	687b      	ldr	r3, [r7, #4]
    684a:	3b01      	subs	r3, #1
    684c:	4a0c      	ldr	r2, [pc, #48]	; (6880 <SysTick_Config+0x40>)
    684e:	4293      	cmp	r3, r2
    6850:	d901      	bls.n	6856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
    6852:	2301      	movs	r3, #1
    6854:	e010      	b.n	6878 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    6856:	4b0b      	ldr	r3, [pc, #44]	; (6884 <SysTick_Config+0x44>)
    6858:	687a      	ldr	r2, [r7, #4]
    685a:	3a01      	subs	r2, #1
    685c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    685e:	2301      	movs	r3, #1
    6860:	425b      	negs	r3, r3
    6862:	2103      	movs	r1, #3
    6864:	0018      	movs	r0, r3
    6866:	f7ff ff7d 	bl	6764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    686a:	4b06      	ldr	r3, [pc, #24]	; (6884 <SysTick_Config+0x44>)
    686c:	2200      	movs	r2, #0
    686e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    6870:	4b04      	ldr	r3, [pc, #16]	; (6884 <SysTick_Config+0x44>)
    6872:	2207      	movs	r2, #7
    6874:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    6876:	2300      	movs	r3, #0
}
    6878:	0018      	movs	r0, r3
    687a:	46bd      	mov	sp, r7
    687c:	b002      	add	sp, #8
    687e:	bd80      	pop	{r7, pc}
    6880:	00ffffff 	.word	0x00ffffff
    6884:	e000e010 	.word	0xe000e010

00006888 <init>:
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz.
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    6888:	b580      	push	{r7, lr}
    688a:	b082      	sub	sp, #8
    688c:	af00      	add	r7, sp, #0
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    688e:	4b3d      	ldr	r3, [pc, #244]	; (6984 <init+0xfc>)
    6890:	681a      	ldr	r2, [r3, #0]
    6892:	23fa      	movs	r3, #250	; 0xfa
    6894:	0099      	lsls	r1, r3, #2
    6896:	0010      	movs	r0, r2
    6898:	f008 f900 	bl	ea9c <__udivsi3>
    689c:	0003      	movs	r3, r0
    689e:	0018      	movs	r0, r3
    68a0:	f7ff ffce 	bl	6840 <SysTick_Config>
    68a4:	1e03      	subs	r3, r0, #0
    68a6:	d000      	beq.n	68aa <init+0x22>
  {
    // Capture error
    while ( 1 ) ;
    68a8:	e7fe      	b.n	68a8 <init+0x20>
  }
  NVIC_SetPriority (SysTick_IRQn,  (1 << __NVIC_PRIO_BITS) - 2);  /* set Priority for Systick Interrupt (2nd lowest) */
    68aa:	2301      	movs	r3, #1
    68ac:	425b      	negs	r3, r3
    68ae:	2102      	movs	r1, #2
    68b0:	0018      	movs	r0, r3
    68b2:	f7ff ff57 	bl	6764 <__NVIC_SetPriority>
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    68b6:	4b34      	ldr	r3, [pc, #208]	; (6988 <init+0x100>)
    68b8:	4a33      	ldr	r2, [pc, #204]	; (6988 <init+0x100>)
    68ba:	6a12      	ldr	r2, [r2, #32]
    68bc:	21fc      	movs	r1, #252	; 0xfc
    68be:	430a      	orrs	r2, r1
    68c0:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    68c2:	4b31      	ldr	r3, [pc, #196]	; (6988 <init+0x100>)
    68c4:	4a30      	ldr	r2, [pc, #192]	; (6988 <init+0x100>)
    68c6:	6a12      	ldr	r2, [r2, #32]
    68c8:	21fc      	movs	r1, #252	; 0xfc
    68ca:	0189      	lsls	r1, r1, #6
    68cc:	430a      	orrs	r2, r1
    68ce:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    68d0:	4b2d      	ldr	r3, [pc, #180]	; (6988 <init+0x100>)
    68d2:	4a2d      	ldr	r2, [pc, #180]	; (6988 <init+0x100>)
    68d4:	6a12      	ldr	r2, [r2, #32]
    68d6:	21a0      	movs	r1, #160	; 0xa0
    68d8:	02c9      	lsls	r1, r1, #11
    68da:	430a      	orrs	r2, r1
    68dc:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    68de:	2300      	movs	r3, #0
    68e0:	607b      	str	r3, [r7, #4]
    68e2:	e007      	b.n	68f4 <init+0x6c>
  {
    pinMode( ul, INPUT ) ;
    68e4:	687b      	ldr	r3, [r7, #4]
    68e6:	2100      	movs	r1, #0
    68e8:	0018      	movs	r0, r3
    68ea:	f000 f8bd 	bl	6a68 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    68ee:	687b      	ldr	r3, [r7, #4]
    68f0:	3301      	adds	r3, #1
    68f2:	607b      	str	r3, [r7, #4]
    68f4:	687b      	ldr	r3, [r7, #4]
    68f6:	2b12      	cmp	r3, #18
    68f8:	d9f4      	bls.n	68e4 <init+0x5c>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    68fa:	46c0      	nop			; (mov r8, r8)
    68fc:	4b23      	ldr	r3, [pc, #140]	; (698c <init+0x104>)
    68fe:	785b      	ldrb	r3, [r3, #1]
    6900:	b2db      	uxtb	r3, r3
    6902:	b25b      	sxtb	r3, r3
    6904:	2b00      	cmp	r3, #0
    6906:	dbf9      	blt.n	68fc <init+0x74>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    6908:	4b20      	ldr	r3, [pc, #128]	; (698c <init+0x104>)
    690a:	4a21      	ldr	r2, [pc, #132]	; (6990 <init+0x108>)
    690c:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    690e:	46c0      	nop			; (mov r8, r8)
    6910:	4b20      	ldr	r3, [pc, #128]	; (6994 <init+0x10c>)
    6912:	7e5b      	ldrb	r3, [r3, #25]
    6914:	061b      	lsls	r3, r3, #24
    6916:	0fdb      	lsrs	r3, r3, #31
    6918:	b2db      	uxtb	r3, r3
    691a:	2b01      	cmp	r3, #1
    691c:	d0f8      	beq.n	6910 <init+0x88>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    691e:	4b1d      	ldr	r3, [pc, #116]	; (6994 <init+0x10c>)
    6920:	22e4      	movs	r2, #228	; 0xe4
    6922:	00d2      	lsls	r2, r2, #3
    6924:	809a      	strh	r2, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    6926:	4b1b      	ldr	r3, [pc, #108]	; (6994 <init+0x10c>)
    6928:	223f      	movs	r2, #63	; 0x3f
    692a:	70da      	strb	r2, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    692c:	46c0      	nop			; (mov r8, r8)
    692e:	4b19      	ldr	r3, [pc, #100]	; (6994 <init+0x10c>)
    6930:	7e5b      	ldrb	r3, [r3, #25]
    6932:	061b      	lsls	r3, r3, #24
    6934:	0fdb      	lsrs	r3, r3, #31
    6936:	b2db      	uxtb	r3, r3
    6938:	2b01      	cmp	r3, #1
    693a:	d0f8      	beq.n	692e <init+0xa6>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    693c:	4b15      	ldr	r3, [pc, #84]	; (6994 <init+0x10c>)
    693e:	22c0      	movs	r2, #192	; 0xc0
    6940:	0152      	lsls	r2, r2, #5
    6942:	611a      	str	r2, [r3, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    6944:	4b13      	ldr	r3, [pc, #76]	; (6994 <init+0x10c>)
    6946:	2200      	movs	r2, #0
    6948:	709a      	strb	r2, [r3, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    694a:	2000      	movs	r0, #0
    694c:	f000 f828 	bl	69a0 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    6950:	46c0      	nop			; (mov r8, r8)
    6952:	4b0e      	ldr	r3, [pc, #56]	; (698c <init+0x104>)
    6954:	785b      	ldrb	r3, [r3, #1]
    6956:	b2db      	uxtb	r3, r3
    6958:	b25b      	sxtb	r3, r3
    695a:	2b00      	cmp	r3, #0
    695c:	dbf9      	blt.n	6952 <init+0xca>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    695e:	4b0b      	ldr	r3, [pc, #44]	; (698c <init+0x104>)
    6960:	4a0d      	ldr	r2, [pc, #52]	; (6998 <init+0x110>)
    6962:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    6964:	46c0      	nop			; (mov r8, r8)
    6966:	4b0d      	ldr	r3, [pc, #52]	; (699c <init+0x114>)
    6968:	79db      	ldrb	r3, [r3, #7]
    696a:	061b      	lsls	r3, r3, #24
    696c:	0fdb      	lsrs	r3, r3, #31
    696e:	b2db      	uxtb	r3, r3
    6970:	2b01      	cmp	r3, #1
    6972:	d0f8      	beq.n	6966 <init+0xde>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    6974:	4b09      	ldr	r3, [pc, #36]	; (699c <init+0x114>)
    6976:	2241      	movs	r2, #65	; 0x41
    6978:	705a      	strb	r2, [r3, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    697a:	46c0      	nop			; (mov r8, r8)
    697c:	46bd      	mov	sp, r7
    697e:	b002      	add	sp, #8
    6980:	bd80      	pop	{r7, pc}
    6982:	46c0      	nop			; (mov r8, r8)
    6984:	20000048 	.word	0x20000048
    6988:	40000400 	.word	0x40000400
    698c:	40000c00 	.word	0x40000c00
    6990:	0000401e 	.word	0x0000401e
    6994:	42004000 	.word	0x42004000
    6998:	00004021 	.word	0x00004021
    699c:	42004800 	.word	0x42004800

000069a0 <analogReference>:
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    69a0:	b580      	push	{r7, lr}
    69a2:	b082      	sub	sp, #8
    69a4:	af00      	add	r7, sp, #0
    69a6:	0002      	movs	r2, r0
    69a8:	1dfb      	adds	r3, r7, #7
    69aa:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    69ac:	4b2b      	ldr	r3, [pc, #172]	; (6a5c <analogReference+0xbc>)
    69ae:	7e5b      	ldrb	r3, [r3, #25]
    69b0:	061b      	lsls	r3, r3, #24
    69b2:	0fdb      	lsrs	r3, r3, #31
    69b4:	b2db      	uxtb	r3, r3
    69b6:	2b01      	cmp	r3, #1
    69b8:	d0f8      	beq.n	69ac <analogReference+0xc>
  syncADC();
  switch (mode)
    69ba:	1dfb      	adds	r3, r7, #7
    69bc:	781b      	ldrb	r3, [r3, #0]
    69be:	2b05      	cmp	r3, #5
    69c0:	d839      	bhi.n	6a36 <analogReference+0x96>
    69c2:	009a      	lsls	r2, r3, #2
    69c4:	4b26      	ldr	r3, [pc, #152]	; (6a60 <analogReference+0xc0>)
    69c6:	18d3      	adds	r3, r2, r3
    69c8:	681b      	ldr	r3, [r3, #0]
    69ca:	469f      	mov	pc, r3
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    69cc:	4a23      	ldr	r2, [pc, #140]	; (6a5c <analogReference+0xbc>)
    69ce:	6913      	ldr	r3, [r2, #16]
    69d0:	4924      	ldr	r1, [pc, #144]	; (6a64 <analogReference+0xc4>)
    69d2:	400b      	ands	r3, r1
    69d4:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    69d6:	4a21      	ldr	r2, [pc, #132]	; (6a5c <analogReference+0xbc>)
    69d8:	7853      	ldrb	r3, [r2, #1]
    69da:	210f      	movs	r1, #15
    69dc:	438b      	bics	r3, r1
    69de:	1c19      	adds	r1, r3, #0
    69e0:	2301      	movs	r3, #1
    69e2:	430b      	orrs	r3, r1
    69e4:	7053      	strb	r3, [r2, #1]
      break;
    69e6:	e035      	b.n	6a54 <analogReference+0xb4>

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    69e8:	4a1c      	ldr	r2, [pc, #112]	; (6a5c <analogReference+0xbc>)
    69ea:	6913      	ldr	r3, [r2, #16]
    69ec:	491d      	ldr	r1, [pc, #116]	; (6a64 <analogReference+0xc4>)
    69ee:	400b      	ands	r3, r1
    69f0:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    69f2:	4a1a      	ldr	r2, [pc, #104]	; (6a5c <analogReference+0xbc>)
    69f4:	7853      	ldrb	r3, [r2, #1]
    69f6:	210f      	movs	r1, #15
    69f8:	438b      	bics	r3, r1
    69fa:	1c19      	adds	r1, r3, #0
    69fc:	2303      	movs	r3, #3
    69fe:	430b      	orrs	r3, r1
    6a00:	7053      	strb	r3, [r2, #1]
      break;
    6a02:	e027      	b.n	6a54 <analogReference+0xb4>

    case AR_INTERNAL1V0:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    6a04:	4a15      	ldr	r2, [pc, #84]	; (6a5c <analogReference+0xbc>)
    6a06:	6913      	ldr	r3, [r2, #16]
    6a08:	4916      	ldr	r1, [pc, #88]	; (6a64 <analogReference+0xc4>)
    6a0a:	400b      	ands	r3, r1
    6a0c:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
    6a0e:	4a13      	ldr	r2, [pc, #76]	; (6a5c <analogReference+0xbc>)
    6a10:	7853      	ldrb	r3, [r2, #1]
    6a12:	210f      	movs	r1, #15
    6a14:	438b      	bics	r3, r1
    6a16:	7053      	strb	r3, [r2, #1]
      break;
    6a18:	e01c      	b.n	6a54 <analogReference+0xb4>

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    6a1a:	4a10      	ldr	r2, [pc, #64]	; (6a5c <analogReference+0xbc>)
    6a1c:	6913      	ldr	r3, [r2, #16]
    6a1e:	4911      	ldr	r1, [pc, #68]	; (6a64 <analogReference+0xc4>)
    6a20:	400b      	ands	r3, r1
    6a22:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    6a24:	4a0d      	ldr	r2, [pc, #52]	; (6a5c <analogReference+0xbc>)
    6a26:	7853      	ldrb	r3, [r2, #1]
    6a28:	210f      	movs	r1, #15
    6a2a:	438b      	bics	r3, r1
    6a2c:	1c19      	adds	r1, r3, #0
    6a2e:	2302      	movs	r3, #2
    6a30:	430b      	orrs	r3, r1
    6a32:	7053      	strb	r3, [r2, #1]
      break;
    6a34:	e00e      	b.n	6a54 <analogReference+0xb4>

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    6a36:	4a09      	ldr	r2, [pc, #36]	; (6a5c <analogReference+0xbc>)
    6a38:	6913      	ldr	r3, [r2, #16]
    6a3a:	21f0      	movs	r1, #240	; 0xf0
    6a3c:	0509      	lsls	r1, r1, #20
    6a3e:	430b      	orrs	r3, r1
    6a40:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    6a42:	4a06      	ldr	r2, [pc, #24]	; (6a5c <analogReference+0xbc>)
    6a44:	7853      	ldrb	r3, [r2, #1]
    6a46:	210f      	movs	r1, #15
    6a48:	438b      	bics	r3, r1
    6a4a:	1c19      	adds	r1, r3, #0
    6a4c:	2302      	movs	r3, #2
    6a4e:	430b      	orrs	r3, r1
    6a50:	7053      	strb	r3, [r2, #1]
      break;
    6a52:	46c0      	nop			; (mov r8, r8)
  }
}
    6a54:	46c0      	nop			; (mov r8, r8)
    6a56:	46bd      	mov	sp, r7
    6a58:	b002      	add	sp, #8
    6a5a:	bd80      	pop	{r7, pc}
    6a5c:	42004000 	.word	0x42004000
    6a60:	00013714 	.word	0x00013714
    6a64:	f0ffffff 	.word	0xf0ffffff

00006a68 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    6a68:	b590      	push	{r4, r7, lr}
    6a6a:	b083      	sub	sp, #12
    6a6c:	af00      	add	r7, sp, #0
    6a6e:	6078      	str	r0, [r7, #4]
    6a70:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6a72:	4990      	ldr	r1, [pc, #576]	; (6cb4 <pinMode+0x24c>)
    6a74:	687a      	ldr	r2, [r7, #4]
    6a76:	0013      	movs	r3, r2
    6a78:	005b      	lsls	r3, r3, #1
    6a7a:	189b      	adds	r3, r3, r2
    6a7c:	00db      	lsls	r3, r3, #3
    6a7e:	18cb      	adds	r3, r1, r3
    6a80:	3308      	adds	r3, #8
    6a82:	781b      	ldrb	r3, [r3, #0]
    6a84:	b25b      	sxtb	r3, r3
    6a86:	3301      	adds	r3, #1
    6a88:	d100      	bne.n	6a8c <pinMode+0x24>
    6a8a:	e10e      	b.n	6caa <pinMode+0x242>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    6a8c:	683b      	ldr	r3, [r7, #0]
    6a8e:	2b01      	cmp	r3, #1
    6a90:	d100      	bne.n	6a94 <pinMode+0x2c>
    6a92:	e0d6      	b.n	6c42 <pinMode+0x1da>
    6a94:	d305      	bcc.n	6aa2 <pinMode+0x3a>
    6a96:	2b02      	cmp	r3, #2
    6a98:	d037      	beq.n	6b0a <pinMode+0xa2>
    6a9a:	2b03      	cmp	r3, #3
    6a9c:	d100      	bne.n	6aa0 <pinMode+0x38>
    6a9e:	e082      	b.n	6ba6 <pinMode+0x13e>
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    default:
      // do nothing
    break ;
    6aa0:	e104      	b.n	6cac <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    6aa2:	4885      	ldr	r0, [pc, #532]	; (6cb8 <pinMode+0x250>)
    6aa4:	4983      	ldr	r1, [pc, #524]	; (6cb4 <pinMode+0x24c>)
    6aa6:	687a      	ldr	r2, [r7, #4]
    6aa8:	0013      	movs	r3, r2
    6aaa:	005b      	lsls	r3, r3, #1
    6aac:	189b      	adds	r3, r3, r2
    6aae:	00db      	lsls	r3, r3, #3
    6ab0:	565b      	ldrsb	r3, [r3, r1]
    6ab2:	001c      	movs	r4, r3
    6ab4:	497f      	ldr	r1, [pc, #508]	; (6cb4 <pinMode+0x24c>)
    6ab6:	687a      	ldr	r2, [r7, #4]
    6ab8:	0013      	movs	r3, r2
    6aba:	005b      	lsls	r3, r3, #1
    6abc:	189b      	adds	r3, r3, r2
    6abe:	00db      	lsls	r3, r3, #3
    6ac0:	18cb      	adds	r3, r1, r3
    6ac2:	3304      	adds	r3, #4
    6ac4:	681b      	ldr	r3, [r3, #0]
    6ac6:	2140      	movs	r1, #64	; 0x40
    6ac8:	01e2      	lsls	r2, r4, #7
    6aca:	1882      	adds	r2, r0, r2
    6acc:	18d3      	adds	r3, r2, r3
    6ace:	185b      	adds	r3, r3, r1
    6ad0:	2202      	movs	r2, #2
    6ad2:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6ad4:	4878      	ldr	r0, [pc, #480]	; (6cb8 <pinMode+0x250>)
    6ad6:	4977      	ldr	r1, [pc, #476]	; (6cb4 <pinMode+0x24c>)
    6ad8:	687a      	ldr	r2, [r7, #4]
    6ada:	0013      	movs	r3, r2
    6adc:	005b      	lsls	r3, r3, #1
    6ade:	189b      	adds	r3, r3, r2
    6ae0:	00db      	lsls	r3, r3, #3
    6ae2:	565b      	ldrsb	r3, [r3, r1]
    6ae4:	001c      	movs	r4, r3
    6ae6:	4973      	ldr	r1, [pc, #460]	; (6cb4 <pinMode+0x24c>)
    6ae8:	687a      	ldr	r2, [r7, #4]
    6aea:	0013      	movs	r3, r2
    6aec:	005b      	lsls	r3, r3, #1
    6aee:	189b      	adds	r3, r3, r2
    6af0:	00db      	lsls	r3, r3, #3
    6af2:	18cb      	adds	r3, r1, r3
    6af4:	3304      	adds	r3, #4
    6af6:	681b      	ldr	r3, [r3, #0]
    6af8:	2201      	movs	r2, #1
    6afa:	409a      	lsls	r2, r3
    6afc:	0013      	movs	r3, r2
    6afe:	001a      	movs	r2, r3
    6b00:	01e3      	lsls	r3, r4, #7
    6b02:	18c3      	adds	r3, r0, r3
    6b04:	3304      	adds	r3, #4
    6b06:	601a      	str	r2, [r3, #0]
    break ;
    6b08:	e0d0      	b.n	6cac <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6b0a:	486b      	ldr	r0, [pc, #428]	; (6cb8 <pinMode+0x250>)
    6b0c:	4969      	ldr	r1, [pc, #420]	; (6cb4 <pinMode+0x24c>)
    6b0e:	687a      	ldr	r2, [r7, #4]
    6b10:	0013      	movs	r3, r2
    6b12:	005b      	lsls	r3, r3, #1
    6b14:	189b      	adds	r3, r3, r2
    6b16:	00db      	lsls	r3, r3, #3
    6b18:	565b      	ldrsb	r3, [r3, r1]
    6b1a:	001c      	movs	r4, r3
    6b1c:	4965      	ldr	r1, [pc, #404]	; (6cb4 <pinMode+0x24c>)
    6b1e:	687a      	ldr	r2, [r7, #4]
    6b20:	0013      	movs	r3, r2
    6b22:	005b      	lsls	r3, r3, #1
    6b24:	189b      	adds	r3, r3, r2
    6b26:	00db      	lsls	r3, r3, #3
    6b28:	18cb      	adds	r3, r1, r3
    6b2a:	3304      	adds	r3, #4
    6b2c:	681b      	ldr	r3, [r3, #0]
    6b2e:	2140      	movs	r1, #64	; 0x40
    6b30:	01e2      	lsls	r2, r4, #7
    6b32:	1882      	adds	r2, r0, r2
    6b34:	18d3      	adds	r3, r2, r3
    6b36:	185b      	adds	r3, r3, r1
    6b38:	2206      	movs	r2, #6
    6b3a:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6b3c:	485e      	ldr	r0, [pc, #376]	; (6cb8 <pinMode+0x250>)
    6b3e:	495d      	ldr	r1, [pc, #372]	; (6cb4 <pinMode+0x24c>)
    6b40:	687a      	ldr	r2, [r7, #4]
    6b42:	0013      	movs	r3, r2
    6b44:	005b      	lsls	r3, r3, #1
    6b46:	189b      	adds	r3, r3, r2
    6b48:	00db      	lsls	r3, r3, #3
    6b4a:	565b      	ldrsb	r3, [r3, r1]
    6b4c:	001c      	movs	r4, r3
    6b4e:	4959      	ldr	r1, [pc, #356]	; (6cb4 <pinMode+0x24c>)
    6b50:	687a      	ldr	r2, [r7, #4]
    6b52:	0013      	movs	r3, r2
    6b54:	005b      	lsls	r3, r3, #1
    6b56:	189b      	adds	r3, r3, r2
    6b58:	00db      	lsls	r3, r3, #3
    6b5a:	18cb      	adds	r3, r1, r3
    6b5c:	3304      	adds	r3, #4
    6b5e:	681b      	ldr	r3, [r3, #0]
    6b60:	2201      	movs	r2, #1
    6b62:	409a      	lsls	r2, r3
    6b64:	0013      	movs	r3, r2
    6b66:	001a      	movs	r2, r3
    6b68:	01e3      	lsls	r3, r4, #7
    6b6a:	18c3      	adds	r3, r0, r3
    6b6c:	3304      	adds	r3, #4
    6b6e:	601a      	str	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6b70:	4851      	ldr	r0, [pc, #324]	; (6cb8 <pinMode+0x250>)
    6b72:	4950      	ldr	r1, [pc, #320]	; (6cb4 <pinMode+0x24c>)
    6b74:	687a      	ldr	r2, [r7, #4]
    6b76:	0013      	movs	r3, r2
    6b78:	005b      	lsls	r3, r3, #1
    6b7a:	189b      	adds	r3, r3, r2
    6b7c:	00db      	lsls	r3, r3, #3
    6b7e:	565b      	ldrsb	r3, [r3, r1]
    6b80:	001c      	movs	r4, r3
    6b82:	494c      	ldr	r1, [pc, #304]	; (6cb4 <pinMode+0x24c>)
    6b84:	687a      	ldr	r2, [r7, #4]
    6b86:	0013      	movs	r3, r2
    6b88:	005b      	lsls	r3, r3, #1
    6b8a:	189b      	adds	r3, r3, r2
    6b8c:	00db      	lsls	r3, r3, #3
    6b8e:	18cb      	adds	r3, r1, r3
    6b90:	3304      	adds	r3, #4
    6b92:	681b      	ldr	r3, [r3, #0]
    6b94:	2201      	movs	r2, #1
    6b96:	409a      	lsls	r2, r3
    6b98:	0013      	movs	r3, r2
    6b9a:	001a      	movs	r2, r3
    6b9c:	01e3      	lsls	r3, r4, #7
    6b9e:	18c3      	adds	r3, r0, r3
    6ba0:	3318      	adds	r3, #24
    6ba2:	601a      	str	r2, [r3, #0]
    break ;
    6ba4:	e082      	b.n	6cac <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6ba6:	4844      	ldr	r0, [pc, #272]	; (6cb8 <pinMode+0x250>)
    6ba8:	4942      	ldr	r1, [pc, #264]	; (6cb4 <pinMode+0x24c>)
    6baa:	687a      	ldr	r2, [r7, #4]
    6bac:	0013      	movs	r3, r2
    6bae:	005b      	lsls	r3, r3, #1
    6bb0:	189b      	adds	r3, r3, r2
    6bb2:	00db      	lsls	r3, r3, #3
    6bb4:	565b      	ldrsb	r3, [r3, r1]
    6bb6:	001c      	movs	r4, r3
    6bb8:	493e      	ldr	r1, [pc, #248]	; (6cb4 <pinMode+0x24c>)
    6bba:	687a      	ldr	r2, [r7, #4]
    6bbc:	0013      	movs	r3, r2
    6bbe:	005b      	lsls	r3, r3, #1
    6bc0:	189b      	adds	r3, r3, r2
    6bc2:	00db      	lsls	r3, r3, #3
    6bc4:	18cb      	adds	r3, r1, r3
    6bc6:	3304      	adds	r3, #4
    6bc8:	681b      	ldr	r3, [r3, #0]
    6bca:	2140      	movs	r1, #64	; 0x40
    6bcc:	01e2      	lsls	r2, r4, #7
    6bce:	1882      	adds	r2, r0, r2
    6bd0:	18d3      	adds	r3, r2, r3
    6bd2:	185b      	adds	r3, r3, r1
    6bd4:	2206      	movs	r2, #6
    6bd6:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6bd8:	4837      	ldr	r0, [pc, #220]	; (6cb8 <pinMode+0x250>)
    6bda:	4936      	ldr	r1, [pc, #216]	; (6cb4 <pinMode+0x24c>)
    6bdc:	687a      	ldr	r2, [r7, #4]
    6bde:	0013      	movs	r3, r2
    6be0:	005b      	lsls	r3, r3, #1
    6be2:	189b      	adds	r3, r3, r2
    6be4:	00db      	lsls	r3, r3, #3
    6be6:	565b      	ldrsb	r3, [r3, r1]
    6be8:	001c      	movs	r4, r3
    6bea:	4932      	ldr	r1, [pc, #200]	; (6cb4 <pinMode+0x24c>)
    6bec:	687a      	ldr	r2, [r7, #4]
    6bee:	0013      	movs	r3, r2
    6bf0:	005b      	lsls	r3, r3, #1
    6bf2:	189b      	adds	r3, r3, r2
    6bf4:	00db      	lsls	r3, r3, #3
    6bf6:	18cb      	adds	r3, r1, r3
    6bf8:	3304      	adds	r3, #4
    6bfa:	681b      	ldr	r3, [r3, #0]
    6bfc:	2201      	movs	r2, #1
    6bfe:	409a      	lsls	r2, r3
    6c00:	0013      	movs	r3, r2
    6c02:	001a      	movs	r2, r3
    6c04:	01e3      	lsls	r3, r4, #7
    6c06:	18c3      	adds	r3, r0, r3
    6c08:	3304      	adds	r3, #4
    6c0a:	601a      	str	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6c0c:	482a      	ldr	r0, [pc, #168]	; (6cb8 <pinMode+0x250>)
    6c0e:	4929      	ldr	r1, [pc, #164]	; (6cb4 <pinMode+0x24c>)
    6c10:	687a      	ldr	r2, [r7, #4]
    6c12:	0013      	movs	r3, r2
    6c14:	005b      	lsls	r3, r3, #1
    6c16:	189b      	adds	r3, r3, r2
    6c18:	00db      	lsls	r3, r3, #3
    6c1a:	565b      	ldrsb	r3, [r3, r1]
    6c1c:	001c      	movs	r4, r3
    6c1e:	4925      	ldr	r1, [pc, #148]	; (6cb4 <pinMode+0x24c>)
    6c20:	687a      	ldr	r2, [r7, #4]
    6c22:	0013      	movs	r3, r2
    6c24:	005b      	lsls	r3, r3, #1
    6c26:	189b      	adds	r3, r3, r2
    6c28:	00db      	lsls	r3, r3, #3
    6c2a:	18cb      	adds	r3, r1, r3
    6c2c:	3304      	adds	r3, #4
    6c2e:	681b      	ldr	r3, [r3, #0]
    6c30:	2201      	movs	r2, #1
    6c32:	409a      	lsls	r2, r3
    6c34:	0013      	movs	r3, r2
    6c36:	001a      	movs	r2, r3
    6c38:	01e3      	lsls	r3, r4, #7
    6c3a:	18c3      	adds	r3, r0, r3
    6c3c:	3314      	adds	r3, #20
    6c3e:	601a      	str	r2, [r3, #0]
    break ;
    6c40:	e034      	b.n	6cac <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    6c42:	481d      	ldr	r0, [pc, #116]	; (6cb8 <pinMode+0x250>)
    6c44:	491b      	ldr	r1, [pc, #108]	; (6cb4 <pinMode+0x24c>)
    6c46:	687a      	ldr	r2, [r7, #4]
    6c48:	0013      	movs	r3, r2
    6c4a:	005b      	lsls	r3, r3, #1
    6c4c:	189b      	adds	r3, r3, r2
    6c4e:	00db      	lsls	r3, r3, #3
    6c50:	565b      	ldrsb	r3, [r3, r1]
    6c52:	001c      	movs	r4, r3
    6c54:	4917      	ldr	r1, [pc, #92]	; (6cb4 <pinMode+0x24c>)
    6c56:	687a      	ldr	r2, [r7, #4]
    6c58:	0013      	movs	r3, r2
    6c5a:	005b      	lsls	r3, r3, #1
    6c5c:	189b      	adds	r3, r3, r2
    6c5e:	00db      	lsls	r3, r3, #3
    6c60:	18cb      	adds	r3, r1, r3
    6c62:	3304      	adds	r3, #4
    6c64:	681b      	ldr	r3, [r3, #0]
    6c66:	2140      	movs	r1, #64	; 0x40
    6c68:	01e2      	lsls	r2, r4, #7
    6c6a:	1882      	adds	r2, r0, r2
    6c6c:	18d3      	adds	r3, r2, r3
    6c6e:	185b      	adds	r3, r3, r1
    6c70:	2202      	movs	r2, #2
    6c72:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6c74:	4810      	ldr	r0, [pc, #64]	; (6cb8 <pinMode+0x250>)
    6c76:	490f      	ldr	r1, [pc, #60]	; (6cb4 <pinMode+0x24c>)
    6c78:	687a      	ldr	r2, [r7, #4]
    6c7a:	0013      	movs	r3, r2
    6c7c:	005b      	lsls	r3, r3, #1
    6c7e:	189b      	adds	r3, r3, r2
    6c80:	00db      	lsls	r3, r3, #3
    6c82:	565b      	ldrsb	r3, [r3, r1]
    6c84:	001c      	movs	r4, r3
    6c86:	490b      	ldr	r1, [pc, #44]	; (6cb4 <pinMode+0x24c>)
    6c88:	687a      	ldr	r2, [r7, #4]
    6c8a:	0013      	movs	r3, r2
    6c8c:	005b      	lsls	r3, r3, #1
    6c8e:	189b      	adds	r3, r3, r2
    6c90:	00db      	lsls	r3, r3, #3
    6c92:	18cb      	adds	r3, r1, r3
    6c94:	3304      	adds	r3, #4
    6c96:	681b      	ldr	r3, [r3, #0]
    6c98:	2201      	movs	r2, #1
    6c9a:	409a      	lsls	r2, r3
    6c9c:	0013      	movs	r3, r2
    6c9e:	001a      	movs	r2, r3
    6ca0:	01e3      	lsls	r3, r4, #7
    6ca2:	18c3      	adds	r3, r0, r3
    6ca4:	3308      	adds	r3, #8
    6ca6:	601a      	str	r2, [r3, #0]
    break ;
    6ca8:	e000      	b.n	6cac <pinMode+0x244>
    return ;
    6caa:	46c0      	nop			; (mov r8, r8)
  }
}
    6cac:	46bd      	mov	sp, r7
    6cae:	b003      	add	sp, #12
    6cb0:	bd90      	pop	{r4, r7, pc}
    6cb2:	46c0      	nop			; (mov r8, r8)
    6cb4:	000138cc 	.word	0x000138cc
    6cb8:	41004400 	.word	0x41004400

00006cbc <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    6cbc:	b590      	push	{r4, r7, lr}
    6cbe:	b087      	sub	sp, #28
    6cc0:	af00      	add	r7, sp, #0
    6cc2:	6078      	str	r0, [r7, #4]
    6cc4:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6cc6:	4934      	ldr	r1, [pc, #208]	; (6d98 <digitalWrite+0xdc>)
    6cc8:	687a      	ldr	r2, [r7, #4]
    6cca:	0013      	movs	r3, r2
    6ccc:	005b      	lsls	r3, r3, #1
    6cce:	189b      	adds	r3, r3, r2
    6cd0:	00db      	lsls	r3, r3, #3
    6cd2:	18cb      	adds	r3, r1, r3
    6cd4:	3308      	adds	r3, #8
    6cd6:	781b      	ldrb	r3, [r3, #0]
    6cd8:	b25b      	sxtb	r3, r3
    6cda:	3301      	adds	r3, #1
    6cdc:	d058      	beq.n	6d90 <digitalWrite+0xd4>
  {
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
    6cde:	2317      	movs	r3, #23
    6ce0:	18f9      	adds	r1, r7, r3
    6ce2:	482d      	ldr	r0, [pc, #180]	; (6d98 <digitalWrite+0xdc>)
    6ce4:	687a      	ldr	r2, [r7, #4]
    6ce6:	0013      	movs	r3, r2
    6ce8:	005b      	lsls	r3, r3, #1
    6cea:	189b      	adds	r3, r3, r2
    6cec:	00db      	lsls	r3, r3, #3
    6cee:	5c1b      	ldrb	r3, [r3, r0]
    6cf0:	700b      	strb	r3, [r1, #0]
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    6cf2:	4929      	ldr	r1, [pc, #164]	; (6d98 <digitalWrite+0xdc>)
    6cf4:	687a      	ldr	r2, [r7, #4]
    6cf6:	0013      	movs	r3, r2
    6cf8:	005b      	lsls	r3, r3, #1
    6cfa:	189b      	adds	r3, r3, r2
    6cfc:	00db      	lsls	r3, r3, #3
    6cfe:	18cb      	adds	r3, r1, r3
    6d00:	3304      	adds	r3, #4
    6d02:	681b      	ldr	r3, [r3, #0]
    6d04:	613b      	str	r3, [r7, #16]
  uint32_t pinMask = (1ul << pin);
    6d06:	2201      	movs	r2, #1
    6d08:	693b      	ldr	r3, [r7, #16]
    6d0a:	409a      	lsls	r2, r3
    6d0c:	0013      	movs	r3, r2
    6d0e:	60fb      	str	r3, [r7, #12]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    6d10:	4a22      	ldr	r2, [pc, #136]	; (6d9c <digitalWrite+0xe0>)
    6d12:	2317      	movs	r3, #23
    6d14:	18fb      	adds	r3, r7, r3
    6d16:	781b      	ldrb	r3, [r3, #0]
    6d18:	b25b      	sxtb	r3, r3
    6d1a:	01db      	lsls	r3, r3, #7
    6d1c:	18d3      	adds	r3, r2, r3
    6d1e:	3308      	adds	r3, #8
    6d20:	681b      	ldr	r3, [r3, #0]
    6d22:	68fa      	ldr	r2, [r7, #12]
    6d24:	4013      	ands	r3, r2
    6d26:	d118      	bne.n	6d5a <digitalWrite+0x9e>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    6d28:	4c1c      	ldr	r4, [pc, #112]	; (6d9c <digitalWrite+0xe0>)
    6d2a:	2317      	movs	r3, #23
    6d2c:	18fb      	adds	r3, r7, r3
    6d2e:	781b      	ldrb	r3, [r3, #0]
    6d30:	b25b      	sxtb	r3, r3
    6d32:	683a      	ldr	r2, [r7, #0]
    6d34:	1e51      	subs	r1, r2, #1
    6d36:	418a      	sbcs	r2, r1
    6d38:	b2d1      	uxtb	r1, r2
    6d3a:	2040      	movs	r0, #64	; 0x40
    6d3c:	01db      	lsls	r3, r3, #7
    6d3e:	18e2      	adds	r2, r4, r3
    6d40:	693b      	ldr	r3, [r7, #16]
    6d42:	18d3      	adds	r3, r2, r3
    6d44:	181a      	adds	r2, r3, r0
    6d46:	7813      	ldrb	r3, [r2, #0]
    6d48:	2001      	movs	r0, #1
    6d4a:	4001      	ands	r1, r0
    6d4c:	0088      	lsls	r0, r1, #2
    6d4e:	2104      	movs	r1, #4
    6d50:	438b      	bics	r3, r1
    6d52:	1c19      	adds	r1, r3, #0
    6d54:	1c03      	adds	r3, r0, #0
    6d56:	430b      	orrs	r3, r1
    6d58:	7013      	strb	r3, [r2, #0]
  }

  switch ( ulVal )
    6d5a:	683b      	ldr	r3, [r7, #0]
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d10a      	bne.n	6d76 <digitalWrite+0xba>
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    6d60:	4a0e      	ldr	r2, [pc, #56]	; (6d9c <digitalWrite+0xe0>)
    6d62:	2317      	movs	r3, #23
    6d64:	18fb      	adds	r3, r7, r3
    6d66:	781b      	ldrb	r3, [r3, #0]
    6d68:	b25b      	sxtb	r3, r3
    6d6a:	01db      	lsls	r3, r3, #7
    6d6c:	18d3      	adds	r3, r2, r3
    6d6e:	3314      	adds	r3, #20
    6d70:	68fa      	ldr	r2, [r7, #12]
    6d72:	601a      	str	r2, [r3, #0]
    break ;
    6d74:	e00a      	b.n	6d8c <digitalWrite+0xd0>

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    6d76:	4a09      	ldr	r2, [pc, #36]	; (6d9c <digitalWrite+0xe0>)
    6d78:	2317      	movs	r3, #23
    6d7a:	18fb      	adds	r3, r7, r3
    6d7c:	781b      	ldrb	r3, [r3, #0]
    6d7e:	b25b      	sxtb	r3, r3
    6d80:	01db      	lsls	r3, r3, #7
    6d82:	18d3      	adds	r3, r2, r3
    6d84:	3318      	adds	r3, #24
    6d86:	68fa      	ldr	r2, [r7, #12]
    6d88:	601a      	str	r2, [r3, #0]
    break ;
    6d8a:	46c0      	nop			; (mov r8, r8)
  }

  return ;
    6d8c:	46c0      	nop			; (mov r8, r8)
    6d8e:	e000      	b.n	6d92 <digitalWrite+0xd6>
    return ;
    6d90:	46c0      	nop			; (mov r8, r8)
}
    6d92:	46bd      	mov	sp, r7
    6d94:	b007      	add	sp, #28
    6d96:	bd90      	pop	{r4, r7, pc}
    6d98:	000138cc 	.word	0x000138cc
    6d9c:	41004400 	.word	0x41004400

00006da0 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    6da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6da2:	b085      	sub	sp, #20
    6da4:	af00      	add	r7, sp, #0
    6da6:	6078      	str	r0, [r7, #4]
    6da8:	000a      	movs	r2, r1
    6daa:	1cfb      	adds	r3, r7, #3
    6dac:	701a      	strb	r2, [r3, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6dae:	49a0      	ldr	r1, [pc, #640]	; (7030 <pinPeripheral+0x290>)
    6db0:	687a      	ldr	r2, [r7, #4]
    6db2:	0013      	movs	r3, r2
    6db4:	005b      	lsls	r3, r3, #1
    6db6:	189b      	adds	r3, r3, r2
    6db8:	00db      	lsls	r3, r3, #3
    6dba:	18cb      	adds	r3, r1, r3
    6dbc:	3308      	adds	r3, #8
    6dbe:	781b      	ldrb	r3, [r3, #0]
    6dc0:	b25b      	sxtb	r3, r3
    6dc2:	3301      	adds	r3, #1
    6dc4:	d102      	bne.n	6dcc <pinPeripheral+0x2c>
  {
    return -1 ;
    6dc6:	2301      	movs	r3, #1
    6dc8:	425b      	negs	r3, r3
    6dca:	e12d      	b.n	7028 <pinPeripheral+0x288>
  }

  switch ( ulPeripheral )
    6dcc:	1cfb      	adds	r3, r7, #3
    6dce:	781b      	ldrb	r3, [r3, #0]
    6dd0:	b25b      	sxtb	r3, r3
    6dd2:	3301      	adds	r3, #1
    6dd4:	2b0c      	cmp	r3, #12
    6dd6:	d900      	bls.n	6dda <pinPeripheral+0x3a>
    6dd8:	e125      	b.n	7026 <pinPeripheral+0x286>
    6dda:	009a      	lsls	r2, r3, #2
    6ddc:	4b95      	ldr	r3, [pc, #596]	; (7034 <pinPeripheral+0x294>)
    6dde:	18d3      	adds	r3, r2, r3
    6de0:	681b      	ldr	r3, [r3, #0]
    6de2:	469f      	mov	pc, r3
    case PIO_OUTPUT:
      // Disable peripheral muxing, done in pinMode
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
    6de4:	1cfb      	adds	r3, r7, #3
    6de6:	781b      	ldrb	r3, [r3, #0]
    6de8:	b25b      	sxtb	r3, r3
    6dea:	2b09      	cmp	r3, #9
    6dec:	d105      	bne.n	6dfa <pinPeripheral+0x5a>
      {
        pinMode( ulPin, INPUT ) ;
    6dee:	687b      	ldr	r3, [r7, #4]
    6df0:	2100      	movs	r1, #0
    6df2:	0018      	movs	r0, r3
    6df4:	f7ff fe38 	bl	6a68 <pinMode>
          {
            // PIO_DIGITAL, do we have to do something as all cases are covered?
          }
        }
      }
    break ;
    6df8:	e114      	b.n	7024 <pinPeripheral+0x284>
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    6dfa:	1cfb      	adds	r3, r7, #3
    6dfc:	781b      	ldrb	r3, [r3, #0]
    6dfe:	b25b      	sxtb	r3, r3
    6e00:	2b0a      	cmp	r3, #10
    6e02:	d105      	bne.n	6e10 <pinPeripheral+0x70>
          pinMode( ulPin, INPUT_PULLUP ) ;
    6e04:	687b      	ldr	r3, [r7, #4]
    6e06:	2102      	movs	r1, #2
    6e08:	0018      	movs	r0, r3
    6e0a:	f7ff fe2d 	bl	6a68 <pinMode>
    break ;
    6e0e:	e109      	b.n	7024 <pinPeripheral+0x284>
          if ( ulPeripheral == PIO_OUTPUT )
    6e10:	1cfb      	adds	r3, r7, #3
    6e12:	781b      	ldrb	r3, [r3, #0]
    6e14:	b25b      	sxtb	r3, r3
    6e16:	2b0b      	cmp	r3, #11
    6e18:	d000      	beq.n	6e1c <pinPeripheral+0x7c>
    6e1a:	e103      	b.n	7024 <pinPeripheral+0x284>
            pinMode( ulPin, OUTPUT ) ;
    6e1c:	687b      	ldr	r3, [r7, #4]
    6e1e:	2101      	movs	r1, #1
    6e20:	0018      	movs	r0, r3
    6e22:	f7ff fe21 	bl	6a68 <pinMode>
    break ;
    6e26:	e0fd      	b.n	7024 <pinPeripheral+0x284>
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6e28:	4981      	ldr	r1, [pc, #516]	; (7030 <pinPeripheral+0x290>)
    6e2a:	687a      	ldr	r2, [r7, #4]
    6e2c:	0013      	movs	r3, r2
    6e2e:	005b      	lsls	r3, r3, #1
    6e30:	189b      	adds	r3, r3, r2
    6e32:	00db      	lsls	r3, r3, #3
    6e34:	18cb      	adds	r3, r1, r3
    6e36:	3304      	adds	r3, #4
    6e38:	681b      	ldr	r3, [r3, #0]
    6e3a:	2201      	movs	r2, #1
    6e3c:	4013      	ands	r3, r2
    6e3e:	d076      	beq.n	6f2e <pinPeripheral+0x18e>
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    6e40:	487d      	ldr	r0, [pc, #500]	; (7038 <pinPeripheral+0x298>)
    6e42:	497b      	ldr	r1, [pc, #492]	; (7030 <pinPeripheral+0x290>)
    6e44:	687a      	ldr	r2, [r7, #4]
    6e46:	0013      	movs	r3, r2
    6e48:	005b      	lsls	r3, r3, #1
    6e4a:	189b      	adds	r3, r3, r2
    6e4c:	00db      	lsls	r3, r3, #3
    6e4e:	565b      	ldrsb	r3, [r3, r1]
    6e50:	001c      	movs	r4, r3
    6e52:	4977      	ldr	r1, [pc, #476]	; (7030 <pinPeripheral+0x290>)
    6e54:	687a      	ldr	r2, [r7, #4]
    6e56:	0013      	movs	r3, r2
    6e58:	005b      	lsls	r3, r3, #1
    6e5a:	189b      	adds	r3, r3, r2
    6e5c:	00db      	lsls	r3, r3, #3
    6e5e:	18cb      	adds	r3, r1, r3
    6e60:	3304      	adds	r3, #4
    6e62:	681b      	ldr	r3, [r3, #0]
    6e64:	085b      	lsrs	r3, r3, #1
    6e66:	2130      	movs	r1, #48	; 0x30
    6e68:	01e2      	lsls	r2, r4, #7
    6e6a:	1882      	adds	r2, r0, r2
    6e6c:	18d3      	adds	r3, r2, r3
    6e6e:	185b      	adds	r3, r3, r1
    6e70:	781b      	ldrb	r3, [r3, #0]
    6e72:	b2db      	uxtb	r3, r3
    6e74:	001a      	movs	r2, r3
    6e76:	230f      	movs	r3, #15
    6e78:	4013      	ands	r3, r2
    6e7a:	60fb      	str	r3, [r7, #12]
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    6e7c:	486e      	ldr	r0, [pc, #440]	; (7038 <pinPeripheral+0x298>)
    6e7e:	496c      	ldr	r1, [pc, #432]	; (7030 <pinPeripheral+0x290>)
    6e80:	687a      	ldr	r2, [r7, #4]
    6e82:	0013      	movs	r3, r2
    6e84:	005b      	lsls	r3, r3, #1
    6e86:	189b      	adds	r3, r3, r2
    6e88:	00db      	lsls	r3, r3, #3
    6e8a:	565b      	ldrsb	r3, [r3, r1]
    6e8c:	001d      	movs	r5, r3
    6e8e:	4968      	ldr	r1, [pc, #416]	; (7030 <pinPeripheral+0x290>)
    6e90:	687a      	ldr	r2, [r7, #4]
    6e92:	0013      	movs	r3, r2
    6e94:	005b      	lsls	r3, r3, #1
    6e96:	189b      	adds	r3, r3, r2
    6e98:	00db      	lsls	r3, r3, #3
    6e9a:	18cb      	adds	r3, r1, r3
    6e9c:	3304      	adds	r3, #4
    6e9e:	681b      	ldr	r3, [r3, #0]
    6ea0:	085b      	lsrs	r3, r3, #1
    6ea2:	1cfa      	adds	r2, r7, #3
    6ea4:	7812      	ldrb	r2, [r2, #0]
    6ea6:	0112      	lsls	r2, r2, #4
    6ea8:	b2d1      	uxtb	r1, r2
    6eaa:	68fa      	ldr	r2, [r7, #12]
    6eac:	b2d2      	uxtb	r2, r2
    6eae:	430a      	orrs	r2, r1
    6eb0:	b2d4      	uxtb	r4, r2
    6eb2:	2130      	movs	r1, #48	; 0x30
    6eb4:	01ea      	lsls	r2, r5, #7
    6eb6:	1882      	adds	r2, r0, r2
    6eb8:	18d3      	adds	r3, r2, r3
    6eba:	185b      	adds	r3, r3, r1
    6ebc:	1c22      	adds	r2, r4, #0
    6ebe:	701a      	strb	r2, [r3, #0]
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    6ec0:	4c5d      	ldr	r4, [pc, #372]	; (7038 <pinPeripheral+0x298>)
    6ec2:	495b      	ldr	r1, [pc, #364]	; (7030 <pinPeripheral+0x290>)
    6ec4:	687a      	ldr	r2, [r7, #4]
    6ec6:	0013      	movs	r3, r2
    6ec8:	005b      	lsls	r3, r3, #1
    6eca:	189b      	adds	r3, r3, r2
    6ecc:	00db      	lsls	r3, r3, #3
    6ece:	565b      	ldrsb	r3, [r3, r1]
    6ed0:	001e      	movs	r6, r3
    6ed2:	4957      	ldr	r1, [pc, #348]	; (7030 <pinPeripheral+0x290>)
    6ed4:	687a      	ldr	r2, [r7, #4]
    6ed6:	0013      	movs	r3, r2
    6ed8:	005b      	lsls	r3, r3, #1
    6eda:	189b      	adds	r3, r3, r2
    6edc:	00db      	lsls	r3, r3, #3
    6ede:	18cb      	adds	r3, r1, r3
    6ee0:	3304      	adds	r3, #4
    6ee2:	6819      	ldr	r1, [r3, #0]
    6ee4:	4d54      	ldr	r5, [pc, #336]	; (7038 <pinPeripheral+0x298>)
    6ee6:	4852      	ldr	r0, [pc, #328]	; (7030 <pinPeripheral+0x290>)
    6ee8:	687a      	ldr	r2, [r7, #4]
    6eea:	0013      	movs	r3, r2
    6eec:	005b      	lsls	r3, r3, #1
    6eee:	189b      	adds	r3, r3, r2
    6ef0:	00db      	lsls	r3, r3, #3
    6ef2:	561b      	ldrsb	r3, [r3, r0]
    6ef4:	469c      	mov	ip, r3
    6ef6:	484e      	ldr	r0, [pc, #312]	; (7030 <pinPeripheral+0x290>)
    6ef8:	687a      	ldr	r2, [r7, #4]
    6efa:	0013      	movs	r3, r2
    6efc:	005b      	lsls	r3, r3, #1
    6efe:	189b      	adds	r3, r3, r2
    6f00:	00db      	lsls	r3, r3, #3
    6f02:	18c3      	adds	r3, r0, r3
    6f04:	3304      	adds	r3, #4
    6f06:	681b      	ldr	r3, [r3, #0]
    6f08:	2040      	movs	r0, #64	; 0x40
    6f0a:	4662      	mov	r2, ip
    6f0c:	01d2      	lsls	r2, r2, #7
    6f0e:	18aa      	adds	r2, r5, r2
    6f10:	18d3      	adds	r3, r2, r3
    6f12:	181b      	adds	r3, r3, r0
    6f14:	781b      	ldrb	r3, [r3, #0]
    6f16:	b2db      	uxtb	r3, r3
    6f18:	2201      	movs	r2, #1
    6f1a:	4313      	orrs	r3, r2
    6f1c:	b2d8      	uxtb	r0, r3
    6f1e:	2240      	movs	r2, #64	; 0x40
    6f20:	01f3      	lsls	r3, r6, #7
    6f22:	18e3      	adds	r3, r4, r3
    6f24:	185b      	adds	r3, r3, r1
    6f26:	189b      	adds	r3, r3, r2
    6f28:	1c02      	adds	r2, r0, #0
    6f2a:	701a      	strb	r2, [r3, #0]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
      }
#endif
    break ;
    6f2c:	e07b      	b.n	7026 <pinPeripheral+0x286>
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    6f2e:	4842      	ldr	r0, [pc, #264]	; (7038 <pinPeripheral+0x298>)
    6f30:	493f      	ldr	r1, [pc, #252]	; (7030 <pinPeripheral+0x290>)
    6f32:	687a      	ldr	r2, [r7, #4]
    6f34:	0013      	movs	r3, r2
    6f36:	005b      	lsls	r3, r3, #1
    6f38:	189b      	adds	r3, r3, r2
    6f3a:	00db      	lsls	r3, r3, #3
    6f3c:	565b      	ldrsb	r3, [r3, r1]
    6f3e:	001c      	movs	r4, r3
    6f40:	493b      	ldr	r1, [pc, #236]	; (7030 <pinPeripheral+0x290>)
    6f42:	687a      	ldr	r2, [r7, #4]
    6f44:	0013      	movs	r3, r2
    6f46:	005b      	lsls	r3, r3, #1
    6f48:	189b      	adds	r3, r3, r2
    6f4a:	00db      	lsls	r3, r3, #3
    6f4c:	18cb      	adds	r3, r1, r3
    6f4e:	3304      	adds	r3, #4
    6f50:	681b      	ldr	r3, [r3, #0]
    6f52:	085b      	lsrs	r3, r3, #1
    6f54:	2130      	movs	r1, #48	; 0x30
    6f56:	01e2      	lsls	r2, r4, #7
    6f58:	1882      	adds	r2, r0, r2
    6f5a:	18d3      	adds	r3, r2, r3
    6f5c:	185b      	adds	r3, r3, r1
    6f5e:	781b      	ldrb	r3, [r3, #0]
    6f60:	b2db      	uxtb	r3, r3
    6f62:	001a      	movs	r2, r3
    6f64:	23f0      	movs	r3, #240	; 0xf0
    6f66:	4013      	ands	r3, r2
    6f68:	60bb      	str	r3, [r7, #8]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    6f6a:	4833      	ldr	r0, [pc, #204]	; (7038 <pinPeripheral+0x298>)
    6f6c:	4930      	ldr	r1, [pc, #192]	; (7030 <pinPeripheral+0x290>)
    6f6e:	687a      	ldr	r2, [r7, #4]
    6f70:	0013      	movs	r3, r2
    6f72:	005b      	lsls	r3, r3, #1
    6f74:	189b      	adds	r3, r3, r2
    6f76:	00db      	lsls	r3, r3, #3
    6f78:	565b      	ldrsb	r3, [r3, r1]
    6f7a:	001d      	movs	r5, r3
    6f7c:	492c      	ldr	r1, [pc, #176]	; (7030 <pinPeripheral+0x290>)
    6f7e:	687a      	ldr	r2, [r7, #4]
    6f80:	0013      	movs	r3, r2
    6f82:	005b      	lsls	r3, r3, #1
    6f84:	189b      	adds	r3, r3, r2
    6f86:	00db      	lsls	r3, r3, #3
    6f88:	18cb      	adds	r3, r1, r3
    6f8a:	3304      	adds	r3, #4
    6f8c:	681b      	ldr	r3, [r3, #0]
    6f8e:	085b      	lsrs	r3, r3, #1
    6f90:	1cfa      	adds	r2, r7, #3
    6f92:	7812      	ldrb	r2, [r2, #0]
    6f94:	210f      	movs	r1, #15
    6f96:	400a      	ands	r2, r1
    6f98:	b2d1      	uxtb	r1, r2
    6f9a:	68ba      	ldr	r2, [r7, #8]
    6f9c:	b2d2      	uxtb	r2, r2
    6f9e:	430a      	orrs	r2, r1
    6fa0:	b2d4      	uxtb	r4, r2
    6fa2:	2130      	movs	r1, #48	; 0x30
    6fa4:	01ea      	lsls	r2, r5, #7
    6fa6:	1882      	adds	r2, r0, r2
    6fa8:	18d3      	adds	r3, r2, r3
    6faa:	185b      	adds	r3, r3, r1
    6fac:	1c22      	adds	r2, r4, #0
    6fae:	701a      	strb	r2, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    6fb0:	4c21      	ldr	r4, [pc, #132]	; (7038 <pinPeripheral+0x298>)
    6fb2:	491f      	ldr	r1, [pc, #124]	; (7030 <pinPeripheral+0x290>)
    6fb4:	687a      	ldr	r2, [r7, #4]
    6fb6:	0013      	movs	r3, r2
    6fb8:	005b      	lsls	r3, r3, #1
    6fba:	189b      	adds	r3, r3, r2
    6fbc:	00db      	lsls	r3, r3, #3
    6fbe:	565b      	ldrsb	r3, [r3, r1]
    6fc0:	001e      	movs	r6, r3
    6fc2:	491b      	ldr	r1, [pc, #108]	; (7030 <pinPeripheral+0x290>)
    6fc4:	687a      	ldr	r2, [r7, #4]
    6fc6:	0013      	movs	r3, r2
    6fc8:	005b      	lsls	r3, r3, #1
    6fca:	189b      	adds	r3, r3, r2
    6fcc:	00db      	lsls	r3, r3, #3
    6fce:	18cb      	adds	r3, r1, r3
    6fd0:	3304      	adds	r3, #4
    6fd2:	6819      	ldr	r1, [r3, #0]
    6fd4:	4d18      	ldr	r5, [pc, #96]	; (7038 <pinPeripheral+0x298>)
    6fd6:	4816      	ldr	r0, [pc, #88]	; (7030 <pinPeripheral+0x290>)
    6fd8:	687a      	ldr	r2, [r7, #4]
    6fda:	0013      	movs	r3, r2
    6fdc:	005b      	lsls	r3, r3, #1
    6fde:	189b      	adds	r3, r3, r2
    6fe0:	00db      	lsls	r3, r3, #3
    6fe2:	561b      	ldrsb	r3, [r3, r0]
    6fe4:	469c      	mov	ip, r3
    6fe6:	4812      	ldr	r0, [pc, #72]	; (7030 <pinPeripheral+0x290>)
    6fe8:	687a      	ldr	r2, [r7, #4]
    6fea:	0013      	movs	r3, r2
    6fec:	005b      	lsls	r3, r3, #1
    6fee:	189b      	adds	r3, r3, r2
    6ff0:	00db      	lsls	r3, r3, #3
    6ff2:	18c3      	adds	r3, r0, r3
    6ff4:	3304      	adds	r3, #4
    6ff6:	681b      	ldr	r3, [r3, #0]
    6ff8:	2040      	movs	r0, #64	; 0x40
    6ffa:	4662      	mov	r2, ip
    6ffc:	01d2      	lsls	r2, r2, #7
    6ffe:	18aa      	adds	r2, r5, r2
    7000:	18d3      	adds	r3, r2, r3
    7002:	181b      	adds	r3, r3, r0
    7004:	781b      	ldrb	r3, [r3, #0]
    7006:	b2db      	uxtb	r3, r3
    7008:	2201      	movs	r2, #1
    700a:	4313      	orrs	r3, r2
    700c:	b2d8      	uxtb	r0, r3
    700e:	2240      	movs	r2, #64	; 0x40
    7010:	01f3      	lsls	r3, r6, #7
    7012:	18e3      	adds	r3, r4, r3
    7014:	185b      	adds	r3, r3, r1
    7016:	189b      	adds	r3, r3, r2
    7018:	1c02      	adds	r2, r0, #0
    701a:	701a      	strb	r2, [r3, #0]
    break ;
    701c:	e003      	b.n	7026 <pinPeripheral+0x286>

    case PIO_NOT_A_PIN:
      return -1l ;
    701e:	2301      	movs	r3, #1
    7020:	425b      	negs	r3, r3
    7022:	e001      	b.n	7028 <pinPeripheral+0x288>
    break ;
    7024:	46c0      	nop			; (mov r8, r8)
    break ;
  }

  return 0l ;
    7026:	2300      	movs	r3, #0
}
    7028:	0018      	movs	r0, r3
    702a:	46bd      	mov	sp, r7
    702c:	b005      	add	sp, #20
    702e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7030:	000138cc 	.word	0x000138cc
    7034:	0001372c 	.word	0x0001372c
    7038:	41004400 	.word	0x41004400

0000703c <_Z3maplllll>:

  return random(diff) + howsmall;
}

extern long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    703c:	b580      	push	{r7, lr}
    703e:	b084      	sub	sp, #16
    7040:	af00      	add	r7, sp, #0
    7042:	60f8      	str	r0, [r7, #12]
    7044:	60b9      	str	r1, [r7, #8]
    7046:	607a      	str	r2, [r7, #4]
    7048:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    704a:	68fa      	ldr	r2, [r7, #12]
    704c:	68bb      	ldr	r3, [r7, #8]
    704e:	1ad3      	subs	r3, r2, r3
    7050:	69b9      	ldr	r1, [r7, #24]
    7052:	683a      	ldr	r2, [r7, #0]
    7054:	1a8a      	subs	r2, r1, r2
    7056:	435a      	muls	r2, r3
    7058:	0010      	movs	r0, r2
    705a:	687a      	ldr	r2, [r7, #4]
    705c:	68bb      	ldr	r3, [r7, #8]
    705e:	1ad3      	subs	r3, r2, r3
    7060:	0019      	movs	r1, r3
    7062:	f007 fda5 	bl	ebb0 <__divsi3>
    7066:	0003      	movs	r3, r0
    7068:	001a      	movs	r2, r3
    706a:	683b      	ldr	r3, [r7, #0]
    706c:	18d3      	adds	r3, r2, r3
}
    706e:	0018      	movs	r0, r3
    7070:	46bd      	mov	sp, r7
    7072:	b004      	add	sp, #16
    7074:	bd80      	pop	{r7, pc}

00007076 <_ZNK6String14StringIfHelperEv>:
{
	// use a function pointer to allow for "if (s)" without the
	// complications of an operator bool(). for more information, see:
	// http://www.artima.com/cppsource/safebool.html
	typedef void (String::*StringIfHelperType)() const;
	void StringIfHelper() const {}
    7076:	b580      	push	{r7, lr}
    7078:	b082      	sub	sp, #8
    707a:	af00      	add	r7, sp, #0
    707c:	6078      	str	r0, [r7, #4]
    707e:	46c0      	nop			; (mov r8, r8)
    7080:	46bd      	mov	sp, r7
    7082:	b002      	add	sp, #8
    7084:	bd80      	pop	{r7, pc}
	...

00007088 <_ZNK6StringcvMS_KFvvEEv>:
	friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    7088:	b580      	push	{r7, lr}
    708a:	b082      	sub	sp, #8
    708c:	af00      	add	r7, sp, #0
    708e:	6078      	str	r0, [r7, #4]
    7090:	6039      	str	r1, [r7, #0]
    7092:	683b      	ldr	r3, [r7, #0]
    7094:	681b      	ldr	r3, [r3, #0]
    7096:	2b00      	cmp	r3, #0
    7098:	d106      	bne.n	70a8 <_ZNK6StringcvMS_KFvvEEv+0x20>
    709a:	687b      	ldr	r3, [r7, #4]
    709c:	2200      	movs	r2, #0
    709e:	601a      	str	r2, [r3, #0]
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	2200      	movs	r2, #0
    70a4:	605a      	str	r2, [r3, #4]
    70a6:	e005      	b.n	70b4 <_ZNK6StringcvMS_KFvvEEv+0x2c>
    70a8:	687b      	ldr	r3, [r7, #4]
    70aa:	4a04      	ldr	r2, [pc, #16]	; (70bc <_ZNK6StringcvMS_KFvvEEv+0x34>)
    70ac:	601a      	str	r2, [r3, #0]
    70ae:	687b      	ldr	r3, [r7, #4]
    70b0:	2200      	movs	r2, #0
    70b2:	605a      	str	r2, [r3, #4]
    70b4:	6878      	ldr	r0, [r7, #4]
    70b6:	46bd      	mov	sp, r7
    70b8:	b002      	add	sp, #8
    70ba:	bd80      	pop	{r7, pc}
    70bc:	00007077 	.word	0x00007077

000070c0 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    70c0:	b580      	push	{r7, lr}
    70c2:	b086      	sub	sp, #24
    70c4:	af00      	add	r7, sp, #0
    70c6:	6078      	str	r0, [r7, #4]
    70c8:	0008      	movs	r0, r1
    70ca:	0011      	movs	r1, r2
    70cc:	1cfb      	adds	r3, r7, #3
    70ce:	1c02      	adds	r2, r0, #0
    70d0:	701a      	strb	r2, [r3, #0]
    70d2:	1cbb      	adds	r3, r7, #2
    70d4:	1c0a      	adds	r2, r1, #0
    70d6:	701a      	strb	r2, [r3, #0]
{
	init();
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	0018      	movs	r0, r3
    70dc:	f000 f842 	bl	7164 <_ZN6String4initEv>
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
    70e0:	1cfb      	adds	r3, r7, #3
    70e2:	7818      	ldrb	r0, [r3, #0]
    70e4:	1cbb      	adds	r3, r7, #2
    70e6:	781a      	ldrb	r2, [r3, #0]
    70e8:	230c      	movs	r3, #12
    70ea:	18fb      	adds	r3, r7, r3
    70ec:	0019      	movs	r1, r3
    70ee:	f006 fb8c 	bl	d80a <utoa>
	*this = buf;
    70f2:	230c      	movs	r3, #12
    70f4:	18fa      	adds	r2, r7, r3
    70f6:	687b      	ldr	r3, [r7, #4]
    70f8:	0011      	movs	r1, r2
    70fa:	0018      	movs	r0, r3
    70fc:	f000 f936 	bl	736c <_ZN6StringaSEPKc>
}
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	0018      	movs	r0, r3
    7104:	46bd      	mov	sp, r7
    7106:	b006      	add	sp, #24
    7108:	bd80      	pop	{r7, pc}

0000710a <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
    710a:	b580      	push	{r7, lr}
    710c:	b08e      	sub	sp, #56	; 0x38
    710e:	af00      	add	r7, sp, #0
    7110:	60f8      	str	r0, [r7, #12]
    7112:	60b9      	str	r1, [r7, #8]
    7114:	1dfb      	adds	r3, r7, #7
    7116:	701a      	strb	r2, [r3, #0]
{
	init();
    7118:	68fb      	ldr	r3, [r7, #12]
    711a:	0018      	movs	r0, r3
    711c:	f000 f822 	bl	7164 <_ZN6String4initEv>
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
    7120:	1dfb      	adds	r3, r7, #7
    7122:	781a      	ldrb	r2, [r3, #0]
    7124:	2314      	movs	r3, #20
    7126:	18f9      	adds	r1, r7, r3
    7128:	68bb      	ldr	r3, [r7, #8]
    712a:	0018      	movs	r0, r3
    712c:	f006 fae6 	bl	d6fc <itoa>
	*this = buf;
    7130:	2314      	movs	r3, #20
    7132:	18fa      	adds	r2, r7, r3
    7134:	68fb      	ldr	r3, [r7, #12]
    7136:	0011      	movs	r1, r2
    7138:	0018      	movs	r0, r3
    713a:	f000 f917 	bl	736c <_ZN6StringaSEPKc>
}
    713e:	68fb      	ldr	r3, [r7, #12]
    7140:	0018      	movs	r0, r3
    7142:	46bd      	mov	sp, r7
    7144:	b00e      	add	sp, #56	; 0x38
    7146:	bd80      	pop	{r7, pc}

00007148 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
    7148:	b580      	push	{r7, lr}
    714a:	b082      	sub	sp, #8
    714c:	af00      	add	r7, sp, #0
    714e:	6078      	str	r0, [r7, #4]
{
	free(buffer);
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	681b      	ldr	r3, [r3, #0]
    7154:	0018      	movs	r0, r3
    7156:	f009 fc43 	bl	109e0 <free>
}
    715a:	687b      	ldr	r3, [r7, #4]
    715c:	0018      	movs	r0, r3
    715e:	46bd      	mov	sp, r7
    7160:	b002      	add	sp, #8
    7162:	bd80      	pop	{r7, pc}

00007164 <_ZN6String4initEv>:
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
    7164:	b580      	push	{r7, lr}
    7166:	b082      	sub	sp, #8
    7168:	af00      	add	r7, sp, #0
    716a:	6078      	str	r0, [r7, #4]
	buffer = NULL;
    716c:	687b      	ldr	r3, [r7, #4]
    716e:	2200      	movs	r2, #0
    7170:	601a      	str	r2, [r3, #0]
	capacity = 0;
    7172:	687b      	ldr	r3, [r7, #4]
    7174:	2200      	movs	r2, #0
    7176:	605a      	str	r2, [r3, #4]
	len = 0;
    7178:	687b      	ldr	r3, [r7, #4]
    717a:	2200      	movs	r2, #0
    717c:	609a      	str	r2, [r3, #8]
}
    717e:	46c0      	nop			; (mov r8, r8)
    7180:	46bd      	mov	sp, r7
    7182:	b002      	add	sp, #8
    7184:	bd80      	pop	{r7, pc}

00007186 <_ZN6String10invalidateEv>:

void String::invalidate(void)
{
    7186:	b580      	push	{r7, lr}
    7188:	b082      	sub	sp, #8
    718a:	af00      	add	r7, sp, #0
    718c:	6078      	str	r0, [r7, #4]
	if (buffer) free(buffer);
    718e:	687b      	ldr	r3, [r7, #4]
    7190:	681b      	ldr	r3, [r3, #0]
    7192:	2b00      	cmp	r3, #0
    7194:	d004      	beq.n	71a0 <_ZN6String10invalidateEv+0x1a>
    7196:	687b      	ldr	r3, [r7, #4]
    7198:	681b      	ldr	r3, [r3, #0]
    719a:	0018      	movs	r0, r3
    719c:	f009 fc20 	bl	109e0 <free>
	buffer = NULL;
    71a0:	687b      	ldr	r3, [r7, #4]
    71a2:	2200      	movs	r2, #0
    71a4:	601a      	str	r2, [r3, #0]
	capacity = len = 0;
    71a6:	687b      	ldr	r3, [r7, #4]
    71a8:	2200      	movs	r2, #0
    71aa:	609a      	str	r2, [r3, #8]
    71ac:	687b      	ldr	r3, [r7, #4]
    71ae:	689a      	ldr	r2, [r3, #8]
    71b0:	687b      	ldr	r3, [r7, #4]
    71b2:	605a      	str	r2, [r3, #4]
}
    71b4:	46c0      	nop			; (mov r8, r8)
    71b6:	46bd      	mov	sp, r7
    71b8:	b002      	add	sp, #8
    71ba:	bd80      	pop	{r7, pc}

000071bc <_ZN6String7reserveEj>:

unsigned char String::reserve(unsigned int size)
{
    71bc:	b580      	push	{r7, lr}
    71be:	b082      	sub	sp, #8
    71c0:	af00      	add	r7, sp, #0
    71c2:	6078      	str	r0, [r7, #4]
    71c4:	6039      	str	r1, [r7, #0]
	if (buffer && capacity >= size) return 1;
    71c6:	687b      	ldr	r3, [r7, #4]
    71c8:	681b      	ldr	r3, [r3, #0]
    71ca:	2b00      	cmp	r3, #0
    71cc:	d006      	beq.n	71dc <_ZN6String7reserveEj+0x20>
    71ce:	687b      	ldr	r3, [r7, #4]
    71d0:	685a      	ldr	r2, [r3, #4]
    71d2:	683b      	ldr	r3, [r7, #0]
    71d4:	429a      	cmp	r2, r3
    71d6:	d301      	bcc.n	71dc <_ZN6String7reserveEj+0x20>
    71d8:	2301      	movs	r3, #1
    71da:	e016      	b.n	720a <_ZN6String7reserveEj+0x4e>
	if (changeBuffer(size)) {
    71dc:	683a      	ldr	r2, [r7, #0]
    71de:	687b      	ldr	r3, [r7, #4]
    71e0:	0011      	movs	r1, r2
    71e2:	0018      	movs	r0, r3
    71e4:	f000 f815 	bl	7212 <_ZN6String12changeBufferEj>
    71e8:	0003      	movs	r3, r0
    71ea:	1e5a      	subs	r2, r3, #1
    71ec:	4193      	sbcs	r3, r2
    71ee:	b2db      	uxtb	r3, r3
    71f0:	2b00      	cmp	r3, #0
    71f2:	d009      	beq.n	7208 <_ZN6String7reserveEj+0x4c>
		if (len == 0) buffer[0] = 0;
    71f4:	687b      	ldr	r3, [r7, #4]
    71f6:	689b      	ldr	r3, [r3, #8]
    71f8:	2b00      	cmp	r3, #0
    71fa:	d103      	bne.n	7204 <_ZN6String7reserveEj+0x48>
    71fc:	687b      	ldr	r3, [r7, #4]
    71fe:	681b      	ldr	r3, [r3, #0]
    7200:	2200      	movs	r2, #0
    7202:	701a      	strb	r2, [r3, #0]
		return 1;
    7204:	2301      	movs	r3, #1
    7206:	e000      	b.n	720a <_ZN6String7reserveEj+0x4e>
	}
	return 0;
    7208:	2300      	movs	r3, #0
}
    720a:	0018      	movs	r0, r3
    720c:	46bd      	mov	sp, r7
    720e:	b002      	add	sp, #8
    7210:	bd80      	pop	{r7, pc}

00007212 <_ZN6String12changeBufferEj>:

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    7212:	b580      	push	{r7, lr}
    7214:	b084      	sub	sp, #16
    7216:	af00      	add	r7, sp, #0
    7218:	6078      	str	r0, [r7, #4]
    721a:	6039      	str	r1, [r7, #0]
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    721c:	687b      	ldr	r3, [r7, #4]
    721e:	681a      	ldr	r2, [r3, #0]
    7220:	683b      	ldr	r3, [r7, #0]
    7222:	3301      	adds	r3, #1
    7224:	0019      	movs	r1, r3
    7226:	0010      	movs	r0, r2
    7228:	f00a fa72 	bl	11710 <realloc>
    722c:	0003      	movs	r3, r0
    722e:	60fb      	str	r3, [r7, #12]
	if (newbuffer) {
    7230:	68fb      	ldr	r3, [r7, #12]
    7232:	2b00      	cmp	r3, #0
    7234:	d007      	beq.n	7246 <_ZN6String12changeBufferEj+0x34>
		buffer = newbuffer;
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	68fa      	ldr	r2, [r7, #12]
    723a:	601a      	str	r2, [r3, #0]
		capacity = maxStrLen;
    723c:	687b      	ldr	r3, [r7, #4]
    723e:	683a      	ldr	r2, [r7, #0]
    7240:	605a      	str	r2, [r3, #4]
		return 1;
    7242:	2301      	movs	r3, #1
    7244:	e000      	b.n	7248 <_ZN6String12changeBufferEj+0x36>
	}
	return 0;
    7246:	2300      	movs	r3, #0
}
    7248:	0018      	movs	r0, r3
    724a:	46bd      	mov	sp, r7
    724c:	b004      	add	sp, #16
    724e:	bd80      	pop	{r7, pc}

00007250 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    7250:	b580      	push	{r7, lr}
    7252:	b084      	sub	sp, #16
    7254:	af00      	add	r7, sp, #0
    7256:	60f8      	str	r0, [r7, #12]
    7258:	60b9      	str	r1, [r7, #8]
    725a:	607a      	str	r2, [r7, #4]
	if (!reserve(length)) {
    725c:	687a      	ldr	r2, [r7, #4]
    725e:	68fb      	ldr	r3, [r7, #12]
    7260:	0011      	movs	r1, r2
    7262:	0018      	movs	r0, r3
    7264:	f7ff ffaa 	bl	71bc <_ZN6String7reserveEj>
    7268:	0003      	movs	r3, r0
    726a:	425a      	negs	r2, r3
    726c:	4153      	adcs	r3, r2
    726e:	b2db      	uxtb	r3, r3
    7270:	2b00      	cmp	r3, #0
    7272:	d005      	beq.n	7280 <_ZN6String4copyEPKcj+0x30>
		invalidate();
    7274:	68fb      	ldr	r3, [r7, #12]
    7276:	0018      	movs	r0, r3
    7278:	f7ff ff85 	bl	7186 <_ZN6String10invalidateEv>
		return *this;
    727c:	68fb      	ldr	r3, [r7, #12]
    727e:	e00a      	b.n	7296 <_ZN6String4copyEPKcj+0x46>
	}
	len = length;
    7280:	68fb      	ldr	r3, [r7, #12]
    7282:	687a      	ldr	r2, [r7, #4]
    7284:	609a      	str	r2, [r3, #8]
	strcpy(buffer, cstr);
    7286:	68fb      	ldr	r3, [r7, #12]
    7288:	681b      	ldr	r3, [r3, #0]
    728a:	68ba      	ldr	r2, [r7, #8]
    728c:	0011      	movs	r1, r2
    728e:	0018      	movs	r0, r3
    7290:	f00a fa68 	bl	11764 <strcpy>
	return *this;
    7294:	68fb      	ldr	r3, [r7, #12]
}
    7296:	0018      	movs	r0, r3
    7298:	46bd      	mov	sp, r7
    729a:	b004      	add	sp, #16
    729c:	bd80      	pop	{r7, pc}

0000729e <_ZN6String4moveERS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    729e:	b580      	push	{r7, lr}
    72a0:	b084      	sub	sp, #16
    72a2:	af00      	add	r7, sp, #0
    72a4:	6078      	str	r0, [r7, #4]
    72a6:	6039      	str	r1, [r7, #0]
	if (buffer) {
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	681b      	ldr	r3, [r3, #0]
    72ac:	2b00      	cmp	r3, #0
    72ae:	d031      	beq.n	7314 <_ZN6String4moveERS_+0x76>
		if (rhs && capacity >= rhs.len) {
    72b0:	2308      	movs	r3, #8
    72b2:	18fb      	adds	r3, r7, r3
    72b4:	683a      	ldr	r2, [r7, #0]
    72b6:	0011      	movs	r1, r2
    72b8:	0018      	movs	r0, r3
    72ba:	f7ff fee5 	bl	7088 <_ZNK6StringcvMS_KFvvEEv>
    72be:	2308      	movs	r3, #8
    72c0:	18fb      	adds	r3, r7, r3
    72c2:	681b      	ldr	r3, [r3, #0]
    72c4:	2b00      	cmp	r3, #0
    72c6:	d105      	bne.n	72d4 <_ZN6String4moveERS_+0x36>
    72c8:	2308      	movs	r3, #8
    72ca:	18fb      	adds	r3, r7, r3
    72cc:	685b      	ldr	r3, [r3, #4]
    72ce:	2201      	movs	r2, #1
    72d0:	4013      	ands	r3, r2
    72d2:	d007      	beq.n	72e4 <_ZN6String4moveERS_+0x46>
    72d4:	687b      	ldr	r3, [r7, #4]
    72d6:	685a      	ldr	r2, [r3, #4]
    72d8:	683b      	ldr	r3, [r7, #0]
    72da:	689b      	ldr	r3, [r3, #8]
    72dc:	429a      	cmp	r2, r3
    72de:	d301      	bcc.n	72e4 <_ZN6String4moveERS_+0x46>
    72e0:	2301      	movs	r3, #1
    72e2:	e000      	b.n	72e6 <_ZN6String4moveERS_+0x48>
    72e4:	2300      	movs	r3, #0
    72e6:	2b00      	cmp	r3, #0
    72e8:	d00f      	beq.n	730a <_ZN6String4moveERS_+0x6c>
			strcpy(buffer, rhs.buffer);
    72ea:	687b      	ldr	r3, [r7, #4]
    72ec:	681a      	ldr	r2, [r3, #0]
    72ee:	683b      	ldr	r3, [r7, #0]
    72f0:	681b      	ldr	r3, [r3, #0]
    72f2:	0019      	movs	r1, r3
    72f4:	0010      	movs	r0, r2
    72f6:	f00a fa35 	bl	11764 <strcpy>
			len = rhs.len;
    72fa:	683b      	ldr	r3, [r7, #0]
    72fc:	689a      	ldr	r2, [r3, #8]
    72fe:	687b      	ldr	r3, [r7, #4]
    7300:	609a      	str	r2, [r3, #8]
			rhs.len = 0;
    7302:	683b      	ldr	r3, [r7, #0]
    7304:	2200      	movs	r2, #0
    7306:	609a      	str	r2, [r3, #8]
			return;
    7308:	e019      	b.n	733e <_ZN6String4moveERS_+0xa0>
		} else {
			free(buffer);
    730a:	687b      	ldr	r3, [r7, #4]
    730c:	681b      	ldr	r3, [r3, #0]
    730e:	0018      	movs	r0, r3
    7310:	f009 fb66 	bl	109e0 <free>
		}
	}
	buffer = rhs.buffer;
    7314:	683b      	ldr	r3, [r7, #0]
    7316:	681a      	ldr	r2, [r3, #0]
    7318:	687b      	ldr	r3, [r7, #4]
    731a:	601a      	str	r2, [r3, #0]
	capacity = rhs.capacity;
    731c:	683b      	ldr	r3, [r7, #0]
    731e:	685a      	ldr	r2, [r3, #4]
    7320:	687b      	ldr	r3, [r7, #4]
    7322:	605a      	str	r2, [r3, #4]
	len = rhs.len;
    7324:	683b      	ldr	r3, [r7, #0]
    7326:	689a      	ldr	r2, [r3, #8]
    7328:	687b      	ldr	r3, [r7, #4]
    732a:	609a      	str	r2, [r3, #8]
	rhs.buffer = NULL;
    732c:	683b      	ldr	r3, [r7, #0]
    732e:	2200      	movs	r2, #0
    7330:	601a      	str	r2, [r3, #0]
	rhs.capacity = 0;
    7332:	683b      	ldr	r3, [r7, #0]
    7334:	2200      	movs	r2, #0
    7336:	605a      	str	r2, [r3, #4]
	rhs.len = 0;
    7338:	683b      	ldr	r3, [r7, #0]
    733a:	2200      	movs	r2, #0
    733c:	609a      	str	r2, [r3, #8]
}
    733e:	46bd      	mov	sp, r7
    7340:	b004      	add	sp, #16
    7342:	bd80      	pop	{r7, pc}

00007344 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    7344:	b580      	push	{r7, lr}
    7346:	b082      	sub	sp, #8
    7348:	af00      	add	r7, sp, #0
    734a:	6078      	str	r0, [r7, #4]
    734c:	6039      	str	r1, [r7, #0]
	if (this != &rval) move(rval);
    734e:	687a      	ldr	r2, [r7, #4]
    7350:	683b      	ldr	r3, [r7, #0]
    7352:	429a      	cmp	r2, r3
    7354:	d005      	beq.n	7362 <_ZN6StringaSEOS_+0x1e>
    7356:	683a      	ldr	r2, [r7, #0]
    7358:	687b      	ldr	r3, [r7, #4]
    735a:	0011      	movs	r1, r2
    735c:	0018      	movs	r0, r3
    735e:	f7ff ff9e 	bl	729e <_ZN6String4moveERS_>
	return *this;
    7362:	687b      	ldr	r3, [r7, #4]
}
    7364:	0018      	movs	r0, r3
    7366:	46bd      	mov	sp, r7
    7368:	b002      	add	sp, #8
    736a:	bd80      	pop	{r7, pc}

0000736c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    736c:	b580      	push	{r7, lr}
    736e:	b082      	sub	sp, #8
    7370:	af00      	add	r7, sp, #0
    7372:	6078      	str	r0, [r7, #4]
    7374:	6039      	str	r1, [r7, #0]
	if (cstr) copy(cstr, strlen(cstr));
    7376:	683b      	ldr	r3, [r7, #0]
    7378:	2b00      	cmp	r3, #0
    737a:	d00a      	beq.n	7392 <_ZN6StringaSEPKc+0x26>
    737c:	683b      	ldr	r3, [r7, #0]
    737e:	0018      	movs	r0, r3
    7380:	f00a f9f8 	bl	11774 <strlen>
    7384:	0002      	movs	r2, r0
    7386:	6839      	ldr	r1, [r7, #0]
    7388:	687b      	ldr	r3, [r7, #4]
    738a:	0018      	movs	r0, r3
    738c:	f7ff ff60 	bl	7250 <_ZN6String4copyEPKcj>
    7390:	e003      	b.n	739a <_ZN6StringaSEPKc+0x2e>
	else invalidate();
    7392:	687b      	ldr	r3, [r7, #4]
    7394:	0018      	movs	r0, r3
    7396:	f7ff fef6 	bl	7186 <_ZN6String10invalidateEv>
	
	return *this;
    739a:	687b      	ldr	r3, [r7, #4]
}
    739c:	0018      	movs	r0, r3
    739e:	46bd      	mov	sp, r7
    73a0:	b002      	add	sp, #8
    73a2:	bd80      	pop	{r7, pc}

000073a4 <_ZNK6String6charAtEj>:
/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
    73a4:	b580      	push	{r7, lr}
    73a6:	b082      	sub	sp, #8
    73a8:	af00      	add	r7, sp, #0
    73aa:	6078      	str	r0, [r7, #4]
    73ac:	6039      	str	r1, [r7, #0]
	return operator[](loc);
    73ae:	683a      	ldr	r2, [r7, #0]
    73b0:	687b      	ldr	r3, [r7, #4]
    73b2:	0011      	movs	r1, r2
    73b4:	0018      	movs	r0, r3
    73b6:	f000 f805 	bl	73c4 <_ZNK6StringixEj>
    73ba:	0003      	movs	r3, r0
}
    73bc:	0018      	movs	r0, r3
    73be:	46bd      	mov	sp, r7
    73c0:	b002      	add	sp, #8
    73c2:	bd80      	pop	{r7, pc}

000073c4 <_ZNK6StringixEj>:
	}
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
    73c4:	b580      	push	{r7, lr}
    73c6:	b082      	sub	sp, #8
    73c8:	af00      	add	r7, sp, #0
    73ca:	6078      	str	r0, [r7, #4]
    73cc:	6039      	str	r1, [r7, #0]
	if (index >= len || !buffer) return 0;
    73ce:	687b      	ldr	r3, [r7, #4]
    73d0:	689a      	ldr	r2, [r3, #8]
    73d2:	683b      	ldr	r3, [r7, #0]
    73d4:	429a      	cmp	r2, r3
    73d6:	d903      	bls.n	73e0 <_ZNK6StringixEj+0x1c>
    73d8:	687b      	ldr	r3, [r7, #4]
    73da:	681b      	ldr	r3, [r3, #0]
    73dc:	2b00      	cmp	r3, #0
    73de:	d101      	bne.n	73e4 <_ZNK6StringixEj+0x20>
    73e0:	2300      	movs	r3, #0
    73e2:	e004      	b.n	73ee <_ZNK6StringixEj+0x2a>
	return buffer[index];
    73e4:	687b      	ldr	r3, [r7, #4]
    73e6:	681a      	ldr	r2, [r3, #0]
    73e8:	683b      	ldr	r3, [r7, #0]
    73ea:	18d3      	adds	r3, r2, r3
    73ec:	781b      	ldrb	r3, [r3, #0]
}
    73ee:	0018      	movs	r0, r3
    73f0:	46bd      	mov	sp, r7
    73f2:	b002      	add	sp, #8
    73f4:	bd80      	pop	{r7, pc}

000073f6 <_ZN15Adafruit_FT6206C1Ev>:
/*! 
    @brief  Instantiates a new FT6206 class
*/
/**************************************************************************/
// I2C, no address adjustments or pins
Adafruit_FT6206::Adafruit_FT6206() {
    73f6:	b580      	push	{r7, lr}
    73f8:	b082      	sub	sp, #8
    73fa:	af00      	add	r7, sp, #0
    73fc:	6078      	str	r0, [r7, #4]
  touches = 0;
    73fe:	687b      	ldr	r3, [r7, #4]
    7400:	2200      	movs	r2, #0
    7402:	701a      	strb	r2, [r3, #0]
}
    7404:	687b      	ldr	r3, [r7, #4]
    7406:	0018      	movs	r0, r3
    7408:	46bd      	mov	sp, r7
    740a:	b002      	add	sp, #8
    740c:	bd80      	pop	{r7, pc}
	...

00007410 <_ZN15Adafruit_FT62065beginEh>:
    @brief  Setups the I2C interface and hardware, identifies if chip is found
    @param  thresh Optional threshhold-for-touch value, default is FT6206_DEFAULT_THRESSHOLD but you can try changing it if your screen is too/not sensitive.
    @returns True if an FT6206 is found, false on any failure
*/
/**************************************************************************/
boolean Adafruit_FT6206::begin(uint8_t thresh) {
    7410:	b590      	push	{r4, r7, lr}
    7412:	b085      	sub	sp, #20
    7414:	af00      	add	r7, sp, #0
    7416:	6078      	str	r0, [r7, #4]
    7418:	000a      	movs	r2, r1
    741a:	1cfb      	adds	r3, r7, #3
    741c:	701a      	strb	r2, [r3, #0]
  Wire.begin();
    741e:	4b1c      	ldr	r3, [pc, #112]	; (7490 <_ZN15Adafruit_FT62065beginEh+0x80>)
    7420:	0018      	movs	r0, r3
    7422:	f004 fbdf 	bl	bbe4 <_ZN7TwoWire5beginEv>
    Serial.print(" = 0x"); Serial.println(readRegister8(i), HEX);
  }
#endif

  // change threshhold to be higher/lower
  writeRegister8(FT62XX_REG_THRESHHOLD, thresh);
    7426:	1cfb      	adds	r3, r7, #3
    7428:	781a      	ldrb	r2, [r3, #0]
    742a:	687b      	ldr	r3, [r7, #4]
    742c:	2180      	movs	r1, #128	; 0x80
    742e:	0018      	movs	r0, r3
    7430:	f000 f9b8 	bl	77a4 <_ZN15Adafruit_FT620614writeRegister8Ehh>
  
  if (readRegister8(FT62XX_REG_VENDID) != FT62XX_VENDID) {
    7434:	687b      	ldr	r3, [r7, #4]
    7436:	21a8      	movs	r1, #168	; 0xa8
    7438:	0018      	movs	r0, r3
    743a:	f000 f985 	bl	7748 <_ZN15Adafruit_FT620613readRegister8Eh>
    743e:	0003      	movs	r3, r0
    7440:	3b11      	subs	r3, #17
    7442:	1e5a      	subs	r2, r3, #1
    7444:	4193      	sbcs	r3, r2
    7446:	b2db      	uxtb	r3, r3
    7448:	2b00      	cmp	r3, #0
    744a:	d001      	beq.n	7450 <_ZN15Adafruit_FT62065beginEh+0x40>
    return false;
    744c:	2300      	movs	r3, #0
    744e:	e01a      	b.n	7486 <_ZN15Adafruit_FT62065beginEh+0x76>
  }
  uint8_t id = readRegister8(FT62XX_REG_CHIPID);
    7450:	230f      	movs	r3, #15
    7452:	18fc      	adds	r4, r7, r3
    7454:	687b      	ldr	r3, [r7, #4]
    7456:	21a3      	movs	r1, #163	; 0xa3
    7458:	0018      	movs	r0, r3
    745a:	f000 f975 	bl	7748 <_ZN15Adafruit_FT620613readRegister8Eh>
    745e:	0003      	movs	r3, r0
    7460:	7023      	strb	r3, [r4, #0]
  if ((id != FT6206_CHIPID) && (id != FT6236_CHIPID) && (id != FT6236U_CHIPID)) {
    7462:	230f      	movs	r3, #15
    7464:	18fb      	adds	r3, r7, r3
    7466:	781b      	ldrb	r3, [r3, #0]
    7468:	2b06      	cmp	r3, #6
    746a:	d00b      	beq.n	7484 <_ZN15Adafruit_FT62065beginEh+0x74>
    746c:	230f      	movs	r3, #15
    746e:	18fb      	adds	r3, r7, r3
    7470:	781b      	ldrb	r3, [r3, #0]
    7472:	2b36      	cmp	r3, #54	; 0x36
    7474:	d006      	beq.n	7484 <_ZN15Adafruit_FT62065beginEh+0x74>
    7476:	230f      	movs	r3, #15
    7478:	18fb      	adds	r3, r7, r3
    747a:	781b      	ldrb	r3, [r3, #0]
    747c:	2b64      	cmp	r3, #100	; 0x64
    747e:	d001      	beq.n	7484 <_ZN15Adafruit_FT62065beginEh+0x74>
    return false;
    7480:	2300      	movs	r3, #0
    7482:	e000      	b.n	7486 <_ZN15Adafruit_FT62065beginEh+0x76>
  }

  return true;
    7484:	2301      	movs	r3, #1
}
    7486:	0018      	movs	r0, r3
    7488:	46bd      	mov	sp, r7
    748a:	b005      	add	sp, #20
    748c:	bd90      	pop	{r4, r7, pc}
    748e:	46c0      	nop			; (mov r8, r8)
    7490:	20000b8c 	.word	0x20000b8c

00007494 <_ZN15Adafruit_FT62067touchedEv>:
/*! 
    @brief  Determines if there are any touches detected
    @returns Number of touches detected, can be 0, 1 or 2
*/
/**************************************************************************/
uint8_t Adafruit_FT6206::touched(void) {
    7494:	b590      	push	{r4, r7, lr}
    7496:	b085      	sub	sp, #20
    7498:	af00      	add	r7, sp, #0
    749a:	6078      	str	r0, [r7, #4]
  uint8_t n = readRegister8(FT62XX_REG_NUMTOUCHES);
    749c:	230f      	movs	r3, #15
    749e:	18fc      	adds	r4, r7, r3
    74a0:	687b      	ldr	r3, [r7, #4]
    74a2:	2102      	movs	r1, #2
    74a4:	0018      	movs	r0, r3
    74a6:	f000 f94f 	bl	7748 <_ZN15Adafruit_FT620613readRegister8Eh>
    74aa:	0003      	movs	r3, r0
    74ac:	7023      	strb	r3, [r4, #0]
  if (n > 2) {
    74ae:	230f      	movs	r3, #15
    74b0:	18fb      	adds	r3, r7, r3
    74b2:	781b      	ldrb	r3, [r3, #0]
    74b4:	2b02      	cmp	r3, #2
    74b6:	dd03      	ble.n	74c0 <_ZN15Adafruit_FT62067touchedEv+0x2c>
    n = 0;
    74b8:	230f      	movs	r3, #15
    74ba:	18fb      	adds	r3, r7, r3
    74bc:	2200      	movs	r2, #0
    74be:	701a      	strb	r2, [r3, #0]
  }
  return n;
    74c0:	230f      	movs	r3, #15
    74c2:	18fb      	adds	r3, r7, r3
    74c4:	781b      	ldrb	r3, [r3, #0]
}
    74c6:	0018      	movs	r0, r3
    74c8:	46bd      	mov	sp, r7
    74ca:	b005      	add	sp, #20
    74cc:	bd90      	pop	{r4, r7, pc}

000074ce <_ZN15Adafruit_FT62068getPointEh>:
    @brief  Queries the chip and retrieves a point data
    @param  n The # index (0 or 1) to the points we can detect. In theory we can detect 2 points but we've found that you should only use this for single-touch since the two points cant share the same half of the screen.
    @returns {@link TS_Point} object that has the x and y coordinets set. If the z coordinate is 0 it means the point is not touched. If z is 1, it is currently touched.
*/
/**************************************************************************/
TS_Point Adafruit_FT6206::getPoint(uint8_t n) {
    74ce:	b580      	push	{r7, lr}
    74d0:	b084      	sub	sp, #16
    74d2:	af00      	add	r7, sp, #0
    74d4:	60f8      	str	r0, [r7, #12]
    74d6:	60b9      	str	r1, [r7, #8]
    74d8:	1dfb      	adds	r3, r7, #7
    74da:	701a      	strb	r2, [r3, #0]
  readData();
    74dc:	68bb      	ldr	r3, [r7, #8]
    74de:	0018      	movs	r0, r3
    74e0:	f000 f828 	bl	7534 <_ZN15Adafruit_FT62068readDataEv>
  if ((touches == 0) || (n > 1)) {
    74e4:	68bb      	ldr	r3, [r7, #8]
    74e6:	781b      	ldrb	r3, [r3, #0]
    74e8:	2b00      	cmp	r3, #0
    74ea:	d003      	beq.n	74f4 <_ZN15Adafruit_FT62068getPointEh+0x26>
    74ec:	1dfb      	adds	r3, r7, #7
    74ee:	781b      	ldrb	r3, [r3, #0]
    74f0:	2b01      	cmp	r3, #1
    74f2:	dd06      	ble.n	7502 <_ZN15Adafruit_FT62068getPointEh+0x34>
    return TS_Point(0, 0, 0);
    74f4:	68f8      	ldr	r0, [r7, #12]
    74f6:	2300      	movs	r3, #0
    74f8:	2200      	movs	r2, #0
    74fa:	2100      	movs	r1, #0
    74fc:	f000 f98d 	bl	781a <_ZN8TS_PointC1Esss>
    7500:	e013      	b.n	752a <_ZN15Adafruit_FT62068getPointEh+0x5c>
  } else {
    return TS_Point(touchX[n], touchY[n], 1);
    7502:	1dfb      	adds	r3, r7, #7
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	68ba      	ldr	r2, [r7, #8]
    7508:	005b      	lsls	r3, r3, #1
    750a:	18d3      	adds	r3, r2, r3
    750c:	3302      	adds	r3, #2
    750e:	881b      	ldrh	r3, [r3, #0]
    7510:	b219      	sxth	r1, r3
    7512:	1dfb      	adds	r3, r7, #7
    7514:	781b      	ldrb	r3, [r3, #0]
    7516:	68ba      	ldr	r2, [r7, #8]
    7518:	005b      	lsls	r3, r3, #1
    751a:	18d3      	adds	r3, r2, r3
    751c:	3306      	adds	r3, #6
    751e:	881b      	ldrh	r3, [r3, #0]
    7520:	b21a      	sxth	r2, r3
    7522:	68f8      	ldr	r0, [r7, #12]
    7524:	2301      	movs	r3, #1
    7526:	f000 f978 	bl	781a <_ZN8TS_PointC1Esss>
  }
}
    752a:	68f8      	ldr	r0, [r7, #12]
    752c:	46bd      	mov	sp, r7
    752e:	b004      	add	sp, #16
    7530:	bd80      	pop	{r7, pc}
	...

00007534 <_ZN15Adafruit_FT62068readDataEv>:
/**************************************************************************/
/*! 
    @brief  Reads the bulk of data from captouch chip. Fill in {@link touches}, {@link touchX}, {@link touchY} and {@link touchID} with results
*/
/**************************************************************************/
void Adafruit_FT6206::readData(void) {
    7534:	b590      	push	{r4, r7, lr}
    7536:	b089      	sub	sp, #36	; 0x24
    7538:	af00      	add	r7, sp, #0
    753a:	6078      	str	r0, [r7, #4]

  uint8_t i2cdat[16];
  Wire.beginTransmission(FT62XX_ADDR);
    753c:	4b81      	ldr	r3, [pc, #516]	; (7744 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    753e:	2138      	movs	r1, #56	; 0x38
    7540:	0018      	movs	r0, r3
    7542:	f004 fc0c 	bl	bd5e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)0);  
    7546:	4b7f      	ldr	r3, [pc, #508]	; (7744 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    7548:	2100      	movs	r1, #0
    754a:	0018      	movs	r0, r3
    754c:	f004 fc8a 	bl	be64 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    7550:	4b7c      	ldr	r3, [pc, #496]	; (7744 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    7552:	0018      	movs	r0, r3
    7554:	f004 fc78 	bl	be48 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom((byte)FT62XX_ADDR, (byte)16);
    7558:	4b7a      	ldr	r3, [pc, #488]	; (7744 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    755a:	2210      	movs	r2, #16
    755c:	2138      	movs	r1, #56	; 0x38
    755e:	0018      	movs	r0, r3
    7560:	f004 fbe7 	bl	bd32 <_ZN7TwoWire11requestFromEhj>
  for (uint8_t i=0; i<16; i++)
    7564:	231f      	movs	r3, #31
    7566:	18fb      	adds	r3, r7, r3
    7568:	2200      	movs	r2, #0
    756a:	701a      	strb	r2, [r3, #0]
    756c:	231f      	movs	r3, #31
    756e:	18fb      	adds	r3, r7, r3
    7570:	781b      	ldrb	r3, [r3, #0]
    7572:	2b0f      	cmp	r3, #15
    7574:	dc13      	bgt.n	759e <_ZN15Adafruit_FT62068readDataEv+0x6a>
    i2cdat[i] = Wire.read();
    7576:	231f      	movs	r3, #31
    7578:	18fb      	adds	r3, r7, r3
    757a:	781c      	ldrb	r4, [r3, #0]
    757c:	4b71      	ldr	r3, [pc, #452]	; (7744 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    757e:	0018      	movs	r0, r3
    7580:	f004 fcd1 	bl	bf26 <_ZN7TwoWire4readEv>
    7584:	0003      	movs	r3, r0
    7586:	b2da      	uxtb	r2, r3
    7588:	230c      	movs	r3, #12
    758a:	18fb      	adds	r3, r7, r3
    758c:	551a      	strb	r2, [r3, r4]
  for (uint8_t i=0; i<16; i++)
    758e:	231f      	movs	r3, #31
    7590:	18fb      	adds	r3, r7, r3
    7592:	781a      	ldrb	r2, [r3, #0]
    7594:	231f      	movs	r3, #31
    7596:	18fb      	adds	r3, r7, r3
    7598:	3201      	adds	r2, #1
    759a:	701a      	strb	r2, [r3, #0]
    759c:	e7e6      	b.n	756c <_ZN15Adafruit_FT62068readDataEv+0x38>
    Serial.print("I2C $"); Serial.print(i, HEX); 
    Serial.print(" = 0x"); Serial.println(i2cdat[i], HEX);
  }
#endif

  touches = i2cdat[0x02];
    759e:	230c      	movs	r3, #12
    75a0:	18fb      	adds	r3, r7, r3
    75a2:	789a      	ldrb	r2, [r3, #2]
    75a4:	687b      	ldr	r3, [r7, #4]
    75a6:	701a      	strb	r2, [r3, #0]
  if ((touches > 2) || (touches == 0)) {
    75a8:	687b      	ldr	r3, [r7, #4]
    75aa:	781b      	ldrb	r3, [r3, #0]
    75ac:	2b02      	cmp	r3, #2
    75ae:	dc03      	bgt.n	75b8 <_ZN15Adafruit_FT62068readDataEv+0x84>
    75b0:	687b      	ldr	r3, [r7, #4]
    75b2:	781b      	ldrb	r3, [r3, #0]
    75b4:	2b00      	cmp	r3, #0
    75b6:	d102      	bne.n	75be <_ZN15Adafruit_FT62068readDataEv+0x8a>
    touches = 0;
    75b8:	687b      	ldr	r3, [r7, #4]
    75ba:	2200      	movs	r2, #0
    75bc:	701a      	strb	r2, [r3, #0]
    Serial.print("Gesture #"); 
    Serial.println(i2cdat[0x01]);
  }
#endif

  for (uint8_t i=0; i<2; i++) {
    75be:	231e      	movs	r3, #30
    75c0:	18fb      	adds	r3, r7, r3
    75c2:	2200      	movs	r2, #0
    75c4:	701a      	strb	r2, [r3, #0]
    75c6:	231e      	movs	r3, #30
    75c8:	18fb      	adds	r3, r7, r3
    75ca:	781b      	ldrb	r3, [r3, #0]
    75cc:	2b01      	cmp	r3, #1
    75ce:	dd00      	ble.n	75d2 <_ZN15Adafruit_FT62068readDataEv+0x9e>
    75d0:	e0b3      	b.n	773a <_ZN15Adafruit_FT62068readDataEv+0x206>
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    75d2:	231e      	movs	r3, #30
    75d4:	18fb      	adds	r3, r7, r3
    75d6:	7819      	ldrb	r1, [r3, #0]
    75d8:	231e      	movs	r3, #30
    75da:	18fb      	adds	r3, r7, r3
    75dc:	781a      	ldrb	r2, [r3, #0]
    75de:	0013      	movs	r3, r2
    75e0:	005b      	lsls	r3, r3, #1
    75e2:	189b      	adds	r3, r3, r2
    75e4:	005b      	lsls	r3, r3, #1
    75e6:	3303      	adds	r3, #3
    75e8:	220c      	movs	r2, #12
    75ea:	18ba      	adds	r2, r7, r2
    75ec:	5cd3      	ldrb	r3, [r2, r3]
    75ee:	b29b      	uxth	r3, r3
    75f0:	220f      	movs	r2, #15
    75f2:	4013      	ands	r3, r2
    75f4:	b298      	uxth	r0, r3
    75f6:	687a      	ldr	r2, [r7, #4]
    75f8:	004b      	lsls	r3, r1, #1
    75fa:	18d3      	adds	r3, r2, r3
    75fc:	3302      	adds	r3, #2
    75fe:	1c02      	adds	r2, r0, #0
    7600:	801a      	strh	r2, [r3, #0]
    touchX[i] <<= 8;
    7602:	231e      	movs	r3, #30
    7604:	18fb      	adds	r3, r7, r3
    7606:	781b      	ldrb	r3, [r3, #0]
    7608:	221e      	movs	r2, #30
    760a:	18ba      	adds	r2, r7, r2
    760c:	7812      	ldrb	r2, [r2, #0]
    760e:	6879      	ldr	r1, [r7, #4]
    7610:	0052      	lsls	r2, r2, #1
    7612:	188a      	adds	r2, r1, r2
    7614:	3202      	adds	r2, #2
    7616:	8812      	ldrh	r2, [r2, #0]
    7618:	0212      	lsls	r2, r2, #8
    761a:	b291      	uxth	r1, r2
    761c:	687a      	ldr	r2, [r7, #4]
    761e:	005b      	lsls	r3, r3, #1
    7620:	18d3      	adds	r3, r2, r3
    7622:	3302      	adds	r3, #2
    7624:	1c0a      	adds	r2, r1, #0
    7626:	801a      	strh	r2, [r3, #0]
    touchX[i] |= i2cdat[0x04 + i*6]; 
    7628:	231e      	movs	r3, #30
    762a:	18fb      	adds	r3, r7, r3
    762c:	7819      	ldrb	r1, [r3, #0]
    762e:	231e      	movs	r3, #30
    7630:	18fb      	adds	r3, r7, r3
    7632:	781b      	ldrb	r3, [r3, #0]
    7634:	687a      	ldr	r2, [r7, #4]
    7636:	005b      	lsls	r3, r3, #1
    7638:	18d3      	adds	r3, r2, r3
    763a:	3302      	adds	r3, #2
    763c:	8818      	ldrh	r0, [r3, #0]
    763e:	231e      	movs	r3, #30
    7640:	18fb      	adds	r3, r7, r3
    7642:	781a      	ldrb	r2, [r3, #0]
    7644:	0013      	movs	r3, r2
    7646:	005b      	lsls	r3, r3, #1
    7648:	189b      	adds	r3, r3, r2
    764a:	005b      	lsls	r3, r3, #1
    764c:	3304      	adds	r3, #4
    764e:	220c      	movs	r2, #12
    7650:	18ba      	adds	r2, r7, r2
    7652:	5cd3      	ldrb	r3, [r2, r3]
    7654:	b29b      	uxth	r3, r3
    7656:	4303      	orrs	r3, r0
    7658:	b298      	uxth	r0, r3
    765a:	687a      	ldr	r2, [r7, #4]
    765c:	004b      	lsls	r3, r1, #1
    765e:	18d3      	adds	r3, r2, r3
    7660:	3302      	adds	r3, #2
    7662:	1c02      	adds	r2, r0, #0
    7664:	801a      	strh	r2, [r3, #0]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    7666:	231e      	movs	r3, #30
    7668:	18fb      	adds	r3, r7, r3
    766a:	7819      	ldrb	r1, [r3, #0]
    766c:	231e      	movs	r3, #30
    766e:	18fb      	adds	r3, r7, r3
    7670:	781a      	ldrb	r2, [r3, #0]
    7672:	0013      	movs	r3, r2
    7674:	005b      	lsls	r3, r3, #1
    7676:	189b      	adds	r3, r3, r2
    7678:	005b      	lsls	r3, r3, #1
    767a:	3305      	adds	r3, #5
    767c:	220c      	movs	r2, #12
    767e:	18ba      	adds	r2, r7, r2
    7680:	5cd3      	ldrb	r3, [r2, r3]
    7682:	b29b      	uxth	r3, r3
    7684:	220f      	movs	r2, #15
    7686:	4013      	ands	r3, r2
    7688:	b298      	uxth	r0, r3
    768a:	687a      	ldr	r2, [r7, #4]
    768c:	004b      	lsls	r3, r1, #1
    768e:	18d3      	adds	r3, r2, r3
    7690:	3306      	adds	r3, #6
    7692:	1c02      	adds	r2, r0, #0
    7694:	801a      	strh	r2, [r3, #0]
    touchY[i] <<= 8;
    7696:	231e      	movs	r3, #30
    7698:	18fb      	adds	r3, r7, r3
    769a:	781b      	ldrb	r3, [r3, #0]
    769c:	221e      	movs	r2, #30
    769e:	18ba      	adds	r2, r7, r2
    76a0:	7812      	ldrb	r2, [r2, #0]
    76a2:	6879      	ldr	r1, [r7, #4]
    76a4:	0052      	lsls	r2, r2, #1
    76a6:	188a      	adds	r2, r1, r2
    76a8:	3206      	adds	r2, #6
    76aa:	8812      	ldrh	r2, [r2, #0]
    76ac:	0212      	lsls	r2, r2, #8
    76ae:	b291      	uxth	r1, r2
    76b0:	687a      	ldr	r2, [r7, #4]
    76b2:	005b      	lsls	r3, r3, #1
    76b4:	18d3      	adds	r3, r2, r3
    76b6:	3306      	adds	r3, #6
    76b8:	1c0a      	adds	r2, r1, #0
    76ba:	801a      	strh	r2, [r3, #0]
    touchY[i] |= i2cdat[0x06 + i*6];
    76bc:	231e      	movs	r3, #30
    76be:	18fb      	adds	r3, r7, r3
    76c0:	7819      	ldrb	r1, [r3, #0]
    76c2:	231e      	movs	r3, #30
    76c4:	18fb      	adds	r3, r7, r3
    76c6:	781b      	ldrb	r3, [r3, #0]
    76c8:	687a      	ldr	r2, [r7, #4]
    76ca:	005b      	lsls	r3, r3, #1
    76cc:	18d3      	adds	r3, r2, r3
    76ce:	3306      	adds	r3, #6
    76d0:	8818      	ldrh	r0, [r3, #0]
    76d2:	231e      	movs	r3, #30
    76d4:	18fb      	adds	r3, r7, r3
    76d6:	781b      	ldrb	r3, [r3, #0]
    76d8:	1c5a      	adds	r2, r3, #1
    76da:	0013      	movs	r3, r2
    76dc:	005b      	lsls	r3, r3, #1
    76de:	189b      	adds	r3, r3, r2
    76e0:	005b      	lsls	r3, r3, #1
    76e2:	001a      	movs	r2, r3
    76e4:	230c      	movs	r3, #12
    76e6:	18fb      	adds	r3, r7, r3
    76e8:	5c9b      	ldrb	r3, [r3, r2]
    76ea:	b29b      	uxth	r3, r3
    76ec:	4303      	orrs	r3, r0
    76ee:	b298      	uxth	r0, r3
    76f0:	687a      	ldr	r2, [r7, #4]
    76f2:	004b      	lsls	r3, r1, #1
    76f4:	18d3      	adds	r3, r2, r3
    76f6:	3306      	adds	r3, #6
    76f8:	1c02      	adds	r2, r0, #0
    76fa:	801a      	strh	r2, [r3, #0]
    touchID[i] = i2cdat[0x05 + i*6] >> 4;
    76fc:	231e      	movs	r3, #30
    76fe:	18fb      	adds	r3, r7, r3
    7700:	7819      	ldrb	r1, [r3, #0]
    7702:	231e      	movs	r3, #30
    7704:	18fb      	adds	r3, r7, r3
    7706:	781a      	ldrb	r2, [r3, #0]
    7708:	0013      	movs	r3, r2
    770a:	005b      	lsls	r3, r3, #1
    770c:	189b      	adds	r3, r3, r2
    770e:	005b      	lsls	r3, r3, #1
    7710:	3305      	adds	r3, #5
    7712:	220c      	movs	r2, #12
    7714:	18ba      	adds	r2, r7, r2
    7716:	5cd3      	ldrb	r3, [r2, r3]
    7718:	111b      	asrs	r3, r3, #4
    771a:	b298      	uxth	r0, r3
    771c:	687a      	ldr	r2, [r7, #4]
    771e:	1d0b      	adds	r3, r1, #4
    7720:	005b      	lsls	r3, r3, #1
    7722:	18d3      	adds	r3, r2, r3
    7724:	3302      	adds	r3, #2
    7726:	1c02      	adds	r2, r0, #0
    7728:	801a      	strh	r2, [r3, #0]
  for (uint8_t i=0; i<2; i++) {
    772a:	231e      	movs	r3, #30
    772c:	18fb      	adds	r3, r7, r3
    772e:	781a      	ldrb	r2, [r3, #0]
    7730:	231e      	movs	r3, #30
    7732:	18fb      	adds	r3, r7, r3
    7734:	3201      	adds	r2, #1
    7736:	701a      	strb	r2, [r3, #0]
    7738:	e745      	b.n	75c6 <_ZN15Adafruit_FT62068readDataEv+0x92>
    Serial.print(", "); Serial.print(touchY[i]);
    Serial.print (") ");
  }
  Serial.println();
#endif
}
    773a:	46c0      	nop			; (mov r8, r8)
    773c:	46bd      	mov	sp, r7
    773e:	b009      	add	sp, #36	; 0x24
    7740:	bd90      	pop	{r4, r7, pc}
    7742:	46c0      	nop			; (mov r8, r8)
    7744:	20000b8c 	.word	0x20000b8c

00007748 <_ZN15Adafruit_FT620613readRegister8Eh>:

uint8_t Adafruit_FT6206::readRegister8(uint8_t reg) {
    7748:	b580      	push	{r7, lr}
    774a:	b084      	sub	sp, #16
    774c:	af00      	add	r7, sp, #0
    774e:	6078      	str	r0, [r7, #4]
    7750:	000a      	movs	r2, r1
    7752:	1cfb      	adds	r3, r7, #3
    7754:	701a      	strb	r2, [r3, #0]
  uint8_t x ;
  // use i2c
  Wire.beginTransmission(FT62XX_ADDR);
    7756:	4b12      	ldr	r3, [pc, #72]	; (77a0 <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7758:	2138      	movs	r1, #56	; 0x38
    775a:	0018      	movs	r0, r3
    775c:	f004 faff 	bl	bd5e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    7760:	1cfb      	adds	r3, r7, #3
    7762:	781a      	ldrb	r2, [r3, #0]
    7764:	4b0e      	ldr	r3, [pc, #56]	; (77a0 <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7766:	0011      	movs	r1, r2
    7768:	0018      	movs	r0, r3
    776a:	f004 fb7b 	bl	be64 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    776e:	4b0c      	ldr	r3, [pc, #48]	; (77a0 <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7770:	0018      	movs	r0, r3
    7772:	f004 fb69 	bl	be48 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.requestFrom((byte)FT62XX_ADDR, (byte)1);
    7776:	4b0a      	ldr	r3, [pc, #40]	; (77a0 <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7778:	2201      	movs	r2, #1
    777a:	2138      	movs	r1, #56	; 0x38
    777c:	0018      	movs	r0, r3
    777e:	f004 fad8 	bl	bd32 <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
    7782:	4b07      	ldr	r3, [pc, #28]	; (77a0 <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7784:	0018      	movs	r0, r3
    7786:	f004 fbce 	bl	bf26 <_ZN7TwoWire4readEv>
    778a:	0002      	movs	r2, r0
    778c:	230f      	movs	r3, #15
    778e:	18fb      	adds	r3, r7, r3
    7790:	701a      	strb	r2, [r3, #0]
#ifdef I2C_DEBUG
  Serial.print("$"); Serial.print(reg, HEX); 
  Serial.print(": 0x"); Serial.println(x, HEX);
#endif

  return x;
    7792:	230f      	movs	r3, #15
    7794:	18fb      	adds	r3, r7, r3
    7796:	781b      	ldrb	r3, [r3, #0]
}
    7798:	0018      	movs	r0, r3
    779a:	46bd      	mov	sp, r7
    779c:	b004      	add	sp, #16
    779e:	bd80      	pop	{r7, pc}
    77a0:	20000b8c 	.word	0x20000b8c

000077a4 <_ZN15Adafruit_FT620614writeRegister8Ehh>:

void Adafruit_FT6206::writeRegister8(uint8_t reg, uint8_t val) {
    77a4:	b580      	push	{r7, lr}
    77a6:	b082      	sub	sp, #8
    77a8:	af00      	add	r7, sp, #0
    77aa:	6078      	str	r0, [r7, #4]
    77ac:	0008      	movs	r0, r1
    77ae:	0011      	movs	r1, r2
    77b0:	1cfb      	adds	r3, r7, #3
    77b2:	1c02      	adds	r2, r0, #0
    77b4:	701a      	strb	r2, [r3, #0]
    77b6:	1cbb      	adds	r3, r7, #2
    77b8:	1c0a      	adds	r2, r1, #0
    77ba:	701a      	strb	r2, [r3, #0]
  // use i2c
  Wire.beginTransmission(FT62XX_ADDR);
    77bc:	4b0d      	ldr	r3, [pc, #52]	; (77f4 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    77be:	2138      	movs	r1, #56	; 0x38
    77c0:	0018      	movs	r0, r3
    77c2:	f004 facc 	bl	bd5e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    77c6:	1cfb      	adds	r3, r7, #3
    77c8:	781a      	ldrb	r2, [r3, #0]
    77ca:	4b0a      	ldr	r3, [pc, #40]	; (77f4 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    77cc:	0011      	movs	r1, r2
    77ce:	0018      	movs	r0, r3
    77d0:	f004 fb48 	bl	be64 <_ZN7TwoWire5writeEh>
  Wire.write((byte)val);
    77d4:	1cbb      	adds	r3, r7, #2
    77d6:	781a      	ldrb	r2, [r3, #0]
    77d8:	4b06      	ldr	r3, [pc, #24]	; (77f4 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    77da:	0011      	movs	r1, r2
    77dc:	0018      	movs	r0, r3
    77de:	f004 fb41 	bl	be64 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    77e2:	4b04      	ldr	r3, [pc, #16]	; (77f4 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    77e4:	0018      	movs	r0, r3
    77e6:	f004 fb2f 	bl	be48 <_ZN7TwoWire15endTransmissionEv>
}
    77ea:	46c0      	nop			; (mov r8, r8)
    77ec:	46bd      	mov	sp, r7
    77ee:	b002      	add	sp, #8
    77f0:	bd80      	pop	{r7, pc}
    77f2:	46c0      	nop			; (mov r8, r8)
    77f4:	20000b8c 	.word	0x20000b8c

000077f8 <_ZN8TS_PointC1Ev>:
}
*/

/****************/

TS_Point::TS_Point(void) {
    77f8:	b580      	push	{r7, lr}
    77fa:	b082      	sub	sp, #8
    77fc:	af00      	add	r7, sp, #0
    77fe:	6078      	str	r0, [r7, #4]
  x = y = 0;
    7800:	687b      	ldr	r3, [r7, #4]
    7802:	2200      	movs	r2, #0
    7804:	805a      	strh	r2, [r3, #2]
    7806:	687b      	ldr	r3, [r7, #4]
    7808:	2202      	movs	r2, #2
    780a:	5e9a      	ldrsh	r2, [r3, r2]
    780c:	687b      	ldr	r3, [r7, #4]
    780e:	801a      	strh	r2, [r3, #0]
}
    7810:	687b      	ldr	r3, [r7, #4]
    7812:	0018      	movs	r0, r3
    7814:	46bd      	mov	sp, r7
    7816:	b002      	add	sp, #8
    7818:	bd80      	pop	{r7, pc}

0000781a <_ZN8TS_PointC1Esss>:

TS_Point::TS_Point(int16_t x0, int16_t y0, int16_t z0) {
    781a:	b590      	push	{r4, r7, lr}
    781c:	b085      	sub	sp, #20
    781e:	af00      	add	r7, sp, #0
    7820:	60f8      	str	r0, [r7, #12]
    7822:	000c      	movs	r4, r1
    7824:	0010      	movs	r0, r2
    7826:	0019      	movs	r1, r3
    7828:	230a      	movs	r3, #10
    782a:	18fb      	adds	r3, r7, r3
    782c:	1c22      	adds	r2, r4, #0
    782e:	801a      	strh	r2, [r3, #0]
    7830:	2308      	movs	r3, #8
    7832:	18fb      	adds	r3, r7, r3
    7834:	1c02      	adds	r2, r0, #0
    7836:	801a      	strh	r2, [r3, #0]
    7838:	1dbb      	adds	r3, r7, #6
    783a:	1c0a      	adds	r2, r1, #0
    783c:	801a      	strh	r2, [r3, #0]
  x = x0;
    783e:	68fb      	ldr	r3, [r7, #12]
    7840:	220a      	movs	r2, #10
    7842:	18ba      	adds	r2, r7, r2
    7844:	8812      	ldrh	r2, [r2, #0]
    7846:	801a      	strh	r2, [r3, #0]
  y = y0;
    7848:	68fb      	ldr	r3, [r7, #12]
    784a:	2208      	movs	r2, #8
    784c:	18ba      	adds	r2, r7, r2
    784e:	8812      	ldrh	r2, [r2, #0]
    7850:	805a      	strh	r2, [r3, #2]
  z = z0;
    7852:	68fb      	ldr	r3, [r7, #12]
    7854:	1dba      	adds	r2, r7, #6
    7856:	8812      	ldrh	r2, [r2, #0]
    7858:	809a      	strh	r2, [r3, #4]
}
    785a:	68fb      	ldr	r3, [r7, #12]
    785c:	0018      	movs	r0, r3
    785e:	46bd      	mov	sp, r7
    7860:	b005      	add	sp, #20
    7862:	bd90      	pop	{r4, r7, pc}

00007864 <_ZN11SPISettingsC1Em8BitOrderh>:
  // Conservatively, the divider is set for a 12 MHz maximum SPI clock.
  #define SPI_MIN_CLOCK_DIVIDER (uint8_t)(1 + ((F_CPU - 1) / 12000000))

class SPISettings {
  public:
  SPISettings(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    7864:	b590      	push	{r4, r7, lr}
    7866:	b085      	sub	sp, #20
    7868:	af00      	add	r7, sp, #0
    786a:	60f8      	str	r0, [r7, #12]
    786c:	60b9      	str	r1, [r7, #8]
    786e:	0019      	movs	r1, r3
    7870:	1dfb      	adds	r3, r7, #7
    7872:	701a      	strb	r2, [r3, #0]
    7874:	1dbb      	adds	r3, r7, #6
    7876:	1c0a      	adds	r2, r1, #0
    7878:	701a      	strb	r2, [r3, #0]
    if (__builtin_constant_p(clock)) {
      init_AlwaysInline(clock, bitOrder, dataMode);
    } else {
      init_MightInline(clock, bitOrder, dataMode);
    787a:	1dbb      	adds	r3, r7, #6
    787c:	781c      	ldrb	r4, [r3, #0]
    787e:	1dfb      	adds	r3, r7, #7
    7880:	781a      	ldrb	r2, [r3, #0]
    7882:	68b9      	ldr	r1, [r7, #8]
    7884:	68f8      	ldr	r0, [r7, #12]
    7886:	0023      	movs	r3, r4
    7888:	f000 f806 	bl	7898 <_ZN11SPISettings16init_MightInlineEm8BitOrderh>
    }
  }
    788c:	68fb      	ldr	r3, [r7, #12]
    788e:	0018      	movs	r0, r3
    7890:	46bd      	mov	sp, r7
    7892:	b005      	add	sp, #20
    7894:	bd90      	pop	{r4, r7, pc}
	...

00007898 <_ZN11SPISettings16init_MightInlineEm8BitOrderh>:

  // Default speed set to 4MHz, SPI mode set to MODE 0 and Bit order set to MSB first.
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }

  private:
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    7898:	b580      	push	{r7, lr}
    789a:	b088      	sub	sp, #32
    789c:	af00      	add	r7, sp, #0
    789e:	60f8      	str	r0, [r7, #12]
    78a0:	60b9      	str	r1, [r7, #8]
    78a2:	0019      	movs	r1, r3
    78a4:	1dfb      	adds	r3, r7, #7
    78a6:	701a      	strb	r2, [r3, #0]
    78a8:	1dbb      	adds	r3, r7, #6
    78aa:	1c0a      	adds	r2, r1, #0
    78ac:	701a      	strb	r2, [r3, #0]
    78ae:	68fb      	ldr	r3, [r7, #12]
    78b0:	61fb      	str	r3, [r7, #28]
    78b2:	68bb      	ldr	r3, [r7, #8]
    78b4:	61bb      	str	r3, [r7, #24]
    78b6:	2317      	movs	r3, #23
    78b8:	18fb      	adds	r3, r7, r3
    78ba:	1dfa      	adds	r2, r7, #7
    78bc:	7812      	ldrb	r2, [r2, #0]
    78be:	701a      	strb	r2, [r3, #0]
    78c0:	2316      	movs	r3, #22
    78c2:	18fb      	adds	r3, r7, r3
    78c4:	1dba      	adds	r2, r7, #6
    78c6:	7812      	ldrb	r2, [r2, #0]
    78c8:	701a      	strb	r2, [r3, #0]
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    78ca:	69bb      	ldr	r3, [r7, #24]
    78cc:	4a1a      	ldr	r2, [pc, #104]	; (7938 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0xa0>)
    78ce:	4293      	cmp	r3, r2
    78d0:	d900      	bls.n	78d4 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x3c>
    78d2:	4b19      	ldr	r3, [pc, #100]	; (7938 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0xa0>)
    78d4:	69fa      	ldr	r2, [r7, #28]
    78d6:	6013      	str	r3, [r2, #0]

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    78d8:	2317      	movs	r3, #23
    78da:	18fb      	adds	r3, r7, r3
    78dc:	781b      	ldrb	r3, [r3, #0]
    78de:	2b01      	cmp	r3, #1
    78e0:	d101      	bne.n	78e6 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x4e>
    78e2:	2200      	movs	r2, #0
    78e4:	e000      	b.n	78e8 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x50>
    78e6:	2201      	movs	r2, #1
    78e8:	69fb      	ldr	r3, [r7, #28]
    78ea:	715a      	strb	r2, [r3, #5]

    switch (dataMode)
    78ec:	2316      	movs	r3, #22
    78ee:	18fb      	adds	r3, r7, r3
    78f0:	781b      	ldrb	r3, [r3, #0]
    78f2:	2b01      	cmp	r3, #1
    78f4:	d014      	beq.n	7920 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x88>
    78f6:	dc02      	bgt.n	78fe <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x66>
    78f8:	2b00      	cmp	r3, #0
    78fa:	d009      	beq.n	7910 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x78>
    78fc:	e014      	b.n	7928 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x90>
    78fe:	2b02      	cmp	r3, #2
    7900:	d002      	beq.n	7908 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x70>
    7902:	2b03      	cmp	r3, #3
    7904:	d008      	beq.n	7918 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x80>
    7906:	e00f      	b.n	7928 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x90>
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    7908:	69fb      	ldr	r3, [r7, #28]
    790a:	2200      	movs	r2, #0
    790c:	711a      	strb	r2, [r3, #4]
  }
    790e:	e00e      	b.n	792e <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE1:
        this->dataMode = SERCOM_SPI_MODE_1; break;
    7910:	69fb      	ldr	r3, [r7, #28]
    7912:	2201      	movs	r2, #1
    7914:	711a      	strb	r2, [r3, #4]
  }
    7916:	e00a      	b.n	792e <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE2:
        this->dataMode = SERCOM_SPI_MODE_2; break;
    7918:	69fb      	ldr	r3, [r7, #28]
    791a:	2202      	movs	r2, #2
    791c:	711a      	strb	r2, [r3, #4]
  }
    791e:	e006      	b.n	792e <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE3:
        this->dataMode = SERCOM_SPI_MODE_3; break;
    7920:	69fb      	ldr	r3, [r7, #28]
    7922:	2203      	movs	r2, #3
    7924:	711a      	strb	r2, [r3, #4]
  }
    7926:	e002      	b.n	792e <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      default:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    7928:	69fb      	ldr	r3, [r7, #28]
    792a:	2200      	movs	r2, #0
    792c:	711a      	strb	r2, [r3, #4]
  }
    792e:	46c0      	nop			; (mov r8, r8)
    7930:	46bd      	mov	sp, r7
    7932:	b008      	add	sp, #32
    7934:	bd80      	pop	{r7, pc}
    7936:	46c0      	nop			; (mov r8, r8)
    7938:	00b71b00 	.word	0x00b71b00

0000793c <_ZN16Adafruit_ILI93418color565Ehhh>:
#define SPI_WRITE16(s)          if(_sclk < 0){HSPI_WRITE16(s);}else{SSPI_WRITE16(s);}
#define SPI_WRITE32(l)          if(_sclk < 0){HSPI_WRITE32(l);}else{SSPI_WRITE32(l);}
#define SPI_WRITE_PIXELS(c,l)   if(_sclk < 0){HSPI_WRITE_PIXELS(c,l);}else{SSPI_WRITE_PIXELS(c,l);}

// Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t Adafruit_ILI9341::color565(uint8_t r, uint8_t g, uint8_t b) {
    793c:	b590      	push	{r4, r7, lr}
    793e:	b083      	sub	sp, #12
    7940:	af00      	add	r7, sp, #0
    7942:	6078      	str	r0, [r7, #4]
    7944:	000c      	movs	r4, r1
    7946:	0010      	movs	r0, r2
    7948:	0019      	movs	r1, r3
    794a:	1cfb      	adds	r3, r7, #3
    794c:	1c22      	adds	r2, r4, #0
    794e:	701a      	strb	r2, [r3, #0]
    7950:	1cbb      	adds	r3, r7, #2
    7952:	1c02      	adds	r2, r0, #0
    7954:	701a      	strb	r2, [r3, #0]
    7956:	1c7b      	adds	r3, r7, #1
    7958:	1c0a      	adds	r2, r1, #0
    795a:	701a      	strb	r2, [r3, #0]
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    795c:	1cfb      	adds	r3, r7, #3
    795e:	781b      	ldrb	r3, [r3, #0]
    7960:	021b      	lsls	r3, r3, #8
    7962:	b21b      	sxth	r3, r3
    7964:	0adb      	lsrs	r3, r3, #11
    7966:	02db      	lsls	r3, r3, #11
    7968:	b21a      	sxth	r2, r3
    796a:	1cbb      	adds	r3, r7, #2
    796c:	781b      	ldrb	r3, [r3, #0]
    796e:	00db      	lsls	r3, r3, #3
    7970:	b219      	sxth	r1, r3
    7972:	23fc      	movs	r3, #252	; 0xfc
    7974:	00db      	lsls	r3, r3, #3
    7976:	400b      	ands	r3, r1
    7978:	b21b      	sxth	r3, r3
    797a:	4313      	orrs	r3, r2
    797c:	b21a      	sxth	r2, r3
    797e:	1c7b      	adds	r3, r7, #1
    7980:	781b      	ldrb	r3, [r3, #0]
    7982:	08db      	lsrs	r3, r3, #3
    7984:	b2db      	uxtb	r3, r3
    7986:	b21b      	sxth	r3, r3
    7988:	4313      	orrs	r3, r2
    798a:	b21b      	sxth	r3, r3
    798c:	b29b      	uxth	r3, r3
}
    798e:	0018      	movs	r0, r3
    7990:	46bd      	mov	sp, r7
    7992:	b003      	add	sp, #12
    7994:	bd90      	pop	{r4, r7, pc}
	...

00007998 <_ZN16Adafruit_ILI9341C1Eaaa>:
        misopinmask = 0;
    }
#endif
}

Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT) {
    7998:	b590      	push	{r4, r7, lr}
    799a:	b083      	sub	sp, #12
    799c:	af00      	add	r7, sp, #0
    799e:	6078      	str	r0, [r7, #4]
    79a0:	000c      	movs	r4, r1
    79a2:	0010      	movs	r0, r2
    79a4:	0019      	movs	r1, r3
    79a6:	1cfb      	adds	r3, r7, #3
    79a8:	1c22      	adds	r2, r4, #0
    79aa:	701a      	strb	r2, [r3, #0]
    79ac:	1cbb      	adds	r3, r7, #2
    79ae:	1c02      	adds	r2, r0, #0
    79b0:	701a      	strb	r2, [r3, #0]
    79b2:	1c7b      	adds	r3, r7, #1
    79b4:	1c0a      	adds	r2, r1, #0
    79b6:	701a      	strb	r2, [r3, #0]
    79b8:	6878      	ldr	r0, [r7, #4]
    79ba:	23a0      	movs	r3, #160	; 0xa0
    79bc:	005b      	lsls	r3, r3, #1
    79be:	001a      	movs	r2, r3
    79c0:	21f0      	movs	r1, #240	; 0xf0
    79c2:	f004 fd6f 	bl	c4a4 <_ZN12Adafruit_GFXC1Ess>
    79c6:	4a3c      	ldr	r2, [pc, #240]	; (7ab8 <_ZN16Adafruit_ILI9341C1Eaaa+0x120>)
    79c8:	687b      	ldr	r3, [r7, #4]
    79ca:	601a      	str	r2, [r3, #0]
    _cs   = cs;
    79cc:	1cfb      	adds	r3, r7, #3
    79ce:	2200      	movs	r2, #0
    79d0:	569a      	ldrsb	r2, [r3, r2]
    79d2:	687b      	ldr	r3, [r7, #4]
    79d4:	625a      	str	r2, [r3, #36]	; 0x24
    _dc   = dc;
    79d6:	1cbb      	adds	r3, r7, #2
    79d8:	2200      	movs	r2, #0
    79da:	569a      	ldrsb	r2, [r3, r2]
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	629a      	str	r2, [r3, #40]	; 0x28
    _rst  = rst;
    79e0:	1c7b      	adds	r3, r7, #1
    79e2:	2200      	movs	r2, #0
    79e4:	569a      	ldrsb	r2, [r3, r2]
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	62da      	str	r2, [r3, #44]	; 0x2c
    _sclk  = -1;
    79ea:	687b      	ldr	r3, [r7, #4]
    79ec:	2201      	movs	r2, #1
    79ee:	4252      	negs	r2, r2
    79f0:	631a      	str	r2, [r3, #48]	; 0x30
    _mosi  = -1;
    79f2:	687b      	ldr	r3, [r7, #4]
    79f4:	2201      	movs	r2, #1
    79f6:	4252      	negs	r2, r2
    79f8:	635a      	str	r2, [r3, #52]	; 0x34
    _miso  = -1;
    79fa:	687b      	ldr	r3, [r7, #4]
    79fc:	2201      	movs	r2, #1
    79fe:	4252      	negs	r2, r2
    7a00:	639a      	str	r2, [r3, #56]	; 0x38
    _freq = 0;
    7a02:	687b      	ldr	r3, [r7, #4]
    7a04:	2200      	movs	r2, #0
    7a06:	621a      	str	r2, [r3, #32]
#ifdef USE_FAST_PINIO
    csport    = portOutputRegister(digitalPinToPort(_cs));
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7a0c:	492b      	ldr	r1, [pc, #172]	; (7abc <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    7a0e:	0013      	movs	r3, r2
    7a10:	005b      	lsls	r3, r3, #1
    7a12:	189b      	adds	r3, r3, r2
    7a14:	00db      	lsls	r3, r3, #3
    7a16:	565b      	ldrsb	r3, [r3, r1]
    7a18:	01db      	lsls	r3, r3, #7
    7a1a:	4a29      	ldr	r2, [pc, #164]	; (7ac0 <_ZN16Adafruit_ILI9341C1Eaaa+0x128>)
    7a1c:	4694      	mov	ip, r2
    7a1e:	4463      	add	r3, ip
    7a20:	3310      	adds	r3, #16
    7a22:	001a      	movs	r2, r3
    7a24:	687b      	ldr	r3, [r7, #4]
    7a26:	64da      	str	r2, [r3, #76]	; 0x4c
    cspinmask = digitalPinToBitMask(_cs);
    7a28:	687b      	ldr	r3, [r7, #4]
    7a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7a2c:	4923      	ldr	r1, [pc, #140]	; (7abc <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    7a2e:	0013      	movs	r3, r2
    7a30:	005b      	lsls	r3, r3, #1
    7a32:	189b      	adds	r3, r3, r2
    7a34:	00db      	lsls	r3, r3, #3
    7a36:	18cb      	adds	r3, r1, r3
    7a38:	3304      	adds	r3, #4
    7a3a:	681b      	ldr	r3, [r3, #0]
    7a3c:	2201      	movs	r2, #1
    7a3e:	409a      	lsls	r2, r3
    7a40:	0013      	movs	r3, r2
    7a42:	001a      	movs	r2, r3
    7a44:	687b      	ldr	r3, [r7, #4]
    7a46:	65da      	str	r2, [r3, #92]	; 0x5c
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7a4c:	491b      	ldr	r1, [pc, #108]	; (7abc <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    7a4e:	0013      	movs	r3, r2
    7a50:	005b      	lsls	r3, r3, #1
    7a52:	189b      	adds	r3, r3, r2
    7a54:	00db      	lsls	r3, r3, #3
    7a56:	565b      	ldrsb	r3, [r3, r1]
    7a58:	01db      	lsls	r3, r3, #7
    7a5a:	4a19      	ldr	r2, [pc, #100]	; (7ac0 <_ZN16Adafruit_ILI9341C1Eaaa+0x128>)
    7a5c:	4694      	mov	ip, r2
    7a5e:	4463      	add	r3, ip
    7a60:	3310      	adds	r3, #16
    7a62:	001a      	movs	r2, r3
    7a64:	687b      	ldr	r3, [r7, #4]
    7a66:	649a      	str	r2, [r3, #72]	; 0x48
    dcpinmask = digitalPinToBitMask(_dc);
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7a6c:	4913      	ldr	r1, [pc, #76]	; (7abc <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    7a6e:	0013      	movs	r3, r2
    7a70:	005b      	lsls	r3, r3, #1
    7a72:	189b      	adds	r3, r3, r2
    7a74:	00db      	lsls	r3, r3, #3
    7a76:	18cb      	adds	r3, r1, r3
    7a78:	3304      	adds	r3, #4
    7a7a:	681b      	ldr	r3, [r3, #0]
    7a7c:	2201      	movs	r2, #1
    7a7e:	409a      	lsls	r2, r3
    7a80:	0013      	movs	r3, r2
    7a82:	001a      	movs	r2, r3
    7a84:	687b      	ldr	r3, [r7, #4]
    7a86:	661a      	str	r2, [r3, #96]	; 0x60
    clkport     = 0;
    7a88:	687b      	ldr	r3, [r7, #4]
    7a8a:	2200      	movs	r2, #0
    7a8c:	645a      	str	r2, [r3, #68]	; 0x44
    clkpinmask  = 0;
    7a8e:	687b      	ldr	r3, [r7, #4]
    7a90:	2200      	movs	r2, #0
    7a92:	659a      	str	r2, [r3, #88]	; 0x58
    mosiport    = 0;
    7a94:	687b      	ldr	r3, [r7, #4]
    7a96:	2200      	movs	r2, #0
    7a98:	63da      	str	r2, [r3, #60]	; 0x3c
    mosipinmask = 0;
    7a9a:	687b      	ldr	r3, [r7, #4]
    7a9c:	2200      	movs	r2, #0
    7a9e:	651a      	str	r2, [r3, #80]	; 0x50
    misoport    = 0;
    7aa0:	687b      	ldr	r3, [r7, #4]
    7aa2:	2200      	movs	r2, #0
    7aa4:	641a      	str	r2, [r3, #64]	; 0x40
    misopinmask = 0;
    7aa6:	687b      	ldr	r3, [r7, #4]
    7aa8:	2200      	movs	r2, #0
    7aaa:	655a      	str	r2, [r3, #84]	; 0x54
#endif
}
    7aac:	687b      	ldr	r3, [r7, #4]
    7aae:	0018      	movs	r0, r3
    7ab0:	46bd      	mov	sp, r7
    7ab2:	b003      	add	sp, #12
    7ab4:	bd90      	pop	{r4, r7, pc}
    7ab6:	46c0      	nop			; (mov r8, r8)
    7ab8:	00013768 	.word	0x00013768
    7abc:	000138cc 	.word	0x000138cc
    7ac0:	41004400 	.word	0x41004400

00007ac4 <_ZN16Adafruit_ILI93415beginEm>:
#ifdef ESP32
void Adafruit_ILI9341::begin(uint32_t freq, SPIClass &spi)
#else
void Adafruit_ILI9341::begin(uint32_t freq)
#endif
{
    7ac4:	b580      	push	{r7, lr}
    7ac6:	b082      	sub	sp, #8
    7ac8:	af00      	add	r7, sp, #0
    7aca:	6078      	str	r0, [r7, #4]
    7acc:	6039      	str	r1, [r7, #0]
#ifdef ESP32
    _spi = spi;
#endif
    if(!freq){
    7ace:	683b      	ldr	r3, [r7, #0]
    7ad0:	2b00      	cmp	r3, #0
    7ad2:	d101      	bne.n	7ad8 <_ZN16Adafruit_ILI93415beginEm+0x14>
        freq = SPI_DEFAULT_FREQ;
    7ad4:	4ba6      	ldr	r3, [pc, #664]	; (7d70 <_ZN16Adafruit_ILI93415beginEm+0x2ac>)
    7ad6:	603b      	str	r3, [r7, #0]
    }
    _freq = freq;
    7ad8:	687b      	ldr	r3, [r7, #4]
    7ada:	683a      	ldr	r2, [r7, #0]
    7adc:	621a      	str	r2, [r3, #32]

    // Control Pins
    pinMode(_dc, OUTPUT);
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ae2:	2101      	movs	r1, #1
    7ae4:	0018      	movs	r0, r3
    7ae6:	f7fe ffbf 	bl	6a68 <pinMode>
    digitalWrite(_dc, LOW);
    7aea:	687b      	ldr	r3, [r7, #4]
    7aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7aee:	2100      	movs	r1, #0
    7af0:	0018      	movs	r0, r3
    7af2:	f7ff f8e3 	bl	6cbc <digitalWrite>
    pinMode(_cs, OUTPUT);
    7af6:	687b      	ldr	r3, [r7, #4]
    7af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7afa:	2101      	movs	r1, #1
    7afc:	0018      	movs	r0, r3
    7afe:	f7fe ffb3 	bl	6a68 <pinMode>
    digitalWrite(_cs, HIGH);
    7b02:	687b      	ldr	r3, [r7, #4]
    7b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7b06:	2101      	movs	r1, #1
    7b08:	0018      	movs	r0, r3
    7b0a:	f7ff f8d7 	bl	6cbc <digitalWrite>

    // Software SPI
    if(_sclk >= 0){
    7b0e:	687b      	ldr	r3, [r7, #4]
    7b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b12:	2b00      	cmp	r3, #0
    7b14:	db21      	blt.n	7b5a <_ZN16Adafruit_ILI93415beginEm+0x96>
        pinMode(_mosi, OUTPUT);
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7b1a:	2101      	movs	r1, #1
    7b1c:	0018      	movs	r0, r3
    7b1e:	f7fe ffa3 	bl	6a68 <pinMode>
        digitalWrite(_mosi, LOW);
    7b22:	687b      	ldr	r3, [r7, #4]
    7b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7b26:	2100      	movs	r1, #0
    7b28:	0018      	movs	r0, r3
    7b2a:	f7ff f8c7 	bl	6cbc <digitalWrite>
        pinMode(_sclk, OUTPUT);
    7b2e:	687b      	ldr	r3, [r7, #4]
    7b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b32:	2101      	movs	r1, #1
    7b34:	0018      	movs	r0, r3
    7b36:	f7fe ff97 	bl	6a68 <pinMode>
        digitalWrite(_sclk, HIGH);
    7b3a:	687b      	ldr	r3, [r7, #4]
    7b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b3e:	2101      	movs	r1, #1
    7b40:	0018      	movs	r0, r3
    7b42:	f7ff f8bb 	bl	6cbc <digitalWrite>
        if(_miso >= 0){
    7b46:	687b      	ldr	r3, [r7, #4]
    7b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	db05      	blt.n	7b5a <_ZN16Adafruit_ILI93415beginEm+0x96>
            pinMode(_miso, INPUT);
    7b4e:	687b      	ldr	r3, [r7, #4]
    7b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7b52:	2100      	movs	r1, #0
    7b54:	0018      	movs	r0, r3
    7b56:	f7fe ff87 	bl	6a68 <pinMode>
        }
    }

    // Hardware SPI
    SPI_BEGIN();
    7b5a:	687b      	ldr	r3, [r7, #4]
    7b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b5e:	2b00      	cmp	r3, #0
    7b60:	da03      	bge.n	7b6a <_ZN16Adafruit_ILI93415beginEm+0xa6>
    7b62:	4b84      	ldr	r3, [pc, #528]	; (7d74 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7b64:	0018      	movs	r0, r3
    7b66:	f003 fed7 	bl	b918 <_ZN8SPIClass5beginEv>

    // toggle RST low to reset
    if (_rst >= 0) {
    7b6a:	687b      	ldr	r3, [r7, #4]
    7b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b6e:	2b00      	cmp	r3, #0
    7b70:	db20      	blt.n	7bb4 <_ZN16Adafruit_ILI93415beginEm+0xf0>
        pinMode(_rst, OUTPUT);
    7b72:	687b      	ldr	r3, [r7, #4]
    7b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b76:	2101      	movs	r1, #1
    7b78:	0018      	movs	r0, r3
    7b7a:	f7fe ff75 	bl	6a68 <pinMode>
        digitalWrite(_rst, HIGH);
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b82:	2101      	movs	r1, #1
    7b84:	0018      	movs	r0, r3
    7b86:	f7ff f899 	bl	6cbc <digitalWrite>
        delay(100);
    7b8a:	2064      	movs	r0, #100	; 0x64
    7b8c:	f7fb fa50 	bl	3030 <delay>
        digitalWrite(_rst, LOW);
    7b90:	687b      	ldr	r3, [r7, #4]
    7b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b94:	2100      	movs	r1, #0
    7b96:	0018      	movs	r0, r3
    7b98:	f7ff f890 	bl	6cbc <digitalWrite>
        delay(100);
    7b9c:	2064      	movs	r0, #100	; 0x64
    7b9e:	f7fb fa47 	bl	3030 <delay>
        digitalWrite(_rst, HIGH);
    7ba2:	687b      	ldr	r3, [r7, #4]
    7ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ba6:	2101      	movs	r1, #1
    7ba8:	0018      	movs	r0, r3
    7baa:	f7ff f887 	bl	6cbc <digitalWrite>
        delay(200);
    7bae:	20c8      	movs	r0, #200	; 0xc8
    7bb0:	f7fb fa3e 	bl	3030 <delay>
    }

    startWrite();
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	681b      	ldr	r3, [r3, #0]
    7bb8:	3314      	adds	r3, #20
    7bba:	681b      	ldr	r3, [r3, #0]
    7bbc:	687a      	ldr	r2, [r7, #4]
    7bbe:	0010      	movs	r0, r2
    7bc0:	4798      	blx	r3

    writeCommand(0xEF);
    7bc2:	687b      	ldr	r3, [r7, #4]
    7bc4:	21ef      	movs	r1, #239	; 0xef
    7bc6:	0018      	movs	r0, r3
    7bc8:	f000 fb0c 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x03);
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	2103      	movs	r1, #3
    7bd0:	0018      	movs	r0, r3
    7bd2:	f000 fa69 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x80);
    7bd6:	687b      	ldr	r3, [r7, #4]
    7bd8:	2180      	movs	r1, #128	; 0x80
    7bda:	0018      	movs	r0, r3
    7bdc:	f000 fa64 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x02);
    7be0:	687b      	ldr	r3, [r7, #4]
    7be2:	2102      	movs	r1, #2
    7be4:	0018      	movs	r0, r3
    7be6:	f000 fa5f 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xCF);
    7bea:	687b      	ldr	r3, [r7, #4]
    7bec:	21cf      	movs	r1, #207	; 0xcf
    7bee:	0018      	movs	r0, r3
    7bf0:	f000 faf8 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7bf4:	687b      	ldr	r3, [r7, #4]
    7bf6:	2100      	movs	r1, #0
    7bf8:	0018      	movs	r0, r3
    7bfa:	f000 fa55 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0XC1);
    7bfe:	687b      	ldr	r3, [r7, #4]
    7c00:	21c1      	movs	r1, #193	; 0xc1
    7c02:	0018      	movs	r0, r3
    7c04:	f000 fa50 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X30);
    7c08:	687b      	ldr	r3, [r7, #4]
    7c0a:	2130      	movs	r1, #48	; 0x30
    7c0c:	0018      	movs	r0, r3
    7c0e:	f000 fa4b 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xED);
    7c12:	687b      	ldr	r3, [r7, #4]
    7c14:	21ed      	movs	r1, #237	; 0xed
    7c16:	0018      	movs	r0, r3
    7c18:	f000 fae4 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x64);
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	2164      	movs	r1, #100	; 0x64
    7c20:	0018      	movs	r0, r3
    7c22:	f000 fa41 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7c26:	687b      	ldr	r3, [r7, #4]
    7c28:	2103      	movs	r1, #3
    7c2a:	0018      	movs	r0, r3
    7c2c:	f000 fa3c 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X12);
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	2112      	movs	r1, #18
    7c34:	0018      	movs	r0, r3
    7c36:	f000 fa37 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X81);
    7c3a:	687b      	ldr	r3, [r7, #4]
    7c3c:	2181      	movs	r1, #129	; 0x81
    7c3e:	0018      	movs	r0, r3
    7c40:	f000 fa32 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xE8);
    7c44:	687b      	ldr	r3, [r7, #4]
    7c46:	21e8      	movs	r1, #232	; 0xe8
    7c48:	0018      	movs	r0, r3
    7c4a:	f000 facb 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x85);
    7c4e:	687b      	ldr	r3, [r7, #4]
    7c50:	2185      	movs	r1, #133	; 0x85
    7c52:	0018      	movs	r0, r3
    7c54:	f000 fa28 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7c58:	687b      	ldr	r3, [r7, #4]
    7c5a:	2100      	movs	r1, #0
    7c5c:	0018      	movs	r0, r3
    7c5e:	f000 fa23 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x78);
    7c62:	687b      	ldr	r3, [r7, #4]
    7c64:	2178      	movs	r1, #120	; 0x78
    7c66:	0018      	movs	r0, r3
    7c68:	f000 fa1e 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xCB);
    7c6c:	687b      	ldr	r3, [r7, #4]
    7c6e:	21cb      	movs	r1, #203	; 0xcb
    7c70:	0018      	movs	r0, r3
    7c72:	f000 fab7 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x39);
    7c76:	687b      	ldr	r3, [r7, #4]
    7c78:	2139      	movs	r1, #57	; 0x39
    7c7a:	0018      	movs	r0, r3
    7c7c:	f000 fa14 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x2C);
    7c80:	687b      	ldr	r3, [r7, #4]
    7c82:	212c      	movs	r1, #44	; 0x2c
    7c84:	0018      	movs	r0, r3
    7c86:	f000 fa0f 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7c8a:	687b      	ldr	r3, [r7, #4]
    7c8c:	2100      	movs	r1, #0
    7c8e:	0018      	movs	r0, r3
    7c90:	f000 fa0a 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x34);
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	2134      	movs	r1, #52	; 0x34
    7c98:	0018      	movs	r0, r3
    7c9a:	f000 fa05 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x02);
    7c9e:	687b      	ldr	r3, [r7, #4]
    7ca0:	2102      	movs	r1, #2
    7ca2:	0018      	movs	r0, r3
    7ca4:	f000 fa00 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xF7);
    7ca8:	687b      	ldr	r3, [r7, #4]
    7caa:	21f7      	movs	r1, #247	; 0xf7
    7cac:	0018      	movs	r0, r3
    7cae:	f000 fa99 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x20);
    7cb2:	687b      	ldr	r3, [r7, #4]
    7cb4:	2120      	movs	r1, #32
    7cb6:	0018      	movs	r0, r3
    7cb8:	f000 f9f6 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xEA);
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	21ea      	movs	r1, #234	; 0xea
    7cc0:	0018      	movs	r0, r3
    7cc2:	f000 fa8f 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7cc6:	687b      	ldr	r3, [r7, #4]
    7cc8:	2100      	movs	r1, #0
    7cca:	0018      	movs	r0, r3
    7ccc:	f000 f9ec 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7cd0:	687b      	ldr	r3, [r7, #4]
    7cd2:	2100      	movs	r1, #0
    7cd4:	0018      	movs	r0, r3
    7cd6:	f000 f9e7 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PWCTR1);    //Power control
    7cda:	687b      	ldr	r3, [r7, #4]
    7cdc:	21c0      	movs	r1, #192	; 0xc0
    7cde:	0018      	movs	r0, r3
    7ce0:	f000 fa80 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x23);   //VRH[5:0]
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	2123      	movs	r1, #35	; 0x23
    7ce8:	0018      	movs	r0, r3
    7cea:	f000 f9dd 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PWCTR2);    //Power control
    7cee:	687b      	ldr	r3, [r7, #4]
    7cf0:	21c1      	movs	r1, #193	; 0xc1
    7cf2:	0018      	movs	r0, r3
    7cf4:	f000 fa76 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x10);   //SAP[2:0];BT[3:0]
    7cf8:	687b      	ldr	r3, [r7, #4]
    7cfa:	2110      	movs	r1, #16
    7cfc:	0018      	movs	r0, r3
    7cfe:	f000 f9d3 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VMCTR1);    //VCM control
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	21c5      	movs	r1, #197	; 0xc5
    7d06:	0018      	movs	r0, r3
    7d08:	f000 fa6c 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x3e);
    7d0c:	687b      	ldr	r3, [r7, #4]
    7d0e:	213e      	movs	r1, #62	; 0x3e
    7d10:	0018      	movs	r0, r3
    7d12:	f000 f9c9 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x28);
    7d16:	687b      	ldr	r3, [r7, #4]
    7d18:	2128      	movs	r1, #40	; 0x28
    7d1a:	0018      	movs	r0, r3
    7d1c:	f000 f9c4 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VMCTR2);    //VCM control2
    7d20:	687b      	ldr	r3, [r7, #4]
    7d22:	21c7      	movs	r1, #199	; 0xc7
    7d24:	0018      	movs	r0, r3
    7d26:	f000 fa5d 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x86);  //--
    7d2a:	687b      	ldr	r3, [r7, #4]
    7d2c:	2186      	movs	r1, #134	; 0x86
    7d2e:	0018      	movs	r0, r3
    7d30:	f000 f9ba 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_MADCTL);    // Memory Access Control
    7d34:	687b      	ldr	r3, [r7, #4]
    7d36:	2136      	movs	r1, #54	; 0x36
    7d38:	0018      	movs	r0, r3
    7d3a:	f000 fa53 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x48);
    7d3e:	687b      	ldr	r3, [r7, #4]
    7d40:	2148      	movs	r1, #72	; 0x48
    7d42:	0018      	movs	r0, r3
    7d44:	f000 f9b0 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VSCRSADD); // Vertical scroll
    7d48:	687b      	ldr	r3, [r7, #4]
    7d4a:	2137      	movs	r1, #55	; 0x37
    7d4c:	0018      	movs	r0, r3
    7d4e:	f000 fa49 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE16(0);                 // Zero
    7d52:	687b      	ldr	r3, [r7, #4]
    7d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7d56:	2b00      	cmp	r3, #0
    7d58:	da0e      	bge.n	7d78 <_ZN16Adafruit_ILI93415beginEm+0x2b4>
    7d5a:	4b06      	ldr	r3, [pc, #24]	; (7d74 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7d5c:	2100      	movs	r1, #0
    7d5e:	0018      	movs	r0, r3
    7d60:	f003 fec6 	bl	baf0 <_ZN8SPIClass8transferEh>
    7d64:	4b03      	ldr	r3, [pc, #12]	; (7d74 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7d66:	2100      	movs	r1, #0
    7d68:	0018      	movs	r0, r3
    7d6a:	f003 fec1 	bl	baf0 <_ZN8SPIClass8transferEh>
    7d6e:	e00d      	b.n	7d8c <_ZN16Adafruit_ILI93415beginEm+0x2c8>
    7d70:	016e3600 	.word	0x016e3600
    7d74:	20000b7c 	.word	0x20000b7c
    7d78:	687b      	ldr	r3, [r7, #4]
    7d7a:	2100      	movs	r1, #0
    7d7c:	0018      	movs	r0, r3
    7d7e:	f000 f993 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    7d82:	687b      	ldr	r3, [r7, #4]
    7d84:	2100      	movs	r1, #0
    7d86:	0018      	movs	r0, r3
    7d88:	f000 f98e 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PIXFMT);
    7d8c:	687b      	ldr	r3, [r7, #4]
    7d8e:	213a      	movs	r1, #58	; 0x3a
    7d90:	0018      	movs	r0, r3
    7d92:	f000 fa27 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x55);
    7d96:	687b      	ldr	r3, [r7, #4]
    7d98:	2155      	movs	r1, #85	; 0x55
    7d9a:	0018      	movs	r0, r3
    7d9c:	f000 f984 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_FRMCTR1);
    7da0:	687b      	ldr	r3, [r7, #4]
    7da2:	21b1      	movs	r1, #177	; 0xb1
    7da4:	0018      	movs	r0, r3
    7da6:	f000 fa1d 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7daa:	687b      	ldr	r3, [r7, #4]
    7dac:	2100      	movs	r1, #0
    7dae:	0018      	movs	r0, r3
    7db0:	f000 f97a 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x18);
    7db4:	687b      	ldr	r3, [r7, #4]
    7db6:	2118      	movs	r1, #24
    7db8:	0018      	movs	r0, r3
    7dba:	f000 f975 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_DFUNCTR);    // Display Function Control
    7dbe:	687b      	ldr	r3, [r7, #4]
    7dc0:	21b6      	movs	r1, #182	; 0xb6
    7dc2:	0018      	movs	r0, r3
    7dc4:	f000 fa0e 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x08);
    7dc8:	687b      	ldr	r3, [r7, #4]
    7dca:	2108      	movs	r1, #8
    7dcc:	0018      	movs	r0, r3
    7dce:	f000 f96b 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x82);
    7dd2:	687b      	ldr	r3, [r7, #4]
    7dd4:	2182      	movs	r1, #130	; 0x82
    7dd6:	0018      	movs	r0, r3
    7dd8:	f000 f966 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x27);
    7ddc:	687b      	ldr	r3, [r7, #4]
    7dde:	2127      	movs	r1, #39	; 0x27
    7de0:	0018      	movs	r0, r3
    7de2:	f000 f961 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xF2);    // 3Gamma Function Disable
    7de6:	687b      	ldr	r3, [r7, #4]
    7de8:	21f2      	movs	r1, #242	; 0xf2
    7dea:	0018      	movs	r0, r3
    7dec:	f000 f9fa 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7df0:	687b      	ldr	r3, [r7, #4]
    7df2:	2100      	movs	r1, #0
    7df4:	0018      	movs	r0, r3
    7df6:	f000 f957 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GAMMASET);    //Gamma curve selected
    7dfa:	687b      	ldr	r3, [r7, #4]
    7dfc:	2126      	movs	r1, #38	; 0x26
    7dfe:	0018      	movs	r0, r3
    7e00:	f000 f9f0 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x01);
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	2101      	movs	r1, #1
    7e08:	0018      	movs	r0, r3
    7e0a:	f000 f94d 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GMCTRP1);    //Set Gamma
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	21e0      	movs	r1, #224	; 0xe0
    7e12:	0018      	movs	r0, r3
    7e14:	f000 f9e6 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x0F);
    7e18:	687b      	ldr	r3, [r7, #4]
    7e1a:	210f      	movs	r1, #15
    7e1c:	0018      	movs	r0, r3
    7e1e:	f000 f943 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7e22:	687b      	ldr	r3, [r7, #4]
    7e24:	2131      	movs	r1, #49	; 0x31
    7e26:	0018      	movs	r0, r3
    7e28:	f000 f93e 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x2B);
    7e2c:	687b      	ldr	r3, [r7, #4]
    7e2e:	212b      	movs	r1, #43	; 0x2b
    7e30:	0018      	movs	r0, r3
    7e32:	f000 f939 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0C);
    7e36:	687b      	ldr	r3, [r7, #4]
    7e38:	210c      	movs	r1, #12
    7e3a:	0018      	movs	r0, r3
    7e3c:	f000 f934 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7e40:	687b      	ldr	r3, [r7, #4]
    7e42:	210e      	movs	r1, #14
    7e44:	0018      	movs	r0, r3
    7e46:	f000 f92f 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x08);
    7e4a:	687b      	ldr	r3, [r7, #4]
    7e4c:	2108      	movs	r1, #8
    7e4e:	0018      	movs	r0, r3
    7e50:	f000 f92a 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x4E);
    7e54:	687b      	ldr	r3, [r7, #4]
    7e56:	214e      	movs	r1, #78	; 0x4e
    7e58:	0018      	movs	r0, r3
    7e5a:	f000 f925 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0xF1);
    7e5e:	687b      	ldr	r3, [r7, #4]
    7e60:	21f1      	movs	r1, #241	; 0xf1
    7e62:	0018      	movs	r0, r3
    7e64:	f000 f920 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x37);
    7e68:	687b      	ldr	r3, [r7, #4]
    7e6a:	2137      	movs	r1, #55	; 0x37
    7e6c:	0018      	movs	r0, r3
    7e6e:	f000 f91b 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x07);
    7e72:	687b      	ldr	r3, [r7, #4]
    7e74:	2107      	movs	r1, #7
    7e76:	0018      	movs	r0, r3
    7e78:	f000 f916 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x10);
    7e7c:	687b      	ldr	r3, [r7, #4]
    7e7e:	2110      	movs	r1, #16
    7e80:	0018      	movs	r0, r3
    7e82:	f000 f911 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7e86:	687b      	ldr	r3, [r7, #4]
    7e88:	2103      	movs	r1, #3
    7e8a:	0018      	movs	r0, r3
    7e8c:	f000 f90c 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7e90:	687b      	ldr	r3, [r7, #4]
    7e92:	210e      	movs	r1, #14
    7e94:	0018      	movs	r0, r3
    7e96:	f000 f907 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x09);
    7e9a:	687b      	ldr	r3, [r7, #4]
    7e9c:	2109      	movs	r1, #9
    7e9e:	0018      	movs	r0, r3
    7ea0:	f000 f902 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7ea4:	687b      	ldr	r3, [r7, #4]
    7ea6:	2100      	movs	r1, #0
    7ea8:	0018      	movs	r0, r3
    7eaa:	f000 f8fd 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GMCTRN1);    //Set Gamma
    7eae:	687b      	ldr	r3, [r7, #4]
    7eb0:	21e1      	movs	r1, #225	; 0xe1
    7eb2:	0018      	movs	r0, r3
    7eb4:	f000 f996 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7eb8:	687b      	ldr	r3, [r7, #4]
    7eba:	2100      	movs	r1, #0
    7ebc:	0018      	movs	r0, r3
    7ebe:	f000 f8f3 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7ec2:	687b      	ldr	r3, [r7, #4]
    7ec4:	210e      	movs	r1, #14
    7ec6:	0018      	movs	r0, r3
    7ec8:	f000 f8ee 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x14);
    7ecc:	687b      	ldr	r3, [r7, #4]
    7ece:	2114      	movs	r1, #20
    7ed0:	0018      	movs	r0, r3
    7ed2:	f000 f8e9 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7ed6:	687b      	ldr	r3, [r7, #4]
    7ed8:	2103      	movs	r1, #3
    7eda:	0018      	movs	r0, r3
    7edc:	f000 f8e4 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x11);
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	2111      	movs	r1, #17
    7ee4:	0018      	movs	r0, r3
    7ee6:	f000 f8df 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x07);
    7eea:	687b      	ldr	r3, [r7, #4]
    7eec:	2107      	movs	r1, #7
    7eee:	0018      	movs	r0, r3
    7ef0:	f000 f8da 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7ef4:	687b      	ldr	r3, [r7, #4]
    7ef6:	2131      	movs	r1, #49	; 0x31
    7ef8:	0018      	movs	r0, r3
    7efa:	f000 f8d5 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0xC1);
    7efe:	687b      	ldr	r3, [r7, #4]
    7f00:	21c1      	movs	r1, #193	; 0xc1
    7f02:	0018      	movs	r0, r3
    7f04:	f000 f8d0 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x48);
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	2148      	movs	r1, #72	; 0x48
    7f0c:	0018      	movs	r0, r3
    7f0e:	f000 f8cb 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x08);
    7f12:	687b      	ldr	r3, [r7, #4]
    7f14:	2108      	movs	r1, #8
    7f16:	0018      	movs	r0, r3
    7f18:	f000 f8c6 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0F);
    7f1c:	687b      	ldr	r3, [r7, #4]
    7f1e:	210f      	movs	r1, #15
    7f20:	0018      	movs	r0, r3
    7f22:	f000 f8c1 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0C);
    7f26:	687b      	ldr	r3, [r7, #4]
    7f28:	210c      	movs	r1, #12
    7f2a:	0018      	movs	r0, r3
    7f2c:	f000 f8bc 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7f30:	687b      	ldr	r3, [r7, #4]
    7f32:	2131      	movs	r1, #49	; 0x31
    7f34:	0018      	movs	r0, r3
    7f36:	f000 f8b7 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x36);
    7f3a:	687b      	ldr	r3, [r7, #4]
    7f3c:	2136      	movs	r1, #54	; 0x36
    7f3e:	0018      	movs	r0, r3
    7f40:	f000 f8b2 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0F);
    7f44:	687b      	ldr	r3, [r7, #4]
    7f46:	210f      	movs	r1, #15
    7f48:	0018      	movs	r0, r3
    7f4a:	f000 f8ad 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_SLPOUT);    //Exit Sleep
    7f4e:	687b      	ldr	r3, [r7, #4]
    7f50:	2111      	movs	r1, #17
    7f52:	0018      	movs	r0, r3
    7f54:	f000 f946 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    delay(120);
    7f58:	2078      	movs	r0, #120	; 0x78
    7f5a:	f7fb f869 	bl	3030 <delay>
    writeCommand(ILI9341_DISPON);    //Display on
    7f5e:	687b      	ldr	r3, [r7, #4]
    7f60:	2129      	movs	r1, #41	; 0x29
    7f62:	0018      	movs	r0, r3
    7f64:	f000 f93e 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    delay(120);
    7f68:	2078      	movs	r0, #120	; 0x78
    7f6a:	f7fb f861 	bl	3030 <delay>
    endWrite();
    7f6e:	687b      	ldr	r3, [r7, #4]
    7f70:	681b      	ldr	r3, [r3, #0]
    7f72:	332c      	adds	r3, #44	; 0x2c
    7f74:	681b      	ldr	r3, [r3, #0]
    7f76:	687a      	ldr	r2, [r7, #4]
    7f78:	0010      	movs	r0, r2
    7f7a:	4798      	blx	r3

    _width  = ILI9341_TFTWIDTH;
    7f7c:	687b      	ldr	r3, [r7, #4]
    7f7e:	22f0      	movs	r2, #240	; 0xf0
    7f80:	819a      	strh	r2, [r3, #12]
    _height = ILI9341_TFTHEIGHT;
    7f82:	687b      	ldr	r3, [r7, #4]
    7f84:	22a0      	movs	r2, #160	; 0xa0
    7f86:	0052      	lsls	r2, r2, #1
    7f88:	81da      	strh	r2, [r3, #14]
}
    7f8a:	46c0      	nop			; (mov r8, r8)
    7f8c:	46bd      	mov	sp, r7
    7f8e:	b002      	add	sp, #8
    7f90:	bd80      	pop	{r7, pc}
    7f92:	46c0      	nop			; (mov r8, r8)

00007f94 <_ZN16Adafruit_ILI934111setRotationEh>:

void Adafruit_ILI9341::setRotation(uint8_t m) {
    7f94:	b580      	push	{r7, lr}
    7f96:	b082      	sub	sp, #8
    7f98:	af00      	add	r7, sp, #0
    7f9a:	6078      	str	r0, [r7, #4]
    7f9c:	000a      	movs	r2, r1
    7f9e:	1cfb      	adds	r3, r7, #3
    7fa0:	701a      	strb	r2, [r3, #0]
    rotation = m % 4; // can't be higher than 3
    7fa2:	1cfb      	adds	r3, r7, #3
    7fa4:	781b      	ldrb	r3, [r3, #0]
    7fa6:	2203      	movs	r2, #3
    7fa8:	4013      	ands	r3, r2
    7faa:	b2da      	uxtb	r2, r3
    7fac:	687b      	ldr	r3, [r7, #4]
    7fae:	765a      	strb	r2, [r3, #25]
    switch (rotation) {
    7fb0:	687b      	ldr	r3, [r7, #4]
    7fb2:	7e5b      	ldrb	r3, [r3, #25]
    7fb4:	2b01      	cmp	r3, #1
    7fb6:	d013      	beq.n	7fe0 <_ZN16Adafruit_ILI934111setRotationEh+0x4c>
    7fb8:	dc02      	bgt.n	7fc0 <_ZN16Adafruit_ILI934111setRotationEh+0x2c>
    7fba:	2b00      	cmp	r3, #0
    7fbc:	d005      	beq.n	7fca <_ZN16Adafruit_ILI934111setRotationEh+0x36>
    7fbe:	e030      	b.n	8022 <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
    7fc0:	2b02      	cmp	r3, #2
    7fc2:	d018      	beq.n	7ff6 <_ZN16Adafruit_ILI934111setRotationEh+0x62>
    7fc4:	2b03      	cmp	r3, #3
    7fc6:	d021      	beq.n	800c <_ZN16Adafruit_ILI934111setRotationEh+0x78>
    7fc8:	e02b      	b.n	8022 <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 0:
            m = (MADCTL_MX | MADCTL_BGR);
    7fca:	1cfb      	adds	r3, r7, #3
    7fcc:	2248      	movs	r2, #72	; 0x48
    7fce:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTWIDTH;
    7fd0:	687b      	ldr	r3, [r7, #4]
    7fd2:	22f0      	movs	r2, #240	; 0xf0
    7fd4:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTHEIGHT;
    7fd6:	687b      	ldr	r3, [r7, #4]
    7fd8:	22a0      	movs	r2, #160	; 0xa0
    7fda:	0052      	lsls	r2, r2, #1
    7fdc:	81da      	strh	r2, [r3, #14]
            break;
    7fde:	e020      	b.n	8022 <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 1:
            m = (MADCTL_MV | MADCTL_BGR);
    7fe0:	1cfb      	adds	r3, r7, #3
    7fe2:	2228      	movs	r2, #40	; 0x28
    7fe4:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTHEIGHT;
    7fe6:	687b      	ldr	r3, [r7, #4]
    7fe8:	22a0      	movs	r2, #160	; 0xa0
    7fea:	0052      	lsls	r2, r2, #1
    7fec:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTWIDTH;
    7fee:	687b      	ldr	r3, [r7, #4]
    7ff0:	22f0      	movs	r2, #240	; 0xf0
    7ff2:	81da      	strh	r2, [r3, #14]
            break;
    7ff4:	e015      	b.n	8022 <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 2:
            m = (MADCTL_MY | MADCTL_BGR);
    7ff6:	1cfb      	adds	r3, r7, #3
    7ff8:	2288      	movs	r2, #136	; 0x88
    7ffa:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTWIDTH;
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	22f0      	movs	r2, #240	; 0xf0
    8000:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTHEIGHT;
    8002:	687b      	ldr	r3, [r7, #4]
    8004:	22a0      	movs	r2, #160	; 0xa0
    8006:	0052      	lsls	r2, r2, #1
    8008:	81da      	strh	r2, [r3, #14]
            break;
    800a:	e00a      	b.n	8022 <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 3:
            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
    800c:	1cfb      	adds	r3, r7, #3
    800e:	22e8      	movs	r2, #232	; 0xe8
    8010:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTHEIGHT;
    8012:	687b      	ldr	r3, [r7, #4]
    8014:	22a0      	movs	r2, #160	; 0xa0
    8016:	0052      	lsls	r2, r2, #1
    8018:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTWIDTH;
    801a:	687b      	ldr	r3, [r7, #4]
    801c:	22f0      	movs	r2, #240	; 0xf0
    801e:	81da      	strh	r2, [r3, #14]
            break;
    8020:	46c0      	nop			; (mov r8, r8)
    }

    startWrite();
    8022:	687b      	ldr	r3, [r7, #4]
    8024:	681b      	ldr	r3, [r3, #0]
    8026:	3314      	adds	r3, #20
    8028:	681b      	ldr	r3, [r3, #0]
    802a:	687a      	ldr	r2, [r7, #4]
    802c:	0010      	movs	r0, r2
    802e:	4798      	blx	r3
    writeCommand(ILI9341_MADCTL);
    8030:	687b      	ldr	r3, [r7, #4]
    8032:	2136      	movs	r1, #54	; 0x36
    8034:	0018      	movs	r0, r3
    8036:	f000 f8d5 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(m);
    803a:	1cfb      	adds	r3, r7, #3
    803c:	781a      	ldrb	r2, [r3, #0]
    803e:	687b      	ldr	r3, [r7, #4]
    8040:	0011      	movs	r1, r2
    8042:	0018      	movs	r0, r3
    8044:	f000 f830 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    endWrite();
    8048:	687b      	ldr	r3, [r7, #4]
    804a:	681b      	ldr	r3, [r3, #0]
    804c:	332c      	adds	r3, #44	; 0x2c
    804e:	681b      	ldr	r3, [r3, #0]
    8050:	687a      	ldr	r2, [r7, #4]
    8052:	0010      	movs	r0, r2
    8054:	4798      	blx	r3
}
    8056:	46c0      	nop			; (mov r8, r8)
    8058:	46bd      	mov	sp, r7
    805a:	b002      	add	sp, #8
    805c:	bd80      	pop	{r7, pc}

0000805e <_ZN16Adafruit_ILI934113invertDisplayEb>:

void Adafruit_ILI9341::invertDisplay(boolean i) {
    805e:	b580      	push	{r7, lr}
    8060:	b082      	sub	sp, #8
    8062:	af00      	add	r7, sp, #0
    8064:	6078      	str	r0, [r7, #4]
    8066:	000a      	movs	r2, r1
    8068:	1cfb      	adds	r3, r7, #3
    806a:	701a      	strb	r2, [r3, #0]
    startWrite();
    806c:	687b      	ldr	r3, [r7, #4]
    806e:	681b      	ldr	r3, [r3, #0]
    8070:	3314      	adds	r3, #20
    8072:	681b      	ldr	r3, [r3, #0]
    8074:	687a      	ldr	r2, [r7, #4]
    8076:	0010      	movs	r0, r2
    8078:	4798      	blx	r3
    writeCommand(i ? ILI9341_INVON : ILI9341_INVOFF);
    807a:	1cfb      	adds	r3, r7, #3
    807c:	781b      	ldrb	r3, [r3, #0]
    807e:	2b00      	cmp	r3, #0
    8080:	d001      	beq.n	8086 <_ZN16Adafruit_ILI934113invertDisplayEb+0x28>
    8082:	2321      	movs	r3, #33	; 0x21
    8084:	e000      	b.n	8088 <_ZN16Adafruit_ILI934113invertDisplayEb+0x2a>
    8086:	2320      	movs	r3, #32
    8088:	687a      	ldr	r2, [r7, #4]
    808a:	0019      	movs	r1, r3
    808c:	0010      	movs	r0, r2
    808e:	f000 f8a9 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    endWrite();
    8092:	687b      	ldr	r3, [r7, #4]
    8094:	681b      	ldr	r3, [r3, #0]
    8096:	332c      	adds	r3, #44	; 0x2c
    8098:	681b      	ldr	r3, [r3, #0]
    809a:	687a      	ldr	r2, [r7, #4]
    809c:	0010      	movs	r0, r2
    809e:	4798      	blx	r3
}
    80a0:	46c0      	nop			; (mov r8, r8)
    80a2:	46bd      	mov	sp, r7
    80a4:	b002      	add	sp, #8
    80a6:	bd80      	pop	{r7, pc}

000080a8 <_ZN16Adafruit_ILI93418spiWriteEh>:
        }
    }
    return r;
}

void Adafruit_ILI9341::spiWrite(uint8_t b) {
    80a8:	b580      	push	{r7, lr}
    80aa:	b084      	sub	sp, #16
    80ac:	af00      	add	r7, sp, #0
    80ae:	6078      	str	r0, [r7, #4]
    80b0:	000a      	movs	r2, r1
    80b2:	1cfb      	adds	r3, r7, #3
    80b4:	701a      	strb	r2, [r3, #0]
    if(_sclk < 0){
    80b6:	687b      	ldr	r3, [r7, #4]
    80b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    80ba:	2b00      	cmp	r3, #0
    80bc:	da07      	bge.n	80ce <_ZN16Adafruit_ILI93418spiWriteEh+0x26>
        HSPI_WRITE(b);
    80be:	1cfb      	adds	r3, r7, #3
    80c0:	781a      	ldrb	r2, [r3, #0]
    80c2:	4b25      	ldr	r3, [pc, #148]	; (8158 <_ZN16Adafruit_ILI93418spiWriteEh+0xb0>)
    80c4:	0011      	movs	r1, r2
    80c6:	0018      	movs	r0, r3
    80c8:	f003 fd12 	bl	baf0 <_ZN8SPIClass8transferEh>
        return;
    80cc:	e040      	b.n	8150 <_ZN16Adafruit_ILI93418spiWriteEh+0xa8>
    }
    for(uint8_t bit = 0x80; bit; bit >>= 1){
    80ce:	230f      	movs	r3, #15
    80d0:	18fb      	adds	r3, r7, r3
    80d2:	2280      	movs	r2, #128	; 0x80
    80d4:	701a      	strb	r2, [r3, #0]
    80d6:	230f      	movs	r3, #15
    80d8:	18fb      	adds	r3, r7, r3
    80da:	781b      	ldrb	r3, [r3, #0]
    80dc:	2b00      	cmp	r3, #0
    80de:	d037      	beq.n	8150 <_ZN16Adafruit_ILI93418spiWriteEh+0xa8>
        if((b) & bit){
    80e0:	1cfb      	adds	r3, r7, #3
    80e2:	220f      	movs	r2, #15
    80e4:	18ba      	adds	r2, r7, r2
    80e6:	781b      	ldrb	r3, [r3, #0]
    80e8:	7812      	ldrb	r2, [r2, #0]
    80ea:	4013      	ands	r3, r2
    80ec:	b2db      	uxtb	r3, r3
    80ee:	2b00      	cmp	r3, #0
    80f0:	d009      	beq.n	8106 <_ZN16Adafruit_ILI93418spiWriteEh+0x5e>
            SSPI_MOSI_HIGH();
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    80f6:	687a      	ldr	r2, [r7, #4]
    80f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    80fa:	6811      	ldr	r1, [r2, #0]
    80fc:	687a      	ldr	r2, [r7, #4]
    80fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
    8100:	430a      	orrs	r2, r1
    8102:	601a      	str	r2, [r3, #0]
    8104:	e009      	b.n	811a <_ZN16Adafruit_ILI93418spiWriteEh+0x72>
        } else {
            SSPI_MOSI_LOW();
    8106:	687b      	ldr	r3, [r7, #4]
    8108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    810a:	687a      	ldr	r2, [r7, #4]
    810c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    810e:	6811      	ldr	r1, [r2, #0]
    8110:	687a      	ldr	r2, [r7, #4]
    8112:	6d12      	ldr	r2, [r2, #80]	; 0x50
    8114:	43d2      	mvns	r2, r2
    8116:	400a      	ands	r2, r1
    8118:	601a      	str	r2, [r3, #0]
        }
        SSPI_SCK_LOW();
    811a:	687b      	ldr	r3, [r7, #4]
    811c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    811e:	687a      	ldr	r2, [r7, #4]
    8120:	6c52      	ldr	r2, [r2, #68]	; 0x44
    8122:	6811      	ldr	r1, [r2, #0]
    8124:	687a      	ldr	r2, [r7, #4]
    8126:	6d92      	ldr	r2, [r2, #88]	; 0x58
    8128:	43d2      	mvns	r2, r2
    812a:	400a      	ands	r2, r1
    812c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    812e:	687b      	ldr	r3, [r7, #4]
    8130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8132:	687a      	ldr	r2, [r7, #4]
    8134:	6c52      	ldr	r2, [r2, #68]	; 0x44
    8136:	6811      	ldr	r1, [r2, #0]
    8138:	687a      	ldr	r2, [r7, #4]
    813a:	6d92      	ldr	r2, [r2, #88]	; 0x58
    813c:	430a      	orrs	r2, r1
    813e:	601a      	str	r2, [r3, #0]
    for(uint8_t bit = 0x80; bit; bit >>= 1){
    8140:	230f      	movs	r3, #15
    8142:	18fb      	adds	r3, r7, r3
    8144:	781b      	ldrb	r3, [r3, #0]
    8146:	105a      	asrs	r2, r3, #1
    8148:	230f      	movs	r3, #15
    814a:	18fb      	adds	r3, r7, r3
    814c:	701a      	strb	r2, [r3, #0]
    814e:	e7c2      	b.n	80d6 <_ZN16Adafruit_ILI93418spiWriteEh+0x2e>
    }
}
    8150:	46bd      	mov	sp, r7
    8152:	b004      	add	sp, #16
    8154:	bd80      	pop	{r7, pc}
    8156:	46c0      	nop			; (mov r8, r8)
    8158:	20000b7c 	.word	0x20000b7c

0000815c <_ZN16Adafruit_ILI934110startWriteEv>:

/*
 * Transaction API
 * */

void Adafruit_ILI9341::startWrite(void){
    815c:	b580      	push	{r7, lr}
    815e:	b084      	sub	sp, #16
    8160:	af00      	add	r7, sp, #0
    8162:	6078      	str	r0, [r7, #4]
    SPI_BEGIN_TRANSACTION();
    8164:	687b      	ldr	r3, [r7, #4]
    8166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8168:	2b00      	cmp	r3, #0
    816a:	da0e      	bge.n	818a <_ZN16Adafruit_ILI934110startWriteEv+0x2e>
    816c:	687b      	ldr	r3, [r7, #4]
    816e:	6a19      	ldr	r1, [r3, #32]
    8170:	2308      	movs	r3, #8
    8172:	18f8      	adds	r0, r7, r3
    8174:	2302      	movs	r3, #2
    8176:	2201      	movs	r2, #1
    8178:	f7ff fb74 	bl	7864 <_ZN11SPISettingsC1Em8BitOrderh>
    817c:	2308      	movs	r3, #8
    817e:	18fb      	adds	r3, r7, r3
    8180:	4809      	ldr	r0, [pc, #36]	; (81a8 <_ZN16Adafruit_ILI934110startWriteEv+0x4c>)
    8182:	6819      	ldr	r1, [r3, #0]
    8184:	685a      	ldr	r2, [r3, #4]
    8186:	f003 fc57 	bl	ba38 <_ZN8SPIClass16beginTransactionE11SPISettings>
    SPI_CS_LOW();
    818a:	687b      	ldr	r3, [r7, #4]
    818c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    818e:	687a      	ldr	r2, [r7, #4]
    8190:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    8192:	6811      	ldr	r1, [r2, #0]
    8194:	687a      	ldr	r2, [r7, #4]
    8196:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    8198:	43d2      	mvns	r2, r2
    819a:	400a      	ands	r2, r1
    819c:	601a      	str	r2, [r3, #0]
}
    819e:	46c0      	nop			; (mov r8, r8)
    81a0:	46bd      	mov	sp, r7
    81a2:	b004      	add	sp, #16
    81a4:	bd80      	pop	{r7, pc}
    81a6:	46c0      	nop			; (mov r8, r8)
    81a8:	20000b7c 	.word	0x20000b7c

000081ac <_ZN16Adafruit_ILI93418endWriteEv>:

void Adafruit_ILI9341::endWrite(void){
    81ac:	b580      	push	{r7, lr}
    81ae:	b082      	sub	sp, #8
    81b0:	af00      	add	r7, sp, #0
    81b2:	6078      	str	r0, [r7, #4]
    SPI_CS_HIGH();
    81b4:	687b      	ldr	r3, [r7, #4]
    81b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    81b8:	687a      	ldr	r2, [r7, #4]
    81ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    81bc:	6811      	ldr	r1, [r2, #0]
    81be:	687a      	ldr	r2, [r7, #4]
    81c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    81c2:	430a      	orrs	r2, r1
    81c4:	601a      	str	r2, [r3, #0]
    SPI_END_TRANSACTION();
    81c6:	687b      	ldr	r3, [r7, #4]
    81c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    81ca:	2b00      	cmp	r3, #0
    81cc:	da03      	bge.n	81d6 <_ZN16Adafruit_ILI93418endWriteEv+0x2a>
    81ce:	4b04      	ldr	r3, [pc, #16]	; (81e0 <_ZN16Adafruit_ILI93418endWriteEv+0x34>)
    81d0:	0018      	movs	r0, r3
    81d2:	f003 fc67 	bl	baa4 <_ZN8SPIClass14endTransactionEv>
}
    81d6:	46c0      	nop			; (mov r8, r8)
    81d8:	46bd      	mov	sp, r7
    81da:	b002      	add	sp, #8
    81dc:	bd80      	pop	{r7, pc}
    81de:	46c0      	nop			; (mov r8, r8)
    81e0:	20000b7c 	.word	0x20000b7c

000081e4 <_ZN16Adafruit_ILI934112writeCommandEh>:

void Adafruit_ILI9341::writeCommand(uint8_t cmd){
    81e4:	b580      	push	{r7, lr}
    81e6:	b082      	sub	sp, #8
    81e8:	af00      	add	r7, sp, #0
    81ea:	6078      	str	r0, [r7, #4]
    81ec:	000a      	movs	r2, r1
    81ee:	1cfb      	adds	r3, r7, #3
    81f0:	701a      	strb	r2, [r3, #0]
    SPI_DC_LOW();
    81f2:	687b      	ldr	r3, [r7, #4]
    81f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    81f6:	687a      	ldr	r2, [r7, #4]
    81f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
    81fa:	6811      	ldr	r1, [r2, #0]
    81fc:	687a      	ldr	r2, [r7, #4]
    81fe:	6e12      	ldr	r2, [r2, #96]	; 0x60
    8200:	43d2      	mvns	r2, r2
    8202:	400a      	ands	r2, r1
    8204:	601a      	str	r2, [r3, #0]
    spiWrite(cmd);
    8206:	1cfb      	adds	r3, r7, #3
    8208:	781a      	ldrb	r2, [r3, #0]
    820a:	687b      	ldr	r3, [r7, #4]
    820c:	0011      	movs	r1, r2
    820e:	0018      	movs	r0, r3
    8210:	f7ff ff4a 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    SPI_DC_HIGH();
    8214:	687b      	ldr	r3, [r7, #4]
    8216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8218:	687a      	ldr	r2, [r7, #4]
    821a:	6c92      	ldr	r2, [r2, #72]	; 0x48
    821c:	6811      	ldr	r1, [r2, #0]
    821e:	687a      	ldr	r2, [r7, #4]
    8220:	6e12      	ldr	r2, [r2, #96]	; 0x60
    8222:	430a      	orrs	r2, r1
    8224:	601a      	str	r2, [r3, #0]
}
    8226:	46c0      	nop			; (mov r8, r8)
    8228:	46bd      	mov	sp, r7
    822a:	b002      	add	sp, #8
    822c:	bd80      	pop	{r7, pc}
	...

00008230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>:

void Adafruit_ILI9341::setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
    8230:	b590      	push	{r4, r7, lr}
    8232:	b087      	sub	sp, #28
    8234:	af00      	add	r7, sp, #0
    8236:	60f8      	str	r0, [r7, #12]
    8238:	000c      	movs	r4, r1
    823a:	0010      	movs	r0, r2
    823c:	0019      	movs	r1, r3
    823e:	230a      	movs	r3, #10
    8240:	18fb      	adds	r3, r7, r3
    8242:	1c22      	adds	r2, r4, #0
    8244:	801a      	strh	r2, [r3, #0]
    8246:	2308      	movs	r3, #8
    8248:	18fb      	adds	r3, r7, r3
    824a:	1c02      	adds	r2, r0, #0
    824c:	801a      	strh	r2, [r3, #0]
    824e:	1dbb      	adds	r3, r7, #6
    8250:	1c0a      	adds	r2, r1, #0
    8252:	801a      	strh	r2, [r3, #0]
    uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
    8254:	230a      	movs	r3, #10
    8256:	18fb      	adds	r3, r7, r3
    8258:	881b      	ldrh	r3, [r3, #0]
    825a:	041b      	lsls	r3, r3, #16
    825c:	220a      	movs	r2, #10
    825e:	18ba      	adds	r2, r7, r2
    8260:	8811      	ldrh	r1, [r2, #0]
    8262:	1dba      	adds	r2, r7, #6
    8264:	8812      	ldrh	r2, [r2, #0]
    8266:	188a      	adds	r2, r1, r2
    8268:	3a01      	subs	r2, #1
    826a:	4313      	orrs	r3, r2
    826c:	617b      	str	r3, [r7, #20]
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
    826e:	2308      	movs	r3, #8
    8270:	18fb      	adds	r3, r7, r3
    8272:	881b      	ldrh	r3, [r3, #0]
    8274:	041b      	lsls	r3, r3, #16
    8276:	2208      	movs	r2, #8
    8278:	18ba      	adds	r2, r7, r2
    827a:	8811      	ldrh	r1, [r2, #0]
    827c:	2228      	movs	r2, #40	; 0x28
    827e:	18ba      	adds	r2, r7, r2
    8280:	8812      	ldrh	r2, [r2, #0]
    8282:	188a      	adds	r2, r1, r2
    8284:	3a01      	subs	r2, #1
    8286:	4313      	orrs	r3, r2
    8288:	613b      	str	r3, [r7, #16]
    writeCommand(ILI9341_CASET); // Column addr set
    828a:	68fb      	ldr	r3, [r7, #12]
    828c:	212a      	movs	r1, #42	; 0x2a
    828e:	0018      	movs	r0, r3
    8290:	f7ff ffa8 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE32(xa);
    8294:	68fb      	ldr	r3, [r7, #12]
    8296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8298:	2b00      	cmp	r3, #0
    829a:	da1f      	bge.n	82dc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xac>
    829c:	697b      	ldr	r3, [r7, #20]
    829e:	0e1b      	lsrs	r3, r3, #24
    82a0:	b2da      	uxtb	r2, r3
    82a2:	4b46      	ldr	r3, [pc, #280]	; (83bc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    82a4:	0011      	movs	r1, r2
    82a6:	0018      	movs	r0, r3
    82a8:	f003 fc22 	bl	baf0 <_ZN8SPIClass8transferEh>
    82ac:	697b      	ldr	r3, [r7, #20]
    82ae:	0c1b      	lsrs	r3, r3, #16
    82b0:	b2da      	uxtb	r2, r3
    82b2:	4b42      	ldr	r3, [pc, #264]	; (83bc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    82b4:	0011      	movs	r1, r2
    82b6:	0018      	movs	r0, r3
    82b8:	f003 fc1a 	bl	baf0 <_ZN8SPIClass8transferEh>
    82bc:	697b      	ldr	r3, [r7, #20]
    82be:	0a1b      	lsrs	r3, r3, #8
    82c0:	b2da      	uxtb	r2, r3
    82c2:	4b3e      	ldr	r3, [pc, #248]	; (83bc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    82c4:	0011      	movs	r1, r2
    82c6:	0018      	movs	r0, r3
    82c8:	f003 fc12 	bl	baf0 <_ZN8SPIClass8transferEh>
    82cc:	697b      	ldr	r3, [r7, #20]
    82ce:	b2da      	uxtb	r2, r3
    82d0:	4b3a      	ldr	r3, [pc, #232]	; (83bc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    82d2:	0011      	movs	r1, r2
    82d4:	0018      	movs	r0, r3
    82d6:	f003 fc0b 	bl	baf0 <_ZN8SPIClass8transferEh>
    82da:	e01e      	b.n	831a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xea>
    82dc:	697b      	ldr	r3, [r7, #20]
    82de:	0e1b      	lsrs	r3, r3, #24
    82e0:	b2da      	uxtb	r2, r3
    82e2:	68fb      	ldr	r3, [r7, #12]
    82e4:	0011      	movs	r1, r2
    82e6:	0018      	movs	r0, r3
    82e8:	f7ff fede 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    82ec:	697b      	ldr	r3, [r7, #20]
    82ee:	0c1b      	lsrs	r3, r3, #16
    82f0:	b2da      	uxtb	r2, r3
    82f2:	68fb      	ldr	r3, [r7, #12]
    82f4:	0011      	movs	r1, r2
    82f6:	0018      	movs	r0, r3
    82f8:	f7ff fed6 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    82fc:	697b      	ldr	r3, [r7, #20]
    82fe:	0a1b      	lsrs	r3, r3, #8
    8300:	b2da      	uxtb	r2, r3
    8302:	68fb      	ldr	r3, [r7, #12]
    8304:	0011      	movs	r1, r2
    8306:	0018      	movs	r0, r3
    8308:	f7ff fece 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    830c:	697b      	ldr	r3, [r7, #20]
    830e:	b2da      	uxtb	r2, r3
    8310:	68fb      	ldr	r3, [r7, #12]
    8312:	0011      	movs	r1, r2
    8314:	0018      	movs	r0, r3
    8316:	f7ff fec7 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_PASET); // Row addr set
    831a:	68fb      	ldr	r3, [r7, #12]
    831c:	212b      	movs	r1, #43	; 0x2b
    831e:	0018      	movs	r0, r3
    8320:	f7ff ff60 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE32(ya);
    8324:	68fb      	ldr	r3, [r7, #12]
    8326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8328:	2b00      	cmp	r3, #0
    832a:	da1f      	bge.n	836c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x13c>
    832c:	693b      	ldr	r3, [r7, #16]
    832e:	0e1b      	lsrs	r3, r3, #24
    8330:	b2da      	uxtb	r2, r3
    8332:	4b22      	ldr	r3, [pc, #136]	; (83bc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8334:	0011      	movs	r1, r2
    8336:	0018      	movs	r0, r3
    8338:	f003 fbda 	bl	baf0 <_ZN8SPIClass8transferEh>
    833c:	693b      	ldr	r3, [r7, #16]
    833e:	0c1b      	lsrs	r3, r3, #16
    8340:	b2da      	uxtb	r2, r3
    8342:	4b1e      	ldr	r3, [pc, #120]	; (83bc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8344:	0011      	movs	r1, r2
    8346:	0018      	movs	r0, r3
    8348:	f003 fbd2 	bl	baf0 <_ZN8SPIClass8transferEh>
    834c:	693b      	ldr	r3, [r7, #16]
    834e:	0a1b      	lsrs	r3, r3, #8
    8350:	b2da      	uxtb	r2, r3
    8352:	4b1a      	ldr	r3, [pc, #104]	; (83bc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8354:	0011      	movs	r1, r2
    8356:	0018      	movs	r0, r3
    8358:	f003 fbca 	bl	baf0 <_ZN8SPIClass8transferEh>
    835c:	693b      	ldr	r3, [r7, #16]
    835e:	b2da      	uxtb	r2, r3
    8360:	4b16      	ldr	r3, [pc, #88]	; (83bc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8362:	0011      	movs	r1, r2
    8364:	0018      	movs	r0, r3
    8366:	f003 fbc3 	bl	baf0 <_ZN8SPIClass8transferEh>
    836a:	e01e      	b.n	83aa <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x17a>
    836c:	693b      	ldr	r3, [r7, #16]
    836e:	0e1b      	lsrs	r3, r3, #24
    8370:	b2da      	uxtb	r2, r3
    8372:	68fb      	ldr	r3, [r7, #12]
    8374:	0011      	movs	r1, r2
    8376:	0018      	movs	r0, r3
    8378:	f7ff fe96 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    837c:	693b      	ldr	r3, [r7, #16]
    837e:	0c1b      	lsrs	r3, r3, #16
    8380:	b2da      	uxtb	r2, r3
    8382:	68fb      	ldr	r3, [r7, #12]
    8384:	0011      	movs	r1, r2
    8386:	0018      	movs	r0, r3
    8388:	f7ff fe8e 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    838c:	693b      	ldr	r3, [r7, #16]
    838e:	0a1b      	lsrs	r3, r3, #8
    8390:	b2da      	uxtb	r2, r3
    8392:	68fb      	ldr	r3, [r7, #12]
    8394:	0011      	movs	r1, r2
    8396:	0018      	movs	r0, r3
    8398:	f7ff fe86 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    839c:	693b      	ldr	r3, [r7, #16]
    839e:	b2da      	uxtb	r2, r3
    83a0:	68fb      	ldr	r3, [r7, #12]
    83a2:	0011      	movs	r1, r2
    83a4:	0018      	movs	r0, r3
    83a6:	f7ff fe7f 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_RAMWR); // write to RAM
    83aa:	68fb      	ldr	r3, [r7, #12]
    83ac:	212c      	movs	r1, #44	; 0x2c
    83ae:	0018      	movs	r0, r3
    83b0:	f7ff ff18 	bl	81e4 <_ZN16Adafruit_ILI934112writeCommandEh>
}
    83b4:	46c0      	nop			; (mov r8, r8)
    83b6:	46bd      	mov	sp, r7
    83b8:	b007      	add	sp, #28
    83ba:	bd90      	pop	{r4, r7, pc}
    83bc:	20000b7c 	.word	0x20000b7c

000083c0 <_ZN16Adafruit_ILI934110writePixelEt>:
void Adafruit_ILI9341::pushColor(uint16_t color) {
  SPI_WRITE16(color);
}


void Adafruit_ILI9341::writePixel(uint16_t color){
    83c0:	b580      	push	{r7, lr}
    83c2:	b082      	sub	sp, #8
    83c4:	af00      	add	r7, sp, #0
    83c6:	6078      	str	r0, [r7, #4]
    83c8:	000a      	movs	r2, r1
    83ca:	1cbb      	adds	r3, r7, #2
    83cc:	801a      	strh	r2, [r3, #0]
    SPI_WRITE16(color);
    83ce:	687b      	ldr	r3, [r7, #4]
    83d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    83d2:	2b00      	cmp	r3, #0
    83d4:	da11      	bge.n	83fa <_ZN16Adafruit_ILI934110writePixelEt+0x3a>
    83d6:	1cbb      	adds	r3, r7, #2
    83d8:	881b      	ldrh	r3, [r3, #0]
    83da:	121b      	asrs	r3, r3, #8
    83dc:	b2da      	uxtb	r2, r3
    83de:	4b11      	ldr	r3, [pc, #68]	; (8424 <_ZN16Adafruit_ILI934110writePixelEt+0x64>)
    83e0:	0011      	movs	r1, r2
    83e2:	0018      	movs	r0, r3
    83e4:	f003 fb84 	bl	baf0 <_ZN8SPIClass8transferEh>
    83e8:	1cbb      	adds	r3, r7, #2
    83ea:	881b      	ldrh	r3, [r3, #0]
    83ec:	b2da      	uxtb	r2, r3
    83ee:	4b0d      	ldr	r3, [pc, #52]	; (8424 <_ZN16Adafruit_ILI934110writePixelEt+0x64>)
    83f0:	0011      	movs	r1, r2
    83f2:	0018      	movs	r0, r3
    83f4:	f003 fb7c 	bl	baf0 <_ZN8SPIClass8transferEh>
}
    83f8:	e010      	b.n	841c <_ZN16Adafruit_ILI934110writePixelEt+0x5c>
    SPI_WRITE16(color);
    83fa:	1cbb      	adds	r3, r7, #2
    83fc:	881b      	ldrh	r3, [r3, #0]
    83fe:	121b      	asrs	r3, r3, #8
    8400:	b2da      	uxtb	r2, r3
    8402:	687b      	ldr	r3, [r7, #4]
    8404:	0011      	movs	r1, r2
    8406:	0018      	movs	r0, r3
    8408:	f7ff fe4e 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    840c:	1cbb      	adds	r3, r7, #2
    840e:	881b      	ldrh	r3, [r3, #0]
    8410:	b2da      	uxtb	r2, r3
    8412:	687b      	ldr	r3, [r7, #4]
    8414:	0011      	movs	r1, r2
    8416:	0018      	movs	r0, r3
    8418:	f7ff fe46 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
}
    841c:	46c0      	nop			; (mov r8, r8)
    841e:	46bd      	mov	sp, r7
    8420:	b002      	add	sp, #8
    8422:	bd80      	pop	{r7, pc}
    8424:	20000b7c 	.word	0x20000b7c

00008428 <_ZN16Adafruit_ILI934110writeColorEtm>:

void Adafruit_ILI9341::writePixels(uint16_t * colors, uint32_t len){
    SPI_WRITE_PIXELS((uint8_t*)colors , len * 2);
}

void Adafruit_ILI9341::writeColor(uint16_t color, uint32_t len){
    8428:	b580      	push	{r7, lr}
    842a:	b088      	sub	sp, #32
    842c:	af00      	add	r7, sp, #0
    842e:	60f8      	str	r0, [r7, #12]
    8430:	607a      	str	r2, [r7, #4]
    8432:	230a      	movs	r3, #10
    8434:	18fb      	adds	r3, r7, r3
    8436:	1c0a      	adds	r2, r1, #0
    8438:	801a      	strh	r2, [r3, #0]
        tlen = (len>blen)?blen:len;
        writePixels(temp, tlen);
        len -= tlen;
    }
#else
    uint8_t hi = color >> 8, lo = color;
    843a:	230a      	movs	r3, #10
    843c:	18fb      	adds	r3, r7, r3
    843e:	881b      	ldrh	r3, [r3, #0]
    8440:	121a      	asrs	r2, r3, #8
    8442:	2317      	movs	r3, #23
    8444:	18fb      	adds	r3, r7, r3
    8446:	701a      	strb	r2, [r3, #0]
    8448:	2316      	movs	r3, #22
    844a:	18fb      	adds	r3, r7, r3
    844c:	220a      	movs	r2, #10
    844e:	18ba      	adds	r2, r7, r2
    8450:	8812      	ldrh	r2, [r2, #0]
    8452:	701a      	strb	r2, [r3, #0]
    if(_sclk < 0){ //AVR Optimization
    8454:	68fb      	ldr	r3, [r7, #12]
    8456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8458:	2b00      	cmp	r3, #0
    845a:	da18      	bge.n	848e <_ZN16Adafruit_ILI934110writeColorEtm+0x66>
        for (uint32_t t=len; t; t--){
    845c:	687b      	ldr	r3, [r7, #4]
    845e:	61fb      	str	r3, [r7, #28]
    8460:	69fb      	ldr	r3, [r7, #28]
    8462:	2b00      	cmp	r3, #0
    8464:	d02c      	beq.n	84c0 <_ZN16Adafruit_ILI934110writeColorEtm+0x98>
            HSPI_WRITE(hi);
    8466:	2317      	movs	r3, #23
    8468:	18fb      	adds	r3, r7, r3
    846a:	781a      	ldrb	r2, [r3, #0]
    846c:	4b16      	ldr	r3, [pc, #88]	; (84c8 <_ZN16Adafruit_ILI934110writeColorEtm+0xa0>)
    846e:	0011      	movs	r1, r2
    8470:	0018      	movs	r0, r3
    8472:	f003 fb3d 	bl	baf0 <_ZN8SPIClass8transferEh>
            HSPI_WRITE(lo);
    8476:	2316      	movs	r3, #22
    8478:	18fb      	adds	r3, r7, r3
    847a:	781a      	ldrb	r2, [r3, #0]
    847c:	4b12      	ldr	r3, [pc, #72]	; (84c8 <_ZN16Adafruit_ILI934110writeColorEtm+0xa0>)
    847e:	0011      	movs	r1, r2
    8480:	0018      	movs	r0, r3
    8482:	f003 fb35 	bl	baf0 <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    8486:	69fb      	ldr	r3, [r7, #28]
    8488:	3b01      	subs	r3, #1
    848a:	61fb      	str	r3, [r7, #28]
    848c:	e7e8      	b.n	8460 <_ZN16Adafruit_ILI934110writeColorEtm+0x38>
        }
        return;
    }
    for (uint32_t t=len; t; t--){
    848e:	687b      	ldr	r3, [r7, #4]
    8490:	61bb      	str	r3, [r7, #24]
    8492:	69bb      	ldr	r3, [r7, #24]
    8494:	2b00      	cmp	r3, #0
    8496:	d014      	beq.n	84c2 <_ZN16Adafruit_ILI934110writeColorEtm+0x9a>
        spiWrite(hi);
    8498:	2317      	movs	r3, #23
    849a:	18fb      	adds	r3, r7, r3
    849c:	781a      	ldrb	r2, [r3, #0]
    849e:	68fb      	ldr	r3, [r7, #12]
    84a0:	0011      	movs	r1, r2
    84a2:	0018      	movs	r0, r3
    84a4:	f7ff fe00 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
        spiWrite(lo);
    84a8:	2316      	movs	r3, #22
    84aa:	18fb      	adds	r3, r7, r3
    84ac:	781a      	ldrb	r2, [r3, #0]
    84ae:	68fb      	ldr	r3, [r7, #12]
    84b0:	0011      	movs	r1, r2
    84b2:	0018      	movs	r0, r3
    84b4:	f7ff fdf8 	bl	80a8 <_ZN16Adafruit_ILI93418spiWriteEh>
    for (uint32_t t=len; t; t--){
    84b8:	69bb      	ldr	r3, [r7, #24]
    84ba:	3b01      	subs	r3, #1
    84bc:	61bb      	str	r3, [r7, #24]
    84be:	e7e8      	b.n	8492 <_ZN16Adafruit_ILI934110writeColorEtm+0x6a>
        return;
    84c0:	46c0      	nop			; (mov r8, r8)
    }
#endif
}
    84c2:	46bd      	mov	sp, r7
    84c4:	b008      	add	sp, #32
    84c6:	bd80      	pop	{r7, pc}
    84c8:	20000b7c 	.word	0x20000b7c

000084cc <_ZN16Adafruit_ILI934110writePixelEsst>:

void Adafruit_ILI9341::writePixel(int16_t x, int16_t y, uint16_t color) {
    84cc:	b590      	push	{r4, r7, lr}
    84ce:	b087      	sub	sp, #28
    84d0:	af02      	add	r7, sp, #8
    84d2:	60f8      	str	r0, [r7, #12]
    84d4:	000c      	movs	r4, r1
    84d6:	0010      	movs	r0, r2
    84d8:	0019      	movs	r1, r3
    84da:	230a      	movs	r3, #10
    84dc:	18fb      	adds	r3, r7, r3
    84de:	1c22      	adds	r2, r4, #0
    84e0:	801a      	strh	r2, [r3, #0]
    84e2:	2308      	movs	r3, #8
    84e4:	18fb      	adds	r3, r7, r3
    84e6:	1c02      	adds	r2, r0, #0
    84e8:	801a      	strh	r2, [r3, #0]
    84ea:	1dbb      	adds	r3, r7, #6
    84ec:	1c0a      	adds	r2, r1, #0
    84ee:	801a      	strh	r2, [r3, #0]
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    84f0:	230a      	movs	r3, #10
    84f2:	18fb      	adds	r3, r7, r3
    84f4:	2200      	movs	r2, #0
    84f6:	5e9b      	ldrsh	r3, [r3, r2]
    84f8:	2b00      	cmp	r3, #0
    84fa:	db2b      	blt.n	8554 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    84fc:	68fb      	ldr	r3, [r7, #12]
    84fe:	220c      	movs	r2, #12
    8500:	5e9b      	ldrsh	r3, [r3, r2]
    8502:	220a      	movs	r2, #10
    8504:	18ba      	adds	r2, r7, r2
    8506:	2100      	movs	r1, #0
    8508:	5e52      	ldrsh	r2, [r2, r1]
    850a:	429a      	cmp	r2, r3
    850c:	da22      	bge.n	8554 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    850e:	2308      	movs	r3, #8
    8510:	18fb      	adds	r3, r7, r3
    8512:	2200      	movs	r2, #0
    8514:	5e9b      	ldrsh	r3, [r3, r2]
    8516:	2b00      	cmp	r3, #0
    8518:	db1c      	blt.n	8554 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    851a:	68fb      	ldr	r3, [r7, #12]
    851c:	220e      	movs	r2, #14
    851e:	5e9b      	ldrsh	r3, [r3, r2]
    8520:	2208      	movs	r2, #8
    8522:	18ba      	adds	r2, r7, r2
    8524:	2100      	movs	r1, #0
    8526:	5e52      	ldrsh	r2, [r2, r1]
    8528:	429a      	cmp	r2, r3
    852a:	da13      	bge.n	8554 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    setAddrWindow(x,y,1,1);
    852c:	230a      	movs	r3, #10
    852e:	18fb      	adds	r3, r7, r3
    8530:	8819      	ldrh	r1, [r3, #0]
    8532:	2308      	movs	r3, #8
    8534:	18fb      	adds	r3, r7, r3
    8536:	881a      	ldrh	r2, [r3, #0]
    8538:	68f8      	ldr	r0, [r7, #12]
    853a:	2301      	movs	r3, #1
    853c:	9300      	str	r3, [sp, #0]
    853e:	2301      	movs	r3, #1
    8540:	f7ff fe76 	bl	8230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    writePixel(color);
    8544:	1dbb      	adds	r3, r7, #6
    8546:	881a      	ldrh	r2, [r3, #0]
    8548:	68fb      	ldr	r3, [r7, #12]
    854a:	0011      	movs	r1, r2
    854c:	0018      	movs	r0, r3
    854e:	f7ff ff37 	bl	83c0 <_ZN16Adafruit_ILI934110writePixelEt>
    8552:	e000      	b.n	8556 <_ZN16Adafruit_ILI934110writePixelEsst+0x8a>
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    8554:	46c0      	nop			; (mov r8, r8)
}
    8556:	46bd      	mov	sp, r7
    8558:	b005      	add	sp, #20
    855a:	bd90      	pop	{r4, r7, pc}

0000855c <_ZN16Adafruit_ILI934113writeFillRectEsssst>:

void Adafruit_ILI9341::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
    855c:	b590      	push	{r4, r7, lr}
    855e:	b089      	sub	sp, #36	; 0x24
    8560:	af02      	add	r7, sp, #8
    8562:	60f8      	str	r0, [r7, #12]
    8564:	000c      	movs	r4, r1
    8566:	0010      	movs	r0, r2
    8568:	0019      	movs	r1, r3
    856a:	230a      	movs	r3, #10
    856c:	18fb      	adds	r3, r7, r3
    856e:	1c22      	adds	r2, r4, #0
    8570:	801a      	strh	r2, [r3, #0]
    8572:	2308      	movs	r3, #8
    8574:	18fb      	adds	r3, r7, r3
    8576:	1c02      	adds	r2, r0, #0
    8578:	801a      	strh	r2, [r3, #0]
    857a:	1dbb      	adds	r3, r7, #6
    857c:	1c0a      	adds	r2, r1, #0
    857e:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
    8580:	68fb      	ldr	r3, [r7, #12]
    8582:	220c      	movs	r2, #12
    8584:	5e9b      	ldrsh	r3, [r3, r2]
    8586:	220a      	movs	r2, #10
    8588:	18ba      	adds	r2, r7, r2
    858a:	2100      	movs	r1, #0
    858c:	5e52      	ldrsh	r2, [r2, r1]
    858e:	429a      	cmp	r2, r3
    8590:	db00      	blt.n	8594 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x38>
    8592:	e09e      	b.n	86d2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x176>
    8594:	68fb      	ldr	r3, [r7, #12]
    8596:	220e      	movs	r2, #14
    8598:	5e9b      	ldrsh	r3, [r3, r2]
    859a:	2208      	movs	r2, #8
    859c:	18ba      	adds	r2, r7, r2
    859e:	2100      	movs	r1, #0
    85a0:	5e52      	ldrsh	r2, [r2, r1]
    85a2:	429a      	cmp	r2, r3
    85a4:	db00      	blt.n	85a8 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x4c>
    85a6:	e094      	b.n	86d2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x176>
    int16_t x2 = x + w - 1, y2 = y + h - 1;
    85a8:	230a      	movs	r3, #10
    85aa:	18fb      	adds	r3, r7, r3
    85ac:	881a      	ldrh	r2, [r3, #0]
    85ae:	1dbb      	adds	r3, r7, #6
    85b0:	881b      	ldrh	r3, [r3, #0]
    85b2:	18d3      	adds	r3, r2, r3
    85b4:	b29b      	uxth	r3, r3
    85b6:	3b01      	subs	r3, #1
    85b8:	b29a      	uxth	r2, r3
    85ba:	2316      	movs	r3, #22
    85bc:	18fb      	adds	r3, r7, r3
    85be:	801a      	strh	r2, [r3, #0]
    85c0:	2308      	movs	r3, #8
    85c2:	18fb      	adds	r3, r7, r3
    85c4:	881a      	ldrh	r2, [r3, #0]
    85c6:	2328      	movs	r3, #40	; 0x28
    85c8:	18fb      	adds	r3, r7, r3
    85ca:	881b      	ldrh	r3, [r3, #0]
    85cc:	18d3      	adds	r3, r2, r3
    85ce:	b29b      	uxth	r3, r3
    85d0:	3b01      	subs	r3, #1
    85d2:	b29a      	uxth	r2, r3
    85d4:	2314      	movs	r3, #20
    85d6:	18fb      	adds	r3, r7, r3
    85d8:	801a      	strh	r2, [r3, #0]
    if((x2 < 0) || (y2 < 0)) return;
    85da:	2316      	movs	r3, #22
    85dc:	18fb      	adds	r3, r7, r3
    85de:	2200      	movs	r2, #0
    85e0:	5e9b      	ldrsh	r3, [r3, r2]
    85e2:	2b00      	cmp	r3, #0
    85e4:	da00      	bge.n	85e8 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x8c>
    85e6:	e076      	b.n	86d6 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17a>
    85e8:	2314      	movs	r3, #20
    85ea:	18fb      	adds	r3, r7, r3
    85ec:	2200      	movs	r2, #0
    85ee:	5e9b      	ldrsh	r3, [r3, r2]
    85f0:	2b00      	cmp	r3, #0
    85f2:	da00      	bge.n	85f6 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x9a>
    85f4:	e06f      	b.n	86d6 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17a>

    // Clip left/top
    if(x < 0) {
    85f6:	230a      	movs	r3, #10
    85f8:	18fb      	adds	r3, r7, r3
    85fa:	2200      	movs	r2, #0
    85fc:	5e9b      	ldrsh	r3, [r3, r2]
    85fe:	2b00      	cmp	r3, #0
    8600:	da0a      	bge.n	8618 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0xbc>
        x = 0;
    8602:	230a      	movs	r3, #10
    8604:	18fb      	adds	r3, r7, r3
    8606:	2200      	movs	r2, #0
    8608:	801a      	strh	r2, [r3, #0]
        w = x2 + 1;
    860a:	2316      	movs	r3, #22
    860c:	18fb      	adds	r3, r7, r3
    860e:	881b      	ldrh	r3, [r3, #0]
    8610:	3301      	adds	r3, #1
    8612:	b29a      	uxth	r2, r3
    8614:	1dbb      	adds	r3, r7, #6
    8616:	801a      	strh	r2, [r3, #0]
    }
    if(y < 0) {
    8618:	2308      	movs	r3, #8
    861a:	18fb      	adds	r3, r7, r3
    861c:	2200      	movs	r2, #0
    861e:	5e9b      	ldrsh	r3, [r3, r2]
    8620:	2b00      	cmp	r3, #0
    8622:	da0b      	bge.n	863c <_ZN16Adafruit_ILI934113writeFillRectEsssst+0xe0>
        y = 0;
    8624:	2308      	movs	r3, #8
    8626:	18fb      	adds	r3, r7, r3
    8628:	2200      	movs	r2, #0
    862a:	801a      	strh	r2, [r3, #0]
        h = y2 + 1;
    862c:	2314      	movs	r3, #20
    862e:	18fb      	adds	r3, r7, r3
    8630:	881b      	ldrh	r3, [r3, #0]
    8632:	3301      	adds	r3, #1
    8634:	b29a      	uxth	r2, r3
    8636:	2328      	movs	r3, #40	; 0x28
    8638:	18fb      	adds	r3, r7, r3
    863a:	801a      	strh	r2, [r3, #0]
    }

    // Clip right/bottom
    if(x2 >= _width)  w = _width  - x;
    863c:	68fb      	ldr	r3, [r7, #12]
    863e:	220c      	movs	r2, #12
    8640:	5e9b      	ldrsh	r3, [r3, r2]
    8642:	2216      	movs	r2, #22
    8644:	18ba      	adds	r2, r7, r2
    8646:	2100      	movs	r1, #0
    8648:	5e52      	ldrsh	r2, [r2, r1]
    864a:	429a      	cmp	r2, r3
    864c:	db0a      	blt.n	8664 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x108>
    864e:	68fb      	ldr	r3, [r7, #12]
    8650:	220c      	movs	r2, #12
    8652:	5e9b      	ldrsh	r3, [r3, r2]
    8654:	b29a      	uxth	r2, r3
    8656:	230a      	movs	r3, #10
    8658:	18fb      	adds	r3, r7, r3
    865a:	881b      	ldrh	r3, [r3, #0]
    865c:	1ad3      	subs	r3, r2, r3
    865e:	b29a      	uxth	r2, r3
    8660:	1dbb      	adds	r3, r7, #6
    8662:	801a      	strh	r2, [r3, #0]
    if(y2 >= _height) h = _height - y;
    8664:	68fb      	ldr	r3, [r7, #12]
    8666:	220e      	movs	r2, #14
    8668:	5e9b      	ldrsh	r3, [r3, r2]
    866a:	2214      	movs	r2, #20
    866c:	18ba      	adds	r2, r7, r2
    866e:	2100      	movs	r1, #0
    8670:	5e52      	ldrsh	r2, [r2, r1]
    8672:	429a      	cmp	r2, r3
    8674:	db0b      	blt.n	868e <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x132>
    8676:	68fb      	ldr	r3, [r7, #12]
    8678:	220e      	movs	r2, #14
    867a:	5e9b      	ldrsh	r3, [r3, r2]
    867c:	b29a      	uxth	r2, r3
    867e:	2308      	movs	r3, #8
    8680:	18fb      	adds	r3, r7, r3
    8682:	881b      	ldrh	r3, [r3, #0]
    8684:	1ad3      	subs	r3, r2, r3
    8686:	b29a      	uxth	r2, r3
    8688:	2328      	movs	r3, #40	; 0x28
    868a:	18fb      	adds	r3, r7, r3
    868c:	801a      	strh	r2, [r3, #0]

    int32_t len = (int32_t)w * h;
    868e:	1dbb      	adds	r3, r7, #6
    8690:	2200      	movs	r2, #0
    8692:	5e9b      	ldrsh	r3, [r3, r2]
    8694:	2228      	movs	r2, #40	; 0x28
    8696:	18ba      	adds	r2, r7, r2
    8698:	2100      	movs	r1, #0
    869a:	5e52      	ldrsh	r2, [r2, r1]
    869c:	4353      	muls	r3, r2
    869e:	613b      	str	r3, [r7, #16]
    setAddrWindow(x, y, w, h);
    86a0:	230a      	movs	r3, #10
    86a2:	18fb      	adds	r3, r7, r3
    86a4:	8819      	ldrh	r1, [r3, #0]
    86a6:	2308      	movs	r3, #8
    86a8:	18fb      	adds	r3, r7, r3
    86aa:	881a      	ldrh	r2, [r3, #0]
    86ac:	1dbb      	adds	r3, r7, #6
    86ae:	881c      	ldrh	r4, [r3, #0]
    86b0:	2328      	movs	r3, #40	; 0x28
    86b2:	18fb      	adds	r3, r7, r3
    86b4:	881b      	ldrh	r3, [r3, #0]
    86b6:	68f8      	ldr	r0, [r7, #12]
    86b8:	9300      	str	r3, [sp, #0]
    86ba:	0023      	movs	r3, r4
    86bc:	f7ff fdb8 	bl	8230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    writeColor(color, len);
    86c0:	693a      	ldr	r2, [r7, #16]
    86c2:	232c      	movs	r3, #44	; 0x2c
    86c4:	18fb      	adds	r3, r7, r3
    86c6:	8819      	ldrh	r1, [r3, #0]
    86c8:	68fb      	ldr	r3, [r7, #12]
    86ca:	0018      	movs	r0, r3
    86cc:	f7ff feac 	bl	8428 <_ZN16Adafruit_ILI934110writeColorEtm>
    86d0:	e002      	b.n	86d8 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17c>
    if((x >= _width) || (y >= _height)) return;
    86d2:	46c0      	nop			; (mov r8, r8)
    86d4:	e000      	b.n	86d8 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17c>
    if((x2 < 0) || (y2 < 0)) return;
    86d6:	46c0      	nop			; (mov r8, r8)
}
    86d8:	46bd      	mov	sp, r7
    86da:	b007      	add	sp, #28
    86dc:	bd90      	pop	{r4, r7, pc}

000086de <_ZN16Adafruit_ILI934114writeFastVLineEssst>:

void Adafruit_ILI9341::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color){
    86de:	b5b0      	push	{r4, r5, r7, lr}
    86e0:	b086      	sub	sp, #24
    86e2:	af02      	add	r7, sp, #8
    86e4:	60f8      	str	r0, [r7, #12]
    86e6:	000c      	movs	r4, r1
    86e8:	0010      	movs	r0, r2
    86ea:	0019      	movs	r1, r3
    86ec:	230a      	movs	r3, #10
    86ee:	18fb      	adds	r3, r7, r3
    86f0:	1c22      	adds	r2, r4, #0
    86f2:	801a      	strh	r2, [r3, #0]
    86f4:	2308      	movs	r3, #8
    86f6:	18fb      	adds	r3, r7, r3
    86f8:	1c02      	adds	r2, r0, #0
    86fa:	801a      	strh	r2, [r3, #0]
    86fc:	1dbb      	adds	r3, r7, #6
    86fe:	1c0a      	adds	r2, r1, #0
    8700:	801a      	strh	r2, [r3, #0]
    writeFillRect(x, y, 1, h, color);
    8702:	68fb      	ldr	r3, [r7, #12]
    8704:	681b      	ldr	r3, [r3, #0]
    8706:	331c      	adds	r3, #28
    8708:	681c      	ldr	r4, [r3, #0]
    870a:	2308      	movs	r3, #8
    870c:	18fb      	adds	r3, r7, r3
    870e:	2200      	movs	r2, #0
    8710:	5e9a      	ldrsh	r2, [r3, r2]
    8712:	230a      	movs	r3, #10
    8714:	18fb      	adds	r3, r7, r3
    8716:	2100      	movs	r1, #0
    8718:	5e59      	ldrsh	r1, [r3, r1]
    871a:	68f8      	ldr	r0, [r7, #12]
    871c:	2320      	movs	r3, #32
    871e:	18fb      	adds	r3, r7, r3
    8720:	881b      	ldrh	r3, [r3, #0]
    8722:	9301      	str	r3, [sp, #4]
    8724:	1dbb      	adds	r3, r7, #6
    8726:	2500      	movs	r5, #0
    8728:	5f5b      	ldrsh	r3, [r3, r5]
    872a:	9300      	str	r3, [sp, #0]
    872c:	2301      	movs	r3, #1
    872e:	47a0      	blx	r4
}
    8730:	46c0      	nop			; (mov r8, r8)
    8732:	46bd      	mov	sp, r7
    8734:	b004      	add	sp, #16
    8736:	bdb0      	pop	{r4, r5, r7, pc}

00008738 <_ZN16Adafruit_ILI934114writeFastHLineEssst>:

void Adafruit_ILI9341::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color){
    8738:	b5b0      	push	{r4, r5, r7, lr}
    873a:	b086      	sub	sp, #24
    873c:	af02      	add	r7, sp, #8
    873e:	60f8      	str	r0, [r7, #12]
    8740:	000c      	movs	r4, r1
    8742:	0010      	movs	r0, r2
    8744:	0019      	movs	r1, r3
    8746:	230a      	movs	r3, #10
    8748:	18fb      	adds	r3, r7, r3
    874a:	1c22      	adds	r2, r4, #0
    874c:	801a      	strh	r2, [r3, #0]
    874e:	2308      	movs	r3, #8
    8750:	18fb      	adds	r3, r7, r3
    8752:	1c02      	adds	r2, r0, #0
    8754:	801a      	strh	r2, [r3, #0]
    8756:	1dbb      	adds	r3, r7, #6
    8758:	1c0a      	adds	r2, r1, #0
    875a:	801a      	strh	r2, [r3, #0]
    writeFillRect(x, y, w, 1, color);
    875c:	68fb      	ldr	r3, [r7, #12]
    875e:	681b      	ldr	r3, [r3, #0]
    8760:	331c      	adds	r3, #28
    8762:	681c      	ldr	r4, [r3, #0]
    8764:	1dbb      	adds	r3, r7, #6
    8766:	2500      	movs	r5, #0
    8768:	5f5d      	ldrsh	r5, [r3, r5]
    876a:	2308      	movs	r3, #8
    876c:	18fb      	adds	r3, r7, r3
    876e:	2200      	movs	r2, #0
    8770:	5e9a      	ldrsh	r2, [r3, r2]
    8772:	230a      	movs	r3, #10
    8774:	18fb      	adds	r3, r7, r3
    8776:	2100      	movs	r1, #0
    8778:	5e59      	ldrsh	r1, [r3, r1]
    877a:	68f8      	ldr	r0, [r7, #12]
    877c:	2320      	movs	r3, #32
    877e:	18fb      	adds	r3, r7, r3
    8780:	881b      	ldrh	r3, [r3, #0]
    8782:	9301      	str	r3, [sp, #4]
    8784:	2301      	movs	r3, #1
    8786:	9300      	str	r3, [sp, #0]
    8788:	002b      	movs	r3, r5
    878a:	47a0      	blx	r4
}
    878c:	46c0      	nop			; (mov r8, r8)
    878e:	46bd      	mov	sp, r7
    8790:	b004      	add	sp, #16
    8792:	bdb0      	pop	{r4, r5, r7, pc}

00008794 <_ZN16Adafruit_ILI93419drawPixelEsst>:
    endWrite();
    _freq = freq;
    return r;
}

void Adafruit_ILI9341::drawPixel(int16_t x, int16_t y, uint16_t color){
    8794:	b5b0      	push	{r4, r5, r7, lr}
    8796:	b084      	sub	sp, #16
    8798:	af00      	add	r7, sp, #0
    879a:	60f8      	str	r0, [r7, #12]
    879c:	000c      	movs	r4, r1
    879e:	0010      	movs	r0, r2
    87a0:	0019      	movs	r1, r3
    87a2:	230a      	movs	r3, #10
    87a4:	18fb      	adds	r3, r7, r3
    87a6:	1c22      	adds	r2, r4, #0
    87a8:	801a      	strh	r2, [r3, #0]
    87aa:	2308      	movs	r3, #8
    87ac:	18fb      	adds	r3, r7, r3
    87ae:	1c02      	adds	r2, r0, #0
    87b0:	801a      	strh	r2, [r3, #0]
    87b2:	1dbb      	adds	r3, r7, #6
    87b4:	1c0a      	adds	r2, r1, #0
    87b6:	801a      	strh	r2, [r3, #0]
    startWrite();
    87b8:	68fb      	ldr	r3, [r7, #12]
    87ba:	681b      	ldr	r3, [r3, #0]
    87bc:	3314      	adds	r3, #20
    87be:	681b      	ldr	r3, [r3, #0]
    87c0:	68fa      	ldr	r2, [r7, #12]
    87c2:	0010      	movs	r0, r2
    87c4:	4798      	blx	r3
    writePixel(x, y, color);
    87c6:	68fb      	ldr	r3, [r7, #12]
    87c8:	681b      	ldr	r3, [r3, #0]
    87ca:	3318      	adds	r3, #24
    87cc:	681c      	ldr	r4, [r3, #0]
    87ce:	1dbb      	adds	r3, r7, #6
    87d0:	881d      	ldrh	r5, [r3, #0]
    87d2:	2308      	movs	r3, #8
    87d4:	18fb      	adds	r3, r7, r3
    87d6:	2200      	movs	r2, #0
    87d8:	5e9a      	ldrsh	r2, [r3, r2]
    87da:	230a      	movs	r3, #10
    87dc:	18fb      	adds	r3, r7, r3
    87de:	2100      	movs	r1, #0
    87e0:	5e59      	ldrsh	r1, [r3, r1]
    87e2:	68f8      	ldr	r0, [r7, #12]
    87e4:	002b      	movs	r3, r5
    87e6:	47a0      	blx	r4
    endWrite();
    87e8:	68fb      	ldr	r3, [r7, #12]
    87ea:	681b      	ldr	r3, [r3, #0]
    87ec:	332c      	adds	r3, #44	; 0x2c
    87ee:	681b      	ldr	r3, [r3, #0]
    87f0:	68fa      	ldr	r2, [r7, #12]
    87f2:	0010      	movs	r0, r2
    87f4:	4798      	blx	r3
}
    87f6:	46c0      	nop			; (mov r8, r8)
    87f8:	46bd      	mov	sp, r7
    87fa:	b004      	add	sp, #16
    87fc:	bdb0      	pop	{r4, r5, r7, pc}

000087fe <_ZN16Adafruit_ILI934113drawFastVLineEssst>:

void Adafruit_ILI9341::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    87fe:	b5b0      	push	{r4, r5, r7, lr}
    8800:	b086      	sub	sp, #24
    8802:	af02      	add	r7, sp, #8
    8804:	60f8      	str	r0, [r7, #12]
    8806:	000c      	movs	r4, r1
    8808:	0010      	movs	r0, r2
    880a:	0019      	movs	r1, r3
    880c:	230a      	movs	r3, #10
    880e:	18fb      	adds	r3, r7, r3
    8810:	1c22      	adds	r2, r4, #0
    8812:	801a      	strh	r2, [r3, #0]
    8814:	2308      	movs	r3, #8
    8816:	18fb      	adds	r3, r7, r3
    8818:	1c02      	adds	r2, r0, #0
    881a:	801a      	strh	r2, [r3, #0]
    881c:	1dbb      	adds	r3, r7, #6
    881e:	1c0a      	adds	r2, r1, #0
    8820:	801a      	strh	r2, [r3, #0]
    startWrite();
    8822:	68fb      	ldr	r3, [r7, #12]
    8824:	681b      	ldr	r3, [r3, #0]
    8826:	3314      	adds	r3, #20
    8828:	681b      	ldr	r3, [r3, #0]
    882a:	68fa      	ldr	r2, [r7, #12]
    882c:	0010      	movs	r0, r2
    882e:	4798      	blx	r3
    writeFastVLine(x, y, h, color);
    8830:	68fb      	ldr	r3, [r7, #12]
    8832:	681b      	ldr	r3, [r3, #0]
    8834:	3320      	adds	r3, #32
    8836:	681c      	ldr	r4, [r3, #0]
    8838:	1dbb      	adds	r3, r7, #6
    883a:	2500      	movs	r5, #0
    883c:	5f5d      	ldrsh	r5, [r3, r5]
    883e:	2308      	movs	r3, #8
    8840:	18fb      	adds	r3, r7, r3
    8842:	2200      	movs	r2, #0
    8844:	5e9a      	ldrsh	r2, [r3, r2]
    8846:	230a      	movs	r3, #10
    8848:	18fb      	adds	r3, r7, r3
    884a:	2100      	movs	r1, #0
    884c:	5e59      	ldrsh	r1, [r3, r1]
    884e:	68f8      	ldr	r0, [r7, #12]
    8850:	2320      	movs	r3, #32
    8852:	18fb      	adds	r3, r7, r3
    8854:	881b      	ldrh	r3, [r3, #0]
    8856:	9300      	str	r3, [sp, #0]
    8858:	002b      	movs	r3, r5
    885a:	47a0      	blx	r4
    endWrite();
    885c:	68fb      	ldr	r3, [r7, #12]
    885e:	681b      	ldr	r3, [r3, #0]
    8860:	332c      	adds	r3, #44	; 0x2c
    8862:	681b      	ldr	r3, [r3, #0]
    8864:	68fa      	ldr	r2, [r7, #12]
    8866:	0010      	movs	r0, r2
    8868:	4798      	blx	r3
}
    886a:	46c0      	nop			; (mov r8, r8)
    886c:	46bd      	mov	sp, r7
    886e:	b004      	add	sp, #16
    8870:	bdb0      	pop	{r4, r5, r7, pc}

00008872 <_ZN16Adafruit_ILI934113drawFastHLineEssst>:

void Adafruit_ILI9341::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    8872:	b5b0      	push	{r4, r5, r7, lr}
    8874:	b086      	sub	sp, #24
    8876:	af02      	add	r7, sp, #8
    8878:	60f8      	str	r0, [r7, #12]
    887a:	000c      	movs	r4, r1
    887c:	0010      	movs	r0, r2
    887e:	0019      	movs	r1, r3
    8880:	230a      	movs	r3, #10
    8882:	18fb      	adds	r3, r7, r3
    8884:	1c22      	adds	r2, r4, #0
    8886:	801a      	strh	r2, [r3, #0]
    8888:	2308      	movs	r3, #8
    888a:	18fb      	adds	r3, r7, r3
    888c:	1c02      	adds	r2, r0, #0
    888e:	801a      	strh	r2, [r3, #0]
    8890:	1dbb      	adds	r3, r7, #6
    8892:	1c0a      	adds	r2, r1, #0
    8894:	801a      	strh	r2, [r3, #0]
    startWrite();
    8896:	68fb      	ldr	r3, [r7, #12]
    8898:	681b      	ldr	r3, [r3, #0]
    889a:	3314      	adds	r3, #20
    889c:	681b      	ldr	r3, [r3, #0]
    889e:	68fa      	ldr	r2, [r7, #12]
    88a0:	0010      	movs	r0, r2
    88a2:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
    88a4:	68fb      	ldr	r3, [r7, #12]
    88a6:	681b      	ldr	r3, [r3, #0]
    88a8:	3324      	adds	r3, #36	; 0x24
    88aa:	681c      	ldr	r4, [r3, #0]
    88ac:	1dbb      	adds	r3, r7, #6
    88ae:	2500      	movs	r5, #0
    88b0:	5f5d      	ldrsh	r5, [r3, r5]
    88b2:	2308      	movs	r3, #8
    88b4:	18fb      	adds	r3, r7, r3
    88b6:	2200      	movs	r2, #0
    88b8:	5e9a      	ldrsh	r2, [r3, r2]
    88ba:	230a      	movs	r3, #10
    88bc:	18fb      	adds	r3, r7, r3
    88be:	2100      	movs	r1, #0
    88c0:	5e59      	ldrsh	r1, [r3, r1]
    88c2:	68f8      	ldr	r0, [r7, #12]
    88c4:	2320      	movs	r3, #32
    88c6:	18fb      	adds	r3, r7, r3
    88c8:	881b      	ldrh	r3, [r3, #0]
    88ca:	9300      	str	r3, [sp, #0]
    88cc:	002b      	movs	r3, r5
    88ce:	47a0      	blx	r4
    endWrite();
    88d0:	68fb      	ldr	r3, [r7, #12]
    88d2:	681b      	ldr	r3, [r3, #0]
    88d4:	332c      	adds	r3, #44	; 0x2c
    88d6:	681b      	ldr	r3, [r3, #0]
    88d8:	68fa      	ldr	r2, [r7, #12]
    88da:	0010      	movs	r0, r2
    88dc:	4798      	blx	r3
}
    88de:	46c0      	nop			; (mov r8, r8)
    88e0:	46bd      	mov	sp, r7
    88e2:	b004      	add	sp, #16
    88e4:	bdb0      	pop	{r4, r5, r7, pc}

000088e6 <_ZN16Adafruit_ILI93418fillRectEsssst>:

void Adafruit_ILI9341::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    88e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    88e8:	b087      	sub	sp, #28
    88ea:	af02      	add	r7, sp, #8
    88ec:	60f8      	str	r0, [r7, #12]
    88ee:	000c      	movs	r4, r1
    88f0:	0010      	movs	r0, r2
    88f2:	0019      	movs	r1, r3
    88f4:	230a      	movs	r3, #10
    88f6:	18fb      	adds	r3, r7, r3
    88f8:	1c22      	adds	r2, r4, #0
    88fa:	801a      	strh	r2, [r3, #0]
    88fc:	2308      	movs	r3, #8
    88fe:	18fb      	adds	r3, r7, r3
    8900:	1c02      	adds	r2, r0, #0
    8902:	801a      	strh	r2, [r3, #0]
    8904:	1dbb      	adds	r3, r7, #6
    8906:	1c0a      	adds	r2, r1, #0
    8908:	801a      	strh	r2, [r3, #0]
    startWrite();
    890a:	68fb      	ldr	r3, [r7, #12]
    890c:	681b      	ldr	r3, [r3, #0]
    890e:	3314      	adds	r3, #20
    8910:	681b      	ldr	r3, [r3, #0]
    8912:	68fa      	ldr	r2, [r7, #12]
    8914:	0010      	movs	r0, r2
    8916:	4798      	blx	r3
    writeFillRect(x,y,w,h,color);
    8918:	68fb      	ldr	r3, [r7, #12]
    891a:	681b      	ldr	r3, [r3, #0]
    891c:	331c      	adds	r3, #28
    891e:	681c      	ldr	r4, [r3, #0]
    8920:	1dbb      	adds	r3, r7, #6
    8922:	2500      	movs	r5, #0
    8924:	5f5d      	ldrsh	r5, [r3, r5]
    8926:	2308      	movs	r3, #8
    8928:	18fb      	adds	r3, r7, r3
    892a:	2200      	movs	r2, #0
    892c:	5e9a      	ldrsh	r2, [r3, r2]
    892e:	230a      	movs	r3, #10
    8930:	18fb      	adds	r3, r7, r3
    8932:	2100      	movs	r1, #0
    8934:	5e59      	ldrsh	r1, [r3, r1]
    8936:	68f8      	ldr	r0, [r7, #12]
    8938:	2324      	movs	r3, #36	; 0x24
    893a:	2608      	movs	r6, #8
    893c:	46b4      	mov	ip, r6
    893e:	44bc      	add	ip, r7
    8940:	4463      	add	r3, ip
    8942:	881b      	ldrh	r3, [r3, #0]
    8944:	9301      	str	r3, [sp, #4]
    8946:	2320      	movs	r3, #32
    8948:	2608      	movs	r6, #8
    894a:	46b4      	mov	ip, r6
    894c:	44bc      	add	ip, r7
    894e:	4463      	add	r3, ip
    8950:	2600      	movs	r6, #0
    8952:	5f9b      	ldrsh	r3, [r3, r6]
    8954:	9300      	str	r3, [sp, #0]
    8956:	002b      	movs	r3, r5
    8958:	47a0      	blx	r4
    endWrite();
    895a:	68fb      	ldr	r3, [r7, #12]
    895c:	681b      	ldr	r3, [r3, #0]
    895e:	332c      	adds	r3, #44	; 0x2c
    8960:	681b      	ldr	r3, [r3, #0]
    8962:	68fa      	ldr	r2, [r7, #12]
    8964:	0010      	movs	r0, r2
    8966:	4798      	blx	r3
}
    8968:	46c0      	nop			; (mov r8, r8)
    896a:	46bd      	mov	sp, r7
    896c:	b005      	add	sp, #20
    896e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008970 <_ZN5Print13setWriteErrorEi>:
    void setWriteError(int err = 1) { write_error = err; }
    8970:	b580      	push	{r7, lr}
    8972:	b082      	sub	sp, #8
    8974:	af00      	add	r7, sp, #0
    8976:	6078      	str	r0, [r7, #4]
    8978:	6039      	str	r1, [r7, #0]
    897a:	687b      	ldr	r3, [r7, #4]
    897c:	683a      	ldr	r2, [r7, #0]
    897e:	605a      	str	r2, [r3, #4]
    8980:	46c0      	nop			; (mov r8, r8)
    8982:	46bd      	mov	sp, r7
    8984:	b002      	add	sp, #8
    8986:	bd80      	pop	{r7, pc}

00008988 <_ZN5Print13getWriteErrorEv>:
    int getWriteError() { return write_error; }
    8988:	b580      	push	{r7, lr}
    898a:	b082      	sub	sp, #8
    898c:	af00      	add	r7, sp, #0
    898e:	6078      	str	r0, [r7, #4]
    8990:	687b      	ldr	r3, [r7, #4]
    8992:	685b      	ldr	r3, [r3, #4]
    8994:	0018      	movs	r0, r3
    8996:	46bd      	mov	sp, r7
    8998:	b002      	add	sp, #8
    899a:	bd80      	pop	{r7, pc}

0000899c <_ZN5Print15clearWriteErrorEv>:
    void clearWriteError() { setWriteError(0); }
    899c:	b580      	push	{r7, lr}
    899e:	b082      	sub	sp, #8
    89a0:	af00      	add	r7, sp, #0
    89a2:	6078      	str	r0, [r7, #4]
    89a4:	687b      	ldr	r3, [r7, #4]
    89a6:	2100      	movs	r1, #0
    89a8:	0018      	movs	r0, r3
    89aa:	f7ff ffe1 	bl	8970 <_ZN5Print13setWriteErrorEi>
    89ae:	46c0      	nop			; (mov r8, r8)
    89b0:	46bd      	mov	sp, r7
    89b2:	b002      	add	sp, #8
    89b4:	bd80      	pop	{r7, pc}

000089b6 <_ZNK6SdFile11curPositionEv>:
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    89b6:	b580      	push	{r7, lr}
    89b8:	b082      	sub	sp, #8
    89ba:	af00      	add	r7, sp, #0
    89bc:	6078      	str	r0, [r7, #4]
    89be:	687b      	ldr	r3, [r7, #4]
    89c0:	691b      	ldr	r3, [r3, #16]
    89c2:	0018      	movs	r0, r3
    89c4:	46bd      	mov	sp, r7
    89c6:	b002      	add	sp, #8
    89c8:	bd80      	pop	{r7, pc}

000089ca <_ZNK6SdFile8fileSizeEv>:
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    89ca:	b580      	push	{r7, lr}
    89cc:	b082      	sub	sp, #8
    89ce:	af00      	add	r7, sp, #0
    89d0:	6078      	str	r0, [r7, #4]
    89d2:	687b      	ldr	r3, [r7, #4]
    89d4:	69db      	ldr	r3, [r3, #28]
    89d6:	0018      	movs	r0, r3
    89d8:	46bd      	mov	sp, r7
    89da:	b002      	add	sp, #8
    89dc:	bd80      	pop	{r7, pc}

000089de <_ZNK6SdFile5isDirEv>:
  /** \return The first cluster number for a file or directory. */
  uint32_t firstCluster(void) const {return firstCluster_;}
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    89de:	b580      	push	{r7, lr}
    89e0:	b082      	sub	sp, #8
    89e2:	af00      	add	r7, sp, #0
    89e4:	6078      	str	r0, [r7, #4]
    89e6:	687b      	ldr	r3, [r7, #4]
    89e8:	7a5b      	ldrb	r3, [r3, #9]
    89ea:	2201      	movs	r2, #1
    89ec:	2b01      	cmp	r3, #1
    89ee:	dc01      	bgt.n	89f4 <_ZNK6SdFile5isDirEv+0x16>
    89f0:	2300      	movs	r3, #0
    89f2:	1c1a      	adds	r2, r3, #0
    89f4:	b2d3      	uxtb	r3, r2
    89f6:	0018      	movs	r0, r3
    89f8:	46bd      	mov	sp, r7
    89fa:	b002      	add	sp, #8
    89fc:	bd80      	pop	{r7, pc}

000089fe <_ZNK6SdFile6isOpenEv>:
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    89fe:	b580      	push	{r7, lr}
    8a00:	b082      	sub	sp, #8
    8a02:	af00      	add	r7, sp, #0
    8a04:	6078      	str	r0, [r7, #4]
    8a06:	687b      	ldr	r3, [r7, #4]
    8a08:	7a5b      	ldrb	r3, [r3, #9]
    8a0a:	1e5a      	subs	r2, r3, #1
    8a0c:	4193      	sbcs	r3, r2
    8a0e:	b2db      	uxtb	r3, r3
    8a10:	0018      	movs	r0, r3
    8a12:	46bd      	mov	sp, r7
    8a14:	b002      	add	sp, #8
    8a16:	bd80      	pop	{r7, pc}

00008a18 <_ZN6SdFile4readEv>:
   * Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    8a18:	b580      	push	{r7, lr}
    8a1a:	b084      	sub	sp, #16
    8a1c:	af00      	add	r7, sp, #0
    8a1e:	6078      	str	r0, [r7, #4]
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    8a20:	230f      	movs	r3, #15
    8a22:	18f9      	adds	r1, r7, r3
    8a24:	687b      	ldr	r3, [r7, #4]
    8a26:	2201      	movs	r2, #1
    8a28:	0018      	movs	r0, r3
    8a2a:	f001 fe7f 	bl	a72c <_ZN6SdFile4readEPvt>
    8a2e:	0003      	movs	r3, r0
    8a30:	2b01      	cmp	r3, #1
    8a32:	d104      	bne.n	8a3e <_ZN6SdFile4readEv+0x26>
    8a34:	230f      	movs	r3, #15
    8a36:	18fb      	adds	r3, r7, r3
    8a38:	781b      	ldrb	r3, [r3, #0]
    8a3a:	b21b      	sxth	r3, r3
    8a3c:	e001      	b.n	8a42 <_ZN6SdFile4readEv+0x2a>
    8a3e:	2301      	movs	r3, #1
    8a40:	425b      	negs	r3, r3
  }
    8a42:	0018      	movs	r0, r3
    8a44:	46bd      	mov	sp, r7
    8a46:	b004      	add	sp, #16
    8a48:	bd80      	pop	{r7, pc}

00008a4a <_ZN6SdFile7seekCurEm>:
    curPosition_ = curCluster_ = 0;
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    8a4a:	b580      	push	{r7, lr}
    8a4c:	b082      	sub	sp, #8
    8a4e:	af00      	add	r7, sp, #0
    8a50:	6078      	str	r0, [r7, #4]
    8a52:	6039      	str	r1, [r7, #0]
    return seekSet(curPosition_ + pos);
    8a54:	687b      	ldr	r3, [r7, #4]
    8a56:	691a      	ldr	r2, [r3, #16]
    8a58:	683b      	ldr	r3, [r7, #0]
    8a5a:	18d2      	adds	r2, r2, r3
    8a5c:	687b      	ldr	r3, [r7, #4]
    8a5e:	0011      	movs	r1, r2
    8a60:	0018      	movs	r0, r3
    8a62:	f001 ffc1 	bl	a9e8 <_ZN6SdFile7seekSetEm>
    8a66:	0003      	movs	r3, r0
  }
    8a68:	0018      	movs	r0, r3
    8a6a:	46bd      	mov	sp, r7
    8a6c:	b002      	add	sp, #8
    8a6e:	bd80      	pop	{r7, pc}

00008a70 <_ZN5SDLib4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    8a70:	b580      	push	{r7, lr}
    8a72:	b084      	sub	sp, #16
    8a74:	af00      	add	r7, sp, #0
    8a76:	60f8      	str	r0, [r7, #12]
    8a78:	60b9      	str	r1, [r7, #8]
    8a7a:	607a      	str	r2, [r7, #4]
    8a7c:	68fb      	ldr	r3, [r7, #12]
    8a7e:	0018      	movs	r0, r3
    8a80:	f7fa fec0 	bl	3804 <_ZN6StreamC1Ev>
    8a84:	4a11      	ldr	r2, [pc, #68]	; (8acc <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>)
    8a86:	68fb      	ldr	r3, [r7, #12]
    8a88:	601a      	str	r2, [r3, #0]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    8a8a:	2028      	movs	r0, #40	; 0x28
    8a8c:	f007 ff9e 	bl	109cc <malloc>
    8a90:	0003      	movs	r3, r0
    8a92:	001a      	movs	r2, r3
    8a94:	68fb      	ldr	r3, [r7, #12]
    8a96:	621a      	str	r2, [r3, #32]
  if (_file) {
    8a98:	68fb      	ldr	r3, [r7, #12]
    8a9a:	6a1b      	ldr	r3, [r3, #32]
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d010      	beq.n	8ac2 <_ZN5SDLib4FileC1E6SdFilePKc+0x52>
    memcpy(_file, &f, sizeof(SdFile));
    8aa0:	68fb      	ldr	r3, [r7, #12]
    8aa2:	6a1b      	ldr	r3, [r3, #32]
    8aa4:	68b9      	ldr	r1, [r7, #8]
    8aa6:	2228      	movs	r2, #40	; 0x28
    8aa8:	0018      	movs	r0, r3
    8aaa:	f007 ffc4 	bl	10a36 <memcpy>
    
    strncpy(_name, n, 12);
    8aae:	68fb      	ldr	r3, [r7, #12]
    8ab0:	3310      	adds	r3, #16
    8ab2:	6879      	ldr	r1, [r7, #4]
    8ab4:	220c      	movs	r2, #12
    8ab6:	0018      	movs	r0, r3
    8ab8:	f008 fe63 	bl	11782 <strncpy>
    _name[12] = 0;
    8abc:	68fb      	ldr	r3, [r7, #12]
    8abe:	2200      	movs	r2, #0
    8ac0:	771a      	strb	r2, [r3, #28]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    8ac2:	68fb      	ldr	r3, [r7, #12]
    8ac4:	0018      	movs	r0, r3
    8ac6:	46bd      	mov	sp, r7
    8ac8:	b004      	add	sp, #16
    8aca:	bd80      	pop	{r7, pc}
    8acc:	000137c0 	.word	0x000137c0

00008ad0 <_ZN5SDLib4FileC1Ev>:

File::File(void) {
    8ad0:	b580      	push	{r7, lr}
    8ad2:	b082      	sub	sp, #8
    8ad4:	af00      	add	r7, sp, #0
    8ad6:	6078      	str	r0, [r7, #4]
    8ad8:	687b      	ldr	r3, [r7, #4]
    8ada:	0018      	movs	r0, r3
    8adc:	f7fa fe92 	bl	3804 <_ZN6StreamC1Ev>
    8ae0:	4a06      	ldr	r2, [pc, #24]	; (8afc <_ZN5SDLib4FileC1Ev+0x2c>)
    8ae2:	687b      	ldr	r3, [r7, #4]
    8ae4:	601a      	str	r2, [r3, #0]
  _file = 0;
    8ae6:	687b      	ldr	r3, [r7, #4]
    8ae8:	2200      	movs	r2, #0
    8aea:	621a      	str	r2, [r3, #32]
  _name[0] = 0;
    8aec:	687b      	ldr	r3, [r7, #4]
    8aee:	2200      	movs	r2, #0
    8af0:	741a      	strb	r2, [r3, #16]
  //Serial.print("Created empty file object");
}
    8af2:	687b      	ldr	r3, [r7, #4]
    8af4:	0018      	movs	r0, r3
    8af6:	46bd      	mov	sp, r7
    8af8:	b002      	add	sp, #8
    8afa:	bd80      	pop	{r7, pc}
    8afc:	000137c0 	.word	0x000137c0

00008b00 <_ZN5SDLib4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    8b00:	b580      	push	{r7, lr}
    8b02:	b082      	sub	sp, #8
    8b04:	af00      	add	r7, sp, #0
    8b06:	6078      	str	r0, [r7, #4]
    8b08:	000a      	movs	r2, r1
    8b0a:	1cfb      	adds	r3, r7, #3
    8b0c:	701a      	strb	r2, [r3, #0]
  return write(&val, 1);
    8b0e:	687b      	ldr	r3, [r7, #4]
    8b10:	681b      	ldr	r3, [r3, #0]
    8b12:	3304      	adds	r3, #4
    8b14:	681b      	ldr	r3, [r3, #0]
    8b16:	1cf9      	adds	r1, r7, #3
    8b18:	6878      	ldr	r0, [r7, #4]
    8b1a:	2201      	movs	r2, #1
    8b1c:	4798      	blx	r3
    8b1e:	0003      	movs	r3, r0
}
    8b20:	0018      	movs	r0, r3
    8b22:	46bd      	mov	sp, r7
    8b24:	b002      	add	sp, #8
    8b26:	bd80      	pop	{r7, pc}

00008b28 <_ZN5SDLib4File5writeEPKhj>:

size_t File::write(const uint8_t *buf, size_t size) {
    8b28:	b580      	push	{r7, lr}
    8b2a:	b086      	sub	sp, #24
    8b2c:	af00      	add	r7, sp, #0
    8b2e:	60f8      	str	r0, [r7, #12]
    8b30:	60b9      	str	r1, [r7, #8]
    8b32:	607a      	str	r2, [r7, #4]
  size_t t;
  if (!_file) {
    8b34:	68fb      	ldr	r3, [r7, #12]
    8b36:	6a1b      	ldr	r3, [r3, #32]
    8b38:	2b00      	cmp	r3, #0
    8b3a:	d106      	bne.n	8b4a <_ZN5SDLib4File5writeEPKhj+0x22>
    setWriteError();
    8b3c:	68fb      	ldr	r3, [r7, #12]
    8b3e:	2101      	movs	r1, #1
    8b40:	0018      	movs	r0, r3
    8b42:	f7ff ff15 	bl	8970 <_ZN5Print13setWriteErrorEi>
    return 0;
    8b46:	2300      	movs	r3, #0
    8b48:	e021      	b.n	8b8e <_ZN5SDLib4File5writeEPKhj+0x66>
  }
  _file->clearWriteError();
    8b4a:	68fb      	ldr	r3, [r7, #12]
    8b4c:	6a1b      	ldr	r3, [r3, #32]
    8b4e:	0018      	movs	r0, r3
    8b50:	f7ff ff24 	bl	899c <_ZN5Print15clearWriteErrorEv>
  t = _file->write(buf, size);
    8b54:	68fb      	ldr	r3, [r7, #12]
    8b56:	6a1b      	ldr	r3, [r3, #32]
    8b58:	687a      	ldr	r2, [r7, #4]
    8b5a:	b292      	uxth	r2, r2
    8b5c:	68b9      	ldr	r1, [r7, #8]
    8b5e:	0018      	movs	r0, r3
    8b60:	f002 f924 	bl	adac <_ZN6SdFile5writeEPKvt>
    8b64:	0003      	movs	r3, r0
    8b66:	617b      	str	r3, [r7, #20]
  if (_file->getWriteError()) {
    8b68:	68fb      	ldr	r3, [r7, #12]
    8b6a:	6a1b      	ldr	r3, [r3, #32]
    8b6c:	0018      	movs	r0, r3
    8b6e:	f7ff ff0b 	bl	8988 <_ZN5Print13getWriteErrorEv>
    8b72:	0003      	movs	r3, r0
    8b74:	1e5a      	subs	r2, r3, #1
    8b76:	4193      	sbcs	r3, r2
    8b78:	b2db      	uxtb	r3, r3
    8b7a:	2b00      	cmp	r3, #0
    8b7c:	d006      	beq.n	8b8c <_ZN5SDLib4File5writeEPKhj+0x64>
    setWriteError();
    8b7e:	68fb      	ldr	r3, [r7, #12]
    8b80:	2101      	movs	r1, #1
    8b82:	0018      	movs	r0, r3
    8b84:	f7ff fef4 	bl	8970 <_ZN5Print13setWriteErrorEi>
    return 0;
    8b88:	2300      	movs	r3, #0
    8b8a:	e000      	b.n	8b8e <_ZN5SDLib4File5writeEPKhj+0x66>
  }
  return t;
    8b8c:	697b      	ldr	r3, [r7, #20]
}
    8b8e:	0018      	movs	r0, r3
    8b90:	46bd      	mov	sp, r7
    8b92:	b006      	add	sp, #24
    8b94:	bd80      	pop	{r7, pc}

00008b96 <_ZN5SDLib4File4peekEv>:

int File::peek() {
    8b96:	b580      	push	{r7, lr}
    8b98:	b084      	sub	sp, #16
    8b9a:	af00      	add	r7, sp, #0
    8b9c:	6078      	str	r0, [r7, #4]
  if (! _file) 
    8b9e:	687b      	ldr	r3, [r7, #4]
    8ba0:	6a1b      	ldr	r3, [r3, #32]
    8ba2:	2b00      	cmp	r3, #0
    8ba4:	d101      	bne.n	8baa <_ZN5SDLib4File4peekEv+0x14>
    return 0;
    8ba6:	2300      	movs	r3, #0
    8ba8:	e012      	b.n	8bd0 <_ZN5SDLib4File4peekEv+0x3a>

  int c = _file->read();
    8baa:	687b      	ldr	r3, [r7, #4]
    8bac:	6a1b      	ldr	r3, [r3, #32]
    8bae:	0018      	movs	r0, r3
    8bb0:	f7ff ff32 	bl	8a18 <_ZN6SdFile4readEv>
    8bb4:	0003      	movs	r3, r0
    8bb6:	60fb      	str	r3, [r7, #12]
  if (c != -1) _file->seekCur(-1);
    8bb8:	68fb      	ldr	r3, [r7, #12]
    8bba:	3301      	adds	r3, #1
    8bbc:	d007      	beq.n	8bce <_ZN5SDLib4File4peekEv+0x38>
    8bbe:	687b      	ldr	r3, [r7, #4]
    8bc0:	6a1a      	ldr	r2, [r3, #32]
    8bc2:	2301      	movs	r3, #1
    8bc4:	425b      	negs	r3, r3
    8bc6:	0019      	movs	r1, r3
    8bc8:	0010      	movs	r0, r2
    8bca:	f7ff ff3e 	bl	8a4a <_ZN6SdFile7seekCurEm>
  return c;
    8bce:	68fb      	ldr	r3, [r7, #12]
}
    8bd0:	0018      	movs	r0, r3
    8bd2:	46bd      	mov	sp, r7
    8bd4:	b004      	add	sp, #16
    8bd6:	bd80      	pop	{r7, pc}

00008bd8 <_ZN5SDLib4File4readEv>:

int File::read() {
    8bd8:	b580      	push	{r7, lr}
    8bda:	b082      	sub	sp, #8
    8bdc:	af00      	add	r7, sp, #0
    8bde:	6078      	str	r0, [r7, #4]
  if (_file) 
    8be0:	687b      	ldr	r3, [r7, #4]
    8be2:	6a1b      	ldr	r3, [r3, #32]
    8be4:	2b00      	cmp	r3, #0
    8be6:	d006      	beq.n	8bf6 <_ZN5SDLib4File4readEv+0x1e>
    return _file->read();
    8be8:	687b      	ldr	r3, [r7, #4]
    8bea:	6a1b      	ldr	r3, [r3, #32]
    8bec:	0018      	movs	r0, r3
    8bee:	f7ff ff13 	bl	8a18 <_ZN6SdFile4readEv>
    8bf2:	0003      	movs	r3, r0
    8bf4:	e001      	b.n	8bfa <_ZN5SDLib4File4readEv+0x22>
  return -1;
    8bf6:	2301      	movs	r3, #1
    8bf8:	425b      	negs	r3, r3
}
    8bfa:	0018      	movs	r0, r3
    8bfc:	46bd      	mov	sp, r7
    8bfe:	b002      	add	sp, #8
    8c00:	bd80      	pop	{r7, pc}

00008c02 <_ZN5SDLib4File4readEPvt>:

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
    8c02:	b580      	push	{r7, lr}
    8c04:	b084      	sub	sp, #16
    8c06:	af00      	add	r7, sp, #0
    8c08:	60f8      	str	r0, [r7, #12]
    8c0a:	60b9      	str	r1, [r7, #8]
    8c0c:	1dbb      	adds	r3, r7, #6
    8c0e:	801a      	strh	r2, [r3, #0]
  if (_file) 
    8c10:	68fb      	ldr	r3, [r7, #12]
    8c12:	6a1b      	ldr	r3, [r3, #32]
    8c14:	2b00      	cmp	r3, #0
    8c16:	d009      	beq.n	8c2c <_ZN5SDLib4File4readEPvt+0x2a>
    return _file->read(buf, nbyte);
    8c18:	68fb      	ldr	r3, [r7, #12]
    8c1a:	6a18      	ldr	r0, [r3, #32]
    8c1c:	1dbb      	adds	r3, r7, #6
    8c1e:	881a      	ldrh	r2, [r3, #0]
    8c20:	68bb      	ldr	r3, [r7, #8]
    8c22:	0019      	movs	r1, r3
    8c24:	f001 fd82 	bl	a72c <_ZN6SdFile4readEPvt>
    8c28:	0003      	movs	r3, r0
    8c2a:	e000      	b.n	8c2e <_ZN5SDLib4File4readEPvt+0x2c>
  return 0;
    8c2c:	2300      	movs	r3, #0
}
    8c2e:	0018      	movs	r0, r3
    8c30:	46bd      	mov	sp, r7
    8c32:	b004      	add	sp, #16
    8c34:	bd80      	pop	{r7, pc}
	...

00008c38 <_ZN5SDLib4File9availableEv>:

int File::available() {
    8c38:	b590      	push	{r4, r7, lr}
    8c3a:	b085      	sub	sp, #20
    8c3c:	af00      	add	r7, sp, #0
    8c3e:	6078      	str	r0, [r7, #4]
  if (! _file) return 0;
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	6a1b      	ldr	r3, [r3, #32]
    8c44:	2b00      	cmp	r3, #0
    8c46:	d101      	bne.n	8c4c <_ZN5SDLib4File9availableEv+0x14>
    8c48:	2300      	movs	r3, #0
    8c4a:	e010      	b.n	8c6e <_ZN5SDLib4File9availableEv+0x36>

  uint32_t n = size() - position();
    8c4c:	687b      	ldr	r3, [r7, #4]
    8c4e:	0018      	movs	r0, r3
    8c50:	f000 f854 	bl	8cfc <_ZN5SDLib4File4sizeEv>
    8c54:	0004      	movs	r4, r0
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	0018      	movs	r0, r3
    8c5a:	f000 f83a 	bl	8cd2 <_ZN5SDLib4File8positionEv>
    8c5e:	0003      	movs	r3, r0
    8c60:	1ae3      	subs	r3, r4, r3
    8c62:	60fb      	str	r3, [r7, #12]

  return n > 0X7FFF ? 0X7FFF : n;
    8c64:	68fb      	ldr	r3, [r7, #12]
    8c66:	4a04      	ldr	r2, [pc, #16]	; (8c78 <_ZN5SDLib4File9availableEv+0x40>)
    8c68:	4293      	cmp	r3, r2
    8c6a:	d900      	bls.n	8c6e <_ZN5SDLib4File9availableEv+0x36>
    8c6c:	4b02      	ldr	r3, [pc, #8]	; (8c78 <_ZN5SDLib4File9availableEv+0x40>)
}
    8c6e:	0018      	movs	r0, r3
    8c70:	46bd      	mov	sp, r7
    8c72:	b005      	add	sp, #20
    8c74:	bd90      	pop	{r4, r7, pc}
    8c76:	46c0      	nop			; (mov r8, r8)
    8c78:	00007fff 	.word	0x00007fff

00008c7c <_ZN5SDLib4File5flushEv>:

void File::flush() {
    8c7c:	b580      	push	{r7, lr}
    8c7e:	b082      	sub	sp, #8
    8c80:	af00      	add	r7, sp, #0
    8c82:	6078      	str	r0, [r7, #4]
  if (_file)
    8c84:	687b      	ldr	r3, [r7, #4]
    8c86:	6a1b      	ldr	r3, [r3, #32]
    8c88:	2b00      	cmp	r3, #0
    8c8a:	d004      	beq.n	8c96 <_ZN5SDLib4File5flushEv+0x1a>
    _file->sync();
    8c8c:	687b      	ldr	r3, [r7, #4]
    8c8e:	6a1b      	ldr	r3, [r3, #32]
    8c90:	0018      	movs	r0, r3
    8c92:	f001 ff19 	bl	aac8 <_ZN6SdFile4syncEv>
}
    8c96:	46c0      	nop			; (mov r8, r8)
    8c98:	46bd      	mov	sp, r7
    8c9a:	b002      	add	sp, #8
    8c9c:	bd80      	pop	{r7, pc}

00008c9e <_ZN5SDLib4File4seekEm>:

boolean File::seek(uint32_t pos) {
    8c9e:	b580      	push	{r7, lr}
    8ca0:	b082      	sub	sp, #8
    8ca2:	af00      	add	r7, sp, #0
    8ca4:	6078      	str	r0, [r7, #4]
    8ca6:	6039      	str	r1, [r7, #0]
  if (! _file) return false;
    8ca8:	687b      	ldr	r3, [r7, #4]
    8caa:	6a1b      	ldr	r3, [r3, #32]
    8cac:	2b00      	cmp	r3, #0
    8cae:	d101      	bne.n	8cb4 <_ZN5SDLib4File4seekEm+0x16>
    8cb0:	2300      	movs	r3, #0
    8cb2:	e00a      	b.n	8cca <_ZN5SDLib4File4seekEm+0x2c>

  return _file->seekSet(pos);
    8cb4:	687b      	ldr	r3, [r7, #4]
    8cb6:	6a1b      	ldr	r3, [r3, #32]
    8cb8:	683a      	ldr	r2, [r7, #0]
    8cba:	0011      	movs	r1, r2
    8cbc:	0018      	movs	r0, r3
    8cbe:	f001 fe93 	bl	a9e8 <_ZN6SdFile7seekSetEm>
    8cc2:	0003      	movs	r3, r0
    8cc4:	1e5a      	subs	r2, r3, #1
    8cc6:	4193      	sbcs	r3, r2
    8cc8:	b2db      	uxtb	r3, r3
}
    8cca:	0018      	movs	r0, r3
    8ccc:	46bd      	mov	sp, r7
    8cce:	b002      	add	sp, #8
    8cd0:	bd80      	pop	{r7, pc}

00008cd2 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
    8cd2:	b580      	push	{r7, lr}
    8cd4:	b082      	sub	sp, #8
    8cd6:	af00      	add	r7, sp, #0
    8cd8:	6078      	str	r0, [r7, #4]
  if (! _file) return -1;
    8cda:	687b      	ldr	r3, [r7, #4]
    8cdc:	6a1b      	ldr	r3, [r3, #32]
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d102      	bne.n	8ce8 <_ZN5SDLib4File8positionEv+0x16>
    8ce2:	2301      	movs	r3, #1
    8ce4:	425b      	negs	r3, r3
    8ce6:	e005      	b.n	8cf4 <_ZN5SDLib4File8positionEv+0x22>
  return _file->curPosition();
    8ce8:	687b      	ldr	r3, [r7, #4]
    8cea:	6a1b      	ldr	r3, [r3, #32]
    8cec:	0018      	movs	r0, r3
    8cee:	f7ff fe62 	bl	89b6 <_ZNK6SdFile11curPositionEv>
    8cf2:	0003      	movs	r3, r0
}
    8cf4:	0018      	movs	r0, r3
    8cf6:	46bd      	mov	sp, r7
    8cf8:	b002      	add	sp, #8
    8cfa:	bd80      	pop	{r7, pc}

00008cfc <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
    8cfc:	b580      	push	{r7, lr}
    8cfe:	b082      	sub	sp, #8
    8d00:	af00      	add	r7, sp, #0
    8d02:	6078      	str	r0, [r7, #4]
  if (! _file) return 0;
    8d04:	687b      	ldr	r3, [r7, #4]
    8d06:	6a1b      	ldr	r3, [r3, #32]
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d101      	bne.n	8d10 <_ZN5SDLib4File4sizeEv+0x14>
    8d0c:	2300      	movs	r3, #0
    8d0e:	e005      	b.n	8d1c <_ZN5SDLib4File4sizeEv+0x20>
  return _file->fileSize();
    8d10:	687b      	ldr	r3, [r7, #4]
    8d12:	6a1b      	ldr	r3, [r3, #32]
    8d14:	0018      	movs	r0, r3
    8d16:	f7ff fe58 	bl	89ca <_ZNK6SdFile8fileSizeEv>
    8d1a:	0003      	movs	r3, r0
}
    8d1c:	0018      	movs	r0, r3
    8d1e:	46bd      	mov	sp, r7
    8d20:	b002      	add	sp, #8
    8d22:	bd80      	pop	{r7, pc}

00008d24 <_ZN5SDLib4File5closeEv>:

void File::close() {
    8d24:	b580      	push	{r7, lr}
    8d26:	b082      	sub	sp, #8
    8d28:	af00      	add	r7, sp, #0
    8d2a:	6078      	str	r0, [r7, #4]
  if (_file) {
    8d2c:	687b      	ldr	r3, [r7, #4]
    8d2e:	6a1b      	ldr	r3, [r3, #32]
    8d30:	2b00      	cmp	r3, #0
    8d32:	d00c      	beq.n	8d4e <_ZN5SDLib4File5closeEv+0x2a>
    _file->close();
    8d34:	687b      	ldr	r3, [r7, #4]
    8d36:	6a1b      	ldr	r3, [r3, #32]
    8d38:	0018      	movs	r0, r3
    8d3a:	f001 f9d5 	bl	a0e8 <_ZN6SdFile5closeEv>
    free(_file); 
    8d3e:	687b      	ldr	r3, [r7, #4]
    8d40:	6a1b      	ldr	r3, [r3, #32]
    8d42:	0018      	movs	r0, r3
    8d44:	f007 fe4c 	bl	109e0 <free>
    _file = 0;
    8d48:	687b      	ldr	r3, [r7, #4]
    8d4a:	2200      	movs	r2, #0
    8d4c:	621a      	str	r2, [r3, #32]
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    8d4e:	46c0      	nop			; (mov r8, r8)
    8d50:	46bd      	mov	sp, r7
    8d52:	b002      	add	sp, #8
    8d54:	bd80      	pop	{r7, pc}

00008d56 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
    8d56:	b580      	push	{r7, lr}
    8d58:	b082      	sub	sp, #8
    8d5a:	af00      	add	r7, sp, #0
    8d5c:	6078      	str	r0, [r7, #4]
  if (_file) 
    8d5e:	687b      	ldr	r3, [r7, #4]
    8d60:	6a1b      	ldr	r3, [r3, #32]
    8d62:	2b00      	cmp	r3, #0
    8d64:	d009      	beq.n	8d7a <_ZN5SDLib4FilecvbEv+0x24>
    return  _file->isOpen();
    8d66:	687b      	ldr	r3, [r7, #4]
    8d68:	6a1b      	ldr	r3, [r3, #32]
    8d6a:	0018      	movs	r0, r3
    8d6c:	f7ff fe47 	bl	89fe <_ZNK6SdFile6isOpenEv>
    8d70:	0003      	movs	r3, r0
    8d72:	1e5a      	subs	r2, r3, #1
    8d74:	4193      	sbcs	r3, r2
    8d76:	b2db      	uxtb	r3, r3
    8d78:	e000      	b.n	8d7c <_ZN5SDLib4FilecvbEv+0x26>
  return false;
    8d7a:	2300      	movs	r3, #0
}
    8d7c:	0018      	movs	r0, r3
    8d7e:	46bd      	mov	sp, r7
    8d80:	b002      	add	sp, #8
    8d82:	bd80      	pop	{r7, pc}

00008d84 <_ZN7Sd2CardC1Ev>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    8d84:	b580      	push	{r7, lr}
    8d86:	b082      	sub	sp, #8
    8d88:	af00      	add	r7, sp, #0
    8d8a:	6078      	str	r0, [r7, #4]
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	2200      	movs	r2, #0
    8d90:	715a      	strb	r2, [r3, #5]
    8d92:	687b      	ldr	r3, [r7, #4]
    8d94:	2200      	movs	r2, #0
    8d96:	719a      	strb	r2, [r3, #6]
    8d98:	687b      	ldr	r3, [r7, #4]
    8d9a:	2200      	movs	r2, #0
    8d9c:	729a      	strb	r2, [r3, #10]
    8d9e:	687b      	ldr	r3, [r7, #4]
    8da0:	2200      	movs	r2, #0
    8da2:	731a      	strb	r2, [r3, #12]
    8da4:	687b      	ldr	r3, [r7, #4]
    8da6:	0018      	movs	r0, r3
    8da8:	46bd      	mov	sp, r7
    8daa:	b002      	add	sp, #8
    8dac:	bd80      	pop	{r7, pc}
	...

00008db0 <_ZN6SdFileC1Ev>:
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    8db0:	b580      	push	{r7, lr}
    8db2:	b082      	sub	sp, #8
    8db4:	af00      	add	r7, sp, #0
    8db6:	6078      	str	r0, [r7, #4]
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	0018      	movs	r0, r3
    8dbc:	f7fa fd10 	bl	37e0 <_ZN5PrintC1Ev>
    8dc0:	4a05      	ldr	r2, [pc, #20]	; (8dd8 <_ZN6SdFileC1Ev+0x28>)
    8dc2:	687b      	ldr	r3, [r7, #4]
    8dc4:	601a      	str	r2, [r3, #0]
    8dc6:	687b      	ldr	r3, [r7, #4]
    8dc8:	2200      	movs	r2, #0
    8dca:	725a      	strb	r2, [r3, #9]
    8dcc:	687b      	ldr	r3, [r7, #4]
    8dce:	0018      	movs	r0, r3
    8dd0:	46bd      	mov	sp, r7
    8dd2:	b002      	add	sp, #8
    8dd4:	bd80      	pop	{r7, pc}
    8dd6:	46c0      	nop			; (mov r8, r8)
    8dd8:	00013810 	.word	0x00013810

00008ddc <_ZN6SdFile6rewindEv>:
  void rewind(void) {
    8ddc:	b580      	push	{r7, lr}
    8dde:	b082      	sub	sp, #8
    8de0:	af00      	add	r7, sp, #0
    8de2:	6078      	str	r0, [r7, #4]
    curPosition_ = curCluster_ = 0;
    8de4:	687b      	ldr	r3, [r7, #4]
    8de6:	2200      	movs	r2, #0
    8de8:	60da      	str	r2, [r3, #12]
    8dea:	687b      	ldr	r3, [r7, #4]
    8dec:	68da      	ldr	r2, [r3, #12]
    8dee:	687b      	ldr	r3, [r7, #4]
    8df0:	611a      	str	r2, [r3, #16]
  }
    8df2:	46c0      	nop			; (mov r8, r8)
    8df4:	46bd      	mov	sp, r7
    8df6:	b002      	add	sp, #8
    8df8:	bd80      	pop	{r7, pc}

00008dfa <_ZN6SdFile4openERS_PKch>:
    return makeDir(&dir, dirName);
  }
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    8dfa:	b580      	push	{r7, lr}
    8dfc:	b084      	sub	sp, #16
    8dfe:	af00      	add	r7, sp, #0
    8e00:	60f8      	str	r0, [r7, #12]
    8e02:	60b9      	str	r1, [r7, #8]
    8e04:	607a      	str	r2, [r7, #4]
    8e06:	001a      	movs	r2, r3
    8e08:	1cfb      	adds	r3, r7, #3
    8e0a:	701a      	strb	r2, [r3, #0]
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    8e0c:	1cfb      	adds	r3, r7, #3
    8e0e:	781b      	ldrb	r3, [r3, #0]
    8e10:	687a      	ldr	r2, [r7, #4]
    8e12:	68b9      	ldr	r1, [r7, #8]
    8e14:	68f8      	ldr	r0, [r7, #12]
    8e16:	f001 fa29 	bl	a26c <_ZN6SdFile4openEPS_PKch>
    8e1a:	0003      	movs	r3, r0
  }
    8e1c:	0018      	movs	r0, r3
    8e1e:	46bd      	mov	sp, r7
    8e20:	b004      	add	sp, #16
    8e22:	bd80      	pop	{r7, pc}

00008e24 <_ZN6SdFile8openRootER8SdVolume>:
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    8e24:	b580      	push	{r7, lr}
    8e26:	b082      	sub	sp, #8
    8e28:	af00      	add	r7, sp, #0
    8e2a:	6078      	str	r0, [r7, #4]
    8e2c:	6039      	str	r1, [r7, #0]
    8e2e:	683a      	ldr	r2, [r7, #0]
    8e30:	687b      	ldr	r3, [r7, #4]
    8e32:	0011      	movs	r1, r2
    8e34:	0018      	movs	r0, r3
    8e36:	f001 fc0f 	bl	a658 <_ZN6SdFile8openRootEP8SdVolume>
    8e3a:	0003      	movs	r3, r0
    8e3c:	0018      	movs	r0, r3
    8e3e:	46bd      	mov	sp, r7
    8e40:	b002      	add	sp, #8
    8e42:	bd80      	pop	{r7, pc}

00008e44 <_ZN8SdVolumeC1Ev>:
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    8e44:	b580      	push	{r7, lr}
    8e46:	b082      	sub	sp, #8
    8e48:	af00      	add	r7, sp, #0
    8e4a:	6078      	str	r0, [r7, #4]
    8e4c:	687b      	ldr	r3, [r7, #4]
    8e4e:	2202      	movs	r2, #2
    8e50:	601a      	str	r2, [r3, #0]
    8e52:	687b      	ldr	r3, [r7, #4]
    8e54:	2220      	movs	r2, #32
    8e56:	2100      	movs	r1, #0
    8e58:	5499      	strb	r1, [r3, r2]
    8e5a:	687b      	ldr	r3, [r7, #4]
    8e5c:	0018      	movs	r0, r3
    8e5e:	46bd      	mov	sp, r7
    8e60:	b002      	add	sp, #8
    8e62:	bd80      	pop	{r7, pc}

00008e64 <_ZN8SdVolume4initEP7Sd2Card>:
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    8e64:	b580      	push	{r7, lr}
    8e66:	b082      	sub	sp, #8
    8e68:	af00      	add	r7, sp, #0
    8e6a:	6078      	str	r0, [r7, #4]
    8e6c:	6039      	str	r1, [r7, #0]
    8e6e:	6839      	ldr	r1, [r7, #0]
    8e70:	687b      	ldr	r3, [r7, #4]
    8e72:	2201      	movs	r2, #1
    8e74:	0018      	movs	r0, r3
    8e76:	f002 fbb1 	bl	b5dc <_ZN8SdVolume4initEP7Sd2Cardh>
    8e7a:	1e03      	subs	r3, r0, #0
    8e7c:	d107      	bne.n	8e8e <_ZN8SdVolume4initEP7Sd2Card+0x2a>
    8e7e:	6839      	ldr	r1, [r7, #0]
    8e80:	687b      	ldr	r3, [r7, #4]
    8e82:	2200      	movs	r2, #0
    8e84:	0018      	movs	r0, r3
    8e86:	f002 fba9 	bl	b5dc <_ZN8SdVolume4initEP7Sd2Cardh>
    8e8a:	0003      	movs	r3, r0
    8e8c:	e000      	b.n	8e90 <_ZN8SdVolume4initEP7Sd2Card+0x2c>
    8e8e:	2301      	movs	r3, #1
    8e90:	0018      	movs	r0, r3
    8e92:	46bd      	mov	sp, r7
    8e94:	b002      	add	sp, #8
    8e96:	bd80      	pop	{r7, pc}

00008e98 <_ZN8SdVolume4initER7Sd2Card>:
  static Sd2Card* sdCard(void) {return sdCard_;}
//------------------------------------------------------------------------------
#if ALLOW_DEPRECATED_FUNCTIONS
  // Deprecated functions  - suppress cpplint warnings with NOLINT comment
  /** \deprecated Use: uint8_t SdVolume::init(Sd2Card* dev); */
  uint8_t init(Sd2Card& dev) {return init(&dev);}  // NOLINT
    8e98:	b580      	push	{r7, lr}
    8e9a:	b082      	sub	sp, #8
    8e9c:	af00      	add	r7, sp, #0
    8e9e:	6078      	str	r0, [r7, #4]
    8ea0:	6039      	str	r1, [r7, #0]
    8ea2:	683a      	ldr	r2, [r7, #0]
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	0011      	movs	r1, r2
    8ea8:	0018      	movs	r0, r3
    8eaa:	f7ff ffdb 	bl	8e64 <_ZN8SdVolume4initEP7Sd2Card>
    8eae:	0003      	movs	r3, r0
    8eb0:	0018      	movs	r0, r3
    8eb2:	46bd      	mov	sp, r7
    8eb4:	b002      	add	sp, #8
    8eb6:	bd80      	pop	{r7, pc}

00008eb8 <_ZN5SDLib7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    8eb8:	b580      	push	{r7, lr}
    8eba:	b082      	sub	sp, #8
    8ebc:	af00      	add	r7, sp, #0
    8ebe:	6078      	str	r0, [r7, #4]
    8ec0:	000a      	movs	r2, r1
    8ec2:	1cfb      	adds	r3, r7, #3
    8ec4:	701a      	strb	r2, [r3, #0]
  if(root.isOpen()) root.close();
    8ec6:	687b      	ldr	r3, [r7, #4]
    8ec8:	3338      	adds	r3, #56	; 0x38
    8eca:	0018      	movs	r0, r3
    8ecc:	f7ff fd97 	bl	89fe <_ZNK6SdFile6isOpenEv>
    8ed0:	0003      	movs	r3, r0
    8ed2:	1e5a      	subs	r2, r3, #1
    8ed4:	4193      	sbcs	r3, r2
    8ed6:	b2db      	uxtb	r3, r3
    8ed8:	2b00      	cmp	r3, #0
    8eda:	d004      	beq.n	8ee6 <_ZN5SDLib7SDClass5beginEh+0x2e>
    8edc:	687b      	ldr	r3, [r7, #4]
    8ede:	3338      	adds	r3, #56	; 0x38
    8ee0:	0018      	movs	r0, r3
    8ee2:	f001 f901 	bl	a0e8 <_ZN6SdFile5closeEv>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    8ee6:	6878      	ldr	r0, [r7, #4]
    8ee8:	1cfb      	adds	r3, r7, #3
    8eea:	781b      	ldrb	r3, [r3, #0]
    8eec:	001a      	movs	r2, r3
    8eee:	2101      	movs	r1, #1
    8ef0:	f000 fb46 	bl	9580 <_ZN7Sd2Card4initEhh>
    8ef4:	1e03      	subs	r3, r0, #0
         volume.init(card) &&
    8ef6:	d015      	beq.n	8f24 <_ZN5SDLib7SDClass5beginEh+0x6c>
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	3310      	adds	r3, #16
    8efc:	687a      	ldr	r2, [r7, #4]
    8efe:	0011      	movs	r1, r2
    8f00:	0018      	movs	r0, r3
    8f02:	f7ff ffc9 	bl	8e98 <_ZN8SdVolume4initER7Sd2Card>
    8f06:	1e03      	subs	r3, r0, #0
  return card.init(SPI_HALF_SPEED, csPin) &&
    8f08:	d00c      	beq.n	8f24 <_ZN5SDLib7SDClass5beginEh+0x6c>
         root.openRoot(volume);
    8f0a:	687b      	ldr	r3, [r7, #4]
    8f0c:	3338      	adds	r3, #56	; 0x38
    8f0e:	001a      	movs	r2, r3
    8f10:	687b      	ldr	r3, [r7, #4]
    8f12:	3310      	adds	r3, #16
    8f14:	0019      	movs	r1, r3
    8f16:	0010      	movs	r0, r2
    8f18:	f7ff ff84 	bl	8e24 <_ZN6SdFile8openRootER8SdVolume>
    8f1c:	1e03      	subs	r3, r0, #0
         volume.init(card) &&
    8f1e:	d001      	beq.n	8f24 <_ZN5SDLib7SDClass5beginEh+0x6c>
    8f20:	2301      	movs	r3, #1
    8f22:	e000      	b.n	8f26 <_ZN5SDLib7SDClass5beginEh+0x6e>
    8f24:	2300      	movs	r3, #0
}
    8f26:	0018      	movs	r0, r3
    8f28:	46bd      	mov	sp, r7
    8f2a:	b002      	add	sp, #8
    8f2c:	bd80      	pop	{r7, pc}
	...

00008f30 <_ZN5PrintC1ERKS_>:
class Print
    8f30:	b580      	push	{r7, lr}
    8f32:	b082      	sub	sp, #8
    8f34:	af00      	add	r7, sp, #0
    8f36:	6078      	str	r0, [r7, #4]
    8f38:	6039      	str	r1, [r7, #0]
    8f3a:	4a06      	ldr	r2, [pc, #24]	; (8f54 <_ZN5PrintC1ERKS_+0x24>)
    8f3c:	687b      	ldr	r3, [r7, #4]
    8f3e:	601a      	str	r2, [r3, #0]
    8f40:	683b      	ldr	r3, [r7, #0]
    8f42:	685a      	ldr	r2, [r3, #4]
    8f44:	687b      	ldr	r3, [r7, #4]
    8f46:	605a      	str	r2, [r3, #4]
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	0018      	movs	r0, r3
    8f4c:	46bd      	mov	sp, r7
    8f4e:	b002      	add	sp, #8
    8f50:	bd80      	pop	{r7, pc}
    8f52:	46c0      	nop			; (mov r8, r8)
    8f54:	000135c8 	.word	0x000135c8

00008f58 <_ZN6SdFileC1ERKS_>:
class SdFile : public Print {
    8f58:	b580      	push	{r7, lr}
    8f5a:	b082      	sub	sp, #8
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	6078      	str	r0, [r7, #4]
    8f60:	6039      	str	r1, [r7, #0]
    8f62:	687b      	ldr	r3, [r7, #4]
    8f64:	683a      	ldr	r2, [r7, #0]
    8f66:	0011      	movs	r1, r2
    8f68:	0018      	movs	r0, r3
    8f6a:	f7ff ffe1 	bl	8f30 <_ZN5PrintC1ERKS_>
    8f6e:	4a16      	ldr	r2, [pc, #88]	; (8fc8 <_ZN6SdFileC1ERKS_+0x70>)
    8f70:	687b      	ldr	r3, [r7, #4]
    8f72:	601a      	str	r2, [r3, #0]
    8f74:	683b      	ldr	r3, [r7, #0]
    8f76:	7a1a      	ldrb	r2, [r3, #8]
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	721a      	strb	r2, [r3, #8]
    8f7c:	683b      	ldr	r3, [r7, #0]
    8f7e:	7a5a      	ldrb	r2, [r3, #9]
    8f80:	687b      	ldr	r3, [r7, #4]
    8f82:	725a      	strb	r2, [r3, #9]
    8f84:	683b      	ldr	r3, [r7, #0]
    8f86:	68da      	ldr	r2, [r3, #12]
    8f88:	687b      	ldr	r3, [r7, #4]
    8f8a:	60da      	str	r2, [r3, #12]
    8f8c:	683b      	ldr	r3, [r7, #0]
    8f8e:	691a      	ldr	r2, [r3, #16]
    8f90:	687b      	ldr	r3, [r7, #4]
    8f92:	611a      	str	r2, [r3, #16]
    8f94:	683b      	ldr	r3, [r7, #0]
    8f96:	695a      	ldr	r2, [r3, #20]
    8f98:	687b      	ldr	r3, [r7, #4]
    8f9a:	615a      	str	r2, [r3, #20]
    8f9c:	683b      	ldr	r3, [r7, #0]
    8f9e:	7e1a      	ldrb	r2, [r3, #24]
    8fa0:	687b      	ldr	r3, [r7, #4]
    8fa2:	761a      	strb	r2, [r3, #24]
    8fa4:	683b      	ldr	r3, [r7, #0]
    8fa6:	69da      	ldr	r2, [r3, #28]
    8fa8:	687b      	ldr	r3, [r7, #4]
    8faa:	61da      	str	r2, [r3, #28]
    8fac:	683b      	ldr	r3, [r7, #0]
    8fae:	6a1a      	ldr	r2, [r3, #32]
    8fb0:	687b      	ldr	r3, [r7, #4]
    8fb2:	621a      	str	r2, [r3, #32]
    8fb4:	683b      	ldr	r3, [r7, #0]
    8fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8fb8:	687b      	ldr	r3, [r7, #4]
    8fba:	625a      	str	r2, [r3, #36]	; 0x24
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	0018      	movs	r0, r3
    8fc0:	46bd      	mov	sp, r7
    8fc2:	b002      	add	sp, #8
    8fc4:	bd80      	pop	{r7, pc}
    8fc6:	46c0      	nop			; (mov r8, r8)
    8fc8:	00013810 	.word	0x00013810

00008fcc <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
{
  root.close();
}

// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    8fcc:	b580      	push	{r7, lr}
    8fce:	b0a2      	sub	sp, #136	; 0x88
    8fd0:	af00      	add	r7, sp, #0
    8fd2:	60f8      	str	r0, [r7, #12]
    8fd4:	60b9      	str	r1, [r7, #8]
    8fd6:	607a      	str	r2, [r7, #4]
    8fd8:	603b      	str	r3, [r7, #0]
  // get parent directory
  SdFile d1;
    8fda:	234c      	movs	r3, #76	; 0x4c
    8fdc:	18fb      	adds	r3, r7, r3
    8fde:	0018      	movs	r0, r3
    8fe0:	f7ff fee6 	bl	8db0 <_ZN6SdFileC1Ev>
  SdFile d2;
    8fe4:	2324      	movs	r3, #36	; 0x24
    8fe6:	18fb      	adds	r3, r7, r3
    8fe8:	0018      	movs	r0, r3
    8fea:	f7ff fee1 	bl	8db0 <_ZN6SdFileC1Ev>

  d1.openRoot(volume); // start with the mostparent, root!
    8fee:	68bb      	ldr	r3, [r7, #8]
    8ff0:	3310      	adds	r3, #16
    8ff2:	001a      	movs	r2, r3
    8ff4:	234c      	movs	r3, #76	; 0x4c
    8ff6:	18fb      	adds	r3, r7, r3
    8ff8:	0011      	movs	r1, r2
    8ffa:	0018      	movs	r0, r3
    8ffc:	f7ff ff12 	bl	8e24 <_ZN6SdFile8openRootER8SdVolume>

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    9000:	234c      	movs	r3, #76	; 0x4c
    9002:	18fb      	adds	r3, r7, r3
    9004:	2284      	movs	r2, #132	; 0x84
    9006:	18ba      	adds	r2, r7, r2
    9008:	6013      	str	r3, [r2, #0]
  SdFile *subdir = &d2;
    900a:	2324      	movs	r3, #36	; 0x24
    900c:	18fb      	adds	r3, r7, r3
    900e:	2280      	movs	r2, #128	; 0x80
    9010:	18ba      	adds	r2, r7, r2
    9012:	6013      	str	r3, [r2, #0]
  
  const char *origpath = filepath;
    9014:	687b      	ldr	r3, [r7, #4]
    9016:	67bb      	str	r3, [r7, #120]	; 0x78

  while (strchr(filepath, '/')) {
    9018:	687b      	ldr	r3, [r7, #4]
    901a:	212f      	movs	r1, #47	; 0x2f
    901c:	0018      	movs	r0, r3
    901e:	f008 fb93 	bl	11748 <strchr>
    9022:	1e03      	subs	r3, r0, #0
    9024:	d06b      	beq.n	90fe <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x132>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    9026:	687b      	ldr	r3, [r7, #4]
    9028:	781b      	ldrb	r3, [r3, #0]
    902a:	2b2f      	cmp	r3, #47	; 0x2f
    902c:	d103      	bne.n	9036 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6a>
      filepath++;
    902e:	687b      	ldr	r3, [r7, #4]
    9030:	3301      	adds	r3, #1
    9032:	607b      	str	r3, [r7, #4]
    9034:	e7f0      	b.n	9018 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x4c>
      continue;
    }
    
    if (! strchr(filepath, '/')) {
    9036:	687b      	ldr	r3, [r7, #4]
    9038:	212f      	movs	r1, #47	; 0x2f
    903a:	0018      	movs	r0, r3
    903c:	f008 fb84 	bl	11748 <strchr>
    9040:	1e03      	subs	r3, r0, #0
    9042:	d05b      	beq.n	90fc <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x130>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    9044:	687b      	ldr	r3, [r7, #4]
    9046:	212f      	movs	r1, #47	; 0x2f
    9048:	0018      	movs	r0, r3
    904a:	f008 fb7d 	bl	11748 <strchr>
    904e:	0003      	movs	r3, r0
    9050:	001a      	movs	r2, r3
    9052:	687b      	ldr	r3, [r7, #4]
    9054:	1ad2      	subs	r2, r2, r3
    9056:	237f      	movs	r3, #127	; 0x7f
    9058:	18fb      	adds	r3, r7, r3
    905a:	701a      	strb	r2, [r3, #0]
    if (idx > 12)
    905c:	237f      	movs	r3, #127	; 0x7f
    905e:	18fb      	adds	r3, r7, r3
    9060:	781b      	ldrb	r3, [r3, #0]
    9062:	2b0c      	cmp	r3, #12
    9064:	dd03      	ble.n	906e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa2>
      idx = 12;    // dont let them specify long names
    9066:	237f      	movs	r3, #127	; 0x7f
    9068:	18fb      	adds	r3, r7, r3
    906a:	220c      	movs	r2, #12
    906c:	701a      	strb	r2, [r3, #0]
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    906e:	237f      	movs	r3, #127	; 0x7f
    9070:	18fb      	adds	r3, r7, r3
    9072:	781a      	ldrb	r2, [r3, #0]
    9074:	6879      	ldr	r1, [r7, #4]
    9076:	2314      	movs	r3, #20
    9078:	18fb      	adds	r3, r7, r3
    907a:	0018      	movs	r0, r3
    907c:	f008 fb81 	bl	11782 <strncpy>
    subdirname[idx] = 0;
    9080:	237f      	movs	r3, #127	; 0x7f
    9082:	18fb      	adds	r3, r7, r3
    9084:	781b      	ldrb	r3, [r3, #0]
    9086:	2214      	movs	r2, #20
    9088:	18ba      	adds	r2, r7, r2
    908a:	2100      	movs	r1, #0
    908c:	54d1      	strb	r1, [r2, r3]

    // close the subdir (we reuse them) if open
    subdir->close();
    908e:	2380      	movs	r3, #128	; 0x80
    9090:	18fb      	adds	r3, r7, r3
    9092:	681b      	ldr	r3, [r3, #0]
    9094:	0018      	movs	r0, r3
    9096:	f001 f827 	bl	a0e8 <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    909a:	2314      	movs	r3, #20
    909c:	18fa      	adds	r2, r7, r3
    909e:	2384      	movs	r3, #132	; 0x84
    90a0:	18fb      	adds	r3, r7, r3
    90a2:	6819      	ldr	r1, [r3, #0]
    90a4:	2380      	movs	r3, #128	; 0x80
    90a6:	18fb      	adds	r3, r7, r3
    90a8:	6818      	ldr	r0, [r3, #0]
    90aa:	2301      	movs	r3, #1
    90ac:	f001 f8de 	bl	a26c <_ZN6SdFile4openEPS_PKch>
    90b0:	0003      	movs	r3, r0
    90b2:	425a      	negs	r2, r3
    90b4:	4153      	adcs	r3, r2
    90b6:	b2db      	uxtb	r3, r3
    90b8:	2b00      	cmp	r3, #0
    90ba:	d004      	beq.n	90c6 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xfa>
      // failed to open one of the subdirectories
      return SdFile();
    90bc:	68fb      	ldr	r3, [r7, #12]
    90be:	0018      	movs	r0, r3
    90c0:	f7ff fe76 	bl	8db0 <_ZN6SdFileC1Ev>
    90c4:	e028      	b.n	9118 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x14c>
    }
    // move forward to the next subdirectory
    filepath += idx;
    90c6:	237f      	movs	r3, #127	; 0x7f
    90c8:	18fb      	adds	r3, r7, r3
    90ca:	781b      	ldrb	r3, [r3, #0]
    90cc:	687a      	ldr	r2, [r7, #4]
    90ce:	18d3      	adds	r3, r2, r3
    90d0:	607b      	str	r3, [r7, #4]

    // we reuse the objects, close it.
    parent->close();
    90d2:	2384      	movs	r3, #132	; 0x84
    90d4:	18fb      	adds	r3, r7, r3
    90d6:	681b      	ldr	r3, [r3, #0]
    90d8:	0018      	movs	r0, r3
    90da:	f001 f805 	bl	a0e8 <_ZN6SdFile5closeEv>

    // swap the pointers
    SdFile *t = parent;
    90de:	2384      	movs	r3, #132	; 0x84
    90e0:	18fb      	adds	r3, r7, r3
    90e2:	681b      	ldr	r3, [r3, #0]
    90e4:	677b      	str	r3, [r7, #116]	; 0x74
    parent = subdir;
    90e6:	2380      	movs	r3, #128	; 0x80
    90e8:	18fb      	adds	r3, r7, r3
    90ea:	681b      	ldr	r3, [r3, #0]
    90ec:	2284      	movs	r2, #132	; 0x84
    90ee:	18ba      	adds	r2, r7, r2
    90f0:	6013      	str	r3, [r2, #0]
    subdir = t;
    90f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    90f4:	2280      	movs	r2, #128	; 0x80
    90f6:	18ba      	adds	r2, r7, r2
    90f8:	6013      	str	r3, [r2, #0]
  while (strchr(filepath, '/')) {
    90fa:	e78d      	b.n	9018 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x4c>
      break;
    90fc:	46c0      	nop			; (mov r8, r8)
  }

  *index = (int)(filepath - origpath);
    90fe:	687a      	ldr	r2, [r7, #4]
    9100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    9102:	1ad2      	subs	r2, r2, r3
    9104:	683b      	ldr	r3, [r7, #0]
    9106:	601a      	str	r2, [r3, #0]
  // parent is now the parent diretory of the file!
  return *parent;
    9108:	2384      	movs	r3, #132	; 0x84
    910a:	18fb      	adds	r3, r7, r3
    910c:	681a      	ldr	r2, [r3, #0]
    910e:	68fb      	ldr	r3, [r7, #12]
    9110:	0011      	movs	r1, r2
    9112:	0018      	movs	r0, r3
    9114:	f7ff ff20 	bl	8f58 <_ZN6SdFileC1ERKS_>
}
    9118:	68f8      	ldr	r0, [r7, #12]
    911a:	46bd      	mov	sp, r7
    911c:	b022      	add	sp, #136	; 0x88
    911e:	bd80      	pop	{r7, pc}

00009120 <_ZN5SDLib7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    9120:	b580      	push	{r7, lr}
    9122:	b0ae      	sub	sp, #184	; 0xb8
    9124:	af00      	add	r7, sp, #0
    9126:	60f8      	str	r0, [r7, #12]
    9128:	60b9      	str	r1, [r7, #8]
    912a:	607a      	str	r2, [r7, #4]
    912c:	001a      	movs	r2, r3
    912e:	1cfb      	adds	r3, r7, #3
    9130:	701a      	strb	r2, [r3, #0]
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    9132:	233c      	movs	r3, #60	; 0x3c
    9134:	18f8      	adds	r0, r7, r3
    9136:	2364      	movs	r3, #100	; 0x64
    9138:	18fb      	adds	r3, r7, r3
    913a:	687a      	ldr	r2, [r7, #4]
    913c:	68b9      	ldr	r1, [r7, #8]
    913e:	f7ff ff45 	bl	8fcc <_ZN5SDLib7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    9142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9144:	001a      	movs	r2, r3
    9146:	687b      	ldr	r3, [r7, #4]
    9148:	189b      	adds	r3, r3, r2
    914a:	607b      	str	r3, [r7, #4]

  if (! filepath[0]) {
    914c:	687b      	ldr	r3, [r7, #4]
    914e:	781b      	ldrb	r3, [r3, #0]
    9150:	2b00      	cmp	r3, #0
    9152:	d10f      	bne.n	9174 <_ZN5SDLib7SDClass4openEPKch+0x54>
    // it was the directory itself!
    return File(parentdir, "/");
    9154:	233c      	movs	r3, #60	; 0x3c
    9156:	18fa      	adds	r2, r7, r3
    9158:	2368      	movs	r3, #104	; 0x68
    915a:	18fb      	adds	r3, r7, r3
    915c:	0011      	movs	r1, r2
    915e:	0018      	movs	r0, r3
    9160:	f7ff fefa 	bl	8f58 <_ZN6SdFileC1ERKS_>
    9164:	4a2d      	ldr	r2, [pc, #180]	; (921c <_ZN5SDLib7SDClass4openEPKch+0xfc>)
    9166:	2368      	movs	r3, #104	; 0x68
    9168:	18f9      	adds	r1, r7, r3
    916a:	68fb      	ldr	r3, [r7, #12]
    916c:	0018      	movs	r0, r3
    916e:	f7ff fc7f 	bl	8a70 <_ZN5SDLib4FileC1E6SdFilePKc>
    9172:	e04e      	b.n	9212 <_ZN5SDLib7SDClass4openEPKch+0xf2>
  }

  // Open the file itself
  SdFile file;
    9174:	2314      	movs	r3, #20
    9176:	18fb      	adds	r3, r7, r3
    9178:	0018      	movs	r0, r3
    917a:	f7ff fe19 	bl	8db0 <_ZN6SdFileC1Ev>

  // failed to open a subdir!
  if (!parentdir.isOpen())
    917e:	233c      	movs	r3, #60	; 0x3c
    9180:	18fb      	adds	r3, r7, r3
    9182:	0018      	movs	r0, r3
    9184:	f7ff fc3b 	bl	89fe <_ZNK6SdFile6isOpenEv>
    9188:	0003      	movs	r3, r0
    918a:	425a      	negs	r2, r3
    918c:	4153      	adcs	r3, r2
    918e:	b2db      	uxtb	r3, r3
    9190:	2b00      	cmp	r3, #0
    9192:	d004      	beq.n	919e <_ZN5SDLib7SDClass4openEPKch+0x7e>
    return File();
    9194:	68fb      	ldr	r3, [r7, #12]
    9196:	0018      	movs	r0, r3
    9198:	f7ff fc9a 	bl	8ad0 <_ZN5SDLib4FileC1Ev>
    919c:	e039      	b.n	9212 <_ZN5SDLib7SDClass4openEPKch+0xf2>

  if ( ! file.open(parentdir, filepath, mode)) {
    919e:	1cfb      	adds	r3, r7, #3
    91a0:	781b      	ldrb	r3, [r3, #0]
    91a2:	687a      	ldr	r2, [r7, #4]
    91a4:	213c      	movs	r1, #60	; 0x3c
    91a6:	1879      	adds	r1, r7, r1
    91a8:	2014      	movs	r0, #20
    91aa:	1838      	adds	r0, r7, r0
    91ac:	f7ff fe25 	bl	8dfa <_ZN6SdFile4openERS_PKch>
    91b0:	0003      	movs	r3, r0
    91b2:	425a      	negs	r2, r3
    91b4:	4153      	adcs	r3, r2
    91b6:	b2db      	uxtb	r3, r3
    91b8:	2b00      	cmp	r3, #0
    91ba:	d004      	beq.n	91c6 <_ZN5SDLib7SDClass4openEPKch+0xa6>
    return File();
    91bc:	68fb      	ldr	r3, [r7, #12]
    91be:	0018      	movs	r0, r3
    91c0:	f7ff fc86 	bl	8ad0 <_ZN5SDLib4FileC1Ev>
    91c4:	e025      	b.n	9212 <_ZN5SDLib7SDClass4openEPKch+0xf2>
  }
  // close the parent
  parentdir.close();
    91c6:	233c      	movs	r3, #60	; 0x3c
    91c8:	18fb      	adds	r3, r7, r3
    91ca:	0018      	movs	r0, r3
    91cc:	f000 ff8c 	bl	a0e8 <_ZN6SdFile5closeEv>

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    91d0:	1cfb      	adds	r3, r7, #3
    91d2:	781b      	ldrb	r3, [r3, #0]
    91d4:	2206      	movs	r2, #6
    91d6:	4013      	ands	r3, r2
    91d8:	2b06      	cmp	r3, #6
    91da:	d10b      	bne.n	91f4 <_ZN5SDLib7SDClass4openEPKch+0xd4>
    file.seekSet(file.fileSize());
    91dc:	2314      	movs	r3, #20
    91de:	18fb      	adds	r3, r7, r3
    91e0:	0018      	movs	r0, r3
    91e2:	f7ff fbf2 	bl	89ca <_ZNK6SdFile8fileSizeEv>
    91e6:	0002      	movs	r2, r0
    91e8:	2314      	movs	r3, #20
    91ea:	18fb      	adds	r3, r7, r3
    91ec:	0011      	movs	r1, r2
    91ee:	0018      	movs	r0, r3
    91f0:	f001 fbfa 	bl	a9e8 <_ZN6SdFile7seekSetEm>
  return File(file, filepath);
    91f4:	2314      	movs	r3, #20
    91f6:	18fa      	adds	r2, r7, r3
    91f8:	2390      	movs	r3, #144	; 0x90
    91fa:	18fb      	adds	r3, r7, r3
    91fc:	0011      	movs	r1, r2
    91fe:	0018      	movs	r0, r3
    9200:	f7ff feaa 	bl	8f58 <_ZN6SdFileC1ERKS_>
    9204:	687a      	ldr	r2, [r7, #4]
    9206:	2390      	movs	r3, #144	; 0x90
    9208:	18f9      	adds	r1, r7, r3
    920a:	68fb      	ldr	r3, [r7, #12]
    920c:	0018      	movs	r0, r3
    920e:	f7ff fc2f 	bl	8a70 <_ZN5SDLib4FileC1E6SdFilePKc>
}
    9212:	68f8      	ldr	r0, [r7, #12]
    9214:	46bd      	mov	sp, r7
    9216:	b02e      	add	sp, #184	; 0xb8
    9218:	bd80      	pop	{r7, pc}
    921a:	46c0      	nop			; (mov r8, r8)
    921c:	000137dc 	.word	0x000137dc

00009220 <_ZN5SDLib7SDClassC1Ev>:
  void rewindDirectory(void);
  
  using Print::write;
};

class SDClass {
    9220:	b580      	push	{r7, lr}
    9222:	b082      	sub	sp, #8
    9224:	af00      	add	r7, sp, #0
    9226:	6078      	str	r0, [r7, #4]
    9228:	687b      	ldr	r3, [r7, #4]
    922a:	0018      	movs	r0, r3
    922c:	f7ff fdaa 	bl	8d84 <_ZN7Sd2CardC1Ev>
    9230:	687b      	ldr	r3, [r7, #4]
    9232:	3310      	adds	r3, #16
    9234:	0018      	movs	r0, r3
    9236:	f7ff fe05 	bl	8e44 <_ZN8SdVolumeC1Ev>
    923a:	687b      	ldr	r3, [r7, #4]
    923c:	3338      	adds	r3, #56	; 0x38
    923e:	0018      	movs	r0, r3
    9240:	f7ff fdb6 	bl	8db0 <_ZN6SdFileC1Ev>
    9244:	687b      	ldr	r3, [r7, #4]
    9246:	0018      	movs	r0, r3
    9248:	46bd      	mov	sp, r7
    924a:	b002      	add	sp, #8
    924c:	bd80      	pop	{r7, pc}
	...

00009250 <_Z41__static_initialization_and_destruction_0ii>:
    _file->rewind();
}

SDClass SD;

};
    9250:	b580      	push	{r7, lr}
    9252:	b082      	sub	sp, #8
    9254:	af00      	add	r7, sp, #0
    9256:	6078      	str	r0, [r7, #4]
    9258:	6039      	str	r1, [r7, #0]
    925a:	687b      	ldr	r3, [r7, #4]
    925c:	2b01      	cmp	r3, #1
    925e:	d107      	bne.n	9270 <_Z41__static_initialization_and_destruction_0ii+0x20>
    9260:	683b      	ldr	r3, [r7, #0]
    9262:	4a05      	ldr	r2, [pc, #20]	; (9278 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    9264:	4293      	cmp	r3, r2
    9266:	d103      	bne.n	9270 <_Z41__static_initialization_and_destruction_0ii+0x20>
SDClass SD;
    9268:	4b04      	ldr	r3, [pc, #16]	; (927c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    926a:	0018      	movs	r0, r3
    926c:	f7ff ffd8 	bl	9220 <_ZN5SDLib7SDClassC1Ev>
};
    9270:	46c0      	nop			; (mov r8, r8)
    9272:	46bd      	mov	sp, r7
    9274:	b002      	add	sp, #8
    9276:	bd80      	pop	{r7, pc}
    9278:	0000ffff 	.word	0x0000ffff
    927c:	200008f4 	.word	0x200008f4

00009280 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
    9280:	b580      	push	{r7, lr}
    9282:	af00      	add	r7, sp, #0
    9284:	4b03      	ldr	r3, [pc, #12]	; (9294 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x14>)
    9286:	0019      	movs	r1, r3
    9288:	2001      	movs	r0, #1
    928a:	f7ff ffe1 	bl	9250 <_Z41__static_initialization_and_destruction_0ii>
    928e:	46bd      	mov	sp, r7
    9290:	bd80      	pop	{r7, pc}
    9292:	46c0      	nop			; (mov r8, r8)
    9294:	0000ffff 	.word	0x0000ffff

00009298 <_ZNK7Sd2Card4typeEv>:
  uint8_t setSckRate(uint8_t sckRateID);
#ifdef USE_SPI_LIB
  uint8_t setSpiClock(uint32_t clock);
#endif
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t type(void) const {return type_;}
    9298:	b580      	push	{r7, lr}
    929a:	b082      	sub	sp, #8
    929c:	af00      	add	r7, sp, #0
    929e:	6078      	str	r0, [r7, #4]
    92a0:	687b      	ldr	r3, [r7, #4]
    92a2:	7b1b      	ldrb	r3, [r3, #12]
    92a4:	0018      	movs	r0, r3
    92a6:	46bd      	mov	sp, r7
    92a8:	b002      	add	sp, #8
    92aa:	bd80      	pop	{r7, pc}

000092ac <_ZN7Sd2Card8cardAcmdEhm>:
  uint16_t offset_;
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    92ac:	b580      	push	{r7, lr}
    92ae:	b084      	sub	sp, #16
    92b0:	af00      	add	r7, sp, #0
    92b2:	60f8      	str	r0, [r7, #12]
    92b4:	607a      	str	r2, [r7, #4]
    92b6:	230b      	movs	r3, #11
    92b8:	18fb      	adds	r3, r7, r3
    92ba:	1c0a      	adds	r2, r1, #0
    92bc:	701a      	strb	r2, [r3, #0]
    cardCommand(CMD55, 0);
    92be:	68fb      	ldr	r3, [r7, #12]
    92c0:	2200      	movs	r2, #0
    92c2:	2137      	movs	r1, #55	; 0x37
    92c4:	0018      	movs	r0, r3
    92c6:	f000 f899 	bl	93fc <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    92ca:	687a      	ldr	r2, [r7, #4]
    92cc:	230b      	movs	r3, #11
    92ce:	18fb      	adds	r3, r7, r3
    92d0:	7819      	ldrb	r1, [r3, #0]
    92d2:	68fb      	ldr	r3, [r7, #12]
    92d4:	0018      	movs	r0, r3
    92d6:	f000 f891 	bl	93fc <_ZN7Sd2Card11cardCommandEhm>
    92da:	0003      	movs	r3, r0
  }
    92dc:	0018      	movs	r0, r3
    92de:	46bd      	mov	sp, r7
    92e0:	b004      	add	sp, #16
    92e2:	bd80      	pop	{r7, pc}

000092e4 <_ZN7Sd2Card5errorEh>:
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    92e4:	b580      	push	{r7, lr}
    92e6:	b082      	sub	sp, #8
    92e8:	af00      	add	r7, sp, #0
    92ea:	6078      	str	r0, [r7, #4]
    92ec:	000a      	movs	r2, r1
    92ee:	1cfb      	adds	r3, r7, #3
    92f0:	701a      	strb	r2, [r3, #0]
    92f2:	687b      	ldr	r3, [r7, #4]
    92f4:	1cfa      	adds	r2, r7, #3
    92f6:	7812      	ldrb	r2, [r2, #0]
    92f8:	715a      	strb	r2, [r3, #5]
    92fa:	46c0      	nop			; (mov r8, r8)
    92fc:	46bd      	mov	sp, r7
    92fe:	b002      	add	sp, #8
    9300:	bd80      	pop	{r7, pc}

00009302 <_ZN7Sd2Card4typeEh>:
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    9302:	b580      	push	{r7, lr}
    9304:	b082      	sub	sp, #8
    9306:	af00      	add	r7, sp, #0
    9308:	6078      	str	r0, [r7, #4]
    930a:	000a      	movs	r2, r1
    930c:	1cfb      	adds	r3, r7, #3
    930e:	701a      	strb	r2, [r3, #0]
    9310:	687b      	ldr	r3, [r7, #4]
    9312:	1cfa      	adds	r2, r7, #3
    9314:	7812      	ldrb	r2, [r2, #0]
    9316:	731a      	strb	r2, [r3, #12]
    9318:	46c0      	nop			; (mov r8, r8)
    931a:	46bd      	mov	sp, r7
    931c:	b002      	add	sp, #8
    931e:	bd80      	pop	{r7, pc}

00009320 <_ZN11SPISettingsC1Ev>:
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }
    9320:	b580      	push	{r7, lr}
    9322:	b086      	sub	sp, #24
    9324:	af00      	add	r7, sp, #0
    9326:	6078      	str	r0, [r7, #4]
    9328:	687b      	ldr	r3, [r7, #4]
    932a:	617b      	str	r3, [r7, #20]
    932c:	4b20      	ldr	r3, [pc, #128]	; (93b0 <_ZN11SPISettingsC1Ev+0x90>)
    932e:	613b      	str	r3, [r7, #16]
    9330:	230f      	movs	r3, #15
    9332:	18fb      	adds	r3, r7, r3
    9334:	2201      	movs	r2, #1
    9336:	701a      	strb	r2, [r3, #0]
    9338:	230e      	movs	r3, #14
    933a:	18fb      	adds	r3, r7, r3
    933c:	2202      	movs	r2, #2
    933e:	701a      	strb	r2, [r3, #0]
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    9340:	693b      	ldr	r3, [r7, #16]
    9342:	4a1c      	ldr	r2, [pc, #112]	; (93b4 <_ZN11SPISettingsC1Ev+0x94>)
    9344:	4293      	cmp	r3, r2
    9346:	d900      	bls.n	934a <_ZN11SPISettingsC1Ev+0x2a>
    9348:	4b1a      	ldr	r3, [pc, #104]	; (93b4 <_ZN11SPISettingsC1Ev+0x94>)
    934a:	697a      	ldr	r2, [r7, #20]
    934c:	6013      	str	r3, [r2, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    934e:	230f      	movs	r3, #15
    9350:	18fb      	adds	r3, r7, r3
    9352:	781b      	ldrb	r3, [r3, #0]
    9354:	2b01      	cmp	r3, #1
    9356:	d101      	bne.n	935c <_ZN11SPISettingsC1Ev+0x3c>
    9358:	2200      	movs	r2, #0
    935a:	e000      	b.n	935e <_ZN11SPISettingsC1Ev+0x3e>
    935c:	2201      	movs	r2, #1
    935e:	697b      	ldr	r3, [r7, #20]
    9360:	715a      	strb	r2, [r3, #5]
    switch (dataMode)
    9362:	230e      	movs	r3, #14
    9364:	18fb      	adds	r3, r7, r3
    9366:	781b      	ldrb	r3, [r3, #0]
    9368:	2b01      	cmp	r3, #1
    936a:	d014      	beq.n	9396 <_ZN11SPISettingsC1Ev+0x76>
    936c:	dc02      	bgt.n	9374 <_ZN11SPISettingsC1Ev+0x54>
    936e:	2b00      	cmp	r3, #0
    9370:	d009      	beq.n	9386 <_ZN11SPISettingsC1Ev+0x66>
    9372:	e014      	b.n	939e <_ZN11SPISettingsC1Ev+0x7e>
    9374:	2b02      	cmp	r3, #2
    9376:	d002      	beq.n	937e <_ZN11SPISettingsC1Ev+0x5e>
    9378:	2b03      	cmp	r3, #3
    937a:	d008      	beq.n	938e <_ZN11SPISettingsC1Ev+0x6e>
    937c:	e00f      	b.n	939e <_ZN11SPISettingsC1Ev+0x7e>
        this->dataMode = SERCOM_SPI_MODE_0; break;
    937e:	697b      	ldr	r3, [r7, #20]
    9380:	2200      	movs	r2, #0
    9382:	711a      	strb	r2, [r3, #4]
    9384:	e00e      	b.n	93a4 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_1; break;
    9386:	697b      	ldr	r3, [r7, #20]
    9388:	2201      	movs	r2, #1
    938a:	711a      	strb	r2, [r3, #4]
    938c:	e00a      	b.n	93a4 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_2; break;
    938e:	697b      	ldr	r3, [r7, #20]
    9390:	2202      	movs	r2, #2
    9392:	711a      	strb	r2, [r3, #4]
    9394:	e006      	b.n	93a4 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_3; break;
    9396:	697b      	ldr	r3, [r7, #20]
    9398:	2203      	movs	r2, #3
    939a:	711a      	strb	r2, [r3, #4]
    939c:	e002      	b.n	93a4 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_0; break;
    939e:	697b      	ldr	r3, [r7, #20]
    93a0:	2200      	movs	r2, #0
    93a2:	711a      	strb	r2, [r3, #4]
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	0018      	movs	r0, r3
    93a8:	46bd      	mov	sp, r7
    93aa:	b006      	add	sp, #24
    93ac:	bd80      	pop	{r7, pc}
    93ae:	46c0      	nop			; (mov r8, r8)
    93b0:	003d0900 	.word	0x003d0900
    93b4:	00b71b00 	.word	0x00b71b00

000093b8 <_ZL7spiSendh>:
#include <SPI.h>
static SPISettings settings;
#endif
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
    93b8:	b580      	push	{r7, lr}
    93ba:	b082      	sub	sp, #8
    93bc:	af00      	add	r7, sp, #0
    93be:	0002      	movs	r2, r0
    93c0:	1dfb      	adds	r3, r7, #7
    93c2:	701a      	strb	r2, [r3, #0]
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SDCARD_SPI.transfer(b);
    93c4:	1dfb      	adds	r3, r7, #7
    93c6:	781a      	ldrb	r2, [r3, #0]
    93c8:	4b04      	ldr	r3, [pc, #16]	; (93dc <_ZL7spiSendh+0x24>)
    93ca:	0011      	movs	r1, r2
    93cc:	0018      	movs	r0, r3
    93ce:	f002 fb8f 	bl	baf0 <_ZN8SPIClass8transferEh>
#endif
}
    93d2:	46c0      	nop			; (mov r8, r8)
    93d4:	46bd      	mov	sp, r7
    93d6:	b002      	add	sp, #8
    93d8:	bd80      	pop	{r7, pc}
    93da:	46c0      	nop			; (mov r8, r8)
    93dc:	20000b7c 	.word	0x20000b7c

000093e0 <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
    93e0:	b580      	push	{r7, lr}
    93e2:	af00      	add	r7, sp, #0
#ifndef USE_SPI_LIB
  spiSend(0XFF);
  return SPDR;
#else
  return SDCARD_SPI.transfer(0xFF);
    93e4:	4b04      	ldr	r3, [pc, #16]	; (93f8 <_ZL6spiRecv+0x18>)
    93e6:	21ff      	movs	r1, #255	; 0xff
    93e8:	0018      	movs	r0, r3
    93ea:	f002 fb81 	bl	baf0 <_ZN8SPIClass8transferEh>
    93ee:	0003      	movs	r3, r0
#endif
}
    93f0:	0018      	movs	r0, r3
    93f2:	46bd      	mov	sp, r7
    93f4:	bd80      	pop	{r7, pc}
    93f6:	46c0      	nop			; (mov r8, r8)
    93f8:	20000b7c 	.word	0x20000b7c

000093fc <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    93fc:	b580      	push	{r7, lr}
    93fe:	b086      	sub	sp, #24
    9400:	af00      	add	r7, sp, #0
    9402:	60f8      	str	r0, [r7, #12]
    9404:	607a      	str	r2, [r7, #4]
    9406:	230b      	movs	r3, #11
    9408:	18fb      	adds	r3, r7, r3
    940a:	1c0a      	adds	r2, r1, #0
    940c:	701a      	strb	r2, [r3, #0]
  // end read if in partialBlockRead mode
  readEnd();
    940e:	68fb      	ldr	r3, [r7, #12]
    9410:	0018      	movs	r0, r3
    9412:	f000 fac9 	bl	99a8 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
    9416:	68fb      	ldr	r3, [r7, #12]
    9418:	0018      	movs	r0, r3
    941a:	f000 f88f 	bl	953c <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    941e:	2396      	movs	r3, #150	; 0x96
    9420:	005a      	lsls	r2, r3, #1
    9422:	68fb      	ldr	r3, [r7, #12]
    9424:	0011      	movs	r1, r2
    9426:	0018      	movs	r0, r3
    9428:	f000 fb80 	bl	9b2c <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
    942c:	230b      	movs	r3, #11
    942e:	18fb      	adds	r3, r7, r3
    9430:	781b      	ldrb	r3, [r3, #0]
    9432:	2240      	movs	r2, #64	; 0x40
    9434:	4313      	orrs	r3, r2
    9436:	b2db      	uxtb	r3, r3
    9438:	0018      	movs	r0, r3
    943a:	f7ff ffbd 	bl	93b8 <_ZL7spiSendh>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    943e:	2317      	movs	r3, #23
    9440:	18fb      	adds	r3, r7, r3
    9442:	2218      	movs	r2, #24
    9444:	701a      	strb	r2, [r3, #0]
    9446:	2317      	movs	r3, #23
    9448:	18fb      	adds	r3, r7, r3
    944a:	781b      	ldrb	r3, [r3, #0]
    944c:	2b7f      	cmp	r3, #127	; 0x7f
    944e:	d813      	bhi.n	9478 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    9450:	2317      	movs	r3, #23
    9452:	18fb      	adds	r3, r7, r3
    9454:	781b      	ldrb	r3, [r3, #0]
    9456:	b25b      	sxtb	r3, r3
    9458:	687a      	ldr	r2, [r7, #4]
    945a:	40da      	lsrs	r2, r3
    945c:	0013      	movs	r3, r2
    945e:	b2db      	uxtb	r3, r3
    9460:	0018      	movs	r0, r3
    9462:	f7ff ffa9 	bl	93b8 <_ZL7spiSendh>
    9466:	2317      	movs	r3, #23
    9468:	18fb      	adds	r3, r7, r3
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	3b08      	subs	r3, #8
    946e:	b2da      	uxtb	r2, r3
    9470:	2317      	movs	r3, #23
    9472:	18fb      	adds	r3, r7, r3
    9474:	701a      	strb	r2, [r3, #0]
    9476:	e7e6      	b.n	9446 <_ZN7Sd2Card11cardCommandEhm+0x4a>

  // send CRC
  uint8_t crc = 0XFF;
    9478:	2316      	movs	r3, #22
    947a:	18fb      	adds	r3, r7, r3
    947c:	22ff      	movs	r2, #255	; 0xff
    947e:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    9480:	230b      	movs	r3, #11
    9482:	18fb      	adds	r3, r7, r3
    9484:	781b      	ldrb	r3, [r3, #0]
    9486:	2b00      	cmp	r3, #0
    9488:	d103      	bne.n	9492 <_ZN7Sd2Card11cardCommandEhm+0x96>
    948a:	2316      	movs	r3, #22
    948c:	18fb      	adds	r3, r7, r3
    948e:	2295      	movs	r2, #149	; 0x95
    9490:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    9492:	230b      	movs	r3, #11
    9494:	18fb      	adds	r3, r7, r3
    9496:	781b      	ldrb	r3, [r3, #0]
    9498:	2b08      	cmp	r3, #8
    949a:	d103      	bne.n	94a4 <_ZN7Sd2Card11cardCommandEhm+0xa8>
    949c:	2316      	movs	r3, #22
    949e:	18fb      	adds	r3, r7, r3
    94a0:	2287      	movs	r2, #135	; 0x87
    94a2:	701a      	strb	r2, [r3, #0]
  spiSend(crc);
    94a4:	2316      	movs	r3, #22
    94a6:	18fb      	adds	r3, r7, r3
    94a8:	781b      	ldrb	r3, [r3, #0]
    94aa:	0018      	movs	r0, r3
    94ac:	f7ff ff84 	bl	93b8 <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    94b0:	2315      	movs	r3, #21
    94b2:	18fb      	adds	r3, r7, r3
    94b4:	2200      	movs	r2, #0
    94b6:	701a      	strb	r2, [r3, #0]
    94b8:	f7ff ff92 	bl	93e0 <_ZL6spiRecv>
    94bc:	0003      	movs	r3, r0
    94be:	001a      	movs	r2, r3
    94c0:	68fb      	ldr	r3, [r7, #12]
    94c2:	72da      	strb	r2, [r3, #11]
    94c4:	68fb      	ldr	r3, [r7, #12]
    94c6:	7adb      	ldrb	r3, [r3, #11]
    94c8:	b25b      	sxtb	r3, r3
    94ca:	2b00      	cmp	r3, #0
    94cc:	da06      	bge.n	94dc <_ZN7Sd2Card11cardCommandEhm+0xe0>
    94ce:	2315      	movs	r3, #21
    94d0:	18fb      	adds	r3, r7, r3
    94d2:	781b      	ldrb	r3, [r3, #0]
    94d4:	2bff      	cmp	r3, #255	; 0xff
    94d6:	d001      	beq.n	94dc <_ZN7Sd2Card11cardCommandEhm+0xe0>
    94d8:	2301      	movs	r3, #1
    94da:	e000      	b.n	94de <_ZN7Sd2Card11cardCommandEhm+0xe2>
    94dc:	2300      	movs	r3, #0
    94de:	2b00      	cmp	r3, #0
    94e0:	d007      	beq.n	94f2 <_ZN7Sd2Card11cardCommandEhm+0xf6>
    94e2:	2315      	movs	r3, #21
    94e4:	18fb      	adds	r3, r7, r3
    94e6:	781a      	ldrb	r2, [r3, #0]
    94e8:	2315      	movs	r3, #21
    94ea:	18fb      	adds	r3, r7, r3
    94ec:	3201      	adds	r2, #1
    94ee:	701a      	strb	r2, [r3, #0]
    94f0:	e7e2      	b.n	94b8 <_ZN7Sd2Card11cardCommandEhm+0xbc>
    ;
  return status_;
    94f2:	68fb      	ldr	r3, [r7, #12]
    94f4:	7adb      	ldrb	r3, [r3, #11]
}
    94f6:	0018      	movs	r0, r3
    94f8:	46bd      	mov	sp, r7
    94fa:	b006      	add	sp, #24
    94fc:	bd80      	pop	{r7, pc}
	...

00009500 <_ZN7Sd2Card14chipSelectHighEv>:
  }
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
    9500:	b580      	push	{r7, lr}
    9502:	b082      	sub	sp, #8
    9504:	af00      	add	r7, sp, #0
    9506:	6078      	str	r0, [r7, #4]
  digitalWrite(chipSelectPin_, HIGH);
    9508:	687b      	ldr	r3, [r7, #4]
    950a:	791b      	ldrb	r3, [r3, #4]
    950c:	2101      	movs	r1, #1
    950e:	0018      	movs	r0, r3
    9510:	f7fd fbd4 	bl	6cbc <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    9514:	4b07      	ldr	r3, [pc, #28]	; (9534 <_ZN7Sd2Card14chipSelectHighEv+0x34>)
    9516:	781b      	ldrb	r3, [r3, #0]
    9518:	2b00      	cmp	r3, #0
    951a:	d006      	beq.n	952a <_ZN7Sd2Card14chipSelectHighEv+0x2a>
    chip_select_asserted = 0;
    951c:	4b05      	ldr	r3, [pc, #20]	; (9534 <_ZN7Sd2Card14chipSelectHighEv+0x34>)
    951e:	2200      	movs	r2, #0
    9520:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.endTransaction();
    9522:	4b05      	ldr	r3, [pc, #20]	; (9538 <_ZN7Sd2Card14chipSelectHighEv+0x38>)
    9524:	0018      	movs	r0, r3
    9526:	f002 fabd 	bl	baa4 <_ZN8SPIClass14endTransactionEv>
  }
#endif
}
    952a:	46c0      	nop			; (mov r8, r8)
    952c:	46bd      	mov	sp, r7
    952e:	b002      	add	sp, #8
    9530:	bd80      	pop	{r7, pc}
    9532:	46c0      	nop			; (mov r8, r8)
    9534:	20000960 	.word	0x20000960
    9538:	20000b7c 	.word	0x20000b7c

0000953c <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    953c:	b580      	push	{r7, lr}
    953e:	b082      	sub	sp, #8
    9540:	af00      	add	r7, sp, #0
    9542:	6078      	str	r0, [r7, #4]
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    9544:	4b0b      	ldr	r3, [pc, #44]	; (9574 <_ZN7Sd2Card13chipSelectLowEv+0x38>)
    9546:	781b      	ldrb	r3, [r3, #0]
    9548:	2b00      	cmp	r3, #0
    954a:	d108      	bne.n	955e <_ZN7Sd2Card13chipSelectLowEv+0x22>
    chip_select_asserted = 1;
    954c:	4b09      	ldr	r3, [pc, #36]	; (9574 <_ZN7Sd2Card13chipSelectLowEv+0x38>)
    954e:	2201      	movs	r2, #1
    9550:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.beginTransaction(settings);
    9552:	4b09      	ldr	r3, [pc, #36]	; (9578 <_ZN7Sd2Card13chipSelectLowEv+0x3c>)
    9554:	4809      	ldr	r0, [pc, #36]	; (957c <_ZN7Sd2Card13chipSelectLowEv+0x40>)
    9556:	6819      	ldr	r1, [r3, #0]
    9558:	685a      	ldr	r2, [r3, #4]
    955a:	f002 fa6d 	bl	ba38 <_ZN8SPIClass16beginTransactionE11SPISettings>
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    955e:	687b      	ldr	r3, [r7, #4]
    9560:	791b      	ldrb	r3, [r3, #4]
    9562:	2100      	movs	r1, #0
    9564:	0018      	movs	r0, r3
    9566:	f7fd fba9 	bl	6cbc <digitalWrite>
}
    956a:	46c0      	nop			; (mov r8, r8)
    956c:	46bd      	mov	sp, r7
    956e:	b002      	add	sp, #8
    9570:	bd80      	pop	{r7, pc}
    9572:	46c0      	nop			; (mov r8, r8)
    9574:	20000960 	.word	0x20000960
    9578:	20000958 	.word	0x20000958
    957c:	20000b7c 	.word	0x20000b7c

00009580 <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    9580:	b580      	push	{r7, lr}
    9582:	b08a      	sub	sp, #40	; 0x28
    9584:	af00      	add	r7, sp, #0
    9586:	6078      	str	r0, [r7, #4]
    9588:	0008      	movs	r0, r1
    958a:	0011      	movs	r1, r2
    958c:	1cfb      	adds	r3, r7, #3
    958e:	1c02      	adds	r2, r0, #0
    9590:	701a      	strb	r2, [r3, #0]
    9592:	1cbb      	adds	r3, r7, #2
    9594:	1c0a      	adds	r2, r1, #0
    9596:	701a      	strb	r2, [r3, #0]
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    9598:	687b      	ldr	r3, [r7, #4]
    959a:	2200      	movs	r2, #0
    959c:	731a      	strb	r2, [r3, #12]
    959e:	687b      	ldr	r3, [r7, #4]
    95a0:	7b1a      	ldrb	r2, [r3, #12]
    95a2:	687b      	ldr	r3, [r7, #4]
    95a4:	729a      	strb	r2, [r3, #10]
    95a6:	687b      	ldr	r3, [r7, #4]
    95a8:	7a9a      	ldrb	r2, [r3, #10]
    95aa:	687b      	ldr	r3, [r7, #4]
    95ac:	719a      	strb	r2, [r3, #6]
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	799a      	ldrb	r2, [r3, #6]
    95b2:	687b      	ldr	r3, [r7, #4]
    95b4:	715a      	strb	r2, [r3, #5]
  chipSelectPin_ = chipSelectPin;
    95b6:	687b      	ldr	r3, [r7, #4]
    95b8:	1cba      	adds	r2, r7, #2
    95ba:	7812      	ldrb	r2, [r2, #0]
    95bc:	711a      	strb	r2, [r3, #4]
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
    95be:	f7f9 fd2d 	bl	301c <millis>
    95c2:	0003      	movs	r3, r0
    95c4:	623b      	str	r3, [r7, #32]
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    95c6:	687b      	ldr	r3, [r7, #4]
    95c8:	791b      	ldrb	r3, [r3, #4]
    95ca:	2101      	movs	r1, #1
    95cc:	0018      	movs	r0, r3
    95ce:	f7fd fa4b 	bl	6a68 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    95d2:	687b      	ldr	r3, [r7, #4]
    95d4:	791b      	ldrb	r3, [r3, #4]
    95d6:	2101      	movs	r1, #1
    95d8:	0018      	movs	r0, r3
    95da:	f7fd fb6f 	bl	6cbc <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SDCARD_SPI.begin();
    95de:	4b8c      	ldr	r3, [pc, #560]	; (9810 <_ZN7Sd2Card4initEhh+0x290>)
    95e0:	0018      	movs	r0, r3
    95e2:	f002 f999 	bl	b918 <_ZN8SPIClass5beginEv>
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    95e6:	498b      	ldr	r1, [pc, #556]	; (9814 <_ZN7Sd2Card4initEhh+0x294>)
    95e8:	230c      	movs	r3, #12
    95ea:	18f8      	adds	r0, r7, r3
    95ec:	2302      	movs	r3, #2
    95ee:	2201      	movs	r2, #1
    95f0:	f7fe f938 	bl	7864 <_ZN11SPISettingsC1Em8BitOrderh>
    95f4:	4b88      	ldr	r3, [pc, #544]	; (9818 <_ZN7Sd2Card4initEhh+0x298>)
    95f6:	220c      	movs	r2, #12
    95f8:	18ba      	adds	r2, r7, r2
    95fa:	6811      	ldr	r1, [r2, #0]
    95fc:	6019      	str	r1, [r3, #0]
    95fe:	8892      	ldrh	r2, [r2, #4]
    9600:	809a      	strh	r2, [r3, #4]
#endif // USE_SPI_LIB
#endif // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
#ifdef USE_SPI_LIB
  SDCARD_SPI.beginTransaction(settings);
    9602:	4b85      	ldr	r3, [pc, #532]	; (9818 <_ZN7Sd2Card4initEhh+0x298>)
    9604:	4882      	ldr	r0, [pc, #520]	; (9810 <_ZN7Sd2Card4initEhh+0x290>)
    9606:	6819      	ldr	r1, [r3, #0]
    9608:	685a      	ldr	r2, [r3, #4]
    960a:	f002 fa15 	bl	ba38 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    960e:	2327      	movs	r3, #39	; 0x27
    9610:	18fb      	adds	r3, r7, r3
    9612:	2200      	movs	r2, #0
    9614:	701a      	strb	r2, [r3, #0]
    9616:	2327      	movs	r3, #39	; 0x27
    9618:	18fb      	adds	r3, r7, r3
    961a:	781b      	ldrb	r3, [r3, #0]
    961c:	2b09      	cmp	r3, #9
    961e:	dc0a      	bgt.n	9636 <_ZN7Sd2Card4initEhh+0xb6>
    9620:	20ff      	movs	r0, #255	; 0xff
    9622:	f7ff fec9 	bl	93b8 <_ZL7spiSendh>
    9626:	2327      	movs	r3, #39	; 0x27
    9628:	18fb      	adds	r3, r7, r3
    962a:	781a      	ldrb	r2, [r3, #0]
    962c:	2327      	movs	r3, #39	; 0x27
    962e:	18fb      	adds	r3, r7, r3
    9630:	3201      	adds	r2, #1
    9632:	701a      	strb	r2, [r3, #0]
    9634:	e7ef      	b.n	9616 <_ZN7Sd2Card4initEhh+0x96>
#ifdef USE_SPI_LIB
  SDCARD_SPI.endTransaction();
    9636:	4b76      	ldr	r3, [pc, #472]	; (9810 <_ZN7Sd2Card4initEhh+0x290>)
    9638:	0018      	movs	r0, r3
    963a:	f002 fa33 	bl	baa4 <_ZN8SPIClass14endTransactionEv>
#endif

  chipSelectLow();
    963e:	687b      	ldr	r3, [r7, #4]
    9640:	0018      	movs	r0, r3
    9642:	f7ff ff7b 	bl	953c <_ZN7Sd2Card13chipSelectLowEv>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    9646:	687b      	ldr	r3, [r7, #4]
    9648:	2200      	movs	r2, #0
    964a:	2100      	movs	r1, #0
    964c:	0018      	movs	r0, r3
    964e:	f7ff fed5 	bl	93fc <_ZN7Sd2Card11cardCommandEhm>
    9652:	0003      	movs	r3, r0
    9654:	001a      	movs	r2, r3
    9656:	687b      	ldr	r3, [r7, #4]
    9658:	72da      	strb	r2, [r3, #11]
    965a:	687b      	ldr	r3, [r7, #4]
    965c:	7adb      	ldrb	r3, [r3, #11]
    965e:	3b01      	subs	r3, #1
    9660:	1e5a      	subs	r2, r3, #1
    9662:	4193      	sbcs	r3, r2
    9664:	b2db      	uxtb	r3, r3
    9666:	2b00      	cmp	r3, #0
    9668:	d010      	beq.n	968c <_ZN7Sd2Card4initEhh+0x10c>
    unsigned int d = millis() - t0;
    966a:	f7f9 fcd7 	bl	301c <millis>
    966e:	0002      	movs	r2, r0
    9670:	6a3b      	ldr	r3, [r7, #32]
    9672:	1ad3      	subs	r3, r2, r3
    9674:	61fb      	str	r3, [r7, #28]
    if (d > SD_INIT_TIMEOUT) {
    9676:	69fa      	ldr	r2, [r7, #28]
    9678:	23fa      	movs	r3, #250	; 0xfa
    967a:	00db      	lsls	r3, r3, #3
    967c:	429a      	cmp	r2, r3
    967e:	d9e2      	bls.n	9646 <_ZN7Sd2Card4initEhh+0xc6>
      error(SD_CARD_ERROR_CMD0);
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	2101      	movs	r1, #1
    9684:	0018      	movs	r0, r3
    9686:	f7ff fe2d 	bl	92e4 <_ZN7Sd2Card5errorEh>
      goto fail;
    968a:	e0b7      	b.n	97fc <_ZN7Sd2Card4initEhh+0x27c>
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    968c:	23d5      	movs	r3, #213	; 0xd5
    968e:	005a      	lsls	r2, r3, #1
    9690:	687b      	ldr	r3, [r7, #4]
    9692:	2108      	movs	r1, #8
    9694:	0018      	movs	r0, r3
    9696:	f7ff feb1 	bl	93fc <_ZN7Sd2Card11cardCommandEhm>
    969a:	0003      	movs	r3, r0
    969c:	001a      	movs	r2, r3
    969e:	2304      	movs	r3, #4
    96a0:	4013      	ands	r3, r2
    96a2:	1e5a      	subs	r2, r3, #1
    96a4:	4193      	sbcs	r3, r2
    96a6:	b2db      	uxtb	r3, r3
    96a8:	2b00      	cmp	r3, #0
    96aa:	d005      	beq.n	96b8 <_ZN7Sd2Card4initEhh+0x138>
    type(SD_CARD_TYPE_SD1);
    96ac:	687b      	ldr	r3, [r7, #4]
    96ae:	2101      	movs	r1, #1
    96b0:	0018      	movs	r0, r3
    96b2:	f7ff fe26 	bl	9302 <_ZN7Sd2Card4typeEh>
    96b6:	e025      	b.n	9704 <_ZN7Sd2Card4initEhh+0x184>
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    96b8:	2326      	movs	r3, #38	; 0x26
    96ba:	18fb      	adds	r3, r7, r3
    96bc:	2200      	movs	r2, #0
    96be:	701a      	strb	r2, [r3, #0]
    96c0:	2326      	movs	r3, #38	; 0x26
    96c2:	18fb      	adds	r3, r7, r3
    96c4:	781b      	ldrb	r3, [r3, #0]
    96c6:	2b03      	cmp	r3, #3
    96c8:	dc0d      	bgt.n	96e6 <_ZN7Sd2Card4initEhh+0x166>
    96ca:	f7ff fe89 	bl	93e0 <_ZL6spiRecv>
    96ce:	0003      	movs	r3, r0
    96d0:	001a      	movs	r2, r3
    96d2:	687b      	ldr	r3, [r7, #4]
    96d4:	72da      	strb	r2, [r3, #11]
    96d6:	2326      	movs	r3, #38	; 0x26
    96d8:	18fb      	adds	r3, r7, r3
    96da:	781a      	ldrb	r2, [r3, #0]
    96dc:	2326      	movs	r3, #38	; 0x26
    96de:	18fb      	adds	r3, r7, r3
    96e0:	3201      	adds	r2, #1
    96e2:	701a      	strb	r2, [r3, #0]
    96e4:	e7ec      	b.n	96c0 <_ZN7Sd2Card4initEhh+0x140>
    if (status_ != 0XAA) {
    96e6:	687b      	ldr	r3, [r7, #4]
    96e8:	7adb      	ldrb	r3, [r3, #11]
    96ea:	2baa      	cmp	r3, #170	; 0xaa
    96ec:	d005      	beq.n	96fa <_ZN7Sd2Card4initEhh+0x17a>
      error(SD_CARD_ERROR_CMD8);
    96ee:	687b      	ldr	r3, [r7, #4]
    96f0:	2102      	movs	r1, #2
    96f2:	0018      	movs	r0, r3
    96f4:	f7ff fdf6 	bl	92e4 <_ZN7Sd2Card5errorEh>
      goto fail;
    96f8:	e080      	b.n	97fc <_ZN7Sd2Card4initEhh+0x27c>
    }
    type(SD_CARD_TYPE_SD2);
    96fa:	687b      	ldr	r3, [r7, #4]
    96fc:	2102      	movs	r1, #2
    96fe:	0018      	movs	r0, r3
    9700:	f7ff fdff 	bl	9302 <_ZN7Sd2Card4typeEh>
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    9704:	687b      	ldr	r3, [r7, #4]
    9706:	0018      	movs	r0, r3
    9708:	f7ff fdc6 	bl	9298 <_ZNK7Sd2Card4typeEv>
    970c:	0003      	movs	r3, r0
    970e:	2b02      	cmp	r3, #2
    9710:	d102      	bne.n	9718 <_ZN7Sd2Card4initEhh+0x198>
    9712:	2380      	movs	r3, #128	; 0x80
    9714:	05db      	lsls	r3, r3, #23
    9716:	e000      	b.n	971a <_ZN7Sd2Card4initEhh+0x19a>
    9718:	2300      	movs	r3, #0
    971a:	61bb      	str	r3, [r7, #24]

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    971c:	69ba      	ldr	r2, [r7, #24]
    971e:	687b      	ldr	r3, [r7, #4]
    9720:	2129      	movs	r1, #41	; 0x29
    9722:	0018      	movs	r0, r3
    9724:	f7ff fdc2 	bl	92ac <_ZN7Sd2Card8cardAcmdEhm>
    9728:	0003      	movs	r3, r0
    972a:	001a      	movs	r2, r3
    972c:	687b      	ldr	r3, [r7, #4]
    972e:	72da      	strb	r2, [r3, #11]
    9730:	687b      	ldr	r3, [r7, #4]
    9732:	7adb      	ldrb	r3, [r3, #11]
    9734:	1e5a      	subs	r2, r3, #1
    9736:	4193      	sbcs	r3, r2
    9738:	b2db      	uxtb	r3, r3
    973a:	2b00      	cmp	r3, #0
    973c:	d010      	beq.n	9760 <_ZN7Sd2Card4initEhh+0x1e0>
    // check for timeout
    unsigned int d = millis() - t0;
    973e:	f7f9 fc6d 	bl	301c <millis>
    9742:	0002      	movs	r2, r0
    9744:	6a3b      	ldr	r3, [r7, #32]
    9746:	1ad3      	subs	r3, r2, r3
    9748:	617b      	str	r3, [r7, #20]
    if (d > SD_INIT_TIMEOUT) {
    974a:	697a      	ldr	r2, [r7, #20]
    974c:	23fa      	movs	r3, #250	; 0xfa
    974e:	00db      	lsls	r3, r3, #3
    9750:	429a      	cmp	r2, r3
    9752:	d9e3      	bls.n	971c <_ZN7Sd2Card4initEhh+0x19c>
      error(SD_CARD_ERROR_ACMD41);
    9754:	687b      	ldr	r3, [r7, #4]
    9756:	2108      	movs	r1, #8
    9758:	0018      	movs	r0, r3
    975a:	f7ff fdc3 	bl	92e4 <_ZN7Sd2Card5errorEh>
      goto fail;
    975e:	e04d      	b.n	97fc <_ZN7Sd2Card4initEhh+0x27c>
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    9760:	687b      	ldr	r3, [r7, #4]
    9762:	0018      	movs	r0, r3
    9764:	f7ff fd98 	bl	9298 <_ZNK7Sd2Card4typeEv>
    9768:	0003      	movs	r3, r0
    976a:	3b02      	subs	r3, #2
    976c:	425a      	negs	r2, r3
    976e:	4153      	adcs	r3, r2
    9770:	b2db      	uxtb	r3, r3
    9772:	2b00      	cmp	r3, #0
    9774:	d035      	beq.n	97e2 <_ZN7Sd2Card4initEhh+0x262>
    if (cardCommand(CMD58, 0)) {
    9776:	687b      	ldr	r3, [r7, #4]
    9778:	2200      	movs	r2, #0
    977a:	213a      	movs	r1, #58	; 0x3a
    977c:	0018      	movs	r0, r3
    977e:	f7ff fe3d 	bl	93fc <_ZN7Sd2Card11cardCommandEhm>
    9782:	0003      	movs	r3, r0
    9784:	1e5a      	subs	r2, r3, #1
    9786:	4193      	sbcs	r3, r2
    9788:	b2db      	uxtb	r3, r3
    978a:	2b00      	cmp	r3, #0
    978c:	d005      	beq.n	979a <_ZN7Sd2Card4initEhh+0x21a>
      error(SD_CARD_ERROR_CMD58);
    978e:	687b      	ldr	r3, [r7, #4]
    9790:	2106      	movs	r1, #6
    9792:	0018      	movs	r0, r3
    9794:	f7ff fda6 	bl	92e4 <_ZN7Sd2Card5errorEh>
      goto fail;
    9798:	e030      	b.n	97fc <_ZN7Sd2Card4initEhh+0x27c>
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    979a:	f7ff fe21 	bl	93e0 <_ZL6spiRecv>
    979e:	0003      	movs	r3, r0
    97a0:	001a      	movs	r2, r3
    97a2:	23c0      	movs	r3, #192	; 0xc0
    97a4:	4013      	ands	r3, r2
    97a6:	3bc0      	subs	r3, #192	; 0xc0
    97a8:	425a      	negs	r2, r3
    97aa:	4153      	adcs	r3, r2
    97ac:	b2db      	uxtb	r3, r3
    97ae:	2b00      	cmp	r3, #0
    97b0:	d004      	beq.n	97bc <_ZN7Sd2Card4initEhh+0x23c>
    97b2:	687b      	ldr	r3, [r7, #4]
    97b4:	2103      	movs	r1, #3
    97b6:	0018      	movs	r0, r3
    97b8:	f7ff fda3 	bl	9302 <_ZN7Sd2Card4typeEh>
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    97bc:	2325      	movs	r3, #37	; 0x25
    97be:	18fb      	adds	r3, r7, r3
    97c0:	2200      	movs	r2, #0
    97c2:	701a      	strb	r2, [r3, #0]
    97c4:	2325      	movs	r3, #37	; 0x25
    97c6:	18fb      	adds	r3, r7, r3
    97c8:	781b      	ldrb	r3, [r3, #0]
    97ca:	2b02      	cmp	r3, #2
    97cc:	dc09      	bgt.n	97e2 <_ZN7Sd2Card4initEhh+0x262>
    97ce:	f7ff fe07 	bl	93e0 <_ZL6spiRecv>
    97d2:	2325      	movs	r3, #37	; 0x25
    97d4:	18fb      	adds	r3, r7, r3
    97d6:	781a      	ldrb	r2, [r3, #0]
    97d8:	2325      	movs	r3, #37	; 0x25
    97da:	18fb      	adds	r3, r7, r3
    97dc:	3201      	adds	r2, #1
    97de:	701a      	strb	r2, [r3, #0]
    97e0:	e7f0      	b.n	97c4 <_ZN7Sd2Card4initEhh+0x244>
  }
  chipSelectHigh();
    97e2:	687b      	ldr	r3, [r7, #4]
    97e4:	0018      	movs	r0, r3
    97e6:	f7ff fe8b 	bl	9500 <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    97ea:	1cfb      	adds	r3, r7, #3
    97ec:	781a      	ldrb	r2, [r3, #0]
    97ee:	687b      	ldr	r3, [r7, #4]
    97f0:	0011      	movs	r1, r2
    97f2:	0018      	movs	r0, r3
    97f4:	f000 f900 	bl	99f8 <_ZN7Sd2Card10setSckRateEh>
    97f8:	0003      	movs	r3, r0
    97fa:	e004      	b.n	9806 <_ZN7Sd2Card4initEhh+0x286>
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    97fc:	687b      	ldr	r3, [r7, #4]
    97fe:	0018      	movs	r0, r3
    9800:	f7ff fe7e 	bl	9500 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9804:	2300      	movs	r3, #0
}
    9806:	0018      	movs	r0, r3
    9808:	46bd      	mov	sp, r7
    980a:	b00a      	add	sp, #40	; 0x28
    980c:	bd80      	pop	{r7, pc}
    980e:	46c0      	nop			; (mov r8, r8)
    9810:	20000b7c 	.word	0x20000b7c
    9814:	0003d090 	.word	0x0003d090
    9818:	20000958 	.word	0x20000958

0000981c <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    981c:	b580      	push	{r7, lr}
    981e:	b086      	sub	sp, #24
    9820:	af02      	add	r7, sp, #8
    9822:	60f8      	str	r0, [r7, #12]
    9824:	60b9      	str	r1, [r7, #8]
    9826:	607a      	str	r2, [r7, #4]
  return readData(block, 0, 512, dst);
    9828:	2380      	movs	r3, #128	; 0x80
    982a:	009a      	lsls	r2, r3, #2
    982c:	68b9      	ldr	r1, [r7, #8]
    982e:	68f8      	ldr	r0, [r7, #12]
    9830:	687b      	ldr	r3, [r7, #4]
    9832:	9300      	str	r3, [sp, #0]
    9834:	0013      	movs	r3, r2
    9836:	2200      	movs	r2, #0
    9838:	f000 f806 	bl	9848 <_ZN7Sd2Card8readDataEmttPh>
    983c:	0003      	movs	r3, r0
}
    983e:	0018      	movs	r0, r3
    9840:	46bd      	mov	sp, r7
    9842:	b004      	add	sp, #16
    9844:	bd80      	pop	{r7, pc}
	...

00009848 <_ZN7Sd2Card8readDataEmttPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    9848:	b590      	push	{r4, r7, lr}
    984a:	b087      	sub	sp, #28
    984c:	af00      	add	r7, sp, #0
    984e:	60f8      	str	r0, [r7, #12]
    9850:	60b9      	str	r1, [r7, #8]
    9852:	0019      	movs	r1, r3
    9854:	1dbb      	adds	r3, r7, #6
    9856:	801a      	strh	r2, [r3, #0]
    9858:	1d3b      	adds	r3, r7, #4
    985a:	1c0a      	adds	r2, r1, #0
    985c:	801a      	strh	r2, [r3, #0]
  if (count == 0) return true;
    985e:	1d3b      	adds	r3, r7, #4
    9860:	881b      	ldrh	r3, [r3, #0]
    9862:	2b00      	cmp	r3, #0
    9864:	d101      	bne.n	986a <_ZN7Sd2Card8readDataEmttPh+0x22>
    9866:	2301      	movs	r3, #1
    9868:	e097      	b.n	999a <_ZN7Sd2Card8readDataEmttPh+0x152>
  if ((count + offset) > 512) {
    986a:	1d3b      	adds	r3, r7, #4
    986c:	881a      	ldrh	r2, [r3, #0]
    986e:	1dbb      	adds	r3, r7, #6
    9870:	881b      	ldrh	r3, [r3, #0]
    9872:	18d2      	adds	r2, r2, r3
    9874:	2380      	movs	r3, #128	; 0x80
    9876:	009b      	lsls	r3, r3, #2
    9878:	429a      	cmp	r2, r3
    987a:	dd00      	ble.n	987e <_ZN7Sd2Card8readDataEmttPh+0x36>
    987c:	e085      	b.n	998a <_ZN7Sd2Card8readDataEmttPh+0x142>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    987e:	68fb      	ldr	r3, [r7, #12]
    9880:	799b      	ldrb	r3, [r3, #6]
    9882:	2b00      	cmp	r3, #0
    9884:	d00a      	beq.n	989c <_ZN7Sd2Card8readDataEmttPh+0x54>
    9886:	68fb      	ldr	r3, [r7, #12]
    9888:	681a      	ldr	r2, [r3, #0]
    988a:	68bb      	ldr	r3, [r7, #8]
    988c:	429a      	cmp	r2, r3
    988e:	d105      	bne.n	989c <_ZN7Sd2Card8readDataEmttPh+0x54>
    9890:	1dbb      	adds	r3, r7, #6
    9892:	881b      	ldrh	r3, [r3, #0]
    9894:	68fa      	ldr	r2, [r7, #12]
    9896:	8912      	ldrh	r2, [r2, #8]
    9898:	4293      	cmp	r3, r2
    989a:	da32      	bge.n	9902 <_ZN7Sd2Card8readDataEmttPh+0xba>
    block_ = block;
    989c:	68fb      	ldr	r3, [r7, #12]
    989e:	68ba      	ldr	r2, [r7, #8]
    98a0:	601a      	str	r2, [r3, #0]
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    98a2:	68fb      	ldr	r3, [r7, #12]
    98a4:	0018      	movs	r0, r3
    98a6:	f7ff fcf7 	bl	9298 <_ZNK7Sd2Card4typeEv>
    98aa:	0003      	movs	r3, r0
    98ac:	3b03      	subs	r3, #3
    98ae:	1e5a      	subs	r2, r3, #1
    98b0:	4193      	sbcs	r3, r2
    98b2:	b2db      	uxtb	r3, r3
    98b4:	2b00      	cmp	r3, #0
    98b6:	d002      	beq.n	98be <_ZN7Sd2Card8readDataEmttPh+0x76>
    98b8:	68bb      	ldr	r3, [r7, #8]
    98ba:	025b      	lsls	r3, r3, #9
    98bc:	60bb      	str	r3, [r7, #8]
    if (cardCommand(CMD17, block)) {
    98be:	68ba      	ldr	r2, [r7, #8]
    98c0:	68fb      	ldr	r3, [r7, #12]
    98c2:	2111      	movs	r1, #17
    98c4:	0018      	movs	r0, r3
    98c6:	f7ff fd99 	bl	93fc <_ZN7Sd2Card11cardCommandEhm>
    98ca:	0003      	movs	r3, r0
    98cc:	1e5a      	subs	r2, r3, #1
    98ce:	4193      	sbcs	r3, r2
    98d0:	b2db      	uxtb	r3, r3
    98d2:	2b00      	cmp	r3, #0
    98d4:	d005      	beq.n	98e2 <_ZN7Sd2Card8readDataEmttPh+0x9a>
      error(SD_CARD_ERROR_CMD17);
    98d6:	68fb      	ldr	r3, [r7, #12]
    98d8:	2103      	movs	r1, #3
    98da:	0018      	movs	r0, r3
    98dc:	f7ff fd02 	bl	92e4 <_ZN7Sd2Card5errorEh>
      goto fail;
    98e0:	e056      	b.n	9990 <_ZN7Sd2Card8readDataEmttPh+0x148>
    }
    if (!waitStartBlock()) {
    98e2:	68fb      	ldr	r3, [r7, #12]
    98e4:	0018      	movs	r0, r3
    98e6:	f000 f945 	bl	9b74 <_ZN7Sd2Card14waitStartBlockEv>
    98ea:	0003      	movs	r3, r0
    98ec:	425a      	negs	r2, r3
    98ee:	4153      	adcs	r3, r2
    98f0:	b2db      	uxtb	r3, r3
    98f2:	2b00      	cmp	r3, #0
    98f4:	d14b      	bne.n	998e <_ZN7Sd2Card8readDataEmttPh+0x146>
      goto fail;
    }
    offset_ = 0;
    98f6:	68fb      	ldr	r3, [r7, #12]
    98f8:	2200      	movs	r2, #0
    98fa:	811a      	strh	r2, [r3, #8]
    inBlock_ = 1;
    98fc:	68fb      	ldr	r3, [r7, #12]
    98fe:	2201      	movs	r2, #1
    9900:	719a      	strb	r2, [r3, #6]
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    9902:	68fb      	ldr	r3, [r7, #12]
    9904:	891b      	ldrh	r3, [r3, #8]
    9906:	001a      	movs	r2, r3
    9908:	1dbb      	adds	r3, r7, #6
    990a:	881b      	ldrh	r3, [r3, #0]
    990c:	429a      	cmp	r2, r3
    990e:	da08      	bge.n	9922 <_ZN7Sd2Card8readDataEmttPh+0xda>
    spiRec();
    9910:	f7ff fd66 	bl	93e0 <_ZL6spiRecv>
  for (;offset_ < offset; offset_++) {
    9914:	68fb      	ldr	r3, [r7, #12]
    9916:	891b      	ldrh	r3, [r3, #8]
    9918:	3301      	adds	r3, #1
    991a:	b29a      	uxth	r2, r3
    991c:	68fb      	ldr	r3, [r7, #12]
    991e:	811a      	strh	r2, [r3, #8]
    9920:	e7ef      	b.n	9902 <_ZN7Sd2Card8readDataEmttPh+0xba>
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    9922:	2316      	movs	r3, #22
    9924:	18fb      	adds	r3, r7, r3
    9926:	2200      	movs	r2, #0
    9928:	801a      	strh	r2, [r3, #0]
    992a:	2316      	movs	r3, #22
    992c:	18fb      	adds	r3, r7, r3
    992e:	881a      	ldrh	r2, [r3, #0]
    9930:	1d3b      	adds	r3, r7, #4
    9932:	881b      	ldrh	r3, [r3, #0]
    9934:	429a      	cmp	r2, r3
    9936:	da10      	bge.n	995a <_ZN7Sd2Card8readDataEmttPh+0x112>
    dst[i] = spiRec();
    9938:	2316      	movs	r3, #22
    993a:	18fb      	adds	r3, r7, r3
    993c:	881b      	ldrh	r3, [r3, #0]
    993e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9940:	18d4      	adds	r4, r2, r3
    9942:	f7ff fd4d 	bl	93e0 <_ZL6spiRecv>
    9946:	0003      	movs	r3, r0
    9948:	7023      	strb	r3, [r4, #0]
  for (uint16_t i = 0; i < count; i++) {
    994a:	2316      	movs	r3, #22
    994c:	18fb      	adds	r3, r7, r3
    994e:	881a      	ldrh	r2, [r3, #0]
    9950:	2316      	movs	r3, #22
    9952:	18fb      	adds	r3, r7, r3
    9954:	3201      	adds	r2, #1
    9956:	801a      	strh	r2, [r3, #0]
    9958:	e7e7      	b.n	992a <_ZN7Sd2Card8readDataEmttPh+0xe2>
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    995a:	68fb      	ldr	r3, [r7, #12]
    995c:	891a      	ldrh	r2, [r3, #8]
    995e:	1d3b      	adds	r3, r7, #4
    9960:	881b      	ldrh	r3, [r3, #0]
    9962:	18d3      	adds	r3, r2, r3
    9964:	b29a      	uxth	r2, r3
    9966:	68fb      	ldr	r3, [r7, #12]
    9968:	811a      	strh	r2, [r3, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    996a:	68fb      	ldr	r3, [r7, #12]
    996c:	7a9b      	ldrb	r3, [r3, #10]
    996e:	2b00      	cmp	r3, #0
    9970:	d005      	beq.n	997e <_ZN7Sd2Card8readDataEmttPh+0x136>
    9972:	68fb      	ldr	r3, [r7, #12]
    9974:	891b      	ldrh	r3, [r3, #8]
    9976:	001a      	movs	r2, r3
    9978:	4b0a      	ldr	r3, [pc, #40]	; (99a4 <_ZN7Sd2Card8readDataEmttPh+0x15c>)
    997a:	429a      	cmp	r2, r3
    997c:	dd03      	ble.n	9986 <_ZN7Sd2Card8readDataEmttPh+0x13e>
    // read rest of data, checksum and set chip select high
    readEnd();
    997e:	68fb      	ldr	r3, [r7, #12]
    9980:	0018      	movs	r0, r3
    9982:	f000 f811 	bl	99a8 <_ZN7Sd2Card7readEndEv>
  }
  return true;
    9986:	2301      	movs	r3, #1
    9988:	e007      	b.n	999a <_ZN7Sd2Card8readDataEmttPh+0x152>
    goto fail;
    998a:	46c0      	nop			; (mov r8, r8)
    998c:	e000      	b.n	9990 <_ZN7Sd2Card8readDataEmttPh+0x148>
      goto fail;
    998e:	46c0      	nop			; (mov r8, r8)

 fail:
  chipSelectHigh();
    9990:	68fb      	ldr	r3, [r7, #12]
    9992:	0018      	movs	r0, r3
    9994:	f7ff fdb4 	bl	9500 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9998:	2300      	movs	r3, #0
}
    999a:	0018      	movs	r0, r3
    999c:	46bd      	mov	sp, r7
    999e:	b007      	add	sp, #28
    99a0:	bd90      	pop	{r4, r7, pc}
    99a2:	46c0      	nop			; (mov r8, r8)
    99a4:	000001ff 	.word	0x000001ff

000099a8 <_ZN7Sd2Card7readEndEv>:
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    99a8:	b580      	push	{r7, lr}
    99aa:	b082      	sub	sp, #8
    99ac:	af00      	add	r7, sp, #0
    99ae:	6078      	str	r0, [r7, #4]
  if (inBlock_) {
    99b0:	687b      	ldr	r3, [r7, #4]
    99b2:	799b      	ldrb	r3, [r3, #6]
    99b4:	2b00      	cmp	r3, #0
    99b6:	d019      	beq.n	99ec <_ZN7Sd2Card7readEndEv+0x44>
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    99b8:	687b      	ldr	r3, [r7, #4]
    99ba:	891b      	ldrh	r3, [r3, #8]
    99bc:	1c5a      	adds	r2, r3, #1
    99be:	b291      	uxth	r1, r2
    99c0:	687a      	ldr	r2, [r7, #4]
    99c2:	8111      	strh	r1, [r2, #8]
    99c4:	001a      	movs	r2, r3
    99c6:	4b0b      	ldr	r3, [pc, #44]	; (99f4 <_ZN7Sd2Card7readEndEv+0x4c>)
    99c8:	0fd0      	lsrs	r0, r2, #31
    99ca:	17d9      	asrs	r1, r3, #31
    99cc:	4293      	cmp	r3, r2
    99ce:	4148      	adcs	r0, r1
    99d0:	0003      	movs	r3, r0
    99d2:	b2db      	uxtb	r3, r3
    99d4:	2b00      	cmp	r3, #0
    99d6:	d002      	beq.n	99de <_ZN7Sd2Card7readEndEv+0x36>
    99d8:	f7ff fd02 	bl	93e0 <_ZL6spiRecv>
    99dc:	e7ec      	b.n	99b8 <_ZN7Sd2Card7readEndEv+0x10>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    99de:	687b      	ldr	r3, [r7, #4]
    99e0:	0018      	movs	r0, r3
    99e2:	f7ff fd8d 	bl	9500 <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    99e6:	687b      	ldr	r3, [r7, #4]
    99e8:	2200      	movs	r2, #0
    99ea:	719a      	strb	r2, [r3, #6]
  }
}
    99ec:	46c0      	nop			; (mov r8, r8)
    99ee:	46bd      	mov	sp, r7
    99f0:	b002      	add	sp, #8
    99f2:	bd80      	pop	{r7, pc}
    99f4:	00000201 	.word	0x00000201

000099f8 <_ZN7Sd2Card10setSckRateEh>:
 * for \a scsRateID = 6.
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
    99f8:	b580      	push	{r7, lr}
    99fa:	b090      	sub	sp, #64	; 0x40
    99fc:	af00      	add	r7, sp, #0
    99fe:	6078      	str	r0, [r7, #4]
    9a00:	000a      	movs	r2, r1
    9a02:	1cfb      	adds	r3, r7, #3
    9a04:	701a      	strb	r2, [r3, #0]
  if (sckRateID > 6) {
    9a06:	1cfb      	adds	r3, r7, #3
    9a08:	781b      	ldrb	r3, [r3, #0]
    9a0a:	2b06      	cmp	r3, #6
    9a0c:	dd06      	ble.n	9a1c <_ZN7Sd2Card10setSckRateEh+0x24>
    error(SD_CARD_ERROR_SCK_RATE);
    9a0e:	687b      	ldr	r3, [r7, #4]
    9a10:	2116      	movs	r1, #22
    9a12:	0018      	movs	r0, r3
    9a14:	f7ff fc66 	bl	92e4 <_ZN7Sd2Card5errorEh>
    return false;
    9a18:	2300      	movs	r3, #0
    9a1a:	e071      	b.n	9b00 <_ZN7Sd2Card10setSckRateEh+0x108>
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    9a1c:	1cfb      	adds	r3, r7, #3
    9a1e:	781b      	ldrb	r3, [r3, #0]
    9a20:	2b05      	cmp	r3, #5
    9a22:	d85e      	bhi.n	9ae2 <_ZN7Sd2Card10setSckRateEh+0xea>
    9a24:	009a      	lsls	r2, r3, #2
    9a26:	4b38      	ldr	r3, [pc, #224]	; (9b08 <_ZN7Sd2Card10setSckRateEh+0x110>)
    9a28:	18d3      	adds	r3, r2, r3
    9a2a:	681b      	ldr	r3, [r3, #0]
    9a2c:	469f      	mov	pc, r3
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    9a2e:	4937      	ldr	r1, [pc, #220]	; (9b0c <_ZN7Sd2Card10setSckRateEh+0x114>)
    9a30:	2308      	movs	r3, #8
    9a32:	18f8      	adds	r0, r7, r3
    9a34:	2302      	movs	r3, #2
    9a36:	2201      	movs	r2, #1
    9a38:	f7fd ff14 	bl	7864 <_ZN11SPISettingsC1Em8BitOrderh>
    9a3c:	4b34      	ldr	r3, [pc, #208]	; (9b10 <_ZN7Sd2Card10setSckRateEh+0x118>)
    9a3e:	2208      	movs	r2, #8
    9a40:	18ba      	adds	r2, r7, r2
    9a42:	6811      	ldr	r1, [r2, #0]
    9a44:	6019      	str	r1, [r3, #0]
    9a46:	8892      	ldrh	r2, [r2, #4]
    9a48:	809a      	strh	r2, [r3, #4]
    9a4a:	e058      	b.n	9afe <_ZN7Sd2Card10setSckRateEh+0x106>
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    9a4c:	4931      	ldr	r1, [pc, #196]	; (9b14 <_ZN7Sd2Card10setSckRateEh+0x11c>)
    9a4e:	2310      	movs	r3, #16
    9a50:	18f8      	adds	r0, r7, r3
    9a52:	2302      	movs	r3, #2
    9a54:	2201      	movs	r2, #1
    9a56:	f7fd ff05 	bl	7864 <_ZN11SPISettingsC1Em8BitOrderh>
    9a5a:	4b2d      	ldr	r3, [pc, #180]	; (9b10 <_ZN7Sd2Card10setSckRateEh+0x118>)
    9a5c:	2210      	movs	r2, #16
    9a5e:	18ba      	adds	r2, r7, r2
    9a60:	6811      	ldr	r1, [r2, #0]
    9a62:	6019      	str	r1, [r3, #0]
    9a64:	8892      	ldrh	r2, [r2, #4]
    9a66:	809a      	strh	r2, [r3, #4]
    9a68:	e049      	b.n	9afe <_ZN7Sd2Card10setSckRateEh+0x106>
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    9a6a:	492b      	ldr	r1, [pc, #172]	; (9b18 <_ZN7Sd2Card10setSckRateEh+0x120>)
    9a6c:	2318      	movs	r3, #24
    9a6e:	18f8      	adds	r0, r7, r3
    9a70:	2302      	movs	r3, #2
    9a72:	2201      	movs	r2, #1
    9a74:	f7fd fef6 	bl	7864 <_ZN11SPISettingsC1Em8BitOrderh>
    9a78:	4b25      	ldr	r3, [pc, #148]	; (9b10 <_ZN7Sd2Card10setSckRateEh+0x118>)
    9a7a:	2218      	movs	r2, #24
    9a7c:	18ba      	adds	r2, r7, r2
    9a7e:	6811      	ldr	r1, [r2, #0]
    9a80:	6019      	str	r1, [r3, #0]
    9a82:	8892      	ldrh	r2, [r2, #4]
    9a84:	809a      	strh	r2, [r3, #4]
    9a86:	e03a      	b.n	9afe <_ZN7Sd2Card10setSckRateEh+0x106>
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    9a88:	4924      	ldr	r1, [pc, #144]	; (9b1c <_ZN7Sd2Card10setSckRateEh+0x124>)
    9a8a:	2320      	movs	r3, #32
    9a8c:	18f8      	adds	r0, r7, r3
    9a8e:	2302      	movs	r3, #2
    9a90:	2201      	movs	r2, #1
    9a92:	f7fd fee7 	bl	7864 <_ZN11SPISettingsC1Em8BitOrderh>
    9a96:	4b1e      	ldr	r3, [pc, #120]	; (9b10 <_ZN7Sd2Card10setSckRateEh+0x118>)
    9a98:	2220      	movs	r2, #32
    9a9a:	18ba      	adds	r2, r7, r2
    9a9c:	6811      	ldr	r1, [r2, #0]
    9a9e:	6019      	str	r1, [r3, #0]
    9aa0:	8892      	ldrh	r2, [r2, #4]
    9aa2:	809a      	strh	r2, [r3, #4]
    9aa4:	e02b      	b.n	9afe <_ZN7Sd2Card10setSckRateEh+0x106>
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    9aa6:	491e      	ldr	r1, [pc, #120]	; (9b20 <_ZN7Sd2Card10setSckRateEh+0x128>)
    9aa8:	2328      	movs	r3, #40	; 0x28
    9aaa:	18f8      	adds	r0, r7, r3
    9aac:	2302      	movs	r3, #2
    9aae:	2201      	movs	r2, #1
    9ab0:	f7fd fed8 	bl	7864 <_ZN11SPISettingsC1Em8BitOrderh>
    9ab4:	4b16      	ldr	r3, [pc, #88]	; (9b10 <_ZN7Sd2Card10setSckRateEh+0x118>)
    9ab6:	2228      	movs	r2, #40	; 0x28
    9ab8:	18ba      	adds	r2, r7, r2
    9aba:	6811      	ldr	r1, [r2, #0]
    9abc:	6019      	str	r1, [r3, #0]
    9abe:	8892      	ldrh	r2, [r2, #4]
    9ac0:	809a      	strh	r2, [r3, #4]
    9ac2:	e01c      	b.n	9afe <_ZN7Sd2Card10setSckRateEh+0x106>
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    9ac4:	4917      	ldr	r1, [pc, #92]	; (9b24 <_ZN7Sd2Card10setSckRateEh+0x12c>)
    9ac6:	2330      	movs	r3, #48	; 0x30
    9ac8:	18f8      	adds	r0, r7, r3
    9aca:	2302      	movs	r3, #2
    9acc:	2201      	movs	r2, #1
    9ace:	f7fd fec9 	bl	7864 <_ZN11SPISettingsC1Em8BitOrderh>
    9ad2:	4b0f      	ldr	r3, [pc, #60]	; (9b10 <_ZN7Sd2Card10setSckRateEh+0x118>)
    9ad4:	2230      	movs	r2, #48	; 0x30
    9ad6:	18ba      	adds	r2, r7, r2
    9ad8:	6811      	ldr	r1, [r2, #0]
    9ada:	6019      	str	r1, [r3, #0]
    9adc:	8892      	ldrh	r2, [r2, #4]
    9ade:	809a      	strh	r2, [r3, #4]
    9ae0:	e00d      	b.n	9afe <_ZN7Sd2Card10setSckRateEh+0x106>
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    9ae2:	4911      	ldr	r1, [pc, #68]	; (9b28 <_ZN7Sd2Card10setSckRateEh+0x130>)
    9ae4:	2338      	movs	r3, #56	; 0x38
    9ae6:	18f8      	adds	r0, r7, r3
    9ae8:	2302      	movs	r3, #2
    9aea:	2201      	movs	r2, #1
    9aec:	f7fd feba 	bl	7864 <_ZN11SPISettingsC1Em8BitOrderh>
    9af0:	4b07      	ldr	r3, [pc, #28]	; (9b10 <_ZN7Sd2Card10setSckRateEh+0x118>)
    9af2:	2238      	movs	r2, #56	; 0x38
    9af4:	18ba      	adds	r2, r7, r2
    9af6:	6811      	ldr	r1, [r2, #0]
    9af8:	6019      	str	r1, [r3, #0]
    9afa:	8892      	ldrh	r2, [r2, #4]
    9afc:	809a      	strh	r2, [r3, #4]
  }
#endif // USE_SPI_LIB
  return true;
    9afe:	2301      	movs	r3, #1
}
    9b00:	0018      	movs	r0, r3
    9b02:	46bd      	mov	sp, r7
    9b04:	b010      	add	sp, #64	; 0x40
    9b06:	bd80      	pop	{r7, pc}
    9b08:	000137e0 	.word	0x000137e0
    9b0c:	017d7840 	.word	0x017d7840
    9b10:	20000958 	.word	0x20000958
    9b14:	003d0900 	.word	0x003d0900
    9b18:	001e8480 	.word	0x001e8480
    9b1c:	000f4240 	.word	0x000f4240
    9b20:	0007a120 	.word	0x0007a120
    9b24:	0003d090 	.word	0x0003d090
    9b28:	0001e848 	.word	0x0001e848

00009b2c <_ZN7Sd2Card11waitNotBusyEj>:
  return true;
}
#endif
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    9b2c:	b580      	push	{r7, lr}
    9b2e:	b084      	sub	sp, #16
    9b30:	af00      	add	r7, sp, #0
    9b32:	6078      	str	r0, [r7, #4]
    9b34:	6039      	str	r1, [r7, #0]
  unsigned int t0 = millis();
    9b36:	f7f9 fa71 	bl	301c <millis>
    9b3a:	0003      	movs	r3, r0
    9b3c:	60fb      	str	r3, [r7, #12]
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    9b3e:	f7ff fc4f 	bl	93e0 <_ZL6spiRecv>
    9b42:	0003      	movs	r3, r0
    9b44:	3bff      	subs	r3, #255	; 0xff
    9b46:	425a      	negs	r2, r3
    9b48:	4153      	adcs	r3, r2
    9b4a:	b2db      	uxtb	r3, r3
    9b4c:	2b00      	cmp	r3, #0
    9b4e:	d001      	beq.n	9b54 <_ZN7Sd2Card11waitNotBusyEj+0x28>
    9b50:	2301      	movs	r3, #1
    9b52:	e00b      	b.n	9b6c <_ZN7Sd2Card11waitNotBusyEj+0x40>
    d = millis() - t0;
    9b54:	f7f9 fa62 	bl	301c <millis>
    9b58:	0002      	movs	r2, r0
    9b5a:	68fb      	ldr	r3, [r7, #12]
    9b5c:	1ad3      	subs	r3, r2, r3
    9b5e:	60bb      	str	r3, [r7, #8]
  }
  while (d < timeoutMillis);
    9b60:	68ba      	ldr	r2, [r7, #8]
    9b62:	683b      	ldr	r3, [r7, #0]
    9b64:	429a      	cmp	r2, r3
    9b66:	d200      	bcs.n	9b6a <_ZN7Sd2Card11waitNotBusyEj+0x3e>
  do {
    9b68:	e7e9      	b.n	9b3e <_ZN7Sd2Card11waitNotBusyEj+0x12>
  return false;
    9b6a:	2300      	movs	r3, #0
}
    9b6c:	0018      	movs	r0, r3
    9b6e:	46bd      	mov	sp, r7
    9b70:	b004      	add	sp, #16
    9b72:	bd80      	pop	{r7, pc}

00009b74 <_ZN7Sd2Card14waitStartBlockEv>:
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    9b74:	b580      	push	{r7, lr}
    9b76:	b084      	sub	sp, #16
    9b78:	af00      	add	r7, sp, #0
    9b7a:	6078      	str	r0, [r7, #4]
  unsigned int t0 = millis();
    9b7c:	f7f9 fa4e 	bl	301c <millis>
    9b80:	0003      	movs	r3, r0
    9b82:	60fb      	str	r3, [r7, #12]
  while ((status_ = spiRec()) == 0XFF) {
    9b84:	f7ff fc2c 	bl	93e0 <_ZL6spiRecv>
    9b88:	0003      	movs	r3, r0
    9b8a:	001a      	movs	r2, r3
    9b8c:	687b      	ldr	r3, [r7, #4]
    9b8e:	72da      	strb	r2, [r3, #11]
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	7adb      	ldrb	r3, [r3, #11]
    9b94:	3bff      	subs	r3, #255	; 0xff
    9b96:	425a      	negs	r2, r3
    9b98:	4153      	adcs	r3, r2
    9b9a:	b2db      	uxtb	r3, r3
    9b9c:	2b00      	cmp	r3, #0
    9b9e:	d010      	beq.n	9bc2 <_ZN7Sd2Card14waitStartBlockEv+0x4e>
    unsigned int d = millis() - t0;
    9ba0:	f7f9 fa3c 	bl	301c <millis>
    9ba4:	0002      	movs	r2, r0
    9ba6:	68fb      	ldr	r3, [r7, #12]
    9ba8:	1ad3      	subs	r3, r2, r3
    9baa:	60bb      	str	r3, [r7, #8]
    if (d > SD_READ_TIMEOUT) {
    9bac:	68ba      	ldr	r2, [r7, #8]
    9bae:	2396      	movs	r3, #150	; 0x96
    9bb0:	005b      	lsls	r3, r3, #1
    9bb2:	429a      	cmp	r2, r3
    9bb4:	d9e6      	bls.n	9b84 <_ZN7Sd2Card14waitStartBlockEv+0x10>
      error(SD_CARD_ERROR_READ_TIMEOUT);
    9bb6:	687b      	ldr	r3, [r7, #4]
    9bb8:	210f      	movs	r1, #15
    9bba:	0018      	movs	r0, r3
    9bbc:	f7ff fb92 	bl	92e4 <_ZN7Sd2Card5errorEh>
      goto fail;
    9bc0:	e00b      	b.n	9bda <_ZN7Sd2Card14waitStartBlockEv+0x66>
    }
  }
  if (status_ != DATA_START_BLOCK) {
    9bc2:	687b      	ldr	r3, [r7, #4]
    9bc4:	7adb      	ldrb	r3, [r3, #11]
    9bc6:	2bfe      	cmp	r3, #254	; 0xfe
    9bc8:	d005      	beq.n	9bd6 <_ZN7Sd2Card14waitStartBlockEv+0x62>
    error(SD_CARD_ERROR_READ);
    9bca:	687b      	ldr	r3, [r7, #4]
    9bcc:	210d      	movs	r1, #13
    9bce:	0018      	movs	r0, r3
    9bd0:	f7ff fb88 	bl	92e4 <_ZN7Sd2Card5errorEh>
    goto fail;
    9bd4:	e001      	b.n	9bda <_ZN7Sd2Card14waitStartBlockEv+0x66>
  }
  return true;
    9bd6:	2301      	movs	r3, #1
    9bd8:	e004      	b.n	9be4 <_ZN7Sd2Card14waitStartBlockEv+0x70>

 fail:
  chipSelectHigh();
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	0018      	movs	r0, r3
    9bde:	f7ff fc8f 	bl	9500 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9be2:	2300      	movs	r3, #0
}
    9be4:	0018      	movs	r0, r3
    9be6:	46bd      	mov	sp, r7
    9be8:	b004      	add	sp, #16
    9bea:	bd80      	pop	{r7, pc}

00009bec <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    9bec:	b580      	push	{r7, lr}
    9bee:	b084      	sub	sp, #16
    9bf0:	af00      	add	r7, sp, #0
    9bf2:	60f8      	str	r0, [r7, #12]
    9bf4:	60b9      	str	r1, [r7, #8]
    9bf6:	607a      	str	r2, [r7, #4]
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    9bf8:	68bb      	ldr	r3, [r7, #8]
    9bfa:	2b00      	cmp	r3, #0
    9bfc:	d105      	bne.n	9c0a <_ZN7Sd2Card10writeBlockEmPKh+0x1e>
    error(SD_CARD_ERROR_WRITE_BLOCK_ZERO);
    9bfe:	68fb      	ldr	r3, [r7, #12]
    9c00:	2112      	movs	r1, #18
    9c02:	0018      	movs	r0, r3
    9c04:	f7ff fb6e 	bl	92e4 <_ZN7Sd2Card5errorEh>
    goto fail;
    9c08:	e05c      	b.n	9cc4 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    9c0a:	68fb      	ldr	r3, [r7, #12]
    9c0c:	0018      	movs	r0, r3
    9c0e:	f7ff fb43 	bl	9298 <_ZNK7Sd2Card4typeEv>
    9c12:	0003      	movs	r3, r0
    9c14:	3b03      	subs	r3, #3
    9c16:	1e5a      	subs	r2, r3, #1
    9c18:	4193      	sbcs	r3, r2
    9c1a:	b2db      	uxtb	r3, r3
    9c1c:	2b00      	cmp	r3, #0
    9c1e:	d002      	beq.n	9c26 <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
    9c20:	68bb      	ldr	r3, [r7, #8]
    9c22:	025b      	lsls	r3, r3, #9
    9c24:	60bb      	str	r3, [r7, #8]
  if (cardCommand(CMD24, blockNumber)) {
    9c26:	68ba      	ldr	r2, [r7, #8]
    9c28:	68fb      	ldr	r3, [r7, #12]
    9c2a:	2118      	movs	r1, #24
    9c2c:	0018      	movs	r0, r3
    9c2e:	f7ff fbe5 	bl	93fc <_ZN7Sd2Card11cardCommandEhm>
    9c32:	0003      	movs	r3, r0
    9c34:	1e5a      	subs	r2, r3, #1
    9c36:	4193      	sbcs	r3, r2
    9c38:	b2db      	uxtb	r3, r3
    9c3a:	2b00      	cmp	r3, #0
    9c3c:	d005      	beq.n	9c4a <_ZN7Sd2Card10writeBlockEmPKh+0x5e>
    error(SD_CARD_ERROR_CMD24);
    9c3e:	68fb      	ldr	r3, [r7, #12]
    9c40:	2104      	movs	r1, #4
    9c42:	0018      	movs	r0, r3
    9c44:	f7ff fb4e 	bl	92e4 <_ZN7Sd2Card5errorEh>
    goto fail;
    9c48:	e03c      	b.n	9cc4 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    9c4a:	687a      	ldr	r2, [r7, #4]
    9c4c:	68fb      	ldr	r3, [r7, #12]
    9c4e:	21fe      	movs	r1, #254	; 0xfe
    9c50:	0018      	movs	r0, r3
    9c52:	f000 f841 	bl	9cd8 <_ZN7Sd2Card9writeDataEhPKh>
    9c56:	0003      	movs	r3, r0
    9c58:	425a      	negs	r2, r3
    9c5a:	4153      	adcs	r3, r2
    9c5c:	b2db      	uxtb	r3, r3
    9c5e:	2b00      	cmp	r3, #0
    9c60:	d12f      	bne.n	9cc2 <_ZN7Sd2Card10writeBlockEmPKh+0xd6>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9c62:	2396      	movs	r3, #150	; 0x96
    9c64:	009a      	lsls	r2, r3, #2
    9c66:	68fb      	ldr	r3, [r7, #12]
    9c68:	0011      	movs	r1, r2
    9c6a:	0018      	movs	r0, r3
    9c6c:	f7ff ff5e 	bl	9b2c <_ZN7Sd2Card11waitNotBusyEj>
    9c70:	0003      	movs	r3, r0
    9c72:	425a      	negs	r2, r3
    9c74:	4153      	adcs	r3, r2
    9c76:	b2db      	uxtb	r3, r3
    9c78:	2b00      	cmp	r3, #0
    9c7a:	d005      	beq.n	9c88 <_ZN7Sd2Card10writeBlockEmPKh+0x9c>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    9c7c:	68fb      	ldr	r3, [r7, #12]
    9c7e:	2115      	movs	r1, #21
    9c80:	0018      	movs	r0, r3
    9c82:	f7ff fb2f 	bl	92e4 <_ZN7Sd2Card5errorEh>
    goto fail;
    9c86:	e01d      	b.n	9cc4 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    9c88:	68fb      	ldr	r3, [r7, #12]
    9c8a:	2200      	movs	r2, #0
    9c8c:	210d      	movs	r1, #13
    9c8e:	0018      	movs	r0, r3
    9c90:	f7ff fbb4 	bl	93fc <_ZN7Sd2Card11cardCommandEhm>
    9c94:	1e03      	subs	r3, r0, #0
    9c96:	d103      	bne.n	9ca0 <_ZN7Sd2Card10writeBlockEmPKh+0xb4>
    9c98:	f7ff fba2 	bl	93e0 <_ZL6spiRecv>
    9c9c:	1e03      	subs	r3, r0, #0
    9c9e:	d001      	beq.n	9ca4 <_ZN7Sd2Card10writeBlockEmPKh+0xb8>
    9ca0:	2301      	movs	r3, #1
    9ca2:	e000      	b.n	9ca6 <_ZN7Sd2Card10writeBlockEmPKh+0xba>
    9ca4:	2300      	movs	r3, #0
    9ca6:	2b00      	cmp	r3, #0
    9ca8:	d005      	beq.n	9cb6 <_ZN7Sd2Card10writeBlockEmPKh+0xca>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    9caa:	68fb      	ldr	r3, [r7, #12]
    9cac:	2114      	movs	r1, #20
    9cae:	0018      	movs	r0, r3
    9cb0:	f7ff fb18 	bl	92e4 <_ZN7Sd2Card5errorEh>
    goto fail;
    9cb4:	e006      	b.n	9cc4 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  chipSelectHigh();
    9cb6:	68fb      	ldr	r3, [r7, #12]
    9cb8:	0018      	movs	r0, r3
    9cba:	f7ff fc21 	bl	9500 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    9cbe:	2301      	movs	r3, #1
    9cc0:	e005      	b.n	9cce <_ZN7Sd2Card10writeBlockEmPKh+0xe2>
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    9cc2:	46c0      	nop			; (mov r8, r8)

 fail:
  chipSelectHigh();
    9cc4:	68fb      	ldr	r3, [r7, #12]
    9cc6:	0018      	movs	r0, r3
    9cc8:	f7ff fc1a 	bl	9500 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9ccc:	2300      	movs	r3, #0
}
    9cce:	0018      	movs	r0, r3
    9cd0:	46bd      	mov	sp, r7
    9cd2:	b004      	add	sp, #16
    9cd4:	bd80      	pop	{r7, pc}
	...

00009cd8 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    9cd8:	b580      	push	{r7, lr}
    9cda:	b086      	sub	sp, #24
    9cdc:	af00      	add	r7, sp, #0
    9cde:	60f8      	str	r0, [r7, #12]
    9ce0:	607a      	str	r2, [r7, #4]
    9ce2:	230b      	movs	r3, #11
    9ce4:	18fb      	adds	r3, r7, r3
    9ce6:	1c0a      	adds	r2, r1, #0
    9ce8:	701a      	strb	r2, [r3, #0]
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
    9cea:	230b      	movs	r3, #11
    9cec:	18fb      	adds	r3, r7, r3
    9cee:	781b      	ldrb	r3, [r3, #0]
    9cf0:	0018      	movs	r0, r3
    9cf2:	f7ff fb61 	bl	93b8 <_ZL7spiSendh>
  for (uint16_t i = 0; i < 512; i++) {
    9cf6:	2316      	movs	r3, #22
    9cf8:	18fb      	adds	r3, r7, r3
    9cfa:	2200      	movs	r2, #0
    9cfc:	801a      	strh	r2, [r3, #0]
    9cfe:	2316      	movs	r3, #22
    9d00:	18fb      	adds	r3, r7, r3
    9d02:	881b      	ldrh	r3, [r3, #0]
    9d04:	4a1b      	ldr	r2, [pc, #108]	; (9d74 <_ZN7Sd2Card9writeDataEhPKh+0x9c>)
    9d06:	4293      	cmp	r3, r2
    9d08:	dc10      	bgt.n	9d2c <_ZN7Sd2Card9writeDataEhPKh+0x54>
    spiSend(src[i]);
    9d0a:	2316      	movs	r3, #22
    9d0c:	18fb      	adds	r3, r7, r3
    9d0e:	881b      	ldrh	r3, [r3, #0]
    9d10:	687a      	ldr	r2, [r7, #4]
    9d12:	18d3      	adds	r3, r2, r3
    9d14:	781b      	ldrb	r3, [r3, #0]
    9d16:	0018      	movs	r0, r3
    9d18:	f7ff fb4e 	bl	93b8 <_ZL7spiSendh>
  for (uint16_t i = 0; i < 512; i++) {
    9d1c:	2316      	movs	r3, #22
    9d1e:	18fb      	adds	r3, r7, r3
    9d20:	881a      	ldrh	r2, [r3, #0]
    9d22:	2316      	movs	r3, #22
    9d24:	18fb      	adds	r3, r7, r3
    9d26:	3201      	adds	r2, #1
    9d28:	801a      	strh	r2, [r3, #0]
    9d2a:	e7e8      	b.n	9cfe <_ZN7Sd2Card9writeDataEhPKh+0x26>
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
    9d2c:	20ff      	movs	r0, #255	; 0xff
    9d2e:	f7ff fb43 	bl	93b8 <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
    9d32:	20ff      	movs	r0, #255	; 0xff
    9d34:	f7ff fb40 	bl	93b8 <_ZL7spiSendh>

  status_ = spiRec();
    9d38:	f7ff fb52 	bl	93e0 <_ZL6spiRecv>
    9d3c:	0003      	movs	r3, r0
    9d3e:	001a      	movs	r2, r3
    9d40:	68fb      	ldr	r3, [r7, #12]
    9d42:	72da      	strb	r2, [r3, #11]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    9d44:	68fb      	ldr	r3, [r7, #12]
    9d46:	7adb      	ldrb	r3, [r3, #11]
    9d48:	001a      	movs	r2, r3
    9d4a:	231f      	movs	r3, #31
    9d4c:	4013      	ands	r3, r2
    9d4e:	2b05      	cmp	r3, #5
    9d50:	d00a      	beq.n	9d68 <_ZN7Sd2Card9writeDataEhPKh+0x90>
    error(SD_CARD_ERROR_WRITE);
    9d52:	68fb      	ldr	r3, [r7, #12]
    9d54:	2111      	movs	r1, #17
    9d56:	0018      	movs	r0, r3
    9d58:	f7ff fac4 	bl	92e4 <_ZN7Sd2Card5errorEh>
    chipSelectHigh();
    9d5c:	68fb      	ldr	r3, [r7, #12]
    9d5e:	0018      	movs	r0, r3
    9d60:	f7ff fbce 	bl	9500 <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    9d64:	2300      	movs	r3, #0
    9d66:	e000      	b.n	9d6a <_ZN7Sd2Card9writeDataEhPKh+0x92>
  }
  return true;
    9d68:	2301      	movs	r3, #1
}
    9d6a:	0018      	movs	r0, r3
    9d6c:	46bd      	mov	sp, r7
    9d6e:	b006      	add	sp, #24
    9d70:	bd80      	pop	{r7, pc}
    9d72:	46c0      	nop			; (mov r8, r8)
    9d74:	000001ff 	.word	0x000001ff

00009d78 <_Z41__static_initialization_and_destruction_0ii>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    9d78:	b580      	push	{r7, lr}
    9d7a:	b082      	sub	sp, #8
    9d7c:	af00      	add	r7, sp, #0
    9d7e:	6078      	str	r0, [r7, #4]
    9d80:	6039      	str	r1, [r7, #0]
    9d82:	687b      	ldr	r3, [r7, #4]
    9d84:	2b01      	cmp	r3, #1
    9d86:	d107      	bne.n	9d98 <_Z41__static_initialization_and_destruction_0ii+0x20>
    9d88:	683b      	ldr	r3, [r7, #0]
    9d8a:	4a05      	ldr	r2, [pc, #20]	; (9da0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    9d8c:	4293      	cmp	r3, r2
    9d8e:	d103      	bne.n	9d98 <_Z41__static_initialization_and_destruction_0ii+0x20>
static SPISettings settings;
    9d90:	4b04      	ldr	r3, [pc, #16]	; (9da4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    9d92:	0018      	movs	r0, r3
    9d94:	f7ff fac4 	bl	9320 <_ZN11SPISettingsC1Ev>
}
    9d98:	46c0      	nop			; (mov r8, r8)
    9d9a:	46bd      	mov	sp, r7
    9d9c:	b002      	add	sp, #8
    9d9e:	bd80      	pop	{r7, pc}
    9da0:	0000ffff 	.word	0x0000ffff
    9da4:	20000958 	.word	0x20000958

00009da8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    9da8:	b580      	push	{r7, lr}
    9daa:	af00      	add	r7, sp, #0
    9dac:	4b03      	ldr	r3, [pc, #12]	; (9dbc <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x14>)
    9dae:	0019      	movs	r1, r3
    9db0:	2001      	movs	r0, #1
    9db2:	f7ff ffe1 	bl	9d78 <_Z41__static_initialization_and_destruction_0ii>
    9db6:	46bd      	mov	sp, r7
    9db8:	bd80      	pop	{r7, pc}
    9dba:	46c0      	nop			; (mov r8, r8)
    9dbc:	0000ffff 	.word	0x0000ffff

00009dc0 <_ZL11DIR_IS_FILEPK14directoryEntry>:
  return (dir->attributes & DIR_ATT_LONG_NAME_MASK) == DIR_ATT_LONG_NAME;
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
    9dc0:	b580      	push	{r7, lr}
    9dc2:	b082      	sub	sp, #8
    9dc4:	af00      	add	r7, sp, #0
    9dc6:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    9dc8:	687b      	ldr	r3, [r7, #4]
    9dca:	7adb      	ldrb	r3, [r3, #11]
    9dcc:	001a      	movs	r2, r3
    9dce:	2318      	movs	r3, #24
    9dd0:	4013      	ands	r3, r2
    9dd2:	425a      	negs	r2, r3
    9dd4:	4153      	adcs	r3, r2
    9dd6:	b2db      	uxtb	r3, r3
}
    9dd8:	0018      	movs	r0, r3
    9dda:	46bd      	mov	sp, r7
    9ddc:	b002      	add	sp, #8
    9dde:	bd80      	pop	{r7, pc}

00009de0 <_ZL13DIR_IS_SUBDIRPK14directoryEntry>:
/** Directory entry is for a subdirectory */
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
    9de0:	b580      	push	{r7, lr}
    9de2:	b082      	sub	sp, #8
    9de4:	af00      	add	r7, sp, #0
    9de6:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
    9de8:	687b      	ldr	r3, [r7, #4]
    9dea:	7adb      	ldrb	r3, [r3, #11]
    9dec:	001a      	movs	r2, r3
    9dee:	2318      	movs	r3, #24
    9df0:	4013      	ands	r3, r2
    9df2:	3b10      	subs	r3, #16
    9df4:	425a      	negs	r2, r3
    9df6:	4153      	adcs	r3, r2
    9df8:	b2db      	uxtb	r3, r3
}
    9dfa:	0018      	movs	r0, r3
    9dfc:	46bd      	mov	sp, r7
    9dfe:	b002      	add	sp, #8
    9e00:	bd80      	pop	{r7, pc}

00009e02 <_ZNK6SdFile6isFileEv>:
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
    9e02:	b580      	push	{r7, lr}
    9e04:	b082      	sub	sp, #8
    9e06:	af00      	add	r7, sp, #0
    9e08:	6078      	str	r0, [r7, #4]
    9e0a:	687b      	ldr	r3, [r7, #4]
    9e0c:	7a5b      	ldrb	r3, [r3, #9]
    9e0e:	3b01      	subs	r3, #1
    9e10:	425a      	negs	r2, r3
    9e12:	4153      	adcs	r3, r2
    9e14:	b2db      	uxtb	r3, r3
    9e16:	0018      	movs	r0, r3
    9e18:	46bd      	mov	sp, r7
    9e1a:	b002      	add	sp, #8
    9e1c:	bd80      	pop	{r7, pc}

00009e1e <_ZN6SdFile7seekEndEv>:
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    9e1e:	b580      	push	{r7, lr}
    9e20:	b082      	sub	sp, #8
    9e22:	af00      	add	r7, sp, #0
    9e24:	6078      	str	r0, [r7, #4]
    9e26:	687b      	ldr	r3, [r7, #4]
    9e28:	69da      	ldr	r2, [r3, #28]
    9e2a:	687b      	ldr	r3, [r7, #4]
    9e2c:	0011      	movs	r1, r2
    9e2e:	0018      	movs	r0, r3
    9e30:	f000 fdda 	bl	a9e8 <_ZN6SdFile7seekSetEm>
    9e34:	0003      	movs	r3, r0
    9e36:	0018      	movs	r0, r3
    9e38:	46bd      	mov	sp, r7
    9e3a:	b002      	add	sp, #8
    9e3c:	bd80      	pop	{r7, pc}

00009e3e <_ZNK6SdFile14unbufferedReadEv>:
  uint8_t unbufferedRead(void) const {
    9e3e:	b580      	push	{r7, lr}
    9e40:	b082      	sub	sp, #8
    9e42:	af00      	add	r7, sp, #0
    9e44:	6078      	str	r0, [r7, #4]
    return flags_ & F_FILE_UNBUFFERED_READ;
    9e46:	687b      	ldr	r3, [r7, #4]
    9e48:	7a1b      	ldrb	r3, [r3, #8]
    9e4a:	2240      	movs	r2, #64	; 0x40
    9e4c:	4013      	ands	r3, r2
    9e4e:	b2db      	uxtb	r3, r3
  }
    9e50:	0018      	movs	r0, r3
    9e52:	46bd      	mov	sp, r7
    9e54:	b002      	add	sp, #8
    9e56:	bd80      	pop	{r7, pc}

00009e58 <_ZNK8SdVolume7fatTypeEv>:
  uint8_t fatType(void) const {return fatType_;}
    9e58:	b580      	push	{r7, lr}
    9e5a:	b082      	sub	sp, #8
    9e5c:	af00      	add	r7, sp, #0
    9e5e:	6078      	str	r0, [r7, #4]
    9e60:	687b      	ldr	r3, [r7, #4]
    9e62:	2220      	movs	r2, #32
    9e64:	5c9b      	ldrb	r3, [r3, r2]
    9e66:	0018      	movs	r0, r3
    9e68:	46bd      	mov	sp, r7
    9e6a:	b002      	add	sp, #8
    9e6c:	bd80      	pop	{r7, pc}

00009e6e <_ZNK8SdVolume17rootDirEntryCountEv>:
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
    9e6e:	b580      	push	{r7, lr}
    9e70:	b082      	sub	sp, #8
    9e72:	af00      	add	r7, sp, #0
    9e74:	6078      	str	r0, [r7, #4]
    9e76:	687b      	ldr	r3, [r7, #4]
    9e78:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9e7a:	0018      	movs	r0, r3
    9e7c:	46bd      	mov	sp, r7
    9e7e:	b002      	add	sp, #8
    9e80:	bd80      	pop	{r7, pc}

00009e82 <_ZNK8SdVolume12rootDirStartEv>:
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    9e82:	b580      	push	{r7, lr}
    9e84:	b082      	sub	sp, #8
    9e86:	af00      	add	r7, sp, #0
    9e88:	6078      	str	r0, [r7, #4]
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9e8e:	0018      	movs	r0, r3
    9e90:	46bd      	mov	sp, r7
    9e92:	b002      	add	sp, #8
    9e94:	bd80      	pop	{r7, pc}

00009e96 <_ZNK8SdVolume14blockOfClusterEm>:
  uint8_t fatType_;             // volume type (12, 16, OR 32)
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    9e96:	b580      	push	{r7, lr}
    9e98:	b082      	sub	sp, #8
    9e9a:	af00      	add	r7, sp, #0
    9e9c:	6078      	str	r0, [r7, #4]
    9e9e:	6039      	str	r1, [r7, #0]
          return (position >> 9) & (blocksPerCluster_ - 1);}
    9ea0:	683b      	ldr	r3, [r7, #0]
    9ea2:	0a5b      	lsrs	r3, r3, #9
    9ea4:	b2db      	uxtb	r3, r3
    9ea6:	687a      	ldr	r2, [r7, #4]
    9ea8:	7912      	ldrb	r2, [r2, #4]
    9eaa:	3a01      	subs	r2, #1
    9eac:	b2d2      	uxtb	r2, r2
    9eae:	4013      	ands	r3, r2
    9eb0:	b2db      	uxtb	r3, r3
    9eb2:	0018      	movs	r0, r3
    9eb4:	46bd      	mov	sp, r7
    9eb6:	b002      	add	sp, #8
    9eb8:	bd80      	pop	{r7, pc}

00009eba <_ZNK8SdVolume17clusterStartBlockEm>:
  uint32_t clusterStartBlock(uint32_t cluster) const {
    9eba:	b580      	push	{r7, lr}
    9ebc:	b082      	sub	sp, #8
    9ebe:	af00      	add	r7, sp, #0
    9ec0:	6078      	str	r0, [r7, #4]
    9ec2:	6039      	str	r1, [r7, #0]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	695a      	ldr	r2, [r3, #20]
    9ec8:	683b      	ldr	r3, [r7, #0]
    9eca:	3b02      	subs	r3, #2
    9ecc:	6879      	ldr	r1, [r7, #4]
    9ece:	7c09      	ldrb	r1, [r1, #16]
    9ed0:	408b      	lsls	r3, r1
    9ed2:	18d3      	adds	r3, r2, r3
    9ed4:	0018      	movs	r0, r3
    9ed6:	46bd      	mov	sp, r7
    9ed8:	b002      	add	sp, #8
    9eda:	bd80      	pop	{r7, pc}

00009edc <_ZN8SdVolume13cacheSetDirtyEv>:
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    9edc:	b580      	push	{r7, lr}
    9ede:	af00      	add	r7, sp, #0
    9ee0:	4b04      	ldr	r3, [pc, #16]	; (9ef4 <_ZN8SdVolume13cacheSetDirtyEv+0x18>)
    9ee2:	781b      	ldrb	r3, [r3, #0]
    9ee4:	2201      	movs	r2, #1
    9ee6:	4313      	orrs	r3, r2
    9ee8:	b2da      	uxtb	r2, r3
    9eea:	4b02      	ldr	r3, [pc, #8]	; (9ef4 <_ZN8SdVolume13cacheSetDirtyEv+0x18>)
    9eec:	701a      	strb	r2, [r3, #0]
    9eee:	46c0      	nop			; (mov r8, r8)
    9ef0:	46bd      	mov	sp, r7
    9ef2:	bd80      	pop	{r7, pc}
    9ef4:	20000b6c 	.word	0x20000b6c

00009ef8 <_ZN8SdVolume9fatPutEOCEm>:
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    9ef8:	b580      	push	{r7, lr}
    9efa:	b082      	sub	sp, #8
    9efc:	af00      	add	r7, sp, #0
    9efe:	6078      	str	r0, [r7, #4]
    9f00:	6039      	str	r1, [r7, #0]
    return fatPut(cluster, 0x0FFFFFFF);
    9f02:	4a05      	ldr	r2, [pc, #20]	; (9f18 <_ZN8SdVolume9fatPutEOCEm+0x20>)
    9f04:	6839      	ldr	r1, [r7, #0]
    9f06:	687b      	ldr	r3, [r7, #4]
    9f08:	0018      	movs	r0, r3
    9f0a:	f001 facb 	bl	b4a4 <_ZN8SdVolume6fatPutEmm>
    9f0e:	0003      	movs	r3, r0
  }
    9f10:	0018      	movs	r0, r3
    9f12:	46bd      	mov	sp, r7
    9f14:	b002      	add	sp, #8
    9f16:	bd80      	pop	{r7, pc}
    9f18:	0fffffff 	.word	0x0fffffff

00009f1c <_ZNK8SdVolume5isEOCEm>:
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    9f1c:	b580      	push	{r7, lr}
    9f1e:	b082      	sub	sp, #8
    9f20:	af00      	add	r7, sp, #0
    9f22:	6078      	str	r0, [r7, #4]
    9f24:	6039      	str	r1, [r7, #0]
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    9f26:	687b      	ldr	r3, [r7, #4]
    9f28:	2220      	movs	r2, #32
    9f2a:	5c9b      	ldrb	r3, [r3, r2]
    9f2c:	2b10      	cmp	r3, #16
    9f2e:	d101      	bne.n	9f34 <_ZNK8SdVolume5isEOCEm+0x18>
    9f30:	4a05      	ldr	r2, [pc, #20]	; (9f48 <_ZNK8SdVolume5isEOCEm+0x2c>)
    9f32:	e000      	b.n	9f36 <_ZNK8SdVolume5isEOCEm+0x1a>
    9f34:	4a05      	ldr	r2, [pc, #20]	; (9f4c <_ZNK8SdVolume5isEOCEm+0x30>)
    9f36:	6839      	ldr	r1, [r7, #0]
    9f38:	2300      	movs	r3, #0
    9f3a:	4291      	cmp	r1, r2
    9f3c:	415b      	adcs	r3, r3
    9f3e:	b2db      	uxtb	r3, r3
  }
    9f40:	0018      	movs	r0, r3
    9f42:	46bd      	mov	sp, r7
    9f44:	b002      	add	sp, #8
    9f46:	bd80      	pop	{r7, pc}
    9f48:	0000fff8 	.word	0x0000fff8
    9f4c:	0ffffff8 	.word	0x0ffffff8

00009f50 <_ZN8SdVolume8readDataEmttPh>:
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    9f50:	b590      	push	{r4, r7, lr}
    9f52:	b087      	sub	sp, #28
    9f54:	af02      	add	r7, sp, #8
    9f56:	60f8      	str	r0, [r7, #12]
    9f58:	60b9      	str	r1, [r7, #8]
    9f5a:	0019      	movs	r1, r3
    9f5c:	1dbb      	adds	r3, r7, #6
    9f5e:	801a      	strh	r2, [r3, #0]
    9f60:	1d3b      	adds	r3, r7, #4
    9f62:	1c0a      	adds	r2, r1, #0
    9f64:	801a      	strh	r2, [r3, #0]
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    9f66:	4b08      	ldr	r3, [pc, #32]	; (9f88 <_ZN8SdVolume8readDataEmttPh+0x38>)
    9f68:	6818      	ldr	r0, [r3, #0]
    9f6a:	1d3b      	adds	r3, r7, #4
    9f6c:	881c      	ldrh	r4, [r3, #0]
    9f6e:	1dbb      	adds	r3, r7, #6
    9f70:	881a      	ldrh	r2, [r3, #0]
    9f72:	68b9      	ldr	r1, [r7, #8]
    9f74:	6a3b      	ldr	r3, [r7, #32]
    9f76:	9300      	str	r3, [sp, #0]
    9f78:	0023      	movs	r3, r4
    9f7a:	f7ff fc65 	bl	9848 <_ZN7Sd2Card8readDataEmttPh>
    9f7e:	0003      	movs	r3, r0
  }
    9f80:	0018      	movs	r0, r3
    9f82:	46bd      	mov	sp, r7
    9f84:	b005      	add	sp, #20
    9f86:	bd90      	pop	{r4, r7, pc}
    9f88:	20000b68 	.word	0x20000b68

00009f8c <_ZN8SdVolume10writeBlockEmPKh>:
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    9f8c:	b580      	push	{r7, lr}
    9f8e:	b084      	sub	sp, #16
    9f90:	af00      	add	r7, sp, #0
    9f92:	60f8      	str	r0, [r7, #12]
    9f94:	60b9      	str	r1, [r7, #8]
    9f96:	607a      	str	r2, [r7, #4]
    return sdCard_->writeBlock(block, dst);
    9f98:	4b05      	ldr	r3, [pc, #20]	; (9fb0 <_ZN8SdVolume10writeBlockEmPKh+0x24>)
    9f9a:	681b      	ldr	r3, [r3, #0]
    9f9c:	687a      	ldr	r2, [r7, #4]
    9f9e:	68b9      	ldr	r1, [r7, #8]
    9fa0:	0018      	movs	r0, r3
    9fa2:	f7ff fe23 	bl	9bec <_ZN7Sd2Card10writeBlockEmPKh>
    9fa6:	0003      	movs	r3, r0
  }
    9fa8:	0018      	movs	r0, r3
    9faa:	46bd      	mov	sp, r7
    9fac:	b004      	add	sp, #16
    9fae:	bd80      	pop	{r7, pc}
    9fb0:	20000b68 	.word	0x20000b68

00009fb4 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    9fb4:	b580      	push	{r7, lr}
    9fb6:	b082      	sub	sp, #8
    9fb8:	af00      	add	r7, sp, #0
    9fba:	6078      	str	r0, [r7, #4]
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    9fbc:	687b      	ldr	r3, [r7, #4]
    9fbe:	6a58      	ldr	r0, [r3, #36]	; 0x24
    9fc0:	687b      	ldr	r3, [r7, #4]
    9fc2:	330c      	adds	r3, #12
    9fc4:	001a      	movs	r2, r3
    9fc6:	2101      	movs	r1, #1
    9fc8:	f001 f88e 	bl	b0e8 <_ZN8SdVolume15allocContiguousEmPm>
    9fcc:	0003      	movs	r3, r0
    9fce:	425a      	negs	r2, r3
    9fd0:	4153      	adcs	r3, r2
    9fd2:	b2db      	uxtb	r3, r3
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	d001      	beq.n	9fdc <_ZN6SdFile10addClusterEv+0x28>
    9fd8:	2300      	movs	r3, #0
    9fda:	e010      	b.n	9ffe <_ZN6SdFile10addClusterEv+0x4a>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    9fdc:	687b      	ldr	r3, [r7, #4]
    9fde:	6a1b      	ldr	r3, [r3, #32]
    9fe0:	2b00      	cmp	r3, #0
    9fe2:	d10b      	bne.n	9ffc <_ZN6SdFile10addClusterEv+0x48>
    firstCluster_ = curCluster_;
    9fe4:	687b      	ldr	r3, [r7, #4]
    9fe6:	68da      	ldr	r2, [r3, #12]
    9fe8:	687b      	ldr	r3, [r7, #4]
    9fea:	621a      	str	r2, [r3, #32]
    flags_ |= F_FILE_DIR_DIRTY;
    9fec:	687b      	ldr	r3, [r7, #4]
    9fee:	7a1b      	ldrb	r3, [r3, #8]
    9ff0:	2280      	movs	r2, #128	; 0x80
    9ff2:	4252      	negs	r2, r2
    9ff4:	4313      	orrs	r3, r2
    9ff6:	b2da      	uxtb	r2, r3
    9ff8:	687b      	ldr	r3, [r7, #4]
    9ffa:	721a      	strb	r2, [r3, #8]
  }
  return true;
    9ffc:	2301      	movs	r3, #1
}
    9ffe:	0018      	movs	r0, r3
    a000:	46bd      	mov	sp, r7
    a002:	b002      	add	sp, #8
    a004:	bd80      	pop	{r7, pc}

0000a006 <_ZN6SdFile13addDirClusterEv>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    a006:	b580      	push	{r7, lr}
    a008:	b084      	sub	sp, #16
    a00a:	af00      	add	r7, sp, #0
    a00c:	6078      	str	r0, [r7, #4]
  if (!addCluster()) return false;
    a00e:	687b      	ldr	r3, [r7, #4]
    a010:	0018      	movs	r0, r3
    a012:	f7ff ffcf 	bl	9fb4 <_ZN6SdFile10addClusterEv>
    a016:	0003      	movs	r3, r0
    a018:	425a      	negs	r2, r3
    a01a:	4153      	adcs	r3, r2
    a01c:	b2db      	uxtb	r3, r3
    a01e:	2b00      	cmp	r3, #0
    a020:	d001      	beq.n	a026 <_ZN6SdFile13addDirClusterEv+0x20>
    a022:	2300      	movs	r3, #0
    a024:	e03a      	b.n	a09c <_ZN6SdFile13addDirClusterEv+0x96>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    a026:	687b      	ldr	r3, [r7, #4]
    a028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a02a:	687b      	ldr	r3, [r7, #4]
    a02c:	68db      	ldr	r3, [r3, #12]
    a02e:	0019      	movs	r1, r3
    a030:	0010      	movs	r0, r2
    a032:	f7ff ff42 	bl	9eba <_ZNK8SdVolume17clusterStartBlockEm>
    a036:	0003      	movs	r3, r0
    a038:	60bb      	str	r3, [r7, #8]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    a03a:	687b      	ldr	r3, [r7, #4]
    a03c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a03e:	230f      	movs	r3, #15
    a040:	18fb      	adds	r3, r7, r3
    a042:	7912      	ldrb	r2, [r2, #4]
    a044:	701a      	strb	r2, [r3, #0]
    a046:	230f      	movs	r3, #15
    a048:	18fb      	adds	r3, r7, r3
    a04a:	781b      	ldrb	r3, [r3, #0]
    a04c:	2b00      	cmp	r3, #0
    a04e:	d018      	beq.n	a082 <_ZN6SdFile13addDirClusterEv+0x7c>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    a050:	230f      	movs	r3, #15
    a052:	18fb      	adds	r3, r7, r3
    a054:	781a      	ldrb	r2, [r3, #0]
    a056:	68bb      	ldr	r3, [r7, #8]
    a058:	18d3      	adds	r3, r2, r3
    a05a:	3b01      	subs	r3, #1
    a05c:	0018      	movs	r0, r3
    a05e:	f001 f963 	bl	b328 <_ZN8SdVolume14cacheZeroBlockEm>
    a062:	0003      	movs	r3, r0
    a064:	425a      	negs	r2, r3
    a066:	4153      	adcs	r3, r2
    a068:	b2db      	uxtb	r3, r3
    a06a:	2b00      	cmp	r3, #0
    a06c:	d001      	beq.n	a072 <_ZN6SdFile13addDirClusterEv+0x6c>
    a06e:	2300      	movs	r3, #0
    a070:	e014      	b.n	a09c <_ZN6SdFile13addDirClusterEv+0x96>
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    a072:	230f      	movs	r3, #15
    a074:	18fb      	adds	r3, r7, r3
    a076:	781a      	ldrb	r2, [r3, #0]
    a078:	230f      	movs	r3, #15
    a07a:	18fb      	adds	r3, r7, r3
    a07c:	3a01      	subs	r2, #1
    a07e:	701a      	strb	r2, [r3, #0]
    a080:	e7e1      	b.n	a046 <_ZN6SdFile13addDirClusterEv+0x40>
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    a082:	687b      	ldr	r3, [r7, #4]
    a084:	69da      	ldr	r2, [r3, #28]
    a086:	687b      	ldr	r3, [r7, #4]
    a088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a08a:	7c1b      	ldrb	r3, [r3, #16]
    a08c:	0019      	movs	r1, r3
    a08e:	2380      	movs	r3, #128	; 0x80
    a090:	009b      	lsls	r3, r3, #2
    a092:	408b      	lsls	r3, r1
    a094:	18d2      	adds	r2, r2, r3
    a096:	687b      	ldr	r3, [r7, #4]
    a098:	61da      	str	r2, [r3, #28]
  return true;
    a09a:	2301      	movs	r3, #1
}
    a09c:	0018      	movs	r0, r3
    a09e:	46bd      	mov	sp, r7
    a0a0:	b004      	add	sp, #16
    a0a2:	bd80      	pop	{r7, pc}

0000a0a4 <_ZN6SdFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    a0a4:	b580      	push	{r7, lr}
    a0a6:	b082      	sub	sp, #8
    a0a8:	af00      	add	r7, sp, #0
    a0aa:	6078      	str	r0, [r7, #4]
    a0ac:	000a      	movs	r2, r1
    a0ae:	1cfb      	adds	r3, r7, #3
    a0b0:	701a      	strb	r2, [r3, #0]
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    a0b2:	687b      	ldr	r3, [r7, #4]
    a0b4:	695a      	ldr	r2, [r3, #20]
    a0b6:	1cfb      	adds	r3, r7, #3
    a0b8:	781b      	ldrb	r3, [r3, #0]
    a0ba:	0019      	movs	r1, r3
    a0bc:	0010      	movs	r0, r2
    a0be:	f001 f8f5 	bl	b2ac <_ZN8SdVolume13cacheRawBlockEmh>
    a0c2:	0003      	movs	r3, r0
    a0c4:	425a      	negs	r2, r3
    a0c6:	4153      	adcs	r3, r2
    a0c8:	b2db      	uxtb	r3, r3
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d001      	beq.n	a0d2 <_ZN6SdFile13cacheDirEntryEh+0x2e>
    a0ce:	2300      	movs	r3, #0
    a0d0:	e004      	b.n	a0dc <_ZN6SdFile13cacheDirEntryEh+0x38>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    a0d2:	687b      	ldr	r3, [r7, #4]
    a0d4:	7e1b      	ldrb	r3, [r3, #24]
    a0d6:	015a      	lsls	r2, r3, #5
    a0d8:	4b02      	ldr	r3, [pc, #8]	; (a0e4 <_ZN6SdFile13cacheDirEntryEh+0x40>)
    a0da:	18d3      	adds	r3, r2, r3
}
    a0dc:	0018      	movs	r0, r3
    a0de:	46bd      	mov	sp, r7
    a0e0:	b002      	add	sp, #8
    a0e2:	bd80      	pop	{r7, pc}
    a0e4:	20000968 	.word	0x20000968

0000a0e8 <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    a0e8:	b580      	push	{r7, lr}
    a0ea:	b082      	sub	sp, #8
    a0ec:	af00      	add	r7, sp, #0
    a0ee:	6078      	str	r0, [r7, #4]
  if (!sync())return false;
    a0f0:	687b      	ldr	r3, [r7, #4]
    a0f2:	0018      	movs	r0, r3
    a0f4:	f000 fce8 	bl	aac8 <_ZN6SdFile4syncEv>
    a0f8:	0003      	movs	r3, r0
    a0fa:	425a      	negs	r2, r3
    a0fc:	4153      	adcs	r3, r2
    a0fe:	b2db      	uxtb	r3, r3
    a100:	2b00      	cmp	r3, #0
    a102:	d001      	beq.n	a108 <_ZN6SdFile5closeEv+0x20>
    a104:	2300      	movs	r3, #0
    a106:	e003      	b.n	a110 <_ZN6SdFile5closeEv+0x28>
  type_ = FAT_FILE_TYPE_CLOSED;
    a108:	687b      	ldr	r3, [r7, #4]
    a10a:	2200      	movs	r2, #0
    a10c:	725a      	strb	r2, [r3, #9]
  return true;
    a10e:	2301      	movs	r3, #1
}
    a110:	0018      	movs	r0, r3
    a112:	46bd      	mov	sp, r7
    a114:	b002      	add	sp, #8
    a116:	bd80      	pop	{r7, pc}

0000a118 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    a118:	b590      	push	{r4, r7, lr}
    a11a:	b08b      	sub	sp, #44	; 0x2c
    a11c:	af00      	add	r7, sp, #0
    a11e:	6078      	str	r0, [r7, #4]
    a120:	6039      	str	r1, [r7, #0]
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
    a122:	2327      	movs	r3, #39	; 0x27
    a124:	18fb      	adds	r3, r7, r3
    a126:	2207      	movs	r2, #7
    a128:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
    a12a:	2326      	movs	r3, #38	; 0x26
    a12c:	18fb      	adds	r3, r7, r3
    a12e:	2200      	movs	r2, #0
    a130:	701a      	strb	r2, [r3, #0]
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    a132:	2326      	movs	r3, #38	; 0x26
    a134:	18fb      	adds	r3, r7, r3
    a136:	781b      	ldrb	r3, [r3, #0]
    a138:	2b0a      	cmp	r3, #10
    a13a:	dc0c      	bgt.n	a156 <_ZN6SdFile10make83NameEPKcPh+0x3e>
    a13c:	2326      	movs	r3, #38	; 0x26
    a13e:	18fb      	adds	r3, r7, r3
    a140:	781b      	ldrb	r3, [r3, #0]
    a142:	2226      	movs	r2, #38	; 0x26
    a144:	18ba      	adds	r2, r7, r2
    a146:	1c59      	adds	r1, r3, #1
    a148:	7011      	strb	r1, [r2, #0]
    a14a:	001a      	movs	r2, r3
    a14c:	683b      	ldr	r3, [r7, #0]
    a14e:	189b      	adds	r3, r3, r2
    a150:	2220      	movs	r2, #32
    a152:	701a      	strb	r2, [r3, #0]
    a154:	e7ed      	b.n	a132 <_ZN6SdFile10make83NameEPKcPh+0x1a>
  i = 0;
    a156:	2326      	movs	r3, #38	; 0x26
    a158:	18fb      	adds	r3, r7, r3
    a15a:	2200      	movs	r2, #0
    a15c:	701a      	strb	r2, [r3, #0]
  while ((c = *str++) != '\0') {
    a15e:	687b      	ldr	r3, [r7, #4]
    a160:	1c5a      	adds	r2, r3, #1
    a162:	607a      	str	r2, [r7, #4]
    a164:	221f      	movs	r2, #31
    a166:	18ba      	adds	r2, r7, r2
    a168:	781b      	ldrb	r3, [r3, #0]
    a16a:	7013      	strb	r3, [r2, #0]
    a16c:	231f      	movs	r3, #31
    a16e:	18fb      	adds	r3, r7, r3
    a170:	781b      	ldrb	r3, [r3, #0]
    a172:	1e5a      	subs	r2, r3, #1
    a174:	4193      	sbcs	r3, r2
    a176:	b2db      	uxtb	r3, r3
    a178:	2b00      	cmp	r3, #0
    a17a:	d100      	bne.n	a17e <_ZN6SdFile10make83NameEPKcPh+0x66>
    a17c:	e06a      	b.n	a254 <_ZN6SdFile10make83NameEPKcPh+0x13c>
    if (c == '.') {
    a17e:	231f      	movs	r3, #31
    a180:	18fb      	adds	r3, r7, r3
    a182:	781b      	ldrb	r3, [r3, #0]
    a184:	2b2e      	cmp	r3, #46	; 0x2e
    a186:	d10f      	bne.n	a1a8 <_ZN6SdFile10make83NameEPKcPh+0x90>
      if (n == 10) return false;  // only one dot allowed
    a188:	2327      	movs	r3, #39	; 0x27
    a18a:	18fb      	adds	r3, r7, r3
    a18c:	781b      	ldrb	r3, [r3, #0]
    a18e:	2b0a      	cmp	r3, #10
    a190:	d101      	bne.n	a196 <_ZN6SdFile10make83NameEPKcPh+0x7e>
    a192:	2300      	movs	r3, #0
    a194:	e064      	b.n	a260 <_ZN6SdFile10make83NameEPKcPh+0x148>
      n = 10;  // max index for full 8.3 name
    a196:	2327      	movs	r3, #39	; 0x27
    a198:	18fb      	adds	r3, r7, r3
    a19a:	220a      	movs	r2, #10
    a19c:	701a      	strb	r2, [r3, #0]
      i = 8;   // place for extension
    a19e:	2326      	movs	r3, #38	; 0x26
    a1a0:	18fb      	adds	r3, r7, r3
    a1a2:	2208      	movs	r2, #8
    a1a4:	701a      	strb	r2, [r3, #0]
    a1a6:	e7da      	b.n	a15e <_ZN6SdFile10make83NameEPKcPh+0x46>
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
#elif defined(__arm__)
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    a1a8:	230c      	movs	r3, #12
    a1aa:	18fb      	adds	r3, r7, r3
    a1ac:	4a2e      	ldr	r2, [pc, #184]	; (a268 <_ZN6SdFile10make83NameEPKcPh+0x150>)
    a1ae:	ca13      	ldmia	r2!, {r0, r1, r4}
    a1b0:	c313      	stmia	r3!, {r0, r1, r4}
    a1b2:	6812      	ldr	r2, [r2, #0]
    a1b4:	601a      	str	r2, [r3, #0]
      const uint8_t *p = valid;
    a1b6:	230c      	movs	r3, #12
    a1b8:	18fb      	adds	r3, r7, r3
    a1ba:	623b      	str	r3, [r7, #32]
      while ((b = *p++)) if (b == c) return false;
    a1bc:	6a3b      	ldr	r3, [r7, #32]
    a1be:	1c5a      	adds	r2, r3, #1
    a1c0:	623a      	str	r2, [r7, #32]
    a1c2:	221e      	movs	r2, #30
    a1c4:	18ba      	adds	r2, r7, r2
    a1c6:	781b      	ldrb	r3, [r3, #0]
    a1c8:	7013      	strb	r3, [r2, #0]
    a1ca:	231e      	movs	r3, #30
    a1cc:	18fb      	adds	r3, r7, r3
    a1ce:	781b      	ldrb	r3, [r3, #0]
    a1d0:	1e5a      	subs	r2, r3, #1
    a1d2:	4193      	sbcs	r3, r2
    a1d4:	b2db      	uxtb	r3, r3
    a1d6:	2b00      	cmp	r3, #0
    a1d8:	d009      	beq.n	a1ee <_ZN6SdFile10make83NameEPKcPh+0xd6>
    a1da:	231e      	movs	r3, #30
    a1dc:	18fa      	adds	r2, r7, r3
    a1de:	231f      	movs	r3, #31
    a1e0:	18fb      	adds	r3, r7, r3
    a1e2:	7812      	ldrb	r2, [r2, #0]
    a1e4:	781b      	ldrb	r3, [r3, #0]
    a1e6:	429a      	cmp	r2, r3
    a1e8:	d1e8      	bne.n	a1bc <_ZN6SdFile10make83NameEPKcPh+0xa4>
    a1ea:	2300      	movs	r3, #0
    a1ec:	e038      	b.n	a260 <_ZN6SdFile10make83NameEPKcPh+0x148>
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    a1ee:	2326      	movs	r3, #38	; 0x26
    a1f0:	18fb      	adds	r3, r7, r3
    a1f2:	781a      	ldrb	r2, [r3, #0]
    a1f4:	2327      	movs	r3, #39	; 0x27
    a1f6:	18fb      	adds	r3, r7, r3
    a1f8:	781b      	ldrb	r3, [r3, #0]
    a1fa:	429a      	cmp	r2, r3
    a1fc:	dc09      	bgt.n	a212 <_ZN6SdFile10make83NameEPKcPh+0xfa>
    a1fe:	231f      	movs	r3, #31
    a200:	18fb      	adds	r3, r7, r3
    a202:	781b      	ldrb	r3, [r3, #0]
    a204:	2b20      	cmp	r3, #32
    a206:	dd04      	ble.n	a212 <_ZN6SdFile10make83NameEPKcPh+0xfa>
    a208:	231f      	movs	r3, #31
    a20a:	18fb      	adds	r3, r7, r3
    a20c:	781b      	ldrb	r3, [r3, #0]
    a20e:	2b7e      	cmp	r3, #126	; 0x7e
    a210:	dd01      	ble.n	a216 <_ZN6SdFile10make83NameEPKcPh+0xfe>
    a212:	2300      	movs	r3, #0
    a214:	e024      	b.n	a260 <_ZN6SdFile10make83NameEPKcPh+0x148>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    a216:	2326      	movs	r3, #38	; 0x26
    a218:	18fb      	adds	r3, r7, r3
    a21a:	781b      	ldrb	r3, [r3, #0]
    a21c:	2226      	movs	r2, #38	; 0x26
    a21e:	18ba      	adds	r2, r7, r2
    a220:	1c59      	adds	r1, r3, #1
    a222:	7011      	strb	r1, [r2, #0]
    a224:	001a      	movs	r2, r3
    a226:	683b      	ldr	r3, [r7, #0]
    a228:	189a      	adds	r2, r3, r2
    a22a:	231f      	movs	r3, #31
    a22c:	18fb      	adds	r3, r7, r3
    a22e:	781b      	ldrb	r3, [r3, #0]
    a230:	2b60      	cmp	r3, #96	; 0x60
    a232:	dd0a      	ble.n	a24a <_ZN6SdFile10make83NameEPKcPh+0x132>
    a234:	231f      	movs	r3, #31
    a236:	18fb      	adds	r3, r7, r3
    a238:	781b      	ldrb	r3, [r3, #0]
    a23a:	2b7a      	cmp	r3, #122	; 0x7a
    a23c:	dc05      	bgt.n	a24a <_ZN6SdFile10make83NameEPKcPh+0x132>
    a23e:	231f      	movs	r3, #31
    a240:	18fb      	adds	r3, r7, r3
    a242:	781b      	ldrb	r3, [r3, #0]
    a244:	3b20      	subs	r3, #32
    a246:	b2db      	uxtb	r3, r3
    a248:	e002      	b.n	a250 <_ZN6SdFile10make83NameEPKcPh+0x138>
    a24a:	231f      	movs	r3, #31
    a24c:	18fb      	adds	r3, r7, r3
    a24e:	781b      	ldrb	r3, [r3, #0]
    a250:	7013      	strb	r3, [r2, #0]
  while ((c = *str++) != '\0') {
    a252:	e784      	b.n	a15e <_ZN6SdFile10make83NameEPKcPh+0x46>
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    a254:	683b      	ldr	r3, [r7, #0]
    a256:	781b      	ldrb	r3, [r3, #0]
    a258:	3b20      	subs	r3, #32
    a25a:	1e5a      	subs	r2, r3, #1
    a25c:	4193      	sbcs	r3, r2
    a25e:	b2db      	uxtb	r3, r3
}
    a260:	0018      	movs	r0, r3
    a262:	46bd      	mov	sp, r7
    a264:	b00b      	add	sp, #44	; 0x2c
    a266:	bd90      	pop	{r4, r7, pc}
    a268:	000137f8 	.word	0x000137f8

0000a26c <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    a26c:	b590      	push	{r4, r7, lr}
    a26e:	b08b      	sub	sp, #44	; 0x2c
    a270:	af00      	add	r7, sp, #0
    a272:	60f8      	str	r0, [r7, #12]
    a274:	60b9      	str	r1, [r7, #8]
    a276:	607a      	str	r2, [r7, #4]
    a278:	001a      	movs	r2, r3
    a27a:	1cfb      	adds	r3, r7, #3
    a27c:	701a      	strb	r2, [r3, #0]
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    a27e:	68fb      	ldr	r3, [r7, #12]
    a280:	0018      	movs	r0, r3
    a282:	f7fe fbbc 	bl	89fe <_ZNK6SdFile6isOpenEv>
    a286:	0003      	movs	r3, r0
    a288:	1e5a      	subs	r2, r3, #1
    a28a:	4193      	sbcs	r3, r2
    a28c:	b2db      	uxtb	r3, r3
    a28e:	2b00      	cmp	r3, #0
    a290:	d001      	beq.n	a296 <_ZN6SdFile4openEPS_PKch+0x2a>
    a292:	2300      	movs	r3, #0
    a294:	e13c      	b.n	a510 <_ZN6SdFile4openEPS_PKch+0x2a4>

  if (!make83Name(fileName, dname)) return false;
    a296:	2314      	movs	r3, #20
    a298:	18fa      	adds	r2, r7, r3
    a29a:	687b      	ldr	r3, [r7, #4]
    a29c:	0011      	movs	r1, r2
    a29e:	0018      	movs	r0, r3
    a2a0:	f7ff ff3a 	bl	a118 <_ZN6SdFile10make83NameEPKcPh>
    a2a4:	0003      	movs	r3, r0
    a2a6:	425a      	negs	r2, r3
    a2a8:	4153      	adcs	r3, r2
    a2aa:	b2db      	uxtb	r3, r3
    a2ac:	2b00      	cmp	r3, #0
    a2ae:	d001      	beq.n	a2b4 <_ZN6SdFile4openEPS_PKch+0x48>
    a2b0:	2300      	movs	r3, #0
    a2b2:	e12d      	b.n	a510 <_ZN6SdFile4openEPS_PKch+0x2a4>
  vol_ = dirFile->vol_;
    a2b4:	68bb      	ldr	r3, [r7, #8]
    a2b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a2b8:	68fb      	ldr	r3, [r7, #12]
    a2ba:	625a      	str	r2, [r3, #36]	; 0x24
  dirFile->rewind();
    a2bc:	68bb      	ldr	r3, [r7, #8]
    a2be:	0018      	movs	r0, r3
    a2c0:	f7fe fd8c 	bl	8ddc <_ZN6SdFile6rewindEv>

  // bool for empty entry found
  uint8_t emptyFound = false;
    a2c4:	2323      	movs	r3, #35	; 0x23
    a2c6:	18fb      	adds	r3, r7, r3
    a2c8:	2200      	movs	r2, #0
    a2ca:	701a      	strb	r2, [r3, #0]

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    a2cc:	68bb      	ldr	r3, [r7, #8]
    a2ce:	691a      	ldr	r2, [r3, #16]
    a2d0:	68bb      	ldr	r3, [r7, #8]
    a2d2:	69db      	ldr	r3, [r3, #28]
    a2d4:	429a      	cmp	r2, r3
    a2d6:	d252      	bcs.n	a37e <_ZN6SdFile4openEPS_PKch+0x112>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    a2d8:	68bb      	ldr	r3, [r7, #8]
    a2da:	691b      	ldr	r3, [r3, #16]
    a2dc:	095b      	lsrs	r3, r3, #5
    a2de:	b2da      	uxtb	r2, r3
    a2e0:	2322      	movs	r3, #34	; 0x22
    a2e2:	18fb      	adds	r3, r7, r3
    a2e4:	210f      	movs	r1, #15
    a2e6:	400a      	ands	r2, r1
    a2e8:	701a      	strb	r2, [r3, #0]
    p = dirFile->readDirCache();
    a2ea:	68bb      	ldr	r3, [r7, #8]
    a2ec:	0018      	movs	r0, r3
    a2ee:	f000 fb43 	bl	a978 <_ZN6SdFile12readDirCacheEv>
    a2f2:	0003      	movs	r3, r0
    a2f4:	627b      	str	r3, [r7, #36]	; 0x24
    if (p == NULL) return false;
    a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2f8:	2b00      	cmp	r3, #0
    a2fa:	d101      	bne.n	a300 <_ZN6SdFile4openEPS_PKch+0x94>
    a2fc:	2300      	movs	r3, #0
    a2fe:	e107      	b.n	a510 <_ZN6SdFile4openEPS_PKch+0x2a4>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a302:	781b      	ldrb	r3, [r3, #0]
    a304:	2b00      	cmp	r3, #0
    a306:	d003      	beq.n	a310 <_ZN6SdFile4openEPS_PKch+0xa4>
    a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a30a:	781b      	ldrb	r3, [r3, #0]
    a30c:	2be5      	cmp	r3, #229	; 0xe5
    a30e:	d116      	bne.n	a33e <_ZN6SdFile4openEPS_PKch+0xd2>
      // remember first empty slot
      if (!emptyFound) {
    a310:	2323      	movs	r3, #35	; 0x23
    a312:	18fb      	adds	r3, r7, r3
    a314:	781b      	ldrb	r3, [r3, #0]
    a316:	2b00      	cmp	r3, #0
    a318:	d10c      	bne.n	a334 <_ZN6SdFile4openEPS_PKch+0xc8>
        emptyFound = true;
    a31a:	2323      	movs	r3, #35	; 0x23
    a31c:	18fb      	adds	r3, r7, r3
    a31e:	2201      	movs	r2, #1
    a320:	701a      	strb	r2, [r3, #0]
        dirIndex_ = index;
    a322:	68fb      	ldr	r3, [r7, #12]
    a324:	2222      	movs	r2, #34	; 0x22
    a326:	18ba      	adds	r2, r7, r2
    a328:	7812      	ldrb	r2, [r2, #0]
    a32a:	761a      	strb	r2, [r3, #24]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    a32c:	4b7a      	ldr	r3, [pc, #488]	; (a518 <_ZN6SdFile4openEPS_PKch+0x2ac>)
    a32e:	681a      	ldr	r2, [r3, #0]
    a330:	68fb      	ldr	r3, [r7, #12]
    a332:	615a      	str	r2, [r3, #20]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a336:	781b      	ldrb	r3, [r3, #0]
    a338:	2b00      	cmp	r3, #0
    a33a:	d11f      	bne.n	a37c <_ZN6SdFile4openEPS_PKch+0x110>
    a33c:	e01f      	b.n	a37e <_ZN6SdFile4openEPS_PKch+0x112>
    } else if (!memcmp(dname, p->name, 11)) {
    a33e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a340:	2314      	movs	r3, #20
    a342:	18fb      	adds	r3, r7, r3
    a344:	220b      	movs	r2, #11
    a346:	0018      	movs	r0, r3
    a348:	f006 fb66 	bl	10a18 <memcmp>
    a34c:	1e03      	subs	r3, r0, #0
    a34e:	d1bd      	bne.n	a2cc <_ZN6SdFile4openEPS_PKch+0x60>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    a350:	1cfb      	adds	r3, r7, #3
    a352:	781b      	ldrb	r3, [r3, #0]
    a354:	2230      	movs	r2, #48	; 0x30
    a356:	4013      	ands	r3, r2
    a358:	2b30      	cmp	r3, #48	; 0x30
    a35a:	d101      	bne.n	a360 <_ZN6SdFile4openEPS_PKch+0xf4>
    a35c:	2300      	movs	r3, #0
    a35e:	e0d7      	b.n	a510 <_ZN6SdFile4openEPS_PKch+0x2a4>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    a360:	2322      	movs	r3, #34	; 0x22
    a362:	18fb      	adds	r3, r7, r3
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	220f      	movs	r2, #15
    a368:	4013      	ands	r3, r2
    a36a:	b2d9      	uxtb	r1, r3
    a36c:	1cfb      	adds	r3, r7, #3
    a36e:	781a      	ldrb	r2, [r3, #0]
    a370:	68fb      	ldr	r3, [r7, #12]
    a372:	0018      	movs	r0, r3
    a374:	f000 f8d6 	bl	a524 <_ZN6SdFile15openCachedEntryEhh>
    a378:	0003      	movs	r3, r0
    a37a:	e0c9      	b.n	a510 <_ZN6SdFile4openEPS_PKch+0x2a4>
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    a37c:	e7a6      	b.n	a2cc <_ZN6SdFile4openEPS_PKch+0x60>
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    a37e:	1cfb      	adds	r3, r7, #3
    a380:	781b      	ldrb	r3, [r3, #0]
    a382:	2212      	movs	r2, #18
    a384:	4013      	ands	r3, r2
    a386:	2b12      	cmp	r3, #18
    a388:	d001      	beq.n	a38e <_ZN6SdFile4openEPS_PKch+0x122>
    a38a:	2300      	movs	r3, #0
    a38c:	e0c0      	b.n	a510 <_ZN6SdFile4openEPS_PKch+0x2a4>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    a38e:	2323      	movs	r3, #35	; 0x23
    a390:	18fb      	adds	r3, r7, r3
    a392:	781b      	ldrb	r3, [r3, #0]
    a394:	2b00      	cmp	r3, #0
    a396:	d00b      	beq.n	a3b0 <_ZN6SdFile4openEPS_PKch+0x144>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    a398:	68fb      	ldr	r3, [r7, #12]
    a39a:	2101      	movs	r1, #1
    a39c:	0018      	movs	r0, r3
    a39e:	f7ff fe81 	bl	a0a4 <_ZN6SdFile13cacheDirEntryEh>
    a3a2:	0003      	movs	r3, r0
    a3a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (!p) return false;
    a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a3a8:	2b00      	cmp	r3, #0
    a3aa:	d118      	bne.n	a3de <_ZN6SdFile4openEPS_PKch+0x172>
    a3ac:	2300      	movs	r3, #0
    a3ae:	e0af      	b.n	a510 <_ZN6SdFile4openEPS_PKch+0x2a4>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    a3b0:	68bb      	ldr	r3, [r7, #8]
    a3b2:	7a5b      	ldrb	r3, [r3, #9]
    a3b4:	2b02      	cmp	r3, #2
    a3b6:	d101      	bne.n	a3bc <_ZN6SdFile4openEPS_PKch+0x150>
    a3b8:	2300      	movs	r3, #0
    a3ba:	e0a9      	b.n	a510 <_ZN6SdFile4openEPS_PKch+0x2a4>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    a3bc:	68bb      	ldr	r3, [r7, #8]
    a3be:	0018      	movs	r0, r3
    a3c0:	f7ff fe21 	bl	a006 <_ZN6SdFile13addDirClusterEv>
    a3c4:	0003      	movs	r3, r0
    a3c6:	425a      	negs	r2, r3
    a3c8:	4153      	adcs	r3, r2
    a3ca:	b2db      	uxtb	r3, r3
    a3cc:	2b00      	cmp	r3, #0
    a3ce:	d001      	beq.n	a3d4 <_ZN6SdFile4openEPS_PKch+0x168>
    a3d0:	2300      	movs	r3, #0
    a3d2:	e09d      	b.n	a510 <_ZN6SdFile4openEPS_PKch+0x2a4>

    // use first entry in cluster
    dirIndex_ = 0;
    a3d4:	68fb      	ldr	r3, [r7, #12]
    a3d6:	2200      	movs	r2, #0
    a3d8:	761a      	strb	r2, [r3, #24]
    p = SdVolume::cacheBuffer_.dir;
    a3da:	4b50      	ldr	r3, [pc, #320]	; (a51c <_ZN6SdFile4openEPS_PKch+0x2b0>)
    a3dc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a3e0:	2220      	movs	r2, #32
    a3e2:	2100      	movs	r1, #0
    a3e4:	0018      	movs	r0, r3
    a3e6:	f006 fb2f 	bl	10a48 <memset>
  memcpy(p->name, dname, 11);
    a3ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a3ec:	2314      	movs	r3, #20
    a3ee:	18fb      	adds	r3, r7, r3
    a3f0:	0010      	movs	r0, r2
    a3f2:	0019      	movs	r1, r3
    a3f4:	230b      	movs	r3, #11
    a3f6:	001a      	movs	r2, r3
    a3f8:	f006 fb1d 	bl	10a36 <memcpy>

  // set timestamps
  if (dateTime_) {
    a3fc:	4b48      	ldr	r3, [pc, #288]	; (a520 <_ZN6SdFile4openEPS_PKch+0x2b4>)
    a3fe:	681b      	ldr	r3, [r3, #0]
    a400:	2b00      	cmp	r3, #0
    a402:	d009      	beq.n	a418 <_ZN6SdFile4openEPS_PKch+0x1ac>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    a404:	4b46      	ldr	r3, [pc, #280]	; (a520 <_ZN6SdFile4openEPS_PKch+0x2b4>)
    a406:	681b      	ldr	r3, [r3, #0]
    a408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a40a:	3210      	adds	r2, #16
    a40c:	0010      	movs	r0, r2
    a40e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a410:	320e      	adds	r2, #14
    a412:	0011      	movs	r1, r2
    a414:	4798      	blx	r3
    a416:	e01a      	b.n	a44e <_ZN6SdFile4openEPS_PKch+0x1e2>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a41a:	7c1a      	ldrb	r2, [r3, #16]
    a41c:	2100      	movs	r1, #0
    a41e:	400a      	ands	r2, r1
    a420:	1c11      	adds	r1, r2, #0
    a422:	2221      	movs	r2, #33	; 0x21
    a424:	430a      	orrs	r2, r1
    a426:	741a      	strb	r2, [r3, #16]
    a428:	7c5a      	ldrb	r2, [r3, #17]
    a42a:	2100      	movs	r1, #0
    a42c:	400a      	ands	r2, r1
    a42e:	1c11      	adds	r1, r2, #0
    a430:	2228      	movs	r2, #40	; 0x28
    a432:	430a      	orrs	r2, r1
    a434:	745a      	strb	r2, [r3, #17]
    p->creationTime = FAT_DEFAULT_TIME;
    a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a438:	7b9a      	ldrb	r2, [r3, #14]
    a43a:	2100      	movs	r1, #0
    a43c:	400a      	ands	r2, r1
    a43e:	739a      	strb	r2, [r3, #14]
    a440:	7bda      	ldrb	r2, [r3, #15]
    a442:	2100      	movs	r1, #0
    a444:	400a      	ands	r2, r1
    a446:	1c11      	adds	r1, r2, #0
    a448:	2208      	movs	r2, #8
    a44a:	430a      	orrs	r2, r1
    a44c:	73da      	strb	r2, [r3, #15]
  }
  p->lastAccessDate = p->creationDate;
    a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a450:	7c1a      	ldrb	r2, [r3, #16]
    a452:	7c5b      	ldrb	r3, [r3, #17]
    a454:	021b      	lsls	r3, r3, #8
    a456:	4313      	orrs	r3, r2
    a458:	b29a      	uxth	r2, r3
    a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a45c:	21ff      	movs	r1, #255	; 0xff
    a45e:	4011      	ands	r1, r2
    a460:	000c      	movs	r4, r1
    a462:	7c99      	ldrb	r1, [r3, #18]
    a464:	2000      	movs	r0, #0
    a466:	4001      	ands	r1, r0
    a468:	1c08      	adds	r0, r1, #0
    a46a:	1c21      	adds	r1, r4, #0
    a46c:	4301      	orrs	r1, r0
    a46e:	7499      	strb	r1, [r3, #18]
    a470:	0a12      	lsrs	r2, r2, #8
    a472:	b290      	uxth	r0, r2
    a474:	7cda      	ldrb	r2, [r3, #19]
    a476:	2100      	movs	r1, #0
    a478:	400a      	ands	r2, r1
    a47a:	1c11      	adds	r1, r2, #0
    a47c:	1c02      	adds	r2, r0, #0
    a47e:	430a      	orrs	r2, r1
    a480:	74da      	strb	r2, [r3, #19]
  p->lastWriteDate = p->creationDate;
    a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a484:	7c1a      	ldrb	r2, [r3, #16]
    a486:	7c5b      	ldrb	r3, [r3, #17]
    a488:	021b      	lsls	r3, r3, #8
    a48a:	4313      	orrs	r3, r2
    a48c:	b29a      	uxth	r2, r3
    a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a490:	21ff      	movs	r1, #255	; 0xff
    a492:	4011      	ands	r1, r2
    a494:	000c      	movs	r4, r1
    a496:	7e19      	ldrb	r1, [r3, #24]
    a498:	2000      	movs	r0, #0
    a49a:	4001      	ands	r1, r0
    a49c:	1c08      	adds	r0, r1, #0
    a49e:	1c21      	adds	r1, r4, #0
    a4a0:	4301      	orrs	r1, r0
    a4a2:	7619      	strb	r1, [r3, #24]
    a4a4:	0a12      	lsrs	r2, r2, #8
    a4a6:	b290      	uxth	r0, r2
    a4a8:	7e5a      	ldrb	r2, [r3, #25]
    a4aa:	2100      	movs	r1, #0
    a4ac:	400a      	ands	r2, r1
    a4ae:	1c11      	adds	r1, r2, #0
    a4b0:	1c02      	adds	r2, r0, #0
    a4b2:	430a      	orrs	r2, r1
    a4b4:	765a      	strb	r2, [r3, #25]
  p->lastWriteTime = p->creationTime;
    a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a4b8:	7b9a      	ldrb	r2, [r3, #14]
    a4ba:	7bdb      	ldrb	r3, [r3, #15]
    a4bc:	021b      	lsls	r3, r3, #8
    a4be:	4313      	orrs	r3, r2
    a4c0:	b29a      	uxth	r2, r3
    a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a4c4:	21ff      	movs	r1, #255	; 0xff
    a4c6:	4011      	ands	r1, r2
    a4c8:	000c      	movs	r4, r1
    a4ca:	7d99      	ldrb	r1, [r3, #22]
    a4cc:	2000      	movs	r0, #0
    a4ce:	4001      	ands	r1, r0
    a4d0:	1c08      	adds	r0, r1, #0
    a4d2:	1c21      	adds	r1, r4, #0
    a4d4:	4301      	orrs	r1, r0
    a4d6:	7599      	strb	r1, [r3, #22]
    a4d8:	0a12      	lsrs	r2, r2, #8
    a4da:	b290      	uxth	r0, r2
    a4dc:	7dda      	ldrb	r2, [r3, #23]
    a4de:	2100      	movs	r1, #0
    a4e0:	400a      	ands	r2, r1
    a4e2:	1c11      	adds	r1, r2, #0
    a4e4:	1c02      	adds	r2, r0, #0
    a4e6:	430a      	orrs	r2, r1
    a4e8:	75da      	strb	r2, [r3, #23]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    a4ea:	f000 fea1 	bl	b230 <_ZN8SdVolume10cacheFlushEv>
    a4ee:	0003      	movs	r3, r0
    a4f0:	425a      	negs	r2, r3
    a4f2:	4153      	adcs	r3, r2
    a4f4:	b2db      	uxtb	r3, r3
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	d001      	beq.n	a4fe <_ZN6SdFile4openEPS_PKch+0x292>
    a4fa:	2300      	movs	r3, #0
    a4fc:	e008      	b.n	a510 <_ZN6SdFile4openEPS_PKch+0x2a4>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    a4fe:	68fb      	ldr	r3, [r7, #12]
    a500:	7e19      	ldrb	r1, [r3, #24]
    a502:	1cfb      	adds	r3, r7, #3
    a504:	781a      	ldrb	r2, [r3, #0]
    a506:	68fb      	ldr	r3, [r7, #12]
    a508:	0018      	movs	r0, r3
    a50a:	f000 f80b 	bl	a524 <_ZN6SdFile15openCachedEntryEhh>
    a50e:	0003      	movs	r3, r0
}
    a510:	0018      	movs	r0, r3
    a512:	46bd      	mov	sp, r7
    a514:	b00b      	add	sp, #44	; 0x2c
    a516:	bd90      	pop	{r4, r7, pc}
    a518:	2000004c 	.word	0x2000004c
    a51c:	20000968 	.word	0x20000968
    a520:	20000964 	.word	0x20000964

0000a524 <_ZN6SdFile15openCachedEntryEhh>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    a524:	b580      	push	{r7, lr}
    a526:	b084      	sub	sp, #16
    a528:	af00      	add	r7, sp, #0
    a52a:	6078      	str	r0, [r7, #4]
    a52c:	0008      	movs	r0, r1
    a52e:	0011      	movs	r1, r2
    a530:	1cfb      	adds	r3, r7, #3
    a532:	1c02      	adds	r2, r0, #0
    a534:	701a      	strb	r2, [r3, #0]
    a536:	1cbb      	adds	r3, r7, #2
    a538:	1c0a      	adds	r2, r1, #0
    a53a:	701a      	strb	r2, [r3, #0]
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    a53c:	1cfb      	adds	r3, r7, #3
    a53e:	781b      	ldrb	r3, [r3, #0]
    a540:	015a      	lsls	r2, r3, #5
    a542:	4b43      	ldr	r3, [pc, #268]	; (a650 <_ZN6SdFile15openCachedEntryEhh+0x12c>)
    a544:	18d3      	adds	r3, r2, r3
    a546:	60fb      	str	r3, [r7, #12]

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    a548:	68fb      	ldr	r3, [r7, #12]
    a54a:	7adb      	ldrb	r3, [r3, #11]
    a54c:	001a      	movs	r2, r3
    a54e:	2311      	movs	r3, #17
    a550:	4013      	ands	r3, r2
    a552:	d006      	beq.n	a562 <_ZN6SdFile15openCachedEntryEhh+0x3e>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    a554:	1cbb      	adds	r3, r7, #2
    a556:	781b      	ldrb	r3, [r3, #0]
    a558:	2242      	movs	r2, #66	; 0x42
    a55a:	4013      	ands	r3, r2
    a55c:	d001      	beq.n	a562 <_ZN6SdFile15openCachedEntryEhh+0x3e>
    a55e:	2300      	movs	r3, #0
    a560:	e072      	b.n	a648 <_ZN6SdFile15openCachedEntryEhh+0x124>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    a562:	687b      	ldr	r3, [r7, #4]
    a564:	1cfa      	adds	r2, r7, #3
    a566:	7812      	ldrb	r2, [r2, #0]
    a568:	761a      	strb	r2, [r3, #24]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    a56a:	4b3a      	ldr	r3, [pc, #232]	; (a654 <_ZN6SdFile15openCachedEntryEhh+0x130>)
    a56c:	681a      	ldr	r2, [r3, #0]
    a56e:	687b      	ldr	r3, [r7, #4]
    a570:	615a      	str	r2, [r3, #20]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    a572:	68fb      	ldr	r3, [r7, #12]
    a574:	7d1a      	ldrb	r2, [r3, #20]
    a576:	7d5b      	ldrb	r3, [r3, #21]
    a578:	021b      	lsls	r3, r3, #8
    a57a:	4313      	orrs	r3, r2
    a57c:	b29b      	uxth	r3, r3
    a57e:	041a      	lsls	r2, r3, #16
    a580:	687b      	ldr	r3, [r7, #4]
    a582:	621a      	str	r2, [r3, #32]
  firstCluster_ |= p->firstClusterLow;
    a584:	687b      	ldr	r3, [r7, #4]
    a586:	6a1a      	ldr	r2, [r3, #32]
    a588:	68fb      	ldr	r3, [r7, #12]
    a58a:	7e99      	ldrb	r1, [r3, #26]
    a58c:	7edb      	ldrb	r3, [r3, #27]
    a58e:	021b      	lsls	r3, r3, #8
    a590:	430b      	orrs	r3, r1
    a592:	b29b      	uxth	r3, r3
    a594:	431a      	orrs	r2, r3
    a596:	687b      	ldr	r3, [r7, #4]
    a598:	621a      	str	r2, [r3, #32]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    a59a:	68fb      	ldr	r3, [r7, #12]
    a59c:	0018      	movs	r0, r3
    a59e:	f7ff fc0f 	bl	9dc0 <_ZL11DIR_IS_FILEPK14directoryEntry>
    a5a2:	0003      	movs	r3, r0
    a5a4:	1e5a      	subs	r2, r3, #1
    a5a6:	4193      	sbcs	r3, r2
    a5a8:	b2db      	uxtb	r3, r3
    a5aa:	2b00      	cmp	r3, #0
    a5ac:	d011      	beq.n	a5d2 <_ZN6SdFile15openCachedEntryEhh+0xae>
    fileSize_ = p->fileSize;
    a5ae:	68fb      	ldr	r3, [r7, #12]
    a5b0:	7f1a      	ldrb	r2, [r3, #28]
    a5b2:	7f59      	ldrb	r1, [r3, #29]
    a5b4:	0209      	lsls	r1, r1, #8
    a5b6:	430a      	orrs	r2, r1
    a5b8:	7f99      	ldrb	r1, [r3, #30]
    a5ba:	0409      	lsls	r1, r1, #16
    a5bc:	430a      	orrs	r2, r1
    a5be:	7fdb      	ldrb	r3, [r3, #31]
    a5c0:	061b      	lsls	r3, r3, #24
    a5c2:	4313      	orrs	r3, r2
    a5c4:	001a      	movs	r2, r3
    a5c6:	687b      	ldr	r3, [r7, #4]
    a5c8:	61da      	str	r2, [r3, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
    a5ca:	687b      	ldr	r3, [r7, #4]
    a5cc:	2201      	movs	r2, #1
    a5ce:	725a      	strb	r2, [r3, #9]
    a5d0:	e020      	b.n	a614 <_ZN6SdFile15openCachedEntryEhh+0xf0>
  } else if (DIR_IS_SUBDIR(p)) {
    a5d2:	68fb      	ldr	r3, [r7, #12]
    a5d4:	0018      	movs	r0, r3
    a5d6:	f7ff fc03 	bl	9de0 <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
    a5da:	0003      	movs	r3, r0
    a5dc:	1e5a      	subs	r2, r3, #1
    a5de:	4193      	sbcs	r3, r2
    a5e0:	b2db      	uxtb	r3, r3
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d014      	beq.n	a610 <_ZN6SdFile15openCachedEntryEhh+0xec>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    a5e6:	687b      	ldr	r3, [r7, #4]
    a5e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a5ea:	687b      	ldr	r3, [r7, #4]
    a5ec:	6a19      	ldr	r1, [r3, #32]
    a5ee:	687b      	ldr	r3, [r7, #4]
    a5f0:	331c      	adds	r3, #28
    a5f2:	001a      	movs	r2, r3
    a5f4:	f000 fece 	bl	b394 <_ZNK8SdVolume9chainSizeEmPm>
    a5f8:	0003      	movs	r3, r0
    a5fa:	425a      	negs	r2, r3
    a5fc:	4153      	adcs	r3, r2
    a5fe:	b2db      	uxtb	r3, r3
    a600:	2b00      	cmp	r3, #0
    a602:	d001      	beq.n	a608 <_ZN6SdFile15openCachedEntryEhh+0xe4>
    a604:	2300      	movs	r3, #0
    a606:	e01f      	b.n	a648 <_ZN6SdFile15openCachedEntryEhh+0x124>
    type_ = FAT_FILE_TYPE_SUBDIR;
    a608:	687b      	ldr	r3, [r7, #4]
    a60a:	2204      	movs	r2, #4
    a60c:	725a      	strb	r2, [r3, #9]
    a60e:	e001      	b.n	a614 <_ZN6SdFile15openCachedEntryEhh+0xf0>
  } else {
    return false;
    a610:	2300      	movs	r3, #0
    a612:	e019      	b.n	a648 <_ZN6SdFile15openCachedEntryEhh+0x124>
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    a614:	1cbb      	adds	r3, r7, #2
    a616:	781b      	ldrb	r3, [r3, #0]
    a618:	220f      	movs	r2, #15
    a61a:	4013      	ands	r3, r2
    a61c:	b2da      	uxtb	r2, r3
    a61e:	687b      	ldr	r3, [r7, #4]
    a620:	721a      	strb	r2, [r3, #8]

  // set to start of file
  curCluster_ = 0;
    a622:	687b      	ldr	r3, [r7, #4]
    a624:	2200      	movs	r2, #0
    a626:	60da      	str	r2, [r3, #12]
  curPosition_ = 0;
    a628:	687b      	ldr	r3, [r7, #4]
    a62a:	2200      	movs	r2, #0
    a62c:	611a      	str	r2, [r3, #16]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    a62e:	1cbb      	adds	r3, r7, #2
    a630:	781b      	ldrb	r3, [r3, #0]
    a632:	2240      	movs	r2, #64	; 0x40
    a634:	4013      	ands	r3, r2
    a636:	d006      	beq.n	a646 <_ZN6SdFile15openCachedEntryEhh+0x122>
    a638:	687b      	ldr	r3, [r7, #4]
    a63a:	2100      	movs	r1, #0
    a63c:	0018      	movs	r0, r3
    a63e:	f000 fb01 	bl	ac44 <_ZN6SdFile8truncateEm>
    a642:	0003      	movs	r3, r0
    a644:	e000      	b.n	a648 <_ZN6SdFile15openCachedEntryEhh+0x124>
  return true;
    a646:	2301      	movs	r3, #1
}
    a648:	0018      	movs	r0, r3
    a64a:	46bd      	mov	sp, r7
    a64c:	b004      	add	sp, #16
    a64e:	bd80      	pop	{r7, pc}
    a650:	20000968 	.word	0x20000968
    a654:	2000004c 	.word	0x2000004c

0000a658 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    a658:	b580      	push	{r7, lr}
    a65a:	b082      	sub	sp, #8
    a65c:	af00      	add	r7, sp, #0
    a65e:	6078      	str	r0, [r7, #4]
    a660:	6039      	str	r1, [r7, #0]
  // error if file is already open
  if (isOpen()) return false;
    a662:	687b      	ldr	r3, [r7, #4]
    a664:	0018      	movs	r0, r3
    a666:	f7fe f9ca 	bl	89fe <_ZNK6SdFile6isOpenEv>
    a66a:	0003      	movs	r3, r0
    a66c:	1e5a      	subs	r2, r3, #1
    a66e:	4193      	sbcs	r3, r2
    a670:	b2db      	uxtb	r3, r3
    a672:	2b00      	cmp	r3, #0
    a674:	d001      	beq.n	a67a <_ZN6SdFile8openRootEP8SdVolume+0x22>
    a676:	2300      	movs	r3, #0
    a678:	e054      	b.n	a724 <_ZN6SdFile8openRootEP8SdVolume+0xcc>

  if (vol->fatType() == 16) {
    a67a:	683b      	ldr	r3, [r7, #0]
    a67c:	0018      	movs	r0, r3
    a67e:	f7ff fbeb 	bl	9e58 <_ZNK8SdVolume7fatTypeEv>
    a682:	0003      	movs	r3, r0
    a684:	3b10      	subs	r3, #16
    a686:	425a      	negs	r2, r3
    a688:	4153      	adcs	r3, r2
    a68a:	b2db      	uxtb	r3, r3
    a68c:	2b00      	cmp	r3, #0
    a68e:	d00e      	beq.n	a6ae <_ZN6SdFile8openRootEP8SdVolume+0x56>
    type_ = FAT_FILE_TYPE_ROOT16;
    a690:	687b      	ldr	r3, [r7, #4]
    a692:	2202      	movs	r2, #2
    a694:	725a      	strb	r2, [r3, #9]
    firstCluster_ = 0;
    a696:	687b      	ldr	r3, [r7, #4]
    a698:	2200      	movs	r2, #0
    a69a:	621a      	str	r2, [r3, #32]
    fileSize_ = 32 * vol->rootDirEntryCount();
    a69c:	683b      	ldr	r3, [r7, #0]
    a69e:	0018      	movs	r0, r3
    a6a0:	f7ff fbe5 	bl	9e6e <_ZNK8SdVolume17rootDirEntryCountEv>
    a6a4:	0003      	movs	r3, r0
    a6a6:	015a      	lsls	r2, r3, #5
    a6a8:	687b      	ldr	r3, [r7, #4]
    a6aa:	61da      	str	r2, [r3, #28]
    a6ac:	e027      	b.n	a6fe <_ZN6SdFile8openRootEP8SdVolume+0xa6>
  } else if (vol->fatType() == 32) {
    a6ae:	683b      	ldr	r3, [r7, #0]
    a6b0:	0018      	movs	r0, r3
    a6b2:	f7ff fbd1 	bl	9e58 <_ZNK8SdVolume7fatTypeEv>
    a6b6:	0003      	movs	r3, r0
    a6b8:	3b20      	subs	r3, #32
    a6ba:	425a      	negs	r2, r3
    a6bc:	4153      	adcs	r3, r2
    a6be:	b2db      	uxtb	r3, r3
    a6c0:	2b00      	cmp	r3, #0
    a6c2:	d01a      	beq.n	a6fa <_ZN6SdFile8openRootEP8SdVolume+0xa2>
    type_ = FAT_FILE_TYPE_ROOT32;
    a6c4:	687b      	ldr	r3, [r7, #4]
    a6c6:	2203      	movs	r2, #3
    a6c8:	725a      	strb	r2, [r3, #9]
    firstCluster_ = vol->rootDirStart();
    a6ca:	683b      	ldr	r3, [r7, #0]
    a6cc:	0018      	movs	r0, r3
    a6ce:	f7ff fbd8 	bl	9e82 <_ZNK8SdVolume12rootDirStartEv>
    a6d2:	0002      	movs	r2, r0
    a6d4:	687b      	ldr	r3, [r7, #4]
    a6d6:	621a      	str	r2, [r3, #32]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    a6d8:	687b      	ldr	r3, [r7, #4]
    a6da:	6a19      	ldr	r1, [r3, #32]
    a6dc:	687b      	ldr	r3, [r7, #4]
    a6de:	331c      	adds	r3, #28
    a6e0:	001a      	movs	r2, r3
    a6e2:	683b      	ldr	r3, [r7, #0]
    a6e4:	0018      	movs	r0, r3
    a6e6:	f000 fe55 	bl	b394 <_ZNK8SdVolume9chainSizeEmPm>
    a6ea:	0003      	movs	r3, r0
    a6ec:	425a      	negs	r2, r3
    a6ee:	4153      	adcs	r3, r2
    a6f0:	b2db      	uxtb	r3, r3
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d003      	beq.n	a6fe <_ZN6SdFile8openRootEP8SdVolume+0xa6>
    a6f6:	2300      	movs	r3, #0
    a6f8:	e014      	b.n	a724 <_ZN6SdFile8openRootEP8SdVolume+0xcc>
  } else {
    // volume is not initialized or FAT12
    return false;
    a6fa:	2300      	movs	r3, #0
    a6fc:	e012      	b.n	a724 <_ZN6SdFile8openRootEP8SdVolume+0xcc>
  }
  vol_ = vol;
    a6fe:	687b      	ldr	r3, [r7, #4]
    a700:	683a      	ldr	r2, [r7, #0]
    a702:	625a      	str	r2, [r3, #36]	; 0x24
  // read only
  flags_ = O_READ;
    a704:	687b      	ldr	r3, [r7, #4]
    a706:	2201      	movs	r2, #1
    a708:	721a      	strb	r2, [r3, #8]

  // set to start of file
  curCluster_ = 0;
    a70a:	687b      	ldr	r3, [r7, #4]
    a70c:	2200      	movs	r2, #0
    a70e:	60da      	str	r2, [r3, #12]
  curPosition_ = 0;
    a710:	687b      	ldr	r3, [r7, #4]
    a712:	2200      	movs	r2, #0
    a714:	611a      	str	r2, [r3, #16]

  // root has no directory entry
  dirBlock_ = 0;
    a716:	687b      	ldr	r3, [r7, #4]
    a718:	2200      	movs	r2, #0
    a71a:	615a      	str	r2, [r3, #20]
  dirIndex_ = 0;
    a71c:	687b      	ldr	r3, [r7, #4]
    a71e:	2200      	movs	r2, #0
    a720:	761a      	strb	r2, [r3, #24]
  return true;
    a722:	2301      	movs	r3, #1
}
    a724:	0018      	movs	r0, r3
    a726:	46bd      	mov	sp, r7
    a728:	b002      	add	sp, #8
    a72a:	bd80      	pop	{r7, pc}

0000a72c <_ZN6SdFile4readEPvt>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    a72c:	b590      	push	{r4, r7, lr}
    a72e:	b08f      	sub	sp, #60	; 0x3c
    a730:	af02      	add	r7, sp, #8
    a732:	60f8      	str	r0, [r7, #12]
    a734:	60b9      	str	r1, [r7, #8]
    a736:	1dbb      	adds	r3, r7, #6
    a738:	801a      	strh	r2, [r3, #0]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    a73a:	68bb      	ldr	r3, [r7, #8]
    a73c:	62fb      	str	r3, [r7, #44]	; 0x2c

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    a73e:	68fb      	ldr	r3, [r7, #12]
    a740:	0018      	movs	r0, r3
    a742:	f7fe f95c 	bl	89fe <_ZNK6SdFile6isOpenEv>
    a746:	1e03      	subs	r3, r0, #0
    a748:	d005      	beq.n	a756 <_ZN6SdFile4readEPvt+0x2a>
    a74a:	68fb      	ldr	r3, [r7, #12]
    a74c:	7a1b      	ldrb	r3, [r3, #8]
    a74e:	001a      	movs	r2, r3
    a750:	2301      	movs	r3, #1
    a752:	4013      	ands	r3, r2
    a754:	d101      	bne.n	a75a <_ZN6SdFile4readEPvt+0x2e>
    a756:	2301      	movs	r3, #1
    a758:	e000      	b.n	a75c <_ZN6SdFile4readEPvt+0x30>
    a75a:	2300      	movs	r3, #0
    a75c:	2b00      	cmp	r3, #0
    a75e:	d002      	beq.n	a766 <_ZN6SdFile4readEPvt+0x3a>
    a760:	2301      	movs	r3, #1
    a762:	425b      	negs	r3, r3
    a764:	e0ff      	b.n	a966 <_ZN6SdFile4readEPvt+0x23a>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    a766:	1dbb      	adds	r3, r7, #6
    a768:	881a      	ldrh	r2, [r3, #0]
    a76a:	68fb      	ldr	r3, [r7, #12]
    a76c:	69d9      	ldr	r1, [r3, #28]
    a76e:	68fb      	ldr	r3, [r7, #12]
    a770:	691b      	ldr	r3, [r3, #16]
    a772:	1acb      	subs	r3, r1, r3
    a774:	429a      	cmp	r2, r3
    a776:	d908      	bls.n	a78a <_ZN6SdFile4readEPvt+0x5e>
    a778:	68fb      	ldr	r3, [r7, #12]
    a77a:	69db      	ldr	r3, [r3, #28]
    a77c:	b299      	uxth	r1, r3
    a77e:	68fb      	ldr	r3, [r7, #12]
    a780:	691b      	ldr	r3, [r3, #16]
    a782:	b29a      	uxth	r2, r3
    a784:	1dbb      	adds	r3, r7, #6
    a786:	1a8a      	subs	r2, r1, r2
    a788:	801a      	strh	r2, [r3, #0]

  // amount left to read
  uint16_t toRead = nbyte;
    a78a:	232a      	movs	r3, #42	; 0x2a
    a78c:	18fb      	adds	r3, r7, r3
    a78e:	1dba      	adds	r2, r7, #6
    a790:	8812      	ldrh	r2, [r2, #0]
    a792:	801a      	strh	r2, [r3, #0]
  while (toRead > 0) {
    a794:	232a      	movs	r3, #42	; 0x2a
    a796:	18fb      	adds	r3, r7, r3
    a798:	881b      	ldrh	r3, [r3, #0]
    a79a:	2b00      	cmp	r3, #0
    a79c:	dc00      	bgt.n	a7a0 <_ZN6SdFile4readEPvt+0x74>
    a79e:	e0df      	b.n	a960 <_ZN6SdFile4readEPvt+0x234>
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    a7a0:	68fb      	ldr	r3, [r7, #12]
    a7a2:	691b      	ldr	r3, [r3, #16]
    a7a4:	b29a      	uxth	r2, r3
    a7a6:	231a      	movs	r3, #26
    a7a8:	18fb      	adds	r3, r7, r3
    a7aa:	05d2      	lsls	r2, r2, #23
    a7ac:	0dd2      	lsrs	r2, r2, #23
    a7ae:	801a      	strh	r2, [r3, #0]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    a7b0:	68fb      	ldr	r3, [r7, #12]
    a7b2:	7a5b      	ldrb	r3, [r3, #9]
    a7b4:	2b02      	cmp	r3, #2
    a7b6:	d10b      	bne.n	a7d0 <_ZN6SdFile4readEPvt+0xa4>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    a7b8:	68fb      	ldr	r3, [r7, #12]
    a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a7bc:	0018      	movs	r0, r3
    a7be:	f7ff fb60 	bl	9e82 <_ZNK8SdVolume12rootDirStartEv>
    a7c2:	0002      	movs	r2, r0
    a7c4:	68fb      	ldr	r3, [r7, #12]
    a7c6:	691b      	ldr	r3, [r3, #16]
    a7c8:	0a5b      	lsrs	r3, r3, #9
    a7ca:	18d3      	adds	r3, r2, r3
    a7cc:	627b      	str	r3, [r7, #36]	; 0x24
    a7ce:	e03e      	b.n	a84e <_ZN6SdFile4readEPvt+0x122>
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    a7d0:	68fb      	ldr	r3, [r7, #12]
    a7d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a7d4:	68fb      	ldr	r3, [r7, #12]
    a7d6:	691b      	ldr	r3, [r3, #16]
    a7d8:	2113      	movs	r1, #19
    a7da:	187c      	adds	r4, r7, r1
    a7dc:	0019      	movs	r1, r3
    a7de:	0010      	movs	r0, r2
    a7e0:	f7ff fb59 	bl	9e96 <_ZNK8SdVolume14blockOfClusterEm>
    a7e4:	0003      	movs	r3, r0
    a7e6:	7023      	strb	r3, [r4, #0]
      if (offset == 0 && blockOfCluster == 0) {
    a7e8:	231a      	movs	r3, #26
    a7ea:	18fb      	adds	r3, r7, r3
    a7ec:	881b      	ldrh	r3, [r3, #0]
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	d11f      	bne.n	a832 <_ZN6SdFile4readEPvt+0x106>
    a7f2:	2313      	movs	r3, #19
    a7f4:	18fb      	adds	r3, r7, r3
    a7f6:	781b      	ldrb	r3, [r3, #0]
    a7f8:	2b00      	cmp	r3, #0
    a7fa:	d11a      	bne.n	a832 <_ZN6SdFile4readEPvt+0x106>
        // start of new cluster
        if (curPosition_ == 0) {
    a7fc:	68fb      	ldr	r3, [r7, #12]
    a7fe:	691b      	ldr	r3, [r3, #16]
    a800:	2b00      	cmp	r3, #0
    a802:	d104      	bne.n	a80e <_ZN6SdFile4readEPvt+0xe2>
          // use first cluster in file
          curCluster_ = firstCluster_;
    a804:	68fb      	ldr	r3, [r7, #12]
    a806:	6a1a      	ldr	r2, [r3, #32]
    a808:	68fb      	ldr	r3, [r7, #12]
    a80a:	60da      	str	r2, [r3, #12]
    a80c:	e011      	b.n	a832 <_ZN6SdFile4readEPvt+0x106>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    a80e:	68fb      	ldr	r3, [r7, #12]
    a810:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a812:	68fb      	ldr	r3, [r7, #12]
    a814:	68d9      	ldr	r1, [r3, #12]
    a816:	68fb      	ldr	r3, [r7, #12]
    a818:	330c      	adds	r3, #12
    a81a:	001a      	movs	r2, r3
    a81c:	f000 fdf0 	bl	b400 <_ZNK8SdVolume6fatGetEmPm>
    a820:	0003      	movs	r3, r0
    a822:	425a      	negs	r2, r3
    a824:	4153      	adcs	r3, r2
    a826:	b2db      	uxtb	r3, r3
    a828:	2b00      	cmp	r3, #0
    a82a:	d002      	beq.n	a832 <_ZN6SdFile4readEPvt+0x106>
    a82c:	2301      	movs	r3, #1
    a82e:	425b      	negs	r3, r3
    a830:	e099      	b.n	a966 <_ZN6SdFile4readEPvt+0x23a>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    a832:	68fb      	ldr	r3, [r7, #12]
    a834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a836:	68fb      	ldr	r3, [r7, #12]
    a838:	68db      	ldr	r3, [r3, #12]
    a83a:	0019      	movs	r1, r3
    a83c:	0010      	movs	r0, r2
    a83e:	f7ff fb3c 	bl	9eba <_ZNK8SdVolume17clusterStartBlockEm>
    a842:	0002      	movs	r2, r0
    a844:	2313      	movs	r3, #19
    a846:	18fb      	adds	r3, r7, r3
    a848:	781b      	ldrb	r3, [r3, #0]
    a84a:	18d3      	adds	r3, r2, r3
    a84c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    uint16_t n = toRead;
    a84e:	2322      	movs	r3, #34	; 0x22
    a850:	18fb      	adds	r3, r7, r3
    a852:	222a      	movs	r2, #42	; 0x2a
    a854:	18ba      	adds	r2, r7, r2
    a856:	8812      	ldrh	r2, [r2, #0]
    a858:	801a      	strh	r2, [r3, #0]

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    a85a:	2322      	movs	r3, #34	; 0x22
    a85c:	18fb      	adds	r3, r7, r3
    a85e:	881a      	ldrh	r2, [r3, #0]
    a860:	231a      	movs	r3, #26
    a862:	18fb      	adds	r3, r7, r3
    a864:	881b      	ldrh	r3, [r3, #0]
    a866:	2180      	movs	r1, #128	; 0x80
    a868:	0089      	lsls	r1, r1, #2
    a86a:	1acb      	subs	r3, r1, r3
    a86c:	429a      	cmp	r2, r3
    a86e:	dd08      	ble.n	a882 <_ZN6SdFile4readEPvt+0x156>
    a870:	2322      	movs	r3, #34	; 0x22
    a872:	18fb      	adds	r3, r7, r3
    a874:	221a      	movs	r2, #26
    a876:	18ba      	adds	r2, r7, r2
    a878:	8812      	ldrh	r2, [r2, #0]
    a87a:	2180      	movs	r1, #128	; 0x80
    a87c:	0089      	lsls	r1, r1, #2
    a87e:	1a8a      	subs	r2, r1, r2
    a880:	801a      	strh	r2, [r3, #0]

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    a882:	68fb      	ldr	r3, [r7, #12]
    a884:	0018      	movs	r0, r3
    a886:	f7ff fada 	bl	9e3e <_ZNK6SdFile14unbufferedReadEv>
    a88a:	1e03      	subs	r3, r0, #0
    a88c:	d106      	bne.n	a89c <_ZN6SdFile4readEPvt+0x170>
    a88e:	2322      	movs	r3, #34	; 0x22
    a890:	18fb      	adds	r3, r7, r3
    a892:	881a      	ldrh	r2, [r3, #0]
    a894:	2380      	movs	r3, #128	; 0x80
    a896:	009b      	lsls	r3, r3, #2
    a898:	429a      	cmp	r2, r3
    a89a:	d106      	bne.n	a8aa <_ZN6SdFile4readEPvt+0x17e>
      block != SdVolume::cacheBlockNumber_) {
    a89c:	4b34      	ldr	r3, [pc, #208]	; (a970 <_ZN6SdFile4readEPvt+0x244>)
    a89e:	681b      	ldr	r3, [r3, #0]
    if ((unbufferedRead() || n == 512) &&
    a8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a8a2:	429a      	cmp	r2, r3
    a8a4:	d001      	beq.n	a8aa <_ZN6SdFile4readEPvt+0x17e>
    a8a6:	2301      	movs	r3, #1
    a8a8:	e000      	b.n	a8ac <_ZN6SdFile4readEPvt+0x180>
    a8aa:	2300      	movs	r3, #0
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	d01d      	beq.n	a8ec <_ZN6SdFile4readEPvt+0x1c0>
      if (!vol_->readData(block, offset, n, dst)) return -1;
    a8b0:	68fb      	ldr	r3, [r7, #12]
    a8b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a8b4:	2322      	movs	r3, #34	; 0x22
    a8b6:	18fb      	adds	r3, r7, r3
    a8b8:	881c      	ldrh	r4, [r3, #0]
    a8ba:	231a      	movs	r3, #26
    a8bc:	18fb      	adds	r3, r7, r3
    a8be:	881a      	ldrh	r2, [r3, #0]
    a8c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a8c4:	9300      	str	r3, [sp, #0]
    a8c6:	0023      	movs	r3, r4
    a8c8:	f7ff fb42 	bl	9f50 <_ZN8SdVolume8readDataEmttPh>
    a8cc:	0003      	movs	r3, r0
    a8ce:	425a      	negs	r2, r3
    a8d0:	4153      	adcs	r3, r2
    a8d2:	b2db      	uxtb	r3, r3
    a8d4:	2b00      	cmp	r3, #0
    a8d6:	d002      	beq.n	a8de <_ZN6SdFile4readEPvt+0x1b2>
    a8d8:	2301      	movs	r3, #1
    a8da:	425b      	negs	r3, r3
    a8dc:	e043      	b.n	a966 <_ZN6SdFile4readEPvt+0x23a>
      dst += n;
    a8de:	2322      	movs	r3, #34	; 0x22
    a8e0:	18fb      	adds	r3, r7, r3
    a8e2:	881b      	ldrh	r3, [r3, #0]
    a8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a8e6:	18d3      	adds	r3, r2, r3
    a8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    a8ea:	e026      	b.n	a93a <_ZN6SdFile4readEPvt+0x20e>
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a8ee:	2100      	movs	r1, #0
    a8f0:	0018      	movs	r0, r3
    a8f2:	f000 fcdb 	bl	b2ac <_ZN8SdVolume13cacheRawBlockEmh>
    a8f6:	0003      	movs	r3, r0
    a8f8:	425a      	negs	r2, r3
    a8fa:	4153      	adcs	r3, r2
    a8fc:	b2db      	uxtb	r3, r3
    a8fe:	2b00      	cmp	r3, #0
    a900:	d002      	beq.n	a908 <_ZN6SdFile4readEPvt+0x1dc>
    a902:	2301      	movs	r3, #1
    a904:	425b      	negs	r3, r3
    a906:	e02e      	b.n	a966 <_ZN6SdFile4readEPvt+0x23a>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    a908:	231a      	movs	r3, #26
    a90a:	18fb      	adds	r3, r7, r3
    a90c:	881a      	ldrh	r2, [r3, #0]
    a90e:	4b19      	ldr	r3, [pc, #100]	; (a974 <_ZN6SdFile4readEPvt+0x248>)
    a910:	18d3      	adds	r3, r2, r3
    a912:	61fb      	str	r3, [r7, #28]
      uint8_t* end = src + n;
    a914:	2322      	movs	r3, #34	; 0x22
    a916:	18fb      	adds	r3, r7, r3
    a918:	881b      	ldrh	r3, [r3, #0]
    a91a:	69fa      	ldr	r2, [r7, #28]
    a91c:	18d3      	adds	r3, r2, r3
    a91e:	617b      	str	r3, [r7, #20]
      while (src != end) *dst++ = *src++;
    a920:	69fa      	ldr	r2, [r7, #28]
    a922:	697b      	ldr	r3, [r7, #20]
    a924:	429a      	cmp	r2, r3
    a926:	d008      	beq.n	a93a <_ZN6SdFile4readEPvt+0x20e>
    a928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a92a:	1c5a      	adds	r2, r3, #1
    a92c:	62fa      	str	r2, [r7, #44]	; 0x2c
    a92e:	69fa      	ldr	r2, [r7, #28]
    a930:	1c51      	adds	r1, r2, #1
    a932:	61f9      	str	r1, [r7, #28]
    a934:	7812      	ldrb	r2, [r2, #0]
    a936:	701a      	strb	r2, [r3, #0]
    a938:	e7f2      	b.n	a920 <_ZN6SdFile4readEPvt+0x1f4>
    }
    curPosition_ += n;
    a93a:	68fb      	ldr	r3, [r7, #12]
    a93c:	691a      	ldr	r2, [r3, #16]
    a93e:	2322      	movs	r3, #34	; 0x22
    a940:	18fb      	adds	r3, r7, r3
    a942:	881b      	ldrh	r3, [r3, #0]
    a944:	18d2      	adds	r2, r2, r3
    a946:	68fb      	ldr	r3, [r7, #12]
    a948:	611a      	str	r2, [r3, #16]
    toRead -= n;
    a94a:	232a      	movs	r3, #42	; 0x2a
    a94c:	18fb      	adds	r3, r7, r3
    a94e:	222a      	movs	r2, #42	; 0x2a
    a950:	18b9      	adds	r1, r7, r2
    a952:	2222      	movs	r2, #34	; 0x22
    a954:	18ba      	adds	r2, r7, r2
    a956:	8809      	ldrh	r1, [r1, #0]
    a958:	8812      	ldrh	r2, [r2, #0]
    a95a:	1a8a      	subs	r2, r1, r2
    a95c:	801a      	strh	r2, [r3, #0]
  while (toRead > 0) {
    a95e:	e719      	b.n	a794 <_ZN6SdFile4readEPvt+0x68>
  }
  return nbyte;
    a960:	1dbb      	adds	r3, r7, #6
    a962:	2200      	movs	r2, #0
    a964:	5e9b      	ldrsh	r3, [r3, r2]
}
    a966:	0018      	movs	r0, r3
    a968:	46bd      	mov	sp, r7
    a96a:	b00d      	add	sp, #52	; 0x34
    a96c:	bd90      	pop	{r4, r7, pc}
    a96e:	46c0      	nop			; (mov r8, r8)
    a970:	2000004c 	.word	0x2000004c
    a974:	20000968 	.word	0x20000968

0000a978 <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    a978:	b580      	push	{r7, lr}
    a97a:	b084      	sub	sp, #16
    a97c:	af00      	add	r7, sp, #0
    a97e:	6078      	str	r0, [r7, #4]
  // error if not directory
  if (!isDir()) return NULL;
    a980:	687b      	ldr	r3, [r7, #4]
    a982:	0018      	movs	r0, r3
    a984:	f7fe f82b 	bl	89de <_ZNK6SdFile5isDirEv>
    a988:	0003      	movs	r3, r0
    a98a:	425a      	negs	r2, r3
    a98c:	4153      	adcs	r3, r2
    a98e:	b2db      	uxtb	r3, r3
    a990:	2b00      	cmp	r3, #0
    a992:	d001      	beq.n	a998 <_ZN6SdFile12readDirCacheEv+0x20>
    a994:	2300      	movs	r3, #0
    a996:	e020      	b.n	a9da <_ZN6SdFile12readDirCacheEv+0x62>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    a998:	687b      	ldr	r3, [r7, #4]
    a99a:	691b      	ldr	r3, [r3, #16]
    a99c:	095b      	lsrs	r3, r3, #5
    a99e:	b2da      	uxtb	r2, r3
    a9a0:	230f      	movs	r3, #15
    a9a2:	18fb      	adds	r3, r7, r3
    a9a4:	210f      	movs	r1, #15
    a9a6:	400a      	ands	r2, r1
    a9a8:	701a      	strb	r2, [r3, #0]

  // use read to locate and cache block
  if (read() < 0) return NULL;
    a9aa:	687b      	ldr	r3, [r7, #4]
    a9ac:	0018      	movs	r0, r3
    a9ae:	f7fe f833 	bl	8a18 <_ZN6SdFile4readEv>
    a9b2:	0003      	movs	r3, r0
    a9b4:	b29b      	uxth	r3, r3
    a9b6:	0bdb      	lsrs	r3, r3, #15
    a9b8:	b2db      	uxtb	r3, r3
    a9ba:	2b00      	cmp	r3, #0
    a9bc:	d001      	beq.n	a9c2 <_ZN6SdFile12readDirCacheEv+0x4a>
    a9be:	2300      	movs	r3, #0
    a9c0:	e00b      	b.n	a9da <_ZN6SdFile12readDirCacheEv+0x62>

  // advance to next entry
  curPosition_ += 31;
    a9c2:	687b      	ldr	r3, [r7, #4]
    a9c4:	691b      	ldr	r3, [r3, #16]
    a9c6:	331f      	adds	r3, #31
    a9c8:	001a      	movs	r2, r3
    a9ca:	687b      	ldr	r3, [r7, #4]
    a9cc:	611a      	str	r2, [r3, #16]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    a9ce:	230f      	movs	r3, #15
    a9d0:	18fb      	adds	r3, r7, r3
    a9d2:	781b      	ldrb	r3, [r3, #0]
    a9d4:	015a      	lsls	r2, r3, #5
    a9d6:	4b03      	ldr	r3, [pc, #12]	; (a9e4 <_ZN6SdFile12readDirCacheEv+0x6c>)
    a9d8:	18d3      	adds	r3, r2, r3
}
    a9da:	0018      	movs	r0, r3
    a9dc:	46bd      	mov	sp, r7
    a9de:	b004      	add	sp, #16
    a9e0:	bd80      	pop	{r7, pc}
    a9e2:	46c0      	nop			; (mov r8, r8)
    a9e4:	20000968 	.word	0x20000968

0000a9e8 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    a9e8:	b580      	push	{r7, lr}
    a9ea:	b084      	sub	sp, #16
    a9ec:	af00      	add	r7, sp, #0
    a9ee:	6078      	str	r0, [r7, #4]
    a9f0:	6039      	str	r1, [r7, #0]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    a9f2:	687b      	ldr	r3, [r7, #4]
    a9f4:	0018      	movs	r0, r3
    a9f6:	f7fe f802 	bl	89fe <_ZNK6SdFile6isOpenEv>
    a9fa:	1e03      	subs	r3, r0, #0
    a9fc:	d004      	beq.n	aa08 <_ZN6SdFile7seekSetEm+0x20>
    a9fe:	687b      	ldr	r3, [r7, #4]
    aa00:	69da      	ldr	r2, [r3, #28]
    aa02:	683b      	ldr	r3, [r7, #0]
    aa04:	429a      	cmp	r2, r3
    aa06:	d201      	bcs.n	aa0c <_ZN6SdFile7seekSetEm+0x24>
    aa08:	2301      	movs	r3, #1
    aa0a:	e000      	b.n	aa0e <_ZN6SdFile7seekSetEm+0x26>
    aa0c:	2300      	movs	r3, #0
    aa0e:	2b00      	cmp	r3, #0
    aa10:	d001      	beq.n	aa16 <_ZN6SdFile7seekSetEm+0x2e>
    aa12:	2300      	movs	r3, #0
    aa14:	e054      	b.n	aac0 <_ZN6SdFile7seekSetEm+0xd8>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    aa16:	687b      	ldr	r3, [r7, #4]
    aa18:	7a5b      	ldrb	r3, [r3, #9]
    aa1a:	2b02      	cmp	r3, #2
    aa1c:	d104      	bne.n	aa28 <_ZN6SdFile7seekSetEm+0x40>
    curPosition_ = pos;
    aa1e:	687b      	ldr	r3, [r7, #4]
    aa20:	683a      	ldr	r2, [r7, #0]
    aa22:	611a      	str	r2, [r3, #16]
    return true;
    aa24:	2301      	movs	r3, #1
    aa26:	e04b      	b.n	aac0 <_ZN6SdFile7seekSetEm+0xd8>
  }
  if (pos == 0) {
    aa28:	683b      	ldr	r3, [r7, #0]
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	d107      	bne.n	aa3e <_ZN6SdFile7seekSetEm+0x56>
    // set position to start of file
    curCluster_ = 0;
    aa2e:	687b      	ldr	r3, [r7, #4]
    aa30:	2200      	movs	r2, #0
    aa32:	60da      	str	r2, [r3, #12]
    curPosition_ = 0;
    aa34:	687b      	ldr	r3, [r7, #4]
    aa36:	2200      	movs	r2, #0
    aa38:	611a      	str	r2, [r3, #16]
    return true;
    aa3a:	2301      	movs	r3, #1
    aa3c:	e040      	b.n	aac0 <_ZN6SdFile7seekSetEm+0xd8>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    aa3e:	687b      	ldr	r3, [r7, #4]
    aa40:	691b      	ldr	r3, [r3, #16]
    aa42:	1e5a      	subs	r2, r3, #1
    aa44:	687b      	ldr	r3, [r7, #4]
    aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aa48:	7c1b      	ldrb	r3, [r3, #16]
    aa4a:	3309      	adds	r3, #9
    aa4c:	40da      	lsrs	r2, r3
    aa4e:	0013      	movs	r3, r2
    aa50:	60bb      	str	r3, [r7, #8]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    aa52:	683b      	ldr	r3, [r7, #0]
    aa54:	1e5a      	subs	r2, r3, #1
    aa56:	687b      	ldr	r3, [r7, #4]
    aa58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aa5a:	7c1b      	ldrb	r3, [r3, #16]
    aa5c:	3309      	adds	r3, #9
    aa5e:	40da      	lsrs	r2, r3
    aa60:	0013      	movs	r3, r2
    aa62:	60fb      	str	r3, [r7, #12]

  if (nNew < nCur || curPosition_ == 0) {
    aa64:	68fa      	ldr	r2, [r7, #12]
    aa66:	68bb      	ldr	r3, [r7, #8]
    aa68:	429a      	cmp	r2, r3
    aa6a:	d303      	bcc.n	aa74 <_ZN6SdFile7seekSetEm+0x8c>
    aa6c:	687b      	ldr	r3, [r7, #4]
    aa6e:	691b      	ldr	r3, [r3, #16]
    aa70:	2b00      	cmp	r3, #0
    aa72:	d104      	bne.n	aa7e <_ZN6SdFile7seekSetEm+0x96>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    aa74:	687b      	ldr	r3, [r7, #4]
    aa76:	6a1a      	ldr	r2, [r3, #32]
    aa78:	687b      	ldr	r3, [r7, #4]
    aa7a:	60da      	str	r2, [r3, #12]
    aa7c:	e003      	b.n	aa86 <_ZN6SdFile7seekSetEm+0x9e>
  } else {
    // advance from curPosition
    nNew -= nCur;
    aa7e:	68fa      	ldr	r2, [r7, #12]
    aa80:	68bb      	ldr	r3, [r7, #8]
    aa82:	1ad3      	subs	r3, r2, r3
    aa84:	60fb      	str	r3, [r7, #12]
  }
  while (nNew--) {
    aa86:	68fb      	ldr	r3, [r7, #12]
    aa88:	1e5a      	subs	r2, r3, #1
    aa8a:	60fa      	str	r2, [r7, #12]
    aa8c:	1e5a      	subs	r2, r3, #1
    aa8e:	4193      	sbcs	r3, r2
    aa90:	b2db      	uxtb	r3, r3
    aa92:	2b00      	cmp	r3, #0
    aa94:	d010      	beq.n	aab8 <_ZN6SdFile7seekSetEm+0xd0>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    aa96:	687b      	ldr	r3, [r7, #4]
    aa98:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aa9a:	687b      	ldr	r3, [r7, #4]
    aa9c:	68d9      	ldr	r1, [r3, #12]
    aa9e:	687b      	ldr	r3, [r7, #4]
    aaa0:	330c      	adds	r3, #12
    aaa2:	001a      	movs	r2, r3
    aaa4:	f000 fcac 	bl	b400 <_ZNK8SdVolume6fatGetEmPm>
    aaa8:	0003      	movs	r3, r0
    aaaa:	425a      	negs	r2, r3
    aaac:	4153      	adcs	r3, r2
    aaae:	b2db      	uxtb	r3, r3
    aab0:	2b00      	cmp	r3, #0
    aab2:	d0e8      	beq.n	aa86 <_ZN6SdFile7seekSetEm+0x9e>
    aab4:	2300      	movs	r3, #0
    aab6:	e003      	b.n	aac0 <_ZN6SdFile7seekSetEm+0xd8>
  }
  curPosition_ = pos;
    aab8:	687b      	ldr	r3, [r7, #4]
    aaba:	683a      	ldr	r2, [r7, #0]
    aabc:	611a      	str	r2, [r3, #16]
  return true;
    aabe:	2301      	movs	r3, #1
}
    aac0:	0018      	movs	r0, r3
    aac2:	46bd      	mov	sp, r7
    aac4:	b004      	add	sp, #16
    aac6:	bd80      	pop	{r7, pc}

0000aac8 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    aac8:	b590      	push	{r4, r7, lr}
    aaca:	b085      	sub	sp, #20
    aacc:	af00      	add	r7, sp, #0
    aace:	6078      	str	r0, [r7, #4]
  // only allow open files and directories
  if (!isOpen()) return false;
    aad0:	687b      	ldr	r3, [r7, #4]
    aad2:	0018      	movs	r0, r3
    aad4:	f7fd ff93 	bl	89fe <_ZNK6SdFile6isOpenEv>
    aad8:	0003      	movs	r3, r0
    aada:	425a      	negs	r2, r3
    aadc:	4153      	adcs	r3, r2
    aade:	b2db      	uxtb	r3, r3
    aae0:	2b00      	cmp	r3, #0
    aae2:	d001      	beq.n	aae8 <_ZN6SdFile4syncEv+0x20>
    aae4:	2300      	movs	r3, #0
    aae6:	e0a6      	b.n	ac36 <_ZN6SdFile4syncEv+0x16e>

  if (flags_ & F_FILE_DIR_DIRTY) {
    aae8:	687b      	ldr	r3, [r7, #4]
    aaea:	7a1b      	ldrb	r3, [r3, #8]
    aaec:	b25b      	sxtb	r3, r3
    aaee:	2b00      	cmp	r3, #0
    aaf0:	db00      	blt.n	aaf4 <_ZN6SdFile4syncEv+0x2c>
    aaf2:	e09d      	b.n	ac30 <_ZN6SdFile4syncEv+0x168>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    aaf4:	687b      	ldr	r3, [r7, #4]
    aaf6:	2101      	movs	r1, #1
    aaf8:	0018      	movs	r0, r3
    aafa:	f7ff fad3 	bl	a0a4 <_ZN6SdFile13cacheDirEntryEh>
    aafe:	0003      	movs	r3, r0
    ab00:	60fb      	str	r3, [r7, #12]
    if (!d) return false;
    ab02:	68fb      	ldr	r3, [r7, #12]
    ab04:	2b00      	cmp	r3, #0
    ab06:	d101      	bne.n	ab0c <_ZN6SdFile4syncEv+0x44>
    ab08:	2300      	movs	r3, #0
    ab0a:	e094      	b.n	ac36 <_ZN6SdFile4syncEv+0x16e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    ab0c:	687b      	ldr	r3, [r7, #4]
    ab0e:	0018      	movs	r0, r3
    ab10:	f7fd ff65 	bl	89de <_ZNK6SdFile5isDirEv>
    ab14:	0003      	movs	r3, r0
    ab16:	425a      	negs	r2, r3
    ab18:	4153      	adcs	r3, r2
    ab1a:	b2db      	uxtb	r3, r3
    ab1c:	2b00      	cmp	r3, #0
    ab1e:	d02a      	beq.n	ab76 <_ZN6SdFile4syncEv+0xae>
    ab20:	687b      	ldr	r3, [r7, #4]
    ab22:	69da      	ldr	r2, [r3, #28]
    ab24:	68fb      	ldr	r3, [r7, #12]
    ab26:	21ff      	movs	r1, #255	; 0xff
    ab28:	4011      	ands	r1, r2
    ab2a:	000c      	movs	r4, r1
    ab2c:	7f19      	ldrb	r1, [r3, #28]
    ab2e:	2000      	movs	r0, #0
    ab30:	4001      	ands	r1, r0
    ab32:	1c08      	adds	r0, r1, #0
    ab34:	1c21      	adds	r1, r4, #0
    ab36:	4301      	orrs	r1, r0
    ab38:	7719      	strb	r1, [r3, #28]
    ab3a:	0a11      	lsrs	r1, r2, #8
    ab3c:	20ff      	movs	r0, #255	; 0xff
    ab3e:	4001      	ands	r1, r0
    ab40:	000c      	movs	r4, r1
    ab42:	7f59      	ldrb	r1, [r3, #29]
    ab44:	2000      	movs	r0, #0
    ab46:	4001      	ands	r1, r0
    ab48:	1c08      	adds	r0, r1, #0
    ab4a:	1c21      	adds	r1, r4, #0
    ab4c:	4301      	orrs	r1, r0
    ab4e:	7759      	strb	r1, [r3, #29]
    ab50:	0c11      	lsrs	r1, r2, #16
    ab52:	20ff      	movs	r0, #255	; 0xff
    ab54:	4001      	ands	r1, r0
    ab56:	000c      	movs	r4, r1
    ab58:	7f99      	ldrb	r1, [r3, #30]
    ab5a:	2000      	movs	r0, #0
    ab5c:	4001      	ands	r1, r0
    ab5e:	1c08      	adds	r0, r1, #0
    ab60:	1c21      	adds	r1, r4, #0
    ab62:	4301      	orrs	r1, r0
    ab64:	7799      	strb	r1, [r3, #30]
    ab66:	0e10      	lsrs	r0, r2, #24
    ab68:	7fda      	ldrb	r2, [r3, #31]
    ab6a:	2100      	movs	r1, #0
    ab6c:	400a      	ands	r2, r1
    ab6e:	1c11      	adds	r1, r2, #0
    ab70:	1c02      	adds	r2, r0, #0
    ab72:	430a      	orrs	r2, r1
    ab74:	77da      	strb	r2, [r3, #31]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    ab76:	687b      	ldr	r3, [r7, #4]
    ab78:	6a1b      	ldr	r3, [r3, #32]
    ab7a:	b29a      	uxth	r2, r3
    ab7c:	68fb      	ldr	r3, [r7, #12]
    ab7e:	21ff      	movs	r1, #255	; 0xff
    ab80:	4011      	ands	r1, r2
    ab82:	000c      	movs	r4, r1
    ab84:	7e99      	ldrb	r1, [r3, #26]
    ab86:	2000      	movs	r0, #0
    ab88:	4001      	ands	r1, r0
    ab8a:	1c08      	adds	r0, r1, #0
    ab8c:	1c21      	adds	r1, r4, #0
    ab8e:	4301      	orrs	r1, r0
    ab90:	7699      	strb	r1, [r3, #26]
    ab92:	0a12      	lsrs	r2, r2, #8
    ab94:	b290      	uxth	r0, r2
    ab96:	7eda      	ldrb	r2, [r3, #27]
    ab98:	2100      	movs	r1, #0
    ab9a:	400a      	ands	r2, r1
    ab9c:	1c11      	adds	r1, r2, #0
    ab9e:	1c02      	adds	r2, r0, #0
    aba0:	430a      	orrs	r2, r1
    aba2:	76da      	strb	r2, [r3, #27]
    d->firstClusterHigh = firstCluster_ >> 16;
    aba4:	687b      	ldr	r3, [r7, #4]
    aba6:	6a1b      	ldr	r3, [r3, #32]
    aba8:	0c1b      	lsrs	r3, r3, #16
    abaa:	b29a      	uxth	r2, r3
    abac:	68fb      	ldr	r3, [r7, #12]
    abae:	21ff      	movs	r1, #255	; 0xff
    abb0:	4011      	ands	r1, r2
    abb2:	000c      	movs	r4, r1
    abb4:	7d19      	ldrb	r1, [r3, #20]
    abb6:	2000      	movs	r0, #0
    abb8:	4001      	ands	r1, r0
    abba:	1c08      	adds	r0, r1, #0
    abbc:	1c21      	adds	r1, r4, #0
    abbe:	4301      	orrs	r1, r0
    abc0:	7519      	strb	r1, [r3, #20]
    abc2:	0a12      	lsrs	r2, r2, #8
    abc4:	b290      	uxth	r0, r2
    abc6:	7d5a      	ldrb	r2, [r3, #21]
    abc8:	2100      	movs	r1, #0
    abca:	400a      	ands	r2, r1
    abcc:	1c11      	adds	r1, r2, #0
    abce:	1c02      	adds	r2, r0, #0
    abd0:	430a      	orrs	r2, r1
    abd2:	755a      	strb	r2, [r3, #21]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    abd4:	4b1a      	ldr	r3, [pc, #104]	; (ac40 <_ZN6SdFile4syncEv+0x178>)
    abd6:	681b      	ldr	r3, [r3, #0]
    abd8:	2b00      	cmp	r3, #0
    abda:	d022      	beq.n	ac22 <_ZN6SdFile4syncEv+0x15a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    abdc:	4b18      	ldr	r3, [pc, #96]	; (ac40 <_ZN6SdFile4syncEv+0x178>)
    abde:	681b      	ldr	r3, [r3, #0]
    abe0:	68fa      	ldr	r2, [r7, #12]
    abe2:	3218      	adds	r2, #24
    abe4:	0010      	movs	r0, r2
    abe6:	68fa      	ldr	r2, [r7, #12]
    abe8:	3216      	adds	r2, #22
    abea:	0011      	movs	r1, r2
    abec:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    abee:	68fb      	ldr	r3, [r7, #12]
    abf0:	7e1a      	ldrb	r2, [r3, #24]
    abf2:	7e5b      	ldrb	r3, [r3, #25]
    abf4:	021b      	lsls	r3, r3, #8
    abf6:	4313      	orrs	r3, r2
    abf8:	b29a      	uxth	r2, r3
    abfa:	68fb      	ldr	r3, [r7, #12]
    abfc:	21ff      	movs	r1, #255	; 0xff
    abfe:	4011      	ands	r1, r2
    ac00:	000c      	movs	r4, r1
    ac02:	7c99      	ldrb	r1, [r3, #18]
    ac04:	2000      	movs	r0, #0
    ac06:	4001      	ands	r1, r0
    ac08:	1c08      	adds	r0, r1, #0
    ac0a:	1c21      	adds	r1, r4, #0
    ac0c:	4301      	orrs	r1, r0
    ac0e:	7499      	strb	r1, [r3, #18]
    ac10:	0a12      	lsrs	r2, r2, #8
    ac12:	b290      	uxth	r0, r2
    ac14:	7cda      	ldrb	r2, [r3, #19]
    ac16:	2100      	movs	r1, #0
    ac18:	400a      	ands	r2, r1
    ac1a:	1c11      	adds	r1, r2, #0
    ac1c:	1c02      	adds	r2, r0, #0
    ac1e:	430a      	orrs	r2, r1
    ac20:	74da      	strb	r2, [r3, #19]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    ac22:	687b      	ldr	r3, [r7, #4]
    ac24:	7a1b      	ldrb	r3, [r3, #8]
    ac26:	227f      	movs	r2, #127	; 0x7f
    ac28:	4013      	ands	r3, r2
    ac2a:	b2da      	uxtb	r2, r3
    ac2c:	687b      	ldr	r3, [r7, #4]
    ac2e:	721a      	strb	r2, [r3, #8]
  }
  return SdVolume::cacheFlush();
    ac30:	f000 fafe 	bl	b230 <_ZN8SdVolume10cacheFlushEv>
    ac34:	0003      	movs	r3, r0
}
    ac36:	0018      	movs	r0, r3
    ac38:	46bd      	mov	sp, r7
    ac3a:	b005      	add	sp, #20
    ac3c:	bd90      	pop	{r4, r7, pc}
    ac3e:	46c0      	nop			; (mov r8, r8)
    ac40:	20000964 	.word	0x20000964

0000ac44 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    ac44:	b580      	push	{r7, lr}
    ac46:	b084      	sub	sp, #16
    ac48:	af00      	add	r7, sp, #0
    ac4a:	6078      	str	r0, [r7, #4]
    ac4c:	6039      	str	r1, [r7, #0]
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    ac4e:	687b      	ldr	r3, [r7, #4]
    ac50:	0018      	movs	r0, r3
    ac52:	f7ff f8d6 	bl	9e02 <_ZNK6SdFile6isFileEv>
    ac56:	1e03      	subs	r3, r0, #0
    ac58:	d005      	beq.n	ac66 <_ZN6SdFile8truncateEm+0x22>
    ac5a:	687b      	ldr	r3, [r7, #4]
    ac5c:	7a1b      	ldrb	r3, [r3, #8]
    ac5e:	001a      	movs	r2, r3
    ac60:	2302      	movs	r3, #2
    ac62:	4013      	ands	r3, r2
    ac64:	d101      	bne.n	ac6a <_ZN6SdFile8truncateEm+0x26>
    ac66:	2301      	movs	r3, #1
    ac68:	e000      	b.n	ac6c <_ZN6SdFile8truncateEm+0x28>
    ac6a:	2300      	movs	r3, #0
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	d001      	beq.n	ac74 <_ZN6SdFile8truncateEm+0x30>
    ac70:	2300      	movs	r3, #0
    ac72:	e096      	b.n	ada2 <_ZN6SdFile8truncateEm+0x15e>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    ac74:	687b      	ldr	r3, [r7, #4]
    ac76:	69da      	ldr	r2, [r3, #28]
    ac78:	683b      	ldr	r3, [r7, #0]
    ac7a:	429a      	cmp	r2, r3
    ac7c:	d201      	bcs.n	ac82 <_ZN6SdFile8truncateEm+0x3e>
    ac7e:	2300      	movs	r3, #0
    ac80:	e08f      	b.n	ada2 <_ZN6SdFile8truncateEm+0x15e>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    ac82:	687b      	ldr	r3, [r7, #4]
    ac84:	69db      	ldr	r3, [r3, #28]
    ac86:	2b00      	cmp	r3, #0
    ac88:	d101      	bne.n	ac8e <_ZN6SdFile8truncateEm+0x4a>
    ac8a:	2301      	movs	r3, #1
    ac8c:	e089      	b.n	ada2 <_ZN6SdFile8truncateEm+0x15e>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    ac8e:	687b      	ldr	r3, [r7, #4]
    ac90:	691a      	ldr	r2, [r3, #16]
    ac92:	683b      	ldr	r3, [r7, #0]
    ac94:	429a      	cmp	r2, r3
    ac96:	d802      	bhi.n	ac9e <_ZN6SdFile8truncateEm+0x5a>
    ac98:	687b      	ldr	r3, [r7, #4]
    ac9a:	691b      	ldr	r3, [r3, #16]
    ac9c:	e000      	b.n	aca0 <_ZN6SdFile8truncateEm+0x5c>
    ac9e:	683b      	ldr	r3, [r7, #0]
    aca0:	60fb      	str	r3, [r7, #12]

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    aca2:	683a      	ldr	r2, [r7, #0]
    aca4:	687b      	ldr	r3, [r7, #4]
    aca6:	0011      	movs	r1, r2
    aca8:	0018      	movs	r0, r3
    acaa:	f7ff fe9d 	bl	a9e8 <_ZN6SdFile7seekSetEm>
    acae:	0003      	movs	r3, r0
    acb0:	425a      	negs	r2, r3
    acb2:	4153      	adcs	r3, r2
    acb4:	b2db      	uxtb	r3, r3
    acb6:	2b00      	cmp	r3, #0
    acb8:	d001      	beq.n	acbe <_ZN6SdFile8truncateEm+0x7a>
    acba:	2300      	movs	r3, #0
    acbc:	e071      	b.n	ada2 <_ZN6SdFile8truncateEm+0x15e>

  if (length == 0) {
    acbe:	683b      	ldr	r3, [r7, #0]
    acc0:	2b00      	cmp	r3, #0
    acc2:	d113      	bne.n	acec <_ZN6SdFile8truncateEm+0xa8>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    acc4:	687b      	ldr	r3, [r7, #4]
    acc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    acc8:	687b      	ldr	r3, [r7, #4]
    acca:	6a1b      	ldr	r3, [r3, #32]
    accc:	0019      	movs	r1, r3
    acce:	0010      	movs	r0, r2
    acd0:	f000 fc4a 	bl	b568 <_ZN8SdVolume9freeChainEm>
    acd4:	0003      	movs	r3, r0
    acd6:	425a      	negs	r2, r3
    acd8:	4153      	adcs	r3, r2
    acda:	b2db      	uxtb	r3, r3
    acdc:	2b00      	cmp	r3, #0
    acde:	d001      	beq.n	ace4 <_ZN6SdFile8truncateEm+0xa0>
    ace0:	2300      	movs	r3, #0
    ace2:	e05e      	b.n	ada2 <_ZN6SdFile8truncateEm+0x15e>
    firstCluster_ = 0;
    ace4:	687b      	ldr	r3, [r7, #4]
    ace6:	2200      	movs	r2, #0
    ace8:	621a      	str	r2, [r3, #32]
    acea:	e03c      	b.n	ad66 <_ZN6SdFile8truncateEm+0x122>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    acec:	687b      	ldr	r3, [r7, #4]
    acee:	6a58      	ldr	r0, [r3, #36]	; 0x24
    acf0:	687b      	ldr	r3, [r7, #4]
    acf2:	68db      	ldr	r3, [r3, #12]
    acf4:	2208      	movs	r2, #8
    acf6:	18ba      	adds	r2, r7, r2
    acf8:	0019      	movs	r1, r3
    acfa:	f000 fb81 	bl	b400 <_ZNK8SdVolume6fatGetEmPm>
    acfe:	0003      	movs	r3, r0
    ad00:	425a      	negs	r2, r3
    ad02:	4153      	adcs	r3, r2
    ad04:	b2db      	uxtb	r3, r3
    ad06:	2b00      	cmp	r3, #0
    ad08:	d001      	beq.n	ad0e <_ZN6SdFile8truncateEm+0xca>
    ad0a:	2300      	movs	r3, #0
    ad0c:	e049      	b.n	ada2 <_ZN6SdFile8truncateEm+0x15e>

    if (!vol_->isEOC(toFree)) {
    ad0e:	687b      	ldr	r3, [r7, #4]
    ad10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ad12:	68ba      	ldr	r2, [r7, #8]
    ad14:	0011      	movs	r1, r2
    ad16:	0018      	movs	r0, r3
    ad18:	f7ff f900 	bl	9f1c <_ZNK8SdVolume5isEOCEm>
    ad1c:	0003      	movs	r3, r0
    ad1e:	425a      	negs	r2, r3
    ad20:	4153      	adcs	r3, r2
    ad22:	b2db      	uxtb	r3, r3
    ad24:	2b00      	cmp	r3, #0
    ad26:	d01e      	beq.n	ad66 <_ZN6SdFile8truncateEm+0x122>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    ad28:	687b      	ldr	r3, [r7, #4]
    ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ad2c:	68ba      	ldr	r2, [r7, #8]
    ad2e:	0011      	movs	r1, r2
    ad30:	0018      	movs	r0, r3
    ad32:	f000 fc19 	bl	b568 <_ZN8SdVolume9freeChainEm>
    ad36:	0003      	movs	r3, r0
    ad38:	425a      	negs	r2, r3
    ad3a:	4153      	adcs	r3, r2
    ad3c:	b2db      	uxtb	r3, r3
    ad3e:	2b00      	cmp	r3, #0
    ad40:	d001      	beq.n	ad46 <_ZN6SdFile8truncateEm+0x102>
    ad42:	2300      	movs	r3, #0
    ad44:	e02d      	b.n	ada2 <_ZN6SdFile8truncateEm+0x15e>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    ad46:	687b      	ldr	r3, [r7, #4]
    ad48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ad4a:	687b      	ldr	r3, [r7, #4]
    ad4c:	68db      	ldr	r3, [r3, #12]
    ad4e:	0019      	movs	r1, r3
    ad50:	0010      	movs	r0, r2
    ad52:	f7ff f8d1 	bl	9ef8 <_ZN8SdVolume9fatPutEOCEm>
    ad56:	0003      	movs	r3, r0
    ad58:	425a      	negs	r2, r3
    ad5a:	4153      	adcs	r3, r2
    ad5c:	b2db      	uxtb	r3, r3
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d001      	beq.n	ad66 <_ZN6SdFile8truncateEm+0x122>
    ad62:	2300      	movs	r3, #0
    ad64:	e01d      	b.n	ada2 <_ZN6SdFile8truncateEm+0x15e>
    }
  }
  fileSize_ = length;
    ad66:	687b      	ldr	r3, [r7, #4]
    ad68:	683a      	ldr	r2, [r7, #0]
    ad6a:	61da      	str	r2, [r3, #28]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    ad6c:	687b      	ldr	r3, [r7, #4]
    ad6e:	7a1b      	ldrb	r3, [r3, #8]
    ad70:	2280      	movs	r2, #128	; 0x80
    ad72:	4252      	negs	r2, r2
    ad74:	4313      	orrs	r3, r2
    ad76:	b2da      	uxtb	r2, r3
    ad78:	687b      	ldr	r3, [r7, #4]
    ad7a:	721a      	strb	r2, [r3, #8]

  if (!sync()) return false;
    ad7c:	687b      	ldr	r3, [r7, #4]
    ad7e:	0018      	movs	r0, r3
    ad80:	f7ff fea2 	bl	aac8 <_ZN6SdFile4syncEv>
    ad84:	0003      	movs	r3, r0
    ad86:	425a      	negs	r2, r3
    ad88:	4153      	adcs	r3, r2
    ad8a:	b2db      	uxtb	r3, r3
    ad8c:	2b00      	cmp	r3, #0
    ad8e:	d001      	beq.n	ad94 <_ZN6SdFile8truncateEm+0x150>
    ad90:	2300      	movs	r3, #0
    ad92:	e006      	b.n	ada2 <_ZN6SdFile8truncateEm+0x15e>

  // set file to correct position
  return seekSet(newPos);
    ad94:	68fa      	ldr	r2, [r7, #12]
    ad96:	687b      	ldr	r3, [r7, #4]
    ad98:	0011      	movs	r1, r2
    ad9a:	0018      	movs	r0, r3
    ad9c:	f7ff fe24 	bl	a9e8 <_ZN6SdFile7seekSetEm>
    ada0:	0003      	movs	r3, r0
}
    ada2:	0018      	movs	r0, r3
    ada4:	46bd      	mov	sp, r7
    ada6:	b004      	add	sp, #16
    ada8:	bd80      	pop	{r7, pc}
	...

0000adac <_ZN6SdFile5writeEPKvt>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    adac:	b590      	push	{r4, r7, lr}
    adae:	b08d      	sub	sp, #52	; 0x34
    adb0:	af00      	add	r7, sp, #0
    adb2:	60f8      	str	r0, [r7, #12]
    adb4:	60b9      	str	r1, [r7, #8]
    adb6:	1dbb      	adds	r3, r7, #6
    adb8:	801a      	strh	r2, [r3, #0]
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    adba:	68bb      	ldr	r3, [r7, #8]
    adbc:	62fb      	str	r3, [r7, #44]	; 0x2c

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
    adbe:	232a      	movs	r3, #42	; 0x2a
    adc0:	18fb      	adds	r3, r7, r3
    adc2:	1dba      	adds	r2, r7, #6
    adc4:	8812      	ldrh	r2, [r2, #0]
    adc6:	801a      	strh	r2, [r3, #0]

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    adc8:	68fb      	ldr	r3, [r7, #12]
    adca:	0018      	movs	r0, r3
    adcc:	f7ff f819 	bl	9e02 <_ZNK6SdFile6isFileEv>
    add0:	1e03      	subs	r3, r0, #0
    add2:	d005      	beq.n	ade0 <_ZN6SdFile5writeEPKvt+0x34>
    add4:	68fb      	ldr	r3, [r7, #12]
    add6:	7a1b      	ldrb	r3, [r3, #8]
    add8:	001a      	movs	r2, r3
    adda:	2302      	movs	r3, #2
    addc:	4013      	ands	r3, r2
    adde:	d101      	bne.n	ade4 <_ZN6SdFile5writeEPKvt+0x38>
    ade0:	2301      	movs	r3, #1
    ade2:	e000      	b.n	ade6 <_ZN6SdFile5writeEPKvt+0x3a>
    ade4:	2300      	movs	r3, #0
    ade6:	2b00      	cmp	r3, #0
    ade8:	d000      	beq.n	adec <_ZN6SdFile5writeEPKvt+0x40>
    adea:	e150      	b.n	b08e <_ZN6SdFile5writeEPKvt+0x2e2>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    adec:	68fb      	ldr	r3, [r7, #12]
    adee:	7a1b      	ldrb	r3, [r3, #8]
    adf0:	001a      	movs	r2, r3
    adf2:	2304      	movs	r3, #4
    adf4:	4013      	ands	r3, r2
    adf6:	d010      	beq.n	ae1a <_ZN6SdFile5writeEPKvt+0x6e>
    adf8:	68fb      	ldr	r3, [r7, #12]
    adfa:	691a      	ldr	r2, [r3, #16]
    adfc:	68fb      	ldr	r3, [r7, #12]
    adfe:	69db      	ldr	r3, [r3, #28]
    ae00:	429a      	cmp	r2, r3
    ae02:	d00a      	beq.n	ae1a <_ZN6SdFile5writeEPKvt+0x6e>
    if (!seekEnd()) goto writeErrorReturn;
    ae04:	68fb      	ldr	r3, [r7, #12]
    ae06:	0018      	movs	r0, r3
    ae08:	f7ff f809 	bl	9e1e <_ZN6SdFile7seekEndEv>
    ae0c:	0003      	movs	r3, r0
    ae0e:	425a      	negs	r2, r3
    ae10:	4153      	adcs	r3, r2
    ae12:	b2db      	uxtb	r3, r3
    ae14:	2b00      	cmp	r3, #0
    ae16:	d000      	beq.n	ae1a <_ZN6SdFile5writeEPKvt+0x6e>
    ae18:	e13b      	b.n	b092 <_ZN6SdFile5writeEPKvt+0x2e6>
  }

  while (nToWrite > 0) {
    ae1a:	232a      	movs	r3, #42	; 0x2a
    ae1c:	18fb      	adds	r3, r7, r3
    ae1e:	881b      	ldrh	r3, [r3, #0]
    ae20:	2b00      	cmp	r3, #0
    ae22:	dc00      	bgt.n	ae26 <_ZN6SdFile5writeEPKvt+0x7a>
    ae24:	e0fd      	b.n	b022 <_ZN6SdFile5writeEPKvt+0x276>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    ae26:	68fb      	ldr	r3, [r7, #12]
    ae28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ae2a:	68fb      	ldr	r3, [r7, #12]
    ae2c:	691b      	ldr	r3, [r3, #16]
    ae2e:	2123      	movs	r1, #35	; 0x23
    ae30:	187c      	adds	r4, r7, r1
    ae32:	0019      	movs	r1, r3
    ae34:	0010      	movs	r0, r2
    ae36:	f7ff f82e 	bl	9e96 <_ZNK8SdVolume14blockOfClusterEm>
    ae3a:	0003      	movs	r3, r0
    ae3c:	7023      	strb	r3, [r4, #0]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    ae3e:	68fb      	ldr	r3, [r7, #12]
    ae40:	691b      	ldr	r3, [r3, #16]
    ae42:	b29a      	uxth	r2, r3
    ae44:	2320      	movs	r3, #32
    ae46:	18fb      	adds	r3, r7, r3
    ae48:	05d2      	lsls	r2, r2, #23
    ae4a:	0dd2      	lsrs	r2, r2, #23
    ae4c:	801a      	strh	r2, [r3, #0]
    if (blockOfCluster == 0 && blockOffset == 0) {
    ae4e:	2323      	movs	r3, #35	; 0x23
    ae50:	18fb      	adds	r3, r7, r3
    ae52:	781b      	ldrb	r3, [r3, #0]
    ae54:	2b00      	cmp	r3, #0
    ae56:	d148      	bne.n	aeea <_ZN6SdFile5writeEPKvt+0x13e>
    ae58:	2320      	movs	r3, #32
    ae5a:	18fb      	adds	r3, r7, r3
    ae5c:	881b      	ldrh	r3, [r3, #0]
    ae5e:	2b00      	cmp	r3, #0
    ae60:	d143      	bne.n	aeea <_ZN6SdFile5writeEPKvt+0x13e>
      // start of new cluster
      if (curCluster_ == 0) {
    ae62:	68fb      	ldr	r3, [r7, #12]
    ae64:	68db      	ldr	r3, [r3, #12]
    ae66:	2b00      	cmp	r3, #0
    ae68:	d113      	bne.n	ae92 <_ZN6SdFile5writeEPKvt+0xe6>
        if (firstCluster_ == 0) {
    ae6a:	68fb      	ldr	r3, [r7, #12]
    ae6c:	6a1b      	ldr	r3, [r3, #32]
    ae6e:	2b00      	cmp	r3, #0
    ae70:	d10a      	bne.n	ae88 <_ZN6SdFile5writeEPKvt+0xdc>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
    ae72:	68fb      	ldr	r3, [r7, #12]
    ae74:	0018      	movs	r0, r3
    ae76:	f7ff f89d 	bl	9fb4 <_ZN6SdFile10addClusterEv>
    ae7a:	0003      	movs	r3, r0
    ae7c:	425a      	negs	r2, r3
    ae7e:	4153      	adcs	r3, r2
    ae80:	b2db      	uxtb	r3, r3
    ae82:	2b00      	cmp	r3, #0
    ae84:	d031      	beq.n	aeea <_ZN6SdFile5writeEPKvt+0x13e>
    ae86:	e10d      	b.n	b0a4 <_ZN6SdFile5writeEPKvt+0x2f8>
        } else {
          curCluster_ = firstCluster_;
    ae88:	68fb      	ldr	r3, [r7, #12]
    ae8a:	6a1a      	ldr	r2, [r3, #32]
    ae8c:	68fb      	ldr	r3, [r7, #12]
    ae8e:	60da      	str	r2, [r3, #12]
    ae90:	e02b      	b.n	aeea <_ZN6SdFile5writeEPKvt+0x13e>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    ae92:	68fb      	ldr	r3, [r7, #12]
    ae94:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ae96:	68fb      	ldr	r3, [r7, #12]
    ae98:	68db      	ldr	r3, [r3, #12]
    ae9a:	2214      	movs	r2, #20
    ae9c:	18ba      	adds	r2, r7, r2
    ae9e:	0019      	movs	r1, r3
    aea0:	f000 faae 	bl	b400 <_ZNK8SdVolume6fatGetEmPm>
    aea4:	0003      	movs	r3, r0
    aea6:	425a      	negs	r2, r3
    aea8:	4153      	adcs	r3, r2
    aeaa:	b2db      	uxtb	r3, r3
    aeac:	2b00      	cmp	r3, #0
    aeae:	d001      	beq.n	aeb4 <_ZN6SdFile5writeEPKvt+0x108>
    aeb0:	2300      	movs	r3, #0
    aeb2:	e0fd      	b.n	b0b0 <_ZN6SdFile5writeEPKvt+0x304>
        if (vol_->isEOC(next)) {
    aeb4:	68fb      	ldr	r3, [r7, #12]
    aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aeb8:	697a      	ldr	r2, [r7, #20]
    aeba:	0011      	movs	r1, r2
    aebc:	0018      	movs	r0, r3
    aebe:	f7ff f82d 	bl	9f1c <_ZNK8SdVolume5isEOCEm>
    aec2:	0003      	movs	r3, r0
    aec4:	1e5a      	subs	r2, r3, #1
    aec6:	4193      	sbcs	r3, r2
    aec8:	b2db      	uxtb	r3, r3
    aeca:	2b00      	cmp	r3, #0
    aecc:	d00a      	beq.n	aee4 <_ZN6SdFile5writeEPKvt+0x138>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    aece:	68fb      	ldr	r3, [r7, #12]
    aed0:	0018      	movs	r0, r3
    aed2:	f7ff f86f 	bl	9fb4 <_ZN6SdFile10addClusterEv>
    aed6:	0003      	movs	r3, r0
    aed8:	425a      	negs	r2, r3
    aeda:	4153      	adcs	r3, r2
    aedc:	b2db      	uxtb	r3, r3
    aede:	2b00      	cmp	r3, #0
    aee0:	d003      	beq.n	aeea <_ZN6SdFile5writeEPKvt+0x13e>
    aee2:	e0df      	b.n	b0a4 <_ZN6SdFile5writeEPKvt+0x2f8>
        } else {
          curCluster_ = next;
    aee4:	697a      	ldr	r2, [r7, #20]
    aee6:	68fb      	ldr	r3, [r7, #12]
    aee8:	60da      	str	r2, [r3, #12]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    aeea:	2328      	movs	r3, #40	; 0x28
    aeec:	18fb      	adds	r3, r7, r3
    aeee:	2220      	movs	r2, #32
    aef0:	18ba      	adds	r2, r7, r2
    aef2:	8812      	ldrh	r2, [r2, #0]
    aef4:	2180      	movs	r1, #128	; 0x80
    aef6:	0089      	lsls	r1, r1, #2
    aef8:	1a8a      	subs	r2, r1, r2
    aefa:	801a      	strh	r2, [r3, #0]

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    aefc:	2328      	movs	r3, #40	; 0x28
    aefe:	18fb      	adds	r3, r7, r3
    af00:	881a      	ldrh	r2, [r3, #0]
    af02:	232a      	movs	r3, #42	; 0x2a
    af04:	18fb      	adds	r3, r7, r3
    af06:	881b      	ldrh	r3, [r3, #0]
    af08:	429a      	cmp	r2, r3
    af0a:	dd05      	ble.n	af18 <_ZN6SdFile5writeEPKvt+0x16c>
    af0c:	2328      	movs	r3, #40	; 0x28
    af0e:	18fb      	adds	r3, r7, r3
    af10:	222a      	movs	r2, #42	; 0x2a
    af12:	18ba      	adds	r2, r7, r2
    af14:	8812      	ldrh	r2, [r2, #0]
    af16:	801a      	strh	r2, [r3, #0]

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    af18:	68fb      	ldr	r3, [r7, #12]
    af1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    af1c:	68fb      	ldr	r3, [r7, #12]
    af1e:	68db      	ldr	r3, [r3, #12]
    af20:	0019      	movs	r1, r3
    af22:	0010      	movs	r0, r2
    af24:	f7fe ffc9 	bl	9eba <_ZNK8SdVolume17clusterStartBlockEm>
    af28:	0002      	movs	r2, r0
    af2a:	2323      	movs	r3, #35	; 0x23
    af2c:	18fb      	adds	r3, r7, r3
    af2e:	781b      	ldrb	r3, [r3, #0]
    af30:	18d3      	adds	r3, r2, r3
    af32:	61fb      	str	r3, [r7, #28]
    if (n == 512) {
    af34:	2328      	movs	r3, #40	; 0x28
    af36:	18fb      	adds	r3, r7, r3
    af38:	881a      	ldrh	r2, [r3, #0]
    af3a:	2380      	movs	r3, #128	; 0x80
    af3c:	009b      	lsls	r3, r3, #2
    af3e:	429a      	cmp	r2, r3
    af40:	d11d      	bne.n	af7e <_ZN6SdFile5writeEPKvt+0x1d2>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    af42:	4b5d      	ldr	r3, [pc, #372]	; (b0b8 <_ZN6SdFile5writeEPKvt+0x30c>)
    af44:	681a      	ldr	r2, [r3, #0]
    af46:	69fb      	ldr	r3, [r7, #28]
    af48:	429a      	cmp	r2, r3
    af4a:	d103      	bne.n	af54 <_ZN6SdFile5writeEPKvt+0x1a8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    af4c:	4b5a      	ldr	r3, [pc, #360]	; (b0b8 <_ZN6SdFile5writeEPKvt+0x30c>)
    af4e:	2201      	movs	r2, #1
    af50:	4252      	negs	r2, r2
    af52:	601a      	str	r2, [r3, #0]
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    af54:	68fb      	ldr	r3, [r7, #12]
    af56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    af5a:	69f9      	ldr	r1, [r7, #28]
    af5c:	0018      	movs	r0, r3
    af5e:	f7ff f815 	bl	9f8c <_ZN8SdVolume10writeBlockEmPKh>
    af62:	0003      	movs	r3, r0
    af64:	425a      	negs	r2, r3
    af66:	4153      	adcs	r3, r2
    af68:	b2db      	uxtb	r3, r3
    af6a:	2b00      	cmp	r3, #0
    af6c:	d000      	beq.n	af70 <_ZN6SdFile5writeEPKvt+0x1c4>
    af6e:	e092      	b.n	b096 <_ZN6SdFile5writeEPKvt+0x2ea>
      src += 512;
    af70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af72:	2280      	movs	r2, #128	; 0x80
    af74:	0092      	lsls	r2, r2, #2
    af76:	4694      	mov	ip, r2
    af78:	4463      	add	r3, ip
    af7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    af7c:	e03e      	b.n	affc <_ZN6SdFile5writeEPKvt+0x250>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    af7e:	2320      	movs	r3, #32
    af80:	18fb      	adds	r3, r7, r3
    af82:	881b      	ldrh	r3, [r3, #0]
    af84:	2b00      	cmp	r3, #0
    af86:	d114      	bne.n	afb2 <_ZN6SdFile5writeEPKvt+0x206>
    af88:	68fb      	ldr	r3, [r7, #12]
    af8a:	691a      	ldr	r2, [r3, #16]
    af8c:	68fb      	ldr	r3, [r7, #12]
    af8e:	69db      	ldr	r3, [r3, #28]
    af90:	429a      	cmp	r2, r3
    af92:	d30e      	bcc.n	afb2 <_ZN6SdFile5writeEPKvt+0x206>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    af94:	f000 f94c 	bl	b230 <_ZN8SdVolume10cacheFlushEv>
    af98:	0003      	movs	r3, r0
    af9a:	425a      	negs	r2, r3
    af9c:	4153      	adcs	r3, r2
    af9e:	b2db      	uxtb	r3, r3
    afa0:	2b00      	cmp	r3, #0
    afa2:	d000      	beq.n	afa6 <_ZN6SdFile5writeEPKvt+0x1fa>
    afa4:	e079      	b.n	b09a <_ZN6SdFile5writeEPKvt+0x2ee>
        SdVolume::cacheBlockNumber_ = block;
    afa6:	4b44      	ldr	r3, [pc, #272]	; (b0b8 <_ZN6SdFile5writeEPKvt+0x30c>)
    afa8:	69fa      	ldr	r2, [r7, #28]
    afaa:	601a      	str	r2, [r3, #0]
        SdVolume::cacheSetDirty();
    afac:	f7fe ff96 	bl	9edc <_ZN8SdVolume13cacheSetDirtyEv>
    afb0:	e00b      	b.n	afca <_ZN6SdFile5writeEPKvt+0x21e>
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    afb2:	69fb      	ldr	r3, [r7, #28]
    afb4:	2101      	movs	r1, #1
    afb6:	0018      	movs	r0, r3
    afb8:	f000 f978 	bl	b2ac <_ZN8SdVolume13cacheRawBlockEmh>
    afbc:	0003      	movs	r3, r0
    afbe:	425a      	negs	r2, r3
    afc0:	4153      	adcs	r3, r2
    afc2:	b2db      	uxtb	r3, r3
    afc4:	2b00      	cmp	r3, #0
    afc6:	d000      	beq.n	afca <_ZN6SdFile5writeEPKvt+0x21e>
    afc8:	e069      	b.n	b09e <_ZN6SdFile5writeEPKvt+0x2f2>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    afca:	2320      	movs	r3, #32
    afcc:	18fb      	adds	r3, r7, r3
    afce:	881a      	ldrh	r2, [r3, #0]
    afd0:	4b3a      	ldr	r3, [pc, #232]	; (b0bc <_ZN6SdFile5writeEPKvt+0x310>)
    afd2:	18d3      	adds	r3, r2, r3
    afd4:	627b      	str	r3, [r7, #36]	; 0x24
      uint8_t* end = dst + n;
    afd6:	2328      	movs	r3, #40	; 0x28
    afd8:	18fb      	adds	r3, r7, r3
    afda:	881b      	ldrh	r3, [r3, #0]
    afdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    afde:	18d3      	adds	r3, r2, r3
    afe0:	61bb      	str	r3, [r7, #24]
      while (dst != end) *dst++ = *src++;
    afe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    afe4:	69bb      	ldr	r3, [r7, #24]
    afe6:	429a      	cmp	r2, r3
    afe8:	d008      	beq.n	affc <_ZN6SdFile5writeEPKvt+0x250>
    afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    afec:	1c5a      	adds	r2, r3, #1
    afee:	627a      	str	r2, [r7, #36]	; 0x24
    aff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    aff2:	1c51      	adds	r1, r2, #1
    aff4:	62f9      	str	r1, [r7, #44]	; 0x2c
    aff6:	7812      	ldrb	r2, [r2, #0]
    aff8:	701a      	strb	r2, [r3, #0]
    affa:	e7f2      	b.n	afe2 <_ZN6SdFile5writeEPKvt+0x236>
    }
    nToWrite -= n;
    affc:	232a      	movs	r3, #42	; 0x2a
    affe:	18fb      	adds	r3, r7, r3
    b000:	222a      	movs	r2, #42	; 0x2a
    b002:	18b9      	adds	r1, r7, r2
    b004:	2228      	movs	r2, #40	; 0x28
    b006:	18ba      	adds	r2, r7, r2
    b008:	8809      	ldrh	r1, [r1, #0]
    b00a:	8812      	ldrh	r2, [r2, #0]
    b00c:	1a8a      	subs	r2, r1, r2
    b00e:	801a      	strh	r2, [r3, #0]
    curPosition_ += n;
    b010:	68fb      	ldr	r3, [r7, #12]
    b012:	691a      	ldr	r2, [r3, #16]
    b014:	2328      	movs	r3, #40	; 0x28
    b016:	18fb      	adds	r3, r7, r3
    b018:	881b      	ldrh	r3, [r3, #0]
    b01a:	18d2      	adds	r2, r2, r3
    b01c:	68fb      	ldr	r3, [r7, #12]
    b01e:	611a      	str	r2, [r3, #16]
  while (nToWrite > 0) {
    b020:	e6fb      	b.n	ae1a <_ZN6SdFile5writeEPKvt+0x6e>
  }
  if (curPosition_ > fileSize_) {
    b022:	68fb      	ldr	r3, [r7, #12]
    b024:	691a      	ldr	r2, [r3, #16]
    b026:	68fb      	ldr	r3, [r7, #12]
    b028:	69db      	ldr	r3, [r3, #28]
    b02a:	429a      	cmp	r2, r3
    b02c:	d90c      	bls.n	b048 <_ZN6SdFile5writeEPKvt+0x29c>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    b02e:	68fb      	ldr	r3, [r7, #12]
    b030:	691a      	ldr	r2, [r3, #16]
    b032:	68fb      	ldr	r3, [r7, #12]
    b034:	61da      	str	r2, [r3, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    b036:	68fb      	ldr	r3, [r7, #12]
    b038:	7a1b      	ldrb	r3, [r3, #8]
    b03a:	2280      	movs	r2, #128	; 0x80
    b03c:	4252      	negs	r2, r2
    b03e:	4313      	orrs	r3, r2
    b040:	b2da      	uxtb	r2, r3
    b042:	68fb      	ldr	r3, [r7, #12]
    b044:	721a      	strb	r2, [r3, #8]
    b046:	e00f      	b.n	b068 <_ZN6SdFile5writeEPKvt+0x2bc>
  } else if (dateTime_ && nbyte) {
    b048:	4b1d      	ldr	r3, [pc, #116]	; (b0c0 <_ZN6SdFile5writeEPKvt+0x314>)
    b04a:	681b      	ldr	r3, [r3, #0]
    b04c:	2b00      	cmp	r3, #0
    b04e:	d00b      	beq.n	b068 <_ZN6SdFile5writeEPKvt+0x2bc>
    b050:	1dbb      	adds	r3, r7, #6
    b052:	881b      	ldrh	r3, [r3, #0]
    b054:	2b00      	cmp	r3, #0
    b056:	d007      	beq.n	b068 <_ZN6SdFile5writeEPKvt+0x2bc>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    b058:	68fb      	ldr	r3, [r7, #12]
    b05a:	7a1b      	ldrb	r3, [r3, #8]
    b05c:	2280      	movs	r2, #128	; 0x80
    b05e:	4252      	negs	r2, r2
    b060:	4313      	orrs	r3, r2
    b062:	b2da      	uxtb	r2, r3
    b064:	68fb      	ldr	r3, [r7, #12]
    b066:	721a      	strb	r2, [r3, #8]
  }

  if (flags_ & O_SYNC) {
    b068:	68fb      	ldr	r3, [r7, #12]
    b06a:	7a1b      	ldrb	r3, [r3, #8]
    b06c:	001a      	movs	r2, r3
    b06e:	2308      	movs	r3, #8
    b070:	4013      	ands	r3, r2
    b072:	d009      	beq.n	b088 <_ZN6SdFile5writeEPKvt+0x2dc>
    if (!sync()) goto writeErrorReturn;
    b074:	68fb      	ldr	r3, [r7, #12]
    b076:	0018      	movs	r0, r3
    b078:	f7ff fd26 	bl	aac8 <_ZN6SdFile4syncEv>
    b07c:	0003      	movs	r3, r0
    b07e:	425a      	negs	r2, r3
    b080:	4153      	adcs	r3, r2
    b082:	b2db      	uxtb	r3, r3
    b084:	2b00      	cmp	r3, #0
    b086:	d10c      	bne.n	b0a2 <_ZN6SdFile5writeEPKvt+0x2f6>
  }
  return nbyte;
    b088:	1dbb      	adds	r3, r7, #6
    b08a:	881b      	ldrh	r3, [r3, #0]
    b08c:	e010      	b.n	b0b0 <_ZN6SdFile5writeEPKvt+0x304>
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    b08e:	46c0      	nop			; (mov r8, r8)
    b090:	e008      	b.n	b0a4 <_ZN6SdFile5writeEPKvt+0x2f8>
    if (!seekEnd()) goto writeErrorReturn;
    b092:	46c0      	nop			; (mov r8, r8)
    b094:	e006      	b.n	b0a4 <_ZN6SdFile5writeEPKvt+0x2f8>
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    b096:	46c0      	nop			; (mov r8, r8)
    b098:	e004      	b.n	b0a4 <_ZN6SdFile5writeEPKvt+0x2f8>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    b09a:	46c0      	nop			; (mov r8, r8)
    b09c:	e002      	b.n	b0a4 <_ZN6SdFile5writeEPKvt+0x2f8>
          goto writeErrorReturn;
    b09e:	46c0      	nop			; (mov r8, r8)
    b0a0:	e000      	b.n	b0a4 <_ZN6SdFile5writeEPKvt+0x2f8>
    if (!sync()) goto writeErrorReturn;
    b0a2:	46c0      	nop			; (mov r8, r8)

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
    b0a4:	68fb      	ldr	r3, [r7, #12]
    b0a6:	2101      	movs	r1, #1
    b0a8:	0018      	movs	r0, r3
    b0aa:	f7fd fc61 	bl	8970 <_ZN5Print13setWriteErrorEi>
  return 0;
    b0ae:	2300      	movs	r3, #0
}
    b0b0:	0018      	movs	r0, r3
    b0b2:	46bd      	mov	sp, r7
    b0b4:	b00d      	add	sp, #52	; 0x34
    b0b6:	bd90      	pop	{r4, r7, pc}
    b0b8:	2000004c 	.word	0x2000004c
    b0bc:	20000968 	.word	0x20000968
    b0c0:	20000964 	.word	0x20000964

0000b0c4 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    b0c4:	b580      	push	{r7, lr}
    b0c6:	b082      	sub	sp, #8
    b0c8:	af00      	add	r7, sp, #0
    b0ca:	6078      	str	r0, [r7, #4]
    b0cc:	000a      	movs	r2, r1
    b0ce:	1cfb      	adds	r3, r7, #3
    b0d0:	701a      	strb	r2, [r3, #0]
  return write(&b, 1);
    b0d2:	1cf9      	adds	r1, r7, #3
    b0d4:	687b      	ldr	r3, [r7, #4]
    b0d6:	2201      	movs	r2, #1
    b0d8:	0018      	movs	r0, r3
    b0da:	f7ff fe67 	bl	adac <_ZN6SdFile5writeEPKvt>
    b0de:	0003      	movs	r3, r0
}
    b0e0:	0018      	movs	r0, r3
    b0e2:	46bd      	mov	sp, r7
    b0e4:	b002      	add	sp, #8
    b0e6:	bd80      	pop	{r7, pc}

0000b0e8 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    b0e8:	b580      	push	{r7, lr}
    b0ea:	b08a      	sub	sp, #40	; 0x28
    b0ec:	af00      	add	r7, sp, #0
    b0ee:	60f8      	str	r0, [r7, #12]
    b0f0:	60b9      	str	r1, [r7, #8]
    b0f2:	607a      	str	r2, [r7, #4]

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    b0f4:	687b      	ldr	r3, [r7, #4]
    b0f6:	681b      	ldr	r3, [r3, #0]
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d008      	beq.n	b10e <_ZN8SdVolume15allocContiguousEmPm+0x26>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    b0fc:	687b      	ldr	r3, [r7, #4]
    b0fe:	681b      	ldr	r3, [r3, #0]
    b100:	3301      	adds	r3, #1
    b102:	627b      	str	r3, [r7, #36]	; 0x24

    // don't save new start location
    setStart = false;
    b104:	2323      	movs	r3, #35	; 0x23
    b106:	18fb      	adds	r3, r7, r3
    b108:	2200      	movs	r2, #0
    b10a:	701a      	strb	r2, [r3, #0]
    b10c:	e00a      	b.n	b124 <_ZN8SdVolume15allocContiguousEmPm+0x3c>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    b10e:	68fb      	ldr	r3, [r7, #12]
    b110:	681b      	ldr	r3, [r3, #0]
    b112:	627b      	str	r3, [r7, #36]	; 0x24

    // save next search start if one cluster
    setStart = 1 == count;
    b114:	68bb      	ldr	r3, [r7, #8]
    b116:	3b01      	subs	r3, #1
    b118:	425a      	negs	r2, r3
    b11a:	4153      	adcs	r3, r2
    b11c:	b2da      	uxtb	r2, r3
    b11e:	2323      	movs	r3, #35	; 0x23
    b120:	18fb      	adds	r3, r7, r3
    b122:	701a      	strb	r2, [r3, #0]
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b126:	61fb      	str	r3, [r7, #28]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    b128:	68fb      	ldr	r3, [r7, #12]
    b12a:	68db      	ldr	r3, [r3, #12]
    b12c:	3301      	adds	r3, #1
    b12e:	617b      	str	r3, [r7, #20]

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    b130:	2300      	movs	r3, #0
    b132:	61bb      	str	r3, [r7, #24]
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    b134:	68fb      	ldr	r3, [r7, #12]
    b136:	68da      	ldr	r2, [r3, #12]
    b138:	69bb      	ldr	r3, [r7, #24]
    b13a:	429a      	cmp	r2, r3
    b13c:	d801      	bhi.n	b142 <_ZN8SdVolume15allocContiguousEmPm+0x5a>
    b13e:	2300      	movs	r3, #0
    b140:	e071      	b.n	b226 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    b142:	69fa      	ldr	r2, [r7, #28]
    b144:	697b      	ldr	r3, [r7, #20]
    b146:	429a      	cmp	r2, r3
    b148:	d903      	bls.n	b152 <_ZN8SdVolume15allocContiguousEmPm+0x6a>
      bgnCluster = endCluster = 2;
    b14a:	2302      	movs	r3, #2
    b14c:	61fb      	str	r3, [r7, #28]
    b14e:	69fb      	ldr	r3, [r7, #28]
    b150:	627b      	str	r3, [r7, #36]	; 0x24
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    b152:	2310      	movs	r3, #16
    b154:	18fa      	adds	r2, r7, r3
    b156:	69f9      	ldr	r1, [r7, #28]
    b158:	68fb      	ldr	r3, [r7, #12]
    b15a:	0018      	movs	r0, r3
    b15c:	f000 f950 	bl	b400 <_ZNK8SdVolume6fatGetEmPm>
    b160:	0003      	movs	r3, r0
    b162:	425a      	negs	r2, r3
    b164:	4153      	adcs	r3, r2
    b166:	b2db      	uxtb	r3, r3
    b168:	2b00      	cmp	r3, #0
    b16a:	d001      	beq.n	b170 <_ZN8SdVolume15allocContiguousEmPm+0x88>
    b16c:	2300      	movs	r3, #0
    b16e:	e05a      	b.n	b226 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

    if (f != 0) {
    b170:	693b      	ldr	r3, [r7, #16]
    b172:	2b00      	cmp	r3, #0
    b174:	d003      	beq.n	b17e <_ZN8SdVolume15allocContiguousEmPm+0x96>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    b176:	69fb      	ldr	r3, [r7, #28]
    b178:	3301      	adds	r3, #1
    b17a:	627b      	str	r3, [r7, #36]	; 0x24
    b17c:	e013      	b.n	b1a6 <_ZN8SdVolume15allocContiguousEmPm+0xbe>
    } else if ((endCluster - bgnCluster + 1) == count) {
    b17e:	69fa      	ldr	r2, [r7, #28]
    b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b182:	1ad3      	subs	r3, r2, r3
    b184:	1c5a      	adds	r2, r3, #1
    b186:	68bb      	ldr	r3, [r7, #8]
    b188:	429a      	cmp	r2, r3
    b18a:	d10c      	bne.n	b1a6 <_ZN8SdVolume15allocContiguousEmPm+0xbe>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    b18c:	69fa      	ldr	r2, [r7, #28]
    b18e:	68fb      	ldr	r3, [r7, #12]
    b190:	0011      	movs	r1, r2
    b192:	0018      	movs	r0, r3
    b194:	f7fe feb0 	bl	9ef8 <_ZN8SdVolume9fatPutEOCEm>
    b198:	0003      	movs	r3, r0
    b19a:	425a      	negs	r2, r3
    b19c:	4153      	adcs	r3, r2
    b19e:	b2db      	uxtb	r3, r3
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d107      	bne.n	b1b4 <_ZN8SdVolume15allocContiguousEmPm+0xcc>
    b1a4:	e008      	b.n	b1b8 <_ZN8SdVolume15allocContiguousEmPm+0xd0>
  for (uint32_t n = 0;; n++, endCluster++) {
    b1a6:	69bb      	ldr	r3, [r7, #24]
    b1a8:	3301      	adds	r3, #1
    b1aa:	61bb      	str	r3, [r7, #24]
    b1ac:	69fb      	ldr	r3, [r7, #28]
    b1ae:	3301      	adds	r3, #1
    b1b0:	61fb      	str	r3, [r7, #28]
  }
    b1b2:	e7bf      	b.n	b134 <_ZN8SdVolume15allocContiguousEmPm+0x4c>
  if (!fatPutEOC(endCluster)) return false;
    b1b4:	2300      	movs	r3, #0
    b1b6:	e036      	b.n	b226 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

  // link clusters
  while (endCluster > bgnCluster) {
    b1b8:	69fa      	ldr	r2, [r7, #28]
    b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b1bc:	429a      	cmp	r2, r3
    b1be:	d912      	bls.n	b1e6 <_ZN8SdVolume15allocContiguousEmPm+0xfe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    b1c0:	69fb      	ldr	r3, [r7, #28]
    b1c2:	1e59      	subs	r1, r3, #1
    b1c4:	69fa      	ldr	r2, [r7, #28]
    b1c6:	68fb      	ldr	r3, [r7, #12]
    b1c8:	0018      	movs	r0, r3
    b1ca:	f000 f96b 	bl	b4a4 <_ZN8SdVolume6fatPutEmm>
    b1ce:	0003      	movs	r3, r0
    b1d0:	425a      	negs	r2, r3
    b1d2:	4153      	adcs	r3, r2
    b1d4:	b2db      	uxtb	r3, r3
    b1d6:	2b00      	cmp	r3, #0
    b1d8:	d001      	beq.n	b1de <_ZN8SdVolume15allocContiguousEmPm+0xf6>
    b1da:	2300      	movs	r3, #0
    b1dc:	e023      	b.n	b226 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    endCluster--;
    b1de:	69fb      	ldr	r3, [r7, #28]
    b1e0:	3b01      	subs	r3, #1
    b1e2:	61fb      	str	r3, [r7, #28]
  while (endCluster > bgnCluster) {
    b1e4:	e7e8      	b.n	b1b8 <_ZN8SdVolume15allocContiguousEmPm+0xd0>
  }
  if (*curCluster != 0) {
    b1e6:	687b      	ldr	r3, [r7, #4]
    b1e8:	681b      	ldr	r3, [r3, #0]
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	d00e      	beq.n	b20c <_ZN8SdVolume15allocContiguousEmPm+0x124>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    b1ee:	687b      	ldr	r3, [r7, #4]
    b1f0:	6819      	ldr	r1, [r3, #0]
    b1f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b1f4:	68fb      	ldr	r3, [r7, #12]
    b1f6:	0018      	movs	r0, r3
    b1f8:	f000 f954 	bl	b4a4 <_ZN8SdVolume6fatPutEmm>
    b1fc:	0003      	movs	r3, r0
    b1fe:	425a      	negs	r2, r3
    b200:	4153      	adcs	r3, r2
    b202:	b2db      	uxtb	r3, r3
    b204:	2b00      	cmp	r3, #0
    b206:	d001      	beq.n	b20c <_ZN8SdVolume15allocContiguousEmPm+0x124>
    b208:	2300      	movs	r3, #0
    b20a:	e00c      	b.n	b226 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    b20c:	687b      	ldr	r3, [r7, #4]
    b20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b210:	601a      	str	r2, [r3, #0]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    b212:	2323      	movs	r3, #35	; 0x23
    b214:	18fb      	adds	r3, r7, r3
    b216:	781b      	ldrb	r3, [r3, #0]
    b218:	2b00      	cmp	r3, #0
    b21a:	d003      	beq.n	b224 <_ZN8SdVolume15allocContiguousEmPm+0x13c>
    b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b21e:	1c5a      	adds	r2, r3, #1
    b220:	68fb      	ldr	r3, [r7, #12]
    b222:	601a      	str	r2, [r3, #0]

  return true;
    b224:	2301      	movs	r3, #1
}
    b226:	0018      	movs	r0, r3
    b228:	46bd      	mov	sp, r7
    b22a:	b00a      	add	sp, #40	; 0x28
    b22c:	bd80      	pop	{r7, pc}
	...

0000b230 <_ZN8SdVolume10cacheFlushEv>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    b230:	b580      	push	{r7, lr}
    b232:	af00      	add	r7, sp, #0
  if (cacheDirty_) {
    b234:	4b18      	ldr	r3, [pc, #96]	; (b298 <_ZN8SdVolume10cacheFlushEv+0x68>)
    b236:	781b      	ldrb	r3, [r3, #0]
    b238:	2b00      	cmp	r3, #0
    b23a:	d029      	beq.n	b290 <_ZN8SdVolume10cacheFlushEv+0x60>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    b23c:	4b17      	ldr	r3, [pc, #92]	; (b29c <_ZN8SdVolume10cacheFlushEv+0x6c>)
    b23e:	6818      	ldr	r0, [r3, #0]
    b240:	4b17      	ldr	r3, [pc, #92]	; (b2a0 <_ZN8SdVolume10cacheFlushEv+0x70>)
    b242:	681b      	ldr	r3, [r3, #0]
    b244:	4a17      	ldr	r2, [pc, #92]	; (b2a4 <_ZN8SdVolume10cacheFlushEv+0x74>)
    b246:	0019      	movs	r1, r3
    b248:	f7fe fcd0 	bl	9bec <_ZN7Sd2Card10writeBlockEmPKh>
    b24c:	0003      	movs	r3, r0
    b24e:	425a      	negs	r2, r3
    b250:	4153      	adcs	r3, r2
    b252:	b2db      	uxtb	r3, r3
    b254:	2b00      	cmp	r3, #0
    b256:	d001      	beq.n	b25c <_ZN8SdVolume10cacheFlushEv+0x2c>
      return false;
    b258:	2300      	movs	r3, #0
    b25a:	e01a      	b.n	b292 <_ZN8SdVolume10cacheFlushEv+0x62>
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    b25c:	4b12      	ldr	r3, [pc, #72]	; (b2a8 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b25e:	681b      	ldr	r3, [r3, #0]
    b260:	2b00      	cmp	r3, #0
    b262:	d012      	beq.n	b28a <_ZN8SdVolume10cacheFlushEv+0x5a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    b264:	4b0d      	ldr	r3, [pc, #52]	; (b29c <_ZN8SdVolume10cacheFlushEv+0x6c>)
    b266:	6818      	ldr	r0, [r3, #0]
    b268:	4b0f      	ldr	r3, [pc, #60]	; (b2a8 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b26a:	681b      	ldr	r3, [r3, #0]
    b26c:	4a0d      	ldr	r2, [pc, #52]	; (b2a4 <_ZN8SdVolume10cacheFlushEv+0x74>)
    b26e:	0019      	movs	r1, r3
    b270:	f7fe fcbc 	bl	9bec <_ZN7Sd2Card10writeBlockEmPKh>
    b274:	0003      	movs	r3, r0
    b276:	425a      	negs	r2, r3
    b278:	4153      	adcs	r3, r2
    b27a:	b2db      	uxtb	r3, r3
    b27c:	2b00      	cmp	r3, #0
    b27e:	d001      	beq.n	b284 <_ZN8SdVolume10cacheFlushEv+0x54>
        return false;
    b280:	2300      	movs	r3, #0
    b282:	e006      	b.n	b292 <_ZN8SdVolume10cacheFlushEv+0x62>
      }
      cacheMirrorBlock_ = 0;
    b284:	4b08      	ldr	r3, [pc, #32]	; (b2a8 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b286:	2200      	movs	r2, #0
    b288:	601a      	str	r2, [r3, #0]
    }
    cacheDirty_ = 0;
    b28a:	4b03      	ldr	r3, [pc, #12]	; (b298 <_ZN8SdVolume10cacheFlushEv+0x68>)
    b28c:	2200      	movs	r2, #0
    b28e:	701a      	strb	r2, [r3, #0]
  }
  return true;
    b290:	2301      	movs	r3, #1
}
    b292:	0018      	movs	r0, r3
    b294:	46bd      	mov	sp, r7
    b296:	bd80      	pop	{r7, pc}
    b298:	20000b6c 	.word	0x20000b6c
    b29c:	20000b68 	.word	0x20000b68
    b2a0:	2000004c 	.word	0x2000004c
    b2a4:	20000968 	.word	0x20000968
    b2a8:	20000b70 	.word	0x20000b70

0000b2ac <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    b2ac:	b580      	push	{r7, lr}
    b2ae:	b082      	sub	sp, #8
    b2b0:	af00      	add	r7, sp, #0
    b2b2:	6078      	str	r0, [r7, #4]
    b2b4:	000a      	movs	r2, r1
    b2b6:	1cfb      	adds	r3, r7, #3
    b2b8:	701a      	strb	r2, [r3, #0]
  if (cacheBlockNumber_ != blockNumber) {
    b2ba:	4b17      	ldr	r3, [pc, #92]	; (b318 <_ZN8SdVolume13cacheRawBlockEmh+0x6c>)
    b2bc:	681a      	ldr	r2, [r3, #0]
    b2be:	687b      	ldr	r3, [r7, #4]
    b2c0:	429a      	cmp	r2, r3
    b2c2:	d01b      	beq.n	b2fc <_ZN8SdVolume13cacheRawBlockEmh+0x50>
    if (!cacheFlush()) return false;
    b2c4:	f7ff ffb4 	bl	b230 <_ZN8SdVolume10cacheFlushEv>
    b2c8:	0003      	movs	r3, r0
    b2ca:	425a      	negs	r2, r3
    b2cc:	4153      	adcs	r3, r2
    b2ce:	b2db      	uxtb	r3, r3
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d001      	beq.n	b2d8 <_ZN8SdVolume13cacheRawBlockEmh+0x2c>
    b2d4:	2300      	movs	r3, #0
    b2d6:	e01a      	b.n	b30e <_ZN8SdVolume13cacheRawBlockEmh+0x62>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    b2d8:	4b10      	ldr	r3, [pc, #64]	; (b31c <_ZN8SdVolume13cacheRawBlockEmh+0x70>)
    b2da:	681b      	ldr	r3, [r3, #0]
    b2dc:	4a10      	ldr	r2, [pc, #64]	; (b320 <_ZN8SdVolume13cacheRawBlockEmh+0x74>)
    b2de:	6879      	ldr	r1, [r7, #4]
    b2e0:	0018      	movs	r0, r3
    b2e2:	f7fe fa9b 	bl	981c <_ZN7Sd2Card9readBlockEmPh>
    b2e6:	0003      	movs	r3, r0
    b2e8:	425a      	negs	r2, r3
    b2ea:	4153      	adcs	r3, r2
    b2ec:	b2db      	uxtb	r3, r3
    b2ee:	2b00      	cmp	r3, #0
    b2f0:	d001      	beq.n	b2f6 <_ZN8SdVolume13cacheRawBlockEmh+0x4a>
    b2f2:	2300      	movs	r3, #0
    b2f4:	e00b      	b.n	b30e <_ZN8SdVolume13cacheRawBlockEmh+0x62>
    cacheBlockNumber_ = blockNumber;
    b2f6:	4b08      	ldr	r3, [pc, #32]	; (b318 <_ZN8SdVolume13cacheRawBlockEmh+0x6c>)
    b2f8:	687a      	ldr	r2, [r7, #4]
    b2fa:	601a      	str	r2, [r3, #0]
  }
  cacheDirty_ |= action;
    b2fc:	4b09      	ldr	r3, [pc, #36]	; (b324 <_ZN8SdVolume13cacheRawBlockEmh+0x78>)
    b2fe:	781a      	ldrb	r2, [r3, #0]
    b300:	1cfb      	adds	r3, r7, #3
    b302:	781b      	ldrb	r3, [r3, #0]
    b304:	4313      	orrs	r3, r2
    b306:	b2da      	uxtb	r2, r3
    b308:	4b06      	ldr	r3, [pc, #24]	; (b324 <_ZN8SdVolume13cacheRawBlockEmh+0x78>)
    b30a:	701a      	strb	r2, [r3, #0]
  return true;
    b30c:	2301      	movs	r3, #1
}
    b30e:	0018      	movs	r0, r3
    b310:	46bd      	mov	sp, r7
    b312:	b002      	add	sp, #8
    b314:	bd80      	pop	{r7, pc}
    b316:	46c0      	nop			; (mov r8, r8)
    b318:	2000004c 	.word	0x2000004c
    b31c:	20000b68 	.word	0x20000b68
    b320:	20000968 	.word	0x20000968
    b324:	20000b6c 	.word	0x20000b6c

0000b328 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    b328:	b580      	push	{r7, lr}
    b32a:	b084      	sub	sp, #16
    b32c:	af00      	add	r7, sp, #0
    b32e:	6078      	str	r0, [r7, #4]
  if (!cacheFlush()) return false;
    b330:	f7ff ff7e 	bl	b230 <_ZN8SdVolume10cacheFlushEv>
    b334:	0003      	movs	r3, r0
    b336:	425a      	negs	r2, r3
    b338:	4153      	adcs	r3, r2
    b33a:	b2db      	uxtb	r3, r3
    b33c:	2b00      	cmp	r3, #0
    b33e:	d001      	beq.n	b344 <_ZN8SdVolume14cacheZeroBlockEm+0x1c>
    b340:	2300      	movs	r3, #0
    b342:	e01d      	b.n	b380 <_ZN8SdVolume14cacheZeroBlockEm+0x58>

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    b344:	230e      	movs	r3, #14
    b346:	18fb      	adds	r3, r7, r3
    b348:	2200      	movs	r2, #0
    b34a:	801a      	strh	r2, [r3, #0]
    b34c:	230e      	movs	r3, #14
    b34e:	18fb      	adds	r3, r7, r3
    b350:	881b      	ldrh	r3, [r3, #0]
    b352:	4a0d      	ldr	r2, [pc, #52]	; (b388 <_ZN8SdVolume14cacheZeroBlockEm+0x60>)
    b354:	4293      	cmp	r3, r2
    b356:	dc0d      	bgt.n	b374 <_ZN8SdVolume14cacheZeroBlockEm+0x4c>
    cacheBuffer_.data[i] = 0;
    b358:	230e      	movs	r3, #14
    b35a:	18fb      	adds	r3, r7, r3
    b35c:	881b      	ldrh	r3, [r3, #0]
    b35e:	4a0b      	ldr	r2, [pc, #44]	; (b38c <_ZN8SdVolume14cacheZeroBlockEm+0x64>)
    b360:	2100      	movs	r1, #0
    b362:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i = 0; i < 512; i++) {
    b364:	230e      	movs	r3, #14
    b366:	18fb      	adds	r3, r7, r3
    b368:	881a      	ldrh	r2, [r3, #0]
    b36a:	230e      	movs	r3, #14
    b36c:	18fb      	adds	r3, r7, r3
    b36e:	3201      	adds	r2, #1
    b370:	801a      	strh	r2, [r3, #0]
    b372:	e7eb      	b.n	b34c <_ZN8SdVolume14cacheZeroBlockEm+0x24>
  }
  cacheBlockNumber_ = blockNumber;
    b374:	4b06      	ldr	r3, [pc, #24]	; (b390 <_ZN8SdVolume14cacheZeroBlockEm+0x68>)
    b376:	687a      	ldr	r2, [r7, #4]
    b378:	601a      	str	r2, [r3, #0]
  cacheSetDirty();
    b37a:	f7fe fdaf 	bl	9edc <_ZN8SdVolume13cacheSetDirtyEv>
  return true;
    b37e:	2301      	movs	r3, #1
}
    b380:	0018      	movs	r0, r3
    b382:	46bd      	mov	sp, r7
    b384:	b004      	add	sp, #16
    b386:	bd80      	pop	{r7, pc}
    b388:	000001ff 	.word	0x000001ff
    b38c:	20000968 	.word	0x20000968
    b390:	2000004c 	.word	0x2000004c

0000b394 <_ZNK8SdVolume9chainSizeEmPm>:
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    b394:	b580      	push	{r7, lr}
    b396:	b086      	sub	sp, #24
    b398:	af00      	add	r7, sp, #0
    b39a:	60f8      	str	r0, [r7, #12]
    b39c:	60b9      	str	r1, [r7, #8]
    b39e:	607a      	str	r2, [r7, #4]
  uint32_t s = 0;
    b3a0:	2300      	movs	r3, #0
    b3a2:	617b      	str	r3, [r7, #20]
  do {
    if (!fatGet(cluster, &cluster)) return false;
    b3a4:	68b9      	ldr	r1, [r7, #8]
    b3a6:	2308      	movs	r3, #8
    b3a8:	18fa      	adds	r2, r7, r3
    b3aa:	68fb      	ldr	r3, [r7, #12]
    b3ac:	0018      	movs	r0, r3
    b3ae:	f000 f827 	bl	b400 <_ZNK8SdVolume6fatGetEmPm>
    b3b2:	0003      	movs	r3, r0
    b3b4:	425a      	negs	r2, r3
    b3b6:	4153      	adcs	r3, r2
    b3b8:	b2db      	uxtb	r3, r3
    b3ba:	2b00      	cmp	r3, #0
    b3bc:	d001      	beq.n	b3c2 <_ZNK8SdVolume9chainSizeEmPm+0x2e>
    b3be:	2300      	movs	r3, #0
    b3c0:	e019      	b.n	b3f6 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    s += 512UL << clusterSizeShift_;
    b3c2:	68fb      	ldr	r3, [r7, #12]
    b3c4:	7c1b      	ldrb	r3, [r3, #16]
    b3c6:	001a      	movs	r2, r3
    b3c8:	2380      	movs	r3, #128	; 0x80
    b3ca:	009b      	lsls	r3, r3, #2
    b3cc:	4093      	lsls	r3, r2
    b3ce:	697a      	ldr	r2, [r7, #20]
    b3d0:	18d3      	adds	r3, r2, r3
    b3d2:	617b      	str	r3, [r7, #20]
  } while (!isEOC(cluster));
    b3d4:	68ba      	ldr	r2, [r7, #8]
    b3d6:	68fb      	ldr	r3, [r7, #12]
    b3d8:	0011      	movs	r1, r2
    b3da:	0018      	movs	r0, r3
    b3dc:	f7fe fd9e 	bl	9f1c <_ZNK8SdVolume5isEOCEm>
    b3e0:	0003      	movs	r3, r0
  do {
    b3e2:	425a      	negs	r2, r3
    b3e4:	4153      	adcs	r3, r2
    b3e6:	b2db      	uxtb	r3, r3
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	d000      	beq.n	b3ee <_ZNK8SdVolume9chainSizeEmPm+0x5a>
    b3ec:	e7da      	b.n	b3a4 <_ZNK8SdVolume9chainSizeEmPm+0x10>
  *size = s;
    b3ee:	687b      	ldr	r3, [r7, #4]
    b3f0:	697a      	ldr	r2, [r7, #20]
    b3f2:	601a      	str	r2, [r3, #0]
  return true;
    b3f4:	2301      	movs	r3, #1
}
    b3f6:	0018      	movs	r0, r3
    b3f8:	46bd      	mov	sp, r7
    b3fa:	b006      	add	sp, #24
    b3fc:	bd80      	pop	{r7, pc}
	...

0000b400 <_ZNK8SdVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    b400:	b580      	push	{r7, lr}
    b402:	b086      	sub	sp, #24
    b404:	af00      	add	r7, sp, #0
    b406:	60f8      	str	r0, [r7, #12]
    b408:	60b9      	str	r1, [r7, #8]
    b40a:	607a      	str	r2, [r7, #4]
  if (cluster > (clusterCount_ + 1)) return false;
    b40c:	68fb      	ldr	r3, [r7, #12]
    b40e:	68db      	ldr	r3, [r3, #12]
    b410:	1c5a      	adds	r2, r3, #1
    b412:	68bb      	ldr	r3, [r7, #8]
    b414:	429a      	cmp	r2, r3
    b416:	d201      	bcs.n	b41c <_ZNK8SdVolume6fatGetEmPm+0x1c>
    b418:	2300      	movs	r3, #0
    b41a:	e03b      	b.n	b494 <_ZNK8SdVolume6fatGetEmPm+0x94>
  uint32_t lba = fatStartBlock_;
    b41c:	68fb      	ldr	r3, [r7, #12]
    b41e:	69db      	ldr	r3, [r3, #28]
    b420:	617b      	str	r3, [r7, #20]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    b422:	68fb      	ldr	r3, [r7, #12]
    b424:	2220      	movs	r2, #32
    b426:	5c9b      	ldrb	r3, [r3, r2]
    b428:	2b10      	cmp	r3, #16
    b42a:	d102      	bne.n	b432 <_ZNK8SdVolume6fatGetEmPm+0x32>
    b42c:	68bb      	ldr	r3, [r7, #8]
    b42e:	0a1b      	lsrs	r3, r3, #8
    b430:	e001      	b.n	b436 <_ZNK8SdVolume6fatGetEmPm+0x36>
    b432:	68bb      	ldr	r3, [r7, #8]
    b434:	09db      	lsrs	r3, r3, #7
    b436:	697a      	ldr	r2, [r7, #20]
    b438:	18d3      	adds	r3, r2, r3
    b43a:	617b      	str	r3, [r7, #20]
  if (lba != cacheBlockNumber_) {
    b43c:	4b17      	ldr	r3, [pc, #92]	; (b49c <_ZNK8SdVolume6fatGetEmPm+0x9c>)
    b43e:	681b      	ldr	r3, [r3, #0]
    b440:	697a      	ldr	r2, [r7, #20]
    b442:	429a      	cmp	r2, r3
    b444:	d00c      	beq.n	b460 <_ZNK8SdVolume6fatGetEmPm+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    b446:	697b      	ldr	r3, [r7, #20]
    b448:	2100      	movs	r1, #0
    b44a:	0018      	movs	r0, r3
    b44c:	f7ff ff2e 	bl	b2ac <_ZN8SdVolume13cacheRawBlockEmh>
    b450:	0003      	movs	r3, r0
    b452:	425a      	negs	r2, r3
    b454:	4153      	adcs	r3, r2
    b456:	b2db      	uxtb	r3, r3
    b458:	2b00      	cmp	r3, #0
    b45a:	d001      	beq.n	b460 <_ZNK8SdVolume6fatGetEmPm+0x60>
    b45c:	2300      	movs	r3, #0
    b45e:	e019      	b.n	b494 <_ZNK8SdVolume6fatGetEmPm+0x94>
  }
  if (fatType_ == 16) {
    b460:	68fb      	ldr	r3, [r7, #12]
    b462:	2220      	movs	r2, #32
    b464:	5c9b      	ldrb	r3, [r3, r2]
    b466:	2b10      	cmp	r3, #16
    b468:	d109      	bne.n	b47e <_ZNK8SdVolume6fatGetEmPm+0x7e>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    b46a:	68bb      	ldr	r3, [r7, #8]
    b46c:	22ff      	movs	r2, #255	; 0xff
    b46e:	401a      	ands	r2, r3
    b470:	4b0b      	ldr	r3, [pc, #44]	; (b4a0 <_ZNK8SdVolume6fatGetEmPm+0xa0>)
    b472:	0052      	lsls	r2, r2, #1
    b474:	5ad3      	ldrh	r3, [r2, r3]
    b476:	001a      	movs	r2, r3
    b478:	687b      	ldr	r3, [r7, #4]
    b47a:	601a      	str	r2, [r3, #0]
    b47c:	e009      	b.n	b492 <_ZNK8SdVolume6fatGetEmPm+0x92>
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    b47e:	68bb      	ldr	r3, [r7, #8]
    b480:	227f      	movs	r2, #127	; 0x7f
    b482:	401a      	ands	r2, r3
    b484:	4b06      	ldr	r3, [pc, #24]	; (b4a0 <_ZNK8SdVolume6fatGetEmPm+0xa0>)
    b486:	0092      	lsls	r2, r2, #2
    b488:	58d3      	ldr	r3, [r2, r3]
    b48a:	011b      	lsls	r3, r3, #4
    b48c:	091a      	lsrs	r2, r3, #4
    b48e:	687b      	ldr	r3, [r7, #4]
    b490:	601a      	str	r2, [r3, #0]
  }
  return true;
    b492:	2301      	movs	r3, #1
}
    b494:	0018      	movs	r0, r3
    b496:	46bd      	mov	sp, r7
    b498:	b006      	add	sp, #24
    b49a:	bd80      	pop	{r7, pc}
    b49c:	2000004c 	.word	0x2000004c
    b4a0:	20000968 	.word	0x20000968

0000b4a4 <_ZN8SdVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    b4a4:	b580      	push	{r7, lr}
    b4a6:	b086      	sub	sp, #24
    b4a8:	af00      	add	r7, sp, #0
    b4aa:	60f8      	str	r0, [r7, #12]
    b4ac:	60b9      	str	r1, [r7, #8]
    b4ae:	607a      	str	r2, [r7, #4]
  // error if reserved cluster
  if (cluster < 2) return false;
    b4b0:	68bb      	ldr	r3, [r7, #8]
    b4b2:	2b01      	cmp	r3, #1
    b4b4:	d801      	bhi.n	b4ba <_ZN8SdVolume6fatPutEmm+0x16>
    b4b6:	2300      	movs	r3, #0
    b4b8:	e04b      	b.n	b552 <_ZN8SdVolume6fatPutEmm+0xae>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    b4ba:	68fb      	ldr	r3, [r7, #12]
    b4bc:	68db      	ldr	r3, [r3, #12]
    b4be:	1c5a      	adds	r2, r3, #1
    b4c0:	68bb      	ldr	r3, [r7, #8]
    b4c2:	429a      	cmp	r2, r3
    b4c4:	d201      	bcs.n	b4ca <_ZN8SdVolume6fatPutEmm+0x26>
    b4c6:	2300      	movs	r3, #0
    b4c8:	e043      	b.n	b552 <_ZN8SdVolume6fatPutEmm+0xae>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    b4ca:	68fb      	ldr	r3, [r7, #12]
    b4cc:	69db      	ldr	r3, [r3, #28]
    b4ce:	617b      	str	r3, [r7, #20]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    b4d0:	68fb      	ldr	r3, [r7, #12]
    b4d2:	2220      	movs	r2, #32
    b4d4:	5c9b      	ldrb	r3, [r3, r2]
    b4d6:	2b10      	cmp	r3, #16
    b4d8:	d102      	bne.n	b4e0 <_ZN8SdVolume6fatPutEmm+0x3c>
    b4da:	68bb      	ldr	r3, [r7, #8]
    b4dc:	0a1b      	lsrs	r3, r3, #8
    b4de:	e001      	b.n	b4e4 <_ZN8SdVolume6fatPutEmm+0x40>
    b4e0:	68bb      	ldr	r3, [r7, #8]
    b4e2:	09db      	lsrs	r3, r3, #7
    b4e4:	697a      	ldr	r2, [r7, #20]
    b4e6:	18d3      	adds	r3, r2, r3
    b4e8:	617b      	str	r3, [r7, #20]

  if (lba != cacheBlockNumber_) {
    b4ea:	4b1c      	ldr	r3, [pc, #112]	; (b55c <_ZN8SdVolume6fatPutEmm+0xb8>)
    b4ec:	681b      	ldr	r3, [r3, #0]
    b4ee:	697a      	ldr	r2, [r7, #20]
    b4f0:	429a      	cmp	r2, r3
    b4f2:	d00c      	beq.n	b50e <_ZN8SdVolume6fatPutEmm+0x6a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    b4f4:	697b      	ldr	r3, [r7, #20]
    b4f6:	2100      	movs	r1, #0
    b4f8:	0018      	movs	r0, r3
    b4fa:	f7ff fed7 	bl	b2ac <_ZN8SdVolume13cacheRawBlockEmh>
    b4fe:	0003      	movs	r3, r0
    b500:	425a      	negs	r2, r3
    b502:	4153      	adcs	r3, r2
    b504:	b2db      	uxtb	r3, r3
    b506:	2b00      	cmp	r3, #0
    b508:	d001      	beq.n	b50e <_ZN8SdVolume6fatPutEmm+0x6a>
    b50a:	2300      	movs	r3, #0
    b50c:	e021      	b.n	b552 <_ZN8SdVolume6fatPutEmm+0xae>
  }
  // store entry
  if (fatType_ == 16) {
    b50e:	68fb      	ldr	r3, [r7, #12]
    b510:	2220      	movs	r2, #32
    b512:	5c9b      	ldrb	r3, [r3, r2]
    b514:	2b10      	cmp	r3, #16
    b516:	d108      	bne.n	b52a <_ZN8SdVolume6fatPutEmm+0x86>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    b518:	68bb      	ldr	r3, [r7, #8]
    b51a:	22ff      	movs	r2, #255	; 0xff
    b51c:	401a      	ands	r2, r3
    b51e:	687b      	ldr	r3, [r7, #4]
    b520:	b299      	uxth	r1, r3
    b522:	4b0f      	ldr	r3, [pc, #60]	; (b560 <_ZN8SdVolume6fatPutEmm+0xbc>)
    b524:	0052      	lsls	r2, r2, #1
    b526:	52d1      	strh	r1, [r2, r3]
    b528:	e006      	b.n	b538 <_ZN8SdVolume6fatPutEmm+0x94>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    b52a:	68bb      	ldr	r3, [r7, #8]
    b52c:	227f      	movs	r2, #127	; 0x7f
    b52e:	401a      	ands	r2, r3
    b530:	4b0b      	ldr	r3, [pc, #44]	; (b560 <_ZN8SdVolume6fatPutEmm+0xbc>)
    b532:	0092      	lsls	r2, r2, #2
    b534:	6879      	ldr	r1, [r7, #4]
    b536:	50d1      	str	r1, [r2, r3]
  }
  cacheSetDirty();
    b538:	f7fe fcd0 	bl	9edc <_ZN8SdVolume13cacheSetDirtyEv>

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    b53c:	68fb      	ldr	r3, [r7, #12]
    b53e:	7e1b      	ldrb	r3, [r3, #24]
    b540:	2b01      	cmp	r3, #1
    b542:	dd05      	ble.n	b550 <_ZN8SdVolume6fatPutEmm+0xac>
    b544:	68fb      	ldr	r3, [r7, #12]
    b546:	689a      	ldr	r2, [r3, #8]
    b548:	697b      	ldr	r3, [r7, #20]
    b54a:	18d2      	adds	r2, r2, r3
    b54c:	4b05      	ldr	r3, [pc, #20]	; (b564 <_ZN8SdVolume6fatPutEmm+0xc0>)
    b54e:	601a      	str	r2, [r3, #0]
  return true;
    b550:	2301      	movs	r3, #1
}
    b552:	0018      	movs	r0, r3
    b554:	46bd      	mov	sp, r7
    b556:	b006      	add	sp, #24
    b558:	bd80      	pop	{r7, pc}
    b55a:	46c0      	nop			; (mov r8, r8)
    b55c:	2000004c 	.word	0x2000004c
    b560:	20000968 	.word	0x20000968
    b564:	20000b70 	.word	0x20000b70

0000b568 <_ZN8SdVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    b568:	b580      	push	{r7, lr}
    b56a:	b084      	sub	sp, #16
    b56c:	af00      	add	r7, sp, #0
    b56e:	6078      	str	r0, [r7, #4]
    b570:	6039      	str	r1, [r7, #0]
  // clear free cluster location
  allocSearchStart_ = 2;
    b572:	687b      	ldr	r3, [r7, #4]
    b574:	2202      	movs	r2, #2
    b576:	601a      	str	r2, [r3, #0]

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    b578:	230c      	movs	r3, #12
    b57a:	18fa      	adds	r2, r7, r3
    b57c:	6839      	ldr	r1, [r7, #0]
    b57e:	687b      	ldr	r3, [r7, #4]
    b580:	0018      	movs	r0, r3
    b582:	f7ff ff3d 	bl	b400 <_ZNK8SdVolume6fatGetEmPm>
    b586:	0003      	movs	r3, r0
    b588:	425a      	negs	r2, r3
    b58a:	4153      	adcs	r3, r2
    b58c:	b2db      	uxtb	r3, r3
    b58e:	2b00      	cmp	r3, #0
    b590:	d001      	beq.n	b596 <_ZN8SdVolume9freeChainEm+0x2e>
    b592:	2300      	movs	r3, #0
    b594:	e01d      	b.n	b5d2 <_ZN8SdVolume9freeChainEm+0x6a>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    b596:	6839      	ldr	r1, [r7, #0]
    b598:	687b      	ldr	r3, [r7, #4]
    b59a:	2200      	movs	r2, #0
    b59c:	0018      	movs	r0, r3
    b59e:	f7ff ff81 	bl	b4a4 <_ZN8SdVolume6fatPutEmm>
    b5a2:	0003      	movs	r3, r0
    b5a4:	425a      	negs	r2, r3
    b5a6:	4153      	adcs	r3, r2
    b5a8:	b2db      	uxtb	r3, r3
    b5aa:	2b00      	cmp	r3, #0
    b5ac:	d001      	beq.n	b5b2 <_ZN8SdVolume9freeChainEm+0x4a>
    b5ae:	2300      	movs	r3, #0
    b5b0:	e00f      	b.n	b5d2 <_ZN8SdVolume9freeChainEm+0x6a>

    cluster = next;
    b5b2:	68fb      	ldr	r3, [r7, #12]
    b5b4:	603b      	str	r3, [r7, #0]
  } while (!isEOC(cluster));
    b5b6:	683a      	ldr	r2, [r7, #0]
    b5b8:	687b      	ldr	r3, [r7, #4]
    b5ba:	0011      	movs	r1, r2
    b5bc:	0018      	movs	r0, r3
    b5be:	f7fe fcad 	bl	9f1c <_ZNK8SdVolume5isEOCEm>
    b5c2:	0003      	movs	r3, r0
  do {
    b5c4:	425a      	negs	r2, r3
    b5c6:	4153      	adcs	r3, r2
    b5c8:	b2db      	uxtb	r3, r3
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	d000      	beq.n	b5d0 <_ZN8SdVolume9freeChainEm+0x68>
    b5ce:	e7d3      	b.n	b578 <_ZN8SdVolume9freeChainEm+0x10>

  return true;
    b5d0:	2301      	movs	r3, #1
}
    b5d2:	0018      	movs	r0, r3
    b5d4:	46bd      	mov	sp, r7
    b5d6:	b004      	add	sp, #16
    b5d8:	bd80      	pop	{r7, pc}
	...

0000b5dc <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    b5dc:	b580      	push	{r7, lr}
    b5de:	b088      	sub	sp, #32
    b5e0:	af00      	add	r7, sp, #0
    b5e2:	60f8      	str	r0, [r7, #12]
    b5e4:	60b9      	str	r1, [r7, #8]
    b5e6:	1dfb      	adds	r3, r7, #7
    b5e8:	701a      	strb	r2, [r3, #0]
  uint32_t volumeStartBlock = 0;
    b5ea:	2300      	movs	r3, #0
    b5ec:	61fb      	str	r3, [r7, #28]
  sdCard_ = dev;
    b5ee:	4ba6      	ldr	r3, [pc, #664]	; (b888 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ac>)
    b5f0:	68ba      	ldr	r2, [r7, #8]
    b5f2:	601a      	str	r2, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    b5f4:	1dfb      	adds	r3, r7, #7
    b5f6:	781b      	ldrb	r3, [r3, #0]
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	d04a      	beq.n	b692 <_ZN8SdVolume4initEP7Sd2Cardh+0xb6>
    if (part > 4)return false;
    b5fc:	1dfb      	adds	r3, r7, #7
    b5fe:	781b      	ldrb	r3, [r3, #0]
    b600:	2b04      	cmp	r3, #4
    b602:	dd01      	ble.n	b608 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    b604:	2300      	movs	r3, #0
    b606:	e13b      	b.n	b880 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    b608:	69fb      	ldr	r3, [r7, #28]
    b60a:	2100      	movs	r1, #0
    b60c:	0018      	movs	r0, r3
    b60e:	f7ff fe4d 	bl	b2ac <_ZN8SdVolume13cacheRawBlockEmh>
    b612:	0003      	movs	r3, r0
    b614:	425a      	negs	r2, r3
    b616:	4153      	adcs	r3, r2
    b618:	b2db      	uxtb	r3, r3
    b61a:	2b00      	cmp	r3, #0
    b61c:	d001      	beq.n	b622 <_ZN8SdVolume4initEP7Sd2Cardh+0x46>
    b61e:	2300      	movs	r3, #0
    b620:	e12e      	b.n	b880 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    b622:	1dfb      	adds	r3, r7, #7
    b624:	781b      	ldrb	r3, [r3, #0]
    b626:	3b01      	subs	r3, #1
    b628:	011b      	lsls	r3, r3, #4
    b62a:	33b9      	adds	r3, #185	; 0xb9
    b62c:	33ff      	adds	r3, #255	; 0xff
    b62e:	001a      	movs	r2, r3
    b630:	4b96      	ldr	r3, [pc, #600]	; (b88c <_ZN8SdVolume4initEP7Sd2Cardh+0x2b0>)
    b632:	18d3      	adds	r3, r2, r3
    b634:	3306      	adds	r3, #6
    b636:	61bb      	str	r3, [r7, #24]
    if ((p->boot & 0X7F) !=0  ||
    b638:	69bb      	ldr	r3, [r7, #24]
    b63a:	781b      	ldrb	r3, [r3, #0]
    b63c:	001a      	movs	r2, r3
    b63e:	237f      	movs	r3, #127	; 0x7f
    b640:	4013      	ands	r3, r2
    b642:	d118      	bne.n	b676 <_ZN8SdVolume4initEP7Sd2Cardh+0x9a>
      p->totalSectors < 100 ||
    b644:	69bb      	ldr	r3, [r7, #24]
    b646:	7b1a      	ldrb	r2, [r3, #12]
    b648:	7b59      	ldrb	r1, [r3, #13]
    b64a:	0209      	lsls	r1, r1, #8
    b64c:	430a      	orrs	r2, r1
    b64e:	7b99      	ldrb	r1, [r3, #14]
    b650:	0409      	lsls	r1, r1, #16
    b652:	430a      	orrs	r2, r1
    b654:	7bdb      	ldrb	r3, [r3, #15]
    b656:	061b      	lsls	r3, r3, #24
    b658:	4313      	orrs	r3, r2
    if ((p->boot & 0X7F) !=0  ||
    b65a:	2b63      	cmp	r3, #99	; 0x63
    b65c:	d90b      	bls.n	b676 <_ZN8SdVolume4initEP7Sd2Cardh+0x9a>
      p->firstSector == 0) {
    b65e:	69bb      	ldr	r3, [r7, #24]
    b660:	7a1a      	ldrb	r2, [r3, #8]
    b662:	7a59      	ldrb	r1, [r3, #9]
    b664:	0209      	lsls	r1, r1, #8
    b666:	430a      	orrs	r2, r1
    b668:	7a99      	ldrb	r1, [r3, #10]
    b66a:	0409      	lsls	r1, r1, #16
    b66c:	430a      	orrs	r2, r1
    b66e:	7adb      	ldrb	r3, [r3, #11]
    b670:	061b      	lsls	r3, r3, #24
    b672:	4313      	orrs	r3, r2
      p->totalSectors < 100 ||
    b674:	d101      	bne.n	b67a <_ZN8SdVolume4initEP7Sd2Cardh+0x9e>
      // not a valid partition
      return false;
    b676:	2300      	movs	r3, #0
    b678:	e102      	b.n	b880 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    }
    volumeStartBlock = p->firstSector;
    b67a:	69bb      	ldr	r3, [r7, #24]
    b67c:	7a1a      	ldrb	r2, [r3, #8]
    b67e:	7a59      	ldrb	r1, [r3, #9]
    b680:	0209      	lsls	r1, r1, #8
    b682:	430a      	orrs	r2, r1
    b684:	7a99      	ldrb	r1, [r3, #10]
    b686:	0409      	lsls	r1, r1, #16
    b688:	430a      	orrs	r2, r1
    b68a:	7adb      	ldrb	r3, [r3, #11]
    b68c:	061b      	lsls	r3, r3, #24
    b68e:	4313      	orrs	r3, r2
    b690:	61fb      	str	r3, [r7, #28]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    b692:	69fb      	ldr	r3, [r7, #28]
    b694:	2100      	movs	r1, #0
    b696:	0018      	movs	r0, r3
    b698:	f7ff fe08 	bl	b2ac <_ZN8SdVolume13cacheRawBlockEmh>
    b69c:	0003      	movs	r3, r0
    b69e:	425a      	negs	r2, r3
    b6a0:	4153      	adcs	r3, r2
    b6a2:	b2db      	uxtb	r3, r3
    b6a4:	2b00      	cmp	r3, #0
    b6a6:	d001      	beq.n	b6ac <_ZN8SdVolume4initEP7Sd2Cardh+0xd0>
    b6a8:	2300      	movs	r3, #0
    b6aa:	e0e9      	b.n	b880 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
    b6ac:	4b78      	ldr	r3, [pc, #480]	; (b890 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b4>)
    b6ae:	617b      	str	r3, [r7, #20]
  if (bpb->bytesPerSector != 512 ||
    b6b0:	697b      	ldr	r3, [r7, #20]
    b6b2:	781a      	ldrb	r2, [r3, #0]
    b6b4:	785b      	ldrb	r3, [r3, #1]
    b6b6:	021b      	lsls	r3, r3, #8
    b6b8:	4313      	orrs	r3, r2
    b6ba:	b29a      	uxth	r2, r3
    b6bc:	2380      	movs	r3, #128	; 0x80
    b6be:	009b      	lsls	r3, r3, #2
    b6c0:	429a      	cmp	r2, r3
    b6c2:	d10f      	bne.n	b6e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->fatCount == 0 ||
    b6c4:	697b      	ldr	r3, [r7, #20]
    b6c6:	795b      	ldrb	r3, [r3, #5]
  if (bpb->bytesPerSector != 512 ||
    b6c8:	2b00      	cmp	r3, #0
    b6ca:	d00b      	beq.n	b6e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->reservedSectorCount == 0 ||
    b6cc:	697b      	ldr	r3, [r7, #20]
    b6ce:	78da      	ldrb	r2, [r3, #3]
    b6d0:	791b      	ldrb	r3, [r3, #4]
    b6d2:	021b      	lsls	r3, r3, #8
    b6d4:	4313      	orrs	r3, r2
    b6d6:	b29b      	uxth	r3, r3
    bpb->fatCount == 0 ||
    b6d8:	2b00      	cmp	r3, #0
    b6da:	d003      	beq.n	b6e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->sectorsPerCluster == 0) {
    b6dc:	697b      	ldr	r3, [r7, #20]
    b6de:	789b      	ldrb	r3, [r3, #2]
    bpb->reservedSectorCount == 0 ||
    b6e0:	2b00      	cmp	r3, #0
    b6e2:	d101      	bne.n	b6e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x10c>
       // not valid FAT volume
      return false;
    b6e4:	2300      	movs	r3, #0
    b6e6:	e0cb      	b.n	b880 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  }
  fatCount_ = bpb->fatCount;
    b6e8:	697b      	ldr	r3, [r7, #20]
    b6ea:	795a      	ldrb	r2, [r3, #5]
    b6ec:	68fb      	ldr	r3, [r7, #12]
    b6ee:	761a      	strb	r2, [r3, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;
    b6f0:	697b      	ldr	r3, [r7, #20]
    b6f2:	789a      	ldrb	r2, [r3, #2]
    b6f4:	68fb      	ldr	r3, [r7, #12]
    b6f6:	711a      	strb	r2, [r3, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    b6f8:	68fb      	ldr	r3, [r7, #12]
    b6fa:	2200      	movs	r2, #0
    b6fc:	741a      	strb	r2, [r3, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    b6fe:	68fb      	ldr	r3, [r7, #12]
    b700:	791b      	ldrb	r3, [r3, #4]
    b702:	001a      	movs	r2, r3
    b704:	68fb      	ldr	r3, [r7, #12]
    b706:	7c1b      	ldrb	r3, [r3, #16]
    b708:	0019      	movs	r1, r3
    b70a:	2301      	movs	r3, #1
    b70c:	408b      	lsls	r3, r1
    b70e:	429a      	cmp	r2, r3
    b710:	d00f      	beq.n	b732 <_ZN8SdVolume4initEP7Sd2Cardh+0x156>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    b712:	68fb      	ldr	r3, [r7, #12]
    b714:	7c1b      	ldrb	r3, [r3, #16]
    b716:	1c5a      	adds	r2, r3, #1
    b718:	b2d1      	uxtb	r1, r2
    b71a:	68fa      	ldr	r2, [r7, #12]
    b71c:	7411      	strb	r1, [r2, #16]
    b71e:	2201      	movs	r2, #1
    b720:	2b07      	cmp	r3, #7
    b722:	dc01      	bgt.n	b728 <_ZN8SdVolume4initEP7Sd2Cardh+0x14c>
    b724:	2300      	movs	r3, #0
    b726:	1c1a      	adds	r2, r3, #0
    b728:	b2d3      	uxtb	r3, r2
    b72a:	2b00      	cmp	r3, #0
    b72c:	d0e7      	beq.n	b6fe <_ZN8SdVolume4initEP7Sd2Cardh+0x122>
    b72e:	2300      	movs	r3, #0
    b730:	e0a6      	b.n	b880 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    b732:	697b      	ldr	r3, [r7, #20]
    b734:	7ada      	ldrb	r2, [r3, #11]
    b736:	7b1b      	ldrb	r3, [r3, #12]
    b738:	021b      	lsls	r3, r3, #8
    b73a:	4313      	orrs	r3, r2
    b73c:	b29b      	uxth	r3, r3
    b73e:	2b00      	cmp	r3, #0
    b740:	d007      	beq.n	b752 <_ZN8SdVolume4initEP7Sd2Cardh+0x176>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    b742:	697b      	ldr	r3, [r7, #20]
    b744:	7ada      	ldrb	r2, [r3, #11]
    b746:	7b1b      	ldrb	r3, [r3, #12]
    b748:	021b      	lsls	r3, r3, #8
    b74a:	4313      	orrs	r3, r2
    b74c:	b29b      	uxth	r3, r3
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    b74e:	001a      	movs	r2, r3
    b750:	e00b      	b.n	b76a <_ZN8SdVolume4initEP7Sd2Cardh+0x18e>
    b752:	697b      	ldr	r3, [r7, #20]
    b754:	7e5a      	ldrb	r2, [r3, #25]
    b756:	7e99      	ldrb	r1, [r3, #26]
    b758:	0209      	lsls	r1, r1, #8
    b75a:	430a      	orrs	r2, r1
    b75c:	7ed9      	ldrb	r1, [r3, #27]
    b75e:	0409      	lsls	r1, r1, #16
    b760:	430a      	orrs	r2, r1
    b762:	7f1b      	ldrb	r3, [r3, #28]
    b764:	061b      	lsls	r3, r3, #24
    b766:	4313      	orrs	r3, r2
    b768:	001a      	movs	r2, r3
    b76a:	68fb      	ldr	r3, [r7, #12]
    b76c:	609a      	str	r2, [r3, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    b76e:	697b      	ldr	r3, [r7, #20]
    b770:	78da      	ldrb	r2, [r3, #3]
    b772:	791b      	ldrb	r3, [r3, #4]
    b774:	021b      	lsls	r3, r3, #8
    b776:	4313      	orrs	r3, r2
    b778:	b29b      	uxth	r3, r3
    b77a:	001a      	movs	r2, r3
    b77c:	69fb      	ldr	r3, [r7, #28]
    b77e:	18d2      	adds	r2, r2, r3
    b780:	68fb      	ldr	r3, [r7, #12]
    b782:	61da      	str	r2, [r3, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    b784:	697b      	ldr	r3, [r7, #20]
    b786:	799a      	ldrb	r2, [r3, #6]
    b788:	79db      	ldrb	r3, [r3, #7]
    b78a:	021b      	lsls	r3, r3, #8
    b78c:	4313      	orrs	r3, r2
    b78e:	b29a      	uxth	r2, r3
    b790:	68fb      	ldr	r3, [r7, #12]
    b792:	845a      	strh	r2, [r3, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    b794:	68fb      	ldr	r3, [r7, #12]
    b796:	69da      	ldr	r2, [r3, #28]
    b798:	697b      	ldr	r3, [r7, #20]
    b79a:	795b      	ldrb	r3, [r3, #5]
    b79c:	0019      	movs	r1, r3
    b79e:	68fb      	ldr	r3, [r7, #12]
    b7a0:	689b      	ldr	r3, [r3, #8]
    b7a2:	434b      	muls	r3, r1
    b7a4:	18d2      	adds	r2, r2, r3
    b7a6:	68fb      	ldr	r3, [r7, #12]
    b7a8:	625a      	str	r2, [r3, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    b7aa:	68fb      	ldr	r3, [r7, #12]
    b7ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b7ae:	697b      	ldr	r3, [r7, #20]
    b7b0:	7999      	ldrb	r1, [r3, #6]
    b7b2:	79db      	ldrb	r3, [r3, #7]
    b7b4:	021b      	lsls	r3, r3, #8
    b7b6:	430b      	orrs	r3, r1
    b7b8:	b29b      	uxth	r3, r3
    b7ba:	015b      	lsls	r3, r3, #5
    b7bc:	4935      	ldr	r1, [pc, #212]	; (b894 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b8>)
    b7be:	468c      	mov	ip, r1
    b7c0:	4463      	add	r3, ip
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	da02      	bge.n	b7cc <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    b7c6:	4933      	ldr	r1, [pc, #204]	; (b894 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b8>)
    b7c8:	468c      	mov	ip, r1
    b7ca:	4463      	add	r3, ip
    b7cc:	125b      	asrs	r3, r3, #9
    b7ce:	18d2      	adds	r2, r2, r3
    b7d0:	68fb      	ldr	r3, [r7, #12]
    b7d2:	615a      	str	r2, [r3, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    b7d4:	697b      	ldr	r3, [r7, #20]
    b7d6:	7a1a      	ldrb	r2, [r3, #8]
    b7d8:	7a5b      	ldrb	r3, [r3, #9]
    b7da:	021b      	lsls	r3, r3, #8
    b7dc:	4313      	orrs	r3, r2
    b7de:	b29b      	uxth	r3, r3
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d006      	beq.n	b7f2 <_ZN8SdVolume4initEP7Sd2Cardh+0x216>
                           bpb->totalSectors16 : bpb->totalSectors32;
    b7e4:	697b      	ldr	r3, [r7, #20]
    b7e6:	7a1a      	ldrb	r2, [r3, #8]
    b7e8:	7a5b      	ldrb	r3, [r3, #9]
    b7ea:	021b      	lsls	r3, r3, #8
    b7ec:	4313      	orrs	r3, r2
    b7ee:	b29b      	uxth	r3, r3
    b7f0:	e00a      	b.n	b808 <_ZN8SdVolume4initEP7Sd2Cardh+0x22c>
  uint32_t totalBlocks = bpb->totalSectors16 ?
    b7f2:	697b      	ldr	r3, [r7, #20]
    b7f4:	7d5a      	ldrb	r2, [r3, #21]
    b7f6:	7d99      	ldrb	r1, [r3, #22]
    b7f8:	0209      	lsls	r1, r1, #8
    b7fa:	430a      	orrs	r2, r1
    b7fc:	7dd9      	ldrb	r1, [r3, #23]
    b7fe:	0409      	lsls	r1, r1, #16
    b800:	430a      	orrs	r2, r1
    b802:	7e1b      	ldrb	r3, [r3, #24]
    b804:	061b      	lsls	r3, r3, #24
    b806:	4313      	orrs	r3, r2
                           bpb->totalSectors16 : bpb->totalSectors32;
    b808:	613b      	str	r3, [r7, #16]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    b80a:	68fb      	ldr	r3, [r7, #12]
    b80c:	695b      	ldr	r3, [r3, #20]
    b80e:	69fa      	ldr	r2, [r7, #28]
    b810:	1ad2      	subs	r2, r2, r3
    b812:	693b      	ldr	r3, [r7, #16]
    b814:	18d2      	adds	r2, r2, r3
    b816:	68fb      	ldr	r3, [r7, #12]
    b818:	60da      	str	r2, [r3, #12]

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    b81a:	68fb      	ldr	r3, [r7, #12]
    b81c:	68db      	ldr	r3, [r3, #12]
    b81e:	68fa      	ldr	r2, [r7, #12]
    b820:	7c12      	ldrb	r2, [r2, #16]
    b822:	40d3      	lsrs	r3, r2
    b824:	001a      	movs	r2, r3
    b826:	68fb      	ldr	r3, [r7, #12]
    b828:	60da      	str	r2, [r3, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    b82a:	68fb      	ldr	r3, [r7, #12]
    b82c:	68db      	ldr	r3, [r3, #12]
    b82e:	4a1a      	ldr	r2, [pc, #104]	; (b898 <_ZN8SdVolume4initEP7Sd2Cardh+0x2bc>)
    b830:	4293      	cmp	r3, r2
    b832:	d804      	bhi.n	b83e <_ZN8SdVolume4initEP7Sd2Cardh+0x262>
    fatType_ = 12;
    b834:	68fb      	ldr	r3, [r7, #12]
    b836:	2220      	movs	r2, #32
    b838:	210c      	movs	r1, #12
    b83a:	5499      	strb	r1, [r3, r2]
    b83c:	e01f      	b.n	b87e <_ZN8SdVolume4initEP7Sd2Cardh+0x2a2>
  } else if (clusterCount_ < 65525) {
    b83e:	68fb      	ldr	r3, [r7, #12]
    b840:	68db      	ldr	r3, [r3, #12]
    b842:	4a16      	ldr	r2, [pc, #88]	; (b89c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c0>)
    b844:	4293      	cmp	r3, r2
    b846:	d804      	bhi.n	b852 <_ZN8SdVolume4initEP7Sd2Cardh+0x276>
    fatType_ = 16;
    b848:	68fb      	ldr	r3, [r7, #12]
    b84a:	2220      	movs	r2, #32
    b84c:	2110      	movs	r1, #16
    b84e:	5499      	strb	r1, [r3, r2]
    b850:	e015      	b.n	b87e <_ZN8SdVolume4initEP7Sd2Cardh+0x2a2>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    b852:	697b      	ldr	r3, [r7, #20]
    b854:	2221      	movs	r2, #33	; 0x21
    b856:	5c9a      	ldrb	r2, [r3, r2]
    b858:	2122      	movs	r1, #34	; 0x22
    b85a:	5c59      	ldrb	r1, [r3, r1]
    b85c:	0209      	lsls	r1, r1, #8
    b85e:	430a      	orrs	r2, r1
    b860:	2123      	movs	r1, #35	; 0x23
    b862:	5c59      	ldrb	r1, [r3, r1]
    b864:	0409      	lsls	r1, r1, #16
    b866:	430a      	orrs	r2, r1
    b868:	2124      	movs	r1, #36	; 0x24
    b86a:	5c5b      	ldrb	r3, [r3, r1]
    b86c:	061b      	lsls	r3, r3, #24
    b86e:	4313      	orrs	r3, r2
    b870:	001a      	movs	r2, r3
    b872:	68fb      	ldr	r3, [r7, #12]
    b874:	625a      	str	r2, [r3, #36]	; 0x24
    fatType_ = 32;
    b876:	68fb      	ldr	r3, [r7, #12]
    b878:	2220      	movs	r2, #32
    b87a:	2120      	movs	r1, #32
    b87c:	5499      	strb	r1, [r3, r2]
  }
  return true;
    b87e:	2301      	movs	r3, #1
}
    b880:	0018      	movs	r0, r3
    b882:	46bd      	mov	sp, r7
    b884:	b008      	add	sp, #32
    b886:	bd80      	pop	{r7, pc}
    b888:	20000b68 	.word	0x20000b68
    b88c:	20000968 	.word	0x20000968
    b890:	20000973 	.word	0x20000973
    b894:	000001ff 	.word	0x000001ff
    b898:	00000ff4 	.word	0x00000ff4
    b89c:	0000fff4 	.word	0x0000fff4

0000b8a0 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
#define SPI_IMODE_EXTINT 1
#define SPI_IMODE_GLOBAL 2

const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();

SPIClass::SPIClass(SERCOM *p_sercom, uint8_t uc_pinMISO, uint8_t uc_pinSCK, uint8_t uc_pinMOSI, SercomSpiTXPad PadTx, SercomRXPad PadRx)
    b8a0:	b580      	push	{r7, lr}
    b8a2:	b084      	sub	sp, #16
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	60f8      	str	r0, [r7, #12]
    b8a8:	60b9      	str	r1, [r7, #8]
    b8aa:	0019      	movs	r1, r3
    b8ac:	1dfb      	adds	r3, r7, #7
    b8ae:	701a      	strb	r2, [r3, #0]
    b8b0:	1dbb      	adds	r3, r7, #6
    b8b2:	1c0a      	adds	r2, r1, #0
    b8b4:	701a      	strb	r2, [r3, #0]
{
  initialized = false;
    b8b6:	68fb      	ldr	r3, [r7, #12]
    b8b8:	2200      	movs	r2, #0
    b8ba:	725a      	strb	r2, [r3, #9]
  assert(p_sercom != NULL);
    b8bc:	68bb      	ldr	r3, [r7, #8]
    b8be:	2b00      	cmp	r3, #0
    b8c0:	d105      	bne.n	b8ce <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2e>
    b8c2:	4b12      	ldr	r3, [pc, #72]	; (b90c <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x6c>)
    b8c4:	4a12      	ldr	r2, [pc, #72]	; (b910 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x70>)
    b8c6:	4813      	ldr	r0, [pc, #76]	; (b914 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x74>)
    b8c8:	2122      	movs	r1, #34	; 0x22
    b8ca:	f005 f81f 	bl	1090c <__assert_func>
  _p_sercom = p_sercom;
    b8ce:	68fb      	ldr	r3, [r7, #12]
    b8d0:	68ba      	ldr	r2, [r7, #8]
    b8d2:	601a      	str	r2, [r3, #0]

  // pins
  _uc_pinMiso = uc_pinMISO;
    b8d4:	68fb      	ldr	r3, [r7, #12]
    b8d6:	1dfa      	adds	r2, r7, #7
    b8d8:	7812      	ldrb	r2, [r2, #0]
    b8da:	711a      	strb	r2, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    b8dc:	68fb      	ldr	r3, [r7, #12]
    b8de:	1dba      	adds	r2, r7, #6
    b8e0:	7812      	ldrb	r2, [r2, #0]
    b8e2:	719a      	strb	r2, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    b8e4:	68fb      	ldr	r3, [r7, #12]
    b8e6:	2218      	movs	r2, #24
    b8e8:	18ba      	adds	r2, r7, r2
    b8ea:	7812      	ldrb	r2, [r2, #0]
    b8ec:	715a      	strb	r2, [r3, #5]

  // SERCOM pads
  _padTx=PadTx;
    b8ee:	68fb      	ldr	r3, [r7, #12]
    b8f0:	221c      	movs	r2, #28
    b8f2:	18ba      	adds	r2, r7, r2
    b8f4:	7812      	ldrb	r2, [r2, #0]
    b8f6:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    b8f8:	68fb      	ldr	r3, [r7, #12]
    b8fa:	2220      	movs	r2, #32
    b8fc:	18ba      	adds	r2, r7, r2
    b8fe:	7812      	ldrb	r2, [r2, #0]
    b900:	721a      	strb	r2, [r3, #8]
}
    b902:	68fb      	ldr	r3, [r7, #12]
    b904:	0018      	movs	r0, r3
    b906:	46bd      	mov	sp, r7
    b908:	b004      	add	sp, #16
    b90a:	bd80      	pop	{r7, pc}
    b90c:	00013820 	.word	0x00013820
    b910:	00013854 	.word	0x00013854
    b914:	00013834 	.word	0x00013834

0000b918 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    b918:	b580      	push	{r7, lr}
    b91a:	b082      	sub	sp, #8
    b91c:	af00      	add	r7, sp, #0
    b91e:	6078      	str	r0, [r7, #4]
  init();
    b920:	687b      	ldr	r3, [r7, #4]
    b922:	0018      	movs	r0, r3
    b924:	f000 f844 	bl	b9b0 <_ZN8SPIClass4initEv>

  // PIO init
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    b928:	687b      	ldr	r3, [r7, #4]
    b92a:	791b      	ldrb	r3, [r3, #4]
    b92c:	0018      	movs	r0, r3
    b92e:	687b      	ldr	r3, [r7, #4]
    b930:	791b      	ldrb	r3, [r3, #4]
    b932:	0019      	movs	r1, r3
    b934:	4a1c      	ldr	r2, [pc, #112]	; (b9a8 <_ZN8SPIClass5beginEv+0x90>)
    b936:	000b      	movs	r3, r1
    b938:	005b      	lsls	r3, r3, #1
    b93a:	185b      	adds	r3, r3, r1
    b93c:	00db      	lsls	r3, r3, #3
    b93e:	18d3      	adds	r3, r2, r3
    b940:	3308      	adds	r3, #8
    b942:	781b      	ldrb	r3, [r3, #0]
    b944:	b25b      	sxtb	r3, r3
    b946:	0019      	movs	r1, r3
    b948:	f7fb fa2a 	bl	6da0 <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
    b94c:	687b      	ldr	r3, [r7, #4]
    b94e:	799b      	ldrb	r3, [r3, #6]
    b950:	0018      	movs	r0, r3
    b952:	687b      	ldr	r3, [r7, #4]
    b954:	799b      	ldrb	r3, [r3, #6]
    b956:	0019      	movs	r1, r3
    b958:	4a13      	ldr	r2, [pc, #76]	; (b9a8 <_ZN8SPIClass5beginEv+0x90>)
    b95a:	000b      	movs	r3, r1
    b95c:	005b      	lsls	r3, r3, #1
    b95e:	185b      	adds	r3, r3, r1
    b960:	00db      	lsls	r3, r3, #3
    b962:	18d3      	adds	r3, r2, r3
    b964:	3308      	adds	r3, #8
    b966:	781b      	ldrb	r3, [r3, #0]
    b968:	b25b      	sxtb	r3, r3
    b96a:	0019      	movs	r1, r3
    b96c:	f7fb fa18 	bl	6da0 <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
    b970:	687b      	ldr	r3, [r7, #4]
    b972:	795b      	ldrb	r3, [r3, #5]
    b974:	0018      	movs	r0, r3
    b976:	687b      	ldr	r3, [r7, #4]
    b978:	795b      	ldrb	r3, [r3, #5]
    b97a:	0019      	movs	r1, r3
    b97c:	4a0a      	ldr	r2, [pc, #40]	; (b9a8 <_ZN8SPIClass5beginEv+0x90>)
    b97e:	000b      	movs	r3, r1
    b980:	005b      	lsls	r3, r3, #1
    b982:	185b      	adds	r3, r3, r1
    b984:	00db      	lsls	r3, r3, #3
    b986:	18d3      	adds	r3, r2, r3
    b988:	3308      	adds	r3, #8
    b98a:	781b      	ldrb	r3, [r3, #0]
    b98c:	b25b      	sxtb	r3, r3
    b98e:	0019      	movs	r1, r3
    b990:	f7fb fa06 	bl	6da0 <pinPeripheral>

  config(DEFAULT_SPI_SETTINGS);
    b994:	4b05      	ldr	r3, [pc, #20]	; (b9ac <_ZN8SPIClass5beginEv+0x94>)
    b996:	6878      	ldr	r0, [r7, #4]
    b998:	6819      	ldr	r1, [r3, #0]
    b99a:	685a      	ldr	r2, [r3, #4]
    b99c:	f000 f821 	bl	b9e2 <_ZN8SPIClass6configE11SPISettings>
}
    b9a0:	46c0      	nop			; (mov r8, r8)
    b9a2:	46bd      	mov	sp, r7
    b9a4:	b002      	add	sp, #8
    b9a6:	bd80      	pop	{r7, pc}
    b9a8:	000138cc 	.word	0x000138cc
    b9ac:	20000b74 	.word	0x20000b74

0000b9b0 <_ZN8SPIClass4initEv>:

void SPIClass::init()
{
    b9b0:	b580      	push	{r7, lr}
    b9b2:	b082      	sub	sp, #8
    b9b4:	af00      	add	r7, sp, #0
    b9b6:	6078      	str	r0, [r7, #4]
  if (initialized)
    b9b8:	687b      	ldr	r3, [r7, #4]
    b9ba:	7a5b      	ldrb	r3, [r3, #9]
    b9bc:	2b00      	cmp	r3, #0
    b9be:	d10c      	bne.n	b9da <_ZN8SPIClass4initEv+0x2a>
    return;
  interruptMode = SPI_IMODE_NONE;
    b9c0:	687b      	ldr	r3, [r7, #4]
    b9c2:	2200      	movs	r2, #0
    b9c4:	729a      	strb	r2, [r3, #10]
  interruptSave = 0;
    b9c6:	687b      	ldr	r3, [r7, #4]
    b9c8:	2200      	movs	r2, #0
    b9ca:	72da      	strb	r2, [r3, #11]
  interruptMask = 0;
    b9cc:	687b      	ldr	r3, [r7, #4]
    b9ce:	2200      	movs	r2, #0
    b9d0:	60da      	str	r2, [r3, #12]
  initialized = true;
    b9d2:	687b      	ldr	r3, [r7, #4]
    b9d4:	2201      	movs	r2, #1
    b9d6:	725a      	strb	r2, [r3, #9]
    b9d8:	e000      	b.n	b9dc <_ZN8SPIClass4initEv+0x2c>
    return;
    b9da:	46c0      	nop			; (mov r8, r8)
}
    b9dc:	46bd      	mov	sp, r7
    b9de:	b002      	add	sp, #8
    b9e0:	bd80      	pop	{r7, pc}

0000b9e2 <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    b9e2:	b580      	push	{r7, lr}
    b9e4:	b086      	sub	sp, #24
    b9e6:	af02      	add	r7, sp, #8
    b9e8:	60f8      	str	r0, [r7, #12]
    b9ea:	1d3b      	adds	r3, r7, #4
    b9ec:	6019      	str	r1, [r3, #0]
    b9ee:	605a      	str	r2, [r3, #4]
  _p_sercom->disableSPI();
    b9f0:	68fb      	ldr	r3, [r7, #12]
    b9f2:	681b      	ldr	r3, [r3, #0]
    b9f4:	0018      	movs	r0, r3
    b9f6:	f002 fa9e 	bl	df36 <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    b9fa:	68fb      	ldr	r3, [r7, #12]
    b9fc:	6818      	ldr	r0, [r3, #0]
    b9fe:	68fb      	ldr	r3, [r7, #12]
    ba00:	79d9      	ldrb	r1, [r3, #7]
    ba02:	68fb      	ldr	r3, [r7, #12]
    ba04:	7a1a      	ldrb	r2, [r3, #8]
    ba06:	1d3b      	adds	r3, r7, #4
    ba08:	795b      	ldrb	r3, [r3, #5]
    ba0a:	9300      	str	r3, [sp, #0]
    ba0c:	2300      	movs	r3, #0
    ba0e:	f002 f9df 	bl	ddd0 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    ba12:	68fb      	ldr	r3, [r7, #12]
    ba14:	6818      	ldr	r0, [r3, #0]
    ba16:	1d3b      	adds	r3, r7, #4
    ba18:	7919      	ldrb	r1, [r3, #4]
    ba1a:	1d3b      	adds	r3, r7, #4
    ba1c:	681b      	ldr	r3, [r3, #0]
    ba1e:	001a      	movs	r2, r3
    ba20:	f002 fa15 	bl	de4e <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    ba24:	68fb      	ldr	r3, [r7, #12]
    ba26:	681b      	ldr	r3, [r3, #0]
    ba28:	0018      	movs	r0, r3
    ba2a:	f002 fa6d 	bl	df08 <_ZN6SERCOM9enableSPIEv>
}
    ba2e:	46c0      	nop			; (mov r8, r8)
    ba30:	46bd      	mov	sp, r7
    ba32:	b004      	add	sp, #16
    ba34:	bd80      	pop	{r7, pc}
	...

0000ba38 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    ba38:	b580      	push	{r7, lr}
    ba3a:	b086      	sub	sp, #24
    ba3c:	af00      	add	r7, sp, #0
    ba3e:	60f8      	str	r0, [r7, #12]
    ba40:	1d3b      	adds	r3, r7, #4
    ba42:	6019      	str	r1, [r3, #0]
    ba44:	605a      	str	r2, [r3, #4]
  if (interruptMode != SPI_IMODE_NONE)
    ba46:	68fb      	ldr	r3, [r7, #12]
    ba48:	7a9b      	ldrb	r3, [r3, #10]
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	d01d      	beq.n	ba8a <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    ba4e:	68fb      	ldr	r3, [r7, #12]
    ba50:	7a9b      	ldrb	r3, [r3, #10]
    ba52:	001a      	movs	r2, r3
    ba54:	2302      	movs	r3, #2
    ba56:	4013      	ands	r3, r2
    ba58:	d00b      	beq.n	ba72 <_ZN8SPIClass16beginTransactionE11SPISettings+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ba5a:	f3ef 8310 	mrs	r3, PRIMASK
    ba5e:	617b      	str	r3, [r7, #20]
  return(result);
    ba60:	697b      	ldr	r3, [r7, #20]
  return (__get_PRIMASK() ? 0 : 1);
    ba62:	425a      	negs	r2, r3
    ba64:	4153      	adcs	r3, r2
    ba66:	b2db      	uxtb	r3, r3
    ba68:	001a      	movs	r2, r3
    {
      interruptSave = interruptsStatus();
    ba6a:	68fb      	ldr	r3, [r7, #12]
    ba6c:	72da      	strb	r2, [r3, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    ba6e:	b672      	cpsid	i
    ba70:	e00b      	b.n	ba8a <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
      noInterrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
    ba72:	68fb      	ldr	r3, [r7, #12]
    ba74:	7a9b      	ldrb	r3, [r3, #10]
    ba76:	001a      	movs	r2, r3
    ba78:	2301      	movs	r3, #1
    ba7a:	4013      	ands	r3, r2
    ba7c:	d005      	beq.n	ba8a <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    ba7e:	4a08      	ldr	r2, [pc, #32]	; (baa0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x68>)
    ba80:	68fb      	ldr	r3, [r7, #12]
    ba82:	68db      	ldr	r3, [r3, #12]
    ba84:	041b      	lsls	r3, r3, #16
    ba86:	0c1b      	lsrs	r3, r3, #16
    ba88:	6093      	str	r3, [r2, #8]
  }

  config(settings);
    ba8a:	1d3b      	adds	r3, r7, #4
    ba8c:	68f8      	ldr	r0, [r7, #12]
    ba8e:	6819      	ldr	r1, [r3, #0]
    ba90:	685a      	ldr	r2, [r3, #4]
    ba92:	f7ff ffa6 	bl	b9e2 <_ZN8SPIClass6configE11SPISettings>
}
    ba96:	46c0      	nop			; (mov r8, r8)
    ba98:	46bd      	mov	sp, r7
    ba9a:	b006      	add	sp, #24
    ba9c:	bd80      	pop	{r7, pc}
    ba9e:	46c0      	nop			; (mov r8, r8)
    baa0:	40001800 	.word	0x40001800

0000baa4 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
    baa4:	b580      	push	{r7, lr}
    baa6:	b082      	sub	sp, #8
    baa8:	af00      	add	r7, sp, #0
    baaa:	6078      	str	r0, [r7, #4]
  if (interruptMode != SPI_IMODE_NONE)
    baac:	687b      	ldr	r3, [r7, #4]
    baae:	7a9b      	ldrb	r3, [r3, #10]
    bab0:	2b00      	cmp	r3, #0
    bab2:	d017      	beq.n	bae4 <_ZN8SPIClass14endTransactionEv+0x40>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    bab4:	687b      	ldr	r3, [r7, #4]
    bab6:	7a9b      	ldrb	r3, [r3, #10]
    bab8:	001a      	movs	r2, r3
    baba:	2302      	movs	r3, #2
    babc:	4013      	ands	r3, r2
    babe:	d005      	beq.n	bacc <_ZN8SPIClass14endTransactionEv+0x28>
    {
      if (interruptSave)
    bac0:	687b      	ldr	r3, [r7, #4]
    bac2:	7adb      	ldrb	r3, [r3, #11]
    bac4:	2b00      	cmp	r3, #0
    bac6:	d00d      	beq.n	bae4 <_ZN8SPIClass14endTransactionEv+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
    bac8:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    baca:	e00b      	b.n	bae4 <_ZN8SPIClass14endTransactionEv+0x40>
    else if (interruptMode & SPI_IMODE_EXTINT)
    bacc:	687b      	ldr	r3, [r7, #4]
    bace:	7a9b      	ldrb	r3, [r3, #10]
    bad0:	001a      	movs	r2, r3
    bad2:	2301      	movs	r3, #1
    bad4:	4013      	ands	r3, r2
    bad6:	d005      	beq.n	bae4 <_ZN8SPIClass14endTransactionEv+0x40>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    bad8:	4a04      	ldr	r2, [pc, #16]	; (baec <_ZN8SPIClass14endTransactionEv+0x48>)
    bada:	687b      	ldr	r3, [r7, #4]
    badc:	68db      	ldr	r3, [r3, #12]
    bade:	041b      	lsls	r3, r3, #16
    bae0:	0c1b      	lsrs	r3, r3, #16
    bae2:	60d3      	str	r3, [r2, #12]
}
    bae4:	46c0      	nop			; (mov r8, r8)
    bae6:	46bd      	mov	sp, r7
    bae8:	b002      	add	sp, #8
    baea:	bd80      	pop	{r7, pc}
    baec:	40001800 	.word	0x40001800

0000baf0 <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    baf0:	b580      	push	{r7, lr}
    baf2:	b082      	sub	sp, #8
    baf4:	af00      	add	r7, sp, #0
    baf6:	6078      	str	r0, [r7, #4]
    baf8:	000a      	movs	r2, r1
    bafa:	1cfb      	adds	r3, r7, #3
    bafc:	701a      	strb	r2, [r3, #0]
  return _p_sercom->transferDataSPI(data);
    bafe:	687b      	ldr	r3, [r7, #4]
    bb00:	681a      	ldr	r2, [r3, #0]
    bb02:	1cfb      	adds	r3, r7, #3
    bb04:	781b      	ldrb	r3, [r3, #0]
    bb06:	0019      	movs	r1, r3
    bb08:	0010      	movs	r0, r2
    bb0a:	f002 fa2b 	bl	df64 <_ZN6SERCOM15transferDataSPIEh>
    bb0e:	0003      	movs	r3, r0
}
    bb10:	0018      	movs	r0, r3
    bb12:	46bd      	mov	sp, r7
    bb14:	b002      	add	sp, #8
    bb16:	bd80      	pop	{r7, pc}

0000bb18 <_Z41__static_initialization_and_destruction_0ii>:
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    bb18:	b580      	push	{r7, lr}
    bb1a:	b086      	sub	sp, #24
    bb1c:	af04      	add	r7, sp, #16
    bb1e:	6078      	str	r0, [r7, #4]
    bb20:	6039      	str	r1, [r7, #0]
    bb22:	687b      	ldr	r3, [r7, #4]
    bb24:	2b01      	cmp	r3, #1
    bb26:	d113      	bne.n	bb50 <_Z41__static_initialization_and_destruction_0ii+0x38>
    bb28:	683b      	ldr	r3, [r7, #0]
    bb2a:	4a0b      	ldr	r2, [pc, #44]	; (bb58 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    bb2c:	4293      	cmp	r3, r2
    bb2e:	d10f      	bne.n	bb50 <_Z41__static_initialization_and_destruction_0ii+0x38>
const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();
    bb30:	4b0a      	ldr	r3, [pc, #40]	; (bb5c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    bb32:	0018      	movs	r0, r3
    bb34:	f7fd fbf4 	bl	9320 <_ZN11SPISettingsC1Ev>
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    bb38:	4909      	ldr	r1, [pc, #36]	; (bb60 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    bb3a:	480a      	ldr	r0, [pc, #40]	; (bb64 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    bb3c:	2300      	movs	r3, #0
    bb3e:	9302      	str	r3, [sp, #8]
    bb40:	2301      	movs	r3, #1
    bb42:	9301      	str	r3, [sp, #4]
    bb44:	2315      	movs	r3, #21
    bb46:	9300      	str	r3, [sp, #0]
    bb48:	2314      	movs	r3, #20
    bb4a:	2212      	movs	r2, #18
    bb4c:	f7ff fea8 	bl	b8a0 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>
    bb50:	46c0      	nop			; (mov r8, r8)
    bb52:	46bd      	mov	sp, r7
    bb54:	b002      	add	sp, #8
    bb56:	bd80      	pop	{r7, pc}
    bb58:	0000ffff 	.word	0x0000ffff
    bb5c:	20000b74 	.word	0x20000b74
    bb60:	20000dd0 	.word	0x20000dd0
    bb64:	20000b7c 	.word	0x20000b7c

0000bb68 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
    bb68:	b580      	push	{r7, lr}
    bb6a:	af00      	add	r7, sp, #0
    bb6c:	4b03      	ldr	r3, [pc, #12]	; (bb7c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x14>)
    bb6e:	0019      	movs	r1, r3
    bb70:	2001      	movs	r0, #1
    bb72:	f7ff ffd1 	bl	bb18 <_Z41__static_initialization_and_destruction_0ii>
    bb76:	46bd      	mov	sp, r7
    bb78:	bd80      	pop	{r7, pc}
    bb7a:	46c0      	nop			; (mov r8, r8)
    bb7c:	0000ffff 	.word	0x0000ffff

0000bb80 <_ZN7TwoWireC1EP6SERCOMhh>:
#include <Arduino.h>
#include <wiring_private.h>

#include "Wire.h"

TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
    bb80:	b580      	push	{r7, lr}
    bb82:	b084      	sub	sp, #16
    bb84:	af00      	add	r7, sp, #0
    bb86:	60f8      	str	r0, [r7, #12]
    bb88:	60b9      	str	r1, [r7, #8]
    bb8a:	0019      	movs	r1, r3
    bb8c:	1dfb      	adds	r3, r7, #7
    bb8e:	701a      	strb	r2, [r3, #0]
    bb90:	1dbb      	adds	r3, r7, #6
    bb92:	1c0a      	adds	r2, r1, #0
    bb94:	701a      	strb	r2, [r3, #0]
    bb96:	68fb      	ldr	r3, [r7, #12]
    bb98:	0018      	movs	r0, r3
    bb9a:	f7f7 fe33 	bl	3804 <_ZN6StreamC1Ev>
    bb9e:	4a10      	ldr	r2, [pc, #64]	; (bbe0 <_ZN7TwoWireC1EP6SERCOMhh+0x60>)
    bba0:	68fb      	ldr	r3, [r7, #12]
    bba2:	601a      	str	r2, [r3, #0]
    bba4:	68fb      	ldr	r3, [r7, #12]
    bba6:	3318      	adds	r3, #24
    bba8:	0018      	movs	r0, r3
    bbaa:	f000 fad1 	bl	c150 <_ZN11RingBufferNILi256EEC1Ev>
    bbae:	68fb      	ldr	r3, [r7, #12]
    bbb0:	3321      	adds	r3, #33	; 0x21
    bbb2:	33ff      	adds	r3, #255	; 0xff
    bbb4:	0018      	movs	r0, r3
    bbb6:	f000 facb 	bl	c150 <_ZN11RingBufferNILi256EEC1Ev>
{
  this->sercom = s;
    bbba:	68fb      	ldr	r3, [r7, #12]
    bbbc:	68ba      	ldr	r2, [r7, #8]
    bbbe:	611a      	str	r2, [r3, #16]
  this->_uc_pinSDA=pinSDA;
    bbc0:	68fb      	ldr	r3, [r7, #12]
    bbc2:	1dfa      	adds	r2, r7, #7
    bbc4:	7812      	ldrb	r2, [r2, #0]
    bbc6:	751a      	strb	r2, [r3, #20]
  this->_uc_pinSCL=pinSCL;
    bbc8:	68fb      	ldr	r3, [r7, #12]
    bbca:	1dba      	adds	r2, r7, #6
    bbcc:	7812      	ldrb	r2, [r2, #0]
    bbce:	755a      	strb	r2, [r3, #21]
  transmissionBegun = false;
    bbd0:	68fb      	ldr	r3, [r7, #12]
    bbd2:	2200      	movs	r2, #0
    bbd4:	759a      	strb	r2, [r3, #22]
}
    bbd6:	68fb      	ldr	r3, [r7, #12]
    bbd8:	0018      	movs	r0, r3
    bbda:	46bd      	mov	sp, r7
    bbdc:	b004      	add	sp, #16
    bbde:	bd80      	pop	{r7, pc}
    bbe0:	000138b0 	.word	0x000138b0

0000bbe4 <_ZN7TwoWire5beginEv>:

void TwoWire::begin(void) {
    bbe4:	b580      	push	{r7, lr}
    bbe6:	b082      	sub	sp, #8
    bbe8:	af00      	add	r7, sp, #0
    bbea:	6078      	str	r0, [r7, #4]
  //Master Mode
  sercom->initMasterWIRE(TWI_CLOCK);
    bbec:	687b      	ldr	r3, [r7, #4]
    bbee:	691b      	ldr	r3, [r3, #16]
    bbf0:	4a18      	ldr	r2, [pc, #96]	; (bc54 <_ZN7TwoWire5beginEv+0x70>)
    bbf2:	0011      	movs	r1, r2
    bbf4:	0018      	movs	r0, r3
    bbf6:	f002 fa47 	bl	e088 <_ZN6SERCOM14initMasterWIREEm>
  sercom->enableWIRE();
    bbfa:	687b      	ldr	r3, [r7, #4]
    bbfc:	691b      	ldr	r3, [r3, #16]
    bbfe:	0018      	movs	r0, r3
    bc00:	f002 fa18 	bl	e034 <_ZN6SERCOM10enableWIREEv>

  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    bc04:	687b      	ldr	r3, [r7, #4]
    bc06:	7d1b      	ldrb	r3, [r3, #20]
    bc08:	0018      	movs	r0, r3
    bc0a:	687b      	ldr	r3, [r7, #4]
    bc0c:	7d1b      	ldrb	r3, [r3, #20]
    bc0e:	0019      	movs	r1, r3
    bc10:	4a11      	ldr	r2, [pc, #68]	; (bc58 <_ZN7TwoWire5beginEv+0x74>)
    bc12:	000b      	movs	r3, r1
    bc14:	005b      	lsls	r3, r3, #1
    bc16:	185b      	adds	r3, r3, r1
    bc18:	00db      	lsls	r3, r3, #3
    bc1a:	18d3      	adds	r3, r2, r3
    bc1c:	3308      	adds	r3, #8
    bc1e:	781b      	ldrb	r3, [r3, #0]
    bc20:	b25b      	sxtb	r3, r3
    bc22:	0019      	movs	r1, r3
    bc24:	f7fb f8bc 	bl	6da0 <pinPeripheral>
  pinPeripheral(_uc_pinSCL, g_APinDescription[_uc_pinSCL].ulPinType);
    bc28:	687b      	ldr	r3, [r7, #4]
    bc2a:	7d5b      	ldrb	r3, [r3, #21]
    bc2c:	0018      	movs	r0, r3
    bc2e:	687b      	ldr	r3, [r7, #4]
    bc30:	7d5b      	ldrb	r3, [r3, #21]
    bc32:	0019      	movs	r1, r3
    bc34:	4a08      	ldr	r2, [pc, #32]	; (bc58 <_ZN7TwoWire5beginEv+0x74>)
    bc36:	000b      	movs	r3, r1
    bc38:	005b      	lsls	r3, r3, #1
    bc3a:	185b      	adds	r3, r3, r1
    bc3c:	00db      	lsls	r3, r3, #3
    bc3e:	18d3      	adds	r3, r2, r3
    bc40:	3308      	adds	r3, #8
    bc42:	781b      	ldrb	r3, [r3, #0]
    bc44:	b25b      	sxtb	r3, r3
    bc46:	0019      	movs	r1, r3
    bc48:	f7fb f8aa 	bl	6da0 <pinPeripheral>
}
    bc4c:	46c0      	nop			; (mov r8, r8)
    bc4e:	46bd      	mov	sp, r7
    bc50:	b002      	add	sp, #8
    bc52:	bd80      	pop	{r7, pc}
    bc54:	000186a0 	.word	0x000186a0
    bc58:	000138cc 	.word	0x000138cc

0000bc5c <_ZN7TwoWire11requestFromEhjb>:
void TwoWire::end() {
  sercom->disableWIRE();
}

uint8_t TwoWire::requestFrom(uint8_t address, size_t quantity, bool stopBit)
{
    bc5c:	b590      	push	{r4, r7, lr}
    bc5e:	b087      	sub	sp, #28
    bc60:	af00      	add	r7, sp, #0
    bc62:	60f8      	str	r0, [r7, #12]
    bc64:	0008      	movs	r0, r1
    bc66:	607a      	str	r2, [r7, #4]
    bc68:	0019      	movs	r1, r3
    bc6a:	230b      	movs	r3, #11
    bc6c:	18fb      	adds	r3, r7, r3
    bc6e:	1c02      	adds	r2, r0, #0
    bc70:	701a      	strb	r2, [r3, #0]
    bc72:	230a      	movs	r3, #10
    bc74:	18fb      	adds	r3, r7, r3
    bc76:	1c0a      	adds	r2, r1, #0
    bc78:	701a      	strb	r2, [r3, #0]
  if(quantity == 0)
    bc7a:	687b      	ldr	r3, [r7, #4]
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	d101      	bne.n	bc84 <_ZN7TwoWire11requestFromEhjb+0x28>
  {
    return 0;
    bc80:	2300      	movs	r3, #0
    bc82:	e052      	b.n	bd2a <_ZN7TwoWire11requestFromEhjb+0xce>
  }

  size_t byteRead = 0;
    bc84:	2300      	movs	r3, #0
    bc86:	617b      	str	r3, [r7, #20]

  rxBuffer.clear();
    bc88:	68fb      	ldr	r3, [r7, #12]
    bc8a:	3318      	adds	r3, #24
    bc8c:	0018      	movs	r0, r3
    bc8e:	f000 fa73 	bl	c178 <_ZN11RingBufferNILi256EE5clearEv>

  if(sercom->startTransmissionWIRE(address, WIRE_READ_FLAG))
    bc92:	68fb      	ldr	r3, [r7, #12]
    bc94:	6918      	ldr	r0, [r3, #16]
    bc96:	230b      	movs	r3, #11
    bc98:	18fb      	adds	r3, r7, r3
    bc9a:	781b      	ldrb	r3, [r3, #0]
    bc9c:	2201      	movs	r2, #1
    bc9e:	0019      	movs	r1, r3
    bca0:	f002 faac 	bl	e1fc <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    bca4:	1e03      	subs	r3, r0, #0
    bca6:	d03e      	beq.n	bd26 <_ZN7TwoWire11requestFromEhjb+0xca>
  {
    // Read first data
    rxBuffer.store_char(sercom->readDataWIRE());
    bca8:	68fb      	ldr	r3, [r7, #12]
    bcaa:	3318      	adds	r3, #24
    bcac:	001c      	movs	r4, r3
    bcae:	68fb      	ldr	r3, [r7, #12]
    bcb0:	691b      	ldr	r3, [r3, #16]
    bcb2:	0018      	movs	r0, r3
    bcb4:	f002 fc07 	bl	e4c6 <_ZN6SERCOM12readDataWIREEv>
    bcb8:	0003      	movs	r3, r0
    bcba:	0019      	movs	r1, r3
    bcbc:	0020      	movs	r0, r4
    bcbe:	f000 fa6d 	bl	c19c <_ZN11RingBufferNILi256EE10store_charEh>

    // Connected to slave
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    bcc2:	2301      	movs	r3, #1
    bcc4:	617b      	str	r3, [r7, #20]
    bcc6:	697a      	ldr	r2, [r7, #20]
    bcc8:	687b      	ldr	r3, [r7, #4]
    bcca:	429a      	cmp	r2, r3
    bccc:	d21b      	bcs.n	bd06 <_ZN7TwoWire11requestFromEhjb+0xaa>
    {
      sercom->prepareAckBitWIRE();                          // Prepare Acknowledge
    bcce:	68fb      	ldr	r3, [r7, #12]
    bcd0:	691b      	ldr	r3, [r3, #16]
    bcd2:	0018      	movs	r0, r3
    bcd4:	f002 fa3a 	bl	e14c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_READ); // Prepare the ACK command for the slave
    bcd8:	68fb      	ldr	r3, [r7, #12]
    bcda:	691b      	ldr	r3, [r3, #16]
    bcdc:	2102      	movs	r1, #2
    bcde:	0018      	movs	r0, r3
    bce0:	f002 fa52 	bl	e188 <_ZN6SERCOM22prepareCommandBitsWireEh>
      rxBuffer.store_char(sercom->readDataWIRE());          // Read data and send the ACK
    bce4:	68fb      	ldr	r3, [r7, #12]
    bce6:	3318      	adds	r3, #24
    bce8:	001c      	movs	r4, r3
    bcea:	68fb      	ldr	r3, [r7, #12]
    bcec:	691b      	ldr	r3, [r3, #16]
    bcee:	0018      	movs	r0, r3
    bcf0:	f002 fbe9 	bl	e4c6 <_ZN6SERCOM12readDataWIREEv>
    bcf4:	0003      	movs	r3, r0
    bcf6:	0019      	movs	r1, r3
    bcf8:	0020      	movs	r0, r4
    bcfa:	f000 fa4f 	bl	c19c <_ZN11RingBufferNILi256EE10store_charEh>
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    bcfe:	697b      	ldr	r3, [r7, #20]
    bd00:	3301      	adds	r3, #1
    bd02:	617b      	str	r3, [r7, #20]
    bd04:	e7df      	b.n	bcc6 <_ZN7TwoWire11requestFromEhjb+0x6a>
    }
    sercom->prepareNackBitWIRE();                           // Prepare NACK to stop slave transmission
    bd06:	68fb      	ldr	r3, [r7, #12]
    bd08:	691b      	ldr	r3, [r3, #16]
    bd0a:	0018      	movs	r0, r3
    bd0c:	f002 fa00 	bl	e110 <_ZN6SERCOM18prepareNackBitWIREEv>
    //sercom->readDataWIRE();                               // Clear data register to send NACK

    if (stopBit)
    bd10:	230a      	movs	r3, #10
    bd12:	18fb      	adds	r3, r7, r3
    bd14:	781b      	ldrb	r3, [r3, #0]
    bd16:	2b00      	cmp	r3, #0
    bd18:	d005      	beq.n	bd26 <_ZN7TwoWire11requestFromEhjb+0xca>
    {
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);   // Send Stop
    bd1a:	68fb      	ldr	r3, [r7, #12]
    bd1c:	691b      	ldr	r3, [r3, #16]
    bd1e:	2103      	movs	r1, #3
    bd20:	0018      	movs	r0, r3
    bd22:	f002 fa31 	bl	e188 <_ZN6SERCOM22prepareCommandBitsWireEh>
    }
  }

  return byteRead;
    bd26:	697b      	ldr	r3, [r7, #20]
    bd28:	b2db      	uxtb	r3, r3
}
    bd2a:	0018      	movs	r0, r3
    bd2c:	46bd      	mov	sp, r7
    bd2e:	b007      	add	sp, #28
    bd30:	bd90      	pop	{r4, r7, pc}

0000bd32 <_ZN7TwoWire11requestFromEhj>:

uint8_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
    bd32:	b580      	push	{r7, lr}
    bd34:	b084      	sub	sp, #16
    bd36:	af00      	add	r7, sp, #0
    bd38:	60f8      	str	r0, [r7, #12]
    bd3a:	607a      	str	r2, [r7, #4]
    bd3c:	230b      	movs	r3, #11
    bd3e:	18fb      	adds	r3, r7, r3
    bd40:	1c0a      	adds	r2, r1, #0
    bd42:	701a      	strb	r2, [r3, #0]
  return requestFrom(address, quantity, true);
    bd44:	687a      	ldr	r2, [r7, #4]
    bd46:	230b      	movs	r3, #11
    bd48:	18fb      	adds	r3, r7, r3
    bd4a:	7819      	ldrb	r1, [r3, #0]
    bd4c:	68f8      	ldr	r0, [r7, #12]
    bd4e:	2301      	movs	r3, #1
    bd50:	f7ff ff84 	bl	bc5c <_ZN7TwoWire11requestFromEhjb>
    bd54:	0003      	movs	r3, r0
}
    bd56:	0018      	movs	r0, r3
    bd58:	46bd      	mov	sp, r7
    bd5a:	b004      	add	sp, #16
    bd5c:	bd80      	pop	{r7, pc}

0000bd5e <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address) {
    bd5e:	b580      	push	{r7, lr}
    bd60:	b082      	sub	sp, #8
    bd62:	af00      	add	r7, sp, #0
    bd64:	6078      	str	r0, [r7, #4]
    bd66:	000a      	movs	r2, r1
    bd68:	1cfb      	adds	r3, r7, #3
    bd6a:	701a      	strb	r2, [r3, #0]
  // save address of target and clear buffer
  txAddress = address;
    bd6c:	687a      	ldr	r2, [r7, #4]
    bd6e:	1cf9      	adds	r1, r7, #3
    bd70:	238a      	movs	r3, #138	; 0x8a
    bd72:	009b      	lsls	r3, r3, #2
    bd74:	7809      	ldrb	r1, [r1, #0]
    bd76:	54d1      	strb	r1, [r2, r3]
  txBuffer.clear();
    bd78:	687b      	ldr	r3, [r7, #4]
    bd7a:	3321      	adds	r3, #33	; 0x21
    bd7c:	33ff      	adds	r3, #255	; 0xff
    bd7e:	0018      	movs	r0, r3
    bd80:	f000 f9fa 	bl	c178 <_ZN11RingBufferNILi256EE5clearEv>

  transmissionBegun = true;
    bd84:	687b      	ldr	r3, [r7, #4]
    bd86:	2201      	movs	r2, #1
    bd88:	759a      	strb	r2, [r3, #22]
}
    bd8a:	46c0      	nop			; (mov r8, r8)
    bd8c:	46bd      	mov	sp, r7
    bd8e:	b002      	add	sp, #8
    bd90:	bd80      	pop	{r7, pc}

0000bd92 <_ZN7TwoWire15endTransmissionEb>:
//  1 : Data too long
//  2 : NACK on transmit of address
//  3 : NACK on transmit of data
//  4 : Other error
uint8_t TwoWire::endTransmission(bool stopBit)
{
    bd92:	b590      	push	{r4, r7, lr}
    bd94:	b083      	sub	sp, #12
    bd96:	af00      	add	r7, sp, #0
    bd98:	6078      	str	r0, [r7, #4]
    bd9a:	000a      	movs	r2, r1
    bd9c:	1cfb      	adds	r3, r7, #3
    bd9e:	701a      	strb	r2, [r3, #0]
  transmissionBegun = false ;
    bda0:	687b      	ldr	r3, [r7, #4]
    bda2:	2200      	movs	r2, #0
    bda4:	759a      	strb	r2, [r3, #22]

  // Start I2C transmission
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    bda6:	687b      	ldr	r3, [r7, #4]
    bda8:	6918      	ldr	r0, [r3, #16]
    bdaa:	687a      	ldr	r2, [r7, #4]
    bdac:	238a      	movs	r3, #138	; 0x8a
    bdae:	009b      	lsls	r3, r3, #2
    bdb0:	5cd3      	ldrb	r3, [r2, r3]
    bdb2:	2200      	movs	r2, #0
    bdb4:	0019      	movs	r1, r3
    bdb6:	f002 fa21 	bl	e1fc <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    bdba:	0003      	movs	r3, r0
    bdbc:	001a      	movs	r2, r3
    bdbe:	2301      	movs	r3, #1
    bdc0:	4053      	eors	r3, r2
    bdc2:	b2db      	uxtb	r3, r3
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d007      	beq.n	bdd8 <_ZN7TwoWire15endTransmissionEb+0x46>
  {
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    bdc8:	687b      	ldr	r3, [r7, #4]
    bdca:	691b      	ldr	r3, [r3, #16]
    bdcc:	2103      	movs	r1, #3
    bdce:	0018      	movs	r0, r3
    bdd0:	f002 f9da 	bl	e188 <_ZN6SERCOM22prepareCommandBitsWireEh>
    return 2 ;  // Address error
    bdd4:	2302      	movs	r3, #2
    bdd6:	e033      	b.n	be40 <_ZN7TwoWire15endTransmissionEb+0xae>
  }

  // Send all buffer
  while( txBuffer.available() )
    bdd8:	687b      	ldr	r3, [r7, #4]
    bdda:	3321      	adds	r3, #33	; 0x21
    bddc:	33ff      	adds	r3, #255	; 0xff
    bdde:	0018      	movs	r0, r3
    bde0:	f000 fa0a 	bl	c1f8 <_ZN11RingBufferNILi256EE9availableEv>
    bde4:	0003      	movs	r3, r0
    bde6:	1e5a      	subs	r2, r3, #1
    bde8:	4193      	sbcs	r3, r2
    bdea:	b2db      	uxtb	r3, r3
    bdec:	2b00      	cmp	r3, #0
    bdee:	d01c      	beq.n	be2a <_ZN7TwoWire15endTransmissionEb+0x98>
  {
    // Trying to send data
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    bdf0:	687b      	ldr	r3, [r7, #4]
    bdf2:	691c      	ldr	r4, [r3, #16]
    bdf4:	687b      	ldr	r3, [r7, #4]
    bdf6:	3321      	adds	r3, #33	; 0x21
    bdf8:	33ff      	adds	r3, #255	; 0xff
    bdfa:	0018      	movs	r0, r3
    bdfc:	f000 fa16 	bl	c22c <_ZN11RingBufferNILi256EE9read_charEv>
    be00:	0003      	movs	r3, r0
    be02:	b2db      	uxtb	r3, r3
    be04:	0019      	movs	r1, r3
    be06:	0020      	movs	r0, r4
    be08:	f002 fa75 	bl	e2f6 <_ZN6SERCOM18sendDataMasterWIREEh>
    be0c:	0003      	movs	r3, r0
    be0e:	001a      	movs	r2, r3
    be10:	2301      	movs	r3, #1
    be12:	4053      	eors	r3, r2
    be14:	b2db      	uxtb	r3, r3
    be16:	2b00      	cmp	r3, #0
    be18:	d0de      	beq.n	bdd8 <_ZN7TwoWire15endTransmissionEb+0x46>
    {
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    be1a:	687b      	ldr	r3, [r7, #4]
    be1c:	691b      	ldr	r3, [r3, #16]
    be1e:	2103      	movs	r1, #3
    be20:	0018      	movs	r0, r3
    be22:	f002 f9b1 	bl	e188 <_ZN6SERCOM22prepareCommandBitsWireEh>
      return 3 ;  // Nack or error
    be26:	2303      	movs	r3, #3
    be28:	e00a      	b.n	be40 <_ZN7TwoWire15endTransmissionEb+0xae>
    }
  }
  
  if (stopBit)
    be2a:	1cfb      	adds	r3, r7, #3
    be2c:	781b      	ldrb	r3, [r3, #0]
    be2e:	2b00      	cmp	r3, #0
    be30:	d005      	beq.n	be3e <_ZN7TwoWire15endTransmissionEb+0xac>
  {
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    be32:	687b      	ldr	r3, [r7, #4]
    be34:	691b      	ldr	r3, [r3, #16]
    be36:	2103      	movs	r1, #3
    be38:	0018      	movs	r0, r3
    be3a:	f002 f9a5 	bl	e188 <_ZN6SERCOM22prepareCommandBitsWireEh>
  }   

  return 0;
    be3e:	2300      	movs	r3, #0
}
    be40:	0018      	movs	r0, r3
    be42:	46bd      	mov	sp, r7
    be44:	b003      	add	sp, #12
    be46:	bd90      	pop	{r4, r7, pc}

0000be48 <_ZN7TwoWire15endTransmissionEv>:

uint8_t TwoWire::endTransmission()
{
    be48:	b580      	push	{r7, lr}
    be4a:	b082      	sub	sp, #8
    be4c:	af00      	add	r7, sp, #0
    be4e:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
    be50:	687b      	ldr	r3, [r7, #4]
    be52:	2101      	movs	r1, #1
    be54:	0018      	movs	r0, r3
    be56:	f7ff ff9c 	bl	bd92 <_ZN7TwoWire15endTransmissionEb>
    be5a:	0003      	movs	r3, r0
}
    be5c:	0018      	movs	r0, r3
    be5e:	46bd      	mov	sp, r7
    be60:	b002      	add	sp, #8
    be62:	bd80      	pop	{r7, pc}

0000be64 <_ZN7TwoWire5writeEh>:

size_t TwoWire::write(uint8_t ucData)
{
    be64:	b580      	push	{r7, lr}
    be66:	b082      	sub	sp, #8
    be68:	af00      	add	r7, sp, #0
    be6a:	6078      	str	r0, [r7, #4]
    be6c:	000a      	movs	r2, r1
    be6e:	1cfb      	adds	r3, r7, #3
    be70:	701a      	strb	r2, [r3, #0]
  // No writing, without begun transmission or a full buffer
  if ( !transmissionBegun || txBuffer.isFull() )
    be72:	687b      	ldr	r3, [r7, #4]
    be74:	7d9b      	ldrb	r3, [r3, #22]
    be76:	2201      	movs	r2, #1
    be78:	4053      	eors	r3, r2
    be7a:	b2db      	uxtb	r3, r3
    be7c:	2b00      	cmp	r3, #0
    be7e:	d107      	bne.n	be90 <_ZN7TwoWire5writeEh+0x2c>
    be80:	687b      	ldr	r3, [r7, #4]
    be82:	3321      	adds	r3, #33	; 0x21
    be84:	33ff      	adds	r3, #255	; 0xff
    be86:	0018      	movs	r0, r3
    be88:	f000 fa03 	bl	c292 <_ZN11RingBufferNILi256EE6isFullEv>
    be8c:	1e03      	subs	r3, r0, #0
    be8e:	d001      	beq.n	be94 <_ZN7TwoWire5writeEh+0x30>
    be90:	2301      	movs	r3, #1
    be92:	e000      	b.n	be96 <_ZN7TwoWire5writeEh+0x32>
    be94:	2300      	movs	r3, #0
    be96:	2b00      	cmp	r3, #0
    be98:	d001      	beq.n	be9e <_ZN7TwoWire5writeEh+0x3a>
  {
    return 0 ;
    be9a:	2300      	movs	r3, #0
    be9c:	e00a      	b.n	beb4 <_ZN7TwoWire5writeEh+0x50>
  }

  txBuffer.store_char( ucData ) ;
    be9e:	687b      	ldr	r3, [r7, #4]
    bea0:	3321      	adds	r3, #33	; 0x21
    bea2:	33ff      	adds	r3, #255	; 0xff
    bea4:	001a      	movs	r2, r3
    bea6:	1cfb      	adds	r3, r7, #3
    bea8:	781b      	ldrb	r3, [r3, #0]
    beaa:	0019      	movs	r1, r3
    beac:	0010      	movs	r0, r2
    beae:	f000 f975 	bl	c19c <_ZN11RingBufferNILi256EE10store_charEh>

  return 1 ;
    beb2:	2301      	movs	r3, #1
}
    beb4:	0018      	movs	r0, r3
    beb6:	46bd      	mov	sp, r7
    beb8:	b002      	add	sp, #8
    beba:	bd80      	pop	{r7, pc}

0000bebc <_ZN7TwoWire5writeEPKhj>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    bebc:	b580      	push	{r7, lr}
    bebe:	b086      	sub	sp, #24
    bec0:	af00      	add	r7, sp, #0
    bec2:	60f8      	str	r0, [r7, #12]
    bec4:	60b9      	str	r1, [r7, #8]
    bec6:	607a      	str	r2, [r7, #4]
  //Try to store all data
  for(size_t i = 0; i < quantity; ++i)
    bec8:	2300      	movs	r3, #0
    beca:	617b      	str	r3, [r7, #20]
    becc:	697a      	ldr	r2, [r7, #20]
    bece:	687b      	ldr	r3, [r7, #4]
    bed0:	429a      	cmp	r2, r3
    bed2:	d215      	bcs.n	bf00 <_ZN7TwoWire5writeEPKhj+0x44>
  {
    //Return the number of data stored, when the buffer is full (if write return 0)
    if(!write(data[i]))
    bed4:	68fb      	ldr	r3, [r7, #12]
    bed6:	681b      	ldr	r3, [r3, #0]
    bed8:	681b      	ldr	r3, [r3, #0]
    beda:	68b9      	ldr	r1, [r7, #8]
    bedc:	697a      	ldr	r2, [r7, #20]
    bede:	188a      	adds	r2, r1, r2
    bee0:	7811      	ldrb	r1, [r2, #0]
    bee2:	68fa      	ldr	r2, [r7, #12]
    bee4:	0010      	movs	r0, r2
    bee6:	4798      	blx	r3
    bee8:	0003      	movs	r3, r0
    beea:	425a      	negs	r2, r3
    beec:	4153      	adcs	r3, r2
    beee:	b2db      	uxtb	r3, r3
    bef0:	2b00      	cmp	r3, #0
    bef2:	d001      	beq.n	bef8 <_ZN7TwoWire5writeEPKhj+0x3c>
      return i;
    bef4:	697b      	ldr	r3, [r7, #20]
    bef6:	e004      	b.n	bf02 <_ZN7TwoWire5writeEPKhj+0x46>
  for(size_t i = 0; i < quantity; ++i)
    bef8:	697b      	ldr	r3, [r7, #20]
    befa:	3301      	adds	r3, #1
    befc:	617b      	str	r3, [r7, #20]
    befe:	e7e5      	b.n	becc <_ZN7TwoWire5writeEPKhj+0x10>
  }

  //All data stored
  return quantity;
    bf00:	687b      	ldr	r3, [r7, #4]
}
    bf02:	0018      	movs	r0, r3
    bf04:	46bd      	mov	sp, r7
    bf06:	b006      	add	sp, #24
    bf08:	bd80      	pop	{r7, pc}

0000bf0a <_ZN7TwoWire9availableEv>:

int TwoWire::available(void)
{
    bf0a:	b580      	push	{r7, lr}
    bf0c:	b082      	sub	sp, #8
    bf0e:	af00      	add	r7, sp, #0
    bf10:	6078      	str	r0, [r7, #4]
  return rxBuffer.available();
    bf12:	687b      	ldr	r3, [r7, #4]
    bf14:	3318      	adds	r3, #24
    bf16:	0018      	movs	r0, r3
    bf18:	f000 f96e 	bl	c1f8 <_ZN11RingBufferNILi256EE9availableEv>
    bf1c:	0003      	movs	r3, r0
}
    bf1e:	0018      	movs	r0, r3
    bf20:	46bd      	mov	sp, r7
    bf22:	b002      	add	sp, #8
    bf24:	bd80      	pop	{r7, pc}

0000bf26 <_ZN7TwoWire4readEv>:

int TwoWire::read(void)
{
    bf26:	b580      	push	{r7, lr}
    bf28:	b082      	sub	sp, #8
    bf2a:	af00      	add	r7, sp, #0
    bf2c:	6078      	str	r0, [r7, #4]
  return rxBuffer.read_char();
    bf2e:	687b      	ldr	r3, [r7, #4]
    bf30:	3318      	adds	r3, #24
    bf32:	0018      	movs	r0, r3
    bf34:	f000 f97a 	bl	c22c <_ZN11RingBufferNILi256EE9read_charEv>
    bf38:	0003      	movs	r3, r0
}
    bf3a:	0018      	movs	r0, r3
    bf3c:	46bd      	mov	sp, r7
    bf3e:	b002      	add	sp, #8
    bf40:	bd80      	pop	{r7, pc}

0000bf42 <_ZN7TwoWire4peekEv>:

int TwoWire::peek(void)
{
    bf42:	b580      	push	{r7, lr}
    bf44:	b082      	sub	sp, #8
    bf46:	af00      	add	r7, sp, #0
    bf48:	6078      	str	r0, [r7, #4]
  return rxBuffer.peek();
    bf4a:	687b      	ldr	r3, [r7, #4]
    bf4c:	3318      	adds	r3, #24
    bf4e:	0018      	movs	r0, r3
    bf50:	f000 f9b9 	bl	c2c6 <_ZN11RingBufferNILi256EE4peekEv>
    bf54:	0003      	movs	r3, r0
}
    bf56:	0018      	movs	r0, r3
    bf58:	46bd      	mov	sp, r7
    bf5a:	b002      	add	sp, #8
    bf5c:	bd80      	pop	{r7, pc}

0000bf5e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    bf5e:	b580      	push	{r7, lr}
    bf60:	b082      	sub	sp, #8
    bf62:	af00      	add	r7, sp, #0
    bf64:	6078      	str	r0, [r7, #4]
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
    bf66:	46c0      	nop			; (mov r8, r8)
    bf68:	46bd      	mov	sp, r7
    bf6a:	b002      	add	sp, #8
    bf6c:	bd80      	pop	{r7, pc}

0000bf6e <_ZN7TwoWire9onServiceEv>:
{
  onRequestCallback = function;
}

void TwoWire::onService(void)
{
    bf6e:	b590      	push	{r4, r7, lr}
    bf70:	b085      	sub	sp, #20
    bf72:	af00      	add	r7, sp, #0
    bf74:	6078      	str	r0, [r7, #4]
  if ( sercom->isSlaveWIRE() )
    bf76:	687b      	ldr	r3, [r7, #4]
    bf78:	691b      	ldr	r3, [r3, #16]
    bf7a:	0018      	movs	r0, r3
    bf7c:	f002 fa27 	bl	e3ce <_ZN6SERCOM11isSlaveWIREEv>
    bf80:	1e03      	subs	r3, r0, #0
    bf82:	d100      	bne.n	bf86 <_ZN7TwoWire9onServiceEv+0x18>
    bf84:	e0d3      	b.n	c12e <_ZN7TwoWire9onServiceEv+0x1c0>
  {
    if(sercom->isStopDetectedWIRE() || 
    bf86:	687b      	ldr	r3, [r7, #4]
    bf88:	691b      	ldr	r3, [r3, #16]
    bf8a:	0018      	movs	r0, r3
    bf8c:	f002 fa63 	bl	e456 <_ZN6SERCOM18isStopDetectedWIREEv>
    bf90:	1e03      	subs	r3, r0, #0
    bf92:	d119      	bne.n	bfc8 <_ZN7TwoWire9onServiceEv+0x5a>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    bf94:	687b      	ldr	r3, [r7, #4]
    bf96:	691b      	ldr	r3, [r3, #16]
    bf98:	0018      	movs	r0, r3
    bf9a:	f002 fa78 	bl	e48e <_ZN6SERCOM14isAddressMatchEv>
    bf9e:	1e03      	subs	r3, r0, #0
    if(sercom->isStopDetectedWIRE() || 
    bfa0:	d014      	beq.n	bfcc <_ZN7TwoWire9onServiceEv+0x5e>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    bfa2:	687b      	ldr	r3, [r7, #4]
    bfa4:	691b      	ldr	r3, [r3, #16]
    bfa6:	0018      	movs	r0, r3
    bfa8:	f002 fa63 	bl	e472 <_ZN6SERCOM21isRestartDetectedWIREEv>
    bfac:	1e03      	subs	r3, r0, #0
    bfae:	d00d      	beq.n	bfcc <_ZN7TwoWire9onServiceEv+0x5e>
    bfb0:	687b      	ldr	r3, [r7, #4]
    bfb2:	691b      	ldr	r3, [r3, #16]
    bfb4:	0018      	movs	r0, r3
    bfb6:	f002 fa78 	bl	e4aa <_ZN6SERCOM25isMasterReadOperationWIREEv>
    bfba:	0003      	movs	r3, r0
    bfbc:	001a      	movs	r2, r3
    bfbe:	2301      	movs	r3, #1
    bfc0:	4053      	eors	r3, r2
    bfc2:	b2db      	uxtb	r3, r3
    bfc4:	2b00      	cmp	r3, #0
    bfc6:	d001      	beq.n	bfcc <_ZN7TwoWire9onServiceEv+0x5e>
    if(sercom->isStopDetectedWIRE() || 
    bfc8:	2301      	movs	r3, #1
    bfca:	e000      	b.n	bfce <_ZN7TwoWire9onServiceEv+0x60>
    bfcc:	2300      	movs	r3, #0
    bfce:	2b00      	cmp	r3, #0
    bfd0:	d024      	beq.n	c01c <_ZN7TwoWire9onServiceEv+0xae>
    {
      sercom->prepareAckBitWIRE();
    bfd2:	687b      	ldr	r3, [r7, #4]
    bfd4:	691b      	ldr	r3, [r3, #16]
    bfd6:	0018      	movs	r0, r3
    bfd8:	f002 f8b8 	bl	e14c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    bfdc:	687b      	ldr	r3, [r7, #4]
    bfde:	691b      	ldr	r3, [r3, #16]
    bfe0:	2103      	movs	r1, #3
    bfe2:	0018      	movs	r0, r3
    bfe4:	f002 f8d0 	bl	e188 <_ZN6SERCOM22prepareCommandBitsWireEh>

      //Calling onReceiveCallback, if exists
      if(onReceiveCallback)
    bfe8:	687a      	ldr	r2, [r7, #4]
    bfea:	238c      	movs	r3, #140	; 0x8c
    bfec:	009b      	lsls	r3, r3, #2
    bfee:	58d3      	ldr	r3, [r2, r3]
    bff0:	2b00      	cmp	r3, #0
    bff2:	d00d      	beq.n	c010 <_ZN7TwoWire9onServiceEv+0xa2>
      {
        onReceiveCallback(available());
    bff4:	687a      	ldr	r2, [r7, #4]
    bff6:	238c      	movs	r3, #140	; 0x8c
    bff8:	009b      	lsls	r3, r3, #2
    bffa:	58d4      	ldr	r4, [r2, r3]
    bffc:	687b      	ldr	r3, [r7, #4]
    bffe:	681b      	ldr	r3, [r3, #0]
    c000:	3310      	adds	r3, #16
    c002:	681b      	ldr	r3, [r3, #0]
    c004:	687a      	ldr	r2, [r7, #4]
    c006:	0010      	movs	r0, r2
    c008:	4798      	blx	r3
    c00a:	0003      	movs	r3, r0
    c00c:	0018      	movs	r0, r3
    c00e:	47a0      	blx	r4
      }
      
      rxBuffer.clear();
    c010:	687b      	ldr	r3, [r7, #4]
    c012:	3318      	adds	r3, #24
    c014:	0018      	movs	r0, r3
    c016:	f000 f8af 	bl	c178 <_ZN11RingBufferNILi256EE5clearEv>

        sercom->prepareCommandBitsWire(0x03);
      }
    }
  }
}
    c01a:	e088      	b.n	c12e <_ZN7TwoWire9onServiceEv+0x1c0>
    else if(sercom->isAddressMatch())  //Address Match
    c01c:	687b      	ldr	r3, [r7, #4]
    c01e:	691b      	ldr	r3, [r3, #16]
    c020:	0018      	movs	r0, r3
    c022:	f002 fa34 	bl	e48e <_ZN6SERCOM14isAddressMatchEv>
    c026:	1e03      	subs	r3, r0, #0
    c028:	d026      	beq.n	c078 <_ZN7TwoWire9onServiceEv+0x10a>
      sercom->prepareAckBitWIRE();
    c02a:	687b      	ldr	r3, [r7, #4]
    c02c:	691b      	ldr	r3, [r3, #16]
    c02e:	0018      	movs	r0, r3
    c030:	f002 f88c 	bl	e14c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    c034:	687b      	ldr	r3, [r7, #4]
    c036:	691b      	ldr	r3, [r3, #16]
    c038:	2103      	movs	r1, #3
    c03a:	0018      	movs	r0, r3
    c03c:	f002 f8a4 	bl	e188 <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
    c040:	687b      	ldr	r3, [r7, #4]
    c042:	691b      	ldr	r3, [r3, #16]
    c044:	0018      	movs	r0, r3
    c046:	f002 fa30 	bl	e4aa <_ZN6SERCOM25isMasterReadOperationWIREEv>
    c04a:	1e03      	subs	r3, r0, #0
    c04c:	d06f      	beq.n	c12e <_ZN7TwoWire9onServiceEv+0x1c0>
        txBuffer.clear();
    c04e:	687b      	ldr	r3, [r7, #4]
    c050:	3321      	adds	r3, #33	; 0x21
    c052:	33ff      	adds	r3, #255	; 0xff
    c054:	0018      	movs	r0, r3
    c056:	f000 f88f 	bl	c178 <_ZN11RingBufferNILi256EE5clearEv>
        transmissionBegun = true;
    c05a:	687b      	ldr	r3, [r7, #4]
    c05c:	2201      	movs	r2, #1
    c05e:	759a      	strb	r2, [r3, #22]
        if(onRequestCallback)
    c060:	687a      	ldr	r2, [r7, #4]
    c062:	238b      	movs	r3, #139	; 0x8b
    c064:	009b      	lsls	r3, r3, #2
    c066:	58d3      	ldr	r3, [r2, r3]
    c068:	2b00      	cmp	r3, #0
    c06a:	d060      	beq.n	c12e <_ZN7TwoWire9onServiceEv+0x1c0>
          onRequestCallback();
    c06c:	687a      	ldr	r2, [r7, #4]
    c06e:	238b      	movs	r3, #139	; 0x8b
    c070:	009b      	lsls	r3, r3, #2
    c072:	58d3      	ldr	r3, [r2, r3]
    c074:	4798      	blx	r3
}
    c076:	e05a      	b.n	c12e <_ZN7TwoWire9onServiceEv+0x1c0>
    else if(sercom->isDataReadyWIRE())
    c078:	687b      	ldr	r3, [r7, #4]
    c07a:	691b      	ldr	r3, [r3, #16]
    c07c:	0018      	movs	r0, r3
    c07e:	f002 f9dc 	bl	e43a <_ZN6SERCOM15isDataReadyWIREEv>
    c082:	1e03      	subs	r3, r0, #0
    c084:	d053      	beq.n	c12e <_ZN7TwoWire9onServiceEv+0x1c0>
      if (sercom->isMasterReadOperationWIRE())
    c086:	687b      	ldr	r3, [r7, #4]
    c088:	691b      	ldr	r3, [r3, #16]
    c08a:	0018      	movs	r0, r3
    c08c:	f002 fa0d 	bl	e4aa <_ZN6SERCOM25isMasterReadOperationWIREEv>
    c090:	1e03      	subs	r3, r0, #0
    c092:	d027      	beq.n	c0e4 <_ZN7TwoWire9onServiceEv+0x176>
        uint8_t c = 0xff;
    c094:	230f      	movs	r3, #15
    c096:	18fb      	adds	r3, r7, r3
    c098:	22ff      	movs	r2, #255	; 0xff
    c09a:	701a      	strb	r2, [r3, #0]
        if( txBuffer.available() ) {
    c09c:	687b      	ldr	r3, [r7, #4]
    c09e:	3321      	adds	r3, #33	; 0x21
    c0a0:	33ff      	adds	r3, #255	; 0xff
    c0a2:	0018      	movs	r0, r3
    c0a4:	f000 f8a8 	bl	c1f8 <_ZN11RingBufferNILi256EE9availableEv>
    c0a8:	0003      	movs	r3, r0
    c0aa:	1e5a      	subs	r2, r3, #1
    c0ac:	4193      	sbcs	r3, r2
    c0ae:	b2db      	uxtb	r3, r3
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d009      	beq.n	c0c8 <_ZN7TwoWire9onServiceEv+0x15a>
          c = txBuffer.read_char();
    c0b4:	687b      	ldr	r3, [r7, #4]
    c0b6:	3321      	adds	r3, #33	; 0x21
    c0b8:	33ff      	adds	r3, #255	; 0xff
    c0ba:	0018      	movs	r0, r3
    c0bc:	f000 f8b6 	bl	c22c <_ZN11RingBufferNILi256EE9read_charEv>
    c0c0:	0002      	movs	r2, r0
    c0c2:	230f      	movs	r3, #15
    c0c4:	18fb      	adds	r3, r7, r3
    c0c6:	701a      	strb	r2, [r3, #0]
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
    c0c8:	687b      	ldr	r3, [r7, #4]
    c0ca:	691a      	ldr	r2, [r3, #16]
    c0cc:	230f      	movs	r3, #15
    c0ce:	18fb      	adds	r3, r7, r3
    c0d0:	781b      	ldrb	r3, [r3, #0]
    c0d2:	0019      	movs	r1, r3
    c0d4:	0010      	movs	r0, r2
    c0d6:	f002 f93f 	bl	e358 <_ZN6SERCOM17sendDataSlaveWIREEh>
    c0da:	0003      	movs	r3, r0
    c0dc:	001a      	movs	r2, r3
    c0de:	687b      	ldr	r3, [r7, #4]
    c0e0:	759a      	strb	r2, [r3, #22]
}
    c0e2:	e024      	b.n	c12e <_ZN7TwoWire9onServiceEv+0x1c0>
        if (rxBuffer.isFull()) {
    c0e4:	687b      	ldr	r3, [r7, #4]
    c0e6:	3318      	adds	r3, #24
    c0e8:	0018      	movs	r0, r3
    c0ea:	f000 f8d2 	bl	c292 <_ZN11RingBufferNILi256EE6isFullEv>
    c0ee:	1e03      	subs	r3, r0, #0
    c0f0:	d005      	beq.n	c0fe <_ZN7TwoWire9onServiceEv+0x190>
          sercom->prepareNackBitWIRE(); 
    c0f2:	687b      	ldr	r3, [r7, #4]
    c0f4:	691b      	ldr	r3, [r3, #16]
    c0f6:	0018      	movs	r0, r3
    c0f8:	f002 f80a 	bl	e110 <_ZN6SERCOM18prepareNackBitWIREEv>
    c0fc:	e011      	b.n	c122 <_ZN7TwoWire9onServiceEv+0x1b4>
          rxBuffer.store_char(sercom->readDataWIRE());
    c0fe:	687b      	ldr	r3, [r7, #4]
    c100:	3318      	adds	r3, #24
    c102:	001c      	movs	r4, r3
    c104:	687b      	ldr	r3, [r7, #4]
    c106:	691b      	ldr	r3, [r3, #16]
    c108:	0018      	movs	r0, r3
    c10a:	f002 f9dc 	bl	e4c6 <_ZN6SERCOM12readDataWIREEv>
    c10e:	0003      	movs	r3, r0
    c110:	0019      	movs	r1, r3
    c112:	0020      	movs	r0, r4
    c114:	f000 f842 	bl	c19c <_ZN11RingBufferNILi256EE10store_charEh>
          sercom->prepareAckBitWIRE(); 
    c118:	687b      	ldr	r3, [r7, #4]
    c11a:	691b      	ldr	r3, [r3, #16]
    c11c:	0018      	movs	r0, r3
    c11e:	f002 f815 	bl	e14c <_ZN6SERCOM17prepareAckBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
    c122:	687b      	ldr	r3, [r7, #4]
    c124:	691b      	ldr	r3, [r3, #16]
    c126:	2103      	movs	r1, #3
    c128:	0018      	movs	r0, r3
    c12a:	f002 f82d 	bl	e188 <_ZN6SERCOM22prepareCommandBitsWireEh>
}
    c12e:	46c0      	nop			; (mov r8, r8)
    c130:	46bd      	mov	sp, r7
    c132:	b005      	add	sp, #20
    c134:	bd90      	pop	{r4, r7, pc}
	...

0000c138 <SERCOM3_Handler>:
    #define PERIPH_WIRE          sercom3
    #define WIRE_IT_HANDLER      SERCOM3_Handler
  #endif // PERIPH_WIRE
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);

  void WIRE_IT_HANDLER(void) {
    c138:	b580      	push	{r7, lr}
    c13a:	af00      	add	r7, sp, #0
    Wire.onService();
    c13c:	4b03      	ldr	r3, [pc, #12]	; (c14c <SERCOM3_Handler+0x14>)
    c13e:	0018      	movs	r0, r3
    c140:	f7ff ff15 	bl	bf6e <_ZN7TwoWire9onServiceEv>
  }
    c144:	46c0      	nop			; (mov r8, r8)
    c146:	46bd      	mov	sp, r7
    c148:	bd80      	pop	{r7, pc}
    c14a:	46c0      	nop			; (mov r8, r8)
    c14c:	20000b8c 	.word	0x20000b8c

0000c150 <_ZN11RingBufferNILi256EEC1Ev>:
RingBufferN<N>::RingBufferN( void )
    c150:	b580      	push	{r7, lr}
    c152:	b082      	sub	sp, #8
    c154:	af00      	add	r7, sp, #0
    c156:	6078      	str	r0, [r7, #4]
    memset( _aucBuffer, 0, N ) ;
    c158:	6878      	ldr	r0, [r7, #4]
    c15a:	2380      	movs	r3, #128	; 0x80
    c15c:	005b      	lsls	r3, r3, #1
    c15e:	001a      	movs	r2, r3
    c160:	2100      	movs	r1, #0
    c162:	f004 fc71 	bl	10a48 <memset>
    clear();
    c166:	687b      	ldr	r3, [r7, #4]
    c168:	0018      	movs	r0, r3
    c16a:	f000 f805 	bl	c178 <_ZN11RingBufferNILi256EE5clearEv>
}
    c16e:	687b      	ldr	r3, [r7, #4]
    c170:	0018      	movs	r0, r3
    c172:	46bd      	mov	sp, r7
    c174:	b002      	add	sp, #8
    c176:	bd80      	pop	{r7, pc}

0000c178 <_ZN11RingBufferNILi256EE5clearEv>:
void RingBufferN<N>::clear()
    c178:	b580      	push	{r7, lr}
    c17a:	b082      	sub	sp, #8
    c17c:	af00      	add	r7, sp, #0
    c17e:	6078      	str	r0, [r7, #4]
  _iHead = 0;
    c180:	687a      	ldr	r2, [r7, #4]
    c182:	2380      	movs	r3, #128	; 0x80
    c184:	005b      	lsls	r3, r3, #1
    c186:	2100      	movs	r1, #0
    c188:	50d1      	str	r1, [r2, r3]
  _iTail = 0;
    c18a:	687a      	ldr	r2, [r7, #4]
    c18c:	2382      	movs	r3, #130	; 0x82
    c18e:	005b      	lsls	r3, r3, #1
    c190:	2100      	movs	r1, #0
    c192:	50d1      	str	r1, [r2, r3]
}
    c194:	46c0      	nop			; (mov r8, r8)
    c196:	46bd      	mov	sp, r7
    c198:	b002      	add	sp, #8
    c19a:	bd80      	pop	{r7, pc}

0000c19c <_ZN11RingBufferNILi256EE10store_charEh>:
void RingBufferN<N>::store_char( uint8_t c )
    c19c:	b580      	push	{r7, lr}
    c19e:	b084      	sub	sp, #16
    c1a0:	af00      	add	r7, sp, #0
    c1a2:	6078      	str	r0, [r7, #4]
    c1a4:	000a      	movs	r2, r1
    c1a6:	1cfb      	adds	r3, r7, #3
    c1a8:	701a      	strb	r2, [r3, #0]
  int i = nextIndex(_iHead);
    c1aa:	687a      	ldr	r2, [r7, #4]
    c1ac:	2380      	movs	r3, #128	; 0x80
    c1ae:	005b      	lsls	r3, r3, #1
    c1b0:	58d2      	ldr	r2, [r2, r3]
    c1b2:	687b      	ldr	r3, [r7, #4]
    c1b4:	0011      	movs	r1, r2
    c1b6:	0018      	movs	r0, r3
    c1b8:	f000 f8a4 	bl	c304 <_ZN11RingBufferNILi256EE9nextIndexEi>
    c1bc:	0003      	movs	r3, r0
    c1be:	60fb      	str	r3, [r7, #12]
  if ( i != _iTail )
    c1c0:	687a      	ldr	r2, [r7, #4]
    c1c2:	2382      	movs	r3, #130	; 0x82
    c1c4:	005b      	lsls	r3, r3, #1
    c1c6:	58d2      	ldr	r2, [r2, r3]
    c1c8:	68fb      	ldr	r3, [r7, #12]
    c1ca:	1ad3      	subs	r3, r2, r3
    c1cc:	1e5a      	subs	r2, r3, #1
    c1ce:	4193      	sbcs	r3, r2
    c1d0:	b2db      	uxtb	r3, r3
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	d00c      	beq.n	c1f0 <_ZN11RingBufferNILi256EE10store_charEh+0x54>
    _aucBuffer[_iHead] = c ;
    c1d6:	687a      	ldr	r2, [r7, #4]
    c1d8:	2380      	movs	r3, #128	; 0x80
    c1da:	005b      	lsls	r3, r3, #1
    c1dc:	58d3      	ldr	r3, [r2, r3]
    c1de:	687a      	ldr	r2, [r7, #4]
    c1e0:	1cf9      	adds	r1, r7, #3
    c1e2:	7809      	ldrb	r1, [r1, #0]
    c1e4:	54d1      	strb	r1, [r2, r3]
    _iHead = i ;
    c1e6:	687a      	ldr	r2, [r7, #4]
    c1e8:	2380      	movs	r3, #128	; 0x80
    c1ea:	005b      	lsls	r3, r3, #1
    c1ec:	68f9      	ldr	r1, [r7, #12]
    c1ee:	50d1      	str	r1, [r2, r3]
}
    c1f0:	46c0      	nop			; (mov r8, r8)
    c1f2:	46bd      	mov	sp, r7
    c1f4:	b004      	add	sp, #16
    c1f6:	bd80      	pop	{r7, pc}

0000c1f8 <_ZN11RingBufferNILi256EE9availableEv>:
int RingBufferN<N>::available()
    c1f8:	b580      	push	{r7, lr}
    c1fa:	b084      	sub	sp, #16
    c1fc:	af00      	add	r7, sp, #0
    c1fe:	6078      	str	r0, [r7, #4]
  int delta = _iHead - _iTail;
    c200:	687a      	ldr	r2, [r7, #4]
    c202:	2380      	movs	r3, #128	; 0x80
    c204:	005b      	lsls	r3, r3, #1
    c206:	58d2      	ldr	r2, [r2, r3]
    c208:	6879      	ldr	r1, [r7, #4]
    c20a:	2382      	movs	r3, #130	; 0x82
    c20c:	005b      	lsls	r3, r3, #1
    c20e:	58cb      	ldr	r3, [r1, r3]
    c210:	1ad3      	subs	r3, r2, r3
    c212:	60fb      	str	r3, [r7, #12]
  if(delta < 0)
    c214:	68fb      	ldr	r3, [r7, #12]
    c216:	2b00      	cmp	r3, #0
    c218:	da03      	bge.n	c222 <_ZN11RingBufferNILi256EE9availableEv+0x2a>
    return N + delta;
    c21a:	68fb      	ldr	r3, [r7, #12]
    c21c:	3301      	adds	r3, #1
    c21e:	33ff      	adds	r3, #255	; 0xff
    c220:	e000      	b.n	c224 <_ZN11RingBufferNILi256EE9availableEv+0x2c>
    return delta;
    c222:	68fb      	ldr	r3, [r7, #12]
}
    c224:	0018      	movs	r0, r3
    c226:	46bd      	mov	sp, r7
    c228:	b004      	add	sp, #16
    c22a:	bd80      	pop	{r7, pc}

0000c22c <_ZN11RingBufferNILi256EE9read_charEv>:
int RingBufferN<N>::read_char()
    c22c:	b580      	push	{r7, lr}
    c22e:	b084      	sub	sp, #16
    c230:	af00      	add	r7, sp, #0
    c232:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    c234:	687a      	ldr	r2, [r7, #4]
    c236:	2382      	movs	r3, #130	; 0x82
    c238:	005b      	lsls	r3, r3, #1
    c23a:	58d2      	ldr	r2, [r2, r3]
    c23c:	6879      	ldr	r1, [r7, #4]
    c23e:	2380      	movs	r3, #128	; 0x80
    c240:	005b      	lsls	r3, r3, #1
    c242:	58cb      	ldr	r3, [r1, r3]
    c244:	1ad3      	subs	r3, r2, r3
    c246:	425a      	negs	r2, r3
    c248:	4153      	adcs	r3, r2
    c24a:	b2db      	uxtb	r3, r3
    c24c:	2b00      	cmp	r3, #0
    c24e:	d002      	beq.n	c256 <_ZN11RingBufferNILi256EE9read_charEv+0x2a>
    return -1;
    c250:	2301      	movs	r3, #1
    c252:	425b      	negs	r3, r3
    c254:	e019      	b.n	c28a <_ZN11RingBufferNILi256EE9read_charEv+0x5e>
  uint8_t value = _aucBuffer[_iTail];
    c256:	687a      	ldr	r2, [r7, #4]
    c258:	2382      	movs	r3, #130	; 0x82
    c25a:	005b      	lsls	r3, r3, #1
    c25c:	58d2      	ldr	r2, [r2, r3]
    c25e:	230f      	movs	r3, #15
    c260:	18fb      	adds	r3, r7, r3
    c262:	6879      	ldr	r1, [r7, #4]
    c264:	5c8a      	ldrb	r2, [r1, r2]
    c266:	701a      	strb	r2, [r3, #0]
  _iTail = nextIndex(_iTail);
    c268:	687a      	ldr	r2, [r7, #4]
    c26a:	2382      	movs	r3, #130	; 0x82
    c26c:	005b      	lsls	r3, r3, #1
    c26e:	58d2      	ldr	r2, [r2, r3]
    c270:	687b      	ldr	r3, [r7, #4]
    c272:	0011      	movs	r1, r2
    c274:	0018      	movs	r0, r3
    c276:	f000 f845 	bl	c304 <_ZN11RingBufferNILi256EE9nextIndexEi>
    c27a:	0001      	movs	r1, r0
    c27c:	687a      	ldr	r2, [r7, #4]
    c27e:	2382      	movs	r3, #130	; 0x82
    c280:	005b      	lsls	r3, r3, #1
    c282:	50d1      	str	r1, [r2, r3]
  return value;
    c284:	230f      	movs	r3, #15
    c286:	18fb      	adds	r3, r7, r3
    c288:	781b      	ldrb	r3, [r3, #0]
}
    c28a:	0018      	movs	r0, r3
    c28c:	46bd      	mov	sp, r7
    c28e:	b004      	add	sp, #16
    c290:	bd80      	pop	{r7, pc}

0000c292 <_ZN11RingBufferNILi256EE6isFullEv>:
bool RingBufferN<N>::isFull()
    c292:	b580      	push	{r7, lr}
    c294:	b082      	sub	sp, #8
    c296:	af00      	add	r7, sp, #0
    c298:	6078      	str	r0, [r7, #4]
  return (nextIndex(_iHead) == _iTail);
    c29a:	687a      	ldr	r2, [r7, #4]
    c29c:	2380      	movs	r3, #128	; 0x80
    c29e:	005b      	lsls	r3, r3, #1
    c2a0:	58d2      	ldr	r2, [r2, r3]
    c2a2:	687b      	ldr	r3, [r7, #4]
    c2a4:	0011      	movs	r1, r2
    c2a6:	0018      	movs	r0, r3
    c2a8:	f000 f82c 	bl	c304 <_ZN11RingBufferNILi256EE9nextIndexEi>
    c2ac:	0001      	movs	r1, r0
    c2ae:	687a      	ldr	r2, [r7, #4]
    c2b0:	2382      	movs	r3, #130	; 0x82
    c2b2:	005b      	lsls	r3, r3, #1
    c2b4:	58d3      	ldr	r3, [r2, r3]
    c2b6:	1acb      	subs	r3, r1, r3
    c2b8:	425a      	negs	r2, r3
    c2ba:	4153      	adcs	r3, r2
    c2bc:	b2db      	uxtb	r3, r3
}
    c2be:	0018      	movs	r0, r3
    c2c0:	46bd      	mov	sp, r7
    c2c2:	b002      	add	sp, #8
    c2c4:	bd80      	pop	{r7, pc}

0000c2c6 <_ZN11RingBufferNILi256EE4peekEv>:
int RingBufferN<N>::peek()
    c2c6:	b580      	push	{r7, lr}
    c2c8:	b082      	sub	sp, #8
    c2ca:	af00      	add	r7, sp, #0
    c2cc:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    c2ce:	687a      	ldr	r2, [r7, #4]
    c2d0:	2382      	movs	r3, #130	; 0x82
    c2d2:	005b      	lsls	r3, r3, #1
    c2d4:	58d2      	ldr	r2, [r2, r3]
    c2d6:	6879      	ldr	r1, [r7, #4]
    c2d8:	2380      	movs	r3, #128	; 0x80
    c2da:	005b      	lsls	r3, r3, #1
    c2dc:	58cb      	ldr	r3, [r1, r3]
    c2de:	1ad3      	subs	r3, r2, r3
    c2e0:	425a      	negs	r2, r3
    c2e2:	4153      	adcs	r3, r2
    c2e4:	b2db      	uxtb	r3, r3
    c2e6:	2b00      	cmp	r3, #0
    c2e8:	d002      	beq.n	c2f0 <_ZN11RingBufferNILi256EE4peekEv+0x2a>
    return -1;
    c2ea:	2301      	movs	r3, #1
    c2ec:	425b      	negs	r3, r3
    c2ee:	e005      	b.n	c2fc <_ZN11RingBufferNILi256EE4peekEv+0x36>
  return _aucBuffer[_iTail];
    c2f0:	687a      	ldr	r2, [r7, #4]
    c2f2:	2382      	movs	r3, #130	; 0x82
    c2f4:	005b      	lsls	r3, r3, #1
    c2f6:	58d3      	ldr	r3, [r2, r3]
    c2f8:	687a      	ldr	r2, [r7, #4]
    c2fa:	5cd3      	ldrb	r3, [r2, r3]
}
    c2fc:	0018      	movs	r0, r3
    c2fe:	46bd      	mov	sp, r7
    c300:	b002      	add	sp, #8
    c302:	bd80      	pop	{r7, pc}

0000c304 <_ZN11RingBufferNILi256EE9nextIndexEi>:
int RingBufferN<N>::nextIndex(int index)
    c304:	b580      	push	{r7, lr}
    c306:	b082      	sub	sp, #8
    c308:	af00      	add	r7, sp, #0
    c30a:	6078      	str	r0, [r7, #4]
    c30c:	6039      	str	r1, [r7, #0]
  return (uint32_t)(index + 1) % N;
    c30e:	683b      	ldr	r3, [r7, #0]
    c310:	3301      	adds	r3, #1
    c312:	22ff      	movs	r2, #255	; 0xff
    c314:	4013      	ands	r3, r2
}
    c316:	0018      	movs	r0, r3
    c318:	46bd      	mov	sp, r7
    c31a:	b002      	add	sp, #8
    c31c:	bd80      	pop	{r7, pc}
	...

0000c320 <_Z41__static_initialization_and_destruction_0ii>:
    c320:	b580      	push	{r7, lr}
    c322:	b082      	sub	sp, #8
    c324:	af00      	add	r7, sp, #0
    c326:	6078      	str	r0, [r7, #4]
    c328:	6039      	str	r1, [r7, #0]
    c32a:	687b      	ldr	r3, [r7, #4]
    c32c:	2b01      	cmp	r3, #1
    c32e:	d109      	bne.n	c344 <_Z41__static_initialization_and_destruction_0ii+0x24>
    c330:	683b      	ldr	r3, [r7, #0]
    c332:	4a06      	ldr	r2, [pc, #24]	; (c34c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    c334:	4293      	cmp	r3, r2
    c336:	d105      	bne.n	c344 <_Z41__static_initialization_and_destruction_0ii+0x24>
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
    c338:	4905      	ldr	r1, [pc, #20]	; (c350 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    c33a:	4806      	ldr	r0, [pc, #24]	; (c354 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    c33c:	2311      	movs	r3, #17
    c33e:	2210      	movs	r2, #16
    c340:	f7ff fc1e 	bl	bb80 <_ZN7TwoWireC1EP6SERCOMhh>
  }
    c344:	46c0      	nop			; (mov r8, r8)
    c346:	46bd      	mov	sp, r7
    c348:	b002      	add	sp, #8
    c34a:	bd80      	pop	{r7, pc}
    c34c:	0000ffff 	.word	0x0000ffff
    c350:	20000dcc 	.word	0x20000dcc
    c354:	20000b8c 	.word	0x20000b8c

0000c358 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
    c358:	b580      	push	{r7, lr}
    c35a:	af00      	add	r7, sp, #0
    c35c:	4b03      	ldr	r3, [pc, #12]	; (c36c <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
    c35e:	0019      	movs	r1, r3
    c360:	2001      	movs	r0, #1
    c362:	f7ff ffdd 	bl	c320 <_Z41__static_initialization_and_destruction_0ii>
    c366:	46bd      	mov	sp, r7
    c368:	bd80      	pop	{r7, pc}
    c36a:	46c0      	nop			; (mov r8, r8)
    c36c:	0000ffff 	.word	0x0000ffff

0000c370 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    c370:	b580      	push	{r7, lr}
    c372:	af00      	add	r7, sp, #0
  Serial1.IrqHandler();
    c374:	4b03      	ldr	r3, [pc, #12]	; (c384 <SERCOM0_Handler+0x14>)
    c376:	0018      	movs	r0, r3
    c378:	f7f7 fc76 	bl	3c68 <_ZN4Uart10IrqHandlerEv>
}
    c37c:	46c0      	nop			; (mov r8, r8)
    c37e:	46bd      	mov	sp, r7
    c380:	bd80      	pop	{r7, pc}
    c382:	46c0      	nop			; (mov r8, r8)
    c384:	20000dd8 	.word	0x20000dd8

0000c388 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    c388:	b580      	push	{r7, lr}
    c38a:	af00      	add	r7, sp, #0
  Serial.IrqHandler();
    c38c:	4b03      	ldr	r3, [pc, #12]	; (c39c <SERCOM5_Handler+0x14>)
    c38e:	0018      	movs	r0, r3
    c390:	f7f7 fc6a 	bl	3c68 <_ZN4Uart10IrqHandlerEv>
}
    c394:	46c0      	nop			; (mov r8, r8)
    c396:	46bd      	mov	sp, r7
    c398:	bd80      	pop	{r7, pc}
    c39a:	46c0      	nop			; (mov r8, r8)
    c39c:	20000e94 	.word	0x20000e94

0000c3a0 <_Z41__static_initialization_and_destruction_0ii>:
    c3a0:	b580      	push	{r7, lr}
    c3a2:	b084      	sub	sp, #16
    c3a4:	af02      	add	r7, sp, #8
    c3a6:	6078      	str	r0, [r7, #4]
    c3a8:	6039      	str	r1, [r7, #0]
    c3aa:	687b      	ldr	r3, [r7, #4]
    c3ac:	2b01      	cmp	r3, #1
    c3ae:	d147      	bne.n	c440 <_Z41__static_initialization_and_destruction_0ii+0xa0>
    c3b0:	683b      	ldr	r3, [r7, #0]
    c3b2:	4a25      	ldr	r2, [pc, #148]	; (c448 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    c3b4:	4293      	cmp	r3, r2
    c3b6:	d143      	bne.n	c440 <_Z41__static_initialization_and_destruction_0ii+0xa0>
SERCOM sercom0( SERCOM0 ) ;
    c3b8:	4a24      	ldr	r2, [pc, #144]	; (c44c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    c3ba:	4b25      	ldr	r3, [pc, #148]	; (c450 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    c3bc:	0011      	movs	r1, r2
    c3be:	0018      	movs	r0, r3
    c3c0:	f001 fb32 	bl	da28 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    c3c4:	4a23      	ldr	r2, [pc, #140]	; (c454 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    c3c6:	4b24      	ldr	r3, [pc, #144]	; (c458 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    c3c8:	0011      	movs	r1, r2
    c3ca:	0018      	movs	r0, r3
    c3cc:	f001 fb2c 	bl	da28 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    c3d0:	4a22      	ldr	r2, [pc, #136]	; (c45c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    c3d2:	4b23      	ldr	r3, [pc, #140]	; (c460 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    c3d4:	0011      	movs	r1, r2
    c3d6:	0018      	movs	r0, r3
    c3d8:	f001 fb26 	bl	da28 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    c3dc:	4a21      	ldr	r2, [pc, #132]	; (c464 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    c3de:	4b22      	ldr	r3, [pc, #136]	; (c468 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    c3e0:	0011      	movs	r1, r2
    c3e2:	0018      	movs	r0, r3
    c3e4:	f001 fb20 	bl	da28 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    c3e8:	4a20      	ldr	r2, [pc, #128]	; (c46c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    c3ea:	4b21      	ldr	r3, [pc, #132]	; (c470 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    c3ec:	0011      	movs	r1, r2
    c3ee:	0018      	movs	r0, r3
    c3f0:	f001 fb1a 	bl	da28 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    c3f4:	4a1f      	ldr	r2, [pc, #124]	; (c474 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    c3f6:	4b20      	ldr	r3, [pc, #128]	; (c478 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    c3f8:	0011      	movs	r1, r2
    c3fa:	0018      	movs	r0, r3
    c3fc:	f001 fb14 	bl	da28 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    c400:	4913      	ldr	r1, [pc, #76]	; (c450 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    c402:	481e      	ldr	r0, [pc, #120]	; (c47c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    c404:	2301      	movs	r3, #1
    c406:	9301      	str	r3, [sp, #4]
    c408:	2303      	movs	r3, #3
    c40a:	9300      	str	r3, [sp, #0]
    c40c:	2301      	movs	r3, #1
    c40e:	2200      	movs	r2, #0
    c410:	f7f7 faa3 	bl	395a <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    c414:	4a1a      	ldr	r2, [pc, #104]	; (c480 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    c416:	491b      	ldr	r1, [pc, #108]	; (c484 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    c418:	4b18      	ldr	r3, [pc, #96]	; (c47c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    c41a:	0018      	movs	r0, r3
    c41c:	f002 fb36 	bl	ea8c <__aeabi_atexit>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    c420:	4915      	ldr	r1, [pc, #84]	; (c478 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    c422:	4819      	ldr	r0, [pc, #100]	; (c488 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    c424:	2301      	movs	r3, #1
    c426:	9301      	str	r3, [sp, #4]
    c428:	2303      	movs	r3, #3
    c42a:	9300      	str	r3, [sp, #0]
    c42c:	2323      	movs	r3, #35	; 0x23
    c42e:	2224      	movs	r2, #36	; 0x24
    c430:	f7f7 fa93 	bl	395a <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    c434:	4a12      	ldr	r2, [pc, #72]	; (c480 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    c436:	4913      	ldr	r1, [pc, #76]	; (c484 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    c438:	4b13      	ldr	r3, [pc, #76]	; (c488 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    c43a:	0018      	movs	r0, r3
    c43c:	f002 fb26 	bl	ea8c <__aeabi_atexit>
}
    c440:	46c0      	nop			; (mov r8, r8)
    c442:	46bd      	mov	sp, r7
    c444:	b002      	add	sp, #8
    c446:	bd80      	pop	{r7, pc}
    c448:	0000ffff 	.word	0x0000ffff
    c44c:	42000800 	.word	0x42000800
    c450:	20000dc0 	.word	0x20000dc0
    c454:	42000c00 	.word	0x42000c00
    c458:	20000dc4 	.word	0x20000dc4
    c45c:	42001000 	.word	0x42001000
    c460:	20000dc8 	.word	0x20000dc8
    c464:	42001400 	.word	0x42001400
    c468:	20000dcc 	.word	0x20000dcc
    c46c:	42001800 	.word	0x42001800
    c470:	20000dd0 	.word	0x20000dd0
    c474:	42001c00 	.word	0x42001c00
    c478:	20000dd4 	.word	0x20000dd4
    c47c:	20000dd8 	.word	0x20000dd8
    c480:	20000000 	.word	0x20000000
    c484:	00004145 	.word	0x00004145
    c488:	20000e94 	.word	0x20000e94

0000c48c <_GLOBAL__sub_I_g_APinDescription>:
    c48c:	b580      	push	{r7, lr}
    c48e:	af00      	add	r7, sp, #0
    c490:	4b03      	ldr	r3, [pc, #12]	; (c4a0 <_GLOBAL__sub_I_g_APinDescription+0x14>)
    c492:	0019      	movs	r1, r3
    c494:	2001      	movs	r0, #1
    c496:	f7ff ff83 	bl	c3a0 <_Z41__static_initialization_and_destruction_0ii>
    c49a:	46bd      	mov	sp, r7
    c49c:	bd80      	pop	{r7, pc}
    c49e:	46c0      	nop			; (mov r8, r8)
    c4a0:	0000ffff 	.word	0x0000ffff

0000c4a4 <_ZN12Adafruit_GFXC1Ess>:

#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
    c4a4:	b580      	push	{r7, lr}
    c4a6:	b082      	sub	sp, #8
    c4a8:	af00      	add	r7, sp, #0
    c4aa:	6078      	str	r0, [r7, #4]
    c4ac:	0008      	movs	r0, r1
    c4ae:	0011      	movs	r1, r2
    c4b0:	1cbb      	adds	r3, r7, #2
    c4b2:	1c02      	adds	r2, r0, #0
    c4b4:	801a      	strh	r2, [r3, #0]
    c4b6:	003b      	movs	r3, r7
    c4b8:	1c0a      	adds	r2, r1, #0
    c4ba:	801a      	strh	r2, [r3, #0]
WIDTH(w), HEIGHT(h)
    c4bc:	687b      	ldr	r3, [r7, #4]
    c4be:	0018      	movs	r0, r3
    c4c0:	f7f7 f98e 	bl	37e0 <_ZN5PrintC1Ev>
    c4c4:	4a1c      	ldr	r2, [pc, #112]	; (c538 <_ZN12Adafruit_GFXC1Ess+0x94>)
    c4c6:	687b      	ldr	r3, [r7, #4]
    c4c8:	601a      	str	r2, [r3, #0]
    c4ca:	687b      	ldr	r3, [r7, #4]
    c4cc:	1cba      	adds	r2, r7, #2
    c4ce:	8812      	ldrh	r2, [r2, #0]
    c4d0:	811a      	strh	r2, [r3, #8]
    c4d2:	687b      	ldr	r3, [r7, #4]
    c4d4:	003a      	movs	r2, r7
    c4d6:	8812      	ldrh	r2, [r2, #0]
    c4d8:	815a      	strh	r2, [r3, #10]
{
    _width    = WIDTH;
    c4da:	687b      	ldr	r3, [r7, #4]
    c4dc:	2208      	movs	r2, #8
    c4de:	5e9a      	ldrsh	r2, [r3, r2]
    c4e0:	687b      	ldr	r3, [r7, #4]
    c4e2:	819a      	strh	r2, [r3, #12]
    _height   = HEIGHT;
    c4e4:	687b      	ldr	r3, [r7, #4]
    c4e6:	220a      	movs	r2, #10
    c4e8:	5e9a      	ldrsh	r2, [r3, r2]
    c4ea:	687b      	ldr	r3, [r7, #4]
    c4ec:	81da      	strh	r2, [r3, #14]
    rotation  = 0;
    c4ee:	687b      	ldr	r3, [r7, #4]
    c4f0:	2200      	movs	r2, #0
    c4f2:	765a      	strb	r2, [r3, #25]
    cursor_y  = cursor_x    = 0;
    c4f4:	687b      	ldr	r3, [r7, #4]
    c4f6:	2200      	movs	r2, #0
    c4f8:	821a      	strh	r2, [r3, #16]
    c4fa:	687b      	ldr	r3, [r7, #4]
    c4fc:	2210      	movs	r2, #16
    c4fe:	5e9a      	ldrsh	r2, [r3, r2]
    c500:	687b      	ldr	r3, [r7, #4]
    c502:	825a      	strh	r2, [r3, #18]
    textsize  = 1;
    c504:	687b      	ldr	r3, [r7, #4]
    c506:	2201      	movs	r2, #1
    c508:	761a      	strb	r2, [r3, #24]
    textcolor = textbgcolor = 0xFFFF;
    c50a:	687b      	ldr	r3, [r7, #4]
    c50c:	2201      	movs	r2, #1
    c50e:	4252      	negs	r2, r2
    c510:	82da      	strh	r2, [r3, #22]
    c512:	687b      	ldr	r3, [r7, #4]
    c514:	8ada      	ldrh	r2, [r3, #22]
    c516:	687b      	ldr	r3, [r7, #4]
    c518:	829a      	strh	r2, [r3, #20]
    wrap      = true;
    c51a:	687b      	ldr	r3, [r7, #4]
    c51c:	2201      	movs	r2, #1
    c51e:	769a      	strb	r2, [r3, #26]
    _cp437    = false;
    c520:	687b      	ldr	r3, [r7, #4]
    c522:	2200      	movs	r2, #0
    c524:	76da      	strb	r2, [r3, #27]
    gfxFont   = NULL;
    c526:	687b      	ldr	r3, [r7, #4]
    c528:	2200      	movs	r2, #0
    c52a:	61da      	str	r2, [r3, #28]
}
    c52c:	687b      	ldr	r3, [r7, #4]
    c52e:	0018      	movs	r0, r3
    c530:	46bd      	mov	sp, r7
    c532:	b002      	add	sp, #8
    c534:	bd80      	pop	{r7, pc}
    c536:	46c0      	nop			; (mov r8, r8)
    c538:	00014254 	.word	0x00014254

0000c53c <_ZN12Adafruit_GFX9writeLineEsssst>:

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    c53c:	b5b0      	push	{r4, r5, r7, lr}
    c53e:	b08a      	sub	sp, #40	; 0x28
    c540:	af00      	add	r7, sp, #0
    c542:	60f8      	str	r0, [r7, #12]
    c544:	000c      	movs	r4, r1
    c546:	0010      	movs	r0, r2
    c548:	0019      	movs	r1, r3
    c54a:	230a      	movs	r3, #10
    c54c:	18fb      	adds	r3, r7, r3
    c54e:	1c22      	adds	r2, r4, #0
    c550:	801a      	strh	r2, [r3, #0]
    c552:	2308      	movs	r3, #8
    c554:	18fb      	adds	r3, r7, r3
    c556:	1c02      	adds	r2, r0, #0
    c558:	801a      	strh	r2, [r3, #0]
    c55a:	1dbb      	adds	r3, r7, #6
    c55c:	1c0a      	adds	r2, r1, #0
    c55e:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    c560:	2338      	movs	r3, #56	; 0x38
    c562:	18fb      	adds	r3, r7, r3
    c564:	2200      	movs	r2, #0
    c566:	5e9a      	ldrsh	r2, [r3, r2]
    c568:	2308      	movs	r3, #8
    c56a:	18fb      	adds	r3, r7, r3
    c56c:	2100      	movs	r1, #0
    c56e:	5e5b      	ldrsh	r3, [r3, r1]
    c570:	1ad3      	subs	r3, r2, r3
    c572:	17d9      	asrs	r1, r3, #31
    c574:	185a      	adds	r2, r3, r1
    c576:	404a      	eors	r2, r1
    c578:	1dbb      	adds	r3, r7, #6
    c57a:	2100      	movs	r1, #0
    c57c:	5e59      	ldrsh	r1, [r3, r1]
    c57e:	230a      	movs	r3, #10
    c580:	18fb      	adds	r3, r7, r3
    c582:	2000      	movs	r0, #0
    c584:	5e1b      	ldrsh	r3, [r3, r0]
    c586:	1acb      	subs	r3, r1, r3
    c588:	17d9      	asrs	r1, r3, #31
    c58a:	185b      	adds	r3, r3, r1
    c58c:	404b      	eors	r3, r1
    c58e:	2101      	movs	r1, #1
    c590:	429a      	cmp	r2, r3
    c592:	dc01      	bgt.n	c598 <_ZN12Adafruit_GFX9writeLineEsssst+0x5c>
    c594:	2300      	movs	r3, #0
    c596:	1c19      	adds	r1, r3, #0
    c598:	b2ca      	uxtb	r2, r1
    c59a:	2322      	movs	r3, #34	; 0x22
    c59c:	18fb      	adds	r3, r7, r3
    c59e:	801a      	strh	r2, [r3, #0]
    if (steep) {
    c5a0:	2322      	movs	r3, #34	; 0x22
    c5a2:	18fb      	adds	r3, r7, r3
    c5a4:	2200      	movs	r2, #0
    c5a6:	5e9b      	ldrsh	r3, [r3, r2]
    c5a8:	2b00      	cmp	r3, #0
    c5aa:	d021      	beq.n	c5f0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
        _swap_int16_t(x0, y0);
    c5ac:	2320      	movs	r3, #32
    c5ae:	18fb      	adds	r3, r7, r3
    c5b0:	220a      	movs	r2, #10
    c5b2:	18ba      	adds	r2, r7, r2
    c5b4:	8812      	ldrh	r2, [r2, #0]
    c5b6:	801a      	strh	r2, [r3, #0]
    c5b8:	230a      	movs	r3, #10
    c5ba:	18fb      	adds	r3, r7, r3
    c5bc:	2208      	movs	r2, #8
    c5be:	18ba      	adds	r2, r7, r2
    c5c0:	8812      	ldrh	r2, [r2, #0]
    c5c2:	801a      	strh	r2, [r3, #0]
    c5c4:	2308      	movs	r3, #8
    c5c6:	18fb      	adds	r3, r7, r3
    c5c8:	2220      	movs	r2, #32
    c5ca:	18ba      	adds	r2, r7, r2
    c5cc:	8812      	ldrh	r2, [r2, #0]
    c5ce:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
    c5d0:	231e      	movs	r3, #30
    c5d2:	18fb      	adds	r3, r7, r3
    c5d4:	1dba      	adds	r2, r7, #6
    c5d6:	8812      	ldrh	r2, [r2, #0]
    c5d8:	801a      	strh	r2, [r3, #0]
    c5da:	1dbb      	adds	r3, r7, #6
    c5dc:	2238      	movs	r2, #56	; 0x38
    c5de:	18ba      	adds	r2, r7, r2
    c5e0:	8812      	ldrh	r2, [r2, #0]
    c5e2:	801a      	strh	r2, [r3, #0]
    c5e4:	2338      	movs	r3, #56	; 0x38
    c5e6:	18fa      	adds	r2, r7, r3
    c5e8:	231e      	movs	r3, #30
    c5ea:	18fb      	adds	r3, r7, r3
    c5ec:	881b      	ldrh	r3, [r3, #0]
    c5ee:	8013      	strh	r3, [r2, #0]
    }

    if (x0 > x1) {
    c5f0:	230a      	movs	r3, #10
    c5f2:	18fa      	adds	r2, r7, r3
    c5f4:	1dbb      	adds	r3, r7, #6
    c5f6:	2100      	movs	r1, #0
    c5f8:	5e52      	ldrsh	r2, [r2, r1]
    c5fa:	2100      	movs	r1, #0
    c5fc:	5e5b      	ldrsh	r3, [r3, r1]
    c5fe:	429a      	cmp	r2, r3
    c600:	dd21      	ble.n	c646 <_ZN12Adafruit_GFX9writeLineEsssst+0x10a>
        _swap_int16_t(x0, x1);
    c602:	231c      	movs	r3, #28
    c604:	18fb      	adds	r3, r7, r3
    c606:	220a      	movs	r2, #10
    c608:	18ba      	adds	r2, r7, r2
    c60a:	8812      	ldrh	r2, [r2, #0]
    c60c:	801a      	strh	r2, [r3, #0]
    c60e:	230a      	movs	r3, #10
    c610:	18fb      	adds	r3, r7, r3
    c612:	1dba      	adds	r2, r7, #6
    c614:	8812      	ldrh	r2, [r2, #0]
    c616:	801a      	strh	r2, [r3, #0]
    c618:	1dbb      	adds	r3, r7, #6
    c61a:	221c      	movs	r2, #28
    c61c:	18ba      	adds	r2, r7, r2
    c61e:	8812      	ldrh	r2, [r2, #0]
    c620:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
    c622:	231a      	movs	r3, #26
    c624:	18fb      	adds	r3, r7, r3
    c626:	2208      	movs	r2, #8
    c628:	18ba      	adds	r2, r7, r2
    c62a:	8812      	ldrh	r2, [r2, #0]
    c62c:	801a      	strh	r2, [r3, #0]
    c62e:	2308      	movs	r3, #8
    c630:	18fb      	adds	r3, r7, r3
    c632:	2238      	movs	r2, #56	; 0x38
    c634:	18ba      	adds	r2, r7, r2
    c636:	8812      	ldrh	r2, [r2, #0]
    c638:	801a      	strh	r2, [r3, #0]
    c63a:	2338      	movs	r3, #56	; 0x38
    c63c:	18fa      	adds	r2, r7, r3
    c63e:	231a      	movs	r3, #26
    c640:	18fb      	adds	r3, r7, r3
    c642:	881b      	ldrh	r3, [r3, #0]
    c644:	8013      	strh	r3, [r2, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
    c646:	1dbb      	adds	r3, r7, #6
    c648:	881a      	ldrh	r2, [r3, #0]
    c64a:	230a      	movs	r3, #10
    c64c:	18fb      	adds	r3, r7, r3
    c64e:	881b      	ldrh	r3, [r3, #0]
    c650:	1ad3      	subs	r3, r2, r3
    c652:	b29a      	uxth	r2, r3
    c654:	2318      	movs	r3, #24
    c656:	18fb      	adds	r3, r7, r3
    c658:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
    c65a:	2338      	movs	r3, #56	; 0x38
    c65c:	18fb      	adds	r3, r7, r3
    c65e:	2200      	movs	r2, #0
    c660:	5e9a      	ldrsh	r2, [r3, r2]
    c662:	2308      	movs	r3, #8
    c664:	18fb      	adds	r3, r7, r3
    c666:	2100      	movs	r1, #0
    c668:	5e5b      	ldrsh	r3, [r3, r1]
    c66a:	1ad3      	subs	r3, r2, r3
    c66c:	17d9      	asrs	r1, r3, #31
    c66e:	185a      	adds	r2, r3, r1
    c670:	404a      	eors	r2, r1
    c672:	2316      	movs	r3, #22
    c674:	18fb      	adds	r3, r7, r3
    c676:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
    c678:	2326      	movs	r3, #38	; 0x26
    c67a:	18fa      	adds	r2, r7, r3
    c67c:	2318      	movs	r3, #24
    c67e:	18fb      	adds	r3, r7, r3
    c680:	2100      	movs	r1, #0
    c682:	5e5b      	ldrsh	r3, [r3, r1]
    c684:	2b00      	cmp	r3, #0
    c686:	da00      	bge.n	c68a <_ZN12Adafruit_GFX9writeLineEsssst+0x14e>
    c688:	3301      	adds	r3, #1
    c68a:	105b      	asrs	r3, r3, #1
    c68c:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
    c68e:	2308      	movs	r3, #8
    c690:	18fb      	adds	r3, r7, r3
    c692:	2238      	movs	r2, #56	; 0x38
    c694:	18b9      	adds	r1, r7, r2
    c696:	2200      	movs	r2, #0
    c698:	5e9a      	ldrsh	r2, [r3, r2]
    c69a:	2300      	movs	r3, #0
    c69c:	5ecb      	ldrsh	r3, [r1, r3]
    c69e:	429a      	cmp	r2, r3
    c6a0:	da04      	bge.n	c6ac <_ZN12Adafruit_GFX9writeLineEsssst+0x170>
        ystep = 1;
    c6a2:	2324      	movs	r3, #36	; 0x24
    c6a4:	18fb      	adds	r3, r7, r3
    c6a6:	2201      	movs	r2, #1
    c6a8:	801a      	strh	r2, [r3, #0]
    c6aa:	e004      	b.n	c6b6 <_ZN12Adafruit_GFX9writeLineEsssst+0x17a>
    } else {
        ystep = -1;
    c6ac:	2324      	movs	r3, #36	; 0x24
    c6ae:	18fb      	adds	r3, r7, r3
    c6b0:	2201      	movs	r2, #1
    c6b2:	4252      	negs	r2, r2
    c6b4:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
    c6b6:	230a      	movs	r3, #10
    c6b8:	18fa      	adds	r2, r7, r3
    c6ba:	1dbb      	adds	r3, r7, #6
    c6bc:	2100      	movs	r1, #0
    c6be:	5e52      	ldrsh	r2, [r2, r1]
    c6c0:	2100      	movs	r1, #0
    c6c2:	5e5b      	ldrsh	r3, [r3, r1]
    c6c4:	429a      	cmp	r2, r3
    c6c6:	dc62      	bgt.n	c78e <_ZN12Adafruit_GFX9writeLineEsssst+0x252>
        if (steep) {
    c6c8:	2322      	movs	r3, #34	; 0x22
    c6ca:	18fb      	adds	r3, r7, r3
    c6cc:	2200      	movs	r2, #0
    c6ce:	5e9b      	ldrsh	r3, [r3, r2]
    c6d0:	2b00      	cmp	r3, #0
    c6d2:	d012      	beq.n	c6fa <_ZN12Adafruit_GFX9writeLineEsssst+0x1be>
            writePixel(y0, x0, color);
    c6d4:	68fb      	ldr	r3, [r7, #12]
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	3318      	adds	r3, #24
    c6da:	681c      	ldr	r4, [r3, #0]
    c6dc:	233c      	movs	r3, #60	; 0x3c
    c6de:	18fb      	adds	r3, r7, r3
    c6e0:	881d      	ldrh	r5, [r3, #0]
    c6e2:	230a      	movs	r3, #10
    c6e4:	18fb      	adds	r3, r7, r3
    c6e6:	2200      	movs	r2, #0
    c6e8:	5e9a      	ldrsh	r2, [r3, r2]
    c6ea:	2308      	movs	r3, #8
    c6ec:	18fb      	adds	r3, r7, r3
    c6ee:	2100      	movs	r1, #0
    c6f0:	5e59      	ldrsh	r1, [r3, r1]
    c6f2:	68f8      	ldr	r0, [r7, #12]
    c6f4:	002b      	movs	r3, r5
    c6f6:	47a0      	blx	r4
    c6f8:	e011      	b.n	c71e <_ZN12Adafruit_GFX9writeLineEsssst+0x1e2>
        } else {
            writePixel(x0, y0, color);
    c6fa:	68fb      	ldr	r3, [r7, #12]
    c6fc:	681b      	ldr	r3, [r3, #0]
    c6fe:	3318      	adds	r3, #24
    c700:	681c      	ldr	r4, [r3, #0]
    c702:	233c      	movs	r3, #60	; 0x3c
    c704:	18fb      	adds	r3, r7, r3
    c706:	881d      	ldrh	r5, [r3, #0]
    c708:	2308      	movs	r3, #8
    c70a:	18fb      	adds	r3, r7, r3
    c70c:	2200      	movs	r2, #0
    c70e:	5e9a      	ldrsh	r2, [r3, r2]
    c710:	230a      	movs	r3, #10
    c712:	18fb      	adds	r3, r7, r3
    c714:	2100      	movs	r1, #0
    c716:	5e59      	ldrsh	r1, [r3, r1]
    c718:	68f8      	ldr	r0, [r7, #12]
    c71a:	002b      	movs	r3, r5
    c71c:	47a0      	blx	r4
        }
        err -= dy;
    c71e:	2326      	movs	r3, #38	; 0x26
    c720:	18fb      	adds	r3, r7, r3
    c722:	881a      	ldrh	r2, [r3, #0]
    c724:	2316      	movs	r3, #22
    c726:	18fb      	adds	r3, r7, r3
    c728:	881b      	ldrh	r3, [r3, #0]
    c72a:	1ad3      	subs	r3, r2, r3
    c72c:	b29a      	uxth	r2, r3
    c72e:	2326      	movs	r3, #38	; 0x26
    c730:	18fb      	adds	r3, r7, r3
    c732:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
    c734:	2326      	movs	r3, #38	; 0x26
    c736:	18fb      	adds	r3, r7, r3
    c738:	2200      	movs	r2, #0
    c73a:	5e9b      	ldrsh	r3, [r3, r2]
    c73c:	2b00      	cmp	r3, #0
    c73e:	da15      	bge.n	c76c <_ZN12Adafruit_GFX9writeLineEsssst+0x230>
            y0 += ystep;
    c740:	2308      	movs	r3, #8
    c742:	18fb      	adds	r3, r7, r3
    c744:	881a      	ldrh	r2, [r3, #0]
    c746:	2324      	movs	r3, #36	; 0x24
    c748:	18fb      	adds	r3, r7, r3
    c74a:	881b      	ldrh	r3, [r3, #0]
    c74c:	18d3      	adds	r3, r2, r3
    c74e:	b29a      	uxth	r2, r3
    c750:	2308      	movs	r3, #8
    c752:	18fb      	adds	r3, r7, r3
    c754:	801a      	strh	r2, [r3, #0]
            err += dx;
    c756:	2326      	movs	r3, #38	; 0x26
    c758:	18fb      	adds	r3, r7, r3
    c75a:	881a      	ldrh	r2, [r3, #0]
    c75c:	2318      	movs	r3, #24
    c75e:	18fb      	adds	r3, r7, r3
    c760:	881b      	ldrh	r3, [r3, #0]
    c762:	18d3      	adds	r3, r2, r3
    c764:	b29a      	uxth	r2, r3
    c766:	2326      	movs	r3, #38	; 0x26
    c768:	18fb      	adds	r3, r7, r3
    c76a:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
    c76c:	230a      	movs	r3, #10
    c76e:	18fb      	adds	r3, r7, r3
    c770:	2200      	movs	r2, #0
    c772:	5e9b      	ldrsh	r3, [r3, r2]
    c774:	b29b      	uxth	r3, r3
    c776:	3301      	adds	r3, #1
    c778:	b29a      	uxth	r2, r3
    c77a:	230a      	movs	r3, #10
    c77c:	18fb      	adds	r3, r7, r3
    c77e:	801a      	strh	r2, [r3, #0]
    c780:	2324      	movs	r3, #36	; 0x24
    c782:	18fb      	adds	r3, r7, r3
    c784:	2224      	movs	r2, #36	; 0x24
    c786:	18ba      	adds	r2, r7, r2
    c788:	8812      	ldrh	r2, [r2, #0]
    c78a:	801a      	strh	r2, [r3, #0]
    c78c:	e793      	b.n	c6b6 <_ZN12Adafruit_GFX9writeLineEsssst+0x17a>
        }
    }
}
    c78e:	46c0      	nop			; (mov r8, r8)
    c790:	46bd      	mov	sp, r7
    c792:	b00a      	add	sp, #40	; 0x28
    c794:	bdb0      	pop	{r4, r5, r7, pc}

0000c796 <_ZN12Adafruit_GFX10startWriteEv>:

void Adafruit_GFX::startWrite(){
    c796:	b580      	push	{r7, lr}
    c798:	b082      	sub	sp, #8
    c79a:	af00      	add	r7, sp, #0
    c79c:	6078      	str	r0, [r7, #4]
    // Overwrite in subclasses if desired!
}
    c79e:	46c0      	nop			; (mov r8, r8)
    c7a0:	46bd      	mov	sp, r7
    c7a2:	b002      	add	sp, #8
    c7a4:	bd80      	pop	{r7, pc}

0000c7a6 <_ZN12Adafruit_GFX10writePixelEsst>:

void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    c7a6:	b5b0      	push	{r4, r5, r7, lr}
    c7a8:	b084      	sub	sp, #16
    c7aa:	af00      	add	r7, sp, #0
    c7ac:	60f8      	str	r0, [r7, #12]
    c7ae:	000c      	movs	r4, r1
    c7b0:	0010      	movs	r0, r2
    c7b2:	0019      	movs	r1, r3
    c7b4:	230a      	movs	r3, #10
    c7b6:	18fb      	adds	r3, r7, r3
    c7b8:	1c22      	adds	r2, r4, #0
    c7ba:	801a      	strh	r2, [r3, #0]
    c7bc:	2308      	movs	r3, #8
    c7be:	18fb      	adds	r3, r7, r3
    c7c0:	1c02      	adds	r2, r0, #0
    c7c2:	801a      	strh	r2, [r3, #0]
    c7c4:	1dbb      	adds	r3, r7, #6
    c7c6:	1c0a      	adds	r2, r1, #0
    c7c8:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    c7ca:	68fb      	ldr	r3, [r7, #12]
    c7cc:	681b      	ldr	r3, [r3, #0]
    c7ce:	3310      	adds	r3, #16
    c7d0:	681c      	ldr	r4, [r3, #0]
    c7d2:	1dbb      	adds	r3, r7, #6
    c7d4:	881d      	ldrh	r5, [r3, #0]
    c7d6:	2308      	movs	r3, #8
    c7d8:	18fb      	adds	r3, r7, r3
    c7da:	2200      	movs	r2, #0
    c7dc:	5e9a      	ldrsh	r2, [r3, r2]
    c7de:	230a      	movs	r3, #10
    c7e0:	18fb      	adds	r3, r7, r3
    c7e2:	2100      	movs	r1, #0
    c7e4:	5e59      	ldrsh	r1, [r3, r1]
    c7e6:	68f8      	ldr	r0, [r7, #12]
    c7e8:	002b      	movs	r3, r5
    c7ea:	47a0      	blx	r4
}
    c7ec:	46c0      	nop			; (mov r8, r8)
    c7ee:	46bd      	mov	sp, r7
    c7f0:	b004      	add	sp, #16
    c7f2:	bdb0      	pop	{r4, r5, r7, pc}

0000c7f4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:

// (x,y) is topmost point; if unsure, calling function
// should sort endpoints or call writeLine() instead
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    c7f4:	b5b0      	push	{r4, r5, r7, lr}
    c7f6:	b086      	sub	sp, #24
    c7f8:	af02      	add	r7, sp, #8
    c7fa:	60f8      	str	r0, [r7, #12]
    c7fc:	000c      	movs	r4, r1
    c7fe:	0010      	movs	r0, r2
    c800:	0019      	movs	r1, r3
    c802:	230a      	movs	r3, #10
    c804:	18fb      	adds	r3, r7, r3
    c806:	1c22      	adds	r2, r4, #0
    c808:	801a      	strh	r2, [r3, #0]
    c80a:	2308      	movs	r3, #8
    c80c:	18fb      	adds	r3, r7, r3
    c80e:	1c02      	adds	r2, r0, #0
    c810:	801a      	strh	r2, [r3, #0]
    c812:	1dbb      	adds	r3, r7, #6
    c814:	1c0a      	adds	r2, r1, #0
    c816:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    c818:	68fb      	ldr	r3, [r7, #12]
    c81a:	681b      	ldr	r3, [r3, #0]
    c81c:	3338      	adds	r3, #56	; 0x38
    c81e:	681c      	ldr	r4, [r3, #0]
    c820:	1dbb      	adds	r3, r7, #6
    c822:	2500      	movs	r5, #0
    c824:	5f5d      	ldrsh	r5, [r3, r5]
    c826:	2308      	movs	r3, #8
    c828:	18fb      	adds	r3, r7, r3
    c82a:	2200      	movs	r2, #0
    c82c:	5e9a      	ldrsh	r2, [r3, r2]
    c82e:	230a      	movs	r3, #10
    c830:	18fb      	adds	r3, r7, r3
    c832:	2100      	movs	r1, #0
    c834:	5e59      	ldrsh	r1, [r3, r1]
    c836:	68f8      	ldr	r0, [r7, #12]
    c838:	2320      	movs	r3, #32
    c83a:	18fb      	adds	r3, r7, r3
    c83c:	881b      	ldrh	r3, [r3, #0]
    c83e:	9300      	str	r3, [sp, #0]
    c840:	002b      	movs	r3, r5
    c842:	47a0      	blx	r4
}
    c844:	46c0      	nop			; (mov r8, r8)
    c846:	46bd      	mov	sp, r7
    c848:	b004      	add	sp, #16
    c84a:	bdb0      	pop	{r4, r5, r7, pc}

0000c84c <_ZN12Adafruit_GFX14writeFastHLineEssst>:

// (x,y) is leftmost point; if unsure, calling function
// should sort endpoints or call writeLine() instead
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    c84c:	b5b0      	push	{r4, r5, r7, lr}
    c84e:	b086      	sub	sp, #24
    c850:	af02      	add	r7, sp, #8
    c852:	60f8      	str	r0, [r7, #12]
    c854:	000c      	movs	r4, r1
    c856:	0010      	movs	r0, r2
    c858:	0019      	movs	r1, r3
    c85a:	230a      	movs	r3, #10
    c85c:	18fb      	adds	r3, r7, r3
    c85e:	1c22      	adds	r2, r4, #0
    c860:	801a      	strh	r2, [r3, #0]
    c862:	2308      	movs	r3, #8
    c864:	18fb      	adds	r3, r7, r3
    c866:	1c02      	adds	r2, r0, #0
    c868:	801a      	strh	r2, [r3, #0]
    c86a:	1dbb      	adds	r3, r7, #6
    c86c:	1c0a      	adds	r2, r1, #0
    c86e:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    c870:	68fb      	ldr	r3, [r7, #12]
    c872:	681b      	ldr	r3, [r3, #0]
    c874:	333c      	adds	r3, #60	; 0x3c
    c876:	681c      	ldr	r4, [r3, #0]
    c878:	1dbb      	adds	r3, r7, #6
    c87a:	2500      	movs	r5, #0
    c87c:	5f5d      	ldrsh	r5, [r3, r5]
    c87e:	2308      	movs	r3, #8
    c880:	18fb      	adds	r3, r7, r3
    c882:	2200      	movs	r2, #0
    c884:	5e9a      	ldrsh	r2, [r3, r2]
    c886:	230a      	movs	r3, #10
    c888:	18fb      	adds	r3, r7, r3
    c88a:	2100      	movs	r1, #0
    c88c:	5e59      	ldrsh	r1, [r3, r1]
    c88e:	68f8      	ldr	r0, [r7, #12]
    c890:	2320      	movs	r3, #32
    c892:	18fb      	adds	r3, r7, r3
    c894:	881b      	ldrh	r3, [r3, #0]
    c896:	9300      	str	r3, [sp, #0]
    c898:	002b      	movs	r3, r5
    c89a:	47a0      	blx	r4
}
    c89c:	46c0      	nop			; (mov r8, r8)
    c89e:	46bd      	mov	sp, r7
    c8a0:	b004      	add	sp, #16
    c8a2:	bdb0      	pop	{r4, r5, r7, pc}

0000c8a4 <_ZN12Adafruit_GFX13writeFillRectEsssst>:

void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    c8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8a6:	b087      	sub	sp, #28
    c8a8:	af02      	add	r7, sp, #8
    c8aa:	60f8      	str	r0, [r7, #12]
    c8ac:	000c      	movs	r4, r1
    c8ae:	0010      	movs	r0, r2
    c8b0:	0019      	movs	r1, r3
    c8b2:	230a      	movs	r3, #10
    c8b4:	18fb      	adds	r3, r7, r3
    c8b6:	1c22      	adds	r2, r4, #0
    c8b8:	801a      	strh	r2, [r3, #0]
    c8ba:	2308      	movs	r3, #8
    c8bc:	18fb      	adds	r3, r7, r3
    c8be:	1c02      	adds	r2, r0, #0
    c8c0:	801a      	strh	r2, [r3, #0]
    c8c2:	1dbb      	adds	r3, r7, #6
    c8c4:	1c0a      	adds	r2, r1, #0
    c8c6:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    c8c8:	68fb      	ldr	r3, [r7, #12]
    c8ca:	681b      	ldr	r3, [r3, #0]
    c8cc:	3340      	adds	r3, #64	; 0x40
    c8ce:	681c      	ldr	r4, [r3, #0]
    c8d0:	1dbb      	adds	r3, r7, #6
    c8d2:	2500      	movs	r5, #0
    c8d4:	5f5d      	ldrsh	r5, [r3, r5]
    c8d6:	2308      	movs	r3, #8
    c8d8:	18fb      	adds	r3, r7, r3
    c8da:	2200      	movs	r2, #0
    c8dc:	5e9a      	ldrsh	r2, [r3, r2]
    c8de:	230a      	movs	r3, #10
    c8e0:	18fb      	adds	r3, r7, r3
    c8e2:	2100      	movs	r1, #0
    c8e4:	5e59      	ldrsh	r1, [r3, r1]
    c8e6:	68f8      	ldr	r0, [r7, #12]
    c8e8:	2324      	movs	r3, #36	; 0x24
    c8ea:	2608      	movs	r6, #8
    c8ec:	46b4      	mov	ip, r6
    c8ee:	44bc      	add	ip, r7
    c8f0:	4463      	add	r3, ip
    c8f2:	881b      	ldrh	r3, [r3, #0]
    c8f4:	9301      	str	r3, [sp, #4]
    c8f6:	2320      	movs	r3, #32
    c8f8:	2608      	movs	r6, #8
    c8fa:	46b4      	mov	ip, r6
    c8fc:	44bc      	add	ip, r7
    c8fe:	4463      	add	r3, ip
    c900:	2600      	movs	r6, #0
    c902:	5f9b      	ldrsh	r3, [r3, r6]
    c904:	9300      	str	r3, [sp, #0]
    c906:	002b      	movs	r3, r5
    c908:	47a0      	blx	r4
}
    c90a:	46c0      	nop			; (mov r8, r8)
    c90c:	46bd      	mov	sp, r7
    c90e:	b005      	add	sp, #20
    c910:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c912 <_ZN12Adafruit_GFX8endWriteEv>:

void Adafruit_GFX::endWrite(){
    c912:	b580      	push	{r7, lr}
    c914:	b082      	sub	sp, #8
    c916:	af00      	add	r7, sp, #0
    c918:	6078      	str	r0, [r7, #4]
    // Overwrite in subclasses if startWrite is defined!
}
    c91a:	46c0      	nop			; (mov r8, r8)
    c91c:	46bd      	mov	sp, r7
    c91e:	b002      	add	sp, #8
    c920:	bd80      	pop	{r7, pc}

0000c922 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

// (x,y) is topmost point; if unsure, calling function
// should sort endpoints or call drawLine() instead
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    c922:	b5f0      	push	{r4, r5, r6, r7, lr}
    c924:	b087      	sub	sp, #28
    c926:	af02      	add	r7, sp, #8
    c928:	60f8      	str	r0, [r7, #12]
    c92a:	000c      	movs	r4, r1
    c92c:	0010      	movs	r0, r2
    c92e:	0019      	movs	r1, r3
    c930:	230a      	movs	r3, #10
    c932:	18fb      	adds	r3, r7, r3
    c934:	1c22      	adds	r2, r4, #0
    c936:	801a      	strh	r2, [r3, #0]
    c938:	2308      	movs	r3, #8
    c93a:	18fb      	adds	r3, r7, r3
    c93c:	1c02      	adds	r2, r0, #0
    c93e:	801a      	strh	r2, [r3, #0]
    c940:	1dbb      	adds	r3, r7, #6
    c942:	1c0a      	adds	r2, r1, #0
    c944:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c946:	68fb      	ldr	r3, [r7, #12]
    c948:	681b      	ldr	r3, [r3, #0]
    c94a:	3314      	adds	r3, #20
    c94c:	681b      	ldr	r3, [r3, #0]
    c94e:	68fa      	ldr	r2, [r7, #12]
    c950:	0010      	movs	r0, r2
    c952:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
    c954:	68fb      	ldr	r3, [r7, #12]
    c956:	681b      	ldr	r3, [r3, #0]
    c958:	3328      	adds	r3, #40	; 0x28
    c95a:	681c      	ldr	r4, [r3, #0]
    c95c:	2308      	movs	r3, #8
    c95e:	18fb      	adds	r3, r7, r3
    c960:	881a      	ldrh	r2, [r3, #0]
    c962:	1dbb      	adds	r3, r7, #6
    c964:	881b      	ldrh	r3, [r3, #0]
    c966:	18d3      	adds	r3, r2, r3
    c968:	b29b      	uxth	r3, r3
    c96a:	3b01      	subs	r3, #1
    c96c:	b29b      	uxth	r3, r3
    c96e:	b21b      	sxth	r3, r3
    c970:	220a      	movs	r2, #10
    c972:	18ba      	adds	r2, r7, r2
    c974:	2600      	movs	r6, #0
    c976:	5f96      	ldrsh	r6, [r2, r6]
    c978:	2208      	movs	r2, #8
    c97a:	18ba      	adds	r2, r7, r2
    c97c:	2500      	movs	r5, #0
    c97e:	5f55      	ldrsh	r5, [r2, r5]
    c980:	220a      	movs	r2, #10
    c982:	18ba      	adds	r2, r7, r2
    c984:	2100      	movs	r1, #0
    c986:	5e51      	ldrsh	r1, [r2, r1]
    c988:	68f8      	ldr	r0, [r7, #12]
    c98a:	2228      	movs	r2, #40	; 0x28
    c98c:	18ba      	adds	r2, r7, r2
    c98e:	8812      	ldrh	r2, [r2, #0]
    c990:	9201      	str	r2, [sp, #4]
    c992:	9300      	str	r3, [sp, #0]
    c994:	0033      	movs	r3, r6
    c996:	002a      	movs	r2, r5
    c998:	47a0      	blx	r4
    endWrite();
    c99a:	68fb      	ldr	r3, [r7, #12]
    c99c:	681b      	ldr	r3, [r3, #0]
    c99e:	332c      	adds	r3, #44	; 0x2c
    c9a0:	681b      	ldr	r3, [r3, #0]
    c9a2:	68fa      	ldr	r2, [r7, #12]
    c9a4:	0010      	movs	r0, r2
    c9a6:	4798      	blx	r3
}
    c9a8:	46c0      	nop			; (mov r8, r8)
    c9aa:	46bd      	mov	sp, r7
    c9ac:	b005      	add	sp, #20
    c9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c9b0 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

// (x,y) is leftmost point; if unsure, calling function
// should sort endpoints or call drawLine() instead
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    c9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9b2:	b087      	sub	sp, #28
    c9b4:	af02      	add	r7, sp, #8
    c9b6:	60f8      	str	r0, [r7, #12]
    c9b8:	000c      	movs	r4, r1
    c9ba:	0010      	movs	r0, r2
    c9bc:	0019      	movs	r1, r3
    c9be:	230a      	movs	r3, #10
    c9c0:	18fb      	adds	r3, r7, r3
    c9c2:	1c22      	adds	r2, r4, #0
    c9c4:	801a      	strh	r2, [r3, #0]
    c9c6:	2308      	movs	r3, #8
    c9c8:	18fb      	adds	r3, r7, r3
    c9ca:	1c02      	adds	r2, r0, #0
    c9cc:	801a      	strh	r2, [r3, #0]
    c9ce:	1dbb      	adds	r3, r7, #6
    c9d0:	1c0a      	adds	r2, r1, #0
    c9d2:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c9d4:	68fb      	ldr	r3, [r7, #12]
    c9d6:	681b      	ldr	r3, [r3, #0]
    c9d8:	3314      	adds	r3, #20
    c9da:	681b      	ldr	r3, [r3, #0]
    c9dc:	68fa      	ldr	r2, [r7, #12]
    c9de:	0010      	movs	r0, r2
    c9e0:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
    c9e2:	68fb      	ldr	r3, [r7, #12]
    c9e4:	681b      	ldr	r3, [r3, #0]
    c9e6:	3328      	adds	r3, #40	; 0x28
    c9e8:	681c      	ldr	r4, [r3, #0]
    c9ea:	230a      	movs	r3, #10
    c9ec:	18fb      	adds	r3, r7, r3
    c9ee:	881a      	ldrh	r2, [r3, #0]
    c9f0:	1dbb      	adds	r3, r7, #6
    c9f2:	881b      	ldrh	r3, [r3, #0]
    c9f4:	18d3      	adds	r3, r2, r3
    c9f6:	b29b      	uxth	r3, r3
    c9f8:	3b01      	subs	r3, #1
    c9fa:	b29b      	uxth	r3, r3
    c9fc:	b21d      	sxth	r5, r3
    c9fe:	2308      	movs	r3, #8
    ca00:	18fb      	adds	r3, r7, r3
    ca02:	2200      	movs	r2, #0
    ca04:	5e9a      	ldrsh	r2, [r3, r2]
    ca06:	230a      	movs	r3, #10
    ca08:	18fb      	adds	r3, r7, r3
    ca0a:	2100      	movs	r1, #0
    ca0c:	5e59      	ldrsh	r1, [r3, r1]
    ca0e:	68f8      	ldr	r0, [r7, #12]
    ca10:	2320      	movs	r3, #32
    ca12:	2608      	movs	r6, #8
    ca14:	46b4      	mov	ip, r6
    ca16:	44bc      	add	ip, r7
    ca18:	4463      	add	r3, ip
    ca1a:	881b      	ldrh	r3, [r3, #0]
    ca1c:	9301      	str	r3, [sp, #4]
    ca1e:	2308      	movs	r3, #8
    ca20:	18fb      	adds	r3, r7, r3
    ca22:	2600      	movs	r6, #0
    ca24:	5f9b      	ldrsh	r3, [r3, r6]
    ca26:	9300      	str	r3, [sp, #0]
    ca28:	002b      	movs	r3, r5
    ca2a:	47a0      	blx	r4
    endWrite();
    ca2c:	68fb      	ldr	r3, [r7, #12]
    ca2e:	681b      	ldr	r3, [r3, #0]
    ca30:	332c      	adds	r3, #44	; 0x2c
    ca32:	681b      	ldr	r3, [r3, #0]
    ca34:	68fa      	ldr	r2, [r7, #12]
    ca36:	0010      	movs	r0, r2
    ca38:	4798      	blx	r3
}
    ca3a:	46c0      	nop			; (mov r8, r8)
    ca3c:	46bd      	mov	sp, r7
    ca3e:	b005      	add	sp, #20
    ca40:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ca42 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    ca42:	b5b0      	push	{r4, r5, r7, lr}
    ca44:	b088      	sub	sp, #32
    ca46:	af02      	add	r7, sp, #8
    ca48:	60f8      	str	r0, [r7, #12]
    ca4a:	000c      	movs	r4, r1
    ca4c:	0010      	movs	r0, r2
    ca4e:	0019      	movs	r1, r3
    ca50:	230a      	movs	r3, #10
    ca52:	18fb      	adds	r3, r7, r3
    ca54:	1c22      	adds	r2, r4, #0
    ca56:	801a      	strh	r2, [r3, #0]
    ca58:	2308      	movs	r3, #8
    ca5a:	18fb      	adds	r3, r7, r3
    ca5c:	1c02      	adds	r2, r0, #0
    ca5e:	801a      	strh	r2, [r3, #0]
    ca60:	1dbb      	adds	r3, r7, #6
    ca62:	1c0a      	adds	r2, r1, #0
    ca64:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    ca66:	68fb      	ldr	r3, [r7, #12]
    ca68:	681b      	ldr	r3, [r3, #0]
    ca6a:	3314      	adds	r3, #20
    ca6c:	681b      	ldr	r3, [r3, #0]
    ca6e:	68fa      	ldr	r2, [r7, #12]
    ca70:	0010      	movs	r0, r2
    ca72:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
    ca74:	2316      	movs	r3, #22
    ca76:	18fb      	adds	r3, r7, r3
    ca78:	220a      	movs	r2, #10
    ca7a:	18ba      	adds	r2, r7, r2
    ca7c:	8812      	ldrh	r2, [r2, #0]
    ca7e:	801a      	strh	r2, [r3, #0]
    ca80:	2316      	movs	r3, #22
    ca82:	18fb      	adds	r3, r7, r3
    ca84:	2200      	movs	r2, #0
    ca86:	5e9a      	ldrsh	r2, [r3, r2]
    ca88:	230a      	movs	r3, #10
    ca8a:	18fb      	adds	r3, r7, r3
    ca8c:	2100      	movs	r1, #0
    ca8e:	5e59      	ldrsh	r1, [r3, r1]
    ca90:	1dbb      	adds	r3, r7, #6
    ca92:	2000      	movs	r0, #0
    ca94:	5e1b      	ldrsh	r3, [r3, r0]
    ca96:	18cb      	adds	r3, r1, r3
    ca98:	429a      	cmp	r2, r3
    ca9a:	da21      	bge.n	cae0 <_ZN12Adafruit_GFX8fillRectEsssst+0x9e>
        writeFastVLine(i, y, h, color);
    ca9c:	68fb      	ldr	r3, [r7, #12]
    ca9e:	681b      	ldr	r3, [r3, #0]
    caa0:	3320      	adds	r3, #32
    caa2:	681c      	ldr	r4, [r3, #0]
    caa4:	2328      	movs	r3, #40	; 0x28
    caa6:	18fb      	adds	r3, r7, r3
    caa8:	2500      	movs	r5, #0
    caaa:	5f5d      	ldrsh	r5, [r3, r5]
    caac:	2308      	movs	r3, #8
    caae:	18fb      	adds	r3, r7, r3
    cab0:	2200      	movs	r2, #0
    cab2:	5e9a      	ldrsh	r2, [r3, r2]
    cab4:	2316      	movs	r3, #22
    cab6:	18fb      	adds	r3, r7, r3
    cab8:	2100      	movs	r1, #0
    caba:	5e59      	ldrsh	r1, [r3, r1]
    cabc:	68f8      	ldr	r0, [r7, #12]
    cabe:	232c      	movs	r3, #44	; 0x2c
    cac0:	18fb      	adds	r3, r7, r3
    cac2:	881b      	ldrh	r3, [r3, #0]
    cac4:	9300      	str	r3, [sp, #0]
    cac6:	002b      	movs	r3, r5
    cac8:	47a0      	blx	r4
    for (int16_t i=x; i<x+w; i++) {
    caca:	2316      	movs	r3, #22
    cacc:	18fb      	adds	r3, r7, r3
    cace:	2200      	movs	r2, #0
    cad0:	5e9b      	ldrsh	r3, [r3, r2]
    cad2:	b29b      	uxth	r3, r3
    cad4:	3301      	adds	r3, #1
    cad6:	b29a      	uxth	r2, r3
    cad8:	2316      	movs	r3, #22
    cada:	18fb      	adds	r3, r7, r3
    cadc:	801a      	strh	r2, [r3, #0]
    cade:	e7cf      	b.n	ca80 <_ZN12Adafruit_GFX8fillRectEsssst+0x3e>
    }
    endWrite();
    cae0:	68fb      	ldr	r3, [r7, #12]
    cae2:	681b      	ldr	r3, [r3, #0]
    cae4:	332c      	adds	r3, #44	; 0x2c
    cae6:	681b      	ldr	r3, [r3, #0]
    cae8:	68fa      	ldr	r2, [r7, #12]
    caea:	0010      	movs	r0, r2
    caec:	4798      	blx	r3
}
    caee:	46c0      	nop			; (mov r8, r8)
    caf0:	46bd      	mov	sp, r7
    caf2:	b006      	add	sp, #24
    caf4:	bdb0      	pop	{r4, r5, r7, pc}

0000caf6 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
    caf6:	b590      	push	{r4, r7, lr}
    caf8:	b085      	sub	sp, #20
    cafa:	af02      	add	r7, sp, #8
    cafc:	6078      	str	r0, [r7, #4]
    cafe:	000a      	movs	r2, r1
    cb00:	1cbb      	adds	r3, r7, #2
    cb02:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    fillRect(0, 0, _width, _height, color);
    cb04:	687b      	ldr	r3, [r7, #4]
    cb06:	681b      	ldr	r3, [r3, #0]
    cb08:	3340      	adds	r3, #64	; 0x40
    cb0a:	681c      	ldr	r4, [r3, #0]
    cb0c:	687b      	ldr	r3, [r7, #4]
    cb0e:	210c      	movs	r1, #12
    cb10:	5e59      	ldrsh	r1, [r3, r1]
    cb12:	687b      	ldr	r3, [r7, #4]
    cb14:	220e      	movs	r2, #14
    cb16:	5e9b      	ldrsh	r3, [r3, r2]
    cb18:	6878      	ldr	r0, [r7, #4]
    cb1a:	1cba      	adds	r2, r7, #2
    cb1c:	8812      	ldrh	r2, [r2, #0]
    cb1e:	9201      	str	r2, [sp, #4]
    cb20:	9300      	str	r3, [sp, #0]
    cb22:	000b      	movs	r3, r1
    cb24:	2200      	movs	r2, #0
    cb26:	2100      	movs	r1, #0
    cb28:	47a0      	blx	r4
}
    cb2a:	46c0      	nop			; (mov r8, r8)
    cb2c:	46bd      	mov	sp, r7
    cb2e:	b003      	add	sp, #12
    cb30:	bd90      	pop	{r4, r7, pc}

0000cb32 <_ZN12Adafruit_GFX8drawLineEsssst>:

void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    cb32:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb34:	b089      	sub	sp, #36	; 0x24
    cb36:	af02      	add	r7, sp, #8
    cb38:	60f8      	str	r0, [r7, #12]
    cb3a:	000c      	movs	r4, r1
    cb3c:	0010      	movs	r0, r2
    cb3e:	0019      	movs	r1, r3
    cb40:	230a      	movs	r3, #10
    cb42:	18fb      	adds	r3, r7, r3
    cb44:	1c22      	adds	r2, r4, #0
    cb46:	801a      	strh	r2, [r3, #0]
    cb48:	2308      	movs	r3, #8
    cb4a:	18fb      	adds	r3, r7, r3
    cb4c:	1c02      	adds	r2, r0, #0
    cb4e:	801a      	strh	r2, [r3, #0]
    cb50:	1dbb      	adds	r3, r7, #6
    cb52:	1c0a      	adds	r2, r1, #0
    cb54:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    if(x0 == x1){
    cb56:	230a      	movs	r3, #10
    cb58:	18fa      	adds	r2, r7, r3
    cb5a:	1dbb      	adds	r3, r7, #6
    cb5c:	2100      	movs	r1, #0
    cb5e:	5e52      	ldrsh	r2, [r2, r1]
    cb60:	2100      	movs	r1, #0
    cb62:	5e5b      	ldrsh	r3, [r3, r1]
    cb64:	429a      	cmp	r2, r3
    cb66:	d147      	bne.n	cbf8 <_ZN12Adafruit_GFX8drawLineEsssst+0xc6>
        if(y0 > y1) _swap_int16_t(y0, y1);
    cb68:	2308      	movs	r3, #8
    cb6a:	18fb      	adds	r3, r7, r3
    cb6c:	2228      	movs	r2, #40	; 0x28
    cb6e:	2108      	movs	r1, #8
    cb70:	1879      	adds	r1, r7, r1
    cb72:	1889      	adds	r1, r1, r2
    cb74:	2200      	movs	r2, #0
    cb76:	5e9a      	ldrsh	r2, [r3, r2]
    cb78:	2300      	movs	r3, #0
    cb7a:	5ecb      	ldrsh	r3, [r1, r3]
    cb7c:	429a      	cmp	r2, r3
    cb7e:	dd16      	ble.n	cbae <_ZN12Adafruit_GFX8drawLineEsssst+0x7c>
    cb80:	2316      	movs	r3, #22
    cb82:	18fb      	adds	r3, r7, r3
    cb84:	2208      	movs	r2, #8
    cb86:	18ba      	adds	r2, r7, r2
    cb88:	8812      	ldrh	r2, [r2, #0]
    cb8a:	801a      	strh	r2, [r3, #0]
    cb8c:	2308      	movs	r3, #8
    cb8e:	18fb      	adds	r3, r7, r3
    cb90:	2228      	movs	r2, #40	; 0x28
    cb92:	2108      	movs	r1, #8
    cb94:	468c      	mov	ip, r1
    cb96:	44bc      	add	ip, r7
    cb98:	4462      	add	r2, ip
    cb9a:	8812      	ldrh	r2, [r2, #0]
    cb9c:	801a      	strh	r2, [r3, #0]
    cb9e:	2328      	movs	r3, #40	; 0x28
    cba0:	2208      	movs	r2, #8
    cba2:	18ba      	adds	r2, r7, r2
    cba4:	18d2      	adds	r2, r2, r3
    cba6:	2316      	movs	r3, #22
    cba8:	18fb      	adds	r3, r7, r3
    cbaa:	881b      	ldrh	r3, [r3, #0]
    cbac:	8013      	strh	r3, [r2, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    cbae:	68fb      	ldr	r3, [r7, #12]
    cbb0:	681b      	ldr	r3, [r3, #0]
    cbb2:	3338      	adds	r3, #56	; 0x38
    cbb4:	681c      	ldr	r4, [r3, #0]
    cbb6:	2328      	movs	r3, #40	; 0x28
    cbb8:	2208      	movs	r2, #8
    cbba:	4694      	mov	ip, r2
    cbbc:	44bc      	add	ip, r7
    cbbe:	4463      	add	r3, ip
    cbc0:	881a      	ldrh	r2, [r3, #0]
    cbc2:	2308      	movs	r3, #8
    cbc4:	18fb      	adds	r3, r7, r3
    cbc6:	881b      	ldrh	r3, [r3, #0]
    cbc8:	1ad3      	subs	r3, r2, r3
    cbca:	b29b      	uxth	r3, r3
    cbcc:	3301      	adds	r3, #1
    cbce:	b29b      	uxth	r3, r3
    cbd0:	b21d      	sxth	r5, r3
    cbd2:	2308      	movs	r3, #8
    cbd4:	18fb      	adds	r3, r7, r3
    cbd6:	2200      	movs	r2, #0
    cbd8:	5e9a      	ldrsh	r2, [r3, r2]
    cbda:	230a      	movs	r3, #10
    cbdc:	18fb      	adds	r3, r7, r3
    cbde:	2100      	movs	r1, #0
    cbe0:	5e59      	ldrsh	r1, [r3, r1]
    cbe2:	68f8      	ldr	r0, [r7, #12]
    cbe4:	232c      	movs	r3, #44	; 0x2c
    cbe6:	2608      	movs	r6, #8
    cbe8:	46b4      	mov	ip, r6
    cbea:	44bc      	add	ip, r7
    cbec:	4463      	add	r3, ip
    cbee:	881b      	ldrh	r3, [r3, #0]
    cbf0:	9300      	str	r3, [sp, #0]
    cbf2:	002b      	movs	r3, r5
    cbf4:	47a0      	blx	r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
    cbf6:	e074      	b.n	cce2 <_ZN12Adafruit_GFX8drawLineEsssst+0x1b0>
    } else if(y0 == y1){
    cbf8:	2308      	movs	r3, #8
    cbfa:	18fb      	adds	r3, r7, r3
    cbfc:	2228      	movs	r2, #40	; 0x28
    cbfe:	2108      	movs	r1, #8
    cc00:	1879      	adds	r1, r7, r1
    cc02:	1889      	adds	r1, r1, r2
    cc04:	2200      	movs	r2, #0
    cc06:	5e9a      	ldrsh	r2, [r3, r2]
    cc08:	2300      	movs	r3, #0
    cc0a:	5ecb      	ldrsh	r3, [r1, r3]
    cc0c:	429a      	cmp	r2, r3
    cc0e:	d139      	bne.n	cc84 <_ZN12Adafruit_GFX8drawLineEsssst+0x152>
        if(x0 > x1) _swap_int16_t(x0, x1);
    cc10:	230a      	movs	r3, #10
    cc12:	18fa      	adds	r2, r7, r3
    cc14:	1dbb      	adds	r3, r7, #6
    cc16:	2100      	movs	r1, #0
    cc18:	5e52      	ldrsh	r2, [r2, r1]
    cc1a:	2100      	movs	r1, #0
    cc1c:	5e5b      	ldrsh	r3, [r3, r1]
    cc1e:	429a      	cmp	r2, r3
    cc20:	dd0f      	ble.n	cc42 <_ZN12Adafruit_GFX8drawLineEsssst+0x110>
    cc22:	2314      	movs	r3, #20
    cc24:	18fb      	adds	r3, r7, r3
    cc26:	220a      	movs	r2, #10
    cc28:	18ba      	adds	r2, r7, r2
    cc2a:	8812      	ldrh	r2, [r2, #0]
    cc2c:	801a      	strh	r2, [r3, #0]
    cc2e:	230a      	movs	r3, #10
    cc30:	18fb      	adds	r3, r7, r3
    cc32:	1dba      	adds	r2, r7, #6
    cc34:	8812      	ldrh	r2, [r2, #0]
    cc36:	801a      	strh	r2, [r3, #0]
    cc38:	1dbb      	adds	r3, r7, #6
    cc3a:	2214      	movs	r2, #20
    cc3c:	18ba      	adds	r2, r7, r2
    cc3e:	8812      	ldrh	r2, [r2, #0]
    cc40:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    cc42:	68fb      	ldr	r3, [r7, #12]
    cc44:	681b      	ldr	r3, [r3, #0]
    cc46:	333c      	adds	r3, #60	; 0x3c
    cc48:	681c      	ldr	r4, [r3, #0]
    cc4a:	1dbb      	adds	r3, r7, #6
    cc4c:	881a      	ldrh	r2, [r3, #0]
    cc4e:	230a      	movs	r3, #10
    cc50:	18fb      	adds	r3, r7, r3
    cc52:	881b      	ldrh	r3, [r3, #0]
    cc54:	1ad3      	subs	r3, r2, r3
    cc56:	b29b      	uxth	r3, r3
    cc58:	3301      	adds	r3, #1
    cc5a:	b29b      	uxth	r3, r3
    cc5c:	b21d      	sxth	r5, r3
    cc5e:	2308      	movs	r3, #8
    cc60:	18fb      	adds	r3, r7, r3
    cc62:	2200      	movs	r2, #0
    cc64:	5e9a      	ldrsh	r2, [r3, r2]
    cc66:	230a      	movs	r3, #10
    cc68:	18fb      	adds	r3, r7, r3
    cc6a:	2100      	movs	r1, #0
    cc6c:	5e59      	ldrsh	r1, [r3, r1]
    cc6e:	68f8      	ldr	r0, [r7, #12]
    cc70:	232c      	movs	r3, #44	; 0x2c
    cc72:	2608      	movs	r6, #8
    cc74:	46b4      	mov	ip, r6
    cc76:	44bc      	add	ip, r7
    cc78:	4463      	add	r3, ip
    cc7a:	881b      	ldrh	r3, [r3, #0]
    cc7c:	9300      	str	r3, [sp, #0]
    cc7e:	002b      	movs	r3, r5
    cc80:	47a0      	blx	r4
}
    cc82:	e02e      	b.n	cce2 <_ZN12Adafruit_GFX8drawLineEsssst+0x1b0>
        startWrite();
    cc84:	68fb      	ldr	r3, [r7, #12]
    cc86:	681b      	ldr	r3, [r3, #0]
    cc88:	3314      	adds	r3, #20
    cc8a:	681b      	ldr	r3, [r3, #0]
    cc8c:	68fa      	ldr	r2, [r7, #12]
    cc8e:	0010      	movs	r0, r2
    cc90:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
    cc92:	68fb      	ldr	r3, [r7, #12]
    cc94:	681b      	ldr	r3, [r3, #0]
    cc96:	3328      	adds	r3, #40	; 0x28
    cc98:	681c      	ldr	r4, [r3, #0]
    cc9a:	1dbb      	adds	r3, r7, #6
    cc9c:	2500      	movs	r5, #0
    cc9e:	5f5d      	ldrsh	r5, [r3, r5]
    cca0:	2308      	movs	r3, #8
    cca2:	18fb      	adds	r3, r7, r3
    cca4:	2200      	movs	r2, #0
    cca6:	5e9a      	ldrsh	r2, [r3, r2]
    cca8:	230a      	movs	r3, #10
    ccaa:	18fb      	adds	r3, r7, r3
    ccac:	2100      	movs	r1, #0
    ccae:	5e59      	ldrsh	r1, [r3, r1]
    ccb0:	68f8      	ldr	r0, [r7, #12]
    ccb2:	232c      	movs	r3, #44	; 0x2c
    ccb4:	2608      	movs	r6, #8
    ccb6:	46b4      	mov	ip, r6
    ccb8:	44bc      	add	ip, r7
    ccba:	4463      	add	r3, ip
    ccbc:	881b      	ldrh	r3, [r3, #0]
    ccbe:	9301      	str	r3, [sp, #4]
    ccc0:	2328      	movs	r3, #40	; 0x28
    ccc2:	2608      	movs	r6, #8
    ccc4:	46b4      	mov	ip, r6
    ccc6:	44bc      	add	ip, r7
    ccc8:	4463      	add	r3, ip
    ccca:	2600      	movs	r6, #0
    cccc:	5f9b      	ldrsh	r3, [r3, r6]
    ccce:	9300      	str	r3, [sp, #0]
    ccd0:	002b      	movs	r3, r5
    ccd2:	47a0      	blx	r4
        endWrite();
    ccd4:	68fb      	ldr	r3, [r7, #12]
    ccd6:	681b      	ldr	r3, [r3, #0]
    ccd8:	332c      	adds	r3, #44	; 0x2c
    ccda:	681b      	ldr	r3, [r3, #0]
    ccdc:	68fa      	ldr	r2, [r7, #12]
    ccde:	0010      	movs	r0, r2
    cce0:	4798      	blx	r3
}
    cce2:	46c0      	nop			; (mov r8, r8)
    cce4:	46bd      	mov	sp, r7
    cce6:	b007      	add	sp, #28
    cce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ccea <_ZN12Adafruit_GFX8drawRectEsssst>:
    }
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    ccea:	b5b0      	push	{r4, r5, r7, lr}
    ccec:	b086      	sub	sp, #24
    ccee:	af02      	add	r7, sp, #8
    ccf0:	60f8      	str	r0, [r7, #12]
    ccf2:	000c      	movs	r4, r1
    ccf4:	0010      	movs	r0, r2
    ccf6:	0019      	movs	r1, r3
    ccf8:	230a      	movs	r3, #10
    ccfa:	18fb      	adds	r3, r7, r3
    ccfc:	1c22      	adds	r2, r4, #0
    ccfe:	801a      	strh	r2, [r3, #0]
    cd00:	2308      	movs	r3, #8
    cd02:	18fb      	adds	r3, r7, r3
    cd04:	1c02      	adds	r2, r0, #0
    cd06:	801a      	strh	r2, [r3, #0]
    cd08:	1dbb      	adds	r3, r7, #6
    cd0a:	1c0a      	adds	r2, r1, #0
    cd0c:	801a      	strh	r2, [r3, #0]
    startWrite();
    cd0e:	68fb      	ldr	r3, [r7, #12]
    cd10:	681b      	ldr	r3, [r3, #0]
    cd12:	3314      	adds	r3, #20
    cd14:	681b      	ldr	r3, [r3, #0]
    cd16:	68fa      	ldr	r2, [r7, #12]
    cd18:	0010      	movs	r0, r2
    cd1a:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
    cd1c:	68fb      	ldr	r3, [r7, #12]
    cd1e:	681b      	ldr	r3, [r3, #0]
    cd20:	3324      	adds	r3, #36	; 0x24
    cd22:	681c      	ldr	r4, [r3, #0]
    cd24:	1dbb      	adds	r3, r7, #6
    cd26:	2500      	movs	r5, #0
    cd28:	5f5d      	ldrsh	r5, [r3, r5]
    cd2a:	2308      	movs	r3, #8
    cd2c:	18fb      	adds	r3, r7, r3
    cd2e:	2200      	movs	r2, #0
    cd30:	5e9a      	ldrsh	r2, [r3, r2]
    cd32:	230a      	movs	r3, #10
    cd34:	18fb      	adds	r3, r7, r3
    cd36:	2100      	movs	r1, #0
    cd38:	5e59      	ldrsh	r1, [r3, r1]
    cd3a:	68f8      	ldr	r0, [r7, #12]
    cd3c:	2324      	movs	r3, #36	; 0x24
    cd3e:	18fb      	adds	r3, r7, r3
    cd40:	881b      	ldrh	r3, [r3, #0]
    cd42:	9300      	str	r3, [sp, #0]
    cd44:	002b      	movs	r3, r5
    cd46:	47a0      	blx	r4
    writeFastHLine(x, y+h-1, w, color);
    cd48:	68fb      	ldr	r3, [r7, #12]
    cd4a:	681b      	ldr	r3, [r3, #0]
    cd4c:	3324      	adds	r3, #36	; 0x24
    cd4e:	681c      	ldr	r4, [r3, #0]
    cd50:	2308      	movs	r3, #8
    cd52:	18fb      	adds	r3, r7, r3
    cd54:	881a      	ldrh	r2, [r3, #0]
    cd56:	2320      	movs	r3, #32
    cd58:	18fb      	adds	r3, r7, r3
    cd5a:	881b      	ldrh	r3, [r3, #0]
    cd5c:	18d3      	adds	r3, r2, r3
    cd5e:	b29b      	uxth	r3, r3
    cd60:	3b01      	subs	r3, #1
    cd62:	b29b      	uxth	r3, r3
    cd64:	b21a      	sxth	r2, r3
    cd66:	1dbb      	adds	r3, r7, #6
    cd68:	2500      	movs	r5, #0
    cd6a:	5f5d      	ldrsh	r5, [r3, r5]
    cd6c:	230a      	movs	r3, #10
    cd6e:	18fb      	adds	r3, r7, r3
    cd70:	2100      	movs	r1, #0
    cd72:	5e59      	ldrsh	r1, [r3, r1]
    cd74:	68f8      	ldr	r0, [r7, #12]
    cd76:	2324      	movs	r3, #36	; 0x24
    cd78:	18fb      	adds	r3, r7, r3
    cd7a:	881b      	ldrh	r3, [r3, #0]
    cd7c:	9300      	str	r3, [sp, #0]
    cd7e:	002b      	movs	r3, r5
    cd80:	47a0      	blx	r4
    writeFastVLine(x, y, h, color);
    cd82:	68fb      	ldr	r3, [r7, #12]
    cd84:	681b      	ldr	r3, [r3, #0]
    cd86:	3320      	adds	r3, #32
    cd88:	681c      	ldr	r4, [r3, #0]
    cd8a:	2320      	movs	r3, #32
    cd8c:	18fb      	adds	r3, r7, r3
    cd8e:	2500      	movs	r5, #0
    cd90:	5f5d      	ldrsh	r5, [r3, r5]
    cd92:	2308      	movs	r3, #8
    cd94:	18fb      	adds	r3, r7, r3
    cd96:	2200      	movs	r2, #0
    cd98:	5e9a      	ldrsh	r2, [r3, r2]
    cd9a:	230a      	movs	r3, #10
    cd9c:	18fb      	adds	r3, r7, r3
    cd9e:	2100      	movs	r1, #0
    cda0:	5e59      	ldrsh	r1, [r3, r1]
    cda2:	68f8      	ldr	r0, [r7, #12]
    cda4:	2324      	movs	r3, #36	; 0x24
    cda6:	18fb      	adds	r3, r7, r3
    cda8:	881b      	ldrh	r3, [r3, #0]
    cdaa:	9300      	str	r3, [sp, #0]
    cdac:	002b      	movs	r3, r5
    cdae:	47a0      	blx	r4
    writeFastVLine(x+w-1, y, h, color);
    cdb0:	68fb      	ldr	r3, [r7, #12]
    cdb2:	681b      	ldr	r3, [r3, #0]
    cdb4:	3320      	adds	r3, #32
    cdb6:	681c      	ldr	r4, [r3, #0]
    cdb8:	230a      	movs	r3, #10
    cdba:	18fb      	adds	r3, r7, r3
    cdbc:	881a      	ldrh	r2, [r3, #0]
    cdbe:	1dbb      	adds	r3, r7, #6
    cdc0:	881b      	ldrh	r3, [r3, #0]
    cdc2:	18d3      	adds	r3, r2, r3
    cdc4:	b29b      	uxth	r3, r3
    cdc6:	3b01      	subs	r3, #1
    cdc8:	b29b      	uxth	r3, r3
    cdca:	b219      	sxth	r1, r3
    cdcc:	2320      	movs	r3, #32
    cdce:	18fb      	adds	r3, r7, r3
    cdd0:	2500      	movs	r5, #0
    cdd2:	5f5d      	ldrsh	r5, [r3, r5]
    cdd4:	2308      	movs	r3, #8
    cdd6:	18fb      	adds	r3, r7, r3
    cdd8:	2200      	movs	r2, #0
    cdda:	5e9a      	ldrsh	r2, [r3, r2]
    cddc:	68f8      	ldr	r0, [r7, #12]
    cdde:	2324      	movs	r3, #36	; 0x24
    cde0:	18fb      	adds	r3, r7, r3
    cde2:	881b      	ldrh	r3, [r3, #0]
    cde4:	9300      	str	r3, [sp, #0]
    cde6:	002b      	movs	r3, r5
    cde8:	47a0      	blx	r4
    endWrite();
    cdea:	68fb      	ldr	r3, [r7, #12]
    cdec:	681b      	ldr	r3, [r3, #0]
    cdee:	332c      	adds	r3, #44	; 0x2c
    cdf0:	681b      	ldr	r3, [r3, #0]
    cdf2:	68fa      	ldr	r2, [r7, #12]
    cdf4:	0010      	movs	r0, r2
    cdf6:	4798      	blx	r3
}
    cdf8:	46c0      	nop			; (mov r8, r8)
    cdfa:	46bd      	mov	sp, r7
    cdfc:	b004      	add	sp, #16
    cdfe:	bdb0      	pop	{r4, r5, r7, pc}

0000ce00 <_ZN12Adafruit_GFX8drawCharEsshtth>:

// TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    ce00:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce02:	b08f      	sub	sp, #60	; 0x3c
    ce04:	af02      	add	r7, sp, #8
    ce06:	60f8      	str	r0, [r7, #12]
    ce08:	000c      	movs	r4, r1
    ce0a:	0010      	movs	r0, r2
    ce0c:	0019      	movs	r1, r3
    ce0e:	230a      	movs	r3, #10
    ce10:	18fb      	adds	r3, r7, r3
    ce12:	1c22      	adds	r2, r4, #0
    ce14:	801a      	strh	r2, [r3, #0]
    ce16:	2308      	movs	r3, #8
    ce18:	18fb      	adds	r3, r7, r3
    ce1a:	1c02      	adds	r2, r0, #0
    ce1c:	801a      	strh	r2, [r3, #0]
    ce1e:	1dfb      	adds	r3, r7, #7
    ce20:	1c0a      	adds	r2, r1, #0
    ce22:	701a      	strb	r2, [r3, #0]

    if(!gfxFont) { // 'Classic' built-in font
    ce24:	68fb      	ldr	r3, [r7, #12]
    ce26:	69db      	ldr	r3, [r3, #28]
    ce28:	2b00      	cmp	r3, #0
    ce2a:	d000      	beq.n	ce2e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
    ce2c:	e1a8      	b.n	d180 <_ZN12Adafruit_GFX8drawCharEsshtth+0x380>

        if((x >= _width)            || // Clip right
    ce2e:	68fb      	ldr	r3, [r7, #12]
    ce30:	220c      	movs	r2, #12
    ce32:	5e9b      	ldrsh	r3, [r3, r2]
    ce34:	220a      	movs	r2, #10
    ce36:	18ba      	adds	r2, r7, r2
    ce38:	2100      	movs	r1, #0
    ce3a:	5e52      	ldrsh	r2, [r2, r1]
    ce3c:	429a      	cmp	r2, r3
    ce3e:	db00      	blt.n	ce42 <_ZN12Adafruit_GFX8drawCharEsshtth+0x42>
    ce40:	e2c7      	b.n	d3d2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           (y >= _height)           || // Clip bottom
    ce42:	68fb      	ldr	r3, [r7, #12]
    ce44:	220e      	movs	r2, #14
    ce46:	5e9b      	ldrsh	r3, [r3, r2]
        if((x >= _width)            || // Clip right
    ce48:	2208      	movs	r2, #8
    ce4a:	18ba      	adds	r2, r7, r2
    ce4c:	2100      	movs	r1, #0
    ce4e:	5e52      	ldrsh	r2, [r2, r1]
    ce50:	429a      	cmp	r2, r3
    ce52:	db00      	blt.n	ce56 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
    ce54:	e2bd      	b.n	d3d2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           ((x + 6 * size - 1) < 0) || // Clip left
    ce56:	230a      	movs	r3, #10
    ce58:	18fb      	adds	r3, r7, r3
    ce5a:	2100      	movs	r1, #0
    ce5c:	5e59      	ldrsh	r1, [r3, r1]
    ce5e:	2350      	movs	r3, #80	; 0x50
    ce60:	18fb      	adds	r3, r7, r3
    ce62:	781a      	ldrb	r2, [r3, #0]
    ce64:	0013      	movs	r3, r2
    ce66:	005b      	lsls	r3, r3, #1
    ce68:	189b      	adds	r3, r3, r2
    ce6a:	005b      	lsls	r3, r3, #1
    ce6c:	18cb      	adds	r3, r1, r3
    ce6e:	3b01      	subs	r3, #1
           (y >= _height)           || // Clip bottom
    ce70:	2b00      	cmp	r3, #0
    ce72:	da00      	bge.n	ce76 <_ZN12Adafruit_GFX8drawCharEsshtth+0x76>
    ce74:	e2ad      	b.n	d3d2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           ((y + 8 * size - 1) < 0))   // Clip top
    ce76:	2308      	movs	r3, #8
    ce78:	18fb      	adds	r3, r7, r3
    ce7a:	2200      	movs	r2, #0
    ce7c:	5e9a      	ldrsh	r2, [r3, r2]
    ce7e:	2350      	movs	r3, #80	; 0x50
    ce80:	18fb      	adds	r3, r7, r3
    ce82:	781b      	ldrb	r3, [r3, #0]
    ce84:	00db      	lsls	r3, r3, #3
    ce86:	18d3      	adds	r3, r2, r3
    ce88:	3b01      	subs	r3, #1
           ((x + 6 * size - 1) < 0) || // Clip left
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	da00      	bge.n	ce90 <_ZN12Adafruit_GFX8drawCharEsshtth+0x90>
    ce8e:	e2a0      	b.n	d3d2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
    ce90:	68fb      	ldr	r3, [r7, #12]
    ce92:	7edb      	ldrb	r3, [r3, #27]
    ce94:	2201      	movs	r2, #1
    ce96:	4053      	eors	r3, r2
    ce98:	b2db      	uxtb	r3, r3
    ce9a:	2b00      	cmp	r3, #0
    ce9c:	d008      	beq.n	ceb0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb0>
    ce9e:	1dfb      	adds	r3, r7, #7
    cea0:	781b      	ldrb	r3, [r3, #0]
    cea2:	2baf      	cmp	r3, #175	; 0xaf
    cea4:	dd04      	ble.n	ceb0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb0>
    cea6:	1dfb      	adds	r3, r7, #7
    cea8:	781a      	ldrb	r2, [r3, #0]
    ceaa:	1dfb      	adds	r3, r7, #7
    ceac:	3201      	adds	r2, #1
    ceae:	701a      	strb	r2, [r3, #0]

        startWrite();
    ceb0:	68fb      	ldr	r3, [r7, #12]
    ceb2:	681b      	ldr	r3, [r3, #0]
    ceb4:	3314      	adds	r3, #20
    ceb6:	681b      	ldr	r3, [r3, #0]
    ceb8:	68fa      	ldr	r2, [r7, #12]
    ceba:	0010      	movs	r0, r2
    cebc:	4798      	blx	r3
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    cebe:	232f      	movs	r3, #47	; 0x2f
    cec0:	18fb      	adds	r3, r7, r3
    cec2:	2200      	movs	r2, #0
    cec4:	701a      	strb	r2, [r3, #0]
    cec6:	232f      	movs	r3, #47	; 0x2f
    cec8:	18fb      	adds	r3, r7, r3
    ceca:	781b      	ldrb	r3, [r3, #0]
    cecc:	b25b      	sxtb	r3, r3
    cece:	2b04      	cmp	r3, #4
    ced0:	dd00      	ble.n	ced4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd4>
    ced2:	e0fd      	b.n	d0d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2d0>
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    ced4:	1dfb      	adds	r3, r7, #7
    ced6:	781a      	ldrb	r2, [r3, #0]
    ced8:	0013      	movs	r3, r2
    ceda:	009b      	lsls	r3, r3, #2
    cedc:	189a      	adds	r2, r3, r2
    cede:	232f      	movs	r3, #47	; 0x2f
    cee0:	18fb      	adds	r3, r7, r3
    cee2:	781b      	ldrb	r3, [r3, #0]
    cee4:	b25b      	sxtb	r3, r3
    cee6:	18d2      	adds	r2, r2, r3
    cee8:	232e      	movs	r3, #46	; 0x2e
    ceea:	18fb      	adds	r3, r7, r3
    ceec:	49a3      	ldr	r1, [pc, #652]	; (d17c <_ZN12Adafruit_GFX8drawCharEsshtth+0x37c>)
    ceee:	5c8a      	ldrb	r2, [r1, r2]
    cef0:	701a      	strb	r2, [r3, #0]
            for(int8_t j=0; j<8; j++, line >>= 1) {
    cef2:	232d      	movs	r3, #45	; 0x2d
    cef4:	18fb      	adds	r3, r7, r3
    cef6:	2200      	movs	r2, #0
    cef8:	701a      	strb	r2, [r3, #0]
    cefa:	232d      	movs	r3, #45	; 0x2d
    cefc:	18fb      	adds	r3, r7, r3
    cefe:	781b      	ldrb	r3, [r3, #0]
    cf00:	b25b      	sxtb	r3, r3
    cf02:	2b07      	cmp	r3, #7
    cf04:	dd00      	ble.n	cf08 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
    cf06:	e0d8      	b.n	d0ba <_ZN12Adafruit_GFX8drawCharEsshtth+0x2ba>
                if(line & 1) {
    cf08:	232e      	movs	r3, #46	; 0x2e
    cf0a:	18fb      	adds	r3, r7, r3
    cf0c:	781b      	ldrb	r3, [r3, #0]
    cf0e:	2201      	movs	r2, #1
    cf10:	4013      	ands	r3, r2
    cf12:	d05c      	beq.n	cfce <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ce>
                    if(size == 1)
    cf14:	2350      	movs	r3, #80	; 0x50
    cf16:	18fb      	adds	r3, r7, r3
    cf18:	781b      	ldrb	r3, [r3, #0]
    cf1a:	2b01      	cmp	r3, #1
    cf1c:	d11f      	bne.n	cf5e <_ZN12Adafruit_GFX8drawCharEsshtth+0x15e>
                        writePixel(x+i, y+j, color);
    cf1e:	68fb      	ldr	r3, [r7, #12]
    cf20:	681b      	ldr	r3, [r3, #0]
    cf22:	3318      	adds	r3, #24
    cf24:	681c      	ldr	r4, [r3, #0]
    cf26:	232f      	movs	r3, #47	; 0x2f
    cf28:	18fb      	adds	r3, r7, r3
    cf2a:	781b      	ldrb	r3, [r3, #0]
    cf2c:	b25b      	sxtb	r3, r3
    cf2e:	b29a      	uxth	r2, r3
    cf30:	230a      	movs	r3, #10
    cf32:	18fb      	adds	r3, r7, r3
    cf34:	881b      	ldrh	r3, [r3, #0]
    cf36:	18d3      	adds	r3, r2, r3
    cf38:	b29b      	uxth	r3, r3
    cf3a:	b219      	sxth	r1, r3
    cf3c:	232d      	movs	r3, #45	; 0x2d
    cf3e:	18fb      	adds	r3, r7, r3
    cf40:	781b      	ldrb	r3, [r3, #0]
    cf42:	b25b      	sxtb	r3, r3
    cf44:	b29a      	uxth	r2, r3
    cf46:	2308      	movs	r3, #8
    cf48:	18fb      	adds	r3, r7, r3
    cf4a:	881b      	ldrh	r3, [r3, #0]
    cf4c:	18d3      	adds	r3, r2, r3
    cf4e:	b29b      	uxth	r3, r3
    cf50:	b21a      	sxth	r2, r3
    cf52:	2348      	movs	r3, #72	; 0x48
    cf54:	18fb      	adds	r3, r7, r3
    cf56:	881b      	ldrh	r3, [r3, #0]
    cf58:	68f8      	ldr	r0, [r7, #12]
    cf5a:	47a0      	blx	r4
    cf5c:	e09b      	b.n	d096 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
    cf5e:	68fb      	ldr	r3, [r7, #12]
    cf60:	681b      	ldr	r3, [r3, #0]
    cf62:	331c      	adds	r3, #28
    cf64:	681c      	ldr	r4, [r3, #0]
    cf66:	232f      	movs	r3, #47	; 0x2f
    cf68:	18fb      	adds	r3, r7, r3
    cf6a:	781b      	ldrb	r3, [r3, #0]
    cf6c:	b25b      	sxtb	r3, r3
    cf6e:	b29b      	uxth	r3, r3
    cf70:	2250      	movs	r2, #80	; 0x50
    cf72:	18ba      	adds	r2, r7, r2
    cf74:	7812      	ldrb	r2, [r2, #0]
    cf76:	b292      	uxth	r2, r2
    cf78:	4353      	muls	r3, r2
    cf7a:	b29a      	uxth	r2, r3
    cf7c:	230a      	movs	r3, #10
    cf7e:	18fb      	adds	r3, r7, r3
    cf80:	881b      	ldrh	r3, [r3, #0]
    cf82:	18d3      	adds	r3, r2, r3
    cf84:	b29b      	uxth	r3, r3
    cf86:	b219      	sxth	r1, r3
    cf88:	232d      	movs	r3, #45	; 0x2d
    cf8a:	18fb      	adds	r3, r7, r3
    cf8c:	781b      	ldrb	r3, [r3, #0]
    cf8e:	b25b      	sxtb	r3, r3
    cf90:	b29b      	uxth	r3, r3
    cf92:	2250      	movs	r2, #80	; 0x50
    cf94:	18ba      	adds	r2, r7, r2
    cf96:	7812      	ldrb	r2, [r2, #0]
    cf98:	b292      	uxth	r2, r2
    cf9a:	4353      	muls	r3, r2
    cf9c:	b29a      	uxth	r2, r3
    cf9e:	2308      	movs	r3, #8
    cfa0:	18fb      	adds	r3, r7, r3
    cfa2:	881b      	ldrh	r3, [r3, #0]
    cfa4:	18d3      	adds	r3, r2, r3
    cfa6:	b29b      	uxth	r3, r3
    cfa8:	b21d      	sxth	r5, r3
    cfaa:	2350      	movs	r3, #80	; 0x50
    cfac:	18fb      	adds	r3, r7, r3
    cfae:	781b      	ldrb	r3, [r3, #0]
    cfb0:	b21e      	sxth	r6, r3
    cfb2:	2350      	movs	r3, #80	; 0x50
    cfb4:	18fb      	adds	r3, r7, r3
    cfb6:	781b      	ldrb	r3, [r3, #0]
    cfb8:	b21b      	sxth	r3, r3
    cfba:	68f8      	ldr	r0, [r7, #12]
    cfbc:	2248      	movs	r2, #72	; 0x48
    cfbe:	18ba      	adds	r2, r7, r2
    cfc0:	8812      	ldrh	r2, [r2, #0]
    cfc2:	9201      	str	r2, [sp, #4]
    cfc4:	9300      	str	r3, [sp, #0]
    cfc6:	0033      	movs	r3, r6
    cfc8:	002a      	movs	r2, r5
    cfca:	47a0      	blx	r4
    cfcc:	e063      	b.n	d096 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                } else if(bg != color) {
    cfce:	234c      	movs	r3, #76	; 0x4c
    cfd0:	18fb      	adds	r3, r7, r3
    cfd2:	2248      	movs	r2, #72	; 0x48
    cfd4:	18b9      	adds	r1, r7, r2
    cfd6:	881a      	ldrh	r2, [r3, #0]
    cfd8:	880b      	ldrh	r3, [r1, #0]
    cfda:	429a      	cmp	r2, r3
    cfdc:	d05b      	beq.n	d096 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    if(size == 1)
    cfde:	2350      	movs	r3, #80	; 0x50
    cfe0:	18fb      	adds	r3, r7, r3
    cfe2:	781b      	ldrb	r3, [r3, #0]
    cfe4:	2b01      	cmp	r3, #1
    cfe6:	d11f      	bne.n	d028 <_ZN12Adafruit_GFX8drawCharEsshtth+0x228>
                        writePixel(x+i, y+j, bg);
    cfe8:	68fb      	ldr	r3, [r7, #12]
    cfea:	681b      	ldr	r3, [r3, #0]
    cfec:	3318      	adds	r3, #24
    cfee:	681c      	ldr	r4, [r3, #0]
    cff0:	232f      	movs	r3, #47	; 0x2f
    cff2:	18fb      	adds	r3, r7, r3
    cff4:	781b      	ldrb	r3, [r3, #0]
    cff6:	b25b      	sxtb	r3, r3
    cff8:	b29a      	uxth	r2, r3
    cffa:	230a      	movs	r3, #10
    cffc:	18fb      	adds	r3, r7, r3
    cffe:	881b      	ldrh	r3, [r3, #0]
    d000:	18d3      	adds	r3, r2, r3
    d002:	b29b      	uxth	r3, r3
    d004:	b219      	sxth	r1, r3
    d006:	232d      	movs	r3, #45	; 0x2d
    d008:	18fb      	adds	r3, r7, r3
    d00a:	781b      	ldrb	r3, [r3, #0]
    d00c:	b25b      	sxtb	r3, r3
    d00e:	b29a      	uxth	r2, r3
    d010:	2308      	movs	r3, #8
    d012:	18fb      	adds	r3, r7, r3
    d014:	881b      	ldrh	r3, [r3, #0]
    d016:	18d3      	adds	r3, r2, r3
    d018:	b29b      	uxth	r3, r3
    d01a:	b21a      	sxth	r2, r3
    d01c:	234c      	movs	r3, #76	; 0x4c
    d01e:	18fb      	adds	r3, r7, r3
    d020:	881b      	ldrh	r3, [r3, #0]
    d022:	68f8      	ldr	r0, [r7, #12]
    d024:	47a0      	blx	r4
    d026:	e036      	b.n	d096 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    d028:	68fb      	ldr	r3, [r7, #12]
    d02a:	681b      	ldr	r3, [r3, #0]
    d02c:	331c      	adds	r3, #28
    d02e:	681c      	ldr	r4, [r3, #0]
    d030:	232f      	movs	r3, #47	; 0x2f
    d032:	18fb      	adds	r3, r7, r3
    d034:	781b      	ldrb	r3, [r3, #0]
    d036:	b25b      	sxtb	r3, r3
    d038:	b29b      	uxth	r3, r3
    d03a:	2250      	movs	r2, #80	; 0x50
    d03c:	18ba      	adds	r2, r7, r2
    d03e:	7812      	ldrb	r2, [r2, #0]
    d040:	b292      	uxth	r2, r2
    d042:	4353      	muls	r3, r2
    d044:	b29a      	uxth	r2, r3
    d046:	230a      	movs	r3, #10
    d048:	18fb      	adds	r3, r7, r3
    d04a:	881b      	ldrh	r3, [r3, #0]
    d04c:	18d3      	adds	r3, r2, r3
    d04e:	b29b      	uxth	r3, r3
    d050:	b219      	sxth	r1, r3
    d052:	232d      	movs	r3, #45	; 0x2d
    d054:	18fb      	adds	r3, r7, r3
    d056:	781b      	ldrb	r3, [r3, #0]
    d058:	b25b      	sxtb	r3, r3
    d05a:	b29b      	uxth	r3, r3
    d05c:	2250      	movs	r2, #80	; 0x50
    d05e:	18ba      	adds	r2, r7, r2
    d060:	7812      	ldrb	r2, [r2, #0]
    d062:	b292      	uxth	r2, r2
    d064:	4353      	muls	r3, r2
    d066:	b29a      	uxth	r2, r3
    d068:	2308      	movs	r3, #8
    d06a:	18fb      	adds	r3, r7, r3
    d06c:	881b      	ldrh	r3, [r3, #0]
    d06e:	18d3      	adds	r3, r2, r3
    d070:	b29b      	uxth	r3, r3
    d072:	b21d      	sxth	r5, r3
    d074:	2350      	movs	r3, #80	; 0x50
    d076:	18fb      	adds	r3, r7, r3
    d078:	781b      	ldrb	r3, [r3, #0]
    d07a:	b21e      	sxth	r6, r3
    d07c:	2350      	movs	r3, #80	; 0x50
    d07e:	18fb      	adds	r3, r7, r3
    d080:	781b      	ldrb	r3, [r3, #0]
    d082:	b21b      	sxth	r3, r3
    d084:	68f8      	ldr	r0, [r7, #12]
    d086:	224c      	movs	r2, #76	; 0x4c
    d088:	18ba      	adds	r2, r7, r2
    d08a:	8812      	ldrh	r2, [r2, #0]
    d08c:	9201      	str	r2, [sp, #4]
    d08e:	9300      	str	r3, [sp, #0]
    d090:	0033      	movs	r3, r6
    d092:	002a      	movs	r2, r5
    d094:	47a0      	blx	r4
            for(int8_t j=0; j<8; j++, line >>= 1) {
    d096:	232d      	movs	r3, #45	; 0x2d
    d098:	18fb      	adds	r3, r7, r3
    d09a:	781b      	ldrb	r3, [r3, #0]
    d09c:	b25b      	sxtb	r3, r3
    d09e:	b2db      	uxtb	r3, r3
    d0a0:	3301      	adds	r3, #1
    d0a2:	b2da      	uxtb	r2, r3
    d0a4:	232d      	movs	r3, #45	; 0x2d
    d0a6:	18fb      	adds	r3, r7, r3
    d0a8:	701a      	strb	r2, [r3, #0]
    d0aa:	232e      	movs	r3, #46	; 0x2e
    d0ac:	18fb      	adds	r3, r7, r3
    d0ae:	781b      	ldrb	r3, [r3, #0]
    d0b0:	105a      	asrs	r2, r3, #1
    d0b2:	232e      	movs	r3, #46	; 0x2e
    d0b4:	18fb      	adds	r3, r7, r3
    d0b6:	701a      	strb	r2, [r3, #0]
    d0b8:	e71f      	b.n	cefa <_ZN12Adafruit_GFX8drawCharEsshtth+0xfa>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    d0ba:	232f      	movs	r3, #47	; 0x2f
    d0bc:	18fb      	adds	r3, r7, r3
    d0be:	781b      	ldrb	r3, [r3, #0]
    d0c0:	b25b      	sxtb	r3, r3
    d0c2:	b2db      	uxtb	r3, r3
    d0c4:	3301      	adds	r3, #1
    d0c6:	b2da      	uxtb	r2, r3
    d0c8:	232f      	movs	r3, #47	; 0x2f
    d0ca:	18fb      	adds	r3, r7, r3
    d0cc:	701a      	strb	r2, [r3, #0]
    d0ce:	e6fa      	b.n	cec6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc6>
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
    d0d0:	234c      	movs	r3, #76	; 0x4c
    d0d2:	18fb      	adds	r3, r7, r3
    d0d4:	2248      	movs	r2, #72	; 0x48
    d0d6:	18b9      	adds	r1, r7, r2
    d0d8:	881a      	ldrh	r2, [r3, #0]
    d0da:	880b      	ldrh	r3, [r1, #0]
    d0dc:	429a      	cmp	r2, r3
    d0de:	d044      	beq.n	d16a <_ZN12Adafruit_GFX8drawCharEsshtth+0x36a>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
    d0e0:	2350      	movs	r3, #80	; 0x50
    d0e2:	18fb      	adds	r3, r7, r3
    d0e4:	781b      	ldrb	r3, [r3, #0]
    d0e6:	2b01      	cmp	r3, #1
    d0e8:	d115      	bne.n	d116 <_ZN12Adafruit_GFX8drawCharEsshtth+0x316>
    d0ea:	68fb      	ldr	r3, [r7, #12]
    d0ec:	681b      	ldr	r3, [r3, #0]
    d0ee:	3320      	adds	r3, #32
    d0f0:	681c      	ldr	r4, [r3, #0]
    d0f2:	230a      	movs	r3, #10
    d0f4:	18fb      	adds	r3, r7, r3
    d0f6:	881b      	ldrh	r3, [r3, #0]
    d0f8:	3305      	adds	r3, #5
    d0fa:	b29b      	uxth	r3, r3
    d0fc:	b219      	sxth	r1, r3
    d0fe:	2308      	movs	r3, #8
    d100:	18fb      	adds	r3, r7, r3
    d102:	2200      	movs	r2, #0
    d104:	5e9a      	ldrsh	r2, [r3, r2]
    d106:	68f8      	ldr	r0, [r7, #12]
    d108:	234c      	movs	r3, #76	; 0x4c
    d10a:	18fb      	adds	r3, r7, r3
    d10c:	881b      	ldrh	r3, [r3, #0]
    d10e:	9300      	str	r3, [sp, #0]
    d110:	2308      	movs	r3, #8
    d112:	47a0      	blx	r4
    d114:	e029      	b.n	d16a <_ZN12Adafruit_GFX8drawCharEsshtth+0x36a>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
    d116:	68fb      	ldr	r3, [r7, #12]
    d118:	681b      	ldr	r3, [r3, #0]
    d11a:	331c      	adds	r3, #28
    d11c:	681c      	ldr	r4, [r3, #0]
    d11e:	2350      	movs	r3, #80	; 0x50
    d120:	18fb      	adds	r3, r7, r3
    d122:	781b      	ldrb	r3, [r3, #0]
    d124:	b29b      	uxth	r3, r3
    d126:	1c1a      	adds	r2, r3, #0
    d128:	0092      	lsls	r2, r2, #2
    d12a:	18d3      	adds	r3, r2, r3
    d12c:	b29a      	uxth	r2, r3
    d12e:	230a      	movs	r3, #10
    d130:	18fb      	adds	r3, r7, r3
    d132:	881b      	ldrh	r3, [r3, #0]
    d134:	18d3      	adds	r3, r2, r3
    d136:	b29b      	uxth	r3, r3
    d138:	b219      	sxth	r1, r3
    d13a:	2350      	movs	r3, #80	; 0x50
    d13c:	18fb      	adds	r3, r7, r3
    d13e:	781b      	ldrb	r3, [r3, #0]
    d140:	b21e      	sxth	r6, r3
    d142:	2350      	movs	r3, #80	; 0x50
    d144:	18fb      	adds	r3, r7, r3
    d146:	781b      	ldrb	r3, [r3, #0]
    d148:	b29b      	uxth	r3, r3
    d14a:	00db      	lsls	r3, r3, #3
    d14c:	b29b      	uxth	r3, r3
    d14e:	b21b      	sxth	r3, r3
    d150:	2208      	movs	r2, #8
    d152:	18ba      	adds	r2, r7, r2
    d154:	2500      	movs	r5, #0
    d156:	5f55      	ldrsh	r5, [r2, r5]
    d158:	68f8      	ldr	r0, [r7, #12]
    d15a:	224c      	movs	r2, #76	; 0x4c
    d15c:	18ba      	adds	r2, r7, r2
    d15e:	8812      	ldrh	r2, [r2, #0]
    d160:	9201      	str	r2, [sp, #4]
    d162:	9300      	str	r3, [sp, #0]
    d164:	0033      	movs	r3, r6
    d166:	002a      	movs	r2, r5
    d168:	47a0      	blx	r4
        }
        endWrite();
    d16a:	68fb      	ldr	r3, [r7, #12]
    d16c:	681b      	ldr	r3, [r3, #0]
    d16e:	332c      	adds	r3, #44	; 0x2c
    d170:	681b      	ldr	r3, [r3, #0]
    d172:	68fa      	ldr	r2, [r7, #12]
    d174:	0010      	movs	r0, r2
    d176:	4798      	blx	r3
    d178:	e12c      	b.n	d3d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d4>
    d17a:	46c0      	nop			; (mov r8, r8)
    d17c:	00013d4c 	.word	0x00013d4c

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    d180:	68fb      	ldr	r3, [r7, #12]
    d182:	69db      	ldr	r3, [r3, #28]
    d184:	3308      	adds	r3, #8
    d186:	781a      	ldrb	r2, [r3, #0]
    d188:	1dfb      	adds	r3, r7, #7
    d18a:	1df9      	adds	r1, r7, #7
    d18c:	7809      	ldrb	r1, [r1, #0]
    d18e:	1a8a      	subs	r2, r1, r2
    d190:	701a      	strb	r2, [r3, #0]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    d192:	1dfb      	adds	r3, r7, #7
    d194:	781b      	ldrb	r3, [r3, #0]
    d196:	00da      	lsls	r2, r3, #3
    d198:	68fb      	ldr	r3, [r7, #12]
    d19a:	69db      	ldr	r3, [r3, #28]
    d19c:	3304      	adds	r3, #4
    d19e:	681b      	ldr	r3, [r3, #0]
    d1a0:	18d3      	adds	r3, r2, r3
    d1a2:	61fb      	str	r3, [r7, #28]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    d1a4:	68fb      	ldr	r3, [r7, #12]
    d1a6:	69db      	ldr	r3, [r3, #28]
    d1a8:	681b      	ldr	r3, [r3, #0]
    d1aa:	61bb      	str	r3, [r7, #24]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    d1ac:	69fa      	ldr	r2, [r7, #28]
    d1ae:	232a      	movs	r3, #42	; 0x2a
    d1b0:	18fb      	adds	r3, r7, r3
    d1b2:	8812      	ldrh	r2, [r2, #0]
    d1b4:	801a      	strh	r2, [r3, #0]
        uint8_t  w  = pgm_read_byte(&glyph->width),
    d1b6:	69fb      	ldr	r3, [r7, #28]
    d1b8:	1c9a      	adds	r2, r3, #2
    d1ba:	2317      	movs	r3, #23
    d1bc:	18fb      	adds	r3, r7, r3
    d1be:	7812      	ldrb	r2, [r2, #0]
    d1c0:	701a      	strb	r2, [r3, #0]
                 h  = pgm_read_byte(&glyph->height);
    d1c2:	69fb      	ldr	r3, [r7, #28]
    d1c4:	1cda      	adds	r2, r3, #3
    d1c6:	2316      	movs	r3, #22
    d1c8:	18fb      	adds	r3, r7, r3
    d1ca:	7812      	ldrb	r2, [r2, #0]
    d1cc:	701a      	strb	r2, [r3, #0]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
    d1ce:	69fb      	ldr	r3, [r7, #28]
    d1d0:	3305      	adds	r3, #5
    d1d2:	781a      	ldrb	r2, [r3, #0]
    d1d4:	2315      	movs	r3, #21
    d1d6:	18fb      	adds	r3, r7, r3
    d1d8:	701a      	strb	r2, [r3, #0]
                 yo = pgm_read_byte(&glyph->yOffset);
    d1da:	69fb      	ldr	r3, [r7, #28]
    d1dc:	3306      	adds	r3, #6
    d1de:	781a      	ldrb	r2, [r3, #0]
    d1e0:	2314      	movs	r3, #20
    d1e2:	18fb      	adds	r3, r7, r3
    d1e4:	701a      	strb	r2, [r3, #0]
        uint8_t  xx, yy, bits = 0, bit = 0;
    d1e6:	2327      	movs	r3, #39	; 0x27
    d1e8:	18fb      	adds	r3, r7, r3
    d1ea:	2200      	movs	r2, #0
    d1ec:	701a      	strb	r2, [r3, #0]
    d1ee:	2326      	movs	r3, #38	; 0x26
    d1f0:	18fb      	adds	r3, r7, r3
    d1f2:	2200      	movs	r2, #0
    d1f4:	701a      	strb	r2, [r3, #0]
        int16_t  xo16 = 0, yo16 = 0;
    d1f6:	2324      	movs	r3, #36	; 0x24
    d1f8:	18fb      	adds	r3, r7, r3
    d1fa:	2200      	movs	r2, #0
    d1fc:	801a      	strh	r2, [r3, #0]
    d1fe:	2322      	movs	r3, #34	; 0x22
    d200:	18fb      	adds	r3, r7, r3
    d202:	2200      	movs	r2, #0
    d204:	801a      	strh	r2, [r3, #0]

        if(size > 1) {
    d206:	2350      	movs	r3, #80	; 0x50
    d208:	18fb      	adds	r3, r7, r3
    d20a:	781b      	ldrb	r3, [r3, #0]
    d20c:	2b01      	cmp	r3, #1
    d20e:	dd0d      	ble.n	d22c <_ZN12Adafruit_GFX8drawCharEsshtth+0x42c>
            xo16 = xo;
    d210:	2324      	movs	r3, #36	; 0x24
    d212:	18fb      	adds	r3, r7, r3
    d214:	2215      	movs	r2, #21
    d216:	18ba      	adds	r2, r7, r2
    d218:	7812      	ldrb	r2, [r2, #0]
    d21a:	b252      	sxtb	r2, r2
    d21c:	801a      	strh	r2, [r3, #0]
            yo16 = yo;
    d21e:	2322      	movs	r3, #34	; 0x22
    d220:	18fb      	adds	r3, r7, r3
    d222:	2214      	movs	r2, #20
    d224:	18ba      	adds	r2, r7, r2
    d226:	7812      	ldrb	r2, [r2, #0]
    d228:	b252      	sxtb	r2, r2
    d22a:	801a      	strh	r2, [r3, #0]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
    d22c:	68fb      	ldr	r3, [r7, #12]
    d22e:	681b      	ldr	r3, [r3, #0]
    d230:	3314      	adds	r3, #20
    d232:	681b      	ldr	r3, [r3, #0]
    d234:	68fa      	ldr	r2, [r7, #12]
    d236:	0010      	movs	r0, r2
    d238:	4798      	blx	r3
        for(yy=0; yy<h; yy++) {
    d23a:	2328      	movs	r3, #40	; 0x28
    d23c:	18fb      	adds	r3, r7, r3
    d23e:	2200      	movs	r2, #0
    d240:	701a      	strb	r2, [r3, #0]
    d242:	2328      	movs	r3, #40	; 0x28
    d244:	18fb      	adds	r3, r7, r3
    d246:	781a      	ldrb	r2, [r3, #0]
    d248:	2316      	movs	r3, #22
    d24a:	18fb      	adds	r3, r7, r3
    d24c:	781b      	ldrb	r3, [r3, #0]
    d24e:	429a      	cmp	r2, r3
    d250:	db00      	blt.n	d254 <_ZN12Adafruit_GFX8drawCharEsshtth+0x454>
    d252:	e0b6      	b.n	d3c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5c2>
            for(xx=0; xx<w; xx++) {
    d254:	2329      	movs	r3, #41	; 0x29
    d256:	18fb      	adds	r3, r7, r3
    d258:	2200      	movs	r2, #0
    d25a:	701a      	strb	r2, [r3, #0]
    d25c:	2329      	movs	r3, #41	; 0x29
    d25e:	18fb      	adds	r3, r7, r3
    d260:	781a      	ldrb	r2, [r3, #0]
    d262:	2317      	movs	r3, #23
    d264:	18fb      	adds	r3, r7, r3
    d266:	781b      	ldrb	r3, [r3, #0]
    d268:	429a      	cmp	r2, r3
    d26a:	db00      	blt.n	d26e <_ZN12Adafruit_GFX8drawCharEsshtth+0x46e>
    d26c:	e0a1      	b.n	d3b2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5b2>
                if(!(bit++ & 7)) {
    d26e:	2326      	movs	r3, #38	; 0x26
    d270:	18fb      	adds	r3, r7, r3
    d272:	781b      	ldrb	r3, [r3, #0]
    d274:	2226      	movs	r2, #38	; 0x26
    d276:	18ba      	adds	r2, r7, r2
    d278:	1c59      	adds	r1, r3, #1
    d27a:	7011      	strb	r1, [r2, #0]
    d27c:	001a      	movs	r2, r3
    d27e:	2307      	movs	r3, #7
    d280:	4013      	ands	r3, r2
    d282:	425a      	negs	r2, r3
    d284:	4153      	adcs	r3, r2
    d286:	b2db      	uxtb	r3, r3
    d288:	2b00      	cmp	r3, #0
    d28a:	d00d      	beq.n	d2a8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4a8>
                    bits = pgm_read_byte(&bitmap[bo++]);
    d28c:	232a      	movs	r3, #42	; 0x2a
    d28e:	18fb      	adds	r3, r7, r3
    d290:	881b      	ldrh	r3, [r3, #0]
    d292:	222a      	movs	r2, #42	; 0x2a
    d294:	18ba      	adds	r2, r7, r2
    d296:	1c59      	adds	r1, r3, #1
    d298:	8011      	strh	r1, [r2, #0]
    d29a:	001a      	movs	r2, r3
    d29c:	69bb      	ldr	r3, [r7, #24]
    d29e:	189a      	adds	r2, r3, r2
    d2a0:	2327      	movs	r3, #39	; 0x27
    d2a2:	18fb      	adds	r3, r7, r3
    d2a4:	7812      	ldrb	r2, [r2, #0]
    d2a6:	701a      	strb	r2, [r3, #0]
                }
                if(bits & 0x80) {
    d2a8:	2327      	movs	r3, #39	; 0x27
    d2aa:	18fb      	adds	r3, r7, r3
    d2ac:	781b      	ldrb	r3, [r3, #0]
    d2ae:	b25b      	sxtb	r3, r3
    d2b0:	2b00      	cmp	r3, #0
    d2b2:	da6f      	bge.n	d394 <_ZN12Adafruit_GFX8drawCharEsshtth+0x594>
                    if(size == 1) {
    d2b4:	2350      	movs	r3, #80	; 0x50
    d2b6:	18fb      	adds	r3, r7, r3
    d2b8:	781b      	ldrb	r3, [r3, #0]
    d2ba:	2b01      	cmp	r3, #1
    d2bc:	d12b      	bne.n	d316 <_ZN12Adafruit_GFX8drawCharEsshtth+0x516>
                        writePixel(x+xo+xx, y+yo+yy, color);
    d2be:	68fb      	ldr	r3, [r7, #12]
    d2c0:	681b      	ldr	r3, [r3, #0]
    d2c2:	3318      	adds	r3, #24
    d2c4:	681c      	ldr	r4, [r3, #0]
    d2c6:	2315      	movs	r3, #21
    d2c8:	18fb      	adds	r3, r7, r3
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	b25b      	sxtb	r3, r3
    d2ce:	b29a      	uxth	r2, r3
    d2d0:	230a      	movs	r3, #10
    d2d2:	18fb      	adds	r3, r7, r3
    d2d4:	881b      	ldrh	r3, [r3, #0]
    d2d6:	18d3      	adds	r3, r2, r3
    d2d8:	b29a      	uxth	r2, r3
    d2da:	2329      	movs	r3, #41	; 0x29
    d2dc:	18fb      	adds	r3, r7, r3
    d2de:	781b      	ldrb	r3, [r3, #0]
    d2e0:	b29b      	uxth	r3, r3
    d2e2:	18d3      	adds	r3, r2, r3
    d2e4:	b29b      	uxth	r3, r3
    d2e6:	b219      	sxth	r1, r3
    d2e8:	2314      	movs	r3, #20
    d2ea:	18fb      	adds	r3, r7, r3
    d2ec:	781b      	ldrb	r3, [r3, #0]
    d2ee:	b25b      	sxtb	r3, r3
    d2f0:	b29a      	uxth	r2, r3
    d2f2:	2308      	movs	r3, #8
    d2f4:	18fb      	adds	r3, r7, r3
    d2f6:	881b      	ldrh	r3, [r3, #0]
    d2f8:	18d3      	adds	r3, r2, r3
    d2fa:	b29a      	uxth	r2, r3
    d2fc:	2328      	movs	r3, #40	; 0x28
    d2fe:	18fb      	adds	r3, r7, r3
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	b29b      	uxth	r3, r3
    d304:	18d3      	adds	r3, r2, r3
    d306:	b29b      	uxth	r3, r3
    d308:	b21a      	sxth	r2, r3
    d30a:	2348      	movs	r3, #72	; 0x48
    d30c:	18fb      	adds	r3, r7, r3
    d30e:	881b      	ldrh	r3, [r3, #0]
    d310:	68f8      	ldr	r0, [r7, #12]
    d312:	47a0      	blx	r4
    d314:	e03e      	b.n	d394 <_ZN12Adafruit_GFX8drawCharEsshtth+0x594>
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
                          size, size, color);
    d316:	68fb      	ldr	r3, [r7, #12]
    d318:	681b      	ldr	r3, [r3, #0]
    d31a:	331c      	adds	r3, #28
    d31c:	681c      	ldr	r4, [r3, #0]
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    d31e:	2324      	movs	r3, #36	; 0x24
    d320:	18fb      	adds	r3, r7, r3
    d322:	2200      	movs	r2, #0
    d324:	5e9a      	ldrsh	r2, [r3, r2]
    d326:	2329      	movs	r3, #41	; 0x29
    d328:	18fb      	adds	r3, r7, r3
    d32a:	781b      	ldrb	r3, [r3, #0]
    d32c:	18d3      	adds	r3, r2, r3
    d32e:	b29b      	uxth	r3, r3
    d330:	2250      	movs	r2, #80	; 0x50
    d332:	18ba      	adds	r2, r7, r2
    d334:	7812      	ldrb	r2, [r2, #0]
    d336:	b292      	uxth	r2, r2
    d338:	4353      	muls	r3, r2
    d33a:	b29a      	uxth	r2, r3
    d33c:	230a      	movs	r3, #10
    d33e:	18fb      	adds	r3, r7, r3
    d340:	881b      	ldrh	r3, [r3, #0]
    d342:	18d3      	adds	r3, r2, r3
    d344:	b29b      	uxth	r3, r3
    d346:	b219      	sxth	r1, r3
    d348:	2322      	movs	r3, #34	; 0x22
    d34a:	18fb      	adds	r3, r7, r3
    d34c:	2200      	movs	r2, #0
    d34e:	5e9a      	ldrsh	r2, [r3, r2]
    d350:	2328      	movs	r3, #40	; 0x28
    d352:	18fb      	adds	r3, r7, r3
    d354:	781b      	ldrb	r3, [r3, #0]
    d356:	18d3      	adds	r3, r2, r3
    d358:	b29b      	uxth	r3, r3
    d35a:	2250      	movs	r2, #80	; 0x50
    d35c:	18ba      	adds	r2, r7, r2
    d35e:	7812      	ldrb	r2, [r2, #0]
    d360:	b292      	uxth	r2, r2
    d362:	4353      	muls	r3, r2
    d364:	b29a      	uxth	r2, r3
    d366:	2308      	movs	r3, #8
    d368:	18fb      	adds	r3, r7, r3
    d36a:	881b      	ldrh	r3, [r3, #0]
    d36c:	18d3      	adds	r3, r2, r3
    d36e:	b29b      	uxth	r3, r3
    d370:	b21d      	sxth	r5, r3
    d372:	2350      	movs	r3, #80	; 0x50
    d374:	18fb      	adds	r3, r7, r3
    d376:	781b      	ldrb	r3, [r3, #0]
    d378:	b21e      	sxth	r6, r3
    d37a:	2350      	movs	r3, #80	; 0x50
    d37c:	18fb      	adds	r3, r7, r3
    d37e:	781b      	ldrb	r3, [r3, #0]
    d380:	b21b      	sxth	r3, r3
                          size, size, color);
    d382:	68f8      	ldr	r0, [r7, #12]
    d384:	2248      	movs	r2, #72	; 0x48
    d386:	18ba      	adds	r2, r7, r2
    d388:	8812      	ldrh	r2, [r2, #0]
    d38a:	9201      	str	r2, [sp, #4]
    d38c:	9300      	str	r3, [sp, #0]
    d38e:	0033      	movs	r3, r6
    d390:	002a      	movs	r2, r5
    d392:	47a0      	blx	r4
                    }
                }
                bits <<= 1;
    d394:	2327      	movs	r3, #39	; 0x27
    d396:	18fa      	adds	r2, r7, r3
    d398:	2327      	movs	r3, #39	; 0x27
    d39a:	18fb      	adds	r3, r7, r3
    d39c:	781b      	ldrb	r3, [r3, #0]
    d39e:	18db      	adds	r3, r3, r3
    d3a0:	7013      	strb	r3, [r2, #0]
            for(xx=0; xx<w; xx++) {
    d3a2:	2329      	movs	r3, #41	; 0x29
    d3a4:	18fb      	adds	r3, r7, r3
    d3a6:	781a      	ldrb	r2, [r3, #0]
    d3a8:	2329      	movs	r3, #41	; 0x29
    d3aa:	18fb      	adds	r3, r7, r3
    d3ac:	3201      	adds	r2, #1
    d3ae:	701a      	strb	r2, [r3, #0]
    d3b0:	e754      	b.n	d25c <_ZN12Adafruit_GFX8drawCharEsshtth+0x45c>
        for(yy=0; yy<h; yy++) {
    d3b2:	2328      	movs	r3, #40	; 0x28
    d3b4:	18fb      	adds	r3, r7, r3
    d3b6:	781a      	ldrb	r2, [r3, #0]
    d3b8:	2328      	movs	r3, #40	; 0x28
    d3ba:	18fb      	adds	r3, r7, r3
    d3bc:	3201      	adds	r2, #1
    d3be:	701a      	strb	r2, [r3, #0]
    d3c0:	e73f      	b.n	d242 <_ZN12Adafruit_GFX8drawCharEsshtth+0x442>
            }
        }
        endWrite();
    d3c2:	68fb      	ldr	r3, [r7, #12]
    d3c4:	681b      	ldr	r3, [r3, #0]
    d3c6:	332c      	adds	r3, #44	; 0x2c
    d3c8:	681b      	ldr	r3, [r3, #0]
    d3ca:	68fa      	ldr	r2, [r7, #12]
    d3cc:	0010      	movs	r0, r2
    d3ce:	4798      	blx	r3
    d3d0:	e000      	b.n	d3d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d4>
            return;
    d3d2:	46c0      	nop			; (mov r8, r8)

    } // End classic vs custom font
}
    d3d4:	46bd      	mov	sp, r7
    d3d6:	b00d      	add	sp, #52	; 0x34
    d3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3da:	46c0      	nop			; (mov r8, r8)

0000d3dc <_ZN12Adafruit_GFX5writeEh>:

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
    d3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3de:	b08b      	sub	sp, #44	; 0x2c
    d3e0:	af04      	add	r7, sp, #16
    d3e2:	6078      	str	r0, [r7, #4]
    d3e4:	000a      	movs	r2, r1
    d3e6:	1cfb      	adds	r3, r7, #3
    d3e8:	701a      	strb	r2, [r3, #0]
#else
void Adafruit_GFX::write(uint8_t c) {
#endif
    if(!gfxFont) { // 'Classic' built-in font
    d3ea:	687b      	ldr	r3, [r7, #4]
    d3ec:	69db      	ldr	r3, [r3, #28]
    d3ee:	2b00      	cmp	r3, #0
    d3f0:	d16a      	bne.n	d4c8 <_ZN12Adafruit_GFX5writeEh+0xec>

        if(c == '\n') {                        // Newline?
    d3f2:	1cfb      	adds	r3, r7, #3
    d3f4:	781b      	ldrb	r3, [r3, #0]
    d3f6:	2b0a      	cmp	r3, #10
    d3f8:	d111      	bne.n	d41e <_ZN12Adafruit_GFX5writeEh+0x42>
            cursor_x  = 0;                     // Reset x to zero,
    d3fa:	687b      	ldr	r3, [r7, #4]
    d3fc:	2200      	movs	r2, #0
    d3fe:	821a      	strh	r2, [r3, #16]
            cursor_y += textsize * 8;          // advance y one line
    d400:	687b      	ldr	r3, [r7, #4]
    d402:	2212      	movs	r2, #18
    d404:	5e9b      	ldrsh	r3, [r3, r2]
    d406:	b29a      	uxth	r2, r3
    d408:	687b      	ldr	r3, [r7, #4]
    d40a:	7e1b      	ldrb	r3, [r3, #24]
    d40c:	b29b      	uxth	r3, r3
    d40e:	00db      	lsls	r3, r3, #3
    d410:	b29b      	uxth	r3, r3
    d412:	18d3      	adds	r3, r2, r3
    d414:	b29b      	uxth	r3, r3
    d416:	b21a      	sxth	r2, r3
    d418:	687b      	ldr	r3, [r7, #4]
    d41a:	825a      	strh	r2, [r3, #18]
    d41c:	e110      	b.n	d640 <_ZN12Adafruit_GFX5writeEh+0x264>
        } else if(c != '\r') {                 // Ignore carriage returns
    d41e:	1cfb      	adds	r3, r7, #3
    d420:	781b      	ldrb	r3, [r3, #0]
    d422:	2b0d      	cmp	r3, #13
    d424:	d100      	bne.n	d428 <_ZN12Adafruit_GFX5writeEh+0x4c>
    d426:	e10b      	b.n	d640 <_ZN12Adafruit_GFX5writeEh+0x264>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
    d428:	687b      	ldr	r3, [r7, #4]
    d42a:	7e9b      	ldrb	r3, [r3, #26]
    d42c:	2b00      	cmp	r3, #0
    d42e:	d021      	beq.n	d474 <_ZN12Adafruit_GFX5writeEh+0x98>
    d430:	687b      	ldr	r3, [r7, #4]
    d432:	2210      	movs	r2, #16
    d434:	5e9b      	ldrsh	r3, [r3, r2]
    d436:	0019      	movs	r1, r3
    d438:	687b      	ldr	r3, [r7, #4]
    d43a:	7e1b      	ldrb	r3, [r3, #24]
    d43c:	001a      	movs	r2, r3
    d43e:	0013      	movs	r3, r2
    d440:	005b      	lsls	r3, r3, #1
    d442:	189b      	adds	r3, r3, r2
    d444:	005b      	lsls	r3, r3, #1
    d446:	18cb      	adds	r3, r1, r3
    d448:	687a      	ldr	r2, [r7, #4]
    d44a:	210c      	movs	r1, #12
    d44c:	5e52      	ldrsh	r2, [r2, r1]
    d44e:	4293      	cmp	r3, r2
    d450:	dd10      	ble.n	d474 <_ZN12Adafruit_GFX5writeEh+0x98>
                cursor_x  = 0;                 // Reset x to zero,
    d452:	687b      	ldr	r3, [r7, #4]
    d454:	2200      	movs	r2, #0
    d456:	821a      	strh	r2, [r3, #16]
                cursor_y += textsize * 8;      // advance y one line
    d458:	687b      	ldr	r3, [r7, #4]
    d45a:	2212      	movs	r2, #18
    d45c:	5e9b      	ldrsh	r3, [r3, r2]
    d45e:	b29a      	uxth	r2, r3
    d460:	687b      	ldr	r3, [r7, #4]
    d462:	7e1b      	ldrb	r3, [r3, #24]
    d464:	b29b      	uxth	r3, r3
    d466:	00db      	lsls	r3, r3, #3
    d468:	b29b      	uxth	r3, r3
    d46a:	18d3      	adds	r3, r2, r3
    d46c:	b29b      	uxth	r3, r3
    d46e:	b21a      	sxth	r2, r3
    d470:	687b      	ldr	r3, [r7, #4]
    d472:	825a      	strh	r2, [r3, #18]
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    d474:	687b      	ldr	r3, [r7, #4]
    d476:	2410      	movs	r4, #16
    d478:	5f1c      	ldrsh	r4, [r3, r4]
    d47a:	687b      	ldr	r3, [r7, #4]
    d47c:	2512      	movs	r5, #18
    d47e:	5f5d      	ldrsh	r5, [r3, r5]
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	8a9b      	ldrh	r3, [r3, #20]
    d484:	687a      	ldr	r2, [r7, #4]
    d486:	8ad2      	ldrh	r2, [r2, #22]
    d488:	6879      	ldr	r1, [r7, #4]
    d48a:	7e09      	ldrb	r1, [r1, #24]
    d48c:	1cf8      	adds	r0, r7, #3
    d48e:	7806      	ldrb	r6, [r0, #0]
    d490:	6878      	ldr	r0, [r7, #4]
    d492:	9102      	str	r1, [sp, #8]
    d494:	9201      	str	r2, [sp, #4]
    d496:	9300      	str	r3, [sp, #0]
    d498:	0033      	movs	r3, r6
    d49a:	002a      	movs	r2, r5
    d49c:	0021      	movs	r1, r4
    d49e:	f7ff fcaf 	bl	ce00 <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
    d4a2:	687b      	ldr	r3, [r7, #4]
    d4a4:	2210      	movs	r2, #16
    d4a6:	5e9b      	ldrsh	r3, [r3, r2]
    d4a8:	b29a      	uxth	r2, r3
    d4aa:	687b      	ldr	r3, [r7, #4]
    d4ac:	7e1b      	ldrb	r3, [r3, #24]
    d4ae:	b29b      	uxth	r3, r3
    d4b0:	1c19      	adds	r1, r3, #0
    d4b2:	1c0b      	adds	r3, r1, #0
    d4b4:	18db      	adds	r3, r3, r3
    d4b6:	185b      	adds	r3, r3, r1
    d4b8:	18db      	adds	r3, r3, r3
    d4ba:	b29b      	uxth	r3, r3
    d4bc:	18d3      	adds	r3, r2, r3
    d4be:	b29b      	uxth	r3, r3
    d4c0:	b21a      	sxth	r2, r3
    d4c2:	687b      	ldr	r3, [r7, #4]
    d4c4:	821a      	strh	r2, [r3, #16]
    d4c6:	e0bb      	b.n	d640 <_ZN12Adafruit_GFX5writeEh+0x264>
        }

    } else { // Custom font

        if(c == '\n') {
    d4c8:	1cfb      	adds	r3, r7, #3
    d4ca:	781b      	ldrb	r3, [r3, #0]
    d4cc:	2b0a      	cmp	r3, #10
    d4ce:	d116      	bne.n	d4fe <_ZN12Adafruit_GFX5writeEh+0x122>
            cursor_x  = 0;
    d4d0:	687b      	ldr	r3, [r7, #4]
    d4d2:	2200      	movs	r2, #0
    d4d4:	821a      	strh	r2, [r3, #16]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d4d6:	687b      	ldr	r3, [r7, #4]
    d4d8:	2212      	movs	r2, #18
    d4da:	5e9b      	ldrsh	r3, [r3, r2]
    d4dc:	b29a      	uxth	r2, r3
            cursor_y += (int16_t)textsize *
    d4de:	687b      	ldr	r3, [r7, #4]
    d4e0:	7e1b      	ldrb	r3, [r3, #24]
    d4e2:	b299      	uxth	r1, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d4e4:	687b      	ldr	r3, [r7, #4]
    d4e6:	69db      	ldr	r3, [r3, #28]
    d4e8:	330a      	adds	r3, #10
    d4ea:	781b      	ldrb	r3, [r3, #0]
    d4ec:	b29b      	uxth	r3, r3
            cursor_y += (int16_t)textsize *
    d4ee:	434b      	muls	r3, r1
    d4f0:	b29b      	uxth	r3, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d4f2:	18d3      	adds	r3, r2, r3
    d4f4:	b29b      	uxth	r3, r3
    d4f6:	b21a      	sxth	r2, r3
            cursor_y += (int16_t)textsize *
    d4f8:	687b      	ldr	r3, [r7, #4]
    d4fa:	825a      	strh	r2, [r3, #18]
    d4fc:	e0a0      	b.n	d640 <_ZN12Adafruit_GFX5writeEh+0x264>
        } else if(c != '\r') {
    d4fe:	1cfb      	adds	r3, r7, #3
    d500:	781b      	ldrb	r3, [r3, #0]
    d502:	2b0d      	cmp	r3, #13
    d504:	d100      	bne.n	d508 <_ZN12Adafruit_GFX5writeEh+0x12c>
    d506:	e09b      	b.n	d640 <_ZN12Adafruit_GFX5writeEh+0x264>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    d508:	687b      	ldr	r3, [r7, #4]
    d50a:	69db      	ldr	r3, [r3, #28]
    d50c:	3308      	adds	r3, #8
    d50e:	001a      	movs	r2, r3
    d510:	2317      	movs	r3, #23
    d512:	18fb      	adds	r3, r7, r3
    d514:	7812      	ldrb	r2, [r2, #0]
    d516:	701a      	strb	r2, [r3, #0]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    d518:	1cfb      	adds	r3, r7, #3
    d51a:	781a      	ldrb	r2, [r3, #0]
    d51c:	2317      	movs	r3, #23
    d51e:	18fb      	adds	r3, r7, r3
    d520:	781b      	ldrb	r3, [r3, #0]
    d522:	429a      	cmp	r2, r3
    d524:	da00      	bge.n	d528 <_ZN12Adafruit_GFX5writeEh+0x14c>
    d526:	e08b      	b.n	d640 <_ZN12Adafruit_GFX5writeEh+0x264>
    d528:	1cfb      	adds	r3, r7, #3
    d52a:	781a      	ldrb	r2, [r3, #0]
    d52c:	687b      	ldr	r3, [r7, #4]
    d52e:	69db      	ldr	r3, [r3, #28]
    d530:	3309      	adds	r3, #9
    d532:	781b      	ldrb	r3, [r3, #0]
    d534:	429a      	cmp	r2, r3
    d536:	dd00      	ble.n	d53a <_ZN12Adafruit_GFX5writeEh+0x15e>
    d538:	e082      	b.n	d640 <_ZN12Adafruit_GFX5writeEh+0x264>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
    d53a:	1cfb      	adds	r3, r7, #3
    d53c:	781a      	ldrb	r2, [r3, #0]
    d53e:	2317      	movs	r3, #23
    d540:	18fb      	adds	r3, r7, r3
    d542:	781b      	ldrb	r3, [r3, #0]
    d544:	1ad3      	subs	r3, r2, r3
    d546:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
    d548:	687b      	ldr	r3, [r7, #4]
    d54a:	69db      	ldr	r3, [r3, #28]
    d54c:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
    d54e:	681b      	ldr	r3, [r3, #0]
    d550:	18d3      	adds	r3, r2, r3
    d552:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
    d554:	693b      	ldr	r3, [r7, #16]
    d556:	1c9a      	adds	r2, r3, #2
    d558:	230f      	movs	r3, #15
    d55a:	18fb      	adds	r3, r7, r3
    d55c:	7812      	ldrb	r2, [r2, #0]
    d55e:	701a      	strb	r2, [r3, #0]
                          h     = pgm_read_byte(&glyph->height);
    d560:	693b      	ldr	r3, [r7, #16]
    d562:	1cda      	adds	r2, r3, #3
    d564:	230e      	movs	r3, #14
    d566:	18fb      	adds	r3, r7, r3
    d568:	7812      	ldrb	r2, [r2, #0]
    d56a:	701a      	strb	r2, [r3, #0]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    d56c:	230f      	movs	r3, #15
    d56e:	18fb      	adds	r3, r7, r3
    d570:	781b      	ldrb	r3, [r3, #0]
    d572:	2b00      	cmp	r3, #0
    d574:	dd52      	ble.n	d61c <_ZN12Adafruit_GFX5writeEh+0x240>
    d576:	230e      	movs	r3, #14
    d578:	18fb      	adds	r3, r7, r3
    d57a:	781b      	ldrb	r3, [r3, #0]
    d57c:	2b00      	cmp	r3, #0
    d57e:	dd4d      	ble.n	d61c <_ZN12Adafruit_GFX5writeEh+0x240>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    d580:	693b      	ldr	r3, [r7, #16]
    d582:	3305      	adds	r3, #5
    d584:	781b      	ldrb	r3, [r3, #0]
    d586:	b25a      	sxtb	r2, r3
    d588:	230c      	movs	r3, #12
    d58a:	18fb      	adds	r3, r7, r3
    d58c:	801a      	strh	r2, [r3, #0]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
    d58e:	687b      	ldr	r3, [r7, #4]
    d590:	7e9b      	ldrb	r3, [r3, #26]
    d592:	2b00      	cmp	r3, #0
    d594:	d02b      	beq.n	d5ee <_ZN12Adafruit_GFX5writeEh+0x212>
    d596:	687b      	ldr	r3, [r7, #4]
    d598:	2210      	movs	r2, #16
    d59a:	5e9b      	ldrsh	r3, [r3, r2]
    d59c:	0019      	movs	r1, r3
    d59e:	687b      	ldr	r3, [r7, #4]
    d5a0:	7e1b      	ldrb	r3, [r3, #24]
    d5a2:	0018      	movs	r0, r3
    d5a4:	230c      	movs	r3, #12
    d5a6:	18fb      	adds	r3, r7, r3
    d5a8:	2200      	movs	r2, #0
    d5aa:	5e9a      	ldrsh	r2, [r3, r2]
    d5ac:	230f      	movs	r3, #15
    d5ae:	18fb      	adds	r3, r7, r3
    d5b0:	781b      	ldrb	r3, [r3, #0]
    d5b2:	18d3      	adds	r3, r2, r3
    d5b4:	4343      	muls	r3, r0
    d5b6:	18cb      	adds	r3, r1, r3
    d5b8:	687a      	ldr	r2, [r7, #4]
    d5ba:	210c      	movs	r1, #12
    d5bc:	5e52      	ldrsh	r2, [r2, r1]
    d5be:	4293      	cmp	r3, r2
    d5c0:	dd15      	ble.n	d5ee <_ZN12Adafruit_GFX5writeEh+0x212>
                        cursor_x  = 0;
    d5c2:	687b      	ldr	r3, [r7, #4]
    d5c4:	2200      	movs	r2, #0
    d5c6:	821a      	strh	r2, [r3, #16]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d5c8:	687b      	ldr	r3, [r7, #4]
    d5ca:	2212      	movs	r2, #18
    d5cc:	5e9b      	ldrsh	r3, [r3, r2]
    d5ce:	b29a      	uxth	r2, r3
                        cursor_y += (int16_t)textsize *
    d5d0:	687b      	ldr	r3, [r7, #4]
    d5d2:	7e1b      	ldrb	r3, [r3, #24]
    d5d4:	b299      	uxth	r1, r3
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d5d6:	687b      	ldr	r3, [r7, #4]
    d5d8:	69db      	ldr	r3, [r3, #28]
    d5da:	330a      	adds	r3, #10
    d5dc:	781b      	ldrb	r3, [r3, #0]
    d5de:	b29b      	uxth	r3, r3
                        cursor_y += (int16_t)textsize *
    d5e0:	434b      	muls	r3, r1
    d5e2:	b29b      	uxth	r3, r3
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d5e4:	18d3      	adds	r3, r2, r3
    d5e6:	b29b      	uxth	r3, r3
    d5e8:	b21a      	sxth	r2, r3
                        cursor_y += (int16_t)textsize *
    d5ea:	687b      	ldr	r3, [r7, #4]
    d5ec:	825a      	strh	r2, [r3, #18]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    d5ee:	687b      	ldr	r3, [r7, #4]
    d5f0:	2410      	movs	r4, #16
    d5f2:	5f1c      	ldrsh	r4, [r3, r4]
    d5f4:	687b      	ldr	r3, [r7, #4]
    d5f6:	2512      	movs	r5, #18
    d5f8:	5f5d      	ldrsh	r5, [r3, r5]
    d5fa:	687b      	ldr	r3, [r7, #4]
    d5fc:	8a9b      	ldrh	r3, [r3, #20]
    d5fe:	687a      	ldr	r2, [r7, #4]
    d600:	8ad2      	ldrh	r2, [r2, #22]
    d602:	6879      	ldr	r1, [r7, #4]
    d604:	7e09      	ldrb	r1, [r1, #24]
    d606:	1cf8      	adds	r0, r7, #3
    d608:	7806      	ldrb	r6, [r0, #0]
    d60a:	6878      	ldr	r0, [r7, #4]
    d60c:	9102      	str	r1, [sp, #8]
    d60e:	9201      	str	r2, [sp, #4]
    d610:	9300      	str	r3, [sp, #0]
    d612:	0033      	movs	r3, r6
    d614:	002a      	movs	r2, r5
    d616:	0021      	movs	r1, r4
    d618:	f7ff fbf2 	bl	ce00 <_ZN12Adafruit_GFX8drawCharEsshtth>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    d61c:	687b      	ldr	r3, [r7, #4]
    d61e:	2210      	movs	r2, #16
    d620:	5e9b      	ldrsh	r3, [r3, r2]
    d622:	b29a      	uxth	r2, r3
    d624:	693b      	ldr	r3, [r7, #16]
    d626:	3304      	adds	r3, #4
    d628:	781b      	ldrb	r3, [r3, #0]
    d62a:	b29b      	uxth	r3, r3
    d62c:	6879      	ldr	r1, [r7, #4]
    d62e:	7e09      	ldrb	r1, [r1, #24]
    d630:	b289      	uxth	r1, r1
    d632:	434b      	muls	r3, r1
    d634:	b29b      	uxth	r3, r3
    d636:	18d3      	adds	r3, r2, r3
    d638:	b29b      	uxth	r3, r3
    d63a:	b21a      	sxth	r2, r3
    d63c:	687b      	ldr	r3, [r7, #4]
    d63e:	821a      	strh	r2, [r3, #16]
            }
        }

    }
#if ARDUINO >= 100
    return 1;
    d640:	2301      	movs	r3, #1
#endif
}
    d642:	0018      	movs	r0, r3
    d644:	46bd      	mov	sp, r7
    d646:	b007      	add	sp, #28
    d648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d64a <_ZN12Adafruit_GFX11setRotationEh>:

uint8_t Adafruit_GFX::getRotation(void) const {
    return rotation;
}

void Adafruit_GFX::setRotation(uint8_t x) {
    d64a:	b580      	push	{r7, lr}
    d64c:	b082      	sub	sp, #8
    d64e:	af00      	add	r7, sp, #0
    d650:	6078      	str	r0, [r7, #4]
    d652:	000a      	movs	r2, r1
    d654:	1cfb      	adds	r3, r7, #3
    d656:	701a      	strb	r2, [r3, #0]
    rotation = (x & 3);
    d658:	1cfb      	adds	r3, r7, #3
    d65a:	781b      	ldrb	r3, [r3, #0]
    d65c:	2203      	movs	r2, #3
    d65e:	4013      	ands	r3, r2
    d660:	b2da      	uxtb	r2, r3
    d662:	687b      	ldr	r3, [r7, #4]
    d664:	765a      	strb	r2, [r3, #25]
    switch(rotation) {
    d666:	687b      	ldr	r3, [r7, #4]
    d668:	7e5b      	ldrb	r3, [r3, #25]
    d66a:	2b01      	cmp	r3, #1
    d66c:	d013      	beq.n	d696 <_ZN12Adafruit_GFX11setRotationEh+0x4c>
    d66e:	dc02      	bgt.n	d676 <_ZN12Adafruit_GFX11setRotationEh+0x2c>
    d670:	2b00      	cmp	r3, #0
    d672:	d005      	beq.n	d680 <_ZN12Adafruit_GFX11setRotationEh+0x36>
        case 3:
            _width  = HEIGHT;
            _height = WIDTH;
            break;
    }
}
    d674:	e01a      	b.n	d6ac <_ZN12Adafruit_GFX11setRotationEh+0x62>
    switch(rotation) {
    d676:	2b02      	cmp	r3, #2
    d678:	d002      	beq.n	d680 <_ZN12Adafruit_GFX11setRotationEh+0x36>
    d67a:	2b03      	cmp	r3, #3
    d67c:	d00b      	beq.n	d696 <_ZN12Adafruit_GFX11setRotationEh+0x4c>
}
    d67e:	e015      	b.n	d6ac <_ZN12Adafruit_GFX11setRotationEh+0x62>
            _width  = WIDTH;
    d680:	687b      	ldr	r3, [r7, #4]
    d682:	2208      	movs	r2, #8
    d684:	5e9a      	ldrsh	r2, [r3, r2]
    d686:	687b      	ldr	r3, [r7, #4]
    d688:	819a      	strh	r2, [r3, #12]
            _height = HEIGHT;
    d68a:	687b      	ldr	r3, [r7, #4]
    d68c:	220a      	movs	r2, #10
    d68e:	5e9a      	ldrsh	r2, [r3, r2]
    d690:	687b      	ldr	r3, [r7, #4]
    d692:	81da      	strh	r2, [r3, #14]
            break;
    d694:	e00a      	b.n	d6ac <_ZN12Adafruit_GFX11setRotationEh+0x62>
            _width  = HEIGHT;
    d696:	687b      	ldr	r3, [r7, #4]
    d698:	220a      	movs	r2, #10
    d69a:	5e9a      	ldrsh	r2, [r3, r2]
    d69c:	687b      	ldr	r3, [r7, #4]
    d69e:	819a      	strh	r2, [r3, #12]
            _height = WIDTH;
    d6a0:	687b      	ldr	r3, [r7, #4]
    d6a2:	2208      	movs	r2, #8
    d6a4:	5e9a      	ldrsh	r2, [r3, r2]
    d6a6:	687b      	ldr	r3, [r7, #4]
    d6a8:	81da      	strh	r2, [r3, #14]
            break;
    d6aa:	46c0      	nop			; (mov r8, r8)
}
    d6ac:	46c0      	nop			; (mov r8, r8)
    d6ae:	46bd      	mov	sp, r7
    d6b0:	b002      	add	sp, #8
    d6b2:	bd80      	pop	{r7, pc}

0000d6b4 <_ZNK12Adafruit_GFX5widthEv>:
        *h  = maxy - miny + 1;
    }
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
    d6b4:	b580      	push	{r7, lr}
    d6b6:	b082      	sub	sp, #8
    d6b8:	af00      	add	r7, sp, #0
    d6ba:	6078      	str	r0, [r7, #4]
    return _width;
    d6bc:	687b      	ldr	r3, [r7, #4]
    d6be:	220c      	movs	r2, #12
    d6c0:	5e9b      	ldrsh	r3, [r3, r2]
}
    d6c2:	0018      	movs	r0, r3
    d6c4:	46bd      	mov	sp, r7
    d6c6:	b002      	add	sp, #8
    d6c8:	bd80      	pop	{r7, pc}

0000d6ca <_ZNK12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) const {
    d6ca:	b580      	push	{r7, lr}
    d6cc:	b082      	sub	sp, #8
    d6ce:	af00      	add	r7, sp, #0
    d6d0:	6078      	str	r0, [r7, #4]
    return _height;
    d6d2:	687b      	ldr	r3, [r7, #4]
    d6d4:	220e      	movs	r2, #14
    d6d6:	5e9b      	ldrsh	r3, [r3, r2]
}
    d6d8:	0018      	movs	r0, r3
    d6da:	46bd      	mov	sp, r7
    d6dc:	b002      	add	sp, #8
    d6de:	bd80      	pop	{r7, pc}

0000d6e0 <_ZN12Adafruit_GFX13invertDisplayEb>:

void Adafruit_GFX::invertDisplay(boolean i) {
    d6e0:	b580      	push	{r7, lr}
    d6e2:	b082      	sub	sp, #8
    d6e4:	af00      	add	r7, sp, #0
    d6e6:	6078      	str	r0, [r7, #4]
    d6e8:	000a      	movs	r2, r1
    d6ea:	1cfb      	adds	r3, r7, #3
    d6ec:	701a      	strb	r2, [r3, #0]
    // Do nothing, must be subclassed if supported by hardware
}
    d6ee:	46c0      	nop			; (mov r8, r8)
    d6f0:	46bd      	mov	sp, r7
    d6f2:	b002      	add	sp, #8
    d6f4:	bd80      	pop	{r7, pc}

0000d6f6 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    d6f6:	b580      	push	{r7, lr}
    d6f8:	af00      	add	r7, sp, #0
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  while (1)
    d6fa:	e7fe      	b.n	d6fa <__cxa_pure_virtual+0x4>

0000d6fc <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
    d6fc:	b580      	push	{r7, lr}
    d6fe:	b084      	sub	sp, #16
    d700:	af00      	add	r7, sp, #0
    d702:	60f8      	str	r0, [r7, #12]
    d704:	60b9      	str	r1, [r7, #8]
    d706:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
    d708:	687a      	ldr	r2, [r7, #4]
    d70a:	68b9      	ldr	r1, [r7, #8]
    d70c:	68fb      	ldr	r3, [r7, #12]
    d70e:	0018      	movs	r0, r3
    d710:	f000 f805 	bl	d71e <ltoa>
    d714:	0003      	movs	r3, r0
        }
    d716:	0018      	movs	r0, r3
    d718:	46bd      	mov	sp, r7
    d71a:	b004      	add	sp, #16
    d71c:	bd80      	pop	{r7, pc}

0000d71e <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
    d71e:	b580      	push	{r7, lr}
    d720:	b092      	sub	sp, #72	; 0x48
    d722:	af00      	add	r7, sp, #0
    d724:	60f8      	str	r0, [r7, #12]
    d726:	60b9      	str	r1, [r7, #8]
    d728:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    d72a:	2310      	movs	r3, #16
    d72c:	18fb      	adds	r3, r7, r3
    d72e:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
    d730:	68bb      	ldr	r3, [r7, #8]
    d732:	2b00      	cmp	r3, #0
    d734:	d101      	bne.n	d73a <ltoa+0x1c>
            {
                return 0;
    d736:	2300      	movs	r3, #0
    d738:	e063      	b.n	d802 <ltoa+0xe4>
            }

            if (radix > 36 || radix <= 1)
    d73a:	687b      	ldr	r3, [r7, #4]
    d73c:	2b24      	cmp	r3, #36	; 0x24
    d73e:	dc02      	bgt.n	d746 <ltoa+0x28>
    d740:	687b      	ldr	r3, [r7, #4]
    d742:	2b01      	cmp	r3, #1
    d744:	dc01      	bgt.n	d74a <ltoa+0x2c>
            {
                return 0;
    d746:	2300      	movs	r3, #0
    d748:	e05b      	b.n	d802 <ltoa+0xe4>
            }

            sign = (radix == 10 && value < 0);
    d74a:	687b      	ldr	r3, [r7, #4]
    d74c:	2b0a      	cmp	r3, #10
    d74e:	d104      	bne.n	d75a <ltoa+0x3c>
    d750:	68fb      	ldr	r3, [r7, #12]
    d752:	2b00      	cmp	r3, #0
    d754:	da01      	bge.n	d75a <ltoa+0x3c>
    d756:	2301      	movs	r3, #1
    d758:	e000      	b.n	d75c <ltoa+0x3e>
    d75a:	2300      	movs	r3, #0
    d75c:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
    d75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d760:	2b00      	cmp	r3, #0
    d762:	d003      	beq.n	d76c <ltoa+0x4e>
            {
                v = -value;
    d764:	68fb      	ldr	r3, [r7, #12]
    d766:	425b      	negs	r3, r3
    d768:	643b      	str	r3, [r7, #64]	; 0x40
    d76a:	e025      	b.n	d7b8 <ltoa+0x9a>
            }
            else
            {
                v = (unsigned long)value;
    d76c:	68fb      	ldr	r3, [r7, #12]
    d76e:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
    d770:	e022      	b.n	d7b8 <ltoa+0x9a>
            {
                i = v % radix;
    d772:	687a      	ldr	r2, [r7, #4]
    d774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d776:	0011      	movs	r1, r2
    d778:	0018      	movs	r0, r3
    d77a:	f001 fa15 	bl	eba8 <__aeabi_uidivmod>
    d77e:	000b      	movs	r3, r1
    d780:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
    d782:	687b      	ldr	r3, [r7, #4]
    d784:	0019      	movs	r1, r3
    d786:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d788:	f001 f988 	bl	ea9c <__udivsi3>
    d78c:	0003      	movs	r3, r0
    d78e:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    d790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d792:	2b09      	cmp	r3, #9
    d794:	dc08      	bgt.n	d7a8 <ltoa+0x8a>
                    *tp++ = i + '0';
    d796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d798:	1c5a      	adds	r2, r3, #1
    d79a:	647a      	str	r2, [r7, #68]	; 0x44
    d79c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d79e:	b2d2      	uxtb	r2, r2
    d7a0:	3230      	adds	r2, #48	; 0x30
    d7a2:	b2d2      	uxtb	r2, r2
    d7a4:	701a      	strb	r2, [r3, #0]
    d7a6:	e007      	b.n	d7b8 <ltoa+0x9a>
                else
                    *tp++ = i + 'a' - 10;
    d7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d7aa:	1c5a      	adds	r2, r3, #1
    d7ac:	647a      	str	r2, [r7, #68]	; 0x44
    d7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d7b0:	b2d2      	uxtb	r2, r2
    d7b2:	3257      	adds	r2, #87	; 0x57
    d7b4:	b2d2      	uxtb	r2, r2
    d7b6:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    d7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d7ba:	2b00      	cmp	r3, #0
    d7bc:	d1d9      	bne.n	d772 <ltoa+0x54>
    d7be:	2310      	movs	r3, #16
    d7c0:	18fb      	adds	r3, r7, r3
    d7c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d7c4:	429a      	cmp	r2, r3
    d7c6:	d0d4      	beq.n	d772 <ltoa+0x54>
            }

            sp = string;
    d7c8:	68bb      	ldr	r3, [r7, #8]
    d7ca:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
    d7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d7ce:	2b00      	cmp	r3, #0
    d7d0:	d00e      	beq.n	d7f0 <ltoa+0xd2>
                *sp++ = '-';
    d7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7d4:	1c5a      	adds	r2, r3, #1
    d7d6:	63fa      	str	r2, [r7, #60]	; 0x3c
    d7d8:	222d      	movs	r2, #45	; 0x2d
    d7da:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d7dc:	e008      	b.n	d7f0 <ltoa+0xd2>
                *sp++ = *--tp;
    d7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7e0:	1c5a      	adds	r2, r3, #1
    d7e2:	63fa      	str	r2, [r7, #60]	; 0x3c
    d7e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d7e6:	3a01      	subs	r2, #1
    d7e8:	647a      	str	r2, [r7, #68]	; 0x44
    d7ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d7ec:	7812      	ldrb	r2, [r2, #0]
    d7ee:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d7f0:	2310      	movs	r3, #16
    d7f2:	18fb      	adds	r3, r7, r3
    d7f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d7f6:	429a      	cmp	r2, r3
    d7f8:	d8f1      	bhi.n	d7de <ltoa+0xc0>
            *sp = 0;
    d7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7fc:	2200      	movs	r2, #0
    d7fe:	701a      	strb	r2, [r3, #0]

            return string;
    d800:	68bb      	ldr	r3, [r7, #8]
        }
    d802:	0018      	movs	r0, r3
    d804:	46bd      	mov	sp, r7
    d806:	b012      	add	sp, #72	; 0x48
    d808:	bd80      	pop	{r7, pc}

0000d80a <utoa>:

        extern char* utoa(unsigned value, char*string, int radix)
        {
    d80a:	b580      	push	{r7, lr}
    d80c:	b084      	sub	sp, #16
    d80e:	af00      	add	r7, sp, #0
    d810:	60f8      	str	r0, [r7, #12]
    d812:	60b9      	str	r1, [r7, #8]
    d814:	607a      	str	r2, [r7, #4]
            return ultoa(value, string, radix);
    d816:	687a      	ldr	r2, [r7, #4]
    d818:	68b9      	ldr	r1, [r7, #8]
    d81a:	68fb      	ldr	r3, [r7, #12]
    d81c:	0018      	movs	r0, r3
    d81e:	f000 f805 	bl	d82c <ultoa>
    d822:	0003      	movs	r3, r0
        }
    d824:	0018      	movs	r0, r3
    d826:	46bd      	mov	sp, r7
    d828:	b004      	add	sp, #16
    d82a:	bd80      	pop	{r7, pc}

0000d82c <ultoa>:

        extern char* ultoa(unsigned long value, char*string, int radix)
        {
    d82c:	b580      	push	{r7, lr}
    d82e:	b092      	sub	sp, #72	; 0x48
    d830:	af00      	add	r7, sp, #0
    d832:	60f8      	str	r0, [r7, #12]
    d834:	60b9      	str	r1, [r7, #8]
    d836:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    d838:	2314      	movs	r3, #20
    d83a:	18fb      	adds	r3, r7, r3
    d83c:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v = value;
    d83e:	68fb      	ldr	r3, [r7, #12]
    d840:	643b      	str	r3, [r7, #64]	; 0x40
            char* sp;

            if (string == NULL)
    d842:	68bb      	ldr	r3, [r7, #8]
    d844:	2b00      	cmp	r3, #0
    d846:	d101      	bne.n	d84c <ultoa+0x20>
            {
                return 0;
    d848:	2300      	movs	r3, #0
    d84a:	e047      	b.n	d8dc <ultoa+0xb0>
            }

            if (radix > 36 || radix <= 1)
    d84c:	687b      	ldr	r3, [r7, #4]
    d84e:	2b24      	cmp	r3, #36	; 0x24
    d850:	dc02      	bgt.n	d858 <ultoa+0x2c>
    d852:	687b      	ldr	r3, [r7, #4]
    d854:	2b01      	cmp	r3, #1
    d856:	dc24      	bgt.n	d8a2 <ultoa+0x76>
            {
                return 0;
    d858:	2300      	movs	r3, #0
    d85a:	e03f      	b.n	d8dc <ultoa+0xb0>
            }

            while (v || tp == tmp)
            {
                i = v % radix;
    d85c:	687a      	ldr	r2, [r7, #4]
    d85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d860:	0011      	movs	r1, r2
    d862:	0018      	movs	r0, r3
    d864:	f001 f9a0 	bl	eba8 <__aeabi_uidivmod>
    d868:	000b      	movs	r3, r1
    d86a:	63bb      	str	r3, [r7, #56]	; 0x38
                v = v / radix;
    d86c:	687b      	ldr	r3, [r7, #4]
    d86e:	0019      	movs	r1, r3
    d870:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d872:	f001 f913 	bl	ea9c <__udivsi3>
    d876:	0003      	movs	r3, r0
    d878:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    d87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d87c:	2b09      	cmp	r3, #9
    d87e:	dc08      	bgt.n	d892 <ultoa+0x66>
                    *tp++ = i + '0';
    d880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d882:	1c5a      	adds	r2, r3, #1
    d884:	647a      	str	r2, [r7, #68]	; 0x44
    d886:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d888:	b2d2      	uxtb	r2, r2
    d88a:	3230      	adds	r2, #48	; 0x30
    d88c:	b2d2      	uxtb	r2, r2
    d88e:	701a      	strb	r2, [r3, #0]
    d890:	e007      	b.n	d8a2 <ultoa+0x76>
                else
                    *tp++ = i + 'a' - 10;
    d892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d894:	1c5a      	adds	r2, r3, #1
    d896:	647a      	str	r2, [r7, #68]	; 0x44
    d898:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d89a:	b2d2      	uxtb	r2, r2
    d89c:	3257      	adds	r2, #87	; 0x57
    d89e:	b2d2      	uxtb	r2, r2
    d8a0:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    d8a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d1d9      	bne.n	d85c <ultoa+0x30>
    d8a8:	2314      	movs	r3, #20
    d8aa:	18fb      	adds	r3, r7, r3
    d8ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d8ae:	429a      	cmp	r2, r3
    d8b0:	d0d4      	beq.n	d85c <ultoa+0x30>
            }

            sp = string;
    d8b2:	68bb      	ldr	r3, [r7, #8]
    d8b4:	63fb      	str	r3, [r7, #60]	; 0x3c


            while (tp > tmp)
    d8b6:	e008      	b.n	d8ca <ultoa+0x9e>
                *sp++ = *--tp;
    d8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d8ba:	1c5a      	adds	r2, r3, #1
    d8bc:	63fa      	str	r2, [r7, #60]	; 0x3c
    d8be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d8c0:	3a01      	subs	r2, #1
    d8c2:	647a      	str	r2, [r7, #68]	; 0x44
    d8c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d8c6:	7812      	ldrb	r2, [r2, #0]
    d8c8:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d8ca:	2314      	movs	r3, #20
    d8cc:	18fb      	adds	r3, r7, r3
    d8ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d8d0:	429a      	cmp	r2, r3
    d8d2:	d8f1      	bhi.n	d8b8 <ultoa+0x8c>
            *sp = 0;
    d8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d8d6:	2200      	movs	r2, #0
    d8d8:	701a      	strb	r2, [r3, #0]

            return string;
    d8da:	68bb      	ldr	r3, [r7, #8]
        }
    d8dc:	0018      	movs	r0, r3
    d8de:	46bd      	mov	sp, r7
    d8e0:	b012      	add	sp, #72	; 0x48
    d8e2:	bd80      	pop	{r7, pc}

0000d8e4 <_Znwj>:
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <stdlib.h>

void *operator new(size_t size) {
    d8e4:	b580      	push	{r7, lr}
    d8e6:	b082      	sub	sp, #8
    d8e8:	af00      	add	r7, sp, #0
    d8ea:	6078      	str	r0, [r7, #4]
  return malloc(size);
    d8ec:	687b      	ldr	r3, [r7, #4]
    d8ee:	0018      	movs	r0, r3
    d8f0:	f003 f86c 	bl	109cc <malloc>
    d8f4:	0003      	movs	r3, r0
}
    d8f6:	0018      	movs	r0, r3
    d8f8:	46bd      	mov	sp, r7
    d8fa:	b002      	add	sp, #8
    d8fc:	bd80      	pop	{r7, pc}

0000d8fe <_ZdlPv>:

void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
    d8fe:	b580      	push	{r7, lr}
    d900:	b082      	sub	sp, #8
    d902:	af00      	add	r7, sp, #0
    d904:	6078      	str	r0, [r7, #4]
  free(ptr);
    d906:	687b      	ldr	r3, [r7, #4]
    d908:	0018      	movs	r0, r3
    d90a:	f003 f869 	bl	109e0 <free>
}
    d90e:	46c0      	nop			; (mov r8, r8)
    d910:	46bd      	mov	sp, r7
    d912:	b002      	add	sp, #8
    d914:	bd80      	pop	{r7, pc}
	...

0000d918 <__NVIC_EnableIRQ>:
{
    d918:	b580      	push	{r7, lr}
    d91a:	b082      	sub	sp, #8
    d91c:	af00      	add	r7, sp, #0
    d91e:	0002      	movs	r2, r0
    d920:	1dfb      	adds	r3, r7, #7
    d922:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    d924:	1dfb      	adds	r3, r7, #7
    d926:	781b      	ldrb	r3, [r3, #0]
    d928:	2b7f      	cmp	r3, #127	; 0x7f
    d92a:	d809      	bhi.n	d940 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    d92c:	4b06      	ldr	r3, [pc, #24]	; (d948 <__NVIC_EnableIRQ+0x30>)
    d92e:	1dfa      	adds	r2, r7, #7
    d930:	7812      	ldrb	r2, [r2, #0]
    d932:	b252      	sxtb	r2, r2
    d934:	211f      	movs	r1, #31
    d936:	400a      	ands	r2, r1
    d938:	2101      	movs	r1, #1
    d93a:	4091      	lsls	r1, r2
    d93c:	000a      	movs	r2, r1
    d93e:	601a      	str	r2, [r3, #0]
}
    d940:	46c0      	nop			; (mov r8, r8)
    d942:	46bd      	mov	sp, r7
    d944:	b002      	add	sp, #8
    d946:	bd80      	pop	{r7, pc}
    d948:	e000e100 	.word	0xe000e100

0000d94c <__NVIC_SetPriority>:
{
    d94c:	b5b0      	push	{r4, r5, r7, lr}
    d94e:	b082      	sub	sp, #8
    d950:	af00      	add	r7, sp, #0
    d952:	0002      	movs	r2, r0
    d954:	6039      	str	r1, [r7, #0]
    d956:	1dfb      	adds	r3, r7, #7
    d958:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    d95a:	1dfb      	adds	r3, r7, #7
    d95c:	781b      	ldrb	r3, [r3, #0]
    d95e:	2b7f      	cmp	r3, #127	; 0x7f
    d960:	d828      	bhi.n	d9b4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d962:	4c2f      	ldr	r4, [pc, #188]	; (da20 <__NVIC_SetPriority+0xd4>)
    d964:	1dfb      	adds	r3, r7, #7
    d966:	781b      	ldrb	r3, [r3, #0]
    d968:	b25b      	sxtb	r3, r3
    d96a:	089b      	lsrs	r3, r3, #2
    d96c:	492c      	ldr	r1, [pc, #176]	; (da20 <__NVIC_SetPriority+0xd4>)
    d96e:	1dfa      	adds	r2, r7, #7
    d970:	7812      	ldrb	r2, [r2, #0]
    d972:	b252      	sxtb	r2, r2
    d974:	0892      	lsrs	r2, r2, #2
    d976:	32c0      	adds	r2, #192	; 0xc0
    d978:	0092      	lsls	r2, r2, #2
    d97a:	5852      	ldr	r2, [r2, r1]
    d97c:	1df9      	adds	r1, r7, #7
    d97e:	7809      	ldrb	r1, [r1, #0]
    d980:	b249      	sxtb	r1, r1
    d982:	2003      	movs	r0, #3
    d984:	4001      	ands	r1, r0
    d986:	00c9      	lsls	r1, r1, #3
    d988:	20ff      	movs	r0, #255	; 0xff
    d98a:	4088      	lsls	r0, r1
    d98c:	0001      	movs	r1, r0
    d98e:	43c9      	mvns	r1, r1
    d990:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    d992:	683a      	ldr	r2, [r7, #0]
    d994:	0192      	lsls	r2, r2, #6
    d996:	20ff      	movs	r0, #255	; 0xff
    d998:	4010      	ands	r0, r2
    d99a:	1dfa      	adds	r2, r7, #7
    d99c:	7812      	ldrb	r2, [r2, #0]
    d99e:	b252      	sxtb	r2, r2
    d9a0:	2503      	movs	r5, #3
    d9a2:	402a      	ands	r2, r5
    d9a4:	00d2      	lsls	r2, r2, #3
    d9a6:	4090      	lsls	r0, r2
    d9a8:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d9aa:	430a      	orrs	r2, r1
    d9ac:	33c0      	adds	r3, #192	; 0xc0
    d9ae:	009b      	lsls	r3, r3, #2
    d9b0:	511a      	str	r2, [r3, r4]
}
    d9b2:	e031      	b.n	da18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d9b4:	4c1b      	ldr	r4, [pc, #108]	; (da24 <__NVIC_SetPriority+0xd8>)
    d9b6:	1dfb      	adds	r3, r7, #7
    d9b8:	781b      	ldrb	r3, [r3, #0]
    d9ba:	b25b      	sxtb	r3, r3
    d9bc:	220f      	movs	r2, #15
    d9be:	4013      	ands	r3, r2
    d9c0:	3b08      	subs	r3, #8
    d9c2:	0899      	lsrs	r1, r3, #2
    d9c4:	4a17      	ldr	r2, [pc, #92]	; (da24 <__NVIC_SetPriority+0xd8>)
    d9c6:	1dfb      	adds	r3, r7, #7
    d9c8:	781b      	ldrb	r3, [r3, #0]
    d9ca:	b25b      	sxtb	r3, r3
    d9cc:	200f      	movs	r0, #15
    d9ce:	4003      	ands	r3, r0
    d9d0:	3b08      	subs	r3, #8
    d9d2:	089b      	lsrs	r3, r3, #2
    d9d4:	3306      	adds	r3, #6
    d9d6:	009b      	lsls	r3, r3, #2
    d9d8:	18d3      	adds	r3, r2, r3
    d9da:	3304      	adds	r3, #4
    d9dc:	681b      	ldr	r3, [r3, #0]
    d9de:	1dfa      	adds	r2, r7, #7
    d9e0:	7812      	ldrb	r2, [r2, #0]
    d9e2:	b252      	sxtb	r2, r2
    d9e4:	2003      	movs	r0, #3
    d9e6:	4002      	ands	r2, r0
    d9e8:	00d2      	lsls	r2, r2, #3
    d9ea:	20ff      	movs	r0, #255	; 0xff
    d9ec:	4090      	lsls	r0, r2
    d9ee:	0002      	movs	r2, r0
    d9f0:	43d2      	mvns	r2, r2
    d9f2:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    d9f4:	683b      	ldr	r3, [r7, #0]
    d9f6:	019b      	lsls	r3, r3, #6
    d9f8:	20ff      	movs	r0, #255	; 0xff
    d9fa:	4018      	ands	r0, r3
    d9fc:	1dfb      	adds	r3, r7, #7
    d9fe:	781b      	ldrb	r3, [r3, #0]
    da00:	b25b      	sxtb	r3, r3
    da02:	2503      	movs	r5, #3
    da04:	402b      	ands	r3, r5
    da06:	00db      	lsls	r3, r3, #3
    da08:	4098      	lsls	r0, r3
    da0a:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    da0c:	431a      	orrs	r2, r3
    da0e:	1d8b      	adds	r3, r1, #6
    da10:	009b      	lsls	r3, r3, #2
    da12:	18e3      	adds	r3, r4, r3
    da14:	3304      	adds	r3, #4
    da16:	601a      	str	r2, [r3, #0]
}
    da18:	46c0      	nop			; (mov r8, r8)
    da1a:	46bd      	mov	sp, r7
    da1c:	b002      	add	sp, #8
    da1e:	bdb0      	pop	{r4, r5, r7, pc}
    da20:	e000e100 	.word	0xe000e100
    da24:	e000ed00 	.word	0xe000ed00

0000da28 <_ZN6SERCOMC1EP6Sercom>:
// Default rise time in nanoseconds, based on 4.7K ohm pull up resistors
// you can override this value in your variant if needed
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
    da28:	b580      	push	{r7, lr}
    da2a:	b082      	sub	sp, #8
    da2c:	af00      	add	r7, sp, #0
    da2e:	6078      	str	r0, [r7, #4]
    da30:	6039      	str	r1, [r7, #0]
{
  sercom = s;
    da32:	687b      	ldr	r3, [r7, #4]
    da34:	683a      	ldr	r2, [r7, #0]
    da36:	601a      	str	r2, [r3, #0]
}
    da38:	687b      	ldr	r3, [r7, #4]
    da3a:	0018      	movs	r0, r3
    da3c:	46bd      	mov	sp, r7
    da3e:	b002      	add	sp, #8
    da40:	bd80      	pop	{r7, pc}
	...

0000da44 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
/* 	=========================
 *	===== Sercom UART
 *	=========================
*/
void SERCOM::initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate)
{
    da44:	b580      	push	{r7, lr}
    da46:	b086      	sub	sp, #24
    da48:	af00      	add	r7, sp, #0
    da4a:	60f8      	str	r0, [r7, #12]
    da4c:	0008      	movs	r0, r1
    da4e:	0011      	movs	r1, r2
    da50:	607b      	str	r3, [r7, #4]
    da52:	230b      	movs	r3, #11
    da54:	18fb      	adds	r3, r7, r3
    da56:	1c02      	adds	r2, r0, #0
    da58:	701a      	strb	r2, [r3, #0]
    da5a:	230a      	movs	r3, #10
    da5c:	18fb      	adds	r3, r7, r3
    da5e:	1c0a      	adds	r2, r1, #0
    da60:	701a      	strb	r2, [r3, #0]
  initClockNVIC();
    da62:	68fb      	ldr	r3, [r7, #12]
    da64:	0018      	movs	r0, r3
    da66:	f000 fd53 	bl	e510 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    da6a:	68fb      	ldr	r3, [r7, #12]
    da6c:	0018      	movs	r0, r3
    da6e:	f000 f8d0 	bl	dc12 <_ZN6SERCOM9resetUARTEv>

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    da72:	68fb      	ldr	r3, [r7, #12]
    da74:	681b      	ldr	r3, [r3, #0]
    da76:	220b      	movs	r2, #11
    da78:	18ba      	adds	r2, r7, r2
    da7a:	7812      	ldrb	r2, [r2, #0]
    da7c:	0092      	lsls	r2, r2, #2
    da7e:	0011      	movs	r1, r2
    da80:	221c      	movs	r2, #28
    da82:	4011      	ands	r1, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    da84:	220a      	movs	r2, #10
    da86:	18ba      	adds	r2, r7, r2
    da88:	7812      	ldrb	r2, [r2, #0]
    da8a:	0352      	lsls	r2, r2, #13
    da8c:	0412      	lsls	r2, r2, #16
    da8e:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    da90:	430a      	orrs	r2, r1
    da92:	601a      	str	r2, [r3, #0]

  //Setting the Interrupt register
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    da94:	68fb      	ldr	r3, [r7, #12]
    da96:	681b      	ldr	r3, [r3, #0]
    da98:	2284      	movs	r2, #132	; 0x84
    da9a:	759a      	strb	r2, [r3, #22]
                                SERCOM_USART_INTENSET_ERROR; //All others errors

  if ( mode == UART_INT_CLOCK )
    da9c:	230b      	movs	r3, #11
    da9e:	18fb      	adds	r3, r7, r3
    daa0:	781b      	ldrb	r3, [r3, #0]
    daa2:	2b01      	cmp	r3, #1
    daa4:	d13b      	bne.n	db1e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xda>
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    daa6:	230a      	movs	r3, #10
    daa8:	18fb      	adds	r3, r7, r3
    daaa:	781b      	ldrb	r3, [r3, #0]
    daac:	2b01      	cmp	r3, #1
    daae:	d104      	bne.n	daba <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x76>
      sampleRateValue = 16;
    dab0:	2316      	movs	r3, #22
    dab2:	18fb      	adds	r3, r7, r3
    dab4:	2210      	movs	r2, #16
    dab6:	801a      	strh	r2, [r3, #0]
    dab8:	e003      	b.n	dac2 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x7e>
    } else {
      sampleRateValue = 8;
    daba:	2316      	movs	r3, #22
    dabc:	18fb      	adds	r3, r7, r3
    dabe:	2208      	movs	r2, #8
    dac0:	801a      	strh	r2, [r3, #0]
    }

    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    dac2:	4b19      	ldr	r3, [pc, #100]	; (db28 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xe4>)
    dac4:	681b      	ldr	r3, [r3, #0]
    dac6:	00d8      	lsls	r0, r3, #3
    dac8:	2316      	movs	r3, #22
    daca:	18fb      	adds	r3, r7, r3
    dacc:	881b      	ldrh	r3, [r3, #0]
    dace:	687a      	ldr	r2, [r7, #4]
    dad0:	4353      	muls	r3, r2
    dad2:	0019      	movs	r1, r3
    dad4:	f000 ffe2 	bl	ea9c <__udivsi3>
    dad8:	0003      	movs	r3, r0
    dada:	613b      	str	r3, [r7, #16]

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    dadc:	68fb      	ldr	r3, [r7, #12]
    dade:	681a      	ldr	r2, [r3, #0]
    dae0:	693b      	ldr	r3, [r7, #16]
    dae2:	b2db      	uxtb	r3, r3
    dae4:	1c19      	adds	r1, r3, #0
    dae6:	2307      	movs	r3, #7
    dae8:	400b      	ands	r3, r1
    daea:	b2d9      	uxtb	r1, r3
    daec:	8993      	ldrh	r3, [r2, #12]
    daee:	0348      	lsls	r0, r1, #13
    daf0:	04db      	lsls	r3, r3, #19
    daf2:	0cdb      	lsrs	r3, r3, #19
    daf4:	1c19      	adds	r1, r3, #0
    daf6:	1c03      	adds	r3, r0, #0
    daf8:	430b      	orrs	r3, r1
    dafa:	8193      	strh	r3, [r2, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    dafc:	68fb      	ldr	r3, [r7, #12]
    dafe:	681a      	ldr	r2, [r3, #0]
    db00:	693b      	ldr	r3, [r7, #16]
    db02:	08db      	lsrs	r3, r3, #3
    db04:	b29b      	uxth	r3, r3
    db06:	04db      	lsls	r3, r3, #19
    db08:	0cdb      	lsrs	r3, r3, #19
    db0a:	b299      	uxth	r1, r3
    db0c:	8993      	ldrh	r3, [r2, #12]
    db0e:	04c9      	lsls	r1, r1, #19
    db10:	0cc8      	lsrs	r0, r1, #19
    db12:	0b5b      	lsrs	r3, r3, #13
    db14:	035b      	lsls	r3, r3, #13
    db16:	1c19      	adds	r1, r3, #0
    db18:	1c03      	adds	r3, r0, #0
    db1a:	430b      	orrs	r3, r1
    db1c:	8193      	strh	r3, [r2, #12]
  }
}
    db1e:	46c0      	nop			; (mov r8, r8)
    db20:	46bd      	mov	sp, r7
    db22:	b006      	add	sp, #24
    db24:	bd80      	pop	{r7, pc}
    db26:	46c0      	nop			; (mov r8, r8)
    db28:	20000048 	.word	0x20000048

0000db2c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    db2c:	b590      	push	{r4, r7, lr}
    db2e:	b083      	sub	sp, #12
    db30:	af00      	add	r7, sp, #0
    db32:	6078      	str	r0, [r7, #4]
    db34:	000c      	movs	r4, r1
    db36:	0010      	movs	r0, r2
    db38:	0019      	movs	r1, r3
    db3a:	1cfb      	adds	r3, r7, #3
    db3c:	1c22      	adds	r2, r4, #0
    db3e:	701a      	strb	r2, [r3, #0]
    db40:	1cbb      	adds	r3, r7, #2
    db42:	1c02      	adds	r2, r0, #0
    db44:	701a      	strb	r2, [r3, #0]
    db46:	1c7b      	adds	r3, r7, #1
    db48:	1c0a      	adds	r2, r1, #0
    db4a:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    db4c:	687b      	ldr	r3, [r7, #4]
    db4e:	681b      	ldr	r3, [r3, #0]
    db50:	687a      	ldr	r2, [r7, #4]
    db52:	6812      	ldr	r2, [r2, #0]
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    db54:	6811      	ldr	r1, [r2, #0]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    db56:	1c7a      	adds	r2, r7, #1
    db58:	7812      	ldrb	r2, [r2, #0]
    db5a:	3a02      	subs	r2, #2
    db5c:	1e50      	subs	r0, r2, #1
    db5e:	4182      	sbcs	r2, r0
    db60:	b2d2      	uxtb	r2, r2
    db62:	0612      	lsls	r2, r2, #24
    db64:	0010      	movs	r0, r2
    db66:	22f0      	movs	r2, #240	; 0xf0
    db68:	0512      	lsls	r2, r2, #20
    db6a:	4002      	ands	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    db6c:	1cb8      	adds	r0, r7, #2
    db6e:	7800      	ldrb	r0, [r0, #0]
    db70:	0780      	lsls	r0, r0, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    db72:	4302      	orrs	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    db74:	430a      	orrs	r2, r1
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    db76:	601a      	str	r2, [r3, #0]

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    db78:	687b      	ldr	r3, [r7, #4]
    db7a:	681b      	ldr	r3, [r3, #0]
    db7c:	687a      	ldr	r2, [r7, #4]
    db7e:	6812      	ldr	r2, [r2, #0]
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    db80:	6851      	ldr	r1, [r2, #4]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    db82:	1cfa      	adds	r2, r7, #3
    db84:	7812      	ldrb	r2, [r2, #0]
    db86:	2007      	movs	r0, #7
    db88:	4002      	ands	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    db8a:	2018      	movs	r0, #24
    db8c:	1838      	adds	r0, r7, r0
    db8e:	7800      	ldrb	r0, [r0, #0]
    db90:	0180      	lsls	r0, r0, #6
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    db92:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    db94:	1c78      	adds	r0, r7, #1
    db96:	7800      	ldrb	r0, [r0, #0]
    db98:	2802      	cmp	r0, #2
    db9a:	d003      	beq.n	dba4 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x78>
    db9c:	1c78      	adds	r0, r7, #1
    db9e:	7800      	ldrb	r0, [r0, #0]
    dba0:	0340      	lsls	r0, r0, #13
    dba2:	e000      	b.n	dba6 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x7a>
    dba4:	2000      	movs	r0, #0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    dba6:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    dba8:	430a      	orrs	r2, r1
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    dbaa:	605a      	str	r2, [r3, #4]
}
    dbac:	46c0      	nop			; (mov r8, r8)
    dbae:	46bd      	mov	sp, r7
    dbb0:	b003      	add	sp, #12
    dbb2:	bd90      	pop	{r4, r7, pc}

0000dbb4 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    dbb4:	b590      	push	{r4, r7, lr}
    dbb6:	b083      	sub	sp, #12
    dbb8:	af00      	add	r7, sp, #0
    dbba:	6078      	str	r0, [r7, #4]
    dbbc:	0008      	movs	r0, r1
    dbbe:	0011      	movs	r1, r2
    dbc0:	1cfb      	adds	r3, r7, #3
    dbc2:	1c02      	adds	r2, r0, #0
    dbc4:	701a      	strb	r2, [r3, #0]
    dbc6:	1cbb      	adds	r3, r7, #2
    dbc8:	1c0a      	adds	r2, r1, #0
    dbca:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    dbcc:	687b      	ldr	r3, [r7, #4]
    dbce:	681b      	ldr	r3, [r3, #0]
    dbd0:	687a      	ldr	r2, [r7, #4]
    dbd2:	6812      	ldr	r2, [r2, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    dbd4:	6811      	ldr	r1, [r2, #0]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    dbd6:	1cfa      	adds	r2, r7, #3
    dbd8:	7812      	ldrb	r2, [r2, #0]
    dbda:	0412      	lsls	r2, r2, #16
    dbdc:	0010      	movs	r0, r2
    dbde:	22c0      	movs	r2, #192	; 0xc0
    dbe0:	0292      	lsls	r2, r2, #10
    dbe2:	4010      	ands	r0, r2
                SERCOM_USART_CTRLA_RXPO(rxPad);
    dbe4:	1cba      	adds	r2, r7, #2
    dbe6:	7812      	ldrb	r2, [r2, #0]
    dbe8:	0512      	lsls	r2, r2, #20
    dbea:	0014      	movs	r4, r2
    dbec:	22c0      	movs	r2, #192	; 0xc0
    dbee:	0392      	lsls	r2, r2, #14
    dbf0:	4022      	ands	r2, r4
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    dbf2:	4302      	orrs	r2, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    dbf4:	430a      	orrs	r2, r1
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    dbf6:	601a      	str	r2, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    dbf8:	687b      	ldr	r3, [r7, #4]
    dbfa:	681b      	ldr	r3, [r3, #0]
    dbfc:	687a      	ldr	r2, [r7, #4]
    dbfe:	6812      	ldr	r2, [r2, #0]
    dc00:	6852      	ldr	r2, [r2, #4]
    dc02:	21c0      	movs	r1, #192	; 0xc0
    dc04:	0289      	lsls	r1, r1, #10
    dc06:	430a      	orrs	r2, r1
    dc08:	605a      	str	r2, [r3, #4]
}
    dc0a:	46c0      	nop			; (mov r8, r8)
    dc0c:	46bd      	mov	sp, r7
    dc0e:	b003      	add	sp, #12
    dc10:	bd90      	pop	{r4, r7, pc}

0000dc12 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
    dc12:	b580      	push	{r7, lr}
    dc14:	b082      	sub	sp, #8
    dc16:	af00      	add	r7, sp, #0
    dc18:	6078      	str	r0, [r7, #4]
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    dc1a:	687b      	ldr	r3, [r7, #4]
    dc1c:	681b      	ldr	r3, [r3, #0]
    dc1e:	681a      	ldr	r2, [r3, #0]
    dc20:	2101      	movs	r1, #1
    dc22:	430a      	orrs	r2, r1
    dc24:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    dc26:	687b      	ldr	r3, [r7, #4]
    dc28:	681b      	ldr	r3, [r3, #0]
    dc2a:	681b      	ldr	r3, [r3, #0]
    dc2c:	07db      	lsls	r3, r3, #31
    dc2e:	0fdb      	lsrs	r3, r3, #31
    dc30:	b2db      	uxtb	r3, r3
    dc32:	2b00      	cmp	r3, #0
    dc34:	d107      	bne.n	dc46 <_ZN6SERCOM9resetUARTEv+0x34>
    dc36:	687b      	ldr	r3, [r7, #4]
    dc38:	681b      	ldr	r3, [r3, #0]
    dc3a:	69db      	ldr	r3, [r3, #28]
    dc3c:	07db      	lsls	r3, r3, #31
    dc3e:	0fdb      	lsrs	r3, r3, #31
    dc40:	b2db      	uxtb	r3, r3
    dc42:	2b00      	cmp	r3, #0
    dc44:	d001      	beq.n	dc4a <_ZN6SERCOM9resetUARTEv+0x38>
    dc46:	2301      	movs	r3, #1
    dc48:	e000      	b.n	dc4c <_ZN6SERCOM9resetUARTEv+0x3a>
    dc4a:	2300      	movs	r3, #0
    dc4c:	2b00      	cmp	r3, #0
    dc4e:	d000      	beq.n	dc52 <_ZN6SERCOM9resetUARTEv+0x40>
    dc50:	e7e9      	b.n	dc26 <_ZN6SERCOM9resetUARTEv+0x14>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    dc52:	46c0      	nop			; (mov r8, r8)
    dc54:	46bd      	mov	sp, r7
    dc56:	b002      	add	sp, #8
    dc58:	bd80      	pop	{r7, pc}

0000dc5a <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
    dc5a:	b580      	push	{r7, lr}
    dc5c:	b082      	sub	sp, #8
    dc5e:	af00      	add	r7, sp, #0
    dc60:	6078      	str	r0, [r7, #4]
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	681b      	ldr	r3, [r3, #0]
    dc66:	681a      	ldr	r2, [r3, #0]
    dc68:	2102      	movs	r1, #2
    dc6a:	430a      	orrs	r2, r1
    dc6c:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    dc6e:	687b      	ldr	r3, [r7, #4]
    dc70:	681b      	ldr	r3, [r3, #0]
    dc72:	69db      	ldr	r3, [r3, #28]
    dc74:	079b      	lsls	r3, r3, #30
    dc76:	0fdb      	lsrs	r3, r3, #31
    dc78:	b2db      	uxtb	r3, r3
    dc7a:	2b00      	cmp	r3, #0
    dc7c:	d000      	beq.n	dc80 <_ZN6SERCOM10enableUARTEv+0x26>
    dc7e:	e7f6      	b.n	dc6e <_ZN6SERCOM10enableUARTEv+0x14>
}
    dc80:	46c0      	nop			; (mov r8, r8)
    dc82:	46bd      	mov	sp, r7
    dc84:	b002      	add	sp, #8
    dc86:	bd80      	pop	{r7, pc}

0000dc88 <_ZN6SERCOM9flushUARTEv>:

void SERCOM::flushUART()
{
    dc88:	b580      	push	{r7, lr}
    dc8a:	b082      	sub	sp, #8
    dc8c:	af00      	add	r7, sp, #0
    dc8e:	6078      	str	r0, [r7, #4]
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    dc90:	687b      	ldr	r3, [r7, #4]
    dc92:	0018      	movs	r0, r3
    dc94:	f000 f849 	bl	dd2a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    dc98:	1e03      	subs	r3, r0, #0
    dc9a:	d10b      	bne.n	dcb4 <_ZN6SERCOM9flushUARTEv+0x2c>
    return;

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
    dc9c:	687b      	ldr	r3, [r7, #4]
    dc9e:	681b      	ldr	r3, [r3, #0]
    dca0:	7e1b      	ldrb	r3, [r3, #24]
    dca2:	079b      	lsls	r3, r3, #30
    dca4:	0fdb      	lsrs	r3, r3, #31
    dca6:	b2db      	uxtb	r3, r3
    dca8:	2201      	movs	r2, #1
    dcaa:	4053      	eors	r3, r2
    dcac:	b2db      	uxtb	r3, r3
    dcae:	2b00      	cmp	r3, #0
    dcb0:	d001      	beq.n	dcb6 <_ZN6SERCOM9flushUARTEv+0x2e>
    dcb2:	e7f3      	b.n	dc9c <_ZN6SERCOM9flushUARTEv+0x14>
    return;
    dcb4:	46c0      	nop			; (mov r8, r8)
}
    dcb6:	46bd      	mov	sp, r7
    dcb8:	b002      	add	sp, #8
    dcba:	bd80      	pop	{r7, pc}

0000dcbc <_ZN6SERCOM15clearStatusUARTEv>:

void SERCOM::clearStatusUART()
{
    dcbc:	b580      	push	{r7, lr}
    dcbe:	b082      	sub	sp, #8
    dcc0:	af00      	add	r7, sp, #0
    dcc2:	6078      	str	r0, [r7, #4]
  //Reset (with 0) the STATUS register
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    dcc4:	687b      	ldr	r3, [r7, #4]
    dcc6:	681b      	ldr	r3, [r3, #0]
    dcc8:	2200      	movs	r2, #0
    dcca:	835a      	strh	r2, [r3, #26]
}
    dccc:	46c0      	nop			; (mov r8, r8)
    dcce:	46bd      	mov	sp, r7
    dcd0:	b002      	add	sp, #8
    dcd2:	bd80      	pop	{r7, pc}

0000dcd4 <_ZN6SERCOM17availableDataUARTEv>:

bool SERCOM::availableDataUART()
{
    dcd4:	b580      	push	{r7, lr}
    dcd6:	b082      	sub	sp, #8
    dcd8:	af00      	add	r7, sp, #0
    dcda:	6078      	str	r0, [r7, #4]
  //RXC : Receive Complete
  return sercom->USART.INTFLAG.bit.RXC;
    dcdc:	687b      	ldr	r3, [r7, #4]
    dcde:	681b      	ldr	r3, [r3, #0]
    dce0:	7e1b      	ldrb	r3, [r3, #24]
    dce2:	075b      	lsls	r3, r3, #29
    dce4:	0fdb      	lsrs	r3, r3, #31
    dce6:	b2db      	uxtb	r3, r3
}
    dce8:	0018      	movs	r0, r3
    dcea:	46bd      	mov	sp, r7
    dcec:	b002      	add	sp, #8
    dcee:	bd80      	pop	{r7, pc}

0000dcf0 <_ZN6SERCOM11isUARTErrorEv>:

bool SERCOM::isUARTError()
{
    dcf0:	b580      	push	{r7, lr}
    dcf2:	b082      	sub	sp, #8
    dcf4:	af00      	add	r7, sp, #0
    dcf6:	6078      	str	r0, [r7, #4]
  return sercom->USART.INTFLAG.bit.ERROR;
    dcf8:	687b      	ldr	r3, [r7, #4]
    dcfa:	681b      	ldr	r3, [r3, #0]
    dcfc:	7e1b      	ldrb	r3, [r3, #24]
    dcfe:	061b      	lsls	r3, r3, #24
    dd00:	0fdb      	lsrs	r3, r3, #31
    dd02:	b2db      	uxtb	r3, r3
}
    dd04:	0018      	movs	r0, r3
    dd06:	46bd      	mov	sp, r7
    dd08:	b002      	add	sp, #8
    dd0a:	bd80      	pop	{r7, pc}

0000dd0c <_ZN6SERCOM20acknowledgeUARTErrorEv>:

void SERCOM::acknowledgeUARTError()
{
    dd0c:	b580      	push	{r7, lr}
    dd0e:	b082      	sub	sp, #8
    dd10:	af00      	add	r7, sp, #0
    dd12:	6078      	str	r0, [r7, #4]
  sercom->USART.INTFLAG.bit.ERROR = 1;
    dd14:	687b      	ldr	r3, [r7, #4]
    dd16:	681a      	ldr	r2, [r3, #0]
    dd18:	7e13      	ldrb	r3, [r2, #24]
    dd1a:	2180      	movs	r1, #128	; 0x80
    dd1c:	4249      	negs	r1, r1
    dd1e:	430b      	orrs	r3, r1
    dd20:	7613      	strb	r3, [r2, #24]
}
    dd22:	46c0      	nop			; (mov r8, r8)
    dd24:	46bd      	mov	sp, r7
    dd26:	b002      	add	sp, #8
    dd28:	bd80      	pop	{r7, pc}

0000dd2a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  //PERR : Parity Error
  return sercom->USART.STATUS.bit.PERR;
}

bool SERCOM::isDataRegisterEmptyUART()
{
    dd2a:	b580      	push	{r7, lr}
    dd2c:	b082      	sub	sp, #8
    dd2e:	af00      	add	r7, sp, #0
    dd30:	6078      	str	r0, [r7, #4]
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    dd32:	687b      	ldr	r3, [r7, #4]
    dd34:	681b      	ldr	r3, [r3, #0]
    dd36:	7e1b      	ldrb	r3, [r3, #24]
    dd38:	07db      	lsls	r3, r3, #31
    dd3a:	0fdb      	lsrs	r3, r3, #31
    dd3c:	b2db      	uxtb	r3, r3
}
    dd3e:	0018      	movs	r0, r3
    dd40:	46bd      	mov	sp, r7
    dd42:	b002      	add	sp, #8
    dd44:	bd80      	pop	{r7, pc}

0000dd46 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
    dd46:	b580      	push	{r7, lr}
    dd48:	b082      	sub	sp, #8
    dd4a:	af00      	add	r7, sp, #0
    dd4c:	6078      	str	r0, [r7, #4]
  return sercom->USART.DATA.bit.DATA;
    dd4e:	687b      	ldr	r3, [r7, #4]
    dd50:	681b      	ldr	r3, [r3, #0]
    dd52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    dd54:	05db      	lsls	r3, r3, #23
    dd56:	0ddb      	lsrs	r3, r3, #23
    dd58:	b29b      	uxth	r3, r3
    dd5a:	b2db      	uxtb	r3, r3
}
    dd5c:	0018      	movs	r0, r3
    dd5e:	46bd      	mov	sp, r7
    dd60:	b002      	add	sp, #8
    dd62:	bd80      	pop	{r7, pc}

0000dd64 <_ZN6SERCOM13writeDataUARTEh>:

int SERCOM::writeDataUART(uint8_t data)
{
    dd64:	b580      	push	{r7, lr}
    dd66:	b082      	sub	sp, #8
    dd68:	af00      	add	r7, sp, #0
    dd6a:	6078      	str	r0, [r7, #4]
    dd6c:	000a      	movs	r2, r1
    dd6e:	1cfb      	adds	r3, r7, #3
    dd70:	701a      	strb	r2, [r3, #0]
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    dd72:	687b      	ldr	r3, [r7, #4]
    dd74:	0018      	movs	r0, r3
    dd76:	f7ff ffd8 	bl	dd2a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    dd7a:	0003      	movs	r3, r0
    dd7c:	001a      	movs	r2, r3
    dd7e:	2301      	movs	r3, #1
    dd80:	4053      	eors	r3, r2
    dd82:	b2db      	uxtb	r3, r3
    dd84:	2b00      	cmp	r3, #0
    dd86:	d000      	beq.n	dd8a <_ZN6SERCOM13writeDataUARTEh+0x26>
    dd88:	e7f3      	b.n	dd72 <_ZN6SERCOM13writeDataUARTEh+0xe>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    dd8a:	687b      	ldr	r3, [r7, #4]
    dd8c:	681b      	ldr	r3, [r3, #0]
    dd8e:	1cfa      	adds	r2, r7, #3
    dd90:	7812      	ldrb	r2, [r2, #0]
    dd92:	b292      	uxth	r2, r2
    dd94:	851a      	strh	r2, [r3, #40]	; 0x28
  return 1;
    dd96:	2301      	movs	r3, #1
}
    dd98:	0018      	movs	r0, r3
    dd9a:	46bd      	mov	sp, r7
    dd9c:	b002      	add	sp, #8
    dd9e:	bd80      	pop	{r7, pc}

0000dda0 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
    dda0:	b580      	push	{r7, lr}
    dda2:	b082      	sub	sp, #8
    dda4:	af00      	add	r7, sp, #0
    dda6:	6078      	str	r0, [r7, #4]
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    dda8:	687b      	ldr	r3, [r7, #4]
    ddaa:	681b      	ldr	r3, [r3, #0]
    ddac:	2201      	movs	r2, #1
    ddae:	759a      	strb	r2, [r3, #22]
}
    ddb0:	46c0      	nop			; (mov r8, r8)
    ddb2:	46bd      	mov	sp, r7
    ddb4:	b002      	add	sp, #8
    ddb6:	bd80      	pop	{r7, pc}

0000ddb8 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
    ddb8:	b580      	push	{r7, lr}
    ddba:	b082      	sub	sp, #8
    ddbc:	af00      	add	r7, sp, #0
    ddbe:	6078      	str	r0, [r7, #4]
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    ddc0:	687b      	ldr	r3, [r7, #4]
    ddc2:	681b      	ldr	r3, [r3, #0]
    ddc4:	2201      	movs	r2, #1
    ddc6:	751a      	strb	r2, [r3, #20]
}
    ddc8:	46c0      	nop			; (mov r8, r8)
    ddca:	46bd      	mov	sp, r7
    ddcc:	b002      	add	sp, #8
    ddce:	bd80      	pop	{r7, pc}

0000ddd0 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
/*	=========================
 *	===== Sercom SPI
 *	=========================
*/
void SERCOM::initSPI(SercomSpiTXPad mosi, SercomRXPad miso, SercomSpiCharSize charSize, SercomDataOrder dataOrder)
{
    ddd0:	b590      	push	{r4, r7, lr}
    ddd2:	b083      	sub	sp, #12
    ddd4:	af00      	add	r7, sp, #0
    ddd6:	6078      	str	r0, [r7, #4]
    ddd8:	000c      	movs	r4, r1
    ddda:	0010      	movs	r0, r2
    dddc:	0019      	movs	r1, r3
    ddde:	1cfb      	adds	r3, r7, #3
    dde0:	1c22      	adds	r2, r4, #0
    dde2:	701a      	strb	r2, [r3, #0]
    dde4:	1cbb      	adds	r3, r7, #2
    dde6:	1c02      	adds	r2, r0, #0
    dde8:	701a      	strb	r2, [r3, #0]
    ddea:	1c7b      	adds	r3, r7, #1
    ddec:	1c0a      	adds	r2, r1, #0
    ddee:	701a      	strb	r2, [r3, #0]
  resetSPI();
    ddf0:	687b      	ldr	r3, [r7, #4]
    ddf2:	0018      	movs	r0, r3
    ddf4:	f000 f864 	bl	dec0 <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    ddf8:	687b      	ldr	r3, [r7, #4]
    ddfa:	0018      	movs	r0, r3
    ddfc:	f000 fb88 	bl	e510 <_ZN6SERCOM13initClockNVICEv>

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    de00:	687b      	ldr	r3, [r7, #4]
    de02:	681b      	ldr	r3, [r3, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    de04:	1cfa      	adds	r2, r7, #3
    de06:	7812      	ldrb	r2, [r2, #0]
    de08:	0412      	lsls	r2, r2, #16
    de0a:	0011      	movs	r1, r2
    de0c:	22c0      	movs	r2, #192	; 0xc0
    de0e:	0292      	lsls	r2, r2, #10
    de10:	4011      	ands	r1, r2
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    de12:	1cba      	adds	r2, r7, #2
    de14:	7812      	ldrb	r2, [r2, #0]
    de16:	0512      	lsls	r2, r2, #20
    de18:	0010      	movs	r0, r2
    de1a:	22c0      	movs	r2, #192	; 0xc0
    de1c:	0392      	lsls	r2, r2, #14
    de1e:	4002      	ands	r2, r0
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    de20:	430a      	orrs	r2, r1
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    de22:	2118      	movs	r1, #24
    de24:	1879      	adds	r1, r7, r1
    de26:	7809      	ldrb	r1, [r1, #0]
    de28:	0789      	lsls	r1, r1, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    de2a:	430a      	orrs	r2, r1
    de2c:	210c      	movs	r1, #12
    de2e:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    de30:	601a      	str	r2, [r3, #0]

  //Setting the CTRLB register
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    de32:	687b      	ldr	r3, [r7, #4]
    de34:	681b      	ldr	r3, [r3, #0]
    de36:	1c7a      	adds	r2, r7, #1
    de38:	7812      	ldrb	r2, [r2, #0]
    de3a:	2107      	movs	r1, #7
    de3c:	400a      	ands	r2, r1
    de3e:	2180      	movs	r1, #128	; 0x80
    de40:	0289      	lsls	r1, r1, #10
    de42:	430a      	orrs	r2, r1
    de44:	605a      	str	r2, [r3, #4]
                          SERCOM_SPI_CTRLB_RXEN;	//Active the SPI receiver.


}
    de46:	46c0      	nop			; (mov r8, r8)
    de48:	46bd      	mov	sp, r7
    de4a:	b003      	add	sp, #12
    de4c:	bd90      	pop	{r4, r7, pc}

0000de4e <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    de4e:	b590      	push	{r4, r7, lr}
    de50:	b087      	sub	sp, #28
    de52:	af00      	add	r7, sp, #0
    de54:	60f8      	str	r0, [r7, #12]
    de56:	607a      	str	r2, [r7, #4]
    de58:	230b      	movs	r3, #11
    de5a:	18fb      	adds	r3, r7, r3
    de5c:	1c0a      	adds	r2, r1, #0
    de5e:	701a      	strb	r2, [r3, #0]
  //Extract data from clockMode
  int cpha, cpol;

  if((clockMode & (0x1ul)) == 0 )
    de60:	230b      	movs	r3, #11
    de62:	18fb      	adds	r3, r7, r3
    de64:	781b      	ldrb	r3, [r3, #0]
    de66:	2201      	movs	r2, #1
    de68:	4013      	ands	r3, r2
    de6a:	d102      	bne.n	de72 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x24>
    cpha = 0;
    de6c:	2300      	movs	r3, #0
    de6e:	617b      	str	r3, [r7, #20]
    de70:	e001      	b.n	de76 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x28>
  else
    cpha = 1;
    de72:	2301      	movs	r3, #1
    de74:	617b      	str	r3, [r7, #20]

  if((clockMode & (0x2ul)) == 0)
    de76:	230b      	movs	r3, #11
    de78:	18fb      	adds	r3, r7, r3
    de7a:	781b      	ldrb	r3, [r3, #0]
    de7c:	2202      	movs	r2, #2
    de7e:	4013      	ands	r3, r2
    de80:	d102      	bne.n	de88 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x3a>
    cpol = 0;
    de82:	2300      	movs	r3, #0
    de84:	613b      	str	r3, [r7, #16]
    de86:	e001      	b.n	de8c <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x3e>
  else
    cpol = 1;
    de88:	2301      	movs	r3, #1
    de8a:	613b      	str	r3, [r7, #16]

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    de8c:	68fb      	ldr	r3, [r7, #12]
    de8e:	681b      	ldr	r3, [r3, #0]
    de90:	68fa      	ldr	r2, [r7, #12]
    de92:	6812      	ldr	r2, [r2, #0]
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    de94:	6812      	ldr	r2, [r2, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    de96:	6979      	ldr	r1, [r7, #20]
    de98:	0708      	lsls	r0, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    de9a:	6939      	ldr	r1, [r7, #16]
    de9c:	0749      	lsls	r1, r1, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    de9e:	4301      	orrs	r1, r0
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    dea0:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dea2:	601a      	str	r2, [r3, #0]

  //Synchronous arithmetic
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    dea4:	68fb      	ldr	r3, [r7, #12]
    dea6:	681c      	ldr	r4, [r3, #0]
    dea8:	687a      	ldr	r2, [r7, #4]
    deaa:	68fb      	ldr	r3, [r7, #12]
    deac:	0011      	movs	r1, r2
    deae:	0018      	movs	r0, r3
    deb0:	f000 f886 	bl	dfc0 <_ZN6SERCOM28calculateBaudrateSynchronousEm>
    deb4:	0003      	movs	r3, r0
    deb6:	7323      	strb	r3, [r4, #12]
}
    deb8:	46c0      	nop			; (mov r8, r8)
    deba:	46bd      	mov	sp, r7
    debc:	b007      	add	sp, #28
    debe:	bd90      	pop	{r4, r7, pc}

0000dec0 <_ZN6SERCOM8resetSPIEv>:

void SERCOM::resetSPI()
{
    dec0:	b580      	push	{r7, lr}
    dec2:	b082      	sub	sp, #8
    dec4:	af00      	add	r7, sp, #0
    dec6:	6078      	str	r0, [r7, #4]
  //Setting the Software Reset bit to 1
  sercom->SPI.CTRLA.bit.SWRST = 1;
    dec8:	687b      	ldr	r3, [r7, #4]
    deca:	681b      	ldr	r3, [r3, #0]
    decc:	681a      	ldr	r2, [r3, #0]
    dece:	2101      	movs	r1, #1
    ded0:	430a      	orrs	r2, r1
    ded2:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    ded4:	687b      	ldr	r3, [r7, #4]
    ded6:	681b      	ldr	r3, [r3, #0]
    ded8:	681b      	ldr	r3, [r3, #0]
    deda:	07db      	lsls	r3, r3, #31
    dedc:	0fdb      	lsrs	r3, r3, #31
    dede:	b2db      	uxtb	r3, r3
    dee0:	2b00      	cmp	r3, #0
    dee2:	d107      	bne.n	def4 <_ZN6SERCOM8resetSPIEv+0x34>
    dee4:	687b      	ldr	r3, [r7, #4]
    dee6:	681b      	ldr	r3, [r3, #0]
    dee8:	69db      	ldr	r3, [r3, #28]
    deea:	07db      	lsls	r3, r3, #31
    deec:	0fdb      	lsrs	r3, r3, #31
    deee:	b2db      	uxtb	r3, r3
    def0:	2b00      	cmp	r3, #0
    def2:	d001      	beq.n	def8 <_ZN6SERCOM8resetSPIEv+0x38>
    def4:	2301      	movs	r3, #1
    def6:	e000      	b.n	defa <_ZN6SERCOM8resetSPIEv+0x3a>
    def8:	2300      	movs	r3, #0
    defa:	2b00      	cmp	r3, #0
    defc:	d000      	beq.n	df00 <_ZN6SERCOM8resetSPIEv+0x40>
    defe:	e7e9      	b.n	ded4 <_ZN6SERCOM8resetSPIEv+0x14>
}
    df00:	46c0      	nop			; (mov r8, r8)
    df02:	46bd      	mov	sp, r7
    df04:	b002      	add	sp, #8
    df06:	bd80      	pop	{r7, pc}

0000df08 <_ZN6SERCOM9enableSPIEv>:

void SERCOM::enableSPI()
{
    df08:	b580      	push	{r7, lr}
    df0a:	b082      	sub	sp, #8
    df0c:	af00      	add	r7, sp, #0
    df0e:	6078      	str	r0, [r7, #4]
  //Setting the enable bit to 1
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	681b      	ldr	r3, [r3, #0]
    df14:	681a      	ldr	r2, [r3, #0]
    df16:	2102      	movs	r1, #2
    df18:	430a      	orrs	r2, r1
    df1a:	601a      	str	r2, [r3, #0]

  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    df1c:	687b      	ldr	r3, [r7, #4]
    df1e:	681b      	ldr	r3, [r3, #0]
    df20:	69db      	ldr	r3, [r3, #28]
    df22:	079b      	lsls	r3, r3, #30
    df24:	0fdb      	lsrs	r3, r3, #31
    df26:	b2db      	uxtb	r3, r3
    df28:	2b00      	cmp	r3, #0
    df2a:	d000      	beq.n	df2e <_ZN6SERCOM9enableSPIEv+0x26>
    df2c:	e7f6      	b.n	df1c <_ZN6SERCOM9enableSPIEv+0x14>
  {
    //Waiting then enable bit from SYNCBUSY is equal to 0;
  }
}
    df2e:	46c0      	nop			; (mov r8, r8)
    df30:	46bd      	mov	sp, r7
    df32:	b002      	add	sp, #8
    df34:	bd80      	pop	{r7, pc}

0000df36 <_ZN6SERCOM10disableSPIEv>:

void SERCOM::disableSPI()
{
    df36:	b580      	push	{r7, lr}
    df38:	b082      	sub	sp, #8
    df3a:	af00      	add	r7, sp, #0
    df3c:	6078      	str	r0, [r7, #4]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    df3e:	687b      	ldr	r3, [r7, #4]
    df40:	681b      	ldr	r3, [r3, #0]
    df42:	69db      	ldr	r3, [r3, #28]
    df44:	079b      	lsls	r3, r3, #30
    df46:	0fdb      	lsrs	r3, r3, #31
    df48:	b2db      	uxtb	r3, r3
    df4a:	2b00      	cmp	r3, #0
    df4c:	d000      	beq.n	df50 <_ZN6SERCOM10disableSPIEv+0x1a>
    df4e:	e7f6      	b.n	df3e <_ZN6SERCOM10disableSPIEv+0x8>
  {
    //Waiting then enable bit from SYNCBUSY is equal to 0;
  }

  //Setting the enable bit to 0
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    df50:	687b      	ldr	r3, [r7, #4]
    df52:	681b      	ldr	r3, [r3, #0]
    df54:	681a      	ldr	r2, [r3, #0]
    df56:	2102      	movs	r1, #2
    df58:	438a      	bics	r2, r1
    df5a:	601a      	str	r2, [r3, #0]
}
    df5c:	46c0      	nop			; (mov r8, r8)
    df5e:	46bd      	mov	sp, r7
    df60:	b002      	add	sp, #8
    df62:	bd80      	pop	{r7, pc}

0000df64 <_ZN6SERCOM15transferDataSPIEh>:

  enableSPI();
}

uint8_t SERCOM::transferDataSPI(uint8_t data)
{
    df64:	b580      	push	{r7, lr}
    df66:	b082      	sub	sp, #8
    df68:	af00      	add	r7, sp, #0
    df6a:	6078      	str	r0, [r7, #4]
    df6c:	000a      	movs	r2, r1
    df6e:	1cfb      	adds	r3, r7, #3
    df70:	701a      	strb	r2, [r3, #0]
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    df72:	687b      	ldr	r3, [r7, #4]
    df74:	681b      	ldr	r3, [r3, #0]
    df76:	1cfa      	adds	r2, r7, #3
    df78:	7812      	ldrb	r2, [r2, #0]
    df7a:	b292      	uxth	r2, r2
    df7c:	05d2      	lsls	r2, r2, #23
    df7e:	0dd2      	lsrs	r2, r2, #23
    df80:	b291      	uxth	r1, r2
    df82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df84:	05c9      	lsls	r1, r1, #23
    df86:	0dc9      	lsrs	r1, r1, #23
    df88:	0a52      	lsrs	r2, r2, #9
    df8a:	0252      	lsls	r2, r2, #9
    df8c:	430a      	orrs	r2, r1
    df8e:	629a      	str	r2, [r3, #40]	; 0x28

  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    df90:	687b      	ldr	r3, [r7, #4]
    df92:	681b      	ldr	r3, [r3, #0]
    df94:	7e1b      	ldrb	r3, [r3, #24]
    df96:	075b      	lsls	r3, r3, #29
    df98:	0fdb      	lsrs	r3, r3, #31
    df9a:	b2db      	uxtb	r3, r3
    df9c:	2201      	movs	r2, #1
    df9e:	4053      	eors	r3, r2
    dfa0:	b2db      	uxtb	r3, r3
    dfa2:	2b00      	cmp	r3, #0
    dfa4:	d000      	beq.n	dfa8 <_ZN6SERCOM15transferDataSPIEh+0x44>
    dfa6:	e7f3      	b.n	df90 <_ZN6SERCOM15transferDataSPIEh+0x2c>
  {
    // Waiting Complete Reception
  }

  return sercom->SPI.DATA.bit.DATA;  // Reading data
    dfa8:	687b      	ldr	r3, [r7, #4]
    dfaa:	681b      	ldr	r3, [r3, #0]
    dfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfae:	05db      	lsls	r3, r3, #23
    dfb0:	0ddb      	lsrs	r3, r3, #23
    dfb2:	b29b      	uxth	r3, r3
    dfb4:	b2db      	uxtb	r3, r3
}
    dfb6:	0018      	movs	r0, r3
    dfb8:	46bd      	mov	sp, r7
    dfba:	b002      	add	sp, #8
    dfbc:	bd80      	pop	{r7, pc}
	...

0000dfc0 <_ZN6SERCOM28calculateBaudrateSynchronousEm>:
//	//RXC : Receive complete
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
    dfc0:	b580      	push	{r7, lr}
    dfc2:	b082      	sub	sp, #8
    dfc4:	af00      	add	r7, sp, #0
    dfc6:	6078      	str	r0, [r7, #4]
    dfc8:	6039      	str	r1, [r7, #0]
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    dfca:	683b      	ldr	r3, [r7, #0]
    dfcc:	005b      	lsls	r3, r3, #1
    dfce:	0019      	movs	r1, r3
    dfd0:	4805      	ldr	r0, [pc, #20]	; (dfe8 <_ZN6SERCOM28calculateBaudrateSynchronousEm+0x28>)
    dfd2:	f000 fd63 	bl	ea9c <__udivsi3>
    dfd6:	0003      	movs	r3, r0
    dfd8:	b2db      	uxtb	r3, r3
    dfda:	3b01      	subs	r3, #1
    dfdc:	b2db      	uxtb	r3, r3
}
    dfde:	0018      	movs	r0, r3
    dfe0:	46bd      	mov	sp, r7
    dfe2:	b002      	add	sp, #8
    dfe4:	bd80      	pop	{r7, pc}
    dfe6:	46c0      	nop			; (mov r8, r8)
    dfe8:	02dc6c00 	.word	0x02dc6c00

0000dfec <_ZN6SERCOM9resetWIREEv>:
/*	=========================
 *	===== Sercom WIRE
 *	=========================
 */
void SERCOM::resetWIRE()
{
    dfec:	b580      	push	{r7, lr}
    dfee:	b082      	sub	sp, #8
    dff0:	af00      	add	r7, sp, #0
    dff2:	6078      	str	r0, [r7, #4]
  //I2CM OR I2CS, no matter SWRST is the same bit.

  //Setting the Software bit to 1
  sercom->I2CM.CTRLA.bit.SWRST = 1;
    dff4:	687b      	ldr	r3, [r7, #4]
    dff6:	681b      	ldr	r3, [r3, #0]
    dff8:	681a      	ldr	r2, [r3, #0]
    dffa:	2101      	movs	r1, #1
    dffc:	430a      	orrs	r2, r1
    dffe:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
    e000:	687b      	ldr	r3, [r7, #4]
    e002:	681b      	ldr	r3, [r3, #0]
    e004:	681b      	ldr	r3, [r3, #0]
    e006:	07db      	lsls	r3, r3, #31
    e008:	0fdb      	lsrs	r3, r3, #31
    e00a:	b2db      	uxtb	r3, r3
    e00c:	2b00      	cmp	r3, #0
    e00e:	d107      	bne.n	e020 <_ZN6SERCOM9resetWIREEv+0x34>
    e010:	687b      	ldr	r3, [r7, #4]
    e012:	681b      	ldr	r3, [r3, #0]
    e014:	69db      	ldr	r3, [r3, #28]
    e016:	07db      	lsls	r3, r3, #31
    e018:	0fdb      	lsrs	r3, r3, #31
    e01a:	b2db      	uxtb	r3, r3
    e01c:	2b00      	cmp	r3, #0
    e01e:	d001      	beq.n	e024 <_ZN6SERCOM9resetWIREEv+0x38>
    e020:	2301      	movs	r3, #1
    e022:	e000      	b.n	e026 <_ZN6SERCOM9resetWIREEv+0x3a>
    e024:	2300      	movs	r3, #0
    e026:	2b00      	cmp	r3, #0
    e028:	d000      	beq.n	e02c <_ZN6SERCOM9resetWIREEv+0x40>
    e02a:	e7e9      	b.n	e000 <_ZN6SERCOM9resetWIREEv+0x14>
}
    e02c:	46c0      	nop			; (mov r8, r8)
    e02e:	46bd      	mov	sp, r7
    e030:	b002      	add	sp, #8
    e032:	bd80      	pop	{r7, pc}

0000e034 <_ZN6SERCOM10enableWIREEv>:

void SERCOM::enableWIRE()
{
    e034:	b580      	push	{r7, lr}
    e036:	b082      	sub	sp, #8
    e038:	af00      	add	r7, sp, #0
    e03a:	6078      	str	r0, [r7, #4]
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    e03c:	687b      	ldr	r3, [r7, #4]
    e03e:	681b      	ldr	r3, [r3, #0]
    e040:	681a      	ldr	r2, [r3, #0]
    e042:	2102      	movs	r1, #2
    e044:	430a      	orrs	r2, r1
    e046:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    e048:	687b      	ldr	r3, [r7, #4]
    e04a:	681b      	ldr	r3, [r3, #0]
    e04c:	69db      	ldr	r3, [r3, #28]
    e04e:	079b      	lsls	r3, r3, #30
    e050:	0fdb      	lsrs	r3, r3, #31
    e052:	b2db      	uxtb	r3, r3
    e054:	2b00      	cmp	r3, #0
    e056:	d000      	beq.n	e05a <_ZN6SERCOM10enableWIREEv+0x26>
    e058:	e7f6      	b.n	e048 <_ZN6SERCOM10enableWIREEv+0x14>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    e05a:	687b      	ldr	r3, [r7, #4]
    e05c:	681a      	ldr	r2, [r3, #0]
    e05e:	8b53      	ldrh	r3, [r2, #26]
    e060:	2130      	movs	r1, #48	; 0x30
    e062:	438b      	bics	r3, r1
    e064:	1c19      	adds	r1, r3, #0
    e066:	2310      	movs	r3, #16
    e068:	430b      	orrs	r3, r1
    e06a:	8353      	strh	r3, [r2, #26]

  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
    e06c:	687b      	ldr	r3, [r7, #4]
    e06e:	681b      	ldr	r3, [r3, #0]
    e070:	69db      	ldr	r3, [r3, #28]
    e072:	075b      	lsls	r3, r3, #29
    e074:	0fdb      	lsrs	r3, r3, #31
    e076:	b2db      	uxtb	r3, r3
    e078:	2b00      	cmp	r3, #0
    e07a:	d000      	beq.n	e07e <_ZN6SERCOM10enableWIREEv+0x4a>
    e07c:	e7f6      	b.n	e06c <_ZN6SERCOM10enableWIREEv+0x38>
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    e07e:	46c0      	nop			; (mov r8, r8)
    e080:	46bd      	mov	sp, r7
    e082:	b002      	add	sp, #8
    e084:	bd80      	pop	{r7, pc}
	...

0000e088 <_ZN6SERCOM14initMasterWIREEm>:
    // Wait the SYSOP bit from SYNCBUSY to come back to 0
  }
}

void SERCOM::initMasterWIRE( uint32_t baudrate )
{
    e088:	b5b0      	push	{r4, r5, r7, lr}
    e08a:	b082      	sub	sp, #8
    e08c:	af00      	add	r7, sp, #0
    e08e:	6078      	str	r0, [r7, #4]
    e090:	6039      	str	r1, [r7, #0]
  // Initialize the peripheral clock and interruption
  initClockNVIC() ;
    e092:	687b      	ldr	r3, [r7, #4]
    e094:	0018      	movs	r0, r3
    e096:	f000 fa3b 	bl	e510 <_ZN6SERCOM13initClockNVICEv>

  resetWIRE() ;
    e09a:	687b      	ldr	r3, [r7, #4]
    e09c:	0018      	movs	r0, r3
    e09e:	f7ff ffa5 	bl	dfec <_ZN6SERCOM9resetWIREEv>

  // Set master mode and enable SCL Clock Stretch mode (stretch after ACK bit)
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    e0a2:	687b      	ldr	r3, [r7, #4]
    e0a4:	681b      	ldr	r3, [r3, #0]
    e0a6:	2214      	movs	r2, #20
    e0a8:	601a      	str	r2, [r3, #0]

  // Enable all interrupts
//  sercom->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB | SERCOM_I2CM_INTENSET_ERROR ;

  // Synchronous arithmetic baudrate
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    e0aa:	687b      	ldr	r3, [r7, #4]
    e0ac:	681c      	ldr	r4, [r3, #0]
    e0ae:	4b16      	ldr	r3, [pc, #88]	; (e108 <_ZN6SERCOM14initMasterWIREEm+0x80>)
    e0b0:	681a      	ldr	r2, [r3, #0]
    e0b2:	683b      	ldr	r3, [r7, #0]
    e0b4:	005b      	lsls	r3, r3, #1
    e0b6:	0019      	movs	r1, r3
    e0b8:	0010      	movs	r0, r2
    e0ba:	f000 fcef 	bl	ea9c <__udivsi3>
    e0be:	0003      	movs	r3, r0
    e0c0:	b2dd      	uxtb	r5, r3
    e0c2:	4b11      	ldr	r3, [pc, #68]	; (e108 <_ZN6SERCOM14initMasterWIREEm+0x80>)
    e0c4:	681b      	ldr	r3, [r3, #0]
    e0c6:	4911      	ldr	r1, [pc, #68]	; (e10c <_ZN6SERCOM14initMasterWIREEm+0x84>)
    e0c8:	0018      	movs	r0, r3
    e0ca:	f000 fce7 	bl	ea9c <__udivsi3>
    e0ce:	0003      	movs	r3, r0
    e0d0:	001a      	movs	r2, r3
    e0d2:	0013      	movs	r3, r2
    e0d4:	015b      	lsls	r3, r3, #5
    e0d6:	1a9b      	subs	r3, r3, r2
    e0d8:	009b      	lsls	r3, r3, #2
    e0da:	189a      	adds	r2, r3, r2
    e0dc:	23fa      	movs	r3, #250	; 0xfa
    e0de:	00d9      	lsls	r1, r3, #3
    e0e0:	0010      	movs	r0, r2
    e0e2:	f000 fcdb 	bl	ea9c <__udivsi3>
    e0e6:	0003      	movs	r3, r0
    e0e8:	b2db      	uxtb	r3, r3
    e0ea:	1aeb      	subs	r3, r5, r3
    e0ec:	b2db      	uxtb	r3, r3
    e0ee:	3b05      	subs	r3, #5
    e0f0:	b2da      	uxtb	r2, r3
    e0f2:	68e3      	ldr	r3, [r4, #12]
    e0f4:	21ff      	movs	r1, #255	; 0xff
    e0f6:	400a      	ands	r2, r1
    e0f8:	21ff      	movs	r1, #255	; 0xff
    e0fa:	438b      	bics	r3, r1
    e0fc:	4313      	orrs	r3, r2
    e0fe:	60e3      	str	r3, [r4, #12]
}
    e100:	46c0      	nop			; (mov r8, r8)
    e102:	46bd      	mov	sp, r7
    e104:	b002      	add	sp, #8
    e106:	bdb0      	pop	{r4, r5, r7, pc}
    e108:	20000048 	.word	0x20000048
    e10c:	000f4240 	.word	0x000f4240

0000e110 <_ZN6SERCOM18prepareNackBitWIREEv>:

void SERCOM::prepareNackBitWIRE( void )
{
    e110:	b580      	push	{r7, lr}
    e112:	b082      	sub	sp, #8
    e114:	af00      	add	r7, sp, #0
    e116:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE()) {
    e118:	687b      	ldr	r3, [r7, #4]
    e11a:	0018      	movs	r0, r3
    e11c:	f000 f945 	bl	e3aa <_ZN6SERCOM12isMasterWIREEv>
    e120:	1e03      	subs	r3, r0, #0
    e122:	d007      	beq.n	e134 <_ZN6SERCOM18prepareNackBitWIREEv+0x24>
    // Send a NACK
    sercom->I2CM.CTRLB.bit.ACKACT = 1;
    e124:	687b      	ldr	r3, [r7, #4]
    e126:	681b      	ldr	r3, [r3, #0]
    e128:	685a      	ldr	r2, [r3, #4]
    e12a:	2180      	movs	r1, #128	; 0x80
    e12c:	02c9      	lsls	r1, r1, #11
    e12e:	430a      	orrs	r2, r1
    e130:	605a      	str	r2, [r3, #4]
  } else {
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
  }
}
    e132:	e006      	b.n	e142 <_ZN6SERCOM18prepareNackBitWIREEv+0x32>
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    e134:	687b      	ldr	r3, [r7, #4]
    e136:	681b      	ldr	r3, [r3, #0]
    e138:	685a      	ldr	r2, [r3, #4]
    e13a:	2180      	movs	r1, #128	; 0x80
    e13c:	02c9      	lsls	r1, r1, #11
    e13e:	430a      	orrs	r2, r1
    e140:	605a      	str	r2, [r3, #4]
}
    e142:	46c0      	nop			; (mov r8, r8)
    e144:	46bd      	mov	sp, r7
    e146:	b002      	add	sp, #8
    e148:	bd80      	pop	{r7, pc}
	...

0000e14c <_ZN6SERCOM17prepareAckBitWIREEv>:

void SERCOM::prepareAckBitWIRE( void )
{
    e14c:	b580      	push	{r7, lr}
    e14e:	b082      	sub	sp, #8
    e150:	af00      	add	r7, sp, #0
    e152:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE()) {
    e154:	687b      	ldr	r3, [r7, #4]
    e156:	0018      	movs	r0, r3
    e158:	f000 f927 	bl	e3aa <_ZN6SERCOM12isMasterWIREEv>
    e15c:	1e03      	subs	r3, r0, #0
    e15e:	d006      	beq.n	e16e <_ZN6SERCOM17prepareAckBitWIREEv+0x22>
    // Send an ACK
    sercom->I2CM.CTRLB.bit.ACKACT = 0;
    e160:	687b      	ldr	r3, [r7, #4]
    e162:	681b      	ldr	r3, [r3, #0]
    e164:	685a      	ldr	r2, [r3, #4]
    e166:	4907      	ldr	r1, [pc, #28]	; (e184 <_ZN6SERCOM17prepareAckBitWIREEv+0x38>)
    e168:	400a      	ands	r2, r1
    e16a:	605a      	str	r2, [r3, #4]
  } else {
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
  }
}
    e16c:	e005      	b.n	e17a <_ZN6SERCOM17prepareAckBitWIREEv+0x2e>
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    e16e:	687b      	ldr	r3, [r7, #4]
    e170:	681b      	ldr	r3, [r3, #0]
    e172:	685a      	ldr	r2, [r3, #4]
    e174:	4903      	ldr	r1, [pc, #12]	; (e184 <_ZN6SERCOM17prepareAckBitWIREEv+0x38>)
    e176:	400a      	ands	r2, r1
    e178:	605a      	str	r2, [r3, #4]
}
    e17a:	46c0      	nop			; (mov r8, r8)
    e17c:	46bd      	mov	sp, r7
    e17e:	b002      	add	sp, #8
    e180:	bd80      	pop	{r7, pc}
    e182:	46c0      	nop			; (mov r8, r8)
    e184:	fffbffff 	.word	0xfffbffff

0000e188 <_ZN6SERCOM22prepareCommandBitsWireEh>:

void SERCOM::prepareCommandBitsWire(uint8_t cmd)
{
    e188:	b580      	push	{r7, lr}
    e18a:	b082      	sub	sp, #8
    e18c:	af00      	add	r7, sp, #0
    e18e:	6078      	str	r0, [r7, #4]
    e190:	000a      	movs	r2, r1
    e192:	1cfb      	adds	r3, r7, #3
    e194:	701a      	strb	r2, [r3, #0]
  if(isMasterWIRE()) {
    e196:	687b      	ldr	r3, [r7, #4]
    e198:	0018      	movs	r0, r3
    e19a:	f000 f906 	bl	e3aa <_ZN6SERCOM12isMasterWIREEv>
    e19e:	1e03      	subs	r3, r0, #0
    e1a0:	d017      	beq.n	e1d2 <_ZN6SERCOM22prepareCommandBitsWireEh+0x4a>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    e1a2:	687b      	ldr	r3, [r7, #4]
    e1a4:	681b      	ldr	r3, [r3, #0]
    e1a6:	1cfa      	adds	r2, r7, #3
    e1a8:	7812      	ldrb	r2, [r2, #0]
    e1aa:	2103      	movs	r1, #3
    e1ac:	400a      	ands	r2, r1
    e1ae:	b2d1      	uxtb	r1, r2
    e1b0:	685a      	ldr	r2, [r3, #4]
    e1b2:	2003      	movs	r0, #3
    e1b4:	4001      	ands	r1, r0
    e1b6:	0409      	lsls	r1, r1, #16
    e1b8:	480f      	ldr	r0, [pc, #60]	; (e1f8 <_ZN6SERCOM22prepareCommandBitsWireEh+0x70>)
    e1ba:	4002      	ands	r2, r0
    e1bc:	430a      	orrs	r2, r1
    e1be:	605a      	str	r2, [r3, #4]

    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
    e1c0:	687b      	ldr	r3, [r7, #4]
    e1c2:	681b      	ldr	r3, [r3, #0]
    e1c4:	69db      	ldr	r3, [r3, #28]
    e1c6:	075b      	lsls	r3, r3, #29
    e1c8:	0fdb      	lsrs	r3, r3, #31
    e1ca:	b2db      	uxtb	r3, r3
    e1cc:	2b00      	cmp	r3, #0
    e1ce:	d00f      	beq.n	e1f0 <_ZN6SERCOM22prepareCommandBitsWireEh+0x68>
    e1d0:	e7f6      	b.n	e1c0 <_ZN6SERCOM22prepareCommandBitsWireEh+0x38>
    {
      // Waiting for synchronization
    }
  } else {
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    e1d2:	687b      	ldr	r3, [r7, #4]
    e1d4:	681b      	ldr	r3, [r3, #0]
    e1d6:	1cfa      	adds	r2, r7, #3
    e1d8:	7812      	ldrb	r2, [r2, #0]
    e1da:	2103      	movs	r1, #3
    e1dc:	400a      	ands	r2, r1
    e1de:	b2d1      	uxtb	r1, r2
    e1e0:	685a      	ldr	r2, [r3, #4]
    e1e2:	2003      	movs	r0, #3
    e1e4:	4001      	ands	r1, r0
    e1e6:	0409      	lsls	r1, r1, #16
    e1e8:	4803      	ldr	r0, [pc, #12]	; (e1f8 <_ZN6SERCOM22prepareCommandBitsWireEh+0x70>)
    e1ea:	4002      	ands	r2, r0
    e1ec:	430a      	orrs	r2, r1
    e1ee:	605a      	str	r2, [r3, #4]
  }
}
    e1f0:	46c0      	nop			; (mov r8, r8)
    e1f2:	46bd      	mov	sp, r7
    e1f4:	b002      	add	sp, #8
    e1f6:	bd80      	pop	{r7, pc}
    e1f8:	fffcffff 	.word	0xfffcffff

0000e1fc <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>:

bool SERCOM::startTransmissionWIRE(uint8_t address, SercomWireReadWriteFlag flag)
{
    e1fc:	b580      	push	{r7, lr}
    e1fe:	b082      	sub	sp, #8
    e200:	af00      	add	r7, sp, #0
    e202:	6078      	str	r0, [r7, #4]
    e204:	0008      	movs	r0, r1
    e206:	0011      	movs	r1, r2
    e208:	1cfb      	adds	r3, r7, #3
    e20a:	1c02      	adds	r2, r0, #0
    e20c:	701a      	strb	r2, [r3, #0]
    e20e:	1cbb      	adds	r3, r7, #2
    e210:	1c0a      	adds	r2, r1, #0
    e212:	701a      	strb	r2, [r3, #0]
  // 7-bits address + 1-bits R/W
  address = (address << 0x1ul) | flag;
    e214:	1cfb      	adds	r3, r7, #3
    e216:	781b      	ldrb	r3, [r3, #0]
    e218:	005b      	lsls	r3, r3, #1
    e21a:	b25a      	sxtb	r2, r3
    e21c:	1cbb      	adds	r3, r7, #2
    e21e:	781b      	ldrb	r3, [r3, #0]
    e220:	b25b      	sxtb	r3, r3
    e222:	4313      	orrs	r3, r2
    e224:	b25a      	sxtb	r2, r3
    e226:	1cfb      	adds	r3, r7, #3
    e228:	701a      	strb	r2, [r3, #0]

  // Wait idle or owner bus mode
  while ( !isBusIdleWIRE() && !isBusOwnerWIRE() );
    e22a:	687b      	ldr	r3, [r7, #4]
    e22c:	0018      	movs	r0, r3
    e22e:	f000 f8e0 	bl	e3f2 <_ZN6SERCOM13isBusIdleWIREEv>
    e232:	0003      	movs	r3, r0
    e234:	001a      	movs	r2, r3
    e236:	2301      	movs	r3, #1
    e238:	4053      	eors	r3, r2
    e23a:	b2db      	uxtb	r3, r3
    e23c:	2b00      	cmp	r3, #0
    e23e:	d00c      	beq.n	e25a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5e>
    e240:	687b      	ldr	r3, [r7, #4]
    e242:	0018      	movs	r0, r3
    e244:	f000 f8e7 	bl	e416 <_ZN6SERCOM14isBusOwnerWIREEv>
    e248:	0003      	movs	r3, r0
    e24a:	001a      	movs	r2, r3
    e24c:	2301      	movs	r3, #1
    e24e:	4053      	eors	r3, r2
    e250:	b2db      	uxtb	r3, r3
    e252:	2b00      	cmp	r3, #0
    e254:	d001      	beq.n	e25a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5e>
    e256:	2301      	movs	r3, #1
    e258:	e000      	b.n	e25c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x60>
    e25a:	2300      	movs	r3, #0
    e25c:	2b00      	cmp	r3, #0
    e25e:	d000      	beq.n	e262 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x66>
    e260:	e7e3      	b.n	e22a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>

  // Send start and address
  sercom->I2CM.ADDR.bit.ADDR = address;
    e262:	687b      	ldr	r3, [r7, #4]
    e264:	681b      	ldr	r3, [r3, #0]
    e266:	1cfa      	adds	r2, r7, #3
    e268:	7812      	ldrb	r2, [r2, #0]
    e26a:	b292      	uxth	r2, r2
    e26c:	0552      	lsls	r2, r2, #21
    e26e:	0d52      	lsrs	r2, r2, #21
    e270:	b291      	uxth	r1, r2
    e272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e274:	0549      	lsls	r1, r1, #21
    e276:	0d49      	lsrs	r1, r1, #21
    e278:	0ad2      	lsrs	r2, r2, #11
    e27a:	02d2      	lsls	r2, r2, #11
    e27c:	430a      	orrs	r2, r1
    e27e:	625a      	str	r2, [r3, #36]	; 0x24

  // Address Transmitted
  if ( flag == WIRE_WRITE_FLAG ) // Write mode
    e280:	1cbb      	adds	r3, r7, #2
    e282:	781b      	ldrb	r3, [r3, #0]
    e284:	2b00      	cmp	r3, #0
    e286:	d10b      	bne.n	e2a0 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xa4>
  {
    while( !sercom->I2CM.INTFLAG.bit.MB )
    e288:	687b      	ldr	r3, [r7, #4]
    e28a:	681b      	ldr	r3, [r3, #0]
    e28c:	7e1b      	ldrb	r3, [r3, #24]
    e28e:	07db      	lsls	r3, r3, #31
    e290:	0fdb      	lsrs	r3, r3, #31
    e292:	b2db      	uxtb	r3, r3
    e294:	2201      	movs	r2, #1
    e296:	4053      	eors	r3, r2
    e298:	b2db      	uxtb	r3, r3
    e29a:	2b00      	cmp	r3, #0
    e29c:	d01c      	beq.n	e2d8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xdc>
    e29e:	e7f3      	b.n	e288 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x8c>
      // Wait transmission complete
    }
  }
  else  // Read mode
  {
    while( !sercom->I2CM.INTFLAG.bit.SB )
    e2a0:	687b      	ldr	r3, [r7, #4]
    e2a2:	681b      	ldr	r3, [r3, #0]
    e2a4:	7e1b      	ldrb	r3, [r3, #24]
    e2a6:	079b      	lsls	r3, r3, #30
    e2a8:	0fdb      	lsrs	r3, r3, #31
    e2aa:	b2db      	uxtb	r3, r3
    e2ac:	2201      	movs	r2, #1
    e2ae:	4053      	eors	r3, r2
    e2b0:	b2db      	uxtb	r3, r3
    e2b2:	2b00      	cmp	r3, #0
    e2b4:	d010      	beq.n	e2d8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xdc>
    {
        // If the slave NACKS the address, the MB bit will be set.
        // In that case, send a stop condition and return false.
        if (sercom->I2CM.INTFLAG.bit.MB) {
    e2b6:	687b      	ldr	r3, [r7, #4]
    e2b8:	681b      	ldr	r3, [r3, #0]
    e2ba:	7e1b      	ldrb	r3, [r3, #24]
    e2bc:	07db      	lsls	r3, r3, #31
    e2be:	0fdb      	lsrs	r3, r3, #31
    e2c0:	b2db      	uxtb	r3, r3
    e2c2:	2b00      	cmp	r3, #0
    e2c4:	d0ec      	beq.n	e2a0 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xa4>
            sercom->I2CM.CTRLB.bit.CMD = 3; // Stop condition
    e2c6:	687b      	ldr	r3, [r7, #4]
    e2c8:	681b      	ldr	r3, [r3, #0]
    e2ca:	685a      	ldr	r2, [r3, #4]
    e2cc:	21c0      	movs	r1, #192	; 0xc0
    e2ce:	0289      	lsls	r1, r1, #10
    e2d0:	430a      	orrs	r2, r1
    e2d2:	605a      	str	r2, [r3, #4]
            return false;
    e2d4:	2300      	movs	r3, #0
    e2d6:	e00a      	b.n	e2ee <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf2>
    //sercom->I2CM.INTFLAG.bit.SB = 0x1ul;
  }


  //ACK received (0: ACK, 1: NACK)
  if(sercom->I2CM.STATUS.bit.RXNACK)
    e2d8:	687b      	ldr	r3, [r7, #4]
    e2da:	681b      	ldr	r3, [r3, #0]
    e2dc:	8b5b      	ldrh	r3, [r3, #26]
    e2de:	075b      	lsls	r3, r3, #29
    e2e0:	0fdb      	lsrs	r3, r3, #31
    e2e2:	b2db      	uxtb	r3, r3
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d001      	beq.n	e2ec <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf0>
  {
    return false;
    e2e8:	2300      	movs	r3, #0
    e2ea:	e000      	b.n	e2ee <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf2>
  }
  else
  {
    return true;
    e2ec:	2301      	movs	r3, #1
  }
}
    e2ee:	0018      	movs	r0, r3
    e2f0:	46bd      	mov	sp, r7
    e2f2:	b002      	add	sp, #8
    e2f4:	bd80      	pop	{r7, pc}

0000e2f6 <_ZN6SERCOM18sendDataMasterWIREEh>:

bool SERCOM::sendDataMasterWIRE(uint8_t data)
{
    e2f6:	b580      	push	{r7, lr}
    e2f8:	b082      	sub	sp, #8
    e2fa:	af00      	add	r7, sp, #0
    e2fc:	6078      	str	r0, [r7, #4]
    e2fe:	000a      	movs	r2, r1
    e300:	1cfb      	adds	r3, r7, #3
    e302:	701a      	strb	r2, [r3, #0]
  //Send data
  sercom->I2CM.DATA.bit.DATA = data;
    e304:	687b      	ldr	r3, [r7, #4]
    e306:	681b      	ldr	r3, [r3, #0]
    e308:	1cfa      	adds	r2, r7, #3
    e30a:	2128      	movs	r1, #40	; 0x28
    e30c:	7812      	ldrb	r2, [r2, #0]
    e30e:	545a      	strb	r2, [r3, r1]

  //Wait transmission successful
  while(!sercom->I2CM.INTFLAG.bit.MB) {
    e310:	687b      	ldr	r3, [r7, #4]
    e312:	681b      	ldr	r3, [r3, #0]
    e314:	7e1b      	ldrb	r3, [r3, #24]
    e316:	07db      	lsls	r3, r3, #31
    e318:	0fdb      	lsrs	r3, r3, #31
    e31a:	b2db      	uxtb	r3, r3
    e31c:	2201      	movs	r2, #1
    e31e:	4053      	eors	r3, r2
    e320:	b2db      	uxtb	r3, r3
    e322:	2b00      	cmp	r3, #0
    e324:	d009      	beq.n	e33a <_ZN6SERCOM18sendDataMasterWIREEh+0x44>

    // If a bus error occurs, the MB bit may never be set.
    // Check the bus error bit and bail if it's set.
    if (sercom->I2CM.STATUS.bit.BUSERR) {
    e326:	687b      	ldr	r3, [r7, #4]
    e328:	681b      	ldr	r3, [r3, #0]
    e32a:	8b5b      	ldrh	r3, [r3, #26]
    e32c:	07db      	lsls	r3, r3, #31
    e32e:	0fdb      	lsrs	r3, r3, #31
    e330:	b2db      	uxtb	r3, r3
    e332:	2b00      	cmp	r3, #0
    e334:	d0ec      	beq.n	e310 <_ZN6SERCOM18sendDataMasterWIREEh+0x1a>
      return false;
    e336:	2300      	movs	r3, #0
    e338:	e00a      	b.n	e350 <_ZN6SERCOM18sendDataMasterWIREEh+0x5a>
    }
  }

  //Problems on line? nack received?
  if(sercom->I2CM.STATUS.bit.RXNACK)
    e33a:	687b      	ldr	r3, [r7, #4]
    e33c:	681b      	ldr	r3, [r3, #0]
    e33e:	8b5b      	ldrh	r3, [r3, #26]
    e340:	075b      	lsls	r3, r3, #29
    e342:	0fdb      	lsrs	r3, r3, #31
    e344:	b2db      	uxtb	r3, r3
    e346:	2b00      	cmp	r3, #0
    e348:	d001      	beq.n	e34e <_ZN6SERCOM18sendDataMasterWIREEh+0x58>
    return false;
    e34a:	2300      	movs	r3, #0
    e34c:	e000      	b.n	e350 <_ZN6SERCOM18sendDataMasterWIREEh+0x5a>
  else
    return true;
    e34e:	2301      	movs	r3, #1
}
    e350:	0018      	movs	r0, r3
    e352:	46bd      	mov	sp, r7
    e354:	b002      	add	sp, #8
    e356:	bd80      	pop	{r7, pc}

0000e358 <_ZN6SERCOM17sendDataSlaveWIREEh>:

bool SERCOM::sendDataSlaveWIRE(uint8_t data)
{
    e358:	b580      	push	{r7, lr}
    e35a:	b082      	sub	sp, #8
    e35c:	af00      	add	r7, sp, #0
    e35e:	6078      	str	r0, [r7, #4]
    e360:	000a      	movs	r2, r1
    e362:	1cfb      	adds	r3, r7, #3
    e364:	701a      	strb	r2, [r3, #0]
  //Send data
  sercom->I2CS.DATA.bit.DATA = data;
    e366:	687b      	ldr	r3, [r7, #4]
    e368:	681b      	ldr	r3, [r3, #0]
    e36a:	1cfa      	adds	r2, r7, #3
    e36c:	2128      	movs	r1, #40	; 0x28
    e36e:	7812      	ldrb	r2, [r2, #0]
    e370:	545a      	strb	r2, [r3, r1]

  //Problems on line? nack received?
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
    e372:	687b      	ldr	r3, [r7, #4]
    e374:	681b      	ldr	r3, [r3, #0]
    e376:	7e1b      	ldrb	r3, [r3, #24]
    e378:	075b      	lsls	r3, r3, #29
    e37a:	0fdb      	lsrs	r3, r3, #31
    e37c:	b2db      	uxtb	r3, r3
    e37e:	2b00      	cmp	r3, #0
    e380:	d007      	beq.n	e392 <_ZN6SERCOM17sendDataSlaveWIREEh+0x3a>
    e382:	687b      	ldr	r3, [r7, #4]
    e384:	681b      	ldr	r3, [r3, #0]
    e386:	8b5b      	ldrh	r3, [r3, #26]
    e388:	075b      	lsls	r3, r3, #29
    e38a:	0fdb      	lsrs	r3, r3, #31
    e38c:	b2db      	uxtb	r3, r3
    e38e:	2b00      	cmp	r3, #0
    e390:	d001      	beq.n	e396 <_ZN6SERCOM17sendDataSlaveWIREEh+0x3e>
    e392:	2301      	movs	r3, #1
    e394:	e000      	b.n	e398 <_ZN6SERCOM17sendDataSlaveWIREEh+0x40>
    e396:	2300      	movs	r3, #0
    e398:	2b00      	cmp	r3, #0
    e39a:	d001      	beq.n	e3a0 <_ZN6SERCOM17sendDataSlaveWIREEh+0x48>
    return false;
    e39c:	2300      	movs	r3, #0
    e39e:	e000      	b.n	e3a2 <_ZN6SERCOM17sendDataSlaveWIREEh+0x4a>
  else
    return true;
    e3a0:	2301      	movs	r3, #1
}
    e3a2:	0018      	movs	r0, r3
    e3a4:	46bd      	mov	sp, r7
    e3a6:	b002      	add	sp, #8
    e3a8:	bd80      	pop	{r7, pc}

0000e3aa <_ZN6SERCOM12isMasterWIREEv>:

bool SERCOM::isMasterWIRE( void )
{
    e3aa:	b580      	push	{r7, lr}
    e3ac:	b082      	sub	sp, #8
    e3ae:	af00      	add	r7, sp, #0
    e3b0:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    e3b2:	687b      	ldr	r3, [r7, #4]
    e3b4:	681b      	ldr	r3, [r3, #0]
    e3b6:	681b      	ldr	r3, [r3, #0]
    e3b8:	06db      	lsls	r3, r3, #27
    e3ba:	0f5b      	lsrs	r3, r3, #29
    e3bc:	b2db      	uxtb	r3, r3
    e3be:	3b05      	subs	r3, #5
    e3c0:	425a      	negs	r2, r3
    e3c2:	4153      	adcs	r3, r2
    e3c4:	b2db      	uxtb	r3, r3
}
    e3c6:	0018      	movs	r0, r3
    e3c8:	46bd      	mov	sp, r7
    e3ca:	b002      	add	sp, #8
    e3cc:	bd80      	pop	{r7, pc}

0000e3ce <_ZN6SERCOM11isSlaveWIREEv>:

bool SERCOM::isSlaveWIRE( void )
{
    e3ce:	b580      	push	{r7, lr}
    e3d0:	b082      	sub	sp, #8
    e3d2:	af00      	add	r7, sp, #0
    e3d4:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
    e3d6:	687b      	ldr	r3, [r7, #4]
    e3d8:	681b      	ldr	r3, [r3, #0]
    e3da:	681b      	ldr	r3, [r3, #0]
    e3dc:	06db      	lsls	r3, r3, #27
    e3de:	0f5b      	lsrs	r3, r3, #29
    e3e0:	b2db      	uxtb	r3, r3
    e3e2:	3b04      	subs	r3, #4
    e3e4:	425a      	negs	r2, r3
    e3e6:	4153      	adcs	r3, r2
    e3e8:	b2db      	uxtb	r3, r3
}
    e3ea:	0018      	movs	r0, r3
    e3ec:	46bd      	mov	sp, r7
    e3ee:	b002      	add	sp, #8
    e3f0:	bd80      	pop	{r7, pc}

0000e3f2 <_ZN6SERCOM13isBusIdleWIREEv>:

bool SERCOM::isBusIdleWIRE( void )
{
    e3f2:	b580      	push	{r7, lr}
    e3f4:	b082      	sub	sp, #8
    e3f6:	af00      	add	r7, sp, #0
    e3f8:	6078      	str	r0, [r7, #4]
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    e3fa:	687b      	ldr	r3, [r7, #4]
    e3fc:	681b      	ldr	r3, [r3, #0]
    e3fe:	8b5b      	ldrh	r3, [r3, #26]
    e400:	069b      	lsls	r3, r3, #26
    e402:	0f9b      	lsrs	r3, r3, #30
    e404:	b2db      	uxtb	r3, r3
    e406:	3b01      	subs	r3, #1
    e408:	425a      	negs	r2, r3
    e40a:	4153      	adcs	r3, r2
    e40c:	b2db      	uxtb	r3, r3
}
    e40e:	0018      	movs	r0, r3
    e410:	46bd      	mov	sp, r7
    e412:	b002      	add	sp, #8
    e414:	bd80      	pop	{r7, pc}

0000e416 <_ZN6SERCOM14isBusOwnerWIREEv>:

bool SERCOM::isBusOwnerWIRE( void )
{
    e416:	b580      	push	{r7, lr}
    e418:	b082      	sub	sp, #8
    e41a:	af00      	add	r7, sp, #0
    e41c:	6078      	str	r0, [r7, #4]
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    e41e:	687b      	ldr	r3, [r7, #4]
    e420:	681b      	ldr	r3, [r3, #0]
    e422:	8b5b      	ldrh	r3, [r3, #26]
    e424:	069b      	lsls	r3, r3, #26
    e426:	0f9b      	lsrs	r3, r3, #30
    e428:	b2db      	uxtb	r3, r3
    e42a:	3b02      	subs	r3, #2
    e42c:	425a      	negs	r2, r3
    e42e:	4153      	adcs	r3, r2
    e430:	b2db      	uxtb	r3, r3
}
    e432:	0018      	movs	r0, r3
    e434:	46bd      	mov	sp, r7
    e436:	b002      	add	sp, #8
    e438:	bd80      	pop	{r7, pc}

0000e43a <_ZN6SERCOM15isDataReadyWIREEv>:

bool SERCOM::isDataReadyWIRE( void )
{
    e43a:	b580      	push	{r7, lr}
    e43c:	b082      	sub	sp, #8
    e43e:	af00      	add	r7, sp, #0
    e440:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.DRDY;
    e442:	687b      	ldr	r3, [r7, #4]
    e444:	681b      	ldr	r3, [r3, #0]
    e446:	7e1b      	ldrb	r3, [r3, #24]
    e448:	075b      	lsls	r3, r3, #29
    e44a:	0fdb      	lsrs	r3, r3, #31
    e44c:	b2db      	uxtb	r3, r3
}
    e44e:	0018      	movs	r0, r3
    e450:	46bd      	mov	sp, r7
    e452:	b002      	add	sp, #8
    e454:	bd80      	pop	{r7, pc}

0000e456 <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
    e456:	b580      	push	{r7, lr}
    e458:	b082      	sub	sp, #8
    e45a:	af00      	add	r7, sp, #0
    e45c:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.PREC;
    e45e:	687b      	ldr	r3, [r7, #4]
    e460:	681b      	ldr	r3, [r3, #0]
    e462:	7e1b      	ldrb	r3, [r3, #24]
    e464:	07db      	lsls	r3, r3, #31
    e466:	0fdb      	lsrs	r3, r3, #31
    e468:	b2db      	uxtb	r3, r3
}
    e46a:	0018      	movs	r0, r3
    e46c:	46bd      	mov	sp, r7
    e46e:	b002      	add	sp, #8
    e470:	bd80      	pop	{r7, pc}

0000e472 <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
    e472:	b580      	push	{r7, lr}
    e474:	b082      	sub	sp, #8
    e476:	af00      	add	r7, sp, #0
    e478:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.STATUS.bit.SR;
    e47a:	687b      	ldr	r3, [r7, #4]
    e47c:	681b      	ldr	r3, [r3, #0]
    e47e:	8b5b      	ldrh	r3, [r3, #26]
    e480:	06db      	lsls	r3, r3, #27
    e482:	0fdb      	lsrs	r3, r3, #31
    e484:	b2db      	uxtb	r3, r3
}
    e486:	0018      	movs	r0, r3
    e488:	46bd      	mov	sp, r7
    e48a:	b002      	add	sp, #8
    e48c:	bd80      	pop	{r7, pc}

0000e48e <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
    e48e:	b580      	push	{r7, lr}
    e490:	b082      	sub	sp, #8
    e492:	af00      	add	r7, sp, #0
    e494:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.AMATCH;
    e496:	687b      	ldr	r3, [r7, #4]
    e498:	681b      	ldr	r3, [r3, #0]
    e49a:	7e1b      	ldrb	r3, [r3, #24]
    e49c:	079b      	lsls	r3, r3, #30
    e49e:	0fdb      	lsrs	r3, r3, #31
    e4a0:	b2db      	uxtb	r3, r3
}
    e4a2:	0018      	movs	r0, r3
    e4a4:	46bd      	mov	sp, r7
    e4a6:	b002      	add	sp, #8
    e4a8:	bd80      	pop	{r7, pc}

0000e4aa <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
    e4aa:	b580      	push	{r7, lr}
    e4ac:	b082      	sub	sp, #8
    e4ae:	af00      	add	r7, sp, #0
    e4b0:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.STATUS.bit.DIR;
    e4b2:	687b      	ldr	r3, [r7, #4]
    e4b4:	681b      	ldr	r3, [r3, #0]
    e4b6:	8b5b      	ldrh	r3, [r3, #26]
    e4b8:	071b      	lsls	r3, r3, #28
    e4ba:	0fdb      	lsrs	r3, r3, #31
    e4bc:	b2db      	uxtb	r3, r3
}
    e4be:	0018      	movs	r0, r3
    e4c0:	46bd      	mov	sp, r7
    e4c2:	b002      	add	sp, #8
    e4c4:	bd80      	pop	{r7, pc}

0000e4c6 <_ZN6SERCOM12readDataWIREEv>:
  else
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
    e4c6:	b580      	push	{r7, lr}
    e4c8:	b082      	sub	sp, #8
    e4ca:	af00      	add	r7, sp, #0
    e4cc:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE())
    e4ce:	687b      	ldr	r3, [r7, #4]
    e4d0:	0018      	movs	r0, r3
    e4d2:	f7ff ff6a 	bl	e3aa <_ZN6SERCOM12isMasterWIREEv>
    e4d6:	1e03      	subs	r3, r0, #0
    e4d8:	d011      	beq.n	e4fe <_ZN6SERCOM12readDataWIREEv+0x38>
  {
    while( sercom->I2CM.INTFLAG.bit.SB == 0 )
    e4da:	687b      	ldr	r3, [r7, #4]
    e4dc:	681b      	ldr	r3, [r3, #0]
    e4de:	7e1b      	ldrb	r3, [r3, #24]
    e4e0:	079b      	lsls	r3, r3, #30
    e4e2:	0fdb      	lsrs	r3, r3, #31
    e4e4:	b2db      	uxtb	r3, r3
    e4e6:	2201      	movs	r2, #1
    e4e8:	4053      	eors	r3, r2
    e4ea:	b2db      	uxtb	r3, r3
    e4ec:	2b00      	cmp	r3, #0
    e4ee:	d000      	beq.n	e4f2 <_ZN6SERCOM12readDataWIREEv+0x2c>
    e4f0:	e7f3      	b.n	e4da <_ZN6SERCOM12readDataWIREEv+0x14>
    {
      // Waiting complete receive
    }

    return sercom->I2CM.DATA.bit.DATA ;
    e4f2:	687b      	ldr	r3, [r7, #4]
    e4f4:	681b      	ldr	r3, [r3, #0]
    e4f6:	2228      	movs	r2, #40	; 0x28
    e4f8:	5c9b      	ldrb	r3, [r3, r2]
    e4fa:	b2db      	uxtb	r3, r3
    e4fc:	e004      	b.n	e508 <_ZN6SERCOM12readDataWIREEv+0x42>
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
    e4fe:	687b      	ldr	r3, [r7, #4]
    e500:	681b      	ldr	r3, [r3, #0]
    e502:	2228      	movs	r2, #40	; 0x28
    e504:	5c9b      	ldrb	r3, [r3, r2]
    e506:	b2db      	uxtb	r3, r3
  }
}
    e508:	0018      	movs	r0, r3
    e50a:	46bd      	mov	sp, r7
    e50c:	b002      	add	sp, #8
    e50e:	bd80      	pop	{r7, pc}

0000e510 <_ZN6SERCOM13initClockNVICEv>:


void SERCOM::initClockNVIC( void )
{
    e510:	b580      	push	{r7, lr}
    e512:	b084      	sub	sp, #16
    e514:	af00      	add	r7, sp, #0
    e516:	6078      	str	r0, [r7, #4]
  uint8_t clockId = 0;
    e518:	230f      	movs	r3, #15
    e51a:	18fb      	adds	r3, r7, r3
    e51c:	2200      	movs	r2, #0
    e51e:	701a      	strb	r2, [r3, #0]
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
    e520:	230e      	movs	r3, #14
    e522:	18fb      	adds	r3, r7, r3
    e524:	22fe      	movs	r2, #254	; 0xfe
    e526:	701a      	strb	r2, [r3, #0]

  if(sercom == SERCOM0)
    e528:	687b      	ldr	r3, [r7, #4]
    e52a:	681b      	ldr	r3, [r3, #0]
    e52c:	4a40      	ldr	r2, [pc, #256]	; (e630 <_ZN6SERCOM13initClockNVICEv+0x120>)
    e52e:	4293      	cmp	r3, r2
    e530:	d108      	bne.n	e544 <_ZN6SERCOM13initClockNVICEv+0x34>
  {
    clockId = GCM_SERCOM0_CORE;
    e532:	230f      	movs	r3, #15
    e534:	18fb      	adds	r3, r7, r3
    e536:	2214      	movs	r2, #20
    e538:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM0_IRQn;
    e53a:	230e      	movs	r3, #14
    e53c:	18fb      	adds	r3, r7, r3
    e53e:	2209      	movs	r2, #9
    e540:	701a      	strb	r2, [r3, #0]
    e542:	e044      	b.n	e5ce <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM1)
    e544:	687b      	ldr	r3, [r7, #4]
    e546:	681b      	ldr	r3, [r3, #0]
    e548:	4a3a      	ldr	r2, [pc, #232]	; (e634 <_ZN6SERCOM13initClockNVICEv+0x124>)
    e54a:	4293      	cmp	r3, r2
    e54c:	d108      	bne.n	e560 <_ZN6SERCOM13initClockNVICEv+0x50>
  {
    clockId = GCM_SERCOM1_CORE;
    e54e:	230f      	movs	r3, #15
    e550:	18fb      	adds	r3, r7, r3
    e552:	2215      	movs	r2, #21
    e554:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM1_IRQn;
    e556:	230e      	movs	r3, #14
    e558:	18fb      	adds	r3, r7, r3
    e55a:	220a      	movs	r2, #10
    e55c:	701a      	strb	r2, [r3, #0]
    e55e:	e036      	b.n	e5ce <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM2)
    e560:	687b      	ldr	r3, [r7, #4]
    e562:	681b      	ldr	r3, [r3, #0]
    e564:	4a34      	ldr	r2, [pc, #208]	; (e638 <_ZN6SERCOM13initClockNVICEv+0x128>)
    e566:	4293      	cmp	r3, r2
    e568:	d108      	bne.n	e57c <_ZN6SERCOM13initClockNVICEv+0x6c>
  {
    clockId = GCM_SERCOM2_CORE;
    e56a:	230f      	movs	r3, #15
    e56c:	18fb      	adds	r3, r7, r3
    e56e:	2216      	movs	r2, #22
    e570:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM2_IRQn;
    e572:	230e      	movs	r3, #14
    e574:	18fb      	adds	r3, r7, r3
    e576:	220b      	movs	r2, #11
    e578:	701a      	strb	r2, [r3, #0]
    e57a:	e028      	b.n	e5ce <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM3)
    e57c:	687b      	ldr	r3, [r7, #4]
    e57e:	681b      	ldr	r3, [r3, #0]
    e580:	4a2e      	ldr	r2, [pc, #184]	; (e63c <_ZN6SERCOM13initClockNVICEv+0x12c>)
    e582:	4293      	cmp	r3, r2
    e584:	d108      	bne.n	e598 <_ZN6SERCOM13initClockNVICEv+0x88>
  {
    clockId = GCM_SERCOM3_CORE;
    e586:	230f      	movs	r3, #15
    e588:	18fb      	adds	r3, r7, r3
    e58a:	2217      	movs	r2, #23
    e58c:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM3_IRQn;
    e58e:	230e      	movs	r3, #14
    e590:	18fb      	adds	r3, r7, r3
    e592:	220c      	movs	r2, #12
    e594:	701a      	strb	r2, [r3, #0]
    e596:	e01a      	b.n	e5ce <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    e598:	687b      	ldr	r3, [r7, #4]
    e59a:	681b      	ldr	r3, [r3, #0]
    e59c:	4a28      	ldr	r2, [pc, #160]	; (e640 <_ZN6SERCOM13initClockNVICEv+0x130>)
    e59e:	4293      	cmp	r3, r2
    e5a0:	d108      	bne.n	e5b4 <_ZN6SERCOM13initClockNVICEv+0xa4>
  {
    clockId = GCM_SERCOM4_CORE;
    e5a2:	230f      	movs	r3, #15
    e5a4:	18fb      	adds	r3, r7, r3
    e5a6:	2218      	movs	r2, #24
    e5a8:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM4_IRQn;
    e5aa:	230e      	movs	r3, #14
    e5ac:	18fb      	adds	r3, r7, r3
    e5ae:	220d      	movs	r2, #13
    e5b0:	701a      	strb	r2, [r3, #0]
    e5b2:	e00c      	b.n	e5ce <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    e5b4:	687b      	ldr	r3, [r7, #4]
    e5b6:	681b      	ldr	r3, [r3, #0]
    e5b8:	4a22      	ldr	r2, [pc, #136]	; (e644 <_ZN6SERCOM13initClockNVICEv+0x134>)
    e5ba:	4293      	cmp	r3, r2
    e5bc:	d107      	bne.n	e5ce <_ZN6SERCOM13initClockNVICEv+0xbe>
  {
    clockId = GCM_SERCOM5_CORE;
    e5be:	230f      	movs	r3, #15
    e5c0:	18fb      	adds	r3, r7, r3
    e5c2:	2219      	movs	r2, #25
    e5c4:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM5_IRQn;
    e5c6:	230e      	movs	r3, #14
    e5c8:	18fb      	adds	r3, r7, r3
    e5ca:	220e      	movs	r2, #14
    e5cc:	701a      	strb	r2, [r3, #0]
  }
  #endif // SERCOM5

  if ( IdNvic == PendSV_IRQn )
    e5ce:	230e      	movs	r3, #14
    e5d0:	18fb      	adds	r3, r7, r3
    e5d2:	781b      	ldrb	r3, [r3, #0]
    e5d4:	b25b      	sxtb	r3, r3
    e5d6:	3302      	adds	r3, #2
    e5d8:	d025      	beq.n	e626 <_ZN6SERCOM13initClockNVICEv+0x116>
    // We got a problem here
    return ;
  }

  // Setting NVIC
  NVIC_EnableIRQ(IdNvic);
    e5da:	230e      	movs	r3, #14
    e5dc:	18fb      	adds	r3, r7, r3
    e5de:	781b      	ldrb	r3, [r3, #0]
    e5e0:	b25b      	sxtb	r3, r3
    e5e2:	0018      	movs	r0, r3
    e5e4:	f7ff f998 	bl	d918 <__NVIC_EnableIRQ>
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */
    e5e8:	230e      	movs	r3, #14
    e5ea:	18fb      	adds	r3, r7, r3
    e5ec:	781b      	ldrb	r3, [r3, #0]
    e5ee:	b25b      	sxtb	r3, r3
    e5f0:	2103      	movs	r1, #3
    e5f2:	0018      	movs	r0, r3
    e5f4:	f7ff f9aa 	bl	d94c <__NVIC_SetPriority>

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    e5f8:	4913      	ldr	r1, [pc, #76]	; (e648 <_ZN6SERCOM13initClockNVICEv+0x138>)
    e5fa:	230f      	movs	r3, #15
    e5fc:	18fb      	adds	r3, r7, r3
    e5fe:	781b      	ldrb	r3, [r3, #0]
    e600:	b29b      	uxth	r3, r3
    e602:	223f      	movs	r2, #63	; 0x3f
    e604:	4013      	ands	r3, r2
    e606:	b29b      	uxth	r3, r3
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    e608:	2280      	movs	r2, #128	; 0x80
    e60a:	01d2      	lsls	r2, r2, #7
    e60c:	4313      	orrs	r3, r2
    e60e:	b29b      	uxth	r3, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    e610:	804b      	strh	r3, [r1, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    e612:	4b0d      	ldr	r3, [pc, #52]	; (e648 <_ZN6SERCOM13initClockNVICEv+0x138>)
    e614:	785b      	ldrb	r3, [r3, #1]
    e616:	b2db      	uxtb	r3, r3
    e618:	b25b      	sxtb	r3, r3
    e61a:	b2db      	uxtb	r3, r3
    e61c:	09db      	lsrs	r3, r3, #7
    e61e:	b2db      	uxtb	r3, r3
    e620:	2b00      	cmp	r3, #0
    e622:	d001      	beq.n	e628 <_ZN6SERCOM13initClockNVICEv+0x118>
    e624:	e7f5      	b.n	e612 <_ZN6SERCOM13initClockNVICEv+0x102>
    return ;
    e626:	46c0      	nop			; (mov r8, r8)
  {
    /* Wait for synchronization */
  }
}
    e628:	46bd      	mov	sp, r7
    e62a:	b004      	add	sp, #16
    e62c:	bd80      	pop	{r7, pc}
    e62e:	46c0      	nop			; (mov r8, r8)
    e630:	42000800 	.word	0x42000800
    e634:	42000c00 	.word	0x42000c00
    e638:	42001000 	.word	0x42001000
    e63c:	42001400 	.word	0x42001400
    e640:	42001800 	.word	0x42001800
    e644:	42001c00 	.word	0x42001c00
    e648:	40000c00 	.word	0x40000c00

0000e64c <_ZN7Serial_C1ER14USBDeviceClass>:
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    e64c:	b580      	push	{r7, lr}
    e64e:	b082      	sub	sp, #8
    e650:	af00      	add	r7, sp, #0
    e652:	6078      	str	r0, [r7, #4]
    e654:	6039      	str	r1, [r7, #0]
    e656:	687b      	ldr	r3, [r7, #4]
    e658:	0018      	movs	r0, r3
    e65a:	f7f5 f8d3 	bl	3804 <_ZN6StreamC1Ev>
    e65e:	4a07      	ldr	r2, [pc, #28]	; (e67c <_ZN7Serial_C1ER14USBDeviceClass+0x30>)
    e660:	687b      	ldr	r3, [r7, #4]
    e662:	601a      	str	r2, [r3, #0]
    e664:	687b      	ldr	r3, [r7, #4]
    e666:	683a      	ldr	r2, [r7, #0]
    e668:	611a      	str	r2, [r3, #16]
    e66a:	687b      	ldr	r3, [r7, #4]
    e66c:	2200      	movs	r2, #0
    e66e:	761a      	strb	r2, [r3, #24]
    e670:	687b      	ldr	r3, [r7, #4]
    e672:	0018      	movs	r0, r3
    e674:	46bd      	mov	sp, r7
    e676:	b002      	add	sp, #8
    e678:	bd80      	pop	{r7, pc}
    e67a:	46c0      	nop			; (mov r8, r8)
    e67c:	000142ac 	.word	0x000142ac

0000e680 <_Z16CDC_GetInterfacePh>:
{
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
    e680:	b580      	push	{r7, lr}
    e682:	b082      	sub	sp, #8
    e684:	af00      	add	r7, sp, #0
    e686:	6078      	str	r0, [r7, #4]
	interfaceNum[0] += 2;	// uses 2
    e688:	687b      	ldr	r3, [r7, #4]
    e68a:	781b      	ldrb	r3, [r3, #0]
    e68c:	3302      	adds	r3, #2
    e68e:	b2da      	uxtb	r2, r3
    e690:	687b      	ldr	r3, [r7, #4]
    e692:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    e694:	4905      	ldr	r1, [pc, #20]	; (e6ac <_Z16CDC_GetInterfacePh+0x2c>)
    e696:	4b06      	ldr	r3, [pc, #24]	; (e6b0 <_Z16CDC_GetInterfacePh+0x30>)
    e698:	2242      	movs	r2, #66	; 0x42
    e69a:	0018      	movs	r0, r3
    e69c:	f7f7 fdae 	bl	61fc <_ZN14USBDeviceClass11sendControlEPKvm>
    e6a0:	0003      	movs	r3, r0
}
    e6a2:	0018      	movs	r0, r3
    e6a4:	46bd      	mov	sp, r7
    e6a6:	b002      	add	sp, #8
    e6a8:	bd80      	pop	{r7, pc}
    e6aa:	46c0      	nop			; (mov r8, r8)
    e6ac:	2000005c 	.word	0x2000005c
    e6b0:	200008f0 	.word	0x200008f0

0000e6b4 <_Z9CDC_SetupR8USBSetup>:

bool CDC_Setup(USBSetup& setup)
{
    e6b4:	b580      	push	{r7, lr}
    e6b6:	b084      	sub	sp, #16
    e6b8:	af00      	add	r7, sp, #0
    e6ba:	6078      	str	r0, [r7, #4]
	uint8_t requestType = setup.bmRequestType;
    e6bc:	230f      	movs	r3, #15
    e6be:	18fb      	adds	r3, r7, r3
    e6c0:	687a      	ldr	r2, [r7, #4]
    e6c2:	7812      	ldrb	r2, [r2, #0]
    e6c4:	701a      	strb	r2, [r3, #0]
	uint8_t r = setup.bRequest;
    e6c6:	230e      	movs	r3, #14
    e6c8:	18fb      	adds	r3, r7, r3
    e6ca:	687a      	ldr	r2, [r7, #4]
    e6cc:	7852      	ldrb	r2, [r2, #1]
    e6ce:	701a      	strb	r2, [r3, #0]

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    e6d0:	230f      	movs	r3, #15
    e6d2:	18fb      	adds	r3, r7, r3
    e6d4:	781b      	ldrb	r3, [r3, #0]
    e6d6:	2ba1      	cmp	r3, #161	; 0xa1
    e6d8:	d10c      	bne.n	e6f4 <_Z9CDC_SetupR8USBSetup+0x40>
	{
		if (r == CDC_GET_LINE_CODING)
    e6da:	230e      	movs	r3, #14
    e6dc:	18fb      	adds	r3, r7, r3
    e6de:	781b      	ldrb	r3, [r3, #0]
    e6e0:	2b21      	cmp	r3, #33	; 0x21
    e6e2:	d107      	bne.n	e6f4 <_Z9CDC_SetupR8USBSetup+0x40>
		{
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    e6e4:	492c      	ldr	r1, [pc, #176]	; (e798 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e6e6:	4b2d      	ldr	r3, [pc, #180]	; (e79c <_Z9CDC_SetupR8USBSetup+0xe8>)
    e6e8:	2207      	movs	r2, #7
    e6ea:	0018      	movs	r0, r3
    e6ec:	f7f7 fd86 	bl	61fc <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    e6f0:	2301      	movs	r3, #1
    e6f2:	e04c      	b.n	e78e <_Z9CDC_SetupR8USBSetup+0xda>
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    e6f4:	230f      	movs	r3, #15
    e6f6:	18fb      	adds	r3, r7, r3
    e6f8:	781b      	ldrb	r3, [r3, #0]
    e6fa:	2b21      	cmp	r3, #33	; 0x21
    e6fc:	d146      	bne.n	e78c <_Z9CDC_SetupR8USBSetup+0xd8>
	{
		if (r == CDC_SET_LINE_CODING)
    e6fe:	230e      	movs	r3, #14
    e700:	18fb      	adds	r3, r7, r3
    e702:	781b      	ldrb	r3, [r3, #0]
    e704:	2b20      	cmp	r3, #32
    e706:	d105      	bne.n	e714 <_Z9CDC_SetupR8USBSetup+0x60>
		{
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    e708:	4923      	ldr	r1, [pc, #140]	; (e798 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e70a:	4b24      	ldr	r3, [pc, #144]	; (e79c <_Z9CDC_SetupR8USBSetup+0xe8>)
    e70c:	2207      	movs	r2, #7
    e70e:	0018      	movs	r0, r3
    e710:	f7f7 fad2 	bl	5cb8 <_ZN14USBDeviceClass11recvControlEPvm>
		}

		if (r == CDC_SET_CONTROL_LINE_STATE)
    e714:	230e      	movs	r3, #14
    e716:	18fb      	adds	r3, r7, r3
    e718:	781b      	ldrb	r3, [r3, #0]
    e71a:	2b22      	cmp	r3, #34	; 0x22
    e71c:	d103      	bne.n	e726 <_Z9CDC_SetupR8USBSetup+0x72>
		{
			_usbLineInfo.lineState = setup.wValueL;
    e71e:	687b      	ldr	r3, [r7, #4]
    e720:	789a      	ldrb	r2, [r3, #2]
    e722:	4b1d      	ldr	r3, [pc, #116]	; (e798 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e724:	71da      	strb	r2, [r3, #7]
		}

		if (r == CDC_SET_LINE_CODING || r == CDC_SET_CONTROL_LINE_STATE)
    e726:	230e      	movs	r3, #14
    e728:	18fb      	adds	r3, r7, r3
    e72a:	781b      	ldrb	r3, [r3, #0]
    e72c:	2b20      	cmp	r3, #32
    e72e:	d004      	beq.n	e73a <_Z9CDC_SetupR8USBSetup+0x86>
    e730:	230e      	movs	r3, #14
    e732:	18fb      	adds	r3, r7, r3
    e734:	781b      	ldrb	r3, [r3, #0]
    e736:	2b22      	cmp	r3, #34	; 0x22
    e738:	d119      	bne.n	e76e <_Z9CDC_SetupR8USBSetup+0xba>
		{
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed. We check DTR state to determine if host 
			// port is open (bit 0 of lineState).
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    e73a:	4b17      	ldr	r3, [pc, #92]	; (e798 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e73c:	681a      	ldr	r2, [r3, #0]
    e73e:	2396      	movs	r3, #150	; 0x96
    e740:	00db      	lsls	r3, r3, #3
    e742:	429a      	cmp	r2, r3
    e744:	d108      	bne.n	e758 <_Z9CDC_SetupR8USBSetup+0xa4>
    e746:	4b14      	ldr	r3, [pc, #80]	; (e798 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e748:	79db      	ldrb	r3, [r3, #7]
    e74a:	b2db      	uxtb	r3, r3
    e74c:	001a      	movs	r2, r3
    e74e:	2301      	movs	r3, #1
    e750:	4013      	ands	r3, r2
    e752:	d101      	bne.n	e758 <_Z9CDC_SetupR8USBSetup+0xa4>
    e754:	2301      	movs	r3, #1
    e756:	e000      	b.n	e75a <_Z9CDC_SetupR8USBSetup+0xa6>
    e758:	2300      	movs	r3, #0
    e75a:	2b00      	cmp	r3, #0
    e75c:	d003      	beq.n	e766 <_Z9CDC_SetupR8USBSetup+0xb2>
			{
				initiateReset(250);
    e75e:	20fa      	movs	r0, #250	; 0xfa
    e760:	f7f4 fefc 	bl	355c <initiateReset>
    e764:	e001      	b.n	e76a <_Z9CDC_SetupR8USBSetup+0xb6>
			}
			else
			{
				cancelReset();
    e766:	f7f4 ff07 	bl	3578 <cancelReset>
			}
			return false;
    e76a:	2300      	movs	r3, #0
    e76c:	e00f      	b.n	e78e <_Z9CDC_SetupR8USBSetup+0xda>
		}

		if (CDC_SEND_BREAK == r)
    e76e:	230e      	movs	r3, #14
    e770:	18fb      	adds	r3, r7, r3
    e772:	781b      	ldrb	r3, [r3, #0]
    e774:	2b23      	cmp	r3, #35	; 0x23
    e776:	d109      	bne.n	e78c <_Z9CDC_SetupR8USBSetup+0xd8>
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    e778:	687b      	ldr	r3, [r7, #4]
    e77a:	78db      	ldrb	r3, [r3, #3]
    e77c:	021b      	lsls	r3, r3, #8
    e77e:	687a      	ldr	r2, [r7, #4]
    e780:	7892      	ldrb	r2, [r2, #2]
    e782:	431a      	orrs	r2, r3
    e784:	4b06      	ldr	r3, [pc, #24]	; (e7a0 <_Z9CDC_SetupR8USBSetup+0xec>)
    e786:	601a      	str	r2, [r3, #0]
			return false;
    e788:	2300      	movs	r3, #0
    e78a:	e000      	b.n	e78e <_Z9CDC_SetupR8USBSetup+0xda>
		}
	}
	return false;
    e78c:	2300      	movs	r3, #0
}
    e78e:	0018      	movs	r0, r3
    e790:	46bd      	mov	sp, r7
    e792:	b004      	add	sp, #16
    e794:	bd80      	pop	{r7, pc}
    e796:	46c0      	nop			; (mov r8, r8)
    e798:	20000050 	.word	0x20000050
    e79c:	200008f0 	.word	0x200008f0
    e7a0:	20000058 	.word	0x20000058

0000e7a4 <_ZN7Serial_9availableEv>:
void Serial_::end(void)
{
}

int Serial_::available(void)
{
    e7a4:	b580      	push	{r7, lr}
    e7a6:	b082      	sub	sp, #8
    e7a8:	af00      	add	r7, sp, #0
    e7aa:	6078      	str	r0, [r7, #4]
	return usb.available(CDC_ENDPOINT_OUT);
    e7ac:	687b      	ldr	r3, [r7, #4]
    e7ae:	691b      	ldr	r3, [r3, #16]
    e7b0:	2102      	movs	r1, #2
    e7b2:	0018      	movs	r0, r3
    e7b4:	f7f7 fab8 	bl	5d28 <_ZN14USBDeviceClass9availableEm>
    e7b8:	0003      	movs	r3, r0
}
    e7ba:	0018      	movs	r0, r3
    e7bc:	46bd      	mov	sp, r7
    e7be:	b002      	add	sp, #8
    e7c0:	bd80      	pop	{r7, pc}

0000e7c2 <_ZN7Serial_17availableForWriteEv>:

int Serial_::availableForWrite(void)
{
    e7c2:	b580      	push	{r7, lr}
    e7c4:	b082      	sub	sp, #8
    e7c6:	af00      	add	r7, sp, #0
    e7c8:	6078      	str	r0, [r7, #4]
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
    e7ca:	233f      	movs	r3, #63	; 0x3f
}
    e7cc:	0018      	movs	r0, r3
    e7ce:	46bd      	mov	sp, r7
    e7d0:	b002      	add	sp, #8
    e7d2:	bd80      	pop	{r7, pc}

0000e7d4 <_ZN7Serial_4peekEv>:

int _serialPeek = -1;

int Serial_::peek(void)
{
    e7d4:	b580      	push	{r7, lr}
    e7d6:	b082      	sub	sp, #8
    e7d8:	af00      	add	r7, sp, #0
    e7da:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1)
    e7dc:	4b0b      	ldr	r3, [pc, #44]	; (e80c <_ZN7Serial_4peekEv+0x38>)
    e7de:	681b      	ldr	r3, [r3, #0]
    e7e0:	3301      	adds	r3, #1
    e7e2:	d002      	beq.n	e7ea <_ZN7Serial_4peekEv+0x16>
		return _serialPeek;
    e7e4:	4b09      	ldr	r3, [pc, #36]	; (e80c <_ZN7Serial_4peekEv+0x38>)
    e7e6:	681b      	ldr	r3, [r3, #0]
    e7e8:	e00b      	b.n	e802 <_ZN7Serial_4peekEv+0x2e>
	_serialPeek = read();
    e7ea:	687b      	ldr	r3, [r7, #4]
    e7ec:	681b      	ldr	r3, [r3, #0]
    e7ee:	3314      	adds	r3, #20
    e7f0:	681b      	ldr	r3, [r3, #0]
    e7f2:	687a      	ldr	r2, [r7, #4]
    e7f4:	0010      	movs	r0, r2
    e7f6:	4798      	blx	r3
    e7f8:	0002      	movs	r2, r0
    e7fa:	4b04      	ldr	r3, [pc, #16]	; (e80c <_ZN7Serial_4peekEv+0x38>)
    e7fc:	601a      	str	r2, [r3, #0]
	return _serialPeek;
    e7fe:	4b03      	ldr	r3, [pc, #12]	; (e80c <_ZN7Serial_4peekEv+0x38>)
    e800:	681b      	ldr	r3, [r3, #0]
}
    e802:	0018      	movs	r0, r3
    e804:	46bd      	mov	sp, r7
    e806:	b002      	add	sp, #8
    e808:	bd80      	pop	{r7, pc}
    e80a:	46c0      	nop			; (mov r8, r8)
    e80c:	200000a0 	.word	0x200000a0

0000e810 <_ZN7Serial_4readEv>:

int Serial_::read(void)
{
    e810:	b580      	push	{r7, lr}
    e812:	b084      	sub	sp, #16
    e814:	af00      	add	r7, sp, #0
    e816:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1) {
    e818:	4b0b      	ldr	r3, [pc, #44]	; (e848 <_ZN7Serial_4readEv+0x38>)
    e81a:	681b      	ldr	r3, [r3, #0]
    e81c:	3301      	adds	r3, #1
    e81e:	d008      	beq.n	e832 <_ZN7Serial_4readEv+0x22>
		int res = _serialPeek;
    e820:	4b09      	ldr	r3, [pc, #36]	; (e848 <_ZN7Serial_4readEv+0x38>)
    e822:	681b      	ldr	r3, [r3, #0]
    e824:	60fb      	str	r3, [r7, #12]
		_serialPeek = -1;
    e826:	4b08      	ldr	r3, [pc, #32]	; (e848 <_ZN7Serial_4readEv+0x38>)
    e828:	2201      	movs	r2, #1
    e82a:	4252      	negs	r2, r2
    e82c:	601a      	str	r2, [r3, #0]
		return res;
    e82e:	68fb      	ldr	r3, [r7, #12]
    e830:	e006      	b.n	e840 <_ZN7Serial_4readEv+0x30>
	}
	return usb.recv(CDC_ENDPOINT_OUT);
    e832:	687b      	ldr	r3, [r7, #4]
    e834:	691b      	ldr	r3, [r3, #16]
    e836:	2102      	movs	r1, #2
    e838:	0018      	movs	r0, r3
    e83a:	f7f7 fb35 	bl	5ea8 <_ZN14USBDeviceClass4recvEm>
    e83e:	0003      	movs	r3, r0
}
    e840:	0018      	movs	r0, r3
    e842:	46bd      	mov	sp, r7
    e844:	b004      	add	sp, #16
    e846:	bd80      	pop	{r7, pc}
    e848:	200000a0 	.word	0x200000a0

0000e84c <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
    e84c:	b580      	push	{r7, lr}
    e84e:	b082      	sub	sp, #8
    e850:	af00      	add	r7, sp, #0
    e852:	6078      	str	r0, [r7, #4]
	usb.flush(CDC_ENDPOINT_IN);
    e854:	687b      	ldr	r3, [r7, #4]
    e856:	691b      	ldr	r3, [r3, #16]
    e858:	2103      	movs	r1, #3
    e85a:	0018      	movs	r0, r3
    e85c:	f7f7 f9f2 	bl	5c44 <_ZN14USBDeviceClass5flushEm>
}
    e860:	46c0      	nop			; (mov r8, r8)
    e862:	46bd      	mov	sp, r7
    e864:	b002      	add	sp, #8
    e866:	bd80      	pop	{r7, pc}

0000e868 <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
    e868:	b580      	push	{r7, lr}
    e86a:	b086      	sub	sp, #24
    e86c:	af00      	add	r7, sp, #0
    e86e:	60f8      	str	r0, [r7, #12]
    e870:	60b9      	str	r1, [r7, #8]
    e872:	607a      	str	r2, [r7, #4]
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    e874:	68fb      	ldr	r3, [r7, #12]
    e876:	6918      	ldr	r0, [r3, #16]
    e878:	687b      	ldr	r3, [r7, #4]
    e87a:	68ba      	ldr	r2, [r7, #8]
    e87c:	2103      	movs	r1, #3
    e87e:	f7f7 fbbd 	bl	5ffc <_ZN14USBDeviceClass4sendEmPKvm>
    e882:	0003      	movs	r3, r0
    e884:	617b      	str	r3, [r7, #20]

	if (r > 0) {
    e886:	697b      	ldr	r3, [r7, #20]
    e888:	2b00      	cmp	r3, #0
    e88a:	d001      	beq.n	e890 <_ZN7Serial_5writeEPKhj+0x28>
		return r;
    e88c:	697b      	ldr	r3, [r7, #20]
    e88e:	e005      	b.n	e89c <_ZN7Serial_5writeEPKhj+0x34>
	} else {
		setWriteError();
    e890:	68fb      	ldr	r3, [r7, #12]
    e892:	2101      	movs	r1, #1
    e894:	0018      	movs	r0, r3
    e896:	f7fa f86b 	bl	8970 <_ZN5Print13setWriteErrorEi>
		return 0;
    e89a:	2300      	movs	r3, #0
	}
}
    e89c:	0018      	movs	r0, r3
    e89e:	46bd      	mov	sp, r7
    e8a0:	b006      	add	sp, #24
    e8a2:	bd80      	pop	{r7, pc}

0000e8a4 <_ZN7Serial_5writeEh>:

size_t Serial_::write(uint8_t c) {
    e8a4:	b580      	push	{r7, lr}
    e8a6:	b082      	sub	sp, #8
    e8a8:	af00      	add	r7, sp, #0
    e8aa:	6078      	str	r0, [r7, #4]
    e8ac:	000a      	movs	r2, r1
    e8ae:	1cfb      	adds	r3, r7, #3
    e8b0:	701a      	strb	r2, [r3, #0]
	return write(&c, 1);
    e8b2:	687b      	ldr	r3, [r7, #4]
    e8b4:	681b      	ldr	r3, [r3, #0]
    e8b6:	3304      	adds	r3, #4
    e8b8:	681b      	ldr	r3, [r3, #0]
    e8ba:	1cf9      	adds	r1, r7, #3
    e8bc:	6878      	ldr	r0, [r7, #4]
    e8be:	2201      	movs	r2, #1
    e8c0:	4798      	blx	r3
    e8c2:	0003      	movs	r3, r0
}
    e8c4:	0018      	movs	r0, r3
    e8c6:	46bd      	mov	sp, r7
    e8c8:	b002      	add	sp, #8
    e8ca:	bd80      	pop	{r7, pc}

0000e8cc <_Z41__static_initialization_and_destruction_0ii>:

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    e8cc:	b580      	push	{r7, lr}
    e8ce:	b082      	sub	sp, #8
    e8d0:	af00      	add	r7, sp, #0
    e8d2:	6078      	str	r0, [r7, #4]
    e8d4:	6039      	str	r1, [r7, #0]
    e8d6:	687b      	ldr	r3, [r7, #4]
    e8d8:	2b01      	cmp	r3, #1
    e8da:	d109      	bne.n	e8f0 <_Z41__static_initialization_and_destruction_0ii+0x24>
    e8dc:	683b      	ldr	r3, [r7, #0]
    e8de:	4a06      	ldr	r2, [pc, #24]	; (e8f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    e8e0:	4293      	cmp	r3, r2
    e8e2:	d105      	bne.n	e8f0 <_Z41__static_initialization_and_destruction_0ii+0x24>
    e8e4:	4a05      	ldr	r2, [pc, #20]	; (e8fc <_Z41__static_initialization_and_destruction_0ii+0x30>)
    e8e6:	4b06      	ldr	r3, [pc, #24]	; (e900 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e8e8:	0011      	movs	r1, r2
    e8ea:	0018      	movs	r0, r3
    e8ec:	f7ff feae 	bl	e64c <_ZN7Serial_C1ER14USBDeviceClass>
    e8f0:	46c0      	nop			; (mov r8, r8)
    e8f2:	46bd      	mov	sp, r7
    e8f4:	b002      	add	sp, #8
    e8f6:	bd80      	pop	{r7, pc}
    e8f8:	0000ffff 	.word	0x0000ffff
    e8fc:	200008f0 	.word	0x200008f0
    e900:	20000f50 	.word	0x20000f50

0000e904 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    e904:	b580      	push	{r7, lr}
    e906:	af00      	add	r7, sp, #0
    e908:	4b03      	ldr	r3, [pc, #12]	; (e918 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x14>)
    e90a:	0019      	movs	r1, r3
    e90c:	2001      	movs	r0, #1
    e90e:	f7ff ffdd 	bl	e8cc <_Z41__static_initialization_and_destruction_0ii>
    e912:	46bd      	mov	sp, r7
    e914:	bd80      	pop	{r7, pc}
    e916:	46c0      	nop			; (mov r8, r8)
    e918:	0000ffff 	.word	0x0000ffff

0000e91c <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    e91c:	b580      	push	{r7, lr}
    e91e:	b086      	sub	sp, #24
    e920:	af00      	add	r7, sp, #0
    e922:	6078      	str	r0, [r7, #4]
    e924:	6039      	str	r1, [r7, #0]
	int sent = 0;
    e926:	2300      	movs	r3, #0
    e928:	617b      	str	r3, [r7, #20]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e92a:	687b      	ldr	r3, [r7, #4]
    e92c:	685b      	ldr	r3, [r3, #4]
    e92e:	613b      	str	r3, [r7, #16]
    e930:	693b      	ldr	r3, [r7, #16]
    e932:	2b00      	cmp	r3, #0
    e934:	d017      	beq.n	e966 <_ZN13PluggableUSB_12getInterfaceEPh+0x4a>
		int res = node->getInterface(interfaceCount);
    e936:	693b      	ldr	r3, [r7, #16]
    e938:	681b      	ldr	r3, [r3, #0]
    e93a:	3304      	adds	r3, #4
    e93c:	681b      	ldr	r3, [r3, #0]
    e93e:	6839      	ldr	r1, [r7, #0]
    e940:	693a      	ldr	r2, [r7, #16]
    e942:	0010      	movs	r0, r2
    e944:	4798      	blx	r3
    e946:	0003      	movs	r3, r0
    e948:	60fb      	str	r3, [r7, #12]
		if (res < 0)
    e94a:	68fb      	ldr	r3, [r7, #12]
    e94c:	2b00      	cmp	r3, #0
    e94e:	da02      	bge.n	e956 <_ZN13PluggableUSB_12getInterfaceEPh+0x3a>
			return -1;
    e950:	2301      	movs	r3, #1
    e952:	425b      	negs	r3, r3
    e954:	e008      	b.n	e968 <_ZN13PluggableUSB_12getInterfaceEPh+0x4c>
		sent += res;
    e956:	697a      	ldr	r2, [r7, #20]
    e958:	68fb      	ldr	r3, [r7, #12]
    e95a:	18d3      	adds	r3, r2, r3
    e95c:	617b      	str	r3, [r7, #20]
	for (node = rootNode; node; node = node->next) {
    e95e:	693b      	ldr	r3, [r7, #16]
    e960:	68db      	ldr	r3, [r3, #12]
    e962:	613b      	str	r3, [r7, #16]
    e964:	e7e4      	b.n	e930 <_ZN13PluggableUSB_12getInterfaceEPh+0x14>
	}
	return sent;
    e966:	697b      	ldr	r3, [r7, #20]
}
    e968:	0018      	movs	r0, r3
    e96a:	46bd      	mov	sp, r7
    e96c:	b006      	add	sp, #24
    e96e:	bd80      	pop	{r7, pc}

0000e970 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    e970:	b580      	push	{r7, lr}
    e972:	b084      	sub	sp, #16
    e974:	af00      	add	r7, sp, #0
    e976:	6078      	str	r0, [r7, #4]
    e978:	6039      	str	r1, [r7, #0]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e97a:	687b      	ldr	r3, [r7, #4]
    e97c:	685b      	ldr	r3, [r3, #4]
    e97e:	60fb      	str	r3, [r7, #12]
    e980:	68fb      	ldr	r3, [r7, #12]
    e982:	2b00      	cmp	r3, #0
    e984:	d012      	beq.n	e9ac <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x3c>
		int ret = node->getDescriptor(setup);
    e986:	68fb      	ldr	r3, [r7, #12]
    e988:	681b      	ldr	r3, [r3, #0]
    e98a:	3308      	adds	r3, #8
    e98c:	681b      	ldr	r3, [r3, #0]
    e98e:	6839      	ldr	r1, [r7, #0]
    e990:	68fa      	ldr	r2, [r7, #12]
    e992:	0010      	movs	r0, r2
    e994:	4798      	blx	r3
    e996:	0003      	movs	r3, r0
    e998:	60bb      	str	r3, [r7, #8]
		// ret!=0 -> request has been processed
		if (ret)
    e99a:	68bb      	ldr	r3, [r7, #8]
    e99c:	2b00      	cmp	r3, #0
    e99e:	d001      	beq.n	e9a4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
			return ret;
    e9a0:	68bb      	ldr	r3, [r7, #8]
    e9a2:	e004      	b.n	e9ae <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x3e>
	for (node = rootNode; node; node = node->next) {
    e9a4:	68fb      	ldr	r3, [r7, #12]
    e9a6:	68db      	ldr	r3, [r3, #12]
    e9a8:	60fb      	str	r3, [r7, #12]
    e9aa:	e7e9      	b.n	e980 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
	}
	return 0;
    e9ac:	2300      	movs	r3, #0
}
    e9ae:	0018      	movs	r0, r3
    e9b0:	46bd      	mov	sp, r7
    e9b2:	b004      	add	sp, #16
    e9b4:	bd80      	pop	{r7, pc}

0000e9b6 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    e9b6:	b580      	push	{r7, lr}
    e9b8:	b084      	sub	sp, #16
    e9ba:	af00      	add	r7, sp, #0
    e9bc:	6078      	str	r0, [r7, #4]
    e9be:	6039      	str	r1, [r7, #0]
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    e9c0:	687b      	ldr	r3, [r7, #4]
    e9c2:	685b      	ldr	r3, [r3, #4]
    e9c4:	60fb      	str	r3, [r7, #12]
    e9c6:	68fb      	ldr	r3, [r7, #12]
    e9c8:	2b00      	cmp	r3, #0
    e9ca:	d010      	beq.n	e9ee <_ZN13PluggableUSB_12getShortNameEPc+0x38>
               iSerialNum += node->getShortName(iSerialNum);
    e9cc:	68fb      	ldr	r3, [r7, #12]
    e9ce:	681b      	ldr	r3, [r3, #0]
    e9d0:	330c      	adds	r3, #12
    e9d2:	681b      	ldr	r3, [r3, #0]
    e9d4:	6839      	ldr	r1, [r7, #0]
    e9d6:	68fa      	ldr	r2, [r7, #12]
    e9d8:	0010      	movs	r0, r2
    e9da:	4798      	blx	r3
    e9dc:	0003      	movs	r3, r0
    e9de:	001a      	movs	r2, r3
    e9e0:	683b      	ldr	r3, [r7, #0]
    e9e2:	189b      	adds	r3, r3, r2
    e9e4:	603b      	str	r3, [r7, #0]
       for (node = rootNode; node; node = node->next) {
    e9e6:	68fb      	ldr	r3, [r7, #12]
    e9e8:	68db      	ldr	r3, [r3, #12]
    e9ea:	60fb      	str	r3, [r7, #12]
    e9ec:	e7eb      	b.n	e9c6 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
       }
       *iSerialNum = 0;
    e9ee:	683b      	ldr	r3, [r7, #0]
    e9f0:	2200      	movs	r2, #0
    e9f2:	701a      	strb	r2, [r3, #0]
}
    e9f4:	46c0      	nop			; (mov r8, r8)
    e9f6:	46bd      	mov	sp, r7
    e9f8:	b004      	add	sp, #16
    e9fa:	bd80      	pop	{r7, pc}

0000e9fc <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    e9fc:	b580      	push	{r7, lr}
    e9fe:	b084      	sub	sp, #16
    ea00:	af00      	add	r7, sp, #0
    ea02:	6078      	str	r0, [r7, #4]
    ea04:	6039      	str	r1, [r7, #0]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    ea06:	687b      	ldr	r3, [r7, #4]
    ea08:	685b      	ldr	r3, [r3, #4]
    ea0a:	60fb      	str	r3, [r7, #12]
    ea0c:	68fb      	ldr	r3, [r7, #12]
    ea0e:	2b00      	cmp	r3, #0
    ea10:	d00e      	beq.n	ea30 <_ZN13PluggableUSB_5setupER8USBSetup+0x34>
		if (node->setup(setup)) {
    ea12:	68fb      	ldr	r3, [r7, #12]
    ea14:	681b      	ldr	r3, [r3, #0]
    ea16:	681b      	ldr	r3, [r3, #0]
    ea18:	6839      	ldr	r1, [r7, #0]
    ea1a:	68fa      	ldr	r2, [r7, #12]
    ea1c:	0010      	movs	r0, r2
    ea1e:	4798      	blx	r3
    ea20:	1e03      	subs	r3, r0, #0
    ea22:	d001      	beq.n	ea28 <_ZN13PluggableUSB_5setupER8USBSetup+0x2c>
			return true;
    ea24:	2301      	movs	r3, #1
    ea26:	e004      	b.n	ea32 <_ZN13PluggableUSB_5setupER8USBSetup+0x36>
	for (node = rootNode; node; node = node->next) {
    ea28:	68fb      	ldr	r3, [r7, #12]
    ea2a:	68db      	ldr	r3, [r3, #12]
    ea2c:	60fb      	str	r3, [r7, #12]
    ea2e:	e7ed      	b.n	ea0c <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
		}
	}
	return false;
    ea30:	2300      	movs	r3, #0
}
    ea32:	0018      	movs	r0, r3
    ea34:	46bd      	mov	sp, r7
    ea36:	b004      	add	sp, #16
    ea38:	bd80      	pop	{r7, pc}
	...

0000ea3c <_Z12PluggableUSBv>:
	return true;
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
    ea3c:	b580      	push	{r7, lr}
    ea3e:	af00      	add	r7, sp, #0
	static PluggableUSB_ obj;
    ea40:	4b07      	ldr	r3, [pc, #28]	; (ea60 <_Z12PluggableUSBv+0x24>)
    ea42:	681b      	ldr	r3, [r3, #0]
    ea44:	2201      	movs	r2, #1
    ea46:	4013      	ands	r3, r2
    ea48:	d106      	bne.n	ea58 <_Z12PluggableUSBv+0x1c>
    ea4a:	4b06      	ldr	r3, [pc, #24]	; (ea64 <_Z12PluggableUSBv+0x28>)
    ea4c:	0018      	movs	r0, r3
    ea4e:	f000 f80b 	bl	ea68 <_ZN13PluggableUSB_C1Ev>
    ea52:	4b03      	ldr	r3, [pc, #12]	; (ea60 <_Z12PluggableUSBv+0x24>)
    ea54:	2201      	movs	r2, #1
    ea56:	601a      	str	r2, [r3, #0]
	return obj;
    ea58:	4b02      	ldr	r3, [pc, #8]	; (ea64 <_Z12PluggableUSBv+0x28>)
}
    ea5a:	0018      	movs	r0, r3
    ea5c:	46bd      	mov	sp, r7
    ea5e:	bd80      	pop	{r7, pc}
    ea60:	20000f74 	.word	0x20000f74
    ea64:	20000f6c 	.word	0x20000f6c

0000ea68 <_ZN13PluggableUSB_C1Ev>:

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
    ea68:	b580      	push	{r7, lr}
    ea6a:	b082      	sub	sp, #8
    ea6c:	af00      	add	r7, sp, #0
    ea6e:	6078      	str	r0, [r7, #4]
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    ea70:	687b      	ldr	r3, [r7, #4]
    ea72:	2202      	movs	r2, #2
    ea74:	701a      	strb	r2, [r3, #0]
    ea76:	687b      	ldr	r3, [r7, #4]
    ea78:	2204      	movs	r2, #4
    ea7a:	705a      	strb	r2, [r3, #1]
    ea7c:	687b      	ldr	r3, [r7, #4]
    ea7e:	2200      	movs	r2, #0
    ea80:	605a      	str	r2, [r3, #4]
{
	// Empty
}
    ea82:	687b      	ldr	r3, [r7, #4]
    ea84:	0018      	movs	r0, r3
    ea86:	46bd      	mov	sp, r7
    ea88:	b002      	add	sp, #8
    ea8a:	bd80      	pop	{r7, pc}

0000ea8c <__aeabi_atexit>:
    ea8c:	000b      	movs	r3, r1
    ea8e:	b510      	push	{r4, lr}
    ea90:	0001      	movs	r1, r0
    ea92:	0018      	movs	r0, r3
    ea94:	f001 ff58 	bl	10948 <__cxa_atexit>
    ea98:	bd10      	pop	{r4, pc}
	...

0000ea9c <__udivsi3>:
    ea9c:	2200      	movs	r2, #0
    ea9e:	0843      	lsrs	r3, r0, #1
    eaa0:	428b      	cmp	r3, r1
    eaa2:	d374      	bcc.n	eb8e <__udivsi3+0xf2>
    eaa4:	0903      	lsrs	r3, r0, #4
    eaa6:	428b      	cmp	r3, r1
    eaa8:	d35f      	bcc.n	eb6a <__udivsi3+0xce>
    eaaa:	0a03      	lsrs	r3, r0, #8
    eaac:	428b      	cmp	r3, r1
    eaae:	d344      	bcc.n	eb3a <__udivsi3+0x9e>
    eab0:	0b03      	lsrs	r3, r0, #12
    eab2:	428b      	cmp	r3, r1
    eab4:	d328      	bcc.n	eb08 <__udivsi3+0x6c>
    eab6:	0c03      	lsrs	r3, r0, #16
    eab8:	428b      	cmp	r3, r1
    eaba:	d30d      	bcc.n	ead8 <__udivsi3+0x3c>
    eabc:	22ff      	movs	r2, #255	; 0xff
    eabe:	0209      	lsls	r1, r1, #8
    eac0:	ba12      	rev	r2, r2
    eac2:	0c03      	lsrs	r3, r0, #16
    eac4:	428b      	cmp	r3, r1
    eac6:	d302      	bcc.n	eace <__udivsi3+0x32>
    eac8:	1212      	asrs	r2, r2, #8
    eaca:	0209      	lsls	r1, r1, #8
    eacc:	d065      	beq.n	eb9a <__udivsi3+0xfe>
    eace:	0b03      	lsrs	r3, r0, #12
    ead0:	428b      	cmp	r3, r1
    ead2:	d319      	bcc.n	eb08 <__udivsi3+0x6c>
    ead4:	e000      	b.n	ead8 <__udivsi3+0x3c>
    ead6:	0a09      	lsrs	r1, r1, #8
    ead8:	0bc3      	lsrs	r3, r0, #15
    eada:	428b      	cmp	r3, r1
    eadc:	d301      	bcc.n	eae2 <__udivsi3+0x46>
    eade:	03cb      	lsls	r3, r1, #15
    eae0:	1ac0      	subs	r0, r0, r3
    eae2:	4152      	adcs	r2, r2
    eae4:	0b83      	lsrs	r3, r0, #14
    eae6:	428b      	cmp	r3, r1
    eae8:	d301      	bcc.n	eaee <__udivsi3+0x52>
    eaea:	038b      	lsls	r3, r1, #14
    eaec:	1ac0      	subs	r0, r0, r3
    eaee:	4152      	adcs	r2, r2
    eaf0:	0b43      	lsrs	r3, r0, #13
    eaf2:	428b      	cmp	r3, r1
    eaf4:	d301      	bcc.n	eafa <__udivsi3+0x5e>
    eaf6:	034b      	lsls	r3, r1, #13
    eaf8:	1ac0      	subs	r0, r0, r3
    eafa:	4152      	adcs	r2, r2
    eafc:	0b03      	lsrs	r3, r0, #12
    eafe:	428b      	cmp	r3, r1
    eb00:	d301      	bcc.n	eb06 <__udivsi3+0x6a>
    eb02:	030b      	lsls	r3, r1, #12
    eb04:	1ac0      	subs	r0, r0, r3
    eb06:	4152      	adcs	r2, r2
    eb08:	0ac3      	lsrs	r3, r0, #11
    eb0a:	428b      	cmp	r3, r1
    eb0c:	d301      	bcc.n	eb12 <__udivsi3+0x76>
    eb0e:	02cb      	lsls	r3, r1, #11
    eb10:	1ac0      	subs	r0, r0, r3
    eb12:	4152      	adcs	r2, r2
    eb14:	0a83      	lsrs	r3, r0, #10
    eb16:	428b      	cmp	r3, r1
    eb18:	d301      	bcc.n	eb1e <__udivsi3+0x82>
    eb1a:	028b      	lsls	r3, r1, #10
    eb1c:	1ac0      	subs	r0, r0, r3
    eb1e:	4152      	adcs	r2, r2
    eb20:	0a43      	lsrs	r3, r0, #9
    eb22:	428b      	cmp	r3, r1
    eb24:	d301      	bcc.n	eb2a <__udivsi3+0x8e>
    eb26:	024b      	lsls	r3, r1, #9
    eb28:	1ac0      	subs	r0, r0, r3
    eb2a:	4152      	adcs	r2, r2
    eb2c:	0a03      	lsrs	r3, r0, #8
    eb2e:	428b      	cmp	r3, r1
    eb30:	d301      	bcc.n	eb36 <__udivsi3+0x9a>
    eb32:	020b      	lsls	r3, r1, #8
    eb34:	1ac0      	subs	r0, r0, r3
    eb36:	4152      	adcs	r2, r2
    eb38:	d2cd      	bcs.n	ead6 <__udivsi3+0x3a>
    eb3a:	09c3      	lsrs	r3, r0, #7
    eb3c:	428b      	cmp	r3, r1
    eb3e:	d301      	bcc.n	eb44 <__udivsi3+0xa8>
    eb40:	01cb      	lsls	r3, r1, #7
    eb42:	1ac0      	subs	r0, r0, r3
    eb44:	4152      	adcs	r2, r2
    eb46:	0983      	lsrs	r3, r0, #6
    eb48:	428b      	cmp	r3, r1
    eb4a:	d301      	bcc.n	eb50 <__udivsi3+0xb4>
    eb4c:	018b      	lsls	r3, r1, #6
    eb4e:	1ac0      	subs	r0, r0, r3
    eb50:	4152      	adcs	r2, r2
    eb52:	0943      	lsrs	r3, r0, #5
    eb54:	428b      	cmp	r3, r1
    eb56:	d301      	bcc.n	eb5c <__udivsi3+0xc0>
    eb58:	014b      	lsls	r3, r1, #5
    eb5a:	1ac0      	subs	r0, r0, r3
    eb5c:	4152      	adcs	r2, r2
    eb5e:	0903      	lsrs	r3, r0, #4
    eb60:	428b      	cmp	r3, r1
    eb62:	d301      	bcc.n	eb68 <__udivsi3+0xcc>
    eb64:	010b      	lsls	r3, r1, #4
    eb66:	1ac0      	subs	r0, r0, r3
    eb68:	4152      	adcs	r2, r2
    eb6a:	08c3      	lsrs	r3, r0, #3
    eb6c:	428b      	cmp	r3, r1
    eb6e:	d301      	bcc.n	eb74 <__udivsi3+0xd8>
    eb70:	00cb      	lsls	r3, r1, #3
    eb72:	1ac0      	subs	r0, r0, r3
    eb74:	4152      	adcs	r2, r2
    eb76:	0883      	lsrs	r3, r0, #2
    eb78:	428b      	cmp	r3, r1
    eb7a:	d301      	bcc.n	eb80 <__udivsi3+0xe4>
    eb7c:	008b      	lsls	r3, r1, #2
    eb7e:	1ac0      	subs	r0, r0, r3
    eb80:	4152      	adcs	r2, r2
    eb82:	0843      	lsrs	r3, r0, #1
    eb84:	428b      	cmp	r3, r1
    eb86:	d301      	bcc.n	eb8c <__udivsi3+0xf0>
    eb88:	004b      	lsls	r3, r1, #1
    eb8a:	1ac0      	subs	r0, r0, r3
    eb8c:	4152      	adcs	r2, r2
    eb8e:	1a41      	subs	r1, r0, r1
    eb90:	d200      	bcs.n	eb94 <__udivsi3+0xf8>
    eb92:	4601      	mov	r1, r0
    eb94:	4152      	adcs	r2, r2
    eb96:	4610      	mov	r0, r2
    eb98:	4770      	bx	lr
    eb9a:	e7ff      	b.n	eb9c <__udivsi3+0x100>
    eb9c:	b501      	push	{r0, lr}
    eb9e:	2000      	movs	r0, #0
    eba0:	f000 f8f0 	bl	ed84 <__aeabi_idiv0>
    eba4:	bd02      	pop	{r1, pc}
    eba6:	46c0      	nop			; (mov r8, r8)

0000eba8 <__aeabi_uidivmod>:
    eba8:	2900      	cmp	r1, #0
    ebaa:	d0f7      	beq.n	eb9c <__udivsi3+0x100>
    ebac:	e776      	b.n	ea9c <__udivsi3>
    ebae:	4770      	bx	lr

0000ebb0 <__divsi3>:
    ebb0:	4603      	mov	r3, r0
    ebb2:	430b      	orrs	r3, r1
    ebb4:	d47f      	bmi.n	ecb6 <__divsi3+0x106>
    ebb6:	2200      	movs	r2, #0
    ebb8:	0843      	lsrs	r3, r0, #1
    ebba:	428b      	cmp	r3, r1
    ebbc:	d374      	bcc.n	eca8 <__divsi3+0xf8>
    ebbe:	0903      	lsrs	r3, r0, #4
    ebc0:	428b      	cmp	r3, r1
    ebc2:	d35f      	bcc.n	ec84 <__divsi3+0xd4>
    ebc4:	0a03      	lsrs	r3, r0, #8
    ebc6:	428b      	cmp	r3, r1
    ebc8:	d344      	bcc.n	ec54 <__divsi3+0xa4>
    ebca:	0b03      	lsrs	r3, r0, #12
    ebcc:	428b      	cmp	r3, r1
    ebce:	d328      	bcc.n	ec22 <__divsi3+0x72>
    ebd0:	0c03      	lsrs	r3, r0, #16
    ebd2:	428b      	cmp	r3, r1
    ebd4:	d30d      	bcc.n	ebf2 <__divsi3+0x42>
    ebd6:	22ff      	movs	r2, #255	; 0xff
    ebd8:	0209      	lsls	r1, r1, #8
    ebda:	ba12      	rev	r2, r2
    ebdc:	0c03      	lsrs	r3, r0, #16
    ebde:	428b      	cmp	r3, r1
    ebe0:	d302      	bcc.n	ebe8 <__divsi3+0x38>
    ebe2:	1212      	asrs	r2, r2, #8
    ebe4:	0209      	lsls	r1, r1, #8
    ebe6:	d065      	beq.n	ecb4 <__divsi3+0x104>
    ebe8:	0b03      	lsrs	r3, r0, #12
    ebea:	428b      	cmp	r3, r1
    ebec:	d319      	bcc.n	ec22 <__divsi3+0x72>
    ebee:	e000      	b.n	ebf2 <__divsi3+0x42>
    ebf0:	0a09      	lsrs	r1, r1, #8
    ebf2:	0bc3      	lsrs	r3, r0, #15
    ebf4:	428b      	cmp	r3, r1
    ebf6:	d301      	bcc.n	ebfc <__divsi3+0x4c>
    ebf8:	03cb      	lsls	r3, r1, #15
    ebfa:	1ac0      	subs	r0, r0, r3
    ebfc:	4152      	adcs	r2, r2
    ebfe:	0b83      	lsrs	r3, r0, #14
    ec00:	428b      	cmp	r3, r1
    ec02:	d301      	bcc.n	ec08 <__divsi3+0x58>
    ec04:	038b      	lsls	r3, r1, #14
    ec06:	1ac0      	subs	r0, r0, r3
    ec08:	4152      	adcs	r2, r2
    ec0a:	0b43      	lsrs	r3, r0, #13
    ec0c:	428b      	cmp	r3, r1
    ec0e:	d301      	bcc.n	ec14 <__divsi3+0x64>
    ec10:	034b      	lsls	r3, r1, #13
    ec12:	1ac0      	subs	r0, r0, r3
    ec14:	4152      	adcs	r2, r2
    ec16:	0b03      	lsrs	r3, r0, #12
    ec18:	428b      	cmp	r3, r1
    ec1a:	d301      	bcc.n	ec20 <__divsi3+0x70>
    ec1c:	030b      	lsls	r3, r1, #12
    ec1e:	1ac0      	subs	r0, r0, r3
    ec20:	4152      	adcs	r2, r2
    ec22:	0ac3      	lsrs	r3, r0, #11
    ec24:	428b      	cmp	r3, r1
    ec26:	d301      	bcc.n	ec2c <__divsi3+0x7c>
    ec28:	02cb      	lsls	r3, r1, #11
    ec2a:	1ac0      	subs	r0, r0, r3
    ec2c:	4152      	adcs	r2, r2
    ec2e:	0a83      	lsrs	r3, r0, #10
    ec30:	428b      	cmp	r3, r1
    ec32:	d301      	bcc.n	ec38 <__divsi3+0x88>
    ec34:	028b      	lsls	r3, r1, #10
    ec36:	1ac0      	subs	r0, r0, r3
    ec38:	4152      	adcs	r2, r2
    ec3a:	0a43      	lsrs	r3, r0, #9
    ec3c:	428b      	cmp	r3, r1
    ec3e:	d301      	bcc.n	ec44 <__divsi3+0x94>
    ec40:	024b      	lsls	r3, r1, #9
    ec42:	1ac0      	subs	r0, r0, r3
    ec44:	4152      	adcs	r2, r2
    ec46:	0a03      	lsrs	r3, r0, #8
    ec48:	428b      	cmp	r3, r1
    ec4a:	d301      	bcc.n	ec50 <__divsi3+0xa0>
    ec4c:	020b      	lsls	r3, r1, #8
    ec4e:	1ac0      	subs	r0, r0, r3
    ec50:	4152      	adcs	r2, r2
    ec52:	d2cd      	bcs.n	ebf0 <__divsi3+0x40>
    ec54:	09c3      	lsrs	r3, r0, #7
    ec56:	428b      	cmp	r3, r1
    ec58:	d301      	bcc.n	ec5e <__divsi3+0xae>
    ec5a:	01cb      	lsls	r3, r1, #7
    ec5c:	1ac0      	subs	r0, r0, r3
    ec5e:	4152      	adcs	r2, r2
    ec60:	0983      	lsrs	r3, r0, #6
    ec62:	428b      	cmp	r3, r1
    ec64:	d301      	bcc.n	ec6a <__divsi3+0xba>
    ec66:	018b      	lsls	r3, r1, #6
    ec68:	1ac0      	subs	r0, r0, r3
    ec6a:	4152      	adcs	r2, r2
    ec6c:	0943      	lsrs	r3, r0, #5
    ec6e:	428b      	cmp	r3, r1
    ec70:	d301      	bcc.n	ec76 <__divsi3+0xc6>
    ec72:	014b      	lsls	r3, r1, #5
    ec74:	1ac0      	subs	r0, r0, r3
    ec76:	4152      	adcs	r2, r2
    ec78:	0903      	lsrs	r3, r0, #4
    ec7a:	428b      	cmp	r3, r1
    ec7c:	d301      	bcc.n	ec82 <__divsi3+0xd2>
    ec7e:	010b      	lsls	r3, r1, #4
    ec80:	1ac0      	subs	r0, r0, r3
    ec82:	4152      	adcs	r2, r2
    ec84:	08c3      	lsrs	r3, r0, #3
    ec86:	428b      	cmp	r3, r1
    ec88:	d301      	bcc.n	ec8e <__divsi3+0xde>
    ec8a:	00cb      	lsls	r3, r1, #3
    ec8c:	1ac0      	subs	r0, r0, r3
    ec8e:	4152      	adcs	r2, r2
    ec90:	0883      	lsrs	r3, r0, #2
    ec92:	428b      	cmp	r3, r1
    ec94:	d301      	bcc.n	ec9a <__divsi3+0xea>
    ec96:	008b      	lsls	r3, r1, #2
    ec98:	1ac0      	subs	r0, r0, r3
    ec9a:	4152      	adcs	r2, r2
    ec9c:	0843      	lsrs	r3, r0, #1
    ec9e:	428b      	cmp	r3, r1
    eca0:	d301      	bcc.n	eca6 <__divsi3+0xf6>
    eca2:	004b      	lsls	r3, r1, #1
    eca4:	1ac0      	subs	r0, r0, r3
    eca6:	4152      	adcs	r2, r2
    eca8:	1a41      	subs	r1, r0, r1
    ecaa:	d200      	bcs.n	ecae <__divsi3+0xfe>
    ecac:	4601      	mov	r1, r0
    ecae:	4152      	adcs	r2, r2
    ecb0:	4610      	mov	r0, r2
    ecb2:	4770      	bx	lr
    ecb4:	e05d      	b.n	ed72 <__divsi3+0x1c2>
    ecb6:	0fca      	lsrs	r2, r1, #31
    ecb8:	d000      	beq.n	ecbc <__divsi3+0x10c>
    ecba:	4249      	negs	r1, r1
    ecbc:	1003      	asrs	r3, r0, #32
    ecbe:	d300      	bcc.n	ecc2 <__divsi3+0x112>
    ecc0:	4240      	negs	r0, r0
    ecc2:	4053      	eors	r3, r2
    ecc4:	2200      	movs	r2, #0
    ecc6:	469c      	mov	ip, r3
    ecc8:	0903      	lsrs	r3, r0, #4
    ecca:	428b      	cmp	r3, r1
    eccc:	d32d      	bcc.n	ed2a <__divsi3+0x17a>
    ecce:	0a03      	lsrs	r3, r0, #8
    ecd0:	428b      	cmp	r3, r1
    ecd2:	d312      	bcc.n	ecfa <__divsi3+0x14a>
    ecd4:	22fc      	movs	r2, #252	; 0xfc
    ecd6:	0189      	lsls	r1, r1, #6
    ecd8:	ba12      	rev	r2, r2
    ecda:	0a03      	lsrs	r3, r0, #8
    ecdc:	428b      	cmp	r3, r1
    ecde:	d30c      	bcc.n	ecfa <__divsi3+0x14a>
    ece0:	0189      	lsls	r1, r1, #6
    ece2:	1192      	asrs	r2, r2, #6
    ece4:	428b      	cmp	r3, r1
    ece6:	d308      	bcc.n	ecfa <__divsi3+0x14a>
    ece8:	0189      	lsls	r1, r1, #6
    ecea:	1192      	asrs	r2, r2, #6
    ecec:	428b      	cmp	r3, r1
    ecee:	d304      	bcc.n	ecfa <__divsi3+0x14a>
    ecf0:	0189      	lsls	r1, r1, #6
    ecf2:	d03a      	beq.n	ed6a <__divsi3+0x1ba>
    ecf4:	1192      	asrs	r2, r2, #6
    ecf6:	e000      	b.n	ecfa <__divsi3+0x14a>
    ecf8:	0989      	lsrs	r1, r1, #6
    ecfa:	09c3      	lsrs	r3, r0, #7
    ecfc:	428b      	cmp	r3, r1
    ecfe:	d301      	bcc.n	ed04 <__divsi3+0x154>
    ed00:	01cb      	lsls	r3, r1, #7
    ed02:	1ac0      	subs	r0, r0, r3
    ed04:	4152      	adcs	r2, r2
    ed06:	0983      	lsrs	r3, r0, #6
    ed08:	428b      	cmp	r3, r1
    ed0a:	d301      	bcc.n	ed10 <__divsi3+0x160>
    ed0c:	018b      	lsls	r3, r1, #6
    ed0e:	1ac0      	subs	r0, r0, r3
    ed10:	4152      	adcs	r2, r2
    ed12:	0943      	lsrs	r3, r0, #5
    ed14:	428b      	cmp	r3, r1
    ed16:	d301      	bcc.n	ed1c <__divsi3+0x16c>
    ed18:	014b      	lsls	r3, r1, #5
    ed1a:	1ac0      	subs	r0, r0, r3
    ed1c:	4152      	adcs	r2, r2
    ed1e:	0903      	lsrs	r3, r0, #4
    ed20:	428b      	cmp	r3, r1
    ed22:	d301      	bcc.n	ed28 <__divsi3+0x178>
    ed24:	010b      	lsls	r3, r1, #4
    ed26:	1ac0      	subs	r0, r0, r3
    ed28:	4152      	adcs	r2, r2
    ed2a:	08c3      	lsrs	r3, r0, #3
    ed2c:	428b      	cmp	r3, r1
    ed2e:	d301      	bcc.n	ed34 <__divsi3+0x184>
    ed30:	00cb      	lsls	r3, r1, #3
    ed32:	1ac0      	subs	r0, r0, r3
    ed34:	4152      	adcs	r2, r2
    ed36:	0883      	lsrs	r3, r0, #2
    ed38:	428b      	cmp	r3, r1
    ed3a:	d301      	bcc.n	ed40 <__divsi3+0x190>
    ed3c:	008b      	lsls	r3, r1, #2
    ed3e:	1ac0      	subs	r0, r0, r3
    ed40:	4152      	adcs	r2, r2
    ed42:	d2d9      	bcs.n	ecf8 <__divsi3+0x148>
    ed44:	0843      	lsrs	r3, r0, #1
    ed46:	428b      	cmp	r3, r1
    ed48:	d301      	bcc.n	ed4e <__divsi3+0x19e>
    ed4a:	004b      	lsls	r3, r1, #1
    ed4c:	1ac0      	subs	r0, r0, r3
    ed4e:	4152      	adcs	r2, r2
    ed50:	1a41      	subs	r1, r0, r1
    ed52:	d200      	bcs.n	ed56 <__divsi3+0x1a6>
    ed54:	4601      	mov	r1, r0
    ed56:	4663      	mov	r3, ip
    ed58:	4152      	adcs	r2, r2
    ed5a:	105b      	asrs	r3, r3, #1
    ed5c:	4610      	mov	r0, r2
    ed5e:	d301      	bcc.n	ed64 <__divsi3+0x1b4>
    ed60:	4240      	negs	r0, r0
    ed62:	2b00      	cmp	r3, #0
    ed64:	d500      	bpl.n	ed68 <__divsi3+0x1b8>
    ed66:	4249      	negs	r1, r1
    ed68:	4770      	bx	lr
    ed6a:	4663      	mov	r3, ip
    ed6c:	105b      	asrs	r3, r3, #1
    ed6e:	d300      	bcc.n	ed72 <__divsi3+0x1c2>
    ed70:	4240      	negs	r0, r0
    ed72:	b501      	push	{r0, lr}
    ed74:	2000      	movs	r0, #0
    ed76:	f000 f805 	bl	ed84 <__aeabi_idiv0>
    ed7a:	bd02      	pop	{r1, pc}

0000ed7c <__aeabi_idivmod>:
    ed7c:	2900      	cmp	r1, #0
    ed7e:	d0f8      	beq.n	ed72 <__divsi3+0x1c2>
    ed80:	e716      	b.n	ebb0 <__divsi3>
    ed82:	4770      	bx	lr

0000ed84 <__aeabi_idiv0>:
    ed84:	4770      	bx	lr
    ed86:	46c0      	nop			; (mov r8, r8)

0000ed88 <__aeabi_cdrcmple>:
    ed88:	4684      	mov	ip, r0
    ed8a:	1c10      	adds	r0, r2, #0
    ed8c:	4662      	mov	r2, ip
    ed8e:	468c      	mov	ip, r1
    ed90:	1c19      	adds	r1, r3, #0
    ed92:	4663      	mov	r3, ip
    ed94:	e000      	b.n	ed98 <__aeabi_cdcmpeq>
    ed96:	46c0      	nop			; (mov r8, r8)

0000ed98 <__aeabi_cdcmpeq>:
    ed98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ed9a:	f000 ff15 	bl	fbc8 <__ledf2>
    ed9e:	2800      	cmp	r0, #0
    eda0:	d401      	bmi.n	eda6 <__aeabi_cdcmpeq+0xe>
    eda2:	2100      	movs	r1, #0
    eda4:	42c8      	cmn	r0, r1
    eda6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000eda8 <__aeabi_dcmpeq>:
    eda8:	b510      	push	{r4, lr}
    edaa:	f000 fe6f 	bl	fa8c <__eqdf2>
    edae:	4240      	negs	r0, r0
    edb0:	3001      	adds	r0, #1
    edb2:	bd10      	pop	{r4, pc}

0000edb4 <__aeabi_dcmplt>:
    edb4:	b510      	push	{r4, lr}
    edb6:	f000 ff07 	bl	fbc8 <__ledf2>
    edba:	2800      	cmp	r0, #0
    edbc:	db01      	blt.n	edc2 <__aeabi_dcmplt+0xe>
    edbe:	2000      	movs	r0, #0
    edc0:	bd10      	pop	{r4, pc}
    edc2:	2001      	movs	r0, #1
    edc4:	bd10      	pop	{r4, pc}
    edc6:	46c0      	nop			; (mov r8, r8)

0000edc8 <__aeabi_dcmple>:
    edc8:	b510      	push	{r4, lr}
    edca:	f000 fefd 	bl	fbc8 <__ledf2>
    edce:	2800      	cmp	r0, #0
    edd0:	dd01      	ble.n	edd6 <__aeabi_dcmple+0xe>
    edd2:	2000      	movs	r0, #0
    edd4:	bd10      	pop	{r4, pc}
    edd6:	2001      	movs	r0, #1
    edd8:	bd10      	pop	{r4, pc}
    edda:	46c0      	nop			; (mov r8, r8)

0000eddc <__aeabi_dcmpgt>:
    eddc:	b510      	push	{r4, lr}
    edde:	f000 fe8f 	bl	fb00 <__gedf2>
    ede2:	2800      	cmp	r0, #0
    ede4:	dc01      	bgt.n	edea <__aeabi_dcmpgt+0xe>
    ede6:	2000      	movs	r0, #0
    ede8:	bd10      	pop	{r4, pc}
    edea:	2001      	movs	r0, #1
    edec:	bd10      	pop	{r4, pc}
    edee:	46c0      	nop			; (mov r8, r8)

0000edf0 <__aeabi_dcmpge>:
    edf0:	b510      	push	{r4, lr}
    edf2:	f000 fe85 	bl	fb00 <__gedf2>
    edf6:	2800      	cmp	r0, #0
    edf8:	da01      	bge.n	edfe <__aeabi_dcmpge+0xe>
    edfa:	2000      	movs	r0, #0
    edfc:	bd10      	pop	{r4, pc}
    edfe:	2001      	movs	r0, #1
    ee00:	bd10      	pop	{r4, pc}
    ee02:	46c0      	nop			; (mov r8, r8)

0000ee04 <__aeabi_dadd>:
    ee04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee06:	4645      	mov	r5, r8
    ee08:	46de      	mov	lr, fp
    ee0a:	4657      	mov	r7, sl
    ee0c:	464e      	mov	r6, r9
    ee0e:	030c      	lsls	r4, r1, #12
    ee10:	b5e0      	push	{r5, r6, r7, lr}
    ee12:	004e      	lsls	r6, r1, #1
    ee14:	0fc9      	lsrs	r1, r1, #31
    ee16:	4688      	mov	r8, r1
    ee18:	000d      	movs	r5, r1
    ee1a:	0a61      	lsrs	r1, r4, #9
    ee1c:	0f44      	lsrs	r4, r0, #29
    ee1e:	430c      	orrs	r4, r1
    ee20:	00c7      	lsls	r7, r0, #3
    ee22:	0319      	lsls	r1, r3, #12
    ee24:	0058      	lsls	r0, r3, #1
    ee26:	0fdb      	lsrs	r3, r3, #31
    ee28:	469b      	mov	fp, r3
    ee2a:	0a4b      	lsrs	r3, r1, #9
    ee2c:	0f51      	lsrs	r1, r2, #29
    ee2e:	430b      	orrs	r3, r1
    ee30:	0d76      	lsrs	r6, r6, #21
    ee32:	0d40      	lsrs	r0, r0, #21
    ee34:	0019      	movs	r1, r3
    ee36:	00d2      	lsls	r2, r2, #3
    ee38:	45d8      	cmp	r8, fp
    ee3a:	d100      	bne.n	ee3e <__aeabi_dadd+0x3a>
    ee3c:	e0ae      	b.n	ef9c <__aeabi_dadd+0x198>
    ee3e:	1a35      	subs	r5, r6, r0
    ee40:	2d00      	cmp	r5, #0
    ee42:	dc00      	bgt.n	ee46 <__aeabi_dadd+0x42>
    ee44:	e0f6      	b.n	f034 <__aeabi_dadd+0x230>
    ee46:	2800      	cmp	r0, #0
    ee48:	d10f      	bne.n	ee6a <__aeabi_dadd+0x66>
    ee4a:	4313      	orrs	r3, r2
    ee4c:	d100      	bne.n	ee50 <__aeabi_dadd+0x4c>
    ee4e:	e0db      	b.n	f008 <__aeabi_dadd+0x204>
    ee50:	1e6b      	subs	r3, r5, #1
    ee52:	2b00      	cmp	r3, #0
    ee54:	d000      	beq.n	ee58 <__aeabi_dadd+0x54>
    ee56:	e137      	b.n	f0c8 <__aeabi_dadd+0x2c4>
    ee58:	1aba      	subs	r2, r7, r2
    ee5a:	4297      	cmp	r7, r2
    ee5c:	41bf      	sbcs	r7, r7
    ee5e:	1a64      	subs	r4, r4, r1
    ee60:	427f      	negs	r7, r7
    ee62:	1be4      	subs	r4, r4, r7
    ee64:	2601      	movs	r6, #1
    ee66:	0017      	movs	r7, r2
    ee68:	e024      	b.n	eeb4 <__aeabi_dadd+0xb0>
    ee6a:	4bc6      	ldr	r3, [pc, #792]	; (f184 <__aeabi_dadd+0x380>)
    ee6c:	429e      	cmp	r6, r3
    ee6e:	d04d      	beq.n	ef0c <__aeabi_dadd+0x108>
    ee70:	2380      	movs	r3, #128	; 0x80
    ee72:	041b      	lsls	r3, r3, #16
    ee74:	4319      	orrs	r1, r3
    ee76:	2d38      	cmp	r5, #56	; 0x38
    ee78:	dd00      	ble.n	ee7c <__aeabi_dadd+0x78>
    ee7a:	e107      	b.n	f08c <__aeabi_dadd+0x288>
    ee7c:	2d1f      	cmp	r5, #31
    ee7e:	dd00      	ble.n	ee82 <__aeabi_dadd+0x7e>
    ee80:	e138      	b.n	f0f4 <__aeabi_dadd+0x2f0>
    ee82:	2020      	movs	r0, #32
    ee84:	1b43      	subs	r3, r0, r5
    ee86:	469a      	mov	sl, r3
    ee88:	000b      	movs	r3, r1
    ee8a:	4650      	mov	r0, sl
    ee8c:	4083      	lsls	r3, r0
    ee8e:	4699      	mov	r9, r3
    ee90:	0013      	movs	r3, r2
    ee92:	4648      	mov	r0, r9
    ee94:	40eb      	lsrs	r3, r5
    ee96:	4318      	orrs	r0, r3
    ee98:	0003      	movs	r3, r0
    ee9a:	4650      	mov	r0, sl
    ee9c:	4082      	lsls	r2, r0
    ee9e:	1e50      	subs	r0, r2, #1
    eea0:	4182      	sbcs	r2, r0
    eea2:	40e9      	lsrs	r1, r5
    eea4:	431a      	orrs	r2, r3
    eea6:	1aba      	subs	r2, r7, r2
    eea8:	1a61      	subs	r1, r4, r1
    eeaa:	4297      	cmp	r7, r2
    eeac:	41a4      	sbcs	r4, r4
    eeae:	0017      	movs	r7, r2
    eeb0:	4264      	negs	r4, r4
    eeb2:	1b0c      	subs	r4, r1, r4
    eeb4:	0223      	lsls	r3, r4, #8
    eeb6:	d562      	bpl.n	ef7e <__aeabi_dadd+0x17a>
    eeb8:	0264      	lsls	r4, r4, #9
    eeba:	0a65      	lsrs	r5, r4, #9
    eebc:	2d00      	cmp	r5, #0
    eebe:	d100      	bne.n	eec2 <__aeabi_dadd+0xbe>
    eec0:	e0df      	b.n	f082 <__aeabi_dadd+0x27e>
    eec2:	0028      	movs	r0, r5
    eec4:	f001 fd04 	bl	108d0 <__clzsi2>
    eec8:	0003      	movs	r3, r0
    eeca:	3b08      	subs	r3, #8
    eecc:	2b1f      	cmp	r3, #31
    eece:	dd00      	ble.n	eed2 <__aeabi_dadd+0xce>
    eed0:	e0d2      	b.n	f078 <__aeabi_dadd+0x274>
    eed2:	2220      	movs	r2, #32
    eed4:	003c      	movs	r4, r7
    eed6:	1ad2      	subs	r2, r2, r3
    eed8:	409d      	lsls	r5, r3
    eeda:	40d4      	lsrs	r4, r2
    eedc:	409f      	lsls	r7, r3
    eede:	4325      	orrs	r5, r4
    eee0:	429e      	cmp	r6, r3
    eee2:	dd00      	ble.n	eee6 <__aeabi_dadd+0xe2>
    eee4:	e0c4      	b.n	f070 <__aeabi_dadd+0x26c>
    eee6:	1b9e      	subs	r6, r3, r6
    eee8:	1c73      	adds	r3, r6, #1
    eeea:	2b1f      	cmp	r3, #31
    eeec:	dd00      	ble.n	eef0 <__aeabi_dadd+0xec>
    eeee:	e0f1      	b.n	f0d4 <__aeabi_dadd+0x2d0>
    eef0:	2220      	movs	r2, #32
    eef2:	0038      	movs	r0, r7
    eef4:	0029      	movs	r1, r5
    eef6:	1ad2      	subs	r2, r2, r3
    eef8:	40d8      	lsrs	r0, r3
    eefa:	4091      	lsls	r1, r2
    eefc:	4097      	lsls	r7, r2
    eefe:	002c      	movs	r4, r5
    ef00:	4301      	orrs	r1, r0
    ef02:	1e78      	subs	r0, r7, #1
    ef04:	4187      	sbcs	r7, r0
    ef06:	40dc      	lsrs	r4, r3
    ef08:	2600      	movs	r6, #0
    ef0a:	430f      	orrs	r7, r1
    ef0c:	077b      	lsls	r3, r7, #29
    ef0e:	d009      	beq.n	ef24 <__aeabi_dadd+0x120>
    ef10:	230f      	movs	r3, #15
    ef12:	403b      	ands	r3, r7
    ef14:	2b04      	cmp	r3, #4
    ef16:	d005      	beq.n	ef24 <__aeabi_dadd+0x120>
    ef18:	1d3b      	adds	r3, r7, #4
    ef1a:	42bb      	cmp	r3, r7
    ef1c:	41bf      	sbcs	r7, r7
    ef1e:	427f      	negs	r7, r7
    ef20:	19e4      	adds	r4, r4, r7
    ef22:	001f      	movs	r7, r3
    ef24:	0223      	lsls	r3, r4, #8
    ef26:	d52c      	bpl.n	ef82 <__aeabi_dadd+0x17e>
    ef28:	4b96      	ldr	r3, [pc, #600]	; (f184 <__aeabi_dadd+0x380>)
    ef2a:	3601      	adds	r6, #1
    ef2c:	429e      	cmp	r6, r3
    ef2e:	d100      	bne.n	ef32 <__aeabi_dadd+0x12e>
    ef30:	e09a      	b.n	f068 <__aeabi_dadd+0x264>
    ef32:	4645      	mov	r5, r8
    ef34:	4b94      	ldr	r3, [pc, #592]	; (f188 <__aeabi_dadd+0x384>)
    ef36:	08ff      	lsrs	r7, r7, #3
    ef38:	401c      	ands	r4, r3
    ef3a:	0760      	lsls	r0, r4, #29
    ef3c:	0576      	lsls	r6, r6, #21
    ef3e:	0264      	lsls	r4, r4, #9
    ef40:	4307      	orrs	r7, r0
    ef42:	0b24      	lsrs	r4, r4, #12
    ef44:	0d76      	lsrs	r6, r6, #21
    ef46:	2100      	movs	r1, #0
    ef48:	0324      	lsls	r4, r4, #12
    ef4a:	0b23      	lsrs	r3, r4, #12
    ef4c:	0d0c      	lsrs	r4, r1, #20
    ef4e:	4a8f      	ldr	r2, [pc, #572]	; (f18c <__aeabi_dadd+0x388>)
    ef50:	0524      	lsls	r4, r4, #20
    ef52:	431c      	orrs	r4, r3
    ef54:	4014      	ands	r4, r2
    ef56:	0533      	lsls	r3, r6, #20
    ef58:	4323      	orrs	r3, r4
    ef5a:	005b      	lsls	r3, r3, #1
    ef5c:	07ed      	lsls	r5, r5, #31
    ef5e:	085b      	lsrs	r3, r3, #1
    ef60:	432b      	orrs	r3, r5
    ef62:	0038      	movs	r0, r7
    ef64:	0019      	movs	r1, r3
    ef66:	bc3c      	pop	{r2, r3, r4, r5}
    ef68:	4690      	mov	r8, r2
    ef6a:	4699      	mov	r9, r3
    ef6c:	46a2      	mov	sl, r4
    ef6e:	46ab      	mov	fp, r5
    ef70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef72:	4664      	mov	r4, ip
    ef74:	4304      	orrs	r4, r0
    ef76:	d100      	bne.n	ef7a <__aeabi_dadd+0x176>
    ef78:	e211      	b.n	f39e <__aeabi_dadd+0x59a>
    ef7a:	0004      	movs	r4, r0
    ef7c:	4667      	mov	r7, ip
    ef7e:	077b      	lsls	r3, r7, #29
    ef80:	d1c6      	bne.n	ef10 <__aeabi_dadd+0x10c>
    ef82:	4645      	mov	r5, r8
    ef84:	0760      	lsls	r0, r4, #29
    ef86:	08ff      	lsrs	r7, r7, #3
    ef88:	4307      	orrs	r7, r0
    ef8a:	08e4      	lsrs	r4, r4, #3
    ef8c:	4b7d      	ldr	r3, [pc, #500]	; (f184 <__aeabi_dadd+0x380>)
    ef8e:	429e      	cmp	r6, r3
    ef90:	d030      	beq.n	eff4 <__aeabi_dadd+0x1f0>
    ef92:	0324      	lsls	r4, r4, #12
    ef94:	0576      	lsls	r6, r6, #21
    ef96:	0b24      	lsrs	r4, r4, #12
    ef98:	0d76      	lsrs	r6, r6, #21
    ef9a:	e7d4      	b.n	ef46 <__aeabi_dadd+0x142>
    ef9c:	1a33      	subs	r3, r6, r0
    ef9e:	469a      	mov	sl, r3
    efa0:	2b00      	cmp	r3, #0
    efa2:	dd78      	ble.n	f096 <__aeabi_dadd+0x292>
    efa4:	2800      	cmp	r0, #0
    efa6:	d031      	beq.n	f00c <__aeabi_dadd+0x208>
    efa8:	4876      	ldr	r0, [pc, #472]	; (f184 <__aeabi_dadd+0x380>)
    efaa:	4286      	cmp	r6, r0
    efac:	d0ae      	beq.n	ef0c <__aeabi_dadd+0x108>
    efae:	2080      	movs	r0, #128	; 0x80
    efb0:	0400      	lsls	r0, r0, #16
    efb2:	4301      	orrs	r1, r0
    efb4:	4653      	mov	r3, sl
    efb6:	2b38      	cmp	r3, #56	; 0x38
    efb8:	dc00      	bgt.n	efbc <__aeabi_dadd+0x1b8>
    efba:	e0e9      	b.n	f190 <__aeabi_dadd+0x38c>
    efbc:	430a      	orrs	r2, r1
    efbe:	1e51      	subs	r1, r2, #1
    efc0:	418a      	sbcs	r2, r1
    efc2:	2100      	movs	r1, #0
    efc4:	19d2      	adds	r2, r2, r7
    efc6:	42ba      	cmp	r2, r7
    efc8:	41bf      	sbcs	r7, r7
    efca:	1909      	adds	r1, r1, r4
    efcc:	427c      	negs	r4, r7
    efce:	0017      	movs	r7, r2
    efd0:	190c      	adds	r4, r1, r4
    efd2:	0223      	lsls	r3, r4, #8
    efd4:	d5d3      	bpl.n	ef7e <__aeabi_dadd+0x17a>
    efd6:	4b6b      	ldr	r3, [pc, #428]	; (f184 <__aeabi_dadd+0x380>)
    efd8:	3601      	adds	r6, #1
    efda:	429e      	cmp	r6, r3
    efdc:	d100      	bne.n	efe0 <__aeabi_dadd+0x1dc>
    efde:	e13a      	b.n	f256 <__aeabi_dadd+0x452>
    efe0:	2001      	movs	r0, #1
    efe2:	4b69      	ldr	r3, [pc, #420]	; (f188 <__aeabi_dadd+0x384>)
    efe4:	401c      	ands	r4, r3
    efe6:	087b      	lsrs	r3, r7, #1
    efe8:	4007      	ands	r7, r0
    efea:	431f      	orrs	r7, r3
    efec:	07e0      	lsls	r0, r4, #31
    efee:	4307      	orrs	r7, r0
    eff0:	0864      	lsrs	r4, r4, #1
    eff2:	e78b      	b.n	ef0c <__aeabi_dadd+0x108>
    eff4:	0023      	movs	r3, r4
    eff6:	433b      	orrs	r3, r7
    eff8:	d100      	bne.n	effc <__aeabi_dadd+0x1f8>
    effa:	e1cb      	b.n	f394 <__aeabi_dadd+0x590>
    effc:	2280      	movs	r2, #128	; 0x80
    effe:	0312      	lsls	r2, r2, #12
    f000:	4314      	orrs	r4, r2
    f002:	0324      	lsls	r4, r4, #12
    f004:	0b24      	lsrs	r4, r4, #12
    f006:	e79e      	b.n	ef46 <__aeabi_dadd+0x142>
    f008:	002e      	movs	r6, r5
    f00a:	e77f      	b.n	ef0c <__aeabi_dadd+0x108>
    f00c:	0008      	movs	r0, r1
    f00e:	4310      	orrs	r0, r2
    f010:	d100      	bne.n	f014 <__aeabi_dadd+0x210>
    f012:	e0b4      	b.n	f17e <__aeabi_dadd+0x37a>
    f014:	1e58      	subs	r0, r3, #1
    f016:	2800      	cmp	r0, #0
    f018:	d000      	beq.n	f01c <__aeabi_dadd+0x218>
    f01a:	e0de      	b.n	f1da <__aeabi_dadd+0x3d6>
    f01c:	18ba      	adds	r2, r7, r2
    f01e:	42ba      	cmp	r2, r7
    f020:	419b      	sbcs	r3, r3
    f022:	1864      	adds	r4, r4, r1
    f024:	425b      	negs	r3, r3
    f026:	18e4      	adds	r4, r4, r3
    f028:	0017      	movs	r7, r2
    f02a:	2601      	movs	r6, #1
    f02c:	0223      	lsls	r3, r4, #8
    f02e:	d5a6      	bpl.n	ef7e <__aeabi_dadd+0x17a>
    f030:	2602      	movs	r6, #2
    f032:	e7d5      	b.n	efe0 <__aeabi_dadd+0x1dc>
    f034:	2d00      	cmp	r5, #0
    f036:	d16e      	bne.n	f116 <__aeabi_dadd+0x312>
    f038:	1c70      	adds	r0, r6, #1
    f03a:	0540      	lsls	r0, r0, #21
    f03c:	0d40      	lsrs	r0, r0, #21
    f03e:	2801      	cmp	r0, #1
    f040:	dc00      	bgt.n	f044 <__aeabi_dadd+0x240>
    f042:	e0f9      	b.n	f238 <__aeabi_dadd+0x434>
    f044:	1ab8      	subs	r0, r7, r2
    f046:	4684      	mov	ip, r0
    f048:	4287      	cmp	r7, r0
    f04a:	4180      	sbcs	r0, r0
    f04c:	1ae5      	subs	r5, r4, r3
    f04e:	4240      	negs	r0, r0
    f050:	1a2d      	subs	r5, r5, r0
    f052:	0228      	lsls	r0, r5, #8
    f054:	d400      	bmi.n	f058 <__aeabi_dadd+0x254>
    f056:	e089      	b.n	f16c <__aeabi_dadd+0x368>
    f058:	1bd7      	subs	r7, r2, r7
    f05a:	42ba      	cmp	r2, r7
    f05c:	4192      	sbcs	r2, r2
    f05e:	1b1c      	subs	r4, r3, r4
    f060:	4252      	negs	r2, r2
    f062:	1aa5      	subs	r5, r4, r2
    f064:	46d8      	mov	r8, fp
    f066:	e729      	b.n	eebc <__aeabi_dadd+0xb8>
    f068:	4645      	mov	r5, r8
    f06a:	2400      	movs	r4, #0
    f06c:	2700      	movs	r7, #0
    f06e:	e76a      	b.n	ef46 <__aeabi_dadd+0x142>
    f070:	4c45      	ldr	r4, [pc, #276]	; (f188 <__aeabi_dadd+0x384>)
    f072:	1af6      	subs	r6, r6, r3
    f074:	402c      	ands	r4, r5
    f076:	e749      	b.n	ef0c <__aeabi_dadd+0x108>
    f078:	003d      	movs	r5, r7
    f07a:	3828      	subs	r0, #40	; 0x28
    f07c:	4085      	lsls	r5, r0
    f07e:	2700      	movs	r7, #0
    f080:	e72e      	b.n	eee0 <__aeabi_dadd+0xdc>
    f082:	0038      	movs	r0, r7
    f084:	f001 fc24 	bl	108d0 <__clzsi2>
    f088:	3020      	adds	r0, #32
    f08a:	e71d      	b.n	eec8 <__aeabi_dadd+0xc4>
    f08c:	430a      	orrs	r2, r1
    f08e:	1e51      	subs	r1, r2, #1
    f090:	418a      	sbcs	r2, r1
    f092:	2100      	movs	r1, #0
    f094:	e707      	b.n	eea6 <__aeabi_dadd+0xa2>
    f096:	2b00      	cmp	r3, #0
    f098:	d000      	beq.n	f09c <__aeabi_dadd+0x298>
    f09a:	e0f3      	b.n	f284 <__aeabi_dadd+0x480>
    f09c:	1c70      	adds	r0, r6, #1
    f09e:	0543      	lsls	r3, r0, #21
    f0a0:	0d5b      	lsrs	r3, r3, #21
    f0a2:	2b01      	cmp	r3, #1
    f0a4:	dc00      	bgt.n	f0a8 <__aeabi_dadd+0x2a4>
    f0a6:	e0ad      	b.n	f204 <__aeabi_dadd+0x400>
    f0a8:	4b36      	ldr	r3, [pc, #216]	; (f184 <__aeabi_dadd+0x380>)
    f0aa:	4298      	cmp	r0, r3
    f0ac:	d100      	bne.n	f0b0 <__aeabi_dadd+0x2ac>
    f0ae:	e0d1      	b.n	f254 <__aeabi_dadd+0x450>
    f0b0:	18ba      	adds	r2, r7, r2
    f0b2:	42ba      	cmp	r2, r7
    f0b4:	41bf      	sbcs	r7, r7
    f0b6:	1864      	adds	r4, r4, r1
    f0b8:	427f      	negs	r7, r7
    f0ba:	19e4      	adds	r4, r4, r7
    f0bc:	07e7      	lsls	r7, r4, #31
    f0be:	0852      	lsrs	r2, r2, #1
    f0c0:	4317      	orrs	r7, r2
    f0c2:	0864      	lsrs	r4, r4, #1
    f0c4:	0006      	movs	r6, r0
    f0c6:	e721      	b.n	ef0c <__aeabi_dadd+0x108>
    f0c8:	482e      	ldr	r0, [pc, #184]	; (f184 <__aeabi_dadd+0x380>)
    f0ca:	4285      	cmp	r5, r0
    f0cc:	d100      	bne.n	f0d0 <__aeabi_dadd+0x2cc>
    f0ce:	e093      	b.n	f1f8 <__aeabi_dadd+0x3f4>
    f0d0:	001d      	movs	r5, r3
    f0d2:	e6d0      	b.n	ee76 <__aeabi_dadd+0x72>
    f0d4:	0029      	movs	r1, r5
    f0d6:	3e1f      	subs	r6, #31
    f0d8:	40f1      	lsrs	r1, r6
    f0da:	2b20      	cmp	r3, #32
    f0dc:	d100      	bne.n	f0e0 <__aeabi_dadd+0x2dc>
    f0de:	e08d      	b.n	f1fc <__aeabi_dadd+0x3f8>
    f0e0:	2240      	movs	r2, #64	; 0x40
    f0e2:	1ad3      	subs	r3, r2, r3
    f0e4:	409d      	lsls	r5, r3
    f0e6:	432f      	orrs	r7, r5
    f0e8:	1e7d      	subs	r5, r7, #1
    f0ea:	41af      	sbcs	r7, r5
    f0ec:	2400      	movs	r4, #0
    f0ee:	430f      	orrs	r7, r1
    f0f0:	2600      	movs	r6, #0
    f0f2:	e744      	b.n	ef7e <__aeabi_dadd+0x17a>
    f0f4:	002b      	movs	r3, r5
    f0f6:	0008      	movs	r0, r1
    f0f8:	3b20      	subs	r3, #32
    f0fa:	40d8      	lsrs	r0, r3
    f0fc:	0003      	movs	r3, r0
    f0fe:	2d20      	cmp	r5, #32
    f100:	d100      	bne.n	f104 <__aeabi_dadd+0x300>
    f102:	e07d      	b.n	f200 <__aeabi_dadd+0x3fc>
    f104:	2040      	movs	r0, #64	; 0x40
    f106:	1b45      	subs	r5, r0, r5
    f108:	40a9      	lsls	r1, r5
    f10a:	430a      	orrs	r2, r1
    f10c:	1e51      	subs	r1, r2, #1
    f10e:	418a      	sbcs	r2, r1
    f110:	2100      	movs	r1, #0
    f112:	431a      	orrs	r2, r3
    f114:	e6c7      	b.n	eea6 <__aeabi_dadd+0xa2>
    f116:	2e00      	cmp	r6, #0
    f118:	d050      	beq.n	f1bc <__aeabi_dadd+0x3b8>
    f11a:	4e1a      	ldr	r6, [pc, #104]	; (f184 <__aeabi_dadd+0x380>)
    f11c:	42b0      	cmp	r0, r6
    f11e:	d057      	beq.n	f1d0 <__aeabi_dadd+0x3cc>
    f120:	2680      	movs	r6, #128	; 0x80
    f122:	426b      	negs	r3, r5
    f124:	4699      	mov	r9, r3
    f126:	0436      	lsls	r6, r6, #16
    f128:	4334      	orrs	r4, r6
    f12a:	464b      	mov	r3, r9
    f12c:	2b38      	cmp	r3, #56	; 0x38
    f12e:	dd00      	ble.n	f132 <__aeabi_dadd+0x32e>
    f130:	e0d6      	b.n	f2e0 <__aeabi_dadd+0x4dc>
    f132:	2b1f      	cmp	r3, #31
    f134:	dd00      	ble.n	f138 <__aeabi_dadd+0x334>
    f136:	e135      	b.n	f3a4 <__aeabi_dadd+0x5a0>
    f138:	2620      	movs	r6, #32
    f13a:	1af5      	subs	r5, r6, r3
    f13c:	0026      	movs	r6, r4
    f13e:	40ae      	lsls	r6, r5
    f140:	46b2      	mov	sl, r6
    f142:	003e      	movs	r6, r7
    f144:	40de      	lsrs	r6, r3
    f146:	46ac      	mov	ip, r5
    f148:	0035      	movs	r5, r6
    f14a:	4656      	mov	r6, sl
    f14c:	432e      	orrs	r6, r5
    f14e:	4665      	mov	r5, ip
    f150:	40af      	lsls	r7, r5
    f152:	1e7d      	subs	r5, r7, #1
    f154:	41af      	sbcs	r7, r5
    f156:	40dc      	lsrs	r4, r3
    f158:	4337      	orrs	r7, r6
    f15a:	1bd7      	subs	r7, r2, r7
    f15c:	42ba      	cmp	r2, r7
    f15e:	4192      	sbcs	r2, r2
    f160:	1b0c      	subs	r4, r1, r4
    f162:	4252      	negs	r2, r2
    f164:	1aa4      	subs	r4, r4, r2
    f166:	0006      	movs	r6, r0
    f168:	46d8      	mov	r8, fp
    f16a:	e6a3      	b.n	eeb4 <__aeabi_dadd+0xb0>
    f16c:	4664      	mov	r4, ip
    f16e:	4667      	mov	r7, ip
    f170:	432c      	orrs	r4, r5
    f172:	d000      	beq.n	f176 <__aeabi_dadd+0x372>
    f174:	e6a2      	b.n	eebc <__aeabi_dadd+0xb8>
    f176:	2500      	movs	r5, #0
    f178:	2600      	movs	r6, #0
    f17a:	2700      	movs	r7, #0
    f17c:	e706      	b.n	ef8c <__aeabi_dadd+0x188>
    f17e:	001e      	movs	r6, r3
    f180:	e6c4      	b.n	ef0c <__aeabi_dadd+0x108>
    f182:	46c0      	nop			; (mov r8, r8)
    f184:	000007ff 	.word	0x000007ff
    f188:	ff7fffff 	.word	0xff7fffff
    f18c:	800fffff 	.word	0x800fffff
    f190:	2b1f      	cmp	r3, #31
    f192:	dc63      	bgt.n	f25c <__aeabi_dadd+0x458>
    f194:	2020      	movs	r0, #32
    f196:	1ac3      	subs	r3, r0, r3
    f198:	0008      	movs	r0, r1
    f19a:	4098      	lsls	r0, r3
    f19c:	469c      	mov	ip, r3
    f19e:	4683      	mov	fp, r0
    f1a0:	4653      	mov	r3, sl
    f1a2:	0010      	movs	r0, r2
    f1a4:	40d8      	lsrs	r0, r3
    f1a6:	0003      	movs	r3, r0
    f1a8:	4658      	mov	r0, fp
    f1aa:	4318      	orrs	r0, r3
    f1ac:	4663      	mov	r3, ip
    f1ae:	409a      	lsls	r2, r3
    f1b0:	1e53      	subs	r3, r2, #1
    f1b2:	419a      	sbcs	r2, r3
    f1b4:	4653      	mov	r3, sl
    f1b6:	4302      	orrs	r2, r0
    f1b8:	40d9      	lsrs	r1, r3
    f1ba:	e703      	b.n	efc4 <__aeabi_dadd+0x1c0>
    f1bc:	0026      	movs	r6, r4
    f1be:	433e      	orrs	r6, r7
    f1c0:	d006      	beq.n	f1d0 <__aeabi_dadd+0x3cc>
    f1c2:	43eb      	mvns	r3, r5
    f1c4:	4699      	mov	r9, r3
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	d0c7      	beq.n	f15a <__aeabi_dadd+0x356>
    f1ca:	4e94      	ldr	r6, [pc, #592]	; (f41c <__aeabi_dadd+0x618>)
    f1cc:	42b0      	cmp	r0, r6
    f1ce:	d1ac      	bne.n	f12a <__aeabi_dadd+0x326>
    f1d0:	000c      	movs	r4, r1
    f1d2:	0017      	movs	r7, r2
    f1d4:	0006      	movs	r6, r0
    f1d6:	46d8      	mov	r8, fp
    f1d8:	e698      	b.n	ef0c <__aeabi_dadd+0x108>
    f1da:	4b90      	ldr	r3, [pc, #576]	; (f41c <__aeabi_dadd+0x618>)
    f1dc:	459a      	cmp	sl, r3
    f1de:	d00b      	beq.n	f1f8 <__aeabi_dadd+0x3f4>
    f1e0:	4682      	mov	sl, r0
    f1e2:	e6e7      	b.n	efb4 <__aeabi_dadd+0x1b0>
    f1e4:	2800      	cmp	r0, #0
    f1e6:	d000      	beq.n	f1ea <__aeabi_dadd+0x3e6>
    f1e8:	e09e      	b.n	f328 <__aeabi_dadd+0x524>
    f1ea:	0018      	movs	r0, r3
    f1ec:	4310      	orrs	r0, r2
    f1ee:	d100      	bne.n	f1f2 <__aeabi_dadd+0x3ee>
    f1f0:	e0e9      	b.n	f3c6 <__aeabi_dadd+0x5c2>
    f1f2:	001c      	movs	r4, r3
    f1f4:	0017      	movs	r7, r2
    f1f6:	46d8      	mov	r8, fp
    f1f8:	4e88      	ldr	r6, [pc, #544]	; (f41c <__aeabi_dadd+0x618>)
    f1fa:	e687      	b.n	ef0c <__aeabi_dadd+0x108>
    f1fc:	2500      	movs	r5, #0
    f1fe:	e772      	b.n	f0e6 <__aeabi_dadd+0x2e2>
    f200:	2100      	movs	r1, #0
    f202:	e782      	b.n	f10a <__aeabi_dadd+0x306>
    f204:	0023      	movs	r3, r4
    f206:	433b      	orrs	r3, r7
    f208:	2e00      	cmp	r6, #0
    f20a:	d000      	beq.n	f20e <__aeabi_dadd+0x40a>
    f20c:	e0ab      	b.n	f366 <__aeabi_dadd+0x562>
    f20e:	2b00      	cmp	r3, #0
    f210:	d100      	bne.n	f214 <__aeabi_dadd+0x410>
    f212:	e0e7      	b.n	f3e4 <__aeabi_dadd+0x5e0>
    f214:	000b      	movs	r3, r1
    f216:	4313      	orrs	r3, r2
    f218:	d100      	bne.n	f21c <__aeabi_dadd+0x418>
    f21a:	e677      	b.n	ef0c <__aeabi_dadd+0x108>
    f21c:	18ba      	adds	r2, r7, r2
    f21e:	42ba      	cmp	r2, r7
    f220:	41bf      	sbcs	r7, r7
    f222:	1864      	adds	r4, r4, r1
    f224:	427f      	negs	r7, r7
    f226:	19e4      	adds	r4, r4, r7
    f228:	0223      	lsls	r3, r4, #8
    f22a:	d400      	bmi.n	f22e <__aeabi_dadd+0x42a>
    f22c:	e0f2      	b.n	f414 <__aeabi_dadd+0x610>
    f22e:	4b7c      	ldr	r3, [pc, #496]	; (f420 <__aeabi_dadd+0x61c>)
    f230:	0017      	movs	r7, r2
    f232:	401c      	ands	r4, r3
    f234:	0006      	movs	r6, r0
    f236:	e669      	b.n	ef0c <__aeabi_dadd+0x108>
    f238:	0020      	movs	r0, r4
    f23a:	4338      	orrs	r0, r7
    f23c:	2e00      	cmp	r6, #0
    f23e:	d1d1      	bne.n	f1e4 <__aeabi_dadd+0x3e0>
    f240:	2800      	cmp	r0, #0
    f242:	d15b      	bne.n	f2fc <__aeabi_dadd+0x4f8>
    f244:	001c      	movs	r4, r3
    f246:	4314      	orrs	r4, r2
    f248:	d100      	bne.n	f24c <__aeabi_dadd+0x448>
    f24a:	e0a8      	b.n	f39e <__aeabi_dadd+0x59a>
    f24c:	001c      	movs	r4, r3
    f24e:	0017      	movs	r7, r2
    f250:	46d8      	mov	r8, fp
    f252:	e65b      	b.n	ef0c <__aeabi_dadd+0x108>
    f254:	0006      	movs	r6, r0
    f256:	2400      	movs	r4, #0
    f258:	2700      	movs	r7, #0
    f25a:	e697      	b.n	ef8c <__aeabi_dadd+0x188>
    f25c:	4650      	mov	r0, sl
    f25e:	000b      	movs	r3, r1
    f260:	3820      	subs	r0, #32
    f262:	40c3      	lsrs	r3, r0
    f264:	4699      	mov	r9, r3
    f266:	4653      	mov	r3, sl
    f268:	2b20      	cmp	r3, #32
    f26a:	d100      	bne.n	f26e <__aeabi_dadd+0x46a>
    f26c:	e095      	b.n	f39a <__aeabi_dadd+0x596>
    f26e:	2340      	movs	r3, #64	; 0x40
    f270:	4650      	mov	r0, sl
    f272:	1a1b      	subs	r3, r3, r0
    f274:	4099      	lsls	r1, r3
    f276:	430a      	orrs	r2, r1
    f278:	1e51      	subs	r1, r2, #1
    f27a:	418a      	sbcs	r2, r1
    f27c:	464b      	mov	r3, r9
    f27e:	2100      	movs	r1, #0
    f280:	431a      	orrs	r2, r3
    f282:	e69f      	b.n	efc4 <__aeabi_dadd+0x1c0>
    f284:	2e00      	cmp	r6, #0
    f286:	d130      	bne.n	f2ea <__aeabi_dadd+0x4e6>
    f288:	0026      	movs	r6, r4
    f28a:	433e      	orrs	r6, r7
    f28c:	d067      	beq.n	f35e <__aeabi_dadd+0x55a>
    f28e:	43db      	mvns	r3, r3
    f290:	469a      	mov	sl, r3
    f292:	2b00      	cmp	r3, #0
    f294:	d01c      	beq.n	f2d0 <__aeabi_dadd+0x4cc>
    f296:	4e61      	ldr	r6, [pc, #388]	; (f41c <__aeabi_dadd+0x618>)
    f298:	42b0      	cmp	r0, r6
    f29a:	d060      	beq.n	f35e <__aeabi_dadd+0x55a>
    f29c:	4653      	mov	r3, sl
    f29e:	2b38      	cmp	r3, #56	; 0x38
    f2a0:	dd00      	ble.n	f2a4 <__aeabi_dadd+0x4a0>
    f2a2:	e096      	b.n	f3d2 <__aeabi_dadd+0x5ce>
    f2a4:	2b1f      	cmp	r3, #31
    f2a6:	dd00      	ble.n	f2aa <__aeabi_dadd+0x4a6>
    f2a8:	e09f      	b.n	f3ea <__aeabi_dadd+0x5e6>
    f2aa:	2620      	movs	r6, #32
    f2ac:	1af3      	subs	r3, r6, r3
    f2ae:	0026      	movs	r6, r4
    f2b0:	409e      	lsls	r6, r3
    f2b2:	469c      	mov	ip, r3
    f2b4:	46b3      	mov	fp, r6
    f2b6:	4653      	mov	r3, sl
    f2b8:	003e      	movs	r6, r7
    f2ba:	40de      	lsrs	r6, r3
    f2bc:	0033      	movs	r3, r6
    f2be:	465e      	mov	r6, fp
    f2c0:	431e      	orrs	r6, r3
    f2c2:	4663      	mov	r3, ip
    f2c4:	409f      	lsls	r7, r3
    f2c6:	1e7b      	subs	r3, r7, #1
    f2c8:	419f      	sbcs	r7, r3
    f2ca:	4653      	mov	r3, sl
    f2cc:	40dc      	lsrs	r4, r3
    f2ce:	4337      	orrs	r7, r6
    f2d0:	18bf      	adds	r7, r7, r2
    f2d2:	4297      	cmp	r7, r2
    f2d4:	4192      	sbcs	r2, r2
    f2d6:	1864      	adds	r4, r4, r1
    f2d8:	4252      	negs	r2, r2
    f2da:	18a4      	adds	r4, r4, r2
    f2dc:	0006      	movs	r6, r0
    f2de:	e678      	b.n	efd2 <__aeabi_dadd+0x1ce>
    f2e0:	4327      	orrs	r7, r4
    f2e2:	1e7c      	subs	r4, r7, #1
    f2e4:	41a7      	sbcs	r7, r4
    f2e6:	2400      	movs	r4, #0
    f2e8:	e737      	b.n	f15a <__aeabi_dadd+0x356>
    f2ea:	4e4c      	ldr	r6, [pc, #304]	; (f41c <__aeabi_dadd+0x618>)
    f2ec:	42b0      	cmp	r0, r6
    f2ee:	d036      	beq.n	f35e <__aeabi_dadd+0x55a>
    f2f0:	2680      	movs	r6, #128	; 0x80
    f2f2:	425b      	negs	r3, r3
    f2f4:	0436      	lsls	r6, r6, #16
    f2f6:	469a      	mov	sl, r3
    f2f8:	4334      	orrs	r4, r6
    f2fa:	e7cf      	b.n	f29c <__aeabi_dadd+0x498>
    f2fc:	0018      	movs	r0, r3
    f2fe:	4310      	orrs	r0, r2
    f300:	d100      	bne.n	f304 <__aeabi_dadd+0x500>
    f302:	e603      	b.n	ef0c <__aeabi_dadd+0x108>
    f304:	1ab8      	subs	r0, r7, r2
    f306:	4684      	mov	ip, r0
    f308:	4567      	cmp	r7, ip
    f30a:	41ad      	sbcs	r5, r5
    f30c:	1ae0      	subs	r0, r4, r3
    f30e:	426d      	negs	r5, r5
    f310:	1b40      	subs	r0, r0, r5
    f312:	0205      	lsls	r5, r0, #8
    f314:	d400      	bmi.n	f318 <__aeabi_dadd+0x514>
    f316:	e62c      	b.n	ef72 <__aeabi_dadd+0x16e>
    f318:	1bd7      	subs	r7, r2, r7
    f31a:	42ba      	cmp	r2, r7
    f31c:	4192      	sbcs	r2, r2
    f31e:	1b1c      	subs	r4, r3, r4
    f320:	4252      	negs	r2, r2
    f322:	1aa4      	subs	r4, r4, r2
    f324:	46d8      	mov	r8, fp
    f326:	e5f1      	b.n	ef0c <__aeabi_dadd+0x108>
    f328:	0018      	movs	r0, r3
    f32a:	4310      	orrs	r0, r2
    f32c:	d100      	bne.n	f330 <__aeabi_dadd+0x52c>
    f32e:	e763      	b.n	f1f8 <__aeabi_dadd+0x3f4>
    f330:	08f8      	lsrs	r0, r7, #3
    f332:	0767      	lsls	r7, r4, #29
    f334:	4307      	orrs	r7, r0
    f336:	2080      	movs	r0, #128	; 0x80
    f338:	08e4      	lsrs	r4, r4, #3
    f33a:	0300      	lsls	r0, r0, #12
    f33c:	4204      	tst	r4, r0
    f33e:	d008      	beq.n	f352 <__aeabi_dadd+0x54e>
    f340:	08dd      	lsrs	r5, r3, #3
    f342:	4205      	tst	r5, r0
    f344:	d105      	bne.n	f352 <__aeabi_dadd+0x54e>
    f346:	08d2      	lsrs	r2, r2, #3
    f348:	0759      	lsls	r1, r3, #29
    f34a:	4311      	orrs	r1, r2
    f34c:	000f      	movs	r7, r1
    f34e:	002c      	movs	r4, r5
    f350:	46d8      	mov	r8, fp
    f352:	0f7b      	lsrs	r3, r7, #29
    f354:	00e4      	lsls	r4, r4, #3
    f356:	431c      	orrs	r4, r3
    f358:	00ff      	lsls	r7, r7, #3
    f35a:	4e30      	ldr	r6, [pc, #192]	; (f41c <__aeabi_dadd+0x618>)
    f35c:	e5d6      	b.n	ef0c <__aeabi_dadd+0x108>
    f35e:	000c      	movs	r4, r1
    f360:	0017      	movs	r7, r2
    f362:	0006      	movs	r6, r0
    f364:	e5d2      	b.n	ef0c <__aeabi_dadd+0x108>
    f366:	2b00      	cmp	r3, #0
    f368:	d038      	beq.n	f3dc <__aeabi_dadd+0x5d8>
    f36a:	000b      	movs	r3, r1
    f36c:	4313      	orrs	r3, r2
    f36e:	d100      	bne.n	f372 <__aeabi_dadd+0x56e>
    f370:	e742      	b.n	f1f8 <__aeabi_dadd+0x3f4>
    f372:	08f8      	lsrs	r0, r7, #3
    f374:	0767      	lsls	r7, r4, #29
    f376:	4307      	orrs	r7, r0
    f378:	2080      	movs	r0, #128	; 0x80
    f37a:	08e4      	lsrs	r4, r4, #3
    f37c:	0300      	lsls	r0, r0, #12
    f37e:	4204      	tst	r4, r0
    f380:	d0e7      	beq.n	f352 <__aeabi_dadd+0x54e>
    f382:	08cb      	lsrs	r3, r1, #3
    f384:	4203      	tst	r3, r0
    f386:	d1e4      	bne.n	f352 <__aeabi_dadd+0x54e>
    f388:	08d2      	lsrs	r2, r2, #3
    f38a:	0749      	lsls	r1, r1, #29
    f38c:	4311      	orrs	r1, r2
    f38e:	000f      	movs	r7, r1
    f390:	001c      	movs	r4, r3
    f392:	e7de      	b.n	f352 <__aeabi_dadd+0x54e>
    f394:	2700      	movs	r7, #0
    f396:	2400      	movs	r4, #0
    f398:	e5d5      	b.n	ef46 <__aeabi_dadd+0x142>
    f39a:	2100      	movs	r1, #0
    f39c:	e76b      	b.n	f276 <__aeabi_dadd+0x472>
    f39e:	2500      	movs	r5, #0
    f3a0:	2700      	movs	r7, #0
    f3a2:	e5f3      	b.n	ef8c <__aeabi_dadd+0x188>
    f3a4:	464e      	mov	r6, r9
    f3a6:	0025      	movs	r5, r4
    f3a8:	3e20      	subs	r6, #32
    f3aa:	40f5      	lsrs	r5, r6
    f3ac:	464b      	mov	r3, r9
    f3ae:	002e      	movs	r6, r5
    f3b0:	2b20      	cmp	r3, #32
    f3b2:	d02d      	beq.n	f410 <__aeabi_dadd+0x60c>
    f3b4:	2540      	movs	r5, #64	; 0x40
    f3b6:	1aed      	subs	r5, r5, r3
    f3b8:	40ac      	lsls	r4, r5
    f3ba:	4327      	orrs	r7, r4
    f3bc:	1e7c      	subs	r4, r7, #1
    f3be:	41a7      	sbcs	r7, r4
    f3c0:	2400      	movs	r4, #0
    f3c2:	4337      	orrs	r7, r6
    f3c4:	e6c9      	b.n	f15a <__aeabi_dadd+0x356>
    f3c6:	2480      	movs	r4, #128	; 0x80
    f3c8:	2500      	movs	r5, #0
    f3ca:	0324      	lsls	r4, r4, #12
    f3cc:	4e13      	ldr	r6, [pc, #76]	; (f41c <__aeabi_dadd+0x618>)
    f3ce:	2700      	movs	r7, #0
    f3d0:	e5dc      	b.n	ef8c <__aeabi_dadd+0x188>
    f3d2:	4327      	orrs	r7, r4
    f3d4:	1e7c      	subs	r4, r7, #1
    f3d6:	41a7      	sbcs	r7, r4
    f3d8:	2400      	movs	r4, #0
    f3da:	e779      	b.n	f2d0 <__aeabi_dadd+0x4cc>
    f3dc:	000c      	movs	r4, r1
    f3de:	0017      	movs	r7, r2
    f3e0:	4e0e      	ldr	r6, [pc, #56]	; (f41c <__aeabi_dadd+0x618>)
    f3e2:	e593      	b.n	ef0c <__aeabi_dadd+0x108>
    f3e4:	000c      	movs	r4, r1
    f3e6:	0017      	movs	r7, r2
    f3e8:	e590      	b.n	ef0c <__aeabi_dadd+0x108>
    f3ea:	4656      	mov	r6, sl
    f3ec:	0023      	movs	r3, r4
    f3ee:	3e20      	subs	r6, #32
    f3f0:	40f3      	lsrs	r3, r6
    f3f2:	4699      	mov	r9, r3
    f3f4:	4653      	mov	r3, sl
    f3f6:	2b20      	cmp	r3, #32
    f3f8:	d00e      	beq.n	f418 <__aeabi_dadd+0x614>
    f3fa:	2340      	movs	r3, #64	; 0x40
    f3fc:	4656      	mov	r6, sl
    f3fe:	1b9b      	subs	r3, r3, r6
    f400:	409c      	lsls	r4, r3
    f402:	4327      	orrs	r7, r4
    f404:	1e7c      	subs	r4, r7, #1
    f406:	41a7      	sbcs	r7, r4
    f408:	464b      	mov	r3, r9
    f40a:	2400      	movs	r4, #0
    f40c:	431f      	orrs	r7, r3
    f40e:	e75f      	b.n	f2d0 <__aeabi_dadd+0x4cc>
    f410:	2400      	movs	r4, #0
    f412:	e7d2      	b.n	f3ba <__aeabi_dadd+0x5b6>
    f414:	0017      	movs	r7, r2
    f416:	e5b2      	b.n	ef7e <__aeabi_dadd+0x17a>
    f418:	2400      	movs	r4, #0
    f41a:	e7f2      	b.n	f402 <__aeabi_dadd+0x5fe>
    f41c:	000007ff 	.word	0x000007ff
    f420:	ff7fffff 	.word	0xff7fffff

0000f424 <__aeabi_ddiv>:
    f424:	b5f0      	push	{r4, r5, r6, r7, lr}
    f426:	4657      	mov	r7, sl
    f428:	4645      	mov	r5, r8
    f42a:	46de      	mov	lr, fp
    f42c:	464e      	mov	r6, r9
    f42e:	b5e0      	push	{r5, r6, r7, lr}
    f430:	004c      	lsls	r4, r1, #1
    f432:	030e      	lsls	r6, r1, #12
    f434:	b087      	sub	sp, #28
    f436:	4683      	mov	fp, r0
    f438:	4692      	mov	sl, r2
    f43a:	001d      	movs	r5, r3
    f43c:	4680      	mov	r8, r0
    f43e:	0b36      	lsrs	r6, r6, #12
    f440:	0d64      	lsrs	r4, r4, #21
    f442:	0fcf      	lsrs	r7, r1, #31
    f444:	2c00      	cmp	r4, #0
    f446:	d04f      	beq.n	f4e8 <__aeabi_ddiv+0xc4>
    f448:	4b6f      	ldr	r3, [pc, #444]	; (f608 <__aeabi_ddiv+0x1e4>)
    f44a:	429c      	cmp	r4, r3
    f44c:	d035      	beq.n	f4ba <__aeabi_ddiv+0x96>
    f44e:	2380      	movs	r3, #128	; 0x80
    f450:	0f42      	lsrs	r2, r0, #29
    f452:	041b      	lsls	r3, r3, #16
    f454:	00f6      	lsls	r6, r6, #3
    f456:	4313      	orrs	r3, r2
    f458:	4333      	orrs	r3, r6
    f45a:	4699      	mov	r9, r3
    f45c:	00c3      	lsls	r3, r0, #3
    f45e:	4698      	mov	r8, r3
    f460:	4b6a      	ldr	r3, [pc, #424]	; (f60c <__aeabi_ddiv+0x1e8>)
    f462:	2600      	movs	r6, #0
    f464:	469c      	mov	ip, r3
    f466:	2300      	movs	r3, #0
    f468:	4464      	add	r4, ip
    f46a:	9303      	str	r3, [sp, #12]
    f46c:	032b      	lsls	r3, r5, #12
    f46e:	0b1b      	lsrs	r3, r3, #12
    f470:	469b      	mov	fp, r3
    f472:	006b      	lsls	r3, r5, #1
    f474:	0fed      	lsrs	r5, r5, #31
    f476:	4650      	mov	r0, sl
    f478:	0d5b      	lsrs	r3, r3, #21
    f47a:	9501      	str	r5, [sp, #4]
    f47c:	d05e      	beq.n	f53c <__aeabi_ddiv+0x118>
    f47e:	4a62      	ldr	r2, [pc, #392]	; (f608 <__aeabi_ddiv+0x1e4>)
    f480:	4293      	cmp	r3, r2
    f482:	d053      	beq.n	f52c <__aeabi_ddiv+0x108>
    f484:	465a      	mov	r2, fp
    f486:	00d1      	lsls	r1, r2, #3
    f488:	2280      	movs	r2, #128	; 0x80
    f48a:	0f40      	lsrs	r0, r0, #29
    f48c:	0412      	lsls	r2, r2, #16
    f48e:	4302      	orrs	r2, r0
    f490:	430a      	orrs	r2, r1
    f492:	4693      	mov	fp, r2
    f494:	4652      	mov	r2, sl
    f496:	00d1      	lsls	r1, r2, #3
    f498:	4a5c      	ldr	r2, [pc, #368]	; (f60c <__aeabi_ddiv+0x1e8>)
    f49a:	4694      	mov	ip, r2
    f49c:	2200      	movs	r2, #0
    f49e:	4463      	add	r3, ip
    f4a0:	0038      	movs	r0, r7
    f4a2:	4068      	eors	r0, r5
    f4a4:	4684      	mov	ip, r0
    f4a6:	9002      	str	r0, [sp, #8]
    f4a8:	1ae4      	subs	r4, r4, r3
    f4aa:	4316      	orrs	r6, r2
    f4ac:	2e0f      	cmp	r6, #15
    f4ae:	d900      	bls.n	f4b2 <__aeabi_ddiv+0x8e>
    f4b0:	e0b4      	b.n	f61c <__aeabi_ddiv+0x1f8>
    f4b2:	4b57      	ldr	r3, [pc, #348]	; (f610 <__aeabi_ddiv+0x1ec>)
    f4b4:	00b6      	lsls	r6, r6, #2
    f4b6:	599b      	ldr	r3, [r3, r6]
    f4b8:	469f      	mov	pc, r3
    f4ba:	0003      	movs	r3, r0
    f4bc:	4333      	orrs	r3, r6
    f4be:	4699      	mov	r9, r3
    f4c0:	d16c      	bne.n	f59c <__aeabi_ddiv+0x178>
    f4c2:	2300      	movs	r3, #0
    f4c4:	4698      	mov	r8, r3
    f4c6:	3302      	adds	r3, #2
    f4c8:	2608      	movs	r6, #8
    f4ca:	9303      	str	r3, [sp, #12]
    f4cc:	e7ce      	b.n	f46c <__aeabi_ddiv+0x48>
    f4ce:	46cb      	mov	fp, r9
    f4d0:	4641      	mov	r1, r8
    f4d2:	9a03      	ldr	r2, [sp, #12]
    f4d4:	9701      	str	r7, [sp, #4]
    f4d6:	2a02      	cmp	r2, #2
    f4d8:	d165      	bne.n	f5a6 <__aeabi_ddiv+0x182>
    f4da:	9b01      	ldr	r3, [sp, #4]
    f4dc:	4c4a      	ldr	r4, [pc, #296]	; (f608 <__aeabi_ddiv+0x1e4>)
    f4de:	469c      	mov	ip, r3
    f4e0:	2300      	movs	r3, #0
    f4e2:	2200      	movs	r2, #0
    f4e4:	4698      	mov	r8, r3
    f4e6:	e06b      	b.n	f5c0 <__aeabi_ddiv+0x19c>
    f4e8:	0003      	movs	r3, r0
    f4ea:	4333      	orrs	r3, r6
    f4ec:	4699      	mov	r9, r3
    f4ee:	d04e      	beq.n	f58e <__aeabi_ddiv+0x16a>
    f4f0:	2e00      	cmp	r6, #0
    f4f2:	d100      	bne.n	f4f6 <__aeabi_ddiv+0xd2>
    f4f4:	e1bc      	b.n	f870 <__aeabi_ddiv+0x44c>
    f4f6:	0030      	movs	r0, r6
    f4f8:	f001 f9ea 	bl	108d0 <__clzsi2>
    f4fc:	0003      	movs	r3, r0
    f4fe:	3b0b      	subs	r3, #11
    f500:	2b1c      	cmp	r3, #28
    f502:	dd00      	ble.n	f506 <__aeabi_ddiv+0xe2>
    f504:	e1ac      	b.n	f860 <__aeabi_ddiv+0x43c>
    f506:	221d      	movs	r2, #29
    f508:	1ad3      	subs	r3, r2, r3
    f50a:	465a      	mov	r2, fp
    f50c:	0001      	movs	r1, r0
    f50e:	40da      	lsrs	r2, r3
    f510:	3908      	subs	r1, #8
    f512:	408e      	lsls	r6, r1
    f514:	0013      	movs	r3, r2
    f516:	4333      	orrs	r3, r6
    f518:	4699      	mov	r9, r3
    f51a:	465b      	mov	r3, fp
    f51c:	408b      	lsls	r3, r1
    f51e:	4698      	mov	r8, r3
    f520:	2300      	movs	r3, #0
    f522:	4c3c      	ldr	r4, [pc, #240]	; (f614 <__aeabi_ddiv+0x1f0>)
    f524:	2600      	movs	r6, #0
    f526:	1a24      	subs	r4, r4, r0
    f528:	9303      	str	r3, [sp, #12]
    f52a:	e79f      	b.n	f46c <__aeabi_ddiv+0x48>
    f52c:	4651      	mov	r1, sl
    f52e:	465a      	mov	r2, fp
    f530:	4311      	orrs	r1, r2
    f532:	d129      	bne.n	f588 <__aeabi_ddiv+0x164>
    f534:	2200      	movs	r2, #0
    f536:	4693      	mov	fp, r2
    f538:	3202      	adds	r2, #2
    f53a:	e7b1      	b.n	f4a0 <__aeabi_ddiv+0x7c>
    f53c:	4659      	mov	r1, fp
    f53e:	4301      	orrs	r1, r0
    f540:	d01e      	beq.n	f580 <__aeabi_ddiv+0x15c>
    f542:	465b      	mov	r3, fp
    f544:	2b00      	cmp	r3, #0
    f546:	d100      	bne.n	f54a <__aeabi_ddiv+0x126>
    f548:	e19e      	b.n	f888 <__aeabi_ddiv+0x464>
    f54a:	4658      	mov	r0, fp
    f54c:	f001 f9c0 	bl	108d0 <__clzsi2>
    f550:	0003      	movs	r3, r0
    f552:	3b0b      	subs	r3, #11
    f554:	2b1c      	cmp	r3, #28
    f556:	dd00      	ble.n	f55a <__aeabi_ddiv+0x136>
    f558:	e18f      	b.n	f87a <__aeabi_ddiv+0x456>
    f55a:	0002      	movs	r2, r0
    f55c:	4659      	mov	r1, fp
    f55e:	3a08      	subs	r2, #8
    f560:	4091      	lsls	r1, r2
    f562:	468b      	mov	fp, r1
    f564:	211d      	movs	r1, #29
    f566:	1acb      	subs	r3, r1, r3
    f568:	4651      	mov	r1, sl
    f56a:	40d9      	lsrs	r1, r3
    f56c:	000b      	movs	r3, r1
    f56e:	4659      	mov	r1, fp
    f570:	430b      	orrs	r3, r1
    f572:	4651      	mov	r1, sl
    f574:	469b      	mov	fp, r3
    f576:	4091      	lsls	r1, r2
    f578:	4b26      	ldr	r3, [pc, #152]	; (f614 <__aeabi_ddiv+0x1f0>)
    f57a:	2200      	movs	r2, #0
    f57c:	1a1b      	subs	r3, r3, r0
    f57e:	e78f      	b.n	f4a0 <__aeabi_ddiv+0x7c>
    f580:	2300      	movs	r3, #0
    f582:	2201      	movs	r2, #1
    f584:	469b      	mov	fp, r3
    f586:	e78b      	b.n	f4a0 <__aeabi_ddiv+0x7c>
    f588:	4651      	mov	r1, sl
    f58a:	2203      	movs	r2, #3
    f58c:	e788      	b.n	f4a0 <__aeabi_ddiv+0x7c>
    f58e:	2300      	movs	r3, #0
    f590:	4698      	mov	r8, r3
    f592:	3301      	adds	r3, #1
    f594:	2604      	movs	r6, #4
    f596:	2400      	movs	r4, #0
    f598:	9303      	str	r3, [sp, #12]
    f59a:	e767      	b.n	f46c <__aeabi_ddiv+0x48>
    f59c:	2303      	movs	r3, #3
    f59e:	46b1      	mov	r9, r6
    f5a0:	9303      	str	r3, [sp, #12]
    f5a2:	260c      	movs	r6, #12
    f5a4:	e762      	b.n	f46c <__aeabi_ddiv+0x48>
    f5a6:	2a03      	cmp	r2, #3
    f5a8:	d100      	bne.n	f5ac <__aeabi_ddiv+0x188>
    f5aa:	e25c      	b.n	fa66 <__aeabi_ddiv+0x642>
    f5ac:	9b01      	ldr	r3, [sp, #4]
    f5ae:	2a01      	cmp	r2, #1
    f5b0:	d000      	beq.n	f5b4 <__aeabi_ddiv+0x190>
    f5b2:	e1e4      	b.n	f97e <__aeabi_ddiv+0x55a>
    f5b4:	4013      	ands	r3, r2
    f5b6:	469c      	mov	ip, r3
    f5b8:	2300      	movs	r3, #0
    f5ba:	2400      	movs	r4, #0
    f5bc:	2200      	movs	r2, #0
    f5be:	4698      	mov	r8, r3
    f5c0:	2100      	movs	r1, #0
    f5c2:	0312      	lsls	r2, r2, #12
    f5c4:	0b13      	lsrs	r3, r2, #12
    f5c6:	0d0a      	lsrs	r2, r1, #20
    f5c8:	0512      	lsls	r2, r2, #20
    f5ca:	431a      	orrs	r2, r3
    f5cc:	0523      	lsls	r3, r4, #20
    f5ce:	4c12      	ldr	r4, [pc, #72]	; (f618 <__aeabi_ddiv+0x1f4>)
    f5d0:	4640      	mov	r0, r8
    f5d2:	4022      	ands	r2, r4
    f5d4:	4313      	orrs	r3, r2
    f5d6:	4662      	mov	r2, ip
    f5d8:	005b      	lsls	r3, r3, #1
    f5da:	07d2      	lsls	r2, r2, #31
    f5dc:	085b      	lsrs	r3, r3, #1
    f5de:	4313      	orrs	r3, r2
    f5e0:	0019      	movs	r1, r3
    f5e2:	b007      	add	sp, #28
    f5e4:	bc3c      	pop	{r2, r3, r4, r5}
    f5e6:	4690      	mov	r8, r2
    f5e8:	4699      	mov	r9, r3
    f5ea:	46a2      	mov	sl, r4
    f5ec:	46ab      	mov	fp, r5
    f5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5f0:	2300      	movs	r3, #0
    f5f2:	2280      	movs	r2, #128	; 0x80
    f5f4:	469c      	mov	ip, r3
    f5f6:	0312      	lsls	r2, r2, #12
    f5f8:	4698      	mov	r8, r3
    f5fa:	4c03      	ldr	r4, [pc, #12]	; (f608 <__aeabi_ddiv+0x1e4>)
    f5fc:	e7e0      	b.n	f5c0 <__aeabi_ddiv+0x19c>
    f5fe:	2300      	movs	r3, #0
    f600:	4c01      	ldr	r4, [pc, #4]	; (f608 <__aeabi_ddiv+0x1e4>)
    f602:	2200      	movs	r2, #0
    f604:	4698      	mov	r8, r3
    f606:	e7db      	b.n	f5c0 <__aeabi_ddiv+0x19c>
    f608:	000007ff 	.word	0x000007ff
    f60c:	fffffc01 	.word	0xfffffc01
    f610:	000142c8 	.word	0x000142c8
    f614:	fffffc0d 	.word	0xfffffc0d
    f618:	800fffff 	.word	0x800fffff
    f61c:	45d9      	cmp	r9, fp
    f61e:	d900      	bls.n	f622 <__aeabi_ddiv+0x1fe>
    f620:	e139      	b.n	f896 <__aeabi_ddiv+0x472>
    f622:	d100      	bne.n	f626 <__aeabi_ddiv+0x202>
    f624:	e134      	b.n	f890 <__aeabi_ddiv+0x46c>
    f626:	2300      	movs	r3, #0
    f628:	4646      	mov	r6, r8
    f62a:	464d      	mov	r5, r9
    f62c:	469a      	mov	sl, r3
    f62e:	3c01      	subs	r4, #1
    f630:	465b      	mov	r3, fp
    f632:	0e0a      	lsrs	r2, r1, #24
    f634:	021b      	lsls	r3, r3, #8
    f636:	431a      	orrs	r2, r3
    f638:	020b      	lsls	r3, r1, #8
    f63a:	0c17      	lsrs	r7, r2, #16
    f63c:	9303      	str	r3, [sp, #12]
    f63e:	0413      	lsls	r3, r2, #16
    f640:	0c1b      	lsrs	r3, r3, #16
    f642:	0039      	movs	r1, r7
    f644:	0028      	movs	r0, r5
    f646:	4690      	mov	r8, r2
    f648:	9301      	str	r3, [sp, #4]
    f64a:	f7ff fa27 	bl	ea9c <__udivsi3>
    f64e:	0002      	movs	r2, r0
    f650:	9b01      	ldr	r3, [sp, #4]
    f652:	4683      	mov	fp, r0
    f654:	435a      	muls	r2, r3
    f656:	0028      	movs	r0, r5
    f658:	0039      	movs	r1, r7
    f65a:	4691      	mov	r9, r2
    f65c:	f7ff faa4 	bl	eba8 <__aeabi_uidivmod>
    f660:	0c35      	lsrs	r5, r6, #16
    f662:	0409      	lsls	r1, r1, #16
    f664:	430d      	orrs	r5, r1
    f666:	45a9      	cmp	r9, r5
    f668:	d90d      	bls.n	f686 <__aeabi_ddiv+0x262>
    f66a:	465b      	mov	r3, fp
    f66c:	4445      	add	r5, r8
    f66e:	3b01      	subs	r3, #1
    f670:	45a8      	cmp	r8, r5
    f672:	d900      	bls.n	f676 <__aeabi_ddiv+0x252>
    f674:	e13a      	b.n	f8ec <__aeabi_ddiv+0x4c8>
    f676:	45a9      	cmp	r9, r5
    f678:	d800      	bhi.n	f67c <__aeabi_ddiv+0x258>
    f67a:	e137      	b.n	f8ec <__aeabi_ddiv+0x4c8>
    f67c:	2302      	movs	r3, #2
    f67e:	425b      	negs	r3, r3
    f680:	469c      	mov	ip, r3
    f682:	4445      	add	r5, r8
    f684:	44e3      	add	fp, ip
    f686:	464b      	mov	r3, r9
    f688:	1aeb      	subs	r3, r5, r3
    f68a:	0039      	movs	r1, r7
    f68c:	0018      	movs	r0, r3
    f68e:	9304      	str	r3, [sp, #16]
    f690:	f7ff fa04 	bl	ea9c <__udivsi3>
    f694:	9b01      	ldr	r3, [sp, #4]
    f696:	0005      	movs	r5, r0
    f698:	4343      	muls	r3, r0
    f69a:	0039      	movs	r1, r7
    f69c:	9804      	ldr	r0, [sp, #16]
    f69e:	4699      	mov	r9, r3
    f6a0:	f7ff fa82 	bl	eba8 <__aeabi_uidivmod>
    f6a4:	0433      	lsls	r3, r6, #16
    f6a6:	0409      	lsls	r1, r1, #16
    f6a8:	0c1b      	lsrs	r3, r3, #16
    f6aa:	430b      	orrs	r3, r1
    f6ac:	4599      	cmp	r9, r3
    f6ae:	d909      	bls.n	f6c4 <__aeabi_ddiv+0x2a0>
    f6b0:	4443      	add	r3, r8
    f6b2:	1e6a      	subs	r2, r5, #1
    f6b4:	4598      	cmp	r8, r3
    f6b6:	d900      	bls.n	f6ba <__aeabi_ddiv+0x296>
    f6b8:	e11a      	b.n	f8f0 <__aeabi_ddiv+0x4cc>
    f6ba:	4599      	cmp	r9, r3
    f6bc:	d800      	bhi.n	f6c0 <__aeabi_ddiv+0x29c>
    f6be:	e117      	b.n	f8f0 <__aeabi_ddiv+0x4cc>
    f6c0:	3d02      	subs	r5, #2
    f6c2:	4443      	add	r3, r8
    f6c4:	464a      	mov	r2, r9
    f6c6:	1a9b      	subs	r3, r3, r2
    f6c8:	465a      	mov	r2, fp
    f6ca:	0412      	lsls	r2, r2, #16
    f6cc:	432a      	orrs	r2, r5
    f6ce:	9903      	ldr	r1, [sp, #12]
    f6d0:	4693      	mov	fp, r2
    f6d2:	0c10      	lsrs	r0, r2, #16
    f6d4:	0c0a      	lsrs	r2, r1, #16
    f6d6:	4691      	mov	r9, r2
    f6d8:	0409      	lsls	r1, r1, #16
    f6da:	465a      	mov	r2, fp
    f6dc:	0c09      	lsrs	r1, r1, #16
    f6de:	464e      	mov	r6, r9
    f6e0:	000d      	movs	r5, r1
    f6e2:	0412      	lsls	r2, r2, #16
    f6e4:	0c12      	lsrs	r2, r2, #16
    f6e6:	4345      	muls	r5, r0
    f6e8:	9105      	str	r1, [sp, #20]
    f6ea:	4351      	muls	r1, r2
    f6ec:	4372      	muls	r2, r6
    f6ee:	4370      	muls	r0, r6
    f6f0:	1952      	adds	r2, r2, r5
    f6f2:	0c0e      	lsrs	r6, r1, #16
    f6f4:	18b2      	adds	r2, r6, r2
    f6f6:	4295      	cmp	r5, r2
    f6f8:	d903      	bls.n	f702 <__aeabi_ddiv+0x2de>
    f6fa:	2580      	movs	r5, #128	; 0x80
    f6fc:	026d      	lsls	r5, r5, #9
    f6fe:	46ac      	mov	ip, r5
    f700:	4460      	add	r0, ip
    f702:	0c15      	lsrs	r5, r2, #16
    f704:	0409      	lsls	r1, r1, #16
    f706:	0412      	lsls	r2, r2, #16
    f708:	0c09      	lsrs	r1, r1, #16
    f70a:	1828      	adds	r0, r5, r0
    f70c:	1852      	adds	r2, r2, r1
    f70e:	4283      	cmp	r3, r0
    f710:	d200      	bcs.n	f714 <__aeabi_ddiv+0x2f0>
    f712:	e0ce      	b.n	f8b2 <__aeabi_ddiv+0x48e>
    f714:	d100      	bne.n	f718 <__aeabi_ddiv+0x2f4>
    f716:	e0c8      	b.n	f8aa <__aeabi_ddiv+0x486>
    f718:	1a1d      	subs	r5, r3, r0
    f71a:	4653      	mov	r3, sl
    f71c:	1a9e      	subs	r6, r3, r2
    f71e:	45b2      	cmp	sl, r6
    f720:	4192      	sbcs	r2, r2
    f722:	4252      	negs	r2, r2
    f724:	1aab      	subs	r3, r5, r2
    f726:	469a      	mov	sl, r3
    f728:	4598      	cmp	r8, r3
    f72a:	d100      	bne.n	f72e <__aeabi_ddiv+0x30a>
    f72c:	e117      	b.n	f95e <__aeabi_ddiv+0x53a>
    f72e:	0039      	movs	r1, r7
    f730:	0018      	movs	r0, r3
    f732:	f7ff f9b3 	bl	ea9c <__udivsi3>
    f736:	9b01      	ldr	r3, [sp, #4]
    f738:	0005      	movs	r5, r0
    f73a:	4343      	muls	r3, r0
    f73c:	0039      	movs	r1, r7
    f73e:	4650      	mov	r0, sl
    f740:	9304      	str	r3, [sp, #16]
    f742:	f7ff fa31 	bl	eba8 <__aeabi_uidivmod>
    f746:	9804      	ldr	r0, [sp, #16]
    f748:	040b      	lsls	r3, r1, #16
    f74a:	0c31      	lsrs	r1, r6, #16
    f74c:	4319      	orrs	r1, r3
    f74e:	4288      	cmp	r0, r1
    f750:	d909      	bls.n	f766 <__aeabi_ddiv+0x342>
    f752:	4441      	add	r1, r8
    f754:	1e6b      	subs	r3, r5, #1
    f756:	4588      	cmp	r8, r1
    f758:	d900      	bls.n	f75c <__aeabi_ddiv+0x338>
    f75a:	e107      	b.n	f96c <__aeabi_ddiv+0x548>
    f75c:	4288      	cmp	r0, r1
    f75e:	d800      	bhi.n	f762 <__aeabi_ddiv+0x33e>
    f760:	e104      	b.n	f96c <__aeabi_ddiv+0x548>
    f762:	3d02      	subs	r5, #2
    f764:	4441      	add	r1, r8
    f766:	9b04      	ldr	r3, [sp, #16]
    f768:	1acb      	subs	r3, r1, r3
    f76a:	0018      	movs	r0, r3
    f76c:	0039      	movs	r1, r7
    f76e:	9304      	str	r3, [sp, #16]
    f770:	f7ff f994 	bl	ea9c <__udivsi3>
    f774:	9b01      	ldr	r3, [sp, #4]
    f776:	4682      	mov	sl, r0
    f778:	4343      	muls	r3, r0
    f77a:	0039      	movs	r1, r7
    f77c:	9804      	ldr	r0, [sp, #16]
    f77e:	9301      	str	r3, [sp, #4]
    f780:	f7ff fa12 	bl	eba8 <__aeabi_uidivmod>
    f784:	9801      	ldr	r0, [sp, #4]
    f786:	040b      	lsls	r3, r1, #16
    f788:	0431      	lsls	r1, r6, #16
    f78a:	0c09      	lsrs	r1, r1, #16
    f78c:	4319      	orrs	r1, r3
    f78e:	4288      	cmp	r0, r1
    f790:	d90d      	bls.n	f7ae <__aeabi_ddiv+0x38a>
    f792:	4653      	mov	r3, sl
    f794:	4441      	add	r1, r8
    f796:	3b01      	subs	r3, #1
    f798:	4588      	cmp	r8, r1
    f79a:	d900      	bls.n	f79e <__aeabi_ddiv+0x37a>
    f79c:	e0e8      	b.n	f970 <__aeabi_ddiv+0x54c>
    f79e:	4288      	cmp	r0, r1
    f7a0:	d800      	bhi.n	f7a4 <__aeabi_ddiv+0x380>
    f7a2:	e0e5      	b.n	f970 <__aeabi_ddiv+0x54c>
    f7a4:	2302      	movs	r3, #2
    f7a6:	425b      	negs	r3, r3
    f7a8:	469c      	mov	ip, r3
    f7aa:	4441      	add	r1, r8
    f7ac:	44e2      	add	sl, ip
    f7ae:	9b01      	ldr	r3, [sp, #4]
    f7b0:	042d      	lsls	r5, r5, #16
    f7b2:	1ace      	subs	r6, r1, r3
    f7b4:	4651      	mov	r1, sl
    f7b6:	4329      	orrs	r1, r5
    f7b8:	9d05      	ldr	r5, [sp, #20]
    f7ba:	464f      	mov	r7, r9
    f7bc:	002a      	movs	r2, r5
    f7be:	040b      	lsls	r3, r1, #16
    f7c0:	0c08      	lsrs	r0, r1, #16
    f7c2:	0c1b      	lsrs	r3, r3, #16
    f7c4:	435a      	muls	r2, r3
    f7c6:	4345      	muls	r5, r0
    f7c8:	437b      	muls	r3, r7
    f7ca:	4378      	muls	r0, r7
    f7cc:	195b      	adds	r3, r3, r5
    f7ce:	0c17      	lsrs	r7, r2, #16
    f7d0:	18fb      	adds	r3, r7, r3
    f7d2:	429d      	cmp	r5, r3
    f7d4:	d903      	bls.n	f7de <__aeabi_ddiv+0x3ba>
    f7d6:	2580      	movs	r5, #128	; 0x80
    f7d8:	026d      	lsls	r5, r5, #9
    f7da:	46ac      	mov	ip, r5
    f7dc:	4460      	add	r0, ip
    f7de:	0c1d      	lsrs	r5, r3, #16
    f7e0:	0412      	lsls	r2, r2, #16
    f7e2:	041b      	lsls	r3, r3, #16
    f7e4:	0c12      	lsrs	r2, r2, #16
    f7e6:	1828      	adds	r0, r5, r0
    f7e8:	189b      	adds	r3, r3, r2
    f7ea:	4286      	cmp	r6, r0
    f7ec:	d200      	bcs.n	f7f0 <__aeabi_ddiv+0x3cc>
    f7ee:	e093      	b.n	f918 <__aeabi_ddiv+0x4f4>
    f7f0:	d100      	bne.n	f7f4 <__aeabi_ddiv+0x3d0>
    f7f2:	e08e      	b.n	f912 <__aeabi_ddiv+0x4ee>
    f7f4:	2301      	movs	r3, #1
    f7f6:	4319      	orrs	r1, r3
    f7f8:	4ba0      	ldr	r3, [pc, #640]	; (fa7c <__aeabi_ddiv+0x658>)
    f7fa:	18e3      	adds	r3, r4, r3
    f7fc:	2b00      	cmp	r3, #0
    f7fe:	dc00      	bgt.n	f802 <__aeabi_ddiv+0x3de>
    f800:	e099      	b.n	f936 <__aeabi_ddiv+0x512>
    f802:	074a      	lsls	r2, r1, #29
    f804:	d000      	beq.n	f808 <__aeabi_ddiv+0x3e4>
    f806:	e09e      	b.n	f946 <__aeabi_ddiv+0x522>
    f808:	465a      	mov	r2, fp
    f80a:	01d2      	lsls	r2, r2, #7
    f80c:	d506      	bpl.n	f81c <__aeabi_ddiv+0x3f8>
    f80e:	465a      	mov	r2, fp
    f810:	4b9b      	ldr	r3, [pc, #620]	; (fa80 <__aeabi_ddiv+0x65c>)
    f812:	401a      	ands	r2, r3
    f814:	2380      	movs	r3, #128	; 0x80
    f816:	4693      	mov	fp, r2
    f818:	00db      	lsls	r3, r3, #3
    f81a:	18e3      	adds	r3, r4, r3
    f81c:	4a99      	ldr	r2, [pc, #612]	; (fa84 <__aeabi_ddiv+0x660>)
    f81e:	4293      	cmp	r3, r2
    f820:	dd68      	ble.n	f8f4 <__aeabi_ddiv+0x4d0>
    f822:	2301      	movs	r3, #1
    f824:	9a02      	ldr	r2, [sp, #8]
    f826:	4c98      	ldr	r4, [pc, #608]	; (fa88 <__aeabi_ddiv+0x664>)
    f828:	401a      	ands	r2, r3
    f82a:	2300      	movs	r3, #0
    f82c:	4694      	mov	ip, r2
    f82e:	4698      	mov	r8, r3
    f830:	2200      	movs	r2, #0
    f832:	e6c5      	b.n	f5c0 <__aeabi_ddiv+0x19c>
    f834:	2280      	movs	r2, #128	; 0x80
    f836:	464b      	mov	r3, r9
    f838:	0312      	lsls	r2, r2, #12
    f83a:	4213      	tst	r3, r2
    f83c:	d00a      	beq.n	f854 <__aeabi_ddiv+0x430>
    f83e:	465b      	mov	r3, fp
    f840:	4213      	tst	r3, r2
    f842:	d106      	bne.n	f852 <__aeabi_ddiv+0x42e>
    f844:	431a      	orrs	r2, r3
    f846:	0312      	lsls	r2, r2, #12
    f848:	0b12      	lsrs	r2, r2, #12
    f84a:	46ac      	mov	ip, r5
    f84c:	4688      	mov	r8, r1
    f84e:	4c8e      	ldr	r4, [pc, #568]	; (fa88 <__aeabi_ddiv+0x664>)
    f850:	e6b6      	b.n	f5c0 <__aeabi_ddiv+0x19c>
    f852:	464b      	mov	r3, r9
    f854:	431a      	orrs	r2, r3
    f856:	0312      	lsls	r2, r2, #12
    f858:	0b12      	lsrs	r2, r2, #12
    f85a:	46bc      	mov	ip, r7
    f85c:	4c8a      	ldr	r4, [pc, #552]	; (fa88 <__aeabi_ddiv+0x664>)
    f85e:	e6af      	b.n	f5c0 <__aeabi_ddiv+0x19c>
    f860:	0003      	movs	r3, r0
    f862:	465a      	mov	r2, fp
    f864:	3b28      	subs	r3, #40	; 0x28
    f866:	409a      	lsls	r2, r3
    f868:	2300      	movs	r3, #0
    f86a:	4691      	mov	r9, r2
    f86c:	4698      	mov	r8, r3
    f86e:	e657      	b.n	f520 <__aeabi_ddiv+0xfc>
    f870:	4658      	mov	r0, fp
    f872:	f001 f82d 	bl	108d0 <__clzsi2>
    f876:	3020      	adds	r0, #32
    f878:	e640      	b.n	f4fc <__aeabi_ddiv+0xd8>
    f87a:	0003      	movs	r3, r0
    f87c:	4652      	mov	r2, sl
    f87e:	3b28      	subs	r3, #40	; 0x28
    f880:	409a      	lsls	r2, r3
    f882:	2100      	movs	r1, #0
    f884:	4693      	mov	fp, r2
    f886:	e677      	b.n	f578 <__aeabi_ddiv+0x154>
    f888:	f001 f822 	bl	108d0 <__clzsi2>
    f88c:	3020      	adds	r0, #32
    f88e:	e65f      	b.n	f550 <__aeabi_ddiv+0x12c>
    f890:	4588      	cmp	r8, r1
    f892:	d200      	bcs.n	f896 <__aeabi_ddiv+0x472>
    f894:	e6c7      	b.n	f626 <__aeabi_ddiv+0x202>
    f896:	464b      	mov	r3, r9
    f898:	07de      	lsls	r6, r3, #31
    f89a:	085d      	lsrs	r5, r3, #1
    f89c:	4643      	mov	r3, r8
    f89e:	085b      	lsrs	r3, r3, #1
    f8a0:	431e      	orrs	r6, r3
    f8a2:	4643      	mov	r3, r8
    f8a4:	07db      	lsls	r3, r3, #31
    f8a6:	469a      	mov	sl, r3
    f8a8:	e6c2      	b.n	f630 <__aeabi_ddiv+0x20c>
    f8aa:	2500      	movs	r5, #0
    f8ac:	4592      	cmp	sl, r2
    f8ae:	d300      	bcc.n	f8b2 <__aeabi_ddiv+0x48e>
    f8b0:	e733      	b.n	f71a <__aeabi_ddiv+0x2f6>
    f8b2:	9e03      	ldr	r6, [sp, #12]
    f8b4:	4659      	mov	r1, fp
    f8b6:	46b4      	mov	ip, r6
    f8b8:	44e2      	add	sl, ip
    f8ba:	45b2      	cmp	sl, r6
    f8bc:	41ad      	sbcs	r5, r5
    f8be:	426d      	negs	r5, r5
    f8c0:	4445      	add	r5, r8
    f8c2:	18eb      	adds	r3, r5, r3
    f8c4:	3901      	subs	r1, #1
    f8c6:	4598      	cmp	r8, r3
    f8c8:	d207      	bcs.n	f8da <__aeabi_ddiv+0x4b6>
    f8ca:	4298      	cmp	r0, r3
    f8cc:	d900      	bls.n	f8d0 <__aeabi_ddiv+0x4ac>
    f8ce:	e07f      	b.n	f9d0 <__aeabi_ddiv+0x5ac>
    f8d0:	d100      	bne.n	f8d4 <__aeabi_ddiv+0x4b0>
    f8d2:	e0bc      	b.n	fa4e <__aeabi_ddiv+0x62a>
    f8d4:	1a1d      	subs	r5, r3, r0
    f8d6:	468b      	mov	fp, r1
    f8d8:	e71f      	b.n	f71a <__aeabi_ddiv+0x2f6>
    f8da:	4598      	cmp	r8, r3
    f8dc:	d1fa      	bne.n	f8d4 <__aeabi_ddiv+0x4b0>
    f8de:	9d03      	ldr	r5, [sp, #12]
    f8e0:	4555      	cmp	r5, sl
    f8e2:	d9f2      	bls.n	f8ca <__aeabi_ddiv+0x4a6>
    f8e4:	4643      	mov	r3, r8
    f8e6:	468b      	mov	fp, r1
    f8e8:	1a1d      	subs	r5, r3, r0
    f8ea:	e716      	b.n	f71a <__aeabi_ddiv+0x2f6>
    f8ec:	469b      	mov	fp, r3
    f8ee:	e6ca      	b.n	f686 <__aeabi_ddiv+0x262>
    f8f0:	0015      	movs	r5, r2
    f8f2:	e6e7      	b.n	f6c4 <__aeabi_ddiv+0x2a0>
    f8f4:	465a      	mov	r2, fp
    f8f6:	08c9      	lsrs	r1, r1, #3
    f8f8:	0752      	lsls	r2, r2, #29
    f8fa:	430a      	orrs	r2, r1
    f8fc:	055b      	lsls	r3, r3, #21
    f8fe:	4690      	mov	r8, r2
    f900:	0d5c      	lsrs	r4, r3, #21
    f902:	465a      	mov	r2, fp
    f904:	2301      	movs	r3, #1
    f906:	9902      	ldr	r1, [sp, #8]
    f908:	0252      	lsls	r2, r2, #9
    f90a:	4019      	ands	r1, r3
    f90c:	0b12      	lsrs	r2, r2, #12
    f90e:	468c      	mov	ip, r1
    f910:	e656      	b.n	f5c0 <__aeabi_ddiv+0x19c>
    f912:	2b00      	cmp	r3, #0
    f914:	d100      	bne.n	f918 <__aeabi_ddiv+0x4f4>
    f916:	e76f      	b.n	f7f8 <__aeabi_ddiv+0x3d4>
    f918:	4446      	add	r6, r8
    f91a:	1e4a      	subs	r2, r1, #1
    f91c:	45b0      	cmp	r8, r6
    f91e:	d929      	bls.n	f974 <__aeabi_ddiv+0x550>
    f920:	0011      	movs	r1, r2
    f922:	4286      	cmp	r6, r0
    f924:	d000      	beq.n	f928 <__aeabi_ddiv+0x504>
    f926:	e765      	b.n	f7f4 <__aeabi_ddiv+0x3d0>
    f928:	9a03      	ldr	r2, [sp, #12]
    f92a:	4293      	cmp	r3, r2
    f92c:	d000      	beq.n	f930 <__aeabi_ddiv+0x50c>
    f92e:	e761      	b.n	f7f4 <__aeabi_ddiv+0x3d0>
    f930:	e762      	b.n	f7f8 <__aeabi_ddiv+0x3d4>
    f932:	2101      	movs	r1, #1
    f934:	4249      	negs	r1, r1
    f936:	2001      	movs	r0, #1
    f938:	1ac2      	subs	r2, r0, r3
    f93a:	2a38      	cmp	r2, #56	; 0x38
    f93c:	dd21      	ble.n	f982 <__aeabi_ddiv+0x55e>
    f93e:	9b02      	ldr	r3, [sp, #8]
    f940:	4003      	ands	r3, r0
    f942:	469c      	mov	ip, r3
    f944:	e638      	b.n	f5b8 <__aeabi_ddiv+0x194>
    f946:	220f      	movs	r2, #15
    f948:	400a      	ands	r2, r1
    f94a:	2a04      	cmp	r2, #4
    f94c:	d100      	bne.n	f950 <__aeabi_ddiv+0x52c>
    f94e:	e75b      	b.n	f808 <__aeabi_ddiv+0x3e4>
    f950:	000a      	movs	r2, r1
    f952:	1d11      	adds	r1, r2, #4
    f954:	4291      	cmp	r1, r2
    f956:	4192      	sbcs	r2, r2
    f958:	4252      	negs	r2, r2
    f95a:	4493      	add	fp, r2
    f95c:	e754      	b.n	f808 <__aeabi_ddiv+0x3e4>
    f95e:	4b47      	ldr	r3, [pc, #284]	; (fa7c <__aeabi_ddiv+0x658>)
    f960:	18e3      	adds	r3, r4, r3
    f962:	2b00      	cmp	r3, #0
    f964:	dde5      	ble.n	f932 <__aeabi_ddiv+0x50e>
    f966:	2201      	movs	r2, #1
    f968:	4252      	negs	r2, r2
    f96a:	e7f2      	b.n	f952 <__aeabi_ddiv+0x52e>
    f96c:	001d      	movs	r5, r3
    f96e:	e6fa      	b.n	f766 <__aeabi_ddiv+0x342>
    f970:	469a      	mov	sl, r3
    f972:	e71c      	b.n	f7ae <__aeabi_ddiv+0x38a>
    f974:	42b0      	cmp	r0, r6
    f976:	d839      	bhi.n	f9ec <__aeabi_ddiv+0x5c8>
    f978:	d06e      	beq.n	fa58 <__aeabi_ddiv+0x634>
    f97a:	0011      	movs	r1, r2
    f97c:	e73a      	b.n	f7f4 <__aeabi_ddiv+0x3d0>
    f97e:	9302      	str	r3, [sp, #8]
    f980:	e73a      	b.n	f7f8 <__aeabi_ddiv+0x3d4>
    f982:	2a1f      	cmp	r2, #31
    f984:	dc3c      	bgt.n	fa00 <__aeabi_ddiv+0x5dc>
    f986:	2320      	movs	r3, #32
    f988:	1a9b      	subs	r3, r3, r2
    f98a:	000c      	movs	r4, r1
    f98c:	4658      	mov	r0, fp
    f98e:	4099      	lsls	r1, r3
    f990:	4098      	lsls	r0, r3
    f992:	1e4b      	subs	r3, r1, #1
    f994:	4199      	sbcs	r1, r3
    f996:	465b      	mov	r3, fp
    f998:	40d4      	lsrs	r4, r2
    f99a:	40d3      	lsrs	r3, r2
    f99c:	4320      	orrs	r0, r4
    f99e:	4308      	orrs	r0, r1
    f9a0:	001a      	movs	r2, r3
    f9a2:	0743      	lsls	r3, r0, #29
    f9a4:	d009      	beq.n	f9ba <__aeabi_ddiv+0x596>
    f9a6:	230f      	movs	r3, #15
    f9a8:	4003      	ands	r3, r0
    f9aa:	2b04      	cmp	r3, #4
    f9ac:	d005      	beq.n	f9ba <__aeabi_ddiv+0x596>
    f9ae:	0001      	movs	r1, r0
    f9b0:	1d08      	adds	r0, r1, #4
    f9b2:	4288      	cmp	r0, r1
    f9b4:	419b      	sbcs	r3, r3
    f9b6:	425b      	negs	r3, r3
    f9b8:	18d2      	adds	r2, r2, r3
    f9ba:	0213      	lsls	r3, r2, #8
    f9bc:	d53a      	bpl.n	fa34 <__aeabi_ddiv+0x610>
    f9be:	2301      	movs	r3, #1
    f9c0:	9a02      	ldr	r2, [sp, #8]
    f9c2:	2401      	movs	r4, #1
    f9c4:	401a      	ands	r2, r3
    f9c6:	2300      	movs	r3, #0
    f9c8:	4694      	mov	ip, r2
    f9ca:	4698      	mov	r8, r3
    f9cc:	2200      	movs	r2, #0
    f9ce:	e5f7      	b.n	f5c0 <__aeabi_ddiv+0x19c>
    f9d0:	2102      	movs	r1, #2
    f9d2:	4249      	negs	r1, r1
    f9d4:	468c      	mov	ip, r1
    f9d6:	9d03      	ldr	r5, [sp, #12]
    f9d8:	44e3      	add	fp, ip
    f9da:	46ac      	mov	ip, r5
    f9dc:	44e2      	add	sl, ip
    f9de:	45aa      	cmp	sl, r5
    f9e0:	41ad      	sbcs	r5, r5
    f9e2:	426d      	negs	r5, r5
    f9e4:	4445      	add	r5, r8
    f9e6:	18ed      	adds	r5, r5, r3
    f9e8:	1a2d      	subs	r5, r5, r0
    f9ea:	e696      	b.n	f71a <__aeabi_ddiv+0x2f6>
    f9ec:	1e8a      	subs	r2, r1, #2
    f9ee:	9903      	ldr	r1, [sp, #12]
    f9f0:	004d      	lsls	r5, r1, #1
    f9f2:	428d      	cmp	r5, r1
    f9f4:	4189      	sbcs	r1, r1
    f9f6:	4249      	negs	r1, r1
    f9f8:	4441      	add	r1, r8
    f9fa:	1876      	adds	r6, r6, r1
    f9fc:	9503      	str	r5, [sp, #12]
    f9fe:	e78f      	b.n	f920 <__aeabi_ddiv+0x4fc>
    fa00:	201f      	movs	r0, #31
    fa02:	4240      	negs	r0, r0
    fa04:	1ac3      	subs	r3, r0, r3
    fa06:	4658      	mov	r0, fp
    fa08:	40d8      	lsrs	r0, r3
    fa0a:	0003      	movs	r3, r0
    fa0c:	2a20      	cmp	r2, #32
    fa0e:	d028      	beq.n	fa62 <__aeabi_ddiv+0x63e>
    fa10:	2040      	movs	r0, #64	; 0x40
    fa12:	465d      	mov	r5, fp
    fa14:	1a82      	subs	r2, r0, r2
    fa16:	4095      	lsls	r5, r2
    fa18:	4329      	orrs	r1, r5
    fa1a:	1e4a      	subs	r2, r1, #1
    fa1c:	4191      	sbcs	r1, r2
    fa1e:	4319      	orrs	r1, r3
    fa20:	2307      	movs	r3, #7
    fa22:	2200      	movs	r2, #0
    fa24:	400b      	ands	r3, r1
    fa26:	d009      	beq.n	fa3c <__aeabi_ddiv+0x618>
    fa28:	230f      	movs	r3, #15
    fa2a:	2200      	movs	r2, #0
    fa2c:	400b      	ands	r3, r1
    fa2e:	0008      	movs	r0, r1
    fa30:	2b04      	cmp	r3, #4
    fa32:	d1bd      	bne.n	f9b0 <__aeabi_ddiv+0x58c>
    fa34:	0001      	movs	r1, r0
    fa36:	0753      	lsls	r3, r2, #29
    fa38:	0252      	lsls	r2, r2, #9
    fa3a:	0b12      	lsrs	r2, r2, #12
    fa3c:	08c9      	lsrs	r1, r1, #3
    fa3e:	4319      	orrs	r1, r3
    fa40:	2301      	movs	r3, #1
    fa42:	4688      	mov	r8, r1
    fa44:	9902      	ldr	r1, [sp, #8]
    fa46:	2400      	movs	r4, #0
    fa48:	4019      	ands	r1, r3
    fa4a:	468c      	mov	ip, r1
    fa4c:	e5b8      	b.n	f5c0 <__aeabi_ddiv+0x19c>
    fa4e:	4552      	cmp	r2, sl
    fa50:	d8be      	bhi.n	f9d0 <__aeabi_ddiv+0x5ac>
    fa52:	468b      	mov	fp, r1
    fa54:	2500      	movs	r5, #0
    fa56:	e660      	b.n	f71a <__aeabi_ddiv+0x2f6>
    fa58:	9d03      	ldr	r5, [sp, #12]
    fa5a:	429d      	cmp	r5, r3
    fa5c:	d3c6      	bcc.n	f9ec <__aeabi_ddiv+0x5c8>
    fa5e:	0011      	movs	r1, r2
    fa60:	e762      	b.n	f928 <__aeabi_ddiv+0x504>
    fa62:	2500      	movs	r5, #0
    fa64:	e7d8      	b.n	fa18 <__aeabi_ddiv+0x5f4>
    fa66:	2280      	movs	r2, #128	; 0x80
    fa68:	465b      	mov	r3, fp
    fa6a:	0312      	lsls	r2, r2, #12
    fa6c:	431a      	orrs	r2, r3
    fa6e:	9b01      	ldr	r3, [sp, #4]
    fa70:	0312      	lsls	r2, r2, #12
    fa72:	0b12      	lsrs	r2, r2, #12
    fa74:	469c      	mov	ip, r3
    fa76:	4688      	mov	r8, r1
    fa78:	4c03      	ldr	r4, [pc, #12]	; (fa88 <__aeabi_ddiv+0x664>)
    fa7a:	e5a1      	b.n	f5c0 <__aeabi_ddiv+0x19c>
    fa7c:	000003ff 	.word	0x000003ff
    fa80:	feffffff 	.word	0xfeffffff
    fa84:	000007fe 	.word	0x000007fe
    fa88:	000007ff 	.word	0x000007ff

0000fa8c <__eqdf2>:
    fa8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa8e:	464f      	mov	r7, r9
    fa90:	4646      	mov	r6, r8
    fa92:	46d6      	mov	lr, sl
    fa94:	005c      	lsls	r4, r3, #1
    fa96:	b5c0      	push	{r6, r7, lr}
    fa98:	031f      	lsls	r7, r3, #12
    fa9a:	0fdb      	lsrs	r3, r3, #31
    fa9c:	469a      	mov	sl, r3
    fa9e:	4b17      	ldr	r3, [pc, #92]	; (fafc <__eqdf2+0x70>)
    faa0:	030e      	lsls	r6, r1, #12
    faa2:	004d      	lsls	r5, r1, #1
    faa4:	4684      	mov	ip, r0
    faa6:	4680      	mov	r8, r0
    faa8:	0b36      	lsrs	r6, r6, #12
    faaa:	0d6d      	lsrs	r5, r5, #21
    faac:	0fc9      	lsrs	r1, r1, #31
    faae:	4691      	mov	r9, r2
    fab0:	0b3f      	lsrs	r7, r7, #12
    fab2:	0d64      	lsrs	r4, r4, #21
    fab4:	2001      	movs	r0, #1
    fab6:	429d      	cmp	r5, r3
    fab8:	d008      	beq.n	facc <__eqdf2+0x40>
    faba:	429c      	cmp	r4, r3
    fabc:	d001      	beq.n	fac2 <__eqdf2+0x36>
    fabe:	42a5      	cmp	r5, r4
    fac0:	d00b      	beq.n	fada <__eqdf2+0x4e>
    fac2:	bc1c      	pop	{r2, r3, r4}
    fac4:	4690      	mov	r8, r2
    fac6:	4699      	mov	r9, r3
    fac8:	46a2      	mov	sl, r4
    faca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    facc:	4663      	mov	r3, ip
    face:	4333      	orrs	r3, r6
    fad0:	d1f7      	bne.n	fac2 <__eqdf2+0x36>
    fad2:	42ac      	cmp	r4, r5
    fad4:	d1f5      	bne.n	fac2 <__eqdf2+0x36>
    fad6:	433a      	orrs	r2, r7
    fad8:	d1f3      	bne.n	fac2 <__eqdf2+0x36>
    fada:	2001      	movs	r0, #1
    fadc:	42be      	cmp	r6, r7
    fade:	d1f0      	bne.n	fac2 <__eqdf2+0x36>
    fae0:	45c8      	cmp	r8, r9
    fae2:	d1ee      	bne.n	fac2 <__eqdf2+0x36>
    fae4:	4551      	cmp	r1, sl
    fae6:	d007      	beq.n	faf8 <__eqdf2+0x6c>
    fae8:	2d00      	cmp	r5, #0
    faea:	d1ea      	bne.n	fac2 <__eqdf2+0x36>
    faec:	4663      	mov	r3, ip
    faee:	431e      	orrs	r6, r3
    faf0:	0030      	movs	r0, r6
    faf2:	1e46      	subs	r6, r0, #1
    faf4:	41b0      	sbcs	r0, r6
    faf6:	e7e4      	b.n	fac2 <__eqdf2+0x36>
    faf8:	2000      	movs	r0, #0
    fafa:	e7e2      	b.n	fac2 <__eqdf2+0x36>
    fafc:	000007ff 	.word	0x000007ff

0000fb00 <__gedf2>:
    fb00:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb02:	4645      	mov	r5, r8
    fb04:	46de      	mov	lr, fp
    fb06:	4657      	mov	r7, sl
    fb08:	464e      	mov	r6, r9
    fb0a:	b5e0      	push	{r5, r6, r7, lr}
    fb0c:	031f      	lsls	r7, r3, #12
    fb0e:	0b3d      	lsrs	r5, r7, #12
    fb10:	4f2c      	ldr	r7, [pc, #176]	; (fbc4 <__gedf2+0xc4>)
    fb12:	030e      	lsls	r6, r1, #12
    fb14:	004c      	lsls	r4, r1, #1
    fb16:	46ab      	mov	fp, r5
    fb18:	005d      	lsls	r5, r3, #1
    fb1a:	4684      	mov	ip, r0
    fb1c:	0b36      	lsrs	r6, r6, #12
    fb1e:	0d64      	lsrs	r4, r4, #21
    fb20:	0fc9      	lsrs	r1, r1, #31
    fb22:	4690      	mov	r8, r2
    fb24:	0d6d      	lsrs	r5, r5, #21
    fb26:	0fdb      	lsrs	r3, r3, #31
    fb28:	42bc      	cmp	r4, r7
    fb2a:	d02a      	beq.n	fb82 <__gedf2+0x82>
    fb2c:	4f25      	ldr	r7, [pc, #148]	; (fbc4 <__gedf2+0xc4>)
    fb2e:	42bd      	cmp	r5, r7
    fb30:	d02d      	beq.n	fb8e <__gedf2+0x8e>
    fb32:	2c00      	cmp	r4, #0
    fb34:	d10f      	bne.n	fb56 <__gedf2+0x56>
    fb36:	4330      	orrs	r0, r6
    fb38:	0007      	movs	r7, r0
    fb3a:	4681      	mov	r9, r0
    fb3c:	4278      	negs	r0, r7
    fb3e:	4178      	adcs	r0, r7
    fb40:	b2c0      	uxtb	r0, r0
    fb42:	2d00      	cmp	r5, #0
    fb44:	d117      	bne.n	fb76 <__gedf2+0x76>
    fb46:	465f      	mov	r7, fp
    fb48:	433a      	orrs	r2, r7
    fb4a:	d114      	bne.n	fb76 <__gedf2+0x76>
    fb4c:	464b      	mov	r3, r9
    fb4e:	2000      	movs	r0, #0
    fb50:	2b00      	cmp	r3, #0
    fb52:	d00a      	beq.n	fb6a <__gedf2+0x6a>
    fb54:	e006      	b.n	fb64 <__gedf2+0x64>
    fb56:	2d00      	cmp	r5, #0
    fb58:	d102      	bne.n	fb60 <__gedf2+0x60>
    fb5a:	4658      	mov	r0, fp
    fb5c:	4302      	orrs	r2, r0
    fb5e:	d001      	beq.n	fb64 <__gedf2+0x64>
    fb60:	4299      	cmp	r1, r3
    fb62:	d018      	beq.n	fb96 <__gedf2+0x96>
    fb64:	4248      	negs	r0, r1
    fb66:	2101      	movs	r1, #1
    fb68:	4308      	orrs	r0, r1
    fb6a:	bc3c      	pop	{r2, r3, r4, r5}
    fb6c:	4690      	mov	r8, r2
    fb6e:	4699      	mov	r9, r3
    fb70:	46a2      	mov	sl, r4
    fb72:	46ab      	mov	fp, r5
    fb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb76:	2800      	cmp	r0, #0
    fb78:	d0f2      	beq.n	fb60 <__gedf2+0x60>
    fb7a:	2001      	movs	r0, #1
    fb7c:	3b01      	subs	r3, #1
    fb7e:	4318      	orrs	r0, r3
    fb80:	e7f3      	b.n	fb6a <__gedf2+0x6a>
    fb82:	0037      	movs	r7, r6
    fb84:	4307      	orrs	r7, r0
    fb86:	d0d1      	beq.n	fb2c <__gedf2+0x2c>
    fb88:	2002      	movs	r0, #2
    fb8a:	4240      	negs	r0, r0
    fb8c:	e7ed      	b.n	fb6a <__gedf2+0x6a>
    fb8e:	465f      	mov	r7, fp
    fb90:	4317      	orrs	r7, r2
    fb92:	d0ce      	beq.n	fb32 <__gedf2+0x32>
    fb94:	e7f8      	b.n	fb88 <__gedf2+0x88>
    fb96:	42ac      	cmp	r4, r5
    fb98:	dce4      	bgt.n	fb64 <__gedf2+0x64>
    fb9a:	da03      	bge.n	fba4 <__gedf2+0xa4>
    fb9c:	1e48      	subs	r0, r1, #1
    fb9e:	2101      	movs	r1, #1
    fba0:	4308      	orrs	r0, r1
    fba2:	e7e2      	b.n	fb6a <__gedf2+0x6a>
    fba4:	455e      	cmp	r6, fp
    fba6:	d8dd      	bhi.n	fb64 <__gedf2+0x64>
    fba8:	d006      	beq.n	fbb8 <__gedf2+0xb8>
    fbaa:	2000      	movs	r0, #0
    fbac:	455e      	cmp	r6, fp
    fbae:	d2dc      	bcs.n	fb6a <__gedf2+0x6a>
    fbb0:	2301      	movs	r3, #1
    fbb2:	1e48      	subs	r0, r1, #1
    fbb4:	4318      	orrs	r0, r3
    fbb6:	e7d8      	b.n	fb6a <__gedf2+0x6a>
    fbb8:	45c4      	cmp	ip, r8
    fbba:	d8d3      	bhi.n	fb64 <__gedf2+0x64>
    fbbc:	2000      	movs	r0, #0
    fbbe:	45c4      	cmp	ip, r8
    fbc0:	d3f6      	bcc.n	fbb0 <__gedf2+0xb0>
    fbc2:	e7d2      	b.n	fb6a <__gedf2+0x6a>
    fbc4:	000007ff 	.word	0x000007ff

0000fbc8 <__ledf2>:
    fbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fbca:	464e      	mov	r6, r9
    fbcc:	4645      	mov	r5, r8
    fbce:	46de      	mov	lr, fp
    fbd0:	4657      	mov	r7, sl
    fbd2:	005c      	lsls	r4, r3, #1
    fbd4:	b5e0      	push	{r5, r6, r7, lr}
    fbd6:	031f      	lsls	r7, r3, #12
    fbd8:	0fdb      	lsrs	r3, r3, #31
    fbda:	4699      	mov	r9, r3
    fbdc:	4b2a      	ldr	r3, [pc, #168]	; (fc88 <__ledf2+0xc0>)
    fbde:	030e      	lsls	r6, r1, #12
    fbe0:	004d      	lsls	r5, r1, #1
    fbe2:	0fc9      	lsrs	r1, r1, #31
    fbe4:	4684      	mov	ip, r0
    fbe6:	0b36      	lsrs	r6, r6, #12
    fbe8:	0d6d      	lsrs	r5, r5, #21
    fbea:	468b      	mov	fp, r1
    fbec:	4690      	mov	r8, r2
    fbee:	0b3f      	lsrs	r7, r7, #12
    fbf0:	0d64      	lsrs	r4, r4, #21
    fbf2:	429d      	cmp	r5, r3
    fbf4:	d020      	beq.n	fc38 <__ledf2+0x70>
    fbf6:	4b24      	ldr	r3, [pc, #144]	; (fc88 <__ledf2+0xc0>)
    fbf8:	429c      	cmp	r4, r3
    fbfa:	d022      	beq.n	fc42 <__ledf2+0x7a>
    fbfc:	2d00      	cmp	r5, #0
    fbfe:	d112      	bne.n	fc26 <__ledf2+0x5e>
    fc00:	4330      	orrs	r0, r6
    fc02:	4243      	negs	r3, r0
    fc04:	4143      	adcs	r3, r0
    fc06:	b2db      	uxtb	r3, r3
    fc08:	2c00      	cmp	r4, #0
    fc0a:	d01f      	beq.n	fc4c <__ledf2+0x84>
    fc0c:	2b00      	cmp	r3, #0
    fc0e:	d00c      	beq.n	fc2a <__ledf2+0x62>
    fc10:	464b      	mov	r3, r9
    fc12:	2001      	movs	r0, #1
    fc14:	3b01      	subs	r3, #1
    fc16:	4303      	orrs	r3, r0
    fc18:	0018      	movs	r0, r3
    fc1a:	bc3c      	pop	{r2, r3, r4, r5}
    fc1c:	4690      	mov	r8, r2
    fc1e:	4699      	mov	r9, r3
    fc20:	46a2      	mov	sl, r4
    fc22:	46ab      	mov	fp, r5
    fc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc26:	2c00      	cmp	r4, #0
    fc28:	d016      	beq.n	fc58 <__ledf2+0x90>
    fc2a:	45cb      	cmp	fp, r9
    fc2c:	d017      	beq.n	fc5e <__ledf2+0x96>
    fc2e:	465b      	mov	r3, fp
    fc30:	4259      	negs	r1, r3
    fc32:	2301      	movs	r3, #1
    fc34:	430b      	orrs	r3, r1
    fc36:	e7ef      	b.n	fc18 <__ledf2+0x50>
    fc38:	0031      	movs	r1, r6
    fc3a:	2302      	movs	r3, #2
    fc3c:	4301      	orrs	r1, r0
    fc3e:	d1eb      	bne.n	fc18 <__ledf2+0x50>
    fc40:	e7d9      	b.n	fbf6 <__ledf2+0x2e>
    fc42:	0039      	movs	r1, r7
    fc44:	2302      	movs	r3, #2
    fc46:	4311      	orrs	r1, r2
    fc48:	d1e6      	bne.n	fc18 <__ledf2+0x50>
    fc4a:	e7d7      	b.n	fbfc <__ledf2+0x34>
    fc4c:	433a      	orrs	r2, r7
    fc4e:	d1dd      	bne.n	fc0c <__ledf2+0x44>
    fc50:	2300      	movs	r3, #0
    fc52:	2800      	cmp	r0, #0
    fc54:	d0e0      	beq.n	fc18 <__ledf2+0x50>
    fc56:	e7ea      	b.n	fc2e <__ledf2+0x66>
    fc58:	433a      	orrs	r2, r7
    fc5a:	d1e6      	bne.n	fc2a <__ledf2+0x62>
    fc5c:	e7e7      	b.n	fc2e <__ledf2+0x66>
    fc5e:	42a5      	cmp	r5, r4
    fc60:	dce5      	bgt.n	fc2e <__ledf2+0x66>
    fc62:	db05      	blt.n	fc70 <__ledf2+0xa8>
    fc64:	42be      	cmp	r6, r7
    fc66:	d8e2      	bhi.n	fc2e <__ledf2+0x66>
    fc68:	d007      	beq.n	fc7a <__ledf2+0xb2>
    fc6a:	2300      	movs	r3, #0
    fc6c:	42be      	cmp	r6, r7
    fc6e:	d2d3      	bcs.n	fc18 <__ledf2+0x50>
    fc70:	4659      	mov	r1, fp
    fc72:	2301      	movs	r3, #1
    fc74:	3901      	subs	r1, #1
    fc76:	430b      	orrs	r3, r1
    fc78:	e7ce      	b.n	fc18 <__ledf2+0x50>
    fc7a:	45c4      	cmp	ip, r8
    fc7c:	d8d7      	bhi.n	fc2e <__ledf2+0x66>
    fc7e:	2300      	movs	r3, #0
    fc80:	45c4      	cmp	ip, r8
    fc82:	d3f5      	bcc.n	fc70 <__ledf2+0xa8>
    fc84:	e7c8      	b.n	fc18 <__ledf2+0x50>
    fc86:	46c0      	nop			; (mov r8, r8)
    fc88:	000007ff 	.word	0x000007ff

0000fc8c <__aeabi_dmul>:
    fc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc8e:	4657      	mov	r7, sl
    fc90:	4645      	mov	r5, r8
    fc92:	46de      	mov	lr, fp
    fc94:	464e      	mov	r6, r9
    fc96:	b5e0      	push	{r5, r6, r7, lr}
    fc98:	030c      	lsls	r4, r1, #12
    fc9a:	4698      	mov	r8, r3
    fc9c:	004e      	lsls	r6, r1, #1
    fc9e:	0b23      	lsrs	r3, r4, #12
    fca0:	b087      	sub	sp, #28
    fca2:	0007      	movs	r7, r0
    fca4:	4692      	mov	sl, r2
    fca6:	469b      	mov	fp, r3
    fca8:	0d76      	lsrs	r6, r6, #21
    fcaa:	0fcd      	lsrs	r5, r1, #31
    fcac:	2e00      	cmp	r6, #0
    fcae:	d06b      	beq.n	fd88 <__aeabi_dmul+0xfc>
    fcb0:	4b6d      	ldr	r3, [pc, #436]	; (fe68 <__aeabi_dmul+0x1dc>)
    fcb2:	429e      	cmp	r6, r3
    fcb4:	d035      	beq.n	fd22 <__aeabi_dmul+0x96>
    fcb6:	2480      	movs	r4, #128	; 0x80
    fcb8:	465b      	mov	r3, fp
    fcba:	0f42      	lsrs	r2, r0, #29
    fcbc:	0424      	lsls	r4, r4, #16
    fcbe:	00db      	lsls	r3, r3, #3
    fcc0:	4314      	orrs	r4, r2
    fcc2:	431c      	orrs	r4, r3
    fcc4:	00c3      	lsls	r3, r0, #3
    fcc6:	4699      	mov	r9, r3
    fcc8:	4b68      	ldr	r3, [pc, #416]	; (fe6c <__aeabi_dmul+0x1e0>)
    fcca:	46a3      	mov	fp, r4
    fccc:	469c      	mov	ip, r3
    fcce:	2300      	movs	r3, #0
    fcd0:	2700      	movs	r7, #0
    fcd2:	4466      	add	r6, ip
    fcd4:	9302      	str	r3, [sp, #8]
    fcd6:	4643      	mov	r3, r8
    fcd8:	031c      	lsls	r4, r3, #12
    fcda:	005a      	lsls	r2, r3, #1
    fcdc:	0fdb      	lsrs	r3, r3, #31
    fcde:	4650      	mov	r0, sl
    fce0:	0b24      	lsrs	r4, r4, #12
    fce2:	0d52      	lsrs	r2, r2, #21
    fce4:	4698      	mov	r8, r3
    fce6:	d100      	bne.n	fcea <__aeabi_dmul+0x5e>
    fce8:	e076      	b.n	fdd8 <__aeabi_dmul+0x14c>
    fcea:	4b5f      	ldr	r3, [pc, #380]	; (fe68 <__aeabi_dmul+0x1dc>)
    fcec:	429a      	cmp	r2, r3
    fcee:	d06d      	beq.n	fdcc <__aeabi_dmul+0x140>
    fcf0:	2380      	movs	r3, #128	; 0x80
    fcf2:	0f41      	lsrs	r1, r0, #29
    fcf4:	041b      	lsls	r3, r3, #16
    fcf6:	430b      	orrs	r3, r1
    fcf8:	495c      	ldr	r1, [pc, #368]	; (fe6c <__aeabi_dmul+0x1e0>)
    fcfa:	00e4      	lsls	r4, r4, #3
    fcfc:	468c      	mov	ip, r1
    fcfe:	431c      	orrs	r4, r3
    fd00:	00c3      	lsls	r3, r0, #3
    fd02:	2000      	movs	r0, #0
    fd04:	4462      	add	r2, ip
    fd06:	4641      	mov	r1, r8
    fd08:	18b6      	adds	r6, r6, r2
    fd0a:	4069      	eors	r1, r5
    fd0c:	1c72      	adds	r2, r6, #1
    fd0e:	9101      	str	r1, [sp, #4]
    fd10:	4694      	mov	ip, r2
    fd12:	4307      	orrs	r7, r0
    fd14:	2f0f      	cmp	r7, #15
    fd16:	d900      	bls.n	fd1a <__aeabi_dmul+0x8e>
    fd18:	e0b0      	b.n	fe7c <__aeabi_dmul+0x1f0>
    fd1a:	4a55      	ldr	r2, [pc, #340]	; (fe70 <__aeabi_dmul+0x1e4>)
    fd1c:	00bf      	lsls	r7, r7, #2
    fd1e:	59d2      	ldr	r2, [r2, r7]
    fd20:	4697      	mov	pc, r2
    fd22:	465b      	mov	r3, fp
    fd24:	4303      	orrs	r3, r0
    fd26:	4699      	mov	r9, r3
    fd28:	d000      	beq.n	fd2c <__aeabi_dmul+0xa0>
    fd2a:	e087      	b.n	fe3c <__aeabi_dmul+0x1b0>
    fd2c:	2300      	movs	r3, #0
    fd2e:	469b      	mov	fp, r3
    fd30:	3302      	adds	r3, #2
    fd32:	2708      	movs	r7, #8
    fd34:	9302      	str	r3, [sp, #8]
    fd36:	e7ce      	b.n	fcd6 <__aeabi_dmul+0x4a>
    fd38:	4642      	mov	r2, r8
    fd3a:	9201      	str	r2, [sp, #4]
    fd3c:	2802      	cmp	r0, #2
    fd3e:	d067      	beq.n	fe10 <__aeabi_dmul+0x184>
    fd40:	2803      	cmp	r0, #3
    fd42:	d100      	bne.n	fd46 <__aeabi_dmul+0xba>
    fd44:	e20e      	b.n	10164 <__aeabi_dmul+0x4d8>
    fd46:	2801      	cmp	r0, #1
    fd48:	d000      	beq.n	fd4c <__aeabi_dmul+0xc0>
    fd4a:	e162      	b.n	10012 <__aeabi_dmul+0x386>
    fd4c:	2300      	movs	r3, #0
    fd4e:	2400      	movs	r4, #0
    fd50:	2200      	movs	r2, #0
    fd52:	4699      	mov	r9, r3
    fd54:	9901      	ldr	r1, [sp, #4]
    fd56:	4001      	ands	r1, r0
    fd58:	b2cd      	uxtb	r5, r1
    fd5a:	2100      	movs	r1, #0
    fd5c:	0312      	lsls	r2, r2, #12
    fd5e:	0d0b      	lsrs	r3, r1, #20
    fd60:	0b12      	lsrs	r2, r2, #12
    fd62:	051b      	lsls	r3, r3, #20
    fd64:	4313      	orrs	r3, r2
    fd66:	4a43      	ldr	r2, [pc, #268]	; (fe74 <__aeabi_dmul+0x1e8>)
    fd68:	0524      	lsls	r4, r4, #20
    fd6a:	4013      	ands	r3, r2
    fd6c:	431c      	orrs	r4, r3
    fd6e:	0064      	lsls	r4, r4, #1
    fd70:	07ed      	lsls	r5, r5, #31
    fd72:	0864      	lsrs	r4, r4, #1
    fd74:	432c      	orrs	r4, r5
    fd76:	4648      	mov	r0, r9
    fd78:	0021      	movs	r1, r4
    fd7a:	b007      	add	sp, #28
    fd7c:	bc3c      	pop	{r2, r3, r4, r5}
    fd7e:	4690      	mov	r8, r2
    fd80:	4699      	mov	r9, r3
    fd82:	46a2      	mov	sl, r4
    fd84:	46ab      	mov	fp, r5
    fd86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd88:	4303      	orrs	r3, r0
    fd8a:	4699      	mov	r9, r3
    fd8c:	d04f      	beq.n	fe2e <__aeabi_dmul+0x1a2>
    fd8e:	465b      	mov	r3, fp
    fd90:	2b00      	cmp	r3, #0
    fd92:	d100      	bne.n	fd96 <__aeabi_dmul+0x10a>
    fd94:	e189      	b.n	100aa <__aeabi_dmul+0x41e>
    fd96:	4658      	mov	r0, fp
    fd98:	f000 fd9a 	bl	108d0 <__clzsi2>
    fd9c:	0003      	movs	r3, r0
    fd9e:	3b0b      	subs	r3, #11
    fda0:	2b1c      	cmp	r3, #28
    fda2:	dd00      	ble.n	fda6 <__aeabi_dmul+0x11a>
    fda4:	e17a      	b.n	1009c <__aeabi_dmul+0x410>
    fda6:	221d      	movs	r2, #29
    fda8:	1ad3      	subs	r3, r2, r3
    fdaa:	003a      	movs	r2, r7
    fdac:	0001      	movs	r1, r0
    fdae:	465c      	mov	r4, fp
    fdb0:	40da      	lsrs	r2, r3
    fdb2:	3908      	subs	r1, #8
    fdb4:	408c      	lsls	r4, r1
    fdb6:	0013      	movs	r3, r2
    fdb8:	408f      	lsls	r7, r1
    fdba:	4323      	orrs	r3, r4
    fdbc:	469b      	mov	fp, r3
    fdbe:	46b9      	mov	r9, r7
    fdc0:	2300      	movs	r3, #0
    fdc2:	4e2d      	ldr	r6, [pc, #180]	; (fe78 <__aeabi_dmul+0x1ec>)
    fdc4:	2700      	movs	r7, #0
    fdc6:	1a36      	subs	r6, r6, r0
    fdc8:	9302      	str	r3, [sp, #8]
    fdca:	e784      	b.n	fcd6 <__aeabi_dmul+0x4a>
    fdcc:	4653      	mov	r3, sl
    fdce:	4323      	orrs	r3, r4
    fdd0:	d12a      	bne.n	fe28 <__aeabi_dmul+0x19c>
    fdd2:	2400      	movs	r4, #0
    fdd4:	2002      	movs	r0, #2
    fdd6:	e796      	b.n	fd06 <__aeabi_dmul+0x7a>
    fdd8:	4653      	mov	r3, sl
    fdda:	4323      	orrs	r3, r4
    fddc:	d020      	beq.n	fe20 <__aeabi_dmul+0x194>
    fdde:	2c00      	cmp	r4, #0
    fde0:	d100      	bne.n	fde4 <__aeabi_dmul+0x158>
    fde2:	e157      	b.n	10094 <__aeabi_dmul+0x408>
    fde4:	0020      	movs	r0, r4
    fde6:	f000 fd73 	bl	108d0 <__clzsi2>
    fdea:	0003      	movs	r3, r0
    fdec:	3b0b      	subs	r3, #11
    fdee:	2b1c      	cmp	r3, #28
    fdf0:	dd00      	ble.n	fdf4 <__aeabi_dmul+0x168>
    fdf2:	e149      	b.n	10088 <__aeabi_dmul+0x3fc>
    fdf4:	211d      	movs	r1, #29
    fdf6:	1acb      	subs	r3, r1, r3
    fdf8:	4651      	mov	r1, sl
    fdfa:	0002      	movs	r2, r0
    fdfc:	40d9      	lsrs	r1, r3
    fdfe:	4653      	mov	r3, sl
    fe00:	3a08      	subs	r2, #8
    fe02:	4094      	lsls	r4, r2
    fe04:	4093      	lsls	r3, r2
    fe06:	430c      	orrs	r4, r1
    fe08:	4a1b      	ldr	r2, [pc, #108]	; (fe78 <__aeabi_dmul+0x1ec>)
    fe0a:	1a12      	subs	r2, r2, r0
    fe0c:	2000      	movs	r0, #0
    fe0e:	e77a      	b.n	fd06 <__aeabi_dmul+0x7a>
    fe10:	2501      	movs	r5, #1
    fe12:	9b01      	ldr	r3, [sp, #4]
    fe14:	4c14      	ldr	r4, [pc, #80]	; (fe68 <__aeabi_dmul+0x1dc>)
    fe16:	401d      	ands	r5, r3
    fe18:	2300      	movs	r3, #0
    fe1a:	2200      	movs	r2, #0
    fe1c:	4699      	mov	r9, r3
    fe1e:	e79c      	b.n	fd5a <__aeabi_dmul+0xce>
    fe20:	2400      	movs	r4, #0
    fe22:	2200      	movs	r2, #0
    fe24:	2001      	movs	r0, #1
    fe26:	e76e      	b.n	fd06 <__aeabi_dmul+0x7a>
    fe28:	4653      	mov	r3, sl
    fe2a:	2003      	movs	r0, #3
    fe2c:	e76b      	b.n	fd06 <__aeabi_dmul+0x7a>
    fe2e:	2300      	movs	r3, #0
    fe30:	469b      	mov	fp, r3
    fe32:	3301      	adds	r3, #1
    fe34:	2704      	movs	r7, #4
    fe36:	2600      	movs	r6, #0
    fe38:	9302      	str	r3, [sp, #8]
    fe3a:	e74c      	b.n	fcd6 <__aeabi_dmul+0x4a>
    fe3c:	2303      	movs	r3, #3
    fe3e:	4681      	mov	r9, r0
    fe40:	270c      	movs	r7, #12
    fe42:	9302      	str	r3, [sp, #8]
    fe44:	e747      	b.n	fcd6 <__aeabi_dmul+0x4a>
    fe46:	2280      	movs	r2, #128	; 0x80
    fe48:	2300      	movs	r3, #0
    fe4a:	2500      	movs	r5, #0
    fe4c:	0312      	lsls	r2, r2, #12
    fe4e:	4699      	mov	r9, r3
    fe50:	4c05      	ldr	r4, [pc, #20]	; (fe68 <__aeabi_dmul+0x1dc>)
    fe52:	e782      	b.n	fd5a <__aeabi_dmul+0xce>
    fe54:	465c      	mov	r4, fp
    fe56:	464b      	mov	r3, r9
    fe58:	9802      	ldr	r0, [sp, #8]
    fe5a:	e76f      	b.n	fd3c <__aeabi_dmul+0xb0>
    fe5c:	465c      	mov	r4, fp
    fe5e:	464b      	mov	r3, r9
    fe60:	9501      	str	r5, [sp, #4]
    fe62:	9802      	ldr	r0, [sp, #8]
    fe64:	e76a      	b.n	fd3c <__aeabi_dmul+0xb0>
    fe66:	46c0      	nop			; (mov r8, r8)
    fe68:	000007ff 	.word	0x000007ff
    fe6c:	fffffc01 	.word	0xfffffc01
    fe70:	00014308 	.word	0x00014308
    fe74:	800fffff 	.word	0x800fffff
    fe78:	fffffc0d 	.word	0xfffffc0d
    fe7c:	464a      	mov	r2, r9
    fe7e:	4649      	mov	r1, r9
    fe80:	0c17      	lsrs	r7, r2, #16
    fe82:	0c1a      	lsrs	r2, r3, #16
    fe84:	041b      	lsls	r3, r3, #16
    fe86:	0c1b      	lsrs	r3, r3, #16
    fe88:	0408      	lsls	r0, r1, #16
    fe8a:	0019      	movs	r1, r3
    fe8c:	0c00      	lsrs	r0, r0, #16
    fe8e:	4341      	muls	r1, r0
    fe90:	0015      	movs	r5, r2
    fe92:	4688      	mov	r8, r1
    fe94:	0019      	movs	r1, r3
    fe96:	437d      	muls	r5, r7
    fe98:	4379      	muls	r1, r7
    fe9a:	9503      	str	r5, [sp, #12]
    fe9c:	4689      	mov	r9, r1
    fe9e:	0029      	movs	r1, r5
    fea0:	0015      	movs	r5, r2
    fea2:	4345      	muls	r5, r0
    fea4:	444d      	add	r5, r9
    fea6:	9502      	str	r5, [sp, #8]
    fea8:	4645      	mov	r5, r8
    feaa:	0c2d      	lsrs	r5, r5, #16
    feac:	46aa      	mov	sl, r5
    feae:	9d02      	ldr	r5, [sp, #8]
    feb0:	4455      	add	r5, sl
    feb2:	45a9      	cmp	r9, r5
    feb4:	d906      	bls.n	fec4 <__aeabi_dmul+0x238>
    feb6:	468a      	mov	sl, r1
    feb8:	2180      	movs	r1, #128	; 0x80
    feba:	0249      	lsls	r1, r1, #9
    febc:	4689      	mov	r9, r1
    febe:	44ca      	add	sl, r9
    fec0:	4651      	mov	r1, sl
    fec2:	9103      	str	r1, [sp, #12]
    fec4:	0c29      	lsrs	r1, r5, #16
    fec6:	9104      	str	r1, [sp, #16]
    fec8:	4641      	mov	r1, r8
    feca:	0409      	lsls	r1, r1, #16
    fecc:	042d      	lsls	r5, r5, #16
    fece:	0c09      	lsrs	r1, r1, #16
    fed0:	4688      	mov	r8, r1
    fed2:	0029      	movs	r1, r5
    fed4:	0c25      	lsrs	r5, r4, #16
    fed6:	0424      	lsls	r4, r4, #16
    fed8:	4441      	add	r1, r8
    feda:	0c24      	lsrs	r4, r4, #16
    fedc:	9105      	str	r1, [sp, #20]
    fede:	0021      	movs	r1, r4
    fee0:	4341      	muls	r1, r0
    fee2:	4688      	mov	r8, r1
    fee4:	0021      	movs	r1, r4
    fee6:	4379      	muls	r1, r7
    fee8:	468a      	mov	sl, r1
    feea:	4368      	muls	r0, r5
    feec:	4641      	mov	r1, r8
    feee:	4450      	add	r0, sl
    fef0:	4681      	mov	r9, r0
    fef2:	0c08      	lsrs	r0, r1, #16
    fef4:	4448      	add	r0, r9
    fef6:	436f      	muls	r7, r5
    fef8:	4582      	cmp	sl, r0
    fefa:	d903      	bls.n	ff04 <__aeabi_dmul+0x278>
    fefc:	2180      	movs	r1, #128	; 0x80
    fefe:	0249      	lsls	r1, r1, #9
    ff00:	4689      	mov	r9, r1
    ff02:	444f      	add	r7, r9
    ff04:	0c01      	lsrs	r1, r0, #16
    ff06:	4689      	mov	r9, r1
    ff08:	0039      	movs	r1, r7
    ff0a:	4449      	add	r1, r9
    ff0c:	9102      	str	r1, [sp, #8]
    ff0e:	4641      	mov	r1, r8
    ff10:	040f      	lsls	r7, r1, #16
    ff12:	9904      	ldr	r1, [sp, #16]
    ff14:	0c3f      	lsrs	r7, r7, #16
    ff16:	4688      	mov	r8, r1
    ff18:	0400      	lsls	r0, r0, #16
    ff1a:	19c0      	adds	r0, r0, r7
    ff1c:	4480      	add	r8, r0
    ff1e:	4641      	mov	r1, r8
    ff20:	9104      	str	r1, [sp, #16]
    ff22:	4659      	mov	r1, fp
    ff24:	0c0f      	lsrs	r7, r1, #16
    ff26:	0409      	lsls	r1, r1, #16
    ff28:	0c09      	lsrs	r1, r1, #16
    ff2a:	4688      	mov	r8, r1
    ff2c:	4359      	muls	r1, r3
    ff2e:	468a      	mov	sl, r1
    ff30:	0039      	movs	r1, r7
    ff32:	4351      	muls	r1, r2
    ff34:	4689      	mov	r9, r1
    ff36:	4641      	mov	r1, r8
    ff38:	434a      	muls	r2, r1
    ff3a:	4651      	mov	r1, sl
    ff3c:	0c09      	lsrs	r1, r1, #16
    ff3e:	468b      	mov	fp, r1
    ff40:	437b      	muls	r3, r7
    ff42:	18d2      	adds	r2, r2, r3
    ff44:	445a      	add	r2, fp
    ff46:	4293      	cmp	r3, r2
    ff48:	d903      	bls.n	ff52 <__aeabi_dmul+0x2c6>
    ff4a:	2380      	movs	r3, #128	; 0x80
    ff4c:	025b      	lsls	r3, r3, #9
    ff4e:	469b      	mov	fp, r3
    ff50:	44d9      	add	r9, fp
    ff52:	4651      	mov	r1, sl
    ff54:	0409      	lsls	r1, r1, #16
    ff56:	0c09      	lsrs	r1, r1, #16
    ff58:	468a      	mov	sl, r1
    ff5a:	4641      	mov	r1, r8
    ff5c:	4361      	muls	r1, r4
    ff5e:	437c      	muls	r4, r7
    ff60:	0c13      	lsrs	r3, r2, #16
    ff62:	0412      	lsls	r2, r2, #16
    ff64:	444b      	add	r3, r9
    ff66:	4452      	add	r2, sl
    ff68:	46a1      	mov	r9, r4
    ff6a:	468a      	mov	sl, r1
    ff6c:	003c      	movs	r4, r7
    ff6e:	4641      	mov	r1, r8
    ff70:	436c      	muls	r4, r5
    ff72:	434d      	muls	r5, r1
    ff74:	4651      	mov	r1, sl
    ff76:	444d      	add	r5, r9
    ff78:	0c0f      	lsrs	r7, r1, #16
    ff7a:	197d      	adds	r5, r7, r5
    ff7c:	45a9      	cmp	r9, r5
    ff7e:	d903      	bls.n	ff88 <__aeabi_dmul+0x2fc>
    ff80:	2180      	movs	r1, #128	; 0x80
    ff82:	0249      	lsls	r1, r1, #9
    ff84:	4688      	mov	r8, r1
    ff86:	4444      	add	r4, r8
    ff88:	9f04      	ldr	r7, [sp, #16]
    ff8a:	9903      	ldr	r1, [sp, #12]
    ff8c:	46b8      	mov	r8, r7
    ff8e:	4441      	add	r1, r8
    ff90:	468b      	mov	fp, r1
    ff92:	4583      	cmp	fp, r0
    ff94:	4180      	sbcs	r0, r0
    ff96:	4241      	negs	r1, r0
    ff98:	4688      	mov	r8, r1
    ff9a:	4651      	mov	r1, sl
    ff9c:	0408      	lsls	r0, r1, #16
    ff9e:	042f      	lsls	r7, r5, #16
    ffa0:	0c00      	lsrs	r0, r0, #16
    ffa2:	183f      	adds	r7, r7, r0
    ffa4:	4658      	mov	r0, fp
    ffa6:	9902      	ldr	r1, [sp, #8]
    ffa8:	1810      	adds	r0, r2, r0
    ffaa:	4689      	mov	r9, r1
    ffac:	4290      	cmp	r0, r2
    ffae:	4192      	sbcs	r2, r2
    ffb0:	444f      	add	r7, r9
    ffb2:	46ba      	mov	sl, r7
    ffb4:	4252      	negs	r2, r2
    ffb6:	4699      	mov	r9, r3
    ffb8:	4693      	mov	fp, r2
    ffba:	44c2      	add	sl, r8
    ffbc:	44d1      	add	r9, sl
    ffbe:	44cb      	add	fp, r9
    ffc0:	428f      	cmp	r7, r1
    ffc2:	41bf      	sbcs	r7, r7
    ffc4:	45c2      	cmp	sl, r8
    ffc6:	4189      	sbcs	r1, r1
    ffc8:	4599      	cmp	r9, r3
    ffca:	419b      	sbcs	r3, r3
    ffcc:	4593      	cmp	fp, r2
    ffce:	4192      	sbcs	r2, r2
    ffd0:	427f      	negs	r7, r7
    ffd2:	4249      	negs	r1, r1
    ffd4:	0c2d      	lsrs	r5, r5, #16
    ffd6:	4252      	negs	r2, r2
    ffd8:	430f      	orrs	r7, r1
    ffda:	425b      	negs	r3, r3
    ffdc:	4313      	orrs	r3, r2
    ffde:	197f      	adds	r7, r7, r5
    ffe0:	18ff      	adds	r7, r7, r3
    ffe2:	465b      	mov	r3, fp
    ffe4:	193c      	adds	r4, r7, r4
    ffe6:	0ddb      	lsrs	r3, r3, #23
    ffe8:	9a05      	ldr	r2, [sp, #20]
    ffea:	0264      	lsls	r4, r4, #9
    ffec:	431c      	orrs	r4, r3
    ffee:	0243      	lsls	r3, r0, #9
    fff0:	4313      	orrs	r3, r2
    fff2:	1e5d      	subs	r5, r3, #1
    fff4:	41ab      	sbcs	r3, r5
    fff6:	465a      	mov	r2, fp
    fff8:	0dc0      	lsrs	r0, r0, #23
    fffa:	4303      	orrs	r3, r0
    fffc:	0252      	lsls	r2, r2, #9
    fffe:	4313      	orrs	r3, r2
   10000:	01e2      	lsls	r2, r4, #7
   10002:	d556      	bpl.n	100b2 <__aeabi_dmul+0x426>
   10004:	2001      	movs	r0, #1
   10006:	085a      	lsrs	r2, r3, #1
   10008:	4003      	ands	r3, r0
   1000a:	4313      	orrs	r3, r2
   1000c:	07e2      	lsls	r2, r4, #31
   1000e:	4313      	orrs	r3, r2
   10010:	0864      	lsrs	r4, r4, #1
   10012:	485a      	ldr	r0, [pc, #360]	; (1017c <__aeabi_dmul+0x4f0>)
   10014:	4460      	add	r0, ip
   10016:	2800      	cmp	r0, #0
   10018:	dd4d      	ble.n	100b6 <__aeabi_dmul+0x42a>
   1001a:	075a      	lsls	r2, r3, #29
   1001c:	d009      	beq.n	10032 <__aeabi_dmul+0x3a6>
   1001e:	220f      	movs	r2, #15
   10020:	401a      	ands	r2, r3
   10022:	2a04      	cmp	r2, #4
   10024:	d005      	beq.n	10032 <__aeabi_dmul+0x3a6>
   10026:	1d1a      	adds	r2, r3, #4
   10028:	429a      	cmp	r2, r3
   1002a:	419b      	sbcs	r3, r3
   1002c:	425b      	negs	r3, r3
   1002e:	18e4      	adds	r4, r4, r3
   10030:	0013      	movs	r3, r2
   10032:	01e2      	lsls	r2, r4, #7
   10034:	d504      	bpl.n	10040 <__aeabi_dmul+0x3b4>
   10036:	2080      	movs	r0, #128	; 0x80
   10038:	4a51      	ldr	r2, [pc, #324]	; (10180 <__aeabi_dmul+0x4f4>)
   1003a:	00c0      	lsls	r0, r0, #3
   1003c:	4014      	ands	r4, r2
   1003e:	4460      	add	r0, ip
   10040:	4a50      	ldr	r2, [pc, #320]	; (10184 <__aeabi_dmul+0x4f8>)
   10042:	4290      	cmp	r0, r2
   10044:	dd00      	ble.n	10048 <__aeabi_dmul+0x3bc>
   10046:	e6e3      	b.n	fe10 <__aeabi_dmul+0x184>
   10048:	2501      	movs	r5, #1
   1004a:	08db      	lsrs	r3, r3, #3
   1004c:	0762      	lsls	r2, r4, #29
   1004e:	431a      	orrs	r2, r3
   10050:	0264      	lsls	r4, r4, #9
   10052:	9b01      	ldr	r3, [sp, #4]
   10054:	4691      	mov	r9, r2
   10056:	0b22      	lsrs	r2, r4, #12
   10058:	0544      	lsls	r4, r0, #21
   1005a:	0d64      	lsrs	r4, r4, #21
   1005c:	401d      	ands	r5, r3
   1005e:	e67c      	b.n	fd5a <__aeabi_dmul+0xce>
   10060:	2280      	movs	r2, #128	; 0x80
   10062:	4659      	mov	r1, fp
   10064:	0312      	lsls	r2, r2, #12
   10066:	4211      	tst	r1, r2
   10068:	d008      	beq.n	1007c <__aeabi_dmul+0x3f0>
   1006a:	4214      	tst	r4, r2
   1006c:	d106      	bne.n	1007c <__aeabi_dmul+0x3f0>
   1006e:	4322      	orrs	r2, r4
   10070:	0312      	lsls	r2, r2, #12
   10072:	0b12      	lsrs	r2, r2, #12
   10074:	4645      	mov	r5, r8
   10076:	4699      	mov	r9, r3
   10078:	4c43      	ldr	r4, [pc, #268]	; (10188 <__aeabi_dmul+0x4fc>)
   1007a:	e66e      	b.n	fd5a <__aeabi_dmul+0xce>
   1007c:	465b      	mov	r3, fp
   1007e:	431a      	orrs	r2, r3
   10080:	0312      	lsls	r2, r2, #12
   10082:	0b12      	lsrs	r2, r2, #12
   10084:	4c40      	ldr	r4, [pc, #256]	; (10188 <__aeabi_dmul+0x4fc>)
   10086:	e668      	b.n	fd5a <__aeabi_dmul+0xce>
   10088:	0003      	movs	r3, r0
   1008a:	4654      	mov	r4, sl
   1008c:	3b28      	subs	r3, #40	; 0x28
   1008e:	409c      	lsls	r4, r3
   10090:	2300      	movs	r3, #0
   10092:	e6b9      	b.n	fe08 <__aeabi_dmul+0x17c>
   10094:	f000 fc1c 	bl	108d0 <__clzsi2>
   10098:	3020      	adds	r0, #32
   1009a:	e6a6      	b.n	fdea <__aeabi_dmul+0x15e>
   1009c:	0003      	movs	r3, r0
   1009e:	3b28      	subs	r3, #40	; 0x28
   100a0:	409f      	lsls	r7, r3
   100a2:	2300      	movs	r3, #0
   100a4:	46bb      	mov	fp, r7
   100a6:	4699      	mov	r9, r3
   100a8:	e68a      	b.n	fdc0 <__aeabi_dmul+0x134>
   100aa:	f000 fc11 	bl	108d0 <__clzsi2>
   100ae:	3020      	adds	r0, #32
   100b0:	e674      	b.n	fd9c <__aeabi_dmul+0x110>
   100b2:	46b4      	mov	ip, r6
   100b4:	e7ad      	b.n	10012 <__aeabi_dmul+0x386>
   100b6:	2501      	movs	r5, #1
   100b8:	1a2a      	subs	r2, r5, r0
   100ba:	2a38      	cmp	r2, #56	; 0x38
   100bc:	dd06      	ble.n	100cc <__aeabi_dmul+0x440>
   100be:	9b01      	ldr	r3, [sp, #4]
   100c0:	2400      	movs	r4, #0
   100c2:	401d      	ands	r5, r3
   100c4:	2300      	movs	r3, #0
   100c6:	2200      	movs	r2, #0
   100c8:	4699      	mov	r9, r3
   100ca:	e646      	b.n	fd5a <__aeabi_dmul+0xce>
   100cc:	2a1f      	cmp	r2, #31
   100ce:	dc21      	bgt.n	10114 <__aeabi_dmul+0x488>
   100d0:	2520      	movs	r5, #32
   100d2:	0020      	movs	r0, r4
   100d4:	1aad      	subs	r5, r5, r2
   100d6:	001e      	movs	r6, r3
   100d8:	40ab      	lsls	r3, r5
   100da:	40a8      	lsls	r0, r5
   100dc:	40d6      	lsrs	r6, r2
   100de:	1e5d      	subs	r5, r3, #1
   100e0:	41ab      	sbcs	r3, r5
   100e2:	4330      	orrs	r0, r6
   100e4:	4318      	orrs	r0, r3
   100e6:	40d4      	lsrs	r4, r2
   100e8:	0743      	lsls	r3, r0, #29
   100ea:	d009      	beq.n	10100 <__aeabi_dmul+0x474>
   100ec:	230f      	movs	r3, #15
   100ee:	4003      	ands	r3, r0
   100f0:	2b04      	cmp	r3, #4
   100f2:	d005      	beq.n	10100 <__aeabi_dmul+0x474>
   100f4:	0003      	movs	r3, r0
   100f6:	1d18      	adds	r0, r3, #4
   100f8:	4298      	cmp	r0, r3
   100fa:	419b      	sbcs	r3, r3
   100fc:	425b      	negs	r3, r3
   100fe:	18e4      	adds	r4, r4, r3
   10100:	0223      	lsls	r3, r4, #8
   10102:	d521      	bpl.n	10148 <__aeabi_dmul+0x4bc>
   10104:	2501      	movs	r5, #1
   10106:	9b01      	ldr	r3, [sp, #4]
   10108:	2401      	movs	r4, #1
   1010a:	401d      	ands	r5, r3
   1010c:	2300      	movs	r3, #0
   1010e:	2200      	movs	r2, #0
   10110:	4699      	mov	r9, r3
   10112:	e622      	b.n	fd5a <__aeabi_dmul+0xce>
   10114:	251f      	movs	r5, #31
   10116:	0021      	movs	r1, r4
   10118:	426d      	negs	r5, r5
   1011a:	1a28      	subs	r0, r5, r0
   1011c:	40c1      	lsrs	r1, r0
   1011e:	0008      	movs	r0, r1
   10120:	2a20      	cmp	r2, #32
   10122:	d01d      	beq.n	10160 <__aeabi_dmul+0x4d4>
   10124:	355f      	adds	r5, #95	; 0x5f
   10126:	1aaa      	subs	r2, r5, r2
   10128:	4094      	lsls	r4, r2
   1012a:	4323      	orrs	r3, r4
   1012c:	1e5c      	subs	r4, r3, #1
   1012e:	41a3      	sbcs	r3, r4
   10130:	2507      	movs	r5, #7
   10132:	4303      	orrs	r3, r0
   10134:	401d      	ands	r5, r3
   10136:	2200      	movs	r2, #0
   10138:	2d00      	cmp	r5, #0
   1013a:	d009      	beq.n	10150 <__aeabi_dmul+0x4c4>
   1013c:	220f      	movs	r2, #15
   1013e:	2400      	movs	r4, #0
   10140:	401a      	ands	r2, r3
   10142:	0018      	movs	r0, r3
   10144:	2a04      	cmp	r2, #4
   10146:	d1d6      	bne.n	100f6 <__aeabi_dmul+0x46a>
   10148:	0003      	movs	r3, r0
   1014a:	0765      	lsls	r5, r4, #29
   1014c:	0264      	lsls	r4, r4, #9
   1014e:	0b22      	lsrs	r2, r4, #12
   10150:	08db      	lsrs	r3, r3, #3
   10152:	432b      	orrs	r3, r5
   10154:	2501      	movs	r5, #1
   10156:	4699      	mov	r9, r3
   10158:	9b01      	ldr	r3, [sp, #4]
   1015a:	2400      	movs	r4, #0
   1015c:	401d      	ands	r5, r3
   1015e:	e5fc      	b.n	fd5a <__aeabi_dmul+0xce>
   10160:	2400      	movs	r4, #0
   10162:	e7e2      	b.n	1012a <__aeabi_dmul+0x49e>
   10164:	2280      	movs	r2, #128	; 0x80
   10166:	2501      	movs	r5, #1
   10168:	0312      	lsls	r2, r2, #12
   1016a:	4322      	orrs	r2, r4
   1016c:	9901      	ldr	r1, [sp, #4]
   1016e:	0312      	lsls	r2, r2, #12
   10170:	0b12      	lsrs	r2, r2, #12
   10172:	400d      	ands	r5, r1
   10174:	4699      	mov	r9, r3
   10176:	4c04      	ldr	r4, [pc, #16]	; (10188 <__aeabi_dmul+0x4fc>)
   10178:	e5ef      	b.n	fd5a <__aeabi_dmul+0xce>
   1017a:	46c0      	nop			; (mov r8, r8)
   1017c:	000003ff 	.word	0x000003ff
   10180:	feffffff 	.word	0xfeffffff
   10184:	000007fe 	.word	0x000007fe
   10188:	000007ff 	.word	0x000007ff

0001018c <__aeabi_dsub>:
   1018c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1018e:	4646      	mov	r6, r8
   10190:	46d6      	mov	lr, sl
   10192:	464f      	mov	r7, r9
   10194:	030c      	lsls	r4, r1, #12
   10196:	b5c0      	push	{r6, r7, lr}
   10198:	0fcd      	lsrs	r5, r1, #31
   1019a:	004e      	lsls	r6, r1, #1
   1019c:	0a61      	lsrs	r1, r4, #9
   1019e:	0f44      	lsrs	r4, r0, #29
   101a0:	430c      	orrs	r4, r1
   101a2:	00c1      	lsls	r1, r0, #3
   101a4:	0058      	lsls	r0, r3, #1
   101a6:	0d40      	lsrs	r0, r0, #21
   101a8:	4684      	mov	ip, r0
   101aa:	468a      	mov	sl, r1
   101ac:	000f      	movs	r7, r1
   101ae:	0319      	lsls	r1, r3, #12
   101b0:	0f50      	lsrs	r0, r2, #29
   101b2:	0a49      	lsrs	r1, r1, #9
   101b4:	4301      	orrs	r1, r0
   101b6:	48c6      	ldr	r0, [pc, #792]	; (104d0 <__aeabi_dsub+0x344>)
   101b8:	0d76      	lsrs	r6, r6, #21
   101ba:	46a8      	mov	r8, r5
   101bc:	0fdb      	lsrs	r3, r3, #31
   101be:	00d2      	lsls	r2, r2, #3
   101c0:	4584      	cmp	ip, r0
   101c2:	d100      	bne.n	101c6 <__aeabi_dsub+0x3a>
   101c4:	e0d8      	b.n	10378 <__aeabi_dsub+0x1ec>
   101c6:	2001      	movs	r0, #1
   101c8:	4043      	eors	r3, r0
   101ca:	42ab      	cmp	r3, r5
   101cc:	d100      	bne.n	101d0 <__aeabi_dsub+0x44>
   101ce:	e0a6      	b.n	1031e <__aeabi_dsub+0x192>
   101d0:	4660      	mov	r0, ip
   101d2:	1a35      	subs	r5, r6, r0
   101d4:	2d00      	cmp	r5, #0
   101d6:	dc00      	bgt.n	101da <__aeabi_dsub+0x4e>
   101d8:	e105      	b.n	103e6 <__aeabi_dsub+0x25a>
   101da:	2800      	cmp	r0, #0
   101dc:	d110      	bne.n	10200 <__aeabi_dsub+0x74>
   101de:	000b      	movs	r3, r1
   101e0:	4313      	orrs	r3, r2
   101e2:	d100      	bne.n	101e6 <__aeabi_dsub+0x5a>
   101e4:	e0d7      	b.n	10396 <__aeabi_dsub+0x20a>
   101e6:	1e6b      	subs	r3, r5, #1
   101e8:	2b00      	cmp	r3, #0
   101ea:	d000      	beq.n	101ee <__aeabi_dsub+0x62>
   101ec:	e14b      	b.n	10486 <__aeabi_dsub+0x2fa>
   101ee:	4653      	mov	r3, sl
   101f0:	1a9f      	subs	r7, r3, r2
   101f2:	45ba      	cmp	sl, r7
   101f4:	4180      	sbcs	r0, r0
   101f6:	1a64      	subs	r4, r4, r1
   101f8:	4240      	negs	r0, r0
   101fa:	1a24      	subs	r4, r4, r0
   101fc:	2601      	movs	r6, #1
   101fe:	e01e      	b.n	1023e <__aeabi_dsub+0xb2>
   10200:	4bb3      	ldr	r3, [pc, #716]	; (104d0 <__aeabi_dsub+0x344>)
   10202:	429e      	cmp	r6, r3
   10204:	d048      	beq.n	10298 <__aeabi_dsub+0x10c>
   10206:	2380      	movs	r3, #128	; 0x80
   10208:	041b      	lsls	r3, r3, #16
   1020a:	4319      	orrs	r1, r3
   1020c:	2d38      	cmp	r5, #56	; 0x38
   1020e:	dd00      	ble.n	10212 <__aeabi_dsub+0x86>
   10210:	e119      	b.n	10446 <__aeabi_dsub+0x2ba>
   10212:	2d1f      	cmp	r5, #31
   10214:	dd00      	ble.n	10218 <__aeabi_dsub+0x8c>
   10216:	e14c      	b.n	104b2 <__aeabi_dsub+0x326>
   10218:	2320      	movs	r3, #32
   1021a:	000f      	movs	r7, r1
   1021c:	1b5b      	subs	r3, r3, r5
   1021e:	0010      	movs	r0, r2
   10220:	409a      	lsls	r2, r3
   10222:	409f      	lsls	r7, r3
   10224:	40e8      	lsrs	r0, r5
   10226:	1e53      	subs	r3, r2, #1
   10228:	419a      	sbcs	r2, r3
   1022a:	40e9      	lsrs	r1, r5
   1022c:	4307      	orrs	r7, r0
   1022e:	4317      	orrs	r7, r2
   10230:	4653      	mov	r3, sl
   10232:	1bdf      	subs	r7, r3, r7
   10234:	1a61      	subs	r1, r4, r1
   10236:	45ba      	cmp	sl, r7
   10238:	41a4      	sbcs	r4, r4
   1023a:	4264      	negs	r4, r4
   1023c:	1b0c      	subs	r4, r1, r4
   1023e:	0223      	lsls	r3, r4, #8
   10240:	d400      	bmi.n	10244 <__aeabi_dsub+0xb8>
   10242:	e0c5      	b.n	103d0 <__aeabi_dsub+0x244>
   10244:	0264      	lsls	r4, r4, #9
   10246:	0a65      	lsrs	r5, r4, #9
   10248:	2d00      	cmp	r5, #0
   1024a:	d100      	bne.n	1024e <__aeabi_dsub+0xc2>
   1024c:	e0f6      	b.n	1043c <__aeabi_dsub+0x2b0>
   1024e:	0028      	movs	r0, r5
   10250:	f000 fb3e 	bl	108d0 <__clzsi2>
   10254:	0003      	movs	r3, r0
   10256:	3b08      	subs	r3, #8
   10258:	2b1f      	cmp	r3, #31
   1025a:	dd00      	ble.n	1025e <__aeabi_dsub+0xd2>
   1025c:	e0e9      	b.n	10432 <__aeabi_dsub+0x2a6>
   1025e:	2220      	movs	r2, #32
   10260:	003c      	movs	r4, r7
   10262:	1ad2      	subs	r2, r2, r3
   10264:	409d      	lsls	r5, r3
   10266:	40d4      	lsrs	r4, r2
   10268:	409f      	lsls	r7, r3
   1026a:	4325      	orrs	r5, r4
   1026c:	429e      	cmp	r6, r3
   1026e:	dd00      	ble.n	10272 <__aeabi_dsub+0xe6>
   10270:	e0db      	b.n	1042a <__aeabi_dsub+0x29e>
   10272:	1b9e      	subs	r6, r3, r6
   10274:	1c73      	adds	r3, r6, #1
   10276:	2b1f      	cmp	r3, #31
   10278:	dd00      	ble.n	1027c <__aeabi_dsub+0xf0>
   1027a:	e10a      	b.n	10492 <__aeabi_dsub+0x306>
   1027c:	2220      	movs	r2, #32
   1027e:	0038      	movs	r0, r7
   10280:	1ad2      	subs	r2, r2, r3
   10282:	0029      	movs	r1, r5
   10284:	4097      	lsls	r7, r2
   10286:	002c      	movs	r4, r5
   10288:	4091      	lsls	r1, r2
   1028a:	40d8      	lsrs	r0, r3
   1028c:	1e7a      	subs	r2, r7, #1
   1028e:	4197      	sbcs	r7, r2
   10290:	40dc      	lsrs	r4, r3
   10292:	2600      	movs	r6, #0
   10294:	4301      	orrs	r1, r0
   10296:	430f      	orrs	r7, r1
   10298:	077b      	lsls	r3, r7, #29
   1029a:	d009      	beq.n	102b0 <__aeabi_dsub+0x124>
   1029c:	230f      	movs	r3, #15
   1029e:	403b      	ands	r3, r7
   102a0:	2b04      	cmp	r3, #4
   102a2:	d005      	beq.n	102b0 <__aeabi_dsub+0x124>
   102a4:	1d3b      	adds	r3, r7, #4
   102a6:	42bb      	cmp	r3, r7
   102a8:	41bf      	sbcs	r7, r7
   102aa:	427f      	negs	r7, r7
   102ac:	19e4      	adds	r4, r4, r7
   102ae:	001f      	movs	r7, r3
   102b0:	0223      	lsls	r3, r4, #8
   102b2:	d525      	bpl.n	10300 <__aeabi_dsub+0x174>
   102b4:	4b86      	ldr	r3, [pc, #536]	; (104d0 <__aeabi_dsub+0x344>)
   102b6:	3601      	adds	r6, #1
   102b8:	429e      	cmp	r6, r3
   102ba:	d100      	bne.n	102be <__aeabi_dsub+0x132>
   102bc:	e0af      	b.n	1041e <__aeabi_dsub+0x292>
   102be:	4b85      	ldr	r3, [pc, #532]	; (104d4 <__aeabi_dsub+0x348>)
   102c0:	2501      	movs	r5, #1
   102c2:	401c      	ands	r4, r3
   102c4:	4643      	mov	r3, r8
   102c6:	0762      	lsls	r2, r4, #29
   102c8:	08ff      	lsrs	r7, r7, #3
   102ca:	0264      	lsls	r4, r4, #9
   102cc:	0576      	lsls	r6, r6, #21
   102ce:	4317      	orrs	r7, r2
   102d0:	0b24      	lsrs	r4, r4, #12
   102d2:	0d76      	lsrs	r6, r6, #21
   102d4:	401d      	ands	r5, r3
   102d6:	2100      	movs	r1, #0
   102d8:	0324      	lsls	r4, r4, #12
   102da:	0b23      	lsrs	r3, r4, #12
   102dc:	0d0c      	lsrs	r4, r1, #20
   102de:	4a7e      	ldr	r2, [pc, #504]	; (104d8 <__aeabi_dsub+0x34c>)
   102e0:	0524      	lsls	r4, r4, #20
   102e2:	431c      	orrs	r4, r3
   102e4:	4014      	ands	r4, r2
   102e6:	0533      	lsls	r3, r6, #20
   102e8:	4323      	orrs	r3, r4
   102ea:	005b      	lsls	r3, r3, #1
   102ec:	07ed      	lsls	r5, r5, #31
   102ee:	085b      	lsrs	r3, r3, #1
   102f0:	432b      	orrs	r3, r5
   102f2:	0038      	movs	r0, r7
   102f4:	0019      	movs	r1, r3
   102f6:	bc1c      	pop	{r2, r3, r4}
   102f8:	4690      	mov	r8, r2
   102fa:	4699      	mov	r9, r3
   102fc:	46a2      	mov	sl, r4
   102fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10300:	2501      	movs	r5, #1
   10302:	4643      	mov	r3, r8
   10304:	0762      	lsls	r2, r4, #29
   10306:	08ff      	lsrs	r7, r7, #3
   10308:	4317      	orrs	r7, r2
   1030a:	08e4      	lsrs	r4, r4, #3
   1030c:	401d      	ands	r5, r3
   1030e:	4b70      	ldr	r3, [pc, #448]	; (104d0 <__aeabi_dsub+0x344>)
   10310:	429e      	cmp	r6, r3
   10312:	d036      	beq.n	10382 <__aeabi_dsub+0x1f6>
   10314:	0324      	lsls	r4, r4, #12
   10316:	0576      	lsls	r6, r6, #21
   10318:	0b24      	lsrs	r4, r4, #12
   1031a:	0d76      	lsrs	r6, r6, #21
   1031c:	e7db      	b.n	102d6 <__aeabi_dsub+0x14a>
   1031e:	4663      	mov	r3, ip
   10320:	1af3      	subs	r3, r6, r3
   10322:	2b00      	cmp	r3, #0
   10324:	dc00      	bgt.n	10328 <__aeabi_dsub+0x19c>
   10326:	e094      	b.n	10452 <__aeabi_dsub+0x2c6>
   10328:	4660      	mov	r0, ip
   1032a:	2800      	cmp	r0, #0
   1032c:	d035      	beq.n	1039a <__aeabi_dsub+0x20e>
   1032e:	4868      	ldr	r0, [pc, #416]	; (104d0 <__aeabi_dsub+0x344>)
   10330:	4286      	cmp	r6, r0
   10332:	d0b1      	beq.n	10298 <__aeabi_dsub+0x10c>
   10334:	2780      	movs	r7, #128	; 0x80
   10336:	043f      	lsls	r7, r7, #16
   10338:	4339      	orrs	r1, r7
   1033a:	2b38      	cmp	r3, #56	; 0x38
   1033c:	dc00      	bgt.n	10340 <__aeabi_dsub+0x1b4>
   1033e:	e0fd      	b.n	1053c <__aeabi_dsub+0x3b0>
   10340:	430a      	orrs	r2, r1
   10342:	0017      	movs	r7, r2
   10344:	2100      	movs	r1, #0
   10346:	1e7a      	subs	r2, r7, #1
   10348:	4197      	sbcs	r7, r2
   1034a:	4457      	add	r7, sl
   1034c:	4557      	cmp	r7, sl
   1034e:	4180      	sbcs	r0, r0
   10350:	1909      	adds	r1, r1, r4
   10352:	4244      	negs	r4, r0
   10354:	190c      	adds	r4, r1, r4
   10356:	0223      	lsls	r3, r4, #8
   10358:	d53a      	bpl.n	103d0 <__aeabi_dsub+0x244>
   1035a:	4b5d      	ldr	r3, [pc, #372]	; (104d0 <__aeabi_dsub+0x344>)
   1035c:	3601      	adds	r6, #1
   1035e:	429e      	cmp	r6, r3
   10360:	d100      	bne.n	10364 <__aeabi_dsub+0x1d8>
   10362:	e14b      	b.n	105fc <__aeabi_dsub+0x470>
   10364:	2201      	movs	r2, #1
   10366:	4b5b      	ldr	r3, [pc, #364]	; (104d4 <__aeabi_dsub+0x348>)
   10368:	401c      	ands	r4, r3
   1036a:	087b      	lsrs	r3, r7, #1
   1036c:	4017      	ands	r7, r2
   1036e:	431f      	orrs	r7, r3
   10370:	07e2      	lsls	r2, r4, #31
   10372:	4317      	orrs	r7, r2
   10374:	0864      	lsrs	r4, r4, #1
   10376:	e78f      	b.n	10298 <__aeabi_dsub+0x10c>
   10378:	0008      	movs	r0, r1
   1037a:	4310      	orrs	r0, r2
   1037c:	d000      	beq.n	10380 <__aeabi_dsub+0x1f4>
   1037e:	e724      	b.n	101ca <__aeabi_dsub+0x3e>
   10380:	e721      	b.n	101c6 <__aeabi_dsub+0x3a>
   10382:	0023      	movs	r3, r4
   10384:	433b      	orrs	r3, r7
   10386:	d100      	bne.n	1038a <__aeabi_dsub+0x1fe>
   10388:	e1b9      	b.n	106fe <__aeabi_dsub+0x572>
   1038a:	2280      	movs	r2, #128	; 0x80
   1038c:	0312      	lsls	r2, r2, #12
   1038e:	4314      	orrs	r4, r2
   10390:	0324      	lsls	r4, r4, #12
   10392:	0b24      	lsrs	r4, r4, #12
   10394:	e79f      	b.n	102d6 <__aeabi_dsub+0x14a>
   10396:	002e      	movs	r6, r5
   10398:	e77e      	b.n	10298 <__aeabi_dsub+0x10c>
   1039a:	0008      	movs	r0, r1
   1039c:	4310      	orrs	r0, r2
   1039e:	d100      	bne.n	103a2 <__aeabi_dsub+0x216>
   103a0:	e0ca      	b.n	10538 <__aeabi_dsub+0x3ac>
   103a2:	1e58      	subs	r0, r3, #1
   103a4:	4684      	mov	ip, r0
   103a6:	2800      	cmp	r0, #0
   103a8:	d000      	beq.n	103ac <__aeabi_dsub+0x220>
   103aa:	e0e7      	b.n	1057c <__aeabi_dsub+0x3f0>
   103ac:	4452      	add	r2, sl
   103ae:	4552      	cmp	r2, sl
   103b0:	4180      	sbcs	r0, r0
   103b2:	1864      	adds	r4, r4, r1
   103b4:	4240      	negs	r0, r0
   103b6:	1824      	adds	r4, r4, r0
   103b8:	0017      	movs	r7, r2
   103ba:	2601      	movs	r6, #1
   103bc:	0223      	lsls	r3, r4, #8
   103be:	d507      	bpl.n	103d0 <__aeabi_dsub+0x244>
   103c0:	2602      	movs	r6, #2
   103c2:	e7cf      	b.n	10364 <__aeabi_dsub+0x1d8>
   103c4:	4664      	mov	r4, ip
   103c6:	432c      	orrs	r4, r5
   103c8:	d100      	bne.n	103cc <__aeabi_dsub+0x240>
   103ca:	e1b3      	b.n	10734 <__aeabi_dsub+0x5a8>
   103cc:	002c      	movs	r4, r5
   103ce:	4667      	mov	r7, ip
   103d0:	077b      	lsls	r3, r7, #29
   103d2:	d000      	beq.n	103d6 <__aeabi_dsub+0x24a>
   103d4:	e762      	b.n	1029c <__aeabi_dsub+0x110>
   103d6:	0763      	lsls	r3, r4, #29
   103d8:	08ff      	lsrs	r7, r7, #3
   103da:	431f      	orrs	r7, r3
   103dc:	2501      	movs	r5, #1
   103de:	4643      	mov	r3, r8
   103e0:	08e4      	lsrs	r4, r4, #3
   103e2:	401d      	ands	r5, r3
   103e4:	e793      	b.n	1030e <__aeabi_dsub+0x182>
   103e6:	2d00      	cmp	r5, #0
   103e8:	d178      	bne.n	104dc <__aeabi_dsub+0x350>
   103ea:	1c75      	adds	r5, r6, #1
   103ec:	056d      	lsls	r5, r5, #21
   103ee:	0d6d      	lsrs	r5, r5, #21
   103f0:	2d01      	cmp	r5, #1
   103f2:	dc00      	bgt.n	103f6 <__aeabi_dsub+0x26a>
   103f4:	e0f2      	b.n	105dc <__aeabi_dsub+0x450>
   103f6:	4650      	mov	r0, sl
   103f8:	1a80      	subs	r0, r0, r2
   103fa:	4582      	cmp	sl, r0
   103fc:	41bf      	sbcs	r7, r7
   103fe:	1a65      	subs	r5, r4, r1
   10400:	427f      	negs	r7, r7
   10402:	1bed      	subs	r5, r5, r7
   10404:	4684      	mov	ip, r0
   10406:	0228      	lsls	r0, r5, #8
   10408:	d400      	bmi.n	1040c <__aeabi_dsub+0x280>
   1040a:	e08c      	b.n	10526 <__aeabi_dsub+0x39a>
   1040c:	4650      	mov	r0, sl
   1040e:	1a17      	subs	r7, r2, r0
   10410:	42ba      	cmp	r2, r7
   10412:	4192      	sbcs	r2, r2
   10414:	1b0c      	subs	r4, r1, r4
   10416:	4255      	negs	r5, r2
   10418:	1b65      	subs	r5, r4, r5
   1041a:	4698      	mov	r8, r3
   1041c:	e714      	b.n	10248 <__aeabi_dsub+0xbc>
   1041e:	2501      	movs	r5, #1
   10420:	4643      	mov	r3, r8
   10422:	2400      	movs	r4, #0
   10424:	401d      	ands	r5, r3
   10426:	2700      	movs	r7, #0
   10428:	e755      	b.n	102d6 <__aeabi_dsub+0x14a>
   1042a:	4c2a      	ldr	r4, [pc, #168]	; (104d4 <__aeabi_dsub+0x348>)
   1042c:	1af6      	subs	r6, r6, r3
   1042e:	402c      	ands	r4, r5
   10430:	e732      	b.n	10298 <__aeabi_dsub+0x10c>
   10432:	003d      	movs	r5, r7
   10434:	3828      	subs	r0, #40	; 0x28
   10436:	4085      	lsls	r5, r0
   10438:	2700      	movs	r7, #0
   1043a:	e717      	b.n	1026c <__aeabi_dsub+0xe0>
   1043c:	0038      	movs	r0, r7
   1043e:	f000 fa47 	bl	108d0 <__clzsi2>
   10442:	3020      	adds	r0, #32
   10444:	e706      	b.n	10254 <__aeabi_dsub+0xc8>
   10446:	430a      	orrs	r2, r1
   10448:	0017      	movs	r7, r2
   1044a:	2100      	movs	r1, #0
   1044c:	1e7a      	subs	r2, r7, #1
   1044e:	4197      	sbcs	r7, r2
   10450:	e6ee      	b.n	10230 <__aeabi_dsub+0xa4>
   10452:	2b00      	cmp	r3, #0
   10454:	d000      	beq.n	10458 <__aeabi_dsub+0x2cc>
   10456:	e0e5      	b.n	10624 <__aeabi_dsub+0x498>
   10458:	1c73      	adds	r3, r6, #1
   1045a:	469c      	mov	ip, r3
   1045c:	055b      	lsls	r3, r3, #21
   1045e:	0d5b      	lsrs	r3, r3, #21
   10460:	2b01      	cmp	r3, #1
   10462:	dc00      	bgt.n	10466 <__aeabi_dsub+0x2da>
   10464:	e09f      	b.n	105a6 <__aeabi_dsub+0x41a>
   10466:	4b1a      	ldr	r3, [pc, #104]	; (104d0 <__aeabi_dsub+0x344>)
   10468:	459c      	cmp	ip, r3
   1046a:	d100      	bne.n	1046e <__aeabi_dsub+0x2e2>
   1046c:	e0c5      	b.n	105fa <__aeabi_dsub+0x46e>
   1046e:	4452      	add	r2, sl
   10470:	4552      	cmp	r2, sl
   10472:	4180      	sbcs	r0, r0
   10474:	1864      	adds	r4, r4, r1
   10476:	4240      	negs	r0, r0
   10478:	1824      	adds	r4, r4, r0
   1047a:	07e7      	lsls	r7, r4, #31
   1047c:	0852      	lsrs	r2, r2, #1
   1047e:	4317      	orrs	r7, r2
   10480:	0864      	lsrs	r4, r4, #1
   10482:	4666      	mov	r6, ip
   10484:	e708      	b.n	10298 <__aeabi_dsub+0x10c>
   10486:	4812      	ldr	r0, [pc, #72]	; (104d0 <__aeabi_dsub+0x344>)
   10488:	4285      	cmp	r5, r0
   1048a:	d100      	bne.n	1048e <__aeabi_dsub+0x302>
   1048c:	e085      	b.n	1059a <__aeabi_dsub+0x40e>
   1048e:	001d      	movs	r5, r3
   10490:	e6bc      	b.n	1020c <__aeabi_dsub+0x80>
   10492:	0029      	movs	r1, r5
   10494:	3e1f      	subs	r6, #31
   10496:	40f1      	lsrs	r1, r6
   10498:	2b20      	cmp	r3, #32
   1049a:	d100      	bne.n	1049e <__aeabi_dsub+0x312>
   1049c:	e07f      	b.n	1059e <__aeabi_dsub+0x412>
   1049e:	2240      	movs	r2, #64	; 0x40
   104a0:	1ad3      	subs	r3, r2, r3
   104a2:	409d      	lsls	r5, r3
   104a4:	432f      	orrs	r7, r5
   104a6:	1e7d      	subs	r5, r7, #1
   104a8:	41af      	sbcs	r7, r5
   104aa:	2400      	movs	r4, #0
   104ac:	430f      	orrs	r7, r1
   104ae:	2600      	movs	r6, #0
   104b0:	e78e      	b.n	103d0 <__aeabi_dsub+0x244>
   104b2:	002b      	movs	r3, r5
   104b4:	000f      	movs	r7, r1
   104b6:	3b20      	subs	r3, #32
   104b8:	40df      	lsrs	r7, r3
   104ba:	2d20      	cmp	r5, #32
   104bc:	d071      	beq.n	105a2 <__aeabi_dsub+0x416>
   104be:	2340      	movs	r3, #64	; 0x40
   104c0:	1b5d      	subs	r5, r3, r5
   104c2:	40a9      	lsls	r1, r5
   104c4:	430a      	orrs	r2, r1
   104c6:	1e51      	subs	r1, r2, #1
   104c8:	418a      	sbcs	r2, r1
   104ca:	2100      	movs	r1, #0
   104cc:	4317      	orrs	r7, r2
   104ce:	e6af      	b.n	10230 <__aeabi_dsub+0xa4>
   104d0:	000007ff 	.word	0x000007ff
   104d4:	ff7fffff 	.word	0xff7fffff
   104d8:	800fffff 	.word	0x800fffff
   104dc:	2e00      	cmp	r6, #0
   104de:	d03e      	beq.n	1055e <__aeabi_dsub+0x3d2>
   104e0:	4eb3      	ldr	r6, [pc, #716]	; (107b0 <__aeabi_dsub+0x624>)
   104e2:	45b4      	cmp	ip, r6
   104e4:	d045      	beq.n	10572 <__aeabi_dsub+0x3e6>
   104e6:	2680      	movs	r6, #128	; 0x80
   104e8:	0436      	lsls	r6, r6, #16
   104ea:	426d      	negs	r5, r5
   104ec:	4334      	orrs	r4, r6
   104ee:	2d38      	cmp	r5, #56	; 0x38
   104f0:	dd00      	ble.n	104f4 <__aeabi_dsub+0x368>
   104f2:	e0a8      	b.n	10646 <__aeabi_dsub+0x4ba>
   104f4:	2d1f      	cmp	r5, #31
   104f6:	dd00      	ble.n	104fa <__aeabi_dsub+0x36e>
   104f8:	e11f      	b.n	1073a <__aeabi_dsub+0x5ae>
   104fa:	2620      	movs	r6, #32
   104fc:	0027      	movs	r7, r4
   104fe:	4650      	mov	r0, sl
   10500:	1b76      	subs	r6, r6, r5
   10502:	40b7      	lsls	r7, r6
   10504:	40e8      	lsrs	r0, r5
   10506:	4307      	orrs	r7, r0
   10508:	4650      	mov	r0, sl
   1050a:	40b0      	lsls	r0, r6
   1050c:	1e46      	subs	r6, r0, #1
   1050e:	41b0      	sbcs	r0, r6
   10510:	40ec      	lsrs	r4, r5
   10512:	4338      	orrs	r0, r7
   10514:	1a17      	subs	r7, r2, r0
   10516:	42ba      	cmp	r2, r7
   10518:	4192      	sbcs	r2, r2
   1051a:	1b0c      	subs	r4, r1, r4
   1051c:	4252      	negs	r2, r2
   1051e:	1aa4      	subs	r4, r4, r2
   10520:	4666      	mov	r6, ip
   10522:	4698      	mov	r8, r3
   10524:	e68b      	b.n	1023e <__aeabi_dsub+0xb2>
   10526:	4664      	mov	r4, ip
   10528:	4667      	mov	r7, ip
   1052a:	432c      	orrs	r4, r5
   1052c:	d000      	beq.n	10530 <__aeabi_dsub+0x3a4>
   1052e:	e68b      	b.n	10248 <__aeabi_dsub+0xbc>
   10530:	2500      	movs	r5, #0
   10532:	2600      	movs	r6, #0
   10534:	2700      	movs	r7, #0
   10536:	e6ea      	b.n	1030e <__aeabi_dsub+0x182>
   10538:	001e      	movs	r6, r3
   1053a:	e6ad      	b.n	10298 <__aeabi_dsub+0x10c>
   1053c:	2b1f      	cmp	r3, #31
   1053e:	dc60      	bgt.n	10602 <__aeabi_dsub+0x476>
   10540:	2720      	movs	r7, #32
   10542:	1af8      	subs	r0, r7, r3
   10544:	000f      	movs	r7, r1
   10546:	4684      	mov	ip, r0
   10548:	4087      	lsls	r7, r0
   1054a:	0010      	movs	r0, r2
   1054c:	40d8      	lsrs	r0, r3
   1054e:	4307      	orrs	r7, r0
   10550:	4660      	mov	r0, ip
   10552:	4082      	lsls	r2, r0
   10554:	1e50      	subs	r0, r2, #1
   10556:	4182      	sbcs	r2, r0
   10558:	40d9      	lsrs	r1, r3
   1055a:	4317      	orrs	r7, r2
   1055c:	e6f5      	b.n	1034a <__aeabi_dsub+0x1be>
   1055e:	0026      	movs	r6, r4
   10560:	4650      	mov	r0, sl
   10562:	4306      	orrs	r6, r0
   10564:	d005      	beq.n	10572 <__aeabi_dsub+0x3e6>
   10566:	43ed      	mvns	r5, r5
   10568:	2d00      	cmp	r5, #0
   1056a:	d0d3      	beq.n	10514 <__aeabi_dsub+0x388>
   1056c:	4e90      	ldr	r6, [pc, #576]	; (107b0 <__aeabi_dsub+0x624>)
   1056e:	45b4      	cmp	ip, r6
   10570:	d1bd      	bne.n	104ee <__aeabi_dsub+0x362>
   10572:	000c      	movs	r4, r1
   10574:	0017      	movs	r7, r2
   10576:	4666      	mov	r6, ip
   10578:	4698      	mov	r8, r3
   1057a:	e68d      	b.n	10298 <__aeabi_dsub+0x10c>
   1057c:	488c      	ldr	r0, [pc, #560]	; (107b0 <__aeabi_dsub+0x624>)
   1057e:	4283      	cmp	r3, r0
   10580:	d00b      	beq.n	1059a <__aeabi_dsub+0x40e>
   10582:	4663      	mov	r3, ip
   10584:	e6d9      	b.n	1033a <__aeabi_dsub+0x1ae>
   10586:	2d00      	cmp	r5, #0
   10588:	d000      	beq.n	1058c <__aeabi_dsub+0x400>
   1058a:	e096      	b.n	106ba <__aeabi_dsub+0x52e>
   1058c:	0008      	movs	r0, r1
   1058e:	4310      	orrs	r0, r2
   10590:	d100      	bne.n	10594 <__aeabi_dsub+0x408>
   10592:	e0e2      	b.n	1075a <__aeabi_dsub+0x5ce>
   10594:	000c      	movs	r4, r1
   10596:	0017      	movs	r7, r2
   10598:	4698      	mov	r8, r3
   1059a:	4e85      	ldr	r6, [pc, #532]	; (107b0 <__aeabi_dsub+0x624>)
   1059c:	e67c      	b.n	10298 <__aeabi_dsub+0x10c>
   1059e:	2500      	movs	r5, #0
   105a0:	e780      	b.n	104a4 <__aeabi_dsub+0x318>
   105a2:	2100      	movs	r1, #0
   105a4:	e78e      	b.n	104c4 <__aeabi_dsub+0x338>
   105a6:	0023      	movs	r3, r4
   105a8:	4650      	mov	r0, sl
   105aa:	4303      	orrs	r3, r0
   105ac:	2e00      	cmp	r6, #0
   105ae:	d000      	beq.n	105b2 <__aeabi_dsub+0x426>
   105b0:	e0a8      	b.n	10704 <__aeabi_dsub+0x578>
   105b2:	2b00      	cmp	r3, #0
   105b4:	d100      	bne.n	105b8 <__aeabi_dsub+0x42c>
   105b6:	e0de      	b.n	10776 <__aeabi_dsub+0x5ea>
   105b8:	000b      	movs	r3, r1
   105ba:	4313      	orrs	r3, r2
   105bc:	d100      	bne.n	105c0 <__aeabi_dsub+0x434>
   105be:	e66b      	b.n	10298 <__aeabi_dsub+0x10c>
   105c0:	4452      	add	r2, sl
   105c2:	4552      	cmp	r2, sl
   105c4:	4180      	sbcs	r0, r0
   105c6:	1864      	adds	r4, r4, r1
   105c8:	4240      	negs	r0, r0
   105ca:	1824      	adds	r4, r4, r0
   105cc:	0017      	movs	r7, r2
   105ce:	0223      	lsls	r3, r4, #8
   105d0:	d400      	bmi.n	105d4 <__aeabi_dsub+0x448>
   105d2:	e6fd      	b.n	103d0 <__aeabi_dsub+0x244>
   105d4:	4b77      	ldr	r3, [pc, #476]	; (107b4 <__aeabi_dsub+0x628>)
   105d6:	4666      	mov	r6, ip
   105d8:	401c      	ands	r4, r3
   105da:	e65d      	b.n	10298 <__aeabi_dsub+0x10c>
   105dc:	0025      	movs	r5, r4
   105de:	4650      	mov	r0, sl
   105e0:	4305      	orrs	r5, r0
   105e2:	2e00      	cmp	r6, #0
   105e4:	d1cf      	bne.n	10586 <__aeabi_dsub+0x3fa>
   105e6:	2d00      	cmp	r5, #0
   105e8:	d14f      	bne.n	1068a <__aeabi_dsub+0x4fe>
   105ea:	000c      	movs	r4, r1
   105ec:	4314      	orrs	r4, r2
   105ee:	d100      	bne.n	105f2 <__aeabi_dsub+0x466>
   105f0:	e0a0      	b.n	10734 <__aeabi_dsub+0x5a8>
   105f2:	000c      	movs	r4, r1
   105f4:	0017      	movs	r7, r2
   105f6:	4698      	mov	r8, r3
   105f8:	e64e      	b.n	10298 <__aeabi_dsub+0x10c>
   105fa:	4666      	mov	r6, ip
   105fc:	2400      	movs	r4, #0
   105fe:	2700      	movs	r7, #0
   10600:	e685      	b.n	1030e <__aeabi_dsub+0x182>
   10602:	001f      	movs	r7, r3
   10604:	0008      	movs	r0, r1
   10606:	3f20      	subs	r7, #32
   10608:	40f8      	lsrs	r0, r7
   1060a:	0007      	movs	r7, r0
   1060c:	2b20      	cmp	r3, #32
   1060e:	d100      	bne.n	10612 <__aeabi_dsub+0x486>
   10610:	e08e      	b.n	10730 <__aeabi_dsub+0x5a4>
   10612:	2040      	movs	r0, #64	; 0x40
   10614:	1ac3      	subs	r3, r0, r3
   10616:	4099      	lsls	r1, r3
   10618:	430a      	orrs	r2, r1
   1061a:	1e51      	subs	r1, r2, #1
   1061c:	418a      	sbcs	r2, r1
   1061e:	2100      	movs	r1, #0
   10620:	4317      	orrs	r7, r2
   10622:	e692      	b.n	1034a <__aeabi_dsub+0x1be>
   10624:	2e00      	cmp	r6, #0
   10626:	d114      	bne.n	10652 <__aeabi_dsub+0x4c6>
   10628:	0026      	movs	r6, r4
   1062a:	4650      	mov	r0, sl
   1062c:	4306      	orrs	r6, r0
   1062e:	d062      	beq.n	106f6 <__aeabi_dsub+0x56a>
   10630:	43db      	mvns	r3, r3
   10632:	2b00      	cmp	r3, #0
   10634:	d15c      	bne.n	106f0 <__aeabi_dsub+0x564>
   10636:	1887      	adds	r7, r0, r2
   10638:	4297      	cmp	r7, r2
   1063a:	4192      	sbcs	r2, r2
   1063c:	1864      	adds	r4, r4, r1
   1063e:	4252      	negs	r2, r2
   10640:	18a4      	adds	r4, r4, r2
   10642:	4666      	mov	r6, ip
   10644:	e687      	b.n	10356 <__aeabi_dsub+0x1ca>
   10646:	4650      	mov	r0, sl
   10648:	4320      	orrs	r0, r4
   1064a:	1e44      	subs	r4, r0, #1
   1064c:	41a0      	sbcs	r0, r4
   1064e:	2400      	movs	r4, #0
   10650:	e760      	b.n	10514 <__aeabi_dsub+0x388>
   10652:	4e57      	ldr	r6, [pc, #348]	; (107b0 <__aeabi_dsub+0x624>)
   10654:	45b4      	cmp	ip, r6
   10656:	d04e      	beq.n	106f6 <__aeabi_dsub+0x56a>
   10658:	2680      	movs	r6, #128	; 0x80
   1065a:	0436      	lsls	r6, r6, #16
   1065c:	425b      	negs	r3, r3
   1065e:	4334      	orrs	r4, r6
   10660:	2b38      	cmp	r3, #56	; 0x38
   10662:	dd00      	ble.n	10666 <__aeabi_dsub+0x4da>
   10664:	e07f      	b.n	10766 <__aeabi_dsub+0x5da>
   10666:	2b1f      	cmp	r3, #31
   10668:	dd00      	ble.n	1066c <__aeabi_dsub+0x4e0>
   1066a:	e08b      	b.n	10784 <__aeabi_dsub+0x5f8>
   1066c:	2620      	movs	r6, #32
   1066e:	0027      	movs	r7, r4
   10670:	4650      	mov	r0, sl
   10672:	1af6      	subs	r6, r6, r3
   10674:	40b7      	lsls	r7, r6
   10676:	40d8      	lsrs	r0, r3
   10678:	4307      	orrs	r7, r0
   1067a:	4650      	mov	r0, sl
   1067c:	40b0      	lsls	r0, r6
   1067e:	1e46      	subs	r6, r0, #1
   10680:	41b0      	sbcs	r0, r6
   10682:	4307      	orrs	r7, r0
   10684:	40dc      	lsrs	r4, r3
   10686:	18bf      	adds	r7, r7, r2
   10688:	e7d6      	b.n	10638 <__aeabi_dsub+0x4ac>
   1068a:	000d      	movs	r5, r1
   1068c:	4315      	orrs	r5, r2
   1068e:	d100      	bne.n	10692 <__aeabi_dsub+0x506>
   10690:	e602      	b.n	10298 <__aeabi_dsub+0x10c>
   10692:	4650      	mov	r0, sl
   10694:	1a80      	subs	r0, r0, r2
   10696:	4582      	cmp	sl, r0
   10698:	41bf      	sbcs	r7, r7
   1069a:	1a65      	subs	r5, r4, r1
   1069c:	427f      	negs	r7, r7
   1069e:	1bed      	subs	r5, r5, r7
   106a0:	4684      	mov	ip, r0
   106a2:	0228      	lsls	r0, r5, #8
   106a4:	d400      	bmi.n	106a8 <__aeabi_dsub+0x51c>
   106a6:	e68d      	b.n	103c4 <__aeabi_dsub+0x238>
   106a8:	4650      	mov	r0, sl
   106aa:	1a17      	subs	r7, r2, r0
   106ac:	42ba      	cmp	r2, r7
   106ae:	4192      	sbcs	r2, r2
   106b0:	1b0c      	subs	r4, r1, r4
   106b2:	4252      	negs	r2, r2
   106b4:	1aa4      	subs	r4, r4, r2
   106b6:	4698      	mov	r8, r3
   106b8:	e5ee      	b.n	10298 <__aeabi_dsub+0x10c>
   106ba:	000d      	movs	r5, r1
   106bc:	4315      	orrs	r5, r2
   106be:	d100      	bne.n	106c2 <__aeabi_dsub+0x536>
   106c0:	e76b      	b.n	1059a <__aeabi_dsub+0x40e>
   106c2:	4650      	mov	r0, sl
   106c4:	0767      	lsls	r7, r4, #29
   106c6:	08c0      	lsrs	r0, r0, #3
   106c8:	4307      	orrs	r7, r0
   106ca:	2080      	movs	r0, #128	; 0x80
   106cc:	08e4      	lsrs	r4, r4, #3
   106ce:	0300      	lsls	r0, r0, #12
   106d0:	4204      	tst	r4, r0
   106d2:	d007      	beq.n	106e4 <__aeabi_dsub+0x558>
   106d4:	08cd      	lsrs	r5, r1, #3
   106d6:	4205      	tst	r5, r0
   106d8:	d104      	bne.n	106e4 <__aeabi_dsub+0x558>
   106da:	002c      	movs	r4, r5
   106dc:	4698      	mov	r8, r3
   106de:	08d7      	lsrs	r7, r2, #3
   106e0:	0749      	lsls	r1, r1, #29
   106e2:	430f      	orrs	r7, r1
   106e4:	0f7b      	lsrs	r3, r7, #29
   106e6:	00e4      	lsls	r4, r4, #3
   106e8:	431c      	orrs	r4, r3
   106ea:	00ff      	lsls	r7, r7, #3
   106ec:	4e30      	ldr	r6, [pc, #192]	; (107b0 <__aeabi_dsub+0x624>)
   106ee:	e5d3      	b.n	10298 <__aeabi_dsub+0x10c>
   106f0:	4e2f      	ldr	r6, [pc, #188]	; (107b0 <__aeabi_dsub+0x624>)
   106f2:	45b4      	cmp	ip, r6
   106f4:	d1b4      	bne.n	10660 <__aeabi_dsub+0x4d4>
   106f6:	000c      	movs	r4, r1
   106f8:	0017      	movs	r7, r2
   106fa:	4666      	mov	r6, ip
   106fc:	e5cc      	b.n	10298 <__aeabi_dsub+0x10c>
   106fe:	2700      	movs	r7, #0
   10700:	2400      	movs	r4, #0
   10702:	e5e8      	b.n	102d6 <__aeabi_dsub+0x14a>
   10704:	2b00      	cmp	r3, #0
   10706:	d039      	beq.n	1077c <__aeabi_dsub+0x5f0>
   10708:	000b      	movs	r3, r1
   1070a:	4313      	orrs	r3, r2
   1070c:	d100      	bne.n	10710 <__aeabi_dsub+0x584>
   1070e:	e744      	b.n	1059a <__aeabi_dsub+0x40e>
   10710:	08c0      	lsrs	r0, r0, #3
   10712:	0767      	lsls	r7, r4, #29
   10714:	4307      	orrs	r7, r0
   10716:	2080      	movs	r0, #128	; 0x80
   10718:	08e4      	lsrs	r4, r4, #3
   1071a:	0300      	lsls	r0, r0, #12
   1071c:	4204      	tst	r4, r0
   1071e:	d0e1      	beq.n	106e4 <__aeabi_dsub+0x558>
   10720:	08cb      	lsrs	r3, r1, #3
   10722:	4203      	tst	r3, r0
   10724:	d1de      	bne.n	106e4 <__aeabi_dsub+0x558>
   10726:	08d7      	lsrs	r7, r2, #3
   10728:	0749      	lsls	r1, r1, #29
   1072a:	430f      	orrs	r7, r1
   1072c:	001c      	movs	r4, r3
   1072e:	e7d9      	b.n	106e4 <__aeabi_dsub+0x558>
   10730:	2100      	movs	r1, #0
   10732:	e771      	b.n	10618 <__aeabi_dsub+0x48c>
   10734:	2500      	movs	r5, #0
   10736:	2700      	movs	r7, #0
   10738:	e5e9      	b.n	1030e <__aeabi_dsub+0x182>
   1073a:	002e      	movs	r6, r5
   1073c:	0027      	movs	r7, r4
   1073e:	3e20      	subs	r6, #32
   10740:	40f7      	lsrs	r7, r6
   10742:	2d20      	cmp	r5, #32
   10744:	d02f      	beq.n	107a6 <__aeabi_dsub+0x61a>
   10746:	2640      	movs	r6, #64	; 0x40
   10748:	1b75      	subs	r5, r6, r5
   1074a:	40ac      	lsls	r4, r5
   1074c:	4650      	mov	r0, sl
   1074e:	4320      	orrs	r0, r4
   10750:	1e44      	subs	r4, r0, #1
   10752:	41a0      	sbcs	r0, r4
   10754:	2400      	movs	r4, #0
   10756:	4338      	orrs	r0, r7
   10758:	e6dc      	b.n	10514 <__aeabi_dsub+0x388>
   1075a:	2480      	movs	r4, #128	; 0x80
   1075c:	2500      	movs	r5, #0
   1075e:	0324      	lsls	r4, r4, #12
   10760:	4e13      	ldr	r6, [pc, #76]	; (107b0 <__aeabi_dsub+0x624>)
   10762:	2700      	movs	r7, #0
   10764:	e5d3      	b.n	1030e <__aeabi_dsub+0x182>
   10766:	4650      	mov	r0, sl
   10768:	4320      	orrs	r0, r4
   1076a:	0007      	movs	r7, r0
   1076c:	1e78      	subs	r0, r7, #1
   1076e:	4187      	sbcs	r7, r0
   10770:	2400      	movs	r4, #0
   10772:	18bf      	adds	r7, r7, r2
   10774:	e760      	b.n	10638 <__aeabi_dsub+0x4ac>
   10776:	000c      	movs	r4, r1
   10778:	0017      	movs	r7, r2
   1077a:	e58d      	b.n	10298 <__aeabi_dsub+0x10c>
   1077c:	000c      	movs	r4, r1
   1077e:	0017      	movs	r7, r2
   10780:	4e0b      	ldr	r6, [pc, #44]	; (107b0 <__aeabi_dsub+0x624>)
   10782:	e589      	b.n	10298 <__aeabi_dsub+0x10c>
   10784:	001e      	movs	r6, r3
   10786:	0027      	movs	r7, r4
   10788:	3e20      	subs	r6, #32
   1078a:	40f7      	lsrs	r7, r6
   1078c:	2b20      	cmp	r3, #32
   1078e:	d00c      	beq.n	107aa <__aeabi_dsub+0x61e>
   10790:	2640      	movs	r6, #64	; 0x40
   10792:	1af3      	subs	r3, r6, r3
   10794:	409c      	lsls	r4, r3
   10796:	4650      	mov	r0, sl
   10798:	4320      	orrs	r0, r4
   1079a:	1e44      	subs	r4, r0, #1
   1079c:	41a0      	sbcs	r0, r4
   1079e:	4307      	orrs	r7, r0
   107a0:	2400      	movs	r4, #0
   107a2:	18bf      	adds	r7, r7, r2
   107a4:	e748      	b.n	10638 <__aeabi_dsub+0x4ac>
   107a6:	2400      	movs	r4, #0
   107a8:	e7d0      	b.n	1074c <__aeabi_dsub+0x5c0>
   107aa:	2400      	movs	r4, #0
   107ac:	e7f3      	b.n	10796 <__aeabi_dsub+0x60a>
   107ae:	46c0      	nop			; (mov r8, r8)
   107b0:	000007ff 	.word	0x000007ff
   107b4:	ff7fffff 	.word	0xff7fffff

000107b8 <__aeabi_dcmpun>:
   107b8:	b570      	push	{r4, r5, r6, lr}
   107ba:	4e0e      	ldr	r6, [pc, #56]	; (107f4 <__aeabi_dcmpun+0x3c>)
   107bc:	030d      	lsls	r5, r1, #12
   107be:	031c      	lsls	r4, r3, #12
   107c0:	0049      	lsls	r1, r1, #1
   107c2:	005b      	lsls	r3, r3, #1
   107c4:	0b2d      	lsrs	r5, r5, #12
   107c6:	0d49      	lsrs	r1, r1, #21
   107c8:	0b24      	lsrs	r4, r4, #12
   107ca:	0d5b      	lsrs	r3, r3, #21
   107cc:	42b1      	cmp	r1, r6
   107ce:	d004      	beq.n	107da <__aeabi_dcmpun+0x22>
   107d0:	4908      	ldr	r1, [pc, #32]	; (107f4 <__aeabi_dcmpun+0x3c>)
   107d2:	2000      	movs	r0, #0
   107d4:	428b      	cmp	r3, r1
   107d6:	d008      	beq.n	107ea <__aeabi_dcmpun+0x32>
   107d8:	bd70      	pop	{r4, r5, r6, pc}
   107da:	4305      	orrs	r5, r0
   107dc:	2001      	movs	r0, #1
   107de:	2d00      	cmp	r5, #0
   107e0:	d1fa      	bne.n	107d8 <__aeabi_dcmpun+0x20>
   107e2:	4904      	ldr	r1, [pc, #16]	; (107f4 <__aeabi_dcmpun+0x3c>)
   107e4:	2000      	movs	r0, #0
   107e6:	428b      	cmp	r3, r1
   107e8:	d1f6      	bne.n	107d8 <__aeabi_dcmpun+0x20>
   107ea:	4314      	orrs	r4, r2
   107ec:	0020      	movs	r0, r4
   107ee:	1e44      	subs	r4, r0, #1
   107f0:	41a0      	sbcs	r0, r4
   107f2:	e7f1      	b.n	107d8 <__aeabi_dcmpun+0x20>
   107f4:	000007ff 	.word	0x000007ff

000107f8 <__aeabi_d2iz>:
   107f8:	b530      	push	{r4, r5, lr}
   107fa:	4d13      	ldr	r5, [pc, #76]	; (10848 <__aeabi_d2iz+0x50>)
   107fc:	030a      	lsls	r2, r1, #12
   107fe:	004b      	lsls	r3, r1, #1
   10800:	0b12      	lsrs	r2, r2, #12
   10802:	0d5b      	lsrs	r3, r3, #21
   10804:	0fc9      	lsrs	r1, r1, #31
   10806:	2400      	movs	r4, #0
   10808:	42ab      	cmp	r3, r5
   1080a:	dd10      	ble.n	1082e <__aeabi_d2iz+0x36>
   1080c:	4c0f      	ldr	r4, [pc, #60]	; (1084c <__aeabi_d2iz+0x54>)
   1080e:	42a3      	cmp	r3, r4
   10810:	dc0f      	bgt.n	10832 <__aeabi_d2iz+0x3a>
   10812:	2480      	movs	r4, #128	; 0x80
   10814:	4d0e      	ldr	r5, [pc, #56]	; (10850 <__aeabi_d2iz+0x58>)
   10816:	0364      	lsls	r4, r4, #13
   10818:	4322      	orrs	r2, r4
   1081a:	1aed      	subs	r5, r5, r3
   1081c:	2d1f      	cmp	r5, #31
   1081e:	dd0b      	ble.n	10838 <__aeabi_d2iz+0x40>
   10820:	480c      	ldr	r0, [pc, #48]	; (10854 <__aeabi_d2iz+0x5c>)
   10822:	1ac3      	subs	r3, r0, r3
   10824:	40da      	lsrs	r2, r3
   10826:	4254      	negs	r4, r2
   10828:	2900      	cmp	r1, #0
   1082a:	d100      	bne.n	1082e <__aeabi_d2iz+0x36>
   1082c:	0014      	movs	r4, r2
   1082e:	0020      	movs	r0, r4
   10830:	bd30      	pop	{r4, r5, pc}
   10832:	4b09      	ldr	r3, [pc, #36]	; (10858 <__aeabi_d2iz+0x60>)
   10834:	18cc      	adds	r4, r1, r3
   10836:	e7fa      	b.n	1082e <__aeabi_d2iz+0x36>
   10838:	4c08      	ldr	r4, [pc, #32]	; (1085c <__aeabi_d2iz+0x64>)
   1083a:	40e8      	lsrs	r0, r5
   1083c:	46a4      	mov	ip, r4
   1083e:	4463      	add	r3, ip
   10840:	409a      	lsls	r2, r3
   10842:	4302      	orrs	r2, r0
   10844:	e7ef      	b.n	10826 <__aeabi_d2iz+0x2e>
   10846:	46c0      	nop			; (mov r8, r8)
   10848:	000003fe 	.word	0x000003fe
   1084c:	0000041d 	.word	0x0000041d
   10850:	00000433 	.word	0x00000433
   10854:	00000413 	.word	0x00000413
   10858:	7fffffff 	.word	0x7fffffff
   1085c:	fffffbed 	.word	0xfffffbed

00010860 <__aeabi_ui2d>:
   10860:	b510      	push	{r4, lr}
   10862:	1e04      	subs	r4, r0, #0
   10864:	d028      	beq.n	108b8 <__aeabi_ui2d+0x58>
   10866:	f000 f833 	bl	108d0 <__clzsi2>
   1086a:	4b15      	ldr	r3, [pc, #84]	; (108c0 <__aeabi_ui2d+0x60>)
   1086c:	4a15      	ldr	r2, [pc, #84]	; (108c4 <__aeabi_ui2d+0x64>)
   1086e:	1a1b      	subs	r3, r3, r0
   10870:	1ad2      	subs	r2, r2, r3
   10872:	2a1f      	cmp	r2, #31
   10874:	dd15      	ble.n	108a2 <__aeabi_ui2d+0x42>
   10876:	4a14      	ldr	r2, [pc, #80]	; (108c8 <__aeabi_ui2d+0x68>)
   10878:	1ad2      	subs	r2, r2, r3
   1087a:	4094      	lsls	r4, r2
   1087c:	2200      	movs	r2, #0
   1087e:	0324      	lsls	r4, r4, #12
   10880:	055b      	lsls	r3, r3, #21
   10882:	0b24      	lsrs	r4, r4, #12
   10884:	0d5b      	lsrs	r3, r3, #21
   10886:	2100      	movs	r1, #0
   10888:	0010      	movs	r0, r2
   1088a:	0324      	lsls	r4, r4, #12
   1088c:	0d0a      	lsrs	r2, r1, #20
   1088e:	0b24      	lsrs	r4, r4, #12
   10890:	0512      	lsls	r2, r2, #20
   10892:	4322      	orrs	r2, r4
   10894:	4c0d      	ldr	r4, [pc, #52]	; (108cc <__aeabi_ui2d+0x6c>)
   10896:	051b      	lsls	r3, r3, #20
   10898:	4022      	ands	r2, r4
   1089a:	4313      	orrs	r3, r2
   1089c:	005b      	lsls	r3, r3, #1
   1089e:	0859      	lsrs	r1, r3, #1
   108a0:	bd10      	pop	{r4, pc}
   108a2:	0021      	movs	r1, r4
   108a4:	4091      	lsls	r1, r2
   108a6:	000a      	movs	r2, r1
   108a8:	210b      	movs	r1, #11
   108aa:	1a08      	subs	r0, r1, r0
   108ac:	40c4      	lsrs	r4, r0
   108ae:	055b      	lsls	r3, r3, #21
   108b0:	0324      	lsls	r4, r4, #12
   108b2:	0b24      	lsrs	r4, r4, #12
   108b4:	0d5b      	lsrs	r3, r3, #21
   108b6:	e7e6      	b.n	10886 <__aeabi_ui2d+0x26>
   108b8:	2300      	movs	r3, #0
   108ba:	2400      	movs	r4, #0
   108bc:	2200      	movs	r2, #0
   108be:	e7e2      	b.n	10886 <__aeabi_ui2d+0x26>
   108c0:	0000041e 	.word	0x0000041e
   108c4:	00000433 	.word	0x00000433
   108c8:	00000413 	.word	0x00000413
   108cc:	800fffff 	.word	0x800fffff

000108d0 <__clzsi2>:
   108d0:	211c      	movs	r1, #28
   108d2:	2301      	movs	r3, #1
   108d4:	041b      	lsls	r3, r3, #16
   108d6:	4298      	cmp	r0, r3
   108d8:	d301      	bcc.n	108de <__clzsi2+0xe>
   108da:	0c00      	lsrs	r0, r0, #16
   108dc:	3910      	subs	r1, #16
   108de:	0a1b      	lsrs	r3, r3, #8
   108e0:	4298      	cmp	r0, r3
   108e2:	d301      	bcc.n	108e8 <__clzsi2+0x18>
   108e4:	0a00      	lsrs	r0, r0, #8
   108e6:	3908      	subs	r1, #8
   108e8:	091b      	lsrs	r3, r3, #4
   108ea:	4298      	cmp	r0, r3
   108ec:	d301      	bcc.n	108f2 <__clzsi2+0x22>
   108ee:	0900      	lsrs	r0, r0, #4
   108f0:	3904      	subs	r1, #4
   108f2:	a202      	add	r2, pc, #8	; (adr r2, 108fc <__clzsi2+0x2c>)
   108f4:	5c10      	ldrb	r0, [r2, r0]
   108f6:	1840      	adds	r0, r0, r1
   108f8:	4770      	bx	lr
   108fa:	46c0      	nop			; (mov r8, r8)
   108fc:	02020304 	.word	0x02020304
   10900:	01010101 	.word	0x01010101
	...

0001090c <__assert_func>:
   1090c:	b530      	push	{r4, r5, lr}
   1090e:	001c      	movs	r4, r3
   10910:	4b09      	ldr	r3, [pc, #36]	; (10938 <__assert_func+0x2c>)
   10912:	0005      	movs	r5, r0
   10914:	681b      	ldr	r3, [r3, #0]
   10916:	b085      	sub	sp, #20
   10918:	68d8      	ldr	r0, [r3, #12]
   1091a:	4b08      	ldr	r3, [pc, #32]	; (1093c <__assert_func+0x30>)
   1091c:	2a00      	cmp	r2, #0
   1091e:	d101      	bne.n	10924 <__assert_func+0x18>
   10920:	4b07      	ldr	r3, [pc, #28]	; (10940 <__assert_func+0x34>)
   10922:	001a      	movs	r2, r3
   10924:	9202      	str	r2, [sp, #8]
   10926:	9301      	str	r3, [sp, #4]
   10928:	9100      	str	r1, [sp, #0]
   1092a:	002b      	movs	r3, r5
   1092c:	0022      	movs	r2, r4
   1092e:	4905      	ldr	r1, [pc, #20]	; (10944 <__assert_func+0x38>)
   10930:	f000 f818 	bl	10964 <fiprintf>
   10934:	f001 f812 	bl	1195c <abort>
   10938:	200000a4 	.word	0x200000a4
   1093c:	00014348 	.word	0x00014348
   10940:	00014383 	.word	0x00014383
   10944:	00014355 	.word	0x00014355

00010948 <__cxa_atexit>:
   10948:	b570      	push	{r4, r5, r6, lr}
   1094a:	4c05      	ldr	r4, [pc, #20]	; (10960 <__cxa_atexit+0x18>)
   1094c:	0005      	movs	r5, r0
   1094e:	0013      	movs	r3, r2
   10950:	1e20      	subs	r0, r4, #0
   10952:	d004      	beq.n	1095e <__cxa_atexit+0x16>
   10954:	000a      	movs	r2, r1
   10956:	2002      	movs	r0, #2
   10958:	0029      	movs	r1, r5
   1095a:	e000      	b.n	1095e <__cxa_atexit+0x16>
   1095c:	bf00      	nop
   1095e:	bd70      	pop	{r4, r5, r6, pc}
   10960:	00000000 	.word	0x00000000

00010964 <fiprintf>:
   10964:	b40e      	push	{r1, r2, r3}
   10966:	b503      	push	{r0, r1, lr}
   10968:	0001      	movs	r1, r0
   1096a:	ab03      	add	r3, sp, #12
   1096c:	4804      	ldr	r0, [pc, #16]	; (10980 <fiprintf+0x1c>)
   1096e:	cb04      	ldmia	r3!, {r2}
   10970:	6800      	ldr	r0, [r0, #0]
   10972:	9301      	str	r3, [sp, #4]
   10974:	f000 f940 	bl	10bf8 <_vfiprintf_r>
   10978:	b002      	add	sp, #8
   1097a:	bc08      	pop	{r3}
   1097c:	b003      	add	sp, #12
   1097e:	4718      	bx	r3
   10980:	200000a4 	.word	0x200000a4

00010984 <__libc_init_array>:
   10984:	b570      	push	{r4, r5, r6, lr}
   10986:	2600      	movs	r6, #0
   10988:	4d0c      	ldr	r5, [pc, #48]	; (109bc <__libc_init_array+0x38>)
   1098a:	4c0d      	ldr	r4, [pc, #52]	; (109c0 <__libc_init_array+0x3c>)
   1098c:	1b64      	subs	r4, r4, r5
   1098e:	10a4      	asrs	r4, r4, #2
   10990:	42a6      	cmp	r6, r4
   10992:	d109      	bne.n	109a8 <__libc_init_array+0x24>
   10994:	2600      	movs	r6, #0
   10996:	f002 fd2b 	bl	133f0 <_init>
   1099a:	4d0a      	ldr	r5, [pc, #40]	; (109c4 <__libc_init_array+0x40>)
   1099c:	4c0a      	ldr	r4, [pc, #40]	; (109c8 <__libc_init_array+0x44>)
   1099e:	1b64      	subs	r4, r4, r5
   109a0:	10a4      	asrs	r4, r4, #2
   109a2:	42a6      	cmp	r6, r4
   109a4:	d105      	bne.n	109b2 <__libc_init_array+0x2e>
   109a6:	bd70      	pop	{r4, r5, r6, pc}
   109a8:	00b3      	lsls	r3, r6, #2
   109aa:	58eb      	ldr	r3, [r5, r3]
   109ac:	4798      	blx	r3
   109ae:	3601      	adds	r6, #1
   109b0:	e7ee      	b.n	10990 <__libc_init_array+0xc>
   109b2:	00b3      	lsls	r3, r6, #2
   109b4:	58eb      	ldr	r3, [r5, r3]
   109b6:	4798      	blx	r3
   109b8:	3601      	adds	r6, #1
   109ba:	e7f2      	b.n	109a2 <__libc_init_array+0x1e>
   109bc:	20000274 	.word	0x20000274
   109c0:	20000274 	.word	0x20000274
   109c4:	20000274 	.word	0x20000274
   109c8:	20000298 	.word	0x20000298

000109cc <malloc>:
   109cc:	b510      	push	{r4, lr}
   109ce:	4b03      	ldr	r3, [pc, #12]	; (109dc <malloc+0x10>)
   109d0:	0001      	movs	r1, r0
   109d2:	6818      	ldr	r0, [r3, #0]
   109d4:	f000 f88a 	bl	10aec <_malloc_r>
   109d8:	bd10      	pop	{r4, pc}
   109da:	46c0      	nop			; (mov r8, r8)
   109dc:	200000a4 	.word	0x200000a4

000109e0 <free>:
   109e0:	b510      	push	{r4, lr}
   109e2:	4b03      	ldr	r3, [pc, #12]	; (109f0 <free+0x10>)
   109e4:	0001      	movs	r1, r0
   109e6:	6818      	ldr	r0, [r3, #0]
   109e8:	f000 f836 	bl	10a58 <_free_r>
   109ec:	bd10      	pop	{r4, pc}
   109ee:	46c0      	nop			; (mov r8, r8)
   109f0:	200000a4 	.word	0x200000a4

000109f4 <__ascii_mbtowc>:
   109f4:	b082      	sub	sp, #8
   109f6:	2900      	cmp	r1, #0
   109f8:	d100      	bne.n	109fc <__ascii_mbtowc+0x8>
   109fa:	a901      	add	r1, sp, #4
   109fc:	1e10      	subs	r0, r2, #0
   109fe:	d006      	beq.n	10a0e <__ascii_mbtowc+0x1a>
   10a00:	2b00      	cmp	r3, #0
   10a02:	d006      	beq.n	10a12 <__ascii_mbtowc+0x1e>
   10a04:	7813      	ldrb	r3, [r2, #0]
   10a06:	600b      	str	r3, [r1, #0]
   10a08:	7810      	ldrb	r0, [r2, #0]
   10a0a:	1e43      	subs	r3, r0, #1
   10a0c:	4198      	sbcs	r0, r3
   10a0e:	b002      	add	sp, #8
   10a10:	4770      	bx	lr
   10a12:	2002      	movs	r0, #2
   10a14:	4240      	negs	r0, r0
   10a16:	e7fa      	b.n	10a0e <__ascii_mbtowc+0x1a>

00010a18 <memcmp>:
   10a18:	b530      	push	{r4, r5, lr}
   10a1a:	2400      	movs	r4, #0
   10a1c:	42a2      	cmp	r2, r4
   10a1e:	d101      	bne.n	10a24 <memcmp+0xc>
   10a20:	2000      	movs	r0, #0
   10a22:	e005      	b.n	10a30 <memcmp+0x18>
   10a24:	5d03      	ldrb	r3, [r0, r4]
   10a26:	1c65      	adds	r5, r4, #1
   10a28:	5d0c      	ldrb	r4, [r1, r4]
   10a2a:	42a3      	cmp	r3, r4
   10a2c:	d001      	beq.n	10a32 <memcmp+0x1a>
   10a2e:	1b18      	subs	r0, r3, r4
   10a30:	bd30      	pop	{r4, r5, pc}
   10a32:	002c      	movs	r4, r5
   10a34:	e7f2      	b.n	10a1c <memcmp+0x4>

00010a36 <memcpy>:
   10a36:	2300      	movs	r3, #0
   10a38:	b510      	push	{r4, lr}
   10a3a:	429a      	cmp	r2, r3
   10a3c:	d100      	bne.n	10a40 <memcpy+0xa>
   10a3e:	bd10      	pop	{r4, pc}
   10a40:	5ccc      	ldrb	r4, [r1, r3]
   10a42:	54c4      	strb	r4, [r0, r3]
   10a44:	3301      	adds	r3, #1
   10a46:	e7f8      	b.n	10a3a <memcpy+0x4>

00010a48 <memset>:
   10a48:	0003      	movs	r3, r0
   10a4a:	1882      	adds	r2, r0, r2
   10a4c:	4293      	cmp	r3, r2
   10a4e:	d100      	bne.n	10a52 <memset+0xa>
   10a50:	4770      	bx	lr
   10a52:	7019      	strb	r1, [r3, #0]
   10a54:	3301      	adds	r3, #1
   10a56:	e7f9      	b.n	10a4c <memset+0x4>

00010a58 <_free_r>:
   10a58:	b570      	push	{r4, r5, r6, lr}
   10a5a:	0005      	movs	r5, r0
   10a5c:	2900      	cmp	r1, #0
   10a5e:	d010      	beq.n	10a82 <_free_r+0x2a>
   10a60:	1f0c      	subs	r4, r1, #4
   10a62:	6823      	ldr	r3, [r4, #0]
   10a64:	2b00      	cmp	r3, #0
   10a66:	da00      	bge.n	10a6a <_free_r+0x12>
   10a68:	18e4      	adds	r4, r4, r3
   10a6a:	0028      	movs	r0, r5
   10a6c:	f001 fffb 	bl	12a66 <__malloc_lock>
   10a70:	4a1d      	ldr	r2, [pc, #116]	; (10ae8 <_free_r+0x90>)
   10a72:	6813      	ldr	r3, [r2, #0]
   10a74:	2b00      	cmp	r3, #0
   10a76:	d105      	bne.n	10a84 <_free_r+0x2c>
   10a78:	6063      	str	r3, [r4, #4]
   10a7a:	6014      	str	r4, [r2, #0]
   10a7c:	0028      	movs	r0, r5
   10a7e:	f001 fff3 	bl	12a68 <__malloc_unlock>
   10a82:	bd70      	pop	{r4, r5, r6, pc}
   10a84:	42a3      	cmp	r3, r4
   10a86:	d909      	bls.n	10a9c <_free_r+0x44>
   10a88:	6821      	ldr	r1, [r4, #0]
   10a8a:	1860      	adds	r0, r4, r1
   10a8c:	4283      	cmp	r3, r0
   10a8e:	d1f3      	bne.n	10a78 <_free_r+0x20>
   10a90:	6818      	ldr	r0, [r3, #0]
   10a92:	685b      	ldr	r3, [r3, #4]
   10a94:	1841      	adds	r1, r0, r1
   10a96:	6021      	str	r1, [r4, #0]
   10a98:	e7ee      	b.n	10a78 <_free_r+0x20>
   10a9a:	0013      	movs	r3, r2
   10a9c:	685a      	ldr	r2, [r3, #4]
   10a9e:	2a00      	cmp	r2, #0
   10aa0:	d001      	beq.n	10aa6 <_free_r+0x4e>
   10aa2:	42a2      	cmp	r2, r4
   10aa4:	d9f9      	bls.n	10a9a <_free_r+0x42>
   10aa6:	6819      	ldr	r1, [r3, #0]
   10aa8:	1858      	adds	r0, r3, r1
   10aaa:	42a0      	cmp	r0, r4
   10aac:	d10b      	bne.n	10ac6 <_free_r+0x6e>
   10aae:	6820      	ldr	r0, [r4, #0]
   10ab0:	1809      	adds	r1, r1, r0
   10ab2:	1858      	adds	r0, r3, r1
   10ab4:	6019      	str	r1, [r3, #0]
   10ab6:	4282      	cmp	r2, r0
   10ab8:	d1e0      	bne.n	10a7c <_free_r+0x24>
   10aba:	6810      	ldr	r0, [r2, #0]
   10abc:	6852      	ldr	r2, [r2, #4]
   10abe:	1841      	adds	r1, r0, r1
   10ac0:	6019      	str	r1, [r3, #0]
   10ac2:	605a      	str	r2, [r3, #4]
   10ac4:	e7da      	b.n	10a7c <_free_r+0x24>
   10ac6:	42a0      	cmp	r0, r4
   10ac8:	d902      	bls.n	10ad0 <_free_r+0x78>
   10aca:	230c      	movs	r3, #12
   10acc:	602b      	str	r3, [r5, #0]
   10ace:	e7d5      	b.n	10a7c <_free_r+0x24>
   10ad0:	6821      	ldr	r1, [r4, #0]
   10ad2:	1860      	adds	r0, r4, r1
   10ad4:	4282      	cmp	r2, r0
   10ad6:	d103      	bne.n	10ae0 <_free_r+0x88>
   10ad8:	6810      	ldr	r0, [r2, #0]
   10ada:	6852      	ldr	r2, [r2, #4]
   10adc:	1841      	adds	r1, r0, r1
   10ade:	6021      	str	r1, [r4, #0]
   10ae0:	6062      	str	r2, [r4, #4]
   10ae2:	605c      	str	r4, [r3, #4]
   10ae4:	e7ca      	b.n	10a7c <_free_r+0x24>
   10ae6:	46c0      	nop			; (mov r8, r8)
   10ae8:	20000f78 	.word	0x20000f78

00010aec <_malloc_r>:
   10aec:	2303      	movs	r3, #3
   10aee:	b570      	push	{r4, r5, r6, lr}
   10af0:	1ccd      	adds	r5, r1, #3
   10af2:	439d      	bics	r5, r3
   10af4:	3508      	adds	r5, #8
   10af6:	0006      	movs	r6, r0
   10af8:	2d0c      	cmp	r5, #12
   10afa:	d21e      	bcs.n	10b3a <_malloc_r+0x4e>
   10afc:	250c      	movs	r5, #12
   10afe:	42a9      	cmp	r1, r5
   10b00:	d81d      	bhi.n	10b3e <_malloc_r+0x52>
   10b02:	0030      	movs	r0, r6
   10b04:	f001 ffaf 	bl	12a66 <__malloc_lock>
   10b08:	4a25      	ldr	r2, [pc, #148]	; (10ba0 <_malloc_r+0xb4>)
   10b0a:	6814      	ldr	r4, [r2, #0]
   10b0c:	0021      	movs	r1, r4
   10b0e:	2900      	cmp	r1, #0
   10b10:	d119      	bne.n	10b46 <_malloc_r+0x5a>
   10b12:	4c24      	ldr	r4, [pc, #144]	; (10ba4 <_malloc_r+0xb8>)
   10b14:	6823      	ldr	r3, [r4, #0]
   10b16:	2b00      	cmp	r3, #0
   10b18:	d103      	bne.n	10b22 <_malloc_r+0x36>
   10b1a:	0030      	movs	r0, r6
   10b1c:	f000 fe02 	bl	11724 <_sbrk_r>
   10b20:	6020      	str	r0, [r4, #0]
   10b22:	0029      	movs	r1, r5
   10b24:	0030      	movs	r0, r6
   10b26:	f000 fdfd 	bl	11724 <_sbrk_r>
   10b2a:	1c43      	adds	r3, r0, #1
   10b2c:	d12c      	bne.n	10b88 <_malloc_r+0x9c>
   10b2e:	230c      	movs	r3, #12
   10b30:	0030      	movs	r0, r6
   10b32:	6033      	str	r3, [r6, #0]
   10b34:	f001 ff98 	bl	12a68 <__malloc_unlock>
   10b38:	e003      	b.n	10b42 <_malloc_r+0x56>
   10b3a:	2d00      	cmp	r5, #0
   10b3c:	dadf      	bge.n	10afe <_malloc_r+0x12>
   10b3e:	230c      	movs	r3, #12
   10b40:	6033      	str	r3, [r6, #0]
   10b42:	2000      	movs	r0, #0
   10b44:	bd70      	pop	{r4, r5, r6, pc}
   10b46:	680b      	ldr	r3, [r1, #0]
   10b48:	1b5b      	subs	r3, r3, r5
   10b4a:	d41a      	bmi.n	10b82 <_malloc_r+0x96>
   10b4c:	2b0b      	cmp	r3, #11
   10b4e:	d903      	bls.n	10b58 <_malloc_r+0x6c>
   10b50:	600b      	str	r3, [r1, #0]
   10b52:	18cc      	adds	r4, r1, r3
   10b54:	6025      	str	r5, [r4, #0]
   10b56:	e003      	b.n	10b60 <_malloc_r+0x74>
   10b58:	428c      	cmp	r4, r1
   10b5a:	d10e      	bne.n	10b7a <_malloc_r+0x8e>
   10b5c:	6863      	ldr	r3, [r4, #4]
   10b5e:	6013      	str	r3, [r2, #0]
   10b60:	0030      	movs	r0, r6
   10b62:	f001 ff81 	bl	12a68 <__malloc_unlock>
   10b66:	0020      	movs	r0, r4
   10b68:	2207      	movs	r2, #7
   10b6a:	300b      	adds	r0, #11
   10b6c:	1d23      	adds	r3, r4, #4
   10b6e:	4390      	bics	r0, r2
   10b70:	1ac3      	subs	r3, r0, r3
   10b72:	d0e7      	beq.n	10b44 <_malloc_r+0x58>
   10b74:	425a      	negs	r2, r3
   10b76:	50e2      	str	r2, [r4, r3]
   10b78:	e7e4      	b.n	10b44 <_malloc_r+0x58>
   10b7a:	684b      	ldr	r3, [r1, #4]
   10b7c:	6063      	str	r3, [r4, #4]
   10b7e:	000c      	movs	r4, r1
   10b80:	e7ee      	b.n	10b60 <_malloc_r+0x74>
   10b82:	000c      	movs	r4, r1
   10b84:	6849      	ldr	r1, [r1, #4]
   10b86:	e7c2      	b.n	10b0e <_malloc_r+0x22>
   10b88:	2303      	movs	r3, #3
   10b8a:	1cc4      	adds	r4, r0, #3
   10b8c:	439c      	bics	r4, r3
   10b8e:	42a0      	cmp	r0, r4
   10b90:	d0e0      	beq.n	10b54 <_malloc_r+0x68>
   10b92:	1a21      	subs	r1, r4, r0
   10b94:	0030      	movs	r0, r6
   10b96:	f000 fdc5 	bl	11724 <_sbrk_r>
   10b9a:	1c43      	adds	r3, r0, #1
   10b9c:	d1da      	bne.n	10b54 <_malloc_r+0x68>
   10b9e:	e7c6      	b.n	10b2e <_malloc_r+0x42>
   10ba0:	20000f78 	.word	0x20000f78
   10ba4:	20000f7c 	.word	0x20000f7c

00010ba8 <__sfputc_r>:
   10ba8:	6893      	ldr	r3, [r2, #8]
   10baa:	b510      	push	{r4, lr}
   10bac:	3b01      	subs	r3, #1
   10bae:	6093      	str	r3, [r2, #8]
   10bb0:	2b00      	cmp	r3, #0
   10bb2:	da05      	bge.n	10bc0 <__sfputc_r+0x18>
   10bb4:	6994      	ldr	r4, [r2, #24]
   10bb6:	42a3      	cmp	r3, r4
   10bb8:	db08      	blt.n	10bcc <__sfputc_r+0x24>
   10bba:	b2cb      	uxtb	r3, r1
   10bbc:	2b0a      	cmp	r3, #10
   10bbe:	d005      	beq.n	10bcc <__sfputc_r+0x24>
   10bc0:	6813      	ldr	r3, [r2, #0]
   10bc2:	1c58      	adds	r0, r3, #1
   10bc4:	6010      	str	r0, [r2, #0]
   10bc6:	7019      	strb	r1, [r3, #0]
   10bc8:	b2c8      	uxtb	r0, r1
   10bca:	bd10      	pop	{r4, pc}
   10bcc:	f000 fdee 	bl	117ac <__swbuf_r>
   10bd0:	e7fb      	b.n	10bca <__sfputc_r+0x22>

00010bd2 <__sfputs_r>:
   10bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bd4:	0006      	movs	r6, r0
   10bd6:	000f      	movs	r7, r1
   10bd8:	0014      	movs	r4, r2
   10bda:	18d5      	adds	r5, r2, r3
   10bdc:	42ac      	cmp	r4, r5
   10bde:	d101      	bne.n	10be4 <__sfputs_r+0x12>
   10be0:	2000      	movs	r0, #0
   10be2:	e007      	b.n	10bf4 <__sfputs_r+0x22>
   10be4:	7821      	ldrb	r1, [r4, #0]
   10be6:	003a      	movs	r2, r7
   10be8:	0030      	movs	r0, r6
   10bea:	f7ff ffdd 	bl	10ba8 <__sfputc_r>
   10bee:	3401      	adds	r4, #1
   10bf0:	1c43      	adds	r3, r0, #1
   10bf2:	d1f3      	bne.n	10bdc <__sfputs_r+0xa>
   10bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00010bf8 <_vfiprintf_r>:
   10bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bfa:	b09f      	sub	sp, #124	; 0x7c
   10bfc:	0006      	movs	r6, r0
   10bfe:	000f      	movs	r7, r1
   10c00:	0014      	movs	r4, r2
   10c02:	9305      	str	r3, [sp, #20]
   10c04:	2800      	cmp	r0, #0
   10c06:	d004      	beq.n	10c12 <_vfiprintf_r+0x1a>
   10c08:	6983      	ldr	r3, [r0, #24]
   10c0a:	2b00      	cmp	r3, #0
   10c0c:	d101      	bne.n	10c12 <_vfiprintf_r+0x1a>
   10c0e:	f001 fe11 	bl	12834 <__sinit>
   10c12:	4b7f      	ldr	r3, [pc, #508]	; (10e10 <_vfiprintf_r+0x218>)
   10c14:	429f      	cmp	r7, r3
   10c16:	d15c      	bne.n	10cd2 <_vfiprintf_r+0xda>
   10c18:	6877      	ldr	r7, [r6, #4]
   10c1a:	89bb      	ldrh	r3, [r7, #12]
   10c1c:	071b      	lsls	r3, r3, #28
   10c1e:	d562      	bpl.n	10ce6 <_vfiprintf_r+0xee>
   10c20:	693b      	ldr	r3, [r7, #16]
   10c22:	2b00      	cmp	r3, #0
   10c24:	d05f      	beq.n	10ce6 <_vfiprintf_r+0xee>
   10c26:	2300      	movs	r3, #0
   10c28:	ad06      	add	r5, sp, #24
   10c2a:	616b      	str	r3, [r5, #20]
   10c2c:	3320      	adds	r3, #32
   10c2e:	766b      	strb	r3, [r5, #25]
   10c30:	3310      	adds	r3, #16
   10c32:	76ab      	strb	r3, [r5, #26]
   10c34:	9402      	str	r4, [sp, #8]
   10c36:	9c02      	ldr	r4, [sp, #8]
   10c38:	7823      	ldrb	r3, [r4, #0]
   10c3a:	2b00      	cmp	r3, #0
   10c3c:	d15d      	bne.n	10cfa <_vfiprintf_r+0x102>
   10c3e:	9b02      	ldr	r3, [sp, #8]
   10c40:	1ae3      	subs	r3, r4, r3
   10c42:	9304      	str	r3, [sp, #16]
   10c44:	d00d      	beq.n	10c62 <_vfiprintf_r+0x6a>
   10c46:	9b04      	ldr	r3, [sp, #16]
   10c48:	9a02      	ldr	r2, [sp, #8]
   10c4a:	0039      	movs	r1, r7
   10c4c:	0030      	movs	r0, r6
   10c4e:	f7ff ffc0 	bl	10bd2 <__sfputs_r>
   10c52:	1c43      	adds	r3, r0, #1
   10c54:	d100      	bne.n	10c58 <_vfiprintf_r+0x60>
   10c56:	e0cc      	b.n	10df2 <_vfiprintf_r+0x1fa>
   10c58:	696a      	ldr	r2, [r5, #20]
   10c5a:	9b04      	ldr	r3, [sp, #16]
   10c5c:	4694      	mov	ip, r2
   10c5e:	4463      	add	r3, ip
   10c60:	616b      	str	r3, [r5, #20]
   10c62:	7823      	ldrb	r3, [r4, #0]
   10c64:	2b00      	cmp	r3, #0
   10c66:	d100      	bne.n	10c6a <_vfiprintf_r+0x72>
   10c68:	e0c3      	b.n	10df2 <_vfiprintf_r+0x1fa>
   10c6a:	2201      	movs	r2, #1
   10c6c:	2300      	movs	r3, #0
   10c6e:	4252      	negs	r2, r2
   10c70:	606a      	str	r2, [r5, #4]
   10c72:	a902      	add	r1, sp, #8
   10c74:	3254      	adds	r2, #84	; 0x54
   10c76:	1852      	adds	r2, r2, r1
   10c78:	3401      	adds	r4, #1
   10c7a:	602b      	str	r3, [r5, #0]
   10c7c:	60eb      	str	r3, [r5, #12]
   10c7e:	60ab      	str	r3, [r5, #8]
   10c80:	7013      	strb	r3, [r2, #0]
   10c82:	65ab      	str	r3, [r5, #88]	; 0x58
   10c84:	7821      	ldrb	r1, [r4, #0]
   10c86:	2205      	movs	r2, #5
   10c88:	4862      	ldr	r0, [pc, #392]	; (10e14 <_vfiprintf_r+0x21c>)
   10c8a:	f001 fee1 	bl	12a50 <memchr>
   10c8e:	1c63      	adds	r3, r4, #1
   10c90:	469c      	mov	ip, r3
   10c92:	2800      	cmp	r0, #0
   10c94:	d135      	bne.n	10d02 <_vfiprintf_r+0x10a>
   10c96:	6829      	ldr	r1, [r5, #0]
   10c98:	06cb      	lsls	r3, r1, #27
   10c9a:	d504      	bpl.n	10ca6 <_vfiprintf_r+0xae>
   10c9c:	2353      	movs	r3, #83	; 0x53
   10c9e:	aa02      	add	r2, sp, #8
   10ca0:	3020      	adds	r0, #32
   10ca2:	189b      	adds	r3, r3, r2
   10ca4:	7018      	strb	r0, [r3, #0]
   10ca6:	070b      	lsls	r3, r1, #28
   10ca8:	d504      	bpl.n	10cb4 <_vfiprintf_r+0xbc>
   10caa:	2353      	movs	r3, #83	; 0x53
   10cac:	202b      	movs	r0, #43	; 0x2b
   10cae:	aa02      	add	r2, sp, #8
   10cb0:	189b      	adds	r3, r3, r2
   10cb2:	7018      	strb	r0, [r3, #0]
   10cb4:	7823      	ldrb	r3, [r4, #0]
   10cb6:	2b2a      	cmp	r3, #42	; 0x2a
   10cb8:	d02c      	beq.n	10d14 <_vfiprintf_r+0x11c>
   10cba:	2000      	movs	r0, #0
   10cbc:	210a      	movs	r1, #10
   10cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10cc0:	7822      	ldrb	r2, [r4, #0]
   10cc2:	3a30      	subs	r2, #48	; 0x30
   10cc4:	2a09      	cmp	r2, #9
   10cc6:	d800      	bhi.n	10cca <_vfiprintf_r+0xd2>
   10cc8:	e06b      	b.n	10da2 <_vfiprintf_r+0x1aa>
   10cca:	2800      	cmp	r0, #0
   10ccc:	d02a      	beq.n	10d24 <_vfiprintf_r+0x12c>
   10cce:	9309      	str	r3, [sp, #36]	; 0x24
   10cd0:	e028      	b.n	10d24 <_vfiprintf_r+0x12c>
   10cd2:	4b51      	ldr	r3, [pc, #324]	; (10e18 <_vfiprintf_r+0x220>)
   10cd4:	429f      	cmp	r7, r3
   10cd6:	d101      	bne.n	10cdc <_vfiprintf_r+0xe4>
   10cd8:	68b7      	ldr	r7, [r6, #8]
   10cda:	e79e      	b.n	10c1a <_vfiprintf_r+0x22>
   10cdc:	4b4f      	ldr	r3, [pc, #316]	; (10e1c <_vfiprintf_r+0x224>)
   10cde:	429f      	cmp	r7, r3
   10ce0:	d19b      	bne.n	10c1a <_vfiprintf_r+0x22>
   10ce2:	68f7      	ldr	r7, [r6, #12]
   10ce4:	e799      	b.n	10c1a <_vfiprintf_r+0x22>
   10ce6:	0039      	movs	r1, r7
   10ce8:	0030      	movs	r0, r6
   10cea:	f000 fdc1 	bl	11870 <__swsetup_r>
   10cee:	2800      	cmp	r0, #0
   10cf0:	d099      	beq.n	10c26 <_vfiprintf_r+0x2e>
   10cf2:	2001      	movs	r0, #1
   10cf4:	4240      	negs	r0, r0
   10cf6:	b01f      	add	sp, #124	; 0x7c
   10cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cfa:	2b25      	cmp	r3, #37	; 0x25
   10cfc:	d09f      	beq.n	10c3e <_vfiprintf_r+0x46>
   10cfe:	3401      	adds	r4, #1
   10d00:	e79a      	b.n	10c38 <_vfiprintf_r+0x40>
   10d02:	4b44      	ldr	r3, [pc, #272]	; (10e14 <_vfiprintf_r+0x21c>)
   10d04:	6829      	ldr	r1, [r5, #0]
   10d06:	1ac0      	subs	r0, r0, r3
   10d08:	2301      	movs	r3, #1
   10d0a:	4083      	lsls	r3, r0
   10d0c:	430b      	orrs	r3, r1
   10d0e:	602b      	str	r3, [r5, #0]
   10d10:	4664      	mov	r4, ip
   10d12:	e7b7      	b.n	10c84 <_vfiprintf_r+0x8c>
   10d14:	9b05      	ldr	r3, [sp, #20]
   10d16:	1d18      	adds	r0, r3, #4
   10d18:	681b      	ldr	r3, [r3, #0]
   10d1a:	9005      	str	r0, [sp, #20]
   10d1c:	2b00      	cmp	r3, #0
   10d1e:	db3a      	blt.n	10d96 <_vfiprintf_r+0x19e>
   10d20:	9309      	str	r3, [sp, #36]	; 0x24
   10d22:	4664      	mov	r4, ip
   10d24:	7823      	ldrb	r3, [r4, #0]
   10d26:	2b2e      	cmp	r3, #46	; 0x2e
   10d28:	d10b      	bne.n	10d42 <_vfiprintf_r+0x14a>
   10d2a:	7863      	ldrb	r3, [r4, #1]
   10d2c:	1c62      	adds	r2, r4, #1
   10d2e:	2b2a      	cmp	r3, #42	; 0x2a
   10d30:	d13f      	bne.n	10db2 <_vfiprintf_r+0x1ba>
   10d32:	9b05      	ldr	r3, [sp, #20]
   10d34:	3402      	adds	r4, #2
   10d36:	1d1a      	adds	r2, r3, #4
   10d38:	681b      	ldr	r3, [r3, #0]
   10d3a:	9205      	str	r2, [sp, #20]
   10d3c:	2b00      	cmp	r3, #0
   10d3e:	db35      	blt.n	10dac <_vfiprintf_r+0x1b4>
   10d40:	9307      	str	r3, [sp, #28]
   10d42:	7821      	ldrb	r1, [r4, #0]
   10d44:	2203      	movs	r2, #3
   10d46:	4836      	ldr	r0, [pc, #216]	; (10e20 <_vfiprintf_r+0x228>)
   10d48:	f001 fe82 	bl	12a50 <memchr>
   10d4c:	2800      	cmp	r0, #0
   10d4e:	d007      	beq.n	10d60 <_vfiprintf_r+0x168>
   10d50:	4b33      	ldr	r3, [pc, #204]	; (10e20 <_vfiprintf_r+0x228>)
   10d52:	682a      	ldr	r2, [r5, #0]
   10d54:	1ac0      	subs	r0, r0, r3
   10d56:	2340      	movs	r3, #64	; 0x40
   10d58:	4083      	lsls	r3, r0
   10d5a:	4313      	orrs	r3, r2
   10d5c:	602b      	str	r3, [r5, #0]
   10d5e:	3401      	adds	r4, #1
   10d60:	7821      	ldrb	r1, [r4, #0]
   10d62:	1c63      	adds	r3, r4, #1
   10d64:	2206      	movs	r2, #6
   10d66:	482f      	ldr	r0, [pc, #188]	; (10e24 <_vfiprintf_r+0x22c>)
   10d68:	9302      	str	r3, [sp, #8]
   10d6a:	7629      	strb	r1, [r5, #24]
   10d6c:	f001 fe70 	bl	12a50 <memchr>
   10d70:	2800      	cmp	r0, #0
   10d72:	d044      	beq.n	10dfe <_vfiprintf_r+0x206>
   10d74:	4b2c      	ldr	r3, [pc, #176]	; (10e28 <_vfiprintf_r+0x230>)
   10d76:	2b00      	cmp	r3, #0
   10d78:	d12f      	bne.n	10dda <_vfiprintf_r+0x1e2>
   10d7a:	6829      	ldr	r1, [r5, #0]
   10d7c:	9b05      	ldr	r3, [sp, #20]
   10d7e:	2207      	movs	r2, #7
   10d80:	05c9      	lsls	r1, r1, #23
   10d82:	d528      	bpl.n	10dd6 <_vfiprintf_r+0x1de>
   10d84:	189b      	adds	r3, r3, r2
   10d86:	4393      	bics	r3, r2
   10d88:	3308      	adds	r3, #8
   10d8a:	9305      	str	r3, [sp, #20]
   10d8c:	696b      	ldr	r3, [r5, #20]
   10d8e:	9a03      	ldr	r2, [sp, #12]
   10d90:	189b      	adds	r3, r3, r2
   10d92:	616b      	str	r3, [r5, #20]
   10d94:	e74f      	b.n	10c36 <_vfiprintf_r+0x3e>
   10d96:	425b      	negs	r3, r3
   10d98:	60eb      	str	r3, [r5, #12]
   10d9a:	2302      	movs	r3, #2
   10d9c:	430b      	orrs	r3, r1
   10d9e:	602b      	str	r3, [r5, #0]
   10da0:	e7bf      	b.n	10d22 <_vfiprintf_r+0x12a>
   10da2:	434b      	muls	r3, r1
   10da4:	3401      	adds	r4, #1
   10da6:	189b      	adds	r3, r3, r2
   10da8:	2001      	movs	r0, #1
   10daa:	e789      	b.n	10cc0 <_vfiprintf_r+0xc8>
   10dac:	2301      	movs	r3, #1
   10dae:	425b      	negs	r3, r3
   10db0:	e7c6      	b.n	10d40 <_vfiprintf_r+0x148>
   10db2:	2300      	movs	r3, #0
   10db4:	0014      	movs	r4, r2
   10db6:	200a      	movs	r0, #10
   10db8:	001a      	movs	r2, r3
   10dba:	606b      	str	r3, [r5, #4]
   10dbc:	7821      	ldrb	r1, [r4, #0]
   10dbe:	3930      	subs	r1, #48	; 0x30
   10dc0:	2909      	cmp	r1, #9
   10dc2:	d903      	bls.n	10dcc <_vfiprintf_r+0x1d4>
   10dc4:	2b00      	cmp	r3, #0
   10dc6:	d0bc      	beq.n	10d42 <_vfiprintf_r+0x14a>
   10dc8:	9207      	str	r2, [sp, #28]
   10dca:	e7ba      	b.n	10d42 <_vfiprintf_r+0x14a>
   10dcc:	4342      	muls	r2, r0
   10dce:	3401      	adds	r4, #1
   10dd0:	1852      	adds	r2, r2, r1
   10dd2:	2301      	movs	r3, #1
   10dd4:	e7f2      	b.n	10dbc <_vfiprintf_r+0x1c4>
   10dd6:	3307      	adds	r3, #7
   10dd8:	e7d5      	b.n	10d86 <_vfiprintf_r+0x18e>
   10dda:	ab05      	add	r3, sp, #20
   10ddc:	9300      	str	r3, [sp, #0]
   10dde:	003a      	movs	r2, r7
   10de0:	4b12      	ldr	r3, [pc, #72]	; (10e2c <_vfiprintf_r+0x234>)
   10de2:	0029      	movs	r1, r5
   10de4:	0030      	movs	r0, r6
   10de6:	f000 f8bf 	bl	10f68 <_printf_float>
   10dea:	9003      	str	r0, [sp, #12]
   10dec:	9b03      	ldr	r3, [sp, #12]
   10dee:	3301      	adds	r3, #1
   10df0:	d1cc      	bne.n	10d8c <_vfiprintf_r+0x194>
   10df2:	89bb      	ldrh	r3, [r7, #12]
   10df4:	065b      	lsls	r3, r3, #25
   10df6:	d500      	bpl.n	10dfa <_vfiprintf_r+0x202>
   10df8:	e77b      	b.n	10cf2 <_vfiprintf_r+0xfa>
   10dfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10dfc:	e77b      	b.n	10cf6 <_vfiprintf_r+0xfe>
   10dfe:	ab05      	add	r3, sp, #20
   10e00:	9300      	str	r3, [sp, #0]
   10e02:	003a      	movs	r2, r7
   10e04:	4b09      	ldr	r3, [pc, #36]	; (10e2c <_vfiprintf_r+0x234>)
   10e06:	0029      	movs	r1, r5
   10e08:	0030      	movs	r0, r6
   10e0a:	f000 fb67 	bl	114dc <_printf_i>
   10e0e:	e7ec      	b.n	10dea <_vfiprintf_r+0x1f2>
   10e10:	00014508 	.word	0x00014508
   10e14:	00014392 	.word	0x00014392
   10e18:	00014528 	.word	0x00014528
   10e1c:	000144e8 	.word	0x000144e8
   10e20:	00014398 	.word	0x00014398
   10e24:	0001439c 	.word	0x0001439c
   10e28:	00010f69 	.word	0x00010f69
   10e2c:	00010bd3 	.word	0x00010bd3

00010e30 <__cvt>:
   10e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e32:	b08b      	sub	sp, #44	; 0x2c
   10e34:	0014      	movs	r4, r2
   10e36:	1e1d      	subs	r5, r3, #0
   10e38:	9912      	ldr	r1, [sp, #72]	; 0x48
   10e3a:	da53      	bge.n	10ee4 <__cvt+0xb4>
   10e3c:	2480      	movs	r4, #128	; 0x80
   10e3e:	0624      	lsls	r4, r4, #24
   10e40:	191b      	adds	r3, r3, r4
   10e42:	001d      	movs	r5, r3
   10e44:	0014      	movs	r4, r2
   10e46:	232d      	movs	r3, #45	; 0x2d
   10e48:	700b      	strb	r3, [r1, #0]
   10e4a:	2320      	movs	r3, #32
   10e4c:	9e14      	ldr	r6, [sp, #80]	; 0x50
   10e4e:	2203      	movs	r2, #3
   10e50:	439e      	bics	r6, r3
   10e52:	2e46      	cmp	r6, #70	; 0x46
   10e54:	d007      	beq.n	10e66 <__cvt+0x36>
   10e56:	0033      	movs	r3, r6
   10e58:	3b45      	subs	r3, #69	; 0x45
   10e5a:	4259      	negs	r1, r3
   10e5c:	414b      	adcs	r3, r1
   10e5e:	9910      	ldr	r1, [sp, #64]	; 0x40
   10e60:	3a01      	subs	r2, #1
   10e62:	18cb      	adds	r3, r1, r3
   10e64:	9310      	str	r3, [sp, #64]	; 0x40
   10e66:	ab09      	add	r3, sp, #36	; 0x24
   10e68:	9304      	str	r3, [sp, #16]
   10e6a:	ab08      	add	r3, sp, #32
   10e6c:	9303      	str	r3, [sp, #12]
   10e6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10e70:	9200      	str	r2, [sp, #0]
   10e72:	9302      	str	r3, [sp, #8]
   10e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10e76:	0022      	movs	r2, r4
   10e78:	9301      	str	r3, [sp, #4]
   10e7a:	002b      	movs	r3, r5
   10e7c:	f000 fdfa 	bl	11a74 <_dtoa_r>
   10e80:	0007      	movs	r7, r0
   10e82:	2e47      	cmp	r6, #71	; 0x47
   10e84:	d102      	bne.n	10e8c <__cvt+0x5c>
   10e86:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e88:	07db      	lsls	r3, r3, #31
   10e8a:	d524      	bpl.n	10ed6 <__cvt+0xa6>
   10e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10e8e:	18fb      	adds	r3, r7, r3
   10e90:	9307      	str	r3, [sp, #28]
   10e92:	2e46      	cmp	r6, #70	; 0x46
   10e94:	d114      	bne.n	10ec0 <__cvt+0x90>
   10e96:	783b      	ldrb	r3, [r7, #0]
   10e98:	2b30      	cmp	r3, #48	; 0x30
   10e9a:	d10c      	bne.n	10eb6 <__cvt+0x86>
   10e9c:	2200      	movs	r2, #0
   10e9e:	2300      	movs	r3, #0
   10ea0:	0020      	movs	r0, r4
   10ea2:	0029      	movs	r1, r5
   10ea4:	f7fd ff80 	bl	eda8 <__aeabi_dcmpeq>
   10ea8:	2800      	cmp	r0, #0
   10eaa:	d104      	bne.n	10eb6 <__cvt+0x86>
   10eac:	2301      	movs	r3, #1
   10eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10eb0:	1a9b      	subs	r3, r3, r2
   10eb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10eb4:	6013      	str	r3, [r2, #0]
   10eb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10eb8:	9a07      	ldr	r2, [sp, #28]
   10eba:	681b      	ldr	r3, [r3, #0]
   10ebc:	18d3      	adds	r3, r2, r3
   10ebe:	9307      	str	r3, [sp, #28]
   10ec0:	2200      	movs	r2, #0
   10ec2:	2300      	movs	r3, #0
   10ec4:	0020      	movs	r0, r4
   10ec6:	0029      	movs	r1, r5
   10ec8:	f7fd ff6e 	bl	eda8 <__aeabi_dcmpeq>
   10ecc:	2230      	movs	r2, #48	; 0x30
   10ece:	2800      	cmp	r0, #0
   10ed0:	d00d      	beq.n	10eee <__cvt+0xbe>
   10ed2:	9b07      	ldr	r3, [sp, #28]
   10ed4:	9309      	str	r3, [sp, #36]	; 0x24
   10ed6:	0038      	movs	r0, r7
   10ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10eda:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10edc:	1bdb      	subs	r3, r3, r7
   10ede:	6013      	str	r3, [r2, #0]
   10ee0:	b00b      	add	sp, #44	; 0x2c
   10ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ee4:	2300      	movs	r3, #0
   10ee6:	e7af      	b.n	10e48 <__cvt+0x18>
   10ee8:	1c59      	adds	r1, r3, #1
   10eea:	9109      	str	r1, [sp, #36]	; 0x24
   10eec:	701a      	strb	r2, [r3, #0]
   10eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ef0:	9907      	ldr	r1, [sp, #28]
   10ef2:	4299      	cmp	r1, r3
   10ef4:	d8f8      	bhi.n	10ee8 <__cvt+0xb8>
   10ef6:	e7ee      	b.n	10ed6 <__cvt+0xa6>

00010ef8 <__exponent>:
   10ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10efa:	232b      	movs	r3, #43	; 0x2b
   10efc:	b085      	sub	sp, #20
   10efe:	0007      	movs	r7, r0
   10f00:	000c      	movs	r4, r1
   10f02:	7002      	strb	r2, [r0, #0]
   10f04:	1c86      	adds	r6, r0, #2
   10f06:	2900      	cmp	r1, #0
   10f08:	da01      	bge.n	10f0e <__exponent+0x16>
   10f0a:	232d      	movs	r3, #45	; 0x2d
   10f0c:	424c      	negs	r4, r1
   10f0e:	707b      	strb	r3, [r7, #1]
   10f10:	2c09      	cmp	r4, #9
   10f12:	dd23      	ble.n	10f5c <__exponent+0x64>
   10f14:	ab02      	add	r3, sp, #8
   10f16:	1ddd      	adds	r5, r3, #7
   10f18:	1e6b      	subs	r3, r5, #1
   10f1a:	0020      	movs	r0, r4
   10f1c:	210a      	movs	r1, #10
   10f1e:	9301      	str	r3, [sp, #4]
   10f20:	f7fd ff2c 	bl	ed7c <__aeabi_idivmod>
   10f24:	1e6b      	subs	r3, r5, #1
   10f26:	3130      	adds	r1, #48	; 0x30
   10f28:	7019      	strb	r1, [r3, #0]
   10f2a:	0020      	movs	r0, r4
   10f2c:	210a      	movs	r1, #10
   10f2e:	f7fd fe3f 	bl	ebb0 <__divsi3>
   10f32:	0004      	movs	r4, r0
   10f34:	2809      	cmp	r0, #9
   10f36:	dc0a      	bgt.n	10f4e <__exponent+0x56>
   10f38:	3d02      	subs	r5, #2
   10f3a:	3430      	adds	r4, #48	; 0x30
   10f3c:	702c      	strb	r4, [r5, #0]
   10f3e:	ab02      	add	r3, sp, #8
   10f40:	3307      	adds	r3, #7
   10f42:	0030      	movs	r0, r6
   10f44:	42ab      	cmp	r3, r5
   10f46:	d804      	bhi.n	10f52 <__exponent+0x5a>
   10f48:	1bc0      	subs	r0, r0, r7
   10f4a:	b005      	add	sp, #20
   10f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f4e:	9d01      	ldr	r5, [sp, #4]
   10f50:	e7e2      	b.n	10f18 <__exponent+0x20>
   10f52:	782b      	ldrb	r3, [r5, #0]
   10f54:	3501      	adds	r5, #1
   10f56:	7033      	strb	r3, [r6, #0]
   10f58:	3601      	adds	r6, #1
   10f5a:	e7f0      	b.n	10f3e <__exponent+0x46>
   10f5c:	2330      	movs	r3, #48	; 0x30
   10f5e:	18e4      	adds	r4, r4, r3
   10f60:	7033      	strb	r3, [r6, #0]
   10f62:	1cb0      	adds	r0, r6, #2
   10f64:	7074      	strb	r4, [r6, #1]
   10f66:	e7ef      	b.n	10f48 <__exponent+0x50>

00010f68 <_printf_float>:
   10f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f6a:	b095      	sub	sp, #84	; 0x54
   10f6c:	000c      	movs	r4, r1
   10f6e:	920a      	str	r2, [sp, #40]	; 0x28
   10f70:	930b      	str	r3, [sp, #44]	; 0x2c
   10f72:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   10f74:	9009      	str	r0, [sp, #36]	; 0x24
   10f76:	f001 fcf3 	bl	12960 <_localeconv_r>
   10f7a:	6803      	ldr	r3, [r0, #0]
   10f7c:	0018      	movs	r0, r3
   10f7e:	930d      	str	r3, [sp, #52]	; 0x34
   10f80:	f000 fbf8 	bl	11774 <strlen>
   10f84:	2300      	movs	r3, #0
   10f86:	9312      	str	r3, [sp, #72]	; 0x48
   10f88:	6823      	ldr	r3, [r4, #0]
   10f8a:	900e      	str	r0, [sp, #56]	; 0x38
   10f8c:	930c      	str	r3, [sp, #48]	; 0x30
   10f8e:	990c      	ldr	r1, [sp, #48]	; 0x30
   10f90:	7e27      	ldrb	r7, [r4, #24]
   10f92:	682b      	ldr	r3, [r5, #0]
   10f94:	2207      	movs	r2, #7
   10f96:	05c9      	lsls	r1, r1, #23
   10f98:	d547      	bpl.n	1102a <_printf_float+0xc2>
   10f9a:	189b      	adds	r3, r3, r2
   10f9c:	4393      	bics	r3, r2
   10f9e:	001a      	movs	r2, r3
   10fa0:	3208      	adds	r2, #8
   10fa2:	602a      	str	r2, [r5, #0]
   10fa4:	681a      	ldr	r2, [r3, #0]
   10fa6:	685b      	ldr	r3, [r3, #4]
   10fa8:	64a2      	str	r2, [r4, #72]	; 0x48
   10faa:	64e3      	str	r3, [r4, #76]	; 0x4c
   10fac:	2201      	movs	r2, #1
   10fae:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   10fb0:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   10fb2:	006b      	lsls	r3, r5, #1
   10fb4:	085b      	lsrs	r3, r3, #1
   10fb6:	930f      	str	r3, [sp, #60]	; 0x3c
   10fb8:	4252      	negs	r2, r2
   10fba:	4ba7      	ldr	r3, [pc, #668]	; (11258 <_printf_float+0x2f0>)
   10fbc:	0030      	movs	r0, r6
   10fbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10fc0:	f7ff fbfa 	bl	107b8 <__aeabi_dcmpun>
   10fc4:	2800      	cmp	r0, #0
   10fc6:	d000      	beq.n	10fca <_printf_float+0x62>
   10fc8:	e206      	b.n	113d8 <_printf_float+0x470>
   10fca:	2201      	movs	r2, #1
   10fcc:	4ba2      	ldr	r3, [pc, #648]	; (11258 <_printf_float+0x2f0>)
   10fce:	4252      	negs	r2, r2
   10fd0:	0030      	movs	r0, r6
   10fd2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10fd4:	f7fd fef8 	bl	edc8 <__aeabi_dcmple>
   10fd8:	2800      	cmp	r0, #0
   10fda:	d000      	beq.n	10fde <_printf_float+0x76>
   10fdc:	e1fc      	b.n	113d8 <_printf_float+0x470>
   10fde:	2200      	movs	r2, #0
   10fe0:	2300      	movs	r3, #0
   10fe2:	0030      	movs	r0, r6
   10fe4:	0029      	movs	r1, r5
   10fe6:	f7fd fee5 	bl	edb4 <__aeabi_dcmplt>
   10fea:	2800      	cmp	r0, #0
   10fec:	d003      	beq.n	10ff6 <_printf_float+0x8e>
   10fee:	0023      	movs	r3, r4
   10ff0:	222d      	movs	r2, #45	; 0x2d
   10ff2:	3343      	adds	r3, #67	; 0x43
   10ff4:	701a      	strb	r2, [r3, #0]
   10ff6:	4d99      	ldr	r5, [pc, #612]	; (1125c <_printf_float+0x2f4>)
   10ff8:	2f47      	cmp	r7, #71	; 0x47
   10ffa:	d800      	bhi.n	10ffe <_printf_float+0x96>
   10ffc:	4d98      	ldr	r5, [pc, #608]	; (11260 <_printf_float+0x2f8>)
   10ffe:	2303      	movs	r3, #3
   11000:	2600      	movs	r6, #0
   11002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11004:	6123      	str	r3, [r4, #16]
   11006:	3301      	adds	r3, #1
   11008:	439a      	bics	r2, r3
   1100a:	6022      	str	r2, [r4, #0]
   1100c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1100e:	aa13      	add	r2, sp, #76	; 0x4c
   11010:	9300      	str	r3, [sp, #0]
   11012:	0021      	movs	r1, r4
   11014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11016:	9809      	ldr	r0, [sp, #36]	; 0x24
   11018:	f000 f9f2 	bl	11400 <_printf_common>
   1101c:	1c43      	adds	r3, r0, #1
   1101e:	d000      	beq.n	11022 <_printf_float+0xba>
   11020:	e09c      	b.n	1115c <_printf_float+0x1f4>
   11022:	2001      	movs	r0, #1
   11024:	4240      	negs	r0, r0
   11026:	b015      	add	sp, #84	; 0x54
   11028:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1102a:	3307      	adds	r3, #7
   1102c:	e7b6      	b.n	10f9c <_printf_float+0x34>
   1102e:	2380      	movs	r3, #128	; 0x80
   11030:	6862      	ldr	r2, [r4, #4]
   11032:	00db      	lsls	r3, r3, #3
   11034:	1c51      	adds	r1, r2, #1
   11036:	d145      	bne.n	110c4 <_printf_float+0x15c>
   11038:	3207      	adds	r2, #7
   1103a:	6062      	str	r2, [r4, #4]
   1103c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1103e:	2100      	movs	r1, #0
   11040:	4313      	orrs	r3, r2
   11042:	aa12      	add	r2, sp, #72	; 0x48
   11044:	9205      	str	r2, [sp, #20]
   11046:	aa11      	add	r2, sp, #68	; 0x44
   11048:	9203      	str	r2, [sp, #12]
   1104a:	2223      	movs	r2, #35	; 0x23
   1104c:	6023      	str	r3, [r4, #0]
   1104e:	9106      	str	r1, [sp, #24]
   11050:	9301      	str	r3, [sp, #4]
   11052:	a908      	add	r1, sp, #32
   11054:	6863      	ldr	r3, [r4, #4]
   11056:	1852      	adds	r2, r2, r1
   11058:	9202      	str	r2, [sp, #8]
   1105a:	9300      	str	r3, [sp, #0]
   1105c:	0032      	movs	r2, r6
   1105e:	002b      	movs	r3, r5
   11060:	9704      	str	r7, [sp, #16]
   11062:	9809      	ldr	r0, [sp, #36]	; 0x24
   11064:	f7ff fee4 	bl	10e30 <__cvt>
   11068:	2320      	movs	r3, #32
   1106a:	003a      	movs	r2, r7
   1106c:	0005      	movs	r5, r0
   1106e:	439a      	bics	r2, r3
   11070:	2a47      	cmp	r2, #71	; 0x47
   11072:	d107      	bne.n	11084 <_printf_float+0x11c>
   11074:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11076:	1cda      	adds	r2, r3, #3
   11078:	db02      	blt.n	11080 <_printf_float+0x118>
   1107a:	6862      	ldr	r2, [r4, #4]
   1107c:	4293      	cmp	r3, r2
   1107e:	dd5b      	ble.n	11138 <_printf_float+0x1d0>
   11080:	3f02      	subs	r7, #2
   11082:	b2ff      	uxtb	r7, r7
   11084:	9911      	ldr	r1, [sp, #68]	; 0x44
   11086:	2f65      	cmp	r7, #101	; 0x65
   11088:	d83b      	bhi.n	11102 <_printf_float+0x19a>
   1108a:	0020      	movs	r0, r4
   1108c:	3901      	subs	r1, #1
   1108e:	003a      	movs	r2, r7
   11090:	3050      	adds	r0, #80	; 0x50
   11092:	9111      	str	r1, [sp, #68]	; 0x44
   11094:	f7ff ff30 	bl	10ef8 <__exponent>
   11098:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1109a:	0006      	movs	r6, r0
   1109c:	1883      	adds	r3, r0, r2
   1109e:	6123      	str	r3, [r4, #16]
   110a0:	2a01      	cmp	r2, #1
   110a2:	dc02      	bgt.n	110aa <_printf_float+0x142>
   110a4:	6822      	ldr	r2, [r4, #0]
   110a6:	07d2      	lsls	r2, r2, #31
   110a8:	d501      	bpl.n	110ae <_printf_float+0x146>
   110aa:	3301      	adds	r3, #1
   110ac:	6123      	str	r3, [r4, #16]
   110ae:	2323      	movs	r3, #35	; 0x23
   110b0:	aa08      	add	r2, sp, #32
   110b2:	189b      	adds	r3, r3, r2
   110b4:	781b      	ldrb	r3, [r3, #0]
   110b6:	2b00      	cmp	r3, #0
   110b8:	d0a8      	beq.n	1100c <_printf_float+0xa4>
   110ba:	0023      	movs	r3, r4
   110bc:	222d      	movs	r2, #45	; 0x2d
   110be:	3343      	adds	r3, #67	; 0x43
   110c0:	701a      	strb	r2, [r3, #0]
   110c2:	e7a3      	b.n	1100c <_printf_float+0xa4>
   110c4:	2f67      	cmp	r7, #103	; 0x67
   110c6:	d001      	beq.n	110cc <_printf_float+0x164>
   110c8:	2f47      	cmp	r7, #71	; 0x47
   110ca:	d1b7      	bne.n	1103c <_printf_float+0xd4>
   110cc:	2a00      	cmp	r2, #0
   110ce:	d016      	beq.n	110fe <_printf_float+0x196>
   110d0:	990c      	ldr	r1, [sp, #48]	; 0x30
   110d2:	a808      	add	r0, sp, #32
   110d4:	430b      	orrs	r3, r1
   110d6:	2100      	movs	r1, #0
   110d8:	9106      	str	r1, [sp, #24]
   110da:	a912      	add	r1, sp, #72	; 0x48
   110dc:	9105      	str	r1, [sp, #20]
   110de:	a911      	add	r1, sp, #68	; 0x44
   110e0:	9103      	str	r1, [sp, #12]
   110e2:	2123      	movs	r1, #35	; 0x23
   110e4:	1809      	adds	r1, r1, r0
   110e6:	6023      	str	r3, [r4, #0]
   110e8:	9301      	str	r3, [sp, #4]
   110ea:	9200      	str	r2, [sp, #0]
   110ec:	002b      	movs	r3, r5
   110ee:	9704      	str	r7, [sp, #16]
   110f0:	9102      	str	r1, [sp, #8]
   110f2:	0032      	movs	r2, r6
   110f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   110f6:	f7ff fe9b 	bl	10e30 <__cvt>
   110fa:	0005      	movs	r5, r0
   110fc:	e7ba      	b.n	11074 <_printf_float+0x10c>
   110fe:	2201      	movs	r2, #1
   11100:	e79b      	b.n	1103a <_printf_float+0xd2>
   11102:	2f66      	cmp	r7, #102	; 0x66
   11104:	d119      	bne.n	1113a <_printf_float+0x1d2>
   11106:	6863      	ldr	r3, [r4, #4]
   11108:	2900      	cmp	r1, #0
   1110a:	dd0c      	ble.n	11126 <_printf_float+0x1be>
   1110c:	6121      	str	r1, [r4, #16]
   1110e:	2b00      	cmp	r3, #0
   11110:	d102      	bne.n	11118 <_printf_float+0x1b0>
   11112:	6822      	ldr	r2, [r4, #0]
   11114:	07d2      	lsls	r2, r2, #31
   11116:	d502      	bpl.n	1111e <_printf_float+0x1b6>
   11118:	3301      	adds	r3, #1
   1111a:	185b      	adds	r3, r3, r1
   1111c:	6123      	str	r3, [r4, #16]
   1111e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11120:	2600      	movs	r6, #0
   11122:	65a3      	str	r3, [r4, #88]	; 0x58
   11124:	e7c3      	b.n	110ae <_printf_float+0x146>
   11126:	2b00      	cmp	r3, #0
   11128:	d103      	bne.n	11132 <_printf_float+0x1ca>
   1112a:	2201      	movs	r2, #1
   1112c:	6821      	ldr	r1, [r4, #0]
   1112e:	4211      	tst	r1, r2
   11130:	d000      	beq.n	11134 <_printf_float+0x1cc>
   11132:	1c9a      	adds	r2, r3, #2
   11134:	6122      	str	r2, [r4, #16]
   11136:	e7f2      	b.n	1111e <_printf_float+0x1b6>
   11138:	2767      	movs	r7, #103	; 0x67
   1113a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1113c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1113e:	4283      	cmp	r3, r0
   11140:	db05      	blt.n	1114e <_printf_float+0x1e6>
   11142:	6822      	ldr	r2, [r4, #0]
   11144:	6123      	str	r3, [r4, #16]
   11146:	07d2      	lsls	r2, r2, #31
   11148:	d5e9      	bpl.n	1111e <_printf_float+0x1b6>
   1114a:	3301      	adds	r3, #1
   1114c:	e7e6      	b.n	1111c <_printf_float+0x1b4>
   1114e:	2201      	movs	r2, #1
   11150:	2b00      	cmp	r3, #0
   11152:	dc01      	bgt.n	11158 <_printf_float+0x1f0>
   11154:	1892      	adds	r2, r2, r2
   11156:	1ad2      	subs	r2, r2, r3
   11158:	1812      	adds	r2, r2, r0
   1115a:	e7eb      	b.n	11134 <_printf_float+0x1cc>
   1115c:	6822      	ldr	r2, [r4, #0]
   1115e:	0553      	lsls	r3, r2, #21
   11160:	d408      	bmi.n	11174 <_printf_float+0x20c>
   11162:	6923      	ldr	r3, [r4, #16]
   11164:	002a      	movs	r2, r5
   11166:	990a      	ldr	r1, [sp, #40]	; 0x28
   11168:	9809      	ldr	r0, [sp, #36]	; 0x24
   1116a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1116c:	47a8      	blx	r5
   1116e:	1c43      	adds	r3, r0, #1
   11170:	d129      	bne.n	111c6 <_printf_float+0x25e>
   11172:	e756      	b.n	11022 <_printf_float+0xba>
   11174:	2f65      	cmp	r7, #101	; 0x65
   11176:	d800      	bhi.n	1117a <_printf_float+0x212>
   11178:	e0dc      	b.n	11334 <_printf_float+0x3cc>
   1117a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1117c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1117e:	2200      	movs	r2, #0
   11180:	2300      	movs	r3, #0
   11182:	f7fd fe11 	bl	eda8 <__aeabi_dcmpeq>
   11186:	2800      	cmp	r0, #0
   11188:	d035      	beq.n	111f6 <_printf_float+0x28e>
   1118a:	2301      	movs	r3, #1
   1118c:	4a35      	ldr	r2, [pc, #212]	; (11264 <_printf_float+0x2fc>)
   1118e:	990a      	ldr	r1, [sp, #40]	; 0x28
   11190:	9809      	ldr	r0, [sp, #36]	; 0x24
   11192:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11194:	47a8      	blx	r5
   11196:	1c43      	adds	r3, r0, #1
   11198:	d100      	bne.n	1119c <_printf_float+0x234>
   1119a:	e742      	b.n	11022 <_printf_float+0xba>
   1119c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1119e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   111a0:	4293      	cmp	r3, r2
   111a2:	db02      	blt.n	111aa <_printf_float+0x242>
   111a4:	6823      	ldr	r3, [r4, #0]
   111a6:	07db      	lsls	r3, r3, #31
   111a8:	d50d      	bpl.n	111c6 <_printf_float+0x25e>
   111aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   111ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   111ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   111b0:	990a      	ldr	r1, [sp, #40]	; 0x28
   111b2:	9809      	ldr	r0, [sp, #36]	; 0x24
   111b4:	47a8      	blx	r5
   111b6:	2500      	movs	r5, #0
   111b8:	1c43      	adds	r3, r0, #1
   111ba:	d100      	bne.n	111be <_printf_float+0x256>
   111bc:	e731      	b.n	11022 <_printf_float+0xba>
   111be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111c0:	3b01      	subs	r3, #1
   111c2:	429d      	cmp	r5, r3
   111c4:	db0b      	blt.n	111de <_printf_float+0x276>
   111c6:	6823      	ldr	r3, [r4, #0]
   111c8:	2500      	movs	r5, #0
   111ca:	079b      	lsls	r3, r3, #30
   111cc:	d500      	bpl.n	111d0 <_printf_float+0x268>
   111ce:	e0fd      	b.n	113cc <_printf_float+0x464>
   111d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   111d2:	68e0      	ldr	r0, [r4, #12]
   111d4:	4298      	cmp	r0, r3
   111d6:	db00      	blt.n	111da <_printf_float+0x272>
   111d8:	e725      	b.n	11026 <_printf_float+0xbe>
   111da:	0018      	movs	r0, r3
   111dc:	e723      	b.n	11026 <_printf_float+0xbe>
   111de:	0022      	movs	r2, r4
   111e0:	2301      	movs	r3, #1
   111e2:	321a      	adds	r2, #26
   111e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   111e6:	9809      	ldr	r0, [sp, #36]	; 0x24
   111e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   111ea:	47b0      	blx	r6
   111ec:	1c43      	adds	r3, r0, #1
   111ee:	d100      	bne.n	111f2 <_printf_float+0x28a>
   111f0:	e717      	b.n	11022 <_printf_float+0xba>
   111f2:	3501      	adds	r5, #1
   111f4:	e7e3      	b.n	111be <_printf_float+0x256>
   111f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   111f8:	2b00      	cmp	r3, #0
   111fa:	dc35      	bgt.n	11268 <_printf_float+0x300>
   111fc:	2301      	movs	r3, #1
   111fe:	4a19      	ldr	r2, [pc, #100]	; (11264 <_printf_float+0x2fc>)
   11200:	990a      	ldr	r1, [sp, #40]	; 0x28
   11202:	9809      	ldr	r0, [sp, #36]	; 0x24
   11204:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11206:	47b0      	blx	r6
   11208:	1c43      	adds	r3, r0, #1
   1120a:	d100      	bne.n	1120e <_printf_float+0x2a6>
   1120c:	e709      	b.n	11022 <_printf_float+0xba>
   1120e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11210:	2b00      	cmp	r3, #0
   11212:	d105      	bne.n	11220 <_printf_float+0x2b8>
   11214:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11216:	2b00      	cmp	r3, #0
   11218:	d102      	bne.n	11220 <_printf_float+0x2b8>
   1121a:	6823      	ldr	r3, [r4, #0]
   1121c:	07db      	lsls	r3, r3, #31
   1121e:	d5d2      	bpl.n	111c6 <_printf_float+0x25e>
   11220:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11226:	990a      	ldr	r1, [sp, #40]	; 0x28
   11228:	9809      	ldr	r0, [sp, #36]	; 0x24
   1122a:	47b0      	blx	r6
   1122c:	2600      	movs	r6, #0
   1122e:	1c43      	adds	r3, r0, #1
   11230:	d100      	bne.n	11234 <_printf_float+0x2cc>
   11232:	e6f6      	b.n	11022 <_printf_float+0xba>
   11234:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11236:	425b      	negs	r3, r3
   11238:	429e      	cmp	r6, r3
   1123a:	db01      	blt.n	11240 <_printf_float+0x2d8>
   1123c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1123e:	e791      	b.n	11164 <_printf_float+0x1fc>
   11240:	0022      	movs	r2, r4
   11242:	2301      	movs	r3, #1
   11244:	321a      	adds	r2, #26
   11246:	990a      	ldr	r1, [sp, #40]	; 0x28
   11248:	9809      	ldr	r0, [sp, #36]	; 0x24
   1124a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1124c:	47b8      	blx	r7
   1124e:	1c43      	adds	r3, r0, #1
   11250:	d100      	bne.n	11254 <_printf_float+0x2ec>
   11252:	e6e6      	b.n	11022 <_printf_float+0xba>
   11254:	3601      	adds	r6, #1
   11256:	e7ed      	b.n	11234 <_printf_float+0x2cc>
   11258:	7fefffff 	.word	0x7fefffff
   1125c:	000143a7 	.word	0x000143a7
   11260:	000143a3 	.word	0x000143a3
   11264:	000143b3 	.word	0x000143b3
   11268:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1126a:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1126c:	429e      	cmp	r6, r3
   1126e:	dd00      	ble.n	11272 <_printf_float+0x30a>
   11270:	001e      	movs	r6, r3
   11272:	2e00      	cmp	r6, #0
   11274:	dc35      	bgt.n	112e2 <_printf_float+0x37a>
   11276:	2300      	movs	r3, #0
   11278:	930c      	str	r3, [sp, #48]	; 0x30
   1127a:	43f3      	mvns	r3, r6
   1127c:	17db      	asrs	r3, r3, #31
   1127e:	930f      	str	r3, [sp, #60]	; 0x3c
   11280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11282:	6da7      	ldr	r7, [r4, #88]	; 0x58
   11284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11286:	4033      	ands	r3, r6
   11288:	1afb      	subs	r3, r7, r3
   1128a:	429a      	cmp	r2, r3
   1128c:	db32      	blt.n	112f4 <_printf_float+0x38c>
   1128e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11290:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11292:	4293      	cmp	r3, r2
   11294:	db3c      	blt.n	11310 <_printf_float+0x3a8>
   11296:	6823      	ldr	r3, [r4, #0]
   11298:	07db      	lsls	r3, r3, #31
   1129a:	d439      	bmi.n	11310 <_printf_float+0x3a8>
   1129c:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1129e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   112a0:	1bf3      	subs	r3, r6, r7
   112a2:	1ab6      	subs	r6, r6, r2
   112a4:	429e      	cmp	r6, r3
   112a6:	dd00      	ble.n	112aa <_printf_float+0x342>
   112a8:	001e      	movs	r6, r3
   112aa:	2e00      	cmp	r6, #0
   112ac:	dc39      	bgt.n	11322 <_printf_float+0x3ba>
   112ae:	43f7      	mvns	r7, r6
   112b0:	2500      	movs	r5, #0
   112b2:	17fb      	asrs	r3, r7, #31
   112b4:	930c      	str	r3, [sp, #48]	; 0x30
   112b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   112b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   112ba:	990c      	ldr	r1, [sp, #48]	; 0x30
   112bc:	1a9b      	subs	r3, r3, r2
   112be:	0032      	movs	r2, r6
   112c0:	400a      	ands	r2, r1
   112c2:	1a9b      	subs	r3, r3, r2
   112c4:	429d      	cmp	r5, r3
   112c6:	db00      	blt.n	112ca <_printf_float+0x362>
   112c8:	e77d      	b.n	111c6 <_printf_float+0x25e>
   112ca:	0022      	movs	r2, r4
   112cc:	2301      	movs	r3, #1
   112ce:	321a      	adds	r2, #26
   112d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   112d2:	9809      	ldr	r0, [sp, #36]	; 0x24
   112d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   112d6:	47b8      	blx	r7
   112d8:	1c43      	adds	r3, r0, #1
   112da:	d100      	bne.n	112de <_printf_float+0x376>
   112dc:	e6a1      	b.n	11022 <_printf_float+0xba>
   112de:	3501      	adds	r5, #1
   112e0:	e7e9      	b.n	112b6 <_printf_float+0x34e>
   112e2:	0033      	movs	r3, r6
   112e4:	002a      	movs	r2, r5
   112e6:	990a      	ldr	r1, [sp, #40]	; 0x28
   112e8:	9809      	ldr	r0, [sp, #36]	; 0x24
   112ea:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   112ec:	47b8      	blx	r7
   112ee:	1c43      	adds	r3, r0, #1
   112f0:	d1c1      	bne.n	11276 <_printf_float+0x30e>
   112f2:	e696      	b.n	11022 <_printf_float+0xba>
   112f4:	0022      	movs	r2, r4
   112f6:	2301      	movs	r3, #1
   112f8:	321a      	adds	r2, #26
   112fa:	990a      	ldr	r1, [sp, #40]	; 0x28
   112fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   112fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11300:	47b8      	blx	r7
   11302:	1c43      	adds	r3, r0, #1
   11304:	d100      	bne.n	11308 <_printf_float+0x3a0>
   11306:	e68c      	b.n	11022 <_printf_float+0xba>
   11308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1130a:	3301      	adds	r3, #1
   1130c:	930c      	str	r3, [sp, #48]	; 0x30
   1130e:	e7b7      	b.n	11280 <_printf_float+0x318>
   11310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11312:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11314:	990a      	ldr	r1, [sp, #40]	; 0x28
   11316:	9809      	ldr	r0, [sp, #36]	; 0x24
   11318:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1131a:	47b0      	blx	r6
   1131c:	1c43      	adds	r3, r0, #1
   1131e:	d1bd      	bne.n	1129c <_printf_float+0x334>
   11320:	e67f      	b.n	11022 <_printf_float+0xba>
   11322:	19ea      	adds	r2, r5, r7
   11324:	0033      	movs	r3, r6
   11326:	990a      	ldr	r1, [sp, #40]	; 0x28
   11328:	9809      	ldr	r0, [sp, #36]	; 0x24
   1132a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1132c:	47a8      	blx	r5
   1132e:	1c43      	adds	r3, r0, #1
   11330:	d1bd      	bne.n	112ae <_printf_float+0x346>
   11332:	e676      	b.n	11022 <_printf_float+0xba>
   11334:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11336:	2b01      	cmp	r3, #1
   11338:	dc02      	bgt.n	11340 <_printf_float+0x3d8>
   1133a:	2301      	movs	r3, #1
   1133c:	421a      	tst	r2, r3
   1133e:	d038      	beq.n	113b2 <_printf_float+0x44a>
   11340:	2301      	movs	r3, #1
   11342:	002a      	movs	r2, r5
   11344:	990a      	ldr	r1, [sp, #40]	; 0x28
   11346:	9809      	ldr	r0, [sp, #36]	; 0x24
   11348:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1134a:	47b8      	blx	r7
   1134c:	1c43      	adds	r3, r0, #1
   1134e:	d100      	bne.n	11352 <_printf_float+0x3ea>
   11350:	e667      	b.n	11022 <_printf_float+0xba>
   11352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11356:	990a      	ldr	r1, [sp, #40]	; 0x28
   11358:	9809      	ldr	r0, [sp, #36]	; 0x24
   1135a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1135c:	47b8      	blx	r7
   1135e:	1c43      	adds	r3, r0, #1
   11360:	d100      	bne.n	11364 <_printf_float+0x3fc>
   11362:	e65e      	b.n	11022 <_printf_float+0xba>
   11364:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   11366:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   11368:	2200      	movs	r2, #0
   1136a:	2300      	movs	r3, #0
   1136c:	f7fd fd1c 	bl	eda8 <__aeabi_dcmpeq>
   11370:	2800      	cmp	r0, #0
   11372:	d008      	beq.n	11386 <_printf_float+0x41e>
   11374:	2500      	movs	r5, #0
   11376:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11378:	3b01      	subs	r3, #1
   1137a:	429d      	cmp	r5, r3
   1137c:	db0d      	blt.n	1139a <_printf_float+0x432>
   1137e:	0022      	movs	r2, r4
   11380:	0033      	movs	r3, r6
   11382:	3250      	adds	r2, #80	; 0x50
   11384:	e6ef      	b.n	11166 <_printf_float+0x1fe>
   11386:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11388:	1c6a      	adds	r2, r5, #1
   1138a:	3b01      	subs	r3, #1
   1138c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1138e:	9809      	ldr	r0, [sp, #36]	; 0x24
   11390:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11392:	47a8      	blx	r5
   11394:	1c43      	adds	r3, r0, #1
   11396:	d1f2      	bne.n	1137e <_printf_float+0x416>
   11398:	e643      	b.n	11022 <_printf_float+0xba>
   1139a:	0022      	movs	r2, r4
   1139c:	2301      	movs	r3, #1
   1139e:	321a      	adds	r2, #26
   113a0:	990a      	ldr	r1, [sp, #40]	; 0x28
   113a2:	9809      	ldr	r0, [sp, #36]	; 0x24
   113a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   113a6:	47b8      	blx	r7
   113a8:	1c43      	adds	r3, r0, #1
   113aa:	d100      	bne.n	113ae <_printf_float+0x446>
   113ac:	e639      	b.n	11022 <_printf_float+0xba>
   113ae:	3501      	adds	r5, #1
   113b0:	e7e1      	b.n	11376 <_printf_float+0x40e>
   113b2:	002a      	movs	r2, r5
   113b4:	e7ea      	b.n	1138c <_printf_float+0x424>
   113b6:	0022      	movs	r2, r4
   113b8:	2301      	movs	r3, #1
   113ba:	3219      	adds	r2, #25
   113bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   113be:	9809      	ldr	r0, [sp, #36]	; 0x24
   113c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   113c2:	47b0      	blx	r6
   113c4:	1c43      	adds	r3, r0, #1
   113c6:	d100      	bne.n	113ca <_printf_float+0x462>
   113c8:	e62b      	b.n	11022 <_printf_float+0xba>
   113ca:	3501      	adds	r5, #1
   113cc:	68e3      	ldr	r3, [r4, #12]
   113ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   113d0:	1a9b      	subs	r3, r3, r2
   113d2:	429d      	cmp	r5, r3
   113d4:	dbef      	blt.n	113b6 <_printf_float+0x44e>
   113d6:	e6fb      	b.n	111d0 <_printf_float+0x268>
   113d8:	0032      	movs	r2, r6
   113da:	002b      	movs	r3, r5
   113dc:	0030      	movs	r0, r6
   113de:	0029      	movs	r1, r5
   113e0:	f7ff f9ea 	bl	107b8 <__aeabi_dcmpun>
   113e4:	2800      	cmp	r0, #0
   113e6:	d100      	bne.n	113ea <_printf_float+0x482>
   113e8:	e621      	b.n	1102e <_printf_float+0xc6>
   113ea:	4d03      	ldr	r5, [pc, #12]	; (113f8 <_printf_float+0x490>)
   113ec:	2f47      	cmp	r7, #71	; 0x47
   113ee:	d900      	bls.n	113f2 <_printf_float+0x48a>
   113f0:	e605      	b.n	10ffe <_printf_float+0x96>
   113f2:	4d02      	ldr	r5, [pc, #8]	; (113fc <_printf_float+0x494>)
   113f4:	e603      	b.n	10ffe <_printf_float+0x96>
   113f6:	46c0      	nop			; (mov r8, r8)
   113f8:	000143af 	.word	0x000143af
   113fc:	000143ab 	.word	0x000143ab

00011400 <_printf_common>:
   11400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11402:	0015      	movs	r5, r2
   11404:	9301      	str	r3, [sp, #4]
   11406:	688a      	ldr	r2, [r1, #8]
   11408:	690b      	ldr	r3, [r1, #16]
   1140a:	9000      	str	r0, [sp, #0]
   1140c:	000c      	movs	r4, r1
   1140e:	4293      	cmp	r3, r2
   11410:	da00      	bge.n	11414 <_printf_common+0x14>
   11412:	0013      	movs	r3, r2
   11414:	0022      	movs	r2, r4
   11416:	602b      	str	r3, [r5, #0]
   11418:	3243      	adds	r2, #67	; 0x43
   1141a:	7812      	ldrb	r2, [r2, #0]
   1141c:	2a00      	cmp	r2, #0
   1141e:	d001      	beq.n	11424 <_printf_common+0x24>
   11420:	3301      	adds	r3, #1
   11422:	602b      	str	r3, [r5, #0]
   11424:	6823      	ldr	r3, [r4, #0]
   11426:	069b      	lsls	r3, r3, #26
   11428:	d502      	bpl.n	11430 <_printf_common+0x30>
   1142a:	682b      	ldr	r3, [r5, #0]
   1142c:	3302      	adds	r3, #2
   1142e:	602b      	str	r3, [r5, #0]
   11430:	2706      	movs	r7, #6
   11432:	6823      	ldr	r3, [r4, #0]
   11434:	401f      	ands	r7, r3
   11436:	d027      	beq.n	11488 <_printf_common+0x88>
   11438:	0023      	movs	r3, r4
   1143a:	3343      	adds	r3, #67	; 0x43
   1143c:	781b      	ldrb	r3, [r3, #0]
   1143e:	1e5a      	subs	r2, r3, #1
   11440:	4193      	sbcs	r3, r2
   11442:	6822      	ldr	r2, [r4, #0]
   11444:	0692      	lsls	r2, r2, #26
   11446:	d430      	bmi.n	114aa <_printf_common+0xaa>
   11448:	0022      	movs	r2, r4
   1144a:	9901      	ldr	r1, [sp, #4]
   1144c:	3243      	adds	r2, #67	; 0x43
   1144e:	9800      	ldr	r0, [sp, #0]
   11450:	9e08      	ldr	r6, [sp, #32]
   11452:	47b0      	blx	r6
   11454:	1c43      	adds	r3, r0, #1
   11456:	d025      	beq.n	114a4 <_printf_common+0xa4>
   11458:	2306      	movs	r3, #6
   1145a:	6820      	ldr	r0, [r4, #0]
   1145c:	682a      	ldr	r2, [r5, #0]
   1145e:	68e1      	ldr	r1, [r4, #12]
   11460:	4003      	ands	r3, r0
   11462:	2500      	movs	r5, #0
   11464:	2b04      	cmp	r3, #4
   11466:	d103      	bne.n	11470 <_printf_common+0x70>
   11468:	1a8d      	subs	r5, r1, r2
   1146a:	43eb      	mvns	r3, r5
   1146c:	17db      	asrs	r3, r3, #31
   1146e:	401d      	ands	r5, r3
   11470:	68a3      	ldr	r3, [r4, #8]
   11472:	6922      	ldr	r2, [r4, #16]
   11474:	4293      	cmp	r3, r2
   11476:	dd01      	ble.n	1147c <_printf_common+0x7c>
   11478:	1a9b      	subs	r3, r3, r2
   1147a:	18ed      	adds	r5, r5, r3
   1147c:	2700      	movs	r7, #0
   1147e:	42bd      	cmp	r5, r7
   11480:	d120      	bne.n	114c4 <_printf_common+0xc4>
   11482:	2000      	movs	r0, #0
   11484:	e010      	b.n	114a8 <_printf_common+0xa8>
   11486:	3701      	adds	r7, #1
   11488:	68e3      	ldr	r3, [r4, #12]
   1148a:	682a      	ldr	r2, [r5, #0]
   1148c:	1a9b      	subs	r3, r3, r2
   1148e:	429f      	cmp	r7, r3
   11490:	dad2      	bge.n	11438 <_printf_common+0x38>
   11492:	0022      	movs	r2, r4
   11494:	2301      	movs	r3, #1
   11496:	3219      	adds	r2, #25
   11498:	9901      	ldr	r1, [sp, #4]
   1149a:	9800      	ldr	r0, [sp, #0]
   1149c:	9e08      	ldr	r6, [sp, #32]
   1149e:	47b0      	blx	r6
   114a0:	1c43      	adds	r3, r0, #1
   114a2:	d1f0      	bne.n	11486 <_printf_common+0x86>
   114a4:	2001      	movs	r0, #1
   114a6:	4240      	negs	r0, r0
   114a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   114aa:	2030      	movs	r0, #48	; 0x30
   114ac:	18e1      	adds	r1, r4, r3
   114ae:	3143      	adds	r1, #67	; 0x43
   114b0:	7008      	strb	r0, [r1, #0]
   114b2:	0021      	movs	r1, r4
   114b4:	1c5a      	adds	r2, r3, #1
   114b6:	3145      	adds	r1, #69	; 0x45
   114b8:	7809      	ldrb	r1, [r1, #0]
   114ba:	18a2      	adds	r2, r4, r2
   114bc:	3243      	adds	r2, #67	; 0x43
   114be:	3302      	adds	r3, #2
   114c0:	7011      	strb	r1, [r2, #0]
   114c2:	e7c1      	b.n	11448 <_printf_common+0x48>
   114c4:	0022      	movs	r2, r4
   114c6:	2301      	movs	r3, #1
   114c8:	321a      	adds	r2, #26
   114ca:	9901      	ldr	r1, [sp, #4]
   114cc:	9800      	ldr	r0, [sp, #0]
   114ce:	9e08      	ldr	r6, [sp, #32]
   114d0:	47b0      	blx	r6
   114d2:	1c43      	adds	r3, r0, #1
   114d4:	d0e6      	beq.n	114a4 <_printf_common+0xa4>
   114d6:	3701      	adds	r7, #1
   114d8:	e7d1      	b.n	1147e <_printf_common+0x7e>
	...

000114dc <_printf_i>:
   114dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   114de:	b08b      	sub	sp, #44	; 0x2c
   114e0:	9206      	str	r2, [sp, #24]
   114e2:	000a      	movs	r2, r1
   114e4:	3243      	adds	r2, #67	; 0x43
   114e6:	9307      	str	r3, [sp, #28]
   114e8:	9005      	str	r0, [sp, #20]
   114ea:	9204      	str	r2, [sp, #16]
   114ec:	7e0a      	ldrb	r2, [r1, #24]
   114ee:	000c      	movs	r4, r1
   114f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   114f2:	2a6e      	cmp	r2, #110	; 0x6e
   114f4:	d100      	bne.n	114f8 <_printf_i+0x1c>
   114f6:	e08f      	b.n	11618 <_printf_i+0x13c>
   114f8:	d817      	bhi.n	1152a <_printf_i+0x4e>
   114fa:	2a63      	cmp	r2, #99	; 0x63
   114fc:	d02c      	beq.n	11558 <_printf_i+0x7c>
   114fe:	d808      	bhi.n	11512 <_printf_i+0x36>
   11500:	2a00      	cmp	r2, #0
   11502:	d100      	bne.n	11506 <_printf_i+0x2a>
   11504:	e099      	b.n	1163a <_printf_i+0x15e>
   11506:	2a58      	cmp	r2, #88	; 0x58
   11508:	d054      	beq.n	115b4 <_printf_i+0xd8>
   1150a:	0026      	movs	r6, r4
   1150c:	3642      	adds	r6, #66	; 0x42
   1150e:	7032      	strb	r2, [r6, #0]
   11510:	e029      	b.n	11566 <_printf_i+0x8a>
   11512:	2a64      	cmp	r2, #100	; 0x64
   11514:	d001      	beq.n	1151a <_printf_i+0x3e>
   11516:	2a69      	cmp	r2, #105	; 0x69
   11518:	d1f7      	bne.n	1150a <_printf_i+0x2e>
   1151a:	6821      	ldr	r1, [r4, #0]
   1151c:	681a      	ldr	r2, [r3, #0]
   1151e:	0608      	lsls	r0, r1, #24
   11520:	d523      	bpl.n	1156a <_printf_i+0x8e>
   11522:	1d11      	adds	r1, r2, #4
   11524:	6019      	str	r1, [r3, #0]
   11526:	6815      	ldr	r5, [r2, #0]
   11528:	e025      	b.n	11576 <_printf_i+0x9a>
   1152a:	2a73      	cmp	r2, #115	; 0x73
   1152c:	d100      	bne.n	11530 <_printf_i+0x54>
   1152e:	e088      	b.n	11642 <_printf_i+0x166>
   11530:	d808      	bhi.n	11544 <_printf_i+0x68>
   11532:	2a6f      	cmp	r2, #111	; 0x6f
   11534:	d029      	beq.n	1158a <_printf_i+0xae>
   11536:	2a70      	cmp	r2, #112	; 0x70
   11538:	d1e7      	bne.n	1150a <_printf_i+0x2e>
   1153a:	2220      	movs	r2, #32
   1153c:	6809      	ldr	r1, [r1, #0]
   1153e:	430a      	orrs	r2, r1
   11540:	6022      	str	r2, [r4, #0]
   11542:	e003      	b.n	1154c <_printf_i+0x70>
   11544:	2a75      	cmp	r2, #117	; 0x75
   11546:	d020      	beq.n	1158a <_printf_i+0xae>
   11548:	2a78      	cmp	r2, #120	; 0x78
   1154a:	d1de      	bne.n	1150a <_printf_i+0x2e>
   1154c:	0022      	movs	r2, r4
   1154e:	2178      	movs	r1, #120	; 0x78
   11550:	3245      	adds	r2, #69	; 0x45
   11552:	7011      	strb	r1, [r2, #0]
   11554:	4a6c      	ldr	r2, [pc, #432]	; (11708 <_printf_i+0x22c>)
   11556:	e030      	b.n	115ba <_printf_i+0xde>
   11558:	000e      	movs	r6, r1
   1155a:	681a      	ldr	r2, [r3, #0]
   1155c:	3642      	adds	r6, #66	; 0x42
   1155e:	1d11      	adds	r1, r2, #4
   11560:	6019      	str	r1, [r3, #0]
   11562:	6813      	ldr	r3, [r2, #0]
   11564:	7033      	strb	r3, [r6, #0]
   11566:	2301      	movs	r3, #1
   11568:	e079      	b.n	1165e <_printf_i+0x182>
   1156a:	0649      	lsls	r1, r1, #25
   1156c:	d5d9      	bpl.n	11522 <_printf_i+0x46>
   1156e:	1d11      	adds	r1, r2, #4
   11570:	6019      	str	r1, [r3, #0]
   11572:	2300      	movs	r3, #0
   11574:	5ed5      	ldrsh	r5, [r2, r3]
   11576:	2d00      	cmp	r5, #0
   11578:	da03      	bge.n	11582 <_printf_i+0xa6>
   1157a:	232d      	movs	r3, #45	; 0x2d
   1157c:	9a04      	ldr	r2, [sp, #16]
   1157e:	426d      	negs	r5, r5
   11580:	7013      	strb	r3, [r2, #0]
   11582:	4b62      	ldr	r3, [pc, #392]	; (1170c <_printf_i+0x230>)
   11584:	270a      	movs	r7, #10
   11586:	9303      	str	r3, [sp, #12]
   11588:	e02f      	b.n	115ea <_printf_i+0x10e>
   1158a:	6820      	ldr	r0, [r4, #0]
   1158c:	6819      	ldr	r1, [r3, #0]
   1158e:	0605      	lsls	r5, r0, #24
   11590:	d503      	bpl.n	1159a <_printf_i+0xbe>
   11592:	1d08      	adds	r0, r1, #4
   11594:	6018      	str	r0, [r3, #0]
   11596:	680d      	ldr	r5, [r1, #0]
   11598:	e005      	b.n	115a6 <_printf_i+0xca>
   1159a:	0640      	lsls	r0, r0, #25
   1159c:	d5f9      	bpl.n	11592 <_printf_i+0xb6>
   1159e:	680d      	ldr	r5, [r1, #0]
   115a0:	1d08      	adds	r0, r1, #4
   115a2:	6018      	str	r0, [r3, #0]
   115a4:	b2ad      	uxth	r5, r5
   115a6:	4b59      	ldr	r3, [pc, #356]	; (1170c <_printf_i+0x230>)
   115a8:	2708      	movs	r7, #8
   115aa:	9303      	str	r3, [sp, #12]
   115ac:	2a6f      	cmp	r2, #111	; 0x6f
   115ae:	d018      	beq.n	115e2 <_printf_i+0x106>
   115b0:	270a      	movs	r7, #10
   115b2:	e016      	b.n	115e2 <_printf_i+0x106>
   115b4:	3145      	adds	r1, #69	; 0x45
   115b6:	700a      	strb	r2, [r1, #0]
   115b8:	4a54      	ldr	r2, [pc, #336]	; (1170c <_printf_i+0x230>)
   115ba:	9203      	str	r2, [sp, #12]
   115bc:	681a      	ldr	r2, [r3, #0]
   115be:	6821      	ldr	r1, [r4, #0]
   115c0:	1d10      	adds	r0, r2, #4
   115c2:	6018      	str	r0, [r3, #0]
   115c4:	6815      	ldr	r5, [r2, #0]
   115c6:	0608      	lsls	r0, r1, #24
   115c8:	d522      	bpl.n	11610 <_printf_i+0x134>
   115ca:	07cb      	lsls	r3, r1, #31
   115cc:	d502      	bpl.n	115d4 <_printf_i+0xf8>
   115ce:	2320      	movs	r3, #32
   115d0:	4319      	orrs	r1, r3
   115d2:	6021      	str	r1, [r4, #0]
   115d4:	2710      	movs	r7, #16
   115d6:	2d00      	cmp	r5, #0
   115d8:	d103      	bne.n	115e2 <_printf_i+0x106>
   115da:	2320      	movs	r3, #32
   115dc:	6822      	ldr	r2, [r4, #0]
   115de:	439a      	bics	r2, r3
   115e0:	6022      	str	r2, [r4, #0]
   115e2:	0023      	movs	r3, r4
   115e4:	2200      	movs	r2, #0
   115e6:	3343      	adds	r3, #67	; 0x43
   115e8:	701a      	strb	r2, [r3, #0]
   115ea:	6863      	ldr	r3, [r4, #4]
   115ec:	60a3      	str	r3, [r4, #8]
   115ee:	2b00      	cmp	r3, #0
   115f0:	db5c      	blt.n	116ac <_printf_i+0x1d0>
   115f2:	2204      	movs	r2, #4
   115f4:	6821      	ldr	r1, [r4, #0]
   115f6:	4391      	bics	r1, r2
   115f8:	6021      	str	r1, [r4, #0]
   115fa:	2d00      	cmp	r5, #0
   115fc:	d158      	bne.n	116b0 <_printf_i+0x1d4>
   115fe:	9e04      	ldr	r6, [sp, #16]
   11600:	2b00      	cmp	r3, #0
   11602:	d064      	beq.n	116ce <_printf_i+0x1f2>
   11604:	0026      	movs	r6, r4
   11606:	9b03      	ldr	r3, [sp, #12]
   11608:	3642      	adds	r6, #66	; 0x42
   1160a:	781b      	ldrb	r3, [r3, #0]
   1160c:	7033      	strb	r3, [r6, #0]
   1160e:	e05e      	b.n	116ce <_printf_i+0x1f2>
   11610:	0648      	lsls	r0, r1, #25
   11612:	d5da      	bpl.n	115ca <_printf_i+0xee>
   11614:	b2ad      	uxth	r5, r5
   11616:	e7d8      	b.n	115ca <_printf_i+0xee>
   11618:	6809      	ldr	r1, [r1, #0]
   1161a:	681a      	ldr	r2, [r3, #0]
   1161c:	0608      	lsls	r0, r1, #24
   1161e:	d505      	bpl.n	1162c <_printf_i+0x150>
   11620:	1d11      	adds	r1, r2, #4
   11622:	6019      	str	r1, [r3, #0]
   11624:	6813      	ldr	r3, [r2, #0]
   11626:	6962      	ldr	r2, [r4, #20]
   11628:	601a      	str	r2, [r3, #0]
   1162a:	e006      	b.n	1163a <_printf_i+0x15e>
   1162c:	0649      	lsls	r1, r1, #25
   1162e:	d5f7      	bpl.n	11620 <_printf_i+0x144>
   11630:	1d11      	adds	r1, r2, #4
   11632:	6019      	str	r1, [r3, #0]
   11634:	6813      	ldr	r3, [r2, #0]
   11636:	8aa2      	ldrh	r2, [r4, #20]
   11638:	801a      	strh	r2, [r3, #0]
   1163a:	2300      	movs	r3, #0
   1163c:	9e04      	ldr	r6, [sp, #16]
   1163e:	6123      	str	r3, [r4, #16]
   11640:	e054      	b.n	116ec <_printf_i+0x210>
   11642:	681a      	ldr	r2, [r3, #0]
   11644:	1d11      	adds	r1, r2, #4
   11646:	6019      	str	r1, [r3, #0]
   11648:	6816      	ldr	r6, [r2, #0]
   1164a:	2100      	movs	r1, #0
   1164c:	6862      	ldr	r2, [r4, #4]
   1164e:	0030      	movs	r0, r6
   11650:	f001 f9fe 	bl	12a50 <memchr>
   11654:	2800      	cmp	r0, #0
   11656:	d001      	beq.n	1165c <_printf_i+0x180>
   11658:	1b80      	subs	r0, r0, r6
   1165a:	6060      	str	r0, [r4, #4]
   1165c:	6863      	ldr	r3, [r4, #4]
   1165e:	6123      	str	r3, [r4, #16]
   11660:	2300      	movs	r3, #0
   11662:	9a04      	ldr	r2, [sp, #16]
   11664:	7013      	strb	r3, [r2, #0]
   11666:	e041      	b.n	116ec <_printf_i+0x210>
   11668:	6923      	ldr	r3, [r4, #16]
   1166a:	0032      	movs	r2, r6
   1166c:	9906      	ldr	r1, [sp, #24]
   1166e:	9805      	ldr	r0, [sp, #20]
   11670:	9d07      	ldr	r5, [sp, #28]
   11672:	47a8      	blx	r5
   11674:	1c43      	adds	r3, r0, #1
   11676:	d043      	beq.n	11700 <_printf_i+0x224>
   11678:	6823      	ldr	r3, [r4, #0]
   1167a:	2500      	movs	r5, #0
   1167c:	079b      	lsls	r3, r3, #30
   1167e:	d40f      	bmi.n	116a0 <_printf_i+0x1c4>
   11680:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11682:	68e0      	ldr	r0, [r4, #12]
   11684:	4298      	cmp	r0, r3
   11686:	da3d      	bge.n	11704 <_printf_i+0x228>
   11688:	0018      	movs	r0, r3
   1168a:	e03b      	b.n	11704 <_printf_i+0x228>
   1168c:	0022      	movs	r2, r4
   1168e:	2301      	movs	r3, #1
   11690:	3219      	adds	r2, #25
   11692:	9906      	ldr	r1, [sp, #24]
   11694:	9805      	ldr	r0, [sp, #20]
   11696:	9e07      	ldr	r6, [sp, #28]
   11698:	47b0      	blx	r6
   1169a:	1c43      	adds	r3, r0, #1
   1169c:	d030      	beq.n	11700 <_printf_i+0x224>
   1169e:	3501      	adds	r5, #1
   116a0:	68e3      	ldr	r3, [r4, #12]
   116a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   116a4:	1a9b      	subs	r3, r3, r2
   116a6:	429d      	cmp	r5, r3
   116a8:	dbf0      	blt.n	1168c <_printf_i+0x1b0>
   116aa:	e7e9      	b.n	11680 <_printf_i+0x1a4>
   116ac:	2d00      	cmp	r5, #0
   116ae:	d0a9      	beq.n	11604 <_printf_i+0x128>
   116b0:	9e04      	ldr	r6, [sp, #16]
   116b2:	0028      	movs	r0, r5
   116b4:	0039      	movs	r1, r7
   116b6:	f7fd fa77 	bl	eba8 <__aeabi_uidivmod>
   116ba:	9b03      	ldr	r3, [sp, #12]
   116bc:	3e01      	subs	r6, #1
   116be:	5c5b      	ldrb	r3, [r3, r1]
   116c0:	0028      	movs	r0, r5
   116c2:	7033      	strb	r3, [r6, #0]
   116c4:	0039      	movs	r1, r7
   116c6:	f7fd f9e9 	bl	ea9c <__udivsi3>
   116ca:	1e05      	subs	r5, r0, #0
   116cc:	d1f1      	bne.n	116b2 <_printf_i+0x1d6>
   116ce:	2f08      	cmp	r7, #8
   116d0:	d109      	bne.n	116e6 <_printf_i+0x20a>
   116d2:	6823      	ldr	r3, [r4, #0]
   116d4:	07db      	lsls	r3, r3, #31
   116d6:	d506      	bpl.n	116e6 <_printf_i+0x20a>
   116d8:	6863      	ldr	r3, [r4, #4]
   116da:	6922      	ldr	r2, [r4, #16]
   116dc:	4293      	cmp	r3, r2
   116de:	dc02      	bgt.n	116e6 <_printf_i+0x20a>
   116e0:	2330      	movs	r3, #48	; 0x30
   116e2:	3e01      	subs	r6, #1
   116e4:	7033      	strb	r3, [r6, #0]
   116e6:	9b04      	ldr	r3, [sp, #16]
   116e8:	1b9b      	subs	r3, r3, r6
   116ea:	6123      	str	r3, [r4, #16]
   116ec:	9b07      	ldr	r3, [sp, #28]
   116ee:	aa09      	add	r2, sp, #36	; 0x24
   116f0:	9300      	str	r3, [sp, #0]
   116f2:	0021      	movs	r1, r4
   116f4:	9b06      	ldr	r3, [sp, #24]
   116f6:	9805      	ldr	r0, [sp, #20]
   116f8:	f7ff fe82 	bl	11400 <_printf_common>
   116fc:	1c43      	adds	r3, r0, #1
   116fe:	d1b3      	bne.n	11668 <_printf_i+0x18c>
   11700:	2001      	movs	r0, #1
   11702:	4240      	negs	r0, r0
   11704:	b00b      	add	sp, #44	; 0x2c
   11706:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11708:	000143c6 	.word	0x000143c6
   1170c:	000143b5 	.word	0x000143b5

00011710 <realloc>:
   11710:	b510      	push	{r4, lr}
   11712:	4b03      	ldr	r3, [pc, #12]	; (11720 <realloc+0x10>)
   11714:	000a      	movs	r2, r1
   11716:	0001      	movs	r1, r0
   11718:	6818      	ldr	r0, [r3, #0]
   1171a:	f001 fc97 	bl	1304c <_realloc_r>
   1171e:	bd10      	pop	{r4, pc}
   11720:	200000a4 	.word	0x200000a4

00011724 <_sbrk_r>:
   11724:	2300      	movs	r3, #0
   11726:	b570      	push	{r4, r5, r6, lr}
   11728:	4c06      	ldr	r4, [pc, #24]	; (11744 <_sbrk_r+0x20>)
   1172a:	0005      	movs	r5, r0
   1172c:	0008      	movs	r0, r1
   1172e:	6023      	str	r3, [r4, #0]
   11730:	f001 fe46 	bl	133c0 <_sbrk>
   11734:	1c43      	adds	r3, r0, #1
   11736:	d103      	bne.n	11740 <_sbrk_r+0x1c>
   11738:	6823      	ldr	r3, [r4, #0]
   1173a:	2b00      	cmp	r3, #0
   1173c:	d000      	beq.n	11740 <_sbrk_r+0x1c>
   1173e:	602b      	str	r3, [r5, #0]
   11740:	bd70      	pop	{r4, r5, r6, pc}
   11742:	46c0      	nop			; (mov r8, r8)
   11744:	20000f84 	.word	0x20000f84

00011748 <strchr>:
   11748:	b2c9      	uxtb	r1, r1
   1174a:	7803      	ldrb	r3, [r0, #0]
   1174c:	2b00      	cmp	r3, #0
   1174e:	d004      	beq.n	1175a <strchr+0x12>
   11750:	4299      	cmp	r1, r3
   11752:	d100      	bne.n	11756 <strchr+0xe>
   11754:	4770      	bx	lr
   11756:	3001      	adds	r0, #1
   11758:	e7f7      	b.n	1174a <strchr+0x2>
   1175a:	424b      	negs	r3, r1
   1175c:	4159      	adcs	r1, r3
   1175e:	4249      	negs	r1, r1
   11760:	4008      	ands	r0, r1
   11762:	e7f7      	b.n	11754 <strchr+0xc>

00011764 <strcpy>:
   11764:	1c03      	adds	r3, r0, #0
   11766:	780a      	ldrb	r2, [r1, #0]
   11768:	3101      	adds	r1, #1
   1176a:	701a      	strb	r2, [r3, #0]
   1176c:	3301      	adds	r3, #1
   1176e:	2a00      	cmp	r2, #0
   11770:	d1f9      	bne.n	11766 <strcpy+0x2>
   11772:	4770      	bx	lr

00011774 <strlen>:
   11774:	2300      	movs	r3, #0
   11776:	5cc2      	ldrb	r2, [r0, r3]
   11778:	3301      	adds	r3, #1
   1177a:	2a00      	cmp	r2, #0
   1177c:	d1fb      	bne.n	11776 <strlen+0x2>
   1177e:	1e58      	subs	r0, r3, #1
   11780:	4770      	bx	lr

00011782 <strncpy>:
   11782:	b570      	push	{r4, r5, r6, lr}
   11784:	0004      	movs	r4, r0
   11786:	2a00      	cmp	r2, #0
   11788:	d100      	bne.n	1178c <strncpy+0xa>
   1178a:	bd70      	pop	{r4, r5, r6, pc}
   1178c:	780d      	ldrb	r5, [r1, #0]
   1178e:	1e56      	subs	r6, r2, #1
   11790:	1c63      	adds	r3, r4, #1
   11792:	7025      	strb	r5, [r4, #0]
   11794:	3101      	adds	r1, #1
   11796:	2d00      	cmp	r5, #0
   11798:	d105      	bne.n	117a6 <strncpy+0x24>
   1179a:	18a4      	adds	r4, r4, r2
   1179c:	429c      	cmp	r4, r3
   1179e:	d0f4      	beq.n	1178a <strncpy+0x8>
   117a0:	701d      	strb	r5, [r3, #0]
   117a2:	3301      	adds	r3, #1
   117a4:	e7fa      	b.n	1179c <strncpy+0x1a>
   117a6:	001c      	movs	r4, r3
   117a8:	0032      	movs	r2, r6
   117aa:	e7ec      	b.n	11786 <strncpy+0x4>

000117ac <__swbuf_r>:
   117ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117ae:	0005      	movs	r5, r0
   117b0:	000e      	movs	r6, r1
   117b2:	0014      	movs	r4, r2
   117b4:	2800      	cmp	r0, #0
   117b6:	d004      	beq.n	117c2 <__swbuf_r+0x16>
   117b8:	6983      	ldr	r3, [r0, #24]
   117ba:	2b00      	cmp	r3, #0
   117bc:	d101      	bne.n	117c2 <__swbuf_r+0x16>
   117be:	f001 f839 	bl	12834 <__sinit>
   117c2:	4b22      	ldr	r3, [pc, #136]	; (1184c <__swbuf_r+0xa0>)
   117c4:	429c      	cmp	r4, r3
   117c6:	d12d      	bne.n	11824 <__swbuf_r+0x78>
   117c8:	686c      	ldr	r4, [r5, #4]
   117ca:	69a3      	ldr	r3, [r4, #24]
   117cc:	60a3      	str	r3, [r4, #8]
   117ce:	89a3      	ldrh	r3, [r4, #12]
   117d0:	071b      	lsls	r3, r3, #28
   117d2:	d531      	bpl.n	11838 <__swbuf_r+0x8c>
   117d4:	6923      	ldr	r3, [r4, #16]
   117d6:	2b00      	cmp	r3, #0
   117d8:	d02e      	beq.n	11838 <__swbuf_r+0x8c>
   117da:	6823      	ldr	r3, [r4, #0]
   117dc:	6922      	ldr	r2, [r4, #16]
   117de:	b2f7      	uxtb	r7, r6
   117e0:	1a98      	subs	r0, r3, r2
   117e2:	6963      	ldr	r3, [r4, #20]
   117e4:	b2f6      	uxtb	r6, r6
   117e6:	4298      	cmp	r0, r3
   117e8:	db05      	blt.n	117f6 <__swbuf_r+0x4a>
   117ea:	0021      	movs	r1, r4
   117ec:	0028      	movs	r0, r5
   117ee:	f000 ffb3 	bl	12758 <_fflush_r>
   117f2:	2800      	cmp	r0, #0
   117f4:	d126      	bne.n	11844 <__swbuf_r+0x98>
   117f6:	68a3      	ldr	r3, [r4, #8]
   117f8:	3001      	adds	r0, #1
   117fa:	3b01      	subs	r3, #1
   117fc:	60a3      	str	r3, [r4, #8]
   117fe:	6823      	ldr	r3, [r4, #0]
   11800:	1c5a      	adds	r2, r3, #1
   11802:	6022      	str	r2, [r4, #0]
   11804:	701f      	strb	r7, [r3, #0]
   11806:	6963      	ldr	r3, [r4, #20]
   11808:	4298      	cmp	r0, r3
   1180a:	d004      	beq.n	11816 <__swbuf_r+0x6a>
   1180c:	89a3      	ldrh	r3, [r4, #12]
   1180e:	07db      	lsls	r3, r3, #31
   11810:	d51a      	bpl.n	11848 <__swbuf_r+0x9c>
   11812:	2e0a      	cmp	r6, #10
   11814:	d118      	bne.n	11848 <__swbuf_r+0x9c>
   11816:	0021      	movs	r1, r4
   11818:	0028      	movs	r0, r5
   1181a:	f000 ff9d 	bl	12758 <_fflush_r>
   1181e:	2800      	cmp	r0, #0
   11820:	d012      	beq.n	11848 <__swbuf_r+0x9c>
   11822:	e00f      	b.n	11844 <__swbuf_r+0x98>
   11824:	4b0a      	ldr	r3, [pc, #40]	; (11850 <__swbuf_r+0xa4>)
   11826:	429c      	cmp	r4, r3
   11828:	d101      	bne.n	1182e <__swbuf_r+0x82>
   1182a:	68ac      	ldr	r4, [r5, #8]
   1182c:	e7cd      	b.n	117ca <__swbuf_r+0x1e>
   1182e:	4b09      	ldr	r3, [pc, #36]	; (11854 <__swbuf_r+0xa8>)
   11830:	429c      	cmp	r4, r3
   11832:	d1ca      	bne.n	117ca <__swbuf_r+0x1e>
   11834:	68ec      	ldr	r4, [r5, #12]
   11836:	e7c8      	b.n	117ca <__swbuf_r+0x1e>
   11838:	0021      	movs	r1, r4
   1183a:	0028      	movs	r0, r5
   1183c:	f000 f818 	bl	11870 <__swsetup_r>
   11840:	2800      	cmp	r0, #0
   11842:	d0ca      	beq.n	117da <__swbuf_r+0x2e>
   11844:	2601      	movs	r6, #1
   11846:	4276      	negs	r6, r6
   11848:	0030      	movs	r0, r6
   1184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1184c:	00014508 	.word	0x00014508
   11850:	00014528 	.word	0x00014528
   11854:	000144e8 	.word	0x000144e8

00011858 <__ascii_wctomb>:
   11858:	1e0b      	subs	r3, r1, #0
   1185a:	d004      	beq.n	11866 <__ascii_wctomb+0xe>
   1185c:	2aff      	cmp	r2, #255	; 0xff
   1185e:	d904      	bls.n	1186a <__ascii_wctomb+0x12>
   11860:	238a      	movs	r3, #138	; 0x8a
   11862:	6003      	str	r3, [r0, #0]
   11864:	3b8b      	subs	r3, #139	; 0x8b
   11866:	0018      	movs	r0, r3
   11868:	4770      	bx	lr
   1186a:	700a      	strb	r2, [r1, #0]
   1186c:	2301      	movs	r3, #1
   1186e:	e7fa      	b.n	11866 <__ascii_wctomb+0xe>

00011870 <__swsetup_r>:
   11870:	4b36      	ldr	r3, [pc, #216]	; (1194c <__swsetup_r+0xdc>)
   11872:	b570      	push	{r4, r5, r6, lr}
   11874:	681d      	ldr	r5, [r3, #0]
   11876:	0006      	movs	r6, r0
   11878:	000c      	movs	r4, r1
   1187a:	2d00      	cmp	r5, #0
   1187c:	d005      	beq.n	1188a <__swsetup_r+0x1a>
   1187e:	69ab      	ldr	r3, [r5, #24]
   11880:	2b00      	cmp	r3, #0
   11882:	d102      	bne.n	1188a <__swsetup_r+0x1a>
   11884:	0028      	movs	r0, r5
   11886:	f000 ffd5 	bl	12834 <__sinit>
   1188a:	4b31      	ldr	r3, [pc, #196]	; (11950 <__swsetup_r+0xe0>)
   1188c:	429c      	cmp	r4, r3
   1188e:	d10f      	bne.n	118b0 <__swsetup_r+0x40>
   11890:	686c      	ldr	r4, [r5, #4]
   11892:	230c      	movs	r3, #12
   11894:	5ee2      	ldrsh	r2, [r4, r3]
   11896:	b293      	uxth	r3, r2
   11898:	0719      	lsls	r1, r3, #28
   1189a:	d42d      	bmi.n	118f8 <__swsetup_r+0x88>
   1189c:	06d9      	lsls	r1, r3, #27
   1189e:	d411      	bmi.n	118c4 <__swsetup_r+0x54>
   118a0:	2309      	movs	r3, #9
   118a2:	2001      	movs	r0, #1
   118a4:	6033      	str	r3, [r6, #0]
   118a6:	3337      	adds	r3, #55	; 0x37
   118a8:	4313      	orrs	r3, r2
   118aa:	81a3      	strh	r3, [r4, #12]
   118ac:	4240      	negs	r0, r0
   118ae:	bd70      	pop	{r4, r5, r6, pc}
   118b0:	4b28      	ldr	r3, [pc, #160]	; (11954 <__swsetup_r+0xe4>)
   118b2:	429c      	cmp	r4, r3
   118b4:	d101      	bne.n	118ba <__swsetup_r+0x4a>
   118b6:	68ac      	ldr	r4, [r5, #8]
   118b8:	e7eb      	b.n	11892 <__swsetup_r+0x22>
   118ba:	4b27      	ldr	r3, [pc, #156]	; (11958 <__swsetup_r+0xe8>)
   118bc:	429c      	cmp	r4, r3
   118be:	d1e8      	bne.n	11892 <__swsetup_r+0x22>
   118c0:	68ec      	ldr	r4, [r5, #12]
   118c2:	e7e6      	b.n	11892 <__swsetup_r+0x22>
   118c4:	075b      	lsls	r3, r3, #29
   118c6:	d513      	bpl.n	118f0 <__swsetup_r+0x80>
   118c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   118ca:	2900      	cmp	r1, #0
   118cc:	d008      	beq.n	118e0 <__swsetup_r+0x70>
   118ce:	0023      	movs	r3, r4
   118d0:	3344      	adds	r3, #68	; 0x44
   118d2:	4299      	cmp	r1, r3
   118d4:	d002      	beq.n	118dc <__swsetup_r+0x6c>
   118d6:	0030      	movs	r0, r6
   118d8:	f7ff f8be 	bl	10a58 <_free_r>
   118dc:	2300      	movs	r3, #0
   118de:	6363      	str	r3, [r4, #52]	; 0x34
   118e0:	2224      	movs	r2, #36	; 0x24
   118e2:	89a3      	ldrh	r3, [r4, #12]
   118e4:	4393      	bics	r3, r2
   118e6:	81a3      	strh	r3, [r4, #12]
   118e8:	2300      	movs	r3, #0
   118ea:	6063      	str	r3, [r4, #4]
   118ec:	6923      	ldr	r3, [r4, #16]
   118ee:	6023      	str	r3, [r4, #0]
   118f0:	2308      	movs	r3, #8
   118f2:	89a2      	ldrh	r2, [r4, #12]
   118f4:	4313      	orrs	r3, r2
   118f6:	81a3      	strh	r3, [r4, #12]
   118f8:	6923      	ldr	r3, [r4, #16]
   118fa:	2b00      	cmp	r3, #0
   118fc:	d10b      	bne.n	11916 <__swsetup_r+0xa6>
   118fe:	21a0      	movs	r1, #160	; 0xa0
   11900:	2280      	movs	r2, #128	; 0x80
   11902:	89a3      	ldrh	r3, [r4, #12]
   11904:	0089      	lsls	r1, r1, #2
   11906:	0092      	lsls	r2, r2, #2
   11908:	400b      	ands	r3, r1
   1190a:	4293      	cmp	r3, r2
   1190c:	d003      	beq.n	11916 <__swsetup_r+0xa6>
   1190e:	0021      	movs	r1, r4
   11910:	0030      	movs	r0, r6
   11912:	f001 f859 	bl	129c8 <__smakebuf_r>
   11916:	2301      	movs	r3, #1
   11918:	89a2      	ldrh	r2, [r4, #12]
   1191a:	4013      	ands	r3, r2
   1191c:	d011      	beq.n	11942 <__swsetup_r+0xd2>
   1191e:	2300      	movs	r3, #0
   11920:	60a3      	str	r3, [r4, #8]
   11922:	6963      	ldr	r3, [r4, #20]
   11924:	425b      	negs	r3, r3
   11926:	61a3      	str	r3, [r4, #24]
   11928:	2000      	movs	r0, #0
   1192a:	6923      	ldr	r3, [r4, #16]
   1192c:	4283      	cmp	r3, r0
   1192e:	d1be      	bne.n	118ae <__swsetup_r+0x3e>
   11930:	230c      	movs	r3, #12
   11932:	5ee2      	ldrsh	r2, [r4, r3]
   11934:	0613      	lsls	r3, r2, #24
   11936:	d5ba      	bpl.n	118ae <__swsetup_r+0x3e>
   11938:	2340      	movs	r3, #64	; 0x40
   1193a:	4313      	orrs	r3, r2
   1193c:	81a3      	strh	r3, [r4, #12]
   1193e:	3801      	subs	r0, #1
   11940:	e7b5      	b.n	118ae <__swsetup_r+0x3e>
   11942:	0792      	lsls	r2, r2, #30
   11944:	d400      	bmi.n	11948 <__swsetup_r+0xd8>
   11946:	6963      	ldr	r3, [r4, #20]
   11948:	60a3      	str	r3, [r4, #8]
   1194a:	e7ed      	b.n	11928 <__swsetup_r+0xb8>
   1194c:	200000a4 	.word	0x200000a4
   11950:	00014508 	.word	0x00014508
   11954:	00014528 	.word	0x00014528
   11958:	000144e8 	.word	0x000144e8

0001195c <abort>:
   1195c:	b510      	push	{r4, lr}
   1195e:	2006      	movs	r0, #6
   11960:	f001 fbc4 	bl	130ec <raise>
   11964:	2001      	movs	r0, #1
   11966:	f001 fd41 	bl	133ec <_exit>

0001196a <quorem>:
   1196a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1196c:	6903      	ldr	r3, [r0, #16]
   1196e:	690c      	ldr	r4, [r1, #16]
   11970:	b089      	sub	sp, #36	; 0x24
   11972:	0007      	movs	r7, r0
   11974:	9105      	str	r1, [sp, #20]
   11976:	2600      	movs	r6, #0
   11978:	429c      	cmp	r4, r3
   1197a:	dc6d      	bgt.n	11a58 <quorem+0xee>
   1197c:	000b      	movs	r3, r1
   1197e:	3c01      	subs	r4, #1
   11980:	3314      	adds	r3, #20
   11982:	00a5      	lsls	r5, r4, #2
   11984:	9303      	str	r3, [sp, #12]
   11986:	195b      	adds	r3, r3, r5
   11988:	9304      	str	r3, [sp, #16]
   1198a:	0003      	movs	r3, r0
   1198c:	3314      	adds	r3, #20
   1198e:	9302      	str	r3, [sp, #8]
   11990:	195d      	adds	r5, r3, r5
   11992:	9b04      	ldr	r3, [sp, #16]
   11994:	6828      	ldr	r0, [r5, #0]
   11996:	681b      	ldr	r3, [r3, #0]
   11998:	1c59      	adds	r1, r3, #1
   1199a:	9301      	str	r3, [sp, #4]
   1199c:	f7fd f87e 	bl	ea9c <__udivsi3>
   119a0:	9001      	str	r0, [sp, #4]
   119a2:	42b0      	cmp	r0, r6
   119a4:	d02d      	beq.n	11a02 <quorem+0x98>
   119a6:	9b03      	ldr	r3, [sp, #12]
   119a8:	9802      	ldr	r0, [sp, #8]
   119aa:	469c      	mov	ip, r3
   119ac:	9606      	str	r6, [sp, #24]
   119ae:	4662      	mov	r2, ip
   119b0:	ca08      	ldmia	r2!, {r3}
   119b2:	4694      	mov	ip, r2
   119b4:	9a01      	ldr	r2, [sp, #4]
   119b6:	b299      	uxth	r1, r3
   119b8:	4351      	muls	r1, r2
   119ba:	0c1b      	lsrs	r3, r3, #16
   119bc:	4353      	muls	r3, r2
   119be:	1989      	adds	r1, r1, r6
   119c0:	0c0a      	lsrs	r2, r1, #16
   119c2:	189b      	adds	r3, r3, r2
   119c4:	9307      	str	r3, [sp, #28]
   119c6:	8802      	ldrh	r2, [r0, #0]
   119c8:	0c1e      	lsrs	r6, r3, #16
   119ca:	9b06      	ldr	r3, [sp, #24]
   119cc:	b289      	uxth	r1, r1
   119ce:	18d2      	adds	r2, r2, r3
   119d0:	6803      	ldr	r3, [r0, #0]
   119d2:	1a52      	subs	r2, r2, r1
   119d4:	0c19      	lsrs	r1, r3, #16
   119d6:	466b      	mov	r3, sp
   119d8:	8b9b      	ldrh	r3, [r3, #28]
   119da:	1acb      	subs	r3, r1, r3
   119dc:	1411      	asrs	r1, r2, #16
   119de:	185b      	adds	r3, r3, r1
   119e0:	1419      	asrs	r1, r3, #16
   119e2:	b292      	uxth	r2, r2
   119e4:	041b      	lsls	r3, r3, #16
   119e6:	431a      	orrs	r2, r3
   119e8:	9b04      	ldr	r3, [sp, #16]
   119ea:	9106      	str	r1, [sp, #24]
   119ec:	c004      	stmia	r0!, {r2}
   119ee:	4563      	cmp	r3, ip
   119f0:	d2dd      	bcs.n	119ae <quorem+0x44>
   119f2:	682b      	ldr	r3, [r5, #0]
   119f4:	2b00      	cmp	r3, #0
   119f6:	d104      	bne.n	11a02 <quorem+0x98>
   119f8:	9b02      	ldr	r3, [sp, #8]
   119fa:	3d04      	subs	r5, #4
   119fc:	42ab      	cmp	r3, r5
   119fe:	d32e      	bcc.n	11a5e <quorem+0xf4>
   11a00:	613c      	str	r4, [r7, #16]
   11a02:	9905      	ldr	r1, [sp, #20]
   11a04:	0038      	movs	r0, r7
   11a06:	f001 fa42 	bl	12e8e <__mcmp>
   11a0a:	2800      	cmp	r0, #0
   11a0c:	db23      	blt.n	11a56 <quorem+0xec>
   11a0e:	2500      	movs	r5, #0
   11a10:	9b01      	ldr	r3, [sp, #4]
   11a12:	9802      	ldr	r0, [sp, #8]
   11a14:	3301      	adds	r3, #1
   11a16:	9903      	ldr	r1, [sp, #12]
   11a18:	9301      	str	r3, [sp, #4]
   11a1a:	c908      	ldmia	r1!, {r3}
   11a1c:	8802      	ldrh	r2, [r0, #0]
   11a1e:	1955      	adds	r5, r2, r5
   11a20:	b29a      	uxth	r2, r3
   11a22:	1aaa      	subs	r2, r5, r2
   11a24:	6805      	ldr	r5, [r0, #0]
   11a26:	0c1b      	lsrs	r3, r3, #16
   11a28:	0c2d      	lsrs	r5, r5, #16
   11a2a:	1aeb      	subs	r3, r5, r3
   11a2c:	1415      	asrs	r5, r2, #16
   11a2e:	195b      	adds	r3, r3, r5
   11a30:	141d      	asrs	r5, r3, #16
   11a32:	b292      	uxth	r2, r2
   11a34:	041b      	lsls	r3, r3, #16
   11a36:	4313      	orrs	r3, r2
   11a38:	c008      	stmia	r0!, {r3}
   11a3a:	9b04      	ldr	r3, [sp, #16]
   11a3c:	428b      	cmp	r3, r1
   11a3e:	d2ec      	bcs.n	11a1a <quorem+0xb0>
   11a40:	9a02      	ldr	r2, [sp, #8]
   11a42:	00a3      	lsls	r3, r4, #2
   11a44:	18d3      	adds	r3, r2, r3
   11a46:	681a      	ldr	r2, [r3, #0]
   11a48:	2a00      	cmp	r2, #0
   11a4a:	d104      	bne.n	11a56 <quorem+0xec>
   11a4c:	9a02      	ldr	r2, [sp, #8]
   11a4e:	3b04      	subs	r3, #4
   11a50:	429a      	cmp	r2, r3
   11a52:	d309      	bcc.n	11a68 <quorem+0xfe>
   11a54:	613c      	str	r4, [r7, #16]
   11a56:	9e01      	ldr	r6, [sp, #4]
   11a58:	0030      	movs	r0, r6
   11a5a:	b009      	add	sp, #36	; 0x24
   11a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a5e:	682b      	ldr	r3, [r5, #0]
   11a60:	2b00      	cmp	r3, #0
   11a62:	d1cd      	bne.n	11a00 <quorem+0x96>
   11a64:	3c01      	subs	r4, #1
   11a66:	e7c7      	b.n	119f8 <quorem+0x8e>
   11a68:	681a      	ldr	r2, [r3, #0]
   11a6a:	2a00      	cmp	r2, #0
   11a6c:	d1f2      	bne.n	11a54 <quorem+0xea>
   11a6e:	3c01      	subs	r4, #1
   11a70:	e7ec      	b.n	11a4c <quorem+0xe2>
	...

00011a74 <_dtoa_r>:
   11a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a76:	0016      	movs	r6, r2
   11a78:	001f      	movs	r7, r3
   11a7a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   11a7c:	b09d      	sub	sp, #116	; 0x74
   11a7e:	9004      	str	r0, [sp, #16]
   11a80:	9d25      	ldr	r5, [sp, #148]	; 0x94
   11a82:	9606      	str	r6, [sp, #24]
   11a84:	9707      	str	r7, [sp, #28]
   11a86:	2c00      	cmp	r4, #0
   11a88:	d108      	bne.n	11a9c <_dtoa_r+0x28>
   11a8a:	2010      	movs	r0, #16
   11a8c:	f7fe ff9e 	bl	109cc <malloc>
   11a90:	9b04      	ldr	r3, [sp, #16]
   11a92:	6258      	str	r0, [r3, #36]	; 0x24
   11a94:	6044      	str	r4, [r0, #4]
   11a96:	6084      	str	r4, [r0, #8]
   11a98:	6004      	str	r4, [r0, #0]
   11a9a:	60c4      	str	r4, [r0, #12]
   11a9c:	9b04      	ldr	r3, [sp, #16]
   11a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11aa0:	6819      	ldr	r1, [r3, #0]
   11aa2:	2900      	cmp	r1, #0
   11aa4:	d00b      	beq.n	11abe <_dtoa_r+0x4a>
   11aa6:	685a      	ldr	r2, [r3, #4]
   11aa8:	2301      	movs	r3, #1
   11aaa:	4093      	lsls	r3, r2
   11aac:	604a      	str	r2, [r1, #4]
   11aae:	608b      	str	r3, [r1, #8]
   11ab0:	9804      	ldr	r0, [sp, #16]
   11ab2:	f001 f812 	bl	12ada <_Bfree>
   11ab6:	2200      	movs	r2, #0
   11ab8:	9b04      	ldr	r3, [sp, #16]
   11aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11abc:	601a      	str	r2, [r3, #0]
   11abe:	9b07      	ldr	r3, [sp, #28]
   11ac0:	2b00      	cmp	r3, #0
   11ac2:	da1f      	bge.n	11b04 <_dtoa_r+0x90>
   11ac4:	2301      	movs	r3, #1
   11ac6:	602b      	str	r3, [r5, #0]
   11ac8:	007b      	lsls	r3, r7, #1
   11aca:	085b      	lsrs	r3, r3, #1
   11acc:	9307      	str	r3, [sp, #28]
   11ace:	9c07      	ldr	r4, [sp, #28]
   11ad0:	4bb7      	ldr	r3, [pc, #732]	; (11db0 <_dtoa_r+0x33c>)
   11ad2:	0022      	movs	r2, r4
   11ad4:	9319      	str	r3, [sp, #100]	; 0x64
   11ad6:	401a      	ands	r2, r3
   11ad8:	429a      	cmp	r2, r3
   11ada:	d116      	bne.n	11b0a <_dtoa_r+0x96>
   11adc:	4bb5      	ldr	r3, [pc, #724]	; (11db4 <_dtoa_r+0x340>)
   11ade:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11ae0:	6013      	str	r3, [r2, #0]
   11ae2:	9b06      	ldr	r3, [sp, #24]
   11ae4:	2b00      	cmp	r3, #0
   11ae6:	d103      	bne.n	11af0 <_dtoa_r+0x7c>
   11ae8:	0324      	lsls	r4, r4, #12
   11aea:	d101      	bne.n	11af0 <_dtoa_r+0x7c>
   11aec:	f000 fd91 	bl	12612 <_dtoa_r+0xb9e>
   11af0:	4bb1      	ldr	r3, [pc, #708]	; (11db8 <_dtoa_r+0x344>)
   11af2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11af4:	930a      	str	r3, [sp, #40]	; 0x28
   11af6:	4bb1      	ldr	r3, [pc, #708]	; (11dbc <_dtoa_r+0x348>)
   11af8:	2a00      	cmp	r2, #0
   11afa:	d001      	beq.n	11b00 <_dtoa_r+0x8c>
   11afc:	f000 fd8f 	bl	1261e <_dtoa_r+0xbaa>
   11b00:	f000 fd8f 	bl	12622 <_dtoa_r+0xbae>
   11b04:	2300      	movs	r3, #0
   11b06:	602b      	str	r3, [r5, #0]
   11b08:	e7e1      	b.n	11ace <_dtoa_r+0x5a>
   11b0a:	9e06      	ldr	r6, [sp, #24]
   11b0c:	9f07      	ldr	r7, [sp, #28]
   11b0e:	2200      	movs	r2, #0
   11b10:	2300      	movs	r3, #0
   11b12:	0030      	movs	r0, r6
   11b14:	0039      	movs	r1, r7
   11b16:	f7fd f947 	bl	eda8 <__aeabi_dcmpeq>
   11b1a:	1e05      	subs	r5, r0, #0
   11b1c:	d00e      	beq.n	11b3c <_dtoa_r+0xc8>
   11b1e:	2301      	movs	r3, #1
   11b20:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11b22:	6013      	str	r3, [r2, #0]
   11b24:	4ba6      	ldr	r3, [pc, #664]	; (11dc0 <_dtoa_r+0x34c>)
   11b26:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11b28:	930a      	str	r3, [sp, #40]	; 0x28
   11b2a:	2a00      	cmp	r2, #0
   11b2c:	d101      	bne.n	11b32 <_dtoa_r+0xbe>
   11b2e:	f000 fd78 	bl	12622 <_dtoa_r+0xbae>
   11b32:	4aa4      	ldr	r2, [pc, #656]	; (11dc4 <_dtoa_r+0x350>)
   11b34:	9926      	ldr	r1, [sp, #152]	; 0x98
   11b36:	600a      	str	r2, [r1, #0]
   11b38:	f000 fd73 	bl	12622 <_dtoa_r+0xbae>
   11b3c:	ab1a      	add	r3, sp, #104	; 0x68
   11b3e:	9301      	str	r3, [sp, #4]
   11b40:	ab1b      	add	r3, sp, #108	; 0x6c
   11b42:	9300      	str	r3, [sp, #0]
   11b44:	0032      	movs	r2, r6
   11b46:	003b      	movs	r3, r7
   11b48:	9804      	ldr	r0, [sp, #16]
   11b4a:	f001 fa1d 	bl	12f88 <__d2b>
   11b4e:	0063      	lsls	r3, r4, #1
   11b50:	9005      	str	r0, [sp, #20]
   11b52:	0d5b      	lsrs	r3, r3, #21
   11b54:	d100      	bne.n	11b58 <_dtoa_r+0xe4>
   11b56:	e07f      	b.n	11c58 <_dtoa_r+0x1e4>
   11b58:	033a      	lsls	r2, r7, #12
   11b5a:	4c9b      	ldr	r4, [pc, #620]	; (11dc8 <_dtoa_r+0x354>)
   11b5c:	0b12      	lsrs	r2, r2, #12
   11b5e:	4314      	orrs	r4, r2
   11b60:	0021      	movs	r1, r4
   11b62:	4a9a      	ldr	r2, [pc, #616]	; (11dcc <_dtoa_r+0x358>)
   11b64:	0030      	movs	r0, r6
   11b66:	9518      	str	r5, [sp, #96]	; 0x60
   11b68:	189e      	adds	r6, r3, r2
   11b6a:	2200      	movs	r2, #0
   11b6c:	4b98      	ldr	r3, [pc, #608]	; (11dd0 <_dtoa_r+0x35c>)
   11b6e:	f7fe fb0d 	bl	1018c <__aeabi_dsub>
   11b72:	4a98      	ldr	r2, [pc, #608]	; (11dd4 <_dtoa_r+0x360>)
   11b74:	4b98      	ldr	r3, [pc, #608]	; (11dd8 <_dtoa_r+0x364>)
   11b76:	f7fe f889 	bl	fc8c <__aeabi_dmul>
   11b7a:	4a98      	ldr	r2, [pc, #608]	; (11ddc <_dtoa_r+0x368>)
   11b7c:	4b98      	ldr	r3, [pc, #608]	; (11de0 <_dtoa_r+0x36c>)
   11b7e:	f7fd f941 	bl	ee04 <__aeabi_dadd>
   11b82:	0004      	movs	r4, r0
   11b84:	0030      	movs	r0, r6
   11b86:	000d      	movs	r5, r1
   11b88:	f001 fba0 	bl	132cc <__aeabi_i2d>
   11b8c:	4a95      	ldr	r2, [pc, #596]	; (11de4 <_dtoa_r+0x370>)
   11b8e:	4b96      	ldr	r3, [pc, #600]	; (11de8 <_dtoa_r+0x374>)
   11b90:	f7fe f87c 	bl	fc8c <__aeabi_dmul>
   11b94:	0002      	movs	r2, r0
   11b96:	000b      	movs	r3, r1
   11b98:	0020      	movs	r0, r4
   11b9a:	0029      	movs	r1, r5
   11b9c:	f7fd f932 	bl	ee04 <__aeabi_dadd>
   11ba0:	0004      	movs	r4, r0
   11ba2:	000d      	movs	r5, r1
   11ba4:	f7fe fe28 	bl	107f8 <__aeabi_d2iz>
   11ba8:	2200      	movs	r2, #0
   11baa:	9003      	str	r0, [sp, #12]
   11bac:	2300      	movs	r3, #0
   11bae:	0020      	movs	r0, r4
   11bb0:	0029      	movs	r1, r5
   11bb2:	f7fd f8ff 	bl	edb4 <__aeabi_dcmplt>
   11bb6:	2800      	cmp	r0, #0
   11bb8:	d00e      	beq.n	11bd8 <_dtoa_r+0x164>
   11bba:	9803      	ldr	r0, [sp, #12]
   11bbc:	f001 fb86 	bl	132cc <__aeabi_i2d>
   11bc0:	000b      	movs	r3, r1
   11bc2:	0002      	movs	r2, r0
   11bc4:	0029      	movs	r1, r5
   11bc6:	0020      	movs	r0, r4
   11bc8:	f7fd f8ee 	bl	eda8 <__aeabi_dcmpeq>
   11bcc:	0003      	movs	r3, r0
   11bce:	4258      	negs	r0, r3
   11bd0:	4158      	adcs	r0, r3
   11bd2:	9b03      	ldr	r3, [sp, #12]
   11bd4:	1a1b      	subs	r3, r3, r0
   11bd6:	9303      	str	r3, [sp, #12]
   11bd8:	2301      	movs	r3, #1
   11bda:	9316      	str	r3, [sp, #88]	; 0x58
   11bdc:	9b03      	ldr	r3, [sp, #12]
   11bde:	2b16      	cmp	r3, #22
   11be0:	d80f      	bhi.n	11c02 <_dtoa_r+0x18e>
   11be2:	4982      	ldr	r1, [pc, #520]	; (11dec <_dtoa_r+0x378>)
   11be4:	00db      	lsls	r3, r3, #3
   11be6:	18c9      	adds	r1, r1, r3
   11be8:	6808      	ldr	r0, [r1, #0]
   11bea:	6849      	ldr	r1, [r1, #4]
   11bec:	9a06      	ldr	r2, [sp, #24]
   11bee:	9b07      	ldr	r3, [sp, #28]
   11bf0:	f7fd f8f4 	bl	eddc <__aeabi_dcmpgt>
   11bf4:	2800      	cmp	r0, #0
   11bf6:	d04b      	beq.n	11c90 <_dtoa_r+0x21c>
   11bf8:	9b03      	ldr	r3, [sp, #12]
   11bfa:	3b01      	subs	r3, #1
   11bfc:	9303      	str	r3, [sp, #12]
   11bfe:	2300      	movs	r3, #0
   11c00:	9316      	str	r3, [sp, #88]	; 0x58
   11c02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11c04:	1b9e      	subs	r6, r3, r6
   11c06:	2300      	movs	r3, #0
   11c08:	930b      	str	r3, [sp, #44]	; 0x2c
   11c0a:	0033      	movs	r3, r6
   11c0c:	3b01      	subs	r3, #1
   11c0e:	930c      	str	r3, [sp, #48]	; 0x30
   11c10:	d504      	bpl.n	11c1c <_dtoa_r+0x1a8>
   11c12:	2301      	movs	r3, #1
   11c14:	1b9b      	subs	r3, r3, r6
   11c16:	930b      	str	r3, [sp, #44]	; 0x2c
   11c18:	2300      	movs	r3, #0
   11c1a:	930c      	str	r3, [sp, #48]	; 0x30
   11c1c:	9b03      	ldr	r3, [sp, #12]
   11c1e:	2b00      	cmp	r3, #0
   11c20:	db38      	blt.n	11c94 <_dtoa_r+0x220>
   11c22:	9a03      	ldr	r2, [sp, #12]
   11c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11c26:	4694      	mov	ip, r2
   11c28:	4463      	add	r3, ip
   11c2a:	930c      	str	r3, [sp, #48]	; 0x30
   11c2c:	2300      	movs	r3, #0
   11c2e:	920f      	str	r2, [sp, #60]	; 0x3c
   11c30:	9308      	str	r3, [sp, #32]
   11c32:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11c34:	2501      	movs	r5, #1
   11c36:	2b09      	cmp	r3, #9
   11c38:	d900      	bls.n	11c3c <_dtoa_r+0x1c8>
   11c3a:	e091      	b.n	11d60 <_dtoa_r+0x2ec>
   11c3c:	2b05      	cmp	r3, #5
   11c3e:	dd02      	ble.n	11c46 <_dtoa_r+0x1d2>
   11c40:	2500      	movs	r5, #0
   11c42:	3b04      	subs	r3, #4
   11c44:	9322      	str	r3, [sp, #136]	; 0x88
   11c46:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11c48:	1e98      	subs	r0, r3, #2
   11c4a:	2803      	cmp	r0, #3
   11c4c:	d900      	bls.n	11c50 <_dtoa_r+0x1dc>
   11c4e:	e091      	b.n	11d74 <_dtoa_r+0x300>
   11c50:	f001 fb32 	bl	132b8 <__gnu_thumb1_case_uqi>
   11c54:	76298482 	.word	0x76298482
   11c58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11c5a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11c5c:	189e      	adds	r6, r3, r2
   11c5e:	4b64      	ldr	r3, [pc, #400]	; (11df0 <_dtoa_r+0x37c>)
   11c60:	18f2      	adds	r2, r6, r3
   11c62:	2a20      	cmp	r2, #32
   11c64:	dd0f      	ble.n	11c86 <_dtoa_r+0x212>
   11c66:	4b63      	ldr	r3, [pc, #396]	; (11df4 <_dtoa_r+0x380>)
   11c68:	9806      	ldr	r0, [sp, #24]
   11c6a:	18f3      	adds	r3, r6, r3
   11c6c:	40d8      	lsrs	r0, r3
   11c6e:	2340      	movs	r3, #64	; 0x40
   11c70:	1a9b      	subs	r3, r3, r2
   11c72:	409c      	lsls	r4, r3
   11c74:	4320      	orrs	r0, r4
   11c76:	f7fe fdf3 	bl	10860 <__aeabi_ui2d>
   11c7a:	2301      	movs	r3, #1
   11c7c:	4c5e      	ldr	r4, [pc, #376]	; (11df8 <_dtoa_r+0x384>)
   11c7e:	3e01      	subs	r6, #1
   11c80:	1909      	adds	r1, r1, r4
   11c82:	9318      	str	r3, [sp, #96]	; 0x60
   11c84:	e771      	b.n	11b6a <_dtoa_r+0xf6>
   11c86:	2320      	movs	r3, #32
   11c88:	9806      	ldr	r0, [sp, #24]
   11c8a:	1a9b      	subs	r3, r3, r2
   11c8c:	4098      	lsls	r0, r3
   11c8e:	e7f2      	b.n	11c76 <_dtoa_r+0x202>
   11c90:	9016      	str	r0, [sp, #88]	; 0x58
   11c92:	e7b6      	b.n	11c02 <_dtoa_r+0x18e>
   11c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11c96:	9a03      	ldr	r2, [sp, #12]
   11c98:	1a9b      	subs	r3, r3, r2
   11c9a:	930b      	str	r3, [sp, #44]	; 0x2c
   11c9c:	4253      	negs	r3, r2
   11c9e:	9308      	str	r3, [sp, #32]
   11ca0:	2300      	movs	r3, #0
   11ca2:	930f      	str	r3, [sp, #60]	; 0x3c
   11ca4:	e7c5      	b.n	11c32 <_dtoa_r+0x1be>
   11ca6:	2301      	movs	r3, #1
   11ca8:	930e      	str	r3, [sp, #56]	; 0x38
   11caa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11cac:	2b00      	cmp	r3, #0
   11cae:	dd65      	ble.n	11d7c <_dtoa_r+0x308>
   11cb0:	001f      	movs	r7, r3
   11cb2:	930d      	str	r3, [sp, #52]	; 0x34
   11cb4:	9a04      	ldr	r2, [sp, #16]
   11cb6:	6a54      	ldr	r4, [r2, #36]	; 0x24
   11cb8:	2200      	movs	r2, #0
   11cba:	6062      	str	r2, [r4, #4]
   11cbc:	3204      	adds	r2, #4
   11cbe:	0011      	movs	r1, r2
   11cc0:	3114      	adds	r1, #20
   11cc2:	4299      	cmp	r1, r3
   11cc4:	d95f      	bls.n	11d86 <_dtoa_r+0x312>
   11cc6:	6861      	ldr	r1, [r4, #4]
   11cc8:	9804      	ldr	r0, [sp, #16]
   11cca:	f000 fece 	bl	12a6a <_Balloc>
   11cce:	9b04      	ldr	r3, [sp, #16]
   11cd0:	6020      	str	r0, [r4, #0]
   11cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11cd4:	681b      	ldr	r3, [r3, #0]
   11cd6:	930a      	str	r3, [sp, #40]	; 0x28
   11cd8:	2f0e      	cmp	r7, #14
   11cda:	d900      	bls.n	11cde <_dtoa_r+0x26a>
   11cdc:	e105      	b.n	11eea <_dtoa_r+0x476>
   11cde:	2d00      	cmp	r5, #0
   11ce0:	d100      	bne.n	11ce4 <_dtoa_r+0x270>
   11ce2:	e102      	b.n	11eea <_dtoa_r+0x476>
   11ce4:	9b06      	ldr	r3, [sp, #24]
   11ce6:	9c07      	ldr	r4, [sp, #28]
   11ce8:	9314      	str	r3, [sp, #80]	; 0x50
   11cea:	9415      	str	r4, [sp, #84]	; 0x54
   11cec:	9b03      	ldr	r3, [sp, #12]
   11cee:	2b00      	cmp	r3, #0
   11cf0:	dc00      	bgt.n	11cf4 <_dtoa_r+0x280>
   11cf2:	e085      	b.n	11e00 <_dtoa_r+0x38c>
   11cf4:	001a      	movs	r2, r3
   11cf6:	210f      	movs	r1, #15
   11cf8:	4b3c      	ldr	r3, [pc, #240]	; (11dec <_dtoa_r+0x378>)
   11cfa:	400a      	ands	r2, r1
   11cfc:	00d2      	lsls	r2, r2, #3
   11cfe:	189b      	adds	r3, r3, r2
   11d00:	685c      	ldr	r4, [r3, #4]
   11d02:	681b      	ldr	r3, [r3, #0]
   11d04:	9310      	str	r3, [sp, #64]	; 0x40
   11d06:	9411      	str	r4, [sp, #68]	; 0x44
   11d08:	9b03      	ldr	r3, [sp, #12]
   11d0a:	2402      	movs	r4, #2
   11d0c:	111d      	asrs	r5, r3, #4
   11d0e:	06eb      	lsls	r3, r5, #27
   11d10:	d50a      	bpl.n	11d28 <_dtoa_r+0x2b4>
   11d12:	4b3a      	ldr	r3, [pc, #232]	; (11dfc <_dtoa_r+0x388>)
   11d14:	400d      	ands	r5, r1
   11d16:	6a1a      	ldr	r2, [r3, #32]
   11d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11d1a:	9814      	ldr	r0, [sp, #80]	; 0x50
   11d1c:	9915      	ldr	r1, [sp, #84]	; 0x54
   11d1e:	f7fd fb81 	bl	f424 <__aeabi_ddiv>
   11d22:	9006      	str	r0, [sp, #24]
   11d24:	9107      	str	r1, [sp, #28]
   11d26:	3401      	adds	r4, #1
   11d28:	4e34      	ldr	r6, [pc, #208]	; (11dfc <_dtoa_r+0x388>)
   11d2a:	2d00      	cmp	r5, #0
   11d2c:	d130      	bne.n	11d90 <_dtoa_r+0x31c>
   11d2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11d32:	9806      	ldr	r0, [sp, #24]
   11d34:	9907      	ldr	r1, [sp, #28]
   11d36:	f7fd fb75 	bl	f424 <__aeabi_ddiv>
   11d3a:	9006      	str	r0, [sp, #24]
   11d3c:	9107      	str	r1, [sp, #28]
   11d3e:	e07a      	b.n	11e36 <_dtoa_r+0x3c2>
   11d40:	2301      	movs	r3, #1
   11d42:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11d44:	930e      	str	r3, [sp, #56]	; 0x38
   11d46:	4694      	mov	ip, r2
   11d48:	9b03      	ldr	r3, [sp, #12]
   11d4a:	4463      	add	r3, ip
   11d4c:	1c5f      	adds	r7, r3, #1
   11d4e:	930d      	str	r3, [sp, #52]	; 0x34
   11d50:	1e3b      	subs	r3, r7, #0
   11d52:	dcaf      	bgt.n	11cb4 <_dtoa_r+0x240>
   11d54:	2301      	movs	r3, #1
   11d56:	e7ad      	b.n	11cb4 <_dtoa_r+0x240>
   11d58:	2300      	movs	r3, #0
   11d5a:	e7a5      	b.n	11ca8 <_dtoa_r+0x234>
   11d5c:	2300      	movs	r3, #0
   11d5e:	e7f0      	b.n	11d42 <_dtoa_r+0x2ce>
   11d60:	2300      	movs	r3, #0
   11d62:	950e      	str	r5, [sp, #56]	; 0x38
   11d64:	9322      	str	r3, [sp, #136]	; 0x88
   11d66:	3b01      	subs	r3, #1
   11d68:	2200      	movs	r2, #0
   11d6a:	930d      	str	r3, [sp, #52]	; 0x34
   11d6c:	001f      	movs	r7, r3
   11d6e:	3313      	adds	r3, #19
   11d70:	9223      	str	r2, [sp, #140]	; 0x8c
   11d72:	e79f      	b.n	11cb4 <_dtoa_r+0x240>
   11d74:	2301      	movs	r3, #1
   11d76:	930e      	str	r3, [sp, #56]	; 0x38
   11d78:	3b02      	subs	r3, #2
   11d7a:	e7f5      	b.n	11d68 <_dtoa_r+0x2f4>
   11d7c:	2301      	movs	r3, #1
   11d7e:	930d      	str	r3, [sp, #52]	; 0x34
   11d80:	001f      	movs	r7, r3
   11d82:	001a      	movs	r2, r3
   11d84:	e7f4      	b.n	11d70 <_dtoa_r+0x2fc>
   11d86:	6861      	ldr	r1, [r4, #4]
   11d88:	0052      	lsls	r2, r2, #1
   11d8a:	3101      	adds	r1, #1
   11d8c:	6061      	str	r1, [r4, #4]
   11d8e:	e796      	b.n	11cbe <_dtoa_r+0x24a>
   11d90:	2301      	movs	r3, #1
   11d92:	421d      	tst	r5, r3
   11d94:	d008      	beq.n	11da8 <_dtoa_r+0x334>
   11d96:	9810      	ldr	r0, [sp, #64]	; 0x40
   11d98:	9911      	ldr	r1, [sp, #68]	; 0x44
   11d9a:	18e4      	adds	r4, r4, r3
   11d9c:	6832      	ldr	r2, [r6, #0]
   11d9e:	6873      	ldr	r3, [r6, #4]
   11da0:	f7fd ff74 	bl	fc8c <__aeabi_dmul>
   11da4:	9010      	str	r0, [sp, #64]	; 0x40
   11da6:	9111      	str	r1, [sp, #68]	; 0x44
   11da8:	106d      	asrs	r5, r5, #1
   11daa:	3608      	adds	r6, #8
   11dac:	e7bd      	b.n	11d2a <_dtoa_r+0x2b6>
   11dae:	46c0      	nop			; (mov r8, r8)
   11db0:	7ff00000 	.word	0x7ff00000
   11db4:	0000270f 	.word	0x0000270f
   11db8:	000144e1 	.word	0x000144e1
   11dbc:	000144e4 	.word	0x000144e4
   11dc0:	000143b3 	.word	0x000143b3
   11dc4:	000143b4 	.word	0x000143b4
   11dc8:	3ff00000 	.word	0x3ff00000
   11dcc:	fffffc01 	.word	0xfffffc01
   11dd0:	3ff80000 	.word	0x3ff80000
   11dd4:	636f4361 	.word	0x636f4361
   11dd8:	3fd287a7 	.word	0x3fd287a7
   11ddc:	8b60c8b3 	.word	0x8b60c8b3
   11de0:	3fc68a28 	.word	0x3fc68a28
   11de4:	509f79fb 	.word	0x509f79fb
   11de8:	3fd34413 	.word	0x3fd34413
   11dec:	00014570 	.word	0x00014570
   11df0:	00000432 	.word	0x00000432
   11df4:	00000412 	.word	0x00000412
   11df8:	fe100000 	.word	0xfe100000
   11dfc:	00014548 	.word	0x00014548
   11e00:	9b03      	ldr	r3, [sp, #12]
   11e02:	2402      	movs	r4, #2
   11e04:	2b00      	cmp	r3, #0
   11e06:	d016      	beq.n	11e36 <_dtoa_r+0x3c2>
   11e08:	9814      	ldr	r0, [sp, #80]	; 0x50
   11e0a:	9915      	ldr	r1, [sp, #84]	; 0x54
   11e0c:	425d      	negs	r5, r3
   11e0e:	230f      	movs	r3, #15
   11e10:	4aca      	ldr	r2, [pc, #808]	; (1213c <_dtoa_r+0x6c8>)
   11e12:	402b      	ands	r3, r5
   11e14:	00db      	lsls	r3, r3, #3
   11e16:	18d3      	adds	r3, r2, r3
   11e18:	681a      	ldr	r2, [r3, #0]
   11e1a:	685b      	ldr	r3, [r3, #4]
   11e1c:	f7fd ff36 	bl	fc8c <__aeabi_dmul>
   11e20:	2300      	movs	r3, #0
   11e22:	9006      	str	r0, [sp, #24]
   11e24:	9107      	str	r1, [sp, #28]
   11e26:	4ec6      	ldr	r6, [pc, #792]	; (12140 <_dtoa_r+0x6cc>)
   11e28:	112d      	asrs	r5, r5, #4
   11e2a:	2d00      	cmp	r5, #0
   11e2c:	d000      	beq.n	11e30 <_dtoa_r+0x3bc>
   11e2e:	e08c      	b.n	11f4a <_dtoa_r+0x4d6>
   11e30:	2b00      	cmp	r3, #0
   11e32:	d000      	beq.n	11e36 <_dtoa_r+0x3c2>
   11e34:	e781      	b.n	11d3a <_dtoa_r+0x2c6>
   11e36:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11e38:	2b00      	cmp	r3, #0
   11e3a:	d100      	bne.n	11e3e <_dtoa_r+0x3ca>
   11e3c:	e091      	b.n	11f62 <_dtoa_r+0x4ee>
   11e3e:	9a06      	ldr	r2, [sp, #24]
   11e40:	9b07      	ldr	r3, [sp, #28]
   11e42:	9210      	str	r2, [sp, #64]	; 0x40
   11e44:	9311      	str	r3, [sp, #68]	; 0x44
   11e46:	9810      	ldr	r0, [sp, #64]	; 0x40
   11e48:	9911      	ldr	r1, [sp, #68]	; 0x44
   11e4a:	2200      	movs	r2, #0
   11e4c:	4bbd      	ldr	r3, [pc, #756]	; (12144 <_dtoa_r+0x6d0>)
   11e4e:	f7fc ffb1 	bl	edb4 <__aeabi_dcmplt>
   11e52:	2800      	cmp	r0, #0
   11e54:	d100      	bne.n	11e58 <_dtoa_r+0x3e4>
   11e56:	e084      	b.n	11f62 <_dtoa_r+0x4ee>
   11e58:	2f00      	cmp	r7, #0
   11e5a:	d100      	bne.n	11e5e <_dtoa_r+0x3ea>
   11e5c:	e081      	b.n	11f62 <_dtoa_r+0x4ee>
   11e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11e60:	2b00      	cmp	r3, #0
   11e62:	dd3e      	ble.n	11ee2 <_dtoa_r+0x46e>
   11e64:	9810      	ldr	r0, [sp, #64]	; 0x40
   11e66:	9911      	ldr	r1, [sp, #68]	; 0x44
   11e68:	9b03      	ldr	r3, [sp, #12]
   11e6a:	2200      	movs	r2, #0
   11e6c:	1e5e      	subs	r6, r3, #1
   11e6e:	4bb6      	ldr	r3, [pc, #728]	; (12148 <_dtoa_r+0x6d4>)
   11e70:	f7fd ff0c 	bl	fc8c <__aeabi_dmul>
   11e74:	9006      	str	r0, [sp, #24]
   11e76:	9107      	str	r1, [sp, #28]
   11e78:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   11e7a:	3401      	adds	r4, #1
   11e7c:	0020      	movs	r0, r4
   11e7e:	f001 fa25 	bl	132cc <__aeabi_i2d>
   11e82:	9a06      	ldr	r2, [sp, #24]
   11e84:	9b07      	ldr	r3, [sp, #28]
   11e86:	f7fd ff01 	bl	fc8c <__aeabi_dmul>
   11e8a:	2200      	movs	r2, #0
   11e8c:	4baf      	ldr	r3, [pc, #700]	; (1214c <_dtoa_r+0x6d8>)
   11e8e:	f7fc ffb9 	bl	ee04 <__aeabi_dadd>
   11e92:	9012      	str	r0, [sp, #72]	; 0x48
   11e94:	9113      	str	r1, [sp, #76]	; 0x4c
   11e96:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11e9a:	4aad      	ldr	r2, [pc, #692]	; (12150 <_dtoa_r+0x6dc>)
   11e9c:	9310      	str	r3, [sp, #64]	; 0x40
   11e9e:	9411      	str	r4, [sp, #68]	; 0x44
   11ea0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11ea2:	189c      	adds	r4, r3, r2
   11ea4:	9411      	str	r4, [sp, #68]	; 0x44
   11ea6:	2d00      	cmp	r5, #0
   11ea8:	d15e      	bne.n	11f68 <_dtoa_r+0x4f4>
   11eaa:	9806      	ldr	r0, [sp, #24]
   11eac:	9907      	ldr	r1, [sp, #28]
   11eae:	2200      	movs	r2, #0
   11eb0:	4ba8      	ldr	r3, [pc, #672]	; (12154 <_dtoa_r+0x6e0>)
   11eb2:	f7fe f96b 	bl	1018c <__aeabi_dsub>
   11eb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11eb8:	0023      	movs	r3, r4
   11eba:	9006      	str	r0, [sp, #24]
   11ebc:	9107      	str	r1, [sp, #28]
   11ebe:	f7fc ff8d 	bl	eddc <__aeabi_dcmpgt>
   11ec2:	2800      	cmp	r0, #0
   11ec4:	d000      	beq.n	11ec8 <_dtoa_r+0x454>
   11ec6:	e301      	b.n	124cc <_dtoa_r+0xa58>
   11ec8:	48a3      	ldr	r0, [pc, #652]	; (12158 <_dtoa_r+0x6e4>)
   11eca:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11ecc:	4684      	mov	ip, r0
   11ece:	4461      	add	r1, ip
   11ed0:	000b      	movs	r3, r1
   11ed2:	9806      	ldr	r0, [sp, #24]
   11ed4:	9907      	ldr	r1, [sp, #28]
   11ed6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11ed8:	f7fc ff6c 	bl	edb4 <__aeabi_dcmplt>
   11edc:	2800      	cmp	r0, #0
   11ede:	d000      	beq.n	11ee2 <_dtoa_r+0x46e>
   11ee0:	e2e8      	b.n	124b4 <_dtoa_r+0xa40>
   11ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11ee4:	9c15      	ldr	r4, [sp, #84]	; 0x54
   11ee6:	9306      	str	r3, [sp, #24]
   11ee8:	9407      	str	r4, [sp, #28]
   11eea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11eec:	2b00      	cmp	r3, #0
   11eee:	da00      	bge.n	11ef2 <_dtoa_r+0x47e>
   11ef0:	e157      	b.n	121a2 <_dtoa_r+0x72e>
   11ef2:	9a03      	ldr	r2, [sp, #12]
   11ef4:	2a0e      	cmp	r2, #14
   11ef6:	dd00      	ble.n	11efa <_dtoa_r+0x486>
   11ef8:	e153      	b.n	121a2 <_dtoa_r+0x72e>
   11efa:	4b90      	ldr	r3, [pc, #576]	; (1213c <_dtoa_r+0x6c8>)
   11efc:	00d2      	lsls	r2, r2, #3
   11efe:	189b      	adds	r3, r3, r2
   11f00:	685c      	ldr	r4, [r3, #4]
   11f02:	681b      	ldr	r3, [r3, #0]
   11f04:	9308      	str	r3, [sp, #32]
   11f06:	9409      	str	r4, [sp, #36]	; 0x24
   11f08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11f0a:	2b00      	cmp	r3, #0
   11f0c:	db00      	blt.n	11f10 <_dtoa_r+0x49c>
   11f0e:	e0ce      	b.n	120ae <_dtoa_r+0x63a>
   11f10:	2f00      	cmp	r7, #0
   11f12:	dd00      	ble.n	11f16 <_dtoa_r+0x4a2>
   11f14:	e0cb      	b.n	120ae <_dtoa_r+0x63a>
   11f16:	d000      	beq.n	11f1a <_dtoa_r+0x4a6>
   11f18:	e2cf      	b.n	124ba <_dtoa_r+0xa46>
   11f1a:	9808      	ldr	r0, [sp, #32]
   11f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
   11f1e:	2200      	movs	r2, #0
   11f20:	4b8c      	ldr	r3, [pc, #560]	; (12154 <_dtoa_r+0x6e0>)
   11f22:	f7fd feb3 	bl	fc8c <__aeabi_dmul>
   11f26:	9a06      	ldr	r2, [sp, #24]
   11f28:	9b07      	ldr	r3, [sp, #28]
   11f2a:	f7fc ff61 	bl	edf0 <__aeabi_dcmpge>
   11f2e:	003e      	movs	r6, r7
   11f30:	9708      	str	r7, [sp, #32]
   11f32:	2800      	cmp	r0, #0
   11f34:	d000      	beq.n	11f38 <_dtoa_r+0x4c4>
   11f36:	e2a4      	b.n	12482 <_dtoa_r+0xa0e>
   11f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11f3c:	1c5d      	adds	r5, r3, #1
   11f3e:	2331      	movs	r3, #49	; 0x31
   11f40:	7013      	strb	r3, [r2, #0]
   11f42:	9b03      	ldr	r3, [sp, #12]
   11f44:	3301      	adds	r3, #1
   11f46:	9303      	str	r3, [sp, #12]
   11f48:	e29f      	b.n	1248a <_dtoa_r+0xa16>
   11f4a:	2201      	movs	r2, #1
   11f4c:	4215      	tst	r5, r2
   11f4e:	d005      	beq.n	11f5c <_dtoa_r+0x4e8>
   11f50:	18a4      	adds	r4, r4, r2
   11f52:	6832      	ldr	r2, [r6, #0]
   11f54:	6873      	ldr	r3, [r6, #4]
   11f56:	f7fd fe99 	bl	fc8c <__aeabi_dmul>
   11f5a:	2301      	movs	r3, #1
   11f5c:	106d      	asrs	r5, r5, #1
   11f5e:	3608      	adds	r6, #8
   11f60:	e763      	b.n	11e2a <_dtoa_r+0x3b6>
   11f62:	9e03      	ldr	r6, [sp, #12]
   11f64:	003d      	movs	r5, r7
   11f66:	e789      	b.n	11e7c <_dtoa_r+0x408>
   11f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11f6a:	1e69      	subs	r1, r5, #1
   11f6c:	1952      	adds	r2, r2, r5
   11f6e:	9217      	str	r2, [sp, #92]	; 0x5c
   11f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11f72:	4b72      	ldr	r3, [pc, #456]	; (1213c <_dtoa_r+0x6c8>)
   11f74:	00c9      	lsls	r1, r1, #3
   11f76:	2a00      	cmp	r2, #0
   11f78:	d04a      	beq.n	12010 <_dtoa_r+0x59c>
   11f7a:	185b      	adds	r3, r3, r1
   11f7c:	681a      	ldr	r2, [r3, #0]
   11f7e:	685b      	ldr	r3, [r3, #4]
   11f80:	2000      	movs	r0, #0
   11f82:	4976      	ldr	r1, [pc, #472]	; (1215c <_dtoa_r+0x6e8>)
   11f84:	f7fd fa4e 	bl	f424 <__aeabi_ddiv>
   11f88:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11f8c:	f7fe f8fe 	bl	1018c <__aeabi_dsub>
   11f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11f92:	9010      	str	r0, [sp, #64]	; 0x40
   11f94:	9111      	str	r1, [sp, #68]	; 0x44
   11f96:	9312      	str	r3, [sp, #72]	; 0x48
   11f98:	9806      	ldr	r0, [sp, #24]
   11f9a:	9907      	ldr	r1, [sp, #28]
   11f9c:	f7fe fc2c 	bl	107f8 <__aeabi_d2iz>
   11fa0:	0004      	movs	r4, r0
   11fa2:	f001 f993 	bl	132cc <__aeabi_i2d>
   11fa6:	0002      	movs	r2, r0
   11fa8:	000b      	movs	r3, r1
   11faa:	9806      	ldr	r0, [sp, #24]
   11fac:	9907      	ldr	r1, [sp, #28]
   11fae:	f7fe f8ed 	bl	1018c <__aeabi_dsub>
   11fb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11fb4:	3430      	adds	r4, #48	; 0x30
   11fb6:	1c5d      	adds	r5, r3, #1
   11fb8:	701c      	strb	r4, [r3, #0]
   11fba:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11fbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11fbe:	9006      	str	r0, [sp, #24]
   11fc0:	9107      	str	r1, [sp, #28]
   11fc2:	f7fc fef7 	bl	edb4 <__aeabi_dcmplt>
   11fc6:	2800      	cmp	r0, #0
   11fc8:	d165      	bne.n	12096 <_dtoa_r+0x622>
   11fca:	9a06      	ldr	r2, [sp, #24]
   11fcc:	9b07      	ldr	r3, [sp, #28]
   11fce:	2000      	movs	r0, #0
   11fd0:	495c      	ldr	r1, [pc, #368]	; (12144 <_dtoa_r+0x6d0>)
   11fd2:	f7fe f8db 	bl	1018c <__aeabi_dsub>
   11fd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11fda:	f7fc feeb 	bl	edb4 <__aeabi_dcmplt>
   11fde:	2800      	cmp	r0, #0
   11fe0:	d000      	beq.n	11fe4 <_dtoa_r+0x570>
   11fe2:	e0be      	b.n	12162 <_dtoa_r+0x6ee>
   11fe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11fe6:	429d      	cmp	r5, r3
   11fe8:	d100      	bne.n	11fec <_dtoa_r+0x578>
   11fea:	e77a      	b.n	11ee2 <_dtoa_r+0x46e>
   11fec:	9810      	ldr	r0, [sp, #64]	; 0x40
   11fee:	9911      	ldr	r1, [sp, #68]	; 0x44
   11ff0:	2200      	movs	r2, #0
   11ff2:	4b55      	ldr	r3, [pc, #340]	; (12148 <_dtoa_r+0x6d4>)
   11ff4:	f7fd fe4a 	bl	fc8c <__aeabi_dmul>
   11ff8:	2200      	movs	r2, #0
   11ffa:	9010      	str	r0, [sp, #64]	; 0x40
   11ffc:	9111      	str	r1, [sp, #68]	; 0x44
   11ffe:	9806      	ldr	r0, [sp, #24]
   12000:	9907      	ldr	r1, [sp, #28]
   12002:	4b51      	ldr	r3, [pc, #324]	; (12148 <_dtoa_r+0x6d4>)
   12004:	f7fd fe42 	bl	fc8c <__aeabi_dmul>
   12008:	9512      	str	r5, [sp, #72]	; 0x48
   1200a:	9006      	str	r0, [sp, #24]
   1200c:	9107      	str	r1, [sp, #28]
   1200e:	e7c3      	b.n	11f98 <_dtoa_r+0x524>
   12010:	1859      	adds	r1, r3, r1
   12012:	6808      	ldr	r0, [r1, #0]
   12014:	6849      	ldr	r1, [r1, #4]
   12016:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12018:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1201a:	f7fd fe37 	bl	fc8c <__aeabi_dmul>
   1201e:	9010      	str	r0, [sp, #64]	; 0x40
   12020:	9111      	str	r1, [sp, #68]	; 0x44
   12022:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12024:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   12026:	9806      	ldr	r0, [sp, #24]
   12028:	9907      	ldr	r1, [sp, #28]
   1202a:	f7fe fbe5 	bl	107f8 <__aeabi_d2iz>
   1202e:	9012      	str	r0, [sp, #72]	; 0x48
   12030:	f001 f94c 	bl	132cc <__aeabi_i2d>
   12034:	0002      	movs	r2, r0
   12036:	000b      	movs	r3, r1
   12038:	9806      	ldr	r0, [sp, #24]
   1203a:	9907      	ldr	r1, [sp, #28]
   1203c:	f7fe f8a6 	bl	1018c <__aeabi_dsub>
   12040:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12042:	9006      	str	r0, [sp, #24]
   12044:	9107      	str	r1, [sp, #28]
   12046:	3330      	adds	r3, #48	; 0x30
   12048:	7023      	strb	r3, [r4, #0]
   1204a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1204c:	3401      	adds	r4, #1
   1204e:	2200      	movs	r2, #0
   12050:	42a3      	cmp	r3, r4
   12052:	d124      	bne.n	1209e <_dtoa_r+0x62a>
   12054:	4b41      	ldr	r3, [pc, #260]	; (1215c <_dtoa_r+0x6e8>)
   12056:	9810      	ldr	r0, [sp, #64]	; 0x40
   12058:	9911      	ldr	r1, [sp, #68]	; 0x44
   1205a:	f7fc fed3 	bl	ee04 <__aeabi_dadd>
   1205e:	0002      	movs	r2, r0
   12060:	000b      	movs	r3, r1
   12062:	9806      	ldr	r0, [sp, #24]
   12064:	9907      	ldr	r1, [sp, #28]
   12066:	f7fc feb9 	bl	eddc <__aeabi_dcmpgt>
   1206a:	2800      	cmp	r0, #0
   1206c:	d000      	beq.n	12070 <_dtoa_r+0x5fc>
   1206e:	e078      	b.n	12162 <_dtoa_r+0x6ee>
   12070:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12072:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12074:	2000      	movs	r0, #0
   12076:	4939      	ldr	r1, [pc, #228]	; (1215c <_dtoa_r+0x6e8>)
   12078:	f7fe f888 	bl	1018c <__aeabi_dsub>
   1207c:	0002      	movs	r2, r0
   1207e:	000b      	movs	r3, r1
   12080:	9806      	ldr	r0, [sp, #24]
   12082:	9907      	ldr	r1, [sp, #28]
   12084:	f7fc fe96 	bl	edb4 <__aeabi_dcmplt>
   12088:	2800      	cmp	r0, #0
   1208a:	d100      	bne.n	1208e <_dtoa_r+0x61a>
   1208c:	e729      	b.n	11ee2 <_dtoa_r+0x46e>
   1208e:	1e6b      	subs	r3, r5, #1
   12090:	781a      	ldrb	r2, [r3, #0]
   12092:	2a30      	cmp	r2, #48	; 0x30
   12094:	d001      	beq.n	1209a <_dtoa_r+0x626>
   12096:	9603      	str	r6, [sp, #12]
   12098:	e03f      	b.n	1211a <_dtoa_r+0x6a6>
   1209a:	001d      	movs	r5, r3
   1209c:	e7f7      	b.n	1208e <_dtoa_r+0x61a>
   1209e:	9806      	ldr	r0, [sp, #24]
   120a0:	9907      	ldr	r1, [sp, #28]
   120a2:	4b29      	ldr	r3, [pc, #164]	; (12148 <_dtoa_r+0x6d4>)
   120a4:	f7fd fdf2 	bl	fc8c <__aeabi_dmul>
   120a8:	9006      	str	r0, [sp, #24]
   120aa:	9107      	str	r1, [sp, #28]
   120ac:	e7bb      	b.n	12026 <_dtoa_r+0x5b2>
   120ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   120b0:	9a08      	ldr	r2, [sp, #32]
   120b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   120b4:	9806      	ldr	r0, [sp, #24]
   120b6:	9907      	ldr	r1, [sp, #28]
   120b8:	f7fd f9b4 	bl	f424 <__aeabi_ddiv>
   120bc:	f7fe fb9c 	bl	107f8 <__aeabi_d2iz>
   120c0:	0004      	movs	r4, r0
   120c2:	f001 f903 	bl	132cc <__aeabi_i2d>
   120c6:	9a08      	ldr	r2, [sp, #32]
   120c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   120ca:	f7fd fddf 	bl	fc8c <__aeabi_dmul>
   120ce:	000b      	movs	r3, r1
   120d0:	0002      	movs	r2, r0
   120d2:	9806      	ldr	r0, [sp, #24]
   120d4:	9907      	ldr	r1, [sp, #28]
   120d6:	f7fe f859 	bl	1018c <__aeabi_dsub>
   120da:	0023      	movs	r3, r4
   120dc:	3330      	adds	r3, #48	; 0x30
   120de:	7033      	strb	r3, [r6, #0]
   120e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   120e2:	1c75      	adds	r5, r6, #1
   120e4:	1aeb      	subs	r3, r5, r3
   120e6:	429f      	cmp	r7, r3
   120e8:	d14c      	bne.n	12184 <_dtoa_r+0x710>
   120ea:	0002      	movs	r2, r0
   120ec:	000b      	movs	r3, r1
   120ee:	f7fc fe89 	bl	ee04 <__aeabi_dadd>
   120f2:	0006      	movs	r6, r0
   120f4:	000f      	movs	r7, r1
   120f6:	0002      	movs	r2, r0
   120f8:	000b      	movs	r3, r1
   120fa:	9808      	ldr	r0, [sp, #32]
   120fc:	9909      	ldr	r1, [sp, #36]	; 0x24
   120fe:	f7fc fe59 	bl	edb4 <__aeabi_dcmplt>
   12102:	2800      	cmp	r0, #0
   12104:	d12c      	bne.n	12160 <_dtoa_r+0x6ec>
   12106:	9808      	ldr	r0, [sp, #32]
   12108:	9909      	ldr	r1, [sp, #36]	; 0x24
   1210a:	0032      	movs	r2, r6
   1210c:	003b      	movs	r3, r7
   1210e:	f7fc fe4b 	bl	eda8 <__aeabi_dcmpeq>
   12112:	2800      	cmp	r0, #0
   12114:	d001      	beq.n	1211a <_dtoa_r+0x6a6>
   12116:	07e3      	lsls	r3, r4, #31
   12118:	d422      	bmi.n	12160 <_dtoa_r+0x6ec>
   1211a:	9905      	ldr	r1, [sp, #20]
   1211c:	9804      	ldr	r0, [sp, #16]
   1211e:	f000 fcdc 	bl	12ada <_Bfree>
   12122:	2300      	movs	r3, #0
   12124:	702b      	strb	r3, [r5, #0]
   12126:	9b03      	ldr	r3, [sp, #12]
   12128:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1212a:	3301      	adds	r3, #1
   1212c:	6013      	str	r3, [r2, #0]
   1212e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   12130:	2b00      	cmp	r3, #0
   12132:	d100      	bne.n	12136 <_dtoa_r+0x6c2>
   12134:	e275      	b.n	12622 <_dtoa_r+0xbae>
   12136:	601d      	str	r5, [r3, #0]
   12138:	e273      	b.n	12622 <_dtoa_r+0xbae>
   1213a:	46c0      	nop			; (mov r8, r8)
   1213c:	00014570 	.word	0x00014570
   12140:	00014548 	.word	0x00014548
   12144:	3ff00000 	.word	0x3ff00000
   12148:	40240000 	.word	0x40240000
   1214c:	401c0000 	.word	0x401c0000
   12150:	fcc00000 	.word	0xfcc00000
   12154:	40140000 	.word	0x40140000
   12158:	7cc00000 	.word	0x7cc00000
   1215c:	3fe00000 	.word	0x3fe00000
   12160:	9e03      	ldr	r6, [sp, #12]
   12162:	1e6b      	subs	r3, r5, #1
   12164:	781a      	ldrb	r2, [r3, #0]
   12166:	2a39      	cmp	r2, #57	; 0x39
   12168:	d106      	bne.n	12178 <_dtoa_r+0x704>
   1216a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1216c:	429a      	cmp	r2, r3
   1216e:	d107      	bne.n	12180 <_dtoa_r+0x70c>
   12170:	2330      	movs	r3, #48	; 0x30
   12172:	7013      	strb	r3, [r2, #0]
   12174:	0013      	movs	r3, r2
   12176:	3601      	adds	r6, #1
   12178:	781a      	ldrb	r2, [r3, #0]
   1217a:	3201      	adds	r2, #1
   1217c:	701a      	strb	r2, [r3, #0]
   1217e:	e78a      	b.n	12096 <_dtoa_r+0x622>
   12180:	001d      	movs	r5, r3
   12182:	e7ee      	b.n	12162 <_dtoa_r+0x6ee>
   12184:	2200      	movs	r2, #0
   12186:	4bcf      	ldr	r3, [pc, #828]	; (124c4 <_dtoa_r+0xa50>)
   12188:	f7fd fd80 	bl	fc8c <__aeabi_dmul>
   1218c:	2200      	movs	r2, #0
   1218e:	2300      	movs	r3, #0
   12190:	9006      	str	r0, [sp, #24]
   12192:	9107      	str	r1, [sp, #28]
   12194:	002e      	movs	r6, r5
   12196:	f7fc fe07 	bl	eda8 <__aeabi_dcmpeq>
   1219a:	2800      	cmp	r0, #0
   1219c:	d100      	bne.n	121a0 <_dtoa_r+0x72c>
   1219e:	e787      	b.n	120b0 <_dtoa_r+0x63c>
   121a0:	e7bb      	b.n	1211a <_dtoa_r+0x6a6>
   121a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   121a4:	2a00      	cmp	r2, #0
   121a6:	d100      	bne.n	121aa <_dtoa_r+0x736>
   121a8:	e087      	b.n	122ba <_dtoa_r+0x846>
   121aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
   121ac:	2a01      	cmp	r2, #1
   121ae:	dc6e      	bgt.n	1228e <_dtoa_r+0x81a>
   121b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   121b2:	2a00      	cmp	r2, #0
   121b4:	d067      	beq.n	12286 <_dtoa_r+0x812>
   121b6:	4ac4      	ldr	r2, [pc, #784]	; (124c8 <_dtoa_r+0xa54>)
   121b8:	189b      	adds	r3, r3, r2
   121ba:	9d08      	ldr	r5, [sp, #32]
   121bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   121be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   121c0:	2101      	movs	r1, #1
   121c2:	18d2      	adds	r2, r2, r3
   121c4:	920b      	str	r2, [sp, #44]	; 0x2c
   121c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   121c8:	9804      	ldr	r0, [sp, #16]
   121ca:	18d3      	adds	r3, r2, r3
   121cc:	930c      	str	r3, [sp, #48]	; 0x30
   121ce:	f000 fd22 	bl	12c16 <__i2b>
   121d2:	0006      	movs	r6, r0
   121d4:	2c00      	cmp	r4, #0
   121d6:	dd0e      	ble.n	121f6 <_dtoa_r+0x782>
   121d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   121da:	2b00      	cmp	r3, #0
   121dc:	dd0b      	ble.n	121f6 <_dtoa_r+0x782>
   121de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   121e0:	0023      	movs	r3, r4
   121e2:	4294      	cmp	r4, r2
   121e4:	dd00      	ble.n	121e8 <_dtoa_r+0x774>
   121e6:	0013      	movs	r3, r2
   121e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   121ea:	1ae4      	subs	r4, r4, r3
   121ec:	1ad2      	subs	r2, r2, r3
   121ee:	920b      	str	r2, [sp, #44]	; 0x2c
   121f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   121f2:	1ad3      	subs	r3, r2, r3
   121f4:	930c      	str	r3, [sp, #48]	; 0x30
   121f6:	9b08      	ldr	r3, [sp, #32]
   121f8:	2b00      	cmp	r3, #0
   121fa:	d01e      	beq.n	1223a <_dtoa_r+0x7c6>
   121fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   121fe:	2b00      	cmp	r3, #0
   12200:	d05f      	beq.n	122c2 <_dtoa_r+0x84e>
   12202:	2d00      	cmp	r5, #0
   12204:	dd11      	ble.n	1222a <_dtoa_r+0x7b6>
   12206:	0031      	movs	r1, r6
   12208:	002a      	movs	r2, r5
   1220a:	9804      	ldr	r0, [sp, #16]
   1220c:	f000 fd9c 	bl	12d48 <__pow5mult>
   12210:	9a05      	ldr	r2, [sp, #20]
   12212:	0001      	movs	r1, r0
   12214:	0006      	movs	r6, r0
   12216:	9804      	ldr	r0, [sp, #16]
   12218:	f000 fd06 	bl	12c28 <__multiply>
   1221c:	9905      	ldr	r1, [sp, #20]
   1221e:	9010      	str	r0, [sp, #64]	; 0x40
   12220:	9804      	ldr	r0, [sp, #16]
   12222:	f000 fc5a 	bl	12ada <_Bfree>
   12226:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12228:	9305      	str	r3, [sp, #20]
   1222a:	9b08      	ldr	r3, [sp, #32]
   1222c:	1b5a      	subs	r2, r3, r5
   1222e:	d004      	beq.n	1223a <_dtoa_r+0x7c6>
   12230:	9905      	ldr	r1, [sp, #20]
   12232:	9804      	ldr	r0, [sp, #16]
   12234:	f000 fd88 	bl	12d48 <__pow5mult>
   12238:	9005      	str	r0, [sp, #20]
   1223a:	2101      	movs	r1, #1
   1223c:	9804      	ldr	r0, [sp, #16]
   1223e:	f000 fcea 	bl	12c16 <__i2b>
   12242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12244:	9008      	str	r0, [sp, #32]
   12246:	2b00      	cmp	r3, #0
   12248:	dd3d      	ble.n	122c6 <_dtoa_r+0x852>
   1224a:	001a      	movs	r2, r3
   1224c:	0001      	movs	r1, r0
   1224e:	9804      	ldr	r0, [sp, #16]
   12250:	f000 fd7a 	bl	12d48 <__pow5mult>
   12254:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12256:	9008      	str	r0, [sp, #32]
   12258:	2500      	movs	r5, #0
   1225a:	2b01      	cmp	r3, #1
   1225c:	dc3b      	bgt.n	122d6 <_dtoa_r+0x862>
   1225e:	2500      	movs	r5, #0
   12260:	9b06      	ldr	r3, [sp, #24]
   12262:	42ab      	cmp	r3, r5
   12264:	d133      	bne.n	122ce <_dtoa_r+0x85a>
   12266:	9b07      	ldr	r3, [sp, #28]
   12268:	031b      	lsls	r3, r3, #12
   1226a:	42ab      	cmp	r3, r5
   1226c:	d12f      	bne.n	122ce <_dtoa_r+0x85a>
   1226e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12270:	9a07      	ldr	r2, [sp, #28]
   12272:	4213      	tst	r3, r2
   12274:	d02b      	beq.n	122ce <_dtoa_r+0x85a>
   12276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12278:	3501      	adds	r5, #1
   1227a:	3301      	adds	r3, #1
   1227c:	930b      	str	r3, [sp, #44]	; 0x2c
   1227e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12280:	3301      	adds	r3, #1
   12282:	930c      	str	r3, [sp, #48]	; 0x30
   12284:	e023      	b.n	122ce <_dtoa_r+0x85a>
   12286:	2336      	movs	r3, #54	; 0x36
   12288:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1228a:	1a9b      	subs	r3, r3, r2
   1228c:	e795      	b.n	121ba <_dtoa_r+0x746>
   1228e:	9b08      	ldr	r3, [sp, #32]
   12290:	1e7d      	subs	r5, r7, #1
   12292:	42ab      	cmp	r3, r5
   12294:	db06      	blt.n	122a4 <_dtoa_r+0x830>
   12296:	1b5d      	subs	r5, r3, r5
   12298:	2f00      	cmp	r7, #0
   1229a:	da0b      	bge.n	122b4 <_dtoa_r+0x840>
   1229c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1229e:	1bdc      	subs	r4, r3, r7
   122a0:	2300      	movs	r3, #0
   122a2:	e78c      	b.n	121be <_dtoa_r+0x74a>
   122a4:	9b08      	ldr	r3, [sp, #32]
   122a6:	9508      	str	r5, [sp, #32]
   122a8:	1aea      	subs	r2, r5, r3
   122aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   122ac:	2500      	movs	r5, #0
   122ae:	189b      	adds	r3, r3, r2
   122b0:	930f      	str	r3, [sp, #60]	; 0x3c
   122b2:	e7f1      	b.n	12298 <_dtoa_r+0x824>
   122b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   122b6:	003b      	movs	r3, r7
   122b8:	e781      	b.n	121be <_dtoa_r+0x74a>
   122ba:	9d08      	ldr	r5, [sp, #32]
   122bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   122be:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   122c0:	e788      	b.n	121d4 <_dtoa_r+0x760>
   122c2:	9a08      	ldr	r2, [sp, #32]
   122c4:	e7b4      	b.n	12230 <_dtoa_r+0x7bc>
   122c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   122c8:	2500      	movs	r5, #0
   122ca:	2b01      	cmp	r3, #1
   122cc:	ddc7      	ble.n	1225e <_dtoa_r+0x7ea>
   122ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   122d0:	2001      	movs	r0, #1
   122d2:	2b00      	cmp	r3, #0
   122d4:	d00b      	beq.n	122ee <_dtoa_r+0x87a>
   122d6:	9b08      	ldr	r3, [sp, #32]
   122d8:	9a08      	ldr	r2, [sp, #32]
   122da:	691b      	ldr	r3, [r3, #16]
   122dc:	930f      	str	r3, [sp, #60]	; 0x3c
   122de:	3303      	adds	r3, #3
   122e0:	009b      	lsls	r3, r3, #2
   122e2:	18d3      	adds	r3, r2, r3
   122e4:	6858      	ldr	r0, [r3, #4]
   122e6:	f000 fc4d 	bl	12b84 <__hi0bits>
   122ea:	2320      	movs	r3, #32
   122ec:	1a18      	subs	r0, r3, r0
   122ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   122f0:	18c0      	adds	r0, r0, r3
   122f2:	231f      	movs	r3, #31
   122f4:	4018      	ands	r0, r3
   122f6:	d100      	bne.n	122fa <_dtoa_r+0x886>
   122f8:	e0ab      	b.n	12452 <_dtoa_r+0x9de>
   122fa:	3301      	adds	r3, #1
   122fc:	1a1b      	subs	r3, r3, r0
   122fe:	2b04      	cmp	r3, #4
   12300:	dc00      	bgt.n	12304 <_dtoa_r+0x890>
   12302:	e09b      	b.n	1243c <_dtoa_r+0x9c8>
   12304:	231c      	movs	r3, #28
   12306:	1a18      	subs	r0, r3, r0
   12308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1230a:	1824      	adds	r4, r4, r0
   1230c:	181b      	adds	r3, r3, r0
   1230e:	930b      	str	r3, [sp, #44]	; 0x2c
   12310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12312:	181b      	adds	r3, r3, r0
   12314:	930c      	str	r3, [sp, #48]	; 0x30
   12316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12318:	2b00      	cmp	r3, #0
   1231a:	dd05      	ble.n	12328 <_dtoa_r+0x8b4>
   1231c:	001a      	movs	r2, r3
   1231e:	9905      	ldr	r1, [sp, #20]
   12320:	9804      	ldr	r0, [sp, #16]
   12322:	f000 fd63 	bl	12dec <__lshift>
   12326:	9005      	str	r0, [sp, #20]
   12328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1232a:	2b00      	cmp	r3, #0
   1232c:	dd05      	ble.n	1233a <_dtoa_r+0x8c6>
   1232e:	001a      	movs	r2, r3
   12330:	9908      	ldr	r1, [sp, #32]
   12332:	9804      	ldr	r0, [sp, #16]
   12334:	f000 fd5a 	bl	12dec <__lshift>
   12338:	9008      	str	r0, [sp, #32]
   1233a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1233c:	2b00      	cmp	r3, #0
   1233e:	d100      	bne.n	12342 <_dtoa_r+0x8ce>
   12340:	e089      	b.n	12456 <_dtoa_r+0x9e2>
   12342:	9908      	ldr	r1, [sp, #32]
   12344:	9805      	ldr	r0, [sp, #20]
   12346:	f000 fda2 	bl	12e8e <__mcmp>
   1234a:	2800      	cmp	r0, #0
   1234c:	db00      	blt.n	12350 <_dtoa_r+0x8dc>
   1234e:	e082      	b.n	12456 <_dtoa_r+0x9e2>
   12350:	9b03      	ldr	r3, [sp, #12]
   12352:	220a      	movs	r2, #10
   12354:	3b01      	subs	r3, #1
   12356:	9303      	str	r3, [sp, #12]
   12358:	9905      	ldr	r1, [sp, #20]
   1235a:	2300      	movs	r3, #0
   1235c:	9804      	ldr	r0, [sp, #16]
   1235e:	f000 fbd5 	bl	12b0c <__multadd>
   12362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12364:	9005      	str	r0, [sp, #20]
   12366:	2b00      	cmp	r3, #0
   12368:	d100      	bne.n	1236c <_dtoa_r+0x8f8>
   1236a:	e15d      	b.n	12628 <_dtoa_r+0xbb4>
   1236c:	2300      	movs	r3, #0
   1236e:	0031      	movs	r1, r6
   12370:	220a      	movs	r2, #10
   12372:	9804      	ldr	r0, [sp, #16]
   12374:	f000 fbca 	bl	12b0c <__multadd>
   12378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1237a:	0006      	movs	r6, r0
   1237c:	2b00      	cmp	r3, #0
   1237e:	dc02      	bgt.n	12386 <_dtoa_r+0x912>
   12380:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12382:	2b02      	cmp	r3, #2
   12384:	dc6d      	bgt.n	12462 <_dtoa_r+0x9ee>
   12386:	2c00      	cmp	r4, #0
   12388:	dd05      	ble.n	12396 <_dtoa_r+0x922>
   1238a:	0031      	movs	r1, r6
   1238c:	0022      	movs	r2, r4
   1238e:	9804      	ldr	r0, [sp, #16]
   12390:	f000 fd2c 	bl	12dec <__lshift>
   12394:	0006      	movs	r6, r0
   12396:	0030      	movs	r0, r6
   12398:	2d00      	cmp	r5, #0
   1239a:	d011      	beq.n	123c0 <_dtoa_r+0x94c>
   1239c:	6871      	ldr	r1, [r6, #4]
   1239e:	9804      	ldr	r0, [sp, #16]
   123a0:	f000 fb63 	bl	12a6a <_Balloc>
   123a4:	0031      	movs	r1, r6
   123a6:	0004      	movs	r4, r0
   123a8:	6933      	ldr	r3, [r6, #16]
   123aa:	310c      	adds	r1, #12
   123ac:	1c9a      	adds	r2, r3, #2
   123ae:	0092      	lsls	r2, r2, #2
   123b0:	300c      	adds	r0, #12
   123b2:	f7fe fb40 	bl	10a36 <memcpy>
   123b6:	2201      	movs	r2, #1
   123b8:	0021      	movs	r1, r4
   123ba:	9804      	ldr	r0, [sp, #16]
   123bc:	f000 fd16 	bl	12dec <__lshift>
   123c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   123c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   123c4:	3f01      	subs	r7, #1
   123c6:	930b      	str	r3, [sp, #44]	; 0x2c
   123c8:	19db      	adds	r3, r3, r7
   123ca:	0037      	movs	r7, r6
   123cc:	0006      	movs	r6, r0
   123ce:	930f      	str	r3, [sp, #60]	; 0x3c
   123d0:	9908      	ldr	r1, [sp, #32]
   123d2:	9805      	ldr	r0, [sp, #20]
   123d4:	f7ff fac9 	bl	1196a <quorem>
   123d8:	0039      	movs	r1, r7
   123da:	900d      	str	r0, [sp, #52]	; 0x34
   123dc:	0004      	movs	r4, r0
   123de:	9805      	ldr	r0, [sp, #20]
   123e0:	f000 fd55 	bl	12e8e <__mcmp>
   123e4:	0032      	movs	r2, r6
   123e6:	900e      	str	r0, [sp, #56]	; 0x38
   123e8:	9908      	ldr	r1, [sp, #32]
   123ea:	9804      	ldr	r0, [sp, #16]
   123ec:	f000 fd68 	bl	12ec0 <__mdiff>
   123f0:	2301      	movs	r3, #1
   123f2:	930c      	str	r3, [sp, #48]	; 0x30
   123f4:	68c3      	ldr	r3, [r0, #12]
   123f6:	3430      	adds	r4, #48	; 0x30
   123f8:	0005      	movs	r5, r0
   123fa:	2b00      	cmp	r3, #0
   123fc:	d104      	bne.n	12408 <_dtoa_r+0x994>
   123fe:	0001      	movs	r1, r0
   12400:	9805      	ldr	r0, [sp, #20]
   12402:	f000 fd44 	bl	12e8e <__mcmp>
   12406:	900c      	str	r0, [sp, #48]	; 0x30
   12408:	0029      	movs	r1, r5
   1240a:	9804      	ldr	r0, [sp, #16]
   1240c:	f000 fb65 	bl	12ada <_Bfree>
   12410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12412:	9a22      	ldr	r2, [sp, #136]	; 0x88
   12414:	4313      	orrs	r3, r2
   12416:	d000      	beq.n	1241a <_dtoa_r+0x9a6>
   12418:	e089      	b.n	1252e <_dtoa_r+0xaba>
   1241a:	9a06      	ldr	r2, [sp, #24]
   1241c:	3301      	adds	r3, #1
   1241e:	4213      	tst	r3, r2
   12420:	d000      	beq.n	12424 <_dtoa_r+0x9b0>
   12422:	e084      	b.n	1252e <_dtoa_r+0xaba>
   12424:	2c39      	cmp	r4, #57	; 0x39
   12426:	d100      	bne.n	1242a <_dtoa_r+0x9b6>
   12428:	e0a3      	b.n	12572 <_dtoa_r+0xafe>
   1242a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1242c:	2b00      	cmp	r3, #0
   1242e:	dd01      	ble.n	12434 <_dtoa_r+0x9c0>
   12430:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   12432:	3431      	adds	r4, #49	; 0x31
   12434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12436:	1c5d      	adds	r5, r3, #1
   12438:	701c      	strb	r4, [r3, #0]
   1243a:	e027      	b.n	1248c <_dtoa_r+0xa18>
   1243c:	2b04      	cmp	r3, #4
   1243e:	d100      	bne.n	12442 <_dtoa_r+0x9ce>
   12440:	e769      	b.n	12316 <_dtoa_r+0x8a2>
   12442:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12444:	331c      	adds	r3, #28
   12446:	18d2      	adds	r2, r2, r3
   12448:	920b      	str	r2, [sp, #44]	; 0x2c
   1244a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1244c:	18e4      	adds	r4, r4, r3
   1244e:	18d3      	adds	r3, r2, r3
   12450:	e760      	b.n	12314 <_dtoa_r+0x8a0>
   12452:	0003      	movs	r3, r0
   12454:	e7f5      	b.n	12442 <_dtoa_r+0x9ce>
   12456:	2f00      	cmp	r7, #0
   12458:	dc3c      	bgt.n	124d4 <_dtoa_r+0xa60>
   1245a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1245c:	2b02      	cmp	r3, #2
   1245e:	dd39      	ble.n	124d4 <_dtoa_r+0xa60>
   12460:	970d      	str	r7, [sp, #52]	; 0x34
   12462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12464:	2b00      	cmp	r3, #0
   12466:	d10c      	bne.n	12482 <_dtoa_r+0xa0e>
   12468:	9908      	ldr	r1, [sp, #32]
   1246a:	2205      	movs	r2, #5
   1246c:	9804      	ldr	r0, [sp, #16]
   1246e:	f000 fb4d 	bl	12b0c <__multadd>
   12472:	9008      	str	r0, [sp, #32]
   12474:	0001      	movs	r1, r0
   12476:	9805      	ldr	r0, [sp, #20]
   12478:	f000 fd09 	bl	12e8e <__mcmp>
   1247c:	2800      	cmp	r0, #0
   1247e:	dd00      	ble.n	12482 <_dtoa_r+0xa0e>
   12480:	e55a      	b.n	11f38 <_dtoa_r+0x4c4>
   12482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12484:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   12486:	43db      	mvns	r3, r3
   12488:	9303      	str	r3, [sp, #12]
   1248a:	2700      	movs	r7, #0
   1248c:	9908      	ldr	r1, [sp, #32]
   1248e:	9804      	ldr	r0, [sp, #16]
   12490:	f000 fb23 	bl	12ada <_Bfree>
   12494:	2e00      	cmp	r6, #0
   12496:	d100      	bne.n	1249a <_dtoa_r+0xa26>
   12498:	e63f      	b.n	1211a <_dtoa_r+0x6a6>
   1249a:	2f00      	cmp	r7, #0
   1249c:	d005      	beq.n	124aa <_dtoa_r+0xa36>
   1249e:	42b7      	cmp	r7, r6
   124a0:	d003      	beq.n	124aa <_dtoa_r+0xa36>
   124a2:	0039      	movs	r1, r7
   124a4:	9804      	ldr	r0, [sp, #16]
   124a6:	f000 fb18 	bl	12ada <_Bfree>
   124aa:	0031      	movs	r1, r6
   124ac:	9804      	ldr	r0, [sp, #16]
   124ae:	f000 fb14 	bl	12ada <_Bfree>
   124b2:	e632      	b.n	1211a <_dtoa_r+0x6a6>
   124b4:	9508      	str	r5, [sp, #32]
   124b6:	002e      	movs	r6, r5
   124b8:	e7e3      	b.n	12482 <_dtoa_r+0xa0e>
   124ba:	2300      	movs	r3, #0
   124bc:	9308      	str	r3, [sp, #32]
   124be:	001e      	movs	r6, r3
   124c0:	e7df      	b.n	12482 <_dtoa_r+0xa0e>
   124c2:	46c0      	nop			; (mov r8, r8)
   124c4:	40240000 	.word	0x40240000
   124c8:	00000433 	.word	0x00000433
   124cc:	9603      	str	r6, [sp, #12]
   124ce:	9508      	str	r5, [sp, #32]
   124d0:	002e      	movs	r6, r5
   124d2:	e531      	b.n	11f38 <_dtoa_r+0x4c4>
   124d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   124d6:	970d      	str	r7, [sp, #52]	; 0x34
   124d8:	2b00      	cmp	r3, #0
   124da:	d000      	beq.n	124de <_dtoa_r+0xa6a>
   124dc:	e753      	b.n	12386 <_dtoa_r+0x912>
   124de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   124e0:	9908      	ldr	r1, [sp, #32]
   124e2:	9805      	ldr	r0, [sp, #20]
   124e4:	f7ff fa41 	bl	1196a <quorem>
   124e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   124ea:	3030      	adds	r0, #48	; 0x30
   124ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   124ee:	7028      	strb	r0, [r5, #0]
   124f0:	3501      	adds	r5, #1
   124f2:	0004      	movs	r4, r0
   124f4:	1aeb      	subs	r3, r5, r3
   124f6:	429a      	cmp	r2, r3
   124f8:	dc78      	bgt.n	125ec <_dtoa_r+0xb78>
   124fa:	1e15      	subs	r5, r2, #0
   124fc:	dc00      	bgt.n	12500 <_dtoa_r+0xa8c>
   124fe:	2501      	movs	r5, #1
   12500:	2700      	movs	r7, #0
   12502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12504:	195d      	adds	r5, r3, r5
   12506:	9905      	ldr	r1, [sp, #20]
   12508:	2201      	movs	r2, #1
   1250a:	9804      	ldr	r0, [sp, #16]
   1250c:	f000 fc6e 	bl	12dec <__lshift>
   12510:	9908      	ldr	r1, [sp, #32]
   12512:	9005      	str	r0, [sp, #20]
   12514:	f000 fcbb 	bl	12e8e <__mcmp>
   12518:	2800      	cmp	r0, #0
   1251a:	dc2f      	bgt.n	1257c <_dtoa_r+0xb08>
   1251c:	d101      	bne.n	12522 <_dtoa_r+0xaae>
   1251e:	07e3      	lsls	r3, r4, #31
   12520:	d42c      	bmi.n	1257c <_dtoa_r+0xb08>
   12522:	1e6b      	subs	r3, r5, #1
   12524:	781a      	ldrb	r2, [r3, #0]
   12526:	2a30      	cmp	r2, #48	; 0x30
   12528:	d1b0      	bne.n	1248c <_dtoa_r+0xa18>
   1252a:	001d      	movs	r5, r3
   1252c:	e7f9      	b.n	12522 <_dtoa_r+0xaae>
   1252e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12530:	2b00      	cmp	r3, #0
   12532:	db07      	blt.n	12544 <_dtoa_r+0xad0>
   12534:	001d      	movs	r5, r3
   12536:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12538:	431d      	orrs	r5, r3
   1253a:	d126      	bne.n	1258a <_dtoa_r+0xb16>
   1253c:	2301      	movs	r3, #1
   1253e:	9a06      	ldr	r2, [sp, #24]
   12540:	4213      	tst	r3, r2
   12542:	d122      	bne.n	1258a <_dtoa_r+0xb16>
   12544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12546:	2b00      	cmp	r3, #0
   12548:	dc00      	bgt.n	1254c <_dtoa_r+0xad8>
   1254a:	e773      	b.n	12434 <_dtoa_r+0x9c0>
   1254c:	9905      	ldr	r1, [sp, #20]
   1254e:	2201      	movs	r2, #1
   12550:	9804      	ldr	r0, [sp, #16]
   12552:	f000 fc4b 	bl	12dec <__lshift>
   12556:	9908      	ldr	r1, [sp, #32]
   12558:	9005      	str	r0, [sp, #20]
   1255a:	f000 fc98 	bl	12e8e <__mcmp>
   1255e:	2800      	cmp	r0, #0
   12560:	dc04      	bgt.n	1256c <_dtoa_r+0xaf8>
   12562:	d000      	beq.n	12566 <_dtoa_r+0xaf2>
   12564:	e766      	b.n	12434 <_dtoa_r+0x9c0>
   12566:	07e3      	lsls	r3, r4, #31
   12568:	d400      	bmi.n	1256c <_dtoa_r+0xaf8>
   1256a:	e763      	b.n	12434 <_dtoa_r+0x9c0>
   1256c:	2c39      	cmp	r4, #57	; 0x39
   1256e:	d000      	beq.n	12572 <_dtoa_r+0xafe>
   12570:	e75e      	b.n	12430 <_dtoa_r+0x9bc>
   12572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12576:	1c5d      	adds	r5, r3, #1
   12578:	2339      	movs	r3, #57	; 0x39
   1257a:	7013      	strb	r3, [r2, #0]
   1257c:	1e6b      	subs	r3, r5, #1
   1257e:	781a      	ldrb	r2, [r3, #0]
   12580:	2a39      	cmp	r2, #57	; 0x39
   12582:	d03b      	beq.n	125fc <_dtoa_r+0xb88>
   12584:	3201      	adds	r2, #1
   12586:	701a      	strb	r2, [r3, #0]
   12588:	e780      	b.n	1248c <_dtoa_r+0xa18>
   1258a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1258c:	3301      	adds	r3, #1
   1258e:	930d      	str	r3, [sp, #52]	; 0x34
   12590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12592:	2b00      	cmp	r3, #0
   12594:	dd05      	ble.n	125a2 <_dtoa_r+0xb2e>
   12596:	2c39      	cmp	r4, #57	; 0x39
   12598:	d0eb      	beq.n	12572 <_dtoa_r+0xafe>
   1259a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1259c:	3401      	adds	r4, #1
   1259e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   125a0:	e74a      	b.n	12438 <_dtoa_r+0x9c4>
   125a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   125a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   125a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   125a8:	701c      	strb	r4, [r3, #0]
   125aa:	4293      	cmp	r3, r2
   125ac:	d0ab      	beq.n	12506 <_dtoa_r+0xa92>
   125ae:	2300      	movs	r3, #0
   125b0:	220a      	movs	r2, #10
   125b2:	9905      	ldr	r1, [sp, #20]
   125b4:	9804      	ldr	r0, [sp, #16]
   125b6:	f000 faa9 	bl	12b0c <__multadd>
   125ba:	2300      	movs	r3, #0
   125bc:	9005      	str	r0, [sp, #20]
   125be:	220a      	movs	r2, #10
   125c0:	0039      	movs	r1, r7
   125c2:	9804      	ldr	r0, [sp, #16]
   125c4:	42b7      	cmp	r7, r6
   125c6:	d106      	bne.n	125d6 <_dtoa_r+0xb62>
   125c8:	f000 faa0 	bl	12b0c <__multadd>
   125cc:	0007      	movs	r7, r0
   125ce:	0006      	movs	r6, r0
   125d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   125d2:	930b      	str	r3, [sp, #44]	; 0x2c
   125d4:	e6fc      	b.n	123d0 <_dtoa_r+0x95c>
   125d6:	f000 fa99 	bl	12b0c <__multadd>
   125da:	0031      	movs	r1, r6
   125dc:	0007      	movs	r7, r0
   125de:	2300      	movs	r3, #0
   125e0:	220a      	movs	r2, #10
   125e2:	9804      	ldr	r0, [sp, #16]
   125e4:	f000 fa92 	bl	12b0c <__multadd>
   125e8:	0006      	movs	r6, r0
   125ea:	e7f1      	b.n	125d0 <_dtoa_r+0xb5c>
   125ec:	2300      	movs	r3, #0
   125ee:	220a      	movs	r2, #10
   125f0:	9905      	ldr	r1, [sp, #20]
   125f2:	9804      	ldr	r0, [sp, #16]
   125f4:	f000 fa8a 	bl	12b0c <__multadd>
   125f8:	9005      	str	r0, [sp, #20]
   125fa:	e771      	b.n	124e0 <_dtoa_r+0xa6c>
   125fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   125fe:	429a      	cmp	r2, r3
   12600:	d105      	bne.n	1260e <_dtoa_r+0xb9a>
   12602:	9b03      	ldr	r3, [sp, #12]
   12604:	3301      	adds	r3, #1
   12606:	9303      	str	r3, [sp, #12]
   12608:	2331      	movs	r3, #49	; 0x31
   1260a:	7013      	strb	r3, [r2, #0]
   1260c:	e73e      	b.n	1248c <_dtoa_r+0xa18>
   1260e:	001d      	movs	r5, r3
   12610:	e7b4      	b.n	1257c <_dtoa_r+0xb08>
   12612:	4b0a      	ldr	r3, [pc, #40]	; (1263c <_dtoa_r+0xbc8>)
   12614:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12616:	930a      	str	r3, [sp, #40]	; 0x28
   12618:	4b09      	ldr	r3, [pc, #36]	; (12640 <_dtoa_r+0xbcc>)
   1261a:	2a00      	cmp	r2, #0
   1261c:	d001      	beq.n	12622 <_dtoa_r+0xbae>
   1261e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12620:	6013      	str	r3, [r2, #0]
   12622:	980a      	ldr	r0, [sp, #40]	; 0x28
   12624:	b01d      	add	sp, #116	; 0x74
   12626:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1262a:	2b00      	cmp	r3, #0
   1262c:	dd00      	ble.n	12630 <_dtoa_r+0xbbc>
   1262e:	e756      	b.n	124de <_dtoa_r+0xa6a>
   12630:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12632:	2b02      	cmp	r3, #2
   12634:	dc00      	bgt.n	12638 <_dtoa_r+0xbc4>
   12636:	e752      	b.n	124de <_dtoa_r+0xa6a>
   12638:	e713      	b.n	12462 <_dtoa_r+0x9ee>
   1263a:	46c0      	nop			; (mov r8, r8)
   1263c:	000144d8 	.word	0x000144d8
   12640:	000144e0 	.word	0x000144e0

00012644 <__sflush_r>:
   12644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12646:	898a      	ldrh	r2, [r1, #12]
   12648:	0005      	movs	r5, r0
   1264a:	000c      	movs	r4, r1
   1264c:	0713      	lsls	r3, r2, #28
   1264e:	d460      	bmi.n	12712 <__sflush_r+0xce>
   12650:	684b      	ldr	r3, [r1, #4]
   12652:	2b00      	cmp	r3, #0
   12654:	dc04      	bgt.n	12660 <__sflush_r+0x1c>
   12656:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   12658:	2b00      	cmp	r3, #0
   1265a:	dc01      	bgt.n	12660 <__sflush_r+0x1c>
   1265c:	2000      	movs	r0, #0
   1265e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12660:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   12662:	2f00      	cmp	r7, #0
   12664:	d0fa      	beq.n	1265c <__sflush_r+0x18>
   12666:	2300      	movs	r3, #0
   12668:	682e      	ldr	r6, [r5, #0]
   1266a:	602b      	str	r3, [r5, #0]
   1266c:	2380      	movs	r3, #128	; 0x80
   1266e:	015b      	lsls	r3, r3, #5
   12670:	401a      	ands	r2, r3
   12672:	d034      	beq.n	126de <__sflush_r+0x9a>
   12674:	6d60      	ldr	r0, [r4, #84]	; 0x54
   12676:	89a3      	ldrh	r3, [r4, #12]
   12678:	075b      	lsls	r3, r3, #29
   1267a:	d506      	bpl.n	1268a <__sflush_r+0x46>
   1267c:	6863      	ldr	r3, [r4, #4]
   1267e:	1ac0      	subs	r0, r0, r3
   12680:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12682:	2b00      	cmp	r3, #0
   12684:	d001      	beq.n	1268a <__sflush_r+0x46>
   12686:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12688:	1ac0      	subs	r0, r0, r3
   1268a:	0002      	movs	r2, r0
   1268c:	6a21      	ldr	r1, [r4, #32]
   1268e:	2300      	movs	r3, #0
   12690:	0028      	movs	r0, r5
   12692:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   12694:	47b8      	blx	r7
   12696:	89a1      	ldrh	r1, [r4, #12]
   12698:	1c43      	adds	r3, r0, #1
   1269a:	d106      	bne.n	126aa <__sflush_r+0x66>
   1269c:	682b      	ldr	r3, [r5, #0]
   1269e:	2b1d      	cmp	r3, #29
   126a0:	d831      	bhi.n	12706 <__sflush_r+0xc2>
   126a2:	4a2c      	ldr	r2, [pc, #176]	; (12754 <__sflush_r+0x110>)
   126a4:	40da      	lsrs	r2, r3
   126a6:	07d3      	lsls	r3, r2, #31
   126a8:	d52d      	bpl.n	12706 <__sflush_r+0xc2>
   126aa:	2300      	movs	r3, #0
   126ac:	6063      	str	r3, [r4, #4]
   126ae:	6923      	ldr	r3, [r4, #16]
   126b0:	6023      	str	r3, [r4, #0]
   126b2:	04cb      	lsls	r3, r1, #19
   126b4:	d505      	bpl.n	126c2 <__sflush_r+0x7e>
   126b6:	1c43      	adds	r3, r0, #1
   126b8:	d102      	bne.n	126c0 <__sflush_r+0x7c>
   126ba:	682b      	ldr	r3, [r5, #0]
   126bc:	2b00      	cmp	r3, #0
   126be:	d100      	bne.n	126c2 <__sflush_r+0x7e>
   126c0:	6560      	str	r0, [r4, #84]	; 0x54
   126c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   126c4:	602e      	str	r6, [r5, #0]
   126c6:	2900      	cmp	r1, #0
   126c8:	d0c8      	beq.n	1265c <__sflush_r+0x18>
   126ca:	0023      	movs	r3, r4
   126cc:	3344      	adds	r3, #68	; 0x44
   126ce:	4299      	cmp	r1, r3
   126d0:	d002      	beq.n	126d8 <__sflush_r+0x94>
   126d2:	0028      	movs	r0, r5
   126d4:	f7fe f9c0 	bl	10a58 <_free_r>
   126d8:	2000      	movs	r0, #0
   126da:	6360      	str	r0, [r4, #52]	; 0x34
   126dc:	e7bf      	b.n	1265e <__sflush_r+0x1a>
   126de:	2301      	movs	r3, #1
   126e0:	6a21      	ldr	r1, [r4, #32]
   126e2:	0028      	movs	r0, r5
   126e4:	47b8      	blx	r7
   126e6:	1c43      	adds	r3, r0, #1
   126e8:	d1c5      	bne.n	12676 <__sflush_r+0x32>
   126ea:	682b      	ldr	r3, [r5, #0]
   126ec:	2b00      	cmp	r3, #0
   126ee:	d0c2      	beq.n	12676 <__sflush_r+0x32>
   126f0:	2b1d      	cmp	r3, #29
   126f2:	d001      	beq.n	126f8 <__sflush_r+0xb4>
   126f4:	2b16      	cmp	r3, #22
   126f6:	d101      	bne.n	126fc <__sflush_r+0xb8>
   126f8:	602e      	str	r6, [r5, #0]
   126fa:	e7af      	b.n	1265c <__sflush_r+0x18>
   126fc:	2340      	movs	r3, #64	; 0x40
   126fe:	89a2      	ldrh	r2, [r4, #12]
   12700:	4313      	orrs	r3, r2
   12702:	81a3      	strh	r3, [r4, #12]
   12704:	e7ab      	b.n	1265e <__sflush_r+0x1a>
   12706:	2340      	movs	r3, #64	; 0x40
   12708:	430b      	orrs	r3, r1
   1270a:	2001      	movs	r0, #1
   1270c:	81a3      	strh	r3, [r4, #12]
   1270e:	4240      	negs	r0, r0
   12710:	e7a5      	b.n	1265e <__sflush_r+0x1a>
   12712:	690f      	ldr	r7, [r1, #16]
   12714:	2f00      	cmp	r7, #0
   12716:	d0a1      	beq.n	1265c <__sflush_r+0x18>
   12718:	680b      	ldr	r3, [r1, #0]
   1271a:	600f      	str	r7, [r1, #0]
   1271c:	1bdb      	subs	r3, r3, r7
   1271e:	9301      	str	r3, [sp, #4]
   12720:	2300      	movs	r3, #0
   12722:	0792      	lsls	r2, r2, #30
   12724:	d100      	bne.n	12728 <__sflush_r+0xe4>
   12726:	694b      	ldr	r3, [r1, #20]
   12728:	60a3      	str	r3, [r4, #8]
   1272a:	9b01      	ldr	r3, [sp, #4]
   1272c:	2b00      	cmp	r3, #0
   1272e:	dc00      	bgt.n	12732 <__sflush_r+0xee>
   12730:	e794      	b.n	1265c <__sflush_r+0x18>
   12732:	9b01      	ldr	r3, [sp, #4]
   12734:	003a      	movs	r2, r7
   12736:	6a21      	ldr	r1, [r4, #32]
   12738:	0028      	movs	r0, r5
   1273a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1273c:	47b0      	blx	r6
   1273e:	2800      	cmp	r0, #0
   12740:	dc03      	bgt.n	1274a <__sflush_r+0x106>
   12742:	2340      	movs	r3, #64	; 0x40
   12744:	89a2      	ldrh	r2, [r4, #12]
   12746:	4313      	orrs	r3, r2
   12748:	e7df      	b.n	1270a <__sflush_r+0xc6>
   1274a:	9b01      	ldr	r3, [sp, #4]
   1274c:	183f      	adds	r7, r7, r0
   1274e:	1a1b      	subs	r3, r3, r0
   12750:	9301      	str	r3, [sp, #4]
   12752:	e7ea      	b.n	1272a <__sflush_r+0xe6>
   12754:	20400001 	.word	0x20400001

00012758 <_fflush_r>:
   12758:	690b      	ldr	r3, [r1, #16]
   1275a:	b570      	push	{r4, r5, r6, lr}
   1275c:	0005      	movs	r5, r0
   1275e:	000c      	movs	r4, r1
   12760:	2b00      	cmp	r3, #0
   12762:	d101      	bne.n	12768 <_fflush_r+0x10>
   12764:	2000      	movs	r0, #0
   12766:	bd70      	pop	{r4, r5, r6, pc}
   12768:	2800      	cmp	r0, #0
   1276a:	d004      	beq.n	12776 <_fflush_r+0x1e>
   1276c:	6983      	ldr	r3, [r0, #24]
   1276e:	2b00      	cmp	r3, #0
   12770:	d101      	bne.n	12776 <_fflush_r+0x1e>
   12772:	f000 f85f 	bl	12834 <__sinit>
   12776:	4b0b      	ldr	r3, [pc, #44]	; (127a4 <_fflush_r+0x4c>)
   12778:	429c      	cmp	r4, r3
   1277a:	d109      	bne.n	12790 <_fflush_r+0x38>
   1277c:	686c      	ldr	r4, [r5, #4]
   1277e:	220c      	movs	r2, #12
   12780:	5ea3      	ldrsh	r3, [r4, r2]
   12782:	2b00      	cmp	r3, #0
   12784:	d0ee      	beq.n	12764 <_fflush_r+0xc>
   12786:	0021      	movs	r1, r4
   12788:	0028      	movs	r0, r5
   1278a:	f7ff ff5b 	bl	12644 <__sflush_r>
   1278e:	e7ea      	b.n	12766 <_fflush_r+0xe>
   12790:	4b05      	ldr	r3, [pc, #20]	; (127a8 <_fflush_r+0x50>)
   12792:	429c      	cmp	r4, r3
   12794:	d101      	bne.n	1279a <_fflush_r+0x42>
   12796:	68ac      	ldr	r4, [r5, #8]
   12798:	e7f1      	b.n	1277e <_fflush_r+0x26>
   1279a:	4b04      	ldr	r3, [pc, #16]	; (127ac <_fflush_r+0x54>)
   1279c:	429c      	cmp	r4, r3
   1279e:	d1ee      	bne.n	1277e <_fflush_r+0x26>
   127a0:	68ec      	ldr	r4, [r5, #12]
   127a2:	e7ec      	b.n	1277e <_fflush_r+0x26>
   127a4:	00014508 	.word	0x00014508
   127a8:	00014528 	.word	0x00014528
   127ac:	000144e8 	.word	0x000144e8

000127b0 <_cleanup_r>:
   127b0:	b510      	push	{r4, lr}
   127b2:	4902      	ldr	r1, [pc, #8]	; (127bc <_cleanup_r+0xc>)
   127b4:	f000 f8b2 	bl	1291c <_fwalk_reent>
   127b8:	bd10      	pop	{r4, pc}
   127ba:	46c0      	nop			; (mov r8, r8)
   127bc:	00012759 	.word	0x00012759

000127c0 <std.isra.0>:
   127c0:	2300      	movs	r3, #0
   127c2:	b510      	push	{r4, lr}
   127c4:	0004      	movs	r4, r0
   127c6:	6003      	str	r3, [r0, #0]
   127c8:	6043      	str	r3, [r0, #4]
   127ca:	6083      	str	r3, [r0, #8]
   127cc:	8181      	strh	r1, [r0, #12]
   127ce:	6643      	str	r3, [r0, #100]	; 0x64
   127d0:	81c2      	strh	r2, [r0, #14]
   127d2:	6103      	str	r3, [r0, #16]
   127d4:	6143      	str	r3, [r0, #20]
   127d6:	6183      	str	r3, [r0, #24]
   127d8:	0019      	movs	r1, r3
   127da:	2208      	movs	r2, #8
   127dc:	305c      	adds	r0, #92	; 0x5c
   127de:	f7fe f933 	bl	10a48 <memset>
   127e2:	4b05      	ldr	r3, [pc, #20]	; (127f8 <std.isra.0+0x38>)
   127e4:	6224      	str	r4, [r4, #32]
   127e6:	6263      	str	r3, [r4, #36]	; 0x24
   127e8:	4b04      	ldr	r3, [pc, #16]	; (127fc <std.isra.0+0x3c>)
   127ea:	62a3      	str	r3, [r4, #40]	; 0x28
   127ec:	4b04      	ldr	r3, [pc, #16]	; (12800 <std.isra.0+0x40>)
   127ee:	62e3      	str	r3, [r4, #44]	; 0x2c
   127f0:	4b04      	ldr	r3, [pc, #16]	; (12804 <std.isra.0+0x44>)
   127f2:	6323      	str	r3, [r4, #48]	; 0x30
   127f4:	bd10      	pop	{r4, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	0001312d 	.word	0x0001312d
   127fc:	00013155 	.word	0x00013155
   12800:	0001318d 	.word	0x0001318d
   12804:	000131b9 	.word	0x000131b9

00012808 <__sfmoreglue>:
   12808:	b570      	push	{r4, r5, r6, lr}
   1280a:	2568      	movs	r5, #104	; 0x68
   1280c:	1e4a      	subs	r2, r1, #1
   1280e:	4355      	muls	r5, r2
   12810:	000e      	movs	r6, r1
   12812:	0029      	movs	r1, r5
   12814:	3174      	adds	r1, #116	; 0x74
   12816:	f7fe f969 	bl	10aec <_malloc_r>
   1281a:	1e04      	subs	r4, r0, #0
   1281c:	d008      	beq.n	12830 <__sfmoreglue+0x28>
   1281e:	2100      	movs	r1, #0
   12820:	002a      	movs	r2, r5
   12822:	6001      	str	r1, [r0, #0]
   12824:	6046      	str	r6, [r0, #4]
   12826:	300c      	adds	r0, #12
   12828:	60a0      	str	r0, [r4, #8]
   1282a:	3268      	adds	r2, #104	; 0x68
   1282c:	f7fe f90c 	bl	10a48 <memset>
   12830:	0020      	movs	r0, r4
   12832:	bd70      	pop	{r4, r5, r6, pc}

00012834 <__sinit>:
   12834:	6983      	ldr	r3, [r0, #24]
   12836:	b513      	push	{r0, r1, r4, lr}
   12838:	0004      	movs	r4, r0
   1283a:	2b00      	cmp	r3, #0
   1283c:	d128      	bne.n	12890 <__sinit+0x5c>
   1283e:	6483      	str	r3, [r0, #72]	; 0x48
   12840:	64c3      	str	r3, [r0, #76]	; 0x4c
   12842:	6503      	str	r3, [r0, #80]	; 0x50
   12844:	4b13      	ldr	r3, [pc, #76]	; (12894 <__sinit+0x60>)
   12846:	4a14      	ldr	r2, [pc, #80]	; (12898 <__sinit+0x64>)
   12848:	681b      	ldr	r3, [r3, #0]
   1284a:	6282      	str	r2, [r0, #40]	; 0x28
   1284c:	9301      	str	r3, [sp, #4]
   1284e:	4298      	cmp	r0, r3
   12850:	d101      	bne.n	12856 <__sinit+0x22>
   12852:	2301      	movs	r3, #1
   12854:	6183      	str	r3, [r0, #24]
   12856:	0020      	movs	r0, r4
   12858:	f000 f820 	bl	1289c <__sfp>
   1285c:	6060      	str	r0, [r4, #4]
   1285e:	0020      	movs	r0, r4
   12860:	f000 f81c 	bl	1289c <__sfp>
   12864:	60a0      	str	r0, [r4, #8]
   12866:	0020      	movs	r0, r4
   12868:	f000 f818 	bl	1289c <__sfp>
   1286c:	2200      	movs	r2, #0
   1286e:	60e0      	str	r0, [r4, #12]
   12870:	2104      	movs	r1, #4
   12872:	6860      	ldr	r0, [r4, #4]
   12874:	f7ff ffa4 	bl	127c0 <std.isra.0>
   12878:	2201      	movs	r2, #1
   1287a:	2109      	movs	r1, #9
   1287c:	68a0      	ldr	r0, [r4, #8]
   1287e:	f7ff ff9f 	bl	127c0 <std.isra.0>
   12882:	2202      	movs	r2, #2
   12884:	2112      	movs	r1, #18
   12886:	68e0      	ldr	r0, [r4, #12]
   12888:	f7ff ff9a 	bl	127c0 <std.isra.0>
   1288c:	2301      	movs	r3, #1
   1288e:	61a3      	str	r3, [r4, #24]
   12890:	bd13      	pop	{r0, r1, r4, pc}
   12892:	46c0      	nop			; (mov r8, r8)
   12894:	00014384 	.word	0x00014384
   12898:	000127b1 	.word	0x000127b1

0001289c <__sfp>:
   1289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1289e:	4b1e      	ldr	r3, [pc, #120]	; (12918 <__sfp+0x7c>)
   128a0:	0007      	movs	r7, r0
   128a2:	681e      	ldr	r6, [r3, #0]
   128a4:	69b3      	ldr	r3, [r6, #24]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d102      	bne.n	128b0 <__sfp+0x14>
   128aa:	0030      	movs	r0, r6
   128ac:	f7ff ffc2 	bl	12834 <__sinit>
   128b0:	3648      	adds	r6, #72	; 0x48
   128b2:	68b4      	ldr	r4, [r6, #8]
   128b4:	6873      	ldr	r3, [r6, #4]
   128b6:	3b01      	subs	r3, #1
   128b8:	d504      	bpl.n	128c4 <__sfp+0x28>
   128ba:	6833      	ldr	r3, [r6, #0]
   128bc:	2b00      	cmp	r3, #0
   128be:	d007      	beq.n	128d0 <__sfp+0x34>
   128c0:	6836      	ldr	r6, [r6, #0]
   128c2:	e7f6      	b.n	128b2 <__sfp+0x16>
   128c4:	220c      	movs	r2, #12
   128c6:	5ea5      	ldrsh	r5, [r4, r2]
   128c8:	2d00      	cmp	r5, #0
   128ca:	d00d      	beq.n	128e8 <__sfp+0x4c>
   128cc:	3468      	adds	r4, #104	; 0x68
   128ce:	e7f2      	b.n	128b6 <__sfp+0x1a>
   128d0:	2104      	movs	r1, #4
   128d2:	0038      	movs	r0, r7
   128d4:	f7ff ff98 	bl	12808 <__sfmoreglue>
   128d8:	6030      	str	r0, [r6, #0]
   128da:	2800      	cmp	r0, #0
   128dc:	d1f0      	bne.n	128c0 <__sfp+0x24>
   128de:	230c      	movs	r3, #12
   128e0:	0004      	movs	r4, r0
   128e2:	603b      	str	r3, [r7, #0]
   128e4:	0020      	movs	r0, r4
   128e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   128e8:	2301      	movs	r3, #1
   128ea:	0020      	movs	r0, r4
   128ec:	425b      	negs	r3, r3
   128ee:	81e3      	strh	r3, [r4, #14]
   128f0:	3302      	adds	r3, #2
   128f2:	81a3      	strh	r3, [r4, #12]
   128f4:	6665      	str	r5, [r4, #100]	; 0x64
   128f6:	6025      	str	r5, [r4, #0]
   128f8:	60a5      	str	r5, [r4, #8]
   128fa:	6065      	str	r5, [r4, #4]
   128fc:	6125      	str	r5, [r4, #16]
   128fe:	6165      	str	r5, [r4, #20]
   12900:	61a5      	str	r5, [r4, #24]
   12902:	2208      	movs	r2, #8
   12904:	0029      	movs	r1, r5
   12906:	305c      	adds	r0, #92	; 0x5c
   12908:	f7fe f89e 	bl	10a48 <memset>
   1290c:	6365      	str	r5, [r4, #52]	; 0x34
   1290e:	63a5      	str	r5, [r4, #56]	; 0x38
   12910:	64a5      	str	r5, [r4, #72]	; 0x48
   12912:	64e5      	str	r5, [r4, #76]	; 0x4c
   12914:	e7e6      	b.n	128e4 <__sfp+0x48>
   12916:	46c0      	nop			; (mov r8, r8)
   12918:	00014384 	.word	0x00014384

0001291c <_fwalk_reent>:
   1291c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1291e:	0004      	movs	r4, r0
   12920:	0007      	movs	r7, r0
   12922:	2600      	movs	r6, #0
   12924:	9101      	str	r1, [sp, #4]
   12926:	3448      	adds	r4, #72	; 0x48
   12928:	2c00      	cmp	r4, #0
   1292a:	d101      	bne.n	12930 <_fwalk_reent+0x14>
   1292c:	0030      	movs	r0, r6
   1292e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12930:	6863      	ldr	r3, [r4, #4]
   12932:	68a5      	ldr	r5, [r4, #8]
   12934:	9300      	str	r3, [sp, #0]
   12936:	9b00      	ldr	r3, [sp, #0]
   12938:	3b01      	subs	r3, #1
   1293a:	9300      	str	r3, [sp, #0]
   1293c:	d501      	bpl.n	12942 <_fwalk_reent+0x26>
   1293e:	6824      	ldr	r4, [r4, #0]
   12940:	e7f2      	b.n	12928 <_fwalk_reent+0xc>
   12942:	89ab      	ldrh	r3, [r5, #12]
   12944:	2b01      	cmp	r3, #1
   12946:	d908      	bls.n	1295a <_fwalk_reent+0x3e>
   12948:	220e      	movs	r2, #14
   1294a:	5eab      	ldrsh	r3, [r5, r2]
   1294c:	3301      	adds	r3, #1
   1294e:	d004      	beq.n	1295a <_fwalk_reent+0x3e>
   12950:	0029      	movs	r1, r5
   12952:	0038      	movs	r0, r7
   12954:	9b01      	ldr	r3, [sp, #4]
   12956:	4798      	blx	r3
   12958:	4306      	orrs	r6, r0
   1295a:	3568      	adds	r5, #104	; 0x68
   1295c:	e7eb      	b.n	12936 <_fwalk_reent+0x1a>
	...

00012960 <_localeconv_r>:
   12960:	4b03      	ldr	r3, [pc, #12]	; (12970 <_localeconv_r+0x10>)
   12962:	681b      	ldr	r3, [r3, #0]
   12964:	6a18      	ldr	r0, [r3, #32]
   12966:	2800      	cmp	r0, #0
   12968:	d100      	bne.n	1296c <_localeconv_r+0xc>
   1296a:	4802      	ldr	r0, [pc, #8]	; (12974 <_localeconv_r+0x14>)
   1296c:	30f0      	adds	r0, #240	; 0xf0
   1296e:	4770      	bx	lr
   12970:	200000a4 	.word	0x200000a4
   12974:	20000108 	.word	0x20000108

00012978 <__swhatbuf_r>:
   12978:	b570      	push	{r4, r5, r6, lr}
   1297a:	000e      	movs	r6, r1
   1297c:	001d      	movs	r5, r3
   1297e:	230e      	movs	r3, #14
   12980:	5ec9      	ldrsh	r1, [r1, r3]
   12982:	b090      	sub	sp, #64	; 0x40
   12984:	0014      	movs	r4, r2
   12986:	2900      	cmp	r1, #0
   12988:	da07      	bge.n	1299a <__swhatbuf_r+0x22>
   1298a:	2300      	movs	r3, #0
   1298c:	602b      	str	r3, [r5, #0]
   1298e:	89b3      	ldrh	r3, [r6, #12]
   12990:	061b      	lsls	r3, r3, #24
   12992:	d411      	bmi.n	129b8 <__swhatbuf_r+0x40>
   12994:	2380      	movs	r3, #128	; 0x80
   12996:	00db      	lsls	r3, r3, #3
   12998:	e00f      	b.n	129ba <__swhatbuf_r+0x42>
   1299a:	aa01      	add	r2, sp, #4
   1299c:	f000 fc38 	bl	13210 <_fstat_r>
   129a0:	2800      	cmp	r0, #0
   129a2:	dbf2      	blt.n	1298a <__swhatbuf_r+0x12>
   129a4:	22f0      	movs	r2, #240	; 0xf0
   129a6:	9b02      	ldr	r3, [sp, #8]
   129a8:	0212      	lsls	r2, r2, #8
   129aa:	4013      	ands	r3, r2
   129ac:	4a05      	ldr	r2, [pc, #20]	; (129c4 <__swhatbuf_r+0x4c>)
   129ae:	189b      	adds	r3, r3, r2
   129b0:	425a      	negs	r2, r3
   129b2:	4153      	adcs	r3, r2
   129b4:	602b      	str	r3, [r5, #0]
   129b6:	e7ed      	b.n	12994 <__swhatbuf_r+0x1c>
   129b8:	2340      	movs	r3, #64	; 0x40
   129ba:	2000      	movs	r0, #0
   129bc:	6023      	str	r3, [r4, #0]
   129be:	b010      	add	sp, #64	; 0x40
   129c0:	bd70      	pop	{r4, r5, r6, pc}
   129c2:	46c0      	nop			; (mov r8, r8)
   129c4:	ffffe000 	.word	0xffffe000

000129c8 <__smakebuf_r>:
   129c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   129ca:	2602      	movs	r6, #2
   129cc:	898b      	ldrh	r3, [r1, #12]
   129ce:	0005      	movs	r5, r0
   129d0:	000c      	movs	r4, r1
   129d2:	4233      	tst	r3, r6
   129d4:	d006      	beq.n	129e4 <__smakebuf_r+0x1c>
   129d6:	0023      	movs	r3, r4
   129d8:	3347      	adds	r3, #71	; 0x47
   129da:	6023      	str	r3, [r4, #0]
   129dc:	6123      	str	r3, [r4, #16]
   129de:	2301      	movs	r3, #1
   129e0:	6163      	str	r3, [r4, #20]
   129e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   129e4:	ab01      	add	r3, sp, #4
   129e6:	466a      	mov	r2, sp
   129e8:	f7ff ffc6 	bl	12978 <__swhatbuf_r>
   129ec:	9900      	ldr	r1, [sp, #0]
   129ee:	0007      	movs	r7, r0
   129f0:	0028      	movs	r0, r5
   129f2:	f7fe f87b 	bl	10aec <_malloc_r>
   129f6:	2800      	cmp	r0, #0
   129f8:	d108      	bne.n	12a0c <__smakebuf_r+0x44>
   129fa:	220c      	movs	r2, #12
   129fc:	5ea3      	ldrsh	r3, [r4, r2]
   129fe:	059a      	lsls	r2, r3, #22
   12a00:	d4ef      	bmi.n	129e2 <__smakebuf_r+0x1a>
   12a02:	2203      	movs	r2, #3
   12a04:	4393      	bics	r3, r2
   12a06:	431e      	orrs	r6, r3
   12a08:	81a6      	strh	r6, [r4, #12]
   12a0a:	e7e4      	b.n	129d6 <__smakebuf_r+0xe>
   12a0c:	4b0f      	ldr	r3, [pc, #60]	; (12a4c <__smakebuf_r+0x84>)
   12a0e:	62ab      	str	r3, [r5, #40]	; 0x28
   12a10:	2380      	movs	r3, #128	; 0x80
   12a12:	89a2      	ldrh	r2, [r4, #12]
   12a14:	6020      	str	r0, [r4, #0]
   12a16:	4313      	orrs	r3, r2
   12a18:	81a3      	strh	r3, [r4, #12]
   12a1a:	9b00      	ldr	r3, [sp, #0]
   12a1c:	6120      	str	r0, [r4, #16]
   12a1e:	6163      	str	r3, [r4, #20]
   12a20:	9b01      	ldr	r3, [sp, #4]
   12a22:	2b00      	cmp	r3, #0
   12a24:	d00d      	beq.n	12a42 <__smakebuf_r+0x7a>
   12a26:	230e      	movs	r3, #14
   12a28:	5ee1      	ldrsh	r1, [r4, r3]
   12a2a:	0028      	movs	r0, r5
   12a2c:	f000 fc02 	bl	13234 <_isatty_r>
   12a30:	2800      	cmp	r0, #0
   12a32:	d006      	beq.n	12a42 <__smakebuf_r+0x7a>
   12a34:	2203      	movs	r2, #3
   12a36:	89a3      	ldrh	r3, [r4, #12]
   12a38:	4393      	bics	r3, r2
   12a3a:	001a      	movs	r2, r3
   12a3c:	2301      	movs	r3, #1
   12a3e:	4313      	orrs	r3, r2
   12a40:	81a3      	strh	r3, [r4, #12]
   12a42:	89a0      	ldrh	r0, [r4, #12]
   12a44:	4338      	orrs	r0, r7
   12a46:	81a0      	strh	r0, [r4, #12]
   12a48:	e7cb      	b.n	129e2 <__smakebuf_r+0x1a>
   12a4a:	46c0      	nop			; (mov r8, r8)
   12a4c:	000127b1 	.word	0x000127b1

00012a50 <memchr>:
   12a50:	b2c9      	uxtb	r1, r1
   12a52:	1882      	adds	r2, r0, r2
   12a54:	4290      	cmp	r0, r2
   12a56:	d101      	bne.n	12a5c <memchr+0xc>
   12a58:	2000      	movs	r0, #0
   12a5a:	4770      	bx	lr
   12a5c:	7803      	ldrb	r3, [r0, #0]
   12a5e:	428b      	cmp	r3, r1
   12a60:	d0fb      	beq.n	12a5a <memchr+0xa>
   12a62:	3001      	adds	r0, #1
   12a64:	e7f6      	b.n	12a54 <memchr+0x4>

00012a66 <__malloc_lock>:
   12a66:	4770      	bx	lr

00012a68 <__malloc_unlock>:
   12a68:	4770      	bx	lr

00012a6a <_Balloc>:
   12a6a:	b570      	push	{r4, r5, r6, lr}
   12a6c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   12a6e:	0004      	movs	r4, r0
   12a70:	000d      	movs	r5, r1
   12a72:	2e00      	cmp	r6, #0
   12a74:	d107      	bne.n	12a86 <_Balloc+0x1c>
   12a76:	2010      	movs	r0, #16
   12a78:	f7fd ffa8 	bl	109cc <malloc>
   12a7c:	6260      	str	r0, [r4, #36]	; 0x24
   12a7e:	6046      	str	r6, [r0, #4]
   12a80:	6086      	str	r6, [r0, #8]
   12a82:	6006      	str	r6, [r0, #0]
   12a84:	60c6      	str	r6, [r0, #12]
   12a86:	6a66      	ldr	r6, [r4, #36]	; 0x24
   12a88:	68f3      	ldr	r3, [r6, #12]
   12a8a:	2b00      	cmp	r3, #0
   12a8c:	d013      	beq.n	12ab6 <_Balloc+0x4c>
   12a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12a90:	00aa      	lsls	r2, r5, #2
   12a92:	68db      	ldr	r3, [r3, #12]
   12a94:	189b      	adds	r3, r3, r2
   12a96:	6818      	ldr	r0, [r3, #0]
   12a98:	2800      	cmp	r0, #0
   12a9a:	d118      	bne.n	12ace <_Balloc+0x64>
   12a9c:	2101      	movs	r1, #1
   12a9e:	000e      	movs	r6, r1
   12aa0:	40ae      	lsls	r6, r5
   12aa2:	1d72      	adds	r2, r6, #5
   12aa4:	0092      	lsls	r2, r2, #2
   12aa6:	0020      	movs	r0, r4
   12aa8:	f000 fac2 	bl	13030 <_calloc_r>
   12aac:	2800      	cmp	r0, #0
   12aae:	d00c      	beq.n	12aca <_Balloc+0x60>
   12ab0:	6045      	str	r5, [r0, #4]
   12ab2:	6086      	str	r6, [r0, #8]
   12ab4:	e00d      	b.n	12ad2 <_Balloc+0x68>
   12ab6:	2221      	movs	r2, #33	; 0x21
   12ab8:	2104      	movs	r1, #4
   12aba:	0020      	movs	r0, r4
   12abc:	f000 fab8 	bl	13030 <_calloc_r>
   12ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12ac2:	60f0      	str	r0, [r6, #12]
   12ac4:	68db      	ldr	r3, [r3, #12]
   12ac6:	2b00      	cmp	r3, #0
   12ac8:	d1e1      	bne.n	12a8e <_Balloc+0x24>
   12aca:	2000      	movs	r0, #0
   12acc:	bd70      	pop	{r4, r5, r6, pc}
   12ace:	6802      	ldr	r2, [r0, #0]
   12ad0:	601a      	str	r2, [r3, #0]
   12ad2:	2300      	movs	r3, #0
   12ad4:	6103      	str	r3, [r0, #16]
   12ad6:	60c3      	str	r3, [r0, #12]
   12ad8:	e7f8      	b.n	12acc <_Balloc+0x62>

00012ada <_Bfree>:
   12ada:	b570      	push	{r4, r5, r6, lr}
   12adc:	6a44      	ldr	r4, [r0, #36]	; 0x24
   12ade:	0006      	movs	r6, r0
   12ae0:	000d      	movs	r5, r1
   12ae2:	2c00      	cmp	r4, #0
   12ae4:	d107      	bne.n	12af6 <_Bfree+0x1c>
   12ae6:	2010      	movs	r0, #16
   12ae8:	f7fd ff70 	bl	109cc <malloc>
   12aec:	6270      	str	r0, [r6, #36]	; 0x24
   12aee:	6044      	str	r4, [r0, #4]
   12af0:	6084      	str	r4, [r0, #8]
   12af2:	6004      	str	r4, [r0, #0]
   12af4:	60c4      	str	r4, [r0, #12]
   12af6:	2d00      	cmp	r5, #0
   12af8:	d007      	beq.n	12b0a <_Bfree+0x30>
   12afa:	6a73      	ldr	r3, [r6, #36]	; 0x24
   12afc:	686a      	ldr	r2, [r5, #4]
   12afe:	68db      	ldr	r3, [r3, #12]
   12b00:	0092      	lsls	r2, r2, #2
   12b02:	189b      	adds	r3, r3, r2
   12b04:	681a      	ldr	r2, [r3, #0]
   12b06:	602a      	str	r2, [r5, #0]
   12b08:	601d      	str	r5, [r3, #0]
   12b0a:	bd70      	pop	{r4, r5, r6, pc}

00012b0c <__multadd>:
   12b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b0e:	001e      	movs	r6, r3
   12b10:	2314      	movs	r3, #20
   12b12:	469c      	mov	ip, r3
   12b14:	0007      	movs	r7, r0
   12b16:	000c      	movs	r4, r1
   12b18:	2000      	movs	r0, #0
   12b1a:	690d      	ldr	r5, [r1, #16]
   12b1c:	448c      	add	ip, r1
   12b1e:	4663      	mov	r3, ip
   12b20:	8819      	ldrh	r1, [r3, #0]
   12b22:	681b      	ldr	r3, [r3, #0]
   12b24:	4351      	muls	r1, r2
   12b26:	0c1b      	lsrs	r3, r3, #16
   12b28:	4353      	muls	r3, r2
   12b2a:	1989      	adds	r1, r1, r6
   12b2c:	0c0e      	lsrs	r6, r1, #16
   12b2e:	199b      	adds	r3, r3, r6
   12b30:	b289      	uxth	r1, r1
   12b32:	0c1e      	lsrs	r6, r3, #16
   12b34:	041b      	lsls	r3, r3, #16
   12b36:	185b      	adds	r3, r3, r1
   12b38:	4661      	mov	r1, ip
   12b3a:	3001      	adds	r0, #1
   12b3c:	c108      	stmia	r1!, {r3}
   12b3e:	468c      	mov	ip, r1
   12b40:	4285      	cmp	r5, r0
   12b42:	dcec      	bgt.n	12b1e <__multadd+0x12>
   12b44:	2e00      	cmp	r6, #0
   12b46:	d01b      	beq.n	12b80 <__multadd+0x74>
   12b48:	68a3      	ldr	r3, [r4, #8]
   12b4a:	429d      	cmp	r5, r3
   12b4c:	db12      	blt.n	12b74 <__multadd+0x68>
   12b4e:	6863      	ldr	r3, [r4, #4]
   12b50:	0038      	movs	r0, r7
   12b52:	1c59      	adds	r1, r3, #1
   12b54:	f7ff ff89 	bl	12a6a <_Balloc>
   12b58:	0021      	movs	r1, r4
   12b5a:	6923      	ldr	r3, [r4, #16]
   12b5c:	9001      	str	r0, [sp, #4]
   12b5e:	1c9a      	adds	r2, r3, #2
   12b60:	0092      	lsls	r2, r2, #2
   12b62:	310c      	adds	r1, #12
   12b64:	300c      	adds	r0, #12
   12b66:	f7fd ff66 	bl	10a36 <memcpy>
   12b6a:	0021      	movs	r1, r4
   12b6c:	0038      	movs	r0, r7
   12b6e:	f7ff ffb4 	bl	12ada <_Bfree>
   12b72:	9c01      	ldr	r4, [sp, #4]
   12b74:	1d2b      	adds	r3, r5, #4
   12b76:	009b      	lsls	r3, r3, #2
   12b78:	18e3      	adds	r3, r4, r3
   12b7a:	3501      	adds	r5, #1
   12b7c:	605e      	str	r6, [r3, #4]
   12b7e:	6125      	str	r5, [r4, #16]
   12b80:	0020      	movs	r0, r4
   12b82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00012b84 <__hi0bits>:
   12b84:	0003      	movs	r3, r0
   12b86:	0c02      	lsrs	r2, r0, #16
   12b88:	2000      	movs	r0, #0
   12b8a:	4282      	cmp	r2, r0
   12b8c:	d101      	bne.n	12b92 <__hi0bits+0xe>
   12b8e:	041b      	lsls	r3, r3, #16
   12b90:	3010      	adds	r0, #16
   12b92:	0e1a      	lsrs	r2, r3, #24
   12b94:	d101      	bne.n	12b9a <__hi0bits+0x16>
   12b96:	3008      	adds	r0, #8
   12b98:	021b      	lsls	r3, r3, #8
   12b9a:	0f1a      	lsrs	r2, r3, #28
   12b9c:	d101      	bne.n	12ba2 <__hi0bits+0x1e>
   12b9e:	3004      	adds	r0, #4
   12ba0:	011b      	lsls	r3, r3, #4
   12ba2:	0f9a      	lsrs	r2, r3, #30
   12ba4:	d101      	bne.n	12baa <__hi0bits+0x26>
   12ba6:	3002      	adds	r0, #2
   12ba8:	009b      	lsls	r3, r3, #2
   12baa:	2b00      	cmp	r3, #0
   12bac:	db03      	blt.n	12bb6 <__hi0bits+0x32>
   12bae:	3001      	adds	r0, #1
   12bb0:	005b      	lsls	r3, r3, #1
   12bb2:	d400      	bmi.n	12bb6 <__hi0bits+0x32>
   12bb4:	2020      	movs	r0, #32
   12bb6:	4770      	bx	lr

00012bb8 <__lo0bits>:
   12bb8:	2207      	movs	r2, #7
   12bba:	6803      	ldr	r3, [r0, #0]
   12bbc:	b510      	push	{r4, lr}
   12bbe:	0001      	movs	r1, r0
   12bc0:	401a      	ands	r2, r3
   12bc2:	d00d      	beq.n	12be0 <__lo0bits+0x28>
   12bc4:	2401      	movs	r4, #1
   12bc6:	2000      	movs	r0, #0
   12bc8:	4223      	tst	r3, r4
   12bca:	d105      	bne.n	12bd8 <__lo0bits+0x20>
   12bcc:	3002      	adds	r0, #2
   12bce:	4203      	tst	r3, r0
   12bd0:	d003      	beq.n	12bda <__lo0bits+0x22>
   12bd2:	40e3      	lsrs	r3, r4
   12bd4:	0020      	movs	r0, r4
   12bd6:	600b      	str	r3, [r1, #0]
   12bd8:	bd10      	pop	{r4, pc}
   12bda:	089b      	lsrs	r3, r3, #2
   12bdc:	600b      	str	r3, [r1, #0]
   12bde:	e7fb      	b.n	12bd8 <__lo0bits+0x20>
   12be0:	b29c      	uxth	r4, r3
   12be2:	0010      	movs	r0, r2
   12be4:	2c00      	cmp	r4, #0
   12be6:	d101      	bne.n	12bec <__lo0bits+0x34>
   12be8:	2010      	movs	r0, #16
   12bea:	0c1b      	lsrs	r3, r3, #16
   12bec:	b2da      	uxtb	r2, r3
   12bee:	2a00      	cmp	r2, #0
   12bf0:	d101      	bne.n	12bf6 <__lo0bits+0x3e>
   12bf2:	3008      	adds	r0, #8
   12bf4:	0a1b      	lsrs	r3, r3, #8
   12bf6:	071a      	lsls	r2, r3, #28
   12bf8:	d101      	bne.n	12bfe <__lo0bits+0x46>
   12bfa:	3004      	adds	r0, #4
   12bfc:	091b      	lsrs	r3, r3, #4
   12bfe:	079a      	lsls	r2, r3, #30
   12c00:	d101      	bne.n	12c06 <__lo0bits+0x4e>
   12c02:	3002      	adds	r0, #2
   12c04:	089b      	lsrs	r3, r3, #2
   12c06:	07da      	lsls	r2, r3, #31
   12c08:	d4e8      	bmi.n	12bdc <__lo0bits+0x24>
   12c0a:	085b      	lsrs	r3, r3, #1
   12c0c:	d001      	beq.n	12c12 <__lo0bits+0x5a>
   12c0e:	3001      	adds	r0, #1
   12c10:	e7e4      	b.n	12bdc <__lo0bits+0x24>
   12c12:	2020      	movs	r0, #32
   12c14:	e7e0      	b.n	12bd8 <__lo0bits+0x20>

00012c16 <__i2b>:
   12c16:	b510      	push	{r4, lr}
   12c18:	000c      	movs	r4, r1
   12c1a:	2101      	movs	r1, #1
   12c1c:	f7ff ff25 	bl	12a6a <_Balloc>
   12c20:	2301      	movs	r3, #1
   12c22:	6144      	str	r4, [r0, #20]
   12c24:	6103      	str	r3, [r0, #16]
   12c26:	bd10      	pop	{r4, pc}

00012c28 <__multiply>:
   12c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c2a:	690b      	ldr	r3, [r1, #16]
   12c2c:	0015      	movs	r5, r2
   12c2e:	6912      	ldr	r2, [r2, #16]
   12c30:	b089      	sub	sp, #36	; 0x24
   12c32:	000c      	movs	r4, r1
   12c34:	4293      	cmp	r3, r2
   12c36:	da01      	bge.n	12c3c <__multiply+0x14>
   12c38:	002c      	movs	r4, r5
   12c3a:	000d      	movs	r5, r1
   12c3c:	6927      	ldr	r7, [r4, #16]
   12c3e:	692e      	ldr	r6, [r5, #16]
   12c40:	68a2      	ldr	r2, [r4, #8]
   12c42:	19bb      	adds	r3, r7, r6
   12c44:	6861      	ldr	r1, [r4, #4]
   12c46:	9301      	str	r3, [sp, #4]
   12c48:	4293      	cmp	r3, r2
   12c4a:	dd00      	ble.n	12c4e <__multiply+0x26>
   12c4c:	3101      	adds	r1, #1
   12c4e:	f7ff ff0c 	bl	12a6a <_Balloc>
   12c52:	0003      	movs	r3, r0
   12c54:	3314      	adds	r3, #20
   12c56:	9300      	str	r3, [sp, #0]
   12c58:	9a00      	ldr	r2, [sp, #0]
   12c5a:	19bb      	adds	r3, r7, r6
   12c5c:	4694      	mov	ip, r2
   12c5e:	009b      	lsls	r3, r3, #2
   12c60:	449c      	add	ip, r3
   12c62:	0013      	movs	r3, r2
   12c64:	2200      	movs	r2, #0
   12c66:	9004      	str	r0, [sp, #16]
   12c68:	4563      	cmp	r3, ip
   12c6a:	d31c      	bcc.n	12ca6 <__multiply+0x7e>
   12c6c:	002a      	movs	r2, r5
   12c6e:	3414      	adds	r4, #20
   12c70:	00bf      	lsls	r7, r7, #2
   12c72:	19e3      	adds	r3, r4, r7
   12c74:	3214      	adds	r2, #20
   12c76:	00b6      	lsls	r6, r6, #2
   12c78:	9305      	str	r3, [sp, #20]
   12c7a:	1993      	adds	r3, r2, r6
   12c7c:	9402      	str	r4, [sp, #8]
   12c7e:	9306      	str	r3, [sp, #24]
   12c80:	9b06      	ldr	r3, [sp, #24]
   12c82:	429a      	cmp	r2, r3
   12c84:	d311      	bcc.n	12caa <__multiply+0x82>
   12c86:	9b01      	ldr	r3, [sp, #4]
   12c88:	2b00      	cmp	r3, #0
   12c8a:	dd06      	ble.n	12c9a <__multiply+0x72>
   12c8c:	2304      	movs	r3, #4
   12c8e:	425b      	negs	r3, r3
   12c90:	449c      	add	ip, r3
   12c92:	4663      	mov	r3, ip
   12c94:	681b      	ldr	r3, [r3, #0]
   12c96:	2b00      	cmp	r3, #0
   12c98:	d051      	beq.n	12d3e <__multiply+0x116>
   12c9a:	9b04      	ldr	r3, [sp, #16]
   12c9c:	9a01      	ldr	r2, [sp, #4]
   12c9e:	0018      	movs	r0, r3
   12ca0:	611a      	str	r2, [r3, #16]
   12ca2:	b009      	add	sp, #36	; 0x24
   12ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ca6:	c304      	stmia	r3!, {r2}
   12ca8:	e7de      	b.n	12c68 <__multiply+0x40>
   12caa:	8814      	ldrh	r4, [r2, #0]
   12cac:	2c00      	cmp	r4, #0
   12cae:	d01e      	beq.n	12cee <__multiply+0xc6>
   12cb0:	2600      	movs	r6, #0
   12cb2:	9d00      	ldr	r5, [sp, #0]
   12cb4:	9f02      	ldr	r7, [sp, #8]
   12cb6:	cf01      	ldmia	r7!, {r0}
   12cb8:	9507      	str	r5, [sp, #28]
   12cba:	cd08      	ldmia	r5!, {r3}
   12cbc:	9303      	str	r3, [sp, #12]
   12cbe:	b283      	uxth	r3, r0
   12cc0:	4363      	muls	r3, r4
   12cc2:	0019      	movs	r1, r3
   12cc4:	466b      	mov	r3, sp
   12cc6:	0c00      	lsrs	r0, r0, #16
   12cc8:	899b      	ldrh	r3, [r3, #12]
   12cca:	4360      	muls	r0, r4
   12ccc:	18cb      	adds	r3, r1, r3
   12cce:	9903      	ldr	r1, [sp, #12]
   12cd0:	199b      	adds	r3, r3, r6
   12cd2:	0c09      	lsrs	r1, r1, #16
   12cd4:	1841      	adds	r1, r0, r1
   12cd6:	0c18      	lsrs	r0, r3, #16
   12cd8:	1809      	adds	r1, r1, r0
   12cda:	0c0e      	lsrs	r6, r1, #16
   12cdc:	b29b      	uxth	r3, r3
   12cde:	0409      	lsls	r1, r1, #16
   12ce0:	430b      	orrs	r3, r1
   12ce2:	9907      	ldr	r1, [sp, #28]
   12ce4:	600b      	str	r3, [r1, #0]
   12ce6:	9b05      	ldr	r3, [sp, #20]
   12ce8:	42bb      	cmp	r3, r7
   12cea:	d8e4      	bhi.n	12cb6 <__multiply+0x8e>
   12cec:	602e      	str	r6, [r5, #0]
   12cee:	6813      	ldr	r3, [r2, #0]
   12cf0:	0c1b      	lsrs	r3, r3, #16
   12cf2:	9303      	str	r3, [sp, #12]
   12cf4:	d01e      	beq.n	12d34 <__multiply+0x10c>
   12cf6:	2600      	movs	r6, #0
   12cf8:	9b00      	ldr	r3, [sp, #0]
   12cfa:	9c02      	ldr	r4, [sp, #8]
   12cfc:	681b      	ldr	r3, [r3, #0]
   12cfe:	9800      	ldr	r0, [sp, #0]
   12d00:	0007      	movs	r7, r0
   12d02:	8821      	ldrh	r1, [r4, #0]
   12d04:	9d03      	ldr	r5, [sp, #12]
   12d06:	b29b      	uxth	r3, r3
   12d08:	4369      	muls	r1, r5
   12d0a:	c820      	ldmia	r0!, {r5}
   12d0c:	0c2d      	lsrs	r5, r5, #16
   12d0e:	1949      	adds	r1, r1, r5
   12d10:	198e      	adds	r6, r1, r6
   12d12:	0431      	lsls	r1, r6, #16
   12d14:	430b      	orrs	r3, r1
   12d16:	603b      	str	r3, [r7, #0]
   12d18:	cc08      	ldmia	r4!, {r3}
   12d1a:	9903      	ldr	r1, [sp, #12]
   12d1c:	0c1b      	lsrs	r3, r3, #16
   12d1e:	434b      	muls	r3, r1
   12d20:	6879      	ldr	r1, [r7, #4]
   12d22:	0c36      	lsrs	r6, r6, #16
   12d24:	b289      	uxth	r1, r1
   12d26:	185b      	adds	r3, r3, r1
   12d28:	9905      	ldr	r1, [sp, #20]
   12d2a:	199b      	adds	r3, r3, r6
   12d2c:	0c1e      	lsrs	r6, r3, #16
   12d2e:	42a1      	cmp	r1, r4
   12d30:	d8e6      	bhi.n	12d00 <__multiply+0xd8>
   12d32:	6003      	str	r3, [r0, #0]
   12d34:	9b00      	ldr	r3, [sp, #0]
   12d36:	3204      	adds	r2, #4
   12d38:	3304      	adds	r3, #4
   12d3a:	9300      	str	r3, [sp, #0]
   12d3c:	e7a0      	b.n	12c80 <__multiply+0x58>
   12d3e:	9b01      	ldr	r3, [sp, #4]
   12d40:	3b01      	subs	r3, #1
   12d42:	9301      	str	r3, [sp, #4]
   12d44:	e79f      	b.n	12c86 <__multiply+0x5e>
	...

00012d48 <__pow5mult>:
   12d48:	2303      	movs	r3, #3
   12d4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12d4c:	4013      	ands	r3, r2
   12d4e:	0005      	movs	r5, r0
   12d50:	000e      	movs	r6, r1
   12d52:	0014      	movs	r4, r2
   12d54:	2b00      	cmp	r3, #0
   12d56:	d008      	beq.n	12d6a <__pow5mult+0x22>
   12d58:	4922      	ldr	r1, [pc, #136]	; (12de4 <__pow5mult+0x9c>)
   12d5a:	3b01      	subs	r3, #1
   12d5c:	009a      	lsls	r2, r3, #2
   12d5e:	5852      	ldr	r2, [r2, r1]
   12d60:	2300      	movs	r3, #0
   12d62:	0031      	movs	r1, r6
   12d64:	f7ff fed2 	bl	12b0c <__multadd>
   12d68:	0006      	movs	r6, r0
   12d6a:	10a3      	asrs	r3, r4, #2
   12d6c:	9301      	str	r3, [sp, #4]
   12d6e:	d036      	beq.n	12dde <__pow5mult+0x96>
   12d70:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   12d72:	2c00      	cmp	r4, #0
   12d74:	d107      	bne.n	12d86 <__pow5mult+0x3e>
   12d76:	2010      	movs	r0, #16
   12d78:	f7fd fe28 	bl	109cc <malloc>
   12d7c:	6268      	str	r0, [r5, #36]	; 0x24
   12d7e:	6044      	str	r4, [r0, #4]
   12d80:	6084      	str	r4, [r0, #8]
   12d82:	6004      	str	r4, [r0, #0]
   12d84:	60c4      	str	r4, [r0, #12]
   12d86:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   12d88:	68bc      	ldr	r4, [r7, #8]
   12d8a:	2c00      	cmp	r4, #0
   12d8c:	d107      	bne.n	12d9e <__pow5mult+0x56>
   12d8e:	4916      	ldr	r1, [pc, #88]	; (12de8 <__pow5mult+0xa0>)
   12d90:	0028      	movs	r0, r5
   12d92:	f7ff ff40 	bl	12c16 <__i2b>
   12d96:	2300      	movs	r3, #0
   12d98:	0004      	movs	r4, r0
   12d9a:	60b8      	str	r0, [r7, #8]
   12d9c:	6003      	str	r3, [r0, #0]
   12d9e:	2201      	movs	r2, #1
   12da0:	9b01      	ldr	r3, [sp, #4]
   12da2:	4213      	tst	r3, r2
   12da4:	d00a      	beq.n	12dbc <__pow5mult+0x74>
   12da6:	0031      	movs	r1, r6
   12da8:	0022      	movs	r2, r4
   12daa:	0028      	movs	r0, r5
   12dac:	f7ff ff3c 	bl	12c28 <__multiply>
   12db0:	0007      	movs	r7, r0
   12db2:	0031      	movs	r1, r6
   12db4:	0028      	movs	r0, r5
   12db6:	f7ff fe90 	bl	12ada <_Bfree>
   12dba:	003e      	movs	r6, r7
   12dbc:	9b01      	ldr	r3, [sp, #4]
   12dbe:	105b      	asrs	r3, r3, #1
   12dc0:	9301      	str	r3, [sp, #4]
   12dc2:	d00c      	beq.n	12dde <__pow5mult+0x96>
   12dc4:	6820      	ldr	r0, [r4, #0]
   12dc6:	2800      	cmp	r0, #0
   12dc8:	d107      	bne.n	12dda <__pow5mult+0x92>
   12dca:	0022      	movs	r2, r4
   12dcc:	0021      	movs	r1, r4
   12dce:	0028      	movs	r0, r5
   12dd0:	f7ff ff2a 	bl	12c28 <__multiply>
   12dd4:	2300      	movs	r3, #0
   12dd6:	6020      	str	r0, [r4, #0]
   12dd8:	6003      	str	r3, [r0, #0]
   12dda:	0004      	movs	r4, r0
   12ddc:	e7df      	b.n	12d9e <__pow5mult+0x56>
   12dde:	0030      	movs	r0, r6
   12de0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12de2:	46c0      	nop			; (mov r8, r8)
   12de4:	00014638 	.word	0x00014638
   12de8:	00000271 	.word	0x00000271

00012dec <__lshift>:
   12dec:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dee:	000d      	movs	r5, r1
   12df0:	0017      	movs	r7, r2
   12df2:	692b      	ldr	r3, [r5, #16]
   12df4:	1154      	asrs	r4, r2, #5
   12df6:	b085      	sub	sp, #20
   12df8:	18e3      	adds	r3, r4, r3
   12dfa:	9302      	str	r3, [sp, #8]
   12dfc:	3301      	adds	r3, #1
   12dfe:	9301      	str	r3, [sp, #4]
   12e00:	6849      	ldr	r1, [r1, #4]
   12e02:	68ab      	ldr	r3, [r5, #8]
   12e04:	9003      	str	r0, [sp, #12]
   12e06:	9a01      	ldr	r2, [sp, #4]
   12e08:	4293      	cmp	r3, r2
   12e0a:	db34      	blt.n	12e76 <__lshift+0x8a>
   12e0c:	9803      	ldr	r0, [sp, #12]
   12e0e:	f7ff fe2c 	bl	12a6a <_Balloc>
   12e12:	2300      	movs	r3, #0
   12e14:	0002      	movs	r2, r0
   12e16:	0006      	movs	r6, r0
   12e18:	0019      	movs	r1, r3
   12e1a:	3214      	adds	r2, #20
   12e1c:	42a3      	cmp	r3, r4
   12e1e:	db2d      	blt.n	12e7c <__lshift+0x90>
   12e20:	43e3      	mvns	r3, r4
   12e22:	17db      	asrs	r3, r3, #31
   12e24:	401c      	ands	r4, r3
   12e26:	002b      	movs	r3, r5
   12e28:	211f      	movs	r1, #31
   12e2a:	00a4      	lsls	r4, r4, #2
   12e2c:	1914      	adds	r4, r2, r4
   12e2e:	692a      	ldr	r2, [r5, #16]
   12e30:	3314      	adds	r3, #20
   12e32:	0092      	lsls	r2, r2, #2
   12e34:	189a      	adds	r2, r3, r2
   12e36:	400f      	ands	r7, r1
   12e38:	d024      	beq.n	12e84 <__lshift+0x98>
   12e3a:	3101      	adds	r1, #1
   12e3c:	1bc9      	subs	r1, r1, r7
   12e3e:	468c      	mov	ip, r1
   12e40:	2100      	movs	r1, #0
   12e42:	6818      	ldr	r0, [r3, #0]
   12e44:	40b8      	lsls	r0, r7
   12e46:	4301      	orrs	r1, r0
   12e48:	4660      	mov	r0, ip
   12e4a:	6021      	str	r1, [r4, #0]
   12e4c:	cb02      	ldmia	r3!, {r1}
   12e4e:	3404      	adds	r4, #4
   12e50:	40c1      	lsrs	r1, r0
   12e52:	429a      	cmp	r2, r3
   12e54:	d8f5      	bhi.n	12e42 <__lshift+0x56>
   12e56:	6021      	str	r1, [r4, #0]
   12e58:	2900      	cmp	r1, #0
   12e5a:	d002      	beq.n	12e62 <__lshift+0x76>
   12e5c:	9b02      	ldr	r3, [sp, #8]
   12e5e:	3302      	adds	r3, #2
   12e60:	9301      	str	r3, [sp, #4]
   12e62:	9b01      	ldr	r3, [sp, #4]
   12e64:	9803      	ldr	r0, [sp, #12]
   12e66:	3b01      	subs	r3, #1
   12e68:	6133      	str	r3, [r6, #16]
   12e6a:	0029      	movs	r1, r5
   12e6c:	f7ff fe35 	bl	12ada <_Bfree>
   12e70:	0030      	movs	r0, r6
   12e72:	b005      	add	sp, #20
   12e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e76:	3101      	adds	r1, #1
   12e78:	005b      	lsls	r3, r3, #1
   12e7a:	e7c4      	b.n	12e06 <__lshift+0x1a>
   12e7c:	0098      	lsls	r0, r3, #2
   12e7e:	5011      	str	r1, [r2, r0]
   12e80:	3301      	adds	r3, #1
   12e82:	e7cb      	b.n	12e1c <__lshift+0x30>
   12e84:	cb02      	ldmia	r3!, {r1}
   12e86:	c402      	stmia	r4!, {r1}
   12e88:	429a      	cmp	r2, r3
   12e8a:	d8fb      	bhi.n	12e84 <__lshift+0x98>
   12e8c:	e7e9      	b.n	12e62 <__lshift+0x76>

00012e8e <__mcmp>:
   12e8e:	690a      	ldr	r2, [r1, #16]
   12e90:	6903      	ldr	r3, [r0, #16]
   12e92:	b530      	push	{r4, r5, lr}
   12e94:	1a9b      	subs	r3, r3, r2
   12e96:	d10e      	bne.n	12eb6 <__mcmp+0x28>
   12e98:	0092      	lsls	r2, r2, #2
   12e9a:	3014      	adds	r0, #20
   12e9c:	3114      	adds	r1, #20
   12e9e:	1884      	adds	r4, r0, r2
   12ea0:	1889      	adds	r1, r1, r2
   12ea2:	3c04      	subs	r4, #4
   12ea4:	3904      	subs	r1, #4
   12ea6:	6822      	ldr	r2, [r4, #0]
   12ea8:	680d      	ldr	r5, [r1, #0]
   12eaa:	42aa      	cmp	r2, r5
   12eac:	d005      	beq.n	12eba <__mcmp+0x2c>
   12eae:	42aa      	cmp	r2, r5
   12eb0:	4192      	sbcs	r2, r2
   12eb2:	2301      	movs	r3, #1
   12eb4:	4313      	orrs	r3, r2
   12eb6:	0018      	movs	r0, r3
   12eb8:	bd30      	pop	{r4, r5, pc}
   12eba:	42a0      	cmp	r0, r4
   12ebc:	d3f1      	bcc.n	12ea2 <__mcmp+0x14>
   12ebe:	e7fa      	b.n	12eb6 <__mcmp+0x28>

00012ec0 <__mdiff>:
   12ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ec2:	000d      	movs	r5, r1
   12ec4:	b085      	sub	sp, #20
   12ec6:	0007      	movs	r7, r0
   12ec8:	0011      	movs	r1, r2
   12eca:	0028      	movs	r0, r5
   12ecc:	0014      	movs	r4, r2
   12ece:	f7ff ffde 	bl	12e8e <__mcmp>
   12ed2:	1e06      	subs	r6, r0, #0
   12ed4:	d108      	bne.n	12ee8 <__mdiff+0x28>
   12ed6:	0001      	movs	r1, r0
   12ed8:	0038      	movs	r0, r7
   12eda:	f7ff fdc6 	bl	12a6a <_Balloc>
   12ede:	2301      	movs	r3, #1
   12ee0:	6146      	str	r6, [r0, #20]
   12ee2:	6103      	str	r3, [r0, #16]
   12ee4:	b005      	add	sp, #20
   12ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ee8:	2301      	movs	r3, #1
   12eea:	9301      	str	r3, [sp, #4]
   12eec:	2800      	cmp	r0, #0
   12eee:	db04      	blt.n	12efa <__mdiff+0x3a>
   12ef0:	0023      	movs	r3, r4
   12ef2:	002c      	movs	r4, r5
   12ef4:	001d      	movs	r5, r3
   12ef6:	2300      	movs	r3, #0
   12ef8:	9301      	str	r3, [sp, #4]
   12efa:	6861      	ldr	r1, [r4, #4]
   12efc:	0038      	movs	r0, r7
   12efe:	f7ff fdb4 	bl	12a6a <_Balloc>
   12f02:	002f      	movs	r7, r5
   12f04:	2200      	movs	r2, #0
   12f06:	9b01      	ldr	r3, [sp, #4]
   12f08:	6926      	ldr	r6, [r4, #16]
   12f0a:	60c3      	str	r3, [r0, #12]
   12f0c:	3414      	adds	r4, #20
   12f0e:	00b3      	lsls	r3, r6, #2
   12f10:	18e3      	adds	r3, r4, r3
   12f12:	9302      	str	r3, [sp, #8]
   12f14:	692b      	ldr	r3, [r5, #16]
   12f16:	3714      	adds	r7, #20
   12f18:	009b      	lsls	r3, r3, #2
   12f1a:	18fb      	adds	r3, r7, r3
   12f1c:	9303      	str	r3, [sp, #12]
   12f1e:	0003      	movs	r3, r0
   12f20:	4694      	mov	ip, r2
   12f22:	3314      	adds	r3, #20
   12f24:	cc20      	ldmia	r4!, {r5}
   12f26:	cf04      	ldmia	r7!, {r2}
   12f28:	9201      	str	r2, [sp, #4]
   12f2a:	b2aa      	uxth	r2, r5
   12f2c:	4494      	add	ip, r2
   12f2e:	466a      	mov	r2, sp
   12f30:	4661      	mov	r1, ip
   12f32:	8892      	ldrh	r2, [r2, #4]
   12f34:	0c2d      	lsrs	r5, r5, #16
   12f36:	1a8a      	subs	r2, r1, r2
   12f38:	9901      	ldr	r1, [sp, #4]
   12f3a:	0c09      	lsrs	r1, r1, #16
   12f3c:	1a69      	subs	r1, r5, r1
   12f3e:	1415      	asrs	r5, r2, #16
   12f40:	1949      	adds	r1, r1, r5
   12f42:	140d      	asrs	r5, r1, #16
   12f44:	b292      	uxth	r2, r2
   12f46:	0409      	lsls	r1, r1, #16
   12f48:	430a      	orrs	r2, r1
   12f4a:	601a      	str	r2, [r3, #0]
   12f4c:	9a03      	ldr	r2, [sp, #12]
   12f4e:	46ac      	mov	ip, r5
   12f50:	3304      	adds	r3, #4
   12f52:	42ba      	cmp	r2, r7
   12f54:	d8e6      	bhi.n	12f24 <__mdiff+0x64>
   12f56:	9902      	ldr	r1, [sp, #8]
   12f58:	001a      	movs	r2, r3
   12f5a:	428c      	cmp	r4, r1
   12f5c:	d305      	bcc.n	12f6a <__mdiff+0xaa>
   12f5e:	3a04      	subs	r2, #4
   12f60:	6813      	ldr	r3, [r2, #0]
   12f62:	2b00      	cmp	r3, #0
   12f64:	d00e      	beq.n	12f84 <__mdiff+0xc4>
   12f66:	6106      	str	r6, [r0, #16]
   12f68:	e7bc      	b.n	12ee4 <__mdiff+0x24>
   12f6a:	cc04      	ldmia	r4!, {r2}
   12f6c:	b291      	uxth	r1, r2
   12f6e:	4461      	add	r1, ip
   12f70:	140d      	asrs	r5, r1, #16
   12f72:	0c12      	lsrs	r2, r2, #16
   12f74:	1952      	adds	r2, r2, r5
   12f76:	1415      	asrs	r5, r2, #16
   12f78:	b289      	uxth	r1, r1
   12f7a:	0412      	lsls	r2, r2, #16
   12f7c:	430a      	orrs	r2, r1
   12f7e:	46ac      	mov	ip, r5
   12f80:	c304      	stmia	r3!, {r2}
   12f82:	e7e8      	b.n	12f56 <__mdiff+0x96>
   12f84:	3e01      	subs	r6, #1
   12f86:	e7ea      	b.n	12f5e <__mdiff+0x9e>

00012f88 <__d2b>:
   12f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12f8a:	001d      	movs	r5, r3
   12f8c:	2101      	movs	r1, #1
   12f8e:	9f08      	ldr	r7, [sp, #32]
   12f90:	0014      	movs	r4, r2
   12f92:	f7ff fd6a 	bl	12a6a <_Balloc>
   12f96:	032b      	lsls	r3, r5, #12
   12f98:	006d      	lsls	r5, r5, #1
   12f9a:	0006      	movs	r6, r0
   12f9c:	0b1b      	lsrs	r3, r3, #12
   12f9e:	0d6d      	lsrs	r5, r5, #21
   12fa0:	d124      	bne.n	12fec <__d2b+0x64>
   12fa2:	9301      	str	r3, [sp, #4]
   12fa4:	2c00      	cmp	r4, #0
   12fa6:	d027      	beq.n	12ff8 <__d2b+0x70>
   12fa8:	4668      	mov	r0, sp
   12faa:	9400      	str	r4, [sp, #0]
   12fac:	f7ff fe04 	bl	12bb8 <__lo0bits>
   12fb0:	9c00      	ldr	r4, [sp, #0]
   12fb2:	2800      	cmp	r0, #0
   12fb4:	d01e      	beq.n	12ff4 <__d2b+0x6c>
   12fb6:	9b01      	ldr	r3, [sp, #4]
   12fb8:	2120      	movs	r1, #32
   12fba:	001a      	movs	r2, r3
   12fbc:	1a09      	subs	r1, r1, r0
   12fbe:	408a      	lsls	r2, r1
   12fc0:	40c3      	lsrs	r3, r0
   12fc2:	4322      	orrs	r2, r4
   12fc4:	6172      	str	r2, [r6, #20]
   12fc6:	9301      	str	r3, [sp, #4]
   12fc8:	9c01      	ldr	r4, [sp, #4]
   12fca:	61b4      	str	r4, [r6, #24]
   12fcc:	1e63      	subs	r3, r4, #1
   12fce:	419c      	sbcs	r4, r3
   12fd0:	3401      	adds	r4, #1
   12fd2:	6134      	str	r4, [r6, #16]
   12fd4:	2d00      	cmp	r5, #0
   12fd6:	d018      	beq.n	1300a <__d2b+0x82>
   12fd8:	4b12      	ldr	r3, [pc, #72]	; (13024 <__d2b+0x9c>)
   12fda:	18ed      	adds	r5, r5, r3
   12fdc:	2335      	movs	r3, #53	; 0x35
   12fde:	182d      	adds	r5, r5, r0
   12fe0:	603d      	str	r5, [r7, #0]
   12fe2:	1a18      	subs	r0, r3, r0
   12fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12fe6:	6018      	str	r0, [r3, #0]
   12fe8:	0030      	movs	r0, r6
   12fea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12fec:	2280      	movs	r2, #128	; 0x80
   12fee:	0352      	lsls	r2, r2, #13
   12ff0:	4313      	orrs	r3, r2
   12ff2:	e7d6      	b.n	12fa2 <__d2b+0x1a>
   12ff4:	6174      	str	r4, [r6, #20]
   12ff6:	e7e7      	b.n	12fc8 <__d2b+0x40>
   12ff8:	a801      	add	r0, sp, #4
   12ffa:	f7ff fddd 	bl	12bb8 <__lo0bits>
   12ffe:	2401      	movs	r4, #1
   13000:	9b01      	ldr	r3, [sp, #4]
   13002:	6134      	str	r4, [r6, #16]
   13004:	6173      	str	r3, [r6, #20]
   13006:	3020      	adds	r0, #32
   13008:	e7e4      	b.n	12fd4 <__d2b+0x4c>
   1300a:	4b07      	ldr	r3, [pc, #28]	; (13028 <__d2b+0xa0>)
   1300c:	18c0      	adds	r0, r0, r3
   1300e:	4b07      	ldr	r3, [pc, #28]	; (1302c <__d2b+0xa4>)
   13010:	6038      	str	r0, [r7, #0]
   13012:	18e3      	adds	r3, r4, r3
   13014:	009b      	lsls	r3, r3, #2
   13016:	18f3      	adds	r3, r6, r3
   13018:	6958      	ldr	r0, [r3, #20]
   1301a:	f7ff fdb3 	bl	12b84 <__hi0bits>
   1301e:	0164      	lsls	r4, r4, #5
   13020:	1a20      	subs	r0, r4, r0
   13022:	e7df      	b.n	12fe4 <__d2b+0x5c>
   13024:	fffffbcd 	.word	0xfffffbcd
   13028:	fffffbce 	.word	0xfffffbce
   1302c:	3fffffff 	.word	0x3fffffff

00013030 <_calloc_r>:
   13030:	434a      	muls	r2, r1
   13032:	b570      	push	{r4, r5, r6, lr}
   13034:	0011      	movs	r1, r2
   13036:	0014      	movs	r4, r2
   13038:	f7fd fd58 	bl	10aec <_malloc_r>
   1303c:	1e05      	subs	r5, r0, #0
   1303e:	d003      	beq.n	13048 <_calloc_r+0x18>
   13040:	0022      	movs	r2, r4
   13042:	2100      	movs	r1, #0
   13044:	f7fd fd00 	bl	10a48 <memset>
   13048:	0028      	movs	r0, r5
   1304a:	bd70      	pop	{r4, r5, r6, pc}

0001304c <_realloc_r>:
   1304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1304e:	0007      	movs	r7, r0
   13050:	000d      	movs	r5, r1
   13052:	0016      	movs	r6, r2
   13054:	2900      	cmp	r1, #0
   13056:	d105      	bne.n	13064 <_realloc_r+0x18>
   13058:	0011      	movs	r1, r2
   1305a:	f7fd fd47 	bl	10aec <_malloc_r>
   1305e:	0004      	movs	r4, r0
   13060:	0020      	movs	r0, r4
   13062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13064:	2a00      	cmp	r2, #0
   13066:	d103      	bne.n	13070 <_realloc_r+0x24>
   13068:	f7fd fcf6 	bl	10a58 <_free_r>
   1306c:	0034      	movs	r4, r6
   1306e:	e7f7      	b.n	13060 <_realloc_r+0x14>
   13070:	f000 f906 	bl	13280 <_malloc_usable_size_r>
   13074:	002c      	movs	r4, r5
   13076:	4286      	cmp	r6, r0
   13078:	d9f2      	bls.n	13060 <_realloc_r+0x14>
   1307a:	0031      	movs	r1, r6
   1307c:	0038      	movs	r0, r7
   1307e:	f7fd fd35 	bl	10aec <_malloc_r>
   13082:	1e04      	subs	r4, r0, #0
   13084:	d0ec      	beq.n	13060 <_realloc_r+0x14>
   13086:	0029      	movs	r1, r5
   13088:	0032      	movs	r2, r6
   1308a:	f7fd fcd4 	bl	10a36 <memcpy>
   1308e:	0029      	movs	r1, r5
   13090:	0038      	movs	r0, r7
   13092:	f7fd fce1 	bl	10a58 <_free_r>
   13096:	e7e3      	b.n	13060 <_realloc_r+0x14>

00013098 <_raise_r>:
   13098:	b570      	push	{r4, r5, r6, lr}
   1309a:	0004      	movs	r4, r0
   1309c:	000d      	movs	r5, r1
   1309e:	291f      	cmp	r1, #31
   130a0:	d904      	bls.n	130ac <_raise_r+0x14>
   130a2:	2316      	movs	r3, #22
   130a4:	6003      	str	r3, [r0, #0]
   130a6:	2001      	movs	r0, #1
   130a8:	4240      	negs	r0, r0
   130aa:	bd70      	pop	{r4, r5, r6, pc}
   130ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
   130ae:	2b00      	cmp	r3, #0
   130b0:	d004      	beq.n	130bc <_raise_r+0x24>
   130b2:	008a      	lsls	r2, r1, #2
   130b4:	189b      	adds	r3, r3, r2
   130b6:	681a      	ldr	r2, [r3, #0]
   130b8:	2a00      	cmp	r2, #0
   130ba:	d108      	bne.n	130ce <_raise_r+0x36>
   130bc:	0020      	movs	r0, r4
   130be:	f000 f831 	bl	13124 <_getpid_r>
   130c2:	002a      	movs	r2, r5
   130c4:	0001      	movs	r1, r0
   130c6:	0020      	movs	r0, r4
   130c8:	f000 f81a 	bl	13100 <_kill_r>
   130cc:	e7ed      	b.n	130aa <_raise_r+0x12>
   130ce:	2000      	movs	r0, #0
   130d0:	2a01      	cmp	r2, #1
   130d2:	d0ea      	beq.n	130aa <_raise_r+0x12>
   130d4:	1c51      	adds	r1, r2, #1
   130d6:	d103      	bne.n	130e0 <_raise_r+0x48>
   130d8:	2316      	movs	r3, #22
   130da:	3001      	adds	r0, #1
   130dc:	6023      	str	r3, [r4, #0]
   130de:	e7e4      	b.n	130aa <_raise_r+0x12>
   130e0:	2400      	movs	r4, #0
   130e2:	0028      	movs	r0, r5
   130e4:	601c      	str	r4, [r3, #0]
   130e6:	4790      	blx	r2
   130e8:	0020      	movs	r0, r4
   130ea:	e7de      	b.n	130aa <_raise_r+0x12>

000130ec <raise>:
   130ec:	b510      	push	{r4, lr}
   130ee:	4b03      	ldr	r3, [pc, #12]	; (130fc <raise+0x10>)
   130f0:	0001      	movs	r1, r0
   130f2:	6818      	ldr	r0, [r3, #0]
   130f4:	f7ff ffd0 	bl	13098 <_raise_r>
   130f8:	bd10      	pop	{r4, pc}
   130fa:	46c0      	nop			; (mov r8, r8)
   130fc:	200000a4 	.word	0x200000a4

00013100 <_kill_r>:
   13100:	2300      	movs	r3, #0
   13102:	b570      	push	{r4, r5, r6, lr}
   13104:	4c06      	ldr	r4, [pc, #24]	; (13120 <_kill_r+0x20>)
   13106:	0005      	movs	r5, r0
   13108:	0008      	movs	r0, r1
   1310a:	0011      	movs	r1, r2
   1310c:	6023      	str	r3, [r4, #0]
   1310e:	f000 f93f 	bl	13390 <_kill>
   13112:	1c43      	adds	r3, r0, #1
   13114:	d103      	bne.n	1311e <_kill_r+0x1e>
   13116:	6823      	ldr	r3, [r4, #0]
   13118:	2b00      	cmp	r3, #0
   1311a:	d000      	beq.n	1311e <_kill_r+0x1e>
   1311c:	602b      	str	r3, [r5, #0]
   1311e:	bd70      	pop	{r4, r5, r6, pc}
   13120:	20000f84 	.word	0x20000f84

00013124 <_getpid_r>:
   13124:	b510      	push	{r4, lr}
   13126:	f000 f923 	bl	13370 <_getpid>
   1312a:	bd10      	pop	{r4, pc}

0001312c <__sread>:
   1312c:	b570      	push	{r4, r5, r6, lr}
   1312e:	000c      	movs	r4, r1
   13130:	250e      	movs	r5, #14
   13132:	5f49      	ldrsh	r1, [r1, r5]
   13134:	f000 f8ac 	bl	13290 <_read_r>
   13138:	2800      	cmp	r0, #0
   1313a:	db03      	blt.n	13144 <__sread+0x18>
   1313c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1313e:	181b      	adds	r3, r3, r0
   13140:	6563      	str	r3, [r4, #84]	; 0x54
   13142:	bd70      	pop	{r4, r5, r6, pc}
   13144:	89a3      	ldrh	r3, [r4, #12]
   13146:	4a02      	ldr	r2, [pc, #8]	; (13150 <__sread+0x24>)
   13148:	4013      	ands	r3, r2
   1314a:	81a3      	strh	r3, [r4, #12]
   1314c:	e7f9      	b.n	13142 <__sread+0x16>
   1314e:	46c0      	nop			; (mov r8, r8)
   13150:	ffffefff 	.word	0xffffefff

00013154 <__swrite>:
   13154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13156:	001f      	movs	r7, r3
   13158:	898b      	ldrh	r3, [r1, #12]
   1315a:	0005      	movs	r5, r0
   1315c:	000c      	movs	r4, r1
   1315e:	0016      	movs	r6, r2
   13160:	05db      	lsls	r3, r3, #23
   13162:	d505      	bpl.n	13170 <__swrite+0x1c>
   13164:	230e      	movs	r3, #14
   13166:	5ec9      	ldrsh	r1, [r1, r3]
   13168:	2200      	movs	r2, #0
   1316a:	2302      	movs	r3, #2
   1316c:	f000 f874 	bl	13258 <_lseek_r>
   13170:	89a3      	ldrh	r3, [r4, #12]
   13172:	4a05      	ldr	r2, [pc, #20]	; (13188 <__swrite+0x34>)
   13174:	0028      	movs	r0, r5
   13176:	4013      	ands	r3, r2
   13178:	81a3      	strh	r3, [r4, #12]
   1317a:	0032      	movs	r2, r6
   1317c:	230e      	movs	r3, #14
   1317e:	5ee1      	ldrsh	r1, [r4, r3]
   13180:	003b      	movs	r3, r7
   13182:	f000 f81f 	bl	131c4 <_write_r>
   13186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13188:	ffffefff 	.word	0xffffefff

0001318c <__sseek>:
   1318c:	b570      	push	{r4, r5, r6, lr}
   1318e:	000c      	movs	r4, r1
   13190:	250e      	movs	r5, #14
   13192:	5f49      	ldrsh	r1, [r1, r5]
   13194:	f000 f860 	bl	13258 <_lseek_r>
   13198:	89a3      	ldrh	r3, [r4, #12]
   1319a:	1c42      	adds	r2, r0, #1
   1319c:	d103      	bne.n	131a6 <__sseek+0x1a>
   1319e:	4a05      	ldr	r2, [pc, #20]	; (131b4 <__sseek+0x28>)
   131a0:	4013      	ands	r3, r2
   131a2:	81a3      	strh	r3, [r4, #12]
   131a4:	bd70      	pop	{r4, r5, r6, pc}
   131a6:	2280      	movs	r2, #128	; 0x80
   131a8:	0152      	lsls	r2, r2, #5
   131aa:	4313      	orrs	r3, r2
   131ac:	81a3      	strh	r3, [r4, #12]
   131ae:	6560      	str	r0, [r4, #84]	; 0x54
   131b0:	e7f8      	b.n	131a4 <__sseek+0x18>
   131b2:	46c0      	nop			; (mov r8, r8)
   131b4:	ffffefff 	.word	0xffffefff

000131b8 <__sclose>:
   131b8:	b510      	push	{r4, lr}
   131ba:	230e      	movs	r3, #14
   131bc:	5ec9      	ldrsh	r1, [r1, r3]
   131be:	f000 f815 	bl	131ec <_close_r>
   131c2:	bd10      	pop	{r4, pc}

000131c4 <_write_r>:
   131c4:	b570      	push	{r4, r5, r6, lr}
   131c6:	0005      	movs	r5, r0
   131c8:	0008      	movs	r0, r1
   131ca:	0011      	movs	r1, r2
   131cc:	2200      	movs	r2, #0
   131ce:	4c06      	ldr	r4, [pc, #24]	; (131e8 <_write_r+0x24>)
   131d0:	6022      	str	r2, [r4, #0]
   131d2:	001a      	movs	r2, r3
   131d4:	f000 f902 	bl	133dc <_write>
   131d8:	1c43      	adds	r3, r0, #1
   131da:	d103      	bne.n	131e4 <_write_r+0x20>
   131dc:	6823      	ldr	r3, [r4, #0]
   131de:	2b00      	cmp	r3, #0
   131e0:	d000      	beq.n	131e4 <_write_r+0x20>
   131e2:	602b      	str	r3, [r5, #0]
   131e4:	bd70      	pop	{r4, r5, r6, pc}
   131e6:	46c0      	nop			; (mov r8, r8)
   131e8:	20000f84 	.word	0x20000f84

000131ec <_close_r>:
   131ec:	2300      	movs	r3, #0
   131ee:	b570      	push	{r4, r5, r6, lr}
   131f0:	4c06      	ldr	r4, [pc, #24]	; (1320c <_close_r+0x20>)
   131f2:	0005      	movs	r5, r0
   131f4:	0008      	movs	r0, r1
   131f6:	6023      	str	r3, [r4, #0]
   131f8:	f000 f8aa 	bl	13350 <_close>
   131fc:	1c43      	adds	r3, r0, #1
   131fe:	d103      	bne.n	13208 <_close_r+0x1c>
   13200:	6823      	ldr	r3, [r4, #0]
   13202:	2b00      	cmp	r3, #0
   13204:	d000      	beq.n	13208 <_close_r+0x1c>
   13206:	602b      	str	r3, [r5, #0]
   13208:	bd70      	pop	{r4, r5, r6, pc}
   1320a:	46c0      	nop			; (mov r8, r8)
   1320c:	20000f84 	.word	0x20000f84

00013210 <_fstat_r>:
   13210:	2300      	movs	r3, #0
   13212:	b570      	push	{r4, r5, r6, lr}
   13214:	4c06      	ldr	r4, [pc, #24]	; (13230 <_fstat_r+0x20>)
   13216:	0005      	movs	r5, r0
   13218:	0008      	movs	r0, r1
   1321a:	0011      	movs	r1, r2
   1321c:	6023      	str	r3, [r4, #0]
   1321e:	f000 f89f 	bl	13360 <_fstat>
   13222:	1c43      	adds	r3, r0, #1
   13224:	d103      	bne.n	1322e <_fstat_r+0x1e>
   13226:	6823      	ldr	r3, [r4, #0]
   13228:	2b00      	cmp	r3, #0
   1322a:	d000      	beq.n	1322e <_fstat_r+0x1e>
   1322c:	602b      	str	r3, [r5, #0]
   1322e:	bd70      	pop	{r4, r5, r6, pc}
   13230:	20000f84 	.word	0x20000f84

00013234 <_isatty_r>:
   13234:	2300      	movs	r3, #0
   13236:	b570      	push	{r4, r5, r6, lr}
   13238:	4c06      	ldr	r4, [pc, #24]	; (13254 <_isatty_r+0x20>)
   1323a:	0005      	movs	r5, r0
   1323c:	0008      	movs	r0, r1
   1323e:	6023      	str	r3, [r4, #0]
   13240:	f000 f89e 	bl	13380 <_isatty>
   13244:	1c43      	adds	r3, r0, #1
   13246:	d103      	bne.n	13250 <_isatty_r+0x1c>
   13248:	6823      	ldr	r3, [r4, #0]
   1324a:	2b00      	cmp	r3, #0
   1324c:	d000      	beq.n	13250 <_isatty_r+0x1c>
   1324e:	602b      	str	r3, [r5, #0]
   13250:	bd70      	pop	{r4, r5, r6, pc}
   13252:	46c0      	nop			; (mov r8, r8)
   13254:	20000f84 	.word	0x20000f84

00013258 <_lseek_r>:
   13258:	b570      	push	{r4, r5, r6, lr}
   1325a:	0005      	movs	r5, r0
   1325c:	0008      	movs	r0, r1
   1325e:	0011      	movs	r1, r2
   13260:	2200      	movs	r2, #0
   13262:	4c06      	ldr	r4, [pc, #24]	; (1327c <_lseek_r+0x24>)
   13264:	6022      	str	r2, [r4, #0]
   13266:	001a      	movs	r2, r3
   13268:	f000 f89a 	bl	133a0 <_lseek>
   1326c:	1c43      	adds	r3, r0, #1
   1326e:	d103      	bne.n	13278 <_lseek_r+0x20>
   13270:	6823      	ldr	r3, [r4, #0]
   13272:	2b00      	cmp	r3, #0
   13274:	d000      	beq.n	13278 <_lseek_r+0x20>
   13276:	602b      	str	r3, [r5, #0]
   13278:	bd70      	pop	{r4, r5, r6, pc}
   1327a:	46c0      	nop			; (mov r8, r8)
   1327c:	20000f84 	.word	0x20000f84

00013280 <_malloc_usable_size_r>:
   13280:	1f0b      	subs	r3, r1, #4
   13282:	681b      	ldr	r3, [r3, #0]
   13284:	1f18      	subs	r0, r3, #4
   13286:	2b00      	cmp	r3, #0
   13288:	da01      	bge.n	1328e <_malloc_usable_size_r+0xe>
   1328a:	580b      	ldr	r3, [r1, r0]
   1328c:	18c0      	adds	r0, r0, r3
   1328e:	4770      	bx	lr

00013290 <_read_r>:
   13290:	b570      	push	{r4, r5, r6, lr}
   13292:	0005      	movs	r5, r0
   13294:	0008      	movs	r0, r1
   13296:	0011      	movs	r1, r2
   13298:	2200      	movs	r2, #0
   1329a:	4c06      	ldr	r4, [pc, #24]	; (132b4 <_read_r+0x24>)
   1329c:	6022      	str	r2, [r4, #0]
   1329e:	001a      	movs	r2, r3
   132a0:	f000 f886 	bl	133b0 <_read>
   132a4:	1c43      	adds	r3, r0, #1
   132a6:	d103      	bne.n	132b0 <_read_r+0x20>
   132a8:	6823      	ldr	r3, [r4, #0]
   132aa:	2b00      	cmp	r3, #0
   132ac:	d000      	beq.n	132b0 <_read_r+0x20>
   132ae:	602b      	str	r3, [r5, #0]
   132b0:	bd70      	pop	{r4, r5, r6, pc}
   132b2:	46c0      	nop			; (mov r8, r8)
   132b4:	20000f84 	.word	0x20000f84

000132b8 <__gnu_thumb1_case_uqi>:
   132b8:	b402      	push	{r1}
   132ba:	4671      	mov	r1, lr
   132bc:	0849      	lsrs	r1, r1, #1
   132be:	0049      	lsls	r1, r1, #1
   132c0:	5c09      	ldrb	r1, [r1, r0]
   132c2:	0049      	lsls	r1, r1, #1
   132c4:	448e      	add	lr, r1
   132c6:	bc02      	pop	{r1}
   132c8:	4770      	bx	lr
   132ca:	46c0      	nop			; (mov r8, r8)

000132cc <__aeabi_i2d>:
   132cc:	b570      	push	{r4, r5, r6, lr}
   132ce:	2800      	cmp	r0, #0
   132d0:	d030      	beq.n	13334 <__aeabi_i2d+0x68>
   132d2:	17c3      	asrs	r3, r0, #31
   132d4:	18c4      	adds	r4, r0, r3
   132d6:	405c      	eors	r4, r3
   132d8:	0fc5      	lsrs	r5, r0, #31
   132da:	0020      	movs	r0, r4
   132dc:	f7fd faf8 	bl	108d0 <__clzsi2>
   132e0:	4b17      	ldr	r3, [pc, #92]	; (13340 <__aeabi_i2d+0x74>)
   132e2:	4a18      	ldr	r2, [pc, #96]	; (13344 <__aeabi_i2d+0x78>)
   132e4:	1a1b      	subs	r3, r3, r0
   132e6:	1ad2      	subs	r2, r2, r3
   132e8:	2a1f      	cmp	r2, #31
   132ea:	dd18      	ble.n	1331e <__aeabi_i2d+0x52>
   132ec:	4a16      	ldr	r2, [pc, #88]	; (13348 <__aeabi_i2d+0x7c>)
   132ee:	1ad2      	subs	r2, r2, r3
   132f0:	4094      	lsls	r4, r2
   132f2:	2200      	movs	r2, #0
   132f4:	0324      	lsls	r4, r4, #12
   132f6:	055b      	lsls	r3, r3, #21
   132f8:	0b24      	lsrs	r4, r4, #12
   132fa:	0d5b      	lsrs	r3, r3, #21
   132fc:	2100      	movs	r1, #0
   132fe:	0010      	movs	r0, r2
   13300:	0324      	lsls	r4, r4, #12
   13302:	0d0a      	lsrs	r2, r1, #20
   13304:	0b24      	lsrs	r4, r4, #12
   13306:	0512      	lsls	r2, r2, #20
   13308:	4322      	orrs	r2, r4
   1330a:	4c10      	ldr	r4, [pc, #64]	; (1334c <__aeabi_i2d+0x80>)
   1330c:	051b      	lsls	r3, r3, #20
   1330e:	4022      	ands	r2, r4
   13310:	4313      	orrs	r3, r2
   13312:	005b      	lsls	r3, r3, #1
   13314:	07ed      	lsls	r5, r5, #31
   13316:	085b      	lsrs	r3, r3, #1
   13318:	432b      	orrs	r3, r5
   1331a:	0019      	movs	r1, r3
   1331c:	bd70      	pop	{r4, r5, r6, pc}
   1331e:	0021      	movs	r1, r4
   13320:	4091      	lsls	r1, r2
   13322:	000a      	movs	r2, r1
   13324:	210b      	movs	r1, #11
   13326:	1a08      	subs	r0, r1, r0
   13328:	40c4      	lsrs	r4, r0
   1332a:	055b      	lsls	r3, r3, #21
   1332c:	0324      	lsls	r4, r4, #12
   1332e:	0b24      	lsrs	r4, r4, #12
   13330:	0d5b      	lsrs	r3, r3, #21
   13332:	e7e3      	b.n	132fc <__aeabi_i2d+0x30>
   13334:	2500      	movs	r5, #0
   13336:	2300      	movs	r3, #0
   13338:	2400      	movs	r4, #0
   1333a:	2200      	movs	r2, #0
   1333c:	e7de      	b.n	132fc <__aeabi_i2d+0x30>
   1333e:	46c0      	nop			; (mov r8, r8)
   13340:	0000041e 	.word	0x0000041e
   13344:	00000433 	.word	0x00000433
   13348:	00000413 	.word	0x00000413
   1334c:	800fffff 	.word	0x800fffff

00013350 <_close>:
   13350:	2258      	movs	r2, #88	; 0x58
   13352:	2001      	movs	r0, #1
   13354:	4b01      	ldr	r3, [pc, #4]	; (1335c <_close+0xc>)
   13356:	4240      	negs	r0, r0
   13358:	601a      	str	r2, [r3, #0]
   1335a:	4770      	bx	lr
   1335c:	20000f84 	.word	0x20000f84

00013360 <_fstat>:
   13360:	2258      	movs	r2, #88	; 0x58
   13362:	2001      	movs	r0, #1
   13364:	4b01      	ldr	r3, [pc, #4]	; (1336c <_fstat+0xc>)
   13366:	4240      	negs	r0, r0
   13368:	601a      	str	r2, [r3, #0]
   1336a:	4770      	bx	lr
   1336c:	20000f84 	.word	0x20000f84

00013370 <_getpid>:
   13370:	2258      	movs	r2, #88	; 0x58
   13372:	2001      	movs	r0, #1
   13374:	4b01      	ldr	r3, [pc, #4]	; (1337c <_getpid+0xc>)
   13376:	4240      	negs	r0, r0
   13378:	601a      	str	r2, [r3, #0]
   1337a:	4770      	bx	lr
   1337c:	20000f84 	.word	0x20000f84

00013380 <_isatty>:
   13380:	2258      	movs	r2, #88	; 0x58
   13382:	4b02      	ldr	r3, [pc, #8]	; (1338c <_isatty+0xc>)
   13384:	2000      	movs	r0, #0
   13386:	601a      	str	r2, [r3, #0]
   13388:	4770      	bx	lr
   1338a:	46c0      	nop			; (mov r8, r8)
   1338c:	20000f84 	.word	0x20000f84

00013390 <_kill>:
   13390:	2258      	movs	r2, #88	; 0x58
   13392:	2001      	movs	r0, #1
   13394:	4b01      	ldr	r3, [pc, #4]	; (1339c <_kill+0xc>)
   13396:	4240      	negs	r0, r0
   13398:	601a      	str	r2, [r3, #0]
   1339a:	4770      	bx	lr
   1339c:	20000f84 	.word	0x20000f84

000133a0 <_lseek>:
   133a0:	2258      	movs	r2, #88	; 0x58
   133a2:	2001      	movs	r0, #1
   133a4:	4b01      	ldr	r3, [pc, #4]	; (133ac <_lseek+0xc>)
   133a6:	4240      	negs	r0, r0
   133a8:	601a      	str	r2, [r3, #0]
   133aa:	4770      	bx	lr
   133ac:	20000f84 	.word	0x20000f84

000133b0 <_read>:
   133b0:	2258      	movs	r2, #88	; 0x58
   133b2:	2001      	movs	r0, #1
   133b4:	4b01      	ldr	r3, [pc, #4]	; (133bc <_read+0xc>)
   133b6:	4240      	negs	r0, r0
   133b8:	601a      	str	r2, [r3, #0]
   133ba:	4770      	bx	lr
   133bc:	20000f84 	.word	0x20000f84

000133c0 <_sbrk>:
   133c0:	4a04      	ldr	r2, [pc, #16]	; (133d4 <_sbrk+0x14>)
   133c2:	6813      	ldr	r3, [r2, #0]
   133c4:	2b00      	cmp	r3, #0
   133c6:	d003      	beq.n	133d0 <_sbrk+0x10>
   133c8:	1818      	adds	r0, r3, r0
   133ca:	6010      	str	r0, [r2, #0]
   133cc:	0018      	movs	r0, r3
   133ce:	4770      	bx	lr
   133d0:	4b01      	ldr	r3, [pc, #4]	; (133d8 <_sbrk+0x18>)
   133d2:	e7f9      	b.n	133c8 <_sbrk+0x8>
   133d4:	20000f80 	.word	0x20000f80
   133d8:	20000f88 	.word	0x20000f88

000133dc <_write>:
   133dc:	2258      	movs	r2, #88	; 0x58
   133de:	2001      	movs	r0, #1
   133e0:	4b01      	ldr	r3, [pc, #4]	; (133e8 <_write+0xc>)
   133e2:	4240      	negs	r0, r0
   133e4:	601a      	str	r2, [r3, #0]
   133e6:	4770      	bx	lr
   133e8:	20000f84 	.word	0x20000f84

000133ec <_exit>:
   133ec:	e7fe      	b.n	133ec <_exit>
   133ee:	46c0      	nop			; (mov r8, r8)

000133f0 <_init>:
   133f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133f2:	46c0      	nop			; (mov r8, r8)
   133f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   133f6:	bc08      	pop	{r3}
   133f8:	469e      	mov	lr, r3
   133fa:	4770      	bx	lr

000133fc <_fini>:
   133fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133fe:	46c0      	nop			; (mov r8, r8)
   13400:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13402:	bc08      	pop	{r3}
   13404:	469e      	mov	lr, r3
   13406:	4770      	bx	lr
   13408:	64616f4c 	.word	0x64616f4c
   1340c:	20676e69 	.word	0x20676e69
   13410:	67616d69 	.word	0x67616d69
   13414:	00272065 	.word	0x00272065
   13418:	656c6946 	.word	0x656c6946
   1341c:	616d2820 	.word	0x616d2820
   13420:	29656279 	.word	0x29656279
   13424:	746f6e20 	.word	0x746f6e20
   13428:	756f6620 	.word	0x756f6620
   1342c:	0000646e 	.word	0x0000646e
   13430:	72617453 	.word	0x72617453
   13434:	61702074 	.word	0x61702074
   13438:	00657372 	.word	0x00657372
   1343c:	656c6946 	.word	0x656c6946
   13440:	7a697320 	.word	0x7a697320
   13444:	00203a65 	.word	0x00203a65
   13448:	67616d49 	.word	0x67616d49
   1344c:	664f2065 	.word	0x664f2065
   13450:	74657366 	.word	0x74657366
   13454:	0000203a 	.word	0x0000203a
   13458:	64616548 	.word	0x64616548
   1345c:	73207265 	.word	0x73207265
   13460:	3a657a69 	.word	0x3a657a69
   13464:	00000020 	.word	0x00000020
   13468:	20746942 	.word	0x20746942
   1346c:	74706544 	.word	0x74706544
   13470:	00203a68 	.word	0x00203a68
   13474:	67616d49 	.word	0x67616d49
   13478:	69732065 	.word	0x69732065
   1347c:	203a657a 	.word	0x203a657a
   13480:	00000000 	.word	0x00000000
   13484:	64616f4c 	.word	0x64616f4c
   13488:	69206465 	.word	0x69206465
   1348c:	0000206e 	.word	0x0000206e
   13490:	00736d20 	.word	0x00736d20
   13494:	20504d42 	.word	0x20504d42
   13498:	6d726f66 	.word	0x6d726f66
   1349c:	6e207461 	.word	0x6e207461
   134a0:	7220746f 	.word	0x7220746f
   134a4:	676f6365 	.word	0x676f6365
   134a8:	657a696e 	.word	0x657a696e
   134ac:	726f2064 	.word	0x726f2064
   134b0:	20445320 	.word	0x20445320
   134b4:	20746f6e 	.word	0x20746f6e
   134b8:	6e756f6d 	.word	0x6e756f6d
   134bc:	00646574 	.word	0x00646574
   134c0:	4d646461 	.word	0x4d646461
   134c4:	2c65766f 	.word	0x2c65766f
   134c8:	616c7020 	.word	0x616c7020
   134cc:	20726579 	.word	0x20726579
   134d0:	0000203d 	.word	0x0000203d
   134d4:	73696874 	.word	0x73696874
   134d8:	67696d20 	.word	0x67696d20
   134dc:	62207468 	.word	0x62207468
   134e0:	20612065 	.word	0x20612065
   134e4:	736f7263 	.word	0x736f7263
   134e8:	00000073 	.word	0x00000073
   134ec:	73696874 	.word	0x73696874
   134f0:	67696d20 	.word	0x67696d20
   134f4:	62207468 	.word	0x62207468
   134f8:	20612065 	.word	0x20612065
   134fc:	67756f6e 	.word	0x67756f6e
   13500:	00007468 	.word	0x00007468
   13504:	6e6e6977 	.word	0x6e6e6977
   13508:	3d207265 	.word	0x3d207265
   1350c:	00000020 	.word	0x00000020
   13510:	6f727245 	.word	0x6f727245
   13514:	00000072 	.word	0x00000072
   13518:	0000ffff 	.word	0x0000ffff
   1351c:	ffffffff 	.word	0xffffffff
   13520:	ffffffff 	.word	0xffffffff
   13524:	000000ff 	.word	0x000000ff
   13528:	6b6f7242 	.word	0x6b6f7242
   1352c:	68772065 	.word	0x68772065
   13530:	20656c69 	.word	0x20656c69
   13534:	706f6f6c 	.word	0x706f6f6c
   13538:	00000000 	.word	0x00000000
   1353c:	6c756f43 	.word	0x6c756f43
   13540:	74276e64 	.word	0x74276e64
   13544:	61747320 	.word	0x61747320
   13548:	46207472 	.word	0x46207472
   1354c:	30323654 	.word	0x30323654
   13550:	6f742036 	.word	0x6f742036
   13554:	73686375 	.word	0x73686375
   13558:	65657263 	.word	0x65657263
   1355c:	6f63206e 	.word	0x6f63206e
   13560:	6f72746e 	.word	0x6f72746e
   13564:	72656c6c 	.word	0x72656c6c
   13568:	00000000 	.word	0x00000000
   1356c:	76697244 	.word	0x76697244
   13570:	6d207265 	.word	0x6d207265
   13574:	74686769 	.word	0x74686769
   13578:	746f6e20 	.word	0x746f6e20
   1357c:	76616820 	.word	0x76616820
   13580:	65622065 	.word	0x65622065
   13584:	66206e65 	.word	0x66206e65
   13588:	646e756f 	.word	0x646e756f
   1358c:	00000000 	.word	0x00000000
   13590:	6c696146 	.word	0x6c696146
   13594:	74206465 	.word	0x74206465
   13598:	6e69206f 	.word	0x6e69206f
   1359c:	61697469 	.word	0x61697469
   135a0:	6573696c 	.word	0x6573696c
   135a4:	20445320 	.word	0x20445320
   135a8:	64726163 	.word	0x64726163
   135ac:	00000000 	.word	0x00000000
   135b0:	00000a0d 	.word	0x00000a0d
   135b4:	006e616e 	.word	0x006e616e
   135b8:	00666e69 	.word	0x00666e69
   135bc:	0066766f 	.word	0x0066766f

000135c0 <_ZTV5Print>:
	...
   135c8:	0000d6f7 0000313f 0000311d 0000312f     ....?1...1../1..

000135d8 <_ZTV4Uart>:
	...
   135e0:	00003df5 0000313f 00003d69 00003c37     .=..?1..i=..7<..
   135f0:	00003d4d 00003da1 00003d85 00004145     M=...=...=..EA..
   13600:	00004169 00003a35 00003a5d 00003c09     iA..5:..]:...<..
   13610:	00003949                                I9..

00013614 <_ZTV14HardwareSerial>:
	...
   1361c:	0000d6f7 0000313f 0000311d 0000d6f7     ....?1...1......
   1362c:	0000d6f7 0000d6f7 0000d6f7 00000000     ................
   1363c:	00000000 00003893 000038a5 000038bb     .....8...8...8..
   1364c:	0000d6f7                                ....

00013650 <_ZTV6Stream>:
	...
   13658:	0000d6f7 0000313f 0000311d 0000312f     ....?1...1../1..
   13668:	0000d6f7 0000d6f7 0000d6f7              ............

00013674 <_ZL15STRING_LANGUAGE>:
   13674:	04090304                                ....

00013678 <_ZL14STRING_PRODUCT>:
   13678:	75647241 206f6e69 5020304d 00006f72     Arduino M0 Pro..

00013688 <_ZL19STRING_MANUFACTURER>:
   13688:	75647241 206f6e69 00434c4c              Arduino LLC.

00013694 <_ZL21USB_DeviceDescriptorB>:
   13694:	02000112 400102ef 804f2a03 02010100     .......@.*O.....
   136a4:	00000103                                ....

000136a8 <_ZL20USB_DeviceDescriptor>:
   136a8:	02000112 40000000 804f2a03 02010100     .......@.*O.....
   136b8:	00000103 000062de 0000633a 00006470     .....b..:c..pd..
   136c8:	00006388 00006470 000063cc 000063e0     .c..pd...c...c..
   136d8:	000063f0 000063f4 00006404 00006448     .c...c...d..Hd..
   136e8:	00006458                                Xd..

000136ec <_ZTV26DoubleBufferedEPOutHandler>:
	...
   136f4:	00004fb9 00004d8d 00005141              .O...M..AQ..

00013700 <_ZTV9EPHandler>:
	...
   13708:	0000d6f7 0000d6f7 0000d6f7 00006a36     ............6j..
   13718:	000069cc 000069e8 00006a04 00006a1a     .i...i...j...j..
   13728:	000069cc 0000701e 00006e28 00006e28     .i...p..(n..(n..
   13738:	00006e28 00006e28 00006e28 00006e28     (n..(n..(n..(n..
   13748:	00006e28 00006e28 00006de4 00006de4     (n..(n...m...m..
   13758:	00006de4 00006de4                       .m...m..

00013760 <_ZTV16Adafruit_ILI9341>:
	...
   13768:	0000d3dd 0000313f 0000311d 0000312f     ....?1...1../1..
   13778:	00008795 0000815d 000084cd 0000855d     ....].......]...
   13788:	000086df 00008739 0000c53d 000081ad     ....9...=.......
   13798:	00007f95 0000805f 000087ff 00008873     ...._.......s...
   137a8:	000088e7 0000caf7 0000cb33 0000cceb     ........3.......

000137b8 <_ZTVN5SDLib4FileE>:
	...
   137c0:	00008b01 00008b29 0000311d 00008c7d     ....)....1..}...
   137d0:	00008c39 00008bd9 00008b97 0000002f     9.........../...
   137e0:	00009a2e 00009a4c 00009a6a 00009a88     ....L...j.......
   137f0:	00009aa6 00009ac4 5e3e3c7c 2f3f3d2b     ........|<>^+=?/
   13800:	2c3b5d5b 005c222a                       [];,*"\.

00013808 <_ZTV6SdFile>:
	...
   13810:	0000b0c5 0000313f 0000311d 0000312f     ....?1...1../1..
   13820:	65735f70 6d6f6372 203d2120 4c4c554e     p_sercom != NULL
   13830:	00000000 732f2e2e 6c2f6372 61726269     ....../src/libra
   13840:	73656972 6970732f 4950532f 7070632e     ries/spi/SPI.cpp
   13850:	00000000                                ....

00013854 <_ZZN8SPIClassC4EP6SERCOMhhh14SercomSpiTXPad11SercomRXPadE19__PRETTY_FUNCTION__>:
   13854:	43495053 7373616c 50533a3a 616c4349     SPIClass::SPICla
   13864:	53287373 4f435245 202c2a4d 746e6975     ss(SERCOM*, uint
   13874:	2c745f38 6e697520 745f3874 6975202c     8_t, uint8_t, ui
   13884:	5f38746e 53202c74 6f637265 6970536d     nt8_t, SercomSpi
   13894:	61505854 53202c64 6f637265 5058526d     TXPad, SercomRXP
   138a4:	00296461                                ad).

000138a8 <_ZTV7TwoWire>:
	...
   138b0:	0000be65 0000bebd 0000311d 0000bf5f     e........1.._...
   138c0:	0000bf0b 0000bf27 0000bf43              ....'...C...

000138cc <g_APinDescription>:
   138cc:	00000000 0000000b 00000002 00000004     ................
   138dc:	ffff00ff 000bffff 00000000 0000000a     ................
   138ec:	00000002 00000004 ffff00ff 000affff     ................
   138fc:	00000000 00000008 00000004 0000001c     ................
   1390c:	000000ff 00ff0000 00000000 00000009     ................
   1391c:	00000004 0000001c 000100ff 00090001     ................
   1392c:	00000000 0000000e 00000004 0000001c     ................
   1393c:	030000ff 000e0300 00000000 0000000f     ................
   1394c:	00000004 0000001c 030100ff 000f0301     ................
   1395c:	00000000 00000014 00000005 0000001c     ................
   1396c:	000200ff 00040002 00000000 00000015     ................
   1397c:	00000005 0000001c 000300ff 00050003     ................
   1398c:	00000000 00000006 00000004 0000001c     ................
   1399c:	010000ff 00060100 00000000 00000007     ................
   139ac:	00000004 0000001c 010100ff 00070101     ................
   139bc:	00000000 00000012 00000004 0000001c     ................
   139cc:	030000ff 00020300 00000000 00000010     ................
   139dc:	00000004 0000001c 020000ff 00000200     ................
   139ec:	00000000 00000013 00000004 0000001c     ................
   139fc:	030100ff 00030301 00000000 00000011     ................
   13a0c:	00000004 0000000c 020100ff 0001ffff     ................
   13a1c:	000000ff 00000000 000000ff 00000000     ................
   13a2c:	ffff00ff 00ffffff 00000000 00000003     ................
   13a3c:	00000001 00000002 ffff00ff 00ffffff     ................
   13a4c:	00000000 00000016 00000002 00000004     ................
   13a5c:	ffff00ff 0006ffff 00000000 00000017     ................
   13a6c:	00000002 00000004 ffff00ff 0007ffff     ................
   13a7c:	00000000 0000000c 00000003 00000004     ................
   13a8c:	ffff00ff 000cffff 000000ff 00000000     ................
   13a9c:	000000ff 00000000 ffff00ff 00ffffff     ................
   13aac:	00000001 0000000b 00000003 00000004     ................
   13abc:	ffff00ff 000bffff 00000001 0000000a     ................
   13acc:	00000003 00000004 ffff00ff 000affff     ................
   13adc:	000000ff 00000000 000000ff 00000000     ................
   13aec:	ffff00ff 00ffffff 000000ff 00000000     ................
   13afc:	000000ff 00000000 ffff00ff 00ffffff     ................
   13b0c:	00000000 00000002 00000001 00000002     ................
   13b1c:	ffff0000 0002ffff 00000001 00000008     ................
   13b2c:	00000001 00000002 ffff0002 0008ffff     ................
   13b3c:	00000001 00000009 00000001 00000002     ................
   13b4c:	ffff0003 0009ffff 00000000 00000004     ................
   13b5c:	00000001 00000002 ffff0004 0004ffff     ................
   13b6c:	00000000 00000005 00000001 00000002     ................
   13b7c:	ffff0005 0005ffff 00000001 00000002     ................
   13b8c:	00000001 00000002 ffff000a 0002ffff     ................
   13b9c:	00000001 00000003 0000000b 00000004     ................
   13bac:	ffff00ff 00ffffff 00000000 0000001b     ................
   13bbc:	0000000b 00000004 ffff00ff 00ffffff     ................
   13bcc:	00000000 0000001c 00000006 00000000     ................
   13bdc:	ffff00ff 00ffffff 00000000 00000018     ................
   13bec:	00000006 00000000 ffff00ff 00ffffff     ................
   13bfc:	00000000 00000019 00000006 00000000     ................
   13c0c:	ffff00ff 00ffffff 00000001 00000016     ................
   13c1c:	00000003 00000000 ffff00ff 00ffffff     ................
   13c2c:	00000001 00000017 00000003 00000000     ................
   13c3c:	ffff00ff 00ffffff 00000000 00000016     ................
   13c4c:	00000002 00000000 ffff00ff 00ffffff     ................
   13c5c:	00000000 00000017 00000002 00000000     ................
   13c6c:	ffff00ff 00ffffff 00000000 00000013     ................
   13c7c:	00000002 00000000 ffff00ff 00ffffff     ................
   13c8c:	00000000 00000010 00000002 00000000     ................
   13c9c:	ffff00ff 00ffffff 00000000 00000012     ................
   13cac:	00000002 00000000 ffff00ff 00ffffff     ................
   13cbc:	00000000 00000011 00000002 00000000     ................
   13ccc:	ffff00ff 00ffffff 00000000 0000000d     ................
   13cdc:	00000004 0000000c 000100ff 000dffff     ................
   13cec:	00000000 00000015 00000005 0000000c     ................
   13cfc:	000300ff 00ffffff 00000000 00000006     ................
   13d0c:	00000004 0000000c 010000ff 00ffffff     ................
   13d1c:	00000000 00000007 00000004 0000000c     ................
   13d2c:	010100ff 00ffffff 00000000 00000002     ................
   13d3c:	00000001 00000002 ffff0014 0002ffff     ................

00013d4c <_ZL4font>:
   13d4c:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   13d5c:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   13d6c:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   13d7c:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   13d8c:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   13d9c:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   13dac:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   13dbc:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   13dcc:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   13ddc:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   13dec:	00000000 5f000000 07000000 14000700     ......._........
   13dfc:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   13e0c:	00502056 00030708 41221c00 22410000     V P......."A..A"
   13e1c:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   13e2c:	08080800 00000808 20006060 02040810     ........``. ....
   13e3c:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   13e4c:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   13e5c:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   13e6c:	00001e29 00000014 00003440 22140800     ).......@4....."
   13e7c:	14141441 41001414 02081422 06095901     A......A"....Y..
   13e8c:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   13e9c:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   13eac:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   13ebc:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   13ecc:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   13edc:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   13eec:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   13efc:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   13f0c:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   13f1c:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   13f2c:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   13f3c:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   13f4c:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   13f5c:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   13f6c:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   13f7c:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   13f8c:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   13f9c:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   13fac:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   13fbc:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   13fcc:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   13fdc:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   13fec:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   13ffc:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   1400c:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   1401c:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   1402c:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   1403c:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   1404c:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   1405c:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   1406c:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   1407c:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   1408c:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   1409c:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   140ac:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   140bc:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   140cc:	00ff0000 ff101010 14141400 101000ff     ................
   140dc:	10ff00ff f010f010 fc141414 f7141400     ................
   140ec:	0000ff00 14ff00ff fc04f414 10171414     ................
   140fc:	1f10101f 14141f10 10001f14 00f01010     ................
   1410c:	1f000000 10101010 1010101f 0010f010     ................
   1411c:	10ff0000 10101010 10101010 000010ff     ................
   1412c:	0014ff00 ff00ff00 101f0000 fc000017     ................
   1413c:	1414f404 14171017 f404f414 00ff0000     ................
   1414c:	141414f7 14141414 14f700f7 14171414     ................
   1415c:	101f1010 1414141f 101014f4 00f010f0     ................
   1416c:	1f101f00 1f000000 00000014 000014fc     ................
   1417c:	10f010f0 ff10ff10 ff141414 10101014     ................
   1418c:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   1419c:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   141ac:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   141bc:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   141cc:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   141dc:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   141ec:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   141fc:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   1420c:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   1421c:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   1422c:	00000018 30001010 0101ff40 01011f00     .......0@.......
   1423c:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

0001424c <_ZTV12Adafruit_GFX>:
	...
   14254:	0000d3dd 0000313f 0000311d 0000312f     ....?1...1../1..
   14264:	0000d6f7 0000c797 0000c7a7 0000c8a5     ................
   14274:	0000c7f5 0000c84d 0000c53d 0000c913     ....M...=.......
   14284:	0000d64b 0000d6e1 0000c923 0000c9b1     K.......#.......
   14294:	0000ca43 0000caf7 0000cb33 0000cceb     C.......3.......

000142a4 <_ZTV7Serial_>:
	...
   142ac:	0000e8a5 0000e869 0000e7c3 0000e84d     ....i.......M...
   142bc:	0000e7a5 0000e811 0000e7d5 0000f61c     ................
   142cc:	0000f5fe 0000f5b8 0000f4d6 0000f5b8     ................
   142dc:	0000f5f0 0000f5b8 0000f4d6 0000f5fe     ................
   142ec:	0000f5fe 0000f5f0 0000f4d6 0000f4ce     ................
   142fc:	0000f4ce 0000f4ce 0000f834 0000fe7c     ........4...|...
   1430c:	0000fd3c 0000fd3c 0000fd38 0000fe54     <...<...8...T...
   1431c:	0000fe54 0000fe46 0000fd38 0000fe54     T...F...8...T...
   1432c:	0000fe46 0000fe54 0000fd38 0000fe5c     F...T...8...\...
   1433c:	0000fe5c 0000fe5c 00010060 7566202c     \...\...`..., fu
   1434c:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
   1435c:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
   1436c:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
   1437c:	73256425 000a7325                       %d%s%s..

00014384 <_global_impure_ptr>:
   14384:	200000a8 4f500043 00584953 2d23002e     ... C.POSIX...#-
   14394:	00202b30 004c6c68 45676665 49004746     0+ .hlL.efgEFG.I
   143a4:	6900464e 4e00666e 6e004e41 30006e61     NF.inf.NAN.nan.0
   143b4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   143c4:	31300046 35343332 39383736 64636261     F.0123456789abcd
   143d4:	00006665                                         ef.

000143d7 <_ctype_>:
   143d7:	20202000 20202020 28282020 20282828     .         ((((( 
   143e7:	20202020 20202020 20202020 20202020                     
   143f7:	10108820 10101010 10101010 10101010      ...............
   14407:	04040410 04040404 10040404 10101010     ................
   14417:	41411010 41414141 01010101 01010101     ..AAAAAA........
   14427:	01010101 01010101 01010101 10101010     ................
   14437:	42421010 42424242 02020202 02020202     ..BBBBBB........
   14447:	02020202 02020202 02020202 10101010     ................
   14457:	00000020 00000000 00000000 00000000      ...............
	...
   144d7:	666e4900 74696e69 614e0079 0000004e     .Infinity.NaN...
	...

000144e8 <__sf_fake_stderr>:
	...

00014508 <__sf_fake_stdin>:
	...

00014528 <__sf_fake_stdout>:
	...

00014548 <__mprec_bigtens>:
   14548:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   14558:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   14568:	7f73bf3c 75154fdd                       <.s..O.u

00014570 <__mprec_tens>:
   14570:	00000000 3ff00000 00000000 40240000     .......?......$@
   14580:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   14590:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   145a0:	00000000 412e8480 00000000 416312d0     .......A......cA
   145b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   145c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   145d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   145e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   145f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   14600:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   14610:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   14620:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   14630:	79d99db4 44ea7843                       ...yCx.D

00014638 <p05.6047>:
   14638:	00000005 00000019 0000007d              ........}...

00014644 <__EH_FRAME_BEGIN__>:
   14644:	00000000                                ....

Disassembly of section .ramfunc:

00014648 <banzai>:
static void banzai() {
   14648:	b580      	push	{r7, lr}
   1464a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
   1464c:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
   1464e:	4b17      	ldr	r3, [pc, #92]	; (146ac <banzai+0x64>)
   14650:	3304      	adds	r3, #4
   14652:	4a17      	ldr	r2, [pc, #92]	; (146b0 <banzai+0x68>)
   14654:	4293      	cmp	r3, r2
   14656:	d925      	bls.n	146a4 <banzai+0x5c>
	while (!nvmReady())
   14658:	f7ee ff70 	bl	353c <nvmReady>
   1465c:	0003      	movs	r3, r0
   1465e:	001a      	movs	r2, r3
   14660:	2301      	movs	r3, #1
   14662:	4053      	eors	r3, r2
   14664:	b2db      	uxtb	r3, r3
   14666:	2b00      	cmp	r3, #0
   14668:	d000      	beq.n	1466c <banzai+0x24>
   1466a:	e7f5      	b.n	14658 <banzai+0x10>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   1466c:	4911      	ldr	r1, [pc, #68]	; (146b4 <banzai+0x6c>)
   1466e:	4b11      	ldr	r3, [pc, #68]	; (146b4 <banzai+0x6c>)
   14670:	8b1b      	ldrh	r3, [r3, #24]
   14672:	b29b      	uxth	r3, r3
   14674:	2220      	movs	r2, #32
   14676:	32ff      	adds	r2, #255	; 0xff
   14678:	4313      	orrs	r3, r2
   1467a:	b29b      	uxth	r3, r3
   1467c:	830b      	strh	r3, [r1, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
   1467e:	4b0d      	ldr	r3, [pc, #52]	; (146b4 <banzai+0x6c>)
   14680:	4a0a      	ldr	r2, [pc, #40]	; (146ac <banzai+0x64>)
   14682:	3204      	adds	r2, #4
   14684:	0892      	lsrs	r2, r2, #2
   14686:	0052      	lsls	r2, r2, #1
   14688:	61da      	str	r2, [r3, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
   1468a:	4b0a      	ldr	r3, [pc, #40]	; (146b4 <banzai+0x6c>)
   1468c:	4a0a      	ldr	r2, [pc, #40]	; (146b8 <banzai+0x70>)
   1468e:	801a      	strh	r2, [r3, #0]
	while (!nvmReady())
   14690:	f7ee ff54 	bl	353c <nvmReady>
   14694:	0003      	movs	r3, r0
   14696:	001a      	movs	r2, r3
   14698:	2301      	movs	r3, #1
   1469a:	4053      	eors	r3, r2
   1469c:	b2db      	uxtb	r3, r3
   1469e:	2b00      	cmp	r3, #0
   146a0:	d001      	beq.n	146a6 <banzai+0x5e>
   146a2:	e7f5      	b.n	14690 <banzai+0x48>
		goto reset;
   146a4:	46c0      	nop			; (mov r8, r8)
	NVIC_SystemReset() ;
   146a6:	f7ee ff39 	bl	351c <NVIC_SystemReset>
	while (true);
   146aa:	e7fe      	b.n	146aa <banzai+0x62>
   146ac:	00000000 	.word	0x00000000
   146b0:	00000203 	.word	0x00000203
   146b4:	41004000 	.word	0x41004000
   146b8:	ffffa502 	.word	0xffffa502
