
arduino-noughts-and-crosses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014448  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000074  00014448  00014448  00024448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002a0  20000000  000144bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000ce8  200002a0  0001475c  000302a0  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
  6 .debug_info   000a095f  00000000  00000000  00030321  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000aa70  00000000  00000000  000d0c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000acae  00000000  00000000  000db6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001bf8  00000000  00000000  000e639e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001c78  00000000  00000000  000e7f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021386  00000000  00000000  000e9c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a060  00000000  00000000  0010af94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000878e9  00000000  00000000  00124ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000784c  00000000  00000000  001ac8e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stab         000000cc  00000000  00000000  001b412c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      000001b9  00000000  00000000  001b41f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 80 00 20 45 2d 00 00 3d 2d 00 00 3d 2d 00 00     ... E-..=-..=-..
	...
      2c:	3d 2d 00 00 00 00 00 00 00 00 00 00 3d 2d 00 00     =-..........=-..
      3c:	c9 2d 00 00 3d 2d 00 00 3d 2d 00 00 3d 2d 00 00     .-..=-..=-..=-..
      4c:	3d 2d 00 00 3d 2d 00 00 3d 2d 00 00 3d 2d 00 00     =-..=-..=-..=-..
      5c:	e1 2d 00 00 3d 2d 00 00 6d c1 00 00 3d 2d 00 00     .-..=-..m...=-..
      6c:	3d 2d 00 00 35 bf 00 00 3d 2d 00 00 85 c1 00 00     =-..5...=-......
      7c:	3d 2d 00 00 3d 2d 00 00 3d 2d 00 00 3d 2d 00 00     =-..=-..=-..=-..
      8c:	3d 2d 00 00 00 00 00 00 3d 2d 00 00 3d 2d 00 00     =-......=-..=-..
      9c:	3d 2d 00 00 3d 2d 00 00 3d 2d 00 00 3d 2d 00 00     =-..=-..=-..=-..
      ac:	3d 2d 00 00 00 00 00 00                             =-......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002a0 	.word	0x200002a0
      d4:	00000000 	.word	0x00000000
      d8:	00014444 	.word	0x00014444

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002a4 	.word	0x200002a4
     108:	00014444 	.word	0x00014444
     10c:	2000029c 	.word	0x2000029c
     110:	00000000 	.word	0x00000000

00000114 <_Z6read16RN5SDLib4FileE>:

// These read 16-bit and 32-bit types from the SD card file.
// BMP data is stored little-endian, Arduino is little-endian too.
// May need to reverse subscript order if porting elsewhere.

uint16_t read16(File &f) {
     114:	b590      	push	{r4, r7, lr}
     116:	b085      	sub	sp, #20
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	uint16_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     11c:	230e      	movs	r3, #14
     11e:	18fc      	adds	r4, r7, r3
     120:	687b      	ldr	r3, [r7, #4]
     122:	681b      	ldr	r3, [r3, #0]
     124:	3314      	adds	r3, #20
     126:	681b      	ldr	r3, [r3, #0]
     128:	687a      	ldr	r2, [r7, #4]
     12a:	0010      	movs	r0, r2
     12c:	4798      	blx	r3
     12e:	0003      	movs	r3, r0
     130:	b2db      	uxtb	r3, r3
     132:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read(); // MSB
     134:	230e      	movs	r3, #14
     136:	18fc      	adds	r4, r7, r3
     138:	3401      	adds	r4, #1
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	681b      	ldr	r3, [r3, #0]
     13e:	3314      	adds	r3, #20
     140:	681b      	ldr	r3, [r3, #0]
     142:	687a      	ldr	r2, [r7, #4]
     144:	0010      	movs	r0, r2
     146:	4798      	blx	r3
     148:	0003      	movs	r3, r0
     14a:	b2db      	uxtb	r3, r3
     14c:	7023      	strb	r3, [r4, #0]
	return result;
     14e:	230e      	movs	r3, #14
     150:	18fb      	adds	r3, r7, r3
     152:	881b      	ldrh	r3, [r3, #0]
}
     154:	0018      	movs	r0, r3
     156:	46bd      	mov	sp, r7
     158:	b005      	add	sp, #20
     15a:	bd90      	pop	{r4, r7, pc}

0000015c <_Z6read32RN5SDLib4FileE>:

uint32_t read32(File &f) {
     15c:	b590      	push	{r4, r7, lr}
     15e:	b085      	sub	sp, #20
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
	uint32_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     164:	230c      	movs	r3, #12
     166:	18fc      	adds	r4, r7, r3
     168:	687b      	ldr	r3, [r7, #4]
     16a:	681b      	ldr	r3, [r3, #0]
     16c:	3314      	adds	r3, #20
     16e:	681b      	ldr	r3, [r3, #0]
     170:	687a      	ldr	r2, [r7, #4]
     172:	0010      	movs	r0, r2
     174:	4798      	blx	r3
     176:	0003      	movs	r3, r0
     178:	b2db      	uxtb	r3, r3
     17a:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read();
     17c:	230c      	movs	r3, #12
     17e:	18fc      	adds	r4, r7, r3
     180:	3401      	adds	r4, #1
     182:	687b      	ldr	r3, [r7, #4]
     184:	681b      	ldr	r3, [r3, #0]
     186:	3314      	adds	r3, #20
     188:	681b      	ldr	r3, [r3, #0]
     18a:	687a      	ldr	r2, [r7, #4]
     18c:	0010      	movs	r0, r2
     18e:	4798      	blx	r3
     190:	0003      	movs	r3, r0
     192:	b2db      	uxtb	r3, r3
     194:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[2] = f.read();
     196:	230c      	movs	r3, #12
     198:	18fc      	adds	r4, r7, r3
     19a:	3402      	adds	r4, #2
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	3314      	adds	r3, #20
     1a2:	681b      	ldr	r3, [r3, #0]
     1a4:	687a      	ldr	r2, [r7, #4]
     1a6:	0010      	movs	r0, r2
     1a8:	4798      	blx	r3
     1aa:	0003      	movs	r3, r0
     1ac:	b2db      	uxtb	r3, r3
     1ae:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[3] = f.read(); // MSB
     1b0:	230c      	movs	r3, #12
     1b2:	18fc      	adds	r4, r7, r3
     1b4:	3403      	adds	r4, #3
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	3314      	adds	r3, #20
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	687a      	ldr	r2, [r7, #4]
     1c0:	0010      	movs	r0, r2
     1c2:	4798      	blx	r3
     1c4:	0003      	movs	r3, r0
     1c6:	b2db      	uxtb	r3, r3
     1c8:	7023      	strb	r3, [r4, #0]
	return result;
     1ca:	68fb      	ldr	r3, [r7, #12]
}
     1cc:	0018      	movs	r0, r3
     1ce:	46bd      	mov	sp, r7
     1d0:	b005      	add	sp, #20
     1d2:	bd90      	pop	{r4, r7, pc}

000001d4 <_ZN5PrintaSEOS_>:
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     1d4:	b580      	push	{r7, lr}
     1d6:	b082      	sub	sp, #8
     1d8:	af00      	add	r7, sp, #0
     1da:	6078      	str	r0, [r7, #4]
     1dc:	6039      	str	r1, [r7, #0]
     1de:	683b      	ldr	r3, [r7, #0]
     1e0:	685a      	ldr	r2, [r3, #4]
     1e2:	687b      	ldr	r3, [r7, #4]
     1e4:	605a      	str	r2, [r3, #4]
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	0018      	movs	r0, r3
     1ea:	46bd      	mov	sp, r7
     1ec:	b002      	add	sp, #8
     1ee:	bd80      	pop	{r7, pc}

000001f0 <_ZN6StreamaSEOS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     1f0:	b580      	push	{r7, lr}
     1f2:	b082      	sub	sp, #8
     1f4:	af00      	add	r7, sp, #0
     1f6:	6078      	str	r0, [r7, #4]
     1f8:	6039      	str	r1, [r7, #0]
     1fa:	687b      	ldr	r3, [r7, #4]
     1fc:	683a      	ldr	r2, [r7, #0]
     1fe:	0011      	movs	r1, r2
     200:	0018      	movs	r0, r3
     202:	f7ff ffe7 	bl	1d4 <_ZN5PrintaSEOS_>
     206:	683b      	ldr	r3, [r7, #0]
     208:	689a      	ldr	r2, [r3, #8]
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	609a      	str	r2, [r3, #8]
     20e:	683b      	ldr	r3, [r7, #0]
     210:	68da      	ldr	r2, [r3, #12]
     212:	687b      	ldr	r3, [r7, #4]
     214:	60da      	str	r2, [r3, #12]
     216:	687b      	ldr	r3, [r7, #4]
     218:	0018      	movs	r0, r3
     21a:	46bd      	mov	sp, r7
     21c:	b002      	add	sp, #8
     21e:	bd80      	pop	{r7, pc}

00000220 <_ZN5SDLib4FileaSEOS0_>:
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
     220:	b580      	push	{r7, lr}
     222:	b082      	sub	sp, #8
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
     228:	6039      	str	r1, [r7, #0]
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	683a      	ldr	r2, [r7, #0]
     22e:	0011      	movs	r1, r2
     230:	0018      	movs	r0, r3
     232:	f7ff ffdd 	bl	1f0 <_ZN6StreamaSEOS_>
     236:	687b      	ldr	r3, [r7, #4]
     238:	3310      	adds	r3, #16
     23a:	0019      	movs	r1, r3
     23c:	220c      	movs	r2, #12
     23e:	683b      	ldr	r3, [r7, #0]
     240:	3310      	adds	r3, #16
     242:	2a00      	cmp	r2, #0
     244:	db05      	blt.n	252 <_ZN5SDLib4FileaSEOS0_+0x32>
     246:	7818      	ldrb	r0, [r3, #0]
     248:	7008      	strb	r0, [r1, #0]
     24a:	3101      	adds	r1, #1
     24c:	3301      	adds	r3, #1
     24e:	3a01      	subs	r2, #1
     250:	e7f7      	b.n	242 <_ZN5SDLib4FileaSEOS0_+0x22>
     252:	683b      	ldr	r3, [r7, #0]
     254:	6a1a      	ldr	r2, [r3, #32]
     256:	687b      	ldr	r3, [r7, #4]
     258:	621a      	str	r2, [r3, #32]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	0018      	movs	r0, r3
     25e:	46bd      	mov	sp, r7
     260:	b002      	add	sp, #8
     262:	bd80      	pop	{r7, pc}

00000264 <_Z10drawBitmapcss>:

void drawBitmap(char fileInput, int16_t x, int16_t y) {
     264:	b590      	push	{r4, r7, lr}
     266:	b0eb      	sub	sp, #428	; 0x1ac
     268:	af02      	add	r7, sp, #8
     26a:	0004      	movs	r4, r0
     26c:	0008      	movs	r0, r1
     26e:	0011      	movs	r1, r2
     270:	4bbb      	ldr	r3, [pc, #748]	; (560 <_Z10drawBitmapcss+0x2fc>)
     272:	22d0      	movs	r2, #208	; 0xd0
     274:	0052      	lsls	r2, r2, #1
     276:	4694      	mov	ip, r2
     278:	44bc      	add	ip, r7
     27a:	4463      	add	r3, ip
     27c:	1c22      	adds	r2, r4, #0
     27e:	701a      	strb	r2, [r3, #0]
     280:	4bb8      	ldr	r3, [pc, #736]	; (564 <_Z10drawBitmapcss+0x300>)
     282:	22d0      	movs	r2, #208	; 0xd0
     284:	0052      	lsls	r2, r2, #1
     286:	4694      	mov	ip, r2
     288:	44bc      	add	ip, r7
     28a:	4463      	add	r3, ip
     28c:	1c02      	adds	r2, r0, #0
     28e:	801a      	strh	r2, [r3, #0]
     290:	4bb5      	ldr	r3, [pc, #724]	; (568 <_Z10drawBitmapcss+0x304>)
     292:	22d0      	movs	r2, #208	; 0xd0
     294:	0052      	lsls	r2, r2, #1
     296:	4694      	mov	ip, r2
     298:	44bc      	add	ip, r7
     29a:	4463      	add	r3, ip
     29c:	1c0a      	adds	r2, r1, #0
     29e:	801a      	strh	r2, [r3, #0]

	File bmpFile;
     2a0:	238a      	movs	r3, #138	; 0x8a
     2a2:	005b      	lsls	r3, r3, #1
     2a4:	18fb      	adds	r3, r7, r3
     2a6:	0018      	movs	r0, r3
     2a8:	f008 fb10 	bl	88cc <_ZN5SDLib4FileC1Ev>
	int bmpWidth, bmpHeight;   // W+H in pixels
	uint8_t bmpDepth;              // Bit depth (currently must be 24)
	uint32_t bmpImageoffset;        // Start of image data in file
	uint32_t rowSize;               // Not always = bmpWidth; may have padding
	uint8_t sdbuffer[3 * BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     2ac:	239c      	movs	r3, #156	; 0x9c
     2ae:	33ff      	adds	r3, #255	; 0xff
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	22ff      	movs	r2, #255	; 0xff
     2b4:	701a      	strb	r2, [r3, #0]
	boolean goodBmp = false;       // Set to true on valid header parse
     2b6:	23cd      	movs	r3, #205	; 0xcd
     2b8:	005b      	lsls	r3, r3, #1
     2ba:	18fb      	adds	r3, r7, r3
     2bc:	2200      	movs	r2, #0
     2be:	701a      	strb	r2, [r3, #0]
	boolean flip = true;        // BMP is stored bottom-to-top
     2c0:	239a      	movs	r3, #154	; 0x9a
     2c2:	33ff      	adds	r3, #255	; 0xff
     2c4:	18fb      	adds	r3, r7, r3
     2c6:	2201      	movs	r2, #1
     2c8:	701a      	strb	r2, [r3, #0]
	int w, h, row, col, x2, y2, bx1, by1;
	uint8_t r, g, b;
	uint32_t pos = 0, startTime = millis();
     2ca:	2300      	movs	r3, #0
     2cc:	22be      	movs	r2, #190	; 0xbe
     2ce:	0052      	lsls	r2, r2, #1
     2d0:	18ba      	adds	r2, r7, r2
     2d2:	6013      	str	r3, [r2, #0]
     2d4:	f002 fda0 	bl	2e18 <millis>
     2d8:	0003      	movs	r3, r0
     2da:	22bc      	movs	r2, #188	; 0xbc
     2dc:	0052      	lsls	r2, r2, #1
     2de:	18ba      	adds	r2, r7, r2
     2e0:	6013      	str	r3, [r2, #0]
	char filename[6] = {fileInput, '.', 'b', 'm', 'p'};
     2e2:	4ba2      	ldr	r3, [pc, #648]	; (56c <_Z10drawBitmapcss+0x308>)
     2e4:	22d0      	movs	r2, #208	; 0xd0
     2e6:	0052      	lsls	r2, r2, #1
     2e8:	4694      	mov	ip, r2
     2ea:	44bc      	add	ip, r7
     2ec:	4463      	add	r3, ip
     2ee:	0018      	movs	r0, r3
     2f0:	2306      	movs	r3, #6
     2f2:	001a      	movs	r2, r3
     2f4:	2100      	movs	r1, #0
     2f6:	f010 faa5 	bl	10844 <memset>
     2fa:	4b9c      	ldr	r3, [pc, #624]	; (56c <_Z10drawBitmapcss+0x308>)
     2fc:	22d0      	movs	r2, #208	; 0xd0
     2fe:	0052      	lsls	r2, r2, #1
     300:	4694      	mov	ip, r2
     302:	44bc      	add	ip, r7
     304:	4463      	add	r3, ip
     306:	222e      	movs	r2, #46	; 0x2e
     308:	705a      	strb	r2, [r3, #1]
     30a:	4b98      	ldr	r3, [pc, #608]	; (56c <_Z10drawBitmapcss+0x308>)
     30c:	22d0      	movs	r2, #208	; 0xd0
     30e:	0052      	lsls	r2, r2, #1
     310:	4694      	mov	ip, r2
     312:	44bc      	add	ip, r7
     314:	4463      	add	r3, ip
     316:	2262      	movs	r2, #98	; 0x62
     318:	709a      	strb	r2, [r3, #2]
     31a:	4b94      	ldr	r3, [pc, #592]	; (56c <_Z10drawBitmapcss+0x308>)
     31c:	22d0      	movs	r2, #208	; 0xd0
     31e:	0052      	lsls	r2, r2, #1
     320:	4694      	mov	ip, r2
     322:	44bc      	add	ip, r7
     324:	4463      	add	r3, ip
     326:	226d      	movs	r2, #109	; 0x6d
     328:	70da      	strb	r2, [r3, #3]
     32a:	4b90      	ldr	r3, [pc, #576]	; (56c <_Z10drawBitmapcss+0x308>)
     32c:	22d0      	movs	r2, #208	; 0xd0
     32e:	0052      	lsls	r2, r2, #1
     330:	4694      	mov	ip, r2
     332:	44bc      	add	ip, r7
     334:	4463      	add	r3, ip
     336:	2270      	movs	r2, #112	; 0x70
     338:	711a      	strb	r2, [r3, #4]
     33a:	4b8c      	ldr	r3, [pc, #560]	; (56c <_Z10drawBitmapcss+0x308>)
     33c:	22d0      	movs	r2, #208	; 0xd0
     33e:	0052      	lsls	r2, r2, #1
     340:	4694      	mov	ip, r2
     342:	44bc      	add	ip, r7
     344:	4463      	add	r3, ip
     346:	4a86      	ldr	r2, [pc, #536]	; (560 <_Z10drawBitmapcss+0x2fc>)
     348:	21d0      	movs	r1, #208	; 0xd0
     34a:	0049      	lsls	r1, r1, #1
     34c:	468c      	mov	ip, r1
     34e:	44bc      	add	ip, r7
     350:	4462      	add	r2, ip
     352:	7812      	ldrb	r2, [r2, #0]
     354:	701a      	strb	r2, [r3, #0]

	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     356:	4b86      	ldr	r3, [pc, #536]	; (570 <_Z10drawBitmapcss+0x30c>)
     358:	0018      	movs	r0, r3
     35a:	f00d f8a9 	bl	d4b0 <_ZNK12Adafruit_GFX5widthEv>
     35e:	0003      	movs	r3, r0
     360:	001a      	movs	r2, r3
     362:	4b80      	ldr	r3, [pc, #512]	; (564 <_Z10drawBitmapcss+0x300>)
     364:	21d0      	movs	r1, #208	; 0xd0
     366:	0049      	lsls	r1, r1, #1
     368:	468c      	mov	ip, r1
     36a:	44bc      	add	ip, r7
     36c:	4463      	add	r3, ip
     36e:	2100      	movs	r1, #0
     370:	5e5b      	ldrsh	r3, [r3, r1]
     372:	4293      	cmp	r3, r2
     374:	da0f      	bge.n	396 <_Z10drawBitmapcss+0x132>
     376:	4b7e      	ldr	r3, [pc, #504]	; (570 <_Z10drawBitmapcss+0x30c>)
     378:	0018      	movs	r0, r3
     37a:	f00d f8a4 	bl	d4c6 <_ZNK12Adafruit_GFX6heightEv>
     37e:	0003      	movs	r3, r0
     380:	001a      	movs	r2, r3
     382:	4b79      	ldr	r3, [pc, #484]	; (568 <_Z10drawBitmapcss+0x304>)
     384:	21d0      	movs	r1, #208	; 0xd0
     386:	0049      	lsls	r1, r1, #1
     388:	468c      	mov	ip, r1
     38a:	44bc      	add	ip, r7
     38c:	4463      	add	r3, ip
     38e:	2100      	movs	r1, #0
     390:	5e5b      	ldrsh	r3, [r3, r1]
     392:	4293      	cmp	r3, r2
     394:	db01      	blt.n	39a <_Z10drawBitmapcss+0x136>
     396:	2301      	movs	r3, #1
     398:	e000      	b.n	39c <_Z10drawBitmapcss+0x138>
     39a:	2300      	movs	r3, #0
     39c:	2b00      	cmp	r3, #0
     39e:	d000      	beq.n	3a2 <_Z10drawBitmapcss+0x13e>
     3a0:	e3ae      	b.n	b00 <_Z10drawBitmapcss+0x89c>

	Serial.println();
     3a2:	4b74      	ldr	r3, [pc, #464]	; (574 <_Z10drawBitmapcss+0x310>)
     3a4:	0018      	movs	r0, r3
     3a6:	f002 fec7 	bl	3138 <_ZN5Print7printlnEv>
	Serial.print(F("Loading image '"));
     3aa:	4a73      	ldr	r2, [pc, #460]	; (578 <_Z10drawBitmapcss+0x314>)
     3ac:	4b71      	ldr	r3, [pc, #452]	; (574 <_Z10drawBitmapcss+0x310>)
     3ae:	0011      	movs	r1, r2
     3b0:	0018      	movs	r0, r3
     3b2:	f002 fdec 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(filename);
     3b6:	230c      	movs	r3, #12
     3b8:	18fa      	adds	r2, r7, r3
     3ba:	4b6e      	ldr	r3, [pc, #440]	; (574 <_Z10drawBitmapcss+0x310>)
     3bc:	0011      	movs	r1, r2
     3be:	0018      	movs	r0, r3
     3c0:	f002 fdf5 	bl	2fae <_ZN5Print5printEPKc>
	Serial.println('\'');
     3c4:	4b6b      	ldr	r3, [pc, #428]	; (574 <_Z10drawBitmapcss+0x310>)
     3c6:	2127      	movs	r1, #39	; 0x27
     3c8:	0018      	movs	r0, r3
     3ca:	f002 fee1 	bl	3190 <_ZN5Print7printlnEc>

	// Todo (BROKEN)
	// Open requested file on SD card
	if ((bmpFile = SD.open(filename))) {
     3ce:	239c      	movs	r3, #156	; 0x9c
     3d0:	005b      	lsls	r3, r3, #1
     3d2:	18f8      	adds	r0, r7, r3
     3d4:	230c      	movs	r3, #12
     3d6:	18fa      	adds	r2, r7, r3
     3d8:	4968      	ldr	r1, [pc, #416]	; (57c <_Z10drawBitmapcss+0x318>)
     3da:	2301      	movs	r3, #1
     3dc:	f008 fd9e 	bl	8f1c <_ZN5SDLib7SDClass4openEPKch>
     3e0:	239c      	movs	r3, #156	; 0x9c
     3e2:	005b      	lsls	r3, r3, #1
     3e4:	18fa      	adds	r2, r7, r3
     3e6:	238a      	movs	r3, #138	; 0x8a
     3e8:	005b      	lsls	r3, r3, #1
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	0011      	movs	r1, r2
     3ee:	0018      	movs	r0, r3
     3f0:	f7ff ff16 	bl	220 <_ZN5SDLib4FileaSEOS0_>
     3f4:	0003      	movs	r3, r0
     3f6:	0018      	movs	r0, r3
     3f8:	f008 fbab 	bl	8b52 <_ZN5SDLib4FilecvbEv>
     3fc:	1e03      	subs	r3, r0, #0
     3fe:	d005      	beq.n	40c <_Z10drawBitmapcss+0x1a8>
		Serial.println(F("File (maybe) not found"));
     400:	4a5f      	ldr	r2, [pc, #380]	; (580 <_Z10drawBitmapcss+0x31c>)
     402:	4b5c      	ldr	r3, [pc, #368]	; (574 <_Z10drawBitmapcss+0x310>)
     404:	0011      	movs	r1, r2
     406:	0018      	movs	r0, r3
     408:	f002 fe7c 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
		// return;
	}

	// Parse BMP header
	Serial.println(F("Start parse"));
     40c:	4a5d      	ldr	r2, [pc, #372]	; (584 <_Z10drawBitmapcss+0x320>)
     40e:	4b59      	ldr	r3, [pc, #356]	; (574 <_Z10drawBitmapcss+0x310>)
     410:	0011      	movs	r1, r2
     412:	0018      	movs	r0, r3
     414:	f002 fe76 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     418:	238a      	movs	r3, #138	; 0x8a
     41a:	005b      	lsls	r3, r3, #1
     41c:	18fb      	adds	r3, r7, r3
     41e:	0018      	movs	r0, r3
     420:	f7ff fe78 	bl	114 <_Z6read16RN5SDLib4FileE>
     424:	0003      	movs	r3, r0
     426:	4a58      	ldr	r2, [pc, #352]	; (588 <_Z10drawBitmapcss+0x324>)
     428:	4694      	mov	ip, r2
     42a:	4463      	add	r3, ip
     42c:	425a      	negs	r2, r3
     42e:	4153      	adcs	r3, r2
     430:	b2db      	uxtb	r3, r3
     432:	2b00      	cmp	r3, #0
     434:	d100      	bne.n	438 <_Z10drawBitmapcss+0x1d4>
     436:	e349      	b.n	acc <_Z10drawBitmapcss+0x868>
		Serial.print(F("File size: "));
     438:	4a54      	ldr	r2, [pc, #336]	; (58c <_Z10drawBitmapcss+0x328>)
     43a:	4b4e      	ldr	r3, [pc, #312]	; (574 <_Z10drawBitmapcss+0x310>)
     43c:	0011      	movs	r1, r2
     43e:	0018      	movs	r0, r3
     440:	f002 fda5 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     444:	238a      	movs	r3, #138	; 0x8a
     446:	005b      	lsls	r3, r3, #1
     448:	18fb      	adds	r3, r7, r3
     44a:	0018      	movs	r0, r3
     44c:	f7ff fe86 	bl	15c <_Z6read32RN5SDLib4FileE>
     450:	0001      	movs	r1, r0
     452:	4b48      	ldr	r3, [pc, #288]	; (574 <_Z10drawBitmapcss+0x310>)
     454:	220a      	movs	r2, #10
     456:	0018      	movs	r0, r3
     458:	f002 fef2 	bl	3240 <_ZN5Print7printlnEmi>
		(void) read32(bmpFile); // Read & ignore creator bytes
     45c:	238a      	movs	r3, #138	; 0x8a
     45e:	005b      	lsls	r3, r3, #1
     460:	18fb      	adds	r3, r7, r3
     462:	0018      	movs	r0, r3
     464:	f7ff fe7a 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     468:	238a      	movs	r3, #138	; 0x8a
     46a:	005b      	lsls	r3, r3, #1
     46c:	18fb      	adds	r3, r7, r3
     46e:	0018      	movs	r0, r3
     470:	f7ff fe74 	bl	15c <_Z6read32RN5SDLib4FileE>
     474:	0003      	movs	r3, r0
     476:	22ba      	movs	r2, #186	; 0xba
     478:	0052      	lsls	r2, r2, #1
     47a:	18ba      	adds	r2, r7, r2
     47c:	6013      	str	r3, [r2, #0]
		Serial.print(F("Image Offset: "));
     47e:	4a44      	ldr	r2, [pc, #272]	; (590 <_Z10drawBitmapcss+0x32c>)
     480:	4b3c      	ldr	r3, [pc, #240]	; (574 <_Z10drawBitmapcss+0x310>)
     482:	0011      	movs	r1, r2
     484:	0018      	movs	r0, r3
     486:	f002 fd82 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(bmpImageoffset, DEC);
     48a:	23ba      	movs	r3, #186	; 0xba
     48c:	005b      	lsls	r3, r3, #1
     48e:	18fb      	adds	r3, r7, r3
     490:	6819      	ldr	r1, [r3, #0]
     492:	4b38      	ldr	r3, [pc, #224]	; (574 <_Z10drawBitmapcss+0x310>)
     494:	220a      	movs	r2, #10
     496:	0018      	movs	r0, r3
     498:	f002 fed2 	bl	3240 <_ZN5Print7printlnEmi>
		// Read DIB header
		Serial.print(F("Header size: "));
     49c:	4a3d      	ldr	r2, [pc, #244]	; (594 <_Z10drawBitmapcss+0x330>)
     49e:	4b35      	ldr	r3, [pc, #212]	; (574 <_Z10drawBitmapcss+0x310>)
     4a0:	0011      	movs	r1, r2
     4a2:	0018      	movs	r0, r3
     4a4:	f002 fd73 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     4a8:	238a      	movs	r3, #138	; 0x8a
     4aa:	005b      	lsls	r3, r3, #1
     4ac:	18fb      	adds	r3, r7, r3
     4ae:	0018      	movs	r0, r3
     4b0:	f7ff fe54 	bl	15c <_Z6read32RN5SDLib4FileE>
     4b4:	0001      	movs	r1, r0
     4b6:	4b2f      	ldr	r3, [pc, #188]	; (574 <_Z10drawBitmapcss+0x310>)
     4b8:	220a      	movs	r2, #10
     4ba:	0018      	movs	r0, r3
     4bc:	f002 fec0 	bl	3240 <_ZN5Print7printlnEmi>
		bmpWidth = read32(bmpFile);
     4c0:	238a      	movs	r3, #138	; 0x8a
     4c2:	005b      	lsls	r3, r3, #1
     4c4:	18fb      	adds	r3, r7, r3
     4c6:	0018      	movs	r0, r3
     4c8:	f7ff fe48 	bl	15c <_Z6read32RN5SDLib4FileE>
     4cc:	0003      	movs	r3, r0
     4ce:	22b8      	movs	r2, #184	; 0xb8
     4d0:	0052      	lsls	r2, r2, #1
     4d2:	18ba      	adds	r2, r7, r2
     4d4:	6013      	str	r3, [r2, #0]
		bmpHeight = read32(bmpFile);
     4d6:	238a      	movs	r3, #138	; 0x8a
     4d8:	005b      	lsls	r3, r3, #1
     4da:	18fb      	adds	r3, r7, r3
     4dc:	0018      	movs	r0, r3
     4de:	f7ff fe3d 	bl	15c <_Z6read32RN5SDLib4FileE>
     4e2:	0003      	movs	r3, r0
     4e4:	22ce      	movs	r2, #206	; 0xce
     4e6:	0052      	lsls	r2, r2, #1
     4e8:	18ba      	adds	r2, r7, r2
     4ea:	6013      	str	r3, [r2, #0]
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     4ec:	238a      	movs	r3, #138	; 0x8a
     4ee:	005b      	lsls	r3, r3, #1
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	0018      	movs	r0, r3
     4f4:	f7ff fe0e 	bl	114 <_Z6read16RN5SDLib4FileE>
     4f8:	0003      	movs	r3, r0
     4fa:	3b01      	subs	r3, #1
     4fc:	425a      	negs	r2, r3
     4fe:	4153      	adcs	r3, r2
     500:	b2db      	uxtb	r3, r3
     502:	2b00      	cmp	r3, #0
     504:	d100      	bne.n	508 <_Z10drawBitmapcss+0x2a4>
     506:	e2e1      	b.n	acc <_Z10drawBitmapcss+0x868>
			bmpDepth = read16(bmpFile); // bits per pixel
     508:	238a      	movs	r3, #138	; 0x8a
     50a:	005b      	lsls	r3, r3, #1
     50c:	18fb      	adds	r3, r7, r3
     50e:	0018      	movs	r0, r3
     510:	f7ff fe00 	bl	114 <_Z6read16RN5SDLib4FileE>
     514:	0003      	movs	r3, r0
     516:	001a      	movs	r2, r3
     518:	2370      	movs	r3, #112	; 0x70
     51a:	33ff      	adds	r3, #255	; 0xff
     51c:	18fb      	adds	r3, r7, r3
     51e:	701a      	strb	r2, [r3, #0]
			Serial.print(F("Bit Depth: "));
     520:	4a1d      	ldr	r2, [pc, #116]	; (598 <_Z10drawBitmapcss+0x334>)
     522:	4b14      	ldr	r3, [pc, #80]	; (574 <_Z10drawBitmapcss+0x310>)
     524:	0011      	movs	r1, r2
     526:	0018      	movs	r0, r3
     528:	f002 fd31 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(bmpDepth);
     52c:	2370      	movs	r3, #112	; 0x70
     52e:	33ff      	adds	r3, #255	; 0xff
     530:	18fb      	adds	r3, r7, r3
     532:	7819      	ldrb	r1, [r3, #0]
     534:	4b0f      	ldr	r3, [pc, #60]	; (574 <_Z10drawBitmapcss+0x310>)
     536:	220a      	movs	r2, #10
     538:	0018      	movs	r0, r3
     53a:	f002 fe46 	bl	31ca <_ZN5Print7printlnEhi>
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     53e:	2370      	movs	r3, #112	; 0x70
     540:	33ff      	adds	r3, #255	; 0xff
     542:	18fb      	adds	r3, r7, r3
     544:	781b      	ldrb	r3, [r3, #0]
     546:	2b18      	cmp	r3, #24
     548:	d128      	bne.n	59c <_Z10drawBitmapcss+0x338>
     54a:	238a      	movs	r3, #138	; 0x8a
     54c:	005b      	lsls	r3, r3, #1
     54e:	18fb      	adds	r3, r7, r3
     550:	0018      	movs	r0, r3
     552:	f7ff fe03 	bl	15c <_Z6read32RN5SDLib4FileE>
     556:	1e03      	subs	r3, r0, #0
     558:	d120      	bne.n	59c <_Z10drawBitmapcss+0x338>
     55a:	2301      	movs	r3, #1
     55c:	e01f      	b.n	59e <_Z10drawBitmapcss+0x33a>
     55e:	46c0      	nop			; (mov r8, r8)
     560:	fffffe67 	.word	0xfffffe67
     564:	fffffe64 	.word	0xfffffe64
     568:	fffffe62 	.word	0xfffffe62
     56c:	fffffe6c 	.word	0xfffffe6c
     570:	200002bc 	.word	0x200002bc
     574:	20000e94 	.word	0x20000e94
     578:	00013204 	.word	0x00013204
     57c:	200008f4 	.word	0x200008f4
     580:	00013214 	.word	0x00013214
     584:	0001322c 	.word	0x0001322c
     588:	ffffb2be 	.word	0xffffb2be
     58c:	00013238 	.word	0x00013238
     590:	00013244 	.word	0x00013244
     594:	00013254 	.word	0x00013254
     598:	00013264 	.word	0x00013264
     59c:	2300      	movs	r3, #0
     59e:	2b00      	cmp	r3, #0
     5a0:	d100      	bne.n	5a4 <_Z10drawBitmapcss+0x340>
     5a2:	e293      	b.n	acc <_Z10drawBitmapcss+0x868>

				goodBmp = true; // Supported BMP format -- proceed!
     5a4:	23cd      	movs	r3, #205	; 0xcd
     5a6:	005b      	lsls	r3, r3, #1
     5a8:	18fb      	adds	r3, r7, r3
     5aa:	2201      	movs	r2, #1
     5ac:	701a      	strb	r2, [r3, #0]
				Serial.print(F("Image size: "));
     5ae:	4ac0      	ldr	r2, [pc, #768]	; (8b0 <_Z10drawBitmapcss+0x64c>)
     5b0:	4bc0      	ldr	r3, [pc, #768]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5b2:	0011      	movs	r1, r2
     5b4:	0018      	movs	r0, r3
     5b6:	f002 fcea 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(bmpWidth);
     5ba:	23b8      	movs	r3, #184	; 0xb8
     5bc:	005b      	lsls	r3, r3, #1
     5be:	18fb      	adds	r3, r7, r3
     5c0:	6819      	ldr	r1, [r3, #0]
     5c2:	4bbc      	ldr	r3, [pc, #752]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5c4:	220a      	movs	r2, #10
     5c6:	0018      	movs	r0, r3
     5c8:	f002 fd2b 	bl	3022 <_ZN5Print5printEii>
				Serial.print('x');
     5cc:	4bb9      	ldr	r3, [pc, #740]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5ce:	2178      	movs	r1, #120	; 0x78
     5d0:	0018      	movs	r0, r3
     5d2:	f002 fcfc 	bl	2fce <_ZN5Print5printEc>
				Serial.println(bmpHeight);
     5d6:	23ce      	movs	r3, #206	; 0xce
     5d8:	005b      	lsls	r3, r3, #1
     5da:	18fb      	adds	r3, r7, r3
     5dc:	6819      	ldr	r1, [r3, #0]
     5de:	4bb5      	ldr	r3, [pc, #724]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5e0:	220a      	movs	r2, #10
     5e2:	0018      	movs	r0, r3
     5e4:	f002 fe11 	bl	320a <_ZN5Print7printlnEii>

				// BMP rows are padded (if needed) to 4-byte boundary
				rowSize = (bmpWidth * 3 + 3) & ~3;
     5e8:	23b8      	movs	r3, #184	; 0xb8
     5ea:	005b      	lsls	r3, r3, #1
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	681b      	ldr	r3, [r3, #0]
     5f0:	1c5a      	adds	r2, r3, #1
     5f2:	0013      	movs	r3, r2
     5f4:	005b      	lsls	r3, r3, #1
     5f6:	189b      	adds	r3, r3, r2
     5f8:	001a      	movs	r2, r3
     5fa:	2303      	movs	r3, #3
     5fc:	439a      	bics	r2, r3
     5fe:	0013      	movs	r3, r2
     600:	22b4      	movs	r2, #180	; 0xb4
     602:	0052      	lsls	r2, r2, #1
     604:	18ba      	adds	r2, r7, r2
     606:	6013      	str	r3, [r2, #0]

				// If bmpHeight is negative, image is in top-down order.
				// This is not canon but has been observed in the wild.
				if (bmpHeight < 0) {
     608:	23ce      	movs	r3, #206	; 0xce
     60a:	005b      	lsls	r3, r3, #1
     60c:	18fb      	adds	r3, r7, r3
     60e:	681b      	ldr	r3, [r3, #0]
     610:	2b00      	cmp	r3, #0
     612:	da0d      	bge.n	630 <_Z10drawBitmapcss+0x3cc>
					bmpHeight = -bmpHeight;
     614:	23ce      	movs	r3, #206	; 0xce
     616:	005b      	lsls	r3, r3, #1
     618:	18fb      	adds	r3, r7, r3
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	425b      	negs	r3, r3
     61e:	22ce      	movs	r2, #206	; 0xce
     620:	0052      	lsls	r2, r2, #1
     622:	18ba      	adds	r2, r7, r2
     624:	6013      	str	r3, [r2, #0]
					flip = false;
     626:	239a      	movs	r3, #154	; 0x9a
     628:	33ff      	adds	r3, #255	; 0xff
     62a:	18fb      	adds	r3, r7, r3
     62c:	2200      	movs	r2, #0
     62e:	701a      	strb	r2, [r3, #0]
				}

				// Crop area to be loaded
				x2 = x + bmpWidth - 1; // Lower-right corner
     630:	4ba1      	ldr	r3, [pc, #644]	; (8b8 <_Z10drawBitmapcss+0x654>)
     632:	22d0      	movs	r2, #208	; 0xd0
     634:	0052      	lsls	r2, r2, #1
     636:	4694      	mov	ip, r2
     638:	44bc      	add	ip, r7
     63a:	4463      	add	r3, ip
     63c:	2200      	movs	r2, #0
     63e:	5e9a      	ldrsh	r2, [r3, r2]
     640:	23b8      	movs	r3, #184	; 0xb8
     642:	005b      	lsls	r3, r3, #1
     644:	18fb      	adds	r3, r7, r3
     646:	681b      	ldr	r3, [r3, #0]
     648:	18d3      	adds	r3, r2, r3
     64a:	3b01      	subs	r3, #1
     64c:	22b2      	movs	r2, #178	; 0xb2
     64e:	0052      	lsls	r2, r2, #1
     650:	18ba      	adds	r2, r7, r2
     652:	6013      	str	r3, [r2, #0]
				y2 = y + bmpHeight - 1;
     654:	4b99      	ldr	r3, [pc, #612]	; (8bc <_Z10drawBitmapcss+0x658>)
     656:	22d0      	movs	r2, #208	; 0xd0
     658:	0052      	lsls	r2, r2, #1
     65a:	4694      	mov	ip, r2
     65c:	44bc      	add	ip, r7
     65e:	4463      	add	r3, ip
     660:	2200      	movs	r2, #0
     662:	5e9a      	ldrsh	r2, [r3, r2]
     664:	23ce      	movs	r3, #206	; 0xce
     666:	005b      	lsls	r3, r3, #1
     668:	18fb      	adds	r3, r7, r3
     66a:	681b      	ldr	r3, [r3, #0]
     66c:	18d3      	adds	r3, r2, r3
     66e:	3b01      	subs	r3, #1
     670:	22b0      	movs	r2, #176	; 0xb0
     672:	0052      	lsls	r2, r2, #1
     674:	18ba      	adds	r2, r7, r2
     676:	6013      	str	r3, [r2, #0]
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     678:	23b2      	movs	r3, #178	; 0xb2
     67a:	005b      	lsls	r3, r3, #1
     67c:	18fb      	adds	r3, r7, r3
     67e:	681b      	ldr	r3, [r3, #0]
     680:	2b00      	cmp	r3, #0
     682:	da00      	bge.n	686 <_Z10drawBitmapcss+0x422>
     684:	e209      	b.n	a9a <_Z10drawBitmapcss+0x836>
     686:	23b0      	movs	r3, #176	; 0xb0
     688:	005b      	lsls	r3, r3, #1
     68a:	18fb      	adds	r3, r7, r3
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	2b00      	cmp	r3, #0
     690:	da00      	bge.n	694 <_Z10drawBitmapcss+0x430>
     692:	e202      	b.n	a9a <_Z10drawBitmapcss+0x836>
					w = bmpWidth; // Width/height of section to load/display
     694:	23b8      	movs	r3, #184	; 0xb8
     696:	005b      	lsls	r3, r3, #1
     698:	18fb      	adds	r3, r7, r3
     69a:	681b      	ldr	r3, [r3, #0]
     69c:	22ca      	movs	r2, #202	; 0xca
     69e:	0052      	lsls	r2, r2, #1
     6a0:	18ba      	adds	r2, r7, r2
     6a2:	6013      	str	r3, [r2, #0]
					h = bmpHeight;
     6a4:	23ce      	movs	r3, #206	; 0xce
     6a6:	005b      	lsls	r3, r3, #1
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	22c8      	movs	r2, #200	; 0xc8
     6ae:	0052      	lsls	r2, r2, #1
     6b0:	18ba      	adds	r2, r7, r2
     6b2:	6013      	str	r3, [r2, #0]
					bx1 = by1 = 0; // UL coordinate in BMP file
     6b4:	2300      	movs	r3, #0
     6b6:	22c0      	movs	r2, #192	; 0xc0
     6b8:	0052      	lsls	r2, r2, #1
     6ba:	18ba      	adds	r2, r7, r2
     6bc:	6013      	str	r3, [r2, #0]
     6be:	23c0      	movs	r3, #192	; 0xc0
     6c0:	005b      	lsls	r3, r3, #1
     6c2:	18fb      	adds	r3, r7, r3
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	22c2      	movs	r2, #194	; 0xc2
     6c8:	0052      	lsls	r2, r2, #1
     6ca:	18ba      	adds	r2, r7, r2
     6cc:	6013      	str	r3, [r2, #0]
					if (x < 0) { // Clip left
     6ce:	4b7a      	ldr	r3, [pc, #488]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6d0:	22d0      	movs	r2, #208	; 0xd0
     6d2:	0052      	lsls	r2, r2, #1
     6d4:	4694      	mov	ip, r2
     6d6:	44bc      	add	ip, r7
     6d8:	4463      	add	r3, ip
     6da:	2200      	movs	r2, #0
     6dc:	5e9b      	ldrsh	r3, [r3, r2]
     6de:	2b00      	cmp	r3, #0
     6e0:	da1d      	bge.n	71e <_Z10drawBitmapcss+0x4ba>
						bx1 = -x;
     6e2:	4b75      	ldr	r3, [pc, #468]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6e4:	22d0      	movs	r2, #208	; 0xd0
     6e6:	0052      	lsls	r2, r2, #1
     6e8:	4694      	mov	ip, r2
     6ea:	44bc      	add	ip, r7
     6ec:	4463      	add	r3, ip
     6ee:	2200      	movs	r2, #0
     6f0:	5e9b      	ldrsh	r3, [r3, r2]
     6f2:	425b      	negs	r3, r3
     6f4:	22c2      	movs	r2, #194	; 0xc2
     6f6:	0052      	lsls	r2, r2, #1
     6f8:	18ba      	adds	r2, r7, r2
     6fa:	6013      	str	r3, [r2, #0]
						x = 0;
     6fc:	4b6e      	ldr	r3, [pc, #440]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6fe:	22d0      	movs	r2, #208	; 0xd0
     700:	0052      	lsls	r2, r2, #1
     702:	4694      	mov	ip, r2
     704:	44bc      	add	ip, r7
     706:	4463      	add	r3, ip
     708:	2200      	movs	r2, #0
     70a:	801a      	strh	r2, [r3, #0]
						w = x2 + 1;
     70c:	23b2      	movs	r3, #178	; 0xb2
     70e:	005b      	lsls	r3, r3, #1
     710:	18fb      	adds	r3, r7, r3
     712:	681b      	ldr	r3, [r3, #0]
     714:	3301      	adds	r3, #1
     716:	22ca      	movs	r2, #202	; 0xca
     718:	0052      	lsls	r2, r2, #1
     71a:	18ba      	adds	r2, r7, r2
     71c:	6013      	str	r3, [r2, #0]
					}
					if (y < 0) { // Clip top
     71e:	4b67      	ldr	r3, [pc, #412]	; (8bc <_Z10drawBitmapcss+0x658>)
     720:	22d0      	movs	r2, #208	; 0xd0
     722:	0052      	lsls	r2, r2, #1
     724:	4694      	mov	ip, r2
     726:	44bc      	add	ip, r7
     728:	4463      	add	r3, ip
     72a:	2200      	movs	r2, #0
     72c:	5e9b      	ldrsh	r3, [r3, r2]
     72e:	2b00      	cmp	r3, #0
     730:	da1d      	bge.n	76e <_Z10drawBitmapcss+0x50a>
						by1 = -y;
     732:	4b62      	ldr	r3, [pc, #392]	; (8bc <_Z10drawBitmapcss+0x658>)
     734:	22d0      	movs	r2, #208	; 0xd0
     736:	0052      	lsls	r2, r2, #1
     738:	4694      	mov	ip, r2
     73a:	44bc      	add	ip, r7
     73c:	4463      	add	r3, ip
     73e:	2200      	movs	r2, #0
     740:	5e9b      	ldrsh	r3, [r3, r2]
     742:	425b      	negs	r3, r3
     744:	22c0      	movs	r2, #192	; 0xc0
     746:	0052      	lsls	r2, r2, #1
     748:	18ba      	adds	r2, r7, r2
     74a:	6013      	str	r3, [r2, #0]
						y = 0;
     74c:	4b5b      	ldr	r3, [pc, #364]	; (8bc <_Z10drawBitmapcss+0x658>)
     74e:	22d0      	movs	r2, #208	; 0xd0
     750:	0052      	lsls	r2, r2, #1
     752:	4694      	mov	ip, r2
     754:	44bc      	add	ip, r7
     756:	4463      	add	r3, ip
     758:	2200      	movs	r2, #0
     75a:	801a      	strh	r2, [r3, #0]
						h = y2 + 1;
     75c:	23b0      	movs	r3, #176	; 0xb0
     75e:	005b      	lsls	r3, r3, #1
     760:	18fb      	adds	r3, r7, r3
     762:	681b      	ldr	r3, [r3, #0]
     764:	3301      	adds	r3, #1
     766:	22c8      	movs	r2, #200	; 0xc8
     768:	0052      	lsls	r2, r2, #1
     76a:	18ba      	adds	r2, r7, r2
     76c:	6013      	str	r3, [r2, #0]
					}
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     76e:	4b54      	ldr	r3, [pc, #336]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     770:	0018      	movs	r0, r3
     772:	f00c fe9d 	bl	d4b0 <_ZNK12Adafruit_GFX5widthEv>
     776:	0003      	movs	r3, r0
     778:	001a      	movs	r2, r3
     77a:	23b2      	movs	r3, #178	; 0xb2
     77c:	005b      	lsls	r3, r3, #1
     77e:	18fb      	adds	r3, r7, r3
     780:	681b      	ldr	r3, [r3, #0]
     782:	0fd0      	lsrs	r0, r2, #31
     784:	17d9      	asrs	r1, r3, #31
     786:	4293      	cmp	r3, r2
     788:	4148      	adcs	r0, r1
     78a:	0003      	movs	r3, r0
     78c:	b2db      	uxtb	r3, r3
     78e:	2b00      	cmp	r3, #0
     790:	d012      	beq.n	7b8 <_Z10drawBitmapcss+0x554>
     792:	4b4b      	ldr	r3, [pc, #300]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     794:	0018      	movs	r0, r3
     796:	f00c fe8b 	bl	d4b0 <_ZNK12Adafruit_GFX5widthEv>
     79a:	0003      	movs	r3, r0
     79c:	001a      	movs	r2, r3
     79e:	4b46      	ldr	r3, [pc, #280]	; (8b8 <_Z10drawBitmapcss+0x654>)
     7a0:	21d0      	movs	r1, #208	; 0xd0
     7a2:	0049      	lsls	r1, r1, #1
     7a4:	468c      	mov	ip, r1
     7a6:	44bc      	add	ip, r7
     7a8:	4463      	add	r3, ip
     7aa:	2100      	movs	r1, #0
     7ac:	5e5b      	ldrsh	r3, [r3, r1]
     7ae:	1ad3      	subs	r3, r2, r3
     7b0:	22ca      	movs	r2, #202	; 0xca
     7b2:	0052      	lsls	r2, r2, #1
     7b4:	18ba      	adds	r2, r7, r2
     7b6:	6013      	str	r3, [r2, #0]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     7b8:	4b41      	ldr	r3, [pc, #260]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     7ba:	0018      	movs	r0, r3
     7bc:	f00c fe83 	bl	d4c6 <_ZNK12Adafruit_GFX6heightEv>
     7c0:	0003      	movs	r3, r0
     7c2:	001a      	movs	r2, r3
     7c4:	23b0      	movs	r3, #176	; 0xb0
     7c6:	005b      	lsls	r3, r3, #1
     7c8:	18fb      	adds	r3, r7, r3
     7ca:	681b      	ldr	r3, [r3, #0]
     7cc:	0fd0      	lsrs	r0, r2, #31
     7ce:	17d9      	asrs	r1, r3, #31
     7d0:	4293      	cmp	r3, r2
     7d2:	4148      	adcs	r0, r1
     7d4:	0003      	movs	r3, r0
     7d6:	b2db      	uxtb	r3, r3
     7d8:	2b00      	cmp	r3, #0
     7da:	d012      	beq.n	802 <_Z10drawBitmapcss+0x59e>
     7dc:	4b38      	ldr	r3, [pc, #224]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     7de:	0018      	movs	r0, r3
     7e0:	f00c fe71 	bl	d4c6 <_ZNK12Adafruit_GFX6heightEv>
     7e4:	0003      	movs	r3, r0
     7e6:	001a      	movs	r2, r3
     7e8:	4b34      	ldr	r3, [pc, #208]	; (8bc <_Z10drawBitmapcss+0x658>)
     7ea:	21d0      	movs	r1, #208	; 0xd0
     7ec:	0049      	lsls	r1, r1, #1
     7ee:	468c      	mov	ip, r1
     7f0:	44bc      	add	ip, r7
     7f2:	4463      	add	r3, ip
     7f4:	2100      	movs	r1, #0
     7f6:	5e5b      	ldrsh	r3, [r3, r1]
     7f8:	1ad3      	subs	r3, r2, r3
     7fa:	22c8      	movs	r2, #200	; 0xc8
     7fc:	0052      	lsls	r2, r2, #1
     7fe:	18ba      	adds	r2, r7, r2
     800:	6013      	str	r3, [r2, #0]

					// Set tftDisplay address window to clipped image bounds
					tftDisplay.startWrite(); // Requires start/end transaction now
     802:	4b2f      	ldr	r3, [pc, #188]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     804:	0018      	movs	r0, r3
     806:	f007 fba7 	bl	7f58 <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
     80a:	4b2b      	ldr	r3, [pc, #172]	; (8b8 <_Z10drawBitmapcss+0x654>)
     80c:	22d0      	movs	r2, #208	; 0xd0
     80e:	0052      	lsls	r2, r2, #1
     810:	4694      	mov	ip, r2
     812:	44bc      	add	ip, r7
     814:	4463      	add	r3, ip
     816:	8819      	ldrh	r1, [r3, #0]
     818:	4b28      	ldr	r3, [pc, #160]	; (8bc <_Z10drawBitmapcss+0x658>)
     81a:	22d0      	movs	r2, #208	; 0xd0
     81c:	0052      	lsls	r2, r2, #1
     81e:	4694      	mov	ip, r2
     820:	44bc      	add	ip, r7
     822:	4463      	add	r3, ip
     824:	881a      	ldrh	r2, [r3, #0]
     826:	23ca      	movs	r3, #202	; 0xca
     828:	005b      	lsls	r3, r3, #1
     82a:	18fb      	adds	r3, r7, r3
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	b29c      	uxth	r4, r3
     830:	23c8      	movs	r3, #200	; 0xc8
     832:	005b      	lsls	r3, r3, #1
     834:	18fb      	adds	r3, r7, r3
     836:	681b      	ldr	r3, [r3, #0]
     838:	b29b      	uxth	r3, r3
     83a:	4821      	ldr	r0, [pc, #132]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     83c:	9300      	str	r3, [sp, #0]
     83e:	0023      	movs	r3, r4
     840:	f007 fbf4 	bl	802c <_ZN16Adafruit_ILI934113setAddrWindowEtttt>

					for (row = 0; row < h; row++) { // For each scanline...
     844:	2300      	movs	r3, #0
     846:	22c6      	movs	r2, #198	; 0xc6
     848:	0052      	lsls	r2, r2, #1
     84a:	18ba      	adds	r2, r7, r2
     84c:	6013      	str	r3, [r2, #0]
     84e:	23c6      	movs	r3, #198	; 0xc6
     850:	005b      	lsls	r3, r3, #1
     852:	18fb      	adds	r3, r7, r3
     854:	681a      	ldr	r2, [r3, #0]
     856:	23c8      	movs	r3, #200	; 0xc8
     858:	005b      	lsls	r3, r3, #1
     85a:	18fb      	adds	r3, r7, r3
     85c:	681b      	ldr	r3, [r3, #0]
     85e:	429a      	cmp	r2, r3
     860:	db00      	blt.n	864 <_Z10drawBitmapcss+0x600>
     862:	e116      	b.n	a92 <_Z10drawBitmapcss+0x82e>
						// intensive to be doing this on every line, but this
						// method covers a lot of gritty details like cropping
						// and scanline padding.  Also, the seek only takes
						// place if the file position actually needs to change
						// (avoids a lot of cluster math in SD library).
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
     864:	239a      	movs	r3, #154	; 0x9a
     866:	33ff      	adds	r3, #255	; 0xff
     868:	18fb      	adds	r3, r7, r3
     86a:	781b      	ldrb	r3, [r3, #0]
     86c:	2b00      	cmp	r3, #0
     86e:	d029      	beq.n	8c4 <_Z10drawBitmapcss+0x660>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
     870:	23ce      	movs	r3, #206	; 0xce
     872:	005b      	lsls	r3, r3, #1
     874:	18fb      	adds	r3, r7, r3
     876:	681b      	ldr	r3, [r3, #0]
     878:	1e5a      	subs	r2, r3, #1
     87a:	23c6      	movs	r3, #198	; 0xc6
     87c:	005b      	lsls	r3, r3, #1
     87e:	18fb      	adds	r3, r7, r3
     880:	6819      	ldr	r1, [r3, #0]
     882:	23c0      	movs	r3, #192	; 0xc0
     884:	005b      	lsls	r3, r3, #1
     886:	18fb      	adds	r3, r7, r3
     888:	681b      	ldr	r3, [r3, #0]
     88a:	18cb      	adds	r3, r1, r3
     88c:	1ad3      	subs	r3, r2, r3
     88e:	001a      	movs	r2, r3
     890:	23b4      	movs	r3, #180	; 0xb4
     892:	005b      	lsls	r3, r3, #1
     894:	18fb      	adds	r3, r7, r3
     896:	681b      	ldr	r3, [r3, #0]
     898:	435a      	muls	r2, r3
     89a:	23ba      	movs	r3, #186	; 0xba
     89c:	005b      	lsls	r3, r3, #1
     89e:	18fb      	adds	r3, r7, r3
     8a0:	681b      	ldr	r3, [r3, #0]
     8a2:	18d3      	adds	r3, r2, r3
     8a4:	22be      	movs	r2, #190	; 0xbe
     8a6:	0052      	lsls	r2, r2, #1
     8a8:	18ba      	adds	r2, r7, r2
     8aa:	6013      	str	r3, [r2, #0]
     8ac:	e022      	b.n	8f4 <_Z10drawBitmapcss+0x690>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00013270 	.word	0x00013270
     8b4:	20000e94 	.word	0x20000e94
     8b8:	fffffe64 	.word	0xfffffe64
     8bc:	fffffe62 	.word	0xfffffe62
     8c0:	200002bc 	.word	0x200002bc
						else
						// Bitmap is stored top-to-bottom
						pos = bmpImageoffset + (row + by1) * rowSize;
     8c4:	23c6      	movs	r3, #198	; 0xc6
     8c6:	005b      	lsls	r3, r3, #1
     8c8:	18fb      	adds	r3, r7, r3
     8ca:	681a      	ldr	r2, [r3, #0]
     8cc:	23c0      	movs	r3, #192	; 0xc0
     8ce:	005b      	lsls	r3, r3, #1
     8d0:	18fb      	adds	r3, r7, r3
     8d2:	681b      	ldr	r3, [r3, #0]
     8d4:	18d3      	adds	r3, r2, r3
     8d6:	001a      	movs	r2, r3
     8d8:	23b4      	movs	r3, #180	; 0xb4
     8da:	005b      	lsls	r3, r3, #1
     8dc:	18fb      	adds	r3, r7, r3
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	435a      	muls	r2, r3
     8e2:	23ba      	movs	r3, #186	; 0xba
     8e4:	005b      	lsls	r3, r3, #1
     8e6:	18fb      	adds	r3, r7, r3
     8e8:	681b      	ldr	r3, [r3, #0]
     8ea:	18d3      	adds	r3, r2, r3
     8ec:	22be      	movs	r2, #190	; 0xbe
     8ee:	0052      	lsls	r2, r2, #1
     8f0:	18ba      	adds	r2, r7, r2
     8f2:	6013      	str	r3, [r2, #0]
						pos += bx1 * 3; // Factor in starting column (bx1)
     8f4:	23c2      	movs	r3, #194	; 0xc2
     8f6:	005b      	lsls	r3, r3, #1
     8f8:	18fb      	adds	r3, r7, r3
     8fa:	681a      	ldr	r2, [r3, #0]
     8fc:	0013      	movs	r3, r2
     8fe:	005b      	lsls	r3, r3, #1
     900:	189b      	adds	r3, r3, r2
     902:	001a      	movs	r2, r3
     904:	23be      	movs	r3, #190	; 0xbe
     906:	005b      	lsls	r3, r3, #1
     908:	18fb      	adds	r3, r7, r3
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	189b      	adds	r3, r3, r2
     90e:	22be      	movs	r2, #190	; 0xbe
     910:	0052      	lsls	r2, r2, #1
     912:	18ba      	adds	r2, r7, r2
     914:	6013      	str	r3, [r2, #0]
						if (bmpFile.position() != pos) { // Need seek?
     916:	238a      	movs	r3, #138	; 0x8a
     918:	005b      	lsls	r3, r3, #1
     91a:	18fb      	adds	r3, r7, r3
     91c:	0018      	movs	r0, r3
     91e:	f008 f8d6 	bl	8ace <_ZN5SDLib4File8positionEv>
     922:	0002      	movs	r2, r0
     924:	23be      	movs	r3, #190	; 0xbe
     926:	005b      	lsls	r3, r3, #1
     928:	18fb      	adds	r3, r7, r3
     92a:	681b      	ldr	r3, [r3, #0]
     92c:	1ad3      	subs	r3, r2, r3
     92e:	1e5a      	subs	r2, r3, #1
     930:	4193      	sbcs	r3, r2
     932:	b2db      	uxtb	r3, r3
     934:	2b00      	cmp	r3, #0
     936:	d017      	beq.n	968 <_Z10drawBitmapcss+0x704>
							tftDisplay.endWrite(); // End tftDisplay transaction
     938:	4b73      	ldr	r3, [pc, #460]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     93a:	0018      	movs	r0, r3
     93c:	f007 fb34 	bl	7fa8 <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
     940:	23be      	movs	r3, #190	; 0xbe
     942:	005b      	lsls	r3, r3, #1
     944:	18fb      	adds	r3, r7, r3
     946:	681a      	ldr	r2, [r3, #0]
     948:	238a      	movs	r3, #138	; 0x8a
     94a:	005b      	lsls	r3, r3, #1
     94c:	18fb      	adds	r3, r7, r3
     94e:	0011      	movs	r1, r2
     950:	0018      	movs	r0, r3
     952:	f008 f8a2 	bl	8a9a <_ZN5SDLib4File4seekEm>
							buffidx = sizeof(sdbuffer); // Force buffer reload
     956:	239c      	movs	r3, #156	; 0x9c
     958:	33ff      	adds	r3, #255	; 0xff
     95a:	18fb      	adds	r3, r7, r3
     95c:	22ff      	movs	r2, #255	; 0xff
     95e:	701a      	strb	r2, [r3, #0]
							tftDisplay.startWrite(); // Start new tftDisplay transaction
     960:	4b69      	ldr	r3, [pc, #420]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     962:	0018      	movs	r0, r3
     964:	f007 faf8 	bl	7f58 <_ZN16Adafruit_ILI934110startWriteEv>
						}
						for (col = 0; col < w; col++) { // For each pixel...
     968:	2300      	movs	r3, #0
     96a:	22c4      	movs	r2, #196	; 0xc4
     96c:	0052      	lsls	r2, r2, #1
     96e:	18ba      	adds	r2, r7, r2
     970:	6013      	str	r3, [r2, #0]
     972:	23c4      	movs	r3, #196	; 0xc4
     974:	005b      	lsls	r3, r3, #1
     976:	18fb      	adds	r3, r7, r3
     978:	681a      	ldr	r2, [r3, #0]
     97a:	23ca      	movs	r3, #202	; 0xca
     97c:	005b      	lsls	r3, r3, #1
     97e:	18fb      	adds	r3, r7, r3
     980:	681b      	ldr	r3, [r3, #0]
     982:	429a      	cmp	r2, r3
     984:	da7b      	bge.n	a7e <_Z10drawBitmapcss+0x81a>
							// Time to read more pixel data?
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
     986:	239c      	movs	r3, #156	; 0x9c
     988:	33ff      	adds	r3, #255	; 0xff
     98a:	18fb      	adds	r3, r7, r3
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	2bff      	cmp	r3, #255	; 0xff
     990:	d115      	bne.n	9be <_Z10drawBitmapcss+0x75a>
								tftDisplay.endWrite(); // End tftDisplay transaction
     992:	4b5d      	ldr	r3, [pc, #372]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     994:	0018      	movs	r0, r3
     996:	f007 fb07 	bl	7fa8 <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
     99a:	2314      	movs	r3, #20
     99c:	18f9      	adds	r1, r7, r3
     99e:	238a      	movs	r3, #138	; 0x8a
     9a0:	005b      	lsls	r3, r3, #1
     9a2:	18fb      	adds	r3, r7, r3
     9a4:	22ff      	movs	r2, #255	; 0xff
     9a6:	0018      	movs	r0, r3
     9a8:	f008 f829 	bl	89fe <_ZN5SDLib4File4readEPvt>
								buffidx = 0; // Set index to beginning
     9ac:	239c      	movs	r3, #156	; 0x9c
     9ae:	33ff      	adds	r3, #255	; 0xff
     9b0:	18fb      	adds	r3, r7, r3
     9b2:	2200      	movs	r2, #0
     9b4:	701a      	strb	r2, [r3, #0]
								tftDisplay.startWrite(); // Start new tftDisplay transaction
     9b6:	4b54      	ldr	r3, [pc, #336]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     9b8:	0018      	movs	r0, r3
     9ba:	f007 facd 	bl	7f58 <_ZN16Adafruit_ILI934110startWriteEv>
							}
							// Convert pixel from BMP to tftDisplay format, push to display
							b = sdbuffer[buffidx++];
     9be:	239c      	movs	r3, #156	; 0x9c
     9c0:	33ff      	adds	r3, #255	; 0xff
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	229c      	movs	r2, #156	; 0x9c
     9c8:	32ff      	adds	r2, #255	; 0xff
     9ca:	18ba      	adds	r2, r7, r2
     9cc:	1c59      	adds	r1, r3, #1
     9ce:	7011      	strb	r1, [r2, #0]
     9d0:	0019      	movs	r1, r3
     9d2:	2360      	movs	r3, #96	; 0x60
     9d4:	33ff      	adds	r3, #255	; 0xff
     9d6:	18fb      	adds	r3, r7, r3
     9d8:	4a4c      	ldr	r2, [pc, #304]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     9da:	20d0      	movs	r0, #208	; 0xd0
     9dc:	0040      	lsls	r0, r0, #1
     9de:	4684      	mov	ip, r0
     9e0:	44bc      	add	ip, r7
     9e2:	4462      	add	r2, ip
     9e4:	5c52      	ldrb	r2, [r2, r1]
     9e6:	701a      	strb	r2, [r3, #0]
							g = sdbuffer[buffidx++];
     9e8:	239c      	movs	r3, #156	; 0x9c
     9ea:	33ff      	adds	r3, #255	; 0xff
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	229c      	movs	r2, #156	; 0x9c
     9f2:	32ff      	adds	r2, #255	; 0xff
     9f4:	18ba      	adds	r2, r7, r2
     9f6:	1c59      	adds	r1, r3, #1
     9f8:	7011      	strb	r1, [r2, #0]
     9fa:	0019      	movs	r1, r3
     9fc:	23af      	movs	r3, #175	; 0xaf
     9fe:	005b      	lsls	r3, r3, #1
     a00:	18fb      	adds	r3, r7, r3
     a02:	4a42      	ldr	r2, [pc, #264]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     a04:	20d0      	movs	r0, #208	; 0xd0
     a06:	0040      	lsls	r0, r0, #1
     a08:	4684      	mov	ip, r0
     a0a:	44bc      	add	ip, r7
     a0c:	4462      	add	r2, ip
     a0e:	5c52      	ldrb	r2, [r2, r1]
     a10:	701a      	strb	r2, [r3, #0]
							r = sdbuffer[buffidx++];
     a12:	239c      	movs	r3, #156	; 0x9c
     a14:	33ff      	adds	r3, #255	; 0xff
     a16:	18fb      	adds	r3, r7, r3
     a18:	781b      	ldrb	r3, [r3, #0]
     a1a:	229c      	movs	r2, #156	; 0x9c
     a1c:	32ff      	adds	r2, #255	; 0xff
     a1e:	18ba      	adds	r2, r7, r2
     a20:	1c59      	adds	r1, r3, #1
     a22:	7011      	strb	r1, [r2, #0]
     a24:	0019      	movs	r1, r3
     a26:	235e      	movs	r3, #94	; 0x5e
     a28:	33ff      	adds	r3, #255	; 0xff
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	4a37      	ldr	r2, [pc, #220]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     a2e:	20d0      	movs	r0, #208	; 0xd0
     a30:	0040      	lsls	r0, r0, #1
     a32:	4684      	mov	ip, r0
     a34:	44bc      	add	ip, r7
     a36:	4462      	add	r2, ip
     a38:	5c52      	ldrb	r2, [r2, r1]
     a3a:	701a      	strb	r2, [r3, #0]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
     a3c:	2360      	movs	r3, #96	; 0x60
     a3e:	33ff      	adds	r3, #255	; 0xff
     a40:	18fb      	adds	r3, r7, r3
     a42:	781c      	ldrb	r4, [r3, #0]
     a44:	23af      	movs	r3, #175	; 0xaf
     a46:	005b      	lsls	r3, r3, #1
     a48:	18fb      	adds	r3, r7, r3
     a4a:	781a      	ldrb	r2, [r3, #0]
     a4c:	235e      	movs	r3, #94	; 0x5e
     a4e:	33ff      	adds	r3, #255	; 0xff
     a50:	18fb      	adds	r3, r7, r3
     a52:	7819      	ldrb	r1, [r3, #0]
     a54:	482c      	ldr	r0, [pc, #176]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a56:	0023      	movs	r3, r4
     a58:	f006 fe6e 	bl	7738 <_ZN16Adafruit_ILI93418color565Ehhh>
     a5c:	0003      	movs	r3, r0
     a5e:	001a      	movs	r2, r3
     a60:	4b29      	ldr	r3, [pc, #164]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a62:	0011      	movs	r1, r2
     a64:	0018      	movs	r0, r3
     a66:	f007 fba9 	bl	81bc <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
     a6a:	23c4      	movs	r3, #196	; 0xc4
     a6c:	005b      	lsls	r3, r3, #1
     a6e:	18fb      	adds	r3, r7, r3
     a70:	681b      	ldr	r3, [r3, #0]
     a72:	3301      	adds	r3, #1
     a74:	22c4      	movs	r2, #196	; 0xc4
     a76:	0052      	lsls	r2, r2, #1
     a78:	18ba      	adds	r2, r7, r2
     a7a:	6013      	str	r3, [r2, #0]
     a7c:	e779      	b.n	972 <_Z10drawBitmapcss+0x70e>
					for (row = 0; row < h; row++) { // For each scanline...
     a7e:	23c6      	movs	r3, #198	; 0xc6
     a80:	005b      	lsls	r3, r3, #1
     a82:	18fb      	adds	r3, r7, r3
     a84:	681b      	ldr	r3, [r3, #0]
     a86:	3301      	adds	r3, #1
     a88:	22c6      	movs	r2, #198	; 0xc6
     a8a:	0052      	lsls	r2, r2, #1
     a8c:	18ba      	adds	r2, r7, r2
     a8e:	6013      	str	r3, [r2, #0]
     a90:	e6dd      	b.n	84e <_Z10drawBitmapcss+0x5ea>
						} // end pixel
					} // end scanline
					tftDisplay.endWrite(); // End last tftDisplay transaction
     a92:	4b1d      	ldr	r3, [pc, #116]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a94:	0018      	movs	r0, r3
     a96:	f007 fa87 	bl	7fa8 <_ZN16Adafruit_ILI93418endWriteEv>
				} // end onscreen
				Serial.print(F("Loaded in "));
     a9a:	4a1d      	ldr	r2, [pc, #116]	; (b10 <_Z10drawBitmapcss+0x8ac>)
     a9c:	4b1d      	ldr	r3, [pc, #116]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     a9e:	0011      	movs	r1, r2
     aa0:	0018      	movs	r0, r3
     aa2:	f002 fa74 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(millis() - startTime);
     aa6:	f002 f9b7 	bl	2e18 <millis>
     aaa:	0002      	movs	r2, r0
     aac:	23bc      	movs	r3, #188	; 0xbc
     aae:	005b      	lsls	r3, r3, #1
     ab0:	18fb      	adds	r3, r7, r3
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	1ad1      	subs	r1, r2, r3
     ab6:	4b17      	ldr	r3, [pc, #92]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     ab8:	220a      	movs	r2, #10
     aba:	0018      	movs	r0, r3
     abc:	f002 fb03 	bl	30c6 <_ZN5Print5printEmi>
				Serial.println(F(" ms"));
     ac0:	4a15      	ldr	r2, [pc, #84]	; (b18 <_Z10drawBitmapcss+0x8b4>)
     ac2:	4b14      	ldr	r3, [pc, #80]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     ac4:	0011      	movs	r1, r2
     ac6:	0018      	movs	r0, r3
     ac8:	f002 fb1c 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
			} // end goodBmp
		}
	}

	bmpFile.close();
     acc:	238a      	movs	r3, #138	; 0x8a
     ace:	005b      	lsls	r3, r3, #1
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	0018      	movs	r0, r3
     ad4:	f008 f824 	bl	8b20 <_ZN5SDLib4File5closeEv>
	if (!goodBmp)
     ad8:	23cd      	movs	r3, #205	; 0xcd
     ada:	005b      	lsls	r3, r3, #1
     adc:	18fb      	adds	r3, r7, r3
     ade:	781b      	ldrb	r3, [r3, #0]
     ae0:	2201      	movs	r2, #1
     ae2:	4053      	eors	r3, r2
     ae4:	b2db      	uxtb	r3, r3
     ae6:	2b00      	cmp	r3, #0
     ae8:	d005      	beq.n	af6 <_Z10drawBitmapcss+0x892>
	Serial.println(F("BMP format not recognized or SD not mounted"));
     aea:	4a0c      	ldr	r2, [pc, #48]	; (b1c <_Z10drawBitmapcss+0x8b8>)
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     aee:	0011      	movs	r1, r2
     af0:	0018      	movs	r0, r3
     af2:	f002 fb07 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println();
     af6:	4b07      	ldr	r3, [pc, #28]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     af8:	0018      	movs	r0, r3
     afa:	f002 fb1d 	bl	3138 <_ZN5Print7printlnEv>
     afe:	e000      	b.n	b02 <_Z10drawBitmapcss+0x89e>
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     b00:	46c0      	nop			; (mov r8, r8)
}
     b02:	46bd      	mov	sp, r7
     b04:	b069      	add	sp, #420	; 0x1a4
     b06:	bd90      	pop	{r4, r7, pc}
     b08:	200002bc 	.word	0x200002bc
     b0c:	fffffe74 	.word	0xfffffe74
     b10:	00013280 	.word	0x00013280
     b14:	20000e94 	.word	0x20000e94
     b18:	0001328c 	.word	0x0001328c
     b1c:	00013290 	.word	0x00013290

00000b20 <_Z10drawBitmapPcss>:

void drawBitmap(char* filename, int16_t x, int16_t y) {
     b20:	b590      	push	{r4, r7, lr}
     b22:	b0e9      	sub	sp, #420	; 0x1a4
     b24:	af02      	add	r7, sp, #8
     b26:	6078      	str	r0, [r7, #4]
     b28:	0008      	movs	r0, r1
     b2a:	0011      	movs	r1, r2
     b2c:	4b99      	ldr	r3, [pc, #612]	; (d94 <_Z10drawBitmapPcss+0x274>)
     b2e:	22cc      	movs	r2, #204	; 0xcc
     b30:	0052      	lsls	r2, r2, #1
     b32:	4694      	mov	ip, r2
     b34:	44bc      	add	ip, r7
     b36:	4463      	add	r3, ip
     b38:	1c02      	adds	r2, r0, #0
     b3a:	801a      	strh	r2, [r3, #0]
     b3c:	4b96      	ldr	r3, [pc, #600]	; (d98 <_Z10drawBitmapPcss+0x278>)
     b3e:	22cc      	movs	r2, #204	; 0xcc
     b40:	0052      	lsls	r2, r2, #1
     b42:	4694      	mov	ip, r2
     b44:	44bc      	add	ip, r7
     b46:	4463      	add	r3, ip
     b48:	1c0a      	adds	r2, r1, #0
     b4a:	801a      	strh	r2, [r3, #0]

	File bmpFile;
     b4c:	2386      	movs	r3, #134	; 0x86
     b4e:	005b      	lsls	r3, r3, #1
     b50:	18fb      	adds	r3, r7, r3
     b52:	0018      	movs	r0, r3
     b54:	f007 feba 	bl	88cc <_ZN5SDLib4FileC1Ev>
	int bmpWidth, bmpHeight;   // W+H in pixels
	uint8_t bmpDepth;              // Bit depth (currently must be 24)
	uint32_t bmpImageoffset;        // Start of image data in file
	uint32_t rowSize;               // Not always = bmpWidth; may have padding
	uint8_t sdbuffer[3 * BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     b58:	2394      	movs	r3, #148	; 0x94
     b5a:	33ff      	adds	r3, #255	; 0xff
     b5c:	18fb      	adds	r3, r7, r3
     b5e:	22ff      	movs	r2, #255	; 0xff
     b60:	701a      	strb	r2, [r3, #0]
	boolean goodBmp = false;       // Set to true on valid header parse
     b62:	23c9      	movs	r3, #201	; 0xc9
     b64:	005b      	lsls	r3, r3, #1
     b66:	18fb      	adds	r3, r7, r3
     b68:	2200      	movs	r2, #0
     b6a:	701a      	strb	r2, [r3, #0]
	boolean flip = true;        // BMP is stored bottom-to-top
     b6c:	2392      	movs	r3, #146	; 0x92
     b6e:	33ff      	adds	r3, #255	; 0xff
     b70:	18fb      	adds	r3, r7, r3
     b72:	2201      	movs	r2, #1
     b74:	701a      	strb	r2, [r3, #0]
	int w, h, row, col, x2, y2, bx1, by1;
	uint8_t r, g, b;
	uint32_t pos = 0, startTime = millis();
     b76:	2300      	movs	r3, #0
     b78:	22ba      	movs	r2, #186	; 0xba
     b7a:	0052      	lsls	r2, r2, #1
     b7c:	18ba      	adds	r2, r7, r2
     b7e:	6013      	str	r3, [r2, #0]
     b80:	f002 f94a 	bl	2e18 <millis>
     b84:	0003      	movs	r3, r0
     b86:	22b8      	movs	r2, #184	; 0xb8
     b88:	0052      	lsls	r2, r2, #1
     b8a:	18ba      	adds	r2, r7, r2
     b8c:	6013      	str	r3, [r2, #0]

	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     b8e:	4b83      	ldr	r3, [pc, #524]	; (d9c <_Z10drawBitmapPcss+0x27c>)
     b90:	0018      	movs	r0, r3
     b92:	f00c fc8d 	bl	d4b0 <_ZNK12Adafruit_GFX5widthEv>
     b96:	0003      	movs	r3, r0
     b98:	001a      	movs	r2, r3
     b9a:	4b7e      	ldr	r3, [pc, #504]	; (d94 <_Z10drawBitmapPcss+0x274>)
     b9c:	21cc      	movs	r1, #204	; 0xcc
     b9e:	0049      	lsls	r1, r1, #1
     ba0:	468c      	mov	ip, r1
     ba2:	44bc      	add	ip, r7
     ba4:	4463      	add	r3, ip
     ba6:	2100      	movs	r1, #0
     ba8:	5e5b      	ldrsh	r3, [r3, r1]
     baa:	4293      	cmp	r3, r2
     bac:	da0f      	bge.n	bce <_Z10drawBitmapPcss+0xae>
     bae:	4b7b      	ldr	r3, [pc, #492]	; (d9c <_Z10drawBitmapPcss+0x27c>)
     bb0:	0018      	movs	r0, r3
     bb2:	f00c fc88 	bl	d4c6 <_ZNK12Adafruit_GFX6heightEv>
     bb6:	0003      	movs	r3, r0
     bb8:	001a      	movs	r2, r3
     bba:	4b77      	ldr	r3, [pc, #476]	; (d98 <_Z10drawBitmapPcss+0x278>)
     bbc:	21cc      	movs	r1, #204	; 0xcc
     bbe:	0049      	lsls	r1, r1, #1
     bc0:	468c      	mov	ip, r1
     bc2:	44bc      	add	ip, r7
     bc4:	4463      	add	r3, ip
     bc6:	2100      	movs	r1, #0
     bc8:	5e5b      	ldrsh	r3, [r3, r1]
     bca:	4293      	cmp	r3, r2
     bcc:	db01      	blt.n	bd2 <_Z10drawBitmapPcss+0xb2>
     bce:	2301      	movs	r3, #1
     bd0:	e000      	b.n	bd4 <_Z10drawBitmapPcss+0xb4>
     bd2:	2300      	movs	r3, #0
     bd4:	2b00      	cmp	r3, #0
     bd6:	d000      	beq.n	bda <_Z10drawBitmapPcss+0xba>
     bd8:	e3a8      	b.n	132c <_Z10drawBitmapPcss+0x80c>

	Serial.println();
     bda:	4b71      	ldr	r3, [pc, #452]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bdc:	0018      	movs	r0, r3
     bde:	f002 faab 	bl	3138 <_ZN5Print7printlnEv>
	Serial.print(F("Loading image '"));
     be2:	4a70      	ldr	r2, [pc, #448]	; (da4 <_Z10drawBitmapPcss+0x284>)
     be4:	4b6e      	ldr	r3, [pc, #440]	; (da0 <_Z10drawBitmapPcss+0x280>)
     be6:	0011      	movs	r1, r2
     be8:	0018      	movs	r0, r3
     bea:	f002 f9d0 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(filename);
     bee:	687a      	ldr	r2, [r7, #4]
     bf0:	4b6b      	ldr	r3, [pc, #428]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bf2:	0011      	movs	r1, r2
     bf4:	0018      	movs	r0, r3
     bf6:	f002 f9da 	bl	2fae <_ZN5Print5printEPKc>
	Serial.println('\'');
     bfa:	4b69      	ldr	r3, [pc, #420]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bfc:	2127      	movs	r1, #39	; 0x27
     bfe:	0018      	movs	r0, r3
     c00:	f002 fac6 	bl	3190 <_ZN5Print7printlnEc>

	// Todo (BROKEN)
	// Open requested file on SD card
	if ((bmpFile = SD.open(filename))) {
     c04:	2398      	movs	r3, #152	; 0x98
     c06:	005b      	lsls	r3, r3, #1
     c08:	18f8      	adds	r0, r7, r3
     c0a:	687a      	ldr	r2, [r7, #4]
     c0c:	4966      	ldr	r1, [pc, #408]	; (da8 <_Z10drawBitmapPcss+0x288>)
     c0e:	2301      	movs	r3, #1
     c10:	f008 f984 	bl	8f1c <_ZN5SDLib7SDClass4openEPKch>
     c14:	2398      	movs	r3, #152	; 0x98
     c16:	005b      	lsls	r3, r3, #1
     c18:	18fa      	adds	r2, r7, r3
     c1a:	2386      	movs	r3, #134	; 0x86
     c1c:	005b      	lsls	r3, r3, #1
     c1e:	18fb      	adds	r3, r7, r3
     c20:	0011      	movs	r1, r2
     c22:	0018      	movs	r0, r3
     c24:	f7ff fafc 	bl	220 <_ZN5SDLib4FileaSEOS0_>
     c28:	0003      	movs	r3, r0
     c2a:	0018      	movs	r0, r3
     c2c:	f007 ff91 	bl	8b52 <_ZN5SDLib4FilecvbEv>
     c30:	1e03      	subs	r3, r0, #0
     c32:	d005      	beq.n	c40 <_Z10drawBitmapPcss+0x120>
		Serial.println(F("File (maybe) not found"));
     c34:	4a5d      	ldr	r2, [pc, #372]	; (dac <_Z10drawBitmapPcss+0x28c>)
     c36:	4b5a      	ldr	r3, [pc, #360]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c38:	0011      	movs	r1, r2
     c3a:	0018      	movs	r0, r3
     c3c:	f002 fa62 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
		// return;
	}

	// Parse BMP header
	Serial.println(F("Start parse"));
     c40:	4a5b      	ldr	r2, [pc, #364]	; (db0 <_Z10drawBitmapPcss+0x290>)
     c42:	4b57      	ldr	r3, [pc, #348]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c44:	0011      	movs	r1, r2
     c46:	0018      	movs	r0, r3
     c48:	f002 fa5c 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     c4c:	2386      	movs	r3, #134	; 0x86
     c4e:	005b      	lsls	r3, r3, #1
     c50:	18fb      	adds	r3, r7, r3
     c52:	0018      	movs	r0, r3
     c54:	f7ff fa5e 	bl	114 <_Z6read16RN5SDLib4FileE>
     c58:	0003      	movs	r3, r0
     c5a:	4a56      	ldr	r2, [pc, #344]	; (db4 <_Z10drawBitmapPcss+0x294>)
     c5c:	4694      	mov	ip, r2
     c5e:	4463      	add	r3, ip
     c60:	425a      	negs	r2, r3
     c62:	4153      	adcs	r3, r2
     c64:	b2db      	uxtb	r3, r3
     c66:	2b00      	cmp	r3, #0
     c68:	d100      	bne.n	c6c <_Z10drawBitmapPcss+0x14c>
     c6a:	e345      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>
		Serial.print(F("File size: "));
     c6c:	4a52      	ldr	r2, [pc, #328]	; (db8 <_Z10drawBitmapPcss+0x298>)
     c6e:	4b4c      	ldr	r3, [pc, #304]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c70:	0011      	movs	r1, r2
     c72:	0018      	movs	r0, r3
     c74:	f002 f98b 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     c78:	2386      	movs	r3, #134	; 0x86
     c7a:	005b      	lsls	r3, r3, #1
     c7c:	18fb      	adds	r3, r7, r3
     c7e:	0018      	movs	r0, r3
     c80:	f7ff fa6c 	bl	15c <_Z6read32RN5SDLib4FileE>
     c84:	0001      	movs	r1, r0
     c86:	4b46      	ldr	r3, [pc, #280]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c88:	220a      	movs	r2, #10
     c8a:	0018      	movs	r0, r3
     c8c:	f002 fad8 	bl	3240 <_ZN5Print7printlnEmi>
		(void) read32(bmpFile); // Read & ignore creator bytes
     c90:	2386      	movs	r3, #134	; 0x86
     c92:	005b      	lsls	r3, r3, #1
     c94:	18fb      	adds	r3, r7, r3
     c96:	0018      	movs	r0, r3
     c98:	f7ff fa60 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     c9c:	2386      	movs	r3, #134	; 0x86
     c9e:	005b      	lsls	r3, r3, #1
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	0018      	movs	r0, r3
     ca4:	f7ff fa5a 	bl	15c <_Z6read32RN5SDLib4FileE>
     ca8:	0003      	movs	r3, r0
     caa:	22b6      	movs	r2, #182	; 0xb6
     cac:	0052      	lsls	r2, r2, #1
     cae:	18ba      	adds	r2, r7, r2
     cb0:	6013      	str	r3, [r2, #0]
		Serial.print(F("Image Offset: "));
     cb2:	4a42      	ldr	r2, [pc, #264]	; (dbc <_Z10drawBitmapPcss+0x29c>)
     cb4:	4b3a      	ldr	r3, [pc, #232]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cb6:	0011      	movs	r1, r2
     cb8:	0018      	movs	r0, r3
     cba:	f002 f968 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(bmpImageoffset, DEC);
     cbe:	23b6      	movs	r3, #182	; 0xb6
     cc0:	005b      	lsls	r3, r3, #1
     cc2:	18fb      	adds	r3, r7, r3
     cc4:	6819      	ldr	r1, [r3, #0]
     cc6:	4b36      	ldr	r3, [pc, #216]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cc8:	220a      	movs	r2, #10
     cca:	0018      	movs	r0, r3
     ccc:	f002 fab8 	bl	3240 <_ZN5Print7printlnEmi>
		// Read DIB header
		Serial.print(F("Header size: "));
     cd0:	4a3b      	ldr	r2, [pc, #236]	; (dc0 <_Z10drawBitmapPcss+0x2a0>)
     cd2:	4b33      	ldr	r3, [pc, #204]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cd4:	0011      	movs	r1, r2
     cd6:	0018      	movs	r0, r3
     cd8:	f002 f959 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     cdc:	2386      	movs	r3, #134	; 0x86
     cde:	005b      	lsls	r3, r3, #1
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	0018      	movs	r0, r3
     ce4:	f7ff fa3a 	bl	15c <_Z6read32RN5SDLib4FileE>
     ce8:	0001      	movs	r1, r0
     cea:	4b2d      	ldr	r3, [pc, #180]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cec:	220a      	movs	r2, #10
     cee:	0018      	movs	r0, r3
     cf0:	f002 faa6 	bl	3240 <_ZN5Print7printlnEmi>
		bmpWidth = read32(bmpFile);
     cf4:	2386      	movs	r3, #134	; 0x86
     cf6:	005b      	lsls	r3, r3, #1
     cf8:	18fb      	adds	r3, r7, r3
     cfa:	0018      	movs	r0, r3
     cfc:	f7ff fa2e 	bl	15c <_Z6read32RN5SDLib4FileE>
     d00:	0003      	movs	r3, r0
     d02:	22b4      	movs	r2, #180	; 0xb4
     d04:	0052      	lsls	r2, r2, #1
     d06:	18ba      	adds	r2, r7, r2
     d08:	6013      	str	r3, [r2, #0]
		bmpHeight = read32(bmpFile);
     d0a:	2386      	movs	r3, #134	; 0x86
     d0c:	005b      	lsls	r3, r3, #1
     d0e:	18fb      	adds	r3, r7, r3
     d10:	0018      	movs	r0, r3
     d12:	f7ff fa23 	bl	15c <_Z6read32RN5SDLib4FileE>
     d16:	0003      	movs	r3, r0
     d18:	22ca      	movs	r2, #202	; 0xca
     d1a:	0052      	lsls	r2, r2, #1
     d1c:	18ba      	adds	r2, r7, r2
     d1e:	6013      	str	r3, [r2, #0]
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     d20:	2386      	movs	r3, #134	; 0x86
     d22:	005b      	lsls	r3, r3, #1
     d24:	18fb      	adds	r3, r7, r3
     d26:	0018      	movs	r0, r3
     d28:	f7ff f9f4 	bl	114 <_Z6read16RN5SDLib4FileE>
     d2c:	0003      	movs	r3, r0
     d2e:	3b01      	subs	r3, #1
     d30:	425a      	negs	r2, r3
     d32:	4153      	adcs	r3, r2
     d34:	b2db      	uxtb	r3, r3
     d36:	2b00      	cmp	r3, #0
     d38:	d100      	bne.n	d3c <_Z10drawBitmapPcss+0x21c>
     d3a:	e2dd      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>
			bmpDepth = read16(bmpFile); // bits per pixel
     d3c:	2386      	movs	r3, #134	; 0x86
     d3e:	005b      	lsls	r3, r3, #1
     d40:	18fb      	adds	r3, r7, r3
     d42:	0018      	movs	r0, r3
     d44:	f7ff f9e6 	bl	114 <_Z6read16RN5SDLib4FileE>
     d48:	0003      	movs	r3, r0
     d4a:	001a      	movs	r2, r3
     d4c:	2368      	movs	r3, #104	; 0x68
     d4e:	33ff      	adds	r3, #255	; 0xff
     d50:	18fb      	adds	r3, r7, r3
     d52:	701a      	strb	r2, [r3, #0]
			Serial.print(F("Bit Depth: "));
     d54:	4a1b      	ldr	r2, [pc, #108]	; (dc4 <_Z10drawBitmapPcss+0x2a4>)
     d56:	4b12      	ldr	r3, [pc, #72]	; (da0 <_Z10drawBitmapPcss+0x280>)
     d58:	0011      	movs	r1, r2
     d5a:	0018      	movs	r0, r3
     d5c:	f002 f917 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(bmpDepth);
     d60:	2368      	movs	r3, #104	; 0x68
     d62:	33ff      	adds	r3, #255	; 0xff
     d64:	18fb      	adds	r3, r7, r3
     d66:	7819      	ldrb	r1, [r3, #0]
     d68:	4b0d      	ldr	r3, [pc, #52]	; (da0 <_Z10drawBitmapPcss+0x280>)
     d6a:	220a      	movs	r2, #10
     d6c:	0018      	movs	r0, r3
     d6e:	f002 fa2c 	bl	31ca <_ZN5Print7printlnEhi>
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     d72:	2368      	movs	r3, #104	; 0x68
     d74:	33ff      	adds	r3, #255	; 0xff
     d76:	18fb      	adds	r3, r7, r3
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	2b18      	cmp	r3, #24
     d7c:	d124      	bne.n	dc8 <_Z10drawBitmapPcss+0x2a8>
     d7e:	2386      	movs	r3, #134	; 0x86
     d80:	005b      	lsls	r3, r3, #1
     d82:	18fb      	adds	r3, r7, r3
     d84:	0018      	movs	r0, r3
     d86:	f7ff f9e9 	bl	15c <_Z6read32RN5SDLib4FileE>
     d8a:	1e03      	subs	r3, r0, #0
     d8c:	d11c      	bne.n	dc8 <_Z10drawBitmapPcss+0x2a8>
     d8e:	2301      	movs	r3, #1
     d90:	e01b      	b.n	dca <_Z10drawBitmapPcss+0x2aa>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	fffffe6a 	.word	0xfffffe6a
     d98:	fffffe68 	.word	0xfffffe68
     d9c:	200002bc 	.word	0x200002bc
     da0:	20000e94 	.word	0x20000e94
     da4:	00013204 	.word	0x00013204
     da8:	200008f4 	.word	0x200008f4
     dac:	00013214 	.word	0x00013214
     db0:	0001322c 	.word	0x0001322c
     db4:	ffffb2be 	.word	0xffffb2be
     db8:	00013238 	.word	0x00013238
     dbc:	00013244 	.word	0x00013244
     dc0:	00013254 	.word	0x00013254
     dc4:	00013264 	.word	0x00013264
     dc8:	2300      	movs	r3, #0
     dca:	2b00      	cmp	r3, #0
     dcc:	d100      	bne.n	dd0 <_Z10drawBitmapPcss+0x2b0>
     dce:	e293      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>

				goodBmp = true; // Supported BMP format -- proceed!
     dd0:	23c9      	movs	r3, #201	; 0xc9
     dd2:	005b      	lsls	r3, r3, #1
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	2201      	movs	r2, #1
     dd8:	701a      	strb	r2, [r3, #0]
				Serial.print(F("Image size: "));
     dda:	4ac0      	ldr	r2, [pc, #768]	; (10dc <_Z10drawBitmapPcss+0x5bc>)
     ddc:	4bc0      	ldr	r3, [pc, #768]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     dde:	0011      	movs	r1, r2
     de0:	0018      	movs	r0, r3
     de2:	f002 f8d4 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(bmpWidth);
     de6:	23b4      	movs	r3, #180	; 0xb4
     de8:	005b      	lsls	r3, r3, #1
     dea:	18fb      	adds	r3, r7, r3
     dec:	6819      	ldr	r1, [r3, #0]
     dee:	4bbc      	ldr	r3, [pc, #752]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     df0:	220a      	movs	r2, #10
     df2:	0018      	movs	r0, r3
     df4:	f002 f915 	bl	3022 <_ZN5Print5printEii>
				Serial.print('x');
     df8:	4bb9      	ldr	r3, [pc, #740]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     dfa:	2178      	movs	r1, #120	; 0x78
     dfc:	0018      	movs	r0, r3
     dfe:	f002 f8e6 	bl	2fce <_ZN5Print5printEc>
				Serial.println(bmpHeight);
     e02:	23ca      	movs	r3, #202	; 0xca
     e04:	005b      	lsls	r3, r3, #1
     e06:	18fb      	adds	r3, r7, r3
     e08:	6819      	ldr	r1, [r3, #0]
     e0a:	4bb5      	ldr	r3, [pc, #724]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     e0c:	220a      	movs	r2, #10
     e0e:	0018      	movs	r0, r3
     e10:	f002 f9fb 	bl	320a <_ZN5Print7printlnEii>

				// BMP rows are padded (if needed) to 4-byte boundary
				rowSize = (bmpWidth * 3 + 3) & ~3;
     e14:	23b4      	movs	r3, #180	; 0xb4
     e16:	005b      	lsls	r3, r3, #1
     e18:	18fb      	adds	r3, r7, r3
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	1c5a      	adds	r2, r3, #1
     e1e:	0013      	movs	r3, r2
     e20:	005b      	lsls	r3, r3, #1
     e22:	189b      	adds	r3, r3, r2
     e24:	001a      	movs	r2, r3
     e26:	2303      	movs	r3, #3
     e28:	439a      	bics	r2, r3
     e2a:	0013      	movs	r3, r2
     e2c:	22b0      	movs	r2, #176	; 0xb0
     e2e:	0052      	lsls	r2, r2, #1
     e30:	18ba      	adds	r2, r7, r2
     e32:	6013      	str	r3, [r2, #0]

				// If bmpHeight is negative, image is in top-down order.
				// This is not canon but has been observed in the wild.
				if (bmpHeight < 0) {
     e34:	23ca      	movs	r3, #202	; 0xca
     e36:	005b      	lsls	r3, r3, #1
     e38:	18fb      	adds	r3, r7, r3
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	2b00      	cmp	r3, #0
     e3e:	da0d      	bge.n	e5c <_Z10drawBitmapPcss+0x33c>
					bmpHeight = -bmpHeight;
     e40:	23ca      	movs	r3, #202	; 0xca
     e42:	005b      	lsls	r3, r3, #1
     e44:	18fb      	adds	r3, r7, r3
     e46:	681b      	ldr	r3, [r3, #0]
     e48:	425b      	negs	r3, r3
     e4a:	22ca      	movs	r2, #202	; 0xca
     e4c:	0052      	lsls	r2, r2, #1
     e4e:	18ba      	adds	r2, r7, r2
     e50:	6013      	str	r3, [r2, #0]
					flip = false;
     e52:	2392      	movs	r3, #146	; 0x92
     e54:	33ff      	adds	r3, #255	; 0xff
     e56:	18fb      	adds	r3, r7, r3
     e58:	2200      	movs	r2, #0
     e5a:	701a      	strb	r2, [r3, #0]
				}

				// Crop area to be loaded
				x2 = x + bmpWidth - 1; // Lower-right corner
     e5c:	4ba1      	ldr	r3, [pc, #644]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     e5e:	22cc      	movs	r2, #204	; 0xcc
     e60:	0052      	lsls	r2, r2, #1
     e62:	4694      	mov	ip, r2
     e64:	44bc      	add	ip, r7
     e66:	4463      	add	r3, ip
     e68:	2200      	movs	r2, #0
     e6a:	5e9a      	ldrsh	r2, [r3, r2]
     e6c:	23b4      	movs	r3, #180	; 0xb4
     e6e:	005b      	lsls	r3, r3, #1
     e70:	18fb      	adds	r3, r7, r3
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	18d3      	adds	r3, r2, r3
     e76:	3b01      	subs	r3, #1
     e78:	22ae      	movs	r2, #174	; 0xae
     e7a:	0052      	lsls	r2, r2, #1
     e7c:	18ba      	adds	r2, r7, r2
     e7e:	6013      	str	r3, [r2, #0]
				y2 = y + bmpHeight - 1;
     e80:	4b99      	ldr	r3, [pc, #612]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     e82:	22cc      	movs	r2, #204	; 0xcc
     e84:	0052      	lsls	r2, r2, #1
     e86:	4694      	mov	ip, r2
     e88:	44bc      	add	ip, r7
     e8a:	4463      	add	r3, ip
     e8c:	2200      	movs	r2, #0
     e8e:	5e9a      	ldrsh	r2, [r3, r2]
     e90:	23ca      	movs	r3, #202	; 0xca
     e92:	005b      	lsls	r3, r3, #1
     e94:	18fb      	adds	r3, r7, r3
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	18d3      	adds	r3, r2, r3
     e9a:	3b01      	subs	r3, #1
     e9c:	22ac      	movs	r2, #172	; 0xac
     e9e:	0052      	lsls	r2, r2, #1
     ea0:	18ba      	adds	r2, r7, r2
     ea2:	6013      	str	r3, [r2, #0]
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     ea4:	23ae      	movs	r3, #174	; 0xae
     ea6:	005b      	lsls	r3, r3, #1
     ea8:	18fb      	adds	r3, r7, r3
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	2b00      	cmp	r3, #0
     eae:	da00      	bge.n	eb2 <_Z10drawBitmapPcss+0x392>
     eb0:	e209      	b.n	12c6 <_Z10drawBitmapPcss+0x7a6>
     eb2:	23ac      	movs	r3, #172	; 0xac
     eb4:	005b      	lsls	r3, r3, #1
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	2b00      	cmp	r3, #0
     ebc:	da00      	bge.n	ec0 <_Z10drawBitmapPcss+0x3a0>
     ebe:	e202      	b.n	12c6 <_Z10drawBitmapPcss+0x7a6>
					w = bmpWidth; // Width/height of section to load/display
     ec0:	23b4      	movs	r3, #180	; 0xb4
     ec2:	005b      	lsls	r3, r3, #1
     ec4:	18fb      	adds	r3, r7, r3
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	22c6      	movs	r2, #198	; 0xc6
     eca:	0052      	lsls	r2, r2, #1
     ecc:	18ba      	adds	r2, r7, r2
     ece:	6013      	str	r3, [r2, #0]
					h = bmpHeight;
     ed0:	23ca      	movs	r3, #202	; 0xca
     ed2:	005b      	lsls	r3, r3, #1
     ed4:	18fb      	adds	r3, r7, r3
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	22c4      	movs	r2, #196	; 0xc4
     eda:	0052      	lsls	r2, r2, #1
     edc:	18ba      	adds	r2, r7, r2
     ede:	6013      	str	r3, [r2, #0]
					bx1 = by1 = 0; // UL coordinate in BMP file
     ee0:	2300      	movs	r3, #0
     ee2:	22bc      	movs	r2, #188	; 0xbc
     ee4:	0052      	lsls	r2, r2, #1
     ee6:	18ba      	adds	r2, r7, r2
     ee8:	6013      	str	r3, [r2, #0]
     eea:	23bc      	movs	r3, #188	; 0xbc
     eec:	005b      	lsls	r3, r3, #1
     eee:	18fb      	adds	r3, r7, r3
     ef0:	681b      	ldr	r3, [r3, #0]
     ef2:	22be      	movs	r2, #190	; 0xbe
     ef4:	0052      	lsls	r2, r2, #1
     ef6:	18ba      	adds	r2, r7, r2
     ef8:	6013      	str	r3, [r2, #0]
					if (x < 0) { // Clip left
     efa:	4b7a      	ldr	r3, [pc, #488]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     efc:	22cc      	movs	r2, #204	; 0xcc
     efe:	0052      	lsls	r2, r2, #1
     f00:	4694      	mov	ip, r2
     f02:	44bc      	add	ip, r7
     f04:	4463      	add	r3, ip
     f06:	2200      	movs	r2, #0
     f08:	5e9b      	ldrsh	r3, [r3, r2]
     f0a:	2b00      	cmp	r3, #0
     f0c:	da1d      	bge.n	f4a <_Z10drawBitmapPcss+0x42a>
						bx1 = -x;
     f0e:	4b75      	ldr	r3, [pc, #468]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     f10:	22cc      	movs	r2, #204	; 0xcc
     f12:	0052      	lsls	r2, r2, #1
     f14:	4694      	mov	ip, r2
     f16:	44bc      	add	ip, r7
     f18:	4463      	add	r3, ip
     f1a:	2200      	movs	r2, #0
     f1c:	5e9b      	ldrsh	r3, [r3, r2]
     f1e:	425b      	negs	r3, r3
     f20:	22be      	movs	r2, #190	; 0xbe
     f22:	0052      	lsls	r2, r2, #1
     f24:	18ba      	adds	r2, r7, r2
     f26:	6013      	str	r3, [r2, #0]
						x = 0;
     f28:	4b6e      	ldr	r3, [pc, #440]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     f2a:	22cc      	movs	r2, #204	; 0xcc
     f2c:	0052      	lsls	r2, r2, #1
     f2e:	4694      	mov	ip, r2
     f30:	44bc      	add	ip, r7
     f32:	4463      	add	r3, ip
     f34:	2200      	movs	r2, #0
     f36:	801a      	strh	r2, [r3, #0]
						w = x2 + 1;
     f38:	23ae      	movs	r3, #174	; 0xae
     f3a:	005b      	lsls	r3, r3, #1
     f3c:	18fb      	adds	r3, r7, r3
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	3301      	adds	r3, #1
     f42:	22c6      	movs	r2, #198	; 0xc6
     f44:	0052      	lsls	r2, r2, #1
     f46:	18ba      	adds	r2, r7, r2
     f48:	6013      	str	r3, [r2, #0]
					}
					if (y < 0) { // Clip top
     f4a:	4b67      	ldr	r3, [pc, #412]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f4c:	22cc      	movs	r2, #204	; 0xcc
     f4e:	0052      	lsls	r2, r2, #1
     f50:	4694      	mov	ip, r2
     f52:	44bc      	add	ip, r7
     f54:	4463      	add	r3, ip
     f56:	2200      	movs	r2, #0
     f58:	5e9b      	ldrsh	r3, [r3, r2]
     f5a:	2b00      	cmp	r3, #0
     f5c:	da1d      	bge.n	f9a <_Z10drawBitmapPcss+0x47a>
						by1 = -y;
     f5e:	4b62      	ldr	r3, [pc, #392]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f60:	22cc      	movs	r2, #204	; 0xcc
     f62:	0052      	lsls	r2, r2, #1
     f64:	4694      	mov	ip, r2
     f66:	44bc      	add	ip, r7
     f68:	4463      	add	r3, ip
     f6a:	2200      	movs	r2, #0
     f6c:	5e9b      	ldrsh	r3, [r3, r2]
     f6e:	425b      	negs	r3, r3
     f70:	22bc      	movs	r2, #188	; 0xbc
     f72:	0052      	lsls	r2, r2, #1
     f74:	18ba      	adds	r2, r7, r2
     f76:	6013      	str	r3, [r2, #0]
						y = 0;
     f78:	4b5b      	ldr	r3, [pc, #364]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f7a:	22cc      	movs	r2, #204	; 0xcc
     f7c:	0052      	lsls	r2, r2, #1
     f7e:	4694      	mov	ip, r2
     f80:	44bc      	add	ip, r7
     f82:	4463      	add	r3, ip
     f84:	2200      	movs	r2, #0
     f86:	801a      	strh	r2, [r3, #0]
						h = y2 + 1;
     f88:	23ac      	movs	r3, #172	; 0xac
     f8a:	005b      	lsls	r3, r3, #1
     f8c:	18fb      	adds	r3, r7, r3
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	3301      	adds	r3, #1
     f92:	22c4      	movs	r2, #196	; 0xc4
     f94:	0052      	lsls	r2, r2, #1
     f96:	18ba      	adds	r2, r7, r2
     f98:	6013      	str	r3, [r2, #0]
					}
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     f9a:	4b54      	ldr	r3, [pc, #336]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     f9c:	0018      	movs	r0, r3
     f9e:	f00c fa87 	bl	d4b0 <_ZNK12Adafruit_GFX5widthEv>
     fa2:	0003      	movs	r3, r0
     fa4:	001a      	movs	r2, r3
     fa6:	23ae      	movs	r3, #174	; 0xae
     fa8:	005b      	lsls	r3, r3, #1
     faa:	18fb      	adds	r3, r7, r3
     fac:	681b      	ldr	r3, [r3, #0]
     fae:	0fd0      	lsrs	r0, r2, #31
     fb0:	17d9      	asrs	r1, r3, #31
     fb2:	4293      	cmp	r3, r2
     fb4:	4148      	adcs	r0, r1
     fb6:	0003      	movs	r3, r0
     fb8:	b2db      	uxtb	r3, r3
     fba:	2b00      	cmp	r3, #0
     fbc:	d012      	beq.n	fe4 <_Z10drawBitmapPcss+0x4c4>
     fbe:	4b4b      	ldr	r3, [pc, #300]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     fc0:	0018      	movs	r0, r3
     fc2:	f00c fa75 	bl	d4b0 <_ZNK12Adafruit_GFX5widthEv>
     fc6:	0003      	movs	r3, r0
     fc8:	001a      	movs	r2, r3
     fca:	4b46      	ldr	r3, [pc, #280]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     fcc:	21cc      	movs	r1, #204	; 0xcc
     fce:	0049      	lsls	r1, r1, #1
     fd0:	468c      	mov	ip, r1
     fd2:	44bc      	add	ip, r7
     fd4:	4463      	add	r3, ip
     fd6:	2100      	movs	r1, #0
     fd8:	5e5b      	ldrsh	r3, [r3, r1]
     fda:	1ad3      	subs	r3, r2, r3
     fdc:	22c6      	movs	r2, #198	; 0xc6
     fde:	0052      	lsls	r2, r2, #1
     fe0:	18ba      	adds	r2, r7, r2
     fe2:	6013      	str	r3, [r2, #0]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     fe4:	4b41      	ldr	r3, [pc, #260]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     fe6:	0018      	movs	r0, r3
     fe8:	f00c fa6d 	bl	d4c6 <_ZNK12Adafruit_GFX6heightEv>
     fec:	0003      	movs	r3, r0
     fee:	001a      	movs	r2, r3
     ff0:	23ac      	movs	r3, #172	; 0xac
     ff2:	005b      	lsls	r3, r3, #1
     ff4:	18fb      	adds	r3, r7, r3
     ff6:	681b      	ldr	r3, [r3, #0]
     ff8:	0fd0      	lsrs	r0, r2, #31
     ffa:	17d9      	asrs	r1, r3, #31
     ffc:	4293      	cmp	r3, r2
     ffe:	4148      	adcs	r0, r1
    1000:	0003      	movs	r3, r0
    1002:	b2db      	uxtb	r3, r3
    1004:	2b00      	cmp	r3, #0
    1006:	d012      	beq.n	102e <_Z10drawBitmapPcss+0x50e>
    1008:	4b38      	ldr	r3, [pc, #224]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    100a:	0018      	movs	r0, r3
    100c:	f00c fa5b 	bl	d4c6 <_ZNK12Adafruit_GFX6heightEv>
    1010:	0003      	movs	r3, r0
    1012:	001a      	movs	r2, r3
    1014:	4b34      	ldr	r3, [pc, #208]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
    1016:	21cc      	movs	r1, #204	; 0xcc
    1018:	0049      	lsls	r1, r1, #1
    101a:	468c      	mov	ip, r1
    101c:	44bc      	add	ip, r7
    101e:	4463      	add	r3, ip
    1020:	2100      	movs	r1, #0
    1022:	5e5b      	ldrsh	r3, [r3, r1]
    1024:	1ad3      	subs	r3, r2, r3
    1026:	22c4      	movs	r2, #196	; 0xc4
    1028:	0052      	lsls	r2, r2, #1
    102a:	18ba      	adds	r2, r7, r2
    102c:	6013      	str	r3, [r2, #0]

					// Set tftDisplay address window to clipped image bounds
					tftDisplay.startWrite(); // Requires start/end transaction now
    102e:	4b2f      	ldr	r3, [pc, #188]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    1030:	0018      	movs	r0, r3
    1032:	f006 ff91 	bl	7f58 <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
    1036:	4b2b      	ldr	r3, [pc, #172]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
    1038:	22cc      	movs	r2, #204	; 0xcc
    103a:	0052      	lsls	r2, r2, #1
    103c:	4694      	mov	ip, r2
    103e:	44bc      	add	ip, r7
    1040:	4463      	add	r3, ip
    1042:	8819      	ldrh	r1, [r3, #0]
    1044:	4b28      	ldr	r3, [pc, #160]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
    1046:	22cc      	movs	r2, #204	; 0xcc
    1048:	0052      	lsls	r2, r2, #1
    104a:	4694      	mov	ip, r2
    104c:	44bc      	add	ip, r7
    104e:	4463      	add	r3, ip
    1050:	881a      	ldrh	r2, [r3, #0]
    1052:	23c6      	movs	r3, #198	; 0xc6
    1054:	005b      	lsls	r3, r3, #1
    1056:	18fb      	adds	r3, r7, r3
    1058:	681b      	ldr	r3, [r3, #0]
    105a:	b29c      	uxth	r4, r3
    105c:	23c4      	movs	r3, #196	; 0xc4
    105e:	005b      	lsls	r3, r3, #1
    1060:	18fb      	adds	r3, r7, r3
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	b29b      	uxth	r3, r3
    1066:	4821      	ldr	r0, [pc, #132]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    1068:	9300      	str	r3, [sp, #0]
    106a:	0023      	movs	r3, r4
    106c:	f006 ffde 	bl	802c <_ZN16Adafruit_ILI934113setAddrWindowEtttt>

					for (row = 0; row < h; row++) { // For each scanline...
    1070:	2300      	movs	r3, #0
    1072:	22c2      	movs	r2, #194	; 0xc2
    1074:	0052      	lsls	r2, r2, #1
    1076:	18ba      	adds	r2, r7, r2
    1078:	6013      	str	r3, [r2, #0]
    107a:	23c2      	movs	r3, #194	; 0xc2
    107c:	005b      	lsls	r3, r3, #1
    107e:	18fb      	adds	r3, r7, r3
    1080:	681a      	ldr	r2, [r3, #0]
    1082:	23c4      	movs	r3, #196	; 0xc4
    1084:	005b      	lsls	r3, r3, #1
    1086:	18fb      	adds	r3, r7, r3
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	429a      	cmp	r2, r3
    108c:	db00      	blt.n	1090 <_Z10drawBitmapPcss+0x570>
    108e:	e116      	b.n	12be <_Z10drawBitmapPcss+0x79e>
						// intensive to be doing this on every line, but this
						// method covers a lot of gritty details like cropping
						// and scanline padding.  Also, the seek only takes
						// place if the file position actually needs to change
						// (avoids a lot of cluster math in SD library).
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
    1090:	2392      	movs	r3, #146	; 0x92
    1092:	33ff      	adds	r3, #255	; 0xff
    1094:	18fb      	adds	r3, r7, r3
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	2b00      	cmp	r3, #0
    109a:	d029      	beq.n	10f0 <_Z10drawBitmapPcss+0x5d0>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
    109c:	23ca      	movs	r3, #202	; 0xca
    109e:	005b      	lsls	r3, r3, #1
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	1e5a      	subs	r2, r3, #1
    10a6:	23c2      	movs	r3, #194	; 0xc2
    10a8:	005b      	lsls	r3, r3, #1
    10aa:	18fb      	adds	r3, r7, r3
    10ac:	6819      	ldr	r1, [r3, #0]
    10ae:	23bc      	movs	r3, #188	; 0xbc
    10b0:	005b      	lsls	r3, r3, #1
    10b2:	18fb      	adds	r3, r7, r3
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	18cb      	adds	r3, r1, r3
    10b8:	1ad3      	subs	r3, r2, r3
    10ba:	001a      	movs	r2, r3
    10bc:	23b0      	movs	r3, #176	; 0xb0
    10be:	005b      	lsls	r3, r3, #1
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	435a      	muls	r2, r3
    10c6:	23b6      	movs	r3, #182	; 0xb6
    10c8:	005b      	lsls	r3, r3, #1
    10ca:	18fb      	adds	r3, r7, r3
    10cc:	681b      	ldr	r3, [r3, #0]
    10ce:	18d3      	adds	r3, r2, r3
    10d0:	22ba      	movs	r2, #186	; 0xba
    10d2:	0052      	lsls	r2, r2, #1
    10d4:	18ba      	adds	r2, r7, r2
    10d6:	6013      	str	r3, [r2, #0]
    10d8:	e022      	b.n	1120 <_Z10drawBitmapPcss+0x600>
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00013270 	.word	0x00013270
    10e0:	20000e94 	.word	0x20000e94
    10e4:	fffffe6a 	.word	0xfffffe6a
    10e8:	fffffe68 	.word	0xfffffe68
    10ec:	200002bc 	.word	0x200002bc
						else
						// Bitmap is stored top-to-bottom
						pos = bmpImageoffset + (row + by1) * rowSize;
    10f0:	23c2      	movs	r3, #194	; 0xc2
    10f2:	005b      	lsls	r3, r3, #1
    10f4:	18fb      	adds	r3, r7, r3
    10f6:	681a      	ldr	r2, [r3, #0]
    10f8:	23bc      	movs	r3, #188	; 0xbc
    10fa:	005b      	lsls	r3, r3, #1
    10fc:	18fb      	adds	r3, r7, r3
    10fe:	681b      	ldr	r3, [r3, #0]
    1100:	18d3      	adds	r3, r2, r3
    1102:	001a      	movs	r2, r3
    1104:	23b0      	movs	r3, #176	; 0xb0
    1106:	005b      	lsls	r3, r3, #1
    1108:	18fb      	adds	r3, r7, r3
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	435a      	muls	r2, r3
    110e:	23b6      	movs	r3, #182	; 0xb6
    1110:	005b      	lsls	r3, r3, #1
    1112:	18fb      	adds	r3, r7, r3
    1114:	681b      	ldr	r3, [r3, #0]
    1116:	18d3      	adds	r3, r2, r3
    1118:	22ba      	movs	r2, #186	; 0xba
    111a:	0052      	lsls	r2, r2, #1
    111c:	18ba      	adds	r2, r7, r2
    111e:	6013      	str	r3, [r2, #0]
						pos += bx1 * 3; // Factor in starting column (bx1)
    1120:	23be      	movs	r3, #190	; 0xbe
    1122:	005b      	lsls	r3, r3, #1
    1124:	18fb      	adds	r3, r7, r3
    1126:	681a      	ldr	r2, [r3, #0]
    1128:	0013      	movs	r3, r2
    112a:	005b      	lsls	r3, r3, #1
    112c:	189b      	adds	r3, r3, r2
    112e:	001a      	movs	r2, r3
    1130:	23ba      	movs	r3, #186	; 0xba
    1132:	005b      	lsls	r3, r3, #1
    1134:	18fb      	adds	r3, r7, r3
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	189b      	adds	r3, r3, r2
    113a:	22ba      	movs	r2, #186	; 0xba
    113c:	0052      	lsls	r2, r2, #1
    113e:	18ba      	adds	r2, r7, r2
    1140:	6013      	str	r3, [r2, #0]
						if (bmpFile.position() != pos) { // Need seek?
    1142:	2386      	movs	r3, #134	; 0x86
    1144:	005b      	lsls	r3, r3, #1
    1146:	18fb      	adds	r3, r7, r3
    1148:	0018      	movs	r0, r3
    114a:	f007 fcc0 	bl	8ace <_ZN5SDLib4File8positionEv>
    114e:	0002      	movs	r2, r0
    1150:	23ba      	movs	r3, #186	; 0xba
    1152:	005b      	lsls	r3, r3, #1
    1154:	18fb      	adds	r3, r7, r3
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	1ad3      	subs	r3, r2, r3
    115a:	1e5a      	subs	r2, r3, #1
    115c:	4193      	sbcs	r3, r2
    115e:	b2db      	uxtb	r3, r3
    1160:	2b00      	cmp	r3, #0
    1162:	d017      	beq.n	1194 <_Z10drawBitmapPcss+0x674>
							tftDisplay.endWrite(); // End tftDisplay transaction
    1164:	4b73      	ldr	r3, [pc, #460]	; (1334 <_Z10drawBitmapPcss+0x814>)
    1166:	0018      	movs	r0, r3
    1168:	f006 ff1e 	bl	7fa8 <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
    116c:	23ba      	movs	r3, #186	; 0xba
    116e:	005b      	lsls	r3, r3, #1
    1170:	18fb      	adds	r3, r7, r3
    1172:	681a      	ldr	r2, [r3, #0]
    1174:	2386      	movs	r3, #134	; 0x86
    1176:	005b      	lsls	r3, r3, #1
    1178:	18fb      	adds	r3, r7, r3
    117a:	0011      	movs	r1, r2
    117c:	0018      	movs	r0, r3
    117e:	f007 fc8c 	bl	8a9a <_ZN5SDLib4File4seekEm>
							buffidx = sizeof(sdbuffer); // Force buffer reload
    1182:	2394      	movs	r3, #148	; 0x94
    1184:	33ff      	adds	r3, #255	; 0xff
    1186:	18fb      	adds	r3, r7, r3
    1188:	22ff      	movs	r2, #255	; 0xff
    118a:	701a      	strb	r2, [r3, #0]
							tftDisplay.startWrite(); // Start new tftDisplay transaction
    118c:	4b69      	ldr	r3, [pc, #420]	; (1334 <_Z10drawBitmapPcss+0x814>)
    118e:	0018      	movs	r0, r3
    1190:	f006 fee2 	bl	7f58 <_ZN16Adafruit_ILI934110startWriteEv>
						}
						for (col = 0; col < w; col++) { // For each pixel...
    1194:	2300      	movs	r3, #0
    1196:	22c0      	movs	r2, #192	; 0xc0
    1198:	0052      	lsls	r2, r2, #1
    119a:	18ba      	adds	r2, r7, r2
    119c:	6013      	str	r3, [r2, #0]
    119e:	23c0      	movs	r3, #192	; 0xc0
    11a0:	005b      	lsls	r3, r3, #1
    11a2:	18fb      	adds	r3, r7, r3
    11a4:	681a      	ldr	r2, [r3, #0]
    11a6:	23c6      	movs	r3, #198	; 0xc6
    11a8:	005b      	lsls	r3, r3, #1
    11aa:	18fb      	adds	r3, r7, r3
    11ac:	681b      	ldr	r3, [r3, #0]
    11ae:	429a      	cmp	r2, r3
    11b0:	da7b      	bge.n	12aa <_Z10drawBitmapPcss+0x78a>
							// Time to read more pixel data?
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
    11b2:	2394      	movs	r3, #148	; 0x94
    11b4:	33ff      	adds	r3, #255	; 0xff
    11b6:	18fb      	adds	r3, r7, r3
    11b8:	781b      	ldrb	r3, [r3, #0]
    11ba:	2bff      	cmp	r3, #255	; 0xff
    11bc:	d115      	bne.n	11ea <_Z10drawBitmapPcss+0x6ca>
								tftDisplay.endWrite(); // End tftDisplay transaction
    11be:	4b5d      	ldr	r3, [pc, #372]	; (1334 <_Z10drawBitmapPcss+0x814>)
    11c0:	0018      	movs	r0, r3
    11c2:	f006 fef1 	bl	7fa8 <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
    11c6:	230c      	movs	r3, #12
    11c8:	18f9      	adds	r1, r7, r3
    11ca:	2386      	movs	r3, #134	; 0x86
    11cc:	005b      	lsls	r3, r3, #1
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	22ff      	movs	r2, #255	; 0xff
    11d2:	0018      	movs	r0, r3
    11d4:	f007 fc13 	bl	89fe <_ZN5SDLib4File4readEPvt>
								buffidx = 0; // Set index to beginning
    11d8:	2394      	movs	r3, #148	; 0x94
    11da:	33ff      	adds	r3, #255	; 0xff
    11dc:	18fb      	adds	r3, r7, r3
    11de:	2200      	movs	r2, #0
    11e0:	701a      	strb	r2, [r3, #0]
								tftDisplay.startWrite(); // Start new tftDisplay transaction
    11e2:	4b54      	ldr	r3, [pc, #336]	; (1334 <_Z10drawBitmapPcss+0x814>)
    11e4:	0018      	movs	r0, r3
    11e6:	f006 feb7 	bl	7f58 <_ZN16Adafruit_ILI934110startWriteEv>
							}
							// Convert pixel from BMP to tftDisplay format, push to display
							b = sdbuffer[buffidx++];
    11ea:	2394      	movs	r3, #148	; 0x94
    11ec:	33ff      	adds	r3, #255	; 0xff
    11ee:	18fb      	adds	r3, r7, r3
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	2294      	movs	r2, #148	; 0x94
    11f4:	32ff      	adds	r2, #255	; 0xff
    11f6:	18ba      	adds	r2, r7, r2
    11f8:	1c59      	adds	r1, r3, #1
    11fa:	7011      	strb	r1, [r2, #0]
    11fc:	0019      	movs	r1, r3
    11fe:	2358      	movs	r3, #88	; 0x58
    1200:	33ff      	adds	r3, #255	; 0xff
    1202:	18fb      	adds	r3, r7, r3
    1204:	4a4c      	ldr	r2, [pc, #304]	; (1338 <_Z10drawBitmapPcss+0x818>)
    1206:	20cc      	movs	r0, #204	; 0xcc
    1208:	0040      	lsls	r0, r0, #1
    120a:	4684      	mov	ip, r0
    120c:	44bc      	add	ip, r7
    120e:	4462      	add	r2, ip
    1210:	5c52      	ldrb	r2, [r2, r1]
    1212:	701a      	strb	r2, [r3, #0]
							g = sdbuffer[buffidx++];
    1214:	2394      	movs	r3, #148	; 0x94
    1216:	33ff      	adds	r3, #255	; 0xff
    1218:	18fb      	adds	r3, r7, r3
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	2294      	movs	r2, #148	; 0x94
    121e:	32ff      	adds	r2, #255	; 0xff
    1220:	18ba      	adds	r2, r7, r2
    1222:	1c59      	adds	r1, r3, #1
    1224:	7011      	strb	r1, [r2, #0]
    1226:	0019      	movs	r1, r3
    1228:	23ab      	movs	r3, #171	; 0xab
    122a:	005b      	lsls	r3, r3, #1
    122c:	18fb      	adds	r3, r7, r3
    122e:	4a42      	ldr	r2, [pc, #264]	; (1338 <_Z10drawBitmapPcss+0x818>)
    1230:	20cc      	movs	r0, #204	; 0xcc
    1232:	0040      	lsls	r0, r0, #1
    1234:	4684      	mov	ip, r0
    1236:	44bc      	add	ip, r7
    1238:	4462      	add	r2, ip
    123a:	5c52      	ldrb	r2, [r2, r1]
    123c:	701a      	strb	r2, [r3, #0]
							r = sdbuffer[buffidx++];
    123e:	2394      	movs	r3, #148	; 0x94
    1240:	33ff      	adds	r3, #255	; 0xff
    1242:	18fb      	adds	r3, r7, r3
    1244:	781b      	ldrb	r3, [r3, #0]
    1246:	2294      	movs	r2, #148	; 0x94
    1248:	32ff      	adds	r2, #255	; 0xff
    124a:	18ba      	adds	r2, r7, r2
    124c:	1c59      	adds	r1, r3, #1
    124e:	7011      	strb	r1, [r2, #0]
    1250:	0019      	movs	r1, r3
    1252:	2356      	movs	r3, #86	; 0x56
    1254:	33ff      	adds	r3, #255	; 0xff
    1256:	18fb      	adds	r3, r7, r3
    1258:	4a37      	ldr	r2, [pc, #220]	; (1338 <_Z10drawBitmapPcss+0x818>)
    125a:	20cc      	movs	r0, #204	; 0xcc
    125c:	0040      	lsls	r0, r0, #1
    125e:	4684      	mov	ip, r0
    1260:	44bc      	add	ip, r7
    1262:	4462      	add	r2, ip
    1264:	5c52      	ldrb	r2, [r2, r1]
    1266:	701a      	strb	r2, [r3, #0]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
    1268:	2358      	movs	r3, #88	; 0x58
    126a:	33ff      	adds	r3, #255	; 0xff
    126c:	18fb      	adds	r3, r7, r3
    126e:	781c      	ldrb	r4, [r3, #0]
    1270:	23ab      	movs	r3, #171	; 0xab
    1272:	005b      	lsls	r3, r3, #1
    1274:	18fb      	adds	r3, r7, r3
    1276:	781a      	ldrb	r2, [r3, #0]
    1278:	2356      	movs	r3, #86	; 0x56
    127a:	33ff      	adds	r3, #255	; 0xff
    127c:	18fb      	adds	r3, r7, r3
    127e:	7819      	ldrb	r1, [r3, #0]
    1280:	482c      	ldr	r0, [pc, #176]	; (1334 <_Z10drawBitmapPcss+0x814>)
    1282:	0023      	movs	r3, r4
    1284:	f006 fa58 	bl	7738 <_ZN16Adafruit_ILI93418color565Ehhh>
    1288:	0003      	movs	r3, r0
    128a:	001a      	movs	r2, r3
    128c:	4b29      	ldr	r3, [pc, #164]	; (1334 <_Z10drawBitmapPcss+0x814>)
    128e:	0011      	movs	r1, r2
    1290:	0018      	movs	r0, r3
    1292:	f006 ff93 	bl	81bc <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
    1296:	23c0      	movs	r3, #192	; 0xc0
    1298:	005b      	lsls	r3, r3, #1
    129a:	18fb      	adds	r3, r7, r3
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	3301      	adds	r3, #1
    12a0:	22c0      	movs	r2, #192	; 0xc0
    12a2:	0052      	lsls	r2, r2, #1
    12a4:	18ba      	adds	r2, r7, r2
    12a6:	6013      	str	r3, [r2, #0]
    12a8:	e779      	b.n	119e <_Z10drawBitmapPcss+0x67e>
					for (row = 0; row < h; row++) { // For each scanline...
    12aa:	23c2      	movs	r3, #194	; 0xc2
    12ac:	005b      	lsls	r3, r3, #1
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	3301      	adds	r3, #1
    12b4:	22c2      	movs	r2, #194	; 0xc2
    12b6:	0052      	lsls	r2, r2, #1
    12b8:	18ba      	adds	r2, r7, r2
    12ba:	6013      	str	r3, [r2, #0]
    12bc:	e6dd      	b.n	107a <_Z10drawBitmapPcss+0x55a>
						} // end pixel
					} // end scanline
					tftDisplay.endWrite(); // End last tftDisplay transaction
    12be:	4b1d      	ldr	r3, [pc, #116]	; (1334 <_Z10drawBitmapPcss+0x814>)
    12c0:	0018      	movs	r0, r3
    12c2:	f006 fe71 	bl	7fa8 <_ZN16Adafruit_ILI93418endWriteEv>
				} // end onscreen
				Serial.print(F("Loaded in "));
    12c6:	4a1d      	ldr	r2, [pc, #116]	; (133c <_Z10drawBitmapPcss+0x81c>)
    12c8:	4b1d      	ldr	r3, [pc, #116]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12ca:	0011      	movs	r1, r2
    12cc:	0018      	movs	r0, r3
    12ce:	f001 fe5e 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(millis() - startTime);
    12d2:	f001 fda1 	bl	2e18 <millis>
    12d6:	0002      	movs	r2, r0
    12d8:	23b8      	movs	r3, #184	; 0xb8
    12da:	005b      	lsls	r3, r3, #1
    12dc:	18fb      	adds	r3, r7, r3
    12de:	681b      	ldr	r3, [r3, #0]
    12e0:	1ad1      	subs	r1, r2, r3
    12e2:	4b17      	ldr	r3, [pc, #92]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12e4:	220a      	movs	r2, #10
    12e6:	0018      	movs	r0, r3
    12e8:	f001 feed 	bl	30c6 <_ZN5Print5printEmi>
				Serial.println(F(" ms"));
    12ec:	4a15      	ldr	r2, [pc, #84]	; (1344 <_Z10drawBitmapPcss+0x824>)
    12ee:	4b14      	ldr	r3, [pc, #80]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12f0:	0011      	movs	r1, r2
    12f2:	0018      	movs	r0, r3
    12f4:	f001 ff06 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
			} // end goodBmp
		}
	}

	bmpFile.close();
    12f8:	2386      	movs	r3, #134	; 0x86
    12fa:	005b      	lsls	r3, r3, #1
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	0018      	movs	r0, r3
    1300:	f007 fc0e 	bl	8b20 <_ZN5SDLib4File5closeEv>
	if (!goodBmp)
    1304:	23c9      	movs	r3, #201	; 0xc9
    1306:	005b      	lsls	r3, r3, #1
    1308:	18fb      	adds	r3, r7, r3
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	2201      	movs	r2, #1
    130e:	4053      	eors	r3, r2
    1310:	b2db      	uxtb	r3, r3
    1312:	2b00      	cmp	r3, #0
    1314:	d005      	beq.n	1322 <_Z10drawBitmapPcss+0x802>
	Serial.println(F("BMP format not recognized or SD not mounted"));
    1316:	4a0c      	ldr	r2, [pc, #48]	; (1348 <_Z10drawBitmapPcss+0x828>)
    1318:	4b09      	ldr	r3, [pc, #36]	; (1340 <_Z10drawBitmapPcss+0x820>)
    131a:	0011      	movs	r1, r2
    131c:	0018      	movs	r0, r3
    131e:	f001 fef1 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println();
    1322:	4b07      	ldr	r3, [pc, #28]	; (1340 <_Z10drawBitmapPcss+0x820>)
    1324:	0018      	movs	r0, r3
    1326:	f001 ff07 	bl	3138 <_ZN5Print7printlnEv>
    132a:	e000      	b.n	132e <_Z10drawBitmapPcss+0x80e>
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
    132c:	46c0      	nop			; (mov r8, r8)
}
    132e:	46bd      	mov	sp, r7
    1330:	b067      	add	sp, #412	; 0x19c
    1332:	bd90      	pop	{r4, r7, pc}
    1334:	200002bc 	.word	0x200002bc
    1338:	fffffe74 	.word	0xfffffe74
    133c:	00013280 	.word	0x00013280
    1340:	20000e94 	.word	0x20000e94
    1344:	0001328c 	.word	0x0001328c
    1348:	00013290 	.word	0x00013290

0000134c <_Z8getPointv>:

TS_Point getPoint() {
    134c:	b580      	push	{r7, lr}
    134e:	b084      	sub	sp, #16
    1350:	af02      	add	r7, sp, #8
    1352:	6078      	str	r0, [r7, #4]
	TS_Point point = touchScreen.getPoint();
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	4915      	ldr	r1, [pc, #84]	; (13ac <_Z8getPointv+0x60>)
    1358:	2200      	movs	r2, #0
    135a:	0018      	movs	r0, r3
    135c:	f005 ffb5 	bl	72ca <_ZN15Adafruit_FT62068getPointEh>
	 // Map point so that coordinate system starts from top left
	point.x = map(point.x, 0, 240, 240, 0);
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	2200      	movs	r2, #0
    1364:	5e9b      	ldrsh	r3, [r3, r2]
    1366:	0018      	movs	r0, r3
    1368:	2300      	movs	r3, #0
    136a:	9300      	str	r3, [sp, #0]
    136c:	23f0      	movs	r3, #240	; 0xf0
    136e:	22f0      	movs	r2, #240	; 0xf0
    1370:	2100      	movs	r1, #0
    1372:	f005 fd61 	bl	6e38 <_Z3maplllll>
    1376:	0003      	movs	r3, r0
    1378:	b21a      	sxth	r2, r3
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	801a      	strh	r2, [r3, #0]
	point.y = map(point.y, 0, 320, 320, 0);
    137e:	687b      	ldr	r3, [r7, #4]
    1380:	2202      	movs	r2, #2
    1382:	5e9b      	ldrsh	r3, [r3, r2]
    1384:	0018      	movs	r0, r3
    1386:	23a0      	movs	r3, #160	; 0xa0
    1388:	0059      	lsls	r1, r3, #1
    138a:	23a0      	movs	r3, #160	; 0xa0
    138c:	005a      	lsls	r2, r3, #1
    138e:	2300      	movs	r3, #0
    1390:	9300      	str	r3, [sp, #0]
    1392:	000b      	movs	r3, r1
    1394:	2100      	movs	r1, #0
    1396:	f005 fd4f 	bl	6e38 <_Z3maplllll>
    139a:	0003      	movs	r3, r0
    139c:	b21a      	sxth	r2, r3
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	805a      	strh	r2, [r3, #2]
	return point;
    13a2:	46c0      	nop			; (mov r8, r8)
}
    13a4:	6878      	ldr	r0, [r7, #4]
    13a6:	46bd      	mov	sp, r7
    13a8:	b002      	add	sp, #8
    13aa:	bd80      	pop	{r7, pc}
    13ac:	20000320 	.word	0x20000320

000013b0 <_Z7addMoveh8TS_Point5State>:

State addMove(uint8_t square, TS_Point marker, State player) {
    13b0:	b590      	push	{r4, r7, lr}
    13b2:	b087      	sub	sp, #28
    13b4:	af00      	add	r7, sp, #0
    13b6:	0004      	movs	r4, r0
    13b8:	1d38      	adds	r0, r7, #4
    13ba:	6001      	str	r1, [r0, #0]
    13bc:	6042      	str	r2, [r0, #4]
    13be:	0019      	movs	r1, r3
    13c0:	230f      	movs	r3, #15
    13c2:	18fb      	adds	r3, r7, r3
    13c4:	1c22      	adds	r2, r4, #0
    13c6:	701a      	strb	r2, [r3, #0]
    13c8:	230e      	movs	r3, #14
    13ca:	18fb      	adds	r3, r7, r3
    13cc:	1c0a      	adds	r2, r1, #0
    13ce:	701a      	strb	r2, [r3, #0]
	char bitmap;
	Serial.print(F("addMove, player = "));
    13d0:	4a34      	ldr	r2, [pc, #208]	; (14a4 <_Z7addMoveh8TS_Point5State+0xf4>)
    13d2:	4b35      	ldr	r3, [pc, #212]	; (14a8 <_Z7addMoveh8TS_Point5State+0xf8>)
    13d4:	0011      	movs	r1, r2
    13d6:	0018      	movs	r0, r3
    13d8:	f001 fdd9 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(player);
    13dc:	230e      	movs	r3, #14
    13de:	18fb      	adds	r3, r7, r3
    13e0:	7819      	ldrb	r1, [r3, #0]
    13e2:	4b31      	ldr	r3, [pc, #196]	; (14a8 <_Z7addMoveh8TS_Point5State+0xf8>)
    13e4:	220a      	movs	r2, #10
    13e6:	0018      	movs	r0, r3
    13e8:	f001 ff0f 	bl	320a <_ZN5Print7printlnEii>
	if (player == cross) {
    13ec:	230e      	movs	r3, #14
    13ee:	18fb      	adds	r3, r7, r3
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	2b02      	cmp	r3, #2
    13f4:	d125      	bne.n	1442 <_Z7addMoveh8TS_Point5State+0x92>
		Serial.println(F("this might be a cross"));
    13f6:	4a2d      	ldr	r2, [pc, #180]	; (14ac <_Z7addMoveh8TS_Point5State+0xfc>)
    13f8:	4b2b      	ldr	r3, [pc, #172]	; (14a8 <_Z7addMoveh8TS_Point5State+0xf8>)
    13fa:	0011      	movs	r1, r2
    13fc:	0018      	movs	r0, r3
    13fe:	f001 fe81 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if (square % 2) {
    1402:	230f      	movs	r3, #15
    1404:	18fb      	adds	r3, r7, r3
    1406:	781b      	ldrb	r3, [r3, #0]
    1408:	2201      	movs	r2, #1
    140a:	4013      	ands	r3, r2
    140c:	d004      	beq.n	1418 <_Z7addMoveh8TS_Point5State+0x68>
			bitmap = 'j';
    140e:	2317      	movs	r3, #23
    1410:	18fb      	adds	r3, r7, r3
    1412:	226a      	movs	r2, #106	; 0x6a
    1414:	701a      	strb	r2, [r3, #0]
    1416:	e003      	b.n	1420 <_Z7addMoveh8TS_Point5State+0x70>
			} else {
			bitmap = 'k';
    1418:	2317      	movs	r3, #23
    141a:	18fb      	adds	r3, r7, r3
    141c:	226b      	movs	r2, #107	; 0x6b
    141e:	701a      	strb	r2, [r3, #0]
		}
		drawBitmap(bitmap, marker.x, marker.y);
    1420:	1d3b      	adds	r3, r7, #4
    1422:	2100      	movs	r1, #0
    1424:	5e59      	ldrsh	r1, [r3, r1]
    1426:	1d3b      	adds	r3, r7, #4
    1428:	2202      	movs	r2, #2
    142a:	5e9a      	ldrsh	r2, [r3, r2]
    142c:	2317      	movs	r3, #23
    142e:	18fb      	adds	r3, r7, r3
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	0018      	movs	r0, r3
    1434:	f7fe ff16 	bl	264 <_Z10drawBitmapcss>
		// Change players
		player = nought;
    1438:	230e      	movs	r3, #14
    143a:	18fb      	adds	r3, r7, r3
    143c:	2201      	movs	r2, #1
    143e:	701a      	strb	r2, [r3, #0]
    1440:	e028      	b.n	1494 <_Z7addMoveh8TS_Point5State+0xe4>
		} else {
		Serial.println(F("this might be a nought"));
    1442:	4a1b      	ldr	r2, [pc, #108]	; (14b0 <_Z7addMoveh8TS_Point5State+0x100>)
    1444:	4b18      	ldr	r3, [pc, #96]	; (14a8 <_Z7addMoveh8TS_Point5State+0xf8>)
    1446:	0011      	movs	r1, r2
    1448:	0018      	movs	r0, r3
    144a:	f001 fe5b 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if (square % 2) {
    144e:	230f      	movs	r3, #15
    1450:	18fb      	adds	r3, r7, r3
    1452:	781b      	ldrb	r3, [r3, #0]
    1454:	2201      	movs	r2, #1
    1456:	4013      	ands	r3, r2
    1458:	d004      	beq.n	1464 <_Z7addMoveh8TS_Point5State+0xb4>
			bitmap = 'h';
    145a:	2317      	movs	r3, #23
    145c:	18fb      	adds	r3, r7, r3
    145e:	2268      	movs	r2, #104	; 0x68
    1460:	701a      	strb	r2, [r3, #0]
    1462:	e003      	b.n	146c <_Z7addMoveh8TS_Point5State+0xbc>
			} else {
			bitmap = 'i';
    1464:	2317      	movs	r3, #23
    1466:	18fb      	adds	r3, r7, r3
    1468:	2269      	movs	r2, #105	; 0x69
    146a:	701a      	strb	r2, [r3, #0]
		}
		drawBitmap(bitmap, marker.x - 2, marker.y);
    146c:	1d3b      	adds	r3, r7, #4
    146e:	2200      	movs	r2, #0
    1470:	5e9b      	ldrsh	r3, [r3, r2]
    1472:	b29b      	uxth	r3, r3
    1474:	3b02      	subs	r3, #2
    1476:	b29b      	uxth	r3, r3
    1478:	b219      	sxth	r1, r3
    147a:	1d3b      	adds	r3, r7, #4
    147c:	2202      	movs	r2, #2
    147e:	5e9a      	ldrsh	r2, [r3, r2]
    1480:	2317      	movs	r3, #23
    1482:	18fb      	adds	r3, r7, r3
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	0018      	movs	r0, r3
    1488:	f7fe feec 	bl	264 <_Z10drawBitmapcss>
		// Change players
		player = cross;
    148c:	230e      	movs	r3, #14
    148e:	18fb      	adds	r3, r7, r3
    1490:	2202      	movs	r2, #2
    1492:	701a      	strb	r2, [r3, #0]
	}
	return player;
    1494:	230e      	movs	r3, #14
    1496:	18fb      	adds	r3, r7, r3
    1498:	781b      	ldrb	r3, [r3, #0]
}
    149a:	0018      	movs	r0, r3
    149c:	46bd      	mov	sp, r7
    149e:	b007      	add	sp, #28
    14a0:	bd90      	pop	{r4, r7, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	000132bc 	.word	0x000132bc
    14a8:	20000e94 	.word	0x20000e94
    14ac:	000132d0 	.word	0x000132d0
    14b0:	000132e8 	.word	0x000132e8

000014b4 <_Z11updateScoreii>:

void updateScore(int noughtsScore, int crossesScore) {
    14b4:	b590      	push	{r4, r7, lr}
    14b6:	b08b      	sub	sp, #44	; 0x2c
    14b8:	af00      	add	r7, sp, #0
    14ba:	6078      	str	r0, [r7, #4]
    14bc:	6039      	str	r1, [r7, #0]
	String s = (String) noughtsScore;
    14be:	6879      	ldr	r1, [r7, #4]
    14c0:	230c      	movs	r3, #12
    14c2:	18fb      	adds	r3, r7, r3
    14c4:	220a      	movs	r2, #10
    14c6:	0018      	movs	r0, r3
    14c8:	f005 fd1d 	bl	6f06 <_ZN6StringC1Eih>
	char newScore = s.charAt(0);
    14cc:	2327      	movs	r3, #39	; 0x27
    14ce:	18fc      	adds	r4, r7, r3
    14d0:	230c      	movs	r3, #12
    14d2:	18fb      	adds	r3, r7, r3
    14d4:	2100      	movs	r1, #0
    14d6:	0018      	movs	r0, r3
    14d8:	f005 fe62 	bl	71a0 <_ZNK6String6charAtEj>
    14dc:	0003      	movs	r3, r0
    14de:	7023      	strb	r3, [r4, #0]
	drawBitmap(newScore, 95, 29);
    14e0:	2327      	movs	r3, #39	; 0x27
    14e2:	18fb      	adds	r3, r7, r3
    14e4:	781b      	ldrb	r3, [r3, #0]
    14e6:	221d      	movs	r2, #29
    14e8:	215f      	movs	r1, #95	; 0x5f
    14ea:	0018      	movs	r0, r3
    14ec:	f7fe feba 	bl	264 <_Z10drawBitmapcss>
	s = (String) crossesScore;
    14f0:	6839      	ldr	r1, [r7, #0]
    14f2:	2318      	movs	r3, #24
    14f4:	18fb      	adds	r3, r7, r3
    14f6:	220a      	movs	r2, #10
    14f8:	0018      	movs	r0, r3
    14fa:	f005 fd04 	bl	6f06 <_ZN6StringC1Eih>
    14fe:	2318      	movs	r3, #24
    1500:	18fa      	adds	r2, r7, r3
    1502:	230c      	movs	r3, #12
    1504:	18fb      	adds	r3, r7, r3
    1506:	0011      	movs	r1, r2
    1508:	0018      	movs	r0, r3
    150a:	f005 fe19 	bl	7140 <_ZN6StringaSEOS_>
    150e:	2318      	movs	r3, #24
    1510:	18fb      	adds	r3, r7, r3
    1512:	0018      	movs	r0, r3
    1514:	f005 fd16 	bl	6f44 <_ZN6StringD1Ev>
	newScore = s.charAt(0);
    1518:	2327      	movs	r3, #39	; 0x27
    151a:	18fc      	adds	r4, r7, r3
    151c:	230c      	movs	r3, #12
    151e:	18fb      	adds	r3, r7, r3
    1520:	2100      	movs	r1, #0
    1522:	0018      	movs	r0, r3
    1524:	f005 fe3c 	bl	71a0 <_ZNK6String6charAtEj>
    1528:	0003      	movs	r3, r0
    152a:	7023      	strb	r3, [r4, #0]
	drawBitmap(newScore, 132, 28);
    152c:	2327      	movs	r3, #39	; 0x27
    152e:	18fb      	adds	r3, r7, r3
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	221c      	movs	r2, #28
    1534:	2184      	movs	r1, #132	; 0x84
    1536:	0018      	movs	r0, r3
    1538:	f7fe fe94 	bl	264 <_Z10drawBitmapcss>
	String s = (String) noughtsScore;
    153c:	230c      	movs	r3, #12
    153e:	18fb      	adds	r3, r7, r3
    1540:	0018      	movs	r0, r3
    1542:	f005 fcff 	bl	6f44 <_ZN6StringD1Ev>
}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	46bd      	mov	sp, r7
    154a:	b00b      	add	sp, #44	; 0x2c
    154c:	bd90      	pop	{r4, r7, pc}

0000154e <_Z9getSquare8TS_Point>:

uint8_t getSquare(TS_Point point) {
    154e:	b580      	push	{r7, lr}
    1550:	b084      	sub	sp, #16
    1552:	af00      	add	r7, sp, #0
    1554:	003b      	movs	r3, r7
    1556:	6018      	str	r0, [r3, #0]
    1558:	6059      	str	r1, [r3, #4]
	uint8_t square = 255;
    155a:	230f      	movs	r3, #15
    155c:	18fb      	adds	r3, r7, r3
    155e:	22ff      	movs	r2, #255	; 0xff
    1560:	701a      	strb	r2, [r3, #0]
	if (point.y > 79 && point.y < 161) {
    1562:	003b      	movs	r3, r7
    1564:	2202      	movs	r2, #2
    1566:	5e9b      	ldrsh	r3, [r3, r2]
    1568:	2b4f      	cmp	r3, #79	; 0x4f
    156a:	dd22      	ble.n	15b2 <_Z9getSquare8TS_Point+0x64>
    156c:	003b      	movs	r3, r7
    156e:	2202      	movs	r2, #2
    1570:	5e9b      	ldrsh	r3, [r3, r2]
    1572:	2ba0      	cmp	r3, #160	; 0xa0
    1574:	dc1d      	bgt.n	15b2 <_Z9getSquare8TS_Point+0x64>
		if (point.x < 81) {
    1576:	003b      	movs	r3, r7
    1578:	2200      	movs	r2, #0
    157a:	5e9b      	ldrsh	r3, [r3, r2]
    157c:	2b50      	cmp	r3, #80	; 0x50
    157e:	dc04      	bgt.n	158a <_Z9getSquare8TS_Point+0x3c>
			square = 0;
    1580:	230f      	movs	r3, #15
    1582:	18fb      	adds	r3, r7, r3
    1584:	2200      	movs	r2, #0
    1586:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1588:	e05e      	b.n	1648 <_Z9getSquare8TS_Point+0xfa>
			} else if (point.x < 161) {
    158a:	003b      	movs	r3, r7
    158c:	2200      	movs	r2, #0
    158e:	5e9b      	ldrsh	r3, [r3, r2]
    1590:	2ba0      	cmp	r3, #160	; 0xa0
    1592:	dc04      	bgt.n	159e <_Z9getSquare8TS_Point+0x50>
			square = 1;
    1594:	230f      	movs	r3, #15
    1596:	18fb      	adds	r3, r7, r3
    1598:	2201      	movs	r2, #1
    159a:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    159c:	e054      	b.n	1648 <_Z9getSquare8TS_Point+0xfa>
			} else if (point.x < 240) {
    159e:	003b      	movs	r3, r7
    15a0:	2200      	movs	r2, #0
    15a2:	5e9b      	ldrsh	r3, [r3, r2]
    15a4:	2bef      	cmp	r3, #239	; 0xef
    15a6:	dc4f      	bgt.n	1648 <_Z9getSquare8TS_Point+0xfa>
			square = 2;
    15a8:	230f      	movs	r3, #15
    15aa:	18fb      	adds	r3, r7, r3
    15ac:	2202      	movs	r2, #2
    15ae:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15b0:	e04a      	b.n	1648 <_Z9getSquare8TS_Point+0xfa>
		}

		} else if (point.y > 160 && point.y < 241) {
    15b2:	003b      	movs	r3, r7
    15b4:	2202      	movs	r2, #2
    15b6:	5e9b      	ldrsh	r3, [r3, r2]
    15b8:	2ba0      	cmp	r3, #160	; 0xa0
    15ba:	dd22      	ble.n	1602 <_Z9getSquare8TS_Point+0xb4>
    15bc:	003b      	movs	r3, r7
    15be:	2202      	movs	r2, #2
    15c0:	5e9b      	ldrsh	r3, [r3, r2]
    15c2:	2bf0      	cmp	r3, #240	; 0xf0
    15c4:	dc1d      	bgt.n	1602 <_Z9getSquare8TS_Point+0xb4>
		if (point.x < 81) {
    15c6:	003b      	movs	r3, r7
    15c8:	2200      	movs	r2, #0
    15ca:	5e9b      	ldrsh	r3, [r3, r2]
    15cc:	2b50      	cmp	r3, #80	; 0x50
    15ce:	dc04      	bgt.n	15da <_Z9getSquare8TS_Point+0x8c>
			square = 3;
    15d0:	230f      	movs	r3, #15
    15d2:	18fb      	adds	r3, r7, r3
    15d4:	2203      	movs	r2, #3
    15d6:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15d8:	e038      	b.n	164c <_Z9getSquare8TS_Point+0xfe>
			} else if (point.x < 161) {
    15da:	003b      	movs	r3, r7
    15dc:	2200      	movs	r2, #0
    15de:	5e9b      	ldrsh	r3, [r3, r2]
    15e0:	2ba0      	cmp	r3, #160	; 0xa0
    15e2:	dc04      	bgt.n	15ee <_Z9getSquare8TS_Point+0xa0>
			square = 4;
    15e4:	230f      	movs	r3, #15
    15e6:	18fb      	adds	r3, r7, r3
    15e8:	2204      	movs	r2, #4
    15ea:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15ec:	e02e      	b.n	164c <_Z9getSquare8TS_Point+0xfe>
			} else if (point.x < 240) {
    15ee:	003b      	movs	r3, r7
    15f0:	2200      	movs	r2, #0
    15f2:	5e9b      	ldrsh	r3, [r3, r2]
    15f4:	2bef      	cmp	r3, #239	; 0xef
    15f6:	dc29      	bgt.n	164c <_Z9getSquare8TS_Point+0xfe>
			square = 5;
    15f8:	230f      	movs	r3, #15
    15fa:	18fb      	adds	r3, r7, r3
    15fc:	2205      	movs	r2, #5
    15fe:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1600:	e024      	b.n	164c <_Z9getSquare8TS_Point+0xfe>
		}

		} else if (point.y > 240) {
    1602:	003b      	movs	r3, r7
    1604:	2202      	movs	r2, #2
    1606:	5e9b      	ldrsh	r3, [r3, r2]
    1608:	2bf0      	cmp	r3, #240	; 0xf0
    160a:	dd20      	ble.n	164e <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    160c:	003b      	movs	r3, r7
    160e:	2200      	movs	r2, #0
    1610:	5e9b      	ldrsh	r3, [r3, r2]
    1612:	2b50      	cmp	r3, #80	; 0x50
    1614:	dc04      	bgt.n	1620 <_Z9getSquare8TS_Point+0xd2>
			square = 6;
    1616:	230f      	movs	r3, #15
    1618:	18fb      	adds	r3, r7, r3
    161a:	2206      	movs	r2, #6
    161c:	701a      	strb	r2, [r3, #0]
    161e:	e016      	b.n	164e <_Z9getSquare8TS_Point+0x100>
			} else if (point.x < 161) {
    1620:	003b      	movs	r3, r7
    1622:	2200      	movs	r2, #0
    1624:	5e9b      	ldrsh	r3, [r3, r2]
    1626:	2ba0      	cmp	r3, #160	; 0xa0
    1628:	dc04      	bgt.n	1634 <_Z9getSquare8TS_Point+0xe6>
			square = 7;
    162a:	230f      	movs	r3, #15
    162c:	18fb      	adds	r3, r7, r3
    162e:	2207      	movs	r2, #7
    1630:	701a      	strb	r2, [r3, #0]
    1632:	e00c      	b.n	164e <_Z9getSquare8TS_Point+0x100>
			} else if (point.x < 240) {
    1634:	003b      	movs	r3, r7
    1636:	2200      	movs	r2, #0
    1638:	5e9b      	ldrsh	r3, [r3, r2]
    163a:	2bef      	cmp	r3, #239	; 0xef
    163c:	dc07      	bgt.n	164e <_Z9getSquare8TS_Point+0x100>
			square = 8;
    163e:	230f      	movs	r3, #15
    1640:	18fb      	adds	r3, r7, r3
    1642:	2208      	movs	r2, #8
    1644:	701a      	strb	r2, [r3, #0]
    1646:	e002      	b.n	164e <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1648:	46c0      	nop			; (mov r8, r8)
    164a:	e000      	b.n	164e <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    164c:	46c0      	nop			; (mov r8, r8)
		}
	}
	return square;
    164e:	230f      	movs	r3, #15
    1650:	18fb      	adds	r3, r7, r3
    1652:	781b      	ldrb	r3, [r3, #0]
}
    1654:	0018      	movs	r0, r3
    1656:	46bd      	mov	sp, r7
    1658:	b004      	add	sp, #16
    165a:	bd80      	pop	{r7, pc}

0000165c <_Z18getCounterPositionh>:

TS_Point getCounterPosition(uint8_t square) {
    165c:	b580      	push	{r7, lr}
    165e:	b082      	sub	sp, #8
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
    1664:	000a      	movs	r2, r1
    1666:	1cfb      	adds	r3, r7, #3
    1668:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    166a:	687b      	ldr	r3, [r7, #4]
    166c:	0018      	movs	r0, r3
    166e:	f005 ffc1 	bl	75f4 <_ZN8TS_PointC1Ev>
	if (square == 0 || square == 3 || square == 6) {
    1672:	1cfb      	adds	r3, r7, #3
    1674:	781b      	ldrb	r3, [r3, #0]
    1676:	2b00      	cmp	r3, #0
    1678:	d007      	beq.n	168a <_Z18getCounterPositionh+0x2e>
    167a:	1cfb      	adds	r3, r7, #3
    167c:	781b      	ldrb	r3, [r3, #0]
    167e:	2b03      	cmp	r3, #3
    1680:	d003      	beq.n	168a <_Z18getCounterPositionh+0x2e>
    1682:	1cfb      	adds	r3, r7, #3
    1684:	781b      	ldrb	r3, [r3, #0]
    1686:	2b06      	cmp	r3, #6
    1688:	d103      	bne.n	1692 <_Z18getCounterPositionh+0x36>
		counterPos.x = 0;
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	2200      	movs	r2, #0
    168e:	801a      	strh	r2, [r3, #0]
    1690:	e012      	b.n	16b8 <_Z18getCounterPositionh+0x5c>
	} else if (square == 1 || square == 4 || square == 7) {
    1692:	1cfb      	adds	r3, r7, #3
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	2b01      	cmp	r3, #1
    1698:	d007      	beq.n	16aa <_Z18getCounterPositionh+0x4e>
    169a:	1cfb      	adds	r3, r7, #3
    169c:	781b      	ldrb	r3, [r3, #0]
    169e:	2b04      	cmp	r3, #4
    16a0:	d003      	beq.n	16aa <_Z18getCounterPositionh+0x4e>
    16a2:	1cfb      	adds	r3, r7, #3
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	2b07      	cmp	r3, #7
    16a8:	d103      	bne.n	16b2 <_Z18getCounterPositionh+0x56>
		counterPos.x = 80;
    16aa:	687b      	ldr	r3, [r7, #4]
    16ac:	2250      	movs	r2, #80	; 0x50
    16ae:	801a      	strh	r2, [r3, #0]
    16b0:	e002      	b.n	16b8 <_Z18getCounterPositionh+0x5c>
	} else {
		counterPos.x = 160;
    16b2:	687b      	ldr	r3, [r7, #4]
    16b4:	22a0      	movs	r2, #160	; 0xa0
    16b6:	801a      	strh	r2, [r3, #0]
	}
	
	if (square == 0 || square == 1 || square == 2) {
    16b8:	1cfb      	adds	r3, r7, #3
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	2b00      	cmp	r3, #0
    16be:	d007      	beq.n	16d0 <_Z18getCounterPositionh+0x74>
    16c0:	1cfb      	adds	r3, r7, #3
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	2b01      	cmp	r3, #1
    16c6:	d003      	beq.n	16d0 <_Z18getCounterPositionh+0x74>
    16c8:	1cfb      	adds	r3, r7, #3
    16ca:	781b      	ldrb	r3, [r3, #0]
    16cc:	2b02      	cmp	r3, #2
    16ce:	d103      	bne.n	16d8 <_Z18getCounterPositionh+0x7c>
		counterPos.y = 80;
    16d0:	687b      	ldr	r3, [r7, #4]
    16d2:	2250      	movs	r2, #80	; 0x50
    16d4:	805a      	strh	r2, [r3, #2]
    16d6:	e012      	b.n	16fe <_Z18getCounterPositionh+0xa2>
	} else if (square == 3 || square == 4 || square == 5) {
    16d8:	1cfb      	adds	r3, r7, #3
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	2b03      	cmp	r3, #3
    16de:	d007      	beq.n	16f0 <_Z18getCounterPositionh+0x94>
    16e0:	1cfb      	adds	r3, r7, #3
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	2b04      	cmp	r3, #4
    16e6:	d003      	beq.n	16f0 <_Z18getCounterPositionh+0x94>
    16e8:	1cfb      	adds	r3, r7, #3
    16ea:	781b      	ldrb	r3, [r3, #0]
    16ec:	2b05      	cmp	r3, #5
    16ee:	d103      	bne.n	16f8 <_Z18getCounterPositionh+0x9c>
		counterPos.y = 160;
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	22a0      	movs	r2, #160	; 0xa0
    16f4:	805a      	strh	r2, [r3, #2]
    16f6:	e002      	b.n	16fe <_Z18getCounterPositionh+0xa2>
	} else {
		counterPos.y = 240;
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	22f0      	movs	r2, #240	; 0xf0
    16fc:	805a      	strh	r2, [r3, #2]
	}
	return counterPos;
    16fe:	46c0      	nop			; (mov r8, r8)
}
    1700:	6878      	ldr	r0, [r7, #4]
    1702:	46bd      	mov	sp, r7
    1704:	b002      	add	sp, #8
    1706:	bd80      	pop	{r7, pc}

00001708 <_Z23getSmallCounterPositionhh>:

TS_Point getSmallCounterPosition(uint8_t square, uint8_t turn) {
    1708:	b590      	push	{r4, r7, lr}
    170a:	b085      	sub	sp, #20
    170c:	af00      	add	r7, sp, #0
    170e:	60f8      	str	r0, [r7, #12]
    1710:	0008      	movs	r0, r1
    1712:	0011      	movs	r1, r2
    1714:	230b      	movs	r3, #11
    1716:	18fb      	adds	r3, r7, r3
    1718:	1c02      	adds	r2, r0, #0
    171a:	701a      	strb	r2, [r3, #0]
    171c:	230a      	movs	r3, #10
    171e:	18fb      	adds	r3, r7, r3
    1720:	1c0a      	adds	r2, r1, #0
    1722:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    1724:	68fb      	ldr	r3, [r7, #12]
    1726:	0018      	movs	r0, r3
    1728:	f005 ff64 	bl	75f4 <_ZN8TS_PointC1Ev>
	
	counterPos = getCounterPosition(square);
    172c:	68fc      	ldr	r4, [r7, #12]
    172e:	003a      	movs	r2, r7
    1730:	230b      	movs	r3, #11
    1732:	18fb      	adds	r3, r7, r3
    1734:	781b      	ldrb	r3, [r3, #0]
    1736:	0019      	movs	r1, r3
    1738:	0010      	movs	r0, r2
    173a:	f7ff ff8f 	bl	165c <_Z18getCounterPositionh>
    173e:	003b      	movs	r3, r7
    1740:	0020      	movs	r0, r4
    1742:	0019      	movs	r1, r3
    1744:	2306      	movs	r3, #6
    1746:	001a      	movs	r2, r3
    1748:	f00f f873 	bl	10832 <memcpy>
	
	if (turn == 1 || turn == 4 || turn == 7) {
    174c:	230a      	movs	r3, #10
    174e:	18fb      	adds	r3, r7, r3
    1750:	781b      	ldrb	r3, [r3, #0]
    1752:	2b01      	cmp	r3, #1
    1754:	d009      	beq.n	176a <_Z23getSmallCounterPositionhh+0x62>
    1756:	230a      	movs	r3, #10
    1758:	18fb      	adds	r3, r7, r3
    175a:	781b      	ldrb	r3, [r3, #0]
    175c:	2b04      	cmp	r3, #4
    175e:	d004      	beq.n	176a <_Z23getSmallCounterPositionhh+0x62>
    1760:	230a      	movs	r3, #10
    1762:	18fb      	adds	r3, r7, r3
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	2b07      	cmp	r3, #7
    1768:	d109      	bne.n	177e <_Z23getSmallCounterPositionhh+0x76>
		counterPos.x += 1;
    176a:	68fb      	ldr	r3, [r7, #12]
    176c:	2200      	movs	r2, #0
    176e:	5e9b      	ldrsh	r3, [r3, r2]
    1770:	b29b      	uxth	r3, r3
    1772:	3301      	adds	r3, #1
    1774:	b29b      	uxth	r3, r3
    1776:	b21a      	sxth	r2, r3
    1778:	68fb      	ldr	r3, [r7, #12]
    177a:	801a      	strh	r2, [r3, #0]
    177c:	e021      	b.n	17c2 <_Z23getSmallCounterPositionhh+0xba>
		} else if (turn == 2 || turn == 5 || turn == 8) {
    177e:	230a      	movs	r3, #10
    1780:	18fb      	adds	r3, r7, r3
    1782:	781b      	ldrb	r3, [r3, #0]
    1784:	2b02      	cmp	r3, #2
    1786:	d009      	beq.n	179c <_Z23getSmallCounterPositionhh+0x94>
    1788:	230a      	movs	r3, #10
    178a:	18fb      	adds	r3, r7, r3
    178c:	781b      	ldrb	r3, [r3, #0]
    178e:	2b05      	cmp	r3, #5
    1790:	d004      	beq.n	179c <_Z23getSmallCounterPositionhh+0x94>
    1792:	230a      	movs	r3, #10
    1794:	18fb      	adds	r3, r7, r3
    1796:	781b      	ldrb	r3, [r3, #0]
    1798:	2b08      	cmp	r3, #8
    179a:	d109      	bne.n	17b0 <_Z23getSmallCounterPositionhh+0xa8>
		counterPos.x += 27;
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	2200      	movs	r2, #0
    17a0:	5e9b      	ldrsh	r3, [r3, r2]
    17a2:	b29b      	uxth	r3, r3
    17a4:	331b      	adds	r3, #27
    17a6:	b29b      	uxth	r3, r3
    17a8:	b21a      	sxth	r2, r3
    17aa:	68fb      	ldr	r3, [r7, #12]
    17ac:	801a      	strh	r2, [r3, #0]
    17ae:	e008      	b.n	17c2 <_Z23getSmallCounterPositionhh+0xba>
		} else {
		counterPos.x += 53;
    17b0:	68fb      	ldr	r3, [r7, #12]
    17b2:	2200      	movs	r2, #0
    17b4:	5e9b      	ldrsh	r3, [r3, r2]
    17b6:	b29b      	uxth	r3, r3
    17b8:	3335      	adds	r3, #53	; 0x35
    17ba:	b29b      	uxth	r3, r3
    17bc:	b21a      	sxth	r2, r3
    17be:	68fb      	ldr	r3, [r7, #12]
    17c0:	801a      	strh	r2, [r3, #0]
	}
		
	if (turn == 1 || turn == 2 || turn == 3) {
    17c2:	230a      	movs	r3, #10
    17c4:	18fb      	adds	r3, r7, r3
    17c6:	781b      	ldrb	r3, [r3, #0]
    17c8:	2b01      	cmp	r3, #1
    17ca:	d009      	beq.n	17e0 <_Z23getSmallCounterPositionhh+0xd8>
    17cc:	230a      	movs	r3, #10
    17ce:	18fb      	adds	r3, r7, r3
    17d0:	781b      	ldrb	r3, [r3, #0]
    17d2:	2b02      	cmp	r3, #2
    17d4:	d004      	beq.n	17e0 <_Z23getSmallCounterPositionhh+0xd8>
    17d6:	230a      	movs	r3, #10
    17d8:	18fb      	adds	r3, r7, r3
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	2b03      	cmp	r3, #3
    17de:	d109      	bne.n	17f4 <_Z23getSmallCounterPositionhh+0xec>
		counterPos.y += 1;
    17e0:	68fb      	ldr	r3, [r7, #12]
    17e2:	2202      	movs	r2, #2
    17e4:	5e9b      	ldrsh	r3, [r3, r2]
    17e6:	b29b      	uxth	r3, r3
    17e8:	3301      	adds	r3, #1
    17ea:	b29b      	uxth	r3, r3
    17ec:	b21a      	sxth	r2, r3
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	805a      	strh	r2, [r3, #2]
    17f2:	e021      	b.n	1838 <_Z23getSmallCounterPositionhh+0x130>
		} else if (turn == 4 || turn == 5 || turn == 6) {
    17f4:	230a      	movs	r3, #10
    17f6:	18fb      	adds	r3, r7, r3
    17f8:	781b      	ldrb	r3, [r3, #0]
    17fa:	2b04      	cmp	r3, #4
    17fc:	d009      	beq.n	1812 <_Z23getSmallCounterPositionhh+0x10a>
    17fe:	230a      	movs	r3, #10
    1800:	18fb      	adds	r3, r7, r3
    1802:	781b      	ldrb	r3, [r3, #0]
    1804:	2b05      	cmp	r3, #5
    1806:	d004      	beq.n	1812 <_Z23getSmallCounterPositionhh+0x10a>
    1808:	230a      	movs	r3, #10
    180a:	18fb      	adds	r3, r7, r3
    180c:	781b      	ldrb	r3, [r3, #0]
    180e:	2b06      	cmp	r3, #6
    1810:	d109      	bne.n	1826 <_Z23getSmallCounterPositionhh+0x11e>
		counterPos.y += 27;
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	2202      	movs	r2, #2
    1816:	5e9b      	ldrsh	r3, [r3, r2]
    1818:	b29b      	uxth	r3, r3
    181a:	331b      	adds	r3, #27
    181c:	b29b      	uxth	r3, r3
    181e:	b21a      	sxth	r2, r3
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	805a      	strh	r2, [r3, #2]
    1824:	e008      	b.n	1838 <_Z23getSmallCounterPositionhh+0x130>
		} else {
		counterPos.y += 53;
    1826:	68fb      	ldr	r3, [r7, #12]
    1828:	2202      	movs	r2, #2
    182a:	5e9b      	ldrsh	r3, [r3, r2]
    182c:	b29b      	uxth	r3, r3
    182e:	3335      	adds	r3, #53	; 0x35
    1830:	b29b      	uxth	r3, r3
    1832:	b21a      	sxth	r2, r3
    1834:	68fb      	ldr	r3, [r7, #12]
    1836:	805a      	strh	r2, [r3, #2]
	}
	
	return counterPos;
    1838:	46c0      	nop			; (mov r8, r8)
}
    183a:	68f8      	ldr	r0, [r7, #12]
    183c:	46bd      	mov	sp, r7
    183e:	b005      	add	sp, #20
    1840:	bd90      	pop	{r4, r7, pc}

00001842 <_Z16drawSmallCounterhhb>:

void drawSmallCounter(uint8_t square, uint8_t turn, boolean bold) {
    1842:	b590      	push	{r4, r7, lr}
    1844:	b08d      	sub	sp, #52	; 0x34
    1846:	af00      	add	r7, sp, #0
    1848:	0004      	movs	r4, r0
    184a:	0008      	movs	r0, r1
    184c:	0011      	movs	r1, r2
    184e:	230f      	movs	r3, #15
    1850:	18fb      	adds	r3, r7, r3
    1852:	1c22      	adds	r2, r4, #0
    1854:	701a      	strb	r2, [r3, #0]
    1856:	230e      	movs	r3, #14
    1858:	18fb      	adds	r3, r7, r3
    185a:	1c02      	adds	r2, r0, #0
    185c:	701a      	strb	r2, [r3, #0]
    185e:	230d      	movs	r3, #13
    1860:	18fb      	adds	r3, r7, r3
    1862:	1c0a      	adds	r2, r1, #0
    1864:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    1866:	2318      	movs	r3, #24
    1868:	18fb      	adds	r3, r7, r3
    186a:	0018      	movs	r0, r3
    186c:	f005 fec2 	bl	75f4 <_ZN8TS_PointC1Ev>
	
	counterPos = getSmallCounterPosition(square, turn);
    1870:	2318      	movs	r3, #24
    1872:	18fc      	adds	r4, r7, r3
    1874:	0038      	movs	r0, r7
    1876:	230e      	movs	r3, #14
    1878:	18fb      	adds	r3, r7, r3
    187a:	781a      	ldrb	r2, [r3, #0]
    187c:	230f      	movs	r3, #15
    187e:	18fb      	adds	r3, r7, r3
    1880:	781b      	ldrb	r3, [r3, #0]
    1882:	0019      	movs	r1, r3
    1884:	f7ff ff40 	bl	1708 <_Z23getSmallCounterPositionhh>
    1888:	003b      	movs	r3, r7
    188a:	0020      	movs	r0, r4
    188c:	0019      	movs	r1, r3
    188e:	2306      	movs	r3, #6
    1890:	001a      	movs	r2, r3
    1892:	f00e ffce 	bl	10832 <memcpy>
	
	char bg;
	if (square % 2) {
    1896:	230f      	movs	r3, #15
    1898:	18fb      	adds	r3, r7, r3
    189a:	781b      	ldrb	r3, [r3, #0]
    189c:	2201      	movs	r2, #1
    189e:	4013      	ands	r3, r2
    18a0:	d004      	beq.n	18ac <_Z16drawSmallCounterhhb+0x6a>
		bg = 'b';
    18a2:	232f      	movs	r3, #47	; 0x2f
    18a4:	18fb      	adds	r3, r7, r3
    18a6:	2262      	movs	r2, #98	; 0x62
    18a8:	701a      	strb	r2, [r3, #0]
    18aa:	e003      	b.n	18b4 <_Z16drawSmallCounterhhb+0x72>
	} else {
		bg = 'w';
    18ac:	232f      	movs	r3, #47	; 0x2f
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	2277      	movs	r2, #119	; 0x77
    18b2:	701a      	strb	r2, [r3, #0]
	}
	
	char type = 'c';
    18b4:	232e      	movs	r3, #46	; 0x2e
    18b6:	18fb      	adds	r3, r7, r3
    18b8:	2263      	movs	r2, #99	; 0x63
    18ba:	701a      	strb	r2, [r3, #0]
	// TODO: Different coloured counters
	if (bold) type = 'b';
    18bc:	230d      	movs	r3, #13
    18be:	18fb      	adds	r3, r7, r3
    18c0:	781b      	ldrb	r3, [r3, #0]
    18c2:	2b00      	cmp	r3, #0
    18c4:	d003      	beq.n	18ce <_Z16drawSmallCounterhhb+0x8c>
    18c6:	232e      	movs	r3, #46	; 0x2e
    18c8:	18fb      	adds	r3, r7, r3
    18ca:	2262      	movs	r2, #98	; 0x62
    18cc:	701a      	strb	r2, [r3, #0]
	
	char bitmap[8] = {bg, type, ((String) turn).charAt(0), '.', 'b', 'm', 'p'};
    18ce:	2310      	movs	r3, #16
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	0018      	movs	r0, r3
    18d4:	2308      	movs	r3, #8
    18d6:	001a      	movs	r2, r3
    18d8:	2100      	movs	r1, #0
    18da:	f00e ffb3 	bl	10844 <memset>
    18de:	2310      	movs	r3, #16
    18e0:	18fb      	adds	r3, r7, r3
    18e2:	222e      	movs	r2, #46	; 0x2e
    18e4:	70da      	strb	r2, [r3, #3]
    18e6:	2310      	movs	r3, #16
    18e8:	18fb      	adds	r3, r7, r3
    18ea:	2262      	movs	r2, #98	; 0x62
    18ec:	711a      	strb	r2, [r3, #4]
    18ee:	2310      	movs	r3, #16
    18f0:	18fb      	adds	r3, r7, r3
    18f2:	226d      	movs	r2, #109	; 0x6d
    18f4:	715a      	strb	r2, [r3, #5]
    18f6:	2310      	movs	r3, #16
    18f8:	18fb      	adds	r3, r7, r3
    18fa:	2270      	movs	r2, #112	; 0x70
    18fc:	719a      	strb	r2, [r3, #6]
    18fe:	2310      	movs	r3, #16
    1900:	18fb      	adds	r3, r7, r3
    1902:	222f      	movs	r2, #47	; 0x2f
    1904:	18ba      	adds	r2, r7, r2
    1906:	7812      	ldrb	r2, [r2, #0]
    1908:	701a      	strb	r2, [r3, #0]
    190a:	2310      	movs	r3, #16
    190c:	18fb      	adds	r3, r7, r3
    190e:	222e      	movs	r2, #46	; 0x2e
    1910:	18ba      	adds	r2, r7, r2
    1912:	7812      	ldrb	r2, [r2, #0]
    1914:	705a      	strb	r2, [r3, #1]
    1916:	230e      	movs	r3, #14
    1918:	18fb      	adds	r3, r7, r3
    191a:	7819      	ldrb	r1, [r3, #0]
    191c:	2320      	movs	r3, #32
    191e:	18fb      	adds	r3, r7, r3
    1920:	220a      	movs	r2, #10
    1922:	0018      	movs	r0, r3
    1924:	f005 faca 	bl	6ebc <_ZN6StringC1Ehh>
    1928:	2320      	movs	r3, #32
    192a:	18fb      	adds	r3, r7, r3
    192c:	2100      	movs	r1, #0
    192e:	0018      	movs	r0, r3
    1930:	f005 fc36 	bl	71a0 <_ZNK6String6charAtEj>
    1934:	0003      	movs	r3, r0
    1936:	001a      	movs	r2, r3
    1938:	2310      	movs	r3, #16
    193a:	18fb      	adds	r3, r7, r3
    193c:	709a      	strb	r2, [r3, #2]
    193e:	2320      	movs	r3, #32
    1940:	18fb      	adds	r3, r7, r3
    1942:	0018      	movs	r0, r3
    1944:	f005 fafe 	bl	6f44 <_ZN6StringD1Ev>
	drawBitmap(bitmap, counterPos.x, counterPos.y);
    1948:	2318      	movs	r3, #24
    194a:	18fb      	adds	r3, r7, r3
    194c:	2100      	movs	r1, #0
    194e:	5e59      	ldrsh	r1, [r3, r1]
    1950:	2318      	movs	r3, #24
    1952:	18fb      	adds	r3, r7, r3
    1954:	2202      	movs	r2, #2
    1956:	5e9a      	ldrsh	r2, [r3, r2]
    1958:	2310      	movs	r3, #16
    195a:	18fb      	adds	r3, r7, r3
    195c:	0018      	movs	r0, r3
    195e:	f7ff f8df 	bl	b20 <_Z10drawBitmapPcss>
}
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	46bd      	mov	sp, r7
    1966:	b00d      	add	sp, #52	; 0x34
    1968:	bd90      	pop	{r4, r7, pc}

0000196a <_Z14checkForCirclePA11_hhhhPh>:

void checkForCircle(uint8_t boardState[9][11], uint8_t x, uint8_t y, uint8_t origX, uint8_t subscripts[9]) {
    196a:	b590      	push	{r4, r7, lr}
    196c:	b087      	sub	sp, #28
    196e:	af02      	add	r7, sp, #8
    1970:	6078      	str	r0, [r7, #4]
    1972:	000c      	movs	r4, r1
    1974:	0010      	movs	r0, r2
    1976:	0019      	movs	r1, r3
    1978:	1cfb      	adds	r3, r7, #3
    197a:	1c22      	adds	r2, r4, #0
    197c:	701a      	strb	r2, [r3, #0]
    197e:	1cbb      	adds	r3, r7, #2
    1980:	1c02      	adds	r2, r0, #0
    1982:	701a      	strb	r2, [r3, #0]
    1984:	1c7b      	adds	r3, r7, #1
    1986:	1c0a      	adds	r2, r1, #0
    1988:	701a      	strb	r2, [r3, #0]
	// For each of the possible small counters in this square
	for (uint8_t i = 0; i < 9; i++) {
    198a:	230f      	movs	r3, #15
    198c:	18fb      	adds	r3, r7, r3
    198e:	2200      	movs	r2, #0
    1990:	701a      	strb	r2, [r3, #0]
    1992:	230f      	movs	r3, #15
    1994:	18fb      	adds	r3, r7, r3
    1996:	781b      	ldrb	r3, [r3, #0]
    1998:	2b08      	cmp	r3, #8
    199a:	dd00      	ble.n	199e <_Z14checkForCirclePA11_hhhhPh+0x34>
    199c:	e090      	b.n	1ac0 <_Z14checkForCirclePA11_hhhhPh+0x156>
		// Find any counters that exist and aren't the current counter
		if (boardState[x][i + 2] != 0 && i + 2 != y) {
    199e:	1cfb      	adds	r3, r7, #3
    19a0:	781a      	ldrb	r2, [r3, #0]
    19a2:	0013      	movs	r3, r2
    19a4:	009b      	lsls	r3, r3, #2
    19a6:	189b      	adds	r3, r3, r2
    19a8:	005b      	lsls	r3, r3, #1
    19aa:	189b      	adds	r3, r3, r2
    19ac:	687a      	ldr	r2, [r7, #4]
    19ae:	18d2      	adds	r2, r2, r3
    19b0:	230f      	movs	r3, #15
    19b2:	18fb      	adds	r3, r7, r3
    19b4:	781b      	ldrb	r3, [r3, #0]
    19b6:	3302      	adds	r3, #2
    19b8:	5cd3      	ldrb	r3, [r2, r3]
    19ba:	2b00      	cmp	r3, #0
    19bc:	d100      	bne.n	19c0 <_Z14checkForCirclePA11_hhhhPh+0x56>
    19be:	e077      	b.n	1ab0 <_Z14checkForCirclePA11_hhhhPh+0x146>
    19c0:	230f      	movs	r3, #15
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	781b      	ldrb	r3, [r3, #0]
    19c6:	1c9a      	adds	r2, r3, #2
    19c8:	1cbb      	adds	r3, r7, #2
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	429a      	cmp	r2, r3
    19ce:	d100      	bne.n	19d2 <_Z14checkForCirclePA11_hhhhPh+0x68>
    19d0:	e06e      	b.n	1ab0 <_Z14checkForCirclePA11_hhhhPh+0x146>
			// Find the pair counter of the one found
			// By going through all the squares
			for (uint8_t j = 0; j < 9; j++) {
    19d2:	230e      	movs	r3, #14
    19d4:	18fb      	adds	r3, r7, r3
    19d6:	2200      	movs	r2, #0
    19d8:	701a      	strb	r2, [r3, #0]
    19da:	230e      	movs	r3, #14
    19dc:	18fb      	adds	r3, r7, r3
    19de:	781b      	ldrb	r3, [r3, #0]
    19e0:	2b08      	cmp	r3, #8
    19e2:	dc65      	bgt.n	1ab0 <_Z14checkForCirclePA11_hhhhPh+0x146>
				// And finding a counter of the same subscript that isn't the current one
				if (boardState[j][i + 2] != 0 && j != x) {
    19e4:	230e      	movs	r3, #14
    19e6:	18fb      	adds	r3, r7, r3
    19e8:	781a      	ldrb	r2, [r3, #0]
    19ea:	0013      	movs	r3, r2
    19ec:	009b      	lsls	r3, r3, #2
    19ee:	189b      	adds	r3, r3, r2
    19f0:	005b      	lsls	r3, r3, #1
    19f2:	189b      	adds	r3, r3, r2
    19f4:	687a      	ldr	r2, [r7, #4]
    19f6:	18d2      	adds	r2, r2, r3
    19f8:	230f      	movs	r3, #15
    19fa:	18fb      	adds	r3, r7, r3
    19fc:	781b      	ldrb	r3, [r3, #0]
    19fe:	3302      	adds	r3, #2
    1a00:	5cd3      	ldrb	r3, [r2, r3]
    1a02:	2b00      	cmp	r3, #0
    1a04:	d04c      	beq.n	1aa0 <_Z14checkForCirclePA11_hhhhPh+0x136>
    1a06:	230e      	movs	r3, #14
    1a08:	18fa      	adds	r2, r7, r3
    1a0a:	1cfb      	adds	r3, r7, #3
    1a0c:	7812      	ldrb	r2, [r2, #0]
    1a0e:	781b      	ldrb	r3, [r3, #0]
    1a10:	429a      	cmp	r2, r3
    1a12:	d045      	beq.n	1aa0 <_Z14checkForCirclePA11_hhhhPh+0x136>
					// Check if this is the original square
					if (j == origX) {
    1a14:	230e      	movs	r3, #14
    1a16:	18fa      	adds	r2, r7, r3
    1a18:	1c7b      	adds	r3, r7, #1
    1a1a:	7812      	ldrb	r2, [r2, #0]
    1a1c:	781b      	ldrb	r3, [r3, #0]
    1a1e:	429a      	cmp	r2, r3
    1a20:	d106      	bne.n	1a30 <_Z14checkForCirclePA11_hhhhPh+0xc6>
						subscripts[0] = y - 1;
    1a22:	1cbb      	adds	r3, r7, #2
    1a24:	781b      	ldrb	r3, [r3, #0]
    1a26:	3b01      	subs	r3, #1
    1a28:	b2da      	uxtb	r2, r3
    1a2a:	6a3b      	ldr	r3, [r7, #32]
    1a2c:	701a      	strb	r2, [r3, #0]
						return;
    1a2e:	e047      	b.n	1ac0 <_Z14checkForCirclePA11_hhhhPh+0x156>
					}
					// If not repeat for the next counter
					checkForCircle(boardState, j, i + 2, origX, subscripts);
    1a30:	230f      	movs	r3, #15
    1a32:	18fb      	adds	r3, r7, r3
    1a34:	781b      	ldrb	r3, [r3, #0]
    1a36:	3302      	adds	r3, #2
    1a38:	b2da      	uxtb	r2, r3
    1a3a:	1c7b      	adds	r3, r7, #1
    1a3c:	781c      	ldrb	r4, [r3, #0]
    1a3e:	230e      	movs	r3, #14
    1a40:	18fb      	adds	r3, r7, r3
    1a42:	7819      	ldrb	r1, [r3, #0]
    1a44:	6878      	ldr	r0, [r7, #4]
    1a46:	6a3b      	ldr	r3, [r7, #32]
    1a48:	9300      	str	r3, [sp, #0]
    1a4a:	0023      	movs	r3, r4
    1a4c:	f7ff ff8d 	bl	196a <_Z14checkForCirclePA11_hhhhPh>
					// When the function returns, check if it found the original square
					if (subscripts[0] != 255) {
    1a50:	6a3b      	ldr	r3, [r7, #32]
    1a52:	781b      	ldrb	r3, [r3, #0]
    1a54:	2bff      	cmp	r3, #255	; 0xff
    1a56:	d023      	beq.n	1aa0 <_Z14checkForCirclePA11_hhhhPh+0x136>
						// If it did add this point on the end
						for (uint8_t k = 0; k < 9; k++) {
    1a58:	230d      	movs	r3, #13
    1a5a:	18fb      	adds	r3, r7, r3
    1a5c:	2200      	movs	r2, #0
    1a5e:	701a      	strb	r2, [r3, #0]
    1a60:	230d      	movs	r3, #13
    1a62:	18fb      	adds	r3, r7, r3
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	2b08      	cmp	r3, #8
    1a68:	dc1a      	bgt.n	1aa0 <_Z14checkForCirclePA11_hhhhPh+0x136>
							if (subscripts[k] == 255) {
    1a6a:	230d      	movs	r3, #13
    1a6c:	18fb      	adds	r3, r7, r3
    1a6e:	781b      	ldrb	r3, [r3, #0]
    1a70:	6a3a      	ldr	r2, [r7, #32]
    1a72:	18d3      	adds	r3, r2, r3
    1a74:	781b      	ldrb	r3, [r3, #0]
    1a76:	2bff      	cmp	r3, #255	; 0xff
    1a78:	d10a      	bne.n	1a90 <_Z14checkForCirclePA11_hhhhPh+0x126>
								subscripts[k] = y - 1;
    1a7a:	230d      	movs	r3, #13
    1a7c:	18fb      	adds	r3, r7, r3
    1a7e:	781b      	ldrb	r3, [r3, #0]
    1a80:	6a3a      	ldr	r2, [r7, #32]
    1a82:	18d3      	adds	r3, r2, r3
    1a84:	1cba      	adds	r2, r7, #2
    1a86:	7812      	ldrb	r2, [r2, #0]
    1a88:	3a01      	subs	r2, #1
    1a8a:	b2d2      	uxtb	r2, r2
    1a8c:	701a      	strb	r2, [r3, #0]
								return;
    1a8e:	e017      	b.n	1ac0 <_Z14checkForCirclePA11_hhhhPh+0x156>
						for (uint8_t k = 0; k < 9; k++) {
    1a90:	230d      	movs	r3, #13
    1a92:	18fb      	adds	r3, r7, r3
    1a94:	781a      	ldrb	r2, [r3, #0]
    1a96:	230d      	movs	r3, #13
    1a98:	18fb      	adds	r3, r7, r3
    1a9a:	3201      	adds	r2, #1
    1a9c:	701a      	strb	r2, [r3, #0]
    1a9e:	e7df      	b.n	1a60 <_Z14checkForCirclePA11_hhhhPh+0xf6>
			for (uint8_t j = 0; j < 9; j++) {
    1aa0:	230e      	movs	r3, #14
    1aa2:	18fb      	adds	r3, r7, r3
    1aa4:	781a      	ldrb	r2, [r3, #0]
    1aa6:	230e      	movs	r3, #14
    1aa8:	18fb      	adds	r3, r7, r3
    1aaa:	3201      	adds	r2, #1
    1aac:	701a      	strb	r2, [r3, #0]
    1aae:	e794      	b.n	19da <_Z14checkForCirclePA11_hhhhPh+0x70>
	for (uint8_t i = 0; i < 9; i++) {
    1ab0:	230f      	movs	r3, #15
    1ab2:	18fb      	adds	r3, r7, r3
    1ab4:	781a      	ldrb	r2, [r3, #0]
    1ab6:	230f      	movs	r3, #15
    1ab8:	18fb      	adds	r3, r7, r3
    1aba:	3201      	adds	r2, #1
    1abc:	701a      	strb	r2, [r3, #0]
    1abe:	e768      	b.n	1992 <_Z14checkForCirclePA11_hhhhPh+0x28>
					}
				}
			}
		}
	}
}
    1ac0:	46bd      	mov	sp, r7
    1ac2:	b005      	add	sp, #20
    1ac4:	bd90      	pop	{r4, r7, pc}

00001ac6 <_Z21drawClassicalCountersPA11_hhhhh>:

void drawClassicalCounters(uint8_t boardState[9][11], uint8_t x, uint8_t y, uint8_t origX, uint8_t origY) {
    1ac6:	b590      	push	{r4, r7, lr}
    1ac8:	b089      	sub	sp, #36	; 0x24
    1aca:	af02      	add	r7, sp, #8
    1acc:	6078      	str	r0, [r7, #4]
    1ace:	000c      	movs	r4, r1
    1ad0:	0010      	movs	r0, r2
    1ad2:	0019      	movs	r1, r3
    1ad4:	1cfb      	adds	r3, r7, #3
    1ad6:	1c22      	adds	r2, r4, #0
    1ad8:	701a      	strb	r2, [r3, #0]
    1ada:	1cbb      	adds	r3, r7, #2
    1adc:	1c02      	adds	r2, r0, #0
    1ade:	701a      	strb	r2, [r3, #0]
    1ae0:	1c7b      	adds	r3, r7, #1
    1ae2:	1c0a      	adds	r2, r1, #0
    1ae4:	701a      	strb	r2, [r3, #0]
	// TODO: Add subscript to classic counters
	// Draw classic counter
	char bitmap;
	uint8_t player;
	if (x % 2) {
    1ae6:	1cfb      	adds	r3, r7, #3
    1ae8:	781b      	ldrb	r3, [r3, #0]
    1aea:	2201      	movs	r2, #1
    1aec:	4013      	ands	r3, r2
    1aee:	d016      	beq.n	1b1e <_Z21drawClassicalCountersPA11_hhhhh+0x58>
		// black
		if (y % 2) {
    1af0:	1cbb      	adds	r3, r7, #2
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	2201      	movs	r2, #1
    1af6:	4013      	ands	r3, r2
    1af8:	d008      	beq.n	1b0c <_Z21drawClassicalCountersPA11_hhhhh+0x46>
			// An O
			bitmap = 'h';
    1afa:	2317      	movs	r3, #23
    1afc:	18fb      	adds	r3, r7, r3
    1afe:	2268      	movs	r2, #104	; 0x68
    1b00:	701a      	strb	r2, [r3, #0]
			player = 1;
    1b02:	2316      	movs	r3, #22
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	2201      	movs	r2, #1
    1b08:	701a      	strb	r2, [r3, #0]
    1b0a:	e01e      	b.n	1b4a <_Z21drawClassicalCountersPA11_hhhhh+0x84>
		} else {
			// An X
			bitmap = 'j';
    1b0c:	2317      	movs	r3, #23
    1b0e:	18fb      	adds	r3, r7, r3
    1b10:	226a      	movs	r2, #106	; 0x6a
    1b12:	701a      	strb	r2, [r3, #0]
			player = 2;
    1b14:	2316      	movs	r3, #22
    1b16:	18fb      	adds	r3, r7, r3
    1b18:	2202      	movs	r2, #2
    1b1a:	701a      	strb	r2, [r3, #0]
    1b1c:	e015      	b.n	1b4a <_Z21drawClassicalCountersPA11_hhhhh+0x84>
		}
	} else {
		// white/blueish
		if (y % 2) {
    1b1e:	1cbb      	adds	r3, r7, #2
    1b20:	781b      	ldrb	r3, [r3, #0]
    1b22:	2201      	movs	r2, #1
    1b24:	4013      	ands	r3, r2
    1b26:	d008      	beq.n	1b3a <_Z21drawClassicalCountersPA11_hhhhh+0x74>
			// An O
			bitmap = 'i';
    1b28:	2317      	movs	r3, #23
    1b2a:	18fb      	adds	r3, r7, r3
    1b2c:	2269      	movs	r2, #105	; 0x69
    1b2e:	701a      	strb	r2, [r3, #0]
			player = 1;
    1b30:	2316      	movs	r3, #22
    1b32:	18fb      	adds	r3, r7, r3
    1b34:	2201      	movs	r2, #1
    1b36:	701a      	strb	r2, [r3, #0]
    1b38:	e007      	b.n	1b4a <_Z21drawClassicalCountersPA11_hhhhh+0x84>
		} else {
			// An X
			bitmap = 'k';
    1b3a:	2317      	movs	r3, #23
    1b3c:	18fb      	adds	r3, r7, r3
    1b3e:	226b      	movs	r2, #107	; 0x6b
    1b40:	701a      	strb	r2, [r3, #0]
			player = 2;
    1b42:	2316      	movs	r3, #22
    1b44:	18fb      	adds	r3, r7, r3
    1b46:	2202      	movs	r2, #2
    1b48:	701a      	strb	r2, [r3, #0]
		}
	}
	TS_Point counterPos = getCounterPosition(x);
    1b4a:	230c      	movs	r3, #12
    1b4c:	18fa      	adds	r2, r7, r3
    1b4e:	1cfb      	adds	r3, r7, #3
    1b50:	781b      	ldrb	r3, [r3, #0]
    1b52:	0019      	movs	r1, r3
    1b54:	0010      	movs	r0, r2
    1b56:	f7ff fd81 	bl	165c <_Z18getCounterPositionh>
	drawBitmap(bitmap, counterPos.x, counterPos.y);
    1b5a:	230c      	movs	r3, #12
    1b5c:	18fb      	adds	r3, r7, r3
    1b5e:	2100      	movs	r1, #0
    1b60:	5e59      	ldrsh	r1, [r3, r1]
    1b62:	230c      	movs	r3, #12
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	2202      	movs	r2, #2
    1b68:	5e9a      	ldrsh	r2, [r3, r2]
    1b6a:	2317      	movs	r3, #23
    1b6c:	18fb      	adds	r3, r7, r3
    1b6e:	781b      	ldrb	r3, [r3, #0]
    1b70:	0018      	movs	r0, r3
    1b72:	f7fe fb77 	bl	264 <_Z10drawBitmapcss>
	boardState[x][0] = player;
    1b76:	1cfb      	adds	r3, r7, #3
    1b78:	781a      	ldrb	r2, [r3, #0]
    1b7a:	0013      	movs	r3, r2
    1b7c:	009b      	lsls	r3, r3, #2
    1b7e:	189b      	adds	r3, r3, r2
    1b80:	005b      	lsls	r3, r3, #1
    1b82:	189b      	adds	r3, r3, r2
    1b84:	687a      	ldr	r2, [r7, #4]
    1b86:	18d3      	adds	r3, r2, r3
    1b88:	2216      	movs	r2, #22
    1b8a:	18ba      	adds	r2, r7, r2
    1b8c:	7812      	ldrb	r2, [r2, #0]
    1b8e:	701a      	strb	r2, [r3, #0]
	boardState[x][1] = y;
    1b90:	1cfb      	adds	r3, r7, #3
    1b92:	781a      	ldrb	r2, [r3, #0]
    1b94:	0013      	movs	r3, r2
    1b96:	009b      	lsls	r3, r3, #2
    1b98:	189b      	adds	r3, r3, r2
    1b9a:	005b      	lsls	r3, r3, #1
    1b9c:	189b      	adds	r3, r3, r2
    1b9e:	687a      	ldr	r2, [r7, #4]
    1ba0:	18d3      	adds	r3, r2, r3
    1ba2:	1cba      	adds	r2, r7, #2
    1ba4:	7812      	ldrb	r2, [r2, #0]
    1ba6:	705a      	strb	r2, [r3, #1]
	
	for (uint8_t i = 0; i < 9; i++) {
    1ba8:	2315      	movs	r3, #21
    1baa:	18fb      	adds	r3, r7, r3
    1bac:	2200      	movs	r2, #0
    1bae:	701a      	strb	r2, [r3, #0]
    1bb0:	2315      	movs	r3, #21
    1bb2:	18fb      	adds	r3, r7, r3
    1bb4:	781b      	ldrb	r3, [r3, #0]
    1bb6:	2b08      	cmp	r3, #8
    1bb8:	dc6a      	bgt.n	1c90 <_Z21drawClassicalCountersPA11_hhhhh+0x1ca>
		if (boardState[x][i + 2] != 0 && i + 2 != y) {
    1bba:	1cfb      	adds	r3, r7, #3
    1bbc:	781a      	ldrb	r2, [r3, #0]
    1bbe:	0013      	movs	r3, r2
    1bc0:	009b      	lsls	r3, r3, #2
    1bc2:	189b      	adds	r3, r3, r2
    1bc4:	005b      	lsls	r3, r3, #1
    1bc6:	189b      	adds	r3, r3, r2
    1bc8:	687a      	ldr	r2, [r7, #4]
    1bca:	18d2      	adds	r2, r2, r3
    1bcc:	2315      	movs	r3, #21
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	781b      	ldrb	r3, [r3, #0]
    1bd2:	3302      	adds	r3, #2
    1bd4:	5cd3      	ldrb	r3, [r2, r3]
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d052      	beq.n	1c80 <_Z21drawClassicalCountersPA11_hhhhh+0x1ba>
    1bda:	2315      	movs	r3, #21
    1bdc:	18fb      	adds	r3, r7, r3
    1bde:	781b      	ldrb	r3, [r3, #0]
    1be0:	1c9a      	adds	r2, r3, #2
    1be2:	1cbb      	adds	r3, r7, #2
    1be4:	781b      	ldrb	r3, [r3, #0]
    1be6:	429a      	cmp	r2, r3
    1be8:	d04a      	beq.n	1c80 <_Z21drawClassicalCountersPA11_hhhhh+0x1ba>
			// Runs when another counter is found in the same square
			for (uint8_t j = 0; j < 9; j++) {
    1bea:	2314      	movs	r3, #20
    1bec:	18fb      	adds	r3, r7, r3
    1bee:	2200      	movs	r2, #0
    1bf0:	701a      	strb	r2, [r3, #0]
    1bf2:	2314      	movs	r3, #20
    1bf4:	18fb      	adds	r3, r7, r3
    1bf6:	781b      	ldrb	r3, [r3, #0]
    1bf8:	2b08      	cmp	r3, #8
    1bfa:	dc41      	bgt.n	1c80 <_Z21drawClassicalCountersPA11_hhhhh+0x1ba>
				if (boardState[j][i + 2] != 0 && j != x) {
    1bfc:	2314      	movs	r3, #20
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	781a      	ldrb	r2, [r3, #0]
    1c02:	0013      	movs	r3, r2
    1c04:	009b      	lsls	r3, r3, #2
    1c06:	189b      	adds	r3, r3, r2
    1c08:	005b      	lsls	r3, r3, #1
    1c0a:	189b      	adds	r3, r3, r2
    1c0c:	687a      	ldr	r2, [r7, #4]
    1c0e:	18d2      	adds	r2, r2, r3
    1c10:	2315      	movs	r3, #21
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	3302      	adds	r3, #2
    1c18:	5cd3      	ldrb	r3, [r2, r3]
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d028      	beq.n	1c70 <_Z21drawClassicalCountersPA11_hhhhh+0x1aa>
    1c1e:	2314      	movs	r3, #20
    1c20:	18fa      	adds	r2, r7, r3
    1c22:	1cfb      	adds	r3, r7, #3
    1c24:	7812      	ldrb	r2, [r2, #0]
    1c26:	781b      	ldrb	r3, [r3, #0]
    1c28:	429a      	cmp	r2, r3
    1c2a:	d021      	beq.n	1c70 <_Z21drawClassicalCountersPA11_hhhhh+0x1aa>
					// Runs when pair is found at [j][i + 2]
					if (j != origX && i + 2 != origY) {
    1c2c:	2314      	movs	r3, #20
    1c2e:	18fa      	adds	r2, r7, r3
    1c30:	1c7b      	adds	r3, r7, #1
    1c32:	7812      	ldrb	r2, [r2, #0]
    1c34:	781b      	ldrb	r3, [r3, #0]
    1c36:	429a      	cmp	r2, r3
    1c38:	d01a      	beq.n	1c70 <_Z21drawClassicalCountersPA11_hhhhh+0x1aa>
    1c3a:	2315      	movs	r3, #21
    1c3c:	18fb      	adds	r3, r7, r3
    1c3e:	781b      	ldrb	r3, [r3, #0]
    1c40:	1c9a      	adds	r2, r3, #2
    1c42:	2328      	movs	r3, #40	; 0x28
    1c44:	18fb      	adds	r3, r7, r3
    1c46:	781b      	ldrb	r3, [r3, #0]
    1c48:	429a      	cmp	r2, r3
    1c4a:	d011      	beq.n	1c70 <_Z21drawClassicalCountersPA11_hhhhh+0x1aa>
						// Runs if not the original counter
						drawClassicalCounters(boardState, j, i + 2, origX, origY);
    1c4c:	2315      	movs	r3, #21
    1c4e:	18fb      	adds	r3, r7, r3
    1c50:	781b      	ldrb	r3, [r3, #0]
    1c52:	3302      	adds	r3, #2
    1c54:	b2da      	uxtb	r2, r3
    1c56:	1c7b      	adds	r3, r7, #1
    1c58:	781c      	ldrb	r4, [r3, #0]
    1c5a:	2314      	movs	r3, #20
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	7819      	ldrb	r1, [r3, #0]
    1c60:	6878      	ldr	r0, [r7, #4]
    1c62:	2328      	movs	r3, #40	; 0x28
    1c64:	18fb      	adds	r3, r7, r3
    1c66:	781b      	ldrb	r3, [r3, #0]
    1c68:	9300      	str	r3, [sp, #0]
    1c6a:	0023      	movs	r3, r4
    1c6c:	f7ff ff2b 	bl	1ac6 <_Z21drawClassicalCountersPA11_hhhhh>
			for (uint8_t j = 0; j < 9; j++) {
    1c70:	2314      	movs	r3, #20
    1c72:	18fb      	adds	r3, r7, r3
    1c74:	781a      	ldrb	r2, [r3, #0]
    1c76:	2314      	movs	r3, #20
    1c78:	18fb      	adds	r3, r7, r3
    1c7a:	3201      	adds	r2, #1
    1c7c:	701a      	strb	r2, [r3, #0]
    1c7e:	e7b8      	b.n	1bf2 <_Z21drawClassicalCountersPA11_hhhhh+0x12c>
	for (uint8_t i = 0; i < 9; i++) {
    1c80:	2315      	movs	r3, #21
    1c82:	18fb      	adds	r3, r7, r3
    1c84:	781a      	ldrb	r2, [r3, #0]
    1c86:	2315      	movs	r3, #21
    1c88:	18fb      	adds	r3, r7, r3
    1c8a:	3201      	adds	r2, #1
    1c8c:	701a      	strb	r2, [r3, #0]
    1c8e:	e78f      	b.n	1bb0 <_Z21drawClassicalCountersPA11_hhhhh+0xea>
					}
				}
			}
		}
	}
}
    1c90:	46c0      	nop			; (mov r8, r8)
    1c92:	46bd      	mov	sp, r7
    1c94:	b007      	add	sp, #28
    1c96:	bd90      	pop	{r4, r7, pc}

00001c98 <_Z4gamehh>:

State game(uint8_t noughtsScore, uint8_t crossesScore) {
    1c98:	b590      	push	{r4, r7, lr}
    1c9a:	b09d      	sub	sp, #116	; 0x74
    1c9c:	af00      	add	r7, sp, #0
    1c9e:	0002      	movs	r2, r0
    1ca0:	230f      	movs	r3, #15
    1ca2:	18fb      	adds	r3, r7, r3
    1ca4:	701a      	strb	r2, [r3, #0]
    1ca6:	230e      	movs	r3, #14
    1ca8:	18fb      	adds	r3, r7, r3
    1caa:	1c0a      	adds	r2, r1, #0
    1cac:	701a      	strb	r2, [r3, #0]
	State player = cross;
    1cae:	236f      	movs	r3, #111	; 0x6f
    1cb0:	18fb      	adds	r3, r7, r3
    1cb2:	2202      	movs	r2, #2
    1cb4:	701a      	strb	r2, [r3, #0]
	State boardState[9] = {empty, empty, empty, empty, empty, empty, empty, empty,
	empty};
    1cb6:	2320      	movs	r3, #32
    1cb8:	18fb      	adds	r3, r7, r3
    1cba:	0018      	movs	r0, r3
    1cbc:	2309      	movs	r3, #9
    1cbe:	001a      	movs	r2, r3
    1cc0:	2100      	movs	r1, #0
    1cc2:	f00e fdbf 	bl	10844 <memset>
	State winner = empty;
    1cc6:	236e      	movs	r3, #110	; 0x6e
    1cc8:	18fb      	adds	r3, r7, r3
    1cca:	2200      	movs	r2, #0
    1ccc:	701a      	strb	r2, [r3, #0]
	uint8_t placedCounters = 0;
    1cce:	236d      	movs	r3, #109	; 0x6d
    1cd0:	18fb      	adds	r3, r7, r3
    1cd2:	2200      	movs	r2, #0
    1cd4:	701a      	strb	r2, [r3, #0]
	uint8_t square = 255;
    1cd6:	236b      	movs	r3, #107	; 0x6b
    1cd8:	18fb      	adds	r3, r7, r3
    1cda:	22ff      	movs	r2, #255	; 0xff
    1cdc:	701a      	strb	r2, [r3, #0]
	TS_Point newCounterPos;
    1cde:	2318      	movs	r3, #24
    1ce0:	18fb      	adds	r3, r7, r3
    1ce2:	0018      	movs	r0, r3
    1ce4:	f005 fc86 	bl	75f4 <_ZN8TS_PointC1Ev>

	// Draw grid
	drawBitmap('d', 0, 80);
    1ce8:	2250      	movs	r2, #80	; 0x50
    1cea:	2100      	movs	r1, #0
    1cec:	2064      	movs	r0, #100	; 0x64
    1cee:	f7fe fab9 	bl	264 <_Z10drawBitmapcss>

	// Start game
	while (placedCounters < 9) {
    1cf2:	236d      	movs	r3, #109	; 0x6d
    1cf4:	18fb      	adds	r3, r7, r3
    1cf6:	781b      	ldrb	r3, [r3, #0]
    1cf8:	2b08      	cmp	r3, #8
    1cfa:	dd00      	ble.n	1cfe <_Z4gamehh+0x66>
    1cfc:	e0db      	b.n	1eb6 <_Z4gamehh+0x21e>
		while (true) {
			if (!touchScreen.touched()) continue;
    1cfe:	4b71      	ldr	r3, [pc, #452]	; (1ec4 <_Z4gamehh+0x22c>)
    1d00:	0018      	movs	r0, r3
    1d02:	f005 fac5 	bl	7290 <_ZN15Adafruit_FT62067touchedEv>
    1d06:	0003      	movs	r3, r0
    1d08:	425a      	negs	r2, r3
    1d0a:	4153      	adcs	r3, r2
    1d0c:	b2db      	uxtb	r3, r3
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d12e      	bne.n	1d70 <_Z4gamehh+0xd8>
			TS_Point pointTouched = getPoint();
    1d12:	2310      	movs	r3, #16
    1d14:	18fb      	adds	r3, r7, r3
    1d16:	0018      	movs	r0, r3
    1d18:	f7ff fb18 	bl	134c <_Z8getPointv>
			if (verbose)
			Serial.println(
			(String) F("screen pressed at: (") + (String) pointTouched.x + ","
			+ (String) pointTouched.y + (String) F(")"));
			square = getSquare(pointTouched);
    1d1c:	236b      	movs	r3, #107	; 0x6b
    1d1e:	18fc      	adds	r4, r7, r3
    1d20:	2310      	movs	r3, #16
    1d22:	18fb      	adds	r3, r7, r3
    1d24:	6818      	ldr	r0, [r3, #0]
    1d26:	6859      	ldr	r1, [r3, #4]
    1d28:	f7ff fc11 	bl	154e <_Z9getSquare8TS_Point>
    1d2c:	0003      	movs	r3, r0
    1d2e:	7023      	strb	r3, [r4, #0]
			newCounterPos = getCounterPosition(square);
    1d30:	2318      	movs	r3, #24
    1d32:	18fc      	adds	r4, r7, r3
    1d34:	003a      	movs	r2, r7
    1d36:	236b      	movs	r3, #107	; 0x6b
    1d38:	18fb      	adds	r3, r7, r3
    1d3a:	781b      	ldrb	r3, [r3, #0]
    1d3c:	0019      	movs	r1, r3
    1d3e:	0010      	movs	r0, r2
    1d40:	f7ff fc8c 	bl	165c <_Z18getCounterPositionh>
    1d44:	003b      	movs	r3, r7
    1d46:	0020      	movs	r0, r4
    1d48:	0019      	movs	r1, r3
    1d4a:	2306      	movs	r3, #6
    1d4c:	001a      	movs	r2, r3
    1d4e:	f00e fd70 	bl	10832 <memcpy>
			if (!(square == 255)) break;
    1d52:	236b      	movs	r3, #107	; 0x6b
    1d54:	18fb      	adds	r3, r7, r3
    1d56:	781b      	ldrb	r3, [r3, #0]
    1d58:	2bff      	cmp	r3, #255	; 0xff
    1d5a:	d0d0      	beq.n	1cfe <_Z4gamehh+0x66>
		}

		// Check to see if selected square is occupied
		if (!(boardState[square] == empty)) continue;
    1d5c:	236b      	movs	r3, #107	; 0x6b
    1d5e:	18fb      	adds	r3, r7, r3
    1d60:	781b      	ldrb	r3, [r3, #0]
    1d62:	2220      	movs	r2, #32
    1d64:	18ba      	adds	r2, r7, r2
    1d66:	5cd3      	ldrb	r3, [r2, r3]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d000      	beq.n	1d6e <_Z4gamehh+0xd6>
    1d6c:	e0a0      	b.n	1eb0 <_Z4gamehh+0x218>
    1d6e:	e001      	b.n	1d74 <_Z4gamehh+0xdc>
			if (!touchScreen.touched()) continue;
    1d70:	46c0      	nop			; (mov r8, r8)
		}
    1d72:	e7c4      	b.n	1cfe <_Z4gamehh+0x66>

		// Update board state
		boardState[square] = player;
    1d74:	236b      	movs	r3, #107	; 0x6b
    1d76:	18fb      	adds	r3, r7, r3
    1d78:	781b      	ldrb	r3, [r3, #0]
    1d7a:	2220      	movs	r2, #32
    1d7c:	18ba      	adds	r2, r7, r2
    1d7e:	216f      	movs	r1, #111	; 0x6f
    1d80:	1879      	adds	r1, r7, r1
    1d82:	7809      	ldrb	r1, [r1, #0]
    1d84:	54d1      	strb	r1, [r2, r3]

		// Draw nought or cross on selected square and swap player
		player = addMove(square, newCounterPos, player);
    1d86:	236f      	movs	r3, #111	; 0x6f
    1d88:	18fc      	adds	r4, r7, r3
    1d8a:	236f      	movs	r3, #111	; 0x6f
    1d8c:	18fb      	adds	r3, r7, r3
    1d8e:	7819      	ldrb	r1, [r3, #0]
    1d90:	2318      	movs	r3, #24
    1d92:	18fa      	adds	r2, r7, r3
    1d94:	236b      	movs	r3, #107	; 0x6b
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	7818      	ldrb	r0, [r3, #0]
    1d9a:	000b      	movs	r3, r1
    1d9c:	6811      	ldr	r1, [r2, #0]
    1d9e:	6852      	ldr	r2, [r2, #4]
    1da0:	f7ff fb06 	bl	13b0 <_Z7addMoveh8TS_Point5State>
    1da4:	0003      	movs	r3, r0
    1da6:	7023      	strb	r3, [r4, #0]
		placedCounters++;
    1da8:	236d      	movs	r3, #109	; 0x6d
    1daa:	18fb      	adds	r3, r7, r3
    1dac:	781a      	ldrb	r2, [r3, #0]
    1dae:	236d      	movs	r3, #109	; 0x6d
    1db0:	18fb      	adds	r3, r7, r3
    1db2:	3201      	adds	r2, #1
    1db4:	701a      	strb	r2, [r3, #0]

		// Check to see if someone has won
		for (uint8_t i = 0; i < 8; i++) {
    1db6:	236c      	movs	r3, #108	; 0x6c
    1db8:	18fb      	adds	r3, r7, r3
    1dba:	2200      	movs	r2, #0
    1dbc:	701a      	strb	r2, [r3, #0]
    1dbe:	236c      	movs	r3, #108	; 0x6c
    1dc0:	18fb      	adds	r3, r7, r3
    1dc2:	781b      	ldrb	r3, [r3, #0]
    1dc4:	2b07      	cmp	r3, #7
    1dc6:	dc5c      	bgt.n	1e82 <_Z4gamehh+0x1ea>
			if (boardState[winIndexes[i][0]] == boardState[winIndexes[i][1]]
    1dc8:	236c      	movs	r3, #108	; 0x6c
    1dca:	18fb      	adds	r3, r7, r3
    1dcc:	781a      	ldrb	r2, [r3, #0]
    1dce:	493e      	ldr	r1, [pc, #248]	; (1ec8 <_Z4gamehh+0x230>)
    1dd0:	0013      	movs	r3, r2
    1dd2:	005b      	lsls	r3, r3, #1
    1dd4:	189b      	adds	r3, r3, r2
    1dd6:	5c5b      	ldrb	r3, [r3, r1]
    1dd8:	001a      	movs	r2, r3
    1dda:	2320      	movs	r3, #32
    1ddc:	18fb      	adds	r3, r7, r3
    1dde:	5c99      	ldrb	r1, [r3, r2]
    1de0:	236c      	movs	r3, #108	; 0x6c
    1de2:	18fb      	adds	r3, r7, r3
    1de4:	781a      	ldrb	r2, [r3, #0]
    1de6:	4838      	ldr	r0, [pc, #224]	; (1ec8 <_Z4gamehh+0x230>)
    1de8:	0013      	movs	r3, r2
    1dea:	005b      	lsls	r3, r3, #1
    1dec:	189b      	adds	r3, r3, r2
    1dee:	18c3      	adds	r3, r0, r3
    1df0:	3301      	adds	r3, #1
    1df2:	781b      	ldrb	r3, [r3, #0]
    1df4:	001a      	movs	r2, r3
    1df6:	2320      	movs	r3, #32
    1df8:	18fb      	adds	r3, r7, r3
    1dfa:	5c9b      	ldrb	r3, [r3, r2]
    1dfc:	4299      	cmp	r1, r3
    1dfe:	d138      	bne.n	1e72 <_Z4gamehh+0x1da>
			&& boardState[winIndexes[i][0]] == boardState[winIndexes[i][2]]
    1e00:	236c      	movs	r3, #108	; 0x6c
    1e02:	18fb      	adds	r3, r7, r3
    1e04:	781a      	ldrb	r2, [r3, #0]
    1e06:	4930      	ldr	r1, [pc, #192]	; (1ec8 <_Z4gamehh+0x230>)
    1e08:	0013      	movs	r3, r2
    1e0a:	005b      	lsls	r3, r3, #1
    1e0c:	189b      	adds	r3, r3, r2
    1e0e:	5c5b      	ldrb	r3, [r3, r1]
    1e10:	001a      	movs	r2, r3
    1e12:	2320      	movs	r3, #32
    1e14:	18fb      	adds	r3, r7, r3
    1e16:	5c99      	ldrb	r1, [r3, r2]
    1e18:	236c      	movs	r3, #108	; 0x6c
    1e1a:	18fb      	adds	r3, r7, r3
    1e1c:	781a      	ldrb	r2, [r3, #0]
    1e1e:	482a      	ldr	r0, [pc, #168]	; (1ec8 <_Z4gamehh+0x230>)
    1e20:	0013      	movs	r3, r2
    1e22:	005b      	lsls	r3, r3, #1
    1e24:	189b      	adds	r3, r3, r2
    1e26:	18c3      	adds	r3, r0, r3
    1e28:	3302      	adds	r3, #2
    1e2a:	781b      	ldrb	r3, [r3, #0]
    1e2c:	001a      	movs	r2, r3
    1e2e:	2320      	movs	r3, #32
    1e30:	18fb      	adds	r3, r7, r3
    1e32:	5c9b      	ldrb	r3, [r3, r2]
    1e34:	4299      	cmp	r1, r3
    1e36:	d11c      	bne.n	1e72 <_Z4gamehh+0x1da>
			&& boardState[winIndexes[i][0]] != empty) {
    1e38:	236c      	movs	r3, #108	; 0x6c
    1e3a:	18fb      	adds	r3, r7, r3
    1e3c:	781a      	ldrb	r2, [r3, #0]
    1e3e:	4922      	ldr	r1, [pc, #136]	; (1ec8 <_Z4gamehh+0x230>)
    1e40:	0013      	movs	r3, r2
    1e42:	005b      	lsls	r3, r3, #1
    1e44:	189b      	adds	r3, r3, r2
    1e46:	5c5b      	ldrb	r3, [r3, r1]
    1e48:	001a      	movs	r2, r3
    1e4a:	2320      	movs	r3, #32
    1e4c:	18fb      	adds	r3, r7, r3
    1e4e:	5c9b      	ldrb	r3, [r3, r2]
    1e50:	2b00      	cmp	r3, #0
    1e52:	d00e      	beq.n	1e72 <_Z4gamehh+0x1da>
				winner = boardState[winIndexes[i][0]];
    1e54:	236c      	movs	r3, #108	; 0x6c
    1e56:	18fb      	adds	r3, r7, r3
    1e58:	781a      	ldrb	r2, [r3, #0]
    1e5a:	491b      	ldr	r1, [pc, #108]	; (1ec8 <_Z4gamehh+0x230>)
    1e5c:	0013      	movs	r3, r2
    1e5e:	005b      	lsls	r3, r3, #1
    1e60:	189b      	adds	r3, r3, r2
    1e62:	5c5b      	ldrb	r3, [r3, r1]
    1e64:	0019      	movs	r1, r3
    1e66:	236e      	movs	r3, #110	; 0x6e
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	2220      	movs	r2, #32
    1e6c:	18ba      	adds	r2, r7, r2
    1e6e:	5c52      	ldrb	r2, [r2, r1]
    1e70:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++) {
    1e72:	236c      	movs	r3, #108	; 0x6c
    1e74:	18fb      	adds	r3, r7, r3
    1e76:	781a      	ldrb	r2, [r3, #0]
    1e78:	236c      	movs	r3, #108	; 0x6c
    1e7a:	18fb      	adds	r3, r7, r3
    1e7c:	3201      	adds	r2, #1
    1e7e:	701a      	strb	r2, [r3, #0]
    1e80:	e79d      	b.n	1dbe <_Z4gamehh+0x126>
			}
		}
		Serial.print(F("winner = "));
    1e82:	4a12      	ldr	r2, [pc, #72]	; (1ecc <_Z4gamehh+0x234>)
    1e84:	4b12      	ldr	r3, [pc, #72]	; (1ed0 <_Z4gamehh+0x238>)
    1e86:	0011      	movs	r1, r2
    1e88:	0018      	movs	r0, r3
    1e8a:	f001 f880 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(winner);
    1e8e:	236e      	movs	r3, #110	; 0x6e
    1e90:	18fb      	adds	r3, r7, r3
    1e92:	7819      	ldrb	r1, [r3, #0]
    1e94:	4b0e      	ldr	r3, [pc, #56]	; (1ed0 <_Z4gamehh+0x238>)
    1e96:	220a      	movs	r2, #10
    1e98:	0018      	movs	r0, r3
    1e9a:	f001 f9b6 	bl	320a <_ZN5Print7printlnEii>
		if (!(winner == empty)) break;
    1e9e:	236e      	movs	r3, #110	; 0x6e
    1ea0:	18fb      	adds	r3, r7, r3
    1ea2:	781b      	ldrb	r3, [r3, #0]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d105      	bne.n	1eb4 <_Z4gamehh+0x21c>
		delay(100);
    1ea8:	2064      	movs	r0, #100	; 0x64
    1eaa:	f000 ffbf 	bl	2e2c <delay>
    1eae:	e720      	b.n	1cf2 <_Z4gamehh+0x5a>
		if (!(boardState[square] == empty)) continue;
    1eb0:	46c0      	nop			; (mov r8, r8)
	while (placedCounters < 9) {
    1eb2:	e71e      	b.n	1cf2 <_Z4gamehh+0x5a>
		if (!(winner == empty)) break;
    1eb4:	46c0      	nop			; (mov r8, r8)
	}
	return winner;
    1eb6:	236e      	movs	r3, #110	; 0x6e
    1eb8:	18fb      	adds	r3, r7, r3
    1eba:	781b      	ldrb	r3, [r3, #0]
}
    1ebc:	0018      	movs	r0, r3
    1ebe:	46bd      	mov	sp, r7
    1ec0:	b01d      	add	sp, #116	; 0x74
    1ec2:	bd90      	pop	{r4, r7, pc}
    1ec4:	20000320 	.word	0x20000320
    1ec8:	20000004 	.word	0x20000004
    1ecc:	00013300 	.word	0x00013300
    1ed0:	20000e94 	.word	0x20000e94

00001ed4 <_Z11quantumGamehh>:

uint8_t quantumGame(uint8_t noughtsScore, uint8_t crossesScore) {
    1ed4:	b5b0      	push	{r4, r5, r7, lr}
    1ed6:	b0c2      	sub	sp, #264	; 0x108
    1ed8:	af02      	add	r7, sp, #8
    1eda:	0002      	movs	r2, r0
    1edc:	1dfb      	adds	r3, r7, #7
    1ede:	701a      	strb	r2, [r3, #0]
    1ee0:	1dbb      	adds	r3, r7, #6
    1ee2:	1c0a      	adds	r2, r1, #0
    1ee4:	701a      	strb	r2, [r3, #0]
	// 0 = none, 1 = cross, 2 = nought
	uint8_t player = 1;
    1ee6:	23ff      	movs	r3, #255	; 0xff
    1ee8:	18fb      	adds	r3, r7, r3
    1eea:	2201      	movs	r2, #1
    1eec:	701a      	strb	r2, [r3, #0]
	uint8_t turn = 1;
    1eee:	23fe      	movs	r3, #254	; 0xfe
    1ef0:	18fb      	adds	r3, r7, r3
    1ef2:	2201      	movs	r2, #1
    1ef4:	701a      	strb	r2, [r3, #0]
	uint8_t winner = 0;
    1ef6:	23fd      	movs	r3, #253	; 0xfd
    1ef8:	18fb      	adds	r3, r7, r3
    1efa:	2200      	movs	r2, #0
    1efc:	701a      	strb	r2, [r3, #0]
	uint8_t boardState[9][11] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    1efe:	2350      	movs	r3, #80	; 0x50
    1f00:	18fb      	adds	r3, r7, r3
    1f02:	0018      	movs	r0, r3
    1f04:	2363      	movs	r3, #99	; 0x63
    1f06:	001a      	movs	r2, r3
    1f08:	2100      	movs	r1, #0
    1f0a:	f00e fc9b 	bl	10844 <memset>
	uint8_t bigCounters = 0;
    1f0e:	23f0      	movs	r3, #240	; 0xf0
    1f10:	18fb      	adds	r3, r7, r3
    1f12:	2200      	movs	r2, #0
    1f14:	701a      	strb	r2, [r3, #0]
	uint8_t square = 255;
    1f16:	23fc      	movs	r3, #252	; 0xfc
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	22ff      	movs	r2, #255	; 0xff
    1f1c:	701a      	strb	r2, [r3, #0]
	TS_Point newCounterPos;
    1f1e:	2348      	movs	r3, #72	; 0x48
    1f20:	18fb      	adds	r3, r7, r3
    1f22:	0018      	movs	r0, r3
    1f24:	f005 fb66 	bl	75f4 <_ZN8TS_PointC1Ev>

	// Draw grid
	drawBitmap('d', 0, 80);
    1f28:	2250      	movs	r2, #80	; 0x50
    1f2a:	2100      	movs	r1, #0
    1f2c:	2064      	movs	r0, #100	; 0x64
    1f2e:	f7fe f999 	bl	264 <_Z10drawBitmapcss>

	// Start match
	while (bigCounters < 9) {
    1f32:	23f0      	movs	r3, #240	; 0xf0
    1f34:	18fb      	adds	r3, r7, r3
    1f36:	781b      	ldrb	r3, [r3, #0]
    1f38:	2b08      	cmp	r3, #8
    1f3a:	dd00      	ble.n	1f3e <_Z11quantumGamehh+0x6a>
    1f3c:	e322      	b.n	2584 <_Z11quantumGamehh+0x6b0>
		uint8_t countersThisTurn = 0;
    1f3e:	23fb      	movs	r3, #251	; 0xfb
    1f40:	18fb      	adds	r3, r7, r3
    1f42:	2200      	movs	r2, #0
    1f44:	701a      	strb	r2, [r3, #0]
		uint8_t recentSquares[] = {255, 255};
    1f46:	2344      	movs	r3, #68	; 0x44
    1f48:	18fb      	adds	r3, r7, r3
    1f4a:	4ae1      	ldr	r2, [pc, #900]	; (22d0 <_Z11quantumGamehh+0x3fc>)
    1f4c:	8812      	ldrh	r2, [r2, #0]
    1f4e:	801a      	strh	r2, [r3, #0]
		while (countersThisTurn < 2) {
    1f50:	23fb      	movs	r3, #251	; 0xfb
    1f52:	18fb      	adds	r3, r7, r3
    1f54:	781b      	ldrb	r3, [r3, #0]
    1f56:	2b01      	cmp	r3, #1
    1f58:	dd00      	ble.n	1f5c <_Z11quantumGamehh+0x88>
    1f5a:	e07a      	b.n	2052 <_Z11quantumGamehh+0x17e>
			while (true) {
				if (!touchScreen.touched()) continue;
    1f5c:	4bdd      	ldr	r3, [pc, #884]	; (22d4 <_Z11quantumGamehh+0x400>)
    1f5e:	0018      	movs	r0, r3
    1f60:	f005 f996 	bl	7290 <_ZN15Adafruit_FT62067touchedEv>
    1f64:	0003      	movs	r3, r0
    1f66:	425a      	negs	r2, r3
    1f68:	4153      	adcs	r3, r2
    1f6a:	b2db      	uxtb	r3, r3
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d121      	bne.n	1fb4 <_Z11quantumGamehh+0xe0>
				TS_Point pointTouched = getPoint();
    1f70:	2328      	movs	r3, #40	; 0x28
    1f72:	18fb      	adds	r3, r7, r3
    1f74:	0018      	movs	r0, r3
    1f76:	f7ff f9e9 	bl	134c <_Z8getPointv>
				if (verbose)
				Serial.println(
				(String) F("screen pressed at: (") + (String) pointTouched.x + ","
				+ (String) pointTouched.y + (String) F(")"));
				square = getSquare(pointTouched);
    1f7a:	23fc      	movs	r3, #252	; 0xfc
    1f7c:	18fc      	adds	r4, r7, r3
    1f7e:	2328      	movs	r3, #40	; 0x28
    1f80:	18fb      	adds	r3, r7, r3
    1f82:	6818      	ldr	r0, [r3, #0]
    1f84:	6859      	ldr	r1, [r3, #4]
    1f86:	f7ff fae2 	bl	154e <_Z9getSquare8TS_Point>
    1f8a:	0003      	movs	r3, r0
    1f8c:	7023      	strb	r3, [r4, #0]
				if (!(square == 255)) break;
    1f8e:	23fc      	movs	r3, #252	; 0xfc
    1f90:	18fb      	adds	r3, r7, r3
    1f92:	781b      	ldrb	r3, [r3, #0]
    1f94:	2bff      	cmp	r3, #255	; 0xff
    1f96:	d0e1      	beq.n	1f5c <_Z11quantumGamehh+0x88>
			}

			// Check to see if selected square is occupied
			if (boardState[square][0] != 0) continue;
    1f98:	23fc      	movs	r3, #252	; 0xfc
    1f9a:	18fb      	adds	r3, r7, r3
    1f9c:	781a      	ldrb	r2, [r3, #0]
    1f9e:	2350      	movs	r3, #80	; 0x50
    1fa0:	18f9      	adds	r1, r7, r3
    1fa2:	0013      	movs	r3, r2
    1fa4:	009b      	lsls	r3, r3, #2
    1fa6:	189b      	adds	r3, r3, r2
    1fa8:	005b      	lsls	r3, r3, #1
    1faa:	189b      	adds	r3, r3, r2
    1fac:	5c5b      	ldrb	r3, [r3, r1]
    1fae:	2b00      	cmp	r3, #0
    1fb0:	d14b      	bne.n	204a <_Z11quantumGamehh+0x176>
    1fb2:	e001      	b.n	1fb8 <_Z11quantumGamehh+0xe4>
				if (!touchScreen.touched()) continue;
    1fb4:	46c0      	nop			; (mov r8, r8)
			}
    1fb6:	e7d1      	b.n	1f5c <_Z11quantumGamehh+0x88>
			if (boardState[square][turn + 1] != 0) continue;
    1fb8:	23fc      	movs	r3, #252	; 0xfc
    1fba:	18fb      	adds	r3, r7, r3
    1fbc:	781a      	ldrb	r2, [r3, #0]
    1fbe:	23fe      	movs	r3, #254	; 0xfe
    1fc0:	18fb      	adds	r3, r7, r3
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	1c59      	adds	r1, r3, #1
    1fc6:	2350      	movs	r3, #80	; 0x50
    1fc8:	18f8      	adds	r0, r7, r3
    1fca:	0013      	movs	r3, r2
    1fcc:	009b      	lsls	r3, r3, #2
    1fce:	189b      	adds	r3, r3, r2
    1fd0:	005b      	lsls	r3, r3, #1
    1fd2:	189b      	adds	r3, r3, r2
    1fd4:	18c3      	adds	r3, r0, r3
    1fd6:	5c5b      	ldrb	r3, [r3, r1]
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d138      	bne.n	204e <_Z11quantumGamehh+0x17a>

			// Update board state
			boardState[square][turn + 1] = player;
    1fdc:	23fc      	movs	r3, #252	; 0xfc
    1fde:	18fb      	adds	r3, r7, r3
    1fe0:	781a      	ldrb	r2, [r3, #0]
    1fe2:	23fe      	movs	r3, #254	; 0xfe
    1fe4:	18fb      	adds	r3, r7, r3
    1fe6:	781b      	ldrb	r3, [r3, #0]
    1fe8:	1c59      	adds	r1, r3, #1
    1fea:	2350      	movs	r3, #80	; 0x50
    1fec:	18f8      	adds	r0, r7, r3
    1fee:	0013      	movs	r3, r2
    1ff0:	009b      	lsls	r3, r3, #2
    1ff2:	189b      	adds	r3, r3, r2
    1ff4:	005b      	lsls	r3, r3, #1
    1ff6:	189b      	adds	r3, r3, r2
    1ff8:	18c3      	adds	r3, r0, r3
    1ffa:	22ff      	movs	r2, #255	; 0xff
    1ffc:	18ba      	adds	r2, r7, r2
    1ffe:	7812      	ldrb	r2, [r2, #0]
    2000:	545a      	strb	r2, [r3, r1]
			if (recentSquares[0] == 255) {
    2002:	2344      	movs	r3, #68	; 0x44
    2004:	18fb      	adds	r3, r7, r3
    2006:	781b      	ldrb	r3, [r3, #0]
    2008:	2bff      	cmp	r3, #255	; 0xff
    200a:	d106      	bne.n	201a <_Z11quantumGamehh+0x146>
				recentSquares[0] = square;
    200c:	2344      	movs	r3, #68	; 0x44
    200e:	18fb      	adds	r3, r7, r3
    2010:	22fc      	movs	r2, #252	; 0xfc
    2012:	18ba      	adds	r2, r7, r2
    2014:	7812      	ldrb	r2, [r2, #0]
    2016:	701a      	strb	r2, [r3, #0]
    2018:	e005      	b.n	2026 <_Z11quantumGamehh+0x152>
			} else {
				recentSquares[1] = square;
    201a:	2344      	movs	r3, #68	; 0x44
    201c:	18fb      	adds	r3, r7, r3
    201e:	22fc      	movs	r2, #252	; 0xfc
    2020:	18ba      	adds	r2, r7, r2
    2022:	7812      	ldrb	r2, [r2, #0]
    2024:	705a      	strb	r2, [r3, #1]
			}
		

			// Draw small nought or cross on selected square
			drawSmallCounter(square, turn, false);
    2026:	23fe      	movs	r3, #254	; 0xfe
    2028:	18fb      	adds	r3, r7, r3
    202a:	7819      	ldrb	r1, [r3, #0]
    202c:	23fc      	movs	r3, #252	; 0xfc
    202e:	18fb      	adds	r3, r7, r3
    2030:	781b      	ldrb	r3, [r3, #0]
    2032:	2200      	movs	r2, #0
    2034:	0018      	movs	r0, r3
    2036:	f7ff fc04 	bl	1842 <_Z16drawSmallCounterhhb>
			
			countersThisTurn++;
    203a:	23fb      	movs	r3, #251	; 0xfb
    203c:	18fb      	adds	r3, r7, r3
    203e:	781a      	ldrb	r2, [r3, #0]
    2040:	23fb      	movs	r3, #251	; 0xfb
    2042:	18fb      	adds	r3, r7, r3
    2044:	3201      	adds	r2, #1
    2046:	701a      	strb	r2, [r3, #0]
    2048:	e782      	b.n	1f50 <_Z11quantumGamehh+0x7c>
			if (boardState[square][0] != 0) continue;
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	e780      	b.n	1f50 <_Z11quantumGamehh+0x7c>
			if (boardState[square][turn + 1] != 0) continue;
    204e:	46c0      	nop			; (mov r8, r8)
		while (countersThisTurn < 2) {
    2050:	e77e      	b.n	1f50 <_Z11quantumGamehh+0x7c>
		}
		
		// Check for measurement
		uint8_t circle[9] = {255, 255, 255, 255, 255, 255, 255, 255, 255};
    2052:	2338      	movs	r3, #56	; 0x38
    2054:	18fb      	adds	r3, r7, r3
    2056:	4aa0      	ldr	r2, [pc, #640]	; (22d8 <_Z11quantumGamehh+0x404>)
    2058:	ca03      	ldmia	r2!, {r0, r1}
    205a:	c303      	stmia	r3!, {r0, r1}
    205c:	7812      	ldrb	r2, [r2, #0]
    205e:	701a      	strb	r2, [r3, #0]
		checkForCircle(boardState, square, turn + 1, square, circle);
    2060:	23fe      	movs	r3, #254	; 0xfe
    2062:	18fb      	adds	r3, r7, r3
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	3301      	adds	r3, #1
    2068:	b2da      	uxtb	r2, r3
    206a:	23fc      	movs	r3, #252	; 0xfc
    206c:	18fb      	adds	r3, r7, r3
    206e:	781c      	ldrb	r4, [r3, #0]
    2070:	23fc      	movs	r3, #252	; 0xfc
    2072:	18fb      	adds	r3, r7, r3
    2074:	7819      	ldrb	r1, [r3, #0]
    2076:	2350      	movs	r3, #80	; 0x50
    2078:	18f8      	adds	r0, r7, r3
    207a:	2338      	movs	r3, #56	; 0x38
    207c:	18fb      	adds	r3, r7, r3
    207e:	9300      	str	r3, [sp, #0]
    2080:	0023      	movs	r3, r4
    2082:	f7ff fc72 	bl	196a <_Z14checkForCirclePA11_hhhhPh>
		if (circle[0] != 255) {
    2086:	2338      	movs	r3, #56	; 0x38
    2088:	18fb      	adds	r3, r7, r3
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	2bff      	cmp	r3, #255	; 0xff
    208e:	d100      	bne.n	2092 <_Z11quantumGamehh+0x1be>
    2090:	e146      	b.n	2320 <_Z11quantumGamehh+0x44c>
			// Circle found
			
			// Ask user how to resolve
			
			// Draw bold counters
			for (uint8_t i = 0; i < 9; i++) {
    2092:	23fa      	movs	r3, #250	; 0xfa
    2094:	18fb      	adds	r3, r7, r3
    2096:	2200      	movs	r2, #0
    2098:	701a      	strb	r2, [r3, #0]
    209a:	23fa      	movs	r3, #250	; 0xfa
    209c:	18fb      	adds	r3, r7, r3
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	2b08      	cmp	r3, #8
    20a2:	dc42      	bgt.n	212a <_Z11quantumGamehh+0x256>
				if (circle[i] != 255) {
    20a4:	23fa      	movs	r3, #250	; 0xfa
    20a6:	18fb      	adds	r3, r7, r3
    20a8:	781b      	ldrb	r3, [r3, #0]
    20aa:	2238      	movs	r2, #56	; 0x38
    20ac:	18ba      	adds	r2, r7, r2
    20ae:	5cd3      	ldrb	r3, [r2, r3]
    20b0:	2bff      	cmp	r3, #255	; 0xff
    20b2:	d032      	beq.n	211a <_Z11quantumGamehh+0x246>
					for (uint8_t j = 0; j < 9; j++) {
    20b4:	23f9      	movs	r3, #249	; 0xf9
    20b6:	18fb      	adds	r3, r7, r3
    20b8:	2200      	movs	r2, #0
    20ba:	701a      	strb	r2, [r3, #0]
    20bc:	23f9      	movs	r3, #249	; 0xf9
    20be:	18fb      	adds	r3, r7, r3
    20c0:	781b      	ldrb	r3, [r3, #0]
    20c2:	2b08      	cmp	r3, #8
    20c4:	dc29      	bgt.n	211a <_Z11quantumGamehh+0x246>
						if (boardState[j][circle[i] + 1]) {
    20c6:	23f9      	movs	r3, #249	; 0xf9
    20c8:	18fb      	adds	r3, r7, r3
    20ca:	781a      	ldrb	r2, [r3, #0]
    20cc:	23fa      	movs	r3, #250	; 0xfa
    20ce:	18fb      	adds	r3, r7, r3
    20d0:	781b      	ldrb	r3, [r3, #0]
    20d2:	2138      	movs	r1, #56	; 0x38
    20d4:	1879      	adds	r1, r7, r1
    20d6:	5ccb      	ldrb	r3, [r1, r3]
    20d8:	1c59      	adds	r1, r3, #1
    20da:	2350      	movs	r3, #80	; 0x50
    20dc:	18f8      	adds	r0, r7, r3
    20de:	0013      	movs	r3, r2
    20e0:	009b      	lsls	r3, r3, #2
    20e2:	189b      	adds	r3, r3, r2
    20e4:	005b      	lsls	r3, r3, #1
    20e6:	189b      	adds	r3, r3, r2
    20e8:	18c3      	adds	r3, r0, r3
    20ea:	5c5b      	ldrb	r3, [r3, r1]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d00c      	beq.n	210a <_Z11quantumGamehh+0x236>
							drawSmallCounter(j, circle[i], true);
    20f0:	23fa      	movs	r3, #250	; 0xfa
    20f2:	18fb      	adds	r3, r7, r3
    20f4:	781b      	ldrb	r3, [r3, #0]
    20f6:	2238      	movs	r2, #56	; 0x38
    20f8:	18ba      	adds	r2, r7, r2
    20fa:	5cd1      	ldrb	r1, [r2, r3]
    20fc:	23f9      	movs	r3, #249	; 0xf9
    20fe:	18fb      	adds	r3, r7, r3
    2100:	781b      	ldrb	r3, [r3, #0]
    2102:	2201      	movs	r2, #1
    2104:	0018      	movs	r0, r3
    2106:	f7ff fb9c 	bl	1842 <_Z16drawSmallCounterhhb>
					for (uint8_t j = 0; j < 9; j++) {
    210a:	23f9      	movs	r3, #249	; 0xf9
    210c:	18fb      	adds	r3, r7, r3
    210e:	781a      	ldrb	r2, [r3, #0]
    2110:	23f9      	movs	r3, #249	; 0xf9
    2112:	18fb      	adds	r3, r7, r3
    2114:	3201      	adds	r2, #1
    2116:	701a      	strb	r2, [r3, #0]
    2118:	e7d0      	b.n	20bc <_Z11quantumGamehh+0x1e8>
			for (uint8_t i = 0; i < 9; i++) {
    211a:	23fa      	movs	r3, #250	; 0xfa
    211c:	18fb      	adds	r3, r7, r3
    211e:	781a      	ldrb	r2, [r3, #0]
    2120:	23fa      	movs	r3, #250	; 0xfa
    2122:	18fb      	adds	r3, r7, r3
    2124:	3201      	adds	r2, #1
    2126:	701a      	strb	r2, [r3, #0]
    2128:	e7b7      	b.n	209a <_Z11quantumGamehh+0x1c6>
						}
					}
				}
			}
			// Underline/Draw box around recent counters
			for (uint8_t i = 0; i < 9; i++) {
    212a:	23f8      	movs	r3, #248	; 0xf8
    212c:	18fb      	adds	r3, r7, r3
    212e:	2200      	movs	r2, #0
    2130:	701a      	strb	r2, [r3, #0]
    2132:	23f8      	movs	r3, #248	; 0xf8
    2134:	18fb      	adds	r3, r7, r3
    2136:	781b      	ldrb	r3, [r3, #0]
    2138:	2b08      	cmp	r3, #8
    213a:	dc34      	bgt.n	21a6 <_Z11quantumGamehh+0x2d2>
				if (boardState[i][turn + 1] != 0) {
    213c:	23f8      	movs	r3, #248	; 0xf8
    213e:	18fb      	adds	r3, r7, r3
    2140:	781a      	ldrb	r2, [r3, #0]
    2142:	23fe      	movs	r3, #254	; 0xfe
    2144:	18fb      	adds	r3, r7, r3
    2146:	781b      	ldrb	r3, [r3, #0]
    2148:	1c59      	adds	r1, r3, #1
    214a:	2350      	movs	r3, #80	; 0x50
    214c:	18f8      	adds	r0, r7, r3
    214e:	0013      	movs	r3, r2
    2150:	009b      	lsls	r3, r3, #2
    2152:	189b      	adds	r3, r3, r2
    2154:	005b      	lsls	r3, r3, #1
    2156:	189b      	adds	r3, r3, r2
    2158:	18c3      	adds	r3, r0, r3
    215a:	5c5b      	ldrb	r3, [r3, r1]
    215c:	2b00      	cmp	r3, #0
    215e:	d01a      	beq.n	2196 <_Z11quantumGamehh+0x2c2>
					TS_Point point = getSmallCounterPosition(i, turn);
    2160:	2310      	movs	r3, #16
    2162:	18f8      	adds	r0, r7, r3
    2164:	23fe      	movs	r3, #254	; 0xfe
    2166:	18fb      	adds	r3, r7, r3
    2168:	781a      	ldrb	r2, [r3, #0]
    216a:	23f8      	movs	r3, #248	; 0xf8
    216c:	18fb      	adds	r3, r7, r3
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	0019      	movs	r1, r3
    2172:	f7ff fac9 	bl	1708 <_Z23getSmallCounterPositionhh>
					tftDisplay.drawRect(point.x, point.y, 25, 25, 0x07FF);
    2176:	2310      	movs	r3, #16
    2178:	18fb      	adds	r3, r7, r3
    217a:	2100      	movs	r1, #0
    217c:	5e59      	ldrsh	r1, [r3, r1]
    217e:	2310      	movs	r3, #16
    2180:	18fb      	adds	r3, r7, r3
    2182:	2202      	movs	r2, #2
    2184:	5e9a      	ldrsh	r2, [r3, r2]
    2186:	4855      	ldr	r0, [pc, #340]	; (22dc <_Z11quantumGamehh+0x408>)
    2188:	4b55      	ldr	r3, [pc, #340]	; (22e0 <_Z11quantumGamehh+0x40c>)
    218a:	9301      	str	r3, [sp, #4]
    218c:	2319      	movs	r3, #25
    218e:	9300      	str	r3, [sp, #0]
    2190:	2319      	movs	r3, #25
    2192:	f00a fca8 	bl	cae6 <_ZN12Adafruit_GFX8drawRectEsssst>
			for (uint8_t i = 0; i < 9; i++) {
    2196:	23f8      	movs	r3, #248	; 0xf8
    2198:	18fb      	adds	r3, r7, r3
    219a:	781a      	ldrb	r2, [r3, #0]
    219c:	23f8      	movs	r3, #248	; 0xf8
    219e:	18fb      	adds	r3, r7, r3
    21a0:	3201      	adds	r2, #1
    21a2:	701a      	strb	r2, [r3, #0]
    21a4:	e7c5      	b.n	2132 <_Z11quantumGamehh+0x25e>
				}
			}
			
			// Get the two boxes parameters
			TS_Point square0 = getCounterPosition(recentSquares[0]);
    21a6:	2344      	movs	r3, #68	; 0x44
    21a8:	18fb      	adds	r3, r7, r3
    21aa:	781a      	ldrb	r2, [r3, #0]
    21ac:	2320      	movs	r3, #32
    21ae:	18fb      	adds	r3, r7, r3
    21b0:	0011      	movs	r1, r2
    21b2:	0018      	movs	r0, r3
    21b4:	f7ff fa52 	bl	165c <_Z18getCounterPositionh>
			TS_Point square1 = getCounterPosition(recentSquares[1]);
    21b8:	2344      	movs	r3, #68	; 0x44
    21ba:	18fb      	adds	r3, r7, r3
    21bc:	785a      	ldrb	r2, [r3, #1]
    21be:	2318      	movs	r3, #24
    21c0:	18fb      	adds	r3, r7, r3
    21c2:	0011      	movs	r1, r2
    21c4:	0018      	movs	r0, r3
    21c6:	f7ff fa49 	bl	165c <_Z18getCounterPositionh>
			
			
			// Wait for the user to click one of the two boxes
			uint8_t tappedSquare = 255;
    21ca:	23f7      	movs	r3, #247	; 0xf7
    21cc:	18fb      	adds	r3, r7, r3
    21ce:	22ff      	movs	r2, #255	; 0xff
    21d0:	701a      	strb	r2, [r3, #0]
			while (true) {
				if (!touchScreen.touched()) continue;
    21d2:	4b40      	ldr	r3, [pc, #256]	; (22d4 <_Z11quantumGamehh+0x400>)
    21d4:	0018      	movs	r0, r3
    21d6:	f005 f85b 	bl	7290 <_ZN15Adafruit_FT62067touchedEv>
    21da:	0003      	movs	r3, r0
    21dc:	425a      	negs	r2, r3
    21de:	4153      	adcs	r3, r2
    21e0:	b2db      	uxtb	r3, r3
    21e2:	2b00      	cmp	r3, #0
    21e4:	d000      	beq.n	21e8 <_Z11quantumGamehh+0x314>
    21e6:	e070      	b.n	22ca <_Z11quantumGamehh+0x3f6>
				TS_Point point = getPoint();
    21e8:	2308      	movs	r3, #8
    21ea:	18fb      	adds	r3, r7, r3
    21ec:	0018      	movs	r0, r3
    21ee:	f7ff f8ad 	bl	134c <_Z8getPointv>
				if (point.x > square0.x && point.x < square0.x + 80 && point.y > square0.y && point.y < square0.y + 80) {
    21f2:	2308      	movs	r3, #8
    21f4:	18fb      	adds	r3, r7, r3
    21f6:	2200      	movs	r2, #0
    21f8:	5e9a      	ldrsh	r2, [r3, r2]
    21fa:	2320      	movs	r3, #32
    21fc:	18fb      	adds	r3, r7, r3
    21fe:	2100      	movs	r1, #0
    2200:	5e5b      	ldrsh	r3, [r3, r1]
    2202:	429a      	cmp	r2, r3
    2204:	dd28      	ble.n	2258 <_Z11quantumGamehh+0x384>
    2206:	2308      	movs	r3, #8
    2208:	18fb      	adds	r3, r7, r3
    220a:	2200      	movs	r2, #0
    220c:	5e9b      	ldrsh	r3, [r3, r2]
    220e:	001a      	movs	r2, r3
    2210:	2320      	movs	r3, #32
    2212:	18fb      	adds	r3, r7, r3
    2214:	2100      	movs	r1, #0
    2216:	5e5b      	ldrsh	r3, [r3, r1]
    2218:	3350      	adds	r3, #80	; 0x50
    221a:	429a      	cmp	r2, r3
    221c:	da1c      	bge.n	2258 <_Z11quantumGamehh+0x384>
    221e:	2308      	movs	r3, #8
    2220:	18fb      	adds	r3, r7, r3
    2222:	2202      	movs	r2, #2
    2224:	5e9a      	ldrsh	r2, [r3, r2]
    2226:	2320      	movs	r3, #32
    2228:	18fb      	adds	r3, r7, r3
    222a:	2102      	movs	r1, #2
    222c:	5e5b      	ldrsh	r3, [r3, r1]
    222e:	429a      	cmp	r2, r3
    2230:	dd12      	ble.n	2258 <_Z11quantumGamehh+0x384>
    2232:	2308      	movs	r3, #8
    2234:	18fb      	adds	r3, r7, r3
    2236:	2202      	movs	r2, #2
    2238:	5e9b      	ldrsh	r3, [r3, r2]
    223a:	001a      	movs	r2, r3
    223c:	2320      	movs	r3, #32
    223e:	18fb      	adds	r3, r7, r3
    2240:	2102      	movs	r1, #2
    2242:	5e5b      	ldrsh	r3, [r3, r1]
    2244:	3350      	adds	r3, #80	; 0x50
    2246:	429a      	cmp	r2, r3
    2248:	da06      	bge.n	2258 <_Z11quantumGamehh+0x384>
					tappedSquare = recentSquares[0];
    224a:	23f7      	movs	r3, #247	; 0xf7
    224c:	18fb      	adds	r3, r7, r3
    224e:	2244      	movs	r2, #68	; 0x44
    2250:	18ba      	adds	r2, r7, r2
    2252:	7812      	ldrb	r2, [r2, #0]
    2254:	701a      	strb	r2, [r3, #0]
					break;
    2256:	e032      	b.n	22be <_Z11quantumGamehh+0x3ea>
				} else if (point.x > square1.x && point.x < square1.x + 80 && point.y > square1.y && point.y < square1.y + 80) {
    2258:	2308      	movs	r3, #8
    225a:	18fb      	adds	r3, r7, r3
    225c:	2200      	movs	r2, #0
    225e:	5e9a      	ldrsh	r2, [r3, r2]
    2260:	2318      	movs	r3, #24
    2262:	18fb      	adds	r3, r7, r3
    2264:	2100      	movs	r1, #0
    2266:	5e5b      	ldrsh	r3, [r3, r1]
    2268:	429a      	cmp	r2, r3
    226a:	ddb2      	ble.n	21d2 <_Z11quantumGamehh+0x2fe>
    226c:	2308      	movs	r3, #8
    226e:	18fb      	adds	r3, r7, r3
    2270:	2200      	movs	r2, #0
    2272:	5e9b      	ldrsh	r3, [r3, r2]
    2274:	001a      	movs	r2, r3
    2276:	2318      	movs	r3, #24
    2278:	18fb      	adds	r3, r7, r3
    227a:	2100      	movs	r1, #0
    227c:	5e5b      	ldrsh	r3, [r3, r1]
    227e:	3350      	adds	r3, #80	; 0x50
    2280:	429a      	cmp	r2, r3
    2282:	daa6      	bge.n	21d2 <_Z11quantumGamehh+0x2fe>
    2284:	2308      	movs	r3, #8
    2286:	18fb      	adds	r3, r7, r3
    2288:	2202      	movs	r2, #2
    228a:	5e9a      	ldrsh	r2, [r3, r2]
    228c:	2318      	movs	r3, #24
    228e:	18fb      	adds	r3, r7, r3
    2290:	2102      	movs	r1, #2
    2292:	5e5b      	ldrsh	r3, [r3, r1]
    2294:	429a      	cmp	r2, r3
    2296:	dd9c      	ble.n	21d2 <_Z11quantumGamehh+0x2fe>
    2298:	2308      	movs	r3, #8
    229a:	18fb      	adds	r3, r7, r3
    229c:	2202      	movs	r2, #2
    229e:	5e9b      	ldrsh	r3, [r3, r2]
    22a0:	001a      	movs	r2, r3
    22a2:	2318      	movs	r3, #24
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	2102      	movs	r1, #2
    22a8:	5e5b      	ldrsh	r3, [r3, r1]
    22aa:	3350      	adds	r3, #80	; 0x50
    22ac:	429a      	cmp	r2, r3
    22ae:	da90      	bge.n	21d2 <_Z11quantumGamehh+0x2fe>
					tappedSquare = recentSquares[1];
    22b0:	23f7      	movs	r3, #247	; 0xf7
    22b2:	18fb      	adds	r3, r7, r3
    22b4:	2244      	movs	r2, #68	; 0x44
    22b6:	18ba      	adds	r2, r7, r2
    22b8:	7852      	ldrb	r2, [r2, #1]
    22ba:	701a      	strb	r2, [r3, #0]
					break;
    22bc:	46c0      	nop			; (mov r8, r8)
				}
			}


			// Turn to classical counters
			if (tappedSquare != 255) {
    22be:	23f7      	movs	r3, #247	; 0xf7
    22c0:	18fb      	adds	r3, r7, r3
    22c2:	781b      	ldrb	r3, [r3, #0]
    22c4:	2bff      	cmp	r3, #255	; 0xff
    22c6:	d10d      	bne.n	22e4 <_Z11quantumGamehh+0x410>
    22c8:	e024      	b.n	2314 <_Z11quantumGamehh+0x440>
				if (!touchScreen.touched()) continue;
    22ca:	46c0      	nop			; (mov r8, r8)
			}
    22cc:	e781      	b.n	21d2 <_Z11quantumGamehh+0x2fe>
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	00013314 	.word	0x00013314
    22d4:	20000320 	.word	0x20000320
    22d8:	00013318 	.word	0x00013318
    22dc:	200002bc 	.word	0x200002bc
    22e0:	000007ff 	.word	0x000007ff
				drawClassicalCounters(boardState, tappedSquare, turn + 1, tappedSquare, turn + 1);
    22e4:	23fe      	movs	r3, #254	; 0xfe
    22e6:	18fb      	adds	r3, r7, r3
    22e8:	781b      	ldrb	r3, [r3, #0]
    22ea:	3301      	adds	r3, #1
    22ec:	b2dc      	uxtb	r4, r3
    22ee:	23fe      	movs	r3, #254	; 0xfe
    22f0:	18fb      	adds	r3, r7, r3
    22f2:	781b      	ldrb	r3, [r3, #0]
    22f4:	3301      	adds	r3, #1
    22f6:	b2db      	uxtb	r3, r3
    22f8:	22f7      	movs	r2, #247	; 0xf7
    22fa:	18ba      	adds	r2, r7, r2
    22fc:	7815      	ldrb	r5, [r2, #0]
    22fe:	22f7      	movs	r2, #247	; 0xf7
    2300:	18ba      	adds	r2, r7, r2
    2302:	7811      	ldrb	r1, [r2, #0]
    2304:	2250      	movs	r2, #80	; 0x50
    2306:	18b8      	adds	r0, r7, r2
    2308:	9300      	str	r3, [sp, #0]
    230a:	002b      	movs	r3, r5
    230c:	0022      	movs	r2, r4
    230e:	f7ff fbda 	bl	1ac6 <_Z21drawClassicalCountersPA11_hhhhh>
    2312:	e005      	b.n	2320 <_Z11quantumGamehh+0x44c>
			} else {
				Serial.println(F("Error"));
    2314:	4a9f      	ldr	r2, [pc, #636]	; (2594 <_Z11quantumGamehh+0x6c0>)
    2316:	4ba0      	ldr	r3, [pc, #640]	; (2598 <_Z11quantumGamehh+0x6c4>)
    2318:	0011      	movs	r1, r2
    231a:	0018      	movs	r0, r3
    231c:	f000 fef2 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
			}
		} 
		
		// winningRows[x][0] = winner
		// winningRows[x][1] = subscript total
		uint8_t winningRows[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    2320:	2330      	movs	r3, #48	; 0x30
    2322:	18fb      	adds	r3, r7, r3
    2324:	0018      	movs	r0, r3
    2326:	2306      	movs	r3, #6
    2328:	001a      	movs	r2, r3
    232a:	2100      	movs	r1, #0
    232c:	f00e fa8a 	bl	10844 <memset>
		uint8_t numOfWinningRows = 0;
    2330:	23f6      	movs	r3, #246	; 0xf6
    2332:	18fb      	adds	r3, r7, r3
    2334:	2200      	movs	r2, #0
    2336:	701a      	strb	r2, [r3, #0]
		// Check to see if someone has won
		for (uint8_t i = 0; i < 8; i++) {
    2338:	23f5      	movs	r3, #245	; 0xf5
    233a:	18fb      	adds	r3, r7, r3
    233c:	2200      	movs	r2, #0
    233e:	701a      	strb	r2, [r3, #0]
    2340:	23f5      	movs	r3, #245	; 0xf5
    2342:	18fb      	adds	r3, r7, r3
    2344:	781b      	ldrb	r3, [r3, #0]
    2346:	2b07      	cmp	r3, #7
    2348:	dd00      	ble.n	234c <_Z11quantumGamehh+0x478>
    234a:	e0b7      	b.n	24bc <_Z11quantumGamehh+0x5e8>
			if (boardState[winIndexes[i][0]][0] == boardState[winIndexes[i][1]][0]
    234c:	23f5      	movs	r3, #245	; 0xf5
    234e:	18fb      	adds	r3, r7, r3
    2350:	781a      	ldrb	r2, [r3, #0]
    2352:	4992      	ldr	r1, [pc, #584]	; (259c <_Z11quantumGamehh+0x6c8>)
    2354:	0013      	movs	r3, r2
    2356:	005b      	lsls	r3, r3, #1
    2358:	189b      	adds	r3, r3, r2
    235a:	5c5b      	ldrb	r3, [r3, r1]
    235c:	001a      	movs	r2, r3
    235e:	2350      	movs	r3, #80	; 0x50
    2360:	18f9      	adds	r1, r7, r3
    2362:	0013      	movs	r3, r2
    2364:	009b      	lsls	r3, r3, #2
    2366:	189b      	adds	r3, r3, r2
    2368:	005b      	lsls	r3, r3, #1
    236a:	189b      	adds	r3, r3, r2
    236c:	5c59      	ldrb	r1, [r3, r1]
    236e:	23f5      	movs	r3, #245	; 0xf5
    2370:	18fb      	adds	r3, r7, r3
    2372:	781a      	ldrb	r2, [r3, #0]
    2374:	4889      	ldr	r0, [pc, #548]	; (259c <_Z11quantumGamehh+0x6c8>)
    2376:	0013      	movs	r3, r2
    2378:	005b      	lsls	r3, r3, #1
    237a:	189b      	adds	r3, r3, r2
    237c:	18c3      	adds	r3, r0, r3
    237e:	3301      	adds	r3, #1
    2380:	781b      	ldrb	r3, [r3, #0]
    2382:	001a      	movs	r2, r3
    2384:	2350      	movs	r3, #80	; 0x50
    2386:	18f8      	adds	r0, r7, r3
    2388:	0013      	movs	r3, r2
    238a:	009b      	lsls	r3, r3, #2
    238c:	189b      	adds	r3, r3, r2
    238e:	005b      	lsls	r3, r3, #1
    2390:	189b      	adds	r3, r3, r2
    2392:	5c1b      	ldrb	r3, [r3, r0]
    2394:	4299      	cmp	r1, r3
    2396:	d000      	beq.n	239a <_Z11quantumGamehh+0x4c6>
    2398:	e088      	b.n	24ac <_Z11quantumGamehh+0x5d8>
			&& boardState[winIndexes[i][0]][0] == boardState[winIndexes[i][2]][0]
    239a:	23f5      	movs	r3, #245	; 0xf5
    239c:	18fb      	adds	r3, r7, r3
    239e:	781a      	ldrb	r2, [r3, #0]
    23a0:	497e      	ldr	r1, [pc, #504]	; (259c <_Z11quantumGamehh+0x6c8>)
    23a2:	0013      	movs	r3, r2
    23a4:	005b      	lsls	r3, r3, #1
    23a6:	189b      	adds	r3, r3, r2
    23a8:	5c5b      	ldrb	r3, [r3, r1]
    23aa:	001a      	movs	r2, r3
    23ac:	2350      	movs	r3, #80	; 0x50
    23ae:	18f9      	adds	r1, r7, r3
    23b0:	0013      	movs	r3, r2
    23b2:	009b      	lsls	r3, r3, #2
    23b4:	189b      	adds	r3, r3, r2
    23b6:	005b      	lsls	r3, r3, #1
    23b8:	189b      	adds	r3, r3, r2
    23ba:	5c59      	ldrb	r1, [r3, r1]
    23bc:	23f5      	movs	r3, #245	; 0xf5
    23be:	18fb      	adds	r3, r7, r3
    23c0:	781a      	ldrb	r2, [r3, #0]
    23c2:	4876      	ldr	r0, [pc, #472]	; (259c <_Z11quantumGamehh+0x6c8>)
    23c4:	0013      	movs	r3, r2
    23c6:	005b      	lsls	r3, r3, #1
    23c8:	189b      	adds	r3, r3, r2
    23ca:	18c3      	adds	r3, r0, r3
    23cc:	3302      	adds	r3, #2
    23ce:	781b      	ldrb	r3, [r3, #0]
    23d0:	001a      	movs	r2, r3
    23d2:	2350      	movs	r3, #80	; 0x50
    23d4:	18f8      	adds	r0, r7, r3
    23d6:	0013      	movs	r3, r2
    23d8:	009b      	lsls	r3, r3, #2
    23da:	189b      	adds	r3, r3, r2
    23dc:	005b      	lsls	r3, r3, #1
    23de:	189b      	adds	r3, r3, r2
    23e0:	5c1b      	ldrb	r3, [r3, r0]
    23e2:	4299      	cmp	r1, r3
    23e4:	d162      	bne.n	24ac <_Z11quantumGamehh+0x5d8>
			&& boardState[winIndexes[i][0]][0] != 0) {
    23e6:	23f5      	movs	r3, #245	; 0xf5
    23e8:	18fb      	adds	r3, r7, r3
    23ea:	781a      	ldrb	r2, [r3, #0]
    23ec:	496b      	ldr	r1, [pc, #428]	; (259c <_Z11quantumGamehh+0x6c8>)
    23ee:	0013      	movs	r3, r2
    23f0:	005b      	lsls	r3, r3, #1
    23f2:	189b      	adds	r3, r3, r2
    23f4:	5c5b      	ldrb	r3, [r3, r1]
    23f6:	001a      	movs	r2, r3
    23f8:	2350      	movs	r3, #80	; 0x50
    23fa:	18f9      	adds	r1, r7, r3
    23fc:	0013      	movs	r3, r2
    23fe:	009b      	lsls	r3, r3, #2
    2400:	189b      	adds	r3, r3, r2
    2402:	005b      	lsls	r3, r3, #1
    2404:	189b      	adds	r3, r3, r2
    2406:	5c5b      	ldrb	r3, [r3, r1]
    2408:	2b00      	cmp	r3, #0
    240a:	d04f      	beq.n	24ac <_Z11quantumGamehh+0x5d8>
				// Someone has won
				
				// Add the player that won to winningRows
				winningRows[numOfWinningRows][0] = player;
    240c:	23f6      	movs	r3, #246	; 0xf6
    240e:	18fb      	adds	r3, r7, r3
    2410:	781a      	ldrb	r2, [r3, #0]
    2412:	2330      	movs	r3, #48	; 0x30
    2414:	18fb      	adds	r3, r7, r3
    2416:	0052      	lsls	r2, r2, #1
    2418:	21ff      	movs	r1, #255	; 0xff
    241a:	1879      	adds	r1, r7, r1
    241c:	7809      	ldrb	r1, [r1, #0]
    241e:	54d1      	strb	r1, [r2, r3]
				
				// Total the subscripts and store in winningRows
				uint8_t subscriptTotal = 0;
    2420:	23f4      	movs	r3, #244	; 0xf4
    2422:	18fb      	adds	r3, r7, r3
    2424:	2200      	movs	r2, #0
    2426:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = 0; j < 3; j++) {
    2428:	23f3      	movs	r3, #243	; 0xf3
    242a:	18fb      	adds	r3, r7, r3
    242c:	2200      	movs	r2, #0
    242e:	701a      	strb	r2, [r3, #0]
    2430:	23f3      	movs	r3, #243	; 0xf3
    2432:	18fb      	adds	r3, r7, r3
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	2b02      	cmp	r3, #2
    2438:	dc25      	bgt.n	2486 <_Z11quantumGamehh+0x5b2>
					subscriptTotal += boardState[winIndexes[i][j]][1];
    243a:	23f5      	movs	r3, #245	; 0xf5
    243c:	18fb      	adds	r3, r7, r3
    243e:	781a      	ldrb	r2, [r3, #0]
    2440:	23f3      	movs	r3, #243	; 0xf3
    2442:	18fb      	adds	r3, r7, r3
    2444:	7819      	ldrb	r1, [r3, #0]
    2446:	4855      	ldr	r0, [pc, #340]	; (259c <_Z11quantumGamehh+0x6c8>)
    2448:	0013      	movs	r3, r2
    244a:	005b      	lsls	r3, r3, #1
    244c:	189b      	adds	r3, r3, r2
    244e:	18c3      	adds	r3, r0, r3
    2450:	5c5b      	ldrb	r3, [r3, r1]
    2452:	001a      	movs	r2, r3
    2454:	2350      	movs	r3, #80	; 0x50
    2456:	18f9      	adds	r1, r7, r3
    2458:	0013      	movs	r3, r2
    245a:	009b      	lsls	r3, r3, #2
    245c:	189b      	adds	r3, r3, r2
    245e:	005b      	lsls	r3, r3, #1
    2460:	189b      	adds	r3, r3, r2
    2462:	18cb      	adds	r3, r1, r3
    2464:	3301      	adds	r3, #1
    2466:	7819      	ldrb	r1, [r3, #0]
    2468:	23f4      	movs	r3, #244	; 0xf4
    246a:	18fb      	adds	r3, r7, r3
    246c:	22f4      	movs	r2, #244	; 0xf4
    246e:	18ba      	adds	r2, r7, r2
    2470:	7812      	ldrb	r2, [r2, #0]
    2472:	188a      	adds	r2, r1, r2
    2474:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = 0; j < 3; j++) {
    2476:	23f3      	movs	r3, #243	; 0xf3
    2478:	18fb      	adds	r3, r7, r3
    247a:	781a      	ldrb	r2, [r3, #0]
    247c:	23f3      	movs	r3, #243	; 0xf3
    247e:	18fb      	adds	r3, r7, r3
    2480:	3201      	adds	r2, #1
    2482:	701a      	strb	r2, [r3, #0]
    2484:	e7d4      	b.n	2430 <_Z11quantumGamehh+0x55c>
				}
				winningRows[numOfWinningRows][1] = subscriptTotal;
    2486:	23f6      	movs	r3, #246	; 0xf6
    2488:	18fb      	adds	r3, r7, r3
    248a:	781b      	ldrb	r3, [r3, #0]
    248c:	2230      	movs	r2, #48	; 0x30
    248e:	18ba      	adds	r2, r7, r2
    2490:	005b      	lsls	r3, r3, #1
    2492:	18d3      	adds	r3, r2, r3
    2494:	3301      	adds	r3, #1
    2496:	22f4      	movs	r2, #244	; 0xf4
    2498:	18ba      	adds	r2, r7, r2
    249a:	7812      	ldrb	r2, [r2, #0]
    249c:	701a      	strb	r2, [r3, #0]
				numOfWinningRows++;
    249e:	23f6      	movs	r3, #246	; 0xf6
    24a0:	18fb      	adds	r3, r7, r3
    24a2:	781a      	ldrb	r2, [r3, #0]
    24a4:	23f6      	movs	r3, #246	; 0xf6
    24a6:	18fb      	adds	r3, r7, r3
    24a8:	3201      	adds	r2, #1
    24aa:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++) {
    24ac:	23f5      	movs	r3, #245	; 0xf5
    24ae:	18fb      	adds	r3, r7, r3
    24b0:	781a      	ldrb	r2, [r3, #0]
    24b2:	23f5      	movs	r3, #245	; 0xf5
    24b4:	18fb      	adds	r3, r7, r3
    24b6:	3201      	adds	r2, #1
    24b8:	701a      	strb	r2, [r3, #0]
    24ba:	e741      	b.n	2340 <_Z11quantumGamehh+0x46c>
			}
		}
		
		// Find the winner if one exists
		uint8_t highestSubscript = 0;
    24bc:	23f2      	movs	r3, #242	; 0xf2
    24be:	18fb      	adds	r3, r7, r3
    24c0:	2200      	movs	r2, #0
    24c2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 3; i++) {
    24c4:	23f1      	movs	r3, #241	; 0xf1
    24c6:	18fb      	adds	r3, r7, r3
    24c8:	2200      	movs	r2, #0
    24ca:	701a      	strb	r2, [r3, #0]
    24cc:	23f1      	movs	r3, #241	; 0xf1
    24ce:	18fb      	adds	r3, r7, r3
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	2b02      	cmp	r3, #2
    24d4:	dc2c      	bgt.n	2530 <_Z11quantumGamehh+0x65c>
			if (winningRows[i][1] > highestSubscript) {
    24d6:	23f1      	movs	r3, #241	; 0xf1
    24d8:	18fb      	adds	r3, r7, r3
    24da:	781b      	ldrb	r3, [r3, #0]
    24dc:	2230      	movs	r2, #48	; 0x30
    24de:	18ba      	adds	r2, r7, r2
    24e0:	005b      	lsls	r3, r3, #1
    24e2:	18d3      	adds	r3, r2, r3
    24e4:	3301      	adds	r3, #1
    24e6:	781b      	ldrb	r3, [r3, #0]
    24e8:	001a      	movs	r2, r3
    24ea:	23f2      	movs	r3, #242	; 0xf2
    24ec:	18fb      	adds	r3, r7, r3
    24ee:	781b      	ldrb	r3, [r3, #0]
    24f0:	429a      	cmp	r2, r3
    24f2:	dd15      	ble.n	2520 <_Z11quantumGamehh+0x64c>
				winner = winningRows[i][0];
    24f4:	23f1      	movs	r3, #241	; 0xf1
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	7819      	ldrb	r1, [r3, #0]
    24fa:	23fd      	movs	r3, #253	; 0xfd
    24fc:	18fb      	adds	r3, r7, r3
    24fe:	2230      	movs	r2, #48	; 0x30
    2500:	18ba      	adds	r2, r7, r2
    2502:	0049      	lsls	r1, r1, #1
    2504:	5c8a      	ldrb	r2, [r1, r2]
    2506:	701a      	strb	r2, [r3, #0]
				highestSubscript = winningRows[i][1];
    2508:	23f1      	movs	r3, #241	; 0xf1
    250a:	18fb      	adds	r3, r7, r3
    250c:	781a      	ldrb	r2, [r3, #0]
    250e:	23f2      	movs	r3, #242	; 0xf2
    2510:	18fb      	adds	r3, r7, r3
    2512:	2130      	movs	r1, #48	; 0x30
    2514:	1879      	adds	r1, r7, r1
    2516:	0052      	lsls	r2, r2, #1
    2518:	188a      	adds	r2, r1, r2
    251a:	3201      	adds	r2, #1
    251c:	7812      	ldrb	r2, [r2, #0]
    251e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 3; i++) {
    2520:	23f1      	movs	r3, #241	; 0xf1
    2522:	18fb      	adds	r3, r7, r3
    2524:	781a      	ldrb	r2, [r3, #0]
    2526:	23f1      	movs	r3, #241	; 0xf1
    2528:	18fb      	adds	r3, r7, r3
    252a:	3201      	adds	r2, #1
    252c:	701a      	strb	r2, [r3, #0]
    252e:	e7cd      	b.n	24cc <_Z11quantumGamehh+0x5f8>
			}
		}
		
		Serial.print(F("winner = "));
    2530:	4a1b      	ldr	r2, [pc, #108]	; (25a0 <_Z11quantumGamehh+0x6cc>)
    2532:	4b19      	ldr	r3, [pc, #100]	; (2598 <_Z11quantumGamehh+0x6c4>)
    2534:	0011      	movs	r1, r2
    2536:	0018      	movs	r0, r3
    2538:	f000 fd29 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(winner);
    253c:	23fd      	movs	r3, #253	; 0xfd
    253e:	18fb      	adds	r3, r7, r3
    2540:	7819      	ldrb	r1, [r3, #0]
    2542:	4b15      	ldr	r3, [pc, #84]	; (2598 <_Z11quantumGamehh+0x6c4>)
    2544:	220a      	movs	r2, #10
    2546:	0018      	movs	r0, r3
    2548:	f000 fe3f 	bl	31ca <_ZN5Print7printlnEhi>
		if (winner != 0) break;
    254c:	23fd      	movs	r3, #253	; 0xfd
    254e:	18fb      	adds	r3, r7, r3
    2550:	781b      	ldrb	r3, [r3, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d115      	bne.n	2582 <_Z11quantumGamehh+0x6ae>
		
		// TODO: Test removing this delay
		
		turn++;
    2556:	23fe      	movs	r3, #254	; 0xfe
    2558:	18fb      	adds	r3, r7, r3
    255a:	781a      	ldrb	r2, [r3, #0]
    255c:	23fe      	movs	r3, #254	; 0xfe
    255e:	18fb      	adds	r3, r7, r3
    2560:	3201      	adds	r2, #1
    2562:	701a      	strb	r2, [r3, #0]
		(player == 1) ? player = 2 : player = 1;
    2564:	23ff      	movs	r3, #255	; 0xff
    2566:	18fb      	adds	r3, r7, r3
    2568:	781b      	ldrb	r3, [r3, #0]
    256a:	2b01      	cmp	r3, #1
    256c:	d104      	bne.n	2578 <_Z11quantumGamehh+0x6a4>
    256e:	23ff      	movs	r3, #255	; 0xff
    2570:	18fb      	adds	r3, r7, r3
    2572:	2202      	movs	r2, #2
    2574:	701a      	strb	r2, [r3, #0]
    2576:	e4dc      	b.n	1f32 <_Z11quantumGamehh+0x5e>
    2578:	23ff      	movs	r3, #255	; 0xff
    257a:	18fb      	adds	r3, r7, r3
    257c:	2201      	movs	r2, #1
    257e:	701a      	strb	r2, [r3, #0]
	while (bigCounters < 9) {
    2580:	e4d7      	b.n	1f32 <_Z11quantumGamehh+0x5e>
		if (winner != 0) break;
    2582:	46c0      	nop			; (mov r8, r8)
	}
	return winner;
    2584:	23fd      	movs	r3, #253	; 0xfd
    2586:	18fb      	adds	r3, r7, r3
    2588:	781b      	ldrb	r3, [r3, #0]
}
    258a:	0018      	movs	r0, r3
    258c:	46bd      	mov	sp, r7
    258e:	b040      	add	sp, #256	; 0x100
    2590:	bdb0      	pop	{r4, r5, r7, pc}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	0001330c 	.word	0x0001330c
    2598:	20000e94 	.word	0x20000e94
    259c:	20000004 	.word	0x20000004
    25a0:	00013300 	.word	0x00013300

000025a4 <_Z9playMatchi>:

void playMatch(int maxGames) {
    25a4:	b590      	push	{r4, r7, lr}
    25a6:	b089      	sub	sp, #36	; 0x24
    25a8:	af00      	add	r7, sp, #0
    25aa:	6078      	str	r0, [r7, #4]
	uint8_t noughtsScore = 0;
    25ac:	231f      	movs	r3, #31
    25ae:	18fb      	adds	r3, r7, r3
    25b0:	2200      	movs	r2, #0
    25b2:	701a      	strb	r2, [r3, #0]
	uint8_t crossesScore = 0;
    25b4:	231e      	movs	r3, #30
    25b6:	18fb      	adds	r3, r7, r3
    25b8:	2200      	movs	r2, #0
    25ba:	701a      	strb	r2, [r3, #0]
	uint8_t gamesPlayed = 0;
    25bc:	231d      	movs	r3, #29
    25be:	18fb      	adds	r3, r7, r3
    25c0:	2200      	movs	r2, #0
    25c2:	701a      	strb	r2, [r3, #0]

	// Draw score bar for match
	drawBitmap('a', 0, 0);
    25c4:	2200      	movs	r2, #0
    25c6:	2100      	movs	r1, #0
    25c8:	2061      	movs	r0, #97	; 0x61
    25ca:	f7fd fe4b 	bl	264 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
    25ce:	2220      	movs	r2, #32
    25d0:	2176      	movs	r1, #118	; 0x76
    25d2:	2063      	movs	r0, #99	; 0x63
    25d4:	f7fd fe46 	bl	264 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
    25d8:	231f      	movs	r3, #31
    25da:	18fb      	adds	r3, r7, r3
    25dc:	781a      	ldrb	r2, [r3, #0]
    25de:	231e      	movs	r3, #30
    25e0:	18fb      	adds	r3, r7, r3
    25e2:	781b      	ldrb	r3, [r3, #0]
    25e4:	0019      	movs	r1, r3
    25e6:	0010      	movs	r0, r2
    25e8:	f7fe ff64 	bl	14b4 <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
    25ec:	220a      	movs	r2, #10
    25ee:	2151      	movs	r1, #81	; 0x51
    25f0:	2062      	movs	r0, #98	; 0x62
    25f2:	f7fd fe37 	bl	264 <_Z10drawBitmapcss>

	while (gamesPlayed < maxGames) {
    25f6:	231d      	movs	r3, #29
    25f8:	18fb      	adds	r3, r7, r3
    25fa:	781a      	ldrb	r2, [r3, #0]
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	429a      	cmp	r2, r3
    2600:	db00      	blt.n	2604 <_Z9playMatchi+0x60>
    2602:	e0e6      	b.n	27d2 <_Z9playMatchi+0x22e>
		State winner = game(noughtsScore, crossesScore);
    2604:	231b      	movs	r3, #27
    2606:	18fc      	adds	r4, r7, r3
    2608:	231e      	movs	r3, #30
    260a:	18fb      	adds	r3, r7, r3
    260c:	781a      	ldrb	r2, [r3, #0]
    260e:	231f      	movs	r3, #31
    2610:	18fb      	adds	r3, r7, r3
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	0011      	movs	r1, r2
    2616:	0018      	movs	r0, r3
    2618:	f7ff fb3e 	bl	1c98 <_Z4gamehh>
    261c:	0003      	movs	r3, r0
    261e:	7023      	strb	r3, [r4, #0]

		// Select win banner and add to winners score
		char bitmap;
		switch (winner) {
    2620:	231b      	movs	r3, #27
    2622:	18fb      	adds	r3, r7, r3
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	2b01      	cmp	r3, #1
    2628:	d017      	beq.n	265a <_Z9playMatchi+0xb6>
    262a:	2b02      	cmp	r3, #2
    262c:	d002      	beq.n	2634 <_Z9playMatchi+0x90>
    262e:	2b00      	cmp	r3, #0
    2630:	d026      	beq.n	2680 <_Z9playMatchi+0xdc>
    2632:	e02a      	b.n	268a <_Z9playMatchi+0xe6>
			case cross:
			// Crosses wins
			bitmap = 'e';
    2634:	231c      	movs	r3, #28
    2636:	18fb      	adds	r3, r7, r3
    2638:	2265      	movs	r2, #101	; 0x65
    263a:	701a      	strb	r2, [r3, #0]
			crossesScore++;
    263c:	231e      	movs	r3, #30
    263e:	18fb      	adds	r3, r7, r3
    2640:	781a      	ldrb	r2, [r3, #0]
    2642:	231e      	movs	r3, #30
    2644:	18fb      	adds	r3, r7, r3
    2646:	3201      	adds	r2, #1
    2648:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    264a:	231d      	movs	r3, #29
    264c:	18fb      	adds	r3, r7, r3
    264e:	781a      	ldrb	r2, [r3, #0]
    2650:	231d      	movs	r3, #29
    2652:	18fb      	adds	r3, r7, r3
    2654:	3201      	adds	r2, #1
    2656:	701a      	strb	r2, [r3, #0]
			break;
    2658:	e017      	b.n	268a <_Z9playMatchi+0xe6>
			case nought:
			// Noughts wins
			bitmap = 'g';
    265a:	231c      	movs	r3, #28
    265c:	18fb      	adds	r3, r7, r3
    265e:	2267      	movs	r2, #103	; 0x67
    2660:	701a      	strb	r2, [r3, #0]
			noughtsScore++;
    2662:	231f      	movs	r3, #31
    2664:	18fb      	adds	r3, r7, r3
    2666:	781a      	ldrb	r2, [r3, #0]
    2668:	231f      	movs	r3, #31
    266a:	18fb      	adds	r3, r7, r3
    266c:	3201      	adds	r2, #1
    266e:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    2670:	231d      	movs	r3, #29
    2672:	18fb      	adds	r3, r7, r3
    2674:	781a      	ldrb	r2, [r3, #0]
    2676:	231d      	movs	r3, #29
    2678:	18fb      	adds	r3, r7, r3
    267a:	3201      	adds	r2, #1
    267c:	701a      	strb	r2, [r3, #0]
			break;
    267e:	e004      	b.n	268a <_Z9playMatchi+0xe6>
			case empty:
			// Game is a draw
			bitmap = 'f';
    2680:	231c      	movs	r3, #28
    2682:	18fb      	adds	r3, r7, r3
    2684:	2266      	movs	r2, #102	; 0x66
    2686:	701a      	strb	r2, [r3, #0]
			break;
    2688:	46c0      	nop			; (mov r8, r8)
		}
		
		updateScore(noughtsScore, crossesScore);
    268a:	231f      	movs	r3, #31
    268c:	18fb      	adds	r3, r7, r3
    268e:	781a      	ldrb	r2, [r3, #0]
    2690:	231e      	movs	r3, #30
    2692:	18fb      	adds	r3, r7, r3
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	0019      	movs	r1, r3
    2698:	0010      	movs	r0, r2
    269a:	f7fe ff0b 	bl	14b4 <_Z11updateScoreii>
		
		// If there are still games to be played draw win banner,
		// otherwise draw end game screen
		uint8_t gamesToWin = (maxGames / 2) + 1;
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	2b00      	cmp	r3, #0
    26a2:	da00      	bge.n	26a6 <_Z9playMatchi+0x102>
    26a4:	3301      	adds	r3, #1
    26a6:	105b      	asrs	r3, r3, #1
    26a8:	b2da      	uxtb	r2, r3
    26aa:	231a      	movs	r3, #26
    26ac:	18fb      	adds	r3, r7, r3
    26ae:	3201      	adds	r2, #1
    26b0:	701a      	strb	r2, [r3, #0]
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    26b2:	231f      	movs	r3, #31
    26b4:	18fb      	adds	r3, r7, r3
    26b6:	781a      	ldrb	r2, [r3, #0]
    26b8:	231a      	movs	r3, #26
    26ba:	18fb      	adds	r3, r7, r3
    26bc:	781b      	ldrb	r3, [r3, #0]
    26be:	429a      	cmp	r2, r3
    26c0:	da1c      	bge.n	26fc <_Z9playMatchi+0x158>
    26c2:	231e      	movs	r3, #30
    26c4:	18fb      	adds	r3, r7, r3
    26c6:	781a      	ldrb	r2, [r3, #0]
    26c8:	231a      	movs	r3, #26
    26ca:	18fb      	adds	r3, r7, r3
    26cc:	781b      	ldrb	r3, [r3, #0]
    26ce:	429a      	cmp	r2, r3
    26d0:	da14      	bge.n	26fc <_Z9playMatchi+0x158>
			drawBitmap(bitmap, 0, 110);
    26d2:	231c      	movs	r3, #28
    26d4:	18fb      	adds	r3, r7, r3
    26d6:	781b      	ldrb	r3, [r3, #0]
    26d8:	226e      	movs	r2, #110	; 0x6e
    26da:	2100      	movs	r1, #0
    26dc:	0018      	movs	r0, r3
    26de:	f7fd fdc1 	bl	264 <_Z10drawBitmapcss>
			while (true) if (touchScreen.touched()) break;
    26e2:	4b41      	ldr	r3, [pc, #260]	; (27e8 <_Z9playMatchi+0x244>)
    26e4:	0018      	movs	r0, r3
    26e6:	f004 fdd3 	bl	7290 <_ZN15Adafruit_FT62067touchedEv>
    26ea:	0003      	movs	r3, r0
    26ec:	1e5a      	subs	r2, r3, #1
    26ee:	4193      	sbcs	r3, r2
    26f0:	b2db      	uxtb	r3, r3
    26f2:	2b00      	cmp	r3, #0
    26f4:	d100      	bne.n	26f8 <_Z9playMatchi+0x154>
    26f6:	e7f4      	b.n	26e2 <_Z9playMatchi+0x13e>
    26f8:	46c0      	nop			; (mov r8, r8)
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    26fa:	e068      	b.n	27ce <_Z9playMatchi+0x22a>
			} else {
			if (crossesScore > noughtsScore) {
    26fc:	231e      	movs	r3, #30
    26fe:	18fb      	adds	r3, r7, r3
    2700:	781a      	ldrb	r2, [r3, #0]
    2702:	231f      	movs	r3, #31
    2704:	18fb      	adds	r3, r7, r3
    2706:	781b      	ldrb	r3, [r3, #0]
    2708:	429a      	cmp	r2, r3
    270a:	dd30      	ble.n	276e <_Z9playMatchi+0x1ca>
				// Draw game-over, crosses wins
				drawBitmap('m', 0, 0);
    270c:	2200      	movs	r2, #0
    270e:	2100      	movs	r1, #0
    2710:	206d      	movs	r0, #109	; 0x6d
    2712:	f7fd fda7 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2716:	4b34      	ldr	r3, [pc, #208]	; (27e8 <_Z9playMatchi+0x244>)
    2718:	0018      	movs	r0, r3
    271a:	f004 fdb9 	bl	7290 <_ZN15Adafruit_FT62067touchedEv>
    271e:	0003      	movs	r3, r0
    2720:	1e5a      	subs	r2, r3, #1
    2722:	4193      	sbcs	r3, r2
    2724:	b2db      	uxtb	r3, r3
    2726:	2b00      	cmp	r3, #0
    2728:	d01f      	beq.n	276a <_Z9playMatchi+0x1c6>
						TS_Point point = getPoint();
    272a:	2314      	movs	r3, #20
    272c:	18fb      	adds	r3, r7, r3
    272e:	0018      	movs	r0, r3
    2730:	f7fe fe0c 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    2734:	2314      	movs	r3, #20
    2736:	18fb      	adds	r3, r7, r3
    2738:	2200      	movs	r2, #0
    273a:	5e9b      	ldrsh	r3, [r3, r2]
    273c:	2b16      	cmp	r3, #22
    273e:	ddea      	ble.n	2716 <_Z9playMatchi+0x172>
    2740:	2314      	movs	r3, #20
    2742:	18fb      	adds	r3, r7, r3
    2744:	2200      	movs	r2, #0
    2746:	5e9b      	ldrsh	r3, [r3, r2]
    2748:	2bd7      	cmp	r3, #215	; 0xd7
    274a:	dce4      	bgt.n	2716 <_Z9playMatchi+0x172>
    274c:	2314      	movs	r3, #20
    274e:	18fb      	adds	r3, r7, r3
    2750:	2202      	movs	r2, #2
    2752:	5e9b      	ldrsh	r3, [r3, r2]
    2754:	2bb9      	cmp	r3, #185	; 0xb9
    2756:	ddde      	ble.n	2716 <_Z9playMatchi+0x172>
    2758:	2314      	movs	r3, #20
    275a:	18fb      	adds	r3, r7, r3
    275c:	2202      	movs	r2, #2
    275e:	5e9a      	ldrsh	r2, [r3, r2]
    2760:	2384      	movs	r3, #132	; 0x84
    2762:	005b      	lsls	r3, r3, #1
    2764:	429a      	cmp	r2, r3
    2766:	dd33      	ble.n	27d0 <_Z9playMatchi+0x22c>
    2768:	e7d5      	b.n	2716 <_Z9playMatchi+0x172>
							// They pressed the start button
							goto exit;
						}
						} else {
						continue;
    276a:	46c0      	nop			; (mov r8, r8)
					}
				}
    276c:	e7d3      	b.n	2716 <_Z9playMatchi+0x172>
				} else {
				// Draw game-over, noughts wins
				drawBitmap('n', 0, 0);
    276e:	2200      	movs	r2, #0
    2770:	2100      	movs	r1, #0
    2772:	206e      	movs	r0, #110	; 0x6e
    2774:	f7fd fd76 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2778:	4b1b      	ldr	r3, [pc, #108]	; (27e8 <_Z9playMatchi+0x244>)
    277a:	0018      	movs	r0, r3
    277c:	f004 fd88 	bl	7290 <_ZN15Adafruit_FT62067touchedEv>
    2780:	0003      	movs	r3, r0
    2782:	1e5a      	subs	r2, r3, #1
    2784:	4193      	sbcs	r3, r2
    2786:	b2db      	uxtb	r3, r3
    2788:	2b00      	cmp	r3, #0
    278a:	d0f5      	beq.n	2778 <_Z9playMatchi+0x1d4>
						TS_Point point = getPoint();
    278c:	230c      	movs	r3, #12
    278e:	18fb      	adds	r3, r7, r3
    2790:	0018      	movs	r0, r3
    2792:	f7fe fddb 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    2796:	230c      	movs	r3, #12
    2798:	18fb      	adds	r3, r7, r3
    279a:	2200      	movs	r2, #0
    279c:	5e9b      	ldrsh	r3, [r3, r2]
    279e:	2b16      	cmp	r3, #22
    27a0:	dd13      	ble.n	27ca <_Z9playMatchi+0x226>
    27a2:	230c      	movs	r3, #12
    27a4:	18fb      	adds	r3, r7, r3
    27a6:	2200      	movs	r2, #0
    27a8:	5e9b      	ldrsh	r3, [r3, r2]
    27aa:	2bd7      	cmp	r3, #215	; 0xd7
    27ac:	dc0d      	bgt.n	27ca <_Z9playMatchi+0x226>
    27ae:	230c      	movs	r3, #12
    27b0:	18fb      	adds	r3, r7, r3
    27b2:	2202      	movs	r2, #2
    27b4:	5e9b      	ldrsh	r3, [r3, r2]
    27b6:	2bb9      	cmp	r3, #185	; 0xb9
    27b8:	dd07      	ble.n	27ca <_Z9playMatchi+0x226>
    27ba:	230c      	movs	r3, #12
    27bc:	18fb      	adds	r3, r7, r3
    27be:	2202      	movs	r2, #2
    27c0:	5e9a      	ldrsh	r2, [r3, r2]
    27c2:	2384      	movs	r3, #132	; 0x84
    27c4:	005b      	lsls	r3, r3, #1
    27c6:	429a      	cmp	r2, r3
    27c8:	dd03      	ble.n	27d2 <_Z9playMatchi+0x22e>
							// They pressed the start button
							goto exit;
							} else {
							continue;
    27ca:	46c0      	nop			; (mov r8, r8)
						}
					}
				}
    27cc:	e7d4      	b.n	2778 <_Z9playMatchi+0x1d4>
	while (gamesPlayed < maxGames) {
    27ce:	e712      	b.n	25f6 <_Z9playMatchi+0x52>
							goto exit;
    27d0:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	exit:
	Serial.println("Broke while loop");
    27d2:	4a06      	ldr	r2, [pc, #24]	; (27ec <_Z9playMatchi+0x248>)
    27d4:	4b06      	ldr	r3, [pc, #24]	; (27f0 <_Z9playMatchi+0x24c>)
    27d6:	0011      	movs	r1, r2
    27d8:	0018      	movs	r0, r3
    27da:	f000 fcbf 	bl	315c <_ZN5Print7printlnEPKc>
}
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	46bd      	mov	sp, r7
    27e2:	b009      	add	sp, #36	; 0x24
    27e4:	bd90      	pop	{r4, r7, pc}
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	20000320 	.word	0x20000320
    27ec:	00013324 	.word	0x00013324
    27f0:	20000e94 	.word	0x20000e94

000027f4 <_Z16playQuantumMatchi>:

void playQuantumMatch(int maxGames) {
    27f4:	b590      	push	{r4, r7, lr}
    27f6:	b089      	sub	sp, #36	; 0x24
    27f8:	af00      	add	r7, sp, #0
    27fa:	6078      	str	r0, [r7, #4]
	uint8_t noughtsScore = 0;
    27fc:	231f      	movs	r3, #31
    27fe:	18fb      	adds	r3, r7, r3
    2800:	2200      	movs	r2, #0
    2802:	701a      	strb	r2, [r3, #0]
	uint8_t crossesScore = 0;
    2804:	231e      	movs	r3, #30
    2806:	18fb      	adds	r3, r7, r3
    2808:	2200      	movs	r2, #0
    280a:	701a      	strb	r2, [r3, #0]
	uint8_t gamesPlayed = 0;
    280c:	231d      	movs	r3, #29
    280e:	18fb      	adds	r3, r7, r3
    2810:	2200      	movs	r2, #0
    2812:	701a      	strb	r2, [r3, #0]

	// Draw score bar for match
	drawBitmap('a', 0, 0);
    2814:	2200      	movs	r2, #0
    2816:	2100      	movs	r1, #0
    2818:	2061      	movs	r0, #97	; 0x61
    281a:	f7fd fd23 	bl	264 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
    281e:	2220      	movs	r2, #32
    2820:	2176      	movs	r1, #118	; 0x76
    2822:	2063      	movs	r0, #99	; 0x63
    2824:	f7fd fd1e 	bl	264 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
    2828:	231f      	movs	r3, #31
    282a:	18fb      	adds	r3, r7, r3
    282c:	781a      	ldrb	r2, [r3, #0]
    282e:	231e      	movs	r3, #30
    2830:	18fb      	adds	r3, r7, r3
    2832:	781b      	ldrb	r3, [r3, #0]
    2834:	0019      	movs	r1, r3
    2836:	0010      	movs	r0, r2
    2838:	f7fe fe3c 	bl	14b4 <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
    283c:	220a      	movs	r2, #10
    283e:	2151      	movs	r1, #81	; 0x51
    2840:	2062      	movs	r0, #98	; 0x62
    2842:	f7fd fd0f 	bl	264 <_Z10drawBitmapcss>

	while (gamesPlayed < maxGames) {
    2846:	231d      	movs	r3, #29
    2848:	18fb      	adds	r3, r7, r3
    284a:	781a      	ldrb	r2, [r3, #0]
    284c:	687b      	ldr	r3, [r7, #4]
    284e:	429a      	cmp	r2, r3
    2850:	db00      	blt.n	2854 <_Z16playQuantumMatchi+0x60>
    2852:	e0e6      	b.n	2a22 <_Z16playQuantumMatchi+0x22e>
		uint8_t winner = quantumGame(noughtsScore, crossesScore);
    2854:	231b      	movs	r3, #27
    2856:	18fc      	adds	r4, r7, r3
    2858:	231e      	movs	r3, #30
    285a:	18fb      	adds	r3, r7, r3
    285c:	781a      	ldrb	r2, [r3, #0]
    285e:	231f      	movs	r3, #31
    2860:	18fb      	adds	r3, r7, r3
    2862:	781b      	ldrb	r3, [r3, #0]
    2864:	0011      	movs	r1, r2
    2866:	0018      	movs	r0, r3
    2868:	f7ff fb34 	bl	1ed4 <_Z11quantumGamehh>
    286c:	0003      	movs	r3, r0
    286e:	7023      	strb	r3, [r4, #0]

		// Select win banner and add to winners score
		char bitmap;
		switch (winner) {
    2870:	231b      	movs	r3, #27
    2872:	18fb      	adds	r3, r7, r3
    2874:	781b      	ldrb	r3, [r3, #0]
    2876:	2b01      	cmp	r3, #1
    2878:	d004      	beq.n	2884 <_Z16playQuantumMatchi+0x90>
    287a:	2b02      	cmp	r3, #2
    287c:	d015      	beq.n	28aa <_Z16playQuantumMatchi+0xb6>
    287e:	2b00      	cmp	r3, #0
    2880:	d026      	beq.n	28d0 <_Z16playQuantumMatchi+0xdc>
    2882:	e02a      	b.n	28da <_Z16playQuantumMatchi+0xe6>
			case 1:
			// Crosses wins
			bitmap = 'e';
    2884:	231c      	movs	r3, #28
    2886:	18fb      	adds	r3, r7, r3
    2888:	2265      	movs	r2, #101	; 0x65
    288a:	701a      	strb	r2, [r3, #0]
			crossesScore++;
    288c:	231e      	movs	r3, #30
    288e:	18fb      	adds	r3, r7, r3
    2890:	781a      	ldrb	r2, [r3, #0]
    2892:	231e      	movs	r3, #30
    2894:	18fb      	adds	r3, r7, r3
    2896:	3201      	adds	r2, #1
    2898:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    289a:	231d      	movs	r3, #29
    289c:	18fb      	adds	r3, r7, r3
    289e:	781a      	ldrb	r2, [r3, #0]
    28a0:	231d      	movs	r3, #29
    28a2:	18fb      	adds	r3, r7, r3
    28a4:	3201      	adds	r2, #1
    28a6:	701a      	strb	r2, [r3, #0]
			break;
    28a8:	e017      	b.n	28da <_Z16playQuantumMatchi+0xe6>
			case 2:
			// Noughts wins
			bitmap = 'g';
    28aa:	231c      	movs	r3, #28
    28ac:	18fb      	adds	r3, r7, r3
    28ae:	2267      	movs	r2, #103	; 0x67
    28b0:	701a      	strb	r2, [r3, #0]
			noughtsScore++;
    28b2:	231f      	movs	r3, #31
    28b4:	18fb      	adds	r3, r7, r3
    28b6:	781a      	ldrb	r2, [r3, #0]
    28b8:	231f      	movs	r3, #31
    28ba:	18fb      	adds	r3, r7, r3
    28bc:	3201      	adds	r2, #1
    28be:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    28c0:	231d      	movs	r3, #29
    28c2:	18fb      	adds	r3, r7, r3
    28c4:	781a      	ldrb	r2, [r3, #0]
    28c6:	231d      	movs	r3, #29
    28c8:	18fb      	adds	r3, r7, r3
    28ca:	3201      	adds	r2, #1
    28cc:	701a      	strb	r2, [r3, #0]
			break;
    28ce:	e004      	b.n	28da <_Z16playQuantumMatchi+0xe6>
			case 0:
			// Game is a draw
			bitmap = 'f';
    28d0:	231c      	movs	r3, #28
    28d2:	18fb      	adds	r3, r7, r3
    28d4:	2266      	movs	r2, #102	; 0x66
    28d6:	701a      	strb	r2, [r3, #0]
			break;
    28d8:	46c0      	nop			; (mov r8, r8)
		}
		
		updateScore(noughtsScore, crossesScore);
    28da:	231f      	movs	r3, #31
    28dc:	18fb      	adds	r3, r7, r3
    28de:	781a      	ldrb	r2, [r3, #0]
    28e0:	231e      	movs	r3, #30
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	781b      	ldrb	r3, [r3, #0]
    28e6:	0019      	movs	r1, r3
    28e8:	0010      	movs	r0, r2
    28ea:	f7fe fde3 	bl	14b4 <_Z11updateScoreii>
		
		// If there are still games to be played draw win banner,
		// otherwise draw end game screen
		uint8_t gamesToWin = (maxGames / 2) + 1;
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	2b00      	cmp	r3, #0
    28f2:	da00      	bge.n	28f6 <_Z16playQuantumMatchi+0x102>
    28f4:	3301      	adds	r3, #1
    28f6:	105b      	asrs	r3, r3, #1
    28f8:	b2da      	uxtb	r2, r3
    28fa:	231a      	movs	r3, #26
    28fc:	18fb      	adds	r3, r7, r3
    28fe:	3201      	adds	r2, #1
    2900:	701a      	strb	r2, [r3, #0]
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    2902:	231f      	movs	r3, #31
    2904:	18fb      	adds	r3, r7, r3
    2906:	781a      	ldrb	r2, [r3, #0]
    2908:	231a      	movs	r3, #26
    290a:	18fb      	adds	r3, r7, r3
    290c:	781b      	ldrb	r3, [r3, #0]
    290e:	429a      	cmp	r2, r3
    2910:	da1c      	bge.n	294c <_Z16playQuantumMatchi+0x158>
    2912:	231e      	movs	r3, #30
    2914:	18fb      	adds	r3, r7, r3
    2916:	781a      	ldrb	r2, [r3, #0]
    2918:	231a      	movs	r3, #26
    291a:	18fb      	adds	r3, r7, r3
    291c:	781b      	ldrb	r3, [r3, #0]
    291e:	429a      	cmp	r2, r3
    2920:	da14      	bge.n	294c <_Z16playQuantumMatchi+0x158>
			drawBitmap(bitmap, 0, 110);
    2922:	231c      	movs	r3, #28
    2924:	18fb      	adds	r3, r7, r3
    2926:	781b      	ldrb	r3, [r3, #0]
    2928:	226e      	movs	r2, #110	; 0x6e
    292a:	2100      	movs	r1, #0
    292c:	0018      	movs	r0, r3
    292e:	f7fd fc99 	bl	264 <_Z10drawBitmapcss>
			while (true) if (touchScreen.touched()) break;
    2932:	4b41      	ldr	r3, [pc, #260]	; (2a38 <_Z16playQuantumMatchi+0x244>)
    2934:	0018      	movs	r0, r3
    2936:	f004 fcab 	bl	7290 <_ZN15Adafruit_FT62067touchedEv>
    293a:	0003      	movs	r3, r0
    293c:	1e5a      	subs	r2, r3, #1
    293e:	4193      	sbcs	r3, r2
    2940:	b2db      	uxtb	r3, r3
    2942:	2b00      	cmp	r3, #0
    2944:	d100      	bne.n	2948 <_Z16playQuantumMatchi+0x154>
    2946:	e7f4      	b.n	2932 <_Z16playQuantumMatchi+0x13e>
    2948:	46c0      	nop			; (mov r8, r8)
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    294a:	e068      	b.n	2a1e <_Z16playQuantumMatchi+0x22a>
			} else {
			if (crossesScore > noughtsScore) {
    294c:	231e      	movs	r3, #30
    294e:	18fb      	adds	r3, r7, r3
    2950:	781a      	ldrb	r2, [r3, #0]
    2952:	231f      	movs	r3, #31
    2954:	18fb      	adds	r3, r7, r3
    2956:	781b      	ldrb	r3, [r3, #0]
    2958:	429a      	cmp	r2, r3
    295a:	dd30      	ble.n	29be <_Z16playQuantumMatchi+0x1ca>
				// Draw game-over, crosses wins
				drawBitmap('m', 0, 0);
    295c:	2200      	movs	r2, #0
    295e:	2100      	movs	r1, #0
    2960:	206d      	movs	r0, #109	; 0x6d
    2962:	f7fd fc7f 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2966:	4b34      	ldr	r3, [pc, #208]	; (2a38 <_Z16playQuantumMatchi+0x244>)
    2968:	0018      	movs	r0, r3
    296a:	f004 fc91 	bl	7290 <_ZN15Adafruit_FT62067touchedEv>
    296e:	0003      	movs	r3, r0
    2970:	1e5a      	subs	r2, r3, #1
    2972:	4193      	sbcs	r3, r2
    2974:	b2db      	uxtb	r3, r3
    2976:	2b00      	cmp	r3, #0
    2978:	d01f      	beq.n	29ba <_Z16playQuantumMatchi+0x1c6>
						TS_Point point = getPoint();
    297a:	2314      	movs	r3, #20
    297c:	18fb      	adds	r3, r7, r3
    297e:	0018      	movs	r0, r3
    2980:	f7fe fce4 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    2984:	2314      	movs	r3, #20
    2986:	18fb      	adds	r3, r7, r3
    2988:	2200      	movs	r2, #0
    298a:	5e9b      	ldrsh	r3, [r3, r2]
    298c:	2b16      	cmp	r3, #22
    298e:	ddea      	ble.n	2966 <_Z16playQuantumMatchi+0x172>
    2990:	2314      	movs	r3, #20
    2992:	18fb      	adds	r3, r7, r3
    2994:	2200      	movs	r2, #0
    2996:	5e9b      	ldrsh	r3, [r3, r2]
    2998:	2bd7      	cmp	r3, #215	; 0xd7
    299a:	dce4      	bgt.n	2966 <_Z16playQuantumMatchi+0x172>
    299c:	2314      	movs	r3, #20
    299e:	18fb      	adds	r3, r7, r3
    29a0:	2202      	movs	r2, #2
    29a2:	5e9b      	ldrsh	r3, [r3, r2]
    29a4:	2bb9      	cmp	r3, #185	; 0xb9
    29a6:	ddde      	ble.n	2966 <_Z16playQuantumMatchi+0x172>
    29a8:	2314      	movs	r3, #20
    29aa:	18fb      	adds	r3, r7, r3
    29ac:	2202      	movs	r2, #2
    29ae:	5e9a      	ldrsh	r2, [r3, r2]
    29b0:	2384      	movs	r3, #132	; 0x84
    29b2:	005b      	lsls	r3, r3, #1
    29b4:	429a      	cmp	r2, r3
    29b6:	dd33      	ble.n	2a20 <_Z16playQuantumMatchi+0x22c>
    29b8:	e7d5      	b.n	2966 <_Z16playQuantumMatchi+0x172>
							// They pressed the start button
							goto exit;
						}
						} else {
						continue;
    29ba:	46c0      	nop			; (mov r8, r8)
					}
				}
    29bc:	e7d3      	b.n	2966 <_Z16playQuantumMatchi+0x172>
				} else {
				// Draw game-over, noughts wins
				drawBitmap('n', 0, 0);
    29be:	2200      	movs	r2, #0
    29c0:	2100      	movs	r1, #0
    29c2:	206e      	movs	r0, #110	; 0x6e
    29c4:	f7fd fc4e 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    29c8:	4b1b      	ldr	r3, [pc, #108]	; (2a38 <_Z16playQuantumMatchi+0x244>)
    29ca:	0018      	movs	r0, r3
    29cc:	f004 fc60 	bl	7290 <_ZN15Adafruit_FT62067touchedEv>
    29d0:	0003      	movs	r3, r0
    29d2:	1e5a      	subs	r2, r3, #1
    29d4:	4193      	sbcs	r3, r2
    29d6:	b2db      	uxtb	r3, r3
    29d8:	2b00      	cmp	r3, #0
    29da:	d0f5      	beq.n	29c8 <_Z16playQuantumMatchi+0x1d4>
						TS_Point point = getPoint();
    29dc:	230c      	movs	r3, #12
    29de:	18fb      	adds	r3, r7, r3
    29e0:	0018      	movs	r0, r3
    29e2:	f7fe fcb3 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    29e6:	230c      	movs	r3, #12
    29e8:	18fb      	adds	r3, r7, r3
    29ea:	2200      	movs	r2, #0
    29ec:	5e9b      	ldrsh	r3, [r3, r2]
    29ee:	2b16      	cmp	r3, #22
    29f0:	dd13      	ble.n	2a1a <_Z16playQuantumMatchi+0x226>
    29f2:	230c      	movs	r3, #12
    29f4:	18fb      	adds	r3, r7, r3
    29f6:	2200      	movs	r2, #0
    29f8:	5e9b      	ldrsh	r3, [r3, r2]
    29fa:	2bd7      	cmp	r3, #215	; 0xd7
    29fc:	dc0d      	bgt.n	2a1a <_Z16playQuantumMatchi+0x226>
    29fe:	230c      	movs	r3, #12
    2a00:	18fb      	adds	r3, r7, r3
    2a02:	2202      	movs	r2, #2
    2a04:	5e9b      	ldrsh	r3, [r3, r2]
    2a06:	2bb9      	cmp	r3, #185	; 0xb9
    2a08:	dd07      	ble.n	2a1a <_Z16playQuantumMatchi+0x226>
    2a0a:	230c      	movs	r3, #12
    2a0c:	18fb      	adds	r3, r7, r3
    2a0e:	2202      	movs	r2, #2
    2a10:	5e9a      	ldrsh	r2, [r3, r2]
    2a12:	2384      	movs	r3, #132	; 0x84
    2a14:	005b      	lsls	r3, r3, #1
    2a16:	429a      	cmp	r2, r3
    2a18:	dd03      	ble.n	2a22 <_Z16playQuantumMatchi+0x22e>
							// They pressed the start button
							goto exit;
							} else {
							continue;
    2a1a:	46c0      	nop			; (mov r8, r8)
						}
					}
				}
    2a1c:	e7d4      	b.n	29c8 <_Z16playQuantumMatchi+0x1d4>
	while (gamesPlayed < maxGames) {
    2a1e:	e712      	b.n	2846 <_Z16playQuantumMatchi+0x52>
							goto exit;
    2a20:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	exit:
	Serial.println("Broke while loop");
    2a22:	4a06      	ldr	r2, [pc, #24]	; (2a3c <_Z16playQuantumMatchi+0x248>)
    2a24:	4b06      	ldr	r3, [pc, #24]	; (2a40 <_Z16playQuantumMatchi+0x24c>)
    2a26:	0011      	movs	r1, r2
    2a28:	0018      	movs	r0, r3
    2a2a:	f000 fb97 	bl	315c <_ZN5Print7printlnEPKc>
}
    2a2e:	46c0      	nop			; (mov r8, r8)
    2a30:	46bd      	mov	sp, r7
    2a32:	b009      	add	sp, #36	; 0x24
    2a34:	bd90      	pop	{r4, r7, pc}
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	20000320 	.word	0x20000320
    2a3c:	00013324 	.word	0x00013324
    2a40:	20000e94 	.word	0x20000e94

00002a44 <setup>:

void setup() {
    2a44:	b580      	push	{r7, lr}
    2a46:	af00      	add	r7, sp, #0

	Serial.begin(9600);
    2a48:	2396      	movs	r3, #150	; 0x96
    2a4a:	019a      	lsls	r2, r3, #6
    2a4c:	4b1b      	ldr	r3, [pc, #108]	; (2abc <setup+0x78>)
    2a4e:	0011      	movs	r1, r2
    2a50:	0018      	movs	r0, r3
    2a52:	f000 feed 	bl	3830 <_ZN4Uart5beginEm>

	tftDisplay.begin();
    2a56:	4b1a      	ldr	r3, [pc, #104]	; (2ac0 <setup+0x7c>)
    2a58:	2100      	movs	r1, #0
    2a5a:	0018      	movs	r0, r3
    2a5c:	f004 ff30 	bl	78c0 <_ZN16Adafruit_ILI93415beginEm>

	if (!touchScreen.begin()) {
    2a60:	4b18      	ldr	r3, [pc, #96]	; (2ac4 <setup+0x80>)
    2a62:	2180      	movs	r1, #128	; 0x80
    2a64:	0018      	movs	r0, r3
    2a66:	f004 fbd1 	bl	720c <_ZN15Adafruit_FT62065beginEh>
    2a6a:	0003      	movs	r3, r0
    2a6c:	001a      	movs	r2, r3
    2a6e:	2301      	movs	r3, #1
    2a70:	4053      	eors	r3, r2
    2a72:	b2db      	uxtb	r3, r3
    2a74:	2b00      	cmp	r3, #0
    2a76:	d00c      	beq.n	2a92 <setup+0x4e>
		Serial.println(F("Couldn't start FT6206 touchscreen controller"));
    2a78:	4a13      	ldr	r2, [pc, #76]	; (2ac8 <setup+0x84>)
    2a7a:	4b10      	ldr	r3, [pc, #64]	; (2abc <setup+0x78>)
    2a7c:	0011      	movs	r1, r2
    2a7e:	0018      	movs	r0, r3
    2a80:	f000 fb40 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Driver might not have been found"));
    2a84:	4a11      	ldr	r2, [pc, #68]	; (2acc <setup+0x88>)
    2a86:	4b0d      	ldr	r3, [pc, #52]	; (2abc <setup+0x78>)
    2a88:	0011      	movs	r1, r2
    2a8a:	0018      	movs	r0, r3
    2a8c:	f000 fb3a 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
		while (true);
    2a90:	e7fe      	b.n	2a90 <setup+0x4c>
	}

	if (verbose) Serial.println(F("Display and touchscreen started"));

	if (!SD.begin(SD_CS)) {
    2a92:	4b0f      	ldr	r3, [pc, #60]	; (2ad0 <setup+0x8c>)
    2a94:	2104      	movs	r1, #4
    2a96:	0018      	movs	r0, r3
    2a98:	f006 f90c 	bl	8cb4 <_ZN5SDLib7SDClass5beginEh>
    2a9c:	0003      	movs	r3, r0
    2a9e:	001a      	movs	r2, r3
    2aa0:	2301      	movs	r3, #1
    2aa2:	4053      	eors	r3, r2
    2aa4:	b2db      	uxtb	r3, r3
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d005      	beq.n	2ab6 <setup+0x72>
		Serial.println(F("Failed to initialise SD card"));
    2aaa:	4a0a      	ldr	r2, [pc, #40]	; (2ad4 <setup+0x90>)
    2aac:	4b03      	ldr	r3, [pc, #12]	; (2abc <setup+0x78>)
    2aae:	0011      	movs	r1, r2
    2ab0:	0018      	movs	r0, r3
    2ab2:	f000 fb27 	bl	3104 <_ZN5Print7printlnEPK19__FlashStringHelper>
	} else if (verbose) Serial.println(F("SD card mounted"));
}
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	46bd      	mov	sp, r7
    2aba:	bd80      	pop	{r7, pc}
    2abc:	20000e94 	.word	0x20000e94
    2ac0:	200002bc 	.word	0x200002bc
    2ac4:	20000320 	.word	0x20000320
    2ac8:	00013338 	.word	0x00013338
    2acc:	00013368 	.word	0x00013368
    2ad0:	200008f4 	.word	0x200008f4
    2ad4:	0001338c 	.word	0x0001338c

00002ad8 <loop>:

void loop() {
    2ad8:	b590      	push	{r4, r7, lr}
    2ada:	b08f      	sub	sp, #60	; 0x3c
    2adc:	af00      	add	r7, sp, #0
	uint8_t maxGames = 1;
    2ade:	2337      	movs	r3, #55	; 0x37
    2ae0:	18fb      	adds	r3, r7, r3
    2ae2:	2201      	movs	r2, #1
    2ae4:	701a      	strb	r2, [r3, #0]
	drawBitmap('l', 0, 0);
    2ae6:	2200      	movs	r2, #0
    2ae8:	2100      	movs	r1, #0
    2aea:	206c      	movs	r0, #108	; 0x6c
    2aec:	f7fd fbba 	bl	264 <_Z10drawBitmapcss>
	String s = (String) maxGames;
    2af0:	2337      	movs	r3, #55	; 0x37
    2af2:	18fb      	adds	r3, r7, r3
    2af4:	7819      	ldrb	r1, [r3, #0]
    2af6:	2324      	movs	r3, #36	; 0x24
    2af8:	18fb      	adds	r3, r7, r3
    2afa:	220a      	movs	r2, #10
    2afc:	0018      	movs	r0, r3
    2afe:	f004 f9dd 	bl	6ebc <_ZN6StringC1Ehh>
	char maxGamesChar = s.charAt(0);
    2b02:	2336      	movs	r3, #54	; 0x36
    2b04:	18fc      	adds	r4, r7, r3
    2b06:	2324      	movs	r3, #36	; 0x24
    2b08:	18fb      	adds	r3, r7, r3
    2b0a:	2100      	movs	r1, #0
    2b0c:	0018      	movs	r0, r3
    2b0e:	f004 fb47 	bl	71a0 <_ZNK6String6charAtEj>
    2b12:	0003      	movs	r3, r0
    2b14:	7023      	strb	r3, [r4, #0]
	drawBitmap(maxGamesChar, 173, 149);
    2b16:	2336      	movs	r3, #54	; 0x36
    2b18:	18fb      	adds	r3, r7, r3
    2b1a:	781b      	ldrb	r3, [r3, #0]
    2b1c:	2295      	movs	r2, #149	; 0x95
    2b1e:	21ad      	movs	r1, #173	; 0xad
    2b20:	0018      	movs	r0, r3
    2b22:	f7fd fb9f 	bl	264 <_Z10drawBitmapcss>
	boolean quantumMatch;

	while (true) {
		if (touchScreen.touched()) {
    2b26:	4b6d      	ldr	r3, [pc, #436]	; (2cdc <loop+0x204>)
    2b28:	0018      	movs	r0, r3
    2b2a:	f004 fbb1 	bl	7290 <_ZN15Adafruit_FT62067touchedEv>
    2b2e:	0003      	movs	r3, r0
    2b30:	1e5a      	subs	r2, r3, #1
    2b32:	4193      	sbcs	r3, r2
    2b34:	b2db      	uxtb	r3, r3
    2b36:	2b00      	cmp	r3, #0
    2b38:	d100      	bne.n	2b3c <loop+0x64>
    2b3a:	e0b1      	b.n	2ca0 <loop+0x1c8>
			TS_Point point = getPoint();
    2b3c:	231c      	movs	r3, #28
    2b3e:	18fb      	adds	r3, r7, r3
    2b40:	0018      	movs	r0, r3
    2b42:	f7fe fc03 	bl	134c <_Z8getPointv>
			if (point.x > 22 && point.x < 216 && point.y > 205 && point.y < 305) {
    2b46:	231c      	movs	r3, #28
    2b48:	18fb      	adds	r3, r7, r3
    2b4a:	2200      	movs	r2, #0
    2b4c:	5e9b      	ldrsh	r3, [r3, r2]
    2b4e:	2b16      	cmp	r3, #22
    2b50:	dd1f      	ble.n	2b92 <loop+0xba>
    2b52:	231c      	movs	r3, #28
    2b54:	18fb      	adds	r3, r7, r3
    2b56:	2200      	movs	r2, #0
    2b58:	5e9b      	ldrsh	r3, [r3, r2]
    2b5a:	2bd7      	cmp	r3, #215	; 0xd7
    2b5c:	dc19      	bgt.n	2b92 <loop+0xba>
    2b5e:	231c      	movs	r3, #28
    2b60:	18fb      	adds	r3, r7, r3
    2b62:	2202      	movs	r2, #2
    2b64:	5e9b      	ldrsh	r3, [r3, r2]
    2b66:	2bcd      	cmp	r3, #205	; 0xcd
    2b68:	dd13      	ble.n	2b92 <loop+0xba>
    2b6a:	231c      	movs	r3, #28
    2b6c:	18fb      	adds	r3, r7, r3
    2b6e:	2202      	movs	r2, #2
    2b70:	5e9a      	ldrsh	r2, [r3, r2]
    2b72:	2398      	movs	r3, #152	; 0x98
    2b74:	005b      	lsls	r3, r3, #1
    2b76:	429a      	cmp	r2, r3
    2b78:	dc0b      	bgt.n	2b92 <loop+0xba>
				// They pressed the start button
				quantumMatch = true;
    2b7a:	2333      	movs	r3, #51	; 0x33
    2b7c:	18fb      	adds	r3, r7, r3
    2b7e:	2201      	movs	r2, #1
    2b80:	701a      	strb	r2, [r3, #0]
				break;
    2b82:	46c0      	nop			; (mov r8, r8)
			continue;
		}
	}
	
	// TODO: Add selecting game-mode
	if (quantumMatch) {
    2b84:	2333      	movs	r3, #51	; 0x33
    2b86:	18fb      	adds	r3, r7, r3
    2b88:	781b      	ldrb	r3, [r3, #0]
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d000      	beq.n	2b90 <loop+0xb8>
    2b8e:	e08f      	b.n	2cb0 <loop+0x1d8>
    2b90:	e095      	b.n	2cbe <loop+0x1e6>
				} else if (point.x > 100 && point.x < 180 && point.y > 100 && point.y < 220) {
    2b92:	231c      	movs	r3, #28
    2b94:	18fb      	adds	r3, r7, r3
    2b96:	2200      	movs	r2, #0
    2b98:	5e9b      	ldrsh	r3, [r3, r2]
    2b9a:	2b64      	cmp	r3, #100	; 0x64
    2b9c:	dd3e      	ble.n	2c1c <loop+0x144>
    2b9e:	231c      	movs	r3, #28
    2ba0:	18fb      	adds	r3, r7, r3
    2ba2:	2200      	movs	r2, #0
    2ba4:	5e9b      	ldrsh	r3, [r3, r2]
    2ba6:	2bb3      	cmp	r3, #179	; 0xb3
    2ba8:	dc38      	bgt.n	2c1c <loop+0x144>
    2baa:	231c      	movs	r3, #28
    2bac:	18fb      	adds	r3, r7, r3
    2bae:	2202      	movs	r2, #2
    2bb0:	5e9b      	ldrsh	r3, [r3, r2]
    2bb2:	2b64      	cmp	r3, #100	; 0x64
    2bb4:	dd32      	ble.n	2c1c <loop+0x144>
    2bb6:	231c      	movs	r3, #28
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	2202      	movs	r2, #2
    2bbc:	5e9b      	ldrsh	r3, [r3, r2]
    2bbe:	2bdb      	cmp	r3, #219	; 0xdb
    2bc0:	dc2c      	bgt.n	2c1c <loop+0x144>
				if (maxGames != 1) {
    2bc2:	2337      	movs	r3, #55	; 0x37
    2bc4:	18fb      	adds	r3, r7, r3
    2bc6:	781b      	ldrb	r3, [r3, #0]
    2bc8:	2b01      	cmp	r3, #1
    2bca:	d06b      	beq.n	2ca4 <loop+0x1cc>
					maxGames -= 2;
    2bcc:	2337      	movs	r3, #55	; 0x37
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	2237      	movs	r2, #55	; 0x37
    2bd2:	18ba      	adds	r2, r7, r2
    2bd4:	7812      	ldrb	r2, [r2, #0]
    2bd6:	3a02      	subs	r2, #2
    2bd8:	701a      	strb	r2, [r3, #0]
					String s = (String) maxGames;
    2bda:	2337      	movs	r3, #55	; 0x37
    2bdc:	18fb      	adds	r3, r7, r3
    2bde:	7819      	ldrb	r1, [r3, #0]
    2be0:	2310      	movs	r3, #16
    2be2:	18fb      	adds	r3, r7, r3
    2be4:	220a      	movs	r2, #10
    2be6:	0018      	movs	r0, r3
    2be8:	f004 f968 	bl	6ebc <_ZN6StringC1Ehh>
					char maxGamesChar = s.charAt(0);
    2bec:	2335      	movs	r3, #53	; 0x35
    2bee:	18fc      	adds	r4, r7, r3
    2bf0:	2310      	movs	r3, #16
    2bf2:	18fb      	adds	r3, r7, r3
    2bf4:	2100      	movs	r1, #0
    2bf6:	0018      	movs	r0, r3
    2bf8:	f004 fad2 	bl	71a0 <_ZNK6String6charAtEj>
    2bfc:	0003      	movs	r3, r0
    2bfe:	7023      	strb	r3, [r4, #0]
					drawBitmap(maxGamesChar, 173, 149);
    2c00:	2335      	movs	r3, #53	; 0x35
    2c02:	18fb      	adds	r3, r7, r3
    2c04:	781b      	ldrb	r3, [r3, #0]
    2c06:	2295      	movs	r2, #149	; 0x95
    2c08:	21ad      	movs	r1, #173	; 0xad
    2c0a:	0018      	movs	r0, r3
    2c0c:	f7fd fb2a 	bl	264 <_Z10drawBitmapcss>
					String s = (String) maxGames;
    2c10:	2310      	movs	r3, #16
    2c12:	18fb      	adds	r3, r7, r3
    2c14:	0018      	movs	r0, r3
    2c16:	f004 f995 	bl	6f44 <_ZN6StringD1Ev>
				continue;
    2c1a:	e043      	b.n	2ca4 <loop+0x1cc>
				} else if (point.x > 180 && point.x < 241 && point.y > 100 && point.y < 220) {
    2c1c:	231c      	movs	r3, #28
    2c1e:	18fb      	adds	r3, r7, r3
    2c20:	2200      	movs	r2, #0
    2c22:	5e9b      	ldrsh	r3, [r3, r2]
    2c24:	2bb4      	cmp	r3, #180	; 0xb4
    2c26:	dd3f      	ble.n	2ca8 <loop+0x1d0>
    2c28:	231c      	movs	r3, #28
    2c2a:	18fb      	adds	r3, r7, r3
    2c2c:	2200      	movs	r2, #0
    2c2e:	5e9b      	ldrsh	r3, [r3, r2]
    2c30:	2bf0      	cmp	r3, #240	; 0xf0
    2c32:	dc39      	bgt.n	2ca8 <loop+0x1d0>
    2c34:	231c      	movs	r3, #28
    2c36:	18fb      	adds	r3, r7, r3
    2c38:	2202      	movs	r2, #2
    2c3a:	5e9b      	ldrsh	r3, [r3, r2]
    2c3c:	2b64      	cmp	r3, #100	; 0x64
    2c3e:	dd33      	ble.n	2ca8 <loop+0x1d0>
    2c40:	231c      	movs	r3, #28
    2c42:	18fb      	adds	r3, r7, r3
    2c44:	2202      	movs	r2, #2
    2c46:	5e9b      	ldrsh	r3, [r3, r2]
    2c48:	2bdb      	cmp	r3, #219	; 0xdb
    2c4a:	dc2d      	bgt.n	2ca8 <loop+0x1d0>
				if (maxGames != 9) {
    2c4c:	2337      	movs	r3, #55	; 0x37
    2c4e:	18fb      	adds	r3, r7, r3
    2c50:	781b      	ldrb	r3, [r3, #0]
    2c52:	2b09      	cmp	r3, #9
    2c54:	d02a      	beq.n	2cac <loop+0x1d4>
					maxGames += 2;
    2c56:	2337      	movs	r3, #55	; 0x37
    2c58:	18fb      	adds	r3, r7, r3
    2c5a:	2237      	movs	r2, #55	; 0x37
    2c5c:	18ba      	adds	r2, r7, r2
    2c5e:	7812      	ldrb	r2, [r2, #0]
    2c60:	3202      	adds	r2, #2
    2c62:	701a      	strb	r2, [r3, #0]
					String s = (String) maxGames;
    2c64:	2337      	movs	r3, #55	; 0x37
    2c66:	18fb      	adds	r3, r7, r3
    2c68:	7819      	ldrb	r1, [r3, #0]
    2c6a:	1d3b      	adds	r3, r7, #4
    2c6c:	220a      	movs	r2, #10
    2c6e:	0018      	movs	r0, r3
    2c70:	f004 f924 	bl	6ebc <_ZN6StringC1Ehh>
					char maxGamesChar = s.charAt(0);
    2c74:	2334      	movs	r3, #52	; 0x34
    2c76:	18fc      	adds	r4, r7, r3
    2c78:	1d3b      	adds	r3, r7, #4
    2c7a:	2100      	movs	r1, #0
    2c7c:	0018      	movs	r0, r3
    2c7e:	f004 fa8f 	bl	71a0 <_ZNK6String6charAtEj>
    2c82:	0003      	movs	r3, r0
    2c84:	7023      	strb	r3, [r4, #0]
					drawBitmap(maxGamesChar, 173, 149);
    2c86:	2334      	movs	r3, #52	; 0x34
    2c88:	18fb      	adds	r3, r7, r3
    2c8a:	781b      	ldrb	r3, [r3, #0]
    2c8c:	2295      	movs	r2, #149	; 0x95
    2c8e:	21ad      	movs	r1, #173	; 0xad
    2c90:	0018      	movs	r0, r3
    2c92:	f7fd fae7 	bl	264 <_Z10drawBitmapcss>
					String s = (String) maxGames;
    2c96:	1d3b      	adds	r3, r7, #4
    2c98:	0018      	movs	r0, r3
    2c9a:	f004 f953 	bl	6f44 <_ZN6StringD1Ev>
				continue;
    2c9e:	e005      	b.n	2cac <loop+0x1d4>
			continue;
    2ca0:	46c0      	nop			; (mov r8, r8)
    2ca2:	e740      	b.n	2b26 <loop+0x4e>
				continue;
    2ca4:	46c0      	nop			; (mov r8, r8)
    2ca6:	e73e      	b.n	2b26 <loop+0x4e>
				continue;
    2ca8:	46c0      	nop			; (mov r8, r8)
    2caa:	e73c      	b.n	2b26 <loop+0x4e>
				continue;
    2cac:	46c0      	nop			; (mov r8, r8)
	}
    2cae:	e73a      	b.n	2b26 <loop+0x4e>
		playQuantumMatch(maxGames);
    2cb0:	2337      	movs	r3, #55	; 0x37
    2cb2:	18fb      	adds	r3, r7, r3
    2cb4:	781b      	ldrb	r3, [r3, #0]
    2cb6:	0018      	movs	r0, r3
    2cb8:	f7ff fd9c 	bl	27f4 <_Z16playQuantumMatchi>
    2cbc:	e005      	b.n	2cca <loop+0x1f2>
		} else {
		playMatch(maxGames);
    2cbe:	2337      	movs	r3, #55	; 0x37
    2cc0:	18fb      	adds	r3, r7, r3
    2cc2:	781b      	ldrb	r3, [r3, #0]
    2cc4:	0018      	movs	r0, r3
    2cc6:	f7ff fc6d 	bl	25a4 <_Z9playMatchi>
	String s = (String) maxGames;
    2cca:	2324      	movs	r3, #36	; 0x24
    2ccc:	18fb      	adds	r3, r7, r3
    2cce:	0018      	movs	r0, r3
    2cd0:	f004 f938 	bl	6f44 <_ZN6StringD1Ev>
	}
    2cd4:	46c0      	nop			; (mov r8, r8)
    2cd6:	46bd      	mov	sp, r7
    2cd8:	b00f      	add	sp, #60	; 0x3c
    2cda:	bd90      	pop	{r4, r7, pc}
    2cdc:	20000320 	.word	0x20000320

00002ce0 <_Z41__static_initialization_and_destruction_0ii>:
    2ce0:	b580      	push	{r7, lr}
    2ce2:	b082      	sub	sp, #8
    2ce4:	af00      	add	r7, sp, #0
    2ce6:	6078      	str	r0, [r7, #4]
    2ce8:	6039      	str	r1, [r7, #0]
    2cea:	687b      	ldr	r3, [r7, #4]
    2cec:	2b01      	cmp	r3, #1
    2cee:	d10e      	bne.n	2d0e <_Z41__static_initialization_and_destruction_0ii+0x2e>
    2cf0:	683b      	ldr	r3, [r7, #0]
    2cf2:	4a09      	ldr	r2, [pc, #36]	; (2d18 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2cf4:	4293      	cmp	r3, r2
    2cf6:	d10a      	bne.n	2d0e <_Z41__static_initialization_and_destruction_0ii+0x2e>
Adafruit_ILI9341 tftDisplay = Adafruit_ILI9341(tftDisplay_CS, tftDisplay_DC);
    2cf8:	2301      	movs	r3, #1
    2cfa:	425b      	negs	r3, r3
    2cfc:	4807      	ldr	r0, [pc, #28]	; (2d1c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2cfe:	2209      	movs	r2, #9
    2d00:	210a      	movs	r1, #10
    2d02:	f004 fd47 	bl	7794 <_ZN16Adafruit_ILI9341C1Eaaa>
Adafruit_FT6206 touchScreen = Adafruit_FT6206();
    2d06:	4b06      	ldr	r3, [pc, #24]	; (2d20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2d08:	0018      	movs	r0, r3
    2d0a:	f004 fa72 	bl	71f2 <_ZN15Adafruit_FT6206C1Ev>
    2d0e:	46c0      	nop			; (mov r8, r8)
    2d10:	46bd      	mov	sp, r7
    2d12:	b002      	add	sp, #8
    2d14:	bd80      	pop	{r7, pc}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	0000ffff 	.word	0x0000ffff
    2d1c:	200002bc 	.word	0x200002bc
    2d20:	20000320 	.word	0x20000320

00002d24 <_GLOBAL__sub_I_tftDisplay>:
    2d24:	b580      	push	{r7, lr}
    2d26:	af00      	add	r7, sp, #0
    2d28:	4b03      	ldr	r3, [pc, #12]	; (2d38 <_GLOBAL__sub_I_tftDisplay+0x14>)
    2d2a:	0019      	movs	r1, r3
    2d2c:	2001      	movs	r0, #1
    2d2e:	f7ff ffd7 	bl	2ce0 <_Z41__static_initialization_and_destruction_0ii>
    2d32:	46bd      	mov	sp, r7
    2d34:	bd80      	pop	{r7, pc}
    2d36:	46c0      	nop			; (mov r8, r8)
    2d38:	0000ffff 	.word	0x0000ffff

00002d3c <Dummy_Handler>:
extern void pendSVHook(void);
extern int sysTickHook(void);

/* Default empty handler */
void Dummy_Handler(void)
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	af00      	add	r7, sp, #0
#if defined DEBUG
  __BKPT(3);
    2d40:	be03      	bkpt	0x0003
#endif
  for (;;) { }
    2d42:	e7fe      	b.n	2d42 <Dummy_Handler+0x6>

00002d44 <Reset_Handler>:

extern int main(void);

/* This is called on processor reset to initialize the device and call main() */
void Reset_Handler(void)
{
    2d44:	b580      	push	{r7, lr}
    2d46:	b082      	sub	sp, #8
    2d48:	af00      	add	r7, sp, #0
  uint32_t *pSrc, *pDest;

  /* Initialize the initialized data section */
  pSrc = &__etext;
    2d4a:	4b1a      	ldr	r3, [pc, #104]	; (2db4 <Reset_Handler+0x70>)
    2d4c:	607b      	str	r3, [r7, #4]
  pDest = &__data_start__;
    2d4e:	4b1a      	ldr	r3, [pc, #104]	; (2db8 <Reset_Handler+0x74>)
    2d50:	603b      	str	r3, [r7, #0]

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2d52:	4a19      	ldr	r2, [pc, #100]	; (2db8 <Reset_Handler+0x74>)
    2d54:	4b19      	ldr	r3, [pc, #100]	; (2dbc <Reset_Handler+0x78>)
    2d56:	429a      	cmp	r2, r3
    2d58:	d012      	beq.n	2d80 <Reset_Handler+0x3c>
    2d5a:	687a      	ldr	r2, [r7, #4]
    2d5c:	683b      	ldr	r3, [r7, #0]
    2d5e:	429a      	cmp	r2, r3
    2d60:	d00e      	beq.n	2d80 <Reset_Handler+0x3c>
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2d62:	e009      	b.n	2d78 <Reset_Handler+0x34>
      *pDest = *pSrc;
    2d64:	687b      	ldr	r3, [r7, #4]
    2d66:	681a      	ldr	r2, [r3, #0]
    2d68:	683b      	ldr	r3, [r7, #0]
    2d6a:	601a      	str	r2, [r3, #0]
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2d6c:	683b      	ldr	r3, [r7, #0]
    2d6e:	3304      	adds	r3, #4
    2d70:	603b      	str	r3, [r7, #0]
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	3304      	adds	r3, #4
    2d76:	607b      	str	r3, [r7, #4]
    2d78:	683a      	ldr	r2, [r7, #0]
    2d7a:	4b10      	ldr	r3, [pc, #64]	; (2dbc <Reset_Handler+0x78>)
    2d7c:	429a      	cmp	r2, r3
    2d7e:	d3f1      	bcc.n	2d64 <Reset_Handler+0x20>
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2d80:	4a0d      	ldr	r2, [pc, #52]	; (2db8 <Reset_Handler+0x74>)
    2d82:	4b0e      	ldr	r3, [pc, #56]	; (2dbc <Reset_Handler+0x78>)
    2d84:	429a      	cmp	r2, r3
    2d86:	d010      	beq.n	2daa <Reset_Handler+0x66>
    2d88:	687a      	ldr	r2, [r7, #4]
    2d8a:	683b      	ldr	r3, [r7, #0]
    2d8c:	429a      	cmp	r2, r3
    2d8e:	d00c      	beq.n	2daa <Reset_Handler+0x66>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2d90:	4b0b      	ldr	r3, [pc, #44]	; (2dc0 <Reset_Handler+0x7c>)
    2d92:	603b      	str	r3, [r7, #0]
    2d94:	e005      	b.n	2da2 <Reset_Handler+0x5e>
      *pDest = 0;
    2d96:	683b      	ldr	r3, [r7, #0]
    2d98:	2200      	movs	r2, #0
    2d9a:	601a      	str	r2, [r3, #0]
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2d9c:	683b      	ldr	r3, [r7, #0]
    2d9e:	3304      	adds	r3, #4
    2da0:	603b      	str	r3, [r7, #0]
    2da2:	683a      	ldr	r2, [r7, #0]
    2da4:	4b07      	ldr	r3, [pc, #28]	; (2dc4 <Reset_Handler+0x80>)
    2da6:	429a      	cmp	r2, r3
    2da8:	d3f5      	bcc.n	2d96 <Reset_Handler+0x52>
  }

  SystemInit();
    2daa:	f000 fb09 	bl	33c0 <SystemInit>

  main();
    2dae:	f000 f875 	bl	2e9c <main>

  while (1)
    2db2:	e7fe      	b.n	2db2 <Reset_Handler+0x6e>
    2db4:	000144bc 	.word	0x000144bc
    2db8:	20000000 	.word	0x20000000
    2dbc:	200002a0 	.word	0x200002a0
    2dc0:	200002a0 	.word	0x200002a0
    2dc4:	20000f88 	.word	0x20000f88

00002dc8 <SysTick_Handler>:

/* Default Arduino systick handler */
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
    2dc8:	b580      	push	{r7, lr}
    2dca:	af00      	add	r7, sp, #0
  if (sysTickHook())
    2dcc:	f000 f85b 	bl	2e86 <sysTickHook>
    2dd0:	1e03      	subs	r3, r0, #0
    2dd2:	d102      	bne.n	2dda <SysTick_Handler+0x12>
    return;
  SysTick_DefaultHandler();
    2dd4:	f000 f844 	bl	2e60 <SysTick_DefaultHandler>
    2dd8:	e000      	b.n	2ddc <SysTick_Handler+0x14>
    return;
    2dda:	46c0      	nop			; (mov r8, r8)
}
    2ddc:	46bd      	mov	sp, r7
    2dde:	bd80      	pop	{r7, pc}

00002de0 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
    2de0:	b580      	push	{r7, lr}
    2de2:	af00      	add	r7, sp, #0
  if (usb_isr)
    2de4:	4b04      	ldr	r3, [pc, #16]	; (2df8 <USB_Handler+0x18>)
    2de6:	681b      	ldr	r3, [r3, #0]
    2de8:	2b00      	cmp	r3, #0
    2dea:	d002      	beq.n	2df2 <USB_Handler+0x12>
    usb_isr();
    2dec:	4b02      	ldr	r3, [pc, #8]	; (2df8 <USB_Handler+0x18>)
    2dee:	681b      	ldr	r3, [r3, #0]
    2df0:	4798      	blx	r3
}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	46bd      	mov	sp, r7
    2df6:	bd80      	pop	{r7, pc}
    2df8:	20000330 	.word	0x20000330

00002dfc <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
    2dfc:	b580      	push	{r7, lr}
    2dfe:	b082      	sub	sp, #8
    2e00:	af00      	add	r7, sp, #0
    2e02:	6078      	str	r0, [r7, #4]
  usb_isr = new_usb_isr;
    2e04:	4b03      	ldr	r3, [pc, #12]	; (2e14 <USB_SetHandler+0x18>)
    2e06:	687a      	ldr	r2, [r7, #4]
    2e08:	601a      	str	r2, [r3, #0]
}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	46bd      	mov	sp, r7
    2e0e:	b002      	add	sp, #8
    2e10:	bd80      	pop	{r7, pc}
    2e12:	46c0      	nop			; (mov r8, r8)
    2e14:	20000330 	.word	0x20000330

00002e18 <millis>:

/** Tick Counter united by ms */
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
    2e18:	b580      	push	{r7, lr}
    2e1a:	af00      	add	r7, sp, #0
// todo: ensure no interrupts
  return _ulTickCount ;
    2e1c:	4b02      	ldr	r3, [pc, #8]	; (2e28 <millis+0x10>)
    2e1e:	681b      	ldr	r3, [r3, #0]
}
    2e20:	0018      	movs	r0, r3
    2e22:	46bd      	mov	sp, r7
    2e24:	bd80      	pop	{r7, pc}
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	20000334 	.word	0x20000334

00002e2c <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
    2e2c:	b580      	push	{r7, lr}
    2e2e:	b084      	sub	sp, #16
    2e30:	af00      	add	r7, sp, #0
    2e32:	6078      	str	r0, [r7, #4]
  if ( ms == 0 )
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	2b00      	cmp	r3, #0
    2e38:	d00c      	beq.n	2e54 <delay+0x28>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
    2e3a:	4b08      	ldr	r3, [pc, #32]	; (2e5c <delay+0x30>)
    2e3c:	681b      	ldr	r3, [r3, #0]
    2e3e:	60fb      	str	r3, [r7, #12]

  do
  {
    yield() ;
    2e40:	f000 f81c 	bl	2e7c <yield>
  } while ( _ulTickCount - start < ms ) ;
    2e44:	4b05      	ldr	r3, [pc, #20]	; (2e5c <delay+0x30>)
    2e46:	681a      	ldr	r2, [r3, #0]
    2e48:	68fb      	ldr	r3, [r7, #12]
    2e4a:	1ad2      	subs	r2, r2, r3
    2e4c:	687b      	ldr	r3, [r7, #4]
    2e4e:	429a      	cmp	r2, r3
    2e50:	d3f6      	bcc.n	2e40 <delay+0x14>
    2e52:	e000      	b.n	2e56 <delay+0x2a>
    return ;
    2e54:	46c0      	nop			; (mov r8, r8)
}
    2e56:	46bd      	mov	sp, r7
    2e58:	b004      	add	sp, #16
    2e5a:	bd80      	pop	{r7, pc}
    2e5c:	20000334 	.word	0x20000334

00002e60 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    2e60:	b580      	push	{r7, lr}
    2e62:	af00      	add	r7, sp, #0
  // Increment tick count each ms
  _ulTickCount++;
    2e64:	4b04      	ldr	r3, [pc, #16]	; (2e78 <SysTick_DefaultHandler+0x18>)
    2e66:	681b      	ldr	r3, [r3, #0]
    2e68:	1c5a      	adds	r2, r3, #1
    2e6a:	4b03      	ldr	r3, [pc, #12]	; (2e78 <SysTick_DefaultHandler+0x18>)
    2e6c:	601a      	str	r2, [r3, #0]
  tickReset();
    2e6e:	f000 fa8d 	bl	338c <tickReset>
}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	46bd      	mov	sp, r7
    2e76:	bd80      	pop	{r7, pc}
    2e78:	20000334 	.word	0x20000334

00002e7c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2e7c:	b580      	push	{r7, lr}
    2e7e:	af00      	add	r7, sp, #0
	// Empty
}
    2e80:	46c0      	nop			; (mov r8, r8)
    2e82:	46bd      	mov	sp, r7
    2e84:	bd80      	pop	{r7, pc}

00002e86 <sysTickHook>:
 * SysTick hook
 *
 * This function is called from SysTick handler, before the default
 * handler provided by Arduino.
 */
static int __false() {
    2e86:	b580      	push	{r7, lr}
    2e88:	af00      	add	r7, sp, #0
	// Return false
	return 0;
    2e8a:	2300      	movs	r3, #0
}
    2e8c:	0018      	movs	r0, r3
    2e8e:	46bd      	mov	sp, r7
    2e90:	bd80      	pop	{r7, pc}

00002e92 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2e92:	b580      	push	{r7, lr}
    2e94:	af00      	add	r7, sp, #0
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	46bd      	mov	sp, r7
    2e9a:	bd80      	pop	{r7, pc}

00002e9c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    2e9c:	b580      	push	{r7, lr}
    2e9e:	af00      	add	r7, sp, #0
  init();
    2ea0:	f003 fbf0 	bl	6684 <init>

  __libc_init_array();
    2ea4:	f00d fc6c 	bl	10780 <__libc_init_array>

  initVariant();
    2ea8:	f7ff fff3 	bl	2e92 <_Z11initVariantv>

  delay(1);
    2eac:	2001      	movs	r0, #1
    2eae:	f7ff ffbd 	bl	2e2c <delay>
#if defined(USBCON)
  USBDevice.init();
    2eb2:	4b09      	ldr	r3, [pc, #36]	; (2ed8 <main+0x3c>)
    2eb4:	0018      	movs	r0, r3
    2eb6:	f002 fba1 	bl	55fc <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    2eba:	4b07      	ldr	r3, [pc, #28]	; (2ed8 <main+0x3c>)
    2ebc:	0018      	movs	r0, r3
    2ebe:	f002 fc37 	bl	5730 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    2ec2:	f7ff fdbf 	bl	2a44 <setup>

  for (;;)
  {
    loop();
    2ec6:	f7ff fe07 	bl	2ad8 <loop>
    if (serialEventRun) serialEventRun();
    2eca:	4b04      	ldr	r3, [pc, #16]	; (2edc <main+0x40>)
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d0fa      	beq.n	2ec6 <main+0x2a>
    2ed0:	e000      	b.n	2ed4 <main+0x38>
    2ed2:	bf00      	nop
    loop();
    2ed4:	e7f7      	b.n	2ec6 <main+0x2a>
    2ed6:	46c0      	nop			; (mov r8, r8)
    2ed8:	200008f0 	.word	0x200008f0
    2edc:	00000000 	.word	0x00000000

00002ee0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    2ee0:	b590      	push	{r4, r7, lr}
    2ee2:	b083      	sub	sp, #12
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	6078      	str	r0, [r7, #4]
    2ee8:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    2eea:	683b      	ldr	r3, [r7, #0]
    2eec:	2b00      	cmp	r3, #0
    2eee:	d101      	bne.n	2ef4 <_ZN5Print5writeEPKc+0x14>
    2ef0:	2300      	movs	r3, #0
    2ef2:	e00d      	b.n	2f10 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	3304      	adds	r3, #4
    2efa:	681c      	ldr	r4, [r3, #0]
    2efc:	683b      	ldr	r3, [r7, #0]
    2efe:	0018      	movs	r0, r3
    2f00:	f00e fb36 	bl	11570 <strlen>
    2f04:	0002      	movs	r2, r0
    2f06:	6839      	ldr	r1, [r7, #0]
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	0018      	movs	r0, r3
    2f0c:	47a0      	blx	r4
    2f0e:	0003      	movs	r3, r0
    }
    2f10:	0018      	movs	r0, r3
    2f12:	46bd      	mov	sp, r7
    2f14:	b003      	add	sp, #12
    2f16:	bd90      	pop	{r4, r7, pc}

00002f18 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2f18:	b580      	push	{r7, lr}
    2f1a:	b082      	sub	sp, #8
    2f1c:	af00      	add	r7, sp, #0
    2f1e:	6078      	str	r0, [r7, #4]
    2f20:	2300      	movs	r3, #0
    2f22:	0018      	movs	r0, r3
    2f24:	46bd      	mov	sp, r7
    2f26:	b002      	add	sp, #8
    2f28:	bd80      	pop	{r7, pc}

00002f2a <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2f2a:	b580      	push	{r7, lr}
    2f2c:	b082      	sub	sp, #8
    2f2e:	af00      	add	r7, sp, #0
    2f30:	6078      	str	r0, [r7, #4]
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	46bd      	mov	sp, r7
    2f36:	b002      	add	sp, #8
    2f38:	bd80      	pop	{r7, pc}

00002f3a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2f3a:	b580      	push	{r7, lr}
    2f3c:	b086      	sub	sp, #24
    2f3e:	af00      	add	r7, sp, #0
    2f40:	60f8      	str	r0, [r7, #12]
    2f42:	60b9      	str	r1, [r7, #8]
    2f44:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    2f46:	2300      	movs	r3, #0
    2f48:	617b      	str	r3, [r7, #20]
  while (size--) {
    2f4a:	687b      	ldr	r3, [r7, #4]
    2f4c:	1e5a      	subs	r2, r3, #1
    2f4e:	607a      	str	r2, [r7, #4]
    2f50:	1e5a      	subs	r2, r3, #1
    2f52:	4193      	sbcs	r3, r2
    2f54:	b2db      	uxtb	r3, r3
    2f56:	2b00      	cmp	r3, #0
    2f58:	d014      	beq.n	2f84 <_ZN5Print5writeEPKhj+0x4a>
    if (write(*buffer++)) n++;
    2f5a:	68fb      	ldr	r3, [r7, #12]
    2f5c:	681b      	ldr	r3, [r3, #0]
    2f5e:	681a      	ldr	r2, [r3, #0]
    2f60:	68bb      	ldr	r3, [r7, #8]
    2f62:	1c59      	adds	r1, r3, #1
    2f64:	60b9      	str	r1, [r7, #8]
    2f66:	7819      	ldrb	r1, [r3, #0]
    2f68:	68fb      	ldr	r3, [r7, #12]
    2f6a:	0018      	movs	r0, r3
    2f6c:	4790      	blx	r2
    2f6e:	0003      	movs	r3, r0
    2f70:	1e5a      	subs	r2, r3, #1
    2f72:	4193      	sbcs	r3, r2
    2f74:	b2db      	uxtb	r3, r3
    2f76:	2b00      	cmp	r3, #0
    2f78:	d003      	beq.n	2f82 <_ZN5Print5writeEPKhj+0x48>
    2f7a:	697b      	ldr	r3, [r7, #20]
    2f7c:	3301      	adds	r3, #1
    2f7e:	617b      	str	r3, [r7, #20]
  while (size--) {
    2f80:	e7e3      	b.n	2f4a <_ZN5Print5writeEPKhj+0x10>
    else break;
    2f82:	46c0      	nop			; (mov r8, r8)
  }
  return n;
    2f84:	697b      	ldr	r3, [r7, #20]
}
    2f86:	0018      	movs	r0, r3
    2f88:	46bd      	mov	sp, r7
    2f8a:	b006      	add	sp, #24
    2f8c:	bd80      	pop	{r7, pc}

00002f8e <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    2f8e:	b580      	push	{r7, lr}
    2f90:	b082      	sub	sp, #8
    2f92:	af00      	add	r7, sp, #0
    2f94:	6078      	str	r0, [r7, #4]
    2f96:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
    2f98:	683a      	ldr	r2, [r7, #0]
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	0011      	movs	r1, r2
    2f9e:	0018      	movs	r0, r3
    2fa0:	f000 f805 	bl	2fae <_ZN5Print5printEPKc>
    2fa4:	0003      	movs	r3, r0
}
    2fa6:	0018      	movs	r0, r3
    2fa8:	46bd      	mov	sp, r7
    2faa:	b002      	add	sp, #8
    2fac:	bd80      	pop	{r7, pc}

00002fae <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    2fae:	b580      	push	{r7, lr}
    2fb0:	b082      	sub	sp, #8
    2fb2:	af00      	add	r7, sp, #0
    2fb4:	6078      	str	r0, [r7, #4]
    2fb6:	6039      	str	r1, [r7, #0]
  return write(str);
    2fb8:	683a      	ldr	r2, [r7, #0]
    2fba:	687b      	ldr	r3, [r7, #4]
    2fbc:	0011      	movs	r1, r2
    2fbe:	0018      	movs	r0, r3
    2fc0:	f7ff ff8e 	bl	2ee0 <_ZN5Print5writeEPKc>
    2fc4:	0003      	movs	r3, r0
}
    2fc6:	0018      	movs	r0, r3
    2fc8:	46bd      	mov	sp, r7
    2fca:	b002      	add	sp, #8
    2fcc:	bd80      	pop	{r7, pc}

00002fce <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    2fce:	b580      	push	{r7, lr}
    2fd0:	b082      	sub	sp, #8
    2fd2:	af00      	add	r7, sp, #0
    2fd4:	6078      	str	r0, [r7, #4]
    2fd6:	000a      	movs	r2, r1
    2fd8:	1cfb      	adds	r3, r7, #3
    2fda:	701a      	strb	r2, [r3, #0]
  return write(c);
    2fdc:	687b      	ldr	r3, [r7, #4]
    2fde:	681b      	ldr	r3, [r3, #0]
    2fe0:	681b      	ldr	r3, [r3, #0]
    2fe2:	1cfa      	adds	r2, r7, #3
    2fe4:	7811      	ldrb	r1, [r2, #0]
    2fe6:	687a      	ldr	r2, [r7, #4]
    2fe8:	0010      	movs	r0, r2
    2fea:	4798      	blx	r3
    2fec:	0003      	movs	r3, r0
}
    2fee:	0018      	movs	r0, r3
    2ff0:	46bd      	mov	sp, r7
    2ff2:	b002      	add	sp, #8
    2ff4:	bd80      	pop	{r7, pc}

00002ff6 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
    2ff6:	b580      	push	{r7, lr}
    2ff8:	b084      	sub	sp, #16
    2ffa:	af00      	add	r7, sp, #0
    2ffc:	60f8      	str	r0, [r7, #12]
    2ffe:	607a      	str	r2, [r7, #4]
    3000:	230b      	movs	r3, #11
    3002:	18fb      	adds	r3, r7, r3
    3004:	1c0a      	adds	r2, r1, #0
    3006:	701a      	strb	r2, [r3, #0]
  return print((unsigned long) b, base);
    3008:	230b      	movs	r3, #11
    300a:	18fb      	adds	r3, r7, r3
    300c:	7819      	ldrb	r1, [r3, #0]
    300e:	687a      	ldr	r2, [r7, #4]
    3010:	68fb      	ldr	r3, [r7, #12]
    3012:	0018      	movs	r0, r3
    3014:	f000 f857 	bl	30c6 <_ZN5Print5printEmi>
    3018:	0003      	movs	r3, r0
}
    301a:	0018      	movs	r0, r3
    301c:	46bd      	mov	sp, r7
    301e:	b004      	add	sp, #16
    3020:	bd80      	pop	{r7, pc}

00003022 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    3022:	b580      	push	{r7, lr}
    3024:	b084      	sub	sp, #16
    3026:	af00      	add	r7, sp, #0
    3028:	60f8      	str	r0, [r7, #12]
    302a:	60b9      	str	r1, [r7, #8]
    302c:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    302e:	687a      	ldr	r2, [r7, #4]
    3030:	68b9      	ldr	r1, [r7, #8]
    3032:	68fb      	ldr	r3, [r7, #12]
    3034:	0018      	movs	r0, r3
    3036:	f000 f805 	bl	3044 <_ZN5Print5printEli>
    303a:	0003      	movs	r3, r0
}
    303c:	0018      	movs	r0, r3
    303e:	46bd      	mov	sp, r7
    3040:	b004      	add	sp, #16
    3042:	bd80      	pop	{r7, pc}

00003044 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3044:	b580      	push	{r7, lr}
    3046:	b086      	sub	sp, #24
    3048:	af00      	add	r7, sp, #0
    304a:	60f8      	str	r0, [r7, #12]
    304c:	60b9      	str	r1, [r7, #8]
    304e:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	2b00      	cmp	r3, #0
    3054:	d109      	bne.n	306a <_ZN5Print5printEli+0x26>
    return write(n);
    3056:	68fb      	ldr	r3, [r7, #12]
    3058:	681b      	ldr	r3, [r3, #0]
    305a:	681b      	ldr	r3, [r3, #0]
    305c:	68ba      	ldr	r2, [r7, #8]
    305e:	b2d1      	uxtb	r1, r2
    3060:	68fa      	ldr	r2, [r7, #12]
    3062:	0010      	movs	r0, r2
    3064:	4798      	blx	r3
    3066:	0003      	movs	r3, r0
    3068:	e029      	b.n	30be <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
    306a:	687b      	ldr	r3, [r7, #4]
    306c:	2b0a      	cmp	r3, #10
    306e:	d11e      	bne.n	30ae <_ZN5Print5printEli+0x6a>
    if (n < 0) {
    3070:	68bb      	ldr	r3, [r7, #8]
    3072:	2b00      	cmp	r3, #0
    3074:	da13      	bge.n	309e <_ZN5Print5printEli+0x5a>
      int t = print('-');
    3076:	68fb      	ldr	r3, [r7, #12]
    3078:	212d      	movs	r1, #45	; 0x2d
    307a:	0018      	movs	r0, r3
    307c:	f7ff ffa7 	bl	2fce <_ZN5Print5printEc>
    3080:	0003      	movs	r3, r0
    3082:	617b      	str	r3, [r7, #20]
      n = -n;
    3084:	68bb      	ldr	r3, [r7, #8]
    3086:	425b      	negs	r3, r3
    3088:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    308a:	68b9      	ldr	r1, [r7, #8]
    308c:	68fb      	ldr	r3, [r7, #12]
    308e:	220a      	movs	r2, #10
    3090:	0018      	movs	r0, r3
    3092:	f000 f8f0 	bl	3276 <_ZN5Print11printNumberEmh>
    3096:	0002      	movs	r2, r0
    3098:	697b      	ldr	r3, [r7, #20]
    309a:	18d3      	adds	r3, r2, r3
    309c:	e00f      	b.n	30be <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
    309e:	68b9      	ldr	r1, [r7, #8]
    30a0:	68fb      	ldr	r3, [r7, #12]
    30a2:	220a      	movs	r2, #10
    30a4:	0018      	movs	r0, r3
    30a6:	f000 f8e6 	bl	3276 <_ZN5Print11printNumberEmh>
    30aa:	0003      	movs	r3, r0
    30ac:	e007      	b.n	30be <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
    30ae:	68b9      	ldr	r1, [r7, #8]
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	b2da      	uxtb	r2, r3
    30b4:	68fb      	ldr	r3, [r7, #12]
    30b6:	0018      	movs	r0, r3
    30b8:	f000 f8dd 	bl	3276 <_ZN5Print11printNumberEmh>
    30bc:	0003      	movs	r3, r0
  }
}
    30be:	0018      	movs	r0, r3
    30c0:	46bd      	mov	sp, r7
    30c2:	b006      	add	sp, #24
    30c4:	bd80      	pop	{r7, pc}

000030c6 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    30c6:	b580      	push	{r7, lr}
    30c8:	b084      	sub	sp, #16
    30ca:	af00      	add	r7, sp, #0
    30cc:	60f8      	str	r0, [r7, #12]
    30ce:	60b9      	str	r1, [r7, #8]
    30d0:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	2b00      	cmp	r3, #0
    30d6:	d109      	bne.n	30ec <_ZN5Print5printEmi+0x26>
    30d8:	68fb      	ldr	r3, [r7, #12]
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	681b      	ldr	r3, [r3, #0]
    30de:	68ba      	ldr	r2, [r7, #8]
    30e0:	b2d1      	uxtb	r1, r2
    30e2:	68fa      	ldr	r2, [r7, #12]
    30e4:	0010      	movs	r0, r2
    30e6:	4798      	blx	r3
    30e8:	0003      	movs	r3, r0
    30ea:	e007      	b.n	30fc <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	b2da      	uxtb	r2, r3
    30f0:	68b9      	ldr	r1, [r7, #8]
    30f2:	68fb      	ldr	r3, [r7, #12]
    30f4:	0018      	movs	r0, r3
    30f6:	f000 f8be 	bl	3276 <_ZN5Print11printNumberEmh>
    30fa:	0003      	movs	r3, r0
}
    30fc:	0018      	movs	r0, r3
    30fe:	46bd      	mov	sp, r7
    3100:	b004      	add	sp, #16
    3102:	bd80      	pop	{r7, pc}

00003104 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    3104:	b580      	push	{r7, lr}
    3106:	b084      	sub	sp, #16
    3108:	af00      	add	r7, sp, #0
    310a:	6078      	str	r0, [r7, #4]
    310c:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
    310e:	683a      	ldr	r2, [r7, #0]
    3110:	687b      	ldr	r3, [r7, #4]
    3112:	0011      	movs	r1, r2
    3114:	0018      	movs	r0, r3
    3116:	f7ff ff3a 	bl	2f8e <_ZN5Print5printEPK19__FlashStringHelper>
    311a:	0003      	movs	r3, r0
    311c:	60fb      	str	r3, [r7, #12]
  n += println();
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	0018      	movs	r0, r3
    3122:	f000 f809 	bl	3138 <_ZN5Print7printlnEv>
    3126:	0002      	movs	r2, r0
    3128:	68fb      	ldr	r3, [r7, #12]
    312a:	189b      	adds	r3, r3, r2
    312c:	60fb      	str	r3, [r7, #12]
  return n;
    312e:	68fb      	ldr	r3, [r7, #12]
}
    3130:	0018      	movs	r0, r3
    3132:	46bd      	mov	sp, r7
    3134:	b004      	add	sp, #16
    3136:	bd80      	pop	{r7, pc}

00003138 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    3138:	b580      	push	{r7, lr}
    313a:	b082      	sub	sp, #8
    313c:	af00      	add	r7, sp, #0
    313e:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    3140:	4a05      	ldr	r2, [pc, #20]	; (3158 <_ZN5Print7printlnEv+0x20>)
    3142:	687b      	ldr	r3, [r7, #4]
    3144:	0011      	movs	r1, r2
    3146:	0018      	movs	r0, r3
    3148:	f7ff feca 	bl	2ee0 <_ZN5Print5writeEPKc>
    314c:	0003      	movs	r3, r0
}
    314e:	0018      	movs	r0, r3
    3150:	46bd      	mov	sp, r7
    3152:	b002      	add	sp, #8
    3154:	bd80      	pop	{r7, pc}
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	000133ac 	.word	0x000133ac

0000315c <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    315c:	b580      	push	{r7, lr}
    315e:	b084      	sub	sp, #16
    3160:	af00      	add	r7, sp, #0
    3162:	6078      	str	r0, [r7, #4]
    3164:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
    3166:	683a      	ldr	r2, [r7, #0]
    3168:	687b      	ldr	r3, [r7, #4]
    316a:	0011      	movs	r1, r2
    316c:	0018      	movs	r0, r3
    316e:	f7ff ff1e 	bl	2fae <_ZN5Print5printEPKc>
    3172:	0003      	movs	r3, r0
    3174:	60fb      	str	r3, [r7, #12]
  n += println();
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	0018      	movs	r0, r3
    317a:	f7ff ffdd 	bl	3138 <_ZN5Print7printlnEv>
    317e:	0002      	movs	r2, r0
    3180:	68fb      	ldr	r3, [r7, #12]
    3182:	189b      	adds	r3, r3, r2
    3184:	60fb      	str	r3, [r7, #12]
  return n;
    3186:	68fb      	ldr	r3, [r7, #12]
}
    3188:	0018      	movs	r0, r3
    318a:	46bd      	mov	sp, r7
    318c:	b004      	add	sp, #16
    318e:	bd80      	pop	{r7, pc}

00003190 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    3190:	b580      	push	{r7, lr}
    3192:	b084      	sub	sp, #16
    3194:	af00      	add	r7, sp, #0
    3196:	6078      	str	r0, [r7, #4]
    3198:	000a      	movs	r2, r1
    319a:	1cfb      	adds	r3, r7, #3
    319c:	701a      	strb	r2, [r3, #0]
  size_t n = print(c);
    319e:	1cfb      	adds	r3, r7, #3
    31a0:	781a      	ldrb	r2, [r3, #0]
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	0011      	movs	r1, r2
    31a6:	0018      	movs	r0, r3
    31a8:	f7ff ff11 	bl	2fce <_ZN5Print5printEc>
    31ac:	0003      	movs	r3, r0
    31ae:	60fb      	str	r3, [r7, #12]
  n += println();
    31b0:	687b      	ldr	r3, [r7, #4]
    31b2:	0018      	movs	r0, r3
    31b4:	f7ff ffc0 	bl	3138 <_ZN5Print7printlnEv>
    31b8:	0002      	movs	r2, r0
    31ba:	68fb      	ldr	r3, [r7, #12]
    31bc:	189b      	adds	r3, r3, r2
    31be:	60fb      	str	r3, [r7, #12]
  return n;
    31c0:	68fb      	ldr	r3, [r7, #12]
}
    31c2:	0018      	movs	r0, r3
    31c4:	46bd      	mov	sp, r7
    31c6:	b004      	add	sp, #16
    31c8:	bd80      	pop	{r7, pc}

000031ca <_ZN5Print7printlnEhi>:

size_t Print::println(unsigned char b, int base)
{
    31ca:	b580      	push	{r7, lr}
    31cc:	b086      	sub	sp, #24
    31ce:	af00      	add	r7, sp, #0
    31d0:	60f8      	str	r0, [r7, #12]
    31d2:	607a      	str	r2, [r7, #4]
    31d4:	230b      	movs	r3, #11
    31d6:	18fb      	adds	r3, r7, r3
    31d8:	1c0a      	adds	r2, r1, #0
    31da:	701a      	strb	r2, [r3, #0]
  size_t n = print(b, base);
    31dc:	687a      	ldr	r2, [r7, #4]
    31de:	230b      	movs	r3, #11
    31e0:	18fb      	adds	r3, r7, r3
    31e2:	7819      	ldrb	r1, [r3, #0]
    31e4:	68fb      	ldr	r3, [r7, #12]
    31e6:	0018      	movs	r0, r3
    31e8:	f7ff ff05 	bl	2ff6 <_ZN5Print5printEhi>
    31ec:	0003      	movs	r3, r0
    31ee:	617b      	str	r3, [r7, #20]
  n += println();
    31f0:	68fb      	ldr	r3, [r7, #12]
    31f2:	0018      	movs	r0, r3
    31f4:	f7ff ffa0 	bl	3138 <_ZN5Print7printlnEv>
    31f8:	0002      	movs	r2, r0
    31fa:	697b      	ldr	r3, [r7, #20]
    31fc:	189b      	adds	r3, r3, r2
    31fe:	617b      	str	r3, [r7, #20]
  return n;
    3200:	697b      	ldr	r3, [r7, #20]
}
    3202:	0018      	movs	r0, r3
    3204:	46bd      	mov	sp, r7
    3206:	b006      	add	sp, #24
    3208:	bd80      	pop	{r7, pc}

0000320a <_ZN5Print7printlnEii>:

size_t Print::println(int num, int base)
{
    320a:	b580      	push	{r7, lr}
    320c:	b086      	sub	sp, #24
    320e:	af00      	add	r7, sp, #0
    3210:	60f8      	str	r0, [r7, #12]
    3212:	60b9      	str	r1, [r7, #8]
    3214:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
    3216:	687a      	ldr	r2, [r7, #4]
    3218:	68b9      	ldr	r1, [r7, #8]
    321a:	68fb      	ldr	r3, [r7, #12]
    321c:	0018      	movs	r0, r3
    321e:	f7ff ff00 	bl	3022 <_ZN5Print5printEii>
    3222:	0003      	movs	r3, r0
    3224:	617b      	str	r3, [r7, #20]
  n += println();
    3226:	68fb      	ldr	r3, [r7, #12]
    3228:	0018      	movs	r0, r3
    322a:	f7ff ff85 	bl	3138 <_ZN5Print7printlnEv>
    322e:	0002      	movs	r2, r0
    3230:	697b      	ldr	r3, [r7, #20]
    3232:	189b      	adds	r3, r3, r2
    3234:	617b      	str	r3, [r7, #20]
  return n;
    3236:	697b      	ldr	r3, [r7, #20]
}
    3238:	0018      	movs	r0, r3
    323a:	46bd      	mov	sp, r7
    323c:	b006      	add	sp, #24
    323e:	bd80      	pop	{r7, pc}

00003240 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3240:	b580      	push	{r7, lr}
    3242:	b086      	sub	sp, #24
    3244:	af00      	add	r7, sp, #0
    3246:	60f8      	str	r0, [r7, #12]
    3248:	60b9      	str	r1, [r7, #8]
    324a:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
    324c:	687a      	ldr	r2, [r7, #4]
    324e:	68b9      	ldr	r1, [r7, #8]
    3250:	68fb      	ldr	r3, [r7, #12]
    3252:	0018      	movs	r0, r3
    3254:	f7ff ff37 	bl	30c6 <_ZN5Print5printEmi>
    3258:	0003      	movs	r3, r0
    325a:	617b      	str	r3, [r7, #20]
  n += println();
    325c:	68fb      	ldr	r3, [r7, #12]
    325e:	0018      	movs	r0, r3
    3260:	f7ff ff6a 	bl	3138 <_ZN5Print7printlnEv>
    3264:	0002      	movs	r2, r0
    3266:	697b      	ldr	r3, [r7, #20]
    3268:	189b      	adds	r3, r3, r2
    326a:	617b      	str	r3, [r7, #20]
  return n;
    326c:	697b      	ldr	r3, [r7, #20]
}
    326e:	0018      	movs	r0, r3
    3270:	46bd      	mov	sp, r7
    3272:	b006      	add	sp, #24
    3274:	bd80      	pop	{r7, pc}

00003276 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    3276:	b580      	push	{r7, lr}
    3278:	b08e      	sub	sp, #56	; 0x38
    327a:	af00      	add	r7, sp, #0
    327c:	60f8      	str	r0, [r7, #12]
    327e:	60b9      	str	r1, [r7, #8]
    3280:	1dfb      	adds	r3, r7, #7
    3282:	701a      	strb	r2, [r3, #0]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    3284:	2310      	movs	r3, #16
    3286:	18fb      	adds	r3, r7, r3
    3288:	3320      	adds	r3, #32
    328a:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    328e:	2200      	movs	r2, #0
    3290:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3292:	1dfb      	adds	r3, r7, #7
    3294:	781b      	ldrb	r3, [r3, #0]
    3296:	2b01      	cmp	r3, #1
    3298:	dc02      	bgt.n	32a0 <_ZN5Print11printNumberEmh+0x2a>
    329a:	1dfb      	adds	r3, r7, #7
    329c:	220a      	movs	r2, #10
    329e:	701a      	strb	r2, [r3, #0]

  do {
    char c = n % base;
    32a0:	1dfb      	adds	r3, r7, #7
    32a2:	781a      	ldrb	r2, [r3, #0]
    32a4:	68bb      	ldr	r3, [r7, #8]
    32a6:	0011      	movs	r1, r2
    32a8:	0018      	movs	r0, r3
    32aa:	f00b fb7b 	bl	e9a4 <__aeabi_uidivmod>
    32ae:	000b      	movs	r3, r1
    32b0:	001a      	movs	r2, r3
    32b2:	2333      	movs	r3, #51	; 0x33
    32b4:	18fb      	adds	r3, r7, r3
    32b6:	701a      	strb	r2, [r3, #0]
    n /= base;
    32b8:	1dfb      	adds	r3, r7, #7
    32ba:	781b      	ldrb	r3, [r3, #0]
    32bc:	0019      	movs	r1, r3
    32be:	68b8      	ldr	r0, [r7, #8]
    32c0:	f00b faea 	bl	e898 <__udivsi3>
    32c4:	0003      	movs	r3, r0
    32c6:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    32c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32ca:	3b01      	subs	r3, #1
    32cc:	637b      	str	r3, [r7, #52]	; 0x34
    32ce:	2333      	movs	r3, #51	; 0x33
    32d0:	18fb      	adds	r3, r7, r3
    32d2:	781b      	ldrb	r3, [r3, #0]
    32d4:	2b09      	cmp	r3, #9
    32d6:	dc05      	bgt.n	32e4 <_ZN5Print11printNumberEmh+0x6e>
    32d8:	2333      	movs	r3, #51	; 0x33
    32da:	18fb      	adds	r3, r7, r3
    32dc:	781b      	ldrb	r3, [r3, #0]
    32de:	3330      	adds	r3, #48	; 0x30
    32e0:	b2db      	uxtb	r3, r3
    32e2:	e004      	b.n	32ee <_ZN5Print11printNumberEmh+0x78>
    32e4:	2333      	movs	r3, #51	; 0x33
    32e6:	18fb      	adds	r3, r7, r3
    32e8:	781b      	ldrb	r3, [r3, #0]
    32ea:	3337      	adds	r3, #55	; 0x37
    32ec:	b2db      	uxtb	r3, r3
    32ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    32f0:	7013      	strb	r3, [r2, #0]
  } while(n);
    32f2:	68bb      	ldr	r3, [r7, #8]
    32f4:	2b00      	cmp	r3, #0
    32f6:	d004      	beq.n	3302 <_ZN5Print11printNumberEmh+0x8c>
    32f8:	1dfb      	adds	r3, r7, #7
    32fa:	1dfa      	adds	r2, r7, #7
    32fc:	7812      	ldrb	r2, [r2, #0]
    32fe:	701a      	strb	r2, [r3, #0]
  do {
    3300:	e7ce      	b.n	32a0 <_ZN5Print11printNumberEmh+0x2a>

  return write(str);
    3302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3304:	68fb      	ldr	r3, [r7, #12]
    3306:	0011      	movs	r1, r2
    3308:	0018      	movs	r0, r3
    330a:	f7ff fde9 	bl	2ee0 <_ZN5Print5writeEPKc>
    330e:	0003      	movs	r3, r0
}
    3310:	0018      	movs	r0, r3
    3312:	46bd      	mov	sp, r7
    3314:	b00e      	add	sp, #56	; 0x38
    3316:	bd80      	pop	{r7, pc}

00003318 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    3318:	b580      	push	{r7, lr}
    331a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    331c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    3320:	4b03      	ldr	r3, [pc, #12]	; (3330 <NVIC_SystemReset+0x18>)
    3322:	4a04      	ldr	r2, [pc, #16]	; (3334 <NVIC_SystemReset+0x1c>)
    3324:	60da      	str	r2, [r3, #12]
    3326:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	e7fd      	b.n	332a <NVIC_SystemReset+0x12>
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	e000ed00 	.word	0xe000ed00
    3334:	05fa0004 	.word	0x05fa0004

00003338 <nvmReady>:

#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
    3338:	b580      	push	{r7, lr}
    333a:	af00      	add	r7, sp, #0
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    333c:	4b05      	ldr	r3, [pc, #20]	; (3354 <nvmReady+0x1c>)
    333e:	7d1b      	ldrb	r3, [r3, #20]
    3340:	b2db      	uxtb	r3, r3
    3342:	001a      	movs	r2, r3
    3344:	2301      	movs	r3, #1
    3346:	4013      	ands	r3, r2
    3348:	1e5a      	subs	r2, r3, #1
    334a:	4193      	sbcs	r3, r2
    334c:	b2db      	uxtb	r3, r3
}
    334e:	0018      	movs	r0, r3
    3350:	46bd      	mov	sp, r7
    3352:	bd80      	pop	{r7, pc}
    3354:	41004000 	.word	0x41004000

00003358 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
    3358:	b580      	push	{r7, lr}
    335a:	b082      	sub	sp, #8
    335c:	af00      	add	r7, sp, #0
    335e:	6078      	str	r0, [r7, #4]
	ticks = _ticks;
    3360:	4b03      	ldr	r3, [pc, #12]	; (3370 <initiateReset+0x18>)
    3362:	687a      	ldr	r2, [r7, #4]
    3364:	601a      	str	r2, [r3, #0]
}
    3366:	46c0      	nop			; (mov r8, r8)
    3368:	46bd      	mov	sp, r7
    336a:	b002      	add	sp, #8
    336c:	bd80      	pop	{r7, pc}
    336e:	46c0      	nop			; (mov r8, r8)
    3370:	2000001c 	.word	0x2000001c

00003374 <cancelReset>:

void cancelReset() {
    3374:	b580      	push	{r7, lr}
    3376:	af00      	add	r7, sp, #0
	ticks = -1;
    3378:	4b03      	ldr	r3, [pc, #12]	; (3388 <cancelReset+0x14>)
    337a:	2201      	movs	r2, #1
    337c:	4252      	negs	r2, r2
    337e:	601a      	str	r2, [r3, #0]
}
    3380:	46c0      	nop			; (mov r8, r8)
    3382:	46bd      	mov	sp, r7
    3384:	bd80      	pop	{r7, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	2000001c 	.word	0x2000001c

0000338c <tickReset>:

void tickReset() {
    338c:	b580      	push	{r7, lr}
    338e:	af00      	add	r7, sp, #0
	if (ticks == -1)
    3390:	4b09      	ldr	r3, [pc, #36]	; (33b8 <tickReset+0x2c>)
    3392:	681b      	ldr	r3, [r3, #0]
    3394:	3301      	adds	r3, #1
    3396:	d00b      	beq.n	33b0 <tickReset+0x24>
		return;
	ticks--;
    3398:	4b07      	ldr	r3, [pc, #28]	; (33b8 <tickReset+0x2c>)
    339a:	681b      	ldr	r3, [r3, #0]
    339c:	1e5a      	subs	r2, r3, #1
    339e:	4b06      	ldr	r3, [pc, #24]	; (33b8 <tickReset+0x2c>)
    33a0:	601a      	str	r2, [r3, #0]
	if (ticks == 0)
    33a2:	4b05      	ldr	r3, [pc, #20]	; (33b8 <tickReset+0x2c>)
    33a4:	681b      	ldr	r3, [r3, #0]
    33a6:	2b00      	cmp	r3, #0
    33a8:	d103      	bne.n	33b2 <tickReset+0x26>
		banzai();
    33aa:	4b04      	ldr	r3, [pc, #16]	; (33bc <tickReset+0x30>)
    33ac:	4798      	blx	r3
    33ae:	e000      	b.n	33b2 <tickReset+0x26>
		return;
    33b0:	46c0      	nop			; (mov r8, r8)
}
    33b2:	46bd      	mov	sp, r7
    33b4:	bd80      	pop	{r7, pc}
    33b6:	46c0      	nop			; (mov r8, r8)
    33b8:	2000001c 	.word	0x2000001c
    33bc:	00014449 	.word	0x00014449

000033c0 <SystemInit>:
#define GENERIC_CLOCK_GENERATOR_OSC8M     (3u)
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
    33c0:	b580      	push	{r7, lr}
    33c2:	b082      	sub	sp, #8
    33c4:	af00      	add	r7, sp, #0
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    33c6:	4a75      	ldr	r2, [pc, #468]	; (359c <SystemInit+0x1dc>)
    33c8:	6853      	ldr	r3, [r2, #4]
    33ca:	211e      	movs	r1, #30
    33cc:	438b      	bics	r3, r1
    33ce:	2102      	movs	r1, #2
    33d0:	430b      	orrs	r3, r1
    33d2:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    33d4:	4b72      	ldr	r3, [pc, #456]	; (35a0 <SystemInit+0x1e0>)
    33d6:	4a72      	ldr	r2, [pc, #456]	; (35a0 <SystemInit+0x1e0>)
    33d8:	6992      	ldr	r2, [r2, #24]
    33da:	2108      	movs	r1, #8
    33dc:	430a      	orrs	r2, r1
    33de:	619a      	str	r2, [r3, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    33e0:	4b70      	ldr	r3, [pc, #448]	; (35a4 <SystemInit+0x1e4>)
    33e2:	4a71      	ldr	r2, [pc, #452]	; (35a8 <SystemInit+0x1e8>)
    33e4:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    33e6:	4a6f      	ldr	r2, [pc, #444]	; (35a4 <SystemInit+0x1e4>)
    33e8:	8a93      	ldrh	r3, [r2, #20]
    33ea:	2102      	movs	r1, #2
    33ec:	430b      	orrs	r3, r1
    33ee:	8293      	strh	r3, [r2, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    33f0:	46c0      	nop			; (mov r8, r8)
    33f2:	4b6c      	ldr	r3, [pc, #432]	; (35a4 <SystemInit+0x1e4>)
    33f4:	68db      	ldr	r3, [r3, #12]
    33f6:	2202      	movs	r2, #2
    33f8:	4013      	ands	r3, r2
    33fa:	d0fa      	beq.n	33f2 <SystemInit+0x32>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    33fc:	4b6b      	ldr	r3, [pc, #428]	; (35ac <SystemInit+0x1ec>)
    33fe:	2201      	movs	r2, #1
    3400:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	4b69      	ldr	r3, [pc, #420]	; (35ac <SystemInit+0x1ec>)
    3406:	781b      	ldrb	r3, [r3, #0]
    3408:	b2db      	uxtb	r3, r3
    340a:	001a      	movs	r2, r3
    340c:	2301      	movs	r3, #1
    340e:	4013      	ands	r3, r2
    3410:	d005      	beq.n	341e <SystemInit+0x5e>
    3412:	4b66      	ldr	r3, [pc, #408]	; (35ac <SystemInit+0x1ec>)
    3414:	785b      	ldrb	r3, [r3, #1]
    3416:	b2db      	uxtb	r3, r3
    3418:	b25b      	sxtb	r3, r3
    341a:	2b00      	cmp	r3, #0
    341c:	dbf2      	blt.n	3404 <SystemInit+0x44>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    341e:	4b63      	ldr	r3, [pc, #396]	; (35ac <SystemInit+0x1ec>)
    3420:	2201      	movs	r2, #1
    3422:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3424:	46c0      	nop			; (mov r8, r8)
    3426:	4b61      	ldr	r3, [pc, #388]	; (35ac <SystemInit+0x1ec>)
    3428:	785b      	ldrb	r3, [r3, #1]
    342a:	b2db      	uxtb	r3, r3
    342c:	b25b      	sxtb	r3, r3
    342e:	2b00      	cmp	r3, #0
    3430:	dbf9      	blt.n	3426 <SystemInit+0x66>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    3432:	4b5e      	ldr	r3, [pc, #376]	; (35ac <SystemInit+0x1ec>)
    3434:	4a5e      	ldr	r2, [pc, #376]	; (35b0 <SystemInit+0x1f0>)
    3436:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3438:	46c0      	nop			; (mov r8, r8)
    343a:	4b5c      	ldr	r3, [pc, #368]	; (35ac <SystemInit+0x1ec>)
    343c:	785b      	ldrb	r3, [r3, #1]
    343e:	b2db      	uxtb	r3, r3
    3440:	b25b      	sxtb	r3, r3
    3442:	2b00      	cmp	r3, #0
    3444:	dbf9      	blt.n	343a <SystemInit+0x7a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    3446:	4b59      	ldr	r3, [pc, #356]	; (35ac <SystemInit+0x1ec>)
    3448:	2282      	movs	r2, #130	; 0x82
    344a:	01d2      	lsls	r2, r2, #7
    344c:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	4b56      	ldr	r3, [pc, #344]	; (35ac <SystemInit+0x1ec>)
    3452:	785b      	ldrb	r3, [r3, #1]
    3454:	b2db      	uxtb	r3, r3
    3456:	b25b      	sxtb	r3, r3
    3458:	2b00      	cmp	r3, #0
    345a:	dbf9      	blt.n	3450 <SystemInit+0x90>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    345c:	4b51      	ldr	r3, [pc, #324]	; (35a4 <SystemInit+0x1e4>)
    345e:	2202      	movs	r2, #2
    3460:	849a      	strh	r2, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	4b4f      	ldr	r3, [pc, #316]	; (35a4 <SystemInit+0x1e4>)
    3466:	68db      	ldr	r3, [r3, #12]
    3468:	2210      	movs	r2, #16
    346a:	4013      	ands	r3, r2
    346c:	d0fa      	beq.n	3464 <SystemInit+0xa4>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    346e:	4b4d      	ldr	r3, [pc, #308]	; (35a4 <SystemInit+0x1e4>)
    3470:	4a50      	ldr	r2, [pc, #320]	; (35b4 <SystemInit+0x1f4>)
    3472:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    3474:	46c0      	nop			; (mov r8, r8)
    3476:	4b4b      	ldr	r3, [pc, #300]	; (35a4 <SystemInit+0x1e4>)
    3478:	68db      	ldr	r3, [r3, #12]
    347a:	2210      	movs	r2, #16
    347c:	4013      	ands	r3, r2
    347e:	d0fa      	beq.n	3476 <SystemInit+0xb6>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    3480:	4a48      	ldr	r2, [pc, #288]	; (35a4 <SystemInit+0x1e4>)
    3482:	4b48      	ldr	r3, [pc, #288]	; (35a4 <SystemInit+0x1e4>)
    3484:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3486:	b29b      	uxth	r3, r3
    3488:	494b      	ldr	r1, [pc, #300]	; (35b8 <SystemInit+0x1f8>)
    348a:	430b      	orrs	r3, r1
    348c:	b29b      	uxth	r3, r3
    348e:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    3490:	46c0      	nop			; (mov r8, r8)
    3492:	4b44      	ldr	r3, [pc, #272]	; (35a4 <SystemInit+0x1e4>)
    3494:	68db      	ldr	r3, [r3, #12]
    3496:	2210      	movs	r2, #16
    3498:	4013      	ands	r3, r2
    349a:	d0fa      	beq.n	3492 <SystemInit+0xd2>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    349c:	4a41      	ldr	r2, [pc, #260]	; (35a4 <SystemInit+0x1e4>)
    349e:	4b41      	ldr	r3, [pc, #260]	; (35a4 <SystemInit+0x1e4>)
    34a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    34a2:	b29b      	uxth	r3, r3
    34a4:	2102      	movs	r1, #2
    34a6:	430b      	orrs	r3, r1
    34a8:	b29b      	uxth	r3, r3
    34aa:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    34ac:	46c0      	nop			; (mov r8, r8)
    34ae:	4b3d      	ldr	r3, [pc, #244]	; (35a4 <SystemInit+0x1e4>)
    34b0:	68db      	ldr	r3, [r3, #12]
    34b2:	2280      	movs	r2, #128	; 0x80
    34b4:	4013      	ands	r3, r2
    34b6:	d0fa      	beq.n	34ae <SystemInit+0xee>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    34b8:	4b3a      	ldr	r3, [pc, #232]	; (35a4 <SystemInit+0x1e4>)
    34ba:	68db      	ldr	r3, [r3, #12]
    34bc:	2240      	movs	r2, #64	; 0x40
    34be:	4013      	ands	r3, r2
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    34c0:	d0f5      	beq.n	34ae <SystemInit+0xee>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	4b37      	ldr	r3, [pc, #220]	; (35a4 <SystemInit+0x1e4>)
    34c6:	68db      	ldr	r3, [r3, #12]
    34c8:	2210      	movs	r2, #16
    34ca:	4013      	ands	r3, r2
    34cc:	d0fa      	beq.n	34c4 <SystemInit+0x104>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    34ce:	4b37      	ldr	r3, [pc, #220]	; (35ac <SystemInit+0x1ec>)
    34d0:	2200      	movs	r2, #0
    34d2:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    34d4:	46c0      	nop			; (mov r8, r8)
    34d6:	4b35      	ldr	r3, [pc, #212]	; (35ac <SystemInit+0x1ec>)
    34d8:	785b      	ldrb	r3, [r3, #1]
    34da:	b2db      	uxtb	r3, r3
    34dc:	b25b      	sxtb	r3, r3
    34de:	2b00      	cmp	r3, #0
    34e0:	dbf9      	blt.n	34d6 <SystemInit+0x116>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    34e2:	4b32      	ldr	r3, [pc, #200]	; (35ac <SystemInit+0x1ec>)
    34e4:	4a35      	ldr	r2, [pc, #212]	; (35bc <SystemInit+0x1fc>)
    34e6:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    34e8:	46c0      	nop			; (mov r8, r8)
    34ea:	4b30      	ldr	r3, [pc, #192]	; (35ac <SystemInit+0x1ec>)
    34ec:	785b      	ldrb	r3, [r3, #1]
    34ee:	b2db      	uxtb	r3, r3
    34f0:	b25b      	sxtb	r3, r3
    34f2:	2b00      	cmp	r3, #0
    34f4:	dbf9      	blt.n	34ea <SystemInit+0x12a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    34f6:	4a2b      	ldr	r2, [pc, #172]	; (35a4 <SystemInit+0x1e4>)
    34f8:	6a13      	ldr	r3, [r2, #32]
    34fa:	4931      	ldr	r1, [pc, #196]	; (35c0 <SystemInit+0x200>)
    34fc:	400b      	ands	r3, r1
    34fe:	6213      	str	r3, [r2, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    3500:	4a28      	ldr	r2, [pc, #160]	; (35a4 <SystemInit+0x1e4>)
    3502:	6a13      	ldr	r3, [r2, #32]
    3504:	2180      	movs	r1, #128	; 0x80
    3506:	438b      	bics	r3, r1
    3508:	6213      	str	r3, [r2, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    350a:	4b28      	ldr	r3, [pc, #160]	; (35ac <SystemInit+0x1ec>)
    350c:	2203      	movs	r2, #3
    350e:	609a      	str	r2, [r3, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    3510:	4b26      	ldr	r3, [pc, #152]	; (35ac <SystemInit+0x1ec>)
    3512:	4a2c      	ldr	r2, [pc, #176]	; (35c4 <SystemInit+0x204>)
    3514:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	4b24      	ldr	r3, [pc, #144]	; (35ac <SystemInit+0x1ec>)
    351a:	785b      	ldrb	r3, [r3, #1]
    351c:	b2db      	uxtb	r3, r3
    351e:	b25b      	sxtb	r3, r3
    3520:	2b00      	cmp	r3, #0
    3522:	dbf9      	blt.n	3518 <SystemInit+0x158>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    3524:	4b1e      	ldr	r3, [pc, #120]	; (35a0 <SystemInit+0x1e0>)
    3526:	2200      	movs	r2, #0
    3528:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    352a:	4b1d      	ldr	r3, [pc, #116]	; (35a0 <SystemInit+0x1e0>)
    352c:	2200      	movs	r2, #0
    352e:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    3530:	4b1b      	ldr	r3, [pc, #108]	; (35a0 <SystemInit+0x1e0>)
    3532:	2200      	movs	r2, #0
    3534:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    3536:	4b1a      	ldr	r3, [pc, #104]	; (35a0 <SystemInit+0x1e0>)
    3538:	2200      	movs	r2, #0
    353a:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=VARIANT_MCK ;
    353c:	4b22      	ldr	r3, [pc, #136]	; (35c8 <SystemInit+0x208>)
    353e:	4a23      	ldr	r2, [pc, #140]	; (35cc <SystemInit+0x20c>)
    3540:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    3542:	4b23      	ldr	r3, [pc, #140]	; (35d0 <SystemInit+0x210>)
    3544:	681b      	ldr	r3, [r3, #0]
    3546:	08db      	lsrs	r3, r3, #3
    3548:	2207      	movs	r2, #7
    354a:	4013      	ands	r3, r2
    354c:	607b      	str	r3, [r7, #4]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    354e:	4b21      	ldr	r3, [pc, #132]	; (35d4 <SystemInit+0x214>)
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	0edb      	lsrs	r3, r3, #27
    3554:	603b      	str	r3, [r7, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    3556:	4b1e      	ldr	r3, [pc, #120]	; (35d0 <SystemInit+0x210>)
    3558:	681b      	ldr	r3, [r3, #0]
    355a:	015b      	lsls	r3, r3, #5
    355c:	22ff      	movs	r2, #255	; 0xff
    355e:	4013      	ands	r3, r2
    3560:	683a      	ldr	r2, [r7, #0]
    3562:	4313      	orrs	r3, r2
    3564:	603b      	str	r3, [r7, #0]

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    3566:	491c      	ldr	r1, [pc, #112]	; (35d8 <SystemInit+0x218>)
    3568:	687b      	ldr	r3, [r7, #4]
    356a:	b29b      	uxth	r3, r3
    356c:	021b      	lsls	r3, r3, #8
    356e:	b29a      	uxth	r2, r3
    3570:	23e0      	movs	r3, #224	; 0xe0
    3572:	00db      	lsls	r3, r3, #3
    3574:	4013      	ands	r3, r2
    3576:	b29a      	uxth	r2, r3
    3578:	683b      	ldr	r3, [r7, #0]
    357a:	b29b      	uxth	r3, r3
    357c:	20ff      	movs	r0, #255	; 0xff
    357e:	4003      	ands	r3, r0
    3580:	b29b      	uxth	r3, r3
    3582:	4313      	orrs	r3, r2
    3584:	b29b      	uxth	r3, r3
    3586:	850b      	strh	r3, [r1, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    3588:	4a04      	ldr	r2, [pc, #16]	; (359c <SystemInit+0x1dc>)
    358a:	6853      	ldr	r3, [r2, #4]
    358c:	2180      	movs	r1, #128	; 0x80
    358e:	430b      	orrs	r3, r1
    3590:	6053      	str	r3, [r2, #4]
}
    3592:	46c0      	nop			; (mov r8, r8)
    3594:	46bd      	mov	sp, r7
    3596:	b002      	add	sp, #8
    3598:	bd80      	pop	{r7, pc}
    359a:	46c0      	nop			; (mov r8, r8)
    359c:	41004000 	.word	0x41004000
    35a0:	40000400 	.word	0x40000400
    35a4:	40000800 	.word	0x40000800
    35a8:	0000060c 	.word	0x0000060c
    35ac:	40000c00 	.word	0x40000c00
    35b0:	00010501 	.word	0x00010501
    35b4:	7dff05b9 	.word	0x7dff05b9
    35b8:	00000a04 	.word	0x00000a04
    35bc:	00030700 	.word	0x00030700
    35c0:	fffffcff 	.word	0xfffffcff
    35c4:	00010603 	.word	0x00010603
    35c8:	20000048 	.word	0x20000048
    35cc:	02dc6c00 	.word	0x02dc6c00
    35d0:	00806024 	.word	0x00806024
    35d4:	00806020 	.word	0x00806020
    35d8:	42004000 	.word	0x42004000

000035dc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
    35dc:	b580      	push	{r7, lr}
    35de:	b082      	sub	sp, #8
    35e0:	af00      	add	r7, sp, #0
    35e2:	6078      	str	r0, [r7, #4]
    35e4:	4a05      	ldr	r2, [pc, #20]	; (35fc <_ZN5PrintC1Ev+0x20>)
    35e6:	687b      	ldr	r3, [r7, #4]
    35e8:	601a      	str	r2, [r3, #0]
    35ea:	687b      	ldr	r3, [r7, #4]
    35ec:	2200      	movs	r2, #0
    35ee:	605a      	str	r2, [r3, #4]
    35f0:	687b      	ldr	r3, [r7, #4]
    35f2:	0018      	movs	r0, r3
    35f4:	46bd      	mov	sp, r7
    35f6:	b002      	add	sp, #8
    35f8:	bd80      	pop	{r7, pc}
    35fa:	46c0      	nop			; (mov r8, r8)
    35fc:	000133c4 	.word	0x000133c4

00003600 <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3600:	b580      	push	{r7, lr}
    3602:	b082      	sub	sp, #8
    3604:	af00      	add	r7, sp, #0
    3606:	6078      	str	r0, [r7, #4]
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	0018      	movs	r0, r3
    360c:	f7ff ffe6 	bl	35dc <_ZN5PrintC1Ev>
    3610:	4a05      	ldr	r2, [pc, #20]	; (3628 <_ZN6StreamC1Ev+0x28>)
    3612:	687b      	ldr	r3, [r7, #4]
    3614:	601a      	str	r2, [r3, #0]
    3616:	687b      	ldr	r3, [r7, #4]
    3618:	22fa      	movs	r2, #250	; 0xfa
    361a:	0092      	lsls	r2, r2, #2
    361c:	609a      	str	r2, [r3, #8]
    361e:	687b      	ldr	r3, [r7, #4]
    3620:	0018      	movs	r0, r3
    3622:	46bd      	mov	sp, r7
    3624:	b002      	add	sp, #8
    3626:	bd80      	pop	{r7, pc}
    3628:	00013454 	.word	0x00013454

0000362c <_ZN14HardwareSerialC1Ev>:

class HardwareSerial : public Stream
{
	public:
	
	HardwareSerial() {};
    362c:	b580      	push	{r7, lr}
    362e:	b082      	sub	sp, #8
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	0018      	movs	r0, r3
    3638:	f7ff ffe2 	bl	3600 <_ZN6StreamC1Ev>
    363c:	4a03      	ldr	r2, [pc, #12]	; (364c <_ZN14HardwareSerialC1Ev+0x20>)
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	601a      	str	r2, [r3, #0]
    3642:	687b      	ldr	r3, [r7, #4]
    3644:	0018      	movs	r0, r3
    3646:	46bd      	mov	sp, r7
    3648:	b002      	add	sp, #8
    364a:	bd80      	pop	{r7, pc}
    364c:	00013418 	.word	0x00013418

00003650 <_ZN14HardwareSerialD1Ev>:
	virtual ~HardwareSerial() {};
    3650:	b580      	push	{r7, lr}
    3652:	b082      	sub	sp, #8
    3654:	af00      	add	r7, sp, #0
    3656:	6078      	str	r0, [r7, #4]
    3658:	4a03      	ldr	r2, [pc, #12]	; (3668 <_ZN14HardwareSerialD1Ev+0x18>)
    365a:	687b      	ldr	r3, [r7, #4]
    365c:	601a      	str	r2, [r3, #0]
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	0018      	movs	r0, r3
    3662:	46bd      	mov	sp, r7
    3664:	b002      	add	sp, #8
    3666:	bd80      	pop	{r7, pc}
    3668:	00013418 	.word	0x00013418

0000366c <_ZN14HardwareSerialD0Ev>:
    366c:	b580      	push	{r7, lr}
    366e:	b082      	sub	sp, #8
    3670:	af00      	add	r7, sp, #0
    3672:	6078      	str	r0, [r7, #4]
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	0018      	movs	r0, r3
    3678:	f7ff ffea 	bl	3650 <_ZN14HardwareSerialD1Ev>
    367c:	687b      	ldr	r3, [r7, #4]
    367e:	0018      	movs	r0, r3
    3680:	f00a f83b 	bl	d6fa <_ZdlPv>
    3684:	687b      	ldr	r3, [r7, #4]
    3686:	0018      	movs	r0, r3
    3688:	46bd      	mov	sp, r7
    368a:	b002      	add	sp, #8
    368c:	bd80      	pop	{r7, pc}

0000368e <_ZN14HardwareSerial5beginEm>:
	
	virtual void begin(unsigned long) {};
    368e:	b580      	push	{r7, lr}
    3690:	b082      	sub	sp, #8
    3692:	af00      	add	r7, sp, #0
    3694:	6078      	str	r0, [r7, #4]
    3696:	6039      	str	r1, [r7, #0]
    3698:	46c0      	nop			; (mov r8, r8)
    369a:	46bd      	mov	sp, r7
    369c:	b002      	add	sp, #8
    369e:	bd80      	pop	{r7, pc}

000036a0 <_ZN14HardwareSerial5beginEmt>:
	virtual void begin(unsigned long baudrate, uint16_t config) {};
    36a0:	b580      	push	{r7, lr}
    36a2:	b084      	sub	sp, #16
    36a4:	af00      	add	r7, sp, #0
    36a6:	60f8      	str	r0, [r7, #12]
    36a8:	60b9      	str	r1, [r7, #8]
    36aa:	1dbb      	adds	r3, r7, #6
    36ac:	801a      	strh	r2, [r3, #0]
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	46bd      	mov	sp, r7
    36b2:	b004      	add	sp, #16
    36b4:	bd80      	pop	{r7, pc}

000036b6 <_ZN14HardwareSerial3endEv>:
	virtual void end() {};
    36b6:	b580      	push	{r7, lr}
    36b8:	b082      	sub	sp, #8
    36ba:	af00      	add	r7, sp, #0
    36bc:	6078      	str	r0, [r7, #4]
    36be:	46c0      	nop			; (mov r8, r8)
    36c0:	46bd      	mov	sp, r7
    36c2:	b002      	add	sp, #8
    36c4:	bd80      	pop	{r7, pc}
	...

000036c8 <__NVIC_GetPriority>:
{
    36c8:	b580      	push	{r7, lr}
    36ca:	b082      	sub	sp, #8
    36cc:	af00      	add	r7, sp, #0
    36ce:	0002      	movs	r2, r0
    36d0:	1dfb      	adds	r3, r7, #7
    36d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    36d4:	1dfb      	adds	r3, r7, #7
    36d6:	781b      	ldrb	r3, [r3, #0]
    36d8:	2b7f      	cmp	r3, #127	; 0x7f
    36da:	d813      	bhi.n	3704 <__NVIC_GetPriority+0x3c>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    36dc:	4a17      	ldr	r2, [pc, #92]	; (373c <__NVIC_GetPriority+0x74>)
    36de:	1dfb      	adds	r3, r7, #7
    36e0:	781b      	ldrb	r3, [r3, #0]
    36e2:	b25b      	sxtb	r3, r3
    36e4:	089b      	lsrs	r3, r3, #2
    36e6:	33c0      	adds	r3, #192	; 0xc0
    36e8:	009b      	lsls	r3, r3, #2
    36ea:	589a      	ldr	r2, [r3, r2]
    36ec:	1dfb      	adds	r3, r7, #7
    36ee:	781b      	ldrb	r3, [r3, #0]
    36f0:	b25b      	sxtb	r3, r3
    36f2:	2103      	movs	r1, #3
    36f4:	400b      	ands	r3, r1
    36f6:	00db      	lsls	r3, r3, #3
    36f8:	40da      	lsrs	r2, r3
    36fa:	0013      	movs	r3, r2
    36fc:	099b      	lsrs	r3, r3, #6
    36fe:	2203      	movs	r2, #3
    3700:	4013      	ands	r3, r2
    3702:	e017      	b.n	3734 <__NVIC_GetPriority+0x6c>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    3704:	4a0e      	ldr	r2, [pc, #56]	; (3740 <__NVIC_GetPriority+0x78>)
    3706:	1dfb      	adds	r3, r7, #7
    3708:	781b      	ldrb	r3, [r3, #0]
    370a:	b25b      	sxtb	r3, r3
    370c:	210f      	movs	r1, #15
    370e:	400b      	ands	r3, r1
    3710:	3b08      	subs	r3, #8
    3712:	089b      	lsrs	r3, r3, #2
    3714:	3306      	adds	r3, #6
    3716:	009b      	lsls	r3, r3, #2
    3718:	18d3      	adds	r3, r2, r3
    371a:	3304      	adds	r3, #4
    371c:	681a      	ldr	r2, [r3, #0]
    371e:	1dfb      	adds	r3, r7, #7
    3720:	781b      	ldrb	r3, [r3, #0]
    3722:	b25b      	sxtb	r3, r3
    3724:	2103      	movs	r1, #3
    3726:	400b      	ands	r3, r1
    3728:	00db      	lsls	r3, r3, #3
    372a:	40da      	lsrs	r2, r3
    372c:	0013      	movs	r3, r2
    372e:	099b      	lsrs	r3, r3, #6
    3730:	2203      	movs	r2, #3
    3732:	4013      	ands	r3, r2
}
    3734:	0018      	movs	r0, r3
    3736:	46bd      	mov	sp, r7
    3738:	b002      	add	sp, #8
    373a:	bd80      	pop	{r7, pc}
    373c:	e000e100 	.word	0xe000e100
    3740:	e000ed00 	.word	0xe000ed00

00003744 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    3744:	b580      	push	{r7, lr}
    3746:	b082      	sub	sp, #8
    3748:	af00      	add	r7, sp, #0
    374a:	6078      	str	r0, [r7, #4]
    374c:	2301      	movs	r3, #1
    374e:	0018      	movs	r0, r3
    3750:	46bd      	mov	sp, r7
    3752:	b002      	add	sp, #8
    3754:	bd80      	pop	{r7, pc}

00003756 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:

#define NO_RTS_PIN 255
#define NO_CTS_PIN 255
#define RTS_RX_THRESHOLD 10

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    3756:	b590      	push	{r4, r7, lr}
    3758:	b089      	sub	sp, #36	; 0x24
    375a:	af04      	add	r7, sp, #16
    375c:	60f8      	str	r0, [r7, #12]
    375e:	60b9      	str	r1, [r7, #8]
    3760:	0019      	movs	r1, r3
    3762:	1dfb      	adds	r3, r7, #7
    3764:	701a      	strb	r2, [r3, #0]
    3766:	1dbb      	adds	r3, r7, #6
    3768:	1c0a      	adds	r2, r1, #0
    376a:	701a      	strb	r2, [r3, #0]
  Uart(_s, _pinRX, _pinTX, _padRX, _padTX, NO_RTS_PIN, NO_CTS_PIN)
    376c:	1dbb      	adds	r3, r7, #6
    376e:	781c      	ldrb	r4, [r3, #0]
    3770:	1dfb      	adds	r3, r7, #7
    3772:	781a      	ldrb	r2, [r3, #0]
    3774:	68b9      	ldr	r1, [r7, #8]
    3776:	68f8      	ldr	r0, [r7, #12]
    3778:	23ff      	movs	r3, #255	; 0xff
    377a:	9303      	str	r3, [sp, #12]
    377c:	23ff      	movs	r3, #255	; 0xff
    377e:	9302      	str	r3, [sp, #8]
    3780:	2324      	movs	r3, #36	; 0x24
    3782:	18fb      	adds	r3, r7, r3
    3784:	781b      	ldrb	r3, [r3, #0]
    3786:	9301      	str	r3, [sp, #4]
    3788:	2320      	movs	r3, #32
    378a:	18fb      	adds	r3, r7, r3
    378c:	781b      	ldrb	r3, [r3, #0]
    378e:	9300      	str	r3, [sp, #0]
    3790:	0023      	movs	r3, r4
    3792:	f000 f805 	bl	37a0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>
{
}
    3796:	68fb      	ldr	r3, [r7, #12]
    3798:	0018      	movs	r0, r3
    379a:	46bd      	mov	sp, r7
    379c:	b005      	add	sp, #20
    379e:	bd90      	pop	{r4, r7, pc}

000037a0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>:

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    37a0:	b580      	push	{r7, lr}
    37a2:	b084      	sub	sp, #16
    37a4:	af00      	add	r7, sp, #0
    37a6:	60f8      	str	r0, [r7, #12]
    37a8:	60b9      	str	r1, [r7, #8]
    37aa:	0019      	movs	r1, r3
    37ac:	1dfb      	adds	r3, r7, #7
    37ae:	701a      	strb	r2, [r3, #0]
    37b0:	1dbb      	adds	r3, r7, #6
    37b2:	1c0a      	adds	r2, r1, #0
    37b4:	701a      	strb	r2, [r3, #0]
    37b6:	68fb      	ldr	r3, [r7, #12]
    37b8:	0018      	movs	r0, r3
    37ba:	f7ff ff37 	bl	362c <_ZN14HardwareSerialC1Ev>
    37be:	4a1b      	ldr	r2, [pc, #108]	; (382c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x8c>)
    37c0:	68fb      	ldr	r3, [r7, #12]
    37c2:	601a      	str	r2, [r3, #0]
    37c4:	68fb      	ldr	r3, [r7, #12]
    37c6:	3314      	adds	r3, #20
    37c8:	0018      	movs	r0, r3
    37ca:	f000 fad6 	bl	3d7a <_ZN11RingBufferNILi64EEC1Ev>
    37ce:	68fb      	ldr	r3, [r7, #12]
    37d0:	335c      	adds	r3, #92	; 0x5c
    37d2:	0018      	movs	r0, r3
    37d4:	f000 fad1 	bl	3d7a <_ZN11RingBufferNILi64EEC1Ev>
{
  sercom = _s;
    37d8:	68fb      	ldr	r3, [r7, #12]
    37da:	68ba      	ldr	r2, [r7, #8]
    37dc:	611a      	str	r2, [r3, #16]
  uc_pinRX = _pinRX;
    37de:	68fb      	ldr	r3, [r7, #12]
    37e0:	1dfa      	adds	r2, r7, #7
    37e2:	21a4      	movs	r1, #164	; 0xa4
    37e4:	7812      	ldrb	r2, [r2, #0]
    37e6:	545a      	strb	r2, [r3, r1]
  uc_pinTX = _pinTX;
    37e8:	68fb      	ldr	r3, [r7, #12]
    37ea:	1dba      	adds	r2, r7, #6
    37ec:	21a5      	movs	r1, #165	; 0xa5
    37ee:	7812      	ldrb	r2, [r2, #0]
    37f0:	545a      	strb	r2, [r3, r1]
  uc_padRX = _padRX ;
    37f2:	68fb      	ldr	r3, [r7, #12]
    37f4:	2218      	movs	r2, #24
    37f6:	18ba      	adds	r2, r7, r2
    37f8:	21a6      	movs	r1, #166	; 0xa6
    37fa:	7812      	ldrb	r2, [r2, #0]
    37fc:	545a      	strb	r2, [r3, r1]
  uc_padTX = _padTX;
    37fe:	68fb      	ldr	r3, [r7, #12]
    3800:	221c      	movs	r2, #28
    3802:	18ba      	adds	r2, r7, r2
    3804:	21a7      	movs	r1, #167	; 0xa7
    3806:	7812      	ldrb	r2, [r2, #0]
    3808:	545a      	strb	r2, [r3, r1]
  uc_pinRTS = _pinRTS;
    380a:	68fb      	ldr	r3, [r7, #12]
    380c:	2220      	movs	r2, #32
    380e:	18ba      	adds	r2, r7, r2
    3810:	21a8      	movs	r1, #168	; 0xa8
    3812:	7812      	ldrb	r2, [r2, #0]
    3814:	545a      	strb	r2, [r3, r1]
  uc_pinCTS = _pinCTS;
    3816:	68fb      	ldr	r3, [r7, #12]
    3818:	2224      	movs	r2, #36	; 0x24
    381a:	18ba      	adds	r2, r7, r2
    381c:	21b8      	movs	r1, #184	; 0xb8
    381e:	7812      	ldrb	r2, [r2, #0]
    3820:	545a      	strb	r2, [r3, r1]
}
    3822:	68fb      	ldr	r3, [r7, #12]
    3824:	0018      	movs	r0, r3
    3826:	46bd      	mov	sp, r7
    3828:	b004      	add	sp, #16
    382a:	bd80      	pop	{r7, pc}
    382c:	000133dc 	.word	0x000133dc

00003830 <_ZN4Uart5beginEm>:

void Uart::begin(unsigned long baudrate)
{
    3830:	b580      	push	{r7, lr}
    3832:	b082      	sub	sp, #8
    3834:	af00      	add	r7, sp, #0
    3836:	6078      	str	r0, [r7, #4]
    3838:	6039      	str	r1, [r7, #0]
  begin(baudrate, SERIAL_8N1);
    383a:	687b      	ldr	r3, [r7, #4]
    383c:	681b      	ldr	r3, [r3, #0]
    383e:	3328      	adds	r3, #40	; 0x28
    3840:	681b      	ldr	r3, [r3, #0]
    3842:	4a04      	ldr	r2, [pc, #16]	; (3854 <_ZN4Uart5beginEm+0x24>)
    3844:	6839      	ldr	r1, [r7, #0]
    3846:	6878      	ldr	r0, [r7, #4]
    3848:	4798      	blx	r3
}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	46bd      	mov	sp, r7
    384e:	b002      	add	sp, #8
    3850:	bd80      	pop	{r7, pc}
    3852:	46c0      	nop			; (mov r8, r8)
    3854:	00000413 	.word	0x00000413

00003858 <_ZN4Uart5beginEmt>:

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    3858:	b5f0      	push	{r4, r5, r6, r7, lr}
    385a:	b089      	sub	sp, #36	; 0x24
    385c:	af02      	add	r7, sp, #8
    385e:	60f8      	str	r0, [r7, #12]
    3860:	60b9      	str	r1, [r7, #8]
    3862:	1dbb      	adds	r3, r7, #6
    3864:	801a      	strh	r2, [r3, #0]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    3866:	68fb      	ldr	r3, [r7, #12]
    3868:	22a4      	movs	r2, #164	; 0xa4
    386a:	5c9b      	ldrb	r3, [r3, r2]
    386c:	0018      	movs	r0, r3
    386e:	68fb      	ldr	r3, [r7, #12]
    3870:	22a4      	movs	r2, #164	; 0xa4
    3872:	5c9b      	ldrb	r3, [r3, r2]
    3874:	0019      	movs	r1, r3
    3876:	4a61      	ldr	r2, [pc, #388]	; (39fc <_ZN4Uart5beginEmt+0x1a4>)
    3878:	000b      	movs	r3, r1
    387a:	005b      	lsls	r3, r3, #1
    387c:	185b      	adds	r3, r3, r1
    387e:	00db      	lsls	r3, r3, #3
    3880:	18d3      	adds	r3, r2, r3
    3882:	3308      	adds	r3, #8
    3884:	781b      	ldrb	r3, [r3, #0]
    3886:	b25b      	sxtb	r3, r3
    3888:	0019      	movs	r1, r3
    388a:	f003 f987 	bl	6b9c <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    388e:	68fb      	ldr	r3, [r7, #12]
    3890:	22a5      	movs	r2, #165	; 0xa5
    3892:	5c9b      	ldrb	r3, [r3, r2]
    3894:	0018      	movs	r0, r3
    3896:	68fb      	ldr	r3, [r7, #12]
    3898:	22a5      	movs	r2, #165	; 0xa5
    389a:	5c9b      	ldrb	r3, [r3, r2]
    389c:	0019      	movs	r1, r3
    389e:	4a57      	ldr	r2, [pc, #348]	; (39fc <_ZN4Uart5beginEmt+0x1a4>)
    38a0:	000b      	movs	r3, r1
    38a2:	005b      	lsls	r3, r3, #1
    38a4:	185b      	adds	r3, r3, r1
    38a6:	00db      	lsls	r3, r3, #3
    38a8:	18d3      	adds	r3, r2, r3
    38aa:	3308      	adds	r3, #8
    38ac:	781b      	ldrb	r3, [r3, #0]
    38ae:	b25b      	sxtb	r3, r3
    38b0:	0019      	movs	r1, r3
    38b2:	f003 f973 	bl	6b9c <pinPeripheral>

  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    38b6:	68fb      	ldr	r3, [r7, #12]
    38b8:	22a7      	movs	r2, #167	; 0xa7
    38ba:	5c9b      	ldrb	r3, [r3, r2]
    38bc:	2b02      	cmp	r3, #2
    38be:	d118      	bne.n	38f2 <_ZN4Uart5beginEmt+0x9a>
    if (uc_pinCTS != NO_CTS_PIN) {
    38c0:	68fb      	ldr	r3, [r7, #12]
    38c2:	22b8      	movs	r2, #184	; 0xb8
    38c4:	5c9b      	ldrb	r3, [r3, r2]
    38c6:	2bff      	cmp	r3, #255	; 0xff
    38c8:	d013      	beq.n	38f2 <_ZN4Uart5beginEmt+0x9a>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    38ca:	68fb      	ldr	r3, [r7, #12]
    38cc:	22b8      	movs	r2, #184	; 0xb8
    38ce:	5c9b      	ldrb	r3, [r3, r2]
    38d0:	0018      	movs	r0, r3
    38d2:	68fb      	ldr	r3, [r7, #12]
    38d4:	22b8      	movs	r2, #184	; 0xb8
    38d6:	5c9b      	ldrb	r3, [r3, r2]
    38d8:	0019      	movs	r1, r3
    38da:	4a48      	ldr	r2, [pc, #288]	; (39fc <_ZN4Uart5beginEmt+0x1a4>)
    38dc:	000b      	movs	r3, r1
    38de:	005b      	lsls	r3, r3, #1
    38e0:	185b      	adds	r3, r3, r1
    38e2:	00db      	lsls	r3, r3, #3
    38e4:	18d3      	adds	r3, r2, r3
    38e6:	3308      	adds	r3, #8
    38e8:	781b      	ldrb	r3, [r3, #0]
    38ea:	b25b      	sxtb	r3, r3
    38ec:	0019      	movs	r1, r3
    38ee:	f003 f955 	bl	6b9c <pinPeripheral>
    }
  }

  if (uc_pinRTS != NO_RTS_PIN) {
    38f2:	68fb      	ldr	r3, [r7, #12]
    38f4:	22a8      	movs	r2, #168	; 0xa8
    38f6:	5c9b      	ldrb	r3, [r3, r2]
    38f8:	2bff      	cmp	r3, #255	; 0xff
    38fa:	d041      	beq.n	3980 <_ZN4Uart5beginEmt+0x128>
    pinMode(uc_pinRTS, OUTPUT);
    38fc:	68fb      	ldr	r3, [r7, #12]
    38fe:	22a8      	movs	r2, #168	; 0xa8
    3900:	5c9b      	ldrb	r3, [r3, r2]
    3902:	2101      	movs	r1, #1
    3904:	0018      	movs	r0, r3
    3906:	f002 ffad 	bl	6864 <pinMode>

    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    390a:	68fb      	ldr	r3, [r7, #12]
    390c:	22a8      	movs	r2, #168	; 0xa8
    390e:	5c9b      	ldrb	r3, [r3, r2]
    3910:	0018      	movs	r0, r3
    3912:	2317      	movs	r3, #23
    3914:	18fa      	adds	r2, r7, r3
    3916:	4939      	ldr	r1, [pc, #228]	; (39fc <_ZN4Uart5beginEmt+0x1a4>)
    3918:	0003      	movs	r3, r0
    391a:	005b      	lsls	r3, r3, #1
    391c:	181b      	adds	r3, r3, r0
    391e:	00db      	lsls	r3, r3, #3
    3920:	5c5b      	ldrb	r3, [r3, r1]
    3922:	7013      	strb	r3, [r2, #0]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    3924:	2317      	movs	r3, #23
    3926:	18fb      	adds	r3, r7, r3
    3928:	781b      	ldrb	r3, [r3, #0]
    392a:	b25b      	sxtb	r3, r3
    392c:	01db      	lsls	r3, r3, #7
    392e:	3318      	adds	r3, #24
    3930:	4a33      	ldr	r2, [pc, #204]	; (3a00 <_ZN4Uart5beginEmt+0x1a8>)
    3932:	189a      	adds	r2, r3, r2
    3934:	68fb      	ldr	r3, [r7, #12]
    3936:	21ac      	movs	r1, #172	; 0xac
    3938:	505a      	str	r2, [r3, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    393a:	2317      	movs	r3, #23
    393c:	18fb      	adds	r3, r7, r3
    393e:	781b      	ldrb	r3, [r3, #0]
    3940:	b25b      	sxtb	r3, r3
    3942:	01db      	lsls	r3, r3, #7
    3944:	3314      	adds	r3, #20
    3946:	4a2e      	ldr	r2, [pc, #184]	; (3a00 <_ZN4Uart5beginEmt+0x1a8>)
    3948:	189a      	adds	r2, r3, r2
    394a:	68fb      	ldr	r3, [r7, #12]
    394c:	21b0      	movs	r1, #176	; 0xb0
    394e:	505a      	str	r2, [r3, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    3950:	68fb      	ldr	r3, [r7, #12]
    3952:	22a8      	movs	r2, #168	; 0xa8
    3954:	5c9b      	ldrb	r3, [r3, r2]
    3956:	0019      	movs	r1, r3
    3958:	4a28      	ldr	r2, [pc, #160]	; (39fc <_ZN4Uart5beginEmt+0x1a4>)
    395a:	000b      	movs	r3, r1
    395c:	005b      	lsls	r3, r3, #1
    395e:	185b      	adds	r3, r3, r1
    3960:	00db      	lsls	r3, r3, #3
    3962:	18d3      	adds	r3, r2, r3
    3964:	3304      	adds	r3, #4
    3966:	681b      	ldr	r3, [r3, #0]
    3968:	2201      	movs	r2, #1
    396a:	409a      	lsls	r2, r3
    396c:	68fb      	ldr	r3, [r7, #12]
    396e:	21b4      	movs	r1, #180	; 0xb4
    3970:	505a      	str	r2, [r3, r1]

    *pul_outclrRTS = ul_pinMaskRTS;
    3972:	68fb      	ldr	r3, [r7, #12]
    3974:	22b0      	movs	r2, #176	; 0xb0
    3976:	589b      	ldr	r3, [r3, r2]
    3978:	68fa      	ldr	r2, [r7, #12]
    397a:	21b4      	movs	r1, #180	; 0xb4
    397c:	5852      	ldr	r2, [r2, r1]
    397e:	601a      	str	r2, [r3, #0]
  }

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    3980:	68fb      	ldr	r3, [r7, #12]
    3982:	6918      	ldr	r0, [r3, #16]
    3984:	68bb      	ldr	r3, [r7, #8]
    3986:	2201      	movs	r2, #1
    3988:	2101      	movs	r1, #1
    398a:	f009 ff59 	bl	d840 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    398e:	68fb      	ldr	r3, [r7, #12]
    3990:	691c      	ldr	r4, [r3, #16]
    3992:	1dbb      	adds	r3, r7, #6
    3994:	881a      	ldrh	r2, [r3, #0]
    3996:	68fb      	ldr	r3, [r7, #12]
    3998:	0011      	movs	r1, r2
    399a:	0018      	movs	r0, r3
    399c:	f000 f9b2 	bl	3d04 <_ZN4Uart15extractCharSizeEt>
    39a0:	0003      	movs	r3, r0
    39a2:	001d      	movs	r5, r3
    39a4:	1dbb      	adds	r3, r7, #6
    39a6:	881a      	ldrh	r2, [r3, #0]
    39a8:	68fb      	ldr	r3, [r7, #12]
    39aa:	0011      	movs	r1, r2
    39ac:	0018      	movs	r0, r3
    39ae:	f000 f9cc 	bl	3d4a <_ZN4Uart13extractParityEt>
    39b2:	0003      	movs	r3, r0
    39b4:	001e      	movs	r6, r3
    39b6:	1dbb      	adds	r3, r7, #6
    39b8:	881a      	ldrh	r2, [r3, #0]
    39ba:	68fb      	ldr	r3, [r7, #12]
    39bc:	0011      	movs	r1, r2
    39be:	0018      	movs	r0, r3
    39c0:	f000 f98c 	bl	3cdc <_ZN4Uart16extractNbStopBitEt>
    39c4:	0003      	movs	r3, r0
    39c6:	9300      	str	r3, [sp, #0]
    39c8:	0033      	movs	r3, r6
    39ca:	2201      	movs	r2, #1
    39cc:	0029      	movs	r1, r5
    39ce:	0020      	movs	r0, r4
    39d0:	f009 ffaa 	bl	d928 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    39d4:	68fb      	ldr	r3, [r7, #12]
    39d6:	6918      	ldr	r0, [r3, #16]
    39d8:	68fb      	ldr	r3, [r7, #12]
    39da:	22a7      	movs	r2, #167	; 0xa7
    39dc:	5c99      	ldrb	r1, [r3, r2]
    39de:	68fb      	ldr	r3, [r7, #12]
    39e0:	22a6      	movs	r2, #166	; 0xa6
    39e2:	5c9b      	ldrb	r3, [r3, r2]
    39e4:	001a      	movs	r2, r3
    39e6:	f009 ffe3 	bl	d9b0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    39ea:	68fb      	ldr	r3, [r7, #12]
    39ec:	691b      	ldr	r3, [r3, #16]
    39ee:	0018      	movs	r0, r3
    39f0:	f00a f831 	bl	da56 <_ZN6SERCOM10enableUARTEv>
}
    39f4:	46c0      	nop			; (mov r8, r8)
    39f6:	46bd      	mov	sp, r7
    39f8:	b007      	add	sp, #28
    39fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39fc:	000136c8 	.word	0x000136c8
    3a00:	41004400 	.word	0x41004400

00003a04 <_ZN4Uart3endEv>:

void Uart::end()
{
    3a04:	b580      	push	{r7, lr}
    3a06:	b082      	sub	sp, #8
    3a08:	af00      	add	r7, sp, #0
    3a0a:	6078      	str	r0, [r7, #4]
  sercom->resetUART();
    3a0c:	687b      	ldr	r3, [r7, #4]
    3a0e:	691b      	ldr	r3, [r3, #16]
    3a10:	0018      	movs	r0, r3
    3a12:	f009 fffc 	bl	da0e <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	3314      	adds	r3, #20
    3a1a:	0018      	movs	r0, r3
    3a1c:	f000 f9c0 	bl	3da0 <_ZN11RingBufferNILi64EE5clearEv>
  txBuffer.clear();
    3a20:	687b      	ldr	r3, [r7, #4]
    3a22:	335c      	adds	r3, #92	; 0x5c
    3a24:	0018      	movs	r0, r3
    3a26:	f000 f9bb 	bl	3da0 <_ZN11RingBufferNILi64EE5clearEv>
}
    3a2a:	46c0      	nop			; (mov r8, r8)
    3a2c:	46bd      	mov	sp, r7
    3a2e:	b002      	add	sp, #8
    3a30:	bd80      	pop	{r7, pc}

00003a32 <_ZN4Uart5flushEv>:

void Uart::flush()
{
    3a32:	b580      	push	{r7, lr}
    3a34:	b082      	sub	sp, #8
    3a36:	af00      	add	r7, sp, #0
    3a38:	6078      	str	r0, [r7, #4]
  while(txBuffer.available()); // wait until TX buffer is empty
    3a3a:	687b      	ldr	r3, [r7, #4]
    3a3c:	335c      	adds	r3, #92	; 0x5c
    3a3e:	0018      	movs	r0, r3
    3a40:	f000 f9bc 	bl	3dbc <_ZN11RingBufferNILi64EE9availableEv>
    3a44:	0003      	movs	r3, r0
    3a46:	1e5a      	subs	r2, r3, #1
    3a48:	4193      	sbcs	r3, r2
    3a4a:	b2db      	uxtb	r3, r3
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d000      	beq.n	3a52 <_ZN4Uart5flushEv+0x20>
    3a50:	e7f3      	b.n	3a3a <_ZN4Uart5flushEv+0x8>

  sercom->flushUART();
    3a52:	687b      	ldr	r3, [r7, #4]
    3a54:	691b      	ldr	r3, [r3, #16]
    3a56:	0018      	movs	r0, r3
    3a58:	f00a f814 	bl	da84 <_ZN6SERCOM9flushUARTEv>
}
    3a5c:	46c0      	nop			; (mov r8, r8)
    3a5e:	46bd      	mov	sp, r7
    3a60:	b002      	add	sp, #8
    3a62:	bd80      	pop	{r7, pc}

00003a64 <_ZN4Uart10IrqHandlerEv>:

void Uart::IrqHandler()
{
    3a64:	b590      	push	{r4, r7, lr}
    3a66:	b085      	sub	sp, #20
    3a68:	af00      	add	r7, sp, #0
    3a6a:	6078      	str	r0, [r7, #4]
  if (sercom->availableDataUART()) {
    3a6c:	687b      	ldr	r3, [r7, #4]
    3a6e:	691b      	ldr	r3, [r3, #16]
    3a70:	0018      	movs	r0, r3
    3a72:	f00a f82d 	bl	dad0 <_ZN6SERCOM17availableDataUARTEv>
    3a76:	1e03      	subs	r3, r0, #0
    3a78:	d027      	beq.n	3aca <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    3a7a:	687b      	ldr	r3, [r7, #4]
    3a7c:	3314      	adds	r3, #20
    3a7e:	001c      	movs	r4, r3
    3a80:	687b      	ldr	r3, [r7, #4]
    3a82:	691b      	ldr	r3, [r3, #16]
    3a84:	0018      	movs	r0, r3
    3a86:	f00a f85c 	bl	db42 <_ZN6SERCOM12readDataUARTEv>
    3a8a:	0003      	movs	r3, r0
    3a8c:	0019      	movs	r1, r3
    3a8e:	0020      	movs	r0, r4
    3a90:	f000 f9a9 	bl	3de6 <_ZN11RingBufferNILi64EE10store_charEh>

    if (uc_pinRTS != NO_RTS_PIN) {
    3a94:	687b      	ldr	r3, [r7, #4]
    3a96:	22a8      	movs	r2, #168	; 0xa8
    3a98:	5c9b      	ldrb	r3, [r3, r2]
    3a9a:	2bff      	cmp	r3, #255	; 0xff
    3a9c:	d015      	beq.n	3aca <_ZN4Uart10IrqHandlerEv+0x66>
      // RX buffer space is below the threshold, de-assert RTS
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	3314      	adds	r3, #20
    3aa2:	0018      	movs	r0, r3
    3aa4:	f000 f9c5 	bl	3e32 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3aa8:	0002      	movs	r2, r0
    3aaa:	2309      	movs	r3, #9
    3aac:	0fd0      	lsrs	r0, r2, #31
    3aae:	17d9      	asrs	r1, r3, #31
    3ab0:	4293      	cmp	r3, r2
    3ab2:	4148      	adcs	r0, r1
    3ab4:	0003      	movs	r3, r0
    3ab6:	b2db      	uxtb	r3, r3
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d006      	beq.n	3aca <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	22ac      	movs	r2, #172	; 0xac
    3ac0:	589b      	ldr	r3, [r3, r2]
    3ac2:	687a      	ldr	r2, [r7, #4]
    3ac4:	21b4      	movs	r1, #180	; 0xb4
    3ac6:	5852      	ldr	r2, [r2, r1]
    3ac8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  if (sercom->isDataRegisterEmptyUART()) {
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	691b      	ldr	r3, [r3, #16]
    3ace:	0018      	movs	r0, r3
    3ad0:	f00a f829 	bl	db26 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3ad4:	1e03      	subs	r3, r0, #0
    3ad6:	d022      	beq.n	3b1e <_ZN4Uart10IrqHandlerEv+0xba>
    if (txBuffer.available()) {
    3ad8:	687b      	ldr	r3, [r7, #4]
    3ada:	335c      	adds	r3, #92	; 0x5c
    3adc:	0018      	movs	r0, r3
    3ade:	f000 f96d 	bl	3dbc <_ZN11RingBufferNILi64EE9availableEv>
    3ae2:	0003      	movs	r3, r0
    3ae4:	1e5a      	subs	r2, r3, #1
    3ae6:	4193      	sbcs	r3, r2
    3ae8:	b2db      	uxtb	r3, r3
    3aea:	2b00      	cmp	r3, #0
    3aec:	d012      	beq.n	3b14 <_ZN4Uart10IrqHandlerEv+0xb0>
      uint8_t data = txBuffer.read_char();
    3aee:	687b      	ldr	r3, [r7, #4]
    3af0:	335c      	adds	r3, #92	; 0x5c
    3af2:	0018      	movs	r0, r3
    3af4:	f000 f9bf 	bl	3e76 <_ZN11RingBufferNILi64EE9read_charEv>
    3af8:	0002      	movs	r2, r0
    3afa:	230f      	movs	r3, #15
    3afc:	18fb      	adds	r3, r7, r3
    3afe:	701a      	strb	r2, [r3, #0]

      sercom->writeDataUART(data);
    3b00:	687b      	ldr	r3, [r7, #4]
    3b02:	691a      	ldr	r2, [r3, #16]
    3b04:	230f      	movs	r3, #15
    3b06:	18fb      	adds	r3, r7, r3
    3b08:	781b      	ldrb	r3, [r3, #0]
    3b0a:	0019      	movs	r1, r3
    3b0c:	0010      	movs	r0, r2
    3b0e:	f00a f827 	bl	db60 <_ZN6SERCOM13writeDataUARTEh>
    3b12:	e004      	b.n	3b1e <_ZN4Uart10IrqHandlerEv+0xba>
    } else {
      sercom->disableDataRegisterEmptyInterruptUART();
    3b14:	687b      	ldr	r3, [r7, #4]
    3b16:	691b      	ldr	r3, [r3, #16]
    3b18:	0018      	movs	r0, r3
    3b1a:	f00a f84b 	bl	dbb4 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    }
  }

  if (sercom->isUARTError()) {
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	691b      	ldr	r3, [r3, #16]
    3b22:	0018      	movs	r0, r3
    3b24:	f009 ffe2 	bl	daec <_ZN6SERCOM11isUARTErrorEv>
    3b28:	1e03      	subs	r3, r0, #0
    3b2a:	d009      	beq.n	3b40 <_ZN4Uart10IrqHandlerEv+0xdc>
    sercom->acknowledgeUARTError();
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	691b      	ldr	r3, [r3, #16]
    3b30:	0018      	movs	r0, r3
    3b32:	f009 ffe9 	bl	db08 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    // TODO: if (sercom->isBufferOverflowErrorUART()) ....
    // TODO: if (sercom->isFrameErrorUART()) ....
    // TODO: if (sercom->isParityErrorUART()) ....
    sercom->clearStatusUART();
    3b36:	687b      	ldr	r3, [r7, #4]
    3b38:	691b      	ldr	r3, [r3, #16]
    3b3a:	0018      	movs	r0, r3
    3b3c:	f009 ffbc 	bl	dab8 <_ZN6SERCOM15clearStatusUARTEv>
  }
}
    3b40:	46c0      	nop			; (mov r8, r8)
    3b42:	46bd      	mov	sp, r7
    3b44:	b005      	add	sp, #20
    3b46:	bd90      	pop	{r4, r7, pc}

00003b48 <_ZN4Uart9availableEv>:

int Uart::available()
{
    3b48:	b580      	push	{r7, lr}
    3b4a:	b082      	sub	sp, #8
    3b4c:	af00      	add	r7, sp, #0
    3b4e:	6078      	str	r0, [r7, #4]
  return rxBuffer.available();
    3b50:	687b      	ldr	r3, [r7, #4]
    3b52:	3314      	adds	r3, #20
    3b54:	0018      	movs	r0, r3
    3b56:	f000 f931 	bl	3dbc <_ZN11RingBufferNILi64EE9availableEv>
    3b5a:	0003      	movs	r3, r0
}
    3b5c:	0018      	movs	r0, r3
    3b5e:	46bd      	mov	sp, r7
    3b60:	b002      	add	sp, #8
    3b62:	bd80      	pop	{r7, pc}

00003b64 <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    3b64:	b580      	push	{r7, lr}
    3b66:	b082      	sub	sp, #8
    3b68:	af00      	add	r7, sp, #0
    3b6a:	6078      	str	r0, [r7, #4]
  return txBuffer.availableForStore();
    3b6c:	687b      	ldr	r3, [r7, #4]
    3b6e:	335c      	adds	r3, #92	; 0x5c
    3b70:	0018      	movs	r0, r3
    3b72:	f000 f95e 	bl	3e32 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3b76:	0003      	movs	r3, r0
}
    3b78:	0018      	movs	r0, r3
    3b7a:	46bd      	mov	sp, r7
    3b7c:	b002      	add	sp, #8
    3b7e:	bd80      	pop	{r7, pc}

00003b80 <_ZN4Uart4peekEv>:

int Uart::peek()
{
    3b80:	b580      	push	{r7, lr}
    3b82:	b082      	sub	sp, #8
    3b84:	af00      	add	r7, sp, #0
    3b86:	6078      	str	r0, [r7, #4]
  return rxBuffer.peek();
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	3314      	adds	r3, #20
    3b8c:	0018      	movs	r0, r3
    3b8e:	f000 f99b 	bl	3ec8 <_ZN11RingBufferNILi64EE4peekEv>
    3b92:	0003      	movs	r3, r0
}
    3b94:	0018      	movs	r0, r3
    3b96:	46bd      	mov	sp, r7
    3b98:	b002      	add	sp, #8
    3b9a:	bd80      	pop	{r7, pc}

00003b9c <_ZN4Uart4readEv>:

int Uart::read()
{
    3b9c:	b580      	push	{r7, lr}
    3b9e:	b084      	sub	sp, #16
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	6078      	str	r0, [r7, #4]
  int c = rxBuffer.read_char();
    3ba4:	687b      	ldr	r3, [r7, #4]
    3ba6:	3314      	adds	r3, #20
    3ba8:	0018      	movs	r0, r3
    3baa:	f000 f964 	bl	3e76 <_ZN11RingBufferNILi64EE9read_charEv>
    3bae:	0003      	movs	r3, r0
    3bb0:	60fb      	str	r3, [r7, #12]

  if (uc_pinRTS != NO_RTS_PIN) {
    3bb2:	687b      	ldr	r3, [r7, #4]
    3bb4:	22a8      	movs	r2, #168	; 0xa8
    3bb6:	5c9b      	ldrb	r3, [r3, r2]
    3bb8:	2bff      	cmp	r3, #255	; 0xff
    3bba:	d014      	beq.n	3be6 <_ZN4Uart4readEv+0x4a>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    3bbc:	687b      	ldr	r3, [r7, #4]
    3bbe:	3314      	adds	r3, #20
    3bc0:	0018      	movs	r0, r3
    3bc2:	f000 f936 	bl	3e32 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3bc6:	0003      	movs	r3, r0
    3bc8:	2201      	movs	r2, #1
    3bca:	2b0a      	cmp	r3, #10
    3bcc:	dc01      	bgt.n	3bd2 <_ZN4Uart4readEv+0x36>
    3bce:	2300      	movs	r3, #0
    3bd0:	1c1a      	adds	r2, r3, #0
    3bd2:	b2d3      	uxtb	r3, r2
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d006      	beq.n	3be6 <_ZN4Uart4readEv+0x4a>
      *pul_outclrRTS = ul_pinMaskRTS;
    3bd8:	687b      	ldr	r3, [r7, #4]
    3bda:	22b0      	movs	r2, #176	; 0xb0
    3bdc:	589b      	ldr	r3, [r3, r2]
    3bde:	687a      	ldr	r2, [r7, #4]
    3be0:	21b4      	movs	r1, #180	; 0xb4
    3be2:	5852      	ldr	r2, [r2, r1]
    3be4:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
    3be6:	68fb      	ldr	r3, [r7, #12]
}
    3be8:	0018      	movs	r0, r3
    3bea:	46bd      	mov	sp, r7
    3bec:	b004      	add	sp, #16
    3bee:	bd80      	pop	{r7, pc}

00003bf0 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	b086      	sub	sp, #24
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	6078      	str	r0, [r7, #4]
    3bf8:	000a      	movs	r2, r1
    3bfa:	1cfb      	adds	r3, r7, #3
    3bfc:	701a      	strb	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    3bfe:	687b      	ldr	r3, [r7, #4]
    3c00:	691b      	ldr	r3, [r3, #16]
    3c02:	0018      	movs	r0, r3
    3c04:	f009 ff8f 	bl	db26 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3c08:	1e03      	subs	r3, r0, #0
    3c0a:	d008      	beq.n	3c1e <_ZN4Uart5writeEh+0x2e>
    3c0c:	687b      	ldr	r3, [r7, #4]
    3c0e:	335c      	adds	r3, #92	; 0x5c
    3c10:	0018      	movs	r0, r3
    3c12:	f000 f8d3 	bl	3dbc <_ZN11RingBufferNILi64EE9availableEv>
    3c16:	1e03      	subs	r3, r0, #0
    3c18:	d101      	bne.n	3c1e <_ZN4Uart5writeEh+0x2e>
    3c1a:	2301      	movs	r3, #1
    3c1c:	e000      	b.n	3c20 <_ZN4Uart5writeEh+0x30>
    3c1e:	2300      	movs	r3, #0
    3c20:	2b00      	cmp	r3, #0
    3c22:	d008      	beq.n	3c36 <_ZN4Uart5writeEh+0x46>
    sercom->writeDataUART(data);
    3c24:	687b      	ldr	r3, [r7, #4]
    3c26:	691a      	ldr	r2, [r3, #16]
    3c28:	1cfb      	adds	r3, r7, #3
    3c2a:	781b      	ldrb	r3, [r3, #0]
    3c2c:	0019      	movs	r1, r3
    3c2e:	0010      	movs	r0, r2
    3c30:	f009 ff96 	bl	db60 <_ZN6SERCOM13writeDataUARTEh>
    3c34:	e04b      	b.n	3cce <_ZN4Uart5writeEh+0xde>
  } else {
    // spin lock until a spot opens up in the buffer
    while(txBuffer.isFull()) {
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	335c      	adds	r3, #92	; 0x5c
    3c3a:	0018      	movs	r0, r3
    3c3c:	f000 f95d 	bl	3efa <_ZN11RingBufferNILi64EE6isFullEv>
    3c40:	1e03      	subs	r3, r0, #0
    3c42:	d036      	beq.n	3cb2 <_ZN4Uart5writeEh+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c44:	f3ef 8310 	mrs	r3, PRIMASK
    3c48:	60fb      	str	r3, [r7, #12]
  return(result);
    3c4a:	68fb      	ldr	r3, [r7, #12]
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);
    3c4c:	2201      	movs	r2, #1
    3c4e:	4013      	ands	r3, r2
    3c50:	425a      	negs	r2, r3
    3c52:	4153      	adcs	r3, r2
    3c54:	b2da      	uxtb	r2, r3
    3c56:	2317      	movs	r3, #23
    3c58:	18fb      	adds	r3, r7, r3
    3c5a:	701a      	strb	r2, [r3, #0]

      if (interruptsEnabled) {
    3c5c:	2317      	movs	r3, #23
    3c5e:	18fb      	adds	r3, r7, r3
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	2b00      	cmp	r3, #0
    3c64:	d017      	beq.n	3c96 <_ZN4Uart5writeEh+0xa6>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    3c66:	4b1c      	ldr	r3, [pc, #112]	; (3cd8 <_ZN4Uart5writeEh+0xe8>)
    3c68:	685b      	ldr	r3, [r3, #4]
    3c6a:	05db      	lsls	r3, r3, #23
    3c6c:	0ddb      	lsrs	r3, r3, #23
    3c6e:	613b      	str	r3, [r7, #16]

        if (exceptionNumber == 0 ||
    3c70:	693b      	ldr	r3, [r7, #16]
    3c72:	2b00      	cmp	r3, #0
    3c74:	d00a      	beq.n	3c8c <_ZN4Uart5writeEh+0x9c>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    3c76:	693b      	ldr	r3, [r7, #16]
    3c78:	b2db      	uxtb	r3, r3
    3c7a:	3b10      	subs	r3, #16
    3c7c:	b2db      	uxtb	r3, r3
    3c7e:	b25b      	sxtb	r3, r3
    3c80:	0018      	movs	r0, r3
    3c82:	f7ff fd21 	bl	36c8 <__NVIC_GetPriority>
    3c86:	0003      	movs	r3, r0
        if (exceptionNumber == 0 ||
    3c88:	2b03      	cmp	r3, #3
    3c8a:	d901      	bls.n	3c90 <_ZN4Uart5writeEh+0xa0>
    3c8c:	2301      	movs	r3, #1
    3c8e:	e000      	b.n	3c92 <_ZN4Uart5writeEh+0xa2>
    3c90:	2300      	movs	r3, #0
    3c92:	2b00      	cmp	r3, #0
    3c94:	d10b      	bne.n	3cae <_ZN4Uart5writeEh+0xbe>
        }
      }

      // interrupts are disabled or called from ISR with higher or equal priority than the SERCOM IRQ
      // manually call the UART IRQ handler when the data register is empty
      if (sercom->isDataRegisterEmptyUART()) {
    3c96:	687b      	ldr	r3, [r7, #4]
    3c98:	691b      	ldr	r3, [r3, #16]
    3c9a:	0018      	movs	r0, r3
    3c9c:	f009 ff43 	bl	db26 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3ca0:	1e03      	subs	r3, r0, #0
    3ca2:	d0c8      	beq.n	3c36 <_ZN4Uart5writeEh+0x46>
        IrqHandler();
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	0018      	movs	r0, r3
    3ca8:	f7ff fedc 	bl	3a64 <_ZN4Uart10IrqHandlerEv>
    3cac:	e7c3      	b.n	3c36 <_ZN4Uart5writeEh+0x46>
          continue;
    3cae:	46c0      	nop			; (mov r8, r8)
    while(txBuffer.isFull()) {
    3cb0:	e7c1      	b.n	3c36 <_ZN4Uart5writeEh+0x46>
      }
    }

    txBuffer.store_char(data);
    3cb2:	687b      	ldr	r3, [r7, #4]
    3cb4:	335c      	adds	r3, #92	; 0x5c
    3cb6:	001a      	movs	r2, r3
    3cb8:	1cfb      	adds	r3, r7, #3
    3cba:	781b      	ldrb	r3, [r3, #0]
    3cbc:	0019      	movs	r1, r3
    3cbe:	0010      	movs	r0, r2
    3cc0:	f000 f891 	bl	3de6 <_ZN11RingBufferNILi64EE10store_charEh>

    sercom->enableDataRegisterEmptyInterruptUART();
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	691b      	ldr	r3, [r3, #16]
    3cc8:	0018      	movs	r0, r3
    3cca:	f009 ff67 	bl	db9c <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
  }

  return 1;
    3cce:	2301      	movs	r3, #1
}
    3cd0:	0018      	movs	r0, r3
    3cd2:	46bd      	mov	sp, r7
    3cd4:	b006      	add	sp, #24
    3cd6:	bd80      	pop	{r7, pc}
    3cd8:	e000ed00 	.word	0xe000ed00

00003cdc <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
    3cdc:	b580      	push	{r7, lr}
    3cde:	b082      	sub	sp, #8
    3ce0:	af00      	add	r7, sp, #0
    3ce2:	6078      	str	r0, [r7, #4]
    3ce4:	000a      	movs	r2, r1
    3ce6:	1cbb      	adds	r3, r7, #2
    3ce8:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_STOP_BIT_MASK)
    3cea:	1cbb      	adds	r3, r7, #2
    3cec:	881b      	ldrh	r3, [r3, #0]
    3cee:	22f0      	movs	r2, #240	; 0xf0
    3cf0:	4013      	ands	r3, r2
    3cf2:	2b30      	cmp	r3, #48	; 0x30
    3cf4:	d001      	beq.n	3cfa <_ZN4Uart16extractNbStopBitEt+0x1e>
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    3cf6:	2300      	movs	r3, #0
    3cf8:	e000      	b.n	3cfc <_ZN4Uart16extractNbStopBitEt+0x20>

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
    3cfa:	2301      	movs	r3, #1
  }
}
    3cfc:	0018      	movs	r0, r3
    3cfe:	46bd      	mov	sp, r7
    3d00:	b002      	add	sp, #8
    3d02:	bd80      	pop	{r7, pc}

00003d04 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
    3d04:	b580      	push	{r7, lr}
    3d06:	b082      	sub	sp, #8
    3d08:	af00      	add	r7, sp, #0
    3d0a:	6078      	str	r0, [r7, #4]
    3d0c:	000a      	movs	r2, r1
    3d0e:	1cbb      	adds	r3, r7, #2
    3d10:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_DATA_MASK)
    3d12:	1cbb      	adds	r3, r7, #2
    3d14:	881a      	ldrh	r2, [r3, #0]
    3d16:	23f0      	movs	r3, #240	; 0xf0
    3d18:	011b      	lsls	r3, r3, #4
    3d1a:	4013      	ands	r3, r2
    3d1c:	2280      	movs	r2, #128	; 0x80
    3d1e:	0092      	lsls	r2, r2, #2
    3d20:	4293      	cmp	r3, r2
    3d22:	d009      	beq.n	3d38 <_ZN4Uart15extractCharSizeEt+0x34>
    3d24:	22c0      	movs	r2, #192	; 0xc0
    3d26:	0092      	lsls	r2, r2, #2
    3d28:	4293      	cmp	r3, r2
    3d2a:	d007      	beq.n	3d3c <_ZN4Uart15extractCharSizeEt+0x38>
    3d2c:	2280      	movs	r2, #128	; 0x80
    3d2e:	0052      	lsls	r2, r2, #1
    3d30:	4293      	cmp	r3, r2
    3d32:	d105      	bne.n	3d40 <_ZN4Uart15extractCharSizeEt+0x3c>
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;
    3d34:	2305      	movs	r3, #5
    3d36:	e004      	b.n	3d42 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    3d38:	2306      	movs	r3, #6
    3d3a:	e002      	b.n	3d42 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    3d3c:	2307      	movs	r3, #7
    3d3e:	e000      	b.n	3d42 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    3d40:	2300      	movs	r3, #0

  }
}
    3d42:	0018      	movs	r0, r3
    3d44:	46bd      	mov	sp, r7
    3d46:	b002      	add	sp, #8
    3d48:	bd80      	pop	{r7, pc}

00003d4a <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
    3d4a:	b580      	push	{r7, lr}
    3d4c:	b082      	sub	sp, #8
    3d4e:	af00      	add	r7, sp, #0
    3d50:	6078      	str	r0, [r7, #4]
    3d52:	000a      	movs	r2, r1
    3d54:	1cbb      	adds	r3, r7, #2
    3d56:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_PARITY_MASK)
    3d58:	1cbb      	adds	r3, r7, #2
    3d5a:	881b      	ldrh	r3, [r3, #0]
    3d5c:	220f      	movs	r2, #15
    3d5e:	4013      	ands	r3, r2
    3d60:	2b01      	cmp	r3, #1
    3d62:	d003      	beq.n	3d6c <_ZN4Uart13extractParityEt+0x22>
    3d64:	2b02      	cmp	r3, #2
    3d66:	d003      	beq.n	3d70 <_ZN4Uart13extractParityEt+0x26>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    3d68:	2302      	movs	r3, #2
    3d6a:	e002      	b.n	3d72 <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    3d6c:	2300      	movs	r3, #0
    3d6e:	e000      	b.n	3d72 <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
    3d70:	2301      	movs	r3, #1
  }
}
    3d72:	0018      	movs	r0, r3
    3d74:	46bd      	mov	sp, r7
    3d76:	b002      	add	sp, #8
    3d78:	bd80      	pop	{r7, pc}

00003d7a <_ZN11RingBufferNILi64EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;


template <int N>
RingBufferN<N>::RingBufferN( void )
    3d7a:	b580      	push	{r7, lr}
    3d7c:	b082      	sub	sp, #8
    3d7e:	af00      	add	r7, sp, #0
    3d80:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	2240      	movs	r2, #64	; 0x40
    3d86:	2100      	movs	r1, #0
    3d88:	0018      	movs	r0, r3
    3d8a:	f00c fd5b 	bl	10844 <memset>
    clear();
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	0018      	movs	r0, r3
    3d92:	f000 f805 	bl	3da0 <_ZN11RingBufferNILi64EE5clearEv>
}
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	0018      	movs	r0, r3
    3d9a:	46bd      	mov	sp, r7
    3d9c:	b002      	add	sp, #8
    3d9e:	bd80      	pop	{r7, pc}

00003da0 <_ZN11RingBufferNILi64EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
    3da0:	b580      	push	{r7, lr}
    3da2:	b082      	sub	sp, #8
    3da4:	af00      	add	r7, sp, #0
    3da6:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	2200      	movs	r2, #0
    3dac:	641a      	str	r2, [r3, #64]	; 0x40
  _iTail = 0;
    3dae:	687b      	ldr	r3, [r7, #4]
    3db0:	2200      	movs	r2, #0
    3db2:	645a      	str	r2, [r3, #68]	; 0x44
}
    3db4:	46c0      	nop			; (mov r8, r8)
    3db6:	46bd      	mov	sp, r7
    3db8:	b002      	add	sp, #8
    3dba:	bd80      	pop	{r7, pc}

00003dbc <_ZN11RingBufferNILi64EE9availableEv>:

  return value;
}

template <int N>
int RingBufferN<N>::available()
    3dbc:	b580      	push	{r7, lr}
    3dbe:	b084      	sub	sp, #16
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	6078      	str	r0, [r7, #4]
{
  int delta = _iHead - _iTail;
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3dc8:	687b      	ldr	r3, [r7, #4]
    3dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3dcc:	1ad3      	subs	r3, r2, r3
    3dce:	60fb      	str	r3, [r7, #12]

  if(delta < 0)
    3dd0:	68fb      	ldr	r3, [r7, #12]
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	da02      	bge.n	3ddc <_ZN11RingBufferNILi64EE9availableEv+0x20>
    return N + delta;
    3dd6:	68fb      	ldr	r3, [r7, #12]
    3dd8:	3340      	adds	r3, #64	; 0x40
    3dda:	e000      	b.n	3dde <_ZN11RingBufferNILi64EE9availableEv+0x22>
  else
    return delta;
    3ddc:	68fb      	ldr	r3, [r7, #12]
}
    3dde:	0018      	movs	r0, r3
    3de0:	46bd      	mov	sp, r7
    3de2:	b004      	add	sp, #16
    3de4:	bd80      	pop	{r7, pc}

00003de6 <_ZN11RingBufferNILi64EE10store_charEh>:
void RingBufferN<N>::store_char( uint8_t c )
    3de6:	b580      	push	{r7, lr}
    3de8:	b084      	sub	sp, #16
    3dea:	af00      	add	r7, sp, #0
    3dec:	6078      	str	r0, [r7, #4]
    3dee:	000a      	movs	r2, r1
    3df0:	1cfb      	adds	r3, r7, #3
    3df2:	701a      	strb	r2, [r3, #0]
  int i = nextIndex(_iHead);
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3df8:	687b      	ldr	r3, [r7, #4]
    3dfa:	0011      	movs	r1, r2
    3dfc:	0018      	movs	r0, r3
    3dfe:	f000 f892 	bl	3f26 <_ZN11RingBufferNILi64EE9nextIndexEi>
    3e02:	0003      	movs	r3, r0
    3e04:	60fb      	str	r3, [r7, #12]
  if ( i != _iTail )
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e0a:	68fb      	ldr	r3, [r7, #12]
    3e0c:	1ad3      	subs	r3, r2, r3
    3e0e:	1e5a      	subs	r2, r3, #1
    3e10:	4193      	sbcs	r3, r2
    3e12:	b2db      	uxtb	r3, r3
    3e14:	2b00      	cmp	r3, #0
    3e16:	d008      	beq.n	3e2a <_ZN11RingBufferNILi64EE10store_charEh+0x44>
    _aucBuffer[_iHead] = c ;
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e1c:	687a      	ldr	r2, [r7, #4]
    3e1e:	1cf9      	adds	r1, r7, #3
    3e20:	7809      	ldrb	r1, [r1, #0]
    3e22:	54d1      	strb	r1, [r2, r3]
    _iHead = i ;
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	68fa      	ldr	r2, [r7, #12]
    3e28:	641a      	str	r2, [r3, #64]	; 0x40
}
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	46bd      	mov	sp, r7
    3e2e:	b004      	add	sp, #16
    3e30:	bd80      	pop	{r7, pc}

00003e32 <_ZN11RingBufferNILi64EE17availableForStoreEv>:

template <int N>
int RingBufferN<N>::availableForStore()
    3e32:	b580      	push	{r7, lr}
    3e34:	b082      	sub	sp, #8
    3e36:	af00      	add	r7, sp, #0
    3e38:	6078      	str	r0, [r7, #4]
{
  if (_iHead >= _iTail)
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3e3e:	687b      	ldr	r3, [r7, #4]
    3e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e42:	17d0      	asrs	r0, r2, #31
    3e44:	0fd9      	lsrs	r1, r3, #31
    3e46:	429a      	cmp	r2, r3
    3e48:	4148      	adcs	r0, r1
    3e4a:	0003      	movs	r3, r0
    3e4c:	b2db      	uxtb	r3, r3
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d007      	beq.n	3e62 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x30>
    return N - 1 - _iHead + _iTail;
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e56:	223f      	movs	r2, #63	; 0x3f
    3e58:	1ad2      	subs	r2, r2, r3
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e5e:	18d3      	adds	r3, r2, r3
    3e60:	e005      	b.n	3e6e <_ZN11RingBufferNILi64EE17availableForStoreEv+0x3c>
  else
    return _iTail - _iHead - 1;
    3e62:	687b      	ldr	r3, [r7, #4]
    3e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e66:	687b      	ldr	r3, [r7, #4]
    3e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e6a:	1ad3      	subs	r3, r2, r3
    3e6c:	3b01      	subs	r3, #1
}
    3e6e:	0018      	movs	r0, r3
    3e70:	46bd      	mov	sp, r7
    3e72:	b002      	add	sp, #8
    3e74:	bd80      	pop	{r7, pc}

00003e76 <_ZN11RingBufferNILi64EE9read_charEv>:
int RingBufferN<N>::read_char()
    3e76:	b580      	push	{r7, lr}
    3e78:	b084      	sub	sp, #16
    3e7a:	af00      	add	r7, sp, #0
    3e7c:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    3e7e:	687b      	ldr	r3, [r7, #4]
    3e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e86:	1ad3      	subs	r3, r2, r3
    3e88:	425a      	negs	r2, r3
    3e8a:	4153      	adcs	r3, r2
    3e8c:	b2db      	uxtb	r3, r3
    3e8e:	2b00      	cmp	r3, #0
    3e90:	d002      	beq.n	3e98 <_ZN11RingBufferNILi64EE9read_charEv+0x22>
    return -1;
    3e92:	2301      	movs	r3, #1
    3e94:	425b      	negs	r3, r3
    3e96:	e013      	b.n	3ec0 <_ZN11RingBufferNILi64EE9read_charEv+0x4a>
  uint8_t value = _aucBuffer[_iTail];
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e9c:	230f      	movs	r3, #15
    3e9e:	18fb      	adds	r3, r7, r3
    3ea0:	6879      	ldr	r1, [r7, #4]
    3ea2:	5c8a      	ldrb	r2, [r1, r2]
    3ea4:	701a      	strb	r2, [r3, #0]
  _iTail = nextIndex(_iTail);
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3eaa:	687b      	ldr	r3, [r7, #4]
    3eac:	0011      	movs	r1, r2
    3eae:	0018      	movs	r0, r3
    3eb0:	f000 f839 	bl	3f26 <_ZN11RingBufferNILi64EE9nextIndexEi>
    3eb4:	0002      	movs	r2, r0
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	645a      	str	r2, [r3, #68]	; 0x44
  return value;
    3eba:	230f      	movs	r3, #15
    3ebc:	18fb      	adds	r3, r7, r3
    3ebe:	781b      	ldrb	r3, [r3, #0]
}
    3ec0:	0018      	movs	r0, r3
    3ec2:	46bd      	mov	sp, r7
    3ec4:	b004      	add	sp, #16
    3ec6:	bd80      	pop	{r7, pc}

00003ec8 <_ZN11RingBufferNILi64EE4peekEv>:

template <int N>
int RingBufferN<N>::peek()
    3ec8:	b580      	push	{r7, lr}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
{
  if(_iTail == _iHead)
    3ed0:	687b      	ldr	r3, [r7, #4]
    3ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3ed4:	687b      	ldr	r3, [r7, #4]
    3ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3ed8:	1ad3      	subs	r3, r2, r3
    3eda:	425a      	negs	r2, r3
    3edc:	4153      	adcs	r3, r2
    3ede:	b2db      	uxtb	r3, r3
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d002      	beq.n	3eea <_ZN11RingBufferNILi64EE4peekEv+0x22>
    return -1;
    3ee4:	2301      	movs	r3, #1
    3ee6:	425b      	negs	r3, r3
    3ee8:	e003      	b.n	3ef2 <_ZN11RingBufferNILi64EE4peekEv+0x2a>

  return _aucBuffer[_iTail];
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3eee:	687a      	ldr	r2, [r7, #4]
    3ef0:	5cd3      	ldrb	r3, [r2, r3]
}
    3ef2:	0018      	movs	r0, r3
    3ef4:	46bd      	mov	sp, r7
    3ef6:	b002      	add	sp, #8
    3ef8:	bd80      	pop	{r7, pc}

00003efa <_ZN11RingBufferNILi64EE6isFullEv>:
{
  return (uint32_t)(index + 1) % N;
}

template <int N>
bool RingBufferN<N>::isFull()
    3efa:	b580      	push	{r7, lr}
    3efc:	b082      	sub	sp, #8
    3efe:	af00      	add	r7, sp, #0
    3f00:	6078      	str	r0, [r7, #4]
{
  return (nextIndex(_iHead) == _iTail);
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	0011      	movs	r1, r2
    3f0a:	0018      	movs	r0, r3
    3f0c:	f000 f80b 	bl	3f26 <_ZN11RingBufferNILi64EE9nextIndexEi>
    3f10:	0002      	movs	r2, r0
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f16:	1ad3      	subs	r3, r2, r3
    3f18:	425a      	negs	r2, r3
    3f1a:	4153      	adcs	r3, r2
    3f1c:	b2db      	uxtb	r3, r3
}
    3f1e:	0018      	movs	r0, r3
    3f20:	46bd      	mov	sp, r7
    3f22:	b002      	add	sp, #8
    3f24:	bd80      	pop	{r7, pc}

00003f26 <_ZN11RingBufferNILi64EE9nextIndexEi>:
int RingBufferN<N>::nextIndex(int index)
    3f26:	b580      	push	{r7, lr}
    3f28:	b082      	sub	sp, #8
    3f2a:	af00      	add	r7, sp, #0
    3f2c:	6078      	str	r0, [r7, #4]
    3f2e:	6039      	str	r1, [r7, #0]
  return (uint32_t)(index + 1) % N;
    3f30:	683b      	ldr	r3, [r7, #0]
    3f32:	3301      	adds	r3, #1
    3f34:	223f      	movs	r2, #63	; 0x3f
    3f36:	4013      	ands	r3, r2
}
    3f38:	0018      	movs	r0, r3
    3f3a:	46bd      	mov	sp, r7
    3f3c:	b002      	add	sp, #8
    3f3e:	bd80      	pop	{r7, pc}

00003f40 <_ZN4UartD1Ev>:
class Uart : public HardwareSerial
    3f40:	b580      	push	{r7, lr}
    3f42:	b082      	sub	sp, #8
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    3f48:	4a05      	ldr	r2, [pc, #20]	; (3f60 <_ZN4UartD1Ev+0x20>)
    3f4a:	687b      	ldr	r3, [r7, #4]
    3f4c:	601a      	str	r2, [r3, #0]
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	0018      	movs	r0, r3
    3f52:	f7ff fb7d 	bl	3650 <_ZN14HardwareSerialD1Ev>
    3f56:	687b      	ldr	r3, [r7, #4]
    3f58:	0018      	movs	r0, r3
    3f5a:	46bd      	mov	sp, r7
    3f5c:	b002      	add	sp, #8
    3f5e:	bd80      	pop	{r7, pc}
    3f60:	000133dc 	.word	0x000133dc

00003f64 <_ZN4UartD0Ev>:
    3f64:	b580      	push	{r7, lr}
    3f66:	b082      	sub	sp, #8
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	0018      	movs	r0, r3
    3f70:	f7ff ffe6 	bl	3f40 <_ZN4UartD1Ev>
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	0018      	movs	r0, r3
    3f78:	f009 fbbf 	bl	d6fa <_ZdlPv>
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	0018      	movs	r0, r3
    3f80:	46bd      	mov	sp, r7
    3f82:	b002      	add	sp, #8
    3f84:	bd80      	pop	{r7, pc}
	...

00003f88 <__NVIC_EnableIRQ>:
{
    3f88:	b580      	push	{r7, lr}
    3f8a:	b082      	sub	sp, #8
    3f8c:	af00      	add	r7, sp, #0
    3f8e:	0002      	movs	r2, r0
    3f90:	1dfb      	adds	r3, r7, #7
    3f92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3f94:	1dfb      	adds	r3, r7, #7
    3f96:	781b      	ldrb	r3, [r3, #0]
    3f98:	2b7f      	cmp	r3, #127	; 0x7f
    3f9a:	d809      	bhi.n	3fb0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f9c:	4b06      	ldr	r3, [pc, #24]	; (3fb8 <__NVIC_EnableIRQ+0x30>)
    3f9e:	1dfa      	adds	r2, r7, #7
    3fa0:	7812      	ldrb	r2, [r2, #0]
    3fa2:	b252      	sxtb	r2, r2
    3fa4:	211f      	movs	r1, #31
    3fa6:	400a      	ands	r2, r1
    3fa8:	2101      	movs	r1, #1
    3faa:	4091      	lsls	r1, r2
    3fac:	000a      	movs	r2, r1
    3fae:	601a      	str	r2, [r3, #0]
}
    3fb0:	46c0      	nop			; (mov r8, r8)
    3fb2:	46bd      	mov	sp, r7
    3fb4:	b002      	add	sp, #8
    3fb6:	bd80      	pop	{r7, pc}
    3fb8:	e000e100 	.word	0xe000e100

00003fbc <__NVIC_SetPriority>:
{
    3fbc:	b5b0      	push	{r4, r5, r7, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	0002      	movs	r2, r0
    3fc4:	6039      	str	r1, [r7, #0]
    3fc6:	1dfb      	adds	r3, r7, #7
    3fc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3fca:	1dfb      	adds	r3, r7, #7
    3fcc:	781b      	ldrb	r3, [r3, #0]
    3fce:	2b7f      	cmp	r3, #127	; 0x7f
    3fd0:	d828      	bhi.n	4024 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3fd2:	4c2f      	ldr	r4, [pc, #188]	; (4090 <__NVIC_SetPriority+0xd4>)
    3fd4:	1dfb      	adds	r3, r7, #7
    3fd6:	781b      	ldrb	r3, [r3, #0]
    3fd8:	b25b      	sxtb	r3, r3
    3fda:	089b      	lsrs	r3, r3, #2
    3fdc:	492c      	ldr	r1, [pc, #176]	; (4090 <__NVIC_SetPriority+0xd4>)
    3fde:	1dfa      	adds	r2, r7, #7
    3fe0:	7812      	ldrb	r2, [r2, #0]
    3fe2:	b252      	sxtb	r2, r2
    3fe4:	0892      	lsrs	r2, r2, #2
    3fe6:	32c0      	adds	r2, #192	; 0xc0
    3fe8:	0092      	lsls	r2, r2, #2
    3fea:	5852      	ldr	r2, [r2, r1]
    3fec:	1df9      	adds	r1, r7, #7
    3fee:	7809      	ldrb	r1, [r1, #0]
    3ff0:	b249      	sxtb	r1, r1
    3ff2:	2003      	movs	r0, #3
    3ff4:	4001      	ands	r1, r0
    3ff6:	00c9      	lsls	r1, r1, #3
    3ff8:	20ff      	movs	r0, #255	; 0xff
    3ffa:	4088      	lsls	r0, r1
    3ffc:	0001      	movs	r1, r0
    3ffe:	43c9      	mvns	r1, r1
    4000:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    4002:	683a      	ldr	r2, [r7, #0]
    4004:	0192      	lsls	r2, r2, #6
    4006:	20ff      	movs	r0, #255	; 0xff
    4008:	4010      	ands	r0, r2
    400a:	1dfa      	adds	r2, r7, #7
    400c:	7812      	ldrb	r2, [r2, #0]
    400e:	b252      	sxtb	r2, r2
    4010:	2503      	movs	r5, #3
    4012:	402a      	ands	r2, r5
    4014:	00d2      	lsls	r2, r2, #3
    4016:	4090      	lsls	r0, r2
    4018:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    401a:	430a      	orrs	r2, r1
    401c:	33c0      	adds	r3, #192	; 0xc0
    401e:	009b      	lsls	r3, r3, #2
    4020:	511a      	str	r2, [r3, r4]
}
    4022:	e031      	b.n	4088 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4024:	4c1b      	ldr	r4, [pc, #108]	; (4094 <__NVIC_SetPriority+0xd8>)
    4026:	1dfb      	adds	r3, r7, #7
    4028:	781b      	ldrb	r3, [r3, #0]
    402a:	b25b      	sxtb	r3, r3
    402c:	220f      	movs	r2, #15
    402e:	4013      	ands	r3, r2
    4030:	3b08      	subs	r3, #8
    4032:	0899      	lsrs	r1, r3, #2
    4034:	4a17      	ldr	r2, [pc, #92]	; (4094 <__NVIC_SetPriority+0xd8>)
    4036:	1dfb      	adds	r3, r7, #7
    4038:	781b      	ldrb	r3, [r3, #0]
    403a:	b25b      	sxtb	r3, r3
    403c:	200f      	movs	r0, #15
    403e:	4003      	ands	r3, r0
    4040:	3b08      	subs	r3, #8
    4042:	089b      	lsrs	r3, r3, #2
    4044:	3306      	adds	r3, #6
    4046:	009b      	lsls	r3, r3, #2
    4048:	18d3      	adds	r3, r2, r3
    404a:	3304      	adds	r3, #4
    404c:	681b      	ldr	r3, [r3, #0]
    404e:	1dfa      	adds	r2, r7, #7
    4050:	7812      	ldrb	r2, [r2, #0]
    4052:	b252      	sxtb	r2, r2
    4054:	2003      	movs	r0, #3
    4056:	4002      	ands	r2, r0
    4058:	00d2      	lsls	r2, r2, #3
    405a:	20ff      	movs	r0, #255	; 0xff
    405c:	4090      	lsls	r0, r2
    405e:	0002      	movs	r2, r0
    4060:	43d2      	mvns	r2, r2
    4062:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    4064:	683b      	ldr	r3, [r7, #0]
    4066:	019b      	lsls	r3, r3, #6
    4068:	20ff      	movs	r0, #255	; 0xff
    406a:	4018      	ands	r0, r3
    406c:	1dfb      	adds	r3, r7, #7
    406e:	781b      	ldrb	r3, [r3, #0]
    4070:	b25b      	sxtb	r3, r3
    4072:	2503      	movs	r5, #3
    4074:	402b      	ands	r3, r5
    4076:	00db      	lsls	r3, r3, #3
    4078:	4098      	lsls	r0, r3
    407a:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    407c:	431a      	orrs	r2, r3
    407e:	1d8b      	adds	r3, r1, #6
    4080:	009b      	lsls	r3, r3, #2
    4082:	18e3      	adds	r3, r4, r3
    4084:	3304      	adds	r3, #4
    4086:	601a      	str	r2, [r3, #0]
}
    4088:	46c0      	nop			; (mov r8, r8)
    408a:	46bd      	mov	sp, r7
    408c:	b002      	add	sp, #8
    408e:	bdb0      	pop	{r4, r5, r7, pc}
    4090:	e000e100 	.word	0xe000e100
    4094:	e000ed00 	.word	0xe000ed00

00004098 <_ZN14USBDeviceClassC1Ev>:
	uint16_t wLength;
} USBSetup;

class USBDeviceClass {
public:
	USBDeviceClass() {};
    4098:	b580      	push	{r7, lr}
    409a:	b082      	sub	sp, #8
    409c:	af00      	add	r7, sp, #0
    409e:	6078      	str	r0, [r7, #4]
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	0018      	movs	r0, r3
    40a4:	46bd      	mov	sp, r7
    40a6:	b002      	add	sp, #8
    40a8:	bd80      	pop	{r7, pc}

000040aa <_ZN17UsbDeviceDescBankC1Ev>:
  __IO USB_DEVICE_ADDR_Type      ADDR;        /**< \brief Offset: 0x000 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Adress of Data Buffer */
  __IO USB_DEVICE_PCKSIZE_Type   PCKSIZE;     /**< \brief Offset: 0x004 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Packet Size */
  __IO USB_DEVICE_EXTREG_Type    EXTREG;      /**< \brief Offset: 0x008 (R/W 16) DEVICE_DESC_BANK Endpoint Bank, Extended */
  __IO USB_DEVICE_STATUS_BK_Type STATUS_BK;   /**< \brief Offset: 0x00A (R/W  8) DEVICE_DESC_BANK Enpoint Bank, Status of Bank */
       RoReg8                    Reserved1[0x5];
} UsbDeviceDescBank;
    40aa:	b580      	push	{r7, lr}
    40ac:	b082      	sub	sp, #8
    40ae:	af00      	add	r7, sp, #0
    40b0:	6078      	str	r0, [r7, #4]
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	0018      	movs	r0, r3
    40b6:	46bd      	mov	sp, r7
    40b8:	b002      	add	sp, #8
    40ba:	bd80      	pop	{r7, pc}

000040bc <_ZN19UsbDeviceDescriptorC1Ev>:

/** \brief USB_DEVICE Descriptor SRAM registers */
#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
typedef struct { /* USB is Device */
       UsbDeviceDescBank         DeviceDescBank[2]; /**< \brief Offset: 0x000 UsbDeviceDescBank groups */
} UsbDeviceDescriptor;
    40bc:	b5b0      	push	{r4, r5, r7, lr}
    40be:	b082      	sub	sp, #8
    40c0:	af00      	add	r7, sp, #0
    40c2:	6078      	str	r0, [r7, #4]
    40c4:	687b      	ldr	r3, [r7, #4]
    40c6:	2401      	movs	r4, #1
    40c8:	001d      	movs	r5, r3
    40ca:	2c00      	cmp	r4, #0
    40cc:	db05      	blt.n	40da <_ZN19UsbDeviceDescriptorC1Ev+0x1e>
    40ce:	0028      	movs	r0, r5
    40d0:	f7ff ffeb 	bl	40aa <_ZN17UsbDeviceDescBankC1Ev>
    40d4:	3510      	adds	r5, #16
    40d6:	3c01      	subs	r4, #1
    40d8:	e7f7      	b.n	40ca <_ZN19UsbDeviceDescriptorC1Ev+0xe>
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	0018      	movs	r0, r3
    40de:	46bd      	mov	sp, r7
    40e0:	b002      	add	sp, #8
    40e2:	bdb0      	pop	{r4, r5, r7, pc}

000040e4 <_ZN20USBDevice_SAMD21G18xC1Ev>:

typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    40e4:	b5b0      	push	{r4, r5, r7, lr}
    40e6:	b082      	sub	sp, #8
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	4a09      	ldr	r2, [pc, #36]	; (4114 <_ZN20USBDevice_SAMD21G18xC1Ev+0x30>)
    40f0:	601a      	str	r2, [r3, #0]
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	3304      	adds	r3, #4
    40f6:	2407      	movs	r4, #7
    40f8:	001d      	movs	r5, r3
    40fa:	2c00      	cmp	r4, #0
    40fc:	db05      	blt.n	410a <_ZN20USBDevice_SAMD21G18xC1Ev+0x26>
    40fe:	0028      	movs	r0, r5
    4100:	f7ff ffdc 	bl	40bc <_ZN19UsbDeviceDescriptorC1Ev>
    4104:	3520      	adds	r5, #32
    4106:	3c01      	subs	r4, #1
    4108:	e7f7      	b.n	40fa <_ZN20USBDevice_SAMD21G18xC1Ev+0x16>
		// Empty
	}
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	0018      	movs	r0, r3
    410e:	46bd      	mov	sp, r7
    4110:	b002      	add	sp, #8
    4112:	bdb0      	pop	{r4, r5, r7, pc}
    4114:	41005000 	.word	0x41005000

00004118 <_ZN20USBDevice_SAMD21G18x6enableEv>:

	// Reset USB Device
	void reset();

	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    4118:	b580      	push	{r7, lr}
    411a:	b082      	sub	sp, #8
    411c:	af00      	add	r7, sp, #0
    411e:	6078      	str	r0, [r7, #4]
    4120:	687b      	ldr	r3, [r7, #4]
    4122:	681a      	ldr	r2, [r3, #0]
    4124:	7813      	ldrb	r3, [r2, #0]
    4126:	2102      	movs	r1, #2
    4128:	430b      	orrs	r3, r1
    412a:	7013      	strb	r3, [r2, #0]
    412c:	46c0      	nop			; (mov r8, r8)
    412e:	46bd      	mov	sp, r7
    4130:	b002      	add	sp, #8
    4132:	bd80      	pop	{r7, pc}

00004134 <_ZN20USBDevice_SAMD21G18x16setUSBDeviceModeEv>:
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    4134:	b580      	push	{r7, lr}
    4136:	b082      	sub	sp, #8
    4138:	af00      	add	r7, sp, #0
    413a:	6078      	str	r0, [r7, #4]
    413c:	687b      	ldr	r3, [r7, #4]
    413e:	681a      	ldr	r2, [r3, #0]
    4140:	7813      	ldrb	r3, [r2, #0]
    4142:	217f      	movs	r1, #127	; 0x7f
    4144:	400b      	ands	r3, r1
    4146:	7013      	strb	r3, [r2, #0]
    4148:	46c0      	nop			; (mov r8, r8)
    414a:	46bd      	mov	sp, r7
    414c:	b002      	add	sp, #8
    414e:	bd80      	pop	{r7, pc}

00004150 <_ZN20USBDevice_SAMD21G18x12runInStandbyEv>:
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    4150:	b580      	push	{r7, lr}
    4152:	b082      	sub	sp, #8
    4154:	af00      	add	r7, sp, #0
    4156:	6078      	str	r0, [r7, #4]
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	681a      	ldr	r2, [r3, #0]
    415c:	7813      	ldrb	r3, [r2, #0]
    415e:	2104      	movs	r1, #4
    4160:	430b      	orrs	r3, r1
    4162:	7013      	strb	r3, [r2, #0]
    4164:	46c0      	nop			; (mov r8, r8)
    4166:	46bd      	mov	sp, r7
    4168:	b002      	add	sp, #8
    416a:	bd80      	pop	{r7, pc}

0000416c <_ZN20USBDevice_SAMD21G18x12setFullSpeedEv>:
	inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }
	inline void wakeupHost()     { usb.CTRLB.bit.UPRSM = 1; }

	// USB speed
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    416c:	b580      	push	{r7, lr}
    416e:	b082      	sub	sp, #8
    4170:	af00      	add	r7, sp, #0
    4172:	6078      	str	r0, [r7, #4]
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	681a      	ldr	r2, [r3, #0]
    4178:	8913      	ldrh	r3, [r2, #8]
    417a:	210c      	movs	r1, #12
    417c:	438b      	bics	r3, r1
    417e:	8113      	strh	r3, [r2, #8]
    4180:	46c0      	nop			; (mov r8, r8)
    4182:	46bd      	mov	sp, r7
    4184:	b002      	add	sp, #8
    4186:	bd80      	pop	{r7, pc}

00004188 <_ZN20USBDevice_SAMD21G18x6attachEv>:
	inline void setLowSpeed()        { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;   }
	inline void setHiSpeed()         { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HS_Val;   }
	inline void setHiSpeedTestMode() { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HSTM_Val; }

	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    4188:	b580      	push	{r7, lr}
    418a:	b082      	sub	sp, #8
    418c:	af00      	add	r7, sp, #0
    418e:	6078      	str	r0, [r7, #4]
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	681a      	ldr	r2, [r3, #0]
    4194:	8913      	ldrh	r3, [r2, #8]
    4196:	2101      	movs	r1, #1
    4198:	438b      	bics	r3, r1
    419a:	8113      	strh	r3, [r2, #8]
    419c:	46c0      	nop			; (mov r8, r8)
    419e:	46bd      	mov	sp, r7
    41a0:	b002      	add	sp, #8
    41a2:	bd80      	pop	{r7, pc}

000041a4 <_ZN20USBDevice_SAMD21G18x21isEndOfResetInterruptEv>:
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    41a4:	b580      	push	{r7, lr}
    41a6:	b082      	sub	sp, #8
    41a8:	af00      	add	r7, sp, #0
    41aa:	6078      	str	r0, [r7, #4]
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	681b      	ldr	r3, [r3, #0]
    41b0:	8b9b      	ldrh	r3, [r3, #28]
    41b2:	071b      	lsls	r3, r3, #28
    41b4:	0fdb      	lsrs	r3, r3, #31
    41b6:	b2db      	uxtb	r3, r3
    41b8:	0018      	movs	r0, r3
    41ba:	46bd      	mov	sp, r7
    41bc:	b002      	add	sp, #8
    41be:	bd80      	pop	{r7, pc}

000041c0 <_ZN20USBDevice_SAMD21G18x22ackEndOfResetInterruptEv>:
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    41c0:	b580      	push	{r7, lr}
    41c2:	b082      	sub	sp, #8
    41c4:	af00      	add	r7, sp, #0
    41c6:	6078      	str	r0, [r7, #4]
    41c8:	687b      	ldr	r3, [r7, #4]
    41ca:	681b      	ldr	r3, [r3, #0]
    41cc:	2208      	movs	r2, #8
    41ce:	839a      	strh	r2, [r3, #28]
    41d0:	46c0      	nop			; (mov r8, r8)
    41d2:	46bd      	mov	sp, r7
    41d4:	b002      	add	sp, #8
    41d6:	bd80      	pop	{r7, pc}

000041d8 <_ZN20USBDevice_SAMD21G18x25enableEndOfResetInterruptEv>:
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    41d8:	b580      	push	{r7, lr}
    41da:	b082      	sub	sp, #8
    41dc:	af00      	add	r7, sp, #0
    41de:	6078      	str	r0, [r7, #4]
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	681a      	ldr	r2, [r3, #0]
    41e4:	8b13      	ldrh	r3, [r2, #24]
    41e6:	2108      	movs	r1, #8
    41e8:	430b      	orrs	r3, r1
    41ea:	8313      	strh	r3, [r2, #24]
    41ec:	46c0      	nop			; (mov r8, r8)
    41ee:	46bd      	mov	sp, r7
    41f0:	b002      	add	sp, #8
    41f2:	bd80      	pop	{r7, pc}

000041f4 <_ZN20USBDevice_SAMD21G18x23isStartOfFrameInterruptEv>:
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    41f4:	b580      	push	{r7, lr}
    41f6:	b082      	sub	sp, #8
    41f8:	af00      	add	r7, sp, #0
    41fa:	6078      	str	r0, [r7, #4]
    41fc:	687b      	ldr	r3, [r7, #4]
    41fe:	681b      	ldr	r3, [r3, #0]
    4200:	8b9b      	ldrh	r3, [r3, #28]
    4202:	075b      	lsls	r3, r3, #29
    4204:	0fdb      	lsrs	r3, r3, #31
    4206:	b2db      	uxtb	r3, r3
    4208:	0018      	movs	r0, r3
    420a:	46bd      	mov	sp, r7
    420c:	b002      	add	sp, #8
    420e:	bd80      	pop	{r7, pc}

00004210 <_ZN20USBDevice_SAMD21G18x24ackStartOfFrameInterruptEv>:
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    4210:	b580      	push	{r7, lr}
    4212:	b082      	sub	sp, #8
    4214:	af00      	add	r7, sp, #0
    4216:	6078      	str	r0, [r7, #4]
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	681b      	ldr	r3, [r3, #0]
    421c:	2204      	movs	r2, #4
    421e:	839a      	strh	r2, [r3, #28]
    4220:	46c0      	nop			; (mov r8, r8)
    4222:	46bd      	mov	sp, r7
    4224:	b002      	add	sp, #8
    4226:	bd80      	pop	{r7, pc}

00004228 <_ZN20USBDevice_SAMD21G18x27enableStartOfFrameInterruptEv>:
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    4228:	b580      	push	{r7, lr}
    422a:	b082      	sub	sp, #8
    422c:	af00      	add	r7, sp, #0
    422e:	6078      	str	r0, [r7, #4]
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	681a      	ldr	r2, [r3, #0]
    4234:	8b13      	ldrh	r3, [r2, #24]
    4236:	2104      	movs	r1, #4
    4238:	430b      	orrs	r3, r1
    423a:	8313      	strh	r3, [r2, #24]
    423c:	46c0      	nop			; (mov r8, r8)
    423e:	46bd      	mov	sp, r7
    4240:	b002      	add	sp, #8
    4242:	bd80      	pop	{r7, pc}

00004244 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>:

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    4244:	b590      	push	{r4, r7, lr}
    4246:	b083      	sub	sp, #12
    4248:	af00      	add	r7, sp, #0
    424a:	6078      	str	r0, [r7, #4]
    424c:	0008      	movs	r0, r1
    424e:	0011      	movs	r1, r2
    4250:	1cfb      	adds	r3, r7, #3
    4252:	1c02      	adds	r2, r0, #0
    4254:	701a      	strb	r2, [r3, #0]
    4256:	1cbb      	adds	r3, r7, #2
    4258:	1c0a      	adds	r2, r1, #0
    425a:	701a      	strb	r2, [r3, #0]
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	681a      	ldr	r2, [r3, #0]
    4260:	1cfb      	adds	r3, r7, #3
    4262:	781b      	ldrb	r3, [r3, #0]
    4264:	1cb9      	adds	r1, r7, #2
    4266:	7809      	ldrb	r1, [r1, #0]
    4268:	2007      	movs	r0, #7
    426a:	4001      	ands	r1, r0
    426c:	b2c8      	uxtb	r0, r1
    426e:	3308      	adds	r3, #8
    4270:	0159      	lsls	r1, r3, #5
    4272:	5c8b      	ldrb	r3, [r1, r2]
    4274:	2407      	movs	r4, #7
    4276:	4004      	ands	r4, r0
    4278:	2007      	movs	r0, #7
    427a:	4383      	bics	r3, r0
    427c:	1c18      	adds	r0, r3, #0
    427e:	1c23      	adds	r3, r4, #0
    4280:	4303      	orrs	r3, r0
    4282:	548b      	strb	r3, [r1, r2]
    4284:	46c0      	nop			; (mov r8, r8)
    4286:	46bd      	mov	sp, r7
    4288:	b003      	add	sp, #12
    428a:	bd90      	pop	{r4, r7, pc}

0000428c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>:
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    428c:	b590      	push	{r4, r7, lr}
    428e:	b083      	sub	sp, #12
    4290:	af00      	add	r7, sp, #0
    4292:	6078      	str	r0, [r7, #4]
    4294:	0008      	movs	r0, r1
    4296:	0011      	movs	r1, r2
    4298:	1cfb      	adds	r3, r7, #3
    429a:	1c02      	adds	r2, r0, #0
    429c:	701a      	strb	r2, [r3, #0]
    429e:	1cbb      	adds	r3, r7, #2
    42a0:	1c0a      	adds	r2, r1, #0
    42a2:	701a      	strb	r2, [r3, #0]
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	681a      	ldr	r2, [r3, #0]
    42a8:	1cfb      	adds	r3, r7, #3
    42aa:	781b      	ldrb	r3, [r3, #0]
    42ac:	1cb9      	adds	r1, r7, #2
    42ae:	7809      	ldrb	r1, [r1, #0]
    42b0:	2007      	movs	r0, #7
    42b2:	4001      	ands	r1, r0
    42b4:	b2c8      	uxtb	r0, r1
    42b6:	3308      	adds	r3, #8
    42b8:	0159      	lsls	r1, r3, #5
    42ba:	5c8b      	ldrb	r3, [r1, r2]
    42bc:	2407      	movs	r4, #7
    42be:	4020      	ands	r0, r4
    42c0:	0104      	lsls	r4, r0, #4
    42c2:	2070      	movs	r0, #112	; 0x70
    42c4:	4383      	bics	r3, r0
    42c6:	1c18      	adds	r0, r3, #0
    42c8:	1c23      	adds	r3, r4, #0
    42ca:	4303      	orrs	r3, r0
    42cc:	548b      	strb	r3, [r1, r2]
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	46bd      	mov	sp, r7
    42d2:	b003      	add	sp, #12
    42d4:	bd90      	pop	{r4, r7, pc}

000042d6 <_ZN20USBDevice_SAMD21G18x18epInterruptSummaryEv>:

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    42d6:	b580      	push	{r7, lr}
    42d8:	b082      	sub	sp, #8
    42da:	af00      	add	r7, sp, #0
    42dc:	6078      	str	r0, [r7, #4]
    42de:	687b      	ldr	r3, [r7, #4]
    42e0:	681b      	ldr	r3, [r3, #0]
    42e2:	8c1b      	ldrh	r3, [r3, #32]
    42e4:	b29b      	uxth	r3, r3
    42e6:	0018      	movs	r0, r3
    42e8:	46bd      	mov	sp, r7
    42ea:	b002      	add	sp, #8
    42ec:	bd80      	pop	{r7, pc}

000042ee <_ZN20USBDevice_SAMD21G18x22epBank0IsSetupReceivedEh>:

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    42ee:	b580      	push	{r7, lr}
    42f0:	b082      	sub	sp, #8
    42f2:	af00      	add	r7, sp, #0
    42f4:	6078      	str	r0, [r7, #4]
    42f6:	000a      	movs	r2, r1
    42f8:	1cfb      	adds	r3, r7, #3
    42fa:	701a      	strb	r2, [r3, #0]
    42fc:	687b      	ldr	r3, [r7, #4]
    42fe:	681a      	ldr	r2, [r3, #0]
    4300:	1cfb      	adds	r3, r7, #3
    4302:	781b      	ldrb	r3, [r3, #0]
    4304:	3308      	adds	r3, #8
    4306:	015b      	lsls	r3, r3, #5
    4308:	18d3      	adds	r3, r2, r3
    430a:	79db      	ldrb	r3, [r3, #7]
    430c:	06db      	lsls	r3, r3, #27
    430e:	0fdb      	lsrs	r3, r3, #31
    4310:	b2db      	uxtb	r3, r3
    4312:	0018      	movs	r0, r3
    4314:	46bd      	mov	sp, r7
    4316:	b002      	add	sp, #8
    4318:	bd80      	pop	{r7, pc}

0000431a <_ZN20USBDevice_SAMD21G18x16epBank1IsStalledEh>:
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    431a:	b580      	push	{r7, lr}
    431c:	b082      	sub	sp, #8
    431e:	af00      	add	r7, sp, #0
    4320:	6078      	str	r0, [r7, #4]
    4322:	000a      	movs	r2, r1
    4324:	1cfb      	adds	r3, r7, #3
    4326:	701a      	strb	r2, [r3, #0]
    4328:	687b      	ldr	r3, [r7, #4]
    432a:	681a      	ldr	r2, [r3, #0]
    432c:	1cfb      	adds	r3, r7, #3
    432e:	781b      	ldrb	r3, [r3, #0]
    4330:	3308      	adds	r3, #8
    4332:	015b      	lsls	r3, r3, #5
    4334:	18d3      	adds	r3, r2, r3
    4336:	79db      	ldrb	r3, [r3, #7]
    4338:	065b      	lsls	r3, r3, #25
    433a:	0fdb      	lsrs	r3, r3, #31
    433c:	b2db      	uxtb	r3, r3
    433e:	0018      	movs	r0, r3
    4340:	46bd      	mov	sp, r7
    4342:	b002      	add	sp, #8
    4344:	bd80      	pop	{r7, pc}

00004346 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>:
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    4346:	b580      	push	{r7, lr}
    4348:	b082      	sub	sp, #8
    434a:	af00      	add	r7, sp, #0
    434c:	6078      	str	r0, [r7, #4]
    434e:	000a      	movs	r2, r1
    4350:	1cfb      	adds	r3, r7, #3
    4352:	701a      	strb	r2, [r3, #0]
    4354:	687b      	ldr	r3, [r7, #4]
    4356:	681a      	ldr	r2, [r3, #0]
    4358:	1cfb      	adds	r3, r7, #3
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	3308      	adds	r3, #8
    435e:	015b      	lsls	r3, r3, #5
    4360:	18d3      	adds	r3, r2, r3
    4362:	79db      	ldrb	r3, [r3, #7]
    4364:	07db      	lsls	r3, r3, #31
    4366:	0fdb      	lsrs	r3, r3, #31
    4368:	b2db      	uxtb	r3, r3
    436a:	0018      	movs	r0, r3
    436c:	46bd      	mov	sp, r7
    436e:	b002      	add	sp, #8
    4370:	bd80      	pop	{r7, pc}

00004372 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>:
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    4372:	b580      	push	{r7, lr}
    4374:	b082      	sub	sp, #8
    4376:	af00      	add	r7, sp, #0
    4378:	6078      	str	r0, [r7, #4]
    437a:	000a      	movs	r2, r1
    437c:	1cfb      	adds	r3, r7, #3
    437e:	701a      	strb	r2, [r3, #0]
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	681a      	ldr	r2, [r3, #0]
    4384:	1cfb      	adds	r3, r7, #3
    4386:	781b      	ldrb	r3, [r3, #0]
    4388:	3308      	adds	r3, #8
    438a:	015b      	lsls	r3, r3, #5
    438c:	18d3      	adds	r3, r2, r3
    438e:	79db      	ldrb	r3, [r3, #7]
    4390:	079b      	lsls	r3, r3, #30
    4392:	0fdb      	lsrs	r3, r3, #31
    4394:	b2db      	uxtb	r3, r3
    4396:	0018      	movs	r0, r3
    4398:	46bd      	mov	sp, r7
    439a:	b002      	add	sp, #8
    439c:	bd80      	pop	{r7, pc}

0000439e <_ZN20USBDevice_SAMD21G18x23epBank0AckSetupReceivedEh>:

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    439e:	b580      	push	{r7, lr}
    43a0:	b082      	sub	sp, #8
    43a2:	af00      	add	r7, sp, #0
    43a4:	6078      	str	r0, [r7, #4]
    43a6:	000a      	movs	r2, r1
    43a8:	1cfb      	adds	r3, r7, #3
    43aa:	701a      	strb	r2, [r3, #0]
    43ac:	687b      	ldr	r3, [r7, #4]
    43ae:	681a      	ldr	r2, [r3, #0]
    43b0:	1cfb      	adds	r3, r7, #3
    43b2:	781b      	ldrb	r3, [r3, #0]
    43b4:	3308      	adds	r3, #8
    43b6:	015b      	lsls	r3, r3, #5
    43b8:	18d3      	adds	r3, r2, r3
    43ba:	3307      	adds	r3, #7
    43bc:	2210      	movs	r2, #16
    43be:	701a      	strb	r2, [r3, #0]
    43c0:	46c0      	nop			; (mov r8, r8)
    43c2:	46bd      	mov	sp, r7
    43c4:	b002      	add	sp, #8
    43c6:	bd80      	pop	{r7, pc}

000043c8 <_ZN20USBDevice_SAMD21G18x17epBank1AckStalledEh>:
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    43c8:	b580      	push	{r7, lr}
    43ca:	b082      	sub	sp, #8
    43cc:	af00      	add	r7, sp, #0
    43ce:	6078      	str	r0, [r7, #4]
    43d0:	000a      	movs	r2, r1
    43d2:	1cfb      	adds	r3, r7, #3
    43d4:	701a      	strb	r2, [r3, #0]
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	681a      	ldr	r2, [r3, #0]
    43da:	1cfb      	adds	r3, r7, #3
    43dc:	781b      	ldrb	r3, [r3, #0]
    43de:	3308      	adds	r3, #8
    43e0:	015b      	lsls	r3, r3, #5
    43e2:	18d3      	adds	r3, r2, r3
    43e4:	3307      	adds	r3, #7
    43e6:	2240      	movs	r2, #64	; 0x40
    43e8:	701a      	strb	r2, [r3, #0]
    43ea:	46c0      	nop			; (mov r8, r8)
    43ec:	46bd      	mov	sp, r7
    43ee:	b002      	add	sp, #8
    43f0:	bd80      	pop	{r7, pc}

000043f2 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>:
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    43f2:	b580      	push	{r7, lr}
    43f4:	b082      	sub	sp, #8
    43f6:	af00      	add	r7, sp, #0
    43f8:	6078      	str	r0, [r7, #4]
    43fa:	000a      	movs	r2, r1
    43fc:	1cfb      	adds	r3, r7, #3
    43fe:	701a      	strb	r2, [r3, #0]
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	681a      	ldr	r2, [r3, #0]
    4404:	1cfb      	adds	r3, r7, #3
    4406:	781b      	ldrb	r3, [r3, #0]
    4408:	3308      	adds	r3, #8
    440a:	015b      	lsls	r3, r3, #5
    440c:	18d3      	adds	r3, r2, r3
    440e:	3307      	adds	r3, #7
    4410:	2201      	movs	r2, #1
    4412:	701a      	strb	r2, [r3, #0]
    4414:	46c0      	nop			; (mov r8, r8)
    4416:	46bd      	mov	sp, r7
    4418:	b002      	add	sp, #8
    441a:	bd80      	pop	{r7, pc}

0000441c <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>:
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    441c:	b580      	push	{r7, lr}
    441e:	b082      	sub	sp, #8
    4420:	af00      	add	r7, sp, #0
    4422:	6078      	str	r0, [r7, #4]
    4424:	000a      	movs	r2, r1
    4426:	1cfb      	adds	r3, r7, #3
    4428:	701a      	strb	r2, [r3, #0]
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	681a      	ldr	r2, [r3, #0]
    442e:	1cfb      	adds	r3, r7, #3
    4430:	781b      	ldrb	r3, [r3, #0]
    4432:	3308      	adds	r3, #8
    4434:	015b      	lsls	r3, r3, #5
    4436:	18d3      	adds	r3, r2, r3
    4438:	3307      	adds	r3, #7
    443a:	2202      	movs	r2, #2
    443c:	701a      	strb	r2, [r3, #0]
    443e:	46c0      	nop			; (mov r8, r8)
    4440:	46bd      	mov	sp, r7
    4442:	b002      	add	sp, #8
    4444:	bd80      	pop	{r7, pc}

00004446 <_ZN20USBDevice_SAMD21G18x26epBank0EnableSetupReceivedEh>:

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    4446:	b580      	push	{r7, lr}
    4448:	b082      	sub	sp, #8
    444a:	af00      	add	r7, sp, #0
    444c:	6078      	str	r0, [r7, #4]
    444e:	000a      	movs	r2, r1
    4450:	1cfb      	adds	r3, r7, #3
    4452:	701a      	strb	r2, [r3, #0]
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	6819      	ldr	r1, [r3, #0]
    4458:	1cfb      	adds	r3, r7, #3
    445a:	781a      	ldrb	r2, [r3, #0]
    445c:	2384      	movs	r3, #132	; 0x84
    445e:	005b      	lsls	r3, r3, #1
    4460:	0152      	lsls	r2, r2, #5
    4462:	188a      	adds	r2, r1, r2
    4464:	18d2      	adds	r2, r2, r3
    4466:	7853      	ldrb	r3, [r2, #1]
    4468:	2110      	movs	r1, #16
    446a:	430b      	orrs	r3, r1
    446c:	7053      	strb	r3, [r2, #1]
    446e:	46c0      	nop			; (mov r8, r8)
    4470:	46bd      	mov	sp, r7
    4472:	b002      	add	sp, #8
    4474:	bd80      	pop	{r7, pc}

00004476 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>:
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    4476:	b580      	push	{r7, lr}
    4478:	b082      	sub	sp, #8
    447a:	af00      	add	r7, sp, #0
    447c:	6078      	str	r0, [r7, #4]
    447e:	000a      	movs	r2, r1
    4480:	1cfb      	adds	r3, r7, #3
    4482:	701a      	strb	r2, [r3, #0]
    4484:	687b      	ldr	r3, [r7, #4]
    4486:	6819      	ldr	r1, [r3, #0]
    4488:	1cfb      	adds	r3, r7, #3
    448a:	781a      	ldrb	r2, [r3, #0]
    448c:	2384      	movs	r3, #132	; 0x84
    448e:	005b      	lsls	r3, r3, #1
    4490:	0152      	lsls	r2, r2, #5
    4492:	188a      	adds	r2, r1, r2
    4494:	18d2      	adds	r2, r2, r3
    4496:	7853      	ldrb	r3, [r2, #1]
    4498:	2101      	movs	r1, #1
    449a:	430b      	orrs	r3, r1
    449c:	7053      	strb	r3, [r2, #1]
    449e:	46c0      	nop			; (mov r8, r8)
    44a0:	46bd      	mov	sp, r7
    44a2:	b002      	add	sp, #8
    44a4:	bd80      	pop	{r7, pc}

000044a6 <_ZN20USBDevice_SAMD21G18x29epBank1EnableTransferCompleteEh>:
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    44a6:	b580      	push	{r7, lr}
    44a8:	b082      	sub	sp, #8
    44aa:	af00      	add	r7, sp, #0
    44ac:	6078      	str	r0, [r7, #4]
    44ae:	000a      	movs	r2, r1
    44b0:	1cfb      	adds	r3, r7, #3
    44b2:	701a      	strb	r2, [r3, #0]
    44b4:	687b      	ldr	r3, [r7, #4]
    44b6:	6819      	ldr	r1, [r3, #0]
    44b8:	1cfb      	adds	r3, r7, #3
    44ba:	781a      	ldrb	r2, [r3, #0]
    44bc:	2384      	movs	r3, #132	; 0x84
    44be:	005b      	lsls	r3, r3, #1
    44c0:	0152      	lsls	r2, r2, #5
    44c2:	188a      	adds	r2, r1, r2
    44c4:	18d2      	adds	r2, r2, r3
    44c6:	7853      	ldrb	r3, [r2, #1]
    44c8:	2102      	movs	r1, #2
    44ca:	430b      	orrs	r3, r1
    44cc:	7053      	strb	r3, [r2, #1]
    44ce:	46c0      	nop			; (mov r8, r8)
    44d0:	46bd      	mov	sp, r7
    44d2:	b002      	add	sp, #8
    44d4:	bd80      	pop	{r7, pc}

000044d6 <_ZN20USBDevice_SAMD21G18x21epBank1DisableStalledEh>:

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    44d6:	b580      	push	{r7, lr}
    44d8:	b082      	sub	sp, #8
    44da:	af00      	add	r7, sp, #0
    44dc:	6078      	str	r0, [r7, #4]
    44de:	000a      	movs	r2, r1
    44e0:	1cfb      	adds	r3, r7, #3
    44e2:	701a      	strb	r2, [r3, #0]
    44e4:	687b      	ldr	r3, [r7, #4]
    44e6:	6819      	ldr	r1, [r3, #0]
    44e8:	1cfb      	adds	r3, r7, #3
    44ea:	781a      	ldrb	r2, [r3, #0]
    44ec:	2384      	movs	r3, #132	; 0x84
    44ee:	005b      	lsls	r3, r3, #1
    44f0:	0152      	lsls	r2, r2, #5
    44f2:	188a      	adds	r2, r1, r2
    44f4:	18d2      	adds	r2, r2, r3
    44f6:	7813      	ldrb	r3, [r2, #0]
    44f8:	2140      	movs	r1, #64	; 0x40
    44fa:	430b      	orrs	r3, r1
    44fc:	7013      	strb	r3, [r2, #0]
    44fe:	46c0      	nop			; (mov r8, r8)
    4500:	46bd      	mov	sp, r7
    4502:	b002      	add	sp, #8
    4504:	bd80      	pop	{r7, pc}

00004506 <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>:
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    4506:	b580      	push	{r7, lr}
    4508:	b082      	sub	sp, #8
    450a:	af00      	add	r7, sp, #0
    450c:	6078      	str	r0, [r7, #4]
    450e:	000a      	movs	r2, r1
    4510:	1cfb      	adds	r3, r7, #3
    4512:	701a      	strb	r2, [r3, #0]
    4514:	687b      	ldr	r3, [r7, #4]
    4516:	6819      	ldr	r1, [r3, #0]
    4518:	1cfb      	adds	r3, r7, #3
    451a:	781a      	ldrb	r2, [r3, #0]
    451c:	2384      	movs	r3, #132	; 0x84
    451e:	005b      	lsls	r3, r3, #1
    4520:	0152      	lsls	r2, r2, #5
    4522:	188a      	adds	r2, r1, r2
    4524:	18d2      	adds	r2, r2, r3
    4526:	7813      	ldrb	r3, [r2, #0]
    4528:	2101      	movs	r1, #1
    452a:	430b      	orrs	r3, r1
    452c:	7013      	strb	r3, [r2, #0]
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	46bd      	mov	sp, r7
    4532:	b002      	add	sp, #8
    4534:	bd80      	pop	{r7, pc}

00004536 <_ZN20USBDevice_SAMD21G18x14epBank0IsReadyEh>:
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    4536:	b580      	push	{r7, lr}
    4538:	b082      	sub	sp, #8
    453a:	af00      	add	r7, sp, #0
    453c:	6078      	str	r0, [r7, #4]
    453e:	000a      	movs	r2, r1
    4540:	1cfb      	adds	r3, r7, #3
    4542:	701a      	strb	r2, [r3, #0]
    4544:	687b      	ldr	r3, [r7, #4]
    4546:	681a      	ldr	r2, [r3, #0]
    4548:	1cfb      	adds	r3, r7, #3
    454a:	781b      	ldrb	r3, [r3, #0]
    454c:	3308      	adds	r3, #8
    454e:	015b      	lsls	r3, r3, #5
    4550:	18d3      	adds	r3, r2, r3
    4552:	799b      	ldrb	r3, [r3, #6]
    4554:	065b      	lsls	r3, r3, #25
    4556:	0fdb      	lsrs	r3, r3, #31
    4558:	b2db      	uxtb	r3, r3
    455a:	0018      	movs	r0, r3
    455c:	46bd      	mov	sp, r7
    455e:	b002      	add	sp, #8
    4560:	bd80      	pop	{r7, pc}

00004562 <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>:
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    4562:	b580      	push	{r7, lr}
    4564:	b082      	sub	sp, #8
    4566:	af00      	add	r7, sp, #0
    4568:	6078      	str	r0, [r7, #4]
    456a:	000a      	movs	r2, r1
    456c:	1cfb      	adds	r3, r7, #3
    456e:	701a      	strb	r2, [r3, #0]
    4570:	687b      	ldr	r3, [r7, #4]
    4572:	681a      	ldr	r2, [r3, #0]
    4574:	1cfb      	adds	r3, r7, #3
    4576:	781b      	ldrb	r3, [r3, #0]
    4578:	3308      	adds	r3, #8
    457a:	015b      	lsls	r3, r3, #5
    457c:	18d3      	adds	r3, r2, r3
    457e:	799b      	ldrb	r3, [r3, #6]
    4580:	061b      	lsls	r3, r3, #24
    4582:	0fdb      	lsrs	r3, r3, #31
    4584:	b2db      	uxtb	r3, r3
    4586:	0018      	movs	r0, r3
    4588:	46bd      	mov	sp, r7
    458a:	b002      	add	sp, #8
    458c:	bd80      	pop	{r7, pc}

0000458e <_ZN20USBDevice_SAMD21G18x15epBank0SetReadyEh>:
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    458e:	b580      	push	{r7, lr}
    4590:	b082      	sub	sp, #8
    4592:	af00      	add	r7, sp, #0
    4594:	6078      	str	r0, [r7, #4]
    4596:	000a      	movs	r2, r1
    4598:	1cfb      	adds	r3, r7, #3
    459a:	701a      	strb	r2, [r3, #0]
    459c:	687b      	ldr	r3, [r7, #4]
    459e:	681a      	ldr	r2, [r3, #0]
    45a0:	1cfb      	adds	r3, r7, #3
    45a2:	781b      	ldrb	r3, [r3, #0]
    45a4:	3308      	adds	r3, #8
    45a6:	015b      	lsls	r3, r3, #5
    45a8:	18d2      	adds	r2, r2, r3
    45aa:	7953      	ldrb	r3, [r2, #5]
    45ac:	2140      	movs	r1, #64	; 0x40
    45ae:	430b      	orrs	r3, r1
    45b0:	7153      	strb	r3, [r2, #5]
    45b2:	46c0      	nop			; (mov r8, r8)
    45b4:	46bd      	mov	sp, r7
    45b6:	b002      	add	sp, #8
    45b8:	bd80      	pop	{r7, pc}

000045ba <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>:
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    45ba:	b580      	push	{r7, lr}
    45bc:	b082      	sub	sp, #8
    45be:	af00      	add	r7, sp, #0
    45c0:	6078      	str	r0, [r7, #4]
    45c2:	000a      	movs	r2, r1
    45c4:	1cfb      	adds	r3, r7, #3
    45c6:	701a      	strb	r2, [r3, #0]
    45c8:	687b      	ldr	r3, [r7, #4]
    45ca:	681a      	ldr	r2, [r3, #0]
    45cc:	1cfb      	adds	r3, r7, #3
    45ce:	781b      	ldrb	r3, [r3, #0]
    45d0:	3308      	adds	r3, #8
    45d2:	015b      	lsls	r3, r3, #5
    45d4:	18d2      	adds	r2, r2, r3
    45d6:	7953      	ldrb	r3, [r2, #5]
    45d8:	2180      	movs	r1, #128	; 0x80
    45da:	4249      	negs	r1, r1
    45dc:	430b      	orrs	r3, r1
    45de:	7153      	strb	r3, [r2, #5]
    45e0:	46c0      	nop			; (mov r8, r8)
    45e2:	46bd      	mov	sp, r7
    45e4:	b002      	add	sp, #8
    45e6:	bd80      	pop	{r7, pc}

000045e8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>:
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    45e8:	b580      	push	{r7, lr}
    45ea:	b082      	sub	sp, #8
    45ec:	af00      	add	r7, sp, #0
    45ee:	6078      	str	r0, [r7, #4]
    45f0:	000a      	movs	r2, r1
    45f2:	1cfb      	adds	r3, r7, #3
    45f4:	701a      	strb	r2, [r3, #0]
    45f6:	687b      	ldr	r3, [r7, #4]
    45f8:	681a      	ldr	r2, [r3, #0]
    45fa:	1cfb      	adds	r3, r7, #3
    45fc:	781b      	ldrb	r3, [r3, #0]
    45fe:	3308      	adds	r3, #8
    4600:	015b      	lsls	r3, r3, #5
    4602:	18d2      	adds	r2, r2, r3
    4604:	7913      	ldrb	r3, [r2, #4]
    4606:	2140      	movs	r1, #64	; 0x40
    4608:	430b      	orrs	r3, r1
    460a:	7113      	strb	r3, [r2, #4]
    460c:	46c0      	nop			; (mov r8, r8)
    460e:	46bd      	mov	sp, r7
    4610:	b002      	add	sp, #8
    4612:	bd80      	pop	{r7, pc}

00004614 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>:
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    4614:	b580      	push	{r7, lr}
    4616:	b082      	sub	sp, #8
    4618:	af00      	add	r7, sp, #0
    461a:	6078      	str	r0, [r7, #4]
    461c:	000a      	movs	r2, r1
    461e:	1cfb      	adds	r3, r7, #3
    4620:	701a      	strb	r2, [r3, #0]
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	681a      	ldr	r2, [r3, #0]
    4626:	1cfb      	adds	r3, r7, #3
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	3308      	adds	r3, #8
    462c:	015b      	lsls	r3, r3, #5
    462e:	18d2      	adds	r2, r2, r3
    4630:	7913      	ldrb	r3, [r2, #4]
    4632:	2180      	movs	r1, #128	; 0x80
    4634:	4249      	negs	r1, r1
    4636:	430b      	orrs	r3, r1
    4638:	7113      	strb	r3, [r2, #4]
    463a:	46c0      	nop			; (mov r8, r8)
    463c:	46bd      	mov	sp, r7
    463e:	b002      	add	sp, #8
    4640:	bd80      	pop	{r7, pc}

00004642 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>:
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    4642:	b580      	push	{r7, lr}
    4644:	b082      	sub	sp, #8
    4646:	af00      	add	r7, sp, #0
    4648:	6078      	str	r0, [r7, #4]
    464a:	000a      	movs	r2, r1
    464c:	1cfb      	adds	r3, r7, #3
    464e:	701a      	strb	r2, [r3, #0]
    4650:	1cfb      	adds	r3, r7, #3
    4652:	781b      	ldrb	r3, [r3, #0]
    4654:	687a      	ldr	r2, [r7, #4]
    4656:	015b      	lsls	r3, r3, #5
    4658:	18d3      	adds	r3, r2, r3
    465a:	689b      	ldr	r3, [r3, #8]
    465c:	049b      	lsls	r3, r3, #18
    465e:	0c9b      	lsrs	r3, r3, #18
    4660:	b29b      	uxth	r3, r3
    4662:	0018      	movs	r0, r3
    4664:	46bd      	mov	sp, r7
    4666:	b002      	add	sp, #8
    4668:	bd80      	pop	{r7, pc}

0000466a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>:
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    466a:	b580      	push	{r7, lr}
    466c:	b082      	sub	sp, #8
    466e:	af00      	add	r7, sp, #0
    4670:	6078      	str	r0, [r7, #4]
    4672:	0008      	movs	r0, r1
    4674:	0011      	movs	r1, r2
    4676:	1cfb      	adds	r3, r7, #3
    4678:	1c02      	adds	r2, r0, #0
    467a:	701a      	strb	r2, [r3, #0]
    467c:	003b      	movs	r3, r7
    467e:	1c0a      	adds	r2, r1, #0
    4680:	801a      	strh	r2, [r3, #0]
    4682:	1cfb      	adds	r3, r7, #3
    4684:	781b      	ldrb	r3, [r3, #0]
    4686:	003a      	movs	r2, r7
    4688:	8812      	ldrh	r2, [r2, #0]
    468a:	0492      	lsls	r2, r2, #18
    468c:	0c92      	lsrs	r2, r2, #18
    468e:	b291      	uxth	r1, r2
    4690:	687a      	ldr	r2, [r7, #4]
    4692:	015b      	lsls	r3, r3, #5
    4694:	18d3      	adds	r3, r2, r3
    4696:	689a      	ldr	r2, [r3, #8]
    4698:	0489      	lsls	r1, r1, #18
    469a:	0c89      	lsrs	r1, r1, #18
    469c:	0b92      	lsrs	r2, r2, #14
    469e:	0392      	lsls	r2, r2, #14
    46a0:	430a      	orrs	r2, r1
    46a2:	609a      	str	r2, [r3, #8]
    46a4:	46c0      	nop			; (mov r8, r8)
    46a6:	46bd      	mov	sp, r7
    46a8:	b002      	add	sp, #8
    46aa:	bd80      	pop	{r7, pc}

000046ac <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>:
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    46ac:	b580      	push	{r7, lr}
    46ae:	b082      	sub	sp, #8
    46b0:	af00      	add	r7, sp, #0
    46b2:	6078      	str	r0, [r7, #4]
    46b4:	0008      	movs	r0, r1
    46b6:	0011      	movs	r1, r2
    46b8:	1cfb      	adds	r3, r7, #3
    46ba:	1c02      	adds	r2, r0, #0
    46bc:	701a      	strb	r2, [r3, #0]
    46be:	003b      	movs	r3, r7
    46c0:	1c0a      	adds	r2, r1, #0
    46c2:	801a      	strh	r2, [r3, #0]
    46c4:	1cfb      	adds	r3, r7, #3
    46c6:	781b      	ldrb	r3, [r3, #0]
    46c8:	003a      	movs	r2, r7
    46ca:	8812      	ldrh	r2, [r2, #0]
    46cc:	0492      	lsls	r2, r2, #18
    46ce:	0c92      	lsrs	r2, r2, #18
    46d0:	b291      	uxth	r1, r2
    46d2:	687a      	ldr	r2, [r7, #4]
    46d4:	015b      	lsls	r3, r3, #5
    46d6:	18d3      	adds	r3, r2, r3
    46d8:	3310      	adds	r3, #16
    46da:	689a      	ldr	r2, [r3, #8]
    46dc:	0489      	lsls	r1, r1, #18
    46de:	0c89      	lsrs	r1, r1, #18
    46e0:	0b92      	lsrs	r2, r2, #14
    46e2:	0392      	lsls	r2, r2, #14
    46e4:	430a      	orrs	r2, r1
    46e6:	609a      	str	r2, [r3, #8]
    46e8:	46c0      	nop			; (mov r8, r8)
    46ea:	46bd      	mov	sp, r7
    46ec:	b002      	add	sp, #8
    46ee:	bd80      	pop	{r7, pc}

000046f0 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>:
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    46f0:	b580      	push	{r7, lr}
    46f2:	b082      	sub	sp, #8
    46f4:	af00      	add	r7, sp, #0
    46f6:	6078      	str	r0, [r7, #4]
    46f8:	0008      	movs	r0, r1
    46fa:	0011      	movs	r1, r2
    46fc:	1cfb      	adds	r3, r7, #3
    46fe:	1c02      	adds	r2, r0, #0
    4700:	701a      	strb	r2, [r3, #0]
    4702:	003b      	movs	r3, r7
    4704:	1c0a      	adds	r2, r1, #0
    4706:	801a      	strh	r2, [r3, #0]
    4708:	1cfb      	adds	r3, r7, #3
    470a:	781b      	ldrb	r3, [r3, #0]
    470c:	003a      	movs	r2, r7
    470e:	8812      	ldrh	r2, [r2, #0]
    4710:	0492      	lsls	r2, r2, #18
    4712:	0c92      	lsrs	r2, r2, #18
    4714:	b291      	uxth	r1, r2
    4716:	687a      	ldr	r2, [r7, #4]
    4718:	015b      	lsls	r3, r3, #5
    471a:	18d3      	adds	r3, r2, r3
    471c:	689a      	ldr	r2, [r3, #8]
    471e:	0489      	lsls	r1, r1, #18
    4720:	0c89      	lsrs	r1, r1, #18
    4722:	0389      	lsls	r1, r1, #14
    4724:	4803      	ldr	r0, [pc, #12]	; (4734 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht+0x44>)
    4726:	4002      	ands	r2, r0
    4728:	430a      	orrs	r2, r1
    472a:	609a      	str	r2, [r3, #8]
    472c:	46c0      	nop			; (mov r8, r8)
    472e:	46bd      	mov	sp, r7
    4730:	b002      	add	sp, #8
    4732:	bd80      	pop	{r7, pc}
    4734:	f0003fff 	.word	0xf0003fff

00004738 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht>:
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    4738:	b580      	push	{r7, lr}
    473a:	b082      	sub	sp, #8
    473c:	af00      	add	r7, sp, #0
    473e:	6078      	str	r0, [r7, #4]
    4740:	0008      	movs	r0, r1
    4742:	0011      	movs	r1, r2
    4744:	1cfb      	adds	r3, r7, #3
    4746:	1c02      	adds	r2, r0, #0
    4748:	701a      	strb	r2, [r3, #0]
    474a:	003b      	movs	r3, r7
    474c:	1c0a      	adds	r2, r1, #0
    474e:	801a      	strh	r2, [r3, #0]
    4750:	1cfb      	adds	r3, r7, #3
    4752:	781b      	ldrb	r3, [r3, #0]
    4754:	003a      	movs	r2, r7
    4756:	8812      	ldrh	r2, [r2, #0]
    4758:	0492      	lsls	r2, r2, #18
    475a:	0c92      	lsrs	r2, r2, #18
    475c:	b291      	uxth	r1, r2
    475e:	687a      	ldr	r2, [r7, #4]
    4760:	015b      	lsls	r3, r3, #5
    4762:	18d3      	adds	r3, r2, r3
    4764:	3310      	adds	r3, #16
    4766:	689a      	ldr	r2, [r3, #8]
    4768:	0489      	lsls	r1, r1, #18
    476a:	0c89      	lsrs	r1, r1, #18
    476c:	0389      	lsls	r1, r1, #14
    476e:	4804      	ldr	r0, [pc, #16]	; (4780 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht+0x48>)
    4770:	4002      	ands	r2, r0
    4772:	430a      	orrs	r2, r1
    4774:	609a      	str	r2, [r3, #8]
    4776:	46c0      	nop			; (mov r8, r8)
    4778:	46bd      	mov	sp, r7
    477a:	b002      	add	sp, #8
    477c:	bd80      	pop	{r7, pc}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	f0003fff 	.word	0xf0003fff

00004784 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>:

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    4784:	b580      	push	{r7, lr}
    4786:	b084      	sub	sp, #16
    4788:	af00      	add	r7, sp, #0
    478a:	60f8      	str	r0, [r7, #12]
    478c:	607a      	str	r2, [r7, #4]
    478e:	230b      	movs	r3, #11
    4790:	18fb      	adds	r3, r7, r3
    4792:	1c0a      	adds	r2, r1, #0
    4794:	701a      	strb	r2, [r3, #0]
    4796:	230b      	movs	r3, #11
    4798:	18fb      	adds	r3, r7, r3
    479a:	781b      	ldrb	r3, [r3, #0]
    479c:	687a      	ldr	r2, [r7, #4]
    479e:	68f9      	ldr	r1, [r7, #12]
    47a0:	015b      	lsls	r3, r3, #5
    47a2:	18cb      	adds	r3, r1, r3
    47a4:	3304      	adds	r3, #4
    47a6:	601a      	str	r2, [r3, #0]
    47a8:	46c0      	nop			; (mov r8, r8)
    47aa:	46bd      	mov	sp, r7
    47ac:	b004      	add	sp, #16
    47ae:	bd80      	pop	{r7, pc}

000047b0 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>:
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    47b0:	b580      	push	{r7, lr}
    47b2:	b084      	sub	sp, #16
    47b4:	af00      	add	r7, sp, #0
    47b6:	60f8      	str	r0, [r7, #12]
    47b8:	607a      	str	r2, [r7, #4]
    47ba:	230b      	movs	r3, #11
    47bc:	18fb      	adds	r3, r7, r3
    47be:	1c0a      	adds	r2, r1, #0
    47c0:	701a      	strb	r2, [r3, #0]
    47c2:	230b      	movs	r3, #11
    47c4:	18fb      	adds	r3, r7, r3
    47c6:	781b      	ldrb	r3, [r3, #0]
    47c8:	687a      	ldr	r2, [r7, #4]
    47ca:	68f9      	ldr	r1, [r7, #12]
    47cc:	015b      	lsls	r3, r3, #5
    47ce:	18cb      	adds	r3, r1, r3
    47d0:	3314      	adds	r3, #20
    47d2:	601a      	str	r2, [r3, #0]
    47d4:	46c0      	nop			; (mov r8, r8)
    47d6:	46bd      	mov	sp, r7
    47d8:	b004      	add	sp, #16
    47da:	bd80      	pop	{r7, pc}

000047dc <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>:
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    47dc:	b590      	push	{r4, r7, lr}
    47de:	b083      	sub	sp, #12
    47e0:	af00      	add	r7, sp, #0
    47e2:	6078      	str	r0, [r7, #4]
    47e4:	0008      	movs	r0, r1
    47e6:	0011      	movs	r1, r2
    47e8:	1cfb      	adds	r3, r7, #3
    47ea:	1c02      	adds	r2, r0, #0
    47ec:	701a      	strb	r2, [r3, #0]
    47ee:	003b      	movs	r3, r7
    47f0:	1c0a      	adds	r2, r1, #0
    47f2:	801a      	strh	r2, [r3, #0]
    47f4:	1cfb      	adds	r3, r7, #3
    47f6:	781c      	ldrb	r4, [r3, #0]
    47f8:	003b      	movs	r3, r7
    47fa:	881a      	ldrh	r2, [r3, #0]
    47fc:	687b      	ldr	r3, [r7, #4]
    47fe:	0011      	movs	r1, r2
    4800:	0018      	movs	r0, r3
    4802:	f000 f843 	bl	488c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>
    4806:	0003      	movs	r3, r0
    4808:	1c1a      	adds	r2, r3, #0
    480a:	2307      	movs	r3, #7
    480c:	4013      	ands	r3, r2
    480e:	b2d9      	uxtb	r1, r3
    4810:	687a      	ldr	r2, [r7, #4]
    4812:	0163      	lsls	r3, r4, #5
    4814:	18d3      	adds	r3, r2, r3
    4816:	689a      	ldr	r2, [r3, #8]
    4818:	2007      	movs	r0, #7
    481a:	4001      	ands	r1, r0
    481c:	0709      	lsls	r1, r1, #28
    481e:	4804      	ldr	r0, [pc, #16]	; (4830 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht+0x54>)
    4820:	4002      	ands	r2, r0
    4822:	430a      	orrs	r2, r1
    4824:	609a      	str	r2, [r3, #8]
    4826:	46c0      	nop			; (mov r8, r8)
    4828:	46bd      	mov	sp, r7
    482a:	b003      	add	sp, #12
    482c:	bd90      	pop	{r4, r7, pc}
    482e:	46c0      	nop			; (mov r8, r8)
    4830:	8fffffff 	.word	0x8fffffff

00004834 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>:
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    4834:	b590      	push	{r4, r7, lr}
    4836:	b083      	sub	sp, #12
    4838:	af00      	add	r7, sp, #0
    483a:	6078      	str	r0, [r7, #4]
    483c:	0008      	movs	r0, r1
    483e:	0011      	movs	r1, r2
    4840:	1cfb      	adds	r3, r7, #3
    4842:	1c02      	adds	r2, r0, #0
    4844:	701a      	strb	r2, [r3, #0]
    4846:	003b      	movs	r3, r7
    4848:	1c0a      	adds	r2, r1, #0
    484a:	801a      	strh	r2, [r3, #0]
    484c:	1cfb      	adds	r3, r7, #3
    484e:	781c      	ldrb	r4, [r3, #0]
    4850:	003b      	movs	r3, r7
    4852:	881a      	ldrh	r2, [r3, #0]
    4854:	687b      	ldr	r3, [r7, #4]
    4856:	0011      	movs	r1, r2
    4858:	0018      	movs	r0, r3
    485a:	f000 f817 	bl	488c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>
    485e:	0003      	movs	r3, r0
    4860:	1c1a      	adds	r2, r3, #0
    4862:	2307      	movs	r3, #7
    4864:	4013      	ands	r3, r2
    4866:	b2d9      	uxtb	r1, r3
    4868:	687a      	ldr	r2, [r7, #4]
    486a:	0163      	lsls	r3, r4, #5
    486c:	18d3      	adds	r3, r2, r3
    486e:	3310      	adds	r3, #16
    4870:	689a      	ldr	r2, [r3, #8]
    4872:	2007      	movs	r0, #7
    4874:	4001      	ands	r1, r0
    4876:	0709      	lsls	r1, r1, #28
    4878:	4803      	ldr	r0, [pc, #12]	; (4888 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht+0x54>)
    487a:	4002      	ands	r2, r0
    487c:	430a      	orrs	r2, r1
    487e:	609a      	str	r2, [r3, #8]
    4880:	46c0      	nop			; (mov r8, r8)
    4882:	46bd      	mov	sp, r7
    4884:	b003      	add	sp, #12
    4886:	bd90      	pop	{r4, r7, pc}
    4888:	8fffffff 	.word	0x8fffffff

0000488c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>:
	inline uint8_t EP_PCKSIZE_SIZE(uint16_t size) {
    488c:	b580      	push	{r7, lr}
    488e:	b082      	sub	sp, #8
    4890:	af00      	add	r7, sp, #0
    4892:	6078      	str	r0, [r7, #4]
    4894:	000a      	movs	r2, r1
    4896:	1cbb      	adds	r3, r7, #2
    4898:	801a      	strh	r2, [r3, #0]
		switch (size) {
    489a:	1cbb      	adds	r3, r7, #2
    489c:	881b      	ldrh	r3, [r3, #0]
    489e:	2b40      	cmp	r3, #64	; 0x40
    48a0:	d020      	beq.n	48e4 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x58>
    48a2:	dc06      	bgt.n	48b2 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x26>
    48a4:	2b10      	cmp	r3, #16
    48a6:	d019      	beq.n	48dc <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x50>
    48a8:	2b20      	cmp	r3, #32
    48aa:	d019      	beq.n	48e0 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x54>
    48ac:	2b08      	cmp	r3, #8
    48ae:	d013      	beq.n	48d8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x4c>
    48b0:	e022      	b.n	48f8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
    48b2:	2280      	movs	r2, #128	; 0x80
    48b4:	0052      	lsls	r2, r2, #1
    48b6:	4293      	cmp	r3, r2
    48b8:	d018      	beq.n	48ec <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x60>
    48ba:	2280      	movs	r2, #128	; 0x80
    48bc:	0052      	lsls	r2, r2, #1
    48be:	4293      	cmp	r3, r2
    48c0:	dc02      	bgt.n	48c8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x3c>
    48c2:	2b80      	cmp	r3, #128	; 0x80
    48c4:	d010      	beq.n	48e8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x5c>
    48c6:	e017      	b.n	48f8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
    48c8:	2280      	movs	r2, #128	; 0x80
    48ca:	0092      	lsls	r2, r2, #2
    48cc:	4293      	cmp	r3, r2
    48ce:	d00f      	beq.n	48f0 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x64>
    48d0:	4a0c      	ldr	r2, [pc, #48]	; (4904 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x78>)
    48d2:	4293      	cmp	r3, r2
    48d4:	d00e      	beq.n	48f4 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x68>
    48d6:	e00f      	b.n	48f8 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
		case 8:    return 0;
    48d8:	2300      	movs	r3, #0
    48da:	e00e      	b.n	48fa <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 16:   return 1;
    48dc:	2301      	movs	r3, #1
    48de:	e00c      	b.n	48fa <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 32:   return 2;
    48e0:	2302      	movs	r3, #2
    48e2:	e00a      	b.n	48fa <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 64:   return 3;
    48e4:	2303      	movs	r3, #3
    48e6:	e008      	b.n	48fa <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 128:  return 4;
    48e8:	2304      	movs	r3, #4
    48ea:	e006      	b.n	48fa <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 256:  return 5;
    48ec:	2305      	movs	r3, #5
    48ee:	e004      	b.n	48fa <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 512:  return 6;
    48f0:	2306      	movs	r3, #6
    48f2:	e002      	b.n	48fa <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 1023: return 7;
    48f4:	2307      	movs	r3, #7
    48f6:	e000      	b.n	48fa <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		default:   return 0;
    48f8:	2300      	movs	r3, #0
		}
	}
    48fa:	0018      	movs	r0, r3
    48fc:	46bd      	mov	sp, r7
    48fe:	b002      	add	sp, #8
    4900:	bd80      	pop	{r7, pc}
    4902:	46c0      	nop			; (mov r8, r8)
    4904:	000003ff 	.word	0x000003ff

00004908 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    4908:	b580      	push	{r7, lr}
    490a:	b082      	sub	sp, #8
    490c:	af00      	add	r7, sp, #0
    490e:	6078      	str	r0, [r7, #4]
	usb.CTRLA.bit.SWRST = 1;
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	681a      	ldr	r2, [r3, #0]
    4914:	7813      	ldrb	r3, [r2, #0]
    4916:	2101      	movs	r1, #1
    4918:	430b      	orrs	r3, r1
    491a:	7013      	strb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	1d18      	adds	r0, r3, #4
    4920:	2380      	movs	r3, #128	; 0x80
    4922:	005b      	lsls	r3, r3, #1
    4924:	001a      	movs	r2, r3
    4926:	2100      	movs	r1, #0
    4928:	f00b ff8c 	bl	10844 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    492c:	687b      	ldr	r3, [r7, #4]
    492e:	681b      	ldr	r3, [r3, #0]
    4930:	789b      	ldrb	r3, [r3, #2]
    4932:	07db      	lsls	r3, r3, #31
    4934:	0fdb      	lsrs	r3, r3, #31
    4936:	b2db      	uxtb	r3, r3
    4938:	2b00      	cmp	r3, #0
    493a:	d000      	beq.n	493e <_ZN20USBDevice_SAMD21G18x5resetEv+0x36>
    493c:	e7f6      	b.n	492c <_ZN20USBDevice_SAMD21G18x5resetEv+0x24>
	usb.DESCADD.reg = (uint32_t)(&EP);
    493e:	687b      	ldr	r3, [r7, #4]
    4940:	681b      	ldr	r3, [r3, #0]
    4942:	687a      	ldr	r2, [r7, #4]
    4944:	3204      	adds	r2, #4
    4946:	625a      	str	r2, [r3, #36]	; 0x24
}
    4948:	46c0      	nop			; (mov r8, r8)
    494a:	46bd      	mov	sp, r7
    494c:	b002      	add	sp, #8
    494e:	bd80      	pop	{r7, pc}

00004950 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:

void USBDevice_SAMD21G18x::calibrate() {
    4950:	b580      	push	{r7, lr}
    4952:	b088      	sub	sp, #32
    4954:	af00      	add	r7, sp, #0
    4956:	6078      	str	r0, [r7, #4]
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
    4958:	4b31      	ldr	r3, [pc, #196]	; (4a20 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    495a:	613b      	str	r3, [r7, #16]
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
    495c:	4b30      	ldr	r3, [pc, #192]	; (4a20 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    495e:	60fb      	str	r3, [r7, #12]
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;
    4960:	4b2f      	ldr	r3, [pc, #188]	; (4a20 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    4962:	60bb      	str	r3, [r7, #8]

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    4964:	693b      	ldr	r3, [r7, #16]
    4966:	681b      	ldr	r3, [r3, #0]
    4968:	0b5b      	lsrs	r3, r3, #13
    496a:	221f      	movs	r2, #31
    496c:	4013      	ands	r3, r2
    496e:	61fb      	str	r3, [r7, #28]
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    4970:	68fb      	ldr	r3, [r7, #12]
    4972:	681b      	ldr	r3, [r3, #0]
    4974:	0c9b      	lsrs	r3, r3, #18
    4976:	221f      	movs	r2, #31
    4978:	4013      	ands	r3, r2
    497a:	61bb      	str	r3, [r7, #24]
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    497c:	68bb      	ldr	r3, [r7, #8]
    497e:	681b      	ldr	r3, [r3, #0]
    4980:	0ddb      	lsrs	r3, r3, #23
    4982:	2207      	movs	r2, #7
    4984:	4013      	ands	r3, r2
    4986:	617b      	str	r3, [r7, #20]

	if (pad_transn == 0x1F)  // maximum value (31)
    4988:	69fb      	ldr	r3, [r7, #28]
    498a:	2b1f      	cmp	r3, #31
    498c:	d101      	bne.n	4992 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x42>
		pad_transn = 5;
    498e:	2305      	movs	r3, #5
    4990:	61fb      	str	r3, [r7, #28]
	if (pad_transp == 0x1F)  // maximum value (31)
    4992:	69bb      	ldr	r3, [r7, #24]
    4994:	2b1f      	cmp	r3, #31
    4996:	d101      	bne.n	499c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x4c>
		pad_transp = 29;
    4998:	231d      	movs	r3, #29
    499a:	61bb      	str	r3, [r7, #24]
	if (pad_trim == 0x7)     // maximum value (7)
    499c:	697b      	ldr	r3, [r7, #20]
    499e:	2b07      	cmp	r3, #7
    49a0:	d101      	bne.n	49a6 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x56>
		pad_trim = 3;
    49a2:	2303      	movs	r3, #3
    49a4:	617b      	str	r3, [r7, #20]

	usb.PADCAL.bit.TRANSN = pad_transn;
    49a6:	687b      	ldr	r3, [r7, #4]
    49a8:	681a      	ldr	r2, [r3, #0]
    49aa:	69fb      	ldr	r3, [r7, #28]
    49ac:	b2db      	uxtb	r3, r3
    49ae:	1c19      	adds	r1, r3, #0
    49b0:	231f      	movs	r3, #31
    49b2:	400b      	ands	r3, r1
    49b4:	b2d9      	uxtb	r1, r3
    49b6:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    49b8:	1c08      	adds	r0, r1, #0
    49ba:	211f      	movs	r1, #31
    49bc:	4001      	ands	r1, r0
    49be:	0188      	lsls	r0, r1, #6
    49c0:	4918      	ldr	r1, [pc, #96]	; (4a24 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd4>)
    49c2:	400b      	ands	r3, r1
    49c4:	1c19      	adds	r1, r3, #0
    49c6:	1c03      	adds	r3, r0, #0
    49c8:	430b      	orrs	r3, r1
    49ca:	8513      	strh	r3, [r2, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	681a      	ldr	r2, [r3, #0]
    49d0:	69bb      	ldr	r3, [r7, #24]
    49d2:	b2db      	uxtb	r3, r3
    49d4:	1c19      	adds	r1, r3, #0
    49d6:	231f      	movs	r3, #31
    49d8:	400b      	ands	r3, r1
    49da:	b2d9      	uxtb	r1, r3
    49dc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    49de:	1c08      	adds	r0, r1, #0
    49e0:	211f      	movs	r1, #31
    49e2:	4008      	ands	r0, r1
    49e4:	211f      	movs	r1, #31
    49e6:	438b      	bics	r3, r1
    49e8:	1c19      	adds	r1, r3, #0
    49ea:	1c03      	adds	r3, r0, #0
    49ec:	430b      	orrs	r3, r1
    49ee:	8513      	strh	r3, [r2, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	681a      	ldr	r2, [r3, #0]
    49f4:	697b      	ldr	r3, [r7, #20]
    49f6:	b2db      	uxtb	r3, r3
    49f8:	1c19      	adds	r1, r3, #0
    49fa:	2307      	movs	r3, #7
    49fc:	400b      	ands	r3, r1
    49fe:	b2d9      	uxtb	r1, r3
    4a00:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4a02:	1c08      	adds	r0, r1, #0
    4a04:	2107      	movs	r1, #7
    4a06:	4001      	ands	r1, r0
    4a08:	0308      	lsls	r0, r1, #12
    4a0a:	4907      	ldr	r1, [pc, #28]	; (4a28 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd8>)
    4a0c:	400b      	ands	r3, r1
    4a0e:	1c19      	adds	r1, r3, #0
    4a10:	1c03      	adds	r3, r0, #0
    4a12:	430b      	orrs	r3, r1
    4a14:	8513      	strh	r3, [r2, #40]	; 0x28
}
    4a16:	46c0      	nop			; (mov r8, r8)
    4a18:	46bd      	mov	sp, r7
    4a1a:	b008      	add	sp, #32
    4a1c:	bd80      	pop	{r7, pc}
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	00806024 	.word	0x00806024
    4a24:	fffff83f 	.word	0xfffff83f
    4a28:	ffff8fff 	.word	0xffff8fff

00004a2c <_ZN7__GuardC1Ev>:
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    4a2c:	b580      	push	{r7, lr}
    4a2e:	b084      	sub	sp, #16
    4a30:	af00      	add	r7, sp, #0
    4a32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4a34:	f3ef 8310 	mrs	r3, PRIMASK
    4a38:	60fb      	str	r3, [r7, #12]
  return(result);
    4a3a:	68fa      	ldr	r2, [r7, #12]
    4a3c:	687b      	ldr	r3, [r7, #4]
    4a3e:	601a      	str	r2, [r3, #0]
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	2201      	movs	r2, #1
    4a44:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4a46:	b672      	cpsid	i
		__disable_irq();
	}
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	0018      	movs	r0, r3
    4a4c:	46bd      	mov	sp, r7
    4a4e:	b004      	add	sp, #16
    4a50:	bd80      	pop	{r7, pc}

00004a52 <_ZN7__GuardD1Ev>:
	~__Guard() {
    4a52:	b580      	push	{r7, lr}
    4a54:	b082      	sub	sp, #8
    4a56:	af00      	add	r7, sp, #0
    4a58:	6078      	str	r0, [r7, #4]
		if (primask == 0) {
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	681b      	ldr	r3, [r3, #0]
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d102      	bne.n	4a68 <_ZN7__GuardD1Ev+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
    4a62:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    4a64:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    4a68:	687b      	ldr	r3, [r7, #4]
    4a6a:	0018      	movs	r0, r3
    4a6c:	46bd      	mov	sp, r7
    4a6e:	b002      	add	sp, #8
    4a70:	bd80      	pop	{r7, pc}

00004a72 <_ZN7__Guard5enterEv>:
	uint32_t enter() { return loops--; }
    4a72:	b580      	push	{r7, lr}
    4a74:	b082      	sub	sp, #8
    4a76:	af00      	add	r7, sp, #0
    4a78:	6078      	str	r0, [r7, #4]
    4a7a:	687b      	ldr	r3, [r7, #4]
    4a7c:	685a      	ldr	r2, [r3, #4]
    4a7e:	1e51      	subs	r1, r2, #1
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	6059      	str	r1, [r3, #4]
    4a84:	0013      	movs	r3, r2
    4a86:	0018      	movs	r0, r3
    4a88:	46bd      	mov	sp, r7
    4a8a:	b002      	add	sp, #8
    4a8c:	bd80      	pop	{r7, pc}
	...

00004a90 <_ZN9EPHandlerC1Ev>:

/*
 * USB EP generic handlers.
 */

class EPHandler {
    4a90:	b580      	push	{r7, lr}
    4a92:	b082      	sub	sp, #8
    4a94:	af00      	add	r7, sp, #0
    4a96:	6078      	str	r0, [r7, #4]
    4a98:	4a03      	ldr	r2, [pc, #12]	; (4aa8 <_ZN9EPHandlerC1Ev+0x18>)
    4a9a:	687b      	ldr	r3, [r7, #4]
    4a9c:	601a      	str	r2, [r3, #0]
    4a9e:	687b      	ldr	r3, [r7, #4]
    4aa0:	0018      	movs	r0, r3
    4aa2:	46bd      	mov	sp, r7
    4aa4:	b002      	add	sp, #8
    4aa6:	bd80      	pop	{r7, pc}
    4aa8:	00013504 	.word	0x00013504

00004aac <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm>:
	virtual uint32_t available() const = 0;
};

class DoubleBufferedEPOutHandler : public EPHandler {
public:
	DoubleBufferedEPOutHandler(USBDevice_SAMD21G18x &usbDev, uint32_t endPoint, uint32_t bufferSize) :
    4aac:	b580      	push	{r7, lr}
    4aae:	b084      	sub	sp, #16
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	60f8      	str	r0, [r7, #12]
    4ab4:	60b9      	str	r1, [r7, #8]
    4ab6:	607a      	str	r2, [r7, #4]
    4ab8:	603b      	str	r3, [r7, #0]
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    4aba:	68fb      	ldr	r3, [r7, #12]
    4abc:	0018      	movs	r0, r3
    4abe:	f7ff ffe7 	bl	4a90 <_ZN9EPHandlerC1Ev>
    4ac2:	4a30      	ldr	r2, [pc, #192]	; (4b84 <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm+0xd8>)
    4ac4:	68fb      	ldr	r3, [r7, #12]
    4ac6:	601a      	str	r2, [r3, #0]
    4ac8:	68fb      	ldr	r3, [r7, #12]
    4aca:	68ba      	ldr	r2, [r7, #8]
    4acc:	605a      	str	r2, [r3, #4]
    4ace:	68fb      	ldr	r3, [r7, #12]
    4ad0:	687a      	ldr	r2, [r7, #4]
    4ad2:	609a      	str	r2, [r3, #8]
    4ad4:	68fb      	ldr	r3, [r7, #12]
    4ad6:	683a      	ldr	r2, [r7, #0]
    4ad8:	60da      	str	r2, [r3, #12]
    4ada:	68fb      	ldr	r3, [r7, #12]
    4adc:	2200      	movs	r2, #0
    4ade:	611a      	str	r2, [r3, #16]
    4ae0:	68fb      	ldr	r3, [r7, #12]
    4ae2:	2200      	movs	r2, #0
    4ae4:	615a      	str	r2, [r3, #20]
    4ae6:	68fb      	ldr	r3, [r7, #12]
    4ae8:	2200      	movs	r2, #0
    4aea:	61da      	str	r2, [r3, #28]
    4aec:	68fb      	ldr	r3, [r7, #12]
    4aee:	2200      	movs	r2, #0
    4af0:	621a      	str	r2, [r3, #32]
    4af2:	68fb      	ldr	r3, [r7, #12]
    4af4:	2224      	movs	r2, #36	; 0x24
    4af6:	2100      	movs	r1, #0
    4af8:	5499      	strb	r1, [r3, r2]
    4afa:	68fb      	ldr	r3, [r7, #12]
    4afc:	2200      	movs	r2, #0
    4afe:	62da      	str	r2, [r3, #44]	; 0x2c
    4b00:	68fb      	ldr	r3, [r7, #12]
    4b02:	2200      	movs	r2, #0
    4b04:	631a      	str	r2, [r3, #48]	; 0x30
    4b06:	68fb      	ldr	r3, [r7, #12]
    4b08:	2234      	movs	r2, #52	; 0x34
    4b0a:	2100      	movs	r1, #0
    4b0c:	5499      	strb	r1, [r3, r2]
    4b0e:	68fb      	ldr	r3, [r7, #12]
    4b10:	2235      	movs	r2, #53	; 0x35
    4b12:	2100      	movs	r1, #0
    4b14:	5499      	strb	r1, [r3, r2]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    4b16:	68fb      	ldr	r3, [r7, #12]
    4b18:	68db      	ldr	r3, [r3, #12]
    4b1a:	0018      	movs	r0, r3
    4b1c:	f00b fe54 	bl	107c8 <malloc>
    4b20:	0003      	movs	r3, r0
    4b22:	001a      	movs	r2, r3
    4b24:	68fb      	ldr	r3, [r7, #12]
    4b26:	619a      	str	r2, [r3, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    4b28:	68fb      	ldr	r3, [r7, #12]
    4b2a:	68db      	ldr	r3, [r3, #12]
    4b2c:	0018      	movs	r0, r3
    4b2e:	f00b fe4b 	bl	107c8 <malloc>
    4b32:	0003      	movs	r3, r0
    4b34:	001a      	movs	r2, r3
    4b36:	68fb      	ldr	r3, [r7, #12]
    4b38:	629a      	str	r2, [r3, #40]	; 0x28

		usbd.epBank0SetSize(ep, 64);
    4b3a:	68fb      	ldr	r3, [r7, #12]
    4b3c:	6858      	ldr	r0, [r3, #4]
    4b3e:	68fb      	ldr	r3, [r7, #12]
    4b40:	689b      	ldr	r3, [r3, #8]
    4b42:	b2db      	uxtb	r3, r3
    4b44:	2240      	movs	r2, #64	; 0x40
    4b46:	0019      	movs	r1, r3
    4b48:	f7ff fe48 	bl	47dc <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>
		usbd.epBank0SetType(ep, 3); // BULK OUT
    4b4c:	68fb      	ldr	r3, [r7, #12]
    4b4e:	6858      	ldr	r0, [r3, #4]
    4b50:	68fb      	ldr	r3, [r7, #12]
    4b52:	689b      	ldr	r3, [r3, #8]
    4b54:	b2db      	uxtb	r3, r3
    4b56:	2203      	movs	r2, #3
    4b58:	0019      	movs	r1, r3
    4b5a:	f7ff fb73 	bl	4244 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    4b5e:	68fb      	ldr	r3, [r7, #12]
    4b60:	6858      	ldr	r0, [r3, #4]
    4b62:	68fb      	ldr	r3, [r7, #12]
    4b64:	689b      	ldr	r3, [r3, #8]
    4b66:	b2d9      	uxtb	r1, r3
    4b68:	68fb      	ldr	r3, [r7, #12]
    4b6a:	699b      	ldr	r3, [r3, #24]
    4b6c:	001a      	movs	r2, r3
    4b6e:	f7ff fe09 	bl	4784 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>

		release();
    4b72:	68fb      	ldr	r3, [r7, #12]
    4b74:	0018      	movs	r0, r3
    4b76:	f000 fa47 	bl	5008 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	}
    4b7a:	68fb      	ldr	r3, [r7, #12]
    4b7c:	0018      	movs	r0, r3
    4b7e:	46bd      	mov	sp, r7
    4b80:	b004      	add	sp, #16
    4b82:	bd80      	pop	{r7, pc}
    4b84:	000134f0 	.word	0x000134f0

00004b88 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:

	virtual uint32_t recv(void *_data, uint32_t len)
    4b88:	b5b0      	push	{r4, r5, r7, lr}
    4b8a:	b090      	sub	sp, #64	; 0x40
    4b8c:	af00      	add	r7, sp, #0
    4b8e:	60f8      	str	r0, [r7, #12]
    4b90:	60b9      	str	r1, [r7, #8]
    4b92:	607a      	str	r2, [r7, #4]
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);
    4b94:	68bb      	ldr	r3, [r7, #8]
    4b96:	637b      	str	r3, [r7, #52]	; 0x34

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    4b98:	68fb      	ldr	r3, [r7, #12]
    4b9a:	691b      	ldr	r3, [r3, #16]
    4b9c:	2b00      	cmp	r3, #0
    4b9e:	d000      	beq.n	4ba2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
    4ba0:	e082      	b.n	4ca8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x120>
			synchronized {
    4ba2:	232c      	movs	r3, #44	; 0x2c
    4ba4:	18fb      	adds	r3, r7, r3
    4ba6:	0018      	movs	r0, r3
    4ba8:	f7ff ff40 	bl	4a2c <_ZN7__GuardC1Ev>
    4bac:	232c      	movs	r3, #44	; 0x2c
    4bae:	18fb      	adds	r3, r7, r3
    4bb0:	0018      	movs	r0, r3
    4bb2:	f7ff ff5e 	bl	4a72 <_ZN7__Guard5enterEv>
    4bb6:	0003      	movs	r3, r0
    4bb8:	1e5a      	subs	r2, r3, #1
    4bba:	4193      	sbcs	r3, r2
    4bbc:	b2db      	uxtb	r3, r3
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d00b      	beq.n	4bda <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x52>
				if (!ready0) {
    4bc2:	68fb      	ldr	r3, [r7, #12]
    4bc4:	2224      	movs	r2, #36	; 0x24
    4bc6:	5c9b      	ldrb	r3, [r3, r2]
    4bc8:	b2db      	uxtb	r3, r3
    4bca:	2201      	movs	r2, #1
    4bcc:	4053      	eors	r3, r2
    4bce:	b2db      	uxtb	r3, r3
    4bd0:	2b00      	cmp	r3, #0
    4bd2:	d0eb      	beq.n	4bac <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x24>
					return 0;
    4bd4:	2400      	movs	r4, #0
    4bd6:	2500      	movs	r5, #0
    4bd8:	e000      	b.n	4bdc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x54>
    4bda:	2501      	movs	r5, #1
    4bdc:	232c      	movs	r3, #44	; 0x2c
    4bde:	18fb      	adds	r3, r7, r3
    4be0:	0018      	movs	r0, r3
    4be2:	f7ff ff36 	bl	4a52 <_ZN7__GuardD1Ev>
    4be6:	2d01      	cmp	r5, #1
    4be8:	d000      	beq.n	4bec <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x64>
    4bea:	e0de      	b.n	4daa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
			synchronized {
    4bec:	46c0      	nop			; (mov r8, r8)
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    4bee:	2300      	movs	r3, #0
    4bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    4bf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	429a      	cmp	r2, r3
    4bf8:	d207      	bcs.n	4c0a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    4bfa:	68fb      	ldr	r3, [r7, #12]
    4bfc:	69da      	ldr	r2, [r3, #28]
    4bfe:	68fb      	ldr	r3, [r7, #12]
    4c00:	6a1b      	ldr	r3, [r3, #32]
    4c02:	429a      	cmp	r2, r3
    4c04:	d201      	bcs.n	4c0a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    4c06:	2301      	movs	r3, #1
    4c08:	e000      	b.n	4c0c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x84>
    4c0a:	2300      	movs	r3, #0
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d011      	beq.n	4c34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xac>
				data[i] = data0[first0++];
    4c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4c14:	18d1      	adds	r1, r2, r3
    4c16:	68fb      	ldr	r3, [r7, #12]
    4c18:	6998      	ldr	r0, [r3, #24]
    4c1a:	68fb      	ldr	r3, [r7, #12]
    4c1c:	69db      	ldr	r3, [r3, #28]
    4c1e:	1c5c      	adds	r4, r3, #1
    4c20:	68fa      	ldr	r2, [r7, #12]
    4c22:	61d4      	str	r4, [r2, #28]
    4c24:	18c3      	adds	r3, r0, r3
    4c26:	781b      	ldrb	r3, [r3, #0]
    4c28:	b2db      	uxtb	r3, r3
    4c2a:	700b      	strb	r3, [r1, #0]
			for (i=0; i<len && first0 < last0; i++) {
    4c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4c2e:	3301      	adds	r3, #1
    4c30:	63fb      	str	r3, [r7, #60]	; 0x3c
    4c32:	e7de      	b.n	4bf2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6a>
			}
			if (first0 == last0) {
    4c34:	68fb      	ldr	r3, [r7, #12]
    4c36:	69da      	ldr	r2, [r3, #28]
    4c38:	68fb      	ldr	r3, [r7, #12]
    4c3a:	6a1b      	ldr	r3, [r3, #32]
    4c3c:	1ad3      	subs	r3, r2, r3
    4c3e:	425a      	negs	r2, r3
    4c40:	4153      	adcs	r3, r2
    4c42:	b2db      	uxtb	r3, r3
    4c44:	2b00      	cmp	r3, #0
    4c46:	d02d      	beq.n	4ca4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x11c>
				first0 = 0;
    4c48:	68fb      	ldr	r3, [r7, #12]
    4c4a:	2200      	movs	r2, #0
    4c4c:	61da      	str	r2, [r3, #28]
				current = 1;
    4c4e:	68fb      	ldr	r3, [r7, #12]
    4c50:	2201      	movs	r2, #1
    4c52:	611a      	str	r2, [r3, #16]
				synchronized {
    4c54:	2324      	movs	r3, #36	; 0x24
    4c56:	18fb      	adds	r3, r7, r3
    4c58:	0018      	movs	r0, r3
    4c5a:	f7ff fee7 	bl	4a2c <_ZN7__GuardC1Ev>
    4c5e:	2324      	movs	r3, #36	; 0x24
    4c60:	18fb      	adds	r3, r7, r3
    4c62:	0018      	movs	r0, r3
    4c64:	f7ff ff05 	bl	4a72 <_ZN7__Guard5enterEv>
    4c68:	0003      	movs	r3, r0
    4c6a:	1e5a      	subs	r2, r3, #1
    4c6c:	4193      	sbcs	r3, r2
    4c6e:	b2db      	uxtb	r3, r3
    4c70:	2b00      	cmp	r3, #0
    4c72:	d012      	beq.n	4c9a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x112>
					ready0 = false;
    4c74:	68fb      	ldr	r3, [r7, #12]
    4c76:	2224      	movs	r2, #36	; 0x24
    4c78:	2100      	movs	r1, #0
    4c7a:	5499      	strb	r1, [r3, r2]
					if (notify) {
    4c7c:	68fb      	ldr	r3, [r7, #12]
    4c7e:	2235      	movs	r2, #53	; 0x35
    4c80:	5c9b      	ldrb	r3, [r3, r2]
    4c82:	b2db      	uxtb	r3, r3
    4c84:	2b00      	cmp	r3, #0
    4c86:	d0ea      	beq.n	4c5e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
						notify = false;
    4c88:	68fb      	ldr	r3, [r7, #12]
    4c8a:	2235      	movs	r2, #53	; 0x35
    4c8c:	2100      	movs	r1, #0
    4c8e:	5499      	strb	r1, [r3, r2]
						release();
    4c90:	68fb      	ldr	r3, [r7, #12]
    4c92:	0018      	movs	r0, r3
    4c94:	f000 f9b8 	bl	5008 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
				synchronized {
    4c98:	e7e1      	b.n	4c5e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
    4c9a:	2324      	movs	r3, #36	; 0x24
    4c9c:	18fb      	adds	r3, r7, r3
    4c9e:	0018      	movs	r0, r3
    4ca0:	f7ff fed7 	bl	4a52 <_ZN7__GuardD1Ev>
					}
				}
			}
			return i;
    4ca4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    4ca6:	e080      	b.n	4daa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
		} else {
			synchronized {
    4ca8:	231c      	movs	r3, #28
    4caa:	18fb      	adds	r3, r7, r3
    4cac:	0018      	movs	r0, r3
    4cae:	f7ff febd 	bl	4a2c <_ZN7__GuardC1Ev>
    4cb2:	231c      	movs	r3, #28
    4cb4:	18fb      	adds	r3, r7, r3
    4cb6:	0018      	movs	r0, r3
    4cb8:	f7ff fedb 	bl	4a72 <_ZN7__Guard5enterEv>
    4cbc:	0003      	movs	r3, r0
    4cbe:	1e5a      	subs	r2, r3, #1
    4cc0:	4193      	sbcs	r3, r2
    4cc2:	b2db      	uxtb	r3, r3
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d00b      	beq.n	4ce0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x158>
				if (!ready1) {
    4cc8:	68fb      	ldr	r3, [r7, #12]
    4cca:	2234      	movs	r2, #52	; 0x34
    4ccc:	5c9b      	ldrb	r3, [r3, r2]
    4cce:	b2db      	uxtb	r3, r3
    4cd0:	2201      	movs	r2, #1
    4cd2:	4053      	eors	r3, r2
    4cd4:	b2db      	uxtb	r3, r3
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d0eb      	beq.n	4cb2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12a>
					return 0;
    4cda:	2400      	movs	r4, #0
    4cdc:	2500      	movs	r5, #0
    4cde:	e000      	b.n	4ce2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x15a>
    4ce0:	2501      	movs	r5, #1
    4ce2:	231c      	movs	r3, #28
    4ce4:	18fb      	adds	r3, r7, r3
    4ce6:	0018      	movs	r0, r3
    4ce8:	f7ff feb3 	bl	4a52 <_ZN7__GuardD1Ev>
    4cec:	2d01      	cmp	r5, #1
    4cee:	d15c      	bne.n	4daa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
			synchronized {
    4cf0:	46c0      	nop			; (mov r8, r8)
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    4cf2:	2300      	movs	r3, #0
    4cf4:	63bb      	str	r3, [r7, #56]	; 0x38
    4cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    4cf8:	687b      	ldr	r3, [r7, #4]
    4cfa:	429a      	cmp	r2, r3
    4cfc:	d207      	bcs.n	4d0e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x186>
    4cfe:	68fb      	ldr	r3, [r7, #12]
    4d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d02:	68fb      	ldr	r3, [r7, #12]
    4d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d06:	429a      	cmp	r2, r3
    4d08:	d201      	bcs.n	4d0e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x186>
    4d0a:	2301      	movs	r3, #1
    4d0c:	e000      	b.n	4d10 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x188>
    4d0e:	2300      	movs	r3, #0
    4d10:	2b00      	cmp	r3, #0
    4d12:	d011      	beq.n	4d38 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1b0>
				data[i] = data1[first1++];
    4d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4d18:	18d1      	adds	r1, r2, r3
    4d1a:	68fb      	ldr	r3, [r7, #12]
    4d1c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4d1e:	68fb      	ldr	r3, [r7, #12]
    4d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d22:	1c5c      	adds	r4, r3, #1
    4d24:	68fa      	ldr	r2, [r7, #12]
    4d26:	62d4      	str	r4, [r2, #44]	; 0x2c
    4d28:	18c3      	adds	r3, r0, r3
    4d2a:	781b      	ldrb	r3, [r3, #0]
    4d2c:	b2db      	uxtb	r3, r3
    4d2e:	700b      	strb	r3, [r1, #0]
			for (i=0; i<len && first1 < last1; i++) {
    4d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4d32:	3301      	adds	r3, #1
    4d34:	63bb      	str	r3, [r7, #56]	; 0x38
    4d36:	e7de      	b.n	4cf6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x16e>
			}
			if (first1 == last1) {
    4d38:	68fb      	ldr	r3, [r7, #12]
    4d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d3c:	68fb      	ldr	r3, [r7, #12]
    4d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d40:	1ad3      	subs	r3, r2, r3
    4d42:	425a      	negs	r2, r3
    4d44:	4153      	adcs	r3, r2
    4d46:	b2db      	uxtb	r3, r3
    4d48:	2b00      	cmp	r3, #0
    4d4a:	d02d      	beq.n	4da8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x220>
				first1 = 0;
    4d4c:	68fb      	ldr	r3, [r7, #12]
    4d4e:	2200      	movs	r2, #0
    4d50:	62da      	str	r2, [r3, #44]	; 0x2c
				current = 0;
    4d52:	68fb      	ldr	r3, [r7, #12]
    4d54:	2200      	movs	r2, #0
    4d56:	611a      	str	r2, [r3, #16]
				synchronized {
    4d58:	2314      	movs	r3, #20
    4d5a:	18fb      	adds	r3, r7, r3
    4d5c:	0018      	movs	r0, r3
    4d5e:	f7ff fe65 	bl	4a2c <_ZN7__GuardC1Ev>
    4d62:	2314      	movs	r3, #20
    4d64:	18fb      	adds	r3, r7, r3
    4d66:	0018      	movs	r0, r3
    4d68:	f7ff fe83 	bl	4a72 <_ZN7__Guard5enterEv>
    4d6c:	0003      	movs	r3, r0
    4d6e:	1e5a      	subs	r2, r3, #1
    4d70:	4193      	sbcs	r3, r2
    4d72:	b2db      	uxtb	r3, r3
    4d74:	2b00      	cmp	r3, #0
    4d76:	d012      	beq.n	4d9e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x216>
					ready1 = false;
    4d78:	68fb      	ldr	r3, [r7, #12]
    4d7a:	2234      	movs	r2, #52	; 0x34
    4d7c:	2100      	movs	r1, #0
    4d7e:	5499      	strb	r1, [r3, r2]
					if (notify) {
    4d80:	68fb      	ldr	r3, [r7, #12]
    4d82:	2235      	movs	r2, #53	; 0x35
    4d84:	5c9b      	ldrb	r3, [r3, r2]
    4d86:	b2db      	uxtb	r3, r3
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d0ea      	beq.n	4d62 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1da>
						notify = false;
    4d8c:	68fb      	ldr	r3, [r7, #12]
    4d8e:	2235      	movs	r2, #53	; 0x35
    4d90:	2100      	movs	r1, #0
    4d92:	5499      	strb	r1, [r3, r2]
						release();
    4d94:	68fb      	ldr	r3, [r7, #12]
    4d96:	0018      	movs	r0, r3
    4d98:	f000 f936 	bl	5008 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
				synchronized {
    4d9c:	e7e1      	b.n	4d62 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1da>
    4d9e:	2314      	movs	r3, #20
    4da0:	18fb      	adds	r3, r7, r3
    4da2:	0018      	movs	r0, r3
    4da4:	f7ff fe55 	bl	4a52 <_ZN7__GuardD1Ev>
					}
				}
			}
			return i;
    4da8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    4daa:	0023      	movs	r3, r4
		}
	}
    4dac:	0018      	movs	r0, r3
    4dae:	46bd      	mov	sp, r7
    4db0:	b010      	add	sp, #64	; 0x40
    4db2:	bdb0      	pop	{r4, r5, r7, pc}

00004db4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:

	virtual void handleEndpoint()
    4db4:	b590      	push	{r4, r7, lr}
    4db6:	b087      	sub	sp, #28
    4db8:	af00      	add	r7, sp, #0
    4dba:	6078      	str	r0, [r7, #4]
	{
		// R/W : incoming, ready0/1
		//   W : last0/1, notify
		if (usbd.epBank0IsTransferComplete(ep))
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	685a      	ldr	r2, [r3, #4]
    4dc0:	687b      	ldr	r3, [r7, #4]
    4dc2:	689b      	ldr	r3, [r3, #8]
    4dc4:	b2db      	uxtb	r3, r3
    4dc6:	0019      	movs	r1, r3
    4dc8:	0010      	movs	r0, r2
    4dca:	f7ff fabc 	bl	4346 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    4dce:	1e03      	subs	r3, r0, #0
    4dd0:	d100      	bne.n	4dd4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x20>
    4dd2:	e0b0      	b.n	4f36 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
		{
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
    4dd4:	687b      	ldr	r3, [r7, #4]
    4dd6:	685a      	ldr	r2, [r3, #4]
    4dd8:	687b      	ldr	r3, [r7, #4]
    4dda:	689b      	ldr	r3, [r3, #8]
    4ddc:	b2db      	uxtb	r3, r3
    4dde:	0019      	movs	r1, r3
    4de0:	0010      	movs	r0, r2
    4de2:	f7ff fb06 	bl	43f2 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks for non-ZLP's
			if (incoming == 0) {
    4de6:	687b      	ldr	r3, [r7, #4]
    4de8:	695b      	ldr	r3, [r3, #20]
    4dea:	2b00      	cmp	r3, #0
    4dec:	d14f      	bne.n	4e8e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
				last0 = usbd.epBank0ByteCount(ep);
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	685a      	ldr	r2, [r3, #4]
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	689b      	ldr	r3, [r3, #8]
    4df6:	b2db      	uxtb	r3, r3
    4df8:	0019      	movs	r1, r3
    4dfa:	0010      	movs	r0, r2
    4dfc:	f7ff fc21 	bl	4642 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    4e00:	0003      	movs	r3, r0
    4e02:	001a      	movs	r2, r3
    4e04:	687b      	ldr	r3, [r7, #4]
    4e06:	621a      	str	r2, [r3, #32]
				if (last0 != 0) {
    4e08:	687b      	ldr	r3, [r7, #4]
    4e0a:	6a1b      	ldr	r3, [r3, #32]
    4e0c:	1e5a      	subs	r2, r3, #1
    4e0e:	4193      	sbcs	r3, r2
    4e10:	b2db      	uxtb	r3, r3
    4e12:	2b00      	cmp	r3, #0
    4e14:	d100      	bne.n	4e18 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x64>
    4e16:	e08a      	b.n	4f2e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					incoming = 1;
    4e18:	687b      	ldr	r3, [r7, #4]
    4e1a:	2201      	movs	r2, #1
    4e1c:	615a      	str	r2, [r3, #20]
					usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    4e1e:	687b      	ldr	r3, [r7, #4]
    4e20:	6858      	ldr	r0, [r3, #4]
    4e22:	687b      	ldr	r3, [r7, #4]
    4e24:	689b      	ldr	r3, [r3, #8]
    4e26:	b2d9      	uxtb	r1, r3
    4e28:	687b      	ldr	r3, [r7, #4]
    4e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e2c:	001a      	movs	r2, r3
    4e2e:	f7ff fca9 	bl	4784 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
					synchronized {
    4e32:	2310      	movs	r3, #16
    4e34:	18fb      	adds	r3, r7, r3
    4e36:	0018      	movs	r0, r3
    4e38:	f7ff fdf8 	bl	4a2c <_ZN7__GuardC1Ev>
    4e3c:	2310      	movs	r3, #16
    4e3e:	18fb      	adds	r3, r7, r3
    4e40:	0018      	movs	r0, r3
    4e42:	f7ff fe16 	bl	4a72 <_ZN7__Guard5enterEv>
    4e46:	0003      	movs	r3, r0
    4e48:	1e5a      	subs	r2, r3, #1
    4e4a:	4193      	sbcs	r3, r2
    4e4c:	b2db      	uxtb	r3, r3
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d014      	beq.n	4e7c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xc8>
						ready0 = true;
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	2224      	movs	r2, #36	; 0x24
    4e56:	2101      	movs	r1, #1
    4e58:	5499      	strb	r1, [r3, r2]
						if (ready1) {
    4e5a:	687b      	ldr	r3, [r7, #4]
    4e5c:	2234      	movs	r2, #52	; 0x34
    4e5e:	5c9b      	ldrb	r3, [r3, r2]
    4e60:	b2db      	uxtb	r3, r3
    4e62:	2b00      	cmp	r3, #0
    4e64:	d005      	beq.n	4e72 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xbe>
							notify = true;
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	2235      	movs	r2, #53	; 0x35
    4e6a:	2101      	movs	r1, #1
    4e6c:	5499      	strb	r1, [r3, r2]
    4e6e:	2400      	movs	r4, #0
							return;
    4e70:	e005      	b.n	4e7e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xca>
						}
						notify = false;
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	2235      	movs	r2, #53	; 0x35
    4e76:	2100      	movs	r1, #0
    4e78:	5499      	strb	r1, [r3, r2]
					synchronized {
    4e7a:	e7df      	b.n	4e3c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x88>
    4e7c:	2401      	movs	r4, #1
    4e7e:	2310      	movs	r3, #16
    4e80:	18fb      	adds	r3, r7, r3
    4e82:	0018      	movs	r0, r3
    4e84:	f7ff fde5 	bl	4a52 <_ZN7__GuardD1Ev>
    4e88:	2c01      	cmp	r4, #1
    4e8a:	d04f      	beq.n	4f2c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x178>
    4e8c:	e053      	b.n	4f36 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
					}
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
    4e8e:	687b      	ldr	r3, [r7, #4]
    4e90:	685a      	ldr	r2, [r3, #4]
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	689b      	ldr	r3, [r3, #8]
    4e96:	b2db      	uxtb	r3, r3
    4e98:	0019      	movs	r1, r3
    4e9a:	0010      	movs	r0, r2
    4e9c:	f7ff fbd1 	bl	4642 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    4ea0:	0003      	movs	r3, r0
    4ea2:	001a      	movs	r2, r3
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	631a      	str	r2, [r3, #48]	; 0x30
				if (last1 != 0) {
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4eac:	1e5a      	subs	r2, r3, #1
    4eae:	4193      	sbcs	r3, r2
    4eb0:	b2db      	uxtb	r3, r3
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d03b      	beq.n	4f2e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					incoming = 0;
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	2200      	movs	r2, #0
    4eba:	615a      	str	r2, [r3, #20]
					usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	6858      	ldr	r0, [r3, #4]
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	689b      	ldr	r3, [r3, #8]
    4ec4:	b2d9      	uxtb	r1, r3
    4ec6:	687b      	ldr	r3, [r7, #4]
    4ec8:	699b      	ldr	r3, [r3, #24]
    4eca:	001a      	movs	r2, r3
    4ecc:	f7ff fc5a 	bl	4784 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
					synchronized {
    4ed0:	2308      	movs	r3, #8
    4ed2:	18fb      	adds	r3, r7, r3
    4ed4:	0018      	movs	r0, r3
    4ed6:	f7ff fda9 	bl	4a2c <_ZN7__GuardC1Ev>
    4eda:	2308      	movs	r3, #8
    4edc:	18fb      	adds	r3, r7, r3
    4ede:	0018      	movs	r0, r3
    4ee0:	f7ff fdc7 	bl	4a72 <_ZN7__Guard5enterEv>
    4ee4:	0003      	movs	r3, r0
    4ee6:	1e5a      	subs	r2, r3, #1
    4ee8:	4193      	sbcs	r3, r2
    4eea:	b2db      	uxtb	r3, r3
    4eec:	2b00      	cmp	r3, #0
    4eee:	d014      	beq.n	4f1a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x166>
						ready1 = true;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	2234      	movs	r2, #52	; 0x34
    4ef4:	2101      	movs	r1, #1
    4ef6:	5499      	strb	r1, [r3, r2]
						if (ready0) {
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	2224      	movs	r2, #36	; 0x24
    4efc:	5c9b      	ldrb	r3, [r3, r2]
    4efe:	b2db      	uxtb	r3, r3
    4f00:	2b00      	cmp	r3, #0
    4f02:	d005      	beq.n	4f10 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x15c>
							notify = true;
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	2235      	movs	r2, #53	; 0x35
    4f08:	2101      	movs	r1, #1
    4f0a:	5499      	strb	r1, [r3, r2]
    4f0c:	2400      	movs	r4, #0
							return;
    4f0e:	e005      	b.n	4f1c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x168>
						}
						notify = false;
    4f10:	687b      	ldr	r3, [r7, #4]
    4f12:	2235      	movs	r2, #53	; 0x35
    4f14:	2100      	movs	r1, #0
    4f16:	5499      	strb	r1, [r3, r2]
					synchronized {
    4f18:	e7df      	b.n	4eda <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x126>
    4f1a:	2401      	movs	r4, #1
    4f1c:	2308      	movs	r3, #8
    4f1e:	18fb      	adds	r3, r7, r3
    4f20:	0018      	movs	r0, r3
    4f22:	f7ff fd96 	bl	4a52 <_ZN7__GuardD1Ev>
    4f26:	2c01      	cmp	r4, #1
    4f28:	d105      	bne.n	4f36 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
    4f2a:	e000      	b.n	4f2e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					synchronized {
    4f2c:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
			release();
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	0018      	movs	r0, r3
    4f32:	f000 f869 	bl	5008 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
		}
	}
    4f36:	46bd      	mov	sp, r7
    4f38:	b007      	add	sp, #28
    4f3a:	bd90      	pop	{r4, r7, pc}

00004f3c <_ZNK26DoubleBufferedEPOutHandler9availableEv>:

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    4f3c:	b580      	push	{r7, lr}
    4f3e:	b088      	sub	sp, #32
    4f40:	af00      	add	r7, sp, #0
    4f42:	6078      	str	r0, [r7, #4]
		if (current == 0) {
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	691b      	ldr	r3, [r3, #16]
    4f48:	2b00      	cmp	r3, #0
    4f4a:	d12c      	bne.n	4fa6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x6a>
			bool ready = false;
    4f4c:	231f      	movs	r3, #31
    4f4e:	18fb      	adds	r3, r7, r3
    4f50:	2200      	movs	r2, #0
    4f52:	701a      	strb	r2, [r3, #0]
			synchronized {
    4f54:	2314      	movs	r3, #20
    4f56:	18fb      	adds	r3, r7, r3
    4f58:	0018      	movs	r0, r3
    4f5a:	f7ff fd67 	bl	4a2c <_ZN7__GuardC1Ev>
    4f5e:	2314      	movs	r3, #20
    4f60:	18fb      	adds	r3, r7, r3
    4f62:	0018      	movs	r0, r3
    4f64:	f7ff fd85 	bl	4a72 <_ZN7__Guard5enterEv>
    4f68:	0003      	movs	r3, r0
    4f6a:	1e5a      	subs	r2, r3, #1
    4f6c:	4193      	sbcs	r3, r2
    4f6e:	b2db      	uxtb	r3, r3
    4f70:	2b00      	cmp	r3, #0
    4f72:	d006      	beq.n	4f82 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x46>
				ready = ready0;
    4f74:	231f      	movs	r3, #31
    4f76:	18fb      	adds	r3, r7, r3
    4f78:	687a      	ldr	r2, [r7, #4]
    4f7a:	2124      	movs	r1, #36	; 0x24
    4f7c:	5c52      	ldrb	r2, [r2, r1]
    4f7e:	701a      	strb	r2, [r3, #0]
			synchronized {
    4f80:	e7ed      	b.n	4f5e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x22>
    4f82:	2314      	movs	r3, #20
    4f84:	18fb      	adds	r3, r7, r3
    4f86:	0018      	movs	r0, r3
    4f88:	f7ff fd63 	bl	4a52 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    4f8c:	231f      	movs	r3, #31
    4f8e:	18fb      	adds	r3, r7, r3
    4f90:	781b      	ldrb	r3, [r3, #0]
    4f92:	2b00      	cmp	r3, #0
    4f94:	d005      	beq.n	4fa2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x66>
    4f96:	687b      	ldr	r3, [r7, #4]
    4f98:	6a1a      	ldr	r2, [r3, #32]
    4f9a:	687b      	ldr	r3, [r7, #4]
    4f9c:	69db      	ldr	r3, [r3, #28]
    4f9e:	1ad3      	subs	r3, r2, r3
    4fa0:	e02e      	b.n	5000 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc4>
    4fa2:	2300      	movs	r3, #0
    4fa4:	e02c      	b.n	5000 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc4>
		} else {
			bool ready = false;
    4fa6:	231e      	movs	r3, #30
    4fa8:	18fb      	adds	r3, r7, r3
    4faa:	2200      	movs	r2, #0
    4fac:	701a      	strb	r2, [r3, #0]
			synchronized {
    4fae:	230c      	movs	r3, #12
    4fb0:	18fb      	adds	r3, r7, r3
    4fb2:	0018      	movs	r0, r3
    4fb4:	f7ff fd3a 	bl	4a2c <_ZN7__GuardC1Ev>
    4fb8:	230c      	movs	r3, #12
    4fba:	18fb      	adds	r3, r7, r3
    4fbc:	0018      	movs	r0, r3
    4fbe:	f7ff fd58 	bl	4a72 <_ZN7__Guard5enterEv>
    4fc2:	0003      	movs	r3, r0
    4fc4:	1e5a      	subs	r2, r3, #1
    4fc6:	4193      	sbcs	r3, r2
    4fc8:	b2db      	uxtb	r3, r3
    4fca:	2b00      	cmp	r3, #0
    4fcc:	d006      	beq.n	4fdc <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xa0>
				ready = ready1;
    4fce:	231e      	movs	r3, #30
    4fd0:	18fb      	adds	r3, r7, r3
    4fd2:	687a      	ldr	r2, [r7, #4]
    4fd4:	2134      	movs	r1, #52	; 0x34
    4fd6:	5c52      	ldrb	r2, [r2, r1]
    4fd8:	701a      	strb	r2, [r3, #0]
			synchronized {
    4fda:	e7ed      	b.n	4fb8 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x7c>
    4fdc:	230c      	movs	r3, #12
    4fde:	18fb      	adds	r3, r7, r3
    4fe0:	0018      	movs	r0, r3
    4fe2:	f7ff fd36 	bl	4a52 <_ZN7__GuardD1Ev>
			}
			return ready ? (last1 - first1) : 0;
    4fe6:	231e      	movs	r3, #30
    4fe8:	18fb      	adds	r3, r7, r3
    4fea:	781b      	ldrb	r3, [r3, #0]
    4fec:	2b00      	cmp	r3, #0
    4fee:	d005      	beq.n	4ffc <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc0>
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ff8:	1ad3      	subs	r3, r2, r3
    4ffa:	e000      	b.n	4ffe <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc2>
    4ffc:	2300      	movs	r3, #0
    4ffe:	46c0      	nop			; (mov r8, r8)
		}
	}
    5000:	0018      	movs	r0, r3
    5002:	46bd      	mov	sp, r7
    5004:	b008      	add	sp, #32
    5006:	bd80      	pop	{r7, pc}

00005008 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    5008:	b580      	push	{r7, lr}
    500a:	b082      	sub	sp, #8
    500c:	af00      	add	r7, sp, #0
    500e:	6078      	str	r0, [r7, #4]
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    5010:	687b      	ldr	r3, [r7, #4]
    5012:	685a      	ldr	r2, [r3, #4]
    5014:	687b      	ldr	r3, [r7, #4]
    5016:	689b      	ldr	r3, [r3, #8]
    5018:	b2db      	uxtb	r3, r3
    501a:	0019      	movs	r1, r3
    501c:	0010      	movs	r0, r2
    501e:	f7ff fa2a 	bl	4476 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
		usbd.epBank0SetMultiPacketSize(ep, size);
    5022:	687b      	ldr	r3, [r7, #4]
    5024:	6858      	ldr	r0, [r3, #4]
    5026:	687b      	ldr	r3, [r7, #4]
    5028:	689b      	ldr	r3, [r3, #8]
    502a:	b2d9      	uxtb	r1, r3
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	68db      	ldr	r3, [r3, #12]
    5030:	b29b      	uxth	r3, r3
    5032:	001a      	movs	r2, r3
    5034:	f7ff fb5c 	bl	46f0 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
		usbd.epBank0SetByteCount(ep, 0);
    5038:	687b      	ldr	r3, [r7, #4]
    503a:	6858      	ldr	r0, [r3, #4]
    503c:	687b      	ldr	r3, [r7, #4]
    503e:	689b      	ldr	r3, [r3, #8]
    5040:	b2db      	uxtb	r3, r3
    5042:	2200      	movs	r2, #0
    5044:	0019      	movs	r1, r3
    5046:	f7ff fb10 	bl	466a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
		usbd.epBank0ResetReady(ep);
    504a:	687b      	ldr	r3, [r7, #4]
    504c:	685a      	ldr	r2, [r3, #4]
    504e:	687b      	ldr	r3, [r7, #4]
    5050:	689b      	ldr	r3, [r3, #8]
    5052:	b2db      	uxtb	r3, r3
    5054:	0019      	movs	r1, r3
    5056:	0010      	movs	r0, r2
    5058:	f7ff fac6 	bl	45e8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>
	}
    505c:	46c0      	nop			; (mov r8, r8)
    505e:	46bd      	mov	sp, r7
    5060:	b002      	add	sp, #8
    5062:	bd80      	pop	{r7, pc}

00005064 <UDD_Handler>:
static char isEndpointHalt = 0;

extern void (*gpf_isr)(void);

// USB_Handler ISR
extern "C" void UDD_Handler(void) {
    5064:	b580      	push	{r7, lr}
    5066:	af00      	add	r7, sp, #0
	USBDevice.ISRHandler();
    5068:	4b03      	ldr	r3, [pc, #12]	; (5078 <UDD_Handler+0x14>)
    506a:	0018      	movs	r0, r3
    506c:	f001 f910 	bl	6290 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    5070:	46c0      	nop			; (mov r8, r8)
    5072:	46bd      	mov	sp, r7
    5074:	bd80      	pop	{r7, pc}
    5076:	46c0      	nop			; (mov r8, r8)
    5078:	200008f0 	.word	0x200008f0

0000507c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    507c:	b5f0      	push	{r4, r5, r6, r7, lr}
    507e:	b08d      	sub	sp, #52	; 0x34
    5080:	af00      	add	r7, sp, #0
    5082:	61f8      	str	r0, [r7, #28]
    5084:	61b9      	str	r1, [r7, #24]
    5086:	0011      	movs	r1, r2
    5088:	2217      	movs	r2, #23
    508a:	18ba      	adds	r2, r7, r2
    508c:	7011      	strb	r1, [r2, #0]
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
    508e:	466a      	mov	r2, sp
    5090:	613a      	str	r2, [r7, #16]
	if (maxlen < 2)
    5092:	2217      	movs	r2, #23
    5094:	18ba      	adds	r2, r7, r2
    5096:	7812      	ldrb	r2, [r2, #0]
    5098:	2a01      	cmp	r2, #1
    509a:	dc01      	bgt.n	50a0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x24>
		return false;
    509c:	2300      	movs	r3, #0
    509e:	e092      	b.n	51c6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x14a>
	uint8_t buffer[maxlen];
    50a0:	2217      	movs	r2, #23
    50a2:	18ba      	adds	r2, r7, r2
    50a4:	7812      	ldrb	r2, [r2, #0]
    50a6:	3a01      	subs	r2, #1
    50a8:	62ba      	str	r2, [r7, #40]	; 0x28
    50aa:	0011      	movs	r1, r2
    50ac:	3101      	adds	r1, #1
    50ae:	60b9      	str	r1, [r7, #8]
    50b0:	2100      	movs	r1, #0
    50b2:	60f9      	str	r1, [r7, #12]
    50b4:	68b9      	ldr	r1, [r7, #8]
    50b6:	0f49      	lsrs	r1, r1, #29
    50b8:	68f8      	ldr	r0, [r7, #12]
    50ba:	00c6      	lsls	r6, r0, #3
    50bc:	430e      	orrs	r6, r1
    50be:	68b9      	ldr	r1, [r7, #8]
    50c0:	00cd      	lsls	r5, r1, #3
    50c2:	0011      	movs	r1, r2
    50c4:	3101      	adds	r1, #1
    50c6:	6039      	str	r1, [r7, #0]
    50c8:	2100      	movs	r1, #0
    50ca:	6079      	str	r1, [r7, #4]
    50cc:	683d      	ldr	r5, [r7, #0]
    50ce:	687e      	ldr	r6, [r7, #4]
    50d0:	0029      	movs	r1, r5
    50d2:	0f49      	lsrs	r1, r1, #29
    50d4:	0030      	movs	r0, r6
    50d6:	00c4      	lsls	r4, r0, #3
    50d8:	430c      	orrs	r4, r1
    50da:	0029      	movs	r1, r5
    50dc:	00cb      	lsls	r3, r1, #3
    50de:	0013      	movs	r3, r2
    50e0:	3301      	adds	r3, #1
    50e2:	3307      	adds	r3, #7
    50e4:	08db      	lsrs	r3, r3, #3
    50e6:	00db      	lsls	r3, r3, #3
    50e8:	466a      	mov	r2, sp
    50ea:	1ad3      	subs	r3, r2, r3
    50ec:	469d      	mov	sp, r3
    50ee:	466b      	mov	r3, sp
    50f0:	3300      	adds	r3, #0
    50f2:	627b      	str	r3, [r7, #36]	; 0x24
	buffer[0] = strlen((const char*)string) * 2 + 2;
    50f4:	69bb      	ldr	r3, [r7, #24]
    50f6:	0018      	movs	r0, r3
    50f8:	f00c fa3a 	bl	11570 <strlen>
    50fc:	0003      	movs	r3, r0
    50fe:	3301      	adds	r3, #1
    5100:	b2db      	uxtb	r3, r3
    5102:	18db      	adds	r3, r3, r3
    5104:	b2da      	uxtb	r2, r3
    5106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5108:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x03;
    510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    510c:	2203      	movs	r2, #3
    510e:	705a      	strb	r2, [r3, #1]
	for (i = 2; i < maxlen && *string; i++) {
    5110:	231f      	movs	r3, #31
    5112:	2210      	movs	r2, #16
    5114:	4694      	mov	ip, r2
    5116:	44bc      	add	ip, r7
    5118:	4463      	add	r3, ip
    511a:	2202      	movs	r2, #2
    511c:	701a      	strb	r2, [r3, #0]
    511e:	231f      	movs	r3, #31
    5120:	2210      	movs	r2, #16
    5122:	4694      	mov	ip, r2
    5124:	44bc      	add	ip, r7
    5126:	4463      	add	r3, ip
    5128:	781a      	ldrb	r2, [r3, #0]
    512a:	2317      	movs	r3, #23
    512c:	18fb      	adds	r3, r7, r3
    512e:	781b      	ldrb	r3, [r3, #0]
    5130:	429a      	cmp	r2, r3
    5132:	da39      	bge.n	51a8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12c>
    5134:	69bb      	ldr	r3, [r7, #24]
    5136:	781b      	ldrb	r3, [r3, #0]
    5138:	2b00      	cmp	r3, #0
    513a:	d035      	beq.n	51a8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12c>
		buffer[i++] = *string++;
    513c:	231f      	movs	r3, #31
    513e:	2210      	movs	r2, #16
    5140:	4694      	mov	ip, r2
    5142:	44bc      	add	ip, r7
    5144:	4463      	add	r3, ip
    5146:	781b      	ldrb	r3, [r3, #0]
    5148:	221f      	movs	r2, #31
    514a:	2110      	movs	r1, #16
    514c:	468c      	mov	ip, r1
    514e:	44bc      	add	ip, r7
    5150:	4462      	add	r2, ip
    5152:	1c59      	adds	r1, r3, #1
    5154:	7011      	strb	r1, [r2, #0]
    5156:	0019      	movs	r1, r3
    5158:	69bb      	ldr	r3, [r7, #24]
    515a:	1c5a      	adds	r2, r3, #1
    515c:	61ba      	str	r2, [r7, #24]
    515e:	781a      	ldrb	r2, [r3, #0]
    5160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5162:	545a      	strb	r2, [r3, r1]
		if (i == maxlen) break;
    5164:	231f      	movs	r3, #31
    5166:	2210      	movs	r2, #16
    5168:	18ba      	adds	r2, r7, r2
    516a:	18d2      	adds	r2, r2, r3
    516c:	2317      	movs	r3, #23
    516e:	18fb      	adds	r3, r7, r3
    5170:	7812      	ldrb	r2, [r2, #0]
    5172:	781b      	ldrb	r3, [r3, #0]
    5174:	429a      	cmp	r2, r3
    5176:	d016      	beq.n	51a6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12a>
		buffer[i] = 0;
    5178:	231f      	movs	r3, #31
    517a:	2210      	movs	r2, #16
    517c:	4694      	mov	ip, r2
    517e:	44bc      	add	ip, r7
    5180:	4463      	add	r3, ip
    5182:	781b      	ldrb	r3, [r3, #0]
    5184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5186:	2100      	movs	r1, #0
    5188:	54d1      	strb	r1, [r2, r3]
	for (i = 2; i < maxlen && *string; i++) {
    518a:	231f      	movs	r3, #31
    518c:	2210      	movs	r2, #16
    518e:	4694      	mov	ip, r2
    5190:	44bc      	add	ip, r7
    5192:	4463      	add	r3, ip
    5194:	781a      	ldrb	r2, [r3, #0]
    5196:	231f      	movs	r3, #31
    5198:	2110      	movs	r1, #16
    519a:	468c      	mov	ip, r1
    519c:	44bc      	add	ip, r7
    519e:	4463      	add	r3, ip
    51a0:	3201      	adds	r2, #1
    51a2:	701a      	strb	r2, [r3, #0]
    51a4:	e7bb      	b.n	511e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xa2>
		if (i == maxlen) break;
    51a6:	46c0      	nop			; (mov r8, r8)
	return USBDevice.sendControl(buffer, i);
    51a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    51aa:	231f      	movs	r3, #31
    51ac:	2210      	movs	r2, #16
    51ae:	4694      	mov	ip, r2
    51b0:	44bc      	add	ip, r7
    51b2:	4463      	add	r3, ip
    51b4:	781a      	ldrb	r2, [r3, #0]
    51b6:	4b07      	ldr	r3, [pc, #28]	; (51d4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x158>)
    51b8:	0018      	movs	r0, r3
    51ba:	f000 ff1d 	bl	5ff8 <_ZN14USBDeviceClass11sendControlEPKvm>
    51be:	0003      	movs	r3, r0
    51c0:	1e5a      	subs	r2, r3, #1
    51c2:	4193      	sbcs	r3, r2
    51c4:	b2db      	uxtb	r3, r3
    51c6:	693a      	ldr	r2, [r7, #16]
    51c8:	4695      	mov	sp, r2
}
    51ca:	0018      	movs	r0, r3
    51cc:	46bd      	mov	sp, r7
    51ce:	b00d      	add	sp, #52	; 0x34
    51d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51d2:	46c0      	nop			; (mov r8, r8)
    51d4:	200008f0 	.word	0x200008f0

000051d8 <_ZN14USBDeviceClass12packMessagesEb>:
bool _pack_message = false;
uint16_t _pack_size = 0;
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
    51d8:	b580      	push	{r7, lr}
    51da:	b082      	sub	sp, #8
    51dc:	af00      	add	r7, sp, #0
    51de:	6078      	str	r0, [r7, #4]
    51e0:	000a      	movs	r2, r1
    51e2:	1cfb      	adds	r3, r7, #3
    51e4:	701a      	strb	r2, [r3, #0]
	if (val) {
    51e6:	1cfb      	adds	r3, r7, #3
    51e8:	781b      	ldrb	r3, [r3, #0]
    51ea:	2b00      	cmp	r3, #0
    51ec:	d006      	beq.n	51fc <_ZN14USBDeviceClass12packMessagesEb+0x24>
		_pack_message = true;
    51ee:	4b0b      	ldr	r3, [pc, #44]	; (521c <_ZN14USBDeviceClass12packMessagesEb+0x44>)
    51f0:	2201      	movs	r2, #1
    51f2:	701a      	strb	r2, [r3, #0]
		_pack_size = 0;
    51f4:	4b0a      	ldr	r3, [pc, #40]	; (5220 <_ZN14USBDeviceClass12packMessagesEb+0x48>)
    51f6:	2200      	movs	r2, #0
    51f8:	801a      	strh	r2, [r3, #0]
	} else {
		_pack_message = false;
		sendControl(_pack_buffer, _pack_size);
	}
}
    51fa:	e00a      	b.n	5212 <_ZN14USBDeviceClass12packMessagesEb+0x3a>
		_pack_message = false;
    51fc:	4b07      	ldr	r3, [pc, #28]	; (521c <_ZN14USBDeviceClass12packMessagesEb+0x44>)
    51fe:	2200      	movs	r2, #0
    5200:	701a      	strb	r2, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    5202:	4b07      	ldr	r3, [pc, #28]	; (5220 <_ZN14USBDeviceClass12packMessagesEb+0x48>)
    5204:	881b      	ldrh	r3, [r3, #0]
    5206:	001a      	movs	r2, r3
    5208:	4906      	ldr	r1, [pc, #24]	; (5224 <_ZN14USBDeviceClass12packMessagesEb+0x4c>)
    520a:	687b      	ldr	r3, [r7, #4]
    520c:	0018      	movs	r0, r3
    520e:	f000 fef3 	bl	5ff8 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    5212:	46c0      	nop			; (mov r8, r8)
    5214:	46bd      	mov	sp, r7
    5216:	b002      	add	sp, #8
    5218:	bd80      	pop	{r7, pc}
    521a:	46c0      	nop			; (mov r8, r8)
    521c:	200007e5 	.word	0x200007e5
    5220:	200007e6 	.word	0x200007e6
    5224:	200007e8 	.word	0x200007e8

00005228 <_ZN14USBDeviceClass14SendInterfacesEPm>:

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
    5228:	b580      	push	{r7, lr}
    522a:	b084      	sub	sp, #16
    522c:	af00      	add	r7, sp, #0
    522e:	6078      	str	r0, [r7, #4]
    5230:	6039      	str	r1, [r7, #0]
	uint8_t interfaces = 0;
    5232:	230f      	movs	r3, #15
    5234:	18fb      	adds	r3, r7, r3
    5236:	2200      	movs	r2, #0
    5238:	701a      	strb	r2, [r3, #0]

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    523a:	230f      	movs	r3, #15
    523c:	18fb      	adds	r3, r7, r3
    523e:	0018      	movs	r0, r3
    5240:	f009 f91c 	bl	e47c <_Z16CDC_GetInterfacePh>
    5244:	0002      	movs	r2, r0
    5246:	683b      	ldr	r3, [r7, #0]
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	189a      	adds	r2, r3, r2
    524c:	683b      	ldr	r3, [r7, #0]
    524e:	601a      	str	r2, [r3, #0]
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
    5250:	f009 faf2 	bl	e838 <_Z12PluggableUSBv>
    5254:	0002      	movs	r2, r0
    5256:	230f      	movs	r3, #15
    5258:	18fb      	adds	r3, r7, r3
    525a:	0019      	movs	r1, r3
    525c:	0010      	movs	r0, r2
    525e:	f009 fa5b 	bl	e718 <_ZN13PluggableUSB_12getInterfaceEPh>
    5262:	0002      	movs	r2, r0
    5264:	683b      	ldr	r3, [r7, #0]
    5266:	681b      	ldr	r3, [r3, #0]
    5268:	189a      	adds	r2, r3, r2
    526a:	683b      	ldr	r3, [r7, #0]
    526c:	601a      	str	r2, [r3, #0]
#endif

	return interfaces;
    526e:	230f      	movs	r3, #15
    5270:	18fb      	adds	r3, r7, r3
    5272:	781b      	ldrb	r3, [r3, #0]
}
    5274:	0018      	movs	r0, r3
    5276:	46bd      	mov	sp, r7
    5278:	b004      	add	sp, #16
    527a:	bd80      	pop	{r7, pc}

0000527c <_ZN14USBDeviceClass17sendConfigurationEm>:

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    527c:	b590      	push	{r4, r7, lr}
    527e:	b089      	sub	sp, #36	; 0x24
    5280:	af00      	add	r7, sp, #0
    5282:	6078      	str	r0, [r7, #4]
    5284:	6039      	str	r1, [r7, #0]
	uint32_t total = 0;
    5286:	2300      	movs	r3, #0
    5288:	61bb      	str	r3, [r7, #24]
	// Count and measure interfaces
	_dry_run = true;
    528a:	4b32      	ldr	r3, [pc, #200]	; (5354 <_ZN14USBDeviceClass17sendConfigurationEm+0xd8>)
    528c:	2201      	movs	r2, #1
    528e:	701a      	strb	r2, [r3, #0]
	uint8_t interfaces = SendInterfaces(&total);
    5290:	231f      	movs	r3, #31
    5292:	18fc      	adds	r4, r7, r3
    5294:	2318      	movs	r3, #24
    5296:	18fa      	adds	r2, r7, r3
    5298:	687b      	ldr	r3, [r7, #4]
    529a:	0011      	movs	r1, r2
    529c:	0018      	movs	r0, r3
    529e:	f7ff ffc3 	bl	5228 <_ZN14USBDeviceClass14SendInterfacesEPm>
    52a2:	0003      	movs	r3, r0
    52a4:	7023      	strb	r3, [r4, #0]

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    52a6:	230c      	movs	r3, #12
    52a8:	18fb      	adds	r3, r7, r3
    52aa:	0018      	movs	r0, r3
    52ac:	2309      	movs	r3, #9
    52ae:	001a      	movs	r2, r3
    52b0:	2100      	movs	r1, #0
    52b2:	f00b fac7 	bl	10844 <memset>
    52b6:	230c      	movs	r3, #12
    52b8:	18fb      	adds	r3, r7, r3
    52ba:	2209      	movs	r2, #9
    52bc:	701a      	strb	r2, [r3, #0]
    52be:	230c      	movs	r3, #12
    52c0:	18fb      	adds	r3, r7, r3
    52c2:	2202      	movs	r2, #2
    52c4:	705a      	strb	r2, [r3, #1]
    52c6:	230c      	movs	r3, #12
    52c8:	18fb      	adds	r3, r7, r3
    52ca:	2201      	movs	r2, #1
    52cc:	715a      	strb	r2, [r3, #5]
    52ce:	230c      	movs	r3, #12
    52d0:	18fb      	adds	r3, r7, r3
    52d2:	22a0      	movs	r2, #160	; 0xa0
    52d4:	71da      	strb	r2, [r3, #7]
    52d6:	230c      	movs	r3, #12
    52d8:	18fb      	adds	r3, r7, r3
    52da:	22fa      	movs	r2, #250	; 0xfa
    52dc:	721a      	strb	r2, [r3, #8]
    52de:	69bb      	ldr	r3, [r7, #24]
    52e0:	b29b      	uxth	r3, r3
    52e2:	3309      	adds	r3, #9
    52e4:	b29a      	uxth	r2, r3
    52e6:	230c      	movs	r3, #12
    52e8:	18fb      	adds	r3, r7, r3
    52ea:	805a      	strh	r2, [r3, #2]
    52ec:	230c      	movs	r3, #12
    52ee:	18fb      	adds	r3, r7, r3
    52f0:	221f      	movs	r2, #31
    52f2:	18ba      	adds	r2, r7, r2
    52f4:	7812      	ldrb	r2, [r2, #0]
    52f6:	711a      	strb	r2, [r3, #4]
	_Pragma("pack()")

	//	Now send them
	_dry_run = false;
    52f8:	4b16      	ldr	r3, [pc, #88]	; (5354 <_ZN14USBDeviceClass17sendConfigurationEm+0xd8>)
    52fa:	2200      	movs	r2, #0
    52fc:	701a      	strb	r2, [r3, #0]

	if (maxlen == sizeof(ConfigDescriptor)) {
    52fe:	683b      	ldr	r3, [r7, #0]
    5300:	2b09      	cmp	r3, #9
    5302:	d108      	bne.n	5316 <_ZN14USBDeviceClass17sendConfigurationEm+0x9a>
		sendControl(&config, sizeof(ConfigDescriptor));
    5304:	230c      	movs	r3, #12
    5306:	18f9      	adds	r1, r7, r3
    5308:	687b      	ldr	r3, [r7, #4]
    530a:	2209      	movs	r2, #9
    530c:	0018      	movs	r0, r3
    530e:	f000 fe73 	bl	5ff8 <_ZN14USBDeviceClass11sendControlEPKvm>
		return true;
    5312:	2301      	movs	r3, #1
    5314:	e01a      	b.n	534c <_ZN14USBDeviceClass17sendConfigurationEm+0xd0>
	}

	total = 0;
    5316:	2300      	movs	r3, #0
    5318:	61bb      	str	r3, [r7, #24]

	packMessages(true);
    531a:	687b      	ldr	r3, [r7, #4]
    531c:	2101      	movs	r1, #1
    531e:	0018      	movs	r0, r3
    5320:	f7ff ff5a 	bl	51d8 <_ZN14USBDeviceClass12packMessagesEb>
	sendControl(&config, sizeof(ConfigDescriptor));
    5324:	230c      	movs	r3, #12
    5326:	18f9      	adds	r1, r7, r3
    5328:	687b      	ldr	r3, [r7, #4]
    532a:	2209      	movs	r2, #9
    532c:	0018      	movs	r0, r3
    532e:	f000 fe63 	bl	5ff8 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    5332:	2318      	movs	r3, #24
    5334:	18fa      	adds	r2, r7, r3
    5336:	687b      	ldr	r3, [r7, #4]
    5338:	0011      	movs	r1, r2
    533a:	0018      	movs	r0, r3
    533c:	f7ff ff74 	bl	5228 <_ZN14USBDeviceClass14SendInterfacesEPm>
	packMessages(false);
    5340:	687b      	ldr	r3, [r7, #4]
    5342:	2100      	movs	r1, #0
    5344:	0018      	movs	r0, r3
    5346:	f7ff ff47 	bl	51d8 <_ZN14USBDeviceClass12packMessagesEb>

	return true;
    534a:	2301      	movs	r3, #1
}
    534c:	0018      	movs	r0, r3
    534e:	46bd      	mov	sp, r7
    5350:	b009      	add	sp, #36	; 0x24
    5352:	bd90      	pop	{r4, r7, pc}
    5354:	200007e4 	.word	0x200007e4

00005358 <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
    5358:	b580      	push	{r7, lr}
    535a:	b084      	sub	sp, #16
    535c:	af00      	add	r7, sp, #0
    535e:	6078      	str	r0, [r7, #4]
    5360:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 8; i++) {
    5362:	2300      	movs	r3, #0
    5364:	60fb      	str	r3, [r7, #12]
    5366:	68fb      	ldr	r3, [r7, #12]
    5368:	2b07      	cmp	r3, #7
    536a:	dc1d      	bgt.n	53a8 <_ZL5utox8mPc+0x50>
		int d = val & 0XF;
    536c:	687b      	ldr	r3, [r7, #4]
    536e:	220f      	movs	r2, #15
    5370:	4013      	ands	r3, r2
    5372:	60bb      	str	r3, [r7, #8]
		val = (val >> 4);
    5374:	687b      	ldr	r3, [r7, #4]
    5376:	091b      	lsrs	r3, r3, #4
    5378:	607b      	str	r3, [r7, #4]

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    537a:	68fb      	ldr	r3, [r7, #12]
    537c:	2207      	movs	r2, #7
    537e:	1ad3      	subs	r3, r2, r3
    5380:	001a      	movs	r2, r3
    5382:	683b      	ldr	r3, [r7, #0]
    5384:	189a      	adds	r2, r3, r2
    5386:	68bb      	ldr	r3, [r7, #8]
    5388:	2b09      	cmp	r3, #9
    538a:	dd04      	ble.n	5396 <_ZL5utox8mPc+0x3e>
    538c:	68bb      	ldr	r3, [r7, #8]
    538e:	b2db      	uxtb	r3, r3
    5390:	3337      	adds	r3, #55	; 0x37
    5392:	b2db      	uxtb	r3, r3
    5394:	e003      	b.n	539e <_ZL5utox8mPc+0x46>
    5396:	68bb      	ldr	r3, [r7, #8]
    5398:	b2db      	uxtb	r3, r3
    539a:	3330      	adds	r3, #48	; 0x30
    539c:	b2db      	uxtb	r3, r3
    539e:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < 8; i++) {
    53a0:	68fb      	ldr	r3, [r7, #12]
    53a2:	3301      	adds	r3, #1
    53a4:	60fb      	str	r3, [r7, #12]
    53a6:	e7de      	b.n	5366 <_ZL5utox8mPc+0xe>
	}
}
    53a8:	46c0      	nop			; (mov r8, r8)
    53aa:	46bd      	mov	sp, r7
    53ac:	b004      	add	sp, #16
    53ae:	bd80      	pop	{r7, pc}

000053b0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    53b0:	b580      	push	{r7, lr}
    53b2:	b098      	sub	sp, #96	; 0x60
    53b4:	af00      	add	r7, sp, #0
    53b6:	6078      	str	r0, [r7, #4]
    53b8:	6039      	str	r1, [r7, #0]
	uint8_t t = setup.wValueH;
    53ba:	2357      	movs	r3, #87	; 0x57
    53bc:	18fb      	adds	r3, r7, r3
    53be:	683a      	ldr	r2, [r7, #0]
    53c0:	78d2      	ldrb	r2, [r2, #3]
    53c2:	701a      	strb	r2, [r3, #0]
	uint8_t desc_length = 0;
    53c4:	235f      	movs	r3, #95	; 0x5f
    53c6:	18fb      	adds	r3, r7, r3
    53c8:	2200      	movs	r2, #0
    53ca:	701a      	strb	r2, [r3, #0]
	bool _cdcComposite;
	int ret;
	const uint8_t *desc_addr = 0;
    53cc:	2300      	movs	r3, #0
    53ce:	65bb      	str	r3, [r7, #88]	; 0x58

	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    53d0:	2357      	movs	r3, #87	; 0x57
    53d2:	18fb      	adds	r3, r7, r3
    53d4:	781b      	ldrb	r3, [r3, #0]
    53d6:	2b02      	cmp	r3, #2
    53d8:	d10c      	bne.n	53f4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x44>
	{
		return USBDevice.sendConfiguration(setup.wLength);
    53da:	683b      	ldr	r3, [r7, #0]
    53dc:	88db      	ldrh	r3, [r3, #6]
    53de:	001a      	movs	r2, r3
    53e0:	4b67      	ldr	r3, [pc, #412]	; (5580 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d0>)
    53e2:	0011      	movs	r1, r2
    53e4:	0018      	movs	r0, r3
    53e6:	f7ff ff49 	bl	527c <_ZN14USBDeviceClass17sendConfigurationEm>
    53ea:	0003      	movs	r3, r0
    53ec:	1e5a      	subs	r2, r3, #1
    53ee:	4193      	sbcs	r3, r2
    53f0:	b2db      	uxtb	r3, r3
    53f2:	e0c1      	b.n	5578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}

#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    53f4:	f009 fa20 	bl	e838 <_Z12PluggableUSBv>
    53f8:	0002      	movs	r2, r0
    53fa:	683b      	ldr	r3, [r7, #0]
    53fc:	0019      	movs	r1, r3
    53fe:	0010      	movs	r0, r2
    5400:	f009 f9b4 	bl	e76c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    5404:	0003      	movs	r3, r0
    5406:	653b      	str	r3, [r7, #80]	; 0x50
	if (ret != 0) {
    5408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    540a:	2b00      	cmp	r3, #0
    540c:	d005      	beq.n	541a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x6a>
		return (ret > 0 ? true : false);
    540e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5410:	17da      	asrs	r2, r3, #31
    5412:	1ad3      	subs	r3, r2, r3
    5414:	0fdb      	lsrs	r3, r3, #31
    5416:	b2db      	uxtb	r3, r3
    5418:	e0ae      	b.n	5578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}
#endif

	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    541a:	2357      	movs	r3, #87	; 0x57
    541c:	18fb      	adds	r3, r7, r3
    541e:	781b      	ldrb	r3, [r3, #0]
    5420:	2b01      	cmp	r3, #1
    5422:	d11e      	bne.n	5462 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb2>
	{
		if (setup.wLength == 8)
    5424:	683b      	ldr	r3, [r7, #0]
    5426:	88db      	ldrh	r3, [r3, #6]
    5428:	2b08      	cmp	r3, #8
    542a:	d103      	bne.n	5434 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
			_cdcComposite = 1;
    542c:	235e      	movs	r3, #94	; 0x5e
    542e:	18fb      	adds	r3, r7, r3
    5430:	2201      	movs	r2, #1
    5432:	701a      	strb	r2, [r3, #0]

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;
    5434:	235e      	movs	r3, #94	; 0x5e
    5436:	18fb      	adds	r3, r7, r3
    5438:	781b      	ldrb	r3, [r3, #0]
    543a:	2b00      	cmp	r3, #0
    543c:	d001      	beq.n	5442 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x92>
    543e:	4b51      	ldr	r3, [pc, #324]	; (5584 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d4>)
    5440:	e000      	b.n	5444 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
    5442:	4b51      	ldr	r3, [pc, #324]	; (5588 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d8>)
    5444:	65bb      	str	r3, [r7, #88]	; 0x58

		if (*desc_addr > setup.wLength) {
    5446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5448:	781b      	ldrb	r3, [r3, #0]
    544a:	001a      	movs	r2, r3
    544c:	683b      	ldr	r3, [r7, #0]
    544e:	88db      	ldrh	r3, [r3, #6]
    5450:	429a      	cmp	r2, r3
    5452:	dc00      	bgt.n	5456 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa6>
    5454:	e078      	b.n	5548 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
			desc_length = setup.wLength;
    5456:	683b      	ldr	r3, [r7, #0]
    5458:	88da      	ldrh	r2, [r3, #6]
    545a:	235f      	movs	r3, #95	; 0x5f
    545c:	18fb      	adds	r3, r7, r3
    545e:	701a      	strb	r2, [r3, #0]
    5460:	e072      	b.n	5548 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    5462:	2357      	movs	r3, #87	; 0x57
    5464:	18fb      	adds	r3, r7, r3
    5466:	781b      	ldrb	r3, [r3, #0]
    5468:	2b03      	cmp	r3, #3
    546a:	d000      	beq.n	546e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xbe>
    546c:	e06c      	b.n	5548 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
	{
		if (setup.wValueL == 0) {
    546e:	683b      	ldr	r3, [r7, #0]
    5470:	789b      	ldrb	r3, [r3, #2]
    5472:	2b00      	cmp	r3, #0
    5474:	d109      	bne.n	548a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xda>
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
    5476:	4b45      	ldr	r3, [pc, #276]	; (558c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1dc>)
    5478:	65bb      	str	r3, [r7, #88]	; 0x58
#endif
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
    547a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    547c:	781b      	ldrb	r3, [r3, #0]
    547e:	001a      	movs	r2, r3
    5480:	683b      	ldr	r3, [r7, #0]
    5482:	88db      	ldrh	r3, [r3, #6]
    5484:	429a      	cmp	r2, r3
    5486:	dd5f      	ble.n	5548 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
    5488:	e059      	b.n	553e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x18e>
		else if (setup.wValueL == IPRODUCT) {
    548a:	683b      	ldr	r3, [r7, #0]
    548c:	789b      	ldrb	r3, [r3, #2]
    548e:	2b02      	cmp	r3, #2
    5490:	d109      	bne.n	54a6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xf6>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    5492:	683b      	ldr	r3, [r7, #0]
    5494:	88db      	ldrh	r3, [r3, #6]
    5496:	b2da      	uxtb	r2, r3
    5498:	493d      	ldr	r1, [pc, #244]	; (5590 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e0>)
    549a:	687b      	ldr	r3, [r7, #4]
    549c:	0018      	movs	r0, r3
    549e:	f7ff fded 	bl	507c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    54a2:	0003      	movs	r3, r0
    54a4:	e068      	b.n	5578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
		else if (setup.wValueL == IMANUFACTURER) {
    54a6:	683b      	ldr	r3, [r7, #0]
    54a8:	789b      	ldrb	r3, [r3, #2]
    54aa:	2b01      	cmp	r3, #1
    54ac:	d109      	bne.n	54c2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x112>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    54ae:	683b      	ldr	r3, [r7, #0]
    54b0:	88db      	ldrh	r3, [r3, #6]
    54b2:	b2da      	uxtb	r2, r3
    54b4:	4937      	ldr	r1, [pc, #220]	; (5594 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e4>)
    54b6:	687b      	ldr	r3, [r7, #4]
    54b8:	0018      	movs	r0, r3
    54ba:	f7ff fddf 	bl	507c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    54be:	0003      	movs	r3, r0
    54c0:	e05a      	b.n	5578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
		else if (setup.wValueL == ISERIAL) {
    54c2:	683b      	ldr	r3, [r7, #0]
    54c4:	789b      	ldrb	r3, [r3, #2]
    54c6:	2b03      	cmp	r3, #3
    54c8:	d137      	bne.n	553a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x18a>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    54ca:	4b33      	ldr	r3, [pc, #204]	; (5598 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e8>)
    54cc:	681b      	ldr	r3, [r3, #0]
    54ce:	220c      	movs	r2, #12
    54d0:	18ba      	adds	r2, r7, r2
    54d2:	0011      	movs	r1, r2
    54d4:	0018      	movs	r0, r3
    54d6:	f7ff ff3f 	bl	5358 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    54da:	4b30      	ldr	r3, [pc, #192]	; (559c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1ec>)
    54dc:	681a      	ldr	r2, [r3, #0]
    54de:	230c      	movs	r3, #12
    54e0:	18fb      	adds	r3, r7, r3
    54e2:	3308      	adds	r3, #8
    54e4:	0019      	movs	r1, r3
    54e6:	0010      	movs	r0, r2
    54e8:	f7ff ff36 	bl	5358 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    54ec:	4b2c      	ldr	r3, [pc, #176]	; (55a0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1f0>)
    54ee:	681a      	ldr	r2, [r3, #0]
    54f0:	230c      	movs	r3, #12
    54f2:	18fb      	adds	r3, r7, r3
    54f4:	3310      	adds	r3, #16
    54f6:	0019      	movs	r1, r3
    54f8:	0010      	movs	r0, r2
    54fa:	f7ff ff2d 	bl	5358 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    54fe:	4b29      	ldr	r3, [pc, #164]	; (55a4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1f4>)
    5500:	681a      	ldr	r2, [r3, #0]
    5502:	230c      	movs	r3, #12
    5504:	18fb      	adds	r3, r7, r3
    5506:	3318      	adds	r3, #24
    5508:	0019      	movs	r1, r3
    550a:	0010      	movs	r0, r2
    550c:	f7ff ff24 	bl	5358 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    5510:	f009 f992 	bl	e838 <_Z12PluggableUSBv>
    5514:	0002      	movs	r2, r0
    5516:	230c      	movs	r3, #12
    5518:	18fb      	adds	r3, r7, r3
    551a:	3320      	adds	r3, #32
    551c:	0019      	movs	r1, r3
    551e:	0010      	movs	r0, r2
    5520:	f009 f947 	bl	e7b2 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    5524:	683b      	ldr	r3, [r7, #0]
    5526:	88db      	ldrh	r3, [r3, #6]
    5528:	b2da      	uxtb	r2, r3
    552a:	230c      	movs	r3, #12
    552c:	18f9      	adds	r1, r7, r3
    552e:	687b      	ldr	r3, [r7, #4]
    5530:	0018      	movs	r0, r3
    5532:	f7ff fda3 	bl	507c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    5536:	0003      	movs	r3, r0
    5538:	e01e      	b.n	5578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
			return false;
    553a:	2300      	movs	r3, #0
    553c:	e01c      	b.n	5578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
			desc_length = setup.wLength;
    553e:	683b      	ldr	r3, [r7, #0]
    5540:	88da      	ldrh	r2, [r3, #6]
    5542:	235f      	movs	r3, #95	; 0x5f
    5544:	18fb      	adds	r3, r7, r3
    5546:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}

	if (desc_addr == 0) {
    5548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    554a:	2b00      	cmp	r3, #0
    554c:	d101      	bne.n	5552 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1a2>
		return false;
    554e:	2300      	movs	r3, #0
    5550:	e012      	b.n	5578 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}

	if (desc_length == 0) {
    5552:	235f      	movs	r3, #95	; 0x5f
    5554:	18fb      	adds	r3, r7, r3
    5556:	781b      	ldrb	r3, [r3, #0]
    5558:	2b00      	cmp	r3, #0
    555a:	d104      	bne.n	5566 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1b6>
		desc_length = *desc_addr;
    555c:	235f      	movs	r3, #95	; 0x5f
    555e:	18fb      	adds	r3, r7, r3
    5560:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5562:	7812      	ldrb	r2, [r2, #0]
    5564:	701a      	strb	r2, [r3, #0]
	}

	sendControl(desc_addr, desc_length);
    5566:	235f      	movs	r3, #95	; 0x5f
    5568:	18fb      	adds	r3, r7, r3
    556a:	781a      	ldrb	r2, [r3, #0]
    556c:	6db9      	ldr	r1, [r7, #88]	; 0x58
    556e:	687b      	ldr	r3, [r7, #4]
    5570:	0018      	movs	r0, r3
    5572:	f000 fd41 	bl	5ff8 <_ZN14USBDeviceClass11sendControlEPKvm>

	return true;
    5576:	2301      	movs	r3, #1
}
    5578:	0018      	movs	r0, r3
    557a:	46bd      	mov	sp, r7
    557c:	b018      	add	sp, #96	; 0x60
    557e:	bd80      	pop	{r7, pc}
    5580:	200008f0 	.word	0x200008f0
    5584:	00013490 	.word	0x00013490
    5588:	000134a4 	.word	0x000134a4
    558c:	00013470 	.word	0x00013470
    5590:	00013474 	.word	0x00013474
    5594:	00013484 	.word	0x00013484
    5598:	0080a00c 	.word	0x0080a00c
    559c:	0080a040 	.word	0x0080a040
    55a0:	0080a044 	.word	0x0080a044
    55a4:	0080a048 	.word	0x0080a048

000055a8 <_ZN14USBDeviceClass14handleEndpointEh>:
	usbd.noRunInStandby();
}


void USBDeviceClass::handleEndpoint(uint8_t ep)
{
    55a8:	b580      	push	{r7, lr}
    55aa:	b082      	sub	sp, #8
    55ac:	af00      	add	r7, sp, #0
    55ae:	6078      	str	r0, [r7, #4]
    55b0:	000a      	movs	r2, r1
    55b2:	1cfb      	adds	r3, r7, #3
    55b4:	701a      	strb	r2, [r3, #0]
#if defined(CDC_ENABLED)
	if (ep == CDC_ENDPOINT_IN)
    55b6:	1cfb      	adds	r3, r7, #3
    55b8:	781b      	ldrb	r3, [r3, #0]
    55ba:	2b03      	cmp	r3, #3
    55bc:	d109      	bne.n	55d2 <_ZN14USBDeviceClass14handleEndpointEh+0x2a>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_IN);
    55be:	4b0e      	ldr	r3, [pc, #56]	; (55f8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    55c0:	2103      	movs	r1, #3
    55c2:	0018      	movs	r0, r3
    55c4:	f7ff f826 	bl	4614 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_IN);
    55c8:	4b0b      	ldr	r3, [pc, #44]	; (55f8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    55ca:	2103      	movs	r1, #3
    55cc:	0018      	movs	r0, r3
    55ce:	f7fe ff25 	bl	441c <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
	if (ep == CDC_ENDPOINT_ACM)
    55d2:	1cfb      	adds	r3, r7, #3
    55d4:	781b      	ldrb	r3, [r3, #0]
    55d6:	2b01      	cmp	r3, #1
    55d8:	d109      	bne.n	55ee <_ZN14USBDeviceClass14handleEndpointEh+0x46>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_ACM);
    55da:	4b07      	ldr	r3, [pc, #28]	; (55f8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    55dc:	2101      	movs	r1, #1
    55de:	0018      	movs	r0, r3
    55e0:	f7ff f818 	bl	4614 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_ACM);
    55e4:	4b04      	ldr	r3, [pc, #16]	; (55f8 <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    55e6:	2101      	movs	r1, #1
    55e8:	0018      	movs	r0, r3
    55ea:	f7fe ff17 	bl	441c <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
#endif

#if defined(PLUGGABLE_USB_ENABLED)
	// Empty
#endif
}
    55ee:	46c0      	nop			; (mov r8, r8)
    55f0:	46bd      	mov	sp, r7
    55f2:	b002      	add	sp, #8
    55f4:	bd80      	pop	{r7, pc}
    55f6:	46c0      	nop			; (mov r8, r8)
    55f8:	20000338 	.word	0x20000338

000055fc <_ZN14USBDeviceClass4initEv>:

void USBDeviceClass::init()
{
    55fc:	b580      	push	{r7, lr}
    55fe:	b082      	sub	sp, #8
    5600:	af00      	add	r7, sp, #0
    5602:	6078      	str	r0, [r7, #4]
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    5604:	4b42      	ldr	r3, [pc, #264]	; (5710 <_ZN14USBDeviceClass4initEv+0x114>)
    5606:	2200      	movs	r2, #0
    5608:	701a      	strb	r2, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    560a:	2101      	movs	r1, #1
    560c:	201f      	movs	r0, #31
    560e:	f001 f929 	bl	6864 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    5612:	2101      	movs	r1, #1
    5614:	201f      	movs	r0, #31
    5616:	f001 fa4f 	bl	6ab8 <digitalWrite>
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    561a:	4b3e      	ldr	r3, [pc, #248]	; (5714 <_ZN14USBDeviceClass4initEv+0x118>)
    561c:	2200      	movs	r2, #0
    561e:	701a      	strb	r2, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    5620:	2101      	movs	r1, #1
    5622:	201e      	movs	r0, #30
    5624:	f001 f91e 	bl	6864 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    5628:	2101      	movs	r1, #1
    562a:	201e      	movs	r0, #30
    562c:	f001 fa44 	bl	6ab8 <digitalWrite>
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5630:	4b39      	ldr	r3, [pc, #228]	; (5718 <_ZN14USBDeviceClass4initEv+0x11c>)
    5632:	4a39      	ldr	r2, [pc, #228]	; (5718 <_ZN14USBDeviceClass4initEv+0x11c>)
    5634:	69d2      	ldr	r2, [r2, #28]
    5636:	2120      	movs	r1, #32
    5638:	430a      	orrs	r2, r1
    563a:	61da      	str	r2, [r3, #28]

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    563c:	4937      	ldr	r1, [pc, #220]	; (571c <_ZN14USBDeviceClass4initEv+0x120>)
    563e:	2258      	movs	r2, #88	; 0x58
    5640:	5c8b      	ldrb	r3, [r1, r2]
    5642:	2001      	movs	r0, #1
    5644:	4303      	orrs	r3, r0
    5646:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    5648:	4a34      	ldr	r2, [pc, #208]	; (571c <_ZN14USBDeviceClass4initEv+0x120>)
    564a:	4934      	ldr	r1, [pc, #208]	; (571c <_ZN14USBDeviceClass4initEv+0x120>)
    564c:	233c      	movs	r3, #60	; 0x3c
    564e:	5ccb      	ldrb	r3, [r1, r3]
    5650:	b2db      	uxtb	r3, r3
    5652:	210f      	movs	r1, #15
    5654:	438b      	bics	r3, r1
    5656:	b2d9      	uxtb	r1, r3
    5658:	233c      	movs	r3, #60	; 0x3c
    565a:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    565c:	4a2f      	ldr	r2, [pc, #188]	; (571c <_ZN14USBDeviceClass4initEv+0x120>)
    565e:	492f      	ldr	r1, [pc, #188]	; (571c <_ZN14USBDeviceClass4initEv+0x120>)
    5660:	233c      	movs	r3, #60	; 0x3c
    5662:	5ccb      	ldrb	r3, [r1, r3]
    5664:	b2db      	uxtb	r3, r3
    5666:	2106      	movs	r1, #6
    5668:	430b      	orrs	r3, r1
    566a:	b2d9      	uxtb	r1, r3
    566c:	233c      	movs	r3, #60	; 0x3c
    566e:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    5670:	492a      	ldr	r1, [pc, #168]	; (571c <_ZN14USBDeviceClass4initEv+0x120>)
    5672:	2259      	movs	r2, #89	; 0x59
    5674:	5c8b      	ldrb	r3, [r1, r2]
    5676:	2001      	movs	r0, #1
    5678:	4303      	orrs	r3, r0
    567a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    567c:	4a27      	ldr	r2, [pc, #156]	; (571c <_ZN14USBDeviceClass4initEv+0x120>)
    567e:	4927      	ldr	r1, [pc, #156]	; (571c <_ZN14USBDeviceClass4initEv+0x120>)
    5680:	233c      	movs	r3, #60	; 0x3c
    5682:	5ccb      	ldrb	r3, [r1, r3]
    5684:	b2db      	uxtb	r3, r3
    5686:	210f      	movs	r1, #15
    5688:	400b      	ands	r3, r1
    568a:	b2d9      	uxtb	r1, r3
    568c:	233c      	movs	r3, #60	; 0x3c
    568e:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    5690:	4a22      	ldr	r2, [pc, #136]	; (571c <_ZN14USBDeviceClass4initEv+0x120>)
    5692:	4922      	ldr	r1, [pc, #136]	; (571c <_ZN14USBDeviceClass4initEv+0x120>)
    5694:	233c      	movs	r3, #60	; 0x3c
    5696:	5ccb      	ldrb	r3, [r1, r3]
    5698:	b2db      	uxtb	r3, r3
    569a:	2160      	movs	r1, #96	; 0x60
    569c:	430b      	orrs	r3, r1
    569e:	b2d9      	uxtb	r1, r3
    56a0:	233c      	movs	r3, #60	; 0x3c
    56a2:	54d1      	strb	r1, [r2, r3]

	// Put Generic Clock Generator 0 as source for Generic Clock Multiplexer 6 (USB reference)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    56a4:	4b1e      	ldr	r3, [pc, #120]	; (5720 <_ZN14USBDeviceClass4initEv+0x124>)
    56a6:	4a1f      	ldr	r2, [pc, #124]	; (5724 <_ZN14USBDeviceClass4initEv+0x128>)
    56a8:	805a      	strh	r2, [r3, #2]
	                    GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
	                    GCLK_CLKCTRL_CLKEN;
	while (GCLK->STATUS.bit.SYNCBUSY)
    56aa:	4b1d      	ldr	r3, [pc, #116]	; (5720 <_ZN14USBDeviceClass4initEv+0x124>)
    56ac:	785b      	ldrb	r3, [r3, #1]
    56ae:	061b      	lsls	r3, r3, #24
    56b0:	0fdb      	lsrs	r3, r3, #31
    56b2:	b2db      	uxtb	r3, r3
    56b4:	2b00      	cmp	r3, #0
    56b6:	d000      	beq.n	56ba <_ZN14USBDeviceClass4initEv+0xbe>
    56b8:	e7f7      	b.n	56aa <_ZN14USBDeviceClass4initEv+0xae>
		;

	USB_SetHandler(&UDD_Handler);
    56ba:	4b1b      	ldr	r3, [pc, #108]	; (5728 <_ZN14USBDeviceClass4initEv+0x12c>)
    56bc:	0018      	movs	r0, r3
    56be:	f7fd fb9d 	bl	2dfc <USB_SetHandler>

	// Reset USB Device
	usbd.reset();
    56c2:	4b1a      	ldr	r3, [pc, #104]	; (572c <_ZN14USBDeviceClass4initEv+0x130>)
    56c4:	0018      	movs	r0, r3
    56c6:	f7ff f91f 	bl	4908 <_ZN20USBDevice_SAMD21G18x5resetEv>

	usbd.calibrate();
    56ca:	4b18      	ldr	r3, [pc, #96]	; (572c <_ZN14USBDeviceClass4initEv+0x130>)
    56cc:	0018      	movs	r0, r3
    56ce:	f7ff f93f 	bl	4950 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	usbd.setUSBDeviceMode();
    56d2:	4b16      	ldr	r3, [pc, #88]	; (572c <_ZN14USBDeviceClass4initEv+0x130>)
    56d4:	0018      	movs	r0, r3
    56d6:	f7fe fd2d 	bl	4134 <_ZN20USBDevice_SAMD21G18x16setUSBDeviceModeEv>
	usbd.runInStandby();
    56da:	4b14      	ldr	r3, [pc, #80]	; (572c <_ZN14USBDeviceClass4initEv+0x130>)
    56dc:	0018      	movs	r0, r3
    56de:	f7fe fd37 	bl	4150 <_ZN20USBDevice_SAMD21G18x12runInStandbyEv>
	usbd.setFullSpeed();
    56e2:	4b12      	ldr	r3, [pc, #72]	; (572c <_ZN14USBDeviceClass4initEv+0x130>)
    56e4:	0018      	movs	r0, r3
    56e6:	f7fe fd41 	bl	416c <_ZN20USBDevice_SAMD21G18x12setFullSpeedEv>

	// Configure interrupts
	NVIC_SetPriority((IRQn_Type) USB_IRQn, 0UL);
    56ea:	2100      	movs	r1, #0
    56ec:	2007      	movs	r0, #7
    56ee:	f7fe fc65 	bl	3fbc <__NVIC_SetPriority>
	NVIC_EnableIRQ((IRQn_Type) USB_IRQn);
    56f2:	2007      	movs	r0, #7
    56f4:	f7fe fc48 	bl	3f88 <__NVIC_EnableIRQ>

	usbd.enable();
    56f8:	4b0c      	ldr	r3, [pc, #48]	; (572c <_ZN14USBDeviceClass4initEv+0x130>)
    56fa:	0018      	movs	r0, r3
    56fc:	f7fe fd0c 	bl	4118 <_ZN20USBDevice_SAMD21G18x6enableEv>

	initialized = true;
    5700:	687b      	ldr	r3, [r7, #4]
    5702:	2201      	movs	r2, #1
    5704:	701a      	strb	r2, [r3, #0]
}
    5706:	46c0      	nop			; (mov r8, r8)
    5708:	46bd      	mov	sp, r7
    570a:	b002      	add	sp, #8
    570c:	bd80      	pop	{r7, pc}
    570e:	46c0      	nop			; (mov r8, r8)
    5710:	2000043c 	.word	0x2000043c
    5714:	2000043d 	.word	0x2000043d
    5718:	40000400 	.word	0x40000400
    571c:	41004400 	.word	0x41004400
    5720:	40000c00 	.word	0x40000c00
    5724:	00004006 	.word	0x00004006
    5728:	00005065 	.word	0x00005065
    572c:	20000338 	.word	0x20000338

00005730 <_ZN14USBDeviceClass6attachEv>:

bool USBDeviceClass::attach()
{
    5730:	b580      	push	{r7, lr}
    5732:	b082      	sub	sp, #8
    5734:	af00      	add	r7, sp, #0
    5736:	6078      	str	r0, [r7, #4]
	if (!initialized)
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	781b      	ldrb	r3, [r3, #0]
    573c:	2201      	movs	r2, #1
    573e:	4053      	eors	r3, r2
    5740:	b2db      	uxtb	r3, r3
    5742:	2b00      	cmp	r3, #0
    5744:	d001      	beq.n	574a <_ZN14USBDeviceClass6attachEv+0x1a>
		return false;
    5746:	2300      	movs	r3, #0
    5748:	e00f      	b.n	576a <_ZN14USBDeviceClass6attachEv+0x3a>

	usbd.attach();
    574a:	4b0a      	ldr	r3, [pc, #40]	; (5774 <_ZN14USBDeviceClass6attachEv+0x44>)
    574c:	0018      	movs	r0, r3
    574e:	f7fe fd1b 	bl	4188 <_ZN20USBDevice_SAMD21G18x6attachEv>
	usbd.enableEndOfResetInterrupt();
    5752:	4b08      	ldr	r3, [pc, #32]	; (5774 <_ZN14USBDeviceClass6attachEv+0x44>)
    5754:	0018      	movs	r0, r3
    5756:	f7fe fd3f 	bl	41d8 <_ZN20USBDevice_SAMD21G18x25enableEndOfResetInterruptEv>
	usbd.enableStartOfFrameInterrupt();
    575a:	4b06      	ldr	r3, [pc, #24]	; (5774 <_ZN14USBDeviceClass6attachEv+0x44>)
    575c:	0018      	movs	r0, r3
    575e:	f7fe fd63 	bl	4228 <_ZN20USBDevice_SAMD21G18x27enableStartOfFrameInterruptEv>

	_usbConfiguration = 0;
    5762:	4b05      	ldr	r3, [pc, #20]	; (5778 <_ZN14USBDeviceClass6attachEv+0x48>)
    5764:	2200      	movs	r2, #0
    5766:	601a      	str	r2, [r3, #0]
	return true;
    5768:	2301      	movs	r3, #1
}
    576a:	0018      	movs	r0, r3
    576c:	46bd      	mov	sp, r7
    576e:	b002      	add	sp, #8
    5770:	bd80      	pop	{r7, pc}
    5772:	46c0      	nop			; (mov r8, r8)
    5774:	20000338 	.word	0x20000338
    5778:	20000440 	.word	0x20000440

0000577c <_ZN14USBDeviceClass10setAddressEm>:

void USBDeviceClass::setAddress(uint32_t addr)
{
    577c:	b580      	push	{r7, lr}
    577e:	b082      	sub	sp, #8
    5780:	af00      	add	r7, sp, #0
    5782:	6078      	str	r0, [r7, #4]
    5784:	6039      	str	r1, [r7, #0]
	usbd.epBank1SetByteCount(0, 0);
    5786:	4b1b      	ldr	r3, [pc, #108]	; (57f4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    5788:	2200      	movs	r2, #0
    578a:	2100      	movs	r1, #0
    578c:	0018      	movs	r0, r3
    578e:	f7fe ff8d 	bl	46ac <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
	usbd.epBank1AckTransferComplete(0);
    5792:	4b18      	ldr	r3, [pc, #96]	; (57f4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    5794:	2100      	movs	r1, #0
    5796:	0018      	movs	r0, r3
    5798:	f7fe fe40 	bl	441c <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(0);
    579c:	4b15      	ldr	r3, [pc, #84]	; (57f4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    579e:	2100      	movs	r1, #0
    57a0:	0018      	movs	r0, r3
    57a2:	f7fe ff0a 	bl	45ba <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	// Wait for transfer to complete
	while (!usbd.epBank1IsTransferComplete(0)) {}
    57a6:	4b13      	ldr	r3, [pc, #76]	; (57f4 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    57a8:	2100      	movs	r1, #0
    57aa:	0018      	movs	r0, r3
    57ac:	f7fe fde1 	bl	4372 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    57b0:	0003      	movs	r3, r0
    57b2:	001a      	movs	r2, r3
    57b4:	2301      	movs	r3, #1
    57b6:	4053      	eors	r3, r2
    57b8:	b2db      	uxtb	r3, r3
    57ba:	2b00      	cmp	r3, #0
    57bc:	d000      	beq.n	57c0 <_ZN14USBDeviceClass10setAddressEm+0x44>
    57be:	e7f2      	b.n	57a6 <_ZN14USBDeviceClass10setAddressEm+0x2a>

	// Set USB address to addr
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    57c0:	4a0d      	ldr	r2, [pc, #52]	; (57f8 <_ZN14USBDeviceClass10setAddressEm+0x7c>)
    57c2:	683b      	ldr	r3, [r7, #0]
    57c4:	b2db      	uxtb	r3, r3
    57c6:	1c19      	adds	r1, r3, #0
    57c8:	237f      	movs	r3, #127	; 0x7f
    57ca:	400b      	ands	r3, r1
    57cc:	b2d9      	uxtb	r1, r3
    57ce:	7a93      	ldrb	r3, [r2, #10]
    57d0:	207f      	movs	r0, #127	; 0x7f
    57d2:	4008      	ands	r0, r1
    57d4:	217f      	movs	r1, #127	; 0x7f
    57d6:	438b      	bics	r3, r1
    57d8:	1c19      	adds	r1, r3, #0
    57da:	1c03      	adds	r3, r0, #0
    57dc:	430b      	orrs	r3, r1
    57de:	7293      	strb	r3, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    57e0:	4a05      	ldr	r2, [pc, #20]	; (57f8 <_ZN14USBDeviceClass10setAddressEm+0x7c>)
    57e2:	7a93      	ldrb	r3, [r2, #10]
    57e4:	2180      	movs	r1, #128	; 0x80
    57e6:	4249      	negs	r1, r1
    57e8:	430b      	orrs	r3, r1
    57ea:	7293      	strb	r3, [r2, #10]
}
    57ec:	46c0      	nop			; (mov r8, r8)
    57ee:	46bd      	mov	sp, r7
    57f0:	b002      	add	sp, #8
    57f2:	bd80      	pop	{r7, pc}
    57f4:	20000338 	.word	0x20000338
    57f8:	41005000 	.word	0x41005000

000057fc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
    57fc:	b590      	push	{r4, r7, lr}
    57fe:	b085      	sub	sp, #20
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
    5804:	6039      	str	r1, [r7, #0]
	uint8_t i = setup.wIndex;
    5806:	683b      	ldr	r3, [r7, #0]
    5808:	889a      	ldrh	r2, [r3, #4]
    580a:	230f      	movs	r3, #15
    580c:	18fb      	adds	r3, r7, r3
    580e:	701a      	strb	r2, [r3, #0]

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
    5810:	230f      	movs	r3, #15
    5812:	18fb      	adds	r3, r7, r3
    5814:	781b      	ldrb	r3, [r3, #0]
    5816:	2b00      	cmp	r3, #0
    5818:	d111      	bne.n	583e <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x42>
	{
		if (CDC_Setup(setup) == false) {
    581a:	683b      	ldr	r3, [r7, #0]
    581c:	0018      	movs	r0, r3
    581e:	f008 fe47 	bl	e4b0 <_Z9CDC_SetupR8USBSetup>
    5822:	0003      	movs	r3, r0
    5824:	001a      	movs	r2, r3
    5826:	2301      	movs	r3, #1
    5828:	4053      	eors	r3, r2
    582a:	b2db      	uxtb	r3, r3
    582c:	2b00      	cmp	r3, #0
    582e:	d004      	beq.n	583a <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3e>
			sendZlp(0);
    5830:	687b      	ldr	r3, [r7, #4]
    5832:	2100      	movs	r1, #0
    5834:	0018      	movs	r0, r3
    5836:	f000 fc2f 	bl	6098 <_ZN14USBDeviceClass7sendZlpEm>
		}
		return true;
    583a:	2301      	movs	r3, #1
    583c:	e01b      	b.n	5876 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x7a>
	}
	#endif

	#if defined(PLUGGABLE_USB_ENABLED)
	bool ret = PluggableUSB().setup(setup);
    583e:	f008 fffb 	bl	e838 <_Z12PluggableUSBv>
    5842:	0002      	movs	r2, r0
    5844:	230e      	movs	r3, #14
    5846:	18fc      	adds	r4, r7, r3
    5848:	683b      	ldr	r3, [r7, #0]
    584a:	0019      	movs	r1, r3
    584c:	0010      	movs	r0, r2
    584e:	f008 ffd3 	bl	e7f8 <_ZN13PluggableUSB_5setupER8USBSetup>
    5852:	0003      	movs	r3, r0
    5854:	7023      	strb	r3, [r4, #0]
	if ( ret == false) {
    5856:	230e      	movs	r3, #14
    5858:	18fb      	adds	r3, r7, r3
    585a:	781b      	ldrb	r3, [r3, #0]
    585c:	2201      	movs	r2, #1
    585e:	4053      	eors	r3, r2
    5860:	b2db      	uxtb	r3, r3
    5862:	2b00      	cmp	r3, #0
    5864:	d004      	beq.n	5870 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x74>
		sendZlp(0);
    5866:	687b      	ldr	r3, [r7, #4]
    5868:	2100      	movs	r1, #0
    586a:	0018      	movs	r0, r3
    586c:	f000 fc14 	bl	6098 <_ZN14USBDeviceClass7sendZlpEm>
	}
	return ret;
    5870:	230e      	movs	r3, #14
    5872:	18fb      	adds	r3, r7, r3
    5874:	781b      	ldrb	r3, [r3, #0]
	#endif

	return false;
}
    5876:	0018      	movs	r0, r3
    5878:	46bd      	mov	sp, r7
    587a:	b005      	add	sp, #20
    587c:	bd90      	pop	{r4, r7, pc}
	...

00005880 <_ZN14USBDeviceClass13initEndpointsEv>:
	0,
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
    5880:	b580      	push	{r7, lr}
    5882:	b084      	sub	sp, #16
    5884:	af00      	add	r7, sp, #0
    5886:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5888:	230f      	movs	r3, #15
    588a:	18fb      	adds	r3, r7, r3
    588c:	2201      	movs	r2, #1
    588e:	701a      	strb	r2, [r3, #0]
    5890:	230f      	movs	r3, #15
    5892:	18fb      	adds	r3, r7, r3
    5894:	781b      	ldrb	r3, [r3, #0]
    5896:	2b27      	cmp	r3, #39	; 0x27
    5898:	d81c      	bhi.n	58d4 <_ZN14USBDeviceClass13initEndpointsEv+0x54>
    589a:	230f      	movs	r3, #15
    589c:	18fb      	adds	r3, r7, r3
    589e:	781a      	ldrb	r2, [r3, #0]
    58a0:	4b0e      	ldr	r3, [pc, #56]	; (58dc <_ZN14USBDeviceClass13initEndpointsEv+0x5c>)
    58a2:	0092      	lsls	r2, r2, #2
    58a4:	58d3      	ldr	r3, [r2, r3]
    58a6:	2b00      	cmp	r3, #0
    58a8:	d014      	beq.n	58d4 <_ZN14USBDeviceClass13initEndpointsEv+0x54>
		initEP(i, EndPoints[i]);
    58aa:	230f      	movs	r3, #15
    58ac:	18fb      	adds	r3, r7, r3
    58ae:	7819      	ldrb	r1, [r3, #0]
    58b0:	230f      	movs	r3, #15
    58b2:	18fb      	adds	r3, r7, r3
    58b4:	781a      	ldrb	r2, [r3, #0]
    58b6:	4b09      	ldr	r3, [pc, #36]	; (58dc <_ZN14USBDeviceClass13initEndpointsEv+0x5c>)
    58b8:	0092      	lsls	r2, r2, #2
    58ba:	58d2      	ldr	r2, [r2, r3]
    58bc:	687b      	ldr	r3, [r7, #4]
    58be:	0018      	movs	r0, r3
    58c0:	f000 f80e 	bl	58e0 <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    58c4:	230f      	movs	r3, #15
    58c6:	18fb      	adds	r3, r7, r3
    58c8:	781a      	ldrb	r2, [r3, #0]
    58ca:	230f      	movs	r3, #15
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	3201      	adds	r2, #1
    58d0:	701a      	strb	r2, [r3, #0]
    58d2:	e7dd      	b.n	5890 <_ZN14USBDeviceClass13initEndpointsEv+0x10>
	}
}
    58d4:	46c0      	nop			; (mov r8, r8)
    58d6:	46bd      	mov	sp, r7
    58d8:	b004      	add	sp, #16
    58da:	bd80      	pop	{r7, pc}
    58dc:	20000020 	.word	0x20000020

000058e0 <_ZN14USBDeviceClass6initEPEmm>:

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
{
    58e0:	b590      	push	{r4, r7, lr}
    58e2:	b085      	sub	sp, #20
    58e4:	af00      	add	r7, sp, #0
    58e6:	60f8      	str	r0, [r7, #12]
    58e8:	60b9      	str	r1, [r7, #8]
    58ea:	607a      	str	r2, [r7, #4]
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    58ec:	687b      	ldr	r3, [r7, #4]
    58ee:	2b83      	cmp	r3, #131	; 0x83
    58f0:	d118      	bne.n	5924 <_ZN14USBDeviceClass6initEPEmm+0x44>
	{
		usbd.epBank1SetSize(ep, 64);
    58f2:	68bb      	ldr	r3, [r7, #8]
    58f4:	b2d9      	uxtb	r1, r3
    58f6:	4b4e      	ldr	r3, [pc, #312]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    58f8:	2240      	movs	r2, #64	; 0x40
    58fa:	0018      	movs	r0, r3
    58fc:	f7fe ff9a 	bl	4834 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5900:	68bb      	ldr	r3, [r7, #8]
    5902:	b2d9      	uxtb	r1, r3
    5904:	68bb      	ldr	r3, [r7, #8]
    5906:	019a      	lsls	r2, r3, #6
    5908:	4b4a      	ldr	r3, [pc, #296]	; (5a34 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    590a:	18d2      	adds	r2, r2, r3
    590c:	4b48      	ldr	r3, [pc, #288]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    590e:	0018      	movs	r0, r3
    5910:	f7fe ff4e 	bl	47b0 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
    5914:	68bb      	ldr	r3, [r7, #8]
    5916:	b2d9      	uxtb	r1, r3
    5918:	4b45      	ldr	r3, [pc, #276]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    591a:	2204      	movs	r2, #4
    591c:	0018      	movs	r0, r3
    591e:	f7fe fcb5 	bl	428c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    5922:	e081      	b.n	5a28 <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	2b02      	cmp	r3, #2
    5928:	d116      	bne.n	5958 <_ZN14USBDeviceClass6initEPEmm+0x78>
		if (epHandlers[ep] == NULL) {
    592a:	4b43      	ldr	r3, [pc, #268]	; (5a38 <_ZN14USBDeviceClass6initEPEmm+0x158>)
    592c:	68ba      	ldr	r2, [r7, #8]
    592e:	0092      	lsls	r2, r2, #2
    5930:	58d3      	ldr	r3, [r2, r3]
    5932:	2b00      	cmp	r3, #0
    5934:	d178      	bne.n	5a28 <_ZN14USBDeviceClass6initEPEmm+0x148>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    5936:	2038      	movs	r0, #56	; 0x38
    5938:	f007 fed2 	bl	d6e0 <_Znwj>
    593c:	0003      	movs	r3, r0
    593e:	001c      	movs	r4, r3
    5940:	2380      	movs	r3, #128	; 0x80
    5942:	005b      	lsls	r3, r3, #1
    5944:	68ba      	ldr	r2, [r7, #8]
    5946:	493a      	ldr	r1, [pc, #232]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5948:	0020      	movs	r0, r4
    594a:	f7ff f8af 	bl	4aac <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm>
    594e:	4b3a      	ldr	r3, [pc, #232]	; (5a38 <_ZN14USBDeviceClass6initEPEmm+0x158>)
    5950:	68ba      	ldr	r2, [r7, #8]
    5952:	0092      	lsls	r2, r2, #2
    5954:	50d4      	str	r4, [r2, r3]
}
    5956:	e067      	b.n	5a28 <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    5958:	687b      	ldr	r3, [r7, #4]
    595a:	2b82      	cmp	r3, #130	; 0x82
    595c:	d11f      	bne.n	599e <_ZN14USBDeviceClass6initEPEmm+0xbe>
		usbd.epBank1SetSize(ep, 64);
    595e:	68bb      	ldr	r3, [r7, #8]
    5960:	b2d9      	uxtb	r1, r3
    5962:	4b33      	ldr	r3, [pc, #204]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5964:	2240      	movs	r2, #64	; 0x40
    5966:	0018      	movs	r0, r3
    5968:	f7fe ff64 	bl	4834 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    596c:	68bb      	ldr	r3, [r7, #8]
    596e:	b2d9      	uxtb	r1, r3
    5970:	68bb      	ldr	r3, [r7, #8]
    5972:	019a      	lsls	r2, r3, #6
    5974:	4b2f      	ldr	r3, [pc, #188]	; (5a34 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    5976:	18d2      	adds	r2, r2, r3
    5978:	4b2d      	ldr	r3, [pc, #180]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    597a:	0018      	movs	r0, r3
    597c:	f7fe ff18 	bl	47b0 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1ResetReady(ep);
    5980:	68bb      	ldr	r3, [r7, #8]
    5982:	b2da      	uxtb	r2, r3
    5984:	4b2a      	ldr	r3, [pc, #168]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5986:	0011      	movs	r1, r2
    5988:	0018      	movs	r0, r3
    598a:	f7fe fe43 	bl	4614 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1SetType(ep, 3); // BULK IN
    598e:	68bb      	ldr	r3, [r7, #8]
    5990:	b2d9      	uxtb	r1, r3
    5992:	4b27      	ldr	r3, [pc, #156]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5994:	2203      	movs	r2, #3
    5996:	0018      	movs	r0, r3
    5998:	f7fe fc78 	bl	428c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
}
    599c:	e044      	b.n	5a28 <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    599e:	687b      	ldr	r3, [r7, #4]
    59a0:	2b00      	cmp	r3, #0
    59a2:	d141      	bne.n	5a28 <_ZN14USBDeviceClass6initEPEmm+0x148>
		usbd.epBank0SetSize(ep, 64);
    59a4:	68bb      	ldr	r3, [r7, #8]
    59a6:	b2d9      	uxtb	r1, r3
    59a8:	4b21      	ldr	r3, [pc, #132]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59aa:	2240      	movs	r2, #64	; 0x40
    59ac:	0018      	movs	r0, r3
    59ae:	f7fe ff15 	bl	47dc <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    59b2:	68bb      	ldr	r3, [r7, #8]
    59b4:	b2d9      	uxtb	r1, r3
    59b6:	68bb      	ldr	r3, [r7, #8]
    59b8:	019a      	lsls	r2, r3, #6
    59ba:	4b20      	ldr	r3, [pc, #128]	; (5a3c <_ZN14USBDeviceClass6initEPEmm+0x15c>)
    59bc:	18d2      	adds	r2, r2, r3
    59be:	4b1c      	ldr	r3, [pc, #112]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59c0:	0018      	movs	r0, r3
    59c2:	f7fe fedf 	bl	4784 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
		usbd.epBank0SetType(ep, 1); // CONTROL OUT / SETUP
    59c6:	68bb      	ldr	r3, [r7, #8]
    59c8:	b2d9      	uxtb	r1, r3
    59ca:	4b19      	ldr	r3, [pc, #100]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59cc:	2201      	movs	r2, #1
    59ce:	0018      	movs	r0, r3
    59d0:	f7fe fc38 	bl	4244 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>
		usbd.epBank1SetSize(ep, 64);
    59d4:	68bb      	ldr	r3, [r7, #8]
    59d6:	b2d9      	uxtb	r1, r3
    59d8:	4b15      	ldr	r3, [pc, #84]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59da:	2240      	movs	r2, #64	; 0x40
    59dc:	0018      	movs	r0, r3
    59de:	f7fe ff29 	bl	4834 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[0]);
    59e2:	68bb      	ldr	r3, [r7, #8]
    59e4:	b2d9      	uxtb	r1, r3
    59e6:	4a13      	ldr	r2, [pc, #76]	; (5a34 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    59e8:	4b11      	ldr	r3, [pc, #68]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59ea:	0018      	movs	r0, r3
    59ec:	f7fe fee0 	bl	47b0 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetType(ep, 1); // CONTROL IN
    59f0:	68bb      	ldr	r3, [r7, #8]
    59f2:	b2d9      	uxtb	r1, r3
    59f4:	4b0e      	ldr	r3, [pc, #56]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59f6:	2201      	movs	r2, #1
    59f8:	0018      	movs	r0, r3
    59fa:	f7fe fc47 	bl	428c <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
		usbd.epBank0SetMultiPacketSize(ep, 64);
    59fe:	68bb      	ldr	r3, [r7, #8]
    5a00:	b2d9      	uxtb	r1, r3
    5a02:	4b0b      	ldr	r3, [pc, #44]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a04:	2240      	movs	r2, #64	; 0x40
    5a06:	0018      	movs	r0, r3
    5a08:	f7fe fe72 	bl	46f0 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
		usbd.epBank0SetByteCount(ep, 0);
    5a0c:	68bb      	ldr	r3, [r7, #8]
    5a0e:	b2d9      	uxtb	r1, r3
    5a10:	4b07      	ldr	r3, [pc, #28]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a12:	2200      	movs	r2, #0
    5a14:	0018      	movs	r0, r3
    5a16:	f7fe fe28 	bl	466a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
		usbd.epBank0SetReady(ep);
    5a1a:	68bb      	ldr	r3, [r7, #8]
    5a1c:	b2da      	uxtb	r2, r3
    5a1e:	4b04      	ldr	r3, [pc, #16]	; (5a30 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a20:	0011      	movs	r1, r2
    5a22:	0018      	movs	r0, r3
    5a24:	f7fe fdb3 	bl	458e <_ZN20USBDevice_SAMD21G18x15epBank0SetReadyEh>
}
    5a28:	46c0      	nop			; (mov r8, r8)
    5a2a:	46bd      	mov	sp, r7
    5a2c:	b005      	add	sp, #20
    5a2e:	bd90      	pop	{r4, r7, pc}
    5a30:	20000338 	.word	0x20000338
    5a34:	20000608 	.word	0x20000608
    5a38:	200007c8 	.word	0x200007c8
    5a3c:	20000448 	.word	0x20000448

00005a40 <_ZN14USBDeviceClass5flushEm>:

void USBDeviceClass::flush(uint32_t ep)
{
    5a40:	b580      	push	{r7, lr}
    5a42:	b082      	sub	sp, #8
    5a44:	af00      	add	r7, sp, #0
    5a46:	6078      	str	r0, [r7, #4]
    5a48:	6039      	str	r1, [r7, #0]
	if (available(ep)) {
    5a4a:	683a      	ldr	r2, [r7, #0]
    5a4c:	687b      	ldr	r3, [r7, #4]
    5a4e:	0011      	movs	r1, r2
    5a50:	0018      	movs	r0, r3
    5a52:	f000 f867 	bl	5b24 <_ZN14USBDeviceClass9availableEm>
    5a56:	0003      	movs	r3, r0
    5a58:	1e5a      	subs	r2, r3, #1
    5a5a:	4193      	sbcs	r3, r2
    5a5c:	b2db      	uxtb	r3, r3
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d00d      	beq.n	5a7e <_ZN14USBDeviceClass5flushEm+0x3e>
		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    5a62:	683b      	ldr	r3, [r7, #0]
    5a64:	b2da      	uxtb	r2, r3
    5a66:	4b08      	ldr	r3, [pc, #32]	; (5a88 <_ZN14USBDeviceClass5flushEm+0x48>)
    5a68:	0011      	movs	r1, r2
    5a6a:	0018      	movs	r0, r3
    5a6c:	f7fe fda5 	bl	45ba <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    5a70:	683b      	ldr	r3, [r7, #0]
    5a72:	b2da      	uxtb	r2, r3
    5a74:	4b04      	ldr	r3, [pc, #16]	; (5a88 <_ZN14USBDeviceClass5flushEm+0x48>)
    5a76:	0011      	movs	r1, r2
    5a78:	0018      	movs	r0, r3
    5a7a:	f7fe fccf 	bl	441c <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
}
    5a7e:	46c0      	nop			; (mov r8, r8)
    5a80:	46bd      	mov	sp, r7
    5a82:	b002      	add	sp, #8
    5a84:	bd80      	pop	{r7, pc}
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	20000338 	.word	0x20000338

00005a8c <_ZN14USBDeviceClass5stallEm>:

void USBDeviceClass::stall(uint32_t ep)
{
    5a8c:	b580      	push	{r7, lr}
    5a8e:	b082      	sub	sp, #8
    5a90:	af00      	add	r7, sp, #0
    5a92:	6078      	str	r0, [r7, #4]
    5a94:	6039      	str	r1, [r7, #0]
	// TODO: test
	// TODO: use .bit. notation

	// Stall endpoint
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    5a96:	4a06      	ldr	r2, [pc, #24]	; (5ab0 <_ZN14USBDeviceClass5stallEm+0x24>)
    5a98:	683b      	ldr	r3, [r7, #0]
    5a9a:	3308      	adds	r3, #8
    5a9c:	015b      	lsls	r3, r3, #5
    5a9e:	18d3      	adds	r3, r2, r3
    5aa0:	3305      	adds	r3, #5
    5aa2:	2220      	movs	r2, #32
    5aa4:	701a      	strb	r2, [r3, #0]
}
    5aa6:	46c0      	nop			; (mov r8, r8)
    5aa8:	46bd      	mov	sp, r7
    5aaa:	b002      	add	sp, #8
    5aac:	bd80      	pop	{r7, pc}
    5aae:	46c0      	nop			; (mov r8, r8)
    5ab0:	41005000 	.word	0x41005000

00005ab4 <_ZN14USBDeviceClass11recvControlEPvm>:
	return f != USB->DEVICE.FNUM.bit.FNUM;
}


uint32_t USBDeviceClass::recvControl(void *_data, uint32_t len)
{
    5ab4:	b580      	push	{r7, lr}
    5ab6:	b088      	sub	sp, #32
    5ab8:	af00      	add	r7, sp, #0
    5aba:	60f8      	str	r0, [r7, #12]
    5abc:	60b9      	str	r1, [r7, #8]
    5abe:	607a      	str	r2, [r7, #4]
	uint8_t *data = reinterpret_cast<uint8_t *>(_data);
    5ac0:	68bb      	ldr	r3, [r7, #8]
    5ac2:	617b      	str	r3, [r7, #20]

	// The RAM Buffer is empty: we can receive data
	usbd.epBank0ResetReady(0);
    5ac4:	4b15      	ldr	r3, [pc, #84]	; (5b1c <_ZN14USBDeviceClass11recvControlEPvm+0x68>)
    5ac6:	2100      	movs	r1, #0
    5ac8:	0018      	movs	r0, r3
    5aca:	f7fe fd8d 	bl	45e8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

	//usbd.epBank0AckSetupReceived(0);
	uint32_t read = armRecvCtrlOUT(0);
    5ace:	68fb      	ldr	r3, [r7, #12]
    5ad0:	2100      	movs	r1, #0
    5ad2:	0018      	movs	r0, r3
    5ad4:	f000 f904 	bl	5ce0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    5ad8:	0003      	movs	r3, r0
    5ada:	61fb      	str	r3, [r7, #28]
	if (read > len)
    5adc:	69fa      	ldr	r2, [r7, #28]
    5ade:	687b      	ldr	r3, [r7, #4]
    5ae0:	429a      	cmp	r2, r3
    5ae2:	d901      	bls.n	5ae8 <_ZN14USBDeviceClass11recvControlEPvm+0x34>
		read = len;
    5ae4:	687b      	ldr	r3, [r7, #4]
    5ae6:	61fb      	str	r3, [r7, #28]
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
    5ae8:	4b0d      	ldr	r3, [pc, #52]	; (5b20 <_ZN14USBDeviceClass11recvControlEPvm+0x6c>)
    5aea:	613b      	str	r3, [r7, #16]
	for (uint32_t i=0; i<len; i++) {
    5aec:	2300      	movs	r3, #0
    5aee:	61bb      	str	r3, [r7, #24]
    5af0:	69ba      	ldr	r2, [r7, #24]
    5af2:	687b      	ldr	r3, [r7, #4]
    5af4:	429a      	cmp	r2, r3
    5af6:	d20b      	bcs.n	5b10 <_ZN14USBDeviceClass11recvControlEPvm+0x5c>
		data[i] = buffer[i];
    5af8:	697a      	ldr	r2, [r7, #20]
    5afa:	69bb      	ldr	r3, [r7, #24]
    5afc:	18d3      	adds	r3, r2, r3
    5afe:	6939      	ldr	r1, [r7, #16]
    5b00:	69ba      	ldr	r2, [r7, #24]
    5b02:	188a      	adds	r2, r1, r2
    5b04:	7812      	ldrb	r2, [r2, #0]
    5b06:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i<len; i++) {
    5b08:	69bb      	ldr	r3, [r7, #24]
    5b0a:	3301      	adds	r3, #1
    5b0c:	61bb      	str	r3, [r7, #24]
    5b0e:	e7ef      	b.n	5af0 <_ZN14USBDeviceClass11recvControlEPvm+0x3c>
	}

	return read;
    5b10:	69fb      	ldr	r3, [r7, #28]
}
    5b12:	0018      	movs	r0, r3
    5b14:	46bd      	mov	sp, r7
    5b16:	b008      	add	sp, #32
    5b18:	bd80      	pop	{r7, pc}
    5b1a:	46c0      	nop			; (mov r8, r8)
    5b1c:	20000338 	.word	0x20000338
    5b20:	20000448 	.word	0x20000448

00005b24 <_ZN14USBDeviceClass9availableEm>:

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
    5b24:	b580      	push	{r7, lr}
    5b26:	b082      	sub	sp, #8
    5b28:	af00      	add	r7, sp, #0
    5b2a:	6078      	str	r0, [r7, #4]
    5b2c:	6039      	str	r1, [r7, #0]
	if (epHandlers[ep]) {
    5b2e:	4b10      	ldr	r3, [pc, #64]	; (5b70 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5b30:	683a      	ldr	r2, [r7, #0]
    5b32:	0092      	lsls	r2, r2, #2
    5b34:	58d3      	ldr	r3, [r2, r3]
    5b36:	2b00      	cmp	r3, #0
    5b38:	d00e      	beq.n	5b58 <_ZN14USBDeviceClass9availableEm+0x34>
		return epHandlers[ep]->available();
    5b3a:	4b0d      	ldr	r3, [pc, #52]	; (5b70 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5b3c:	683a      	ldr	r2, [r7, #0]
    5b3e:	0092      	lsls	r2, r2, #2
    5b40:	58d3      	ldr	r3, [r2, r3]
    5b42:	681b      	ldr	r3, [r3, #0]
    5b44:	3308      	adds	r3, #8
    5b46:	681b      	ldr	r3, [r3, #0]
    5b48:	4a09      	ldr	r2, [pc, #36]	; (5b70 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5b4a:	6839      	ldr	r1, [r7, #0]
    5b4c:	0089      	lsls	r1, r1, #2
    5b4e:	588a      	ldr	r2, [r1, r2]
    5b50:	0010      	movs	r0, r2
    5b52:	4798      	blx	r3
    5b54:	0003      	movs	r3, r0
    5b56:	e007      	b.n	5b68 <_ZN14USBDeviceClass9availableEm+0x44>
	} else {
		return usbd.epBank0ByteCount(ep);
    5b58:	683b      	ldr	r3, [r7, #0]
    5b5a:	b2da      	uxtb	r2, r3
    5b5c:	4b05      	ldr	r3, [pc, #20]	; (5b74 <_ZN14USBDeviceClass9availableEm+0x50>)
    5b5e:	0011      	movs	r1, r2
    5b60:	0018      	movs	r0, r3
    5b62:	f7fe fd6e 	bl	4642 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5b66:	0003      	movs	r3, r0
	}
}
    5b68:	0018      	movs	r0, r3
    5b6a:	46bd      	mov	sp, r7
    5b6c:	b002      	add	sp, #8
    5b6e:	bd80      	pop	{r7, pc}
    5b70:	200007c8 	.word	0x200007c8
    5b74:	20000338 	.word	0x20000338

00005b78 <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    5b78:	b580      	push	{r7, lr}
    5b7a:	b084      	sub	sp, #16
    5b7c:	af00      	add	r7, sp, #0
    5b7e:	60f8      	str	r0, [r7, #12]
    5b80:	60b9      	str	r1, [r7, #8]
    5b82:	607a      	str	r2, [r7, #4]
    5b84:	603b      	str	r3, [r7, #0]
	if (!_usbConfiguration)
    5b86:	4b42      	ldr	r3, [pc, #264]	; (5c90 <_ZN14USBDeviceClass4recvEmPvm+0x118>)
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	425a      	negs	r2, r3
    5b8c:	4153      	adcs	r3, r2
    5b8e:	b2db      	uxtb	r3, r3
    5b90:	2b00      	cmp	r3, #0
    5b92:	d002      	beq.n	5b9a <_ZN14USBDeviceClass4recvEmPvm+0x22>
		return -1;
    5b94:	2301      	movs	r3, #1
    5b96:	425b      	negs	r3, r3
    5b98:	e076      	b.n	5c88 <_ZN14USBDeviceClass4recvEmPvm+0x110>

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    5b9a:	4b3e      	ldr	r3, [pc, #248]	; (5c94 <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
    5b9c:	781b      	ldrb	r3, [r3, #0]
    5b9e:	b2db      	uxtb	r3, r3
    5ba0:	425a      	negs	r2, r3
    5ba2:	4153      	adcs	r3, r2
    5ba4:	b2db      	uxtb	r3, r3
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d003      	beq.n	5bb2 <_ZN14USBDeviceClass4recvEmPvm+0x3a>
		digitalWrite(PIN_LED_RXL, LOW);
    5baa:	2100      	movs	r1, #0
    5bac:	201e      	movs	r0, #30
    5bae:	f000 ff83 	bl	6ab8 <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    5bb2:	4b38      	ldr	r3, [pc, #224]	; (5c94 <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
    5bb4:	2264      	movs	r2, #100	; 0x64
    5bb6:	701a      	strb	r2, [r3, #0]
#endif

	if (epHandlers[ep]) {
    5bb8:	4b37      	ldr	r3, [pc, #220]	; (5c98 <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5bba:	68ba      	ldr	r2, [r7, #8]
    5bbc:	0092      	lsls	r2, r2, #2
    5bbe:	58d3      	ldr	r3, [r2, r3]
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d00f      	beq.n	5be4 <_ZN14USBDeviceClass4recvEmPvm+0x6c>
		return epHandlers[ep]->recv(_data, len);
    5bc4:	4b34      	ldr	r3, [pc, #208]	; (5c98 <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5bc6:	68ba      	ldr	r2, [r7, #8]
    5bc8:	0092      	lsls	r2, r2, #2
    5bca:	58d3      	ldr	r3, [r2, r3]
    5bcc:	681b      	ldr	r3, [r3, #0]
    5bce:	3304      	adds	r3, #4
    5bd0:	681b      	ldr	r3, [r3, #0]
    5bd2:	4a31      	ldr	r2, [pc, #196]	; (5c98 <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5bd4:	68b9      	ldr	r1, [r7, #8]
    5bd6:	0089      	lsls	r1, r1, #2
    5bd8:	5888      	ldr	r0, [r1, r2]
    5bda:	683a      	ldr	r2, [r7, #0]
    5bdc:	6879      	ldr	r1, [r7, #4]
    5bde:	4798      	blx	r3
    5be0:	0003      	movs	r3, r0
    5be2:	e051      	b.n	5c88 <_ZN14USBDeviceClass4recvEmPvm+0x110>
	}

	if (available(ep) < len)
    5be4:	68ba      	ldr	r2, [r7, #8]
    5be6:	68fb      	ldr	r3, [r7, #12]
    5be8:	0011      	movs	r1, r2
    5bea:	0018      	movs	r0, r3
    5bec:	f7ff ff9a 	bl	5b24 <_ZN14USBDeviceClass9availableEm>
    5bf0:	0002      	movs	r2, r0
    5bf2:	683b      	ldr	r3, [r7, #0]
    5bf4:	429a      	cmp	r2, r3
    5bf6:	419b      	sbcs	r3, r3
    5bf8:	425b      	negs	r3, r3
    5bfa:	b2db      	uxtb	r3, r3
    5bfc:	2b00      	cmp	r3, #0
    5bfe:	d007      	beq.n	5c10 <_ZN14USBDeviceClass4recvEmPvm+0x98>
		len = available(ep);
    5c00:	68ba      	ldr	r2, [r7, #8]
    5c02:	68fb      	ldr	r3, [r7, #12]
    5c04:	0011      	movs	r1, r2
    5c06:	0018      	movs	r0, r3
    5c08:	f7ff ff8c 	bl	5b24 <_ZN14USBDeviceClass9availableEm>
    5c0c:	0003      	movs	r3, r0
    5c0e:	603b      	str	r3, [r7, #0]

	armRecv(ep);
    5c10:	68ba      	ldr	r2, [r7, #8]
    5c12:	68fb      	ldr	r3, [r7, #12]
    5c14:	0011      	movs	r1, r2
    5c16:	0018      	movs	r0, r3
    5c18:	f000 f8b6 	bl	5d88 <_ZN14USBDeviceClass7armRecvEm>

	usbd.epBank0DisableTransferComplete(ep);
    5c1c:	68bb      	ldr	r3, [r7, #8]
    5c1e:	b2da      	uxtb	r2, r3
    5c20:	4b1e      	ldr	r3, [pc, #120]	; (5c9c <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5c22:	0011      	movs	r1, r2
    5c24:	0018      	movs	r0, r3
    5c26:	f7fe fc6e 	bl	4506 <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>

	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    5c2a:	68bb      	ldr	r3, [r7, #8]
    5c2c:	019a      	lsls	r2, r3, #6
    5c2e:	4b1c      	ldr	r3, [pc, #112]	; (5ca0 <_ZN14USBDeviceClass4recvEmPvm+0x128>)
    5c30:	18d1      	adds	r1, r2, r3
    5c32:	683a      	ldr	r2, [r7, #0]
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	0018      	movs	r0, r3
    5c38:	f00a fdfb 	bl	10832 <memcpy>

	// release empty buffer
	if (len && !available(ep)) {
    5c3c:	683b      	ldr	r3, [r7, #0]
    5c3e:	2b00      	cmp	r3, #0
    5c40:	d009      	beq.n	5c56 <_ZN14USBDeviceClass4recvEmPvm+0xde>
    5c42:	68ba      	ldr	r2, [r7, #8]
    5c44:	68fb      	ldr	r3, [r7, #12]
    5c46:	0011      	movs	r1, r2
    5c48:	0018      	movs	r0, r3
    5c4a:	f7ff ff6b 	bl	5b24 <_ZN14USBDeviceClass9availableEm>
    5c4e:	1e03      	subs	r3, r0, #0
    5c50:	d101      	bne.n	5c56 <_ZN14USBDeviceClass4recvEmPvm+0xde>
    5c52:	2301      	movs	r3, #1
    5c54:	e000      	b.n	5c58 <_ZN14USBDeviceClass4recvEmPvm+0xe0>
    5c56:	2300      	movs	r3, #0
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d014      	beq.n	5c86 <_ZN14USBDeviceClass4recvEmPvm+0x10e>
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(ep);
    5c5c:	68bb      	ldr	r3, [r7, #8]
    5c5e:	b2da      	uxtb	r2, r3
    5c60:	4b0e      	ldr	r3, [pc, #56]	; (5c9c <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5c62:	0011      	movs	r1, r2
    5c64:	0018      	movs	r0, r3
    5c66:	f7fe fcbf 	bl	45e8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		// Clear Transfer complete 0 flag
		usbd.epBank0AckTransferComplete(ep);
    5c6a:	68bb      	ldr	r3, [r7, #8]
    5c6c:	b2da      	uxtb	r2, r3
    5c6e:	4b0b      	ldr	r3, [pc, #44]	; (5c9c <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5c70:	0011      	movs	r1, r2
    5c72:	0018      	movs	r0, r3
    5c74:	f7fe fbbd 	bl	43f2 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>

		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
    5c78:	68bb      	ldr	r3, [r7, #8]
    5c7a:	b2da      	uxtb	r2, r3
    5c7c:	4b07      	ldr	r3, [pc, #28]	; (5c9c <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5c7e:	0011      	movs	r1, r2
    5c80:	0018      	movs	r0, r3
    5c82:	f7fe fbf8 	bl	4476 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
	}

	return len;
    5c86:	683b      	ldr	r3, [r7, #0]
}
    5c88:	0018      	movs	r0, r3
    5c8a:	46bd      	mov	sp, r7
    5c8c:	b004      	add	sp, #16
    5c8e:	bd80      	pop	{r7, pc}
    5c90:	20000440 	.word	0x20000440
    5c94:	2000043d 	.word	0x2000043d
    5c98:	200007c8 	.word	0x200007c8
    5c9c:	20000338 	.word	0x20000338
    5ca0:	20000448 	.word	0x20000448

00005ca4 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    5ca4:	b580      	push	{r7, lr}
    5ca6:	b084      	sub	sp, #16
    5ca8:	af00      	add	r7, sp, #0
    5caa:	6078      	str	r0, [r7, #4]
    5cac:	6039      	str	r1, [r7, #0]
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    5cae:	230f      	movs	r3, #15
    5cb0:	18fa      	adds	r2, r7, r3
    5cb2:	6839      	ldr	r1, [r7, #0]
    5cb4:	6878      	ldr	r0, [r7, #4]
    5cb6:	2301      	movs	r3, #1
    5cb8:	f7ff ff5e 	bl	5b78 <_ZN14USBDeviceClass4recvEmPvm>
    5cbc:	0003      	movs	r3, r0
    5cbe:	3b01      	subs	r3, #1
    5cc0:	1e5a      	subs	r2, r3, #1
    5cc2:	4193      	sbcs	r3, r2
    5cc4:	b2db      	uxtb	r3, r3
    5cc6:	2b00      	cmp	r3, #0
    5cc8:	d002      	beq.n	5cd0 <_ZN14USBDeviceClass4recvEm+0x2c>
		return -1;
    5cca:	2301      	movs	r3, #1
    5ccc:	425b      	negs	r3, r3
    5cce:	e002      	b.n	5cd6 <_ZN14USBDeviceClass4recvEm+0x32>
	} else {
		return c;
    5cd0:	230f      	movs	r3, #15
    5cd2:	18fb      	adds	r3, r7, r3
    5cd4:	781b      	ldrb	r3, [r3, #0]
	}
}
    5cd6:	0018      	movs	r0, r3
    5cd8:	46bd      	mov	sp, r7
    5cda:	b004      	add	sp, #16
    5cdc:	bd80      	pop	{r7, pc}
	...

00005ce0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    5ce0:	b580      	push	{r7, lr}
    5ce2:	b082      	sub	sp, #8
    5ce4:	af00      	add	r7, sp, #0
    5ce6:	6078      	str	r0, [r7, #4]
    5ce8:	6039      	str	r1, [r7, #0]
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5cea:	683b      	ldr	r3, [r7, #0]
    5cec:	b2d9      	uxtb	r1, r3
    5cee:	683b      	ldr	r3, [r7, #0]
    5cf0:	019a      	lsls	r2, r3, #6
    5cf2:	4b23      	ldr	r3, [pc, #140]	; (5d80 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa0>)
    5cf4:	18d2      	adds	r2, r2, r3
    5cf6:	4b23      	ldr	r3, [pc, #140]	; (5d84 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5cf8:	0018      	movs	r0, r3
    5cfa:	f7fe fd43 	bl	4784 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
	usbd.epBank0SetMultiPacketSize(ep, 8);
    5cfe:	683b      	ldr	r3, [r7, #0]
    5d00:	b2d9      	uxtb	r1, r3
    5d02:	4b20      	ldr	r3, [pc, #128]	; (5d84 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d04:	2208      	movs	r2, #8
    5d06:	0018      	movs	r0, r3
    5d08:	f7fe fcf2 	bl	46f0 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
	usbd.epBank0SetByteCount(ep, 0);
    5d0c:	683b      	ldr	r3, [r7, #0]
    5d0e:	b2d9      	uxtb	r1, r3
    5d10:	4b1c      	ldr	r3, [pc, #112]	; (5d84 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d12:	2200      	movs	r2, #0
    5d14:	0018      	movs	r0, r3
    5d16:	f7fe fca8 	bl	466a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>

	usbd.epBank0ResetReady(ep);
    5d1a:	683b      	ldr	r3, [r7, #0]
    5d1c:	b2da      	uxtb	r2, r3
    5d1e:	4b19      	ldr	r3, [pc, #100]	; (5d84 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d20:	0011      	movs	r1, r2
    5d22:	0018      	movs	r0, r3
    5d24:	f7fe fc60 	bl	45e8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    5d28:	683b      	ldr	r3, [r7, #0]
    5d2a:	b2da      	uxtb	r2, r3
    5d2c:	4b15      	ldr	r3, [pc, #84]	; (5d84 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d2e:	0011      	movs	r1, r2
    5d30:	0018      	movs	r0, r3
    5d32:	f7fe fc00 	bl	4536 <_ZN20USBDevice_SAMD21G18x14epBank0IsReadyEh>
    5d36:	0003      	movs	r3, r0
    5d38:	001a      	movs	r2, r3
    5d3a:	2301      	movs	r3, #1
    5d3c:	4053      	eors	r3, r2
    5d3e:	b2db      	uxtb	r3, r3
    5d40:	2b00      	cmp	r3, #0
    5d42:	d000      	beq.n	5d46 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x66>
    5d44:	e7f0      	b.n	5d28 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x48>
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    5d46:	683b      	ldr	r3, [r7, #0]
    5d48:	b2da      	uxtb	r2, r3
    5d4a:	4b0e      	ldr	r3, [pc, #56]	; (5d84 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d4c:	0011      	movs	r1, r2
    5d4e:	0018      	movs	r0, r3
    5d50:	f7fe faf9 	bl	4346 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    5d54:	0003      	movs	r3, r0
    5d56:	001a      	movs	r2, r3
    5d58:	2301      	movs	r3, #1
    5d5a:	4053      	eors	r3, r2
    5d5c:	b2db      	uxtb	r3, r3
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d000      	beq.n	5d64 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x84>
    5d62:	e7f0      	b.n	5d46 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x66>
	return usbd.epBank0ByteCount(ep);
    5d64:	683b      	ldr	r3, [r7, #0]
    5d66:	b2da      	uxtb	r2, r3
    5d68:	4b06      	ldr	r3, [pc, #24]	; (5d84 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d6a:	0011      	movs	r1, r2
    5d6c:	0018      	movs	r0, r3
    5d6e:	f7fe fc68 	bl	4642 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5d72:	0003      	movs	r3, r0
    5d74:	b2db      	uxtb	r3, r3
}
    5d76:	0018      	movs	r0, r3
    5d78:	46bd      	mov	sp, r7
    5d7a:	b002      	add	sp, #8
    5d7c:	bd80      	pop	{r7, pc}
    5d7e:	46c0      	nop			; (mov r8, r8)
    5d80:	20000448 	.word	0x20000448
    5d84:	20000338 	.word	0x20000338

00005d88 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    5d88:	b590      	push	{r4, r7, lr}
    5d8a:	b085      	sub	sp, #20
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
    5d90:	6039      	str	r1, [r7, #0]
	uint16_t count = usbd.epBank0ByteCount(ep);
    5d92:	683b      	ldr	r3, [r7, #0]
    5d94:	b2da      	uxtb	r2, r3
    5d96:	230e      	movs	r3, #14
    5d98:	18fc      	adds	r4, r7, r3
    5d9a:	4b16      	ldr	r3, [pc, #88]	; (5df4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5d9c:	0011      	movs	r1, r2
    5d9e:	0018      	movs	r0, r3
    5da0:	f7fe fc4f 	bl	4642 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5da4:	0003      	movs	r3, r0
    5da6:	8023      	strh	r3, [r4, #0]
	if (count >= 64) {
    5da8:	230e      	movs	r3, #14
    5daa:	18fb      	adds	r3, r7, r3
    5dac:	881b      	ldrh	r3, [r3, #0]
    5dae:	2b3f      	cmp	r3, #63	; 0x3f
    5db0:	dd0b      	ble.n	5dca <_ZN14USBDeviceClass7armRecvEm+0x42>
		usbd.epBank0SetByteCount(ep, count - 64);
    5db2:	683b      	ldr	r3, [r7, #0]
    5db4:	b2d9      	uxtb	r1, r3
    5db6:	230e      	movs	r3, #14
    5db8:	18fb      	adds	r3, r7, r3
    5dba:	881b      	ldrh	r3, [r3, #0]
    5dbc:	3b40      	subs	r3, #64	; 0x40
    5dbe:	b29a      	uxth	r2, r3
    5dc0:	4b0c      	ldr	r3, [pc, #48]	; (5df4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5dc2:	0018      	movs	r0, r3
    5dc4:	f7fe fc51 	bl	466a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
    5dc8:	e006      	b.n	5dd8 <_ZN14USBDeviceClass7armRecvEm+0x50>
	} else {
		usbd.epBank0SetByteCount(ep, 0);
    5dca:	683b      	ldr	r3, [r7, #0]
    5dcc:	b2d9      	uxtb	r1, r3
    5dce:	4b09      	ldr	r3, [pc, #36]	; (5df4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5dd0:	2200      	movs	r2, #0
    5dd2:	0018      	movs	r0, r3
    5dd4:	f7fe fc49 	bl	466a <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
	}
	return usbd.epBank0ByteCount(ep);
    5dd8:	683b      	ldr	r3, [r7, #0]
    5dda:	b2da      	uxtb	r2, r3
    5ddc:	4b05      	ldr	r3, [pc, #20]	; (5df4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5dde:	0011      	movs	r1, r2
    5de0:	0018      	movs	r0, r3
    5de2:	f7fe fc2e 	bl	4642 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5de6:	0003      	movs	r3, r0
    5de8:	b2db      	uxtb	r3, r3
}
    5dea:	0018      	movs	r0, r3
    5dec:	46bd      	mov	sp, r7
    5dee:	b005      	add	sp, #20
    5df0:	bd90      	pop	{r4, r7, pc}
    5df2:	46c0      	nop			; (mov r8, r8)
    5df4:	20000338 	.word	0x20000338

00005df8 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    5df8:	b580      	push	{r7, lr}
    5dfa:	b088      	sub	sp, #32
    5dfc:	af00      	add	r7, sp, #0
    5dfe:	60f8      	str	r0, [r7, #12]
    5e00:	60b9      	str	r1, [r7, #8]
    5e02:	607a      	str	r2, [r7, #4]
    5e04:	603b      	str	r3, [r7, #0]
	uint32_t written = 0;
    5e06:	2300      	movs	r3, #0
    5e08:	61fb      	str	r3, [r7, #28]
	uint32_t length = 0;
    5e0a:	2300      	movs	r3, #0
    5e0c:	61bb      	str	r3, [r7, #24]

	if (!_usbConfiguration)
    5e0e:	4b59      	ldr	r3, [pc, #356]	; (5f74 <_ZN14USBDeviceClass4sendEmPKvm+0x17c>)
    5e10:	681b      	ldr	r3, [r3, #0]
    5e12:	425a      	negs	r2, r3
    5e14:	4153      	adcs	r3, r2
    5e16:	b2db      	uxtb	r3, r3
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d002      	beq.n	5e22 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		return -1;
    5e1c:	2301      	movs	r3, #1
    5e1e:	425b      	negs	r3, r3
    5e20:	e0a4      	b.n	5f6c <_ZN14USBDeviceClass4sendEmPKvm+0x174>
	if (len > 16384)
    5e22:	683a      	ldr	r2, [r7, #0]
    5e24:	2380      	movs	r3, #128	; 0x80
    5e26:	01db      	lsls	r3, r3, #7
    5e28:	429a      	cmp	r2, r3
    5e2a:	d902      	bls.n	5e32 <_ZN14USBDeviceClass4sendEmPKvm+0x3a>
		return -1;
    5e2c:	2301      	movs	r3, #1
    5e2e:	425b      	negs	r3, r3
    5e30:	e09c      	b.n	5f6c <_ZN14USBDeviceClass4sendEmPKvm+0x174>

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    5e32:	4b51      	ldr	r3, [pc, #324]	; (5f78 <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    5e34:	781b      	ldrb	r3, [r3, #0]
    5e36:	b2db      	uxtb	r3, r3
    5e38:	425a      	negs	r2, r3
    5e3a:	4153      	adcs	r3, r2
    5e3c:	b2db      	uxtb	r3, r3
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d003      	beq.n	5e4a <_ZN14USBDeviceClass4sendEmPKvm+0x52>
		digitalWrite(PIN_LED_TXL, LOW);
    5e42:	2100      	movs	r1, #0
    5e44:	201f      	movs	r0, #31
    5e46:	f000 fe37 	bl	6ab8 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    5e4a:	4b4b      	ldr	r3, [pc, #300]	; (5f78 <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    5e4c:	2264      	movs	r2, #100	; 0x64
    5e4e:	701a      	strb	r2, [r3, #0]
#endif

	// Flash area
	while (len != 0)
    5e50:	683b      	ldr	r3, [r7, #0]
    5e52:	2b00      	cmp	r3, #0
    5e54:	d100      	bne.n	5e58 <_ZN14USBDeviceClass4sendEmPKvm+0x60>
    5e56:	e088      	b.n	5f6a <_ZN14USBDeviceClass4sendEmPKvm+0x172>
	{
		if (usbd.epBank1IsReady(ep)) {
    5e58:	68bb      	ldr	r3, [r7, #8]
    5e5a:	b2da      	uxtb	r2, r3
    5e5c:	4b47      	ldr	r3, [pc, #284]	; (5f7c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5e5e:	0011      	movs	r1, r2
    5e60:	0018      	movs	r0, r3
    5e62:	f7fe fb7e 	bl	4562 <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>
    5e66:	1e03      	subs	r3, r0, #0
    5e68:	d03c      	beq.n	5ee4 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
			// previous transfer is still not complete

			// convert the timeout from microseconds to a number of times through
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    5e6a:	4b45      	ldr	r3, [pc, #276]	; (5f80 <_ZN14USBDeviceClass4sendEmPKvm+0x188>)
    5e6c:	681b      	ldr	r3, [r3, #0]
    5e6e:	4945      	ldr	r1, [pc, #276]	; (5f84 <_ZN14USBDeviceClass4sendEmPKvm+0x18c>)
    5e70:	0018      	movs	r0, r3
    5e72:	f008 fd11 	bl	e898 <__udivsi3>
    5e76:	0003      	movs	r3, r0
    5e78:	001a      	movs	r2, r3
    5e7a:	4b43      	ldr	r3, [pc, #268]	; (5f88 <_ZN14USBDeviceClass4sendEmPKvm+0x190>)
    5e7c:	4353      	muls	r3, r2
    5e7e:	2117      	movs	r1, #23
    5e80:	0018      	movs	r0, r3
    5e82:	f008 fd09 	bl	e898 <__udivsi3>
    5e86:	0003      	movs	r3, r0
    5e88:	617b      	str	r3, [r7, #20]

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
    5e8a:	68bb      	ldr	r3, [r7, #8]
    5e8c:	b2da      	uxtb	r2, r3
    5e8e:	4b3b      	ldr	r3, [pc, #236]	; (5f7c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5e90:	0011      	movs	r1, r2
    5e92:	0018      	movs	r0, r3
    5e94:	f7fe fa6d 	bl	4372 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    5e98:	0003      	movs	r3, r0
    5e9a:	001a      	movs	r2, r3
    5e9c:	2301      	movs	r3, #1
    5e9e:	4053      	eors	r3, r2
    5ea0:	b2db      	uxtb	r3, r3
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d01e      	beq.n	5ee4 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    5ea6:	4a39      	ldr	r2, [pc, #228]	; (5f8c <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    5ea8:	68bb      	ldr	r3, [r7, #8]
    5eaa:	18d3      	adds	r3, r2, r3
    5eac:	781b      	ldrb	r3, [r3, #0]
    5eae:	2b00      	cmp	r3, #0
    5eb0:	d104      	bne.n	5ebc <_ZN14USBDeviceClass4sendEmPKvm+0xc4>
    5eb2:	697b      	ldr	r3, [r7, #20]
    5eb4:	1e5a      	subs	r2, r3, #1
    5eb6:	617a      	str	r2, [r7, #20]
    5eb8:	2b00      	cmp	r3, #0
    5eba:	d101      	bne.n	5ec0 <_ZN14USBDeviceClass4sendEmPKvm+0xc8>
    5ebc:	2301      	movs	r3, #1
    5ebe:	e000      	b.n	5ec2 <_ZN14USBDeviceClass4sendEmPKvm+0xca>
    5ec0:	2300      	movs	r3, #0
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d0e1      	beq.n	5e8a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
					LastTransmitTimedOut[ep] = 1;
    5ec6:	4a31      	ldr	r2, [pc, #196]	; (5f8c <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    5ec8:	68bb      	ldr	r3, [r7, #8]
    5eca:	18d3      	adds	r3, r2, r3
    5ecc:	2201      	movs	r2, #1
    5ece:	701a      	strb	r2, [r3, #0]

					// set byte count to zero, so that ZLP is sent
					// instead of stale data
					usbd.epBank1SetByteCount(ep, 0);
    5ed0:	68bb      	ldr	r3, [r7, #8]
    5ed2:	b2d9      	uxtb	r1, r3
    5ed4:	4b29      	ldr	r3, [pc, #164]	; (5f7c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5ed6:	2200      	movs	r2, #0
    5ed8:	0018      	movs	r0, r3
    5eda:	f7fe fbe7 	bl	46ac <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
					return -1;
    5ede:	2301      	movs	r3, #1
    5ee0:	425b      	negs	r3, r3
    5ee2:	e043      	b.n	5f6c <_ZN14USBDeviceClass4sendEmPKvm+0x174>
				}
			}
		}

		LastTransmitTimedOut[ep] = 0;
    5ee4:	4a29      	ldr	r2, [pc, #164]	; (5f8c <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    5ee6:	68bb      	ldr	r3, [r7, #8]
    5ee8:	18d3      	adds	r3, r2, r3
    5eea:	2200      	movs	r2, #0
    5eec:	701a      	strb	r2, [r3, #0]

		if (len >= EPX_SIZE) {
    5eee:	683b      	ldr	r3, [r7, #0]
    5ef0:	2b3f      	cmp	r3, #63	; 0x3f
    5ef2:	d902      	bls.n	5efa <_ZN14USBDeviceClass4sendEmPKvm+0x102>
			length = EPX_SIZE - 1;
    5ef4:	233f      	movs	r3, #63	; 0x3f
    5ef6:	61bb      	str	r3, [r7, #24]
    5ef8:	e001      	b.n	5efe <_ZN14USBDeviceClass4sendEmPKvm+0x106>
		} else {
			length = len;
    5efa:	683b      	ldr	r3, [r7, #0]
    5efc:	61bb      	str	r3, [r7, #24]
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    5efe:	68bb      	ldr	r3, [r7, #8]
    5f00:	019a      	lsls	r2, r3, #6
    5f02:	4b23      	ldr	r3, [pc, #140]	; (5f90 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    5f04:	18d3      	adds	r3, r2, r3
    5f06:	69ba      	ldr	r2, [r7, #24]
    5f08:	6879      	ldr	r1, [r7, #4]
    5f0a:	0018      	movs	r0, r3
    5f0c:	f00a fc91 	bl	10832 <memcpy>

		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5f10:	68bb      	ldr	r3, [r7, #8]
    5f12:	b2d9      	uxtb	r1, r3
    5f14:	68bb      	ldr	r3, [r7, #8]
    5f16:	019a      	lsls	r2, r3, #6
    5f18:	4b1d      	ldr	r3, [pc, #116]	; (5f90 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    5f1a:	18d2      	adds	r2, r2, r3
    5f1c:	4b17      	ldr	r3, [pc, #92]	; (5f7c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f1e:	0018      	movs	r0, r3
    5f20:	f7fe fc46 	bl	47b0 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetByteCount(ep, length);
    5f24:	68bb      	ldr	r3, [r7, #8]
    5f26:	b2d9      	uxtb	r1, r3
    5f28:	69bb      	ldr	r3, [r7, #24]
    5f2a:	b29a      	uxth	r2, r3
    5f2c:	4b13      	ldr	r3, [pc, #76]	; (5f7c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f2e:	0018      	movs	r0, r3
    5f30:	f7fe fbbc 	bl	46ac <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

		// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    5f34:	68bb      	ldr	r3, [r7, #8]
    5f36:	b2da      	uxtb	r2, r3
    5f38:	4b10      	ldr	r3, [pc, #64]	; (5f7c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f3a:	0011      	movs	r1, r2
    5f3c:	0018      	movs	r0, r3
    5f3e:	f7fe fa6d 	bl	441c <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    5f42:	68bb      	ldr	r3, [r7, #8]
    5f44:	b2da      	uxtb	r2, r3
    5f46:	4b0d      	ldr	r3, [pc, #52]	; (5f7c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f48:	0011      	movs	r1, r2
    5f4a:	0018      	movs	r0, r3
    5f4c:	f7fe fb35 	bl	45ba <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

		written += length;
    5f50:	69fa      	ldr	r2, [r7, #28]
    5f52:	69bb      	ldr	r3, [r7, #24]
    5f54:	18d3      	adds	r3, r2, r3
    5f56:	61fb      	str	r3, [r7, #28]
		len -= length;
    5f58:	683a      	ldr	r2, [r7, #0]
    5f5a:	69bb      	ldr	r3, [r7, #24]
    5f5c:	1ad3      	subs	r3, r2, r3
    5f5e:	603b      	str	r3, [r7, #0]
		data = (char *)data + length;
    5f60:	687a      	ldr	r2, [r7, #4]
    5f62:	69bb      	ldr	r3, [r7, #24]
    5f64:	18d3      	adds	r3, r2, r3
    5f66:	607b      	str	r3, [r7, #4]
	while (len != 0)
    5f68:	e772      	b.n	5e50 <_ZN14USBDeviceClass4sendEmPKvm+0x58>
	}
	return written;
    5f6a:	69fb      	ldr	r3, [r7, #28]
}
    5f6c:	0018      	movs	r0, r3
    5f6e:	46bd      	mov	sp, r7
    5f70:	b008      	add	sp, #32
    5f72:	bd80      	pop	{r7, pc}
    5f74:	20000440 	.word	0x20000440
    5f78:	2000043c 	.word	0x2000043c
    5f7c:	20000338 	.word	0x20000338
    5f80:	20000048 	.word	0x20000048
    5f84:	000f4240 	.word	0x000f4240
    5f88:	00011170 	.word	0x00011170
    5f8c:	200008e8 	.word	0x200008e8
    5f90:	20000608 	.word	0x20000608

00005f94 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    5f94:	b580      	push	{r7, lr}
    5f96:	b084      	sub	sp, #16
    5f98:	af00      	add	r7, sp, #0
    5f9a:	60f8      	str	r0, [r7, #12]
    5f9c:	60b9      	str	r1, [r7, #8]
    5f9e:	607a      	str	r2, [r7, #4]
    5fa0:	603b      	str	r3, [r7, #0]
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    5fa2:	68bb      	ldr	r3, [r7, #8]
    5fa4:	019a      	lsls	r2, r3, #6
    5fa6:	4b12      	ldr	r3, [pc, #72]	; (5ff0 <_ZN14USBDeviceClass7armSendEmPKvm+0x5c>)
    5fa8:	18d3      	adds	r3, r2, r3
    5faa:	683a      	ldr	r2, [r7, #0]
    5fac:	6879      	ldr	r1, [r7, #4]
    5fae:	0018      	movs	r0, r3
    5fb0:	f00a fc3f 	bl	10832 <memcpy>

	// Get endpoint configuration from setting register
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5fb4:	68bb      	ldr	r3, [r7, #8]
    5fb6:	b2d9      	uxtb	r1, r3
    5fb8:	68bb      	ldr	r3, [r7, #8]
    5fba:	019a      	lsls	r2, r3, #6
    5fbc:	4b0c      	ldr	r3, [pc, #48]	; (5ff0 <_ZN14USBDeviceClass7armSendEmPKvm+0x5c>)
    5fbe:	18d2      	adds	r2, r2, r3
    5fc0:	4b0c      	ldr	r3, [pc, #48]	; (5ff4 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    5fc2:	0018      	movs	r0, r3
    5fc4:	f7fe fbf4 	bl	47b0 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
	usbd.epBank1SetMultiPacketSize(ep, 0);
    5fc8:	68bb      	ldr	r3, [r7, #8]
    5fca:	b2d9      	uxtb	r1, r3
    5fcc:	4b09      	ldr	r3, [pc, #36]	; (5ff4 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    5fce:	2200      	movs	r2, #0
    5fd0:	0018      	movs	r0, r3
    5fd2:	f7fe fbb1 	bl	4738 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht>
	usbd.epBank1SetByteCount(ep, len);
    5fd6:	68bb      	ldr	r3, [r7, #8]
    5fd8:	b2d9      	uxtb	r1, r3
    5fda:	683b      	ldr	r3, [r7, #0]
    5fdc:	b29a      	uxth	r2, r3
    5fde:	4b05      	ldr	r3, [pc, #20]	; (5ff4 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    5fe0:	0018      	movs	r0, r3
    5fe2:	f7fe fb63 	bl	46ac <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

	return len;
    5fe6:	683b      	ldr	r3, [r7, #0]
}
    5fe8:	0018      	movs	r0, r3
    5fea:	46bd      	mov	sp, r7
    5fec:	b004      	add	sp, #16
    5fee:	bd80      	pop	{r7, pc}
    5ff0:	20000608 	.word	0x20000608
    5ff4:	20000338 	.word	0x20000338

00005ff8 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    5ff8:	b580      	push	{r7, lr}
    5ffa:	b088      	sub	sp, #32
    5ffc:	af00      	add	r7, sp, #0
    5ffe:	60f8      	str	r0, [r7, #12]
    6000:	60b9      	str	r1, [r7, #8]
    6002:	607a      	str	r2, [r7, #4]
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
    6004:	68bb      	ldr	r3, [r7, #8]
    6006:	61bb      	str	r3, [r7, #24]
	uint32_t length = len;
    6008:	687b      	ldr	r3, [r7, #4]
    600a:	617b      	str	r3, [r7, #20]
	uint32_t sent = 0;
    600c:	2300      	movs	r3, #0
    600e:	613b      	str	r3, [r7, #16]
	uint32_t pos = 0;
    6010:	2300      	movs	r3, #0
    6012:	61fb      	str	r3, [r7, #28]

	if (_dry_run == true)
    6014:	4b1c      	ldr	r3, [pc, #112]	; (6088 <_ZN14USBDeviceClass11sendControlEPKvm+0x90>)
    6016:	781b      	ldrb	r3, [r3, #0]
    6018:	2b00      	cmp	r3, #0
    601a:	d001      	beq.n	6020 <_ZN14USBDeviceClass11sendControlEPKvm+0x28>
		return length;
    601c:	697b      	ldr	r3, [r7, #20]
    601e:	e02e      	b.n	607e <_ZN14USBDeviceClass11sendControlEPKvm+0x86>

	if (_pack_message == true) {
    6020:	4b1a      	ldr	r3, [pc, #104]	; (608c <_ZN14USBDeviceClass11sendControlEPKvm+0x94>)
    6022:	781b      	ldrb	r3, [r3, #0]
    6024:	2b00      	cmp	r3, #0
    6026:	d013      	beq.n	6050 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>
		memcpy(&_pack_buffer[_pack_size], data, len);
    6028:	4b19      	ldr	r3, [pc, #100]	; (6090 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    602a:	881b      	ldrh	r3, [r3, #0]
    602c:	001a      	movs	r2, r3
    602e:	4b19      	ldr	r3, [pc, #100]	; (6094 <_ZN14USBDeviceClass11sendControlEPKvm+0x9c>)
    6030:	18d3      	adds	r3, r2, r3
    6032:	687a      	ldr	r2, [r7, #4]
    6034:	69b9      	ldr	r1, [r7, #24]
    6036:	0018      	movs	r0, r3
    6038:	f00a fbfb 	bl	10832 <memcpy>
		_pack_size += len;
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	b29a      	uxth	r2, r3
    6040:	4b13      	ldr	r3, [pc, #76]	; (6090 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    6042:	881b      	ldrh	r3, [r3, #0]
    6044:	18d3      	adds	r3, r2, r3
    6046:	b29a      	uxth	r2, r3
    6048:	4b11      	ldr	r3, [pc, #68]	; (6090 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    604a:	801a      	strh	r2, [r3, #0]
		return length;
    604c:	697b      	ldr	r3, [r7, #20]
    604e:	e016      	b.n	607e <_ZN14USBDeviceClass11sendControlEPKvm+0x86>
	}

 	while (len > 0)
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	2b00      	cmp	r3, #0
    6054:	d012      	beq.n	607c <_ZN14USBDeviceClass11sendControlEPKvm+0x84>
 	{
		sent = armSend(EP0, data + pos, len);
    6056:	69ba      	ldr	r2, [r7, #24]
    6058:	69fb      	ldr	r3, [r7, #28]
    605a:	18d2      	adds	r2, r2, r3
    605c:	687b      	ldr	r3, [r7, #4]
    605e:	68f8      	ldr	r0, [r7, #12]
    6060:	2100      	movs	r1, #0
    6062:	f7ff ff97 	bl	5f94 <_ZN14USBDeviceClass7armSendEmPKvm>
    6066:	0003      	movs	r3, r0
    6068:	613b      	str	r3, [r7, #16]
		pos += sent;
    606a:	69fa      	ldr	r2, [r7, #28]
    606c:	693b      	ldr	r3, [r7, #16]
    606e:	18d3      	adds	r3, r2, r3
    6070:	61fb      	str	r3, [r7, #28]
		len -= sent;
    6072:	687a      	ldr	r2, [r7, #4]
    6074:	693b      	ldr	r3, [r7, #16]
    6076:	1ad3      	subs	r3, r2, r3
    6078:	607b      	str	r3, [r7, #4]
 	while (len > 0)
    607a:	e7e9      	b.n	6050 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>
 	}

	return length;
    607c:	697b      	ldr	r3, [r7, #20]
}
    607e:	0018      	movs	r0, r3
    6080:	46bd      	mov	sp, r7
    6082:	b008      	add	sp, #32
    6084:	bd80      	pop	{r7, pc}
    6086:	46c0      	nop			; (mov r8, r8)
    6088:	200007e4 	.word	0x200007e4
    608c:	200007e5 	.word	0x200007e5
    6090:	200007e6 	.word	0x200007e6
    6094:	200007e8 	.word	0x200007e8

00006098 <_ZN14USBDeviceClass7sendZlpEm>:

void USBDeviceClass::sendZlp(uint32_t ep)
{
    6098:	b580      	push	{r7, lr}
    609a:	b082      	sub	sp, #8
    609c:	af00      	add	r7, sp, #0
    609e:	6078      	str	r0, [r7, #4]
    60a0:	6039      	str	r1, [r7, #0]
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
    60a2:	683b      	ldr	r3, [r7, #0]
    60a4:	b2d9      	uxtb	r1, r3
    60a6:	4b04      	ldr	r3, [pc, #16]	; (60b8 <_ZN14USBDeviceClass7sendZlpEm+0x20>)
    60a8:	2200      	movs	r2, #0
    60aa:	0018      	movs	r0, r3
    60ac:	f7fe fafe 	bl	46ac <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
}
    60b0:	46c0      	nop			; (mov r8, r8)
    60b2:	46bd      	mov	sp, r7
    60b4:	b002      	add	sp, #8
    60b6:	bd80      	pop	{r7, pc}
    60b8:	20000338 	.word	0x20000338

000060bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    60bc:	b580      	push	{r7, lr}
    60be:	b086      	sub	sp, #24
    60c0:	af00      	add	r7, sp, #0
    60c2:	6078      	str	r0, [r7, #4]
    60c4:	6039      	str	r1, [r7, #0]
	switch (setup.bRequest) {
    60c6:	683b      	ldr	r3, [r7, #0]
    60c8:	785b      	ldrb	r3, [r3, #1]
    60ca:	2b0b      	cmp	r3, #11
    60cc:	d900      	bls.n	60d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x14>
    60ce:	e0cd      	b.n	626c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b0>
    60d0:	009a      	lsls	r2, r3, #2
    60d2:	4b69      	ldr	r3, [pc, #420]	; (6278 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1bc>)
    60d4:	18d3      	adds	r3, r2, r3
    60d6:	681b      	ldr	r3, [r3, #0]
    60d8:	469f      	mov	pc, r3
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    60da:	683b      	ldr	r3, [r7, #0]
    60dc:	781b      	ldrb	r3, [r3, #0]
    60de:	2b00      	cmp	r3, #0
    60e0:	d110      	bne.n	6104 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x48>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
    60e2:	2314      	movs	r3, #20
    60e4:	18fb      	adds	r3, r7, r3
    60e6:	2200      	movs	r2, #0
    60e8:	701a      	strb	r2, [r3, #0]
    60ea:	2314      	movs	r3, #20
    60ec:	18fb      	adds	r3, r7, r3
    60ee:	2200      	movs	r2, #0
    60f0:	705a      	strb	r2, [r3, #1]
			armSend(0, buff, 2);
    60f2:	2314      	movs	r3, #20
    60f4:	18fa      	adds	r2, r7, r3
    60f6:	6878      	ldr	r0, [r7, #4]
    60f8:	2302      	movs	r3, #2
    60fa:	2100      	movs	r1, #0
    60fc:	f7ff ff4a 	bl	5f94 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    6100:	2301      	movs	r3, #1
    6102:	e0b4      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		// if( setup.bmRequestType == 2 ) // Endpoint:
		else
		{
			// Send the endpoint status
			// Check if the endpoint if currently halted
			uint8_t buff[] = { 0, 0 };
    6104:	2310      	movs	r3, #16
    6106:	18fb      	adds	r3, r7, r3
    6108:	2200      	movs	r2, #0
    610a:	701a      	strb	r2, [r3, #0]
    610c:	2310      	movs	r3, #16
    610e:	18fb      	adds	r3, r7, r3
    6110:	2200      	movs	r2, #0
    6112:	705a      	strb	r2, [r3, #1]
			if (isEndpointHalt == 1)
    6114:	4b59      	ldr	r3, [pc, #356]	; (627c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    6116:	781b      	ldrb	r3, [r3, #0]
    6118:	2b01      	cmp	r3, #1
    611a:	d103      	bne.n	6124 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x68>
				buff[0] = 1;
    611c:	2310      	movs	r3, #16
    611e:	18fb      	adds	r3, r7, r3
    6120:	2201      	movs	r2, #1
    6122:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 2);
    6124:	2310      	movs	r3, #16
    6126:	18fa      	adds	r2, r7, r3
    6128:	6878      	ldr	r0, [r7, #4]
    612a:	2302      	movs	r3, #2
    612c:	2100      	movs	r1, #0
    612e:	f7ff ff31 	bl	5f94 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    6132:	2301      	movs	r3, #1
    6134:	e09b      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case CLEAR_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    6136:	683b      	ldr	r3, [r7, #0]
    6138:	789b      	ldrb	r3, [r3, #2]
    613a:	2b01      	cmp	r3, #1
    613c:	d118      	bne.n	6170 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xb4>
		{
			// Enable remote wake-up and send a ZLP
			uint8_t buff[] = { 0, 0 };
    613e:	230c      	movs	r3, #12
    6140:	18fb      	adds	r3, r7, r3
    6142:	2200      	movs	r2, #0
    6144:	701a      	strb	r2, [r3, #0]
    6146:	230c      	movs	r3, #12
    6148:	18fb      	adds	r3, r7, r3
    614a:	2200      	movs	r2, #0
    614c:	705a      	strb	r2, [r3, #1]
			if (isRemoteWakeUpEnabled == 1)
    614e:	4b4c      	ldr	r3, [pc, #304]	; (6280 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c4>)
    6150:	781b      	ldrb	r3, [r3, #0]
    6152:	2b01      	cmp	r3, #1
    6154:	d103      	bne.n	615e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xa2>
				buff[0] = 1;
    6156:	230c      	movs	r3, #12
    6158:	18fb      	adds	r3, r7, r3
    615a:	2201      	movs	r2, #1
    615c:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 2);
    615e:	230c      	movs	r3, #12
    6160:	18fa      	adds	r2, r7, r3
    6162:	6878      	ldr	r0, [r7, #4]
    6164:	2302      	movs	r3, #2
    6166:	2100      	movs	r1, #0
    6168:	f7ff ff14 	bl	5f94 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    616c:	2301      	movs	r3, #1
    616e:	e07e      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}
		else // if( setup.wValueL == 0) // ENDPOINTHALT
		{
			isEndpointHalt = 0;
    6170:	4b42      	ldr	r3, [pc, #264]	; (627c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    6172:	2200      	movs	r2, #0
    6174:	701a      	strb	r2, [r3, #0]
			sendZlp(0);
    6176:	687b      	ldr	r3, [r7, #4]
    6178:	2100      	movs	r1, #0
    617a:	0018      	movs	r0, r3
    617c:	f7ff ff8c 	bl	6098 <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    6180:	2301      	movs	r3, #1
    6182:	e074      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    6184:	683b      	ldr	r3, [r7, #0]
    6186:	789b      	ldrb	r3, [r3, #2]
    6188:	2b01      	cmp	r3, #1
    618a:	d10f      	bne.n	61ac <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    618c:	4b3c      	ldr	r3, [pc, #240]	; (6280 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c4>)
    618e:	2201      	movs	r2, #1
    6190:	701a      	strb	r2, [r3, #0]
			uint8_t buff[] = { 0 };
    6192:	2308      	movs	r3, #8
    6194:	18fb      	adds	r3, r7, r3
    6196:	2200      	movs	r2, #0
    6198:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 1);
    619a:	2308      	movs	r3, #8
    619c:	18fa      	adds	r2, r7, r3
    619e:	6878      	ldr	r0, [r7, #4]
    61a0:	2301      	movs	r3, #1
    61a2:	2100      	movs	r1, #0
    61a4:	f7ff fef6 	bl	5f94 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    61a8:	2301      	movs	r3, #1
    61aa:	e060      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}
		if (setup.wValueL == 0) // ENDPOINTHALT
    61ac:	683b      	ldr	r3, [r7, #0]
    61ae:	789b      	ldrb	r3, [r3, #2]
    61b0:	2b00      	cmp	r3, #0
    61b2:	d109      	bne.n	61c8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x10c>
		{
			// Halt endpoint
			isEndpointHalt = 1;
    61b4:	4b31      	ldr	r3, [pc, #196]	; (627c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    61b6:	2201      	movs	r2, #1
    61b8:	701a      	strb	r2, [r3, #0]
			sendZlp(0);
    61ba:	687b      	ldr	r3, [r7, #4]
    61bc:	2100      	movs	r1, #0
    61be:	0018      	movs	r0, r3
    61c0:	f7ff ff6a 	bl	6098 <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    61c4:	2301      	movs	r3, #1
    61c6:	e052      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case SET_ADDRESS:
		setAddress(setup.wValueL);
    61c8:	683b      	ldr	r3, [r7, #0]
    61ca:	789b      	ldrb	r3, [r3, #2]
    61cc:	001a      	movs	r2, r3
    61ce:	687b      	ldr	r3, [r7, #4]
    61d0:	0011      	movs	r1, r2
    61d2:	0018      	movs	r0, r3
    61d4:	f7ff fad2 	bl	577c <_ZN14USBDeviceClass10setAddressEm>
		return true;
    61d8:	2301      	movs	r3, #1
    61da:	e048      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);
    61dc:	683a      	ldr	r2, [r7, #0]
    61de:	687b      	ldr	r3, [r7, #4]
    61e0:	0011      	movs	r1, r2
    61e2:	0018      	movs	r0, r3
    61e4:	f7ff f8e4 	bl	53b0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    61e8:	0003      	movs	r3, r0
    61ea:	e040      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_DESCRIPTOR:
		return false;
    61ec:	2300      	movs	r3, #0
    61ee:	e03e      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
    61f0:	4a24      	ldr	r2, [pc, #144]	; (6284 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c8>)
    61f2:	6878      	ldr	r0, [r7, #4]
    61f4:	2301      	movs	r3, #1
    61f6:	2100      	movs	r1, #0
    61f8:	f7ff fecc 	bl	5f94 <_ZN14USBDeviceClass7armSendEmPKvm>
		return true;
    61fc:	2301      	movs	r3, #1
    61fe:	e036      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    6200:	683b      	ldr	r3, [r7, #0]
    6202:	781b      	ldrb	r3, [r3, #0]
    6204:	001a      	movs	r2, r3
    6206:	231f      	movs	r3, #31
    6208:	4013      	ands	r3, r2
    620a:	d119      	bne.n	6240 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x184>

			initEndpoints();
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	0018      	movs	r0, r3
    6210:	f7ff fb36 	bl	5880 <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    6214:	683b      	ldr	r3, [r7, #0]
    6216:	789b      	ldrb	r3, [r3, #2]
    6218:	001a      	movs	r2, r3
    621a:	4b1a      	ldr	r3, [pc, #104]	; (6284 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c8>)
    621c:	601a      	str	r2, [r3, #0]

			#if defined(CDC_ENABLED)
			// Enable interrupt for CDC reception from host (OUT packet)
			usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
    621e:	4b1a      	ldr	r3, [pc, #104]	; (6288 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1cc>)
    6220:	2101      	movs	r1, #1
    6222:	0018      	movs	r0, r3
    6224:	f7fe f93f 	bl	44a6 <_ZN20USBDevice_SAMD21G18x29epBank1EnableTransferCompleteEh>
			usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
    6228:	4b17      	ldr	r3, [pc, #92]	; (6288 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1cc>)
    622a:	2102      	movs	r1, #2
    622c:	0018      	movs	r0, r3
    622e:	f7fe f922 	bl	4476 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
			#endif

			sendZlp(0);
    6232:	687b      	ldr	r3, [r7, #4]
    6234:	2100      	movs	r1, #0
    6236:	0018      	movs	r0, r3
    6238:	f7ff ff2e 	bl	6098 <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    623c:	2301      	movs	r3, #1
    623e:	e016      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		} else {
			return false;
    6240:	2300      	movs	r3, #0
    6242:	e014      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
    6244:	4a11      	ldr	r2, [pc, #68]	; (628c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1d0>)
    6246:	6878      	ldr	r0, [r7, #4]
    6248:	2301      	movs	r3, #1
    624a:	2100      	movs	r1, #0
    624c:	f7ff fea2 	bl	5f94 <_ZN14USBDeviceClass7armSendEmPKvm>
		return true;
    6250:	2301      	movs	r3, #1
    6252:	e00c      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_INTERFACE:
		_usbSetInterface = setup.wValueL;
    6254:	683b      	ldr	r3, [r7, #0]
    6256:	789b      	ldrb	r3, [r3, #2]
    6258:	001a      	movs	r2, r3
    625a:	4b0c      	ldr	r3, [pc, #48]	; (628c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1d0>)
    625c:	601a      	str	r2, [r3, #0]
		sendZlp(0);
    625e:	687b      	ldr	r3, [r7, #4]
    6260:	2100      	movs	r1, #0
    6262:	0018      	movs	r0, r3
    6264:	f7ff ff18 	bl	6098 <_ZN14USBDeviceClass7sendZlpEm>
		return true;
    6268:	2301      	movs	r3, #1
    626a:	e000      	b.n	626e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	default:
		return true;
    626c:	2301      	movs	r3, #1
	}
}
    626e:	0018      	movs	r0, r3
    6270:	46bd      	mov	sp, r7
    6272:	b006      	add	sp, #24
    6274:	bd80      	pop	{r7, pc}
    6276:	46c0      	nop			; (mov r8, r8)
    6278:	000134b8 	.word	0x000134b8
    627c:	2000043f 	.word	0x2000043f
    6280:	2000043e 	.word	0x2000043e
    6284:	20000440 	.word	0x20000440
    6288:	20000338 	.word	0x20000338
    628c:	20000444 	.word	0x20000444

00006290 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
    6290:	b590      	push	{r4, r7, lr}
    6292:	b085      	sub	sp, #20
    6294:	af00      	add	r7, sp, #0
    6296:	6078      	str	r0, [r7, #4]

	if (_pack_message == true) {
    6298:	4b95      	ldr	r3, [pc, #596]	; (64f0 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    629a:	781b      	ldrb	r3, [r3, #0]
    629c:	2b00      	cmp	r3, #0
    629e:	d000      	beq.n	62a2 <_ZN14USBDeviceClass10ISRHandlerEv+0x12>
    62a0:	e120      	b.n	64e4 <_ZN14USBDeviceClass10ISRHandlerEv+0x254>
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    62a2:	4b94      	ldr	r3, [pc, #592]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    62a4:	0018      	movs	r0, r3
    62a6:	f7fd ff7d 	bl	41a4 <_ZN20USBDevice_SAMD21G18x21isEndOfResetInterruptEv>
    62aa:	1e03      	subs	r3, r0, #0
    62ac:	d011      	beq.n	62d2 <_ZN14USBDeviceClass10ISRHandlerEv+0x42>
	{
		// Configure EP 0
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	2200      	movs	r2, #0
    62b2:	2100      	movs	r1, #0
    62b4:	0018      	movs	r0, r3
    62b6:	f7ff fb13 	bl	58e0 <_ZN14USBDeviceClass6initEPEmm>

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);
    62ba:	4b8e      	ldr	r3, [pc, #568]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    62bc:	2100      	movs	r1, #0
    62be:	0018      	movs	r0, r3
    62c0:	f7fe f8c1 	bl	4446 <_ZN20USBDevice_SAMD21G18x26epBank0EnableSetupReceivedEh>

		_usbConfiguration = 0;
    62c4:	4b8c      	ldr	r3, [pc, #560]	; (64f8 <_ZN14USBDeviceClass10ISRHandlerEv+0x268>)
    62c6:	2200      	movs	r2, #0
    62c8:	601a      	str	r2, [r3, #0]

		usbd.ackEndOfResetInterrupt();
    62ca:	4b8a      	ldr	r3, [pc, #552]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    62cc:	0018      	movs	r0, r3
    62ce:	f7fd ff77 	bl	41c0 <_ZN20USBDevice_SAMD21G18x22ackEndOfResetInterruptEv>
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    62d2:	4b88      	ldr	r3, [pc, #544]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    62d4:	0018      	movs	r0, r3
    62d6:	f7fd ff8d 	bl	41f4 <_ZN20USBDevice_SAMD21G18x23isStartOfFrameInterruptEv>
    62da:	1e03      	subs	r3, r0, #0
    62dc:	d03b      	beq.n	6356 <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
	{
		usbd.ackStartOfFrameInterrupt();
    62de:	4b85      	ldr	r3, [pc, #532]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    62e0:	0018      	movs	r0, r3
    62e2:	f7fd ff95 	bl	4210 <_ZN20USBDevice_SAMD21G18x24ackStartOfFrameInterruptEv>

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    62e6:	4b85      	ldr	r3, [pc, #532]	; (64fc <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    62e8:	781b      	ldrb	r3, [r3, #0]
    62ea:	b2db      	uxtb	r3, r3
    62ec:	17da      	asrs	r2, r3, #31
    62ee:	1ad3      	subs	r3, r2, r3
    62f0:	0fdb      	lsrs	r3, r3, #31
    62f2:	b2db      	uxtb	r3, r3
    62f4:	2b00      	cmp	r3, #0
    62f6:	d012      	beq.n	631e <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
			txLEDPulse--;
    62f8:	4b80      	ldr	r3, [pc, #512]	; (64fc <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    62fa:	781b      	ldrb	r3, [r3, #0]
    62fc:	b2db      	uxtb	r3, r3
    62fe:	3b01      	subs	r3, #1
    6300:	b2da      	uxtb	r2, r3
    6302:	4b7e      	ldr	r3, [pc, #504]	; (64fc <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    6304:	701a      	strb	r2, [r3, #0]
			if (txLEDPulse == 0)
    6306:	4b7d      	ldr	r3, [pc, #500]	; (64fc <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    6308:	781b      	ldrb	r3, [r3, #0]
    630a:	b2db      	uxtb	r3, r3
    630c:	425a      	negs	r2, r3
    630e:	4153      	adcs	r3, r2
    6310:	b2db      	uxtb	r3, r3
    6312:	2b00      	cmp	r3, #0
    6314:	d003      	beq.n	631e <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
				digitalWrite(PIN_LED_TXL, HIGH);
    6316:	2101      	movs	r1, #1
    6318:	201f      	movs	r0, #31
    631a:	f000 fbcd 	bl	6ab8 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    631e:	4b78      	ldr	r3, [pc, #480]	; (6500 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6320:	781b      	ldrb	r3, [r3, #0]
    6322:	b2db      	uxtb	r3, r3
    6324:	17da      	asrs	r2, r3, #31
    6326:	1ad3      	subs	r3, r2, r3
    6328:	0fdb      	lsrs	r3, r3, #31
    632a:	b2db      	uxtb	r3, r3
    632c:	2b00      	cmp	r3, #0
    632e:	d012      	beq.n	6356 <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
			rxLEDPulse--;
    6330:	4b73      	ldr	r3, [pc, #460]	; (6500 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6332:	781b      	ldrb	r3, [r3, #0]
    6334:	b2db      	uxtb	r3, r3
    6336:	3b01      	subs	r3, #1
    6338:	b2da      	uxtb	r2, r3
    633a:	4b71      	ldr	r3, [pc, #452]	; (6500 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    633c:	701a      	strb	r2, [r3, #0]
			if (rxLEDPulse == 0)
    633e:	4b70      	ldr	r3, [pc, #448]	; (6500 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6340:	781b      	ldrb	r3, [r3, #0]
    6342:	b2db      	uxtb	r3, r3
    6344:	425a      	negs	r2, r3
    6346:	4153      	adcs	r3, r2
    6348:	b2db      	uxtb	r3, r3
    634a:	2b00      	cmp	r3, #0
    634c:	d003      	beq.n	6356 <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
				digitalWrite(PIN_LED_RXL, HIGH);
    634e:	2101      	movs	r1, #1
    6350:	201e      	movs	r0, #30
    6352:	f000 fbb1 	bl	6ab8 <digitalWrite>
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    6356:	4b67      	ldr	r3, [pc, #412]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6358:	2100      	movs	r1, #0
    635a:	0018      	movs	r0, r3
    635c:	f7fd ffc7 	bl	42ee <_ZN20USBDevice_SAMD21G18x22epBank0IsSetupReceivedEh>
    6360:	1e03      	subs	r3, r0, #0
    6362:	d047      	beq.n	63f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x164>
	{
		usbd.epBank0AckSetupReceived(0);
    6364:	4b63      	ldr	r3, [pc, #396]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6366:	2100      	movs	r1, #0
    6368:	0018      	movs	r0, r3
    636a:	f7fe f818 	bl	439e <_ZN20USBDevice_SAMD21G18x23epBank0AckSetupReceivedEh>

		USBSetup *setup = reinterpret_cast<USBSetup *>(udd_ep_out_cache_buffer[0]);
    636e:	4b65      	ldr	r3, [pc, #404]	; (6504 <_ZN14USBDeviceClass10ISRHandlerEv+0x274>)
    6370:	60bb      	str	r3, [r7, #8]

		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);
    6372:	4b60      	ldr	r3, [pc, #384]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6374:	2100      	movs	r1, #0
    6376:	0018      	movs	r0, r3
    6378:	f7fe f936 	bl	45e8 <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    637c:	68bb      	ldr	r3, [r7, #8]
    637e:	781b      	ldrb	r3, [r3, #0]
    6380:	001a      	movs	r2, r3
    6382:	2360      	movs	r3, #96	; 0x60
    6384:	4013      	ands	r3, r2
    6386:	d10a      	bne.n	639e <_ZN14USBDeviceClass10ISRHandlerEv+0x10e>
			// Standard Requests
			ok = handleStandardSetup(*setup);
    6388:	230f      	movs	r3, #15
    638a:	18fc      	adds	r4, r7, r3
    638c:	68ba      	ldr	r2, [r7, #8]
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	0011      	movs	r1, r2
    6392:	0018      	movs	r0, r3
    6394:	f7ff fe92 	bl	60bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
    6398:	0003      	movs	r3, r0
    639a:	7023      	strb	r3, [r4, #0]
    639c:	e009      	b.n	63b2 <_ZN14USBDeviceClass10ISRHandlerEv+0x122>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
    639e:	230f      	movs	r3, #15
    63a0:	18fc      	adds	r4, r7, r3
    63a2:	68ba      	ldr	r2, [r7, #8]
    63a4:	687b      	ldr	r3, [r7, #4]
    63a6:	0011      	movs	r1, r2
    63a8:	0018      	movs	r0, r3
    63aa:	f7ff fa27 	bl	57fc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    63ae:	0003      	movs	r3, r0
    63b0:	7023      	strb	r3, [r4, #0]
		}

		if (ok) {
    63b2:	230f      	movs	r3, #15
    63b4:	18fb      	adds	r3, r7, r3
    63b6:	781b      	ldrb	r3, [r3, #0]
    63b8:	2b00      	cmp	r3, #0
    63ba:	d005      	beq.n	63c8 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>
			usbd.epBank1SetReady(0);
    63bc:	4b4d      	ldr	r3, [pc, #308]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63be:	2100      	movs	r1, #0
    63c0:	0018      	movs	r0, r3
    63c2:	f7fe f8fa 	bl	45ba <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>
    63c6:	e004      	b.n	63d2 <_ZN14USBDeviceClass10ISRHandlerEv+0x142>
		} else {
			stall(0);
    63c8:	687b      	ldr	r3, [r7, #4]
    63ca:	2100      	movs	r1, #0
    63cc:	0018      	movs	r0, r3
    63ce:	f7ff fb5d 	bl	5a8c <_ZN14USBDeviceClass5stallEm>
		}

		if (usbd.epBank1IsStalled(0))
    63d2:	4b48      	ldr	r3, [pc, #288]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63d4:	2100      	movs	r1, #0
    63d6:	0018      	movs	r0, r3
    63d8:	f7fd ff9f 	bl	431a <_ZN20USBDevice_SAMD21G18x16epBank1IsStalledEh>
    63dc:	1e03      	subs	r3, r0, #0
    63de:	d009      	beq.n	63f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x164>
		{
			usbd.epBank1AckStalled(0);
    63e0:	4b44      	ldr	r3, [pc, #272]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63e2:	2100      	movs	r1, #0
    63e4:	0018      	movs	r0, r3
    63e6:	f7fd ffef 	bl	43c8 <_ZN20USBDevice_SAMD21G18x17epBank1AckStalledEh>

			// Remove stall request
			usbd.epBank1DisableStalled(0);
    63ea:	4b42      	ldr	r3, [pc, #264]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63ec:	2100      	movs	r1, #0
    63ee:	0018      	movs	r0, r3
    63f0:	f7fe f871 	bl	44d6 <_ZN20USBDevice_SAMD21G18x21epBank1DisableStalledEh>
		}

	} // end Received Setup handler

	uint8_t i=0;
    63f4:	230e      	movs	r3, #14
    63f6:	18fb      	adds	r3, r7, r3
    63f8:	2200      	movs	r2, #0
    63fa:	701a      	strb	r2, [r3, #0]
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    63fc:	4b3d      	ldr	r3, [pc, #244]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63fe:	0018      	movs	r0, r3
    6400:	f7fd ff69 	bl	42d6 <_ZN20USBDevice_SAMD21G18x18epInterruptSummaryEv>
    6404:	0003      	movs	r3, r0
    6406:	b2da      	uxtb	r2, r3
    6408:	230d      	movs	r3, #13
    640a:	18fb      	adds	r3, r7, r3
    640c:	2101      	movs	r1, #1
    640e:	438a      	bics	r2, r1
    6410:	701a      	strb	r2, [r3, #0]
	while (ept_int != 0)
    6412:	230d      	movs	r3, #13
    6414:	18fb      	adds	r3, r7, r3
    6416:	781b      	ldrb	r3, [r3, #0]
    6418:	2b00      	cmp	r3, #0
    641a:	d066      	beq.n	64ea <_ZN14USBDeviceClass10ISRHandlerEv+0x25a>
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    641c:	230d      	movs	r3, #13
    641e:	18fb      	adds	r3, r7, r3
    6420:	781a      	ldrb	r2, [r3, #0]
    6422:	230e      	movs	r3, #14
    6424:	18fb      	adds	r3, r7, r3
    6426:	781b      	ldrb	r3, [r3, #0]
    6428:	411a      	asrs	r2, r3
    642a:	0013      	movs	r3, r2
    642c:	2201      	movs	r2, #1
    642e:	4013      	ands	r3, r2
    6430:	d04b      	beq.n	64ca <_ZN14USBDeviceClass10ISRHandlerEv+0x23a>
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    6432:	230e      	movs	r3, #14
    6434:	18fb      	adds	r3, r7, r3
    6436:	781a      	ldrb	r2, [r3, #0]
    6438:	4b2e      	ldr	r3, [pc, #184]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    643a:	0011      	movs	r1, r2
    643c:	0018      	movs	r0, r3
    643e:	f7fd ff82 	bl	4346 <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    6442:	1e03      	subs	r3, r0, #0
    6444:	d109      	bne.n	645a <_ZN14USBDeviceClass10ISRHandlerEv+0x1ca>
			    usbd.epBank1IsTransferComplete(i))
    6446:	230e      	movs	r3, #14
    6448:	18fb      	adds	r3, r7, r3
    644a:	781a      	ldrb	r2, [r3, #0]
    644c:	4b29      	ldr	r3, [pc, #164]	; (64f4 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    644e:	0011      	movs	r1, r2
    6450:	0018      	movs	r0, r3
    6452:	f7fd ff8e 	bl	4372 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    6456:	1e03      	subs	r3, r0, #0
			if (usbd.epBank0IsTransferComplete(i) ||
    6458:	d001      	beq.n	645e <_ZN14USBDeviceClass10ISRHandlerEv+0x1ce>
    645a:	2301      	movs	r3, #1
    645c:	e000      	b.n	6460 <_ZN14USBDeviceClass10ISRHandlerEv+0x1d0>
    645e:	2300      	movs	r3, #0
    6460:	2b00      	cmp	r3, #0
    6462:	d020      	beq.n	64a6 <_ZN14USBDeviceClass10ISRHandlerEv+0x216>
			{
				if (epHandlers[i]) {
    6464:	230e      	movs	r3, #14
    6466:	18fb      	adds	r3, r7, r3
    6468:	781a      	ldrb	r2, [r3, #0]
    646a:	4b27      	ldr	r3, [pc, #156]	; (6508 <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    646c:	0092      	lsls	r2, r2, #2
    646e:	58d3      	ldr	r3, [r2, r3]
    6470:	2b00      	cmp	r3, #0
    6472:	d010      	beq.n	6496 <_ZN14USBDeviceClass10ISRHandlerEv+0x206>
					epHandlers[i]->handleEndpoint();
    6474:	230e      	movs	r3, #14
    6476:	18fb      	adds	r3, r7, r3
    6478:	781a      	ldrb	r2, [r3, #0]
    647a:	4b23      	ldr	r3, [pc, #140]	; (6508 <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    647c:	0092      	lsls	r2, r2, #2
    647e:	58d3      	ldr	r3, [r2, r3]
    6480:	681b      	ldr	r3, [r3, #0]
    6482:	681b      	ldr	r3, [r3, #0]
    6484:	220e      	movs	r2, #14
    6486:	18ba      	adds	r2, r7, r2
    6488:	7811      	ldrb	r1, [r2, #0]
    648a:	4a1f      	ldr	r2, [pc, #124]	; (6508 <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    648c:	0089      	lsls	r1, r1, #2
    648e:	588a      	ldr	r2, [r1, r2]
    6490:	0010      	movs	r0, r2
    6492:	4798      	blx	r3
    6494:	e007      	b.n	64a6 <_ZN14USBDeviceClass10ISRHandlerEv+0x216>
				} else {
					handleEndpoint(i);
    6496:	230e      	movs	r3, #14
    6498:	18fb      	adds	r3, r7, r3
    649a:	781a      	ldrb	r2, [r3, #0]
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	0011      	movs	r1, r2
    64a0:	0018      	movs	r0, r3
    64a2:	f7ff f881 	bl	55a8 <_ZN14USBDeviceClass14handleEndpointEh>
				}
			}
			ept_int &= ~(1 << i);
    64a6:	230e      	movs	r3, #14
    64a8:	18fb      	adds	r3, r7, r3
    64aa:	781b      	ldrb	r3, [r3, #0]
    64ac:	2201      	movs	r2, #1
    64ae:	409a      	lsls	r2, r3
    64b0:	0013      	movs	r3, r2
    64b2:	b25b      	sxtb	r3, r3
    64b4:	43db      	mvns	r3, r3
    64b6:	b25b      	sxtb	r3, r3
    64b8:	220d      	movs	r2, #13
    64ba:	18ba      	adds	r2, r7, r2
    64bc:	7812      	ldrb	r2, [r2, #0]
    64be:	b252      	sxtb	r2, r2
    64c0:	4013      	ands	r3, r2
    64c2:	b25a      	sxtb	r2, r3
    64c4:	230d      	movs	r3, #13
    64c6:	18fb      	adds	r3, r7, r3
    64c8:	701a      	strb	r2, [r3, #0]
		}
		i++;
    64ca:	230e      	movs	r3, #14
    64cc:	18fb      	adds	r3, r7, r3
    64ce:	781a      	ldrb	r2, [r3, #0]
    64d0:	230e      	movs	r3, #14
    64d2:	18fb      	adds	r3, r7, r3
    64d4:	3201      	adds	r2, #1
    64d6:	701a      	strb	r2, [r3, #0]
		if (i > USB_EPT_NUM)
    64d8:	230e      	movs	r3, #14
    64da:	18fb      	adds	r3, r7, r3
    64dc:	781b      	ldrb	r3, [r3, #0]
    64de:	2b08      	cmp	r3, #8
    64e0:	dc02      	bgt.n	64e8 <_ZN14USBDeviceClass10ISRHandlerEv+0x258>
	while (ept_int != 0)
    64e2:	e796      	b.n	6412 <_ZN14USBDeviceClass10ISRHandlerEv+0x182>
		return;
    64e4:	46c0      	nop			; (mov r8, r8)
    64e6:	e000      	b.n	64ea <_ZN14USBDeviceClass10ISRHandlerEv+0x25a>
			break;  // fire exit
    64e8:	46c0      	nop			; (mov r8, r8)
	}
}
    64ea:	46bd      	mov	sp, r7
    64ec:	b005      	add	sp, #20
    64ee:	bd90      	pop	{r4, r7, pc}
    64f0:	200007e5 	.word	0x200007e5
    64f4:	20000338 	.word	0x20000338
    64f8:	20000440 	.word	0x20000440
    64fc:	2000043c 	.word	0x2000043c
    6500:	2000043d 	.word	0x2000043d
    6504:	20000448 	.word	0x20000448
    6508:	200007c8 	.word	0x200007c8

0000650c <_Z41__static_initialization_and_destruction_0ii>:
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    650c:	b580      	push	{r7, lr}
    650e:	b082      	sub	sp, #8
    6510:	af00      	add	r7, sp, #0
    6512:	6078      	str	r0, [r7, #4]
    6514:	6039      	str	r1, [r7, #0]
    6516:	687b      	ldr	r3, [r7, #4]
    6518:	2b01      	cmp	r3, #1
    651a:	d10b      	bne.n	6534 <_Z41__static_initialization_and_destruction_0ii+0x28>
    651c:	683b      	ldr	r3, [r7, #0]
    651e:	4a07      	ldr	r2, [pc, #28]	; (653c <_Z41__static_initialization_and_destruction_0ii+0x30>)
    6520:	4293      	cmp	r3, r2
    6522:	d107      	bne.n	6534 <_Z41__static_initialization_and_destruction_0ii+0x28>
USBDevice_SAMD21G18x usbd;
    6524:	4b06      	ldr	r3, [pc, #24]	; (6540 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    6526:	0018      	movs	r0, r3
    6528:	f7fd fddc 	bl	40e4 <_ZN20USBDevice_SAMD21G18xC1Ev>
USBDeviceClass USBDevice;
    652c:	4b05      	ldr	r3, [pc, #20]	; (6544 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    652e:	0018      	movs	r0, r3
    6530:	f7fd fdb2 	bl	4098 <_ZN14USBDeviceClassC1Ev>
    6534:	46c0      	nop			; (mov r8, r8)
    6536:	46bd      	mov	sp, r7
    6538:	b002      	add	sp, #8
    653a:	bd80      	pop	{r7, pc}
    653c:	0000ffff 	.word	0x0000ffff
    6540:	20000338 	.word	0x20000338
    6544:	200008f0 	.word	0x200008f0

00006548 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
    6548:	b580      	push	{r7, lr}
    654a:	af00      	add	r7, sp, #0
    654c:	4b03      	ldr	r3, [pc, #12]	; (655c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x14>)
    654e:	0019      	movs	r1, r3
    6550:	2001      	movs	r0, #1
    6552:	f7ff ffdb 	bl	650c <_Z41__static_initialization_and_destruction_0ii>
    6556:	46bd      	mov	sp, r7
    6558:	bd80      	pop	{r7, pc}
    655a:	46c0      	nop			; (mov r8, r8)
    655c:	0000ffff 	.word	0x0000ffff

00006560 <__NVIC_SetPriority>:
{
    6560:	b5b0      	push	{r4, r5, r7, lr}
    6562:	b082      	sub	sp, #8
    6564:	af00      	add	r7, sp, #0
    6566:	0002      	movs	r2, r0
    6568:	6039      	str	r1, [r7, #0]
    656a:	1dfb      	adds	r3, r7, #7
    656c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    656e:	1dfb      	adds	r3, r7, #7
    6570:	781b      	ldrb	r3, [r3, #0]
    6572:	2b7f      	cmp	r3, #127	; 0x7f
    6574:	d828      	bhi.n	65c8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6576:	4c2f      	ldr	r4, [pc, #188]	; (6634 <__NVIC_SetPriority+0xd4>)
    6578:	1dfb      	adds	r3, r7, #7
    657a:	781b      	ldrb	r3, [r3, #0]
    657c:	b25b      	sxtb	r3, r3
    657e:	089b      	lsrs	r3, r3, #2
    6580:	492c      	ldr	r1, [pc, #176]	; (6634 <__NVIC_SetPriority+0xd4>)
    6582:	1dfa      	adds	r2, r7, #7
    6584:	7812      	ldrb	r2, [r2, #0]
    6586:	b252      	sxtb	r2, r2
    6588:	0892      	lsrs	r2, r2, #2
    658a:	32c0      	adds	r2, #192	; 0xc0
    658c:	0092      	lsls	r2, r2, #2
    658e:	5852      	ldr	r2, [r2, r1]
    6590:	1df9      	adds	r1, r7, #7
    6592:	7809      	ldrb	r1, [r1, #0]
    6594:	0008      	movs	r0, r1
    6596:	2103      	movs	r1, #3
    6598:	4001      	ands	r1, r0
    659a:	00c9      	lsls	r1, r1, #3
    659c:	20ff      	movs	r0, #255	; 0xff
    659e:	4088      	lsls	r0, r1
    65a0:	0001      	movs	r1, r0
    65a2:	43c9      	mvns	r1, r1
    65a4:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    65a6:	683a      	ldr	r2, [r7, #0]
    65a8:	0192      	lsls	r2, r2, #6
    65aa:	20ff      	movs	r0, #255	; 0xff
    65ac:	4010      	ands	r0, r2
    65ae:	1dfa      	adds	r2, r7, #7
    65b0:	7812      	ldrb	r2, [r2, #0]
    65b2:	0015      	movs	r5, r2
    65b4:	2203      	movs	r2, #3
    65b6:	402a      	ands	r2, r5
    65b8:	00d2      	lsls	r2, r2, #3
    65ba:	4090      	lsls	r0, r2
    65bc:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    65be:	430a      	orrs	r2, r1
    65c0:	33c0      	adds	r3, #192	; 0xc0
    65c2:	009b      	lsls	r3, r3, #2
    65c4:	511a      	str	r2, [r3, r4]
}
    65c6:	e031      	b.n	662c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    65c8:	4c1b      	ldr	r4, [pc, #108]	; (6638 <__NVIC_SetPriority+0xd8>)
    65ca:	1dfb      	adds	r3, r7, #7
    65cc:	781b      	ldrb	r3, [r3, #0]
    65ce:	001a      	movs	r2, r3
    65d0:	230f      	movs	r3, #15
    65d2:	4013      	ands	r3, r2
    65d4:	3b08      	subs	r3, #8
    65d6:	0899      	lsrs	r1, r3, #2
    65d8:	4a17      	ldr	r2, [pc, #92]	; (6638 <__NVIC_SetPriority+0xd8>)
    65da:	1dfb      	adds	r3, r7, #7
    65dc:	781b      	ldrb	r3, [r3, #0]
    65de:	0018      	movs	r0, r3
    65e0:	230f      	movs	r3, #15
    65e2:	4003      	ands	r3, r0
    65e4:	3b08      	subs	r3, #8
    65e6:	089b      	lsrs	r3, r3, #2
    65e8:	3306      	adds	r3, #6
    65ea:	009b      	lsls	r3, r3, #2
    65ec:	18d3      	adds	r3, r2, r3
    65ee:	3304      	adds	r3, #4
    65f0:	681b      	ldr	r3, [r3, #0]
    65f2:	1dfa      	adds	r2, r7, #7
    65f4:	7812      	ldrb	r2, [r2, #0]
    65f6:	0010      	movs	r0, r2
    65f8:	2203      	movs	r2, #3
    65fa:	4002      	ands	r2, r0
    65fc:	00d2      	lsls	r2, r2, #3
    65fe:	20ff      	movs	r0, #255	; 0xff
    6600:	4090      	lsls	r0, r2
    6602:	0002      	movs	r2, r0
    6604:	43d2      	mvns	r2, r2
    6606:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    6608:	683b      	ldr	r3, [r7, #0]
    660a:	019b      	lsls	r3, r3, #6
    660c:	20ff      	movs	r0, #255	; 0xff
    660e:	4018      	ands	r0, r3
    6610:	1dfb      	adds	r3, r7, #7
    6612:	781b      	ldrb	r3, [r3, #0]
    6614:	001d      	movs	r5, r3
    6616:	2303      	movs	r3, #3
    6618:	402b      	ands	r3, r5
    661a:	00db      	lsls	r3, r3, #3
    661c:	4098      	lsls	r0, r3
    661e:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6620:	431a      	orrs	r2, r3
    6622:	1d8b      	adds	r3, r1, #6
    6624:	009b      	lsls	r3, r3, #2
    6626:	18e3      	adds	r3, r4, r3
    6628:	3304      	adds	r3, #4
    662a:	601a      	str	r2, [r3, #0]
}
    662c:	46c0      	nop			; (mov r8, r8)
    662e:	46bd      	mov	sp, r7
    6630:	b002      	add	sp, #8
    6632:	bdb0      	pop	{r4, r5, r7, pc}
    6634:	e000e100 	.word	0xe000e100
    6638:	e000ed00 	.word	0xe000ed00

0000663c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    663c:	b580      	push	{r7, lr}
    663e:	b082      	sub	sp, #8
    6640:	af00      	add	r7, sp, #0
    6642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    6644:	687b      	ldr	r3, [r7, #4]
    6646:	3b01      	subs	r3, #1
    6648:	4a0c      	ldr	r2, [pc, #48]	; (667c <SysTick_Config+0x40>)
    664a:	4293      	cmp	r3, r2
    664c:	d901      	bls.n	6652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
    664e:	2301      	movs	r3, #1
    6650:	e010      	b.n	6674 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    6652:	4b0b      	ldr	r3, [pc, #44]	; (6680 <SysTick_Config+0x44>)
    6654:	687a      	ldr	r2, [r7, #4]
    6656:	3a01      	subs	r2, #1
    6658:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    665a:	2301      	movs	r3, #1
    665c:	425b      	negs	r3, r3
    665e:	2103      	movs	r1, #3
    6660:	0018      	movs	r0, r3
    6662:	f7ff ff7d 	bl	6560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    6666:	4b06      	ldr	r3, [pc, #24]	; (6680 <SysTick_Config+0x44>)
    6668:	2200      	movs	r2, #0
    666a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    666c:	4b04      	ldr	r3, [pc, #16]	; (6680 <SysTick_Config+0x44>)
    666e:	2207      	movs	r2, #7
    6670:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    6672:	2300      	movs	r3, #0
}
    6674:	0018      	movs	r0, r3
    6676:	46bd      	mov	sp, r7
    6678:	b002      	add	sp, #8
    667a:	bd80      	pop	{r7, pc}
    667c:	00ffffff 	.word	0x00ffffff
    6680:	e000e010 	.word	0xe000e010

00006684 <init>:
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz.
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    6684:	b580      	push	{r7, lr}
    6686:	b082      	sub	sp, #8
    6688:	af00      	add	r7, sp, #0
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    668a:	4b3d      	ldr	r3, [pc, #244]	; (6780 <init+0xfc>)
    668c:	681a      	ldr	r2, [r3, #0]
    668e:	23fa      	movs	r3, #250	; 0xfa
    6690:	0099      	lsls	r1, r3, #2
    6692:	0010      	movs	r0, r2
    6694:	f008 f900 	bl	e898 <__udivsi3>
    6698:	0003      	movs	r3, r0
    669a:	0018      	movs	r0, r3
    669c:	f7ff ffce 	bl	663c <SysTick_Config>
    66a0:	1e03      	subs	r3, r0, #0
    66a2:	d000      	beq.n	66a6 <init+0x22>
  {
    // Capture error
    while ( 1 ) ;
    66a4:	e7fe      	b.n	66a4 <init+0x20>
  }
  NVIC_SetPriority (SysTick_IRQn,  (1 << __NVIC_PRIO_BITS) - 2);  /* set Priority for Systick Interrupt (2nd lowest) */
    66a6:	2301      	movs	r3, #1
    66a8:	425b      	negs	r3, r3
    66aa:	2102      	movs	r1, #2
    66ac:	0018      	movs	r0, r3
    66ae:	f7ff ff57 	bl	6560 <__NVIC_SetPriority>
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    66b2:	4b34      	ldr	r3, [pc, #208]	; (6784 <init+0x100>)
    66b4:	4a33      	ldr	r2, [pc, #204]	; (6784 <init+0x100>)
    66b6:	6a12      	ldr	r2, [r2, #32]
    66b8:	21fc      	movs	r1, #252	; 0xfc
    66ba:	430a      	orrs	r2, r1
    66bc:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    66be:	4b31      	ldr	r3, [pc, #196]	; (6784 <init+0x100>)
    66c0:	4a30      	ldr	r2, [pc, #192]	; (6784 <init+0x100>)
    66c2:	6a12      	ldr	r2, [r2, #32]
    66c4:	21fc      	movs	r1, #252	; 0xfc
    66c6:	0189      	lsls	r1, r1, #6
    66c8:	430a      	orrs	r2, r1
    66ca:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    66cc:	4b2d      	ldr	r3, [pc, #180]	; (6784 <init+0x100>)
    66ce:	4a2d      	ldr	r2, [pc, #180]	; (6784 <init+0x100>)
    66d0:	6a12      	ldr	r2, [r2, #32]
    66d2:	21a0      	movs	r1, #160	; 0xa0
    66d4:	02c9      	lsls	r1, r1, #11
    66d6:	430a      	orrs	r2, r1
    66d8:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    66da:	2300      	movs	r3, #0
    66dc:	607b      	str	r3, [r7, #4]
    66de:	e007      	b.n	66f0 <init+0x6c>
  {
    pinMode( ul, INPUT ) ;
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	2100      	movs	r1, #0
    66e4:	0018      	movs	r0, r3
    66e6:	f000 f8bd 	bl	6864 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    66ea:	687b      	ldr	r3, [r7, #4]
    66ec:	3301      	adds	r3, #1
    66ee:	607b      	str	r3, [r7, #4]
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	2b12      	cmp	r3, #18
    66f4:	d9f4      	bls.n	66e0 <init+0x5c>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	4b23      	ldr	r3, [pc, #140]	; (6788 <init+0x104>)
    66fa:	785b      	ldrb	r3, [r3, #1]
    66fc:	b2db      	uxtb	r3, r3
    66fe:	b25b      	sxtb	r3, r3
    6700:	2b00      	cmp	r3, #0
    6702:	dbf9      	blt.n	66f8 <init+0x74>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    6704:	4b20      	ldr	r3, [pc, #128]	; (6788 <init+0x104>)
    6706:	4a21      	ldr	r2, [pc, #132]	; (678c <init+0x108>)
    6708:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    670a:	46c0      	nop			; (mov r8, r8)
    670c:	4b20      	ldr	r3, [pc, #128]	; (6790 <init+0x10c>)
    670e:	7e5b      	ldrb	r3, [r3, #25]
    6710:	061b      	lsls	r3, r3, #24
    6712:	0fdb      	lsrs	r3, r3, #31
    6714:	b2db      	uxtb	r3, r3
    6716:	2b01      	cmp	r3, #1
    6718:	d0f8      	beq.n	670c <init+0x88>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    671a:	4b1d      	ldr	r3, [pc, #116]	; (6790 <init+0x10c>)
    671c:	22e4      	movs	r2, #228	; 0xe4
    671e:	00d2      	lsls	r2, r2, #3
    6720:	809a      	strh	r2, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    6722:	4b1b      	ldr	r3, [pc, #108]	; (6790 <init+0x10c>)
    6724:	223f      	movs	r2, #63	; 0x3f
    6726:	70da      	strb	r2, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    6728:	46c0      	nop			; (mov r8, r8)
    672a:	4b19      	ldr	r3, [pc, #100]	; (6790 <init+0x10c>)
    672c:	7e5b      	ldrb	r3, [r3, #25]
    672e:	061b      	lsls	r3, r3, #24
    6730:	0fdb      	lsrs	r3, r3, #31
    6732:	b2db      	uxtb	r3, r3
    6734:	2b01      	cmp	r3, #1
    6736:	d0f8      	beq.n	672a <init+0xa6>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    6738:	4b15      	ldr	r3, [pc, #84]	; (6790 <init+0x10c>)
    673a:	22c0      	movs	r2, #192	; 0xc0
    673c:	0152      	lsls	r2, r2, #5
    673e:	611a      	str	r2, [r3, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    6740:	4b13      	ldr	r3, [pc, #76]	; (6790 <init+0x10c>)
    6742:	2200      	movs	r2, #0
    6744:	709a      	strb	r2, [r3, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    6746:	2000      	movs	r0, #0
    6748:	f000 f828 	bl	679c <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    674c:	46c0      	nop			; (mov r8, r8)
    674e:	4b0e      	ldr	r3, [pc, #56]	; (6788 <init+0x104>)
    6750:	785b      	ldrb	r3, [r3, #1]
    6752:	b2db      	uxtb	r3, r3
    6754:	b25b      	sxtb	r3, r3
    6756:	2b00      	cmp	r3, #0
    6758:	dbf9      	blt.n	674e <init+0xca>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    675a:	4b0b      	ldr	r3, [pc, #44]	; (6788 <init+0x104>)
    675c:	4a0d      	ldr	r2, [pc, #52]	; (6794 <init+0x110>)
    675e:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    6760:	46c0      	nop			; (mov r8, r8)
    6762:	4b0d      	ldr	r3, [pc, #52]	; (6798 <init+0x114>)
    6764:	79db      	ldrb	r3, [r3, #7]
    6766:	061b      	lsls	r3, r3, #24
    6768:	0fdb      	lsrs	r3, r3, #31
    676a:	b2db      	uxtb	r3, r3
    676c:	2b01      	cmp	r3, #1
    676e:	d0f8      	beq.n	6762 <init+0xde>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    6770:	4b09      	ldr	r3, [pc, #36]	; (6798 <init+0x114>)
    6772:	2241      	movs	r2, #65	; 0x41
    6774:	705a      	strb	r2, [r3, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    6776:	46c0      	nop			; (mov r8, r8)
    6778:	46bd      	mov	sp, r7
    677a:	b002      	add	sp, #8
    677c:	bd80      	pop	{r7, pc}
    677e:	46c0      	nop			; (mov r8, r8)
    6780:	20000048 	.word	0x20000048
    6784:	40000400 	.word	0x40000400
    6788:	40000c00 	.word	0x40000c00
    678c:	0000401e 	.word	0x0000401e
    6790:	42004000 	.word	0x42004000
    6794:	00004021 	.word	0x00004021
    6798:	42004800 	.word	0x42004800

0000679c <analogReference>:
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    679c:	b580      	push	{r7, lr}
    679e:	b082      	sub	sp, #8
    67a0:	af00      	add	r7, sp, #0
    67a2:	0002      	movs	r2, r0
    67a4:	1dfb      	adds	r3, r7, #7
    67a6:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    67a8:	4b2b      	ldr	r3, [pc, #172]	; (6858 <analogReference+0xbc>)
    67aa:	7e5b      	ldrb	r3, [r3, #25]
    67ac:	061b      	lsls	r3, r3, #24
    67ae:	0fdb      	lsrs	r3, r3, #31
    67b0:	b2db      	uxtb	r3, r3
    67b2:	2b01      	cmp	r3, #1
    67b4:	d0f8      	beq.n	67a8 <analogReference+0xc>
  syncADC();
  switch (mode)
    67b6:	1dfb      	adds	r3, r7, #7
    67b8:	781b      	ldrb	r3, [r3, #0]
    67ba:	2b05      	cmp	r3, #5
    67bc:	d839      	bhi.n	6832 <analogReference+0x96>
    67be:	009a      	lsls	r2, r3, #2
    67c0:	4b26      	ldr	r3, [pc, #152]	; (685c <analogReference+0xc0>)
    67c2:	18d3      	adds	r3, r2, r3
    67c4:	681b      	ldr	r3, [r3, #0]
    67c6:	469f      	mov	pc, r3
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    67c8:	4a23      	ldr	r2, [pc, #140]	; (6858 <analogReference+0xbc>)
    67ca:	6913      	ldr	r3, [r2, #16]
    67cc:	4924      	ldr	r1, [pc, #144]	; (6860 <analogReference+0xc4>)
    67ce:	400b      	ands	r3, r1
    67d0:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    67d2:	4a21      	ldr	r2, [pc, #132]	; (6858 <analogReference+0xbc>)
    67d4:	7853      	ldrb	r3, [r2, #1]
    67d6:	210f      	movs	r1, #15
    67d8:	438b      	bics	r3, r1
    67da:	1c19      	adds	r1, r3, #0
    67dc:	2301      	movs	r3, #1
    67de:	430b      	orrs	r3, r1
    67e0:	7053      	strb	r3, [r2, #1]
      break;
    67e2:	e035      	b.n	6850 <analogReference+0xb4>

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    67e4:	4a1c      	ldr	r2, [pc, #112]	; (6858 <analogReference+0xbc>)
    67e6:	6913      	ldr	r3, [r2, #16]
    67e8:	491d      	ldr	r1, [pc, #116]	; (6860 <analogReference+0xc4>)
    67ea:	400b      	ands	r3, r1
    67ec:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    67ee:	4a1a      	ldr	r2, [pc, #104]	; (6858 <analogReference+0xbc>)
    67f0:	7853      	ldrb	r3, [r2, #1]
    67f2:	210f      	movs	r1, #15
    67f4:	438b      	bics	r3, r1
    67f6:	1c19      	adds	r1, r3, #0
    67f8:	2303      	movs	r3, #3
    67fa:	430b      	orrs	r3, r1
    67fc:	7053      	strb	r3, [r2, #1]
      break;
    67fe:	e027      	b.n	6850 <analogReference+0xb4>

    case AR_INTERNAL1V0:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    6800:	4a15      	ldr	r2, [pc, #84]	; (6858 <analogReference+0xbc>)
    6802:	6913      	ldr	r3, [r2, #16]
    6804:	4916      	ldr	r1, [pc, #88]	; (6860 <analogReference+0xc4>)
    6806:	400b      	ands	r3, r1
    6808:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
    680a:	4a13      	ldr	r2, [pc, #76]	; (6858 <analogReference+0xbc>)
    680c:	7853      	ldrb	r3, [r2, #1]
    680e:	210f      	movs	r1, #15
    6810:	438b      	bics	r3, r1
    6812:	7053      	strb	r3, [r2, #1]
      break;
    6814:	e01c      	b.n	6850 <analogReference+0xb4>

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    6816:	4a10      	ldr	r2, [pc, #64]	; (6858 <analogReference+0xbc>)
    6818:	6913      	ldr	r3, [r2, #16]
    681a:	4911      	ldr	r1, [pc, #68]	; (6860 <analogReference+0xc4>)
    681c:	400b      	ands	r3, r1
    681e:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    6820:	4a0d      	ldr	r2, [pc, #52]	; (6858 <analogReference+0xbc>)
    6822:	7853      	ldrb	r3, [r2, #1]
    6824:	210f      	movs	r1, #15
    6826:	438b      	bics	r3, r1
    6828:	1c19      	adds	r1, r3, #0
    682a:	2302      	movs	r3, #2
    682c:	430b      	orrs	r3, r1
    682e:	7053      	strb	r3, [r2, #1]
      break;
    6830:	e00e      	b.n	6850 <analogReference+0xb4>

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    6832:	4a09      	ldr	r2, [pc, #36]	; (6858 <analogReference+0xbc>)
    6834:	6913      	ldr	r3, [r2, #16]
    6836:	21f0      	movs	r1, #240	; 0xf0
    6838:	0509      	lsls	r1, r1, #20
    683a:	430b      	orrs	r3, r1
    683c:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    683e:	4a06      	ldr	r2, [pc, #24]	; (6858 <analogReference+0xbc>)
    6840:	7853      	ldrb	r3, [r2, #1]
    6842:	210f      	movs	r1, #15
    6844:	438b      	bics	r3, r1
    6846:	1c19      	adds	r1, r3, #0
    6848:	2302      	movs	r3, #2
    684a:	430b      	orrs	r3, r1
    684c:	7053      	strb	r3, [r2, #1]
      break;
    684e:	46c0      	nop			; (mov r8, r8)
  }
}
    6850:	46c0      	nop			; (mov r8, r8)
    6852:	46bd      	mov	sp, r7
    6854:	b002      	add	sp, #8
    6856:	bd80      	pop	{r7, pc}
    6858:	42004000 	.word	0x42004000
    685c:	00013510 	.word	0x00013510
    6860:	f0ffffff 	.word	0xf0ffffff

00006864 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    6864:	b590      	push	{r4, r7, lr}
    6866:	b083      	sub	sp, #12
    6868:	af00      	add	r7, sp, #0
    686a:	6078      	str	r0, [r7, #4]
    686c:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    686e:	4990      	ldr	r1, [pc, #576]	; (6ab0 <pinMode+0x24c>)
    6870:	687a      	ldr	r2, [r7, #4]
    6872:	0013      	movs	r3, r2
    6874:	005b      	lsls	r3, r3, #1
    6876:	189b      	adds	r3, r3, r2
    6878:	00db      	lsls	r3, r3, #3
    687a:	18cb      	adds	r3, r1, r3
    687c:	3308      	adds	r3, #8
    687e:	781b      	ldrb	r3, [r3, #0]
    6880:	b25b      	sxtb	r3, r3
    6882:	3301      	adds	r3, #1
    6884:	d100      	bne.n	6888 <pinMode+0x24>
    6886:	e10e      	b.n	6aa6 <pinMode+0x242>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    6888:	683b      	ldr	r3, [r7, #0]
    688a:	2b01      	cmp	r3, #1
    688c:	d100      	bne.n	6890 <pinMode+0x2c>
    688e:	e0d6      	b.n	6a3e <pinMode+0x1da>
    6890:	d305      	bcc.n	689e <pinMode+0x3a>
    6892:	2b02      	cmp	r3, #2
    6894:	d037      	beq.n	6906 <pinMode+0xa2>
    6896:	2b03      	cmp	r3, #3
    6898:	d100      	bne.n	689c <pinMode+0x38>
    689a:	e082      	b.n	69a2 <pinMode+0x13e>
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    default:
      // do nothing
    break ;
    689c:	e104      	b.n	6aa8 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    689e:	4885      	ldr	r0, [pc, #532]	; (6ab4 <pinMode+0x250>)
    68a0:	4983      	ldr	r1, [pc, #524]	; (6ab0 <pinMode+0x24c>)
    68a2:	687a      	ldr	r2, [r7, #4]
    68a4:	0013      	movs	r3, r2
    68a6:	005b      	lsls	r3, r3, #1
    68a8:	189b      	adds	r3, r3, r2
    68aa:	00db      	lsls	r3, r3, #3
    68ac:	565b      	ldrsb	r3, [r3, r1]
    68ae:	001c      	movs	r4, r3
    68b0:	497f      	ldr	r1, [pc, #508]	; (6ab0 <pinMode+0x24c>)
    68b2:	687a      	ldr	r2, [r7, #4]
    68b4:	0013      	movs	r3, r2
    68b6:	005b      	lsls	r3, r3, #1
    68b8:	189b      	adds	r3, r3, r2
    68ba:	00db      	lsls	r3, r3, #3
    68bc:	18cb      	adds	r3, r1, r3
    68be:	3304      	adds	r3, #4
    68c0:	681b      	ldr	r3, [r3, #0]
    68c2:	2140      	movs	r1, #64	; 0x40
    68c4:	01e2      	lsls	r2, r4, #7
    68c6:	1882      	adds	r2, r0, r2
    68c8:	18d3      	adds	r3, r2, r3
    68ca:	185b      	adds	r3, r3, r1
    68cc:	2202      	movs	r2, #2
    68ce:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    68d0:	4878      	ldr	r0, [pc, #480]	; (6ab4 <pinMode+0x250>)
    68d2:	4977      	ldr	r1, [pc, #476]	; (6ab0 <pinMode+0x24c>)
    68d4:	687a      	ldr	r2, [r7, #4]
    68d6:	0013      	movs	r3, r2
    68d8:	005b      	lsls	r3, r3, #1
    68da:	189b      	adds	r3, r3, r2
    68dc:	00db      	lsls	r3, r3, #3
    68de:	565b      	ldrsb	r3, [r3, r1]
    68e0:	001c      	movs	r4, r3
    68e2:	4973      	ldr	r1, [pc, #460]	; (6ab0 <pinMode+0x24c>)
    68e4:	687a      	ldr	r2, [r7, #4]
    68e6:	0013      	movs	r3, r2
    68e8:	005b      	lsls	r3, r3, #1
    68ea:	189b      	adds	r3, r3, r2
    68ec:	00db      	lsls	r3, r3, #3
    68ee:	18cb      	adds	r3, r1, r3
    68f0:	3304      	adds	r3, #4
    68f2:	681b      	ldr	r3, [r3, #0]
    68f4:	2201      	movs	r2, #1
    68f6:	409a      	lsls	r2, r3
    68f8:	0013      	movs	r3, r2
    68fa:	001a      	movs	r2, r3
    68fc:	01e3      	lsls	r3, r4, #7
    68fe:	18c3      	adds	r3, r0, r3
    6900:	3304      	adds	r3, #4
    6902:	601a      	str	r2, [r3, #0]
    break ;
    6904:	e0d0      	b.n	6aa8 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6906:	486b      	ldr	r0, [pc, #428]	; (6ab4 <pinMode+0x250>)
    6908:	4969      	ldr	r1, [pc, #420]	; (6ab0 <pinMode+0x24c>)
    690a:	687a      	ldr	r2, [r7, #4]
    690c:	0013      	movs	r3, r2
    690e:	005b      	lsls	r3, r3, #1
    6910:	189b      	adds	r3, r3, r2
    6912:	00db      	lsls	r3, r3, #3
    6914:	565b      	ldrsb	r3, [r3, r1]
    6916:	001c      	movs	r4, r3
    6918:	4965      	ldr	r1, [pc, #404]	; (6ab0 <pinMode+0x24c>)
    691a:	687a      	ldr	r2, [r7, #4]
    691c:	0013      	movs	r3, r2
    691e:	005b      	lsls	r3, r3, #1
    6920:	189b      	adds	r3, r3, r2
    6922:	00db      	lsls	r3, r3, #3
    6924:	18cb      	adds	r3, r1, r3
    6926:	3304      	adds	r3, #4
    6928:	681b      	ldr	r3, [r3, #0]
    692a:	2140      	movs	r1, #64	; 0x40
    692c:	01e2      	lsls	r2, r4, #7
    692e:	1882      	adds	r2, r0, r2
    6930:	18d3      	adds	r3, r2, r3
    6932:	185b      	adds	r3, r3, r1
    6934:	2206      	movs	r2, #6
    6936:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6938:	485e      	ldr	r0, [pc, #376]	; (6ab4 <pinMode+0x250>)
    693a:	495d      	ldr	r1, [pc, #372]	; (6ab0 <pinMode+0x24c>)
    693c:	687a      	ldr	r2, [r7, #4]
    693e:	0013      	movs	r3, r2
    6940:	005b      	lsls	r3, r3, #1
    6942:	189b      	adds	r3, r3, r2
    6944:	00db      	lsls	r3, r3, #3
    6946:	565b      	ldrsb	r3, [r3, r1]
    6948:	001c      	movs	r4, r3
    694a:	4959      	ldr	r1, [pc, #356]	; (6ab0 <pinMode+0x24c>)
    694c:	687a      	ldr	r2, [r7, #4]
    694e:	0013      	movs	r3, r2
    6950:	005b      	lsls	r3, r3, #1
    6952:	189b      	adds	r3, r3, r2
    6954:	00db      	lsls	r3, r3, #3
    6956:	18cb      	adds	r3, r1, r3
    6958:	3304      	adds	r3, #4
    695a:	681b      	ldr	r3, [r3, #0]
    695c:	2201      	movs	r2, #1
    695e:	409a      	lsls	r2, r3
    6960:	0013      	movs	r3, r2
    6962:	001a      	movs	r2, r3
    6964:	01e3      	lsls	r3, r4, #7
    6966:	18c3      	adds	r3, r0, r3
    6968:	3304      	adds	r3, #4
    696a:	601a      	str	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    696c:	4851      	ldr	r0, [pc, #324]	; (6ab4 <pinMode+0x250>)
    696e:	4950      	ldr	r1, [pc, #320]	; (6ab0 <pinMode+0x24c>)
    6970:	687a      	ldr	r2, [r7, #4]
    6972:	0013      	movs	r3, r2
    6974:	005b      	lsls	r3, r3, #1
    6976:	189b      	adds	r3, r3, r2
    6978:	00db      	lsls	r3, r3, #3
    697a:	565b      	ldrsb	r3, [r3, r1]
    697c:	001c      	movs	r4, r3
    697e:	494c      	ldr	r1, [pc, #304]	; (6ab0 <pinMode+0x24c>)
    6980:	687a      	ldr	r2, [r7, #4]
    6982:	0013      	movs	r3, r2
    6984:	005b      	lsls	r3, r3, #1
    6986:	189b      	adds	r3, r3, r2
    6988:	00db      	lsls	r3, r3, #3
    698a:	18cb      	adds	r3, r1, r3
    698c:	3304      	adds	r3, #4
    698e:	681b      	ldr	r3, [r3, #0]
    6990:	2201      	movs	r2, #1
    6992:	409a      	lsls	r2, r3
    6994:	0013      	movs	r3, r2
    6996:	001a      	movs	r2, r3
    6998:	01e3      	lsls	r3, r4, #7
    699a:	18c3      	adds	r3, r0, r3
    699c:	3318      	adds	r3, #24
    699e:	601a      	str	r2, [r3, #0]
    break ;
    69a0:	e082      	b.n	6aa8 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    69a2:	4844      	ldr	r0, [pc, #272]	; (6ab4 <pinMode+0x250>)
    69a4:	4942      	ldr	r1, [pc, #264]	; (6ab0 <pinMode+0x24c>)
    69a6:	687a      	ldr	r2, [r7, #4]
    69a8:	0013      	movs	r3, r2
    69aa:	005b      	lsls	r3, r3, #1
    69ac:	189b      	adds	r3, r3, r2
    69ae:	00db      	lsls	r3, r3, #3
    69b0:	565b      	ldrsb	r3, [r3, r1]
    69b2:	001c      	movs	r4, r3
    69b4:	493e      	ldr	r1, [pc, #248]	; (6ab0 <pinMode+0x24c>)
    69b6:	687a      	ldr	r2, [r7, #4]
    69b8:	0013      	movs	r3, r2
    69ba:	005b      	lsls	r3, r3, #1
    69bc:	189b      	adds	r3, r3, r2
    69be:	00db      	lsls	r3, r3, #3
    69c0:	18cb      	adds	r3, r1, r3
    69c2:	3304      	adds	r3, #4
    69c4:	681b      	ldr	r3, [r3, #0]
    69c6:	2140      	movs	r1, #64	; 0x40
    69c8:	01e2      	lsls	r2, r4, #7
    69ca:	1882      	adds	r2, r0, r2
    69cc:	18d3      	adds	r3, r2, r3
    69ce:	185b      	adds	r3, r3, r1
    69d0:	2206      	movs	r2, #6
    69d2:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    69d4:	4837      	ldr	r0, [pc, #220]	; (6ab4 <pinMode+0x250>)
    69d6:	4936      	ldr	r1, [pc, #216]	; (6ab0 <pinMode+0x24c>)
    69d8:	687a      	ldr	r2, [r7, #4]
    69da:	0013      	movs	r3, r2
    69dc:	005b      	lsls	r3, r3, #1
    69de:	189b      	adds	r3, r3, r2
    69e0:	00db      	lsls	r3, r3, #3
    69e2:	565b      	ldrsb	r3, [r3, r1]
    69e4:	001c      	movs	r4, r3
    69e6:	4932      	ldr	r1, [pc, #200]	; (6ab0 <pinMode+0x24c>)
    69e8:	687a      	ldr	r2, [r7, #4]
    69ea:	0013      	movs	r3, r2
    69ec:	005b      	lsls	r3, r3, #1
    69ee:	189b      	adds	r3, r3, r2
    69f0:	00db      	lsls	r3, r3, #3
    69f2:	18cb      	adds	r3, r1, r3
    69f4:	3304      	adds	r3, #4
    69f6:	681b      	ldr	r3, [r3, #0]
    69f8:	2201      	movs	r2, #1
    69fa:	409a      	lsls	r2, r3
    69fc:	0013      	movs	r3, r2
    69fe:	001a      	movs	r2, r3
    6a00:	01e3      	lsls	r3, r4, #7
    6a02:	18c3      	adds	r3, r0, r3
    6a04:	3304      	adds	r3, #4
    6a06:	601a      	str	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6a08:	482a      	ldr	r0, [pc, #168]	; (6ab4 <pinMode+0x250>)
    6a0a:	4929      	ldr	r1, [pc, #164]	; (6ab0 <pinMode+0x24c>)
    6a0c:	687a      	ldr	r2, [r7, #4]
    6a0e:	0013      	movs	r3, r2
    6a10:	005b      	lsls	r3, r3, #1
    6a12:	189b      	adds	r3, r3, r2
    6a14:	00db      	lsls	r3, r3, #3
    6a16:	565b      	ldrsb	r3, [r3, r1]
    6a18:	001c      	movs	r4, r3
    6a1a:	4925      	ldr	r1, [pc, #148]	; (6ab0 <pinMode+0x24c>)
    6a1c:	687a      	ldr	r2, [r7, #4]
    6a1e:	0013      	movs	r3, r2
    6a20:	005b      	lsls	r3, r3, #1
    6a22:	189b      	adds	r3, r3, r2
    6a24:	00db      	lsls	r3, r3, #3
    6a26:	18cb      	adds	r3, r1, r3
    6a28:	3304      	adds	r3, #4
    6a2a:	681b      	ldr	r3, [r3, #0]
    6a2c:	2201      	movs	r2, #1
    6a2e:	409a      	lsls	r2, r3
    6a30:	0013      	movs	r3, r2
    6a32:	001a      	movs	r2, r3
    6a34:	01e3      	lsls	r3, r4, #7
    6a36:	18c3      	adds	r3, r0, r3
    6a38:	3314      	adds	r3, #20
    6a3a:	601a      	str	r2, [r3, #0]
    break ;
    6a3c:	e034      	b.n	6aa8 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    6a3e:	481d      	ldr	r0, [pc, #116]	; (6ab4 <pinMode+0x250>)
    6a40:	491b      	ldr	r1, [pc, #108]	; (6ab0 <pinMode+0x24c>)
    6a42:	687a      	ldr	r2, [r7, #4]
    6a44:	0013      	movs	r3, r2
    6a46:	005b      	lsls	r3, r3, #1
    6a48:	189b      	adds	r3, r3, r2
    6a4a:	00db      	lsls	r3, r3, #3
    6a4c:	565b      	ldrsb	r3, [r3, r1]
    6a4e:	001c      	movs	r4, r3
    6a50:	4917      	ldr	r1, [pc, #92]	; (6ab0 <pinMode+0x24c>)
    6a52:	687a      	ldr	r2, [r7, #4]
    6a54:	0013      	movs	r3, r2
    6a56:	005b      	lsls	r3, r3, #1
    6a58:	189b      	adds	r3, r3, r2
    6a5a:	00db      	lsls	r3, r3, #3
    6a5c:	18cb      	adds	r3, r1, r3
    6a5e:	3304      	adds	r3, #4
    6a60:	681b      	ldr	r3, [r3, #0]
    6a62:	2140      	movs	r1, #64	; 0x40
    6a64:	01e2      	lsls	r2, r4, #7
    6a66:	1882      	adds	r2, r0, r2
    6a68:	18d3      	adds	r3, r2, r3
    6a6a:	185b      	adds	r3, r3, r1
    6a6c:	2202      	movs	r2, #2
    6a6e:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6a70:	4810      	ldr	r0, [pc, #64]	; (6ab4 <pinMode+0x250>)
    6a72:	490f      	ldr	r1, [pc, #60]	; (6ab0 <pinMode+0x24c>)
    6a74:	687a      	ldr	r2, [r7, #4]
    6a76:	0013      	movs	r3, r2
    6a78:	005b      	lsls	r3, r3, #1
    6a7a:	189b      	adds	r3, r3, r2
    6a7c:	00db      	lsls	r3, r3, #3
    6a7e:	565b      	ldrsb	r3, [r3, r1]
    6a80:	001c      	movs	r4, r3
    6a82:	490b      	ldr	r1, [pc, #44]	; (6ab0 <pinMode+0x24c>)
    6a84:	687a      	ldr	r2, [r7, #4]
    6a86:	0013      	movs	r3, r2
    6a88:	005b      	lsls	r3, r3, #1
    6a8a:	189b      	adds	r3, r3, r2
    6a8c:	00db      	lsls	r3, r3, #3
    6a8e:	18cb      	adds	r3, r1, r3
    6a90:	3304      	adds	r3, #4
    6a92:	681b      	ldr	r3, [r3, #0]
    6a94:	2201      	movs	r2, #1
    6a96:	409a      	lsls	r2, r3
    6a98:	0013      	movs	r3, r2
    6a9a:	001a      	movs	r2, r3
    6a9c:	01e3      	lsls	r3, r4, #7
    6a9e:	18c3      	adds	r3, r0, r3
    6aa0:	3308      	adds	r3, #8
    6aa2:	601a      	str	r2, [r3, #0]
    break ;
    6aa4:	e000      	b.n	6aa8 <pinMode+0x244>
    return ;
    6aa6:	46c0      	nop			; (mov r8, r8)
  }
}
    6aa8:	46bd      	mov	sp, r7
    6aaa:	b003      	add	sp, #12
    6aac:	bd90      	pop	{r4, r7, pc}
    6aae:	46c0      	nop			; (mov r8, r8)
    6ab0:	000136c8 	.word	0x000136c8
    6ab4:	41004400 	.word	0x41004400

00006ab8 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    6ab8:	b590      	push	{r4, r7, lr}
    6aba:	b087      	sub	sp, #28
    6abc:	af00      	add	r7, sp, #0
    6abe:	6078      	str	r0, [r7, #4]
    6ac0:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6ac2:	4934      	ldr	r1, [pc, #208]	; (6b94 <digitalWrite+0xdc>)
    6ac4:	687a      	ldr	r2, [r7, #4]
    6ac6:	0013      	movs	r3, r2
    6ac8:	005b      	lsls	r3, r3, #1
    6aca:	189b      	adds	r3, r3, r2
    6acc:	00db      	lsls	r3, r3, #3
    6ace:	18cb      	adds	r3, r1, r3
    6ad0:	3308      	adds	r3, #8
    6ad2:	781b      	ldrb	r3, [r3, #0]
    6ad4:	b25b      	sxtb	r3, r3
    6ad6:	3301      	adds	r3, #1
    6ad8:	d058      	beq.n	6b8c <digitalWrite+0xd4>
  {
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
    6ada:	2317      	movs	r3, #23
    6adc:	18f9      	adds	r1, r7, r3
    6ade:	482d      	ldr	r0, [pc, #180]	; (6b94 <digitalWrite+0xdc>)
    6ae0:	687a      	ldr	r2, [r7, #4]
    6ae2:	0013      	movs	r3, r2
    6ae4:	005b      	lsls	r3, r3, #1
    6ae6:	189b      	adds	r3, r3, r2
    6ae8:	00db      	lsls	r3, r3, #3
    6aea:	5c1b      	ldrb	r3, [r3, r0]
    6aec:	700b      	strb	r3, [r1, #0]
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    6aee:	4929      	ldr	r1, [pc, #164]	; (6b94 <digitalWrite+0xdc>)
    6af0:	687a      	ldr	r2, [r7, #4]
    6af2:	0013      	movs	r3, r2
    6af4:	005b      	lsls	r3, r3, #1
    6af6:	189b      	adds	r3, r3, r2
    6af8:	00db      	lsls	r3, r3, #3
    6afa:	18cb      	adds	r3, r1, r3
    6afc:	3304      	adds	r3, #4
    6afe:	681b      	ldr	r3, [r3, #0]
    6b00:	613b      	str	r3, [r7, #16]
  uint32_t pinMask = (1ul << pin);
    6b02:	2201      	movs	r2, #1
    6b04:	693b      	ldr	r3, [r7, #16]
    6b06:	409a      	lsls	r2, r3
    6b08:	0013      	movs	r3, r2
    6b0a:	60fb      	str	r3, [r7, #12]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    6b0c:	4a22      	ldr	r2, [pc, #136]	; (6b98 <digitalWrite+0xe0>)
    6b0e:	2317      	movs	r3, #23
    6b10:	18fb      	adds	r3, r7, r3
    6b12:	781b      	ldrb	r3, [r3, #0]
    6b14:	b25b      	sxtb	r3, r3
    6b16:	01db      	lsls	r3, r3, #7
    6b18:	18d3      	adds	r3, r2, r3
    6b1a:	3308      	adds	r3, #8
    6b1c:	681b      	ldr	r3, [r3, #0]
    6b1e:	68fa      	ldr	r2, [r7, #12]
    6b20:	4013      	ands	r3, r2
    6b22:	d118      	bne.n	6b56 <digitalWrite+0x9e>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    6b24:	4c1c      	ldr	r4, [pc, #112]	; (6b98 <digitalWrite+0xe0>)
    6b26:	2317      	movs	r3, #23
    6b28:	18fb      	adds	r3, r7, r3
    6b2a:	781b      	ldrb	r3, [r3, #0]
    6b2c:	b25b      	sxtb	r3, r3
    6b2e:	683a      	ldr	r2, [r7, #0]
    6b30:	1e51      	subs	r1, r2, #1
    6b32:	418a      	sbcs	r2, r1
    6b34:	b2d1      	uxtb	r1, r2
    6b36:	2040      	movs	r0, #64	; 0x40
    6b38:	01db      	lsls	r3, r3, #7
    6b3a:	18e2      	adds	r2, r4, r3
    6b3c:	693b      	ldr	r3, [r7, #16]
    6b3e:	18d3      	adds	r3, r2, r3
    6b40:	181a      	adds	r2, r3, r0
    6b42:	7813      	ldrb	r3, [r2, #0]
    6b44:	2001      	movs	r0, #1
    6b46:	4001      	ands	r1, r0
    6b48:	0088      	lsls	r0, r1, #2
    6b4a:	2104      	movs	r1, #4
    6b4c:	438b      	bics	r3, r1
    6b4e:	1c19      	adds	r1, r3, #0
    6b50:	1c03      	adds	r3, r0, #0
    6b52:	430b      	orrs	r3, r1
    6b54:	7013      	strb	r3, [r2, #0]
  }

  switch ( ulVal )
    6b56:	683b      	ldr	r3, [r7, #0]
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d10a      	bne.n	6b72 <digitalWrite+0xba>
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    6b5c:	4a0e      	ldr	r2, [pc, #56]	; (6b98 <digitalWrite+0xe0>)
    6b5e:	2317      	movs	r3, #23
    6b60:	18fb      	adds	r3, r7, r3
    6b62:	781b      	ldrb	r3, [r3, #0]
    6b64:	b25b      	sxtb	r3, r3
    6b66:	01db      	lsls	r3, r3, #7
    6b68:	18d3      	adds	r3, r2, r3
    6b6a:	3314      	adds	r3, #20
    6b6c:	68fa      	ldr	r2, [r7, #12]
    6b6e:	601a      	str	r2, [r3, #0]
    break ;
    6b70:	e00a      	b.n	6b88 <digitalWrite+0xd0>

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    6b72:	4a09      	ldr	r2, [pc, #36]	; (6b98 <digitalWrite+0xe0>)
    6b74:	2317      	movs	r3, #23
    6b76:	18fb      	adds	r3, r7, r3
    6b78:	781b      	ldrb	r3, [r3, #0]
    6b7a:	b25b      	sxtb	r3, r3
    6b7c:	01db      	lsls	r3, r3, #7
    6b7e:	18d3      	adds	r3, r2, r3
    6b80:	3318      	adds	r3, #24
    6b82:	68fa      	ldr	r2, [r7, #12]
    6b84:	601a      	str	r2, [r3, #0]
    break ;
    6b86:	46c0      	nop			; (mov r8, r8)
  }

  return ;
    6b88:	46c0      	nop			; (mov r8, r8)
    6b8a:	e000      	b.n	6b8e <digitalWrite+0xd6>
    return ;
    6b8c:	46c0      	nop			; (mov r8, r8)
}
    6b8e:	46bd      	mov	sp, r7
    6b90:	b007      	add	sp, #28
    6b92:	bd90      	pop	{r4, r7, pc}
    6b94:	000136c8 	.word	0x000136c8
    6b98:	41004400 	.word	0x41004400

00006b9c <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    6b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b9e:	b085      	sub	sp, #20
    6ba0:	af00      	add	r7, sp, #0
    6ba2:	6078      	str	r0, [r7, #4]
    6ba4:	000a      	movs	r2, r1
    6ba6:	1cfb      	adds	r3, r7, #3
    6ba8:	701a      	strb	r2, [r3, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6baa:	49a0      	ldr	r1, [pc, #640]	; (6e2c <pinPeripheral+0x290>)
    6bac:	687a      	ldr	r2, [r7, #4]
    6bae:	0013      	movs	r3, r2
    6bb0:	005b      	lsls	r3, r3, #1
    6bb2:	189b      	adds	r3, r3, r2
    6bb4:	00db      	lsls	r3, r3, #3
    6bb6:	18cb      	adds	r3, r1, r3
    6bb8:	3308      	adds	r3, #8
    6bba:	781b      	ldrb	r3, [r3, #0]
    6bbc:	b25b      	sxtb	r3, r3
    6bbe:	3301      	adds	r3, #1
    6bc0:	d102      	bne.n	6bc8 <pinPeripheral+0x2c>
  {
    return -1 ;
    6bc2:	2301      	movs	r3, #1
    6bc4:	425b      	negs	r3, r3
    6bc6:	e12d      	b.n	6e24 <pinPeripheral+0x288>
  }

  switch ( ulPeripheral )
    6bc8:	1cfb      	adds	r3, r7, #3
    6bca:	781b      	ldrb	r3, [r3, #0]
    6bcc:	b25b      	sxtb	r3, r3
    6bce:	3301      	adds	r3, #1
    6bd0:	2b0c      	cmp	r3, #12
    6bd2:	d900      	bls.n	6bd6 <pinPeripheral+0x3a>
    6bd4:	e125      	b.n	6e22 <pinPeripheral+0x286>
    6bd6:	009a      	lsls	r2, r3, #2
    6bd8:	4b95      	ldr	r3, [pc, #596]	; (6e30 <pinPeripheral+0x294>)
    6bda:	18d3      	adds	r3, r2, r3
    6bdc:	681b      	ldr	r3, [r3, #0]
    6bde:	469f      	mov	pc, r3
    case PIO_OUTPUT:
      // Disable peripheral muxing, done in pinMode
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
    6be0:	1cfb      	adds	r3, r7, #3
    6be2:	781b      	ldrb	r3, [r3, #0]
    6be4:	b25b      	sxtb	r3, r3
    6be6:	2b09      	cmp	r3, #9
    6be8:	d105      	bne.n	6bf6 <pinPeripheral+0x5a>
      {
        pinMode( ulPin, INPUT ) ;
    6bea:	687b      	ldr	r3, [r7, #4]
    6bec:	2100      	movs	r1, #0
    6bee:	0018      	movs	r0, r3
    6bf0:	f7ff fe38 	bl	6864 <pinMode>
          {
            // PIO_DIGITAL, do we have to do something as all cases are covered?
          }
        }
      }
    break ;
    6bf4:	e114      	b.n	6e20 <pinPeripheral+0x284>
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    6bf6:	1cfb      	adds	r3, r7, #3
    6bf8:	781b      	ldrb	r3, [r3, #0]
    6bfa:	b25b      	sxtb	r3, r3
    6bfc:	2b0a      	cmp	r3, #10
    6bfe:	d105      	bne.n	6c0c <pinPeripheral+0x70>
          pinMode( ulPin, INPUT_PULLUP ) ;
    6c00:	687b      	ldr	r3, [r7, #4]
    6c02:	2102      	movs	r1, #2
    6c04:	0018      	movs	r0, r3
    6c06:	f7ff fe2d 	bl	6864 <pinMode>
    break ;
    6c0a:	e109      	b.n	6e20 <pinPeripheral+0x284>
          if ( ulPeripheral == PIO_OUTPUT )
    6c0c:	1cfb      	adds	r3, r7, #3
    6c0e:	781b      	ldrb	r3, [r3, #0]
    6c10:	b25b      	sxtb	r3, r3
    6c12:	2b0b      	cmp	r3, #11
    6c14:	d000      	beq.n	6c18 <pinPeripheral+0x7c>
    6c16:	e103      	b.n	6e20 <pinPeripheral+0x284>
            pinMode( ulPin, OUTPUT ) ;
    6c18:	687b      	ldr	r3, [r7, #4]
    6c1a:	2101      	movs	r1, #1
    6c1c:	0018      	movs	r0, r3
    6c1e:	f7ff fe21 	bl	6864 <pinMode>
    break ;
    6c22:	e0fd      	b.n	6e20 <pinPeripheral+0x284>
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6c24:	4981      	ldr	r1, [pc, #516]	; (6e2c <pinPeripheral+0x290>)
    6c26:	687a      	ldr	r2, [r7, #4]
    6c28:	0013      	movs	r3, r2
    6c2a:	005b      	lsls	r3, r3, #1
    6c2c:	189b      	adds	r3, r3, r2
    6c2e:	00db      	lsls	r3, r3, #3
    6c30:	18cb      	adds	r3, r1, r3
    6c32:	3304      	adds	r3, #4
    6c34:	681b      	ldr	r3, [r3, #0]
    6c36:	2201      	movs	r2, #1
    6c38:	4013      	ands	r3, r2
    6c3a:	d076      	beq.n	6d2a <pinPeripheral+0x18e>
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    6c3c:	487d      	ldr	r0, [pc, #500]	; (6e34 <pinPeripheral+0x298>)
    6c3e:	497b      	ldr	r1, [pc, #492]	; (6e2c <pinPeripheral+0x290>)
    6c40:	687a      	ldr	r2, [r7, #4]
    6c42:	0013      	movs	r3, r2
    6c44:	005b      	lsls	r3, r3, #1
    6c46:	189b      	adds	r3, r3, r2
    6c48:	00db      	lsls	r3, r3, #3
    6c4a:	565b      	ldrsb	r3, [r3, r1]
    6c4c:	001c      	movs	r4, r3
    6c4e:	4977      	ldr	r1, [pc, #476]	; (6e2c <pinPeripheral+0x290>)
    6c50:	687a      	ldr	r2, [r7, #4]
    6c52:	0013      	movs	r3, r2
    6c54:	005b      	lsls	r3, r3, #1
    6c56:	189b      	adds	r3, r3, r2
    6c58:	00db      	lsls	r3, r3, #3
    6c5a:	18cb      	adds	r3, r1, r3
    6c5c:	3304      	adds	r3, #4
    6c5e:	681b      	ldr	r3, [r3, #0]
    6c60:	085b      	lsrs	r3, r3, #1
    6c62:	2130      	movs	r1, #48	; 0x30
    6c64:	01e2      	lsls	r2, r4, #7
    6c66:	1882      	adds	r2, r0, r2
    6c68:	18d3      	adds	r3, r2, r3
    6c6a:	185b      	adds	r3, r3, r1
    6c6c:	781b      	ldrb	r3, [r3, #0]
    6c6e:	b2db      	uxtb	r3, r3
    6c70:	001a      	movs	r2, r3
    6c72:	230f      	movs	r3, #15
    6c74:	4013      	ands	r3, r2
    6c76:	60fb      	str	r3, [r7, #12]
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    6c78:	486e      	ldr	r0, [pc, #440]	; (6e34 <pinPeripheral+0x298>)
    6c7a:	496c      	ldr	r1, [pc, #432]	; (6e2c <pinPeripheral+0x290>)
    6c7c:	687a      	ldr	r2, [r7, #4]
    6c7e:	0013      	movs	r3, r2
    6c80:	005b      	lsls	r3, r3, #1
    6c82:	189b      	adds	r3, r3, r2
    6c84:	00db      	lsls	r3, r3, #3
    6c86:	565b      	ldrsb	r3, [r3, r1]
    6c88:	001d      	movs	r5, r3
    6c8a:	4968      	ldr	r1, [pc, #416]	; (6e2c <pinPeripheral+0x290>)
    6c8c:	687a      	ldr	r2, [r7, #4]
    6c8e:	0013      	movs	r3, r2
    6c90:	005b      	lsls	r3, r3, #1
    6c92:	189b      	adds	r3, r3, r2
    6c94:	00db      	lsls	r3, r3, #3
    6c96:	18cb      	adds	r3, r1, r3
    6c98:	3304      	adds	r3, #4
    6c9a:	681b      	ldr	r3, [r3, #0]
    6c9c:	085b      	lsrs	r3, r3, #1
    6c9e:	1cfa      	adds	r2, r7, #3
    6ca0:	7812      	ldrb	r2, [r2, #0]
    6ca2:	0112      	lsls	r2, r2, #4
    6ca4:	b2d1      	uxtb	r1, r2
    6ca6:	68fa      	ldr	r2, [r7, #12]
    6ca8:	b2d2      	uxtb	r2, r2
    6caa:	430a      	orrs	r2, r1
    6cac:	b2d4      	uxtb	r4, r2
    6cae:	2130      	movs	r1, #48	; 0x30
    6cb0:	01ea      	lsls	r2, r5, #7
    6cb2:	1882      	adds	r2, r0, r2
    6cb4:	18d3      	adds	r3, r2, r3
    6cb6:	185b      	adds	r3, r3, r1
    6cb8:	1c22      	adds	r2, r4, #0
    6cba:	701a      	strb	r2, [r3, #0]
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    6cbc:	4c5d      	ldr	r4, [pc, #372]	; (6e34 <pinPeripheral+0x298>)
    6cbe:	495b      	ldr	r1, [pc, #364]	; (6e2c <pinPeripheral+0x290>)
    6cc0:	687a      	ldr	r2, [r7, #4]
    6cc2:	0013      	movs	r3, r2
    6cc4:	005b      	lsls	r3, r3, #1
    6cc6:	189b      	adds	r3, r3, r2
    6cc8:	00db      	lsls	r3, r3, #3
    6cca:	565b      	ldrsb	r3, [r3, r1]
    6ccc:	001e      	movs	r6, r3
    6cce:	4957      	ldr	r1, [pc, #348]	; (6e2c <pinPeripheral+0x290>)
    6cd0:	687a      	ldr	r2, [r7, #4]
    6cd2:	0013      	movs	r3, r2
    6cd4:	005b      	lsls	r3, r3, #1
    6cd6:	189b      	adds	r3, r3, r2
    6cd8:	00db      	lsls	r3, r3, #3
    6cda:	18cb      	adds	r3, r1, r3
    6cdc:	3304      	adds	r3, #4
    6cde:	6819      	ldr	r1, [r3, #0]
    6ce0:	4d54      	ldr	r5, [pc, #336]	; (6e34 <pinPeripheral+0x298>)
    6ce2:	4852      	ldr	r0, [pc, #328]	; (6e2c <pinPeripheral+0x290>)
    6ce4:	687a      	ldr	r2, [r7, #4]
    6ce6:	0013      	movs	r3, r2
    6ce8:	005b      	lsls	r3, r3, #1
    6cea:	189b      	adds	r3, r3, r2
    6cec:	00db      	lsls	r3, r3, #3
    6cee:	561b      	ldrsb	r3, [r3, r0]
    6cf0:	469c      	mov	ip, r3
    6cf2:	484e      	ldr	r0, [pc, #312]	; (6e2c <pinPeripheral+0x290>)
    6cf4:	687a      	ldr	r2, [r7, #4]
    6cf6:	0013      	movs	r3, r2
    6cf8:	005b      	lsls	r3, r3, #1
    6cfa:	189b      	adds	r3, r3, r2
    6cfc:	00db      	lsls	r3, r3, #3
    6cfe:	18c3      	adds	r3, r0, r3
    6d00:	3304      	adds	r3, #4
    6d02:	681b      	ldr	r3, [r3, #0]
    6d04:	2040      	movs	r0, #64	; 0x40
    6d06:	4662      	mov	r2, ip
    6d08:	01d2      	lsls	r2, r2, #7
    6d0a:	18aa      	adds	r2, r5, r2
    6d0c:	18d3      	adds	r3, r2, r3
    6d0e:	181b      	adds	r3, r3, r0
    6d10:	781b      	ldrb	r3, [r3, #0]
    6d12:	b2db      	uxtb	r3, r3
    6d14:	2201      	movs	r2, #1
    6d16:	4313      	orrs	r3, r2
    6d18:	b2d8      	uxtb	r0, r3
    6d1a:	2240      	movs	r2, #64	; 0x40
    6d1c:	01f3      	lsls	r3, r6, #7
    6d1e:	18e3      	adds	r3, r4, r3
    6d20:	185b      	adds	r3, r3, r1
    6d22:	189b      	adds	r3, r3, r2
    6d24:	1c02      	adds	r2, r0, #0
    6d26:	701a      	strb	r2, [r3, #0]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
      }
#endif
    break ;
    6d28:	e07b      	b.n	6e22 <pinPeripheral+0x286>
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    6d2a:	4842      	ldr	r0, [pc, #264]	; (6e34 <pinPeripheral+0x298>)
    6d2c:	493f      	ldr	r1, [pc, #252]	; (6e2c <pinPeripheral+0x290>)
    6d2e:	687a      	ldr	r2, [r7, #4]
    6d30:	0013      	movs	r3, r2
    6d32:	005b      	lsls	r3, r3, #1
    6d34:	189b      	adds	r3, r3, r2
    6d36:	00db      	lsls	r3, r3, #3
    6d38:	565b      	ldrsb	r3, [r3, r1]
    6d3a:	001c      	movs	r4, r3
    6d3c:	493b      	ldr	r1, [pc, #236]	; (6e2c <pinPeripheral+0x290>)
    6d3e:	687a      	ldr	r2, [r7, #4]
    6d40:	0013      	movs	r3, r2
    6d42:	005b      	lsls	r3, r3, #1
    6d44:	189b      	adds	r3, r3, r2
    6d46:	00db      	lsls	r3, r3, #3
    6d48:	18cb      	adds	r3, r1, r3
    6d4a:	3304      	adds	r3, #4
    6d4c:	681b      	ldr	r3, [r3, #0]
    6d4e:	085b      	lsrs	r3, r3, #1
    6d50:	2130      	movs	r1, #48	; 0x30
    6d52:	01e2      	lsls	r2, r4, #7
    6d54:	1882      	adds	r2, r0, r2
    6d56:	18d3      	adds	r3, r2, r3
    6d58:	185b      	adds	r3, r3, r1
    6d5a:	781b      	ldrb	r3, [r3, #0]
    6d5c:	b2db      	uxtb	r3, r3
    6d5e:	001a      	movs	r2, r3
    6d60:	23f0      	movs	r3, #240	; 0xf0
    6d62:	4013      	ands	r3, r2
    6d64:	60bb      	str	r3, [r7, #8]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    6d66:	4833      	ldr	r0, [pc, #204]	; (6e34 <pinPeripheral+0x298>)
    6d68:	4930      	ldr	r1, [pc, #192]	; (6e2c <pinPeripheral+0x290>)
    6d6a:	687a      	ldr	r2, [r7, #4]
    6d6c:	0013      	movs	r3, r2
    6d6e:	005b      	lsls	r3, r3, #1
    6d70:	189b      	adds	r3, r3, r2
    6d72:	00db      	lsls	r3, r3, #3
    6d74:	565b      	ldrsb	r3, [r3, r1]
    6d76:	001d      	movs	r5, r3
    6d78:	492c      	ldr	r1, [pc, #176]	; (6e2c <pinPeripheral+0x290>)
    6d7a:	687a      	ldr	r2, [r7, #4]
    6d7c:	0013      	movs	r3, r2
    6d7e:	005b      	lsls	r3, r3, #1
    6d80:	189b      	adds	r3, r3, r2
    6d82:	00db      	lsls	r3, r3, #3
    6d84:	18cb      	adds	r3, r1, r3
    6d86:	3304      	adds	r3, #4
    6d88:	681b      	ldr	r3, [r3, #0]
    6d8a:	085b      	lsrs	r3, r3, #1
    6d8c:	1cfa      	adds	r2, r7, #3
    6d8e:	7812      	ldrb	r2, [r2, #0]
    6d90:	210f      	movs	r1, #15
    6d92:	400a      	ands	r2, r1
    6d94:	b2d1      	uxtb	r1, r2
    6d96:	68ba      	ldr	r2, [r7, #8]
    6d98:	b2d2      	uxtb	r2, r2
    6d9a:	430a      	orrs	r2, r1
    6d9c:	b2d4      	uxtb	r4, r2
    6d9e:	2130      	movs	r1, #48	; 0x30
    6da0:	01ea      	lsls	r2, r5, #7
    6da2:	1882      	adds	r2, r0, r2
    6da4:	18d3      	adds	r3, r2, r3
    6da6:	185b      	adds	r3, r3, r1
    6da8:	1c22      	adds	r2, r4, #0
    6daa:	701a      	strb	r2, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    6dac:	4c21      	ldr	r4, [pc, #132]	; (6e34 <pinPeripheral+0x298>)
    6dae:	491f      	ldr	r1, [pc, #124]	; (6e2c <pinPeripheral+0x290>)
    6db0:	687a      	ldr	r2, [r7, #4]
    6db2:	0013      	movs	r3, r2
    6db4:	005b      	lsls	r3, r3, #1
    6db6:	189b      	adds	r3, r3, r2
    6db8:	00db      	lsls	r3, r3, #3
    6dba:	565b      	ldrsb	r3, [r3, r1]
    6dbc:	001e      	movs	r6, r3
    6dbe:	491b      	ldr	r1, [pc, #108]	; (6e2c <pinPeripheral+0x290>)
    6dc0:	687a      	ldr	r2, [r7, #4]
    6dc2:	0013      	movs	r3, r2
    6dc4:	005b      	lsls	r3, r3, #1
    6dc6:	189b      	adds	r3, r3, r2
    6dc8:	00db      	lsls	r3, r3, #3
    6dca:	18cb      	adds	r3, r1, r3
    6dcc:	3304      	adds	r3, #4
    6dce:	6819      	ldr	r1, [r3, #0]
    6dd0:	4d18      	ldr	r5, [pc, #96]	; (6e34 <pinPeripheral+0x298>)
    6dd2:	4816      	ldr	r0, [pc, #88]	; (6e2c <pinPeripheral+0x290>)
    6dd4:	687a      	ldr	r2, [r7, #4]
    6dd6:	0013      	movs	r3, r2
    6dd8:	005b      	lsls	r3, r3, #1
    6dda:	189b      	adds	r3, r3, r2
    6ddc:	00db      	lsls	r3, r3, #3
    6dde:	561b      	ldrsb	r3, [r3, r0]
    6de0:	469c      	mov	ip, r3
    6de2:	4812      	ldr	r0, [pc, #72]	; (6e2c <pinPeripheral+0x290>)
    6de4:	687a      	ldr	r2, [r7, #4]
    6de6:	0013      	movs	r3, r2
    6de8:	005b      	lsls	r3, r3, #1
    6dea:	189b      	adds	r3, r3, r2
    6dec:	00db      	lsls	r3, r3, #3
    6dee:	18c3      	adds	r3, r0, r3
    6df0:	3304      	adds	r3, #4
    6df2:	681b      	ldr	r3, [r3, #0]
    6df4:	2040      	movs	r0, #64	; 0x40
    6df6:	4662      	mov	r2, ip
    6df8:	01d2      	lsls	r2, r2, #7
    6dfa:	18aa      	adds	r2, r5, r2
    6dfc:	18d3      	adds	r3, r2, r3
    6dfe:	181b      	adds	r3, r3, r0
    6e00:	781b      	ldrb	r3, [r3, #0]
    6e02:	b2db      	uxtb	r3, r3
    6e04:	2201      	movs	r2, #1
    6e06:	4313      	orrs	r3, r2
    6e08:	b2d8      	uxtb	r0, r3
    6e0a:	2240      	movs	r2, #64	; 0x40
    6e0c:	01f3      	lsls	r3, r6, #7
    6e0e:	18e3      	adds	r3, r4, r3
    6e10:	185b      	adds	r3, r3, r1
    6e12:	189b      	adds	r3, r3, r2
    6e14:	1c02      	adds	r2, r0, #0
    6e16:	701a      	strb	r2, [r3, #0]
    break ;
    6e18:	e003      	b.n	6e22 <pinPeripheral+0x286>

    case PIO_NOT_A_PIN:
      return -1l ;
    6e1a:	2301      	movs	r3, #1
    6e1c:	425b      	negs	r3, r3
    6e1e:	e001      	b.n	6e24 <pinPeripheral+0x288>
    break ;
    6e20:	46c0      	nop			; (mov r8, r8)
    break ;
  }

  return 0l ;
    6e22:	2300      	movs	r3, #0
}
    6e24:	0018      	movs	r0, r3
    6e26:	46bd      	mov	sp, r7
    6e28:	b005      	add	sp, #20
    6e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e2c:	000136c8 	.word	0x000136c8
    6e30:	00013528 	.word	0x00013528
    6e34:	41004400 	.word	0x41004400

00006e38 <_Z3maplllll>:

  return random(diff) + howsmall;
}

extern long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6e38:	b580      	push	{r7, lr}
    6e3a:	b084      	sub	sp, #16
    6e3c:	af00      	add	r7, sp, #0
    6e3e:	60f8      	str	r0, [r7, #12]
    6e40:	60b9      	str	r1, [r7, #8]
    6e42:	607a      	str	r2, [r7, #4]
    6e44:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6e46:	68fa      	ldr	r2, [r7, #12]
    6e48:	68bb      	ldr	r3, [r7, #8]
    6e4a:	1ad3      	subs	r3, r2, r3
    6e4c:	69b9      	ldr	r1, [r7, #24]
    6e4e:	683a      	ldr	r2, [r7, #0]
    6e50:	1a8a      	subs	r2, r1, r2
    6e52:	435a      	muls	r2, r3
    6e54:	0010      	movs	r0, r2
    6e56:	687a      	ldr	r2, [r7, #4]
    6e58:	68bb      	ldr	r3, [r7, #8]
    6e5a:	1ad3      	subs	r3, r2, r3
    6e5c:	0019      	movs	r1, r3
    6e5e:	f007 fda5 	bl	e9ac <__divsi3>
    6e62:	0003      	movs	r3, r0
    6e64:	001a      	movs	r2, r3
    6e66:	683b      	ldr	r3, [r7, #0]
    6e68:	18d3      	adds	r3, r2, r3
}
    6e6a:	0018      	movs	r0, r3
    6e6c:	46bd      	mov	sp, r7
    6e6e:	b004      	add	sp, #16
    6e70:	bd80      	pop	{r7, pc}

00006e72 <_ZNK6String14StringIfHelperEv>:
{
	// use a function pointer to allow for "if (s)" without the
	// complications of an operator bool(). for more information, see:
	// http://www.artima.com/cppsource/safebool.html
	typedef void (String::*StringIfHelperType)() const;
	void StringIfHelper() const {}
    6e72:	b580      	push	{r7, lr}
    6e74:	b082      	sub	sp, #8
    6e76:	af00      	add	r7, sp, #0
    6e78:	6078      	str	r0, [r7, #4]
    6e7a:	46c0      	nop			; (mov r8, r8)
    6e7c:	46bd      	mov	sp, r7
    6e7e:	b002      	add	sp, #8
    6e80:	bd80      	pop	{r7, pc}
	...

00006e84 <_ZNK6StringcvMS_KFvvEEv>:
	friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    6e84:	b580      	push	{r7, lr}
    6e86:	b082      	sub	sp, #8
    6e88:	af00      	add	r7, sp, #0
    6e8a:	6078      	str	r0, [r7, #4]
    6e8c:	6039      	str	r1, [r7, #0]
    6e8e:	683b      	ldr	r3, [r7, #0]
    6e90:	681b      	ldr	r3, [r3, #0]
    6e92:	2b00      	cmp	r3, #0
    6e94:	d106      	bne.n	6ea4 <_ZNK6StringcvMS_KFvvEEv+0x20>
    6e96:	687b      	ldr	r3, [r7, #4]
    6e98:	2200      	movs	r2, #0
    6e9a:	601a      	str	r2, [r3, #0]
    6e9c:	687b      	ldr	r3, [r7, #4]
    6e9e:	2200      	movs	r2, #0
    6ea0:	605a      	str	r2, [r3, #4]
    6ea2:	e005      	b.n	6eb0 <_ZNK6StringcvMS_KFvvEEv+0x2c>
    6ea4:	687b      	ldr	r3, [r7, #4]
    6ea6:	4a04      	ldr	r2, [pc, #16]	; (6eb8 <_ZNK6StringcvMS_KFvvEEv+0x34>)
    6ea8:	601a      	str	r2, [r3, #0]
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	2200      	movs	r2, #0
    6eae:	605a      	str	r2, [r3, #4]
    6eb0:	6878      	ldr	r0, [r7, #4]
    6eb2:	46bd      	mov	sp, r7
    6eb4:	b002      	add	sp, #8
    6eb6:	bd80      	pop	{r7, pc}
    6eb8:	00006e73 	.word	0x00006e73

00006ebc <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    6ebc:	b580      	push	{r7, lr}
    6ebe:	b086      	sub	sp, #24
    6ec0:	af00      	add	r7, sp, #0
    6ec2:	6078      	str	r0, [r7, #4]
    6ec4:	0008      	movs	r0, r1
    6ec6:	0011      	movs	r1, r2
    6ec8:	1cfb      	adds	r3, r7, #3
    6eca:	1c02      	adds	r2, r0, #0
    6ecc:	701a      	strb	r2, [r3, #0]
    6ece:	1cbb      	adds	r3, r7, #2
    6ed0:	1c0a      	adds	r2, r1, #0
    6ed2:	701a      	strb	r2, [r3, #0]
{
	init();
    6ed4:	687b      	ldr	r3, [r7, #4]
    6ed6:	0018      	movs	r0, r3
    6ed8:	f000 f842 	bl	6f60 <_ZN6String4initEv>
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
    6edc:	1cfb      	adds	r3, r7, #3
    6ede:	7818      	ldrb	r0, [r3, #0]
    6ee0:	1cbb      	adds	r3, r7, #2
    6ee2:	781a      	ldrb	r2, [r3, #0]
    6ee4:	230c      	movs	r3, #12
    6ee6:	18fb      	adds	r3, r7, r3
    6ee8:	0019      	movs	r1, r3
    6eea:	f006 fb8c 	bl	d606 <utoa>
	*this = buf;
    6eee:	230c      	movs	r3, #12
    6ef0:	18fa      	adds	r2, r7, r3
    6ef2:	687b      	ldr	r3, [r7, #4]
    6ef4:	0011      	movs	r1, r2
    6ef6:	0018      	movs	r0, r3
    6ef8:	f000 f936 	bl	7168 <_ZN6StringaSEPKc>
}
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	0018      	movs	r0, r3
    6f00:	46bd      	mov	sp, r7
    6f02:	b006      	add	sp, #24
    6f04:	bd80      	pop	{r7, pc}

00006f06 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
    6f06:	b580      	push	{r7, lr}
    6f08:	b08e      	sub	sp, #56	; 0x38
    6f0a:	af00      	add	r7, sp, #0
    6f0c:	60f8      	str	r0, [r7, #12]
    6f0e:	60b9      	str	r1, [r7, #8]
    6f10:	1dfb      	adds	r3, r7, #7
    6f12:	701a      	strb	r2, [r3, #0]
{
	init();
    6f14:	68fb      	ldr	r3, [r7, #12]
    6f16:	0018      	movs	r0, r3
    6f18:	f000 f822 	bl	6f60 <_ZN6String4initEv>
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
    6f1c:	1dfb      	adds	r3, r7, #7
    6f1e:	781a      	ldrb	r2, [r3, #0]
    6f20:	2314      	movs	r3, #20
    6f22:	18f9      	adds	r1, r7, r3
    6f24:	68bb      	ldr	r3, [r7, #8]
    6f26:	0018      	movs	r0, r3
    6f28:	f006 fae6 	bl	d4f8 <itoa>
	*this = buf;
    6f2c:	2314      	movs	r3, #20
    6f2e:	18fa      	adds	r2, r7, r3
    6f30:	68fb      	ldr	r3, [r7, #12]
    6f32:	0011      	movs	r1, r2
    6f34:	0018      	movs	r0, r3
    6f36:	f000 f917 	bl	7168 <_ZN6StringaSEPKc>
}
    6f3a:	68fb      	ldr	r3, [r7, #12]
    6f3c:	0018      	movs	r0, r3
    6f3e:	46bd      	mov	sp, r7
    6f40:	b00e      	add	sp, #56	; 0x38
    6f42:	bd80      	pop	{r7, pc}

00006f44 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
    6f44:	b580      	push	{r7, lr}
    6f46:	b082      	sub	sp, #8
    6f48:	af00      	add	r7, sp, #0
    6f4a:	6078      	str	r0, [r7, #4]
{
	free(buffer);
    6f4c:	687b      	ldr	r3, [r7, #4]
    6f4e:	681b      	ldr	r3, [r3, #0]
    6f50:	0018      	movs	r0, r3
    6f52:	f009 fc43 	bl	107dc <free>
}
    6f56:	687b      	ldr	r3, [r7, #4]
    6f58:	0018      	movs	r0, r3
    6f5a:	46bd      	mov	sp, r7
    6f5c:	b002      	add	sp, #8
    6f5e:	bd80      	pop	{r7, pc}

00006f60 <_ZN6String4initEv>:
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
    6f60:	b580      	push	{r7, lr}
    6f62:	b082      	sub	sp, #8
    6f64:	af00      	add	r7, sp, #0
    6f66:	6078      	str	r0, [r7, #4]
	buffer = NULL;
    6f68:	687b      	ldr	r3, [r7, #4]
    6f6a:	2200      	movs	r2, #0
    6f6c:	601a      	str	r2, [r3, #0]
	capacity = 0;
    6f6e:	687b      	ldr	r3, [r7, #4]
    6f70:	2200      	movs	r2, #0
    6f72:	605a      	str	r2, [r3, #4]
	len = 0;
    6f74:	687b      	ldr	r3, [r7, #4]
    6f76:	2200      	movs	r2, #0
    6f78:	609a      	str	r2, [r3, #8]
}
    6f7a:	46c0      	nop			; (mov r8, r8)
    6f7c:	46bd      	mov	sp, r7
    6f7e:	b002      	add	sp, #8
    6f80:	bd80      	pop	{r7, pc}

00006f82 <_ZN6String10invalidateEv>:

void String::invalidate(void)
{
    6f82:	b580      	push	{r7, lr}
    6f84:	b082      	sub	sp, #8
    6f86:	af00      	add	r7, sp, #0
    6f88:	6078      	str	r0, [r7, #4]
	if (buffer) free(buffer);
    6f8a:	687b      	ldr	r3, [r7, #4]
    6f8c:	681b      	ldr	r3, [r3, #0]
    6f8e:	2b00      	cmp	r3, #0
    6f90:	d004      	beq.n	6f9c <_ZN6String10invalidateEv+0x1a>
    6f92:	687b      	ldr	r3, [r7, #4]
    6f94:	681b      	ldr	r3, [r3, #0]
    6f96:	0018      	movs	r0, r3
    6f98:	f009 fc20 	bl	107dc <free>
	buffer = NULL;
    6f9c:	687b      	ldr	r3, [r7, #4]
    6f9e:	2200      	movs	r2, #0
    6fa0:	601a      	str	r2, [r3, #0]
	capacity = len = 0;
    6fa2:	687b      	ldr	r3, [r7, #4]
    6fa4:	2200      	movs	r2, #0
    6fa6:	609a      	str	r2, [r3, #8]
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	689a      	ldr	r2, [r3, #8]
    6fac:	687b      	ldr	r3, [r7, #4]
    6fae:	605a      	str	r2, [r3, #4]
}
    6fb0:	46c0      	nop			; (mov r8, r8)
    6fb2:	46bd      	mov	sp, r7
    6fb4:	b002      	add	sp, #8
    6fb6:	bd80      	pop	{r7, pc}

00006fb8 <_ZN6String7reserveEj>:

unsigned char String::reserve(unsigned int size)
{
    6fb8:	b580      	push	{r7, lr}
    6fba:	b082      	sub	sp, #8
    6fbc:	af00      	add	r7, sp, #0
    6fbe:	6078      	str	r0, [r7, #4]
    6fc0:	6039      	str	r1, [r7, #0]
	if (buffer && capacity >= size) return 1;
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	681b      	ldr	r3, [r3, #0]
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	d006      	beq.n	6fd8 <_ZN6String7reserveEj+0x20>
    6fca:	687b      	ldr	r3, [r7, #4]
    6fcc:	685a      	ldr	r2, [r3, #4]
    6fce:	683b      	ldr	r3, [r7, #0]
    6fd0:	429a      	cmp	r2, r3
    6fd2:	d301      	bcc.n	6fd8 <_ZN6String7reserveEj+0x20>
    6fd4:	2301      	movs	r3, #1
    6fd6:	e016      	b.n	7006 <_ZN6String7reserveEj+0x4e>
	if (changeBuffer(size)) {
    6fd8:	683a      	ldr	r2, [r7, #0]
    6fda:	687b      	ldr	r3, [r7, #4]
    6fdc:	0011      	movs	r1, r2
    6fde:	0018      	movs	r0, r3
    6fe0:	f000 f815 	bl	700e <_ZN6String12changeBufferEj>
    6fe4:	0003      	movs	r3, r0
    6fe6:	1e5a      	subs	r2, r3, #1
    6fe8:	4193      	sbcs	r3, r2
    6fea:	b2db      	uxtb	r3, r3
    6fec:	2b00      	cmp	r3, #0
    6fee:	d009      	beq.n	7004 <_ZN6String7reserveEj+0x4c>
		if (len == 0) buffer[0] = 0;
    6ff0:	687b      	ldr	r3, [r7, #4]
    6ff2:	689b      	ldr	r3, [r3, #8]
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	d103      	bne.n	7000 <_ZN6String7reserveEj+0x48>
    6ff8:	687b      	ldr	r3, [r7, #4]
    6ffa:	681b      	ldr	r3, [r3, #0]
    6ffc:	2200      	movs	r2, #0
    6ffe:	701a      	strb	r2, [r3, #0]
		return 1;
    7000:	2301      	movs	r3, #1
    7002:	e000      	b.n	7006 <_ZN6String7reserveEj+0x4e>
	}
	return 0;
    7004:	2300      	movs	r3, #0
}
    7006:	0018      	movs	r0, r3
    7008:	46bd      	mov	sp, r7
    700a:	b002      	add	sp, #8
    700c:	bd80      	pop	{r7, pc}

0000700e <_ZN6String12changeBufferEj>:

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    700e:	b580      	push	{r7, lr}
    7010:	b084      	sub	sp, #16
    7012:	af00      	add	r7, sp, #0
    7014:	6078      	str	r0, [r7, #4]
    7016:	6039      	str	r1, [r7, #0]
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	681a      	ldr	r2, [r3, #0]
    701c:	683b      	ldr	r3, [r7, #0]
    701e:	3301      	adds	r3, #1
    7020:	0019      	movs	r1, r3
    7022:	0010      	movs	r0, r2
    7024:	f00a fa72 	bl	1150c <realloc>
    7028:	0003      	movs	r3, r0
    702a:	60fb      	str	r3, [r7, #12]
	if (newbuffer) {
    702c:	68fb      	ldr	r3, [r7, #12]
    702e:	2b00      	cmp	r3, #0
    7030:	d007      	beq.n	7042 <_ZN6String12changeBufferEj+0x34>
		buffer = newbuffer;
    7032:	687b      	ldr	r3, [r7, #4]
    7034:	68fa      	ldr	r2, [r7, #12]
    7036:	601a      	str	r2, [r3, #0]
		capacity = maxStrLen;
    7038:	687b      	ldr	r3, [r7, #4]
    703a:	683a      	ldr	r2, [r7, #0]
    703c:	605a      	str	r2, [r3, #4]
		return 1;
    703e:	2301      	movs	r3, #1
    7040:	e000      	b.n	7044 <_ZN6String12changeBufferEj+0x36>
	}
	return 0;
    7042:	2300      	movs	r3, #0
}
    7044:	0018      	movs	r0, r3
    7046:	46bd      	mov	sp, r7
    7048:	b004      	add	sp, #16
    704a:	bd80      	pop	{r7, pc}

0000704c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    704c:	b580      	push	{r7, lr}
    704e:	b084      	sub	sp, #16
    7050:	af00      	add	r7, sp, #0
    7052:	60f8      	str	r0, [r7, #12]
    7054:	60b9      	str	r1, [r7, #8]
    7056:	607a      	str	r2, [r7, #4]
	if (!reserve(length)) {
    7058:	687a      	ldr	r2, [r7, #4]
    705a:	68fb      	ldr	r3, [r7, #12]
    705c:	0011      	movs	r1, r2
    705e:	0018      	movs	r0, r3
    7060:	f7ff ffaa 	bl	6fb8 <_ZN6String7reserveEj>
    7064:	0003      	movs	r3, r0
    7066:	425a      	negs	r2, r3
    7068:	4153      	adcs	r3, r2
    706a:	b2db      	uxtb	r3, r3
    706c:	2b00      	cmp	r3, #0
    706e:	d005      	beq.n	707c <_ZN6String4copyEPKcj+0x30>
		invalidate();
    7070:	68fb      	ldr	r3, [r7, #12]
    7072:	0018      	movs	r0, r3
    7074:	f7ff ff85 	bl	6f82 <_ZN6String10invalidateEv>
		return *this;
    7078:	68fb      	ldr	r3, [r7, #12]
    707a:	e00a      	b.n	7092 <_ZN6String4copyEPKcj+0x46>
	}
	len = length;
    707c:	68fb      	ldr	r3, [r7, #12]
    707e:	687a      	ldr	r2, [r7, #4]
    7080:	609a      	str	r2, [r3, #8]
	strcpy(buffer, cstr);
    7082:	68fb      	ldr	r3, [r7, #12]
    7084:	681b      	ldr	r3, [r3, #0]
    7086:	68ba      	ldr	r2, [r7, #8]
    7088:	0011      	movs	r1, r2
    708a:	0018      	movs	r0, r3
    708c:	f00a fa68 	bl	11560 <strcpy>
	return *this;
    7090:	68fb      	ldr	r3, [r7, #12]
}
    7092:	0018      	movs	r0, r3
    7094:	46bd      	mov	sp, r7
    7096:	b004      	add	sp, #16
    7098:	bd80      	pop	{r7, pc}

0000709a <_ZN6String4moveERS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    709a:	b580      	push	{r7, lr}
    709c:	b084      	sub	sp, #16
    709e:	af00      	add	r7, sp, #0
    70a0:	6078      	str	r0, [r7, #4]
    70a2:	6039      	str	r1, [r7, #0]
	if (buffer) {
    70a4:	687b      	ldr	r3, [r7, #4]
    70a6:	681b      	ldr	r3, [r3, #0]
    70a8:	2b00      	cmp	r3, #0
    70aa:	d031      	beq.n	7110 <_ZN6String4moveERS_+0x76>
		if (rhs && capacity >= rhs.len) {
    70ac:	2308      	movs	r3, #8
    70ae:	18fb      	adds	r3, r7, r3
    70b0:	683a      	ldr	r2, [r7, #0]
    70b2:	0011      	movs	r1, r2
    70b4:	0018      	movs	r0, r3
    70b6:	f7ff fee5 	bl	6e84 <_ZNK6StringcvMS_KFvvEEv>
    70ba:	2308      	movs	r3, #8
    70bc:	18fb      	adds	r3, r7, r3
    70be:	681b      	ldr	r3, [r3, #0]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d105      	bne.n	70d0 <_ZN6String4moveERS_+0x36>
    70c4:	2308      	movs	r3, #8
    70c6:	18fb      	adds	r3, r7, r3
    70c8:	685b      	ldr	r3, [r3, #4]
    70ca:	2201      	movs	r2, #1
    70cc:	4013      	ands	r3, r2
    70ce:	d007      	beq.n	70e0 <_ZN6String4moveERS_+0x46>
    70d0:	687b      	ldr	r3, [r7, #4]
    70d2:	685a      	ldr	r2, [r3, #4]
    70d4:	683b      	ldr	r3, [r7, #0]
    70d6:	689b      	ldr	r3, [r3, #8]
    70d8:	429a      	cmp	r2, r3
    70da:	d301      	bcc.n	70e0 <_ZN6String4moveERS_+0x46>
    70dc:	2301      	movs	r3, #1
    70de:	e000      	b.n	70e2 <_ZN6String4moveERS_+0x48>
    70e0:	2300      	movs	r3, #0
    70e2:	2b00      	cmp	r3, #0
    70e4:	d00f      	beq.n	7106 <_ZN6String4moveERS_+0x6c>
			strcpy(buffer, rhs.buffer);
    70e6:	687b      	ldr	r3, [r7, #4]
    70e8:	681a      	ldr	r2, [r3, #0]
    70ea:	683b      	ldr	r3, [r7, #0]
    70ec:	681b      	ldr	r3, [r3, #0]
    70ee:	0019      	movs	r1, r3
    70f0:	0010      	movs	r0, r2
    70f2:	f00a fa35 	bl	11560 <strcpy>
			len = rhs.len;
    70f6:	683b      	ldr	r3, [r7, #0]
    70f8:	689a      	ldr	r2, [r3, #8]
    70fa:	687b      	ldr	r3, [r7, #4]
    70fc:	609a      	str	r2, [r3, #8]
			rhs.len = 0;
    70fe:	683b      	ldr	r3, [r7, #0]
    7100:	2200      	movs	r2, #0
    7102:	609a      	str	r2, [r3, #8]
			return;
    7104:	e019      	b.n	713a <_ZN6String4moveERS_+0xa0>
		} else {
			free(buffer);
    7106:	687b      	ldr	r3, [r7, #4]
    7108:	681b      	ldr	r3, [r3, #0]
    710a:	0018      	movs	r0, r3
    710c:	f009 fb66 	bl	107dc <free>
		}
	}
	buffer = rhs.buffer;
    7110:	683b      	ldr	r3, [r7, #0]
    7112:	681a      	ldr	r2, [r3, #0]
    7114:	687b      	ldr	r3, [r7, #4]
    7116:	601a      	str	r2, [r3, #0]
	capacity = rhs.capacity;
    7118:	683b      	ldr	r3, [r7, #0]
    711a:	685a      	ldr	r2, [r3, #4]
    711c:	687b      	ldr	r3, [r7, #4]
    711e:	605a      	str	r2, [r3, #4]
	len = rhs.len;
    7120:	683b      	ldr	r3, [r7, #0]
    7122:	689a      	ldr	r2, [r3, #8]
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	609a      	str	r2, [r3, #8]
	rhs.buffer = NULL;
    7128:	683b      	ldr	r3, [r7, #0]
    712a:	2200      	movs	r2, #0
    712c:	601a      	str	r2, [r3, #0]
	rhs.capacity = 0;
    712e:	683b      	ldr	r3, [r7, #0]
    7130:	2200      	movs	r2, #0
    7132:	605a      	str	r2, [r3, #4]
	rhs.len = 0;
    7134:	683b      	ldr	r3, [r7, #0]
    7136:	2200      	movs	r2, #0
    7138:	609a      	str	r2, [r3, #8]
}
    713a:	46bd      	mov	sp, r7
    713c:	b004      	add	sp, #16
    713e:	bd80      	pop	{r7, pc}

00007140 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    7140:	b580      	push	{r7, lr}
    7142:	b082      	sub	sp, #8
    7144:	af00      	add	r7, sp, #0
    7146:	6078      	str	r0, [r7, #4]
    7148:	6039      	str	r1, [r7, #0]
	if (this != &rval) move(rval);
    714a:	687a      	ldr	r2, [r7, #4]
    714c:	683b      	ldr	r3, [r7, #0]
    714e:	429a      	cmp	r2, r3
    7150:	d005      	beq.n	715e <_ZN6StringaSEOS_+0x1e>
    7152:	683a      	ldr	r2, [r7, #0]
    7154:	687b      	ldr	r3, [r7, #4]
    7156:	0011      	movs	r1, r2
    7158:	0018      	movs	r0, r3
    715a:	f7ff ff9e 	bl	709a <_ZN6String4moveERS_>
	return *this;
    715e:	687b      	ldr	r3, [r7, #4]
}
    7160:	0018      	movs	r0, r3
    7162:	46bd      	mov	sp, r7
    7164:	b002      	add	sp, #8
    7166:	bd80      	pop	{r7, pc}

00007168 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    7168:	b580      	push	{r7, lr}
    716a:	b082      	sub	sp, #8
    716c:	af00      	add	r7, sp, #0
    716e:	6078      	str	r0, [r7, #4]
    7170:	6039      	str	r1, [r7, #0]
	if (cstr) copy(cstr, strlen(cstr));
    7172:	683b      	ldr	r3, [r7, #0]
    7174:	2b00      	cmp	r3, #0
    7176:	d00a      	beq.n	718e <_ZN6StringaSEPKc+0x26>
    7178:	683b      	ldr	r3, [r7, #0]
    717a:	0018      	movs	r0, r3
    717c:	f00a f9f8 	bl	11570 <strlen>
    7180:	0002      	movs	r2, r0
    7182:	6839      	ldr	r1, [r7, #0]
    7184:	687b      	ldr	r3, [r7, #4]
    7186:	0018      	movs	r0, r3
    7188:	f7ff ff60 	bl	704c <_ZN6String4copyEPKcj>
    718c:	e003      	b.n	7196 <_ZN6StringaSEPKc+0x2e>
	else invalidate();
    718e:	687b      	ldr	r3, [r7, #4]
    7190:	0018      	movs	r0, r3
    7192:	f7ff fef6 	bl	6f82 <_ZN6String10invalidateEv>
	
	return *this;
    7196:	687b      	ldr	r3, [r7, #4]
}
    7198:	0018      	movs	r0, r3
    719a:	46bd      	mov	sp, r7
    719c:	b002      	add	sp, #8
    719e:	bd80      	pop	{r7, pc}

000071a0 <_ZNK6String6charAtEj>:
/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
    71a0:	b580      	push	{r7, lr}
    71a2:	b082      	sub	sp, #8
    71a4:	af00      	add	r7, sp, #0
    71a6:	6078      	str	r0, [r7, #4]
    71a8:	6039      	str	r1, [r7, #0]
	return operator[](loc);
    71aa:	683a      	ldr	r2, [r7, #0]
    71ac:	687b      	ldr	r3, [r7, #4]
    71ae:	0011      	movs	r1, r2
    71b0:	0018      	movs	r0, r3
    71b2:	f000 f805 	bl	71c0 <_ZNK6StringixEj>
    71b6:	0003      	movs	r3, r0
}
    71b8:	0018      	movs	r0, r3
    71ba:	46bd      	mov	sp, r7
    71bc:	b002      	add	sp, #8
    71be:	bd80      	pop	{r7, pc}

000071c0 <_ZNK6StringixEj>:
	}
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
    71c0:	b580      	push	{r7, lr}
    71c2:	b082      	sub	sp, #8
    71c4:	af00      	add	r7, sp, #0
    71c6:	6078      	str	r0, [r7, #4]
    71c8:	6039      	str	r1, [r7, #0]
	if (index >= len || !buffer) return 0;
    71ca:	687b      	ldr	r3, [r7, #4]
    71cc:	689a      	ldr	r2, [r3, #8]
    71ce:	683b      	ldr	r3, [r7, #0]
    71d0:	429a      	cmp	r2, r3
    71d2:	d903      	bls.n	71dc <_ZNK6StringixEj+0x1c>
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	681b      	ldr	r3, [r3, #0]
    71d8:	2b00      	cmp	r3, #0
    71da:	d101      	bne.n	71e0 <_ZNK6StringixEj+0x20>
    71dc:	2300      	movs	r3, #0
    71de:	e004      	b.n	71ea <_ZNK6StringixEj+0x2a>
	return buffer[index];
    71e0:	687b      	ldr	r3, [r7, #4]
    71e2:	681a      	ldr	r2, [r3, #0]
    71e4:	683b      	ldr	r3, [r7, #0]
    71e6:	18d3      	adds	r3, r2, r3
    71e8:	781b      	ldrb	r3, [r3, #0]
}
    71ea:	0018      	movs	r0, r3
    71ec:	46bd      	mov	sp, r7
    71ee:	b002      	add	sp, #8
    71f0:	bd80      	pop	{r7, pc}

000071f2 <_ZN15Adafruit_FT6206C1Ev>:
/*! 
    @brief  Instantiates a new FT6206 class
*/
/**************************************************************************/
// I2C, no address adjustments or pins
Adafruit_FT6206::Adafruit_FT6206() {
    71f2:	b580      	push	{r7, lr}
    71f4:	b082      	sub	sp, #8
    71f6:	af00      	add	r7, sp, #0
    71f8:	6078      	str	r0, [r7, #4]
  touches = 0;
    71fa:	687b      	ldr	r3, [r7, #4]
    71fc:	2200      	movs	r2, #0
    71fe:	701a      	strb	r2, [r3, #0]
}
    7200:	687b      	ldr	r3, [r7, #4]
    7202:	0018      	movs	r0, r3
    7204:	46bd      	mov	sp, r7
    7206:	b002      	add	sp, #8
    7208:	bd80      	pop	{r7, pc}
	...

0000720c <_ZN15Adafruit_FT62065beginEh>:
    @brief  Setups the I2C interface and hardware, identifies if chip is found
    @param  thresh Optional threshhold-for-touch value, default is FT6206_DEFAULT_THRESSHOLD but you can try changing it if your screen is too/not sensitive.
    @returns True if an FT6206 is found, false on any failure
*/
/**************************************************************************/
boolean Adafruit_FT6206::begin(uint8_t thresh) {
    720c:	b590      	push	{r4, r7, lr}
    720e:	b085      	sub	sp, #20
    7210:	af00      	add	r7, sp, #0
    7212:	6078      	str	r0, [r7, #4]
    7214:	000a      	movs	r2, r1
    7216:	1cfb      	adds	r3, r7, #3
    7218:	701a      	strb	r2, [r3, #0]
  Wire.begin();
    721a:	4b1c      	ldr	r3, [pc, #112]	; (728c <_ZN15Adafruit_FT62065beginEh+0x80>)
    721c:	0018      	movs	r0, r3
    721e:	f004 fbdf 	bl	b9e0 <_ZN7TwoWire5beginEv>
    Serial.print(" = 0x"); Serial.println(readRegister8(i), HEX);
  }
#endif

  // change threshhold to be higher/lower
  writeRegister8(FT62XX_REG_THRESHHOLD, thresh);
    7222:	1cfb      	adds	r3, r7, #3
    7224:	781a      	ldrb	r2, [r3, #0]
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	2180      	movs	r1, #128	; 0x80
    722a:	0018      	movs	r0, r3
    722c:	f000 f9b8 	bl	75a0 <_ZN15Adafruit_FT620614writeRegister8Ehh>
  
  if (readRegister8(FT62XX_REG_VENDID) != FT62XX_VENDID) {
    7230:	687b      	ldr	r3, [r7, #4]
    7232:	21a8      	movs	r1, #168	; 0xa8
    7234:	0018      	movs	r0, r3
    7236:	f000 f985 	bl	7544 <_ZN15Adafruit_FT620613readRegister8Eh>
    723a:	0003      	movs	r3, r0
    723c:	3b11      	subs	r3, #17
    723e:	1e5a      	subs	r2, r3, #1
    7240:	4193      	sbcs	r3, r2
    7242:	b2db      	uxtb	r3, r3
    7244:	2b00      	cmp	r3, #0
    7246:	d001      	beq.n	724c <_ZN15Adafruit_FT62065beginEh+0x40>
    return false;
    7248:	2300      	movs	r3, #0
    724a:	e01a      	b.n	7282 <_ZN15Adafruit_FT62065beginEh+0x76>
  }
  uint8_t id = readRegister8(FT62XX_REG_CHIPID);
    724c:	230f      	movs	r3, #15
    724e:	18fc      	adds	r4, r7, r3
    7250:	687b      	ldr	r3, [r7, #4]
    7252:	21a3      	movs	r1, #163	; 0xa3
    7254:	0018      	movs	r0, r3
    7256:	f000 f975 	bl	7544 <_ZN15Adafruit_FT620613readRegister8Eh>
    725a:	0003      	movs	r3, r0
    725c:	7023      	strb	r3, [r4, #0]
  if ((id != FT6206_CHIPID) && (id != FT6236_CHIPID) && (id != FT6236U_CHIPID)) {
    725e:	230f      	movs	r3, #15
    7260:	18fb      	adds	r3, r7, r3
    7262:	781b      	ldrb	r3, [r3, #0]
    7264:	2b06      	cmp	r3, #6
    7266:	d00b      	beq.n	7280 <_ZN15Adafruit_FT62065beginEh+0x74>
    7268:	230f      	movs	r3, #15
    726a:	18fb      	adds	r3, r7, r3
    726c:	781b      	ldrb	r3, [r3, #0]
    726e:	2b36      	cmp	r3, #54	; 0x36
    7270:	d006      	beq.n	7280 <_ZN15Adafruit_FT62065beginEh+0x74>
    7272:	230f      	movs	r3, #15
    7274:	18fb      	adds	r3, r7, r3
    7276:	781b      	ldrb	r3, [r3, #0]
    7278:	2b64      	cmp	r3, #100	; 0x64
    727a:	d001      	beq.n	7280 <_ZN15Adafruit_FT62065beginEh+0x74>
    return false;
    727c:	2300      	movs	r3, #0
    727e:	e000      	b.n	7282 <_ZN15Adafruit_FT62065beginEh+0x76>
  }

  return true;
    7280:	2301      	movs	r3, #1
}
    7282:	0018      	movs	r0, r3
    7284:	46bd      	mov	sp, r7
    7286:	b005      	add	sp, #20
    7288:	bd90      	pop	{r4, r7, pc}
    728a:	46c0      	nop			; (mov r8, r8)
    728c:	20000b8c 	.word	0x20000b8c

00007290 <_ZN15Adafruit_FT62067touchedEv>:
/*! 
    @brief  Determines if there are any touches detected
    @returns Number of touches detected, can be 0, 1 or 2
*/
/**************************************************************************/
uint8_t Adafruit_FT6206::touched(void) {
    7290:	b590      	push	{r4, r7, lr}
    7292:	b085      	sub	sp, #20
    7294:	af00      	add	r7, sp, #0
    7296:	6078      	str	r0, [r7, #4]
  uint8_t n = readRegister8(FT62XX_REG_NUMTOUCHES);
    7298:	230f      	movs	r3, #15
    729a:	18fc      	adds	r4, r7, r3
    729c:	687b      	ldr	r3, [r7, #4]
    729e:	2102      	movs	r1, #2
    72a0:	0018      	movs	r0, r3
    72a2:	f000 f94f 	bl	7544 <_ZN15Adafruit_FT620613readRegister8Eh>
    72a6:	0003      	movs	r3, r0
    72a8:	7023      	strb	r3, [r4, #0]
  if (n > 2) {
    72aa:	230f      	movs	r3, #15
    72ac:	18fb      	adds	r3, r7, r3
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	2b02      	cmp	r3, #2
    72b2:	dd03      	ble.n	72bc <_ZN15Adafruit_FT62067touchedEv+0x2c>
    n = 0;
    72b4:	230f      	movs	r3, #15
    72b6:	18fb      	adds	r3, r7, r3
    72b8:	2200      	movs	r2, #0
    72ba:	701a      	strb	r2, [r3, #0]
  }
  return n;
    72bc:	230f      	movs	r3, #15
    72be:	18fb      	adds	r3, r7, r3
    72c0:	781b      	ldrb	r3, [r3, #0]
}
    72c2:	0018      	movs	r0, r3
    72c4:	46bd      	mov	sp, r7
    72c6:	b005      	add	sp, #20
    72c8:	bd90      	pop	{r4, r7, pc}

000072ca <_ZN15Adafruit_FT62068getPointEh>:
    @brief  Queries the chip and retrieves a point data
    @param  n The # index (0 or 1) to the points we can detect. In theory we can detect 2 points but we've found that you should only use this for single-touch since the two points cant share the same half of the screen.
    @returns {@link TS_Point} object that has the x and y coordinets set. If the z coordinate is 0 it means the point is not touched. If z is 1, it is currently touched.
*/
/**************************************************************************/
TS_Point Adafruit_FT6206::getPoint(uint8_t n) {
    72ca:	b580      	push	{r7, lr}
    72cc:	b084      	sub	sp, #16
    72ce:	af00      	add	r7, sp, #0
    72d0:	60f8      	str	r0, [r7, #12]
    72d2:	60b9      	str	r1, [r7, #8]
    72d4:	1dfb      	adds	r3, r7, #7
    72d6:	701a      	strb	r2, [r3, #0]
  readData();
    72d8:	68bb      	ldr	r3, [r7, #8]
    72da:	0018      	movs	r0, r3
    72dc:	f000 f828 	bl	7330 <_ZN15Adafruit_FT62068readDataEv>
  if ((touches == 0) || (n > 1)) {
    72e0:	68bb      	ldr	r3, [r7, #8]
    72e2:	781b      	ldrb	r3, [r3, #0]
    72e4:	2b00      	cmp	r3, #0
    72e6:	d003      	beq.n	72f0 <_ZN15Adafruit_FT62068getPointEh+0x26>
    72e8:	1dfb      	adds	r3, r7, #7
    72ea:	781b      	ldrb	r3, [r3, #0]
    72ec:	2b01      	cmp	r3, #1
    72ee:	dd06      	ble.n	72fe <_ZN15Adafruit_FT62068getPointEh+0x34>
    return TS_Point(0, 0, 0);
    72f0:	68f8      	ldr	r0, [r7, #12]
    72f2:	2300      	movs	r3, #0
    72f4:	2200      	movs	r2, #0
    72f6:	2100      	movs	r1, #0
    72f8:	f000 f98d 	bl	7616 <_ZN8TS_PointC1Esss>
    72fc:	e013      	b.n	7326 <_ZN15Adafruit_FT62068getPointEh+0x5c>
  } else {
    return TS_Point(touchX[n], touchY[n], 1);
    72fe:	1dfb      	adds	r3, r7, #7
    7300:	781b      	ldrb	r3, [r3, #0]
    7302:	68ba      	ldr	r2, [r7, #8]
    7304:	005b      	lsls	r3, r3, #1
    7306:	18d3      	adds	r3, r2, r3
    7308:	3302      	adds	r3, #2
    730a:	881b      	ldrh	r3, [r3, #0]
    730c:	b219      	sxth	r1, r3
    730e:	1dfb      	adds	r3, r7, #7
    7310:	781b      	ldrb	r3, [r3, #0]
    7312:	68ba      	ldr	r2, [r7, #8]
    7314:	005b      	lsls	r3, r3, #1
    7316:	18d3      	adds	r3, r2, r3
    7318:	3306      	adds	r3, #6
    731a:	881b      	ldrh	r3, [r3, #0]
    731c:	b21a      	sxth	r2, r3
    731e:	68f8      	ldr	r0, [r7, #12]
    7320:	2301      	movs	r3, #1
    7322:	f000 f978 	bl	7616 <_ZN8TS_PointC1Esss>
  }
}
    7326:	68f8      	ldr	r0, [r7, #12]
    7328:	46bd      	mov	sp, r7
    732a:	b004      	add	sp, #16
    732c:	bd80      	pop	{r7, pc}
	...

00007330 <_ZN15Adafruit_FT62068readDataEv>:
/**************************************************************************/
/*! 
    @brief  Reads the bulk of data from captouch chip. Fill in {@link touches}, {@link touchX}, {@link touchY} and {@link touchID} with results
*/
/**************************************************************************/
void Adafruit_FT6206::readData(void) {
    7330:	b590      	push	{r4, r7, lr}
    7332:	b089      	sub	sp, #36	; 0x24
    7334:	af00      	add	r7, sp, #0
    7336:	6078      	str	r0, [r7, #4]

  uint8_t i2cdat[16];
  Wire.beginTransmission(FT62XX_ADDR);
    7338:	4b81      	ldr	r3, [pc, #516]	; (7540 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    733a:	2138      	movs	r1, #56	; 0x38
    733c:	0018      	movs	r0, r3
    733e:	f004 fc0c 	bl	bb5a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)0);  
    7342:	4b7f      	ldr	r3, [pc, #508]	; (7540 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    7344:	2100      	movs	r1, #0
    7346:	0018      	movs	r0, r3
    7348:	f004 fc8a 	bl	bc60 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    734c:	4b7c      	ldr	r3, [pc, #496]	; (7540 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    734e:	0018      	movs	r0, r3
    7350:	f004 fc78 	bl	bc44 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom((byte)FT62XX_ADDR, (byte)16);
    7354:	4b7a      	ldr	r3, [pc, #488]	; (7540 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    7356:	2210      	movs	r2, #16
    7358:	2138      	movs	r1, #56	; 0x38
    735a:	0018      	movs	r0, r3
    735c:	f004 fbe7 	bl	bb2e <_ZN7TwoWire11requestFromEhj>
  for (uint8_t i=0; i<16; i++)
    7360:	231f      	movs	r3, #31
    7362:	18fb      	adds	r3, r7, r3
    7364:	2200      	movs	r2, #0
    7366:	701a      	strb	r2, [r3, #0]
    7368:	231f      	movs	r3, #31
    736a:	18fb      	adds	r3, r7, r3
    736c:	781b      	ldrb	r3, [r3, #0]
    736e:	2b0f      	cmp	r3, #15
    7370:	dc13      	bgt.n	739a <_ZN15Adafruit_FT62068readDataEv+0x6a>
    i2cdat[i] = Wire.read();
    7372:	231f      	movs	r3, #31
    7374:	18fb      	adds	r3, r7, r3
    7376:	781c      	ldrb	r4, [r3, #0]
    7378:	4b71      	ldr	r3, [pc, #452]	; (7540 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    737a:	0018      	movs	r0, r3
    737c:	f004 fcd1 	bl	bd22 <_ZN7TwoWire4readEv>
    7380:	0003      	movs	r3, r0
    7382:	b2da      	uxtb	r2, r3
    7384:	230c      	movs	r3, #12
    7386:	18fb      	adds	r3, r7, r3
    7388:	551a      	strb	r2, [r3, r4]
  for (uint8_t i=0; i<16; i++)
    738a:	231f      	movs	r3, #31
    738c:	18fb      	adds	r3, r7, r3
    738e:	781a      	ldrb	r2, [r3, #0]
    7390:	231f      	movs	r3, #31
    7392:	18fb      	adds	r3, r7, r3
    7394:	3201      	adds	r2, #1
    7396:	701a      	strb	r2, [r3, #0]
    7398:	e7e6      	b.n	7368 <_ZN15Adafruit_FT62068readDataEv+0x38>
    Serial.print("I2C $"); Serial.print(i, HEX); 
    Serial.print(" = 0x"); Serial.println(i2cdat[i], HEX);
  }
#endif

  touches = i2cdat[0x02];
    739a:	230c      	movs	r3, #12
    739c:	18fb      	adds	r3, r7, r3
    739e:	789a      	ldrb	r2, [r3, #2]
    73a0:	687b      	ldr	r3, [r7, #4]
    73a2:	701a      	strb	r2, [r3, #0]
  if ((touches > 2) || (touches == 0)) {
    73a4:	687b      	ldr	r3, [r7, #4]
    73a6:	781b      	ldrb	r3, [r3, #0]
    73a8:	2b02      	cmp	r3, #2
    73aa:	dc03      	bgt.n	73b4 <_ZN15Adafruit_FT62068readDataEv+0x84>
    73ac:	687b      	ldr	r3, [r7, #4]
    73ae:	781b      	ldrb	r3, [r3, #0]
    73b0:	2b00      	cmp	r3, #0
    73b2:	d102      	bne.n	73ba <_ZN15Adafruit_FT62068readDataEv+0x8a>
    touches = 0;
    73b4:	687b      	ldr	r3, [r7, #4]
    73b6:	2200      	movs	r2, #0
    73b8:	701a      	strb	r2, [r3, #0]
    Serial.print("Gesture #"); 
    Serial.println(i2cdat[0x01]);
  }
#endif

  for (uint8_t i=0; i<2; i++) {
    73ba:	231e      	movs	r3, #30
    73bc:	18fb      	adds	r3, r7, r3
    73be:	2200      	movs	r2, #0
    73c0:	701a      	strb	r2, [r3, #0]
    73c2:	231e      	movs	r3, #30
    73c4:	18fb      	adds	r3, r7, r3
    73c6:	781b      	ldrb	r3, [r3, #0]
    73c8:	2b01      	cmp	r3, #1
    73ca:	dd00      	ble.n	73ce <_ZN15Adafruit_FT62068readDataEv+0x9e>
    73cc:	e0b3      	b.n	7536 <_ZN15Adafruit_FT62068readDataEv+0x206>
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    73ce:	231e      	movs	r3, #30
    73d0:	18fb      	adds	r3, r7, r3
    73d2:	7819      	ldrb	r1, [r3, #0]
    73d4:	231e      	movs	r3, #30
    73d6:	18fb      	adds	r3, r7, r3
    73d8:	781a      	ldrb	r2, [r3, #0]
    73da:	0013      	movs	r3, r2
    73dc:	005b      	lsls	r3, r3, #1
    73de:	189b      	adds	r3, r3, r2
    73e0:	005b      	lsls	r3, r3, #1
    73e2:	3303      	adds	r3, #3
    73e4:	220c      	movs	r2, #12
    73e6:	18ba      	adds	r2, r7, r2
    73e8:	5cd3      	ldrb	r3, [r2, r3]
    73ea:	b29b      	uxth	r3, r3
    73ec:	220f      	movs	r2, #15
    73ee:	4013      	ands	r3, r2
    73f0:	b298      	uxth	r0, r3
    73f2:	687a      	ldr	r2, [r7, #4]
    73f4:	004b      	lsls	r3, r1, #1
    73f6:	18d3      	adds	r3, r2, r3
    73f8:	3302      	adds	r3, #2
    73fa:	1c02      	adds	r2, r0, #0
    73fc:	801a      	strh	r2, [r3, #0]
    touchX[i] <<= 8;
    73fe:	231e      	movs	r3, #30
    7400:	18fb      	adds	r3, r7, r3
    7402:	781b      	ldrb	r3, [r3, #0]
    7404:	221e      	movs	r2, #30
    7406:	18ba      	adds	r2, r7, r2
    7408:	7812      	ldrb	r2, [r2, #0]
    740a:	6879      	ldr	r1, [r7, #4]
    740c:	0052      	lsls	r2, r2, #1
    740e:	188a      	adds	r2, r1, r2
    7410:	3202      	adds	r2, #2
    7412:	8812      	ldrh	r2, [r2, #0]
    7414:	0212      	lsls	r2, r2, #8
    7416:	b291      	uxth	r1, r2
    7418:	687a      	ldr	r2, [r7, #4]
    741a:	005b      	lsls	r3, r3, #1
    741c:	18d3      	adds	r3, r2, r3
    741e:	3302      	adds	r3, #2
    7420:	1c0a      	adds	r2, r1, #0
    7422:	801a      	strh	r2, [r3, #0]
    touchX[i] |= i2cdat[0x04 + i*6]; 
    7424:	231e      	movs	r3, #30
    7426:	18fb      	adds	r3, r7, r3
    7428:	7819      	ldrb	r1, [r3, #0]
    742a:	231e      	movs	r3, #30
    742c:	18fb      	adds	r3, r7, r3
    742e:	781b      	ldrb	r3, [r3, #0]
    7430:	687a      	ldr	r2, [r7, #4]
    7432:	005b      	lsls	r3, r3, #1
    7434:	18d3      	adds	r3, r2, r3
    7436:	3302      	adds	r3, #2
    7438:	8818      	ldrh	r0, [r3, #0]
    743a:	231e      	movs	r3, #30
    743c:	18fb      	adds	r3, r7, r3
    743e:	781a      	ldrb	r2, [r3, #0]
    7440:	0013      	movs	r3, r2
    7442:	005b      	lsls	r3, r3, #1
    7444:	189b      	adds	r3, r3, r2
    7446:	005b      	lsls	r3, r3, #1
    7448:	3304      	adds	r3, #4
    744a:	220c      	movs	r2, #12
    744c:	18ba      	adds	r2, r7, r2
    744e:	5cd3      	ldrb	r3, [r2, r3]
    7450:	b29b      	uxth	r3, r3
    7452:	4303      	orrs	r3, r0
    7454:	b298      	uxth	r0, r3
    7456:	687a      	ldr	r2, [r7, #4]
    7458:	004b      	lsls	r3, r1, #1
    745a:	18d3      	adds	r3, r2, r3
    745c:	3302      	adds	r3, #2
    745e:	1c02      	adds	r2, r0, #0
    7460:	801a      	strh	r2, [r3, #0]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    7462:	231e      	movs	r3, #30
    7464:	18fb      	adds	r3, r7, r3
    7466:	7819      	ldrb	r1, [r3, #0]
    7468:	231e      	movs	r3, #30
    746a:	18fb      	adds	r3, r7, r3
    746c:	781a      	ldrb	r2, [r3, #0]
    746e:	0013      	movs	r3, r2
    7470:	005b      	lsls	r3, r3, #1
    7472:	189b      	adds	r3, r3, r2
    7474:	005b      	lsls	r3, r3, #1
    7476:	3305      	adds	r3, #5
    7478:	220c      	movs	r2, #12
    747a:	18ba      	adds	r2, r7, r2
    747c:	5cd3      	ldrb	r3, [r2, r3]
    747e:	b29b      	uxth	r3, r3
    7480:	220f      	movs	r2, #15
    7482:	4013      	ands	r3, r2
    7484:	b298      	uxth	r0, r3
    7486:	687a      	ldr	r2, [r7, #4]
    7488:	004b      	lsls	r3, r1, #1
    748a:	18d3      	adds	r3, r2, r3
    748c:	3306      	adds	r3, #6
    748e:	1c02      	adds	r2, r0, #0
    7490:	801a      	strh	r2, [r3, #0]
    touchY[i] <<= 8;
    7492:	231e      	movs	r3, #30
    7494:	18fb      	adds	r3, r7, r3
    7496:	781b      	ldrb	r3, [r3, #0]
    7498:	221e      	movs	r2, #30
    749a:	18ba      	adds	r2, r7, r2
    749c:	7812      	ldrb	r2, [r2, #0]
    749e:	6879      	ldr	r1, [r7, #4]
    74a0:	0052      	lsls	r2, r2, #1
    74a2:	188a      	adds	r2, r1, r2
    74a4:	3206      	adds	r2, #6
    74a6:	8812      	ldrh	r2, [r2, #0]
    74a8:	0212      	lsls	r2, r2, #8
    74aa:	b291      	uxth	r1, r2
    74ac:	687a      	ldr	r2, [r7, #4]
    74ae:	005b      	lsls	r3, r3, #1
    74b0:	18d3      	adds	r3, r2, r3
    74b2:	3306      	adds	r3, #6
    74b4:	1c0a      	adds	r2, r1, #0
    74b6:	801a      	strh	r2, [r3, #0]
    touchY[i] |= i2cdat[0x06 + i*6];
    74b8:	231e      	movs	r3, #30
    74ba:	18fb      	adds	r3, r7, r3
    74bc:	7819      	ldrb	r1, [r3, #0]
    74be:	231e      	movs	r3, #30
    74c0:	18fb      	adds	r3, r7, r3
    74c2:	781b      	ldrb	r3, [r3, #0]
    74c4:	687a      	ldr	r2, [r7, #4]
    74c6:	005b      	lsls	r3, r3, #1
    74c8:	18d3      	adds	r3, r2, r3
    74ca:	3306      	adds	r3, #6
    74cc:	8818      	ldrh	r0, [r3, #0]
    74ce:	231e      	movs	r3, #30
    74d0:	18fb      	adds	r3, r7, r3
    74d2:	781b      	ldrb	r3, [r3, #0]
    74d4:	1c5a      	adds	r2, r3, #1
    74d6:	0013      	movs	r3, r2
    74d8:	005b      	lsls	r3, r3, #1
    74da:	189b      	adds	r3, r3, r2
    74dc:	005b      	lsls	r3, r3, #1
    74de:	001a      	movs	r2, r3
    74e0:	230c      	movs	r3, #12
    74e2:	18fb      	adds	r3, r7, r3
    74e4:	5c9b      	ldrb	r3, [r3, r2]
    74e6:	b29b      	uxth	r3, r3
    74e8:	4303      	orrs	r3, r0
    74ea:	b298      	uxth	r0, r3
    74ec:	687a      	ldr	r2, [r7, #4]
    74ee:	004b      	lsls	r3, r1, #1
    74f0:	18d3      	adds	r3, r2, r3
    74f2:	3306      	adds	r3, #6
    74f4:	1c02      	adds	r2, r0, #0
    74f6:	801a      	strh	r2, [r3, #0]
    touchID[i] = i2cdat[0x05 + i*6] >> 4;
    74f8:	231e      	movs	r3, #30
    74fa:	18fb      	adds	r3, r7, r3
    74fc:	7819      	ldrb	r1, [r3, #0]
    74fe:	231e      	movs	r3, #30
    7500:	18fb      	adds	r3, r7, r3
    7502:	781a      	ldrb	r2, [r3, #0]
    7504:	0013      	movs	r3, r2
    7506:	005b      	lsls	r3, r3, #1
    7508:	189b      	adds	r3, r3, r2
    750a:	005b      	lsls	r3, r3, #1
    750c:	3305      	adds	r3, #5
    750e:	220c      	movs	r2, #12
    7510:	18ba      	adds	r2, r7, r2
    7512:	5cd3      	ldrb	r3, [r2, r3]
    7514:	111b      	asrs	r3, r3, #4
    7516:	b298      	uxth	r0, r3
    7518:	687a      	ldr	r2, [r7, #4]
    751a:	1d0b      	adds	r3, r1, #4
    751c:	005b      	lsls	r3, r3, #1
    751e:	18d3      	adds	r3, r2, r3
    7520:	3302      	adds	r3, #2
    7522:	1c02      	adds	r2, r0, #0
    7524:	801a      	strh	r2, [r3, #0]
  for (uint8_t i=0; i<2; i++) {
    7526:	231e      	movs	r3, #30
    7528:	18fb      	adds	r3, r7, r3
    752a:	781a      	ldrb	r2, [r3, #0]
    752c:	231e      	movs	r3, #30
    752e:	18fb      	adds	r3, r7, r3
    7530:	3201      	adds	r2, #1
    7532:	701a      	strb	r2, [r3, #0]
    7534:	e745      	b.n	73c2 <_ZN15Adafruit_FT62068readDataEv+0x92>
    Serial.print(", "); Serial.print(touchY[i]);
    Serial.print (") ");
  }
  Serial.println();
#endif
}
    7536:	46c0      	nop			; (mov r8, r8)
    7538:	46bd      	mov	sp, r7
    753a:	b009      	add	sp, #36	; 0x24
    753c:	bd90      	pop	{r4, r7, pc}
    753e:	46c0      	nop			; (mov r8, r8)
    7540:	20000b8c 	.word	0x20000b8c

00007544 <_ZN15Adafruit_FT620613readRegister8Eh>:

uint8_t Adafruit_FT6206::readRegister8(uint8_t reg) {
    7544:	b580      	push	{r7, lr}
    7546:	b084      	sub	sp, #16
    7548:	af00      	add	r7, sp, #0
    754a:	6078      	str	r0, [r7, #4]
    754c:	000a      	movs	r2, r1
    754e:	1cfb      	adds	r3, r7, #3
    7550:	701a      	strb	r2, [r3, #0]
  uint8_t x ;
  // use i2c
  Wire.beginTransmission(FT62XX_ADDR);
    7552:	4b12      	ldr	r3, [pc, #72]	; (759c <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7554:	2138      	movs	r1, #56	; 0x38
    7556:	0018      	movs	r0, r3
    7558:	f004 faff 	bl	bb5a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    755c:	1cfb      	adds	r3, r7, #3
    755e:	781a      	ldrb	r2, [r3, #0]
    7560:	4b0e      	ldr	r3, [pc, #56]	; (759c <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7562:	0011      	movs	r1, r2
    7564:	0018      	movs	r0, r3
    7566:	f004 fb7b 	bl	bc60 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    756a:	4b0c      	ldr	r3, [pc, #48]	; (759c <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    756c:	0018      	movs	r0, r3
    756e:	f004 fb69 	bl	bc44 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.requestFrom((byte)FT62XX_ADDR, (byte)1);
    7572:	4b0a      	ldr	r3, [pc, #40]	; (759c <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7574:	2201      	movs	r2, #1
    7576:	2138      	movs	r1, #56	; 0x38
    7578:	0018      	movs	r0, r3
    757a:	f004 fad8 	bl	bb2e <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
    757e:	4b07      	ldr	r3, [pc, #28]	; (759c <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    7580:	0018      	movs	r0, r3
    7582:	f004 fbce 	bl	bd22 <_ZN7TwoWire4readEv>
    7586:	0002      	movs	r2, r0
    7588:	230f      	movs	r3, #15
    758a:	18fb      	adds	r3, r7, r3
    758c:	701a      	strb	r2, [r3, #0]
#ifdef I2C_DEBUG
  Serial.print("$"); Serial.print(reg, HEX); 
  Serial.print(": 0x"); Serial.println(x, HEX);
#endif

  return x;
    758e:	230f      	movs	r3, #15
    7590:	18fb      	adds	r3, r7, r3
    7592:	781b      	ldrb	r3, [r3, #0]
}
    7594:	0018      	movs	r0, r3
    7596:	46bd      	mov	sp, r7
    7598:	b004      	add	sp, #16
    759a:	bd80      	pop	{r7, pc}
    759c:	20000b8c 	.word	0x20000b8c

000075a0 <_ZN15Adafruit_FT620614writeRegister8Ehh>:

void Adafruit_FT6206::writeRegister8(uint8_t reg, uint8_t val) {
    75a0:	b580      	push	{r7, lr}
    75a2:	b082      	sub	sp, #8
    75a4:	af00      	add	r7, sp, #0
    75a6:	6078      	str	r0, [r7, #4]
    75a8:	0008      	movs	r0, r1
    75aa:	0011      	movs	r1, r2
    75ac:	1cfb      	adds	r3, r7, #3
    75ae:	1c02      	adds	r2, r0, #0
    75b0:	701a      	strb	r2, [r3, #0]
    75b2:	1cbb      	adds	r3, r7, #2
    75b4:	1c0a      	adds	r2, r1, #0
    75b6:	701a      	strb	r2, [r3, #0]
  // use i2c
  Wire.beginTransmission(FT62XX_ADDR);
    75b8:	4b0d      	ldr	r3, [pc, #52]	; (75f0 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    75ba:	2138      	movs	r1, #56	; 0x38
    75bc:	0018      	movs	r0, r3
    75be:	f004 facc 	bl	bb5a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    75c2:	1cfb      	adds	r3, r7, #3
    75c4:	781a      	ldrb	r2, [r3, #0]
    75c6:	4b0a      	ldr	r3, [pc, #40]	; (75f0 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    75c8:	0011      	movs	r1, r2
    75ca:	0018      	movs	r0, r3
    75cc:	f004 fb48 	bl	bc60 <_ZN7TwoWire5writeEh>
  Wire.write((byte)val);
    75d0:	1cbb      	adds	r3, r7, #2
    75d2:	781a      	ldrb	r2, [r3, #0]
    75d4:	4b06      	ldr	r3, [pc, #24]	; (75f0 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    75d6:	0011      	movs	r1, r2
    75d8:	0018      	movs	r0, r3
    75da:	f004 fb41 	bl	bc60 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    75de:	4b04      	ldr	r3, [pc, #16]	; (75f0 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    75e0:	0018      	movs	r0, r3
    75e2:	f004 fb2f 	bl	bc44 <_ZN7TwoWire15endTransmissionEv>
}
    75e6:	46c0      	nop			; (mov r8, r8)
    75e8:	46bd      	mov	sp, r7
    75ea:	b002      	add	sp, #8
    75ec:	bd80      	pop	{r7, pc}
    75ee:	46c0      	nop			; (mov r8, r8)
    75f0:	20000b8c 	.word	0x20000b8c

000075f4 <_ZN8TS_PointC1Ev>:
}
*/

/****************/

TS_Point::TS_Point(void) {
    75f4:	b580      	push	{r7, lr}
    75f6:	b082      	sub	sp, #8
    75f8:	af00      	add	r7, sp, #0
    75fa:	6078      	str	r0, [r7, #4]
  x = y = 0;
    75fc:	687b      	ldr	r3, [r7, #4]
    75fe:	2200      	movs	r2, #0
    7600:	805a      	strh	r2, [r3, #2]
    7602:	687b      	ldr	r3, [r7, #4]
    7604:	2202      	movs	r2, #2
    7606:	5e9a      	ldrsh	r2, [r3, r2]
    7608:	687b      	ldr	r3, [r7, #4]
    760a:	801a      	strh	r2, [r3, #0]
}
    760c:	687b      	ldr	r3, [r7, #4]
    760e:	0018      	movs	r0, r3
    7610:	46bd      	mov	sp, r7
    7612:	b002      	add	sp, #8
    7614:	bd80      	pop	{r7, pc}

00007616 <_ZN8TS_PointC1Esss>:

TS_Point::TS_Point(int16_t x0, int16_t y0, int16_t z0) {
    7616:	b590      	push	{r4, r7, lr}
    7618:	b085      	sub	sp, #20
    761a:	af00      	add	r7, sp, #0
    761c:	60f8      	str	r0, [r7, #12]
    761e:	000c      	movs	r4, r1
    7620:	0010      	movs	r0, r2
    7622:	0019      	movs	r1, r3
    7624:	230a      	movs	r3, #10
    7626:	18fb      	adds	r3, r7, r3
    7628:	1c22      	adds	r2, r4, #0
    762a:	801a      	strh	r2, [r3, #0]
    762c:	2308      	movs	r3, #8
    762e:	18fb      	adds	r3, r7, r3
    7630:	1c02      	adds	r2, r0, #0
    7632:	801a      	strh	r2, [r3, #0]
    7634:	1dbb      	adds	r3, r7, #6
    7636:	1c0a      	adds	r2, r1, #0
    7638:	801a      	strh	r2, [r3, #0]
  x = x0;
    763a:	68fb      	ldr	r3, [r7, #12]
    763c:	220a      	movs	r2, #10
    763e:	18ba      	adds	r2, r7, r2
    7640:	8812      	ldrh	r2, [r2, #0]
    7642:	801a      	strh	r2, [r3, #0]
  y = y0;
    7644:	68fb      	ldr	r3, [r7, #12]
    7646:	2208      	movs	r2, #8
    7648:	18ba      	adds	r2, r7, r2
    764a:	8812      	ldrh	r2, [r2, #0]
    764c:	805a      	strh	r2, [r3, #2]
  z = z0;
    764e:	68fb      	ldr	r3, [r7, #12]
    7650:	1dba      	adds	r2, r7, #6
    7652:	8812      	ldrh	r2, [r2, #0]
    7654:	809a      	strh	r2, [r3, #4]
}
    7656:	68fb      	ldr	r3, [r7, #12]
    7658:	0018      	movs	r0, r3
    765a:	46bd      	mov	sp, r7
    765c:	b005      	add	sp, #20
    765e:	bd90      	pop	{r4, r7, pc}

00007660 <_ZN11SPISettingsC1Em8BitOrderh>:
  // Conservatively, the divider is set for a 12 MHz maximum SPI clock.
  #define SPI_MIN_CLOCK_DIVIDER (uint8_t)(1 + ((F_CPU - 1) / 12000000))

class SPISettings {
  public:
  SPISettings(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    7660:	b590      	push	{r4, r7, lr}
    7662:	b085      	sub	sp, #20
    7664:	af00      	add	r7, sp, #0
    7666:	60f8      	str	r0, [r7, #12]
    7668:	60b9      	str	r1, [r7, #8]
    766a:	0019      	movs	r1, r3
    766c:	1dfb      	adds	r3, r7, #7
    766e:	701a      	strb	r2, [r3, #0]
    7670:	1dbb      	adds	r3, r7, #6
    7672:	1c0a      	adds	r2, r1, #0
    7674:	701a      	strb	r2, [r3, #0]
    if (__builtin_constant_p(clock)) {
      init_AlwaysInline(clock, bitOrder, dataMode);
    } else {
      init_MightInline(clock, bitOrder, dataMode);
    7676:	1dbb      	adds	r3, r7, #6
    7678:	781c      	ldrb	r4, [r3, #0]
    767a:	1dfb      	adds	r3, r7, #7
    767c:	781a      	ldrb	r2, [r3, #0]
    767e:	68b9      	ldr	r1, [r7, #8]
    7680:	68f8      	ldr	r0, [r7, #12]
    7682:	0023      	movs	r3, r4
    7684:	f000 f806 	bl	7694 <_ZN11SPISettings16init_MightInlineEm8BitOrderh>
    }
  }
    7688:	68fb      	ldr	r3, [r7, #12]
    768a:	0018      	movs	r0, r3
    768c:	46bd      	mov	sp, r7
    768e:	b005      	add	sp, #20
    7690:	bd90      	pop	{r4, r7, pc}
	...

00007694 <_ZN11SPISettings16init_MightInlineEm8BitOrderh>:

  // Default speed set to 4MHz, SPI mode set to MODE 0 and Bit order set to MSB first.
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }

  private:
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    7694:	b580      	push	{r7, lr}
    7696:	b088      	sub	sp, #32
    7698:	af00      	add	r7, sp, #0
    769a:	60f8      	str	r0, [r7, #12]
    769c:	60b9      	str	r1, [r7, #8]
    769e:	0019      	movs	r1, r3
    76a0:	1dfb      	adds	r3, r7, #7
    76a2:	701a      	strb	r2, [r3, #0]
    76a4:	1dbb      	adds	r3, r7, #6
    76a6:	1c0a      	adds	r2, r1, #0
    76a8:	701a      	strb	r2, [r3, #0]
    76aa:	68fb      	ldr	r3, [r7, #12]
    76ac:	61fb      	str	r3, [r7, #28]
    76ae:	68bb      	ldr	r3, [r7, #8]
    76b0:	61bb      	str	r3, [r7, #24]
    76b2:	2317      	movs	r3, #23
    76b4:	18fb      	adds	r3, r7, r3
    76b6:	1dfa      	adds	r2, r7, #7
    76b8:	7812      	ldrb	r2, [r2, #0]
    76ba:	701a      	strb	r2, [r3, #0]
    76bc:	2316      	movs	r3, #22
    76be:	18fb      	adds	r3, r7, r3
    76c0:	1dba      	adds	r2, r7, #6
    76c2:	7812      	ldrb	r2, [r2, #0]
    76c4:	701a      	strb	r2, [r3, #0]
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    76c6:	69bb      	ldr	r3, [r7, #24]
    76c8:	4a1a      	ldr	r2, [pc, #104]	; (7734 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0xa0>)
    76ca:	4293      	cmp	r3, r2
    76cc:	d900      	bls.n	76d0 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x3c>
    76ce:	4b19      	ldr	r3, [pc, #100]	; (7734 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0xa0>)
    76d0:	69fa      	ldr	r2, [r7, #28]
    76d2:	6013      	str	r3, [r2, #0]

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    76d4:	2317      	movs	r3, #23
    76d6:	18fb      	adds	r3, r7, r3
    76d8:	781b      	ldrb	r3, [r3, #0]
    76da:	2b01      	cmp	r3, #1
    76dc:	d101      	bne.n	76e2 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x4e>
    76de:	2200      	movs	r2, #0
    76e0:	e000      	b.n	76e4 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x50>
    76e2:	2201      	movs	r2, #1
    76e4:	69fb      	ldr	r3, [r7, #28]
    76e6:	715a      	strb	r2, [r3, #5]

    switch (dataMode)
    76e8:	2316      	movs	r3, #22
    76ea:	18fb      	adds	r3, r7, r3
    76ec:	781b      	ldrb	r3, [r3, #0]
    76ee:	2b01      	cmp	r3, #1
    76f0:	d014      	beq.n	771c <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x88>
    76f2:	dc02      	bgt.n	76fa <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x66>
    76f4:	2b00      	cmp	r3, #0
    76f6:	d009      	beq.n	770c <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x78>
    76f8:	e014      	b.n	7724 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x90>
    76fa:	2b02      	cmp	r3, #2
    76fc:	d002      	beq.n	7704 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x70>
    76fe:	2b03      	cmp	r3, #3
    7700:	d008      	beq.n	7714 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x80>
    7702:	e00f      	b.n	7724 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x90>
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    7704:	69fb      	ldr	r3, [r7, #28]
    7706:	2200      	movs	r2, #0
    7708:	711a      	strb	r2, [r3, #4]
  }
    770a:	e00e      	b.n	772a <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE1:
        this->dataMode = SERCOM_SPI_MODE_1; break;
    770c:	69fb      	ldr	r3, [r7, #28]
    770e:	2201      	movs	r2, #1
    7710:	711a      	strb	r2, [r3, #4]
  }
    7712:	e00a      	b.n	772a <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE2:
        this->dataMode = SERCOM_SPI_MODE_2; break;
    7714:	69fb      	ldr	r3, [r7, #28]
    7716:	2202      	movs	r2, #2
    7718:	711a      	strb	r2, [r3, #4]
  }
    771a:	e006      	b.n	772a <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE3:
        this->dataMode = SERCOM_SPI_MODE_3; break;
    771c:	69fb      	ldr	r3, [r7, #28]
    771e:	2203      	movs	r2, #3
    7720:	711a      	strb	r2, [r3, #4]
  }
    7722:	e002      	b.n	772a <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      default:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    7724:	69fb      	ldr	r3, [r7, #28]
    7726:	2200      	movs	r2, #0
    7728:	711a      	strb	r2, [r3, #4]
  }
    772a:	46c0      	nop			; (mov r8, r8)
    772c:	46bd      	mov	sp, r7
    772e:	b008      	add	sp, #32
    7730:	bd80      	pop	{r7, pc}
    7732:	46c0      	nop			; (mov r8, r8)
    7734:	00b71b00 	.word	0x00b71b00

00007738 <_ZN16Adafruit_ILI93418color565Ehhh>:
#define SPI_WRITE16(s)          if(_sclk < 0){HSPI_WRITE16(s);}else{SSPI_WRITE16(s);}
#define SPI_WRITE32(l)          if(_sclk < 0){HSPI_WRITE32(l);}else{SSPI_WRITE32(l);}
#define SPI_WRITE_PIXELS(c,l)   if(_sclk < 0){HSPI_WRITE_PIXELS(c,l);}else{SSPI_WRITE_PIXELS(c,l);}

// Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t Adafruit_ILI9341::color565(uint8_t r, uint8_t g, uint8_t b) {
    7738:	b590      	push	{r4, r7, lr}
    773a:	b083      	sub	sp, #12
    773c:	af00      	add	r7, sp, #0
    773e:	6078      	str	r0, [r7, #4]
    7740:	000c      	movs	r4, r1
    7742:	0010      	movs	r0, r2
    7744:	0019      	movs	r1, r3
    7746:	1cfb      	adds	r3, r7, #3
    7748:	1c22      	adds	r2, r4, #0
    774a:	701a      	strb	r2, [r3, #0]
    774c:	1cbb      	adds	r3, r7, #2
    774e:	1c02      	adds	r2, r0, #0
    7750:	701a      	strb	r2, [r3, #0]
    7752:	1c7b      	adds	r3, r7, #1
    7754:	1c0a      	adds	r2, r1, #0
    7756:	701a      	strb	r2, [r3, #0]
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    7758:	1cfb      	adds	r3, r7, #3
    775a:	781b      	ldrb	r3, [r3, #0]
    775c:	021b      	lsls	r3, r3, #8
    775e:	b21b      	sxth	r3, r3
    7760:	0adb      	lsrs	r3, r3, #11
    7762:	02db      	lsls	r3, r3, #11
    7764:	b21a      	sxth	r2, r3
    7766:	1cbb      	adds	r3, r7, #2
    7768:	781b      	ldrb	r3, [r3, #0]
    776a:	00db      	lsls	r3, r3, #3
    776c:	b219      	sxth	r1, r3
    776e:	23fc      	movs	r3, #252	; 0xfc
    7770:	00db      	lsls	r3, r3, #3
    7772:	400b      	ands	r3, r1
    7774:	b21b      	sxth	r3, r3
    7776:	4313      	orrs	r3, r2
    7778:	b21a      	sxth	r2, r3
    777a:	1c7b      	adds	r3, r7, #1
    777c:	781b      	ldrb	r3, [r3, #0]
    777e:	08db      	lsrs	r3, r3, #3
    7780:	b2db      	uxtb	r3, r3
    7782:	b21b      	sxth	r3, r3
    7784:	4313      	orrs	r3, r2
    7786:	b21b      	sxth	r3, r3
    7788:	b29b      	uxth	r3, r3
}
    778a:	0018      	movs	r0, r3
    778c:	46bd      	mov	sp, r7
    778e:	b003      	add	sp, #12
    7790:	bd90      	pop	{r4, r7, pc}
	...

00007794 <_ZN16Adafruit_ILI9341C1Eaaa>:
        misopinmask = 0;
    }
#endif
}

Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT) {
    7794:	b590      	push	{r4, r7, lr}
    7796:	b083      	sub	sp, #12
    7798:	af00      	add	r7, sp, #0
    779a:	6078      	str	r0, [r7, #4]
    779c:	000c      	movs	r4, r1
    779e:	0010      	movs	r0, r2
    77a0:	0019      	movs	r1, r3
    77a2:	1cfb      	adds	r3, r7, #3
    77a4:	1c22      	adds	r2, r4, #0
    77a6:	701a      	strb	r2, [r3, #0]
    77a8:	1cbb      	adds	r3, r7, #2
    77aa:	1c02      	adds	r2, r0, #0
    77ac:	701a      	strb	r2, [r3, #0]
    77ae:	1c7b      	adds	r3, r7, #1
    77b0:	1c0a      	adds	r2, r1, #0
    77b2:	701a      	strb	r2, [r3, #0]
    77b4:	6878      	ldr	r0, [r7, #4]
    77b6:	23a0      	movs	r3, #160	; 0xa0
    77b8:	005b      	lsls	r3, r3, #1
    77ba:	001a      	movs	r2, r3
    77bc:	21f0      	movs	r1, #240	; 0xf0
    77be:	f004 fd6f 	bl	c2a0 <_ZN12Adafruit_GFXC1Ess>
    77c2:	4a3c      	ldr	r2, [pc, #240]	; (78b4 <_ZN16Adafruit_ILI9341C1Eaaa+0x120>)
    77c4:	687b      	ldr	r3, [r7, #4]
    77c6:	601a      	str	r2, [r3, #0]
    _cs   = cs;
    77c8:	1cfb      	adds	r3, r7, #3
    77ca:	2200      	movs	r2, #0
    77cc:	569a      	ldrsb	r2, [r3, r2]
    77ce:	687b      	ldr	r3, [r7, #4]
    77d0:	625a      	str	r2, [r3, #36]	; 0x24
    _dc   = dc;
    77d2:	1cbb      	adds	r3, r7, #2
    77d4:	2200      	movs	r2, #0
    77d6:	569a      	ldrsb	r2, [r3, r2]
    77d8:	687b      	ldr	r3, [r7, #4]
    77da:	629a      	str	r2, [r3, #40]	; 0x28
    _rst  = rst;
    77dc:	1c7b      	adds	r3, r7, #1
    77de:	2200      	movs	r2, #0
    77e0:	569a      	ldrsb	r2, [r3, r2]
    77e2:	687b      	ldr	r3, [r7, #4]
    77e4:	62da      	str	r2, [r3, #44]	; 0x2c
    _sclk  = -1;
    77e6:	687b      	ldr	r3, [r7, #4]
    77e8:	2201      	movs	r2, #1
    77ea:	4252      	negs	r2, r2
    77ec:	631a      	str	r2, [r3, #48]	; 0x30
    _mosi  = -1;
    77ee:	687b      	ldr	r3, [r7, #4]
    77f0:	2201      	movs	r2, #1
    77f2:	4252      	negs	r2, r2
    77f4:	635a      	str	r2, [r3, #52]	; 0x34
    _miso  = -1;
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	2201      	movs	r2, #1
    77fa:	4252      	negs	r2, r2
    77fc:	639a      	str	r2, [r3, #56]	; 0x38
    _freq = 0;
    77fe:	687b      	ldr	r3, [r7, #4]
    7800:	2200      	movs	r2, #0
    7802:	621a      	str	r2, [r3, #32]
#ifdef USE_FAST_PINIO
    csport    = portOutputRegister(digitalPinToPort(_cs));
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7808:	492b      	ldr	r1, [pc, #172]	; (78b8 <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    780a:	0013      	movs	r3, r2
    780c:	005b      	lsls	r3, r3, #1
    780e:	189b      	adds	r3, r3, r2
    7810:	00db      	lsls	r3, r3, #3
    7812:	565b      	ldrsb	r3, [r3, r1]
    7814:	01db      	lsls	r3, r3, #7
    7816:	4a29      	ldr	r2, [pc, #164]	; (78bc <_ZN16Adafruit_ILI9341C1Eaaa+0x128>)
    7818:	4694      	mov	ip, r2
    781a:	4463      	add	r3, ip
    781c:	3310      	adds	r3, #16
    781e:	001a      	movs	r2, r3
    7820:	687b      	ldr	r3, [r7, #4]
    7822:	64da      	str	r2, [r3, #76]	; 0x4c
    cspinmask = digitalPinToBitMask(_cs);
    7824:	687b      	ldr	r3, [r7, #4]
    7826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7828:	4923      	ldr	r1, [pc, #140]	; (78b8 <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    782a:	0013      	movs	r3, r2
    782c:	005b      	lsls	r3, r3, #1
    782e:	189b      	adds	r3, r3, r2
    7830:	00db      	lsls	r3, r3, #3
    7832:	18cb      	adds	r3, r1, r3
    7834:	3304      	adds	r3, #4
    7836:	681b      	ldr	r3, [r3, #0]
    7838:	2201      	movs	r2, #1
    783a:	409a      	lsls	r2, r3
    783c:	0013      	movs	r3, r2
    783e:	001a      	movs	r2, r3
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	65da      	str	r2, [r3, #92]	; 0x5c
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    7844:	687b      	ldr	r3, [r7, #4]
    7846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7848:	491b      	ldr	r1, [pc, #108]	; (78b8 <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    784a:	0013      	movs	r3, r2
    784c:	005b      	lsls	r3, r3, #1
    784e:	189b      	adds	r3, r3, r2
    7850:	00db      	lsls	r3, r3, #3
    7852:	565b      	ldrsb	r3, [r3, r1]
    7854:	01db      	lsls	r3, r3, #7
    7856:	4a19      	ldr	r2, [pc, #100]	; (78bc <_ZN16Adafruit_ILI9341C1Eaaa+0x128>)
    7858:	4694      	mov	ip, r2
    785a:	4463      	add	r3, ip
    785c:	3310      	adds	r3, #16
    785e:	001a      	movs	r2, r3
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	649a      	str	r2, [r3, #72]	; 0x48
    dcpinmask = digitalPinToBitMask(_dc);
    7864:	687b      	ldr	r3, [r7, #4]
    7866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7868:	4913      	ldr	r1, [pc, #76]	; (78b8 <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    786a:	0013      	movs	r3, r2
    786c:	005b      	lsls	r3, r3, #1
    786e:	189b      	adds	r3, r3, r2
    7870:	00db      	lsls	r3, r3, #3
    7872:	18cb      	adds	r3, r1, r3
    7874:	3304      	adds	r3, #4
    7876:	681b      	ldr	r3, [r3, #0]
    7878:	2201      	movs	r2, #1
    787a:	409a      	lsls	r2, r3
    787c:	0013      	movs	r3, r2
    787e:	001a      	movs	r2, r3
    7880:	687b      	ldr	r3, [r7, #4]
    7882:	661a      	str	r2, [r3, #96]	; 0x60
    clkport     = 0;
    7884:	687b      	ldr	r3, [r7, #4]
    7886:	2200      	movs	r2, #0
    7888:	645a      	str	r2, [r3, #68]	; 0x44
    clkpinmask  = 0;
    788a:	687b      	ldr	r3, [r7, #4]
    788c:	2200      	movs	r2, #0
    788e:	659a      	str	r2, [r3, #88]	; 0x58
    mosiport    = 0;
    7890:	687b      	ldr	r3, [r7, #4]
    7892:	2200      	movs	r2, #0
    7894:	63da      	str	r2, [r3, #60]	; 0x3c
    mosipinmask = 0;
    7896:	687b      	ldr	r3, [r7, #4]
    7898:	2200      	movs	r2, #0
    789a:	651a      	str	r2, [r3, #80]	; 0x50
    misoport    = 0;
    789c:	687b      	ldr	r3, [r7, #4]
    789e:	2200      	movs	r2, #0
    78a0:	641a      	str	r2, [r3, #64]	; 0x40
    misopinmask = 0;
    78a2:	687b      	ldr	r3, [r7, #4]
    78a4:	2200      	movs	r2, #0
    78a6:	655a      	str	r2, [r3, #84]	; 0x54
#endif
}
    78a8:	687b      	ldr	r3, [r7, #4]
    78aa:	0018      	movs	r0, r3
    78ac:	46bd      	mov	sp, r7
    78ae:	b003      	add	sp, #12
    78b0:	bd90      	pop	{r4, r7, pc}
    78b2:	46c0      	nop			; (mov r8, r8)
    78b4:	00013564 	.word	0x00013564
    78b8:	000136c8 	.word	0x000136c8
    78bc:	41004400 	.word	0x41004400

000078c0 <_ZN16Adafruit_ILI93415beginEm>:
#ifdef ESP32
void Adafruit_ILI9341::begin(uint32_t freq, SPIClass &spi)
#else
void Adafruit_ILI9341::begin(uint32_t freq)
#endif
{
    78c0:	b580      	push	{r7, lr}
    78c2:	b082      	sub	sp, #8
    78c4:	af00      	add	r7, sp, #0
    78c6:	6078      	str	r0, [r7, #4]
    78c8:	6039      	str	r1, [r7, #0]
#ifdef ESP32
    _spi = spi;
#endif
    if(!freq){
    78ca:	683b      	ldr	r3, [r7, #0]
    78cc:	2b00      	cmp	r3, #0
    78ce:	d101      	bne.n	78d4 <_ZN16Adafruit_ILI93415beginEm+0x14>
        freq = SPI_DEFAULT_FREQ;
    78d0:	4ba6      	ldr	r3, [pc, #664]	; (7b6c <_ZN16Adafruit_ILI93415beginEm+0x2ac>)
    78d2:	603b      	str	r3, [r7, #0]
    }
    _freq = freq;
    78d4:	687b      	ldr	r3, [r7, #4]
    78d6:	683a      	ldr	r2, [r7, #0]
    78d8:	621a      	str	r2, [r3, #32]

    // Control Pins
    pinMode(_dc, OUTPUT);
    78da:	687b      	ldr	r3, [r7, #4]
    78dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78de:	2101      	movs	r1, #1
    78e0:	0018      	movs	r0, r3
    78e2:	f7fe ffbf 	bl	6864 <pinMode>
    digitalWrite(_dc, LOW);
    78e6:	687b      	ldr	r3, [r7, #4]
    78e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78ea:	2100      	movs	r1, #0
    78ec:	0018      	movs	r0, r3
    78ee:	f7ff f8e3 	bl	6ab8 <digitalWrite>
    pinMode(_cs, OUTPUT);
    78f2:	687b      	ldr	r3, [r7, #4]
    78f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78f6:	2101      	movs	r1, #1
    78f8:	0018      	movs	r0, r3
    78fa:	f7fe ffb3 	bl	6864 <pinMode>
    digitalWrite(_cs, HIGH);
    78fe:	687b      	ldr	r3, [r7, #4]
    7900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7902:	2101      	movs	r1, #1
    7904:	0018      	movs	r0, r3
    7906:	f7ff f8d7 	bl	6ab8 <digitalWrite>

    // Software SPI
    if(_sclk >= 0){
    790a:	687b      	ldr	r3, [r7, #4]
    790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    790e:	2b00      	cmp	r3, #0
    7910:	db21      	blt.n	7956 <_ZN16Adafruit_ILI93415beginEm+0x96>
        pinMode(_mosi, OUTPUT);
    7912:	687b      	ldr	r3, [r7, #4]
    7914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7916:	2101      	movs	r1, #1
    7918:	0018      	movs	r0, r3
    791a:	f7fe ffa3 	bl	6864 <pinMode>
        digitalWrite(_mosi, LOW);
    791e:	687b      	ldr	r3, [r7, #4]
    7920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7922:	2100      	movs	r1, #0
    7924:	0018      	movs	r0, r3
    7926:	f7ff f8c7 	bl	6ab8 <digitalWrite>
        pinMode(_sclk, OUTPUT);
    792a:	687b      	ldr	r3, [r7, #4]
    792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    792e:	2101      	movs	r1, #1
    7930:	0018      	movs	r0, r3
    7932:	f7fe ff97 	bl	6864 <pinMode>
        digitalWrite(_sclk, HIGH);
    7936:	687b      	ldr	r3, [r7, #4]
    7938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    793a:	2101      	movs	r1, #1
    793c:	0018      	movs	r0, r3
    793e:	f7ff f8bb 	bl	6ab8 <digitalWrite>
        if(_miso >= 0){
    7942:	687b      	ldr	r3, [r7, #4]
    7944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7946:	2b00      	cmp	r3, #0
    7948:	db05      	blt.n	7956 <_ZN16Adafruit_ILI93415beginEm+0x96>
            pinMode(_miso, INPUT);
    794a:	687b      	ldr	r3, [r7, #4]
    794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    794e:	2100      	movs	r1, #0
    7950:	0018      	movs	r0, r3
    7952:	f7fe ff87 	bl	6864 <pinMode>
        }
    }

    // Hardware SPI
    SPI_BEGIN();
    7956:	687b      	ldr	r3, [r7, #4]
    7958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    795a:	2b00      	cmp	r3, #0
    795c:	da03      	bge.n	7966 <_ZN16Adafruit_ILI93415beginEm+0xa6>
    795e:	4b84      	ldr	r3, [pc, #528]	; (7b70 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7960:	0018      	movs	r0, r3
    7962:	f003 fed7 	bl	b714 <_ZN8SPIClass5beginEv>

    // toggle RST low to reset
    if (_rst >= 0) {
    7966:	687b      	ldr	r3, [r7, #4]
    7968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    796a:	2b00      	cmp	r3, #0
    796c:	db20      	blt.n	79b0 <_ZN16Adafruit_ILI93415beginEm+0xf0>
        pinMode(_rst, OUTPUT);
    796e:	687b      	ldr	r3, [r7, #4]
    7970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7972:	2101      	movs	r1, #1
    7974:	0018      	movs	r0, r3
    7976:	f7fe ff75 	bl	6864 <pinMode>
        digitalWrite(_rst, HIGH);
    797a:	687b      	ldr	r3, [r7, #4]
    797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    797e:	2101      	movs	r1, #1
    7980:	0018      	movs	r0, r3
    7982:	f7ff f899 	bl	6ab8 <digitalWrite>
        delay(100);
    7986:	2064      	movs	r0, #100	; 0x64
    7988:	f7fb fa50 	bl	2e2c <delay>
        digitalWrite(_rst, LOW);
    798c:	687b      	ldr	r3, [r7, #4]
    798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7990:	2100      	movs	r1, #0
    7992:	0018      	movs	r0, r3
    7994:	f7ff f890 	bl	6ab8 <digitalWrite>
        delay(100);
    7998:	2064      	movs	r0, #100	; 0x64
    799a:	f7fb fa47 	bl	2e2c <delay>
        digitalWrite(_rst, HIGH);
    799e:	687b      	ldr	r3, [r7, #4]
    79a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    79a2:	2101      	movs	r1, #1
    79a4:	0018      	movs	r0, r3
    79a6:	f7ff f887 	bl	6ab8 <digitalWrite>
        delay(200);
    79aa:	20c8      	movs	r0, #200	; 0xc8
    79ac:	f7fb fa3e 	bl	2e2c <delay>
    }

    startWrite();
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	681b      	ldr	r3, [r3, #0]
    79b4:	3314      	adds	r3, #20
    79b6:	681b      	ldr	r3, [r3, #0]
    79b8:	687a      	ldr	r2, [r7, #4]
    79ba:	0010      	movs	r0, r2
    79bc:	4798      	blx	r3

    writeCommand(0xEF);
    79be:	687b      	ldr	r3, [r7, #4]
    79c0:	21ef      	movs	r1, #239	; 0xef
    79c2:	0018      	movs	r0, r3
    79c4:	f000 fb0c 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x03);
    79c8:	687b      	ldr	r3, [r7, #4]
    79ca:	2103      	movs	r1, #3
    79cc:	0018      	movs	r0, r3
    79ce:	f000 fa69 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x80);
    79d2:	687b      	ldr	r3, [r7, #4]
    79d4:	2180      	movs	r1, #128	; 0x80
    79d6:	0018      	movs	r0, r3
    79d8:	f000 fa64 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x02);
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	2102      	movs	r1, #2
    79e0:	0018      	movs	r0, r3
    79e2:	f000 fa5f 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xCF);
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	21cf      	movs	r1, #207	; 0xcf
    79ea:	0018      	movs	r0, r3
    79ec:	f000 faf8 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	2100      	movs	r1, #0
    79f4:	0018      	movs	r0, r3
    79f6:	f000 fa55 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0XC1);
    79fa:	687b      	ldr	r3, [r7, #4]
    79fc:	21c1      	movs	r1, #193	; 0xc1
    79fe:	0018      	movs	r0, r3
    7a00:	f000 fa50 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X30);
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	2130      	movs	r1, #48	; 0x30
    7a08:	0018      	movs	r0, r3
    7a0a:	f000 fa4b 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xED);
    7a0e:	687b      	ldr	r3, [r7, #4]
    7a10:	21ed      	movs	r1, #237	; 0xed
    7a12:	0018      	movs	r0, r3
    7a14:	f000 fae4 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x64);
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	2164      	movs	r1, #100	; 0x64
    7a1c:	0018      	movs	r0, r3
    7a1e:	f000 fa41 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7a22:	687b      	ldr	r3, [r7, #4]
    7a24:	2103      	movs	r1, #3
    7a26:	0018      	movs	r0, r3
    7a28:	f000 fa3c 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X12);
    7a2c:	687b      	ldr	r3, [r7, #4]
    7a2e:	2112      	movs	r1, #18
    7a30:	0018      	movs	r0, r3
    7a32:	f000 fa37 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X81);
    7a36:	687b      	ldr	r3, [r7, #4]
    7a38:	2181      	movs	r1, #129	; 0x81
    7a3a:	0018      	movs	r0, r3
    7a3c:	f000 fa32 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xE8);
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	21e8      	movs	r1, #232	; 0xe8
    7a44:	0018      	movs	r0, r3
    7a46:	f000 facb 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x85);
    7a4a:	687b      	ldr	r3, [r7, #4]
    7a4c:	2185      	movs	r1, #133	; 0x85
    7a4e:	0018      	movs	r0, r3
    7a50:	f000 fa28 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	2100      	movs	r1, #0
    7a58:	0018      	movs	r0, r3
    7a5a:	f000 fa23 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x78);
    7a5e:	687b      	ldr	r3, [r7, #4]
    7a60:	2178      	movs	r1, #120	; 0x78
    7a62:	0018      	movs	r0, r3
    7a64:	f000 fa1e 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xCB);
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	21cb      	movs	r1, #203	; 0xcb
    7a6c:	0018      	movs	r0, r3
    7a6e:	f000 fab7 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x39);
    7a72:	687b      	ldr	r3, [r7, #4]
    7a74:	2139      	movs	r1, #57	; 0x39
    7a76:	0018      	movs	r0, r3
    7a78:	f000 fa14 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x2C);
    7a7c:	687b      	ldr	r3, [r7, #4]
    7a7e:	212c      	movs	r1, #44	; 0x2c
    7a80:	0018      	movs	r0, r3
    7a82:	f000 fa0f 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7a86:	687b      	ldr	r3, [r7, #4]
    7a88:	2100      	movs	r1, #0
    7a8a:	0018      	movs	r0, r3
    7a8c:	f000 fa0a 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x34);
    7a90:	687b      	ldr	r3, [r7, #4]
    7a92:	2134      	movs	r1, #52	; 0x34
    7a94:	0018      	movs	r0, r3
    7a96:	f000 fa05 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x02);
    7a9a:	687b      	ldr	r3, [r7, #4]
    7a9c:	2102      	movs	r1, #2
    7a9e:	0018      	movs	r0, r3
    7aa0:	f000 fa00 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xF7);
    7aa4:	687b      	ldr	r3, [r7, #4]
    7aa6:	21f7      	movs	r1, #247	; 0xf7
    7aa8:	0018      	movs	r0, r3
    7aaa:	f000 fa99 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x20);
    7aae:	687b      	ldr	r3, [r7, #4]
    7ab0:	2120      	movs	r1, #32
    7ab2:	0018      	movs	r0, r3
    7ab4:	f000 f9f6 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xEA);
    7ab8:	687b      	ldr	r3, [r7, #4]
    7aba:	21ea      	movs	r1, #234	; 0xea
    7abc:	0018      	movs	r0, r3
    7abe:	f000 fa8f 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7ac2:	687b      	ldr	r3, [r7, #4]
    7ac4:	2100      	movs	r1, #0
    7ac6:	0018      	movs	r0, r3
    7ac8:	f000 f9ec 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7acc:	687b      	ldr	r3, [r7, #4]
    7ace:	2100      	movs	r1, #0
    7ad0:	0018      	movs	r0, r3
    7ad2:	f000 f9e7 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PWCTR1);    //Power control
    7ad6:	687b      	ldr	r3, [r7, #4]
    7ad8:	21c0      	movs	r1, #192	; 0xc0
    7ada:	0018      	movs	r0, r3
    7adc:	f000 fa80 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x23);   //VRH[5:0]
    7ae0:	687b      	ldr	r3, [r7, #4]
    7ae2:	2123      	movs	r1, #35	; 0x23
    7ae4:	0018      	movs	r0, r3
    7ae6:	f000 f9dd 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PWCTR2);    //Power control
    7aea:	687b      	ldr	r3, [r7, #4]
    7aec:	21c1      	movs	r1, #193	; 0xc1
    7aee:	0018      	movs	r0, r3
    7af0:	f000 fa76 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x10);   //SAP[2:0];BT[3:0]
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	2110      	movs	r1, #16
    7af8:	0018      	movs	r0, r3
    7afa:	f000 f9d3 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VMCTR1);    //VCM control
    7afe:	687b      	ldr	r3, [r7, #4]
    7b00:	21c5      	movs	r1, #197	; 0xc5
    7b02:	0018      	movs	r0, r3
    7b04:	f000 fa6c 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x3e);
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	213e      	movs	r1, #62	; 0x3e
    7b0c:	0018      	movs	r0, r3
    7b0e:	f000 f9c9 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x28);
    7b12:	687b      	ldr	r3, [r7, #4]
    7b14:	2128      	movs	r1, #40	; 0x28
    7b16:	0018      	movs	r0, r3
    7b18:	f000 f9c4 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VMCTR2);    //VCM control2
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	21c7      	movs	r1, #199	; 0xc7
    7b20:	0018      	movs	r0, r3
    7b22:	f000 fa5d 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x86);  //--
    7b26:	687b      	ldr	r3, [r7, #4]
    7b28:	2186      	movs	r1, #134	; 0x86
    7b2a:	0018      	movs	r0, r3
    7b2c:	f000 f9ba 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_MADCTL);    // Memory Access Control
    7b30:	687b      	ldr	r3, [r7, #4]
    7b32:	2136      	movs	r1, #54	; 0x36
    7b34:	0018      	movs	r0, r3
    7b36:	f000 fa53 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x48);
    7b3a:	687b      	ldr	r3, [r7, #4]
    7b3c:	2148      	movs	r1, #72	; 0x48
    7b3e:	0018      	movs	r0, r3
    7b40:	f000 f9b0 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VSCRSADD); // Vertical scroll
    7b44:	687b      	ldr	r3, [r7, #4]
    7b46:	2137      	movs	r1, #55	; 0x37
    7b48:	0018      	movs	r0, r3
    7b4a:	f000 fa49 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE16(0);                 // Zero
    7b4e:	687b      	ldr	r3, [r7, #4]
    7b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b52:	2b00      	cmp	r3, #0
    7b54:	da0e      	bge.n	7b74 <_ZN16Adafruit_ILI93415beginEm+0x2b4>
    7b56:	4b06      	ldr	r3, [pc, #24]	; (7b70 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7b58:	2100      	movs	r1, #0
    7b5a:	0018      	movs	r0, r3
    7b5c:	f003 fec6 	bl	b8ec <_ZN8SPIClass8transferEh>
    7b60:	4b03      	ldr	r3, [pc, #12]	; (7b70 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7b62:	2100      	movs	r1, #0
    7b64:	0018      	movs	r0, r3
    7b66:	f003 fec1 	bl	b8ec <_ZN8SPIClass8transferEh>
    7b6a:	e00d      	b.n	7b88 <_ZN16Adafruit_ILI93415beginEm+0x2c8>
    7b6c:	016e3600 	.word	0x016e3600
    7b70:	20000b7c 	.word	0x20000b7c
    7b74:	687b      	ldr	r3, [r7, #4]
    7b76:	2100      	movs	r1, #0
    7b78:	0018      	movs	r0, r3
    7b7a:	f000 f993 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	2100      	movs	r1, #0
    7b82:	0018      	movs	r0, r3
    7b84:	f000 f98e 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PIXFMT);
    7b88:	687b      	ldr	r3, [r7, #4]
    7b8a:	213a      	movs	r1, #58	; 0x3a
    7b8c:	0018      	movs	r0, r3
    7b8e:	f000 fa27 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x55);
    7b92:	687b      	ldr	r3, [r7, #4]
    7b94:	2155      	movs	r1, #85	; 0x55
    7b96:	0018      	movs	r0, r3
    7b98:	f000 f984 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_FRMCTR1);
    7b9c:	687b      	ldr	r3, [r7, #4]
    7b9e:	21b1      	movs	r1, #177	; 0xb1
    7ba0:	0018      	movs	r0, r3
    7ba2:	f000 fa1d 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7ba6:	687b      	ldr	r3, [r7, #4]
    7ba8:	2100      	movs	r1, #0
    7baa:	0018      	movs	r0, r3
    7bac:	f000 f97a 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x18);
    7bb0:	687b      	ldr	r3, [r7, #4]
    7bb2:	2118      	movs	r1, #24
    7bb4:	0018      	movs	r0, r3
    7bb6:	f000 f975 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_DFUNCTR);    // Display Function Control
    7bba:	687b      	ldr	r3, [r7, #4]
    7bbc:	21b6      	movs	r1, #182	; 0xb6
    7bbe:	0018      	movs	r0, r3
    7bc0:	f000 fa0e 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x08);
    7bc4:	687b      	ldr	r3, [r7, #4]
    7bc6:	2108      	movs	r1, #8
    7bc8:	0018      	movs	r0, r3
    7bca:	f000 f96b 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x82);
    7bce:	687b      	ldr	r3, [r7, #4]
    7bd0:	2182      	movs	r1, #130	; 0x82
    7bd2:	0018      	movs	r0, r3
    7bd4:	f000 f966 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x27);
    7bd8:	687b      	ldr	r3, [r7, #4]
    7bda:	2127      	movs	r1, #39	; 0x27
    7bdc:	0018      	movs	r0, r3
    7bde:	f000 f961 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xF2);    // 3Gamma Function Disable
    7be2:	687b      	ldr	r3, [r7, #4]
    7be4:	21f2      	movs	r1, #242	; 0xf2
    7be6:	0018      	movs	r0, r3
    7be8:	f000 f9fa 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7bec:	687b      	ldr	r3, [r7, #4]
    7bee:	2100      	movs	r1, #0
    7bf0:	0018      	movs	r0, r3
    7bf2:	f000 f957 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GAMMASET);    //Gamma curve selected
    7bf6:	687b      	ldr	r3, [r7, #4]
    7bf8:	2126      	movs	r1, #38	; 0x26
    7bfa:	0018      	movs	r0, r3
    7bfc:	f000 f9f0 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x01);
    7c00:	687b      	ldr	r3, [r7, #4]
    7c02:	2101      	movs	r1, #1
    7c04:	0018      	movs	r0, r3
    7c06:	f000 f94d 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GMCTRP1);    //Set Gamma
    7c0a:	687b      	ldr	r3, [r7, #4]
    7c0c:	21e0      	movs	r1, #224	; 0xe0
    7c0e:	0018      	movs	r0, r3
    7c10:	f000 f9e6 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x0F);
    7c14:	687b      	ldr	r3, [r7, #4]
    7c16:	210f      	movs	r1, #15
    7c18:	0018      	movs	r0, r3
    7c1a:	f000 f943 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7c1e:	687b      	ldr	r3, [r7, #4]
    7c20:	2131      	movs	r1, #49	; 0x31
    7c22:	0018      	movs	r0, r3
    7c24:	f000 f93e 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x2B);
    7c28:	687b      	ldr	r3, [r7, #4]
    7c2a:	212b      	movs	r1, #43	; 0x2b
    7c2c:	0018      	movs	r0, r3
    7c2e:	f000 f939 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0C);
    7c32:	687b      	ldr	r3, [r7, #4]
    7c34:	210c      	movs	r1, #12
    7c36:	0018      	movs	r0, r3
    7c38:	f000 f934 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	210e      	movs	r1, #14
    7c40:	0018      	movs	r0, r3
    7c42:	f000 f92f 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x08);
    7c46:	687b      	ldr	r3, [r7, #4]
    7c48:	2108      	movs	r1, #8
    7c4a:	0018      	movs	r0, r3
    7c4c:	f000 f92a 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x4E);
    7c50:	687b      	ldr	r3, [r7, #4]
    7c52:	214e      	movs	r1, #78	; 0x4e
    7c54:	0018      	movs	r0, r3
    7c56:	f000 f925 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0xF1);
    7c5a:	687b      	ldr	r3, [r7, #4]
    7c5c:	21f1      	movs	r1, #241	; 0xf1
    7c5e:	0018      	movs	r0, r3
    7c60:	f000 f920 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x37);
    7c64:	687b      	ldr	r3, [r7, #4]
    7c66:	2137      	movs	r1, #55	; 0x37
    7c68:	0018      	movs	r0, r3
    7c6a:	f000 f91b 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x07);
    7c6e:	687b      	ldr	r3, [r7, #4]
    7c70:	2107      	movs	r1, #7
    7c72:	0018      	movs	r0, r3
    7c74:	f000 f916 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x10);
    7c78:	687b      	ldr	r3, [r7, #4]
    7c7a:	2110      	movs	r1, #16
    7c7c:	0018      	movs	r0, r3
    7c7e:	f000 f911 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7c82:	687b      	ldr	r3, [r7, #4]
    7c84:	2103      	movs	r1, #3
    7c86:	0018      	movs	r0, r3
    7c88:	f000 f90c 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	210e      	movs	r1, #14
    7c90:	0018      	movs	r0, r3
    7c92:	f000 f907 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x09);
    7c96:	687b      	ldr	r3, [r7, #4]
    7c98:	2109      	movs	r1, #9
    7c9a:	0018      	movs	r0, r3
    7c9c:	f000 f902 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7ca0:	687b      	ldr	r3, [r7, #4]
    7ca2:	2100      	movs	r1, #0
    7ca4:	0018      	movs	r0, r3
    7ca6:	f000 f8fd 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GMCTRN1);    //Set Gamma
    7caa:	687b      	ldr	r3, [r7, #4]
    7cac:	21e1      	movs	r1, #225	; 0xe1
    7cae:	0018      	movs	r0, r3
    7cb0:	f000 f996 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	2100      	movs	r1, #0
    7cb8:	0018      	movs	r0, r3
    7cba:	f000 f8f3 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7cbe:	687b      	ldr	r3, [r7, #4]
    7cc0:	210e      	movs	r1, #14
    7cc2:	0018      	movs	r0, r3
    7cc4:	f000 f8ee 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x14);
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	2114      	movs	r1, #20
    7ccc:	0018      	movs	r0, r3
    7cce:	f000 f8e9 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7cd2:	687b      	ldr	r3, [r7, #4]
    7cd4:	2103      	movs	r1, #3
    7cd6:	0018      	movs	r0, r3
    7cd8:	f000 f8e4 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x11);
    7cdc:	687b      	ldr	r3, [r7, #4]
    7cde:	2111      	movs	r1, #17
    7ce0:	0018      	movs	r0, r3
    7ce2:	f000 f8df 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x07);
    7ce6:	687b      	ldr	r3, [r7, #4]
    7ce8:	2107      	movs	r1, #7
    7cea:	0018      	movs	r0, r3
    7cec:	f000 f8da 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7cf0:	687b      	ldr	r3, [r7, #4]
    7cf2:	2131      	movs	r1, #49	; 0x31
    7cf4:	0018      	movs	r0, r3
    7cf6:	f000 f8d5 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0xC1);
    7cfa:	687b      	ldr	r3, [r7, #4]
    7cfc:	21c1      	movs	r1, #193	; 0xc1
    7cfe:	0018      	movs	r0, r3
    7d00:	f000 f8d0 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x48);
    7d04:	687b      	ldr	r3, [r7, #4]
    7d06:	2148      	movs	r1, #72	; 0x48
    7d08:	0018      	movs	r0, r3
    7d0a:	f000 f8cb 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x08);
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	2108      	movs	r1, #8
    7d12:	0018      	movs	r0, r3
    7d14:	f000 f8c6 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0F);
    7d18:	687b      	ldr	r3, [r7, #4]
    7d1a:	210f      	movs	r1, #15
    7d1c:	0018      	movs	r0, r3
    7d1e:	f000 f8c1 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0C);
    7d22:	687b      	ldr	r3, [r7, #4]
    7d24:	210c      	movs	r1, #12
    7d26:	0018      	movs	r0, r3
    7d28:	f000 f8bc 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7d2c:	687b      	ldr	r3, [r7, #4]
    7d2e:	2131      	movs	r1, #49	; 0x31
    7d30:	0018      	movs	r0, r3
    7d32:	f000 f8b7 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x36);
    7d36:	687b      	ldr	r3, [r7, #4]
    7d38:	2136      	movs	r1, #54	; 0x36
    7d3a:	0018      	movs	r0, r3
    7d3c:	f000 f8b2 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0F);
    7d40:	687b      	ldr	r3, [r7, #4]
    7d42:	210f      	movs	r1, #15
    7d44:	0018      	movs	r0, r3
    7d46:	f000 f8ad 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_SLPOUT);    //Exit Sleep
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	2111      	movs	r1, #17
    7d4e:	0018      	movs	r0, r3
    7d50:	f000 f946 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    delay(120);
    7d54:	2078      	movs	r0, #120	; 0x78
    7d56:	f7fb f869 	bl	2e2c <delay>
    writeCommand(ILI9341_DISPON);    //Display on
    7d5a:	687b      	ldr	r3, [r7, #4]
    7d5c:	2129      	movs	r1, #41	; 0x29
    7d5e:	0018      	movs	r0, r3
    7d60:	f000 f93e 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    delay(120);
    7d64:	2078      	movs	r0, #120	; 0x78
    7d66:	f7fb f861 	bl	2e2c <delay>
    endWrite();
    7d6a:	687b      	ldr	r3, [r7, #4]
    7d6c:	681b      	ldr	r3, [r3, #0]
    7d6e:	332c      	adds	r3, #44	; 0x2c
    7d70:	681b      	ldr	r3, [r3, #0]
    7d72:	687a      	ldr	r2, [r7, #4]
    7d74:	0010      	movs	r0, r2
    7d76:	4798      	blx	r3

    _width  = ILI9341_TFTWIDTH;
    7d78:	687b      	ldr	r3, [r7, #4]
    7d7a:	22f0      	movs	r2, #240	; 0xf0
    7d7c:	819a      	strh	r2, [r3, #12]
    _height = ILI9341_TFTHEIGHT;
    7d7e:	687b      	ldr	r3, [r7, #4]
    7d80:	22a0      	movs	r2, #160	; 0xa0
    7d82:	0052      	lsls	r2, r2, #1
    7d84:	81da      	strh	r2, [r3, #14]
}
    7d86:	46c0      	nop			; (mov r8, r8)
    7d88:	46bd      	mov	sp, r7
    7d8a:	b002      	add	sp, #8
    7d8c:	bd80      	pop	{r7, pc}
    7d8e:	46c0      	nop			; (mov r8, r8)

00007d90 <_ZN16Adafruit_ILI934111setRotationEh>:

void Adafruit_ILI9341::setRotation(uint8_t m) {
    7d90:	b580      	push	{r7, lr}
    7d92:	b082      	sub	sp, #8
    7d94:	af00      	add	r7, sp, #0
    7d96:	6078      	str	r0, [r7, #4]
    7d98:	000a      	movs	r2, r1
    7d9a:	1cfb      	adds	r3, r7, #3
    7d9c:	701a      	strb	r2, [r3, #0]
    rotation = m % 4; // can't be higher than 3
    7d9e:	1cfb      	adds	r3, r7, #3
    7da0:	781b      	ldrb	r3, [r3, #0]
    7da2:	2203      	movs	r2, #3
    7da4:	4013      	ands	r3, r2
    7da6:	b2da      	uxtb	r2, r3
    7da8:	687b      	ldr	r3, [r7, #4]
    7daa:	765a      	strb	r2, [r3, #25]
    switch (rotation) {
    7dac:	687b      	ldr	r3, [r7, #4]
    7dae:	7e5b      	ldrb	r3, [r3, #25]
    7db0:	2b01      	cmp	r3, #1
    7db2:	d013      	beq.n	7ddc <_ZN16Adafruit_ILI934111setRotationEh+0x4c>
    7db4:	dc02      	bgt.n	7dbc <_ZN16Adafruit_ILI934111setRotationEh+0x2c>
    7db6:	2b00      	cmp	r3, #0
    7db8:	d005      	beq.n	7dc6 <_ZN16Adafruit_ILI934111setRotationEh+0x36>
    7dba:	e030      	b.n	7e1e <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
    7dbc:	2b02      	cmp	r3, #2
    7dbe:	d018      	beq.n	7df2 <_ZN16Adafruit_ILI934111setRotationEh+0x62>
    7dc0:	2b03      	cmp	r3, #3
    7dc2:	d021      	beq.n	7e08 <_ZN16Adafruit_ILI934111setRotationEh+0x78>
    7dc4:	e02b      	b.n	7e1e <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 0:
            m = (MADCTL_MX | MADCTL_BGR);
    7dc6:	1cfb      	adds	r3, r7, #3
    7dc8:	2248      	movs	r2, #72	; 0x48
    7dca:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTWIDTH;
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	22f0      	movs	r2, #240	; 0xf0
    7dd0:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTHEIGHT;
    7dd2:	687b      	ldr	r3, [r7, #4]
    7dd4:	22a0      	movs	r2, #160	; 0xa0
    7dd6:	0052      	lsls	r2, r2, #1
    7dd8:	81da      	strh	r2, [r3, #14]
            break;
    7dda:	e020      	b.n	7e1e <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 1:
            m = (MADCTL_MV | MADCTL_BGR);
    7ddc:	1cfb      	adds	r3, r7, #3
    7dde:	2228      	movs	r2, #40	; 0x28
    7de0:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTHEIGHT;
    7de2:	687b      	ldr	r3, [r7, #4]
    7de4:	22a0      	movs	r2, #160	; 0xa0
    7de6:	0052      	lsls	r2, r2, #1
    7de8:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTWIDTH;
    7dea:	687b      	ldr	r3, [r7, #4]
    7dec:	22f0      	movs	r2, #240	; 0xf0
    7dee:	81da      	strh	r2, [r3, #14]
            break;
    7df0:	e015      	b.n	7e1e <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 2:
            m = (MADCTL_MY | MADCTL_BGR);
    7df2:	1cfb      	adds	r3, r7, #3
    7df4:	2288      	movs	r2, #136	; 0x88
    7df6:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTWIDTH;
    7df8:	687b      	ldr	r3, [r7, #4]
    7dfa:	22f0      	movs	r2, #240	; 0xf0
    7dfc:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTHEIGHT;
    7dfe:	687b      	ldr	r3, [r7, #4]
    7e00:	22a0      	movs	r2, #160	; 0xa0
    7e02:	0052      	lsls	r2, r2, #1
    7e04:	81da      	strh	r2, [r3, #14]
            break;
    7e06:	e00a      	b.n	7e1e <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 3:
            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
    7e08:	1cfb      	adds	r3, r7, #3
    7e0a:	22e8      	movs	r2, #232	; 0xe8
    7e0c:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTHEIGHT;
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	22a0      	movs	r2, #160	; 0xa0
    7e12:	0052      	lsls	r2, r2, #1
    7e14:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTWIDTH;
    7e16:	687b      	ldr	r3, [r7, #4]
    7e18:	22f0      	movs	r2, #240	; 0xf0
    7e1a:	81da      	strh	r2, [r3, #14]
            break;
    7e1c:	46c0      	nop			; (mov r8, r8)
    }

    startWrite();
    7e1e:	687b      	ldr	r3, [r7, #4]
    7e20:	681b      	ldr	r3, [r3, #0]
    7e22:	3314      	adds	r3, #20
    7e24:	681b      	ldr	r3, [r3, #0]
    7e26:	687a      	ldr	r2, [r7, #4]
    7e28:	0010      	movs	r0, r2
    7e2a:	4798      	blx	r3
    writeCommand(ILI9341_MADCTL);
    7e2c:	687b      	ldr	r3, [r7, #4]
    7e2e:	2136      	movs	r1, #54	; 0x36
    7e30:	0018      	movs	r0, r3
    7e32:	f000 f8d5 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(m);
    7e36:	1cfb      	adds	r3, r7, #3
    7e38:	781a      	ldrb	r2, [r3, #0]
    7e3a:	687b      	ldr	r3, [r7, #4]
    7e3c:	0011      	movs	r1, r2
    7e3e:	0018      	movs	r0, r3
    7e40:	f000 f830 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    endWrite();
    7e44:	687b      	ldr	r3, [r7, #4]
    7e46:	681b      	ldr	r3, [r3, #0]
    7e48:	332c      	adds	r3, #44	; 0x2c
    7e4a:	681b      	ldr	r3, [r3, #0]
    7e4c:	687a      	ldr	r2, [r7, #4]
    7e4e:	0010      	movs	r0, r2
    7e50:	4798      	blx	r3
}
    7e52:	46c0      	nop			; (mov r8, r8)
    7e54:	46bd      	mov	sp, r7
    7e56:	b002      	add	sp, #8
    7e58:	bd80      	pop	{r7, pc}

00007e5a <_ZN16Adafruit_ILI934113invertDisplayEb>:

void Adafruit_ILI9341::invertDisplay(boolean i) {
    7e5a:	b580      	push	{r7, lr}
    7e5c:	b082      	sub	sp, #8
    7e5e:	af00      	add	r7, sp, #0
    7e60:	6078      	str	r0, [r7, #4]
    7e62:	000a      	movs	r2, r1
    7e64:	1cfb      	adds	r3, r7, #3
    7e66:	701a      	strb	r2, [r3, #0]
    startWrite();
    7e68:	687b      	ldr	r3, [r7, #4]
    7e6a:	681b      	ldr	r3, [r3, #0]
    7e6c:	3314      	adds	r3, #20
    7e6e:	681b      	ldr	r3, [r3, #0]
    7e70:	687a      	ldr	r2, [r7, #4]
    7e72:	0010      	movs	r0, r2
    7e74:	4798      	blx	r3
    writeCommand(i ? ILI9341_INVON : ILI9341_INVOFF);
    7e76:	1cfb      	adds	r3, r7, #3
    7e78:	781b      	ldrb	r3, [r3, #0]
    7e7a:	2b00      	cmp	r3, #0
    7e7c:	d001      	beq.n	7e82 <_ZN16Adafruit_ILI934113invertDisplayEb+0x28>
    7e7e:	2321      	movs	r3, #33	; 0x21
    7e80:	e000      	b.n	7e84 <_ZN16Adafruit_ILI934113invertDisplayEb+0x2a>
    7e82:	2320      	movs	r3, #32
    7e84:	687a      	ldr	r2, [r7, #4]
    7e86:	0019      	movs	r1, r3
    7e88:	0010      	movs	r0, r2
    7e8a:	f000 f8a9 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    endWrite();
    7e8e:	687b      	ldr	r3, [r7, #4]
    7e90:	681b      	ldr	r3, [r3, #0]
    7e92:	332c      	adds	r3, #44	; 0x2c
    7e94:	681b      	ldr	r3, [r3, #0]
    7e96:	687a      	ldr	r2, [r7, #4]
    7e98:	0010      	movs	r0, r2
    7e9a:	4798      	blx	r3
}
    7e9c:	46c0      	nop			; (mov r8, r8)
    7e9e:	46bd      	mov	sp, r7
    7ea0:	b002      	add	sp, #8
    7ea2:	bd80      	pop	{r7, pc}

00007ea4 <_ZN16Adafruit_ILI93418spiWriteEh>:
        }
    }
    return r;
}

void Adafruit_ILI9341::spiWrite(uint8_t b) {
    7ea4:	b580      	push	{r7, lr}
    7ea6:	b084      	sub	sp, #16
    7ea8:	af00      	add	r7, sp, #0
    7eaa:	6078      	str	r0, [r7, #4]
    7eac:	000a      	movs	r2, r1
    7eae:	1cfb      	adds	r3, r7, #3
    7eb0:	701a      	strb	r2, [r3, #0]
    if(_sclk < 0){
    7eb2:	687b      	ldr	r3, [r7, #4]
    7eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7eb6:	2b00      	cmp	r3, #0
    7eb8:	da07      	bge.n	7eca <_ZN16Adafruit_ILI93418spiWriteEh+0x26>
        HSPI_WRITE(b);
    7eba:	1cfb      	adds	r3, r7, #3
    7ebc:	781a      	ldrb	r2, [r3, #0]
    7ebe:	4b25      	ldr	r3, [pc, #148]	; (7f54 <_ZN16Adafruit_ILI93418spiWriteEh+0xb0>)
    7ec0:	0011      	movs	r1, r2
    7ec2:	0018      	movs	r0, r3
    7ec4:	f003 fd12 	bl	b8ec <_ZN8SPIClass8transferEh>
        return;
    7ec8:	e040      	b.n	7f4c <_ZN16Adafruit_ILI93418spiWriteEh+0xa8>
    }
    for(uint8_t bit = 0x80; bit; bit >>= 1){
    7eca:	230f      	movs	r3, #15
    7ecc:	18fb      	adds	r3, r7, r3
    7ece:	2280      	movs	r2, #128	; 0x80
    7ed0:	701a      	strb	r2, [r3, #0]
    7ed2:	230f      	movs	r3, #15
    7ed4:	18fb      	adds	r3, r7, r3
    7ed6:	781b      	ldrb	r3, [r3, #0]
    7ed8:	2b00      	cmp	r3, #0
    7eda:	d037      	beq.n	7f4c <_ZN16Adafruit_ILI93418spiWriteEh+0xa8>
        if((b) & bit){
    7edc:	1cfb      	adds	r3, r7, #3
    7ede:	220f      	movs	r2, #15
    7ee0:	18ba      	adds	r2, r7, r2
    7ee2:	781b      	ldrb	r3, [r3, #0]
    7ee4:	7812      	ldrb	r2, [r2, #0]
    7ee6:	4013      	ands	r3, r2
    7ee8:	b2db      	uxtb	r3, r3
    7eea:	2b00      	cmp	r3, #0
    7eec:	d009      	beq.n	7f02 <_ZN16Adafruit_ILI93418spiWriteEh+0x5e>
            SSPI_MOSI_HIGH();
    7eee:	687b      	ldr	r3, [r7, #4]
    7ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7ef2:	687a      	ldr	r2, [r7, #4]
    7ef4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    7ef6:	6811      	ldr	r1, [r2, #0]
    7ef8:	687a      	ldr	r2, [r7, #4]
    7efa:	6d12      	ldr	r2, [r2, #80]	; 0x50
    7efc:	430a      	orrs	r2, r1
    7efe:	601a      	str	r2, [r3, #0]
    7f00:	e009      	b.n	7f16 <_ZN16Adafruit_ILI93418spiWriteEh+0x72>
        } else {
            SSPI_MOSI_LOW();
    7f02:	687b      	ldr	r3, [r7, #4]
    7f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7f06:	687a      	ldr	r2, [r7, #4]
    7f08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    7f0a:	6811      	ldr	r1, [r2, #0]
    7f0c:	687a      	ldr	r2, [r7, #4]
    7f0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
    7f10:	43d2      	mvns	r2, r2
    7f12:	400a      	ands	r2, r1
    7f14:	601a      	str	r2, [r3, #0]
        }
        SSPI_SCK_LOW();
    7f16:	687b      	ldr	r3, [r7, #4]
    7f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7f1a:	687a      	ldr	r2, [r7, #4]
    7f1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
    7f1e:	6811      	ldr	r1, [r2, #0]
    7f20:	687a      	ldr	r2, [r7, #4]
    7f22:	6d92      	ldr	r2, [r2, #88]	; 0x58
    7f24:	43d2      	mvns	r2, r2
    7f26:	400a      	ands	r2, r1
    7f28:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7f2a:	687b      	ldr	r3, [r7, #4]
    7f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7f2e:	687a      	ldr	r2, [r7, #4]
    7f30:	6c52      	ldr	r2, [r2, #68]	; 0x44
    7f32:	6811      	ldr	r1, [r2, #0]
    7f34:	687a      	ldr	r2, [r7, #4]
    7f36:	6d92      	ldr	r2, [r2, #88]	; 0x58
    7f38:	430a      	orrs	r2, r1
    7f3a:	601a      	str	r2, [r3, #0]
    for(uint8_t bit = 0x80; bit; bit >>= 1){
    7f3c:	230f      	movs	r3, #15
    7f3e:	18fb      	adds	r3, r7, r3
    7f40:	781b      	ldrb	r3, [r3, #0]
    7f42:	105a      	asrs	r2, r3, #1
    7f44:	230f      	movs	r3, #15
    7f46:	18fb      	adds	r3, r7, r3
    7f48:	701a      	strb	r2, [r3, #0]
    7f4a:	e7c2      	b.n	7ed2 <_ZN16Adafruit_ILI93418spiWriteEh+0x2e>
    }
}
    7f4c:	46bd      	mov	sp, r7
    7f4e:	b004      	add	sp, #16
    7f50:	bd80      	pop	{r7, pc}
    7f52:	46c0      	nop			; (mov r8, r8)
    7f54:	20000b7c 	.word	0x20000b7c

00007f58 <_ZN16Adafruit_ILI934110startWriteEv>:

/*
 * Transaction API
 * */

void Adafruit_ILI9341::startWrite(void){
    7f58:	b580      	push	{r7, lr}
    7f5a:	b084      	sub	sp, #16
    7f5c:	af00      	add	r7, sp, #0
    7f5e:	6078      	str	r0, [r7, #4]
    SPI_BEGIN_TRANSACTION();
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7f64:	2b00      	cmp	r3, #0
    7f66:	da0e      	bge.n	7f86 <_ZN16Adafruit_ILI934110startWriteEv+0x2e>
    7f68:	687b      	ldr	r3, [r7, #4]
    7f6a:	6a19      	ldr	r1, [r3, #32]
    7f6c:	2308      	movs	r3, #8
    7f6e:	18f8      	adds	r0, r7, r3
    7f70:	2302      	movs	r3, #2
    7f72:	2201      	movs	r2, #1
    7f74:	f7ff fb74 	bl	7660 <_ZN11SPISettingsC1Em8BitOrderh>
    7f78:	2308      	movs	r3, #8
    7f7a:	18fb      	adds	r3, r7, r3
    7f7c:	4809      	ldr	r0, [pc, #36]	; (7fa4 <_ZN16Adafruit_ILI934110startWriteEv+0x4c>)
    7f7e:	6819      	ldr	r1, [r3, #0]
    7f80:	685a      	ldr	r2, [r3, #4]
    7f82:	f003 fc57 	bl	b834 <_ZN8SPIClass16beginTransactionE11SPISettings>
    SPI_CS_LOW();
    7f86:	687b      	ldr	r3, [r7, #4]
    7f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7f8a:	687a      	ldr	r2, [r7, #4]
    7f8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    7f8e:	6811      	ldr	r1, [r2, #0]
    7f90:	687a      	ldr	r2, [r7, #4]
    7f92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    7f94:	43d2      	mvns	r2, r2
    7f96:	400a      	ands	r2, r1
    7f98:	601a      	str	r2, [r3, #0]
}
    7f9a:	46c0      	nop			; (mov r8, r8)
    7f9c:	46bd      	mov	sp, r7
    7f9e:	b004      	add	sp, #16
    7fa0:	bd80      	pop	{r7, pc}
    7fa2:	46c0      	nop			; (mov r8, r8)
    7fa4:	20000b7c 	.word	0x20000b7c

00007fa8 <_ZN16Adafruit_ILI93418endWriteEv>:

void Adafruit_ILI9341::endWrite(void){
    7fa8:	b580      	push	{r7, lr}
    7faa:	b082      	sub	sp, #8
    7fac:	af00      	add	r7, sp, #0
    7fae:	6078      	str	r0, [r7, #4]
    SPI_CS_HIGH();
    7fb0:	687b      	ldr	r3, [r7, #4]
    7fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7fb4:	687a      	ldr	r2, [r7, #4]
    7fb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    7fb8:	6811      	ldr	r1, [r2, #0]
    7fba:	687a      	ldr	r2, [r7, #4]
    7fbc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    7fbe:	430a      	orrs	r2, r1
    7fc0:	601a      	str	r2, [r3, #0]
    SPI_END_TRANSACTION();
    7fc2:	687b      	ldr	r3, [r7, #4]
    7fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7fc6:	2b00      	cmp	r3, #0
    7fc8:	da03      	bge.n	7fd2 <_ZN16Adafruit_ILI93418endWriteEv+0x2a>
    7fca:	4b04      	ldr	r3, [pc, #16]	; (7fdc <_ZN16Adafruit_ILI93418endWriteEv+0x34>)
    7fcc:	0018      	movs	r0, r3
    7fce:	f003 fc67 	bl	b8a0 <_ZN8SPIClass14endTransactionEv>
}
    7fd2:	46c0      	nop			; (mov r8, r8)
    7fd4:	46bd      	mov	sp, r7
    7fd6:	b002      	add	sp, #8
    7fd8:	bd80      	pop	{r7, pc}
    7fda:	46c0      	nop			; (mov r8, r8)
    7fdc:	20000b7c 	.word	0x20000b7c

00007fe0 <_ZN16Adafruit_ILI934112writeCommandEh>:

void Adafruit_ILI9341::writeCommand(uint8_t cmd){
    7fe0:	b580      	push	{r7, lr}
    7fe2:	b082      	sub	sp, #8
    7fe4:	af00      	add	r7, sp, #0
    7fe6:	6078      	str	r0, [r7, #4]
    7fe8:	000a      	movs	r2, r1
    7fea:	1cfb      	adds	r3, r7, #3
    7fec:	701a      	strb	r2, [r3, #0]
    SPI_DC_LOW();
    7fee:	687b      	ldr	r3, [r7, #4]
    7ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7ff2:	687a      	ldr	r2, [r7, #4]
    7ff4:	6c92      	ldr	r2, [r2, #72]	; 0x48
    7ff6:	6811      	ldr	r1, [r2, #0]
    7ff8:	687a      	ldr	r2, [r7, #4]
    7ffa:	6e12      	ldr	r2, [r2, #96]	; 0x60
    7ffc:	43d2      	mvns	r2, r2
    7ffe:	400a      	ands	r2, r1
    8000:	601a      	str	r2, [r3, #0]
    spiWrite(cmd);
    8002:	1cfb      	adds	r3, r7, #3
    8004:	781a      	ldrb	r2, [r3, #0]
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	0011      	movs	r1, r2
    800a:	0018      	movs	r0, r3
    800c:	f7ff ff4a 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    SPI_DC_HIGH();
    8010:	687b      	ldr	r3, [r7, #4]
    8012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8014:	687a      	ldr	r2, [r7, #4]
    8016:	6c92      	ldr	r2, [r2, #72]	; 0x48
    8018:	6811      	ldr	r1, [r2, #0]
    801a:	687a      	ldr	r2, [r7, #4]
    801c:	6e12      	ldr	r2, [r2, #96]	; 0x60
    801e:	430a      	orrs	r2, r1
    8020:	601a      	str	r2, [r3, #0]
}
    8022:	46c0      	nop			; (mov r8, r8)
    8024:	46bd      	mov	sp, r7
    8026:	b002      	add	sp, #8
    8028:	bd80      	pop	{r7, pc}
	...

0000802c <_ZN16Adafruit_ILI934113setAddrWindowEtttt>:

void Adafruit_ILI9341::setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
    802c:	b590      	push	{r4, r7, lr}
    802e:	b087      	sub	sp, #28
    8030:	af00      	add	r7, sp, #0
    8032:	60f8      	str	r0, [r7, #12]
    8034:	000c      	movs	r4, r1
    8036:	0010      	movs	r0, r2
    8038:	0019      	movs	r1, r3
    803a:	230a      	movs	r3, #10
    803c:	18fb      	adds	r3, r7, r3
    803e:	1c22      	adds	r2, r4, #0
    8040:	801a      	strh	r2, [r3, #0]
    8042:	2308      	movs	r3, #8
    8044:	18fb      	adds	r3, r7, r3
    8046:	1c02      	adds	r2, r0, #0
    8048:	801a      	strh	r2, [r3, #0]
    804a:	1dbb      	adds	r3, r7, #6
    804c:	1c0a      	adds	r2, r1, #0
    804e:	801a      	strh	r2, [r3, #0]
    uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
    8050:	230a      	movs	r3, #10
    8052:	18fb      	adds	r3, r7, r3
    8054:	881b      	ldrh	r3, [r3, #0]
    8056:	041b      	lsls	r3, r3, #16
    8058:	220a      	movs	r2, #10
    805a:	18ba      	adds	r2, r7, r2
    805c:	8811      	ldrh	r1, [r2, #0]
    805e:	1dba      	adds	r2, r7, #6
    8060:	8812      	ldrh	r2, [r2, #0]
    8062:	188a      	adds	r2, r1, r2
    8064:	3a01      	subs	r2, #1
    8066:	4313      	orrs	r3, r2
    8068:	617b      	str	r3, [r7, #20]
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
    806a:	2308      	movs	r3, #8
    806c:	18fb      	adds	r3, r7, r3
    806e:	881b      	ldrh	r3, [r3, #0]
    8070:	041b      	lsls	r3, r3, #16
    8072:	2208      	movs	r2, #8
    8074:	18ba      	adds	r2, r7, r2
    8076:	8811      	ldrh	r1, [r2, #0]
    8078:	2228      	movs	r2, #40	; 0x28
    807a:	18ba      	adds	r2, r7, r2
    807c:	8812      	ldrh	r2, [r2, #0]
    807e:	188a      	adds	r2, r1, r2
    8080:	3a01      	subs	r2, #1
    8082:	4313      	orrs	r3, r2
    8084:	613b      	str	r3, [r7, #16]
    writeCommand(ILI9341_CASET); // Column addr set
    8086:	68fb      	ldr	r3, [r7, #12]
    8088:	212a      	movs	r1, #42	; 0x2a
    808a:	0018      	movs	r0, r3
    808c:	f7ff ffa8 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE32(xa);
    8090:	68fb      	ldr	r3, [r7, #12]
    8092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8094:	2b00      	cmp	r3, #0
    8096:	da1f      	bge.n	80d8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xac>
    8098:	697b      	ldr	r3, [r7, #20]
    809a:	0e1b      	lsrs	r3, r3, #24
    809c:	b2da      	uxtb	r2, r3
    809e:	4b46      	ldr	r3, [pc, #280]	; (81b8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    80a0:	0011      	movs	r1, r2
    80a2:	0018      	movs	r0, r3
    80a4:	f003 fc22 	bl	b8ec <_ZN8SPIClass8transferEh>
    80a8:	697b      	ldr	r3, [r7, #20]
    80aa:	0c1b      	lsrs	r3, r3, #16
    80ac:	b2da      	uxtb	r2, r3
    80ae:	4b42      	ldr	r3, [pc, #264]	; (81b8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    80b0:	0011      	movs	r1, r2
    80b2:	0018      	movs	r0, r3
    80b4:	f003 fc1a 	bl	b8ec <_ZN8SPIClass8transferEh>
    80b8:	697b      	ldr	r3, [r7, #20]
    80ba:	0a1b      	lsrs	r3, r3, #8
    80bc:	b2da      	uxtb	r2, r3
    80be:	4b3e      	ldr	r3, [pc, #248]	; (81b8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    80c0:	0011      	movs	r1, r2
    80c2:	0018      	movs	r0, r3
    80c4:	f003 fc12 	bl	b8ec <_ZN8SPIClass8transferEh>
    80c8:	697b      	ldr	r3, [r7, #20]
    80ca:	b2da      	uxtb	r2, r3
    80cc:	4b3a      	ldr	r3, [pc, #232]	; (81b8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    80ce:	0011      	movs	r1, r2
    80d0:	0018      	movs	r0, r3
    80d2:	f003 fc0b 	bl	b8ec <_ZN8SPIClass8transferEh>
    80d6:	e01e      	b.n	8116 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xea>
    80d8:	697b      	ldr	r3, [r7, #20]
    80da:	0e1b      	lsrs	r3, r3, #24
    80dc:	b2da      	uxtb	r2, r3
    80de:	68fb      	ldr	r3, [r7, #12]
    80e0:	0011      	movs	r1, r2
    80e2:	0018      	movs	r0, r3
    80e4:	f7ff fede 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    80e8:	697b      	ldr	r3, [r7, #20]
    80ea:	0c1b      	lsrs	r3, r3, #16
    80ec:	b2da      	uxtb	r2, r3
    80ee:	68fb      	ldr	r3, [r7, #12]
    80f0:	0011      	movs	r1, r2
    80f2:	0018      	movs	r0, r3
    80f4:	f7ff fed6 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    80f8:	697b      	ldr	r3, [r7, #20]
    80fa:	0a1b      	lsrs	r3, r3, #8
    80fc:	b2da      	uxtb	r2, r3
    80fe:	68fb      	ldr	r3, [r7, #12]
    8100:	0011      	movs	r1, r2
    8102:	0018      	movs	r0, r3
    8104:	f7ff fece 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    8108:	697b      	ldr	r3, [r7, #20]
    810a:	b2da      	uxtb	r2, r3
    810c:	68fb      	ldr	r3, [r7, #12]
    810e:	0011      	movs	r1, r2
    8110:	0018      	movs	r0, r3
    8112:	f7ff fec7 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_PASET); // Row addr set
    8116:	68fb      	ldr	r3, [r7, #12]
    8118:	212b      	movs	r1, #43	; 0x2b
    811a:	0018      	movs	r0, r3
    811c:	f7ff ff60 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE32(ya);
    8120:	68fb      	ldr	r3, [r7, #12]
    8122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8124:	2b00      	cmp	r3, #0
    8126:	da1f      	bge.n	8168 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x13c>
    8128:	693b      	ldr	r3, [r7, #16]
    812a:	0e1b      	lsrs	r3, r3, #24
    812c:	b2da      	uxtb	r2, r3
    812e:	4b22      	ldr	r3, [pc, #136]	; (81b8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8130:	0011      	movs	r1, r2
    8132:	0018      	movs	r0, r3
    8134:	f003 fbda 	bl	b8ec <_ZN8SPIClass8transferEh>
    8138:	693b      	ldr	r3, [r7, #16]
    813a:	0c1b      	lsrs	r3, r3, #16
    813c:	b2da      	uxtb	r2, r3
    813e:	4b1e      	ldr	r3, [pc, #120]	; (81b8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8140:	0011      	movs	r1, r2
    8142:	0018      	movs	r0, r3
    8144:	f003 fbd2 	bl	b8ec <_ZN8SPIClass8transferEh>
    8148:	693b      	ldr	r3, [r7, #16]
    814a:	0a1b      	lsrs	r3, r3, #8
    814c:	b2da      	uxtb	r2, r3
    814e:	4b1a      	ldr	r3, [pc, #104]	; (81b8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8150:	0011      	movs	r1, r2
    8152:	0018      	movs	r0, r3
    8154:	f003 fbca 	bl	b8ec <_ZN8SPIClass8transferEh>
    8158:	693b      	ldr	r3, [r7, #16]
    815a:	b2da      	uxtb	r2, r3
    815c:	4b16      	ldr	r3, [pc, #88]	; (81b8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    815e:	0011      	movs	r1, r2
    8160:	0018      	movs	r0, r3
    8162:	f003 fbc3 	bl	b8ec <_ZN8SPIClass8transferEh>
    8166:	e01e      	b.n	81a6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x17a>
    8168:	693b      	ldr	r3, [r7, #16]
    816a:	0e1b      	lsrs	r3, r3, #24
    816c:	b2da      	uxtb	r2, r3
    816e:	68fb      	ldr	r3, [r7, #12]
    8170:	0011      	movs	r1, r2
    8172:	0018      	movs	r0, r3
    8174:	f7ff fe96 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    8178:	693b      	ldr	r3, [r7, #16]
    817a:	0c1b      	lsrs	r3, r3, #16
    817c:	b2da      	uxtb	r2, r3
    817e:	68fb      	ldr	r3, [r7, #12]
    8180:	0011      	movs	r1, r2
    8182:	0018      	movs	r0, r3
    8184:	f7ff fe8e 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    8188:	693b      	ldr	r3, [r7, #16]
    818a:	0a1b      	lsrs	r3, r3, #8
    818c:	b2da      	uxtb	r2, r3
    818e:	68fb      	ldr	r3, [r7, #12]
    8190:	0011      	movs	r1, r2
    8192:	0018      	movs	r0, r3
    8194:	f7ff fe86 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    8198:	693b      	ldr	r3, [r7, #16]
    819a:	b2da      	uxtb	r2, r3
    819c:	68fb      	ldr	r3, [r7, #12]
    819e:	0011      	movs	r1, r2
    81a0:	0018      	movs	r0, r3
    81a2:	f7ff fe7f 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_RAMWR); // write to RAM
    81a6:	68fb      	ldr	r3, [r7, #12]
    81a8:	212c      	movs	r1, #44	; 0x2c
    81aa:	0018      	movs	r0, r3
    81ac:	f7ff ff18 	bl	7fe0 <_ZN16Adafruit_ILI934112writeCommandEh>
}
    81b0:	46c0      	nop			; (mov r8, r8)
    81b2:	46bd      	mov	sp, r7
    81b4:	b007      	add	sp, #28
    81b6:	bd90      	pop	{r4, r7, pc}
    81b8:	20000b7c 	.word	0x20000b7c

000081bc <_ZN16Adafruit_ILI934110writePixelEt>:
void Adafruit_ILI9341::pushColor(uint16_t color) {
  SPI_WRITE16(color);
}


void Adafruit_ILI9341::writePixel(uint16_t color){
    81bc:	b580      	push	{r7, lr}
    81be:	b082      	sub	sp, #8
    81c0:	af00      	add	r7, sp, #0
    81c2:	6078      	str	r0, [r7, #4]
    81c4:	000a      	movs	r2, r1
    81c6:	1cbb      	adds	r3, r7, #2
    81c8:	801a      	strh	r2, [r3, #0]
    SPI_WRITE16(color);
    81ca:	687b      	ldr	r3, [r7, #4]
    81cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    81ce:	2b00      	cmp	r3, #0
    81d0:	da11      	bge.n	81f6 <_ZN16Adafruit_ILI934110writePixelEt+0x3a>
    81d2:	1cbb      	adds	r3, r7, #2
    81d4:	881b      	ldrh	r3, [r3, #0]
    81d6:	121b      	asrs	r3, r3, #8
    81d8:	b2da      	uxtb	r2, r3
    81da:	4b11      	ldr	r3, [pc, #68]	; (8220 <_ZN16Adafruit_ILI934110writePixelEt+0x64>)
    81dc:	0011      	movs	r1, r2
    81de:	0018      	movs	r0, r3
    81e0:	f003 fb84 	bl	b8ec <_ZN8SPIClass8transferEh>
    81e4:	1cbb      	adds	r3, r7, #2
    81e6:	881b      	ldrh	r3, [r3, #0]
    81e8:	b2da      	uxtb	r2, r3
    81ea:	4b0d      	ldr	r3, [pc, #52]	; (8220 <_ZN16Adafruit_ILI934110writePixelEt+0x64>)
    81ec:	0011      	movs	r1, r2
    81ee:	0018      	movs	r0, r3
    81f0:	f003 fb7c 	bl	b8ec <_ZN8SPIClass8transferEh>
}
    81f4:	e010      	b.n	8218 <_ZN16Adafruit_ILI934110writePixelEt+0x5c>
    SPI_WRITE16(color);
    81f6:	1cbb      	adds	r3, r7, #2
    81f8:	881b      	ldrh	r3, [r3, #0]
    81fa:	121b      	asrs	r3, r3, #8
    81fc:	b2da      	uxtb	r2, r3
    81fe:	687b      	ldr	r3, [r7, #4]
    8200:	0011      	movs	r1, r2
    8202:	0018      	movs	r0, r3
    8204:	f7ff fe4e 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    8208:	1cbb      	adds	r3, r7, #2
    820a:	881b      	ldrh	r3, [r3, #0]
    820c:	b2da      	uxtb	r2, r3
    820e:	687b      	ldr	r3, [r7, #4]
    8210:	0011      	movs	r1, r2
    8212:	0018      	movs	r0, r3
    8214:	f7ff fe46 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
}
    8218:	46c0      	nop			; (mov r8, r8)
    821a:	46bd      	mov	sp, r7
    821c:	b002      	add	sp, #8
    821e:	bd80      	pop	{r7, pc}
    8220:	20000b7c 	.word	0x20000b7c

00008224 <_ZN16Adafruit_ILI934110writeColorEtm>:

void Adafruit_ILI9341::writePixels(uint16_t * colors, uint32_t len){
    SPI_WRITE_PIXELS((uint8_t*)colors , len * 2);
}

void Adafruit_ILI9341::writeColor(uint16_t color, uint32_t len){
    8224:	b580      	push	{r7, lr}
    8226:	b088      	sub	sp, #32
    8228:	af00      	add	r7, sp, #0
    822a:	60f8      	str	r0, [r7, #12]
    822c:	607a      	str	r2, [r7, #4]
    822e:	230a      	movs	r3, #10
    8230:	18fb      	adds	r3, r7, r3
    8232:	1c0a      	adds	r2, r1, #0
    8234:	801a      	strh	r2, [r3, #0]
        tlen = (len>blen)?blen:len;
        writePixels(temp, tlen);
        len -= tlen;
    }
#else
    uint8_t hi = color >> 8, lo = color;
    8236:	230a      	movs	r3, #10
    8238:	18fb      	adds	r3, r7, r3
    823a:	881b      	ldrh	r3, [r3, #0]
    823c:	121a      	asrs	r2, r3, #8
    823e:	2317      	movs	r3, #23
    8240:	18fb      	adds	r3, r7, r3
    8242:	701a      	strb	r2, [r3, #0]
    8244:	2316      	movs	r3, #22
    8246:	18fb      	adds	r3, r7, r3
    8248:	220a      	movs	r2, #10
    824a:	18ba      	adds	r2, r7, r2
    824c:	8812      	ldrh	r2, [r2, #0]
    824e:	701a      	strb	r2, [r3, #0]
    if(_sclk < 0){ //AVR Optimization
    8250:	68fb      	ldr	r3, [r7, #12]
    8252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8254:	2b00      	cmp	r3, #0
    8256:	da18      	bge.n	828a <_ZN16Adafruit_ILI934110writeColorEtm+0x66>
        for (uint32_t t=len; t; t--){
    8258:	687b      	ldr	r3, [r7, #4]
    825a:	61fb      	str	r3, [r7, #28]
    825c:	69fb      	ldr	r3, [r7, #28]
    825e:	2b00      	cmp	r3, #0
    8260:	d02c      	beq.n	82bc <_ZN16Adafruit_ILI934110writeColorEtm+0x98>
            HSPI_WRITE(hi);
    8262:	2317      	movs	r3, #23
    8264:	18fb      	adds	r3, r7, r3
    8266:	781a      	ldrb	r2, [r3, #0]
    8268:	4b16      	ldr	r3, [pc, #88]	; (82c4 <_ZN16Adafruit_ILI934110writeColorEtm+0xa0>)
    826a:	0011      	movs	r1, r2
    826c:	0018      	movs	r0, r3
    826e:	f003 fb3d 	bl	b8ec <_ZN8SPIClass8transferEh>
            HSPI_WRITE(lo);
    8272:	2316      	movs	r3, #22
    8274:	18fb      	adds	r3, r7, r3
    8276:	781a      	ldrb	r2, [r3, #0]
    8278:	4b12      	ldr	r3, [pc, #72]	; (82c4 <_ZN16Adafruit_ILI934110writeColorEtm+0xa0>)
    827a:	0011      	movs	r1, r2
    827c:	0018      	movs	r0, r3
    827e:	f003 fb35 	bl	b8ec <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    8282:	69fb      	ldr	r3, [r7, #28]
    8284:	3b01      	subs	r3, #1
    8286:	61fb      	str	r3, [r7, #28]
    8288:	e7e8      	b.n	825c <_ZN16Adafruit_ILI934110writeColorEtm+0x38>
        }
        return;
    }
    for (uint32_t t=len; t; t--){
    828a:	687b      	ldr	r3, [r7, #4]
    828c:	61bb      	str	r3, [r7, #24]
    828e:	69bb      	ldr	r3, [r7, #24]
    8290:	2b00      	cmp	r3, #0
    8292:	d014      	beq.n	82be <_ZN16Adafruit_ILI934110writeColorEtm+0x9a>
        spiWrite(hi);
    8294:	2317      	movs	r3, #23
    8296:	18fb      	adds	r3, r7, r3
    8298:	781a      	ldrb	r2, [r3, #0]
    829a:	68fb      	ldr	r3, [r7, #12]
    829c:	0011      	movs	r1, r2
    829e:	0018      	movs	r0, r3
    82a0:	f7ff fe00 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
        spiWrite(lo);
    82a4:	2316      	movs	r3, #22
    82a6:	18fb      	adds	r3, r7, r3
    82a8:	781a      	ldrb	r2, [r3, #0]
    82aa:	68fb      	ldr	r3, [r7, #12]
    82ac:	0011      	movs	r1, r2
    82ae:	0018      	movs	r0, r3
    82b0:	f7ff fdf8 	bl	7ea4 <_ZN16Adafruit_ILI93418spiWriteEh>
    for (uint32_t t=len; t; t--){
    82b4:	69bb      	ldr	r3, [r7, #24]
    82b6:	3b01      	subs	r3, #1
    82b8:	61bb      	str	r3, [r7, #24]
    82ba:	e7e8      	b.n	828e <_ZN16Adafruit_ILI934110writeColorEtm+0x6a>
        return;
    82bc:	46c0      	nop			; (mov r8, r8)
    }
#endif
}
    82be:	46bd      	mov	sp, r7
    82c0:	b008      	add	sp, #32
    82c2:	bd80      	pop	{r7, pc}
    82c4:	20000b7c 	.word	0x20000b7c

000082c8 <_ZN16Adafruit_ILI934110writePixelEsst>:

void Adafruit_ILI9341::writePixel(int16_t x, int16_t y, uint16_t color) {
    82c8:	b590      	push	{r4, r7, lr}
    82ca:	b087      	sub	sp, #28
    82cc:	af02      	add	r7, sp, #8
    82ce:	60f8      	str	r0, [r7, #12]
    82d0:	000c      	movs	r4, r1
    82d2:	0010      	movs	r0, r2
    82d4:	0019      	movs	r1, r3
    82d6:	230a      	movs	r3, #10
    82d8:	18fb      	adds	r3, r7, r3
    82da:	1c22      	adds	r2, r4, #0
    82dc:	801a      	strh	r2, [r3, #0]
    82de:	2308      	movs	r3, #8
    82e0:	18fb      	adds	r3, r7, r3
    82e2:	1c02      	adds	r2, r0, #0
    82e4:	801a      	strh	r2, [r3, #0]
    82e6:	1dbb      	adds	r3, r7, #6
    82e8:	1c0a      	adds	r2, r1, #0
    82ea:	801a      	strh	r2, [r3, #0]
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    82ec:	230a      	movs	r3, #10
    82ee:	18fb      	adds	r3, r7, r3
    82f0:	2200      	movs	r2, #0
    82f2:	5e9b      	ldrsh	r3, [r3, r2]
    82f4:	2b00      	cmp	r3, #0
    82f6:	db2b      	blt.n	8350 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    82f8:	68fb      	ldr	r3, [r7, #12]
    82fa:	220c      	movs	r2, #12
    82fc:	5e9b      	ldrsh	r3, [r3, r2]
    82fe:	220a      	movs	r2, #10
    8300:	18ba      	adds	r2, r7, r2
    8302:	2100      	movs	r1, #0
    8304:	5e52      	ldrsh	r2, [r2, r1]
    8306:	429a      	cmp	r2, r3
    8308:	da22      	bge.n	8350 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    830a:	2308      	movs	r3, #8
    830c:	18fb      	adds	r3, r7, r3
    830e:	2200      	movs	r2, #0
    8310:	5e9b      	ldrsh	r3, [r3, r2]
    8312:	2b00      	cmp	r3, #0
    8314:	db1c      	blt.n	8350 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    8316:	68fb      	ldr	r3, [r7, #12]
    8318:	220e      	movs	r2, #14
    831a:	5e9b      	ldrsh	r3, [r3, r2]
    831c:	2208      	movs	r2, #8
    831e:	18ba      	adds	r2, r7, r2
    8320:	2100      	movs	r1, #0
    8322:	5e52      	ldrsh	r2, [r2, r1]
    8324:	429a      	cmp	r2, r3
    8326:	da13      	bge.n	8350 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    setAddrWindow(x,y,1,1);
    8328:	230a      	movs	r3, #10
    832a:	18fb      	adds	r3, r7, r3
    832c:	8819      	ldrh	r1, [r3, #0]
    832e:	2308      	movs	r3, #8
    8330:	18fb      	adds	r3, r7, r3
    8332:	881a      	ldrh	r2, [r3, #0]
    8334:	68f8      	ldr	r0, [r7, #12]
    8336:	2301      	movs	r3, #1
    8338:	9300      	str	r3, [sp, #0]
    833a:	2301      	movs	r3, #1
    833c:	f7ff fe76 	bl	802c <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    writePixel(color);
    8340:	1dbb      	adds	r3, r7, #6
    8342:	881a      	ldrh	r2, [r3, #0]
    8344:	68fb      	ldr	r3, [r7, #12]
    8346:	0011      	movs	r1, r2
    8348:	0018      	movs	r0, r3
    834a:	f7ff ff37 	bl	81bc <_ZN16Adafruit_ILI934110writePixelEt>
    834e:	e000      	b.n	8352 <_ZN16Adafruit_ILI934110writePixelEsst+0x8a>
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    8350:	46c0      	nop			; (mov r8, r8)
}
    8352:	46bd      	mov	sp, r7
    8354:	b005      	add	sp, #20
    8356:	bd90      	pop	{r4, r7, pc}

00008358 <_ZN16Adafruit_ILI934113writeFillRectEsssst>:

void Adafruit_ILI9341::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
    8358:	b590      	push	{r4, r7, lr}
    835a:	b089      	sub	sp, #36	; 0x24
    835c:	af02      	add	r7, sp, #8
    835e:	60f8      	str	r0, [r7, #12]
    8360:	000c      	movs	r4, r1
    8362:	0010      	movs	r0, r2
    8364:	0019      	movs	r1, r3
    8366:	230a      	movs	r3, #10
    8368:	18fb      	adds	r3, r7, r3
    836a:	1c22      	adds	r2, r4, #0
    836c:	801a      	strh	r2, [r3, #0]
    836e:	2308      	movs	r3, #8
    8370:	18fb      	adds	r3, r7, r3
    8372:	1c02      	adds	r2, r0, #0
    8374:	801a      	strh	r2, [r3, #0]
    8376:	1dbb      	adds	r3, r7, #6
    8378:	1c0a      	adds	r2, r1, #0
    837a:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
    837c:	68fb      	ldr	r3, [r7, #12]
    837e:	220c      	movs	r2, #12
    8380:	5e9b      	ldrsh	r3, [r3, r2]
    8382:	220a      	movs	r2, #10
    8384:	18ba      	adds	r2, r7, r2
    8386:	2100      	movs	r1, #0
    8388:	5e52      	ldrsh	r2, [r2, r1]
    838a:	429a      	cmp	r2, r3
    838c:	db00      	blt.n	8390 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x38>
    838e:	e09e      	b.n	84ce <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x176>
    8390:	68fb      	ldr	r3, [r7, #12]
    8392:	220e      	movs	r2, #14
    8394:	5e9b      	ldrsh	r3, [r3, r2]
    8396:	2208      	movs	r2, #8
    8398:	18ba      	adds	r2, r7, r2
    839a:	2100      	movs	r1, #0
    839c:	5e52      	ldrsh	r2, [r2, r1]
    839e:	429a      	cmp	r2, r3
    83a0:	db00      	blt.n	83a4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x4c>
    83a2:	e094      	b.n	84ce <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x176>
    int16_t x2 = x + w - 1, y2 = y + h - 1;
    83a4:	230a      	movs	r3, #10
    83a6:	18fb      	adds	r3, r7, r3
    83a8:	881a      	ldrh	r2, [r3, #0]
    83aa:	1dbb      	adds	r3, r7, #6
    83ac:	881b      	ldrh	r3, [r3, #0]
    83ae:	18d3      	adds	r3, r2, r3
    83b0:	b29b      	uxth	r3, r3
    83b2:	3b01      	subs	r3, #1
    83b4:	b29a      	uxth	r2, r3
    83b6:	2316      	movs	r3, #22
    83b8:	18fb      	adds	r3, r7, r3
    83ba:	801a      	strh	r2, [r3, #0]
    83bc:	2308      	movs	r3, #8
    83be:	18fb      	adds	r3, r7, r3
    83c0:	881a      	ldrh	r2, [r3, #0]
    83c2:	2328      	movs	r3, #40	; 0x28
    83c4:	18fb      	adds	r3, r7, r3
    83c6:	881b      	ldrh	r3, [r3, #0]
    83c8:	18d3      	adds	r3, r2, r3
    83ca:	b29b      	uxth	r3, r3
    83cc:	3b01      	subs	r3, #1
    83ce:	b29a      	uxth	r2, r3
    83d0:	2314      	movs	r3, #20
    83d2:	18fb      	adds	r3, r7, r3
    83d4:	801a      	strh	r2, [r3, #0]
    if((x2 < 0) || (y2 < 0)) return;
    83d6:	2316      	movs	r3, #22
    83d8:	18fb      	adds	r3, r7, r3
    83da:	2200      	movs	r2, #0
    83dc:	5e9b      	ldrsh	r3, [r3, r2]
    83de:	2b00      	cmp	r3, #0
    83e0:	da00      	bge.n	83e4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x8c>
    83e2:	e076      	b.n	84d2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17a>
    83e4:	2314      	movs	r3, #20
    83e6:	18fb      	adds	r3, r7, r3
    83e8:	2200      	movs	r2, #0
    83ea:	5e9b      	ldrsh	r3, [r3, r2]
    83ec:	2b00      	cmp	r3, #0
    83ee:	da00      	bge.n	83f2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x9a>
    83f0:	e06f      	b.n	84d2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17a>

    // Clip left/top
    if(x < 0) {
    83f2:	230a      	movs	r3, #10
    83f4:	18fb      	adds	r3, r7, r3
    83f6:	2200      	movs	r2, #0
    83f8:	5e9b      	ldrsh	r3, [r3, r2]
    83fa:	2b00      	cmp	r3, #0
    83fc:	da0a      	bge.n	8414 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0xbc>
        x = 0;
    83fe:	230a      	movs	r3, #10
    8400:	18fb      	adds	r3, r7, r3
    8402:	2200      	movs	r2, #0
    8404:	801a      	strh	r2, [r3, #0]
        w = x2 + 1;
    8406:	2316      	movs	r3, #22
    8408:	18fb      	adds	r3, r7, r3
    840a:	881b      	ldrh	r3, [r3, #0]
    840c:	3301      	adds	r3, #1
    840e:	b29a      	uxth	r2, r3
    8410:	1dbb      	adds	r3, r7, #6
    8412:	801a      	strh	r2, [r3, #0]
    }
    if(y < 0) {
    8414:	2308      	movs	r3, #8
    8416:	18fb      	adds	r3, r7, r3
    8418:	2200      	movs	r2, #0
    841a:	5e9b      	ldrsh	r3, [r3, r2]
    841c:	2b00      	cmp	r3, #0
    841e:	da0b      	bge.n	8438 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0xe0>
        y = 0;
    8420:	2308      	movs	r3, #8
    8422:	18fb      	adds	r3, r7, r3
    8424:	2200      	movs	r2, #0
    8426:	801a      	strh	r2, [r3, #0]
        h = y2 + 1;
    8428:	2314      	movs	r3, #20
    842a:	18fb      	adds	r3, r7, r3
    842c:	881b      	ldrh	r3, [r3, #0]
    842e:	3301      	adds	r3, #1
    8430:	b29a      	uxth	r2, r3
    8432:	2328      	movs	r3, #40	; 0x28
    8434:	18fb      	adds	r3, r7, r3
    8436:	801a      	strh	r2, [r3, #0]
    }

    // Clip right/bottom
    if(x2 >= _width)  w = _width  - x;
    8438:	68fb      	ldr	r3, [r7, #12]
    843a:	220c      	movs	r2, #12
    843c:	5e9b      	ldrsh	r3, [r3, r2]
    843e:	2216      	movs	r2, #22
    8440:	18ba      	adds	r2, r7, r2
    8442:	2100      	movs	r1, #0
    8444:	5e52      	ldrsh	r2, [r2, r1]
    8446:	429a      	cmp	r2, r3
    8448:	db0a      	blt.n	8460 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x108>
    844a:	68fb      	ldr	r3, [r7, #12]
    844c:	220c      	movs	r2, #12
    844e:	5e9b      	ldrsh	r3, [r3, r2]
    8450:	b29a      	uxth	r2, r3
    8452:	230a      	movs	r3, #10
    8454:	18fb      	adds	r3, r7, r3
    8456:	881b      	ldrh	r3, [r3, #0]
    8458:	1ad3      	subs	r3, r2, r3
    845a:	b29a      	uxth	r2, r3
    845c:	1dbb      	adds	r3, r7, #6
    845e:	801a      	strh	r2, [r3, #0]
    if(y2 >= _height) h = _height - y;
    8460:	68fb      	ldr	r3, [r7, #12]
    8462:	220e      	movs	r2, #14
    8464:	5e9b      	ldrsh	r3, [r3, r2]
    8466:	2214      	movs	r2, #20
    8468:	18ba      	adds	r2, r7, r2
    846a:	2100      	movs	r1, #0
    846c:	5e52      	ldrsh	r2, [r2, r1]
    846e:	429a      	cmp	r2, r3
    8470:	db0b      	blt.n	848a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x132>
    8472:	68fb      	ldr	r3, [r7, #12]
    8474:	220e      	movs	r2, #14
    8476:	5e9b      	ldrsh	r3, [r3, r2]
    8478:	b29a      	uxth	r2, r3
    847a:	2308      	movs	r3, #8
    847c:	18fb      	adds	r3, r7, r3
    847e:	881b      	ldrh	r3, [r3, #0]
    8480:	1ad3      	subs	r3, r2, r3
    8482:	b29a      	uxth	r2, r3
    8484:	2328      	movs	r3, #40	; 0x28
    8486:	18fb      	adds	r3, r7, r3
    8488:	801a      	strh	r2, [r3, #0]

    int32_t len = (int32_t)w * h;
    848a:	1dbb      	adds	r3, r7, #6
    848c:	2200      	movs	r2, #0
    848e:	5e9b      	ldrsh	r3, [r3, r2]
    8490:	2228      	movs	r2, #40	; 0x28
    8492:	18ba      	adds	r2, r7, r2
    8494:	2100      	movs	r1, #0
    8496:	5e52      	ldrsh	r2, [r2, r1]
    8498:	4353      	muls	r3, r2
    849a:	613b      	str	r3, [r7, #16]
    setAddrWindow(x, y, w, h);
    849c:	230a      	movs	r3, #10
    849e:	18fb      	adds	r3, r7, r3
    84a0:	8819      	ldrh	r1, [r3, #0]
    84a2:	2308      	movs	r3, #8
    84a4:	18fb      	adds	r3, r7, r3
    84a6:	881a      	ldrh	r2, [r3, #0]
    84a8:	1dbb      	adds	r3, r7, #6
    84aa:	881c      	ldrh	r4, [r3, #0]
    84ac:	2328      	movs	r3, #40	; 0x28
    84ae:	18fb      	adds	r3, r7, r3
    84b0:	881b      	ldrh	r3, [r3, #0]
    84b2:	68f8      	ldr	r0, [r7, #12]
    84b4:	9300      	str	r3, [sp, #0]
    84b6:	0023      	movs	r3, r4
    84b8:	f7ff fdb8 	bl	802c <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    writeColor(color, len);
    84bc:	693a      	ldr	r2, [r7, #16]
    84be:	232c      	movs	r3, #44	; 0x2c
    84c0:	18fb      	adds	r3, r7, r3
    84c2:	8819      	ldrh	r1, [r3, #0]
    84c4:	68fb      	ldr	r3, [r7, #12]
    84c6:	0018      	movs	r0, r3
    84c8:	f7ff feac 	bl	8224 <_ZN16Adafruit_ILI934110writeColorEtm>
    84cc:	e002      	b.n	84d4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17c>
    if((x >= _width) || (y >= _height)) return;
    84ce:	46c0      	nop			; (mov r8, r8)
    84d0:	e000      	b.n	84d4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17c>
    if((x2 < 0) || (y2 < 0)) return;
    84d2:	46c0      	nop			; (mov r8, r8)
}
    84d4:	46bd      	mov	sp, r7
    84d6:	b007      	add	sp, #28
    84d8:	bd90      	pop	{r4, r7, pc}

000084da <_ZN16Adafruit_ILI934114writeFastVLineEssst>:

void Adafruit_ILI9341::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color){
    84da:	b5b0      	push	{r4, r5, r7, lr}
    84dc:	b086      	sub	sp, #24
    84de:	af02      	add	r7, sp, #8
    84e0:	60f8      	str	r0, [r7, #12]
    84e2:	000c      	movs	r4, r1
    84e4:	0010      	movs	r0, r2
    84e6:	0019      	movs	r1, r3
    84e8:	230a      	movs	r3, #10
    84ea:	18fb      	adds	r3, r7, r3
    84ec:	1c22      	adds	r2, r4, #0
    84ee:	801a      	strh	r2, [r3, #0]
    84f0:	2308      	movs	r3, #8
    84f2:	18fb      	adds	r3, r7, r3
    84f4:	1c02      	adds	r2, r0, #0
    84f6:	801a      	strh	r2, [r3, #0]
    84f8:	1dbb      	adds	r3, r7, #6
    84fa:	1c0a      	adds	r2, r1, #0
    84fc:	801a      	strh	r2, [r3, #0]
    writeFillRect(x, y, 1, h, color);
    84fe:	68fb      	ldr	r3, [r7, #12]
    8500:	681b      	ldr	r3, [r3, #0]
    8502:	331c      	adds	r3, #28
    8504:	681c      	ldr	r4, [r3, #0]
    8506:	2308      	movs	r3, #8
    8508:	18fb      	adds	r3, r7, r3
    850a:	2200      	movs	r2, #0
    850c:	5e9a      	ldrsh	r2, [r3, r2]
    850e:	230a      	movs	r3, #10
    8510:	18fb      	adds	r3, r7, r3
    8512:	2100      	movs	r1, #0
    8514:	5e59      	ldrsh	r1, [r3, r1]
    8516:	68f8      	ldr	r0, [r7, #12]
    8518:	2320      	movs	r3, #32
    851a:	18fb      	adds	r3, r7, r3
    851c:	881b      	ldrh	r3, [r3, #0]
    851e:	9301      	str	r3, [sp, #4]
    8520:	1dbb      	adds	r3, r7, #6
    8522:	2500      	movs	r5, #0
    8524:	5f5b      	ldrsh	r3, [r3, r5]
    8526:	9300      	str	r3, [sp, #0]
    8528:	2301      	movs	r3, #1
    852a:	47a0      	blx	r4
}
    852c:	46c0      	nop			; (mov r8, r8)
    852e:	46bd      	mov	sp, r7
    8530:	b004      	add	sp, #16
    8532:	bdb0      	pop	{r4, r5, r7, pc}

00008534 <_ZN16Adafruit_ILI934114writeFastHLineEssst>:

void Adafruit_ILI9341::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color){
    8534:	b5b0      	push	{r4, r5, r7, lr}
    8536:	b086      	sub	sp, #24
    8538:	af02      	add	r7, sp, #8
    853a:	60f8      	str	r0, [r7, #12]
    853c:	000c      	movs	r4, r1
    853e:	0010      	movs	r0, r2
    8540:	0019      	movs	r1, r3
    8542:	230a      	movs	r3, #10
    8544:	18fb      	adds	r3, r7, r3
    8546:	1c22      	adds	r2, r4, #0
    8548:	801a      	strh	r2, [r3, #0]
    854a:	2308      	movs	r3, #8
    854c:	18fb      	adds	r3, r7, r3
    854e:	1c02      	adds	r2, r0, #0
    8550:	801a      	strh	r2, [r3, #0]
    8552:	1dbb      	adds	r3, r7, #6
    8554:	1c0a      	adds	r2, r1, #0
    8556:	801a      	strh	r2, [r3, #0]
    writeFillRect(x, y, w, 1, color);
    8558:	68fb      	ldr	r3, [r7, #12]
    855a:	681b      	ldr	r3, [r3, #0]
    855c:	331c      	adds	r3, #28
    855e:	681c      	ldr	r4, [r3, #0]
    8560:	1dbb      	adds	r3, r7, #6
    8562:	2500      	movs	r5, #0
    8564:	5f5d      	ldrsh	r5, [r3, r5]
    8566:	2308      	movs	r3, #8
    8568:	18fb      	adds	r3, r7, r3
    856a:	2200      	movs	r2, #0
    856c:	5e9a      	ldrsh	r2, [r3, r2]
    856e:	230a      	movs	r3, #10
    8570:	18fb      	adds	r3, r7, r3
    8572:	2100      	movs	r1, #0
    8574:	5e59      	ldrsh	r1, [r3, r1]
    8576:	68f8      	ldr	r0, [r7, #12]
    8578:	2320      	movs	r3, #32
    857a:	18fb      	adds	r3, r7, r3
    857c:	881b      	ldrh	r3, [r3, #0]
    857e:	9301      	str	r3, [sp, #4]
    8580:	2301      	movs	r3, #1
    8582:	9300      	str	r3, [sp, #0]
    8584:	002b      	movs	r3, r5
    8586:	47a0      	blx	r4
}
    8588:	46c0      	nop			; (mov r8, r8)
    858a:	46bd      	mov	sp, r7
    858c:	b004      	add	sp, #16
    858e:	bdb0      	pop	{r4, r5, r7, pc}

00008590 <_ZN16Adafruit_ILI93419drawPixelEsst>:
    endWrite();
    _freq = freq;
    return r;
}

void Adafruit_ILI9341::drawPixel(int16_t x, int16_t y, uint16_t color){
    8590:	b5b0      	push	{r4, r5, r7, lr}
    8592:	b084      	sub	sp, #16
    8594:	af00      	add	r7, sp, #0
    8596:	60f8      	str	r0, [r7, #12]
    8598:	000c      	movs	r4, r1
    859a:	0010      	movs	r0, r2
    859c:	0019      	movs	r1, r3
    859e:	230a      	movs	r3, #10
    85a0:	18fb      	adds	r3, r7, r3
    85a2:	1c22      	adds	r2, r4, #0
    85a4:	801a      	strh	r2, [r3, #0]
    85a6:	2308      	movs	r3, #8
    85a8:	18fb      	adds	r3, r7, r3
    85aa:	1c02      	adds	r2, r0, #0
    85ac:	801a      	strh	r2, [r3, #0]
    85ae:	1dbb      	adds	r3, r7, #6
    85b0:	1c0a      	adds	r2, r1, #0
    85b2:	801a      	strh	r2, [r3, #0]
    startWrite();
    85b4:	68fb      	ldr	r3, [r7, #12]
    85b6:	681b      	ldr	r3, [r3, #0]
    85b8:	3314      	adds	r3, #20
    85ba:	681b      	ldr	r3, [r3, #0]
    85bc:	68fa      	ldr	r2, [r7, #12]
    85be:	0010      	movs	r0, r2
    85c0:	4798      	blx	r3
    writePixel(x, y, color);
    85c2:	68fb      	ldr	r3, [r7, #12]
    85c4:	681b      	ldr	r3, [r3, #0]
    85c6:	3318      	adds	r3, #24
    85c8:	681c      	ldr	r4, [r3, #0]
    85ca:	1dbb      	adds	r3, r7, #6
    85cc:	881d      	ldrh	r5, [r3, #0]
    85ce:	2308      	movs	r3, #8
    85d0:	18fb      	adds	r3, r7, r3
    85d2:	2200      	movs	r2, #0
    85d4:	5e9a      	ldrsh	r2, [r3, r2]
    85d6:	230a      	movs	r3, #10
    85d8:	18fb      	adds	r3, r7, r3
    85da:	2100      	movs	r1, #0
    85dc:	5e59      	ldrsh	r1, [r3, r1]
    85de:	68f8      	ldr	r0, [r7, #12]
    85e0:	002b      	movs	r3, r5
    85e2:	47a0      	blx	r4
    endWrite();
    85e4:	68fb      	ldr	r3, [r7, #12]
    85e6:	681b      	ldr	r3, [r3, #0]
    85e8:	332c      	adds	r3, #44	; 0x2c
    85ea:	681b      	ldr	r3, [r3, #0]
    85ec:	68fa      	ldr	r2, [r7, #12]
    85ee:	0010      	movs	r0, r2
    85f0:	4798      	blx	r3
}
    85f2:	46c0      	nop			; (mov r8, r8)
    85f4:	46bd      	mov	sp, r7
    85f6:	b004      	add	sp, #16
    85f8:	bdb0      	pop	{r4, r5, r7, pc}

000085fa <_ZN16Adafruit_ILI934113drawFastVLineEssst>:

void Adafruit_ILI9341::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    85fa:	b5b0      	push	{r4, r5, r7, lr}
    85fc:	b086      	sub	sp, #24
    85fe:	af02      	add	r7, sp, #8
    8600:	60f8      	str	r0, [r7, #12]
    8602:	000c      	movs	r4, r1
    8604:	0010      	movs	r0, r2
    8606:	0019      	movs	r1, r3
    8608:	230a      	movs	r3, #10
    860a:	18fb      	adds	r3, r7, r3
    860c:	1c22      	adds	r2, r4, #0
    860e:	801a      	strh	r2, [r3, #0]
    8610:	2308      	movs	r3, #8
    8612:	18fb      	adds	r3, r7, r3
    8614:	1c02      	adds	r2, r0, #0
    8616:	801a      	strh	r2, [r3, #0]
    8618:	1dbb      	adds	r3, r7, #6
    861a:	1c0a      	adds	r2, r1, #0
    861c:	801a      	strh	r2, [r3, #0]
    startWrite();
    861e:	68fb      	ldr	r3, [r7, #12]
    8620:	681b      	ldr	r3, [r3, #0]
    8622:	3314      	adds	r3, #20
    8624:	681b      	ldr	r3, [r3, #0]
    8626:	68fa      	ldr	r2, [r7, #12]
    8628:	0010      	movs	r0, r2
    862a:	4798      	blx	r3
    writeFastVLine(x, y, h, color);
    862c:	68fb      	ldr	r3, [r7, #12]
    862e:	681b      	ldr	r3, [r3, #0]
    8630:	3320      	adds	r3, #32
    8632:	681c      	ldr	r4, [r3, #0]
    8634:	1dbb      	adds	r3, r7, #6
    8636:	2500      	movs	r5, #0
    8638:	5f5d      	ldrsh	r5, [r3, r5]
    863a:	2308      	movs	r3, #8
    863c:	18fb      	adds	r3, r7, r3
    863e:	2200      	movs	r2, #0
    8640:	5e9a      	ldrsh	r2, [r3, r2]
    8642:	230a      	movs	r3, #10
    8644:	18fb      	adds	r3, r7, r3
    8646:	2100      	movs	r1, #0
    8648:	5e59      	ldrsh	r1, [r3, r1]
    864a:	68f8      	ldr	r0, [r7, #12]
    864c:	2320      	movs	r3, #32
    864e:	18fb      	adds	r3, r7, r3
    8650:	881b      	ldrh	r3, [r3, #0]
    8652:	9300      	str	r3, [sp, #0]
    8654:	002b      	movs	r3, r5
    8656:	47a0      	blx	r4
    endWrite();
    8658:	68fb      	ldr	r3, [r7, #12]
    865a:	681b      	ldr	r3, [r3, #0]
    865c:	332c      	adds	r3, #44	; 0x2c
    865e:	681b      	ldr	r3, [r3, #0]
    8660:	68fa      	ldr	r2, [r7, #12]
    8662:	0010      	movs	r0, r2
    8664:	4798      	blx	r3
}
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	46bd      	mov	sp, r7
    866a:	b004      	add	sp, #16
    866c:	bdb0      	pop	{r4, r5, r7, pc}

0000866e <_ZN16Adafruit_ILI934113drawFastHLineEssst>:

void Adafruit_ILI9341::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    866e:	b5b0      	push	{r4, r5, r7, lr}
    8670:	b086      	sub	sp, #24
    8672:	af02      	add	r7, sp, #8
    8674:	60f8      	str	r0, [r7, #12]
    8676:	000c      	movs	r4, r1
    8678:	0010      	movs	r0, r2
    867a:	0019      	movs	r1, r3
    867c:	230a      	movs	r3, #10
    867e:	18fb      	adds	r3, r7, r3
    8680:	1c22      	adds	r2, r4, #0
    8682:	801a      	strh	r2, [r3, #0]
    8684:	2308      	movs	r3, #8
    8686:	18fb      	adds	r3, r7, r3
    8688:	1c02      	adds	r2, r0, #0
    868a:	801a      	strh	r2, [r3, #0]
    868c:	1dbb      	adds	r3, r7, #6
    868e:	1c0a      	adds	r2, r1, #0
    8690:	801a      	strh	r2, [r3, #0]
    startWrite();
    8692:	68fb      	ldr	r3, [r7, #12]
    8694:	681b      	ldr	r3, [r3, #0]
    8696:	3314      	adds	r3, #20
    8698:	681b      	ldr	r3, [r3, #0]
    869a:	68fa      	ldr	r2, [r7, #12]
    869c:	0010      	movs	r0, r2
    869e:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
    86a0:	68fb      	ldr	r3, [r7, #12]
    86a2:	681b      	ldr	r3, [r3, #0]
    86a4:	3324      	adds	r3, #36	; 0x24
    86a6:	681c      	ldr	r4, [r3, #0]
    86a8:	1dbb      	adds	r3, r7, #6
    86aa:	2500      	movs	r5, #0
    86ac:	5f5d      	ldrsh	r5, [r3, r5]
    86ae:	2308      	movs	r3, #8
    86b0:	18fb      	adds	r3, r7, r3
    86b2:	2200      	movs	r2, #0
    86b4:	5e9a      	ldrsh	r2, [r3, r2]
    86b6:	230a      	movs	r3, #10
    86b8:	18fb      	adds	r3, r7, r3
    86ba:	2100      	movs	r1, #0
    86bc:	5e59      	ldrsh	r1, [r3, r1]
    86be:	68f8      	ldr	r0, [r7, #12]
    86c0:	2320      	movs	r3, #32
    86c2:	18fb      	adds	r3, r7, r3
    86c4:	881b      	ldrh	r3, [r3, #0]
    86c6:	9300      	str	r3, [sp, #0]
    86c8:	002b      	movs	r3, r5
    86ca:	47a0      	blx	r4
    endWrite();
    86cc:	68fb      	ldr	r3, [r7, #12]
    86ce:	681b      	ldr	r3, [r3, #0]
    86d0:	332c      	adds	r3, #44	; 0x2c
    86d2:	681b      	ldr	r3, [r3, #0]
    86d4:	68fa      	ldr	r2, [r7, #12]
    86d6:	0010      	movs	r0, r2
    86d8:	4798      	blx	r3
}
    86da:	46c0      	nop			; (mov r8, r8)
    86dc:	46bd      	mov	sp, r7
    86de:	b004      	add	sp, #16
    86e0:	bdb0      	pop	{r4, r5, r7, pc}

000086e2 <_ZN16Adafruit_ILI93418fillRectEsssst>:

void Adafruit_ILI9341::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    86e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    86e4:	b087      	sub	sp, #28
    86e6:	af02      	add	r7, sp, #8
    86e8:	60f8      	str	r0, [r7, #12]
    86ea:	000c      	movs	r4, r1
    86ec:	0010      	movs	r0, r2
    86ee:	0019      	movs	r1, r3
    86f0:	230a      	movs	r3, #10
    86f2:	18fb      	adds	r3, r7, r3
    86f4:	1c22      	adds	r2, r4, #0
    86f6:	801a      	strh	r2, [r3, #0]
    86f8:	2308      	movs	r3, #8
    86fa:	18fb      	adds	r3, r7, r3
    86fc:	1c02      	adds	r2, r0, #0
    86fe:	801a      	strh	r2, [r3, #0]
    8700:	1dbb      	adds	r3, r7, #6
    8702:	1c0a      	adds	r2, r1, #0
    8704:	801a      	strh	r2, [r3, #0]
    startWrite();
    8706:	68fb      	ldr	r3, [r7, #12]
    8708:	681b      	ldr	r3, [r3, #0]
    870a:	3314      	adds	r3, #20
    870c:	681b      	ldr	r3, [r3, #0]
    870e:	68fa      	ldr	r2, [r7, #12]
    8710:	0010      	movs	r0, r2
    8712:	4798      	blx	r3
    writeFillRect(x,y,w,h,color);
    8714:	68fb      	ldr	r3, [r7, #12]
    8716:	681b      	ldr	r3, [r3, #0]
    8718:	331c      	adds	r3, #28
    871a:	681c      	ldr	r4, [r3, #0]
    871c:	1dbb      	adds	r3, r7, #6
    871e:	2500      	movs	r5, #0
    8720:	5f5d      	ldrsh	r5, [r3, r5]
    8722:	2308      	movs	r3, #8
    8724:	18fb      	adds	r3, r7, r3
    8726:	2200      	movs	r2, #0
    8728:	5e9a      	ldrsh	r2, [r3, r2]
    872a:	230a      	movs	r3, #10
    872c:	18fb      	adds	r3, r7, r3
    872e:	2100      	movs	r1, #0
    8730:	5e59      	ldrsh	r1, [r3, r1]
    8732:	68f8      	ldr	r0, [r7, #12]
    8734:	2324      	movs	r3, #36	; 0x24
    8736:	2608      	movs	r6, #8
    8738:	46b4      	mov	ip, r6
    873a:	44bc      	add	ip, r7
    873c:	4463      	add	r3, ip
    873e:	881b      	ldrh	r3, [r3, #0]
    8740:	9301      	str	r3, [sp, #4]
    8742:	2320      	movs	r3, #32
    8744:	2608      	movs	r6, #8
    8746:	46b4      	mov	ip, r6
    8748:	44bc      	add	ip, r7
    874a:	4463      	add	r3, ip
    874c:	2600      	movs	r6, #0
    874e:	5f9b      	ldrsh	r3, [r3, r6]
    8750:	9300      	str	r3, [sp, #0]
    8752:	002b      	movs	r3, r5
    8754:	47a0      	blx	r4
    endWrite();
    8756:	68fb      	ldr	r3, [r7, #12]
    8758:	681b      	ldr	r3, [r3, #0]
    875a:	332c      	adds	r3, #44	; 0x2c
    875c:	681b      	ldr	r3, [r3, #0]
    875e:	68fa      	ldr	r2, [r7, #12]
    8760:	0010      	movs	r0, r2
    8762:	4798      	blx	r3
}
    8764:	46c0      	nop			; (mov r8, r8)
    8766:	46bd      	mov	sp, r7
    8768:	b005      	add	sp, #20
    876a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000876c <_ZN5Print13setWriteErrorEi>:
    void setWriteError(int err = 1) { write_error = err; }
    876c:	b580      	push	{r7, lr}
    876e:	b082      	sub	sp, #8
    8770:	af00      	add	r7, sp, #0
    8772:	6078      	str	r0, [r7, #4]
    8774:	6039      	str	r1, [r7, #0]
    8776:	687b      	ldr	r3, [r7, #4]
    8778:	683a      	ldr	r2, [r7, #0]
    877a:	605a      	str	r2, [r3, #4]
    877c:	46c0      	nop			; (mov r8, r8)
    877e:	46bd      	mov	sp, r7
    8780:	b002      	add	sp, #8
    8782:	bd80      	pop	{r7, pc}

00008784 <_ZN5Print13getWriteErrorEv>:
    int getWriteError() { return write_error; }
    8784:	b580      	push	{r7, lr}
    8786:	b082      	sub	sp, #8
    8788:	af00      	add	r7, sp, #0
    878a:	6078      	str	r0, [r7, #4]
    878c:	687b      	ldr	r3, [r7, #4]
    878e:	685b      	ldr	r3, [r3, #4]
    8790:	0018      	movs	r0, r3
    8792:	46bd      	mov	sp, r7
    8794:	b002      	add	sp, #8
    8796:	bd80      	pop	{r7, pc}

00008798 <_ZN5Print15clearWriteErrorEv>:
    void clearWriteError() { setWriteError(0); }
    8798:	b580      	push	{r7, lr}
    879a:	b082      	sub	sp, #8
    879c:	af00      	add	r7, sp, #0
    879e:	6078      	str	r0, [r7, #4]
    87a0:	687b      	ldr	r3, [r7, #4]
    87a2:	2100      	movs	r1, #0
    87a4:	0018      	movs	r0, r3
    87a6:	f7ff ffe1 	bl	876c <_ZN5Print13setWriteErrorEi>
    87aa:	46c0      	nop			; (mov r8, r8)
    87ac:	46bd      	mov	sp, r7
    87ae:	b002      	add	sp, #8
    87b0:	bd80      	pop	{r7, pc}

000087b2 <_ZNK6SdFile11curPositionEv>:
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    87b2:	b580      	push	{r7, lr}
    87b4:	b082      	sub	sp, #8
    87b6:	af00      	add	r7, sp, #0
    87b8:	6078      	str	r0, [r7, #4]
    87ba:	687b      	ldr	r3, [r7, #4]
    87bc:	691b      	ldr	r3, [r3, #16]
    87be:	0018      	movs	r0, r3
    87c0:	46bd      	mov	sp, r7
    87c2:	b002      	add	sp, #8
    87c4:	bd80      	pop	{r7, pc}

000087c6 <_ZNK6SdFile8fileSizeEv>:
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    87c6:	b580      	push	{r7, lr}
    87c8:	b082      	sub	sp, #8
    87ca:	af00      	add	r7, sp, #0
    87cc:	6078      	str	r0, [r7, #4]
    87ce:	687b      	ldr	r3, [r7, #4]
    87d0:	69db      	ldr	r3, [r3, #28]
    87d2:	0018      	movs	r0, r3
    87d4:	46bd      	mov	sp, r7
    87d6:	b002      	add	sp, #8
    87d8:	bd80      	pop	{r7, pc}

000087da <_ZNK6SdFile5isDirEv>:
  /** \return The first cluster number for a file or directory. */
  uint32_t firstCluster(void) const {return firstCluster_;}
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    87da:	b580      	push	{r7, lr}
    87dc:	b082      	sub	sp, #8
    87de:	af00      	add	r7, sp, #0
    87e0:	6078      	str	r0, [r7, #4]
    87e2:	687b      	ldr	r3, [r7, #4]
    87e4:	7a5b      	ldrb	r3, [r3, #9]
    87e6:	2201      	movs	r2, #1
    87e8:	2b01      	cmp	r3, #1
    87ea:	dc01      	bgt.n	87f0 <_ZNK6SdFile5isDirEv+0x16>
    87ec:	2300      	movs	r3, #0
    87ee:	1c1a      	adds	r2, r3, #0
    87f0:	b2d3      	uxtb	r3, r2
    87f2:	0018      	movs	r0, r3
    87f4:	46bd      	mov	sp, r7
    87f6:	b002      	add	sp, #8
    87f8:	bd80      	pop	{r7, pc}

000087fa <_ZNK6SdFile6isOpenEv>:
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    87fa:	b580      	push	{r7, lr}
    87fc:	b082      	sub	sp, #8
    87fe:	af00      	add	r7, sp, #0
    8800:	6078      	str	r0, [r7, #4]
    8802:	687b      	ldr	r3, [r7, #4]
    8804:	7a5b      	ldrb	r3, [r3, #9]
    8806:	1e5a      	subs	r2, r3, #1
    8808:	4193      	sbcs	r3, r2
    880a:	b2db      	uxtb	r3, r3
    880c:	0018      	movs	r0, r3
    880e:	46bd      	mov	sp, r7
    8810:	b002      	add	sp, #8
    8812:	bd80      	pop	{r7, pc}

00008814 <_ZN6SdFile4readEv>:
   * Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    8814:	b580      	push	{r7, lr}
    8816:	b084      	sub	sp, #16
    8818:	af00      	add	r7, sp, #0
    881a:	6078      	str	r0, [r7, #4]
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    881c:	230f      	movs	r3, #15
    881e:	18f9      	adds	r1, r7, r3
    8820:	687b      	ldr	r3, [r7, #4]
    8822:	2201      	movs	r2, #1
    8824:	0018      	movs	r0, r3
    8826:	f001 fe7f 	bl	a528 <_ZN6SdFile4readEPvt>
    882a:	0003      	movs	r3, r0
    882c:	2b01      	cmp	r3, #1
    882e:	d104      	bne.n	883a <_ZN6SdFile4readEv+0x26>
    8830:	230f      	movs	r3, #15
    8832:	18fb      	adds	r3, r7, r3
    8834:	781b      	ldrb	r3, [r3, #0]
    8836:	b21b      	sxth	r3, r3
    8838:	e001      	b.n	883e <_ZN6SdFile4readEv+0x2a>
    883a:	2301      	movs	r3, #1
    883c:	425b      	negs	r3, r3
  }
    883e:	0018      	movs	r0, r3
    8840:	46bd      	mov	sp, r7
    8842:	b004      	add	sp, #16
    8844:	bd80      	pop	{r7, pc}

00008846 <_ZN6SdFile7seekCurEm>:
    curPosition_ = curCluster_ = 0;
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    8846:	b580      	push	{r7, lr}
    8848:	b082      	sub	sp, #8
    884a:	af00      	add	r7, sp, #0
    884c:	6078      	str	r0, [r7, #4]
    884e:	6039      	str	r1, [r7, #0]
    return seekSet(curPosition_ + pos);
    8850:	687b      	ldr	r3, [r7, #4]
    8852:	691a      	ldr	r2, [r3, #16]
    8854:	683b      	ldr	r3, [r7, #0]
    8856:	18d2      	adds	r2, r2, r3
    8858:	687b      	ldr	r3, [r7, #4]
    885a:	0011      	movs	r1, r2
    885c:	0018      	movs	r0, r3
    885e:	f001 ffc1 	bl	a7e4 <_ZN6SdFile7seekSetEm>
    8862:	0003      	movs	r3, r0
  }
    8864:	0018      	movs	r0, r3
    8866:	46bd      	mov	sp, r7
    8868:	b002      	add	sp, #8
    886a:	bd80      	pop	{r7, pc}

0000886c <_ZN5SDLib4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    886c:	b580      	push	{r7, lr}
    886e:	b084      	sub	sp, #16
    8870:	af00      	add	r7, sp, #0
    8872:	60f8      	str	r0, [r7, #12]
    8874:	60b9      	str	r1, [r7, #8]
    8876:	607a      	str	r2, [r7, #4]
    8878:	68fb      	ldr	r3, [r7, #12]
    887a:	0018      	movs	r0, r3
    887c:	f7fa fec0 	bl	3600 <_ZN6StreamC1Ev>
    8880:	4a11      	ldr	r2, [pc, #68]	; (88c8 <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>)
    8882:	68fb      	ldr	r3, [r7, #12]
    8884:	601a      	str	r2, [r3, #0]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    8886:	2028      	movs	r0, #40	; 0x28
    8888:	f007 ff9e 	bl	107c8 <malloc>
    888c:	0003      	movs	r3, r0
    888e:	001a      	movs	r2, r3
    8890:	68fb      	ldr	r3, [r7, #12]
    8892:	621a      	str	r2, [r3, #32]
  if (_file) {
    8894:	68fb      	ldr	r3, [r7, #12]
    8896:	6a1b      	ldr	r3, [r3, #32]
    8898:	2b00      	cmp	r3, #0
    889a:	d010      	beq.n	88be <_ZN5SDLib4FileC1E6SdFilePKc+0x52>
    memcpy(_file, &f, sizeof(SdFile));
    889c:	68fb      	ldr	r3, [r7, #12]
    889e:	6a1b      	ldr	r3, [r3, #32]
    88a0:	68b9      	ldr	r1, [r7, #8]
    88a2:	2228      	movs	r2, #40	; 0x28
    88a4:	0018      	movs	r0, r3
    88a6:	f007 ffc4 	bl	10832 <memcpy>
    
    strncpy(_name, n, 12);
    88aa:	68fb      	ldr	r3, [r7, #12]
    88ac:	3310      	adds	r3, #16
    88ae:	6879      	ldr	r1, [r7, #4]
    88b0:	220c      	movs	r2, #12
    88b2:	0018      	movs	r0, r3
    88b4:	f008 fe63 	bl	1157e <strncpy>
    _name[12] = 0;
    88b8:	68fb      	ldr	r3, [r7, #12]
    88ba:	2200      	movs	r2, #0
    88bc:	771a      	strb	r2, [r3, #28]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    88be:	68fb      	ldr	r3, [r7, #12]
    88c0:	0018      	movs	r0, r3
    88c2:	46bd      	mov	sp, r7
    88c4:	b004      	add	sp, #16
    88c6:	bd80      	pop	{r7, pc}
    88c8:	000135bc 	.word	0x000135bc

000088cc <_ZN5SDLib4FileC1Ev>:

File::File(void) {
    88cc:	b580      	push	{r7, lr}
    88ce:	b082      	sub	sp, #8
    88d0:	af00      	add	r7, sp, #0
    88d2:	6078      	str	r0, [r7, #4]
    88d4:	687b      	ldr	r3, [r7, #4]
    88d6:	0018      	movs	r0, r3
    88d8:	f7fa fe92 	bl	3600 <_ZN6StreamC1Ev>
    88dc:	4a06      	ldr	r2, [pc, #24]	; (88f8 <_ZN5SDLib4FileC1Ev+0x2c>)
    88de:	687b      	ldr	r3, [r7, #4]
    88e0:	601a      	str	r2, [r3, #0]
  _file = 0;
    88e2:	687b      	ldr	r3, [r7, #4]
    88e4:	2200      	movs	r2, #0
    88e6:	621a      	str	r2, [r3, #32]
  _name[0] = 0;
    88e8:	687b      	ldr	r3, [r7, #4]
    88ea:	2200      	movs	r2, #0
    88ec:	741a      	strb	r2, [r3, #16]
  //Serial.print("Created empty file object");
}
    88ee:	687b      	ldr	r3, [r7, #4]
    88f0:	0018      	movs	r0, r3
    88f2:	46bd      	mov	sp, r7
    88f4:	b002      	add	sp, #8
    88f6:	bd80      	pop	{r7, pc}
    88f8:	000135bc 	.word	0x000135bc

000088fc <_ZN5SDLib4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    88fc:	b580      	push	{r7, lr}
    88fe:	b082      	sub	sp, #8
    8900:	af00      	add	r7, sp, #0
    8902:	6078      	str	r0, [r7, #4]
    8904:	000a      	movs	r2, r1
    8906:	1cfb      	adds	r3, r7, #3
    8908:	701a      	strb	r2, [r3, #0]
  return write(&val, 1);
    890a:	687b      	ldr	r3, [r7, #4]
    890c:	681b      	ldr	r3, [r3, #0]
    890e:	3304      	adds	r3, #4
    8910:	681b      	ldr	r3, [r3, #0]
    8912:	1cf9      	adds	r1, r7, #3
    8914:	6878      	ldr	r0, [r7, #4]
    8916:	2201      	movs	r2, #1
    8918:	4798      	blx	r3
    891a:	0003      	movs	r3, r0
}
    891c:	0018      	movs	r0, r3
    891e:	46bd      	mov	sp, r7
    8920:	b002      	add	sp, #8
    8922:	bd80      	pop	{r7, pc}

00008924 <_ZN5SDLib4File5writeEPKhj>:

size_t File::write(const uint8_t *buf, size_t size) {
    8924:	b580      	push	{r7, lr}
    8926:	b086      	sub	sp, #24
    8928:	af00      	add	r7, sp, #0
    892a:	60f8      	str	r0, [r7, #12]
    892c:	60b9      	str	r1, [r7, #8]
    892e:	607a      	str	r2, [r7, #4]
  size_t t;
  if (!_file) {
    8930:	68fb      	ldr	r3, [r7, #12]
    8932:	6a1b      	ldr	r3, [r3, #32]
    8934:	2b00      	cmp	r3, #0
    8936:	d106      	bne.n	8946 <_ZN5SDLib4File5writeEPKhj+0x22>
    setWriteError();
    8938:	68fb      	ldr	r3, [r7, #12]
    893a:	2101      	movs	r1, #1
    893c:	0018      	movs	r0, r3
    893e:	f7ff ff15 	bl	876c <_ZN5Print13setWriteErrorEi>
    return 0;
    8942:	2300      	movs	r3, #0
    8944:	e021      	b.n	898a <_ZN5SDLib4File5writeEPKhj+0x66>
  }
  _file->clearWriteError();
    8946:	68fb      	ldr	r3, [r7, #12]
    8948:	6a1b      	ldr	r3, [r3, #32]
    894a:	0018      	movs	r0, r3
    894c:	f7ff ff24 	bl	8798 <_ZN5Print15clearWriteErrorEv>
  t = _file->write(buf, size);
    8950:	68fb      	ldr	r3, [r7, #12]
    8952:	6a1b      	ldr	r3, [r3, #32]
    8954:	687a      	ldr	r2, [r7, #4]
    8956:	b292      	uxth	r2, r2
    8958:	68b9      	ldr	r1, [r7, #8]
    895a:	0018      	movs	r0, r3
    895c:	f002 f924 	bl	aba8 <_ZN6SdFile5writeEPKvt>
    8960:	0003      	movs	r3, r0
    8962:	617b      	str	r3, [r7, #20]
  if (_file->getWriteError()) {
    8964:	68fb      	ldr	r3, [r7, #12]
    8966:	6a1b      	ldr	r3, [r3, #32]
    8968:	0018      	movs	r0, r3
    896a:	f7ff ff0b 	bl	8784 <_ZN5Print13getWriteErrorEv>
    896e:	0003      	movs	r3, r0
    8970:	1e5a      	subs	r2, r3, #1
    8972:	4193      	sbcs	r3, r2
    8974:	b2db      	uxtb	r3, r3
    8976:	2b00      	cmp	r3, #0
    8978:	d006      	beq.n	8988 <_ZN5SDLib4File5writeEPKhj+0x64>
    setWriteError();
    897a:	68fb      	ldr	r3, [r7, #12]
    897c:	2101      	movs	r1, #1
    897e:	0018      	movs	r0, r3
    8980:	f7ff fef4 	bl	876c <_ZN5Print13setWriteErrorEi>
    return 0;
    8984:	2300      	movs	r3, #0
    8986:	e000      	b.n	898a <_ZN5SDLib4File5writeEPKhj+0x66>
  }
  return t;
    8988:	697b      	ldr	r3, [r7, #20]
}
    898a:	0018      	movs	r0, r3
    898c:	46bd      	mov	sp, r7
    898e:	b006      	add	sp, #24
    8990:	bd80      	pop	{r7, pc}

00008992 <_ZN5SDLib4File4peekEv>:

int File::peek() {
    8992:	b580      	push	{r7, lr}
    8994:	b084      	sub	sp, #16
    8996:	af00      	add	r7, sp, #0
    8998:	6078      	str	r0, [r7, #4]
  if (! _file) 
    899a:	687b      	ldr	r3, [r7, #4]
    899c:	6a1b      	ldr	r3, [r3, #32]
    899e:	2b00      	cmp	r3, #0
    89a0:	d101      	bne.n	89a6 <_ZN5SDLib4File4peekEv+0x14>
    return 0;
    89a2:	2300      	movs	r3, #0
    89a4:	e012      	b.n	89cc <_ZN5SDLib4File4peekEv+0x3a>

  int c = _file->read();
    89a6:	687b      	ldr	r3, [r7, #4]
    89a8:	6a1b      	ldr	r3, [r3, #32]
    89aa:	0018      	movs	r0, r3
    89ac:	f7ff ff32 	bl	8814 <_ZN6SdFile4readEv>
    89b0:	0003      	movs	r3, r0
    89b2:	60fb      	str	r3, [r7, #12]
  if (c != -1) _file->seekCur(-1);
    89b4:	68fb      	ldr	r3, [r7, #12]
    89b6:	3301      	adds	r3, #1
    89b8:	d007      	beq.n	89ca <_ZN5SDLib4File4peekEv+0x38>
    89ba:	687b      	ldr	r3, [r7, #4]
    89bc:	6a1a      	ldr	r2, [r3, #32]
    89be:	2301      	movs	r3, #1
    89c0:	425b      	negs	r3, r3
    89c2:	0019      	movs	r1, r3
    89c4:	0010      	movs	r0, r2
    89c6:	f7ff ff3e 	bl	8846 <_ZN6SdFile7seekCurEm>
  return c;
    89ca:	68fb      	ldr	r3, [r7, #12]
}
    89cc:	0018      	movs	r0, r3
    89ce:	46bd      	mov	sp, r7
    89d0:	b004      	add	sp, #16
    89d2:	bd80      	pop	{r7, pc}

000089d4 <_ZN5SDLib4File4readEv>:

int File::read() {
    89d4:	b580      	push	{r7, lr}
    89d6:	b082      	sub	sp, #8
    89d8:	af00      	add	r7, sp, #0
    89da:	6078      	str	r0, [r7, #4]
  if (_file) 
    89dc:	687b      	ldr	r3, [r7, #4]
    89de:	6a1b      	ldr	r3, [r3, #32]
    89e0:	2b00      	cmp	r3, #0
    89e2:	d006      	beq.n	89f2 <_ZN5SDLib4File4readEv+0x1e>
    return _file->read();
    89e4:	687b      	ldr	r3, [r7, #4]
    89e6:	6a1b      	ldr	r3, [r3, #32]
    89e8:	0018      	movs	r0, r3
    89ea:	f7ff ff13 	bl	8814 <_ZN6SdFile4readEv>
    89ee:	0003      	movs	r3, r0
    89f0:	e001      	b.n	89f6 <_ZN5SDLib4File4readEv+0x22>
  return -1;
    89f2:	2301      	movs	r3, #1
    89f4:	425b      	negs	r3, r3
}
    89f6:	0018      	movs	r0, r3
    89f8:	46bd      	mov	sp, r7
    89fa:	b002      	add	sp, #8
    89fc:	bd80      	pop	{r7, pc}

000089fe <_ZN5SDLib4File4readEPvt>:

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
    89fe:	b580      	push	{r7, lr}
    8a00:	b084      	sub	sp, #16
    8a02:	af00      	add	r7, sp, #0
    8a04:	60f8      	str	r0, [r7, #12]
    8a06:	60b9      	str	r1, [r7, #8]
    8a08:	1dbb      	adds	r3, r7, #6
    8a0a:	801a      	strh	r2, [r3, #0]
  if (_file) 
    8a0c:	68fb      	ldr	r3, [r7, #12]
    8a0e:	6a1b      	ldr	r3, [r3, #32]
    8a10:	2b00      	cmp	r3, #0
    8a12:	d009      	beq.n	8a28 <_ZN5SDLib4File4readEPvt+0x2a>
    return _file->read(buf, nbyte);
    8a14:	68fb      	ldr	r3, [r7, #12]
    8a16:	6a18      	ldr	r0, [r3, #32]
    8a18:	1dbb      	adds	r3, r7, #6
    8a1a:	881a      	ldrh	r2, [r3, #0]
    8a1c:	68bb      	ldr	r3, [r7, #8]
    8a1e:	0019      	movs	r1, r3
    8a20:	f001 fd82 	bl	a528 <_ZN6SdFile4readEPvt>
    8a24:	0003      	movs	r3, r0
    8a26:	e000      	b.n	8a2a <_ZN5SDLib4File4readEPvt+0x2c>
  return 0;
    8a28:	2300      	movs	r3, #0
}
    8a2a:	0018      	movs	r0, r3
    8a2c:	46bd      	mov	sp, r7
    8a2e:	b004      	add	sp, #16
    8a30:	bd80      	pop	{r7, pc}
	...

00008a34 <_ZN5SDLib4File9availableEv>:

int File::available() {
    8a34:	b590      	push	{r4, r7, lr}
    8a36:	b085      	sub	sp, #20
    8a38:	af00      	add	r7, sp, #0
    8a3a:	6078      	str	r0, [r7, #4]
  if (! _file) return 0;
    8a3c:	687b      	ldr	r3, [r7, #4]
    8a3e:	6a1b      	ldr	r3, [r3, #32]
    8a40:	2b00      	cmp	r3, #0
    8a42:	d101      	bne.n	8a48 <_ZN5SDLib4File9availableEv+0x14>
    8a44:	2300      	movs	r3, #0
    8a46:	e010      	b.n	8a6a <_ZN5SDLib4File9availableEv+0x36>

  uint32_t n = size() - position();
    8a48:	687b      	ldr	r3, [r7, #4]
    8a4a:	0018      	movs	r0, r3
    8a4c:	f000 f854 	bl	8af8 <_ZN5SDLib4File4sizeEv>
    8a50:	0004      	movs	r4, r0
    8a52:	687b      	ldr	r3, [r7, #4]
    8a54:	0018      	movs	r0, r3
    8a56:	f000 f83a 	bl	8ace <_ZN5SDLib4File8positionEv>
    8a5a:	0003      	movs	r3, r0
    8a5c:	1ae3      	subs	r3, r4, r3
    8a5e:	60fb      	str	r3, [r7, #12]

  return n > 0X7FFF ? 0X7FFF : n;
    8a60:	68fb      	ldr	r3, [r7, #12]
    8a62:	4a04      	ldr	r2, [pc, #16]	; (8a74 <_ZN5SDLib4File9availableEv+0x40>)
    8a64:	4293      	cmp	r3, r2
    8a66:	d900      	bls.n	8a6a <_ZN5SDLib4File9availableEv+0x36>
    8a68:	4b02      	ldr	r3, [pc, #8]	; (8a74 <_ZN5SDLib4File9availableEv+0x40>)
}
    8a6a:	0018      	movs	r0, r3
    8a6c:	46bd      	mov	sp, r7
    8a6e:	b005      	add	sp, #20
    8a70:	bd90      	pop	{r4, r7, pc}
    8a72:	46c0      	nop			; (mov r8, r8)
    8a74:	00007fff 	.word	0x00007fff

00008a78 <_ZN5SDLib4File5flushEv>:

void File::flush() {
    8a78:	b580      	push	{r7, lr}
    8a7a:	b082      	sub	sp, #8
    8a7c:	af00      	add	r7, sp, #0
    8a7e:	6078      	str	r0, [r7, #4]
  if (_file)
    8a80:	687b      	ldr	r3, [r7, #4]
    8a82:	6a1b      	ldr	r3, [r3, #32]
    8a84:	2b00      	cmp	r3, #0
    8a86:	d004      	beq.n	8a92 <_ZN5SDLib4File5flushEv+0x1a>
    _file->sync();
    8a88:	687b      	ldr	r3, [r7, #4]
    8a8a:	6a1b      	ldr	r3, [r3, #32]
    8a8c:	0018      	movs	r0, r3
    8a8e:	f001 ff19 	bl	a8c4 <_ZN6SdFile4syncEv>
}
    8a92:	46c0      	nop			; (mov r8, r8)
    8a94:	46bd      	mov	sp, r7
    8a96:	b002      	add	sp, #8
    8a98:	bd80      	pop	{r7, pc}

00008a9a <_ZN5SDLib4File4seekEm>:

boolean File::seek(uint32_t pos) {
    8a9a:	b580      	push	{r7, lr}
    8a9c:	b082      	sub	sp, #8
    8a9e:	af00      	add	r7, sp, #0
    8aa0:	6078      	str	r0, [r7, #4]
    8aa2:	6039      	str	r1, [r7, #0]
  if (! _file) return false;
    8aa4:	687b      	ldr	r3, [r7, #4]
    8aa6:	6a1b      	ldr	r3, [r3, #32]
    8aa8:	2b00      	cmp	r3, #0
    8aaa:	d101      	bne.n	8ab0 <_ZN5SDLib4File4seekEm+0x16>
    8aac:	2300      	movs	r3, #0
    8aae:	e00a      	b.n	8ac6 <_ZN5SDLib4File4seekEm+0x2c>

  return _file->seekSet(pos);
    8ab0:	687b      	ldr	r3, [r7, #4]
    8ab2:	6a1b      	ldr	r3, [r3, #32]
    8ab4:	683a      	ldr	r2, [r7, #0]
    8ab6:	0011      	movs	r1, r2
    8ab8:	0018      	movs	r0, r3
    8aba:	f001 fe93 	bl	a7e4 <_ZN6SdFile7seekSetEm>
    8abe:	0003      	movs	r3, r0
    8ac0:	1e5a      	subs	r2, r3, #1
    8ac2:	4193      	sbcs	r3, r2
    8ac4:	b2db      	uxtb	r3, r3
}
    8ac6:	0018      	movs	r0, r3
    8ac8:	46bd      	mov	sp, r7
    8aca:	b002      	add	sp, #8
    8acc:	bd80      	pop	{r7, pc}

00008ace <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
    8ace:	b580      	push	{r7, lr}
    8ad0:	b082      	sub	sp, #8
    8ad2:	af00      	add	r7, sp, #0
    8ad4:	6078      	str	r0, [r7, #4]
  if (! _file) return -1;
    8ad6:	687b      	ldr	r3, [r7, #4]
    8ad8:	6a1b      	ldr	r3, [r3, #32]
    8ada:	2b00      	cmp	r3, #0
    8adc:	d102      	bne.n	8ae4 <_ZN5SDLib4File8positionEv+0x16>
    8ade:	2301      	movs	r3, #1
    8ae0:	425b      	negs	r3, r3
    8ae2:	e005      	b.n	8af0 <_ZN5SDLib4File8positionEv+0x22>
  return _file->curPosition();
    8ae4:	687b      	ldr	r3, [r7, #4]
    8ae6:	6a1b      	ldr	r3, [r3, #32]
    8ae8:	0018      	movs	r0, r3
    8aea:	f7ff fe62 	bl	87b2 <_ZNK6SdFile11curPositionEv>
    8aee:	0003      	movs	r3, r0
}
    8af0:	0018      	movs	r0, r3
    8af2:	46bd      	mov	sp, r7
    8af4:	b002      	add	sp, #8
    8af6:	bd80      	pop	{r7, pc}

00008af8 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
    8af8:	b580      	push	{r7, lr}
    8afa:	b082      	sub	sp, #8
    8afc:	af00      	add	r7, sp, #0
    8afe:	6078      	str	r0, [r7, #4]
  if (! _file) return 0;
    8b00:	687b      	ldr	r3, [r7, #4]
    8b02:	6a1b      	ldr	r3, [r3, #32]
    8b04:	2b00      	cmp	r3, #0
    8b06:	d101      	bne.n	8b0c <_ZN5SDLib4File4sizeEv+0x14>
    8b08:	2300      	movs	r3, #0
    8b0a:	e005      	b.n	8b18 <_ZN5SDLib4File4sizeEv+0x20>
  return _file->fileSize();
    8b0c:	687b      	ldr	r3, [r7, #4]
    8b0e:	6a1b      	ldr	r3, [r3, #32]
    8b10:	0018      	movs	r0, r3
    8b12:	f7ff fe58 	bl	87c6 <_ZNK6SdFile8fileSizeEv>
    8b16:	0003      	movs	r3, r0
}
    8b18:	0018      	movs	r0, r3
    8b1a:	46bd      	mov	sp, r7
    8b1c:	b002      	add	sp, #8
    8b1e:	bd80      	pop	{r7, pc}

00008b20 <_ZN5SDLib4File5closeEv>:

void File::close() {
    8b20:	b580      	push	{r7, lr}
    8b22:	b082      	sub	sp, #8
    8b24:	af00      	add	r7, sp, #0
    8b26:	6078      	str	r0, [r7, #4]
  if (_file) {
    8b28:	687b      	ldr	r3, [r7, #4]
    8b2a:	6a1b      	ldr	r3, [r3, #32]
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	d00c      	beq.n	8b4a <_ZN5SDLib4File5closeEv+0x2a>
    _file->close();
    8b30:	687b      	ldr	r3, [r7, #4]
    8b32:	6a1b      	ldr	r3, [r3, #32]
    8b34:	0018      	movs	r0, r3
    8b36:	f001 f9d5 	bl	9ee4 <_ZN6SdFile5closeEv>
    free(_file); 
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	6a1b      	ldr	r3, [r3, #32]
    8b3e:	0018      	movs	r0, r3
    8b40:	f007 fe4c 	bl	107dc <free>
    _file = 0;
    8b44:	687b      	ldr	r3, [r7, #4]
    8b46:	2200      	movs	r2, #0
    8b48:	621a      	str	r2, [r3, #32]
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    8b4a:	46c0      	nop			; (mov r8, r8)
    8b4c:	46bd      	mov	sp, r7
    8b4e:	b002      	add	sp, #8
    8b50:	bd80      	pop	{r7, pc}

00008b52 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
    8b52:	b580      	push	{r7, lr}
    8b54:	b082      	sub	sp, #8
    8b56:	af00      	add	r7, sp, #0
    8b58:	6078      	str	r0, [r7, #4]
  if (_file) 
    8b5a:	687b      	ldr	r3, [r7, #4]
    8b5c:	6a1b      	ldr	r3, [r3, #32]
    8b5e:	2b00      	cmp	r3, #0
    8b60:	d009      	beq.n	8b76 <_ZN5SDLib4FilecvbEv+0x24>
    return  _file->isOpen();
    8b62:	687b      	ldr	r3, [r7, #4]
    8b64:	6a1b      	ldr	r3, [r3, #32]
    8b66:	0018      	movs	r0, r3
    8b68:	f7ff fe47 	bl	87fa <_ZNK6SdFile6isOpenEv>
    8b6c:	0003      	movs	r3, r0
    8b6e:	1e5a      	subs	r2, r3, #1
    8b70:	4193      	sbcs	r3, r2
    8b72:	b2db      	uxtb	r3, r3
    8b74:	e000      	b.n	8b78 <_ZN5SDLib4FilecvbEv+0x26>
  return false;
    8b76:	2300      	movs	r3, #0
}
    8b78:	0018      	movs	r0, r3
    8b7a:	46bd      	mov	sp, r7
    8b7c:	b002      	add	sp, #8
    8b7e:	bd80      	pop	{r7, pc}

00008b80 <_ZN7Sd2CardC1Ev>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    8b80:	b580      	push	{r7, lr}
    8b82:	b082      	sub	sp, #8
    8b84:	af00      	add	r7, sp, #0
    8b86:	6078      	str	r0, [r7, #4]
    8b88:	687b      	ldr	r3, [r7, #4]
    8b8a:	2200      	movs	r2, #0
    8b8c:	715a      	strb	r2, [r3, #5]
    8b8e:	687b      	ldr	r3, [r7, #4]
    8b90:	2200      	movs	r2, #0
    8b92:	719a      	strb	r2, [r3, #6]
    8b94:	687b      	ldr	r3, [r7, #4]
    8b96:	2200      	movs	r2, #0
    8b98:	729a      	strb	r2, [r3, #10]
    8b9a:	687b      	ldr	r3, [r7, #4]
    8b9c:	2200      	movs	r2, #0
    8b9e:	731a      	strb	r2, [r3, #12]
    8ba0:	687b      	ldr	r3, [r7, #4]
    8ba2:	0018      	movs	r0, r3
    8ba4:	46bd      	mov	sp, r7
    8ba6:	b002      	add	sp, #8
    8ba8:	bd80      	pop	{r7, pc}
	...

00008bac <_ZN6SdFileC1Ev>:
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    8bac:	b580      	push	{r7, lr}
    8bae:	b082      	sub	sp, #8
    8bb0:	af00      	add	r7, sp, #0
    8bb2:	6078      	str	r0, [r7, #4]
    8bb4:	687b      	ldr	r3, [r7, #4]
    8bb6:	0018      	movs	r0, r3
    8bb8:	f7fa fd10 	bl	35dc <_ZN5PrintC1Ev>
    8bbc:	4a05      	ldr	r2, [pc, #20]	; (8bd4 <_ZN6SdFileC1Ev+0x28>)
    8bbe:	687b      	ldr	r3, [r7, #4]
    8bc0:	601a      	str	r2, [r3, #0]
    8bc2:	687b      	ldr	r3, [r7, #4]
    8bc4:	2200      	movs	r2, #0
    8bc6:	725a      	strb	r2, [r3, #9]
    8bc8:	687b      	ldr	r3, [r7, #4]
    8bca:	0018      	movs	r0, r3
    8bcc:	46bd      	mov	sp, r7
    8bce:	b002      	add	sp, #8
    8bd0:	bd80      	pop	{r7, pc}
    8bd2:	46c0      	nop			; (mov r8, r8)
    8bd4:	0001360c 	.word	0x0001360c

00008bd8 <_ZN6SdFile6rewindEv>:
  void rewind(void) {
    8bd8:	b580      	push	{r7, lr}
    8bda:	b082      	sub	sp, #8
    8bdc:	af00      	add	r7, sp, #0
    8bde:	6078      	str	r0, [r7, #4]
    curPosition_ = curCluster_ = 0;
    8be0:	687b      	ldr	r3, [r7, #4]
    8be2:	2200      	movs	r2, #0
    8be4:	60da      	str	r2, [r3, #12]
    8be6:	687b      	ldr	r3, [r7, #4]
    8be8:	68da      	ldr	r2, [r3, #12]
    8bea:	687b      	ldr	r3, [r7, #4]
    8bec:	611a      	str	r2, [r3, #16]
  }
    8bee:	46c0      	nop			; (mov r8, r8)
    8bf0:	46bd      	mov	sp, r7
    8bf2:	b002      	add	sp, #8
    8bf4:	bd80      	pop	{r7, pc}

00008bf6 <_ZN6SdFile4openERS_PKch>:
    return makeDir(&dir, dirName);
  }
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    8bf6:	b580      	push	{r7, lr}
    8bf8:	b084      	sub	sp, #16
    8bfa:	af00      	add	r7, sp, #0
    8bfc:	60f8      	str	r0, [r7, #12]
    8bfe:	60b9      	str	r1, [r7, #8]
    8c00:	607a      	str	r2, [r7, #4]
    8c02:	001a      	movs	r2, r3
    8c04:	1cfb      	adds	r3, r7, #3
    8c06:	701a      	strb	r2, [r3, #0]
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    8c08:	1cfb      	adds	r3, r7, #3
    8c0a:	781b      	ldrb	r3, [r3, #0]
    8c0c:	687a      	ldr	r2, [r7, #4]
    8c0e:	68b9      	ldr	r1, [r7, #8]
    8c10:	68f8      	ldr	r0, [r7, #12]
    8c12:	f001 fa29 	bl	a068 <_ZN6SdFile4openEPS_PKch>
    8c16:	0003      	movs	r3, r0
  }
    8c18:	0018      	movs	r0, r3
    8c1a:	46bd      	mov	sp, r7
    8c1c:	b004      	add	sp, #16
    8c1e:	bd80      	pop	{r7, pc}

00008c20 <_ZN6SdFile8openRootER8SdVolume>:
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    8c20:	b580      	push	{r7, lr}
    8c22:	b082      	sub	sp, #8
    8c24:	af00      	add	r7, sp, #0
    8c26:	6078      	str	r0, [r7, #4]
    8c28:	6039      	str	r1, [r7, #0]
    8c2a:	683a      	ldr	r2, [r7, #0]
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	0011      	movs	r1, r2
    8c30:	0018      	movs	r0, r3
    8c32:	f001 fc0f 	bl	a454 <_ZN6SdFile8openRootEP8SdVolume>
    8c36:	0003      	movs	r3, r0
    8c38:	0018      	movs	r0, r3
    8c3a:	46bd      	mov	sp, r7
    8c3c:	b002      	add	sp, #8
    8c3e:	bd80      	pop	{r7, pc}

00008c40 <_ZN8SdVolumeC1Ev>:
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    8c40:	b580      	push	{r7, lr}
    8c42:	b082      	sub	sp, #8
    8c44:	af00      	add	r7, sp, #0
    8c46:	6078      	str	r0, [r7, #4]
    8c48:	687b      	ldr	r3, [r7, #4]
    8c4a:	2202      	movs	r2, #2
    8c4c:	601a      	str	r2, [r3, #0]
    8c4e:	687b      	ldr	r3, [r7, #4]
    8c50:	2220      	movs	r2, #32
    8c52:	2100      	movs	r1, #0
    8c54:	5499      	strb	r1, [r3, r2]
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	0018      	movs	r0, r3
    8c5a:	46bd      	mov	sp, r7
    8c5c:	b002      	add	sp, #8
    8c5e:	bd80      	pop	{r7, pc}

00008c60 <_ZN8SdVolume4initEP7Sd2Card>:
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    8c60:	b580      	push	{r7, lr}
    8c62:	b082      	sub	sp, #8
    8c64:	af00      	add	r7, sp, #0
    8c66:	6078      	str	r0, [r7, #4]
    8c68:	6039      	str	r1, [r7, #0]
    8c6a:	6839      	ldr	r1, [r7, #0]
    8c6c:	687b      	ldr	r3, [r7, #4]
    8c6e:	2201      	movs	r2, #1
    8c70:	0018      	movs	r0, r3
    8c72:	f002 fbb1 	bl	b3d8 <_ZN8SdVolume4initEP7Sd2Cardh>
    8c76:	1e03      	subs	r3, r0, #0
    8c78:	d107      	bne.n	8c8a <_ZN8SdVolume4initEP7Sd2Card+0x2a>
    8c7a:	6839      	ldr	r1, [r7, #0]
    8c7c:	687b      	ldr	r3, [r7, #4]
    8c7e:	2200      	movs	r2, #0
    8c80:	0018      	movs	r0, r3
    8c82:	f002 fba9 	bl	b3d8 <_ZN8SdVolume4initEP7Sd2Cardh>
    8c86:	0003      	movs	r3, r0
    8c88:	e000      	b.n	8c8c <_ZN8SdVolume4initEP7Sd2Card+0x2c>
    8c8a:	2301      	movs	r3, #1
    8c8c:	0018      	movs	r0, r3
    8c8e:	46bd      	mov	sp, r7
    8c90:	b002      	add	sp, #8
    8c92:	bd80      	pop	{r7, pc}

00008c94 <_ZN8SdVolume4initER7Sd2Card>:
  static Sd2Card* sdCard(void) {return sdCard_;}
//------------------------------------------------------------------------------
#if ALLOW_DEPRECATED_FUNCTIONS
  // Deprecated functions  - suppress cpplint warnings with NOLINT comment
  /** \deprecated Use: uint8_t SdVolume::init(Sd2Card* dev); */
  uint8_t init(Sd2Card& dev) {return init(&dev);}  // NOLINT
    8c94:	b580      	push	{r7, lr}
    8c96:	b082      	sub	sp, #8
    8c98:	af00      	add	r7, sp, #0
    8c9a:	6078      	str	r0, [r7, #4]
    8c9c:	6039      	str	r1, [r7, #0]
    8c9e:	683a      	ldr	r2, [r7, #0]
    8ca0:	687b      	ldr	r3, [r7, #4]
    8ca2:	0011      	movs	r1, r2
    8ca4:	0018      	movs	r0, r3
    8ca6:	f7ff ffdb 	bl	8c60 <_ZN8SdVolume4initEP7Sd2Card>
    8caa:	0003      	movs	r3, r0
    8cac:	0018      	movs	r0, r3
    8cae:	46bd      	mov	sp, r7
    8cb0:	b002      	add	sp, #8
    8cb2:	bd80      	pop	{r7, pc}

00008cb4 <_ZN5SDLib7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    8cb4:	b580      	push	{r7, lr}
    8cb6:	b082      	sub	sp, #8
    8cb8:	af00      	add	r7, sp, #0
    8cba:	6078      	str	r0, [r7, #4]
    8cbc:	000a      	movs	r2, r1
    8cbe:	1cfb      	adds	r3, r7, #3
    8cc0:	701a      	strb	r2, [r3, #0]
  if(root.isOpen()) root.close();
    8cc2:	687b      	ldr	r3, [r7, #4]
    8cc4:	3338      	adds	r3, #56	; 0x38
    8cc6:	0018      	movs	r0, r3
    8cc8:	f7ff fd97 	bl	87fa <_ZNK6SdFile6isOpenEv>
    8ccc:	0003      	movs	r3, r0
    8cce:	1e5a      	subs	r2, r3, #1
    8cd0:	4193      	sbcs	r3, r2
    8cd2:	b2db      	uxtb	r3, r3
    8cd4:	2b00      	cmp	r3, #0
    8cd6:	d004      	beq.n	8ce2 <_ZN5SDLib7SDClass5beginEh+0x2e>
    8cd8:	687b      	ldr	r3, [r7, #4]
    8cda:	3338      	adds	r3, #56	; 0x38
    8cdc:	0018      	movs	r0, r3
    8cde:	f001 f901 	bl	9ee4 <_ZN6SdFile5closeEv>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    8ce2:	6878      	ldr	r0, [r7, #4]
    8ce4:	1cfb      	adds	r3, r7, #3
    8ce6:	781b      	ldrb	r3, [r3, #0]
    8ce8:	001a      	movs	r2, r3
    8cea:	2101      	movs	r1, #1
    8cec:	f000 fb46 	bl	937c <_ZN7Sd2Card4initEhh>
    8cf0:	1e03      	subs	r3, r0, #0
         volume.init(card) &&
    8cf2:	d015      	beq.n	8d20 <_ZN5SDLib7SDClass5beginEh+0x6c>
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	3310      	adds	r3, #16
    8cf8:	687a      	ldr	r2, [r7, #4]
    8cfa:	0011      	movs	r1, r2
    8cfc:	0018      	movs	r0, r3
    8cfe:	f7ff ffc9 	bl	8c94 <_ZN8SdVolume4initER7Sd2Card>
    8d02:	1e03      	subs	r3, r0, #0
  return card.init(SPI_HALF_SPEED, csPin) &&
    8d04:	d00c      	beq.n	8d20 <_ZN5SDLib7SDClass5beginEh+0x6c>
         root.openRoot(volume);
    8d06:	687b      	ldr	r3, [r7, #4]
    8d08:	3338      	adds	r3, #56	; 0x38
    8d0a:	001a      	movs	r2, r3
    8d0c:	687b      	ldr	r3, [r7, #4]
    8d0e:	3310      	adds	r3, #16
    8d10:	0019      	movs	r1, r3
    8d12:	0010      	movs	r0, r2
    8d14:	f7ff ff84 	bl	8c20 <_ZN6SdFile8openRootER8SdVolume>
    8d18:	1e03      	subs	r3, r0, #0
         volume.init(card) &&
    8d1a:	d001      	beq.n	8d20 <_ZN5SDLib7SDClass5beginEh+0x6c>
    8d1c:	2301      	movs	r3, #1
    8d1e:	e000      	b.n	8d22 <_ZN5SDLib7SDClass5beginEh+0x6e>
    8d20:	2300      	movs	r3, #0
}
    8d22:	0018      	movs	r0, r3
    8d24:	46bd      	mov	sp, r7
    8d26:	b002      	add	sp, #8
    8d28:	bd80      	pop	{r7, pc}
	...

00008d2c <_ZN5PrintC1ERKS_>:
class Print
    8d2c:	b580      	push	{r7, lr}
    8d2e:	b082      	sub	sp, #8
    8d30:	af00      	add	r7, sp, #0
    8d32:	6078      	str	r0, [r7, #4]
    8d34:	6039      	str	r1, [r7, #0]
    8d36:	4a06      	ldr	r2, [pc, #24]	; (8d50 <_ZN5PrintC1ERKS_+0x24>)
    8d38:	687b      	ldr	r3, [r7, #4]
    8d3a:	601a      	str	r2, [r3, #0]
    8d3c:	683b      	ldr	r3, [r7, #0]
    8d3e:	685a      	ldr	r2, [r3, #4]
    8d40:	687b      	ldr	r3, [r7, #4]
    8d42:	605a      	str	r2, [r3, #4]
    8d44:	687b      	ldr	r3, [r7, #4]
    8d46:	0018      	movs	r0, r3
    8d48:	46bd      	mov	sp, r7
    8d4a:	b002      	add	sp, #8
    8d4c:	bd80      	pop	{r7, pc}
    8d4e:	46c0      	nop			; (mov r8, r8)
    8d50:	000133c4 	.word	0x000133c4

00008d54 <_ZN6SdFileC1ERKS_>:
class SdFile : public Print {
    8d54:	b580      	push	{r7, lr}
    8d56:	b082      	sub	sp, #8
    8d58:	af00      	add	r7, sp, #0
    8d5a:	6078      	str	r0, [r7, #4]
    8d5c:	6039      	str	r1, [r7, #0]
    8d5e:	687b      	ldr	r3, [r7, #4]
    8d60:	683a      	ldr	r2, [r7, #0]
    8d62:	0011      	movs	r1, r2
    8d64:	0018      	movs	r0, r3
    8d66:	f7ff ffe1 	bl	8d2c <_ZN5PrintC1ERKS_>
    8d6a:	4a16      	ldr	r2, [pc, #88]	; (8dc4 <_ZN6SdFileC1ERKS_+0x70>)
    8d6c:	687b      	ldr	r3, [r7, #4]
    8d6e:	601a      	str	r2, [r3, #0]
    8d70:	683b      	ldr	r3, [r7, #0]
    8d72:	7a1a      	ldrb	r2, [r3, #8]
    8d74:	687b      	ldr	r3, [r7, #4]
    8d76:	721a      	strb	r2, [r3, #8]
    8d78:	683b      	ldr	r3, [r7, #0]
    8d7a:	7a5a      	ldrb	r2, [r3, #9]
    8d7c:	687b      	ldr	r3, [r7, #4]
    8d7e:	725a      	strb	r2, [r3, #9]
    8d80:	683b      	ldr	r3, [r7, #0]
    8d82:	68da      	ldr	r2, [r3, #12]
    8d84:	687b      	ldr	r3, [r7, #4]
    8d86:	60da      	str	r2, [r3, #12]
    8d88:	683b      	ldr	r3, [r7, #0]
    8d8a:	691a      	ldr	r2, [r3, #16]
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	611a      	str	r2, [r3, #16]
    8d90:	683b      	ldr	r3, [r7, #0]
    8d92:	695a      	ldr	r2, [r3, #20]
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	615a      	str	r2, [r3, #20]
    8d98:	683b      	ldr	r3, [r7, #0]
    8d9a:	7e1a      	ldrb	r2, [r3, #24]
    8d9c:	687b      	ldr	r3, [r7, #4]
    8d9e:	761a      	strb	r2, [r3, #24]
    8da0:	683b      	ldr	r3, [r7, #0]
    8da2:	69da      	ldr	r2, [r3, #28]
    8da4:	687b      	ldr	r3, [r7, #4]
    8da6:	61da      	str	r2, [r3, #28]
    8da8:	683b      	ldr	r3, [r7, #0]
    8daa:	6a1a      	ldr	r2, [r3, #32]
    8dac:	687b      	ldr	r3, [r7, #4]
    8dae:	621a      	str	r2, [r3, #32]
    8db0:	683b      	ldr	r3, [r7, #0]
    8db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8db4:	687b      	ldr	r3, [r7, #4]
    8db6:	625a      	str	r2, [r3, #36]	; 0x24
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	0018      	movs	r0, r3
    8dbc:	46bd      	mov	sp, r7
    8dbe:	b002      	add	sp, #8
    8dc0:	bd80      	pop	{r7, pc}
    8dc2:	46c0      	nop			; (mov r8, r8)
    8dc4:	0001360c 	.word	0x0001360c

00008dc8 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
{
  root.close();
}

// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    8dc8:	b580      	push	{r7, lr}
    8dca:	b0a2      	sub	sp, #136	; 0x88
    8dcc:	af00      	add	r7, sp, #0
    8dce:	60f8      	str	r0, [r7, #12]
    8dd0:	60b9      	str	r1, [r7, #8]
    8dd2:	607a      	str	r2, [r7, #4]
    8dd4:	603b      	str	r3, [r7, #0]
  // get parent directory
  SdFile d1;
    8dd6:	234c      	movs	r3, #76	; 0x4c
    8dd8:	18fb      	adds	r3, r7, r3
    8dda:	0018      	movs	r0, r3
    8ddc:	f7ff fee6 	bl	8bac <_ZN6SdFileC1Ev>
  SdFile d2;
    8de0:	2324      	movs	r3, #36	; 0x24
    8de2:	18fb      	adds	r3, r7, r3
    8de4:	0018      	movs	r0, r3
    8de6:	f7ff fee1 	bl	8bac <_ZN6SdFileC1Ev>

  d1.openRoot(volume); // start with the mostparent, root!
    8dea:	68bb      	ldr	r3, [r7, #8]
    8dec:	3310      	adds	r3, #16
    8dee:	001a      	movs	r2, r3
    8df0:	234c      	movs	r3, #76	; 0x4c
    8df2:	18fb      	adds	r3, r7, r3
    8df4:	0011      	movs	r1, r2
    8df6:	0018      	movs	r0, r3
    8df8:	f7ff ff12 	bl	8c20 <_ZN6SdFile8openRootER8SdVolume>

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    8dfc:	234c      	movs	r3, #76	; 0x4c
    8dfe:	18fb      	adds	r3, r7, r3
    8e00:	2284      	movs	r2, #132	; 0x84
    8e02:	18ba      	adds	r2, r7, r2
    8e04:	6013      	str	r3, [r2, #0]
  SdFile *subdir = &d2;
    8e06:	2324      	movs	r3, #36	; 0x24
    8e08:	18fb      	adds	r3, r7, r3
    8e0a:	2280      	movs	r2, #128	; 0x80
    8e0c:	18ba      	adds	r2, r7, r2
    8e0e:	6013      	str	r3, [r2, #0]
  
  const char *origpath = filepath;
    8e10:	687b      	ldr	r3, [r7, #4]
    8e12:	67bb      	str	r3, [r7, #120]	; 0x78

  while (strchr(filepath, '/')) {
    8e14:	687b      	ldr	r3, [r7, #4]
    8e16:	212f      	movs	r1, #47	; 0x2f
    8e18:	0018      	movs	r0, r3
    8e1a:	f008 fb93 	bl	11544 <strchr>
    8e1e:	1e03      	subs	r3, r0, #0
    8e20:	d06b      	beq.n	8efa <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x132>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    8e22:	687b      	ldr	r3, [r7, #4]
    8e24:	781b      	ldrb	r3, [r3, #0]
    8e26:	2b2f      	cmp	r3, #47	; 0x2f
    8e28:	d103      	bne.n	8e32 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6a>
      filepath++;
    8e2a:	687b      	ldr	r3, [r7, #4]
    8e2c:	3301      	adds	r3, #1
    8e2e:	607b      	str	r3, [r7, #4]
    8e30:	e7f0      	b.n	8e14 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x4c>
      continue;
    }
    
    if (! strchr(filepath, '/')) {
    8e32:	687b      	ldr	r3, [r7, #4]
    8e34:	212f      	movs	r1, #47	; 0x2f
    8e36:	0018      	movs	r0, r3
    8e38:	f008 fb84 	bl	11544 <strchr>
    8e3c:	1e03      	subs	r3, r0, #0
    8e3e:	d05b      	beq.n	8ef8 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x130>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    8e40:	687b      	ldr	r3, [r7, #4]
    8e42:	212f      	movs	r1, #47	; 0x2f
    8e44:	0018      	movs	r0, r3
    8e46:	f008 fb7d 	bl	11544 <strchr>
    8e4a:	0003      	movs	r3, r0
    8e4c:	001a      	movs	r2, r3
    8e4e:	687b      	ldr	r3, [r7, #4]
    8e50:	1ad2      	subs	r2, r2, r3
    8e52:	237f      	movs	r3, #127	; 0x7f
    8e54:	18fb      	adds	r3, r7, r3
    8e56:	701a      	strb	r2, [r3, #0]
    if (idx > 12)
    8e58:	237f      	movs	r3, #127	; 0x7f
    8e5a:	18fb      	adds	r3, r7, r3
    8e5c:	781b      	ldrb	r3, [r3, #0]
    8e5e:	2b0c      	cmp	r3, #12
    8e60:	dd03      	ble.n	8e6a <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa2>
      idx = 12;    // dont let them specify long names
    8e62:	237f      	movs	r3, #127	; 0x7f
    8e64:	18fb      	adds	r3, r7, r3
    8e66:	220c      	movs	r2, #12
    8e68:	701a      	strb	r2, [r3, #0]
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    8e6a:	237f      	movs	r3, #127	; 0x7f
    8e6c:	18fb      	adds	r3, r7, r3
    8e6e:	781a      	ldrb	r2, [r3, #0]
    8e70:	6879      	ldr	r1, [r7, #4]
    8e72:	2314      	movs	r3, #20
    8e74:	18fb      	adds	r3, r7, r3
    8e76:	0018      	movs	r0, r3
    8e78:	f008 fb81 	bl	1157e <strncpy>
    subdirname[idx] = 0;
    8e7c:	237f      	movs	r3, #127	; 0x7f
    8e7e:	18fb      	adds	r3, r7, r3
    8e80:	781b      	ldrb	r3, [r3, #0]
    8e82:	2214      	movs	r2, #20
    8e84:	18ba      	adds	r2, r7, r2
    8e86:	2100      	movs	r1, #0
    8e88:	54d1      	strb	r1, [r2, r3]

    // close the subdir (we reuse them) if open
    subdir->close();
    8e8a:	2380      	movs	r3, #128	; 0x80
    8e8c:	18fb      	adds	r3, r7, r3
    8e8e:	681b      	ldr	r3, [r3, #0]
    8e90:	0018      	movs	r0, r3
    8e92:	f001 f827 	bl	9ee4 <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    8e96:	2314      	movs	r3, #20
    8e98:	18fa      	adds	r2, r7, r3
    8e9a:	2384      	movs	r3, #132	; 0x84
    8e9c:	18fb      	adds	r3, r7, r3
    8e9e:	6819      	ldr	r1, [r3, #0]
    8ea0:	2380      	movs	r3, #128	; 0x80
    8ea2:	18fb      	adds	r3, r7, r3
    8ea4:	6818      	ldr	r0, [r3, #0]
    8ea6:	2301      	movs	r3, #1
    8ea8:	f001 f8de 	bl	a068 <_ZN6SdFile4openEPS_PKch>
    8eac:	0003      	movs	r3, r0
    8eae:	425a      	negs	r2, r3
    8eb0:	4153      	adcs	r3, r2
    8eb2:	b2db      	uxtb	r3, r3
    8eb4:	2b00      	cmp	r3, #0
    8eb6:	d004      	beq.n	8ec2 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xfa>
      // failed to open one of the subdirectories
      return SdFile();
    8eb8:	68fb      	ldr	r3, [r7, #12]
    8eba:	0018      	movs	r0, r3
    8ebc:	f7ff fe76 	bl	8bac <_ZN6SdFileC1Ev>
    8ec0:	e028      	b.n	8f14 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x14c>
    }
    // move forward to the next subdirectory
    filepath += idx;
    8ec2:	237f      	movs	r3, #127	; 0x7f
    8ec4:	18fb      	adds	r3, r7, r3
    8ec6:	781b      	ldrb	r3, [r3, #0]
    8ec8:	687a      	ldr	r2, [r7, #4]
    8eca:	18d3      	adds	r3, r2, r3
    8ecc:	607b      	str	r3, [r7, #4]

    // we reuse the objects, close it.
    parent->close();
    8ece:	2384      	movs	r3, #132	; 0x84
    8ed0:	18fb      	adds	r3, r7, r3
    8ed2:	681b      	ldr	r3, [r3, #0]
    8ed4:	0018      	movs	r0, r3
    8ed6:	f001 f805 	bl	9ee4 <_ZN6SdFile5closeEv>

    // swap the pointers
    SdFile *t = parent;
    8eda:	2384      	movs	r3, #132	; 0x84
    8edc:	18fb      	adds	r3, r7, r3
    8ede:	681b      	ldr	r3, [r3, #0]
    8ee0:	677b      	str	r3, [r7, #116]	; 0x74
    parent = subdir;
    8ee2:	2380      	movs	r3, #128	; 0x80
    8ee4:	18fb      	adds	r3, r7, r3
    8ee6:	681b      	ldr	r3, [r3, #0]
    8ee8:	2284      	movs	r2, #132	; 0x84
    8eea:	18ba      	adds	r2, r7, r2
    8eec:	6013      	str	r3, [r2, #0]
    subdir = t;
    8eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8ef0:	2280      	movs	r2, #128	; 0x80
    8ef2:	18ba      	adds	r2, r7, r2
    8ef4:	6013      	str	r3, [r2, #0]
  while (strchr(filepath, '/')) {
    8ef6:	e78d      	b.n	8e14 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x4c>
      break;
    8ef8:	46c0      	nop			; (mov r8, r8)
  }

  *index = (int)(filepath - origpath);
    8efa:	687a      	ldr	r2, [r7, #4]
    8efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8efe:	1ad2      	subs	r2, r2, r3
    8f00:	683b      	ldr	r3, [r7, #0]
    8f02:	601a      	str	r2, [r3, #0]
  // parent is now the parent diretory of the file!
  return *parent;
    8f04:	2384      	movs	r3, #132	; 0x84
    8f06:	18fb      	adds	r3, r7, r3
    8f08:	681a      	ldr	r2, [r3, #0]
    8f0a:	68fb      	ldr	r3, [r7, #12]
    8f0c:	0011      	movs	r1, r2
    8f0e:	0018      	movs	r0, r3
    8f10:	f7ff ff20 	bl	8d54 <_ZN6SdFileC1ERKS_>
}
    8f14:	68f8      	ldr	r0, [r7, #12]
    8f16:	46bd      	mov	sp, r7
    8f18:	b022      	add	sp, #136	; 0x88
    8f1a:	bd80      	pop	{r7, pc}

00008f1c <_ZN5SDLib7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    8f1c:	b580      	push	{r7, lr}
    8f1e:	b0ae      	sub	sp, #184	; 0xb8
    8f20:	af00      	add	r7, sp, #0
    8f22:	60f8      	str	r0, [r7, #12]
    8f24:	60b9      	str	r1, [r7, #8]
    8f26:	607a      	str	r2, [r7, #4]
    8f28:	001a      	movs	r2, r3
    8f2a:	1cfb      	adds	r3, r7, #3
    8f2c:	701a      	strb	r2, [r3, #0]
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    8f2e:	233c      	movs	r3, #60	; 0x3c
    8f30:	18f8      	adds	r0, r7, r3
    8f32:	2364      	movs	r3, #100	; 0x64
    8f34:	18fb      	adds	r3, r7, r3
    8f36:	687a      	ldr	r2, [r7, #4]
    8f38:	68b9      	ldr	r1, [r7, #8]
    8f3a:	f7ff ff45 	bl	8dc8 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    8f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    8f40:	001a      	movs	r2, r3
    8f42:	687b      	ldr	r3, [r7, #4]
    8f44:	189b      	adds	r3, r3, r2
    8f46:	607b      	str	r3, [r7, #4]

  if (! filepath[0]) {
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	781b      	ldrb	r3, [r3, #0]
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d10f      	bne.n	8f70 <_ZN5SDLib7SDClass4openEPKch+0x54>
    // it was the directory itself!
    return File(parentdir, "/");
    8f50:	233c      	movs	r3, #60	; 0x3c
    8f52:	18fa      	adds	r2, r7, r3
    8f54:	2368      	movs	r3, #104	; 0x68
    8f56:	18fb      	adds	r3, r7, r3
    8f58:	0011      	movs	r1, r2
    8f5a:	0018      	movs	r0, r3
    8f5c:	f7ff fefa 	bl	8d54 <_ZN6SdFileC1ERKS_>
    8f60:	4a2d      	ldr	r2, [pc, #180]	; (9018 <_ZN5SDLib7SDClass4openEPKch+0xfc>)
    8f62:	2368      	movs	r3, #104	; 0x68
    8f64:	18f9      	adds	r1, r7, r3
    8f66:	68fb      	ldr	r3, [r7, #12]
    8f68:	0018      	movs	r0, r3
    8f6a:	f7ff fc7f 	bl	886c <_ZN5SDLib4FileC1E6SdFilePKc>
    8f6e:	e04e      	b.n	900e <_ZN5SDLib7SDClass4openEPKch+0xf2>
  }

  // Open the file itself
  SdFile file;
    8f70:	2314      	movs	r3, #20
    8f72:	18fb      	adds	r3, r7, r3
    8f74:	0018      	movs	r0, r3
    8f76:	f7ff fe19 	bl	8bac <_ZN6SdFileC1Ev>

  // failed to open a subdir!
  if (!parentdir.isOpen())
    8f7a:	233c      	movs	r3, #60	; 0x3c
    8f7c:	18fb      	adds	r3, r7, r3
    8f7e:	0018      	movs	r0, r3
    8f80:	f7ff fc3b 	bl	87fa <_ZNK6SdFile6isOpenEv>
    8f84:	0003      	movs	r3, r0
    8f86:	425a      	negs	r2, r3
    8f88:	4153      	adcs	r3, r2
    8f8a:	b2db      	uxtb	r3, r3
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d004      	beq.n	8f9a <_ZN5SDLib7SDClass4openEPKch+0x7e>
    return File();
    8f90:	68fb      	ldr	r3, [r7, #12]
    8f92:	0018      	movs	r0, r3
    8f94:	f7ff fc9a 	bl	88cc <_ZN5SDLib4FileC1Ev>
    8f98:	e039      	b.n	900e <_ZN5SDLib7SDClass4openEPKch+0xf2>

  if ( ! file.open(parentdir, filepath, mode)) {
    8f9a:	1cfb      	adds	r3, r7, #3
    8f9c:	781b      	ldrb	r3, [r3, #0]
    8f9e:	687a      	ldr	r2, [r7, #4]
    8fa0:	213c      	movs	r1, #60	; 0x3c
    8fa2:	1879      	adds	r1, r7, r1
    8fa4:	2014      	movs	r0, #20
    8fa6:	1838      	adds	r0, r7, r0
    8fa8:	f7ff fe25 	bl	8bf6 <_ZN6SdFile4openERS_PKch>
    8fac:	0003      	movs	r3, r0
    8fae:	425a      	negs	r2, r3
    8fb0:	4153      	adcs	r3, r2
    8fb2:	b2db      	uxtb	r3, r3
    8fb4:	2b00      	cmp	r3, #0
    8fb6:	d004      	beq.n	8fc2 <_ZN5SDLib7SDClass4openEPKch+0xa6>
    return File();
    8fb8:	68fb      	ldr	r3, [r7, #12]
    8fba:	0018      	movs	r0, r3
    8fbc:	f7ff fc86 	bl	88cc <_ZN5SDLib4FileC1Ev>
    8fc0:	e025      	b.n	900e <_ZN5SDLib7SDClass4openEPKch+0xf2>
  }
  // close the parent
  parentdir.close();
    8fc2:	233c      	movs	r3, #60	; 0x3c
    8fc4:	18fb      	adds	r3, r7, r3
    8fc6:	0018      	movs	r0, r3
    8fc8:	f000 ff8c 	bl	9ee4 <_ZN6SdFile5closeEv>

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    8fcc:	1cfb      	adds	r3, r7, #3
    8fce:	781b      	ldrb	r3, [r3, #0]
    8fd0:	2206      	movs	r2, #6
    8fd2:	4013      	ands	r3, r2
    8fd4:	2b06      	cmp	r3, #6
    8fd6:	d10b      	bne.n	8ff0 <_ZN5SDLib7SDClass4openEPKch+0xd4>
    file.seekSet(file.fileSize());
    8fd8:	2314      	movs	r3, #20
    8fda:	18fb      	adds	r3, r7, r3
    8fdc:	0018      	movs	r0, r3
    8fde:	f7ff fbf2 	bl	87c6 <_ZNK6SdFile8fileSizeEv>
    8fe2:	0002      	movs	r2, r0
    8fe4:	2314      	movs	r3, #20
    8fe6:	18fb      	adds	r3, r7, r3
    8fe8:	0011      	movs	r1, r2
    8fea:	0018      	movs	r0, r3
    8fec:	f001 fbfa 	bl	a7e4 <_ZN6SdFile7seekSetEm>
  return File(file, filepath);
    8ff0:	2314      	movs	r3, #20
    8ff2:	18fa      	adds	r2, r7, r3
    8ff4:	2390      	movs	r3, #144	; 0x90
    8ff6:	18fb      	adds	r3, r7, r3
    8ff8:	0011      	movs	r1, r2
    8ffa:	0018      	movs	r0, r3
    8ffc:	f7ff feaa 	bl	8d54 <_ZN6SdFileC1ERKS_>
    9000:	687a      	ldr	r2, [r7, #4]
    9002:	2390      	movs	r3, #144	; 0x90
    9004:	18f9      	adds	r1, r7, r3
    9006:	68fb      	ldr	r3, [r7, #12]
    9008:	0018      	movs	r0, r3
    900a:	f7ff fc2f 	bl	886c <_ZN5SDLib4FileC1E6SdFilePKc>
}
    900e:	68f8      	ldr	r0, [r7, #12]
    9010:	46bd      	mov	sp, r7
    9012:	b02e      	add	sp, #184	; 0xb8
    9014:	bd80      	pop	{r7, pc}
    9016:	46c0      	nop			; (mov r8, r8)
    9018:	000135d8 	.word	0x000135d8

0000901c <_ZN5SDLib7SDClassC1Ev>:
  void rewindDirectory(void);
  
  using Print::write;
};

class SDClass {
    901c:	b580      	push	{r7, lr}
    901e:	b082      	sub	sp, #8
    9020:	af00      	add	r7, sp, #0
    9022:	6078      	str	r0, [r7, #4]
    9024:	687b      	ldr	r3, [r7, #4]
    9026:	0018      	movs	r0, r3
    9028:	f7ff fdaa 	bl	8b80 <_ZN7Sd2CardC1Ev>
    902c:	687b      	ldr	r3, [r7, #4]
    902e:	3310      	adds	r3, #16
    9030:	0018      	movs	r0, r3
    9032:	f7ff fe05 	bl	8c40 <_ZN8SdVolumeC1Ev>
    9036:	687b      	ldr	r3, [r7, #4]
    9038:	3338      	adds	r3, #56	; 0x38
    903a:	0018      	movs	r0, r3
    903c:	f7ff fdb6 	bl	8bac <_ZN6SdFileC1Ev>
    9040:	687b      	ldr	r3, [r7, #4]
    9042:	0018      	movs	r0, r3
    9044:	46bd      	mov	sp, r7
    9046:	b002      	add	sp, #8
    9048:	bd80      	pop	{r7, pc}
	...

0000904c <_Z41__static_initialization_and_destruction_0ii>:
    _file->rewind();
}

SDClass SD;

};
    904c:	b580      	push	{r7, lr}
    904e:	b082      	sub	sp, #8
    9050:	af00      	add	r7, sp, #0
    9052:	6078      	str	r0, [r7, #4]
    9054:	6039      	str	r1, [r7, #0]
    9056:	687b      	ldr	r3, [r7, #4]
    9058:	2b01      	cmp	r3, #1
    905a:	d107      	bne.n	906c <_Z41__static_initialization_and_destruction_0ii+0x20>
    905c:	683b      	ldr	r3, [r7, #0]
    905e:	4a05      	ldr	r2, [pc, #20]	; (9074 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    9060:	4293      	cmp	r3, r2
    9062:	d103      	bne.n	906c <_Z41__static_initialization_and_destruction_0ii+0x20>
SDClass SD;
    9064:	4b04      	ldr	r3, [pc, #16]	; (9078 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    9066:	0018      	movs	r0, r3
    9068:	f7ff ffd8 	bl	901c <_ZN5SDLib7SDClassC1Ev>
};
    906c:	46c0      	nop			; (mov r8, r8)
    906e:	46bd      	mov	sp, r7
    9070:	b002      	add	sp, #8
    9072:	bd80      	pop	{r7, pc}
    9074:	0000ffff 	.word	0x0000ffff
    9078:	200008f4 	.word	0x200008f4

0000907c <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
    907c:	b580      	push	{r7, lr}
    907e:	af00      	add	r7, sp, #0
    9080:	4b03      	ldr	r3, [pc, #12]	; (9090 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x14>)
    9082:	0019      	movs	r1, r3
    9084:	2001      	movs	r0, #1
    9086:	f7ff ffe1 	bl	904c <_Z41__static_initialization_and_destruction_0ii>
    908a:	46bd      	mov	sp, r7
    908c:	bd80      	pop	{r7, pc}
    908e:	46c0      	nop			; (mov r8, r8)
    9090:	0000ffff 	.word	0x0000ffff

00009094 <_ZNK7Sd2Card4typeEv>:
  uint8_t setSckRate(uint8_t sckRateID);
#ifdef USE_SPI_LIB
  uint8_t setSpiClock(uint32_t clock);
#endif
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t type(void) const {return type_;}
    9094:	b580      	push	{r7, lr}
    9096:	b082      	sub	sp, #8
    9098:	af00      	add	r7, sp, #0
    909a:	6078      	str	r0, [r7, #4]
    909c:	687b      	ldr	r3, [r7, #4]
    909e:	7b1b      	ldrb	r3, [r3, #12]
    90a0:	0018      	movs	r0, r3
    90a2:	46bd      	mov	sp, r7
    90a4:	b002      	add	sp, #8
    90a6:	bd80      	pop	{r7, pc}

000090a8 <_ZN7Sd2Card8cardAcmdEhm>:
  uint16_t offset_;
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    90a8:	b580      	push	{r7, lr}
    90aa:	b084      	sub	sp, #16
    90ac:	af00      	add	r7, sp, #0
    90ae:	60f8      	str	r0, [r7, #12]
    90b0:	607a      	str	r2, [r7, #4]
    90b2:	230b      	movs	r3, #11
    90b4:	18fb      	adds	r3, r7, r3
    90b6:	1c0a      	adds	r2, r1, #0
    90b8:	701a      	strb	r2, [r3, #0]
    cardCommand(CMD55, 0);
    90ba:	68fb      	ldr	r3, [r7, #12]
    90bc:	2200      	movs	r2, #0
    90be:	2137      	movs	r1, #55	; 0x37
    90c0:	0018      	movs	r0, r3
    90c2:	f000 f899 	bl	91f8 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    90c6:	687a      	ldr	r2, [r7, #4]
    90c8:	230b      	movs	r3, #11
    90ca:	18fb      	adds	r3, r7, r3
    90cc:	7819      	ldrb	r1, [r3, #0]
    90ce:	68fb      	ldr	r3, [r7, #12]
    90d0:	0018      	movs	r0, r3
    90d2:	f000 f891 	bl	91f8 <_ZN7Sd2Card11cardCommandEhm>
    90d6:	0003      	movs	r3, r0
  }
    90d8:	0018      	movs	r0, r3
    90da:	46bd      	mov	sp, r7
    90dc:	b004      	add	sp, #16
    90de:	bd80      	pop	{r7, pc}

000090e0 <_ZN7Sd2Card5errorEh>:
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    90e0:	b580      	push	{r7, lr}
    90e2:	b082      	sub	sp, #8
    90e4:	af00      	add	r7, sp, #0
    90e6:	6078      	str	r0, [r7, #4]
    90e8:	000a      	movs	r2, r1
    90ea:	1cfb      	adds	r3, r7, #3
    90ec:	701a      	strb	r2, [r3, #0]
    90ee:	687b      	ldr	r3, [r7, #4]
    90f0:	1cfa      	adds	r2, r7, #3
    90f2:	7812      	ldrb	r2, [r2, #0]
    90f4:	715a      	strb	r2, [r3, #5]
    90f6:	46c0      	nop			; (mov r8, r8)
    90f8:	46bd      	mov	sp, r7
    90fa:	b002      	add	sp, #8
    90fc:	bd80      	pop	{r7, pc}

000090fe <_ZN7Sd2Card4typeEh>:
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    90fe:	b580      	push	{r7, lr}
    9100:	b082      	sub	sp, #8
    9102:	af00      	add	r7, sp, #0
    9104:	6078      	str	r0, [r7, #4]
    9106:	000a      	movs	r2, r1
    9108:	1cfb      	adds	r3, r7, #3
    910a:	701a      	strb	r2, [r3, #0]
    910c:	687b      	ldr	r3, [r7, #4]
    910e:	1cfa      	adds	r2, r7, #3
    9110:	7812      	ldrb	r2, [r2, #0]
    9112:	731a      	strb	r2, [r3, #12]
    9114:	46c0      	nop			; (mov r8, r8)
    9116:	46bd      	mov	sp, r7
    9118:	b002      	add	sp, #8
    911a:	bd80      	pop	{r7, pc}

0000911c <_ZN11SPISettingsC1Ev>:
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }
    911c:	b580      	push	{r7, lr}
    911e:	b086      	sub	sp, #24
    9120:	af00      	add	r7, sp, #0
    9122:	6078      	str	r0, [r7, #4]
    9124:	687b      	ldr	r3, [r7, #4]
    9126:	617b      	str	r3, [r7, #20]
    9128:	4b20      	ldr	r3, [pc, #128]	; (91ac <_ZN11SPISettingsC1Ev+0x90>)
    912a:	613b      	str	r3, [r7, #16]
    912c:	230f      	movs	r3, #15
    912e:	18fb      	adds	r3, r7, r3
    9130:	2201      	movs	r2, #1
    9132:	701a      	strb	r2, [r3, #0]
    9134:	230e      	movs	r3, #14
    9136:	18fb      	adds	r3, r7, r3
    9138:	2202      	movs	r2, #2
    913a:	701a      	strb	r2, [r3, #0]
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    913c:	693b      	ldr	r3, [r7, #16]
    913e:	4a1c      	ldr	r2, [pc, #112]	; (91b0 <_ZN11SPISettingsC1Ev+0x94>)
    9140:	4293      	cmp	r3, r2
    9142:	d900      	bls.n	9146 <_ZN11SPISettingsC1Ev+0x2a>
    9144:	4b1a      	ldr	r3, [pc, #104]	; (91b0 <_ZN11SPISettingsC1Ev+0x94>)
    9146:	697a      	ldr	r2, [r7, #20]
    9148:	6013      	str	r3, [r2, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    914a:	230f      	movs	r3, #15
    914c:	18fb      	adds	r3, r7, r3
    914e:	781b      	ldrb	r3, [r3, #0]
    9150:	2b01      	cmp	r3, #1
    9152:	d101      	bne.n	9158 <_ZN11SPISettingsC1Ev+0x3c>
    9154:	2200      	movs	r2, #0
    9156:	e000      	b.n	915a <_ZN11SPISettingsC1Ev+0x3e>
    9158:	2201      	movs	r2, #1
    915a:	697b      	ldr	r3, [r7, #20]
    915c:	715a      	strb	r2, [r3, #5]
    switch (dataMode)
    915e:	230e      	movs	r3, #14
    9160:	18fb      	adds	r3, r7, r3
    9162:	781b      	ldrb	r3, [r3, #0]
    9164:	2b01      	cmp	r3, #1
    9166:	d014      	beq.n	9192 <_ZN11SPISettingsC1Ev+0x76>
    9168:	dc02      	bgt.n	9170 <_ZN11SPISettingsC1Ev+0x54>
    916a:	2b00      	cmp	r3, #0
    916c:	d009      	beq.n	9182 <_ZN11SPISettingsC1Ev+0x66>
    916e:	e014      	b.n	919a <_ZN11SPISettingsC1Ev+0x7e>
    9170:	2b02      	cmp	r3, #2
    9172:	d002      	beq.n	917a <_ZN11SPISettingsC1Ev+0x5e>
    9174:	2b03      	cmp	r3, #3
    9176:	d008      	beq.n	918a <_ZN11SPISettingsC1Ev+0x6e>
    9178:	e00f      	b.n	919a <_ZN11SPISettingsC1Ev+0x7e>
        this->dataMode = SERCOM_SPI_MODE_0; break;
    917a:	697b      	ldr	r3, [r7, #20]
    917c:	2200      	movs	r2, #0
    917e:	711a      	strb	r2, [r3, #4]
    9180:	e00e      	b.n	91a0 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_1; break;
    9182:	697b      	ldr	r3, [r7, #20]
    9184:	2201      	movs	r2, #1
    9186:	711a      	strb	r2, [r3, #4]
    9188:	e00a      	b.n	91a0 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_2; break;
    918a:	697b      	ldr	r3, [r7, #20]
    918c:	2202      	movs	r2, #2
    918e:	711a      	strb	r2, [r3, #4]
    9190:	e006      	b.n	91a0 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_3; break;
    9192:	697b      	ldr	r3, [r7, #20]
    9194:	2203      	movs	r2, #3
    9196:	711a      	strb	r2, [r3, #4]
    9198:	e002      	b.n	91a0 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_0; break;
    919a:	697b      	ldr	r3, [r7, #20]
    919c:	2200      	movs	r2, #0
    919e:	711a      	strb	r2, [r3, #4]
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }
    91a0:	687b      	ldr	r3, [r7, #4]
    91a2:	0018      	movs	r0, r3
    91a4:	46bd      	mov	sp, r7
    91a6:	b006      	add	sp, #24
    91a8:	bd80      	pop	{r7, pc}
    91aa:	46c0      	nop			; (mov r8, r8)
    91ac:	003d0900 	.word	0x003d0900
    91b0:	00b71b00 	.word	0x00b71b00

000091b4 <_ZL7spiSendh>:
#include <SPI.h>
static SPISettings settings;
#endif
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
    91b4:	b580      	push	{r7, lr}
    91b6:	b082      	sub	sp, #8
    91b8:	af00      	add	r7, sp, #0
    91ba:	0002      	movs	r2, r0
    91bc:	1dfb      	adds	r3, r7, #7
    91be:	701a      	strb	r2, [r3, #0]
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SDCARD_SPI.transfer(b);
    91c0:	1dfb      	adds	r3, r7, #7
    91c2:	781a      	ldrb	r2, [r3, #0]
    91c4:	4b04      	ldr	r3, [pc, #16]	; (91d8 <_ZL7spiSendh+0x24>)
    91c6:	0011      	movs	r1, r2
    91c8:	0018      	movs	r0, r3
    91ca:	f002 fb8f 	bl	b8ec <_ZN8SPIClass8transferEh>
#endif
}
    91ce:	46c0      	nop			; (mov r8, r8)
    91d0:	46bd      	mov	sp, r7
    91d2:	b002      	add	sp, #8
    91d4:	bd80      	pop	{r7, pc}
    91d6:	46c0      	nop			; (mov r8, r8)
    91d8:	20000b7c 	.word	0x20000b7c

000091dc <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
    91dc:	b580      	push	{r7, lr}
    91de:	af00      	add	r7, sp, #0
#ifndef USE_SPI_LIB
  spiSend(0XFF);
  return SPDR;
#else
  return SDCARD_SPI.transfer(0xFF);
    91e0:	4b04      	ldr	r3, [pc, #16]	; (91f4 <_ZL6spiRecv+0x18>)
    91e2:	21ff      	movs	r1, #255	; 0xff
    91e4:	0018      	movs	r0, r3
    91e6:	f002 fb81 	bl	b8ec <_ZN8SPIClass8transferEh>
    91ea:	0003      	movs	r3, r0
#endif
}
    91ec:	0018      	movs	r0, r3
    91ee:	46bd      	mov	sp, r7
    91f0:	bd80      	pop	{r7, pc}
    91f2:	46c0      	nop			; (mov r8, r8)
    91f4:	20000b7c 	.word	0x20000b7c

000091f8 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    91f8:	b580      	push	{r7, lr}
    91fa:	b086      	sub	sp, #24
    91fc:	af00      	add	r7, sp, #0
    91fe:	60f8      	str	r0, [r7, #12]
    9200:	607a      	str	r2, [r7, #4]
    9202:	230b      	movs	r3, #11
    9204:	18fb      	adds	r3, r7, r3
    9206:	1c0a      	adds	r2, r1, #0
    9208:	701a      	strb	r2, [r3, #0]
  // end read if in partialBlockRead mode
  readEnd();
    920a:	68fb      	ldr	r3, [r7, #12]
    920c:	0018      	movs	r0, r3
    920e:	f000 fac9 	bl	97a4 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
    9212:	68fb      	ldr	r3, [r7, #12]
    9214:	0018      	movs	r0, r3
    9216:	f000 f88f 	bl	9338 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    921a:	2396      	movs	r3, #150	; 0x96
    921c:	005a      	lsls	r2, r3, #1
    921e:	68fb      	ldr	r3, [r7, #12]
    9220:	0011      	movs	r1, r2
    9222:	0018      	movs	r0, r3
    9224:	f000 fb80 	bl	9928 <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
    9228:	230b      	movs	r3, #11
    922a:	18fb      	adds	r3, r7, r3
    922c:	781b      	ldrb	r3, [r3, #0]
    922e:	2240      	movs	r2, #64	; 0x40
    9230:	4313      	orrs	r3, r2
    9232:	b2db      	uxtb	r3, r3
    9234:	0018      	movs	r0, r3
    9236:	f7ff ffbd 	bl	91b4 <_ZL7spiSendh>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    923a:	2317      	movs	r3, #23
    923c:	18fb      	adds	r3, r7, r3
    923e:	2218      	movs	r2, #24
    9240:	701a      	strb	r2, [r3, #0]
    9242:	2317      	movs	r3, #23
    9244:	18fb      	adds	r3, r7, r3
    9246:	781b      	ldrb	r3, [r3, #0]
    9248:	2b7f      	cmp	r3, #127	; 0x7f
    924a:	d813      	bhi.n	9274 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    924c:	2317      	movs	r3, #23
    924e:	18fb      	adds	r3, r7, r3
    9250:	781b      	ldrb	r3, [r3, #0]
    9252:	b25b      	sxtb	r3, r3
    9254:	687a      	ldr	r2, [r7, #4]
    9256:	40da      	lsrs	r2, r3
    9258:	0013      	movs	r3, r2
    925a:	b2db      	uxtb	r3, r3
    925c:	0018      	movs	r0, r3
    925e:	f7ff ffa9 	bl	91b4 <_ZL7spiSendh>
    9262:	2317      	movs	r3, #23
    9264:	18fb      	adds	r3, r7, r3
    9266:	781b      	ldrb	r3, [r3, #0]
    9268:	3b08      	subs	r3, #8
    926a:	b2da      	uxtb	r2, r3
    926c:	2317      	movs	r3, #23
    926e:	18fb      	adds	r3, r7, r3
    9270:	701a      	strb	r2, [r3, #0]
    9272:	e7e6      	b.n	9242 <_ZN7Sd2Card11cardCommandEhm+0x4a>

  // send CRC
  uint8_t crc = 0XFF;
    9274:	2316      	movs	r3, #22
    9276:	18fb      	adds	r3, r7, r3
    9278:	22ff      	movs	r2, #255	; 0xff
    927a:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    927c:	230b      	movs	r3, #11
    927e:	18fb      	adds	r3, r7, r3
    9280:	781b      	ldrb	r3, [r3, #0]
    9282:	2b00      	cmp	r3, #0
    9284:	d103      	bne.n	928e <_ZN7Sd2Card11cardCommandEhm+0x96>
    9286:	2316      	movs	r3, #22
    9288:	18fb      	adds	r3, r7, r3
    928a:	2295      	movs	r2, #149	; 0x95
    928c:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    928e:	230b      	movs	r3, #11
    9290:	18fb      	adds	r3, r7, r3
    9292:	781b      	ldrb	r3, [r3, #0]
    9294:	2b08      	cmp	r3, #8
    9296:	d103      	bne.n	92a0 <_ZN7Sd2Card11cardCommandEhm+0xa8>
    9298:	2316      	movs	r3, #22
    929a:	18fb      	adds	r3, r7, r3
    929c:	2287      	movs	r2, #135	; 0x87
    929e:	701a      	strb	r2, [r3, #0]
  spiSend(crc);
    92a0:	2316      	movs	r3, #22
    92a2:	18fb      	adds	r3, r7, r3
    92a4:	781b      	ldrb	r3, [r3, #0]
    92a6:	0018      	movs	r0, r3
    92a8:	f7ff ff84 	bl	91b4 <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    92ac:	2315      	movs	r3, #21
    92ae:	18fb      	adds	r3, r7, r3
    92b0:	2200      	movs	r2, #0
    92b2:	701a      	strb	r2, [r3, #0]
    92b4:	f7ff ff92 	bl	91dc <_ZL6spiRecv>
    92b8:	0003      	movs	r3, r0
    92ba:	001a      	movs	r2, r3
    92bc:	68fb      	ldr	r3, [r7, #12]
    92be:	72da      	strb	r2, [r3, #11]
    92c0:	68fb      	ldr	r3, [r7, #12]
    92c2:	7adb      	ldrb	r3, [r3, #11]
    92c4:	b25b      	sxtb	r3, r3
    92c6:	2b00      	cmp	r3, #0
    92c8:	da06      	bge.n	92d8 <_ZN7Sd2Card11cardCommandEhm+0xe0>
    92ca:	2315      	movs	r3, #21
    92cc:	18fb      	adds	r3, r7, r3
    92ce:	781b      	ldrb	r3, [r3, #0]
    92d0:	2bff      	cmp	r3, #255	; 0xff
    92d2:	d001      	beq.n	92d8 <_ZN7Sd2Card11cardCommandEhm+0xe0>
    92d4:	2301      	movs	r3, #1
    92d6:	e000      	b.n	92da <_ZN7Sd2Card11cardCommandEhm+0xe2>
    92d8:	2300      	movs	r3, #0
    92da:	2b00      	cmp	r3, #0
    92dc:	d007      	beq.n	92ee <_ZN7Sd2Card11cardCommandEhm+0xf6>
    92de:	2315      	movs	r3, #21
    92e0:	18fb      	adds	r3, r7, r3
    92e2:	781a      	ldrb	r2, [r3, #0]
    92e4:	2315      	movs	r3, #21
    92e6:	18fb      	adds	r3, r7, r3
    92e8:	3201      	adds	r2, #1
    92ea:	701a      	strb	r2, [r3, #0]
    92ec:	e7e2      	b.n	92b4 <_ZN7Sd2Card11cardCommandEhm+0xbc>
    ;
  return status_;
    92ee:	68fb      	ldr	r3, [r7, #12]
    92f0:	7adb      	ldrb	r3, [r3, #11]
}
    92f2:	0018      	movs	r0, r3
    92f4:	46bd      	mov	sp, r7
    92f6:	b006      	add	sp, #24
    92f8:	bd80      	pop	{r7, pc}
	...

000092fc <_ZN7Sd2Card14chipSelectHighEv>:
  }
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
    92fc:	b580      	push	{r7, lr}
    92fe:	b082      	sub	sp, #8
    9300:	af00      	add	r7, sp, #0
    9302:	6078      	str	r0, [r7, #4]
  digitalWrite(chipSelectPin_, HIGH);
    9304:	687b      	ldr	r3, [r7, #4]
    9306:	791b      	ldrb	r3, [r3, #4]
    9308:	2101      	movs	r1, #1
    930a:	0018      	movs	r0, r3
    930c:	f7fd fbd4 	bl	6ab8 <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    9310:	4b07      	ldr	r3, [pc, #28]	; (9330 <_ZN7Sd2Card14chipSelectHighEv+0x34>)
    9312:	781b      	ldrb	r3, [r3, #0]
    9314:	2b00      	cmp	r3, #0
    9316:	d006      	beq.n	9326 <_ZN7Sd2Card14chipSelectHighEv+0x2a>
    chip_select_asserted = 0;
    9318:	4b05      	ldr	r3, [pc, #20]	; (9330 <_ZN7Sd2Card14chipSelectHighEv+0x34>)
    931a:	2200      	movs	r2, #0
    931c:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.endTransaction();
    931e:	4b05      	ldr	r3, [pc, #20]	; (9334 <_ZN7Sd2Card14chipSelectHighEv+0x38>)
    9320:	0018      	movs	r0, r3
    9322:	f002 fabd 	bl	b8a0 <_ZN8SPIClass14endTransactionEv>
  }
#endif
}
    9326:	46c0      	nop			; (mov r8, r8)
    9328:	46bd      	mov	sp, r7
    932a:	b002      	add	sp, #8
    932c:	bd80      	pop	{r7, pc}
    932e:	46c0      	nop			; (mov r8, r8)
    9330:	20000960 	.word	0x20000960
    9334:	20000b7c 	.word	0x20000b7c

00009338 <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    9338:	b580      	push	{r7, lr}
    933a:	b082      	sub	sp, #8
    933c:	af00      	add	r7, sp, #0
    933e:	6078      	str	r0, [r7, #4]
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    9340:	4b0b      	ldr	r3, [pc, #44]	; (9370 <_ZN7Sd2Card13chipSelectLowEv+0x38>)
    9342:	781b      	ldrb	r3, [r3, #0]
    9344:	2b00      	cmp	r3, #0
    9346:	d108      	bne.n	935a <_ZN7Sd2Card13chipSelectLowEv+0x22>
    chip_select_asserted = 1;
    9348:	4b09      	ldr	r3, [pc, #36]	; (9370 <_ZN7Sd2Card13chipSelectLowEv+0x38>)
    934a:	2201      	movs	r2, #1
    934c:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.beginTransaction(settings);
    934e:	4b09      	ldr	r3, [pc, #36]	; (9374 <_ZN7Sd2Card13chipSelectLowEv+0x3c>)
    9350:	4809      	ldr	r0, [pc, #36]	; (9378 <_ZN7Sd2Card13chipSelectLowEv+0x40>)
    9352:	6819      	ldr	r1, [r3, #0]
    9354:	685a      	ldr	r2, [r3, #4]
    9356:	f002 fa6d 	bl	b834 <_ZN8SPIClass16beginTransactionE11SPISettings>
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    935a:	687b      	ldr	r3, [r7, #4]
    935c:	791b      	ldrb	r3, [r3, #4]
    935e:	2100      	movs	r1, #0
    9360:	0018      	movs	r0, r3
    9362:	f7fd fba9 	bl	6ab8 <digitalWrite>
}
    9366:	46c0      	nop			; (mov r8, r8)
    9368:	46bd      	mov	sp, r7
    936a:	b002      	add	sp, #8
    936c:	bd80      	pop	{r7, pc}
    936e:	46c0      	nop			; (mov r8, r8)
    9370:	20000960 	.word	0x20000960
    9374:	20000958 	.word	0x20000958
    9378:	20000b7c 	.word	0x20000b7c

0000937c <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    937c:	b580      	push	{r7, lr}
    937e:	b08a      	sub	sp, #40	; 0x28
    9380:	af00      	add	r7, sp, #0
    9382:	6078      	str	r0, [r7, #4]
    9384:	0008      	movs	r0, r1
    9386:	0011      	movs	r1, r2
    9388:	1cfb      	adds	r3, r7, #3
    938a:	1c02      	adds	r2, r0, #0
    938c:	701a      	strb	r2, [r3, #0]
    938e:	1cbb      	adds	r3, r7, #2
    9390:	1c0a      	adds	r2, r1, #0
    9392:	701a      	strb	r2, [r3, #0]
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    9394:	687b      	ldr	r3, [r7, #4]
    9396:	2200      	movs	r2, #0
    9398:	731a      	strb	r2, [r3, #12]
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	7b1a      	ldrb	r2, [r3, #12]
    939e:	687b      	ldr	r3, [r7, #4]
    93a0:	729a      	strb	r2, [r3, #10]
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	7a9a      	ldrb	r2, [r3, #10]
    93a6:	687b      	ldr	r3, [r7, #4]
    93a8:	719a      	strb	r2, [r3, #6]
    93aa:	687b      	ldr	r3, [r7, #4]
    93ac:	799a      	ldrb	r2, [r3, #6]
    93ae:	687b      	ldr	r3, [r7, #4]
    93b0:	715a      	strb	r2, [r3, #5]
  chipSelectPin_ = chipSelectPin;
    93b2:	687b      	ldr	r3, [r7, #4]
    93b4:	1cba      	adds	r2, r7, #2
    93b6:	7812      	ldrb	r2, [r2, #0]
    93b8:	711a      	strb	r2, [r3, #4]
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
    93ba:	f7f9 fd2d 	bl	2e18 <millis>
    93be:	0003      	movs	r3, r0
    93c0:	623b      	str	r3, [r7, #32]
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    93c2:	687b      	ldr	r3, [r7, #4]
    93c4:	791b      	ldrb	r3, [r3, #4]
    93c6:	2101      	movs	r1, #1
    93c8:	0018      	movs	r0, r3
    93ca:	f7fd fa4b 	bl	6864 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    93ce:	687b      	ldr	r3, [r7, #4]
    93d0:	791b      	ldrb	r3, [r3, #4]
    93d2:	2101      	movs	r1, #1
    93d4:	0018      	movs	r0, r3
    93d6:	f7fd fb6f 	bl	6ab8 <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SDCARD_SPI.begin();
    93da:	4b8c      	ldr	r3, [pc, #560]	; (960c <_ZN7Sd2Card4initEhh+0x290>)
    93dc:	0018      	movs	r0, r3
    93de:	f002 f999 	bl	b714 <_ZN8SPIClass5beginEv>
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    93e2:	498b      	ldr	r1, [pc, #556]	; (9610 <_ZN7Sd2Card4initEhh+0x294>)
    93e4:	230c      	movs	r3, #12
    93e6:	18f8      	adds	r0, r7, r3
    93e8:	2302      	movs	r3, #2
    93ea:	2201      	movs	r2, #1
    93ec:	f7fe f938 	bl	7660 <_ZN11SPISettingsC1Em8BitOrderh>
    93f0:	4b88      	ldr	r3, [pc, #544]	; (9614 <_ZN7Sd2Card4initEhh+0x298>)
    93f2:	220c      	movs	r2, #12
    93f4:	18ba      	adds	r2, r7, r2
    93f6:	6811      	ldr	r1, [r2, #0]
    93f8:	6019      	str	r1, [r3, #0]
    93fa:	8892      	ldrh	r2, [r2, #4]
    93fc:	809a      	strh	r2, [r3, #4]
#endif // USE_SPI_LIB
#endif // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
#ifdef USE_SPI_LIB
  SDCARD_SPI.beginTransaction(settings);
    93fe:	4b85      	ldr	r3, [pc, #532]	; (9614 <_ZN7Sd2Card4initEhh+0x298>)
    9400:	4882      	ldr	r0, [pc, #520]	; (960c <_ZN7Sd2Card4initEhh+0x290>)
    9402:	6819      	ldr	r1, [r3, #0]
    9404:	685a      	ldr	r2, [r3, #4]
    9406:	f002 fa15 	bl	b834 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    940a:	2327      	movs	r3, #39	; 0x27
    940c:	18fb      	adds	r3, r7, r3
    940e:	2200      	movs	r2, #0
    9410:	701a      	strb	r2, [r3, #0]
    9412:	2327      	movs	r3, #39	; 0x27
    9414:	18fb      	adds	r3, r7, r3
    9416:	781b      	ldrb	r3, [r3, #0]
    9418:	2b09      	cmp	r3, #9
    941a:	dc0a      	bgt.n	9432 <_ZN7Sd2Card4initEhh+0xb6>
    941c:	20ff      	movs	r0, #255	; 0xff
    941e:	f7ff fec9 	bl	91b4 <_ZL7spiSendh>
    9422:	2327      	movs	r3, #39	; 0x27
    9424:	18fb      	adds	r3, r7, r3
    9426:	781a      	ldrb	r2, [r3, #0]
    9428:	2327      	movs	r3, #39	; 0x27
    942a:	18fb      	adds	r3, r7, r3
    942c:	3201      	adds	r2, #1
    942e:	701a      	strb	r2, [r3, #0]
    9430:	e7ef      	b.n	9412 <_ZN7Sd2Card4initEhh+0x96>
#ifdef USE_SPI_LIB
  SDCARD_SPI.endTransaction();
    9432:	4b76      	ldr	r3, [pc, #472]	; (960c <_ZN7Sd2Card4initEhh+0x290>)
    9434:	0018      	movs	r0, r3
    9436:	f002 fa33 	bl	b8a0 <_ZN8SPIClass14endTransactionEv>
#endif

  chipSelectLow();
    943a:	687b      	ldr	r3, [r7, #4]
    943c:	0018      	movs	r0, r3
    943e:	f7ff ff7b 	bl	9338 <_ZN7Sd2Card13chipSelectLowEv>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    9442:	687b      	ldr	r3, [r7, #4]
    9444:	2200      	movs	r2, #0
    9446:	2100      	movs	r1, #0
    9448:	0018      	movs	r0, r3
    944a:	f7ff fed5 	bl	91f8 <_ZN7Sd2Card11cardCommandEhm>
    944e:	0003      	movs	r3, r0
    9450:	001a      	movs	r2, r3
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	72da      	strb	r2, [r3, #11]
    9456:	687b      	ldr	r3, [r7, #4]
    9458:	7adb      	ldrb	r3, [r3, #11]
    945a:	3b01      	subs	r3, #1
    945c:	1e5a      	subs	r2, r3, #1
    945e:	4193      	sbcs	r3, r2
    9460:	b2db      	uxtb	r3, r3
    9462:	2b00      	cmp	r3, #0
    9464:	d010      	beq.n	9488 <_ZN7Sd2Card4initEhh+0x10c>
    unsigned int d = millis() - t0;
    9466:	f7f9 fcd7 	bl	2e18 <millis>
    946a:	0002      	movs	r2, r0
    946c:	6a3b      	ldr	r3, [r7, #32]
    946e:	1ad3      	subs	r3, r2, r3
    9470:	61fb      	str	r3, [r7, #28]
    if (d > SD_INIT_TIMEOUT) {
    9472:	69fa      	ldr	r2, [r7, #28]
    9474:	23fa      	movs	r3, #250	; 0xfa
    9476:	00db      	lsls	r3, r3, #3
    9478:	429a      	cmp	r2, r3
    947a:	d9e2      	bls.n	9442 <_ZN7Sd2Card4initEhh+0xc6>
      error(SD_CARD_ERROR_CMD0);
    947c:	687b      	ldr	r3, [r7, #4]
    947e:	2101      	movs	r1, #1
    9480:	0018      	movs	r0, r3
    9482:	f7ff fe2d 	bl	90e0 <_ZN7Sd2Card5errorEh>
      goto fail;
    9486:	e0b7      	b.n	95f8 <_ZN7Sd2Card4initEhh+0x27c>
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    9488:	23d5      	movs	r3, #213	; 0xd5
    948a:	005a      	lsls	r2, r3, #1
    948c:	687b      	ldr	r3, [r7, #4]
    948e:	2108      	movs	r1, #8
    9490:	0018      	movs	r0, r3
    9492:	f7ff feb1 	bl	91f8 <_ZN7Sd2Card11cardCommandEhm>
    9496:	0003      	movs	r3, r0
    9498:	001a      	movs	r2, r3
    949a:	2304      	movs	r3, #4
    949c:	4013      	ands	r3, r2
    949e:	1e5a      	subs	r2, r3, #1
    94a0:	4193      	sbcs	r3, r2
    94a2:	b2db      	uxtb	r3, r3
    94a4:	2b00      	cmp	r3, #0
    94a6:	d005      	beq.n	94b4 <_ZN7Sd2Card4initEhh+0x138>
    type(SD_CARD_TYPE_SD1);
    94a8:	687b      	ldr	r3, [r7, #4]
    94aa:	2101      	movs	r1, #1
    94ac:	0018      	movs	r0, r3
    94ae:	f7ff fe26 	bl	90fe <_ZN7Sd2Card4typeEh>
    94b2:	e025      	b.n	9500 <_ZN7Sd2Card4initEhh+0x184>
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    94b4:	2326      	movs	r3, #38	; 0x26
    94b6:	18fb      	adds	r3, r7, r3
    94b8:	2200      	movs	r2, #0
    94ba:	701a      	strb	r2, [r3, #0]
    94bc:	2326      	movs	r3, #38	; 0x26
    94be:	18fb      	adds	r3, r7, r3
    94c0:	781b      	ldrb	r3, [r3, #0]
    94c2:	2b03      	cmp	r3, #3
    94c4:	dc0d      	bgt.n	94e2 <_ZN7Sd2Card4initEhh+0x166>
    94c6:	f7ff fe89 	bl	91dc <_ZL6spiRecv>
    94ca:	0003      	movs	r3, r0
    94cc:	001a      	movs	r2, r3
    94ce:	687b      	ldr	r3, [r7, #4]
    94d0:	72da      	strb	r2, [r3, #11]
    94d2:	2326      	movs	r3, #38	; 0x26
    94d4:	18fb      	adds	r3, r7, r3
    94d6:	781a      	ldrb	r2, [r3, #0]
    94d8:	2326      	movs	r3, #38	; 0x26
    94da:	18fb      	adds	r3, r7, r3
    94dc:	3201      	adds	r2, #1
    94de:	701a      	strb	r2, [r3, #0]
    94e0:	e7ec      	b.n	94bc <_ZN7Sd2Card4initEhh+0x140>
    if (status_ != 0XAA) {
    94e2:	687b      	ldr	r3, [r7, #4]
    94e4:	7adb      	ldrb	r3, [r3, #11]
    94e6:	2baa      	cmp	r3, #170	; 0xaa
    94e8:	d005      	beq.n	94f6 <_ZN7Sd2Card4initEhh+0x17a>
      error(SD_CARD_ERROR_CMD8);
    94ea:	687b      	ldr	r3, [r7, #4]
    94ec:	2102      	movs	r1, #2
    94ee:	0018      	movs	r0, r3
    94f0:	f7ff fdf6 	bl	90e0 <_ZN7Sd2Card5errorEh>
      goto fail;
    94f4:	e080      	b.n	95f8 <_ZN7Sd2Card4initEhh+0x27c>
    }
    type(SD_CARD_TYPE_SD2);
    94f6:	687b      	ldr	r3, [r7, #4]
    94f8:	2102      	movs	r1, #2
    94fa:	0018      	movs	r0, r3
    94fc:	f7ff fdff 	bl	90fe <_ZN7Sd2Card4typeEh>
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    9500:	687b      	ldr	r3, [r7, #4]
    9502:	0018      	movs	r0, r3
    9504:	f7ff fdc6 	bl	9094 <_ZNK7Sd2Card4typeEv>
    9508:	0003      	movs	r3, r0
    950a:	2b02      	cmp	r3, #2
    950c:	d102      	bne.n	9514 <_ZN7Sd2Card4initEhh+0x198>
    950e:	2380      	movs	r3, #128	; 0x80
    9510:	05db      	lsls	r3, r3, #23
    9512:	e000      	b.n	9516 <_ZN7Sd2Card4initEhh+0x19a>
    9514:	2300      	movs	r3, #0
    9516:	61bb      	str	r3, [r7, #24]

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    9518:	69ba      	ldr	r2, [r7, #24]
    951a:	687b      	ldr	r3, [r7, #4]
    951c:	2129      	movs	r1, #41	; 0x29
    951e:	0018      	movs	r0, r3
    9520:	f7ff fdc2 	bl	90a8 <_ZN7Sd2Card8cardAcmdEhm>
    9524:	0003      	movs	r3, r0
    9526:	001a      	movs	r2, r3
    9528:	687b      	ldr	r3, [r7, #4]
    952a:	72da      	strb	r2, [r3, #11]
    952c:	687b      	ldr	r3, [r7, #4]
    952e:	7adb      	ldrb	r3, [r3, #11]
    9530:	1e5a      	subs	r2, r3, #1
    9532:	4193      	sbcs	r3, r2
    9534:	b2db      	uxtb	r3, r3
    9536:	2b00      	cmp	r3, #0
    9538:	d010      	beq.n	955c <_ZN7Sd2Card4initEhh+0x1e0>
    // check for timeout
    unsigned int d = millis() - t0;
    953a:	f7f9 fc6d 	bl	2e18 <millis>
    953e:	0002      	movs	r2, r0
    9540:	6a3b      	ldr	r3, [r7, #32]
    9542:	1ad3      	subs	r3, r2, r3
    9544:	617b      	str	r3, [r7, #20]
    if (d > SD_INIT_TIMEOUT) {
    9546:	697a      	ldr	r2, [r7, #20]
    9548:	23fa      	movs	r3, #250	; 0xfa
    954a:	00db      	lsls	r3, r3, #3
    954c:	429a      	cmp	r2, r3
    954e:	d9e3      	bls.n	9518 <_ZN7Sd2Card4initEhh+0x19c>
      error(SD_CARD_ERROR_ACMD41);
    9550:	687b      	ldr	r3, [r7, #4]
    9552:	2108      	movs	r1, #8
    9554:	0018      	movs	r0, r3
    9556:	f7ff fdc3 	bl	90e0 <_ZN7Sd2Card5errorEh>
      goto fail;
    955a:	e04d      	b.n	95f8 <_ZN7Sd2Card4initEhh+0x27c>
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    955c:	687b      	ldr	r3, [r7, #4]
    955e:	0018      	movs	r0, r3
    9560:	f7ff fd98 	bl	9094 <_ZNK7Sd2Card4typeEv>
    9564:	0003      	movs	r3, r0
    9566:	3b02      	subs	r3, #2
    9568:	425a      	negs	r2, r3
    956a:	4153      	adcs	r3, r2
    956c:	b2db      	uxtb	r3, r3
    956e:	2b00      	cmp	r3, #0
    9570:	d035      	beq.n	95de <_ZN7Sd2Card4initEhh+0x262>
    if (cardCommand(CMD58, 0)) {
    9572:	687b      	ldr	r3, [r7, #4]
    9574:	2200      	movs	r2, #0
    9576:	213a      	movs	r1, #58	; 0x3a
    9578:	0018      	movs	r0, r3
    957a:	f7ff fe3d 	bl	91f8 <_ZN7Sd2Card11cardCommandEhm>
    957e:	0003      	movs	r3, r0
    9580:	1e5a      	subs	r2, r3, #1
    9582:	4193      	sbcs	r3, r2
    9584:	b2db      	uxtb	r3, r3
    9586:	2b00      	cmp	r3, #0
    9588:	d005      	beq.n	9596 <_ZN7Sd2Card4initEhh+0x21a>
      error(SD_CARD_ERROR_CMD58);
    958a:	687b      	ldr	r3, [r7, #4]
    958c:	2106      	movs	r1, #6
    958e:	0018      	movs	r0, r3
    9590:	f7ff fda6 	bl	90e0 <_ZN7Sd2Card5errorEh>
      goto fail;
    9594:	e030      	b.n	95f8 <_ZN7Sd2Card4initEhh+0x27c>
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    9596:	f7ff fe21 	bl	91dc <_ZL6spiRecv>
    959a:	0003      	movs	r3, r0
    959c:	001a      	movs	r2, r3
    959e:	23c0      	movs	r3, #192	; 0xc0
    95a0:	4013      	ands	r3, r2
    95a2:	3bc0      	subs	r3, #192	; 0xc0
    95a4:	425a      	negs	r2, r3
    95a6:	4153      	adcs	r3, r2
    95a8:	b2db      	uxtb	r3, r3
    95aa:	2b00      	cmp	r3, #0
    95ac:	d004      	beq.n	95b8 <_ZN7Sd2Card4initEhh+0x23c>
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	2103      	movs	r1, #3
    95b2:	0018      	movs	r0, r3
    95b4:	f7ff fda3 	bl	90fe <_ZN7Sd2Card4typeEh>
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    95b8:	2325      	movs	r3, #37	; 0x25
    95ba:	18fb      	adds	r3, r7, r3
    95bc:	2200      	movs	r2, #0
    95be:	701a      	strb	r2, [r3, #0]
    95c0:	2325      	movs	r3, #37	; 0x25
    95c2:	18fb      	adds	r3, r7, r3
    95c4:	781b      	ldrb	r3, [r3, #0]
    95c6:	2b02      	cmp	r3, #2
    95c8:	dc09      	bgt.n	95de <_ZN7Sd2Card4initEhh+0x262>
    95ca:	f7ff fe07 	bl	91dc <_ZL6spiRecv>
    95ce:	2325      	movs	r3, #37	; 0x25
    95d0:	18fb      	adds	r3, r7, r3
    95d2:	781a      	ldrb	r2, [r3, #0]
    95d4:	2325      	movs	r3, #37	; 0x25
    95d6:	18fb      	adds	r3, r7, r3
    95d8:	3201      	adds	r2, #1
    95da:	701a      	strb	r2, [r3, #0]
    95dc:	e7f0      	b.n	95c0 <_ZN7Sd2Card4initEhh+0x244>
  }
  chipSelectHigh();
    95de:	687b      	ldr	r3, [r7, #4]
    95e0:	0018      	movs	r0, r3
    95e2:	f7ff fe8b 	bl	92fc <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    95e6:	1cfb      	adds	r3, r7, #3
    95e8:	781a      	ldrb	r2, [r3, #0]
    95ea:	687b      	ldr	r3, [r7, #4]
    95ec:	0011      	movs	r1, r2
    95ee:	0018      	movs	r0, r3
    95f0:	f000 f900 	bl	97f4 <_ZN7Sd2Card10setSckRateEh>
    95f4:	0003      	movs	r3, r0
    95f6:	e004      	b.n	9602 <_ZN7Sd2Card4initEhh+0x286>
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    95f8:	687b      	ldr	r3, [r7, #4]
    95fa:	0018      	movs	r0, r3
    95fc:	f7ff fe7e 	bl	92fc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9600:	2300      	movs	r3, #0
}
    9602:	0018      	movs	r0, r3
    9604:	46bd      	mov	sp, r7
    9606:	b00a      	add	sp, #40	; 0x28
    9608:	bd80      	pop	{r7, pc}
    960a:	46c0      	nop			; (mov r8, r8)
    960c:	20000b7c 	.word	0x20000b7c
    9610:	0003d090 	.word	0x0003d090
    9614:	20000958 	.word	0x20000958

00009618 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    9618:	b580      	push	{r7, lr}
    961a:	b086      	sub	sp, #24
    961c:	af02      	add	r7, sp, #8
    961e:	60f8      	str	r0, [r7, #12]
    9620:	60b9      	str	r1, [r7, #8]
    9622:	607a      	str	r2, [r7, #4]
  return readData(block, 0, 512, dst);
    9624:	2380      	movs	r3, #128	; 0x80
    9626:	009a      	lsls	r2, r3, #2
    9628:	68b9      	ldr	r1, [r7, #8]
    962a:	68f8      	ldr	r0, [r7, #12]
    962c:	687b      	ldr	r3, [r7, #4]
    962e:	9300      	str	r3, [sp, #0]
    9630:	0013      	movs	r3, r2
    9632:	2200      	movs	r2, #0
    9634:	f000 f806 	bl	9644 <_ZN7Sd2Card8readDataEmttPh>
    9638:	0003      	movs	r3, r0
}
    963a:	0018      	movs	r0, r3
    963c:	46bd      	mov	sp, r7
    963e:	b004      	add	sp, #16
    9640:	bd80      	pop	{r7, pc}
	...

00009644 <_ZN7Sd2Card8readDataEmttPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    9644:	b590      	push	{r4, r7, lr}
    9646:	b087      	sub	sp, #28
    9648:	af00      	add	r7, sp, #0
    964a:	60f8      	str	r0, [r7, #12]
    964c:	60b9      	str	r1, [r7, #8]
    964e:	0019      	movs	r1, r3
    9650:	1dbb      	adds	r3, r7, #6
    9652:	801a      	strh	r2, [r3, #0]
    9654:	1d3b      	adds	r3, r7, #4
    9656:	1c0a      	adds	r2, r1, #0
    9658:	801a      	strh	r2, [r3, #0]
  if (count == 0) return true;
    965a:	1d3b      	adds	r3, r7, #4
    965c:	881b      	ldrh	r3, [r3, #0]
    965e:	2b00      	cmp	r3, #0
    9660:	d101      	bne.n	9666 <_ZN7Sd2Card8readDataEmttPh+0x22>
    9662:	2301      	movs	r3, #1
    9664:	e097      	b.n	9796 <_ZN7Sd2Card8readDataEmttPh+0x152>
  if ((count + offset) > 512) {
    9666:	1d3b      	adds	r3, r7, #4
    9668:	881a      	ldrh	r2, [r3, #0]
    966a:	1dbb      	adds	r3, r7, #6
    966c:	881b      	ldrh	r3, [r3, #0]
    966e:	18d2      	adds	r2, r2, r3
    9670:	2380      	movs	r3, #128	; 0x80
    9672:	009b      	lsls	r3, r3, #2
    9674:	429a      	cmp	r2, r3
    9676:	dd00      	ble.n	967a <_ZN7Sd2Card8readDataEmttPh+0x36>
    9678:	e085      	b.n	9786 <_ZN7Sd2Card8readDataEmttPh+0x142>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    967a:	68fb      	ldr	r3, [r7, #12]
    967c:	799b      	ldrb	r3, [r3, #6]
    967e:	2b00      	cmp	r3, #0
    9680:	d00a      	beq.n	9698 <_ZN7Sd2Card8readDataEmttPh+0x54>
    9682:	68fb      	ldr	r3, [r7, #12]
    9684:	681a      	ldr	r2, [r3, #0]
    9686:	68bb      	ldr	r3, [r7, #8]
    9688:	429a      	cmp	r2, r3
    968a:	d105      	bne.n	9698 <_ZN7Sd2Card8readDataEmttPh+0x54>
    968c:	1dbb      	adds	r3, r7, #6
    968e:	881b      	ldrh	r3, [r3, #0]
    9690:	68fa      	ldr	r2, [r7, #12]
    9692:	8912      	ldrh	r2, [r2, #8]
    9694:	4293      	cmp	r3, r2
    9696:	da32      	bge.n	96fe <_ZN7Sd2Card8readDataEmttPh+0xba>
    block_ = block;
    9698:	68fb      	ldr	r3, [r7, #12]
    969a:	68ba      	ldr	r2, [r7, #8]
    969c:	601a      	str	r2, [r3, #0]
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    969e:	68fb      	ldr	r3, [r7, #12]
    96a0:	0018      	movs	r0, r3
    96a2:	f7ff fcf7 	bl	9094 <_ZNK7Sd2Card4typeEv>
    96a6:	0003      	movs	r3, r0
    96a8:	3b03      	subs	r3, #3
    96aa:	1e5a      	subs	r2, r3, #1
    96ac:	4193      	sbcs	r3, r2
    96ae:	b2db      	uxtb	r3, r3
    96b0:	2b00      	cmp	r3, #0
    96b2:	d002      	beq.n	96ba <_ZN7Sd2Card8readDataEmttPh+0x76>
    96b4:	68bb      	ldr	r3, [r7, #8]
    96b6:	025b      	lsls	r3, r3, #9
    96b8:	60bb      	str	r3, [r7, #8]
    if (cardCommand(CMD17, block)) {
    96ba:	68ba      	ldr	r2, [r7, #8]
    96bc:	68fb      	ldr	r3, [r7, #12]
    96be:	2111      	movs	r1, #17
    96c0:	0018      	movs	r0, r3
    96c2:	f7ff fd99 	bl	91f8 <_ZN7Sd2Card11cardCommandEhm>
    96c6:	0003      	movs	r3, r0
    96c8:	1e5a      	subs	r2, r3, #1
    96ca:	4193      	sbcs	r3, r2
    96cc:	b2db      	uxtb	r3, r3
    96ce:	2b00      	cmp	r3, #0
    96d0:	d005      	beq.n	96de <_ZN7Sd2Card8readDataEmttPh+0x9a>
      error(SD_CARD_ERROR_CMD17);
    96d2:	68fb      	ldr	r3, [r7, #12]
    96d4:	2103      	movs	r1, #3
    96d6:	0018      	movs	r0, r3
    96d8:	f7ff fd02 	bl	90e0 <_ZN7Sd2Card5errorEh>
      goto fail;
    96dc:	e056      	b.n	978c <_ZN7Sd2Card8readDataEmttPh+0x148>
    }
    if (!waitStartBlock()) {
    96de:	68fb      	ldr	r3, [r7, #12]
    96e0:	0018      	movs	r0, r3
    96e2:	f000 f945 	bl	9970 <_ZN7Sd2Card14waitStartBlockEv>
    96e6:	0003      	movs	r3, r0
    96e8:	425a      	negs	r2, r3
    96ea:	4153      	adcs	r3, r2
    96ec:	b2db      	uxtb	r3, r3
    96ee:	2b00      	cmp	r3, #0
    96f0:	d14b      	bne.n	978a <_ZN7Sd2Card8readDataEmttPh+0x146>
      goto fail;
    }
    offset_ = 0;
    96f2:	68fb      	ldr	r3, [r7, #12]
    96f4:	2200      	movs	r2, #0
    96f6:	811a      	strh	r2, [r3, #8]
    inBlock_ = 1;
    96f8:	68fb      	ldr	r3, [r7, #12]
    96fa:	2201      	movs	r2, #1
    96fc:	719a      	strb	r2, [r3, #6]
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    96fe:	68fb      	ldr	r3, [r7, #12]
    9700:	891b      	ldrh	r3, [r3, #8]
    9702:	001a      	movs	r2, r3
    9704:	1dbb      	adds	r3, r7, #6
    9706:	881b      	ldrh	r3, [r3, #0]
    9708:	429a      	cmp	r2, r3
    970a:	da08      	bge.n	971e <_ZN7Sd2Card8readDataEmttPh+0xda>
    spiRec();
    970c:	f7ff fd66 	bl	91dc <_ZL6spiRecv>
  for (;offset_ < offset; offset_++) {
    9710:	68fb      	ldr	r3, [r7, #12]
    9712:	891b      	ldrh	r3, [r3, #8]
    9714:	3301      	adds	r3, #1
    9716:	b29a      	uxth	r2, r3
    9718:	68fb      	ldr	r3, [r7, #12]
    971a:	811a      	strh	r2, [r3, #8]
    971c:	e7ef      	b.n	96fe <_ZN7Sd2Card8readDataEmttPh+0xba>
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    971e:	2316      	movs	r3, #22
    9720:	18fb      	adds	r3, r7, r3
    9722:	2200      	movs	r2, #0
    9724:	801a      	strh	r2, [r3, #0]
    9726:	2316      	movs	r3, #22
    9728:	18fb      	adds	r3, r7, r3
    972a:	881a      	ldrh	r2, [r3, #0]
    972c:	1d3b      	adds	r3, r7, #4
    972e:	881b      	ldrh	r3, [r3, #0]
    9730:	429a      	cmp	r2, r3
    9732:	da10      	bge.n	9756 <_ZN7Sd2Card8readDataEmttPh+0x112>
    dst[i] = spiRec();
    9734:	2316      	movs	r3, #22
    9736:	18fb      	adds	r3, r7, r3
    9738:	881b      	ldrh	r3, [r3, #0]
    973a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    973c:	18d4      	adds	r4, r2, r3
    973e:	f7ff fd4d 	bl	91dc <_ZL6spiRecv>
    9742:	0003      	movs	r3, r0
    9744:	7023      	strb	r3, [r4, #0]
  for (uint16_t i = 0; i < count; i++) {
    9746:	2316      	movs	r3, #22
    9748:	18fb      	adds	r3, r7, r3
    974a:	881a      	ldrh	r2, [r3, #0]
    974c:	2316      	movs	r3, #22
    974e:	18fb      	adds	r3, r7, r3
    9750:	3201      	adds	r2, #1
    9752:	801a      	strh	r2, [r3, #0]
    9754:	e7e7      	b.n	9726 <_ZN7Sd2Card8readDataEmttPh+0xe2>
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    9756:	68fb      	ldr	r3, [r7, #12]
    9758:	891a      	ldrh	r2, [r3, #8]
    975a:	1d3b      	adds	r3, r7, #4
    975c:	881b      	ldrh	r3, [r3, #0]
    975e:	18d3      	adds	r3, r2, r3
    9760:	b29a      	uxth	r2, r3
    9762:	68fb      	ldr	r3, [r7, #12]
    9764:	811a      	strh	r2, [r3, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    9766:	68fb      	ldr	r3, [r7, #12]
    9768:	7a9b      	ldrb	r3, [r3, #10]
    976a:	2b00      	cmp	r3, #0
    976c:	d005      	beq.n	977a <_ZN7Sd2Card8readDataEmttPh+0x136>
    976e:	68fb      	ldr	r3, [r7, #12]
    9770:	891b      	ldrh	r3, [r3, #8]
    9772:	001a      	movs	r2, r3
    9774:	4b0a      	ldr	r3, [pc, #40]	; (97a0 <_ZN7Sd2Card8readDataEmttPh+0x15c>)
    9776:	429a      	cmp	r2, r3
    9778:	dd03      	ble.n	9782 <_ZN7Sd2Card8readDataEmttPh+0x13e>
    // read rest of data, checksum and set chip select high
    readEnd();
    977a:	68fb      	ldr	r3, [r7, #12]
    977c:	0018      	movs	r0, r3
    977e:	f000 f811 	bl	97a4 <_ZN7Sd2Card7readEndEv>
  }
  return true;
    9782:	2301      	movs	r3, #1
    9784:	e007      	b.n	9796 <_ZN7Sd2Card8readDataEmttPh+0x152>
    goto fail;
    9786:	46c0      	nop			; (mov r8, r8)
    9788:	e000      	b.n	978c <_ZN7Sd2Card8readDataEmttPh+0x148>
      goto fail;
    978a:	46c0      	nop			; (mov r8, r8)

 fail:
  chipSelectHigh();
    978c:	68fb      	ldr	r3, [r7, #12]
    978e:	0018      	movs	r0, r3
    9790:	f7ff fdb4 	bl	92fc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9794:	2300      	movs	r3, #0
}
    9796:	0018      	movs	r0, r3
    9798:	46bd      	mov	sp, r7
    979a:	b007      	add	sp, #28
    979c:	bd90      	pop	{r4, r7, pc}
    979e:	46c0      	nop			; (mov r8, r8)
    97a0:	000001ff 	.word	0x000001ff

000097a4 <_ZN7Sd2Card7readEndEv>:
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    97a4:	b580      	push	{r7, lr}
    97a6:	b082      	sub	sp, #8
    97a8:	af00      	add	r7, sp, #0
    97aa:	6078      	str	r0, [r7, #4]
  if (inBlock_) {
    97ac:	687b      	ldr	r3, [r7, #4]
    97ae:	799b      	ldrb	r3, [r3, #6]
    97b0:	2b00      	cmp	r3, #0
    97b2:	d019      	beq.n	97e8 <_ZN7Sd2Card7readEndEv+0x44>
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    97b4:	687b      	ldr	r3, [r7, #4]
    97b6:	891b      	ldrh	r3, [r3, #8]
    97b8:	1c5a      	adds	r2, r3, #1
    97ba:	b291      	uxth	r1, r2
    97bc:	687a      	ldr	r2, [r7, #4]
    97be:	8111      	strh	r1, [r2, #8]
    97c0:	001a      	movs	r2, r3
    97c2:	4b0b      	ldr	r3, [pc, #44]	; (97f0 <_ZN7Sd2Card7readEndEv+0x4c>)
    97c4:	0fd0      	lsrs	r0, r2, #31
    97c6:	17d9      	asrs	r1, r3, #31
    97c8:	4293      	cmp	r3, r2
    97ca:	4148      	adcs	r0, r1
    97cc:	0003      	movs	r3, r0
    97ce:	b2db      	uxtb	r3, r3
    97d0:	2b00      	cmp	r3, #0
    97d2:	d002      	beq.n	97da <_ZN7Sd2Card7readEndEv+0x36>
    97d4:	f7ff fd02 	bl	91dc <_ZL6spiRecv>
    97d8:	e7ec      	b.n	97b4 <_ZN7Sd2Card7readEndEv+0x10>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    97da:	687b      	ldr	r3, [r7, #4]
    97dc:	0018      	movs	r0, r3
    97de:	f7ff fd8d 	bl	92fc <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    97e2:	687b      	ldr	r3, [r7, #4]
    97e4:	2200      	movs	r2, #0
    97e6:	719a      	strb	r2, [r3, #6]
  }
}
    97e8:	46c0      	nop			; (mov r8, r8)
    97ea:	46bd      	mov	sp, r7
    97ec:	b002      	add	sp, #8
    97ee:	bd80      	pop	{r7, pc}
    97f0:	00000201 	.word	0x00000201

000097f4 <_ZN7Sd2Card10setSckRateEh>:
 * for \a scsRateID = 6.
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
    97f4:	b580      	push	{r7, lr}
    97f6:	b090      	sub	sp, #64	; 0x40
    97f8:	af00      	add	r7, sp, #0
    97fa:	6078      	str	r0, [r7, #4]
    97fc:	000a      	movs	r2, r1
    97fe:	1cfb      	adds	r3, r7, #3
    9800:	701a      	strb	r2, [r3, #0]
  if (sckRateID > 6) {
    9802:	1cfb      	adds	r3, r7, #3
    9804:	781b      	ldrb	r3, [r3, #0]
    9806:	2b06      	cmp	r3, #6
    9808:	dd06      	ble.n	9818 <_ZN7Sd2Card10setSckRateEh+0x24>
    error(SD_CARD_ERROR_SCK_RATE);
    980a:	687b      	ldr	r3, [r7, #4]
    980c:	2116      	movs	r1, #22
    980e:	0018      	movs	r0, r3
    9810:	f7ff fc66 	bl	90e0 <_ZN7Sd2Card5errorEh>
    return false;
    9814:	2300      	movs	r3, #0
    9816:	e071      	b.n	98fc <_ZN7Sd2Card10setSckRateEh+0x108>
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    9818:	1cfb      	adds	r3, r7, #3
    981a:	781b      	ldrb	r3, [r3, #0]
    981c:	2b05      	cmp	r3, #5
    981e:	d85e      	bhi.n	98de <_ZN7Sd2Card10setSckRateEh+0xea>
    9820:	009a      	lsls	r2, r3, #2
    9822:	4b38      	ldr	r3, [pc, #224]	; (9904 <_ZN7Sd2Card10setSckRateEh+0x110>)
    9824:	18d3      	adds	r3, r2, r3
    9826:	681b      	ldr	r3, [r3, #0]
    9828:	469f      	mov	pc, r3
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    982a:	4937      	ldr	r1, [pc, #220]	; (9908 <_ZN7Sd2Card10setSckRateEh+0x114>)
    982c:	2308      	movs	r3, #8
    982e:	18f8      	adds	r0, r7, r3
    9830:	2302      	movs	r3, #2
    9832:	2201      	movs	r2, #1
    9834:	f7fd ff14 	bl	7660 <_ZN11SPISettingsC1Em8BitOrderh>
    9838:	4b34      	ldr	r3, [pc, #208]	; (990c <_ZN7Sd2Card10setSckRateEh+0x118>)
    983a:	2208      	movs	r2, #8
    983c:	18ba      	adds	r2, r7, r2
    983e:	6811      	ldr	r1, [r2, #0]
    9840:	6019      	str	r1, [r3, #0]
    9842:	8892      	ldrh	r2, [r2, #4]
    9844:	809a      	strh	r2, [r3, #4]
    9846:	e058      	b.n	98fa <_ZN7Sd2Card10setSckRateEh+0x106>
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    9848:	4931      	ldr	r1, [pc, #196]	; (9910 <_ZN7Sd2Card10setSckRateEh+0x11c>)
    984a:	2310      	movs	r3, #16
    984c:	18f8      	adds	r0, r7, r3
    984e:	2302      	movs	r3, #2
    9850:	2201      	movs	r2, #1
    9852:	f7fd ff05 	bl	7660 <_ZN11SPISettingsC1Em8BitOrderh>
    9856:	4b2d      	ldr	r3, [pc, #180]	; (990c <_ZN7Sd2Card10setSckRateEh+0x118>)
    9858:	2210      	movs	r2, #16
    985a:	18ba      	adds	r2, r7, r2
    985c:	6811      	ldr	r1, [r2, #0]
    985e:	6019      	str	r1, [r3, #0]
    9860:	8892      	ldrh	r2, [r2, #4]
    9862:	809a      	strh	r2, [r3, #4]
    9864:	e049      	b.n	98fa <_ZN7Sd2Card10setSckRateEh+0x106>
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    9866:	492b      	ldr	r1, [pc, #172]	; (9914 <_ZN7Sd2Card10setSckRateEh+0x120>)
    9868:	2318      	movs	r3, #24
    986a:	18f8      	adds	r0, r7, r3
    986c:	2302      	movs	r3, #2
    986e:	2201      	movs	r2, #1
    9870:	f7fd fef6 	bl	7660 <_ZN11SPISettingsC1Em8BitOrderh>
    9874:	4b25      	ldr	r3, [pc, #148]	; (990c <_ZN7Sd2Card10setSckRateEh+0x118>)
    9876:	2218      	movs	r2, #24
    9878:	18ba      	adds	r2, r7, r2
    987a:	6811      	ldr	r1, [r2, #0]
    987c:	6019      	str	r1, [r3, #0]
    987e:	8892      	ldrh	r2, [r2, #4]
    9880:	809a      	strh	r2, [r3, #4]
    9882:	e03a      	b.n	98fa <_ZN7Sd2Card10setSckRateEh+0x106>
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    9884:	4924      	ldr	r1, [pc, #144]	; (9918 <_ZN7Sd2Card10setSckRateEh+0x124>)
    9886:	2320      	movs	r3, #32
    9888:	18f8      	adds	r0, r7, r3
    988a:	2302      	movs	r3, #2
    988c:	2201      	movs	r2, #1
    988e:	f7fd fee7 	bl	7660 <_ZN11SPISettingsC1Em8BitOrderh>
    9892:	4b1e      	ldr	r3, [pc, #120]	; (990c <_ZN7Sd2Card10setSckRateEh+0x118>)
    9894:	2220      	movs	r2, #32
    9896:	18ba      	adds	r2, r7, r2
    9898:	6811      	ldr	r1, [r2, #0]
    989a:	6019      	str	r1, [r3, #0]
    989c:	8892      	ldrh	r2, [r2, #4]
    989e:	809a      	strh	r2, [r3, #4]
    98a0:	e02b      	b.n	98fa <_ZN7Sd2Card10setSckRateEh+0x106>
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    98a2:	491e      	ldr	r1, [pc, #120]	; (991c <_ZN7Sd2Card10setSckRateEh+0x128>)
    98a4:	2328      	movs	r3, #40	; 0x28
    98a6:	18f8      	adds	r0, r7, r3
    98a8:	2302      	movs	r3, #2
    98aa:	2201      	movs	r2, #1
    98ac:	f7fd fed8 	bl	7660 <_ZN11SPISettingsC1Em8BitOrderh>
    98b0:	4b16      	ldr	r3, [pc, #88]	; (990c <_ZN7Sd2Card10setSckRateEh+0x118>)
    98b2:	2228      	movs	r2, #40	; 0x28
    98b4:	18ba      	adds	r2, r7, r2
    98b6:	6811      	ldr	r1, [r2, #0]
    98b8:	6019      	str	r1, [r3, #0]
    98ba:	8892      	ldrh	r2, [r2, #4]
    98bc:	809a      	strh	r2, [r3, #4]
    98be:	e01c      	b.n	98fa <_ZN7Sd2Card10setSckRateEh+0x106>
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    98c0:	4917      	ldr	r1, [pc, #92]	; (9920 <_ZN7Sd2Card10setSckRateEh+0x12c>)
    98c2:	2330      	movs	r3, #48	; 0x30
    98c4:	18f8      	adds	r0, r7, r3
    98c6:	2302      	movs	r3, #2
    98c8:	2201      	movs	r2, #1
    98ca:	f7fd fec9 	bl	7660 <_ZN11SPISettingsC1Em8BitOrderh>
    98ce:	4b0f      	ldr	r3, [pc, #60]	; (990c <_ZN7Sd2Card10setSckRateEh+0x118>)
    98d0:	2230      	movs	r2, #48	; 0x30
    98d2:	18ba      	adds	r2, r7, r2
    98d4:	6811      	ldr	r1, [r2, #0]
    98d6:	6019      	str	r1, [r3, #0]
    98d8:	8892      	ldrh	r2, [r2, #4]
    98da:	809a      	strh	r2, [r3, #4]
    98dc:	e00d      	b.n	98fa <_ZN7Sd2Card10setSckRateEh+0x106>
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    98de:	4911      	ldr	r1, [pc, #68]	; (9924 <_ZN7Sd2Card10setSckRateEh+0x130>)
    98e0:	2338      	movs	r3, #56	; 0x38
    98e2:	18f8      	adds	r0, r7, r3
    98e4:	2302      	movs	r3, #2
    98e6:	2201      	movs	r2, #1
    98e8:	f7fd feba 	bl	7660 <_ZN11SPISettingsC1Em8BitOrderh>
    98ec:	4b07      	ldr	r3, [pc, #28]	; (990c <_ZN7Sd2Card10setSckRateEh+0x118>)
    98ee:	2238      	movs	r2, #56	; 0x38
    98f0:	18ba      	adds	r2, r7, r2
    98f2:	6811      	ldr	r1, [r2, #0]
    98f4:	6019      	str	r1, [r3, #0]
    98f6:	8892      	ldrh	r2, [r2, #4]
    98f8:	809a      	strh	r2, [r3, #4]
  }
#endif // USE_SPI_LIB
  return true;
    98fa:	2301      	movs	r3, #1
}
    98fc:	0018      	movs	r0, r3
    98fe:	46bd      	mov	sp, r7
    9900:	b010      	add	sp, #64	; 0x40
    9902:	bd80      	pop	{r7, pc}
    9904:	000135dc 	.word	0x000135dc
    9908:	017d7840 	.word	0x017d7840
    990c:	20000958 	.word	0x20000958
    9910:	003d0900 	.word	0x003d0900
    9914:	001e8480 	.word	0x001e8480
    9918:	000f4240 	.word	0x000f4240
    991c:	0007a120 	.word	0x0007a120
    9920:	0003d090 	.word	0x0003d090
    9924:	0001e848 	.word	0x0001e848

00009928 <_ZN7Sd2Card11waitNotBusyEj>:
  return true;
}
#endif
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    9928:	b580      	push	{r7, lr}
    992a:	b084      	sub	sp, #16
    992c:	af00      	add	r7, sp, #0
    992e:	6078      	str	r0, [r7, #4]
    9930:	6039      	str	r1, [r7, #0]
  unsigned int t0 = millis();
    9932:	f7f9 fa71 	bl	2e18 <millis>
    9936:	0003      	movs	r3, r0
    9938:	60fb      	str	r3, [r7, #12]
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    993a:	f7ff fc4f 	bl	91dc <_ZL6spiRecv>
    993e:	0003      	movs	r3, r0
    9940:	3bff      	subs	r3, #255	; 0xff
    9942:	425a      	negs	r2, r3
    9944:	4153      	adcs	r3, r2
    9946:	b2db      	uxtb	r3, r3
    9948:	2b00      	cmp	r3, #0
    994a:	d001      	beq.n	9950 <_ZN7Sd2Card11waitNotBusyEj+0x28>
    994c:	2301      	movs	r3, #1
    994e:	e00b      	b.n	9968 <_ZN7Sd2Card11waitNotBusyEj+0x40>
    d = millis() - t0;
    9950:	f7f9 fa62 	bl	2e18 <millis>
    9954:	0002      	movs	r2, r0
    9956:	68fb      	ldr	r3, [r7, #12]
    9958:	1ad3      	subs	r3, r2, r3
    995a:	60bb      	str	r3, [r7, #8]
  }
  while (d < timeoutMillis);
    995c:	68ba      	ldr	r2, [r7, #8]
    995e:	683b      	ldr	r3, [r7, #0]
    9960:	429a      	cmp	r2, r3
    9962:	d200      	bcs.n	9966 <_ZN7Sd2Card11waitNotBusyEj+0x3e>
  do {
    9964:	e7e9      	b.n	993a <_ZN7Sd2Card11waitNotBusyEj+0x12>
  return false;
    9966:	2300      	movs	r3, #0
}
    9968:	0018      	movs	r0, r3
    996a:	46bd      	mov	sp, r7
    996c:	b004      	add	sp, #16
    996e:	bd80      	pop	{r7, pc}

00009970 <_ZN7Sd2Card14waitStartBlockEv>:
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    9970:	b580      	push	{r7, lr}
    9972:	b084      	sub	sp, #16
    9974:	af00      	add	r7, sp, #0
    9976:	6078      	str	r0, [r7, #4]
  unsigned int t0 = millis();
    9978:	f7f9 fa4e 	bl	2e18 <millis>
    997c:	0003      	movs	r3, r0
    997e:	60fb      	str	r3, [r7, #12]
  while ((status_ = spiRec()) == 0XFF) {
    9980:	f7ff fc2c 	bl	91dc <_ZL6spiRecv>
    9984:	0003      	movs	r3, r0
    9986:	001a      	movs	r2, r3
    9988:	687b      	ldr	r3, [r7, #4]
    998a:	72da      	strb	r2, [r3, #11]
    998c:	687b      	ldr	r3, [r7, #4]
    998e:	7adb      	ldrb	r3, [r3, #11]
    9990:	3bff      	subs	r3, #255	; 0xff
    9992:	425a      	negs	r2, r3
    9994:	4153      	adcs	r3, r2
    9996:	b2db      	uxtb	r3, r3
    9998:	2b00      	cmp	r3, #0
    999a:	d010      	beq.n	99be <_ZN7Sd2Card14waitStartBlockEv+0x4e>
    unsigned int d = millis() - t0;
    999c:	f7f9 fa3c 	bl	2e18 <millis>
    99a0:	0002      	movs	r2, r0
    99a2:	68fb      	ldr	r3, [r7, #12]
    99a4:	1ad3      	subs	r3, r2, r3
    99a6:	60bb      	str	r3, [r7, #8]
    if (d > SD_READ_TIMEOUT) {
    99a8:	68ba      	ldr	r2, [r7, #8]
    99aa:	2396      	movs	r3, #150	; 0x96
    99ac:	005b      	lsls	r3, r3, #1
    99ae:	429a      	cmp	r2, r3
    99b0:	d9e6      	bls.n	9980 <_ZN7Sd2Card14waitStartBlockEv+0x10>
      error(SD_CARD_ERROR_READ_TIMEOUT);
    99b2:	687b      	ldr	r3, [r7, #4]
    99b4:	210f      	movs	r1, #15
    99b6:	0018      	movs	r0, r3
    99b8:	f7ff fb92 	bl	90e0 <_ZN7Sd2Card5errorEh>
      goto fail;
    99bc:	e00b      	b.n	99d6 <_ZN7Sd2Card14waitStartBlockEv+0x66>
    }
  }
  if (status_ != DATA_START_BLOCK) {
    99be:	687b      	ldr	r3, [r7, #4]
    99c0:	7adb      	ldrb	r3, [r3, #11]
    99c2:	2bfe      	cmp	r3, #254	; 0xfe
    99c4:	d005      	beq.n	99d2 <_ZN7Sd2Card14waitStartBlockEv+0x62>
    error(SD_CARD_ERROR_READ);
    99c6:	687b      	ldr	r3, [r7, #4]
    99c8:	210d      	movs	r1, #13
    99ca:	0018      	movs	r0, r3
    99cc:	f7ff fb88 	bl	90e0 <_ZN7Sd2Card5errorEh>
    goto fail;
    99d0:	e001      	b.n	99d6 <_ZN7Sd2Card14waitStartBlockEv+0x66>
  }
  return true;
    99d2:	2301      	movs	r3, #1
    99d4:	e004      	b.n	99e0 <_ZN7Sd2Card14waitStartBlockEv+0x70>

 fail:
  chipSelectHigh();
    99d6:	687b      	ldr	r3, [r7, #4]
    99d8:	0018      	movs	r0, r3
    99da:	f7ff fc8f 	bl	92fc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    99de:	2300      	movs	r3, #0
}
    99e0:	0018      	movs	r0, r3
    99e2:	46bd      	mov	sp, r7
    99e4:	b004      	add	sp, #16
    99e6:	bd80      	pop	{r7, pc}

000099e8 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    99e8:	b580      	push	{r7, lr}
    99ea:	b084      	sub	sp, #16
    99ec:	af00      	add	r7, sp, #0
    99ee:	60f8      	str	r0, [r7, #12]
    99f0:	60b9      	str	r1, [r7, #8]
    99f2:	607a      	str	r2, [r7, #4]
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    99f4:	68bb      	ldr	r3, [r7, #8]
    99f6:	2b00      	cmp	r3, #0
    99f8:	d105      	bne.n	9a06 <_ZN7Sd2Card10writeBlockEmPKh+0x1e>
    error(SD_CARD_ERROR_WRITE_BLOCK_ZERO);
    99fa:	68fb      	ldr	r3, [r7, #12]
    99fc:	2112      	movs	r1, #18
    99fe:	0018      	movs	r0, r3
    9a00:	f7ff fb6e 	bl	90e0 <_ZN7Sd2Card5errorEh>
    goto fail;
    9a04:	e05c      	b.n	9ac0 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    9a06:	68fb      	ldr	r3, [r7, #12]
    9a08:	0018      	movs	r0, r3
    9a0a:	f7ff fb43 	bl	9094 <_ZNK7Sd2Card4typeEv>
    9a0e:	0003      	movs	r3, r0
    9a10:	3b03      	subs	r3, #3
    9a12:	1e5a      	subs	r2, r3, #1
    9a14:	4193      	sbcs	r3, r2
    9a16:	b2db      	uxtb	r3, r3
    9a18:	2b00      	cmp	r3, #0
    9a1a:	d002      	beq.n	9a22 <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
    9a1c:	68bb      	ldr	r3, [r7, #8]
    9a1e:	025b      	lsls	r3, r3, #9
    9a20:	60bb      	str	r3, [r7, #8]
  if (cardCommand(CMD24, blockNumber)) {
    9a22:	68ba      	ldr	r2, [r7, #8]
    9a24:	68fb      	ldr	r3, [r7, #12]
    9a26:	2118      	movs	r1, #24
    9a28:	0018      	movs	r0, r3
    9a2a:	f7ff fbe5 	bl	91f8 <_ZN7Sd2Card11cardCommandEhm>
    9a2e:	0003      	movs	r3, r0
    9a30:	1e5a      	subs	r2, r3, #1
    9a32:	4193      	sbcs	r3, r2
    9a34:	b2db      	uxtb	r3, r3
    9a36:	2b00      	cmp	r3, #0
    9a38:	d005      	beq.n	9a46 <_ZN7Sd2Card10writeBlockEmPKh+0x5e>
    error(SD_CARD_ERROR_CMD24);
    9a3a:	68fb      	ldr	r3, [r7, #12]
    9a3c:	2104      	movs	r1, #4
    9a3e:	0018      	movs	r0, r3
    9a40:	f7ff fb4e 	bl	90e0 <_ZN7Sd2Card5errorEh>
    goto fail;
    9a44:	e03c      	b.n	9ac0 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    9a46:	687a      	ldr	r2, [r7, #4]
    9a48:	68fb      	ldr	r3, [r7, #12]
    9a4a:	21fe      	movs	r1, #254	; 0xfe
    9a4c:	0018      	movs	r0, r3
    9a4e:	f000 f841 	bl	9ad4 <_ZN7Sd2Card9writeDataEhPKh>
    9a52:	0003      	movs	r3, r0
    9a54:	425a      	negs	r2, r3
    9a56:	4153      	adcs	r3, r2
    9a58:	b2db      	uxtb	r3, r3
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	d12f      	bne.n	9abe <_ZN7Sd2Card10writeBlockEmPKh+0xd6>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9a5e:	2396      	movs	r3, #150	; 0x96
    9a60:	009a      	lsls	r2, r3, #2
    9a62:	68fb      	ldr	r3, [r7, #12]
    9a64:	0011      	movs	r1, r2
    9a66:	0018      	movs	r0, r3
    9a68:	f7ff ff5e 	bl	9928 <_ZN7Sd2Card11waitNotBusyEj>
    9a6c:	0003      	movs	r3, r0
    9a6e:	425a      	negs	r2, r3
    9a70:	4153      	adcs	r3, r2
    9a72:	b2db      	uxtb	r3, r3
    9a74:	2b00      	cmp	r3, #0
    9a76:	d005      	beq.n	9a84 <_ZN7Sd2Card10writeBlockEmPKh+0x9c>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    9a78:	68fb      	ldr	r3, [r7, #12]
    9a7a:	2115      	movs	r1, #21
    9a7c:	0018      	movs	r0, r3
    9a7e:	f7ff fb2f 	bl	90e0 <_ZN7Sd2Card5errorEh>
    goto fail;
    9a82:	e01d      	b.n	9ac0 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    9a84:	68fb      	ldr	r3, [r7, #12]
    9a86:	2200      	movs	r2, #0
    9a88:	210d      	movs	r1, #13
    9a8a:	0018      	movs	r0, r3
    9a8c:	f7ff fbb4 	bl	91f8 <_ZN7Sd2Card11cardCommandEhm>
    9a90:	1e03      	subs	r3, r0, #0
    9a92:	d103      	bne.n	9a9c <_ZN7Sd2Card10writeBlockEmPKh+0xb4>
    9a94:	f7ff fba2 	bl	91dc <_ZL6spiRecv>
    9a98:	1e03      	subs	r3, r0, #0
    9a9a:	d001      	beq.n	9aa0 <_ZN7Sd2Card10writeBlockEmPKh+0xb8>
    9a9c:	2301      	movs	r3, #1
    9a9e:	e000      	b.n	9aa2 <_ZN7Sd2Card10writeBlockEmPKh+0xba>
    9aa0:	2300      	movs	r3, #0
    9aa2:	2b00      	cmp	r3, #0
    9aa4:	d005      	beq.n	9ab2 <_ZN7Sd2Card10writeBlockEmPKh+0xca>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    9aa6:	68fb      	ldr	r3, [r7, #12]
    9aa8:	2114      	movs	r1, #20
    9aaa:	0018      	movs	r0, r3
    9aac:	f7ff fb18 	bl	90e0 <_ZN7Sd2Card5errorEh>
    goto fail;
    9ab0:	e006      	b.n	9ac0 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  chipSelectHigh();
    9ab2:	68fb      	ldr	r3, [r7, #12]
    9ab4:	0018      	movs	r0, r3
    9ab6:	f7ff fc21 	bl	92fc <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    9aba:	2301      	movs	r3, #1
    9abc:	e005      	b.n	9aca <_ZN7Sd2Card10writeBlockEmPKh+0xe2>
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    9abe:	46c0      	nop			; (mov r8, r8)

 fail:
  chipSelectHigh();
    9ac0:	68fb      	ldr	r3, [r7, #12]
    9ac2:	0018      	movs	r0, r3
    9ac4:	f7ff fc1a 	bl	92fc <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9ac8:	2300      	movs	r3, #0
}
    9aca:	0018      	movs	r0, r3
    9acc:	46bd      	mov	sp, r7
    9ace:	b004      	add	sp, #16
    9ad0:	bd80      	pop	{r7, pc}
	...

00009ad4 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    9ad4:	b580      	push	{r7, lr}
    9ad6:	b086      	sub	sp, #24
    9ad8:	af00      	add	r7, sp, #0
    9ada:	60f8      	str	r0, [r7, #12]
    9adc:	607a      	str	r2, [r7, #4]
    9ade:	230b      	movs	r3, #11
    9ae0:	18fb      	adds	r3, r7, r3
    9ae2:	1c0a      	adds	r2, r1, #0
    9ae4:	701a      	strb	r2, [r3, #0]
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
    9ae6:	230b      	movs	r3, #11
    9ae8:	18fb      	adds	r3, r7, r3
    9aea:	781b      	ldrb	r3, [r3, #0]
    9aec:	0018      	movs	r0, r3
    9aee:	f7ff fb61 	bl	91b4 <_ZL7spiSendh>
  for (uint16_t i = 0; i < 512; i++) {
    9af2:	2316      	movs	r3, #22
    9af4:	18fb      	adds	r3, r7, r3
    9af6:	2200      	movs	r2, #0
    9af8:	801a      	strh	r2, [r3, #0]
    9afa:	2316      	movs	r3, #22
    9afc:	18fb      	adds	r3, r7, r3
    9afe:	881b      	ldrh	r3, [r3, #0]
    9b00:	4a1b      	ldr	r2, [pc, #108]	; (9b70 <_ZN7Sd2Card9writeDataEhPKh+0x9c>)
    9b02:	4293      	cmp	r3, r2
    9b04:	dc10      	bgt.n	9b28 <_ZN7Sd2Card9writeDataEhPKh+0x54>
    spiSend(src[i]);
    9b06:	2316      	movs	r3, #22
    9b08:	18fb      	adds	r3, r7, r3
    9b0a:	881b      	ldrh	r3, [r3, #0]
    9b0c:	687a      	ldr	r2, [r7, #4]
    9b0e:	18d3      	adds	r3, r2, r3
    9b10:	781b      	ldrb	r3, [r3, #0]
    9b12:	0018      	movs	r0, r3
    9b14:	f7ff fb4e 	bl	91b4 <_ZL7spiSendh>
  for (uint16_t i = 0; i < 512; i++) {
    9b18:	2316      	movs	r3, #22
    9b1a:	18fb      	adds	r3, r7, r3
    9b1c:	881a      	ldrh	r2, [r3, #0]
    9b1e:	2316      	movs	r3, #22
    9b20:	18fb      	adds	r3, r7, r3
    9b22:	3201      	adds	r2, #1
    9b24:	801a      	strh	r2, [r3, #0]
    9b26:	e7e8      	b.n	9afa <_ZN7Sd2Card9writeDataEhPKh+0x26>
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
    9b28:	20ff      	movs	r0, #255	; 0xff
    9b2a:	f7ff fb43 	bl	91b4 <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
    9b2e:	20ff      	movs	r0, #255	; 0xff
    9b30:	f7ff fb40 	bl	91b4 <_ZL7spiSendh>

  status_ = spiRec();
    9b34:	f7ff fb52 	bl	91dc <_ZL6spiRecv>
    9b38:	0003      	movs	r3, r0
    9b3a:	001a      	movs	r2, r3
    9b3c:	68fb      	ldr	r3, [r7, #12]
    9b3e:	72da      	strb	r2, [r3, #11]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    9b40:	68fb      	ldr	r3, [r7, #12]
    9b42:	7adb      	ldrb	r3, [r3, #11]
    9b44:	001a      	movs	r2, r3
    9b46:	231f      	movs	r3, #31
    9b48:	4013      	ands	r3, r2
    9b4a:	2b05      	cmp	r3, #5
    9b4c:	d00a      	beq.n	9b64 <_ZN7Sd2Card9writeDataEhPKh+0x90>
    error(SD_CARD_ERROR_WRITE);
    9b4e:	68fb      	ldr	r3, [r7, #12]
    9b50:	2111      	movs	r1, #17
    9b52:	0018      	movs	r0, r3
    9b54:	f7ff fac4 	bl	90e0 <_ZN7Sd2Card5errorEh>
    chipSelectHigh();
    9b58:	68fb      	ldr	r3, [r7, #12]
    9b5a:	0018      	movs	r0, r3
    9b5c:	f7ff fbce 	bl	92fc <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    9b60:	2300      	movs	r3, #0
    9b62:	e000      	b.n	9b66 <_ZN7Sd2Card9writeDataEhPKh+0x92>
  }
  return true;
    9b64:	2301      	movs	r3, #1
}
    9b66:	0018      	movs	r0, r3
    9b68:	46bd      	mov	sp, r7
    9b6a:	b006      	add	sp, #24
    9b6c:	bd80      	pop	{r7, pc}
    9b6e:	46c0      	nop			; (mov r8, r8)
    9b70:	000001ff 	.word	0x000001ff

00009b74 <_Z41__static_initialization_and_destruction_0ii>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    9b74:	b580      	push	{r7, lr}
    9b76:	b082      	sub	sp, #8
    9b78:	af00      	add	r7, sp, #0
    9b7a:	6078      	str	r0, [r7, #4]
    9b7c:	6039      	str	r1, [r7, #0]
    9b7e:	687b      	ldr	r3, [r7, #4]
    9b80:	2b01      	cmp	r3, #1
    9b82:	d107      	bne.n	9b94 <_Z41__static_initialization_and_destruction_0ii+0x20>
    9b84:	683b      	ldr	r3, [r7, #0]
    9b86:	4a05      	ldr	r2, [pc, #20]	; (9b9c <_Z41__static_initialization_and_destruction_0ii+0x28>)
    9b88:	4293      	cmp	r3, r2
    9b8a:	d103      	bne.n	9b94 <_Z41__static_initialization_and_destruction_0ii+0x20>
static SPISettings settings;
    9b8c:	4b04      	ldr	r3, [pc, #16]	; (9ba0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    9b8e:	0018      	movs	r0, r3
    9b90:	f7ff fac4 	bl	911c <_ZN11SPISettingsC1Ev>
}
    9b94:	46c0      	nop			; (mov r8, r8)
    9b96:	46bd      	mov	sp, r7
    9b98:	b002      	add	sp, #8
    9b9a:	bd80      	pop	{r7, pc}
    9b9c:	0000ffff 	.word	0x0000ffff
    9ba0:	20000958 	.word	0x20000958

00009ba4 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    9ba4:	b580      	push	{r7, lr}
    9ba6:	af00      	add	r7, sp, #0
    9ba8:	4b03      	ldr	r3, [pc, #12]	; (9bb8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x14>)
    9baa:	0019      	movs	r1, r3
    9bac:	2001      	movs	r0, #1
    9bae:	f7ff ffe1 	bl	9b74 <_Z41__static_initialization_and_destruction_0ii>
    9bb2:	46bd      	mov	sp, r7
    9bb4:	bd80      	pop	{r7, pc}
    9bb6:	46c0      	nop			; (mov r8, r8)
    9bb8:	0000ffff 	.word	0x0000ffff

00009bbc <_ZL11DIR_IS_FILEPK14directoryEntry>:
  return (dir->attributes & DIR_ATT_LONG_NAME_MASK) == DIR_ATT_LONG_NAME;
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
    9bbc:	b580      	push	{r7, lr}
    9bbe:	b082      	sub	sp, #8
    9bc0:	af00      	add	r7, sp, #0
    9bc2:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    9bc4:	687b      	ldr	r3, [r7, #4]
    9bc6:	7adb      	ldrb	r3, [r3, #11]
    9bc8:	001a      	movs	r2, r3
    9bca:	2318      	movs	r3, #24
    9bcc:	4013      	ands	r3, r2
    9bce:	425a      	negs	r2, r3
    9bd0:	4153      	adcs	r3, r2
    9bd2:	b2db      	uxtb	r3, r3
}
    9bd4:	0018      	movs	r0, r3
    9bd6:	46bd      	mov	sp, r7
    9bd8:	b002      	add	sp, #8
    9bda:	bd80      	pop	{r7, pc}

00009bdc <_ZL13DIR_IS_SUBDIRPK14directoryEntry>:
/** Directory entry is for a subdirectory */
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
    9bdc:	b580      	push	{r7, lr}
    9bde:	b082      	sub	sp, #8
    9be0:	af00      	add	r7, sp, #0
    9be2:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
    9be4:	687b      	ldr	r3, [r7, #4]
    9be6:	7adb      	ldrb	r3, [r3, #11]
    9be8:	001a      	movs	r2, r3
    9bea:	2318      	movs	r3, #24
    9bec:	4013      	ands	r3, r2
    9bee:	3b10      	subs	r3, #16
    9bf0:	425a      	negs	r2, r3
    9bf2:	4153      	adcs	r3, r2
    9bf4:	b2db      	uxtb	r3, r3
}
    9bf6:	0018      	movs	r0, r3
    9bf8:	46bd      	mov	sp, r7
    9bfa:	b002      	add	sp, #8
    9bfc:	bd80      	pop	{r7, pc}

00009bfe <_ZNK6SdFile6isFileEv>:
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
    9bfe:	b580      	push	{r7, lr}
    9c00:	b082      	sub	sp, #8
    9c02:	af00      	add	r7, sp, #0
    9c04:	6078      	str	r0, [r7, #4]
    9c06:	687b      	ldr	r3, [r7, #4]
    9c08:	7a5b      	ldrb	r3, [r3, #9]
    9c0a:	3b01      	subs	r3, #1
    9c0c:	425a      	negs	r2, r3
    9c0e:	4153      	adcs	r3, r2
    9c10:	b2db      	uxtb	r3, r3
    9c12:	0018      	movs	r0, r3
    9c14:	46bd      	mov	sp, r7
    9c16:	b002      	add	sp, #8
    9c18:	bd80      	pop	{r7, pc}

00009c1a <_ZN6SdFile7seekEndEv>:
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    9c1a:	b580      	push	{r7, lr}
    9c1c:	b082      	sub	sp, #8
    9c1e:	af00      	add	r7, sp, #0
    9c20:	6078      	str	r0, [r7, #4]
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	69da      	ldr	r2, [r3, #28]
    9c26:	687b      	ldr	r3, [r7, #4]
    9c28:	0011      	movs	r1, r2
    9c2a:	0018      	movs	r0, r3
    9c2c:	f000 fdda 	bl	a7e4 <_ZN6SdFile7seekSetEm>
    9c30:	0003      	movs	r3, r0
    9c32:	0018      	movs	r0, r3
    9c34:	46bd      	mov	sp, r7
    9c36:	b002      	add	sp, #8
    9c38:	bd80      	pop	{r7, pc}

00009c3a <_ZNK6SdFile14unbufferedReadEv>:
  uint8_t unbufferedRead(void) const {
    9c3a:	b580      	push	{r7, lr}
    9c3c:	b082      	sub	sp, #8
    9c3e:	af00      	add	r7, sp, #0
    9c40:	6078      	str	r0, [r7, #4]
    return flags_ & F_FILE_UNBUFFERED_READ;
    9c42:	687b      	ldr	r3, [r7, #4]
    9c44:	7a1b      	ldrb	r3, [r3, #8]
    9c46:	2240      	movs	r2, #64	; 0x40
    9c48:	4013      	ands	r3, r2
    9c4a:	b2db      	uxtb	r3, r3
  }
    9c4c:	0018      	movs	r0, r3
    9c4e:	46bd      	mov	sp, r7
    9c50:	b002      	add	sp, #8
    9c52:	bd80      	pop	{r7, pc}

00009c54 <_ZNK8SdVolume7fatTypeEv>:
  uint8_t fatType(void) const {return fatType_;}
    9c54:	b580      	push	{r7, lr}
    9c56:	b082      	sub	sp, #8
    9c58:	af00      	add	r7, sp, #0
    9c5a:	6078      	str	r0, [r7, #4]
    9c5c:	687b      	ldr	r3, [r7, #4]
    9c5e:	2220      	movs	r2, #32
    9c60:	5c9b      	ldrb	r3, [r3, r2]
    9c62:	0018      	movs	r0, r3
    9c64:	46bd      	mov	sp, r7
    9c66:	b002      	add	sp, #8
    9c68:	bd80      	pop	{r7, pc}

00009c6a <_ZNK8SdVolume17rootDirEntryCountEv>:
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
    9c6a:	b580      	push	{r7, lr}
    9c6c:	b082      	sub	sp, #8
    9c6e:	af00      	add	r7, sp, #0
    9c70:	6078      	str	r0, [r7, #4]
    9c72:	687b      	ldr	r3, [r7, #4]
    9c74:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9c76:	0018      	movs	r0, r3
    9c78:	46bd      	mov	sp, r7
    9c7a:	b002      	add	sp, #8
    9c7c:	bd80      	pop	{r7, pc}

00009c7e <_ZNK8SdVolume12rootDirStartEv>:
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    9c7e:	b580      	push	{r7, lr}
    9c80:	b082      	sub	sp, #8
    9c82:	af00      	add	r7, sp, #0
    9c84:	6078      	str	r0, [r7, #4]
    9c86:	687b      	ldr	r3, [r7, #4]
    9c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9c8a:	0018      	movs	r0, r3
    9c8c:	46bd      	mov	sp, r7
    9c8e:	b002      	add	sp, #8
    9c90:	bd80      	pop	{r7, pc}

00009c92 <_ZNK8SdVolume14blockOfClusterEm>:
  uint8_t fatType_;             // volume type (12, 16, OR 32)
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    9c92:	b580      	push	{r7, lr}
    9c94:	b082      	sub	sp, #8
    9c96:	af00      	add	r7, sp, #0
    9c98:	6078      	str	r0, [r7, #4]
    9c9a:	6039      	str	r1, [r7, #0]
          return (position >> 9) & (blocksPerCluster_ - 1);}
    9c9c:	683b      	ldr	r3, [r7, #0]
    9c9e:	0a5b      	lsrs	r3, r3, #9
    9ca0:	b2db      	uxtb	r3, r3
    9ca2:	687a      	ldr	r2, [r7, #4]
    9ca4:	7912      	ldrb	r2, [r2, #4]
    9ca6:	3a01      	subs	r2, #1
    9ca8:	b2d2      	uxtb	r2, r2
    9caa:	4013      	ands	r3, r2
    9cac:	b2db      	uxtb	r3, r3
    9cae:	0018      	movs	r0, r3
    9cb0:	46bd      	mov	sp, r7
    9cb2:	b002      	add	sp, #8
    9cb4:	bd80      	pop	{r7, pc}

00009cb6 <_ZNK8SdVolume17clusterStartBlockEm>:
  uint32_t clusterStartBlock(uint32_t cluster) const {
    9cb6:	b580      	push	{r7, lr}
    9cb8:	b082      	sub	sp, #8
    9cba:	af00      	add	r7, sp, #0
    9cbc:	6078      	str	r0, [r7, #4]
    9cbe:	6039      	str	r1, [r7, #0]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    9cc0:	687b      	ldr	r3, [r7, #4]
    9cc2:	695a      	ldr	r2, [r3, #20]
    9cc4:	683b      	ldr	r3, [r7, #0]
    9cc6:	3b02      	subs	r3, #2
    9cc8:	6879      	ldr	r1, [r7, #4]
    9cca:	7c09      	ldrb	r1, [r1, #16]
    9ccc:	408b      	lsls	r3, r1
    9cce:	18d3      	adds	r3, r2, r3
    9cd0:	0018      	movs	r0, r3
    9cd2:	46bd      	mov	sp, r7
    9cd4:	b002      	add	sp, #8
    9cd6:	bd80      	pop	{r7, pc}

00009cd8 <_ZN8SdVolume13cacheSetDirtyEv>:
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    9cd8:	b580      	push	{r7, lr}
    9cda:	af00      	add	r7, sp, #0
    9cdc:	4b04      	ldr	r3, [pc, #16]	; (9cf0 <_ZN8SdVolume13cacheSetDirtyEv+0x18>)
    9cde:	781b      	ldrb	r3, [r3, #0]
    9ce0:	2201      	movs	r2, #1
    9ce2:	4313      	orrs	r3, r2
    9ce4:	b2da      	uxtb	r2, r3
    9ce6:	4b02      	ldr	r3, [pc, #8]	; (9cf0 <_ZN8SdVolume13cacheSetDirtyEv+0x18>)
    9ce8:	701a      	strb	r2, [r3, #0]
    9cea:	46c0      	nop			; (mov r8, r8)
    9cec:	46bd      	mov	sp, r7
    9cee:	bd80      	pop	{r7, pc}
    9cf0:	20000b6c 	.word	0x20000b6c

00009cf4 <_ZN8SdVolume9fatPutEOCEm>:
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    9cf4:	b580      	push	{r7, lr}
    9cf6:	b082      	sub	sp, #8
    9cf8:	af00      	add	r7, sp, #0
    9cfa:	6078      	str	r0, [r7, #4]
    9cfc:	6039      	str	r1, [r7, #0]
    return fatPut(cluster, 0x0FFFFFFF);
    9cfe:	4a05      	ldr	r2, [pc, #20]	; (9d14 <_ZN8SdVolume9fatPutEOCEm+0x20>)
    9d00:	6839      	ldr	r1, [r7, #0]
    9d02:	687b      	ldr	r3, [r7, #4]
    9d04:	0018      	movs	r0, r3
    9d06:	f001 facb 	bl	b2a0 <_ZN8SdVolume6fatPutEmm>
    9d0a:	0003      	movs	r3, r0
  }
    9d0c:	0018      	movs	r0, r3
    9d0e:	46bd      	mov	sp, r7
    9d10:	b002      	add	sp, #8
    9d12:	bd80      	pop	{r7, pc}
    9d14:	0fffffff 	.word	0x0fffffff

00009d18 <_ZNK8SdVolume5isEOCEm>:
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    9d18:	b580      	push	{r7, lr}
    9d1a:	b082      	sub	sp, #8
    9d1c:	af00      	add	r7, sp, #0
    9d1e:	6078      	str	r0, [r7, #4]
    9d20:	6039      	str	r1, [r7, #0]
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    9d22:	687b      	ldr	r3, [r7, #4]
    9d24:	2220      	movs	r2, #32
    9d26:	5c9b      	ldrb	r3, [r3, r2]
    9d28:	2b10      	cmp	r3, #16
    9d2a:	d101      	bne.n	9d30 <_ZNK8SdVolume5isEOCEm+0x18>
    9d2c:	4a05      	ldr	r2, [pc, #20]	; (9d44 <_ZNK8SdVolume5isEOCEm+0x2c>)
    9d2e:	e000      	b.n	9d32 <_ZNK8SdVolume5isEOCEm+0x1a>
    9d30:	4a05      	ldr	r2, [pc, #20]	; (9d48 <_ZNK8SdVolume5isEOCEm+0x30>)
    9d32:	6839      	ldr	r1, [r7, #0]
    9d34:	2300      	movs	r3, #0
    9d36:	4291      	cmp	r1, r2
    9d38:	415b      	adcs	r3, r3
    9d3a:	b2db      	uxtb	r3, r3
  }
    9d3c:	0018      	movs	r0, r3
    9d3e:	46bd      	mov	sp, r7
    9d40:	b002      	add	sp, #8
    9d42:	bd80      	pop	{r7, pc}
    9d44:	0000fff8 	.word	0x0000fff8
    9d48:	0ffffff8 	.word	0x0ffffff8

00009d4c <_ZN8SdVolume8readDataEmttPh>:
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    9d4c:	b590      	push	{r4, r7, lr}
    9d4e:	b087      	sub	sp, #28
    9d50:	af02      	add	r7, sp, #8
    9d52:	60f8      	str	r0, [r7, #12]
    9d54:	60b9      	str	r1, [r7, #8]
    9d56:	0019      	movs	r1, r3
    9d58:	1dbb      	adds	r3, r7, #6
    9d5a:	801a      	strh	r2, [r3, #0]
    9d5c:	1d3b      	adds	r3, r7, #4
    9d5e:	1c0a      	adds	r2, r1, #0
    9d60:	801a      	strh	r2, [r3, #0]
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    9d62:	4b08      	ldr	r3, [pc, #32]	; (9d84 <_ZN8SdVolume8readDataEmttPh+0x38>)
    9d64:	6818      	ldr	r0, [r3, #0]
    9d66:	1d3b      	adds	r3, r7, #4
    9d68:	881c      	ldrh	r4, [r3, #0]
    9d6a:	1dbb      	adds	r3, r7, #6
    9d6c:	881a      	ldrh	r2, [r3, #0]
    9d6e:	68b9      	ldr	r1, [r7, #8]
    9d70:	6a3b      	ldr	r3, [r7, #32]
    9d72:	9300      	str	r3, [sp, #0]
    9d74:	0023      	movs	r3, r4
    9d76:	f7ff fc65 	bl	9644 <_ZN7Sd2Card8readDataEmttPh>
    9d7a:	0003      	movs	r3, r0
  }
    9d7c:	0018      	movs	r0, r3
    9d7e:	46bd      	mov	sp, r7
    9d80:	b005      	add	sp, #20
    9d82:	bd90      	pop	{r4, r7, pc}
    9d84:	20000b68 	.word	0x20000b68

00009d88 <_ZN8SdVolume10writeBlockEmPKh>:
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    9d88:	b580      	push	{r7, lr}
    9d8a:	b084      	sub	sp, #16
    9d8c:	af00      	add	r7, sp, #0
    9d8e:	60f8      	str	r0, [r7, #12]
    9d90:	60b9      	str	r1, [r7, #8]
    9d92:	607a      	str	r2, [r7, #4]
    return sdCard_->writeBlock(block, dst);
    9d94:	4b05      	ldr	r3, [pc, #20]	; (9dac <_ZN8SdVolume10writeBlockEmPKh+0x24>)
    9d96:	681b      	ldr	r3, [r3, #0]
    9d98:	687a      	ldr	r2, [r7, #4]
    9d9a:	68b9      	ldr	r1, [r7, #8]
    9d9c:	0018      	movs	r0, r3
    9d9e:	f7ff fe23 	bl	99e8 <_ZN7Sd2Card10writeBlockEmPKh>
    9da2:	0003      	movs	r3, r0
  }
    9da4:	0018      	movs	r0, r3
    9da6:	46bd      	mov	sp, r7
    9da8:	b004      	add	sp, #16
    9daa:	bd80      	pop	{r7, pc}
    9dac:	20000b68 	.word	0x20000b68

00009db0 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    9db0:	b580      	push	{r7, lr}
    9db2:	b082      	sub	sp, #8
    9db4:	af00      	add	r7, sp, #0
    9db6:	6078      	str	r0, [r7, #4]
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    9db8:	687b      	ldr	r3, [r7, #4]
    9dba:	6a58      	ldr	r0, [r3, #36]	; 0x24
    9dbc:	687b      	ldr	r3, [r7, #4]
    9dbe:	330c      	adds	r3, #12
    9dc0:	001a      	movs	r2, r3
    9dc2:	2101      	movs	r1, #1
    9dc4:	f001 f88e 	bl	aee4 <_ZN8SdVolume15allocContiguousEmPm>
    9dc8:	0003      	movs	r3, r0
    9dca:	425a      	negs	r2, r3
    9dcc:	4153      	adcs	r3, r2
    9dce:	b2db      	uxtb	r3, r3
    9dd0:	2b00      	cmp	r3, #0
    9dd2:	d001      	beq.n	9dd8 <_ZN6SdFile10addClusterEv+0x28>
    9dd4:	2300      	movs	r3, #0
    9dd6:	e010      	b.n	9dfa <_ZN6SdFile10addClusterEv+0x4a>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    9dd8:	687b      	ldr	r3, [r7, #4]
    9dda:	6a1b      	ldr	r3, [r3, #32]
    9ddc:	2b00      	cmp	r3, #0
    9dde:	d10b      	bne.n	9df8 <_ZN6SdFile10addClusterEv+0x48>
    firstCluster_ = curCluster_;
    9de0:	687b      	ldr	r3, [r7, #4]
    9de2:	68da      	ldr	r2, [r3, #12]
    9de4:	687b      	ldr	r3, [r7, #4]
    9de6:	621a      	str	r2, [r3, #32]
    flags_ |= F_FILE_DIR_DIRTY;
    9de8:	687b      	ldr	r3, [r7, #4]
    9dea:	7a1b      	ldrb	r3, [r3, #8]
    9dec:	2280      	movs	r2, #128	; 0x80
    9dee:	4252      	negs	r2, r2
    9df0:	4313      	orrs	r3, r2
    9df2:	b2da      	uxtb	r2, r3
    9df4:	687b      	ldr	r3, [r7, #4]
    9df6:	721a      	strb	r2, [r3, #8]
  }
  return true;
    9df8:	2301      	movs	r3, #1
}
    9dfa:	0018      	movs	r0, r3
    9dfc:	46bd      	mov	sp, r7
    9dfe:	b002      	add	sp, #8
    9e00:	bd80      	pop	{r7, pc}

00009e02 <_ZN6SdFile13addDirClusterEv>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    9e02:	b580      	push	{r7, lr}
    9e04:	b084      	sub	sp, #16
    9e06:	af00      	add	r7, sp, #0
    9e08:	6078      	str	r0, [r7, #4]
  if (!addCluster()) return false;
    9e0a:	687b      	ldr	r3, [r7, #4]
    9e0c:	0018      	movs	r0, r3
    9e0e:	f7ff ffcf 	bl	9db0 <_ZN6SdFile10addClusterEv>
    9e12:	0003      	movs	r3, r0
    9e14:	425a      	negs	r2, r3
    9e16:	4153      	adcs	r3, r2
    9e18:	b2db      	uxtb	r3, r3
    9e1a:	2b00      	cmp	r3, #0
    9e1c:	d001      	beq.n	9e22 <_ZN6SdFile13addDirClusterEv+0x20>
    9e1e:	2300      	movs	r3, #0
    9e20:	e03a      	b.n	9e98 <_ZN6SdFile13addDirClusterEv+0x96>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    9e22:	687b      	ldr	r3, [r7, #4]
    9e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9e26:	687b      	ldr	r3, [r7, #4]
    9e28:	68db      	ldr	r3, [r3, #12]
    9e2a:	0019      	movs	r1, r3
    9e2c:	0010      	movs	r0, r2
    9e2e:	f7ff ff42 	bl	9cb6 <_ZNK8SdVolume17clusterStartBlockEm>
    9e32:	0003      	movs	r3, r0
    9e34:	60bb      	str	r3, [r7, #8]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    9e36:	687b      	ldr	r3, [r7, #4]
    9e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9e3a:	230f      	movs	r3, #15
    9e3c:	18fb      	adds	r3, r7, r3
    9e3e:	7912      	ldrb	r2, [r2, #4]
    9e40:	701a      	strb	r2, [r3, #0]
    9e42:	230f      	movs	r3, #15
    9e44:	18fb      	adds	r3, r7, r3
    9e46:	781b      	ldrb	r3, [r3, #0]
    9e48:	2b00      	cmp	r3, #0
    9e4a:	d018      	beq.n	9e7e <_ZN6SdFile13addDirClusterEv+0x7c>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    9e4c:	230f      	movs	r3, #15
    9e4e:	18fb      	adds	r3, r7, r3
    9e50:	781a      	ldrb	r2, [r3, #0]
    9e52:	68bb      	ldr	r3, [r7, #8]
    9e54:	18d3      	adds	r3, r2, r3
    9e56:	3b01      	subs	r3, #1
    9e58:	0018      	movs	r0, r3
    9e5a:	f001 f963 	bl	b124 <_ZN8SdVolume14cacheZeroBlockEm>
    9e5e:	0003      	movs	r3, r0
    9e60:	425a      	negs	r2, r3
    9e62:	4153      	adcs	r3, r2
    9e64:	b2db      	uxtb	r3, r3
    9e66:	2b00      	cmp	r3, #0
    9e68:	d001      	beq.n	9e6e <_ZN6SdFile13addDirClusterEv+0x6c>
    9e6a:	2300      	movs	r3, #0
    9e6c:	e014      	b.n	9e98 <_ZN6SdFile13addDirClusterEv+0x96>
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    9e6e:	230f      	movs	r3, #15
    9e70:	18fb      	adds	r3, r7, r3
    9e72:	781a      	ldrb	r2, [r3, #0]
    9e74:	230f      	movs	r3, #15
    9e76:	18fb      	adds	r3, r7, r3
    9e78:	3a01      	subs	r2, #1
    9e7a:	701a      	strb	r2, [r3, #0]
    9e7c:	e7e1      	b.n	9e42 <_ZN6SdFile13addDirClusterEv+0x40>
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    9e7e:	687b      	ldr	r3, [r7, #4]
    9e80:	69da      	ldr	r2, [r3, #28]
    9e82:	687b      	ldr	r3, [r7, #4]
    9e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9e86:	7c1b      	ldrb	r3, [r3, #16]
    9e88:	0019      	movs	r1, r3
    9e8a:	2380      	movs	r3, #128	; 0x80
    9e8c:	009b      	lsls	r3, r3, #2
    9e8e:	408b      	lsls	r3, r1
    9e90:	18d2      	adds	r2, r2, r3
    9e92:	687b      	ldr	r3, [r7, #4]
    9e94:	61da      	str	r2, [r3, #28]
  return true;
    9e96:	2301      	movs	r3, #1
}
    9e98:	0018      	movs	r0, r3
    9e9a:	46bd      	mov	sp, r7
    9e9c:	b004      	add	sp, #16
    9e9e:	bd80      	pop	{r7, pc}

00009ea0 <_ZN6SdFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    9ea0:	b580      	push	{r7, lr}
    9ea2:	b082      	sub	sp, #8
    9ea4:	af00      	add	r7, sp, #0
    9ea6:	6078      	str	r0, [r7, #4]
    9ea8:	000a      	movs	r2, r1
    9eaa:	1cfb      	adds	r3, r7, #3
    9eac:	701a      	strb	r2, [r3, #0]
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    9eae:	687b      	ldr	r3, [r7, #4]
    9eb0:	695a      	ldr	r2, [r3, #20]
    9eb2:	1cfb      	adds	r3, r7, #3
    9eb4:	781b      	ldrb	r3, [r3, #0]
    9eb6:	0019      	movs	r1, r3
    9eb8:	0010      	movs	r0, r2
    9eba:	f001 f8f5 	bl	b0a8 <_ZN8SdVolume13cacheRawBlockEmh>
    9ebe:	0003      	movs	r3, r0
    9ec0:	425a      	negs	r2, r3
    9ec2:	4153      	adcs	r3, r2
    9ec4:	b2db      	uxtb	r3, r3
    9ec6:	2b00      	cmp	r3, #0
    9ec8:	d001      	beq.n	9ece <_ZN6SdFile13cacheDirEntryEh+0x2e>
    9eca:	2300      	movs	r3, #0
    9ecc:	e004      	b.n	9ed8 <_ZN6SdFile13cacheDirEntryEh+0x38>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    9ece:	687b      	ldr	r3, [r7, #4]
    9ed0:	7e1b      	ldrb	r3, [r3, #24]
    9ed2:	015a      	lsls	r2, r3, #5
    9ed4:	4b02      	ldr	r3, [pc, #8]	; (9ee0 <_ZN6SdFile13cacheDirEntryEh+0x40>)
    9ed6:	18d3      	adds	r3, r2, r3
}
    9ed8:	0018      	movs	r0, r3
    9eda:	46bd      	mov	sp, r7
    9edc:	b002      	add	sp, #8
    9ede:	bd80      	pop	{r7, pc}
    9ee0:	20000968 	.word	0x20000968

00009ee4 <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    9ee4:	b580      	push	{r7, lr}
    9ee6:	b082      	sub	sp, #8
    9ee8:	af00      	add	r7, sp, #0
    9eea:	6078      	str	r0, [r7, #4]
  if (!sync())return false;
    9eec:	687b      	ldr	r3, [r7, #4]
    9eee:	0018      	movs	r0, r3
    9ef0:	f000 fce8 	bl	a8c4 <_ZN6SdFile4syncEv>
    9ef4:	0003      	movs	r3, r0
    9ef6:	425a      	negs	r2, r3
    9ef8:	4153      	adcs	r3, r2
    9efa:	b2db      	uxtb	r3, r3
    9efc:	2b00      	cmp	r3, #0
    9efe:	d001      	beq.n	9f04 <_ZN6SdFile5closeEv+0x20>
    9f00:	2300      	movs	r3, #0
    9f02:	e003      	b.n	9f0c <_ZN6SdFile5closeEv+0x28>
  type_ = FAT_FILE_TYPE_CLOSED;
    9f04:	687b      	ldr	r3, [r7, #4]
    9f06:	2200      	movs	r2, #0
    9f08:	725a      	strb	r2, [r3, #9]
  return true;
    9f0a:	2301      	movs	r3, #1
}
    9f0c:	0018      	movs	r0, r3
    9f0e:	46bd      	mov	sp, r7
    9f10:	b002      	add	sp, #8
    9f12:	bd80      	pop	{r7, pc}

00009f14 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    9f14:	b590      	push	{r4, r7, lr}
    9f16:	b08b      	sub	sp, #44	; 0x2c
    9f18:	af00      	add	r7, sp, #0
    9f1a:	6078      	str	r0, [r7, #4]
    9f1c:	6039      	str	r1, [r7, #0]
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
    9f1e:	2327      	movs	r3, #39	; 0x27
    9f20:	18fb      	adds	r3, r7, r3
    9f22:	2207      	movs	r2, #7
    9f24:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
    9f26:	2326      	movs	r3, #38	; 0x26
    9f28:	18fb      	adds	r3, r7, r3
    9f2a:	2200      	movs	r2, #0
    9f2c:	701a      	strb	r2, [r3, #0]
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    9f2e:	2326      	movs	r3, #38	; 0x26
    9f30:	18fb      	adds	r3, r7, r3
    9f32:	781b      	ldrb	r3, [r3, #0]
    9f34:	2b0a      	cmp	r3, #10
    9f36:	dc0c      	bgt.n	9f52 <_ZN6SdFile10make83NameEPKcPh+0x3e>
    9f38:	2326      	movs	r3, #38	; 0x26
    9f3a:	18fb      	adds	r3, r7, r3
    9f3c:	781b      	ldrb	r3, [r3, #0]
    9f3e:	2226      	movs	r2, #38	; 0x26
    9f40:	18ba      	adds	r2, r7, r2
    9f42:	1c59      	adds	r1, r3, #1
    9f44:	7011      	strb	r1, [r2, #0]
    9f46:	001a      	movs	r2, r3
    9f48:	683b      	ldr	r3, [r7, #0]
    9f4a:	189b      	adds	r3, r3, r2
    9f4c:	2220      	movs	r2, #32
    9f4e:	701a      	strb	r2, [r3, #0]
    9f50:	e7ed      	b.n	9f2e <_ZN6SdFile10make83NameEPKcPh+0x1a>
  i = 0;
    9f52:	2326      	movs	r3, #38	; 0x26
    9f54:	18fb      	adds	r3, r7, r3
    9f56:	2200      	movs	r2, #0
    9f58:	701a      	strb	r2, [r3, #0]
  while ((c = *str++) != '\0') {
    9f5a:	687b      	ldr	r3, [r7, #4]
    9f5c:	1c5a      	adds	r2, r3, #1
    9f5e:	607a      	str	r2, [r7, #4]
    9f60:	221f      	movs	r2, #31
    9f62:	18ba      	adds	r2, r7, r2
    9f64:	781b      	ldrb	r3, [r3, #0]
    9f66:	7013      	strb	r3, [r2, #0]
    9f68:	231f      	movs	r3, #31
    9f6a:	18fb      	adds	r3, r7, r3
    9f6c:	781b      	ldrb	r3, [r3, #0]
    9f6e:	1e5a      	subs	r2, r3, #1
    9f70:	4193      	sbcs	r3, r2
    9f72:	b2db      	uxtb	r3, r3
    9f74:	2b00      	cmp	r3, #0
    9f76:	d100      	bne.n	9f7a <_ZN6SdFile10make83NameEPKcPh+0x66>
    9f78:	e06a      	b.n	a050 <_ZN6SdFile10make83NameEPKcPh+0x13c>
    if (c == '.') {
    9f7a:	231f      	movs	r3, #31
    9f7c:	18fb      	adds	r3, r7, r3
    9f7e:	781b      	ldrb	r3, [r3, #0]
    9f80:	2b2e      	cmp	r3, #46	; 0x2e
    9f82:	d10f      	bne.n	9fa4 <_ZN6SdFile10make83NameEPKcPh+0x90>
      if (n == 10) return false;  // only one dot allowed
    9f84:	2327      	movs	r3, #39	; 0x27
    9f86:	18fb      	adds	r3, r7, r3
    9f88:	781b      	ldrb	r3, [r3, #0]
    9f8a:	2b0a      	cmp	r3, #10
    9f8c:	d101      	bne.n	9f92 <_ZN6SdFile10make83NameEPKcPh+0x7e>
    9f8e:	2300      	movs	r3, #0
    9f90:	e064      	b.n	a05c <_ZN6SdFile10make83NameEPKcPh+0x148>
      n = 10;  // max index for full 8.3 name
    9f92:	2327      	movs	r3, #39	; 0x27
    9f94:	18fb      	adds	r3, r7, r3
    9f96:	220a      	movs	r2, #10
    9f98:	701a      	strb	r2, [r3, #0]
      i = 8;   // place for extension
    9f9a:	2326      	movs	r3, #38	; 0x26
    9f9c:	18fb      	adds	r3, r7, r3
    9f9e:	2208      	movs	r2, #8
    9fa0:	701a      	strb	r2, [r3, #0]
    9fa2:	e7da      	b.n	9f5a <_ZN6SdFile10make83NameEPKcPh+0x46>
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
#elif defined(__arm__)
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    9fa4:	230c      	movs	r3, #12
    9fa6:	18fb      	adds	r3, r7, r3
    9fa8:	4a2e      	ldr	r2, [pc, #184]	; (a064 <_ZN6SdFile10make83NameEPKcPh+0x150>)
    9faa:	ca13      	ldmia	r2!, {r0, r1, r4}
    9fac:	c313      	stmia	r3!, {r0, r1, r4}
    9fae:	6812      	ldr	r2, [r2, #0]
    9fb0:	601a      	str	r2, [r3, #0]
      const uint8_t *p = valid;
    9fb2:	230c      	movs	r3, #12
    9fb4:	18fb      	adds	r3, r7, r3
    9fb6:	623b      	str	r3, [r7, #32]
      while ((b = *p++)) if (b == c) return false;
    9fb8:	6a3b      	ldr	r3, [r7, #32]
    9fba:	1c5a      	adds	r2, r3, #1
    9fbc:	623a      	str	r2, [r7, #32]
    9fbe:	221e      	movs	r2, #30
    9fc0:	18ba      	adds	r2, r7, r2
    9fc2:	781b      	ldrb	r3, [r3, #0]
    9fc4:	7013      	strb	r3, [r2, #0]
    9fc6:	231e      	movs	r3, #30
    9fc8:	18fb      	adds	r3, r7, r3
    9fca:	781b      	ldrb	r3, [r3, #0]
    9fcc:	1e5a      	subs	r2, r3, #1
    9fce:	4193      	sbcs	r3, r2
    9fd0:	b2db      	uxtb	r3, r3
    9fd2:	2b00      	cmp	r3, #0
    9fd4:	d009      	beq.n	9fea <_ZN6SdFile10make83NameEPKcPh+0xd6>
    9fd6:	231e      	movs	r3, #30
    9fd8:	18fa      	adds	r2, r7, r3
    9fda:	231f      	movs	r3, #31
    9fdc:	18fb      	adds	r3, r7, r3
    9fde:	7812      	ldrb	r2, [r2, #0]
    9fe0:	781b      	ldrb	r3, [r3, #0]
    9fe2:	429a      	cmp	r2, r3
    9fe4:	d1e8      	bne.n	9fb8 <_ZN6SdFile10make83NameEPKcPh+0xa4>
    9fe6:	2300      	movs	r3, #0
    9fe8:	e038      	b.n	a05c <_ZN6SdFile10make83NameEPKcPh+0x148>
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    9fea:	2326      	movs	r3, #38	; 0x26
    9fec:	18fb      	adds	r3, r7, r3
    9fee:	781a      	ldrb	r2, [r3, #0]
    9ff0:	2327      	movs	r3, #39	; 0x27
    9ff2:	18fb      	adds	r3, r7, r3
    9ff4:	781b      	ldrb	r3, [r3, #0]
    9ff6:	429a      	cmp	r2, r3
    9ff8:	dc09      	bgt.n	a00e <_ZN6SdFile10make83NameEPKcPh+0xfa>
    9ffa:	231f      	movs	r3, #31
    9ffc:	18fb      	adds	r3, r7, r3
    9ffe:	781b      	ldrb	r3, [r3, #0]
    a000:	2b20      	cmp	r3, #32
    a002:	dd04      	ble.n	a00e <_ZN6SdFile10make83NameEPKcPh+0xfa>
    a004:	231f      	movs	r3, #31
    a006:	18fb      	adds	r3, r7, r3
    a008:	781b      	ldrb	r3, [r3, #0]
    a00a:	2b7e      	cmp	r3, #126	; 0x7e
    a00c:	dd01      	ble.n	a012 <_ZN6SdFile10make83NameEPKcPh+0xfe>
    a00e:	2300      	movs	r3, #0
    a010:	e024      	b.n	a05c <_ZN6SdFile10make83NameEPKcPh+0x148>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    a012:	2326      	movs	r3, #38	; 0x26
    a014:	18fb      	adds	r3, r7, r3
    a016:	781b      	ldrb	r3, [r3, #0]
    a018:	2226      	movs	r2, #38	; 0x26
    a01a:	18ba      	adds	r2, r7, r2
    a01c:	1c59      	adds	r1, r3, #1
    a01e:	7011      	strb	r1, [r2, #0]
    a020:	001a      	movs	r2, r3
    a022:	683b      	ldr	r3, [r7, #0]
    a024:	189a      	adds	r2, r3, r2
    a026:	231f      	movs	r3, #31
    a028:	18fb      	adds	r3, r7, r3
    a02a:	781b      	ldrb	r3, [r3, #0]
    a02c:	2b60      	cmp	r3, #96	; 0x60
    a02e:	dd0a      	ble.n	a046 <_ZN6SdFile10make83NameEPKcPh+0x132>
    a030:	231f      	movs	r3, #31
    a032:	18fb      	adds	r3, r7, r3
    a034:	781b      	ldrb	r3, [r3, #0]
    a036:	2b7a      	cmp	r3, #122	; 0x7a
    a038:	dc05      	bgt.n	a046 <_ZN6SdFile10make83NameEPKcPh+0x132>
    a03a:	231f      	movs	r3, #31
    a03c:	18fb      	adds	r3, r7, r3
    a03e:	781b      	ldrb	r3, [r3, #0]
    a040:	3b20      	subs	r3, #32
    a042:	b2db      	uxtb	r3, r3
    a044:	e002      	b.n	a04c <_ZN6SdFile10make83NameEPKcPh+0x138>
    a046:	231f      	movs	r3, #31
    a048:	18fb      	adds	r3, r7, r3
    a04a:	781b      	ldrb	r3, [r3, #0]
    a04c:	7013      	strb	r3, [r2, #0]
  while ((c = *str++) != '\0') {
    a04e:	e784      	b.n	9f5a <_ZN6SdFile10make83NameEPKcPh+0x46>
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    a050:	683b      	ldr	r3, [r7, #0]
    a052:	781b      	ldrb	r3, [r3, #0]
    a054:	3b20      	subs	r3, #32
    a056:	1e5a      	subs	r2, r3, #1
    a058:	4193      	sbcs	r3, r2
    a05a:	b2db      	uxtb	r3, r3
}
    a05c:	0018      	movs	r0, r3
    a05e:	46bd      	mov	sp, r7
    a060:	b00b      	add	sp, #44	; 0x2c
    a062:	bd90      	pop	{r4, r7, pc}
    a064:	000135f4 	.word	0x000135f4

0000a068 <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    a068:	b590      	push	{r4, r7, lr}
    a06a:	b08b      	sub	sp, #44	; 0x2c
    a06c:	af00      	add	r7, sp, #0
    a06e:	60f8      	str	r0, [r7, #12]
    a070:	60b9      	str	r1, [r7, #8]
    a072:	607a      	str	r2, [r7, #4]
    a074:	001a      	movs	r2, r3
    a076:	1cfb      	adds	r3, r7, #3
    a078:	701a      	strb	r2, [r3, #0]
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    a07a:	68fb      	ldr	r3, [r7, #12]
    a07c:	0018      	movs	r0, r3
    a07e:	f7fe fbbc 	bl	87fa <_ZNK6SdFile6isOpenEv>
    a082:	0003      	movs	r3, r0
    a084:	1e5a      	subs	r2, r3, #1
    a086:	4193      	sbcs	r3, r2
    a088:	b2db      	uxtb	r3, r3
    a08a:	2b00      	cmp	r3, #0
    a08c:	d001      	beq.n	a092 <_ZN6SdFile4openEPS_PKch+0x2a>
    a08e:	2300      	movs	r3, #0
    a090:	e13c      	b.n	a30c <_ZN6SdFile4openEPS_PKch+0x2a4>

  if (!make83Name(fileName, dname)) return false;
    a092:	2314      	movs	r3, #20
    a094:	18fa      	adds	r2, r7, r3
    a096:	687b      	ldr	r3, [r7, #4]
    a098:	0011      	movs	r1, r2
    a09a:	0018      	movs	r0, r3
    a09c:	f7ff ff3a 	bl	9f14 <_ZN6SdFile10make83NameEPKcPh>
    a0a0:	0003      	movs	r3, r0
    a0a2:	425a      	negs	r2, r3
    a0a4:	4153      	adcs	r3, r2
    a0a6:	b2db      	uxtb	r3, r3
    a0a8:	2b00      	cmp	r3, #0
    a0aa:	d001      	beq.n	a0b0 <_ZN6SdFile4openEPS_PKch+0x48>
    a0ac:	2300      	movs	r3, #0
    a0ae:	e12d      	b.n	a30c <_ZN6SdFile4openEPS_PKch+0x2a4>
  vol_ = dirFile->vol_;
    a0b0:	68bb      	ldr	r3, [r7, #8]
    a0b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a0b4:	68fb      	ldr	r3, [r7, #12]
    a0b6:	625a      	str	r2, [r3, #36]	; 0x24
  dirFile->rewind();
    a0b8:	68bb      	ldr	r3, [r7, #8]
    a0ba:	0018      	movs	r0, r3
    a0bc:	f7fe fd8c 	bl	8bd8 <_ZN6SdFile6rewindEv>

  // bool for empty entry found
  uint8_t emptyFound = false;
    a0c0:	2323      	movs	r3, #35	; 0x23
    a0c2:	18fb      	adds	r3, r7, r3
    a0c4:	2200      	movs	r2, #0
    a0c6:	701a      	strb	r2, [r3, #0]

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    a0c8:	68bb      	ldr	r3, [r7, #8]
    a0ca:	691a      	ldr	r2, [r3, #16]
    a0cc:	68bb      	ldr	r3, [r7, #8]
    a0ce:	69db      	ldr	r3, [r3, #28]
    a0d0:	429a      	cmp	r2, r3
    a0d2:	d252      	bcs.n	a17a <_ZN6SdFile4openEPS_PKch+0x112>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    a0d4:	68bb      	ldr	r3, [r7, #8]
    a0d6:	691b      	ldr	r3, [r3, #16]
    a0d8:	095b      	lsrs	r3, r3, #5
    a0da:	b2da      	uxtb	r2, r3
    a0dc:	2322      	movs	r3, #34	; 0x22
    a0de:	18fb      	adds	r3, r7, r3
    a0e0:	210f      	movs	r1, #15
    a0e2:	400a      	ands	r2, r1
    a0e4:	701a      	strb	r2, [r3, #0]
    p = dirFile->readDirCache();
    a0e6:	68bb      	ldr	r3, [r7, #8]
    a0e8:	0018      	movs	r0, r3
    a0ea:	f000 fb43 	bl	a774 <_ZN6SdFile12readDirCacheEv>
    a0ee:	0003      	movs	r3, r0
    a0f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (p == NULL) return false;
    a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0f4:	2b00      	cmp	r3, #0
    a0f6:	d101      	bne.n	a0fc <_ZN6SdFile4openEPS_PKch+0x94>
    a0f8:	2300      	movs	r3, #0
    a0fa:	e107      	b.n	a30c <_ZN6SdFile4openEPS_PKch+0x2a4>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0fe:	781b      	ldrb	r3, [r3, #0]
    a100:	2b00      	cmp	r3, #0
    a102:	d003      	beq.n	a10c <_ZN6SdFile4openEPS_PKch+0xa4>
    a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a106:	781b      	ldrb	r3, [r3, #0]
    a108:	2be5      	cmp	r3, #229	; 0xe5
    a10a:	d116      	bne.n	a13a <_ZN6SdFile4openEPS_PKch+0xd2>
      // remember first empty slot
      if (!emptyFound) {
    a10c:	2323      	movs	r3, #35	; 0x23
    a10e:	18fb      	adds	r3, r7, r3
    a110:	781b      	ldrb	r3, [r3, #0]
    a112:	2b00      	cmp	r3, #0
    a114:	d10c      	bne.n	a130 <_ZN6SdFile4openEPS_PKch+0xc8>
        emptyFound = true;
    a116:	2323      	movs	r3, #35	; 0x23
    a118:	18fb      	adds	r3, r7, r3
    a11a:	2201      	movs	r2, #1
    a11c:	701a      	strb	r2, [r3, #0]
        dirIndex_ = index;
    a11e:	68fb      	ldr	r3, [r7, #12]
    a120:	2222      	movs	r2, #34	; 0x22
    a122:	18ba      	adds	r2, r7, r2
    a124:	7812      	ldrb	r2, [r2, #0]
    a126:	761a      	strb	r2, [r3, #24]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    a128:	4b7a      	ldr	r3, [pc, #488]	; (a314 <_ZN6SdFile4openEPS_PKch+0x2ac>)
    a12a:	681a      	ldr	r2, [r3, #0]
    a12c:	68fb      	ldr	r3, [r7, #12]
    a12e:	615a      	str	r2, [r3, #20]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a132:	781b      	ldrb	r3, [r3, #0]
    a134:	2b00      	cmp	r3, #0
    a136:	d11f      	bne.n	a178 <_ZN6SdFile4openEPS_PKch+0x110>
    a138:	e01f      	b.n	a17a <_ZN6SdFile4openEPS_PKch+0x112>
    } else if (!memcmp(dname, p->name, 11)) {
    a13a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a13c:	2314      	movs	r3, #20
    a13e:	18fb      	adds	r3, r7, r3
    a140:	220b      	movs	r2, #11
    a142:	0018      	movs	r0, r3
    a144:	f006 fb66 	bl	10814 <memcmp>
    a148:	1e03      	subs	r3, r0, #0
    a14a:	d1bd      	bne.n	a0c8 <_ZN6SdFile4openEPS_PKch+0x60>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    a14c:	1cfb      	adds	r3, r7, #3
    a14e:	781b      	ldrb	r3, [r3, #0]
    a150:	2230      	movs	r2, #48	; 0x30
    a152:	4013      	ands	r3, r2
    a154:	2b30      	cmp	r3, #48	; 0x30
    a156:	d101      	bne.n	a15c <_ZN6SdFile4openEPS_PKch+0xf4>
    a158:	2300      	movs	r3, #0
    a15a:	e0d7      	b.n	a30c <_ZN6SdFile4openEPS_PKch+0x2a4>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    a15c:	2322      	movs	r3, #34	; 0x22
    a15e:	18fb      	adds	r3, r7, r3
    a160:	781b      	ldrb	r3, [r3, #0]
    a162:	220f      	movs	r2, #15
    a164:	4013      	ands	r3, r2
    a166:	b2d9      	uxtb	r1, r3
    a168:	1cfb      	adds	r3, r7, #3
    a16a:	781a      	ldrb	r2, [r3, #0]
    a16c:	68fb      	ldr	r3, [r7, #12]
    a16e:	0018      	movs	r0, r3
    a170:	f000 f8d6 	bl	a320 <_ZN6SdFile15openCachedEntryEhh>
    a174:	0003      	movs	r3, r0
    a176:	e0c9      	b.n	a30c <_ZN6SdFile4openEPS_PKch+0x2a4>
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    a178:	e7a6      	b.n	a0c8 <_ZN6SdFile4openEPS_PKch+0x60>
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    a17a:	1cfb      	adds	r3, r7, #3
    a17c:	781b      	ldrb	r3, [r3, #0]
    a17e:	2212      	movs	r2, #18
    a180:	4013      	ands	r3, r2
    a182:	2b12      	cmp	r3, #18
    a184:	d001      	beq.n	a18a <_ZN6SdFile4openEPS_PKch+0x122>
    a186:	2300      	movs	r3, #0
    a188:	e0c0      	b.n	a30c <_ZN6SdFile4openEPS_PKch+0x2a4>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    a18a:	2323      	movs	r3, #35	; 0x23
    a18c:	18fb      	adds	r3, r7, r3
    a18e:	781b      	ldrb	r3, [r3, #0]
    a190:	2b00      	cmp	r3, #0
    a192:	d00b      	beq.n	a1ac <_ZN6SdFile4openEPS_PKch+0x144>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    a194:	68fb      	ldr	r3, [r7, #12]
    a196:	2101      	movs	r1, #1
    a198:	0018      	movs	r0, r3
    a19a:	f7ff fe81 	bl	9ea0 <_ZN6SdFile13cacheDirEntryEh>
    a19e:	0003      	movs	r3, r0
    a1a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (!p) return false;
    a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d118      	bne.n	a1da <_ZN6SdFile4openEPS_PKch+0x172>
    a1a8:	2300      	movs	r3, #0
    a1aa:	e0af      	b.n	a30c <_ZN6SdFile4openEPS_PKch+0x2a4>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    a1ac:	68bb      	ldr	r3, [r7, #8]
    a1ae:	7a5b      	ldrb	r3, [r3, #9]
    a1b0:	2b02      	cmp	r3, #2
    a1b2:	d101      	bne.n	a1b8 <_ZN6SdFile4openEPS_PKch+0x150>
    a1b4:	2300      	movs	r3, #0
    a1b6:	e0a9      	b.n	a30c <_ZN6SdFile4openEPS_PKch+0x2a4>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    a1b8:	68bb      	ldr	r3, [r7, #8]
    a1ba:	0018      	movs	r0, r3
    a1bc:	f7ff fe21 	bl	9e02 <_ZN6SdFile13addDirClusterEv>
    a1c0:	0003      	movs	r3, r0
    a1c2:	425a      	negs	r2, r3
    a1c4:	4153      	adcs	r3, r2
    a1c6:	b2db      	uxtb	r3, r3
    a1c8:	2b00      	cmp	r3, #0
    a1ca:	d001      	beq.n	a1d0 <_ZN6SdFile4openEPS_PKch+0x168>
    a1cc:	2300      	movs	r3, #0
    a1ce:	e09d      	b.n	a30c <_ZN6SdFile4openEPS_PKch+0x2a4>

    // use first entry in cluster
    dirIndex_ = 0;
    a1d0:	68fb      	ldr	r3, [r7, #12]
    a1d2:	2200      	movs	r2, #0
    a1d4:	761a      	strb	r2, [r3, #24]
    p = SdVolume::cacheBuffer_.dir;
    a1d6:	4b50      	ldr	r3, [pc, #320]	; (a318 <_ZN6SdFile4openEPS_PKch+0x2b0>)
    a1d8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1dc:	2220      	movs	r2, #32
    a1de:	2100      	movs	r1, #0
    a1e0:	0018      	movs	r0, r3
    a1e2:	f006 fb2f 	bl	10844 <memset>
  memcpy(p->name, dname, 11);
    a1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a1e8:	2314      	movs	r3, #20
    a1ea:	18fb      	adds	r3, r7, r3
    a1ec:	0010      	movs	r0, r2
    a1ee:	0019      	movs	r1, r3
    a1f0:	230b      	movs	r3, #11
    a1f2:	001a      	movs	r2, r3
    a1f4:	f006 fb1d 	bl	10832 <memcpy>

  // set timestamps
  if (dateTime_) {
    a1f8:	4b48      	ldr	r3, [pc, #288]	; (a31c <_ZN6SdFile4openEPS_PKch+0x2b4>)
    a1fa:	681b      	ldr	r3, [r3, #0]
    a1fc:	2b00      	cmp	r3, #0
    a1fe:	d009      	beq.n	a214 <_ZN6SdFile4openEPS_PKch+0x1ac>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    a200:	4b46      	ldr	r3, [pc, #280]	; (a31c <_ZN6SdFile4openEPS_PKch+0x2b4>)
    a202:	681b      	ldr	r3, [r3, #0]
    a204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a206:	3210      	adds	r2, #16
    a208:	0010      	movs	r0, r2
    a20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a20c:	320e      	adds	r2, #14
    a20e:	0011      	movs	r1, r2
    a210:	4798      	blx	r3
    a212:	e01a      	b.n	a24a <_ZN6SdFile4openEPS_PKch+0x1e2>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a216:	7c1a      	ldrb	r2, [r3, #16]
    a218:	2100      	movs	r1, #0
    a21a:	400a      	ands	r2, r1
    a21c:	1c11      	adds	r1, r2, #0
    a21e:	2221      	movs	r2, #33	; 0x21
    a220:	430a      	orrs	r2, r1
    a222:	741a      	strb	r2, [r3, #16]
    a224:	7c5a      	ldrb	r2, [r3, #17]
    a226:	2100      	movs	r1, #0
    a228:	400a      	ands	r2, r1
    a22a:	1c11      	adds	r1, r2, #0
    a22c:	2228      	movs	r2, #40	; 0x28
    a22e:	430a      	orrs	r2, r1
    a230:	745a      	strb	r2, [r3, #17]
    p->creationTime = FAT_DEFAULT_TIME;
    a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a234:	7b9a      	ldrb	r2, [r3, #14]
    a236:	2100      	movs	r1, #0
    a238:	400a      	ands	r2, r1
    a23a:	739a      	strb	r2, [r3, #14]
    a23c:	7bda      	ldrb	r2, [r3, #15]
    a23e:	2100      	movs	r1, #0
    a240:	400a      	ands	r2, r1
    a242:	1c11      	adds	r1, r2, #0
    a244:	2208      	movs	r2, #8
    a246:	430a      	orrs	r2, r1
    a248:	73da      	strb	r2, [r3, #15]
  }
  p->lastAccessDate = p->creationDate;
    a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a24c:	7c1a      	ldrb	r2, [r3, #16]
    a24e:	7c5b      	ldrb	r3, [r3, #17]
    a250:	021b      	lsls	r3, r3, #8
    a252:	4313      	orrs	r3, r2
    a254:	b29a      	uxth	r2, r3
    a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a258:	21ff      	movs	r1, #255	; 0xff
    a25a:	4011      	ands	r1, r2
    a25c:	000c      	movs	r4, r1
    a25e:	7c99      	ldrb	r1, [r3, #18]
    a260:	2000      	movs	r0, #0
    a262:	4001      	ands	r1, r0
    a264:	1c08      	adds	r0, r1, #0
    a266:	1c21      	adds	r1, r4, #0
    a268:	4301      	orrs	r1, r0
    a26a:	7499      	strb	r1, [r3, #18]
    a26c:	0a12      	lsrs	r2, r2, #8
    a26e:	b290      	uxth	r0, r2
    a270:	7cda      	ldrb	r2, [r3, #19]
    a272:	2100      	movs	r1, #0
    a274:	400a      	ands	r2, r1
    a276:	1c11      	adds	r1, r2, #0
    a278:	1c02      	adds	r2, r0, #0
    a27a:	430a      	orrs	r2, r1
    a27c:	74da      	strb	r2, [r3, #19]
  p->lastWriteDate = p->creationDate;
    a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a280:	7c1a      	ldrb	r2, [r3, #16]
    a282:	7c5b      	ldrb	r3, [r3, #17]
    a284:	021b      	lsls	r3, r3, #8
    a286:	4313      	orrs	r3, r2
    a288:	b29a      	uxth	r2, r3
    a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a28c:	21ff      	movs	r1, #255	; 0xff
    a28e:	4011      	ands	r1, r2
    a290:	000c      	movs	r4, r1
    a292:	7e19      	ldrb	r1, [r3, #24]
    a294:	2000      	movs	r0, #0
    a296:	4001      	ands	r1, r0
    a298:	1c08      	adds	r0, r1, #0
    a29a:	1c21      	adds	r1, r4, #0
    a29c:	4301      	orrs	r1, r0
    a29e:	7619      	strb	r1, [r3, #24]
    a2a0:	0a12      	lsrs	r2, r2, #8
    a2a2:	b290      	uxth	r0, r2
    a2a4:	7e5a      	ldrb	r2, [r3, #25]
    a2a6:	2100      	movs	r1, #0
    a2a8:	400a      	ands	r2, r1
    a2aa:	1c11      	adds	r1, r2, #0
    a2ac:	1c02      	adds	r2, r0, #0
    a2ae:	430a      	orrs	r2, r1
    a2b0:	765a      	strb	r2, [r3, #25]
  p->lastWriteTime = p->creationTime;
    a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2b4:	7b9a      	ldrb	r2, [r3, #14]
    a2b6:	7bdb      	ldrb	r3, [r3, #15]
    a2b8:	021b      	lsls	r3, r3, #8
    a2ba:	4313      	orrs	r3, r2
    a2bc:	b29a      	uxth	r2, r3
    a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2c0:	21ff      	movs	r1, #255	; 0xff
    a2c2:	4011      	ands	r1, r2
    a2c4:	000c      	movs	r4, r1
    a2c6:	7d99      	ldrb	r1, [r3, #22]
    a2c8:	2000      	movs	r0, #0
    a2ca:	4001      	ands	r1, r0
    a2cc:	1c08      	adds	r0, r1, #0
    a2ce:	1c21      	adds	r1, r4, #0
    a2d0:	4301      	orrs	r1, r0
    a2d2:	7599      	strb	r1, [r3, #22]
    a2d4:	0a12      	lsrs	r2, r2, #8
    a2d6:	b290      	uxth	r0, r2
    a2d8:	7dda      	ldrb	r2, [r3, #23]
    a2da:	2100      	movs	r1, #0
    a2dc:	400a      	ands	r2, r1
    a2de:	1c11      	adds	r1, r2, #0
    a2e0:	1c02      	adds	r2, r0, #0
    a2e2:	430a      	orrs	r2, r1
    a2e4:	75da      	strb	r2, [r3, #23]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    a2e6:	f000 fea1 	bl	b02c <_ZN8SdVolume10cacheFlushEv>
    a2ea:	0003      	movs	r3, r0
    a2ec:	425a      	negs	r2, r3
    a2ee:	4153      	adcs	r3, r2
    a2f0:	b2db      	uxtb	r3, r3
    a2f2:	2b00      	cmp	r3, #0
    a2f4:	d001      	beq.n	a2fa <_ZN6SdFile4openEPS_PKch+0x292>
    a2f6:	2300      	movs	r3, #0
    a2f8:	e008      	b.n	a30c <_ZN6SdFile4openEPS_PKch+0x2a4>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    a2fa:	68fb      	ldr	r3, [r7, #12]
    a2fc:	7e19      	ldrb	r1, [r3, #24]
    a2fe:	1cfb      	adds	r3, r7, #3
    a300:	781a      	ldrb	r2, [r3, #0]
    a302:	68fb      	ldr	r3, [r7, #12]
    a304:	0018      	movs	r0, r3
    a306:	f000 f80b 	bl	a320 <_ZN6SdFile15openCachedEntryEhh>
    a30a:	0003      	movs	r3, r0
}
    a30c:	0018      	movs	r0, r3
    a30e:	46bd      	mov	sp, r7
    a310:	b00b      	add	sp, #44	; 0x2c
    a312:	bd90      	pop	{r4, r7, pc}
    a314:	2000004c 	.word	0x2000004c
    a318:	20000968 	.word	0x20000968
    a31c:	20000964 	.word	0x20000964

0000a320 <_ZN6SdFile15openCachedEntryEhh>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    a320:	b580      	push	{r7, lr}
    a322:	b084      	sub	sp, #16
    a324:	af00      	add	r7, sp, #0
    a326:	6078      	str	r0, [r7, #4]
    a328:	0008      	movs	r0, r1
    a32a:	0011      	movs	r1, r2
    a32c:	1cfb      	adds	r3, r7, #3
    a32e:	1c02      	adds	r2, r0, #0
    a330:	701a      	strb	r2, [r3, #0]
    a332:	1cbb      	adds	r3, r7, #2
    a334:	1c0a      	adds	r2, r1, #0
    a336:	701a      	strb	r2, [r3, #0]
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    a338:	1cfb      	adds	r3, r7, #3
    a33a:	781b      	ldrb	r3, [r3, #0]
    a33c:	015a      	lsls	r2, r3, #5
    a33e:	4b43      	ldr	r3, [pc, #268]	; (a44c <_ZN6SdFile15openCachedEntryEhh+0x12c>)
    a340:	18d3      	adds	r3, r2, r3
    a342:	60fb      	str	r3, [r7, #12]

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    a344:	68fb      	ldr	r3, [r7, #12]
    a346:	7adb      	ldrb	r3, [r3, #11]
    a348:	001a      	movs	r2, r3
    a34a:	2311      	movs	r3, #17
    a34c:	4013      	ands	r3, r2
    a34e:	d006      	beq.n	a35e <_ZN6SdFile15openCachedEntryEhh+0x3e>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    a350:	1cbb      	adds	r3, r7, #2
    a352:	781b      	ldrb	r3, [r3, #0]
    a354:	2242      	movs	r2, #66	; 0x42
    a356:	4013      	ands	r3, r2
    a358:	d001      	beq.n	a35e <_ZN6SdFile15openCachedEntryEhh+0x3e>
    a35a:	2300      	movs	r3, #0
    a35c:	e072      	b.n	a444 <_ZN6SdFile15openCachedEntryEhh+0x124>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    a35e:	687b      	ldr	r3, [r7, #4]
    a360:	1cfa      	adds	r2, r7, #3
    a362:	7812      	ldrb	r2, [r2, #0]
    a364:	761a      	strb	r2, [r3, #24]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    a366:	4b3a      	ldr	r3, [pc, #232]	; (a450 <_ZN6SdFile15openCachedEntryEhh+0x130>)
    a368:	681a      	ldr	r2, [r3, #0]
    a36a:	687b      	ldr	r3, [r7, #4]
    a36c:	615a      	str	r2, [r3, #20]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    a36e:	68fb      	ldr	r3, [r7, #12]
    a370:	7d1a      	ldrb	r2, [r3, #20]
    a372:	7d5b      	ldrb	r3, [r3, #21]
    a374:	021b      	lsls	r3, r3, #8
    a376:	4313      	orrs	r3, r2
    a378:	b29b      	uxth	r3, r3
    a37a:	041a      	lsls	r2, r3, #16
    a37c:	687b      	ldr	r3, [r7, #4]
    a37e:	621a      	str	r2, [r3, #32]
  firstCluster_ |= p->firstClusterLow;
    a380:	687b      	ldr	r3, [r7, #4]
    a382:	6a1a      	ldr	r2, [r3, #32]
    a384:	68fb      	ldr	r3, [r7, #12]
    a386:	7e99      	ldrb	r1, [r3, #26]
    a388:	7edb      	ldrb	r3, [r3, #27]
    a38a:	021b      	lsls	r3, r3, #8
    a38c:	430b      	orrs	r3, r1
    a38e:	b29b      	uxth	r3, r3
    a390:	431a      	orrs	r2, r3
    a392:	687b      	ldr	r3, [r7, #4]
    a394:	621a      	str	r2, [r3, #32]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    a396:	68fb      	ldr	r3, [r7, #12]
    a398:	0018      	movs	r0, r3
    a39a:	f7ff fc0f 	bl	9bbc <_ZL11DIR_IS_FILEPK14directoryEntry>
    a39e:	0003      	movs	r3, r0
    a3a0:	1e5a      	subs	r2, r3, #1
    a3a2:	4193      	sbcs	r3, r2
    a3a4:	b2db      	uxtb	r3, r3
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d011      	beq.n	a3ce <_ZN6SdFile15openCachedEntryEhh+0xae>
    fileSize_ = p->fileSize;
    a3aa:	68fb      	ldr	r3, [r7, #12]
    a3ac:	7f1a      	ldrb	r2, [r3, #28]
    a3ae:	7f59      	ldrb	r1, [r3, #29]
    a3b0:	0209      	lsls	r1, r1, #8
    a3b2:	430a      	orrs	r2, r1
    a3b4:	7f99      	ldrb	r1, [r3, #30]
    a3b6:	0409      	lsls	r1, r1, #16
    a3b8:	430a      	orrs	r2, r1
    a3ba:	7fdb      	ldrb	r3, [r3, #31]
    a3bc:	061b      	lsls	r3, r3, #24
    a3be:	4313      	orrs	r3, r2
    a3c0:	001a      	movs	r2, r3
    a3c2:	687b      	ldr	r3, [r7, #4]
    a3c4:	61da      	str	r2, [r3, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
    a3c6:	687b      	ldr	r3, [r7, #4]
    a3c8:	2201      	movs	r2, #1
    a3ca:	725a      	strb	r2, [r3, #9]
    a3cc:	e020      	b.n	a410 <_ZN6SdFile15openCachedEntryEhh+0xf0>
  } else if (DIR_IS_SUBDIR(p)) {
    a3ce:	68fb      	ldr	r3, [r7, #12]
    a3d0:	0018      	movs	r0, r3
    a3d2:	f7ff fc03 	bl	9bdc <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
    a3d6:	0003      	movs	r3, r0
    a3d8:	1e5a      	subs	r2, r3, #1
    a3da:	4193      	sbcs	r3, r2
    a3dc:	b2db      	uxtb	r3, r3
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d014      	beq.n	a40c <_ZN6SdFile15openCachedEntryEhh+0xec>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    a3e2:	687b      	ldr	r3, [r7, #4]
    a3e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a3e6:	687b      	ldr	r3, [r7, #4]
    a3e8:	6a19      	ldr	r1, [r3, #32]
    a3ea:	687b      	ldr	r3, [r7, #4]
    a3ec:	331c      	adds	r3, #28
    a3ee:	001a      	movs	r2, r3
    a3f0:	f000 fece 	bl	b190 <_ZNK8SdVolume9chainSizeEmPm>
    a3f4:	0003      	movs	r3, r0
    a3f6:	425a      	negs	r2, r3
    a3f8:	4153      	adcs	r3, r2
    a3fa:	b2db      	uxtb	r3, r3
    a3fc:	2b00      	cmp	r3, #0
    a3fe:	d001      	beq.n	a404 <_ZN6SdFile15openCachedEntryEhh+0xe4>
    a400:	2300      	movs	r3, #0
    a402:	e01f      	b.n	a444 <_ZN6SdFile15openCachedEntryEhh+0x124>
    type_ = FAT_FILE_TYPE_SUBDIR;
    a404:	687b      	ldr	r3, [r7, #4]
    a406:	2204      	movs	r2, #4
    a408:	725a      	strb	r2, [r3, #9]
    a40a:	e001      	b.n	a410 <_ZN6SdFile15openCachedEntryEhh+0xf0>
  } else {
    return false;
    a40c:	2300      	movs	r3, #0
    a40e:	e019      	b.n	a444 <_ZN6SdFile15openCachedEntryEhh+0x124>
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    a410:	1cbb      	adds	r3, r7, #2
    a412:	781b      	ldrb	r3, [r3, #0]
    a414:	220f      	movs	r2, #15
    a416:	4013      	ands	r3, r2
    a418:	b2da      	uxtb	r2, r3
    a41a:	687b      	ldr	r3, [r7, #4]
    a41c:	721a      	strb	r2, [r3, #8]

  // set to start of file
  curCluster_ = 0;
    a41e:	687b      	ldr	r3, [r7, #4]
    a420:	2200      	movs	r2, #0
    a422:	60da      	str	r2, [r3, #12]
  curPosition_ = 0;
    a424:	687b      	ldr	r3, [r7, #4]
    a426:	2200      	movs	r2, #0
    a428:	611a      	str	r2, [r3, #16]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    a42a:	1cbb      	adds	r3, r7, #2
    a42c:	781b      	ldrb	r3, [r3, #0]
    a42e:	2240      	movs	r2, #64	; 0x40
    a430:	4013      	ands	r3, r2
    a432:	d006      	beq.n	a442 <_ZN6SdFile15openCachedEntryEhh+0x122>
    a434:	687b      	ldr	r3, [r7, #4]
    a436:	2100      	movs	r1, #0
    a438:	0018      	movs	r0, r3
    a43a:	f000 fb01 	bl	aa40 <_ZN6SdFile8truncateEm>
    a43e:	0003      	movs	r3, r0
    a440:	e000      	b.n	a444 <_ZN6SdFile15openCachedEntryEhh+0x124>
  return true;
    a442:	2301      	movs	r3, #1
}
    a444:	0018      	movs	r0, r3
    a446:	46bd      	mov	sp, r7
    a448:	b004      	add	sp, #16
    a44a:	bd80      	pop	{r7, pc}
    a44c:	20000968 	.word	0x20000968
    a450:	2000004c 	.word	0x2000004c

0000a454 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    a454:	b580      	push	{r7, lr}
    a456:	b082      	sub	sp, #8
    a458:	af00      	add	r7, sp, #0
    a45a:	6078      	str	r0, [r7, #4]
    a45c:	6039      	str	r1, [r7, #0]
  // error if file is already open
  if (isOpen()) return false;
    a45e:	687b      	ldr	r3, [r7, #4]
    a460:	0018      	movs	r0, r3
    a462:	f7fe f9ca 	bl	87fa <_ZNK6SdFile6isOpenEv>
    a466:	0003      	movs	r3, r0
    a468:	1e5a      	subs	r2, r3, #1
    a46a:	4193      	sbcs	r3, r2
    a46c:	b2db      	uxtb	r3, r3
    a46e:	2b00      	cmp	r3, #0
    a470:	d001      	beq.n	a476 <_ZN6SdFile8openRootEP8SdVolume+0x22>
    a472:	2300      	movs	r3, #0
    a474:	e054      	b.n	a520 <_ZN6SdFile8openRootEP8SdVolume+0xcc>

  if (vol->fatType() == 16) {
    a476:	683b      	ldr	r3, [r7, #0]
    a478:	0018      	movs	r0, r3
    a47a:	f7ff fbeb 	bl	9c54 <_ZNK8SdVolume7fatTypeEv>
    a47e:	0003      	movs	r3, r0
    a480:	3b10      	subs	r3, #16
    a482:	425a      	negs	r2, r3
    a484:	4153      	adcs	r3, r2
    a486:	b2db      	uxtb	r3, r3
    a488:	2b00      	cmp	r3, #0
    a48a:	d00e      	beq.n	a4aa <_ZN6SdFile8openRootEP8SdVolume+0x56>
    type_ = FAT_FILE_TYPE_ROOT16;
    a48c:	687b      	ldr	r3, [r7, #4]
    a48e:	2202      	movs	r2, #2
    a490:	725a      	strb	r2, [r3, #9]
    firstCluster_ = 0;
    a492:	687b      	ldr	r3, [r7, #4]
    a494:	2200      	movs	r2, #0
    a496:	621a      	str	r2, [r3, #32]
    fileSize_ = 32 * vol->rootDirEntryCount();
    a498:	683b      	ldr	r3, [r7, #0]
    a49a:	0018      	movs	r0, r3
    a49c:	f7ff fbe5 	bl	9c6a <_ZNK8SdVolume17rootDirEntryCountEv>
    a4a0:	0003      	movs	r3, r0
    a4a2:	015a      	lsls	r2, r3, #5
    a4a4:	687b      	ldr	r3, [r7, #4]
    a4a6:	61da      	str	r2, [r3, #28]
    a4a8:	e027      	b.n	a4fa <_ZN6SdFile8openRootEP8SdVolume+0xa6>
  } else if (vol->fatType() == 32) {
    a4aa:	683b      	ldr	r3, [r7, #0]
    a4ac:	0018      	movs	r0, r3
    a4ae:	f7ff fbd1 	bl	9c54 <_ZNK8SdVolume7fatTypeEv>
    a4b2:	0003      	movs	r3, r0
    a4b4:	3b20      	subs	r3, #32
    a4b6:	425a      	negs	r2, r3
    a4b8:	4153      	adcs	r3, r2
    a4ba:	b2db      	uxtb	r3, r3
    a4bc:	2b00      	cmp	r3, #0
    a4be:	d01a      	beq.n	a4f6 <_ZN6SdFile8openRootEP8SdVolume+0xa2>
    type_ = FAT_FILE_TYPE_ROOT32;
    a4c0:	687b      	ldr	r3, [r7, #4]
    a4c2:	2203      	movs	r2, #3
    a4c4:	725a      	strb	r2, [r3, #9]
    firstCluster_ = vol->rootDirStart();
    a4c6:	683b      	ldr	r3, [r7, #0]
    a4c8:	0018      	movs	r0, r3
    a4ca:	f7ff fbd8 	bl	9c7e <_ZNK8SdVolume12rootDirStartEv>
    a4ce:	0002      	movs	r2, r0
    a4d0:	687b      	ldr	r3, [r7, #4]
    a4d2:	621a      	str	r2, [r3, #32]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    a4d4:	687b      	ldr	r3, [r7, #4]
    a4d6:	6a19      	ldr	r1, [r3, #32]
    a4d8:	687b      	ldr	r3, [r7, #4]
    a4da:	331c      	adds	r3, #28
    a4dc:	001a      	movs	r2, r3
    a4de:	683b      	ldr	r3, [r7, #0]
    a4e0:	0018      	movs	r0, r3
    a4e2:	f000 fe55 	bl	b190 <_ZNK8SdVolume9chainSizeEmPm>
    a4e6:	0003      	movs	r3, r0
    a4e8:	425a      	negs	r2, r3
    a4ea:	4153      	adcs	r3, r2
    a4ec:	b2db      	uxtb	r3, r3
    a4ee:	2b00      	cmp	r3, #0
    a4f0:	d003      	beq.n	a4fa <_ZN6SdFile8openRootEP8SdVolume+0xa6>
    a4f2:	2300      	movs	r3, #0
    a4f4:	e014      	b.n	a520 <_ZN6SdFile8openRootEP8SdVolume+0xcc>
  } else {
    // volume is not initialized or FAT12
    return false;
    a4f6:	2300      	movs	r3, #0
    a4f8:	e012      	b.n	a520 <_ZN6SdFile8openRootEP8SdVolume+0xcc>
  }
  vol_ = vol;
    a4fa:	687b      	ldr	r3, [r7, #4]
    a4fc:	683a      	ldr	r2, [r7, #0]
    a4fe:	625a      	str	r2, [r3, #36]	; 0x24
  // read only
  flags_ = O_READ;
    a500:	687b      	ldr	r3, [r7, #4]
    a502:	2201      	movs	r2, #1
    a504:	721a      	strb	r2, [r3, #8]

  // set to start of file
  curCluster_ = 0;
    a506:	687b      	ldr	r3, [r7, #4]
    a508:	2200      	movs	r2, #0
    a50a:	60da      	str	r2, [r3, #12]
  curPosition_ = 0;
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	2200      	movs	r2, #0
    a510:	611a      	str	r2, [r3, #16]

  // root has no directory entry
  dirBlock_ = 0;
    a512:	687b      	ldr	r3, [r7, #4]
    a514:	2200      	movs	r2, #0
    a516:	615a      	str	r2, [r3, #20]
  dirIndex_ = 0;
    a518:	687b      	ldr	r3, [r7, #4]
    a51a:	2200      	movs	r2, #0
    a51c:	761a      	strb	r2, [r3, #24]
  return true;
    a51e:	2301      	movs	r3, #1
}
    a520:	0018      	movs	r0, r3
    a522:	46bd      	mov	sp, r7
    a524:	b002      	add	sp, #8
    a526:	bd80      	pop	{r7, pc}

0000a528 <_ZN6SdFile4readEPvt>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    a528:	b590      	push	{r4, r7, lr}
    a52a:	b08f      	sub	sp, #60	; 0x3c
    a52c:	af02      	add	r7, sp, #8
    a52e:	60f8      	str	r0, [r7, #12]
    a530:	60b9      	str	r1, [r7, #8]
    a532:	1dbb      	adds	r3, r7, #6
    a534:	801a      	strh	r2, [r3, #0]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    a536:	68bb      	ldr	r3, [r7, #8]
    a538:	62fb      	str	r3, [r7, #44]	; 0x2c

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    a53a:	68fb      	ldr	r3, [r7, #12]
    a53c:	0018      	movs	r0, r3
    a53e:	f7fe f95c 	bl	87fa <_ZNK6SdFile6isOpenEv>
    a542:	1e03      	subs	r3, r0, #0
    a544:	d005      	beq.n	a552 <_ZN6SdFile4readEPvt+0x2a>
    a546:	68fb      	ldr	r3, [r7, #12]
    a548:	7a1b      	ldrb	r3, [r3, #8]
    a54a:	001a      	movs	r2, r3
    a54c:	2301      	movs	r3, #1
    a54e:	4013      	ands	r3, r2
    a550:	d101      	bne.n	a556 <_ZN6SdFile4readEPvt+0x2e>
    a552:	2301      	movs	r3, #1
    a554:	e000      	b.n	a558 <_ZN6SdFile4readEPvt+0x30>
    a556:	2300      	movs	r3, #0
    a558:	2b00      	cmp	r3, #0
    a55a:	d002      	beq.n	a562 <_ZN6SdFile4readEPvt+0x3a>
    a55c:	2301      	movs	r3, #1
    a55e:	425b      	negs	r3, r3
    a560:	e0ff      	b.n	a762 <_ZN6SdFile4readEPvt+0x23a>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    a562:	1dbb      	adds	r3, r7, #6
    a564:	881a      	ldrh	r2, [r3, #0]
    a566:	68fb      	ldr	r3, [r7, #12]
    a568:	69d9      	ldr	r1, [r3, #28]
    a56a:	68fb      	ldr	r3, [r7, #12]
    a56c:	691b      	ldr	r3, [r3, #16]
    a56e:	1acb      	subs	r3, r1, r3
    a570:	429a      	cmp	r2, r3
    a572:	d908      	bls.n	a586 <_ZN6SdFile4readEPvt+0x5e>
    a574:	68fb      	ldr	r3, [r7, #12]
    a576:	69db      	ldr	r3, [r3, #28]
    a578:	b299      	uxth	r1, r3
    a57a:	68fb      	ldr	r3, [r7, #12]
    a57c:	691b      	ldr	r3, [r3, #16]
    a57e:	b29a      	uxth	r2, r3
    a580:	1dbb      	adds	r3, r7, #6
    a582:	1a8a      	subs	r2, r1, r2
    a584:	801a      	strh	r2, [r3, #0]

  // amount left to read
  uint16_t toRead = nbyte;
    a586:	232a      	movs	r3, #42	; 0x2a
    a588:	18fb      	adds	r3, r7, r3
    a58a:	1dba      	adds	r2, r7, #6
    a58c:	8812      	ldrh	r2, [r2, #0]
    a58e:	801a      	strh	r2, [r3, #0]
  while (toRead > 0) {
    a590:	232a      	movs	r3, #42	; 0x2a
    a592:	18fb      	adds	r3, r7, r3
    a594:	881b      	ldrh	r3, [r3, #0]
    a596:	2b00      	cmp	r3, #0
    a598:	dc00      	bgt.n	a59c <_ZN6SdFile4readEPvt+0x74>
    a59a:	e0df      	b.n	a75c <_ZN6SdFile4readEPvt+0x234>
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    a59c:	68fb      	ldr	r3, [r7, #12]
    a59e:	691b      	ldr	r3, [r3, #16]
    a5a0:	b29a      	uxth	r2, r3
    a5a2:	231a      	movs	r3, #26
    a5a4:	18fb      	adds	r3, r7, r3
    a5a6:	05d2      	lsls	r2, r2, #23
    a5a8:	0dd2      	lsrs	r2, r2, #23
    a5aa:	801a      	strh	r2, [r3, #0]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    a5ac:	68fb      	ldr	r3, [r7, #12]
    a5ae:	7a5b      	ldrb	r3, [r3, #9]
    a5b0:	2b02      	cmp	r3, #2
    a5b2:	d10b      	bne.n	a5cc <_ZN6SdFile4readEPvt+0xa4>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    a5b4:	68fb      	ldr	r3, [r7, #12]
    a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a5b8:	0018      	movs	r0, r3
    a5ba:	f7ff fb60 	bl	9c7e <_ZNK8SdVolume12rootDirStartEv>
    a5be:	0002      	movs	r2, r0
    a5c0:	68fb      	ldr	r3, [r7, #12]
    a5c2:	691b      	ldr	r3, [r3, #16]
    a5c4:	0a5b      	lsrs	r3, r3, #9
    a5c6:	18d3      	adds	r3, r2, r3
    a5c8:	627b      	str	r3, [r7, #36]	; 0x24
    a5ca:	e03e      	b.n	a64a <_ZN6SdFile4readEPvt+0x122>
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    a5cc:	68fb      	ldr	r3, [r7, #12]
    a5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a5d0:	68fb      	ldr	r3, [r7, #12]
    a5d2:	691b      	ldr	r3, [r3, #16]
    a5d4:	2113      	movs	r1, #19
    a5d6:	187c      	adds	r4, r7, r1
    a5d8:	0019      	movs	r1, r3
    a5da:	0010      	movs	r0, r2
    a5dc:	f7ff fb59 	bl	9c92 <_ZNK8SdVolume14blockOfClusterEm>
    a5e0:	0003      	movs	r3, r0
    a5e2:	7023      	strb	r3, [r4, #0]
      if (offset == 0 && blockOfCluster == 0) {
    a5e4:	231a      	movs	r3, #26
    a5e6:	18fb      	adds	r3, r7, r3
    a5e8:	881b      	ldrh	r3, [r3, #0]
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	d11f      	bne.n	a62e <_ZN6SdFile4readEPvt+0x106>
    a5ee:	2313      	movs	r3, #19
    a5f0:	18fb      	adds	r3, r7, r3
    a5f2:	781b      	ldrb	r3, [r3, #0]
    a5f4:	2b00      	cmp	r3, #0
    a5f6:	d11a      	bne.n	a62e <_ZN6SdFile4readEPvt+0x106>
        // start of new cluster
        if (curPosition_ == 0) {
    a5f8:	68fb      	ldr	r3, [r7, #12]
    a5fa:	691b      	ldr	r3, [r3, #16]
    a5fc:	2b00      	cmp	r3, #0
    a5fe:	d104      	bne.n	a60a <_ZN6SdFile4readEPvt+0xe2>
          // use first cluster in file
          curCluster_ = firstCluster_;
    a600:	68fb      	ldr	r3, [r7, #12]
    a602:	6a1a      	ldr	r2, [r3, #32]
    a604:	68fb      	ldr	r3, [r7, #12]
    a606:	60da      	str	r2, [r3, #12]
    a608:	e011      	b.n	a62e <_ZN6SdFile4readEPvt+0x106>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    a60a:	68fb      	ldr	r3, [r7, #12]
    a60c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a60e:	68fb      	ldr	r3, [r7, #12]
    a610:	68d9      	ldr	r1, [r3, #12]
    a612:	68fb      	ldr	r3, [r7, #12]
    a614:	330c      	adds	r3, #12
    a616:	001a      	movs	r2, r3
    a618:	f000 fdf0 	bl	b1fc <_ZNK8SdVolume6fatGetEmPm>
    a61c:	0003      	movs	r3, r0
    a61e:	425a      	negs	r2, r3
    a620:	4153      	adcs	r3, r2
    a622:	b2db      	uxtb	r3, r3
    a624:	2b00      	cmp	r3, #0
    a626:	d002      	beq.n	a62e <_ZN6SdFile4readEPvt+0x106>
    a628:	2301      	movs	r3, #1
    a62a:	425b      	negs	r3, r3
    a62c:	e099      	b.n	a762 <_ZN6SdFile4readEPvt+0x23a>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    a62e:	68fb      	ldr	r3, [r7, #12]
    a630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a632:	68fb      	ldr	r3, [r7, #12]
    a634:	68db      	ldr	r3, [r3, #12]
    a636:	0019      	movs	r1, r3
    a638:	0010      	movs	r0, r2
    a63a:	f7ff fb3c 	bl	9cb6 <_ZNK8SdVolume17clusterStartBlockEm>
    a63e:	0002      	movs	r2, r0
    a640:	2313      	movs	r3, #19
    a642:	18fb      	adds	r3, r7, r3
    a644:	781b      	ldrb	r3, [r3, #0]
    a646:	18d3      	adds	r3, r2, r3
    a648:	627b      	str	r3, [r7, #36]	; 0x24
    }
    uint16_t n = toRead;
    a64a:	2322      	movs	r3, #34	; 0x22
    a64c:	18fb      	adds	r3, r7, r3
    a64e:	222a      	movs	r2, #42	; 0x2a
    a650:	18ba      	adds	r2, r7, r2
    a652:	8812      	ldrh	r2, [r2, #0]
    a654:	801a      	strh	r2, [r3, #0]

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    a656:	2322      	movs	r3, #34	; 0x22
    a658:	18fb      	adds	r3, r7, r3
    a65a:	881a      	ldrh	r2, [r3, #0]
    a65c:	231a      	movs	r3, #26
    a65e:	18fb      	adds	r3, r7, r3
    a660:	881b      	ldrh	r3, [r3, #0]
    a662:	2180      	movs	r1, #128	; 0x80
    a664:	0089      	lsls	r1, r1, #2
    a666:	1acb      	subs	r3, r1, r3
    a668:	429a      	cmp	r2, r3
    a66a:	dd08      	ble.n	a67e <_ZN6SdFile4readEPvt+0x156>
    a66c:	2322      	movs	r3, #34	; 0x22
    a66e:	18fb      	adds	r3, r7, r3
    a670:	221a      	movs	r2, #26
    a672:	18ba      	adds	r2, r7, r2
    a674:	8812      	ldrh	r2, [r2, #0]
    a676:	2180      	movs	r1, #128	; 0x80
    a678:	0089      	lsls	r1, r1, #2
    a67a:	1a8a      	subs	r2, r1, r2
    a67c:	801a      	strh	r2, [r3, #0]

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    a67e:	68fb      	ldr	r3, [r7, #12]
    a680:	0018      	movs	r0, r3
    a682:	f7ff fada 	bl	9c3a <_ZNK6SdFile14unbufferedReadEv>
    a686:	1e03      	subs	r3, r0, #0
    a688:	d106      	bne.n	a698 <_ZN6SdFile4readEPvt+0x170>
    a68a:	2322      	movs	r3, #34	; 0x22
    a68c:	18fb      	adds	r3, r7, r3
    a68e:	881a      	ldrh	r2, [r3, #0]
    a690:	2380      	movs	r3, #128	; 0x80
    a692:	009b      	lsls	r3, r3, #2
    a694:	429a      	cmp	r2, r3
    a696:	d106      	bne.n	a6a6 <_ZN6SdFile4readEPvt+0x17e>
      block != SdVolume::cacheBlockNumber_) {
    a698:	4b34      	ldr	r3, [pc, #208]	; (a76c <_ZN6SdFile4readEPvt+0x244>)
    a69a:	681b      	ldr	r3, [r3, #0]
    if ((unbufferedRead() || n == 512) &&
    a69c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a69e:	429a      	cmp	r2, r3
    a6a0:	d001      	beq.n	a6a6 <_ZN6SdFile4readEPvt+0x17e>
    a6a2:	2301      	movs	r3, #1
    a6a4:	e000      	b.n	a6a8 <_ZN6SdFile4readEPvt+0x180>
    a6a6:	2300      	movs	r3, #0
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	d01d      	beq.n	a6e8 <_ZN6SdFile4readEPvt+0x1c0>
      if (!vol_->readData(block, offset, n, dst)) return -1;
    a6ac:	68fb      	ldr	r3, [r7, #12]
    a6ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a6b0:	2322      	movs	r3, #34	; 0x22
    a6b2:	18fb      	adds	r3, r7, r3
    a6b4:	881c      	ldrh	r4, [r3, #0]
    a6b6:	231a      	movs	r3, #26
    a6b8:	18fb      	adds	r3, r7, r3
    a6ba:	881a      	ldrh	r2, [r3, #0]
    a6bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a6c0:	9300      	str	r3, [sp, #0]
    a6c2:	0023      	movs	r3, r4
    a6c4:	f7ff fb42 	bl	9d4c <_ZN8SdVolume8readDataEmttPh>
    a6c8:	0003      	movs	r3, r0
    a6ca:	425a      	negs	r2, r3
    a6cc:	4153      	adcs	r3, r2
    a6ce:	b2db      	uxtb	r3, r3
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d002      	beq.n	a6da <_ZN6SdFile4readEPvt+0x1b2>
    a6d4:	2301      	movs	r3, #1
    a6d6:	425b      	negs	r3, r3
    a6d8:	e043      	b.n	a762 <_ZN6SdFile4readEPvt+0x23a>
      dst += n;
    a6da:	2322      	movs	r3, #34	; 0x22
    a6dc:	18fb      	adds	r3, r7, r3
    a6de:	881b      	ldrh	r3, [r3, #0]
    a6e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a6e2:	18d3      	adds	r3, r2, r3
    a6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    a6e6:	e026      	b.n	a736 <_ZN6SdFile4readEPvt+0x20e>
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a6ea:	2100      	movs	r1, #0
    a6ec:	0018      	movs	r0, r3
    a6ee:	f000 fcdb 	bl	b0a8 <_ZN8SdVolume13cacheRawBlockEmh>
    a6f2:	0003      	movs	r3, r0
    a6f4:	425a      	negs	r2, r3
    a6f6:	4153      	adcs	r3, r2
    a6f8:	b2db      	uxtb	r3, r3
    a6fa:	2b00      	cmp	r3, #0
    a6fc:	d002      	beq.n	a704 <_ZN6SdFile4readEPvt+0x1dc>
    a6fe:	2301      	movs	r3, #1
    a700:	425b      	negs	r3, r3
    a702:	e02e      	b.n	a762 <_ZN6SdFile4readEPvt+0x23a>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    a704:	231a      	movs	r3, #26
    a706:	18fb      	adds	r3, r7, r3
    a708:	881a      	ldrh	r2, [r3, #0]
    a70a:	4b19      	ldr	r3, [pc, #100]	; (a770 <_ZN6SdFile4readEPvt+0x248>)
    a70c:	18d3      	adds	r3, r2, r3
    a70e:	61fb      	str	r3, [r7, #28]
      uint8_t* end = src + n;
    a710:	2322      	movs	r3, #34	; 0x22
    a712:	18fb      	adds	r3, r7, r3
    a714:	881b      	ldrh	r3, [r3, #0]
    a716:	69fa      	ldr	r2, [r7, #28]
    a718:	18d3      	adds	r3, r2, r3
    a71a:	617b      	str	r3, [r7, #20]
      while (src != end) *dst++ = *src++;
    a71c:	69fa      	ldr	r2, [r7, #28]
    a71e:	697b      	ldr	r3, [r7, #20]
    a720:	429a      	cmp	r2, r3
    a722:	d008      	beq.n	a736 <_ZN6SdFile4readEPvt+0x20e>
    a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a726:	1c5a      	adds	r2, r3, #1
    a728:	62fa      	str	r2, [r7, #44]	; 0x2c
    a72a:	69fa      	ldr	r2, [r7, #28]
    a72c:	1c51      	adds	r1, r2, #1
    a72e:	61f9      	str	r1, [r7, #28]
    a730:	7812      	ldrb	r2, [r2, #0]
    a732:	701a      	strb	r2, [r3, #0]
    a734:	e7f2      	b.n	a71c <_ZN6SdFile4readEPvt+0x1f4>
    }
    curPosition_ += n;
    a736:	68fb      	ldr	r3, [r7, #12]
    a738:	691a      	ldr	r2, [r3, #16]
    a73a:	2322      	movs	r3, #34	; 0x22
    a73c:	18fb      	adds	r3, r7, r3
    a73e:	881b      	ldrh	r3, [r3, #0]
    a740:	18d2      	adds	r2, r2, r3
    a742:	68fb      	ldr	r3, [r7, #12]
    a744:	611a      	str	r2, [r3, #16]
    toRead -= n;
    a746:	232a      	movs	r3, #42	; 0x2a
    a748:	18fb      	adds	r3, r7, r3
    a74a:	222a      	movs	r2, #42	; 0x2a
    a74c:	18b9      	adds	r1, r7, r2
    a74e:	2222      	movs	r2, #34	; 0x22
    a750:	18ba      	adds	r2, r7, r2
    a752:	8809      	ldrh	r1, [r1, #0]
    a754:	8812      	ldrh	r2, [r2, #0]
    a756:	1a8a      	subs	r2, r1, r2
    a758:	801a      	strh	r2, [r3, #0]
  while (toRead > 0) {
    a75a:	e719      	b.n	a590 <_ZN6SdFile4readEPvt+0x68>
  }
  return nbyte;
    a75c:	1dbb      	adds	r3, r7, #6
    a75e:	2200      	movs	r2, #0
    a760:	5e9b      	ldrsh	r3, [r3, r2]
}
    a762:	0018      	movs	r0, r3
    a764:	46bd      	mov	sp, r7
    a766:	b00d      	add	sp, #52	; 0x34
    a768:	bd90      	pop	{r4, r7, pc}
    a76a:	46c0      	nop			; (mov r8, r8)
    a76c:	2000004c 	.word	0x2000004c
    a770:	20000968 	.word	0x20000968

0000a774 <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    a774:	b580      	push	{r7, lr}
    a776:	b084      	sub	sp, #16
    a778:	af00      	add	r7, sp, #0
    a77a:	6078      	str	r0, [r7, #4]
  // error if not directory
  if (!isDir()) return NULL;
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	0018      	movs	r0, r3
    a780:	f7fe f82b 	bl	87da <_ZNK6SdFile5isDirEv>
    a784:	0003      	movs	r3, r0
    a786:	425a      	negs	r2, r3
    a788:	4153      	adcs	r3, r2
    a78a:	b2db      	uxtb	r3, r3
    a78c:	2b00      	cmp	r3, #0
    a78e:	d001      	beq.n	a794 <_ZN6SdFile12readDirCacheEv+0x20>
    a790:	2300      	movs	r3, #0
    a792:	e020      	b.n	a7d6 <_ZN6SdFile12readDirCacheEv+0x62>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    a794:	687b      	ldr	r3, [r7, #4]
    a796:	691b      	ldr	r3, [r3, #16]
    a798:	095b      	lsrs	r3, r3, #5
    a79a:	b2da      	uxtb	r2, r3
    a79c:	230f      	movs	r3, #15
    a79e:	18fb      	adds	r3, r7, r3
    a7a0:	210f      	movs	r1, #15
    a7a2:	400a      	ands	r2, r1
    a7a4:	701a      	strb	r2, [r3, #0]

  // use read to locate and cache block
  if (read() < 0) return NULL;
    a7a6:	687b      	ldr	r3, [r7, #4]
    a7a8:	0018      	movs	r0, r3
    a7aa:	f7fe f833 	bl	8814 <_ZN6SdFile4readEv>
    a7ae:	0003      	movs	r3, r0
    a7b0:	b29b      	uxth	r3, r3
    a7b2:	0bdb      	lsrs	r3, r3, #15
    a7b4:	b2db      	uxtb	r3, r3
    a7b6:	2b00      	cmp	r3, #0
    a7b8:	d001      	beq.n	a7be <_ZN6SdFile12readDirCacheEv+0x4a>
    a7ba:	2300      	movs	r3, #0
    a7bc:	e00b      	b.n	a7d6 <_ZN6SdFile12readDirCacheEv+0x62>

  // advance to next entry
  curPosition_ += 31;
    a7be:	687b      	ldr	r3, [r7, #4]
    a7c0:	691b      	ldr	r3, [r3, #16]
    a7c2:	331f      	adds	r3, #31
    a7c4:	001a      	movs	r2, r3
    a7c6:	687b      	ldr	r3, [r7, #4]
    a7c8:	611a      	str	r2, [r3, #16]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    a7ca:	230f      	movs	r3, #15
    a7cc:	18fb      	adds	r3, r7, r3
    a7ce:	781b      	ldrb	r3, [r3, #0]
    a7d0:	015a      	lsls	r2, r3, #5
    a7d2:	4b03      	ldr	r3, [pc, #12]	; (a7e0 <_ZN6SdFile12readDirCacheEv+0x6c>)
    a7d4:	18d3      	adds	r3, r2, r3
}
    a7d6:	0018      	movs	r0, r3
    a7d8:	46bd      	mov	sp, r7
    a7da:	b004      	add	sp, #16
    a7dc:	bd80      	pop	{r7, pc}
    a7de:	46c0      	nop			; (mov r8, r8)
    a7e0:	20000968 	.word	0x20000968

0000a7e4 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    a7e4:	b580      	push	{r7, lr}
    a7e6:	b084      	sub	sp, #16
    a7e8:	af00      	add	r7, sp, #0
    a7ea:	6078      	str	r0, [r7, #4]
    a7ec:	6039      	str	r1, [r7, #0]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    a7ee:	687b      	ldr	r3, [r7, #4]
    a7f0:	0018      	movs	r0, r3
    a7f2:	f7fe f802 	bl	87fa <_ZNK6SdFile6isOpenEv>
    a7f6:	1e03      	subs	r3, r0, #0
    a7f8:	d004      	beq.n	a804 <_ZN6SdFile7seekSetEm+0x20>
    a7fa:	687b      	ldr	r3, [r7, #4]
    a7fc:	69da      	ldr	r2, [r3, #28]
    a7fe:	683b      	ldr	r3, [r7, #0]
    a800:	429a      	cmp	r2, r3
    a802:	d201      	bcs.n	a808 <_ZN6SdFile7seekSetEm+0x24>
    a804:	2301      	movs	r3, #1
    a806:	e000      	b.n	a80a <_ZN6SdFile7seekSetEm+0x26>
    a808:	2300      	movs	r3, #0
    a80a:	2b00      	cmp	r3, #0
    a80c:	d001      	beq.n	a812 <_ZN6SdFile7seekSetEm+0x2e>
    a80e:	2300      	movs	r3, #0
    a810:	e054      	b.n	a8bc <_ZN6SdFile7seekSetEm+0xd8>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    a812:	687b      	ldr	r3, [r7, #4]
    a814:	7a5b      	ldrb	r3, [r3, #9]
    a816:	2b02      	cmp	r3, #2
    a818:	d104      	bne.n	a824 <_ZN6SdFile7seekSetEm+0x40>
    curPosition_ = pos;
    a81a:	687b      	ldr	r3, [r7, #4]
    a81c:	683a      	ldr	r2, [r7, #0]
    a81e:	611a      	str	r2, [r3, #16]
    return true;
    a820:	2301      	movs	r3, #1
    a822:	e04b      	b.n	a8bc <_ZN6SdFile7seekSetEm+0xd8>
  }
  if (pos == 0) {
    a824:	683b      	ldr	r3, [r7, #0]
    a826:	2b00      	cmp	r3, #0
    a828:	d107      	bne.n	a83a <_ZN6SdFile7seekSetEm+0x56>
    // set position to start of file
    curCluster_ = 0;
    a82a:	687b      	ldr	r3, [r7, #4]
    a82c:	2200      	movs	r2, #0
    a82e:	60da      	str	r2, [r3, #12]
    curPosition_ = 0;
    a830:	687b      	ldr	r3, [r7, #4]
    a832:	2200      	movs	r2, #0
    a834:	611a      	str	r2, [r3, #16]
    return true;
    a836:	2301      	movs	r3, #1
    a838:	e040      	b.n	a8bc <_ZN6SdFile7seekSetEm+0xd8>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    a83a:	687b      	ldr	r3, [r7, #4]
    a83c:	691b      	ldr	r3, [r3, #16]
    a83e:	1e5a      	subs	r2, r3, #1
    a840:	687b      	ldr	r3, [r7, #4]
    a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a844:	7c1b      	ldrb	r3, [r3, #16]
    a846:	3309      	adds	r3, #9
    a848:	40da      	lsrs	r2, r3
    a84a:	0013      	movs	r3, r2
    a84c:	60bb      	str	r3, [r7, #8]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    a84e:	683b      	ldr	r3, [r7, #0]
    a850:	1e5a      	subs	r2, r3, #1
    a852:	687b      	ldr	r3, [r7, #4]
    a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a856:	7c1b      	ldrb	r3, [r3, #16]
    a858:	3309      	adds	r3, #9
    a85a:	40da      	lsrs	r2, r3
    a85c:	0013      	movs	r3, r2
    a85e:	60fb      	str	r3, [r7, #12]

  if (nNew < nCur || curPosition_ == 0) {
    a860:	68fa      	ldr	r2, [r7, #12]
    a862:	68bb      	ldr	r3, [r7, #8]
    a864:	429a      	cmp	r2, r3
    a866:	d303      	bcc.n	a870 <_ZN6SdFile7seekSetEm+0x8c>
    a868:	687b      	ldr	r3, [r7, #4]
    a86a:	691b      	ldr	r3, [r3, #16]
    a86c:	2b00      	cmp	r3, #0
    a86e:	d104      	bne.n	a87a <_ZN6SdFile7seekSetEm+0x96>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    a870:	687b      	ldr	r3, [r7, #4]
    a872:	6a1a      	ldr	r2, [r3, #32]
    a874:	687b      	ldr	r3, [r7, #4]
    a876:	60da      	str	r2, [r3, #12]
    a878:	e003      	b.n	a882 <_ZN6SdFile7seekSetEm+0x9e>
  } else {
    // advance from curPosition
    nNew -= nCur;
    a87a:	68fa      	ldr	r2, [r7, #12]
    a87c:	68bb      	ldr	r3, [r7, #8]
    a87e:	1ad3      	subs	r3, r2, r3
    a880:	60fb      	str	r3, [r7, #12]
  }
  while (nNew--) {
    a882:	68fb      	ldr	r3, [r7, #12]
    a884:	1e5a      	subs	r2, r3, #1
    a886:	60fa      	str	r2, [r7, #12]
    a888:	1e5a      	subs	r2, r3, #1
    a88a:	4193      	sbcs	r3, r2
    a88c:	b2db      	uxtb	r3, r3
    a88e:	2b00      	cmp	r3, #0
    a890:	d010      	beq.n	a8b4 <_ZN6SdFile7seekSetEm+0xd0>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    a892:	687b      	ldr	r3, [r7, #4]
    a894:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a896:	687b      	ldr	r3, [r7, #4]
    a898:	68d9      	ldr	r1, [r3, #12]
    a89a:	687b      	ldr	r3, [r7, #4]
    a89c:	330c      	adds	r3, #12
    a89e:	001a      	movs	r2, r3
    a8a0:	f000 fcac 	bl	b1fc <_ZNK8SdVolume6fatGetEmPm>
    a8a4:	0003      	movs	r3, r0
    a8a6:	425a      	negs	r2, r3
    a8a8:	4153      	adcs	r3, r2
    a8aa:	b2db      	uxtb	r3, r3
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	d0e8      	beq.n	a882 <_ZN6SdFile7seekSetEm+0x9e>
    a8b0:	2300      	movs	r3, #0
    a8b2:	e003      	b.n	a8bc <_ZN6SdFile7seekSetEm+0xd8>
  }
  curPosition_ = pos;
    a8b4:	687b      	ldr	r3, [r7, #4]
    a8b6:	683a      	ldr	r2, [r7, #0]
    a8b8:	611a      	str	r2, [r3, #16]
  return true;
    a8ba:	2301      	movs	r3, #1
}
    a8bc:	0018      	movs	r0, r3
    a8be:	46bd      	mov	sp, r7
    a8c0:	b004      	add	sp, #16
    a8c2:	bd80      	pop	{r7, pc}

0000a8c4 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    a8c4:	b590      	push	{r4, r7, lr}
    a8c6:	b085      	sub	sp, #20
    a8c8:	af00      	add	r7, sp, #0
    a8ca:	6078      	str	r0, [r7, #4]
  // only allow open files and directories
  if (!isOpen()) return false;
    a8cc:	687b      	ldr	r3, [r7, #4]
    a8ce:	0018      	movs	r0, r3
    a8d0:	f7fd ff93 	bl	87fa <_ZNK6SdFile6isOpenEv>
    a8d4:	0003      	movs	r3, r0
    a8d6:	425a      	negs	r2, r3
    a8d8:	4153      	adcs	r3, r2
    a8da:	b2db      	uxtb	r3, r3
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d001      	beq.n	a8e4 <_ZN6SdFile4syncEv+0x20>
    a8e0:	2300      	movs	r3, #0
    a8e2:	e0a6      	b.n	aa32 <_ZN6SdFile4syncEv+0x16e>

  if (flags_ & F_FILE_DIR_DIRTY) {
    a8e4:	687b      	ldr	r3, [r7, #4]
    a8e6:	7a1b      	ldrb	r3, [r3, #8]
    a8e8:	b25b      	sxtb	r3, r3
    a8ea:	2b00      	cmp	r3, #0
    a8ec:	db00      	blt.n	a8f0 <_ZN6SdFile4syncEv+0x2c>
    a8ee:	e09d      	b.n	aa2c <_ZN6SdFile4syncEv+0x168>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    a8f0:	687b      	ldr	r3, [r7, #4]
    a8f2:	2101      	movs	r1, #1
    a8f4:	0018      	movs	r0, r3
    a8f6:	f7ff fad3 	bl	9ea0 <_ZN6SdFile13cacheDirEntryEh>
    a8fa:	0003      	movs	r3, r0
    a8fc:	60fb      	str	r3, [r7, #12]
    if (!d) return false;
    a8fe:	68fb      	ldr	r3, [r7, #12]
    a900:	2b00      	cmp	r3, #0
    a902:	d101      	bne.n	a908 <_ZN6SdFile4syncEv+0x44>
    a904:	2300      	movs	r3, #0
    a906:	e094      	b.n	aa32 <_ZN6SdFile4syncEv+0x16e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    a908:	687b      	ldr	r3, [r7, #4]
    a90a:	0018      	movs	r0, r3
    a90c:	f7fd ff65 	bl	87da <_ZNK6SdFile5isDirEv>
    a910:	0003      	movs	r3, r0
    a912:	425a      	negs	r2, r3
    a914:	4153      	adcs	r3, r2
    a916:	b2db      	uxtb	r3, r3
    a918:	2b00      	cmp	r3, #0
    a91a:	d02a      	beq.n	a972 <_ZN6SdFile4syncEv+0xae>
    a91c:	687b      	ldr	r3, [r7, #4]
    a91e:	69da      	ldr	r2, [r3, #28]
    a920:	68fb      	ldr	r3, [r7, #12]
    a922:	21ff      	movs	r1, #255	; 0xff
    a924:	4011      	ands	r1, r2
    a926:	000c      	movs	r4, r1
    a928:	7f19      	ldrb	r1, [r3, #28]
    a92a:	2000      	movs	r0, #0
    a92c:	4001      	ands	r1, r0
    a92e:	1c08      	adds	r0, r1, #0
    a930:	1c21      	adds	r1, r4, #0
    a932:	4301      	orrs	r1, r0
    a934:	7719      	strb	r1, [r3, #28]
    a936:	0a11      	lsrs	r1, r2, #8
    a938:	20ff      	movs	r0, #255	; 0xff
    a93a:	4001      	ands	r1, r0
    a93c:	000c      	movs	r4, r1
    a93e:	7f59      	ldrb	r1, [r3, #29]
    a940:	2000      	movs	r0, #0
    a942:	4001      	ands	r1, r0
    a944:	1c08      	adds	r0, r1, #0
    a946:	1c21      	adds	r1, r4, #0
    a948:	4301      	orrs	r1, r0
    a94a:	7759      	strb	r1, [r3, #29]
    a94c:	0c11      	lsrs	r1, r2, #16
    a94e:	20ff      	movs	r0, #255	; 0xff
    a950:	4001      	ands	r1, r0
    a952:	000c      	movs	r4, r1
    a954:	7f99      	ldrb	r1, [r3, #30]
    a956:	2000      	movs	r0, #0
    a958:	4001      	ands	r1, r0
    a95a:	1c08      	adds	r0, r1, #0
    a95c:	1c21      	adds	r1, r4, #0
    a95e:	4301      	orrs	r1, r0
    a960:	7799      	strb	r1, [r3, #30]
    a962:	0e10      	lsrs	r0, r2, #24
    a964:	7fda      	ldrb	r2, [r3, #31]
    a966:	2100      	movs	r1, #0
    a968:	400a      	ands	r2, r1
    a96a:	1c11      	adds	r1, r2, #0
    a96c:	1c02      	adds	r2, r0, #0
    a96e:	430a      	orrs	r2, r1
    a970:	77da      	strb	r2, [r3, #31]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    a972:	687b      	ldr	r3, [r7, #4]
    a974:	6a1b      	ldr	r3, [r3, #32]
    a976:	b29a      	uxth	r2, r3
    a978:	68fb      	ldr	r3, [r7, #12]
    a97a:	21ff      	movs	r1, #255	; 0xff
    a97c:	4011      	ands	r1, r2
    a97e:	000c      	movs	r4, r1
    a980:	7e99      	ldrb	r1, [r3, #26]
    a982:	2000      	movs	r0, #0
    a984:	4001      	ands	r1, r0
    a986:	1c08      	adds	r0, r1, #0
    a988:	1c21      	adds	r1, r4, #0
    a98a:	4301      	orrs	r1, r0
    a98c:	7699      	strb	r1, [r3, #26]
    a98e:	0a12      	lsrs	r2, r2, #8
    a990:	b290      	uxth	r0, r2
    a992:	7eda      	ldrb	r2, [r3, #27]
    a994:	2100      	movs	r1, #0
    a996:	400a      	ands	r2, r1
    a998:	1c11      	adds	r1, r2, #0
    a99a:	1c02      	adds	r2, r0, #0
    a99c:	430a      	orrs	r2, r1
    a99e:	76da      	strb	r2, [r3, #27]
    d->firstClusterHigh = firstCluster_ >> 16;
    a9a0:	687b      	ldr	r3, [r7, #4]
    a9a2:	6a1b      	ldr	r3, [r3, #32]
    a9a4:	0c1b      	lsrs	r3, r3, #16
    a9a6:	b29a      	uxth	r2, r3
    a9a8:	68fb      	ldr	r3, [r7, #12]
    a9aa:	21ff      	movs	r1, #255	; 0xff
    a9ac:	4011      	ands	r1, r2
    a9ae:	000c      	movs	r4, r1
    a9b0:	7d19      	ldrb	r1, [r3, #20]
    a9b2:	2000      	movs	r0, #0
    a9b4:	4001      	ands	r1, r0
    a9b6:	1c08      	adds	r0, r1, #0
    a9b8:	1c21      	adds	r1, r4, #0
    a9ba:	4301      	orrs	r1, r0
    a9bc:	7519      	strb	r1, [r3, #20]
    a9be:	0a12      	lsrs	r2, r2, #8
    a9c0:	b290      	uxth	r0, r2
    a9c2:	7d5a      	ldrb	r2, [r3, #21]
    a9c4:	2100      	movs	r1, #0
    a9c6:	400a      	ands	r2, r1
    a9c8:	1c11      	adds	r1, r2, #0
    a9ca:	1c02      	adds	r2, r0, #0
    a9cc:	430a      	orrs	r2, r1
    a9ce:	755a      	strb	r2, [r3, #21]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    a9d0:	4b1a      	ldr	r3, [pc, #104]	; (aa3c <_ZN6SdFile4syncEv+0x178>)
    a9d2:	681b      	ldr	r3, [r3, #0]
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d022      	beq.n	aa1e <_ZN6SdFile4syncEv+0x15a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    a9d8:	4b18      	ldr	r3, [pc, #96]	; (aa3c <_ZN6SdFile4syncEv+0x178>)
    a9da:	681b      	ldr	r3, [r3, #0]
    a9dc:	68fa      	ldr	r2, [r7, #12]
    a9de:	3218      	adds	r2, #24
    a9e0:	0010      	movs	r0, r2
    a9e2:	68fa      	ldr	r2, [r7, #12]
    a9e4:	3216      	adds	r2, #22
    a9e6:	0011      	movs	r1, r2
    a9e8:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    a9ea:	68fb      	ldr	r3, [r7, #12]
    a9ec:	7e1a      	ldrb	r2, [r3, #24]
    a9ee:	7e5b      	ldrb	r3, [r3, #25]
    a9f0:	021b      	lsls	r3, r3, #8
    a9f2:	4313      	orrs	r3, r2
    a9f4:	b29a      	uxth	r2, r3
    a9f6:	68fb      	ldr	r3, [r7, #12]
    a9f8:	21ff      	movs	r1, #255	; 0xff
    a9fa:	4011      	ands	r1, r2
    a9fc:	000c      	movs	r4, r1
    a9fe:	7c99      	ldrb	r1, [r3, #18]
    aa00:	2000      	movs	r0, #0
    aa02:	4001      	ands	r1, r0
    aa04:	1c08      	adds	r0, r1, #0
    aa06:	1c21      	adds	r1, r4, #0
    aa08:	4301      	orrs	r1, r0
    aa0a:	7499      	strb	r1, [r3, #18]
    aa0c:	0a12      	lsrs	r2, r2, #8
    aa0e:	b290      	uxth	r0, r2
    aa10:	7cda      	ldrb	r2, [r3, #19]
    aa12:	2100      	movs	r1, #0
    aa14:	400a      	ands	r2, r1
    aa16:	1c11      	adds	r1, r2, #0
    aa18:	1c02      	adds	r2, r0, #0
    aa1a:	430a      	orrs	r2, r1
    aa1c:	74da      	strb	r2, [r3, #19]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    aa1e:	687b      	ldr	r3, [r7, #4]
    aa20:	7a1b      	ldrb	r3, [r3, #8]
    aa22:	227f      	movs	r2, #127	; 0x7f
    aa24:	4013      	ands	r3, r2
    aa26:	b2da      	uxtb	r2, r3
    aa28:	687b      	ldr	r3, [r7, #4]
    aa2a:	721a      	strb	r2, [r3, #8]
  }
  return SdVolume::cacheFlush();
    aa2c:	f000 fafe 	bl	b02c <_ZN8SdVolume10cacheFlushEv>
    aa30:	0003      	movs	r3, r0
}
    aa32:	0018      	movs	r0, r3
    aa34:	46bd      	mov	sp, r7
    aa36:	b005      	add	sp, #20
    aa38:	bd90      	pop	{r4, r7, pc}
    aa3a:	46c0      	nop			; (mov r8, r8)
    aa3c:	20000964 	.word	0x20000964

0000aa40 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    aa40:	b580      	push	{r7, lr}
    aa42:	b084      	sub	sp, #16
    aa44:	af00      	add	r7, sp, #0
    aa46:	6078      	str	r0, [r7, #4]
    aa48:	6039      	str	r1, [r7, #0]
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    aa4a:	687b      	ldr	r3, [r7, #4]
    aa4c:	0018      	movs	r0, r3
    aa4e:	f7ff f8d6 	bl	9bfe <_ZNK6SdFile6isFileEv>
    aa52:	1e03      	subs	r3, r0, #0
    aa54:	d005      	beq.n	aa62 <_ZN6SdFile8truncateEm+0x22>
    aa56:	687b      	ldr	r3, [r7, #4]
    aa58:	7a1b      	ldrb	r3, [r3, #8]
    aa5a:	001a      	movs	r2, r3
    aa5c:	2302      	movs	r3, #2
    aa5e:	4013      	ands	r3, r2
    aa60:	d101      	bne.n	aa66 <_ZN6SdFile8truncateEm+0x26>
    aa62:	2301      	movs	r3, #1
    aa64:	e000      	b.n	aa68 <_ZN6SdFile8truncateEm+0x28>
    aa66:	2300      	movs	r3, #0
    aa68:	2b00      	cmp	r3, #0
    aa6a:	d001      	beq.n	aa70 <_ZN6SdFile8truncateEm+0x30>
    aa6c:	2300      	movs	r3, #0
    aa6e:	e096      	b.n	ab9e <_ZN6SdFile8truncateEm+0x15e>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    aa70:	687b      	ldr	r3, [r7, #4]
    aa72:	69da      	ldr	r2, [r3, #28]
    aa74:	683b      	ldr	r3, [r7, #0]
    aa76:	429a      	cmp	r2, r3
    aa78:	d201      	bcs.n	aa7e <_ZN6SdFile8truncateEm+0x3e>
    aa7a:	2300      	movs	r3, #0
    aa7c:	e08f      	b.n	ab9e <_ZN6SdFile8truncateEm+0x15e>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    aa7e:	687b      	ldr	r3, [r7, #4]
    aa80:	69db      	ldr	r3, [r3, #28]
    aa82:	2b00      	cmp	r3, #0
    aa84:	d101      	bne.n	aa8a <_ZN6SdFile8truncateEm+0x4a>
    aa86:	2301      	movs	r3, #1
    aa88:	e089      	b.n	ab9e <_ZN6SdFile8truncateEm+0x15e>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    aa8a:	687b      	ldr	r3, [r7, #4]
    aa8c:	691a      	ldr	r2, [r3, #16]
    aa8e:	683b      	ldr	r3, [r7, #0]
    aa90:	429a      	cmp	r2, r3
    aa92:	d802      	bhi.n	aa9a <_ZN6SdFile8truncateEm+0x5a>
    aa94:	687b      	ldr	r3, [r7, #4]
    aa96:	691b      	ldr	r3, [r3, #16]
    aa98:	e000      	b.n	aa9c <_ZN6SdFile8truncateEm+0x5c>
    aa9a:	683b      	ldr	r3, [r7, #0]
    aa9c:	60fb      	str	r3, [r7, #12]

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    aa9e:	683a      	ldr	r2, [r7, #0]
    aaa0:	687b      	ldr	r3, [r7, #4]
    aaa2:	0011      	movs	r1, r2
    aaa4:	0018      	movs	r0, r3
    aaa6:	f7ff fe9d 	bl	a7e4 <_ZN6SdFile7seekSetEm>
    aaaa:	0003      	movs	r3, r0
    aaac:	425a      	negs	r2, r3
    aaae:	4153      	adcs	r3, r2
    aab0:	b2db      	uxtb	r3, r3
    aab2:	2b00      	cmp	r3, #0
    aab4:	d001      	beq.n	aaba <_ZN6SdFile8truncateEm+0x7a>
    aab6:	2300      	movs	r3, #0
    aab8:	e071      	b.n	ab9e <_ZN6SdFile8truncateEm+0x15e>

  if (length == 0) {
    aaba:	683b      	ldr	r3, [r7, #0]
    aabc:	2b00      	cmp	r3, #0
    aabe:	d113      	bne.n	aae8 <_ZN6SdFile8truncateEm+0xa8>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    aac0:	687b      	ldr	r3, [r7, #4]
    aac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    aac4:	687b      	ldr	r3, [r7, #4]
    aac6:	6a1b      	ldr	r3, [r3, #32]
    aac8:	0019      	movs	r1, r3
    aaca:	0010      	movs	r0, r2
    aacc:	f000 fc4a 	bl	b364 <_ZN8SdVolume9freeChainEm>
    aad0:	0003      	movs	r3, r0
    aad2:	425a      	negs	r2, r3
    aad4:	4153      	adcs	r3, r2
    aad6:	b2db      	uxtb	r3, r3
    aad8:	2b00      	cmp	r3, #0
    aada:	d001      	beq.n	aae0 <_ZN6SdFile8truncateEm+0xa0>
    aadc:	2300      	movs	r3, #0
    aade:	e05e      	b.n	ab9e <_ZN6SdFile8truncateEm+0x15e>
    firstCluster_ = 0;
    aae0:	687b      	ldr	r3, [r7, #4]
    aae2:	2200      	movs	r2, #0
    aae4:	621a      	str	r2, [r3, #32]
    aae6:	e03c      	b.n	ab62 <_ZN6SdFile8truncateEm+0x122>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    aae8:	687b      	ldr	r3, [r7, #4]
    aaea:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aaec:	687b      	ldr	r3, [r7, #4]
    aaee:	68db      	ldr	r3, [r3, #12]
    aaf0:	2208      	movs	r2, #8
    aaf2:	18ba      	adds	r2, r7, r2
    aaf4:	0019      	movs	r1, r3
    aaf6:	f000 fb81 	bl	b1fc <_ZNK8SdVolume6fatGetEmPm>
    aafa:	0003      	movs	r3, r0
    aafc:	425a      	negs	r2, r3
    aafe:	4153      	adcs	r3, r2
    ab00:	b2db      	uxtb	r3, r3
    ab02:	2b00      	cmp	r3, #0
    ab04:	d001      	beq.n	ab0a <_ZN6SdFile8truncateEm+0xca>
    ab06:	2300      	movs	r3, #0
    ab08:	e049      	b.n	ab9e <_ZN6SdFile8truncateEm+0x15e>

    if (!vol_->isEOC(toFree)) {
    ab0a:	687b      	ldr	r3, [r7, #4]
    ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ab0e:	68ba      	ldr	r2, [r7, #8]
    ab10:	0011      	movs	r1, r2
    ab12:	0018      	movs	r0, r3
    ab14:	f7ff f900 	bl	9d18 <_ZNK8SdVolume5isEOCEm>
    ab18:	0003      	movs	r3, r0
    ab1a:	425a      	negs	r2, r3
    ab1c:	4153      	adcs	r3, r2
    ab1e:	b2db      	uxtb	r3, r3
    ab20:	2b00      	cmp	r3, #0
    ab22:	d01e      	beq.n	ab62 <_ZN6SdFile8truncateEm+0x122>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    ab24:	687b      	ldr	r3, [r7, #4]
    ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ab28:	68ba      	ldr	r2, [r7, #8]
    ab2a:	0011      	movs	r1, r2
    ab2c:	0018      	movs	r0, r3
    ab2e:	f000 fc19 	bl	b364 <_ZN8SdVolume9freeChainEm>
    ab32:	0003      	movs	r3, r0
    ab34:	425a      	negs	r2, r3
    ab36:	4153      	adcs	r3, r2
    ab38:	b2db      	uxtb	r3, r3
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d001      	beq.n	ab42 <_ZN6SdFile8truncateEm+0x102>
    ab3e:	2300      	movs	r3, #0
    ab40:	e02d      	b.n	ab9e <_ZN6SdFile8truncateEm+0x15e>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    ab42:	687b      	ldr	r3, [r7, #4]
    ab44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ab46:	687b      	ldr	r3, [r7, #4]
    ab48:	68db      	ldr	r3, [r3, #12]
    ab4a:	0019      	movs	r1, r3
    ab4c:	0010      	movs	r0, r2
    ab4e:	f7ff f8d1 	bl	9cf4 <_ZN8SdVolume9fatPutEOCEm>
    ab52:	0003      	movs	r3, r0
    ab54:	425a      	negs	r2, r3
    ab56:	4153      	adcs	r3, r2
    ab58:	b2db      	uxtb	r3, r3
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	d001      	beq.n	ab62 <_ZN6SdFile8truncateEm+0x122>
    ab5e:	2300      	movs	r3, #0
    ab60:	e01d      	b.n	ab9e <_ZN6SdFile8truncateEm+0x15e>
    }
  }
  fileSize_ = length;
    ab62:	687b      	ldr	r3, [r7, #4]
    ab64:	683a      	ldr	r2, [r7, #0]
    ab66:	61da      	str	r2, [r3, #28]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    ab68:	687b      	ldr	r3, [r7, #4]
    ab6a:	7a1b      	ldrb	r3, [r3, #8]
    ab6c:	2280      	movs	r2, #128	; 0x80
    ab6e:	4252      	negs	r2, r2
    ab70:	4313      	orrs	r3, r2
    ab72:	b2da      	uxtb	r2, r3
    ab74:	687b      	ldr	r3, [r7, #4]
    ab76:	721a      	strb	r2, [r3, #8]

  if (!sync()) return false;
    ab78:	687b      	ldr	r3, [r7, #4]
    ab7a:	0018      	movs	r0, r3
    ab7c:	f7ff fea2 	bl	a8c4 <_ZN6SdFile4syncEv>
    ab80:	0003      	movs	r3, r0
    ab82:	425a      	negs	r2, r3
    ab84:	4153      	adcs	r3, r2
    ab86:	b2db      	uxtb	r3, r3
    ab88:	2b00      	cmp	r3, #0
    ab8a:	d001      	beq.n	ab90 <_ZN6SdFile8truncateEm+0x150>
    ab8c:	2300      	movs	r3, #0
    ab8e:	e006      	b.n	ab9e <_ZN6SdFile8truncateEm+0x15e>

  // set file to correct position
  return seekSet(newPos);
    ab90:	68fa      	ldr	r2, [r7, #12]
    ab92:	687b      	ldr	r3, [r7, #4]
    ab94:	0011      	movs	r1, r2
    ab96:	0018      	movs	r0, r3
    ab98:	f7ff fe24 	bl	a7e4 <_ZN6SdFile7seekSetEm>
    ab9c:	0003      	movs	r3, r0
}
    ab9e:	0018      	movs	r0, r3
    aba0:	46bd      	mov	sp, r7
    aba2:	b004      	add	sp, #16
    aba4:	bd80      	pop	{r7, pc}
	...

0000aba8 <_ZN6SdFile5writeEPKvt>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    aba8:	b590      	push	{r4, r7, lr}
    abaa:	b08d      	sub	sp, #52	; 0x34
    abac:	af00      	add	r7, sp, #0
    abae:	60f8      	str	r0, [r7, #12]
    abb0:	60b9      	str	r1, [r7, #8]
    abb2:	1dbb      	adds	r3, r7, #6
    abb4:	801a      	strh	r2, [r3, #0]
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    abb6:	68bb      	ldr	r3, [r7, #8]
    abb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
    abba:	232a      	movs	r3, #42	; 0x2a
    abbc:	18fb      	adds	r3, r7, r3
    abbe:	1dba      	adds	r2, r7, #6
    abc0:	8812      	ldrh	r2, [r2, #0]
    abc2:	801a      	strh	r2, [r3, #0]

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    abc4:	68fb      	ldr	r3, [r7, #12]
    abc6:	0018      	movs	r0, r3
    abc8:	f7ff f819 	bl	9bfe <_ZNK6SdFile6isFileEv>
    abcc:	1e03      	subs	r3, r0, #0
    abce:	d005      	beq.n	abdc <_ZN6SdFile5writeEPKvt+0x34>
    abd0:	68fb      	ldr	r3, [r7, #12]
    abd2:	7a1b      	ldrb	r3, [r3, #8]
    abd4:	001a      	movs	r2, r3
    abd6:	2302      	movs	r3, #2
    abd8:	4013      	ands	r3, r2
    abda:	d101      	bne.n	abe0 <_ZN6SdFile5writeEPKvt+0x38>
    abdc:	2301      	movs	r3, #1
    abde:	e000      	b.n	abe2 <_ZN6SdFile5writeEPKvt+0x3a>
    abe0:	2300      	movs	r3, #0
    abe2:	2b00      	cmp	r3, #0
    abe4:	d000      	beq.n	abe8 <_ZN6SdFile5writeEPKvt+0x40>
    abe6:	e150      	b.n	ae8a <_ZN6SdFile5writeEPKvt+0x2e2>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    abe8:	68fb      	ldr	r3, [r7, #12]
    abea:	7a1b      	ldrb	r3, [r3, #8]
    abec:	001a      	movs	r2, r3
    abee:	2304      	movs	r3, #4
    abf0:	4013      	ands	r3, r2
    abf2:	d010      	beq.n	ac16 <_ZN6SdFile5writeEPKvt+0x6e>
    abf4:	68fb      	ldr	r3, [r7, #12]
    abf6:	691a      	ldr	r2, [r3, #16]
    abf8:	68fb      	ldr	r3, [r7, #12]
    abfa:	69db      	ldr	r3, [r3, #28]
    abfc:	429a      	cmp	r2, r3
    abfe:	d00a      	beq.n	ac16 <_ZN6SdFile5writeEPKvt+0x6e>
    if (!seekEnd()) goto writeErrorReturn;
    ac00:	68fb      	ldr	r3, [r7, #12]
    ac02:	0018      	movs	r0, r3
    ac04:	f7ff f809 	bl	9c1a <_ZN6SdFile7seekEndEv>
    ac08:	0003      	movs	r3, r0
    ac0a:	425a      	negs	r2, r3
    ac0c:	4153      	adcs	r3, r2
    ac0e:	b2db      	uxtb	r3, r3
    ac10:	2b00      	cmp	r3, #0
    ac12:	d000      	beq.n	ac16 <_ZN6SdFile5writeEPKvt+0x6e>
    ac14:	e13b      	b.n	ae8e <_ZN6SdFile5writeEPKvt+0x2e6>
  }

  while (nToWrite > 0) {
    ac16:	232a      	movs	r3, #42	; 0x2a
    ac18:	18fb      	adds	r3, r7, r3
    ac1a:	881b      	ldrh	r3, [r3, #0]
    ac1c:	2b00      	cmp	r3, #0
    ac1e:	dc00      	bgt.n	ac22 <_ZN6SdFile5writeEPKvt+0x7a>
    ac20:	e0fd      	b.n	ae1e <_ZN6SdFile5writeEPKvt+0x276>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    ac22:	68fb      	ldr	r3, [r7, #12]
    ac24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ac26:	68fb      	ldr	r3, [r7, #12]
    ac28:	691b      	ldr	r3, [r3, #16]
    ac2a:	2123      	movs	r1, #35	; 0x23
    ac2c:	187c      	adds	r4, r7, r1
    ac2e:	0019      	movs	r1, r3
    ac30:	0010      	movs	r0, r2
    ac32:	f7ff f82e 	bl	9c92 <_ZNK8SdVolume14blockOfClusterEm>
    ac36:	0003      	movs	r3, r0
    ac38:	7023      	strb	r3, [r4, #0]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    ac3a:	68fb      	ldr	r3, [r7, #12]
    ac3c:	691b      	ldr	r3, [r3, #16]
    ac3e:	b29a      	uxth	r2, r3
    ac40:	2320      	movs	r3, #32
    ac42:	18fb      	adds	r3, r7, r3
    ac44:	05d2      	lsls	r2, r2, #23
    ac46:	0dd2      	lsrs	r2, r2, #23
    ac48:	801a      	strh	r2, [r3, #0]
    if (blockOfCluster == 0 && blockOffset == 0) {
    ac4a:	2323      	movs	r3, #35	; 0x23
    ac4c:	18fb      	adds	r3, r7, r3
    ac4e:	781b      	ldrb	r3, [r3, #0]
    ac50:	2b00      	cmp	r3, #0
    ac52:	d148      	bne.n	ace6 <_ZN6SdFile5writeEPKvt+0x13e>
    ac54:	2320      	movs	r3, #32
    ac56:	18fb      	adds	r3, r7, r3
    ac58:	881b      	ldrh	r3, [r3, #0]
    ac5a:	2b00      	cmp	r3, #0
    ac5c:	d143      	bne.n	ace6 <_ZN6SdFile5writeEPKvt+0x13e>
      // start of new cluster
      if (curCluster_ == 0) {
    ac5e:	68fb      	ldr	r3, [r7, #12]
    ac60:	68db      	ldr	r3, [r3, #12]
    ac62:	2b00      	cmp	r3, #0
    ac64:	d113      	bne.n	ac8e <_ZN6SdFile5writeEPKvt+0xe6>
        if (firstCluster_ == 0) {
    ac66:	68fb      	ldr	r3, [r7, #12]
    ac68:	6a1b      	ldr	r3, [r3, #32]
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d10a      	bne.n	ac84 <_ZN6SdFile5writeEPKvt+0xdc>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
    ac6e:	68fb      	ldr	r3, [r7, #12]
    ac70:	0018      	movs	r0, r3
    ac72:	f7ff f89d 	bl	9db0 <_ZN6SdFile10addClusterEv>
    ac76:	0003      	movs	r3, r0
    ac78:	425a      	negs	r2, r3
    ac7a:	4153      	adcs	r3, r2
    ac7c:	b2db      	uxtb	r3, r3
    ac7e:	2b00      	cmp	r3, #0
    ac80:	d031      	beq.n	ace6 <_ZN6SdFile5writeEPKvt+0x13e>
    ac82:	e10d      	b.n	aea0 <_ZN6SdFile5writeEPKvt+0x2f8>
        } else {
          curCluster_ = firstCluster_;
    ac84:	68fb      	ldr	r3, [r7, #12]
    ac86:	6a1a      	ldr	r2, [r3, #32]
    ac88:	68fb      	ldr	r3, [r7, #12]
    ac8a:	60da      	str	r2, [r3, #12]
    ac8c:	e02b      	b.n	ace6 <_ZN6SdFile5writeEPKvt+0x13e>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    ac8e:	68fb      	ldr	r3, [r7, #12]
    ac90:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ac92:	68fb      	ldr	r3, [r7, #12]
    ac94:	68db      	ldr	r3, [r3, #12]
    ac96:	2214      	movs	r2, #20
    ac98:	18ba      	adds	r2, r7, r2
    ac9a:	0019      	movs	r1, r3
    ac9c:	f000 faae 	bl	b1fc <_ZNK8SdVolume6fatGetEmPm>
    aca0:	0003      	movs	r3, r0
    aca2:	425a      	negs	r2, r3
    aca4:	4153      	adcs	r3, r2
    aca6:	b2db      	uxtb	r3, r3
    aca8:	2b00      	cmp	r3, #0
    acaa:	d001      	beq.n	acb0 <_ZN6SdFile5writeEPKvt+0x108>
    acac:	2300      	movs	r3, #0
    acae:	e0fd      	b.n	aeac <_ZN6SdFile5writeEPKvt+0x304>
        if (vol_->isEOC(next)) {
    acb0:	68fb      	ldr	r3, [r7, #12]
    acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    acb4:	697a      	ldr	r2, [r7, #20]
    acb6:	0011      	movs	r1, r2
    acb8:	0018      	movs	r0, r3
    acba:	f7ff f82d 	bl	9d18 <_ZNK8SdVolume5isEOCEm>
    acbe:	0003      	movs	r3, r0
    acc0:	1e5a      	subs	r2, r3, #1
    acc2:	4193      	sbcs	r3, r2
    acc4:	b2db      	uxtb	r3, r3
    acc6:	2b00      	cmp	r3, #0
    acc8:	d00a      	beq.n	ace0 <_ZN6SdFile5writeEPKvt+0x138>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    acca:	68fb      	ldr	r3, [r7, #12]
    accc:	0018      	movs	r0, r3
    acce:	f7ff f86f 	bl	9db0 <_ZN6SdFile10addClusterEv>
    acd2:	0003      	movs	r3, r0
    acd4:	425a      	negs	r2, r3
    acd6:	4153      	adcs	r3, r2
    acd8:	b2db      	uxtb	r3, r3
    acda:	2b00      	cmp	r3, #0
    acdc:	d003      	beq.n	ace6 <_ZN6SdFile5writeEPKvt+0x13e>
    acde:	e0df      	b.n	aea0 <_ZN6SdFile5writeEPKvt+0x2f8>
        } else {
          curCluster_ = next;
    ace0:	697a      	ldr	r2, [r7, #20]
    ace2:	68fb      	ldr	r3, [r7, #12]
    ace4:	60da      	str	r2, [r3, #12]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    ace6:	2328      	movs	r3, #40	; 0x28
    ace8:	18fb      	adds	r3, r7, r3
    acea:	2220      	movs	r2, #32
    acec:	18ba      	adds	r2, r7, r2
    acee:	8812      	ldrh	r2, [r2, #0]
    acf0:	2180      	movs	r1, #128	; 0x80
    acf2:	0089      	lsls	r1, r1, #2
    acf4:	1a8a      	subs	r2, r1, r2
    acf6:	801a      	strh	r2, [r3, #0]

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    acf8:	2328      	movs	r3, #40	; 0x28
    acfa:	18fb      	adds	r3, r7, r3
    acfc:	881a      	ldrh	r2, [r3, #0]
    acfe:	232a      	movs	r3, #42	; 0x2a
    ad00:	18fb      	adds	r3, r7, r3
    ad02:	881b      	ldrh	r3, [r3, #0]
    ad04:	429a      	cmp	r2, r3
    ad06:	dd05      	ble.n	ad14 <_ZN6SdFile5writeEPKvt+0x16c>
    ad08:	2328      	movs	r3, #40	; 0x28
    ad0a:	18fb      	adds	r3, r7, r3
    ad0c:	222a      	movs	r2, #42	; 0x2a
    ad0e:	18ba      	adds	r2, r7, r2
    ad10:	8812      	ldrh	r2, [r2, #0]
    ad12:	801a      	strh	r2, [r3, #0]

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    ad14:	68fb      	ldr	r3, [r7, #12]
    ad16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ad18:	68fb      	ldr	r3, [r7, #12]
    ad1a:	68db      	ldr	r3, [r3, #12]
    ad1c:	0019      	movs	r1, r3
    ad1e:	0010      	movs	r0, r2
    ad20:	f7fe ffc9 	bl	9cb6 <_ZNK8SdVolume17clusterStartBlockEm>
    ad24:	0002      	movs	r2, r0
    ad26:	2323      	movs	r3, #35	; 0x23
    ad28:	18fb      	adds	r3, r7, r3
    ad2a:	781b      	ldrb	r3, [r3, #0]
    ad2c:	18d3      	adds	r3, r2, r3
    ad2e:	61fb      	str	r3, [r7, #28]
    if (n == 512) {
    ad30:	2328      	movs	r3, #40	; 0x28
    ad32:	18fb      	adds	r3, r7, r3
    ad34:	881a      	ldrh	r2, [r3, #0]
    ad36:	2380      	movs	r3, #128	; 0x80
    ad38:	009b      	lsls	r3, r3, #2
    ad3a:	429a      	cmp	r2, r3
    ad3c:	d11d      	bne.n	ad7a <_ZN6SdFile5writeEPKvt+0x1d2>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    ad3e:	4b5d      	ldr	r3, [pc, #372]	; (aeb4 <_ZN6SdFile5writeEPKvt+0x30c>)
    ad40:	681a      	ldr	r2, [r3, #0]
    ad42:	69fb      	ldr	r3, [r7, #28]
    ad44:	429a      	cmp	r2, r3
    ad46:	d103      	bne.n	ad50 <_ZN6SdFile5writeEPKvt+0x1a8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    ad48:	4b5a      	ldr	r3, [pc, #360]	; (aeb4 <_ZN6SdFile5writeEPKvt+0x30c>)
    ad4a:	2201      	movs	r2, #1
    ad4c:	4252      	negs	r2, r2
    ad4e:	601a      	str	r2, [r3, #0]
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    ad50:	68fb      	ldr	r3, [r7, #12]
    ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ad54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ad56:	69f9      	ldr	r1, [r7, #28]
    ad58:	0018      	movs	r0, r3
    ad5a:	f7ff f815 	bl	9d88 <_ZN8SdVolume10writeBlockEmPKh>
    ad5e:	0003      	movs	r3, r0
    ad60:	425a      	negs	r2, r3
    ad62:	4153      	adcs	r3, r2
    ad64:	b2db      	uxtb	r3, r3
    ad66:	2b00      	cmp	r3, #0
    ad68:	d000      	beq.n	ad6c <_ZN6SdFile5writeEPKvt+0x1c4>
    ad6a:	e092      	b.n	ae92 <_ZN6SdFile5writeEPKvt+0x2ea>
      src += 512;
    ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad6e:	2280      	movs	r2, #128	; 0x80
    ad70:	0092      	lsls	r2, r2, #2
    ad72:	4694      	mov	ip, r2
    ad74:	4463      	add	r3, ip
    ad76:	62fb      	str	r3, [r7, #44]	; 0x2c
    ad78:	e03e      	b.n	adf8 <_ZN6SdFile5writeEPKvt+0x250>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    ad7a:	2320      	movs	r3, #32
    ad7c:	18fb      	adds	r3, r7, r3
    ad7e:	881b      	ldrh	r3, [r3, #0]
    ad80:	2b00      	cmp	r3, #0
    ad82:	d114      	bne.n	adae <_ZN6SdFile5writeEPKvt+0x206>
    ad84:	68fb      	ldr	r3, [r7, #12]
    ad86:	691a      	ldr	r2, [r3, #16]
    ad88:	68fb      	ldr	r3, [r7, #12]
    ad8a:	69db      	ldr	r3, [r3, #28]
    ad8c:	429a      	cmp	r2, r3
    ad8e:	d30e      	bcc.n	adae <_ZN6SdFile5writeEPKvt+0x206>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    ad90:	f000 f94c 	bl	b02c <_ZN8SdVolume10cacheFlushEv>
    ad94:	0003      	movs	r3, r0
    ad96:	425a      	negs	r2, r3
    ad98:	4153      	adcs	r3, r2
    ad9a:	b2db      	uxtb	r3, r3
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	d000      	beq.n	ada2 <_ZN6SdFile5writeEPKvt+0x1fa>
    ada0:	e079      	b.n	ae96 <_ZN6SdFile5writeEPKvt+0x2ee>
        SdVolume::cacheBlockNumber_ = block;
    ada2:	4b44      	ldr	r3, [pc, #272]	; (aeb4 <_ZN6SdFile5writeEPKvt+0x30c>)
    ada4:	69fa      	ldr	r2, [r7, #28]
    ada6:	601a      	str	r2, [r3, #0]
        SdVolume::cacheSetDirty();
    ada8:	f7fe ff96 	bl	9cd8 <_ZN8SdVolume13cacheSetDirtyEv>
    adac:	e00b      	b.n	adc6 <_ZN6SdFile5writeEPKvt+0x21e>
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    adae:	69fb      	ldr	r3, [r7, #28]
    adb0:	2101      	movs	r1, #1
    adb2:	0018      	movs	r0, r3
    adb4:	f000 f978 	bl	b0a8 <_ZN8SdVolume13cacheRawBlockEmh>
    adb8:	0003      	movs	r3, r0
    adba:	425a      	negs	r2, r3
    adbc:	4153      	adcs	r3, r2
    adbe:	b2db      	uxtb	r3, r3
    adc0:	2b00      	cmp	r3, #0
    adc2:	d000      	beq.n	adc6 <_ZN6SdFile5writeEPKvt+0x21e>
    adc4:	e069      	b.n	ae9a <_ZN6SdFile5writeEPKvt+0x2f2>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    adc6:	2320      	movs	r3, #32
    adc8:	18fb      	adds	r3, r7, r3
    adca:	881a      	ldrh	r2, [r3, #0]
    adcc:	4b3a      	ldr	r3, [pc, #232]	; (aeb8 <_ZN6SdFile5writeEPKvt+0x310>)
    adce:	18d3      	adds	r3, r2, r3
    add0:	627b      	str	r3, [r7, #36]	; 0x24
      uint8_t* end = dst + n;
    add2:	2328      	movs	r3, #40	; 0x28
    add4:	18fb      	adds	r3, r7, r3
    add6:	881b      	ldrh	r3, [r3, #0]
    add8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    adda:	18d3      	adds	r3, r2, r3
    addc:	61bb      	str	r3, [r7, #24]
      while (dst != end) *dst++ = *src++;
    adde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ade0:	69bb      	ldr	r3, [r7, #24]
    ade2:	429a      	cmp	r2, r3
    ade4:	d008      	beq.n	adf8 <_ZN6SdFile5writeEPKvt+0x250>
    ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ade8:	1c5a      	adds	r2, r3, #1
    adea:	627a      	str	r2, [r7, #36]	; 0x24
    adec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    adee:	1c51      	adds	r1, r2, #1
    adf0:	62f9      	str	r1, [r7, #44]	; 0x2c
    adf2:	7812      	ldrb	r2, [r2, #0]
    adf4:	701a      	strb	r2, [r3, #0]
    adf6:	e7f2      	b.n	adde <_ZN6SdFile5writeEPKvt+0x236>
    }
    nToWrite -= n;
    adf8:	232a      	movs	r3, #42	; 0x2a
    adfa:	18fb      	adds	r3, r7, r3
    adfc:	222a      	movs	r2, #42	; 0x2a
    adfe:	18b9      	adds	r1, r7, r2
    ae00:	2228      	movs	r2, #40	; 0x28
    ae02:	18ba      	adds	r2, r7, r2
    ae04:	8809      	ldrh	r1, [r1, #0]
    ae06:	8812      	ldrh	r2, [r2, #0]
    ae08:	1a8a      	subs	r2, r1, r2
    ae0a:	801a      	strh	r2, [r3, #0]
    curPosition_ += n;
    ae0c:	68fb      	ldr	r3, [r7, #12]
    ae0e:	691a      	ldr	r2, [r3, #16]
    ae10:	2328      	movs	r3, #40	; 0x28
    ae12:	18fb      	adds	r3, r7, r3
    ae14:	881b      	ldrh	r3, [r3, #0]
    ae16:	18d2      	adds	r2, r2, r3
    ae18:	68fb      	ldr	r3, [r7, #12]
    ae1a:	611a      	str	r2, [r3, #16]
  while (nToWrite > 0) {
    ae1c:	e6fb      	b.n	ac16 <_ZN6SdFile5writeEPKvt+0x6e>
  }
  if (curPosition_ > fileSize_) {
    ae1e:	68fb      	ldr	r3, [r7, #12]
    ae20:	691a      	ldr	r2, [r3, #16]
    ae22:	68fb      	ldr	r3, [r7, #12]
    ae24:	69db      	ldr	r3, [r3, #28]
    ae26:	429a      	cmp	r2, r3
    ae28:	d90c      	bls.n	ae44 <_ZN6SdFile5writeEPKvt+0x29c>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    ae2a:	68fb      	ldr	r3, [r7, #12]
    ae2c:	691a      	ldr	r2, [r3, #16]
    ae2e:	68fb      	ldr	r3, [r7, #12]
    ae30:	61da      	str	r2, [r3, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    ae32:	68fb      	ldr	r3, [r7, #12]
    ae34:	7a1b      	ldrb	r3, [r3, #8]
    ae36:	2280      	movs	r2, #128	; 0x80
    ae38:	4252      	negs	r2, r2
    ae3a:	4313      	orrs	r3, r2
    ae3c:	b2da      	uxtb	r2, r3
    ae3e:	68fb      	ldr	r3, [r7, #12]
    ae40:	721a      	strb	r2, [r3, #8]
    ae42:	e00f      	b.n	ae64 <_ZN6SdFile5writeEPKvt+0x2bc>
  } else if (dateTime_ && nbyte) {
    ae44:	4b1d      	ldr	r3, [pc, #116]	; (aebc <_ZN6SdFile5writeEPKvt+0x314>)
    ae46:	681b      	ldr	r3, [r3, #0]
    ae48:	2b00      	cmp	r3, #0
    ae4a:	d00b      	beq.n	ae64 <_ZN6SdFile5writeEPKvt+0x2bc>
    ae4c:	1dbb      	adds	r3, r7, #6
    ae4e:	881b      	ldrh	r3, [r3, #0]
    ae50:	2b00      	cmp	r3, #0
    ae52:	d007      	beq.n	ae64 <_ZN6SdFile5writeEPKvt+0x2bc>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    ae54:	68fb      	ldr	r3, [r7, #12]
    ae56:	7a1b      	ldrb	r3, [r3, #8]
    ae58:	2280      	movs	r2, #128	; 0x80
    ae5a:	4252      	negs	r2, r2
    ae5c:	4313      	orrs	r3, r2
    ae5e:	b2da      	uxtb	r2, r3
    ae60:	68fb      	ldr	r3, [r7, #12]
    ae62:	721a      	strb	r2, [r3, #8]
  }

  if (flags_ & O_SYNC) {
    ae64:	68fb      	ldr	r3, [r7, #12]
    ae66:	7a1b      	ldrb	r3, [r3, #8]
    ae68:	001a      	movs	r2, r3
    ae6a:	2308      	movs	r3, #8
    ae6c:	4013      	ands	r3, r2
    ae6e:	d009      	beq.n	ae84 <_ZN6SdFile5writeEPKvt+0x2dc>
    if (!sync()) goto writeErrorReturn;
    ae70:	68fb      	ldr	r3, [r7, #12]
    ae72:	0018      	movs	r0, r3
    ae74:	f7ff fd26 	bl	a8c4 <_ZN6SdFile4syncEv>
    ae78:	0003      	movs	r3, r0
    ae7a:	425a      	negs	r2, r3
    ae7c:	4153      	adcs	r3, r2
    ae7e:	b2db      	uxtb	r3, r3
    ae80:	2b00      	cmp	r3, #0
    ae82:	d10c      	bne.n	ae9e <_ZN6SdFile5writeEPKvt+0x2f6>
  }
  return nbyte;
    ae84:	1dbb      	adds	r3, r7, #6
    ae86:	881b      	ldrh	r3, [r3, #0]
    ae88:	e010      	b.n	aeac <_ZN6SdFile5writeEPKvt+0x304>
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    ae8a:	46c0      	nop			; (mov r8, r8)
    ae8c:	e008      	b.n	aea0 <_ZN6SdFile5writeEPKvt+0x2f8>
    if (!seekEnd()) goto writeErrorReturn;
    ae8e:	46c0      	nop			; (mov r8, r8)
    ae90:	e006      	b.n	aea0 <_ZN6SdFile5writeEPKvt+0x2f8>
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    ae92:	46c0      	nop			; (mov r8, r8)
    ae94:	e004      	b.n	aea0 <_ZN6SdFile5writeEPKvt+0x2f8>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    ae96:	46c0      	nop			; (mov r8, r8)
    ae98:	e002      	b.n	aea0 <_ZN6SdFile5writeEPKvt+0x2f8>
          goto writeErrorReturn;
    ae9a:	46c0      	nop			; (mov r8, r8)
    ae9c:	e000      	b.n	aea0 <_ZN6SdFile5writeEPKvt+0x2f8>
    if (!sync()) goto writeErrorReturn;
    ae9e:	46c0      	nop			; (mov r8, r8)

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
    aea0:	68fb      	ldr	r3, [r7, #12]
    aea2:	2101      	movs	r1, #1
    aea4:	0018      	movs	r0, r3
    aea6:	f7fd fc61 	bl	876c <_ZN5Print13setWriteErrorEi>
  return 0;
    aeaa:	2300      	movs	r3, #0
}
    aeac:	0018      	movs	r0, r3
    aeae:	46bd      	mov	sp, r7
    aeb0:	b00d      	add	sp, #52	; 0x34
    aeb2:	bd90      	pop	{r4, r7, pc}
    aeb4:	2000004c 	.word	0x2000004c
    aeb8:	20000968 	.word	0x20000968
    aebc:	20000964 	.word	0x20000964

0000aec0 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    aec0:	b580      	push	{r7, lr}
    aec2:	b082      	sub	sp, #8
    aec4:	af00      	add	r7, sp, #0
    aec6:	6078      	str	r0, [r7, #4]
    aec8:	000a      	movs	r2, r1
    aeca:	1cfb      	adds	r3, r7, #3
    aecc:	701a      	strb	r2, [r3, #0]
  return write(&b, 1);
    aece:	1cf9      	adds	r1, r7, #3
    aed0:	687b      	ldr	r3, [r7, #4]
    aed2:	2201      	movs	r2, #1
    aed4:	0018      	movs	r0, r3
    aed6:	f7ff fe67 	bl	aba8 <_ZN6SdFile5writeEPKvt>
    aeda:	0003      	movs	r3, r0
}
    aedc:	0018      	movs	r0, r3
    aede:	46bd      	mov	sp, r7
    aee0:	b002      	add	sp, #8
    aee2:	bd80      	pop	{r7, pc}

0000aee4 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    aee4:	b580      	push	{r7, lr}
    aee6:	b08a      	sub	sp, #40	; 0x28
    aee8:	af00      	add	r7, sp, #0
    aeea:	60f8      	str	r0, [r7, #12]
    aeec:	60b9      	str	r1, [r7, #8]
    aeee:	607a      	str	r2, [r7, #4]

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    aef0:	687b      	ldr	r3, [r7, #4]
    aef2:	681b      	ldr	r3, [r3, #0]
    aef4:	2b00      	cmp	r3, #0
    aef6:	d008      	beq.n	af0a <_ZN8SdVolume15allocContiguousEmPm+0x26>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    aef8:	687b      	ldr	r3, [r7, #4]
    aefa:	681b      	ldr	r3, [r3, #0]
    aefc:	3301      	adds	r3, #1
    aefe:	627b      	str	r3, [r7, #36]	; 0x24

    // don't save new start location
    setStart = false;
    af00:	2323      	movs	r3, #35	; 0x23
    af02:	18fb      	adds	r3, r7, r3
    af04:	2200      	movs	r2, #0
    af06:	701a      	strb	r2, [r3, #0]
    af08:	e00a      	b.n	af20 <_ZN8SdVolume15allocContiguousEmPm+0x3c>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    af0a:	68fb      	ldr	r3, [r7, #12]
    af0c:	681b      	ldr	r3, [r3, #0]
    af0e:	627b      	str	r3, [r7, #36]	; 0x24

    // save next search start if one cluster
    setStart = 1 == count;
    af10:	68bb      	ldr	r3, [r7, #8]
    af12:	3b01      	subs	r3, #1
    af14:	425a      	negs	r2, r3
    af16:	4153      	adcs	r3, r2
    af18:	b2da      	uxtb	r2, r3
    af1a:	2323      	movs	r3, #35	; 0x23
    af1c:	18fb      	adds	r3, r7, r3
    af1e:	701a      	strb	r2, [r3, #0]
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af22:	61fb      	str	r3, [r7, #28]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    af24:	68fb      	ldr	r3, [r7, #12]
    af26:	68db      	ldr	r3, [r3, #12]
    af28:	3301      	adds	r3, #1
    af2a:	617b      	str	r3, [r7, #20]

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    af2c:	2300      	movs	r3, #0
    af2e:	61bb      	str	r3, [r7, #24]
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    af30:	68fb      	ldr	r3, [r7, #12]
    af32:	68da      	ldr	r2, [r3, #12]
    af34:	69bb      	ldr	r3, [r7, #24]
    af36:	429a      	cmp	r2, r3
    af38:	d801      	bhi.n	af3e <_ZN8SdVolume15allocContiguousEmPm+0x5a>
    af3a:	2300      	movs	r3, #0
    af3c:	e071      	b.n	b022 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    af3e:	69fa      	ldr	r2, [r7, #28]
    af40:	697b      	ldr	r3, [r7, #20]
    af42:	429a      	cmp	r2, r3
    af44:	d903      	bls.n	af4e <_ZN8SdVolume15allocContiguousEmPm+0x6a>
      bgnCluster = endCluster = 2;
    af46:	2302      	movs	r3, #2
    af48:	61fb      	str	r3, [r7, #28]
    af4a:	69fb      	ldr	r3, [r7, #28]
    af4c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    af4e:	2310      	movs	r3, #16
    af50:	18fa      	adds	r2, r7, r3
    af52:	69f9      	ldr	r1, [r7, #28]
    af54:	68fb      	ldr	r3, [r7, #12]
    af56:	0018      	movs	r0, r3
    af58:	f000 f950 	bl	b1fc <_ZNK8SdVolume6fatGetEmPm>
    af5c:	0003      	movs	r3, r0
    af5e:	425a      	negs	r2, r3
    af60:	4153      	adcs	r3, r2
    af62:	b2db      	uxtb	r3, r3
    af64:	2b00      	cmp	r3, #0
    af66:	d001      	beq.n	af6c <_ZN8SdVolume15allocContiguousEmPm+0x88>
    af68:	2300      	movs	r3, #0
    af6a:	e05a      	b.n	b022 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

    if (f != 0) {
    af6c:	693b      	ldr	r3, [r7, #16]
    af6e:	2b00      	cmp	r3, #0
    af70:	d003      	beq.n	af7a <_ZN8SdVolume15allocContiguousEmPm+0x96>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    af72:	69fb      	ldr	r3, [r7, #28]
    af74:	3301      	adds	r3, #1
    af76:	627b      	str	r3, [r7, #36]	; 0x24
    af78:	e013      	b.n	afa2 <_ZN8SdVolume15allocContiguousEmPm+0xbe>
    } else if ((endCluster - bgnCluster + 1) == count) {
    af7a:	69fa      	ldr	r2, [r7, #28]
    af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af7e:	1ad3      	subs	r3, r2, r3
    af80:	1c5a      	adds	r2, r3, #1
    af82:	68bb      	ldr	r3, [r7, #8]
    af84:	429a      	cmp	r2, r3
    af86:	d10c      	bne.n	afa2 <_ZN8SdVolume15allocContiguousEmPm+0xbe>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    af88:	69fa      	ldr	r2, [r7, #28]
    af8a:	68fb      	ldr	r3, [r7, #12]
    af8c:	0011      	movs	r1, r2
    af8e:	0018      	movs	r0, r3
    af90:	f7fe feb0 	bl	9cf4 <_ZN8SdVolume9fatPutEOCEm>
    af94:	0003      	movs	r3, r0
    af96:	425a      	negs	r2, r3
    af98:	4153      	adcs	r3, r2
    af9a:	b2db      	uxtb	r3, r3
    af9c:	2b00      	cmp	r3, #0
    af9e:	d107      	bne.n	afb0 <_ZN8SdVolume15allocContiguousEmPm+0xcc>
    afa0:	e008      	b.n	afb4 <_ZN8SdVolume15allocContiguousEmPm+0xd0>
  for (uint32_t n = 0;; n++, endCluster++) {
    afa2:	69bb      	ldr	r3, [r7, #24]
    afa4:	3301      	adds	r3, #1
    afa6:	61bb      	str	r3, [r7, #24]
    afa8:	69fb      	ldr	r3, [r7, #28]
    afaa:	3301      	adds	r3, #1
    afac:	61fb      	str	r3, [r7, #28]
  }
    afae:	e7bf      	b.n	af30 <_ZN8SdVolume15allocContiguousEmPm+0x4c>
  if (!fatPutEOC(endCluster)) return false;
    afb0:	2300      	movs	r3, #0
    afb2:	e036      	b.n	b022 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

  // link clusters
  while (endCluster > bgnCluster) {
    afb4:	69fa      	ldr	r2, [r7, #28]
    afb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    afb8:	429a      	cmp	r2, r3
    afba:	d912      	bls.n	afe2 <_ZN8SdVolume15allocContiguousEmPm+0xfe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    afbc:	69fb      	ldr	r3, [r7, #28]
    afbe:	1e59      	subs	r1, r3, #1
    afc0:	69fa      	ldr	r2, [r7, #28]
    afc2:	68fb      	ldr	r3, [r7, #12]
    afc4:	0018      	movs	r0, r3
    afc6:	f000 f96b 	bl	b2a0 <_ZN8SdVolume6fatPutEmm>
    afca:	0003      	movs	r3, r0
    afcc:	425a      	negs	r2, r3
    afce:	4153      	adcs	r3, r2
    afd0:	b2db      	uxtb	r3, r3
    afd2:	2b00      	cmp	r3, #0
    afd4:	d001      	beq.n	afda <_ZN8SdVolume15allocContiguousEmPm+0xf6>
    afd6:	2300      	movs	r3, #0
    afd8:	e023      	b.n	b022 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    endCluster--;
    afda:	69fb      	ldr	r3, [r7, #28]
    afdc:	3b01      	subs	r3, #1
    afde:	61fb      	str	r3, [r7, #28]
  while (endCluster > bgnCluster) {
    afe0:	e7e8      	b.n	afb4 <_ZN8SdVolume15allocContiguousEmPm+0xd0>
  }
  if (*curCluster != 0) {
    afe2:	687b      	ldr	r3, [r7, #4]
    afe4:	681b      	ldr	r3, [r3, #0]
    afe6:	2b00      	cmp	r3, #0
    afe8:	d00e      	beq.n	b008 <_ZN8SdVolume15allocContiguousEmPm+0x124>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    afea:	687b      	ldr	r3, [r7, #4]
    afec:	6819      	ldr	r1, [r3, #0]
    afee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    aff0:	68fb      	ldr	r3, [r7, #12]
    aff2:	0018      	movs	r0, r3
    aff4:	f000 f954 	bl	b2a0 <_ZN8SdVolume6fatPutEmm>
    aff8:	0003      	movs	r3, r0
    affa:	425a      	negs	r2, r3
    affc:	4153      	adcs	r3, r2
    affe:	b2db      	uxtb	r3, r3
    b000:	2b00      	cmp	r3, #0
    b002:	d001      	beq.n	b008 <_ZN8SdVolume15allocContiguousEmPm+0x124>
    b004:	2300      	movs	r3, #0
    b006:	e00c      	b.n	b022 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    b008:	687b      	ldr	r3, [r7, #4]
    b00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b00c:	601a      	str	r2, [r3, #0]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    b00e:	2323      	movs	r3, #35	; 0x23
    b010:	18fb      	adds	r3, r7, r3
    b012:	781b      	ldrb	r3, [r3, #0]
    b014:	2b00      	cmp	r3, #0
    b016:	d003      	beq.n	b020 <_ZN8SdVolume15allocContiguousEmPm+0x13c>
    b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b01a:	1c5a      	adds	r2, r3, #1
    b01c:	68fb      	ldr	r3, [r7, #12]
    b01e:	601a      	str	r2, [r3, #0]

  return true;
    b020:	2301      	movs	r3, #1
}
    b022:	0018      	movs	r0, r3
    b024:	46bd      	mov	sp, r7
    b026:	b00a      	add	sp, #40	; 0x28
    b028:	bd80      	pop	{r7, pc}
	...

0000b02c <_ZN8SdVolume10cacheFlushEv>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    b02c:	b580      	push	{r7, lr}
    b02e:	af00      	add	r7, sp, #0
  if (cacheDirty_) {
    b030:	4b18      	ldr	r3, [pc, #96]	; (b094 <_ZN8SdVolume10cacheFlushEv+0x68>)
    b032:	781b      	ldrb	r3, [r3, #0]
    b034:	2b00      	cmp	r3, #0
    b036:	d029      	beq.n	b08c <_ZN8SdVolume10cacheFlushEv+0x60>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    b038:	4b17      	ldr	r3, [pc, #92]	; (b098 <_ZN8SdVolume10cacheFlushEv+0x6c>)
    b03a:	6818      	ldr	r0, [r3, #0]
    b03c:	4b17      	ldr	r3, [pc, #92]	; (b09c <_ZN8SdVolume10cacheFlushEv+0x70>)
    b03e:	681b      	ldr	r3, [r3, #0]
    b040:	4a17      	ldr	r2, [pc, #92]	; (b0a0 <_ZN8SdVolume10cacheFlushEv+0x74>)
    b042:	0019      	movs	r1, r3
    b044:	f7fe fcd0 	bl	99e8 <_ZN7Sd2Card10writeBlockEmPKh>
    b048:	0003      	movs	r3, r0
    b04a:	425a      	negs	r2, r3
    b04c:	4153      	adcs	r3, r2
    b04e:	b2db      	uxtb	r3, r3
    b050:	2b00      	cmp	r3, #0
    b052:	d001      	beq.n	b058 <_ZN8SdVolume10cacheFlushEv+0x2c>
      return false;
    b054:	2300      	movs	r3, #0
    b056:	e01a      	b.n	b08e <_ZN8SdVolume10cacheFlushEv+0x62>
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    b058:	4b12      	ldr	r3, [pc, #72]	; (b0a4 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b05a:	681b      	ldr	r3, [r3, #0]
    b05c:	2b00      	cmp	r3, #0
    b05e:	d012      	beq.n	b086 <_ZN8SdVolume10cacheFlushEv+0x5a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    b060:	4b0d      	ldr	r3, [pc, #52]	; (b098 <_ZN8SdVolume10cacheFlushEv+0x6c>)
    b062:	6818      	ldr	r0, [r3, #0]
    b064:	4b0f      	ldr	r3, [pc, #60]	; (b0a4 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b066:	681b      	ldr	r3, [r3, #0]
    b068:	4a0d      	ldr	r2, [pc, #52]	; (b0a0 <_ZN8SdVolume10cacheFlushEv+0x74>)
    b06a:	0019      	movs	r1, r3
    b06c:	f7fe fcbc 	bl	99e8 <_ZN7Sd2Card10writeBlockEmPKh>
    b070:	0003      	movs	r3, r0
    b072:	425a      	negs	r2, r3
    b074:	4153      	adcs	r3, r2
    b076:	b2db      	uxtb	r3, r3
    b078:	2b00      	cmp	r3, #0
    b07a:	d001      	beq.n	b080 <_ZN8SdVolume10cacheFlushEv+0x54>
        return false;
    b07c:	2300      	movs	r3, #0
    b07e:	e006      	b.n	b08e <_ZN8SdVolume10cacheFlushEv+0x62>
      }
      cacheMirrorBlock_ = 0;
    b080:	4b08      	ldr	r3, [pc, #32]	; (b0a4 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b082:	2200      	movs	r2, #0
    b084:	601a      	str	r2, [r3, #0]
    }
    cacheDirty_ = 0;
    b086:	4b03      	ldr	r3, [pc, #12]	; (b094 <_ZN8SdVolume10cacheFlushEv+0x68>)
    b088:	2200      	movs	r2, #0
    b08a:	701a      	strb	r2, [r3, #0]
  }
  return true;
    b08c:	2301      	movs	r3, #1
}
    b08e:	0018      	movs	r0, r3
    b090:	46bd      	mov	sp, r7
    b092:	bd80      	pop	{r7, pc}
    b094:	20000b6c 	.word	0x20000b6c
    b098:	20000b68 	.word	0x20000b68
    b09c:	2000004c 	.word	0x2000004c
    b0a0:	20000968 	.word	0x20000968
    b0a4:	20000b70 	.word	0x20000b70

0000b0a8 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    b0a8:	b580      	push	{r7, lr}
    b0aa:	b082      	sub	sp, #8
    b0ac:	af00      	add	r7, sp, #0
    b0ae:	6078      	str	r0, [r7, #4]
    b0b0:	000a      	movs	r2, r1
    b0b2:	1cfb      	adds	r3, r7, #3
    b0b4:	701a      	strb	r2, [r3, #0]
  if (cacheBlockNumber_ != blockNumber) {
    b0b6:	4b17      	ldr	r3, [pc, #92]	; (b114 <_ZN8SdVolume13cacheRawBlockEmh+0x6c>)
    b0b8:	681a      	ldr	r2, [r3, #0]
    b0ba:	687b      	ldr	r3, [r7, #4]
    b0bc:	429a      	cmp	r2, r3
    b0be:	d01b      	beq.n	b0f8 <_ZN8SdVolume13cacheRawBlockEmh+0x50>
    if (!cacheFlush()) return false;
    b0c0:	f7ff ffb4 	bl	b02c <_ZN8SdVolume10cacheFlushEv>
    b0c4:	0003      	movs	r3, r0
    b0c6:	425a      	negs	r2, r3
    b0c8:	4153      	adcs	r3, r2
    b0ca:	b2db      	uxtb	r3, r3
    b0cc:	2b00      	cmp	r3, #0
    b0ce:	d001      	beq.n	b0d4 <_ZN8SdVolume13cacheRawBlockEmh+0x2c>
    b0d0:	2300      	movs	r3, #0
    b0d2:	e01a      	b.n	b10a <_ZN8SdVolume13cacheRawBlockEmh+0x62>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    b0d4:	4b10      	ldr	r3, [pc, #64]	; (b118 <_ZN8SdVolume13cacheRawBlockEmh+0x70>)
    b0d6:	681b      	ldr	r3, [r3, #0]
    b0d8:	4a10      	ldr	r2, [pc, #64]	; (b11c <_ZN8SdVolume13cacheRawBlockEmh+0x74>)
    b0da:	6879      	ldr	r1, [r7, #4]
    b0dc:	0018      	movs	r0, r3
    b0de:	f7fe fa9b 	bl	9618 <_ZN7Sd2Card9readBlockEmPh>
    b0e2:	0003      	movs	r3, r0
    b0e4:	425a      	negs	r2, r3
    b0e6:	4153      	adcs	r3, r2
    b0e8:	b2db      	uxtb	r3, r3
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	d001      	beq.n	b0f2 <_ZN8SdVolume13cacheRawBlockEmh+0x4a>
    b0ee:	2300      	movs	r3, #0
    b0f0:	e00b      	b.n	b10a <_ZN8SdVolume13cacheRawBlockEmh+0x62>
    cacheBlockNumber_ = blockNumber;
    b0f2:	4b08      	ldr	r3, [pc, #32]	; (b114 <_ZN8SdVolume13cacheRawBlockEmh+0x6c>)
    b0f4:	687a      	ldr	r2, [r7, #4]
    b0f6:	601a      	str	r2, [r3, #0]
  }
  cacheDirty_ |= action;
    b0f8:	4b09      	ldr	r3, [pc, #36]	; (b120 <_ZN8SdVolume13cacheRawBlockEmh+0x78>)
    b0fa:	781a      	ldrb	r2, [r3, #0]
    b0fc:	1cfb      	adds	r3, r7, #3
    b0fe:	781b      	ldrb	r3, [r3, #0]
    b100:	4313      	orrs	r3, r2
    b102:	b2da      	uxtb	r2, r3
    b104:	4b06      	ldr	r3, [pc, #24]	; (b120 <_ZN8SdVolume13cacheRawBlockEmh+0x78>)
    b106:	701a      	strb	r2, [r3, #0]
  return true;
    b108:	2301      	movs	r3, #1
}
    b10a:	0018      	movs	r0, r3
    b10c:	46bd      	mov	sp, r7
    b10e:	b002      	add	sp, #8
    b110:	bd80      	pop	{r7, pc}
    b112:	46c0      	nop			; (mov r8, r8)
    b114:	2000004c 	.word	0x2000004c
    b118:	20000b68 	.word	0x20000b68
    b11c:	20000968 	.word	0x20000968
    b120:	20000b6c 	.word	0x20000b6c

0000b124 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    b124:	b580      	push	{r7, lr}
    b126:	b084      	sub	sp, #16
    b128:	af00      	add	r7, sp, #0
    b12a:	6078      	str	r0, [r7, #4]
  if (!cacheFlush()) return false;
    b12c:	f7ff ff7e 	bl	b02c <_ZN8SdVolume10cacheFlushEv>
    b130:	0003      	movs	r3, r0
    b132:	425a      	negs	r2, r3
    b134:	4153      	adcs	r3, r2
    b136:	b2db      	uxtb	r3, r3
    b138:	2b00      	cmp	r3, #0
    b13a:	d001      	beq.n	b140 <_ZN8SdVolume14cacheZeroBlockEm+0x1c>
    b13c:	2300      	movs	r3, #0
    b13e:	e01d      	b.n	b17c <_ZN8SdVolume14cacheZeroBlockEm+0x58>

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    b140:	230e      	movs	r3, #14
    b142:	18fb      	adds	r3, r7, r3
    b144:	2200      	movs	r2, #0
    b146:	801a      	strh	r2, [r3, #0]
    b148:	230e      	movs	r3, #14
    b14a:	18fb      	adds	r3, r7, r3
    b14c:	881b      	ldrh	r3, [r3, #0]
    b14e:	4a0d      	ldr	r2, [pc, #52]	; (b184 <_ZN8SdVolume14cacheZeroBlockEm+0x60>)
    b150:	4293      	cmp	r3, r2
    b152:	dc0d      	bgt.n	b170 <_ZN8SdVolume14cacheZeroBlockEm+0x4c>
    cacheBuffer_.data[i] = 0;
    b154:	230e      	movs	r3, #14
    b156:	18fb      	adds	r3, r7, r3
    b158:	881b      	ldrh	r3, [r3, #0]
    b15a:	4a0b      	ldr	r2, [pc, #44]	; (b188 <_ZN8SdVolume14cacheZeroBlockEm+0x64>)
    b15c:	2100      	movs	r1, #0
    b15e:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i = 0; i < 512; i++) {
    b160:	230e      	movs	r3, #14
    b162:	18fb      	adds	r3, r7, r3
    b164:	881a      	ldrh	r2, [r3, #0]
    b166:	230e      	movs	r3, #14
    b168:	18fb      	adds	r3, r7, r3
    b16a:	3201      	adds	r2, #1
    b16c:	801a      	strh	r2, [r3, #0]
    b16e:	e7eb      	b.n	b148 <_ZN8SdVolume14cacheZeroBlockEm+0x24>
  }
  cacheBlockNumber_ = blockNumber;
    b170:	4b06      	ldr	r3, [pc, #24]	; (b18c <_ZN8SdVolume14cacheZeroBlockEm+0x68>)
    b172:	687a      	ldr	r2, [r7, #4]
    b174:	601a      	str	r2, [r3, #0]
  cacheSetDirty();
    b176:	f7fe fdaf 	bl	9cd8 <_ZN8SdVolume13cacheSetDirtyEv>
  return true;
    b17a:	2301      	movs	r3, #1
}
    b17c:	0018      	movs	r0, r3
    b17e:	46bd      	mov	sp, r7
    b180:	b004      	add	sp, #16
    b182:	bd80      	pop	{r7, pc}
    b184:	000001ff 	.word	0x000001ff
    b188:	20000968 	.word	0x20000968
    b18c:	2000004c 	.word	0x2000004c

0000b190 <_ZNK8SdVolume9chainSizeEmPm>:
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    b190:	b580      	push	{r7, lr}
    b192:	b086      	sub	sp, #24
    b194:	af00      	add	r7, sp, #0
    b196:	60f8      	str	r0, [r7, #12]
    b198:	60b9      	str	r1, [r7, #8]
    b19a:	607a      	str	r2, [r7, #4]
  uint32_t s = 0;
    b19c:	2300      	movs	r3, #0
    b19e:	617b      	str	r3, [r7, #20]
  do {
    if (!fatGet(cluster, &cluster)) return false;
    b1a0:	68b9      	ldr	r1, [r7, #8]
    b1a2:	2308      	movs	r3, #8
    b1a4:	18fa      	adds	r2, r7, r3
    b1a6:	68fb      	ldr	r3, [r7, #12]
    b1a8:	0018      	movs	r0, r3
    b1aa:	f000 f827 	bl	b1fc <_ZNK8SdVolume6fatGetEmPm>
    b1ae:	0003      	movs	r3, r0
    b1b0:	425a      	negs	r2, r3
    b1b2:	4153      	adcs	r3, r2
    b1b4:	b2db      	uxtb	r3, r3
    b1b6:	2b00      	cmp	r3, #0
    b1b8:	d001      	beq.n	b1be <_ZNK8SdVolume9chainSizeEmPm+0x2e>
    b1ba:	2300      	movs	r3, #0
    b1bc:	e019      	b.n	b1f2 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    s += 512UL << clusterSizeShift_;
    b1be:	68fb      	ldr	r3, [r7, #12]
    b1c0:	7c1b      	ldrb	r3, [r3, #16]
    b1c2:	001a      	movs	r2, r3
    b1c4:	2380      	movs	r3, #128	; 0x80
    b1c6:	009b      	lsls	r3, r3, #2
    b1c8:	4093      	lsls	r3, r2
    b1ca:	697a      	ldr	r2, [r7, #20]
    b1cc:	18d3      	adds	r3, r2, r3
    b1ce:	617b      	str	r3, [r7, #20]
  } while (!isEOC(cluster));
    b1d0:	68ba      	ldr	r2, [r7, #8]
    b1d2:	68fb      	ldr	r3, [r7, #12]
    b1d4:	0011      	movs	r1, r2
    b1d6:	0018      	movs	r0, r3
    b1d8:	f7fe fd9e 	bl	9d18 <_ZNK8SdVolume5isEOCEm>
    b1dc:	0003      	movs	r3, r0
  do {
    b1de:	425a      	negs	r2, r3
    b1e0:	4153      	adcs	r3, r2
    b1e2:	b2db      	uxtb	r3, r3
    b1e4:	2b00      	cmp	r3, #0
    b1e6:	d000      	beq.n	b1ea <_ZNK8SdVolume9chainSizeEmPm+0x5a>
    b1e8:	e7da      	b.n	b1a0 <_ZNK8SdVolume9chainSizeEmPm+0x10>
  *size = s;
    b1ea:	687b      	ldr	r3, [r7, #4]
    b1ec:	697a      	ldr	r2, [r7, #20]
    b1ee:	601a      	str	r2, [r3, #0]
  return true;
    b1f0:	2301      	movs	r3, #1
}
    b1f2:	0018      	movs	r0, r3
    b1f4:	46bd      	mov	sp, r7
    b1f6:	b006      	add	sp, #24
    b1f8:	bd80      	pop	{r7, pc}
	...

0000b1fc <_ZNK8SdVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    b1fc:	b580      	push	{r7, lr}
    b1fe:	b086      	sub	sp, #24
    b200:	af00      	add	r7, sp, #0
    b202:	60f8      	str	r0, [r7, #12]
    b204:	60b9      	str	r1, [r7, #8]
    b206:	607a      	str	r2, [r7, #4]
  if (cluster > (clusterCount_ + 1)) return false;
    b208:	68fb      	ldr	r3, [r7, #12]
    b20a:	68db      	ldr	r3, [r3, #12]
    b20c:	1c5a      	adds	r2, r3, #1
    b20e:	68bb      	ldr	r3, [r7, #8]
    b210:	429a      	cmp	r2, r3
    b212:	d201      	bcs.n	b218 <_ZNK8SdVolume6fatGetEmPm+0x1c>
    b214:	2300      	movs	r3, #0
    b216:	e03b      	b.n	b290 <_ZNK8SdVolume6fatGetEmPm+0x94>
  uint32_t lba = fatStartBlock_;
    b218:	68fb      	ldr	r3, [r7, #12]
    b21a:	69db      	ldr	r3, [r3, #28]
    b21c:	617b      	str	r3, [r7, #20]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    b21e:	68fb      	ldr	r3, [r7, #12]
    b220:	2220      	movs	r2, #32
    b222:	5c9b      	ldrb	r3, [r3, r2]
    b224:	2b10      	cmp	r3, #16
    b226:	d102      	bne.n	b22e <_ZNK8SdVolume6fatGetEmPm+0x32>
    b228:	68bb      	ldr	r3, [r7, #8]
    b22a:	0a1b      	lsrs	r3, r3, #8
    b22c:	e001      	b.n	b232 <_ZNK8SdVolume6fatGetEmPm+0x36>
    b22e:	68bb      	ldr	r3, [r7, #8]
    b230:	09db      	lsrs	r3, r3, #7
    b232:	697a      	ldr	r2, [r7, #20]
    b234:	18d3      	adds	r3, r2, r3
    b236:	617b      	str	r3, [r7, #20]
  if (lba != cacheBlockNumber_) {
    b238:	4b17      	ldr	r3, [pc, #92]	; (b298 <_ZNK8SdVolume6fatGetEmPm+0x9c>)
    b23a:	681b      	ldr	r3, [r3, #0]
    b23c:	697a      	ldr	r2, [r7, #20]
    b23e:	429a      	cmp	r2, r3
    b240:	d00c      	beq.n	b25c <_ZNK8SdVolume6fatGetEmPm+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    b242:	697b      	ldr	r3, [r7, #20]
    b244:	2100      	movs	r1, #0
    b246:	0018      	movs	r0, r3
    b248:	f7ff ff2e 	bl	b0a8 <_ZN8SdVolume13cacheRawBlockEmh>
    b24c:	0003      	movs	r3, r0
    b24e:	425a      	negs	r2, r3
    b250:	4153      	adcs	r3, r2
    b252:	b2db      	uxtb	r3, r3
    b254:	2b00      	cmp	r3, #0
    b256:	d001      	beq.n	b25c <_ZNK8SdVolume6fatGetEmPm+0x60>
    b258:	2300      	movs	r3, #0
    b25a:	e019      	b.n	b290 <_ZNK8SdVolume6fatGetEmPm+0x94>
  }
  if (fatType_ == 16) {
    b25c:	68fb      	ldr	r3, [r7, #12]
    b25e:	2220      	movs	r2, #32
    b260:	5c9b      	ldrb	r3, [r3, r2]
    b262:	2b10      	cmp	r3, #16
    b264:	d109      	bne.n	b27a <_ZNK8SdVolume6fatGetEmPm+0x7e>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    b266:	68bb      	ldr	r3, [r7, #8]
    b268:	22ff      	movs	r2, #255	; 0xff
    b26a:	401a      	ands	r2, r3
    b26c:	4b0b      	ldr	r3, [pc, #44]	; (b29c <_ZNK8SdVolume6fatGetEmPm+0xa0>)
    b26e:	0052      	lsls	r2, r2, #1
    b270:	5ad3      	ldrh	r3, [r2, r3]
    b272:	001a      	movs	r2, r3
    b274:	687b      	ldr	r3, [r7, #4]
    b276:	601a      	str	r2, [r3, #0]
    b278:	e009      	b.n	b28e <_ZNK8SdVolume6fatGetEmPm+0x92>
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    b27a:	68bb      	ldr	r3, [r7, #8]
    b27c:	227f      	movs	r2, #127	; 0x7f
    b27e:	401a      	ands	r2, r3
    b280:	4b06      	ldr	r3, [pc, #24]	; (b29c <_ZNK8SdVolume6fatGetEmPm+0xa0>)
    b282:	0092      	lsls	r2, r2, #2
    b284:	58d3      	ldr	r3, [r2, r3]
    b286:	011b      	lsls	r3, r3, #4
    b288:	091a      	lsrs	r2, r3, #4
    b28a:	687b      	ldr	r3, [r7, #4]
    b28c:	601a      	str	r2, [r3, #0]
  }
  return true;
    b28e:	2301      	movs	r3, #1
}
    b290:	0018      	movs	r0, r3
    b292:	46bd      	mov	sp, r7
    b294:	b006      	add	sp, #24
    b296:	bd80      	pop	{r7, pc}
    b298:	2000004c 	.word	0x2000004c
    b29c:	20000968 	.word	0x20000968

0000b2a0 <_ZN8SdVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    b2a0:	b580      	push	{r7, lr}
    b2a2:	b086      	sub	sp, #24
    b2a4:	af00      	add	r7, sp, #0
    b2a6:	60f8      	str	r0, [r7, #12]
    b2a8:	60b9      	str	r1, [r7, #8]
    b2aa:	607a      	str	r2, [r7, #4]
  // error if reserved cluster
  if (cluster < 2) return false;
    b2ac:	68bb      	ldr	r3, [r7, #8]
    b2ae:	2b01      	cmp	r3, #1
    b2b0:	d801      	bhi.n	b2b6 <_ZN8SdVolume6fatPutEmm+0x16>
    b2b2:	2300      	movs	r3, #0
    b2b4:	e04b      	b.n	b34e <_ZN8SdVolume6fatPutEmm+0xae>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    b2b6:	68fb      	ldr	r3, [r7, #12]
    b2b8:	68db      	ldr	r3, [r3, #12]
    b2ba:	1c5a      	adds	r2, r3, #1
    b2bc:	68bb      	ldr	r3, [r7, #8]
    b2be:	429a      	cmp	r2, r3
    b2c0:	d201      	bcs.n	b2c6 <_ZN8SdVolume6fatPutEmm+0x26>
    b2c2:	2300      	movs	r3, #0
    b2c4:	e043      	b.n	b34e <_ZN8SdVolume6fatPutEmm+0xae>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    b2c6:	68fb      	ldr	r3, [r7, #12]
    b2c8:	69db      	ldr	r3, [r3, #28]
    b2ca:	617b      	str	r3, [r7, #20]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    b2cc:	68fb      	ldr	r3, [r7, #12]
    b2ce:	2220      	movs	r2, #32
    b2d0:	5c9b      	ldrb	r3, [r3, r2]
    b2d2:	2b10      	cmp	r3, #16
    b2d4:	d102      	bne.n	b2dc <_ZN8SdVolume6fatPutEmm+0x3c>
    b2d6:	68bb      	ldr	r3, [r7, #8]
    b2d8:	0a1b      	lsrs	r3, r3, #8
    b2da:	e001      	b.n	b2e0 <_ZN8SdVolume6fatPutEmm+0x40>
    b2dc:	68bb      	ldr	r3, [r7, #8]
    b2de:	09db      	lsrs	r3, r3, #7
    b2e0:	697a      	ldr	r2, [r7, #20]
    b2e2:	18d3      	adds	r3, r2, r3
    b2e4:	617b      	str	r3, [r7, #20]

  if (lba != cacheBlockNumber_) {
    b2e6:	4b1c      	ldr	r3, [pc, #112]	; (b358 <_ZN8SdVolume6fatPutEmm+0xb8>)
    b2e8:	681b      	ldr	r3, [r3, #0]
    b2ea:	697a      	ldr	r2, [r7, #20]
    b2ec:	429a      	cmp	r2, r3
    b2ee:	d00c      	beq.n	b30a <_ZN8SdVolume6fatPutEmm+0x6a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    b2f0:	697b      	ldr	r3, [r7, #20]
    b2f2:	2100      	movs	r1, #0
    b2f4:	0018      	movs	r0, r3
    b2f6:	f7ff fed7 	bl	b0a8 <_ZN8SdVolume13cacheRawBlockEmh>
    b2fa:	0003      	movs	r3, r0
    b2fc:	425a      	negs	r2, r3
    b2fe:	4153      	adcs	r3, r2
    b300:	b2db      	uxtb	r3, r3
    b302:	2b00      	cmp	r3, #0
    b304:	d001      	beq.n	b30a <_ZN8SdVolume6fatPutEmm+0x6a>
    b306:	2300      	movs	r3, #0
    b308:	e021      	b.n	b34e <_ZN8SdVolume6fatPutEmm+0xae>
  }
  // store entry
  if (fatType_ == 16) {
    b30a:	68fb      	ldr	r3, [r7, #12]
    b30c:	2220      	movs	r2, #32
    b30e:	5c9b      	ldrb	r3, [r3, r2]
    b310:	2b10      	cmp	r3, #16
    b312:	d108      	bne.n	b326 <_ZN8SdVolume6fatPutEmm+0x86>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    b314:	68bb      	ldr	r3, [r7, #8]
    b316:	22ff      	movs	r2, #255	; 0xff
    b318:	401a      	ands	r2, r3
    b31a:	687b      	ldr	r3, [r7, #4]
    b31c:	b299      	uxth	r1, r3
    b31e:	4b0f      	ldr	r3, [pc, #60]	; (b35c <_ZN8SdVolume6fatPutEmm+0xbc>)
    b320:	0052      	lsls	r2, r2, #1
    b322:	52d1      	strh	r1, [r2, r3]
    b324:	e006      	b.n	b334 <_ZN8SdVolume6fatPutEmm+0x94>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    b326:	68bb      	ldr	r3, [r7, #8]
    b328:	227f      	movs	r2, #127	; 0x7f
    b32a:	401a      	ands	r2, r3
    b32c:	4b0b      	ldr	r3, [pc, #44]	; (b35c <_ZN8SdVolume6fatPutEmm+0xbc>)
    b32e:	0092      	lsls	r2, r2, #2
    b330:	6879      	ldr	r1, [r7, #4]
    b332:	50d1      	str	r1, [r2, r3]
  }
  cacheSetDirty();
    b334:	f7fe fcd0 	bl	9cd8 <_ZN8SdVolume13cacheSetDirtyEv>

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    b338:	68fb      	ldr	r3, [r7, #12]
    b33a:	7e1b      	ldrb	r3, [r3, #24]
    b33c:	2b01      	cmp	r3, #1
    b33e:	dd05      	ble.n	b34c <_ZN8SdVolume6fatPutEmm+0xac>
    b340:	68fb      	ldr	r3, [r7, #12]
    b342:	689a      	ldr	r2, [r3, #8]
    b344:	697b      	ldr	r3, [r7, #20]
    b346:	18d2      	adds	r2, r2, r3
    b348:	4b05      	ldr	r3, [pc, #20]	; (b360 <_ZN8SdVolume6fatPutEmm+0xc0>)
    b34a:	601a      	str	r2, [r3, #0]
  return true;
    b34c:	2301      	movs	r3, #1
}
    b34e:	0018      	movs	r0, r3
    b350:	46bd      	mov	sp, r7
    b352:	b006      	add	sp, #24
    b354:	bd80      	pop	{r7, pc}
    b356:	46c0      	nop			; (mov r8, r8)
    b358:	2000004c 	.word	0x2000004c
    b35c:	20000968 	.word	0x20000968
    b360:	20000b70 	.word	0x20000b70

0000b364 <_ZN8SdVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    b364:	b580      	push	{r7, lr}
    b366:	b084      	sub	sp, #16
    b368:	af00      	add	r7, sp, #0
    b36a:	6078      	str	r0, [r7, #4]
    b36c:	6039      	str	r1, [r7, #0]
  // clear free cluster location
  allocSearchStart_ = 2;
    b36e:	687b      	ldr	r3, [r7, #4]
    b370:	2202      	movs	r2, #2
    b372:	601a      	str	r2, [r3, #0]

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    b374:	230c      	movs	r3, #12
    b376:	18fa      	adds	r2, r7, r3
    b378:	6839      	ldr	r1, [r7, #0]
    b37a:	687b      	ldr	r3, [r7, #4]
    b37c:	0018      	movs	r0, r3
    b37e:	f7ff ff3d 	bl	b1fc <_ZNK8SdVolume6fatGetEmPm>
    b382:	0003      	movs	r3, r0
    b384:	425a      	negs	r2, r3
    b386:	4153      	adcs	r3, r2
    b388:	b2db      	uxtb	r3, r3
    b38a:	2b00      	cmp	r3, #0
    b38c:	d001      	beq.n	b392 <_ZN8SdVolume9freeChainEm+0x2e>
    b38e:	2300      	movs	r3, #0
    b390:	e01d      	b.n	b3ce <_ZN8SdVolume9freeChainEm+0x6a>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    b392:	6839      	ldr	r1, [r7, #0]
    b394:	687b      	ldr	r3, [r7, #4]
    b396:	2200      	movs	r2, #0
    b398:	0018      	movs	r0, r3
    b39a:	f7ff ff81 	bl	b2a0 <_ZN8SdVolume6fatPutEmm>
    b39e:	0003      	movs	r3, r0
    b3a0:	425a      	negs	r2, r3
    b3a2:	4153      	adcs	r3, r2
    b3a4:	b2db      	uxtb	r3, r3
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	d001      	beq.n	b3ae <_ZN8SdVolume9freeChainEm+0x4a>
    b3aa:	2300      	movs	r3, #0
    b3ac:	e00f      	b.n	b3ce <_ZN8SdVolume9freeChainEm+0x6a>

    cluster = next;
    b3ae:	68fb      	ldr	r3, [r7, #12]
    b3b0:	603b      	str	r3, [r7, #0]
  } while (!isEOC(cluster));
    b3b2:	683a      	ldr	r2, [r7, #0]
    b3b4:	687b      	ldr	r3, [r7, #4]
    b3b6:	0011      	movs	r1, r2
    b3b8:	0018      	movs	r0, r3
    b3ba:	f7fe fcad 	bl	9d18 <_ZNK8SdVolume5isEOCEm>
    b3be:	0003      	movs	r3, r0
  do {
    b3c0:	425a      	negs	r2, r3
    b3c2:	4153      	adcs	r3, r2
    b3c4:	b2db      	uxtb	r3, r3
    b3c6:	2b00      	cmp	r3, #0
    b3c8:	d000      	beq.n	b3cc <_ZN8SdVolume9freeChainEm+0x68>
    b3ca:	e7d3      	b.n	b374 <_ZN8SdVolume9freeChainEm+0x10>

  return true;
    b3cc:	2301      	movs	r3, #1
}
    b3ce:	0018      	movs	r0, r3
    b3d0:	46bd      	mov	sp, r7
    b3d2:	b004      	add	sp, #16
    b3d4:	bd80      	pop	{r7, pc}
	...

0000b3d8 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    b3d8:	b580      	push	{r7, lr}
    b3da:	b088      	sub	sp, #32
    b3dc:	af00      	add	r7, sp, #0
    b3de:	60f8      	str	r0, [r7, #12]
    b3e0:	60b9      	str	r1, [r7, #8]
    b3e2:	1dfb      	adds	r3, r7, #7
    b3e4:	701a      	strb	r2, [r3, #0]
  uint32_t volumeStartBlock = 0;
    b3e6:	2300      	movs	r3, #0
    b3e8:	61fb      	str	r3, [r7, #28]
  sdCard_ = dev;
    b3ea:	4ba6      	ldr	r3, [pc, #664]	; (b684 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ac>)
    b3ec:	68ba      	ldr	r2, [r7, #8]
    b3ee:	601a      	str	r2, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    b3f0:	1dfb      	adds	r3, r7, #7
    b3f2:	781b      	ldrb	r3, [r3, #0]
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	d04a      	beq.n	b48e <_ZN8SdVolume4initEP7Sd2Cardh+0xb6>
    if (part > 4)return false;
    b3f8:	1dfb      	adds	r3, r7, #7
    b3fa:	781b      	ldrb	r3, [r3, #0]
    b3fc:	2b04      	cmp	r3, #4
    b3fe:	dd01      	ble.n	b404 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    b400:	2300      	movs	r3, #0
    b402:	e13b      	b.n	b67c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    b404:	69fb      	ldr	r3, [r7, #28]
    b406:	2100      	movs	r1, #0
    b408:	0018      	movs	r0, r3
    b40a:	f7ff fe4d 	bl	b0a8 <_ZN8SdVolume13cacheRawBlockEmh>
    b40e:	0003      	movs	r3, r0
    b410:	425a      	negs	r2, r3
    b412:	4153      	adcs	r3, r2
    b414:	b2db      	uxtb	r3, r3
    b416:	2b00      	cmp	r3, #0
    b418:	d001      	beq.n	b41e <_ZN8SdVolume4initEP7Sd2Cardh+0x46>
    b41a:	2300      	movs	r3, #0
    b41c:	e12e      	b.n	b67c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    b41e:	1dfb      	adds	r3, r7, #7
    b420:	781b      	ldrb	r3, [r3, #0]
    b422:	3b01      	subs	r3, #1
    b424:	011b      	lsls	r3, r3, #4
    b426:	33b9      	adds	r3, #185	; 0xb9
    b428:	33ff      	adds	r3, #255	; 0xff
    b42a:	001a      	movs	r2, r3
    b42c:	4b96      	ldr	r3, [pc, #600]	; (b688 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b0>)
    b42e:	18d3      	adds	r3, r2, r3
    b430:	3306      	adds	r3, #6
    b432:	61bb      	str	r3, [r7, #24]
    if ((p->boot & 0X7F) !=0  ||
    b434:	69bb      	ldr	r3, [r7, #24]
    b436:	781b      	ldrb	r3, [r3, #0]
    b438:	001a      	movs	r2, r3
    b43a:	237f      	movs	r3, #127	; 0x7f
    b43c:	4013      	ands	r3, r2
    b43e:	d118      	bne.n	b472 <_ZN8SdVolume4initEP7Sd2Cardh+0x9a>
      p->totalSectors < 100 ||
    b440:	69bb      	ldr	r3, [r7, #24]
    b442:	7b1a      	ldrb	r2, [r3, #12]
    b444:	7b59      	ldrb	r1, [r3, #13]
    b446:	0209      	lsls	r1, r1, #8
    b448:	430a      	orrs	r2, r1
    b44a:	7b99      	ldrb	r1, [r3, #14]
    b44c:	0409      	lsls	r1, r1, #16
    b44e:	430a      	orrs	r2, r1
    b450:	7bdb      	ldrb	r3, [r3, #15]
    b452:	061b      	lsls	r3, r3, #24
    b454:	4313      	orrs	r3, r2
    if ((p->boot & 0X7F) !=0  ||
    b456:	2b63      	cmp	r3, #99	; 0x63
    b458:	d90b      	bls.n	b472 <_ZN8SdVolume4initEP7Sd2Cardh+0x9a>
      p->firstSector == 0) {
    b45a:	69bb      	ldr	r3, [r7, #24]
    b45c:	7a1a      	ldrb	r2, [r3, #8]
    b45e:	7a59      	ldrb	r1, [r3, #9]
    b460:	0209      	lsls	r1, r1, #8
    b462:	430a      	orrs	r2, r1
    b464:	7a99      	ldrb	r1, [r3, #10]
    b466:	0409      	lsls	r1, r1, #16
    b468:	430a      	orrs	r2, r1
    b46a:	7adb      	ldrb	r3, [r3, #11]
    b46c:	061b      	lsls	r3, r3, #24
    b46e:	4313      	orrs	r3, r2
      p->totalSectors < 100 ||
    b470:	d101      	bne.n	b476 <_ZN8SdVolume4initEP7Sd2Cardh+0x9e>
      // not a valid partition
      return false;
    b472:	2300      	movs	r3, #0
    b474:	e102      	b.n	b67c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    }
    volumeStartBlock = p->firstSector;
    b476:	69bb      	ldr	r3, [r7, #24]
    b478:	7a1a      	ldrb	r2, [r3, #8]
    b47a:	7a59      	ldrb	r1, [r3, #9]
    b47c:	0209      	lsls	r1, r1, #8
    b47e:	430a      	orrs	r2, r1
    b480:	7a99      	ldrb	r1, [r3, #10]
    b482:	0409      	lsls	r1, r1, #16
    b484:	430a      	orrs	r2, r1
    b486:	7adb      	ldrb	r3, [r3, #11]
    b488:	061b      	lsls	r3, r3, #24
    b48a:	4313      	orrs	r3, r2
    b48c:	61fb      	str	r3, [r7, #28]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    b48e:	69fb      	ldr	r3, [r7, #28]
    b490:	2100      	movs	r1, #0
    b492:	0018      	movs	r0, r3
    b494:	f7ff fe08 	bl	b0a8 <_ZN8SdVolume13cacheRawBlockEmh>
    b498:	0003      	movs	r3, r0
    b49a:	425a      	negs	r2, r3
    b49c:	4153      	adcs	r3, r2
    b49e:	b2db      	uxtb	r3, r3
    b4a0:	2b00      	cmp	r3, #0
    b4a2:	d001      	beq.n	b4a8 <_ZN8SdVolume4initEP7Sd2Cardh+0xd0>
    b4a4:	2300      	movs	r3, #0
    b4a6:	e0e9      	b.n	b67c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
    b4a8:	4b78      	ldr	r3, [pc, #480]	; (b68c <_ZN8SdVolume4initEP7Sd2Cardh+0x2b4>)
    b4aa:	617b      	str	r3, [r7, #20]
  if (bpb->bytesPerSector != 512 ||
    b4ac:	697b      	ldr	r3, [r7, #20]
    b4ae:	781a      	ldrb	r2, [r3, #0]
    b4b0:	785b      	ldrb	r3, [r3, #1]
    b4b2:	021b      	lsls	r3, r3, #8
    b4b4:	4313      	orrs	r3, r2
    b4b6:	b29a      	uxth	r2, r3
    b4b8:	2380      	movs	r3, #128	; 0x80
    b4ba:	009b      	lsls	r3, r3, #2
    b4bc:	429a      	cmp	r2, r3
    b4be:	d10f      	bne.n	b4e0 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->fatCount == 0 ||
    b4c0:	697b      	ldr	r3, [r7, #20]
    b4c2:	795b      	ldrb	r3, [r3, #5]
  if (bpb->bytesPerSector != 512 ||
    b4c4:	2b00      	cmp	r3, #0
    b4c6:	d00b      	beq.n	b4e0 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->reservedSectorCount == 0 ||
    b4c8:	697b      	ldr	r3, [r7, #20]
    b4ca:	78da      	ldrb	r2, [r3, #3]
    b4cc:	791b      	ldrb	r3, [r3, #4]
    b4ce:	021b      	lsls	r3, r3, #8
    b4d0:	4313      	orrs	r3, r2
    b4d2:	b29b      	uxth	r3, r3
    bpb->fatCount == 0 ||
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	d003      	beq.n	b4e0 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->sectorsPerCluster == 0) {
    b4d8:	697b      	ldr	r3, [r7, #20]
    b4da:	789b      	ldrb	r3, [r3, #2]
    bpb->reservedSectorCount == 0 ||
    b4dc:	2b00      	cmp	r3, #0
    b4de:	d101      	bne.n	b4e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x10c>
       // not valid FAT volume
      return false;
    b4e0:	2300      	movs	r3, #0
    b4e2:	e0cb      	b.n	b67c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  }
  fatCount_ = bpb->fatCount;
    b4e4:	697b      	ldr	r3, [r7, #20]
    b4e6:	795a      	ldrb	r2, [r3, #5]
    b4e8:	68fb      	ldr	r3, [r7, #12]
    b4ea:	761a      	strb	r2, [r3, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;
    b4ec:	697b      	ldr	r3, [r7, #20]
    b4ee:	789a      	ldrb	r2, [r3, #2]
    b4f0:	68fb      	ldr	r3, [r7, #12]
    b4f2:	711a      	strb	r2, [r3, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    b4f4:	68fb      	ldr	r3, [r7, #12]
    b4f6:	2200      	movs	r2, #0
    b4f8:	741a      	strb	r2, [r3, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    b4fa:	68fb      	ldr	r3, [r7, #12]
    b4fc:	791b      	ldrb	r3, [r3, #4]
    b4fe:	001a      	movs	r2, r3
    b500:	68fb      	ldr	r3, [r7, #12]
    b502:	7c1b      	ldrb	r3, [r3, #16]
    b504:	0019      	movs	r1, r3
    b506:	2301      	movs	r3, #1
    b508:	408b      	lsls	r3, r1
    b50a:	429a      	cmp	r2, r3
    b50c:	d00f      	beq.n	b52e <_ZN8SdVolume4initEP7Sd2Cardh+0x156>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    b50e:	68fb      	ldr	r3, [r7, #12]
    b510:	7c1b      	ldrb	r3, [r3, #16]
    b512:	1c5a      	adds	r2, r3, #1
    b514:	b2d1      	uxtb	r1, r2
    b516:	68fa      	ldr	r2, [r7, #12]
    b518:	7411      	strb	r1, [r2, #16]
    b51a:	2201      	movs	r2, #1
    b51c:	2b07      	cmp	r3, #7
    b51e:	dc01      	bgt.n	b524 <_ZN8SdVolume4initEP7Sd2Cardh+0x14c>
    b520:	2300      	movs	r3, #0
    b522:	1c1a      	adds	r2, r3, #0
    b524:	b2d3      	uxtb	r3, r2
    b526:	2b00      	cmp	r3, #0
    b528:	d0e7      	beq.n	b4fa <_ZN8SdVolume4initEP7Sd2Cardh+0x122>
    b52a:	2300      	movs	r3, #0
    b52c:	e0a6      	b.n	b67c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    b52e:	697b      	ldr	r3, [r7, #20]
    b530:	7ada      	ldrb	r2, [r3, #11]
    b532:	7b1b      	ldrb	r3, [r3, #12]
    b534:	021b      	lsls	r3, r3, #8
    b536:	4313      	orrs	r3, r2
    b538:	b29b      	uxth	r3, r3
    b53a:	2b00      	cmp	r3, #0
    b53c:	d007      	beq.n	b54e <_ZN8SdVolume4initEP7Sd2Cardh+0x176>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    b53e:	697b      	ldr	r3, [r7, #20]
    b540:	7ada      	ldrb	r2, [r3, #11]
    b542:	7b1b      	ldrb	r3, [r3, #12]
    b544:	021b      	lsls	r3, r3, #8
    b546:	4313      	orrs	r3, r2
    b548:	b29b      	uxth	r3, r3
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    b54a:	001a      	movs	r2, r3
    b54c:	e00b      	b.n	b566 <_ZN8SdVolume4initEP7Sd2Cardh+0x18e>
    b54e:	697b      	ldr	r3, [r7, #20]
    b550:	7e5a      	ldrb	r2, [r3, #25]
    b552:	7e99      	ldrb	r1, [r3, #26]
    b554:	0209      	lsls	r1, r1, #8
    b556:	430a      	orrs	r2, r1
    b558:	7ed9      	ldrb	r1, [r3, #27]
    b55a:	0409      	lsls	r1, r1, #16
    b55c:	430a      	orrs	r2, r1
    b55e:	7f1b      	ldrb	r3, [r3, #28]
    b560:	061b      	lsls	r3, r3, #24
    b562:	4313      	orrs	r3, r2
    b564:	001a      	movs	r2, r3
    b566:	68fb      	ldr	r3, [r7, #12]
    b568:	609a      	str	r2, [r3, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    b56a:	697b      	ldr	r3, [r7, #20]
    b56c:	78da      	ldrb	r2, [r3, #3]
    b56e:	791b      	ldrb	r3, [r3, #4]
    b570:	021b      	lsls	r3, r3, #8
    b572:	4313      	orrs	r3, r2
    b574:	b29b      	uxth	r3, r3
    b576:	001a      	movs	r2, r3
    b578:	69fb      	ldr	r3, [r7, #28]
    b57a:	18d2      	adds	r2, r2, r3
    b57c:	68fb      	ldr	r3, [r7, #12]
    b57e:	61da      	str	r2, [r3, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    b580:	697b      	ldr	r3, [r7, #20]
    b582:	799a      	ldrb	r2, [r3, #6]
    b584:	79db      	ldrb	r3, [r3, #7]
    b586:	021b      	lsls	r3, r3, #8
    b588:	4313      	orrs	r3, r2
    b58a:	b29a      	uxth	r2, r3
    b58c:	68fb      	ldr	r3, [r7, #12]
    b58e:	845a      	strh	r2, [r3, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    b590:	68fb      	ldr	r3, [r7, #12]
    b592:	69da      	ldr	r2, [r3, #28]
    b594:	697b      	ldr	r3, [r7, #20]
    b596:	795b      	ldrb	r3, [r3, #5]
    b598:	0019      	movs	r1, r3
    b59a:	68fb      	ldr	r3, [r7, #12]
    b59c:	689b      	ldr	r3, [r3, #8]
    b59e:	434b      	muls	r3, r1
    b5a0:	18d2      	adds	r2, r2, r3
    b5a2:	68fb      	ldr	r3, [r7, #12]
    b5a4:	625a      	str	r2, [r3, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    b5a6:	68fb      	ldr	r3, [r7, #12]
    b5a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b5aa:	697b      	ldr	r3, [r7, #20]
    b5ac:	7999      	ldrb	r1, [r3, #6]
    b5ae:	79db      	ldrb	r3, [r3, #7]
    b5b0:	021b      	lsls	r3, r3, #8
    b5b2:	430b      	orrs	r3, r1
    b5b4:	b29b      	uxth	r3, r3
    b5b6:	015b      	lsls	r3, r3, #5
    b5b8:	4935      	ldr	r1, [pc, #212]	; (b690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b8>)
    b5ba:	468c      	mov	ip, r1
    b5bc:	4463      	add	r3, ip
    b5be:	2b00      	cmp	r3, #0
    b5c0:	da02      	bge.n	b5c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    b5c2:	4933      	ldr	r1, [pc, #204]	; (b690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b8>)
    b5c4:	468c      	mov	ip, r1
    b5c6:	4463      	add	r3, ip
    b5c8:	125b      	asrs	r3, r3, #9
    b5ca:	18d2      	adds	r2, r2, r3
    b5cc:	68fb      	ldr	r3, [r7, #12]
    b5ce:	615a      	str	r2, [r3, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    b5d0:	697b      	ldr	r3, [r7, #20]
    b5d2:	7a1a      	ldrb	r2, [r3, #8]
    b5d4:	7a5b      	ldrb	r3, [r3, #9]
    b5d6:	021b      	lsls	r3, r3, #8
    b5d8:	4313      	orrs	r3, r2
    b5da:	b29b      	uxth	r3, r3
    b5dc:	2b00      	cmp	r3, #0
    b5de:	d006      	beq.n	b5ee <_ZN8SdVolume4initEP7Sd2Cardh+0x216>
                           bpb->totalSectors16 : bpb->totalSectors32;
    b5e0:	697b      	ldr	r3, [r7, #20]
    b5e2:	7a1a      	ldrb	r2, [r3, #8]
    b5e4:	7a5b      	ldrb	r3, [r3, #9]
    b5e6:	021b      	lsls	r3, r3, #8
    b5e8:	4313      	orrs	r3, r2
    b5ea:	b29b      	uxth	r3, r3
    b5ec:	e00a      	b.n	b604 <_ZN8SdVolume4initEP7Sd2Cardh+0x22c>
  uint32_t totalBlocks = bpb->totalSectors16 ?
    b5ee:	697b      	ldr	r3, [r7, #20]
    b5f0:	7d5a      	ldrb	r2, [r3, #21]
    b5f2:	7d99      	ldrb	r1, [r3, #22]
    b5f4:	0209      	lsls	r1, r1, #8
    b5f6:	430a      	orrs	r2, r1
    b5f8:	7dd9      	ldrb	r1, [r3, #23]
    b5fa:	0409      	lsls	r1, r1, #16
    b5fc:	430a      	orrs	r2, r1
    b5fe:	7e1b      	ldrb	r3, [r3, #24]
    b600:	061b      	lsls	r3, r3, #24
    b602:	4313      	orrs	r3, r2
                           bpb->totalSectors16 : bpb->totalSectors32;
    b604:	613b      	str	r3, [r7, #16]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    b606:	68fb      	ldr	r3, [r7, #12]
    b608:	695b      	ldr	r3, [r3, #20]
    b60a:	69fa      	ldr	r2, [r7, #28]
    b60c:	1ad2      	subs	r2, r2, r3
    b60e:	693b      	ldr	r3, [r7, #16]
    b610:	18d2      	adds	r2, r2, r3
    b612:	68fb      	ldr	r3, [r7, #12]
    b614:	60da      	str	r2, [r3, #12]

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    b616:	68fb      	ldr	r3, [r7, #12]
    b618:	68db      	ldr	r3, [r3, #12]
    b61a:	68fa      	ldr	r2, [r7, #12]
    b61c:	7c12      	ldrb	r2, [r2, #16]
    b61e:	40d3      	lsrs	r3, r2
    b620:	001a      	movs	r2, r3
    b622:	68fb      	ldr	r3, [r7, #12]
    b624:	60da      	str	r2, [r3, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    b626:	68fb      	ldr	r3, [r7, #12]
    b628:	68db      	ldr	r3, [r3, #12]
    b62a:	4a1a      	ldr	r2, [pc, #104]	; (b694 <_ZN8SdVolume4initEP7Sd2Cardh+0x2bc>)
    b62c:	4293      	cmp	r3, r2
    b62e:	d804      	bhi.n	b63a <_ZN8SdVolume4initEP7Sd2Cardh+0x262>
    fatType_ = 12;
    b630:	68fb      	ldr	r3, [r7, #12]
    b632:	2220      	movs	r2, #32
    b634:	210c      	movs	r1, #12
    b636:	5499      	strb	r1, [r3, r2]
    b638:	e01f      	b.n	b67a <_ZN8SdVolume4initEP7Sd2Cardh+0x2a2>
  } else if (clusterCount_ < 65525) {
    b63a:	68fb      	ldr	r3, [r7, #12]
    b63c:	68db      	ldr	r3, [r3, #12]
    b63e:	4a16      	ldr	r2, [pc, #88]	; (b698 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c0>)
    b640:	4293      	cmp	r3, r2
    b642:	d804      	bhi.n	b64e <_ZN8SdVolume4initEP7Sd2Cardh+0x276>
    fatType_ = 16;
    b644:	68fb      	ldr	r3, [r7, #12]
    b646:	2220      	movs	r2, #32
    b648:	2110      	movs	r1, #16
    b64a:	5499      	strb	r1, [r3, r2]
    b64c:	e015      	b.n	b67a <_ZN8SdVolume4initEP7Sd2Cardh+0x2a2>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    b64e:	697b      	ldr	r3, [r7, #20]
    b650:	2221      	movs	r2, #33	; 0x21
    b652:	5c9a      	ldrb	r2, [r3, r2]
    b654:	2122      	movs	r1, #34	; 0x22
    b656:	5c59      	ldrb	r1, [r3, r1]
    b658:	0209      	lsls	r1, r1, #8
    b65a:	430a      	orrs	r2, r1
    b65c:	2123      	movs	r1, #35	; 0x23
    b65e:	5c59      	ldrb	r1, [r3, r1]
    b660:	0409      	lsls	r1, r1, #16
    b662:	430a      	orrs	r2, r1
    b664:	2124      	movs	r1, #36	; 0x24
    b666:	5c5b      	ldrb	r3, [r3, r1]
    b668:	061b      	lsls	r3, r3, #24
    b66a:	4313      	orrs	r3, r2
    b66c:	001a      	movs	r2, r3
    b66e:	68fb      	ldr	r3, [r7, #12]
    b670:	625a      	str	r2, [r3, #36]	; 0x24
    fatType_ = 32;
    b672:	68fb      	ldr	r3, [r7, #12]
    b674:	2220      	movs	r2, #32
    b676:	2120      	movs	r1, #32
    b678:	5499      	strb	r1, [r3, r2]
  }
  return true;
    b67a:	2301      	movs	r3, #1
}
    b67c:	0018      	movs	r0, r3
    b67e:	46bd      	mov	sp, r7
    b680:	b008      	add	sp, #32
    b682:	bd80      	pop	{r7, pc}
    b684:	20000b68 	.word	0x20000b68
    b688:	20000968 	.word	0x20000968
    b68c:	20000973 	.word	0x20000973
    b690:	000001ff 	.word	0x000001ff
    b694:	00000ff4 	.word	0x00000ff4
    b698:	0000fff4 	.word	0x0000fff4

0000b69c <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
#define SPI_IMODE_EXTINT 1
#define SPI_IMODE_GLOBAL 2

const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();

SPIClass::SPIClass(SERCOM *p_sercom, uint8_t uc_pinMISO, uint8_t uc_pinSCK, uint8_t uc_pinMOSI, SercomSpiTXPad PadTx, SercomRXPad PadRx)
    b69c:	b580      	push	{r7, lr}
    b69e:	b084      	sub	sp, #16
    b6a0:	af00      	add	r7, sp, #0
    b6a2:	60f8      	str	r0, [r7, #12]
    b6a4:	60b9      	str	r1, [r7, #8]
    b6a6:	0019      	movs	r1, r3
    b6a8:	1dfb      	adds	r3, r7, #7
    b6aa:	701a      	strb	r2, [r3, #0]
    b6ac:	1dbb      	adds	r3, r7, #6
    b6ae:	1c0a      	adds	r2, r1, #0
    b6b0:	701a      	strb	r2, [r3, #0]
{
  initialized = false;
    b6b2:	68fb      	ldr	r3, [r7, #12]
    b6b4:	2200      	movs	r2, #0
    b6b6:	725a      	strb	r2, [r3, #9]
  assert(p_sercom != NULL);
    b6b8:	68bb      	ldr	r3, [r7, #8]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d105      	bne.n	b6ca <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2e>
    b6be:	4b12      	ldr	r3, [pc, #72]	; (b708 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x6c>)
    b6c0:	4a12      	ldr	r2, [pc, #72]	; (b70c <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x70>)
    b6c2:	4813      	ldr	r0, [pc, #76]	; (b710 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x74>)
    b6c4:	2122      	movs	r1, #34	; 0x22
    b6c6:	f005 f81f 	bl	10708 <__assert_func>
  _p_sercom = p_sercom;
    b6ca:	68fb      	ldr	r3, [r7, #12]
    b6cc:	68ba      	ldr	r2, [r7, #8]
    b6ce:	601a      	str	r2, [r3, #0]

  // pins
  _uc_pinMiso = uc_pinMISO;
    b6d0:	68fb      	ldr	r3, [r7, #12]
    b6d2:	1dfa      	adds	r2, r7, #7
    b6d4:	7812      	ldrb	r2, [r2, #0]
    b6d6:	711a      	strb	r2, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    b6d8:	68fb      	ldr	r3, [r7, #12]
    b6da:	1dba      	adds	r2, r7, #6
    b6dc:	7812      	ldrb	r2, [r2, #0]
    b6de:	719a      	strb	r2, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    b6e0:	68fb      	ldr	r3, [r7, #12]
    b6e2:	2218      	movs	r2, #24
    b6e4:	18ba      	adds	r2, r7, r2
    b6e6:	7812      	ldrb	r2, [r2, #0]
    b6e8:	715a      	strb	r2, [r3, #5]

  // SERCOM pads
  _padTx=PadTx;
    b6ea:	68fb      	ldr	r3, [r7, #12]
    b6ec:	221c      	movs	r2, #28
    b6ee:	18ba      	adds	r2, r7, r2
    b6f0:	7812      	ldrb	r2, [r2, #0]
    b6f2:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    b6f4:	68fb      	ldr	r3, [r7, #12]
    b6f6:	2220      	movs	r2, #32
    b6f8:	18ba      	adds	r2, r7, r2
    b6fa:	7812      	ldrb	r2, [r2, #0]
    b6fc:	721a      	strb	r2, [r3, #8]
}
    b6fe:	68fb      	ldr	r3, [r7, #12]
    b700:	0018      	movs	r0, r3
    b702:	46bd      	mov	sp, r7
    b704:	b004      	add	sp, #16
    b706:	bd80      	pop	{r7, pc}
    b708:	0001361c 	.word	0x0001361c
    b70c:	00013650 	.word	0x00013650
    b710:	00013630 	.word	0x00013630

0000b714 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    b714:	b580      	push	{r7, lr}
    b716:	b082      	sub	sp, #8
    b718:	af00      	add	r7, sp, #0
    b71a:	6078      	str	r0, [r7, #4]
  init();
    b71c:	687b      	ldr	r3, [r7, #4]
    b71e:	0018      	movs	r0, r3
    b720:	f000 f844 	bl	b7ac <_ZN8SPIClass4initEv>

  // PIO init
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    b724:	687b      	ldr	r3, [r7, #4]
    b726:	791b      	ldrb	r3, [r3, #4]
    b728:	0018      	movs	r0, r3
    b72a:	687b      	ldr	r3, [r7, #4]
    b72c:	791b      	ldrb	r3, [r3, #4]
    b72e:	0019      	movs	r1, r3
    b730:	4a1c      	ldr	r2, [pc, #112]	; (b7a4 <_ZN8SPIClass5beginEv+0x90>)
    b732:	000b      	movs	r3, r1
    b734:	005b      	lsls	r3, r3, #1
    b736:	185b      	adds	r3, r3, r1
    b738:	00db      	lsls	r3, r3, #3
    b73a:	18d3      	adds	r3, r2, r3
    b73c:	3308      	adds	r3, #8
    b73e:	781b      	ldrb	r3, [r3, #0]
    b740:	b25b      	sxtb	r3, r3
    b742:	0019      	movs	r1, r3
    b744:	f7fb fa2a 	bl	6b9c <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
    b748:	687b      	ldr	r3, [r7, #4]
    b74a:	799b      	ldrb	r3, [r3, #6]
    b74c:	0018      	movs	r0, r3
    b74e:	687b      	ldr	r3, [r7, #4]
    b750:	799b      	ldrb	r3, [r3, #6]
    b752:	0019      	movs	r1, r3
    b754:	4a13      	ldr	r2, [pc, #76]	; (b7a4 <_ZN8SPIClass5beginEv+0x90>)
    b756:	000b      	movs	r3, r1
    b758:	005b      	lsls	r3, r3, #1
    b75a:	185b      	adds	r3, r3, r1
    b75c:	00db      	lsls	r3, r3, #3
    b75e:	18d3      	adds	r3, r2, r3
    b760:	3308      	adds	r3, #8
    b762:	781b      	ldrb	r3, [r3, #0]
    b764:	b25b      	sxtb	r3, r3
    b766:	0019      	movs	r1, r3
    b768:	f7fb fa18 	bl	6b9c <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
    b76c:	687b      	ldr	r3, [r7, #4]
    b76e:	795b      	ldrb	r3, [r3, #5]
    b770:	0018      	movs	r0, r3
    b772:	687b      	ldr	r3, [r7, #4]
    b774:	795b      	ldrb	r3, [r3, #5]
    b776:	0019      	movs	r1, r3
    b778:	4a0a      	ldr	r2, [pc, #40]	; (b7a4 <_ZN8SPIClass5beginEv+0x90>)
    b77a:	000b      	movs	r3, r1
    b77c:	005b      	lsls	r3, r3, #1
    b77e:	185b      	adds	r3, r3, r1
    b780:	00db      	lsls	r3, r3, #3
    b782:	18d3      	adds	r3, r2, r3
    b784:	3308      	adds	r3, #8
    b786:	781b      	ldrb	r3, [r3, #0]
    b788:	b25b      	sxtb	r3, r3
    b78a:	0019      	movs	r1, r3
    b78c:	f7fb fa06 	bl	6b9c <pinPeripheral>

  config(DEFAULT_SPI_SETTINGS);
    b790:	4b05      	ldr	r3, [pc, #20]	; (b7a8 <_ZN8SPIClass5beginEv+0x94>)
    b792:	6878      	ldr	r0, [r7, #4]
    b794:	6819      	ldr	r1, [r3, #0]
    b796:	685a      	ldr	r2, [r3, #4]
    b798:	f000 f821 	bl	b7de <_ZN8SPIClass6configE11SPISettings>
}
    b79c:	46c0      	nop			; (mov r8, r8)
    b79e:	46bd      	mov	sp, r7
    b7a0:	b002      	add	sp, #8
    b7a2:	bd80      	pop	{r7, pc}
    b7a4:	000136c8 	.word	0x000136c8
    b7a8:	20000b74 	.word	0x20000b74

0000b7ac <_ZN8SPIClass4initEv>:

void SPIClass::init()
{
    b7ac:	b580      	push	{r7, lr}
    b7ae:	b082      	sub	sp, #8
    b7b0:	af00      	add	r7, sp, #0
    b7b2:	6078      	str	r0, [r7, #4]
  if (initialized)
    b7b4:	687b      	ldr	r3, [r7, #4]
    b7b6:	7a5b      	ldrb	r3, [r3, #9]
    b7b8:	2b00      	cmp	r3, #0
    b7ba:	d10c      	bne.n	b7d6 <_ZN8SPIClass4initEv+0x2a>
    return;
  interruptMode = SPI_IMODE_NONE;
    b7bc:	687b      	ldr	r3, [r7, #4]
    b7be:	2200      	movs	r2, #0
    b7c0:	729a      	strb	r2, [r3, #10]
  interruptSave = 0;
    b7c2:	687b      	ldr	r3, [r7, #4]
    b7c4:	2200      	movs	r2, #0
    b7c6:	72da      	strb	r2, [r3, #11]
  interruptMask = 0;
    b7c8:	687b      	ldr	r3, [r7, #4]
    b7ca:	2200      	movs	r2, #0
    b7cc:	60da      	str	r2, [r3, #12]
  initialized = true;
    b7ce:	687b      	ldr	r3, [r7, #4]
    b7d0:	2201      	movs	r2, #1
    b7d2:	725a      	strb	r2, [r3, #9]
    b7d4:	e000      	b.n	b7d8 <_ZN8SPIClass4initEv+0x2c>
    return;
    b7d6:	46c0      	nop			; (mov r8, r8)
}
    b7d8:	46bd      	mov	sp, r7
    b7da:	b002      	add	sp, #8
    b7dc:	bd80      	pop	{r7, pc}

0000b7de <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    b7de:	b580      	push	{r7, lr}
    b7e0:	b086      	sub	sp, #24
    b7e2:	af02      	add	r7, sp, #8
    b7e4:	60f8      	str	r0, [r7, #12]
    b7e6:	1d3b      	adds	r3, r7, #4
    b7e8:	6019      	str	r1, [r3, #0]
    b7ea:	605a      	str	r2, [r3, #4]
  _p_sercom->disableSPI();
    b7ec:	68fb      	ldr	r3, [r7, #12]
    b7ee:	681b      	ldr	r3, [r3, #0]
    b7f0:	0018      	movs	r0, r3
    b7f2:	f002 fa9e 	bl	dd32 <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    b7f6:	68fb      	ldr	r3, [r7, #12]
    b7f8:	6818      	ldr	r0, [r3, #0]
    b7fa:	68fb      	ldr	r3, [r7, #12]
    b7fc:	79d9      	ldrb	r1, [r3, #7]
    b7fe:	68fb      	ldr	r3, [r7, #12]
    b800:	7a1a      	ldrb	r2, [r3, #8]
    b802:	1d3b      	adds	r3, r7, #4
    b804:	795b      	ldrb	r3, [r3, #5]
    b806:	9300      	str	r3, [sp, #0]
    b808:	2300      	movs	r3, #0
    b80a:	f002 f9df 	bl	dbcc <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    b80e:	68fb      	ldr	r3, [r7, #12]
    b810:	6818      	ldr	r0, [r3, #0]
    b812:	1d3b      	adds	r3, r7, #4
    b814:	7919      	ldrb	r1, [r3, #4]
    b816:	1d3b      	adds	r3, r7, #4
    b818:	681b      	ldr	r3, [r3, #0]
    b81a:	001a      	movs	r2, r3
    b81c:	f002 fa15 	bl	dc4a <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    b820:	68fb      	ldr	r3, [r7, #12]
    b822:	681b      	ldr	r3, [r3, #0]
    b824:	0018      	movs	r0, r3
    b826:	f002 fa6d 	bl	dd04 <_ZN6SERCOM9enableSPIEv>
}
    b82a:	46c0      	nop			; (mov r8, r8)
    b82c:	46bd      	mov	sp, r7
    b82e:	b004      	add	sp, #16
    b830:	bd80      	pop	{r7, pc}
	...

0000b834 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    b834:	b580      	push	{r7, lr}
    b836:	b086      	sub	sp, #24
    b838:	af00      	add	r7, sp, #0
    b83a:	60f8      	str	r0, [r7, #12]
    b83c:	1d3b      	adds	r3, r7, #4
    b83e:	6019      	str	r1, [r3, #0]
    b840:	605a      	str	r2, [r3, #4]
  if (interruptMode != SPI_IMODE_NONE)
    b842:	68fb      	ldr	r3, [r7, #12]
    b844:	7a9b      	ldrb	r3, [r3, #10]
    b846:	2b00      	cmp	r3, #0
    b848:	d01d      	beq.n	b886 <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    b84a:	68fb      	ldr	r3, [r7, #12]
    b84c:	7a9b      	ldrb	r3, [r3, #10]
    b84e:	001a      	movs	r2, r3
    b850:	2302      	movs	r3, #2
    b852:	4013      	ands	r3, r2
    b854:	d00b      	beq.n	b86e <_ZN8SPIClass16beginTransactionE11SPISettings+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b856:	f3ef 8310 	mrs	r3, PRIMASK
    b85a:	617b      	str	r3, [r7, #20]
  return(result);
    b85c:	697b      	ldr	r3, [r7, #20]
  return (__get_PRIMASK() ? 0 : 1);
    b85e:	425a      	negs	r2, r3
    b860:	4153      	adcs	r3, r2
    b862:	b2db      	uxtb	r3, r3
    b864:	001a      	movs	r2, r3
    {
      interruptSave = interruptsStatus();
    b866:	68fb      	ldr	r3, [r7, #12]
    b868:	72da      	strb	r2, [r3, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    b86a:	b672      	cpsid	i
    b86c:	e00b      	b.n	b886 <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
      noInterrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
    b86e:	68fb      	ldr	r3, [r7, #12]
    b870:	7a9b      	ldrb	r3, [r3, #10]
    b872:	001a      	movs	r2, r3
    b874:	2301      	movs	r3, #1
    b876:	4013      	ands	r3, r2
    b878:	d005      	beq.n	b886 <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    b87a:	4a08      	ldr	r2, [pc, #32]	; (b89c <_ZN8SPIClass16beginTransactionE11SPISettings+0x68>)
    b87c:	68fb      	ldr	r3, [r7, #12]
    b87e:	68db      	ldr	r3, [r3, #12]
    b880:	041b      	lsls	r3, r3, #16
    b882:	0c1b      	lsrs	r3, r3, #16
    b884:	6093      	str	r3, [r2, #8]
  }

  config(settings);
    b886:	1d3b      	adds	r3, r7, #4
    b888:	68f8      	ldr	r0, [r7, #12]
    b88a:	6819      	ldr	r1, [r3, #0]
    b88c:	685a      	ldr	r2, [r3, #4]
    b88e:	f7ff ffa6 	bl	b7de <_ZN8SPIClass6configE11SPISettings>
}
    b892:	46c0      	nop			; (mov r8, r8)
    b894:	46bd      	mov	sp, r7
    b896:	b006      	add	sp, #24
    b898:	bd80      	pop	{r7, pc}
    b89a:	46c0      	nop			; (mov r8, r8)
    b89c:	40001800 	.word	0x40001800

0000b8a0 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
    b8a0:	b580      	push	{r7, lr}
    b8a2:	b082      	sub	sp, #8
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	6078      	str	r0, [r7, #4]
  if (interruptMode != SPI_IMODE_NONE)
    b8a8:	687b      	ldr	r3, [r7, #4]
    b8aa:	7a9b      	ldrb	r3, [r3, #10]
    b8ac:	2b00      	cmp	r3, #0
    b8ae:	d017      	beq.n	b8e0 <_ZN8SPIClass14endTransactionEv+0x40>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    b8b0:	687b      	ldr	r3, [r7, #4]
    b8b2:	7a9b      	ldrb	r3, [r3, #10]
    b8b4:	001a      	movs	r2, r3
    b8b6:	2302      	movs	r3, #2
    b8b8:	4013      	ands	r3, r2
    b8ba:	d005      	beq.n	b8c8 <_ZN8SPIClass14endTransactionEv+0x28>
    {
      if (interruptSave)
    b8bc:	687b      	ldr	r3, [r7, #4]
    b8be:	7adb      	ldrb	r3, [r3, #11]
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	d00d      	beq.n	b8e0 <_ZN8SPIClass14endTransactionEv+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
    b8c4:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    b8c6:	e00b      	b.n	b8e0 <_ZN8SPIClass14endTransactionEv+0x40>
    else if (interruptMode & SPI_IMODE_EXTINT)
    b8c8:	687b      	ldr	r3, [r7, #4]
    b8ca:	7a9b      	ldrb	r3, [r3, #10]
    b8cc:	001a      	movs	r2, r3
    b8ce:	2301      	movs	r3, #1
    b8d0:	4013      	ands	r3, r2
    b8d2:	d005      	beq.n	b8e0 <_ZN8SPIClass14endTransactionEv+0x40>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    b8d4:	4a04      	ldr	r2, [pc, #16]	; (b8e8 <_ZN8SPIClass14endTransactionEv+0x48>)
    b8d6:	687b      	ldr	r3, [r7, #4]
    b8d8:	68db      	ldr	r3, [r3, #12]
    b8da:	041b      	lsls	r3, r3, #16
    b8dc:	0c1b      	lsrs	r3, r3, #16
    b8de:	60d3      	str	r3, [r2, #12]
}
    b8e0:	46c0      	nop			; (mov r8, r8)
    b8e2:	46bd      	mov	sp, r7
    b8e4:	b002      	add	sp, #8
    b8e6:	bd80      	pop	{r7, pc}
    b8e8:	40001800 	.word	0x40001800

0000b8ec <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    b8ec:	b580      	push	{r7, lr}
    b8ee:	b082      	sub	sp, #8
    b8f0:	af00      	add	r7, sp, #0
    b8f2:	6078      	str	r0, [r7, #4]
    b8f4:	000a      	movs	r2, r1
    b8f6:	1cfb      	adds	r3, r7, #3
    b8f8:	701a      	strb	r2, [r3, #0]
  return _p_sercom->transferDataSPI(data);
    b8fa:	687b      	ldr	r3, [r7, #4]
    b8fc:	681a      	ldr	r2, [r3, #0]
    b8fe:	1cfb      	adds	r3, r7, #3
    b900:	781b      	ldrb	r3, [r3, #0]
    b902:	0019      	movs	r1, r3
    b904:	0010      	movs	r0, r2
    b906:	f002 fa2b 	bl	dd60 <_ZN6SERCOM15transferDataSPIEh>
    b90a:	0003      	movs	r3, r0
}
    b90c:	0018      	movs	r0, r3
    b90e:	46bd      	mov	sp, r7
    b910:	b002      	add	sp, #8
    b912:	bd80      	pop	{r7, pc}

0000b914 <_Z41__static_initialization_and_destruction_0ii>:
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    b914:	b580      	push	{r7, lr}
    b916:	b086      	sub	sp, #24
    b918:	af04      	add	r7, sp, #16
    b91a:	6078      	str	r0, [r7, #4]
    b91c:	6039      	str	r1, [r7, #0]
    b91e:	687b      	ldr	r3, [r7, #4]
    b920:	2b01      	cmp	r3, #1
    b922:	d113      	bne.n	b94c <_Z41__static_initialization_and_destruction_0ii+0x38>
    b924:	683b      	ldr	r3, [r7, #0]
    b926:	4a0b      	ldr	r2, [pc, #44]	; (b954 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    b928:	4293      	cmp	r3, r2
    b92a:	d10f      	bne.n	b94c <_Z41__static_initialization_and_destruction_0ii+0x38>
const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();
    b92c:	4b0a      	ldr	r3, [pc, #40]	; (b958 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    b92e:	0018      	movs	r0, r3
    b930:	f7fd fbf4 	bl	911c <_ZN11SPISettingsC1Ev>
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    b934:	4909      	ldr	r1, [pc, #36]	; (b95c <_Z41__static_initialization_and_destruction_0ii+0x48>)
    b936:	480a      	ldr	r0, [pc, #40]	; (b960 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    b938:	2300      	movs	r3, #0
    b93a:	9302      	str	r3, [sp, #8]
    b93c:	2301      	movs	r3, #1
    b93e:	9301      	str	r3, [sp, #4]
    b940:	2315      	movs	r3, #21
    b942:	9300      	str	r3, [sp, #0]
    b944:	2314      	movs	r3, #20
    b946:	2212      	movs	r2, #18
    b948:	f7ff fea8 	bl	b69c <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>
    b94c:	46c0      	nop			; (mov r8, r8)
    b94e:	46bd      	mov	sp, r7
    b950:	b002      	add	sp, #8
    b952:	bd80      	pop	{r7, pc}
    b954:	0000ffff 	.word	0x0000ffff
    b958:	20000b74 	.word	0x20000b74
    b95c:	20000dd0 	.word	0x20000dd0
    b960:	20000b7c 	.word	0x20000b7c

0000b964 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
    b964:	b580      	push	{r7, lr}
    b966:	af00      	add	r7, sp, #0
    b968:	4b03      	ldr	r3, [pc, #12]	; (b978 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x14>)
    b96a:	0019      	movs	r1, r3
    b96c:	2001      	movs	r0, #1
    b96e:	f7ff ffd1 	bl	b914 <_Z41__static_initialization_and_destruction_0ii>
    b972:	46bd      	mov	sp, r7
    b974:	bd80      	pop	{r7, pc}
    b976:	46c0      	nop			; (mov r8, r8)
    b978:	0000ffff 	.word	0x0000ffff

0000b97c <_ZN7TwoWireC1EP6SERCOMhh>:
#include <Arduino.h>
#include <wiring_private.h>

#include "Wire.h"

TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
    b97c:	b580      	push	{r7, lr}
    b97e:	b084      	sub	sp, #16
    b980:	af00      	add	r7, sp, #0
    b982:	60f8      	str	r0, [r7, #12]
    b984:	60b9      	str	r1, [r7, #8]
    b986:	0019      	movs	r1, r3
    b988:	1dfb      	adds	r3, r7, #7
    b98a:	701a      	strb	r2, [r3, #0]
    b98c:	1dbb      	adds	r3, r7, #6
    b98e:	1c0a      	adds	r2, r1, #0
    b990:	701a      	strb	r2, [r3, #0]
    b992:	68fb      	ldr	r3, [r7, #12]
    b994:	0018      	movs	r0, r3
    b996:	f7f7 fe33 	bl	3600 <_ZN6StreamC1Ev>
    b99a:	4a10      	ldr	r2, [pc, #64]	; (b9dc <_ZN7TwoWireC1EP6SERCOMhh+0x60>)
    b99c:	68fb      	ldr	r3, [r7, #12]
    b99e:	601a      	str	r2, [r3, #0]
    b9a0:	68fb      	ldr	r3, [r7, #12]
    b9a2:	3318      	adds	r3, #24
    b9a4:	0018      	movs	r0, r3
    b9a6:	f000 fad1 	bl	bf4c <_ZN11RingBufferNILi256EEC1Ev>
    b9aa:	68fb      	ldr	r3, [r7, #12]
    b9ac:	3321      	adds	r3, #33	; 0x21
    b9ae:	33ff      	adds	r3, #255	; 0xff
    b9b0:	0018      	movs	r0, r3
    b9b2:	f000 facb 	bl	bf4c <_ZN11RingBufferNILi256EEC1Ev>
{
  this->sercom = s;
    b9b6:	68fb      	ldr	r3, [r7, #12]
    b9b8:	68ba      	ldr	r2, [r7, #8]
    b9ba:	611a      	str	r2, [r3, #16]
  this->_uc_pinSDA=pinSDA;
    b9bc:	68fb      	ldr	r3, [r7, #12]
    b9be:	1dfa      	adds	r2, r7, #7
    b9c0:	7812      	ldrb	r2, [r2, #0]
    b9c2:	751a      	strb	r2, [r3, #20]
  this->_uc_pinSCL=pinSCL;
    b9c4:	68fb      	ldr	r3, [r7, #12]
    b9c6:	1dba      	adds	r2, r7, #6
    b9c8:	7812      	ldrb	r2, [r2, #0]
    b9ca:	755a      	strb	r2, [r3, #21]
  transmissionBegun = false;
    b9cc:	68fb      	ldr	r3, [r7, #12]
    b9ce:	2200      	movs	r2, #0
    b9d0:	759a      	strb	r2, [r3, #22]
}
    b9d2:	68fb      	ldr	r3, [r7, #12]
    b9d4:	0018      	movs	r0, r3
    b9d6:	46bd      	mov	sp, r7
    b9d8:	b004      	add	sp, #16
    b9da:	bd80      	pop	{r7, pc}
    b9dc:	000136ac 	.word	0x000136ac

0000b9e0 <_ZN7TwoWire5beginEv>:

void TwoWire::begin(void) {
    b9e0:	b580      	push	{r7, lr}
    b9e2:	b082      	sub	sp, #8
    b9e4:	af00      	add	r7, sp, #0
    b9e6:	6078      	str	r0, [r7, #4]
  //Master Mode
  sercom->initMasterWIRE(TWI_CLOCK);
    b9e8:	687b      	ldr	r3, [r7, #4]
    b9ea:	691b      	ldr	r3, [r3, #16]
    b9ec:	4a18      	ldr	r2, [pc, #96]	; (ba50 <_ZN7TwoWire5beginEv+0x70>)
    b9ee:	0011      	movs	r1, r2
    b9f0:	0018      	movs	r0, r3
    b9f2:	f002 fa47 	bl	de84 <_ZN6SERCOM14initMasterWIREEm>
  sercom->enableWIRE();
    b9f6:	687b      	ldr	r3, [r7, #4]
    b9f8:	691b      	ldr	r3, [r3, #16]
    b9fa:	0018      	movs	r0, r3
    b9fc:	f002 fa18 	bl	de30 <_ZN6SERCOM10enableWIREEv>

  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    ba00:	687b      	ldr	r3, [r7, #4]
    ba02:	7d1b      	ldrb	r3, [r3, #20]
    ba04:	0018      	movs	r0, r3
    ba06:	687b      	ldr	r3, [r7, #4]
    ba08:	7d1b      	ldrb	r3, [r3, #20]
    ba0a:	0019      	movs	r1, r3
    ba0c:	4a11      	ldr	r2, [pc, #68]	; (ba54 <_ZN7TwoWire5beginEv+0x74>)
    ba0e:	000b      	movs	r3, r1
    ba10:	005b      	lsls	r3, r3, #1
    ba12:	185b      	adds	r3, r3, r1
    ba14:	00db      	lsls	r3, r3, #3
    ba16:	18d3      	adds	r3, r2, r3
    ba18:	3308      	adds	r3, #8
    ba1a:	781b      	ldrb	r3, [r3, #0]
    ba1c:	b25b      	sxtb	r3, r3
    ba1e:	0019      	movs	r1, r3
    ba20:	f7fb f8bc 	bl	6b9c <pinPeripheral>
  pinPeripheral(_uc_pinSCL, g_APinDescription[_uc_pinSCL].ulPinType);
    ba24:	687b      	ldr	r3, [r7, #4]
    ba26:	7d5b      	ldrb	r3, [r3, #21]
    ba28:	0018      	movs	r0, r3
    ba2a:	687b      	ldr	r3, [r7, #4]
    ba2c:	7d5b      	ldrb	r3, [r3, #21]
    ba2e:	0019      	movs	r1, r3
    ba30:	4a08      	ldr	r2, [pc, #32]	; (ba54 <_ZN7TwoWire5beginEv+0x74>)
    ba32:	000b      	movs	r3, r1
    ba34:	005b      	lsls	r3, r3, #1
    ba36:	185b      	adds	r3, r3, r1
    ba38:	00db      	lsls	r3, r3, #3
    ba3a:	18d3      	adds	r3, r2, r3
    ba3c:	3308      	adds	r3, #8
    ba3e:	781b      	ldrb	r3, [r3, #0]
    ba40:	b25b      	sxtb	r3, r3
    ba42:	0019      	movs	r1, r3
    ba44:	f7fb f8aa 	bl	6b9c <pinPeripheral>
}
    ba48:	46c0      	nop			; (mov r8, r8)
    ba4a:	46bd      	mov	sp, r7
    ba4c:	b002      	add	sp, #8
    ba4e:	bd80      	pop	{r7, pc}
    ba50:	000186a0 	.word	0x000186a0
    ba54:	000136c8 	.word	0x000136c8

0000ba58 <_ZN7TwoWire11requestFromEhjb>:
void TwoWire::end() {
  sercom->disableWIRE();
}

uint8_t TwoWire::requestFrom(uint8_t address, size_t quantity, bool stopBit)
{
    ba58:	b590      	push	{r4, r7, lr}
    ba5a:	b087      	sub	sp, #28
    ba5c:	af00      	add	r7, sp, #0
    ba5e:	60f8      	str	r0, [r7, #12]
    ba60:	0008      	movs	r0, r1
    ba62:	607a      	str	r2, [r7, #4]
    ba64:	0019      	movs	r1, r3
    ba66:	230b      	movs	r3, #11
    ba68:	18fb      	adds	r3, r7, r3
    ba6a:	1c02      	adds	r2, r0, #0
    ba6c:	701a      	strb	r2, [r3, #0]
    ba6e:	230a      	movs	r3, #10
    ba70:	18fb      	adds	r3, r7, r3
    ba72:	1c0a      	adds	r2, r1, #0
    ba74:	701a      	strb	r2, [r3, #0]
  if(quantity == 0)
    ba76:	687b      	ldr	r3, [r7, #4]
    ba78:	2b00      	cmp	r3, #0
    ba7a:	d101      	bne.n	ba80 <_ZN7TwoWire11requestFromEhjb+0x28>
  {
    return 0;
    ba7c:	2300      	movs	r3, #0
    ba7e:	e052      	b.n	bb26 <_ZN7TwoWire11requestFromEhjb+0xce>
  }

  size_t byteRead = 0;
    ba80:	2300      	movs	r3, #0
    ba82:	617b      	str	r3, [r7, #20]

  rxBuffer.clear();
    ba84:	68fb      	ldr	r3, [r7, #12]
    ba86:	3318      	adds	r3, #24
    ba88:	0018      	movs	r0, r3
    ba8a:	f000 fa73 	bl	bf74 <_ZN11RingBufferNILi256EE5clearEv>

  if(sercom->startTransmissionWIRE(address, WIRE_READ_FLAG))
    ba8e:	68fb      	ldr	r3, [r7, #12]
    ba90:	6918      	ldr	r0, [r3, #16]
    ba92:	230b      	movs	r3, #11
    ba94:	18fb      	adds	r3, r7, r3
    ba96:	781b      	ldrb	r3, [r3, #0]
    ba98:	2201      	movs	r2, #1
    ba9a:	0019      	movs	r1, r3
    ba9c:	f002 faac 	bl	dff8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    baa0:	1e03      	subs	r3, r0, #0
    baa2:	d03e      	beq.n	bb22 <_ZN7TwoWire11requestFromEhjb+0xca>
  {
    // Read first data
    rxBuffer.store_char(sercom->readDataWIRE());
    baa4:	68fb      	ldr	r3, [r7, #12]
    baa6:	3318      	adds	r3, #24
    baa8:	001c      	movs	r4, r3
    baaa:	68fb      	ldr	r3, [r7, #12]
    baac:	691b      	ldr	r3, [r3, #16]
    baae:	0018      	movs	r0, r3
    bab0:	f002 fc07 	bl	e2c2 <_ZN6SERCOM12readDataWIREEv>
    bab4:	0003      	movs	r3, r0
    bab6:	0019      	movs	r1, r3
    bab8:	0020      	movs	r0, r4
    baba:	f000 fa6d 	bl	bf98 <_ZN11RingBufferNILi256EE10store_charEh>

    // Connected to slave
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    babe:	2301      	movs	r3, #1
    bac0:	617b      	str	r3, [r7, #20]
    bac2:	697a      	ldr	r2, [r7, #20]
    bac4:	687b      	ldr	r3, [r7, #4]
    bac6:	429a      	cmp	r2, r3
    bac8:	d21b      	bcs.n	bb02 <_ZN7TwoWire11requestFromEhjb+0xaa>
    {
      sercom->prepareAckBitWIRE();                          // Prepare Acknowledge
    baca:	68fb      	ldr	r3, [r7, #12]
    bacc:	691b      	ldr	r3, [r3, #16]
    bace:	0018      	movs	r0, r3
    bad0:	f002 fa3a 	bl	df48 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_READ); // Prepare the ACK command for the slave
    bad4:	68fb      	ldr	r3, [r7, #12]
    bad6:	691b      	ldr	r3, [r3, #16]
    bad8:	2102      	movs	r1, #2
    bada:	0018      	movs	r0, r3
    badc:	f002 fa52 	bl	df84 <_ZN6SERCOM22prepareCommandBitsWireEh>
      rxBuffer.store_char(sercom->readDataWIRE());          // Read data and send the ACK
    bae0:	68fb      	ldr	r3, [r7, #12]
    bae2:	3318      	adds	r3, #24
    bae4:	001c      	movs	r4, r3
    bae6:	68fb      	ldr	r3, [r7, #12]
    bae8:	691b      	ldr	r3, [r3, #16]
    baea:	0018      	movs	r0, r3
    baec:	f002 fbe9 	bl	e2c2 <_ZN6SERCOM12readDataWIREEv>
    baf0:	0003      	movs	r3, r0
    baf2:	0019      	movs	r1, r3
    baf4:	0020      	movs	r0, r4
    baf6:	f000 fa4f 	bl	bf98 <_ZN11RingBufferNILi256EE10store_charEh>
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    bafa:	697b      	ldr	r3, [r7, #20]
    bafc:	3301      	adds	r3, #1
    bafe:	617b      	str	r3, [r7, #20]
    bb00:	e7df      	b.n	bac2 <_ZN7TwoWire11requestFromEhjb+0x6a>
    }
    sercom->prepareNackBitWIRE();                           // Prepare NACK to stop slave transmission
    bb02:	68fb      	ldr	r3, [r7, #12]
    bb04:	691b      	ldr	r3, [r3, #16]
    bb06:	0018      	movs	r0, r3
    bb08:	f002 fa00 	bl	df0c <_ZN6SERCOM18prepareNackBitWIREEv>
    //sercom->readDataWIRE();                               // Clear data register to send NACK

    if (stopBit)
    bb0c:	230a      	movs	r3, #10
    bb0e:	18fb      	adds	r3, r7, r3
    bb10:	781b      	ldrb	r3, [r3, #0]
    bb12:	2b00      	cmp	r3, #0
    bb14:	d005      	beq.n	bb22 <_ZN7TwoWire11requestFromEhjb+0xca>
    {
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);   // Send Stop
    bb16:	68fb      	ldr	r3, [r7, #12]
    bb18:	691b      	ldr	r3, [r3, #16]
    bb1a:	2103      	movs	r1, #3
    bb1c:	0018      	movs	r0, r3
    bb1e:	f002 fa31 	bl	df84 <_ZN6SERCOM22prepareCommandBitsWireEh>
    }
  }

  return byteRead;
    bb22:	697b      	ldr	r3, [r7, #20]
    bb24:	b2db      	uxtb	r3, r3
}
    bb26:	0018      	movs	r0, r3
    bb28:	46bd      	mov	sp, r7
    bb2a:	b007      	add	sp, #28
    bb2c:	bd90      	pop	{r4, r7, pc}

0000bb2e <_ZN7TwoWire11requestFromEhj>:

uint8_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
    bb2e:	b580      	push	{r7, lr}
    bb30:	b084      	sub	sp, #16
    bb32:	af00      	add	r7, sp, #0
    bb34:	60f8      	str	r0, [r7, #12]
    bb36:	607a      	str	r2, [r7, #4]
    bb38:	230b      	movs	r3, #11
    bb3a:	18fb      	adds	r3, r7, r3
    bb3c:	1c0a      	adds	r2, r1, #0
    bb3e:	701a      	strb	r2, [r3, #0]
  return requestFrom(address, quantity, true);
    bb40:	687a      	ldr	r2, [r7, #4]
    bb42:	230b      	movs	r3, #11
    bb44:	18fb      	adds	r3, r7, r3
    bb46:	7819      	ldrb	r1, [r3, #0]
    bb48:	68f8      	ldr	r0, [r7, #12]
    bb4a:	2301      	movs	r3, #1
    bb4c:	f7ff ff84 	bl	ba58 <_ZN7TwoWire11requestFromEhjb>
    bb50:	0003      	movs	r3, r0
}
    bb52:	0018      	movs	r0, r3
    bb54:	46bd      	mov	sp, r7
    bb56:	b004      	add	sp, #16
    bb58:	bd80      	pop	{r7, pc}

0000bb5a <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address) {
    bb5a:	b580      	push	{r7, lr}
    bb5c:	b082      	sub	sp, #8
    bb5e:	af00      	add	r7, sp, #0
    bb60:	6078      	str	r0, [r7, #4]
    bb62:	000a      	movs	r2, r1
    bb64:	1cfb      	adds	r3, r7, #3
    bb66:	701a      	strb	r2, [r3, #0]
  // save address of target and clear buffer
  txAddress = address;
    bb68:	687a      	ldr	r2, [r7, #4]
    bb6a:	1cf9      	adds	r1, r7, #3
    bb6c:	238a      	movs	r3, #138	; 0x8a
    bb6e:	009b      	lsls	r3, r3, #2
    bb70:	7809      	ldrb	r1, [r1, #0]
    bb72:	54d1      	strb	r1, [r2, r3]
  txBuffer.clear();
    bb74:	687b      	ldr	r3, [r7, #4]
    bb76:	3321      	adds	r3, #33	; 0x21
    bb78:	33ff      	adds	r3, #255	; 0xff
    bb7a:	0018      	movs	r0, r3
    bb7c:	f000 f9fa 	bl	bf74 <_ZN11RingBufferNILi256EE5clearEv>

  transmissionBegun = true;
    bb80:	687b      	ldr	r3, [r7, #4]
    bb82:	2201      	movs	r2, #1
    bb84:	759a      	strb	r2, [r3, #22]
}
    bb86:	46c0      	nop			; (mov r8, r8)
    bb88:	46bd      	mov	sp, r7
    bb8a:	b002      	add	sp, #8
    bb8c:	bd80      	pop	{r7, pc}

0000bb8e <_ZN7TwoWire15endTransmissionEb>:
//  1 : Data too long
//  2 : NACK on transmit of address
//  3 : NACK on transmit of data
//  4 : Other error
uint8_t TwoWire::endTransmission(bool stopBit)
{
    bb8e:	b590      	push	{r4, r7, lr}
    bb90:	b083      	sub	sp, #12
    bb92:	af00      	add	r7, sp, #0
    bb94:	6078      	str	r0, [r7, #4]
    bb96:	000a      	movs	r2, r1
    bb98:	1cfb      	adds	r3, r7, #3
    bb9a:	701a      	strb	r2, [r3, #0]
  transmissionBegun = false ;
    bb9c:	687b      	ldr	r3, [r7, #4]
    bb9e:	2200      	movs	r2, #0
    bba0:	759a      	strb	r2, [r3, #22]

  // Start I2C transmission
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    bba2:	687b      	ldr	r3, [r7, #4]
    bba4:	6918      	ldr	r0, [r3, #16]
    bba6:	687a      	ldr	r2, [r7, #4]
    bba8:	238a      	movs	r3, #138	; 0x8a
    bbaa:	009b      	lsls	r3, r3, #2
    bbac:	5cd3      	ldrb	r3, [r2, r3]
    bbae:	2200      	movs	r2, #0
    bbb0:	0019      	movs	r1, r3
    bbb2:	f002 fa21 	bl	dff8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    bbb6:	0003      	movs	r3, r0
    bbb8:	001a      	movs	r2, r3
    bbba:	2301      	movs	r3, #1
    bbbc:	4053      	eors	r3, r2
    bbbe:	b2db      	uxtb	r3, r3
    bbc0:	2b00      	cmp	r3, #0
    bbc2:	d007      	beq.n	bbd4 <_ZN7TwoWire15endTransmissionEb+0x46>
  {
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    bbc4:	687b      	ldr	r3, [r7, #4]
    bbc6:	691b      	ldr	r3, [r3, #16]
    bbc8:	2103      	movs	r1, #3
    bbca:	0018      	movs	r0, r3
    bbcc:	f002 f9da 	bl	df84 <_ZN6SERCOM22prepareCommandBitsWireEh>
    return 2 ;  // Address error
    bbd0:	2302      	movs	r3, #2
    bbd2:	e033      	b.n	bc3c <_ZN7TwoWire15endTransmissionEb+0xae>
  }

  // Send all buffer
  while( txBuffer.available() )
    bbd4:	687b      	ldr	r3, [r7, #4]
    bbd6:	3321      	adds	r3, #33	; 0x21
    bbd8:	33ff      	adds	r3, #255	; 0xff
    bbda:	0018      	movs	r0, r3
    bbdc:	f000 fa0a 	bl	bff4 <_ZN11RingBufferNILi256EE9availableEv>
    bbe0:	0003      	movs	r3, r0
    bbe2:	1e5a      	subs	r2, r3, #1
    bbe4:	4193      	sbcs	r3, r2
    bbe6:	b2db      	uxtb	r3, r3
    bbe8:	2b00      	cmp	r3, #0
    bbea:	d01c      	beq.n	bc26 <_ZN7TwoWire15endTransmissionEb+0x98>
  {
    // Trying to send data
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    bbec:	687b      	ldr	r3, [r7, #4]
    bbee:	691c      	ldr	r4, [r3, #16]
    bbf0:	687b      	ldr	r3, [r7, #4]
    bbf2:	3321      	adds	r3, #33	; 0x21
    bbf4:	33ff      	adds	r3, #255	; 0xff
    bbf6:	0018      	movs	r0, r3
    bbf8:	f000 fa16 	bl	c028 <_ZN11RingBufferNILi256EE9read_charEv>
    bbfc:	0003      	movs	r3, r0
    bbfe:	b2db      	uxtb	r3, r3
    bc00:	0019      	movs	r1, r3
    bc02:	0020      	movs	r0, r4
    bc04:	f002 fa75 	bl	e0f2 <_ZN6SERCOM18sendDataMasterWIREEh>
    bc08:	0003      	movs	r3, r0
    bc0a:	001a      	movs	r2, r3
    bc0c:	2301      	movs	r3, #1
    bc0e:	4053      	eors	r3, r2
    bc10:	b2db      	uxtb	r3, r3
    bc12:	2b00      	cmp	r3, #0
    bc14:	d0de      	beq.n	bbd4 <_ZN7TwoWire15endTransmissionEb+0x46>
    {
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    bc16:	687b      	ldr	r3, [r7, #4]
    bc18:	691b      	ldr	r3, [r3, #16]
    bc1a:	2103      	movs	r1, #3
    bc1c:	0018      	movs	r0, r3
    bc1e:	f002 f9b1 	bl	df84 <_ZN6SERCOM22prepareCommandBitsWireEh>
      return 3 ;  // Nack or error
    bc22:	2303      	movs	r3, #3
    bc24:	e00a      	b.n	bc3c <_ZN7TwoWire15endTransmissionEb+0xae>
    }
  }
  
  if (stopBit)
    bc26:	1cfb      	adds	r3, r7, #3
    bc28:	781b      	ldrb	r3, [r3, #0]
    bc2a:	2b00      	cmp	r3, #0
    bc2c:	d005      	beq.n	bc3a <_ZN7TwoWire15endTransmissionEb+0xac>
  {
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    bc2e:	687b      	ldr	r3, [r7, #4]
    bc30:	691b      	ldr	r3, [r3, #16]
    bc32:	2103      	movs	r1, #3
    bc34:	0018      	movs	r0, r3
    bc36:	f002 f9a5 	bl	df84 <_ZN6SERCOM22prepareCommandBitsWireEh>
  }   

  return 0;
    bc3a:	2300      	movs	r3, #0
}
    bc3c:	0018      	movs	r0, r3
    bc3e:	46bd      	mov	sp, r7
    bc40:	b003      	add	sp, #12
    bc42:	bd90      	pop	{r4, r7, pc}

0000bc44 <_ZN7TwoWire15endTransmissionEv>:

uint8_t TwoWire::endTransmission()
{
    bc44:	b580      	push	{r7, lr}
    bc46:	b082      	sub	sp, #8
    bc48:	af00      	add	r7, sp, #0
    bc4a:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
    bc4c:	687b      	ldr	r3, [r7, #4]
    bc4e:	2101      	movs	r1, #1
    bc50:	0018      	movs	r0, r3
    bc52:	f7ff ff9c 	bl	bb8e <_ZN7TwoWire15endTransmissionEb>
    bc56:	0003      	movs	r3, r0
}
    bc58:	0018      	movs	r0, r3
    bc5a:	46bd      	mov	sp, r7
    bc5c:	b002      	add	sp, #8
    bc5e:	bd80      	pop	{r7, pc}

0000bc60 <_ZN7TwoWire5writeEh>:

size_t TwoWire::write(uint8_t ucData)
{
    bc60:	b580      	push	{r7, lr}
    bc62:	b082      	sub	sp, #8
    bc64:	af00      	add	r7, sp, #0
    bc66:	6078      	str	r0, [r7, #4]
    bc68:	000a      	movs	r2, r1
    bc6a:	1cfb      	adds	r3, r7, #3
    bc6c:	701a      	strb	r2, [r3, #0]
  // No writing, without begun transmission or a full buffer
  if ( !transmissionBegun || txBuffer.isFull() )
    bc6e:	687b      	ldr	r3, [r7, #4]
    bc70:	7d9b      	ldrb	r3, [r3, #22]
    bc72:	2201      	movs	r2, #1
    bc74:	4053      	eors	r3, r2
    bc76:	b2db      	uxtb	r3, r3
    bc78:	2b00      	cmp	r3, #0
    bc7a:	d107      	bne.n	bc8c <_ZN7TwoWire5writeEh+0x2c>
    bc7c:	687b      	ldr	r3, [r7, #4]
    bc7e:	3321      	adds	r3, #33	; 0x21
    bc80:	33ff      	adds	r3, #255	; 0xff
    bc82:	0018      	movs	r0, r3
    bc84:	f000 fa03 	bl	c08e <_ZN11RingBufferNILi256EE6isFullEv>
    bc88:	1e03      	subs	r3, r0, #0
    bc8a:	d001      	beq.n	bc90 <_ZN7TwoWire5writeEh+0x30>
    bc8c:	2301      	movs	r3, #1
    bc8e:	e000      	b.n	bc92 <_ZN7TwoWire5writeEh+0x32>
    bc90:	2300      	movs	r3, #0
    bc92:	2b00      	cmp	r3, #0
    bc94:	d001      	beq.n	bc9a <_ZN7TwoWire5writeEh+0x3a>
  {
    return 0 ;
    bc96:	2300      	movs	r3, #0
    bc98:	e00a      	b.n	bcb0 <_ZN7TwoWire5writeEh+0x50>
  }

  txBuffer.store_char( ucData ) ;
    bc9a:	687b      	ldr	r3, [r7, #4]
    bc9c:	3321      	adds	r3, #33	; 0x21
    bc9e:	33ff      	adds	r3, #255	; 0xff
    bca0:	001a      	movs	r2, r3
    bca2:	1cfb      	adds	r3, r7, #3
    bca4:	781b      	ldrb	r3, [r3, #0]
    bca6:	0019      	movs	r1, r3
    bca8:	0010      	movs	r0, r2
    bcaa:	f000 f975 	bl	bf98 <_ZN11RingBufferNILi256EE10store_charEh>

  return 1 ;
    bcae:	2301      	movs	r3, #1
}
    bcb0:	0018      	movs	r0, r3
    bcb2:	46bd      	mov	sp, r7
    bcb4:	b002      	add	sp, #8
    bcb6:	bd80      	pop	{r7, pc}

0000bcb8 <_ZN7TwoWire5writeEPKhj>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    bcb8:	b580      	push	{r7, lr}
    bcba:	b086      	sub	sp, #24
    bcbc:	af00      	add	r7, sp, #0
    bcbe:	60f8      	str	r0, [r7, #12]
    bcc0:	60b9      	str	r1, [r7, #8]
    bcc2:	607a      	str	r2, [r7, #4]
  //Try to store all data
  for(size_t i = 0; i < quantity; ++i)
    bcc4:	2300      	movs	r3, #0
    bcc6:	617b      	str	r3, [r7, #20]
    bcc8:	697a      	ldr	r2, [r7, #20]
    bcca:	687b      	ldr	r3, [r7, #4]
    bccc:	429a      	cmp	r2, r3
    bcce:	d215      	bcs.n	bcfc <_ZN7TwoWire5writeEPKhj+0x44>
  {
    //Return the number of data stored, when the buffer is full (if write return 0)
    if(!write(data[i]))
    bcd0:	68fb      	ldr	r3, [r7, #12]
    bcd2:	681b      	ldr	r3, [r3, #0]
    bcd4:	681b      	ldr	r3, [r3, #0]
    bcd6:	68b9      	ldr	r1, [r7, #8]
    bcd8:	697a      	ldr	r2, [r7, #20]
    bcda:	188a      	adds	r2, r1, r2
    bcdc:	7811      	ldrb	r1, [r2, #0]
    bcde:	68fa      	ldr	r2, [r7, #12]
    bce0:	0010      	movs	r0, r2
    bce2:	4798      	blx	r3
    bce4:	0003      	movs	r3, r0
    bce6:	425a      	negs	r2, r3
    bce8:	4153      	adcs	r3, r2
    bcea:	b2db      	uxtb	r3, r3
    bcec:	2b00      	cmp	r3, #0
    bcee:	d001      	beq.n	bcf4 <_ZN7TwoWire5writeEPKhj+0x3c>
      return i;
    bcf0:	697b      	ldr	r3, [r7, #20]
    bcf2:	e004      	b.n	bcfe <_ZN7TwoWire5writeEPKhj+0x46>
  for(size_t i = 0; i < quantity; ++i)
    bcf4:	697b      	ldr	r3, [r7, #20]
    bcf6:	3301      	adds	r3, #1
    bcf8:	617b      	str	r3, [r7, #20]
    bcfa:	e7e5      	b.n	bcc8 <_ZN7TwoWire5writeEPKhj+0x10>
  }

  //All data stored
  return quantity;
    bcfc:	687b      	ldr	r3, [r7, #4]
}
    bcfe:	0018      	movs	r0, r3
    bd00:	46bd      	mov	sp, r7
    bd02:	b006      	add	sp, #24
    bd04:	bd80      	pop	{r7, pc}

0000bd06 <_ZN7TwoWire9availableEv>:

int TwoWire::available(void)
{
    bd06:	b580      	push	{r7, lr}
    bd08:	b082      	sub	sp, #8
    bd0a:	af00      	add	r7, sp, #0
    bd0c:	6078      	str	r0, [r7, #4]
  return rxBuffer.available();
    bd0e:	687b      	ldr	r3, [r7, #4]
    bd10:	3318      	adds	r3, #24
    bd12:	0018      	movs	r0, r3
    bd14:	f000 f96e 	bl	bff4 <_ZN11RingBufferNILi256EE9availableEv>
    bd18:	0003      	movs	r3, r0
}
    bd1a:	0018      	movs	r0, r3
    bd1c:	46bd      	mov	sp, r7
    bd1e:	b002      	add	sp, #8
    bd20:	bd80      	pop	{r7, pc}

0000bd22 <_ZN7TwoWire4readEv>:

int TwoWire::read(void)
{
    bd22:	b580      	push	{r7, lr}
    bd24:	b082      	sub	sp, #8
    bd26:	af00      	add	r7, sp, #0
    bd28:	6078      	str	r0, [r7, #4]
  return rxBuffer.read_char();
    bd2a:	687b      	ldr	r3, [r7, #4]
    bd2c:	3318      	adds	r3, #24
    bd2e:	0018      	movs	r0, r3
    bd30:	f000 f97a 	bl	c028 <_ZN11RingBufferNILi256EE9read_charEv>
    bd34:	0003      	movs	r3, r0
}
    bd36:	0018      	movs	r0, r3
    bd38:	46bd      	mov	sp, r7
    bd3a:	b002      	add	sp, #8
    bd3c:	bd80      	pop	{r7, pc}

0000bd3e <_ZN7TwoWire4peekEv>:

int TwoWire::peek(void)
{
    bd3e:	b580      	push	{r7, lr}
    bd40:	b082      	sub	sp, #8
    bd42:	af00      	add	r7, sp, #0
    bd44:	6078      	str	r0, [r7, #4]
  return rxBuffer.peek();
    bd46:	687b      	ldr	r3, [r7, #4]
    bd48:	3318      	adds	r3, #24
    bd4a:	0018      	movs	r0, r3
    bd4c:	f000 f9b9 	bl	c0c2 <_ZN11RingBufferNILi256EE4peekEv>
    bd50:	0003      	movs	r3, r0
}
    bd52:	0018      	movs	r0, r3
    bd54:	46bd      	mov	sp, r7
    bd56:	b002      	add	sp, #8
    bd58:	bd80      	pop	{r7, pc}

0000bd5a <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    bd5a:	b580      	push	{r7, lr}
    bd5c:	b082      	sub	sp, #8
    bd5e:	af00      	add	r7, sp, #0
    bd60:	6078      	str	r0, [r7, #4]
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
    bd62:	46c0      	nop			; (mov r8, r8)
    bd64:	46bd      	mov	sp, r7
    bd66:	b002      	add	sp, #8
    bd68:	bd80      	pop	{r7, pc}

0000bd6a <_ZN7TwoWire9onServiceEv>:
{
  onRequestCallback = function;
}

void TwoWire::onService(void)
{
    bd6a:	b590      	push	{r4, r7, lr}
    bd6c:	b085      	sub	sp, #20
    bd6e:	af00      	add	r7, sp, #0
    bd70:	6078      	str	r0, [r7, #4]
  if ( sercom->isSlaveWIRE() )
    bd72:	687b      	ldr	r3, [r7, #4]
    bd74:	691b      	ldr	r3, [r3, #16]
    bd76:	0018      	movs	r0, r3
    bd78:	f002 fa27 	bl	e1ca <_ZN6SERCOM11isSlaveWIREEv>
    bd7c:	1e03      	subs	r3, r0, #0
    bd7e:	d100      	bne.n	bd82 <_ZN7TwoWire9onServiceEv+0x18>
    bd80:	e0d3      	b.n	bf2a <_ZN7TwoWire9onServiceEv+0x1c0>
  {
    if(sercom->isStopDetectedWIRE() || 
    bd82:	687b      	ldr	r3, [r7, #4]
    bd84:	691b      	ldr	r3, [r3, #16]
    bd86:	0018      	movs	r0, r3
    bd88:	f002 fa63 	bl	e252 <_ZN6SERCOM18isStopDetectedWIREEv>
    bd8c:	1e03      	subs	r3, r0, #0
    bd8e:	d119      	bne.n	bdc4 <_ZN7TwoWire9onServiceEv+0x5a>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    bd90:	687b      	ldr	r3, [r7, #4]
    bd92:	691b      	ldr	r3, [r3, #16]
    bd94:	0018      	movs	r0, r3
    bd96:	f002 fa78 	bl	e28a <_ZN6SERCOM14isAddressMatchEv>
    bd9a:	1e03      	subs	r3, r0, #0
    if(sercom->isStopDetectedWIRE() || 
    bd9c:	d014      	beq.n	bdc8 <_ZN7TwoWire9onServiceEv+0x5e>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    bd9e:	687b      	ldr	r3, [r7, #4]
    bda0:	691b      	ldr	r3, [r3, #16]
    bda2:	0018      	movs	r0, r3
    bda4:	f002 fa63 	bl	e26e <_ZN6SERCOM21isRestartDetectedWIREEv>
    bda8:	1e03      	subs	r3, r0, #0
    bdaa:	d00d      	beq.n	bdc8 <_ZN7TwoWire9onServiceEv+0x5e>
    bdac:	687b      	ldr	r3, [r7, #4]
    bdae:	691b      	ldr	r3, [r3, #16]
    bdb0:	0018      	movs	r0, r3
    bdb2:	f002 fa78 	bl	e2a6 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    bdb6:	0003      	movs	r3, r0
    bdb8:	001a      	movs	r2, r3
    bdba:	2301      	movs	r3, #1
    bdbc:	4053      	eors	r3, r2
    bdbe:	b2db      	uxtb	r3, r3
    bdc0:	2b00      	cmp	r3, #0
    bdc2:	d001      	beq.n	bdc8 <_ZN7TwoWire9onServiceEv+0x5e>
    if(sercom->isStopDetectedWIRE() || 
    bdc4:	2301      	movs	r3, #1
    bdc6:	e000      	b.n	bdca <_ZN7TwoWire9onServiceEv+0x60>
    bdc8:	2300      	movs	r3, #0
    bdca:	2b00      	cmp	r3, #0
    bdcc:	d024      	beq.n	be18 <_ZN7TwoWire9onServiceEv+0xae>
    {
      sercom->prepareAckBitWIRE();
    bdce:	687b      	ldr	r3, [r7, #4]
    bdd0:	691b      	ldr	r3, [r3, #16]
    bdd2:	0018      	movs	r0, r3
    bdd4:	f002 f8b8 	bl	df48 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    bdd8:	687b      	ldr	r3, [r7, #4]
    bdda:	691b      	ldr	r3, [r3, #16]
    bddc:	2103      	movs	r1, #3
    bdde:	0018      	movs	r0, r3
    bde0:	f002 f8d0 	bl	df84 <_ZN6SERCOM22prepareCommandBitsWireEh>

      //Calling onReceiveCallback, if exists
      if(onReceiveCallback)
    bde4:	687a      	ldr	r2, [r7, #4]
    bde6:	238c      	movs	r3, #140	; 0x8c
    bde8:	009b      	lsls	r3, r3, #2
    bdea:	58d3      	ldr	r3, [r2, r3]
    bdec:	2b00      	cmp	r3, #0
    bdee:	d00d      	beq.n	be0c <_ZN7TwoWire9onServiceEv+0xa2>
      {
        onReceiveCallback(available());
    bdf0:	687a      	ldr	r2, [r7, #4]
    bdf2:	238c      	movs	r3, #140	; 0x8c
    bdf4:	009b      	lsls	r3, r3, #2
    bdf6:	58d4      	ldr	r4, [r2, r3]
    bdf8:	687b      	ldr	r3, [r7, #4]
    bdfa:	681b      	ldr	r3, [r3, #0]
    bdfc:	3310      	adds	r3, #16
    bdfe:	681b      	ldr	r3, [r3, #0]
    be00:	687a      	ldr	r2, [r7, #4]
    be02:	0010      	movs	r0, r2
    be04:	4798      	blx	r3
    be06:	0003      	movs	r3, r0
    be08:	0018      	movs	r0, r3
    be0a:	47a0      	blx	r4
      }
      
      rxBuffer.clear();
    be0c:	687b      	ldr	r3, [r7, #4]
    be0e:	3318      	adds	r3, #24
    be10:	0018      	movs	r0, r3
    be12:	f000 f8af 	bl	bf74 <_ZN11RingBufferNILi256EE5clearEv>

        sercom->prepareCommandBitsWire(0x03);
      }
    }
  }
}
    be16:	e088      	b.n	bf2a <_ZN7TwoWire9onServiceEv+0x1c0>
    else if(sercom->isAddressMatch())  //Address Match
    be18:	687b      	ldr	r3, [r7, #4]
    be1a:	691b      	ldr	r3, [r3, #16]
    be1c:	0018      	movs	r0, r3
    be1e:	f002 fa34 	bl	e28a <_ZN6SERCOM14isAddressMatchEv>
    be22:	1e03      	subs	r3, r0, #0
    be24:	d026      	beq.n	be74 <_ZN7TwoWire9onServiceEv+0x10a>
      sercom->prepareAckBitWIRE();
    be26:	687b      	ldr	r3, [r7, #4]
    be28:	691b      	ldr	r3, [r3, #16]
    be2a:	0018      	movs	r0, r3
    be2c:	f002 f88c 	bl	df48 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    be30:	687b      	ldr	r3, [r7, #4]
    be32:	691b      	ldr	r3, [r3, #16]
    be34:	2103      	movs	r1, #3
    be36:	0018      	movs	r0, r3
    be38:	f002 f8a4 	bl	df84 <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
    be3c:	687b      	ldr	r3, [r7, #4]
    be3e:	691b      	ldr	r3, [r3, #16]
    be40:	0018      	movs	r0, r3
    be42:	f002 fa30 	bl	e2a6 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    be46:	1e03      	subs	r3, r0, #0
    be48:	d06f      	beq.n	bf2a <_ZN7TwoWire9onServiceEv+0x1c0>
        txBuffer.clear();
    be4a:	687b      	ldr	r3, [r7, #4]
    be4c:	3321      	adds	r3, #33	; 0x21
    be4e:	33ff      	adds	r3, #255	; 0xff
    be50:	0018      	movs	r0, r3
    be52:	f000 f88f 	bl	bf74 <_ZN11RingBufferNILi256EE5clearEv>
        transmissionBegun = true;
    be56:	687b      	ldr	r3, [r7, #4]
    be58:	2201      	movs	r2, #1
    be5a:	759a      	strb	r2, [r3, #22]
        if(onRequestCallback)
    be5c:	687a      	ldr	r2, [r7, #4]
    be5e:	238b      	movs	r3, #139	; 0x8b
    be60:	009b      	lsls	r3, r3, #2
    be62:	58d3      	ldr	r3, [r2, r3]
    be64:	2b00      	cmp	r3, #0
    be66:	d060      	beq.n	bf2a <_ZN7TwoWire9onServiceEv+0x1c0>
          onRequestCallback();
    be68:	687a      	ldr	r2, [r7, #4]
    be6a:	238b      	movs	r3, #139	; 0x8b
    be6c:	009b      	lsls	r3, r3, #2
    be6e:	58d3      	ldr	r3, [r2, r3]
    be70:	4798      	blx	r3
}
    be72:	e05a      	b.n	bf2a <_ZN7TwoWire9onServiceEv+0x1c0>
    else if(sercom->isDataReadyWIRE())
    be74:	687b      	ldr	r3, [r7, #4]
    be76:	691b      	ldr	r3, [r3, #16]
    be78:	0018      	movs	r0, r3
    be7a:	f002 f9dc 	bl	e236 <_ZN6SERCOM15isDataReadyWIREEv>
    be7e:	1e03      	subs	r3, r0, #0
    be80:	d053      	beq.n	bf2a <_ZN7TwoWire9onServiceEv+0x1c0>
      if (sercom->isMasterReadOperationWIRE())
    be82:	687b      	ldr	r3, [r7, #4]
    be84:	691b      	ldr	r3, [r3, #16]
    be86:	0018      	movs	r0, r3
    be88:	f002 fa0d 	bl	e2a6 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    be8c:	1e03      	subs	r3, r0, #0
    be8e:	d027      	beq.n	bee0 <_ZN7TwoWire9onServiceEv+0x176>
        uint8_t c = 0xff;
    be90:	230f      	movs	r3, #15
    be92:	18fb      	adds	r3, r7, r3
    be94:	22ff      	movs	r2, #255	; 0xff
    be96:	701a      	strb	r2, [r3, #0]
        if( txBuffer.available() ) {
    be98:	687b      	ldr	r3, [r7, #4]
    be9a:	3321      	adds	r3, #33	; 0x21
    be9c:	33ff      	adds	r3, #255	; 0xff
    be9e:	0018      	movs	r0, r3
    bea0:	f000 f8a8 	bl	bff4 <_ZN11RingBufferNILi256EE9availableEv>
    bea4:	0003      	movs	r3, r0
    bea6:	1e5a      	subs	r2, r3, #1
    bea8:	4193      	sbcs	r3, r2
    beaa:	b2db      	uxtb	r3, r3
    beac:	2b00      	cmp	r3, #0
    beae:	d009      	beq.n	bec4 <_ZN7TwoWire9onServiceEv+0x15a>
          c = txBuffer.read_char();
    beb0:	687b      	ldr	r3, [r7, #4]
    beb2:	3321      	adds	r3, #33	; 0x21
    beb4:	33ff      	adds	r3, #255	; 0xff
    beb6:	0018      	movs	r0, r3
    beb8:	f000 f8b6 	bl	c028 <_ZN11RingBufferNILi256EE9read_charEv>
    bebc:	0002      	movs	r2, r0
    bebe:	230f      	movs	r3, #15
    bec0:	18fb      	adds	r3, r7, r3
    bec2:	701a      	strb	r2, [r3, #0]
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
    bec4:	687b      	ldr	r3, [r7, #4]
    bec6:	691a      	ldr	r2, [r3, #16]
    bec8:	230f      	movs	r3, #15
    beca:	18fb      	adds	r3, r7, r3
    becc:	781b      	ldrb	r3, [r3, #0]
    bece:	0019      	movs	r1, r3
    bed0:	0010      	movs	r0, r2
    bed2:	f002 f93f 	bl	e154 <_ZN6SERCOM17sendDataSlaveWIREEh>
    bed6:	0003      	movs	r3, r0
    bed8:	001a      	movs	r2, r3
    beda:	687b      	ldr	r3, [r7, #4]
    bedc:	759a      	strb	r2, [r3, #22]
}
    bede:	e024      	b.n	bf2a <_ZN7TwoWire9onServiceEv+0x1c0>
        if (rxBuffer.isFull()) {
    bee0:	687b      	ldr	r3, [r7, #4]
    bee2:	3318      	adds	r3, #24
    bee4:	0018      	movs	r0, r3
    bee6:	f000 f8d2 	bl	c08e <_ZN11RingBufferNILi256EE6isFullEv>
    beea:	1e03      	subs	r3, r0, #0
    beec:	d005      	beq.n	befa <_ZN7TwoWire9onServiceEv+0x190>
          sercom->prepareNackBitWIRE(); 
    beee:	687b      	ldr	r3, [r7, #4]
    bef0:	691b      	ldr	r3, [r3, #16]
    bef2:	0018      	movs	r0, r3
    bef4:	f002 f80a 	bl	df0c <_ZN6SERCOM18prepareNackBitWIREEv>
    bef8:	e011      	b.n	bf1e <_ZN7TwoWire9onServiceEv+0x1b4>
          rxBuffer.store_char(sercom->readDataWIRE());
    befa:	687b      	ldr	r3, [r7, #4]
    befc:	3318      	adds	r3, #24
    befe:	001c      	movs	r4, r3
    bf00:	687b      	ldr	r3, [r7, #4]
    bf02:	691b      	ldr	r3, [r3, #16]
    bf04:	0018      	movs	r0, r3
    bf06:	f002 f9dc 	bl	e2c2 <_ZN6SERCOM12readDataWIREEv>
    bf0a:	0003      	movs	r3, r0
    bf0c:	0019      	movs	r1, r3
    bf0e:	0020      	movs	r0, r4
    bf10:	f000 f842 	bl	bf98 <_ZN11RingBufferNILi256EE10store_charEh>
          sercom->prepareAckBitWIRE(); 
    bf14:	687b      	ldr	r3, [r7, #4]
    bf16:	691b      	ldr	r3, [r3, #16]
    bf18:	0018      	movs	r0, r3
    bf1a:	f002 f815 	bl	df48 <_ZN6SERCOM17prepareAckBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
    bf1e:	687b      	ldr	r3, [r7, #4]
    bf20:	691b      	ldr	r3, [r3, #16]
    bf22:	2103      	movs	r1, #3
    bf24:	0018      	movs	r0, r3
    bf26:	f002 f82d 	bl	df84 <_ZN6SERCOM22prepareCommandBitsWireEh>
}
    bf2a:	46c0      	nop			; (mov r8, r8)
    bf2c:	46bd      	mov	sp, r7
    bf2e:	b005      	add	sp, #20
    bf30:	bd90      	pop	{r4, r7, pc}
	...

0000bf34 <SERCOM3_Handler>:
    #define PERIPH_WIRE          sercom3
    #define WIRE_IT_HANDLER      SERCOM3_Handler
  #endif // PERIPH_WIRE
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);

  void WIRE_IT_HANDLER(void) {
    bf34:	b580      	push	{r7, lr}
    bf36:	af00      	add	r7, sp, #0
    Wire.onService();
    bf38:	4b03      	ldr	r3, [pc, #12]	; (bf48 <SERCOM3_Handler+0x14>)
    bf3a:	0018      	movs	r0, r3
    bf3c:	f7ff ff15 	bl	bd6a <_ZN7TwoWire9onServiceEv>
  }
    bf40:	46c0      	nop			; (mov r8, r8)
    bf42:	46bd      	mov	sp, r7
    bf44:	bd80      	pop	{r7, pc}
    bf46:	46c0      	nop			; (mov r8, r8)
    bf48:	20000b8c 	.word	0x20000b8c

0000bf4c <_ZN11RingBufferNILi256EEC1Ev>:
RingBufferN<N>::RingBufferN( void )
    bf4c:	b580      	push	{r7, lr}
    bf4e:	b082      	sub	sp, #8
    bf50:	af00      	add	r7, sp, #0
    bf52:	6078      	str	r0, [r7, #4]
    memset( _aucBuffer, 0, N ) ;
    bf54:	6878      	ldr	r0, [r7, #4]
    bf56:	2380      	movs	r3, #128	; 0x80
    bf58:	005b      	lsls	r3, r3, #1
    bf5a:	001a      	movs	r2, r3
    bf5c:	2100      	movs	r1, #0
    bf5e:	f004 fc71 	bl	10844 <memset>
    clear();
    bf62:	687b      	ldr	r3, [r7, #4]
    bf64:	0018      	movs	r0, r3
    bf66:	f000 f805 	bl	bf74 <_ZN11RingBufferNILi256EE5clearEv>
}
    bf6a:	687b      	ldr	r3, [r7, #4]
    bf6c:	0018      	movs	r0, r3
    bf6e:	46bd      	mov	sp, r7
    bf70:	b002      	add	sp, #8
    bf72:	bd80      	pop	{r7, pc}

0000bf74 <_ZN11RingBufferNILi256EE5clearEv>:
void RingBufferN<N>::clear()
    bf74:	b580      	push	{r7, lr}
    bf76:	b082      	sub	sp, #8
    bf78:	af00      	add	r7, sp, #0
    bf7a:	6078      	str	r0, [r7, #4]
  _iHead = 0;
    bf7c:	687a      	ldr	r2, [r7, #4]
    bf7e:	2380      	movs	r3, #128	; 0x80
    bf80:	005b      	lsls	r3, r3, #1
    bf82:	2100      	movs	r1, #0
    bf84:	50d1      	str	r1, [r2, r3]
  _iTail = 0;
    bf86:	687a      	ldr	r2, [r7, #4]
    bf88:	2382      	movs	r3, #130	; 0x82
    bf8a:	005b      	lsls	r3, r3, #1
    bf8c:	2100      	movs	r1, #0
    bf8e:	50d1      	str	r1, [r2, r3]
}
    bf90:	46c0      	nop			; (mov r8, r8)
    bf92:	46bd      	mov	sp, r7
    bf94:	b002      	add	sp, #8
    bf96:	bd80      	pop	{r7, pc}

0000bf98 <_ZN11RingBufferNILi256EE10store_charEh>:
void RingBufferN<N>::store_char( uint8_t c )
    bf98:	b580      	push	{r7, lr}
    bf9a:	b084      	sub	sp, #16
    bf9c:	af00      	add	r7, sp, #0
    bf9e:	6078      	str	r0, [r7, #4]
    bfa0:	000a      	movs	r2, r1
    bfa2:	1cfb      	adds	r3, r7, #3
    bfa4:	701a      	strb	r2, [r3, #0]
  int i = nextIndex(_iHead);
    bfa6:	687a      	ldr	r2, [r7, #4]
    bfa8:	2380      	movs	r3, #128	; 0x80
    bfaa:	005b      	lsls	r3, r3, #1
    bfac:	58d2      	ldr	r2, [r2, r3]
    bfae:	687b      	ldr	r3, [r7, #4]
    bfb0:	0011      	movs	r1, r2
    bfb2:	0018      	movs	r0, r3
    bfb4:	f000 f8a4 	bl	c100 <_ZN11RingBufferNILi256EE9nextIndexEi>
    bfb8:	0003      	movs	r3, r0
    bfba:	60fb      	str	r3, [r7, #12]
  if ( i != _iTail )
    bfbc:	687a      	ldr	r2, [r7, #4]
    bfbe:	2382      	movs	r3, #130	; 0x82
    bfc0:	005b      	lsls	r3, r3, #1
    bfc2:	58d2      	ldr	r2, [r2, r3]
    bfc4:	68fb      	ldr	r3, [r7, #12]
    bfc6:	1ad3      	subs	r3, r2, r3
    bfc8:	1e5a      	subs	r2, r3, #1
    bfca:	4193      	sbcs	r3, r2
    bfcc:	b2db      	uxtb	r3, r3
    bfce:	2b00      	cmp	r3, #0
    bfd0:	d00c      	beq.n	bfec <_ZN11RingBufferNILi256EE10store_charEh+0x54>
    _aucBuffer[_iHead] = c ;
    bfd2:	687a      	ldr	r2, [r7, #4]
    bfd4:	2380      	movs	r3, #128	; 0x80
    bfd6:	005b      	lsls	r3, r3, #1
    bfd8:	58d3      	ldr	r3, [r2, r3]
    bfda:	687a      	ldr	r2, [r7, #4]
    bfdc:	1cf9      	adds	r1, r7, #3
    bfde:	7809      	ldrb	r1, [r1, #0]
    bfe0:	54d1      	strb	r1, [r2, r3]
    _iHead = i ;
    bfe2:	687a      	ldr	r2, [r7, #4]
    bfe4:	2380      	movs	r3, #128	; 0x80
    bfe6:	005b      	lsls	r3, r3, #1
    bfe8:	68f9      	ldr	r1, [r7, #12]
    bfea:	50d1      	str	r1, [r2, r3]
}
    bfec:	46c0      	nop			; (mov r8, r8)
    bfee:	46bd      	mov	sp, r7
    bff0:	b004      	add	sp, #16
    bff2:	bd80      	pop	{r7, pc}

0000bff4 <_ZN11RingBufferNILi256EE9availableEv>:
int RingBufferN<N>::available()
    bff4:	b580      	push	{r7, lr}
    bff6:	b084      	sub	sp, #16
    bff8:	af00      	add	r7, sp, #0
    bffa:	6078      	str	r0, [r7, #4]
  int delta = _iHead - _iTail;
    bffc:	687a      	ldr	r2, [r7, #4]
    bffe:	2380      	movs	r3, #128	; 0x80
    c000:	005b      	lsls	r3, r3, #1
    c002:	58d2      	ldr	r2, [r2, r3]
    c004:	6879      	ldr	r1, [r7, #4]
    c006:	2382      	movs	r3, #130	; 0x82
    c008:	005b      	lsls	r3, r3, #1
    c00a:	58cb      	ldr	r3, [r1, r3]
    c00c:	1ad3      	subs	r3, r2, r3
    c00e:	60fb      	str	r3, [r7, #12]
  if(delta < 0)
    c010:	68fb      	ldr	r3, [r7, #12]
    c012:	2b00      	cmp	r3, #0
    c014:	da03      	bge.n	c01e <_ZN11RingBufferNILi256EE9availableEv+0x2a>
    return N + delta;
    c016:	68fb      	ldr	r3, [r7, #12]
    c018:	3301      	adds	r3, #1
    c01a:	33ff      	adds	r3, #255	; 0xff
    c01c:	e000      	b.n	c020 <_ZN11RingBufferNILi256EE9availableEv+0x2c>
    return delta;
    c01e:	68fb      	ldr	r3, [r7, #12]
}
    c020:	0018      	movs	r0, r3
    c022:	46bd      	mov	sp, r7
    c024:	b004      	add	sp, #16
    c026:	bd80      	pop	{r7, pc}

0000c028 <_ZN11RingBufferNILi256EE9read_charEv>:
int RingBufferN<N>::read_char()
    c028:	b580      	push	{r7, lr}
    c02a:	b084      	sub	sp, #16
    c02c:	af00      	add	r7, sp, #0
    c02e:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    c030:	687a      	ldr	r2, [r7, #4]
    c032:	2382      	movs	r3, #130	; 0x82
    c034:	005b      	lsls	r3, r3, #1
    c036:	58d2      	ldr	r2, [r2, r3]
    c038:	6879      	ldr	r1, [r7, #4]
    c03a:	2380      	movs	r3, #128	; 0x80
    c03c:	005b      	lsls	r3, r3, #1
    c03e:	58cb      	ldr	r3, [r1, r3]
    c040:	1ad3      	subs	r3, r2, r3
    c042:	425a      	negs	r2, r3
    c044:	4153      	adcs	r3, r2
    c046:	b2db      	uxtb	r3, r3
    c048:	2b00      	cmp	r3, #0
    c04a:	d002      	beq.n	c052 <_ZN11RingBufferNILi256EE9read_charEv+0x2a>
    return -1;
    c04c:	2301      	movs	r3, #1
    c04e:	425b      	negs	r3, r3
    c050:	e019      	b.n	c086 <_ZN11RingBufferNILi256EE9read_charEv+0x5e>
  uint8_t value = _aucBuffer[_iTail];
    c052:	687a      	ldr	r2, [r7, #4]
    c054:	2382      	movs	r3, #130	; 0x82
    c056:	005b      	lsls	r3, r3, #1
    c058:	58d2      	ldr	r2, [r2, r3]
    c05a:	230f      	movs	r3, #15
    c05c:	18fb      	adds	r3, r7, r3
    c05e:	6879      	ldr	r1, [r7, #4]
    c060:	5c8a      	ldrb	r2, [r1, r2]
    c062:	701a      	strb	r2, [r3, #0]
  _iTail = nextIndex(_iTail);
    c064:	687a      	ldr	r2, [r7, #4]
    c066:	2382      	movs	r3, #130	; 0x82
    c068:	005b      	lsls	r3, r3, #1
    c06a:	58d2      	ldr	r2, [r2, r3]
    c06c:	687b      	ldr	r3, [r7, #4]
    c06e:	0011      	movs	r1, r2
    c070:	0018      	movs	r0, r3
    c072:	f000 f845 	bl	c100 <_ZN11RingBufferNILi256EE9nextIndexEi>
    c076:	0001      	movs	r1, r0
    c078:	687a      	ldr	r2, [r7, #4]
    c07a:	2382      	movs	r3, #130	; 0x82
    c07c:	005b      	lsls	r3, r3, #1
    c07e:	50d1      	str	r1, [r2, r3]
  return value;
    c080:	230f      	movs	r3, #15
    c082:	18fb      	adds	r3, r7, r3
    c084:	781b      	ldrb	r3, [r3, #0]
}
    c086:	0018      	movs	r0, r3
    c088:	46bd      	mov	sp, r7
    c08a:	b004      	add	sp, #16
    c08c:	bd80      	pop	{r7, pc}

0000c08e <_ZN11RingBufferNILi256EE6isFullEv>:
bool RingBufferN<N>::isFull()
    c08e:	b580      	push	{r7, lr}
    c090:	b082      	sub	sp, #8
    c092:	af00      	add	r7, sp, #0
    c094:	6078      	str	r0, [r7, #4]
  return (nextIndex(_iHead) == _iTail);
    c096:	687a      	ldr	r2, [r7, #4]
    c098:	2380      	movs	r3, #128	; 0x80
    c09a:	005b      	lsls	r3, r3, #1
    c09c:	58d2      	ldr	r2, [r2, r3]
    c09e:	687b      	ldr	r3, [r7, #4]
    c0a0:	0011      	movs	r1, r2
    c0a2:	0018      	movs	r0, r3
    c0a4:	f000 f82c 	bl	c100 <_ZN11RingBufferNILi256EE9nextIndexEi>
    c0a8:	0001      	movs	r1, r0
    c0aa:	687a      	ldr	r2, [r7, #4]
    c0ac:	2382      	movs	r3, #130	; 0x82
    c0ae:	005b      	lsls	r3, r3, #1
    c0b0:	58d3      	ldr	r3, [r2, r3]
    c0b2:	1acb      	subs	r3, r1, r3
    c0b4:	425a      	negs	r2, r3
    c0b6:	4153      	adcs	r3, r2
    c0b8:	b2db      	uxtb	r3, r3
}
    c0ba:	0018      	movs	r0, r3
    c0bc:	46bd      	mov	sp, r7
    c0be:	b002      	add	sp, #8
    c0c0:	bd80      	pop	{r7, pc}

0000c0c2 <_ZN11RingBufferNILi256EE4peekEv>:
int RingBufferN<N>::peek()
    c0c2:	b580      	push	{r7, lr}
    c0c4:	b082      	sub	sp, #8
    c0c6:	af00      	add	r7, sp, #0
    c0c8:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    c0ca:	687a      	ldr	r2, [r7, #4]
    c0cc:	2382      	movs	r3, #130	; 0x82
    c0ce:	005b      	lsls	r3, r3, #1
    c0d0:	58d2      	ldr	r2, [r2, r3]
    c0d2:	6879      	ldr	r1, [r7, #4]
    c0d4:	2380      	movs	r3, #128	; 0x80
    c0d6:	005b      	lsls	r3, r3, #1
    c0d8:	58cb      	ldr	r3, [r1, r3]
    c0da:	1ad3      	subs	r3, r2, r3
    c0dc:	425a      	negs	r2, r3
    c0de:	4153      	adcs	r3, r2
    c0e0:	b2db      	uxtb	r3, r3
    c0e2:	2b00      	cmp	r3, #0
    c0e4:	d002      	beq.n	c0ec <_ZN11RingBufferNILi256EE4peekEv+0x2a>
    return -1;
    c0e6:	2301      	movs	r3, #1
    c0e8:	425b      	negs	r3, r3
    c0ea:	e005      	b.n	c0f8 <_ZN11RingBufferNILi256EE4peekEv+0x36>
  return _aucBuffer[_iTail];
    c0ec:	687a      	ldr	r2, [r7, #4]
    c0ee:	2382      	movs	r3, #130	; 0x82
    c0f0:	005b      	lsls	r3, r3, #1
    c0f2:	58d3      	ldr	r3, [r2, r3]
    c0f4:	687a      	ldr	r2, [r7, #4]
    c0f6:	5cd3      	ldrb	r3, [r2, r3]
}
    c0f8:	0018      	movs	r0, r3
    c0fa:	46bd      	mov	sp, r7
    c0fc:	b002      	add	sp, #8
    c0fe:	bd80      	pop	{r7, pc}

0000c100 <_ZN11RingBufferNILi256EE9nextIndexEi>:
int RingBufferN<N>::nextIndex(int index)
    c100:	b580      	push	{r7, lr}
    c102:	b082      	sub	sp, #8
    c104:	af00      	add	r7, sp, #0
    c106:	6078      	str	r0, [r7, #4]
    c108:	6039      	str	r1, [r7, #0]
  return (uint32_t)(index + 1) % N;
    c10a:	683b      	ldr	r3, [r7, #0]
    c10c:	3301      	adds	r3, #1
    c10e:	22ff      	movs	r2, #255	; 0xff
    c110:	4013      	ands	r3, r2
}
    c112:	0018      	movs	r0, r3
    c114:	46bd      	mov	sp, r7
    c116:	b002      	add	sp, #8
    c118:	bd80      	pop	{r7, pc}
	...

0000c11c <_Z41__static_initialization_and_destruction_0ii>:
    c11c:	b580      	push	{r7, lr}
    c11e:	b082      	sub	sp, #8
    c120:	af00      	add	r7, sp, #0
    c122:	6078      	str	r0, [r7, #4]
    c124:	6039      	str	r1, [r7, #0]
    c126:	687b      	ldr	r3, [r7, #4]
    c128:	2b01      	cmp	r3, #1
    c12a:	d109      	bne.n	c140 <_Z41__static_initialization_and_destruction_0ii+0x24>
    c12c:	683b      	ldr	r3, [r7, #0]
    c12e:	4a06      	ldr	r2, [pc, #24]	; (c148 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    c130:	4293      	cmp	r3, r2
    c132:	d105      	bne.n	c140 <_Z41__static_initialization_and_destruction_0ii+0x24>
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
    c134:	4905      	ldr	r1, [pc, #20]	; (c14c <_Z41__static_initialization_and_destruction_0ii+0x30>)
    c136:	4806      	ldr	r0, [pc, #24]	; (c150 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    c138:	2311      	movs	r3, #17
    c13a:	2210      	movs	r2, #16
    c13c:	f7ff fc1e 	bl	b97c <_ZN7TwoWireC1EP6SERCOMhh>
  }
    c140:	46c0      	nop			; (mov r8, r8)
    c142:	46bd      	mov	sp, r7
    c144:	b002      	add	sp, #8
    c146:	bd80      	pop	{r7, pc}
    c148:	0000ffff 	.word	0x0000ffff
    c14c:	20000dcc 	.word	0x20000dcc
    c150:	20000b8c 	.word	0x20000b8c

0000c154 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
    c154:	b580      	push	{r7, lr}
    c156:	af00      	add	r7, sp, #0
    c158:	4b03      	ldr	r3, [pc, #12]	; (c168 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
    c15a:	0019      	movs	r1, r3
    c15c:	2001      	movs	r0, #1
    c15e:	f7ff ffdd 	bl	c11c <_Z41__static_initialization_and_destruction_0ii>
    c162:	46bd      	mov	sp, r7
    c164:	bd80      	pop	{r7, pc}
    c166:	46c0      	nop			; (mov r8, r8)
    c168:	0000ffff 	.word	0x0000ffff

0000c16c <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    c16c:	b580      	push	{r7, lr}
    c16e:	af00      	add	r7, sp, #0
  Serial1.IrqHandler();
    c170:	4b03      	ldr	r3, [pc, #12]	; (c180 <SERCOM0_Handler+0x14>)
    c172:	0018      	movs	r0, r3
    c174:	f7f7 fc76 	bl	3a64 <_ZN4Uart10IrqHandlerEv>
}
    c178:	46c0      	nop			; (mov r8, r8)
    c17a:	46bd      	mov	sp, r7
    c17c:	bd80      	pop	{r7, pc}
    c17e:	46c0      	nop			; (mov r8, r8)
    c180:	20000dd8 	.word	0x20000dd8

0000c184 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    c184:	b580      	push	{r7, lr}
    c186:	af00      	add	r7, sp, #0
  Serial.IrqHandler();
    c188:	4b03      	ldr	r3, [pc, #12]	; (c198 <SERCOM5_Handler+0x14>)
    c18a:	0018      	movs	r0, r3
    c18c:	f7f7 fc6a 	bl	3a64 <_ZN4Uart10IrqHandlerEv>
}
    c190:	46c0      	nop			; (mov r8, r8)
    c192:	46bd      	mov	sp, r7
    c194:	bd80      	pop	{r7, pc}
    c196:	46c0      	nop			; (mov r8, r8)
    c198:	20000e94 	.word	0x20000e94

0000c19c <_Z41__static_initialization_and_destruction_0ii>:
    c19c:	b580      	push	{r7, lr}
    c19e:	b084      	sub	sp, #16
    c1a0:	af02      	add	r7, sp, #8
    c1a2:	6078      	str	r0, [r7, #4]
    c1a4:	6039      	str	r1, [r7, #0]
    c1a6:	687b      	ldr	r3, [r7, #4]
    c1a8:	2b01      	cmp	r3, #1
    c1aa:	d147      	bne.n	c23c <_Z41__static_initialization_and_destruction_0ii+0xa0>
    c1ac:	683b      	ldr	r3, [r7, #0]
    c1ae:	4a25      	ldr	r2, [pc, #148]	; (c244 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    c1b0:	4293      	cmp	r3, r2
    c1b2:	d143      	bne.n	c23c <_Z41__static_initialization_and_destruction_0ii+0xa0>
SERCOM sercom0( SERCOM0 ) ;
    c1b4:	4a24      	ldr	r2, [pc, #144]	; (c248 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    c1b6:	4b25      	ldr	r3, [pc, #148]	; (c24c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    c1b8:	0011      	movs	r1, r2
    c1ba:	0018      	movs	r0, r3
    c1bc:	f001 fb32 	bl	d824 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    c1c0:	4a23      	ldr	r2, [pc, #140]	; (c250 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    c1c2:	4b24      	ldr	r3, [pc, #144]	; (c254 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    c1c4:	0011      	movs	r1, r2
    c1c6:	0018      	movs	r0, r3
    c1c8:	f001 fb2c 	bl	d824 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    c1cc:	4a22      	ldr	r2, [pc, #136]	; (c258 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    c1ce:	4b23      	ldr	r3, [pc, #140]	; (c25c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    c1d0:	0011      	movs	r1, r2
    c1d2:	0018      	movs	r0, r3
    c1d4:	f001 fb26 	bl	d824 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    c1d8:	4a21      	ldr	r2, [pc, #132]	; (c260 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    c1da:	4b22      	ldr	r3, [pc, #136]	; (c264 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    c1dc:	0011      	movs	r1, r2
    c1de:	0018      	movs	r0, r3
    c1e0:	f001 fb20 	bl	d824 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    c1e4:	4a20      	ldr	r2, [pc, #128]	; (c268 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    c1e6:	4b21      	ldr	r3, [pc, #132]	; (c26c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    c1e8:	0011      	movs	r1, r2
    c1ea:	0018      	movs	r0, r3
    c1ec:	f001 fb1a 	bl	d824 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    c1f0:	4a1f      	ldr	r2, [pc, #124]	; (c270 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    c1f2:	4b20      	ldr	r3, [pc, #128]	; (c274 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    c1f4:	0011      	movs	r1, r2
    c1f6:	0018      	movs	r0, r3
    c1f8:	f001 fb14 	bl	d824 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    c1fc:	4913      	ldr	r1, [pc, #76]	; (c24c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    c1fe:	481e      	ldr	r0, [pc, #120]	; (c278 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    c200:	2301      	movs	r3, #1
    c202:	9301      	str	r3, [sp, #4]
    c204:	2303      	movs	r3, #3
    c206:	9300      	str	r3, [sp, #0]
    c208:	2301      	movs	r3, #1
    c20a:	2200      	movs	r2, #0
    c20c:	f7f7 faa3 	bl	3756 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    c210:	4a1a      	ldr	r2, [pc, #104]	; (c27c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    c212:	491b      	ldr	r1, [pc, #108]	; (c280 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    c214:	4b18      	ldr	r3, [pc, #96]	; (c278 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    c216:	0018      	movs	r0, r3
    c218:	f002 fb36 	bl	e888 <__aeabi_atexit>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    c21c:	4915      	ldr	r1, [pc, #84]	; (c274 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    c21e:	4819      	ldr	r0, [pc, #100]	; (c284 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    c220:	2301      	movs	r3, #1
    c222:	9301      	str	r3, [sp, #4]
    c224:	2303      	movs	r3, #3
    c226:	9300      	str	r3, [sp, #0]
    c228:	2323      	movs	r3, #35	; 0x23
    c22a:	2224      	movs	r2, #36	; 0x24
    c22c:	f7f7 fa93 	bl	3756 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    c230:	4a12      	ldr	r2, [pc, #72]	; (c27c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    c232:	4913      	ldr	r1, [pc, #76]	; (c280 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    c234:	4b13      	ldr	r3, [pc, #76]	; (c284 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    c236:	0018      	movs	r0, r3
    c238:	f002 fb26 	bl	e888 <__aeabi_atexit>
}
    c23c:	46c0      	nop			; (mov r8, r8)
    c23e:	46bd      	mov	sp, r7
    c240:	b002      	add	sp, #8
    c242:	bd80      	pop	{r7, pc}
    c244:	0000ffff 	.word	0x0000ffff
    c248:	42000800 	.word	0x42000800
    c24c:	20000dc0 	.word	0x20000dc0
    c250:	42000c00 	.word	0x42000c00
    c254:	20000dc4 	.word	0x20000dc4
    c258:	42001000 	.word	0x42001000
    c25c:	20000dc8 	.word	0x20000dc8
    c260:	42001400 	.word	0x42001400
    c264:	20000dcc 	.word	0x20000dcc
    c268:	42001800 	.word	0x42001800
    c26c:	20000dd0 	.word	0x20000dd0
    c270:	42001c00 	.word	0x42001c00
    c274:	20000dd4 	.word	0x20000dd4
    c278:	20000dd8 	.word	0x20000dd8
    c27c:	20000000 	.word	0x20000000
    c280:	00003f41 	.word	0x00003f41
    c284:	20000e94 	.word	0x20000e94

0000c288 <_GLOBAL__sub_I_g_APinDescription>:
    c288:	b580      	push	{r7, lr}
    c28a:	af00      	add	r7, sp, #0
    c28c:	4b03      	ldr	r3, [pc, #12]	; (c29c <_GLOBAL__sub_I_g_APinDescription+0x14>)
    c28e:	0019      	movs	r1, r3
    c290:	2001      	movs	r0, #1
    c292:	f7ff ff83 	bl	c19c <_Z41__static_initialization_and_destruction_0ii>
    c296:	46bd      	mov	sp, r7
    c298:	bd80      	pop	{r7, pc}
    c29a:	46c0      	nop			; (mov r8, r8)
    c29c:	0000ffff 	.word	0x0000ffff

0000c2a0 <_ZN12Adafruit_GFXC1Ess>:

#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
    c2a0:	b580      	push	{r7, lr}
    c2a2:	b082      	sub	sp, #8
    c2a4:	af00      	add	r7, sp, #0
    c2a6:	6078      	str	r0, [r7, #4]
    c2a8:	0008      	movs	r0, r1
    c2aa:	0011      	movs	r1, r2
    c2ac:	1cbb      	adds	r3, r7, #2
    c2ae:	1c02      	adds	r2, r0, #0
    c2b0:	801a      	strh	r2, [r3, #0]
    c2b2:	003b      	movs	r3, r7
    c2b4:	1c0a      	adds	r2, r1, #0
    c2b6:	801a      	strh	r2, [r3, #0]
WIDTH(w), HEIGHT(h)
    c2b8:	687b      	ldr	r3, [r7, #4]
    c2ba:	0018      	movs	r0, r3
    c2bc:	f7f7 f98e 	bl	35dc <_ZN5PrintC1Ev>
    c2c0:	4a1c      	ldr	r2, [pc, #112]	; (c334 <_ZN12Adafruit_GFXC1Ess+0x94>)
    c2c2:	687b      	ldr	r3, [r7, #4]
    c2c4:	601a      	str	r2, [r3, #0]
    c2c6:	687b      	ldr	r3, [r7, #4]
    c2c8:	1cba      	adds	r2, r7, #2
    c2ca:	8812      	ldrh	r2, [r2, #0]
    c2cc:	811a      	strh	r2, [r3, #8]
    c2ce:	687b      	ldr	r3, [r7, #4]
    c2d0:	003a      	movs	r2, r7
    c2d2:	8812      	ldrh	r2, [r2, #0]
    c2d4:	815a      	strh	r2, [r3, #10]
{
    _width    = WIDTH;
    c2d6:	687b      	ldr	r3, [r7, #4]
    c2d8:	2208      	movs	r2, #8
    c2da:	5e9a      	ldrsh	r2, [r3, r2]
    c2dc:	687b      	ldr	r3, [r7, #4]
    c2de:	819a      	strh	r2, [r3, #12]
    _height   = HEIGHT;
    c2e0:	687b      	ldr	r3, [r7, #4]
    c2e2:	220a      	movs	r2, #10
    c2e4:	5e9a      	ldrsh	r2, [r3, r2]
    c2e6:	687b      	ldr	r3, [r7, #4]
    c2e8:	81da      	strh	r2, [r3, #14]
    rotation  = 0;
    c2ea:	687b      	ldr	r3, [r7, #4]
    c2ec:	2200      	movs	r2, #0
    c2ee:	765a      	strb	r2, [r3, #25]
    cursor_y  = cursor_x    = 0;
    c2f0:	687b      	ldr	r3, [r7, #4]
    c2f2:	2200      	movs	r2, #0
    c2f4:	821a      	strh	r2, [r3, #16]
    c2f6:	687b      	ldr	r3, [r7, #4]
    c2f8:	2210      	movs	r2, #16
    c2fa:	5e9a      	ldrsh	r2, [r3, r2]
    c2fc:	687b      	ldr	r3, [r7, #4]
    c2fe:	825a      	strh	r2, [r3, #18]
    textsize  = 1;
    c300:	687b      	ldr	r3, [r7, #4]
    c302:	2201      	movs	r2, #1
    c304:	761a      	strb	r2, [r3, #24]
    textcolor = textbgcolor = 0xFFFF;
    c306:	687b      	ldr	r3, [r7, #4]
    c308:	2201      	movs	r2, #1
    c30a:	4252      	negs	r2, r2
    c30c:	82da      	strh	r2, [r3, #22]
    c30e:	687b      	ldr	r3, [r7, #4]
    c310:	8ada      	ldrh	r2, [r3, #22]
    c312:	687b      	ldr	r3, [r7, #4]
    c314:	829a      	strh	r2, [r3, #20]
    wrap      = true;
    c316:	687b      	ldr	r3, [r7, #4]
    c318:	2201      	movs	r2, #1
    c31a:	769a      	strb	r2, [r3, #26]
    _cp437    = false;
    c31c:	687b      	ldr	r3, [r7, #4]
    c31e:	2200      	movs	r2, #0
    c320:	76da      	strb	r2, [r3, #27]
    gfxFont   = NULL;
    c322:	687b      	ldr	r3, [r7, #4]
    c324:	2200      	movs	r2, #0
    c326:	61da      	str	r2, [r3, #28]
}
    c328:	687b      	ldr	r3, [r7, #4]
    c32a:	0018      	movs	r0, r3
    c32c:	46bd      	mov	sp, r7
    c32e:	b002      	add	sp, #8
    c330:	bd80      	pop	{r7, pc}
    c332:	46c0      	nop			; (mov r8, r8)
    c334:	00014050 	.word	0x00014050

0000c338 <_ZN12Adafruit_GFX9writeLineEsssst>:

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    c338:	b5b0      	push	{r4, r5, r7, lr}
    c33a:	b08a      	sub	sp, #40	; 0x28
    c33c:	af00      	add	r7, sp, #0
    c33e:	60f8      	str	r0, [r7, #12]
    c340:	000c      	movs	r4, r1
    c342:	0010      	movs	r0, r2
    c344:	0019      	movs	r1, r3
    c346:	230a      	movs	r3, #10
    c348:	18fb      	adds	r3, r7, r3
    c34a:	1c22      	adds	r2, r4, #0
    c34c:	801a      	strh	r2, [r3, #0]
    c34e:	2308      	movs	r3, #8
    c350:	18fb      	adds	r3, r7, r3
    c352:	1c02      	adds	r2, r0, #0
    c354:	801a      	strh	r2, [r3, #0]
    c356:	1dbb      	adds	r3, r7, #6
    c358:	1c0a      	adds	r2, r1, #0
    c35a:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    c35c:	2338      	movs	r3, #56	; 0x38
    c35e:	18fb      	adds	r3, r7, r3
    c360:	2200      	movs	r2, #0
    c362:	5e9a      	ldrsh	r2, [r3, r2]
    c364:	2308      	movs	r3, #8
    c366:	18fb      	adds	r3, r7, r3
    c368:	2100      	movs	r1, #0
    c36a:	5e5b      	ldrsh	r3, [r3, r1]
    c36c:	1ad3      	subs	r3, r2, r3
    c36e:	17d9      	asrs	r1, r3, #31
    c370:	185a      	adds	r2, r3, r1
    c372:	404a      	eors	r2, r1
    c374:	1dbb      	adds	r3, r7, #6
    c376:	2100      	movs	r1, #0
    c378:	5e59      	ldrsh	r1, [r3, r1]
    c37a:	230a      	movs	r3, #10
    c37c:	18fb      	adds	r3, r7, r3
    c37e:	2000      	movs	r0, #0
    c380:	5e1b      	ldrsh	r3, [r3, r0]
    c382:	1acb      	subs	r3, r1, r3
    c384:	17d9      	asrs	r1, r3, #31
    c386:	185b      	adds	r3, r3, r1
    c388:	404b      	eors	r3, r1
    c38a:	2101      	movs	r1, #1
    c38c:	429a      	cmp	r2, r3
    c38e:	dc01      	bgt.n	c394 <_ZN12Adafruit_GFX9writeLineEsssst+0x5c>
    c390:	2300      	movs	r3, #0
    c392:	1c19      	adds	r1, r3, #0
    c394:	b2ca      	uxtb	r2, r1
    c396:	2322      	movs	r3, #34	; 0x22
    c398:	18fb      	adds	r3, r7, r3
    c39a:	801a      	strh	r2, [r3, #0]
    if (steep) {
    c39c:	2322      	movs	r3, #34	; 0x22
    c39e:	18fb      	adds	r3, r7, r3
    c3a0:	2200      	movs	r2, #0
    c3a2:	5e9b      	ldrsh	r3, [r3, r2]
    c3a4:	2b00      	cmp	r3, #0
    c3a6:	d021      	beq.n	c3ec <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
        _swap_int16_t(x0, y0);
    c3a8:	2320      	movs	r3, #32
    c3aa:	18fb      	adds	r3, r7, r3
    c3ac:	220a      	movs	r2, #10
    c3ae:	18ba      	adds	r2, r7, r2
    c3b0:	8812      	ldrh	r2, [r2, #0]
    c3b2:	801a      	strh	r2, [r3, #0]
    c3b4:	230a      	movs	r3, #10
    c3b6:	18fb      	adds	r3, r7, r3
    c3b8:	2208      	movs	r2, #8
    c3ba:	18ba      	adds	r2, r7, r2
    c3bc:	8812      	ldrh	r2, [r2, #0]
    c3be:	801a      	strh	r2, [r3, #0]
    c3c0:	2308      	movs	r3, #8
    c3c2:	18fb      	adds	r3, r7, r3
    c3c4:	2220      	movs	r2, #32
    c3c6:	18ba      	adds	r2, r7, r2
    c3c8:	8812      	ldrh	r2, [r2, #0]
    c3ca:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
    c3cc:	231e      	movs	r3, #30
    c3ce:	18fb      	adds	r3, r7, r3
    c3d0:	1dba      	adds	r2, r7, #6
    c3d2:	8812      	ldrh	r2, [r2, #0]
    c3d4:	801a      	strh	r2, [r3, #0]
    c3d6:	1dbb      	adds	r3, r7, #6
    c3d8:	2238      	movs	r2, #56	; 0x38
    c3da:	18ba      	adds	r2, r7, r2
    c3dc:	8812      	ldrh	r2, [r2, #0]
    c3de:	801a      	strh	r2, [r3, #0]
    c3e0:	2338      	movs	r3, #56	; 0x38
    c3e2:	18fa      	adds	r2, r7, r3
    c3e4:	231e      	movs	r3, #30
    c3e6:	18fb      	adds	r3, r7, r3
    c3e8:	881b      	ldrh	r3, [r3, #0]
    c3ea:	8013      	strh	r3, [r2, #0]
    }

    if (x0 > x1) {
    c3ec:	230a      	movs	r3, #10
    c3ee:	18fa      	adds	r2, r7, r3
    c3f0:	1dbb      	adds	r3, r7, #6
    c3f2:	2100      	movs	r1, #0
    c3f4:	5e52      	ldrsh	r2, [r2, r1]
    c3f6:	2100      	movs	r1, #0
    c3f8:	5e5b      	ldrsh	r3, [r3, r1]
    c3fa:	429a      	cmp	r2, r3
    c3fc:	dd21      	ble.n	c442 <_ZN12Adafruit_GFX9writeLineEsssst+0x10a>
        _swap_int16_t(x0, x1);
    c3fe:	231c      	movs	r3, #28
    c400:	18fb      	adds	r3, r7, r3
    c402:	220a      	movs	r2, #10
    c404:	18ba      	adds	r2, r7, r2
    c406:	8812      	ldrh	r2, [r2, #0]
    c408:	801a      	strh	r2, [r3, #0]
    c40a:	230a      	movs	r3, #10
    c40c:	18fb      	adds	r3, r7, r3
    c40e:	1dba      	adds	r2, r7, #6
    c410:	8812      	ldrh	r2, [r2, #0]
    c412:	801a      	strh	r2, [r3, #0]
    c414:	1dbb      	adds	r3, r7, #6
    c416:	221c      	movs	r2, #28
    c418:	18ba      	adds	r2, r7, r2
    c41a:	8812      	ldrh	r2, [r2, #0]
    c41c:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
    c41e:	231a      	movs	r3, #26
    c420:	18fb      	adds	r3, r7, r3
    c422:	2208      	movs	r2, #8
    c424:	18ba      	adds	r2, r7, r2
    c426:	8812      	ldrh	r2, [r2, #0]
    c428:	801a      	strh	r2, [r3, #0]
    c42a:	2308      	movs	r3, #8
    c42c:	18fb      	adds	r3, r7, r3
    c42e:	2238      	movs	r2, #56	; 0x38
    c430:	18ba      	adds	r2, r7, r2
    c432:	8812      	ldrh	r2, [r2, #0]
    c434:	801a      	strh	r2, [r3, #0]
    c436:	2338      	movs	r3, #56	; 0x38
    c438:	18fa      	adds	r2, r7, r3
    c43a:	231a      	movs	r3, #26
    c43c:	18fb      	adds	r3, r7, r3
    c43e:	881b      	ldrh	r3, [r3, #0]
    c440:	8013      	strh	r3, [r2, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
    c442:	1dbb      	adds	r3, r7, #6
    c444:	881a      	ldrh	r2, [r3, #0]
    c446:	230a      	movs	r3, #10
    c448:	18fb      	adds	r3, r7, r3
    c44a:	881b      	ldrh	r3, [r3, #0]
    c44c:	1ad3      	subs	r3, r2, r3
    c44e:	b29a      	uxth	r2, r3
    c450:	2318      	movs	r3, #24
    c452:	18fb      	adds	r3, r7, r3
    c454:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
    c456:	2338      	movs	r3, #56	; 0x38
    c458:	18fb      	adds	r3, r7, r3
    c45a:	2200      	movs	r2, #0
    c45c:	5e9a      	ldrsh	r2, [r3, r2]
    c45e:	2308      	movs	r3, #8
    c460:	18fb      	adds	r3, r7, r3
    c462:	2100      	movs	r1, #0
    c464:	5e5b      	ldrsh	r3, [r3, r1]
    c466:	1ad3      	subs	r3, r2, r3
    c468:	17d9      	asrs	r1, r3, #31
    c46a:	185a      	adds	r2, r3, r1
    c46c:	404a      	eors	r2, r1
    c46e:	2316      	movs	r3, #22
    c470:	18fb      	adds	r3, r7, r3
    c472:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
    c474:	2326      	movs	r3, #38	; 0x26
    c476:	18fa      	adds	r2, r7, r3
    c478:	2318      	movs	r3, #24
    c47a:	18fb      	adds	r3, r7, r3
    c47c:	2100      	movs	r1, #0
    c47e:	5e5b      	ldrsh	r3, [r3, r1]
    c480:	2b00      	cmp	r3, #0
    c482:	da00      	bge.n	c486 <_ZN12Adafruit_GFX9writeLineEsssst+0x14e>
    c484:	3301      	adds	r3, #1
    c486:	105b      	asrs	r3, r3, #1
    c488:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
    c48a:	2308      	movs	r3, #8
    c48c:	18fb      	adds	r3, r7, r3
    c48e:	2238      	movs	r2, #56	; 0x38
    c490:	18b9      	adds	r1, r7, r2
    c492:	2200      	movs	r2, #0
    c494:	5e9a      	ldrsh	r2, [r3, r2]
    c496:	2300      	movs	r3, #0
    c498:	5ecb      	ldrsh	r3, [r1, r3]
    c49a:	429a      	cmp	r2, r3
    c49c:	da04      	bge.n	c4a8 <_ZN12Adafruit_GFX9writeLineEsssst+0x170>
        ystep = 1;
    c49e:	2324      	movs	r3, #36	; 0x24
    c4a0:	18fb      	adds	r3, r7, r3
    c4a2:	2201      	movs	r2, #1
    c4a4:	801a      	strh	r2, [r3, #0]
    c4a6:	e004      	b.n	c4b2 <_ZN12Adafruit_GFX9writeLineEsssst+0x17a>
    } else {
        ystep = -1;
    c4a8:	2324      	movs	r3, #36	; 0x24
    c4aa:	18fb      	adds	r3, r7, r3
    c4ac:	2201      	movs	r2, #1
    c4ae:	4252      	negs	r2, r2
    c4b0:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
    c4b2:	230a      	movs	r3, #10
    c4b4:	18fa      	adds	r2, r7, r3
    c4b6:	1dbb      	adds	r3, r7, #6
    c4b8:	2100      	movs	r1, #0
    c4ba:	5e52      	ldrsh	r2, [r2, r1]
    c4bc:	2100      	movs	r1, #0
    c4be:	5e5b      	ldrsh	r3, [r3, r1]
    c4c0:	429a      	cmp	r2, r3
    c4c2:	dc62      	bgt.n	c58a <_ZN12Adafruit_GFX9writeLineEsssst+0x252>
        if (steep) {
    c4c4:	2322      	movs	r3, #34	; 0x22
    c4c6:	18fb      	adds	r3, r7, r3
    c4c8:	2200      	movs	r2, #0
    c4ca:	5e9b      	ldrsh	r3, [r3, r2]
    c4cc:	2b00      	cmp	r3, #0
    c4ce:	d012      	beq.n	c4f6 <_ZN12Adafruit_GFX9writeLineEsssst+0x1be>
            writePixel(y0, x0, color);
    c4d0:	68fb      	ldr	r3, [r7, #12]
    c4d2:	681b      	ldr	r3, [r3, #0]
    c4d4:	3318      	adds	r3, #24
    c4d6:	681c      	ldr	r4, [r3, #0]
    c4d8:	233c      	movs	r3, #60	; 0x3c
    c4da:	18fb      	adds	r3, r7, r3
    c4dc:	881d      	ldrh	r5, [r3, #0]
    c4de:	230a      	movs	r3, #10
    c4e0:	18fb      	adds	r3, r7, r3
    c4e2:	2200      	movs	r2, #0
    c4e4:	5e9a      	ldrsh	r2, [r3, r2]
    c4e6:	2308      	movs	r3, #8
    c4e8:	18fb      	adds	r3, r7, r3
    c4ea:	2100      	movs	r1, #0
    c4ec:	5e59      	ldrsh	r1, [r3, r1]
    c4ee:	68f8      	ldr	r0, [r7, #12]
    c4f0:	002b      	movs	r3, r5
    c4f2:	47a0      	blx	r4
    c4f4:	e011      	b.n	c51a <_ZN12Adafruit_GFX9writeLineEsssst+0x1e2>
        } else {
            writePixel(x0, y0, color);
    c4f6:	68fb      	ldr	r3, [r7, #12]
    c4f8:	681b      	ldr	r3, [r3, #0]
    c4fa:	3318      	adds	r3, #24
    c4fc:	681c      	ldr	r4, [r3, #0]
    c4fe:	233c      	movs	r3, #60	; 0x3c
    c500:	18fb      	adds	r3, r7, r3
    c502:	881d      	ldrh	r5, [r3, #0]
    c504:	2308      	movs	r3, #8
    c506:	18fb      	adds	r3, r7, r3
    c508:	2200      	movs	r2, #0
    c50a:	5e9a      	ldrsh	r2, [r3, r2]
    c50c:	230a      	movs	r3, #10
    c50e:	18fb      	adds	r3, r7, r3
    c510:	2100      	movs	r1, #0
    c512:	5e59      	ldrsh	r1, [r3, r1]
    c514:	68f8      	ldr	r0, [r7, #12]
    c516:	002b      	movs	r3, r5
    c518:	47a0      	blx	r4
        }
        err -= dy;
    c51a:	2326      	movs	r3, #38	; 0x26
    c51c:	18fb      	adds	r3, r7, r3
    c51e:	881a      	ldrh	r2, [r3, #0]
    c520:	2316      	movs	r3, #22
    c522:	18fb      	adds	r3, r7, r3
    c524:	881b      	ldrh	r3, [r3, #0]
    c526:	1ad3      	subs	r3, r2, r3
    c528:	b29a      	uxth	r2, r3
    c52a:	2326      	movs	r3, #38	; 0x26
    c52c:	18fb      	adds	r3, r7, r3
    c52e:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
    c530:	2326      	movs	r3, #38	; 0x26
    c532:	18fb      	adds	r3, r7, r3
    c534:	2200      	movs	r2, #0
    c536:	5e9b      	ldrsh	r3, [r3, r2]
    c538:	2b00      	cmp	r3, #0
    c53a:	da15      	bge.n	c568 <_ZN12Adafruit_GFX9writeLineEsssst+0x230>
            y0 += ystep;
    c53c:	2308      	movs	r3, #8
    c53e:	18fb      	adds	r3, r7, r3
    c540:	881a      	ldrh	r2, [r3, #0]
    c542:	2324      	movs	r3, #36	; 0x24
    c544:	18fb      	adds	r3, r7, r3
    c546:	881b      	ldrh	r3, [r3, #0]
    c548:	18d3      	adds	r3, r2, r3
    c54a:	b29a      	uxth	r2, r3
    c54c:	2308      	movs	r3, #8
    c54e:	18fb      	adds	r3, r7, r3
    c550:	801a      	strh	r2, [r3, #0]
            err += dx;
    c552:	2326      	movs	r3, #38	; 0x26
    c554:	18fb      	adds	r3, r7, r3
    c556:	881a      	ldrh	r2, [r3, #0]
    c558:	2318      	movs	r3, #24
    c55a:	18fb      	adds	r3, r7, r3
    c55c:	881b      	ldrh	r3, [r3, #0]
    c55e:	18d3      	adds	r3, r2, r3
    c560:	b29a      	uxth	r2, r3
    c562:	2326      	movs	r3, #38	; 0x26
    c564:	18fb      	adds	r3, r7, r3
    c566:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
    c568:	230a      	movs	r3, #10
    c56a:	18fb      	adds	r3, r7, r3
    c56c:	2200      	movs	r2, #0
    c56e:	5e9b      	ldrsh	r3, [r3, r2]
    c570:	b29b      	uxth	r3, r3
    c572:	3301      	adds	r3, #1
    c574:	b29a      	uxth	r2, r3
    c576:	230a      	movs	r3, #10
    c578:	18fb      	adds	r3, r7, r3
    c57a:	801a      	strh	r2, [r3, #0]
    c57c:	2324      	movs	r3, #36	; 0x24
    c57e:	18fb      	adds	r3, r7, r3
    c580:	2224      	movs	r2, #36	; 0x24
    c582:	18ba      	adds	r2, r7, r2
    c584:	8812      	ldrh	r2, [r2, #0]
    c586:	801a      	strh	r2, [r3, #0]
    c588:	e793      	b.n	c4b2 <_ZN12Adafruit_GFX9writeLineEsssst+0x17a>
        }
    }
}
    c58a:	46c0      	nop			; (mov r8, r8)
    c58c:	46bd      	mov	sp, r7
    c58e:	b00a      	add	sp, #40	; 0x28
    c590:	bdb0      	pop	{r4, r5, r7, pc}

0000c592 <_ZN12Adafruit_GFX10startWriteEv>:

void Adafruit_GFX::startWrite(){
    c592:	b580      	push	{r7, lr}
    c594:	b082      	sub	sp, #8
    c596:	af00      	add	r7, sp, #0
    c598:	6078      	str	r0, [r7, #4]
    // Overwrite in subclasses if desired!
}
    c59a:	46c0      	nop			; (mov r8, r8)
    c59c:	46bd      	mov	sp, r7
    c59e:	b002      	add	sp, #8
    c5a0:	bd80      	pop	{r7, pc}

0000c5a2 <_ZN12Adafruit_GFX10writePixelEsst>:

void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    c5a2:	b5b0      	push	{r4, r5, r7, lr}
    c5a4:	b084      	sub	sp, #16
    c5a6:	af00      	add	r7, sp, #0
    c5a8:	60f8      	str	r0, [r7, #12]
    c5aa:	000c      	movs	r4, r1
    c5ac:	0010      	movs	r0, r2
    c5ae:	0019      	movs	r1, r3
    c5b0:	230a      	movs	r3, #10
    c5b2:	18fb      	adds	r3, r7, r3
    c5b4:	1c22      	adds	r2, r4, #0
    c5b6:	801a      	strh	r2, [r3, #0]
    c5b8:	2308      	movs	r3, #8
    c5ba:	18fb      	adds	r3, r7, r3
    c5bc:	1c02      	adds	r2, r0, #0
    c5be:	801a      	strh	r2, [r3, #0]
    c5c0:	1dbb      	adds	r3, r7, #6
    c5c2:	1c0a      	adds	r2, r1, #0
    c5c4:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    c5c6:	68fb      	ldr	r3, [r7, #12]
    c5c8:	681b      	ldr	r3, [r3, #0]
    c5ca:	3310      	adds	r3, #16
    c5cc:	681c      	ldr	r4, [r3, #0]
    c5ce:	1dbb      	adds	r3, r7, #6
    c5d0:	881d      	ldrh	r5, [r3, #0]
    c5d2:	2308      	movs	r3, #8
    c5d4:	18fb      	adds	r3, r7, r3
    c5d6:	2200      	movs	r2, #0
    c5d8:	5e9a      	ldrsh	r2, [r3, r2]
    c5da:	230a      	movs	r3, #10
    c5dc:	18fb      	adds	r3, r7, r3
    c5de:	2100      	movs	r1, #0
    c5e0:	5e59      	ldrsh	r1, [r3, r1]
    c5e2:	68f8      	ldr	r0, [r7, #12]
    c5e4:	002b      	movs	r3, r5
    c5e6:	47a0      	blx	r4
}
    c5e8:	46c0      	nop			; (mov r8, r8)
    c5ea:	46bd      	mov	sp, r7
    c5ec:	b004      	add	sp, #16
    c5ee:	bdb0      	pop	{r4, r5, r7, pc}

0000c5f0 <_ZN12Adafruit_GFX14writeFastVLineEssst>:

// (x,y) is topmost point; if unsure, calling function
// should sort endpoints or call writeLine() instead
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    c5f0:	b5b0      	push	{r4, r5, r7, lr}
    c5f2:	b086      	sub	sp, #24
    c5f4:	af02      	add	r7, sp, #8
    c5f6:	60f8      	str	r0, [r7, #12]
    c5f8:	000c      	movs	r4, r1
    c5fa:	0010      	movs	r0, r2
    c5fc:	0019      	movs	r1, r3
    c5fe:	230a      	movs	r3, #10
    c600:	18fb      	adds	r3, r7, r3
    c602:	1c22      	adds	r2, r4, #0
    c604:	801a      	strh	r2, [r3, #0]
    c606:	2308      	movs	r3, #8
    c608:	18fb      	adds	r3, r7, r3
    c60a:	1c02      	adds	r2, r0, #0
    c60c:	801a      	strh	r2, [r3, #0]
    c60e:	1dbb      	adds	r3, r7, #6
    c610:	1c0a      	adds	r2, r1, #0
    c612:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    c614:	68fb      	ldr	r3, [r7, #12]
    c616:	681b      	ldr	r3, [r3, #0]
    c618:	3338      	adds	r3, #56	; 0x38
    c61a:	681c      	ldr	r4, [r3, #0]
    c61c:	1dbb      	adds	r3, r7, #6
    c61e:	2500      	movs	r5, #0
    c620:	5f5d      	ldrsh	r5, [r3, r5]
    c622:	2308      	movs	r3, #8
    c624:	18fb      	adds	r3, r7, r3
    c626:	2200      	movs	r2, #0
    c628:	5e9a      	ldrsh	r2, [r3, r2]
    c62a:	230a      	movs	r3, #10
    c62c:	18fb      	adds	r3, r7, r3
    c62e:	2100      	movs	r1, #0
    c630:	5e59      	ldrsh	r1, [r3, r1]
    c632:	68f8      	ldr	r0, [r7, #12]
    c634:	2320      	movs	r3, #32
    c636:	18fb      	adds	r3, r7, r3
    c638:	881b      	ldrh	r3, [r3, #0]
    c63a:	9300      	str	r3, [sp, #0]
    c63c:	002b      	movs	r3, r5
    c63e:	47a0      	blx	r4
}
    c640:	46c0      	nop			; (mov r8, r8)
    c642:	46bd      	mov	sp, r7
    c644:	b004      	add	sp, #16
    c646:	bdb0      	pop	{r4, r5, r7, pc}

0000c648 <_ZN12Adafruit_GFX14writeFastHLineEssst>:

// (x,y) is leftmost point; if unsure, calling function
// should sort endpoints or call writeLine() instead
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    c648:	b5b0      	push	{r4, r5, r7, lr}
    c64a:	b086      	sub	sp, #24
    c64c:	af02      	add	r7, sp, #8
    c64e:	60f8      	str	r0, [r7, #12]
    c650:	000c      	movs	r4, r1
    c652:	0010      	movs	r0, r2
    c654:	0019      	movs	r1, r3
    c656:	230a      	movs	r3, #10
    c658:	18fb      	adds	r3, r7, r3
    c65a:	1c22      	adds	r2, r4, #0
    c65c:	801a      	strh	r2, [r3, #0]
    c65e:	2308      	movs	r3, #8
    c660:	18fb      	adds	r3, r7, r3
    c662:	1c02      	adds	r2, r0, #0
    c664:	801a      	strh	r2, [r3, #0]
    c666:	1dbb      	adds	r3, r7, #6
    c668:	1c0a      	adds	r2, r1, #0
    c66a:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    c66c:	68fb      	ldr	r3, [r7, #12]
    c66e:	681b      	ldr	r3, [r3, #0]
    c670:	333c      	adds	r3, #60	; 0x3c
    c672:	681c      	ldr	r4, [r3, #0]
    c674:	1dbb      	adds	r3, r7, #6
    c676:	2500      	movs	r5, #0
    c678:	5f5d      	ldrsh	r5, [r3, r5]
    c67a:	2308      	movs	r3, #8
    c67c:	18fb      	adds	r3, r7, r3
    c67e:	2200      	movs	r2, #0
    c680:	5e9a      	ldrsh	r2, [r3, r2]
    c682:	230a      	movs	r3, #10
    c684:	18fb      	adds	r3, r7, r3
    c686:	2100      	movs	r1, #0
    c688:	5e59      	ldrsh	r1, [r3, r1]
    c68a:	68f8      	ldr	r0, [r7, #12]
    c68c:	2320      	movs	r3, #32
    c68e:	18fb      	adds	r3, r7, r3
    c690:	881b      	ldrh	r3, [r3, #0]
    c692:	9300      	str	r3, [sp, #0]
    c694:	002b      	movs	r3, r5
    c696:	47a0      	blx	r4
}
    c698:	46c0      	nop			; (mov r8, r8)
    c69a:	46bd      	mov	sp, r7
    c69c:	b004      	add	sp, #16
    c69e:	bdb0      	pop	{r4, r5, r7, pc}

0000c6a0 <_ZN12Adafruit_GFX13writeFillRectEsssst>:

void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    c6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6a2:	b087      	sub	sp, #28
    c6a4:	af02      	add	r7, sp, #8
    c6a6:	60f8      	str	r0, [r7, #12]
    c6a8:	000c      	movs	r4, r1
    c6aa:	0010      	movs	r0, r2
    c6ac:	0019      	movs	r1, r3
    c6ae:	230a      	movs	r3, #10
    c6b0:	18fb      	adds	r3, r7, r3
    c6b2:	1c22      	adds	r2, r4, #0
    c6b4:	801a      	strh	r2, [r3, #0]
    c6b6:	2308      	movs	r3, #8
    c6b8:	18fb      	adds	r3, r7, r3
    c6ba:	1c02      	adds	r2, r0, #0
    c6bc:	801a      	strh	r2, [r3, #0]
    c6be:	1dbb      	adds	r3, r7, #6
    c6c0:	1c0a      	adds	r2, r1, #0
    c6c2:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    c6c4:	68fb      	ldr	r3, [r7, #12]
    c6c6:	681b      	ldr	r3, [r3, #0]
    c6c8:	3340      	adds	r3, #64	; 0x40
    c6ca:	681c      	ldr	r4, [r3, #0]
    c6cc:	1dbb      	adds	r3, r7, #6
    c6ce:	2500      	movs	r5, #0
    c6d0:	5f5d      	ldrsh	r5, [r3, r5]
    c6d2:	2308      	movs	r3, #8
    c6d4:	18fb      	adds	r3, r7, r3
    c6d6:	2200      	movs	r2, #0
    c6d8:	5e9a      	ldrsh	r2, [r3, r2]
    c6da:	230a      	movs	r3, #10
    c6dc:	18fb      	adds	r3, r7, r3
    c6de:	2100      	movs	r1, #0
    c6e0:	5e59      	ldrsh	r1, [r3, r1]
    c6e2:	68f8      	ldr	r0, [r7, #12]
    c6e4:	2324      	movs	r3, #36	; 0x24
    c6e6:	2608      	movs	r6, #8
    c6e8:	46b4      	mov	ip, r6
    c6ea:	44bc      	add	ip, r7
    c6ec:	4463      	add	r3, ip
    c6ee:	881b      	ldrh	r3, [r3, #0]
    c6f0:	9301      	str	r3, [sp, #4]
    c6f2:	2320      	movs	r3, #32
    c6f4:	2608      	movs	r6, #8
    c6f6:	46b4      	mov	ip, r6
    c6f8:	44bc      	add	ip, r7
    c6fa:	4463      	add	r3, ip
    c6fc:	2600      	movs	r6, #0
    c6fe:	5f9b      	ldrsh	r3, [r3, r6]
    c700:	9300      	str	r3, [sp, #0]
    c702:	002b      	movs	r3, r5
    c704:	47a0      	blx	r4
}
    c706:	46c0      	nop			; (mov r8, r8)
    c708:	46bd      	mov	sp, r7
    c70a:	b005      	add	sp, #20
    c70c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c70e <_ZN12Adafruit_GFX8endWriteEv>:

void Adafruit_GFX::endWrite(){
    c70e:	b580      	push	{r7, lr}
    c710:	b082      	sub	sp, #8
    c712:	af00      	add	r7, sp, #0
    c714:	6078      	str	r0, [r7, #4]
    // Overwrite in subclasses if startWrite is defined!
}
    c716:	46c0      	nop			; (mov r8, r8)
    c718:	46bd      	mov	sp, r7
    c71a:	b002      	add	sp, #8
    c71c:	bd80      	pop	{r7, pc}

0000c71e <_ZN12Adafruit_GFX13drawFastVLineEssst>:

// (x,y) is topmost point; if unsure, calling function
// should sort endpoints or call drawLine() instead
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    c71e:	b5f0      	push	{r4, r5, r6, r7, lr}
    c720:	b087      	sub	sp, #28
    c722:	af02      	add	r7, sp, #8
    c724:	60f8      	str	r0, [r7, #12]
    c726:	000c      	movs	r4, r1
    c728:	0010      	movs	r0, r2
    c72a:	0019      	movs	r1, r3
    c72c:	230a      	movs	r3, #10
    c72e:	18fb      	adds	r3, r7, r3
    c730:	1c22      	adds	r2, r4, #0
    c732:	801a      	strh	r2, [r3, #0]
    c734:	2308      	movs	r3, #8
    c736:	18fb      	adds	r3, r7, r3
    c738:	1c02      	adds	r2, r0, #0
    c73a:	801a      	strh	r2, [r3, #0]
    c73c:	1dbb      	adds	r3, r7, #6
    c73e:	1c0a      	adds	r2, r1, #0
    c740:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c742:	68fb      	ldr	r3, [r7, #12]
    c744:	681b      	ldr	r3, [r3, #0]
    c746:	3314      	adds	r3, #20
    c748:	681b      	ldr	r3, [r3, #0]
    c74a:	68fa      	ldr	r2, [r7, #12]
    c74c:	0010      	movs	r0, r2
    c74e:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
    c750:	68fb      	ldr	r3, [r7, #12]
    c752:	681b      	ldr	r3, [r3, #0]
    c754:	3328      	adds	r3, #40	; 0x28
    c756:	681c      	ldr	r4, [r3, #0]
    c758:	2308      	movs	r3, #8
    c75a:	18fb      	adds	r3, r7, r3
    c75c:	881a      	ldrh	r2, [r3, #0]
    c75e:	1dbb      	adds	r3, r7, #6
    c760:	881b      	ldrh	r3, [r3, #0]
    c762:	18d3      	adds	r3, r2, r3
    c764:	b29b      	uxth	r3, r3
    c766:	3b01      	subs	r3, #1
    c768:	b29b      	uxth	r3, r3
    c76a:	b21b      	sxth	r3, r3
    c76c:	220a      	movs	r2, #10
    c76e:	18ba      	adds	r2, r7, r2
    c770:	2600      	movs	r6, #0
    c772:	5f96      	ldrsh	r6, [r2, r6]
    c774:	2208      	movs	r2, #8
    c776:	18ba      	adds	r2, r7, r2
    c778:	2500      	movs	r5, #0
    c77a:	5f55      	ldrsh	r5, [r2, r5]
    c77c:	220a      	movs	r2, #10
    c77e:	18ba      	adds	r2, r7, r2
    c780:	2100      	movs	r1, #0
    c782:	5e51      	ldrsh	r1, [r2, r1]
    c784:	68f8      	ldr	r0, [r7, #12]
    c786:	2228      	movs	r2, #40	; 0x28
    c788:	18ba      	adds	r2, r7, r2
    c78a:	8812      	ldrh	r2, [r2, #0]
    c78c:	9201      	str	r2, [sp, #4]
    c78e:	9300      	str	r3, [sp, #0]
    c790:	0033      	movs	r3, r6
    c792:	002a      	movs	r2, r5
    c794:	47a0      	blx	r4
    endWrite();
    c796:	68fb      	ldr	r3, [r7, #12]
    c798:	681b      	ldr	r3, [r3, #0]
    c79a:	332c      	adds	r3, #44	; 0x2c
    c79c:	681b      	ldr	r3, [r3, #0]
    c79e:	68fa      	ldr	r2, [r7, #12]
    c7a0:	0010      	movs	r0, r2
    c7a2:	4798      	blx	r3
}
    c7a4:	46c0      	nop			; (mov r8, r8)
    c7a6:	46bd      	mov	sp, r7
    c7a8:	b005      	add	sp, #20
    c7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c7ac <_ZN12Adafruit_GFX13drawFastHLineEssst>:

// (x,y) is leftmost point; if unsure, calling function
// should sort endpoints or call drawLine() instead
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7ae:	b087      	sub	sp, #28
    c7b0:	af02      	add	r7, sp, #8
    c7b2:	60f8      	str	r0, [r7, #12]
    c7b4:	000c      	movs	r4, r1
    c7b6:	0010      	movs	r0, r2
    c7b8:	0019      	movs	r1, r3
    c7ba:	230a      	movs	r3, #10
    c7bc:	18fb      	adds	r3, r7, r3
    c7be:	1c22      	adds	r2, r4, #0
    c7c0:	801a      	strh	r2, [r3, #0]
    c7c2:	2308      	movs	r3, #8
    c7c4:	18fb      	adds	r3, r7, r3
    c7c6:	1c02      	adds	r2, r0, #0
    c7c8:	801a      	strh	r2, [r3, #0]
    c7ca:	1dbb      	adds	r3, r7, #6
    c7cc:	1c0a      	adds	r2, r1, #0
    c7ce:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c7d0:	68fb      	ldr	r3, [r7, #12]
    c7d2:	681b      	ldr	r3, [r3, #0]
    c7d4:	3314      	adds	r3, #20
    c7d6:	681b      	ldr	r3, [r3, #0]
    c7d8:	68fa      	ldr	r2, [r7, #12]
    c7da:	0010      	movs	r0, r2
    c7dc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
    c7de:	68fb      	ldr	r3, [r7, #12]
    c7e0:	681b      	ldr	r3, [r3, #0]
    c7e2:	3328      	adds	r3, #40	; 0x28
    c7e4:	681c      	ldr	r4, [r3, #0]
    c7e6:	230a      	movs	r3, #10
    c7e8:	18fb      	adds	r3, r7, r3
    c7ea:	881a      	ldrh	r2, [r3, #0]
    c7ec:	1dbb      	adds	r3, r7, #6
    c7ee:	881b      	ldrh	r3, [r3, #0]
    c7f0:	18d3      	adds	r3, r2, r3
    c7f2:	b29b      	uxth	r3, r3
    c7f4:	3b01      	subs	r3, #1
    c7f6:	b29b      	uxth	r3, r3
    c7f8:	b21d      	sxth	r5, r3
    c7fa:	2308      	movs	r3, #8
    c7fc:	18fb      	adds	r3, r7, r3
    c7fe:	2200      	movs	r2, #0
    c800:	5e9a      	ldrsh	r2, [r3, r2]
    c802:	230a      	movs	r3, #10
    c804:	18fb      	adds	r3, r7, r3
    c806:	2100      	movs	r1, #0
    c808:	5e59      	ldrsh	r1, [r3, r1]
    c80a:	68f8      	ldr	r0, [r7, #12]
    c80c:	2320      	movs	r3, #32
    c80e:	2608      	movs	r6, #8
    c810:	46b4      	mov	ip, r6
    c812:	44bc      	add	ip, r7
    c814:	4463      	add	r3, ip
    c816:	881b      	ldrh	r3, [r3, #0]
    c818:	9301      	str	r3, [sp, #4]
    c81a:	2308      	movs	r3, #8
    c81c:	18fb      	adds	r3, r7, r3
    c81e:	2600      	movs	r6, #0
    c820:	5f9b      	ldrsh	r3, [r3, r6]
    c822:	9300      	str	r3, [sp, #0]
    c824:	002b      	movs	r3, r5
    c826:	47a0      	blx	r4
    endWrite();
    c828:	68fb      	ldr	r3, [r7, #12]
    c82a:	681b      	ldr	r3, [r3, #0]
    c82c:	332c      	adds	r3, #44	; 0x2c
    c82e:	681b      	ldr	r3, [r3, #0]
    c830:	68fa      	ldr	r2, [r7, #12]
    c832:	0010      	movs	r0, r2
    c834:	4798      	blx	r3
}
    c836:	46c0      	nop			; (mov r8, r8)
    c838:	46bd      	mov	sp, r7
    c83a:	b005      	add	sp, #20
    c83c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c83e <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    c83e:	b5b0      	push	{r4, r5, r7, lr}
    c840:	b088      	sub	sp, #32
    c842:	af02      	add	r7, sp, #8
    c844:	60f8      	str	r0, [r7, #12]
    c846:	000c      	movs	r4, r1
    c848:	0010      	movs	r0, r2
    c84a:	0019      	movs	r1, r3
    c84c:	230a      	movs	r3, #10
    c84e:	18fb      	adds	r3, r7, r3
    c850:	1c22      	adds	r2, r4, #0
    c852:	801a      	strh	r2, [r3, #0]
    c854:	2308      	movs	r3, #8
    c856:	18fb      	adds	r3, r7, r3
    c858:	1c02      	adds	r2, r0, #0
    c85a:	801a      	strh	r2, [r3, #0]
    c85c:	1dbb      	adds	r3, r7, #6
    c85e:	1c0a      	adds	r2, r1, #0
    c860:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c862:	68fb      	ldr	r3, [r7, #12]
    c864:	681b      	ldr	r3, [r3, #0]
    c866:	3314      	adds	r3, #20
    c868:	681b      	ldr	r3, [r3, #0]
    c86a:	68fa      	ldr	r2, [r7, #12]
    c86c:	0010      	movs	r0, r2
    c86e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
    c870:	2316      	movs	r3, #22
    c872:	18fb      	adds	r3, r7, r3
    c874:	220a      	movs	r2, #10
    c876:	18ba      	adds	r2, r7, r2
    c878:	8812      	ldrh	r2, [r2, #0]
    c87a:	801a      	strh	r2, [r3, #0]
    c87c:	2316      	movs	r3, #22
    c87e:	18fb      	adds	r3, r7, r3
    c880:	2200      	movs	r2, #0
    c882:	5e9a      	ldrsh	r2, [r3, r2]
    c884:	230a      	movs	r3, #10
    c886:	18fb      	adds	r3, r7, r3
    c888:	2100      	movs	r1, #0
    c88a:	5e59      	ldrsh	r1, [r3, r1]
    c88c:	1dbb      	adds	r3, r7, #6
    c88e:	2000      	movs	r0, #0
    c890:	5e1b      	ldrsh	r3, [r3, r0]
    c892:	18cb      	adds	r3, r1, r3
    c894:	429a      	cmp	r2, r3
    c896:	da21      	bge.n	c8dc <_ZN12Adafruit_GFX8fillRectEsssst+0x9e>
        writeFastVLine(i, y, h, color);
    c898:	68fb      	ldr	r3, [r7, #12]
    c89a:	681b      	ldr	r3, [r3, #0]
    c89c:	3320      	adds	r3, #32
    c89e:	681c      	ldr	r4, [r3, #0]
    c8a0:	2328      	movs	r3, #40	; 0x28
    c8a2:	18fb      	adds	r3, r7, r3
    c8a4:	2500      	movs	r5, #0
    c8a6:	5f5d      	ldrsh	r5, [r3, r5]
    c8a8:	2308      	movs	r3, #8
    c8aa:	18fb      	adds	r3, r7, r3
    c8ac:	2200      	movs	r2, #0
    c8ae:	5e9a      	ldrsh	r2, [r3, r2]
    c8b0:	2316      	movs	r3, #22
    c8b2:	18fb      	adds	r3, r7, r3
    c8b4:	2100      	movs	r1, #0
    c8b6:	5e59      	ldrsh	r1, [r3, r1]
    c8b8:	68f8      	ldr	r0, [r7, #12]
    c8ba:	232c      	movs	r3, #44	; 0x2c
    c8bc:	18fb      	adds	r3, r7, r3
    c8be:	881b      	ldrh	r3, [r3, #0]
    c8c0:	9300      	str	r3, [sp, #0]
    c8c2:	002b      	movs	r3, r5
    c8c4:	47a0      	blx	r4
    for (int16_t i=x; i<x+w; i++) {
    c8c6:	2316      	movs	r3, #22
    c8c8:	18fb      	adds	r3, r7, r3
    c8ca:	2200      	movs	r2, #0
    c8cc:	5e9b      	ldrsh	r3, [r3, r2]
    c8ce:	b29b      	uxth	r3, r3
    c8d0:	3301      	adds	r3, #1
    c8d2:	b29a      	uxth	r2, r3
    c8d4:	2316      	movs	r3, #22
    c8d6:	18fb      	adds	r3, r7, r3
    c8d8:	801a      	strh	r2, [r3, #0]
    c8da:	e7cf      	b.n	c87c <_ZN12Adafruit_GFX8fillRectEsssst+0x3e>
    }
    endWrite();
    c8dc:	68fb      	ldr	r3, [r7, #12]
    c8de:	681b      	ldr	r3, [r3, #0]
    c8e0:	332c      	adds	r3, #44	; 0x2c
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	68fa      	ldr	r2, [r7, #12]
    c8e6:	0010      	movs	r0, r2
    c8e8:	4798      	blx	r3
}
    c8ea:	46c0      	nop			; (mov r8, r8)
    c8ec:	46bd      	mov	sp, r7
    c8ee:	b006      	add	sp, #24
    c8f0:	bdb0      	pop	{r4, r5, r7, pc}

0000c8f2 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
    c8f2:	b590      	push	{r4, r7, lr}
    c8f4:	b085      	sub	sp, #20
    c8f6:	af02      	add	r7, sp, #8
    c8f8:	6078      	str	r0, [r7, #4]
    c8fa:	000a      	movs	r2, r1
    c8fc:	1cbb      	adds	r3, r7, #2
    c8fe:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    fillRect(0, 0, _width, _height, color);
    c900:	687b      	ldr	r3, [r7, #4]
    c902:	681b      	ldr	r3, [r3, #0]
    c904:	3340      	adds	r3, #64	; 0x40
    c906:	681c      	ldr	r4, [r3, #0]
    c908:	687b      	ldr	r3, [r7, #4]
    c90a:	210c      	movs	r1, #12
    c90c:	5e59      	ldrsh	r1, [r3, r1]
    c90e:	687b      	ldr	r3, [r7, #4]
    c910:	220e      	movs	r2, #14
    c912:	5e9b      	ldrsh	r3, [r3, r2]
    c914:	6878      	ldr	r0, [r7, #4]
    c916:	1cba      	adds	r2, r7, #2
    c918:	8812      	ldrh	r2, [r2, #0]
    c91a:	9201      	str	r2, [sp, #4]
    c91c:	9300      	str	r3, [sp, #0]
    c91e:	000b      	movs	r3, r1
    c920:	2200      	movs	r2, #0
    c922:	2100      	movs	r1, #0
    c924:	47a0      	blx	r4
}
    c926:	46c0      	nop			; (mov r8, r8)
    c928:	46bd      	mov	sp, r7
    c92a:	b003      	add	sp, #12
    c92c:	bd90      	pop	{r4, r7, pc}

0000c92e <_ZN12Adafruit_GFX8drawLineEsssst>:

void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    c92e:	b5f0      	push	{r4, r5, r6, r7, lr}
    c930:	b089      	sub	sp, #36	; 0x24
    c932:	af02      	add	r7, sp, #8
    c934:	60f8      	str	r0, [r7, #12]
    c936:	000c      	movs	r4, r1
    c938:	0010      	movs	r0, r2
    c93a:	0019      	movs	r1, r3
    c93c:	230a      	movs	r3, #10
    c93e:	18fb      	adds	r3, r7, r3
    c940:	1c22      	adds	r2, r4, #0
    c942:	801a      	strh	r2, [r3, #0]
    c944:	2308      	movs	r3, #8
    c946:	18fb      	adds	r3, r7, r3
    c948:	1c02      	adds	r2, r0, #0
    c94a:	801a      	strh	r2, [r3, #0]
    c94c:	1dbb      	adds	r3, r7, #6
    c94e:	1c0a      	adds	r2, r1, #0
    c950:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    if(x0 == x1){
    c952:	230a      	movs	r3, #10
    c954:	18fa      	adds	r2, r7, r3
    c956:	1dbb      	adds	r3, r7, #6
    c958:	2100      	movs	r1, #0
    c95a:	5e52      	ldrsh	r2, [r2, r1]
    c95c:	2100      	movs	r1, #0
    c95e:	5e5b      	ldrsh	r3, [r3, r1]
    c960:	429a      	cmp	r2, r3
    c962:	d147      	bne.n	c9f4 <_ZN12Adafruit_GFX8drawLineEsssst+0xc6>
        if(y0 > y1) _swap_int16_t(y0, y1);
    c964:	2308      	movs	r3, #8
    c966:	18fb      	adds	r3, r7, r3
    c968:	2228      	movs	r2, #40	; 0x28
    c96a:	2108      	movs	r1, #8
    c96c:	1879      	adds	r1, r7, r1
    c96e:	1889      	adds	r1, r1, r2
    c970:	2200      	movs	r2, #0
    c972:	5e9a      	ldrsh	r2, [r3, r2]
    c974:	2300      	movs	r3, #0
    c976:	5ecb      	ldrsh	r3, [r1, r3]
    c978:	429a      	cmp	r2, r3
    c97a:	dd16      	ble.n	c9aa <_ZN12Adafruit_GFX8drawLineEsssst+0x7c>
    c97c:	2316      	movs	r3, #22
    c97e:	18fb      	adds	r3, r7, r3
    c980:	2208      	movs	r2, #8
    c982:	18ba      	adds	r2, r7, r2
    c984:	8812      	ldrh	r2, [r2, #0]
    c986:	801a      	strh	r2, [r3, #0]
    c988:	2308      	movs	r3, #8
    c98a:	18fb      	adds	r3, r7, r3
    c98c:	2228      	movs	r2, #40	; 0x28
    c98e:	2108      	movs	r1, #8
    c990:	468c      	mov	ip, r1
    c992:	44bc      	add	ip, r7
    c994:	4462      	add	r2, ip
    c996:	8812      	ldrh	r2, [r2, #0]
    c998:	801a      	strh	r2, [r3, #0]
    c99a:	2328      	movs	r3, #40	; 0x28
    c99c:	2208      	movs	r2, #8
    c99e:	18ba      	adds	r2, r7, r2
    c9a0:	18d2      	adds	r2, r2, r3
    c9a2:	2316      	movs	r3, #22
    c9a4:	18fb      	adds	r3, r7, r3
    c9a6:	881b      	ldrh	r3, [r3, #0]
    c9a8:	8013      	strh	r3, [r2, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    c9aa:	68fb      	ldr	r3, [r7, #12]
    c9ac:	681b      	ldr	r3, [r3, #0]
    c9ae:	3338      	adds	r3, #56	; 0x38
    c9b0:	681c      	ldr	r4, [r3, #0]
    c9b2:	2328      	movs	r3, #40	; 0x28
    c9b4:	2208      	movs	r2, #8
    c9b6:	4694      	mov	ip, r2
    c9b8:	44bc      	add	ip, r7
    c9ba:	4463      	add	r3, ip
    c9bc:	881a      	ldrh	r2, [r3, #0]
    c9be:	2308      	movs	r3, #8
    c9c0:	18fb      	adds	r3, r7, r3
    c9c2:	881b      	ldrh	r3, [r3, #0]
    c9c4:	1ad3      	subs	r3, r2, r3
    c9c6:	b29b      	uxth	r3, r3
    c9c8:	3301      	adds	r3, #1
    c9ca:	b29b      	uxth	r3, r3
    c9cc:	b21d      	sxth	r5, r3
    c9ce:	2308      	movs	r3, #8
    c9d0:	18fb      	adds	r3, r7, r3
    c9d2:	2200      	movs	r2, #0
    c9d4:	5e9a      	ldrsh	r2, [r3, r2]
    c9d6:	230a      	movs	r3, #10
    c9d8:	18fb      	adds	r3, r7, r3
    c9da:	2100      	movs	r1, #0
    c9dc:	5e59      	ldrsh	r1, [r3, r1]
    c9de:	68f8      	ldr	r0, [r7, #12]
    c9e0:	232c      	movs	r3, #44	; 0x2c
    c9e2:	2608      	movs	r6, #8
    c9e4:	46b4      	mov	ip, r6
    c9e6:	44bc      	add	ip, r7
    c9e8:	4463      	add	r3, ip
    c9ea:	881b      	ldrh	r3, [r3, #0]
    c9ec:	9300      	str	r3, [sp, #0]
    c9ee:	002b      	movs	r3, r5
    c9f0:	47a0      	blx	r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
    c9f2:	e074      	b.n	cade <_ZN12Adafruit_GFX8drawLineEsssst+0x1b0>
    } else if(y0 == y1){
    c9f4:	2308      	movs	r3, #8
    c9f6:	18fb      	adds	r3, r7, r3
    c9f8:	2228      	movs	r2, #40	; 0x28
    c9fa:	2108      	movs	r1, #8
    c9fc:	1879      	adds	r1, r7, r1
    c9fe:	1889      	adds	r1, r1, r2
    ca00:	2200      	movs	r2, #0
    ca02:	5e9a      	ldrsh	r2, [r3, r2]
    ca04:	2300      	movs	r3, #0
    ca06:	5ecb      	ldrsh	r3, [r1, r3]
    ca08:	429a      	cmp	r2, r3
    ca0a:	d139      	bne.n	ca80 <_ZN12Adafruit_GFX8drawLineEsssst+0x152>
        if(x0 > x1) _swap_int16_t(x0, x1);
    ca0c:	230a      	movs	r3, #10
    ca0e:	18fa      	adds	r2, r7, r3
    ca10:	1dbb      	adds	r3, r7, #6
    ca12:	2100      	movs	r1, #0
    ca14:	5e52      	ldrsh	r2, [r2, r1]
    ca16:	2100      	movs	r1, #0
    ca18:	5e5b      	ldrsh	r3, [r3, r1]
    ca1a:	429a      	cmp	r2, r3
    ca1c:	dd0f      	ble.n	ca3e <_ZN12Adafruit_GFX8drawLineEsssst+0x110>
    ca1e:	2314      	movs	r3, #20
    ca20:	18fb      	adds	r3, r7, r3
    ca22:	220a      	movs	r2, #10
    ca24:	18ba      	adds	r2, r7, r2
    ca26:	8812      	ldrh	r2, [r2, #0]
    ca28:	801a      	strh	r2, [r3, #0]
    ca2a:	230a      	movs	r3, #10
    ca2c:	18fb      	adds	r3, r7, r3
    ca2e:	1dba      	adds	r2, r7, #6
    ca30:	8812      	ldrh	r2, [r2, #0]
    ca32:	801a      	strh	r2, [r3, #0]
    ca34:	1dbb      	adds	r3, r7, #6
    ca36:	2214      	movs	r2, #20
    ca38:	18ba      	adds	r2, r7, r2
    ca3a:	8812      	ldrh	r2, [r2, #0]
    ca3c:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    ca3e:	68fb      	ldr	r3, [r7, #12]
    ca40:	681b      	ldr	r3, [r3, #0]
    ca42:	333c      	adds	r3, #60	; 0x3c
    ca44:	681c      	ldr	r4, [r3, #0]
    ca46:	1dbb      	adds	r3, r7, #6
    ca48:	881a      	ldrh	r2, [r3, #0]
    ca4a:	230a      	movs	r3, #10
    ca4c:	18fb      	adds	r3, r7, r3
    ca4e:	881b      	ldrh	r3, [r3, #0]
    ca50:	1ad3      	subs	r3, r2, r3
    ca52:	b29b      	uxth	r3, r3
    ca54:	3301      	adds	r3, #1
    ca56:	b29b      	uxth	r3, r3
    ca58:	b21d      	sxth	r5, r3
    ca5a:	2308      	movs	r3, #8
    ca5c:	18fb      	adds	r3, r7, r3
    ca5e:	2200      	movs	r2, #0
    ca60:	5e9a      	ldrsh	r2, [r3, r2]
    ca62:	230a      	movs	r3, #10
    ca64:	18fb      	adds	r3, r7, r3
    ca66:	2100      	movs	r1, #0
    ca68:	5e59      	ldrsh	r1, [r3, r1]
    ca6a:	68f8      	ldr	r0, [r7, #12]
    ca6c:	232c      	movs	r3, #44	; 0x2c
    ca6e:	2608      	movs	r6, #8
    ca70:	46b4      	mov	ip, r6
    ca72:	44bc      	add	ip, r7
    ca74:	4463      	add	r3, ip
    ca76:	881b      	ldrh	r3, [r3, #0]
    ca78:	9300      	str	r3, [sp, #0]
    ca7a:	002b      	movs	r3, r5
    ca7c:	47a0      	blx	r4
}
    ca7e:	e02e      	b.n	cade <_ZN12Adafruit_GFX8drawLineEsssst+0x1b0>
        startWrite();
    ca80:	68fb      	ldr	r3, [r7, #12]
    ca82:	681b      	ldr	r3, [r3, #0]
    ca84:	3314      	adds	r3, #20
    ca86:	681b      	ldr	r3, [r3, #0]
    ca88:	68fa      	ldr	r2, [r7, #12]
    ca8a:	0010      	movs	r0, r2
    ca8c:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
    ca8e:	68fb      	ldr	r3, [r7, #12]
    ca90:	681b      	ldr	r3, [r3, #0]
    ca92:	3328      	adds	r3, #40	; 0x28
    ca94:	681c      	ldr	r4, [r3, #0]
    ca96:	1dbb      	adds	r3, r7, #6
    ca98:	2500      	movs	r5, #0
    ca9a:	5f5d      	ldrsh	r5, [r3, r5]
    ca9c:	2308      	movs	r3, #8
    ca9e:	18fb      	adds	r3, r7, r3
    caa0:	2200      	movs	r2, #0
    caa2:	5e9a      	ldrsh	r2, [r3, r2]
    caa4:	230a      	movs	r3, #10
    caa6:	18fb      	adds	r3, r7, r3
    caa8:	2100      	movs	r1, #0
    caaa:	5e59      	ldrsh	r1, [r3, r1]
    caac:	68f8      	ldr	r0, [r7, #12]
    caae:	232c      	movs	r3, #44	; 0x2c
    cab0:	2608      	movs	r6, #8
    cab2:	46b4      	mov	ip, r6
    cab4:	44bc      	add	ip, r7
    cab6:	4463      	add	r3, ip
    cab8:	881b      	ldrh	r3, [r3, #0]
    caba:	9301      	str	r3, [sp, #4]
    cabc:	2328      	movs	r3, #40	; 0x28
    cabe:	2608      	movs	r6, #8
    cac0:	46b4      	mov	ip, r6
    cac2:	44bc      	add	ip, r7
    cac4:	4463      	add	r3, ip
    cac6:	2600      	movs	r6, #0
    cac8:	5f9b      	ldrsh	r3, [r3, r6]
    caca:	9300      	str	r3, [sp, #0]
    cacc:	002b      	movs	r3, r5
    cace:	47a0      	blx	r4
        endWrite();
    cad0:	68fb      	ldr	r3, [r7, #12]
    cad2:	681b      	ldr	r3, [r3, #0]
    cad4:	332c      	adds	r3, #44	; 0x2c
    cad6:	681b      	ldr	r3, [r3, #0]
    cad8:	68fa      	ldr	r2, [r7, #12]
    cada:	0010      	movs	r0, r2
    cadc:	4798      	blx	r3
}
    cade:	46c0      	nop			; (mov r8, r8)
    cae0:	46bd      	mov	sp, r7
    cae2:	b007      	add	sp, #28
    cae4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cae6 <_ZN12Adafruit_GFX8drawRectEsssst>:
    }
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    cae6:	b5b0      	push	{r4, r5, r7, lr}
    cae8:	b086      	sub	sp, #24
    caea:	af02      	add	r7, sp, #8
    caec:	60f8      	str	r0, [r7, #12]
    caee:	000c      	movs	r4, r1
    caf0:	0010      	movs	r0, r2
    caf2:	0019      	movs	r1, r3
    caf4:	230a      	movs	r3, #10
    caf6:	18fb      	adds	r3, r7, r3
    caf8:	1c22      	adds	r2, r4, #0
    cafa:	801a      	strh	r2, [r3, #0]
    cafc:	2308      	movs	r3, #8
    cafe:	18fb      	adds	r3, r7, r3
    cb00:	1c02      	adds	r2, r0, #0
    cb02:	801a      	strh	r2, [r3, #0]
    cb04:	1dbb      	adds	r3, r7, #6
    cb06:	1c0a      	adds	r2, r1, #0
    cb08:	801a      	strh	r2, [r3, #0]
    startWrite();
    cb0a:	68fb      	ldr	r3, [r7, #12]
    cb0c:	681b      	ldr	r3, [r3, #0]
    cb0e:	3314      	adds	r3, #20
    cb10:	681b      	ldr	r3, [r3, #0]
    cb12:	68fa      	ldr	r2, [r7, #12]
    cb14:	0010      	movs	r0, r2
    cb16:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
    cb18:	68fb      	ldr	r3, [r7, #12]
    cb1a:	681b      	ldr	r3, [r3, #0]
    cb1c:	3324      	adds	r3, #36	; 0x24
    cb1e:	681c      	ldr	r4, [r3, #0]
    cb20:	1dbb      	adds	r3, r7, #6
    cb22:	2500      	movs	r5, #0
    cb24:	5f5d      	ldrsh	r5, [r3, r5]
    cb26:	2308      	movs	r3, #8
    cb28:	18fb      	adds	r3, r7, r3
    cb2a:	2200      	movs	r2, #0
    cb2c:	5e9a      	ldrsh	r2, [r3, r2]
    cb2e:	230a      	movs	r3, #10
    cb30:	18fb      	adds	r3, r7, r3
    cb32:	2100      	movs	r1, #0
    cb34:	5e59      	ldrsh	r1, [r3, r1]
    cb36:	68f8      	ldr	r0, [r7, #12]
    cb38:	2324      	movs	r3, #36	; 0x24
    cb3a:	18fb      	adds	r3, r7, r3
    cb3c:	881b      	ldrh	r3, [r3, #0]
    cb3e:	9300      	str	r3, [sp, #0]
    cb40:	002b      	movs	r3, r5
    cb42:	47a0      	blx	r4
    writeFastHLine(x, y+h-1, w, color);
    cb44:	68fb      	ldr	r3, [r7, #12]
    cb46:	681b      	ldr	r3, [r3, #0]
    cb48:	3324      	adds	r3, #36	; 0x24
    cb4a:	681c      	ldr	r4, [r3, #0]
    cb4c:	2308      	movs	r3, #8
    cb4e:	18fb      	adds	r3, r7, r3
    cb50:	881a      	ldrh	r2, [r3, #0]
    cb52:	2320      	movs	r3, #32
    cb54:	18fb      	adds	r3, r7, r3
    cb56:	881b      	ldrh	r3, [r3, #0]
    cb58:	18d3      	adds	r3, r2, r3
    cb5a:	b29b      	uxth	r3, r3
    cb5c:	3b01      	subs	r3, #1
    cb5e:	b29b      	uxth	r3, r3
    cb60:	b21a      	sxth	r2, r3
    cb62:	1dbb      	adds	r3, r7, #6
    cb64:	2500      	movs	r5, #0
    cb66:	5f5d      	ldrsh	r5, [r3, r5]
    cb68:	230a      	movs	r3, #10
    cb6a:	18fb      	adds	r3, r7, r3
    cb6c:	2100      	movs	r1, #0
    cb6e:	5e59      	ldrsh	r1, [r3, r1]
    cb70:	68f8      	ldr	r0, [r7, #12]
    cb72:	2324      	movs	r3, #36	; 0x24
    cb74:	18fb      	adds	r3, r7, r3
    cb76:	881b      	ldrh	r3, [r3, #0]
    cb78:	9300      	str	r3, [sp, #0]
    cb7a:	002b      	movs	r3, r5
    cb7c:	47a0      	blx	r4
    writeFastVLine(x, y, h, color);
    cb7e:	68fb      	ldr	r3, [r7, #12]
    cb80:	681b      	ldr	r3, [r3, #0]
    cb82:	3320      	adds	r3, #32
    cb84:	681c      	ldr	r4, [r3, #0]
    cb86:	2320      	movs	r3, #32
    cb88:	18fb      	adds	r3, r7, r3
    cb8a:	2500      	movs	r5, #0
    cb8c:	5f5d      	ldrsh	r5, [r3, r5]
    cb8e:	2308      	movs	r3, #8
    cb90:	18fb      	adds	r3, r7, r3
    cb92:	2200      	movs	r2, #0
    cb94:	5e9a      	ldrsh	r2, [r3, r2]
    cb96:	230a      	movs	r3, #10
    cb98:	18fb      	adds	r3, r7, r3
    cb9a:	2100      	movs	r1, #0
    cb9c:	5e59      	ldrsh	r1, [r3, r1]
    cb9e:	68f8      	ldr	r0, [r7, #12]
    cba0:	2324      	movs	r3, #36	; 0x24
    cba2:	18fb      	adds	r3, r7, r3
    cba4:	881b      	ldrh	r3, [r3, #0]
    cba6:	9300      	str	r3, [sp, #0]
    cba8:	002b      	movs	r3, r5
    cbaa:	47a0      	blx	r4
    writeFastVLine(x+w-1, y, h, color);
    cbac:	68fb      	ldr	r3, [r7, #12]
    cbae:	681b      	ldr	r3, [r3, #0]
    cbb0:	3320      	adds	r3, #32
    cbb2:	681c      	ldr	r4, [r3, #0]
    cbb4:	230a      	movs	r3, #10
    cbb6:	18fb      	adds	r3, r7, r3
    cbb8:	881a      	ldrh	r2, [r3, #0]
    cbba:	1dbb      	adds	r3, r7, #6
    cbbc:	881b      	ldrh	r3, [r3, #0]
    cbbe:	18d3      	adds	r3, r2, r3
    cbc0:	b29b      	uxth	r3, r3
    cbc2:	3b01      	subs	r3, #1
    cbc4:	b29b      	uxth	r3, r3
    cbc6:	b219      	sxth	r1, r3
    cbc8:	2320      	movs	r3, #32
    cbca:	18fb      	adds	r3, r7, r3
    cbcc:	2500      	movs	r5, #0
    cbce:	5f5d      	ldrsh	r5, [r3, r5]
    cbd0:	2308      	movs	r3, #8
    cbd2:	18fb      	adds	r3, r7, r3
    cbd4:	2200      	movs	r2, #0
    cbd6:	5e9a      	ldrsh	r2, [r3, r2]
    cbd8:	68f8      	ldr	r0, [r7, #12]
    cbda:	2324      	movs	r3, #36	; 0x24
    cbdc:	18fb      	adds	r3, r7, r3
    cbde:	881b      	ldrh	r3, [r3, #0]
    cbe0:	9300      	str	r3, [sp, #0]
    cbe2:	002b      	movs	r3, r5
    cbe4:	47a0      	blx	r4
    endWrite();
    cbe6:	68fb      	ldr	r3, [r7, #12]
    cbe8:	681b      	ldr	r3, [r3, #0]
    cbea:	332c      	adds	r3, #44	; 0x2c
    cbec:	681b      	ldr	r3, [r3, #0]
    cbee:	68fa      	ldr	r2, [r7, #12]
    cbf0:	0010      	movs	r0, r2
    cbf2:	4798      	blx	r3
}
    cbf4:	46c0      	nop			; (mov r8, r8)
    cbf6:	46bd      	mov	sp, r7
    cbf8:	b004      	add	sp, #16
    cbfa:	bdb0      	pop	{r4, r5, r7, pc}

0000cbfc <_ZN12Adafruit_GFX8drawCharEsshtth>:

// TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbfe:	b08f      	sub	sp, #60	; 0x3c
    cc00:	af02      	add	r7, sp, #8
    cc02:	60f8      	str	r0, [r7, #12]
    cc04:	000c      	movs	r4, r1
    cc06:	0010      	movs	r0, r2
    cc08:	0019      	movs	r1, r3
    cc0a:	230a      	movs	r3, #10
    cc0c:	18fb      	adds	r3, r7, r3
    cc0e:	1c22      	adds	r2, r4, #0
    cc10:	801a      	strh	r2, [r3, #0]
    cc12:	2308      	movs	r3, #8
    cc14:	18fb      	adds	r3, r7, r3
    cc16:	1c02      	adds	r2, r0, #0
    cc18:	801a      	strh	r2, [r3, #0]
    cc1a:	1dfb      	adds	r3, r7, #7
    cc1c:	1c0a      	adds	r2, r1, #0
    cc1e:	701a      	strb	r2, [r3, #0]

    if(!gfxFont) { // 'Classic' built-in font
    cc20:	68fb      	ldr	r3, [r7, #12]
    cc22:	69db      	ldr	r3, [r3, #28]
    cc24:	2b00      	cmp	r3, #0
    cc26:	d000      	beq.n	cc2a <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
    cc28:	e1a8      	b.n	cf7c <_ZN12Adafruit_GFX8drawCharEsshtth+0x380>

        if((x >= _width)            || // Clip right
    cc2a:	68fb      	ldr	r3, [r7, #12]
    cc2c:	220c      	movs	r2, #12
    cc2e:	5e9b      	ldrsh	r3, [r3, r2]
    cc30:	220a      	movs	r2, #10
    cc32:	18ba      	adds	r2, r7, r2
    cc34:	2100      	movs	r1, #0
    cc36:	5e52      	ldrsh	r2, [r2, r1]
    cc38:	429a      	cmp	r2, r3
    cc3a:	db00      	blt.n	cc3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x42>
    cc3c:	e2c7      	b.n	d1ce <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           (y >= _height)           || // Clip bottom
    cc3e:	68fb      	ldr	r3, [r7, #12]
    cc40:	220e      	movs	r2, #14
    cc42:	5e9b      	ldrsh	r3, [r3, r2]
        if((x >= _width)            || // Clip right
    cc44:	2208      	movs	r2, #8
    cc46:	18ba      	adds	r2, r7, r2
    cc48:	2100      	movs	r1, #0
    cc4a:	5e52      	ldrsh	r2, [r2, r1]
    cc4c:	429a      	cmp	r2, r3
    cc4e:	db00      	blt.n	cc52 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
    cc50:	e2bd      	b.n	d1ce <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           ((x + 6 * size - 1) < 0) || // Clip left
    cc52:	230a      	movs	r3, #10
    cc54:	18fb      	adds	r3, r7, r3
    cc56:	2100      	movs	r1, #0
    cc58:	5e59      	ldrsh	r1, [r3, r1]
    cc5a:	2350      	movs	r3, #80	; 0x50
    cc5c:	18fb      	adds	r3, r7, r3
    cc5e:	781a      	ldrb	r2, [r3, #0]
    cc60:	0013      	movs	r3, r2
    cc62:	005b      	lsls	r3, r3, #1
    cc64:	189b      	adds	r3, r3, r2
    cc66:	005b      	lsls	r3, r3, #1
    cc68:	18cb      	adds	r3, r1, r3
    cc6a:	3b01      	subs	r3, #1
           (y >= _height)           || // Clip bottom
    cc6c:	2b00      	cmp	r3, #0
    cc6e:	da00      	bge.n	cc72 <_ZN12Adafruit_GFX8drawCharEsshtth+0x76>
    cc70:	e2ad      	b.n	d1ce <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           ((y + 8 * size - 1) < 0))   // Clip top
    cc72:	2308      	movs	r3, #8
    cc74:	18fb      	adds	r3, r7, r3
    cc76:	2200      	movs	r2, #0
    cc78:	5e9a      	ldrsh	r2, [r3, r2]
    cc7a:	2350      	movs	r3, #80	; 0x50
    cc7c:	18fb      	adds	r3, r7, r3
    cc7e:	781b      	ldrb	r3, [r3, #0]
    cc80:	00db      	lsls	r3, r3, #3
    cc82:	18d3      	adds	r3, r2, r3
    cc84:	3b01      	subs	r3, #1
           ((x + 6 * size - 1) < 0) || // Clip left
    cc86:	2b00      	cmp	r3, #0
    cc88:	da00      	bge.n	cc8c <_ZN12Adafruit_GFX8drawCharEsshtth+0x90>
    cc8a:	e2a0      	b.n	d1ce <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
    cc8c:	68fb      	ldr	r3, [r7, #12]
    cc8e:	7edb      	ldrb	r3, [r3, #27]
    cc90:	2201      	movs	r2, #1
    cc92:	4053      	eors	r3, r2
    cc94:	b2db      	uxtb	r3, r3
    cc96:	2b00      	cmp	r3, #0
    cc98:	d008      	beq.n	ccac <_ZN12Adafruit_GFX8drawCharEsshtth+0xb0>
    cc9a:	1dfb      	adds	r3, r7, #7
    cc9c:	781b      	ldrb	r3, [r3, #0]
    cc9e:	2baf      	cmp	r3, #175	; 0xaf
    cca0:	dd04      	ble.n	ccac <_ZN12Adafruit_GFX8drawCharEsshtth+0xb0>
    cca2:	1dfb      	adds	r3, r7, #7
    cca4:	781a      	ldrb	r2, [r3, #0]
    cca6:	1dfb      	adds	r3, r7, #7
    cca8:	3201      	adds	r2, #1
    ccaa:	701a      	strb	r2, [r3, #0]

        startWrite();
    ccac:	68fb      	ldr	r3, [r7, #12]
    ccae:	681b      	ldr	r3, [r3, #0]
    ccb0:	3314      	adds	r3, #20
    ccb2:	681b      	ldr	r3, [r3, #0]
    ccb4:	68fa      	ldr	r2, [r7, #12]
    ccb6:	0010      	movs	r0, r2
    ccb8:	4798      	blx	r3
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    ccba:	232f      	movs	r3, #47	; 0x2f
    ccbc:	18fb      	adds	r3, r7, r3
    ccbe:	2200      	movs	r2, #0
    ccc0:	701a      	strb	r2, [r3, #0]
    ccc2:	232f      	movs	r3, #47	; 0x2f
    ccc4:	18fb      	adds	r3, r7, r3
    ccc6:	781b      	ldrb	r3, [r3, #0]
    ccc8:	b25b      	sxtb	r3, r3
    ccca:	2b04      	cmp	r3, #4
    cccc:	dd00      	ble.n	ccd0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd4>
    ccce:	e0fd      	b.n	cecc <_ZN12Adafruit_GFX8drawCharEsshtth+0x2d0>
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    ccd0:	1dfb      	adds	r3, r7, #7
    ccd2:	781a      	ldrb	r2, [r3, #0]
    ccd4:	0013      	movs	r3, r2
    ccd6:	009b      	lsls	r3, r3, #2
    ccd8:	189a      	adds	r2, r3, r2
    ccda:	232f      	movs	r3, #47	; 0x2f
    ccdc:	18fb      	adds	r3, r7, r3
    ccde:	781b      	ldrb	r3, [r3, #0]
    cce0:	b25b      	sxtb	r3, r3
    cce2:	18d2      	adds	r2, r2, r3
    cce4:	232e      	movs	r3, #46	; 0x2e
    cce6:	18fb      	adds	r3, r7, r3
    cce8:	49a3      	ldr	r1, [pc, #652]	; (cf78 <_ZN12Adafruit_GFX8drawCharEsshtth+0x37c>)
    ccea:	5c8a      	ldrb	r2, [r1, r2]
    ccec:	701a      	strb	r2, [r3, #0]
            for(int8_t j=0; j<8; j++, line >>= 1) {
    ccee:	232d      	movs	r3, #45	; 0x2d
    ccf0:	18fb      	adds	r3, r7, r3
    ccf2:	2200      	movs	r2, #0
    ccf4:	701a      	strb	r2, [r3, #0]
    ccf6:	232d      	movs	r3, #45	; 0x2d
    ccf8:	18fb      	adds	r3, r7, r3
    ccfa:	781b      	ldrb	r3, [r3, #0]
    ccfc:	b25b      	sxtb	r3, r3
    ccfe:	2b07      	cmp	r3, #7
    cd00:	dd00      	ble.n	cd04 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
    cd02:	e0d8      	b.n	ceb6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2ba>
                if(line & 1) {
    cd04:	232e      	movs	r3, #46	; 0x2e
    cd06:	18fb      	adds	r3, r7, r3
    cd08:	781b      	ldrb	r3, [r3, #0]
    cd0a:	2201      	movs	r2, #1
    cd0c:	4013      	ands	r3, r2
    cd0e:	d05c      	beq.n	cdca <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ce>
                    if(size == 1)
    cd10:	2350      	movs	r3, #80	; 0x50
    cd12:	18fb      	adds	r3, r7, r3
    cd14:	781b      	ldrb	r3, [r3, #0]
    cd16:	2b01      	cmp	r3, #1
    cd18:	d11f      	bne.n	cd5a <_ZN12Adafruit_GFX8drawCharEsshtth+0x15e>
                        writePixel(x+i, y+j, color);
    cd1a:	68fb      	ldr	r3, [r7, #12]
    cd1c:	681b      	ldr	r3, [r3, #0]
    cd1e:	3318      	adds	r3, #24
    cd20:	681c      	ldr	r4, [r3, #0]
    cd22:	232f      	movs	r3, #47	; 0x2f
    cd24:	18fb      	adds	r3, r7, r3
    cd26:	781b      	ldrb	r3, [r3, #0]
    cd28:	b25b      	sxtb	r3, r3
    cd2a:	b29a      	uxth	r2, r3
    cd2c:	230a      	movs	r3, #10
    cd2e:	18fb      	adds	r3, r7, r3
    cd30:	881b      	ldrh	r3, [r3, #0]
    cd32:	18d3      	adds	r3, r2, r3
    cd34:	b29b      	uxth	r3, r3
    cd36:	b219      	sxth	r1, r3
    cd38:	232d      	movs	r3, #45	; 0x2d
    cd3a:	18fb      	adds	r3, r7, r3
    cd3c:	781b      	ldrb	r3, [r3, #0]
    cd3e:	b25b      	sxtb	r3, r3
    cd40:	b29a      	uxth	r2, r3
    cd42:	2308      	movs	r3, #8
    cd44:	18fb      	adds	r3, r7, r3
    cd46:	881b      	ldrh	r3, [r3, #0]
    cd48:	18d3      	adds	r3, r2, r3
    cd4a:	b29b      	uxth	r3, r3
    cd4c:	b21a      	sxth	r2, r3
    cd4e:	2348      	movs	r3, #72	; 0x48
    cd50:	18fb      	adds	r3, r7, r3
    cd52:	881b      	ldrh	r3, [r3, #0]
    cd54:	68f8      	ldr	r0, [r7, #12]
    cd56:	47a0      	blx	r4
    cd58:	e09b      	b.n	ce92 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
    cd5a:	68fb      	ldr	r3, [r7, #12]
    cd5c:	681b      	ldr	r3, [r3, #0]
    cd5e:	331c      	adds	r3, #28
    cd60:	681c      	ldr	r4, [r3, #0]
    cd62:	232f      	movs	r3, #47	; 0x2f
    cd64:	18fb      	adds	r3, r7, r3
    cd66:	781b      	ldrb	r3, [r3, #0]
    cd68:	b25b      	sxtb	r3, r3
    cd6a:	b29b      	uxth	r3, r3
    cd6c:	2250      	movs	r2, #80	; 0x50
    cd6e:	18ba      	adds	r2, r7, r2
    cd70:	7812      	ldrb	r2, [r2, #0]
    cd72:	b292      	uxth	r2, r2
    cd74:	4353      	muls	r3, r2
    cd76:	b29a      	uxth	r2, r3
    cd78:	230a      	movs	r3, #10
    cd7a:	18fb      	adds	r3, r7, r3
    cd7c:	881b      	ldrh	r3, [r3, #0]
    cd7e:	18d3      	adds	r3, r2, r3
    cd80:	b29b      	uxth	r3, r3
    cd82:	b219      	sxth	r1, r3
    cd84:	232d      	movs	r3, #45	; 0x2d
    cd86:	18fb      	adds	r3, r7, r3
    cd88:	781b      	ldrb	r3, [r3, #0]
    cd8a:	b25b      	sxtb	r3, r3
    cd8c:	b29b      	uxth	r3, r3
    cd8e:	2250      	movs	r2, #80	; 0x50
    cd90:	18ba      	adds	r2, r7, r2
    cd92:	7812      	ldrb	r2, [r2, #0]
    cd94:	b292      	uxth	r2, r2
    cd96:	4353      	muls	r3, r2
    cd98:	b29a      	uxth	r2, r3
    cd9a:	2308      	movs	r3, #8
    cd9c:	18fb      	adds	r3, r7, r3
    cd9e:	881b      	ldrh	r3, [r3, #0]
    cda0:	18d3      	adds	r3, r2, r3
    cda2:	b29b      	uxth	r3, r3
    cda4:	b21d      	sxth	r5, r3
    cda6:	2350      	movs	r3, #80	; 0x50
    cda8:	18fb      	adds	r3, r7, r3
    cdaa:	781b      	ldrb	r3, [r3, #0]
    cdac:	b21e      	sxth	r6, r3
    cdae:	2350      	movs	r3, #80	; 0x50
    cdb0:	18fb      	adds	r3, r7, r3
    cdb2:	781b      	ldrb	r3, [r3, #0]
    cdb4:	b21b      	sxth	r3, r3
    cdb6:	68f8      	ldr	r0, [r7, #12]
    cdb8:	2248      	movs	r2, #72	; 0x48
    cdba:	18ba      	adds	r2, r7, r2
    cdbc:	8812      	ldrh	r2, [r2, #0]
    cdbe:	9201      	str	r2, [sp, #4]
    cdc0:	9300      	str	r3, [sp, #0]
    cdc2:	0033      	movs	r3, r6
    cdc4:	002a      	movs	r2, r5
    cdc6:	47a0      	blx	r4
    cdc8:	e063      	b.n	ce92 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                } else if(bg != color) {
    cdca:	234c      	movs	r3, #76	; 0x4c
    cdcc:	18fb      	adds	r3, r7, r3
    cdce:	2248      	movs	r2, #72	; 0x48
    cdd0:	18b9      	adds	r1, r7, r2
    cdd2:	881a      	ldrh	r2, [r3, #0]
    cdd4:	880b      	ldrh	r3, [r1, #0]
    cdd6:	429a      	cmp	r2, r3
    cdd8:	d05b      	beq.n	ce92 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    if(size == 1)
    cdda:	2350      	movs	r3, #80	; 0x50
    cddc:	18fb      	adds	r3, r7, r3
    cdde:	781b      	ldrb	r3, [r3, #0]
    cde0:	2b01      	cmp	r3, #1
    cde2:	d11f      	bne.n	ce24 <_ZN12Adafruit_GFX8drawCharEsshtth+0x228>
                        writePixel(x+i, y+j, bg);
    cde4:	68fb      	ldr	r3, [r7, #12]
    cde6:	681b      	ldr	r3, [r3, #0]
    cde8:	3318      	adds	r3, #24
    cdea:	681c      	ldr	r4, [r3, #0]
    cdec:	232f      	movs	r3, #47	; 0x2f
    cdee:	18fb      	adds	r3, r7, r3
    cdf0:	781b      	ldrb	r3, [r3, #0]
    cdf2:	b25b      	sxtb	r3, r3
    cdf4:	b29a      	uxth	r2, r3
    cdf6:	230a      	movs	r3, #10
    cdf8:	18fb      	adds	r3, r7, r3
    cdfa:	881b      	ldrh	r3, [r3, #0]
    cdfc:	18d3      	adds	r3, r2, r3
    cdfe:	b29b      	uxth	r3, r3
    ce00:	b219      	sxth	r1, r3
    ce02:	232d      	movs	r3, #45	; 0x2d
    ce04:	18fb      	adds	r3, r7, r3
    ce06:	781b      	ldrb	r3, [r3, #0]
    ce08:	b25b      	sxtb	r3, r3
    ce0a:	b29a      	uxth	r2, r3
    ce0c:	2308      	movs	r3, #8
    ce0e:	18fb      	adds	r3, r7, r3
    ce10:	881b      	ldrh	r3, [r3, #0]
    ce12:	18d3      	adds	r3, r2, r3
    ce14:	b29b      	uxth	r3, r3
    ce16:	b21a      	sxth	r2, r3
    ce18:	234c      	movs	r3, #76	; 0x4c
    ce1a:	18fb      	adds	r3, r7, r3
    ce1c:	881b      	ldrh	r3, [r3, #0]
    ce1e:	68f8      	ldr	r0, [r7, #12]
    ce20:	47a0      	blx	r4
    ce22:	e036      	b.n	ce92 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    ce24:	68fb      	ldr	r3, [r7, #12]
    ce26:	681b      	ldr	r3, [r3, #0]
    ce28:	331c      	adds	r3, #28
    ce2a:	681c      	ldr	r4, [r3, #0]
    ce2c:	232f      	movs	r3, #47	; 0x2f
    ce2e:	18fb      	adds	r3, r7, r3
    ce30:	781b      	ldrb	r3, [r3, #0]
    ce32:	b25b      	sxtb	r3, r3
    ce34:	b29b      	uxth	r3, r3
    ce36:	2250      	movs	r2, #80	; 0x50
    ce38:	18ba      	adds	r2, r7, r2
    ce3a:	7812      	ldrb	r2, [r2, #0]
    ce3c:	b292      	uxth	r2, r2
    ce3e:	4353      	muls	r3, r2
    ce40:	b29a      	uxth	r2, r3
    ce42:	230a      	movs	r3, #10
    ce44:	18fb      	adds	r3, r7, r3
    ce46:	881b      	ldrh	r3, [r3, #0]
    ce48:	18d3      	adds	r3, r2, r3
    ce4a:	b29b      	uxth	r3, r3
    ce4c:	b219      	sxth	r1, r3
    ce4e:	232d      	movs	r3, #45	; 0x2d
    ce50:	18fb      	adds	r3, r7, r3
    ce52:	781b      	ldrb	r3, [r3, #0]
    ce54:	b25b      	sxtb	r3, r3
    ce56:	b29b      	uxth	r3, r3
    ce58:	2250      	movs	r2, #80	; 0x50
    ce5a:	18ba      	adds	r2, r7, r2
    ce5c:	7812      	ldrb	r2, [r2, #0]
    ce5e:	b292      	uxth	r2, r2
    ce60:	4353      	muls	r3, r2
    ce62:	b29a      	uxth	r2, r3
    ce64:	2308      	movs	r3, #8
    ce66:	18fb      	adds	r3, r7, r3
    ce68:	881b      	ldrh	r3, [r3, #0]
    ce6a:	18d3      	adds	r3, r2, r3
    ce6c:	b29b      	uxth	r3, r3
    ce6e:	b21d      	sxth	r5, r3
    ce70:	2350      	movs	r3, #80	; 0x50
    ce72:	18fb      	adds	r3, r7, r3
    ce74:	781b      	ldrb	r3, [r3, #0]
    ce76:	b21e      	sxth	r6, r3
    ce78:	2350      	movs	r3, #80	; 0x50
    ce7a:	18fb      	adds	r3, r7, r3
    ce7c:	781b      	ldrb	r3, [r3, #0]
    ce7e:	b21b      	sxth	r3, r3
    ce80:	68f8      	ldr	r0, [r7, #12]
    ce82:	224c      	movs	r2, #76	; 0x4c
    ce84:	18ba      	adds	r2, r7, r2
    ce86:	8812      	ldrh	r2, [r2, #0]
    ce88:	9201      	str	r2, [sp, #4]
    ce8a:	9300      	str	r3, [sp, #0]
    ce8c:	0033      	movs	r3, r6
    ce8e:	002a      	movs	r2, r5
    ce90:	47a0      	blx	r4
            for(int8_t j=0; j<8; j++, line >>= 1) {
    ce92:	232d      	movs	r3, #45	; 0x2d
    ce94:	18fb      	adds	r3, r7, r3
    ce96:	781b      	ldrb	r3, [r3, #0]
    ce98:	b25b      	sxtb	r3, r3
    ce9a:	b2db      	uxtb	r3, r3
    ce9c:	3301      	adds	r3, #1
    ce9e:	b2da      	uxtb	r2, r3
    cea0:	232d      	movs	r3, #45	; 0x2d
    cea2:	18fb      	adds	r3, r7, r3
    cea4:	701a      	strb	r2, [r3, #0]
    cea6:	232e      	movs	r3, #46	; 0x2e
    cea8:	18fb      	adds	r3, r7, r3
    ceaa:	781b      	ldrb	r3, [r3, #0]
    ceac:	105a      	asrs	r2, r3, #1
    ceae:	232e      	movs	r3, #46	; 0x2e
    ceb0:	18fb      	adds	r3, r7, r3
    ceb2:	701a      	strb	r2, [r3, #0]
    ceb4:	e71f      	b.n	ccf6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xfa>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    ceb6:	232f      	movs	r3, #47	; 0x2f
    ceb8:	18fb      	adds	r3, r7, r3
    ceba:	781b      	ldrb	r3, [r3, #0]
    cebc:	b25b      	sxtb	r3, r3
    cebe:	b2db      	uxtb	r3, r3
    cec0:	3301      	adds	r3, #1
    cec2:	b2da      	uxtb	r2, r3
    cec4:	232f      	movs	r3, #47	; 0x2f
    cec6:	18fb      	adds	r3, r7, r3
    cec8:	701a      	strb	r2, [r3, #0]
    ceca:	e6fa      	b.n	ccc2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc6>
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
    cecc:	234c      	movs	r3, #76	; 0x4c
    cece:	18fb      	adds	r3, r7, r3
    ced0:	2248      	movs	r2, #72	; 0x48
    ced2:	18b9      	adds	r1, r7, r2
    ced4:	881a      	ldrh	r2, [r3, #0]
    ced6:	880b      	ldrh	r3, [r1, #0]
    ced8:	429a      	cmp	r2, r3
    ceda:	d044      	beq.n	cf66 <_ZN12Adafruit_GFX8drawCharEsshtth+0x36a>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
    cedc:	2350      	movs	r3, #80	; 0x50
    cede:	18fb      	adds	r3, r7, r3
    cee0:	781b      	ldrb	r3, [r3, #0]
    cee2:	2b01      	cmp	r3, #1
    cee4:	d115      	bne.n	cf12 <_ZN12Adafruit_GFX8drawCharEsshtth+0x316>
    cee6:	68fb      	ldr	r3, [r7, #12]
    cee8:	681b      	ldr	r3, [r3, #0]
    ceea:	3320      	adds	r3, #32
    ceec:	681c      	ldr	r4, [r3, #0]
    ceee:	230a      	movs	r3, #10
    cef0:	18fb      	adds	r3, r7, r3
    cef2:	881b      	ldrh	r3, [r3, #0]
    cef4:	3305      	adds	r3, #5
    cef6:	b29b      	uxth	r3, r3
    cef8:	b219      	sxth	r1, r3
    cefa:	2308      	movs	r3, #8
    cefc:	18fb      	adds	r3, r7, r3
    cefe:	2200      	movs	r2, #0
    cf00:	5e9a      	ldrsh	r2, [r3, r2]
    cf02:	68f8      	ldr	r0, [r7, #12]
    cf04:	234c      	movs	r3, #76	; 0x4c
    cf06:	18fb      	adds	r3, r7, r3
    cf08:	881b      	ldrh	r3, [r3, #0]
    cf0a:	9300      	str	r3, [sp, #0]
    cf0c:	2308      	movs	r3, #8
    cf0e:	47a0      	blx	r4
    cf10:	e029      	b.n	cf66 <_ZN12Adafruit_GFX8drawCharEsshtth+0x36a>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
    cf12:	68fb      	ldr	r3, [r7, #12]
    cf14:	681b      	ldr	r3, [r3, #0]
    cf16:	331c      	adds	r3, #28
    cf18:	681c      	ldr	r4, [r3, #0]
    cf1a:	2350      	movs	r3, #80	; 0x50
    cf1c:	18fb      	adds	r3, r7, r3
    cf1e:	781b      	ldrb	r3, [r3, #0]
    cf20:	b29b      	uxth	r3, r3
    cf22:	1c1a      	adds	r2, r3, #0
    cf24:	0092      	lsls	r2, r2, #2
    cf26:	18d3      	adds	r3, r2, r3
    cf28:	b29a      	uxth	r2, r3
    cf2a:	230a      	movs	r3, #10
    cf2c:	18fb      	adds	r3, r7, r3
    cf2e:	881b      	ldrh	r3, [r3, #0]
    cf30:	18d3      	adds	r3, r2, r3
    cf32:	b29b      	uxth	r3, r3
    cf34:	b219      	sxth	r1, r3
    cf36:	2350      	movs	r3, #80	; 0x50
    cf38:	18fb      	adds	r3, r7, r3
    cf3a:	781b      	ldrb	r3, [r3, #0]
    cf3c:	b21e      	sxth	r6, r3
    cf3e:	2350      	movs	r3, #80	; 0x50
    cf40:	18fb      	adds	r3, r7, r3
    cf42:	781b      	ldrb	r3, [r3, #0]
    cf44:	b29b      	uxth	r3, r3
    cf46:	00db      	lsls	r3, r3, #3
    cf48:	b29b      	uxth	r3, r3
    cf4a:	b21b      	sxth	r3, r3
    cf4c:	2208      	movs	r2, #8
    cf4e:	18ba      	adds	r2, r7, r2
    cf50:	2500      	movs	r5, #0
    cf52:	5f55      	ldrsh	r5, [r2, r5]
    cf54:	68f8      	ldr	r0, [r7, #12]
    cf56:	224c      	movs	r2, #76	; 0x4c
    cf58:	18ba      	adds	r2, r7, r2
    cf5a:	8812      	ldrh	r2, [r2, #0]
    cf5c:	9201      	str	r2, [sp, #4]
    cf5e:	9300      	str	r3, [sp, #0]
    cf60:	0033      	movs	r3, r6
    cf62:	002a      	movs	r2, r5
    cf64:	47a0      	blx	r4
        }
        endWrite();
    cf66:	68fb      	ldr	r3, [r7, #12]
    cf68:	681b      	ldr	r3, [r3, #0]
    cf6a:	332c      	adds	r3, #44	; 0x2c
    cf6c:	681b      	ldr	r3, [r3, #0]
    cf6e:	68fa      	ldr	r2, [r7, #12]
    cf70:	0010      	movs	r0, r2
    cf72:	4798      	blx	r3
    cf74:	e12c      	b.n	d1d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d4>
    cf76:	46c0      	nop			; (mov r8, r8)
    cf78:	00013b48 	.word	0x00013b48

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    cf7c:	68fb      	ldr	r3, [r7, #12]
    cf7e:	69db      	ldr	r3, [r3, #28]
    cf80:	3308      	adds	r3, #8
    cf82:	781a      	ldrb	r2, [r3, #0]
    cf84:	1dfb      	adds	r3, r7, #7
    cf86:	1df9      	adds	r1, r7, #7
    cf88:	7809      	ldrb	r1, [r1, #0]
    cf8a:	1a8a      	subs	r2, r1, r2
    cf8c:	701a      	strb	r2, [r3, #0]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    cf8e:	1dfb      	adds	r3, r7, #7
    cf90:	781b      	ldrb	r3, [r3, #0]
    cf92:	00da      	lsls	r2, r3, #3
    cf94:	68fb      	ldr	r3, [r7, #12]
    cf96:	69db      	ldr	r3, [r3, #28]
    cf98:	3304      	adds	r3, #4
    cf9a:	681b      	ldr	r3, [r3, #0]
    cf9c:	18d3      	adds	r3, r2, r3
    cf9e:	61fb      	str	r3, [r7, #28]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    cfa0:	68fb      	ldr	r3, [r7, #12]
    cfa2:	69db      	ldr	r3, [r3, #28]
    cfa4:	681b      	ldr	r3, [r3, #0]
    cfa6:	61bb      	str	r3, [r7, #24]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    cfa8:	69fa      	ldr	r2, [r7, #28]
    cfaa:	232a      	movs	r3, #42	; 0x2a
    cfac:	18fb      	adds	r3, r7, r3
    cfae:	8812      	ldrh	r2, [r2, #0]
    cfb0:	801a      	strh	r2, [r3, #0]
        uint8_t  w  = pgm_read_byte(&glyph->width),
    cfb2:	69fb      	ldr	r3, [r7, #28]
    cfb4:	1c9a      	adds	r2, r3, #2
    cfb6:	2317      	movs	r3, #23
    cfb8:	18fb      	adds	r3, r7, r3
    cfba:	7812      	ldrb	r2, [r2, #0]
    cfbc:	701a      	strb	r2, [r3, #0]
                 h  = pgm_read_byte(&glyph->height);
    cfbe:	69fb      	ldr	r3, [r7, #28]
    cfc0:	1cda      	adds	r2, r3, #3
    cfc2:	2316      	movs	r3, #22
    cfc4:	18fb      	adds	r3, r7, r3
    cfc6:	7812      	ldrb	r2, [r2, #0]
    cfc8:	701a      	strb	r2, [r3, #0]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
    cfca:	69fb      	ldr	r3, [r7, #28]
    cfcc:	3305      	adds	r3, #5
    cfce:	781a      	ldrb	r2, [r3, #0]
    cfd0:	2315      	movs	r3, #21
    cfd2:	18fb      	adds	r3, r7, r3
    cfd4:	701a      	strb	r2, [r3, #0]
                 yo = pgm_read_byte(&glyph->yOffset);
    cfd6:	69fb      	ldr	r3, [r7, #28]
    cfd8:	3306      	adds	r3, #6
    cfda:	781a      	ldrb	r2, [r3, #0]
    cfdc:	2314      	movs	r3, #20
    cfde:	18fb      	adds	r3, r7, r3
    cfe0:	701a      	strb	r2, [r3, #0]
        uint8_t  xx, yy, bits = 0, bit = 0;
    cfe2:	2327      	movs	r3, #39	; 0x27
    cfe4:	18fb      	adds	r3, r7, r3
    cfe6:	2200      	movs	r2, #0
    cfe8:	701a      	strb	r2, [r3, #0]
    cfea:	2326      	movs	r3, #38	; 0x26
    cfec:	18fb      	adds	r3, r7, r3
    cfee:	2200      	movs	r2, #0
    cff0:	701a      	strb	r2, [r3, #0]
        int16_t  xo16 = 0, yo16 = 0;
    cff2:	2324      	movs	r3, #36	; 0x24
    cff4:	18fb      	adds	r3, r7, r3
    cff6:	2200      	movs	r2, #0
    cff8:	801a      	strh	r2, [r3, #0]
    cffa:	2322      	movs	r3, #34	; 0x22
    cffc:	18fb      	adds	r3, r7, r3
    cffe:	2200      	movs	r2, #0
    d000:	801a      	strh	r2, [r3, #0]

        if(size > 1) {
    d002:	2350      	movs	r3, #80	; 0x50
    d004:	18fb      	adds	r3, r7, r3
    d006:	781b      	ldrb	r3, [r3, #0]
    d008:	2b01      	cmp	r3, #1
    d00a:	dd0d      	ble.n	d028 <_ZN12Adafruit_GFX8drawCharEsshtth+0x42c>
            xo16 = xo;
    d00c:	2324      	movs	r3, #36	; 0x24
    d00e:	18fb      	adds	r3, r7, r3
    d010:	2215      	movs	r2, #21
    d012:	18ba      	adds	r2, r7, r2
    d014:	7812      	ldrb	r2, [r2, #0]
    d016:	b252      	sxtb	r2, r2
    d018:	801a      	strh	r2, [r3, #0]
            yo16 = yo;
    d01a:	2322      	movs	r3, #34	; 0x22
    d01c:	18fb      	adds	r3, r7, r3
    d01e:	2214      	movs	r2, #20
    d020:	18ba      	adds	r2, r7, r2
    d022:	7812      	ldrb	r2, [r2, #0]
    d024:	b252      	sxtb	r2, r2
    d026:	801a      	strh	r2, [r3, #0]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
    d028:	68fb      	ldr	r3, [r7, #12]
    d02a:	681b      	ldr	r3, [r3, #0]
    d02c:	3314      	adds	r3, #20
    d02e:	681b      	ldr	r3, [r3, #0]
    d030:	68fa      	ldr	r2, [r7, #12]
    d032:	0010      	movs	r0, r2
    d034:	4798      	blx	r3
        for(yy=0; yy<h; yy++) {
    d036:	2328      	movs	r3, #40	; 0x28
    d038:	18fb      	adds	r3, r7, r3
    d03a:	2200      	movs	r2, #0
    d03c:	701a      	strb	r2, [r3, #0]
    d03e:	2328      	movs	r3, #40	; 0x28
    d040:	18fb      	adds	r3, r7, r3
    d042:	781a      	ldrb	r2, [r3, #0]
    d044:	2316      	movs	r3, #22
    d046:	18fb      	adds	r3, r7, r3
    d048:	781b      	ldrb	r3, [r3, #0]
    d04a:	429a      	cmp	r2, r3
    d04c:	db00      	blt.n	d050 <_ZN12Adafruit_GFX8drawCharEsshtth+0x454>
    d04e:	e0b6      	b.n	d1be <_ZN12Adafruit_GFX8drawCharEsshtth+0x5c2>
            for(xx=0; xx<w; xx++) {
    d050:	2329      	movs	r3, #41	; 0x29
    d052:	18fb      	adds	r3, r7, r3
    d054:	2200      	movs	r2, #0
    d056:	701a      	strb	r2, [r3, #0]
    d058:	2329      	movs	r3, #41	; 0x29
    d05a:	18fb      	adds	r3, r7, r3
    d05c:	781a      	ldrb	r2, [r3, #0]
    d05e:	2317      	movs	r3, #23
    d060:	18fb      	adds	r3, r7, r3
    d062:	781b      	ldrb	r3, [r3, #0]
    d064:	429a      	cmp	r2, r3
    d066:	db00      	blt.n	d06a <_ZN12Adafruit_GFX8drawCharEsshtth+0x46e>
    d068:	e0a1      	b.n	d1ae <_ZN12Adafruit_GFX8drawCharEsshtth+0x5b2>
                if(!(bit++ & 7)) {
    d06a:	2326      	movs	r3, #38	; 0x26
    d06c:	18fb      	adds	r3, r7, r3
    d06e:	781b      	ldrb	r3, [r3, #0]
    d070:	2226      	movs	r2, #38	; 0x26
    d072:	18ba      	adds	r2, r7, r2
    d074:	1c59      	adds	r1, r3, #1
    d076:	7011      	strb	r1, [r2, #0]
    d078:	001a      	movs	r2, r3
    d07a:	2307      	movs	r3, #7
    d07c:	4013      	ands	r3, r2
    d07e:	425a      	negs	r2, r3
    d080:	4153      	adcs	r3, r2
    d082:	b2db      	uxtb	r3, r3
    d084:	2b00      	cmp	r3, #0
    d086:	d00d      	beq.n	d0a4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4a8>
                    bits = pgm_read_byte(&bitmap[bo++]);
    d088:	232a      	movs	r3, #42	; 0x2a
    d08a:	18fb      	adds	r3, r7, r3
    d08c:	881b      	ldrh	r3, [r3, #0]
    d08e:	222a      	movs	r2, #42	; 0x2a
    d090:	18ba      	adds	r2, r7, r2
    d092:	1c59      	adds	r1, r3, #1
    d094:	8011      	strh	r1, [r2, #0]
    d096:	001a      	movs	r2, r3
    d098:	69bb      	ldr	r3, [r7, #24]
    d09a:	189a      	adds	r2, r3, r2
    d09c:	2327      	movs	r3, #39	; 0x27
    d09e:	18fb      	adds	r3, r7, r3
    d0a0:	7812      	ldrb	r2, [r2, #0]
    d0a2:	701a      	strb	r2, [r3, #0]
                }
                if(bits & 0x80) {
    d0a4:	2327      	movs	r3, #39	; 0x27
    d0a6:	18fb      	adds	r3, r7, r3
    d0a8:	781b      	ldrb	r3, [r3, #0]
    d0aa:	b25b      	sxtb	r3, r3
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	da6f      	bge.n	d190 <_ZN12Adafruit_GFX8drawCharEsshtth+0x594>
                    if(size == 1) {
    d0b0:	2350      	movs	r3, #80	; 0x50
    d0b2:	18fb      	adds	r3, r7, r3
    d0b4:	781b      	ldrb	r3, [r3, #0]
    d0b6:	2b01      	cmp	r3, #1
    d0b8:	d12b      	bne.n	d112 <_ZN12Adafruit_GFX8drawCharEsshtth+0x516>
                        writePixel(x+xo+xx, y+yo+yy, color);
    d0ba:	68fb      	ldr	r3, [r7, #12]
    d0bc:	681b      	ldr	r3, [r3, #0]
    d0be:	3318      	adds	r3, #24
    d0c0:	681c      	ldr	r4, [r3, #0]
    d0c2:	2315      	movs	r3, #21
    d0c4:	18fb      	adds	r3, r7, r3
    d0c6:	781b      	ldrb	r3, [r3, #0]
    d0c8:	b25b      	sxtb	r3, r3
    d0ca:	b29a      	uxth	r2, r3
    d0cc:	230a      	movs	r3, #10
    d0ce:	18fb      	adds	r3, r7, r3
    d0d0:	881b      	ldrh	r3, [r3, #0]
    d0d2:	18d3      	adds	r3, r2, r3
    d0d4:	b29a      	uxth	r2, r3
    d0d6:	2329      	movs	r3, #41	; 0x29
    d0d8:	18fb      	adds	r3, r7, r3
    d0da:	781b      	ldrb	r3, [r3, #0]
    d0dc:	b29b      	uxth	r3, r3
    d0de:	18d3      	adds	r3, r2, r3
    d0e0:	b29b      	uxth	r3, r3
    d0e2:	b219      	sxth	r1, r3
    d0e4:	2314      	movs	r3, #20
    d0e6:	18fb      	adds	r3, r7, r3
    d0e8:	781b      	ldrb	r3, [r3, #0]
    d0ea:	b25b      	sxtb	r3, r3
    d0ec:	b29a      	uxth	r2, r3
    d0ee:	2308      	movs	r3, #8
    d0f0:	18fb      	adds	r3, r7, r3
    d0f2:	881b      	ldrh	r3, [r3, #0]
    d0f4:	18d3      	adds	r3, r2, r3
    d0f6:	b29a      	uxth	r2, r3
    d0f8:	2328      	movs	r3, #40	; 0x28
    d0fa:	18fb      	adds	r3, r7, r3
    d0fc:	781b      	ldrb	r3, [r3, #0]
    d0fe:	b29b      	uxth	r3, r3
    d100:	18d3      	adds	r3, r2, r3
    d102:	b29b      	uxth	r3, r3
    d104:	b21a      	sxth	r2, r3
    d106:	2348      	movs	r3, #72	; 0x48
    d108:	18fb      	adds	r3, r7, r3
    d10a:	881b      	ldrh	r3, [r3, #0]
    d10c:	68f8      	ldr	r0, [r7, #12]
    d10e:	47a0      	blx	r4
    d110:	e03e      	b.n	d190 <_ZN12Adafruit_GFX8drawCharEsshtth+0x594>
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
                          size, size, color);
    d112:	68fb      	ldr	r3, [r7, #12]
    d114:	681b      	ldr	r3, [r3, #0]
    d116:	331c      	adds	r3, #28
    d118:	681c      	ldr	r4, [r3, #0]
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    d11a:	2324      	movs	r3, #36	; 0x24
    d11c:	18fb      	adds	r3, r7, r3
    d11e:	2200      	movs	r2, #0
    d120:	5e9a      	ldrsh	r2, [r3, r2]
    d122:	2329      	movs	r3, #41	; 0x29
    d124:	18fb      	adds	r3, r7, r3
    d126:	781b      	ldrb	r3, [r3, #0]
    d128:	18d3      	adds	r3, r2, r3
    d12a:	b29b      	uxth	r3, r3
    d12c:	2250      	movs	r2, #80	; 0x50
    d12e:	18ba      	adds	r2, r7, r2
    d130:	7812      	ldrb	r2, [r2, #0]
    d132:	b292      	uxth	r2, r2
    d134:	4353      	muls	r3, r2
    d136:	b29a      	uxth	r2, r3
    d138:	230a      	movs	r3, #10
    d13a:	18fb      	adds	r3, r7, r3
    d13c:	881b      	ldrh	r3, [r3, #0]
    d13e:	18d3      	adds	r3, r2, r3
    d140:	b29b      	uxth	r3, r3
    d142:	b219      	sxth	r1, r3
    d144:	2322      	movs	r3, #34	; 0x22
    d146:	18fb      	adds	r3, r7, r3
    d148:	2200      	movs	r2, #0
    d14a:	5e9a      	ldrsh	r2, [r3, r2]
    d14c:	2328      	movs	r3, #40	; 0x28
    d14e:	18fb      	adds	r3, r7, r3
    d150:	781b      	ldrb	r3, [r3, #0]
    d152:	18d3      	adds	r3, r2, r3
    d154:	b29b      	uxth	r3, r3
    d156:	2250      	movs	r2, #80	; 0x50
    d158:	18ba      	adds	r2, r7, r2
    d15a:	7812      	ldrb	r2, [r2, #0]
    d15c:	b292      	uxth	r2, r2
    d15e:	4353      	muls	r3, r2
    d160:	b29a      	uxth	r2, r3
    d162:	2308      	movs	r3, #8
    d164:	18fb      	adds	r3, r7, r3
    d166:	881b      	ldrh	r3, [r3, #0]
    d168:	18d3      	adds	r3, r2, r3
    d16a:	b29b      	uxth	r3, r3
    d16c:	b21d      	sxth	r5, r3
    d16e:	2350      	movs	r3, #80	; 0x50
    d170:	18fb      	adds	r3, r7, r3
    d172:	781b      	ldrb	r3, [r3, #0]
    d174:	b21e      	sxth	r6, r3
    d176:	2350      	movs	r3, #80	; 0x50
    d178:	18fb      	adds	r3, r7, r3
    d17a:	781b      	ldrb	r3, [r3, #0]
    d17c:	b21b      	sxth	r3, r3
                          size, size, color);
    d17e:	68f8      	ldr	r0, [r7, #12]
    d180:	2248      	movs	r2, #72	; 0x48
    d182:	18ba      	adds	r2, r7, r2
    d184:	8812      	ldrh	r2, [r2, #0]
    d186:	9201      	str	r2, [sp, #4]
    d188:	9300      	str	r3, [sp, #0]
    d18a:	0033      	movs	r3, r6
    d18c:	002a      	movs	r2, r5
    d18e:	47a0      	blx	r4
                    }
                }
                bits <<= 1;
    d190:	2327      	movs	r3, #39	; 0x27
    d192:	18fa      	adds	r2, r7, r3
    d194:	2327      	movs	r3, #39	; 0x27
    d196:	18fb      	adds	r3, r7, r3
    d198:	781b      	ldrb	r3, [r3, #0]
    d19a:	18db      	adds	r3, r3, r3
    d19c:	7013      	strb	r3, [r2, #0]
            for(xx=0; xx<w; xx++) {
    d19e:	2329      	movs	r3, #41	; 0x29
    d1a0:	18fb      	adds	r3, r7, r3
    d1a2:	781a      	ldrb	r2, [r3, #0]
    d1a4:	2329      	movs	r3, #41	; 0x29
    d1a6:	18fb      	adds	r3, r7, r3
    d1a8:	3201      	adds	r2, #1
    d1aa:	701a      	strb	r2, [r3, #0]
    d1ac:	e754      	b.n	d058 <_ZN12Adafruit_GFX8drawCharEsshtth+0x45c>
        for(yy=0; yy<h; yy++) {
    d1ae:	2328      	movs	r3, #40	; 0x28
    d1b0:	18fb      	adds	r3, r7, r3
    d1b2:	781a      	ldrb	r2, [r3, #0]
    d1b4:	2328      	movs	r3, #40	; 0x28
    d1b6:	18fb      	adds	r3, r7, r3
    d1b8:	3201      	adds	r2, #1
    d1ba:	701a      	strb	r2, [r3, #0]
    d1bc:	e73f      	b.n	d03e <_ZN12Adafruit_GFX8drawCharEsshtth+0x442>
            }
        }
        endWrite();
    d1be:	68fb      	ldr	r3, [r7, #12]
    d1c0:	681b      	ldr	r3, [r3, #0]
    d1c2:	332c      	adds	r3, #44	; 0x2c
    d1c4:	681b      	ldr	r3, [r3, #0]
    d1c6:	68fa      	ldr	r2, [r7, #12]
    d1c8:	0010      	movs	r0, r2
    d1ca:	4798      	blx	r3
    d1cc:	e000      	b.n	d1d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d4>
            return;
    d1ce:	46c0      	nop			; (mov r8, r8)

    } // End classic vs custom font
}
    d1d0:	46bd      	mov	sp, r7
    d1d2:	b00d      	add	sp, #52	; 0x34
    d1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1d6:	46c0      	nop			; (mov r8, r8)

0000d1d8 <_ZN12Adafruit_GFX5writeEh>:

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
    d1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1da:	b08b      	sub	sp, #44	; 0x2c
    d1dc:	af04      	add	r7, sp, #16
    d1de:	6078      	str	r0, [r7, #4]
    d1e0:	000a      	movs	r2, r1
    d1e2:	1cfb      	adds	r3, r7, #3
    d1e4:	701a      	strb	r2, [r3, #0]
#else
void Adafruit_GFX::write(uint8_t c) {
#endif
    if(!gfxFont) { // 'Classic' built-in font
    d1e6:	687b      	ldr	r3, [r7, #4]
    d1e8:	69db      	ldr	r3, [r3, #28]
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	d16a      	bne.n	d2c4 <_ZN12Adafruit_GFX5writeEh+0xec>

        if(c == '\n') {                        // Newline?
    d1ee:	1cfb      	adds	r3, r7, #3
    d1f0:	781b      	ldrb	r3, [r3, #0]
    d1f2:	2b0a      	cmp	r3, #10
    d1f4:	d111      	bne.n	d21a <_ZN12Adafruit_GFX5writeEh+0x42>
            cursor_x  = 0;                     // Reset x to zero,
    d1f6:	687b      	ldr	r3, [r7, #4]
    d1f8:	2200      	movs	r2, #0
    d1fa:	821a      	strh	r2, [r3, #16]
            cursor_y += textsize * 8;          // advance y one line
    d1fc:	687b      	ldr	r3, [r7, #4]
    d1fe:	2212      	movs	r2, #18
    d200:	5e9b      	ldrsh	r3, [r3, r2]
    d202:	b29a      	uxth	r2, r3
    d204:	687b      	ldr	r3, [r7, #4]
    d206:	7e1b      	ldrb	r3, [r3, #24]
    d208:	b29b      	uxth	r3, r3
    d20a:	00db      	lsls	r3, r3, #3
    d20c:	b29b      	uxth	r3, r3
    d20e:	18d3      	adds	r3, r2, r3
    d210:	b29b      	uxth	r3, r3
    d212:	b21a      	sxth	r2, r3
    d214:	687b      	ldr	r3, [r7, #4]
    d216:	825a      	strh	r2, [r3, #18]
    d218:	e110      	b.n	d43c <_ZN12Adafruit_GFX5writeEh+0x264>
        } else if(c != '\r') {                 // Ignore carriage returns
    d21a:	1cfb      	adds	r3, r7, #3
    d21c:	781b      	ldrb	r3, [r3, #0]
    d21e:	2b0d      	cmp	r3, #13
    d220:	d100      	bne.n	d224 <_ZN12Adafruit_GFX5writeEh+0x4c>
    d222:	e10b      	b.n	d43c <_ZN12Adafruit_GFX5writeEh+0x264>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
    d224:	687b      	ldr	r3, [r7, #4]
    d226:	7e9b      	ldrb	r3, [r3, #26]
    d228:	2b00      	cmp	r3, #0
    d22a:	d021      	beq.n	d270 <_ZN12Adafruit_GFX5writeEh+0x98>
    d22c:	687b      	ldr	r3, [r7, #4]
    d22e:	2210      	movs	r2, #16
    d230:	5e9b      	ldrsh	r3, [r3, r2]
    d232:	0019      	movs	r1, r3
    d234:	687b      	ldr	r3, [r7, #4]
    d236:	7e1b      	ldrb	r3, [r3, #24]
    d238:	001a      	movs	r2, r3
    d23a:	0013      	movs	r3, r2
    d23c:	005b      	lsls	r3, r3, #1
    d23e:	189b      	adds	r3, r3, r2
    d240:	005b      	lsls	r3, r3, #1
    d242:	18cb      	adds	r3, r1, r3
    d244:	687a      	ldr	r2, [r7, #4]
    d246:	210c      	movs	r1, #12
    d248:	5e52      	ldrsh	r2, [r2, r1]
    d24a:	4293      	cmp	r3, r2
    d24c:	dd10      	ble.n	d270 <_ZN12Adafruit_GFX5writeEh+0x98>
                cursor_x  = 0;                 // Reset x to zero,
    d24e:	687b      	ldr	r3, [r7, #4]
    d250:	2200      	movs	r2, #0
    d252:	821a      	strh	r2, [r3, #16]
                cursor_y += textsize * 8;      // advance y one line
    d254:	687b      	ldr	r3, [r7, #4]
    d256:	2212      	movs	r2, #18
    d258:	5e9b      	ldrsh	r3, [r3, r2]
    d25a:	b29a      	uxth	r2, r3
    d25c:	687b      	ldr	r3, [r7, #4]
    d25e:	7e1b      	ldrb	r3, [r3, #24]
    d260:	b29b      	uxth	r3, r3
    d262:	00db      	lsls	r3, r3, #3
    d264:	b29b      	uxth	r3, r3
    d266:	18d3      	adds	r3, r2, r3
    d268:	b29b      	uxth	r3, r3
    d26a:	b21a      	sxth	r2, r3
    d26c:	687b      	ldr	r3, [r7, #4]
    d26e:	825a      	strh	r2, [r3, #18]
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    d270:	687b      	ldr	r3, [r7, #4]
    d272:	2410      	movs	r4, #16
    d274:	5f1c      	ldrsh	r4, [r3, r4]
    d276:	687b      	ldr	r3, [r7, #4]
    d278:	2512      	movs	r5, #18
    d27a:	5f5d      	ldrsh	r5, [r3, r5]
    d27c:	687b      	ldr	r3, [r7, #4]
    d27e:	8a9b      	ldrh	r3, [r3, #20]
    d280:	687a      	ldr	r2, [r7, #4]
    d282:	8ad2      	ldrh	r2, [r2, #22]
    d284:	6879      	ldr	r1, [r7, #4]
    d286:	7e09      	ldrb	r1, [r1, #24]
    d288:	1cf8      	adds	r0, r7, #3
    d28a:	7806      	ldrb	r6, [r0, #0]
    d28c:	6878      	ldr	r0, [r7, #4]
    d28e:	9102      	str	r1, [sp, #8]
    d290:	9201      	str	r2, [sp, #4]
    d292:	9300      	str	r3, [sp, #0]
    d294:	0033      	movs	r3, r6
    d296:	002a      	movs	r2, r5
    d298:	0021      	movs	r1, r4
    d29a:	f7ff fcaf 	bl	cbfc <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
    d29e:	687b      	ldr	r3, [r7, #4]
    d2a0:	2210      	movs	r2, #16
    d2a2:	5e9b      	ldrsh	r3, [r3, r2]
    d2a4:	b29a      	uxth	r2, r3
    d2a6:	687b      	ldr	r3, [r7, #4]
    d2a8:	7e1b      	ldrb	r3, [r3, #24]
    d2aa:	b29b      	uxth	r3, r3
    d2ac:	1c19      	adds	r1, r3, #0
    d2ae:	1c0b      	adds	r3, r1, #0
    d2b0:	18db      	adds	r3, r3, r3
    d2b2:	185b      	adds	r3, r3, r1
    d2b4:	18db      	adds	r3, r3, r3
    d2b6:	b29b      	uxth	r3, r3
    d2b8:	18d3      	adds	r3, r2, r3
    d2ba:	b29b      	uxth	r3, r3
    d2bc:	b21a      	sxth	r2, r3
    d2be:	687b      	ldr	r3, [r7, #4]
    d2c0:	821a      	strh	r2, [r3, #16]
    d2c2:	e0bb      	b.n	d43c <_ZN12Adafruit_GFX5writeEh+0x264>
        }

    } else { // Custom font

        if(c == '\n') {
    d2c4:	1cfb      	adds	r3, r7, #3
    d2c6:	781b      	ldrb	r3, [r3, #0]
    d2c8:	2b0a      	cmp	r3, #10
    d2ca:	d116      	bne.n	d2fa <_ZN12Adafruit_GFX5writeEh+0x122>
            cursor_x  = 0;
    d2cc:	687b      	ldr	r3, [r7, #4]
    d2ce:	2200      	movs	r2, #0
    d2d0:	821a      	strh	r2, [r3, #16]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d2d2:	687b      	ldr	r3, [r7, #4]
    d2d4:	2212      	movs	r2, #18
    d2d6:	5e9b      	ldrsh	r3, [r3, r2]
    d2d8:	b29a      	uxth	r2, r3
            cursor_y += (int16_t)textsize *
    d2da:	687b      	ldr	r3, [r7, #4]
    d2dc:	7e1b      	ldrb	r3, [r3, #24]
    d2de:	b299      	uxth	r1, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d2e0:	687b      	ldr	r3, [r7, #4]
    d2e2:	69db      	ldr	r3, [r3, #28]
    d2e4:	330a      	adds	r3, #10
    d2e6:	781b      	ldrb	r3, [r3, #0]
    d2e8:	b29b      	uxth	r3, r3
            cursor_y += (int16_t)textsize *
    d2ea:	434b      	muls	r3, r1
    d2ec:	b29b      	uxth	r3, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d2ee:	18d3      	adds	r3, r2, r3
    d2f0:	b29b      	uxth	r3, r3
    d2f2:	b21a      	sxth	r2, r3
            cursor_y += (int16_t)textsize *
    d2f4:	687b      	ldr	r3, [r7, #4]
    d2f6:	825a      	strh	r2, [r3, #18]
    d2f8:	e0a0      	b.n	d43c <_ZN12Adafruit_GFX5writeEh+0x264>
        } else if(c != '\r') {
    d2fa:	1cfb      	adds	r3, r7, #3
    d2fc:	781b      	ldrb	r3, [r3, #0]
    d2fe:	2b0d      	cmp	r3, #13
    d300:	d100      	bne.n	d304 <_ZN12Adafruit_GFX5writeEh+0x12c>
    d302:	e09b      	b.n	d43c <_ZN12Adafruit_GFX5writeEh+0x264>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    d304:	687b      	ldr	r3, [r7, #4]
    d306:	69db      	ldr	r3, [r3, #28]
    d308:	3308      	adds	r3, #8
    d30a:	001a      	movs	r2, r3
    d30c:	2317      	movs	r3, #23
    d30e:	18fb      	adds	r3, r7, r3
    d310:	7812      	ldrb	r2, [r2, #0]
    d312:	701a      	strb	r2, [r3, #0]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    d314:	1cfb      	adds	r3, r7, #3
    d316:	781a      	ldrb	r2, [r3, #0]
    d318:	2317      	movs	r3, #23
    d31a:	18fb      	adds	r3, r7, r3
    d31c:	781b      	ldrb	r3, [r3, #0]
    d31e:	429a      	cmp	r2, r3
    d320:	da00      	bge.n	d324 <_ZN12Adafruit_GFX5writeEh+0x14c>
    d322:	e08b      	b.n	d43c <_ZN12Adafruit_GFX5writeEh+0x264>
    d324:	1cfb      	adds	r3, r7, #3
    d326:	781a      	ldrb	r2, [r3, #0]
    d328:	687b      	ldr	r3, [r7, #4]
    d32a:	69db      	ldr	r3, [r3, #28]
    d32c:	3309      	adds	r3, #9
    d32e:	781b      	ldrb	r3, [r3, #0]
    d330:	429a      	cmp	r2, r3
    d332:	dd00      	ble.n	d336 <_ZN12Adafruit_GFX5writeEh+0x15e>
    d334:	e082      	b.n	d43c <_ZN12Adafruit_GFX5writeEh+0x264>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
    d336:	1cfb      	adds	r3, r7, #3
    d338:	781a      	ldrb	r2, [r3, #0]
    d33a:	2317      	movs	r3, #23
    d33c:	18fb      	adds	r3, r7, r3
    d33e:	781b      	ldrb	r3, [r3, #0]
    d340:	1ad3      	subs	r3, r2, r3
    d342:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
    d344:	687b      	ldr	r3, [r7, #4]
    d346:	69db      	ldr	r3, [r3, #28]
    d348:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
    d34a:	681b      	ldr	r3, [r3, #0]
    d34c:	18d3      	adds	r3, r2, r3
    d34e:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
    d350:	693b      	ldr	r3, [r7, #16]
    d352:	1c9a      	adds	r2, r3, #2
    d354:	230f      	movs	r3, #15
    d356:	18fb      	adds	r3, r7, r3
    d358:	7812      	ldrb	r2, [r2, #0]
    d35a:	701a      	strb	r2, [r3, #0]
                          h     = pgm_read_byte(&glyph->height);
    d35c:	693b      	ldr	r3, [r7, #16]
    d35e:	1cda      	adds	r2, r3, #3
    d360:	230e      	movs	r3, #14
    d362:	18fb      	adds	r3, r7, r3
    d364:	7812      	ldrb	r2, [r2, #0]
    d366:	701a      	strb	r2, [r3, #0]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    d368:	230f      	movs	r3, #15
    d36a:	18fb      	adds	r3, r7, r3
    d36c:	781b      	ldrb	r3, [r3, #0]
    d36e:	2b00      	cmp	r3, #0
    d370:	dd52      	ble.n	d418 <_ZN12Adafruit_GFX5writeEh+0x240>
    d372:	230e      	movs	r3, #14
    d374:	18fb      	adds	r3, r7, r3
    d376:	781b      	ldrb	r3, [r3, #0]
    d378:	2b00      	cmp	r3, #0
    d37a:	dd4d      	ble.n	d418 <_ZN12Adafruit_GFX5writeEh+0x240>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    d37c:	693b      	ldr	r3, [r7, #16]
    d37e:	3305      	adds	r3, #5
    d380:	781b      	ldrb	r3, [r3, #0]
    d382:	b25a      	sxtb	r2, r3
    d384:	230c      	movs	r3, #12
    d386:	18fb      	adds	r3, r7, r3
    d388:	801a      	strh	r2, [r3, #0]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
    d38a:	687b      	ldr	r3, [r7, #4]
    d38c:	7e9b      	ldrb	r3, [r3, #26]
    d38e:	2b00      	cmp	r3, #0
    d390:	d02b      	beq.n	d3ea <_ZN12Adafruit_GFX5writeEh+0x212>
    d392:	687b      	ldr	r3, [r7, #4]
    d394:	2210      	movs	r2, #16
    d396:	5e9b      	ldrsh	r3, [r3, r2]
    d398:	0019      	movs	r1, r3
    d39a:	687b      	ldr	r3, [r7, #4]
    d39c:	7e1b      	ldrb	r3, [r3, #24]
    d39e:	0018      	movs	r0, r3
    d3a0:	230c      	movs	r3, #12
    d3a2:	18fb      	adds	r3, r7, r3
    d3a4:	2200      	movs	r2, #0
    d3a6:	5e9a      	ldrsh	r2, [r3, r2]
    d3a8:	230f      	movs	r3, #15
    d3aa:	18fb      	adds	r3, r7, r3
    d3ac:	781b      	ldrb	r3, [r3, #0]
    d3ae:	18d3      	adds	r3, r2, r3
    d3b0:	4343      	muls	r3, r0
    d3b2:	18cb      	adds	r3, r1, r3
    d3b4:	687a      	ldr	r2, [r7, #4]
    d3b6:	210c      	movs	r1, #12
    d3b8:	5e52      	ldrsh	r2, [r2, r1]
    d3ba:	4293      	cmp	r3, r2
    d3bc:	dd15      	ble.n	d3ea <_ZN12Adafruit_GFX5writeEh+0x212>
                        cursor_x  = 0;
    d3be:	687b      	ldr	r3, [r7, #4]
    d3c0:	2200      	movs	r2, #0
    d3c2:	821a      	strh	r2, [r3, #16]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d3c4:	687b      	ldr	r3, [r7, #4]
    d3c6:	2212      	movs	r2, #18
    d3c8:	5e9b      	ldrsh	r3, [r3, r2]
    d3ca:	b29a      	uxth	r2, r3
                        cursor_y += (int16_t)textsize *
    d3cc:	687b      	ldr	r3, [r7, #4]
    d3ce:	7e1b      	ldrb	r3, [r3, #24]
    d3d0:	b299      	uxth	r1, r3
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d3d2:	687b      	ldr	r3, [r7, #4]
    d3d4:	69db      	ldr	r3, [r3, #28]
    d3d6:	330a      	adds	r3, #10
    d3d8:	781b      	ldrb	r3, [r3, #0]
    d3da:	b29b      	uxth	r3, r3
                        cursor_y += (int16_t)textsize *
    d3dc:	434b      	muls	r3, r1
    d3de:	b29b      	uxth	r3, r3
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d3e0:	18d3      	adds	r3, r2, r3
    d3e2:	b29b      	uxth	r3, r3
    d3e4:	b21a      	sxth	r2, r3
                        cursor_y += (int16_t)textsize *
    d3e6:	687b      	ldr	r3, [r7, #4]
    d3e8:	825a      	strh	r2, [r3, #18]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    d3ea:	687b      	ldr	r3, [r7, #4]
    d3ec:	2410      	movs	r4, #16
    d3ee:	5f1c      	ldrsh	r4, [r3, r4]
    d3f0:	687b      	ldr	r3, [r7, #4]
    d3f2:	2512      	movs	r5, #18
    d3f4:	5f5d      	ldrsh	r5, [r3, r5]
    d3f6:	687b      	ldr	r3, [r7, #4]
    d3f8:	8a9b      	ldrh	r3, [r3, #20]
    d3fa:	687a      	ldr	r2, [r7, #4]
    d3fc:	8ad2      	ldrh	r2, [r2, #22]
    d3fe:	6879      	ldr	r1, [r7, #4]
    d400:	7e09      	ldrb	r1, [r1, #24]
    d402:	1cf8      	adds	r0, r7, #3
    d404:	7806      	ldrb	r6, [r0, #0]
    d406:	6878      	ldr	r0, [r7, #4]
    d408:	9102      	str	r1, [sp, #8]
    d40a:	9201      	str	r2, [sp, #4]
    d40c:	9300      	str	r3, [sp, #0]
    d40e:	0033      	movs	r3, r6
    d410:	002a      	movs	r2, r5
    d412:	0021      	movs	r1, r4
    d414:	f7ff fbf2 	bl	cbfc <_ZN12Adafruit_GFX8drawCharEsshtth>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    d418:	687b      	ldr	r3, [r7, #4]
    d41a:	2210      	movs	r2, #16
    d41c:	5e9b      	ldrsh	r3, [r3, r2]
    d41e:	b29a      	uxth	r2, r3
    d420:	693b      	ldr	r3, [r7, #16]
    d422:	3304      	adds	r3, #4
    d424:	781b      	ldrb	r3, [r3, #0]
    d426:	b29b      	uxth	r3, r3
    d428:	6879      	ldr	r1, [r7, #4]
    d42a:	7e09      	ldrb	r1, [r1, #24]
    d42c:	b289      	uxth	r1, r1
    d42e:	434b      	muls	r3, r1
    d430:	b29b      	uxth	r3, r3
    d432:	18d3      	adds	r3, r2, r3
    d434:	b29b      	uxth	r3, r3
    d436:	b21a      	sxth	r2, r3
    d438:	687b      	ldr	r3, [r7, #4]
    d43a:	821a      	strh	r2, [r3, #16]
            }
        }

    }
#if ARDUINO >= 100
    return 1;
    d43c:	2301      	movs	r3, #1
#endif
}
    d43e:	0018      	movs	r0, r3
    d440:	46bd      	mov	sp, r7
    d442:	b007      	add	sp, #28
    d444:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d446 <_ZN12Adafruit_GFX11setRotationEh>:

uint8_t Adafruit_GFX::getRotation(void) const {
    return rotation;
}

void Adafruit_GFX::setRotation(uint8_t x) {
    d446:	b580      	push	{r7, lr}
    d448:	b082      	sub	sp, #8
    d44a:	af00      	add	r7, sp, #0
    d44c:	6078      	str	r0, [r7, #4]
    d44e:	000a      	movs	r2, r1
    d450:	1cfb      	adds	r3, r7, #3
    d452:	701a      	strb	r2, [r3, #0]
    rotation = (x & 3);
    d454:	1cfb      	adds	r3, r7, #3
    d456:	781b      	ldrb	r3, [r3, #0]
    d458:	2203      	movs	r2, #3
    d45a:	4013      	ands	r3, r2
    d45c:	b2da      	uxtb	r2, r3
    d45e:	687b      	ldr	r3, [r7, #4]
    d460:	765a      	strb	r2, [r3, #25]
    switch(rotation) {
    d462:	687b      	ldr	r3, [r7, #4]
    d464:	7e5b      	ldrb	r3, [r3, #25]
    d466:	2b01      	cmp	r3, #1
    d468:	d013      	beq.n	d492 <_ZN12Adafruit_GFX11setRotationEh+0x4c>
    d46a:	dc02      	bgt.n	d472 <_ZN12Adafruit_GFX11setRotationEh+0x2c>
    d46c:	2b00      	cmp	r3, #0
    d46e:	d005      	beq.n	d47c <_ZN12Adafruit_GFX11setRotationEh+0x36>
        case 3:
            _width  = HEIGHT;
            _height = WIDTH;
            break;
    }
}
    d470:	e01a      	b.n	d4a8 <_ZN12Adafruit_GFX11setRotationEh+0x62>
    switch(rotation) {
    d472:	2b02      	cmp	r3, #2
    d474:	d002      	beq.n	d47c <_ZN12Adafruit_GFX11setRotationEh+0x36>
    d476:	2b03      	cmp	r3, #3
    d478:	d00b      	beq.n	d492 <_ZN12Adafruit_GFX11setRotationEh+0x4c>
}
    d47a:	e015      	b.n	d4a8 <_ZN12Adafruit_GFX11setRotationEh+0x62>
            _width  = WIDTH;
    d47c:	687b      	ldr	r3, [r7, #4]
    d47e:	2208      	movs	r2, #8
    d480:	5e9a      	ldrsh	r2, [r3, r2]
    d482:	687b      	ldr	r3, [r7, #4]
    d484:	819a      	strh	r2, [r3, #12]
            _height = HEIGHT;
    d486:	687b      	ldr	r3, [r7, #4]
    d488:	220a      	movs	r2, #10
    d48a:	5e9a      	ldrsh	r2, [r3, r2]
    d48c:	687b      	ldr	r3, [r7, #4]
    d48e:	81da      	strh	r2, [r3, #14]
            break;
    d490:	e00a      	b.n	d4a8 <_ZN12Adafruit_GFX11setRotationEh+0x62>
            _width  = HEIGHT;
    d492:	687b      	ldr	r3, [r7, #4]
    d494:	220a      	movs	r2, #10
    d496:	5e9a      	ldrsh	r2, [r3, r2]
    d498:	687b      	ldr	r3, [r7, #4]
    d49a:	819a      	strh	r2, [r3, #12]
            _height = WIDTH;
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	2208      	movs	r2, #8
    d4a0:	5e9a      	ldrsh	r2, [r3, r2]
    d4a2:	687b      	ldr	r3, [r7, #4]
    d4a4:	81da      	strh	r2, [r3, #14]
            break;
    d4a6:	46c0      	nop			; (mov r8, r8)
}
    d4a8:	46c0      	nop			; (mov r8, r8)
    d4aa:	46bd      	mov	sp, r7
    d4ac:	b002      	add	sp, #8
    d4ae:	bd80      	pop	{r7, pc}

0000d4b0 <_ZNK12Adafruit_GFX5widthEv>:
        *h  = maxy - miny + 1;
    }
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
    d4b0:	b580      	push	{r7, lr}
    d4b2:	b082      	sub	sp, #8
    d4b4:	af00      	add	r7, sp, #0
    d4b6:	6078      	str	r0, [r7, #4]
    return _width;
    d4b8:	687b      	ldr	r3, [r7, #4]
    d4ba:	220c      	movs	r2, #12
    d4bc:	5e9b      	ldrsh	r3, [r3, r2]
}
    d4be:	0018      	movs	r0, r3
    d4c0:	46bd      	mov	sp, r7
    d4c2:	b002      	add	sp, #8
    d4c4:	bd80      	pop	{r7, pc}

0000d4c6 <_ZNK12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) const {
    d4c6:	b580      	push	{r7, lr}
    d4c8:	b082      	sub	sp, #8
    d4ca:	af00      	add	r7, sp, #0
    d4cc:	6078      	str	r0, [r7, #4]
    return _height;
    d4ce:	687b      	ldr	r3, [r7, #4]
    d4d0:	220e      	movs	r2, #14
    d4d2:	5e9b      	ldrsh	r3, [r3, r2]
}
    d4d4:	0018      	movs	r0, r3
    d4d6:	46bd      	mov	sp, r7
    d4d8:	b002      	add	sp, #8
    d4da:	bd80      	pop	{r7, pc}

0000d4dc <_ZN12Adafruit_GFX13invertDisplayEb>:

void Adafruit_GFX::invertDisplay(boolean i) {
    d4dc:	b580      	push	{r7, lr}
    d4de:	b082      	sub	sp, #8
    d4e0:	af00      	add	r7, sp, #0
    d4e2:	6078      	str	r0, [r7, #4]
    d4e4:	000a      	movs	r2, r1
    d4e6:	1cfb      	adds	r3, r7, #3
    d4e8:	701a      	strb	r2, [r3, #0]
    // Do nothing, must be subclassed if supported by hardware
}
    d4ea:	46c0      	nop			; (mov r8, r8)
    d4ec:	46bd      	mov	sp, r7
    d4ee:	b002      	add	sp, #8
    d4f0:	bd80      	pop	{r7, pc}

0000d4f2 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    d4f2:	b580      	push	{r7, lr}
    d4f4:	af00      	add	r7, sp, #0
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  while (1)
    d4f6:	e7fe      	b.n	d4f6 <__cxa_pure_virtual+0x4>

0000d4f8 <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
    d4f8:	b580      	push	{r7, lr}
    d4fa:	b084      	sub	sp, #16
    d4fc:	af00      	add	r7, sp, #0
    d4fe:	60f8      	str	r0, [r7, #12]
    d500:	60b9      	str	r1, [r7, #8]
    d502:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
    d504:	687a      	ldr	r2, [r7, #4]
    d506:	68b9      	ldr	r1, [r7, #8]
    d508:	68fb      	ldr	r3, [r7, #12]
    d50a:	0018      	movs	r0, r3
    d50c:	f000 f805 	bl	d51a <ltoa>
    d510:	0003      	movs	r3, r0
        }
    d512:	0018      	movs	r0, r3
    d514:	46bd      	mov	sp, r7
    d516:	b004      	add	sp, #16
    d518:	bd80      	pop	{r7, pc}

0000d51a <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
    d51a:	b580      	push	{r7, lr}
    d51c:	b092      	sub	sp, #72	; 0x48
    d51e:	af00      	add	r7, sp, #0
    d520:	60f8      	str	r0, [r7, #12]
    d522:	60b9      	str	r1, [r7, #8]
    d524:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    d526:	2310      	movs	r3, #16
    d528:	18fb      	adds	r3, r7, r3
    d52a:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
    d52c:	68bb      	ldr	r3, [r7, #8]
    d52e:	2b00      	cmp	r3, #0
    d530:	d101      	bne.n	d536 <ltoa+0x1c>
            {
                return 0;
    d532:	2300      	movs	r3, #0
    d534:	e063      	b.n	d5fe <ltoa+0xe4>
            }

            if (radix > 36 || radix <= 1)
    d536:	687b      	ldr	r3, [r7, #4]
    d538:	2b24      	cmp	r3, #36	; 0x24
    d53a:	dc02      	bgt.n	d542 <ltoa+0x28>
    d53c:	687b      	ldr	r3, [r7, #4]
    d53e:	2b01      	cmp	r3, #1
    d540:	dc01      	bgt.n	d546 <ltoa+0x2c>
            {
                return 0;
    d542:	2300      	movs	r3, #0
    d544:	e05b      	b.n	d5fe <ltoa+0xe4>
            }

            sign = (radix == 10 && value < 0);
    d546:	687b      	ldr	r3, [r7, #4]
    d548:	2b0a      	cmp	r3, #10
    d54a:	d104      	bne.n	d556 <ltoa+0x3c>
    d54c:	68fb      	ldr	r3, [r7, #12]
    d54e:	2b00      	cmp	r3, #0
    d550:	da01      	bge.n	d556 <ltoa+0x3c>
    d552:	2301      	movs	r3, #1
    d554:	e000      	b.n	d558 <ltoa+0x3e>
    d556:	2300      	movs	r3, #0
    d558:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
    d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d55c:	2b00      	cmp	r3, #0
    d55e:	d003      	beq.n	d568 <ltoa+0x4e>
            {
                v = -value;
    d560:	68fb      	ldr	r3, [r7, #12]
    d562:	425b      	negs	r3, r3
    d564:	643b      	str	r3, [r7, #64]	; 0x40
    d566:	e025      	b.n	d5b4 <ltoa+0x9a>
            }
            else
            {
                v = (unsigned long)value;
    d568:	68fb      	ldr	r3, [r7, #12]
    d56a:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
    d56c:	e022      	b.n	d5b4 <ltoa+0x9a>
            {
                i = v % radix;
    d56e:	687a      	ldr	r2, [r7, #4]
    d570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d572:	0011      	movs	r1, r2
    d574:	0018      	movs	r0, r3
    d576:	f001 fa15 	bl	e9a4 <__aeabi_uidivmod>
    d57a:	000b      	movs	r3, r1
    d57c:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
    d57e:	687b      	ldr	r3, [r7, #4]
    d580:	0019      	movs	r1, r3
    d582:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d584:	f001 f988 	bl	e898 <__udivsi3>
    d588:	0003      	movs	r3, r0
    d58a:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    d58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d58e:	2b09      	cmp	r3, #9
    d590:	dc08      	bgt.n	d5a4 <ltoa+0x8a>
                    *tp++ = i + '0';
    d592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d594:	1c5a      	adds	r2, r3, #1
    d596:	647a      	str	r2, [r7, #68]	; 0x44
    d598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d59a:	b2d2      	uxtb	r2, r2
    d59c:	3230      	adds	r2, #48	; 0x30
    d59e:	b2d2      	uxtb	r2, r2
    d5a0:	701a      	strb	r2, [r3, #0]
    d5a2:	e007      	b.n	d5b4 <ltoa+0x9a>
                else
                    *tp++ = i + 'a' - 10;
    d5a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d5a6:	1c5a      	adds	r2, r3, #1
    d5a8:	647a      	str	r2, [r7, #68]	; 0x44
    d5aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d5ac:	b2d2      	uxtb	r2, r2
    d5ae:	3257      	adds	r2, #87	; 0x57
    d5b0:	b2d2      	uxtb	r2, r2
    d5b2:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    d5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d5b6:	2b00      	cmp	r3, #0
    d5b8:	d1d9      	bne.n	d56e <ltoa+0x54>
    d5ba:	2310      	movs	r3, #16
    d5bc:	18fb      	adds	r3, r7, r3
    d5be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d5c0:	429a      	cmp	r2, r3
    d5c2:	d0d4      	beq.n	d56e <ltoa+0x54>
            }

            sp = string;
    d5c4:	68bb      	ldr	r3, [r7, #8]
    d5c6:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
    d5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d5ca:	2b00      	cmp	r3, #0
    d5cc:	d00e      	beq.n	d5ec <ltoa+0xd2>
                *sp++ = '-';
    d5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5d0:	1c5a      	adds	r2, r3, #1
    d5d2:	63fa      	str	r2, [r7, #60]	; 0x3c
    d5d4:	222d      	movs	r2, #45	; 0x2d
    d5d6:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d5d8:	e008      	b.n	d5ec <ltoa+0xd2>
                *sp++ = *--tp;
    d5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5dc:	1c5a      	adds	r2, r3, #1
    d5de:	63fa      	str	r2, [r7, #60]	; 0x3c
    d5e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d5e2:	3a01      	subs	r2, #1
    d5e4:	647a      	str	r2, [r7, #68]	; 0x44
    d5e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d5e8:	7812      	ldrb	r2, [r2, #0]
    d5ea:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d5ec:	2310      	movs	r3, #16
    d5ee:	18fb      	adds	r3, r7, r3
    d5f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d5f2:	429a      	cmp	r2, r3
    d5f4:	d8f1      	bhi.n	d5da <ltoa+0xc0>
            *sp = 0;
    d5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5f8:	2200      	movs	r2, #0
    d5fa:	701a      	strb	r2, [r3, #0]

            return string;
    d5fc:	68bb      	ldr	r3, [r7, #8]
        }
    d5fe:	0018      	movs	r0, r3
    d600:	46bd      	mov	sp, r7
    d602:	b012      	add	sp, #72	; 0x48
    d604:	bd80      	pop	{r7, pc}

0000d606 <utoa>:

        extern char* utoa(unsigned value, char*string, int radix)
        {
    d606:	b580      	push	{r7, lr}
    d608:	b084      	sub	sp, #16
    d60a:	af00      	add	r7, sp, #0
    d60c:	60f8      	str	r0, [r7, #12]
    d60e:	60b9      	str	r1, [r7, #8]
    d610:	607a      	str	r2, [r7, #4]
            return ultoa(value, string, radix);
    d612:	687a      	ldr	r2, [r7, #4]
    d614:	68b9      	ldr	r1, [r7, #8]
    d616:	68fb      	ldr	r3, [r7, #12]
    d618:	0018      	movs	r0, r3
    d61a:	f000 f805 	bl	d628 <ultoa>
    d61e:	0003      	movs	r3, r0
        }
    d620:	0018      	movs	r0, r3
    d622:	46bd      	mov	sp, r7
    d624:	b004      	add	sp, #16
    d626:	bd80      	pop	{r7, pc}

0000d628 <ultoa>:

        extern char* ultoa(unsigned long value, char*string, int radix)
        {
    d628:	b580      	push	{r7, lr}
    d62a:	b092      	sub	sp, #72	; 0x48
    d62c:	af00      	add	r7, sp, #0
    d62e:	60f8      	str	r0, [r7, #12]
    d630:	60b9      	str	r1, [r7, #8]
    d632:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    d634:	2314      	movs	r3, #20
    d636:	18fb      	adds	r3, r7, r3
    d638:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v = value;
    d63a:	68fb      	ldr	r3, [r7, #12]
    d63c:	643b      	str	r3, [r7, #64]	; 0x40
            char* sp;

            if (string == NULL)
    d63e:	68bb      	ldr	r3, [r7, #8]
    d640:	2b00      	cmp	r3, #0
    d642:	d101      	bne.n	d648 <ultoa+0x20>
            {
                return 0;
    d644:	2300      	movs	r3, #0
    d646:	e047      	b.n	d6d8 <ultoa+0xb0>
            }

            if (radix > 36 || radix <= 1)
    d648:	687b      	ldr	r3, [r7, #4]
    d64a:	2b24      	cmp	r3, #36	; 0x24
    d64c:	dc02      	bgt.n	d654 <ultoa+0x2c>
    d64e:	687b      	ldr	r3, [r7, #4]
    d650:	2b01      	cmp	r3, #1
    d652:	dc24      	bgt.n	d69e <ultoa+0x76>
            {
                return 0;
    d654:	2300      	movs	r3, #0
    d656:	e03f      	b.n	d6d8 <ultoa+0xb0>
            }

            while (v || tp == tmp)
            {
                i = v % radix;
    d658:	687a      	ldr	r2, [r7, #4]
    d65a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d65c:	0011      	movs	r1, r2
    d65e:	0018      	movs	r0, r3
    d660:	f001 f9a0 	bl	e9a4 <__aeabi_uidivmod>
    d664:	000b      	movs	r3, r1
    d666:	63bb      	str	r3, [r7, #56]	; 0x38
                v = v / radix;
    d668:	687b      	ldr	r3, [r7, #4]
    d66a:	0019      	movs	r1, r3
    d66c:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d66e:	f001 f913 	bl	e898 <__udivsi3>
    d672:	0003      	movs	r3, r0
    d674:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    d676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d678:	2b09      	cmp	r3, #9
    d67a:	dc08      	bgt.n	d68e <ultoa+0x66>
                    *tp++ = i + '0';
    d67c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d67e:	1c5a      	adds	r2, r3, #1
    d680:	647a      	str	r2, [r7, #68]	; 0x44
    d682:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d684:	b2d2      	uxtb	r2, r2
    d686:	3230      	adds	r2, #48	; 0x30
    d688:	b2d2      	uxtb	r2, r2
    d68a:	701a      	strb	r2, [r3, #0]
    d68c:	e007      	b.n	d69e <ultoa+0x76>
                else
                    *tp++ = i + 'a' - 10;
    d68e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d690:	1c5a      	adds	r2, r3, #1
    d692:	647a      	str	r2, [r7, #68]	; 0x44
    d694:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d696:	b2d2      	uxtb	r2, r2
    d698:	3257      	adds	r2, #87	; 0x57
    d69a:	b2d2      	uxtb	r2, r2
    d69c:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    d69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d6a0:	2b00      	cmp	r3, #0
    d6a2:	d1d9      	bne.n	d658 <ultoa+0x30>
    d6a4:	2314      	movs	r3, #20
    d6a6:	18fb      	adds	r3, r7, r3
    d6a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d6aa:	429a      	cmp	r2, r3
    d6ac:	d0d4      	beq.n	d658 <ultoa+0x30>
            }

            sp = string;
    d6ae:	68bb      	ldr	r3, [r7, #8]
    d6b0:	63fb      	str	r3, [r7, #60]	; 0x3c


            while (tp > tmp)
    d6b2:	e008      	b.n	d6c6 <ultoa+0x9e>
                *sp++ = *--tp;
    d6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d6b6:	1c5a      	adds	r2, r3, #1
    d6b8:	63fa      	str	r2, [r7, #60]	; 0x3c
    d6ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d6bc:	3a01      	subs	r2, #1
    d6be:	647a      	str	r2, [r7, #68]	; 0x44
    d6c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d6c2:	7812      	ldrb	r2, [r2, #0]
    d6c4:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d6c6:	2314      	movs	r3, #20
    d6c8:	18fb      	adds	r3, r7, r3
    d6ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d6cc:	429a      	cmp	r2, r3
    d6ce:	d8f1      	bhi.n	d6b4 <ultoa+0x8c>
            *sp = 0;
    d6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d6d2:	2200      	movs	r2, #0
    d6d4:	701a      	strb	r2, [r3, #0]

            return string;
    d6d6:	68bb      	ldr	r3, [r7, #8]
        }
    d6d8:	0018      	movs	r0, r3
    d6da:	46bd      	mov	sp, r7
    d6dc:	b012      	add	sp, #72	; 0x48
    d6de:	bd80      	pop	{r7, pc}

0000d6e0 <_Znwj>:
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <stdlib.h>

void *operator new(size_t size) {
    d6e0:	b580      	push	{r7, lr}
    d6e2:	b082      	sub	sp, #8
    d6e4:	af00      	add	r7, sp, #0
    d6e6:	6078      	str	r0, [r7, #4]
  return malloc(size);
    d6e8:	687b      	ldr	r3, [r7, #4]
    d6ea:	0018      	movs	r0, r3
    d6ec:	f003 f86c 	bl	107c8 <malloc>
    d6f0:	0003      	movs	r3, r0
}
    d6f2:	0018      	movs	r0, r3
    d6f4:	46bd      	mov	sp, r7
    d6f6:	b002      	add	sp, #8
    d6f8:	bd80      	pop	{r7, pc}

0000d6fa <_ZdlPv>:

void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
    d6fa:	b580      	push	{r7, lr}
    d6fc:	b082      	sub	sp, #8
    d6fe:	af00      	add	r7, sp, #0
    d700:	6078      	str	r0, [r7, #4]
  free(ptr);
    d702:	687b      	ldr	r3, [r7, #4]
    d704:	0018      	movs	r0, r3
    d706:	f003 f869 	bl	107dc <free>
}
    d70a:	46c0      	nop			; (mov r8, r8)
    d70c:	46bd      	mov	sp, r7
    d70e:	b002      	add	sp, #8
    d710:	bd80      	pop	{r7, pc}
	...

0000d714 <__NVIC_EnableIRQ>:
{
    d714:	b580      	push	{r7, lr}
    d716:	b082      	sub	sp, #8
    d718:	af00      	add	r7, sp, #0
    d71a:	0002      	movs	r2, r0
    d71c:	1dfb      	adds	r3, r7, #7
    d71e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    d720:	1dfb      	adds	r3, r7, #7
    d722:	781b      	ldrb	r3, [r3, #0]
    d724:	2b7f      	cmp	r3, #127	; 0x7f
    d726:	d809      	bhi.n	d73c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    d728:	4b06      	ldr	r3, [pc, #24]	; (d744 <__NVIC_EnableIRQ+0x30>)
    d72a:	1dfa      	adds	r2, r7, #7
    d72c:	7812      	ldrb	r2, [r2, #0]
    d72e:	b252      	sxtb	r2, r2
    d730:	211f      	movs	r1, #31
    d732:	400a      	ands	r2, r1
    d734:	2101      	movs	r1, #1
    d736:	4091      	lsls	r1, r2
    d738:	000a      	movs	r2, r1
    d73a:	601a      	str	r2, [r3, #0]
}
    d73c:	46c0      	nop			; (mov r8, r8)
    d73e:	46bd      	mov	sp, r7
    d740:	b002      	add	sp, #8
    d742:	bd80      	pop	{r7, pc}
    d744:	e000e100 	.word	0xe000e100

0000d748 <__NVIC_SetPriority>:
{
    d748:	b5b0      	push	{r4, r5, r7, lr}
    d74a:	b082      	sub	sp, #8
    d74c:	af00      	add	r7, sp, #0
    d74e:	0002      	movs	r2, r0
    d750:	6039      	str	r1, [r7, #0]
    d752:	1dfb      	adds	r3, r7, #7
    d754:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    d756:	1dfb      	adds	r3, r7, #7
    d758:	781b      	ldrb	r3, [r3, #0]
    d75a:	2b7f      	cmp	r3, #127	; 0x7f
    d75c:	d828      	bhi.n	d7b0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d75e:	4c2f      	ldr	r4, [pc, #188]	; (d81c <__NVIC_SetPriority+0xd4>)
    d760:	1dfb      	adds	r3, r7, #7
    d762:	781b      	ldrb	r3, [r3, #0]
    d764:	b25b      	sxtb	r3, r3
    d766:	089b      	lsrs	r3, r3, #2
    d768:	492c      	ldr	r1, [pc, #176]	; (d81c <__NVIC_SetPriority+0xd4>)
    d76a:	1dfa      	adds	r2, r7, #7
    d76c:	7812      	ldrb	r2, [r2, #0]
    d76e:	b252      	sxtb	r2, r2
    d770:	0892      	lsrs	r2, r2, #2
    d772:	32c0      	adds	r2, #192	; 0xc0
    d774:	0092      	lsls	r2, r2, #2
    d776:	5852      	ldr	r2, [r2, r1]
    d778:	1df9      	adds	r1, r7, #7
    d77a:	7809      	ldrb	r1, [r1, #0]
    d77c:	b249      	sxtb	r1, r1
    d77e:	2003      	movs	r0, #3
    d780:	4001      	ands	r1, r0
    d782:	00c9      	lsls	r1, r1, #3
    d784:	20ff      	movs	r0, #255	; 0xff
    d786:	4088      	lsls	r0, r1
    d788:	0001      	movs	r1, r0
    d78a:	43c9      	mvns	r1, r1
    d78c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    d78e:	683a      	ldr	r2, [r7, #0]
    d790:	0192      	lsls	r2, r2, #6
    d792:	20ff      	movs	r0, #255	; 0xff
    d794:	4010      	ands	r0, r2
    d796:	1dfa      	adds	r2, r7, #7
    d798:	7812      	ldrb	r2, [r2, #0]
    d79a:	b252      	sxtb	r2, r2
    d79c:	2503      	movs	r5, #3
    d79e:	402a      	ands	r2, r5
    d7a0:	00d2      	lsls	r2, r2, #3
    d7a2:	4090      	lsls	r0, r2
    d7a4:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d7a6:	430a      	orrs	r2, r1
    d7a8:	33c0      	adds	r3, #192	; 0xc0
    d7aa:	009b      	lsls	r3, r3, #2
    d7ac:	511a      	str	r2, [r3, r4]
}
    d7ae:	e031      	b.n	d814 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d7b0:	4c1b      	ldr	r4, [pc, #108]	; (d820 <__NVIC_SetPriority+0xd8>)
    d7b2:	1dfb      	adds	r3, r7, #7
    d7b4:	781b      	ldrb	r3, [r3, #0]
    d7b6:	b25b      	sxtb	r3, r3
    d7b8:	220f      	movs	r2, #15
    d7ba:	4013      	ands	r3, r2
    d7bc:	3b08      	subs	r3, #8
    d7be:	0899      	lsrs	r1, r3, #2
    d7c0:	4a17      	ldr	r2, [pc, #92]	; (d820 <__NVIC_SetPriority+0xd8>)
    d7c2:	1dfb      	adds	r3, r7, #7
    d7c4:	781b      	ldrb	r3, [r3, #0]
    d7c6:	b25b      	sxtb	r3, r3
    d7c8:	200f      	movs	r0, #15
    d7ca:	4003      	ands	r3, r0
    d7cc:	3b08      	subs	r3, #8
    d7ce:	089b      	lsrs	r3, r3, #2
    d7d0:	3306      	adds	r3, #6
    d7d2:	009b      	lsls	r3, r3, #2
    d7d4:	18d3      	adds	r3, r2, r3
    d7d6:	3304      	adds	r3, #4
    d7d8:	681b      	ldr	r3, [r3, #0]
    d7da:	1dfa      	adds	r2, r7, #7
    d7dc:	7812      	ldrb	r2, [r2, #0]
    d7de:	b252      	sxtb	r2, r2
    d7e0:	2003      	movs	r0, #3
    d7e2:	4002      	ands	r2, r0
    d7e4:	00d2      	lsls	r2, r2, #3
    d7e6:	20ff      	movs	r0, #255	; 0xff
    d7e8:	4090      	lsls	r0, r2
    d7ea:	0002      	movs	r2, r0
    d7ec:	43d2      	mvns	r2, r2
    d7ee:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    d7f0:	683b      	ldr	r3, [r7, #0]
    d7f2:	019b      	lsls	r3, r3, #6
    d7f4:	20ff      	movs	r0, #255	; 0xff
    d7f6:	4018      	ands	r0, r3
    d7f8:	1dfb      	adds	r3, r7, #7
    d7fa:	781b      	ldrb	r3, [r3, #0]
    d7fc:	b25b      	sxtb	r3, r3
    d7fe:	2503      	movs	r5, #3
    d800:	402b      	ands	r3, r5
    d802:	00db      	lsls	r3, r3, #3
    d804:	4098      	lsls	r0, r3
    d806:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d808:	431a      	orrs	r2, r3
    d80a:	1d8b      	adds	r3, r1, #6
    d80c:	009b      	lsls	r3, r3, #2
    d80e:	18e3      	adds	r3, r4, r3
    d810:	3304      	adds	r3, #4
    d812:	601a      	str	r2, [r3, #0]
}
    d814:	46c0      	nop			; (mov r8, r8)
    d816:	46bd      	mov	sp, r7
    d818:	b002      	add	sp, #8
    d81a:	bdb0      	pop	{r4, r5, r7, pc}
    d81c:	e000e100 	.word	0xe000e100
    d820:	e000ed00 	.word	0xe000ed00

0000d824 <_ZN6SERCOMC1EP6Sercom>:
// Default rise time in nanoseconds, based on 4.7K ohm pull up resistors
// you can override this value in your variant if needed
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
    d824:	b580      	push	{r7, lr}
    d826:	b082      	sub	sp, #8
    d828:	af00      	add	r7, sp, #0
    d82a:	6078      	str	r0, [r7, #4]
    d82c:	6039      	str	r1, [r7, #0]
{
  sercom = s;
    d82e:	687b      	ldr	r3, [r7, #4]
    d830:	683a      	ldr	r2, [r7, #0]
    d832:	601a      	str	r2, [r3, #0]
}
    d834:	687b      	ldr	r3, [r7, #4]
    d836:	0018      	movs	r0, r3
    d838:	46bd      	mov	sp, r7
    d83a:	b002      	add	sp, #8
    d83c:	bd80      	pop	{r7, pc}
	...

0000d840 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
/* 	=========================
 *	===== Sercom UART
 *	=========================
*/
void SERCOM::initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate)
{
    d840:	b580      	push	{r7, lr}
    d842:	b086      	sub	sp, #24
    d844:	af00      	add	r7, sp, #0
    d846:	60f8      	str	r0, [r7, #12]
    d848:	0008      	movs	r0, r1
    d84a:	0011      	movs	r1, r2
    d84c:	607b      	str	r3, [r7, #4]
    d84e:	230b      	movs	r3, #11
    d850:	18fb      	adds	r3, r7, r3
    d852:	1c02      	adds	r2, r0, #0
    d854:	701a      	strb	r2, [r3, #0]
    d856:	230a      	movs	r3, #10
    d858:	18fb      	adds	r3, r7, r3
    d85a:	1c0a      	adds	r2, r1, #0
    d85c:	701a      	strb	r2, [r3, #0]
  initClockNVIC();
    d85e:	68fb      	ldr	r3, [r7, #12]
    d860:	0018      	movs	r0, r3
    d862:	f000 fd53 	bl	e30c <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    d866:	68fb      	ldr	r3, [r7, #12]
    d868:	0018      	movs	r0, r3
    d86a:	f000 f8d0 	bl	da0e <_ZN6SERCOM9resetUARTEv>

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    d86e:	68fb      	ldr	r3, [r7, #12]
    d870:	681b      	ldr	r3, [r3, #0]
    d872:	220b      	movs	r2, #11
    d874:	18ba      	adds	r2, r7, r2
    d876:	7812      	ldrb	r2, [r2, #0]
    d878:	0092      	lsls	r2, r2, #2
    d87a:	0011      	movs	r1, r2
    d87c:	221c      	movs	r2, #28
    d87e:	4011      	ands	r1, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    d880:	220a      	movs	r2, #10
    d882:	18ba      	adds	r2, r7, r2
    d884:	7812      	ldrb	r2, [r2, #0]
    d886:	0352      	lsls	r2, r2, #13
    d888:	0412      	lsls	r2, r2, #16
    d88a:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    d88c:	430a      	orrs	r2, r1
    d88e:	601a      	str	r2, [r3, #0]

  //Setting the Interrupt register
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    d890:	68fb      	ldr	r3, [r7, #12]
    d892:	681b      	ldr	r3, [r3, #0]
    d894:	2284      	movs	r2, #132	; 0x84
    d896:	759a      	strb	r2, [r3, #22]
                                SERCOM_USART_INTENSET_ERROR; //All others errors

  if ( mode == UART_INT_CLOCK )
    d898:	230b      	movs	r3, #11
    d89a:	18fb      	adds	r3, r7, r3
    d89c:	781b      	ldrb	r3, [r3, #0]
    d89e:	2b01      	cmp	r3, #1
    d8a0:	d13b      	bne.n	d91a <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xda>
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    d8a2:	230a      	movs	r3, #10
    d8a4:	18fb      	adds	r3, r7, r3
    d8a6:	781b      	ldrb	r3, [r3, #0]
    d8a8:	2b01      	cmp	r3, #1
    d8aa:	d104      	bne.n	d8b6 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x76>
      sampleRateValue = 16;
    d8ac:	2316      	movs	r3, #22
    d8ae:	18fb      	adds	r3, r7, r3
    d8b0:	2210      	movs	r2, #16
    d8b2:	801a      	strh	r2, [r3, #0]
    d8b4:	e003      	b.n	d8be <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x7e>
    } else {
      sampleRateValue = 8;
    d8b6:	2316      	movs	r3, #22
    d8b8:	18fb      	adds	r3, r7, r3
    d8ba:	2208      	movs	r2, #8
    d8bc:	801a      	strh	r2, [r3, #0]
    }

    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    d8be:	4b19      	ldr	r3, [pc, #100]	; (d924 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xe4>)
    d8c0:	681b      	ldr	r3, [r3, #0]
    d8c2:	00d8      	lsls	r0, r3, #3
    d8c4:	2316      	movs	r3, #22
    d8c6:	18fb      	adds	r3, r7, r3
    d8c8:	881b      	ldrh	r3, [r3, #0]
    d8ca:	687a      	ldr	r2, [r7, #4]
    d8cc:	4353      	muls	r3, r2
    d8ce:	0019      	movs	r1, r3
    d8d0:	f000 ffe2 	bl	e898 <__udivsi3>
    d8d4:	0003      	movs	r3, r0
    d8d6:	613b      	str	r3, [r7, #16]

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    d8d8:	68fb      	ldr	r3, [r7, #12]
    d8da:	681a      	ldr	r2, [r3, #0]
    d8dc:	693b      	ldr	r3, [r7, #16]
    d8de:	b2db      	uxtb	r3, r3
    d8e0:	1c19      	adds	r1, r3, #0
    d8e2:	2307      	movs	r3, #7
    d8e4:	400b      	ands	r3, r1
    d8e6:	b2d9      	uxtb	r1, r3
    d8e8:	8993      	ldrh	r3, [r2, #12]
    d8ea:	0348      	lsls	r0, r1, #13
    d8ec:	04db      	lsls	r3, r3, #19
    d8ee:	0cdb      	lsrs	r3, r3, #19
    d8f0:	1c19      	adds	r1, r3, #0
    d8f2:	1c03      	adds	r3, r0, #0
    d8f4:	430b      	orrs	r3, r1
    d8f6:	8193      	strh	r3, [r2, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    d8f8:	68fb      	ldr	r3, [r7, #12]
    d8fa:	681a      	ldr	r2, [r3, #0]
    d8fc:	693b      	ldr	r3, [r7, #16]
    d8fe:	08db      	lsrs	r3, r3, #3
    d900:	b29b      	uxth	r3, r3
    d902:	04db      	lsls	r3, r3, #19
    d904:	0cdb      	lsrs	r3, r3, #19
    d906:	b299      	uxth	r1, r3
    d908:	8993      	ldrh	r3, [r2, #12]
    d90a:	04c9      	lsls	r1, r1, #19
    d90c:	0cc8      	lsrs	r0, r1, #19
    d90e:	0b5b      	lsrs	r3, r3, #13
    d910:	035b      	lsls	r3, r3, #13
    d912:	1c19      	adds	r1, r3, #0
    d914:	1c03      	adds	r3, r0, #0
    d916:	430b      	orrs	r3, r1
    d918:	8193      	strh	r3, [r2, #12]
  }
}
    d91a:	46c0      	nop			; (mov r8, r8)
    d91c:	46bd      	mov	sp, r7
    d91e:	b006      	add	sp, #24
    d920:	bd80      	pop	{r7, pc}
    d922:	46c0      	nop			; (mov r8, r8)
    d924:	20000048 	.word	0x20000048

0000d928 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    d928:	b590      	push	{r4, r7, lr}
    d92a:	b083      	sub	sp, #12
    d92c:	af00      	add	r7, sp, #0
    d92e:	6078      	str	r0, [r7, #4]
    d930:	000c      	movs	r4, r1
    d932:	0010      	movs	r0, r2
    d934:	0019      	movs	r1, r3
    d936:	1cfb      	adds	r3, r7, #3
    d938:	1c22      	adds	r2, r4, #0
    d93a:	701a      	strb	r2, [r3, #0]
    d93c:	1cbb      	adds	r3, r7, #2
    d93e:	1c02      	adds	r2, r0, #0
    d940:	701a      	strb	r2, [r3, #0]
    d942:	1c7b      	adds	r3, r7, #1
    d944:	1c0a      	adds	r2, r1, #0
    d946:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d948:	687b      	ldr	r3, [r7, #4]
    d94a:	681b      	ldr	r3, [r3, #0]
    d94c:	687a      	ldr	r2, [r7, #4]
    d94e:	6812      	ldr	r2, [r2, #0]
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    d950:	6811      	ldr	r1, [r2, #0]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d952:	1c7a      	adds	r2, r7, #1
    d954:	7812      	ldrb	r2, [r2, #0]
    d956:	3a02      	subs	r2, #2
    d958:	1e50      	subs	r0, r2, #1
    d95a:	4182      	sbcs	r2, r0
    d95c:	b2d2      	uxtb	r2, r2
    d95e:	0612      	lsls	r2, r2, #24
    d960:	0010      	movs	r0, r2
    d962:	22f0      	movs	r2, #240	; 0xf0
    d964:	0512      	lsls	r2, r2, #20
    d966:	4002      	ands	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    d968:	1cb8      	adds	r0, r7, #2
    d96a:	7800      	ldrb	r0, [r0, #0]
    d96c:	0780      	lsls	r0, r0, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d96e:	4302      	orrs	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    d970:	430a      	orrs	r2, r1
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d972:	601a      	str	r2, [r3, #0]

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d974:	687b      	ldr	r3, [r7, #4]
    d976:	681b      	ldr	r3, [r3, #0]
    d978:	687a      	ldr	r2, [r7, #4]
    d97a:	6812      	ldr	r2, [r2, #0]
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    d97c:	6851      	ldr	r1, [r2, #4]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d97e:	1cfa      	adds	r2, r7, #3
    d980:	7812      	ldrb	r2, [r2, #0]
    d982:	2007      	movs	r0, #7
    d984:	4002      	ands	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    d986:	2018      	movs	r0, #24
    d988:	1838      	adds	r0, r7, r0
    d98a:	7800      	ldrb	r0, [r0, #0]
    d98c:	0180      	lsls	r0, r0, #6
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d98e:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    d990:	1c78      	adds	r0, r7, #1
    d992:	7800      	ldrb	r0, [r0, #0]
    d994:	2802      	cmp	r0, #2
    d996:	d003      	beq.n	d9a0 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x78>
    d998:	1c78      	adds	r0, r7, #1
    d99a:	7800      	ldrb	r0, [r0, #0]
    d99c:	0340      	lsls	r0, r0, #13
    d99e:	e000      	b.n	d9a2 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x7a>
    d9a0:	2000      	movs	r0, #0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    d9a2:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    d9a4:	430a      	orrs	r2, r1
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d9a6:	605a      	str	r2, [r3, #4]
}
    d9a8:	46c0      	nop			; (mov r8, r8)
    d9aa:	46bd      	mov	sp, r7
    d9ac:	b003      	add	sp, #12
    d9ae:	bd90      	pop	{r4, r7, pc}

0000d9b0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    d9b0:	b590      	push	{r4, r7, lr}
    d9b2:	b083      	sub	sp, #12
    d9b4:	af00      	add	r7, sp, #0
    d9b6:	6078      	str	r0, [r7, #4]
    d9b8:	0008      	movs	r0, r1
    d9ba:	0011      	movs	r1, r2
    d9bc:	1cfb      	adds	r3, r7, #3
    d9be:	1c02      	adds	r2, r0, #0
    d9c0:	701a      	strb	r2, [r3, #0]
    d9c2:	1cbb      	adds	r3, r7, #2
    d9c4:	1c0a      	adds	r2, r1, #0
    d9c6:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    d9c8:	687b      	ldr	r3, [r7, #4]
    d9ca:	681b      	ldr	r3, [r3, #0]
    d9cc:	687a      	ldr	r2, [r7, #4]
    d9ce:	6812      	ldr	r2, [r2, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    d9d0:	6811      	ldr	r1, [r2, #0]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    d9d2:	1cfa      	adds	r2, r7, #3
    d9d4:	7812      	ldrb	r2, [r2, #0]
    d9d6:	0412      	lsls	r2, r2, #16
    d9d8:	0010      	movs	r0, r2
    d9da:	22c0      	movs	r2, #192	; 0xc0
    d9dc:	0292      	lsls	r2, r2, #10
    d9de:	4010      	ands	r0, r2
                SERCOM_USART_CTRLA_RXPO(rxPad);
    d9e0:	1cba      	adds	r2, r7, #2
    d9e2:	7812      	ldrb	r2, [r2, #0]
    d9e4:	0512      	lsls	r2, r2, #20
    d9e6:	0014      	movs	r4, r2
    d9e8:	22c0      	movs	r2, #192	; 0xc0
    d9ea:	0392      	lsls	r2, r2, #14
    d9ec:	4022      	ands	r2, r4
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    d9ee:	4302      	orrs	r2, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    d9f0:	430a      	orrs	r2, r1
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    d9f2:	601a      	str	r2, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    d9f4:	687b      	ldr	r3, [r7, #4]
    d9f6:	681b      	ldr	r3, [r3, #0]
    d9f8:	687a      	ldr	r2, [r7, #4]
    d9fa:	6812      	ldr	r2, [r2, #0]
    d9fc:	6852      	ldr	r2, [r2, #4]
    d9fe:	21c0      	movs	r1, #192	; 0xc0
    da00:	0289      	lsls	r1, r1, #10
    da02:	430a      	orrs	r2, r1
    da04:	605a      	str	r2, [r3, #4]
}
    da06:	46c0      	nop			; (mov r8, r8)
    da08:	46bd      	mov	sp, r7
    da0a:	b003      	add	sp, #12
    da0c:	bd90      	pop	{r4, r7, pc}

0000da0e <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
    da0e:	b580      	push	{r7, lr}
    da10:	b082      	sub	sp, #8
    da12:	af00      	add	r7, sp, #0
    da14:	6078      	str	r0, [r7, #4]
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    da16:	687b      	ldr	r3, [r7, #4]
    da18:	681b      	ldr	r3, [r3, #0]
    da1a:	681a      	ldr	r2, [r3, #0]
    da1c:	2101      	movs	r1, #1
    da1e:	430a      	orrs	r2, r1
    da20:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    da22:	687b      	ldr	r3, [r7, #4]
    da24:	681b      	ldr	r3, [r3, #0]
    da26:	681b      	ldr	r3, [r3, #0]
    da28:	07db      	lsls	r3, r3, #31
    da2a:	0fdb      	lsrs	r3, r3, #31
    da2c:	b2db      	uxtb	r3, r3
    da2e:	2b00      	cmp	r3, #0
    da30:	d107      	bne.n	da42 <_ZN6SERCOM9resetUARTEv+0x34>
    da32:	687b      	ldr	r3, [r7, #4]
    da34:	681b      	ldr	r3, [r3, #0]
    da36:	69db      	ldr	r3, [r3, #28]
    da38:	07db      	lsls	r3, r3, #31
    da3a:	0fdb      	lsrs	r3, r3, #31
    da3c:	b2db      	uxtb	r3, r3
    da3e:	2b00      	cmp	r3, #0
    da40:	d001      	beq.n	da46 <_ZN6SERCOM9resetUARTEv+0x38>
    da42:	2301      	movs	r3, #1
    da44:	e000      	b.n	da48 <_ZN6SERCOM9resetUARTEv+0x3a>
    da46:	2300      	movs	r3, #0
    da48:	2b00      	cmp	r3, #0
    da4a:	d000      	beq.n	da4e <_ZN6SERCOM9resetUARTEv+0x40>
    da4c:	e7e9      	b.n	da22 <_ZN6SERCOM9resetUARTEv+0x14>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    da4e:	46c0      	nop			; (mov r8, r8)
    da50:	46bd      	mov	sp, r7
    da52:	b002      	add	sp, #8
    da54:	bd80      	pop	{r7, pc}

0000da56 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
    da56:	b580      	push	{r7, lr}
    da58:	b082      	sub	sp, #8
    da5a:	af00      	add	r7, sp, #0
    da5c:	6078      	str	r0, [r7, #4]
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    da5e:	687b      	ldr	r3, [r7, #4]
    da60:	681b      	ldr	r3, [r3, #0]
    da62:	681a      	ldr	r2, [r3, #0]
    da64:	2102      	movs	r1, #2
    da66:	430a      	orrs	r2, r1
    da68:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    da6a:	687b      	ldr	r3, [r7, #4]
    da6c:	681b      	ldr	r3, [r3, #0]
    da6e:	69db      	ldr	r3, [r3, #28]
    da70:	079b      	lsls	r3, r3, #30
    da72:	0fdb      	lsrs	r3, r3, #31
    da74:	b2db      	uxtb	r3, r3
    da76:	2b00      	cmp	r3, #0
    da78:	d000      	beq.n	da7c <_ZN6SERCOM10enableUARTEv+0x26>
    da7a:	e7f6      	b.n	da6a <_ZN6SERCOM10enableUARTEv+0x14>
}
    da7c:	46c0      	nop			; (mov r8, r8)
    da7e:	46bd      	mov	sp, r7
    da80:	b002      	add	sp, #8
    da82:	bd80      	pop	{r7, pc}

0000da84 <_ZN6SERCOM9flushUARTEv>:

void SERCOM::flushUART()
{
    da84:	b580      	push	{r7, lr}
    da86:	b082      	sub	sp, #8
    da88:	af00      	add	r7, sp, #0
    da8a:	6078      	str	r0, [r7, #4]
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    da8c:	687b      	ldr	r3, [r7, #4]
    da8e:	0018      	movs	r0, r3
    da90:	f000 f849 	bl	db26 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    da94:	1e03      	subs	r3, r0, #0
    da96:	d10b      	bne.n	dab0 <_ZN6SERCOM9flushUARTEv+0x2c>
    return;

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
    da98:	687b      	ldr	r3, [r7, #4]
    da9a:	681b      	ldr	r3, [r3, #0]
    da9c:	7e1b      	ldrb	r3, [r3, #24]
    da9e:	079b      	lsls	r3, r3, #30
    daa0:	0fdb      	lsrs	r3, r3, #31
    daa2:	b2db      	uxtb	r3, r3
    daa4:	2201      	movs	r2, #1
    daa6:	4053      	eors	r3, r2
    daa8:	b2db      	uxtb	r3, r3
    daaa:	2b00      	cmp	r3, #0
    daac:	d001      	beq.n	dab2 <_ZN6SERCOM9flushUARTEv+0x2e>
    daae:	e7f3      	b.n	da98 <_ZN6SERCOM9flushUARTEv+0x14>
    return;
    dab0:	46c0      	nop			; (mov r8, r8)
}
    dab2:	46bd      	mov	sp, r7
    dab4:	b002      	add	sp, #8
    dab6:	bd80      	pop	{r7, pc}

0000dab8 <_ZN6SERCOM15clearStatusUARTEv>:

void SERCOM::clearStatusUART()
{
    dab8:	b580      	push	{r7, lr}
    daba:	b082      	sub	sp, #8
    dabc:	af00      	add	r7, sp, #0
    dabe:	6078      	str	r0, [r7, #4]
  //Reset (with 0) the STATUS register
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    dac0:	687b      	ldr	r3, [r7, #4]
    dac2:	681b      	ldr	r3, [r3, #0]
    dac4:	2200      	movs	r2, #0
    dac6:	835a      	strh	r2, [r3, #26]
}
    dac8:	46c0      	nop			; (mov r8, r8)
    daca:	46bd      	mov	sp, r7
    dacc:	b002      	add	sp, #8
    dace:	bd80      	pop	{r7, pc}

0000dad0 <_ZN6SERCOM17availableDataUARTEv>:

bool SERCOM::availableDataUART()
{
    dad0:	b580      	push	{r7, lr}
    dad2:	b082      	sub	sp, #8
    dad4:	af00      	add	r7, sp, #0
    dad6:	6078      	str	r0, [r7, #4]
  //RXC : Receive Complete
  return sercom->USART.INTFLAG.bit.RXC;
    dad8:	687b      	ldr	r3, [r7, #4]
    dada:	681b      	ldr	r3, [r3, #0]
    dadc:	7e1b      	ldrb	r3, [r3, #24]
    dade:	075b      	lsls	r3, r3, #29
    dae0:	0fdb      	lsrs	r3, r3, #31
    dae2:	b2db      	uxtb	r3, r3
}
    dae4:	0018      	movs	r0, r3
    dae6:	46bd      	mov	sp, r7
    dae8:	b002      	add	sp, #8
    daea:	bd80      	pop	{r7, pc}

0000daec <_ZN6SERCOM11isUARTErrorEv>:

bool SERCOM::isUARTError()
{
    daec:	b580      	push	{r7, lr}
    daee:	b082      	sub	sp, #8
    daf0:	af00      	add	r7, sp, #0
    daf2:	6078      	str	r0, [r7, #4]
  return sercom->USART.INTFLAG.bit.ERROR;
    daf4:	687b      	ldr	r3, [r7, #4]
    daf6:	681b      	ldr	r3, [r3, #0]
    daf8:	7e1b      	ldrb	r3, [r3, #24]
    dafa:	061b      	lsls	r3, r3, #24
    dafc:	0fdb      	lsrs	r3, r3, #31
    dafe:	b2db      	uxtb	r3, r3
}
    db00:	0018      	movs	r0, r3
    db02:	46bd      	mov	sp, r7
    db04:	b002      	add	sp, #8
    db06:	bd80      	pop	{r7, pc}

0000db08 <_ZN6SERCOM20acknowledgeUARTErrorEv>:

void SERCOM::acknowledgeUARTError()
{
    db08:	b580      	push	{r7, lr}
    db0a:	b082      	sub	sp, #8
    db0c:	af00      	add	r7, sp, #0
    db0e:	6078      	str	r0, [r7, #4]
  sercom->USART.INTFLAG.bit.ERROR = 1;
    db10:	687b      	ldr	r3, [r7, #4]
    db12:	681a      	ldr	r2, [r3, #0]
    db14:	7e13      	ldrb	r3, [r2, #24]
    db16:	2180      	movs	r1, #128	; 0x80
    db18:	4249      	negs	r1, r1
    db1a:	430b      	orrs	r3, r1
    db1c:	7613      	strb	r3, [r2, #24]
}
    db1e:	46c0      	nop			; (mov r8, r8)
    db20:	46bd      	mov	sp, r7
    db22:	b002      	add	sp, #8
    db24:	bd80      	pop	{r7, pc}

0000db26 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  //PERR : Parity Error
  return sercom->USART.STATUS.bit.PERR;
}

bool SERCOM::isDataRegisterEmptyUART()
{
    db26:	b580      	push	{r7, lr}
    db28:	b082      	sub	sp, #8
    db2a:	af00      	add	r7, sp, #0
    db2c:	6078      	str	r0, [r7, #4]
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    db2e:	687b      	ldr	r3, [r7, #4]
    db30:	681b      	ldr	r3, [r3, #0]
    db32:	7e1b      	ldrb	r3, [r3, #24]
    db34:	07db      	lsls	r3, r3, #31
    db36:	0fdb      	lsrs	r3, r3, #31
    db38:	b2db      	uxtb	r3, r3
}
    db3a:	0018      	movs	r0, r3
    db3c:	46bd      	mov	sp, r7
    db3e:	b002      	add	sp, #8
    db40:	bd80      	pop	{r7, pc}

0000db42 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
    db42:	b580      	push	{r7, lr}
    db44:	b082      	sub	sp, #8
    db46:	af00      	add	r7, sp, #0
    db48:	6078      	str	r0, [r7, #4]
  return sercom->USART.DATA.bit.DATA;
    db4a:	687b      	ldr	r3, [r7, #4]
    db4c:	681b      	ldr	r3, [r3, #0]
    db4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    db50:	05db      	lsls	r3, r3, #23
    db52:	0ddb      	lsrs	r3, r3, #23
    db54:	b29b      	uxth	r3, r3
    db56:	b2db      	uxtb	r3, r3
}
    db58:	0018      	movs	r0, r3
    db5a:	46bd      	mov	sp, r7
    db5c:	b002      	add	sp, #8
    db5e:	bd80      	pop	{r7, pc}

0000db60 <_ZN6SERCOM13writeDataUARTEh>:

int SERCOM::writeDataUART(uint8_t data)
{
    db60:	b580      	push	{r7, lr}
    db62:	b082      	sub	sp, #8
    db64:	af00      	add	r7, sp, #0
    db66:	6078      	str	r0, [r7, #4]
    db68:	000a      	movs	r2, r1
    db6a:	1cfb      	adds	r3, r7, #3
    db6c:	701a      	strb	r2, [r3, #0]
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    db6e:	687b      	ldr	r3, [r7, #4]
    db70:	0018      	movs	r0, r3
    db72:	f7ff ffd8 	bl	db26 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    db76:	0003      	movs	r3, r0
    db78:	001a      	movs	r2, r3
    db7a:	2301      	movs	r3, #1
    db7c:	4053      	eors	r3, r2
    db7e:	b2db      	uxtb	r3, r3
    db80:	2b00      	cmp	r3, #0
    db82:	d000      	beq.n	db86 <_ZN6SERCOM13writeDataUARTEh+0x26>
    db84:	e7f3      	b.n	db6e <_ZN6SERCOM13writeDataUARTEh+0xe>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    db86:	687b      	ldr	r3, [r7, #4]
    db88:	681b      	ldr	r3, [r3, #0]
    db8a:	1cfa      	adds	r2, r7, #3
    db8c:	7812      	ldrb	r2, [r2, #0]
    db8e:	b292      	uxth	r2, r2
    db90:	851a      	strh	r2, [r3, #40]	; 0x28
  return 1;
    db92:	2301      	movs	r3, #1
}
    db94:	0018      	movs	r0, r3
    db96:	46bd      	mov	sp, r7
    db98:	b002      	add	sp, #8
    db9a:	bd80      	pop	{r7, pc}

0000db9c <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
    db9c:	b580      	push	{r7, lr}
    db9e:	b082      	sub	sp, #8
    dba0:	af00      	add	r7, sp, #0
    dba2:	6078      	str	r0, [r7, #4]
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    dba4:	687b      	ldr	r3, [r7, #4]
    dba6:	681b      	ldr	r3, [r3, #0]
    dba8:	2201      	movs	r2, #1
    dbaa:	759a      	strb	r2, [r3, #22]
}
    dbac:	46c0      	nop			; (mov r8, r8)
    dbae:	46bd      	mov	sp, r7
    dbb0:	b002      	add	sp, #8
    dbb2:	bd80      	pop	{r7, pc}

0000dbb4 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
    dbb4:	b580      	push	{r7, lr}
    dbb6:	b082      	sub	sp, #8
    dbb8:	af00      	add	r7, sp, #0
    dbba:	6078      	str	r0, [r7, #4]
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    dbbc:	687b      	ldr	r3, [r7, #4]
    dbbe:	681b      	ldr	r3, [r3, #0]
    dbc0:	2201      	movs	r2, #1
    dbc2:	751a      	strb	r2, [r3, #20]
}
    dbc4:	46c0      	nop			; (mov r8, r8)
    dbc6:	46bd      	mov	sp, r7
    dbc8:	b002      	add	sp, #8
    dbca:	bd80      	pop	{r7, pc}

0000dbcc <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
/*	=========================
 *	===== Sercom SPI
 *	=========================
*/
void SERCOM::initSPI(SercomSpiTXPad mosi, SercomRXPad miso, SercomSpiCharSize charSize, SercomDataOrder dataOrder)
{
    dbcc:	b590      	push	{r4, r7, lr}
    dbce:	b083      	sub	sp, #12
    dbd0:	af00      	add	r7, sp, #0
    dbd2:	6078      	str	r0, [r7, #4]
    dbd4:	000c      	movs	r4, r1
    dbd6:	0010      	movs	r0, r2
    dbd8:	0019      	movs	r1, r3
    dbda:	1cfb      	adds	r3, r7, #3
    dbdc:	1c22      	adds	r2, r4, #0
    dbde:	701a      	strb	r2, [r3, #0]
    dbe0:	1cbb      	adds	r3, r7, #2
    dbe2:	1c02      	adds	r2, r0, #0
    dbe4:	701a      	strb	r2, [r3, #0]
    dbe6:	1c7b      	adds	r3, r7, #1
    dbe8:	1c0a      	adds	r2, r1, #0
    dbea:	701a      	strb	r2, [r3, #0]
  resetSPI();
    dbec:	687b      	ldr	r3, [r7, #4]
    dbee:	0018      	movs	r0, r3
    dbf0:	f000 f864 	bl	dcbc <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    dbf4:	687b      	ldr	r3, [r7, #4]
    dbf6:	0018      	movs	r0, r3
    dbf8:	f000 fb88 	bl	e30c <_ZN6SERCOM13initClockNVICEv>

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    dbfc:	687b      	ldr	r3, [r7, #4]
    dbfe:	681b      	ldr	r3, [r3, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    dc00:	1cfa      	adds	r2, r7, #3
    dc02:	7812      	ldrb	r2, [r2, #0]
    dc04:	0412      	lsls	r2, r2, #16
    dc06:	0011      	movs	r1, r2
    dc08:	22c0      	movs	r2, #192	; 0xc0
    dc0a:	0292      	lsls	r2, r2, #10
    dc0c:	4011      	ands	r1, r2
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    dc0e:	1cba      	adds	r2, r7, #2
    dc10:	7812      	ldrb	r2, [r2, #0]
    dc12:	0512      	lsls	r2, r2, #20
    dc14:	0010      	movs	r0, r2
    dc16:	22c0      	movs	r2, #192	; 0xc0
    dc18:	0392      	lsls	r2, r2, #14
    dc1a:	4002      	ands	r2, r0
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    dc1c:	430a      	orrs	r2, r1
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    dc1e:	2118      	movs	r1, #24
    dc20:	1879      	adds	r1, r7, r1
    dc22:	7809      	ldrb	r1, [r1, #0]
    dc24:	0789      	lsls	r1, r1, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    dc26:	430a      	orrs	r2, r1
    dc28:	210c      	movs	r1, #12
    dc2a:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    dc2c:	601a      	str	r2, [r3, #0]

  //Setting the CTRLB register
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    dc2e:	687b      	ldr	r3, [r7, #4]
    dc30:	681b      	ldr	r3, [r3, #0]
    dc32:	1c7a      	adds	r2, r7, #1
    dc34:	7812      	ldrb	r2, [r2, #0]
    dc36:	2107      	movs	r1, #7
    dc38:	400a      	ands	r2, r1
    dc3a:	2180      	movs	r1, #128	; 0x80
    dc3c:	0289      	lsls	r1, r1, #10
    dc3e:	430a      	orrs	r2, r1
    dc40:	605a      	str	r2, [r3, #4]
                          SERCOM_SPI_CTRLB_RXEN;	//Active the SPI receiver.


}
    dc42:	46c0      	nop			; (mov r8, r8)
    dc44:	46bd      	mov	sp, r7
    dc46:	b003      	add	sp, #12
    dc48:	bd90      	pop	{r4, r7, pc}

0000dc4a <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    dc4a:	b590      	push	{r4, r7, lr}
    dc4c:	b087      	sub	sp, #28
    dc4e:	af00      	add	r7, sp, #0
    dc50:	60f8      	str	r0, [r7, #12]
    dc52:	607a      	str	r2, [r7, #4]
    dc54:	230b      	movs	r3, #11
    dc56:	18fb      	adds	r3, r7, r3
    dc58:	1c0a      	adds	r2, r1, #0
    dc5a:	701a      	strb	r2, [r3, #0]
  //Extract data from clockMode
  int cpha, cpol;

  if((clockMode & (0x1ul)) == 0 )
    dc5c:	230b      	movs	r3, #11
    dc5e:	18fb      	adds	r3, r7, r3
    dc60:	781b      	ldrb	r3, [r3, #0]
    dc62:	2201      	movs	r2, #1
    dc64:	4013      	ands	r3, r2
    dc66:	d102      	bne.n	dc6e <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x24>
    cpha = 0;
    dc68:	2300      	movs	r3, #0
    dc6a:	617b      	str	r3, [r7, #20]
    dc6c:	e001      	b.n	dc72 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x28>
  else
    cpha = 1;
    dc6e:	2301      	movs	r3, #1
    dc70:	617b      	str	r3, [r7, #20]

  if((clockMode & (0x2ul)) == 0)
    dc72:	230b      	movs	r3, #11
    dc74:	18fb      	adds	r3, r7, r3
    dc76:	781b      	ldrb	r3, [r3, #0]
    dc78:	2202      	movs	r2, #2
    dc7a:	4013      	ands	r3, r2
    dc7c:	d102      	bne.n	dc84 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x3a>
    cpol = 0;
    dc7e:	2300      	movs	r3, #0
    dc80:	613b      	str	r3, [r7, #16]
    dc82:	e001      	b.n	dc88 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x3e>
  else
    cpol = 1;
    dc84:	2301      	movs	r3, #1
    dc86:	613b      	str	r3, [r7, #16]

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dc88:	68fb      	ldr	r3, [r7, #12]
    dc8a:	681b      	ldr	r3, [r3, #0]
    dc8c:	68fa      	ldr	r2, [r7, #12]
    dc8e:	6812      	ldr	r2, [r2, #0]
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    dc90:	6812      	ldr	r2, [r2, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dc92:	6979      	ldr	r1, [r7, #20]
    dc94:	0708      	lsls	r0, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    dc96:	6939      	ldr	r1, [r7, #16]
    dc98:	0749      	lsls	r1, r1, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dc9a:	4301      	orrs	r1, r0
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    dc9c:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dc9e:	601a      	str	r2, [r3, #0]

  //Synchronous arithmetic
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    dca0:	68fb      	ldr	r3, [r7, #12]
    dca2:	681c      	ldr	r4, [r3, #0]
    dca4:	687a      	ldr	r2, [r7, #4]
    dca6:	68fb      	ldr	r3, [r7, #12]
    dca8:	0011      	movs	r1, r2
    dcaa:	0018      	movs	r0, r3
    dcac:	f000 f886 	bl	ddbc <_ZN6SERCOM28calculateBaudrateSynchronousEm>
    dcb0:	0003      	movs	r3, r0
    dcb2:	7323      	strb	r3, [r4, #12]
}
    dcb4:	46c0      	nop			; (mov r8, r8)
    dcb6:	46bd      	mov	sp, r7
    dcb8:	b007      	add	sp, #28
    dcba:	bd90      	pop	{r4, r7, pc}

0000dcbc <_ZN6SERCOM8resetSPIEv>:

void SERCOM::resetSPI()
{
    dcbc:	b580      	push	{r7, lr}
    dcbe:	b082      	sub	sp, #8
    dcc0:	af00      	add	r7, sp, #0
    dcc2:	6078      	str	r0, [r7, #4]
  //Setting the Software Reset bit to 1
  sercom->SPI.CTRLA.bit.SWRST = 1;
    dcc4:	687b      	ldr	r3, [r7, #4]
    dcc6:	681b      	ldr	r3, [r3, #0]
    dcc8:	681a      	ldr	r2, [r3, #0]
    dcca:	2101      	movs	r1, #1
    dccc:	430a      	orrs	r2, r1
    dcce:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    dcd0:	687b      	ldr	r3, [r7, #4]
    dcd2:	681b      	ldr	r3, [r3, #0]
    dcd4:	681b      	ldr	r3, [r3, #0]
    dcd6:	07db      	lsls	r3, r3, #31
    dcd8:	0fdb      	lsrs	r3, r3, #31
    dcda:	b2db      	uxtb	r3, r3
    dcdc:	2b00      	cmp	r3, #0
    dcde:	d107      	bne.n	dcf0 <_ZN6SERCOM8resetSPIEv+0x34>
    dce0:	687b      	ldr	r3, [r7, #4]
    dce2:	681b      	ldr	r3, [r3, #0]
    dce4:	69db      	ldr	r3, [r3, #28]
    dce6:	07db      	lsls	r3, r3, #31
    dce8:	0fdb      	lsrs	r3, r3, #31
    dcea:	b2db      	uxtb	r3, r3
    dcec:	2b00      	cmp	r3, #0
    dcee:	d001      	beq.n	dcf4 <_ZN6SERCOM8resetSPIEv+0x38>
    dcf0:	2301      	movs	r3, #1
    dcf2:	e000      	b.n	dcf6 <_ZN6SERCOM8resetSPIEv+0x3a>
    dcf4:	2300      	movs	r3, #0
    dcf6:	2b00      	cmp	r3, #0
    dcf8:	d000      	beq.n	dcfc <_ZN6SERCOM8resetSPIEv+0x40>
    dcfa:	e7e9      	b.n	dcd0 <_ZN6SERCOM8resetSPIEv+0x14>
}
    dcfc:	46c0      	nop			; (mov r8, r8)
    dcfe:	46bd      	mov	sp, r7
    dd00:	b002      	add	sp, #8
    dd02:	bd80      	pop	{r7, pc}

0000dd04 <_ZN6SERCOM9enableSPIEv>:

void SERCOM::enableSPI()
{
    dd04:	b580      	push	{r7, lr}
    dd06:	b082      	sub	sp, #8
    dd08:	af00      	add	r7, sp, #0
    dd0a:	6078      	str	r0, [r7, #4]
  //Setting the enable bit to 1
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    dd0c:	687b      	ldr	r3, [r7, #4]
    dd0e:	681b      	ldr	r3, [r3, #0]
    dd10:	681a      	ldr	r2, [r3, #0]
    dd12:	2102      	movs	r1, #2
    dd14:	430a      	orrs	r2, r1
    dd16:	601a      	str	r2, [r3, #0]

  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    dd18:	687b      	ldr	r3, [r7, #4]
    dd1a:	681b      	ldr	r3, [r3, #0]
    dd1c:	69db      	ldr	r3, [r3, #28]
    dd1e:	079b      	lsls	r3, r3, #30
    dd20:	0fdb      	lsrs	r3, r3, #31
    dd22:	b2db      	uxtb	r3, r3
    dd24:	2b00      	cmp	r3, #0
    dd26:	d000      	beq.n	dd2a <_ZN6SERCOM9enableSPIEv+0x26>
    dd28:	e7f6      	b.n	dd18 <_ZN6SERCOM9enableSPIEv+0x14>
  {
    //Waiting then enable bit from SYNCBUSY is equal to 0;
  }
}
    dd2a:	46c0      	nop			; (mov r8, r8)
    dd2c:	46bd      	mov	sp, r7
    dd2e:	b002      	add	sp, #8
    dd30:	bd80      	pop	{r7, pc}

0000dd32 <_ZN6SERCOM10disableSPIEv>:

void SERCOM::disableSPI()
{
    dd32:	b580      	push	{r7, lr}
    dd34:	b082      	sub	sp, #8
    dd36:	af00      	add	r7, sp, #0
    dd38:	6078      	str	r0, [r7, #4]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    dd3a:	687b      	ldr	r3, [r7, #4]
    dd3c:	681b      	ldr	r3, [r3, #0]
    dd3e:	69db      	ldr	r3, [r3, #28]
    dd40:	079b      	lsls	r3, r3, #30
    dd42:	0fdb      	lsrs	r3, r3, #31
    dd44:	b2db      	uxtb	r3, r3
    dd46:	2b00      	cmp	r3, #0
    dd48:	d000      	beq.n	dd4c <_ZN6SERCOM10disableSPIEv+0x1a>
    dd4a:	e7f6      	b.n	dd3a <_ZN6SERCOM10disableSPIEv+0x8>
  {
    //Waiting then enable bit from SYNCBUSY is equal to 0;
  }

  //Setting the enable bit to 0
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    dd4c:	687b      	ldr	r3, [r7, #4]
    dd4e:	681b      	ldr	r3, [r3, #0]
    dd50:	681a      	ldr	r2, [r3, #0]
    dd52:	2102      	movs	r1, #2
    dd54:	438a      	bics	r2, r1
    dd56:	601a      	str	r2, [r3, #0]
}
    dd58:	46c0      	nop			; (mov r8, r8)
    dd5a:	46bd      	mov	sp, r7
    dd5c:	b002      	add	sp, #8
    dd5e:	bd80      	pop	{r7, pc}

0000dd60 <_ZN6SERCOM15transferDataSPIEh>:

  enableSPI();
}

uint8_t SERCOM::transferDataSPI(uint8_t data)
{
    dd60:	b580      	push	{r7, lr}
    dd62:	b082      	sub	sp, #8
    dd64:	af00      	add	r7, sp, #0
    dd66:	6078      	str	r0, [r7, #4]
    dd68:	000a      	movs	r2, r1
    dd6a:	1cfb      	adds	r3, r7, #3
    dd6c:	701a      	strb	r2, [r3, #0]
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    dd6e:	687b      	ldr	r3, [r7, #4]
    dd70:	681b      	ldr	r3, [r3, #0]
    dd72:	1cfa      	adds	r2, r7, #3
    dd74:	7812      	ldrb	r2, [r2, #0]
    dd76:	b292      	uxth	r2, r2
    dd78:	05d2      	lsls	r2, r2, #23
    dd7a:	0dd2      	lsrs	r2, r2, #23
    dd7c:	b291      	uxth	r1, r2
    dd7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dd80:	05c9      	lsls	r1, r1, #23
    dd82:	0dc9      	lsrs	r1, r1, #23
    dd84:	0a52      	lsrs	r2, r2, #9
    dd86:	0252      	lsls	r2, r2, #9
    dd88:	430a      	orrs	r2, r1
    dd8a:	629a      	str	r2, [r3, #40]	; 0x28

  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    dd8c:	687b      	ldr	r3, [r7, #4]
    dd8e:	681b      	ldr	r3, [r3, #0]
    dd90:	7e1b      	ldrb	r3, [r3, #24]
    dd92:	075b      	lsls	r3, r3, #29
    dd94:	0fdb      	lsrs	r3, r3, #31
    dd96:	b2db      	uxtb	r3, r3
    dd98:	2201      	movs	r2, #1
    dd9a:	4053      	eors	r3, r2
    dd9c:	b2db      	uxtb	r3, r3
    dd9e:	2b00      	cmp	r3, #0
    dda0:	d000      	beq.n	dda4 <_ZN6SERCOM15transferDataSPIEh+0x44>
    dda2:	e7f3      	b.n	dd8c <_ZN6SERCOM15transferDataSPIEh+0x2c>
  {
    // Waiting Complete Reception
  }

  return sercom->SPI.DATA.bit.DATA;  // Reading data
    dda4:	687b      	ldr	r3, [r7, #4]
    dda6:	681b      	ldr	r3, [r3, #0]
    dda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ddaa:	05db      	lsls	r3, r3, #23
    ddac:	0ddb      	lsrs	r3, r3, #23
    ddae:	b29b      	uxth	r3, r3
    ddb0:	b2db      	uxtb	r3, r3
}
    ddb2:	0018      	movs	r0, r3
    ddb4:	46bd      	mov	sp, r7
    ddb6:	b002      	add	sp, #8
    ddb8:	bd80      	pop	{r7, pc}
	...

0000ddbc <_ZN6SERCOM28calculateBaudrateSynchronousEm>:
//	//RXC : Receive complete
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
    ddbc:	b580      	push	{r7, lr}
    ddbe:	b082      	sub	sp, #8
    ddc0:	af00      	add	r7, sp, #0
    ddc2:	6078      	str	r0, [r7, #4]
    ddc4:	6039      	str	r1, [r7, #0]
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    ddc6:	683b      	ldr	r3, [r7, #0]
    ddc8:	005b      	lsls	r3, r3, #1
    ddca:	0019      	movs	r1, r3
    ddcc:	4805      	ldr	r0, [pc, #20]	; (dde4 <_ZN6SERCOM28calculateBaudrateSynchronousEm+0x28>)
    ddce:	f000 fd63 	bl	e898 <__udivsi3>
    ddd2:	0003      	movs	r3, r0
    ddd4:	b2db      	uxtb	r3, r3
    ddd6:	3b01      	subs	r3, #1
    ddd8:	b2db      	uxtb	r3, r3
}
    ddda:	0018      	movs	r0, r3
    dddc:	46bd      	mov	sp, r7
    ddde:	b002      	add	sp, #8
    dde0:	bd80      	pop	{r7, pc}
    dde2:	46c0      	nop			; (mov r8, r8)
    dde4:	02dc6c00 	.word	0x02dc6c00

0000dde8 <_ZN6SERCOM9resetWIREEv>:
/*	=========================
 *	===== Sercom WIRE
 *	=========================
 */
void SERCOM::resetWIRE()
{
    dde8:	b580      	push	{r7, lr}
    ddea:	b082      	sub	sp, #8
    ddec:	af00      	add	r7, sp, #0
    ddee:	6078      	str	r0, [r7, #4]
  //I2CM OR I2CS, no matter SWRST is the same bit.

  //Setting the Software bit to 1
  sercom->I2CM.CTRLA.bit.SWRST = 1;
    ddf0:	687b      	ldr	r3, [r7, #4]
    ddf2:	681b      	ldr	r3, [r3, #0]
    ddf4:	681a      	ldr	r2, [r3, #0]
    ddf6:	2101      	movs	r1, #1
    ddf8:	430a      	orrs	r2, r1
    ddfa:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
    ddfc:	687b      	ldr	r3, [r7, #4]
    ddfe:	681b      	ldr	r3, [r3, #0]
    de00:	681b      	ldr	r3, [r3, #0]
    de02:	07db      	lsls	r3, r3, #31
    de04:	0fdb      	lsrs	r3, r3, #31
    de06:	b2db      	uxtb	r3, r3
    de08:	2b00      	cmp	r3, #0
    de0a:	d107      	bne.n	de1c <_ZN6SERCOM9resetWIREEv+0x34>
    de0c:	687b      	ldr	r3, [r7, #4]
    de0e:	681b      	ldr	r3, [r3, #0]
    de10:	69db      	ldr	r3, [r3, #28]
    de12:	07db      	lsls	r3, r3, #31
    de14:	0fdb      	lsrs	r3, r3, #31
    de16:	b2db      	uxtb	r3, r3
    de18:	2b00      	cmp	r3, #0
    de1a:	d001      	beq.n	de20 <_ZN6SERCOM9resetWIREEv+0x38>
    de1c:	2301      	movs	r3, #1
    de1e:	e000      	b.n	de22 <_ZN6SERCOM9resetWIREEv+0x3a>
    de20:	2300      	movs	r3, #0
    de22:	2b00      	cmp	r3, #0
    de24:	d000      	beq.n	de28 <_ZN6SERCOM9resetWIREEv+0x40>
    de26:	e7e9      	b.n	ddfc <_ZN6SERCOM9resetWIREEv+0x14>
}
    de28:	46c0      	nop			; (mov r8, r8)
    de2a:	46bd      	mov	sp, r7
    de2c:	b002      	add	sp, #8
    de2e:	bd80      	pop	{r7, pc}

0000de30 <_ZN6SERCOM10enableWIREEv>:

void SERCOM::enableWIRE()
{
    de30:	b580      	push	{r7, lr}
    de32:	b082      	sub	sp, #8
    de34:	af00      	add	r7, sp, #0
    de36:	6078      	str	r0, [r7, #4]
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    de38:	687b      	ldr	r3, [r7, #4]
    de3a:	681b      	ldr	r3, [r3, #0]
    de3c:	681a      	ldr	r2, [r3, #0]
    de3e:	2102      	movs	r1, #2
    de40:	430a      	orrs	r2, r1
    de42:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    de44:	687b      	ldr	r3, [r7, #4]
    de46:	681b      	ldr	r3, [r3, #0]
    de48:	69db      	ldr	r3, [r3, #28]
    de4a:	079b      	lsls	r3, r3, #30
    de4c:	0fdb      	lsrs	r3, r3, #31
    de4e:	b2db      	uxtb	r3, r3
    de50:	2b00      	cmp	r3, #0
    de52:	d000      	beq.n	de56 <_ZN6SERCOM10enableWIREEv+0x26>
    de54:	e7f6      	b.n	de44 <_ZN6SERCOM10enableWIREEv+0x14>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    de56:	687b      	ldr	r3, [r7, #4]
    de58:	681a      	ldr	r2, [r3, #0]
    de5a:	8b53      	ldrh	r3, [r2, #26]
    de5c:	2130      	movs	r1, #48	; 0x30
    de5e:	438b      	bics	r3, r1
    de60:	1c19      	adds	r1, r3, #0
    de62:	2310      	movs	r3, #16
    de64:	430b      	orrs	r3, r1
    de66:	8353      	strh	r3, [r2, #26]

  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
    de68:	687b      	ldr	r3, [r7, #4]
    de6a:	681b      	ldr	r3, [r3, #0]
    de6c:	69db      	ldr	r3, [r3, #28]
    de6e:	075b      	lsls	r3, r3, #29
    de70:	0fdb      	lsrs	r3, r3, #31
    de72:	b2db      	uxtb	r3, r3
    de74:	2b00      	cmp	r3, #0
    de76:	d000      	beq.n	de7a <_ZN6SERCOM10enableWIREEv+0x4a>
    de78:	e7f6      	b.n	de68 <_ZN6SERCOM10enableWIREEv+0x38>
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    de7a:	46c0      	nop			; (mov r8, r8)
    de7c:	46bd      	mov	sp, r7
    de7e:	b002      	add	sp, #8
    de80:	bd80      	pop	{r7, pc}
	...

0000de84 <_ZN6SERCOM14initMasterWIREEm>:
    // Wait the SYSOP bit from SYNCBUSY to come back to 0
  }
}

void SERCOM::initMasterWIRE( uint32_t baudrate )
{
    de84:	b5b0      	push	{r4, r5, r7, lr}
    de86:	b082      	sub	sp, #8
    de88:	af00      	add	r7, sp, #0
    de8a:	6078      	str	r0, [r7, #4]
    de8c:	6039      	str	r1, [r7, #0]
  // Initialize the peripheral clock and interruption
  initClockNVIC() ;
    de8e:	687b      	ldr	r3, [r7, #4]
    de90:	0018      	movs	r0, r3
    de92:	f000 fa3b 	bl	e30c <_ZN6SERCOM13initClockNVICEv>

  resetWIRE() ;
    de96:	687b      	ldr	r3, [r7, #4]
    de98:	0018      	movs	r0, r3
    de9a:	f7ff ffa5 	bl	dde8 <_ZN6SERCOM9resetWIREEv>

  // Set master mode and enable SCL Clock Stretch mode (stretch after ACK bit)
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    de9e:	687b      	ldr	r3, [r7, #4]
    dea0:	681b      	ldr	r3, [r3, #0]
    dea2:	2214      	movs	r2, #20
    dea4:	601a      	str	r2, [r3, #0]

  // Enable all interrupts
//  sercom->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB | SERCOM_I2CM_INTENSET_ERROR ;

  // Synchronous arithmetic baudrate
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    dea6:	687b      	ldr	r3, [r7, #4]
    dea8:	681c      	ldr	r4, [r3, #0]
    deaa:	4b16      	ldr	r3, [pc, #88]	; (df04 <_ZN6SERCOM14initMasterWIREEm+0x80>)
    deac:	681a      	ldr	r2, [r3, #0]
    deae:	683b      	ldr	r3, [r7, #0]
    deb0:	005b      	lsls	r3, r3, #1
    deb2:	0019      	movs	r1, r3
    deb4:	0010      	movs	r0, r2
    deb6:	f000 fcef 	bl	e898 <__udivsi3>
    deba:	0003      	movs	r3, r0
    debc:	b2dd      	uxtb	r5, r3
    debe:	4b11      	ldr	r3, [pc, #68]	; (df04 <_ZN6SERCOM14initMasterWIREEm+0x80>)
    dec0:	681b      	ldr	r3, [r3, #0]
    dec2:	4911      	ldr	r1, [pc, #68]	; (df08 <_ZN6SERCOM14initMasterWIREEm+0x84>)
    dec4:	0018      	movs	r0, r3
    dec6:	f000 fce7 	bl	e898 <__udivsi3>
    deca:	0003      	movs	r3, r0
    decc:	001a      	movs	r2, r3
    dece:	0013      	movs	r3, r2
    ded0:	015b      	lsls	r3, r3, #5
    ded2:	1a9b      	subs	r3, r3, r2
    ded4:	009b      	lsls	r3, r3, #2
    ded6:	189a      	adds	r2, r3, r2
    ded8:	23fa      	movs	r3, #250	; 0xfa
    deda:	00d9      	lsls	r1, r3, #3
    dedc:	0010      	movs	r0, r2
    dede:	f000 fcdb 	bl	e898 <__udivsi3>
    dee2:	0003      	movs	r3, r0
    dee4:	b2db      	uxtb	r3, r3
    dee6:	1aeb      	subs	r3, r5, r3
    dee8:	b2db      	uxtb	r3, r3
    deea:	3b05      	subs	r3, #5
    deec:	b2da      	uxtb	r2, r3
    deee:	68e3      	ldr	r3, [r4, #12]
    def0:	21ff      	movs	r1, #255	; 0xff
    def2:	400a      	ands	r2, r1
    def4:	21ff      	movs	r1, #255	; 0xff
    def6:	438b      	bics	r3, r1
    def8:	4313      	orrs	r3, r2
    defa:	60e3      	str	r3, [r4, #12]
}
    defc:	46c0      	nop			; (mov r8, r8)
    defe:	46bd      	mov	sp, r7
    df00:	b002      	add	sp, #8
    df02:	bdb0      	pop	{r4, r5, r7, pc}
    df04:	20000048 	.word	0x20000048
    df08:	000f4240 	.word	0x000f4240

0000df0c <_ZN6SERCOM18prepareNackBitWIREEv>:

void SERCOM::prepareNackBitWIRE( void )
{
    df0c:	b580      	push	{r7, lr}
    df0e:	b082      	sub	sp, #8
    df10:	af00      	add	r7, sp, #0
    df12:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE()) {
    df14:	687b      	ldr	r3, [r7, #4]
    df16:	0018      	movs	r0, r3
    df18:	f000 f945 	bl	e1a6 <_ZN6SERCOM12isMasterWIREEv>
    df1c:	1e03      	subs	r3, r0, #0
    df1e:	d007      	beq.n	df30 <_ZN6SERCOM18prepareNackBitWIREEv+0x24>
    // Send a NACK
    sercom->I2CM.CTRLB.bit.ACKACT = 1;
    df20:	687b      	ldr	r3, [r7, #4]
    df22:	681b      	ldr	r3, [r3, #0]
    df24:	685a      	ldr	r2, [r3, #4]
    df26:	2180      	movs	r1, #128	; 0x80
    df28:	02c9      	lsls	r1, r1, #11
    df2a:	430a      	orrs	r2, r1
    df2c:	605a      	str	r2, [r3, #4]
  } else {
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
  }
}
    df2e:	e006      	b.n	df3e <_ZN6SERCOM18prepareNackBitWIREEv+0x32>
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    df30:	687b      	ldr	r3, [r7, #4]
    df32:	681b      	ldr	r3, [r3, #0]
    df34:	685a      	ldr	r2, [r3, #4]
    df36:	2180      	movs	r1, #128	; 0x80
    df38:	02c9      	lsls	r1, r1, #11
    df3a:	430a      	orrs	r2, r1
    df3c:	605a      	str	r2, [r3, #4]
}
    df3e:	46c0      	nop			; (mov r8, r8)
    df40:	46bd      	mov	sp, r7
    df42:	b002      	add	sp, #8
    df44:	bd80      	pop	{r7, pc}
	...

0000df48 <_ZN6SERCOM17prepareAckBitWIREEv>:

void SERCOM::prepareAckBitWIRE( void )
{
    df48:	b580      	push	{r7, lr}
    df4a:	b082      	sub	sp, #8
    df4c:	af00      	add	r7, sp, #0
    df4e:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE()) {
    df50:	687b      	ldr	r3, [r7, #4]
    df52:	0018      	movs	r0, r3
    df54:	f000 f927 	bl	e1a6 <_ZN6SERCOM12isMasterWIREEv>
    df58:	1e03      	subs	r3, r0, #0
    df5a:	d006      	beq.n	df6a <_ZN6SERCOM17prepareAckBitWIREEv+0x22>
    // Send an ACK
    sercom->I2CM.CTRLB.bit.ACKACT = 0;
    df5c:	687b      	ldr	r3, [r7, #4]
    df5e:	681b      	ldr	r3, [r3, #0]
    df60:	685a      	ldr	r2, [r3, #4]
    df62:	4907      	ldr	r1, [pc, #28]	; (df80 <_ZN6SERCOM17prepareAckBitWIREEv+0x38>)
    df64:	400a      	ands	r2, r1
    df66:	605a      	str	r2, [r3, #4]
  } else {
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
  }
}
    df68:	e005      	b.n	df76 <_ZN6SERCOM17prepareAckBitWIREEv+0x2e>
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    df6a:	687b      	ldr	r3, [r7, #4]
    df6c:	681b      	ldr	r3, [r3, #0]
    df6e:	685a      	ldr	r2, [r3, #4]
    df70:	4903      	ldr	r1, [pc, #12]	; (df80 <_ZN6SERCOM17prepareAckBitWIREEv+0x38>)
    df72:	400a      	ands	r2, r1
    df74:	605a      	str	r2, [r3, #4]
}
    df76:	46c0      	nop			; (mov r8, r8)
    df78:	46bd      	mov	sp, r7
    df7a:	b002      	add	sp, #8
    df7c:	bd80      	pop	{r7, pc}
    df7e:	46c0      	nop			; (mov r8, r8)
    df80:	fffbffff 	.word	0xfffbffff

0000df84 <_ZN6SERCOM22prepareCommandBitsWireEh>:

void SERCOM::prepareCommandBitsWire(uint8_t cmd)
{
    df84:	b580      	push	{r7, lr}
    df86:	b082      	sub	sp, #8
    df88:	af00      	add	r7, sp, #0
    df8a:	6078      	str	r0, [r7, #4]
    df8c:	000a      	movs	r2, r1
    df8e:	1cfb      	adds	r3, r7, #3
    df90:	701a      	strb	r2, [r3, #0]
  if(isMasterWIRE()) {
    df92:	687b      	ldr	r3, [r7, #4]
    df94:	0018      	movs	r0, r3
    df96:	f000 f906 	bl	e1a6 <_ZN6SERCOM12isMasterWIREEv>
    df9a:	1e03      	subs	r3, r0, #0
    df9c:	d017      	beq.n	dfce <_ZN6SERCOM22prepareCommandBitsWireEh+0x4a>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    df9e:	687b      	ldr	r3, [r7, #4]
    dfa0:	681b      	ldr	r3, [r3, #0]
    dfa2:	1cfa      	adds	r2, r7, #3
    dfa4:	7812      	ldrb	r2, [r2, #0]
    dfa6:	2103      	movs	r1, #3
    dfa8:	400a      	ands	r2, r1
    dfaa:	b2d1      	uxtb	r1, r2
    dfac:	685a      	ldr	r2, [r3, #4]
    dfae:	2003      	movs	r0, #3
    dfb0:	4001      	ands	r1, r0
    dfb2:	0409      	lsls	r1, r1, #16
    dfb4:	480f      	ldr	r0, [pc, #60]	; (dff4 <_ZN6SERCOM22prepareCommandBitsWireEh+0x70>)
    dfb6:	4002      	ands	r2, r0
    dfb8:	430a      	orrs	r2, r1
    dfba:	605a      	str	r2, [r3, #4]

    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
    dfbc:	687b      	ldr	r3, [r7, #4]
    dfbe:	681b      	ldr	r3, [r3, #0]
    dfc0:	69db      	ldr	r3, [r3, #28]
    dfc2:	075b      	lsls	r3, r3, #29
    dfc4:	0fdb      	lsrs	r3, r3, #31
    dfc6:	b2db      	uxtb	r3, r3
    dfc8:	2b00      	cmp	r3, #0
    dfca:	d00f      	beq.n	dfec <_ZN6SERCOM22prepareCommandBitsWireEh+0x68>
    dfcc:	e7f6      	b.n	dfbc <_ZN6SERCOM22prepareCommandBitsWireEh+0x38>
    {
      // Waiting for synchronization
    }
  } else {
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    dfce:	687b      	ldr	r3, [r7, #4]
    dfd0:	681b      	ldr	r3, [r3, #0]
    dfd2:	1cfa      	adds	r2, r7, #3
    dfd4:	7812      	ldrb	r2, [r2, #0]
    dfd6:	2103      	movs	r1, #3
    dfd8:	400a      	ands	r2, r1
    dfda:	b2d1      	uxtb	r1, r2
    dfdc:	685a      	ldr	r2, [r3, #4]
    dfde:	2003      	movs	r0, #3
    dfe0:	4001      	ands	r1, r0
    dfe2:	0409      	lsls	r1, r1, #16
    dfe4:	4803      	ldr	r0, [pc, #12]	; (dff4 <_ZN6SERCOM22prepareCommandBitsWireEh+0x70>)
    dfe6:	4002      	ands	r2, r0
    dfe8:	430a      	orrs	r2, r1
    dfea:	605a      	str	r2, [r3, #4]
  }
}
    dfec:	46c0      	nop			; (mov r8, r8)
    dfee:	46bd      	mov	sp, r7
    dff0:	b002      	add	sp, #8
    dff2:	bd80      	pop	{r7, pc}
    dff4:	fffcffff 	.word	0xfffcffff

0000dff8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>:

bool SERCOM::startTransmissionWIRE(uint8_t address, SercomWireReadWriteFlag flag)
{
    dff8:	b580      	push	{r7, lr}
    dffa:	b082      	sub	sp, #8
    dffc:	af00      	add	r7, sp, #0
    dffe:	6078      	str	r0, [r7, #4]
    e000:	0008      	movs	r0, r1
    e002:	0011      	movs	r1, r2
    e004:	1cfb      	adds	r3, r7, #3
    e006:	1c02      	adds	r2, r0, #0
    e008:	701a      	strb	r2, [r3, #0]
    e00a:	1cbb      	adds	r3, r7, #2
    e00c:	1c0a      	adds	r2, r1, #0
    e00e:	701a      	strb	r2, [r3, #0]
  // 7-bits address + 1-bits R/W
  address = (address << 0x1ul) | flag;
    e010:	1cfb      	adds	r3, r7, #3
    e012:	781b      	ldrb	r3, [r3, #0]
    e014:	005b      	lsls	r3, r3, #1
    e016:	b25a      	sxtb	r2, r3
    e018:	1cbb      	adds	r3, r7, #2
    e01a:	781b      	ldrb	r3, [r3, #0]
    e01c:	b25b      	sxtb	r3, r3
    e01e:	4313      	orrs	r3, r2
    e020:	b25a      	sxtb	r2, r3
    e022:	1cfb      	adds	r3, r7, #3
    e024:	701a      	strb	r2, [r3, #0]

  // Wait idle or owner bus mode
  while ( !isBusIdleWIRE() && !isBusOwnerWIRE() );
    e026:	687b      	ldr	r3, [r7, #4]
    e028:	0018      	movs	r0, r3
    e02a:	f000 f8e0 	bl	e1ee <_ZN6SERCOM13isBusIdleWIREEv>
    e02e:	0003      	movs	r3, r0
    e030:	001a      	movs	r2, r3
    e032:	2301      	movs	r3, #1
    e034:	4053      	eors	r3, r2
    e036:	b2db      	uxtb	r3, r3
    e038:	2b00      	cmp	r3, #0
    e03a:	d00c      	beq.n	e056 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5e>
    e03c:	687b      	ldr	r3, [r7, #4]
    e03e:	0018      	movs	r0, r3
    e040:	f000 f8e7 	bl	e212 <_ZN6SERCOM14isBusOwnerWIREEv>
    e044:	0003      	movs	r3, r0
    e046:	001a      	movs	r2, r3
    e048:	2301      	movs	r3, #1
    e04a:	4053      	eors	r3, r2
    e04c:	b2db      	uxtb	r3, r3
    e04e:	2b00      	cmp	r3, #0
    e050:	d001      	beq.n	e056 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5e>
    e052:	2301      	movs	r3, #1
    e054:	e000      	b.n	e058 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x60>
    e056:	2300      	movs	r3, #0
    e058:	2b00      	cmp	r3, #0
    e05a:	d000      	beq.n	e05e <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x66>
    e05c:	e7e3      	b.n	e026 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>

  // Send start and address
  sercom->I2CM.ADDR.bit.ADDR = address;
    e05e:	687b      	ldr	r3, [r7, #4]
    e060:	681b      	ldr	r3, [r3, #0]
    e062:	1cfa      	adds	r2, r7, #3
    e064:	7812      	ldrb	r2, [r2, #0]
    e066:	b292      	uxth	r2, r2
    e068:	0552      	lsls	r2, r2, #21
    e06a:	0d52      	lsrs	r2, r2, #21
    e06c:	b291      	uxth	r1, r2
    e06e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e070:	0549      	lsls	r1, r1, #21
    e072:	0d49      	lsrs	r1, r1, #21
    e074:	0ad2      	lsrs	r2, r2, #11
    e076:	02d2      	lsls	r2, r2, #11
    e078:	430a      	orrs	r2, r1
    e07a:	625a      	str	r2, [r3, #36]	; 0x24

  // Address Transmitted
  if ( flag == WIRE_WRITE_FLAG ) // Write mode
    e07c:	1cbb      	adds	r3, r7, #2
    e07e:	781b      	ldrb	r3, [r3, #0]
    e080:	2b00      	cmp	r3, #0
    e082:	d10b      	bne.n	e09c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xa4>
  {
    while( !sercom->I2CM.INTFLAG.bit.MB )
    e084:	687b      	ldr	r3, [r7, #4]
    e086:	681b      	ldr	r3, [r3, #0]
    e088:	7e1b      	ldrb	r3, [r3, #24]
    e08a:	07db      	lsls	r3, r3, #31
    e08c:	0fdb      	lsrs	r3, r3, #31
    e08e:	b2db      	uxtb	r3, r3
    e090:	2201      	movs	r2, #1
    e092:	4053      	eors	r3, r2
    e094:	b2db      	uxtb	r3, r3
    e096:	2b00      	cmp	r3, #0
    e098:	d01c      	beq.n	e0d4 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xdc>
    e09a:	e7f3      	b.n	e084 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x8c>
      // Wait transmission complete
    }
  }
  else  // Read mode
  {
    while( !sercom->I2CM.INTFLAG.bit.SB )
    e09c:	687b      	ldr	r3, [r7, #4]
    e09e:	681b      	ldr	r3, [r3, #0]
    e0a0:	7e1b      	ldrb	r3, [r3, #24]
    e0a2:	079b      	lsls	r3, r3, #30
    e0a4:	0fdb      	lsrs	r3, r3, #31
    e0a6:	b2db      	uxtb	r3, r3
    e0a8:	2201      	movs	r2, #1
    e0aa:	4053      	eors	r3, r2
    e0ac:	b2db      	uxtb	r3, r3
    e0ae:	2b00      	cmp	r3, #0
    e0b0:	d010      	beq.n	e0d4 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xdc>
    {
        // If the slave NACKS the address, the MB bit will be set.
        // In that case, send a stop condition and return false.
        if (sercom->I2CM.INTFLAG.bit.MB) {
    e0b2:	687b      	ldr	r3, [r7, #4]
    e0b4:	681b      	ldr	r3, [r3, #0]
    e0b6:	7e1b      	ldrb	r3, [r3, #24]
    e0b8:	07db      	lsls	r3, r3, #31
    e0ba:	0fdb      	lsrs	r3, r3, #31
    e0bc:	b2db      	uxtb	r3, r3
    e0be:	2b00      	cmp	r3, #0
    e0c0:	d0ec      	beq.n	e09c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xa4>
            sercom->I2CM.CTRLB.bit.CMD = 3; // Stop condition
    e0c2:	687b      	ldr	r3, [r7, #4]
    e0c4:	681b      	ldr	r3, [r3, #0]
    e0c6:	685a      	ldr	r2, [r3, #4]
    e0c8:	21c0      	movs	r1, #192	; 0xc0
    e0ca:	0289      	lsls	r1, r1, #10
    e0cc:	430a      	orrs	r2, r1
    e0ce:	605a      	str	r2, [r3, #4]
            return false;
    e0d0:	2300      	movs	r3, #0
    e0d2:	e00a      	b.n	e0ea <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf2>
    //sercom->I2CM.INTFLAG.bit.SB = 0x1ul;
  }


  //ACK received (0: ACK, 1: NACK)
  if(sercom->I2CM.STATUS.bit.RXNACK)
    e0d4:	687b      	ldr	r3, [r7, #4]
    e0d6:	681b      	ldr	r3, [r3, #0]
    e0d8:	8b5b      	ldrh	r3, [r3, #26]
    e0da:	075b      	lsls	r3, r3, #29
    e0dc:	0fdb      	lsrs	r3, r3, #31
    e0de:	b2db      	uxtb	r3, r3
    e0e0:	2b00      	cmp	r3, #0
    e0e2:	d001      	beq.n	e0e8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf0>
  {
    return false;
    e0e4:	2300      	movs	r3, #0
    e0e6:	e000      	b.n	e0ea <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf2>
  }
  else
  {
    return true;
    e0e8:	2301      	movs	r3, #1
  }
}
    e0ea:	0018      	movs	r0, r3
    e0ec:	46bd      	mov	sp, r7
    e0ee:	b002      	add	sp, #8
    e0f0:	bd80      	pop	{r7, pc}

0000e0f2 <_ZN6SERCOM18sendDataMasterWIREEh>:

bool SERCOM::sendDataMasterWIRE(uint8_t data)
{
    e0f2:	b580      	push	{r7, lr}
    e0f4:	b082      	sub	sp, #8
    e0f6:	af00      	add	r7, sp, #0
    e0f8:	6078      	str	r0, [r7, #4]
    e0fa:	000a      	movs	r2, r1
    e0fc:	1cfb      	adds	r3, r7, #3
    e0fe:	701a      	strb	r2, [r3, #0]
  //Send data
  sercom->I2CM.DATA.bit.DATA = data;
    e100:	687b      	ldr	r3, [r7, #4]
    e102:	681b      	ldr	r3, [r3, #0]
    e104:	1cfa      	adds	r2, r7, #3
    e106:	2128      	movs	r1, #40	; 0x28
    e108:	7812      	ldrb	r2, [r2, #0]
    e10a:	545a      	strb	r2, [r3, r1]

  //Wait transmission successful
  while(!sercom->I2CM.INTFLAG.bit.MB) {
    e10c:	687b      	ldr	r3, [r7, #4]
    e10e:	681b      	ldr	r3, [r3, #0]
    e110:	7e1b      	ldrb	r3, [r3, #24]
    e112:	07db      	lsls	r3, r3, #31
    e114:	0fdb      	lsrs	r3, r3, #31
    e116:	b2db      	uxtb	r3, r3
    e118:	2201      	movs	r2, #1
    e11a:	4053      	eors	r3, r2
    e11c:	b2db      	uxtb	r3, r3
    e11e:	2b00      	cmp	r3, #0
    e120:	d009      	beq.n	e136 <_ZN6SERCOM18sendDataMasterWIREEh+0x44>

    // If a bus error occurs, the MB bit may never be set.
    // Check the bus error bit and bail if it's set.
    if (sercom->I2CM.STATUS.bit.BUSERR) {
    e122:	687b      	ldr	r3, [r7, #4]
    e124:	681b      	ldr	r3, [r3, #0]
    e126:	8b5b      	ldrh	r3, [r3, #26]
    e128:	07db      	lsls	r3, r3, #31
    e12a:	0fdb      	lsrs	r3, r3, #31
    e12c:	b2db      	uxtb	r3, r3
    e12e:	2b00      	cmp	r3, #0
    e130:	d0ec      	beq.n	e10c <_ZN6SERCOM18sendDataMasterWIREEh+0x1a>
      return false;
    e132:	2300      	movs	r3, #0
    e134:	e00a      	b.n	e14c <_ZN6SERCOM18sendDataMasterWIREEh+0x5a>
    }
  }

  //Problems on line? nack received?
  if(sercom->I2CM.STATUS.bit.RXNACK)
    e136:	687b      	ldr	r3, [r7, #4]
    e138:	681b      	ldr	r3, [r3, #0]
    e13a:	8b5b      	ldrh	r3, [r3, #26]
    e13c:	075b      	lsls	r3, r3, #29
    e13e:	0fdb      	lsrs	r3, r3, #31
    e140:	b2db      	uxtb	r3, r3
    e142:	2b00      	cmp	r3, #0
    e144:	d001      	beq.n	e14a <_ZN6SERCOM18sendDataMasterWIREEh+0x58>
    return false;
    e146:	2300      	movs	r3, #0
    e148:	e000      	b.n	e14c <_ZN6SERCOM18sendDataMasterWIREEh+0x5a>
  else
    return true;
    e14a:	2301      	movs	r3, #1
}
    e14c:	0018      	movs	r0, r3
    e14e:	46bd      	mov	sp, r7
    e150:	b002      	add	sp, #8
    e152:	bd80      	pop	{r7, pc}

0000e154 <_ZN6SERCOM17sendDataSlaveWIREEh>:

bool SERCOM::sendDataSlaveWIRE(uint8_t data)
{
    e154:	b580      	push	{r7, lr}
    e156:	b082      	sub	sp, #8
    e158:	af00      	add	r7, sp, #0
    e15a:	6078      	str	r0, [r7, #4]
    e15c:	000a      	movs	r2, r1
    e15e:	1cfb      	adds	r3, r7, #3
    e160:	701a      	strb	r2, [r3, #0]
  //Send data
  sercom->I2CS.DATA.bit.DATA = data;
    e162:	687b      	ldr	r3, [r7, #4]
    e164:	681b      	ldr	r3, [r3, #0]
    e166:	1cfa      	adds	r2, r7, #3
    e168:	2128      	movs	r1, #40	; 0x28
    e16a:	7812      	ldrb	r2, [r2, #0]
    e16c:	545a      	strb	r2, [r3, r1]

  //Problems on line? nack received?
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
    e16e:	687b      	ldr	r3, [r7, #4]
    e170:	681b      	ldr	r3, [r3, #0]
    e172:	7e1b      	ldrb	r3, [r3, #24]
    e174:	075b      	lsls	r3, r3, #29
    e176:	0fdb      	lsrs	r3, r3, #31
    e178:	b2db      	uxtb	r3, r3
    e17a:	2b00      	cmp	r3, #0
    e17c:	d007      	beq.n	e18e <_ZN6SERCOM17sendDataSlaveWIREEh+0x3a>
    e17e:	687b      	ldr	r3, [r7, #4]
    e180:	681b      	ldr	r3, [r3, #0]
    e182:	8b5b      	ldrh	r3, [r3, #26]
    e184:	075b      	lsls	r3, r3, #29
    e186:	0fdb      	lsrs	r3, r3, #31
    e188:	b2db      	uxtb	r3, r3
    e18a:	2b00      	cmp	r3, #0
    e18c:	d001      	beq.n	e192 <_ZN6SERCOM17sendDataSlaveWIREEh+0x3e>
    e18e:	2301      	movs	r3, #1
    e190:	e000      	b.n	e194 <_ZN6SERCOM17sendDataSlaveWIREEh+0x40>
    e192:	2300      	movs	r3, #0
    e194:	2b00      	cmp	r3, #0
    e196:	d001      	beq.n	e19c <_ZN6SERCOM17sendDataSlaveWIREEh+0x48>
    return false;
    e198:	2300      	movs	r3, #0
    e19a:	e000      	b.n	e19e <_ZN6SERCOM17sendDataSlaveWIREEh+0x4a>
  else
    return true;
    e19c:	2301      	movs	r3, #1
}
    e19e:	0018      	movs	r0, r3
    e1a0:	46bd      	mov	sp, r7
    e1a2:	b002      	add	sp, #8
    e1a4:	bd80      	pop	{r7, pc}

0000e1a6 <_ZN6SERCOM12isMasterWIREEv>:

bool SERCOM::isMasterWIRE( void )
{
    e1a6:	b580      	push	{r7, lr}
    e1a8:	b082      	sub	sp, #8
    e1aa:	af00      	add	r7, sp, #0
    e1ac:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    e1ae:	687b      	ldr	r3, [r7, #4]
    e1b0:	681b      	ldr	r3, [r3, #0]
    e1b2:	681b      	ldr	r3, [r3, #0]
    e1b4:	06db      	lsls	r3, r3, #27
    e1b6:	0f5b      	lsrs	r3, r3, #29
    e1b8:	b2db      	uxtb	r3, r3
    e1ba:	3b05      	subs	r3, #5
    e1bc:	425a      	negs	r2, r3
    e1be:	4153      	adcs	r3, r2
    e1c0:	b2db      	uxtb	r3, r3
}
    e1c2:	0018      	movs	r0, r3
    e1c4:	46bd      	mov	sp, r7
    e1c6:	b002      	add	sp, #8
    e1c8:	bd80      	pop	{r7, pc}

0000e1ca <_ZN6SERCOM11isSlaveWIREEv>:

bool SERCOM::isSlaveWIRE( void )
{
    e1ca:	b580      	push	{r7, lr}
    e1cc:	b082      	sub	sp, #8
    e1ce:	af00      	add	r7, sp, #0
    e1d0:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
    e1d2:	687b      	ldr	r3, [r7, #4]
    e1d4:	681b      	ldr	r3, [r3, #0]
    e1d6:	681b      	ldr	r3, [r3, #0]
    e1d8:	06db      	lsls	r3, r3, #27
    e1da:	0f5b      	lsrs	r3, r3, #29
    e1dc:	b2db      	uxtb	r3, r3
    e1de:	3b04      	subs	r3, #4
    e1e0:	425a      	negs	r2, r3
    e1e2:	4153      	adcs	r3, r2
    e1e4:	b2db      	uxtb	r3, r3
}
    e1e6:	0018      	movs	r0, r3
    e1e8:	46bd      	mov	sp, r7
    e1ea:	b002      	add	sp, #8
    e1ec:	bd80      	pop	{r7, pc}

0000e1ee <_ZN6SERCOM13isBusIdleWIREEv>:

bool SERCOM::isBusIdleWIRE( void )
{
    e1ee:	b580      	push	{r7, lr}
    e1f0:	b082      	sub	sp, #8
    e1f2:	af00      	add	r7, sp, #0
    e1f4:	6078      	str	r0, [r7, #4]
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    e1f6:	687b      	ldr	r3, [r7, #4]
    e1f8:	681b      	ldr	r3, [r3, #0]
    e1fa:	8b5b      	ldrh	r3, [r3, #26]
    e1fc:	069b      	lsls	r3, r3, #26
    e1fe:	0f9b      	lsrs	r3, r3, #30
    e200:	b2db      	uxtb	r3, r3
    e202:	3b01      	subs	r3, #1
    e204:	425a      	negs	r2, r3
    e206:	4153      	adcs	r3, r2
    e208:	b2db      	uxtb	r3, r3
}
    e20a:	0018      	movs	r0, r3
    e20c:	46bd      	mov	sp, r7
    e20e:	b002      	add	sp, #8
    e210:	bd80      	pop	{r7, pc}

0000e212 <_ZN6SERCOM14isBusOwnerWIREEv>:

bool SERCOM::isBusOwnerWIRE( void )
{
    e212:	b580      	push	{r7, lr}
    e214:	b082      	sub	sp, #8
    e216:	af00      	add	r7, sp, #0
    e218:	6078      	str	r0, [r7, #4]
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    e21a:	687b      	ldr	r3, [r7, #4]
    e21c:	681b      	ldr	r3, [r3, #0]
    e21e:	8b5b      	ldrh	r3, [r3, #26]
    e220:	069b      	lsls	r3, r3, #26
    e222:	0f9b      	lsrs	r3, r3, #30
    e224:	b2db      	uxtb	r3, r3
    e226:	3b02      	subs	r3, #2
    e228:	425a      	negs	r2, r3
    e22a:	4153      	adcs	r3, r2
    e22c:	b2db      	uxtb	r3, r3
}
    e22e:	0018      	movs	r0, r3
    e230:	46bd      	mov	sp, r7
    e232:	b002      	add	sp, #8
    e234:	bd80      	pop	{r7, pc}

0000e236 <_ZN6SERCOM15isDataReadyWIREEv>:

bool SERCOM::isDataReadyWIRE( void )
{
    e236:	b580      	push	{r7, lr}
    e238:	b082      	sub	sp, #8
    e23a:	af00      	add	r7, sp, #0
    e23c:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.DRDY;
    e23e:	687b      	ldr	r3, [r7, #4]
    e240:	681b      	ldr	r3, [r3, #0]
    e242:	7e1b      	ldrb	r3, [r3, #24]
    e244:	075b      	lsls	r3, r3, #29
    e246:	0fdb      	lsrs	r3, r3, #31
    e248:	b2db      	uxtb	r3, r3
}
    e24a:	0018      	movs	r0, r3
    e24c:	46bd      	mov	sp, r7
    e24e:	b002      	add	sp, #8
    e250:	bd80      	pop	{r7, pc}

0000e252 <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
    e252:	b580      	push	{r7, lr}
    e254:	b082      	sub	sp, #8
    e256:	af00      	add	r7, sp, #0
    e258:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.PREC;
    e25a:	687b      	ldr	r3, [r7, #4]
    e25c:	681b      	ldr	r3, [r3, #0]
    e25e:	7e1b      	ldrb	r3, [r3, #24]
    e260:	07db      	lsls	r3, r3, #31
    e262:	0fdb      	lsrs	r3, r3, #31
    e264:	b2db      	uxtb	r3, r3
}
    e266:	0018      	movs	r0, r3
    e268:	46bd      	mov	sp, r7
    e26a:	b002      	add	sp, #8
    e26c:	bd80      	pop	{r7, pc}

0000e26e <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
    e26e:	b580      	push	{r7, lr}
    e270:	b082      	sub	sp, #8
    e272:	af00      	add	r7, sp, #0
    e274:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.STATUS.bit.SR;
    e276:	687b      	ldr	r3, [r7, #4]
    e278:	681b      	ldr	r3, [r3, #0]
    e27a:	8b5b      	ldrh	r3, [r3, #26]
    e27c:	06db      	lsls	r3, r3, #27
    e27e:	0fdb      	lsrs	r3, r3, #31
    e280:	b2db      	uxtb	r3, r3
}
    e282:	0018      	movs	r0, r3
    e284:	46bd      	mov	sp, r7
    e286:	b002      	add	sp, #8
    e288:	bd80      	pop	{r7, pc}

0000e28a <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
    e28a:	b580      	push	{r7, lr}
    e28c:	b082      	sub	sp, #8
    e28e:	af00      	add	r7, sp, #0
    e290:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.AMATCH;
    e292:	687b      	ldr	r3, [r7, #4]
    e294:	681b      	ldr	r3, [r3, #0]
    e296:	7e1b      	ldrb	r3, [r3, #24]
    e298:	079b      	lsls	r3, r3, #30
    e29a:	0fdb      	lsrs	r3, r3, #31
    e29c:	b2db      	uxtb	r3, r3
}
    e29e:	0018      	movs	r0, r3
    e2a0:	46bd      	mov	sp, r7
    e2a2:	b002      	add	sp, #8
    e2a4:	bd80      	pop	{r7, pc}

0000e2a6 <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
    e2a6:	b580      	push	{r7, lr}
    e2a8:	b082      	sub	sp, #8
    e2aa:	af00      	add	r7, sp, #0
    e2ac:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.STATUS.bit.DIR;
    e2ae:	687b      	ldr	r3, [r7, #4]
    e2b0:	681b      	ldr	r3, [r3, #0]
    e2b2:	8b5b      	ldrh	r3, [r3, #26]
    e2b4:	071b      	lsls	r3, r3, #28
    e2b6:	0fdb      	lsrs	r3, r3, #31
    e2b8:	b2db      	uxtb	r3, r3
}
    e2ba:	0018      	movs	r0, r3
    e2bc:	46bd      	mov	sp, r7
    e2be:	b002      	add	sp, #8
    e2c0:	bd80      	pop	{r7, pc}

0000e2c2 <_ZN6SERCOM12readDataWIREEv>:
  else
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
    e2c2:	b580      	push	{r7, lr}
    e2c4:	b082      	sub	sp, #8
    e2c6:	af00      	add	r7, sp, #0
    e2c8:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE())
    e2ca:	687b      	ldr	r3, [r7, #4]
    e2cc:	0018      	movs	r0, r3
    e2ce:	f7ff ff6a 	bl	e1a6 <_ZN6SERCOM12isMasterWIREEv>
    e2d2:	1e03      	subs	r3, r0, #0
    e2d4:	d011      	beq.n	e2fa <_ZN6SERCOM12readDataWIREEv+0x38>
  {
    while( sercom->I2CM.INTFLAG.bit.SB == 0 )
    e2d6:	687b      	ldr	r3, [r7, #4]
    e2d8:	681b      	ldr	r3, [r3, #0]
    e2da:	7e1b      	ldrb	r3, [r3, #24]
    e2dc:	079b      	lsls	r3, r3, #30
    e2de:	0fdb      	lsrs	r3, r3, #31
    e2e0:	b2db      	uxtb	r3, r3
    e2e2:	2201      	movs	r2, #1
    e2e4:	4053      	eors	r3, r2
    e2e6:	b2db      	uxtb	r3, r3
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d000      	beq.n	e2ee <_ZN6SERCOM12readDataWIREEv+0x2c>
    e2ec:	e7f3      	b.n	e2d6 <_ZN6SERCOM12readDataWIREEv+0x14>
    {
      // Waiting complete receive
    }

    return sercom->I2CM.DATA.bit.DATA ;
    e2ee:	687b      	ldr	r3, [r7, #4]
    e2f0:	681b      	ldr	r3, [r3, #0]
    e2f2:	2228      	movs	r2, #40	; 0x28
    e2f4:	5c9b      	ldrb	r3, [r3, r2]
    e2f6:	b2db      	uxtb	r3, r3
    e2f8:	e004      	b.n	e304 <_ZN6SERCOM12readDataWIREEv+0x42>
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
    e2fa:	687b      	ldr	r3, [r7, #4]
    e2fc:	681b      	ldr	r3, [r3, #0]
    e2fe:	2228      	movs	r2, #40	; 0x28
    e300:	5c9b      	ldrb	r3, [r3, r2]
    e302:	b2db      	uxtb	r3, r3
  }
}
    e304:	0018      	movs	r0, r3
    e306:	46bd      	mov	sp, r7
    e308:	b002      	add	sp, #8
    e30a:	bd80      	pop	{r7, pc}

0000e30c <_ZN6SERCOM13initClockNVICEv>:


void SERCOM::initClockNVIC( void )
{
    e30c:	b580      	push	{r7, lr}
    e30e:	b084      	sub	sp, #16
    e310:	af00      	add	r7, sp, #0
    e312:	6078      	str	r0, [r7, #4]
  uint8_t clockId = 0;
    e314:	230f      	movs	r3, #15
    e316:	18fb      	adds	r3, r7, r3
    e318:	2200      	movs	r2, #0
    e31a:	701a      	strb	r2, [r3, #0]
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
    e31c:	230e      	movs	r3, #14
    e31e:	18fb      	adds	r3, r7, r3
    e320:	22fe      	movs	r2, #254	; 0xfe
    e322:	701a      	strb	r2, [r3, #0]

  if(sercom == SERCOM0)
    e324:	687b      	ldr	r3, [r7, #4]
    e326:	681b      	ldr	r3, [r3, #0]
    e328:	4a40      	ldr	r2, [pc, #256]	; (e42c <_ZN6SERCOM13initClockNVICEv+0x120>)
    e32a:	4293      	cmp	r3, r2
    e32c:	d108      	bne.n	e340 <_ZN6SERCOM13initClockNVICEv+0x34>
  {
    clockId = GCM_SERCOM0_CORE;
    e32e:	230f      	movs	r3, #15
    e330:	18fb      	adds	r3, r7, r3
    e332:	2214      	movs	r2, #20
    e334:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM0_IRQn;
    e336:	230e      	movs	r3, #14
    e338:	18fb      	adds	r3, r7, r3
    e33a:	2209      	movs	r2, #9
    e33c:	701a      	strb	r2, [r3, #0]
    e33e:	e044      	b.n	e3ca <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM1)
    e340:	687b      	ldr	r3, [r7, #4]
    e342:	681b      	ldr	r3, [r3, #0]
    e344:	4a3a      	ldr	r2, [pc, #232]	; (e430 <_ZN6SERCOM13initClockNVICEv+0x124>)
    e346:	4293      	cmp	r3, r2
    e348:	d108      	bne.n	e35c <_ZN6SERCOM13initClockNVICEv+0x50>
  {
    clockId = GCM_SERCOM1_CORE;
    e34a:	230f      	movs	r3, #15
    e34c:	18fb      	adds	r3, r7, r3
    e34e:	2215      	movs	r2, #21
    e350:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM1_IRQn;
    e352:	230e      	movs	r3, #14
    e354:	18fb      	adds	r3, r7, r3
    e356:	220a      	movs	r2, #10
    e358:	701a      	strb	r2, [r3, #0]
    e35a:	e036      	b.n	e3ca <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM2)
    e35c:	687b      	ldr	r3, [r7, #4]
    e35e:	681b      	ldr	r3, [r3, #0]
    e360:	4a34      	ldr	r2, [pc, #208]	; (e434 <_ZN6SERCOM13initClockNVICEv+0x128>)
    e362:	4293      	cmp	r3, r2
    e364:	d108      	bne.n	e378 <_ZN6SERCOM13initClockNVICEv+0x6c>
  {
    clockId = GCM_SERCOM2_CORE;
    e366:	230f      	movs	r3, #15
    e368:	18fb      	adds	r3, r7, r3
    e36a:	2216      	movs	r2, #22
    e36c:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM2_IRQn;
    e36e:	230e      	movs	r3, #14
    e370:	18fb      	adds	r3, r7, r3
    e372:	220b      	movs	r2, #11
    e374:	701a      	strb	r2, [r3, #0]
    e376:	e028      	b.n	e3ca <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM3)
    e378:	687b      	ldr	r3, [r7, #4]
    e37a:	681b      	ldr	r3, [r3, #0]
    e37c:	4a2e      	ldr	r2, [pc, #184]	; (e438 <_ZN6SERCOM13initClockNVICEv+0x12c>)
    e37e:	4293      	cmp	r3, r2
    e380:	d108      	bne.n	e394 <_ZN6SERCOM13initClockNVICEv+0x88>
  {
    clockId = GCM_SERCOM3_CORE;
    e382:	230f      	movs	r3, #15
    e384:	18fb      	adds	r3, r7, r3
    e386:	2217      	movs	r2, #23
    e388:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM3_IRQn;
    e38a:	230e      	movs	r3, #14
    e38c:	18fb      	adds	r3, r7, r3
    e38e:	220c      	movs	r2, #12
    e390:	701a      	strb	r2, [r3, #0]
    e392:	e01a      	b.n	e3ca <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    e394:	687b      	ldr	r3, [r7, #4]
    e396:	681b      	ldr	r3, [r3, #0]
    e398:	4a28      	ldr	r2, [pc, #160]	; (e43c <_ZN6SERCOM13initClockNVICEv+0x130>)
    e39a:	4293      	cmp	r3, r2
    e39c:	d108      	bne.n	e3b0 <_ZN6SERCOM13initClockNVICEv+0xa4>
  {
    clockId = GCM_SERCOM4_CORE;
    e39e:	230f      	movs	r3, #15
    e3a0:	18fb      	adds	r3, r7, r3
    e3a2:	2218      	movs	r2, #24
    e3a4:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM4_IRQn;
    e3a6:	230e      	movs	r3, #14
    e3a8:	18fb      	adds	r3, r7, r3
    e3aa:	220d      	movs	r2, #13
    e3ac:	701a      	strb	r2, [r3, #0]
    e3ae:	e00c      	b.n	e3ca <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    e3b0:	687b      	ldr	r3, [r7, #4]
    e3b2:	681b      	ldr	r3, [r3, #0]
    e3b4:	4a22      	ldr	r2, [pc, #136]	; (e440 <_ZN6SERCOM13initClockNVICEv+0x134>)
    e3b6:	4293      	cmp	r3, r2
    e3b8:	d107      	bne.n	e3ca <_ZN6SERCOM13initClockNVICEv+0xbe>
  {
    clockId = GCM_SERCOM5_CORE;
    e3ba:	230f      	movs	r3, #15
    e3bc:	18fb      	adds	r3, r7, r3
    e3be:	2219      	movs	r2, #25
    e3c0:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM5_IRQn;
    e3c2:	230e      	movs	r3, #14
    e3c4:	18fb      	adds	r3, r7, r3
    e3c6:	220e      	movs	r2, #14
    e3c8:	701a      	strb	r2, [r3, #0]
  }
  #endif // SERCOM5

  if ( IdNvic == PendSV_IRQn )
    e3ca:	230e      	movs	r3, #14
    e3cc:	18fb      	adds	r3, r7, r3
    e3ce:	781b      	ldrb	r3, [r3, #0]
    e3d0:	b25b      	sxtb	r3, r3
    e3d2:	3302      	adds	r3, #2
    e3d4:	d025      	beq.n	e422 <_ZN6SERCOM13initClockNVICEv+0x116>
    // We got a problem here
    return ;
  }

  // Setting NVIC
  NVIC_EnableIRQ(IdNvic);
    e3d6:	230e      	movs	r3, #14
    e3d8:	18fb      	adds	r3, r7, r3
    e3da:	781b      	ldrb	r3, [r3, #0]
    e3dc:	b25b      	sxtb	r3, r3
    e3de:	0018      	movs	r0, r3
    e3e0:	f7ff f998 	bl	d714 <__NVIC_EnableIRQ>
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */
    e3e4:	230e      	movs	r3, #14
    e3e6:	18fb      	adds	r3, r7, r3
    e3e8:	781b      	ldrb	r3, [r3, #0]
    e3ea:	b25b      	sxtb	r3, r3
    e3ec:	2103      	movs	r1, #3
    e3ee:	0018      	movs	r0, r3
    e3f0:	f7ff f9aa 	bl	d748 <__NVIC_SetPriority>

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    e3f4:	4913      	ldr	r1, [pc, #76]	; (e444 <_ZN6SERCOM13initClockNVICEv+0x138>)
    e3f6:	230f      	movs	r3, #15
    e3f8:	18fb      	adds	r3, r7, r3
    e3fa:	781b      	ldrb	r3, [r3, #0]
    e3fc:	b29b      	uxth	r3, r3
    e3fe:	223f      	movs	r2, #63	; 0x3f
    e400:	4013      	ands	r3, r2
    e402:	b29b      	uxth	r3, r3
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    e404:	2280      	movs	r2, #128	; 0x80
    e406:	01d2      	lsls	r2, r2, #7
    e408:	4313      	orrs	r3, r2
    e40a:	b29b      	uxth	r3, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    e40c:	804b      	strh	r3, [r1, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    e40e:	4b0d      	ldr	r3, [pc, #52]	; (e444 <_ZN6SERCOM13initClockNVICEv+0x138>)
    e410:	785b      	ldrb	r3, [r3, #1]
    e412:	b2db      	uxtb	r3, r3
    e414:	b25b      	sxtb	r3, r3
    e416:	b2db      	uxtb	r3, r3
    e418:	09db      	lsrs	r3, r3, #7
    e41a:	b2db      	uxtb	r3, r3
    e41c:	2b00      	cmp	r3, #0
    e41e:	d001      	beq.n	e424 <_ZN6SERCOM13initClockNVICEv+0x118>
    e420:	e7f5      	b.n	e40e <_ZN6SERCOM13initClockNVICEv+0x102>
    return ;
    e422:	46c0      	nop			; (mov r8, r8)
  {
    /* Wait for synchronization */
  }
}
    e424:	46bd      	mov	sp, r7
    e426:	b004      	add	sp, #16
    e428:	bd80      	pop	{r7, pc}
    e42a:	46c0      	nop			; (mov r8, r8)
    e42c:	42000800 	.word	0x42000800
    e430:	42000c00 	.word	0x42000c00
    e434:	42001000 	.word	0x42001000
    e438:	42001400 	.word	0x42001400
    e43c:	42001800 	.word	0x42001800
    e440:	42001c00 	.word	0x42001c00
    e444:	40000c00 	.word	0x40000c00

0000e448 <_ZN7Serial_C1ER14USBDeviceClass>:
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    e448:	b580      	push	{r7, lr}
    e44a:	b082      	sub	sp, #8
    e44c:	af00      	add	r7, sp, #0
    e44e:	6078      	str	r0, [r7, #4]
    e450:	6039      	str	r1, [r7, #0]
    e452:	687b      	ldr	r3, [r7, #4]
    e454:	0018      	movs	r0, r3
    e456:	f7f5 f8d3 	bl	3600 <_ZN6StreamC1Ev>
    e45a:	4a07      	ldr	r2, [pc, #28]	; (e478 <_ZN7Serial_C1ER14USBDeviceClass+0x30>)
    e45c:	687b      	ldr	r3, [r7, #4]
    e45e:	601a      	str	r2, [r3, #0]
    e460:	687b      	ldr	r3, [r7, #4]
    e462:	683a      	ldr	r2, [r7, #0]
    e464:	611a      	str	r2, [r3, #16]
    e466:	687b      	ldr	r3, [r7, #4]
    e468:	2200      	movs	r2, #0
    e46a:	761a      	strb	r2, [r3, #24]
    e46c:	687b      	ldr	r3, [r7, #4]
    e46e:	0018      	movs	r0, r3
    e470:	46bd      	mov	sp, r7
    e472:	b002      	add	sp, #8
    e474:	bd80      	pop	{r7, pc}
    e476:	46c0      	nop			; (mov r8, r8)
    e478:	000140a8 	.word	0x000140a8

0000e47c <_Z16CDC_GetInterfacePh>:
{
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
    e47c:	b580      	push	{r7, lr}
    e47e:	b082      	sub	sp, #8
    e480:	af00      	add	r7, sp, #0
    e482:	6078      	str	r0, [r7, #4]
	interfaceNum[0] += 2;	// uses 2
    e484:	687b      	ldr	r3, [r7, #4]
    e486:	781b      	ldrb	r3, [r3, #0]
    e488:	3302      	adds	r3, #2
    e48a:	b2da      	uxtb	r2, r3
    e48c:	687b      	ldr	r3, [r7, #4]
    e48e:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    e490:	4905      	ldr	r1, [pc, #20]	; (e4a8 <_Z16CDC_GetInterfacePh+0x2c>)
    e492:	4b06      	ldr	r3, [pc, #24]	; (e4ac <_Z16CDC_GetInterfacePh+0x30>)
    e494:	2242      	movs	r2, #66	; 0x42
    e496:	0018      	movs	r0, r3
    e498:	f7f7 fdae 	bl	5ff8 <_ZN14USBDeviceClass11sendControlEPKvm>
    e49c:	0003      	movs	r3, r0
}
    e49e:	0018      	movs	r0, r3
    e4a0:	46bd      	mov	sp, r7
    e4a2:	b002      	add	sp, #8
    e4a4:	bd80      	pop	{r7, pc}
    e4a6:	46c0      	nop			; (mov r8, r8)
    e4a8:	2000005c 	.word	0x2000005c
    e4ac:	200008f0 	.word	0x200008f0

0000e4b0 <_Z9CDC_SetupR8USBSetup>:

bool CDC_Setup(USBSetup& setup)
{
    e4b0:	b580      	push	{r7, lr}
    e4b2:	b084      	sub	sp, #16
    e4b4:	af00      	add	r7, sp, #0
    e4b6:	6078      	str	r0, [r7, #4]
	uint8_t requestType = setup.bmRequestType;
    e4b8:	230f      	movs	r3, #15
    e4ba:	18fb      	adds	r3, r7, r3
    e4bc:	687a      	ldr	r2, [r7, #4]
    e4be:	7812      	ldrb	r2, [r2, #0]
    e4c0:	701a      	strb	r2, [r3, #0]
	uint8_t r = setup.bRequest;
    e4c2:	230e      	movs	r3, #14
    e4c4:	18fb      	adds	r3, r7, r3
    e4c6:	687a      	ldr	r2, [r7, #4]
    e4c8:	7852      	ldrb	r2, [r2, #1]
    e4ca:	701a      	strb	r2, [r3, #0]

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    e4cc:	230f      	movs	r3, #15
    e4ce:	18fb      	adds	r3, r7, r3
    e4d0:	781b      	ldrb	r3, [r3, #0]
    e4d2:	2ba1      	cmp	r3, #161	; 0xa1
    e4d4:	d10c      	bne.n	e4f0 <_Z9CDC_SetupR8USBSetup+0x40>
	{
		if (r == CDC_GET_LINE_CODING)
    e4d6:	230e      	movs	r3, #14
    e4d8:	18fb      	adds	r3, r7, r3
    e4da:	781b      	ldrb	r3, [r3, #0]
    e4dc:	2b21      	cmp	r3, #33	; 0x21
    e4de:	d107      	bne.n	e4f0 <_Z9CDC_SetupR8USBSetup+0x40>
		{
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    e4e0:	492c      	ldr	r1, [pc, #176]	; (e594 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e4e2:	4b2d      	ldr	r3, [pc, #180]	; (e598 <_Z9CDC_SetupR8USBSetup+0xe8>)
    e4e4:	2207      	movs	r2, #7
    e4e6:	0018      	movs	r0, r3
    e4e8:	f7f7 fd86 	bl	5ff8 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    e4ec:	2301      	movs	r3, #1
    e4ee:	e04c      	b.n	e58a <_Z9CDC_SetupR8USBSetup+0xda>
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    e4f0:	230f      	movs	r3, #15
    e4f2:	18fb      	adds	r3, r7, r3
    e4f4:	781b      	ldrb	r3, [r3, #0]
    e4f6:	2b21      	cmp	r3, #33	; 0x21
    e4f8:	d146      	bne.n	e588 <_Z9CDC_SetupR8USBSetup+0xd8>
	{
		if (r == CDC_SET_LINE_CODING)
    e4fa:	230e      	movs	r3, #14
    e4fc:	18fb      	adds	r3, r7, r3
    e4fe:	781b      	ldrb	r3, [r3, #0]
    e500:	2b20      	cmp	r3, #32
    e502:	d105      	bne.n	e510 <_Z9CDC_SetupR8USBSetup+0x60>
		{
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    e504:	4923      	ldr	r1, [pc, #140]	; (e594 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e506:	4b24      	ldr	r3, [pc, #144]	; (e598 <_Z9CDC_SetupR8USBSetup+0xe8>)
    e508:	2207      	movs	r2, #7
    e50a:	0018      	movs	r0, r3
    e50c:	f7f7 fad2 	bl	5ab4 <_ZN14USBDeviceClass11recvControlEPvm>
		}

		if (r == CDC_SET_CONTROL_LINE_STATE)
    e510:	230e      	movs	r3, #14
    e512:	18fb      	adds	r3, r7, r3
    e514:	781b      	ldrb	r3, [r3, #0]
    e516:	2b22      	cmp	r3, #34	; 0x22
    e518:	d103      	bne.n	e522 <_Z9CDC_SetupR8USBSetup+0x72>
		{
			_usbLineInfo.lineState = setup.wValueL;
    e51a:	687b      	ldr	r3, [r7, #4]
    e51c:	789a      	ldrb	r2, [r3, #2]
    e51e:	4b1d      	ldr	r3, [pc, #116]	; (e594 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e520:	71da      	strb	r2, [r3, #7]
		}

		if (r == CDC_SET_LINE_CODING || r == CDC_SET_CONTROL_LINE_STATE)
    e522:	230e      	movs	r3, #14
    e524:	18fb      	adds	r3, r7, r3
    e526:	781b      	ldrb	r3, [r3, #0]
    e528:	2b20      	cmp	r3, #32
    e52a:	d004      	beq.n	e536 <_Z9CDC_SetupR8USBSetup+0x86>
    e52c:	230e      	movs	r3, #14
    e52e:	18fb      	adds	r3, r7, r3
    e530:	781b      	ldrb	r3, [r3, #0]
    e532:	2b22      	cmp	r3, #34	; 0x22
    e534:	d119      	bne.n	e56a <_Z9CDC_SetupR8USBSetup+0xba>
		{
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed. We check DTR state to determine if host 
			// port is open (bit 0 of lineState).
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    e536:	4b17      	ldr	r3, [pc, #92]	; (e594 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e538:	681a      	ldr	r2, [r3, #0]
    e53a:	2396      	movs	r3, #150	; 0x96
    e53c:	00db      	lsls	r3, r3, #3
    e53e:	429a      	cmp	r2, r3
    e540:	d108      	bne.n	e554 <_Z9CDC_SetupR8USBSetup+0xa4>
    e542:	4b14      	ldr	r3, [pc, #80]	; (e594 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e544:	79db      	ldrb	r3, [r3, #7]
    e546:	b2db      	uxtb	r3, r3
    e548:	001a      	movs	r2, r3
    e54a:	2301      	movs	r3, #1
    e54c:	4013      	ands	r3, r2
    e54e:	d101      	bne.n	e554 <_Z9CDC_SetupR8USBSetup+0xa4>
    e550:	2301      	movs	r3, #1
    e552:	e000      	b.n	e556 <_Z9CDC_SetupR8USBSetup+0xa6>
    e554:	2300      	movs	r3, #0
    e556:	2b00      	cmp	r3, #0
    e558:	d003      	beq.n	e562 <_Z9CDC_SetupR8USBSetup+0xb2>
			{
				initiateReset(250);
    e55a:	20fa      	movs	r0, #250	; 0xfa
    e55c:	f7f4 fefc 	bl	3358 <initiateReset>
    e560:	e001      	b.n	e566 <_Z9CDC_SetupR8USBSetup+0xb6>
			}
			else
			{
				cancelReset();
    e562:	f7f4 ff07 	bl	3374 <cancelReset>
			}
			return false;
    e566:	2300      	movs	r3, #0
    e568:	e00f      	b.n	e58a <_Z9CDC_SetupR8USBSetup+0xda>
		}

		if (CDC_SEND_BREAK == r)
    e56a:	230e      	movs	r3, #14
    e56c:	18fb      	adds	r3, r7, r3
    e56e:	781b      	ldrb	r3, [r3, #0]
    e570:	2b23      	cmp	r3, #35	; 0x23
    e572:	d109      	bne.n	e588 <_Z9CDC_SetupR8USBSetup+0xd8>
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    e574:	687b      	ldr	r3, [r7, #4]
    e576:	78db      	ldrb	r3, [r3, #3]
    e578:	021b      	lsls	r3, r3, #8
    e57a:	687a      	ldr	r2, [r7, #4]
    e57c:	7892      	ldrb	r2, [r2, #2]
    e57e:	431a      	orrs	r2, r3
    e580:	4b06      	ldr	r3, [pc, #24]	; (e59c <_Z9CDC_SetupR8USBSetup+0xec>)
    e582:	601a      	str	r2, [r3, #0]
			return false;
    e584:	2300      	movs	r3, #0
    e586:	e000      	b.n	e58a <_Z9CDC_SetupR8USBSetup+0xda>
		}
	}
	return false;
    e588:	2300      	movs	r3, #0
}
    e58a:	0018      	movs	r0, r3
    e58c:	46bd      	mov	sp, r7
    e58e:	b004      	add	sp, #16
    e590:	bd80      	pop	{r7, pc}
    e592:	46c0      	nop			; (mov r8, r8)
    e594:	20000050 	.word	0x20000050
    e598:	200008f0 	.word	0x200008f0
    e59c:	20000058 	.word	0x20000058

0000e5a0 <_ZN7Serial_9availableEv>:
void Serial_::end(void)
{
}

int Serial_::available(void)
{
    e5a0:	b580      	push	{r7, lr}
    e5a2:	b082      	sub	sp, #8
    e5a4:	af00      	add	r7, sp, #0
    e5a6:	6078      	str	r0, [r7, #4]
	return usb.available(CDC_ENDPOINT_OUT);
    e5a8:	687b      	ldr	r3, [r7, #4]
    e5aa:	691b      	ldr	r3, [r3, #16]
    e5ac:	2102      	movs	r1, #2
    e5ae:	0018      	movs	r0, r3
    e5b0:	f7f7 fab8 	bl	5b24 <_ZN14USBDeviceClass9availableEm>
    e5b4:	0003      	movs	r3, r0
}
    e5b6:	0018      	movs	r0, r3
    e5b8:	46bd      	mov	sp, r7
    e5ba:	b002      	add	sp, #8
    e5bc:	bd80      	pop	{r7, pc}

0000e5be <_ZN7Serial_17availableForWriteEv>:

int Serial_::availableForWrite(void)
{
    e5be:	b580      	push	{r7, lr}
    e5c0:	b082      	sub	sp, #8
    e5c2:	af00      	add	r7, sp, #0
    e5c4:	6078      	str	r0, [r7, #4]
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
    e5c6:	233f      	movs	r3, #63	; 0x3f
}
    e5c8:	0018      	movs	r0, r3
    e5ca:	46bd      	mov	sp, r7
    e5cc:	b002      	add	sp, #8
    e5ce:	bd80      	pop	{r7, pc}

0000e5d0 <_ZN7Serial_4peekEv>:

int _serialPeek = -1;

int Serial_::peek(void)
{
    e5d0:	b580      	push	{r7, lr}
    e5d2:	b082      	sub	sp, #8
    e5d4:	af00      	add	r7, sp, #0
    e5d6:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1)
    e5d8:	4b0b      	ldr	r3, [pc, #44]	; (e608 <_ZN7Serial_4peekEv+0x38>)
    e5da:	681b      	ldr	r3, [r3, #0]
    e5dc:	3301      	adds	r3, #1
    e5de:	d002      	beq.n	e5e6 <_ZN7Serial_4peekEv+0x16>
		return _serialPeek;
    e5e0:	4b09      	ldr	r3, [pc, #36]	; (e608 <_ZN7Serial_4peekEv+0x38>)
    e5e2:	681b      	ldr	r3, [r3, #0]
    e5e4:	e00b      	b.n	e5fe <_ZN7Serial_4peekEv+0x2e>
	_serialPeek = read();
    e5e6:	687b      	ldr	r3, [r7, #4]
    e5e8:	681b      	ldr	r3, [r3, #0]
    e5ea:	3314      	adds	r3, #20
    e5ec:	681b      	ldr	r3, [r3, #0]
    e5ee:	687a      	ldr	r2, [r7, #4]
    e5f0:	0010      	movs	r0, r2
    e5f2:	4798      	blx	r3
    e5f4:	0002      	movs	r2, r0
    e5f6:	4b04      	ldr	r3, [pc, #16]	; (e608 <_ZN7Serial_4peekEv+0x38>)
    e5f8:	601a      	str	r2, [r3, #0]
	return _serialPeek;
    e5fa:	4b03      	ldr	r3, [pc, #12]	; (e608 <_ZN7Serial_4peekEv+0x38>)
    e5fc:	681b      	ldr	r3, [r3, #0]
}
    e5fe:	0018      	movs	r0, r3
    e600:	46bd      	mov	sp, r7
    e602:	b002      	add	sp, #8
    e604:	bd80      	pop	{r7, pc}
    e606:	46c0      	nop			; (mov r8, r8)
    e608:	200000a0 	.word	0x200000a0

0000e60c <_ZN7Serial_4readEv>:

int Serial_::read(void)
{
    e60c:	b580      	push	{r7, lr}
    e60e:	b084      	sub	sp, #16
    e610:	af00      	add	r7, sp, #0
    e612:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1) {
    e614:	4b0b      	ldr	r3, [pc, #44]	; (e644 <_ZN7Serial_4readEv+0x38>)
    e616:	681b      	ldr	r3, [r3, #0]
    e618:	3301      	adds	r3, #1
    e61a:	d008      	beq.n	e62e <_ZN7Serial_4readEv+0x22>
		int res = _serialPeek;
    e61c:	4b09      	ldr	r3, [pc, #36]	; (e644 <_ZN7Serial_4readEv+0x38>)
    e61e:	681b      	ldr	r3, [r3, #0]
    e620:	60fb      	str	r3, [r7, #12]
		_serialPeek = -1;
    e622:	4b08      	ldr	r3, [pc, #32]	; (e644 <_ZN7Serial_4readEv+0x38>)
    e624:	2201      	movs	r2, #1
    e626:	4252      	negs	r2, r2
    e628:	601a      	str	r2, [r3, #0]
		return res;
    e62a:	68fb      	ldr	r3, [r7, #12]
    e62c:	e006      	b.n	e63c <_ZN7Serial_4readEv+0x30>
	}
	return usb.recv(CDC_ENDPOINT_OUT);
    e62e:	687b      	ldr	r3, [r7, #4]
    e630:	691b      	ldr	r3, [r3, #16]
    e632:	2102      	movs	r1, #2
    e634:	0018      	movs	r0, r3
    e636:	f7f7 fb35 	bl	5ca4 <_ZN14USBDeviceClass4recvEm>
    e63a:	0003      	movs	r3, r0
}
    e63c:	0018      	movs	r0, r3
    e63e:	46bd      	mov	sp, r7
    e640:	b004      	add	sp, #16
    e642:	bd80      	pop	{r7, pc}
    e644:	200000a0 	.word	0x200000a0

0000e648 <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
    e648:	b580      	push	{r7, lr}
    e64a:	b082      	sub	sp, #8
    e64c:	af00      	add	r7, sp, #0
    e64e:	6078      	str	r0, [r7, #4]
	usb.flush(CDC_ENDPOINT_IN);
    e650:	687b      	ldr	r3, [r7, #4]
    e652:	691b      	ldr	r3, [r3, #16]
    e654:	2103      	movs	r1, #3
    e656:	0018      	movs	r0, r3
    e658:	f7f7 f9f2 	bl	5a40 <_ZN14USBDeviceClass5flushEm>
}
    e65c:	46c0      	nop			; (mov r8, r8)
    e65e:	46bd      	mov	sp, r7
    e660:	b002      	add	sp, #8
    e662:	bd80      	pop	{r7, pc}

0000e664 <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
    e664:	b580      	push	{r7, lr}
    e666:	b086      	sub	sp, #24
    e668:	af00      	add	r7, sp, #0
    e66a:	60f8      	str	r0, [r7, #12]
    e66c:	60b9      	str	r1, [r7, #8]
    e66e:	607a      	str	r2, [r7, #4]
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    e670:	68fb      	ldr	r3, [r7, #12]
    e672:	6918      	ldr	r0, [r3, #16]
    e674:	687b      	ldr	r3, [r7, #4]
    e676:	68ba      	ldr	r2, [r7, #8]
    e678:	2103      	movs	r1, #3
    e67a:	f7f7 fbbd 	bl	5df8 <_ZN14USBDeviceClass4sendEmPKvm>
    e67e:	0003      	movs	r3, r0
    e680:	617b      	str	r3, [r7, #20]

	if (r > 0) {
    e682:	697b      	ldr	r3, [r7, #20]
    e684:	2b00      	cmp	r3, #0
    e686:	d001      	beq.n	e68c <_ZN7Serial_5writeEPKhj+0x28>
		return r;
    e688:	697b      	ldr	r3, [r7, #20]
    e68a:	e005      	b.n	e698 <_ZN7Serial_5writeEPKhj+0x34>
	} else {
		setWriteError();
    e68c:	68fb      	ldr	r3, [r7, #12]
    e68e:	2101      	movs	r1, #1
    e690:	0018      	movs	r0, r3
    e692:	f7fa f86b 	bl	876c <_ZN5Print13setWriteErrorEi>
		return 0;
    e696:	2300      	movs	r3, #0
	}
}
    e698:	0018      	movs	r0, r3
    e69a:	46bd      	mov	sp, r7
    e69c:	b006      	add	sp, #24
    e69e:	bd80      	pop	{r7, pc}

0000e6a0 <_ZN7Serial_5writeEh>:

size_t Serial_::write(uint8_t c) {
    e6a0:	b580      	push	{r7, lr}
    e6a2:	b082      	sub	sp, #8
    e6a4:	af00      	add	r7, sp, #0
    e6a6:	6078      	str	r0, [r7, #4]
    e6a8:	000a      	movs	r2, r1
    e6aa:	1cfb      	adds	r3, r7, #3
    e6ac:	701a      	strb	r2, [r3, #0]
	return write(&c, 1);
    e6ae:	687b      	ldr	r3, [r7, #4]
    e6b0:	681b      	ldr	r3, [r3, #0]
    e6b2:	3304      	adds	r3, #4
    e6b4:	681b      	ldr	r3, [r3, #0]
    e6b6:	1cf9      	adds	r1, r7, #3
    e6b8:	6878      	ldr	r0, [r7, #4]
    e6ba:	2201      	movs	r2, #1
    e6bc:	4798      	blx	r3
    e6be:	0003      	movs	r3, r0
}
    e6c0:	0018      	movs	r0, r3
    e6c2:	46bd      	mov	sp, r7
    e6c4:	b002      	add	sp, #8
    e6c6:	bd80      	pop	{r7, pc}

0000e6c8 <_Z41__static_initialization_and_destruction_0ii>:

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    e6c8:	b580      	push	{r7, lr}
    e6ca:	b082      	sub	sp, #8
    e6cc:	af00      	add	r7, sp, #0
    e6ce:	6078      	str	r0, [r7, #4]
    e6d0:	6039      	str	r1, [r7, #0]
    e6d2:	687b      	ldr	r3, [r7, #4]
    e6d4:	2b01      	cmp	r3, #1
    e6d6:	d109      	bne.n	e6ec <_Z41__static_initialization_and_destruction_0ii+0x24>
    e6d8:	683b      	ldr	r3, [r7, #0]
    e6da:	4a06      	ldr	r2, [pc, #24]	; (e6f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    e6dc:	4293      	cmp	r3, r2
    e6de:	d105      	bne.n	e6ec <_Z41__static_initialization_and_destruction_0ii+0x24>
    e6e0:	4a05      	ldr	r2, [pc, #20]	; (e6f8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    e6e2:	4b06      	ldr	r3, [pc, #24]	; (e6fc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e6e4:	0011      	movs	r1, r2
    e6e6:	0018      	movs	r0, r3
    e6e8:	f7ff feae 	bl	e448 <_ZN7Serial_C1ER14USBDeviceClass>
    e6ec:	46c0      	nop			; (mov r8, r8)
    e6ee:	46bd      	mov	sp, r7
    e6f0:	b002      	add	sp, #8
    e6f2:	bd80      	pop	{r7, pc}
    e6f4:	0000ffff 	.word	0x0000ffff
    e6f8:	200008f0 	.word	0x200008f0
    e6fc:	20000f50 	.word	0x20000f50

0000e700 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    e700:	b580      	push	{r7, lr}
    e702:	af00      	add	r7, sp, #0
    e704:	4b03      	ldr	r3, [pc, #12]	; (e714 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x14>)
    e706:	0019      	movs	r1, r3
    e708:	2001      	movs	r0, #1
    e70a:	f7ff ffdd 	bl	e6c8 <_Z41__static_initialization_and_destruction_0ii>
    e70e:	46bd      	mov	sp, r7
    e710:	bd80      	pop	{r7, pc}
    e712:	46c0      	nop			; (mov r8, r8)
    e714:	0000ffff 	.word	0x0000ffff

0000e718 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    e718:	b580      	push	{r7, lr}
    e71a:	b086      	sub	sp, #24
    e71c:	af00      	add	r7, sp, #0
    e71e:	6078      	str	r0, [r7, #4]
    e720:	6039      	str	r1, [r7, #0]
	int sent = 0;
    e722:	2300      	movs	r3, #0
    e724:	617b      	str	r3, [r7, #20]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e726:	687b      	ldr	r3, [r7, #4]
    e728:	685b      	ldr	r3, [r3, #4]
    e72a:	613b      	str	r3, [r7, #16]
    e72c:	693b      	ldr	r3, [r7, #16]
    e72e:	2b00      	cmp	r3, #0
    e730:	d017      	beq.n	e762 <_ZN13PluggableUSB_12getInterfaceEPh+0x4a>
		int res = node->getInterface(interfaceCount);
    e732:	693b      	ldr	r3, [r7, #16]
    e734:	681b      	ldr	r3, [r3, #0]
    e736:	3304      	adds	r3, #4
    e738:	681b      	ldr	r3, [r3, #0]
    e73a:	6839      	ldr	r1, [r7, #0]
    e73c:	693a      	ldr	r2, [r7, #16]
    e73e:	0010      	movs	r0, r2
    e740:	4798      	blx	r3
    e742:	0003      	movs	r3, r0
    e744:	60fb      	str	r3, [r7, #12]
		if (res < 0)
    e746:	68fb      	ldr	r3, [r7, #12]
    e748:	2b00      	cmp	r3, #0
    e74a:	da02      	bge.n	e752 <_ZN13PluggableUSB_12getInterfaceEPh+0x3a>
			return -1;
    e74c:	2301      	movs	r3, #1
    e74e:	425b      	negs	r3, r3
    e750:	e008      	b.n	e764 <_ZN13PluggableUSB_12getInterfaceEPh+0x4c>
		sent += res;
    e752:	697a      	ldr	r2, [r7, #20]
    e754:	68fb      	ldr	r3, [r7, #12]
    e756:	18d3      	adds	r3, r2, r3
    e758:	617b      	str	r3, [r7, #20]
	for (node = rootNode; node; node = node->next) {
    e75a:	693b      	ldr	r3, [r7, #16]
    e75c:	68db      	ldr	r3, [r3, #12]
    e75e:	613b      	str	r3, [r7, #16]
    e760:	e7e4      	b.n	e72c <_ZN13PluggableUSB_12getInterfaceEPh+0x14>
	}
	return sent;
    e762:	697b      	ldr	r3, [r7, #20]
}
    e764:	0018      	movs	r0, r3
    e766:	46bd      	mov	sp, r7
    e768:	b006      	add	sp, #24
    e76a:	bd80      	pop	{r7, pc}

0000e76c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    e76c:	b580      	push	{r7, lr}
    e76e:	b084      	sub	sp, #16
    e770:	af00      	add	r7, sp, #0
    e772:	6078      	str	r0, [r7, #4]
    e774:	6039      	str	r1, [r7, #0]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e776:	687b      	ldr	r3, [r7, #4]
    e778:	685b      	ldr	r3, [r3, #4]
    e77a:	60fb      	str	r3, [r7, #12]
    e77c:	68fb      	ldr	r3, [r7, #12]
    e77e:	2b00      	cmp	r3, #0
    e780:	d012      	beq.n	e7a8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x3c>
		int ret = node->getDescriptor(setup);
    e782:	68fb      	ldr	r3, [r7, #12]
    e784:	681b      	ldr	r3, [r3, #0]
    e786:	3308      	adds	r3, #8
    e788:	681b      	ldr	r3, [r3, #0]
    e78a:	6839      	ldr	r1, [r7, #0]
    e78c:	68fa      	ldr	r2, [r7, #12]
    e78e:	0010      	movs	r0, r2
    e790:	4798      	blx	r3
    e792:	0003      	movs	r3, r0
    e794:	60bb      	str	r3, [r7, #8]
		// ret!=0 -> request has been processed
		if (ret)
    e796:	68bb      	ldr	r3, [r7, #8]
    e798:	2b00      	cmp	r3, #0
    e79a:	d001      	beq.n	e7a0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
			return ret;
    e79c:	68bb      	ldr	r3, [r7, #8]
    e79e:	e004      	b.n	e7aa <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x3e>
	for (node = rootNode; node; node = node->next) {
    e7a0:	68fb      	ldr	r3, [r7, #12]
    e7a2:	68db      	ldr	r3, [r3, #12]
    e7a4:	60fb      	str	r3, [r7, #12]
    e7a6:	e7e9      	b.n	e77c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
	}
	return 0;
    e7a8:	2300      	movs	r3, #0
}
    e7aa:	0018      	movs	r0, r3
    e7ac:	46bd      	mov	sp, r7
    e7ae:	b004      	add	sp, #16
    e7b0:	bd80      	pop	{r7, pc}

0000e7b2 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    e7b2:	b580      	push	{r7, lr}
    e7b4:	b084      	sub	sp, #16
    e7b6:	af00      	add	r7, sp, #0
    e7b8:	6078      	str	r0, [r7, #4]
    e7ba:	6039      	str	r1, [r7, #0]
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    e7bc:	687b      	ldr	r3, [r7, #4]
    e7be:	685b      	ldr	r3, [r3, #4]
    e7c0:	60fb      	str	r3, [r7, #12]
    e7c2:	68fb      	ldr	r3, [r7, #12]
    e7c4:	2b00      	cmp	r3, #0
    e7c6:	d010      	beq.n	e7ea <_ZN13PluggableUSB_12getShortNameEPc+0x38>
               iSerialNum += node->getShortName(iSerialNum);
    e7c8:	68fb      	ldr	r3, [r7, #12]
    e7ca:	681b      	ldr	r3, [r3, #0]
    e7cc:	330c      	adds	r3, #12
    e7ce:	681b      	ldr	r3, [r3, #0]
    e7d0:	6839      	ldr	r1, [r7, #0]
    e7d2:	68fa      	ldr	r2, [r7, #12]
    e7d4:	0010      	movs	r0, r2
    e7d6:	4798      	blx	r3
    e7d8:	0003      	movs	r3, r0
    e7da:	001a      	movs	r2, r3
    e7dc:	683b      	ldr	r3, [r7, #0]
    e7de:	189b      	adds	r3, r3, r2
    e7e0:	603b      	str	r3, [r7, #0]
       for (node = rootNode; node; node = node->next) {
    e7e2:	68fb      	ldr	r3, [r7, #12]
    e7e4:	68db      	ldr	r3, [r3, #12]
    e7e6:	60fb      	str	r3, [r7, #12]
    e7e8:	e7eb      	b.n	e7c2 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
       }
       *iSerialNum = 0;
    e7ea:	683b      	ldr	r3, [r7, #0]
    e7ec:	2200      	movs	r2, #0
    e7ee:	701a      	strb	r2, [r3, #0]
}
    e7f0:	46c0      	nop			; (mov r8, r8)
    e7f2:	46bd      	mov	sp, r7
    e7f4:	b004      	add	sp, #16
    e7f6:	bd80      	pop	{r7, pc}

0000e7f8 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    e7f8:	b580      	push	{r7, lr}
    e7fa:	b084      	sub	sp, #16
    e7fc:	af00      	add	r7, sp, #0
    e7fe:	6078      	str	r0, [r7, #4]
    e800:	6039      	str	r1, [r7, #0]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e802:	687b      	ldr	r3, [r7, #4]
    e804:	685b      	ldr	r3, [r3, #4]
    e806:	60fb      	str	r3, [r7, #12]
    e808:	68fb      	ldr	r3, [r7, #12]
    e80a:	2b00      	cmp	r3, #0
    e80c:	d00e      	beq.n	e82c <_ZN13PluggableUSB_5setupER8USBSetup+0x34>
		if (node->setup(setup)) {
    e80e:	68fb      	ldr	r3, [r7, #12]
    e810:	681b      	ldr	r3, [r3, #0]
    e812:	681b      	ldr	r3, [r3, #0]
    e814:	6839      	ldr	r1, [r7, #0]
    e816:	68fa      	ldr	r2, [r7, #12]
    e818:	0010      	movs	r0, r2
    e81a:	4798      	blx	r3
    e81c:	1e03      	subs	r3, r0, #0
    e81e:	d001      	beq.n	e824 <_ZN13PluggableUSB_5setupER8USBSetup+0x2c>
			return true;
    e820:	2301      	movs	r3, #1
    e822:	e004      	b.n	e82e <_ZN13PluggableUSB_5setupER8USBSetup+0x36>
	for (node = rootNode; node; node = node->next) {
    e824:	68fb      	ldr	r3, [r7, #12]
    e826:	68db      	ldr	r3, [r3, #12]
    e828:	60fb      	str	r3, [r7, #12]
    e82a:	e7ed      	b.n	e808 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
		}
	}
	return false;
    e82c:	2300      	movs	r3, #0
}
    e82e:	0018      	movs	r0, r3
    e830:	46bd      	mov	sp, r7
    e832:	b004      	add	sp, #16
    e834:	bd80      	pop	{r7, pc}
	...

0000e838 <_Z12PluggableUSBv>:
	return true;
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
    e838:	b580      	push	{r7, lr}
    e83a:	af00      	add	r7, sp, #0
	static PluggableUSB_ obj;
    e83c:	4b07      	ldr	r3, [pc, #28]	; (e85c <_Z12PluggableUSBv+0x24>)
    e83e:	681b      	ldr	r3, [r3, #0]
    e840:	2201      	movs	r2, #1
    e842:	4013      	ands	r3, r2
    e844:	d106      	bne.n	e854 <_Z12PluggableUSBv+0x1c>
    e846:	4b06      	ldr	r3, [pc, #24]	; (e860 <_Z12PluggableUSBv+0x28>)
    e848:	0018      	movs	r0, r3
    e84a:	f000 f80b 	bl	e864 <_ZN13PluggableUSB_C1Ev>
    e84e:	4b03      	ldr	r3, [pc, #12]	; (e85c <_Z12PluggableUSBv+0x24>)
    e850:	2201      	movs	r2, #1
    e852:	601a      	str	r2, [r3, #0]
	return obj;
    e854:	4b02      	ldr	r3, [pc, #8]	; (e860 <_Z12PluggableUSBv+0x28>)
}
    e856:	0018      	movs	r0, r3
    e858:	46bd      	mov	sp, r7
    e85a:	bd80      	pop	{r7, pc}
    e85c:	20000f74 	.word	0x20000f74
    e860:	20000f6c 	.word	0x20000f6c

0000e864 <_ZN13PluggableUSB_C1Ev>:

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
    e864:	b580      	push	{r7, lr}
    e866:	b082      	sub	sp, #8
    e868:	af00      	add	r7, sp, #0
    e86a:	6078      	str	r0, [r7, #4]
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    e86c:	687b      	ldr	r3, [r7, #4]
    e86e:	2202      	movs	r2, #2
    e870:	701a      	strb	r2, [r3, #0]
    e872:	687b      	ldr	r3, [r7, #4]
    e874:	2204      	movs	r2, #4
    e876:	705a      	strb	r2, [r3, #1]
    e878:	687b      	ldr	r3, [r7, #4]
    e87a:	2200      	movs	r2, #0
    e87c:	605a      	str	r2, [r3, #4]
{
	// Empty
}
    e87e:	687b      	ldr	r3, [r7, #4]
    e880:	0018      	movs	r0, r3
    e882:	46bd      	mov	sp, r7
    e884:	b002      	add	sp, #8
    e886:	bd80      	pop	{r7, pc}

0000e888 <__aeabi_atexit>:
    e888:	000b      	movs	r3, r1
    e88a:	b510      	push	{r4, lr}
    e88c:	0001      	movs	r1, r0
    e88e:	0018      	movs	r0, r3
    e890:	f001 ff58 	bl	10744 <__cxa_atexit>
    e894:	bd10      	pop	{r4, pc}
	...

0000e898 <__udivsi3>:
    e898:	2200      	movs	r2, #0
    e89a:	0843      	lsrs	r3, r0, #1
    e89c:	428b      	cmp	r3, r1
    e89e:	d374      	bcc.n	e98a <__udivsi3+0xf2>
    e8a0:	0903      	lsrs	r3, r0, #4
    e8a2:	428b      	cmp	r3, r1
    e8a4:	d35f      	bcc.n	e966 <__udivsi3+0xce>
    e8a6:	0a03      	lsrs	r3, r0, #8
    e8a8:	428b      	cmp	r3, r1
    e8aa:	d344      	bcc.n	e936 <__udivsi3+0x9e>
    e8ac:	0b03      	lsrs	r3, r0, #12
    e8ae:	428b      	cmp	r3, r1
    e8b0:	d328      	bcc.n	e904 <__udivsi3+0x6c>
    e8b2:	0c03      	lsrs	r3, r0, #16
    e8b4:	428b      	cmp	r3, r1
    e8b6:	d30d      	bcc.n	e8d4 <__udivsi3+0x3c>
    e8b8:	22ff      	movs	r2, #255	; 0xff
    e8ba:	0209      	lsls	r1, r1, #8
    e8bc:	ba12      	rev	r2, r2
    e8be:	0c03      	lsrs	r3, r0, #16
    e8c0:	428b      	cmp	r3, r1
    e8c2:	d302      	bcc.n	e8ca <__udivsi3+0x32>
    e8c4:	1212      	asrs	r2, r2, #8
    e8c6:	0209      	lsls	r1, r1, #8
    e8c8:	d065      	beq.n	e996 <__udivsi3+0xfe>
    e8ca:	0b03      	lsrs	r3, r0, #12
    e8cc:	428b      	cmp	r3, r1
    e8ce:	d319      	bcc.n	e904 <__udivsi3+0x6c>
    e8d0:	e000      	b.n	e8d4 <__udivsi3+0x3c>
    e8d2:	0a09      	lsrs	r1, r1, #8
    e8d4:	0bc3      	lsrs	r3, r0, #15
    e8d6:	428b      	cmp	r3, r1
    e8d8:	d301      	bcc.n	e8de <__udivsi3+0x46>
    e8da:	03cb      	lsls	r3, r1, #15
    e8dc:	1ac0      	subs	r0, r0, r3
    e8de:	4152      	adcs	r2, r2
    e8e0:	0b83      	lsrs	r3, r0, #14
    e8e2:	428b      	cmp	r3, r1
    e8e4:	d301      	bcc.n	e8ea <__udivsi3+0x52>
    e8e6:	038b      	lsls	r3, r1, #14
    e8e8:	1ac0      	subs	r0, r0, r3
    e8ea:	4152      	adcs	r2, r2
    e8ec:	0b43      	lsrs	r3, r0, #13
    e8ee:	428b      	cmp	r3, r1
    e8f0:	d301      	bcc.n	e8f6 <__udivsi3+0x5e>
    e8f2:	034b      	lsls	r3, r1, #13
    e8f4:	1ac0      	subs	r0, r0, r3
    e8f6:	4152      	adcs	r2, r2
    e8f8:	0b03      	lsrs	r3, r0, #12
    e8fa:	428b      	cmp	r3, r1
    e8fc:	d301      	bcc.n	e902 <__udivsi3+0x6a>
    e8fe:	030b      	lsls	r3, r1, #12
    e900:	1ac0      	subs	r0, r0, r3
    e902:	4152      	adcs	r2, r2
    e904:	0ac3      	lsrs	r3, r0, #11
    e906:	428b      	cmp	r3, r1
    e908:	d301      	bcc.n	e90e <__udivsi3+0x76>
    e90a:	02cb      	lsls	r3, r1, #11
    e90c:	1ac0      	subs	r0, r0, r3
    e90e:	4152      	adcs	r2, r2
    e910:	0a83      	lsrs	r3, r0, #10
    e912:	428b      	cmp	r3, r1
    e914:	d301      	bcc.n	e91a <__udivsi3+0x82>
    e916:	028b      	lsls	r3, r1, #10
    e918:	1ac0      	subs	r0, r0, r3
    e91a:	4152      	adcs	r2, r2
    e91c:	0a43      	lsrs	r3, r0, #9
    e91e:	428b      	cmp	r3, r1
    e920:	d301      	bcc.n	e926 <__udivsi3+0x8e>
    e922:	024b      	lsls	r3, r1, #9
    e924:	1ac0      	subs	r0, r0, r3
    e926:	4152      	adcs	r2, r2
    e928:	0a03      	lsrs	r3, r0, #8
    e92a:	428b      	cmp	r3, r1
    e92c:	d301      	bcc.n	e932 <__udivsi3+0x9a>
    e92e:	020b      	lsls	r3, r1, #8
    e930:	1ac0      	subs	r0, r0, r3
    e932:	4152      	adcs	r2, r2
    e934:	d2cd      	bcs.n	e8d2 <__udivsi3+0x3a>
    e936:	09c3      	lsrs	r3, r0, #7
    e938:	428b      	cmp	r3, r1
    e93a:	d301      	bcc.n	e940 <__udivsi3+0xa8>
    e93c:	01cb      	lsls	r3, r1, #7
    e93e:	1ac0      	subs	r0, r0, r3
    e940:	4152      	adcs	r2, r2
    e942:	0983      	lsrs	r3, r0, #6
    e944:	428b      	cmp	r3, r1
    e946:	d301      	bcc.n	e94c <__udivsi3+0xb4>
    e948:	018b      	lsls	r3, r1, #6
    e94a:	1ac0      	subs	r0, r0, r3
    e94c:	4152      	adcs	r2, r2
    e94e:	0943      	lsrs	r3, r0, #5
    e950:	428b      	cmp	r3, r1
    e952:	d301      	bcc.n	e958 <__udivsi3+0xc0>
    e954:	014b      	lsls	r3, r1, #5
    e956:	1ac0      	subs	r0, r0, r3
    e958:	4152      	adcs	r2, r2
    e95a:	0903      	lsrs	r3, r0, #4
    e95c:	428b      	cmp	r3, r1
    e95e:	d301      	bcc.n	e964 <__udivsi3+0xcc>
    e960:	010b      	lsls	r3, r1, #4
    e962:	1ac0      	subs	r0, r0, r3
    e964:	4152      	adcs	r2, r2
    e966:	08c3      	lsrs	r3, r0, #3
    e968:	428b      	cmp	r3, r1
    e96a:	d301      	bcc.n	e970 <__udivsi3+0xd8>
    e96c:	00cb      	lsls	r3, r1, #3
    e96e:	1ac0      	subs	r0, r0, r3
    e970:	4152      	adcs	r2, r2
    e972:	0883      	lsrs	r3, r0, #2
    e974:	428b      	cmp	r3, r1
    e976:	d301      	bcc.n	e97c <__udivsi3+0xe4>
    e978:	008b      	lsls	r3, r1, #2
    e97a:	1ac0      	subs	r0, r0, r3
    e97c:	4152      	adcs	r2, r2
    e97e:	0843      	lsrs	r3, r0, #1
    e980:	428b      	cmp	r3, r1
    e982:	d301      	bcc.n	e988 <__udivsi3+0xf0>
    e984:	004b      	lsls	r3, r1, #1
    e986:	1ac0      	subs	r0, r0, r3
    e988:	4152      	adcs	r2, r2
    e98a:	1a41      	subs	r1, r0, r1
    e98c:	d200      	bcs.n	e990 <__udivsi3+0xf8>
    e98e:	4601      	mov	r1, r0
    e990:	4152      	adcs	r2, r2
    e992:	4610      	mov	r0, r2
    e994:	4770      	bx	lr
    e996:	e7ff      	b.n	e998 <__udivsi3+0x100>
    e998:	b501      	push	{r0, lr}
    e99a:	2000      	movs	r0, #0
    e99c:	f000 f8f0 	bl	eb80 <__aeabi_idiv0>
    e9a0:	bd02      	pop	{r1, pc}
    e9a2:	46c0      	nop			; (mov r8, r8)

0000e9a4 <__aeabi_uidivmod>:
    e9a4:	2900      	cmp	r1, #0
    e9a6:	d0f7      	beq.n	e998 <__udivsi3+0x100>
    e9a8:	e776      	b.n	e898 <__udivsi3>
    e9aa:	4770      	bx	lr

0000e9ac <__divsi3>:
    e9ac:	4603      	mov	r3, r0
    e9ae:	430b      	orrs	r3, r1
    e9b0:	d47f      	bmi.n	eab2 <__divsi3+0x106>
    e9b2:	2200      	movs	r2, #0
    e9b4:	0843      	lsrs	r3, r0, #1
    e9b6:	428b      	cmp	r3, r1
    e9b8:	d374      	bcc.n	eaa4 <__divsi3+0xf8>
    e9ba:	0903      	lsrs	r3, r0, #4
    e9bc:	428b      	cmp	r3, r1
    e9be:	d35f      	bcc.n	ea80 <__divsi3+0xd4>
    e9c0:	0a03      	lsrs	r3, r0, #8
    e9c2:	428b      	cmp	r3, r1
    e9c4:	d344      	bcc.n	ea50 <__divsi3+0xa4>
    e9c6:	0b03      	lsrs	r3, r0, #12
    e9c8:	428b      	cmp	r3, r1
    e9ca:	d328      	bcc.n	ea1e <__divsi3+0x72>
    e9cc:	0c03      	lsrs	r3, r0, #16
    e9ce:	428b      	cmp	r3, r1
    e9d0:	d30d      	bcc.n	e9ee <__divsi3+0x42>
    e9d2:	22ff      	movs	r2, #255	; 0xff
    e9d4:	0209      	lsls	r1, r1, #8
    e9d6:	ba12      	rev	r2, r2
    e9d8:	0c03      	lsrs	r3, r0, #16
    e9da:	428b      	cmp	r3, r1
    e9dc:	d302      	bcc.n	e9e4 <__divsi3+0x38>
    e9de:	1212      	asrs	r2, r2, #8
    e9e0:	0209      	lsls	r1, r1, #8
    e9e2:	d065      	beq.n	eab0 <__divsi3+0x104>
    e9e4:	0b03      	lsrs	r3, r0, #12
    e9e6:	428b      	cmp	r3, r1
    e9e8:	d319      	bcc.n	ea1e <__divsi3+0x72>
    e9ea:	e000      	b.n	e9ee <__divsi3+0x42>
    e9ec:	0a09      	lsrs	r1, r1, #8
    e9ee:	0bc3      	lsrs	r3, r0, #15
    e9f0:	428b      	cmp	r3, r1
    e9f2:	d301      	bcc.n	e9f8 <__divsi3+0x4c>
    e9f4:	03cb      	lsls	r3, r1, #15
    e9f6:	1ac0      	subs	r0, r0, r3
    e9f8:	4152      	adcs	r2, r2
    e9fa:	0b83      	lsrs	r3, r0, #14
    e9fc:	428b      	cmp	r3, r1
    e9fe:	d301      	bcc.n	ea04 <__divsi3+0x58>
    ea00:	038b      	lsls	r3, r1, #14
    ea02:	1ac0      	subs	r0, r0, r3
    ea04:	4152      	adcs	r2, r2
    ea06:	0b43      	lsrs	r3, r0, #13
    ea08:	428b      	cmp	r3, r1
    ea0a:	d301      	bcc.n	ea10 <__divsi3+0x64>
    ea0c:	034b      	lsls	r3, r1, #13
    ea0e:	1ac0      	subs	r0, r0, r3
    ea10:	4152      	adcs	r2, r2
    ea12:	0b03      	lsrs	r3, r0, #12
    ea14:	428b      	cmp	r3, r1
    ea16:	d301      	bcc.n	ea1c <__divsi3+0x70>
    ea18:	030b      	lsls	r3, r1, #12
    ea1a:	1ac0      	subs	r0, r0, r3
    ea1c:	4152      	adcs	r2, r2
    ea1e:	0ac3      	lsrs	r3, r0, #11
    ea20:	428b      	cmp	r3, r1
    ea22:	d301      	bcc.n	ea28 <__divsi3+0x7c>
    ea24:	02cb      	lsls	r3, r1, #11
    ea26:	1ac0      	subs	r0, r0, r3
    ea28:	4152      	adcs	r2, r2
    ea2a:	0a83      	lsrs	r3, r0, #10
    ea2c:	428b      	cmp	r3, r1
    ea2e:	d301      	bcc.n	ea34 <__divsi3+0x88>
    ea30:	028b      	lsls	r3, r1, #10
    ea32:	1ac0      	subs	r0, r0, r3
    ea34:	4152      	adcs	r2, r2
    ea36:	0a43      	lsrs	r3, r0, #9
    ea38:	428b      	cmp	r3, r1
    ea3a:	d301      	bcc.n	ea40 <__divsi3+0x94>
    ea3c:	024b      	lsls	r3, r1, #9
    ea3e:	1ac0      	subs	r0, r0, r3
    ea40:	4152      	adcs	r2, r2
    ea42:	0a03      	lsrs	r3, r0, #8
    ea44:	428b      	cmp	r3, r1
    ea46:	d301      	bcc.n	ea4c <__divsi3+0xa0>
    ea48:	020b      	lsls	r3, r1, #8
    ea4a:	1ac0      	subs	r0, r0, r3
    ea4c:	4152      	adcs	r2, r2
    ea4e:	d2cd      	bcs.n	e9ec <__divsi3+0x40>
    ea50:	09c3      	lsrs	r3, r0, #7
    ea52:	428b      	cmp	r3, r1
    ea54:	d301      	bcc.n	ea5a <__divsi3+0xae>
    ea56:	01cb      	lsls	r3, r1, #7
    ea58:	1ac0      	subs	r0, r0, r3
    ea5a:	4152      	adcs	r2, r2
    ea5c:	0983      	lsrs	r3, r0, #6
    ea5e:	428b      	cmp	r3, r1
    ea60:	d301      	bcc.n	ea66 <__divsi3+0xba>
    ea62:	018b      	lsls	r3, r1, #6
    ea64:	1ac0      	subs	r0, r0, r3
    ea66:	4152      	adcs	r2, r2
    ea68:	0943      	lsrs	r3, r0, #5
    ea6a:	428b      	cmp	r3, r1
    ea6c:	d301      	bcc.n	ea72 <__divsi3+0xc6>
    ea6e:	014b      	lsls	r3, r1, #5
    ea70:	1ac0      	subs	r0, r0, r3
    ea72:	4152      	adcs	r2, r2
    ea74:	0903      	lsrs	r3, r0, #4
    ea76:	428b      	cmp	r3, r1
    ea78:	d301      	bcc.n	ea7e <__divsi3+0xd2>
    ea7a:	010b      	lsls	r3, r1, #4
    ea7c:	1ac0      	subs	r0, r0, r3
    ea7e:	4152      	adcs	r2, r2
    ea80:	08c3      	lsrs	r3, r0, #3
    ea82:	428b      	cmp	r3, r1
    ea84:	d301      	bcc.n	ea8a <__divsi3+0xde>
    ea86:	00cb      	lsls	r3, r1, #3
    ea88:	1ac0      	subs	r0, r0, r3
    ea8a:	4152      	adcs	r2, r2
    ea8c:	0883      	lsrs	r3, r0, #2
    ea8e:	428b      	cmp	r3, r1
    ea90:	d301      	bcc.n	ea96 <__divsi3+0xea>
    ea92:	008b      	lsls	r3, r1, #2
    ea94:	1ac0      	subs	r0, r0, r3
    ea96:	4152      	adcs	r2, r2
    ea98:	0843      	lsrs	r3, r0, #1
    ea9a:	428b      	cmp	r3, r1
    ea9c:	d301      	bcc.n	eaa2 <__divsi3+0xf6>
    ea9e:	004b      	lsls	r3, r1, #1
    eaa0:	1ac0      	subs	r0, r0, r3
    eaa2:	4152      	adcs	r2, r2
    eaa4:	1a41      	subs	r1, r0, r1
    eaa6:	d200      	bcs.n	eaaa <__divsi3+0xfe>
    eaa8:	4601      	mov	r1, r0
    eaaa:	4152      	adcs	r2, r2
    eaac:	4610      	mov	r0, r2
    eaae:	4770      	bx	lr
    eab0:	e05d      	b.n	eb6e <__divsi3+0x1c2>
    eab2:	0fca      	lsrs	r2, r1, #31
    eab4:	d000      	beq.n	eab8 <__divsi3+0x10c>
    eab6:	4249      	negs	r1, r1
    eab8:	1003      	asrs	r3, r0, #32
    eaba:	d300      	bcc.n	eabe <__divsi3+0x112>
    eabc:	4240      	negs	r0, r0
    eabe:	4053      	eors	r3, r2
    eac0:	2200      	movs	r2, #0
    eac2:	469c      	mov	ip, r3
    eac4:	0903      	lsrs	r3, r0, #4
    eac6:	428b      	cmp	r3, r1
    eac8:	d32d      	bcc.n	eb26 <__divsi3+0x17a>
    eaca:	0a03      	lsrs	r3, r0, #8
    eacc:	428b      	cmp	r3, r1
    eace:	d312      	bcc.n	eaf6 <__divsi3+0x14a>
    ead0:	22fc      	movs	r2, #252	; 0xfc
    ead2:	0189      	lsls	r1, r1, #6
    ead4:	ba12      	rev	r2, r2
    ead6:	0a03      	lsrs	r3, r0, #8
    ead8:	428b      	cmp	r3, r1
    eada:	d30c      	bcc.n	eaf6 <__divsi3+0x14a>
    eadc:	0189      	lsls	r1, r1, #6
    eade:	1192      	asrs	r2, r2, #6
    eae0:	428b      	cmp	r3, r1
    eae2:	d308      	bcc.n	eaf6 <__divsi3+0x14a>
    eae4:	0189      	lsls	r1, r1, #6
    eae6:	1192      	asrs	r2, r2, #6
    eae8:	428b      	cmp	r3, r1
    eaea:	d304      	bcc.n	eaf6 <__divsi3+0x14a>
    eaec:	0189      	lsls	r1, r1, #6
    eaee:	d03a      	beq.n	eb66 <__divsi3+0x1ba>
    eaf0:	1192      	asrs	r2, r2, #6
    eaf2:	e000      	b.n	eaf6 <__divsi3+0x14a>
    eaf4:	0989      	lsrs	r1, r1, #6
    eaf6:	09c3      	lsrs	r3, r0, #7
    eaf8:	428b      	cmp	r3, r1
    eafa:	d301      	bcc.n	eb00 <__divsi3+0x154>
    eafc:	01cb      	lsls	r3, r1, #7
    eafe:	1ac0      	subs	r0, r0, r3
    eb00:	4152      	adcs	r2, r2
    eb02:	0983      	lsrs	r3, r0, #6
    eb04:	428b      	cmp	r3, r1
    eb06:	d301      	bcc.n	eb0c <__divsi3+0x160>
    eb08:	018b      	lsls	r3, r1, #6
    eb0a:	1ac0      	subs	r0, r0, r3
    eb0c:	4152      	adcs	r2, r2
    eb0e:	0943      	lsrs	r3, r0, #5
    eb10:	428b      	cmp	r3, r1
    eb12:	d301      	bcc.n	eb18 <__divsi3+0x16c>
    eb14:	014b      	lsls	r3, r1, #5
    eb16:	1ac0      	subs	r0, r0, r3
    eb18:	4152      	adcs	r2, r2
    eb1a:	0903      	lsrs	r3, r0, #4
    eb1c:	428b      	cmp	r3, r1
    eb1e:	d301      	bcc.n	eb24 <__divsi3+0x178>
    eb20:	010b      	lsls	r3, r1, #4
    eb22:	1ac0      	subs	r0, r0, r3
    eb24:	4152      	adcs	r2, r2
    eb26:	08c3      	lsrs	r3, r0, #3
    eb28:	428b      	cmp	r3, r1
    eb2a:	d301      	bcc.n	eb30 <__divsi3+0x184>
    eb2c:	00cb      	lsls	r3, r1, #3
    eb2e:	1ac0      	subs	r0, r0, r3
    eb30:	4152      	adcs	r2, r2
    eb32:	0883      	lsrs	r3, r0, #2
    eb34:	428b      	cmp	r3, r1
    eb36:	d301      	bcc.n	eb3c <__divsi3+0x190>
    eb38:	008b      	lsls	r3, r1, #2
    eb3a:	1ac0      	subs	r0, r0, r3
    eb3c:	4152      	adcs	r2, r2
    eb3e:	d2d9      	bcs.n	eaf4 <__divsi3+0x148>
    eb40:	0843      	lsrs	r3, r0, #1
    eb42:	428b      	cmp	r3, r1
    eb44:	d301      	bcc.n	eb4a <__divsi3+0x19e>
    eb46:	004b      	lsls	r3, r1, #1
    eb48:	1ac0      	subs	r0, r0, r3
    eb4a:	4152      	adcs	r2, r2
    eb4c:	1a41      	subs	r1, r0, r1
    eb4e:	d200      	bcs.n	eb52 <__divsi3+0x1a6>
    eb50:	4601      	mov	r1, r0
    eb52:	4663      	mov	r3, ip
    eb54:	4152      	adcs	r2, r2
    eb56:	105b      	asrs	r3, r3, #1
    eb58:	4610      	mov	r0, r2
    eb5a:	d301      	bcc.n	eb60 <__divsi3+0x1b4>
    eb5c:	4240      	negs	r0, r0
    eb5e:	2b00      	cmp	r3, #0
    eb60:	d500      	bpl.n	eb64 <__divsi3+0x1b8>
    eb62:	4249      	negs	r1, r1
    eb64:	4770      	bx	lr
    eb66:	4663      	mov	r3, ip
    eb68:	105b      	asrs	r3, r3, #1
    eb6a:	d300      	bcc.n	eb6e <__divsi3+0x1c2>
    eb6c:	4240      	negs	r0, r0
    eb6e:	b501      	push	{r0, lr}
    eb70:	2000      	movs	r0, #0
    eb72:	f000 f805 	bl	eb80 <__aeabi_idiv0>
    eb76:	bd02      	pop	{r1, pc}

0000eb78 <__aeabi_idivmod>:
    eb78:	2900      	cmp	r1, #0
    eb7a:	d0f8      	beq.n	eb6e <__divsi3+0x1c2>
    eb7c:	e716      	b.n	e9ac <__divsi3>
    eb7e:	4770      	bx	lr

0000eb80 <__aeabi_idiv0>:
    eb80:	4770      	bx	lr
    eb82:	46c0      	nop			; (mov r8, r8)

0000eb84 <__aeabi_cdrcmple>:
    eb84:	4684      	mov	ip, r0
    eb86:	1c10      	adds	r0, r2, #0
    eb88:	4662      	mov	r2, ip
    eb8a:	468c      	mov	ip, r1
    eb8c:	1c19      	adds	r1, r3, #0
    eb8e:	4663      	mov	r3, ip
    eb90:	e000      	b.n	eb94 <__aeabi_cdcmpeq>
    eb92:	46c0      	nop			; (mov r8, r8)

0000eb94 <__aeabi_cdcmpeq>:
    eb94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    eb96:	f000 ff15 	bl	f9c4 <__ledf2>
    eb9a:	2800      	cmp	r0, #0
    eb9c:	d401      	bmi.n	eba2 <__aeabi_cdcmpeq+0xe>
    eb9e:	2100      	movs	r1, #0
    eba0:	42c8      	cmn	r0, r1
    eba2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000eba4 <__aeabi_dcmpeq>:
    eba4:	b510      	push	{r4, lr}
    eba6:	f000 fe6f 	bl	f888 <__eqdf2>
    ebaa:	4240      	negs	r0, r0
    ebac:	3001      	adds	r0, #1
    ebae:	bd10      	pop	{r4, pc}

0000ebb0 <__aeabi_dcmplt>:
    ebb0:	b510      	push	{r4, lr}
    ebb2:	f000 ff07 	bl	f9c4 <__ledf2>
    ebb6:	2800      	cmp	r0, #0
    ebb8:	db01      	blt.n	ebbe <__aeabi_dcmplt+0xe>
    ebba:	2000      	movs	r0, #0
    ebbc:	bd10      	pop	{r4, pc}
    ebbe:	2001      	movs	r0, #1
    ebc0:	bd10      	pop	{r4, pc}
    ebc2:	46c0      	nop			; (mov r8, r8)

0000ebc4 <__aeabi_dcmple>:
    ebc4:	b510      	push	{r4, lr}
    ebc6:	f000 fefd 	bl	f9c4 <__ledf2>
    ebca:	2800      	cmp	r0, #0
    ebcc:	dd01      	ble.n	ebd2 <__aeabi_dcmple+0xe>
    ebce:	2000      	movs	r0, #0
    ebd0:	bd10      	pop	{r4, pc}
    ebd2:	2001      	movs	r0, #1
    ebd4:	bd10      	pop	{r4, pc}
    ebd6:	46c0      	nop			; (mov r8, r8)

0000ebd8 <__aeabi_dcmpgt>:
    ebd8:	b510      	push	{r4, lr}
    ebda:	f000 fe8f 	bl	f8fc <__gedf2>
    ebde:	2800      	cmp	r0, #0
    ebe0:	dc01      	bgt.n	ebe6 <__aeabi_dcmpgt+0xe>
    ebe2:	2000      	movs	r0, #0
    ebe4:	bd10      	pop	{r4, pc}
    ebe6:	2001      	movs	r0, #1
    ebe8:	bd10      	pop	{r4, pc}
    ebea:	46c0      	nop			; (mov r8, r8)

0000ebec <__aeabi_dcmpge>:
    ebec:	b510      	push	{r4, lr}
    ebee:	f000 fe85 	bl	f8fc <__gedf2>
    ebf2:	2800      	cmp	r0, #0
    ebf4:	da01      	bge.n	ebfa <__aeabi_dcmpge+0xe>
    ebf6:	2000      	movs	r0, #0
    ebf8:	bd10      	pop	{r4, pc}
    ebfa:	2001      	movs	r0, #1
    ebfc:	bd10      	pop	{r4, pc}
    ebfe:	46c0      	nop			; (mov r8, r8)

0000ec00 <__aeabi_dadd>:
    ec00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec02:	4645      	mov	r5, r8
    ec04:	46de      	mov	lr, fp
    ec06:	4657      	mov	r7, sl
    ec08:	464e      	mov	r6, r9
    ec0a:	030c      	lsls	r4, r1, #12
    ec0c:	b5e0      	push	{r5, r6, r7, lr}
    ec0e:	004e      	lsls	r6, r1, #1
    ec10:	0fc9      	lsrs	r1, r1, #31
    ec12:	4688      	mov	r8, r1
    ec14:	000d      	movs	r5, r1
    ec16:	0a61      	lsrs	r1, r4, #9
    ec18:	0f44      	lsrs	r4, r0, #29
    ec1a:	430c      	orrs	r4, r1
    ec1c:	00c7      	lsls	r7, r0, #3
    ec1e:	0319      	lsls	r1, r3, #12
    ec20:	0058      	lsls	r0, r3, #1
    ec22:	0fdb      	lsrs	r3, r3, #31
    ec24:	469b      	mov	fp, r3
    ec26:	0a4b      	lsrs	r3, r1, #9
    ec28:	0f51      	lsrs	r1, r2, #29
    ec2a:	430b      	orrs	r3, r1
    ec2c:	0d76      	lsrs	r6, r6, #21
    ec2e:	0d40      	lsrs	r0, r0, #21
    ec30:	0019      	movs	r1, r3
    ec32:	00d2      	lsls	r2, r2, #3
    ec34:	45d8      	cmp	r8, fp
    ec36:	d100      	bne.n	ec3a <__aeabi_dadd+0x3a>
    ec38:	e0ae      	b.n	ed98 <__aeabi_dadd+0x198>
    ec3a:	1a35      	subs	r5, r6, r0
    ec3c:	2d00      	cmp	r5, #0
    ec3e:	dc00      	bgt.n	ec42 <__aeabi_dadd+0x42>
    ec40:	e0f6      	b.n	ee30 <__aeabi_dadd+0x230>
    ec42:	2800      	cmp	r0, #0
    ec44:	d10f      	bne.n	ec66 <__aeabi_dadd+0x66>
    ec46:	4313      	orrs	r3, r2
    ec48:	d100      	bne.n	ec4c <__aeabi_dadd+0x4c>
    ec4a:	e0db      	b.n	ee04 <__aeabi_dadd+0x204>
    ec4c:	1e6b      	subs	r3, r5, #1
    ec4e:	2b00      	cmp	r3, #0
    ec50:	d000      	beq.n	ec54 <__aeabi_dadd+0x54>
    ec52:	e137      	b.n	eec4 <__aeabi_dadd+0x2c4>
    ec54:	1aba      	subs	r2, r7, r2
    ec56:	4297      	cmp	r7, r2
    ec58:	41bf      	sbcs	r7, r7
    ec5a:	1a64      	subs	r4, r4, r1
    ec5c:	427f      	negs	r7, r7
    ec5e:	1be4      	subs	r4, r4, r7
    ec60:	2601      	movs	r6, #1
    ec62:	0017      	movs	r7, r2
    ec64:	e024      	b.n	ecb0 <__aeabi_dadd+0xb0>
    ec66:	4bc6      	ldr	r3, [pc, #792]	; (ef80 <__aeabi_dadd+0x380>)
    ec68:	429e      	cmp	r6, r3
    ec6a:	d04d      	beq.n	ed08 <__aeabi_dadd+0x108>
    ec6c:	2380      	movs	r3, #128	; 0x80
    ec6e:	041b      	lsls	r3, r3, #16
    ec70:	4319      	orrs	r1, r3
    ec72:	2d38      	cmp	r5, #56	; 0x38
    ec74:	dd00      	ble.n	ec78 <__aeabi_dadd+0x78>
    ec76:	e107      	b.n	ee88 <__aeabi_dadd+0x288>
    ec78:	2d1f      	cmp	r5, #31
    ec7a:	dd00      	ble.n	ec7e <__aeabi_dadd+0x7e>
    ec7c:	e138      	b.n	eef0 <__aeabi_dadd+0x2f0>
    ec7e:	2020      	movs	r0, #32
    ec80:	1b43      	subs	r3, r0, r5
    ec82:	469a      	mov	sl, r3
    ec84:	000b      	movs	r3, r1
    ec86:	4650      	mov	r0, sl
    ec88:	4083      	lsls	r3, r0
    ec8a:	4699      	mov	r9, r3
    ec8c:	0013      	movs	r3, r2
    ec8e:	4648      	mov	r0, r9
    ec90:	40eb      	lsrs	r3, r5
    ec92:	4318      	orrs	r0, r3
    ec94:	0003      	movs	r3, r0
    ec96:	4650      	mov	r0, sl
    ec98:	4082      	lsls	r2, r0
    ec9a:	1e50      	subs	r0, r2, #1
    ec9c:	4182      	sbcs	r2, r0
    ec9e:	40e9      	lsrs	r1, r5
    eca0:	431a      	orrs	r2, r3
    eca2:	1aba      	subs	r2, r7, r2
    eca4:	1a61      	subs	r1, r4, r1
    eca6:	4297      	cmp	r7, r2
    eca8:	41a4      	sbcs	r4, r4
    ecaa:	0017      	movs	r7, r2
    ecac:	4264      	negs	r4, r4
    ecae:	1b0c      	subs	r4, r1, r4
    ecb0:	0223      	lsls	r3, r4, #8
    ecb2:	d562      	bpl.n	ed7a <__aeabi_dadd+0x17a>
    ecb4:	0264      	lsls	r4, r4, #9
    ecb6:	0a65      	lsrs	r5, r4, #9
    ecb8:	2d00      	cmp	r5, #0
    ecba:	d100      	bne.n	ecbe <__aeabi_dadd+0xbe>
    ecbc:	e0df      	b.n	ee7e <__aeabi_dadd+0x27e>
    ecbe:	0028      	movs	r0, r5
    ecc0:	f001 fd04 	bl	106cc <__clzsi2>
    ecc4:	0003      	movs	r3, r0
    ecc6:	3b08      	subs	r3, #8
    ecc8:	2b1f      	cmp	r3, #31
    ecca:	dd00      	ble.n	ecce <__aeabi_dadd+0xce>
    eccc:	e0d2      	b.n	ee74 <__aeabi_dadd+0x274>
    ecce:	2220      	movs	r2, #32
    ecd0:	003c      	movs	r4, r7
    ecd2:	1ad2      	subs	r2, r2, r3
    ecd4:	409d      	lsls	r5, r3
    ecd6:	40d4      	lsrs	r4, r2
    ecd8:	409f      	lsls	r7, r3
    ecda:	4325      	orrs	r5, r4
    ecdc:	429e      	cmp	r6, r3
    ecde:	dd00      	ble.n	ece2 <__aeabi_dadd+0xe2>
    ece0:	e0c4      	b.n	ee6c <__aeabi_dadd+0x26c>
    ece2:	1b9e      	subs	r6, r3, r6
    ece4:	1c73      	adds	r3, r6, #1
    ece6:	2b1f      	cmp	r3, #31
    ece8:	dd00      	ble.n	ecec <__aeabi_dadd+0xec>
    ecea:	e0f1      	b.n	eed0 <__aeabi_dadd+0x2d0>
    ecec:	2220      	movs	r2, #32
    ecee:	0038      	movs	r0, r7
    ecf0:	0029      	movs	r1, r5
    ecf2:	1ad2      	subs	r2, r2, r3
    ecf4:	40d8      	lsrs	r0, r3
    ecf6:	4091      	lsls	r1, r2
    ecf8:	4097      	lsls	r7, r2
    ecfa:	002c      	movs	r4, r5
    ecfc:	4301      	orrs	r1, r0
    ecfe:	1e78      	subs	r0, r7, #1
    ed00:	4187      	sbcs	r7, r0
    ed02:	40dc      	lsrs	r4, r3
    ed04:	2600      	movs	r6, #0
    ed06:	430f      	orrs	r7, r1
    ed08:	077b      	lsls	r3, r7, #29
    ed0a:	d009      	beq.n	ed20 <__aeabi_dadd+0x120>
    ed0c:	230f      	movs	r3, #15
    ed0e:	403b      	ands	r3, r7
    ed10:	2b04      	cmp	r3, #4
    ed12:	d005      	beq.n	ed20 <__aeabi_dadd+0x120>
    ed14:	1d3b      	adds	r3, r7, #4
    ed16:	42bb      	cmp	r3, r7
    ed18:	41bf      	sbcs	r7, r7
    ed1a:	427f      	negs	r7, r7
    ed1c:	19e4      	adds	r4, r4, r7
    ed1e:	001f      	movs	r7, r3
    ed20:	0223      	lsls	r3, r4, #8
    ed22:	d52c      	bpl.n	ed7e <__aeabi_dadd+0x17e>
    ed24:	4b96      	ldr	r3, [pc, #600]	; (ef80 <__aeabi_dadd+0x380>)
    ed26:	3601      	adds	r6, #1
    ed28:	429e      	cmp	r6, r3
    ed2a:	d100      	bne.n	ed2e <__aeabi_dadd+0x12e>
    ed2c:	e09a      	b.n	ee64 <__aeabi_dadd+0x264>
    ed2e:	4645      	mov	r5, r8
    ed30:	4b94      	ldr	r3, [pc, #592]	; (ef84 <__aeabi_dadd+0x384>)
    ed32:	08ff      	lsrs	r7, r7, #3
    ed34:	401c      	ands	r4, r3
    ed36:	0760      	lsls	r0, r4, #29
    ed38:	0576      	lsls	r6, r6, #21
    ed3a:	0264      	lsls	r4, r4, #9
    ed3c:	4307      	orrs	r7, r0
    ed3e:	0b24      	lsrs	r4, r4, #12
    ed40:	0d76      	lsrs	r6, r6, #21
    ed42:	2100      	movs	r1, #0
    ed44:	0324      	lsls	r4, r4, #12
    ed46:	0b23      	lsrs	r3, r4, #12
    ed48:	0d0c      	lsrs	r4, r1, #20
    ed4a:	4a8f      	ldr	r2, [pc, #572]	; (ef88 <__aeabi_dadd+0x388>)
    ed4c:	0524      	lsls	r4, r4, #20
    ed4e:	431c      	orrs	r4, r3
    ed50:	4014      	ands	r4, r2
    ed52:	0533      	lsls	r3, r6, #20
    ed54:	4323      	orrs	r3, r4
    ed56:	005b      	lsls	r3, r3, #1
    ed58:	07ed      	lsls	r5, r5, #31
    ed5a:	085b      	lsrs	r3, r3, #1
    ed5c:	432b      	orrs	r3, r5
    ed5e:	0038      	movs	r0, r7
    ed60:	0019      	movs	r1, r3
    ed62:	bc3c      	pop	{r2, r3, r4, r5}
    ed64:	4690      	mov	r8, r2
    ed66:	4699      	mov	r9, r3
    ed68:	46a2      	mov	sl, r4
    ed6a:	46ab      	mov	fp, r5
    ed6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed6e:	4664      	mov	r4, ip
    ed70:	4304      	orrs	r4, r0
    ed72:	d100      	bne.n	ed76 <__aeabi_dadd+0x176>
    ed74:	e211      	b.n	f19a <__aeabi_dadd+0x59a>
    ed76:	0004      	movs	r4, r0
    ed78:	4667      	mov	r7, ip
    ed7a:	077b      	lsls	r3, r7, #29
    ed7c:	d1c6      	bne.n	ed0c <__aeabi_dadd+0x10c>
    ed7e:	4645      	mov	r5, r8
    ed80:	0760      	lsls	r0, r4, #29
    ed82:	08ff      	lsrs	r7, r7, #3
    ed84:	4307      	orrs	r7, r0
    ed86:	08e4      	lsrs	r4, r4, #3
    ed88:	4b7d      	ldr	r3, [pc, #500]	; (ef80 <__aeabi_dadd+0x380>)
    ed8a:	429e      	cmp	r6, r3
    ed8c:	d030      	beq.n	edf0 <__aeabi_dadd+0x1f0>
    ed8e:	0324      	lsls	r4, r4, #12
    ed90:	0576      	lsls	r6, r6, #21
    ed92:	0b24      	lsrs	r4, r4, #12
    ed94:	0d76      	lsrs	r6, r6, #21
    ed96:	e7d4      	b.n	ed42 <__aeabi_dadd+0x142>
    ed98:	1a33      	subs	r3, r6, r0
    ed9a:	469a      	mov	sl, r3
    ed9c:	2b00      	cmp	r3, #0
    ed9e:	dd78      	ble.n	ee92 <__aeabi_dadd+0x292>
    eda0:	2800      	cmp	r0, #0
    eda2:	d031      	beq.n	ee08 <__aeabi_dadd+0x208>
    eda4:	4876      	ldr	r0, [pc, #472]	; (ef80 <__aeabi_dadd+0x380>)
    eda6:	4286      	cmp	r6, r0
    eda8:	d0ae      	beq.n	ed08 <__aeabi_dadd+0x108>
    edaa:	2080      	movs	r0, #128	; 0x80
    edac:	0400      	lsls	r0, r0, #16
    edae:	4301      	orrs	r1, r0
    edb0:	4653      	mov	r3, sl
    edb2:	2b38      	cmp	r3, #56	; 0x38
    edb4:	dc00      	bgt.n	edb8 <__aeabi_dadd+0x1b8>
    edb6:	e0e9      	b.n	ef8c <__aeabi_dadd+0x38c>
    edb8:	430a      	orrs	r2, r1
    edba:	1e51      	subs	r1, r2, #1
    edbc:	418a      	sbcs	r2, r1
    edbe:	2100      	movs	r1, #0
    edc0:	19d2      	adds	r2, r2, r7
    edc2:	42ba      	cmp	r2, r7
    edc4:	41bf      	sbcs	r7, r7
    edc6:	1909      	adds	r1, r1, r4
    edc8:	427c      	negs	r4, r7
    edca:	0017      	movs	r7, r2
    edcc:	190c      	adds	r4, r1, r4
    edce:	0223      	lsls	r3, r4, #8
    edd0:	d5d3      	bpl.n	ed7a <__aeabi_dadd+0x17a>
    edd2:	4b6b      	ldr	r3, [pc, #428]	; (ef80 <__aeabi_dadd+0x380>)
    edd4:	3601      	adds	r6, #1
    edd6:	429e      	cmp	r6, r3
    edd8:	d100      	bne.n	eddc <__aeabi_dadd+0x1dc>
    edda:	e13a      	b.n	f052 <__aeabi_dadd+0x452>
    eddc:	2001      	movs	r0, #1
    edde:	4b69      	ldr	r3, [pc, #420]	; (ef84 <__aeabi_dadd+0x384>)
    ede0:	401c      	ands	r4, r3
    ede2:	087b      	lsrs	r3, r7, #1
    ede4:	4007      	ands	r7, r0
    ede6:	431f      	orrs	r7, r3
    ede8:	07e0      	lsls	r0, r4, #31
    edea:	4307      	orrs	r7, r0
    edec:	0864      	lsrs	r4, r4, #1
    edee:	e78b      	b.n	ed08 <__aeabi_dadd+0x108>
    edf0:	0023      	movs	r3, r4
    edf2:	433b      	orrs	r3, r7
    edf4:	d100      	bne.n	edf8 <__aeabi_dadd+0x1f8>
    edf6:	e1cb      	b.n	f190 <__aeabi_dadd+0x590>
    edf8:	2280      	movs	r2, #128	; 0x80
    edfa:	0312      	lsls	r2, r2, #12
    edfc:	4314      	orrs	r4, r2
    edfe:	0324      	lsls	r4, r4, #12
    ee00:	0b24      	lsrs	r4, r4, #12
    ee02:	e79e      	b.n	ed42 <__aeabi_dadd+0x142>
    ee04:	002e      	movs	r6, r5
    ee06:	e77f      	b.n	ed08 <__aeabi_dadd+0x108>
    ee08:	0008      	movs	r0, r1
    ee0a:	4310      	orrs	r0, r2
    ee0c:	d100      	bne.n	ee10 <__aeabi_dadd+0x210>
    ee0e:	e0b4      	b.n	ef7a <__aeabi_dadd+0x37a>
    ee10:	1e58      	subs	r0, r3, #1
    ee12:	2800      	cmp	r0, #0
    ee14:	d000      	beq.n	ee18 <__aeabi_dadd+0x218>
    ee16:	e0de      	b.n	efd6 <__aeabi_dadd+0x3d6>
    ee18:	18ba      	adds	r2, r7, r2
    ee1a:	42ba      	cmp	r2, r7
    ee1c:	419b      	sbcs	r3, r3
    ee1e:	1864      	adds	r4, r4, r1
    ee20:	425b      	negs	r3, r3
    ee22:	18e4      	adds	r4, r4, r3
    ee24:	0017      	movs	r7, r2
    ee26:	2601      	movs	r6, #1
    ee28:	0223      	lsls	r3, r4, #8
    ee2a:	d5a6      	bpl.n	ed7a <__aeabi_dadd+0x17a>
    ee2c:	2602      	movs	r6, #2
    ee2e:	e7d5      	b.n	eddc <__aeabi_dadd+0x1dc>
    ee30:	2d00      	cmp	r5, #0
    ee32:	d16e      	bne.n	ef12 <__aeabi_dadd+0x312>
    ee34:	1c70      	adds	r0, r6, #1
    ee36:	0540      	lsls	r0, r0, #21
    ee38:	0d40      	lsrs	r0, r0, #21
    ee3a:	2801      	cmp	r0, #1
    ee3c:	dc00      	bgt.n	ee40 <__aeabi_dadd+0x240>
    ee3e:	e0f9      	b.n	f034 <__aeabi_dadd+0x434>
    ee40:	1ab8      	subs	r0, r7, r2
    ee42:	4684      	mov	ip, r0
    ee44:	4287      	cmp	r7, r0
    ee46:	4180      	sbcs	r0, r0
    ee48:	1ae5      	subs	r5, r4, r3
    ee4a:	4240      	negs	r0, r0
    ee4c:	1a2d      	subs	r5, r5, r0
    ee4e:	0228      	lsls	r0, r5, #8
    ee50:	d400      	bmi.n	ee54 <__aeabi_dadd+0x254>
    ee52:	e089      	b.n	ef68 <__aeabi_dadd+0x368>
    ee54:	1bd7      	subs	r7, r2, r7
    ee56:	42ba      	cmp	r2, r7
    ee58:	4192      	sbcs	r2, r2
    ee5a:	1b1c      	subs	r4, r3, r4
    ee5c:	4252      	negs	r2, r2
    ee5e:	1aa5      	subs	r5, r4, r2
    ee60:	46d8      	mov	r8, fp
    ee62:	e729      	b.n	ecb8 <__aeabi_dadd+0xb8>
    ee64:	4645      	mov	r5, r8
    ee66:	2400      	movs	r4, #0
    ee68:	2700      	movs	r7, #0
    ee6a:	e76a      	b.n	ed42 <__aeabi_dadd+0x142>
    ee6c:	4c45      	ldr	r4, [pc, #276]	; (ef84 <__aeabi_dadd+0x384>)
    ee6e:	1af6      	subs	r6, r6, r3
    ee70:	402c      	ands	r4, r5
    ee72:	e749      	b.n	ed08 <__aeabi_dadd+0x108>
    ee74:	003d      	movs	r5, r7
    ee76:	3828      	subs	r0, #40	; 0x28
    ee78:	4085      	lsls	r5, r0
    ee7a:	2700      	movs	r7, #0
    ee7c:	e72e      	b.n	ecdc <__aeabi_dadd+0xdc>
    ee7e:	0038      	movs	r0, r7
    ee80:	f001 fc24 	bl	106cc <__clzsi2>
    ee84:	3020      	adds	r0, #32
    ee86:	e71d      	b.n	ecc4 <__aeabi_dadd+0xc4>
    ee88:	430a      	orrs	r2, r1
    ee8a:	1e51      	subs	r1, r2, #1
    ee8c:	418a      	sbcs	r2, r1
    ee8e:	2100      	movs	r1, #0
    ee90:	e707      	b.n	eca2 <__aeabi_dadd+0xa2>
    ee92:	2b00      	cmp	r3, #0
    ee94:	d000      	beq.n	ee98 <__aeabi_dadd+0x298>
    ee96:	e0f3      	b.n	f080 <__aeabi_dadd+0x480>
    ee98:	1c70      	adds	r0, r6, #1
    ee9a:	0543      	lsls	r3, r0, #21
    ee9c:	0d5b      	lsrs	r3, r3, #21
    ee9e:	2b01      	cmp	r3, #1
    eea0:	dc00      	bgt.n	eea4 <__aeabi_dadd+0x2a4>
    eea2:	e0ad      	b.n	f000 <__aeabi_dadd+0x400>
    eea4:	4b36      	ldr	r3, [pc, #216]	; (ef80 <__aeabi_dadd+0x380>)
    eea6:	4298      	cmp	r0, r3
    eea8:	d100      	bne.n	eeac <__aeabi_dadd+0x2ac>
    eeaa:	e0d1      	b.n	f050 <__aeabi_dadd+0x450>
    eeac:	18ba      	adds	r2, r7, r2
    eeae:	42ba      	cmp	r2, r7
    eeb0:	41bf      	sbcs	r7, r7
    eeb2:	1864      	adds	r4, r4, r1
    eeb4:	427f      	negs	r7, r7
    eeb6:	19e4      	adds	r4, r4, r7
    eeb8:	07e7      	lsls	r7, r4, #31
    eeba:	0852      	lsrs	r2, r2, #1
    eebc:	4317      	orrs	r7, r2
    eebe:	0864      	lsrs	r4, r4, #1
    eec0:	0006      	movs	r6, r0
    eec2:	e721      	b.n	ed08 <__aeabi_dadd+0x108>
    eec4:	482e      	ldr	r0, [pc, #184]	; (ef80 <__aeabi_dadd+0x380>)
    eec6:	4285      	cmp	r5, r0
    eec8:	d100      	bne.n	eecc <__aeabi_dadd+0x2cc>
    eeca:	e093      	b.n	eff4 <__aeabi_dadd+0x3f4>
    eecc:	001d      	movs	r5, r3
    eece:	e6d0      	b.n	ec72 <__aeabi_dadd+0x72>
    eed0:	0029      	movs	r1, r5
    eed2:	3e1f      	subs	r6, #31
    eed4:	40f1      	lsrs	r1, r6
    eed6:	2b20      	cmp	r3, #32
    eed8:	d100      	bne.n	eedc <__aeabi_dadd+0x2dc>
    eeda:	e08d      	b.n	eff8 <__aeabi_dadd+0x3f8>
    eedc:	2240      	movs	r2, #64	; 0x40
    eede:	1ad3      	subs	r3, r2, r3
    eee0:	409d      	lsls	r5, r3
    eee2:	432f      	orrs	r7, r5
    eee4:	1e7d      	subs	r5, r7, #1
    eee6:	41af      	sbcs	r7, r5
    eee8:	2400      	movs	r4, #0
    eeea:	430f      	orrs	r7, r1
    eeec:	2600      	movs	r6, #0
    eeee:	e744      	b.n	ed7a <__aeabi_dadd+0x17a>
    eef0:	002b      	movs	r3, r5
    eef2:	0008      	movs	r0, r1
    eef4:	3b20      	subs	r3, #32
    eef6:	40d8      	lsrs	r0, r3
    eef8:	0003      	movs	r3, r0
    eefa:	2d20      	cmp	r5, #32
    eefc:	d100      	bne.n	ef00 <__aeabi_dadd+0x300>
    eefe:	e07d      	b.n	effc <__aeabi_dadd+0x3fc>
    ef00:	2040      	movs	r0, #64	; 0x40
    ef02:	1b45      	subs	r5, r0, r5
    ef04:	40a9      	lsls	r1, r5
    ef06:	430a      	orrs	r2, r1
    ef08:	1e51      	subs	r1, r2, #1
    ef0a:	418a      	sbcs	r2, r1
    ef0c:	2100      	movs	r1, #0
    ef0e:	431a      	orrs	r2, r3
    ef10:	e6c7      	b.n	eca2 <__aeabi_dadd+0xa2>
    ef12:	2e00      	cmp	r6, #0
    ef14:	d050      	beq.n	efb8 <__aeabi_dadd+0x3b8>
    ef16:	4e1a      	ldr	r6, [pc, #104]	; (ef80 <__aeabi_dadd+0x380>)
    ef18:	42b0      	cmp	r0, r6
    ef1a:	d057      	beq.n	efcc <__aeabi_dadd+0x3cc>
    ef1c:	2680      	movs	r6, #128	; 0x80
    ef1e:	426b      	negs	r3, r5
    ef20:	4699      	mov	r9, r3
    ef22:	0436      	lsls	r6, r6, #16
    ef24:	4334      	orrs	r4, r6
    ef26:	464b      	mov	r3, r9
    ef28:	2b38      	cmp	r3, #56	; 0x38
    ef2a:	dd00      	ble.n	ef2e <__aeabi_dadd+0x32e>
    ef2c:	e0d6      	b.n	f0dc <__aeabi_dadd+0x4dc>
    ef2e:	2b1f      	cmp	r3, #31
    ef30:	dd00      	ble.n	ef34 <__aeabi_dadd+0x334>
    ef32:	e135      	b.n	f1a0 <__aeabi_dadd+0x5a0>
    ef34:	2620      	movs	r6, #32
    ef36:	1af5      	subs	r5, r6, r3
    ef38:	0026      	movs	r6, r4
    ef3a:	40ae      	lsls	r6, r5
    ef3c:	46b2      	mov	sl, r6
    ef3e:	003e      	movs	r6, r7
    ef40:	40de      	lsrs	r6, r3
    ef42:	46ac      	mov	ip, r5
    ef44:	0035      	movs	r5, r6
    ef46:	4656      	mov	r6, sl
    ef48:	432e      	orrs	r6, r5
    ef4a:	4665      	mov	r5, ip
    ef4c:	40af      	lsls	r7, r5
    ef4e:	1e7d      	subs	r5, r7, #1
    ef50:	41af      	sbcs	r7, r5
    ef52:	40dc      	lsrs	r4, r3
    ef54:	4337      	orrs	r7, r6
    ef56:	1bd7      	subs	r7, r2, r7
    ef58:	42ba      	cmp	r2, r7
    ef5a:	4192      	sbcs	r2, r2
    ef5c:	1b0c      	subs	r4, r1, r4
    ef5e:	4252      	negs	r2, r2
    ef60:	1aa4      	subs	r4, r4, r2
    ef62:	0006      	movs	r6, r0
    ef64:	46d8      	mov	r8, fp
    ef66:	e6a3      	b.n	ecb0 <__aeabi_dadd+0xb0>
    ef68:	4664      	mov	r4, ip
    ef6a:	4667      	mov	r7, ip
    ef6c:	432c      	orrs	r4, r5
    ef6e:	d000      	beq.n	ef72 <__aeabi_dadd+0x372>
    ef70:	e6a2      	b.n	ecb8 <__aeabi_dadd+0xb8>
    ef72:	2500      	movs	r5, #0
    ef74:	2600      	movs	r6, #0
    ef76:	2700      	movs	r7, #0
    ef78:	e706      	b.n	ed88 <__aeabi_dadd+0x188>
    ef7a:	001e      	movs	r6, r3
    ef7c:	e6c4      	b.n	ed08 <__aeabi_dadd+0x108>
    ef7e:	46c0      	nop			; (mov r8, r8)
    ef80:	000007ff 	.word	0x000007ff
    ef84:	ff7fffff 	.word	0xff7fffff
    ef88:	800fffff 	.word	0x800fffff
    ef8c:	2b1f      	cmp	r3, #31
    ef8e:	dc63      	bgt.n	f058 <__aeabi_dadd+0x458>
    ef90:	2020      	movs	r0, #32
    ef92:	1ac3      	subs	r3, r0, r3
    ef94:	0008      	movs	r0, r1
    ef96:	4098      	lsls	r0, r3
    ef98:	469c      	mov	ip, r3
    ef9a:	4683      	mov	fp, r0
    ef9c:	4653      	mov	r3, sl
    ef9e:	0010      	movs	r0, r2
    efa0:	40d8      	lsrs	r0, r3
    efa2:	0003      	movs	r3, r0
    efa4:	4658      	mov	r0, fp
    efa6:	4318      	orrs	r0, r3
    efa8:	4663      	mov	r3, ip
    efaa:	409a      	lsls	r2, r3
    efac:	1e53      	subs	r3, r2, #1
    efae:	419a      	sbcs	r2, r3
    efb0:	4653      	mov	r3, sl
    efb2:	4302      	orrs	r2, r0
    efb4:	40d9      	lsrs	r1, r3
    efb6:	e703      	b.n	edc0 <__aeabi_dadd+0x1c0>
    efb8:	0026      	movs	r6, r4
    efba:	433e      	orrs	r6, r7
    efbc:	d006      	beq.n	efcc <__aeabi_dadd+0x3cc>
    efbe:	43eb      	mvns	r3, r5
    efc0:	4699      	mov	r9, r3
    efc2:	2b00      	cmp	r3, #0
    efc4:	d0c7      	beq.n	ef56 <__aeabi_dadd+0x356>
    efc6:	4e94      	ldr	r6, [pc, #592]	; (f218 <__aeabi_dadd+0x618>)
    efc8:	42b0      	cmp	r0, r6
    efca:	d1ac      	bne.n	ef26 <__aeabi_dadd+0x326>
    efcc:	000c      	movs	r4, r1
    efce:	0017      	movs	r7, r2
    efd0:	0006      	movs	r6, r0
    efd2:	46d8      	mov	r8, fp
    efd4:	e698      	b.n	ed08 <__aeabi_dadd+0x108>
    efd6:	4b90      	ldr	r3, [pc, #576]	; (f218 <__aeabi_dadd+0x618>)
    efd8:	459a      	cmp	sl, r3
    efda:	d00b      	beq.n	eff4 <__aeabi_dadd+0x3f4>
    efdc:	4682      	mov	sl, r0
    efde:	e6e7      	b.n	edb0 <__aeabi_dadd+0x1b0>
    efe0:	2800      	cmp	r0, #0
    efe2:	d000      	beq.n	efe6 <__aeabi_dadd+0x3e6>
    efe4:	e09e      	b.n	f124 <__aeabi_dadd+0x524>
    efe6:	0018      	movs	r0, r3
    efe8:	4310      	orrs	r0, r2
    efea:	d100      	bne.n	efee <__aeabi_dadd+0x3ee>
    efec:	e0e9      	b.n	f1c2 <__aeabi_dadd+0x5c2>
    efee:	001c      	movs	r4, r3
    eff0:	0017      	movs	r7, r2
    eff2:	46d8      	mov	r8, fp
    eff4:	4e88      	ldr	r6, [pc, #544]	; (f218 <__aeabi_dadd+0x618>)
    eff6:	e687      	b.n	ed08 <__aeabi_dadd+0x108>
    eff8:	2500      	movs	r5, #0
    effa:	e772      	b.n	eee2 <__aeabi_dadd+0x2e2>
    effc:	2100      	movs	r1, #0
    effe:	e782      	b.n	ef06 <__aeabi_dadd+0x306>
    f000:	0023      	movs	r3, r4
    f002:	433b      	orrs	r3, r7
    f004:	2e00      	cmp	r6, #0
    f006:	d000      	beq.n	f00a <__aeabi_dadd+0x40a>
    f008:	e0ab      	b.n	f162 <__aeabi_dadd+0x562>
    f00a:	2b00      	cmp	r3, #0
    f00c:	d100      	bne.n	f010 <__aeabi_dadd+0x410>
    f00e:	e0e7      	b.n	f1e0 <__aeabi_dadd+0x5e0>
    f010:	000b      	movs	r3, r1
    f012:	4313      	orrs	r3, r2
    f014:	d100      	bne.n	f018 <__aeabi_dadd+0x418>
    f016:	e677      	b.n	ed08 <__aeabi_dadd+0x108>
    f018:	18ba      	adds	r2, r7, r2
    f01a:	42ba      	cmp	r2, r7
    f01c:	41bf      	sbcs	r7, r7
    f01e:	1864      	adds	r4, r4, r1
    f020:	427f      	negs	r7, r7
    f022:	19e4      	adds	r4, r4, r7
    f024:	0223      	lsls	r3, r4, #8
    f026:	d400      	bmi.n	f02a <__aeabi_dadd+0x42a>
    f028:	e0f2      	b.n	f210 <__aeabi_dadd+0x610>
    f02a:	4b7c      	ldr	r3, [pc, #496]	; (f21c <__aeabi_dadd+0x61c>)
    f02c:	0017      	movs	r7, r2
    f02e:	401c      	ands	r4, r3
    f030:	0006      	movs	r6, r0
    f032:	e669      	b.n	ed08 <__aeabi_dadd+0x108>
    f034:	0020      	movs	r0, r4
    f036:	4338      	orrs	r0, r7
    f038:	2e00      	cmp	r6, #0
    f03a:	d1d1      	bne.n	efe0 <__aeabi_dadd+0x3e0>
    f03c:	2800      	cmp	r0, #0
    f03e:	d15b      	bne.n	f0f8 <__aeabi_dadd+0x4f8>
    f040:	001c      	movs	r4, r3
    f042:	4314      	orrs	r4, r2
    f044:	d100      	bne.n	f048 <__aeabi_dadd+0x448>
    f046:	e0a8      	b.n	f19a <__aeabi_dadd+0x59a>
    f048:	001c      	movs	r4, r3
    f04a:	0017      	movs	r7, r2
    f04c:	46d8      	mov	r8, fp
    f04e:	e65b      	b.n	ed08 <__aeabi_dadd+0x108>
    f050:	0006      	movs	r6, r0
    f052:	2400      	movs	r4, #0
    f054:	2700      	movs	r7, #0
    f056:	e697      	b.n	ed88 <__aeabi_dadd+0x188>
    f058:	4650      	mov	r0, sl
    f05a:	000b      	movs	r3, r1
    f05c:	3820      	subs	r0, #32
    f05e:	40c3      	lsrs	r3, r0
    f060:	4699      	mov	r9, r3
    f062:	4653      	mov	r3, sl
    f064:	2b20      	cmp	r3, #32
    f066:	d100      	bne.n	f06a <__aeabi_dadd+0x46a>
    f068:	e095      	b.n	f196 <__aeabi_dadd+0x596>
    f06a:	2340      	movs	r3, #64	; 0x40
    f06c:	4650      	mov	r0, sl
    f06e:	1a1b      	subs	r3, r3, r0
    f070:	4099      	lsls	r1, r3
    f072:	430a      	orrs	r2, r1
    f074:	1e51      	subs	r1, r2, #1
    f076:	418a      	sbcs	r2, r1
    f078:	464b      	mov	r3, r9
    f07a:	2100      	movs	r1, #0
    f07c:	431a      	orrs	r2, r3
    f07e:	e69f      	b.n	edc0 <__aeabi_dadd+0x1c0>
    f080:	2e00      	cmp	r6, #0
    f082:	d130      	bne.n	f0e6 <__aeabi_dadd+0x4e6>
    f084:	0026      	movs	r6, r4
    f086:	433e      	orrs	r6, r7
    f088:	d067      	beq.n	f15a <__aeabi_dadd+0x55a>
    f08a:	43db      	mvns	r3, r3
    f08c:	469a      	mov	sl, r3
    f08e:	2b00      	cmp	r3, #0
    f090:	d01c      	beq.n	f0cc <__aeabi_dadd+0x4cc>
    f092:	4e61      	ldr	r6, [pc, #388]	; (f218 <__aeabi_dadd+0x618>)
    f094:	42b0      	cmp	r0, r6
    f096:	d060      	beq.n	f15a <__aeabi_dadd+0x55a>
    f098:	4653      	mov	r3, sl
    f09a:	2b38      	cmp	r3, #56	; 0x38
    f09c:	dd00      	ble.n	f0a0 <__aeabi_dadd+0x4a0>
    f09e:	e096      	b.n	f1ce <__aeabi_dadd+0x5ce>
    f0a0:	2b1f      	cmp	r3, #31
    f0a2:	dd00      	ble.n	f0a6 <__aeabi_dadd+0x4a6>
    f0a4:	e09f      	b.n	f1e6 <__aeabi_dadd+0x5e6>
    f0a6:	2620      	movs	r6, #32
    f0a8:	1af3      	subs	r3, r6, r3
    f0aa:	0026      	movs	r6, r4
    f0ac:	409e      	lsls	r6, r3
    f0ae:	469c      	mov	ip, r3
    f0b0:	46b3      	mov	fp, r6
    f0b2:	4653      	mov	r3, sl
    f0b4:	003e      	movs	r6, r7
    f0b6:	40de      	lsrs	r6, r3
    f0b8:	0033      	movs	r3, r6
    f0ba:	465e      	mov	r6, fp
    f0bc:	431e      	orrs	r6, r3
    f0be:	4663      	mov	r3, ip
    f0c0:	409f      	lsls	r7, r3
    f0c2:	1e7b      	subs	r3, r7, #1
    f0c4:	419f      	sbcs	r7, r3
    f0c6:	4653      	mov	r3, sl
    f0c8:	40dc      	lsrs	r4, r3
    f0ca:	4337      	orrs	r7, r6
    f0cc:	18bf      	adds	r7, r7, r2
    f0ce:	4297      	cmp	r7, r2
    f0d0:	4192      	sbcs	r2, r2
    f0d2:	1864      	adds	r4, r4, r1
    f0d4:	4252      	negs	r2, r2
    f0d6:	18a4      	adds	r4, r4, r2
    f0d8:	0006      	movs	r6, r0
    f0da:	e678      	b.n	edce <__aeabi_dadd+0x1ce>
    f0dc:	4327      	orrs	r7, r4
    f0de:	1e7c      	subs	r4, r7, #1
    f0e0:	41a7      	sbcs	r7, r4
    f0e2:	2400      	movs	r4, #0
    f0e4:	e737      	b.n	ef56 <__aeabi_dadd+0x356>
    f0e6:	4e4c      	ldr	r6, [pc, #304]	; (f218 <__aeabi_dadd+0x618>)
    f0e8:	42b0      	cmp	r0, r6
    f0ea:	d036      	beq.n	f15a <__aeabi_dadd+0x55a>
    f0ec:	2680      	movs	r6, #128	; 0x80
    f0ee:	425b      	negs	r3, r3
    f0f0:	0436      	lsls	r6, r6, #16
    f0f2:	469a      	mov	sl, r3
    f0f4:	4334      	orrs	r4, r6
    f0f6:	e7cf      	b.n	f098 <__aeabi_dadd+0x498>
    f0f8:	0018      	movs	r0, r3
    f0fa:	4310      	orrs	r0, r2
    f0fc:	d100      	bne.n	f100 <__aeabi_dadd+0x500>
    f0fe:	e603      	b.n	ed08 <__aeabi_dadd+0x108>
    f100:	1ab8      	subs	r0, r7, r2
    f102:	4684      	mov	ip, r0
    f104:	4567      	cmp	r7, ip
    f106:	41ad      	sbcs	r5, r5
    f108:	1ae0      	subs	r0, r4, r3
    f10a:	426d      	negs	r5, r5
    f10c:	1b40      	subs	r0, r0, r5
    f10e:	0205      	lsls	r5, r0, #8
    f110:	d400      	bmi.n	f114 <__aeabi_dadd+0x514>
    f112:	e62c      	b.n	ed6e <__aeabi_dadd+0x16e>
    f114:	1bd7      	subs	r7, r2, r7
    f116:	42ba      	cmp	r2, r7
    f118:	4192      	sbcs	r2, r2
    f11a:	1b1c      	subs	r4, r3, r4
    f11c:	4252      	negs	r2, r2
    f11e:	1aa4      	subs	r4, r4, r2
    f120:	46d8      	mov	r8, fp
    f122:	e5f1      	b.n	ed08 <__aeabi_dadd+0x108>
    f124:	0018      	movs	r0, r3
    f126:	4310      	orrs	r0, r2
    f128:	d100      	bne.n	f12c <__aeabi_dadd+0x52c>
    f12a:	e763      	b.n	eff4 <__aeabi_dadd+0x3f4>
    f12c:	08f8      	lsrs	r0, r7, #3
    f12e:	0767      	lsls	r7, r4, #29
    f130:	4307      	orrs	r7, r0
    f132:	2080      	movs	r0, #128	; 0x80
    f134:	08e4      	lsrs	r4, r4, #3
    f136:	0300      	lsls	r0, r0, #12
    f138:	4204      	tst	r4, r0
    f13a:	d008      	beq.n	f14e <__aeabi_dadd+0x54e>
    f13c:	08dd      	lsrs	r5, r3, #3
    f13e:	4205      	tst	r5, r0
    f140:	d105      	bne.n	f14e <__aeabi_dadd+0x54e>
    f142:	08d2      	lsrs	r2, r2, #3
    f144:	0759      	lsls	r1, r3, #29
    f146:	4311      	orrs	r1, r2
    f148:	000f      	movs	r7, r1
    f14a:	002c      	movs	r4, r5
    f14c:	46d8      	mov	r8, fp
    f14e:	0f7b      	lsrs	r3, r7, #29
    f150:	00e4      	lsls	r4, r4, #3
    f152:	431c      	orrs	r4, r3
    f154:	00ff      	lsls	r7, r7, #3
    f156:	4e30      	ldr	r6, [pc, #192]	; (f218 <__aeabi_dadd+0x618>)
    f158:	e5d6      	b.n	ed08 <__aeabi_dadd+0x108>
    f15a:	000c      	movs	r4, r1
    f15c:	0017      	movs	r7, r2
    f15e:	0006      	movs	r6, r0
    f160:	e5d2      	b.n	ed08 <__aeabi_dadd+0x108>
    f162:	2b00      	cmp	r3, #0
    f164:	d038      	beq.n	f1d8 <__aeabi_dadd+0x5d8>
    f166:	000b      	movs	r3, r1
    f168:	4313      	orrs	r3, r2
    f16a:	d100      	bne.n	f16e <__aeabi_dadd+0x56e>
    f16c:	e742      	b.n	eff4 <__aeabi_dadd+0x3f4>
    f16e:	08f8      	lsrs	r0, r7, #3
    f170:	0767      	lsls	r7, r4, #29
    f172:	4307      	orrs	r7, r0
    f174:	2080      	movs	r0, #128	; 0x80
    f176:	08e4      	lsrs	r4, r4, #3
    f178:	0300      	lsls	r0, r0, #12
    f17a:	4204      	tst	r4, r0
    f17c:	d0e7      	beq.n	f14e <__aeabi_dadd+0x54e>
    f17e:	08cb      	lsrs	r3, r1, #3
    f180:	4203      	tst	r3, r0
    f182:	d1e4      	bne.n	f14e <__aeabi_dadd+0x54e>
    f184:	08d2      	lsrs	r2, r2, #3
    f186:	0749      	lsls	r1, r1, #29
    f188:	4311      	orrs	r1, r2
    f18a:	000f      	movs	r7, r1
    f18c:	001c      	movs	r4, r3
    f18e:	e7de      	b.n	f14e <__aeabi_dadd+0x54e>
    f190:	2700      	movs	r7, #0
    f192:	2400      	movs	r4, #0
    f194:	e5d5      	b.n	ed42 <__aeabi_dadd+0x142>
    f196:	2100      	movs	r1, #0
    f198:	e76b      	b.n	f072 <__aeabi_dadd+0x472>
    f19a:	2500      	movs	r5, #0
    f19c:	2700      	movs	r7, #0
    f19e:	e5f3      	b.n	ed88 <__aeabi_dadd+0x188>
    f1a0:	464e      	mov	r6, r9
    f1a2:	0025      	movs	r5, r4
    f1a4:	3e20      	subs	r6, #32
    f1a6:	40f5      	lsrs	r5, r6
    f1a8:	464b      	mov	r3, r9
    f1aa:	002e      	movs	r6, r5
    f1ac:	2b20      	cmp	r3, #32
    f1ae:	d02d      	beq.n	f20c <__aeabi_dadd+0x60c>
    f1b0:	2540      	movs	r5, #64	; 0x40
    f1b2:	1aed      	subs	r5, r5, r3
    f1b4:	40ac      	lsls	r4, r5
    f1b6:	4327      	orrs	r7, r4
    f1b8:	1e7c      	subs	r4, r7, #1
    f1ba:	41a7      	sbcs	r7, r4
    f1bc:	2400      	movs	r4, #0
    f1be:	4337      	orrs	r7, r6
    f1c0:	e6c9      	b.n	ef56 <__aeabi_dadd+0x356>
    f1c2:	2480      	movs	r4, #128	; 0x80
    f1c4:	2500      	movs	r5, #0
    f1c6:	0324      	lsls	r4, r4, #12
    f1c8:	4e13      	ldr	r6, [pc, #76]	; (f218 <__aeabi_dadd+0x618>)
    f1ca:	2700      	movs	r7, #0
    f1cc:	e5dc      	b.n	ed88 <__aeabi_dadd+0x188>
    f1ce:	4327      	orrs	r7, r4
    f1d0:	1e7c      	subs	r4, r7, #1
    f1d2:	41a7      	sbcs	r7, r4
    f1d4:	2400      	movs	r4, #0
    f1d6:	e779      	b.n	f0cc <__aeabi_dadd+0x4cc>
    f1d8:	000c      	movs	r4, r1
    f1da:	0017      	movs	r7, r2
    f1dc:	4e0e      	ldr	r6, [pc, #56]	; (f218 <__aeabi_dadd+0x618>)
    f1de:	e593      	b.n	ed08 <__aeabi_dadd+0x108>
    f1e0:	000c      	movs	r4, r1
    f1e2:	0017      	movs	r7, r2
    f1e4:	e590      	b.n	ed08 <__aeabi_dadd+0x108>
    f1e6:	4656      	mov	r6, sl
    f1e8:	0023      	movs	r3, r4
    f1ea:	3e20      	subs	r6, #32
    f1ec:	40f3      	lsrs	r3, r6
    f1ee:	4699      	mov	r9, r3
    f1f0:	4653      	mov	r3, sl
    f1f2:	2b20      	cmp	r3, #32
    f1f4:	d00e      	beq.n	f214 <__aeabi_dadd+0x614>
    f1f6:	2340      	movs	r3, #64	; 0x40
    f1f8:	4656      	mov	r6, sl
    f1fa:	1b9b      	subs	r3, r3, r6
    f1fc:	409c      	lsls	r4, r3
    f1fe:	4327      	orrs	r7, r4
    f200:	1e7c      	subs	r4, r7, #1
    f202:	41a7      	sbcs	r7, r4
    f204:	464b      	mov	r3, r9
    f206:	2400      	movs	r4, #0
    f208:	431f      	orrs	r7, r3
    f20a:	e75f      	b.n	f0cc <__aeabi_dadd+0x4cc>
    f20c:	2400      	movs	r4, #0
    f20e:	e7d2      	b.n	f1b6 <__aeabi_dadd+0x5b6>
    f210:	0017      	movs	r7, r2
    f212:	e5b2      	b.n	ed7a <__aeabi_dadd+0x17a>
    f214:	2400      	movs	r4, #0
    f216:	e7f2      	b.n	f1fe <__aeabi_dadd+0x5fe>
    f218:	000007ff 	.word	0x000007ff
    f21c:	ff7fffff 	.word	0xff7fffff

0000f220 <__aeabi_ddiv>:
    f220:	b5f0      	push	{r4, r5, r6, r7, lr}
    f222:	4657      	mov	r7, sl
    f224:	4645      	mov	r5, r8
    f226:	46de      	mov	lr, fp
    f228:	464e      	mov	r6, r9
    f22a:	b5e0      	push	{r5, r6, r7, lr}
    f22c:	004c      	lsls	r4, r1, #1
    f22e:	030e      	lsls	r6, r1, #12
    f230:	b087      	sub	sp, #28
    f232:	4683      	mov	fp, r0
    f234:	4692      	mov	sl, r2
    f236:	001d      	movs	r5, r3
    f238:	4680      	mov	r8, r0
    f23a:	0b36      	lsrs	r6, r6, #12
    f23c:	0d64      	lsrs	r4, r4, #21
    f23e:	0fcf      	lsrs	r7, r1, #31
    f240:	2c00      	cmp	r4, #0
    f242:	d04f      	beq.n	f2e4 <__aeabi_ddiv+0xc4>
    f244:	4b6f      	ldr	r3, [pc, #444]	; (f404 <__aeabi_ddiv+0x1e4>)
    f246:	429c      	cmp	r4, r3
    f248:	d035      	beq.n	f2b6 <__aeabi_ddiv+0x96>
    f24a:	2380      	movs	r3, #128	; 0x80
    f24c:	0f42      	lsrs	r2, r0, #29
    f24e:	041b      	lsls	r3, r3, #16
    f250:	00f6      	lsls	r6, r6, #3
    f252:	4313      	orrs	r3, r2
    f254:	4333      	orrs	r3, r6
    f256:	4699      	mov	r9, r3
    f258:	00c3      	lsls	r3, r0, #3
    f25a:	4698      	mov	r8, r3
    f25c:	4b6a      	ldr	r3, [pc, #424]	; (f408 <__aeabi_ddiv+0x1e8>)
    f25e:	2600      	movs	r6, #0
    f260:	469c      	mov	ip, r3
    f262:	2300      	movs	r3, #0
    f264:	4464      	add	r4, ip
    f266:	9303      	str	r3, [sp, #12]
    f268:	032b      	lsls	r3, r5, #12
    f26a:	0b1b      	lsrs	r3, r3, #12
    f26c:	469b      	mov	fp, r3
    f26e:	006b      	lsls	r3, r5, #1
    f270:	0fed      	lsrs	r5, r5, #31
    f272:	4650      	mov	r0, sl
    f274:	0d5b      	lsrs	r3, r3, #21
    f276:	9501      	str	r5, [sp, #4]
    f278:	d05e      	beq.n	f338 <__aeabi_ddiv+0x118>
    f27a:	4a62      	ldr	r2, [pc, #392]	; (f404 <__aeabi_ddiv+0x1e4>)
    f27c:	4293      	cmp	r3, r2
    f27e:	d053      	beq.n	f328 <__aeabi_ddiv+0x108>
    f280:	465a      	mov	r2, fp
    f282:	00d1      	lsls	r1, r2, #3
    f284:	2280      	movs	r2, #128	; 0x80
    f286:	0f40      	lsrs	r0, r0, #29
    f288:	0412      	lsls	r2, r2, #16
    f28a:	4302      	orrs	r2, r0
    f28c:	430a      	orrs	r2, r1
    f28e:	4693      	mov	fp, r2
    f290:	4652      	mov	r2, sl
    f292:	00d1      	lsls	r1, r2, #3
    f294:	4a5c      	ldr	r2, [pc, #368]	; (f408 <__aeabi_ddiv+0x1e8>)
    f296:	4694      	mov	ip, r2
    f298:	2200      	movs	r2, #0
    f29a:	4463      	add	r3, ip
    f29c:	0038      	movs	r0, r7
    f29e:	4068      	eors	r0, r5
    f2a0:	4684      	mov	ip, r0
    f2a2:	9002      	str	r0, [sp, #8]
    f2a4:	1ae4      	subs	r4, r4, r3
    f2a6:	4316      	orrs	r6, r2
    f2a8:	2e0f      	cmp	r6, #15
    f2aa:	d900      	bls.n	f2ae <__aeabi_ddiv+0x8e>
    f2ac:	e0b4      	b.n	f418 <__aeabi_ddiv+0x1f8>
    f2ae:	4b57      	ldr	r3, [pc, #348]	; (f40c <__aeabi_ddiv+0x1ec>)
    f2b0:	00b6      	lsls	r6, r6, #2
    f2b2:	599b      	ldr	r3, [r3, r6]
    f2b4:	469f      	mov	pc, r3
    f2b6:	0003      	movs	r3, r0
    f2b8:	4333      	orrs	r3, r6
    f2ba:	4699      	mov	r9, r3
    f2bc:	d16c      	bne.n	f398 <__aeabi_ddiv+0x178>
    f2be:	2300      	movs	r3, #0
    f2c0:	4698      	mov	r8, r3
    f2c2:	3302      	adds	r3, #2
    f2c4:	2608      	movs	r6, #8
    f2c6:	9303      	str	r3, [sp, #12]
    f2c8:	e7ce      	b.n	f268 <__aeabi_ddiv+0x48>
    f2ca:	46cb      	mov	fp, r9
    f2cc:	4641      	mov	r1, r8
    f2ce:	9a03      	ldr	r2, [sp, #12]
    f2d0:	9701      	str	r7, [sp, #4]
    f2d2:	2a02      	cmp	r2, #2
    f2d4:	d165      	bne.n	f3a2 <__aeabi_ddiv+0x182>
    f2d6:	9b01      	ldr	r3, [sp, #4]
    f2d8:	4c4a      	ldr	r4, [pc, #296]	; (f404 <__aeabi_ddiv+0x1e4>)
    f2da:	469c      	mov	ip, r3
    f2dc:	2300      	movs	r3, #0
    f2de:	2200      	movs	r2, #0
    f2e0:	4698      	mov	r8, r3
    f2e2:	e06b      	b.n	f3bc <__aeabi_ddiv+0x19c>
    f2e4:	0003      	movs	r3, r0
    f2e6:	4333      	orrs	r3, r6
    f2e8:	4699      	mov	r9, r3
    f2ea:	d04e      	beq.n	f38a <__aeabi_ddiv+0x16a>
    f2ec:	2e00      	cmp	r6, #0
    f2ee:	d100      	bne.n	f2f2 <__aeabi_ddiv+0xd2>
    f2f0:	e1bc      	b.n	f66c <__aeabi_ddiv+0x44c>
    f2f2:	0030      	movs	r0, r6
    f2f4:	f001 f9ea 	bl	106cc <__clzsi2>
    f2f8:	0003      	movs	r3, r0
    f2fa:	3b0b      	subs	r3, #11
    f2fc:	2b1c      	cmp	r3, #28
    f2fe:	dd00      	ble.n	f302 <__aeabi_ddiv+0xe2>
    f300:	e1ac      	b.n	f65c <__aeabi_ddiv+0x43c>
    f302:	221d      	movs	r2, #29
    f304:	1ad3      	subs	r3, r2, r3
    f306:	465a      	mov	r2, fp
    f308:	0001      	movs	r1, r0
    f30a:	40da      	lsrs	r2, r3
    f30c:	3908      	subs	r1, #8
    f30e:	408e      	lsls	r6, r1
    f310:	0013      	movs	r3, r2
    f312:	4333      	orrs	r3, r6
    f314:	4699      	mov	r9, r3
    f316:	465b      	mov	r3, fp
    f318:	408b      	lsls	r3, r1
    f31a:	4698      	mov	r8, r3
    f31c:	2300      	movs	r3, #0
    f31e:	4c3c      	ldr	r4, [pc, #240]	; (f410 <__aeabi_ddiv+0x1f0>)
    f320:	2600      	movs	r6, #0
    f322:	1a24      	subs	r4, r4, r0
    f324:	9303      	str	r3, [sp, #12]
    f326:	e79f      	b.n	f268 <__aeabi_ddiv+0x48>
    f328:	4651      	mov	r1, sl
    f32a:	465a      	mov	r2, fp
    f32c:	4311      	orrs	r1, r2
    f32e:	d129      	bne.n	f384 <__aeabi_ddiv+0x164>
    f330:	2200      	movs	r2, #0
    f332:	4693      	mov	fp, r2
    f334:	3202      	adds	r2, #2
    f336:	e7b1      	b.n	f29c <__aeabi_ddiv+0x7c>
    f338:	4659      	mov	r1, fp
    f33a:	4301      	orrs	r1, r0
    f33c:	d01e      	beq.n	f37c <__aeabi_ddiv+0x15c>
    f33e:	465b      	mov	r3, fp
    f340:	2b00      	cmp	r3, #0
    f342:	d100      	bne.n	f346 <__aeabi_ddiv+0x126>
    f344:	e19e      	b.n	f684 <__aeabi_ddiv+0x464>
    f346:	4658      	mov	r0, fp
    f348:	f001 f9c0 	bl	106cc <__clzsi2>
    f34c:	0003      	movs	r3, r0
    f34e:	3b0b      	subs	r3, #11
    f350:	2b1c      	cmp	r3, #28
    f352:	dd00      	ble.n	f356 <__aeabi_ddiv+0x136>
    f354:	e18f      	b.n	f676 <__aeabi_ddiv+0x456>
    f356:	0002      	movs	r2, r0
    f358:	4659      	mov	r1, fp
    f35a:	3a08      	subs	r2, #8
    f35c:	4091      	lsls	r1, r2
    f35e:	468b      	mov	fp, r1
    f360:	211d      	movs	r1, #29
    f362:	1acb      	subs	r3, r1, r3
    f364:	4651      	mov	r1, sl
    f366:	40d9      	lsrs	r1, r3
    f368:	000b      	movs	r3, r1
    f36a:	4659      	mov	r1, fp
    f36c:	430b      	orrs	r3, r1
    f36e:	4651      	mov	r1, sl
    f370:	469b      	mov	fp, r3
    f372:	4091      	lsls	r1, r2
    f374:	4b26      	ldr	r3, [pc, #152]	; (f410 <__aeabi_ddiv+0x1f0>)
    f376:	2200      	movs	r2, #0
    f378:	1a1b      	subs	r3, r3, r0
    f37a:	e78f      	b.n	f29c <__aeabi_ddiv+0x7c>
    f37c:	2300      	movs	r3, #0
    f37e:	2201      	movs	r2, #1
    f380:	469b      	mov	fp, r3
    f382:	e78b      	b.n	f29c <__aeabi_ddiv+0x7c>
    f384:	4651      	mov	r1, sl
    f386:	2203      	movs	r2, #3
    f388:	e788      	b.n	f29c <__aeabi_ddiv+0x7c>
    f38a:	2300      	movs	r3, #0
    f38c:	4698      	mov	r8, r3
    f38e:	3301      	adds	r3, #1
    f390:	2604      	movs	r6, #4
    f392:	2400      	movs	r4, #0
    f394:	9303      	str	r3, [sp, #12]
    f396:	e767      	b.n	f268 <__aeabi_ddiv+0x48>
    f398:	2303      	movs	r3, #3
    f39a:	46b1      	mov	r9, r6
    f39c:	9303      	str	r3, [sp, #12]
    f39e:	260c      	movs	r6, #12
    f3a0:	e762      	b.n	f268 <__aeabi_ddiv+0x48>
    f3a2:	2a03      	cmp	r2, #3
    f3a4:	d100      	bne.n	f3a8 <__aeabi_ddiv+0x188>
    f3a6:	e25c      	b.n	f862 <__aeabi_ddiv+0x642>
    f3a8:	9b01      	ldr	r3, [sp, #4]
    f3aa:	2a01      	cmp	r2, #1
    f3ac:	d000      	beq.n	f3b0 <__aeabi_ddiv+0x190>
    f3ae:	e1e4      	b.n	f77a <__aeabi_ddiv+0x55a>
    f3b0:	4013      	ands	r3, r2
    f3b2:	469c      	mov	ip, r3
    f3b4:	2300      	movs	r3, #0
    f3b6:	2400      	movs	r4, #0
    f3b8:	2200      	movs	r2, #0
    f3ba:	4698      	mov	r8, r3
    f3bc:	2100      	movs	r1, #0
    f3be:	0312      	lsls	r2, r2, #12
    f3c0:	0b13      	lsrs	r3, r2, #12
    f3c2:	0d0a      	lsrs	r2, r1, #20
    f3c4:	0512      	lsls	r2, r2, #20
    f3c6:	431a      	orrs	r2, r3
    f3c8:	0523      	lsls	r3, r4, #20
    f3ca:	4c12      	ldr	r4, [pc, #72]	; (f414 <__aeabi_ddiv+0x1f4>)
    f3cc:	4640      	mov	r0, r8
    f3ce:	4022      	ands	r2, r4
    f3d0:	4313      	orrs	r3, r2
    f3d2:	4662      	mov	r2, ip
    f3d4:	005b      	lsls	r3, r3, #1
    f3d6:	07d2      	lsls	r2, r2, #31
    f3d8:	085b      	lsrs	r3, r3, #1
    f3da:	4313      	orrs	r3, r2
    f3dc:	0019      	movs	r1, r3
    f3de:	b007      	add	sp, #28
    f3e0:	bc3c      	pop	{r2, r3, r4, r5}
    f3e2:	4690      	mov	r8, r2
    f3e4:	4699      	mov	r9, r3
    f3e6:	46a2      	mov	sl, r4
    f3e8:	46ab      	mov	fp, r5
    f3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3ec:	2300      	movs	r3, #0
    f3ee:	2280      	movs	r2, #128	; 0x80
    f3f0:	469c      	mov	ip, r3
    f3f2:	0312      	lsls	r2, r2, #12
    f3f4:	4698      	mov	r8, r3
    f3f6:	4c03      	ldr	r4, [pc, #12]	; (f404 <__aeabi_ddiv+0x1e4>)
    f3f8:	e7e0      	b.n	f3bc <__aeabi_ddiv+0x19c>
    f3fa:	2300      	movs	r3, #0
    f3fc:	4c01      	ldr	r4, [pc, #4]	; (f404 <__aeabi_ddiv+0x1e4>)
    f3fe:	2200      	movs	r2, #0
    f400:	4698      	mov	r8, r3
    f402:	e7db      	b.n	f3bc <__aeabi_ddiv+0x19c>
    f404:	000007ff 	.word	0x000007ff
    f408:	fffffc01 	.word	0xfffffc01
    f40c:	000140c4 	.word	0x000140c4
    f410:	fffffc0d 	.word	0xfffffc0d
    f414:	800fffff 	.word	0x800fffff
    f418:	45d9      	cmp	r9, fp
    f41a:	d900      	bls.n	f41e <__aeabi_ddiv+0x1fe>
    f41c:	e139      	b.n	f692 <__aeabi_ddiv+0x472>
    f41e:	d100      	bne.n	f422 <__aeabi_ddiv+0x202>
    f420:	e134      	b.n	f68c <__aeabi_ddiv+0x46c>
    f422:	2300      	movs	r3, #0
    f424:	4646      	mov	r6, r8
    f426:	464d      	mov	r5, r9
    f428:	469a      	mov	sl, r3
    f42a:	3c01      	subs	r4, #1
    f42c:	465b      	mov	r3, fp
    f42e:	0e0a      	lsrs	r2, r1, #24
    f430:	021b      	lsls	r3, r3, #8
    f432:	431a      	orrs	r2, r3
    f434:	020b      	lsls	r3, r1, #8
    f436:	0c17      	lsrs	r7, r2, #16
    f438:	9303      	str	r3, [sp, #12]
    f43a:	0413      	lsls	r3, r2, #16
    f43c:	0c1b      	lsrs	r3, r3, #16
    f43e:	0039      	movs	r1, r7
    f440:	0028      	movs	r0, r5
    f442:	4690      	mov	r8, r2
    f444:	9301      	str	r3, [sp, #4]
    f446:	f7ff fa27 	bl	e898 <__udivsi3>
    f44a:	0002      	movs	r2, r0
    f44c:	9b01      	ldr	r3, [sp, #4]
    f44e:	4683      	mov	fp, r0
    f450:	435a      	muls	r2, r3
    f452:	0028      	movs	r0, r5
    f454:	0039      	movs	r1, r7
    f456:	4691      	mov	r9, r2
    f458:	f7ff faa4 	bl	e9a4 <__aeabi_uidivmod>
    f45c:	0c35      	lsrs	r5, r6, #16
    f45e:	0409      	lsls	r1, r1, #16
    f460:	430d      	orrs	r5, r1
    f462:	45a9      	cmp	r9, r5
    f464:	d90d      	bls.n	f482 <__aeabi_ddiv+0x262>
    f466:	465b      	mov	r3, fp
    f468:	4445      	add	r5, r8
    f46a:	3b01      	subs	r3, #1
    f46c:	45a8      	cmp	r8, r5
    f46e:	d900      	bls.n	f472 <__aeabi_ddiv+0x252>
    f470:	e13a      	b.n	f6e8 <__aeabi_ddiv+0x4c8>
    f472:	45a9      	cmp	r9, r5
    f474:	d800      	bhi.n	f478 <__aeabi_ddiv+0x258>
    f476:	e137      	b.n	f6e8 <__aeabi_ddiv+0x4c8>
    f478:	2302      	movs	r3, #2
    f47a:	425b      	negs	r3, r3
    f47c:	469c      	mov	ip, r3
    f47e:	4445      	add	r5, r8
    f480:	44e3      	add	fp, ip
    f482:	464b      	mov	r3, r9
    f484:	1aeb      	subs	r3, r5, r3
    f486:	0039      	movs	r1, r7
    f488:	0018      	movs	r0, r3
    f48a:	9304      	str	r3, [sp, #16]
    f48c:	f7ff fa04 	bl	e898 <__udivsi3>
    f490:	9b01      	ldr	r3, [sp, #4]
    f492:	0005      	movs	r5, r0
    f494:	4343      	muls	r3, r0
    f496:	0039      	movs	r1, r7
    f498:	9804      	ldr	r0, [sp, #16]
    f49a:	4699      	mov	r9, r3
    f49c:	f7ff fa82 	bl	e9a4 <__aeabi_uidivmod>
    f4a0:	0433      	lsls	r3, r6, #16
    f4a2:	0409      	lsls	r1, r1, #16
    f4a4:	0c1b      	lsrs	r3, r3, #16
    f4a6:	430b      	orrs	r3, r1
    f4a8:	4599      	cmp	r9, r3
    f4aa:	d909      	bls.n	f4c0 <__aeabi_ddiv+0x2a0>
    f4ac:	4443      	add	r3, r8
    f4ae:	1e6a      	subs	r2, r5, #1
    f4b0:	4598      	cmp	r8, r3
    f4b2:	d900      	bls.n	f4b6 <__aeabi_ddiv+0x296>
    f4b4:	e11a      	b.n	f6ec <__aeabi_ddiv+0x4cc>
    f4b6:	4599      	cmp	r9, r3
    f4b8:	d800      	bhi.n	f4bc <__aeabi_ddiv+0x29c>
    f4ba:	e117      	b.n	f6ec <__aeabi_ddiv+0x4cc>
    f4bc:	3d02      	subs	r5, #2
    f4be:	4443      	add	r3, r8
    f4c0:	464a      	mov	r2, r9
    f4c2:	1a9b      	subs	r3, r3, r2
    f4c4:	465a      	mov	r2, fp
    f4c6:	0412      	lsls	r2, r2, #16
    f4c8:	432a      	orrs	r2, r5
    f4ca:	9903      	ldr	r1, [sp, #12]
    f4cc:	4693      	mov	fp, r2
    f4ce:	0c10      	lsrs	r0, r2, #16
    f4d0:	0c0a      	lsrs	r2, r1, #16
    f4d2:	4691      	mov	r9, r2
    f4d4:	0409      	lsls	r1, r1, #16
    f4d6:	465a      	mov	r2, fp
    f4d8:	0c09      	lsrs	r1, r1, #16
    f4da:	464e      	mov	r6, r9
    f4dc:	000d      	movs	r5, r1
    f4de:	0412      	lsls	r2, r2, #16
    f4e0:	0c12      	lsrs	r2, r2, #16
    f4e2:	4345      	muls	r5, r0
    f4e4:	9105      	str	r1, [sp, #20]
    f4e6:	4351      	muls	r1, r2
    f4e8:	4372      	muls	r2, r6
    f4ea:	4370      	muls	r0, r6
    f4ec:	1952      	adds	r2, r2, r5
    f4ee:	0c0e      	lsrs	r6, r1, #16
    f4f0:	18b2      	adds	r2, r6, r2
    f4f2:	4295      	cmp	r5, r2
    f4f4:	d903      	bls.n	f4fe <__aeabi_ddiv+0x2de>
    f4f6:	2580      	movs	r5, #128	; 0x80
    f4f8:	026d      	lsls	r5, r5, #9
    f4fa:	46ac      	mov	ip, r5
    f4fc:	4460      	add	r0, ip
    f4fe:	0c15      	lsrs	r5, r2, #16
    f500:	0409      	lsls	r1, r1, #16
    f502:	0412      	lsls	r2, r2, #16
    f504:	0c09      	lsrs	r1, r1, #16
    f506:	1828      	adds	r0, r5, r0
    f508:	1852      	adds	r2, r2, r1
    f50a:	4283      	cmp	r3, r0
    f50c:	d200      	bcs.n	f510 <__aeabi_ddiv+0x2f0>
    f50e:	e0ce      	b.n	f6ae <__aeabi_ddiv+0x48e>
    f510:	d100      	bne.n	f514 <__aeabi_ddiv+0x2f4>
    f512:	e0c8      	b.n	f6a6 <__aeabi_ddiv+0x486>
    f514:	1a1d      	subs	r5, r3, r0
    f516:	4653      	mov	r3, sl
    f518:	1a9e      	subs	r6, r3, r2
    f51a:	45b2      	cmp	sl, r6
    f51c:	4192      	sbcs	r2, r2
    f51e:	4252      	negs	r2, r2
    f520:	1aab      	subs	r3, r5, r2
    f522:	469a      	mov	sl, r3
    f524:	4598      	cmp	r8, r3
    f526:	d100      	bne.n	f52a <__aeabi_ddiv+0x30a>
    f528:	e117      	b.n	f75a <__aeabi_ddiv+0x53a>
    f52a:	0039      	movs	r1, r7
    f52c:	0018      	movs	r0, r3
    f52e:	f7ff f9b3 	bl	e898 <__udivsi3>
    f532:	9b01      	ldr	r3, [sp, #4]
    f534:	0005      	movs	r5, r0
    f536:	4343      	muls	r3, r0
    f538:	0039      	movs	r1, r7
    f53a:	4650      	mov	r0, sl
    f53c:	9304      	str	r3, [sp, #16]
    f53e:	f7ff fa31 	bl	e9a4 <__aeabi_uidivmod>
    f542:	9804      	ldr	r0, [sp, #16]
    f544:	040b      	lsls	r3, r1, #16
    f546:	0c31      	lsrs	r1, r6, #16
    f548:	4319      	orrs	r1, r3
    f54a:	4288      	cmp	r0, r1
    f54c:	d909      	bls.n	f562 <__aeabi_ddiv+0x342>
    f54e:	4441      	add	r1, r8
    f550:	1e6b      	subs	r3, r5, #1
    f552:	4588      	cmp	r8, r1
    f554:	d900      	bls.n	f558 <__aeabi_ddiv+0x338>
    f556:	e107      	b.n	f768 <__aeabi_ddiv+0x548>
    f558:	4288      	cmp	r0, r1
    f55a:	d800      	bhi.n	f55e <__aeabi_ddiv+0x33e>
    f55c:	e104      	b.n	f768 <__aeabi_ddiv+0x548>
    f55e:	3d02      	subs	r5, #2
    f560:	4441      	add	r1, r8
    f562:	9b04      	ldr	r3, [sp, #16]
    f564:	1acb      	subs	r3, r1, r3
    f566:	0018      	movs	r0, r3
    f568:	0039      	movs	r1, r7
    f56a:	9304      	str	r3, [sp, #16]
    f56c:	f7ff f994 	bl	e898 <__udivsi3>
    f570:	9b01      	ldr	r3, [sp, #4]
    f572:	4682      	mov	sl, r0
    f574:	4343      	muls	r3, r0
    f576:	0039      	movs	r1, r7
    f578:	9804      	ldr	r0, [sp, #16]
    f57a:	9301      	str	r3, [sp, #4]
    f57c:	f7ff fa12 	bl	e9a4 <__aeabi_uidivmod>
    f580:	9801      	ldr	r0, [sp, #4]
    f582:	040b      	lsls	r3, r1, #16
    f584:	0431      	lsls	r1, r6, #16
    f586:	0c09      	lsrs	r1, r1, #16
    f588:	4319      	orrs	r1, r3
    f58a:	4288      	cmp	r0, r1
    f58c:	d90d      	bls.n	f5aa <__aeabi_ddiv+0x38a>
    f58e:	4653      	mov	r3, sl
    f590:	4441      	add	r1, r8
    f592:	3b01      	subs	r3, #1
    f594:	4588      	cmp	r8, r1
    f596:	d900      	bls.n	f59a <__aeabi_ddiv+0x37a>
    f598:	e0e8      	b.n	f76c <__aeabi_ddiv+0x54c>
    f59a:	4288      	cmp	r0, r1
    f59c:	d800      	bhi.n	f5a0 <__aeabi_ddiv+0x380>
    f59e:	e0e5      	b.n	f76c <__aeabi_ddiv+0x54c>
    f5a0:	2302      	movs	r3, #2
    f5a2:	425b      	negs	r3, r3
    f5a4:	469c      	mov	ip, r3
    f5a6:	4441      	add	r1, r8
    f5a8:	44e2      	add	sl, ip
    f5aa:	9b01      	ldr	r3, [sp, #4]
    f5ac:	042d      	lsls	r5, r5, #16
    f5ae:	1ace      	subs	r6, r1, r3
    f5b0:	4651      	mov	r1, sl
    f5b2:	4329      	orrs	r1, r5
    f5b4:	9d05      	ldr	r5, [sp, #20]
    f5b6:	464f      	mov	r7, r9
    f5b8:	002a      	movs	r2, r5
    f5ba:	040b      	lsls	r3, r1, #16
    f5bc:	0c08      	lsrs	r0, r1, #16
    f5be:	0c1b      	lsrs	r3, r3, #16
    f5c0:	435a      	muls	r2, r3
    f5c2:	4345      	muls	r5, r0
    f5c4:	437b      	muls	r3, r7
    f5c6:	4378      	muls	r0, r7
    f5c8:	195b      	adds	r3, r3, r5
    f5ca:	0c17      	lsrs	r7, r2, #16
    f5cc:	18fb      	adds	r3, r7, r3
    f5ce:	429d      	cmp	r5, r3
    f5d0:	d903      	bls.n	f5da <__aeabi_ddiv+0x3ba>
    f5d2:	2580      	movs	r5, #128	; 0x80
    f5d4:	026d      	lsls	r5, r5, #9
    f5d6:	46ac      	mov	ip, r5
    f5d8:	4460      	add	r0, ip
    f5da:	0c1d      	lsrs	r5, r3, #16
    f5dc:	0412      	lsls	r2, r2, #16
    f5de:	041b      	lsls	r3, r3, #16
    f5e0:	0c12      	lsrs	r2, r2, #16
    f5e2:	1828      	adds	r0, r5, r0
    f5e4:	189b      	adds	r3, r3, r2
    f5e6:	4286      	cmp	r6, r0
    f5e8:	d200      	bcs.n	f5ec <__aeabi_ddiv+0x3cc>
    f5ea:	e093      	b.n	f714 <__aeabi_ddiv+0x4f4>
    f5ec:	d100      	bne.n	f5f0 <__aeabi_ddiv+0x3d0>
    f5ee:	e08e      	b.n	f70e <__aeabi_ddiv+0x4ee>
    f5f0:	2301      	movs	r3, #1
    f5f2:	4319      	orrs	r1, r3
    f5f4:	4ba0      	ldr	r3, [pc, #640]	; (f878 <__aeabi_ddiv+0x658>)
    f5f6:	18e3      	adds	r3, r4, r3
    f5f8:	2b00      	cmp	r3, #0
    f5fa:	dc00      	bgt.n	f5fe <__aeabi_ddiv+0x3de>
    f5fc:	e099      	b.n	f732 <__aeabi_ddiv+0x512>
    f5fe:	074a      	lsls	r2, r1, #29
    f600:	d000      	beq.n	f604 <__aeabi_ddiv+0x3e4>
    f602:	e09e      	b.n	f742 <__aeabi_ddiv+0x522>
    f604:	465a      	mov	r2, fp
    f606:	01d2      	lsls	r2, r2, #7
    f608:	d506      	bpl.n	f618 <__aeabi_ddiv+0x3f8>
    f60a:	465a      	mov	r2, fp
    f60c:	4b9b      	ldr	r3, [pc, #620]	; (f87c <__aeabi_ddiv+0x65c>)
    f60e:	401a      	ands	r2, r3
    f610:	2380      	movs	r3, #128	; 0x80
    f612:	4693      	mov	fp, r2
    f614:	00db      	lsls	r3, r3, #3
    f616:	18e3      	adds	r3, r4, r3
    f618:	4a99      	ldr	r2, [pc, #612]	; (f880 <__aeabi_ddiv+0x660>)
    f61a:	4293      	cmp	r3, r2
    f61c:	dd68      	ble.n	f6f0 <__aeabi_ddiv+0x4d0>
    f61e:	2301      	movs	r3, #1
    f620:	9a02      	ldr	r2, [sp, #8]
    f622:	4c98      	ldr	r4, [pc, #608]	; (f884 <__aeabi_ddiv+0x664>)
    f624:	401a      	ands	r2, r3
    f626:	2300      	movs	r3, #0
    f628:	4694      	mov	ip, r2
    f62a:	4698      	mov	r8, r3
    f62c:	2200      	movs	r2, #0
    f62e:	e6c5      	b.n	f3bc <__aeabi_ddiv+0x19c>
    f630:	2280      	movs	r2, #128	; 0x80
    f632:	464b      	mov	r3, r9
    f634:	0312      	lsls	r2, r2, #12
    f636:	4213      	tst	r3, r2
    f638:	d00a      	beq.n	f650 <__aeabi_ddiv+0x430>
    f63a:	465b      	mov	r3, fp
    f63c:	4213      	tst	r3, r2
    f63e:	d106      	bne.n	f64e <__aeabi_ddiv+0x42e>
    f640:	431a      	orrs	r2, r3
    f642:	0312      	lsls	r2, r2, #12
    f644:	0b12      	lsrs	r2, r2, #12
    f646:	46ac      	mov	ip, r5
    f648:	4688      	mov	r8, r1
    f64a:	4c8e      	ldr	r4, [pc, #568]	; (f884 <__aeabi_ddiv+0x664>)
    f64c:	e6b6      	b.n	f3bc <__aeabi_ddiv+0x19c>
    f64e:	464b      	mov	r3, r9
    f650:	431a      	orrs	r2, r3
    f652:	0312      	lsls	r2, r2, #12
    f654:	0b12      	lsrs	r2, r2, #12
    f656:	46bc      	mov	ip, r7
    f658:	4c8a      	ldr	r4, [pc, #552]	; (f884 <__aeabi_ddiv+0x664>)
    f65a:	e6af      	b.n	f3bc <__aeabi_ddiv+0x19c>
    f65c:	0003      	movs	r3, r0
    f65e:	465a      	mov	r2, fp
    f660:	3b28      	subs	r3, #40	; 0x28
    f662:	409a      	lsls	r2, r3
    f664:	2300      	movs	r3, #0
    f666:	4691      	mov	r9, r2
    f668:	4698      	mov	r8, r3
    f66a:	e657      	b.n	f31c <__aeabi_ddiv+0xfc>
    f66c:	4658      	mov	r0, fp
    f66e:	f001 f82d 	bl	106cc <__clzsi2>
    f672:	3020      	adds	r0, #32
    f674:	e640      	b.n	f2f8 <__aeabi_ddiv+0xd8>
    f676:	0003      	movs	r3, r0
    f678:	4652      	mov	r2, sl
    f67a:	3b28      	subs	r3, #40	; 0x28
    f67c:	409a      	lsls	r2, r3
    f67e:	2100      	movs	r1, #0
    f680:	4693      	mov	fp, r2
    f682:	e677      	b.n	f374 <__aeabi_ddiv+0x154>
    f684:	f001 f822 	bl	106cc <__clzsi2>
    f688:	3020      	adds	r0, #32
    f68a:	e65f      	b.n	f34c <__aeabi_ddiv+0x12c>
    f68c:	4588      	cmp	r8, r1
    f68e:	d200      	bcs.n	f692 <__aeabi_ddiv+0x472>
    f690:	e6c7      	b.n	f422 <__aeabi_ddiv+0x202>
    f692:	464b      	mov	r3, r9
    f694:	07de      	lsls	r6, r3, #31
    f696:	085d      	lsrs	r5, r3, #1
    f698:	4643      	mov	r3, r8
    f69a:	085b      	lsrs	r3, r3, #1
    f69c:	431e      	orrs	r6, r3
    f69e:	4643      	mov	r3, r8
    f6a0:	07db      	lsls	r3, r3, #31
    f6a2:	469a      	mov	sl, r3
    f6a4:	e6c2      	b.n	f42c <__aeabi_ddiv+0x20c>
    f6a6:	2500      	movs	r5, #0
    f6a8:	4592      	cmp	sl, r2
    f6aa:	d300      	bcc.n	f6ae <__aeabi_ddiv+0x48e>
    f6ac:	e733      	b.n	f516 <__aeabi_ddiv+0x2f6>
    f6ae:	9e03      	ldr	r6, [sp, #12]
    f6b0:	4659      	mov	r1, fp
    f6b2:	46b4      	mov	ip, r6
    f6b4:	44e2      	add	sl, ip
    f6b6:	45b2      	cmp	sl, r6
    f6b8:	41ad      	sbcs	r5, r5
    f6ba:	426d      	negs	r5, r5
    f6bc:	4445      	add	r5, r8
    f6be:	18eb      	adds	r3, r5, r3
    f6c0:	3901      	subs	r1, #1
    f6c2:	4598      	cmp	r8, r3
    f6c4:	d207      	bcs.n	f6d6 <__aeabi_ddiv+0x4b6>
    f6c6:	4298      	cmp	r0, r3
    f6c8:	d900      	bls.n	f6cc <__aeabi_ddiv+0x4ac>
    f6ca:	e07f      	b.n	f7cc <__aeabi_ddiv+0x5ac>
    f6cc:	d100      	bne.n	f6d0 <__aeabi_ddiv+0x4b0>
    f6ce:	e0bc      	b.n	f84a <__aeabi_ddiv+0x62a>
    f6d0:	1a1d      	subs	r5, r3, r0
    f6d2:	468b      	mov	fp, r1
    f6d4:	e71f      	b.n	f516 <__aeabi_ddiv+0x2f6>
    f6d6:	4598      	cmp	r8, r3
    f6d8:	d1fa      	bne.n	f6d0 <__aeabi_ddiv+0x4b0>
    f6da:	9d03      	ldr	r5, [sp, #12]
    f6dc:	4555      	cmp	r5, sl
    f6de:	d9f2      	bls.n	f6c6 <__aeabi_ddiv+0x4a6>
    f6e0:	4643      	mov	r3, r8
    f6e2:	468b      	mov	fp, r1
    f6e4:	1a1d      	subs	r5, r3, r0
    f6e6:	e716      	b.n	f516 <__aeabi_ddiv+0x2f6>
    f6e8:	469b      	mov	fp, r3
    f6ea:	e6ca      	b.n	f482 <__aeabi_ddiv+0x262>
    f6ec:	0015      	movs	r5, r2
    f6ee:	e6e7      	b.n	f4c0 <__aeabi_ddiv+0x2a0>
    f6f0:	465a      	mov	r2, fp
    f6f2:	08c9      	lsrs	r1, r1, #3
    f6f4:	0752      	lsls	r2, r2, #29
    f6f6:	430a      	orrs	r2, r1
    f6f8:	055b      	lsls	r3, r3, #21
    f6fa:	4690      	mov	r8, r2
    f6fc:	0d5c      	lsrs	r4, r3, #21
    f6fe:	465a      	mov	r2, fp
    f700:	2301      	movs	r3, #1
    f702:	9902      	ldr	r1, [sp, #8]
    f704:	0252      	lsls	r2, r2, #9
    f706:	4019      	ands	r1, r3
    f708:	0b12      	lsrs	r2, r2, #12
    f70a:	468c      	mov	ip, r1
    f70c:	e656      	b.n	f3bc <__aeabi_ddiv+0x19c>
    f70e:	2b00      	cmp	r3, #0
    f710:	d100      	bne.n	f714 <__aeabi_ddiv+0x4f4>
    f712:	e76f      	b.n	f5f4 <__aeabi_ddiv+0x3d4>
    f714:	4446      	add	r6, r8
    f716:	1e4a      	subs	r2, r1, #1
    f718:	45b0      	cmp	r8, r6
    f71a:	d929      	bls.n	f770 <__aeabi_ddiv+0x550>
    f71c:	0011      	movs	r1, r2
    f71e:	4286      	cmp	r6, r0
    f720:	d000      	beq.n	f724 <__aeabi_ddiv+0x504>
    f722:	e765      	b.n	f5f0 <__aeabi_ddiv+0x3d0>
    f724:	9a03      	ldr	r2, [sp, #12]
    f726:	4293      	cmp	r3, r2
    f728:	d000      	beq.n	f72c <__aeabi_ddiv+0x50c>
    f72a:	e761      	b.n	f5f0 <__aeabi_ddiv+0x3d0>
    f72c:	e762      	b.n	f5f4 <__aeabi_ddiv+0x3d4>
    f72e:	2101      	movs	r1, #1
    f730:	4249      	negs	r1, r1
    f732:	2001      	movs	r0, #1
    f734:	1ac2      	subs	r2, r0, r3
    f736:	2a38      	cmp	r2, #56	; 0x38
    f738:	dd21      	ble.n	f77e <__aeabi_ddiv+0x55e>
    f73a:	9b02      	ldr	r3, [sp, #8]
    f73c:	4003      	ands	r3, r0
    f73e:	469c      	mov	ip, r3
    f740:	e638      	b.n	f3b4 <__aeabi_ddiv+0x194>
    f742:	220f      	movs	r2, #15
    f744:	400a      	ands	r2, r1
    f746:	2a04      	cmp	r2, #4
    f748:	d100      	bne.n	f74c <__aeabi_ddiv+0x52c>
    f74a:	e75b      	b.n	f604 <__aeabi_ddiv+0x3e4>
    f74c:	000a      	movs	r2, r1
    f74e:	1d11      	adds	r1, r2, #4
    f750:	4291      	cmp	r1, r2
    f752:	4192      	sbcs	r2, r2
    f754:	4252      	negs	r2, r2
    f756:	4493      	add	fp, r2
    f758:	e754      	b.n	f604 <__aeabi_ddiv+0x3e4>
    f75a:	4b47      	ldr	r3, [pc, #284]	; (f878 <__aeabi_ddiv+0x658>)
    f75c:	18e3      	adds	r3, r4, r3
    f75e:	2b00      	cmp	r3, #0
    f760:	dde5      	ble.n	f72e <__aeabi_ddiv+0x50e>
    f762:	2201      	movs	r2, #1
    f764:	4252      	negs	r2, r2
    f766:	e7f2      	b.n	f74e <__aeabi_ddiv+0x52e>
    f768:	001d      	movs	r5, r3
    f76a:	e6fa      	b.n	f562 <__aeabi_ddiv+0x342>
    f76c:	469a      	mov	sl, r3
    f76e:	e71c      	b.n	f5aa <__aeabi_ddiv+0x38a>
    f770:	42b0      	cmp	r0, r6
    f772:	d839      	bhi.n	f7e8 <__aeabi_ddiv+0x5c8>
    f774:	d06e      	beq.n	f854 <__aeabi_ddiv+0x634>
    f776:	0011      	movs	r1, r2
    f778:	e73a      	b.n	f5f0 <__aeabi_ddiv+0x3d0>
    f77a:	9302      	str	r3, [sp, #8]
    f77c:	e73a      	b.n	f5f4 <__aeabi_ddiv+0x3d4>
    f77e:	2a1f      	cmp	r2, #31
    f780:	dc3c      	bgt.n	f7fc <__aeabi_ddiv+0x5dc>
    f782:	2320      	movs	r3, #32
    f784:	1a9b      	subs	r3, r3, r2
    f786:	000c      	movs	r4, r1
    f788:	4658      	mov	r0, fp
    f78a:	4099      	lsls	r1, r3
    f78c:	4098      	lsls	r0, r3
    f78e:	1e4b      	subs	r3, r1, #1
    f790:	4199      	sbcs	r1, r3
    f792:	465b      	mov	r3, fp
    f794:	40d4      	lsrs	r4, r2
    f796:	40d3      	lsrs	r3, r2
    f798:	4320      	orrs	r0, r4
    f79a:	4308      	orrs	r0, r1
    f79c:	001a      	movs	r2, r3
    f79e:	0743      	lsls	r3, r0, #29
    f7a0:	d009      	beq.n	f7b6 <__aeabi_ddiv+0x596>
    f7a2:	230f      	movs	r3, #15
    f7a4:	4003      	ands	r3, r0
    f7a6:	2b04      	cmp	r3, #4
    f7a8:	d005      	beq.n	f7b6 <__aeabi_ddiv+0x596>
    f7aa:	0001      	movs	r1, r0
    f7ac:	1d08      	adds	r0, r1, #4
    f7ae:	4288      	cmp	r0, r1
    f7b0:	419b      	sbcs	r3, r3
    f7b2:	425b      	negs	r3, r3
    f7b4:	18d2      	adds	r2, r2, r3
    f7b6:	0213      	lsls	r3, r2, #8
    f7b8:	d53a      	bpl.n	f830 <__aeabi_ddiv+0x610>
    f7ba:	2301      	movs	r3, #1
    f7bc:	9a02      	ldr	r2, [sp, #8]
    f7be:	2401      	movs	r4, #1
    f7c0:	401a      	ands	r2, r3
    f7c2:	2300      	movs	r3, #0
    f7c4:	4694      	mov	ip, r2
    f7c6:	4698      	mov	r8, r3
    f7c8:	2200      	movs	r2, #0
    f7ca:	e5f7      	b.n	f3bc <__aeabi_ddiv+0x19c>
    f7cc:	2102      	movs	r1, #2
    f7ce:	4249      	negs	r1, r1
    f7d0:	468c      	mov	ip, r1
    f7d2:	9d03      	ldr	r5, [sp, #12]
    f7d4:	44e3      	add	fp, ip
    f7d6:	46ac      	mov	ip, r5
    f7d8:	44e2      	add	sl, ip
    f7da:	45aa      	cmp	sl, r5
    f7dc:	41ad      	sbcs	r5, r5
    f7de:	426d      	negs	r5, r5
    f7e0:	4445      	add	r5, r8
    f7e2:	18ed      	adds	r5, r5, r3
    f7e4:	1a2d      	subs	r5, r5, r0
    f7e6:	e696      	b.n	f516 <__aeabi_ddiv+0x2f6>
    f7e8:	1e8a      	subs	r2, r1, #2
    f7ea:	9903      	ldr	r1, [sp, #12]
    f7ec:	004d      	lsls	r5, r1, #1
    f7ee:	428d      	cmp	r5, r1
    f7f0:	4189      	sbcs	r1, r1
    f7f2:	4249      	negs	r1, r1
    f7f4:	4441      	add	r1, r8
    f7f6:	1876      	adds	r6, r6, r1
    f7f8:	9503      	str	r5, [sp, #12]
    f7fa:	e78f      	b.n	f71c <__aeabi_ddiv+0x4fc>
    f7fc:	201f      	movs	r0, #31
    f7fe:	4240      	negs	r0, r0
    f800:	1ac3      	subs	r3, r0, r3
    f802:	4658      	mov	r0, fp
    f804:	40d8      	lsrs	r0, r3
    f806:	0003      	movs	r3, r0
    f808:	2a20      	cmp	r2, #32
    f80a:	d028      	beq.n	f85e <__aeabi_ddiv+0x63e>
    f80c:	2040      	movs	r0, #64	; 0x40
    f80e:	465d      	mov	r5, fp
    f810:	1a82      	subs	r2, r0, r2
    f812:	4095      	lsls	r5, r2
    f814:	4329      	orrs	r1, r5
    f816:	1e4a      	subs	r2, r1, #1
    f818:	4191      	sbcs	r1, r2
    f81a:	4319      	orrs	r1, r3
    f81c:	2307      	movs	r3, #7
    f81e:	2200      	movs	r2, #0
    f820:	400b      	ands	r3, r1
    f822:	d009      	beq.n	f838 <__aeabi_ddiv+0x618>
    f824:	230f      	movs	r3, #15
    f826:	2200      	movs	r2, #0
    f828:	400b      	ands	r3, r1
    f82a:	0008      	movs	r0, r1
    f82c:	2b04      	cmp	r3, #4
    f82e:	d1bd      	bne.n	f7ac <__aeabi_ddiv+0x58c>
    f830:	0001      	movs	r1, r0
    f832:	0753      	lsls	r3, r2, #29
    f834:	0252      	lsls	r2, r2, #9
    f836:	0b12      	lsrs	r2, r2, #12
    f838:	08c9      	lsrs	r1, r1, #3
    f83a:	4319      	orrs	r1, r3
    f83c:	2301      	movs	r3, #1
    f83e:	4688      	mov	r8, r1
    f840:	9902      	ldr	r1, [sp, #8]
    f842:	2400      	movs	r4, #0
    f844:	4019      	ands	r1, r3
    f846:	468c      	mov	ip, r1
    f848:	e5b8      	b.n	f3bc <__aeabi_ddiv+0x19c>
    f84a:	4552      	cmp	r2, sl
    f84c:	d8be      	bhi.n	f7cc <__aeabi_ddiv+0x5ac>
    f84e:	468b      	mov	fp, r1
    f850:	2500      	movs	r5, #0
    f852:	e660      	b.n	f516 <__aeabi_ddiv+0x2f6>
    f854:	9d03      	ldr	r5, [sp, #12]
    f856:	429d      	cmp	r5, r3
    f858:	d3c6      	bcc.n	f7e8 <__aeabi_ddiv+0x5c8>
    f85a:	0011      	movs	r1, r2
    f85c:	e762      	b.n	f724 <__aeabi_ddiv+0x504>
    f85e:	2500      	movs	r5, #0
    f860:	e7d8      	b.n	f814 <__aeabi_ddiv+0x5f4>
    f862:	2280      	movs	r2, #128	; 0x80
    f864:	465b      	mov	r3, fp
    f866:	0312      	lsls	r2, r2, #12
    f868:	431a      	orrs	r2, r3
    f86a:	9b01      	ldr	r3, [sp, #4]
    f86c:	0312      	lsls	r2, r2, #12
    f86e:	0b12      	lsrs	r2, r2, #12
    f870:	469c      	mov	ip, r3
    f872:	4688      	mov	r8, r1
    f874:	4c03      	ldr	r4, [pc, #12]	; (f884 <__aeabi_ddiv+0x664>)
    f876:	e5a1      	b.n	f3bc <__aeabi_ddiv+0x19c>
    f878:	000003ff 	.word	0x000003ff
    f87c:	feffffff 	.word	0xfeffffff
    f880:	000007fe 	.word	0x000007fe
    f884:	000007ff 	.word	0x000007ff

0000f888 <__eqdf2>:
    f888:	b5f0      	push	{r4, r5, r6, r7, lr}
    f88a:	464f      	mov	r7, r9
    f88c:	4646      	mov	r6, r8
    f88e:	46d6      	mov	lr, sl
    f890:	005c      	lsls	r4, r3, #1
    f892:	b5c0      	push	{r6, r7, lr}
    f894:	031f      	lsls	r7, r3, #12
    f896:	0fdb      	lsrs	r3, r3, #31
    f898:	469a      	mov	sl, r3
    f89a:	4b17      	ldr	r3, [pc, #92]	; (f8f8 <__eqdf2+0x70>)
    f89c:	030e      	lsls	r6, r1, #12
    f89e:	004d      	lsls	r5, r1, #1
    f8a0:	4684      	mov	ip, r0
    f8a2:	4680      	mov	r8, r0
    f8a4:	0b36      	lsrs	r6, r6, #12
    f8a6:	0d6d      	lsrs	r5, r5, #21
    f8a8:	0fc9      	lsrs	r1, r1, #31
    f8aa:	4691      	mov	r9, r2
    f8ac:	0b3f      	lsrs	r7, r7, #12
    f8ae:	0d64      	lsrs	r4, r4, #21
    f8b0:	2001      	movs	r0, #1
    f8b2:	429d      	cmp	r5, r3
    f8b4:	d008      	beq.n	f8c8 <__eqdf2+0x40>
    f8b6:	429c      	cmp	r4, r3
    f8b8:	d001      	beq.n	f8be <__eqdf2+0x36>
    f8ba:	42a5      	cmp	r5, r4
    f8bc:	d00b      	beq.n	f8d6 <__eqdf2+0x4e>
    f8be:	bc1c      	pop	{r2, r3, r4}
    f8c0:	4690      	mov	r8, r2
    f8c2:	4699      	mov	r9, r3
    f8c4:	46a2      	mov	sl, r4
    f8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8c8:	4663      	mov	r3, ip
    f8ca:	4333      	orrs	r3, r6
    f8cc:	d1f7      	bne.n	f8be <__eqdf2+0x36>
    f8ce:	42ac      	cmp	r4, r5
    f8d0:	d1f5      	bne.n	f8be <__eqdf2+0x36>
    f8d2:	433a      	orrs	r2, r7
    f8d4:	d1f3      	bne.n	f8be <__eqdf2+0x36>
    f8d6:	2001      	movs	r0, #1
    f8d8:	42be      	cmp	r6, r7
    f8da:	d1f0      	bne.n	f8be <__eqdf2+0x36>
    f8dc:	45c8      	cmp	r8, r9
    f8de:	d1ee      	bne.n	f8be <__eqdf2+0x36>
    f8e0:	4551      	cmp	r1, sl
    f8e2:	d007      	beq.n	f8f4 <__eqdf2+0x6c>
    f8e4:	2d00      	cmp	r5, #0
    f8e6:	d1ea      	bne.n	f8be <__eqdf2+0x36>
    f8e8:	4663      	mov	r3, ip
    f8ea:	431e      	orrs	r6, r3
    f8ec:	0030      	movs	r0, r6
    f8ee:	1e46      	subs	r6, r0, #1
    f8f0:	41b0      	sbcs	r0, r6
    f8f2:	e7e4      	b.n	f8be <__eqdf2+0x36>
    f8f4:	2000      	movs	r0, #0
    f8f6:	e7e2      	b.n	f8be <__eqdf2+0x36>
    f8f8:	000007ff 	.word	0x000007ff

0000f8fc <__gedf2>:
    f8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8fe:	4645      	mov	r5, r8
    f900:	46de      	mov	lr, fp
    f902:	4657      	mov	r7, sl
    f904:	464e      	mov	r6, r9
    f906:	b5e0      	push	{r5, r6, r7, lr}
    f908:	031f      	lsls	r7, r3, #12
    f90a:	0b3d      	lsrs	r5, r7, #12
    f90c:	4f2c      	ldr	r7, [pc, #176]	; (f9c0 <__gedf2+0xc4>)
    f90e:	030e      	lsls	r6, r1, #12
    f910:	004c      	lsls	r4, r1, #1
    f912:	46ab      	mov	fp, r5
    f914:	005d      	lsls	r5, r3, #1
    f916:	4684      	mov	ip, r0
    f918:	0b36      	lsrs	r6, r6, #12
    f91a:	0d64      	lsrs	r4, r4, #21
    f91c:	0fc9      	lsrs	r1, r1, #31
    f91e:	4690      	mov	r8, r2
    f920:	0d6d      	lsrs	r5, r5, #21
    f922:	0fdb      	lsrs	r3, r3, #31
    f924:	42bc      	cmp	r4, r7
    f926:	d02a      	beq.n	f97e <__gedf2+0x82>
    f928:	4f25      	ldr	r7, [pc, #148]	; (f9c0 <__gedf2+0xc4>)
    f92a:	42bd      	cmp	r5, r7
    f92c:	d02d      	beq.n	f98a <__gedf2+0x8e>
    f92e:	2c00      	cmp	r4, #0
    f930:	d10f      	bne.n	f952 <__gedf2+0x56>
    f932:	4330      	orrs	r0, r6
    f934:	0007      	movs	r7, r0
    f936:	4681      	mov	r9, r0
    f938:	4278      	negs	r0, r7
    f93a:	4178      	adcs	r0, r7
    f93c:	b2c0      	uxtb	r0, r0
    f93e:	2d00      	cmp	r5, #0
    f940:	d117      	bne.n	f972 <__gedf2+0x76>
    f942:	465f      	mov	r7, fp
    f944:	433a      	orrs	r2, r7
    f946:	d114      	bne.n	f972 <__gedf2+0x76>
    f948:	464b      	mov	r3, r9
    f94a:	2000      	movs	r0, #0
    f94c:	2b00      	cmp	r3, #0
    f94e:	d00a      	beq.n	f966 <__gedf2+0x6a>
    f950:	e006      	b.n	f960 <__gedf2+0x64>
    f952:	2d00      	cmp	r5, #0
    f954:	d102      	bne.n	f95c <__gedf2+0x60>
    f956:	4658      	mov	r0, fp
    f958:	4302      	orrs	r2, r0
    f95a:	d001      	beq.n	f960 <__gedf2+0x64>
    f95c:	4299      	cmp	r1, r3
    f95e:	d018      	beq.n	f992 <__gedf2+0x96>
    f960:	4248      	negs	r0, r1
    f962:	2101      	movs	r1, #1
    f964:	4308      	orrs	r0, r1
    f966:	bc3c      	pop	{r2, r3, r4, r5}
    f968:	4690      	mov	r8, r2
    f96a:	4699      	mov	r9, r3
    f96c:	46a2      	mov	sl, r4
    f96e:	46ab      	mov	fp, r5
    f970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f972:	2800      	cmp	r0, #0
    f974:	d0f2      	beq.n	f95c <__gedf2+0x60>
    f976:	2001      	movs	r0, #1
    f978:	3b01      	subs	r3, #1
    f97a:	4318      	orrs	r0, r3
    f97c:	e7f3      	b.n	f966 <__gedf2+0x6a>
    f97e:	0037      	movs	r7, r6
    f980:	4307      	orrs	r7, r0
    f982:	d0d1      	beq.n	f928 <__gedf2+0x2c>
    f984:	2002      	movs	r0, #2
    f986:	4240      	negs	r0, r0
    f988:	e7ed      	b.n	f966 <__gedf2+0x6a>
    f98a:	465f      	mov	r7, fp
    f98c:	4317      	orrs	r7, r2
    f98e:	d0ce      	beq.n	f92e <__gedf2+0x32>
    f990:	e7f8      	b.n	f984 <__gedf2+0x88>
    f992:	42ac      	cmp	r4, r5
    f994:	dce4      	bgt.n	f960 <__gedf2+0x64>
    f996:	da03      	bge.n	f9a0 <__gedf2+0xa4>
    f998:	1e48      	subs	r0, r1, #1
    f99a:	2101      	movs	r1, #1
    f99c:	4308      	orrs	r0, r1
    f99e:	e7e2      	b.n	f966 <__gedf2+0x6a>
    f9a0:	455e      	cmp	r6, fp
    f9a2:	d8dd      	bhi.n	f960 <__gedf2+0x64>
    f9a4:	d006      	beq.n	f9b4 <__gedf2+0xb8>
    f9a6:	2000      	movs	r0, #0
    f9a8:	455e      	cmp	r6, fp
    f9aa:	d2dc      	bcs.n	f966 <__gedf2+0x6a>
    f9ac:	2301      	movs	r3, #1
    f9ae:	1e48      	subs	r0, r1, #1
    f9b0:	4318      	orrs	r0, r3
    f9b2:	e7d8      	b.n	f966 <__gedf2+0x6a>
    f9b4:	45c4      	cmp	ip, r8
    f9b6:	d8d3      	bhi.n	f960 <__gedf2+0x64>
    f9b8:	2000      	movs	r0, #0
    f9ba:	45c4      	cmp	ip, r8
    f9bc:	d3f6      	bcc.n	f9ac <__gedf2+0xb0>
    f9be:	e7d2      	b.n	f966 <__gedf2+0x6a>
    f9c0:	000007ff 	.word	0x000007ff

0000f9c4 <__ledf2>:
    f9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9c6:	464e      	mov	r6, r9
    f9c8:	4645      	mov	r5, r8
    f9ca:	46de      	mov	lr, fp
    f9cc:	4657      	mov	r7, sl
    f9ce:	005c      	lsls	r4, r3, #1
    f9d0:	b5e0      	push	{r5, r6, r7, lr}
    f9d2:	031f      	lsls	r7, r3, #12
    f9d4:	0fdb      	lsrs	r3, r3, #31
    f9d6:	4699      	mov	r9, r3
    f9d8:	4b2a      	ldr	r3, [pc, #168]	; (fa84 <__ledf2+0xc0>)
    f9da:	030e      	lsls	r6, r1, #12
    f9dc:	004d      	lsls	r5, r1, #1
    f9de:	0fc9      	lsrs	r1, r1, #31
    f9e0:	4684      	mov	ip, r0
    f9e2:	0b36      	lsrs	r6, r6, #12
    f9e4:	0d6d      	lsrs	r5, r5, #21
    f9e6:	468b      	mov	fp, r1
    f9e8:	4690      	mov	r8, r2
    f9ea:	0b3f      	lsrs	r7, r7, #12
    f9ec:	0d64      	lsrs	r4, r4, #21
    f9ee:	429d      	cmp	r5, r3
    f9f0:	d020      	beq.n	fa34 <__ledf2+0x70>
    f9f2:	4b24      	ldr	r3, [pc, #144]	; (fa84 <__ledf2+0xc0>)
    f9f4:	429c      	cmp	r4, r3
    f9f6:	d022      	beq.n	fa3e <__ledf2+0x7a>
    f9f8:	2d00      	cmp	r5, #0
    f9fa:	d112      	bne.n	fa22 <__ledf2+0x5e>
    f9fc:	4330      	orrs	r0, r6
    f9fe:	4243      	negs	r3, r0
    fa00:	4143      	adcs	r3, r0
    fa02:	b2db      	uxtb	r3, r3
    fa04:	2c00      	cmp	r4, #0
    fa06:	d01f      	beq.n	fa48 <__ledf2+0x84>
    fa08:	2b00      	cmp	r3, #0
    fa0a:	d00c      	beq.n	fa26 <__ledf2+0x62>
    fa0c:	464b      	mov	r3, r9
    fa0e:	2001      	movs	r0, #1
    fa10:	3b01      	subs	r3, #1
    fa12:	4303      	orrs	r3, r0
    fa14:	0018      	movs	r0, r3
    fa16:	bc3c      	pop	{r2, r3, r4, r5}
    fa18:	4690      	mov	r8, r2
    fa1a:	4699      	mov	r9, r3
    fa1c:	46a2      	mov	sl, r4
    fa1e:	46ab      	mov	fp, r5
    fa20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa22:	2c00      	cmp	r4, #0
    fa24:	d016      	beq.n	fa54 <__ledf2+0x90>
    fa26:	45cb      	cmp	fp, r9
    fa28:	d017      	beq.n	fa5a <__ledf2+0x96>
    fa2a:	465b      	mov	r3, fp
    fa2c:	4259      	negs	r1, r3
    fa2e:	2301      	movs	r3, #1
    fa30:	430b      	orrs	r3, r1
    fa32:	e7ef      	b.n	fa14 <__ledf2+0x50>
    fa34:	0031      	movs	r1, r6
    fa36:	2302      	movs	r3, #2
    fa38:	4301      	orrs	r1, r0
    fa3a:	d1eb      	bne.n	fa14 <__ledf2+0x50>
    fa3c:	e7d9      	b.n	f9f2 <__ledf2+0x2e>
    fa3e:	0039      	movs	r1, r7
    fa40:	2302      	movs	r3, #2
    fa42:	4311      	orrs	r1, r2
    fa44:	d1e6      	bne.n	fa14 <__ledf2+0x50>
    fa46:	e7d7      	b.n	f9f8 <__ledf2+0x34>
    fa48:	433a      	orrs	r2, r7
    fa4a:	d1dd      	bne.n	fa08 <__ledf2+0x44>
    fa4c:	2300      	movs	r3, #0
    fa4e:	2800      	cmp	r0, #0
    fa50:	d0e0      	beq.n	fa14 <__ledf2+0x50>
    fa52:	e7ea      	b.n	fa2a <__ledf2+0x66>
    fa54:	433a      	orrs	r2, r7
    fa56:	d1e6      	bne.n	fa26 <__ledf2+0x62>
    fa58:	e7e7      	b.n	fa2a <__ledf2+0x66>
    fa5a:	42a5      	cmp	r5, r4
    fa5c:	dce5      	bgt.n	fa2a <__ledf2+0x66>
    fa5e:	db05      	blt.n	fa6c <__ledf2+0xa8>
    fa60:	42be      	cmp	r6, r7
    fa62:	d8e2      	bhi.n	fa2a <__ledf2+0x66>
    fa64:	d007      	beq.n	fa76 <__ledf2+0xb2>
    fa66:	2300      	movs	r3, #0
    fa68:	42be      	cmp	r6, r7
    fa6a:	d2d3      	bcs.n	fa14 <__ledf2+0x50>
    fa6c:	4659      	mov	r1, fp
    fa6e:	2301      	movs	r3, #1
    fa70:	3901      	subs	r1, #1
    fa72:	430b      	orrs	r3, r1
    fa74:	e7ce      	b.n	fa14 <__ledf2+0x50>
    fa76:	45c4      	cmp	ip, r8
    fa78:	d8d7      	bhi.n	fa2a <__ledf2+0x66>
    fa7a:	2300      	movs	r3, #0
    fa7c:	45c4      	cmp	ip, r8
    fa7e:	d3f5      	bcc.n	fa6c <__ledf2+0xa8>
    fa80:	e7c8      	b.n	fa14 <__ledf2+0x50>
    fa82:	46c0      	nop			; (mov r8, r8)
    fa84:	000007ff 	.word	0x000007ff

0000fa88 <__aeabi_dmul>:
    fa88:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa8a:	4657      	mov	r7, sl
    fa8c:	4645      	mov	r5, r8
    fa8e:	46de      	mov	lr, fp
    fa90:	464e      	mov	r6, r9
    fa92:	b5e0      	push	{r5, r6, r7, lr}
    fa94:	030c      	lsls	r4, r1, #12
    fa96:	4698      	mov	r8, r3
    fa98:	004e      	lsls	r6, r1, #1
    fa9a:	0b23      	lsrs	r3, r4, #12
    fa9c:	b087      	sub	sp, #28
    fa9e:	0007      	movs	r7, r0
    faa0:	4692      	mov	sl, r2
    faa2:	469b      	mov	fp, r3
    faa4:	0d76      	lsrs	r6, r6, #21
    faa6:	0fcd      	lsrs	r5, r1, #31
    faa8:	2e00      	cmp	r6, #0
    faaa:	d06b      	beq.n	fb84 <__aeabi_dmul+0xfc>
    faac:	4b6d      	ldr	r3, [pc, #436]	; (fc64 <__aeabi_dmul+0x1dc>)
    faae:	429e      	cmp	r6, r3
    fab0:	d035      	beq.n	fb1e <__aeabi_dmul+0x96>
    fab2:	2480      	movs	r4, #128	; 0x80
    fab4:	465b      	mov	r3, fp
    fab6:	0f42      	lsrs	r2, r0, #29
    fab8:	0424      	lsls	r4, r4, #16
    faba:	00db      	lsls	r3, r3, #3
    fabc:	4314      	orrs	r4, r2
    fabe:	431c      	orrs	r4, r3
    fac0:	00c3      	lsls	r3, r0, #3
    fac2:	4699      	mov	r9, r3
    fac4:	4b68      	ldr	r3, [pc, #416]	; (fc68 <__aeabi_dmul+0x1e0>)
    fac6:	46a3      	mov	fp, r4
    fac8:	469c      	mov	ip, r3
    faca:	2300      	movs	r3, #0
    facc:	2700      	movs	r7, #0
    face:	4466      	add	r6, ip
    fad0:	9302      	str	r3, [sp, #8]
    fad2:	4643      	mov	r3, r8
    fad4:	031c      	lsls	r4, r3, #12
    fad6:	005a      	lsls	r2, r3, #1
    fad8:	0fdb      	lsrs	r3, r3, #31
    fada:	4650      	mov	r0, sl
    fadc:	0b24      	lsrs	r4, r4, #12
    fade:	0d52      	lsrs	r2, r2, #21
    fae0:	4698      	mov	r8, r3
    fae2:	d100      	bne.n	fae6 <__aeabi_dmul+0x5e>
    fae4:	e076      	b.n	fbd4 <__aeabi_dmul+0x14c>
    fae6:	4b5f      	ldr	r3, [pc, #380]	; (fc64 <__aeabi_dmul+0x1dc>)
    fae8:	429a      	cmp	r2, r3
    faea:	d06d      	beq.n	fbc8 <__aeabi_dmul+0x140>
    faec:	2380      	movs	r3, #128	; 0x80
    faee:	0f41      	lsrs	r1, r0, #29
    faf0:	041b      	lsls	r3, r3, #16
    faf2:	430b      	orrs	r3, r1
    faf4:	495c      	ldr	r1, [pc, #368]	; (fc68 <__aeabi_dmul+0x1e0>)
    faf6:	00e4      	lsls	r4, r4, #3
    faf8:	468c      	mov	ip, r1
    fafa:	431c      	orrs	r4, r3
    fafc:	00c3      	lsls	r3, r0, #3
    fafe:	2000      	movs	r0, #0
    fb00:	4462      	add	r2, ip
    fb02:	4641      	mov	r1, r8
    fb04:	18b6      	adds	r6, r6, r2
    fb06:	4069      	eors	r1, r5
    fb08:	1c72      	adds	r2, r6, #1
    fb0a:	9101      	str	r1, [sp, #4]
    fb0c:	4694      	mov	ip, r2
    fb0e:	4307      	orrs	r7, r0
    fb10:	2f0f      	cmp	r7, #15
    fb12:	d900      	bls.n	fb16 <__aeabi_dmul+0x8e>
    fb14:	e0b0      	b.n	fc78 <__aeabi_dmul+0x1f0>
    fb16:	4a55      	ldr	r2, [pc, #340]	; (fc6c <__aeabi_dmul+0x1e4>)
    fb18:	00bf      	lsls	r7, r7, #2
    fb1a:	59d2      	ldr	r2, [r2, r7]
    fb1c:	4697      	mov	pc, r2
    fb1e:	465b      	mov	r3, fp
    fb20:	4303      	orrs	r3, r0
    fb22:	4699      	mov	r9, r3
    fb24:	d000      	beq.n	fb28 <__aeabi_dmul+0xa0>
    fb26:	e087      	b.n	fc38 <__aeabi_dmul+0x1b0>
    fb28:	2300      	movs	r3, #0
    fb2a:	469b      	mov	fp, r3
    fb2c:	3302      	adds	r3, #2
    fb2e:	2708      	movs	r7, #8
    fb30:	9302      	str	r3, [sp, #8]
    fb32:	e7ce      	b.n	fad2 <__aeabi_dmul+0x4a>
    fb34:	4642      	mov	r2, r8
    fb36:	9201      	str	r2, [sp, #4]
    fb38:	2802      	cmp	r0, #2
    fb3a:	d067      	beq.n	fc0c <__aeabi_dmul+0x184>
    fb3c:	2803      	cmp	r0, #3
    fb3e:	d100      	bne.n	fb42 <__aeabi_dmul+0xba>
    fb40:	e20e      	b.n	ff60 <__aeabi_dmul+0x4d8>
    fb42:	2801      	cmp	r0, #1
    fb44:	d000      	beq.n	fb48 <__aeabi_dmul+0xc0>
    fb46:	e162      	b.n	fe0e <__aeabi_dmul+0x386>
    fb48:	2300      	movs	r3, #0
    fb4a:	2400      	movs	r4, #0
    fb4c:	2200      	movs	r2, #0
    fb4e:	4699      	mov	r9, r3
    fb50:	9901      	ldr	r1, [sp, #4]
    fb52:	4001      	ands	r1, r0
    fb54:	b2cd      	uxtb	r5, r1
    fb56:	2100      	movs	r1, #0
    fb58:	0312      	lsls	r2, r2, #12
    fb5a:	0d0b      	lsrs	r3, r1, #20
    fb5c:	0b12      	lsrs	r2, r2, #12
    fb5e:	051b      	lsls	r3, r3, #20
    fb60:	4313      	orrs	r3, r2
    fb62:	4a43      	ldr	r2, [pc, #268]	; (fc70 <__aeabi_dmul+0x1e8>)
    fb64:	0524      	lsls	r4, r4, #20
    fb66:	4013      	ands	r3, r2
    fb68:	431c      	orrs	r4, r3
    fb6a:	0064      	lsls	r4, r4, #1
    fb6c:	07ed      	lsls	r5, r5, #31
    fb6e:	0864      	lsrs	r4, r4, #1
    fb70:	432c      	orrs	r4, r5
    fb72:	4648      	mov	r0, r9
    fb74:	0021      	movs	r1, r4
    fb76:	b007      	add	sp, #28
    fb78:	bc3c      	pop	{r2, r3, r4, r5}
    fb7a:	4690      	mov	r8, r2
    fb7c:	4699      	mov	r9, r3
    fb7e:	46a2      	mov	sl, r4
    fb80:	46ab      	mov	fp, r5
    fb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb84:	4303      	orrs	r3, r0
    fb86:	4699      	mov	r9, r3
    fb88:	d04f      	beq.n	fc2a <__aeabi_dmul+0x1a2>
    fb8a:	465b      	mov	r3, fp
    fb8c:	2b00      	cmp	r3, #0
    fb8e:	d100      	bne.n	fb92 <__aeabi_dmul+0x10a>
    fb90:	e189      	b.n	fea6 <__aeabi_dmul+0x41e>
    fb92:	4658      	mov	r0, fp
    fb94:	f000 fd9a 	bl	106cc <__clzsi2>
    fb98:	0003      	movs	r3, r0
    fb9a:	3b0b      	subs	r3, #11
    fb9c:	2b1c      	cmp	r3, #28
    fb9e:	dd00      	ble.n	fba2 <__aeabi_dmul+0x11a>
    fba0:	e17a      	b.n	fe98 <__aeabi_dmul+0x410>
    fba2:	221d      	movs	r2, #29
    fba4:	1ad3      	subs	r3, r2, r3
    fba6:	003a      	movs	r2, r7
    fba8:	0001      	movs	r1, r0
    fbaa:	465c      	mov	r4, fp
    fbac:	40da      	lsrs	r2, r3
    fbae:	3908      	subs	r1, #8
    fbb0:	408c      	lsls	r4, r1
    fbb2:	0013      	movs	r3, r2
    fbb4:	408f      	lsls	r7, r1
    fbb6:	4323      	orrs	r3, r4
    fbb8:	469b      	mov	fp, r3
    fbba:	46b9      	mov	r9, r7
    fbbc:	2300      	movs	r3, #0
    fbbe:	4e2d      	ldr	r6, [pc, #180]	; (fc74 <__aeabi_dmul+0x1ec>)
    fbc0:	2700      	movs	r7, #0
    fbc2:	1a36      	subs	r6, r6, r0
    fbc4:	9302      	str	r3, [sp, #8]
    fbc6:	e784      	b.n	fad2 <__aeabi_dmul+0x4a>
    fbc8:	4653      	mov	r3, sl
    fbca:	4323      	orrs	r3, r4
    fbcc:	d12a      	bne.n	fc24 <__aeabi_dmul+0x19c>
    fbce:	2400      	movs	r4, #0
    fbd0:	2002      	movs	r0, #2
    fbd2:	e796      	b.n	fb02 <__aeabi_dmul+0x7a>
    fbd4:	4653      	mov	r3, sl
    fbd6:	4323      	orrs	r3, r4
    fbd8:	d020      	beq.n	fc1c <__aeabi_dmul+0x194>
    fbda:	2c00      	cmp	r4, #0
    fbdc:	d100      	bne.n	fbe0 <__aeabi_dmul+0x158>
    fbde:	e157      	b.n	fe90 <__aeabi_dmul+0x408>
    fbe0:	0020      	movs	r0, r4
    fbe2:	f000 fd73 	bl	106cc <__clzsi2>
    fbe6:	0003      	movs	r3, r0
    fbe8:	3b0b      	subs	r3, #11
    fbea:	2b1c      	cmp	r3, #28
    fbec:	dd00      	ble.n	fbf0 <__aeabi_dmul+0x168>
    fbee:	e149      	b.n	fe84 <__aeabi_dmul+0x3fc>
    fbf0:	211d      	movs	r1, #29
    fbf2:	1acb      	subs	r3, r1, r3
    fbf4:	4651      	mov	r1, sl
    fbf6:	0002      	movs	r2, r0
    fbf8:	40d9      	lsrs	r1, r3
    fbfa:	4653      	mov	r3, sl
    fbfc:	3a08      	subs	r2, #8
    fbfe:	4094      	lsls	r4, r2
    fc00:	4093      	lsls	r3, r2
    fc02:	430c      	orrs	r4, r1
    fc04:	4a1b      	ldr	r2, [pc, #108]	; (fc74 <__aeabi_dmul+0x1ec>)
    fc06:	1a12      	subs	r2, r2, r0
    fc08:	2000      	movs	r0, #0
    fc0a:	e77a      	b.n	fb02 <__aeabi_dmul+0x7a>
    fc0c:	2501      	movs	r5, #1
    fc0e:	9b01      	ldr	r3, [sp, #4]
    fc10:	4c14      	ldr	r4, [pc, #80]	; (fc64 <__aeabi_dmul+0x1dc>)
    fc12:	401d      	ands	r5, r3
    fc14:	2300      	movs	r3, #0
    fc16:	2200      	movs	r2, #0
    fc18:	4699      	mov	r9, r3
    fc1a:	e79c      	b.n	fb56 <__aeabi_dmul+0xce>
    fc1c:	2400      	movs	r4, #0
    fc1e:	2200      	movs	r2, #0
    fc20:	2001      	movs	r0, #1
    fc22:	e76e      	b.n	fb02 <__aeabi_dmul+0x7a>
    fc24:	4653      	mov	r3, sl
    fc26:	2003      	movs	r0, #3
    fc28:	e76b      	b.n	fb02 <__aeabi_dmul+0x7a>
    fc2a:	2300      	movs	r3, #0
    fc2c:	469b      	mov	fp, r3
    fc2e:	3301      	adds	r3, #1
    fc30:	2704      	movs	r7, #4
    fc32:	2600      	movs	r6, #0
    fc34:	9302      	str	r3, [sp, #8]
    fc36:	e74c      	b.n	fad2 <__aeabi_dmul+0x4a>
    fc38:	2303      	movs	r3, #3
    fc3a:	4681      	mov	r9, r0
    fc3c:	270c      	movs	r7, #12
    fc3e:	9302      	str	r3, [sp, #8]
    fc40:	e747      	b.n	fad2 <__aeabi_dmul+0x4a>
    fc42:	2280      	movs	r2, #128	; 0x80
    fc44:	2300      	movs	r3, #0
    fc46:	2500      	movs	r5, #0
    fc48:	0312      	lsls	r2, r2, #12
    fc4a:	4699      	mov	r9, r3
    fc4c:	4c05      	ldr	r4, [pc, #20]	; (fc64 <__aeabi_dmul+0x1dc>)
    fc4e:	e782      	b.n	fb56 <__aeabi_dmul+0xce>
    fc50:	465c      	mov	r4, fp
    fc52:	464b      	mov	r3, r9
    fc54:	9802      	ldr	r0, [sp, #8]
    fc56:	e76f      	b.n	fb38 <__aeabi_dmul+0xb0>
    fc58:	465c      	mov	r4, fp
    fc5a:	464b      	mov	r3, r9
    fc5c:	9501      	str	r5, [sp, #4]
    fc5e:	9802      	ldr	r0, [sp, #8]
    fc60:	e76a      	b.n	fb38 <__aeabi_dmul+0xb0>
    fc62:	46c0      	nop			; (mov r8, r8)
    fc64:	000007ff 	.word	0x000007ff
    fc68:	fffffc01 	.word	0xfffffc01
    fc6c:	00014104 	.word	0x00014104
    fc70:	800fffff 	.word	0x800fffff
    fc74:	fffffc0d 	.word	0xfffffc0d
    fc78:	464a      	mov	r2, r9
    fc7a:	4649      	mov	r1, r9
    fc7c:	0c17      	lsrs	r7, r2, #16
    fc7e:	0c1a      	lsrs	r2, r3, #16
    fc80:	041b      	lsls	r3, r3, #16
    fc82:	0c1b      	lsrs	r3, r3, #16
    fc84:	0408      	lsls	r0, r1, #16
    fc86:	0019      	movs	r1, r3
    fc88:	0c00      	lsrs	r0, r0, #16
    fc8a:	4341      	muls	r1, r0
    fc8c:	0015      	movs	r5, r2
    fc8e:	4688      	mov	r8, r1
    fc90:	0019      	movs	r1, r3
    fc92:	437d      	muls	r5, r7
    fc94:	4379      	muls	r1, r7
    fc96:	9503      	str	r5, [sp, #12]
    fc98:	4689      	mov	r9, r1
    fc9a:	0029      	movs	r1, r5
    fc9c:	0015      	movs	r5, r2
    fc9e:	4345      	muls	r5, r0
    fca0:	444d      	add	r5, r9
    fca2:	9502      	str	r5, [sp, #8]
    fca4:	4645      	mov	r5, r8
    fca6:	0c2d      	lsrs	r5, r5, #16
    fca8:	46aa      	mov	sl, r5
    fcaa:	9d02      	ldr	r5, [sp, #8]
    fcac:	4455      	add	r5, sl
    fcae:	45a9      	cmp	r9, r5
    fcb0:	d906      	bls.n	fcc0 <__aeabi_dmul+0x238>
    fcb2:	468a      	mov	sl, r1
    fcb4:	2180      	movs	r1, #128	; 0x80
    fcb6:	0249      	lsls	r1, r1, #9
    fcb8:	4689      	mov	r9, r1
    fcba:	44ca      	add	sl, r9
    fcbc:	4651      	mov	r1, sl
    fcbe:	9103      	str	r1, [sp, #12]
    fcc0:	0c29      	lsrs	r1, r5, #16
    fcc2:	9104      	str	r1, [sp, #16]
    fcc4:	4641      	mov	r1, r8
    fcc6:	0409      	lsls	r1, r1, #16
    fcc8:	042d      	lsls	r5, r5, #16
    fcca:	0c09      	lsrs	r1, r1, #16
    fccc:	4688      	mov	r8, r1
    fcce:	0029      	movs	r1, r5
    fcd0:	0c25      	lsrs	r5, r4, #16
    fcd2:	0424      	lsls	r4, r4, #16
    fcd4:	4441      	add	r1, r8
    fcd6:	0c24      	lsrs	r4, r4, #16
    fcd8:	9105      	str	r1, [sp, #20]
    fcda:	0021      	movs	r1, r4
    fcdc:	4341      	muls	r1, r0
    fcde:	4688      	mov	r8, r1
    fce0:	0021      	movs	r1, r4
    fce2:	4379      	muls	r1, r7
    fce4:	468a      	mov	sl, r1
    fce6:	4368      	muls	r0, r5
    fce8:	4641      	mov	r1, r8
    fcea:	4450      	add	r0, sl
    fcec:	4681      	mov	r9, r0
    fcee:	0c08      	lsrs	r0, r1, #16
    fcf0:	4448      	add	r0, r9
    fcf2:	436f      	muls	r7, r5
    fcf4:	4582      	cmp	sl, r0
    fcf6:	d903      	bls.n	fd00 <__aeabi_dmul+0x278>
    fcf8:	2180      	movs	r1, #128	; 0x80
    fcfa:	0249      	lsls	r1, r1, #9
    fcfc:	4689      	mov	r9, r1
    fcfe:	444f      	add	r7, r9
    fd00:	0c01      	lsrs	r1, r0, #16
    fd02:	4689      	mov	r9, r1
    fd04:	0039      	movs	r1, r7
    fd06:	4449      	add	r1, r9
    fd08:	9102      	str	r1, [sp, #8]
    fd0a:	4641      	mov	r1, r8
    fd0c:	040f      	lsls	r7, r1, #16
    fd0e:	9904      	ldr	r1, [sp, #16]
    fd10:	0c3f      	lsrs	r7, r7, #16
    fd12:	4688      	mov	r8, r1
    fd14:	0400      	lsls	r0, r0, #16
    fd16:	19c0      	adds	r0, r0, r7
    fd18:	4480      	add	r8, r0
    fd1a:	4641      	mov	r1, r8
    fd1c:	9104      	str	r1, [sp, #16]
    fd1e:	4659      	mov	r1, fp
    fd20:	0c0f      	lsrs	r7, r1, #16
    fd22:	0409      	lsls	r1, r1, #16
    fd24:	0c09      	lsrs	r1, r1, #16
    fd26:	4688      	mov	r8, r1
    fd28:	4359      	muls	r1, r3
    fd2a:	468a      	mov	sl, r1
    fd2c:	0039      	movs	r1, r7
    fd2e:	4351      	muls	r1, r2
    fd30:	4689      	mov	r9, r1
    fd32:	4641      	mov	r1, r8
    fd34:	434a      	muls	r2, r1
    fd36:	4651      	mov	r1, sl
    fd38:	0c09      	lsrs	r1, r1, #16
    fd3a:	468b      	mov	fp, r1
    fd3c:	437b      	muls	r3, r7
    fd3e:	18d2      	adds	r2, r2, r3
    fd40:	445a      	add	r2, fp
    fd42:	4293      	cmp	r3, r2
    fd44:	d903      	bls.n	fd4e <__aeabi_dmul+0x2c6>
    fd46:	2380      	movs	r3, #128	; 0x80
    fd48:	025b      	lsls	r3, r3, #9
    fd4a:	469b      	mov	fp, r3
    fd4c:	44d9      	add	r9, fp
    fd4e:	4651      	mov	r1, sl
    fd50:	0409      	lsls	r1, r1, #16
    fd52:	0c09      	lsrs	r1, r1, #16
    fd54:	468a      	mov	sl, r1
    fd56:	4641      	mov	r1, r8
    fd58:	4361      	muls	r1, r4
    fd5a:	437c      	muls	r4, r7
    fd5c:	0c13      	lsrs	r3, r2, #16
    fd5e:	0412      	lsls	r2, r2, #16
    fd60:	444b      	add	r3, r9
    fd62:	4452      	add	r2, sl
    fd64:	46a1      	mov	r9, r4
    fd66:	468a      	mov	sl, r1
    fd68:	003c      	movs	r4, r7
    fd6a:	4641      	mov	r1, r8
    fd6c:	436c      	muls	r4, r5
    fd6e:	434d      	muls	r5, r1
    fd70:	4651      	mov	r1, sl
    fd72:	444d      	add	r5, r9
    fd74:	0c0f      	lsrs	r7, r1, #16
    fd76:	197d      	adds	r5, r7, r5
    fd78:	45a9      	cmp	r9, r5
    fd7a:	d903      	bls.n	fd84 <__aeabi_dmul+0x2fc>
    fd7c:	2180      	movs	r1, #128	; 0x80
    fd7e:	0249      	lsls	r1, r1, #9
    fd80:	4688      	mov	r8, r1
    fd82:	4444      	add	r4, r8
    fd84:	9f04      	ldr	r7, [sp, #16]
    fd86:	9903      	ldr	r1, [sp, #12]
    fd88:	46b8      	mov	r8, r7
    fd8a:	4441      	add	r1, r8
    fd8c:	468b      	mov	fp, r1
    fd8e:	4583      	cmp	fp, r0
    fd90:	4180      	sbcs	r0, r0
    fd92:	4241      	negs	r1, r0
    fd94:	4688      	mov	r8, r1
    fd96:	4651      	mov	r1, sl
    fd98:	0408      	lsls	r0, r1, #16
    fd9a:	042f      	lsls	r7, r5, #16
    fd9c:	0c00      	lsrs	r0, r0, #16
    fd9e:	183f      	adds	r7, r7, r0
    fda0:	4658      	mov	r0, fp
    fda2:	9902      	ldr	r1, [sp, #8]
    fda4:	1810      	adds	r0, r2, r0
    fda6:	4689      	mov	r9, r1
    fda8:	4290      	cmp	r0, r2
    fdaa:	4192      	sbcs	r2, r2
    fdac:	444f      	add	r7, r9
    fdae:	46ba      	mov	sl, r7
    fdb0:	4252      	negs	r2, r2
    fdb2:	4699      	mov	r9, r3
    fdb4:	4693      	mov	fp, r2
    fdb6:	44c2      	add	sl, r8
    fdb8:	44d1      	add	r9, sl
    fdba:	44cb      	add	fp, r9
    fdbc:	428f      	cmp	r7, r1
    fdbe:	41bf      	sbcs	r7, r7
    fdc0:	45c2      	cmp	sl, r8
    fdc2:	4189      	sbcs	r1, r1
    fdc4:	4599      	cmp	r9, r3
    fdc6:	419b      	sbcs	r3, r3
    fdc8:	4593      	cmp	fp, r2
    fdca:	4192      	sbcs	r2, r2
    fdcc:	427f      	negs	r7, r7
    fdce:	4249      	negs	r1, r1
    fdd0:	0c2d      	lsrs	r5, r5, #16
    fdd2:	4252      	negs	r2, r2
    fdd4:	430f      	orrs	r7, r1
    fdd6:	425b      	negs	r3, r3
    fdd8:	4313      	orrs	r3, r2
    fdda:	197f      	adds	r7, r7, r5
    fddc:	18ff      	adds	r7, r7, r3
    fdde:	465b      	mov	r3, fp
    fde0:	193c      	adds	r4, r7, r4
    fde2:	0ddb      	lsrs	r3, r3, #23
    fde4:	9a05      	ldr	r2, [sp, #20]
    fde6:	0264      	lsls	r4, r4, #9
    fde8:	431c      	orrs	r4, r3
    fdea:	0243      	lsls	r3, r0, #9
    fdec:	4313      	orrs	r3, r2
    fdee:	1e5d      	subs	r5, r3, #1
    fdf0:	41ab      	sbcs	r3, r5
    fdf2:	465a      	mov	r2, fp
    fdf4:	0dc0      	lsrs	r0, r0, #23
    fdf6:	4303      	orrs	r3, r0
    fdf8:	0252      	lsls	r2, r2, #9
    fdfa:	4313      	orrs	r3, r2
    fdfc:	01e2      	lsls	r2, r4, #7
    fdfe:	d556      	bpl.n	feae <__aeabi_dmul+0x426>
    fe00:	2001      	movs	r0, #1
    fe02:	085a      	lsrs	r2, r3, #1
    fe04:	4003      	ands	r3, r0
    fe06:	4313      	orrs	r3, r2
    fe08:	07e2      	lsls	r2, r4, #31
    fe0a:	4313      	orrs	r3, r2
    fe0c:	0864      	lsrs	r4, r4, #1
    fe0e:	485a      	ldr	r0, [pc, #360]	; (ff78 <__aeabi_dmul+0x4f0>)
    fe10:	4460      	add	r0, ip
    fe12:	2800      	cmp	r0, #0
    fe14:	dd4d      	ble.n	feb2 <__aeabi_dmul+0x42a>
    fe16:	075a      	lsls	r2, r3, #29
    fe18:	d009      	beq.n	fe2e <__aeabi_dmul+0x3a6>
    fe1a:	220f      	movs	r2, #15
    fe1c:	401a      	ands	r2, r3
    fe1e:	2a04      	cmp	r2, #4
    fe20:	d005      	beq.n	fe2e <__aeabi_dmul+0x3a6>
    fe22:	1d1a      	adds	r2, r3, #4
    fe24:	429a      	cmp	r2, r3
    fe26:	419b      	sbcs	r3, r3
    fe28:	425b      	negs	r3, r3
    fe2a:	18e4      	adds	r4, r4, r3
    fe2c:	0013      	movs	r3, r2
    fe2e:	01e2      	lsls	r2, r4, #7
    fe30:	d504      	bpl.n	fe3c <__aeabi_dmul+0x3b4>
    fe32:	2080      	movs	r0, #128	; 0x80
    fe34:	4a51      	ldr	r2, [pc, #324]	; (ff7c <__aeabi_dmul+0x4f4>)
    fe36:	00c0      	lsls	r0, r0, #3
    fe38:	4014      	ands	r4, r2
    fe3a:	4460      	add	r0, ip
    fe3c:	4a50      	ldr	r2, [pc, #320]	; (ff80 <__aeabi_dmul+0x4f8>)
    fe3e:	4290      	cmp	r0, r2
    fe40:	dd00      	ble.n	fe44 <__aeabi_dmul+0x3bc>
    fe42:	e6e3      	b.n	fc0c <__aeabi_dmul+0x184>
    fe44:	2501      	movs	r5, #1
    fe46:	08db      	lsrs	r3, r3, #3
    fe48:	0762      	lsls	r2, r4, #29
    fe4a:	431a      	orrs	r2, r3
    fe4c:	0264      	lsls	r4, r4, #9
    fe4e:	9b01      	ldr	r3, [sp, #4]
    fe50:	4691      	mov	r9, r2
    fe52:	0b22      	lsrs	r2, r4, #12
    fe54:	0544      	lsls	r4, r0, #21
    fe56:	0d64      	lsrs	r4, r4, #21
    fe58:	401d      	ands	r5, r3
    fe5a:	e67c      	b.n	fb56 <__aeabi_dmul+0xce>
    fe5c:	2280      	movs	r2, #128	; 0x80
    fe5e:	4659      	mov	r1, fp
    fe60:	0312      	lsls	r2, r2, #12
    fe62:	4211      	tst	r1, r2
    fe64:	d008      	beq.n	fe78 <__aeabi_dmul+0x3f0>
    fe66:	4214      	tst	r4, r2
    fe68:	d106      	bne.n	fe78 <__aeabi_dmul+0x3f0>
    fe6a:	4322      	orrs	r2, r4
    fe6c:	0312      	lsls	r2, r2, #12
    fe6e:	0b12      	lsrs	r2, r2, #12
    fe70:	4645      	mov	r5, r8
    fe72:	4699      	mov	r9, r3
    fe74:	4c43      	ldr	r4, [pc, #268]	; (ff84 <__aeabi_dmul+0x4fc>)
    fe76:	e66e      	b.n	fb56 <__aeabi_dmul+0xce>
    fe78:	465b      	mov	r3, fp
    fe7a:	431a      	orrs	r2, r3
    fe7c:	0312      	lsls	r2, r2, #12
    fe7e:	0b12      	lsrs	r2, r2, #12
    fe80:	4c40      	ldr	r4, [pc, #256]	; (ff84 <__aeabi_dmul+0x4fc>)
    fe82:	e668      	b.n	fb56 <__aeabi_dmul+0xce>
    fe84:	0003      	movs	r3, r0
    fe86:	4654      	mov	r4, sl
    fe88:	3b28      	subs	r3, #40	; 0x28
    fe8a:	409c      	lsls	r4, r3
    fe8c:	2300      	movs	r3, #0
    fe8e:	e6b9      	b.n	fc04 <__aeabi_dmul+0x17c>
    fe90:	f000 fc1c 	bl	106cc <__clzsi2>
    fe94:	3020      	adds	r0, #32
    fe96:	e6a6      	b.n	fbe6 <__aeabi_dmul+0x15e>
    fe98:	0003      	movs	r3, r0
    fe9a:	3b28      	subs	r3, #40	; 0x28
    fe9c:	409f      	lsls	r7, r3
    fe9e:	2300      	movs	r3, #0
    fea0:	46bb      	mov	fp, r7
    fea2:	4699      	mov	r9, r3
    fea4:	e68a      	b.n	fbbc <__aeabi_dmul+0x134>
    fea6:	f000 fc11 	bl	106cc <__clzsi2>
    feaa:	3020      	adds	r0, #32
    feac:	e674      	b.n	fb98 <__aeabi_dmul+0x110>
    feae:	46b4      	mov	ip, r6
    feb0:	e7ad      	b.n	fe0e <__aeabi_dmul+0x386>
    feb2:	2501      	movs	r5, #1
    feb4:	1a2a      	subs	r2, r5, r0
    feb6:	2a38      	cmp	r2, #56	; 0x38
    feb8:	dd06      	ble.n	fec8 <__aeabi_dmul+0x440>
    feba:	9b01      	ldr	r3, [sp, #4]
    febc:	2400      	movs	r4, #0
    febe:	401d      	ands	r5, r3
    fec0:	2300      	movs	r3, #0
    fec2:	2200      	movs	r2, #0
    fec4:	4699      	mov	r9, r3
    fec6:	e646      	b.n	fb56 <__aeabi_dmul+0xce>
    fec8:	2a1f      	cmp	r2, #31
    feca:	dc21      	bgt.n	ff10 <__aeabi_dmul+0x488>
    fecc:	2520      	movs	r5, #32
    fece:	0020      	movs	r0, r4
    fed0:	1aad      	subs	r5, r5, r2
    fed2:	001e      	movs	r6, r3
    fed4:	40ab      	lsls	r3, r5
    fed6:	40a8      	lsls	r0, r5
    fed8:	40d6      	lsrs	r6, r2
    feda:	1e5d      	subs	r5, r3, #1
    fedc:	41ab      	sbcs	r3, r5
    fede:	4330      	orrs	r0, r6
    fee0:	4318      	orrs	r0, r3
    fee2:	40d4      	lsrs	r4, r2
    fee4:	0743      	lsls	r3, r0, #29
    fee6:	d009      	beq.n	fefc <__aeabi_dmul+0x474>
    fee8:	230f      	movs	r3, #15
    feea:	4003      	ands	r3, r0
    feec:	2b04      	cmp	r3, #4
    feee:	d005      	beq.n	fefc <__aeabi_dmul+0x474>
    fef0:	0003      	movs	r3, r0
    fef2:	1d18      	adds	r0, r3, #4
    fef4:	4298      	cmp	r0, r3
    fef6:	419b      	sbcs	r3, r3
    fef8:	425b      	negs	r3, r3
    fefa:	18e4      	adds	r4, r4, r3
    fefc:	0223      	lsls	r3, r4, #8
    fefe:	d521      	bpl.n	ff44 <__aeabi_dmul+0x4bc>
    ff00:	2501      	movs	r5, #1
    ff02:	9b01      	ldr	r3, [sp, #4]
    ff04:	2401      	movs	r4, #1
    ff06:	401d      	ands	r5, r3
    ff08:	2300      	movs	r3, #0
    ff0a:	2200      	movs	r2, #0
    ff0c:	4699      	mov	r9, r3
    ff0e:	e622      	b.n	fb56 <__aeabi_dmul+0xce>
    ff10:	251f      	movs	r5, #31
    ff12:	0021      	movs	r1, r4
    ff14:	426d      	negs	r5, r5
    ff16:	1a28      	subs	r0, r5, r0
    ff18:	40c1      	lsrs	r1, r0
    ff1a:	0008      	movs	r0, r1
    ff1c:	2a20      	cmp	r2, #32
    ff1e:	d01d      	beq.n	ff5c <__aeabi_dmul+0x4d4>
    ff20:	355f      	adds	r5, #95	; 0x5f
    ff22:	1aaa      	subs	r2, r5, r2
    ff24:	4094      	lsls	r4, r2
    ff26:	4323      	orrs	r3, r4
    ff28:	1e5c      	subs	r4, r3, #1
    ff2a:	41a3      	sbcs	r3, r4
    ff2c:	2507      	movs	r5, #7
    ff2e:	4303      	orrs	r3, r0
    ff30:	401d      	ands	r5, r3
    ff32:	2200      	movs	r2, #0
    ff34:	2d00      	cmp	r5, #0
    ff36:	d009      	beq.n	ff4c <__aeabi_dmul+0x4c4>
    ff38:	220f      	movs	r2, #15
    ff3a:	2400      	movs	r4, #0
    ff3c:	401a      	ands	r2, r3
    ff3e:	0018      	movs	r0, r3
    ff40:	2a04      	cmp	r2, #4
    ff42:	d1d6      	bne.n	fef2 <__aeabi_dmul+0x46a>
    ff44:	0003      	movs	r3, r0
    ff46:	0765      	lsls	r5, r4, #29
    ff48:	0264      	lsls	r4, r4, #9
    ff4a:	0b22      	lsrs	r2, r4, #12
    ff4c:	08db      	lsrs	r3, r3, #3
    ff4e:	432b      	orrs	r3, r5
    ff50:	2501      	movs	r5, #1
    ff52:	4699      	mov	r9, r3
    ff54:	9b01      	ldr	r3, [sp, #4]
    ff56:	2400      	movs	r4, #0
    ff58:	401d      	ands	r5, r3
    ff5a:	e5fc      	b.n	fb56 <__aeabi_dmul+0xce>
    ff5c:	2400      	movs	r4, #0
    ff5e:	e7e2      	b.n	ff26 <__aeabi_dmul+0x49e>
    ff60:	2280      	movs	r2, #128	; 0x80
    ff62:	2501      	movs	r5, #1
    ff64:	0312      	lsls	r2, r2, #12
    ff66:	4322      	orrs	r2, r4
    ff68:	9901      	ldr	r1, [sp, #4]
    ff6a:	0312      	lsls	r2, r2, #12
    ff6c:	0b12      	lsrs	r2, r2, #12
    ff6e:	400d      	ands	r5, r1
    ff70:	4699      	mov	r9, r3
    ff72:	4c04      	ldr	r4, [pc, #16]	; (ff84 <__aeabi_dmul+0x4fc>)
    ff74:	e5ef      	b.n	fb56 <__aeabi_dmul+0xce>
    ff76:	46c0      	nop			; (mov r8, r8)
    ff78:	000003ff 	.word	0x000003ff
    ff7c:	feffffff 	.word	0xfeffffff
    ff80:	000007fe 	.word	0x000007fe
    ff84:	000007ff 	.word	0x000007ff

0000ff88 <__aeabi_dsub>:
    ff88:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff8a:	4646      	mov	r6, r8
    ff8c:	46d6      	mov	lr, sl
    ff8e:	464f      	mov	r7, r9
    ff90:	030c      	lsls	r4, r1, #12
    ff92:	b5c0      	push	{r6, r7, lr}
    ff94:	0fcd      	lsrs	r5, r1, #31
    ff96:	004e      	lsls	r6, r1, #1
    ff98:	0a61      	lsrs	r1, r4, #9
    ff9a:	0f44      	lsrs	r4, r0, #29
    ff9c:	430c      	orrs	r4, r1
    ff9e:	00c1      	lsls	r1, r0, #3
    ffa0:	0058      	lsls	r0, r3, #1
    ffa2:	0d40      	lsrs	r0, r0, #21
    ffa4:	4684      	mov	ip, r0
    ffa6:	468a      	mov	sl, r1
    ffa8:	000f      	movs	r7, r1
    ffaa:	0319      	lsls	r1, r3, #12
    ffac:	0f50      	lsrs	r0, r2, #29
    ffae:	0a49      	lsrs	r1, r1, #9
    ffb0:	4301      	orrs	r1, r0
    ffb2:	48c6      	ldr	r0, [pc, #792]	; (102cc <__aeabi_dsub+0x344>)
    ffb4:	0d76      	lsrs	r6, r6, #21
    ffb6:	46a8      	mov	r8, r5
    ffb8:	0fdb      	lsrs	r3, r3, #31
    ffba:	00d2      	lsls	r2, r2, #3
    ffbc:	4584      	cmp	ip, r0
    ffbe:	d100      	bne.n	ffc2 <__aeabi_dsub+0x3a>
    ffc0:	e0d8      	b.n	10174 <__aeabi_dsub+0x1ec>
    ffc2:	2001      	movs	r0, #1
    ffc4:	4043      	eors	r3, r0
    ffc6:	42ab      	cmp	r3, r5
    ffc8:	d100      	bne.n	ffcc <__aeabi_dsub+0x44>
    ffca:	e0a6      	b.n	1011a <__aeabi_dsub+0x192>
    ffcc:	4660      	mov	r0, ip
    ffce:	1a35      	subs	r5, r6, r0
    ffd0:	2d00      	cmp	r5, #0
    ffd2:	dc00      	bgt.n	ffd6 <__aeabi_dsub+0x4e>
    ffd4:	e105      	b.n	101e2 <__aeabi_dsub+0x25a>
    ffd6:	2800      	cmp	r0, #0
    ffd8:	d110      	bne.n	fffc <__aeabi_dsub+0x74>
    ffda:	000b      	movs	r3, r1
    ffdc:	4313      	orrs	r3, r2
    ffde:	d100      	bne.n	ffe2 <__aeabi_dsub+0x5a>
    ffe0:	e0d7      	b.n	10192 <__aeabi_dsub+0x20a>
    ffe2:	1e6b      	subs	r3, r5, #1
    ffe4:	2b00      	cmp	r3, #0
    ffe6:	d000      	beq.n	ffea <__aeabi_dsub+0x62>
    ffe8:	e14b      	b.n	10282 <__aeabi_dsub+0x2fa>
    ffea:	4653      	mov	r3, sl
    ffec:	1a9f      	subs	r7, r3, r2
    ffee:	45ba      	cmp	sl, r7
    fff0:	4180      	sbcs	r0, r0
    fff2:	1a64      	subs	r4, r4, r1
    fff4:	4240      	negs	r0, r0
    fff6:	1a24      	subs	r4, r4, r0
    fff8:	2601      	movs	r6, #1
    fffa:	e01e      	b.n	1003a <__aeabi_dsub+0xb2>
    fffc:	4bb3      	ldr	r3, [pc, #716]	; (102cc <__aeabi_dsub+0x344>)
    fffe:	429e      	cmp	r6, r3
   10000:	d048      	beq.n	10094 <__aeabi_dsub+0x10c>
   10002:	2380      	movs	r3, #128	; 0x80
   10004:	041b      	lsls	r3, r3, #16
   10006:	4319      	orrs	r1, r3
   10008:	2d38      	cmp	r5, #56	; 0x38
   1000a:	dd00      	ble.n	1000e <__aeabi_dsub+0x86>
   1000c:	e119      	b.n	10242 <__aeabi_dsub+0x2ba>
   1000e:	2d1f      	cmp	r5, #31
   10010:	dd00      	ble.n	10014 <__aeabi_dsub+0x8c>
   10012:	e14c      	b.n	102ae <__aeabi_dsub+0x326>
   10014:	2320      	movs	r3, #32
   10016:	000f      	movs	r7, r1
   10018:	1b5b      	subs	r3, r3, r5
   1001a:	0010      	movs	r0, r2
   1001c:	409a      	lsls	r2, r3
   1001e:	409f      	lsls	r7, r3
   10020:	40e8      	lsrs	r0, r5
   10022:	1e53      	subs	r3, r2, #1
   10024:	419a      	sbcs	r2, r3
   10026:	40e9      	lsrs	r1, r5
   10028:	4307      	orrs	r7, r0
   1002a:	4317      	orrs	r7, r2
   1002c:	4653      	mov	r3, sl
   1002e:	1bdf      	subs	r7, r3, r7
   10030:	1a61      	subs	r1, r4, r1
   10032:	45ba      	cmp	sl, r7
   10034:	41a4      	sbcs	r4, r4
   10036:	4264      	negs	r4, r4
   10038:	1b0c      	subs	r4, r1, r4
   1003a:	0223      	lsls	r3, r4, #8
   1003c:	d400      	bmi.n	10040 <__aeabi_dsub+0xb8>
   1003e:	e0c5      	b.n	101cc <__aeabi_dsub+0x244>
   10040:	0264      	lsls	r4, r4, #9
   10042:	0a65      	lsrs	r5, r4, #9
   10044:	2d00      	cmp	r5, #0
   10046:	d100      	bne.n	1004a <__aeabi_dsub+0xc2>
   10048:	e0f6      	b.n	10238 <__aeabi_dsub+0x2b0>
   1004a:	0028      	movs	r0, r5
   1004c:	f000 fb3e 	bl	106cc <__clzsi2>
   10050:	0003      	movs	r3, r0
   10052:	3b08      	subs	r3, #8
   10054:	2b1f      	cmp	r3, #31
   10056:	dd00      	ble.n	1005a <__aeabi_dsub+0xd2>
   10058:	e0e9      	b.n	1022e <__aeabi_dsub+0x2a6>
   1005a:	2220      	movs	r2, #32
   1005c:	003c      	movs	r4, r7
   1005e:	1ad2      	subs	r2, r2, r3
   10060:	409d      	lsls	r5, r3
   10062:	40d4      	lsrs	r4, r2
   10064:	409f      	lsls	r7, r3
   10066:	4325      	orrs	r5, r4
   10068:	429e      	cmp	r6, r3
   1006a:	dd00      	ble.n	1006e <__aeabi_dsub+0xe6>
   1006c:	e0db      	b.n	10226 <__aeabi_dsub+0x29e>
   1006e:	1b9e      	subs	r6, r3, r6
   10070:	1c73      	adds	r3, r6, #1
   10072:	2b1f      	cmp	r3, #31
   10074:	dd00      	ble.n	10078 <__aeabi_dsub+0xf0>
   10076:	e10a      	b.n	1028e <__aeabi_dsub+0x306>
   10078:	2220      	movs	r2, #32
   1007a:	0038      	movs	r0, r7
   1007c:	1ad2      	subs	r2, r2, r3
   1007e:	0029      	movs	r1, r5
   10080:	4097      	lsls	r7, r2
   10082:	002c      	movs	r4, r5
   10084:	4091      	lsls	r1, r2
   10086:	40d8      	lsrs	r0, r3
   10088:	1e7a      	subs	r2, r7, #1
   1008a:	4197      	sbcs	r7, r2
   1008c:	40dc      	lsrs	r4, r3
   1008e:	2600      	movs	r6, #0
   10090:	4301      	orrs	r1, r0
   10092:	430f      	orrs	r7, r1
   10094:	077b      	lsls	r3, r7, #29
   10096:	d009      	beq.n	100ac <__aeabi_dsub+0x124>
   10098:	230f      	movs	r3, #15
   1009a:	403b      	ands	r3, r7
   1009c:	2b04      	cmp	r3, #4
   1009e:	d005      	beq.n	100ac <__aeabi_dsub+0x124>
   100a0:	1d3b      	adds	r3, r7, #4
   100a2:	42bb      	cmp	r3, r7
   100a4:	41bf      	sbcs	r7, r7
   100a6:	427f      	negs	r7, r7
   100a8:	19e4      	adds	r4, r4, r7
   100aa:	001f      	movs	r7, r3
   100ac:	0223      	lsls	r3, r4, #8
   100ae:	d525      	bpl.n	100fc <__aeabi_dsub+0x174>
   100b0:	4b86      	ldr	r3, [pc, #536]	; (102cc <__aeabi_dsub+0x344>)
   100b2:	3601      	adds	r6, #1
   100b4:	429e      	cmp	r6, r3
   100b6:	d100      	bne.n	100ba <__aeabi_dsub+0x132>
   100b8:	e0af      	b.n	1021a <__aeabi_dsub+0x292>
   100ba:	4b85      	ldr	r3, [pc, #532]	; (102d0 <__aeabi_dsub+0x348>)
   100bc:	2501      	movs	r5, #1
   100be:	401c      	ands	r4, r3
   100c0:	4643      	mov	r3, r8
   100c2:	0762      	lsls	r2, r4, #29
   100c4:	08ff      	lsrs	r7, r7, #3
   100c6:	0264      	lsls	r4, r4, #9
   100c8:	0576      	lsls	r6, r6, #21
   100ca:	4317      	orrs	r7, r2
   100cc:	0b24      	lsrs	r4, r4, #12
   100ce:	0d76      	lsrs	r6, r6, #21
   100d0:	401d      	ands	r5, r3
   100d2:	2100      	movs	r1, #0
   100d4:	0324      	lsls	r4, r4, #12
   100d6:	0b23      	lsrs	r3, r4, #12
   100d8:	0d0c      	lsrs	r4, r1, #20
   100da:	4a7e      	ldr	r2, [pc, #504]	; (102d4 <__aeabi_dsub+0x34c>)
   100dc:	0524      	lsls	r4, r4, #20
   100de:	431c      	orrs	r4, r3
   100e0:	4014      	ands	r4, r2
   100e2:	0533      	lsls	r3, r6, #20
   100e4:	4323      	orrs	r3, r4
   100e6:	005b      	lsls	r3, r3, #1
   100e8:	07ed      	lsls	r5, r5, #31
   100ea:	085b      	lsrs	r3, r3, #1
   100ec:	432b      	orrs	r3, r5
   100ee:	0038      	movs	r0, r7
   100f0:	0019      	movs	r1, r3
   100f2:	bc1c      	pop	{r2, r3, r4}
   100f4:	4690      	mov	r8, r2
   100f6:	4699      	mov	r9, r3
   100f8:	46a2      	mov	sl, r4
   100fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100fc:	2501      	movs	r5, #1
   100fe:	4643      	mov	r3, r8
   10100:	0762      	lsls	r2, r4, #29
   10102:	08ff      	lsrs	r7, r7, #3
   10104:	4317      	orrs	r7, r2
   10106:	08e4      	lsrs	r4, r4, #3
   10108:	401d      	ands	r5, r3
   1010a:	4b70      	ldr	r3, [pc, #448]	; (102cc <__aeabi_dsub+0x344>)
   1010c:	429e      	cmp	r6, r3
   1010e:	d036      	beq.n	1017e <__aeabi_dsub+0x1f6>
   10110:	0324      	lsls	r4, r4, #12
   10112:	0576      	lsls	r6, r6, #21
   10114:	0b24      	lsrs	r4, r4, #12
   10116:	0d76      	lsrs	r6, r6, #21
   10118:	e7db      	b.n	100d2 <__aeabi_dsub+0x14a>
   1011a:	4663      	mov	r3, ip
   1011c:	1af3      	subs	r3, r6, r3
   1011e:	2b00      	cmp	r3, #0
   10120:	dc00      	bgt.n	10124 <__aeabi_dsub+0x19c>
   10122:	e094      	b.n	1024e <__aeabi_dsub+0x2c6>
   10124:	4660      	mov	r0, ip
   10126:	2800      	cmp	r0, #0
   10128:	d035      	beq.n	10196 <__aeabi_dsub+0x20e>
   1012a:	4868      	ldr	r0, [pc, #416]	; (102cc <__aeabi_dsub+0x344>)
   1012c:	4286      	cmp	r6, r0
   1012e:	d0b1      	beq.n	10094 <__aeabi_dsub+0x10c>
   10130:	2780      	movs	r7, #128	; 0x80
   10132:	043f      	lsls	r7, r7, #16
   10134:	4339      	orrs	r1, r7
   10136:	2b38      	cmp	r3, #56	; 0x38
   10138:	dc00      	bgt.n	1013c <__aeabi_dsub+0x1b4>
   1013a:	e0fd      	b.n	10338 <__aeabi_dsub+0x3b0>
   1013c:	430a      	orrs	r2, r1
   1013e:	0017      	movs	r7, r2
   10140:	2100      	movs	r1, #0
   10142:	1e7a      	subs	r2, r7, #1
   10144:	4197      	sbcs	r7, r2
   10146:	4457      	add	r7, sl
   10148:	4557      	cmp	r7, sl
   1014a:	4180      	sbcs	r0, r0
   1014c:	1909      	adds	r1, r1, r4
   1014e:	4244      	negs	r4, r0
   10150:	190c      	adds	r4, r1, r4
   10152:	0223      	lsls	r3, r4, #8
   10154:	d53a      	bpl.n	101cc <__aeabi_dsub+0x244>
   10156:	4b5d      	ldr	r3, [pc, #372]	; (102cc <__aeabi_dsub+0x344>)
   10158:	3601      	adds	r6, #1
   1015a:	429e      	cmp	r6, r3
   1015c:	d100      	bne.n	10160 <__aeabi_dsub+0x1d8>
   1015e:	e14b      	b.n	103f8 <__aeabi_dsub+0x470>
   10160:	2201      	movs	r2, #1
   10162:	4b5b      	ldr	r3, [pc, #364]	; (102d0 <__aeabi_dsub+0x348>)
   10164:	401c      	ands	r4, r3
   10166:	087b      	lsrs	r3, r7, #1
   10168:	4017      	ands	r7, r2
   1016a:	431f      	orrs	r7, r3
   1016c:	07e2      	lsls	r2, r4, #31
   1016e:	4317      	orrs	r7, r2
   10170:	0864      	lsrs	r4, r4, #1
   10172:	e78f      	b.n	10094 <__aeabi_dsub+0x10c>
   10174:	0008      	movs	r0, r1
   10176:	4310      	orrs	r0, r2
   10178:	d000      	beq.n	1017c <__aeabi_dsub+0x1f4>
   1017a:	e724      	b.n	ffc6 <__aeabi_dsub+0x3e>
   1017c:	e721      	b.n	ffc2 <__aeabi_dsub+0x3a>
   1017e:	0023      	movs	r3, r4
   10180:	433b      	orrs	r3, r7
   10182:	d100      	bne.n	10186 <__aeabi_dsub+0x1fe>
   10184:	e1b9      	b.n	104fa <__aeabi_dsub+0x572>
   10186:	2280      	movs	r2, #128	; 0x80
   10188:	0312      	lsls	r2, r2, #12
   1018a:	4314      	orrs	r4, r2
   1018c:	0324      	lsls	r4, r4, #12
   1018e:	0b24      	lsrs	r4, r4, #12
   10190:	e79f      	b.n	100d2 <__aeabi_dsub+0x14a>
   10192:	002e      	movs	r6, r5
   10194:	e77e      	b.n	10094 <__aeabi_dsub+0x10c>
   10196:	0008      	movs	r0, r1
   10198:	4310      	orrs	r0, r2
   1019a:	d100      	bne.n	1019e <__aeabi_dsub+0x216>
   1019c:	e0ca      	b.n	10334 <__aeabi_dsub+0x3ac>
   1019e:	1e58      	subs	r0, r3, #1
   101a0:	4684      	mov	ip, r0
   101a2:	2800      	cmp	r0, #0
   101a4:	d000      	beq.n	101a8 <__aeabi_dsub+0x220>
   101a6:	e0e7      	b.n	10378 <__aeabi_dsub+0x3f0>
   101a8:	4452      	add	r2, sl
   101aa:	4552      	cmp	r2, sl
   101ac:	4180      	sbcs	r0, r0
   101ae:	1864      	adds	r4, r4, r1
   101b0:	4240      	negs	r0, r0
   101b2:	1824      	adds	r4, r4, r0
   101b4:	0017      	movs	r7, r2
   101b6:	2601      	movs	r6, #1
   101b8:	0223      	lsls	r3, r4, #8
   101ba:	d507      	bpl.n	101cc <__aeabi_dsub+0x244>
   101bc:	2602      	movs	r6, #2
   101be:	e7cf      	b.n	10160 <__aeabi_dsub+0x1d8>
   101c0:	4664      	mov	r4, ip
   101c2:	432c      	orrs	r4, r5
   101c4:	d100      	bne.n	101c8 <__aeabi_dsub+0x240>
   101c6:	e1b3      	b.n	10530 <__aeabi_dsub+0x5a8>
   101c8:	002c      	movs	r4, r5
   101ca:	4667      	mov	r7, ip
   101cc:	077b      	lsls	r3, r7, #29
   101ce:	d000      	beq.n	101d2 <__aeabi_dsub+0x24a>
   101d0:	e762      	b.n	10098 <__aeabi_dsub+0x110>
   101d2:	0763      	lsls	r3, r4, #29
   101d4:	08ff      	lsrs	r7, r7, #3
   101d6:	431f      	orrs	r7, r3
   101d8:	2501      	movs	r5, #1
   101da:	4643      	mov	r3, r8
   101dc:	08e4      	lsrs	r4, r4, #3
   101de:	401d      	ands	r5, r3
   101e0:	e793      	b.n	1010a <__aeabi_dsub+0x182>
   101e2:	2d00      	cmp	r5, #0
   101e4:	d178      	bne.n	102d8 <__aeabi_dsub+0x350>
   101e6:	1c75      	adds	r5, r6, #1
   101e8:	056d      	lsls	r5, r5, #21
   101ea:	0d6d      	lsrs	r5, r5, #21
   101ec:	2d01      	cmp	r5, #1
   101ee:	dc00      	bgt.n	101f2 <__aeabi_dsub+0x26a>
   101f0:	e0f2      	b.n	103d8 <__aeabi_dsub+0x450>
   101f2:	4650      	mov	r0, sl
   101f4:	1a80      	subs	r0, r0, r2
   101f6:	4582      	cmp	sl, r0
   101f8:	41bf      	sbcs	r7, r7
   101fa:	1a65      	subs	r5, r4, r1
   101fc:	427f      	negs	r7, r7
   101fe:	1bed      	subs	r5, r5, r7
   10200:	4684      	mov	ip, r0
   10202:	0228      	lsls	r0, r5, #8
   10204:	d400      	bmi.n	10208 <__aeabi_dsub+0x280>
   10206:	e08c      	b.n	10322 <__aeabi_dsub+0x39a>
   10208:	4650      	mov	r0, sl
   1020a:	1a17      	subs	r7, r2, r0
   1020c:	42ba      	cmp	r2, r7
   1020e:	4192      	sbcs	r2, r2
   10210:	1b0c      	subs	r4, r1, r4
   10212:	4255      	negs	r5, r2
   10214:	1b65      	subs	r5, r4, r5
   10216:	4698      	mov	r8, r3
   10218:	e714      	b.n	10044 <__aeabi_dsub+0xbc>
   1021a:	2501      	movs	r5, #1
   1021c:	4643      	mov	r3, r8
   1021e:	2400      	movs	r4, #0
   10220:	401d      	ands	r5, r3
   10222:	2700      	movs	r7, #0
   10224:	e755      	b.n	100d2 <__aeabi_dsub+0x14a>
   10226:	4c2a      	ldr	r4, [pc, #168]	; (102d0 <__aeabi_dsub+0x348>)
   10228:	1af6      	subs	r6, r6, r3
   1022a:	402c      	ands	r4, r5
   1022c:	e732      	b.n	10094 <__aeabi_dsub+0x10c>
   1022e:	003d      	movs	r5, r7
   10230:	3828      	subs	r0, #40	; 0x28
   10232:	4085      	lsls	r5, r0
   10234:	2700      	movs	r7, #0
   10236:	e717      	b.n	10068 <__aeabi_dsub+0xe0>
   10238:	0038      	movs	r0, r7
   1023a:	f000 fa47 	bl	106cc <__clzsi2>
   1023e:	3020      	adds	r0, #32
   10240:	e706      	b.n	10050 <__aeabi_dsub+0xc8>
   10242:	430a      	orrs	r2, r1
   10244:	0017      	movs	r7, r2
   10246:	2100      	movs	r1, #0
   10248:	1e7a      	subs	r2, r7, #1
   1024a:	4197      	sbcs	r7, r2
   1024c:	e6ee      	b.n	1002c <__aeabi_dsub+0xa4>
   1024e:	2b00      	cmp	r3, #0
   10250:	d000      	beq.n	10254 <__aeabi_dsub+0x2cc>
   10252:	e0e5      	b.n	10420 <__aeabi_dsub+0x498>
   10254:	1c73      	adds	r3, r6, #1
   10256:	469c      	mov	ip, r3
   10258:	055b      	lsls	r3, r3, #21
   1025a:	0d5b      	lsrs	r3, r3, #21
   1025c:	2b01      	cmp	r3, #1
   1025e:	dc00      	bgt.n	10262 <__aeabi_dsub+0x2da>
   10260:	e09f      	b.n	103a2 <__aeabi_dsub+0x41a>
   10262:	4b1a      	ldr	r3, [pc, #104]	; (102cc <__aeabi_dsub+0x344>)
   10264:	459c      	cmp	ip, r3
   10266:	d100      	bne.n	1026a <__aeabi_dsub+0x2e2>
   10268:	e0c5      	b.n	103f6 <__aeabi_dsub+0x46e>
   1026a:	4452      	add	r2, sl
   1026c:	4552      	cmp	r2, sl
   1026e:	4180      	sbcs	r0, r0
   10270:	1864      	adds	r4, r4, r1
   10272:	4240      	negs	r0, r0
   10274:	1824      	adds	r4, r4, r0
   10276:	07e7      	lsls	r7, r4, #31
   10278:	0852      	lsrs	r2, r2, #1
   1027a:	4317      	orrs	r7, r2
   1027c:	0864      	lsrs	r4, r4, #1
   1027e:	4666      	mov	r6, ip
   10280:	e708      	b.n	10094 <__aeabi_dsub+0x10c>
   10282:	4812      	ldr	r0, [pc, #72]	; (102cc <__aeabi_dsub+0x344>)
   10284:	4285      	cmp	r5, r0
   10286:	d100      	bne.n	1028a <__aeabi_dsub+0x302>
   10288:	e085      	b.n	10396 <__aeabi_dsub+0x40e>
   1028a:	001d      	movs	r5, r3
   1028c:	e6bc      	b.n	10008 <__aeabi_dsub+0x80>
   1028e:	0029      	movs	r1, r5
   10290:	3e1f      	subs	r6, #31
   10292:	40f1      	lsrs	r1, r6
   10294:	2b20      	cmp	r3, #32
   10296:	d100      	bne.n	1029a <__aeabi_dsub+0x312>
   10298:	e07f      	b.n	1039a <__aeabi_dsub+0x412>
   1029a:	2240      	movs	r2, #64	; 0x40
   1029c:	1ad3      	subs	r3, r2, r3
   1029e:	409d      	lsls	r5, r3
   102a0:	432f      	orrs	r7, r5
   102a2:	1e7d      	subs	r5, r7, #1
   102a4:	41af      	sbcs	r7, r5
   102a6:	2400      	movs	r4, #0
   102a8:	430f      	orrs	r7, r1
   102aa:	2600      	movs	r6, #0
   102ac:	e78e      	b.n	101cc <__aeabi_dsub+0x244>
   102ae:	002b      	movs	r3, r5
   102b0:	000f      	movs	r7, r1
   102b2:	3b20      	subs	r3, #32
   102b4:	40df      	lsrs	r7, r3
   102b6:	2d20      	cmp	r5, #32
   102b8:	d071      	beq.n	1039e <__aeabi_dsub+0x416>
   102ba:	2340      	movs	r3, #64	; 0x40
   102bc:	1b5d      	subs	r5, r3, r5
   102be:	40a9      	lsls	r1, r5
   102c0:	430a      	orrs	r2, r1
   102c2:	1e51      	subs	r1, r2, #1
   102c4:	418a      	sbcs	r2, r1
   102c6:	2100      	movs	r1, #0
   102c8:	4317      	orrs	r7, r2
   102ca:	e6af      	b.n	1002c <__aeabi_dsub+0xa4>
   102cc:	000007ff 	.word	0x000007ff
   102d0:	ff7fffff 	.word	0xff7fffff
   102d4:	800fffff 	.word	0x800fffff
   102d8:	2e00      	cmp	r6, #0
   102da:	d03e      	beq.n	1035a <__aeabi_dsub+0x3d2>
   102dc:	4eb3      	ldr	r6, [pc, #716]	; (105ac <__aeabi_dsub+0x624>)
   102de:	45b4      	cmp	ip, r6
   102e0:	d045      	beq.n	1036e <__aeabi_dsub+0x3e6>
   102e2:	2680      	movs	r6, #128	; 0x80
   102e4:	0436      	lsls	r6, r6, #16
   102e6:	426d      	negs	r5, r5
   102e8:	4334      	orrs	r4, r6
   102ea:	2d38      	cmp	r5, #56	; 0x38
   102ec:	dd00      	ble.n	102f0 <__aeabi_dsub+0x368>
   102ee:	e0a8      	b.n	10442 <__aeabi_dsub+0x4ba>
   102f0:	2d1f      	cmp	r5, #31
   102f2:	dd00      	ble.n	102f6 <__aeabi_dsub+0x36e>
   102f4:	e11f      	b.n	10536 <__aeabi_dsub+0x5ae>
   102f6:	2620      	movs	r6, #32
   102f8:	0027      	movs	r7, r4
   102fa:	4650      	mov	r0, sl
   102fc:	1b76      	subs	r6, r6, r5
   102fe:	40b7      	lsls	r7, r6
   10300:	40e8      	lsrs	r0, r5
   10302:	4307      	orrs	r7, r0
   10304:	4650      	mov	r0, sl
   10306:	40b0      	lsls	r0, r6
   10308:	1e46      	subs	r6, r0, #1
   1030a:	41b0      	sbcs	r0, r6
   1030c:	40ec      	lsrs	r4, r5
   1030e:	4338      	orrs	r0, r7
   10310:	1a17      	subs	r7, r2, r0
   10312:	42ba      	cmp	r2, r7
   10314:	4192      	sbcs	r2, r2
   10316:	1b0c      	subs	r4, r1, r4
   10318:	4252      	negs	r2, r2
   1031a:	1aa4      	subs	r4, r4, r2
   1031c:	4666      	mov	r6, ip
   1031e:	4698      	mov	r8, r3
   10320:	e68b      	b.n	1003a <__aeabi_dsub+0xb2>
   10322:	4664      	mov	r4, ip
   10324:	4667      	mov	r7, ip
   10326:	432c      	orrs	r4, r5
   10328:	d000      	beq.n	1032c <__aeabi_dsub+0x3a4>
   1032a:	e68b      	b.n	10044 <__aeabi_dsub+0xbc>
   1032c:	2500      	movs	r5, #0
   1032e:	2600      	movs	r6, #0
   10330:	2700      	movs	r7, #0
   10332:	e6ea      	b.n	1010a <__aeabi_dsub+0x182>
   10334:	001e      	movs	r6, r3
   10336:	e6ad      	b.n	10094 <__aeabi_dsub+0x10c>
   10338:	2b1f      	cmp	r3, #31
   1033a:	dc60      	bgt.n	103fe <__aeabi_dsub+0x476>
   1033c:	2720      	movs	r7, #32
   1033e:	1af8      	subs	r0, r7, r3
   10340:	000f      	movs	r7, r1
   10342:	4684      	mov	ip, r0
   10344:	4087      	lsls	r7, r0
   10346:	0010      	movs	r0, r2
   10348:	40d8      	lsrs	r0, r3
   1034a:	4307      	orrs	r7, r0
   1034c:	4660      	mov	r0, ip
   1034e:	4082      	lsls	r2, r0
   10350:	1e50      	subs	r0, r2, #1
   10352:	4182      	sbcs	r2, r0
   10354:	40d9      	lsrs	r1, r3
   10356:	4317      	orrs	r7, r2
   10358:	e6f5      	b.n	10146 <__aeabi_dsub+0x1be>
   1035a:	0026      	movs	r6, r4
   1035c:	4650      	mov	r0, sl
   1035e:	4306      	orrs	r6, r0
   10360:	d005      	beq.n	1036e <__aeabi_dsub+0x3e6>
   10362:	43ed      	mvns	r5, r5
   10364:	2d00      	cmp	r5, #0
   10366:	d0d3      	beq.n	10310 <__aeabi_dsub+0x388>
   10368:	4e90      	ldr	r6, [pc, #576]	; (105ac <__aeabi_dsub+0x624>)
   1036a:	45b4      	cmp	ip, r6
   1036c:	d1bd      	bne.n	102ea <__aeabi_dsub+0x362>
   1036e:	000c      	movs	r4, r1
   10370:	0017      	movs	r7, r2
   10372:	4666      	mov	r6, ip
   10374:	4698      	mov	r8, r3
   10376:	e68d      	b.n	10094 <__aeabi_dsub+0x10c>
   10378:	488c      	ldr	r0, [pc, #560]	; (105ac <__aeabi_dsub+0x624>)
   1037a:	4283      	cmp	r3, r0
   1037c:	d00b      	beq.n	10396 <__aeabi_dsub+0x40e>
   1037e:	4663      	mov	r3, ip
   10380:	e6d9      	b.n	10136 <__aeabi_dsub+0x1ae>
   10382:	2d00      	cmp	r5, #0
   10384:	d000      	beq.n	10388 <__aeabi_dsub+0x400>
   10386:	e096      	b.n	104b6 <__aeabi_dsub+0x52e>
   10388:	0008      	movs	r0, r1
   1038a:	4310      	orrs	r0, r2
   1038c:	d100      	bne.n	10390 <__aeabi_dsub+0x408>
   1038e:	e0e2      	b.n	10556 <__aeabi_dsub+0x5ce>
   10390:	000c      	movs	r4, r1
   10392:	0017      	movs	r7, r2
   10394:	4698      	mov	r8, r3
   10396:	4e85      	ldr	r6, [pc, #532]	; (105ac <__aeabi_dsub+0x624>)
   10398:	e67c      	b.n	10094 <__aeabi_dsub+0x10c>
   1039a:	2500      	movs	r5, #0
   1039c:	e780      	b.n	102a0 <__aeabi_dsub+0x318>
   1039e:	2100      	movs	r1, #0
   103a0:	e78e      	b.n	102c0 <__aeabi_dsub+0x338>
   103a2:	0023      	movs	r3, r4
   103a4:	4650      	mov	r0, sl
   103a6:	4303      	orrs	r3, r0
   103a8:	2e00      	cmp	r6, #0
   103aa:	d000      	beq.n	103ae <__aeabi_dsub+0x426>
   103ac:	e0a8      	b.n	10500 <__aeabi_dsub+0x578>
   103ae:	2b00      	cmp	r3, #0
   103b0:	d100      	bne.n	103b4 <__aeabi_dsub+0x42c>
   103b2:	e0de      	b.n	10572 <__aeabi_dsub+0x5ea>
   103b4:	000b      	movs	r3, r1
   103b6:	4313      	orrs	r3, r2
   103b8:	d100      	bne.n	103bc <__aeabi_dsub+0x434>
   103ba:	e66b      	b.n	10094 <__aeabi_dsub+0x10c>
   103bc:	4452      	add	r2, sl
   103be:	4552      	cmp	r2, sl
   103c0:	4180      	sbcs	r0, r0
   103c2:	1864      	adds	r4, r4, r1
   103c4:	4240      	negs	r0, r0
   103c6:	1824      	adds	r4, r4, r0
   103c8:	0017      	movs	r7, r2
   103ca:	0223      	lsls	r3, r4, #8
   103cc:	d400      	bmi.n	103d0 <__aeabi_dsub+0x448>
   103ce:	e6fd      	b.n	101cc <__aeabi_dsub+0x244>
   103d0:	4b77      	ldr	r3, [pc, #476]	; (105b0 <__aeabi_dsub+0x628>)
   103d2:	4666      	mov	r6, ip
   103d4:	401c      	ands	r4, r3
   103d6:	e65d      	b.n	10094 <__aeabi_dsub+0x10c>
   103d8:	0025      	movs	r5, r4
   103da:	4650      	mov	r0, sl
   103dc:	4305      	orrs	r5, r0
   103de:	2e00      	cmp	r6, #0
   103e0:	d1cf      	bne.n	10382 <__aeabi_dsub+0x3fa>
   103e2:	2d00      	cmp	r5, #0
   103e4:	d14f      	bne.n	10486 <__aeabi_dsub+0x4fe>
   103e6:	000c      	movs	r4, r1
   103e8:	4314      	orrs	r4, r2
   103ea:	d100      	bne.n	103ee <__aeabi_dsub+0x466>
   103ec:	e0a0      	b.n	10530 <__aeabi_dsub+0x5a8>
   103ee:	000c      	movs	r4, r1
   103f0:	0017      	movs	r7, r2
   103f2:	4698      	mov	r8, r3
   103f4:	e64e      	b.n	10094 <__aeabi_dsub+0x10c>
   103f6:	4666      	mov	r6, ip
   103f8:	2400      	movs	r4, #0
   103fa:	2700      	movs	r7, #0
   103fc:	e685      	b.n	1010a <__aeabi_dsub+0x182>
   103fe:	001f      	movs	r7, r3
   10400:	0008      	movs	r0, r1
   10402:	3f20      	subs	r7, #32
   10404:	40f8      	lsrs	r0, r7
   10406:	0007      	movs	r7, r0
   10408:	2b20      	cmp	r3, #32
   1040a:	d100      	bne.n	1040e <__aeabi_dsub+0x486>
   1040c:	e08e      	b.n	1052c <__aeabi_dsub+0x5a4>
   1040e:	2040      	movs	r0, #64	; 0x40
   10410:	1ac3      	subs	r3, r0, r3
   10412:	4099      	lsls	r1, r3
   10414:	430a      	orrs	r2, r1
   10416:	1e51      	subs	r1, r2, #1
   10418:	418a      	sbcs	r2, r1
   1041a:	2100      	movs	r1, #0
   1041c:	4317      	orrs	r7, r2
   1041e:	e692      	b.n	10146 <__aeabi_dsub+0x1be>
   10420:	2e00      	cmp	r6, #0
   10422:	d114      	bne.n	1044e <__aeabi_dsub+0x4c6>
   10424:	0026      	movs	r6, r4
   10426:	4650      	mov	r0, sl
   10428:	4306      	orrs	r6, r0
   1042a:	d062      	beq.n	104f2 <__aeabi_dsub+0x56a>
   1042c:	43db      	mvns	r3, r3
   1042e:	2b00      	cmp	r3, #0
   10430:	d15c      	bne.n	104ec <__aeabi_dsub+0x564>
   10432:	1887      	adds	r7, r0, r2
   10434:	4297      	cmp	r7, r2
   10436:	4192      	sbcs	r2, r2
   10438:	1864      	adds	r4, r4, r1
   1043a:	4252      	negs	r2, r2
   1043c:	18a4      	adds	r4, r4, r2
   1043e:	4666      	mov	r6, ip
   10440:	e687      	b.n	10152 <__aeabi_dsub+0x1ca>
   10442:	4650      	mov	r0, sl
   10444:	4320      	orrs	r0, r4
   10446:	1e44      	subs	r4, r0, #1
   10448:	41a0      	sbcs	r0, r4
   1044a:	2400      	movs	r4, #0
   1044c:	e760      	b.n	10310 <__aeabi_dsub+0x388>
   1044e:	4e57      	ldr	r6, [pc, #348]	; (105ac <__aeabi_dsub+0x624>)
   10450:	45b4      	cmp	ip, r6
   10452:	d04e      	beq.n	104f2 <__aeabi_dsub+0x56a>
   10454:	2680      	movs	r6, #128	; 0x80
   10456:	0436      	lsls	r6, r6, #16
   10458:	425b      	negs	r3, r3
   1045a:	4334      	orrs	r4, r6
   1045c:	2b38      	cmp	r3, #56	; 0x38
   1045e:	dd00      	ble.n	10462 <__aeabi_dsub+0x4da>
   10460:	e07f      	b.n	10562 <__aeabi_dsub+0x5da>
   10462:	2b1f      	cmp	r3, #31
   10464:	dd00      	ble.n	10468 <__aeabi_dsub+0x4e0>
   10466:	e08b      	b.n	10580 <__aeabi_dsub+0x5f8>
   10468:	2620      	movs	r6, #32
   1046a:	0027      	movs	r7, r4
   1046c:	4650      	mov	r0, sl
   1046e:	1af6      	subs	r6, r6, r3
   10470:	40b7      	lsls	r7, r6
   10472:	40d8      	lsrs	r0, r3
   10474:	4307      	orrs	r7, r0
   10476:	4650      	mov	r0, sl
   10478:	40b0      	lsls	r0, r6
   1047a:	1e46      	subs	r6, r0, #1
   1047c:	41b0      	sbcs	r0, r6
   1047e:	4307      	orrs	r7, r0
   10480:	40dc      	lsrs	r4, r3
   10482:	18bf      	adds	r7, r7, r2
   10484:	e7d6      	b.n	10434 <__aeabi_dsub+0x4ac>
   10486:	000d      	movs	r5, r1
   10488:	4315      	orrs	r5, r2
   1048a:	d100      	bne.n	1048e <__aeabi_dsub+0x506>
   1048c:	e602      	b.n	10094 <__aeabi_dsub+0x10c>
   1048e:	4650      	mov	r0, sl
   10490:	1a80      	subs	r0, r0, r2
   10492:	4582      	cmp	sl, r0
   10494:	41bf      	sbcs	r7, r7
   10496:	1a65      	subs	r5, r4, r1
   10498:	427f      	negs	r7, r7
   1049a:	1bed      	subs	r5, r5, r7
   1049c:	4684      	mov	ip, r0
   1049e:	0228      	lsls	r0, r5, #8
   104a0:	d400      	bmi.n	104a4 <__aeabi_dsub+0x51c>
   104a2:	e68d      	b.n	101c0 <__aeabi_dsub+0x238>
   104a4:	4650      	mov	r0, sl
   104a6:	1a17      	subs	r7, r2, r0
   104a8:	42ba      	cmp	r2, r7
   104aa:	4192      	sbcs	r2, r2
   104ac:	1b0c      	subs	r4, r1, r4
   104ae:	4252      	negs	r2, r2
   104b0:	1aa4      	subs	r4, r4, r2
   104b2:	4698      	mov	r8, r3
   104b4:	e5ee      	b.n	10094 <__aeabi_dsub+0x10c>
   104b6:	000d      	movs	r5, r1
   104b8:	4315      	orrs	r5, r2
   104ba:	d100      	bne.n	104be <__aeabi_dsub+0x536>
   104bc:	e76b      	b.n	10396 <__aeabi_dsub+0x40e>
   104be:	4650      	mov	r0, sl
   104c0:	0767      	lsls	r7, r4, #29
   104c2:	08c0      	lsrs	r0, r0, #3
   104c4:	4307      	orrs	r7, r0
   104c6:	2080      	movs	r0, #128	; 0x80
   104c8:	08e4      	lsrs	r4, r4, #3
   104ca:	0300      	lsls	r0, r0, #12
   104cc:	4204      	tst	r4, r0
   104ce:	d007      	beq.n	104e0 <__aeabi_dsub+0x558>
   104d0:	08cd      	lsrs	r5, r1, #3
   104d2:	4205      	tst	r5, r0
   104d4:	d104      	bne.n	104e0 <__aeabi_dsub+0x558>
   104d6:	002c      	movs	r4, r5
   104d8:	4698      	mov	r8, r3
   104da:	08d7      	lsrs	r7, r2, #3
   104dc:	0749      	lsls	r1, r1, #29
   104de:	430f      	orrs	r7, r1
   104e0:	0f7b      	lsrs	r3, r7, #29
   104e2:	00e4      	lsls	r4, r4, #3
   104e4:	431c      	orrs	r4, r3
   104e6:	00ff      	lsls	r7, r7, #3
   104e8:	4e30      	ldr	r6, [pc, #192]	; (105ac <__aeabi_dsub+0x624>)
   104ea:	e5d3      	b.n	10094 <__aeabi_dsub+0x10c>
   104ec:	4e2f      	ldr	r6, [pc, #188]	; (105ac <__aeabi_dsub+0x624>)
   104ee:	45b4      	cmp	ip, r6
   104f0:	d1b4      	bne.n	1045c <__aeabi_dsub+0x4d4>
   104f2:	000c      	movs	r4, r1
   104f4:	0017      	movs	r7, r2
   104f6:	4666      	mov	r6, ip
   104f8:	e5cc      	b.n	10094 <__aeabi_dsub+0x10c>
   104fa:	2700      	movs	r7, #0
   104fc:	2400      	movs	r4, #0
   104fe:	e5e8      	b.n	100d2 <__aeabi_dsub+0x14a>
   10500:	2b00      	cmp	r3, #0
   10502:	d039      	beq.n	10578 <__aeabi_dsub+0x5f0>
   10504:	000b      	movs	r3, r1
   10506:	4313      	orrs	r3, r2
   10508:	d100      	bne.n	1050c <__aeabi_dsub+0x584>
   1050a:	e744      	b.n	10396 <__aeabi_dsub+0x40e>
   1050c:	08c0      	lsrs	r0, r0, #3
   1050e:	0767      	lsls	r7, r4, #29
   10510:	4307      	orrs	r7, r0
   10512:	2080      	movs	r0, #128	; 0x80
   10514:	08e4      	lsrs	r4, r4, #3
   10516:	0300      	lsls	r0, r0, #12
   10518:	4204      	tst	r4, r0
   1051a:	d0e1      	beq.n	104e0 <__aeabi_dsub+0x558>
   1051c:	08cb      	lsrs	r3, r1, #3
   1051e:	4203      	tst	r3, r0
   10520:	d1de      	bne.n	104e0 <__aeabi_dsub+0x558>
   10522:	08d7      	lsrs	r7, r2, #3
   10524:	0749      	lsls	r1, r1, #29
   10526:	430f      	orrs	r7, r1
   10528:	001c      	movs	r4, r3
   1052a:	e7d9      	b.n	104e0 <__aeabi_dsub+0x558>
   1052c:	2100      	movs	r1, #0
   1052e:	e771      	b.n	10414 <__aeabi_dsub+0x48c>
   10530:	2500      	movs	r5, #0
   10532:	2700      	movs	r7, #0
   10534:	e5e9      	b.n	1010a <__aeabi_dsub+0x182>
   10536:	002e      	movs	r6, r5
   10538:	0027      	movs	r7, r4
   1053a:	3e20      	subs	r6, #32
   1053c:	40f7      	lsrs	r7, r6
   1053e:	2d20      	cmp	r5, #32
   10540:	d02f      	beq.n	105a2 <__aeabi_dsub+0x61a>
   10542:	2640      	movs	r6, #64	; 0x40
   10544:	1b75      	subs	r5, r6, r5
   10546:	40ac      	lsls	r4, r5
   10548:	4650      	mov	r0, sl
   1054a:	4320      	orrs	r0, r4
   1054c:	1e44      	subs	r4, r0, #1
   1054e:	41a0      	sbcs	r0, r4
   10550:	2400      	movs	r4, #0
   10552:	4338      	orrs	r0, r7
   10554:	e6dc      	b.n	10310 <__aeabi_dsub+0x388>
   10556:	2480      	movs	r4, #128	; 0x80
   10558:	2500      	movs	r5, #0
   1055a:	0324      	lsls	r4, r4, #12
   1055c:	4e13      	ldr	r6, [pc, #76]	; (105ac <__aeabi_dsub+0x624>)
   1055e:	2700      	movs	r7, #0
   10560:	e5d3      	b.n	1010a <__aeabi_dsub+0x182>
   10562:	4650      	mov	r0, sl
   10564:	4320      	orrs	r0, r4
   10566:	0007      	movs	r7, r0
   10568:	1e78      	subs	r0, r7, #1
   1056a:	4187      	sbcs	r7, r0
   1056c:	2400      	movs	r4, #0
   1056e:	18bf      	adds	r7, r7, r2
   10570:	e760      	b.n	10434 <__aeabi_dsub+0x4ac>
   10572:	000c      	movs	r4, r1
   10574:	0017      	movs	r7, r2
   10576:	e58d      	b.n	10094 <__aeabi_dsub+0x10c>
   10578:	000c      	movs	r4, r1
   1057a:	0017      	movs	r7, r2
   1057c:	4e0b      	ldr	r6, [pc, #44]	; (105ac <__aeabi_dsub+0x624>)
   1057e:	e589      	b.n	10094 <__aeabi_dsub+0x10c>
   10580:	001e      	movs	r6, r3
   10582:	0027      	movs	r7, r4
   10584:	3e20      	subs	r6, #32
   10586:	40f7      	lsrs	r7, r6
   10588:	2b20      	cmp	r3, #32
   1058a:	d00c      	beq.n	105a6 <__aeabi_dsub+0x61e>
   1058c:	2640      	movs	r6, #64	; 0x40
   1058e:	1af3      	subs	r3, r6, r3
   10590:	409c      	lsls	r4, r3
   10592:	4650      	mov	r0, sl
   10594:	4320      	orrs	r0, r4
   10596:	1e44      	subs	r4, r0, #1
   10598:	41a0      	sbcs	r0, r4
   1059a:	4307      	orrs	r7, r0
   1059c:	2400      	movs	r4, #0
   1059e:	18bf      	adds	r7, r7, r2
   105a0:	e748      	b.n	10434 <__aeabi_dsub+0x4ac>
   105a2:	2400      	movs	r4, #0
   105a4:	e7d0      	b.n	10548 <__aeabi_dsub+0x5c0>
   105a6:	2400      	movs	r4, #0
   105a8:	e7f3      	b.n	10592 <__aeabi_dsub+0x60a>
   105aa:	46c0      	nop			; (mov r8, r8)
   105ac:	000007ff 	.word	0x000007ff
   105b0:	ff7fffff 	.word	0xff7fffff

000105b4 <__aeabi_dcmpun>:
   105b4:	b570      	push	{r4, r5, r6, lr}
   105b6:	4e0e      	ldr	r6, [pc, #56]	; (105f0 <__aeabi_dcmpun+0x3c>)
   105b8:	030d      	lsls	r5, r1, #12
   105ba:	031c      	lsls	r4, r3, #12
   105bc:	0049      	lsls	r1, r1, #1
   105be:	005b      	lsls	r3, r3, #1
   105c0:	0b2d      	lsrs	r5, r5, #12
   105c2:	0d49      	lsrs	r1, r1, #21
   105c4:	0b24      	lsrs	r4, r4, #12
   105c6:	0d5b      	lsrs	r3, r3, #21
   105c8:	42b1      	cmp	r1, r6
   105ca:	d004      	beq.n	105d6 <__aeabi_dcmpun+0x22>
   105cc:	4908      	ldr	r1, [pc, #32]	; (105f0 <__aeabi_dcmpun+0x3c>)
   105ce:	2000      	movs	r0, #0
   105d0:	428b      	cmp	r3, r1
   105d2:	d008      	beq.n	105e6 <__aeabi_dcmpun+0x32>
   105d4:	bd70      	pop	{r4, r5, r6, pc}
   105d6:	4305      	orrs	r5, r0
   105d8:	2001      	movs	r0, #1
   105da:	2d00      	cmp	r5, #0
   105dc:	d1fa      	bne.n	105d4 <__aeabi_dcmpun+0x20>
   105de:	4904      	ldr	r1, [pc, #16]	; (105f0 <__aeabi_dcmpun+0x3c>)
   105e0:	2000      	movs	r0, #0
   105e2:	428b      	cmp	r3, r1
   105e4:	d1f6      	bne.n	105d4 <__aeabi_dcmpun+0x20>
   105e6:	4314      	orrs	r4, r2
   105e8:	0020      	movs	r0, r4
   105ea:	1e44      	subs	r4, r0, #1
   105ec:	41a0      	sbcs	r0, r4
   105ee:	e7f1      	b.n	105d4 <__aeabi_dcmpun+0x20>
   105f0:	000007ff 	.word	0x000007ff

000105f4 <__aeabi_d2iz>:
   105f4:	b530      	push	{r4, r5, lr}
   105f6:	4d13      	ldr	r5, [pc, #76]	; (10644 <__aeabi_d2iz+0x50>)
   105f8:	030a      	lsls	r2, r1, #12
   105fa:	004b      	lsls	r3, r1, #1
   105fc:	0b12      	lsrs	r2, r2, #12
   105fe:	0d5b      	lsrs	r3, r3, #21
   10600:	0fc9      	lsrs	r1, r1, #31
   10602:	2400      	movs	r4, #0
   10604:	42ab      	cmp	r3, r5
   10606:	dd10      	ble.n	1062a <__aeabi_d2iz+0x36>
   10608:	4c0f      	ldr	r4, [pc, #60]	; (10648 <__aeabi_d2iz+0x54>)
   1060a:	42a3      	cmp	r3, r4
   1060c:	dc0f      	bgt.n	1062e <__aeabi_d2iz+0x3a>
   1060e:	2480      	movs	r4, #128	; 0x80
   10610:	4d0e      	ldr	r5, [pc, #56]	; (1064c <__aeabi_d2iz+0x58>)
   10612:	0364      	lsls	r4, r4, #13
   10614:	4322      	orrs	r2, r4
   10616:	1aed      	subs	r5, r5, r3
   10618:	2d1f      	cmp	r5, #31
   1061a:	dd0b      	ble.n	10634 <__aeabi_d2iz+0x40>
   1061c:	480c      	ldr	r0, [pc, #48]	; (10650 <__aeabi_d2iz+0x5c>)
   1061e:	1ac3      	subs	r3, r0, r3
   10620:	40da      	lsrs	r2, r3
   10622:	4254      	negs	r4, r2
   10624:	2900      	cmp	r1, #0
   10626:	d100      	bne.n	1062a <__aeabi_d2iz+0x36>
   10628:	0014      	movs	r4, r2
   1062a:	0020      	movs	r0, r4
   1062c:	bd30      	pop	{r4, r5, pc}
   1062e:	4b09      	ldr	r3, [pc, #36]	; (10654 <__aeabi_d2iz+0x60>)
   10630:	18cc      	adds	r4, r1, r3
   10632:	e7fa      	b.n	1062a <__aeabi_d2iz+0x36>
   10634:	4c08      	ldr	r4, [pc, #32]	; (10658 <__aeabi_d2iz+0x64>)
   10636:	40e8      	lsrs	r0, r5
   10638:	46a4      	mov	ip, r4
   1063a:	4463      	add	r3, ip
   1063c:	409a      	lsls	r2, r3
   1063e:	4302      	orrs	r2, r0
   10640:	e7ef      	b.n	10622 <__aeabi_d2iz+0x2e>
   10642:	46c0      	nop			; (mov r8, r8)
   10644:	000003fe 	.word	0x000003fe
   10648:	0000041d 	.word	0x0000041d
   1064c:	00000433 	.word	0x00000433
   10650:	00000413 	.word	0x00000413
   10654:	7fffffff 	.word	0x7fffffff
   10658:	fffffbed 	.word	0xfffffbed

0001065c <__aeabi_ui2d>:
   1065c:	b510      	push	{r4, lr}
   1065e:	1e04      	subs	r4, r0, #0
   10660:	d028      	beq.n	106b4 <__aeabi_ui2d+0x58>
   10662:	f000 f833 	bl	106cc <__clzsi2>
   10666:	4b15      	ldr	r3, [pc, #84]	; (106bc <__aeabi_ui2d+0x60>)
   10668:	4a15      	ldr	r2, [pc, #84]	; (106c0 <__aeabi_ui2d+0x64>)
   1066a:	1a1b      	subs	r3, r3, r0
   1066c:	1ad2      	subs	r2, r2, r3
   1066e:	2a1f      	cmp	r2, #31
   10670:	dd15      	ble.n	1069e <__aeabi_ui2d+0x42>
   10672:	4a14      	ldr	r2, [pc, #80]	; (106c4 <__aeabi_ui2d+0x68>)
   10674:	1ad2      	subs	r2, r2, r3
   10676:	4094      	lsls	r4, r2
   10678:	2200      	movs	r2, #0
   1067a:	0324      	lsls	r4, r4, #12
   1067c:	055b      	lsls	r3, r3, #21
   1067e:	0b24      	lsrs	r4, r4, #12
   10680:	0d5b      	lsrs	r3, r3, #21
   10682:	2100      	movs	r1, #0
   10684:	0010      	movs	r0, r2
   10686:	0324      	lsls	r4, r4, #12
   10688:	0d0a      	lsrs	r2, r1, #20
   1068a:	0b24      	lsrs	r4, r4, #12
   1068c:	0512      	lsls	r2, r2, #20
   1068e:	4322      	orrs	r2, r4
   10690:	4c0d      	ldr	r4, [pc, #52]	; (106c8 <__aeabi_ui2d+0x6c>)
   10692:	051b      	lsls	r3, r3, #20
   10694:	4022      	ands	r2, r4
   10696:	4313      	orrs	r3, r2
   10698:	005b      	lsls	r3, r3, #1
   1069a:	0859      	lsrs	r1, r3, #1
   1069c:	bd10      	pop	{r4, pc}
   1069e:	0021      	movs	r1, r4
   106a0:	4091      	lsls	r1, r2
   106a2:	000a      	movs	r2, r1
   106a4:	210b      	movs	r1, #11
   106a6:	1a08      	subs	r0, r1, r0
   106a8:	40c4      	lsrs	r4, r0
   106aa:	055b      	lsls	r3, r3, #21
   106ac:	0324      	lsls	r4, r4, #12
   106ae:	0b24      	lsrs	r4, r4, #12
   106b0:	0d5b      	lsrs	r3, r3, #21
   106b2:	e7e6      	b.n	10682 <__aeabi_ui2d+0x26>
   106b4:	2300      	movs	r3, #0
   106b6:	2400      	movs	r4, #0
   106b8:	2200      	movs	r2, #0
   106ba:	e7e2      	b.n	10682 <__aeabi_ui2d+0x26>
   106bc:	0000041e 	.word	0x0000041e
   106c0:	00000433 	.word	0x00000433
   106c4:	00000413 	.word	0x00000413
   106c8:	800fffff 	.word	0x800fffff

000106cc <__clzsi2>:
   106cc:	211c      	movs	r1, #28
   106ce:	2301      	movs	r3, #1
   106d0:	041b      	lsls	r3, r3, #16
   106d2:	4298      	cmp	r0, r3
   106d4:	d301      	bcc.n	106da <__clzsi2+0xe>
   106d6:	0c00      	lsrs	r0, r0, #16
   106d8:	3910      	subs	r1, #16
   106da:	0a1b      	lsrs	r3, r3, #8
   106dc:	4298      	cmp	r0, r3
   106de:	d301      	bcc.n	106e4 <__clzsi2+0x18>
   106e0:	0a00      	lsrs	r0, r0, #8
   106e2:	3908      	subs	r1, #8
   106e4:	091b      	lsrs	r3, r3, #4
   106e6:	4298      	cmp	r0, r3
   106e8:	d301      	bcc.n	106ee <__clzsi2+0x22>
   106ea:	0900      	lsrs	r0, r0, #4
   106ec:	3904      	subs	r1, #4
   106ee:	a202      	add	r2, pc, #8	; (adr r2, 106f8 <__clzsi2+0x2c>)
   106f0:	5c10      	ldrb	r0, [r2, r0]
   106f2:	1840      	adds	r0, r0, r1
   106f4:	4770      	bx	lr
   106f6:	46c0      	nop			; (mov r8, r8)
   106f8:	02020304 	.word	0x02020304
   106fc:	01010101 	.word	0x01010101
	...

00010708 <__assert_func>:
   10708:	b530      	push	{r4, r5, lr}
   1070a:	001c      	movs	r4, r3
   1070c:	4b09      	ldr	r3, [pc, #36]	; (10734 <__assert_func+0x2c>)
   1070e:	0005      	movs	r5, r0
   10710:	681b      	ldr	r3, [r3, #0]
   10712:	b085      	sub	sp, #20
   10714:	68d8      	ldr	r0, [r3, #12]
   10716:	4b08      	ldr	r3, [pc, #32]	; (10738 <__assert_func+0x30>)
   10718:	2a00      	cmp	r2, #0
   1071a:	d101      	bne.n	10720 <__assert_func+0x18>
   1071c:	4b07      	ldr	r3, [pc, #28]	; (1073c <__assert_func+0x34>)
   1071e:	001a      	movs	r2, r3
   10720:	9202      	str	r2, [sp, #8]
   10722:	9301      	str	r3, [sp, #4]
   10724:	9100      	str	r1, [sp, #0]
   10726:	002b      	movs	r3, r5
   10728:	0022      	movs	r2, r4
   1072a:	4905      	ldr	r1, [pc, #20]	; (10740 <__assert_func+0x38>)
   1072c:	f000 f818 	bl	10760 <fiprintf>
   10730:	f001 f812 	bl	11758 <abort>
   10734:	200000a4 	.word	0x200000a4
   10738:	00014144 	.word	0x00014144
   1073c:	0001417f 	.word	0x0001417f
   10740:	00014151 	.word	0x00014151

00010744 <__cxa_atexit>:
   10744:	b570      	push	{r4, r5, r6, lr}
   10746:	4c05      	ldr	r4, [pc, #20]	; (1075c <__cxa_atexit+0x18>)
   10748:	0005      	movs	r5, r0
   1074a:	0013      	movs	r3, r2
   1074c:	1e20      	subs	r0, r4, #0
   1074e:	d004      	beq.n	1075a <__cxa_atexit+0x16>
   10750:	000a      	movs	r2, r1
   10752:	2002      	movs	r0, #2
   10754:	0029      	movs	r1, r5
   10756:	e000      	b.n	1075a <__cxa_atexit+0x16>
   10758:	bf00      	nop
   1075a:	bd70      	pop	{r4, r5, r6, pc}
   1075c:	00000000 	.word	0x00000000

00010760 <fiprintf>:
   10760:	b40e      	push	{r1, r2, r3}
   10762:	b503      	push	{r0, r1, lr}
   10764:	0001      	movs	r1, r0
   10766:	ab03      	add	r3, sp, #12
   10768:	4804      	ldr	r0, [pc, #16]	; (1077c <fiprintf+0x1c>)
   1076a:	cb04      	ldmia	r3!, {r2}
   1076c:	6800      	ldr	r0, [r0, #0]
   1076e:	9301      	str	r3, [sp, #4]
   10770:	f000 f940 	bl	109f4 <_vfiprintf_r>
   10774:	b002      	add	sp, #8
   10776:	bc08      	pop	{r3}
   10778:	b003      	add	sp, #12
   1077a:	4718      	bx	r3
   1077c:	200000a4 	.word	0x200000a4

00010780 <__libc_init_array>:
   10780:	b570      	push	{r4, r5, r6, lr}
   10782:	2600      	movs	r6, #0
   10784:	4d0c      	ldr	r5, [pc, #48]	; (107b8 <__libc_init_array+0x38>)
   10786:	4c0d      	ldr	r4, [pc, #52]	; (107bc <__libc_init_array+0x3c>)
   10788:	1b64      	subs	r4, r4, r5
   1078a:	10a4      	asrs	r4, r4, #2
   1078c:	42a6      	cmp	r6, r4
   1078e:	d109      	bne.n	107a4 <__libc_init_array+0x24>
   10790:	2600      	movs	r6, #0
   10792:	f002 fd2b 	bl	131ec <_init>
   10796:	4d0a      	ldr	r5, [pc, #40]	; (107c0 <__libc_init_array+0x40>)
   10798:	4c0a      	ldr	r4, [pc, #40]	; (107c4 <__libc_init_array+0x44>)
   1079a:	1b64      	subs	r4, r4, r5
   1079c:	10a4      	asrs	r4, r4, #2
   1079e:	42a6      	cmp	r6, r4
   107a0:	d105      	bne.n	107ae <__libc_init_array+0x2e>
   107a2:	bd70      	pop	{r4, r5, r6, pc}
   107a4:	00b3      	lsls	r3, r6, #2
   107a6:	58eb      	ldr	r3, [r5, r3]
   107a8:	4798      	blx	r3
   107aa:	3601      	adds	r6, #1
   107ac:	e7ee      	b.n	1078c <__libc_init_array+0xc>
   107ae:	00b3      	lsls	r3, r6, #2
   107b0:	58eb      	ldr	r3, [r5, r3]
   107b2:	4798      	blx	r3
   107b4:	3601      	adds	r6, #1
   107b6:	e7f2      	b.n	1079e <__libc_init_array+0x1e>
   107b8:	20000274 	.word	0x20000274
   107bc:	20000274 	.word	0x20000274
   107c0:	20000274 	.word	0x20000274
   107c4:	20000298 	.word	0x20000298

000107c8 <malloc>:
   107c8:	b510      	push	{r4, lr}
   107ca:	4b03      	ldr	r3, [pc, #12]	; (107d8 <malloc+0x10>)
   107cc:	0001      	movs	r1, r0
   107ce:	6818      	ldr	r0, [r3, #0]
   107d0:	f000 f88a 	bl	108e8 <_malloc_r>
   107d4:	bd10      	pop	{r4, pc}
   107d6:	46c0      	nop			; (mov r8, r8)
   107d8:	200000a4 	.word	0x200000a4

000107dc <free>:
   107dc:	b510      	push	{r4, lr}
   107de:	4b03      	ldr	r3, [pc, #12]	; (107ec <free+0x10>)
   107e0:	0001      	movs	r1, r0
   107e2:	6818      	ldr	r0, [r3, #0]
   107e4:	f000 f836 	bl	10854 <_free_r>
   107e8:	bd10      	pop	{r4, pc}
   107ea:	46c0      	nop			; (mov r8, r8)
   107ec:	200000a4 	.word	0x200000a4

000107f0 <__ascii_mbtowc>:
   107f0:	b082      	sub	sp, #8
   107f2:	2900      	cmp	r1, #0
   107f4:	d100      	bne.n	107f8 <__ascii_mbtowc+0x8>
   107f6:	a901      	add	r1, sp, #4
   107f8:	1e10      	subs	r0, r2, #0
   107fa:	d006      	beq.n	1080a <__ascii_mbtowc+0x1a>
   107fc:	2b00      	cmp	r3, #0
   107fe:	d006      	beq.n	1080e <__ascii_mbtowc+0x1e>
   10800:	7813      	ldrb	r3, [r2, #0]
   10802:	600b      	str	r3, [r1, #0]
   10804:	7810      	ldrb	r0, [r2, #0]
   10806:	1e43      	subs	r3, r0, #1
   10808:	4198      	sbcs	r0, r3
   1080a:	b002      	add	sp, #8
   1080c:	4770      	bx	lr
   1080e:	2002      	movs	r0, #2
   10810:	4240      	negs	r0, r0
   10812:	e7fa      	b.n	1080a <__ascii_mbtowc+0x1a>

00010814 <memcmp>:
   10814:	b530      	push	{r4, r5, lr}
   10816:	2400      	movs	r4, #0
   10818:	42a2      	cmp	r2, r4
   1081a:	d101      	bne.n	10820 <memcmp+0xc>
   1081c:	2000      	movs	r0, #0
   1081e:	e005      	b.n	1082c <memcmp+0x18>
   10820:	5d03      	ldrb	r3, [r0, r4]
   10822:	1c65      	adds	r5, r4, #1
   10824:	5d0c      	ldrb	r4, [r1, r4]
   10826:	42a3      	cmp	r3, r4
   10828:	d001      	beq.n	1082e <memcmp+0x1a>
   1082a:	1b18      	subs	r0, r3, r4
   1082c:	bd30      	pop	{r4, r5, pc}
   1082e:	002c      	movs	r4, r5
   10830:	e7f2      	b.n	10818 <memcmp+0x4>

00010832 <memcpy>:
   10832:	2300      	movs	r3, #0
   10834:	b510      	push	{r4, lr}
   10836:	429a      	cmp	r2, r3
   10838:	d100      	bne.n	1083c <memcpy+0xa>
   1083a:	bd10      	pop	{r4, pc}
   1083c:	5ccc      	ldrb	r4, [r1, r3]
   1083e:	54c4      	strb	r4, [r0, r3]
   10840:	3301      	adds	r3, #1
   10842:	e7f8      	b.n	10836 <memcpy+0x4>

00010844 <memset>:
   10844:	0003      	movs	r3, r0
   10846:	1882      	adds	r2, r0, r2
   10848:	4293      	cmp	r3, r2
   1084a:	d100      	bne.n	1084e <memset+0xa>
   1084c:	4770      	bx	lr
   1084e:	7019      	strb	r1, [r3, #0]
   10850:	3301      	adds	r3, #1
   10852:	e7f9      	b.n	10848 <memset+0x4>

00010854 <_free_r>:
   10854:	b570      	push	{r4, r5, r6, lr}
   10856:	0005      	movs	r5, r0
   10858:	2900      	cmp	r1, #0
   1085a:	d010      	beq.n	1087e <_free_r+0x2a>
   1085c:	1f0c      	subs	r4, r1, #4
   1085e:	6823      	ldr	r3, [r4, #0]
   10860:	2b00      	cmp	r3, #0
   10862:	da00      	bge.n	10866 <_free_r+0x12>
   10864:	18e4      	adds	r4, r4, r3
   10866:	0028      	movs	r0, r5
   10868:	f001 fffb 	bl	12862 <__malloc_lock>
   1086c:	4a1d      	ldr	r2, [pc, #116]	; (108e4 <_free_r+0x90>)
   1086e:	6813      	ldr	r3, [r2, #0]
   10870:	2b00      	cmp	r3, #0
   10872:	d105      	bne.n	10880 <_free_r+0x2c>
   10874:	6063      	str	r3, [r4, #4]
   10876:	6014      	str	r4, [r2, #0]
   10878:	0028      	movs	r0, r5
   1087a:	f001 fff3 	bl	12864 <__malloc_unlock>
   1087e:	bd70      	pop	{r4, r5, r6, pc}
   10880:	42a3      	cmp	r3, r4
   10882:	d909      	bls.n	10898 <_free_r+0x44>
   10884:	6821      	ldr	r1, [r4, #0]
   10886:	1860      	adds	r0, r4, r1
   10888:	4283      	cmp	r3, r0
   1088a:	d1f3      	bne.n	10874 <_free_r+0x20>
   1088c:	6818      	ldr	r0, [r3, #0]
   1088e:	685b      	ldr	r3, [r3, #4]
   10890:	1841      	adds	r1, r0, r1
   10892:	6021      	str	r1, [r4, #0]
   10894:	e7ee      	b.n	10874 <_free_r+0x20>
   10896:	0013      	movs	r3, r2
   10898:	685a      	ldr	r2, [r3, #4]
   1089a:	2a00      	cmp	r2, #0
   1089c:	d001      	beq.n	108a2 <_free_r+0x4e>
   1089e:	42a2      	cmp	r2, r4
   108a0:	d9f9      	bls.n	10896 <_free_r+0x42>
   108a2:	6819      	ldr	r1, [r3, #0]
   108a4:	1858      	adds	r0, r3, r1
   108a6:	42a0      	cmp	r0, r4
   108a8:	d10b      	bne.n	108c2 <_free_r+0x6e>
   108aa:	6820      	ldr	r0, [r4, #0]
   108ac:	1809      	adds	r1, r1, r0
   108ae:	1858      	adds	r0, r3, r1
   108b0:	6019      	str	r1, [r3, #0]
   108b2:	4282      	cmp	r2, r0
   108b4:	d1e0      	bne.n	10878 <_free_r+0x24>
   108b6:	6810      	ldr	r0, [r2, #0]
   108b8:	6852      	ldr	r2, [r2, #4]
   108ba:	1841      	adds	r1, r0, r1
   108bc:	6019      	str	r1, [r3, #0]
   108be:	605a      	str	r2, [r3, #4]
   108c0:	e7da      	b.n	10878 <_free_r+0x24>
   108c2:	42a0      	cmp	r0, r4
   108c4:	d902      	bls.n	108cc <_free_r+0x78>
   108c6:	230c      	movs	r3, #12
   108c8:	602b      	str	r3, [r5, #0]
   108ca:	e7d5      	b.n	10878 <_free_r+0x24>
   108cc:	6821      	ldr	r1, [r4, #0]
   108ce:	1860      	adds	r0, r4, r1
   108d0:	4282      	cmp	r2, r0
   108d2:	d103      	bne.n	108dc <_free_r+0x88>
   108d4:	6810      	ldr	r0, [r2, #0]
   108d6:	6852      	ldr	r2, [r2, #4]
   108d8:	1841      	adds	r1, r0, r1
   108da:	6021      	str	r1, [r4, #0]
   108dc:	6062      	str	r2, [r4, #4]
   108de:	605c      	str	r4, [r3, #4]
   108e0:	e7ca      	b.n	10878 <_free_r+0x24>
   108e2:	46c0      	nop			; (mov r8, r8)
   108e4:	20000f78 	.word	0x20000f78

000108e8 <_malloc_r>:
   108e8:	2303      	movs	r3, #3
   108ea:	b570      	push	{r4, r5, r6, lr}
   108ec:	1ccd      	adds	r5, r1, #3
   108ee:	439d      	bics	r5, r3
   108f0:	3508      	adds	r5, #8
   108f2:	0006      	movs	r6, r0
   108f4:	2d0c      	cmp	r5, #12
   108f6:	d21e      	bcs.n	10936 <_malloc_r+0x4e>
   108f8:	250c      	movs	r5, #12
   108fa:	42a9      	cmp	r1, r5
   108fc:	d81d      	bhi.n	1093a <_malloc_r+0x52>
   108fe:	0030      	movs	r0, r6
   10900:	f001 ffaf 	bl	12862 <__malloc_lock>
   10904:	4a25      	ldr	r2, [pc, #148]	; (1099c <_malloc_r+0xb4>)
   10906:	6814      	ldr	r4, [r2, #0]
   10908:	0021      	movs	r1, r4
   1090a:	2900      	cmp	r1, #0
   1090c:	d119      	bne.n	10942 <_malloc_r+0x5a>
   1090e:	4c24      	ldr	r4, [pc, #144]	; (109a0 <_malloc_r+0xb8>)
   10910:	6823      	ldr	r3, [r4, #0]
   10912:	2b00      	cmp	r3, #0
   10914:	d103      	bne.n	1091e <_malloc_r+0x36>
   10916:	0030      	movs	r0, r6
   10918:	f000 fe02 	bl	11520 <_sbrk_r>
   1091c:	6020      	str	r0, [r4, #0]
   1091e:	0029      	movs	r1, r5
   10920:	0030      	movs	r0, r6
   10922:	f000 fdfd 	bl	11520 <_sbrk_r>
   10926:	1c43      	adds	r3, r0, #1
   10928:	d12c      	bne.n	10984 <_malloc_r+0x9c>
   1092a:	230c      	movs	r3, #12
   1092c:	0030      	movs	r0, r6
   1092e:	6033      	str	r3, [r6, #0]
   10930:	f001 ff98 	bl	12864 <__malloc_unlock>
   10934:	e003      	b.n	1093e <_malloc_r+0x56>
   10936:	2d00      	cmp	r5, #0
   10938:	dadf      	bge.n	108fa <_malloc_r+0x12>
   1093a:	230c      	movs	r3, #12
   1093c:	6033      	str	r3, [r6, #0]
   1093e:	2000      	movs	r0, #0
   10940:	bd70      	pop	{r4, r5, r6, pc}
   10942:	680b      	ldr	r3, [r1, #0]
   10944:	1b5b      	subs	r3, r3, r5
   10946:	d41a      	bmi.n	1097e <_malloc_r+0x96>
   10948:	2b0b      	cmp	r3, #11
   1094a:	d903      	bls.n	10954 <_malloc_r+0x6c>
   1094c:	600b      	str	r3, [r1, #0]
   1094e:	18cc      	adds	r4, r1, r3
   10950:	6025      	str	r5, [r4, #0]
   10952:	e003      	b.n	1095c <_malloc_r+0x74>
   10954:	428c      	cmp	r4, r1
   10956:	d10e      	bne.n	10976 <_malloc_r+0x8e>
   10958:	6863      	ldr	r3, [r4, #4]
   1095a:	6013      	str	r3, [r2, #0]
   1095c:	0030      	movs	r0, r6
   1095e:	f001 ff81 	bl	12864 <__malloc_unlock>
   10962:	0020      	movs	r0, r4
   10964:	2207      	movs	r2, #7
   10966:	300b      	adds	r0, #11
   10968:	1d23      	adds	r3, r4, #4
   1096a:	4390      	bics	r0, r2
   1096c:	1ac3      	subs	r3, r0, r3
   1096e:	d0e7      	beq.n	10940 <_malloc_r+0x58>
   10970:	425a      	negs	r2, r3
   10972:	50e2      	str	r2, [r4, r3]
   10974:	e7e4      	b.n	10940 <_malloc_r+0x58>
   10976:	684b      	ldr	r3, [r1, #4]
   10978:	6063      	str	r3, [r4, #4]
   1097a:	000c      	movs	r4, r1
   1097c:	e7ee      	b.n	1095c <_malloc_r+0x74>
   1097e:	000c      	movs	r4, r1
   10980:	6849      	ldr	r1, [r1, #4]
   10982:	e7c2      	b.n	1090a <_malloc_r+0x22>
   10984:	2303      	movs	r3, #3
   10986:	1cc4      	adds	r4, r0, #3
   10988:	439c      	bics	r4, r3
   1098a:	42a0      	cmp	r0, r4
   1098c:	d0e0      	beq.n	10950 <_malloc_r+0x68>
   1098e:	1a21      	subs	r1, r4, r0
   10990:	0030      	movs	r0, r6
   10992:	f000 fdc5 	bl	11520 <_sbrk_r>
   10996:	1c43      	adds	r3, r0, #1
   10998:	d1da      	bne.n	10950 <_malloc_r+0x68>
   1099a:	e7c6      	b.n	1092a <_malloc_r+0x42>
   1099c:	20000f78 	.word	0x20000f78
   109a0:	20000f7c 	.word	0x20000f7c

000109a4 <__sfputc_r>:
   109a4:	6893      	ldr	r3, [r2, #8]
   109a6:	b510      	push	{r4, lr}
   109a8:	3b01      	subs	r3, #1
   109aa:	6093      	str	r3, [r2, #8]
   109ac:	2b00      	cmp	r3, #0
   109ae:	da05      	bge.n	109bc <__sfputc_r+0x18>
   109b0:	6994      	ldr	r4, [r2, #24]
   109b2:	42a3      	cmp	r3, r4
   109b4:	db08      	blt.n	109c8 <__sfputc_r+0x24>
   109b6:	b2cb      	uxtb	r3, r1
   109b8:	2b0a      	cmp	r3, #10
   109ba:	d005      	beq.n	109c8 <__sfputc_r+0x24>
   109bc:	6813      	ldr	r3, [r2, #0]
   109be:	1c58      	adds	r0, r3, #1
   109c0:	6010      	str	r0, [r2, #0]
   109c2:	7019      	strb	r1, [r3, #0]
   109c4:	b2c8      	uxtb	r0, r1
   109c6:	bd10      	pop	{r4, pc}
   109c8:	f000 fdee 	bl	115a8 <__swbuf_r>
   109cc:	e7fb      	b.n	109c6 <__sfputc_r+0x22>

000109ce <__sfputs_r>:
   109ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109d0:	0006      	movs	r6, r0
   109d2:	000f      	movs	r7, r1
   109d4:	0014      	movs	r4, r2
   109d6:	18d5      	adds	r5, r2, r3
   109d8:	42ac      	cmp	r4, r5
   109da:	d101      	bne.n	109e0 <__sfputs_r+0x12>
   109dc:	2000      	movs	r0, #0
   109de:	e007      	b.n	109f0 <__sfputs_r+0x22>
   109e0:	7821      	ldrb	r1, [r4, #0]
   109e2:	003a      	movs	r2, r7
   109e4:	0030      	movs	r0, r6
   109e6:	f7ff ffdd 	bl	109a4 <__sfputc_r>
   109ea:	3401      	adds	r4, #1
   109ec:	1c43      	adds	r3, r0, #1
   109ee:	d1f3      	bne.n	109d8 <__sfputs_r+0xa>
   109f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000109f4 <_vfiprintf_r>:
   109f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   109f6:	b09f      	sub	sp, #124	; 0x7c
   109f8:	0006      	movs	r6, r0
   109fa:	000f      	movs	r7, r1
   109fc:	0014      	movs	r4, r2
   109fe:	9305      	str	r3, [sp, #20]
   10a00:	2800      	cmp	r0, #0
   10a02:	d004      	beq.n	10a0e <_vfiprintf_r+0x1a>
   10a04:	6983      	ldr	r3, [r0, #24]
   10a06:	2b00      	cmp	r3, #0
   10a08:	d101      	bne.n	10a0e <_vfiprintf_r+0x1a>
   10a0a:	f001 fe11 	bl	12630 <__sinit>
   10a0e:	4b7f      	ldr	r3, [pc, #508]	; (10c0c <_vfiprintf_r+0x218>)
   10a10:	429f      	cmp	r7, r3
   10a12:	d15c      	bne.n	10ace <_vfiprintf_r+0xda>
   10a14:	6877      	ldr	r7, [r6, #4]
   10a16:	89bb      	ldrh	r3, [r7, #12]
   10a18:	071b      	lsls	r3, r3, #28
   10a1a:	d562      	bpl.n	10ae2 <_vfiprintf_r+0xee>
   10a1c:	693b      	ldr	r3, [r7, #16]
   10a1e:	2b00      	cmp	r3, #0
   10a20:	d05f      	beq.n	10ae2 <_vfiprintf_r+0xee>
   10a22:	2300      	movs	r3, #0
   10a24:	ad06      	add	r5, sp, #24
   10a26:	616b      	str	r3, [r5, #20]
   10a28:	3320      	adds	r3, #32
   10a2a:	766b      	strb	r3, [r5, #25]
   10a2c:	3310      	adds	r3, #16
   10a2e:	76ab      	strb	r3, [r5, #26]
   10a30:	9402      	str	r4, [sp, #8]
   10a32:	9c02      	ldr	r4, [sp, #8]
   10a34:	7823      	ldrb	r3, [r4, #0]
   10a36:	2b00      	cmp	r3, #0
   10a38:	d15d      	bne.n	10af6 <_vfiprintf_r+0x102>
   10a3a:	9b02      	ldr	r3, [sp, #8]
   10a3c:	1ae3      	subs	r3, r4, r3
   10a3e:	9304      	str	r3, [sp, #16]
   10a40:	d00d      	beq.n	10a5e <_vfiprintf_r+0x6a>
   10a42:	9b04      	ldr	r3, [sp, #16]
   10a44:	9a02      	ldr	r2, [sp, #8]
   10a46:	0039      	movs	r1, r7
   10a48:	0030      	movs	r0, r6
   10a4a:	f7ff ffc0 	bl	109ce <__sfputs_r>
   10a4e:	1c43      	adds	r3, r0, #1
   10a50:	d100      	bne.n	10a54 <_vfiprintf_r+0x60>
   10a52:	e0cc      	b.n	10bee <_vfiprintf_r+0x1fa>
   10a54:	696a      	ldr	r2, [r5, #20]
   10a56:	9b04      	ldr	r3, [sp, #16]
   10a58:	4694      	mov	ip, r2
   10a5a:	4463      	add	r3, ip
   10a5c:	616b      	str	r3, [r5, #20]
   10a5e:	7823      	ldrb	r3, [r4, #0]
   10a60:	2b00      	cmp	r3, #0
   10a62:	d100      	bne.n	10a66 <_vfiprintf_r+0x72>
   10a64:	e0c3      	b.n	10bee <_vfiprintf_r+0x1fa>
   10a66:	2201      	movs	r2, #1
   10a68:	2300      	movs	r3, #0
   10a6a:	4252      	negs	r2, r2
   10a6c:	606a      	str	r2, [r5, #4]
   10a6e:	a902      	add	r1, sp, #8
   10a70:	3254      	adds	r2, #84	; 0x54
   10a72:	1852      	adds	r2, r2, r1
   10a74:	3401      	adds	r4, #1
   10a76:	602b      	str	r3, [r5, #0]
   10a78:	60eb      	str	r3, [r5, #12]
   10a7a:	60ab      	str	r3, [r5, #8]
   10a7c:	7013      	strb	r3, [r2, #0]
   10a7e:	65ab      	str	r3, [r5, #88]	; 0x58
   10a80:	7821      	ldrb	r1, [r4, #0]
   10a82:	2205      	movs	r2, #5
   10a84:	4862      	ldr	r0, [pc, #392]	; (10c10 <_vfiprintf_r+0x21c>)
   10a86:	f001 fee1 	bl	1284c <memchr>
   10a8a:	1c63      	adds	r3, r4, #1
   10a8c:	469c      	mov	ip, r3
   10a8e:	2800      	cmp	r0, #0
   10a90:	d135      	bne.n	10afe <_vfiprintf_r+0x10a>
   10a92:	6829      	ldr	r1, [r5, #0]
   10a94:	06cb      	lsls	r3, r1, #27
   10a96:	d504      	bpl.n	10aa2 <_vfiprintf_r+0xae>
   10a98:	2353      	movs	r3, #83	; 0x53
   10a9a:	aa02      	add	r2, sp, #8
   10a9c:	3020      	adds	r0, #32
   10a9e:	189b      	adds	r3, r3, r2
   10aa0:	7018      	strb	r0, [r3, #0]
   10aa2:	070b      	lsls	r3, r1, #28
   10aa4:	d504      	bpl.n	10ab0 <_vfiprintf_r+0xbc>
   10aa6:	2353      	movs	r3, #83	; 0x53
   10aa8:	202b      	movs	r0, #43	; 0x2b
   10aaa:	aa02      	add	r2, sp, #8
   10aac:	189b      	adds	r3, r3, r2
   10aae:	7018      	strb	r0, [r3, #0]
   10ab0:	7823      	ldrb	r3, [r4, #0]
   10ab2:	2b2a      	cmp	r3, #42	; 0x2a
   10ab4:	d02c      	beq.n	10b10 <_vfiprintf_r+0x11c>
   10ab6:	2000      	movs	r0, #0
   10ab8:	210a      	movs	r1, #10
   10aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10abc:	7822      	ldrb	r2, [r4, #0]
   10abe:	3a30      	subs	r2, #48	; 0x30
   10ac0:	2a09      	cmp	r2, #9
   10ac2:	d800      	bhi.n	10ac6 <_vfiprintf_r+0xd2>
   10ac4:	e06b      	b.n	10b9e <_vfiprintf_r+0x1aa>
   10ac6:	2800      	cmp	r0, #0
   10ac8:	d02a      	beq.n	10b20 <_vfiprintf_r+0x12c>
   10aca:	9309      	str	r3, [sp, #36]	; 0x24
   10acc:	e028      	b.n	10b20 <_vfiprintf_r+0x12c>
   10ace:	4b51      	ldr	r3, [pc, #324]	; (10c14 <_vfiprintf_r+0x220>)
   10ad0:	429f      	cmp	r7, r3
   10ad2:	d101      	bne.n	10ad8 <_vfiprintf_r+0xe4>
   10ad4:	68b7      	ldr	r7, [r6, #8]
   10ad6:	e79e      	b.n	10a16 <_vfiprintf_r+0x22>
   10ad8:	4b4f      	ldr	r3, [pc, #316]	; (10c18 <_vfiprintf_r+0x224>)
   10ada:	429f      	cmp	r7, r3
   10adc:	d19b      	bne.n	10a16 <_vfiprintf_r+0x22>
   10ade:	68f7      	ldr	r7, [r6, #12]
   10ae0:	e799      	b.n	10a16 <_vfiprintf_r+0x22>
   10ae2:	0039      	movs	r1, r7
   10ae4:	0030      	movs	r0, r6
   10ae6:	f000 fdc1 	bl	1166c <__swsetup_r>
   10aea:	2800      	cmp	r0, #0
   10aec:	d099      	beq.n	10a22 <_vfiprintf_r+0x2e>
   10aee:	2001      	movs	r0, #1
   10af0:	4240      	negs	r0, r0
   10af2:	b01f      	add	sp, #124	; 0x7c
   10af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10af6:	2b25      	cmp	r3, #37	; 0x25
   10af8:	d09f      	beq.n	10a3a <_vfiprintf_r+0x46>
   10afa:	3401      	adds	r4, #1
   10afc:	e79a      	b.n	10a34 <_vfiprintf_r+0x40>
   10afe:	4b44      	ldr	r3, [pc, #272]	; (10c10 <_vfiprintf_r+0x21c>)
   10b00:	6829      	ldr	r1, [r5, #0]
   10b02:	1ac0      	subs	r0, r0, r3
   10b04:	2301      	movs	r3, #1
   10b06:	4083      	lsls	r3, r0
   10b08:	430b      	orrs	r3, r1
   10b0a:	602b      	str	r3, [r5, #0]
   10b0c:	4664      	mov	r4, ip
   10b0e:	e7b7      	b.n	10a80 <_vfiprintf_r+0x8c>
   10b10:	9b05      	ldr	r3, [sp, #20]
   10b12:	1d18      	adds	r0, r3, #4
   10b14:	681b      	ldr	r3, [r3, #0]
   10b16:	9005      	str	r0, [sp, #20]
   10b18:	2b00      	cmp	r3, #0
   10b1a:	db3a      	blt.n	10b92 <_vfiprintf_r+0x19e>
   10b1c:	9309      	str	r3, [sp, #36]	; 0x24
   10b1e:	4664      	mov	r4, ip
   10b20:	7823      	ldrb	r3, [r4, #0]
   10b22:	2b2e      	cmp	r3, #46	; 0x2e
   10b24:	d10b      	bne.n	10b3e <_vfiprintf_r+0x14a>
   10b26:	7863      	ldrb	r3, [r4, #1]
   10b28:	1c62      	adds	r2, r4, #1
   10b2a:	2b2a      	cmp	r3, #42	; 0x2a
   10b2c:	d13f      	bne.n	10bae <_vfiprintf_r+0x1ba>
   10b2e:	9b05      	ldr	r3, [sp, #20]
   10b30:	3402      	adds	r4, #2
   10b32:	1d1a      	adds	r2, r3, #4
   10b34:	681b      	ldr	r3, [r3, #0]
   10b36:	9205      	str	r2, [sp, #20]
   10b38:	2b00      	cmp	r3, #0
   10b3a:	db35      	blt.n	10ba8 <_vfiprintf_r+0x1b4>
   10b3c:	9307      	str	r3, [sp, #28]
   10b3e:	7821      	ldrb	r1, [r4, #0]
   10b40:	2203      	movs	r2, #3
   10b42:	4836      	ldr	r0, [pc, #216]	; (10c1c <_vfiprintf_r+0x228>)
   10b44:	f001 fe82 	bl	1284c <memchr>
   10b48:	2800      	cmp	r0, #0
   10b4a:	d007      	beq.n	10b5c <_vfiprintf_r+0x168>
   10b4c:	4b33      	ldr	r3, [pc, #204]	; (10c1c <_vfiprintf_r+0x228>)
   10b4e:	682a      	ldr	r2, [r5, #0]
   10b50:	1ac0      	subs	r0, r0, r3
   10b52:	2340      	movs	r3, #64	; 0x40
   10b54:	4083      	lsls	r3, r0
   10b56:	4313      	orrs	r3, r2
   10b58:	602b      	str	r3, [r5, #0]
   10b5a:	3401      	adds	r4, #1
   10b5c:	7821      	ldrb	r1, [r4, #0]
   10b5e:	1c63      	adds	r3, r4, #1
   10b60:	2206      	movs	r2, #6
   10b62:	482f      	ldr	r0, [pc, #188]	; (10c20 <_vfiprintf_r+0x22c>)
   10b64:	9302      	str	r3, [sp, #8]
   10b66:	7629      	strb	r1, [r5, #24]
   10b68:	f001 fe70 	bl	1284c <memchr>
   10b6c:	2800      	cmp	r0, #0
   10b6e:	d044      	beq.n	10bfa <_vfiprintf_r+0x206>
   10b70:	4b2c      	ldr	r3, [pc, #176]	; (10c24 <_vfiprintf_r+0x230>)
   10b72:	2b00      	cmp	r3, #0
   10b74:	d12f      	bne.n	10bd6 <_vfiprintf_r+0x1e2>
   10b76:	6829      	ldr	r1, [r5, #0]
   10b78:	9b05      	ldr	r3, [sp, #20]
   10b7a:	2207      	movs	r2, #7
   10b7c:	05c9      	lsls	r1, r1, #23
   10b7e:	d528      	bpl.n	10bd2 <_vfiprintf_r+0x1de>
   10b80:	189b      	adds	r3, r3, r2
   10b82:	4393      	bics	r3, r2
   10b84:	3308      	adds	r3, #8
   10b86:	9305      	str	r3, [sp, #20]
   10b88:	696b      	ldr	r3, [r5, #20]
   10b8a:	9a03      	ldr	r2, [sp, #12]
   10b8c:	189b      	adds	r3, r3, r2
   10b8e:	616b      	str	r3, [r5, #20]
   10b90:	e74f      	b.n	10a32 <_vfiprintf_r+0x3e>
   10b92:	425b      	negs	r3, r3
   10b94:	60eb      	str	r3, [r5, #12]
   10b96:	2302      	movs	r3, #2
   10b98:	430b      	orrs	r3, r1
   10b9a:	602b      	str	r3, [r5, #0]
   10b9c:	e7bf      	b.n	10b1e <_vfiprintf_r+0x12a>
   10b9e:	434b      	muls	r3, r1
   10ba0:	3401      	adds	r4, #1
   10ba2:	189b      	adds	r3, r3, r2
   10ba4:	2001      	movs	r0, #1
   10ba6:	e789      	b.n	10abc <_vfiprintf_r+0xc8>
   10ba8:	2301      	movs	r3, #1
   10baa:	425b      	negs	r3, r3
   10bac:	e7c6      	b.n	10b3c <_vfiprintf_r+0x148>
   10bae:	2300      	movs	r3, #0
   10bb0:	0014      	movs	r4, r2
   10bb2:	200a      	movs	r0, #10
   10bb4:	001a      	movs	r2, r3
   10bb6:	606b      	str	r3, [r5, #4]
   10bb8:	7821      	ldrb	r1, [r4, #0]
   10bba:	3930      	subs	r1, #48	; 0x30
   10bbc:	2909      	cmp	r1, #9
   10bbe:	d903      	bls.n	10bc8 <_vfiprintf_r+0x1d4>
   10bc0:	2b00      	cmp	r3, #0
   10bc2:	d0bc      	beq.n	10b3e <_vfiprintf_r+0x14a>
   10bc4:	9207      	str	r2, [sp, #28]
   10bc6:	e7ba      	b.n	10b3e <_vfiprintf_r+0x14a>
   10bc8:	4342      	muls	r2, r0
   10bca:	3401      	adds	r4, #1
   10bcc:	1852      	adds	r2, r2, r1
   10bce:	2301      	movs	r3, #1
   10bd0:	e7f2      	b.n	10bb8 <_vfiprintf_r+0x1c4>
   10bd2:	3307      	adds	r3, #7
   10bd4:	e7d5      	b.n	10b82 <_vfiprintf_r+0x18e>
   10bd6:	ab05      	add	r3, sp, #20
   10bd8:	9300      	str	r3, [sp, #0]
   10bda:	003a      	movs	r2, r7
   10bdc:	4b12      	ldr	r3, [pc, #72]	; (10c28 <_vfiprintf_r+0x234>)
   10bde:	0029      	movs	r1, r5
   10be0:	0030      	movs	r0, r6
   10be2:	f000 f8bf 	bl	10d64 <_printf_float>
   10be6:	9003      	str	r0, [sp, #12]
   10be8:	9b03      	ldr	r3, [sp, #12]
   10bea:	3301      	adds	r3, #1
   10bec:	d1cc      	bne.n	10b88 <_vfiprintf_r+0x194>
   10bee:	89bb      	ldrh	r3, [r7, #12]
   10bf0:	065b      	lsls	r3, r3, #25
   10bf2:	d500      	bpl.n	10bf6 <_vfiprintf_r+0x202>
   10bf4:	e77b      	b.n	10aee <_vfiprintf_r+0xfa>
   10bf6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10bf8:	e77b      	b.n	10af2 <_vfiprintf_r+0xfe>
   10bfa:	ab05      	add	r3, sp, #20
   10bfc:	9300      	str	r3, [sp, #0]
   10bfe:	003a      	movs	r2, r7
   10c00:	4b09      	ldr	r3, [pc, #36]	; (10c28 <_vfiprintf_r+0x234>)
   10c02:	0029      	movs	r1, r5
   10c04:	0030      	movs	r0, r6
   10c06:	f000 fb67 	bl	112d8 <_printf_i>
   10c0a:	e7ec      	b.n	10be6 <_vfiprintf_r+0x1f2>
   10c0c:	00014304 	.word	0x00014304
   10c10:	0001418e 	.word	0x0001418e
   10c14:	00014324 	.word	0x00014324
   10c18:	000142e4 	.word	0x000142e4
   10c1c:	00014194 	.word	0x00014194
   10c20:	00014198 	.word	0x00014198
   10c24:	00010d65 	.word	0x00010d65
   10c28:	000109cf 	.word	0x000109cf

00010c2c <__cvt>:
   10c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c2e:	b08b      	sub	sp, #44	; 0x2c
   10c30:	0014      	movs	r4, r2
   10c32:	1e1d      	subs	r5, r3, #0
   10c34:	9912      	ldr	r1, [sp, #72]	; 0x48
   10c36:	da53      	bge.n	10ce0 <__cvt+0xb4>
   10c38:	2480      	movs	r4, #128	; 0x80
   10c3a:	0624      	lsls	r4, r4, #24
   10c3c:	191b      	adds	r3, r3, r4
   10c3e:	001d      	movs	r5, r3
   10c40:	0014      	movs	r4, r2
   10c42:	232d      	movs	r3, #45	; 0x2d
   10c44:	700b      	strb	r3, [r1, #0]
   10c46:	2320      	movs	r3, #32
   10c48:	9e14      	ldr	r6, [sp, #80]	; 0x50
   10c4a:	2203      	movs	r2, #3
   10c4c:	439e      	bics	r6, r3
   10c4e:	2e46      	cmp	r6, #70	; 0x46
   10c50:	d007      	beq.n	10c62 <__cvt+0x36>
   10c52:	0033      	movs	r3, r6
   10c54:	3b45      	subs	r3, #69	; 0x45
   10c56:	4259      	negs	r1, r3
   10c58:	414b      	adcs	r3, r1
   10c5a:	9910      	ldr	r1, [sp, #64]	; 0x40
   10c5c:	3a01      	subs	r2, #1
   10c5e:	18cb      	adds	r3, r1, r3
   10c60:	9310      	str	r3, [sp, #64]	; 0x40
   10c62:	ab09      	add	r3, sp, #36	; 0x24
   10c64:	9304      	str	r3, [sp, #16]
   10c66:	ab08      	add	r3, sp, #32
   10c68:	9303      	str	r3, [sp, #12]
   10c6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10c6c:	9200      	str	r2, [sp, #0]
   10c6e:	9302      	str	r3, [sp, #8]
   10c70:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10c72:	0022      	movs	r2, r4
   10c74:	9301      	str	r3, [sp, #4]
   10c76:	002b      	movs	r3, r5
   10c78:	f000 fdfa 	bl	11870 <_dtoa_r>
   10c7c:	0007      	movs	r7, r0
   10c7e:	2e47      	cmp	r6, #71	; 0x47
   10c80:	d102      	bne.n	10c88 <__cvt+0x5c>
   10c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10c84:	07db      	lsls	r3, r3, #31
   10c86:	d524      	bpl.n	10cd2 <__cvt+0xa6>
   10c88:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10c8a:	18fb      	adds	r3, r7, r3
   10c8c:	9307      	str	r3, [sp, #28]
   10c8e:	2e46      	cmp	r6, #70	; 0x46
   10c90:	d114      	bne.n	10cbc <__cvt+0x90>
   10c92:	783b      	ldrb	r3, [r7, #0]
   10c94:	2b30      	cmp	r3, #48	; 0x30
   10c96:	d10c      	bne.n	10cb2 <__cvt+0x86>
   10c98:	2200      	movs	r2, #0
   10c9a:	2300      	movs	r3, #0
   10c9c:	0020      	movs	r0, r4
   10c9e:	0029      	movs	r1, r5
   10ca0:	f7fd ff80 	bl	eba4 <__aeabi_dcmpeq>
   10ca4:	2800      	cmp	r0, #0
   10ca6:	d104      	bne.n	10cb2 <__cvt+0x86>
   10ca8:	2301      	movs	r3, #1
   10caa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10cac:	1a9b      	subs	r3, r3, r2
   10cae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10cb0:	6013      	str	r3, [r2, #0]
   10cb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10cb4:	9a07      	ldr	r2, [sp, #28]
   10cb6:	681b      	ldr	r3, [r3, #0]
   10cb8:	18d3      	adds	r3, r2, r3
   10cba:	9307      	str	r3, [sp, #28]
   10cbc:	2200      	movs	r2, #0
   10cbe:	2300      	movs	r3, #0
   10cc0:	0020      	movs	r0, r4
   10cc2:	0029      	movs	r1, r5
   10cc4:	f7fd ff6e 	bl	eba4 <__aeabi_dcmpeq>
   10cc8:	2230      	movs	r2, #48	; 0x30
   10cca:	2800      	cmp	r0, #0
   10ccc:	d00d      	beq.n	10cea <__cvt+0xbe>
   10cce:	9b07      	ldr	r3, [sp, #28]
   10cd0:	9309      	str	r3, [sp, #36]	; 0x24
   10cd2:	0038      	movs	r0, r7
   10cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10cd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10cd8:	1bdb      	subs	r3, r3, r7
   10cda:	6013      	str	r3, [r2, #0]
   10cdc:	b00b      	add	sp, #44	; 0x2c
   10cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ce0:	2300      	movs	r3, #0
   10ce2:	e7af      	b.n	10c44 <__cvt+0x18>
   10ce4:	1c59      	adds	r1, r3, #1
   10ce6:	9109      	str	r1, [sp, #36]	; 0x24
   10ce8:	701a      	strb	r2, [r3, #0]
   10cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10cec:	9907      	ldr	r1, [sp, #28]
   10cee:	4299      	cmp	r1, r3
   10cf0:	d8f8      	bhi.n	10ce4 <__cvt+0xb8>
   10cf2:	e7ee      	b.n	10cd2 <__cvt+0xa6>

00010cf4 <__exponent>:
   10cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cf6:	232b      	movs	r3, #43	; 0x2b
   10cf8:	b085      	sub	sp, #20
   10cfa:	0007      	movs	r7, r0
   10cfc:	000c      	movs	r4, r1
   10cfe:	7002      	strb	r2, [r0, #0]
   10d00:	1c86      	adds	r6, r0, #2
   10d02:	2900      	cmp	r1, #0
   10d04:	da01      	bge.n	10d0a <__exponent+0x16>
   10d06:	232d      	movs	r3, #45	; 0x2d
   10d08:	424c      	negs	r4, r1
   10d0a:	707b      	strb	r3, [r7, #1]
   10d0c:	2c09      	cmp	r4, #9
   10d0e:	dd23      	ble.n	10d58 <__exponent+0x64>
   10d10:	ab02      	add	r3, sp, #8
   10d12:	1ddd      	adds	r5, r3, #7
   10d14:	1e6b      	subs	r3, r5, #1
   10d16:	0020      	movs	r0, r4
   10d18:	210a      	movs	r1, #10
   10d1a:	9301      	str	r3, [sp, #4]
   10d1c:	f7fd ff2c 	bl	eb78 <__aeabi_idivmod>
   10d20:	1e6b      	subs	r3, r5, #1
   10d22:	3130      	adds	r1, #48	; 0x30
   10d24:	7019      	strb	r1, [r3, #0]
   10d26:	0020      	movs	r0, r4
   10d28:	210a      	movs	r1, #10
   10d2a:	f7fd fe3f 	bl	e9ac <__divsi3>
   10d2e:	0004      	movs	r4, r0
   10d30:	2809      	cmp	r0, #9
   10d32:	dc0a      	bgt.n	10d4a <__exponent+0x56>
   10d34:	3d02      	subs	r5, #2
   10d36:	3430      	adds	r4, #48	; 0x30
   10d38:	702c      	strb	r4, [r5, #0]
   10d3a:	ab02      	add	r3, sp, #8
   10d3c:	3307      	adds	r3, #7
   10d3e:	0030      	movs	r0, r6
   10d40:	42ab      	cmp	r3, r5
   10d42:	d804      	bhi.n	10d4e <__exponent+0x5a>
   10d44:	1bc0      	subs	r0, r0, r7
   10d46:	b005      	add	sp, #20
   10d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d4a:	9d01      	ldr	r5, [sp, #4]
   10d4c:	e7e2      	b.n	10d14 <__exponent+0x20>
   10d4e:	782b      	ldrb	r3, [r5, #0]
   10d50:	3501      	adds	r5, #1
   10d52:	7033      	strb	r3, [r6, #0]
   10d54:	3601      	adds	r6, #1
   10d56:	e7f0      	b.n	10d3a <__exponent+0x46>
   10d58:	2330      	movs	r3, #48	; 0x30
   10d5a:	18e4      	adds	r4, r4, r3
   10d5c:	7033      	strb	r3, [r6, #0]
   10d5e:	1cb0      	adds	r0, r6, #2
   10d60:	7074      	strb	r4, [r6, #1]
   10d62:	e7ef      	b.n	10d44 <__exponent+0x50>

00010d64 <_printf_float>:
   10d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d66:	b095      	sub	sp, #84	; 0x54
   10d68:	000c      	movs	r4, r1
   10d6a:	920a      	str	r2, [sp, #40]	; 0x28
   10d6c:	930b      	str	r3, [sp, #44]	; 0x2c
   10d6e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   10d70:	9009      	str	r0, [sp, #36]	; 0x24
   10d72:	f001 fcf3 	bl	1275c <_localeconv_r>
   10d76:	6803      	ldr	r3, [r0, #0]
   10d78:	0018      	movs	r0, r3
   10d7a:	930d      	str	r3, [sp, #52]	; 0x34
   10d7c:	f000 fbf8 	bl	11570 <strlen>
   10d80:	2300      	movs	r3, #0
   10d82:	9312      	str	r3, [sp, #72]	; 0x48
   10d84:	6823      	ldr	r3, [r4, #0]
   10d86:	900e      	str	r0, [sp, #56]	; 0x38
   10d88:	930c      	str	r3, [sp, #48]	; 0x30
   10d8a:	990c      	ldr	r1, [sp, #48]	; 0x30
   10d8c:	7e27      	ldrb	r7, [r4, #24]
   10d8e:	682b      	ldr	r3, [r5, #0]
   10d90:	2207      	movs	r2, #7
   10d92:	05c9      	lsls	r1, r1, #23
   10d94:	d547      	bpl.n	10e26 <_printf_float+0xc2>
   10d96:	189b      	adds	r3, r3, r2
   10d98:	4393      	bics	r3, r2
   10d9a:	001a      	movs	r2, r3
   10d9c:	3208      	adds	r2, #8
   10d9e:	602a      	str	r2, [r5, #0]
   10da0:	681a      	ldr	r2, [r3, #0]
   10da2:	685b      	ldr	r3, [r3, #4]
   10da4:	64a2      	str	r2, [r4, #72]	; 0x48
   10da6:	64e3      	str	r3, [r4, #76]	; 0x4c
   10da8:	2201      	movs	r2, #1
   10daa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   10dac:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   10dae:	006b      	lsls	r3, r5, #1
   10db0:	085b      	lsrs	r3, r3, #1
   10db2:	930f      	str	r3, [sp, #60]	; 0x3c
   10db4:	4252      	negs	r2, r2
   10db6:	4ba7      	ldr	r3, [pc, #668]	; (11054 <_printf_float+0x2f0>)
   10db8:	0030      	movs	r0, r6
   10dba:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10dbc:	f7ff fbfa 	bl	105b4 <__aeabi_dcmpun>
   10dc0:	2800      	cmp	r0, #0
   10dc2:	d000      	beq.n	10dc6 <_printf_float+0x62>
   10dc4:	e206      	b.n	111d4 <_printf_float+0x470>
   10dc6:	2201      	movs	r2, #1
   10dc8:	4ba2      	ldr	r3, [pc, #648]	; (11054 <_printf_float+0x2f0>)
   10dca:	4252      	negs	r2, r2
   10dcc:	0030      	movs	r0, r6
   10dce:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10dd0:	f7fd fef8 	bl	ebc4 <__aeabi_dcmple>
   10dd4:	2800      	cmp	r0, #0
   10dd6:	d000      	beq.n	10dda <_printf_float+0x76>
   10dd8:	e1fc      	b.n	111d4 <_printf_float+0x470>
   10dda:	2200      	movs	r2, #0
   10ddc:	2300      	movs	r3, #0
   10dde:	0030      	movs	r0, r6
   10de0:	0029      	movs	r1, r5
   10de2:	f7fd fee5 	bl	ebb0 <__aeabi_dcmplt>
   10de6:	2800      	cmp	r0, #0
   10de8:	d003      	beq.n	10df2 <_printf_float+0x8e>
   10dea:	0023      	movs	r3, r4
   10dec:	222d      	movs	r2, #45	; 0x2d
   10dee:	3343      	adds	r3, #67	; 0x43
   10df0:	701a      	strb	r2, [r3, #0]
   10df2:	4d99      	ldr	r5, [pc, #612]	; (11058 <_printf_float+0x2f4>)
   10df4:	2f47      	cmp	r7, #71	; 0x47
   10df6:	d800      	bhi.n	10dfa <_printf_float+0x96>
   10df8:	4d98      	ldr	r5, [pc, #608]	; (1105c <_printf_float+0x2f8>)
   10dfa:	2303      	movs	r3, #3
   10dfc:	2600      	movs	r6, #0
   10dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10e00:	6123      	str	r3, [r4, #16]
   10e02:	3301      	adds	r3, #1
   10e04:	439a      	bics	r2, r3
   10e06:	6022      	str	r2, [r4, #0]
   10e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10e0a:	aa13      	add	r2, sp, #76	; 0x4c
   10e0c:	9300      	str	r3, [sp, #0]
   10e0e:	0021      	movs	r1, r4
   10e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10e12:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e14:	f000 f9f2 	bl	111fc <_printf_common>
   10e18:	1c43      	adds	r3, r0, #1
   10e1a:	d000      	beq.n	10e1e <_printf_float+0xba>
   10e1c:	e09c      	b.n	10f58 <_printf_float+0x1f4>
   10e1e:	2001      	movs	r0, #1
   10e20:	4240      	negs	r0, r0
   10e22:	b015      	add	sp, #84	; 0x54
   10e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e26:	3307      	adds	r3, #7
   10e28:	e7b6      	b.n	10d98 <_printf_float+0x34>
   10e2a:	2380      	movs	r3, #128	; 0x80
   10e2c:	6862      	ldr	r2, [r4, #4]
   10e2e:	00db      	lsls	r3, r3, #3
   10e30:	1c51      	adds	r1, r2, #1
   10e32:	d145      	bne.n	10ec0 <_printf_float+0x15c>
   10e34:	3207      	adds	r2, #7
   10e36:	6062      	str	r2, [r4, #4]
   10e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10e3a:	2100      	movs	r1, #0
   10e3c:	4313      	orrs	r3, r2
   10e3e:	aa12      	add	r2, sp, #72	; 0x48
   10e40:	9205      	str	r2, [sp, #20]
   10e42:	aa11      	add	r2, sp, #68	; 0x44
   10e44:	9203      	str	r2, [sp, #12]
   10e46:	2223      	movs	r2, #35	; 0x23
   10e48:	6023      	str	r3, [r4, #0]
   10e4a:	9106      	str	r1, [sp, #24]
   10e4c:	9301      	str	r3, [sp, #4]
   10e4e:	a908      	add	r1, sp, #32
   10e50:	6863      	ldr	r3, [r4, #4]
   10e52:	1852      	adds	r2, r2, r1
   10e54:	9202      	str	r2, [sp, #8]
   10e56:	9300      	str	r3, [sp, #0]
   10e58:	0032      	movs	r2, r6
   10e5a:	002b      	movs	r3, r5
   10e5c:	9704      	str	r7, [sp, #16]
   10e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e60:	f7ff fee4 	bl	10c2c <__cvt>
   10e64:	2320      	movs	r3, #32
   10e66:	003a      	movs	r2, r7
   10e68:	0005      	movs	r5, r0
   10e6a:	439a      	bics	r2, r3
   10e6c:	2a47      	cmp	r2, #71	; 0x47
   10e6e:	d107      	bne.n	10e80 <_printf_float+0x11c>
   10e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e72:	1cda      	adds	r2, r3, #3
   10e74:	db02      	blt.n	10e7c <_printf_float+0x118>
   10e76:	6862      	ldr	r2, [r4, #4]
   10e78:	4293      	cmp	r3, r2
   10e7a:	dd5b      	ble.n	10f34 <_printf_float+0x1d0>
   10e7c:	3f02      	subs	r7, #2
   10e7e:	b2ff      	uxtb	r7, r7
   10e80:	9911      	ldr	r1, [sp, #68]	; 0x44
   10e82:	2f65      	cmp	r7, #101	; 0x65
   10e84:	d83b      	bhi.n	10efe <_printf_float+0x19a>
   10e86:	0020      	movs	r0, r4
   10e88:	3901      	subs	r1, #1
   10e8a:	003a      	movs	r2, r7
   10e8c:	3050      	adds	r0, #80	; 0x50
   10e8e:	9111      	str	r1, [sp, #68]	; 0x44
   10e90:	f7ff ff30 	bl	10cf4 <__exponent>
   10e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10e96:	0006      	movs	r6, r0
   10e98:	1883      	adds	r3, r0, r2
   10e9a:	6123      	str	r3, [r4, #16]
   10e9c:	2a01      	cmp	r2, #1
   10e9e:	dc02      	bgt.n	10ea6 <_printf_float+0x142>
   10ea0:	6822      	ldr	r2, [r4, #0]
   10ea2:	07d2      	lsls	r2, r2, #31
   10ea4:	d501      	bpl.n	10eaa <_printf_float+0x146>
   10ea6:	3301      	adds	r3, #1
   10ea8:	6123      	str	r3, [r4, #16]
   10eaa:	2323      	movs	r3, #35	; 0x23
   10eac:	aa08      	add	r2, sp, #32
   10eae:	189b      	adds	r3, r3, r2
   10eb0:	781b      	ldrb	r3, [r3, #0]
   10eb2:	2b00      	cmp	r3, #0
   10eb4:	d0a8      	beq.n	10e08 <_printf_float+0xa4>
   10eb6:	0023      	movs	r3, r4
   10eb8:	222d      	movs	r2, #45	; 0x2d
   10eba:	3343      	adds	r3, #67	; 0x43
   10ebc:	701a      	strb	r2, [r3, #0]
   10ebe:	e7a3      	b.n	10e08 <_printf_float+0xa4>
   10ec0:	2f67      	cmp	r7, #103	; 0x67
   10ec2:	d001      	beq.n	10ec8 <_printf_float+0x164>
   10ec4:	2f47      	cmp	r7, #71	; 0x47
   10ec6:	d1b7      	bne.n	10e38 <_printf_float+0xd4>
   10ec8:	2a00      	cmp	r2, #0
   10eca:	d016      	beq.n	10efa <_printf_float+0x196>
   10ecc:	990c      	ldr	r1, [sp, #48]	; 0x30
   10ece:	a808      	add	r0, sp, #32
   10ed0:	430b      	orrs	r3, r1
   10ed2:	2100      	movs	r1, #0
   10ed4:	9106      	str	r1, [sp, #24]
   10ed6:	a912      	add	r1, sp, #72	; 0x48
   10ed8:	9105      	str	r1, [sp, #20]
   10eda:	a911      	add	r1, sp, #68	; 0x44
   10edc:	9103      	str	r1, [sp, #12]
   10ede:	2123      	movs	r1, #35	; 0x23
   10ee0:	1809      	adds	r1, r1, r0
   10ee2:	6023      	str	r3, [r4, #0]
   10ee4:	9301      	str	r3, [sp, #4]
   10ee6:	9200      	str	r2, [sp, #0]
   10ee8:	002b      	movs	r3, r5
   10eea:	9704      	str	r7, [sp, #16]
   10eec:	9102      	str	r1, [sp, #8]
   10eee:	0032      	movs	r2, r6
   10ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
   10ef2:	f7ff fe9b 	bl	10c2c <__cvt>
   10ef6:	0005      	movs	r5, r0
   10ef8:	e7ba      	b.n	10e70 <_printf_float+0x10c>
   10efa:	2201      	movs	r2, #1
   10efc:	e79b      	b.n	10e36 <_printf_float+0xd2>
   10efe:	2f66      	cmp	r7, #102	; 0x66
   10f00:	d119      	bne.n	10f36 <_printf_float+0x1d2>
   10f02:	6863      	ldr	r3, [r4, #4]
   10f04:	2900      	cmp	r1, #0
   10f06:	dd0c      	ble.n	10f22 <_printf_float+0x1be>
   10f08:	6121      	str	r1, [r4, #16]
   10f0a:	2b00      	cmp	r3, #0
   10f0c:	d102      	bne.n	10f14 <_printf_float+0x1b0>
   10f0e:	6822      	ldr	r2, [r4, #0]
   10f10:	07d2      	lsls	r2, r2, #31
   10f12:	d502      	bpl.n	10f1a <_printf_float+0x1b6>
   10f14:	3301      	adds	r3, #1
   10f16:	185b      	adds	r3, r3, r1
   10f18:	6123      	str	r3, [r4, #16]
   10f1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10f1c:	2600      	movs	r6, #0
   10f1e:	65a3      	str	r3, [r4, #88]	; 0x58
   10f20:	e7c3      	b.n	10eaa <_printf_float+0x146>
   10f22:	2b00      	cmp	r3, #0
   10f24:	d103      	bne.n	10f2e <_printf_float+0x1ca>
   10f26:	2201      	movs	r2, #1
   10f28:	6821      	ldr	r1, [r4, #0]
   10f2a:	4211      	tst	r1, r2
   10f2c:	d000      	beq.n	10f30 <_printf_float+0x1cc>
   10f2e:	1c9a      	adds	r2, r3, #2
   10f30:	6122      	str	r2, [r4, #16]
   10f32:	e7f2      	b.n	10f1a <_printf_float+0x1b6>
   10f34:	2767      	movs	r7, #103	; 0x67
   10f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10f38:	9812      	ldr	r0, [sp, #72]	; 0x48
   10f3a:	4283      	cmp	r3, r0
   10f3c:	db05      	blt.n	10f4a <_printf_float+0x1e6>
   10f3e:	6822      	ldr	r2, [r4, #0]
   10f40:	6123      	str	r3, [r4, #16]
   10f42:	07d2      	lsls	r2, r2, #31
   10f44:	d5e9      	bpl.n	10f1a <_printf_float+0x1b6>
   10f46:	3301      	adds	r3, #1
   10f48:	e7e6      	b.n	10f18 <_printf_float+0x1b4>
   10f4a:	2201      	movs	r2, #1
   10f4c:	2b00      	cmp	r3, #0
   10f4e:	dc01      	bgt.n	10f54 <_printf_float+0x1f0>
   10f50:	1892      	adds	r2, r2, r2
   10f52:	1ad2      	subs	r2, r2, r3
   10f54:	1812      	adds	r2, r2, r0
   10f56:	e7eb      	b.n	10f30 <_printf_float+0x1cc>
   10f58:	6822      	ldr	r2, [r4, #0]
   10f5a:	0553      	lsls	r3, r2, #21
   10f5c:	d408      	bmi.n	10f70 <_printf_float+0x20c>
   10f5e:	6923      	ldr	r3, [r4, #16]
   10f60:	002a      	movs	r2, r5
   10f62:	990a      	ldr	r1, [sp, #40]	; 0x28
   10f64:	9809      	ldr	r0, [sp, #36]	; 0x24
   10f66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10f68:	47a8      	blx	r5
   10f6a:	1c43      	adds	r3, r0, #1
   10f6c:	d129      	bne.n	10fc2 <_printf_float+0x25e>
   10f6e:	e756      	b.n	10e1e <_printf_float+0xba>
   10f70:	2f65      	cmp	r7, #101	; 0x65
   10f72:	d800      	bhi.n	10f76 <_printf_float+0x212>
   10f74:	e0dc      	b.n	11130 <_printf_float+0x3cc>
   10f76:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   10f78:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   10f7a:	2200      	movs	r2, #0
   10f7c:	2300      	movs	r3, #0
   10f7e:	f7fd fe11 	bl	eba4 <__aeabi_dcmpeq>
   10f82:	2800      	cmp	r0, #0
   10f84:	d035      	beq.n	10ff2 <_printf_float+0x28e>
   10f86:	2301      	movs	r3, #1
   10f88:	4a35      	ldr	r2, [pc, #212]	; (11060 <_printf_float+0x2fc>)
   10f8a:	990a      	ldr	r1, [sp, #40]	; 0x28
   10f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
   10f8e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10f90:	47a8      	blx	r5
   10f92:	1c43      	adds	r3, r0, #1
   10f94:	d100      	bne.n	10f98 <_printf_float+0x234>
   10f96:	e742      	b.n	10e1e <_printf_float+0xba>
   10f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10f9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10f9c:	4293      	cmp	r3, r2
   10f9e:	db02      	blt.n	10fa6 <_printf_float+0x242>
   10fa0:	6823      	ldr	r3, [r4, #0]
   10fa2:	07db      	lsls	r3, r3, #31
   10fa4:	d50d      	bpl.n	10fc2 <_printf_float+0x25e>
   10fa6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10faa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10fac:	990a      	ldr	r1, [sp, #40]	; 0x28
   10fae:	9809      	ldr	r0, [sp, #36]	; 0x24
   10fb0:	47a8      	blx	r5
   10fb2:	2500      	movs	r5, #0
   10fb4:	1c43      	adds	r3, r0, #1
   10fb6:	d100      	bne.n	10fba <_printf_float+0x256>
   10fb8:	e731      	b.n	10e1e <_printf_float+0xba>
   10fba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10fbc:	3b01      	subs	r3, #1
   10fbe:	429d      	cmp	r5, r3
   10fc0:	db0b      	blt.n	10fda <_printf_float+0x276>
   10fc2:	6823      	ldr	r3, [r4, #0]
   10fc4:	2500      	movs	r5, #0
   10fc6:	079b      	lsls	r3, r3, #30
   10fc8:	d500      	bpl.n	10fcc <_printf_float+0x268>
   10fca:	e0fd      	b.n	111c8 <_printf_float+0x464>
   10fcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10fce:	68e0      	ldr	r0, [r4, #12]
   10fd0:	4298      	cmp	r0, r3
   10fd2:	db00      	blt.n	10fd6 <_printf_float+0x272>
   10fd4:	e725      	b.n	10e22 <_printf_float+0xbe>
   10fd6:	0018      	movs	r0, r3
   10fd8:	e723      	b.n	10e22 <_printf_float+0xbe>
   10fda:	0022      	movs	r2, r4
   10fdc:	2301      	movs	r3, #1
   10fde:	321a      	adds	r2, #26
   10fe0:	990a      	ldr	r1, [sp, #40]	; 0x28
   10fe2:	9809      	ldr	r0, [sp, #36]	; 0x24
   10fe4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10fe6:	47b0      	blx	r6
   10fe8:	1c43      	adds	r3, r0, #1
   10fea:	d100      	bne.n	10fee <_printf_float+0x28a>
   10fec:	e717      	b.n	10e1e <_printf_float+0xba>
   10fee:	3501      	adds	r5, #1
   10ff0:	e7e3      	b.n	10fba <_printf_float+0x256>
   10ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	dc35      	bgt.n	11064 <_printf_float+0x300>
   10ff8:	2301      	movs	r3, #1
   10ffa:	4a19      	ldr	r2, [pc, #100]	; (11060 <_printf_float+0x2fc>)
   10ffc:	990a      	ldr	r1, [sp, #40]	; 0x28
   10ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
   11000:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11002:	47b0      	blx	r6
   11004:	1c43      	adds	r3, r0, #1
   11006:	d100      	bne.n	1100a <_printf_float+0x2a6>
   11008:	e709      	b.n	10e1e <_printf_float+0xba>
   1100a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1100c:	2b00      	cmp	r3, #0
   1100e:	d105      	bne.n	1101c <_printf_float+0x2b8>
   11010:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11012:	2b00      	cmp	r3, #0
   11014:	d102      	bne.n	1101c <_printf_float+0x2b8>
   11016:	6823      	ldr	r3, [r4, #0]
   11018:	07db      	lsls	r3, r3, #31
   1101a:	d5d2      	bpl.n	10fc2 <_printf_float+0x25e>
   1101c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1101e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11022:	990a      	ldr	r1, [sp, #40]	; 0x28
   11024:	9809      	ldr	r0, [sp, #36]	; 0x24
   11026:	47b0      	blx	r6
   11028:	2600      	movs	r6, #0
   1102a:	1c43      	adds	r3, r0, #1
   1102c:	d100      	bne.n	11030 <_printf_float+0x2cc>
   1102e:	e6f6      	b.n	10e1e <_printf_float+0xba>
   11030:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11032:	425b      	negs	r3, r3
   11034:	429e      	cmp	r6, r3
   11036:	db01      	blt.n	1103c <_printf_float+0x2d8>
   11038:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1103a:	e791      	b.n	10f60 <_printf_float+0x1fc>
   1103c:	0022      	movs	r2, r4
   1103e:	2301      	movs	r3, #1
   11040:	321a      	adds	r2, #26
   11042:	990a      	ldr	r1, [sp, #40]	; 0x28
   11044:	9809      	ldr	r0, [sp, #36]	; 0x24
   11046:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11048:	47b8      	blx	r7
   1104a:	1c43      	adds	r3, r0, #1
   1104c:	d100      	bne.n	11050 <_printf_float+0x2ec>
   1104e:	e6e6      	b.n	10e1e <_printf_float+0xba>
   11050:	3601      	adds	r6, #1
   11052:	e7ed      	b.n	11030 <_printf_float+0x2cc>
   11054:	7fefffff 	.word	0x7fefffff
   11058:	000141a3 	.word	0x000141a3
   1105c:	0001419f 	.word	0x0001419f
   11060:	000141af 	.word	0x000141af
   11064:	6da3      	ldr	r3, [r4, #88]	; 0x58
   11066:	9e12      	ldr	r6, [sp, #72]	; 0x48
   11068:	429e      	cmp	r6, r3
   1106a:	dd00      	ble.n	1106e <_printf_float+0x30a>
   1106c:	001e      	movs	r6, r3
   1106e:	2e00      	cmp	r6, #0
   11070:	dc35      	bgt.n	110de <_printf_float+0x37a>
   11072:	2300      	movs	r3, #0
   11074:	930c      	str	r3, [sp, #48]	; 0x30
   11076:	43f3      	mvns	r3, r6
   11078:	17db      	asrs	r3, r3, #31
   1107a:	930f      	str	r3, [sp, #60]	; 0x3c
   1107c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1107e:	6da7      	ldr	r7, [r4, #88]	; 0x58
   11080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11082:	4033      	ands	r3, r6
   11084:	1afb      	subs	r3, r7, r3
   11086:	429a      	cmp	r2, r3
   11088:	db32      	blt.n	110f0 <_printf_float+0x38c>
   1108a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1108c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1108e:	4293      	cmp	r3, r2
   11090:	db3c      	blt.n	1110c <_printf_float+0x3a8>
   11092:	6823      	ldr	r3, [r4, #0]
   11094:	07db      	lsls	r3, r3, #31
   11096:	d439      	bmi.n	1110c <_printf_float+0x3a8>
   11098:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1109a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1109c:	1bf3      	subs	r3, r6, r7
   1109e:	1ab6      	subs	r6, r6, r2
   110a0:	429e      	cmp	r6, r3
   110a2:	dd00      	ble.n	110a6 <_printf_float+0x342>
   110a4:	001e      	movs	r6, r3
   110a6:	2e00      	cmp	r6, #0
   110a8:	dc39      	bgt.n	1111e <_printf_float+0x3ba>
   110aa:	43f7      	mvns	r7, r6
   110ac:	2500      	movs	r5, #0
   110ae:	17fb      	asrs	r3, r7, #31
   110b0:	930c      	str	r3, [sp, #48]	; 0x30
   110b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   110b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   110b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   110b8:	1a9b      	subs	r3, r3, r2
   110ba:	0032      	movs	r2, r6
   110bc:	400a      	ands	r2, r1
   110be:	1a9b      	subs	r3, r3, r2
   110c0:	429d      	cmp	r5, r3
   110c2:	db00      	blt.n	110c6 <_printf_float+0x362>
   110c4:	e77d      	b.n	10fc2 <_printf_float+0x25e>
   110c6:	0022      	movs	r2, r4
   110c8:	2301      	movs	r3, #1
   110ca:	321a      	adds	r2, #26
   110cc:	990a      	ldr	r1, [sp, #40]	; 0x28
   110ce:	9809      	ldr	r0, [sp, #36]	; 0x24
   110d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   110d2:	47b8      	blx	r7
   110d4:	1c43      	adds	r3, r0, #1
   110d6:	d100      	bne.n	110da <_printf_float+0x376>
   110d8:	e6a1      	b.n	10e1e <_printf_float+0xba>
   110da:	3501      	adds	r5, #1
   110dc:	e7e9      	b.n	110b2 <_printf_float+0x34e>
   110de:	0033      	movs	r3, r6
   110e0:	002a      	movs	r2, r5
   110e2:	990a      	ldr	r1, [sp, #40]	; 0x28
   110e4:	9809      	ldr	r0, [sp, #36]	; 0x24
   110e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   110e8:	47b8      	blx	r7
   110ea:	1c43      	adds	r3, r0, #1
   110ec:	d1c1      	bne.n	11072 <_printf_float+0x30e>
   110ee:	e696      	b.n	10e1e <_printf_float+0xba>
   110f0:	0022      	movs	r2, r4
   110f2:	2301      	movs	r3, #1
   110f4:	321a      	adds	r2, #26
   110f6:	990a      	ldr	r1, [sp, #40]	; 0x28
   110f8:	9809      	ldr	r0, [sp, #36]	; 0x24
   110fa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   110fc:	47b8      	blx	r7
   110fe:	1c43      	adds	r3, r0, #1
   11100:	d100      	bne.n	11104 <_printf_float+0x3a0>
   11102:	e68c      	b.n	10e1e <_printf_float+0xba>
   11104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11106:	3301      	adds	r3, #1
   11108:	930c      	str	r3, [sp, #48]	; 0x30
   1110a:	e7b7      	b.n	1107c <_printf_float+0x318>
   1110c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1110e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11110:	990a      	ldr	r1, [sp, #40]	; 0x28
   11112:	9809      	ldr	r0, [sp, #36]	; 0x24
   11114:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11116:	47b0      	blx	r6
   11118:	1c43      	adds	r3, r0, #1
   1111a:	d1bd      	bne.n	11098 <_printf_float+0x334>
   1111c:	e67f      	b.n	10e1e <_printf_float+0xba>
   1111e:	19ea      	adds	r2, r5, r7
   11120:	0033      	movs	r3, r6
   11122:	990a      	ldr	r1, [sp, #40]	; 0x28
   11124:	9809      	ldr	r0, [sp, #36]	; 0x24
   11126:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11128:	47a8      	blx	r5
   1112a:	1c43      	adds	r3, r0, #1
   1112c:	d1bd      	bne.n	110aa <_printf_float+0x346>
   1112e:	e676      	b.n	10e1e <_printf_float+0xba>
   11130:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11132:	2b01      	cmp	r3, #1
   11134:	dc02      	bgt.n	1113c <_printf_float+0x3d8>
   11136:	2301      	movs	r3, #1
   11138:	421a      	tst	r2, r3
   1113a:	d038      	beq.n	111ae <_printf_float+0x44a>
   1113c:	2301      	movs	r3, #1
   1113e:	002a      	movs	r2, r5
   11140:	990a      	ldr	r1, [sp, #40]	; 0x28
   11142:	9809      	ldr	r0, [sp, #36]	; 0x24
   11144:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11146:	47b8      	blx	r7
   11148:	1c43      	adds	r3, r0, #1
   1114a:	d100      	bne.n	1114e <_printf_float+0x3ea>
   1114c:	e667      	b.n	10e1e <_printf_float+0xba>
   1114e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11152:	990a      	ldr	r1, [sp, #40]	; 0x28
   11154:	9809      	ldr	r0, [sp, #36]	; 0x24
   11156:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11158:	47b8      	blx	r7
   1115a:	1c43      	adds	r3, r0, #1
   1115c:	d100      	bne.n	11160 <_printf_float+0x3fc>
   1115e:	e65e      	b.n	10e1e <_printf_float+0xba>
   11160:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   11162:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   11164:	2200      	movs	r2, #0
   11166:	2300      	movs	r3, #0
   11168:	f7fd fd1c 	bl	eba4 <__aeabi_dcmpeq>
   1116c:	2800      	cmp	r0, #0
   1116e:	d008      	beq.n	11182 <_printf_float+0x41e>
   11170:	2500      	movs	r5, #0
   11172:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11174:	3b01      	subs	r3, #1
   11176:	429d      	cmp	r5, r3
   11178:	db0d      	blt.n	11196 <_printf_float+0x432>
   1117a:	0022      	movs	r2, r4
   1117c:	0033      	movs	r3, r6
   1117e:	3250      	adds	r2, #80	; 0x50
   11180:	e6ef      	b.n	10f62 <_printf_float+0x1fe>
   11182:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11184:	1c6a      	adds	r2, r5, #1
   11186:	3b01      	subs	r3, #1
   11188:	990a      	ldr	r1, [sp, #40]	; 0x28
   1118a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1118c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1118e:	47a8      	blx	r5
   11190:	1c43      	adds	r3, r0, #1
   11192:	d1f2      	bne.n	1117a <_printf_float+0x416>
   11194:	e643      	b.n	10e1e <_printf_float+0xba>
   11196:	0022      	movs	r2, r4
   11198:	2301      	movs	r3, #1
   1119a:	321a      	adds	r2, #26
   1119c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1119e:	9809      	ldr	r0, [sp, #36]	; 0x24
   111a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   111a2:	47b8      	blx	r7
   111a4:	1c43      	adds	r3, r0, #1
   111a6:	d100      	bne.n	111aa <_printf_float+0x446>
   111a8:	e639      	b.n	10e1e <_printf_float+0xba>
   111aa:	3501      	adds	r5, #1
   111ac:	e7e1      	b.n	11172 <_printf_float+0x40e>
   111ae:	002a      	movs	r2, r5
   111b0:	e7ea      	b.n	11188 <_printf_float+0x424>
   111b2:	0022      	movs	r2, r4
   111b4:	2301      	movs	r3, #1
   111b6:	3219      	adds	r2, #25
   111b8:	990a      	ldr	r1, [sp, #40]	; 0x28
   111ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   111bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   111be:	47b0      	blx	r6
   111c0:	1c43      	adds	r3, r0, #1
   111c2:	d100      	bne.n	111c6 <_printf_float+0x462>
   111c4:	e62b      	b.n	10e1e <_printf_float+0xba>
   111c6:	3501      	adds	r5, #1
   111c8:	68e3      	ldr	r3, [r4, #12]
   111ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   111cc:	1a9b      	subs	r3, r3, r2
   111ce:	429d      	cmp	r5, r3
   111d0:	dbef      	blt.n	111b2 <_printf_float+0x44e>
   111d2:	e6fb      	b.n	10fcc <_printf_float+0x268>
   111d4:	0032      	movs	r2, r6
   111d6:	002b      	movs	r3, r5
   111d8:	0030      	movs	r0, r6
   111da:	0029      	movs	r1, r5
   111dc:	f7ff f9ea 	bl	105b4 <__aeabi_dcmpun>
   111e0:	2800      	cmp	r0, #0
   111e2:	d100      	bne.n	111e6 <_printf_float+0x482>
   111e4:	e621      	b.n	10e2a <_printf_float+0xc6>
   111e6:	4d03      	ldr	r5, [pc, #12]	; (111f4 <_printf_float+0x490>)
   111e8:	2f47      	cmp	r7, #71	; 0x47
   111ea:	d900      	bls.n	111ee <_printf_float+0x48a>
   111ec:	e605      	b.n	10dfa <_printf_float+0x96>
   111ee:	4d02      	ldr	r5, [pc, #8]	; (111f8 <_printf_float+0x494>)
   111f0:	e603      	b.n	10dfa <_printf_float+0x96>
   111f2:	46c0      	nop			; (mov r8, r8)
   111f4:	000141ab 	.word	0x000141ab
   111f8:	000141a7 	.word	0x000141a7

000111fc <_printf_common>:
   111fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   111fe:	0015      	movs	r5, r2
   11200:	9301      	str	r3, [sp, #4]
   11202:	688a      	ldr	r2, [r1, #8]
   11204:	690b      	ldr	r3, [r1, #16]
   11206:	9000      	str	r0, [sp, #0]
   11208:	000c      	movs	r4, r1
   1120a:	4293      	cmp	r3, r2
   1120c:	da00      	bge.n	11210 <_printf_common+0x14>
   1120e:	0013      	movs	r3, r2
   11210:	0022      	movs	r2, r4
   11212:	602b      	str	r3, [r5, #0]
   11214:	3243      	adds	r2, #67	; 0x43
   11216:	7812      	ldrb	r2, [r2, #0]
   11218:	2a00      	cmp	r2, #0
   1121a:	d001      	beq.n	11220 <_printf_common+0x24>
   1121c:	3301      	adds	r3, #1
   1121e:	602b      	str	r3, [r5, #0]
   11220:	6823      	ldr	r3, [r4, #0]
   11222:	069b      	lsls	r3, r3, #26
   11224:	d502      	bpl.n	1122c <_printf_common+0x30>
   11226:	682b      	ldr	r3, [r5, #0]
   11228:	3302      	adds	r3, #2
   1122a:	602b      	str	r3, [r5, #0]
   1122c:	2706      	movs	r7, #6
   1122e:	6823      	ldr	r3, [r4, #0]
   11230:	401f      	ands	r7, r3
   11232:	d027      	beq.n	11284 <_printf_common+0x88>
   11234:	0023      	movs	r3, r4
   11236:	3343      	adds	r3, #67	; 0x43
   11238:	781b      	ldrb	r3, [r3, #0]
   1123a:	1e5a      	subs	r2, r3, #1
   1123c:	4193      	sbcs	r3, r2
   1123e:	6822      	ldr	r2, [r4, #0]
   11240:	0692      	lsls	r2, r2, #26
   11242:	d430      	bmi.n	112a6 <_printf_common+0xaa>
   11244:	0022      	movs	r2, r4
   11246:	9901      	ldr	r1, [sp, #4]
   11248:	3243      	adds	r2, #67	; 0x43
   1124a:	9800      	ldr	r0, [sp, #0]
   1124c:	9e08      	ldr	r6, [sp, #32]
   1124e:	47b0      	blx	r6
   11250:	1c43      	adds	r3, r0, #1
   11252:	d025      	beq.n	112a0 <_printf_common+0xa4>
   11254:	2306      	movs	r3, #6
   11256:	6820      	ldr	r0, [r4, #0]
   11258:	682a      	ldr	r2, [r5, #0]
   1125a:	68e1      	ldr	r1, [r4, #12]
   1125c:	4003      	ands	r3, r0
   1125e:	2500      	movs	r5, #0
   11260:	2b04      	cmp	r3, #4
   11262:	d103      	bne.n	1126c <_printf_common+0x70>
   11264:	1a8d      	subs	r5, r1, r2
   11266:	43eb      	mvns	r3, r5
   11268:	17db      	asrs	r3, r3, #31
   1126a:	401d      	ands	r5, r3
   1126c:	68a3      	ldr	r3, [r4, #8]
   1126e:	6922      	ldr	r2, [r4, #16]
   11270:	4293      	cmp	r3, r2
   11272:	dd01      	ble.n	11278 <_printf_common+0x7c>
   11274:	1a9b      	subs	r3, r3, r2
   11276:	18ed      	adds	r5, r5, r3
   11278:	2700      	movs	r7, #0
   1127a:	42bd      	cmp	r5, r7
   1127c:	d120      	bne.n	112c0 <_printf_common+0xc4>
   1127e:	2000      	movs	r0, #0
   11280:	e010      	b.n	112a4 <_printf_common+0xa8>
   11282:	3701      	adds	r7, #1
   11284:	68e3      	ldr	r3, [r4, #12]
   11286:	682a      	ldr	r2, [r5, #0]
   11288:	1a9b      	subs	r3, r3, r2
   1128a:	429f      	cmp	r7, r3
   1128c:	dad2      	bge.n	11234 <_printf_common+0x38>
   1128e:	0022      	movs	r2, r4
   11290:	2301      	movs	r3, #1
   11292:	3219      	adds	r2, #25
   11294:	9901      	ldr	r1, [sp, #4]
   11296:	9800      	ldr	r0, [sp, #0]
   11298:	9e08      	ldr	r6, [sp, #32]
   1129a:	47b0      	blx	r6
   1129c:	1c43      	adds	r3, r0, #1
   1129e:	d1f0      	bne.n	11282 <_printf_common+0x86>
   112a0:	2001      	movs	r0, #1
   112a2:	4240      	negs	r0, r0
   112a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   112a6:	2030      	movs	r0, #48	; 0x30
   112a8:	18e1      	adds	r1, r4, r3
   112aa:	3143      	adds	r1, #67	; 0x43
   112ac:	7008      	strb	r0, [r1, #0]
   112ae:	0021      	movs	r1, r4
   112b0:	1c5a      	adds	r2, r3, #1
   112b2:	3145      	adds	r1, #69	; 0x45
   112b4:	7809      	ldrb	r1, [r1, #0]
   112b6:	18a2      	adds	r2, r4, r2
   112b8:	3243      	adds	r2, #67	; 0x43
   112ba:	3302      	adds	r3, #2
   112bc:	7011      	strb	r1, [r2, #0]
   112be:	e7c1      	b.n	11244 <_printf_common+0x48>
   112c0:	0022      	movs	r2, r4
   112c2:	2301      	movs	r3, #1
   112c4:	321a      	adds	r2, #26
   112c6:	9901      	ldr	r1, [sp, #4]
   112c8:	9800      	ldr	r0, [sp, #0]
   112ca:	9e08      	ldr	r6, [sp, #32]
   112cc:	47b0      	blx	r6
   112ce:	1c43      	adds	r3, r0, #1
   112d0:	d0e6      	beq.n	112a0 <_printf_common+0xa4>
   112d2:	3701      	adds	r7, #1
   112d4:	e7d1      	b.n	1127a <_printf_common+0x7e>
	...

000112d8 <_printf_i>:
   112d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   112da:	b08b      	sub	sp, #44	; 0x2c
   112dc:	9206      	str	r2, [sp, #24]
   112de:	000a      	movs	r2, r1
   112e0:	3243      	adds	r2, #67	; 0x43
   112e2:	9307      	str	r3, [sp, #28]
   112e4:	9005      	str	r0, [sp, #20]
   112e6:	9204      	str	r2, [sp, #16]
   112e8:	7e0a      	ldrb	r2, [r1, #24]
   112ea:	000c      	movs	r4, r1
   112ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   112ee:	2a6e      	cmp	r2, #110	; 0x6e
   112f0:	d100      	bne.n	112f4 <_printf_i+0x1c>
   112f2:	e08f      	b.n	11414 <_printf_i+0x13c>
   112f4:	d817      	bhi.n	11326 <_printf_i+0x4e>
   112f6:	2a63      	cmp	r2, #99	; 0x63
   112f8:	d02c      	beq.n	11354 <_printf_i+0x7c>
   112fa:	d808      	bhi.n	1130e <_printf_i+0x36>
   112fc:	2a00      	cmp	r2, #0
   112fe:	d100      	bne.n	11302 <_printf_i+0x2a>
   11300:	e099      	b.n	11436 <_printf_i+0x15e>
   11302:	2a58      	cmp	r2, #88	; 0x58
   11304:	d054      	beq.n	113b0 <_printf_i+0xd8>
   11306:	0026      	movs	r6, r4
   11308:	3642      	adds	r6, #66	; 0x42
   1130a:	7032      	strb	r2, [r6, #0]
   1130c:	e029      	b.n	11362 <_printf_i+0x8a>
   1130e:	2a64      	cmp	r2, #100	; 0x64
   11310:	d001      	beq.n	11316 <_printf_i+0x3e>
   11312:	2a69      	cmp	r2, #105	; 0x69
   11314:	d1f7      	bne.n	11306 <_printf_i+0x2e>
   11316:	6821      	ldr	r1, [r4, #0]
   11318:	681a      	ldr	r2, [r3, #0]
   1131a:	0608      	lsls	r0, r1, #24
   1131c:	d523      	bpl.n	11366 <_printf_i+0x8e>
   1131e:	1d11      	adds	r1, r2, #4
   11320:	6019      	str	r1, [r3, #0]
   11322:	6815      	ldr	r5, [r2, #0]
   11324:	e025      	b.n	11372 <_printf_i+0x9a>
   11326:	2a73      	cmp	r2, #115	; 0x73
   11328:	d100      	bne.n	1132c <_printf_i+0x54>
   1132a:	e088      	b.n	1143e <_printf_i+0x166>
   1132c:	d808      	bhi.n	11340 <_printf_i+0x68>
   1132e:	2a6f      	cmp	r2, #111	; 0x6f
   11330:	d029      	beq.n	11386 <_printf_i+0xae>
   11332:	2a70      	cmp	r2, #112	; 0x70
   11334:	d1e7      	bne.n	11306 <_printf_i+0x2e>
   11336:	2220      	movs	r2, #32
   11338:	6809      	ldr	r1, [r1, #0]
   1133a:	430a      	orrs	r2, r1
   1133c:	6022      	str	r2, [r4, #0]
   1133e:	e003      	b.n	11348 <_printf_i+0x70>
   11340:	2a75      	cmp	r2, #117	; 0x75
   11342:	d020      	beq.n	11386 <_printf_i+0xae>
   11344:	2a78      	cmp	r2, #120	; 0x78
   11346:	d1de      	bne.n	11306 <_printf_i+0x2e>
   11348:	0022      	movs	r2, r4
   1134a:	2178      	movs	r1, #120	; 0x78
   1134c:	3245      	adds	r2, #69	; 0x45
   1134e:	7011      	strb	r1, [r2, #0]
   11350:	4a6c      	ldr	r2, [pc, #432]	; (11504 <_printf_i+0x22c>)
   11352:	e030      	b.n	113b6 <_printf_i+0xde>
   11354:	000e      	movs	r6, r1
   11356:	681a      	ldr	r2, [r3, #0]
   11358:	3642      	adds	r6, #66	; 0x42
   1135a:	1d11      	adds	r1, r2, #4
   1135c:	6019      	str	r1, [r3, #0]
   1135e:	6813      	ldr	r3, [r2, #0]
   11360:	7033      	strb	r3, [r6, #0]
   11362:	2301      	movs	r3, #1
   11364:	e079      	b.n	1145a <_printf_i+0x182>
   11366:	0649      	lsls	r1, r1, #25
   11368:	d5d9      	bpl.n	1131e <_printf_i+0x46>
   1136a:	1d11      	adds	r1, r2, #4
   1136c:	6019      	str	r1, [r3, #0]
   1136e:	2300      	movs	r3, #0
   11370:	5ed5      	ldrsh	r5, [r2, r3]
   11372:	2d00      	cmp	r5, #0
   11374:	da03      	bge.n	1137e <_printf_i+0xa6>
   11376:	232d      	movs	r3, #45	; 0x2d
   11378:	9a04      	ldr	r2, [sp, #16]
   1137a:	426d      	negs	r5, r5
   1137c:	7013      	strb	r3, [r2, #0]
   1137e:	4b62      	ldr	r3, [pc, #392]	; (11508 <_printf_i+0x230>)
   11380:	270a      	movs	r7, #10
   11382:	9303      	str	r3, [sp, #12]
   11384:	e02f      	b.n	113e6 <_printf_i+0x10e>
   11386:	6820      	ldr	r0, [r4, #0]
   11388:	6819      	ldr	r1, [r3, #0]
   1138a:	0605      	lsls	r5, r0, #24
   1138c:	d503      	bpl.n	11396 <_printf_i+0xbe>
   1138e:	1d08      	adds	r0, r1, #4
   11390:	6018      	str	r0, [r3, #0]
   11392:	680d      	ldr	r5, [r1, #0]
   11394:	e005      	b.n	113a2 <_printf_i+0xca>
   11396:	0640      	lsls	r0, r0, #25
   11398:	d5f9      	bpl.n	1138e <_printf_i+0xb6>
   1139a:	680d      	ldr	r5, [r1, #0]
   1139c:	1d08      	adds	r0, r1, #4
   1139e:	6018      	str	r0, [r3, #0]
   113a0:	b2ad      	uxth	r5, r5
   113a2:	4b59      	ldr	r3, [pc, #356]	; (11508 <_printf_i+0x230>)
   113a4:	2708      	movs	r7, #8
   113a6:	9303      	str	r3, [sp, #12]
   113a8:	2a6f      	cmp	r2, #111	; 0x6f
   113aa:	d018      	beq.n	113de <_printf_i+0x106>
   113ac:	270a      	movs	r7, #10
   113ae:	e016      	b.n	113de <_printf_i+0x106>
   113b0:	3145      	adds	r1, #69	; 0x45
   113b2:	700a      	strb	r2, [r1, #0]
   113b4:	4a54      	ldr	r2, [pc, #336]	; (11508 <_printf_i+0x230>)
   113b6:	9203      	str	r2, [sp, #12]
   113b8:	681a      	ldr	r2, [r3, #0]
   113ba:	6821      	ldr	r1, [r4, #0]
   113bc:	1d10      	adds	r0, r2, #4
   113be:	6018      	str	r0, [r3, #0]
   113c0:	6815      	ldr	r5, [r2, #0]
   113c2:	0608      	lsls	r0, r1, #24
   113c4:	d522      	bpl.n	1140c <_printf_i+0x134>
   113c6:	07cb      	lsls	r3, r1, #31
   113c8:	d502      	bpl.n	113d0 <_printf_i+0xf8>
   113ca:	2320      	movs	r3, #32
   113cc:	4319      	orrs	r1, r3
   113ce:	6021      	str	r1, [r4, #0]
   113d0:	2710      	movs	r7, #16
   113d2:	2d00      	cmp	r5, #0
   113d4:	d103      	bne.n	113de <_printf_i+0x106>
   113d6:	2320      	movs	r3, #32
   113d8:	6822      	ldr	r2, [r4, #0]
   113da:	439a      	bics	r2, r3
   113dc:	6022      	str	r2, [r4, #0]
   113de:	0023      	movs	r3, r4
   113e0:	2200      	movs	r2, #0
   113e2:	3343      	adds	r3, #67	; 0x43
   113e4:	701a      	strb	r2, [r3, #0]
   113e6:	6863      	ldr	r3, [r4, #4]
   113e8:	60a3      	str	r3, [r4, #8]
   113ea:	2b00      	cmp	r3, #0
   113ec:	db5c      	blt.n	114a8 <_printf_i+0x1d0>
   113ee:	2204      	movs	r2, #4
   113f0:	6821      	ldr	r1, [r4, #0]
   113f2:	4391      	bics	r1, r2
   113f4:	6021      	str	r1, [r4, #0]
   113f6:	2d00      	cmp	r5, #0
   113f8:	d158      	bne.n	114ac <_printf_i+0x1d4>
   113fa:	9e04      	ldr	r6, [sp, #16]
   113fc:	2b00      	cmp	r3, #0
   113fe:	d064      	beq.n	114ca <_printf_i+0x1f2>
   11400:	0026      	movs	r6, r4
   11402:	9b03      	ldr	r3, [sp, #12]
   11404:	3642      	adds	r6, #66	; 0x42
   11406:	781b      	ldrb	r3, [r3, #0]
   11408:	7033      	strb	r3, [r6, #0]
   1140a:	e05e      	b.n	114ca <_printf_i+0x1f2>
   1140c:	0648      	lsls	r0, r1, #25
   1140e:	d5da      	bpl.n	113c6 <_printf_i+0xee>
   11410:	b2ad      	uxth	r5, r5
   11412:	e7d8      	b.n	113c6 <_printf_i+0xee>
   11414:	6809      	ldr	r1, [r1, #0]
   11416:	681a      	ldr	r2, [r3, #0]
   11418:	0608      	lsls	r0, r1, #24
   1141a:	d505      	bpl.n	11428 <_printf_i+0x150>
   1141c:	1d11      	adds	r1, r2, #4
   1141e:	6019      	str	r1, [r3, #0]
   11420:	6813      	ldr	r3, [r2, #0]
   11422:	6962      	ldr	r2, [r4, #20]
   11424:	601a      	str	r2, [r3, #0]
   11426:	e006      	b.n	11436 <_printf_i+0x15e>
   11428:	0649      	lsls	r1, r1, #25
   1142a:	d5f7      	bpl.n	1141c <_printf_i+0x144>
   1142c:	1d11      	adds	r1, r2, #4
   1142e:	6019      	str	r1, [r3, #0]
   11430:	6813      	ldr	r3, [r2, #0]
   11432:	8aa2      	ldrh	r2, [r4, #20]
   11434:	801a      	strh	r2, [r3, #0]
   11436:	2300      	movs	r3, #0
   11438:	9e04      	ldr	r6, [sp, #16]
   1143a:	6123      	str	r3, [r4, #16]
   1143c:	e054      	b.n	114e8 <_printf_i+0x210>
   1143e:	681a      	ldr	r2, [r3, #0]
   11440:	1d11      	adds	r1, r2, #4
   11442:	6019      	str	r1, [r3, #0]
   11444:	6816      	ldr	r6, [r2, #0]
   11446:	2100      	movs	r1, #0
   11448:	6862      	ldr	r2, [r4, #4]
   1144a:	0030      	movs	r0, r6
   1144c:	f001 f9fe 	bl	1284c <memchr>
   11450:	2800      	cmp	r0, #0
   11452:	d001      	beq.n	11458 <_printf_i+0x180>
   11454:	1b80      	subs	r0, r0, r6
   11456:	6060      	str	r0, [r4, #4]
   11458:	6863      	ldr	r3, [r4, #4]
   1145a:	6123      	str	r3, [r4, #16]
   1145c:	2300      	movs	r3, #0
   1145e:	9a04      	ldr	r2, [sp, #16]
   11460:	7013      	strb	r3, [r2, #0]
   11462:	e041      	b.n	114e8 <_printf_i+0x210>
   11464:	6923      	ldr	r3, [r4, #16]
   11466:	0032      	movs	r2, r6
   11468:	9906      	ldr	r1, [sp, #24]
   1146a:	9805      	ldr	r0, [sp, #20]
   1146c:	9d07      	ldr	r5, [sp, #28]
   1146e:	47a8      	blx	r5
   11470:	1c43      	adds	r3, r0, #1
   11472:	d043      	beq.n	114fc <_printf_i+0x224>
   11474:	6823      	ldr	r3, [r4, #0]
   11476:	2500      	movs	r5, #0
   11478:	079b      	lsls	r3, r3, #30
   1147a:	d40f      	bmi.n	1149c <_printf_i+0x1c4>
   1147c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1147e:	68e0      	ldr	r0, [r4, #12]
   11480:	4298      	cmp	r0, r3
   11482:	da3d      	bge.n	11500 <_printf_i+0x228>
   11484:	0018      	movs	r0, r3
   11486:	e03b      	b.n	11500 <_printf_i+0x228>
   11488:	0022      	movs	r2, r4
   1148a:	2301      	movs	r3, #1
   1148c:	3219      	adds	r2, #25
   1148e:	9906      	ldr	r1, [sp, #24]
   11490:	9805      	ldr	r0, [sp, #20]
   11492:	9e07      	ldr	r6, [sp, #28]
   11494:	47b0      	blx	r6
   11496:	1c43      	adds	r3, r0, #1
   11498:	d030      	beq.n	114fc <_printf_i+0x224>
   1149a:	3501      	adds	r5, #1
   1149c:	68e3      	ldr	r3, [r4, #12]
   1149e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   114a0:	1a9b      	subs	r3, r3, r2
   114a2:	429d      	cmp	r5, r3
   114a4:	dbf0      	blt.n	11488 <_printf_i+0x1b0>
   114a6:	e7e9      	b.n	1147c <_printf_i+0x1a4>
   114a8:	2d00      	cmp	r5, #0
   114aa:	d0a9      	beq.n	11400 <_printf_i+0x128>
   114ac:	9e04      	ldr	r6, [sp, #16]
   114ae:	0028      	movs	r0, r5
   114b0:	0039      	movs	r1, r7
   114b2:	f7fd fa77 	bl	e9a4 <__aeabi_uidivmod>
   114b6:	9b03      	ldr	r3, [sp, #12]
   114b8:	3e01      	subs	r6, #1
   114ba:	5c5b      	ldrb	r3, [r3, r1]
   114bc:	0028      	movs	r0, r5
   114be:	7033      	strb	r3, [r6, #0]
   114c0:	0039      	movs	r1, r7
   114c2:	f7fd f9e9 	bl	e898 <__udivsi3>
   114c6:	1e05      	subs	r5, r0, #0
   114c8:	d1f1      	bne.n	114ae <_printf_i+0x1d6>
   114ca:	2f08      	cmp	r7, #8
   114cc:	d109      	bne.n	114e2 <_printf_i+0x20a>
   114ce:	6823      	ldr	r3, [r4, #0]
   114d0:	07db      	lsls	r3, r3, #31
   114d2:	d506      	bpl.n	114e2 <_printf_i+0x20a>
   114d4:	6863      	ldr	r3, [r4, #4]
   114d6:	6922      	ldr	r2, [r4, #16]
   114d8:	4293      	cmp	r3, r2
   114da:	dc02      	bgt.n	114e2 <_printf_i+0x20a>
   114dc:	2330      	movs	r3, #48	; 0x30
   114de:	3e01      	subs	r6, #1
   114e0:	7033      	strb	r3, [r6, #0]
   114e2:	9b04      	ldr	r3, [sp, #16]
   114e4:	1b9b      	subs	r3, r3, r6
   114e6:	6123      	str	r3, [r4, #16]
   114e8:	9b07      	ldr	r3, [sp, #28]
   114ea:	aa09      	add	r2, sp, #36	; 0x24
   114ec:	9300      	str	r3, [sp, #0]
   114ee:	0021      	movs	r1, r4
   114f0:	9b06      	ldr	r3, [sp, #24]
   114f2:	9805      	ldr	r0, [sp, #20]
   114f4:	f7ff fe82 	bl	111fc <_printf_common>
   114f8:	1c43      	adds	r3, r0, #1
   114fa:	d1b3      	bne.n	11464 <_printf_i+0x18c>
   114fc:	2001      	movs	r0, #1
   114fe:	4240      	negs	r0, r0
   11500:	b00b      	add	sp, #44	; 0x2c
   11502:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11504:	000141c2 	.word	0x000141c2
   11508:	000141b1 	.word	0x000141b1

0001150c <realloc>:
   1150c:	b510      	push	{r4, lr}
   1150e:	4b03      	ldr	r3, [pc, #12]	; (1151c <realloc+0x10>)
   11510:	000a      	movs	r2, r1
   11512:	0001      	movs	r1, r0
   11514:	6818      	ldr	r0, [r3, #0]
   11516:	f001 fc97 	bl	12e48 <_realloc_r>
   1151a:	bd10      	pop	{r4, pc}
   1151c:	200000a4 	.word	0x200000a4

00011520 <_sbrk_r>:
   11520:	2300      	movs	r3, #0
   11522:	b570      	push	{r4, r5, r6, lr}
   11524:	4c06      	ldr	r4, [pc, #24]	; (11540 <_sbrk_r+0x20>)
   11526:	0005      	movs	r5, r0
   11528:	0008      	movs	r0, r1
   1152a:	6023      	str	r3, [r4, #0]
   1152c:	f001 fe46 	bl	131bc <_sbrk>
   11530:	1c43      	adds	r3, r0, #1
   11532:	d103      	bne.n	1153c <_sbrk_r+0x1c>
   11534:	6823      	ldr	r3, [r4, #0]
   11536:	2b00      	cmp	r3, #0
   11538:	d000      	beq.n	1153c <_sbrk_r+0x1c>
   1153a:	602b      	str	r3, [r5, #0]
   1153c:	bd70      	pop	{r4, r5, r6, pc}
   1153e:	46c0      	nop			; (mov r8, r8)
   11540:	20000f84 	.word	0x20000f84

00011544 <strchr>:
   11544:	b2c9      	uxtb	r1, r1
   11546:	7803      	ldrb	r3, [r0, #0]
   11548:	2b00      	cmp	r3, #0
   1154a:	d004      	beq.n	11556 <strchr+0x12>
   1154c:	4299      	cmp	r1, r3
   1154e:	d100      	bne.n	11552 <strchr+0xe>
   11550:	4770      	bx	lr
   11552:	3001      	adds	r0, #1
   11554:	e7f7      	b.n	11546 <strchr+0x2>
   11556:	424b      	negs	r3, r1
   11558:	4159      	adcs	r1, r3
   1155a:	4249      	negs	r1, r1
   1155c:	4008      	ands	r0, r1
   1155e:	e7f7      	b.n	11550 <strchr+0xc>

00011560 <strcpy>:
   11560:	1c03      	adds	r3, r0, #0
   11562:	780a      	ldrb	r2, [r1, #0]
   11564:	3101      	adds	r1, #1
   11566:	701a      	strb	r2, [r3, #0]
   11568:	3301      	adds	r3, #1
   1156a:	2a00      	cmp	r2, #0
   1156c:	d1f9      	bne.n	11562 <strcpy+0x2>
   1156e:	4770      	bx	lr

00011570 <strlen>:
   11570:	2300      	movs	r3, #0
   11572:	5cc2      	ldrb	r2, [r0, r3]
   11574:	3301      	adds	r3, #1
   11576:	2a00      	cmp	r2, #0
   11578:	d1fb      	bne.n	11572 <strlen+0x2>
   1157a:	1e58      	subs	r0, r3, #1
   1157c:	4770      	bx	lr

0001157e <strncpy>:
   1157e:	b570      	push	{r4, r5, r6, lr}
   11580:	0004      	movs	r4, r0
   11582:	2a00      	cmp	r2, #0
   11584:	d100      	bne.n	11588 <strncpy+0xa>
   11586:	bd70      	pop	{r4, r5, r6, pc}
   11588:	780d      	ldrb	r5, [r1, #0]
   1158a:	1e56      	subs	r6, r2, #1
   1158c:	1c63      	adds	r3, r4, #1
   1158e:	7025      	strb	r5, [r4, #0]
   11590:	3101      	adds	r1, #1
   11592:	2d00      	cmp	r5, #0
   11594:	d105      	bne.n	115a2 <strncpy+0x24>
   11596:	18a4      	adds	r4, r4, r2
   11598:	429c      	cmp	r4, r3
   1159a:	d0f4      	beq.n	11586 <strncpy+0x8>
   1159c:	701d      	strb	r5, [r3, #0]
   1159e:	3301      	adds	r3, #1
   115a0:	e7fa      	b.n	11598 <strncpy+0x1a>
   115a2:	001c      	movs	r4, r3
   115a4:	0032      	movs	r2, r6
   115a6:	e7ec      	b.n	11582 <strncpy+0x4>

000115a8 <__swbuf_r>:
   115a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115aa:	0005      	movs	r5, r0
   115ac:	000e      	movs	r6, r1
   115ae:	0014      	movs	r4, r2
   115b0:	2800      	cmp	r0, #0
   115b2:	d004      	beq.n	115be <__swbuf_r+0x16>
   115b4:	6983      	ldr	r3, [r0, #24]
   115b6:	2b00      	cmp	r3, #0
   115b8:	d101      	bne.n	115be <__swbuf_r+0x16>
   115ba:	f001 f839 	bl	12630 <__sinit>
   115be:	4b22      	ldr	r3, [pc, #136]	; (11648 <__swbuf_r+0xa0>)
   115c0:	429c      	cmp	r4, r3
   115c2:	d12d      	bne.n	11620 <__swbuf_r+0x78>
   115c4:	686c      	ldr	r4, [r5, #4]
   115c6:	69a3      	ldr	r3, [r4, #24]
   115c8:	60a3      	str	r3, [r4, #8]
   115ca:	89a3      	ldrh	r3, [r4, #12]
   115cc:	071b      	lsls	r3, r3, #28
   115ce:	d531      	bpl.n	11634 <__swbuf_r+0x8c>
   115d0:	6923      	ldr	r3, [r4, #16]
   115d2:	2b00      	cmp	r3, #0
   115d4:	d02e      	beq.n	11634 <__swbuf_r+0x8c>
   115d6:	6823      	ldr	r3, [r4, #0]
   115d8:	6922      	ldr	r2, [r4, #16]
   115da:	b2f7      	uxtb	r7, r6
   115dc:	1a98      	subs	r0, r3, r2
   115de:	6963      	ldr	r3, [r4, #20]
   115e0:	b2f6      	uxtb	r6, r6
   115e2:	4298      	cmp	r0, r3
   115e4:	db05      	blt.n	115f2 <__swbuf_r+0x4a>
   115e6:	0021      	movs	r1, r4
   115e8:	0028      	movs	r0, r5
   115ea:	f000 ffb3 	bl	12554 <_fflush_r>
   115ee:	2800      	cmp	r0, #0
   115f0:	d126      	bne.n	11640 <__swbuf_r+0x98>
   115f2:	68a3      	ldr	r3, [r4, #8]
   115f4:	3001      	adds	r0, #1
   115f6:	3b01      	subs	r3, #1
   115f8:	60a3      	str	r3, [r4, #8]
   115fa:	6823      	ldr	r3, [r4, #0]
   115fc:	1c5a      	adds	r2, r3, #1
   115fe:	6022      	str	r2, [r4, #0]
   11600:	701f      	strb	r7, [r3, #0]
   11602:	6963      	ldr	r3, [r4, #20]
   11604:	4298      	cmp	r0, r3
   11606:	d004      	beq.n	11612 <__swbuf_r+0x6a>
   11608:	89a3      	ldrh	r3, [r4, #12]
   1160a:	07db      	lsls	r3, r3, #31
   1160c:	d51a      	bpl.n	11644 <__swbuf_r+0x9c>
   1160e:	2e0a      	cmp	r6, #10
   11610:	d118      	bne.n	11644 <__swbuf_r+0x9c>
   11612:	0021      	movs	r1, r4
   11614:	0028      	movs	r0, r5
   11616:	f000 ff9d 	bl	12554 <_fflush_r>
   1161a:	2800      	cmp	r0, #0
   1161c:	d012      	beq.n	11644 <__swbuf_r+0x9c>
   1161e:	e00f      	b.n	11640 <__swbuf_r+0x98>
   11620:	4b0a      	ldr	r3, [pc, #40]	; (1164c <__swbuf_r+0xa4>)
   11622:	429c      	cmp	r4, r3
   11624:	d101      	bne.n	1162a <__swbuf_r+0x82>
   11626:	68ac      	ldr	r4, [r5, #8]
   11628:	e7cd      	b.n	115c6 <__swbuf_r+0x1e>
   1162a:	4b09      	ldr	r3, [pc, #36]	; (11650 <__swbuf_r+0xa8>)
   1162c:	429c      	cmp	r4, r3
   1162e:	d1ca      	bne.n	115c6 <__swbuf_r+0x1e>
   11630:	68ec      	ldr	r4, [r5, #12]
   11632:	e7c8      	b.n	115c6 <__swbuf_r+0x1e>
   11634:	0021      	movs	r1, r4
   11636:	0028      	movs	r0, r5
   11638:	f000 f818 	bl	1166c <__swsetup_r>
   1163c:	2800      	cmp	r0, #0
   1163e:	d0ca      	beq.n	115d6 <__swbuf_r+0x2e>
   11640:	2601      	movs	r6, #1
   11642:	4276      	negs	r6, r6
   11644:	0030      	movs	r0, r6
   11646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11648:	00014304 	.word	0x00014304
   1164c:	00014324 	.word	0x00014324
   11650:	000142e4 	.word	0x000142e4

00011654 <__ascii_wctomb>:
   11654:	1e0b      	subs	r3, r1, #0
   11656:	d004      	beq.n	11662 <__ascii_wctomb+0xe>
   11658:	2aff      	cmp	r2, #255	; 0xff
   1165a:	d904      	bls.n	11666 <__ascii_wctomb+0x12>
   1165c:	238a      	movs	r3, #138	; 0x8a
   1165e:	6003      	str	r3, [r0, #0]
   11660:	3b8b      	subs	r3, #139	; 0x8b
   11662:	0018      	movs	r0, r3
   11664:	4770      	bx	lr
   11666:	700a      	strb	r2, [r1, #0]
   11668:	2301      	movs	r3, #1
   1166a:	e7fa      	b.n	11662 <__ascii_wctomb+0xe>

0001166c <__swsetup_r>:
   1166c:	4b36      	ldr	r3, [pc, #216]	; (11748 <__swsetup_r+0xdc>)
   1166e:	b570      	push	{r4, r5, r6, lr}
   11670:	681d      	ldr	r5, [r3, #0]
   11672:	0006      	movs	r6, r0
   11674:	000c      	movs	r4, r1
   11676:	2d00      	cmp	r5, #0
   11678:	d005      	beq.n	11686 <__swsetup_r+0x1a>
   1167a:	69ab      	ldr	r3, [r5, #24]
   1167c:	2b00      	cmp	r3, #0
   1167e:	d102      	bne.n	11686 <__swsetup_r+0x1a>
   11680:	0028      	movs	r0, r5
   11682:	f000 ffd5 	bl	12630 <__sinit>
   11686:	4b31      	ldr	r3, [pc, #196]	; (1174c <__swsetup_r+0xe0>)
   11688:	429c      	cmp	r4, r3
   1168a:	d10f      	bne.n	116ac <__swsetup_r+0x40>
   1168c:	686c      	ldr	r4, [r5, #4]
   1168e:	230c      	movs	r3, #12
   11690:	5ee2      	ldrsh	r2, [r4, r3]
   11692:	b293      	uxth	r3, r2
   11694:	0719      	lsls	r1, r3, #28
   11696:	d42d      	bmi.n	116f4 <__swsetup_r+0x88>
   11698:	06d9      	lsls	r1, r3, #27
   1169a:	d411      	bmi.n	116c0 <__swsetup_r+0x54>
   1169c:	2309      	movs	r3, #9
   1169e:	2001      	movs	r0, #1
   116a0:	6033      	str	r3, [r6, #0]
   116a2:	3337      	adds	r3, #55	; 0x37
   116a4:	4313      	orrs	r3, r2
   116a6:	81a3      	strh	r3, [r4, #12]
   116a8:	4240      	negs	r0, r0
   116aa:	bd70      	pop	{r4, r5, r6, pc}
   116ac:	4b28      	ldr	r3, [pc, #160]	; (11750 <__swsetup_r+0xe4>)
   116ae:	429c      	cmp	r4, r3
   116b0:	d101      	bne.n	116b6 <__swsetup_r+0x4a>
   116b2:	68ac      	ldr	r4, [r5, #8]
   116b4:	e7eb      	b.n	1168e <__swsetup_r+0x22>
   116b6:	4b27      	ldr	r3, [pc, #156]	; (11754 <__swsetup_r+0xe8>)
   116b8:	429c      	cmp	r4, r3
   116ba:	d1e8      	bne.n	1168e <__swsetup_r+0x22>
   116bc:	68ec      	ldr	r4, [r5, #12]
   116be:	e7e6      	b.n	1168e <__swsetup_r+0x22>
   116c0:	075b      	lsls	r3, r3, #29
   116c2:	d513      	bpl.n	116ec <__swsetup_r+0x80>
   116c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   116c6:	2900      	cmp	r1, #0
   116c8:	d008      	beq.n	116dc <__swsetup_r+0x70>
   116ca:	0023      	movs	r3, r4
   116cc:	3344      	adds	r3, #68	; 0x44
   116ce:	4299      	cmp	r1, r3
   116d0:	d002      	beq.n	116d8 <__swsetup_r+0x6c>
   116d2:	0030      	movs	r0, r6
   116d4:	f7ff f8be 	bl	10854 <_free_r>
   116d8:	2300      	movs	r3, #0
   116da:	6363      	str	r3, [r4, #52]	; 0x34
   116dc:	2224      	movs	r2, #36	; 0x24
   116de:	89a3      	ldrh	r3, [r4, #12]
   116e0:	4393      	bics	r3, r2
   116e2:	81a3      	strh	r3, [r4, #12]
   116e4:	2300      	movs	r3, #0
   116e6:	6063      	str	r3, [r4, #4]
   116e8:	6923      	ldr	r3, [r4, #16]
   116ea:	6023      	str	r3, [r4, #0]
   116ec:	2308      	movs	r3, #8
   116ee:	89a2      	ldrh	r2, [r4, #12]
   116f0:	4313      	orrs	r3, r2
   116f2:	81a3      	strh	r3, [r4, #12]
   116f4:	6923      	ldr	r3, [r4, #16]
   116f6:	2b00      	cmp	r3, #0
   116f8:	d10b      	bne.n	11712 <__swsetup_r+0xa6>
   116fa:	21a0      	movs	r1, #160	; 0xa0
   116fc:	2280      	movs	r2, #128	; 0x80
   116fe:	89a3      	ldrh	r3, [r4, #12]
   11700:	0089      	lsls	r1, r1, #2
   11702:	0092      	lsls	r2, r2, #2
   11704:	400b      	ands	r3, r1
   11706:	4293      	cmp	r3, r2
   11708:	d003      	beq.n	11712 <__swsetup_r+0xa6>
   1170a:	0021      	movs	r1, r4
   1170c:	0030      	movs	r0, r6
   1170e:	f001 f859 	bl	127c4 <__smakebuf_r>
   11712:	2301      	movs	r3, #1
   11714:	89a2      	ldrh	r2, [r4, #12]
   11716:	4013      	ands	r3, r2
   11718:	d011      	beq.n	1173e <__swsetup_r+0xd2>
   1171a:	2300      	movs	r3, #0
   1171c:	60a3      	str	r3, [r4, #8]
   1171e:	6963      	ldr	r3, [r4, #20]
   11720:	425b      	negs	r3, r3
   11722:	61a3      	str	r3, [r4, #24]
   11724:	2000      	movs	r0, #0
   11726:	6923      	ldr	r3, [r4, #16]
   11728:	4283      	cmp	r3, r0
   1172a:	d1be      	bne.n	116aa <__swsetup_r+0x3e>
   1172c:	230c      	movs	r3, #12
   1172e:	5ee2      	ldrsh	r2, [r4, r3]
   11730:	0613      	lsls	r3, r2, #24
   11732:	d5ba      	bpl.n	116aa <__swsetup_r+0x3e>
   11734:	2340      	movs	r3, #64	; 0x40
   11736:	4313      	orrs	r3, r2
   11738:	81a3      	strh	r3, [r4, #12]
   1173a:	3801      	subs	r0, #1
   1173c:	e7b5      	b.n	116aa <__swsetup_r+0x3e>
   1173e:	0792      	lsls	r2, r2, #30
   11740:	d400      	bmi.n	11744 <__swsetup_r+0xd8>
   11742:	6963      	ldr	r3, [r4, #20]
   11744:	60a3      	str	r3, [r4, #8]
   11746:	e7ed      	b.n	11724 <__swsetup_r+0xb8>
   11748:	200000a4 	.word	0x200000a4
   1174c:	00014304 	.word	0x00014304
   11750:	00014324 	.word	0x00014324
   11754:	000142e4 	.word	0x000142e4

00011758 <abort>:
   11758:	b510      	push	{r4, lr}
   1175a:	2006      	movs	r0, #6
   1175c:	f001 fbc4 	bl	12ee8 <raise>
   11760:	2001      	movs	r0, #1
   11762:	f001 fd41 	bl	131e8 <_exit>

00011766 <quorem>:
   11766:	b5f0      	push	{r4, r5, r6, r7, lr}
   11768:	6903      	ldr	r3, [r0, #16]
   1176a:	690c      	ldr	r4, [r1, #16]
   1176c:	b089      	sub	sp, #36	; 0x24
   1176e:	0007      	movs	r7, r0
   11770:	9105      	str	r1, [sp, #20]
   11772:	2600      	movs	r6, #0
   11774:	429c      	cmp	r4, r3
   11776:	dc6d      	bgt.n	11854 <quorem+0xee>
   11778:	000b      	movs	r3, r1
   1177a:	3c01      	subs	r4, #1
   1177c:	3314      	adds	r3, #20
   1177e:	00a5      	lsls	r5, r4, #2
   11780:	9303      	str	r3, [sp, #12]
   11782:	195b      	adds	r3, r3, r5
   11784:	9304      	str	r3, [sp, #16]
   11786:	0003      	movs	r3, r0
   11788:	3314      	adds	r3, #20
   1178a:	9302      	str	r3, [sp, #8]
   1178c:	195d      	adds	r5, r3, r5
   1178e:	9b04      	ldr	r3, [sp, #16]
   11790:	6828      	ldr	r0, [r5, #0]
   11792:	681b      	ldr	r3, [r3, #0]
   11794:	1c59      	adds	r1, r3, #1
   11796:	9301      	str	r3, [sp, #4]
   11798:	f7fd f87e 	bl	e898 <__udivsi3>
   1179c:	9001      	str	r0, [sp, #4]
   1179e:	42b0      	cmp	r0, r6
   117a0:	d02d      	beq.n	117fe <quorem+0x98>
   117a2:	9b03      	ldr	r3, [sp, #12]
   117a4:	9802      	ldr	r0, [sp, #8]
   117a6:	469c      	mov	ip, r3
   117a8:	9606      	str	r6, [sp, #24]
   117aa:	4662      	mov	r2, ip
   117ac:	ca08      	ldmia	r2!, {r3}
   117ae:	4694      	mov	ip, r2
   117b0:	9a01      	ldr	r2, [sp, #4]
   117b2:	b299      	uxth	r1, r3
   117b4:	4351      	muls	r1, r2
   117b6:	0c1b      	lsrs	r3, r3, #16
   117b8:	4353      	muls	r3, r2
   117ba:	1989      	adds	r1, r1, r6
   117bc:	0c0a      	lsrs	r2, r1, #16
   117be:	189b      	adds	r3, r3, r2
   117c0:	9307      	str	r3, [sp, #28]
   117c2:	8802      	ldrh	r2, [r0, #0]
   117c4:	0c1e      	lsrs	r6, r3, #16
   117c6:	9b06      	ldr	r3, [sp, #24]
   117c8:	b289      	uxth	r1, r1
   117ca:	18d2      	adds	r2, r2, r3
   117cc:	6803      	ldr	r3, [r0, #0]
   117ce:	1a52      	subs	r2, r2, r1
   117d0:	0c19      	lsrs	r1, r3, #16
   117d2:	466b      	mov	r3, sp
   117d4:	8b9b      	ldrh	r3, [r3, #28]
   117d6:	1acb      	subs	r3, r1, r3
   117d8:	1411      	asrs	r1, r2, #16
   117da:	185b      	adds	r3, r3, r1
   117dc:	1419      	asrs	r1, r3, #16
   117de:	b292      	uxth	r2, r2
   117e0:	041b      	lsls	r3, r3, #16
   117e2:	431a      	orrs	r2, r3
   117e4:	9b04      	ldr	r3, [sp, #16]
   117e6:	9106      	str	r1, [sp, #24]
   117e8:	c004      	stmia	r0!, {r2}
   117ea:	4563      	cmp	r3, ip
   117ec:	d2dd      	bcs.n	117aa <quorem+0x44>
   117ee:	682b      	ldr	r3, [r5, #0]
   117f0:	2b00      	cmp	r3, #0
   117f2:	d104      	bne.n	117fe <quorem+0x98>
   117f4:	9b02      	ldr	r3, [sp, #8]
   117f6:	3d04      	subs	r5, #4
   117f8:	42ab      	cmp	r3, r5
   117fa:	d32e      	bcc.n	1185a <quorem+0xf4>
   117fc:	613c      	str	r4, [r7, #16]
   117fe:	9905      	ldr	r1, [sp, #20]
   11800:	0038      	movs	r0, r7
   11802:	f001 fa42 	bl	12c8a <__mcmp>
   11806:	2800      	cmp	r0, #0
   11808:	db23      	blt.n	11852 <quorem+0xec>
   1180a:	2500      	movs	r5, #0
   1180c:	9b01      	ldr	r3, [sp, #4]
   1180e:	9802      	ldr	r0, [sp, #8]
   11810:	3301      	adds	r3, #1
   11812:	9903      	ldr	r1, [sp, #12]
   11814:	9301      	str	r3, [sp, #4]
   11816:	c908      	ldmia	r1!, {r3}
   11818:	8802      	ldrh	r2, [r0, #0]
   1181a:	1955      	adds	r5, r2, r5
   1181c:	b29a      	uxth	r2, r3
   1181e:	1aaa      	subs	r2, r5, r2
   11820:	6805      	ldr	r5, [r0, #0]
   11822:	0c1b      	lsrs	r3, r3, #16
   11824:	0c2d      	lsrs	r5, r5, #16
   11826:	1aeb      	subs	r3, r5, r3
   11828:	1415      	asrs	r5, r2, #16
   1182a:	195b      	adds	r3, r3, r5
   1182c:	141d      	asrs	r5, r3, #16
   1182e:	b292      	uxth	r2, r2
   11830:	041b      	lsls	r3, r3, #16
   11832:	4313      	orrs	r3, r2
   11834:	c008      	stmia	r0!, {r3}
   11836:	9b04      	ldr	r3, [sp, #16]
   11838:	428b      	cmp	r3, r1
   1183a:	d2ec      	bcs.n	11816 <quorem+0xb0>
   1183c:	9a02      	ldr	r2, [sp, #8]
   1183e:	00a3      	lsls	r3, r4, #2
   11840:	18d3      	adds	r3, r2, r3
   11842:	681a      	ldr	r2, [r3, #0]
   11844:	2a00      	cmp	r2, #0
   11846:	d104      	bne.n	11852 <quorem+0xec>
   11848:	9a02      	ldr	r2, [sp, #8]
   1184a:	3b04      	subs	r3, #4
   1184c:	429a      	cmp	r2, r3
   1184e:	d309      	bcc.n	11864 <quorem+0xfe>
   11850:	613c      	str	r4, [r7, #16]
   11852:	9e01      	ldr	r6, [sp, #4]
   11854:	0030      	movs	r0, r6
   11856:	b009      	add	sp, #36	; 0x24
   11858:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1185a:	682b      	ldr	r3, [r5, #0]
   1185c:	2b00      	cmp	r3, #0
   1185e:	d1cd      	bne.n	117fc <quorem+0x96>
   11860:	3c01      	subs	r4, #1
   11862:	e7c7      	b.n	117f4 <quorem+0x8e>
   11864:	681a      	ldr	r2, [r3, #0]
   11866:	2a00      	cmp	r2, #0
   11868:	d1f2      	bne.n	11850 <quorem+0xea>
   1186a:	3c01      	subs	r4, #1
   1186c:	e7ec      	b.n	11848 <quorem+0xe2>
	...

00011870 <_dtoa_r>:
   11870:	b5f0      	push	{r4, r5, r6, r7, lr}
   11872:	0016      	movs	r6, r2
   11874:	001f      	movs	r7, r3
   11876:	6a44      	ldr	r4, [r0, #36]	; 0x24
   11878:	b09d      	sub	sp, #116	; 0x74
   1187a:	9004      	str	r0, [sp, #16]
   1187c:	9d25      	ldr	r5, [sp, #148]	; 0x94
   1187e:	9606      	str	r6, [sp, #24]
   11880:	9707      	str	r7, [sp, #28]
   11882:	2c00      	cmp	r4, #0
   11884:	d108      	bne.n	11898 <_dtoa_r+0x28>
   11886:	2010      	movs	r0, #16
   11888:	f7fe ff9e 	bl	107c8 <malloc>
   1188c:	9b04      	ldr	r3, [sp, #16]
   1188e:	6258      	str	r0, [r3, #36]	; 0x24
   11890:	6044      	str	r4, [r0, #4]
   11892:	6084      	str	r4, [r0, #8]
   11894:	6004      	str	r4, [r0, #0]
   11896:	60c4      	str	r4, [r0, #12]
   11898:	9b04      	ldr	r3, [sp, #16]
   1189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1189c:	6819      	ldr	r1, [r3, #0]
   1189e:	2900      	cmp	r1, #0
   118a0:	d00b      	beq.n	118ba <_dtoa_r+0x4a>
   118a2:	685a      	ldr	r2, [r3, #4]
   118a4:	2301      	movs	r3, #1
   118a6:	4093      	lsls	r3, r2
   118a8:	604a      	str	r2, [r1, #4]
   118aa:	608b      	str	r3, [r1, #8]
   118ac:	9804      	ldr	r0, [sp, #16]
   118ae:	f001 f812 	bl	128d6 <_Bfree>
   118b2:	2200      	movs	r2, #0
   118b4:	9b04      	ldr	r3, [sp, #16]
   118b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   118b8:	601a      	str	r2, [r3, #0]
   118ba:	9b07      	ldr	r3, [sp, #28]
   118bc:	2b00      	cmp	r3, #0
   118be:	da1f      	bge.n	11900 <_dtoa_r+0x90>
   118c0:	2301      	movs	r3, #1
   118c2:	602b      	str	r3, [r5, #0]
   118c4:	007b      	lsls	r3, r7, #1
   118c6:	085b      	lsrs	r3, r3, #1
   118c8:	9307      	str	r3, [sp, #28]
   118ca:	9c07      	ldr	r4, [sp, #28]
   118cc:	4bb7      	ldr	r3, [pc, #732]	; (11bac <_dtoa_r+0x33c>)
   118ce:	0022      	movs	r2, r4
   118d0:	9319      	str	r3, [sp, #100]	; 0x64
   118d2:	401a      	ands	r2, r3
   118d4:	429a      	cmp	r2, r3
   118d6:	d116      	bne.n	11906 <_dtoa_r+0x96>
   118d8:	4bb5      	ldr	r3, [pc, #724]	; (11bb0 <_dtoa_r+0x340>)
   118da:	9a24      	ldr	r2, [sp, #144]	; 0x90
   118dc:	6013      	str	r3, [r2, #0]
   118de:	9b06      	ldr	r3, [sp, #24]
   118e0:	2b00      	cmp	r3, #0
   118e2:	d103      	bne.n	118ec <_dtoa_r+0x7c>
   118e4:	0324      	lsls	r4, r4, #12
   118e6:	d101      	bne.n	118ec <_dtoa_r+0x7c>
   118e8:	f000 fd91 	bl	1240e <_dtoa_r+0xb9e>
   118ec:	4bb1      	ldr	r3, [pc, #708]	; (11bb4 <_dtoa_r+0x344>)
   118ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
   118f0:	930a      	str	r3, [sp, #40]	; 0x28
   118f2:	4bb1      	ldr	r3, [pc, #708]	; (11bb8 <_dtoa_r+0x348>)
   118f4:	2a00      	cmp	r2, #0
   118f6:	d001      	beq.n	118fc <_dtoa_r+0x8c>
   118f8:	f000 fd8f 	bl	1241a <_dtoa_r+0xbaa>
   118fc:	f000 fd8f 	bl	1241e <_dtoa_r+0xbae>
   11900:	2300      	movs	r3, #0
   11902:	602b      	str	r3, [r5, #0]
   11904:	e7e1      	b.n	118ca <_dtoa_r+0x5a>
   11906:	9e06      	ldr	r6, [sp, #24]
   11908:	9f07      	ldr	r7, [sp, #28]
   1190a:	2200      	movs	r2, #0
   1190c:	2300      	movs	r3, #0
   1190e:	0030      	movs	r0, r6
   11910:	0039      	movs	r1, r7
   11912:	f7fd f947 	bl	eba4 <__aeabi_dcmpeq>
   11916:	1e05      	subs	r5, r0, #0
   11918:	d00e      	beq.n	11938 <_dtoa_r+0xc8>
   1191a:	2301      	movs	r3, #1
   1191c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1191e:	6013      	str	r3, [r2, #0]
   11920:	4ba6      	ldr	r3, [pc, #664]	; (11bbc <_dtoa_r+0x34c>)
   11922:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11924:	930a      	str	r3, [sp, #40]	; 0x28
   11926:	2a00      	cmp	r2, #0
   11928:	d101      	bne.n	1192e <_dtoa_r+0xbe>
   1192a:	f000 fd78 	bl	1241e <_dtoa_r+0xbae>
   1192e:	4aa4      	ldr	r2, [pc, #656]	; (11bc0 <_dtoa_r+0x350>)
   11930:	9926      	ldr	r1, [sp, #152]	; 0x98
   11932:	600a      	str	r2, [r1, #0]
   11934:	f000 fd73 	bl	1241e <_dtoa_r+0xbae>
   11938:	ab1a      	add	r3, sp, #104	; 0x68
   1193a:	9301      	str	r3, [sp, #4]
   1193c:	ab1b      	add	r3, sp, #108	; 0x6c
   1193e:	9300      	str	r3, [sp, #0]
   11940:	0032      	movs	r2, r6
   11942:	003b      	movs	r3, r7
   11944:	9804      	ldr	r0, [sp, #16]
   11946:	f001 fa1d 	bl	12d84 <__d2b>
   1194a:	0063      	lsls	r3, r4, #1
   1194c:	9005      	str	r0, [sp, #20]
   1194e:	0d5b      	lsrs	r3, r3, #21
   11950:	d100      	bne.n	11954 <_dtoa_r+0xe4>
   11952:	e07f      	b.n	11a54 <_dtoa_r+0x1e4>
   11954:	033a      	lsls	r2, r7, #12
   11956:	4c9b      	ldr	r4, [pc, #620]	; (11bc4 <_dtoa_r+0x354>)
   11958:	0b12      	lsrs	r2, r2, #12
   1195a:	4314      	orrs	r4, r2
   1195c:	0021      	movs	r1, r4
   1195e:	4a9a      	ldr	r2, [pc, #616]	; (11bc8 <_dtoa_r+0x358>)
   11960:	0030      	movs	r0, r6
   11962:	9518      	str	r5, [sp, #96]	; 0x60
   11964:	189e      	adds	r6, r3, r2
   11966:	2200      	movs	r2, #0
   11968:	4b98      	ldr	r3, [pc, #608]	; (11bcc <_dtoa_r+0x35c>)
   1196a:	f7fe fb0d 	bl	ff88 <__aeabi_dsub>
   1196e:	4a98      	ldr	r2, [pc, #608]	; (11bd0 <_dtoa_r+0x360>)
   11970:	4b98      	ldr	r3, [pc, #608]	; (11bd4 <_dtoa_r+0x364>)
   11972:	f7fe f889 	bl	fa88 <__aeabi_dmul>
   11976:	4a98      	ldr	r2, [pc, #608]	; (11bd8 <_dtoa_r+0x368>)
   11978:	4b98      	ldr	r3, [pc, #608]	; (11bdc <_dtoa_r+0x36c>)
   1197a:	f7fd f941 	bl	ec00 <__aeabi_dadd>
   1197e:	0004      	movs	r4, r0
   11980:	0030      	movs	r0, r6
   11982:	000d      	movs	r5, r1
   11984:	f001 fba0 	bl	130c8 <__aeabi_i2d>
   11988:	4a95      	ldr	r2, [pc, #596]	; (11be0 <_dtoa_r+0x370>)
   1198a:	4b96      	ldr	r3, [pc, #600]	; (11be4 <_dtoa_r+0x374>)
   1198c:	f7fe f87c 	bl	fa88 <__aeabi_dmul>
   11990:	0002      	movs	r2, r0
   11992:	000b      	movs	r3, r1
   11994:	0020      	movs	r0, r4
   11996:	0029      	movs	r1, r5
   11998:	f7fd f932 	bl	ec00 <__aeabi_dadd>
   1199c:	0004      	movs	r4, r0
   1199e:	000d      	movs	r5, r1
   119a0:	f7fe fe28 	bl	105f4 <__aeabi_d2iz>
   119a4:	2200      	movs	r2, #0
   119a6:	9003      	str	r0, [sp, #12]
   119a8:	2300      	movs	r3, #0
   119aa:	0020      	movs	r0, r4
   119ac:	0029      	movs	r1, r5
   119ae:	f7fd f8ff 	bl	ebb0 <__aeabi_dcmplt>
   119b2:	2800      	cmp	r0, #0
   119b4:	d00e      	beq.n	119d4 <_dtoa_r+0x164>
   119b6:	9803      	ldr	r0, [sp, #12]
   119b8:	f001 fb86 	bl	130c8 <__aeabi_i2d>
   119bc:	000b      	movs	r3, r1
   119be:	0002      	movs	r2, r0
   119c0:	0029      	movs	r1, r5
   119c2:	0020      	movs	r0, r4
   119c4:	f7fd f8ee 	bl	eba4 <__aeabi_dcmpeq>
   119c8:	0003      	movs	r3, r0
   119ca:	4258      	negs	r0, r3
   119cc:	4158      	adcs	r0, r3
   119ce:	9b03      	ldr	r3, [sp, #12]
   119d0:	1a1b      	subs	r3, r3, r0
   119d2:	9303      	str	r3, [sp, #12]
   119d4:	2301      	movs	r3, #1
   119d6:	9316      	str	r3, [sp, #88]	; 0x58
   119d8:	9b03      	ldr	r3, [sp, #12]
   119da:	2b16      	cmp	r3, #22
   119dc:	d80f      	bhi.n	119fe <_dtoa_r+0x18e>
   119de:	4982      	ldr	r1, [pc, #520]	; (11be8 <_dtoa_r+0x378>)
   119e0:	00db      	lsls	r3, r3, #3
   119e2:	18c9      	adds	r1, r1, r3
   119e4:	6808      	ldr	r0, [r1, #0]
   119e6:	6849      	ldr	r1, [r1, #4]
   119e8:	9a06      	ldr	r2, [sp, #24]
   119ea:	9b07      	ldr	r3, [sp, #28]
   119ec:	f7fd f8f4 	bl	ebd8 <__aeabi_dcmpgt>
   119f0:	2800      	cmp	r0, #0
   119f2:	d04b      	beq.n	11a8c <_dtoa_r+0x21c>
   119f4:	9b03      	ldr	r3, [sp, #12]
   119f6:	3b01      	subs	r3, #1
   119f8:	9303      	str	r3, [sp, #12]
   119fa:	2300      	movs	r3, #0
   119fc:	9316      	str	r3, [sp, #88]	; 0x58
   119fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11a00:	1b9e      	subs	r6, r3, r6
   11a02:	2300      	movs	r3, #0
   11a04:	930b      	str	r3, [sp, #44]	; 0x2c
   11a06:	0033      	movs	r3, r6
   11a08:	3b01      	subs	r3, #1
   11a0a:	930c      	str	r3, [sp, #48]	; 0x30
   11a0c:	d504      	bpl.n	11a18 <_dtoa_r+0x1a8>
   11a0e:	2301      	movs	r3, #1
   11a10:	1b9b      	subs	r3, r3, r6
   11a12:	930b      	str	r3, [sp, #44]	; 0x2c
   11a14:	2300      	movs	r3, #0
   11a16:	930c      	str	r3, [sp, #48]	; 0x30
   11a18:	9b03      	ldr	r3, [sp, #12]
   11a1a:	2b00      	cmp	r3, #0
   11a1c:	db38      	blt.n	11a90 <_dtoa_r+0x220>
   11a1e:	9a03      	ldr	r2, [sp, #12]
   11a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11a22:	4694      	mov	ip, r2
   11a24:	4463      	add	r3, ip
   11a26:	930c      	str	r3, [sp, #48]	; 0x30
   11a28:	2300      	movs	r3, #0
   11a2a:	920f      	str	r2, [sp, #60]	; 0x3c
   11a2c:	9308      	str	r3, [sp, #32]
   11a2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11a30:	2501      	movs	r5, #1
   11a32:	2b09      	cmp	r3, #9
   11a34:	d900      	bls.n	11a38 <_dtoa_r+0x1c8>
   11a36:	e091      	b.n	11b5c <_dtoa_r+0x2ec>
   11a38:	2b05      	cmp	r3, #5
   11a3a:	dd02      	ble.n	11a42 <_dtoa_r+0x1d2>
   11a3c:	2500      	movs	r5, #0
   11a3e:	3b04      	subs	r3, #4
   11a40:	9322      	str	r3, [sp, #136]	; 0x88
   11a42:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11a44:	1e98      	subs	r0, r3, #2
   11a46:	2803      	cmp	r0, #3
   11a48:	d900      	bls.n	11a4c <_dtoa_r+0x1dc>
   11a4a:	e091      	b.n	11b70 <_dtoa_r+0x300>
   11a4c:	f001 fb32 	bl	130b4 <__gnu_thumb1_case_uqi>
   11a50:	76298482 	.word	0x76298482
   11a54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11a56:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11a58:	189e      	adds	r6, r3, r2
   11a5a:	4b64      	ldr	r3, [pc, #400]	; (11bec <_dtoa_r+0x37c>)
   11a5c:	18f2      	adds	r2, r6, r3
   11a5e:	2a20      	cmp	r2, #32
   11a60:	dd0f      	ble.n	11a82 <_dtoa_r+0x212>
   11a62:	4b63      	ldr	r3, [pc, #396]	; (11bf0 <_dtoa_r+0x380>)
   11a64:	9806      	ldr	r0, [sp, #24]
   11a66:	18f3      	adds	r3, r6, r3
   11a68:	40d8      	lsrs	r0, r3
   11a6a:	2340      	movs	r3, #64	; 0x40
   11a6c:	1a9b      	subs	r3, r3, r2
   11a6e:	409c      	lsls	r4, r3
   11a70:	4320      	orrs	r0, r4
   11a72:	f7fe fdf3 	bl	1065c <__aeabi_ui2d>
   11a76:	2301      	movs	r3, #1
   11a78:	4c5e      	ldr	r4, [pc, #376]	; (11bf4 <_dtoa_r+0x384>)
   11a7a:	3e01      	subs	r6, #1
   11a7c:	1909      	adds	r1, r1, r4
   11a7e:	9318      	str	r3, [sp, #96]	; 0x60
   11a80:	e771      	b.n	11966 <_dtoa_r+0xf6>
   11a82:	2320      	movs	r3, #32
   11a84:	9806      	ldr	r0, [sp, #24]
   11a86:	1a9b      	subs	r3, r3, r2
   11a88:	4098      	lsls	r0, r3
   11a8a:	e7f2      	b.n	11a72 <_dtoa_r+0x202>
   11a8c:	9016      	str	r0, [sp, #88]	; 0x58
   11a8e:	e7b6      	b.n	119fe <_dtoa_r+0x18e>
   11a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a92:	9a03      	ldr	r2, [sp, #12]
   11a94:	1a9b      	subs	r3, r3, r2
   11a96:	930b      	str	r3, [sp, #44]	; 0x2c
   11a98:	4253      	negs	r3, r2
   11a9a:	9308      	str	r3, [sp, #32]
   11a9c:	2300      	movs	r3, #0
   11a9e:	930f      	str	r3, [sp, #60]	; 0x3c
   11aa0:	e7c5      	b.n	11a2e <_dtoa_r+0x1be>
   11aa2:	2301      	movs	r3, #1
   11aa4:	930e      	str	r3, [sp, #56]	; 0x38
   11aa6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11aa8:	2b00      	cmp	r3, #0
   11aaa:	dd65      	ble.n	11b78 <_dtoa_r+0x308>
   11aac:	001f      	movs	r7, r3
   11aae:	930d      	str	r3, [sp, #52]	; 0x34
   11ab0:	9a04      	ldr	r2, [sp, #16]
   11ab2:	6a54      	ldr	r4, [r2, #36]	; 0x24
   11ab4:	2200      	movs	r2, #0
   11ab6:	6062      	str	r2, [r4, #4]
   11ab8:	3204      	adds	r2, #4
   11aba:	0011      	movs	r1, r2
   11abc:	3114      	adds	r1, #20
   11abe:	4299      	cmp	r1, r3
   11ac0:	d95f      	bls.n	11b82 <_dtoa_r+0x312>
   11ac2:	6861      	ldr	r1, [r4, #4]
   11ac4:	9804      	ldr	r0, [sp, #16]
   11ac6:	f000 fece 	bl	12866 <_Balloc>
   11aca:	9b04      	ldr	r3, [sp, #16]
   11acc:	6020      	str	r0, [r4, #0]
   11ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11ad0:	681b      	ldr	r3, [r3, #0]
   11ad2:	930a      	str	r3, [sp, #40]	; 0x28
   11ad4:	2f0e      	cmp	r7, #14
   11ad6:	d900      	bls.n	11ada <_dtoa_r+0x26a>
   11ad8:	e105      	b.n	11ce6 <_dtoa_r+0x476>
   11ada:	2d00      	cmp	r5, #0
   11adc:	d100      	bne.n	11ae0 <_dtoa_r+0x270>
   11ade:	e102      	b.n	11ce6 <_dtoa_r+0x476>
   11ae0:	9b06      	ldr	r3, [sp, #24]
   11ae2:	9c07      	ldr	r4, [sp, #28]
   11ae4:	9314      	str	r3, [sp, #80]	; 0x50
   11ae6:	9415      	str	r4, [sp, #84]	; 0x54
   11ae8:	9b03      	ldr	r3, [sp, #12]
   11aea:	2b00      	cmp	r3, #0
   11aec:	dc00      	bgt.n	11af0 <_dtoa_r+0x280>
   11aee:	e085      	b.n	11bfc <_dtoa_r+0x38c>
   11af0:	001a      	movs	r2, r3
   11af2:	210f      	movs	r1, #15
   11af4:	4b3c      	ldr	r3, [pc, #240]	; (11be8 <_dtoa_r+0x378>)
   11af6:	400a      	ands	r2, r1
   11af8:	00d2      	lsls	r2, r2, #3
   11afa:	189b      	adds	r3, r3, r2
   11afc:	685c      	ldr	r4, [r3, #4]
   11afe:	681b      	ldr	r3, [r3, #0]
   11b00:	9310      	str	r3, [sp, #64]	; 0x40
   11b02:	9411      	str	r4, [sp, #68]	; 0x44
   11b04:	9b03      	ldr	r3, [sp, #12]
   11b06:	2402      	movs	r4, #2
   11b08:	111d      	asrs	r5, r3, #4
   11b0a:	06eb      	lsls	r3, r5, #27
   11b0c:	d50a      	bpl.n	11b24 <_dtoa_r+0x2b4>
   11b0e:	4b3a      	ldr	r3, [pc, #232]	; (11bf8 <_dtoa_r+0x388>)
   11b10:	400d      	ands	r5, r1
   11b12:	6a1a      	ldr	r2, [r3, #32]
   11b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11b16:	9814      	ldr	r0, [sp, #80]	; 0x50
   11b18:	9915      	ldr	r1, [sp, #84]	; 0x54
   11b1a:	f7fd fb81 	bl	f220 <__aeabi_ddiv>
   11b1e:	9006      	str	r0, [sp, #24]
   11b20:	9107      	str	r1, [sp, #28]
   11b22:	3401      	adds	r4, #1
   11b24:	4e34      	ldr	r6, [pc, #208]	; (11bf8 <_dtoa_r+0x388>)
   11b26:	2d00      	cmp	r5, #0
   11b28:	d130      	bne.n	11b8c <_dtoa_r+0x31c>
   11b2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11b2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11b2e:	9806      	ldr	r0, [sp, #24]
   11b30:	9907      	ldr	r1, [sp, #28]
   11b32:	f7fd fb75 	bl	f220 <__aeabi_ddiv>
   11b36:	9006      	str	r0, [sp, #24]
   11b38:	9107      	str	r1, [sp, #28]
   11b3a:	e07a      	b.n	11c32 <_dtoa_r+0x3c2>
   11b3c:	2301      	movs	r3, #1
   11b3e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11b40:	930e      	str	r3, [sp, #56]	; 0x38
   11b42:	4694      	mov	ip, r2
   11b44:	9b03      	ldr	r3, [sp, #12]
   11b46:	4463      	add	r3, ip
   11b48:	1c5f      	adds	r7, r3, #1
   11b4a:	930d      	str	r3, [sp, #52]	; 0x34
   11b4c:	1e3b      	subs	r3, r7, #0
   11b4e:	dcaf      	bgt.n	11ab0 <_dtoa_r+0x240>
   11b50:	2301      	movs	r3, #1
   11b52:	e7ad      	b.n	11ab0 <_dtoa_r+0x240>
   11b54:	2300      	movs	r3, #0
   11b56:	e7a5      	b.n	11aa4 <_dtoa_r+0x234>
   11b58:	2300      	movs	r3, #0
   11b5a:	e7f0      	b.n	11b3e <_dtoa_r+0x2ce>
   11b5c:	2300      	movs	r3, #0
   11b5e:	950e      	str	r5, [sp, #56]	; 0x38
   11b60:	9322      	str	r3, [sp, #136]	; 0x88
   11b62:	3b01      	subs	r3, #1
   11b64:	2200      	movs	r2, #0
   11b66:	930d      	str	r3, [sp, #52]	; 0x34
   11b68:	001f      	movs	r7, r3
   11b6a:	3313      	adds	r3, #19
   11b6c:	9223      	str	r2, [sp, #140]	; 0x8c
   11b6e:	e79f      	b.n	11ab0 <_dtoa_r+0x240>
   11b70:	2301      	movs	r3, #1
   11b72:	930e      	str	r3, [sp, #56]	; 0x38
   11b74:	3b02      	subs	r3, #2
   11b76:	e7f5      	b.n	11b64 <_dtoa_r+0x2f4>
   11b78:	2301      	movs	r3, #1
   11b7a:	930d      	str	r3, [sp, #52]	; 0x34
   11b7c:	001f      	movs	r7, r3
   11b7e:	001a      	movs	r2, r3
   11b80:	e7f4      	b.n	11b6c <_dtoa_r+0x2fc>
   11b82:	6861      	ldr	r1, [r4, #4]
   11b84:	0052      	lsls	r2, r2, #1
   11b86:	3101      	adds	r1, #1
   11b88:	6061      	str	r1, [r4, #4]
   11b8a:	e796      	b.n	11aba <_dtoa_r+0x24a>
   11b8c:	2301      	movs	r3, #1
   11b8e:	421d      	tst	r5, r3
   11b90:	d008      	beq.n	11ba4 <_dtoa_r+0x334>
   11b92:	9810      	ldr	r0, [sp, #64]	; 0x40
   11b94:	9911      	ldr	r1, [sp, #68]	; 0x44
   11b96:	18e4      	adds	r4, r4, r3
   11b98:	6832      	ldr	r2, [r6, #0]
   11b9a:	6873      	ldr	r3, [r6, #4]
   11b9c:	f7fd ff74 	bl	fa88 <__aeabi_dmul>
   11ba0:	9010      	str	r0, [sp, #64]	; 0x40
   11ba2:	9111      	str	r1, [sp, #68]	; 0x44
   11ba4:	106d      	asrs	r5, r5, #1
   11ba6:	3608      	adds	r6, #8
   11ba8:	e7bd      	b.n	11b26 <_dtoa_r+0x2b6>
   11baa:	46c0      	nop			; (mov r8, r8)
   11bac:	7ff00000 	.word	0x7ff00000
   11bb0:	0000270f 	.word	0x0000270f
   11bb4:	000142dd 	.word	0x000142dd
   11bb8:	000142e0 	.word	0x000142e0
   11bbc:	000141af 	.word	0x000141af
   11bc0:	000141b0 	.word	0x000141b0
   11bc4:	3ff00000 	.word	0x3ff00000
   11bc8:	fffffc01 	.word	0xfffffc01
   11bcc:	3ff80000 	.word	0x3ff80000
   11bd0:	636f4361 	.word	0x636f4361
   11bd4:	3fd287a7 	.word	0x3fd287a7
   11bd8:	8b60c8b3 	.word	0x8b60c8b3
   11bdc:	3fc68a28 	.word	0x3fc68a28
   11be0:	509f79fb 	.word	0x509f79fb
   11be4:	3fd34413 	.word	0x3fd34413
   11be8:	00014370 	.word	0x00014370
   11bec:	00000432 	.word	0x00000432
   11bf0:	00000412 	.word	0x00000412
   11bf4:	fe100000 	.word	0xfe100000
   11bf8:	00014348 	.word	0x00014348
   11bfc:	9b03      	ldr	r3, [sp, #12]
   11bfe:	2402      	movs	r4, #2
   11c00:	2b00      	cmp	r3, #0
   11c02:	d016      	beq.n	11c32 <_dtoa_r+0x3c2>
   11c04:	9814      	ldr	r0, [sp, #80]	; 0x50
   11c06:	9915      	ldr	r1, [sp, #84]	; 0x54
   11c08:	425d      	negs	r5, r3
   11c0a:	230f      	movs	r3, #15
   11c0c:	4aca      	ldr	r2, [pc, #808]	; (11f38 <_dtoa_r+0x6c8>)
   11c0e:	402b      	ands	r3, r5
   11c10:	00db      	lsls	r3, r3, #3
   11c12:	18d3      	adds	r3, r2, r3
   11c14:	681a      	ldr	r2, [r3, #0]
   11c16:	685b      	ldr	r3, [r3, #4]
   11c18:	f7fd ff36 	bl	fa88 <__aeabi_dmul>
   11c1c:	2300      	movs	r3, #0
   11c1e:	9006      	str	r0, [sp, #24]
   11c20:	9107      	str	r1, [sp, #28]
   11c22:	4ec6      	ldr	r6, [pc, #792]	; (11f3c <_dtoa_r+0x6cc>)
   11c24:	112d      	asrs	r5, r5, #4
   11c26:	2d00      	cmp	r5, #0
   11c28:	d000      	beq.n	11c2c <_dtoa_r+0x3bc>
   11c2a:	e08c      	b.n	11d46 <_dtoa_r+0x4d6>
   11c2c:	2b00      	cmp	r3, #0
   11c2e:	d000      	beq.n	11c32 <_dtoa_r+0x3c2>
   11c30:	e781      	b.n	11b36 <_dtoa_r+0x2c6>
   11c32:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11c34:	2b00      	cmp	r3, #0
   11c36:	d100      	bne.n	11c3a <_dtoa_r+0x3ca>
   11c38:	e091      	b.n	11d5e <_dtoa_r+0x4ee>
   11c3a:	9a06      	ldr	r2, [sp, #24]
   11c3c:	9b07      	ldr	r3, [sp, #28]
   11c3e:	9210      	str	r2, [sp, #64]	; 0x40
   11c40:	9311      	str	r3, [sp, #68]	; 0x44
   11c42:	9810      	ldr	r0, [sp, #64]	; 0x40
   11c44:	9911      	ldr	r1, [sp, #68]	; 0x44
   11c46:	2200      	movs	r2, #0
   11c48:	4bbd      	ldr	r3, [pc, #756]	; (11f40 <_dtoa_r+0x6d0>)
   11c4a:	f7fc ffb1 	bl	ebb0 <__aeabi_dcmplt>
   11c4e:	2800      	cmp	r0, #0
   11c50:	d100      	bne.n	11c54 <_dtoa_r+0x3e4>
   11c52:	e084      	b.n	11d5e <_dtoa_r+0x4ee>
   11c54:	2f00      	cmp	r7, #0
   11c56:	d100      	bne.n	11c5a <_dtoa_r+0x3ea>
   11c58:	e081      	b.n	11d5e <_dtoa_r+0x4ee>
   11c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11c5c:	2b00      	cmp	r3, #0
   11c5e:	dd3e      	ble.n	11cde <_dtoa_r+0x46e>
   11c60:	9810      	ldr	r0, [sp, #64]	; 0x40
   11c62:	9911      	ldr	r1, [sp, #68]	; 0x44
   11c64:	9b03      	ldr	r3, [sp, #12]
   11c66:	2200      	movs	r2, #0
   11c68:	1e5e      	subs	r6, r3, #1
   11c6a:	4bb6      	ldr	r3, [pc, #728]	; (11f44 <_dtoa_r+0x6d4>)
   11c6c:	f7fd ff0c 	bl	fa88 <__aeabi_dmul>
   11c70:	9006      	str	r0, [sp, #24]
   11c72:	9107      	str	r1, [sp, #28]
   11c74:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   11c76:	3401      	adds	r4, #1
   11c78:	0020      	movs	r0, r4
   11c7a:	f001 fa25 	bl	130c8 <__aeabi_i2d>
   11c7e:	9a06      	ldr	r2, [sp, #24]
   11c80:	9b07      	ldr	r3, [sp, #28]
   11c82:	f7fd ff01 	bl	fa88 <__aeabi_dmul>
   11c86:	2200      	movs	r2, #0
   11c88:	4baf      	ldr	r3, [pc, #700]	; (11f48 <_dtoa_r+0x6d8>)
   11c8a:	f7fc ffb9 	bl	ec00 <__aeabi_dadd>
   11c8e:	9012      	str	r0, [sp, #72]	; 0x48
   11c90:	9113      	str	r1, [sp, #76]	; 0x4c
   11c92:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11c94:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11c96:	4aad      	ldr	r2, [pc, #692]	; (11f4c <_dtoa_r+0x6dc>)
   11c98:	9310      	str	r3, [sp, #64]	; 0x40
   11c9a:	9411      	str	r4, [sp, #68]	; 0x44
   11c9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11c9e:	189c      	adds	r4, r3, r2
   11ca0:	9411      	str	r4, [sp, #68]	; 0x44
   11ca2:	2d00      	cmp	r5, #0
   11ca4:	d15e      	bne.n	11d64 <_dtoa_r+0x4f4>
   11ca6:	9806      	ldr	r0, [sp, #24]
   11ca8:	9907      	ldr	r1, [sp, #28]
   11caa:	2200      	movs	r2, #0
   11cac:	4ba8      	ldr	r3, [pc, #672]	; (11f50 <_dtoa_r+0x6e0>)
   11cae:	f7fe f96b 	bl	ff88 <__aeabi_dsub>
   11cb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11cb4:	0023      	movs	r3, r4
   11cb6:	9006      	str	r0, [sp, #24]
   11cb8:	9107      	str	r1, [sp, #28]
   11cba:	f7fc ff8d 	bl	ebd8 <__aeabi_dcmpgt>
   11cbe:	2800      	cmp	r0, #0
   11cc0:	d000      	beq.n	11cc4 <_dtoa_r+0x454>
   11cc2:	e301      	b.n	122c8 <_dtoa_r+0xa58>
   11cc4:	48a3      	ldr	r0, [pc, #652]	; (11f54 <_dtoa_r+0x6e4>)
   11cc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11cc8:	4684      	mov	ip, r0
   11cca:	4461      	add	r1, ip
   11ccc:	000b      	movs	r3, r1
   11cce:	9806      	ldr	r0, [sp, #24]
   11cd0:	9907      	ldr	r1, [sp, #28]
   11cd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11cd4:	f7fc ff6c 	bl	ebb0 <__aeabi_dcmplt>
   11cd8:	2800      	cmp	r0, #0
   11cda:	d000      	beq.n	11cde <_dtoa_r+0x46e>
   11cdc:	e2e8      	b.n	122b0 <_dtoa_r+0xa40>
   11cde:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11ce0:	9c15      	ldr	r4, [sp, #84]	; 0x54
   11ce2:	9306      	str	r3, [sp, #24]
   11ce4:	9407      	str	r4, [sp, #28]
   11ce6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11ce8:	2b00      	cmp	r3, #0
   11cea:	da00      	bge.n	11cee <_dtoa_r+0x47e>
   11cec:	e157      	b.n	11f9e <_dtoa_r+0x72e>
   11cee:	9a03      	ldr	r2, [sp, #12]
   11cf0:	2a0e      	cmp	r2, #14
   11cf2:	dd00      	ble.n	11cf6 <_dtoa_r+0x486>
   11cf4:	e153      	b.n	11f9e <_dtoa_r+0x72e>
   11cf6:	4b90      	ldr	r3, [pc, #576]	; (11f38 <_dtoa_r+0x6c8>)
   11cf8:	00d2      	lsls	r2, r2, #3
   11cfa:	189b      	adds	r3, r3, r2
   11cfc:	685c      	ldr	r4, [r3, #4]
   11cfe:	681b      	ldr	r3, [r3, #0]
   11d00:	9308      	str	r3, [sp, #32]
   11d02:	9409      	str	r4, [sp, #36]	; 0x24
   11d04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11d06:	2b00      	cmp	r3, #0
   11d08:	db00      	blt.n	11d0c <_dtoa_r+0x49c>
   11d0a:	e0ce      	b.n	11eaa <_dtoa_r+0x63a>
   11d0c:	2f00      	cmp	r7, #0
   11d0e:	dd00      	ble.n	11d12 <_dtoa_r+0x4a2>
   11d10:	e0cb      	b.n	11eaa <_dtoa_r+0x63a>
   11d12:	d000      	beq.n	11d16 <_dtoa_r+0x4a6>
   11d14:	e2cf      	b.n	122b6 <_dtoa_r+0xa46>
   11d16:	9808      	ldr	r0, [sp, #32]
   11d18:	9909      	ldr	r1, [sp, #36]	; 0x24
   11d1a:	2200      	movs	r2, #0
   11d1c:	4b8c      	ldr	r3, [pc, #560]	; (11f50 <_dtoa_r+0x6e0>)
   11d1e:	f7fd feb3 	bl	fa88 <__aeabi_dmul>
   11d22:	9a06      	ldr	r2, [sp, #24]
   11d24:	9b07      	ldr	r3, [sp, #28]
   11d26:	f7fc ff61 	bl	ebec <__aeabi_dcmpge>
   11d2a:	003e      	movs	r6, r7
   11d2c:	9708      	str	r7, [sp, #32]
   11d2e:	2800      	cmp	r0, #0
   11d30:	d000      	beq.n	11d34 <_dtoa_r+0x4c4>
   11d32:	e2a4      	b.n	1227e <_dtoa_r+0xa0e>
   11d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11d38:	1c5d      	adds	r5, r3, #1
   11d3a:	2331      	movs	r3, #49	; 0x31
   11d3c:	7013      	strb	r3, [r2, #0]
   11d3e:	9b03      	ldr	r3, [sp, #12]
   11d40:	3301      	adds	r3, #1
   11d42:	9303      	str	r3, [sp, #12]
   11d44:	e29f      	b.n	12286 <_dtoa_r+0xa16>
   11d46:	2201      	movs	r2, #1
   11d48:	4215      	tst	r5, r2
   11d4a:	d005      	beq.n	11d58 <_dtoa_r+0x4e8>
   11d4c:	18a4      	adds	r4, r4, r2
   11d4e:	6832      	ldr	r2, [r6, #0]
   11d50:	6873      	ldr	r3, [r6, #4]
   11d52:	f7fd fe99 	bl	fa88 <__aeabi_dmul>
   11d56:	2301      	movs	r3, #1
   11d58:	106d      	asrs	r5, r5, #1
   11d5a:	3608      	adds	r6, #8
   11d5c:	e763      	b.n	11c26 <_dtoa_r+0x3b6>
   11d5e:	9e03      	ldr	r6, [sp, #12]
   11d60:	003d      	movs	r5, r7
   11d62:	e789      	b.n	11c78 <_dtoa_r+0x408>
   11d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11d66:	1e69      	subs	r1, r5, #1
   11d68:	1952      	adds	r2, r2, r5
   11d6a:	9217      	str	r2, [sp, #92]	; 0x5c
   11d6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11d6e:	4b72      	ldr	r3, [pc, #456]	; (11f38 <_dtoa_r+0x6c8>)
   11d70:	00c9      	lsls	r1, r1, #3
   11d72:	2a00      	cmp	r2, #0
   11d74:	d04a      	beq.n	11e0c <_dtoa_r+0x59c>
   11d76:	185b      	adds	r3, r3, r1
   11d78:	681a      	ldr	r2, [r3, #0]
   11d7a:	685b      	ldr	r3, [r3, #4]
   11d7c:	2000      	movs	r0, #0
   11d7e:	4976      	ldr	r1, [pc, #472]	; (11f58 <_dtoa_r+0x6e8>)
   11d80:	f7fd fa4e 	bl	f220 <__aeabi_ddiv>
   11d84:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11d88:	f7fe f8fe 	bl	ff88 <__aeabi_dsub>
   11d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d8e:	9010      	str	r0, [sp, #64]	; 0x40
   11d90:	9111      	str	r1, [sp, #68]	; 0x44
   11d92:	9312      	str	r3, [sp, #72]	; 0x48
   11d94:	9806      	ldr	r0, [sp, #24]
   11d96:	9907      	ldr	r1, [sp, #28]
   11d98:	f7fe fc2c 	bl	105f4 <__aeabi_d2iz>
   11d9c:	0004      	movs	r4, r0
   11d9e:	f001 f993 	bl	130c8 <__aeabi_i2d>
   11da2:	0002      	movs	r2, r0
   11da4:	000b      	movs	r3, r1
   11da6:	9806      	ldr	r0, [sp, #24]
   11da8:	9907      	ldr	r1, [sp, #28]
   11daa:	f7fe f8ed 	bl	ff88 <__aeabi_dsub>
   11dae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11db0:	3430      	adds	r4, #48	; 0x30
   11db2:	1c5d      	adds	r5, r3, #1
   11db4:	701c      	strb	r4, [r3, #0]
   11db6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11db8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11dba:	9006      	str	r0, [sp, #24]
   11dbc:	9107      	str	r1, [sp, #28]
   11dbe:	f7fc fef7 	bl	ebb0 <__aeabi_dcmplt>
   11dc2:	2800      	cmp	r0, #0
   11dc4:	d165      	bne.n	11e92 <_dtoa_r+0x622>
   11dc6:	9a06      	ldr	r2, [sp, #24]
   11dc8:	9b07      	ldr	r3, [sp, #28]
   11dca:	2000      	movs	r0, #0
   11dcc:	495c      	ldr	r1, [pc, #368]	; (11f40 <_dtoa_r+0x6d0>)
   11dce:	f7fe f8db 	bl	ff88 <__aeabi_dsub>
   11dd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11dd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11dd6:	f7fc feeb 	bl	ebb0 <__aeabi_dcmplt>
   11dda:	2800      	cmp	r0, #0
   11ddc:	d000      	beq.n	11de0 <_dtoa_r+0x570>
   11dde:	e0be      	b.n	11f5e <_dtoa_r+0x6ee>
   11de0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11de2:	429d      	cmp	r5, r3
   11de4:	d100      	bne.n	11de8 <_dtoa_r+0x578>
   11de6:	e77a      	b.n	11cde <_dtoa_r+0x46e>
   11de8:	9810      	ldr	r0, [sp, #64]	; 0x40
   11dea:	9911      	ldr	r1, [sp, #68]	; 0x44
   11dec:	2200      	movs	r2, #0
   11dee:	4b55      	ldr	r3, [pc, #340]	; (11f44 <_dtoa_r+0x6d4>)
   11df0:	f7fd fe4a 	bl	fa88 <__aeabi_dmul>
   11df4:	2200      	movs	r2, #0
   11df6:	9010      	str	r0, [sp, #64]	; 0x40
   11df8:	9111      	str	r1, [sp, #68]	; 0x44
   11dfa:	9806      	ldr	r0, [sp, #24]
   11dfc:	9907      	ldr	r1, [sp, #28]
   11dfe:	4b51      	ldr	r3, [pc, #324]	; (11f44 <_dtoa_r+0x6d4>)
   11e00:	f7fd fe42 	bl	fa88 <__aeabi_dmul>
   11e04:	9512      	str	r5, [sp, #72]	; 0x48
   11e06:	9006      	str	r0, [sp, #24]
   11e08:	9107      	str	r1, [sp, #28]
   11e0a:	e7c3      	b.n	11d94 <_dtoa_r+0x524>
   11e0c:	1859      	adds	r1, r3, r1
   11e0e:	6808      	ldr	r0, [r1, #0]
   11e10:	6849      	ldr	r1, [r1, #4]
   11e12:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11e14:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11e16:	f7fd fe37 	bl	fa88 <__aeabi_dmul>
   11e1a:	9010      	str	r0, [sp, #64]	; 0x40
   11e1c:	9111      	str	r1, [sp, #68]	; 0x44
   11e1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11e20:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   11e22:	9806      	ldr	r0, [sp, #24]
   11e24:	9907      	ldr	r1, [sp, #28]
   11e26:	f7fe fbe5 	bl	105f4 <__aeabi_d2iz>
   11e2a:	9012      	str	r0, [sp, #72]	; 0x48
   11e2c:	f001 f94c 	bl	130c8 <__aeabi_i2d>
   11e30:	0002      	movs	r2, r0
   11e32:	000b      	movs	r3, r1
   11e34:	9806      	ldr	r0, [sp, #24]
   11e36:	9907      	ldr	r1, [sp, #28]
   11e38:	f7fe f8a6 	bl	ff88 <__aeabi_dsub>
   11e3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e3e:	9006      	str	r0, [sp, #24]
   11e40:	9107      	str	r1, [sp, #28]
   11e42:	3330      	adds	r3, #48	; 0x30
   11e44:	7023      	strb	r3, [r4, #0]
   11e46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11e48:	3401      	adds	r4, #1
   11e4a:	2200      	movs	r2, #0
   11e4c:	42a3      	cmp	r3, r4
   11e4e:	d124      	bne.n	11e9a <_dtoa_r+0x62a>
   11e50:	4b41      	ldr	r3, [pc, #260]	; (11f58 <_dtoa_r+0x6e8>)
   11e52:	9810      	ldr	r0, [sp, #64]	; 0x40
   11e54:	9911      	ldr	r1, [sp, #68]	; 0x44
   11e56:	f7fc fed3 	bl	ec00 <__aeabi_dadd>
   11e5a:	0002      	movs	r2, r0
   11e5c:	000b      	movs	r3, r1
   11e5e:	9806      	ldr	r0, [sp, #24]
   11e60:	9907      	ldr	r1, [sp, #28]
   11e62:	f7fc feb9 	bl	ebd8 <__aeabi_dcmpgt>
   11e66:	2800      	cmp	r0, #0
   11e68:	d000      	beq.n	11e6c <_dtoa_r+0x5fc>
   11e6a:	e078      	b.n	11f5e <_dtoa_r+0x6ee>
   11e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11e70:	2000      	movs	r0, #0
   11e72:	4939      	ldr	r1, [pc, #228]	; (11f58 <_dtoa_r+0x6e8>)
   11e74:	f7fe f888 	bl	ff88 <__aeabi_dsub>
   11e78:	0002      	movs	r2, r0
   11e7a:	000b      	movs	r3, r1
   11e7c:	9806      	ldr	r0, [sp, #24]
   11e7e:	9907      	ldr	r1, [sp, #28]
   11e80:	f7fc fe96 	bl	ebb0 <__aeabi_dcmplt>
   11e84:	2800      	cmp	r0, #0
   11e86:	d100      	bne.n	11e8a <_dtoa_r+0x61a>
   11e88:	e729      	b.n	11cde <_dtoa_r+0x46e>
   11e8a:	1e6b      	subs	r3, r5, #1
   11e8c:	781a      	ldrb	r2, [r3, #0]
   11e8e:	2a30      	cmp	r2, #48	; 0x30
   11e90:	d001      	beq.n	11e96 <_dtoa_r+0x626>
   11e92:	9603      	str	r6, [sp, #12]
   11e94:	e03f      	b.n	11f16 <_dtoa_r+0x6a6>
   11e96:	001d      	movs	r5, r3
   11e98:	e7f7      	b.n	11e8a <_dtoa_r+0x61a>
   11e9a:	9806      	ldr	r0, [sp, #24]
   11e9c:	9907      	ldr	r1, [sp, #28]
   11e9e:	4b29      	ldr	r3, [pc, #164]	; (11f44 <_dtoa_r+0x6d4>)
   11ea0:	f7fd fdf2 	bl	fa88 <__aeabi_dmul>
   11ea4:	9006      	str	r0, [sp, #24]
   11ea6:	9107      	str	r1, [sp, #28]
   11ea8:	e7bb      	b.n	11e22 <_dtoa_r+0x5b2>
   11eaa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   11eac:	9a08      	ldr	r2, [sp, #32]
   11eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11eb0:	9806      	ldr	r0, [sp, #24]
   11eb2:	9907      	ldr	r1, [sp, #28]
   11eb4:	f7fd f9b4 	bl	f220 <__aeabi_ddiv>
   11eb8:	f7fe fb9c 	bl	105f4 <__aeabi_d2iz>
   11ebc:	0004      	movs	r4, r0
   11ebe:	f001 f903 	bl	130c8 <__aeabi_i2d>
   11ec2:	9a08      	ldr	r2, [sp, #32]
   11ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ec6:	f7fd fddf 	bl	fa88 <__aeabi_dmul>
   11eca:	000b      	movs	r3, r1
   11ecc:	0002      	movs	r2, r0
   11ece:	9806      	ldr	r0, [sp, #24]
   11ed0:	9907      	ldr	r1, [sp, #28]
   11ed2:	f7fe f859 	bl	ff88 <__aeabi_dsub>
   11ed6:	0023      	movs	r3, r4
   11ed8:	3330      	adds	r3, #48	; 0x30
   11eda:	7033      	strb	r3, [r6, #0]
   11edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ede:	1c75      	adds	r5, r6, #1
   11ee0:	1aeb      	subs	r3, r5, r3
   11ee2:	429f      	cmp	r7, r3
   11ee4:	d14c      	bne.n	11f80 <_dtoa_r+0x710>
   11ee6:	0002      	movs	r2, r0
   11ee8:	000b      	movs	r3, r1
   11eea:	f7fc fe89 	bl	ec00 <__aeabi_dadd>
   11eee:	0006      	movs	r6, r0
   11ef0:	000f      	movs	r7, r1
   11ef2:	0002      	movs	r2, r0
   11ef4:	000b      	movs	r3, r1
   11ef6:	9808      	ldr	r0, [sp, #32]
   11ef8:	9909      	ldr	r1, [sp, #36]	; 0x24
   11efa:	f7fc fe59 	bl	ebb0 <__aeabi_dcmplt>
   11efe:	2800      	cmp	r0, #0
   11f00:	d12c      	bne.n	11f5c <_dtoa_r+0x6ec>
   11f02:	9808      	ldr	r0, [sp, #32]
   11f04:	9909      	ldr	r1, [sp, #36]	; 0x24
   11f06:	0032      	movs	r2, r6
   11f08:	003b      	movs	r3, r7
   11f0a:	f7fc fe4b 	bl	eba4 <__aeabi_dcmpeq>
   11f0e:	2800      	cmp	r0, #0
   11f10:	d001      	beq.n	11f16 <_dtoa_r+0x6a6>
   11f12:	07e3      	lsls	r3, r4, #31
   11f14:	d422      	bmi.n	11f5c <_dtoa_r+0x6ec>
   11f16:	9905      	ldr	r1, [sp, #20]
   11f18:	9804      	ldr	r0, [sp, #16]
   11f1a:	f000 fcdc 	bl	128d6 <_Bfree>
   11f1e:	2300      	movs	r3, #0
   11f20:	702b      	strb	r3, [r5, #0]
   11f22:	9b03      	ldr	r3, [sp, #12]
   11f24:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11f26:	3301      	adds	r3, #1
   11f28:	6013      	str	r3, [r2, #0]
   11f2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11f2c:	2b00      	cmp	r3, #0
   11f2e:	d100      	bne.n	11f32 <_dtoa_r+0x6c2>
   11f30:	e275      	b.n	1241e <_dtoa_r+0xbae>
   11f32:	601d      	str	r5, [r3, #0]
   11f34:	e273      	b.n	1241e <_dtoa_r+0xbae>
   11f36:	46c0      	nop			; (mov r8, r8)
   11f38:	00014370 	.word	0x00014370
   11f3c:	00014348 	.word	0x00014348
   11f40:	3ff00000 	.word	0x3ff00000
   11f44:	40240000 	.word	0x40240000
   11f48:	401c0000 	.word	0x401c0000
   11f4c:	fcc00000 	.word	0xfcc00000
   11f50:	40140000 	.word	0x40140000
   11f54:	7cc00000 	.word	0x7cc00000
   11f58:	3fe00000 	.word	0x3fe00000
   11f5c:	9e03      	ldr	r6, [sp, #12]
   11f5e:	1e6b      	subs	r3, r5, #1
   11f60:	781a      	ldrb	r2, [r3, #0]
   11f62:	2a39      	cmp	r2, #57	; 0x39
   11f64:	d106      	bne.n	11f74 <_dtoa_r+0x704>
   11f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11f68:	429a      	cmp	r2, r3
   11f6a:	d107      	bne.n	11f7c <_dtoa_r+0x70c>
   11f6c:	2330      	movs	r3, #48	; 0x30
   11f6e:	7013      	strb	r3, [r2, #0]
   11f70:	0013      	movs	r3, r2
   11f72:	3601      	adds	r6, #1
   11f74:	781a      	ldrb	r2, [r3, #0]
   11f76:	3201      	adds	r2, #1
   11f78:	701a      	strb	r2, [r3, #0]
   11f7a:	e78a      	b.n	11e92 <_dtoa_r+0x622>
   11f7c:	001d      	movs	r5, r3
   11f7e:	e7ee      	b.n	11f5e <_dtoa_r+0x6ee>
   11f80:	2200      	movs	r2, #0
   11f82:	4bcf      	ldr	r3, [pc, #828]	; (122c0 <_dtoa_r+0xa50>)
   11f84:	f7fd fd80 	bl	fa88 <__aeabi_dmul>
   11f88:	2200      	movs	r2, #0
   11f8a:	2300      	movs	r3, #0
   11f8c:	9006      	str	r0, [sp, #24]
   11f8e:	9107      	str	r1, [sp, #28]
   11f90:	002e      	movs	r6, r5
   11f92:	f7fc fe07 	bl	eba4 <__aeabi_dcmpeq>
   11f96:	2800      	cmp	r0, #0
   11f98:	d100      	bne.n	11f9c <_dtoa_r+0x72c>
   11f9a:	e787      	b.n	11eac <_dtoa_r+0x63c>
   11f9c:	e7bb      	b.n	11f16 <_dtoa_r+0x6a6>
   11f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11fa0:	2a00      	cmp	r2, #0
   11fa2:	d100      	bne.n	11fa6 <_dtoa_r+0x736>
   11fa4:	e087      	b.n	120b6 <_dtoa_r+0x846>
   11fa6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11fa8:	2a01      	cmp	r2, #1
   11faa:	dc6e      	bgt.n	1208a <_dtoa_r+0x81a>
   11fac:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11fae:	2a00      	cmp	r2, #0
   11fb0:	d067      	beq.n	12082 <_dtoa_r+0x812>
   11fb2:	4ac4      	ldr	r2, [pc, #784]	; (122c4 <_dtoa_r+0xa54>)
   11fb4:	189b      	adds	r3, r3, r2
   11fb6:	9d08      	ldr	r5, [sp, #32]
   11fb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   11fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11fbc:	2101      	movs	r1, #1
   11fbe:	18d2      	adds	r2, r2, r3
   11fc0:	920b      	str	r2, [sp, #44]	; 0x2c
   11fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11fc4:	9804      	ldr	r0, [sp, #16]
   11fc6:	18d3      	adds	r3, r2, r3
   11fc8:	930c      	str	r3, [sp, #48]	; 0x30
   11fca:	f000 fd22 	bl	12a12 <__i2b>
   11fce:	0006      	movs	r6, r0
   11fd0:	2c00      	cmp	r4, #0
   11fd2:	dd0e      	ble.n	11ff2 <_dtoa_r+0x782>
   11fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11fd6:	2b00      	cmp	r3, #0
   11fd8:	dd0b      	ble.n	11ff2 <_dtoa_r+0x782>
   11fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11fdc:	0023      	movs	r3, r4
   11fde:	4294      	cmp	r4, r2
   11fe0:	dd00      	ble.n	11fe4 <_dtoa_r+0x774>
   11fe2:	0013      	movs	r3, r2
   11fe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11fe6:	1ae4      	subs	r4, r4, r3
   11fe8:	1ad2      	subs	r2, r2, r3
   11fea:	920b      	str	r2, [sp, #44]	; 0x2c
   11fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11fee:	1ad3      	subs	r3, r2, r3
   11ff0:	930c      	str	r3, [sp, #48]	; 0x30
   11ff2:	9b08      	ldr	r3, [sp, #32]
   11ff4:	2b00      	cmp	r3, #0
   11ff6:	d01e      	beq.n	12036 <_dtoa_r+0x7c6>
   11ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11ffa:	2b00      	cmp	r3, #0
   11ffc:	d05f      	beq.n	120be <_dtoa_r+0x84e>
   11ffe:	2d00      	cmp	r5, #0
   12000:	dd11      	ble.n	12026 <_dtoa_r+0x7b6>
   12002:	0031      	movs	r1, r6
   12004:	002a      	movs	r2, r5
   12006:	9804      	ldr	r0, [sp, #16]
   12008:	f000 fd9c 	bl	12b44 <__pow5mult>
   1200c:	9a05      	ldr	r2, [sp, #20]
   1200e:	0001      	movs	r1, r0
   12010:	0006      	movs	r6, r0
   12012:	9804      	ldr	r0, [sp, #16]
   12014:	f000 fd06 	bl	12a24 <__multiply>
   12018:	9905      	ldr	r1, [sp, #20]
   1201a:	9010      	str	r0, [sp, #64]	; 0x40
   1201c:	9804      	ldr	r0, [sp, #16]
   1201e:	f000 fc5a 	bl	128d6 <_Bfree>
   12022:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12024:	9305      	str	r3, [sp, #20]
   12026:	9b08      	ldr	r3, [sp, #32]
   12028:	1b5a      	subs	r2, r3, r5
   1202a:	d004      	beq.n	12036 <_dtoa_r+0x7c6>
   1202c:	9905      	ldr	r1, [sp, #20]
   1202e:	9804      	ldr	r0, [sp, #16]
   12030:	f000 fd88 	bl	12b44 <__pow5mult>
   12034:	9005      	str	r0, [sp, #20]
   12036:	2101      	movs	r1, #1
   12038:	9804      	ldr	r0, [sp, #16]
   1203a:	f000 fcea 	bl	12a12 <__i2b>
   1203e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12040:	9008      	str	r0, [sp, #32]
   12042:	2b00      	cmp	r3, #0
   12044:	dd3d      	ble.n	120c2 <_dtoa_r+0x852>
   12046:	001a      	movs	r2, r3
   12048:	0001      	movs	r1, r0
   1204a:	9804      	ldr	r0, [sp, #16]
   1204c:	f000 fd7a 	bl	12b44 <__pow5mult>
   12050:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12052:	9008      	str	r0, [sp, #32]
   12054:	2500      	movs	r5, #0
   12056:	2b01      	cmp	r3, #1
   12058:	dc3b      	bgt.n	120d2 <_dtoa_r+0x862>
   1205a:	2500      	movs	r5, #0
   1205c:	9b06      	ldr	r3, [sp, #24]
   1205e:	42ab      	cmp	r3, r5
   12060:	d133      	bne.n	120ca <_dtoa_r+0x85a>
   12062:	9b07      	ldr	r3, [sp, #28]
   12064:	031b      	lsls	r3, r3, #12
   12066:	42ab      	cmp	r3, r5
   12068:	d12f      	bne.n	120ca <_dtoa_r+0x85a>
   1206a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1206c:	9a07      	ldr	r2, [sp, #28]
   1206e:	4213      	tst	r3, r2
   12070:	d02b      	beq.n	120ca <_dtoa_r+0x85a>
   12072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12074:	3501      	adds	r5, #1
   12076:	3301      	adds	r3, #1
   12078:	930b      	str	r3, [sp, #44]	; 0x2c
   1207a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1207c:	3301      	adds	r3, #1
   1207e:	930c      	str	r3, [sp, #48]	; 0x30
   12080:	e023      	b.n	120ca <_dtoa_r+0x85a>
   12082:	2336      	movs	r3, #54	; 0x36
   12084:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12086:	1a9b      	subs	r3, r3, r2
   12088:	e795      	b.n	11fb6 <_dtoa_r+0x746>
   1208a:	9b08      	ldr	r3, [sp, #32]
   1208c:	1e7d      	subs	r5, r7, #1
   1208e:	42ab      	cmp	r3, r5
   12090:	db06      	blt.n	120a0 <_dtoa_r+0x830>
   12092:	1b5d      	subs	r5, r3, r5
   12094:	2f00      	cmp	r7, #0
   12096:	da0b      	bge.n	120b0 <_dtoa_r+0x840>
   12098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1209a:	1bdc      	subs	r4, r3, r7
   1209c:	2300      	movs	r3, #0
   1209e:	e78c      	b.n	11fba <_dtoa_r+0x74a>
   120a0:	9b08      	ldr	r3, [sp, #32]
   120a2:	9508      	str	r5, [sp, #32]
   120a4:	1aea      	subs	r2, r5, r3
   120a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120a8:	2500      	movs	r5, #0
   120aa:	189b      	adds	r3, r3, r2
   120ac:	930f      	str	r3, [sp, #60]	; 0x3c
   120ae:	e7f1      	b.n	12094 <_dtoa_r+0x824>
   120b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   120b2:	003b      	movs	r3, r7
   120b4:	e781      	b.n	11fba <_dtoa_r+0x74a>
   120b6:	9d08      	ldr	r5, [sp, #32]
   120b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   120ba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   120bc:	e788      	b.n	11fd0 <_dtoa_r+0x760>
   120be:	9a08      	ldr	r2, [sp, #32]
   120c0:	e7b4      	b.n	1202c <_dtoa_r+0x7bc>
   120c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   120c4:	2500      	movs	r5, #0
   120c6:	2b01      	cmp	r3, #1
   120c8:	ddc7      	ble.n	1205a <_dtoa_r+0x7ea>
   120ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120cc:	2001      	movs	r0, #1
   120ce:	2b00      	cmp	r3, #0
   120d0:	d00b      	beq.n	120ea <_dtoa_r+0x87a>
   120d2:	9b08      	ldr	r3, [sp, #32]
   120d4:	9a08      	ldr	r2, [sp, #32]
   120d6:	691b      	ldr	r3, [r3, #16]
   120d8:	930f      	str	r3, [sp, #60]	; 0x3c
   120da:	3303      	adds	r3, #3
   120dc:	009b      	lsls	r3, r3, #2
   120de:	18d3      	adds	r3, r2, r3
   120e0:	6858      	ldr	r0, [r3, #4]
   120e2:	f000 fc4d 	bl	12980 <__hi0bits>
   120e6:	2320      	movs	r3, #32
   120e8:	1a18      	subs	r0, r3, r0
   120ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   120ec:	18c0      	adds	r0, r0, r3
   120ee:	231f      	movs	r3, #31
   120f0:	4018      	ands	r0, r3
   120f2:	d100      	bne.n	120f6 <_dtoa_r+0x886>
   120f4:	e0ab      	b.n	1224e <_dtoa_r+0x9de>
   120f6:	3301      	adds	r3, #1
   120f8:	1a1b      	subs	r3, r3, r0
   120fa:	2b04      	cmp	r3, #4
   120fc:	dc00      	bgt.n	12100 <_dtoa_r+0x890>
   120fe:	e09b      	b.n	12238 <_dtoa_r+0x9c8>
   12100:	231c      	movs	r3, #28
   12102:	1a18      	subs	r0, r3, r0
   12104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12106:	1824      	adds	r4, r4, r0
   12108:	181b      	adds	r3, r3, r0
   1210a:	930b      	str	r3, [sp, #44]	; 0x2c
   1210c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1210e:	181b      	adds	r3, r3, r0
   12110:	930c      	str	r3, [sp, #48]	; 0x30
   12112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12114:	2b00      	cmp	r3, #0
   12116:	dd05      	ble.n	12124 <_dtoa_r+0x8b4>
   12118:	001a      	movs	r2, r3
   1211a:	9905      	ldr	r1, [sp, #20]
   1211c:	9804      	ldr	r0, [sp, #16]
   1211e:	f000 fd63 	bl	12be8 <__lshift>
   12122:	9005      	str	r0, [sp, #20]
   12124:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12126:	2b00      	cmp	r3, #0
   12128:	dd05      	ble.n	12136 <_dtoa_r+0x8c6>
   1212a:	001a      	movs	r2, r3
   1212c:	9908      	ldr	r1, [sp, #32]
   1212e:	9804      	ldr	r0, [sp, #16]
   12130:	f000 fd5a 	bl	12be8 <__lshift>
   12134:	9008      	str	r0, [sp, #32]
   12136:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12138:	2b00      	cmp	r3, #0
   1213a:	d100      	bne.n	1213e <_dtoa_r+0x8ce>
   1213c:	e089      	b.n	12252 <_dtoa_r+0x9e2>
   1213e:	9908      	ldr	r1, [sp, #32]
   12140:	9805      	ldr	r0, [sp, #20]
   12142:	f000 fda2 	bl	12c8a <__mcmp>
   12146:	2800      	cmp	r0, #0
   12148:	db00      	blt.n	1214c <_dtoa_r+0x8dc>
   1214a:	e082      	b.n	12252 <_dtoa_r+0x9e2>
   1214c:	9b03      	ldr	r3, [sp, #12]
   1214e:	220a      	movs	r2, #10
   12150:	3b01      	subs	r3, #1
   12152:	9303      	str	r3, [sp, #12]
   12154:	9905      	ldr	r1, [sp, #20]
   12156:	2300      	movs	r3, #0
   12158:	9804      	ldr	r0, [sp, #16]
   1215a:	f000 fbd5 	bl	12908 <__multadd>
   1215e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12160:	9005      	str	r0, [sp, #20]
   12162:	2b00      	cmp	r3, #0
   12164:	d100      	bne.n	12168 <_dtoa_r+0x8f8>
   12166:	e15d      	b.n	12424 <_dtoa_r+0xbb4>
   12168:	2300      	movs	r3, #0
   1216a:	0031      	movs	r1, r6
   1216c:	220a      	movs	r2, #10
   1216e:	9804      	ldr	r0, [sp, #16]
   12170:	f000 fbca 	bl	12908 <__multadd>
   12174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12176:	0006      	movs	r6, r0
   12178:	2b00      	cmp	r3, #0
   1217a:	dc02      	bgt.n	12182 <_dtoa_r+0x912>
   1217c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1217e:	2b02      	cmp	r3, #2
   12180:	dc6d      	bgt.n	1225e <_dtoa_r+0x9ee>
   12182:	2c00      	cmp	r4, #0
   12184:	dd05      	ble.n	12192 <_dtoa_r+0x922>
   12186:	0031      	movs	r1, r6
   12188:	0022      	movs	r2, r4
   1218a:	9804      	ldr	r0, [sp, #16]
   1218c:	f000 fd2c 	bl	12be8 <__lshift>
   12190:	0006      	movs	r6, r0
   12192:	0030      	movs	r0, r6
   12194:	2d00      	cmp	r5, #0
   12196:	d011      	beq.n	121bc <_dtoa_r+0x94c>
   12198:	6871      	ldr	r1, [r6, #4]
   1219a:	9804      	ldr	r0, [sp, #16]
   1219c:	f000 fb63 	bl	12866 <_Balloc>
   121a0:	0031      	movs	r1, r6
   121a2:	0004      	movs	r4, r0
   121a4:	6933      	ldr	r3, [r6, #16]
   121a6:	310c      	adds	r1, #12
   121a8:	1c9a      	adds	r2, r3, #2
   121aa:	0092      	lsls	r2, r2, #2
   121ac:	300c      	adds	r0, #12
   121ae:	f7fe fb40 	bl	10832 <memcpy>
   121b2:	2201      	movs	r2, #1
   121b4:	0021      	movs	r1, r4
   121b6:	9804      	ldr	r0, [sp, #16]
   121b8:	f000 fd16 	bl	12be8 <__lshift>
   121bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   121be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   121c0:	3f01      	subs	r7, #1
   121c2:	930b      	str	r3, [sp, #44]	; 0x2c
   121c4:	19db      	adds	r3, r3, r7
   121c6:	0037      	movs	r7, r6
   121c8:	0006      	movs	r6, r0
   121ca:	930f      	str	r3, [sp, #60]	; 0x3c
   121cc:	9908      	ldr	r1, [sp, #32]
   121ce:	9805      	ldr	r0, [sp, #20]
   121d0:	f7ff fac9 	bl	11766 <quorem>
   121d4:	0039      	movs	r1, r7
   121d6:	900d      	str	r0, [sp, #52]	; 0x34
   121d8:	0004      	movs	r4, r0
   121da:	9805      	ldr	r0, [sp, #20]
   121dc:	f000 fd55 	bl	12c8a <__mcmp>
   121e0:	0032      	movs	r2, r6
   121e2:	900e      	str	r0, [sp, #56]	; 0x38
   121e4:	9908      	ldr	r1, [sp, #32]
   121e6:	9804      	ldr	r0, [sp, #16]
   121e8:	f000 fd68 	bl	12cbc <__mdiff>
   121ec:	2301      	movs	r3, #1
   121ee:	930c      	str	r3, [sp, #48]	; 0x30
   121f0:	68c3      	ldr	r3, [r0, #12]
   121f2:	3430      	adds	r4, #48	; 0x30
   121f4:	0005      	movs	r5, r0
   121f6:	2b00      	cmp	r3, #0
   121f8:	d104      	bne.n	12204 <_dtoa_r+0x994>
   121fa:	0001      	movs	r1, r0
   121fc:	9805      	ldr	r0, [sp, #20]
   121fe:	f000 fd44 	bl	12c8a <__mcmp>
   12202:	900c      	str	r0, [sp, #48]	; 0x30
   12204:	0029      	movs	r1, r5
   12206:	9804      	ldr	r0, [sp, #16]
   12208:	f000 fb65 	bl	128d6 <_Bfree>
   1220c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1220e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   12210:	4313      	orrs	r3, r2
   12212:	d000      	beq.n	12216 <_dtoa_r+0x9a6>
   12214:	e089      	b.n	1232a <_dtoa_r+0xaba>
   12216:	9a06      	ldr	r2, [sp, #24]
   12218:	3301      	adds	r3, #1
   1221a:	4213      	tst	r3, r2
   1221c:	d000      	beq.n	12220 <_dtoa_r+0x9b0>
   1221e:	e084      	b.n	1232a <_dtoa_r+0xaba>
   12220:	2c39      	cmp	r4, #57	; 0x39
   12222:	d100      	bne.n	12226 <_dtoa_r+0x9b6>
   12224:	e0a3      	b.n	1236e <_dtoa_r+0xafe>
   12226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12228:	2b00      	cmp	r3, #0
   1222a:	dd01      	ble.n	12230 <_dtoa_r+0x9c0>
   1222c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1222e:	3431      	adds	r4, #49	; 0x31
   12230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12232:	1c5d      	adds	r5, r3, #1
   12234:	701c      	strb	r4, [r3, #0]
   12236:	e027      	b.n	12288 <_dtoa_r+0xa18>
   12238:	2b04      	cmp	r3, #4
   1223a:	d100      	bne.n	1223e <_dtoa_r+0x9ce>
   1223c:	e769      	b.n	12112 <_dtoa_r+0x8a2>
   1223e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12240:	331c      	adds	r3, #28
   12242:	18d2      	adds	r2, r2, r3
   12244:	920b      	str	r2, [sp, #44]	; 0x2c
   12246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12248:	18e4      	adds	r4, r4, r3
   1224a:	18d3      	adds	r3, r2, r3
   1224c:	e760      	b.n	12110 <_dtoa_r+0x8a0>
   1224e:	0003      	movs	r3, r0
   12250:	e7f5      	b.n	1223e <_dtoa_r+0x9ce>
   12252:	2f00      	cmp	r7, #0
   12254:	dc3c      	bgt.n	122d0 <_dtoa_r+0xa60>
   12256:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12258:	2b02      	cmp	r3, #2
   1225a:	dd39      	ble.n	122d0 <_dtoa_r+0xa60>
   1225c:	970d      	str	r7, [sp, #52]	; 0x34
   1225e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12260:	2b00      	cmp	r3, #0
   12262:	d10c      	bne.n	1227e <_dtoa_r+0xa0e>
   12264:	9908      	ldr	r1, [sp, #32]
   12266:	2205      	movs	r2, #5
   12268:	9804      	ldr	r0, [sp, #16]
   1226a:	f000 fb4d 	bl	12908 <__multadd>
   1226e:	9008      	str	r0, [sp, #32]
   12270:	0001      	movs	r1, r0
   12272:	9805      	ldr	r0, [sp, #20]
   12274:	f000 fd09 	bl	12c8a <__mcmp>
   12278:	2800      	cmp	r0, #0
   1227a:	dd00      	ble.n	1227e <_dtoa_r+0xa0e>
   1227c:	e55a      	b.n	11d34 <_dtoa_r+0x4c4>
   1227e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12280:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   12282:	43db      	mvns	r3, r3
   12284:	9303      	str	r3, [sp, #12]
   12286:	2700      	movs	r7, #0
   12288:	9908      	ldr	r1, [sp, #32]
   1228a:	9804      	ldr	r0, [sp, #16]
   1228c:	f000 fb23 	bl	128d6 <_Bfree>
   12290:	2e00      	cmp	r6, #0
   12292:	d100      	bne.n	12296 <_dtoa_r+0xa26>
   12294:	e63f      	b.n	11f16 <_dtoa_r+0x6a6>
   12296:	2f00      	cmp	r7, #0
   12298:	d005      	beq.n	122a6 <_dtoa_r+0xa36>
   1229a:	42b7      	cmp	r7, r6
   1229c:	d003      	beq.n	122a6 <_dtoa_r+0xa36>
   1229e:	0039      	movs	r1, r7
   122a0:	9804      	ldr	r0, [sp, #16]
   122a2:	f000 fb18 	bl	128d6 <_Bfree>
   122a6:	0031      	movs	r1, r6
   122a8:	9804      	ldr	r0, [sp, #16]
   122aa:	f000 fb14 	bl	128d6 <_Bfree>
   122ae:	e632      	b.n	11f16 <_dtoa_r+0x6a6>
   122b0:	9508      	str	r5, [sp, #32]
   122b2:	002e      	movs	r6, r5
   122b4:	e7e3      	b.n	1227e <_dtoa_r+0xa0e>
   122b6:	2300      	movs	r3, #0
   122b8:	9308      	str	r3, [sp, #32]
   122ba:	001e      	movs	r6, r3
   122bc:	e7df      	b.n	1227e <_dtoa_r+0xa0e>
   122be:	46c0      	nop			; (mov r8, r8)
   122c0:	40240000 	.word	0x40240000
   122c4:	00000433 	.word	0x00000433
   122c8:	9603      	str	r6, [sp, #12]
   122ca:	9508      	str	r5, [sp, #32]
   122cc:	002e      	movs	r6, r5
   122ce:	e531      	b.n	11d34 <_dtoa_r+0x4c4>
   122d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   122d2:	970d      	str	r7, [sp, #52]	; 0x34
   122d4:	2b00      	cmp	r3, #0
   122d6:	d000      	beq.n	122da <_dtoa_r+0xa6a>
   122d8:	e753      	b.n	12182 <_dtoa_r+0x912>
   122da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   122dc:	9908      	ldr	r1, [sp, #32]
   122de:	9805      	ldr	r0, [sp, #20]
   122e0:	f7ff fa41 	bl	11766 <quorem>
   122e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   122e6:	3030      	adds	r0, #48	; 0x30
   122e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   122ea:	7028      	strb	r0, [r5, #0]
   122ec:	3501      	adds	r5, #1
   122ee:	0004      	movs	r4, r0
   122f0:	1aeb      	subs	r3, r5, r3
   122f2:	429a      	cmp	r2, r3
   122f4:	dc78      	bgt.n	123e8 <_dtoa_r+0xb78>
   122f6:	1e15      	subs	r5, r2, #0
   122f8:	dc00      	bgt.n	122fc <_dtoa_r+0xa8c>
   122fa:	2501      	movs	r5, #1
   122fc:	2700      	movs	r7, #0
   122fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12300:	195d      	adds	r5, r3, r5
   12302:	9905      	ldr	r1, [sp, #20]
   12304:	2201      	movs	r2, #1
   12306:	9804      	ldr	r0, [sp, #16]
   12308:	f000 fc6e 	bl	12be8 <__lshift>
   1230c:	9908      	ldr	r1, [sp, #32]
   1230e:	9005      	str	r0, [sp, #20]
   12310:	f000 fcbb 	bl	12c8a <__mcmp>
   12314:	2800      	cmp	r0, #0
   12316:	dc2f      	bgt.n	12378 <_dtoa_r+0xb08>
   12318:	d101      	bne.n	1231e <_dtoa_r+0xaae>
   1231a:	07e3      	lsls	r3, r4, #31
   1231c:	d42c      	bmi.n	12378 <_dtoa_r+0xb08>
   1231e:	1e6b      	subs	r3, r5, #1
   12320:	781a      	ldrb	r2, [r3, #0]
   12322:	2a30      	cmp	r2, #48	; 0x30
   12324:	d1b0      	bne.n	12288 <_dtoa_r+0xa18>
   12326:	001d      	movs	r5, r3
   12328:	e7f9      	b.n	1231e <_dtoa_r+0xaae>
   1232a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1232c:	2b00      	cmp	r3, #0
   1232e:	db07      	blt.n	12340 <_dtoa_r+0xad0>
   12330:	001d      	movs	r5, r3
   12332:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12334:	431d      	orrs	r5, r3
   12336:	d126      	bne.n	12386 <_dtoa_r+0xb16>
   12338:	2301      	movs	r3, #1
   1233a:	9a06      	ldr	r2, [sp, #24]
   1233c:	4213      	tst	r3, r2
   1233e:	d122      	bne.n	12386 <_dtoa_r+0xb16>
   12340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12342:	2b00      	cmp	r3, #0
   12344:	dc00      	bgt.n	12348 <_dtoa_r+0xad8>
   12346:	e773      	b.n	12230 <_dtoa_r+0x9c0>
   12348:	9905      	ldr	r1, [sp, #20]
   1234a:	2201      	movs	r2, #1
   1234c:	9804      	ldr	r0, [sp, #16]
   1234e:	f000 fc4b 	bl	12be8 <__lshift>
   12352:	9908      	ldr	r1, [sp, #32]
   12354:	9005      	str	r0, [sp, #20]
   12356:	f000 fc98 	bl	12c8a <__mcmp>
   1235a:	2800      	cmp	r0, #0
   1235c:	dc04      	bgt.n	12368 <_dtoa_r+0xaf8>
   1235e:	d000      	beq.n	12362 <_dtoa_r+0xaf2>
   12360:	e766      	b.n	12230 <_dtoa_r+0x9c0>
   12362:	07e3      	lsls	r3, r4, #31
   12364:	d400      	bmi.n	12368 <_dtoa_r+0xaf8>
   12366:	e763      	b.n	12230 <_dtoa_r+0x9c0>
   12368:	2c39      	cmp	r4, #57	; 0x39
   1236a:	d000      	beq.n	1236e <_dtoa_r+0xafe>
   1236c:	e75e      	b.n	1222c <_dtoa_r+0x9bc>
   1236e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12370:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12372:	1c5d      	adds	r5, r3, #1
   12374:	2339      	movs	r3, #57	; 0x39
   12376:	7013      	strb	r3, [r2, #0]
   12378:	1e6b      	subs	r3, r5, #1
   1237a:	781a      	ldrb	r2, [r3, #0]
   1237c:	2a39      	cmp	r2, #57	; 0x39
   1237e:	d03b      	beq.n	123f8 <_dtoa_r+0xb88>
   12380:	3201      	adds	r2, #1
   12382:	701a      	strb	r2, [r3, #0]
   12384:	e780      	b.n	12288 <_dtoa_r+0xa18>
   12386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12388:	3301      	adds	r3, #1
   1238a:	930d      	str	r3, [sp, #52]	; 0x34
   1238c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1238e:	2b00      	cmp	r3, #0
   12390:	dd05      	ble.n	1239e <_dtoa_r+0xb2e>
   12392:	2c39      	cmp	r4, #57	; 0x39
   12394:	d0eb      	beq.n	1236e <_dtoa_r+0xafe>
   12396:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   12398:	3401      	adds	r4, #1
   1239a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1239c:	e74a      	b.n	12234 <_dtoa_r+0x9c4>
   1239e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   123a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   123a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   123a4:	701c      	strb	r4, [r3, #0]
   123a6:	4293      	cmp	r3, r2
   123a8:	d0ab      	beq.n	12302 <_dtoa_r+0xa92>
   123aa:	2300      	movs	r3, #0
   123ac:	220a      	movs	r2, #10
   123ae:	9905      	ldr	r1, [sp, #20]
   123b0:	9804      	ldr	r0, [sp, #16]
   123b2:	f000 faa9 	bl	12908 <__multadd>
   123b6:	2300      	movs	r3, #0
   123b8:	9005      	str	r0, [sp, #20]
   123ba:	220a      	movs	r2, #10
   123bc:	0039      	movs	r1, r7
   123be:	9804      	ldr	r0, [sp, #16]
   123c0:	42b7      	cmp	r7, r6
   123c2:	d106      	bne.n	123d2 <_dtoa_r+0xb62>
   123c4:	f000 faa0 	bl	12908 <__multadd>
   123c8:	0007      	movs	r7, r0
   123ca:	0006      	movs	r6, r0
   123cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   123ce:	930b      	str	r3, [sp, #44]	; 0x2c
   123d0:	e6fc      	b.n	121cc <_dtoa_r+0x95c>
   123d2:	f000 fa99 	bl	12908 <__multadd>
   123d6:	0031      	movs	r1, r6
   123d8:	0007      	movs	r7, r0
   123da:	2300      	movs	r3, #0
   123dc:	220a      	movs	r2, #10
   123de:	9804      	ldr	r0, [sp, #16]
   123e0:	f000 fa92 	bl	12908 <__multadd>
   123e4:	0006      	movs	r6, r0
   123e6:	e7f1      	b.n	123cc <_dtoa_r+0xb5c>
   123e8:	2300      	movs	r3, #0
   123ea:	220a      	movs	r2, #10
   123ec:	9905      	ldr	r1, [sp, #20]
   123ee:	9804      	ldr	r0, [sp, #16]
   123f0:	f000 fa8a 	bl	12908 <__multadd>
   123f4:	9005      	str	r0, [sp, #20]
   123f6:	e771      	b.n	122dc <_dtoa_r+0xa6c>
   123f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   123fa:	429a      	cmp	r2, r3
   123fc:	d105      	bne.n	1240a <_dtoa_r+0xb9a>
   123fe:	9b03      	ldr	r3, [sp, #12]
   12400:	3301      	adds	r3, #1
   12402:	9303      	str	r3, [sp, #12]
   12404:	2331      	movs	r3, #49	; 0x31
   12406:	7013      	strb	r3, [r2, #0]
   12408:	e73e      	b.n	12288 <_dtoa_r+0xa18>
   1240a:	001d      	movs	r5, r3
   1240c:	e7b4      	b.n	12378 <_dtoa_r+0xb08>
   1240e:	4b0a      	ldr	r3, [pc, #40]	; (12438 <_dtoa_r+0xbc8>)
   12410:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12412:	930a      	str	r3, [sp, #40]	; 0x28
   12414:	4b09      	ldr	r3, [pc, #36]	; (1243c <_dtoa_r+0xbcc>)
   12416:	2a00      	cmp	r2, #0
   12418:	d001      	beq.n	1241e <_dtoa_r+0xbae>
   1241a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1241c:	6013      	str	r3, [r2, #0]
   1241e:	980a      	ldr	r0, [sp, #40]	; 0x28
   12420:	b01d      	add	sp, #116	; 0x74
   12422:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12426:	2b00      	cmp	r3, #0
   12428:	dd00      	ble.n	1242c <_dtoa_r+0xbbc>
   1242a:	e756      	b.n	122da <_dtoa_r+0xa6a>
   1242c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1242e:	2b02      	cmp	r3, #2
   12430:	dc00      	bgt.n	12434 <_dtoa_r+0xbc4>
   12432:	e752      	b.n	122da <_dtoa_r+0xa6a>
   12434:	e713      	b.n	1225e <_dtoa_r+0x9ee>
   12436:	46c0      	nop			; (mov r8, r8)
   12438:	000142d4 	.word	0x000142d4
   1243c:	000142dc 	.word	0x000142dc

00012440 <__sflush_r>:
   12440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12442:	898a      	ldrh	r2, [r1, #12]
   12444:	0005      	movs	r5, r0
   12446:	000c      	movs	r4, r1
   12448:	0713      	lsls	r3, r2, #28
   1244a:	d460      	bmi.n	1250e <__sflush_r+0xce>
   1244c:	684b      	ldr	r3, [r1, #4]
   1244e:	2b00      	cmp	r3, #0
   12450:	dc04      	bgt.n	1245c <__sflush_r+0x1c>
   12452:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   12454:	2b00      	cmp	r3, #0
   12456:	dc01      	bgt.n	1245c <__sflush_r+0x1c>
   12458:	2000      	movs	r0, #0
   1245a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1245c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1245e:	2f00      	cmp	r7, #0
   12460:	d0fa      	beq.n	12458 <__sflush_r+0x18>
   12462:	2300      	movs	r3, #0
   12464:	682e      	ldr	r6, [r5, #0]
   12466:	602b      	str	r3, [r5, #0]
   12468:	2380      	movs	r3, #128	; 0x80
   1246a:	015b      	lsls	r3, r3, #5
   1246c:	401a      	ands	r2, r3
   1246e:	d034      	beq.n	124da <__sflush_r+0x9a>
   12470:	6d60      	ldr	r0, [r4, #84]	; 0x54
   12472:	89a3      	ldrh	r3, [r4, #12]
   12474:	075b      	lsls	r3, r3, #29
   12476:	d506      	bpl.n	12486 <__sflush_r+0x46>
   12478:	6863      	ldr	r3, [r4, #4]
   1247a:	1ac0      	subs	r0, r0, r3
   1247c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1247e:	2b00      	cmp	r3, #0
   12480:	d001      	beq.n	12486 <__sflush_r+0x46>
   12482:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12484:	1ac0      	subs	r0, r0, r3
   12486:	0002      	movs	r2, r0
   12488:	6a21      	ldr	r1, [r4, #32]
   1248a:	2300      	movs	r3, #0
   1248c:	0028      	movs	r0, r5
   1248e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   12490:	47b8      	blx	r7
   12492:	89a1      	ldrh	r1, [r4, #12]
   12494:	1c43      	adds	r3, r0, #1
   12496:	d106      	bne.n	124a6 <__sflush_r+0x66>
   12498:	682b      	ldr	r3, [r5, #0]
   1249a:	2b1d      	cmp	r3, #29
   1249c:	d831      	bhi.n	12502 <__sflush_r+0xc2>
   1249e:	4a2c      	ldr	r2, [pc, #176]	; (12550 <__sflush_r+0x110>)
   124a0:	40da      	lsrs	r2, r3
   124a2:	07d3      	lsls	r3, r2, #31
   124a4:	d52d      	bpl.n	12502 <__sflush_r+0xc2>
   124a6:	2300      	movs	r3, #0
   124a8:	6063      	str	r3, [r4, #4]
   124aa:	6923      	ldr	r3, [r4, #16]
   124ac:	6023      	str	r3, [r4, #0]
   124ae:	04cb      	lsls	r3, r1, #19
   124b0:	d505      	bpl.n	124be <__sflush_r+0x7e>
   124b2:	1c43      	adds	r3, r0, #1
   124b4:	d102      	bne.n	124bc <__sflush_r+0x7c>
   124b6:	682b      	ldr	r3, [r5, #0]
   124b8:	2b00      	cmp	r3, #0
   124ba:	d100      	bne.n	124be <__sflush_r+0x7e>
   124bc:	6560      	str	r0, [r4, #84]	; 0x54
   124be:	6b61      	ldr	r1, [r4, #52]	; 0x34
   124c0:	602e      	str	r6, [r5, #0]
   124c2:	2900      	cmp	r1, #0
   124c4:	d0c8      	beq.n	12458 <__sflush_r+0x18>
   124c6:	0023      	movs	r3, r4
   124c8:	3344      	adds	r3, #68	; 0x44
   124ca:	4299      	cmp	r1, r3
   124cc:	d002      	beq.n	124d4 <__sflush_r+0x94>
   124ce:	0028      	movs	r0, r5
   124d0:	f7fe f9c0 	bl	10854 <_free_r>
   124d4:	2000      	movs	r0, #0
   124d6:	6360      	str	r0, [r4, #52]	; 0x34
   124d8:	e7bf      	b.n	1245a <__sflush_r+0x1a>
   124da:	2301      	movs	r3, #1
   124dc:	6a21      	ldr	r1, [r4, #32]
   124de:	0028      	movs	r0, r5
   124e0:	47b8      	blx	r7
   124e2:	1c43      	adds	r3, r0, #1
   124e4:	d1c5      	bne.n	12472 <__sflush_r+0x32>
   124e6:	682b      	ldr	r3, [r5, #0]
   124e8:	2b00      	cmp	r3, #0
   124ea:	d0c2      	beq.n	12472 <__sflush_r+0x32>
   124ec:	2b1d      	cmp	r3, #29
   124ee:	d001      	beq.n	124f4 <__sflush_r+0xb4>
   124f0:	2b16      	cmp	r3, #22
   124f2:	d101      	bne.n	124f8 <__sflush_r+0xb8>
   124f4:	602e      	str	r6, [r5, #0]
   124f6:	e7af      	b.n	12458 <__sflush_r+0x18>
   124f8:	2340      	movs	r3, #64	; 0x40
   124fa:	89a2      	ldrh	r2, [r4, #12]
   124fc:	4313      	orrs	r3, r2
   124fe:	81a3      	strh	r3, [r4, #12]
   12500:	e7ab      	b.n	1245a <__sflush_r+0x1a>
   12502:	2340      	movs	r3, #64	; 0x40
   12504:	430b      	orrs	r3, r1
   12506:	2001      	movs	r0, #1
   12508:	81a3      	strh	r3, [r4, #12]
   1250a:	4240      	negs	r0, r0
   1250c:	e7a5      	b.n	1245a <__sflush_r+0x1a>
   1250e:	690f      	ldr	r7, [r1, #16]
   12510:	2f00      	cmp	r7, #0
   12512:	d0a1      	beq.n	12458 <__sflush_r+0x18>
   12514:	680b      	ldr	r3, [r1, #0]
   12516:	600f      	str	r7, [r1, #0]
   12518:	1bdb      	subs	r3, r3, r7
   1251a:	9301      	str	r3, [sp, #4]
   1251c:	2300      	movs	r3, #0
   1251e:	0792      	lsls	r2, r2, #30
   12520:	d100      	bne.n	12524 <__sflush_r+0xe4>
   12522:	694b      	ldr	r3, [r1, #20]
   12524:	60a3      	str	r3, [r4, #8]
   12526:	9b01      	ldr	r3, [sp, #4]
   12528:	2b00      	cmp	r3, #0
   1252a:	dc00      	bgt.n	1252e <__sflush_r+0xee>
   1252c:	e794      	b.n	12458 <__sflush_r+0x18>
   1252e:	9b01      	ldr	r3, [sp, #4]
   12530:	003a      	movs	r2, r7
   12532:	6a21      	ldr	r1, [r4, #32]
   12534:	0028      	movs	r0, r5
   12536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   12538:	47b0      	blx	r6
   1253a:	2800      	cmp	r0, #0
   1253c:	dc03      	bgt.n	12546 <__sflush_r+0x106>
   1253e:	2340      	movs	r3, #64	; 0x40
   12540:	89a2      	ldrh	r2, [r4, #12]
   12542:	4313      	orrs	r3, r2
   12544:	e7df      	b.n	12506 <__sflush_r+0xc6>
   12546:	9b01      	ldr	r3, [sp, #4]
   12548:	183f      	adds	r7, r7, r0
   1254a:	1a1b      	subs	r3, r3, r0
   1254c:	9301      	str	r3, [sp, #4]
   1254e:	e7ea      	b.n	12526 <__sflush_r+0xe6>
   12550:	20400001 	.word	0x20400001

00012554 <_fflush_r>:
   12554:	690b      	ldr	r3, [r1, #16]
   12556:	b570      	push	{r4, r5, r6, lr}
   12558:	0005      	movs	r5, r0
   1255a:	000c      	movs	r4, r1
   1255c:	2b00      	cmp	r3, #0
   1255e:	d101      	bne.n	12564 <_fflush_r+0x10>
   12560:	2000      	movs	r0, #0
   12562:	bd70      	pop	{r4, r5, r6, pc}
   12564:	2800      	cmp	r0, #0
   12566:	d004      	beq.n	12572 <_fflush_r+0x1e>
   12568:	6983      	ldr	r3, [r0, #24]
   1256a:	2b00      	cmp	r3, #0
   1256c:	d101      	bne.n	12572 <_fflush_r+0x1e>
   1256e:	f000 f85f 	bl	12630 <__sinit>
   12572:	4b0b      	ldr	r3, [pc, #44]	; (125a0 <_fflush_r+0x4c>)
   12574:	429c      	cmp	r4, r3
   12576:	d109      	bne.n	1258c <_fflush_r+0x38>
   12578:	686c      	ldr	r4, [r5, #4]
   1257a:	220c      	movs	r2, #12
   1257c:	5ea3      	ldrsh	r3, [r4, r2]
   1257e:	2b00      	cmp	r3, #0
   12580:	d0ee      	beq.n	12560 <_fflush_r+0xc>
   12582:	0021      	movs	r1, r4
   12584:	0028      	movs	r0, r5
   12586:	f7ff ff5b 	bl	12440 <__sflush_r>
   1258a:	e7ea      	b.n	12562 <_fflush_r+0xe>
   1258c:	4b05      	ldr	r3, [pc, #20]	; (125a4 <_fflush_r+0x50>)
   1258e:	429c      	cmp	r4, r3
   12590:	d101      	bne.n	12596 <_fflush_r+0x42>
   12592:	68ac      	ldr	r4, [r5, #8]
   12594:	e7f1      	b.n	1257a <_fflush_r+0x26>
   12596:	4b04      	ldr	r3, [pc, #16]	; (125a8 <_fflush_r+0x54>)
   12598:	429c      	cmp	r4, r3
   1259a:	d1ee      	bne.n	1257a <_fflush_r+0x26>
   1259c:	68ec      	ldr	r4, [r5, #12]
   1259e:	e7ec      	b.n	1257a <_fflush_r+0x26>
   125a0:	00014304 	.word	0x00014304
   125a4:	00014324 	.word	0x00014324
   125a8:	000142e4 	.word	0x000142e4

000125ac <_cleanup_r>:
   125ac:	b510      	push	{r4, lr}
   125ae:	4902      	ldr	r1, [pc, #8]	; (125b8 <_cleanup_r+0xc>)
   125b0:	f000 f8b2 	bl	12718 <_fwalk_reent>
   125b4:	bd10      	pop	{r4, pc}
   125b6:	46c0      	nop			; (mov r8, r8)
   125b8:	00012555 	.word	0x00012555

000125bc <std.isra.0>:
   125bc:	2300      	movs	r3, #0
   125be:	b510      	push	{r4, lr}
   125c0:	0004      	movs	r4, r0
   125c2:	6003      	str	r3, [r0, #0]
   125c4:	6043      	str	r3, [r0, #4]
   125c6:	6083      	str	r3, [r0, #8]
   125c8:	8181      	strh	r1, [r0, #12]
   125ca:	6643      	str	r3, [r0, #100]	; 0x64
   125cc:	81c2      	strh	r2, [r0, #14]
   125ce:	6103      	str	r3, [r0, #16]
   125d0:	6143      	str	r3, [r0, #20]
   125d2:	6183      	str	r3, [r0, #24]
   125d4:	0019      	movs	r1, r3
   125d6:	2208      	movs	r2, #8
   125d8:	305c      	adds	r0, #92	; 0x5c
   125da:	f7fe f933 	bl	10844 <memset>
   125de:	4b05      	ldr	r3, [pc, #20]	; (125f4 <std.isra.0+0x38>)
   125e0:	6224      	str	r4, [r4, #32]
   125e2:	6263      	str	r3, [r4, #36]	; 0x24
   125e4:	4b04      	ldr	r3, [pc, #16]	; (125f8 <std.isra.0+0x3c>)
   125e6:	62a3      	str	r3, [r4, #40]	; 0x28
   125e8:	4b04      	ldr	r3, [pc, #16]	; (125fc <std.isra.0+0x40>)
   125ea:	62e3      	str	r3, [r4, #44]	; 0x2c
   125ec:	4b04      	ldr	r3, [pc, #16]	; (12600 <std.isra.0+0x44>)
   125ee:	6323      	str	r3, [r4, #48]	; 0x30
   125f0:	bd10      	pop	{r4, pc}
   125f2:	46c0      	nop			; (mov r8, r8)
   125f4:	00012f29 	.word	0x00012f29
   125f8:	00012f51 	.word	0x00012f51
   125fc:	00012f89 	.word	0x00012f89
   12600:	00012fb5 	.word	0x00012fb5

00012604 <__sfmoreglue>:
   12604:	b570      	push	{r4, r5, r6, lr}
   12606:	2568      	movs	r5, #104	; 0x68
   12608:	1e4a      	subs	r2, r1, #1
   1260a:	4355      	muls	r5, r2
   1260c:	000e      	movs	r6, r1
   1260e:	0029      	movs	r1, r5
   12610:	3174      	adds	r1, #116	; 0x74
   12612:	f7fe f969 	bl	108e8 <_malloc_r>
   12616:	1e04      	subs	r4, r0, #0
   12618:	d008      	beq.n	1262c <__sfmoreglue+0x28>
   1261a:	2100      	movs	r1, #0
   1261c:	002a      	movs	r2, r5
   1261e:	6001      	str	r1, [r0, #0]
   12620:	6046      	str	r6, [r0, #4]
   12622:	300c      	adds	r0, #12
   12624:	60a0      	str	r0, [r4, #8]
   12626:	3268      	adds	r2, #104	; 0x68
   12628:	f7fe f90c 	bl	10844 <memset>
   1262c:	0020      	movs	r0, r4
   1262e:	bd70      	pop	{r4, r5, r6, pc}

00012630 <__sinit>:
   12630:	6983      	ldr	r3, [r0, #24]
   12632:	b513      	push	{r0, r1, r4, lr}
   12634:	0004      	movs	r4, r0
   12636:	2b00      	cmp	r3, #0
   12638:	d128      	bne.n	1268c <__sinit+0x5c>
   1263a:	6483      	str	r3, [r0, #72]	; 0x48
   1263c:	64c3      	str	r3, [r0, #76]	; 0x4c
   1263e:	6503      	str	r3, [r0, #80]	; 0x50
   12640:	4b13      	ldr	r3, [pc, #76]	; (12690 <__sinit+0x60>)
   12642:	4a14      	ldr	r2, [pc, #80]	; (12694 <__sinit+0x64>)
   12644:	681b      	ldr	r3, [r3, #0]
   12646:	6282      	str	r2, [r0, #40]	; 0x28
   12648:	9301      	str	r3, [sp, #4]
   1264a:	4298      	cmp	r0, r3
   1264c:	d101      	bne.n	12652 <__sinit+0x22>
   1264e:	2301      	movs	r3, #1
   12650:	6183      	str	r3, [r0, #24]
   12652:	0020      	movs	r0, r4
   12654:	f000 f820 	bl	12698 <__sfp>
   12658:	6060      	str	r0, [r4, #4]
   1265a:	0020      	movs	r0, r4
   1265c:	f000 f81c 	bl	12698 <__sfp>
   12660:	60a0      	str	r0, [r4, #8]
   12662:	0020      	movs	r0, r4
   12664:	f000 f818 	bl	12698 <__sfp>
   12668:	2200      	movs	r2, #0
   1266a:	60e0      	str	r0, [r4, #12]
   1266c:	2104      	movs	r1, #4
   1266e:	6860      	ldr	r0, [r4, #4]
   12670:	f7ff ffa4 	bl	125bc <std.isra.0>
   12674:	2201      	movs	r2, #1
   12676:	2109      	movs	r1, #9
   12678:	68a0      	ldr	r0, [r4, #8]
   1267a:	f7ff ff9f 	bl	125bc <std.isra.0>
   1267e:	2202      	movs	r2, #2
   12680:	2112      	movs	r1, #18
   12682:	68e0      	ldr	r0, [r4, #12]
   12684:	f7ff ff9a 	bl	125bc <std.isra.0>
   12688:	2301      	movs	r3, #1
   1268a:	61a3      	str	r3, [r4, #24]
   1268c:	bd13      	pop	{r0, r1, r4, pc}
   1268e:	46c0      	nop			; (mov r8, r8)
   12690:	00014180 	.word	0x00014180
   12694:	000125ad 	.word	0x000125ad

00012698 <__sfp>:
   12698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1269a:	4b1e      	ldr	r3, [pc, #120]	; (12714 <__sfp+0x7c>)
   1269c:	0007      	movs	r7, r0
   1269e:	681e      	ldr	r6, [r3, #0]
   126a0:	69b3      	ldr	r3, [r6, #24]
   126a2:	2b00      	cmp	r3, #0
   126a4:	d102      	bne.n	126ac <__sfp+0x14>
   126a6:	0030      	movs	r0, r6
   126a8:	f7ff ffc2 	bl	12630 <__sinit>
   126ac:	3648      	adds	r6, #72	; 0x48
   126ae:	68b4      	ldr	r4, [r6, #8]
   126b0:	6873      	ldr	r3, [r6, #4]
   126b2:	3b01      	subs	r3, #1
   126b4:	d504      	bpl.n	126c0 <__sfp+0x28>
   126b6:	6833      	ldr	r3, [r6, #0]
   126b8:	2b00      	cmp	r3, #0
   126ba:	d007      	beq.n	126cc <__sfp+0x34>
   126bc:	6836      	ldr	r6, [r6, #0]
   126be:	e7f6      	b.n	126ae <__sfp+0x16>
   126c0:	220c      	movs	r2, #12
   126c2:	5ea5      	ldrsh	r5, [r4, r2]
   126c4:	2d00      	cmp	r5, #0
   126c6:	d00d      	beq.n	126e4 <__sfp+0x4c>
   126c8:	3468      	adds	r4, #104	; 0x68
   126ca:	e7f2      	b.n	126b2 <__sfp+0x1a>
   126cc:	2104      	movs	r1, #4
   126ce:	0038      	movs	r0, r7
   126d0:	f7ff ff98 	bl	12604 <__sfmoreglue>
   126d4:	6030      	str	r0, [r6, #0]
   126d6:	2800      	cmp	r0, #0
   126d8:	d1f0      	bne.n	126bc <__sfp+0x24>
   126da:	230c      	movs	r3, #12
   126dc:	0004      	movs	r4, r0
   126de:	603b      	str	r3, [r7, #0]
   126e0:	0020      	movs	r0, r4
   126e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   126e4:	2301      	movs	r3, #1
   126e6:	0020      	movs	r0, r4
   126e8:	425b      	negs	r3, r3
   126ea:	81e3      	strh	r3, [r4, #14]
   126ec:	3302      	adds	r3, #2
   126ee:	81a3      	strh	r3, [r4, #12]
   126f0:	6665      	str	r5, [r4, #100]	; 0x64
   126f2:	6025      	str	r5, [r4, #0]
   126f4:	60a5      	str	r5, [r4, #8]
   126f6:	6065      	str	r5, [r4, #4]
   126f8:	6125      	str	r5, [r4, #16]
   126fa:	6165      	str	r5, [r4, #20]
   126fc:	61a5      	str	r5, [r4, #24]
   126fe:	2208      	movs	r2, #8
   12700:	0029      	movs	r1, r5
   12702:	305c      	adds	r0, #92	; 0x5c
   12704:	f7fe f89e 	bl	10844 <memset>
   12708:	6365      	str	r5, [r4, #52]	; 0x34
   1270a:	63a5      	str	r5, [r4, #56]	; 0x38
   1270c:	64a5      	str	r5, [r4, #72]	; 0x48
   1270e:	64e5      	str	r5, [r4, #76]	; 0x4c
   12710:	e7e6      	b.n	126e0 <__sfp+0x48>
   12712:	46c0      	nop			; (mov r8, r8)
   12714:	00014180 	.word	0x00014180

00012718 <_fwalk_reent>:
   12718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1271a:	0004      	movs	r4, r0
   1271c:	0007      	movs	r7, r0
   1271e:	2600      	movs	r6, #0
   12720:	9101      	str	r1, [sp, #4]
   12722:	3448      	adds	r4, #72	; 0x48
   12724:	2c00      	cmp	r4, #0
   12726:	d101      	bne.n	1272c <_fwalk_reent+0x14>
   12728:	0030      	movs	r0, r6
   1272a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1272c:	6863      	ldr	r3, [r4, #4]
   1272e:	68a5      	ldr	r5, [r4, #8]
   12730:	9300      	str	r3, [sp, #0]
   12732:	9b00      	ldr	r3, [sp, #0]
   12734:	3b01      	subs	r3, #1
   12736:	9300      	str	r3, [sp, #0]
   12738:	d501      	bpl.n	1273e <_fwalk_reent+0x26>
   1273a:	6824      	ldr	r4, [r4, #0]
   1273c:	e7f2      	b.n	12724 <_fwalk_reent+0xc>
   1273e:	89ab      	ldrh	r3, [r5, #12]
   12740:	2b01      	cmp	r3, #1
   12742:	d908      	bls.n	12756 <_fwalk_reent+0x3e>
   12744:	220e      	movs	r2, #14
   12746:	5eab      	ldrsh	r3, [r5, r2]
   12748:	3301      	adds	r3, #1
   1274a:	d004      	beq.n	12756 <_fwalk_reent+0x3e>
   1274c:	0029      	movs	r1, r5
   1274e:	0038      	movs	r0, r7
   12750:	9b01      	ldr	r3, [sp, #4]
   12752:	4798      	blx	r3
   12754:	4306      	orrs	r6, r0
   12756:	3568      	adds	r5, #104	; 0x68
   12758:	e7eb      	b.n	12732 <_fwalk_reent+0x1a>
	...

0001275c <_localeconv_r>:
   1275c:	4b03      	ldr	r3, [pc, #12]	; (1276c <_localeconv_r+0x10>)
   1275e:	681b      	ldr	r3, [r3, #0]
   12760:	6a18      	ldr	r0, [r3, #32]
   12762:	2800      	cmp	r0, #0
   12764:	d100      	bne.n	12768 <_localeconv_r+0xc>
   12766:	4802      	ldr	r0, [pc, #8]	; (12770 <_localeconv_r+0x14>)
   12768:	30f0      	adds	r0, #240	; 0xf0
   1276a:	4770      	bx	lr
   1276c:	200000a4 	.word	0x200000a4
   12770:	20000108 	.word	0x20000108

00012774 <__swhatbuf_r>:
   12774:	b570      	push	{r4, r5, r6, lr}
   12776:	000e      	movs	r6, r1
   12778:	001d      	movs	r5, r3
   1277a:	230e      	movs	r3, #14
   1277c:	5ec9      	ldrsh	r1, [r1, r3]
   1277e:	b090      	sub	sp, #64	; 0x40
   12780:	0014      	movs	r4, r2
   12782:	2900      	cmp	r1, #0
   12784:	da07      	bge.n	12796 <__swhatbuf_r+0x22>
   12786:	2300      	movs	r3, #0
   12788:	602b      	str	r3, [r5, #0]
   1278a:	89b3      	ldrh	r3, [r6, #12]
   1278c:	061b      	lsls	r3, r3, #24
   1278e:	d411      	bmi.n	127b4 <__swhatbuf_r+0x40>
   12790:	2380      	movs	r3, #128	; 0x80
   12792:	00db      	lsls	r3, r3, #3
   12794:	e00f      	b.n	127b6 <__swhatbuf_r+0x42>
   12796:	aa01      	add	r2, sp, #4
   12798:	f000 fc38 	bl	1300c <_fstat_r>
   1279c:	2800      	cmp	r0, #0
   1279e:	dbf2      	blt.n	12786 <__swhatbuf_r+0x12>
   127a0:	22f0      	movs	r2, #240	; 0xf0
   127a2:	9b02      	ldr	r3, [sp, #8]
   127a4:	0212      	lsls	r2, r2, #8
   127a6:	4013      	ands	r3, r2
   127a8:	4a05      	ldr	r2, [pc, #20]	; (127c0 <__swhatbuf_r+0x4c>)
   127aa:	189b      	adds	r3, r3, r2
   127ac:	425a      	negs	r2, r3
   127ae:	4153      	adcs	r3, r2
   127b0:	602b      	str	r3, [r5, #0]
   127b2:	e7ed      	b.n	12790 <__swhatbuf_r+0x1c>
   127b4:	2340      	movs	r3, #64	; 0x40
   127b6:	2000      	movs	r0, #0
   127b8:	6023      	str	r3, [r4, #0]
   127ba:	b010      	add	sp, #64	; 0x40
   127bc:	bd70      	pop	{r4, r5, r6, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	ffffe000 	.word	0xffffe000

000127c4 <__smakebuf_r>:
   127c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   127c6:	2602      	movs	r6, #2
   127c8:	898b      	ldrh	r3, [r1, #12]
   127ca:	0005      	movs	r5, r0
   127cc:	000c      	movs	r4, r1
   127ce:	4233      	tst	r3, r6
   127d0:	d006      	beq.n	127e0 <__smakebuf_r+0x1c>
   127d2:	0023      	movs	r3, r4
   127d4:	3347      	adds	r3, #71	; 0x47
   127d6:	6023      	str	r3, [r4, #0]
   127d8:	6123      	str	r3, [r4, #16]
   127da:	2301      	movs	r3, #1
   127dc:	6163      	str	r3, [r4, #20]
   127de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   127e0:	ab01      	add	r3, sp, #4
   127e2:	466a      	mov	r2, sp
   127e4:	f7ff ffc6 	bl	12774 <__swhatbuf_r>
   127e8:	9900      	ldr	r1, [sp, #0]
   127ea:	0007      	movs	r7, r0
   127ec:	0028      	movs	r0, r5
   127ee:	f7fe f87b 	bl	108e8 <_malloc_r>
   127f2:	2800      	cmp	r0, #0
   127f4:	d108      	bne.n	12808 <__smakebuf_r+0x44>
   127f6:	220c      	movs	r2, #12
   127f8:	5ea3      	ldrsh	r3, [r4, r2]
   127fa:	059a      	lsls	r2, r3, #22
   127fc:	d4ef      	bmi.n	127de <__smakebuf_r+0x1a>
   127fe:	2203      	movs	r2, #3
   12800:	4393      	bics	r3, r2
   12802:	431e      	orrs	r6, r3
   12804:	81a6      	strh	r6, [r4, #12]
   12806:	e7e4      	b.n	127d2 <__smakebuf_r+0xe>
   12808:	4b0f      	ldr	r3, [pc, #60]	; (12848 <__smakebuf_r+0x84>)
   1280a:	62ab      	str	r3, [r5, #40]	; 0x28
   1280c:	2380      	movs	r3, #128	; 0x80
   1280e:	89a2      	ldrh	r2, [r4, #12]
   12810:	6020      	str	r0, [r4, #0]
   12812:	4313      	orrs	r3, r2
   12814:	81a3      	strh	r3, [r4, #12]
   12816:	9b00      	ldr	r3, [sp, #0]
   12818:	6120      	str	r0, [r4, #16]
   1281a:	6163      	str	r3, [r4, #20]
   1281c:	9b01      	ldr	r3, [sp, #4]
   1281e:	2b00      	cmp	r3, #0
   12820:	d00d      	beq.n	1283e <__smakebuf_r+0x7a>
   12822:	230e      	movs	r3, #14
   12824:	5ee1      	ldrsh	r1, [r4, r3]
   12826:	0028      	movs	r0, r5
   12828:	f000 fc02 	bl	13030 <_isatty_r>
   1282c:	2800      	cmp	r0, #0
   1282e:	d006      	beq.n	1283e <__smakebuf_r+0x7a>
   12830:	2203      	movs	r2, #3
   12832:	89a3      	ldrh	r3, [r4, #12]
   12834:	4393      	bics	r3, r2
   12836:	001a      	movs	r2, r3
   12838:	2301      	movs	r3, #1
   1283a:	4313      	orrs	r3, r2
   1283c:	81a3      	strh	r3, [r4, #12]
   1283e:	89a0      	ldrh	r0, [r4, #12]
   12840:	4338      	orrs	r0, r7
   12842:	81a0      	strh	r0, [r4, #12]
   12844:	e7cb      	b.n	127de <__smakebuf_r+0x1a>
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000125ad 	.word	0x000125ad

0001284c <memchr>:
   1284c:	b2c9      	uxtb	r1, r1
   1284e:	1882      	adds	r2, r0, r2
   12850:	4290      	cmp	r0, r2
   12852:	d101      	bne.n	12858 <memchr+0xc>
   12854:	2000      	movs	r0, #0
   12856:	4770      	bx	lr
   12858:	7803      	ldrb	r3, [r0, #0]
   1285a:	428b      	cmp	r3, r1
   1285c:	d0fb      	beq.n	12856 <memchr+0xa>
   1285e:	3001      	adds	r0, #1
   12860:	e7f6      	b.n	12850 <memchr+0x4>

00012862 <__malloc_lock>:
   12862:	4770      	bx	lr

00012864 <__malloc_unlock>:
   12864:	4770      	bx	lr

00012866 <_Balloc>:
   12866:	b570      	push	{r4, r5, r6, lr}
   12868:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1286a:	0004      	movs	r4, r0
   1286c:	000d      	movs	r5, r1
   1286e:	2e00      	cmp	r6, #0
   12870:	d107      	bne.n	12882 <_Balloc+0x1c>
   12872:	2010      	movs	r0, #16
   12874:	f7fd ffa8 	bl	107c8 <malloc>
   12878:	6260      	str	r0, [r4, #36]	; 0x24
   1287a:	6046      	str	r6, [r0, #4]
   1287c:	6086      	str	r6, [r0, #8]
   1287e:	6006      	str	r6, [r0, #0]
   12880:	60c6      	str	r6, [r0, #12]
   12882:	6a66      	ldr	r6, [r4, #36]	; 0x24
   12884:	68f3      	ldr	r3, [r6, #12]
   12886:	2b00      	cmp	r3, #0
   12888:	d013      	beq.n	128b2 <_Balloc+0x4c>
   1288a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1288c:	00aa      	lsls	r2, r5, #2
   1288e:	68db      	ldr	r3, [r3, #12]
   12890:	189b      	adds	r3, r3, r2
   12892:	6818      	ldr	r0, [r3, #0]
   12894:	2800      	cmp	r0, #0
   12896:	d118      	bne.n	128ca <_Balloc+0x64>
   12898:	2101      	movs	r1, #1
   1289a:	000e      	movs	r6, r1
   1289c:	40ae      	lsls	r6, r5
   1289e:	1d72      	adds	r2, r6, #5
   128a0:	0092      	lsls	r2, r2, #2
   128a2:	0020      	movs	r0, r4
   128a4:	f000 fac2 	bl	12e2c <_calloc_r>
   128a8:	2800      	cmp	r0, #0
   128aa:	d00c      	beq.n	128c6 <_Balloc+0x60>
   128ac:	6045      	str	r5, [r0, #4]
   128ae:	6086      	str	r6, [r0, #8]
   128b0:	e00d      	b.n	128ce <_Balloc+0x68>
   128b2:	2221      	movs	r2, #33	; 0x21
   128b4:	2104      	movs	r1, #4
   128b6:	0020      	movs	r0, r4
   128b8:	f000 fab8 	bl	12e2c <_calloc_r>
   128bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   128be:	60f0      	str	r0, [r6, #12]
   128c0:	68db      	ldr	r3, [r3, #12]
   128c2:	2b00      	cmp	r3, #0
   128c4:	d1e1      	bne.n	1288a <_Balloc+0x24>
   128c6:	2000      	movs	r0, #0
   128c8:	bd70      	pop	{r4, r5, r6, pc}
   128ca:	6802      	ldr	r2, [r0, #0]
   128cc:	601a      	str	r2, [r3, #0]
   128ce:	2300      	movs	r3, #0
   128d0:	6103      	str	r3, [r0, #16]
   128d2:	60c3      	str	r3, [r0, #12]
   128d4:	e7f8      	b.n	128c8 <_Balloc+0x62>

000128d6 <_Bfree>:
   128d6:	b570      	push	{r4, r5, r6, lr}
   128d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   128da:	0006      	movs	r6, r0
   128dc:	000d      	movs	r5, r1
   128de:	2c00      	cmp	r4, #0
   128e0:	d107      	bne.n	128f2 <_Bfree+0x1c>
   128e2:	2010      	movs	r0, #16
   128e4:	f7fd ff70 	bl	107c8 <malloc>
   128e8:	6270      	str	r0, [r6, #36]	; 0x24
   128ea:	6044      	str	r4, [r0, #4]
   128ec:	6084      	str	r4, [r0, #8]
   128ee:	6004      	str	r4, [r0, #0]
   128f0:	60c4      	str	r4, [r0, #12]
   128f2:	2d00      	cmp	r5, #0
   128f4:	d007      	beq.n	12906 <_Bfree+0x30>
   128f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   128f8:	686a      	ldr	r2, [r5, #4]
   128fa:	68db      	ldr	r3, [r3, #12]
   128fc:	0092      	lsls	r2, r2, #2
   128fe:	189b      	adds	r3, r3, r2
   12900:	681a      	ldr	r2, [r3, #0]
   12902:	602a      	str	r2, [r5, #0]
   12904:	601d      	str	r5, [r3, #0]
   12906:	bd70      	pop	{r4, r5, r6, pc}

00012908 <__multadd>:
   12908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1290a:	001e      	movs	r6, r3
   1290c:	2314      	movs	r3, #20
   1290e:	469c      	mov	ip, r3
   12910:	0007      	movs	r7, r0
   12912:	000c      	movs	r4, r1
   12914:	2000      	movs	r0, #0
   12916:	690d      	ldr	r5, [r1, #16]
   12918:	448c      	add	ip, r1
   1291a:	4663      	mov	r3, ip
   1291c:	8819      	ldrh	r1, [r3, #0]
   1291e:	681b      	ldr	r3, [r3, #0]
   12920:	4351      	muls	r1, r2
   12922:	0c1b      	lsrs	r3, r3, #16
   12924:	4353      	muls	r3, r2
   12926:	1989      	adds	r1, r1, r6
   12928:	0c0e      	lsrs	r6, r1, #16
   1292a:	199b      	adds	r3, r3, r6
   1292c:	b289      	uxth	r1, r1
   1292e:	0c1e      	lsrs	r6, r3, #16
   12930:	041b      	lsls	r3, r3, #16
   12932:	185b      	adds	r3, r3, r1
   12934:	4661      	mov	r1, ip
   12936:	3001      	adds	r0, #1
   12938:	c108      	stmia	r1!, {r3}
   1293a:	468c      	mov	ip, r1
   1293c:	4285      	cmp	r5, r0
   1293e:	dcec      	bgt.n	1291a <__multadd+0x12>
   12940:	2e00      	cmp	r6, #0
   12942:	d01b      	beq.n	1297c <__multadd+0x74>
   12944:	68a3      	ldr	r3, [r4, #8]
   12946:	429d      	cmp	r5, r3
   12948:	db12      	blt.n	12970 <__multadd+0x68>
   1294a:	6863      	ldr	r3, [r4, #4]
   1294c:	0038      	movs	r0, r7
   1294e:	1c59      	adds	r1, r3, #1
   12950:	f7ff ff89 	bl	12866 <_Balloc>
   12954:	0021      	movs	r1, r4
   12956:	6923      	ldr	r3, [r4, #16]
   12958:	9001      	str	r0, [sp, #4]
   1295a:	1c9a      	adds	r2, r3, #2
   1295c:	0092      	lsls	r2, r2, #2
   1295e:	310c      	adds	r1, #12
   12960:	300c      	adds	r0, #12
   12962:	f7fd ff66 	bl	10832 <memcpy>
   12966:	0021      	movs	r1, r4
   12968:	0038      	movs	r0, r7
   1296a:	f7ff ffb4 	bl	128d6 <_Bfree>
   1296e:	9c01      	ldr	r4, [sp, #4]
   12970:	1d2b      	adds	r3, r5, #4
   12972:	009b      	lsls	r3, r3, #2
   12974:	18e3      	adds	r3, r4, r3
   12976:	3501      	adds	r5, #1
   12978:	605e      	str	r6, [r3, #4]
   1297a:	6125      	str	r5, [r4, #16]
   1297c:	0020      	movs	r0, r4
   1297e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00012980 <__hi0bits>:
   12980:	0003      	movs	r3, r0
   12982:	0c02      	lsrs	r2, r0, #16
   12984:	2000      	movs	r0, #0
   12986:	4282      	cmp	r2, r0
   12988:	d101      	bne.n	1298e <__hi0bits+0xe>
   1298a:	041b      	lsls	r3, r3, #16
   1298c:	3010      	adds	r0, #16
   1298e:	0e1a      	lsrs	r2, r3, #24
   12990:	d101      	bne.n	12996 <__hi0bits+0x16>
   12992:	3008      	adds	r0, #8
   12994:	021b      	lsls	r3, r3, #8
   12996:	0f1a      	lsrs	r2, r3, #28
   12998:	d101      	bne.n	1299e <__hi0bits+0x1e>
   1299a:	3004      	adds	r0, #4
   1299c:	011b      	lsls	r3, r3, #4
   1299e:	0f9a      	lsrs	r2, r3, #30
   129a0:	d101      	bne.n	129a6 <__hi0bits+0x26>
   129a2:	3002      	adds	r0, #2
   129a4:	009b      	lsls	r3, r3, #2
   129a6:	2b00      	cmp	r3, #0
   129a8:	db03      	blt.n	129b2 <__hi0bits+0x32>
   129aa:	3001      	adds	r0, #1
   129ac:	005b      	lsls	r3, r3, #1
   129ae:	d400      	bmi.n	129b2 <__hi0bits+0x32>
   129b0:	2020      	movs	r0, #32
   129b2:	4770      	bx	lr

000129b4 <__lo0bits>:
   129b4:	2207      	movs	r2, #7
   129b6:	6803      	ldr	r3, [r0, #0]
   129b8:	b510      	push	{r4, lr}
   129ba:	0001      	movs	r1, r0
   129bc:	401a      	ands	r2, r3
   129be:	d00d      	beq.n	129dc <__lo0bits+0x28>
   129c0:	2401      	movs	r4, #1
   129c2:	2000      	movs	r0, #0
   129c4:	4223      	tst	r3, r4
   129c6:	d105      	bne.n	129d4 <__lo0bits+0x20>
   129c8:	3002      	adds	r0, #2
   129ca:	4203      	tst	r3, r0
   129cc:	d003      	beq.n	129d6 <__lo0bits+0x22>
   129ce:	40e3      	lsrs	r3, r4
   129d0:	0020      	movs	r0, r4
   129d2:	600b      	str	r3, [r1, #0]
   129d4:	bd10      	pop	{r4, pc}
   129d6:	089b      	lsrs	r3, r3, #2
   129d8:	600b      	str	r3, [r1, #0]
   129da:	e7fb      	b.n	129d4 <__lo0bits+0x20>
   129dc:	b29c      	uxth	r4, r3
   129de:	0010      	movs	r0, r2
   129e0:	2c00      	cmp	r4, #0
   129e2:	d101      	bne.n	129e8 <__lo0bits+0x34>
   129e4:	2010      	movs	r0, #16
   129e6:	0c1b      	lsrs	r3, r3, #16
   129e8:	b2da      	uxtb	r2, r3
   129ea:	2a00      	cmp	r2, #0
   129ec:	d101      	bne.n	129f2 <__lo0bits+0x3e>
   129ee:	3008      	adds	r0, #8
   129f0:	0a1b      	lsrs	r3, r3, #8
   129f2:	071a      	lsls	r2, r3, #28
   129f4:	d101      	bne.n	129fa <__lo0bits+0x46>
   129f6:	3004      	adds	r0, #4
   129f8:	091b      	lsrs	r3, r3, #4
   129fa:	079a      	lsls	r2, r3, #30
   129fc:	d101      	bne.n	12a02 <__lo0bits+0x4e>
   129fe:	3002      	adds	r0, #2
   12a00:	089b      	lsrs	r3, r3, #2
   12a02:	07da      	lsls	r2, r3, #31
   12a04:	d4e8      	bmi.n	129d8 <__lo0bits+0x24>
   12a06:	085b      	lsrs	r3, r3, #1
   12a08:	d001      	beq.n	12a0e <__lo0bits+0x5a>
   12a0a:	3001      	adds	r0, #1
   12a0c:	e7e4      	b.n	129d8 <__lo0bits+0x24>
   12a0e:	2020      	movs	r0, #32
   12a10:	e7e0      	b.n	129d4 <__lo0bits+0x20>

00012a12 <__i2b>:
   12a12:	b510      	push	{r4, lr}
   12a14:	000c      	movs	r4, r1
   12a16:	2101      	movs	r1, #1
   12a18:	f7ff ff25 	bl	12866 <_Balloc>
   12a1c:	2301      	movs	r3, #1
   12a1e:	6144      	str	r4, [r0, #20]
   12a20:	6103      	str	r3, [r0, #16]
   12a22:	bd10      	pop	{r4, pc}

00012a24 <__multiply>:
   12a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a26:	690b      	ldr	r3, [r1, #16]
   12a28:	0015      	movs	r5, r2
   12a2a:	6912      	ldr	r2, [r2, #16]
   12a2c:	b089      	sub	sp, #36	; 0x24
   12a2e:	000c      	movs	r4, r1
   12a30:	4293      	cmp	r3, r2
   12a32:	da01      	bge.n	12a38 <__multiply+0x14>
   12a34:	002c      	movs	r4, r5
   12a36:	000d      	movs	r5, r1
   12a38:	6927      	ldr	r7, [r4, #16]
   12a3a:	692e      	ldr	r6, [r5, #16]
   12a3c:	68a2      	ldr	r2, [r4, #8]
   12a3e:	19bb      	adds	r3, r7, r6
   12a40:	6861      	ldr	r1, [r4, #4]
   12a42:	9301      	str	r3, [sp, #4]
   12a44:	4293      	cmp	r3, r2
   12a46:	dd00      	ble.n	12a4a <__multiply+0x26>
   12a48:	3101      	adds	r1, #1
   12a4a:	f7ff ff0c 	bl	12866 <_Balloc>
   12a4e:	0003      	movs	r3, r0
   12a50:	3314      	adds	r3, #20
   12a52:	9300      	str	r3, [sp, #0]
   12a54:	9a00      	ldr	r2, [sp, #0]
   12a56:	19bb      	adds	r3, r7, r6
   12a58:	4694      	mov	ip, r2
   12a5a:	009b      	lsls	r3, r3, #2
   12a5c:	449c      	add	ip, r3
   12a5e:	0013      	movs	r3, r2
   12a60:	2200      	movs	r2, #0
   12a62:	9004      	str	r0, [sp, #16]
   12a64:	4563      	cmp	r3, ip
   12a66:	d31c      	bcc.n	12aa2 <__multiply+0x7e>
   12a68:	002a      	movs	r2, r5
   12a6a:	3414      	adds	r4, #20
   12a6c:	00bf      	lsls	r7, r7, #2
   12a6e:	19e3      	adds	r3, r4, r7
   12a70:	3214      	adds	r2, #20
   12a72:	00b6      	lsls	r6, r6, #2
   12a74:	9305      	str	r3, [sp, #20]
   12a76:	1993      	adds	r3, r2, r6
   12a78:	9402      	str	r4, [sp, #8]
   12a7a:	9306      	str	r3, [sp, #24]
   12a7c:	9b06      	ldr	r3, [sp, #24]
   12a7e:	429a      	cmp	r2, r3
   12a80:	d311      	bcc.n	12aa6 <__multiply+0x82>
   12a82:	9b01      	ldr	r3, [sp, #4]
   12a84:	2b00      	cmp	r3, #0
   12a86:	dd06      	ble.n	12a96 <__multiply+0x72>
   12a88:	2304      	movs	r3, #4
   12a8a:	425b      	negs	r3, r3
   12a8c:	449c      	add	ip, r3
   12a8e:	4663      	mov	r3, ip
   12a90:	681b      	ldr	r3, [r3, #0]
   12a92:	2b00      	cmp	r3, #0
   12a94:	d051      	beq.n	12b3a <__multiply+0x116>
   12a96:	9b04      	ldr	r3, [sp, #16]
   12a98:	9a01      	ldr	r2, [sp, #4]
   12a9a:	0018      	movs	r0, r3
   12a9c:	611a      	str	r2, [r3, #16]
   12a9e:	b009      	add	sp, #36	; 0x24
   12aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12aa2:	c304      	stmia	r3!, {r2}
   12aa4:	e7de      	b.n	12a64 <__multiply+0x40>
   12aa6:	8814      	ldrh	r4, [r2, #0]
   12aa8:	2c00      	cmp	r4, #0
   12aaa:	d01e      	beq.n	12aea <__multiply+0xc6>
   12aac:	2600      	movs	r6, #0
   12aae:	9d00      	ldr	r5, [sp, #0]
   12ab0:	9f02      	ldr	r7, [sp, #8]
   12ab2:	cf01      	ldmia	r7!, {r0}
   12ab4:	9507      	str	r5, [sp, #28]
   12ab6:	cd08      	ldmia	r5!, {r3}
   12ab8:	9303      	str	r3, [sp, #12]
   12aba:	b283      	uxth	r3, r0
   12abc:	4363      	muls	r3, r4
   12abe:	0019      	movs	r1, r3
   12ac0:	466b      	mov	r3, sp
   12ac2:	0c00      	lsrs	r0, r0, #16
   12ac4:	899b      	ldrh	r3, [r3, #12]
   12ac6:	4360      	muls	r0, r4
   12ac8:	18cb      	adds	r3, r1, r3
   12aca:	9903      	ldr	r1, [sp, #12]
   12acc:	199b      	adds	r3, r3, r6
   12ace:	0c09      	lsrs	r1, r1, #16
   12ad0:	1841      	adds	r1, r0, r1
   12ad2:	0c18      	lsrs	r0, r3, #16
   12ad4:	1809      	adds	r1, r1, r0
   12ad6:	0c0e      	lsrs	r6, r1, #16
   12ad8:	b29b      	uxth	r3, r3
   12ada:	0409      	lsls	r1, r1, #16
   12adc:	430b      	orrs	r3, r1
   12ade:	9907      	ldr	r1, [sp, #28]
   12ae0:	600b      	str	r3, [r1, #0]
   12ae2:	9b05      	ldr	r3, [sp, #20]
   12ae4:	42bb      	cmp	r3, r7
   12ae6:	d8e4      	bhi.n	12ab2 <__multiply+0x8e>
   12ae8:	602e      	str	r6, [r5, #0]
   12aea:	6813      	ldr	r3, [r2, #0]
   12aec:	0c1b      	lsrs	r3, r3, #16
   12aee:	9303      	str	r3, [sp, #12]
   12af0:	d01e      	beq.n	12b30 <__multiply+0x10c>
   12af2:	2600      	movs	r6, #0
   12af4:	9b00      	ldr	r3, [sp, #0]
   12af6:	9c02      	ldr	r4, [sp, #8]
   12af8:	681b      	ldr	r3, [r3, #0]
   12afa:	9800      	ldr	r0, [sp, #0]
   12afc:	0007      	movs	r7, r0
   12afe:	8821      	ldrh	r1, [r4, #0]
   12b00:	9d03      	ldr	r5, [sp, #12]
   12b02:	b29b      	uxth	r3, r3
   12b04:	4369      	muls	r1, r5
   12b06:	c820      	ldmia	r0!, {r5}
   12b08:	0c2d      	lsrs	r5, r5, #16
   12b0a:	1949      	adds	r1, r1, r5
   12b0c:	198e      	adds	r6, r1, r6
   12b0e:	0431      	lsls	r1, r6, #16
   12b10:	430b      	orrs	r3, r1
   12b12:	603b      	str	r3, [r7, #0]
   12b14:	cc08      	ldmia	r4!, {r3}
   12b16:	9903      	ldr	r1, [sp, #12]
   12b18:	0c1b      	lsrs	r3, r3, #16
   12b1a:	434b      	muls	r3, r1
   12b1c:	6879      	ldr	r1, [r7, #4]
   12b1e:	0c36      	lsrs	r6, r6, #16
   12b20:	b289      	uxth	r1, r1
   12b22:	185b      	adds	r3, r3, r1
   12b24:	9905      	ldr	r1, [sp, #20]
   12b26:	199b      	adds	r3, r3, r6
   12b28:	0c1e      	lsrs	r6, r3, #16
   12b2a:	42a1      	cmp	r1, r4
   12b2c:	d8e6      	bhi.n	12afc <__multiply+0xd8>
   12b2e:	6003      	str	r3, [r0, #0]
   12b30:	9b00      	ldr	r3, [sp, #0]
   12b32:	3204      	adds	r2, #4
   12b34:	3304      	adds	r3, #4
   12b36:	9300      	str	r3, [sp, #0]
   12b38:	e7a0      	b.n	12a7c <__multiply+0x58>
   12b3a:	9b01      	ldr	r3, [sp, #4]
   12b3c:	3b01      	subs	r3, #1
   12b3e:	9301      	str	r3, [sp, #4]
   12b40:	e79f      	b.n	12a82 <__multiply+0x5e>
	...

00012b44 <__pow5mult>:
   12b44:	2303      	movs	r3, #3
   12b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b48:	4013      	ands	r3, r2
   12b4a:	0005      	movs	r5, r0
   12b4c:	000e      	movs	r6, r1
   12b4e:	0014      	movs	r4, r2
   12b50:	2b00      	cmp	r3, #0
   12b52:	d008      	beq.n	12b66 <__pow5mult+0x22>
   12b54:	4922      	ldr	r1, [pc, #136]	; (12be0 <__pow5mult+0x9c>)
   12b56:	3b01      	subs	r3, #1
   12b58:	009a      	lsls	r2, r3, #2
   12b5a:	5852      	ldr	r2, [r2, r1]
   12b5c:	2300      	movs	r3, #0
   12b5e:	0031      	movs	r1, r6
   12b60:	f7ff fed2 	bl	12908 <__multadd>
   12b64:	0006      	movs	r6, r0
   12b66:	10a3      	asrs	r3, r4, #2
   12b68:	9301      	str	r3, [sp, #4]
   12b6a:	d036      	beq.n	12bda <__pow5mult+0x96>
   12b6c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   12b6e:	2c00      	cmp	r4, #0
   12b70:	d107      	bne.n	12b82 <__pow5mult+0x3e>
   12b72:	2010      	movs	r0, #16
   12b74:	f7fd fe28 	bl	107c8 <malloc>
   12b78:	6268      	str	r0, [r5, #36]	; 0x24
   12b7a:	6044      	str	r4, [r0, #4]
   12b7c:	6084      	str	r4, [r0, #8]
   12b7e:	6004      	str	r4, [r0, #0]
   12b80:	60c4      	str	r4, [r0, #12]
   12b82:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   12b84:	68bc      	ldr	r4, [r7, #8]
   12b86:	2c00      	cmp	r4, #0
   12b88:	d107      	bne.n	12b9a <__pow5mult+0x56>
   12b8a:	4916      	ldr	r1, [pc, #88]	; (12be4 <__pow5mult+0xa0>)
   12b8c:	0028      	movs	r0, r5
   12b8e:	f7ff ff40 	bl	12a12 <__i2b>
   12b92:	2300      	movs	r3, #0
   12b94:	0004      	movs	r4, r0
   12b96:	60b8      	str	r0, [r7, #8]
   12b98:	6003      	str	r3, [r0, #0]
   12b9a:	2201      	movs	r2, #1
   12b9c:	9b01      	ldr	r3, [sp, #4]
   12b9e:	4213      	tst	r3, r2
   12ba0:	d00a      	beq.n	12bb8 <__pow5mult+0x74>
   12ba2:	0031      	movs	r1, r6
   12ba4:	0022      	movs	r2, r4
   12ba6:	0028      	movs	r0, r5
   12ba8:	f7ff ff3c 	bl	12a24 <__multiply>
   12bac:	0007      	movs	r7, r0
   12bae:	0031      	movs	r1, r6
   12bb0:	0028      	movs	r0, r5
   12bb2:	f7ff fe90 	bl	128d6 <_Bfree>
   12bb6:	003e      	movs	r6, r7
   12bb8:	9b01      	ldr	r3, [sp, #4]
   12bba:	105b      	asrs	r3, r3, #1
   12bbc:	9301      	str	r3, [sp, #4]
   12bbe:	d00c      	beq.n	12bda <__pow5mult+0x96>
   12bc0:	6820      	ldr	r0, [r4, #0]
   12bc2:	2800      	cmp	r0, #0
   12bc4:	d107      	bne.n	12bd6 <__pow5mult+0x92>
   12bc6:	0022      	movs	r2, r4
   12bc8:	0021      	movs	r1, r4
   12bca:	0028      	movs	r0, r5
   12bcc:	f7ff ff2a 	bl	12a24 <__multiply>
   12bd0:	2300      	movs	r3, #0
   12bd2:	6020      	str	r0, [r4, #0]
   12bd4:	6003      	str	r3, [r0, #0]
   12bd6:	0004      	movs	r4, r0
   12bd8:	e7df      	b.n	12b9a <__pow5mult+0x56>
   12bda:	0030      	movs	r0, r6
   12bdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12bde:	46c0      	nop			; (mov r8, r8)
   12be0:	00014438 	.word	0x00014438
   12be4:	00000271 	.word	0x00000271

00012be8 <__lshift>:
   12be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bea:	000d      	movs	r5, r1
   12bec:	0017      	movs	r7, r2
   12bee:	692b      	ldr	r3, [r5, #16]
   12bf0:	1154      	asrs	r4, r2, #5
   12bf2:	b085      	sub	sp, #20
   12bf4:	18e3      	adds	r3, r4, r3
   12bf6:	9302      	str	r3, [sp, #8]
   12bf8:	3301      	adds	r3, #1
   12bfa:	9301      	str	r3, [sp, #4]
   12bfc:	6849      	ldr	r1, [r1, #4]
   12bfe:	68ab      	ldr	r3, [r5, #8]
   12c00:	9003      	str	r0, [sp, #12]
   12c02:	9a01      	ldr	r2, [sp, #4]
   12c04:	4293      	cmp	r3, r2
   12c06:	db34      	blt.n	12c72 <__lshift+0x8a>
   12c08:	9803      	ldr	r0, [sp, #12]
   12c0a:	f7ff fe2c 	bl	12866 <_Balloc>
   12c0e:	2300      	movs	r3, #0
   12c10:	0002      	movs	r2, r0
   12c12:	0006      	movs	r6, r0
   12c14:	0019      	movs	r1, r3
   12c16:	3214      	adds	r2, #20
   12c18:	42a3      	cmp	r3, r4
   12c1a:	db2d      	blt.n	12c78 <__lshift+0x90>
   12c1c:	43e3      	mvns	r3, r4
   12c1e:	17db      	asrs	r3, r3, #31
   12c20:	401c      	ands	r4, r3
   12c22:	002b      	movs	r3, r5
   12c24:	211f      	movs	r1, #31
   12c26:	00a4      	lsls	r4, r4, #2
   12c28:	1914      	adds	r4, r2, r4
   12c2a:	692a      	ldr	r2, [r5, #16]
   12c2c:	3314      	adds	r3, #20
   12c2e:	0092      	lsls	r2, r2, #2
   12c30:	189a      	adds	r2, r3, r2
   12c32:	400f      	ands	r7, r1
   12c34:	d024      	beq.n	12c80 <__lshift+0x98>
   12c36:	3101      	adds	r1, #1
   12c38:	1bc9      	subs	r1, r1, r7
   12c3a:	468c      	mov	ip, r1
   12c3c:	2100      	movs	r1, #0
   12c3e:	6818      	ldr	r0, [r3, #0]
   12c40:	40b8      	lsls	r0, r7
   12c42:	4301      	orrs	r1, r0
   12c44:	4660      	mov	r0, ip
   12c46:	6021      	str	r1, [r4, #0]
   12c48:	cb02      	ldmia	r3!, {r1}
   12c4a:	3404      	adds	r4, #4
   12c4c:	40c1      	lsrs	r1, r0
   12c4e:	429a      	cmp	r2, r3
   12c50:	d8f5      	bhi.n	12c3e <__lshift+0x56>
   12c52:	6021      	str	r1, [r4, #0]
   12c54:	2900      	cmp	r1, #0
   12c56:	d002      	beq.n	12c5e <__lshift+0x76>
   12c58:	9b02      	ldr	r3, [sp, #8]
   12c5a:	3302      	adds	r3, #2
   12c5c:	9301      	str	r3, [sp, #4]
   12c5e:	9b01      	ldr	r3, [sp, #4]
   12c60:	9803      	ldr	r0, [sp, #12]
   12c62:	3b01      	subs	r3, #1
   12c64:	6133      	str	r3, [r6, #16]
   12c66:	0029      	movs	r1, r5
   12c68:	f7ff fe35 	bl	128d6 <_Bfree>
   12c6c:	0030      	movs	r0, r6
   12c6e:	b005      	add	sp, #20
   12c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c72:	3101      	adds	r1, #1
   12c74:	005b      	lsls	r3, r3, #1
   12c76:	e7c4      	b.n	12c02 <__lshift+0x1a>
   12c78:	0098      	lsls	r0, r3, #2
   12c7a:	5011      	str	r1, [r2, r0]
   12c7c:	3301      	adds	r3, #1
   12c7e:	e7cb      	b.n	12c18 <__lshift+0x30>
   12c80:	cb02      	ldmia	r3!, {r1}
   12c82:	c402      	stmia	r4!, {r1}
   12c84:	429a      	cmp	r2, r3
   12c86:	d8fb      	bhi.n	12c80 <__lshift+0x98>
   12c88:	e7e9      	b.n	12c5e <__lshift+0x76>

00012c8a <__mcmp>:
   12c8a:	690a      	ldr	r2, [r1, #16]
   12c8c:	6903      	ldr	r3, [r0, #16]
   12c8e:	b530      	push	{r4, r5, lr}
   12c90:	1a9b      	subs	r3, r3, r2
   12c92:	d10e      	bne.n	12cb2 <__mcmp+0x28>
   12c94:	0092      	lsls	r2, r2, #2
   12c96:	3014      	adds	r0, #20
   12c98:	3114      	adds	r1, #20
   12c9a:	1884      	adds	r4, r0, r2
   12c9c:	1889      	adds	r1, r1, r2
   12c9e:	3c04      	subs	r4, #4
   12ca0:	3904      	subs	r1, #4
   12ca2:	6822      	ldr	r2, [r4, #0]
   12ca4:	680d      	ldr	r5, [r1, #0]
   12ca6:	42aa      	cmp	r2, r5
   12ca8:	d005      	beq.n	12cb6 <__mcmp+0x2c>
   12caa:	42aa      	cmp	r2, r5
   12cac:	4192      	sbcs	r2, r2
   12cae:	2301      	movs	r3, #1
   12cb0:	4313      	orrs	r3, r2
   12cb2:	0018      	movs	r0, r3
   12cb4:	bd30      	pop	{r4, r5, pc}
   12cb6:	42a0      	cmp	r0, r4
   12cb8:	d3f1      	bcc.n	12c9e <__mcmp+0x14>
   12cba:	e7fa      	b.n	12cb2 <__mcmp+0x28>

00012cbc <__mdiff>:
   12cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12cbe:	000d      	movs	r5, r1
   12cc0:	b085      	sub	sp, #20
   12cc2:	0007      	movs	r7, r0
   12cc4:	0011      	movs	r1, r2
   12cc6:	0028      	movs	r0, r5
   12cc8:	0014      	movs	r4, r2
   12cca:	f7ff ffde 	bl	12c8a <__mcmp>
   12cce:	1e06      	subs	r6, r0, #0
   12cd0:	d108      	bne.n	12ce4 <__mdiff+0x28>
   12cd2:	0001      	movs	r1, r0
   12cd4:	0038      	movs	r0, r7
   12cd6:	f7ff fdc6 	bl	12866 <_Balloc>
   12cda:	2301      	movs	r3, #1
   12cdc:	6146      	str	r6, [r0, #20]
   12cde:	6103      	str	r3, [r0, #16]
   12ce0:	b005      	add	sp, #20
   12ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ce4:	2301      	movs	r3, #1
   12ce6:	9301      	str	r3, [sp, #4]
   12ce8:	2800      	cmp	r0, #0
   12cea:	db04      	blt.n	12cf6 <__mdiff+0x3a>
   12cec:	0023      	movs	r3, r4
   12cee:	002c      	movs	r4, r5
   12cf0:	001d      	movs	r5, r3
   12cf2:	2300      	movs	r3, #0
   12cf4:	9301      	str	r3, [sp, #4]
   12cf6:	6861      	ldr	r1, [r4, #4]
   12cf8:	0038      	movs	r0, r7
   12cfa:	f7ff fdb4 	bl	12866 <_Balloc>
   12cfe:	002f      	movs	r7, r5
   12d00:	2200      	movs	r2, #0
   12d02:	9b01      	ldr	r3, [sp, #4]
   12d04:	6926      	ldr	r6, [r4, #16]
   12d06:	60c3      	str	r3, [r0, #12]
   12d08:	3414      	adds	r4, #20
   12d0a:	00b3      	lsls	r3, r6, #2
   12d0c:	18e3      	adds	r3, r4, r3
   12d0e:	9302      	str	r3, [sp, #8]
   12d10:	692b      	ldr	r3, [r5, #16]
   12d12:	3714      	adds	r7, #20
   12d14:	009b      	lsls	r3, r3, #2
   12d16:	18fb      	adds	r3, r7, r3
   12d18:	9303      	str	r3, [sp, #12]
   12d1a:	0003      	movs	r3, r0
   12d1c:	4694      	mov	ip, r2
   12d1e:	3314      	adds	r3, #20
   12d20:	cc20      	ldmia	r4!, {r5}
   12d22:	cf04      	ldmia	r7!, {r2}
   12d24:	9201      	str	r2, [sp, #4]
   12d26:	b2aa      	uxth	r2, r5
   12d28:	4494      	add	ip, r2
   12d2a:	466a      	mov	r2, sp
   12d2c:	4661      	mov	r1, ip
   12d2e:	8892      	ldrh	r2, [r2, #4]
   12d30:	0c2d      	lsrs	r5, r5, #16
   12d32:	1a8a      	subs	r2, r1, r2
   12d34:	9901      	ldr	r1, [sp, #4]
   12d36:	0c09      	lsrs	r1, r1, #16
   12d38:	1a69      	subs	r1, r5, r1
   12d3a:	1415      	asrs	r5, r2, #16
   12d3c:	1949      	adds	r1, r1, r5
   12d3e:	140d      	asrs	r5, r1, #16
   12d40:	b292      	uxth	r2, r2
   12d42:	0409      	lsls	r1, r1, #16
   12d44:	430a      	orrs	r2, r1
   12d46:	601a      	str	r2, [r3, #0]
   12d48:	9a03      	ldr	r2, [sp, #12]
   12d4a:	46ac      	mov	ip, r5
   12d4c:	3304      	adds	r3, #4
   12d4e:	42ba      	cmp	r2, r7
   12d50:	d8e6      	bhi.n	12d20 <__mdiff+0x64>
   12d52:	9902      	ldr	r1, [sp, #8]
   12d54:	001a      	movs	r2, r3
   12d56:	428c      	cmp	r4, r1
   12d58:	d305      	bcc.n	12d66 <__mdiff+0xaa>
   12d5a:	3a04      	subs	r2, #4
   12d5c:	6813      	ldr	r3, [r2, #0]
   12d5e:	2b00      	cmp	r3, #0
   12d60:	d00e      	beq.n	12d80 <__mdiff+0xc4>
   12d62:	6106      	str	r6, [r0, #16]
   12d64:	e7bc      	b.n	12ce0 <__mdiff+0x24>
   12d66:	cc04      	ldmia	r4!, {r2}
   12d68:	b291      	uxth	r1, r2
   12d6a:	4461      	add	r1, ip
   12d6c:	140d      	asrs	r5, r1, #16
   12d6e:	0c12      	lsrs	r2, r2, #16
   12d70:	1952      	adds	r2, r2, r5
   12d72:	1415      	asrs	r5, r2, #16
   12d74:	b289      	uxth	r1, r1
   12d76:	0412      	lsls	r2, r2, #16
   12d78:	430a      	orrs	r2, r1
   12d7a:	46ac      	mov	ip, r5
   12d7c:	c304      	stmia	r3!, {r2}
   12d7e:	e7e8      	b.n	12d52 <__mdiff+0x96>
   12d80:	3e01      	subs	r6, #1
   12d82:	e7ea      	b.n	12d5a <__mdiff+0x9e>

00012d84 <__d2b>:
   12d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12d86:	001d      	movs	r5, r3
   12d88:	2101      	movs	r1, #1
   12d8a:	9f08      	ldr	r7, [sp, #32]
   12d8c:	0014      	movs	r4, r2
   12d8e:	f7ff fd6a 	bl	12866 <_Balloc>
   12d92:	032b      	lsls	r3, r5, #12
   12d94:	006d      	lsls	r5, r5, #1
   12d96:	0006      	movs	r6, r0
   12d98:	0b1b      	lsrs	r3, r3, #12
   12d9a:	0d6d      	lsrs	r5, r5, #21
   12d9c:	d124      	bne.n	12de8 <__d2b+0x64>
   12d9e:	9301      	str	r3, [sp, #4]
   12da0:	2c00      	cmp	r4, #0
   12da2:	d027      	beq.n	12df4 <__d2b+0x70>
   12da4:	4668      	mov	r0, sp
   12da6:	9400      	str	r4, [sp, #0]
   12da8:	f7ff fe04 	bl	129b4 <__lo0bits>
   12dac:	9c00      	ldr	r4, [sp, #0]
   12dae:	2800      	cmp	r0, #0
   12db0:	d01e      	beq.n	12df0 <__d2b+0x6c>
   12db2:	9b01      	ldr	r3, [sp, #4]
   12db4:	2120      	movs	r1, #32
   12db6:	001a      	movs	r2, r3
   12db8:	1a09      	subs	r1, r1, r0
   12dba:	408a      	lsls	r2, r1
   12dbc:	40c3      	lsrs	r3, r0
   12dbe:	4322      	orrs	r2, r4
   12dc0:	6172      	str	r2, [r6, #20]
   12dc2:	9301      	str	r3, [sp, #4]
   12dc4:	9c01      	ldr	r4, [sp, #4]
   12dc6:	61b4      	str	r4, [r6, #24]
   12dc8:	1e63      	subs	r3, r4, #1
   12dca:	419c      	sbcs	r4, r3
   12dcc:	3401      	adds	r4, #1
   12dce:	6134      	str	r4, [r6, #16]
   12dd0:	2d00      	cmp	r5, #0
   12dd2:	d018      	beq.n	12e06 <__d2b+0x82>
   12dd4:	4b12      	ldr	r3, [pc, #72]	; (12e20 <__d2b+0x9c>)
   12dd6:	18ed      	adds	r5, r5, r3
   12dd8:	2335      	movs	r3, #53	; 0x35
   12dda:	182d      	adds	r5, r5, r0
   12ddc:	603d      	str	r5, [r7, #0]
   12dde:	1a18      	subs	r0, r3, r0
   12de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12de2:	6018      	str	r0, [r3, #0]
   12de4:	0030      	movs	r0, r6
   12de6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12de8:	2280      	movs	r2, #128	; 0x80
   12dea:	0352      	lsls	r2, r2, #13
   12dec:	4313      	orrs	r3, r2
   12dee:	e7d6      	b.n	12d9e <__d2b+0x1a>
   12df0:	6174      	str	r4, [r6, #20]
   12df2:	e7e7      	b.n	12dc4 <__d2b+0x40>
   12df4:	a801      	add	r0, sp, #4
   12df6:	f7ff fddd 	bl	129b4 <__lo0bits>
   12dfa:	2401      	movs	r4, #1
   12dfc:	9b01      	ldr	r3, [sp, #4]
   12dfe:	6134      	str	r4, [r6, #16]
   12e00:	6173      	str	r3, [r6, #20]
   12e02:	3020      	adds	r0, #32
   12e04:	e7e4      	b.n	12dd0 <__d2b+0x4c>
   12e06:	4b07      	ldr	r3, [pc, #28]	; (12e24 <__d2b+0xa0>)
   12e08:	18c0      	adds	r0, r0, r3
   12e0a:	4b07      	ldr	r3, [pc, #28]	; (12e28 <__d2b+0xa4>)
   12e0c:	6038      	str	r0, [r7, #0]
   12e0e:	18e3      	adds	r3, r4, r3
   12e10:	009b      	lsls	r3, r3, #2
   12e12:	18f3      	adds	r3, r6, r3
   12e14:	6958      	ldr	r0, [r3, #20]
   12e16:	f7ff fdb3 	bl	12980 <__hi0bits>
   12e1a:	0164      	lsls	r4, r4, #5
   12e1c:	1a20      	subs	r0, r4, r0
   12e1e:	e7df      	b.n	12de0 <__d2b+0x5c>
   12e20:	fffffbcd 	.word	0xfffffbcd
   12e24:	fffffbce 	.word	0xfffffbce
   12e28:	3fffffff 	.word	0x3fffffff

00012e2c <_calloc_r>:
   12e2c:	434a      	muls	r2, r1
   12e2e:	b570      	push	{r4, r5, r6, lr}
   12e30:	0011      	movs	r1, r2
   12e32:	0014      	movs	r4, r2
   12e34:	f7fd fd58 	bl	108e8 <_malloc_r>
   12e38:	1e05      	subs	r5, r0, #0
   12e3a:	d003      	beq.n	12e44 <_calloc_r+0x18>
   12e3c:	0022      	movs	r2, r4
   12e3e:	2100      	movs	r1, #0
   12e40:	f7fd fd00 	bl	10844 <memset>
   12e44:	0028      	movs	r0, r5
   12e46:	bd70      	pop	{r4, r5, r6, pc}

00012e48 <_realloc_r>:
   12e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e4a:	0007      	movs	r7, r0
   12e4c:	000d      	movs	r5, r1
   12e4e:	0016      	movs	r6, r2
   12e50:	2900      	cmp	r1, #0
   12e52:	d105      	bne.n	12e60 <_realloc_r+0x18>
   12e54:	0011      	movs	r1, r2
   12e56:	f7fd fd47 	bl	108e8 <_malloc_r>
   12e5a:	0004      	movs	r4, r0
   12e5c:	0020      	movs	r0, r4
   12e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e60:	2a00      	cmp	r2, #0
   12e62:	d103      	bne.n	12e6c <_realloc_r+0x24>
   12e64:	f7fd fcf6 	bl	10854 <_free_r>
   12e68:	0034      	movs	r4, r6
   12e6a:	e7f7      	b.n	12e5c <_realloc_r+0x14>
   12e6c:	f000 f906 	bl	1307c <_malloc_usable_size_r>
   12e70:	002c      	movs	r4, r5
   12e72:	4286      	cmp	r6, r0
   12e74:	d9f2      	bls.n	12e5c <_realloc_r+0x14>
   12e76:	0031      	movs	r1, r6
   12e78:	0038      	movs	r0, r7
   12e7a:	f7fd fd35 	bl	108e8 <_malloc_r>
   12e7e:	1e04      	subs	r4, r0, #0
   12e80:	d0ec      	beq.n	12e5c <_realloc_r+0x14>
   12e82:	0029      	movs	r1, r5
   12e84:	0032      	movs	r2, r6
   12e86:	f7fd fcd4 	bl	10832 <memcpy>
   12e8a:	0029      	movs	r1, r5
   12e8c:	0038      	movs	r0, r7
   12e8e:	f7fd fce1 	bl	10854 <_free_r>
   12e92:	e7e3      	b.n	12e5c <_realloc_r+0x14>

00012e94 <_raise_r>:
   12e94:	b570      	push	{r4, r5, r6, lr}
   12e96:	0004      	movs	r4, r0
   12e98:	000d      	movs	r5, r1
   12e9a:	291f      	cmp	r1, #31
   12e9c:	d904      	bls.n	12ea8 <_raise_r+0x14>
   12e9e:	2316      	movs	r3, #22
   12ea0:	6003      	str	r3, [r0, #0]
   12ea2:	2001      	movs	r0, #1
   12ea4:	4240      	negs	r0, r0
   12ea6:	bd70      	pop	{r4, r5, r6, pc}
   12ea8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   12eaa:	2b00      	cmp	r3, #0
   12eac:	d004      	beq.n	12eb8 <_raise_r+0x24>
   12eae:	008a      	lsls	r2, r1, #2
   12eb0:	189b      	adds	r3, r3, r2
   12eb2:	681a      	ldr	r2, [r3, #0]
   12eb4:	2a00      	cmp	r2, #0
   12eb6:	d108      	bne.n	12eca <_raise_r+0x36>
   12eb8:	0020      	movs	r0, r4
   12eba:	f000 f831 	bl	12f20 <_getpid_r>
   12ebe:	002a      	movs	r2, r5
   12ec0:	0001      	movs	r1, r0
   12ec2:	0020      	movs	r0, r4
   12ec4:	f000 f81a 	bl	12efc <_kill_r>
   12ec8:	e7ed      	b.n	12ea6 <_raise_r+0x12>
   12eca:	2000      	movs	r0, #0
   12ecc:	2a01      	cmp	r2, #1
   12ece:	d0ea      	beq.n	12ea6 <_raise_r+0x12>
   12ed0:	1c51      	adds	r1, r2, #1
   12ed2:	d103      	bne.n	12edc <_raise_r+0x48>
   12ed4:	2316      	movs	r3, #22
   12ed6:	3001      	adds	r0, #1
   12ed8:	6023      	str	r3, [r4, #0]
   12eda:	e7e4      	b.n	12ea6 <_raise_r+0x12>
   12edc:	2400      	movs	r4, #0
   12ede:	0028      	movs	r0, r5
   12ee0:	601c      	str	r4, [r3, #0]
   12ee2:	4790      	blx	r2
   12ee4:	0020      	movs	r0, r4
   12ee6:	e7de      	b.n	12ea6 <_raise_r+0x12>

00012ee8 <raise>:
   12ee8:	b510      	push	{r4, lr}
   12eea:	4b03      	ldr	r3, [pc, #12]	; (12ef8 <raise+0x10>)
   12eec:	0001      	movs	r1, r0
   12eee:	6818      	ldr	r0, [r3, #0]
   12ef0:	f7ff ffd0 	bl	12e94 <_raise_r>
   12ef4:	bd10      	pop	{r4, pc}
   12ef6:	46c0      	nop			; (mov r8, r8)
   12ef8:	200000a4 	.word	0x200000a4

00012efc <_kill_r>:
   12efc:	2300      	movs	r3, #0
   12efe:	b570      	push	{r4, r5, r6, lr}
   12f00:	4c06      	ldr	r4, [pc, #24]	; (12f1c <_kill_r+0x20>)
   12f02:	0005      	movs	r5, r0
   12f04:	0008      	movs	r0, r1
   12f06:	0011      	movs	r1, r2
   12f08:	6023      	str	r3, [r4, #0]
   12f0a:	f000 f93f 	bl	1318c <_kill>
   12f0e:	1c43      	adds	r3, r0, #1
   12f10:	d103      	bne.n	12f1a <_kill_r+0x1e>
   12f12:	6823      	ldr	r3, [r4, #0]
   12f14:	2b00      	cmp	r3, #0
   12f16:	d000      	beq.n	12f1a <_kill_r+0x1e>
   12f18:	602b      	str	r3, [r5, #0]
   12f1a:	bd70      	pop	{r4, r5, r6, pc}
   12f1c:	20000f84 	.word	0x20000f84

00012f20 <_getpid_r>:
   12f20:	b510      	push	{r4, lr}
   12f22:	f000 f923 	bl	1316c <_getpid>
   12f26:	bd10      	pop	{r4, pc}

00012f28 <__sread>:
   12f28:	b570      	push	{r4, r5, r6, lr}
   12f2a:	000c      	movs	r4, r1
   12f2c:	250e      	movs	r5, #14
   12f2e:	5f49      	ldrsh	r1, [r1, r5]
   12f30:	f000 f8ac 	bl	1308c <_read_r>
   12f34:	2800      	cmp	r0, #0
   12f36:	db03      	blt.n	12f40 <__sread+0x18>
   12f38:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12f3a:	181b      	adds	r3, r3, r0
   12f3c:	6563      	str	r3, [r4, #84]	; 0x54
   12f3e:	bd70      	pop	{r4, r5, r6, pc}
   12f40:	89a3      	ldrh	r3, [r4, #12]
   12f42:	4a02      	ldr	r2, [pc, #8]	; (12f4c <__sread+0x24>)
   12f44:	4013      	ands	r3, r2
   12f46:	81a3      	strh	r3, [r4, #12]
   12f48:	e7f9      	b.n	12f3e <__sread+0x16>
   12f4a:	46c0      	nop			; (mov r8, r8)
   12f4c:	ffffefff 	.word	0xffffefff

00012f50 <__swrite>:
   12f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f52:	001f      	movs	r7, r3
   12f54:	898b      	ldrh	r3, [r1, #12]
   12f56:	0005      	movs	r5, r0
   12f58:	000c      	movs	r4, r1
   12f5a:	0016      	movs	r6, r2
   12f5c:	05db      	lsls	r3, r3, #23
   12f5e:	d505      	bpl.n	12f6c <__swrite+0x1c>
   12f60:	230e      	movs	r3, #14
   12f62:	5ec9      	ldrsh	r1, [r1, r3]
   12f64:	2200      	movs	r2, #0
   12f66:	2302      	movs	r3, #2
   12f68:	f000 f874 	bl	13054 <_lseek_r>
   12f6c:	89a3      	ldrh	r3, [r4, #12]
   12f6e:	4a05      	ldr	r2, [pc, #20]	; (12f84 <__swrite+0x34>)
   12f70:	0028      	movs	r0, r5
   12f72:	4013      	ands	r3, r2
   12f74:	81a3      	strh	r3, [r4, #12]
   12f76:	0032      	movs	r2, r6
   12f78:	230e      	movs	r3, #14
   12f7a:	5ee1      	ldrsh	r1, [r4, r3]
   12f7c:	003b      	movs	r3, r7
   12f7e:	f000 f81f 	bl	12fc0 <_write_r>
   12f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f84:	ffffefff 	.word	0xffffefff

00012f88 <__sseek>:
   12f88:	b570      	push	{r4, r5, r6, lr}
   12f8a:	000c      	movs	r4, r1
   12f8c:	250e      	movs	r5, #14
   12f8e:	5f49      	ldrsh	r1, [r1, r5]
   12f90:	f000 f860 	bl	13054 <_lseek_r>
   12f94:	89a3      	ldrh	r3, [r4, #12]
   12f96:	1c42      	adds	r2, r0, #1
   12f98:	d103      	bne.n	12fa2 <__sseek+0x1a>
   12f9a:	4a05      	ldr	r2, [pc, #20]	; (12fb0 <__sseek+0x28>)
   12f9c:	4013      	ands	r3, r2
   12f9e:	81a3      	strh	r3, [r4, #12]
   12fa0:	bd70      	pop	{r4, r5, r6, pc}
   12fa2:	2280      	movs	r2, #128	; 0x80
   12fa4:	0152      	lsls	r2, r2, #5
   12fa6:	4313      	orrs	r3, r2
   12fa8:	81a3      	strh	r3, [r4, #12]
   12faa:	6560      	str	r0, [r4, #84]	; 0x54
   12fac:	e7f8      	b.n	12fa0 <__sseek+0x18>
   12fae:	46c0      	nop			; (mov r8, r8)
   12fb0:	ffffefff 	.word	0xffffefff

00012fb4 <__sclose>:
   12fb4:	b510      	push	{r4, lr}
   12fb6:	230e      	movs	r3, #14
   12fb8:	5ec9      	ldrsh	r1, [r1, r3]
   12fba:	f000 f815 	bl	12fe8 <_close_r>
   12fbe:	bd10      	pop	{r4, pc}

00012fc0 <_write_r>:
   12fc0:	b570      	push	{r4, r5, r6, lr}
   12fc2:	0005      	movs	r5, r0
   12fc4:	0008      	movs	r0, r1
   12fc6:	0011      	movs	r1, r2
   12fc8:	2200      	movs	r2, #0
   12fca:	4c06      	ldr	r4, [pc, #24]	; (12fe4 <_write_r+0x24>)
   12fcc:	6022      	str	r2, [r4, #0]
   12fce:	001a      	movs	r2, r3
   12fd0:	f000 f902 	bl	131d8 <_write>
   12fd4:	1c43      	adds	r3, r0, #1
   12fd6:	d103      	bne.n	12fe0 <_write_r+0x20>
   12fd8:	6823      	ldr	r3, [r4, #0]
   12fda:	2b00      	cmp	r3, #0
   12fdc:	d000      	beq.n	12fe0 <_write_r+0x20>
   12fde:	602b      	str	r3, [r5, #0]
   12fe0:	bd70      	pop	{r4, r5, r6, pc}
   12fe2:	46c0      	nop			; (mov r8, r8)
   12fe4:	20000f84 	.word	0x20000f84

00012fe8 <_close_r>:
   12fe8:	2300      	movs	r3, #0
   12fea:	b570      	push	{r4, r5, r6, lr}
   12fec:	4c06      	ldr	r4, [pc, #24]	; (13008 <_close_r+0x20>)
   12fee:	0005      	movs	r5, r0
   12ff0:	0008      	movs	r0, r1
   12ff2:	6023      	str	r3, [r4, #0]
   12ff4:	f000 f8aa 	bl	1314c <_close>
   12ff8:	1c43      	adds	r3, r0, #1
   12ffa:	d103      	bne.n	13004 <_close_r+0x1c>
   12ffc:	6823      	ldr	r3, [r4, #0]
   12ffe:	2b00      	cmp	r3, #0
   13000:	d000      	beq.n	13004 <_close_r+0x1c>
   13002:	602b      	str	r3, [r5, #0]
   13004:	bd70      	pop	{r4, r5, r6, pc}
   13006:	46c0      	nop			; (mov r8, r8)
   13008:	20000f84 	.word	0x20000f84

0001300c <_fstat_r>:
   1300c:	2300      	movs	r3, #0
   1300e:	b570      	push	{r4, r5, r6, lr}
   13010:	4c06      	ldr	r4, [pc, #24]	; (1302c <_fstat_r+0x20>)
   13012:	0005      	movs	r5, r0
   13014:	0008      	movs	r0, r1
   13016:	0011      	movs	r1, r2
   13018:	6023      	str	r3, [r4, #0]
   1301a:	f000 f89f 	bl	1315c <_fstat>
   1301e:	1c43      	adds	r3, r0, #1
   13020:	d103      	bne.n	1302a <_fstat_r+0x1e>
   13022:	6823      	ldr	r3, [r4, #0]
   13024:	2b00      	cmp	r3, #0
   13026:	d000      	beq.n	1302a <_fstat_r+0x1e>
   13028:	602b      	str	r3, [r5, #0]
   1302a:	bd70      	pop	{r4, r5, r6, pc}
   1302c:	20000f84 	.word	0x20000f84

00013030 <_isatty_r>:
   13030:	2300      	movs	r3, #0
   13032:	b570      	push	{r4, r5, r6, lr}
   13034:	4c06      	ldr	r4, [pc, #24]	; (13050 <_isatty_r+0x20>)
   13036:	0005      	movs	r5, r0
   13038:	0008      	movs	r0, r1
   1303a:	6023      	str	r3, [r4, #0]
   1303c:	f000 f89e 	bl	1317c <_isatty>
   13040:	1c43      	adds	r3, r0, #1
   13042:	d103      	bne.n	1304c <_isatty_r+0x1c>
   13044:	6823      	ldr	r3, [r4, #0]
   13046:	2b00      	cmp	r3, #0
   13048:	d000      	beq.n	1304c <_isatty_r+0x1c>
   1304a:	602b      	str	r3, [r5, #0]
   1304c:	bd70      	pop	{r4, r5, r6, pc}
   1304e:	46c0      	nop			; (mov r8, r8)
   13050:	20000f84 	.word	0x20000f84

00013054 <_lseek_r>:
   13054:	b570      	push	{r4, r5, r6, lr}
   13056:	0005      	movs	r5, r0
   13058:	0008      	movs	r0, r1
   1305a:	0011      	movs	r1, r2
   1305c:	2200      	movs	r2, #0
   1305e:	4c06      	ldr	r4, [pc, #24]	; (13078 <_lseek_r+0x24>)
   13060:	6022      	str	r2, [r4, #0]
   13062:	001a      	movs	r2, r3
   13064:	f000 f89a 	bl	1319c <_lseek>
   13068:	1c43      	adds	r3, r0, #1
   1306a:	d103      	bne.n	13074 <_lseek_r+0x20>
   1306c:	6823      	ldr	r3, [r4, #0]
   1306e:	2b00      	cmp	r3, #0
   13070:	d000      	beq.n	13074 <_lseek_r+0x20>
   13072:	602b      	str	r3, [r5, #0]
   13074:	bd70      	pop	{r4, r5, r6, pc}
   13076:	46c0      	nop			; (mov r8, r8)
   13078:	20000f84 	.word	0x20000f84

0001307c <_malloc_usable_size_r>:
   1307c:	1f0b      	subs	r3, r1, #4
   1307e:	681b      	ldr	r3, [r3, #0]
   13080:	1f18      	subs	r0, r3, #4
   13082:	2b00      	cmp	r3, #0
   13084:	da01      	bge.n	1308a <_malloc_usable_size_r+0xe>
   13086:	580b      	ldr	r3, [r1, r0]
   13088:	18c0      	adds	r0, r0, r3
   1308a:	4770      	bx	lr

0001308c <_read_r>:
   1308c:	b570      	push	{r4, r5, r6, lr}
   1308e:	0005      	movs	r5, r0
   13090:	0008      	movs	r0, r1
   13092:	0011      	movs	r1, r2
   13094:	2200      	movs	r2, #0
   13096:	4c06      	ldr	r4, [pc, #24]	; (130b0 <_read_r+0x24>)
   13098:	6022      	str	r2, [r4, #0]
   1309a:	001a      	movs	r2, r3
   1309c:	f000 f886 	bl	131ac <_read>
   130a0:	1c43      	adds	r3, r0, #1
   130a2:	d103      	bne.n	130ac <_read_r+0x20>
   130a4:	6823      	ldr	r3, [r4, #0]
   130a6:	2b00      	cmp	r3, #0
   130a8:	d000      	beq.n	130ac <_read_r+0x20>
   130aa:	602b      	str	r3, [r5, #0]
   130ac:	bd70      	pop	{r4, r5, r6, pc}
   130ae:	46c0      	nop			; (mov r8, r8)
   130b0:	20000f84 	.word	0x20000f84

000130b4 <__gnu_thumb1_case_uqi>:
   130b4:	b402      	push	{r1}
   130b6:	4671      	mov	r1, lr
   130b8:	0849      	lsrs	r1, r1, #1
   130ba:	0049      	lsls	r1, r1, #1
   130bc:	5c09      	ldrb	r1, [r1, r0]
   130be:	0049      	lsls	r1, r1, #1
   130c0:	448e      	add	lr, r1
   130c2:	bc02      	pop	{r1}
   130c4:	4770      	bx	lr
   130c6:	46c0      	nop			; (mov r8, r8)

000130c8 <__aeabi_i2d>:
   130c8:	b570      	push	{r4, r5, r6, lr}
   130ca:	2800      	cmp	r0, #0
   130cc:	d030      	beq.n	13130 <__aeabi_i2d+0x68>
   130ce:	17c3      	asrs	r3, r0, #31
   130d0:	18c4      	adds	r4, r0, r3
   130d2:	405c      	eors	r4, r3
   130d4:	0fc5      	lsrs	r5, r0, #31
   130d6:	0020      	movs	r0, r4
   130d8:	f7fd faf8 	bl	106cc <__clzsi2>
   130dc:	4b17      	ldr	r3, [pc, #92]	; (1313c <__aeabi_i2d+0x74>)
   130de:	4a18      	ldr	r2, [pc, #96]	; (13140 <__aeabi_i2d+0x78>)
   130e0:	1a1b      	subs	r3, r3, r0
   130e2:	1ad2      	subs	r2, r2, r3
   130e4:	2a1f      	cmp	r2, #31
   130e6:	dd18      	ble.n	1311a <__aeabi_i2d+0x52>
   130e8:	4a16      	ldr	r2, [pc, #88]	; (13144 <__aeabi_i2d+0x7c>)
   130ea:	1ad2      	subs	r2, r2, r3
   130ec:	4094      	lsls	r4, r2
   130ee:	2200      	movs	r2, #0
   130f0:	0324      	lsls	r4, r4, #12
   130f2:	055b      	lsls	r3, r3, #21
   130f4:	0b24      	lsrs	r4, r4, #12
   130f6:	0d5b      	lsrs	r3, r3, #21
   130f8:	2100      	movs	r1, #0
   130fa:	0010      	movs	r0, r2
   130fc:	0324      	lsls	r4, r4, #12
   130fe:	0d0a      	lsrs	r2, r1, #20
   13100:	0b24      	lsrs	r4, r4, #12
   13102:	0512      	lsls	r2, r2, #20
   13104:	4322      	orrs	r2, r4
   13106:	4c10      	ldr	r4, [pc, #64]	; (13148 <__aeabi_i2d+0x80>)
   13108:	051b      	lsls	r3, r3, #20
   1310a:	4022      	ands	r2, r4
   1310c:	4313      	orrs	r3, r2
   1310e:	005b      	lsls	r3, r3, #1
   13110:	07ed      	lsls	r5, r5, #31
   13112:	085b      	lsrs	r3, r3, #1
   13114:	432b      	orrs	r3, r5
   13116:	0019      	movs	r1, r3
   13118:	bd70      	pop	{r4, r5, r6, pc}
   1311a:	0021      	movs	r1, r4
   1311c:	4091      	lsls	r1, r2
   1311e:	000a      	movs	r2, r1
   13120:	210b      	movs	r1, #11
   13122:	1a08      	subs	r0, r1, r0
   13124:	40c4      	lsrs	r4, r0
   13126:	055b      	lsls	r3, r3, #21
   13128:	0324      	lsls	r4, r4, #12
   1312a:	0b24      	lsrs	r4, r4, #12
   1312c:	0d5b      	lsrs	r3, r3, #21
   1312e:	e7e3      	b.n	130f8 <__aeabi_i2d+0x30>
   13130:	2500      	movs	r5, #0
   13132:	2300      	movs	r3, #0
   13134:	2400      	movs	r4, #0
   13136:	2200      	movs	r2, #0
   13138:	e7de      	b.n	130f8 <__aeabi_i2d+0x30>
   1313a:	46c0      	nop			; (mov r8, r8)
   1313c:	0000041e 	.word	0x0000041e
   13140:	00000433 	.word	0x00000433
   13144:	00000413 	.word	0x00000413
   13148:	800fffff 	.word	0x800fffff

0001314c <_close>:
   1314c:	2258      	movs	r2, #88	; 0x58
   1314e:	2001      	movs	r0, #1
   13150:	4b01      	ldr	r3, [pc, #4]	; (13158 <_close+0xc>)
   13152:	4240      	negs	r0, r0
   13154:	601a      	str	r2, [r3, #0]
   13156:	4770      	bx	lr
   13158:	20000f84 	.word	0x20000f84

0001315c <_fstat>:
   1315c:	2258      	movs	r2, #88	; 0x58
   1315e:	2001      	movs	r0, #1
   13160:	4b01      	ldr	r3, [pc, #4]	; (13168 <_fstat+0xc>)
   13162:	4240      	negs	r0, r0
   13164:	601a      	str	r2, [r3, #0]
   13166:	4770      	bx	lr
   13168:	20000f84 	.word	0x20000f84

0001316c <_getpid>:
   1316c:	2258      	movs	r2, #88	; 0x58
   1316e:	2001      	movs	r0, #1
   13170:	4b01      	ldr	r3, [pc, #4]	; (13178 <_getpid+0xc>)
   13172:	4240      	negs	r0, r0
   13174:	601a      	str	r2, [r3, #0]
   13176:	4770      	bx	lr
   13178:	20000f84 	.word	0x20000f84

0001317c <_isatty>:
   1317c:	2258      	movs	r2, #88	; 0x58
   1317e:	4b02      	ldr	r3, [pc, #8]	; (13188 <_isatty+0xc>)
   13180:	2000      	movs	r0, #0
   13182:	601a      	str	r2, [r3, #0]
   13184:	4770      	bx	lr
   13186:	46c0      	nop			; (mov r8, r8)
   13188:	20000f84 	.word	0x20000f84

0001318c <_kill>:
   1318c:	2258      	movs	r2, #88	; 0x58
   1318e:	2001      	movs	r0, #1
   13190:	4b01      	ldr	r3, [pc, #4]	; (13198 <_kill+0xc>)
   13192:	4240      	negs	r0, r0
   13194:	601a      	str	r2, [r3, #0]
   13196:	4770      	bx	lr
   13198:	20000f84 	.word	0x20000f84

0001319c <_lseek>:
   1319c:	2258      	movs	r2, #88	; 0x58
   1319e:	2001      	movs	r0, #1
   131a0:	4b01      	ldr	r3, [pc, #4]	; (131a8 <_lseek+0xc>)
   131a2:	4240      	negs	r0, r0
   131a4:	601a      	str	r2, [r3, #0]
   131a6:	4770      	bx	lr
   131a8:	20000f84 	.word	0x20000f84

000131ac <_read>:
   131ac:	2258      	movs	r2, #88	; 0x58
   131ae:	2001      	movs	r0, #1
   131b0:	4b01      	ldr	r3, [pc, #4]	; (131b8 <_read+0xc>)
   131b2:	4240      	negs	r0, r0
   131b4:	601a      	str	r2, [r3, #0]
   131b6:	4770      	bx	lr
   131b8:	20000f84 	.word	0x20000f84

000131bc <_sbrk>:
   131bc:	4a04      	ldr	r2, [pc, #16]	; (131d0 <_sbrk+0x14>)
   131be:	6813      	ldr	r3, [r2, #0]
   131c0:	2b00      	cmp	r3, #0
   131c2:	d003      	beq.n	131cc <_sbrk+0x10>
   131c4:	1818      	adds	r0, r3, r0
   131c6:	6010      	str	r0, [r2, #0]
   131c8:	0018      	movs	r0, r3
   131ca:	4770      	bx	lr
   131cc:	4b01      	ldr	r3, [pc, #4]	; (131d4 <_sbrk+0x18>)
   131ce:	e7f9      	b.n	131c4 <_sbrk+0x8>
   131d0:	20000f80 	.word	0x20000f80
   131d4:	20000f88 	.word	0x20000f88

000131d8 <_write>:
   131d8:	2258      	movs	r2, #88	; 0x58
   131da:	2001      	movs	r0, #1
   131dc:	4b01      	ldr	r3, [pc, #4]	; (131e4 <_write+0xc>)
   131de:	4240      	negs	r0, r0
   131e0:	601a      	str	r2, [r3, #0]
   131e2:	4770      	bx	lr
   131e4:	20000f84 	.word	0x20000f84

000131e8 <_exit>:
   131e8:	e7fe      	b.n	131e8 <_exit>
   131ea:	46c0      	nop			; (mov r8, r8)

000131ec <_init>:
   131ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   131f2:	bc08      	pop	{r3}
   131f4:	469e      	mov	lr, r3
   131f6:	4770      	bx	lr

000131f8 <_fini>:
   131f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131fa:	46c0      	nop			; (mov r8, r8)
   131fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   131fe:	bc08      	pop	{r3}
   13200:	469e      	mov	lr, r3
   13202:	4770      	bx	lr
   13204:	64616f4c 	.word	0x64616f4c
   13208:	20676e69 	.word	0x20676e69
   1320c:	67616d69 	.word	0x67616d69
   13210:	00272065 	.word	0x00272065
   13214:	656c6946 	.word	0x656c6946
   13218:	616d2820 	.word	0x616d2820
   1321c:	29656279 	.word	0x29656279
   13220:	746f6e20 	.word	0x746f6e20
   13224:	756f6620 	.word	0x756f6620
   13228:	0000646e 	.word	0x0000646e
   1322c:	72617453 	.word	0x72617453
   13230:	61702074 	.word	0x61702074
   13234:	00657372 	.word	0x00657372
   13238:	656c6946 	.word	0x656c6946
   1323c:	7a697320 	.word	0x7a697320
   13240:	00203a65 	.word	0x00203a65
   13244:	67616d49 	.word	0x67616d49
   13248:	664f2065 	.word	0x664f2065
   1324c:	74657366 	.word	0x74657366
   13250:	0000203a 	.word	0x0000203a
   13254:	64616548 	.word	0x64616548
   13258:	73207265 	.word	0x73207265
   1325c:	3a657a69 	.word	0x3a657a69
   13260:	00000020 	.word	0x00000020
   13264:	20746942 	.word	0x20746942
   13268:	74706544 	.word	0x74706544
   1326c:	00203a68 	.word	0x00203a68
   13270:	67616d49 	.word	0x67616d49
   13274:	69732065 	.word	0x69732065
   13278:	203a657a 	.word	0x203a657a
   1327c:	00000000 	.word	0x00000000
   13280:	64616f4c 	.word	0x64616f4c
   13284:	69206465 	.word	0x69206465
   13288:	0000206e 	.word	0x0000206e
   1328c:	00736d20 	.word	0x00736d20
   13290:	20504d42 	.word	0x20504d42
   13294:	6d726f66 	.word	0x6d726f66
   13298:	6e207461 	.word	0x6e207461
   1329c:	7220746f 	.word	0x7220746f
   132a0:	676f6365 	.word	0x676f6365
   132a4:	657a696e 	.word	0x657a696e
   132a8:	726f2064 	.word	0x726f2064
   132ac:	20445320 	.word	0x20445320
   132b0:	20746f6e 	.word	0x20746f6e
   132b4:	6e756f6d 	.word	0x6e756f6d
   132b8:	00646574 	.word	0x00646574
   132bc:	4d646461 	.word	0x4d646461
   132c0:	2c65766f 	.word	0x2c65766f
   132c4:	616c7020 	.word	0x616c7020
   132c8:	20726579 	.word	0x20726579
   132cc:	0000203d 	.word	0x0000203d
   132d0:	73696874 	.word	0x73696874
   132d4:	67696d20 	.word	0x67696d20
   132d8:	62207468 	.word	0x62207468
   132dc:	20612065 	.word	0x20612065
   132e0:	736f7263 	.word	0x736f7263
   132e4:	00000073 	.word	0x00000073
   132e8:	73696874 	.word	0x73696874
   132ec:	67696d20 	.word	0x67696d20
   132f0:	62207468 	.word	0x62207468
   132f4:	20612065 	.word	0x20612065
   132f8:	67756f6e 	.word	0x67756f6e
   132fc:	00007468 	.word	0x00007468
   13300:	6e6e6977 	.word	0x6e6e6977
   13304:	3d207265 	.word	0x3d207265
   13308:	00000020 	.word	0x00000020
   1330c:	6f727245 	.word	0x6f727245
   13310:	00000072 	.word	0x00000072
   13314:	0000ffff 	.word	0x0000ffff
   13318:	ffffffff 	.word	0xffffffff
   1331c:	ffffffff 	.word	0xffffffff
   13320:	000000ff 	.word	0x000000ff
   13324:	6b6f7242 	.word	0x6b6f7242
   13328:	68772065 	.word	0x68772065
   1332c:	20656c69 	.word	0x20656c69
   13330:	706f6f6c 	.word	0x706f6f6c
   13334:	00000000 	.word	0x00000000
   13338:	6c756f43 	.word	0x6c756f43
   1333c:	74276e64 	.word	0x74276e64
   13340:	61747320 	.word	0x61747320
   13344:	46207472 	.word	0x46207472
   13348:	30323654 	.word	0x30323654
   1334c:	6f742036 	.word	0x6f742036
   13350:	73686375 	.word	0x73686375
   13354:	65657263 	.word	0x65657263
   13358:	6f63206e 	.word	0x6f63206e
   1335c:	6f72746e 	.word	0x6f72746e
   13360:	72656c6c 	.word	0x72656c6c
   13364:	00000000 	.word	0x00000000
   13368:	76697244 	.word	0x76697244
   1336c:	6d207265 	.word	0x6d207265
   13370:	74686769 	.word	0x74686769
   13374:	746f6e20 	.word	0x746f6e20
   13378:	76616820 	.word	0x76616820
   1337c:	65622065 	.word	0x65622065
   13380:	66206e65 	.word	0x66206e65
   13384:	646e756f 	.word	0x646e756f
   13388:	00000000 	.word	0x00000000
   1338c:	6c696146 	.word	0x6c696146
   13390:	74206465 	.word	0x74206465
   13394:	6e69206f 	.word	0x6e69206f
   13398:	61697469 	.word	0x61697469
   1339c:	6573696c 	.word	0x6573696c
   133a0:	20445320 	.word	0x20445320
   133a4:	64726163 	.word	0x64726163
   133a8:	00000000 	.word	0x00000000
   133ac:	00000a0d 	.word	0x00000a0d
   133b0:	006e616e 	.word	0x006e616e
   133b4:	00666e69 	.word	0x00666e69
   133b8:	0066766f 	.word	0x0066766f

000133bc <_ZTV5Print>:
	...
   133c4:	0000d4f3 00002f3b 00002f19 00002f2b     ....;/.../..+/..

000133d4 <_ZTV4Uart>:
	...
   133dc:	00003bf1 00002f3b 00003b65 00003a33     .;..;/..e;..3:..
   133ec:	00003b49 00003b9d 00003b81 00003f41     I;...;...;..A?..
   133fc:	00003f65 00003831 00003859 00003a05     e?..18..Y8...:..
   1340c:	00003745                                E7..

00013410 <_ZTV14HardwareSerial>:
	...
   13418:	0000d4f3 00002f3b 00002f19 0000d4f3     ....;/.../......
   13428:	0000d4f3 0000d4f3 0000d4f3 00000000     ................
   13438:	00000000 0000368f 000036a1 000036b7     .....6...6...6..
   13448:	0000d4f3                                ....

0001344c <_ZTV6Stream>:
	...
   13454:	0000d4f3 00002f3b 00002f19 00002f2b     ....;/.../..+/..
   13464:	0000d4f3 0000d4f3 0000d4f3              ............

00013470 <_ZL15STRING_LANGUAGE>:
   13470:	04090304                                ....

00013474 <_ZL14STRING_PRODUCT>:
   13474:	75647241 206f6e69 5020304d 00006f72     Arduino M0 Pro..

00013484 <_ZL19STRING_MANUFACTURER>:
   13484:	75647241 206f6e69 00434c4c              Arduino LLC.

00013490 <_ZL21USB_DeviceDescriptorB>:
   13490:	02000112 400102ef 804f2a03 02010100     .......@.*O.....
   134a0:	00000103                                ....

000134a4 <_ZL20USB_DeviceDescriptor>:
   134a4:	02000112 40000000 804f2a03 02010100     .......@.*O.....
   134b4:	00000103 000060da 00006136 0000626c     .....`..6a..lb..
   134c4:	00006184 0000626c 000061c8 000061dc     .a..lb...a...a..
   134d4:	000061ec 000061f0 00006200 00006244     .a...a...b..Db..
   134e4:	00006254                                Tb..

000134e8 <_ZTV26DoubleBufferedEPOutHandler>:
	...
   134f0:	00004db5 00004b89 00004f3d              .M...K..=O..

000134fc <_ZTV9EPHandler>:
	...
   13504:	0000d4f3 0000d4f3 0000d4f3 00006832     ............2h..
   13514:	000067c8 000067e4 00006800 00006816     .g...g...h...h..
   13524:	000067c8 00006e1a 00006c24 00006c24     .g...n..$l..$l..
   13534:	00006c24 00006c24 00006c24 00006c24     $l..$l..$l..$l..
   13544:	00006c24 00006c24 00006be0 00006be0     $l..$l...k...k..
   13554:	00006be0 00006be0                       .k...k..

0001355c <_ZTV16Adafruit_ILI9341>:
	...
   13564:	0000d1d9 00002f3b 00002f19 00002f2b     ....;/.../..+/..
   13574:	00008591 00007f59 000082c9 00008359     ....Y.......Y...
   13584:	000084db 00008535 0000c339 00007fa9     ....5...9.......
   13594:	00007d91 00007e5b 000085fb 0000866f     .}..[~......o...
   135a4:	000086e3 0000c8f3 0000c92f 0000cae7     ......../.......

000135b4 <_ZTVN5SDLib4FileE>:
	...
   135bc:	000088fd 00008925 00002f19 00008a79     ....%..../..y...
   135cc:	00008a35 000089d5 00008993 0000002f     5.........../...
   135dc:	0000982a 00009848 00009866 00009884     *...H...f.......
   135ec:	000098a2 000098c0 5e3e3c7c 2f3f3d2b     ........|<>^+=?/
   135fc:	2c3b5d5b 005c222a                       [];,*"\.

00013604 <_ZTV6SdFile>:
	...
   1360c:	0000aec1 00002f3b 00002f19 00002f2b     ....;/.../..+/..
   1361c:	65735f70 6d6f6372 203d2120 4c4c554e     p_sercom != NULL
   1362c:	00000000 732f2e2e 6c2f6372 61726269     ....../src/libra
   1363c:	73656972 6970732f 4950532f 7070632e     ries/spi/SPI.cpp
   1364c:	00000000                                ....

00013650 <_ZZN8SPIClassC4EP6SERCOMhhh14SercomSpiTXPad11SercomRXPadE19__PRETTY_FUNCTION__>:
   13650:	43495053 7373616c 50533a3a 616c4349     SPIClass::SPICla
   13660:	53287373 4f435245 202c2a4d 746e6975     ss(SERCOM*, uint
   13670:	2c745f38 6e697520 745f3874 6975202c     8_t, uint8_t, ui
   13680:	5f38746e 53202c74 6f637265 6970536d     nt8_t, SercomSpi
   13690:	61505854 53202c64 6f637265 5058526d     TXPad, SercomRXP
   136a0:	00296461                                ad).

000136a4 <_ZTV7TwoWire>:
	...
   136ac:	0000bc61 0000bcb9 00002f19 0000bd5b     a......../..[...
   136bc:	0000bd07 0000bd23 0000bd3f              ....#...?...

000136c8 <g_APinDescription>:
   136c8:	00000000 0000000b 00000002 00000004     ................
   136d8:	ffff00ff 000bffff 00000000 0000000a     ................
   136e8:	00000002 00000004 ffff00ff 000affff     ................
   136f8:	00000000 00000008 00000004 0000001c     ................
   13708:	000000ff 00ff0000 00000000 00000009     ................
   13718:	00000004 0000001c 000100ff 00090001     ................
   13728:	00000000 0000000e 00000004 0000001c     ................
   13738:	030000ff 000e0300 00000000 0000000f     ................
   13748:	00000004 0000001c 030100ff 000f0301     ................
   13758:	00000000 00000014 00000005 0000001c     ................
   13768:	000200ff 00040002 00000000 00000015     ................
   13778:	00000005 0000001c 000300ff 00050003     ................
   13788:	00000000 00000006 00000004 0000001c     ................
   13798:	010000ff 00060100 00000000 00000007     ................
   137a8:	00000004 0000001c 010100ff 00070101     ................
   137b8:	00000000 00000012 00000004 0000001c     ................
   137c8:	030000ff 00020300 00000000 00000010     ................
   137d8:	00000004 0000001c 020000ff 00000200     ................
   137e8:	00000000 00000013 00000004 0000001c     ................
   137f8:	030100ff 00030301 00000000 00000011     ................
   13808:	00000004 0000000c 020100ff 0001ffff     ................
   13818:	000000ff 00000000 000000ff 00000000     ................
   13828:	ffff00ff 00ffffff 00000000 00000003     ................
   13838:	00000001 00000002 ffff00ff 00ffffff     ................
   13848:	00000000 00000016 00000002 00000004     ................
   13858:	ffff00ff 0006ffff 00000000 00000017     ................
   13868:	00000002 00000004 ffff00ff 0007ffff     ................
   13878:	00000000 0000000c 00000003 00000004     ................
   13888:	ffff00ff 000cffff 000000ff 00000000     ................
   13898:	000000ff 00000000 ffff00ff 00ffffff     ................
   138a8:	00000001 0000000b 00000003 00000004     ................
   138b8:	ffff00ff 000bffff 00000001 0000000a     ................
   138c8:	00000003 00000004 ffff00ff 000affff     ................
   138d8:	000000ff 00000000 000000ff 00000000     ................
   138e8:	ffff00ff 00ffffff 000000ff 00000000     ................
   138f8:	000000ff 00000000 ffff00ff 00ffffff     ................
   13908:	00000000 00000002 00000001 00000002     ................
   13918:	ffff0000 0002ffff 00000001 00000008     ................
   13928:	00000001 00000002 ffff0002 0008ffff     ................
   13938:	00000001 00000009 00000001 00000002     ................
   13948:	ffff0003 0009ffff 00000000 00000004     ................
   13958:	00000001 00000002 ffff0004 0004ffff     ................
   13968:	00000000 00000005 00000001 00000002     ................
   13978:	ffff0005 0005ffff 00000001 00000002     ................
   13988:	00000001 00000002 ffff000a 0002ffff     ................
   13998:	00000001 00000003 0000000b 00000004     ................
   139a8:	ffff00ff 00ffffff 00000000 0000001b     ................
   139b8:	0000000b 00000004 ffff00ff 00ffffff     ................
   139c8:	00000000 0000001c 00000006 00000000     ................
   139d8:	ffff00ff 00ffffff 00000000 00000018     ................
   139e8:	00000006 00000000 ffff00ff 00ffffff     ................
   139f8:	00000000 00000019 00000006 00000000     ................
   13a08:	ffff00ff 00ffffff 00000001 00000016     ................
   13a18:	00000003 00000000 ffff00ff 00ffffff     ................
   13a28:	00000001 00000017 00000003 00000000     ................
   13a38:	ffff00ff 00ffffff 00000000 00000016     ................
   13a48:	00000002 00000000 ffff00ff 00ffffff     ................
   13a58:	00000000 00000017 00000002 00000000     ................
   13a68:	ffff00ff 00ffffff 00000000 00000013     ................
   13a78:	00000002 00000000 ffff00ff 00ffffff     ................
   13a88:	00000000 00000010 00000002 00000000     ................
   13a98:	ffff00ff 00ffffff 00000000 00000012     ................
   13aa8:	00000002 00000000 ffff00ff 00ffffff     ................
   13ab8:	00000000 00000011 00000002 00000000     ................
   13ac8:	ffff00ff 00ffffff 00000000 0000000d     ................
   13ad8:	00000004 0000000c 000100ff 000dffff     ................
   13ae8:	00000000 00000015 00000005 0000000c     ................
   13af8:	000300ff 00ffffff 00000000 00000006     ................
   13b08:	00000004 0000000c 010000ff 00ffffff     ................
   13b18:	00000000 00000007 00000004 0000000c     ................
   13b28:	010100ff 00ffffff 00000000 00000002     ................
   13b38:	00000001 00000002 ffff0014 0002ffff     ................

00013b48 <_ZL4font>:
   13b48:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   13b58:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   13b68:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   13b78:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   13b88:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   13b98:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   13ba8:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   13bb8:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   13bc8:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   13bd8:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   13be8:	00000000 5f000000 07000000 14000700     ......._........
   13bf8:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   13c08:	00502056 00030708 41221c00 22410000     V P......."A..A"
   13c18:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   13c28:	08080800 00000808 20006060 02040810     ........``. ....
   13c38:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   13c48:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   13c58:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   13c68:	00001e29 00000014 00003440 22140800     ).......@4....."
   13c78:	14141441 41001414 02081422 06095901     A......A"....Y..
   13c88:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   13c98:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   13ca8:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   13cb8:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   13cc8:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   13cd8:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   13ce8:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   13cf8:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   13d08:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   13d18:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   13d28:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   13d38:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   13d48:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   13d58:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   13d68:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   13d78:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   13d88:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   13d98:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   13da8:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   13db8:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   13dc8:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   13dd8:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   13de8:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   13df8:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   13e08:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   13e18:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   13e28:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   13e38:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   13e48:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   13e58:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   13e68:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   13e78:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   13e88:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   13e98:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   13ea8:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   13eb8:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   13ec8:	00ff0000 ff101010 14141400 101000ff     ................
   13ed8:	10ff00ff f010f010 fc141414 f7141400     ................
   13ee8:	0000ff00 14ff00ff fc04f414 10171414     ................
   13ef8:	1f10101f 14141f10 10001f14 00f01010     ................
   13f08:	1f000000 10101010 1010101f 0010f010     ................
   13f18:	10ff0000 10101010 10101010 000010ff     ................
   13f28:	0014ff00 ff00ff00 101f0000 fc000017     ................
   13f38:	1414f404 14171017 f404f414 00ff0000     ................
   13f48:	141414f7 14141414 14f700f7 14171414     ................
   13f58:	101f1010 1414141f 101014f4 00f010f0     ................
   13f68:	1f101f00 1f000000 00000014 000014fc     ................
   13f78:	10f010f0 ff10ff10 ff141414 10101014     ................
   13f88:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   13f98:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   13fa8:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   13fb8:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   13fc8:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   13fd8:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   13fe8:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   13ff8:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   14008:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   14018:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   14028:	00000018 30001010 0101ff40 01011f00     .......0@.......
   14038:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

00014048 <_ZTV12Adafruit_GFX>:
	...
   14050:	0000d1d9 00002f3b 00002f19 00002f2b     ....;/.../..+/..
   14060:	0000d4f3 0000c593 0000c5a3 0000c6a1     ................
   14070:	0000c5f1 0000c649 0000c339 0000c70f     ....I...9.......
   14080:	0000d447 0000d4dd 0000c71f 0000c7ad     G...............
   14090:	0000c83f 0000c8f3 0000c92f 0000cae7     ?......./.......

000140a0 <_ZTV7Serial_>:
	...
   140a8:	0000e6a1 0000e665 0000e5bf 0000e649     ....e.......I...
   140b8:	0000e5a1 0000e60d 0000e5d1 0000f418     ................
   140c8:	0000f3fa 0000f3b4 0000f2d2 0000f3b4     ................
   140d8:	0000f3ec 0000f3b4 0000f2d2 0000f3fa     ................
   140e8:	0000f3fa 0000f3ec 0000f2d2 0000f2ca     ................
   140f8:	0000f2ca 0000f2ca 0000f630 0000fc78     ........0...x...
   14108:	0000fb38 0000fb38 0000fb34 0000fc50     8...8...4...P...
   14118:	0000fc50 0000fc42 0000fb34 0000fc50     P...B...4...P...
   14128:	0000fc42 0000fc50 0000fb34 0000fc58     B...P...4...X...
   14138:	0000fc58 0000fc58 0000fe5c 7566202c     X...X...\..., fu
   14148:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
   14158:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
   14168:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
   14178:	73256425 000a7325                       %d%s%s..

00014180 <_global_impure_ptr>:
   14180:	200000a8 4f500043 00584953 2d23002e     ... C.POSIX...#-
   14190:	00202b30 004c6c68 45676665 49004746     0+ .hlL.efgEFG.I
   141a0:	6900464e 4e00666e 6e004e41 30006e61     NF.inf.NAN.nan.0
   141b0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   141c0:	31300046 35343332 39383736 64636261     F.0123456789abcd
   141d0:	00006665                                         ef.

000141d3 <_ctype_>:
   141d3:	20202000 20202020 28282020 20282828     .         ((((( 
   141e3:	20202020 20202020 20202020 20202020                     
   141f3:	10108820 10101010 10101010 10101010      ...............
   14203:	04040410 04040404 10040404 10101010     ................
   14213:	41411010 41414141 01010101 01010101     ..AAAAAA........
   14223:	01010101 01010101 01010101 10101010     ................
   14233:	42421010 42424242 02020202 02020202     ..BBBBBB........
   14243:	02020202 02020202 02020202 10101010     ................
   14253:	00000020 00000000 00000000 00000000      ...............
	...
   142d3:	666e4900 74696e69 614e0079 0000004e     .Infinity.NaN...
	...

000142e4 <__sf_fake_stderr>:
	...

00014304 <__sf_fake_stdin>:
	...

00014324 <__sf_fake_stdout>:
	...

00014348 <__mprec_bigtens>:
   14348:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   14358:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   14368:	7f73bf3c 75154fdd                       <.s..O.u

00014370 <__mprec_tens>:
   14370:	00000000 3ff00000 00000000 40240000     .......?......$@
   14380:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   14390:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   143a0:	00000000 412e8480 00000000 416312d0     .......A......cA
   143b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   143c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   143d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   143e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   143f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   14400:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   14410:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   14420:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   14430:	79d99db4 44ea7843                       ...yCx.D

00014438 <p05.6047>:
   14438:	00000005 00000019 0000007d              ........}...

00014444 <__EH_FRAME_BEGIN__>:
   14444:	00000000                                ....

Disassembly of section .ramfunc:

00014448 <banzai>:
static void banzai() {
   14448:	b580      	push	{r7, lr}
   1444a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
   1444c:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
   1444e:	4b17      	ldr	r3, [pc, #92]	; (144ac <banzai+0x64>)
   14450:	3304      	adds	r3, #4
   14452:	4a17      	ldr	r2, [pc, #92]	; (144b0 <banzai+0x68>)
   14454:	4293      	cmp	r3, r2
   14456:	d925      	bls.n	144a4 <banzai+0x5c>
	while (!nvmReady())
   14458:	f7ee ff6e 	bl	3338 <nvmReady>
   1445c:	0003      	movs	r3, r0
   1445e:	001a      	movs	r2, r3
   14460:	2301      	movs	r3, #1
   14462:	4053      	eors	r3, r2
   14464:	b2db      	uxtb	r3, r3
   14466:	2b00      	cmp	r3, #0
   14468:	d000      	beq.n	1446c <banzai+0x24>
   1446a:	e7f5      	b.n	14458 <banzai+0x10>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   1446c:	4911      	ldr	r1, [pc, #68]	; (144b4 <banzai+0x6c>)
   1446e:	4b11      	ldr	r3, [pc, #68]	; (144b4 <banzai+0x6c>)
   14470:	8b1b      	ldrh	r3, [r3, #24]
   14472:	b29b      	uxth	r3, r3
   14474:	2220      	movs	r2, #32
   14476:	32ff      	adds	r2, #255	; 0xff
   14478:	4313      	orrs	r3, r2
   1447a:	b29b      	uxth	r3, r3
   1447c:	830b      	strh	r3, [r1, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
   1447e:	4b0d      	ldr	r3, [pc, #52]	; (144b4 <banzai+0x6c>)
   14480:	4a0a      	ldr	r2, [pc, #40]	; (144ac <banzai+0x64>)
   14482:	3204      	adds	r2, #4
   14484:	0892      	lsrs	r2, r2, #2
   14486:	0052      	lsls	r2, r2, #1
   14488:	61da      	str	r2, [r3, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
   1448a:	4b0a      	ldr	r3, [pc, #40]	; (144b4 <banzai+0x6c>)
   1448c:	4a0a      	ldr	r2, [pc, #40]	; (144b8 <banzai+0x70>)
   1448e:	801a      	strh	r2, [r3, #0]
	while (!nvmReady())
   14490:	f7ee ff52 	bl	3338 <nvmReady>
   14494:	0003      	movs	r3, r0
   14496:	001a      	movs	r2, r3
   14498:	2301      	movs	r3, #1
   1449a:	4053      	eors	r3, r2
   1449c:	b2db      	uxtb	r3, r3
   1449e:	2b00      	cmp	r3, #0
   144a0:	d001      	beq.n	144a6 <banzai+0x5e>
   144a2:	e7f5      	b.n	14490 <banzai+0x48>
		goto reset;
   144a4:	46c0      	nop			; (mov r8, r8)
	NVIC_SystemReset() ;
   144a6:	f7ee ff37 	bl	3318 <NVIC_SystemReset>
	while (true);
   144aa:	e7fe      	b.n	144aa <banzai+0x62>
   144ac:	00000000 	.word	0x00000000
   144b0:	00000203 	.word	0x00000203
   144b4:	41004000 	.word	0x41004000
   144b8:	ffffa502 	.word	0xffffa502
