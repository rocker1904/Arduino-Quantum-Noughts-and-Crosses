
arduino-noughts-and-crosses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011860  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  20000000  00011860  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000cec  20000134  00011994  00030134  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  0003015c  2**0
                  CONTENTS, READONLY
  5 .debug_info   000bb498  00000000  00000000  000301b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000c7b9  00000000  00000000  000eb64d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00034857  00000000  00000000  000f7e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00001570  00000000  00000000  0012c65d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00009498  00000000  00000000  0012dbcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00021cfe  00000000  00000000  00137065  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001dc1f  00000000  00000000  00158d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00087acb  00000000  00000000  00176982  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000046bc  00000000  00000000  001fe450  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stabstr      000001b9  00000000  00000000  00202b0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 51 2a 00 00 39 2a 00 00 39 2a 00 00     ... Q*..9*..9*..
	...
      2c:	39 2a 00 00 00 00 00 00 00 00 00 00 39 2a 00 00     9*..........9*..
      3c:	b1 2a 00 00 39 2a 00 00 39 2a 00 00 39 2a 00 00     .*..9*..9*..9*..
      4c:	39 2a 00 00 39 2a 00 00 39 2a 00 00 39 2a 00 00     9*..9*..9*..9*..
      5c:	3d 2a 00 00 39 2a 00 00 7d ee 00 00 39 2a 00 00     =*..9*..}...9*..
      6c:	39 2a 00 00 09 ed 00 00 39 2a 00 00 8d ee 00 00     9*......9*......
      7c:	39 2a 00 00 39 2a 00 00 39 2a 00 00 39 2a 00 00     9*..9*..9*..9*..
      8c:	39 2a 00 00 00 00 00 00 39 2a 00 00 39 2a 00 00     9*......9*..9*..
      9c:	39 2a 00 00 39 2a 00 00 39 2a 00 00 39 2a 00 00     9*..9*..9*..9*..
      ac:	39 2a 00 00 00 00 00 00                             9*......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000134 	.word	0x20000134
      d4:	00000000 	.word	0x00000000
      d8:	0001185c 	.word	0x0001185c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000138 	.word	0x20000138
     108:	0001185c 	.word	0x0001185c
     10c:	20000130 	.word	0x20000130
     110:	00000000 	.word	0x00000000

00000114 <_Z6read16RN5SDLib4FileE>:

// These read 16-bit and 32-bit types from the SD card file.
// BMP data is stored little-endian, Arduino is little-endian too.
// May need to reverse subscript order if porting elsewhere.

uint16_t read16(File &f) {
     114:	b590      	push	{r4, r7, lr}
     116:	b085      	sub	sp, #20
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	uint16_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     11c:	230e      	movs	r3, #14
     11e:	18fc      	adds	r4, r7, r3
     120:	687b      	ldr	r3, [r7, #4]
     122:	681b      	ldr	r3, [r3, #0]
     124:	3314      	adds	r3, #20
     126:	681b      	ldr	r3, [r3, #0]
     128:	687a      	ldr	r2, [r7, #4]
     12a:	0010      	movs	r0, r2
     12c:	4798      	blx	r3
     12e:	0003      	movs	r3, r0
     130:	b2db      	uxtb	r3, r3
     132:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read(); // MSB
     134:	230e      	movs	r3, #14
     136:	18fc      	adds	r4, r7, r3
     138:	3401      	adds	r4, #1
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	681b      	ldr	r3, [r3, #0]
     13e:	3314      	adds	r3, #20
     140:	681b      	ldr	r3, [r3, #0]
     142:	687a      	ldr	r2, [r7, #4]
     144:	0010      	movs	r0, r2
     146:	4798      	blx	r3
     148:	0003      	movs	r3, r0
     14a:	b2db      	uxtb	r3, r3
     14c:	7023      	strb	r3, [r4, #0]
	return result;
     14e:	230e      	movs	r3, #14
     150:	18fb      	adds	r3, r7, r3
     152:	881b      	ldrh	r3, [r3, #0]
}
     154:	0018      	movs	r0, r3
     156:	46bd      	mov	sp, r7
     158:	b005      	add	sp, #20
     15a:	bd90      	pop	{r4, r7, pc}

0000015c <_Z6read32RN5SDLib4FileE>:

uint32_t read32(File &f) {
     15c:	b590      	push	{r4, r7, lr}
     15e:	b085      	sub	sp, #20
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
	uint32_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     164:	230c      	movs	r3, #12
     166:	18fc      	adds	r4, r7, r3
     168:	687b      	ldr	r3, [r7, #4]
     16a:	681b      	ldr	r3, [r3, #0]
     16c:	3314      	adds	r3, #20
     16e:	681b      	ldr	r3, [r3, #0]
     170:	687a      	ldr	r2, [r7, #4]
     172:	0010      	movs	r0, r2
     174:	4798      	blx	r3
     176:	0003      	movs	r3, r0
     178:	b2db      	uxtb	r3, r3
     17a:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read();
     17c:	230c      	movs	r3, #12
     17e:	18fc      	adds	r4, r7, r3
     180:	3401      	adds	r4, #1
     182:	687b      	ldr	r3, [r7, #4]
     184:	681b      	ldr	r3, [r3, #0]
     186:	3314      	adds	r3, #20
     188:	681b      	ldr	r3, [r3, #0]
     18a:	687a      	ldr	r2, [r7, #4]
     18c:	0010      	movs	r0, r2
     18e:	4798      	blx	r3
     190:	0003      	movs	r3, r0
     192:	b2db      	uxtb	r3, r3
     194:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[2] = f.read();
     196:	230c      	movs	r3, #12
     198:	18fc      	adds	r4, r7, r3
     19a:	3402      	adds	r4, #2
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	3314      	adds	r3, #20
     1a2:	681b      	ldr	r3, [r3, #0]
     1a4:	687a      	ldr	r2, [r7, #4]
     1a6:	0010      	movs	r0, r2
     1a8:	4798      	blx	r3
     1aa:	0003      	movs	r3, r0
     1ac:	b2db      	uxtb	r3, r3
     1ae:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[3] = f.read(); // MSB
     1b0:	230c      	movs	r3, #12
     1b2:	18fc      	adds	r4, r7, r3
     1b4:	3403      	adds	r4, #3
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	3314      	adds	r3, #20
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	687a      	ldr	r2, [r7, #4]
     1c0:	0010      	movs	r0, r2
     1c2:	4798      	blx	r3
     1c4:	0003      	movs	r3, r0
     1c6:	b2db      	uxtb	r3, r3
     1c8:	7023      	strb	r3, [r4, #0]
	return result;
     1ca:	68fb      	ldr	r3, [r7, #12]
}
     1cc:	0018      	movs	r0, r3
     1ce:	46bd      	mov	sp, r7
     1d0:	b005      	add	sp, #20
     1d2:	bd90      	pop	{r4, r7, pc}

000001d4 <_ZN5PrintaSEOS_>:
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     1d4:	b580      	push	{r7, lr}
     1d6:	b082      	sub	sp, #8
     1d8:	af00      	add	r7, sp, #0
     1da:	6078      	str	r0, [r7, #4]
     1dc:	6039      	str	r1, [r7, #0]
     1de:	683b      	ldr	r3, [r7, #0]
     1e0:	685a      	ldr	r2, [r3, #4]
     1e2:	687b      	ldr	r3, [r7, #4]
     1e4:	605a      	str	r2, [r3, #4]
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	0018      	movs	r0, r3
     1ea:	46bd      	mov	sp, r7
     1ec:	b002      	add	sp, #8
     1ee:	bd80      	pop	{r7, pc}

000001f0 <_ZN6StreamaSEOS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     1f0:	b580      	push	{r7, lr}
     1f2:	b082      	sub	sp, #8
     1f4:	af00      	add	r7, sp, #0
     1f6:	6078      	str	r0, [r7, #4]
     1f8:	6039      	str	r1, [r7, #0]
     1fa:	687b      	ldr	r3, [r7, #4]
     1fc:	683a      	ldr	r2, [r7, #0]
     1fe:	0011      	movs	r1, r2
     200:	0018      	movs	r0, r3
     202:	f7ff ffe7 	bl	1d4 <_ZN5PrintaSEOS_>
     206:	683b      	ldr	r3, [r7, #0]
     208:	689a      	ldr	r2, [r3, #8]
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	609a      	str	r2, [r3, #8]
     20e:	683b      	ldr	r3, [r7, #0]
     210:	68da      	ldr	r2, [r3, #12]
     212:	687b      	ldr	r3, [r7, #4]
     214:	60da      	str	r2, [r3, #12]
     216:	687b      	ldr	r3, [r7, #4]
     218:	0018      	movs	r0, r3
     21a:	46bd      	mov	sp, r7
     21c:	b002      	add	sp, #8
     21e:	bd80      	pop	{r7, pc}

00000220 <_ZN5SDLib4FileaSEOS0_>:
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
     220:	b580      	push	{r7, lr}
     222:	b082      	sub	sp, #8
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
     228:	6039      	str	r1, [r7, #0]
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	683a      	ldr	r2, [r7, #0]
     22e:	0011      	movs	r1, r2
     230:	0018      	movs	r0, r3
     232:	f7ff ffdd 	bl	1f0 <_ZN6StreamaSEOS_>
     236:	687b      	ldr	r3, [r7, #4]
     238:	3310      	adds	r3, #16
     23a:	0019      	movs	r1, r3
     23c:	220c      	movs	r2, #12
     23e:	683b      	ldr	r3, [r7, #0]
     240:	3310      	adds	r3, #16
     242:	2a00      	cmp	r2, #0
     244:	db05      	blt.n	252 <_ZN5SDLib4FileaSEOS0_+0x32>
     246:	7818      	ldrb	r0, [r3, #0]
     248:	7008      	strb	r0, [r1, #0]
     24a:	3101      	adds	r1, #1
     24c:	3301      	adds	r3, #1
     24e:	3a01      	subs	r2, #1
     250:	e7f7      	b.n	242 <_ZN5SDLib4FileaSEOS0_+0x22>
     252:	683b      	ldr	r3, [r7, #0]
     254:	6a1a      	ldr	r2, [r3, #32]
     256:	687b      	ldr	r3, [r7, #4]
     258:	621a      	str	r2, [r3, #32]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	0018      	movs	r0, r3
     25e:	46bd      	mov	sp, r7
     260:	b002      	add	sp, #8
     262:	bd80      	pop	{r7, pc}

00000264 <_Z10drawBitmapcss>:

void drawBitmap(char fileInput, int16_t x, int16_t y) {
     264:	b590      	push	{r4, r7, lr}
     266:	b0eb      	sub	sp, #428	; 0x1ac
     268:	af02      	add	r7, sp, #8
     26a:	0004      	movs	r4, r0
     26c:	0008      	movs	r0, r1
     26e:	0011      	movs	r1, r2
     270:	4b88      	ldr	r3, [pc, #544]	; (494 <_Z10drawBitmapcss+0x230>)
     272:	22d0      	movs	r2, #208	; 0xd0
     274:	0052      	lsls	r2, r2, #1
     276:	4694      	mov	ip, r2
     278:	44bc      	add	ip, r7
     27a:	4463      	add	r3, ip
     27c:	1c22      	adds	r2, r4, #0
     27e:	701a      	strb	r2, [r3, #0]
     280:	4b85      	ldr	r3, [pc, #532]	; (498 <_Z10drawBitmapcss+0x234>)
     282:	22d0      	movs	r2, #208	; 0xd0
     284:	0052      	lsls	r2, r2, #1
     286:	4694      	mov	ip, r2
     288:	44bc      	add	ip, r7
     28a:	4463      	add	r3, ip
     28c:	1c02      	adds	r2, r0, #0
     28e:	801a      	strh	r2, [r3, #0]
     290:	4b82      	ldr	r3, [pc, #520]	; (49c <_Z10drawBitmapcss+0x238>)
     292:	22d0      	movs	r2, #208	; 0xd0
     294:	0052      	lsls	r2, r2, #1
     296:	4694      	mov	ip, r2
     298:	44bc      	add	ip, r7
     29a:	4463      	add	r3, ip
     29c:	1c0a      	adds	r2, r1, #0
     29e:	801a      	strh	r2, [r3, #0]

	File bmpFile;
     2a0:	238a      	movs	r3, #138	; 0x8a
     2a2:	005b      	lsls	r3, r3, #1
     2a4:	18fb      	adds	r3, r7, r3
     2a6:	0018      	movs	r0, r3
     2a8:	f00c fa68 	bl	c77c <_ZN5SDLib4FileC1Ev>
	int bmpWidth, bmpHeight;   // W+H in pixels
	uint8_t bmpDepth;              // Bit depth (currently must be 24)
	uint32_t bmpImageoffset;        // Start of image data in file
	uint32_t rowSize;               // Not always = bmpWidth; may have padding
	uint8_t sdbuffer[3 * BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     2ac:	239c      	movs	r3, #156	; 0x9c
     2ae:	33ff      	adds	r3, #255	; 0xff
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	22ff      	movs	r2, #255	; 0xff
     2b4:	701a      	strb	r2, [r3, #0]
	boolean goodBmp = false;       // Set to true on valid header parse
     2b6:	237c      	movs	r3, #124	; 0x7c
     2b8:	33ff      	adds	r3, #255	; 0xff
     2ba:	18fb      	adds	r3, r7, r3
     2bc:	2200      	movs	r2, #0
     2be:	701a      	strb	r2, [r3, #0]
	boolean flip = true;        // BMP is stored bottom-to-top
     2c0:	23cd      	movs	r3, #205	; 0xcd
     2c2:	005b      	lsls	r3, r3, #1
     2c4:	18fb      	adds	r3, r7, r3
     2c6:	2201      	movs	r2, #1
     2c8:	701a      	strb	r2, [r3, #0]
	int w, h, row, col, x2, y2, bx1, by1;
	uint8_t r, g, b;
	uint32_t pos = 0;
     2ca:	2300      	movs	r3, #0
     2cc:	22be      	movs	r2, #190	; 0xbe
     2ce:	0052      	lsls	r2, r2, #1
     2d0:	18ba      	adds	r2, r7, r2
     2d2:	6013      	str	r3, [r2, #0]
	char filename[6] = {fileInput, '.', 'b', 'm', 'p'};
     2d4:	4b72      	ldr	r3, [pc, #456]	; (4a0 <_Z10drawBitmapcss+0x23c>)
     2d6:	22d0      	movs	r2, #208	; 0xd0
     2d8:	0052      	lsls	r2, r2, #1
     2da:	4694      	mov	ip, r2
     2dc:	44bc      	add	ip, r7
     2de:	4463      	add	r3, ip
     2e0:	0018      	movs	r0, r3
     2e2:	2306      	movs	r3, #6
     2e4:	001a      	movs	r2, r3
     2e6:	2100      	movs	r1, #0
     2e8:	f010 fb48 	bl	1097c <memset>
     2ec:	4b6c      	ldr	r3, [pc, #432]	; (4a0 <_Z10drawBitmapcss+0x23c>)
     2ee:	22d0      	movs	r2, #208	; 0xd0
     2f0:	0052      	lsls	r2, r2, #1
     2f2:	4694      	mov	ip, r2
     2f4:	44bc      	add	ip, r7
     2f6:	4463      	add	r3, ip
     2f8:	222e      	movs	r2, #46	; 0x2e
     2fa:	705a      	strb	r2, [r3, #1]
     2fc:	4b68      	ldr	r3, [pc, #416]	; (4a0 <_Z10drawBitmapcss+0x23c>)
     2fe:	22d0      	movs	r2, #208	; 0xd0
     300:	0052      	lsls	r2, r2, #1
     302:	4694      	mov	ip, r2
     304:	44bc      	add	ip, r7
     306:	4463      	add	r3, ip
     308:	2262      	movs	r2, #98	; 0x62
     30a:	709a      	strb	r2, [r3, #2]
     30c:	4b64      	ldr	r3, [pc, #400]	; (4a0 <_Z10drawBitmapcss+0x23c>)
     30e:	22d0      	movs	r2, #208	; 0xd0
     310:	0052      	lsls	r2, r2, #1
     312:	4694      	mov	ip, r2
     314:	44bc      	add	ip, r7
     316:	4463      	add	r3, ip
     318:	226d      	movs	r2, #109	; 0x6d
     31a:	70da      	strb	r2, [r3, #3]
     31c:	4b60      	ldr	r3, [pc, #384]	; (4a0 <_Z10drawBitmapcss+0x23c>)
     31e:	22d0      	movs	r2, #208	; 0xd0
     320:	0052      	lsls	r2, r2, #1
     322:	4694      	mov	ip, r2
     324:	44bc      	add	ip, r7
     326:	4463      	add	r3, ip
     328:	2270      	movs	r2, #112	; 0x70
     32a:	711a      	strb	r2, [r3, #4]
     32c:	4b5c      	ldr	r3, [pc, #368]	; (4a0 <_Z10drawBitmapcss+0x23c>)
     32e:	22d0      	movs	r2, #208	; 0xd0
     330:	0052      	lsls	r2, r2, #1
     332:	4694      	mov	ip, r2
     334:	44bc      	add	ip, r7
     336:	4463      	add	r3, ip
     338:	4a56      	ldr	r2, [pc, #344]	; (494 <_Z10drawBitmapcss+0x230>)
     33a:	21d0      	movs	r1, #208	; 0xd0
     33c:	0049      	lsls	r1, r1, #1
     33e:	468c      	mov	ip, r1
     340:	44bc      	add	ip, r7
     342:	4462      	add	r2, ip
     344:	7812      	ldrb	r2, [r2, #0]
     346:	701a      	strb	r2, [r3, #0]

	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     348:	4b56      	ldr	r3, [pc, #344]	; (4a4 <_Z10drawBitmapcss+0x240>)
     34a:	0018      	movs	r0, r3
     34c:	f00f fca4 	bl	fc98 <_ZNK12Adafruit_GFX5widthEv>
     350:	0003      	movs	r3, r0
     352:	001a      	movs	r2, r3
     354:	4b50      	ldr	r3, [pc, #320]	; (498 <_Z10drawBitmapcss+0x234>)
     356:	21d0      	movs	r1, #208	; 0xd0
     358:	0049      	lsls	r1, r1, #1
     35a:	468c      	mov	ip, r1
     35c:	44bc      	add	ip, r7
     35e:	4463      	add	r3, ip
     360:	2100      	movs	r1, #0
     362:	5e5b      	ldrsh	r3, [r3, r1]
     364:	4293      	cmp	r3, r2
     366:	da0f      	bge.n	388 <_Z10drawBitmapcss+0x124>
     368:	4b4e      	ldr	r3, [pc, #312]	; (4a4 <_Z10drawBitmapcss+0x240>)
     36a:	0018      	movs	r0, r3
     36c:	f00f fc98 	bl	fca0 <_ZNK12Adafruit_GFX6heightEv>
     370:	0003      	movs	r3, r0
     372:	001a      	movs	r2, r3
     374:	4b49      	ldr	r3, [pc, #292]	; (49c <_Z10drawBitmapcss+0x238>)
     376:	21d0      	movs	r1, #208	; 0xd0
     378:	0049      	lsls	r1, r1, #1
     37a:	468c      	mov	ip, r1
     37c:	44bc      	add	ip, r7
     37e:	4463      	add	r3, ip
     380:	2100      	movs	r1, #0
     382:	5e5b      	ldrsh	r3, [r3, r1]
     384:	4293      	cmp	r3, r2
     386:	db01      	blt.n	38c <_Z10drawBitmapcss+0x128>
     388:	2301      	movs	r3, #1
     38a:	e000      	b.n	38e <_Z10drawBitmapcss+0x12a>
     38c:	2300      	movs	r3, #0
     38e:	2b00      	cmp	r3, #0
     390:	d000      	beq.n	394 <_Z10drawBitmapcss+0x130>
     392:	e2f1      	b.n	978 <_Z10drawBitmapcss+0x714>

	// Open requested file on SD card
	bmpFile = SD.open(filename);
     394:	239c      	movs	r3, #156	; 0x9c
     396:	005b      	lsls	r3, r3, #1
     398:	18f8      	adds	r0, r7, r3
     39a:	230c      	movs	r3, #12
     39c:	18fa      	adds	r2, r7, r3
     39e:	4942      	ldr	r1, [pc, #264]	; (4a8 <_Z10drawBitmapcss+0x244>)
     3a0:	2301      	movs	r3, #1
     3a2:	f00c fad3 	bl	c94c <_ZN5SDLib7SDClass4openEPKch>
     3a6:	239c      	movs	r3, #156	; 0x9c
     3a8:	005b      	lsls	r3, r3, #1
     3aa:	18fa      	adds	r2, r7, r3
     3ac:	238a      	movs	r3, #138	; 0x8a
     3ae:	005b      	lsls	r3, r3, #1
     3b0:	18fb      	adds	r3, r7, r3
     3b2:	0011      	movs	r1, r2
     3b4:	0018      	movs	r0, r3
     3b6:	f7ff ff33 	bl	220 <_ZN5SDLib4FileaSEOS0_>

	// Parse BMP header
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     3ba:	238a      	movs	r3, #138	; 0x8a
     3bc:	005b      	lsls	r3, r3, #1
     3be:	18fb      	adds	r3, r7, r3
     3c0:	0018      	movs	r0, r3
     3c2:	f7ff fea7 	bl	114 <_Z6read16RN5SDLib4FileE>
     3c6:	0003      	movs	r3, r0
     3c8:	4a38      	ldr	r2, [pc, #224]	; (4ac <_Z10drawBitmapcss+0x248>)
     3ca:	4694      	mov	ip, r2
     3cc:	4463      	add	r3, ip
     3ce:	425a      	negs	r2, r3
     3d0:	4153      	adcs	r3, r2
     3d2:	b2db      	uxtb	r3, r3
     3d4:	2b00      	cmp	r3, #0
     3d6:	d100      	bne.n	3da <_Z10drawBitmapcss+0x176>
     3d8:	e2c7      	b.n	96a <_Z10drawBitmapcss+0x706>
		read32(bmpFile); // Read file size
     3da:	238a      	movs	r3, #138	; 0x8a
     3dc:	005b      	lsls	r3, r3, #1
     3de:	18fb      	adds	r3, r7, r3
     3e0:	0018      	movs	r0, r3
     3e2:	f7ff febb 	bl	15c <_Z6read32RN5SDLib4FileE>
		(void) read32(bmpFile); // Read & ignore creator bytes
     3e6:	238a      	movs	r3, #138	; 0x8a
     3e8:	005b      	lsls	r3, r3, #1
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	0018      	movs	r0, r3
     3ee:	f7ff feb5 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     3f2:	238a      	movs	r3, #138	; 0x8a
     3f4:	005b      	lsls	r3, r3, #1
     3f6:	18fb      	adds	r3, r7, r3
     3f8:	0018      	movs	r0, r3
     3fa:	f7ff feaf 	bl	15c <_Z6read32RN5SDLib4FileE>
     3fe:	0003      	movs	r3, r0
     400:	22ba      	movs	r2, #186	; 0xba
     402:	0052      	lsls	r2, r2, #1
     404:	18ba      	adds	r2, r7, r2
     406:	6013      	str	r3, [r2, #0]
		read32(bmpFile);	// Read DIB header
     408:	238a      	movs	r3, #138	; 0x8a
     40a:	005b      	lsls	r3, r3, #1
     40c:	18fb      	adds	r3, r7, r3
     40e:	0018      	movs	r0, r3
     410:	f7ff fea4 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpWidth = read32(bmpFile);
     414:	238a      	movs	r3, #138	; 0x8a
     416:	005b      	lsls	r3, r3, #1
     418:	18fb      	adds	r3, r7, r3
     41a:	0018      	movs	r0, r3
     41c:	f7ff fe9e 	bl	15c <_Z6read32RN5SDLib4FileE>
     420:	0003      	movs	r3, r0
     422:	22b8      	movs	r2, #184	; 0xb8
     424:	0052      	lsls	r2, r2, #1
     426:	18ba      	adds	r2, r7, r2
     428:	6013      	str	r3, [r2, #0]
		bmpHeight = read32(bmpFile);
     42a:	238a      	movs	r3, #138	; 0x8a
     42c:	005b      	lsls	r3, r3, #1
     42e:	18fb      	adds	r3, r7, r3
     430:	0018      	movs	r0, r3
     432:	f7ff fe93 	bl	15c <_Z6read32RN5SDLib4FileE>
     436:	0003      	movs	r3, r0
     438:	22ce      	movs	r2, #206	; 0xce
     43a:	0052      	lsls	r2, r2, #1
     43c:	18ba      	adds	r2, r7, r2
     43e:	6013      	str	r3, [r2, #0]
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     440:	238a      	movs	r3, #138	; 0x8a
     442:	005b      	lsls	r3, r3, #1
     444:	18fb      	adds	r3, r7, r3
     446:	0018      	movs	r0, r3
     448:	f7ff fe64 	bl	114 <_Z6read16RN5SDLib4FileE>
     44c:	0003      	movs	r3, r0
     44e:	3b01      	subs	r3, #1
     450:	425a      	negs	r2, r3
     452:	4153      	adcs	r3, r2
     454:	b2db      	uxtb	r3, r3
     456:	2b00      	cmp	r3, #0
     458:	d100      	bne.n	45c <_Z10drawBitmapcss+0x1f8>
     45a:	e286      	b.n	96a <_Z10drawBitmapcss+0x706>
			bmpDepth = read16(bmpFile); // bits per pixel
     45c:	238a      	movs	r3, #138	; 0x8a
     45e:	005b      	lsls	r3, r3, #1
     460:	18fb      	adds	r3, r7, r3
     462:	0018      	movs	r0, r3
     464:	f7ff fe56 	bl	114 <_Z6read16RN5SDLib4FileE>
     468:	0003      	movs	r3, r0
     46a:	001a      	movs	r2, r3
     46c:	2370      	movs	r3, #112	; 0x70
     46e:	33ff      	adds	r3, #255	; 0xff
     470:	18fb      	adds	r3, r7, r3
     472:	701a      	strb	r2, [r3, #0]
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     474:	2370      	movs	r3, #112	; 0x70
     476:	33ff      	adds	r3, #255	; 0xff
     478:	18fb      	adds	r3, r7, r3
     47a:	781b      	ldrb	r3, [r3, #0]
     47c:	2b18      	cmp	r3, #24
     47e:	d117      	bne.n	4b0 <_Z10drawBitmapcss+0x24c>
     480:	238a      	movs	r3, #138	; 0x8a
     482:	005b      	lsls	r3, r3, #1
     484:	18fb      	adds	r3, r7, r3
     486:	0018      	movs	r0, r3
     488:	f7ff fe68 	bl	15c <_Z6read32RN5SDLib4FileE>
     48c:	1e03      	subs	r3, r0, #0
     48e:	d10f      	bne.n	4b0 <_Z10drawBitmapcss+0x24c>
     490:	2301      	movs	r3, #1
     492:	e00e      	b.n	4b2 <_Z10drawBitmapcss+0x24e>
     494:	fffffe67 	.word	0xfffffe67
     498:	fffffe64 	.word	0xfffffe64
     49c:	fffffe62 	.word	0xfffffe62
     4a0:	fffffe6c 	.word	0xfffffe6c
     4a4:	20000150 	.word	0x20000150
     4a8:	2000078c 	.word	0x2000078c
     4ac:	ffffb2be 	.word	0xffffb2be
     4b0:	2300      	movs	r3, #0
     4b2:	2b00      	cmp	r3, #0
     4b4:	d100      	bne.n	4b8 <_Z10drawBitmapcss+0x254>
     4b6:	e258      	b.n	96a <_Z10drawBitmapcss+0x706>

				goodBmp = true; // Supported BMP format -- proceed!
     4b8:	237c      	movs	r3, #124	; 0x7c
     4ba:	33ff      	adds	r3, #255	; 0xff
     4bc:	18fb      	adds	r3, r7, r3
     4be:	2201      	movs	r2, #1
     4c0:	701a      	strb	r2, [r3, #0]

				// BMP rows are padded (if needed) to 4-byte boundary
				rowSize = (bmpWidth * 3 + 3) & ~3;
     4c2:	23b8      	movs	r3, #184	; 0xb8
     4c4:	005b      	lsls	r3, r3, #1
     4c6:	18fb      	adds	r3, r7, r3
     4c8:	681b      	ldr	r3, [r3, #0]
     4ca:	1c5a      	adds	r2, r3, #1
     4cc:	0013      	movs	r3, r2
     4ce:	005b      	lsls	r3, r3, #1
     4d0:	189b      	adds	r3, r3, r2
     4d2:	001a      	movs	r2, r3
     4d4:	2303      	movs	r3, #3
     4d6:	439a      	bics	r2, r3
     4d8:	0013      	movs	r3, r2
     4da:	22b4      	movs	r2, #180	; 0xb4
     4dc:	0052      	lsls	r2, r2, #1
     4de:	18ba      	adds	r2, r7, r2
     4e0:	6013      	str	r3, [r2, #0]

				// If bmpHeight is negative, image is in top-down order.
				// This is not canon but has been observed in the wild.
				if (bmpHeight < 0) {
     4e2:	23ce      	movs	r3, #206	; 0xce
     4e4:	005b      	lsls	r3, r3, #1
     4e6:	18fb      	adds	r3, r7, r3
     4e8:	681b      	ldr	r3, [r3, #0]
     4ea:	2b00      	cmp	r3, #0
     4ec:	da0d      	bge.n	50a <_Z10drawBitmapcss+0x2a6>
					bmpHeight = -bmpHeight;
     4ee:	23ce      	movs	r3, #206	; 0xce
     4f0:	005b      	lsls	r3, r3, #1
     4f2:	18fb      	adds	r3, r7, r3
     4f4:	681b      	ldr	r3, [r3, #0]
     4f6:	425b      	negs	r3, r3
     4f8:	22ce      	movs	r2, #206	; 0xce
     4fa:	0052      	lsls	r2, r2, #1
     4fc:	18ba      	adds	r2, r7, r2
     4fe:	6013      	str	r3, [r2, #0]
					flip = false;
     500:	23cd      	movs	r3, #205	; 0xcd
     502:	005b      	lsls	r3, r3, #1
     504:	18fb      	adds	r3, r7, r3
     506:	2200      	movs	r2, #0
     508:	701a      	strb	r2, [r3, #0]
				}

				// Crop area to be loaded
				x2 = x + bmpWidth - 1; // Lower-right corner
     50a:	4b9f      	ldr	r3, [pc, #636]	; (788 <_Z10drawBitmapcss+0x524>)
     50c:	22d0      	movs	r2, #208	; 0xd0
     50e:	0052      	lsls	r2, r2, #1
     510:	4694      	mov	ip, r2
     512:	44bc      	add	ip, r7
     514:	4463      	add	r3, ip
     516:	2200      	movs	r2, #0
     518:	5e9a      	ldrsh	r2, [r3, r2]
     51a:	23b8      	movs	r3, #184	; 0xb8
     51c:	005b      	lsls	r3, r3, #1
     51e:	18fb      	adds	r3, r7, r3
     520:	681b      	ldr	r3, [r3, #0]
     522:	18d3      	adds	r3, r2, r3
     524:	3b01      	subs	r3, #1
     526:	22b2      	movs	r2, #178	; 0xb2
     528:	0052      	lsls	r2, r2, #1
     52a:	18ba      	adds	r2, r7, r2
     52c:	6013      	str	r3, [r2, #0]
				y2 = y + bmpHeight - 1;
     52e:	4b97      	ldr	r3, [pc, #604]	; (78c <_Z10drawBitmapcss+0x528>)
     530:	22d0      	movs	r2, #208	; 0xd0
     532:	0052      	lsls	r2, r2, #1
     534:	4694      	mov	ip, r2
     536:	44bc      	add	ip, r7
     538:	4463      	add	r3, ip
     53a:	2200      	movs	r2, #0
     53c:	5e9a      	ldrsh	r2, [r3, r2]
     53e:	23ce      	movs	r3, #206	; 0xce
     540:	005b      	lsls	r3, r3, #1
     542:	18fb      	adds	r3, r7, r3
     544:	681b      	ldr	r3, [r3, #0]
     546:	18d3      	adds	r3, r2, r3
     548:	3b01      	subs	r3, #1
     54a:	22b0      	movs	r2, #176	; 0xb0
     54c:	0052      	lsls	r2, r2, #1
     54e:	18ba      	adds	r2, r7, r2
     550:	6013      	str	r3, [r2, #0]
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     552:	23b2      	movs	r3, #178	; 0xb2
     554:	005b      	lsls	r3, r3, #1
     556:	18fb      	adds	r3, r7, r3
     558:	681b      	ldr	r3, [r3, #0]
     55a:	2b00      	cmp	r3, #0
     55c:	da00      	bge.n	560 <_Z10drawBitmapcss+0x2fc>
     55e:	e204      	b.n	96a <_Z10drawBitmapcss+0x706>
     560:	23b0      	movs	r3, #176	; 0xb0
     562:	005b      	lsls	r3, r3, #1
     564:	18fb      	adds	r3, r7, r3
     566:	681b      	ldr	r3, [r3, #0]
     568:	2b00      	cmp	r3, #0
     56a:	da00      	bge.n	56e <_Z10drawBitmapcss+0x30a>
     56c:	e1fd      	b.n	96a <_Z10drawBitmapcss+0x706>
					w = bmpWidth; // Width/height of section to load/display
     56e:	23b8      	movs	r3, #184	; 0xb8
     570:	005b      	lsls	r3, r3, #1
     572:	18fb      	adds	r3, r7, r3
     574:	681b      	ldr	r3, [r3, #0]
     576:	22ca      	movs	r2, #202	; 0xca
     578:	0052      	lsls	r2, r2, #1
     57a:	18ba      	adds	r2, r7, r2
     57c:	6013      	str	r3, [r2, #0]
					h = bmpHeight;
     57e:	23ce      	movs	r3, #206	; 0xce
     580:	005b      	lsls	r3, r3, #1
     582:	18fb      	adds	r3, r7, r3
     584:	681b      	ldr	r3, [r3, #0]
     586:	22c8      	movs	r2, #200	; 0xc8
     588:	0052      	lsls	r2, r2, #1
     58a:	18ba      	adds	r2, r7, r2
     58c:	6013      	str	r3, [r2, #0]
					bx1 = by1 = 0; // UL coordinate in BMP file
     58e:	2300      	movs	r3, #0
     590:	22c0      	movs	r2, #192	; 0xc0
     592:	0052      	lsls	r2, r2, #1
     594:	18ba      	adds	r2, r7, r2
     596:	6013      	str	r3, [r2, #0]
     598:	23c0      	movs	r3, #192	; 0xc0
     59a:	005b      	lsls	r3, r3, #1
     59c:	18fb      	adds	r3, r7, r3
     59e:	681b      	ldr	r3, [r3, #0]
     5a0:	22c2      	movs	r2, #194	; 0xc2
     5a2:	0052      	lsls	r2, r2, #1
     5a4:	18ba      	adds	r2, r7, r2
     5a6:	6013      	str	r3, [r2, #0]
					if (x < 0) { // Clip left
     5a8:	4b77      	ldr	r3, [pc, #476]	; (788 <_Z10drawBitmapcss+0x524>)
     5aa:	22d0      	movs	r2, #208	; 0xd0
     5ac:	0052      	lsls	r2, r2, #1
     5ae:	4694      	mov	ip, r2
     5b0:	44bc      	add	ip, r7
     5b2:	4463      	add	r3, ip
     5b4:	2200      	movs	r2, #0
     5b6:	5e9b      	ldrsh	r3, [r3, r2]
     5b8:	2b00      	cmp	r3, #0
     5ba:	da1d      	bge.n	5f8 <_Z10drawBitmapcss+0x394>
						bx1 = -x;
     5bc:	4b72      	ldr	r3, [pc, #456]	; (788 <_Z10drawBitmapcss+0x524>)
     5be:	22d0      	movs	r2, #208	; 0xd0
     5c0:	0052      	lsls	r2, r2, #1
     5c2:	4694      	mov	ip, r2
     5c4:	44bc      	add	ip, r7
     5c6:	4463      	add	r3, ip
     5c8:	2200      	movs	r2, #0
     5ca:	5e9b      	ldrsh	r3, [r3, r2]
     5cc:	425b      	negs	r3, r3
     5ce:	22c2      	movs	r2, #194	; 0xc2
     5d0:	0052      	lsls	r2, r2, #1
     5d2:	18ba      	adds	r2, r7, r2
     5d4:	6013      	str	r3, [r2, #0]
						x = 0;
     5d6:	4b6c      	ldr	r3, [pc, #432]	; (788 <_Z10drawBitmapcss+0x524>)
     5d8:	22d0      	movs	r2, #208	; 0xd0
     5da:	0052      	lsls	r2, r2, #1
     5dc:	4694      	mov	ip, r2
     5de:	44bc      	add	ip, r7
     5e0:	4463      	add	r3, ip
     5e2:	2200      	movs	r2, #0
     5e4:	801a      	strh	r2, [r3, #0]
						w = x2 + 1;
     5e6:	23b2      	movs	r3, #178	; 0xb2
     5e8:	005b      	lsls	r3, r3, #1
     5ea:	18fb      	adds	r3, r7, r3
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	3301      	adds	r3, #1
     5f0:	22ca      	movs	r2, #202	; 0xca
     5f2:	0052      	lsls	r2, r2, #1
     5f4:	18ba      	adds	r2, r7, r2
     5f6:	6013      	str	r3, [r2, #0]
					}
					if (y < 0) { // Clip top
     5f8:	4b64      	ldr	r3, [pc, #400]	; (78c <_Z10drawBitmapcss+0x528>)
     5fa:	22d0      	movs	r2, #208	; 0xd0
     5fc:	0052      	lsls	r2, r2, #1
     5fe:	4694      	mov	ip, r2
     600:	44bc      	add	ip, r7
     602:	4463      	add	r3, ip
     604:	2200      	movs	r2, #0
     606:	5e9b      	ldrsh	r3, [r3, r2]
     608:	2b00      	cmp	r3, #0
     60a:	da1d      	bge.n	648 <_Z10drawBitmapcss+0x3e4>
						by1 = -y;
     60c:	4b5f      	ldr	r3, [pc, #380]	; (78c <_Z10drawBitmapcss+0x528>)
     60e:	22d0      	movs	r2, #208	; 0xd0
     610:	0052      	lsls	r2, r2, #1
     612:	4694      	mov	ip, r2
     614:	44bc      	add	ip, r7
     616:	4463      	add	r3, ip
     618:	2200      	movs	r2, #0
     61a:	5e9b      	ldrsh	r3, [r3, r2]
     61c:	425b      	negs	r3, r3
     61e:	22c0      	movs	r2, #192	; 0xc0
     620:	0052      	lsls	r2, r2, #1
     622:	18ba      	adds	r2, r7, r2
     624:	6013      	str	r3, [r2, #0]
						y = 0;
     626:	4b59      	ldr	r3, [pc, #356]	; (78c <_Z10drawBitmapcss+0x528>)
     628:	22d0      	movs	r2, #208	; 0xd0
     62a:	0052      	lsls	r2, r2, #1
     62c:	4694      	mov	ip, r2
     62e:	44bc      	add	ip, r7
     630:	4463      	add	r3, ip
     632:	2200      	movs	r2, #0
     634:	801a      	strh	r2, [r3, #0]
						h = y2 + 1;
     636:	23b0      	movs	r3, #176	; 0xb0
     638:	005b      	lsls	r3, r3, #1
     63a:	18fb      	adds	r3, r7, r3
     63c:	681b      	ldr	r3, [r3, #0]
     63e:	3301      	adds	r3, #1
     640:	22c8      	movs	r2, #200	; 0xc8
     642:	0052      	lsls	r2, r2, #1
     644:	18ba      	adds	r2, r7, r2
     646:	6013      	str	r3, [r2, #0]
					}
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     648:	4b51      	ldr	r3, [pc, #324]	; (790 <_Z10drawBitmapcss+0x52c>)
     64a:	0018      	movs	r0, r3
     64c:	f00f fb24 	bl	fc98 <_ZNK12Adafruit_GFX5widthEv>
     650:	0003      	movs	r3, r0
     652:	001a      	movs	r2, r3
     654:	23b2      	movs	r3, #178	; 0xb2
     656:	005b      	lsls	r3, r3, #1
     658:	18fb      	adds	r3, r7, r3
     65a:	681b      	ldr	r3, [r3, #0]
     65c:	0fd0      	lsrs	r0, r2, #31
     65e:	17d9      	asrs	r1, r3, #31
     660:	4293      	cmp	r3, r2
     662:	4148      	adcs	r0, r1
     664:	0003      	movs	r3, r0
     666:	b2db      	uxtb	r3, r3
     668:	2b00      	cmp	r3, #0
     66a:	d012      	beq.n	692 <_Z10drawBitmapcss+0x42e>
     66c:	4b48      	ldr	r3, [pc, #288]	; (790 <_Z10drawBitmapcss+0x52c>)
     66e:	0018      	movs	r0, r3
     670:	f00f fb12 	bl	fc98 <_ZNK12Adafruit_GFX5widthEv>
     674:	0003      	movs	r3, r0
     676:	001a      	movs	r2, r3
     678:	4b43      	ldr	r3, [pc, #268]	; (788 <_Z10drawBitmapcss+0x524>)
     67a:	21d0      	movs	r1, #208	; 0xd0
     67c:	0049      	lsls	r1, r1, #1
     67e:	468c      	mov	ip, r1
     680:	44bc      	add	ip, r7
     682:	4463      	add	r3, ip
     684:	2100      	movs	r1, #0
     686:	5e5b      	ldrsh	r3, [r3, r1]
     688:	1ad3      	subs	r3, r2, r3
     68a:	22ca      	movs	r2, #202	; 0xca
     68c:	0052      	lsls	r2, r2, #1
     68e:	18ba      	adds	r2, r7, r2
     690:	6013      	str	r3, [r2, #0]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     692:	4b3f      	ldr	r3, [pc, #252]	; (790 <_Z10drawBitmapcss+0x52c>)
     694:	0018      	movs	r0, r3
     696:	f00f fb03 	bl	fca0 <_ZNK12Adafruit_GFX6heightEv>
     69a:	0003      	movs	r3, r0
     69c:	001a      	movs	r2, r3
     69e:	23b0      	movs	r3, #176	; 0xb0
     6a0:	005b      	lsls	r3, r3, #1
     6a2:	18fb      	adds	r3, r7, r3
     6a4:	681b      	ldr	r3, [r3, #0]
     6a6:	0fd0      	lsrs	r0, r2, #31
     6a8:	17d9      	asrs	r1, r3, #31
     6aa:	4293      	cmp	r3, r2
     6ac:	4148      	adcs	r0, r1
     6ae:	0003      	movs	r3, r0
     6b0:	b2db      	uxtb	r3, r3
     6b2:	2b00      	cmp	r3, #0
     6b4:	d012      	beq.n	6dc <_Z10drawBitmapcss+0x478>
     6b6:	4b36      	ldr	r3, [pc, #216]	; (790 <_Z10drawBitmapcss+0x52c>)
     6b8:	0018      	movs	r0, r3
     6ba:	f00f faf1 	bl	fca0 <_ZNK12Adafruit_GFX6heightEv>
     6be:	0003      	movs	r3, r0
     6c0:	001a      	movs	r2, r3
     6c2:	4b32      	ldr	r3, [pc, #200]	; (78c <_Z10drawBitmapcss+0x528>)
     6c4:	21d0      	movs	r1, #208	; 0xd0
     6c6:	0049      	lsls	r1, r1, #1
     6c8:	468c      	mov	ip, r1
     6ca:	44bc      	add	ip, r7
     6cc:	4463      	add	r3, ip
     6ce:	2100      	movs	r1, #0
     6d0:	5e5b      	ldrsh	r3, [r3, r1]
     6d2:	1ad3      	subs	r3, r2, r3
     6d4:	22c8      	movs	r2, #200	; 0xc8
     6d6:	0052      	lsls	r2, r2, #1
     6d8:	18ba      	adds	r2, r7, r2
     6da:	6013      	str	r3, [r2, #0]

					// Set tftDisplay address window to clipped image bounds
					tftDisplay.startWrite(); // Requires start/end transaction now
     6dc:	4b2c      	ldr	r3, [pc, #176]	; (790 <_Z10drawBitmapcss+0x52c>)
     6de:	0018      	movs	r0, r3
     6e0:	f004 fc98 	bl	5014 <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
     6e4:	4b28      	ldr	r3, [pc, #160]	; (788 <_Z10drawBitmapcss+0x524>)
     6e6:	22d0      	movs	r2, #208	; 0xd0
     6e8:	0052      	lsls	r2, r2, #1
     6ea:	4694      	mov	ip, r2
     6ec:	44bc      	add	ip, r7
     6ee:	4463      	add	r3, ip
     6f0:	8819      	ldrh	r1, [r3, #0]
     6f2:	4b26      	ldr	r3, [pc, #152]	; (78c <_Z10drawBitmapcss+0x528>)
     6f4:	22d0      	movs	r2, #208	; 0xd0
     6f6:	0052      	lsls	r2, r2, #1
     6f8:	4694      	mov	ip, r2
     6fa:	44bc      	add	ip, r7
     6fc:	4463      	add	r3, ip
     6fe:	881a      	ldrh	r2, [r3, #0]
     700:	23ca      	movs	r3, #202	; 0xca
     702:	005b      	lsls	r3, r3, #1
     704:	18fb      	adds	r3, r7, r3
     706:	681b      	ldr	r3, [r3, #0]
     708:	b29c      	uxth	r4, r3
     70a:	23c8      	movs	r3, #200	; 0xc8
     70c:	005b      	lsls	r3, r3, #1
     70e:	18fb      	adds	r3, r7, r3
     710:	681b      	ldr	r3, [r3, #0]
     712:	b29b      	uxth	r3, r3
     714:	481e      	ldr	r0, [pc, #120]	; (790 <_Z10drawBitmapcss+0x52c>)
     716:	9300      	str	r3, [sp, #0]
     718:	0023      	movs	r3, r4
     71a:	f009 fd89 	bl	a230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>

					for (row = 0; row < h; row++) { // For each scanline...
     71e:	2300      	movs	r3, #0
     720:	22c6      	movs	r2, #198	; 0xc6
     722:	0052      	lsls	r2, r2, #1
     724:	18ba      	adds	r2, r7, r2
     726:	6013      	str	r3, [r2, #0]
     728:	23c6      	movs	r3, #198	; 0xc6
     72a:	005b      	lsls	r3, r3, #1
     72c:	18fb      	adds	r3, r7, r3
     72e:	681a      	ldr	r2, [r3, #0]
     730:	23c8      	movs	r3, #200	; 0xc8
     732:	005b      	lsls	r3, r3, #1
     734:	18fb      	adds	r3, r7, r3
     736:	681b      	ldr	r3, [r3, #0]
     738:	429a      	cmp	r2, r3
     73a:	db00      	blt.n	73e <_Z10drawBitmapcss+0x4da>
     73c:	e111      	b.n	962 <_Z10drawBitmapcss+0x6fe>
						// intensive to be doing this on every line, but this
						// method covers a lot of gritty details like cropping
						// and scanline padding.  Also, the seek only takes
						// place if the file position actually needs to change
						// (avoids a lot of cluster math in SD library).
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
     73e:	23cd      	movs	r3, #205	; 0xcd
     740:	005b      	lsls	r3, r3, #1
     742:	18fb      	adds	r3, r7, r3
     744:	781b      	ldrb	r3, [r3, #0]
     746:	2b00      	cmp	r3, #0
     748:	d024      	beq.n	794 <_Z10drawBitmapcss+0x530>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
     74a:	23ce      	movs	r3, #206	; 0xce
     74c:	005b      	lsls	r3, r3, #1
     74e:	18fb      	adds	r3, r7, r3
     750:	681b      	ldr	r3, [r3, #0]
     752:	1e5a      	subs	r2, r3, #1
     754:	23c6      	movs	r3, #198	; 0xc6
     756:	005b      	lsls	r3, r3, #1
     758:	18fb      	adds	r3, r7, r3
     75a:	6819      	ldr	r1, [r3, #0]
     75c:	23c0      	movs	r3, #192	; 0xc0
     75e:	005b      	lsls	r3, r3, #1
     760:	18fb      	adds	r3, r7, r3
     762:	681b      	ldr	r3, [r3, #0]
     764:	18cb      	adds	r3, r1, r3
     766:	1ad3      	subs	r3, r2, r3
     768:	001a      	movs	r2, r3
     76a:	23b4      	movs	r3, #180	; 0xb4
     76c:	005b      	lsls	r3, r3, #1
     76e:	18fb      	adds	r3, r7, r3
     770:	681b      	ldr	r3, [r3, #0]
     772:	435a      	muls	r2, r3
     774:	23ba      	movs	r3, #186	; 0xba
     776:	005b      	lsls	r3, r3, #1
     778:	18fb      	adds	r3, r7, r3
     77a:	681b      	ldr	r3, [r3, #0]
     77c:	18d3      	adds	r3, r2, r3
     77e:	22be      	movs	r2, #190	; 0xbe
     780:	0052      	lsls	r2, r2, #1
     782:	18ba      	adds	r2, r7, r2
     784:	6013      	str	r3, [r2, #0]
     786:	e01d      	b.n	7c4 <_Z10drawBitmapcss+0x560>
     788:	fffffe64 	.word	0xfffffe64
     78c:	fffffe62 	.word	0xfffffe62
     790:	20000150 	.word	0x20000150
						else
						// Bitmap is stored top-to-bottom
						pos = bmpImageoffset + (row + by1) * rowSize;
     794:	23c6      	movs	r3, #198	; 0xc6
     796:	005b      	lsls	r3, r3, #1
     798:	18fb      	adds	r3, r7, r3
     79a:	681a      	ldr	r2, [r3, #0]
     79c:	23c0      	movs	r3, #192	; 0xc0
     79e:	005b      	lsls	r3, r3, #1
     7a0:	18fb      	adds	r3, r7, r3
     7a2:	681b      	ldr	r3, [r3, #0]
     7a4:	18d3      	adds	r3, r2, r3
     7a6:	001a      	movs	r2, r3
     7a8:	23b4      	movs	r3, #180	; 0xb4
     7aa:	005b      	lsls	r3, r3, #1
     7ac:	18fb      	adds	r3, r7, r3
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	435a      	muls	r2, r3
     7b2:	23ba      	movs	r3, #186	; 0xba
     7b4:	005b      	lsls	r3, r3, #1
     7b6:	18fb      	adds	r3, r7, r3
     7b8:	681b      	ldr	r3, [r3, #0]
     7ba:	18d3      	adds	r3, r2, r3
     7bc:	22be      	movs	r2, #190	; 0xbe
     7be:	0052      	lsls	r2, r2, #1
     7c0:	18ba      	adds	r2, r7, r2
     7c2:	6013      	str	r3, [r2, #0]
						pos += bx1 * 3; // Factor in starting column (bx1)
     7c4:	23c2      	movs	r3, #194	; 0xc2
     7c6:	005b      	lsls	r3, r3, #1
     7c8:	18fb      	adds	r3, r7, r3
     7ca:	681a      	ldr	r2, [r3, #0]
     7cc:	0013      	movs	r3, r2
     7ce:	005b      	lsls	r3, r3, #1
     7d0:	189b      	adds	r3, r3, r2
     7d2:	001a      	movs	r2, r3
     7d4:	23be      	movs	r3, #190	; 0xbe
     7d6:	005b      	lsls	r3, r3, #1
     7d8:	18fb      	adds	r3, r7, r3
     7da:	681b      	ldr	r3, [r3, #0]
     7dc:	189b      	adds	r3, r3, r2
     7de:	22be      	movs	r2, #190	; 0xbe
     7e0:	0052      	lsls	r2, r2, #1
     7e2:	18ba      	adds	r2, r7, r2
     7e4:	6013      	str	r3, [r2, #0]
						if (bmpFile.position() != pos) { // Need seek?
     7e6:	238a      	movs	r3, #138	; 0x8a
     7e8:	005b      	lsls	r3, r3, #1
     7ea:	18fb      	adds	r3, r7, r3
     7ec:	0018      	movs	r0, r3
     7ee:	f00b ffe9 	bl	c7c4 <_ZN5SDLib4File8positionEv>
     7f2:	0002      	movs	r2, r0
     7f4:	23be      	movs	r3, #190	; 0xbe
     7f6:	005b      	lsls	r3, r3, #1
     7f8:	18fb      	adds	r3, r7, r3
     7fa:	681b      	ldr	r3, [r3, #0]
     7fc:	1ad3      	subs	r3, r2, r3
     7fe:	1e5a      	subs	r2, r3, #1
     800:	4193      	sbcs	r3, r2
     802:	b2db      	uxtb	r3, r3
     804:	2b00      	cmp	r3, #0
     806:	d017      	beq.n	838 <_Z10drawBitmapcss+0x5d4>
							tftDisplay.endWrite(); // End tftDisplay transaction
     808:	4b5d      	ldr	r3, [pc, #372]	; (980 <_Z10drawBitmapcss+0x71c>)
     80a:	0018      	movs	r0, r3
     80c:	f004 fbd2 	bl	4fb4 <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
     810:	23be      	movs	r3, #190	; 0xbe
     812:	005b      	lsls	r3, r3, #1
     814:	18fb      	adds	r3, r7, r3
     816:	681a      	ldr	r2, [r3, #0]
     818:	238a      	movs	r3, #138	; 0x8a
     81a:	005b      	lsls	r3, r3, #1
     81c:	18fb      	adds	r3, r7, r3
     81e:	0011      	movs	r1, r2
     820:	0018      	movs	r0, r3
     822:	f00b ffc3 	bl	c7ac <_ZN5SDLib4File4seekEm>
							buffidx = sizeof(sdbuffer); // Force buffer reload
     826:	239c      	movs	r3, #156	; 0x9c
     828:	33ff      	adds	r3, #255	; 0xff
     82a:	18fb      	adds	r3, r7, r3
     82c:	22ff      	movs	r2, #255	; 0xff
     82e:	701a      	strb	r2, [r3, #0]
							tftDisplay.startWrite(); // Start new tftDisplay transaction
     830:	4b53      	ldr	r3, [pc, #332]	; (980 <_Z10drawBitmapcss+0x71c>)
     832:	0018      	movs	r0, r3
     834:	f004 fbee 	bl	5014 <_ZN16Adafruit_ILI934110startWriteEv>
						}
						for (col = 0; col < w; col++) { // For each pixel...
     838:	2300      	movs	r3, #0
     83a:	22c4      	movs	r2, #196	; 0xc4
     83c:	0052      	lsls	r2, r2, #1
     83e:	18ba      	adds	r2, r7, r2
     840:	6013      	str	r3, [r2, #0]
     842:	23c4      	movs	r3, #196	; 0xc4
     844:	005b      	lsls	r3, r3, #1
     846:	18fb      	adds	r3, r7, r3
     848:	681a      	ldr	r2, [r3, #0]
     84a:	23ca      	movs	r3, #202	; 0xca
     84c:	005b      	lsls	r3, r3, #1
     84e:	18fb      	adds	r3, r7, r3
     850:	681b      	ldr	r3, [r3, #0]
     852:	429a      	cmp	r2, r3
     854:	da7b      	bge.n	94e <_Z10drawBitmapcss+0x6ea>
							// Time to read more pixel data?
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
     856:	239c      	movs	r3, #156	; 0x9c
     858:	33ff      	adds	r3, #255	; 0xff
     85a:	18fb      	adds	r3, r7, r3
     85c:	781b      	ldrb	r3, [r3, #0]
     85e:	2bff      	cmp	r3, #255	; 0xff
     860:	d115      	bne.n	88e <_Z10drawBitmapcss+0x62a>
								tftDisplay.endWrite(); // End tftDisplay transaction
     862:	4b47      	ldr	r3, [pc, #284]	; (980 <_Z10drawBitmapcss+0x71c>)
     864:	0018      	movs	r0, r3
     866:	f004 fba5 	bl	4fb4 <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
     86a:	2314      	movs	r3, #20
     86c:	18f9      	adds	r1, r7, r3
     86e:	238a      	movs	r3, #138	; 0x8a
     870:	005b      	lsls	r3, r3, #1
     872:	18fb      	adds	r3, r7, r3
     874:	22ff      	movs	r2, #255	; 0xff
     876:	0018      	movs	r0, r3
     878:	f00b ff8e 	bl	c798 <_ZN5SDLib4File4readEPvt>
								buffidx = 0; // Set index to beginning
     87c:	239c      	movs	r3, #156	; 0x9c
     87e:	33ff      	adds	r3, #255	; 0xff
     880:	18fb      	adds	r3, r7, r3
     882:	2200      	movs	r2, #0
     884:	701a      	strb	r2, [r3, #0]
								tftDisplay.startWrite(); // Start new tftDisplay transaction
     886:	4b3e      	ldr	r3, [pc, #248]	; (980 <_Z10drawBitmapcss+0x71c>)
     888:	0018      	movs	r0, r3
     88a:	f004 fbc3 	bl	5014 <_ZN16Adafruit_ILI934110startWriteEv>
							}
							// Convert pixel from BMP to tftDisplay format, push to display
							b = sdbuffer[buffidx++];
     88e:	239c      	movs	r3, #156	; 0x9c
     890:	33ff      	adds	r3, #255	; 0xff
     892:	18fb      	adds	r3, r7, r3
     894:	781b      	ldrb	r3, [r3, #0]
     896:	229c      	movs	r2, #156	; 0x9c
     898:	32ff      	adds	r2, #255	; 0xff
     89a:	18ba      	adds	r2, r7, r2
     89c:	1c59      	adds	r1, r3, #1
     89e:	7011      	strb	r1, [r2, #0]
     8a0:	0019      	movs	r1, r3
     8a2:	2360      	movs	r3, #96	; 0x60
     8a4:	33ff      	adds	r3, #255	; 0xff
     8a6:	18fb      	adds	r3, r7, r3
     8a8:	4a36      	ldr	r2, [pc, #216]	; (984 <_Z10drawBitmapcss+0x720>)
     8aa:	20d0      	movs	r0, #208	; 0xd0
     8ac:	0040      	lsls	r0, r0, #1
     8ae:	4684      	mov	ip, r0
     8b0:	44bc      	add	ip, r7
     8b2:	4462      	add	r2, ip
     8b4:	5c52      	ldrb	r2, [r2, r1]
     8b6:	701a      	strb	r2, [r3, #0]
							g = sdbuffer[buffidx++];
     8b8:	239c      	movs	r3, #156	; 0x9c
     8ba:	33ff      	adds	r3, #255	; 0xff
     8bc:	18fb      	adds	r3, r7, r3
     8be:	781b      	ldrb	r3, [r3, #0]
     8c0:	229c      	movs	r2, #156	; 0x9c
     8c2:	32ff      	adds	r2, #255	; 0xff
     8c4:	18ba      	adds	r2, r7, r2
     8c6:	1c59      	adds	r1, r3, #1
     8c8:	7011      	strb	r1, [r2, #0]
     8ca:	0019      	movs	r1, r3
     8cc:	23af      	movs	r3, #175	; 0xaf
     8ce:	005b      	lsls	r3, r3, #1
     8d0:	18fb      	adds	r3, r7, r3
     8d2:	4a2c      	ldr	r2, [pc, #176]	; (984 <_Z10drawBitmapcss+0x720>)
     8d4:	20d0      	movs	r0, #208	; 0xd0
     8d6:	0040      	lsls	r0, r0, #1
     8d8:	4684      	mov	ip, r0
     8da:	44bc      	add	ip, r7
     8dc:	4462      	add	r2, ip
     8de:	5c52      	ldrb	r2, [r2, r1]
     8e0:	701a      	strb	r2, [r3, #0]
							r = sdbuffer[buffidx++];
     8e2:	239c      	movs	r3, #156	; 0x9c
     8e4:	33ff      	adds	r3, #255	; 0xff
     8e6:	18fb      	adds	r3, r7, r3
     8e8:	781b      	ldrb	r3, [r3, #0]
     8ea:	229c      	movs	r2, #156	; 0x9c
     8ec:	32ff      	adds	r2, #255	; 0xff
     8ee:	18ba      	adds	r2, r7, r2
     8f0:	1c59      	adds	r1, r3, #1
     8f2:	7011      	strb	r1, [r2, #0]
     8f4:	0019      	movs	r1, r3
     8f6:	235e      	movs	r3, #94	; 0x5e
     8f8:	33ff      	adds	r3, #255	; 0xff
     8fa:	18fb      	adds	r3, r7, r3
     8fc:	4a21      	ldr	r2, [pc, #132]	; (984 <_Z10drawBitmapcss+0x720>)
     8fe:	20d0      	movs	r0, #208	; 0xd0
     900:	0040      	lsls	r0, r0, #1
     902:	4684      	mov	ip, r0
     904:	44bc      	add	ip, r7
     906:	4462      	add	r2, ip
     908:	5c52      	ldrb	r2, [r2, r1]
     90a:	701a      	strb	r2, [r3, #0]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
     90c:	2360      	movs	r3, #96	; 0x60
     90e:	33ff      	adds	r3, #255	; 0xff
     910:	18fb      	adds	r3, r7, r3
     912:	781c      	ldrb	r4, [r3, #0]
     914:	23af      	movs	r3, #175	; 0xaf
     916:	005b      	lsls	r3, r3, #1
     918:	18fb      	adds	r3, r7, r3
     91a:	781a      	ldrb	r2, [r3, #0]
     91c:	235e      	movs	r3, #94	; 0x5e
     91e:	33ff      	adds	r3, #255	; 0xff
     920:	18fb      	adds	r3, r7, r3
     922:	7819      	ldrb	r1, [r3, #0]
     924:	4816      	ldr	r0, [pc, #88]	; (980 <_Z10drawBitmapcss+0x71c>)
     926:	0023      	movs	r3, r4
     928:	f004 fed8 	bl	56dc <_ZN16Adafruit_ILI93418color565Ehhh>
     92c:	0003      	movs	r3, r0
     92e:	001a      	movs	r2, r3
     930:	4b13      	ldr	r3, [pc, #76]	; (980 <_Z10drawBitmapcss+0x71c>)
     932:	0011      	movs	r1, r2
     934:	0018      	movs	r0, r3
     936:	f00b fd23 	bl	c380 <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
     93a:	23c4      	movs	r3, #196	; 0xc4
     93c:	005b      	lsls	r3, r3, #1
     93e:	18fb      	adds	r3, r7, r3
     940:	681b      	ldr	r3, [r3, #0]
     942:	3301      	adds	r3, #1
     944:	22c4      	movs	r2, #196	; 0xc4
     946:	0052      	lsls	r2, r2, #1
     948:	18ba      	adds	r2, r7, r2
     94a:	6013      	str	r3, [r2, #0]
     94c:	e779      	b.n	842 <_Z10drawBitmapcss+0x5de>
					for (row = 0; row < h; row++) { // For each scanline...
     94e:	23c6      	movs	r3, #198	; 0xc6
     950:	005b      	lsls	r3, r3, #1
     952:	18fb      	adds	r3, r7, r3
     954:	681b      	ldr	r3, [r3, #0]
     956:	3301      	adds	r3, #1
     958:	22c6      	movs	r2, #198	; 0xc6
     95a:	0052      	lsls	r2, r2, #1
     95c:	18ba      	adds	r2, r7, r2
     95e:	6013      	str	r3, [r2, #0]
     960:	e6e2      	b.n	728 <_Z10drawBitmapcss+0x4c4>
						} // end pixel
					} // end scanline
					tftDisplay.endWrite(); // End last tftDisplay transaction
     962:	4b07      	ldr	r3, [pc, #28]	; (980 <_Z10drawBitmapcss+0x71c>)
     964:	0018      	movs	r0, r3
     966:	f004 fb25 	bl	4fb4 <_ZN16Adafruit_ILI93418endWriteEv>
				} // end onscreen
			} // end goodBmp
		}
	}
	bmpFile.close();
     96a:	238a      	movs	r3, #138	; 0x8a
     96c:	005b      	lsls	r3, r3, #1
     96e:	18fb      	adds	r3, r7, r3
     970:	0018      	movs	r0, r3
     972:	f00b ff2f 	bl	c7d4 <_ZN5SDLib4File5closeEv>
     976:	e000      	b.n	97a <_Z10drawBitmapcss+0x716>
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     978:	46c0      	nop			; (mov r8, r8)
}
     97a:	46bd      	mov	sp, r7
     97c:	b069      	add	sp, #420	; 0x1a4
     97e:	bd90      	pop	{r4, r7, pc}
     980:	20000150 	.word	0x20000150
     984:	fffffe74 	.word	0xfffffe74

00000988 <_Z10drawBitmapPcss>:

void drawBitmap(char* filename, int16_t x, int16_t y) {
     988:	b590      	push	{r4, r7, lr}
     98a:	b0e9      	sub	sp, #420	; 0x1a4
     98c:	af02      	add	r7, sp, #8
     98e:	6078      	str	r0, [r7, #4]
     990:	0008      	movs	r0, r1
     992:	0011      	movs	r1, r2
     994:	4b67      	ldr	r3, [pc, #412]	; (b34 <_Z10drawBitmapPcss+0x1ac>)
     996:	22cc      	movs	r2, #204	; 0xcc
     998:	0052      	lsls	r2, r2, #1
     99a:	4694      	mov	ip, r2
     99c:	44bc      	add	ip, r7
     99e:	4463      	add	r3, ip
     9a0:	1c02      	adds	r2, r0, #0
     9a2:	801a      	strh	r2, [r3, #0]
     9a4:	4b64      	ldr	r3, [pc, #400]	; (b38 <_Z10drawBitmapPcss+0x1b0>)
     9a6:	22cc      	movs	r2, #204	; 0xcc
     9a8:	0052      	lsls	r2, r2, #1
     9aa:	4694      	mov	ip, r2
     9ac:	44bc      	add	ip, r7
     9ae:	4463      	add	r3, ip
     9b0:	1c0a      	adds	r2, r1, #0
     9b2:	801a      	strh	r2, [r3, #0]

	File bmpFile;
     9b4:	2386      	movs	r3, #134	; 0x86
     9b6:	005b      	lsls	r3, r3, #1
     9b8:	18fb      	adds	r3, r7, r3
     9ba:	0018      	movs	r0, r3
     9bc:	f00b fede 	bl	c77c <_ZN5SDLib4FileC1Ev>
	int bmpWidth, bmpHeight;   // W+H in pixels
	uint8_t bmpDepth;              // Bit depth (currently must be 24)
	uint32_t bmpImageoffset;        // Start of image data in file
	uint32_t rowSize;               // Not always = bmpWidth; may have padding
	uint8_t sdbuffer[3 * BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     9c0:	2394      	movs	r3, #148	; 0x94
     9c2:	33ff      	adds	r3, #255	; 0xff
     9c4:	18fb      	adds	r3, r7, r3
     9c6:	22ff      	movs	r2, #255	; 0xff
     9c8:	701a      	strb	r2, [r3, #0]
	boolean goodBmp = false;       // Set to true on valid header parse
     9ca:	2374      	movs	r3, #116	; 0x74
     9cc:	33ff      	adds	r3, #255	; 0xff
     9ce:	18fb      	adds	r3, r7, r3
     9d0:	2200      	movs	r2, #0
     9d2:	701a      	strb	r2, [r3, #0]
	boolean flip = true;        // BMP is stored bottom-to-top
     9d4:	23c9      	movs	r3, #201	; 0xc9
     9d6:	005b      	lsls	r3, r3, #1
     9d8:	18fb      	adds	r3, r7, r3
     9da:	2201      	movs	r2, #1
     9dc:	701a      	strb	r2, [r3, #0]
	int w, h, row, col, x2, y2, bx1, by1;
	uint8_t r, g, b;
	uint32_t pos = 0;
     9de:	2300      	movs	r3, #0
     9e0:	22ba      	movs	r2, #186	; 0xba
     9e2:	0052      	lsls	r2, r2, #1
     9e4:	18ba      	adds	r2, r7, r2
     9e6:	6013      	str	r3, [r2, #0]

	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     9e8:	4b54      	ldr	r3, [pc, #336]	; (b3c <_Z10drawBitmapPcss+0x1b4>)
     9ea:	0018      	movs	r0, r3
     9ec:	f00f f954 	bl	fc98 <_ZNK12Adafruit_GFX5widthEv>
     9f0:	0003      	movs	r3, r0
     9f2:	001a      	movs	r2, r3
     9f4:	4b4f      	ldr	r3, [pc, #316]	; (b34 <_Z10drawBitmapPcss+0x1ac>)
     9f6:	21cc      	movs	r1, #204	; 0xcc
     9f8:	0049      	lsls	r1, r1, #1
     9fa:	468c      	mov	ip, r1
     9fc:	44bc      	add	ip, r7
     9fe:	4463      	add	r3, ip
     a00:	2100      	movs	r1, #0
     a02:	5e5b      	ldrsh	r3, [r3, r1]
     a04:	4293      	cmp	r3, r2
     a06:	da0f      	bge.n	a28 <_Z10drawBitmapPcss+0xa0>
     a08:	4b4c      	ldr	r3, [pc, #304]	; (b3c <_Z10drawBitmapPcss+0x1b4>)
     a0a:	0018      	movs	r0, r3
     a0c:	f00f f948 	bl	fca0 <_ZNK12Adafruit_GFX6heightEv>
     a10:	0003      	movs	r3, r0
     a12:	001a      	movs	r2, r3
     a14:	4b48      	ldr	r3, [pc, #288]	; (b38 <_Z10drawBitmapPcss+0x1b0>)
     a16:	21cc      	movs	r1, #204	; 0xcc
     a18:	0049      	lsls	r1, r1, #1
     a1a:	468c      	mov	ip, r1
     a1c:	44bc      	add	ip, r7
     a1e:	4463      	add	r3, ip
     a20:	2100      	movs	r1, #0
     a22:	5e5b      	ldrsh	r3, [r3, r1]
     a24:	4293      	cmp	r3, r2
     a26:	db01      	blt.n	a2c <_Z10drawBitmapPcss+0xa4>
     a28:	2301      	movs	r3, #1
     a2a:	e000      	b.n	a2e <_Z10drawBitmapPcss+0xa6>
     a2c:	2300      	movs	r3, #0
     a2e:	2b00      	cmp	r3, #0
     a30:	d000      	beq.n	a34 <_Z10drawBitmapPcss+0xac>
     a32:	e2ed      	b.n	1010 <_Z10drawBitmapPcss+0x688>

	// Open requested file on SD card
	bmpFile = SD.open(filename);
     a34:	2398      	movs	r3, #152	; 0x98
     a36:	005b      	lsls	r3, r3, #1
     a38:	18f8      	adds	r0, r7, r3
     a3a:	687a      	ldr	r2, [r7, #4]
     a3c:	4940      	ldr	r1, [pc, #256]	; (b40 <_Z10drawBitmapPcss+0x1b8>)
     a3e:	2301      	movs	r3, #1
     a40:	f00b ff84 	bl	c94c <_ZN5SDLib7SDClass4openEPKch>
     a44:	2398      	movs	r3, #152	; 0x98
     a46:	005b      	lsls	r3, r3, #1
     a48:	18fa      	adds	r2, r7, r3
     a4a:	2386      	movs	r3, #134	; 0x86
     a4c:	005b      	lsls	r3, r3, #1
     a4e:	18fb      	adds	r3, r7, r3
     a50:	0011      	movs	r1, r2
     a52:	0018      	movs	r0, r3
     a54:	f7ff fbe4 	bl	220 <_ZN5SDLib4FileaSEOS0_>

	// Parse BMP header
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     a58:	2386      	movs	r3, #134	; 0x86
     a5a:	005b      	lsls	r3, r3, #1
     a5c:	18fb      	adds	r3, r7, r3
     a5e:	0018      	movs	r0, r3
     a60:	f7ff fb58 	bl	114 <_Z6read16RN5SDLib4FileE>
     a64:	0003      	movs	r3, r0
     a66:	4a37      	ldr	r2, [pc, #220]	; (b44 <_Z10drawBitmapPcss+0x1bc>)
     a68:	4694      	mov	ip, r2
     a6a:	4463      	add	r3, ip
     a6c:	425a      	negs	r2, r3
     a6e:	4153      	adcs	r3, r2
     a70:	b2db      	uxtb	r3, r3
     a72:	2b00      	cmp	r3, #0
     a74:	d100      	bne.n	a78 <_Z10drawBitmapPcss+0xf0>
     a76:	e2c4      	b.n	1002 <_Z10drawBitmapPcss+0x67a>
		read32(bmpFile); // Read file size
     a78:	2386      	movs	r3, #134	; 0x86
     a7a:	005b      	lsls	r3, r3, #1
     a7c:	18fb      	adds	r3, r7, r3
     a7e:	0018      	movs	r0, r3
     a80:	f7ff fb6c 	bl	15c <_Z6read32RN5SDLib4FileE>
		(void) read32(bmpFile); // Read & ignore creator bytes
     a84:	2386      	movs	r3, #134	; 0x86
     a86:	005b      	lsls	r3, r3, #1
     a88:	18fb      	adds	r3, r7, r3
     a8a:	0018      	movs	r0, r3
     a8c:	f7ff fb66 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     a90:	2386      	movs	r3, #134	; 0x86
     a92:	005b      	lsls	r3, r3, #1
     a94:	18fb      	adds	r3, r7, r3
     a96:	0018      	movs	r0, r3
     a98:	f7ff fb60 	bl	15c <_Z6read32RN5SDLib4FileE>
     a9c:	0003      	movs	r3, r0
     a9e:	22b6      	movs	r2, #182	; 0xb6
     aa0:	0052      	lsls	r2, r2, #1
     aa2:	18ba      	adds	r2, r7, r2
     aa4:	6013      	str	r3, [r2, #0]
		read32(bmpFile); // Read DIB header
     aa6:	2386      	movs	r3, #134	; 0x86
     aa8:	005b      	lsls	r3, r3, #1
     aaa:	18fb      	adds	r3, r7, r3
     aac:	0018      	movs	r0, r3
     aae:	f7ff fb55 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpWidth = read32(bmpFile);
     ab2:	2386      	movs	r3, #134	; 0x86
     ab4:	005b      	lsls	r3, r3, #1
     ab6:	18fb      	adds	r3, r7, r3
     ab8:	0018      	movs	r0, r3
     aba:	f7ff fb4f 	bl	15c <_Z6read32RN5SDLib4FileE>
     abe:	0003      	movs	r3, r0
     ac0:	22b4      	movs	r2, #180	; 0xb4
     ac2:	0052      	lsls	r2, r2, #1
     ac4:	18ba      	adds	r2, r7, r2
     ac6:	6013      	str	r3, [r2, #0]
		bmpHeight = read32(bmpFile);
     ac8:	2386      	movs	r3, #134	; 0x86
     aca:	005b      	lsls	r3, r3, #1
     acc:	18fb      	adds	r3, r7, r3
     ace:	0018      	movs	r0, r3
     ad0:	f7ff fb44 	bl	15c <_Z6read32RN5SDLib4FileE>
     ad4:	0003      	movs	r3, r0
     ad6:	22ca      	movs	r2, #202	; 0xca
     ad8:	0052      	lsls	r2, r2, #1
     ada:	18ba      	adds	r2, r7, r2
     adc:	6013      	str	r3, [r2, #0]
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     ade:	2386      	movs	r3, #134	; 0x86
     ae0:	005b      	lsls	r3, r3, #1
     ae2:	18fb      	adds	r3, r7, r3
     ae4:	0018      	movs	r0, r3
     ae6:	f7ff fb15 	bl	114 <_Z6read16RN5SDLib4FileE>
     aea:	0003      	movs	r3, r0
     aec:	3b01      	subs	r3, #1
     aee:	425a      	negs	r2, r3
     af0:	4153      	adcs	r3, r2
     af2:	b2db      	uxtb	r3, r3
     af4:	2b00      	cmp	r3, #0
     af6:	d100      	bne.n	afa <_Z10drawBitmapPcss+0x172>
     af8:	e283      	b.n	1002 <_Z10drawBitmapPcss+0x67a>
			bmpDepth = read16(bmpFile); // bits per pixel
     afa:	2386      	movs	r3, #134	; 0x86
     afc:	005b      	lsls	r3, r3, #1
     afe:	18fb      	adds	r3, r7, r3
     b00:	0018      	movs	r0, r3
     b02:	f7ff fb07 	bl	114 <_Z6read16RN5SDLib4FileE>
     b06:	0003      	movs	r3, r0
     b08:	001a      	movs	r2, r3
     b0a:	2368      	movs	r3, #104	; 0x68
     b0c:	33ff      	adds	r3, #255	; 0xff
     b0e:	18fb      	adds	r3, r7, r3
     b10:	701a      	strb	r2, [r3, #0]
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     b12:	2368      	movs	r3, #104	; 0x68
     b14:	33ff      	adds	r3, #255	; 0xff
     b16:	18fb      	adds	r3, r7, r3
     b18:	781b      	ldrb	r3, [r3, #0]
     b1a:	2b18      	cmp	r3, #24
     b1c:	d114      	bne.n	b48 <_Z10drawBitmapPcss+0x1c0>
     b1e:	2386      	movs	r3, #134	; 0x86
     b20:	005b      	lsls	r3, r3, #1
     b22:	18fb      	adds	r3, r7, r3
     b24:	0018      	movs	r0, r3
     b26:	f7ff fb19 	bl	15c <_Z6read32RN5SDLib4FileE>
     b2a:	1e03      	subs	r3, r0, #0
     b2c:	d10c      	bne.n	b48 <_Z10drawBitmapPcss+0x1c0>
     b2e:	2301      	movs	r3, #1
     b30:	e00b      	b.n	b4a <_Z10drawBitmapPcss+0x1c2>
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	fffffe6a 	.word	0xfffffe6a
     b38:	fffffe68 	.word	0xfffffe68
     b3c:	20000150 	.word	0x20000150
     b40:	2000078c 	.word	0x2000078c
     b44:	ffffb2be 	.word	0xffffb2be
     b48:	2300      	movs	r3, #0
     b4a:	2b00      	cmp	r3, #0
     b4c:	d100      	bne.n	b50 <_Z10drawBitmapPcss+0x1c8>
     b4e:	e258      	b.n	1002 <_Z10drawBitmapPcss+0x67a>

				goodBmp = true; // Supported BMP format -- proceed!
     b50:	2374      	movs	r3, #116	; 0x74
     b52:	33ff      	adds	r3, #255	; 0xff
     b54:	18fb      	adds	r3, r7, r3
     b56:	2201      	movs	r2, #1
     b58:	701a      	strb	r2, [r3, #0]

				// BMP rows are padded (if needed) to 4-byte boundary
				rowSize = (bmpWidth * 3 + 3) & ~3;
     b5a:	23b4      	movs	r3, #180	; 0xb4
     b5c:	005b      	lsls	r3, r3, #1
     b5e:	18fb      	adds	r3, r7, r3
     b60:	681b      	ldr	r3, [r3, #0]
     b62:	1c5a      	adds	r2, r3, #1
     b64:	0013      	movs	r3, r2
     b66:	005b      	lsls	r3, r3, #1
     b68:	189b      	adds	r3, r3, r2
     b6a:	001a      	movs	r2, r3
     b6c:	2303      	movs	r3, #3
     b6e:	439a      	bics	r2, r3
     b70:	0013      	movs	r3, r2
     b72:	22b0      	movs	r2, #176	; 0xb0
     b74:	0052      	lsls	r2, r2, #1
     b76:	18ba      	adds	r2, r7, r2
     b78:	6013      	str	r3, [r2, #0]

				// If bmpHeight is negative, image is in top-down order.
				// This is not canon but has been observed in the wild.
				if (bmpHeight < 0) {
     b7a:	23ca      	movs	r3, #202	; 0xca
     b7c:	005b      	lsls	r3, r3, #1
     b7e:	18fb      	adds	r3, r7, r3
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	2b00      	cmp	r3, #0
     b84:	da0d      	bge.n	ba2 <_Z10drawBitmapPcss+0x21a>
					bmpHeight = -bmpHeight;
     b86:	23ca      	movs	r3, #202	; 0xca
     b88:	005b      	lsls	r3, r3, #1
     b8a:	18fb      	adds	r3, r7, r3
     b8c:	681b      	ldr	r3, [r3, #0]
     b8e:	425b      	negs	r3, r3
     b90:	22ca      	movs	r2, #202	; 0xca
     b92:	0052      	lsls	r2, r2, #1
     b94:	18ba      	adds	r2, r7, r2
     b96:	6013      	str	r3, [r2, #0]
					flip = false;
     b98:	23c9      	movs	r3, #201	; 0xc9
     b9a:	005b      	lsls	r3, r3, #1
     b9c:	18fb      	adds	r3, r7, r3
     b9e:	2200      	movs	r2, #0
     ba0:	701a      	strb	r2, [r3, #0]
				}

				// Crop area to be loaded
				x2 = x + bmpWidth - 1; // Lower-right corner
     ba2:	4b9f      	ldr	r3, [pc, #636]	; (e20 <_Z10drawBitmapPcss+0x498>)
     ba4:	22cc      	movs	r2, #204	; 0xcc
     ba6:	0052      	lsls	r2, r2, #1
     ba8:	4694      	mov	ip, r2
     baa:	44bc      	add	ip, r7
     bac:	4463      	add	r3, ip
     bae:	2200      	movs	r2, #0
     bb0:	5e9a      	ldrsh	r2, [r3, r2]
     bb2:	23b4      	movs	r3, #180	; 0xb4
     bb4:	005b      	lsls	r3, r3, #1
     bb6:	18fb      	adds	r3, r7, r3
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	18d3      	adds	r3, r2, r3
     bbc:	3b01      	subs	r3, #1
     bbe:	22ae      	movs	r2, #174	; 0xae
     bc0:	0052      	lsls	r2, r2, #1
     bc2:	18ba      	adds	r2, r7, r2
     bc4:	6013      	str	r3, [r2, #0]
				y2 = y + bmpHeight - 1;
     bc6:	4b97      	ldr	r3, [pc, #604]	; (e24 <_Z10drawBitmapPcss+0x49c>)
     bc8:	22cc      	movs	r2, #204	; 0xcc
     bca:	0052      	lsls	r2, r2, #1
     bcc:	4694      	mov	ip, r2
     bce:	44bc      	add	ip, r7
     bd0:	4463      	add	r3, ip
     bd2:	2200      	movs	r2, #0
     bd4:	5e9a      	ldrsh	r2, [r3, r2]
     bd6:	23ca      	movs	r3, #202	; 0xca
     bd8:	005b      	lsls	r3, r3, #1
     bda:	18fb      	adds	r3, r7, r3
     bdc:	681b      	ldr	r3, [r3, #0]
     bde:	18d3      	adds	r3, r2, r3
     be0:	3b01      	subs	r3, #1
     be2:	22ac      	movs	r2, #172	; 0xac
     be4:	0052      	lsls	r2, r2, #1
     be6:	18ba      	adds	r2, r7, r2
     be8:	6013      	str	r3, [r2, #0]
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     bea:	23ae      	movs	r3, #174	; 0xae
     bec:	005b      	lsls	r3, r3, #1
     bee:	18fb      	adds	r3, r7, r3
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	2b00      	cmp	r3, #0
     bf4:	da00      	bge.n	bf8 <_Z10drawBitmapPcss+0x270>
     bf6:	e204      	b.n	1002 <_Z10drawBitmapPcss+0x67a>
     bf8:	23ac      	movs	r3, #172	; 0xac
     bfa:	005b      	lsls	r3, r3, #1
     bfc:	18fb      	adds	r3, r7, r3
     bfe:	681b      	ldr	r3, [r3, #0]
     c00:	2b00      	cmp	r3, #0
     c02:	da00      	bge.n	c06 <_Z10drawBitmapPcss+0x27e>
     c04:	e1fd      	b.n	1002 <_Z10drawBitmapPcss+0x67a>
					w = bmpWidth; // Width/height of section to load/display
     c06:	23b4      	movs	r3, #180	; 0xb4
     c08:	005b      	lsls	r3, r3, #1
     c0a:	18fb      	adds	r3, r7, r3
     c0c:	681b      	ldr	r3, [r3, #0]
     c0e:	22c6      	movs	r2, #198	; 0xc6
     c10:	0052      	lsls	r2, r2, #1
     c12:	18ba      	adds	r2, r7, r2
     c14:	6013      	str	r3, [r2, #0]
					h = bmpHeight;
     c16:	23ca      	movs	r3, #202	; 0xca
     c18:	005b      	lsls	r3, r3, #1
     c1a:	18fb      	adds	r3, r7, r3
     c1c:	681b      	ldr	r3, [r3, #0]
     c1e:	22c4      	movs	r2, #196	; 0xc4
     c20:	0052      	lsls	r2, r2, #1
     c22:	18ba      	adds	r2, r7, r2
     c24:	6013      	str	r3, [r2, #0]
					bx1 = by1 = 0; // UL coordinate in BMP file
     c26:	2300      	movs	r3, #0
     c28:	22bc      	movs	r2, #188	; 0xbc
     c2a:	0052      	lsls	r2, r2, #1
     c2c:	18ba      	adds	r2, r7, r2
     c2e:	6013      	str	r3, [r2, #0]
     c30:	23bc      	movs	r3, #188	; 0xbc
     c32:	005b      	lsls	r3, r3, #1
     c34:	18fb      	adds	r3, r7, r3
     c36:	681b      	ldr	r3, [r3, #0]
     c38:	22be      	movs	r2, #190	; 0xbe
     c3a:	0052      	lsls	r2, r2, #1
     c3c:	18ba      	adds	r2, r7, r2
     c3e:	6013      	str	r3, [r2, #0]
					if (x < 0) { // Clip left
     c40:	4b77      	ldr	r3, [pc, #476]	; (e20 <_Z10drawBitmapPcss+0x498>)
     c42:	22cc      	movs	r2, #204	; 0xcc
     c44:	0052      	lsls	r2, r2, #1
     c46:	4694      	mov	ip, r2
     c48:	44bc      	add	ip, r7
     c4a:	4463      	add	r3, ip
     c4c:	2200      	movs	r2, #0
     c4e:	5e9b      	ldrsh	r3, [r3, r2]
     c50:	2b00      	cmp	r3, #0
     c52:	da1d      	bge.n	c90 <_Z10drawBitmapPcss+0x308>
						bx1 = -x;
     c54:	4b72      	ldr	r3, [pc, #456]	; (e20 <_Z10drawBitmapPcss+0x498>)
     c56:	22cc      	movs	r2, #204	; 0xcc
     c58:	0052      	lsls	r2, r2, #1
     c5a:	4694      	mov	ip, r2
     c5c:	44bc      	add	ip, r7
     c5e:	4463      	add	r3, ip
     c60:	2200      	movs	r2, #0
     c62:	5e9b      	ldrsh	r3, [r3, r2]
     c64:	425b      	negs	r3, r3
     c66:	22be      	movs	r2, #190	; 0xbe
     c68:	0052      	lsls	r2, r2, #1
     c6a:	18ba      	adds	r2, r7, r2
     c6c:	6013      	str	r3, [r2, #0]
						x = 0;
     c6e:	4b6c      	ldr	r3, [pc, #432]	; (e20 <_Z10drawBitmapPcss+0x498>)
     c70:	22cc      	movs	r2, #204	; 0xcc
     c72:	0052      	lsls	r2, r2, #1
     c74:	4694      	mov	ip, r2
     c76:	44bc      	add	ip, r7
     c78:	4463      	add	r3, ip
     c7a:	2200      	movs	r2, #0
     c7c:	801a      	strh	r2, [r3, #0]
						w = x2 + 1;
     c7e:	23ae      	movs	r3, #174	; 0xae
     c80:	005b      	lsls	r3, r3, #1
     c82:	18fb      	adds	r3, r7, r3
     c84:	681b      	ldr	r3, [r3, #0]
     c86:	3301      	adds	r3, #1
     c88:	22c6      	movs	r2, #198	; 0xc6
     c8a:	0052      	lsls	r2, r2, #1
     c8c:	18ba      	adds	r2, r7, r2
     c8e:	6013      	str	r3, [r2, #0]
					}
					if (y < 0) { // Clip top
     c90:	4b64      	ldr	r3, [pc, #400]	; (e24 <_Z10drawBitmapPcss+0x49c>)
     c92:	22cc      	movs	r2, #204	; 0xcc
     c94:	0052      	lsls	r2, r2, #1
     c96:	4694      	mov	ip, r2
     c98:	44bc      	add	ip, r7
     c9a:	4463      	add	r3, ip
     c9c:	2200      	movs	r2, #0
     c9e:	5e9b      	ldrsh	r3, [r3, r2]
     ca0:	2b00      	cmp	r3, #0
     ca2:	da1d      	bge.n	ce0 <_Z10drawBitmapPcss+0x358>
						by1 = -y;
     ca4:	4b5f      	ldr	r3, [pc, #380]	; (e24 <_Z10drawBitmapPcss+0x49c>)
     ca6:	22cc      	movs	r2, #204	; 0xcc
     ca8:	0052      	lsls	r2, r2, #1
     caa:	4694      	mov	ip, r2
     cac:	44bc      	add	ip, r7
     cae:	4463      	add	r3, ip
     cb0:	2200      	movs	r2, #0
     cb2:	5e9b      	ldrsh	r3, [r3, r2]
     cb4:	425b      	negs	r3, r3
     cb6:	22bc      	movs	r2, #188	; 0xbc
     cb8:	0052      	lsls	r2, r2, #1
     cba:	18ba      	adds	r2, r7, r2
     cbc:	6013      	str	r3, [r2, #0]
						y = 0;
     cbe:	4b59      	ldr	r3, [pc, #356]	; (e24 <_Z10drawBitmapPcss+0x49c>)
     cc0:	22cc      	movs	r2, #204	; 0xcc
     cc2:	0052      	lsls	r2, r2, #1
     cc4:	4694      	mov	ip, r2
     cc6:	44bc      	add	ip, r7
     cc8:	4463      	add	r3, ip
     cca:	2200      	movs	r2, #0
     ccc:	801a      	strh	r2, [r3, #0]
						h = y2 + 1;
     cce:	23ac      	movs	r3, #172	; 0xac
     cd0:	005b      	lsls	r3, r3, #1
     cd2:	18fb      	adds	r3, r7, r3
     cd4:	681b      	ldr	r3, [r3, #0]
     cd6:	3301      	adds	r3, #1
     cd8:	22c4      	movs	r2, #196	; 0xc4
     cda:	0052      	lsls	r2, r2, #1
     cdc:	18ba      	adds	r2, r7, r2
     cde:	6013      	str	r3, [r2, #0]
					}
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     ce0:	4b51      	ldr	r3, [pc, #324]	; (e28 <_Z10drawBitmapPcss+0x4a0>)
     ce2:	0018      	movs	r0, r3
     ce4:	f00e ffd8 	bl	fc98 <_ZNK12Adafruit_GFX5widthEv>
     ce8:	0003      	movs	r3, r0
     cea:	001a      	movs	r2, r3
     cec:	23ae      	movs	r3, #174	; 0xae
     cee:	005b      	lsls	r3, r3, #1
     cf0:	18fb      	adds	r3, r7, r3
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	0fd0      	lsrs	r0, r2, #31
     cf6:	17d9      	asrs	r1, r3, #31
     cf8:	4293      	cmp	r3, r2
     cfa:	4148      	adcs	r0, r1
     cfc:	0003      	movs	r3, r0
     cfe:	b2db      	uxtb	r3, r3
     d00:	2b00      	cmp	r3, #0
     d02:	d012      	beq.n	d2a <_Z10drawBitmapPcss+0x3a2>
     d04:	4b48      	ldr	r3, [pc, #288]	; (e28 <_Z10drawBitmapPcss+0x4a0>)
     d06:	0018      	movs	r0, r3
     d08:	f00e ffc6 	bl	fc98 <_ZNK12Adafruit_GFX5widthEv>
     d0c:	0003      	movs	r3, r0
     d0e:	001a      	movs	r2, r3
     d10:	4b43      	ldr	r3, [pc, #268]	; (e20 <_Z10drawBitmapPcss+0x498>)
     d12:	21cc      	movs	r1, #204	; 0xcc
     d14:	0049      	lsls	r1, r1, #1
     d16:	468c      	mov	ip, r1
     d18:	44bc      	add	ip, r7
     d1a:	4463      	add	r3, ip
     d1c:	2100      	movs	r1, #0
     d1e:	5e5b      	ldrsh	r3, [r3, r1]
     d20:	1ad3      	subs	r3, r2, r3
     d22:	22c6      	movs	r2, #198	; 0xc6
     d24:	0052      	lsls	r2, r2, #1
     d26:	18ba      	adds	r2, r7, r2
     d28:	6013      	str	r3, [r2, #0]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     d2a:	4b3f      	ldr	r3, [pc, #252]	; (e28 <_Z10drawBitmapPcss+0x4a0>)
     d2c:	0018      	movs	r0, r3
     d2e:	f00e ffb7 	bl	fca0 <_ZNK12Adafruit_GFX6heightEv>
     d32:	0003      	movs	r3, r0
     d34:	001a      	movs	r2, r3
     d36:	23ac      	movs	r3, #172	; 0xac
     d38:	005b      	lsls	r3, r3, #1
     d3a:	18fb      	adds	r3, r7, r3
     d3c:	681b      	ldr	r3, [r3, #0]
     d3e:	0fd0      	lsrs	r0, r2, #31
     d40:	17d9      	asrs	r1, r3, #31
     d42:	4293      	cmp	r3, r2
     d44:	4148      	adcs	r0, r1
     d46:	0003      	movs	r3, r0
     d48:	b2db      	uxtb	r3, r3
     d4a:	2b00      	cmp	r3, #0
     d4c:	d012      	beq.n	d74 <_Z10drawBitmapPcss+0x3ec>
     d4e:	4b36      	ldr	r3, [pc, #216]	; (e28 <_Z10drawBitmapPcss+0x4a0>)
     d50:	0018      	movs	r0, r3
     d52:	f00e ffa5 	bl	fca0 <_ZNK12Adafruit_GFX6heightEv>
     d56:	0003      	movs	r3, r0
     d58:	001a      	movs	r2, r3
     d5a:	4b32      	ldr	r3, [pc, #200]	; (e24 <_Z10drawBitmapPcss+0x49c>)
     d5c:	21cc      	movs	r1, #204	; 0xcc
     d5e:	0049      	lsls	r1, r1, #1
     d60:	468c      	mov	ip, r1
     d62:	44bc      	add	ip, r7
     d64:	4463      	add	r3, ip
     d66:	2100      	movs	r1, #0
     d68:	5e5b      	ldrsh	r3, [r3, r1]
     d6a:	1ad3      	subs	r3, r2, r3
     d6c:	22c4      	movs	r2, #196	; 0xc4
     d6e:	0052      	lsls	r2, r2, #1
     d70:	18ba      	adds	r2, r7, r2
     d72:	6013      	str	r3, [r2, #0]

					// Set tftDisplay address window to clipped image bounds
					tftDisplay.startWrite(); // Requires start/end transaction now
     d74:	4b2c      	ldr	r3, [pc, #176]	; (e28 <_Z10drawBitmapPcss+0x4a0>)
     d76:	0018      	movs	r0, r3
     d78:	f004 f94c 	bl	5014 <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
     d7c:	4b28      	ldr	r3, [pc, #160]	; (e20 <_Z10drawBitmapPcss+0x498>)
     d7e:	22cc      	movs	r2, #204	; 0xcc
     d80:	0052      	lsls	r2, r2, #1
     d82:	4694      	mov	ip, r2
     d84:	44bc      	add	ip, r7
     d86:	4463      	add	r3, ip
     d88:	8819      	ldrh	r1, [r3, #0]
     d8a:	4b26      	ldr	r3, [pc, #152]	; (e24 <_Z10drawBitmapPcss+0x49c>)
     d8c:	22cc      	movs	r2, #204	; 0xcc
     d8e:	0052      	lsls	r2, r2, #1
     d90:	4694      	mov	ip, r2
     d92:	44bc      	add	ip, r7
     d94:	4463      	add	r3, ip
     d96:	881a      	ldrh	r2, [r3, #0]
     d98:	23c6      	movs	r3, #198	; 0xc6
     d9a:	005b      	lsls	r3, r3, #1
     d9c:	18fb      	adds	r3, r7, r3
     d9e:	681b      	ldr	r3, [r3, #0]
     da0:	b29c      	uxth	r4, r3
     da2:	23c4      	movs	r3, #196	; 0xc4
     da4:	005b      	lsls	r3, r3, #1
     da6:	18fb      	adds	r3, r7, r3
     da8:	681b      	ldr	r3, [r3, #0]
     daa:	b29b      	uxth	r3, r3
     dac:	481e      	ldr	r0, [pc, #120]	; (e28 <_Z10drawBitmapPcss+0x4a0>)
     dae:	9300      	str	r3, [sp, #0]
     db0:	0023      	movs	r3, r4
     db2:	f009 fa3d 	bl	a230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>

					for (row = 0; row < h; row++) { // For each scanline...
     db6:	2300      	movs	r3, #0
     db8:	22c2      	movs	r2, #194	; 0xc2
     dba:	0052      	lsls	r2, r2, #1
     dbc:	18ba      	adds	r2, r7, r2
     dbe:	6013      	str	r3, [r2, #0]
     dc0:	23c2      	movs	r3, #194	; 0xc2
     dc2:	005b      	lsls	r3, r3, #1
     dc4:	18fb      	adds	r3, r7, r3
     dc6:	681a      	ldr	r2, [r3, #0]
     dc8:	23c4      	movs	r3, #196	; 0xc4
     dca:	005b      	lsls	r3, r3, #1
     dcc:	18fb      	adds	r3, r7, r3
     dce:	681b      	ldr	r3, [r3, #0]
     dd0:	429a      	cmp	r2, r3
     dd2:	db00      	blt.n	dd6 <_Z10drawBitmapPcss+0x44e>
     dd4:	e111      	b.n	ffa <_Z10drawBitmapPcss+0x672>
						// intensive to be doing this on every line, but this
						// method covers a lot of gritty details like cropping
						// and scanline padding.  Also, the seek only takes
						// place if the file position actually needs to change
						// (avoids a lot of cluster math in SD library).
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
     dd6:	23c9      	movs	r3, #201	; 0xc9
     dd8:	005b      	lsls	r3, r3, #1
     dda:	18fb      	adds	r3, r7, r3
     ddc:	781b      	ldrb	r3, [r3, #0]
     dde:	2b00      	cmp	r3, #0
     de0:	d024      	beq.n	e2c <_Z10drawBitmapPcss+0x4a4>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
     de2:	23ca      	movs	r3, #202	; 0xca
     de4:	005b      	lsls	r3, r3, #1
     de6:	18fb      	adds	r3, r7, r3
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	1e5a      	subs	r2, r3, #1
     dec:	23c2      	movs	r3, #194	; 0xc2
     dee:	005b      	lsls	r3, r3, #1
     df0:	18fb      	adds	r3, r7, r3
     df2:	6819      	ldr	r1, [r3, #0]
     df4:	23bc      	movs	r3, #188	; 0xbc
     df6:	005b      	lsls	r3, r3, #1
     df8:	18fb      	adds	r3, r7, r3
     dfa:	681b      	ldr	r3, [r3, #0]
     dfc:	18cb      	adds	r3, r1, r3
     dfe:	1ad3      	subs	r3, r2, r3
     e00:	001a      	movs	r2, r3
     e02:	23b0      	movs	r3, #176	; 0xb0
     e04:	005b      	lsls	r3, r3, #1
     e06:	18fb      	adds	r3, r7, r3
     e08:	681b      	ldr	r3, [r3, #0]
     e0a:	435a      	muls	r2, r3
     e0c:	23b6      	movs	r3, #182	; 0xb6
     e0e:	005b      	lsls	r3, r3, #1
     e10:	18fb      	adds	r3, r7, r3
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	18d3      	adds	r3, r2, r3
     e16:	22ba      	movs	r2, #186	; 0xba
     e18:	0052      	lsls	r2, r2, #1
     e1a:	18ba      	adds	r2, r7, r2
     e1c:	6013      	str	r3, [r2, #0]
     e1e:	e01d      	b.n	e5c <_Z10drawBitmapPcss+0x4d4>
     e20:	fffffe6a 	.word	0xfffffe6a
     e24:	fffffe68 	.word	0xfffffe68
     e28:	20000150 	.word	0x20000150
						else
						// Bitmap is stored top-to-bottom
						pos = bmpImageoffset + (row + by1) * rowSize;
     e2c:	23c2      	movs	r3, #194	; 0xc2
     e2e:	005b      	lsls	r3, r3, #1
     e30:	18fb      	adds	r3, r7, r3
     e32:	681a      	ldr	r2, [r3, #0]
     e34:	23bc      	movs	r3, #188	; 0xbc
     e36:	005b      	lsls	r3, r3, #1
     e38:	18fb      	adds	r3, r7, r3
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	18d3      	adds	r3, r2, r3
     e3e:	001a      	movs	r2, r3
     e40:	23b0      	movs	r3, #176	; 0xb0
     e42:	005b      	lsls	r3, r3, #1
     e44:	18fb      	adds	r3, r7, r3
     e46:	681b      	ldr	r3, [r3, #0]
     e48:	435a      	muls	r2, r3
     e4a:	23b6      	movs	r3, #182	; 0xb6
     e4c:	005b      	lsls	r3, r3, #1
     e4e:	18fb      	adds	r3, r7, r3
     e50:	681b      	ldr	r3, [r3, #0]
     e52:	18d3      	adds	r3, r2, r3
     e54:	22ba      	movs	r2, #186	; 0xba
     e56:	0052      	lsls	r2, r2, #1
     e58:	18ba      	adds	r2, r7, r2
     e5a:	6013      	str	r3, [r2, #0]
						pos += bx1 * 3; // Factor in starting column (bx1)
     e5c:	23be      	movs	r3, #190	; 0xbe
     e5e:	005b      	lsls	r3, r3, #1
     e60:	18fb      	adds	r3, r7, r3
     e62:	681a      	ldr	r2, [r3, #0]
     e64:	0013      	movs	r3, r2
     e66:	005b      	lsls	r3, r3, #1
     e68:	189b      	adds	r3, r3, r2
     e6a:	001a      	movs	r2, r3
     e6c:	23ba      	movs	r3, #186	; 0xba
     e6e:	005b      	lsls	r3, r3, #1
     e70:	18fb      	adds	r3, r7, r3
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	189b      	adds	r3, r3, r2
     e76:	22ba      	movs	r2, #186	; 0xba
     e78:	0052      	lsls	r2, r2, #1
     e7a:	18ba      	adds	r2, r7, r2
     e7c:	6013      	str	r3, [r2, #0]
						if (bmpFile.position() != pos) { // Need seek?
     e7e:	2386      	movs	r3, #134	; 0x86
     e80:	005b      	lsls	r3, r3, #1
     e82:	18fb      	adds	r3, r7, r3
     e84:	0018      	movs	r0, r3
     e86:	f00b fc9d 	bl	c7c4 <_ZN5SDLib4File8positionEv>
     e8a:	0002      	movs	r2, r0
     e8c:	23ba      	movs	r3, #186	; 0xba
     e8e:	005b      	lsls	r3, r3, #1
     e90:	18fb      	adds	r3, r7, r3
     e92:	681b      	ldr	r3, [r3, #0]
     e94:	1ad3      	subs	r3, r2, r3
     e96:	1e5a      	subs	r2, r3, #1
     e98:	4193      	sbcs	r3, r2
     e9a:	b2db      	uxtb	r3, r3
     e9c:	2b00      	cmp	r3, #0
     e9e:	d017      	beq.n	ed0 <_Z10drawBitmapPcss+0x548>
							tftDisplay.endWrite(); // End tftDisplay transaction
     ea0:	4b5d      	ldr	r3, [pc, #372]	; (1018 <_Z10drawBitmapPcss+0x690>)
     ea2:	0018      	movs	r0, r3
     ea4:	f004 f886 	bl	4fb4 <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
     ea8:	23ba      	movs	r3, #186	; 0xba
     eaa:	005b      	lsls	r3, r3, #1
     eac:	18fb      	adds	r3, r7, r3
     eae:	681a      	ldr	r2, [r3, #0]
     eb0:	2386      	movs	r3, #134	; 0x86
     eb2:	005b      	lsls	r3, r3, #1
     eb4:	18fb      	adds	r3, r7, r3
     eb6:	0011      	movs	r1, r2
     eb8:	0018      	movs	r0, r3
     eba:	f00b fc77 	bl	c7ac <_ZN5SDLib4File4seekEm>
							buffidx = sizeof(sdbuffer); // Force buffer reload
     ebe:	2394      	movs	r3, #148	; 0x94
     ec0:	33ff      	adds	r3, #255	; 0xff
     ec2:	18fb      	adds	r3, r7, r3
     ec4:	22ff      	movs	r2, #255	; 0xff
     ec6:	701a      	strb	r2, [r3, #0]
							tftDisplay.startWrite(); // Start new tftDisplay transaction
     ec8:	4b53      	ldr	r3, [pc, #332]	; (1018 <_Z10drawBitmapPcss+0x690>)
     eca:	0018      	movs	r0, r3
     ecc:	f004 f8a2 	bl	5014 <_ZN16Adafruit_ILI934110startWriteEv>
						}
						for (col = 0; col < w; col++) { // For each pixel...
     ed0:	2300      	movs	r3, #0
     ed2:	22c0      	movs	r2, #192	; 0xc0
     ed4:	0052      	lsls	r2, r2, #1
     ed6:	18ba      	adds	r2, r7, r2
     ed8:	6013      	str	r3, [r2, #0]
     eda:	23c0      	movs	r3, #192	; 0xc0
     edc:	005b      	lsls	r3, r3, #1
     ede:	18fb      	adds	r3, r7, r3
     ee0:	681a      	ldr	r2, [r3, #0]
     ee2:	23c6      	movs	r3, #198	; 0xc6
     ee4:	005b      	lsls	r3, r3, #1
     ee6:	18fb      	adds	r3, r7, r3
     ee8:	681b      	ldr	r3, [r3, #0]
     eea:	429a      	cmp	r2, r3
     eec:	da7b      	bge.n	fe6 <_Z10drawBitmapPcss+0x65e>
							// Time to read more pixel data?
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
     eee:	2394      	movs	r3, #148	; 0x94
     ef0:	33ff      	adds	r3, #255	; 0xff
     ef2:	18fb      	adds	r3, r7, r3
     ef4:	781b      	ldrb	r3, [r3, #0]
     ef6:	2bff      	cmp	r3, #255	; 0xff
     ef8:	d115      	bne.n	f26 <_Z10drawBitmapPcss+0x59e>
								tftDisplay.endWrite(); // End tftDisplay transaction
     efa:	4b47      	ldr	r3, [pc, #284]	; (1018 <_Z10drawBitmapPcss+0x690>)
     efc:	0018      	movs	r0, r3
     efe:	f004 f859 	bl	4fb4 <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
     f02:	230c      	movs	r3, #12
     f04:	18f9      	adds	r1, r7, r3
     f06:	2386      	movs	r3, #134	; 0x86
     f08:	005b      	lsls	r3, r3, #1
     f0a:	18fb      	adds	r3, r7, r3
     f0c:	22ff      	movs	r2, #255	; 0xff
     f0e:	0018      	movs	r0, r3
     f10:	f00b fc42 	bl	c798 <_ZN5SDLib4File4readEPvt>
								buffidx = 0; // Set index to beginning
     f14:	2394      	movs	r3, #148	; 0x94
     f16:	33ff      	adds	r3, #255	; 0xff
     f18:	18fb      	adds	r3, r7, r3
     f1a:	2200      	movs	r2, #0
     f1c:	701a      	strb	r2, [r3, #0]
								tftDisplay.startWrite(); // Start new tftDisplay transaction
     f1e:	4b3e      	ldr	r3, [pc, #248]	; (1018 <_Z10drawBitmapPcss+0x690>)
     f20:	0018      	movs	r0, r3
     f22:	f004 f877 	bl	5014 <_ZN16Adafruit_ILI934110startWriteEv>
							}
							// Convert pixel from BMP to tftDisplay format, push to display
							b = sdbuffer[buffidx++];
     f26:	2394      	movs	r3, #148	; 0x94
     f28:	33ff      	adds	r3, #255	; 0xff
     f2a:	18fb      	adds	r3, r7, r3
     f2c:	781b      	ldrb	r3, [r3, #0]
     f2e:	2294      	movs	r2, #148	; 0x94
     f30:	32ff      	adds	r2, #255	; 0xff
     f32:	18ba      	adds	r2, r7, r2
     f34:	1c59      	adds	r1, r3, #1
     f36:	7011      	strb	r1, [r2, #0]
     f38:	0019      	movs	r1, r3
     f3a:	2358      	movs	r3, #88	; 0x58
     f3c:	33ff      	adds	r3, #255	; 0xff
     f3e:	18fb      	adds	r3, r7, r3
     f40:	4a36      	ldr	r2, [pc, #216]	; (101c <_Z10drawBitmapPcss+0x694>)
     f42:	20cc      	movs	r0, #204	; 0xcc
     f44:	0040      	lsls	r0, r0, #1
     f46:	4684      	mov	ip, r0
     f48:	44bc      	add	ip, r7
     f4a:	4462      	add	r2, ip
     f4c:	5c52      	ldrb	r2, [r2, r1]
     f4e:	701a      	strb	r2, [r3, #0]
							g = sdbuffer[buffidx++];
     f50:	2394      	movs	r3, #148	; 0x94
     f52:	33ff      	adds	r3, #255	; 0xff
     f54:	18fb      	adds	r3, r7, r3
     f56:	781b      	ldrb	r3, [r3, #0]
     f58:	2294      	movs	r2, #148	; 0x94
     f5a:	32ff      	adds	r2, #255	; 0xff
     f5c:	18ba      	adds	r2, r7, r2
     f5e:	1c59      	adds	r1, r3, #1
     f60:	7011      	strb	r1, [r2, #0]
     f62:	0019      	movs	r1, r3
     f64:	23ab      	movs	r3, #171	; 0xab
     f66:	005b      	lsls	r3, r3, #1
     f68:	18fb      	adds	r3, r7, r3
     f6a:	4a2c      	ldr	r2, [pc, #176]	; (101c <_Z10drawBitmapPcss+0x694>)
     f6c:	20cc      	movs	r0, #204	; 0xcc
     f6e:	0040      	lsls	r0, r0, #1
     f70:	4684      	mov	ip, r0
     f72:	44bc      	add	ip, r7
     f74:	4462      	add	r2, ip
     f76:	5c52      	ldrb	r2, [r2, r1]
     f78:	701a      	strb	r2, [r3, #0]
							r = sdbuffer[buffidx++];
     f7a:	2394      	movs	r3, #148	; 0x94
     f7c:	33ff      	adds	r3, #255	; 0xff
     f7e:	18fb      	adds	r3, r7, r3
     f80:	781b      	ldrb	r3, [r3, #0]
     f82:	2294      	movs	r2, #148	; 0x94
     f84:	32ff      	adds	r2, #255	; 0xff
     f86:	18ba      	adds	r2, r7, r2
     f88:	1c59      	adds	r1, r3, #1
     f8a:	7011      	strb	r1, [r2, #0]
     f8c:	0019      	movs	r1, r3
     f8e:	2356      	movs	r3, #86	; 0x56
     f90:	33ff      	adds	r3, #255	; 0xff
     f92:	18fb      	adds	r3, r7, r3
     f94:	4a21      	ldr	r2, [pc, #132]	; (101c <_Z10drawBitmapPcss+0x694>)
     f96:	20cc      	movs	r0, #204	; 0xcc
     f98:	0040      	lsls	r0, r0, #1
     f9a:	4684      	mov	ip, r0
     f9c:	44bc      	add	ip, r7
     f9e:	4462      	add	r2, ip
     fa0:	5c52      	ldrb	r2, [r2, r1]
     fa2:	701a      	strb	r2, [r3, #0]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
     fa4:	2358      	movs	r3, #88	; 0x58
     fa6:	33ff      	adds	r3, #255	; 0xff
     fa8:	18fb      	adds	r3, r7, r3
     faa:	781c      	ldrb	r4, [r3, #0]
     fac:	23ab      	movs	r3, #171	; 0xab
     fae:	005b      	lsls	r3, r3, #1
     fb0:	18fb      	adds	r3, r7, r3
     fb2:	781a      	ldrb	r2, [r3, #0]
     fb4:	2356      	movs	r3, #86	; 0x56
     fb6:	33ff      	adds	r3, #255	; 0xff
     fb8:	18fb      	adds	r3, r7, r3
     fba:	7819      	ldrb	r1, [r3, #0]
     fbc:	4816      	ldr	r0, [pc, #88]	; (1018 <_Z10drawBitmapPcss+0x690>)
     fbe:	0023      	movs	r3, r4
     fc0:	f004 fb8c 	bl	56dc <_ZN16Adafruit_ILI93418color565Ehhh>
     fc4:	0003      	movs	r3, r0
     fc6:	001a      	movs	r2, r3
     fc8:	4b13      	ldr	r3, [pc, #76]	; (1018 <_Z10drawBitmapPcss+0x690>)
     fca:	0011      	movs	r1, r2
     fcc:	0018      	movs	r0, r3
     fce:	f00b f9d7 	bl	c380 <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
     fd2:	23c0      	movs	r3, #192	; 0xc0
     fd4:	005b      	lsls	r3, r3, #1
     fd6:	18fb      	adds	r3, r7, r3
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	3301      	adds	r3, #1
     fdc:	22c0      	movs	r2, #192	; 0xc0
     fde:	0052      	lsls	r2, r2, #1
     fe0:	18ba      	adds	r2, r7, r2
     fe2:	6013      	str	r3, [r2, #0]
     fe4:	e779      	b.n	eda <_Z10drawBitmapPcss+0x552>
					for (row = 0; row < h; row++) { // For each scanline...
     fe6:	23c2      	movs	r3, #194	; 0xc2
     fe8:	005b      	lsls	r3, r3, #1
     fea:	18fb      	adds	r3, r7, r3
     fec:	681b      	ldr	r3, [r3, #0]
     fee:	3301      	adds	r3, #1
     ff0:	22c2      	movs	r2, #194	; 0xc2
     ff2:	0052      	lsls	r2, r2, #1
     ff4:	18ba      	adds	r2, r7, r2
     ff6:	6013      	str	r3, [r2, #0]
     ff8:	e6e2      	b.n	dc0 <_Z10drawBitmapPcss+0x438>
						} // end pixel
					} // end scanline
					tftDisplay.endWrite(); // End last tftDisplay transaction
     ffa:	4b07      	ldr	r3, [pc, #28]	; (1018 <_Z10drawBitmapPcss+0x690>)
     ffc:	0018      	movs	r0, r3
     ffe:	f003 ffd9 	bl	4fb4 <_ZN16Adafruit_ILI93418endWriteEv>
				} // end onscreen
			} // end goodBmp
		}
	}
	bmpFile.close();
    1002:	2386      	movs	r3, #134	; 0x86
    1004:	005b      	lsls	r3, r3, #1
    1006:	18fb      	adds	r3, r7, r3
    1008:	0018      	movs	r0, r3
    100a:	f00b fbe3 	bl	c7d4 <_ZN5SDLib4File5closeEv>
    100e:	e000      	b.n	1012 <_Z10drawBitmapPcss+0x68a>
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
    1010:	46c0      	nop			; (mov r8, r8)
}
    1012:	46bd      	mov	sp, r7
    1014:	b067      	add	sp, #412	; 0x19c
    1016:	bd90      	pop	{r4, r7, pc}
    1018:	20000150 	.word	0x20000150
    101c:	fffffe74 	.word	0xfffffe74

00001020 <_Z8getPointv>:

TS_Point getPoint() {
    1020:	b580      	push	{r7, lr}
    1022:	b084      	sub	sp, #16
    1024:	af02      	add	r7, sp, #8
    1026:	6078      	str	r0, [r7, #4]
	TS_Point point = touchScreen.getPoint();
    1028:	687b      	ldr	r3, [r7, #4]
    102a:	4915      	ldr	r1, [pc, #84]	; (1080 <_Z8getPointv+0x60>)
    102c:	2200      	movs	r2, #0
    102e:	0018      	movs	r0, r3
    1030:	f003 ff34 	bl	4e9c <_ZN15Adafruit_FT62068getPointEh>
	 // Map point so that coordinate system starts from top left
	point.x = map(point.x, 0, 240, 240, 0);
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	2200      	movs	r2, #0
    1038:	5e9b      	ldrsh	r3, [r3, r2]
    103a:	0018      	movs	r0, r3
    103c:	2300      	movs	r3, #0
    103e:	9300      	str	r3, [sp, #0]
    1040:	23f0      	movs	r3, #240	; 0xf0
    1042:	22f0      	movs	r2, #240	; 0xf0
    1044:	2100      	movs	r1, #0
    1046:	f003 fe51 	bl	4cec <_Z3maplllll>
    104a:	0003      	movs	r3, r0
    104c:	b21a      	sxth	r2, r3
    104e:	687b      	ldr	r3, [r7, #4]
    1050:	801a      	strh	r2, [r3, #0]
	point.y = map(point.y, 0, 320, 320, 0);
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	2202      	movs	r2, #2
    1056:	5e9b      	ldrsh	r3, [r3, r2]
    1058:	0018      	movs	r0, r3
    105a:	23a0      	movs	r3, #160	; 0xa0
    105c:	0059      	lsls	r1, r3, #1
    105e:	23a0      	movs	r3, #160	; 0xa0
    1060:	005a      	lsls	r2, r3, #1
    1062:	2300      	movs	r3, #0
    1064:	9300      	str	r3, [sp, #0]
    1066:	000b      	movs	r3, r1
    1068:	2100      	movs	r1, #0
    106a:	f003 fe3f 	bl	4cec <_Z3maplllll>
    106e:	0003      	movs	r3, r0
    1070:	b21a      	sxth	r2, r3
    1072:	687b      	ldr	r3, [r7, #4]
    1074:	805a      	strh	r2, [r3, #2]
	return point;
    1076:	46c0      	nop			; (mov r8, r8)
}
    1078:	6878      	ldr	r0, [r7, #4]
    107a:	46bd      	mov	sp, r7
    107c:	b002      	add	sp, #8
    107e:	bd80      	pop	{r7, pc}
    1080:	200001b4 	.word	0x200001b4

00001084 <_Z8drawMoveh8TS_Point5State>:

void drawMove(uint8_t square, TS_Point newCounterPos, State player) {
    1084:	b590      	push	{r4, r7, lr}
    1086:	b087      	sub	sp, #28
    1088:	af00      	add	r7, sp, #0
    108a:	0004      	movs	r4, r0
    108c:	1d38      	adds	r0, r7, #4
    108e:	6001      	str	r1, [r0, #0]
    1090:	6042      	str	r2, [r0, #4]
    1092:	0019      	movs	r1, r3
    1094:	230f      	movs	r3, #15
    1096:	18fb      	adds	r3, r7, r3
    1098:	1c22      	adds	r2, r4, #0
    109a:	701a      	strb	r2, [r3, #0]
    109c:	230e      	movs	r3, #14
    109e:	18fb      	adds	r3, r7, r3
    10a0:	1c0a      	adds	r2, r1, #0
    10a2:	701a      	strb	r2, [r3, #0]
	char bitmap;
	if (player == cross) {
    10a4:	230e      	movs	r3, #14
    10a6:	18fb      	adds	r3, r7, r3
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	2b02      	cmp	r3, #2
    10ac:	d11b      	bne.n	10e6 <_Z8drawMoveh8TS_Point5State+0x62>
		if (square % 2) {
    10ae:	230f      	movs	r3, #15
    10b0:	18fb      	adds	r3, r7, r3
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	2201      	movs	r2, #1
    10b6:	4013      	ands	r3, r2
    10b8:	d004      	beq.n	10c4 <_Z8drawMoveh8TS_Point5State+0x40>
			bitmap = 'j';
    10ba:	2317      	movs	r3, #23
    10bc:	18fb      	adds	r3, r7, r3
    10be:	226a      	movs	r2, #106	; 0x6a
    10c0:	701a      	strb	r2, [r3, #0]
    10c2:	e003      	b.n	10cc <_Z8drawMoveh8TS_Point5State+0x48>
			} else {
			bitmap = 'k';
    10c4:	2317      	movs	r3, #23
    10c6:	18fb      	adds	r3, r7, r3
    10c8:	226b      	movs	r2, #107	; 0x6b
    10ca:	701a      	strb	r2, [r3, #0]
		}
		drawBitmap(bitmap, newCounterPos.x, newCounterPos.y);
    10cc:	1d3b      	adds	r3, r7, #4
    10ce:	2100      	movs	r1, #0
    10d0:	5e59      	ldrsh	r1, [r3, r1]
    10d2:	1d3b      	adds	r3, r7, #4
    10d4:	2202      	movs	r2, #2
    10d6:	5e9a      	ldrsh	r2, [r3, r2]
    10d8:	2317      	movs	r3, #23
    10da:	18fb      	adds	r3, r7, r3
    10dc:	781b      	ldrb	r3, [r3, #0]
    10de:	0018      	movs	r0, r3
    10e0:	f7ff f8c0 	bl	264 <_Z10drawBitmapcss>
			} else {
			bitmap = 'i';
		}
		drawBitmap(bitmap, newCounterPos.x, newCounterPos.y);
	}
}
    10e4:	e01a      	b.n	111c <_Z8drawMoveh8TS_Point5State+0x98>
		if (square % 2) {
    10e6:	230f      	movs	r3, #15
    10e8:	18fb      	adds	r3, r7, r3
    10ea:	781b      	ldrb	r3, [r3, #0]
    10ec:	2201      	movs	r2, #1
    10ee:	4013      	ands	r3, r2
    10f0:	d004      	beq.n	10fc <_Z8drawMoveh8TS_Point5State+0x78>
			bitmap = 'h';
    10f2:	2317      	movs	r3, #23
    10f4:	18fb      	adds	r3, r7, r3
    10f6:	2268      	movs	r2, #104	; 0x68
    10f8:	701a      	strb	r2, [r3, #0]
    10fa:	e003      	b.n	1104 <_Z8drawMoveh8TS_Point5State+0x80>
			bitmap = 'i';
    10fc:	2317      	movs	r3, #23
    10fe:	18fb      	adds	r3, r7, r3
    1100:	2269      	movs	r2, #105	; 0x69
    1102:	701a      	strb	r2, [r3, #0]
		drawBitmap(bitmap, newCounterPos.x, newCounterPos.y);
    1104:	1d3b      	adds	r3, r7, #4
    1106:	2100      	movs	r1, #0
    1108:	5e59      	ldrsh	r1, [r3, r1]
    110a:	1d3b      	adds	r3, r7, #4
    110c:	2202      	movs	r2, #2
    110e:	5e9a      	ldrsh	r2, [r3, r2]
    1110:	2317      	movs	r3, #23
    1112:	18fb      	adds	r3, r7, r3
    1114:	781b      	ldrb	r3, [r3, #0]
    1116:	0018      	movs	r0, r3
    1118:	f7ff f8a4 	bl	264 <_Z10drawBitmapcss>
}
    111c:	46c0      	nop			; (mov r8, r8)
    111e:	46bd      	mov	sp, r7
    1120:	b007      	add	sp, #28
    1122:	bd90      	pop	{r4, r7, pc}

00001124 <_Z11updateScoreii>:

void updateScore(int noughtsScore, int crossesScore) {
    1124:	b580      	push	{r7, lr}
    1126:	b088      	sub	sp, #32
    1128:	af00      	add	r7, sp, #0
    112a:	6078      	str	r0, [r7, #4]
    112c:	6039      	str	r1, [r7, #0]
	drawBitmap(((String) noughtsScore).charAt(0), 95, 29);
    112e:	6879      	ldr	r1, [r7, #4]
    1130:	2308      	movs	r3, #8
    1132:	18fb      	adds	r3, r7, r3
    1134:	220a      	movs	r2, #10
    1136:	0018      	movs	r0, r3
    1138:	f003 fe16 	bl	4d68 <_ZN6StringC1Eih>
    113c:	2308      	movs	r3, #8
    113e:	18fb      	adds	r3, r7, r3
    1140:	2100      	movs	r1, #0
    1142:	0018      	movs	r0, r3
    1144:	f003 fe4a 	bl	4ddc <_ZNK6String6charAtEj>
    1148:	0003      	movs	r3, r0
    114a:	221d      	movs	r2, #29
    114c:	215f      	movs	r1, #95	; 0x5f
    114e:	0018      	movs	r0, r3
    1150:	f7ff f888 	bl	264 <_Z10drawBitmapcss>
    1154:	2308      	movs	r3, #8
    1156:	18fb      	adds	r3, r7, r3
    1158:	0018      	movs	r0, r3
    115a:	f003 fe37 	bl	4dcc <_ZN6StringD1Ev>
	drawBitmap(((String) crossesScore).charAt(0), 132, 28);
    115e:	6839      	ldr	r1, [r7, #0]
    1160:	2314      	movs	r3, #20
    1162:	18fb      	adds	r3, r7, r3
    1164:	220a      	movs	r2, #10
    1166:	0018      	movs	r0, r3
    1168:	f003 fdfe 	bl	4d68 <_ZN6StringC1Eih>
    116c:	2314      	movs	r3, #20
    116e:	18fb      	adds	r3, r7, r3
    1170:	2100      	movs	r1, #0
    1172:	0018      	movs	r0, r3
    1174:	f003 fe32 	bl	4ddc <_ZNK6String6charAtEj>
    1178:	0003      	movs	r3, r0
    117a:	221c      	movs	r2, #28
    117c:	2184      	movs	r1, #132	; 0x84
    117e:	0018      	movs	r0, r3
    1180:	f7ff f870 	bl	264 <_Z10drawBitmapcss>
    1184:	2314      	movs	r3, #20
    1186:	18fb      	adds	r3, r7, r3
    1188:	0018      	movs	r0, r3
    118a:	f003 fe1f 	bl	4dcc <_ZN6StringD1Ev>
}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	46bd      	mov	sp, r7
    1192:	b008      	add	sp, #32
    1194:	bd80      	pop	{r7, pc}

00001196 <_Z9getSquare8TS_Point>:

// Convert from point to square
uint8_t getSquare(TS_Point point) {
    1196:	b580      	push	{r7, lr}
    1198:	b084      	sub	sp, #16
    119a:	af00      	add	r7, sp, #0
    119c:	003b      	movs	r3, r7
    119e:	6018      	str	r0, [r3, #0]
    11a0:	6059      	str	r1, [r3, #4]
	uint8_t square = 255;
    11a2:	230f      	movs	r3, #15
    11a4:	18fb      	adds	r3, r7, r3
    11a6:	22ff      	movs	r2, #255	; 0xff
    11a8:	701a      	strb	r2, [r3, #0]
	if (point.y > 79 && point.y < 161) {
    11aa:	003b      	movs	r3, r7
    11ac:	2202      	movs	r2, #2
    11ae:	5e9b      	ldrsh	r3, [r3, r2]
    11b0:	2b4f      	cmp	r3, #79	; 0x4f
    11b2:	dd22      	ble.n	11fa <_Z9getSquare8TS_Point+0x64>
    11b4:	003b      	movs	r3, r7
    11b6:	2202      	movs	r2, #2
    11b8:	5e9b      	ldrsh	r3, [r3, r2]
    11ba:	2ba0      	cmp	r3, #160	; 0xa0
    11bc:	dc1d      	bgt.n	11fa <_Z9getSquare8TS_Point+0x64>
		if (point.x < 81) {
    11be:	003b      	movs	r3, r7
    11c0:	2200      	movs	r2, #0
    11c2:	5e9b      	ldrsh	r3, [r3, r2]
    11c4:	2b50      	cmp	r3, #80	; 0x50
    11c6:	dc04      	bgt.n	11d2 <_Z9getSquare8TS_Point+0x3c>
			square = 0;
    11c8:	230f      	movs	r3, #15
    11ca:	18fb      	adds	r3, r7, r3
    11cc:	2200      	movs	r2, #0
    11ce:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    11d0:	e05e      	b.n	1290 <_Z9getSquare8TS_Point+0xfa>
			} else if (point.x < 161) {
    11d2:	003b      	movs	r3, r7
    11d4:	2200      	movs	r2, #0
    11d6:	5e9b      	ldrsh	r3, [r3, r2]
    11d8:	2ba0      	cmp	r3, #160	; 0xa0
    11da:	dc04      	bgt.n	11e6 <_Z9getSquare8TS_Point+0x50>
			square = 1;
    11dc:	230f      	movs	r3, #15
    11de:	18fb      	adds	r3, r7, r3
    11e0:	2201      	movs	r2, #1
    11e2:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    11e4:	e054      	b.n	1290 <_Z9getSquare8TS_Point+0xfa>
			} else if (point.x < 240) {
    11e6:	003b      	movs	r3, r7
    11e8:	2200      	movs	r2, #0
    11ea:	5e9b      	ldrsh	r3, [r3, r2]
    11ec:	2bef      	cmp	r3, #239	; 0xef
    11ee:	dc4f      	bgt.n	1290 <_Z9getSquare8TS_Point+0xfa>
			square = 2;
    11f0:	230f      	movs	r3, #15
    11f2:	18fb      	adds	r3, r7, r3
    11f4:	2202      	movs	r2, #2
    11f6:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    11f8:	e04a      	b.n	1290 <_Z9getSquare8TS_Point+0xfa>
		}

		} else if (point.y > 160 && point.y < 241) {
    11fa:	003b      	movs	r3, r7
    11fc:	2202      	movs	r2, #2
    11fe:	5e9b      	ldrsh	r3, [r3, r2]
    1200:	2ba0      	cmp	r3, #160	; 0xa0
    1202:	dd22      	ble.n	124a <_Z9getSquare8TS_Point+0xb4>
    1204:	003b      	movs	r3, r7
    1206:	2202      	movs	r2, #2
    1208:	5e9b      	ldrsh	r3, [r3, r2]
    120a:	2bf0      	cmp	r3, #240	; 0xf0
    120c:	dc1d      	bgt.n	124a <_Z9getSquare8TS_Point+0xb4>
		if (point.x < 81) {
    120e:	003b      	movs	r3, r7
    1210:	2200      	movs	r2, #0
    1212:	5e9b      	ldrsh	r3, [r3, r2]
    1214:	2b50      	cmp	r3, #80	; 0x50
    1216:	dc04      	bgt.n	1222 <_Z9getSquare8TS_Point+0x8c>
			square = 3;
    1218:	230f      	movs	r3, #15
    121a:	18fb      	adds	r3, r7, r3
    121c:	2203      	movs	r2, #3
    121e:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1220:	e038      	b.n	1294 <_Z9getSquare8TS_Point+0xfe>
			} else if (point.x < 161) {
    1222:	003b      	movs	r3, r7
    1224:	2200      	movs	r2, #0
    1226:	5e9b      	ldrsh	r3, [r3, r2]
    1228:	2ba0      	cmp	r3, #160	; 0xa0
    122a:	dc04      	bgt.n	1236 <_Z9getSquare8TS_Point+0xa0>
			square = 4;
    122c:	230f      	movs	r3, #15
    122e:	18fb      	adds	r3, r7, r3
    1230:	2204      	movs	r2, #4
    1232:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1234:	e02e      	b.n	1294 <_Z9getSquare8TS_Point+0xfe>
			} else if (point.x < 240) {
    1236:	003b      	movs	r3, r7
    1238:	2200      	movs	r2, #0
    123a:	5e9b      	ldrsh	r3, [r3, r2]
    123c:	2bef      	cmp	r3, #239	; 0xef
    123e:	dc29      	bgt.n	1294 <_Z9getSquare8TS_Point+0xfe>
			square = 5;
    1240:	230f      	movs	r3, #15
    1242:	18fb      	adds	r3, r7, r3
    1244:	2205      	movs	r2, #5
    1246:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1248:	e024      	b.n	1294 <_Z9getSquare8TS_Point+0xfe>
		}

		} else if (point.y > 240) {
    124a:	003b      	movs	r3, r7
    124c:	2202      	movs	r2, #2
    124e:	5e9b      	ldrsh	r3, [r3, r2]
    1250:	2bf0      	cmp	r3, #240	; 0xf0
    1252:	dd20      	ble.n	1296 <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1254:	003b      	movs	r3, r7
    1256:	2200      	movs	r2, #0
    1258:	5e9b      	ldrsh	r3, [r3, r2]
    125a:	2b50      	cmp	r3, #80	; 0x50
    125c:	dc04      	bgt.n	1268 <_Z9getSquare8TS_Point+0xd2>
			square = 6;
    125e:	230f      	movs	r3, #15
    1260:	18fb      	adds	r3, r7, r3
    1262:	2206      	movs	r2, #6
    1264:	701a      	strb	r2, [r3, #0]
    1266:	e016      	b.n	1296 <_Z9getSquare8TS_Point+0x100>
			} else if (point.x < 161) {
    1268:	003b      	movs	r3, r7
    126a:	2200      	movs	r2, #0
    126c:	5e9b      	ldrsh	r3, [r3, r2]
    126e:	2ba0      	cmp	r3, #160	; 0xa0
    1270:	dc04      	bgt.n	127c <_Z9getSquare8TS_Point+0xe6>
			square = 7;
    1272:	230f      	movs	r3, #15
    1274:	18fb      	adds	r3, r7, r3
    1276:	2207      	movs	r2, #7
    1278:	701a      	strb	r2, [r3, #0]
    127a:	e00c      	b.n	1296 <_Z9getSquare8TS_Point+0x100>
			} else if (point.x < 240) {
    127c:	003b      	movs	r3, r7
    127e:	2200      	movs	r2, #0
    1280:	5e9b      	ldrsh	r3, [r3, r2]
    1282:	2bef      	cmp	r3, #239	; 0xef
    1284:	dc07      	bgt.n	1296 <_Z9getSquare8TS_Point+0x100>
			square = 8;
    1286:	230f      	movs	r3, #15
    1288:	18fb      	adds	r3, r7, r3
    128a:	2208      	movs	r2, #8
    128c:	701a      	strb	r2, [r3, #0]
    128e:	e002      	b.n	1296 <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1290:	46c0      	nop			; (mov r8, r8)
    1292:	e000      	b.n	1296 <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1294:	46c0      	nop			; (mov r8, r8)
		}
	}
	return square;
    1296:	230f      	movs	r3, #15
    1298:	18fb      	adds	r3, r7, r3
    129a:	781b      	ldrb	r3, [r3, #0]
}
    129c:	0018      	movs	r0, r3
    129e:	46bd      	mov	sp, r7
    12a0:	b004      	add	sp, #16
    12a2:	bd80      	pop	{r7, pc}

000012a4 <_Z18getCounterPositionh>:

// Convert from square to position to draw a classical counter
TS_Point getCounterPosition(uint8_t square) {
    12a4:	b580      	push	{r7, lr}
    12a6:	b082      	sub	sp, #8
    12a8:	af00      	add	r7, sp, #0
    12aa:	6078      	str	r0, [r7, #4]
    12ac:	000a      	movs	r2, r1
    12ae:	1cfb      	adds	r3, r7, #3
    12b0:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	0018      	movs	r0, r3
    12b6:	f003 fd9f 	bl	4df8 <_ZN8TS_PointC1Ev>
	if (square == 0 || square == 3 || square == 6) {
    12ba:	1cfb      	adds	r3, r7, #3
    12bc:	781b      	ldrb	r3, [r3, #0]
    12be:	2b00      	cmp	r3, #0
    12c0:	d007      	beq.n	12d2 <_Z18getCounterPositionh+0x2e>
    12c2:	1cfb      	adds	r3, r7, #3
    12c4:	781b      	ldrb	r3, [r3, #0]
    12c6:	2b03      	cmp	r3, #3
    12c8:	d003      	beq.n	12d2 <_Z18getCounterPositionh+0x2e>
    12ca:	1cfb      	adds	r3, r7, #3
    12cc:	781b      	ldrb	r3, [r3, #0]
    12ce:	2b06      	cmp	r3, #6
    12d0:	d103      	bne.n	12da <_Z18getCounterPositionh+0x36>
		counterPos.x = 0;
    12d2:	687b      	ldr	r3, [r7, #4]
    12d4:	2200      	movs	r2, #0
    12d6:	801a      	strh	r2, [r3, #0]
    12d8:	e012      	b.n	1300 <_Z18getCounterPositionh+0x5c>
	} else if (square == 1 || square == 4 || square == 7) {
    12da:	1cfb      	adds	r3, r7, #3
    12dc:	781b      	ldrb	r3, [r3, #0]
    12de:	2b01      	cmp	r3, #1
    12e0:	d007      	beq.n	12f2 <_Z18getCounterPositionh+0x4e>
    12e2:	1cfb      	adds	r3, r7, #3
    12e4:	781b      	ldrb	r3, [r3, #0]
    12e6:	2b04      	cmp	r3, #4
    12e8:	d003      	beq.n	12f2 <_Z18getCounterPositionh+0x4e>
    12ea:	1cfb      	adds	r3, r7, #3
    12ec:	781b      	ldrb	r3, [r3, #0]
    12ee:	2b07      	cmp	r3, #7
    12f0:	d103      	bne.n	12fa <_Z18getCounterPositionh+0x56>
		counterPos.x = 80;
    12f2:	687b      	ldr	r3, [r7, #4]
    12f4:	2250      	movs	r2, #80	; 0x50
    12f6:	801a      	strh	r2, [r3, #0]
    12f8:	e002      	b.n	1300 <_Z18getCounterPositionh+0x5c>
	} else {
		counterPos.x = 160;
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	22a0      	movs	r2, #160	; 0xa0
    12fe:	801a      	strh	r2, [r3, #0]
	}
	
	if (square == 0 || square == 1 || square == 2) {
    1300:	1cfb      	adds	r3, r7, #3
    1302:	781b      	ldrb	r3, [r3, #0]
    1304:	2b00      	cmp	r3, #0
    1306:	d007      	beq.n	1318 <_Z18getCounterPositionh+0x74>
    1308:	1cfb      	adds	r3, r7, #3
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	2b01      	cmp	r3, #1
    130e:	d003      	beq.n	1318 <_Z18getCounterPositionh+0x74>
    1310:	1cfb      	adds	r3, r7, #3
    1312:	781b      	ldrb	r3, [r3, #0]
    1314:	2b02      	cmp	r3, #2
    1316:	d103      	bne.n	1320 <_Z18getCounterPositionh+0x7c>
		counterPos.y = 80;
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	2250      	movs	r2, #80	; 0x50
    131c:	805a      	strh	r2, [r3, #2]
    131e:	e012      	b.n	1346 <_Z18getCounterPositionh+0xa2>
	} else if (square == 3 || square == 4 || square == 5) {
    1320:	1cfb      	adds	r3, r7, #3
    1322:	781b      	ldrb	r3, [r3, #0]
    1324:	2b03      	cmp	r3, #3
    1326:	d007      	beq.n	1338 <_Z18getCounterPositionh+0x94>
    1328:	1cfb      	adds	r3, r7, #3
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	2b04      	cmp	r3, #4
    132e:	d003      	beq.n	1338 <_Z18getCounterPositionh+0x94>
    1330:	1cfb      	adds	r3, r7, #3
    1332:	781b      	ldrb	r3, [r3, #0]
    1334:	2b05      	cmp	r3, #5
    1336:	d103      	bne.n	1340 <_Z18getCounterPositionh+0x9c>
		counterPos.y = 160;
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	22a0      	movs	r2, #160	; 0xa0
    133c:	805a      	strh	r2, [r3, #2]
    133e:	e002      	b.n	1346 <_Z18getCounterPositionh+0xa2>
	} else {
		counterPos.y = 240;
    1340:	687b      	ldr	r3, [r7, #4]
    1342:	22f0      	movs	r2, #240	; 0xf0
    1344:	805a      	strh	r2, [r3, #2]
	}
	return counterPos;
    1346:	46c0      	nop			; (mov r8, r8)
}
    1348:	6878      	ldr	r0, [r7, #4]
    134a:	46bd      	mov	sp, r7
    134c:	b002      	add	sp, #8
    134e:	bd80      	pop	{r7, pc}

00001350 <_Z23getSmallCounterPositionhh>:

// Returns position to draw small quantum counter
TS_Point getSmallCounterPosition(uint8_t square, uint8_t turn) {
    1350:	b580      	push	{r7, lr}
    1352:	b082      	sub	sp, #8
    1354:	af00      	add	r7, sp, #0
    1356:	6078      	str	r0, [r7, #4]
    1358:	0008      	movs	r0, r1
    135a:	0011      	movs	r1, r2
    135c:	1cfb      	adds	r3, r7, #3
    135e:	1c02      	adds	r2, r0, #0
    1360:	701a      	strb	r2, [r3, #0]
    1362:	1cbb      	adds	r3, r7, #2
    1364:	1c0a      	adds	r2, r1, #0
    1366:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos = getCounterPosition(square);
    1368:	687a      	ldr	r2, [r7, #4]
    136a:	1cfb      	adds	r3, r7, #3
    136c:	781b      	ldrb	r3, [r3, #0]
    136e:	0019      	movs	r1, r3
    1370:	0010      	movs	r0, r2
    1372:	f7ff ff97 	bl	12a4 <_Z18getCounterPositionh>
	
	// Adjust classic counter position to small count position
	if (turn == 1 || turn == 4 || turn == 7) {
    1376:	1cbb      	adds	r3, r7, #2
    1378:	781b      	ldrb	r3, [r3, #0]
    137a:	2b01      	cmp	r3, #1
    137c:	d007      	beq.n	138e <_Z23getSmallCounterPositionhh+0x3e>
    137e:	1cbb      	adds	r3, r7, #2
    1380:	781b      	ldrb	r3, [r3, #0]
    1382:	2b04      	cmp	r3, #4
    1384:	d003      	beq.n	138e <_Z23getSmallCounterPositionhh+0x3e>
    1386:	1cbb      	adds	r3, r7, #2
    1388:	781b      	ldrb	r3, [r3, #0]
    138a:	2b07      	cmp	r3, #7
    138c:	d109      	bne.n	13a2 <_Z23getSmallCounterPositionhh+0x52>
		counterPos.x += 1;
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	2200      	movs	r2, #0
    1392:	5e9b      	ldrsh	r3, [r3, r2]
    1394:	b29b      	uxth	r3, r3
    1396:	3301      	adds	r3, #1
    1398:	b29b      	uxth	r3, r3
    139a:	b21a      	sxth	r2, r3
    139c:	687b      	ldr	r3, [r7, #4]
    139e:	801a      	strh	r2, [r3, #0]
    13a0:	e01e      	b.n	13e0 <_Z23getSmallCounterPositionhh+0x90>
		} else if (turn == 2 || turn == 5 || turn == 8) {
    13a2:	1cbb      	adds	r3, r7, #2
    13a4:	781b      	ldrb	r3, [r3, #0]
    13a6:	2b02      	cmp	r3, #2
    13a8:	d007      	beq.n	13ba <_Z23getSmallCounterPositionhh+0x6a>
    13aa:	1cbb      	adds	r3, r7, #2
    13ac:	781b      	ldrb	r3, [r3, #0]
    13ae:	2b05      	cmp	r3, #5
    13b0:	d003      	beq.n	13ba <_Z23getSmallCounterPositionhh+0x6a>
    13b2:	1cbb      	adds	r3, r7, #2
    13b4:	781b      	ldrb	r3, [r3, #0]
    13b6:	2b08      	cmp	r3, #8
    13b8:	d109      	bne.n	13ce <_Z23getSmallCounterPositionhh+0x7e>
		counterPos.x += 27;
    13ba:	687b      	ldr	r3, [r7, #4]
    13bc:	2200      	movs	r2, #0
    13be:	5e9b      	ldrsh	r3, [r3, r2]
    13c0:	b29b      	uxth	r3, r3
    13c2:	331b      	adds	r3, #27
    13c4:	b29b      	uxth	r3, r3
    13c6:	b21a      	sxth	r2, r3
    13c8:	687b      	ldr	r3, [r7, #4]
    13ca:	801a      	strh	r2, [r3, #0]
    13cc:	e008      	b.n	13e0 <_Z23getSmallCounterPositionhh+0x90>
		} else {
		counterPos.x += 53;
    13ce:	687b      	ldr	r3, [r7, #4]
    13d0:	2200      	movs	r2, #0
    13d2:	5e9b      	ldrsh	r3, [r3, r2]
    13d4:	b29b      	uxth	r3, r3
    13d6:	3335      	adds	r3, #53	; 0x35
    13d8:	b29b      	uxth	r3, r3
    13da:	b21a      	sxth	r2, r3
    13dc:	687b      	ldr	r3, [r7, #4]
    13de:	801a      	strh	r2, [r3, #0]
	}
		
	if (turn == 1 || turn == 2 || turn == 3) {
    13e0:	1cbb      	adds	r3, r7, #2
    13e2:	781b      	ldrb	r3, [r3, #0]
    13e4:	2b01      	cmp	r3, #1
    13e6:	d007      	beq.n	13f8 <_Z23getSmallCounterPositionhh+0xa8>
    13e8:	1cbb      	adds	r3, r7, #2
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	2b02      	cmp	r3, #2
    13ee:	d003      	beq.n	13f8 <_Z23getSmallCounterPositionhh+0xa8>
    13f0:	1cbb      	adds	r3, r7, #2
    13f2:	781b      	ldrb	r3, [r3, #0]
    13f4:	2b03      	cmp	r3, #3
    13f6:	d109      	bne.n	140c <_Z23getSmallCounterPositionhh+0xbc>
		counterPos.y += 1;
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	2202      	movs	r2, #2
    13fc:	5e9b      	ldrsh	r3, [r3, r2]
    13fe:	b29b      	uxth	r3, r3
    1400:	3301      	adds	r3, #1
    1402:	b29b      	uxth	r3, r3
    1404:	b21a      	sxth	r2, r3
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	805a      	strh	r2, [r3, #2]
    140a:	e01e      	b.n	144a <_Z23getSmallCounterPositionhh+0xfa>
		} else if (turn == 4 || turn == 5 || turn == 6) {
    140c:	1cbb      	adds	r3, r7, #2
    140e:	781b      	ldrb	r3, [r3, #0]
    1410:	2b04      	cmp	r3, #4
    1412:	d007      	beq.n	1424 <_Z23getSmallCounterPositionhh+0xd4>
    1414:	1cbb      	adds	r3, r7, #2
    1416:	781b      	ldrb	r3, [r3, #0]
    1418:	2b05      	cmp	r3, #5
    141a:	d003      	beq.n	1424 <_Z23getSmallCounterPositionhh+0xd4>
    141c:	1cbb      	adds	r3, r7, #2
    141e:	781b      	ldrb	r3, [r3, #0]
    1420:	2b06      	cmp	r3, #6
    1422:	d109      	bne.n	1438 <_Z23getSmallCounterPositionhh+0xe8>
		counterPos.y += 27;
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	2202      	movs	r2, #2
    1428:	5e9b      	ldrsh	r3, [r3, r2]
    142a:	b29b      	uxth	r3, r3
    142c:	331b      	adds	r3, #27
    142e:	b29b      	uxth	r3, r3
    1430:	b21a      	sxth	r2, r3
    1432:	687b      	ldr	r3, [r7, #4]
    1434:	805a      	strh	r2, [r3, #2]
    1436:	e008      	b.n	144a <_Z23getSmallCounterPositionhh+0xfa>
		} else {
		counterPos.y += 53;
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	2202      	movs	r2, #2
    143c:	5e9b      	ldrsh	r3, [r3, r2]
    143e:	b29b      	uxth	r3, r3
    1440:	3335      	adds	r3, #53	; 0x35
    1442:	b29b      	uxth	r3, r3
    1444:	b21a      	sxth	r2, r3
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	805a      	strh	r2, [r3, #2]
	}
	
	return counterPos;
    144a:	46c0      	nop			; (mov r8, r8)
}
    144c:	6878      	ldr	r0, [r7, #4]
    144e:	46bd      	mov	sp, r7
    1450:	b002      	add	sp, #8
    1452:	bd80      	pop	{r7, pc}

00001454 <_Z16drawSmallCounterhh>:

void drawSmallCounter(uint8_t square, uint8_t turn) {
    1454:	b580      	push	{r7, lr}
    1456:	b08a      	sub	sp, #40	; 0x28
    1458:	af00      	add	r7, sp, #0
    145a:	0002      	movs	r2, r0
    145c:	1dfb      	adds	r3, r7, #7
    145e:	701a      	strb	r2, [r3, #0]
    1460:	1dbb      	adds	r3, r7, #6
    1462:	1c0a      	adds	r2, r1, #0
    1464:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos = getSmallCounterPosition(square, turn);
    1466:	2310      	movs	r3, #16
    1468:	18f8      	adds	r0, r7, r3
    146a:	1dbb      	adds	r3, r7, #6
    146c:	781a      	ldrb	r2, [r3, #0]
    146e:	1dfb      	adds	r3, r7, #7
    1470:	781b      	ldrb	r3, [r3, #0]
    1472:	0019      	movs	r1, r3
    1474:	f7ff ff6c 	bl	1350 <_Z23getSmallCounterPositionhh>
	
	char bg;
	if (square % 2) {
    1478:	1dfb      	adds	r3, r7, #7
    147a:	781b      	ldrb	r3, [r3, #0]
    147c:	2201      	movs	r2, #1
    147e:	4013      	ands	r3, r2
    1480:	d004      	beq.n	148c <_Z16drawSmallCounterhh+0x38>
		bg = 'b';
    1482:	2327      	movs	r3, #39	; 0x27
    1484:	18fb      	adds	r3, r7, r3
    1486:	2262      	movs	r2, #98	; 0x62
    1488:	701a      	strb	r2, [r3, #0]
    148a:	e003      	b.n	1494 <_Z16drawSmallCounterhh+0x40>
	} else {
		bg = 'w';
    148c:	2327      	movs	r3, #39	; 0x27
    148e:	18fb      	adds	r3, r7, r3
    1490:	2277      	movs	r2, #119	; 0x77
    1492:	701a      	strb	r2, [r3, #0]
	}
	
	char bitmap[8] = {bg, 'c', ((String) turn).charAt(0), '.', 'b', 'm', 'p'};
    1494:	2308      	movs	r3, #8
    1496:	18fb      	adds	r3, r7, r3
    1498:	0018      	movs	r0, r3
    149a:	2308      	movs	r3, #8
    149c:	001a      	movs	r2, r3
    149e:	2100      	movs	r1, #0
    14a0:	f00f fa6c 	bl	1097c <memset>
    14a4:	2308      	movs	r3, #8
    14a6:	18fb      	adds	r3, r7, r3
    14a8:	2263      	movs	r2, #99	; 0x63
    14aa:	705a      	strb	r2, [r3, #1]
    14ac:	2308      	movs	r3, #8
    14ae:	18fb      	adds	r3, r7, r3
    14b0:	222e      	movs	r2, #46	; 0x2e
    14b2:	70da      	strb	r2, [r3, #3]
    14b4:	2308      	movs	r3, #8
    14b6:	18fb      	adds	r3, r7, r3
    14b8:	2262      	movs	r2, #98	; 0x62
    14ba:	711a      	strb	r2, [r3, #4]
    14bc:	2308      	movs	r3, #8
    14be:	18fb      	adds	r3, r7, r3
    14c0:	226d      	movs	r2, #109	; 0x6d
    14c2:	715a      	strb	r2, [r3, #5]
    14c4:	2308      	movs	r3, #8
    14c6:	18fb      	adds	r3, r7, r3
    14c8:	2270      	movs	r2, #112	; 0x70
    14ca:	719a      	strb	r2, [r3, #6]
    14cc:	2308      	movs	r3, #8
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	2227      	movs	r2, #39	; 0x27
    14d2:	18ba      	adds	r2, r7, r2
    14d4:	7812      	ldrb	r2, [r2, #0]
    14d6:	701a      	strb	r2, [r3, #0]
    14d8:	1dbb      	adds	r3, r7, #6
    14da:	7819      	ldrb	r1, [r3, #0]
    14dc:	2318      	movs	r3, #24
    14de:	18fb      	adds	r3, r7, r3
    14e0:	220a      	movs	r2, #10
    14e2:	0018      	movs	r0, r3
    14e4:	f003 fc0e 	bl	4d04 <_ZN6StringC1Ehh>
    14e8:	2318      	movs	r3, #24
    14ea:	18fb      	adds	r3, r7, r3
    14ec:	2100      	movs	r1, #0
    14ee:	0018      	movs	r0, r3
    14f0:	f003 fc74 	bl	4ddc <_ZNK6String6charAtEj>
    14f4:	0003      	movs	r3, r0
    14f6:	001a      	movs	r2, r3
    14f8:	2308      	movs	r3, #8
    14fa:	18fb      	adds	r3, r7, r3
    14fc:	709a      	strb	r2, [r3, #2]
    14fe:	2318      	movs	r3, #24
    1500:	18fb      	adds	r3, r7, r3
    1502:	0018      	movs	r0, r3
    1504:	f003 fc62 	bl	4dcc <_ZN6StringD1Ev>
	drawBitmap(bitmap, counterPos.x, counterPos.y);
    1508:	2310      	movs	r3, #16
    150a:	18fb      	adds	r3, r7, r3
    150c:	2100      	movs	r1, #0
    150e:	5e59      	ldrsh	r1, [r3, r1]
    1510:	2310      	movs	r3, #16
    1512:	18fb      	adds	r3, r7, r3
    1514:	2202      	movs	r2, #2
    1516:	5e9a      	ldrsh	r2, [r3, r2]
    1518:	2308      	movs	r3, #8
    151a:	18fb      	adds	r3, r7, r3
    151c:	0018      	movs	r0, r3
    151e:	f7ff fa33 	bl	988 <_Z10drawBitmapPcss>
}
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	46bd      	mov	sp, r7
    1526:	b00a      	add	sp, #40	; 0x28
    1528:	bd80      	pop	{r7, pc}

0000152a <_Z10findCirclePA11_hhhhPh>:

void findCircle(uint8_t boardState[9][11], uint8_t x, uint8_t y, uint8_t origX, uint8_t subscripts[9]) {
    152a:	b590      	push	{r4, r7, lr}
    152c:	b087      	sub	sp, #28
    152e:	af02      	add	r7, sp, #8
    1530:	6078      	str	r0, [r7, #4]
    1532:	000c      	movs	r4, r1
    1534:	0010      	movs	r0, r2
    1536:	0019      	movs	r1, r3
    1538:	1cfb      	adds	r3, r7, #3
    153a:	1c22      	adds	r2, r4, #0
    153c:	701a      	strb	r2, [r3, #0]
    153e:	1cbb      	adds	r3, r7, #2
    1540:	1c02      	adds	r2, r0, #0
    1542:	701a      	strb	r2, [r3, #0]
    1544:	1c7b      	adds	r3, r7, #1
    1546:	1c0a      	adds	r2, r1, #0
    1548:	701a      	strb	r2, [r3, #0]
	// For each of the possible small counters in this square
	for (uint8_t i = 0; i < 9; i++) {
    154a:	230f      	movs	r3, #15
    154c:	18fb      	adds	r3, r7, r3
    154e:	2200      	movs	r2, #0
    1550:	701a      	strb	r2, [r3, #0]
    1552:	230f      	movs	r3, #15
    1554:	18fb      	adds	r3, r7, r3
    1556:	781b      	ldrb	r3, [r3, #0]
    1558:	2b08      	cmp	r3, #8
    155a:	dd00      	ble.n	155e <_Z10findCirclePA11_hhhhPh+0x34>
    155c:	e090      	b.n	1680 <_Z10findCirclePA11_hhhhPh+0x156>
		// Find any counters that exist and aren't the current counter
		if (boardState[x][i + 2] != 0 && i + 2 != y) {
    155e:	1cfb      	adds	r3, r7, #3
    1560:	781a      	ldrb	r2, [r3, #0]
    1562:	0013      	movs	r3, r2
    1564:	009b      	lsls	r3, r3, #2
    1566:	189b      	adds	r3, r3, r2
    1568:	005b      	lsls	r3, r3, #1
    156a:	189b      	adds	r3, r3, r2
    156c:	687a      	ldr	r2, [r7, #4]
    156e:	18d2      	adds	r2, r2, r3
    1570:	230f      	movs	r3, #15
    1572:	18fb      	adds	r3, r7, r3
    1574:	781b      	ldrb	r3, [r3, #0]
    1576:	3302      	adds	r3, #2
    1578:	5cd3      	ldrb	r3, [r2, r3]
    157a:	2b00      	cmp	r3, #0
    157c:	d100      	bne.n	1580 <_Z10findCirclePA11_hhhhPh+0x56>
    157e:	e077      	b.n	1670 <_Z10findCirclePA11_hhhhPh+0x146>
    1580:	230f      	movs	r3, #15
    1582:	18fb      	adds	r3, r7, r3
    1584:	781b      	ldrb	r3, [r3, #0]
    1586:	1c9a      	adds	r2, r3, #2
    1588:	1cbb      	adds	r3, r7, #2
    158a:	781b      	ldrb	r3, [r3, #0]
    158c:	429a      	cmp	r2, r3
    158e:	d100      	bne.n	1592 <_Z10findCirclePA11_hhhhPh+0x68>
    1590:	e06e      	b.n	1670 <_Z10findCirclePA11_hhhhPh+0x146>
			// Find the pair counter of the one found
			// By going through all the squares
			for (uint8_t j = 0; j < 9; j++) {
    1592:	230e      	movs	r3, #14
    1594:	18fb      	adds	r3, r7, r3
    1596:	2200      	movs	r2, #0
    1598:	701a      	strb	r2, [r3, #0]
    159a:	230e      	movs	r3, #14
    159c:	18fb      	adds	r3, r7, r3
    159e:	781b      	ldrb	r3, [r3, #0]
    15a0:	2b08      	cmp	r3, #8
    15a2:	dc65      	bgt.n	1670 <_Z10findCirclePA11_hhhhPh+0x146>
				// And finding a counter of the same subscript that isn't the current one
				if (boardState[j][i + 2] != 0 && j != x) {
    15a4:	230e      	movs	r3, #14
    15a6:	18fb      	adds	r3, r7, r3
    15a8:	781a      	ldrb	r2, [r3, #0]
    15aa:	0013      	movs	r3, r2
    15ac:	009b      	lsls	r3, r3, #2
    15ae:	189b      	adds	r3, r3, r2
    15b0:	005b      	lsls	r3, r3, #1
    15b2:	189b      	adds	r3, r3, r2
    15b4:	687a      	ldr	r2, [r7, #4]
    15b6:	18d2      	adds	r2, r2, r3
    15b8:	230f      	movs	r3, #15
    15ba:	18fb      	adds	r3, r7, r3
    15bc:	781b      	ldrb	r3, [r3, #0]
    15be:	3302      	adds	r3, #2
    15c0:	5cd3      	ldrb	r3, [r2, r3]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d04c      	beq.n	1660 <_Z10findCirclePA11_hhhhPh+0x136>
    15c6:	230e      	movs	r3, #14
    15c8:	18fa      	adds	r2, r7, r3
    15ca:	1cfb      	adds	r3, r7, #3
    15cc:	7812      	ldrb	r2, [r2, #0]
    15ce:	781b      	ldrb	r3, [r3, #0]
    15d0:	429a      	cmp	r2, r3
    15d2:	d045      	beq.n	1660 <_Z10findCirclePA11_hhhhPh+0x136>
					// Check if this is the original square
					if (j == origX) {
    15d4:	230e      	movs	r3, #14
    15d6:	18fa      	adds	r2, r7, r3
    15d8:	1c7b      	adds	r3, r7, #1
    15da:	7812      	ldrb	r2, [r2, #0]
    15dc:	781b      	ldrb	r3, [r3, #0]
    15de:	429a      	cmp	r2, r3
    15e0:	d106      	bne.n	15f0 <_Z10findCirclePA11_hhhhPh+0xc6>
						subscripts[0] = y - 1;
    15e2:	1cbb      	adds	r3, r7, #2
    15e4:	781b      	ldrb	r3, [r3, #0]
    15e6:	3b01      	subs	r3, #1
    15e8:	b2da      	uxtb	r2, r3
    15ea:	6a3b      	ldr	r3, [r7, #32]
    15ec:	701a      	strb	r2, [r3, #0]
						return;
    15ee:	e047      	b.n	1680 <_Z10findCirclePA11_hhhhPh+0x156>
					}
					// If not repeat for the next counter
					findCircle(boardState, j, i + 2, origX, subscripts);
    15f0:	230f      	movs	r3, #15
    15f2:	18fb      	adds	r3, r7, r3
    15f4:	781b      	ldrb	r3, [r3, #0]
    15f6:	3302      	adds	r3, #2
    15f8:	b2da      	uxtb	r2, r3
    15fa:	1c7b      	adds	r3, r7, #1
    15fc:	781c      	ldrb	r4, [r3, #0]
    15fe:	230e      	movs	r3, #14
    1600:	18fb      	adds	r3, r7, r3
    1602:	7819      	ldrb	r1, [r3, #0]
    1604:	6878      	ldr	r0, [r7, #4]
    1606:	6a3b      	ldr	r3, [r7, #32]
    1608:	9300      	str	r3, [sp, #0]
    160a:	0023      	movs	r3, r4
    160c:	f7ff ff8d 	bl	152a <_Z10findCirclePA11_hhhhPh>
					// When the function returns, check if it found the original square
					if (subscripts[0] != 255) {
    1610:	6a3b      	ldr	r3, [r7, #32]
    1612:	781b      	ldrb	r3, [r3, #0]
    1614:	2bff      	cmp	r3, #255	; 0xff
    1616:	d023      	beq.n	1660 <_Z10findCirclePA11_hhhhPh+0x136>
						// If it did add this point on the end
						for (uint8_t k = 0; k < 9; k++) {
    1618:	230d      	movs	r3, #13
    161a:	18fb      	adds	r3, r7, r3
    161c:	2200      	movs	r2, #0
    161e:	701a      	strb	r2, [r3, #0]
    1620:	230d      	movs	r3, #13
    1622:	18fb      	adds	r3, r7, r3
    1624:	781b      	ldrb	r3, [r3, #0]
    1626:	2b08      	cmp	r3, #8
    1628:	dc1a      	bgt.n	1660 <_Z10findCirclePA11_hhhhPh+0x136>
							if (subscripts[k] == 255) {
    162a:	230d      	movs	r3, #13
    162c:	18fb      	adds	r3, r7, r3
    162e:	781b      	ldrb	r3, [r3, #0]
    1630:	6a3a      	ldr	r2, [r7, #32]
    1632:	18d3      	adds	r3, r2, r3
    1634:	781b      	ldrb	r3, [r3, #0]
    1636:	2bff      	cmp	r3, #255	; 0xff
    1638:	d10a      	bne.n	1650 <_Z10findCirclePA11_hhhhPh+0x126>
								subscripts[k] = y - 1;
    163a:	230d      	movs	r3, #13
    163c:	18fb      	adds	r3, r7, r3
    163e:	781b      	ldrb	r3, [r3, #0]
    1640:	6a3a      	ldr	r2, [r7, #32]
    1642:	18d3      	adds	r3, r2, r3
    1644:	1cba      	adds	r2, r7, #2
    1646:	7812      	ldrb	r2, [r2, #0]
    1648:	3a01      	subs	r2, #1
    164a:	b2d2      	uxtb	r2, r2
    164c:	701a      	strb	r2, [r3, #0]
								return;
    164e:	e017      	b.n	1680 <_Z10findCirclePA11_hhhhPh+0x156>
						for (uint8_t k = 0; k < 9; k++) {
    1650:	230d      	movs	r3, #13
    1652:	18fb      	adds	r3, r7, r3
    1654:	781a      	ldrb	r2, [r3, #0]
    1656:	230d      	movs	r3, #13
    1658:	18fb      	adds	r3, r7, r3
    165a:	3201      	adds	r2, #1
    165c:	701a      	strb	r2, [r3, #0]
    165e:	e7df      	b.n	1620 <_Z10findCirclePA11_hhhhPh+0xf6>
			for (uint8_t j = 0; j < 9; j++) {
    1660:	230e      	movs	r3, #14
    1662:	18fb      	adds	r3, r7, r3
    1664:	781a      	ldrb	r2, [r3, #0]
    1666:	230e      	movs	r3, #14
    1668:	18fb      	adds	r3, r7, r3
    166a:	3201      	adds	r2, #1
    166c:	701a      	strb	r2, [r3, #0]
    166e:	e794      	b.n	159a <_Z10findCirclePA11_hhhhPh+0x70>
	for (uint8_t i = 0; i < 9; i++) {
    1670:	230f      	movs	r3, #15
    1672:	18fb      	adds	r3, r7, r3
    1674:	781a      	ldrb	r2, [r3, #0]
    1676:	230f      	movs	r3, #15
    1678:	18fb      	adds	r3, r7, r3
    167a:	3201      	adds	r2, #1
    167c:	701a      	strb	r2, [r3, #0]
    167e:	e768      	b.n	1552 <_Z10findCirclePA11_hhhhPh+0x28>
					}
				}
			}
		}
	}
}
    1680:	46bd      	mov	sp, r7
    1682:	b005      	add	sp, #20
    1684:	bd90      	pop	{r4, r7, pc}

00001686 <_Z21drawClassicalCountersPA11_hhhhh>:

void drawClassicalCounters(uint8_t boardState[9][11], uint8_t x, uint8_t y, uint8_t origX, uint8_t origY) {
    1686:	b590      	push	{r4, r7, lr}
    1688:	b08d      	sub	sp, #52	; 0x34
    168a:	af02      	add	r7, sp, #8
    168c:	6078      	str	r0, [r7, #4]
    168e:	000c      	movs	r4, r1
    1690:	0010      	movs	r0, r2
    1692:	0019      	movs	r1, r3
    1694:	1cfb      	adds	r3, r7, #3
    1696:	1c22      	adds	r2, r4, #0
    1698:	701a      	strb	r2, [r3, #0]
    169a:	1cbb      	adds	r3, r7, #2
    169c:	1c02      	adds	r2, r0, #0
    169e:	701a      	strb	r2, [r3, #0]
    16a0:	1c7b      	adds	r3, r7, #1
    16a2:	1c0a      	adds	r2, r1, #0
    16a4:	701a      	strb	r2, [r3, #0]
	char bg;
	if (x % 2) {
    16a6:	1cfb      	adds	r3, r7, #3
    16a8:	781b      	ldrb	r3, [r3, #0]
    16aa:	2201      	movs	r2, #1
    16ac:	4013      	ands	r3, r2
    16ae:	d004      	beq.n	16ba <_Z21drawClassicalCountersPA11_hhhhh+0x34>
		bg = 'b';
    16b0:	2327      	movs	r3, #39	; 0x27
    16b2:	18fb      	adds	r3, r7, r3
    16b4:	2262      	movs	r2, #98	; 0x62
    16b6:	701a      	strb	r2, [r3, #0]
    16b8:	e003      	b.n	16c2 <_Z21drawClassicalCountersPA11_hhhhh+0x3c>
	} else {
		bg = 'w';
    16ba:	2327      	movs	r3, #39	; 0x27
    16bc:	18fb      	adds	r3, r7, r3
    16be:	2277      	movs	r2, #119	; 0x77
    16c0:	701a      	strb	r2, [r3, #0]
	}
	uint8_t player;
	if (y % 2) {
    16c2:	1cbb      	adds	r3, r7, #2
    16c4:	781b      	ldrb	r3, [r3, #0]
    16c6:	2201      	movs	r2, #1
    16c8:	4013      	ands	r3, r2
    16ca:	d004      	beq.n	16d6 <_Z21drawClassicalCountersPA11_hhhhh+0x50>
		player = 2;
    16cc:	2326      	movs	r3, #38	; 0x26
    16ce:	18fb      	adds	r3, r7, r3
    16d0:	2202      	movs	r2, #2
    16d2:	701a      	strb	r2, [r3, #0]
    16d4:	e003      	b.n	16de <_Z21drawClassicalCountersPA11_hhhhh+0x58>
	} else {
		player = 1;
    16d6:	2326      	movs	r3, #38	; 0x26
    16d8:	18fb      	adds	r3, r7, r3
    16da:	2201      	movs	r2, #1
    16dc:	701a      	strb	r2, [r3, #0]
	}
	char bitmap[] = {bg , 'b', ((String) (y - 1)).charAt(0), '.', 'b', 'm', 'p'};
    16de:	2310      	movs	r3, #16
    16e0:	18fb      	adds	r3, r7, r3
    16e2:	0018      	movs	r0, r3
    16e4:	2307      	movs	r3, #7
    16e6:	001a      	movs	r2, r3
    16e8:	2100      	movs	r1, #0
    16ea:	f00f f947 	bl	1097c <memset>
    16ee:	2310      	movs	r3, #16
    16f0:	18fb      	adds	r3, r7, r3
    16f2:	2262      	movs	r2, #98	; 0x62
    16f4:	705a      	strb	r2, [r3, #1]
    16f6:	2310      	movs	r3, #16
    16f8:	18fb      	adds	r3, r7, r3
    16fa:	222e      	movs	r2, #46	; 0x2e
    16fc:	70da      	strb	r2, [r3, #3]
    16fe:	2310      	movs	r3, #16
    1700:	18fb      	adds	r3, r7, r3
    1702:	2262      	movs	r2, #98	; 0x62
    1704:	711a      	strb	r2, [r3, #4]
    1706:	2310      	movs	r3, #16
    1708:	18fb      	adds	r3, r7, r3
    170a:	226d      	movs	r2, #109	; 0x6d
    170c:	715a      	strb	r2, [r3, #5]
    170e:	2310      	movs	r3, #16
    1710:	18fb      	adds	r3, r7, r3
    1712:	2270      	movs	r2, #112	; 0x70
    1714:	719a      	strb	r2, [r3, #6]
    1716:	2310      	movs	r3, #16
    1718:	18fb      	adds	r3, r7, r3
    171a:	2227      	movs	r2, #39	; 0x27
    171c:	18ba      	adds	r2, r7, r2
    171e:	7812      	ldrb	r2, [r2, #0]
    1720:	701a      	strb	r2, [r3, #0]
    1722:	1cbb      	adds	r3, r7, #2
    1724:	781b      	ldrb	r3, [r3, #0]
    1726:	1e59      	subs	r1, r3, #1
    1728:	2318      	movs	r3, #24
    172a:	18fb      	adds	r3, r7, r3
    172c:	220a      	movs	r2, #10
    172e:	0018      	movs	r0, r3
    1730:	f003 fb1a 	bl	4d68 <_ZN6StringC1Eih>
    1734:	2318      	movs	r3, #24
    1736:	18fb      	adds	r3, r7, r3
    1738:	2100      	movs	r1, #0
    173a:	0018      	movs	r0, r3
    173c:	f003 fb4e 	bl	4ddc <_ZNK6String6charAtEj>
    1740:	0003      	movs	r3, r0
    1742:	001a      	movs	r2, r3
    1744:	2310      	movs	r3, #16
    1746:	18fb      	adds	r3, r7, r3
    1748:	709a      	strb	r2, [r3, #2]
    174a:	2318      	movs	r3, #24
    174c:	18fb      	adds	r3, r7, r3
    174e:	0018      	movs	r0, r3
    1750:	f003 fb3c 	bl	4dcc <_ZN6StringD1Ev>
	TS_Point counterPos = getCounterPosition(x);
    1754:	2308      	movs	r3, #8
    1756:	18fa      	adds	r2, r7, r3
    1758:	1cfb      	adds	r3, r7, #3
    175a:	781b      	ldrb	r3, [r3, #0]
    175c:	0019      	movs	r1, r3
    175e:	0010      	movs	r0, r2
    1760:	f7ff fda0 	bl	12a4 <_Z18getCounterPositionh>
	drawBitmap(bitmap, counterPos.x, counterPos.y);
    1764:	2308      	movs	r3, #8
    1766:	18fb      	adds	r3, r7, r3
    1768:	2100      	movs	r1, #0
    176a:	5e59      	ldrsh	r1, [r3, r1]
    176c:	2308      	movs	r3, #8
    176e:	18fb      	adds	r3, r7, r3
    1770:	2202      	movs	r2, #2
    1772:	5e9a      	ldrsh	r2, [r3, r2]
    1774:	2310      	movs	r3, #16
    1776:	18fb      	adds	r3, r7, r3
    1778:	0018      	movs	r0, r3
    177a:	f7ff f905 	bl	988 <_Z10drawBitmapPcss>
	boardState[x][0] = player;
    177e:	1cfb      	adds	r3, r7, #3
    1780:	781a      	ldrb	r2, [r3, #0]
    1782:	0013      	movs	r3, r2
    1784:	009b      	lsls	r3, r3, #2
    1786:	189b      	adds	r3, r3, r2
    1788:	005b      	lsls	r3, r3, #1
    178a:	189b      	adds	r3, r3, r2
    178c:	687a      	ldr	r2, [r7, #4]
    178e:	18d3      	adds	r3, r2, r3
    1790:	2226      	movs	r2, #38	; 0x26
    1792:	18ba      	adds	r2, r7, r2
    1794:	7812      	ldrb	r2, [r2, #0]
    1796:	701a      	strb	r2, [r3, #0]
	boardState[x][1] = y;
    1798:	1cfb      	adds	r3, r7, #3
    179a:	781a      	ldrb	r2, [r3, #0]
    179c:	0013      	movs	r3, r2
    179e:	009b      	lsls	r3, r3, #2
    17a0:	189b      	adds	r3, r3, r2
    17a2:	005b      	lsls	r3, r3, #1
    17a4:	189b      	adds	r3, r3, r2
    17a6:	687a      	ldr	r2, [r7, #4]
    17a8:	18d3      	adds	r3, r2, r3
    17aa:	1cba      	adds	r2, r7, #2
    17ac:	7812      	ldrb	r2, [r2, #0]
    17ae:	705a      	strb	r2, [r3, #1]
	
	for (uint8_t i = 0; i < 9; i++) {
    17b0:	2325      	movs	r3, #37	; 0x25
    17b2:	18fb      	adds	r3, r7, r3
    17b4:	2200      	movs	r2, #0
    17b6:	701a      	strb	r2, [r3, #0]
    17b8:	2325      	movs	r3, #37	; 0x25
    17ba:	18fb      	adds	r3, r7, r3
    17bc:	781b      	ldrb	r3, [r3, #0]
    17be:	2b08      	cmp	r3, #8
    17c0:	dc6a      	bgt.n	1898 <_Z21drawClassicalCountersPA11_hhhhh+0x212>
		if (boardState[x][i + 2] != 0 && i + 2 != y) {
    17c2:	1cfb      	adds	r3, r7, #3
    17c4:	781a      	ldrb	r2, [r3, #0]
    17c6:	0013      	movs	r3, r2
    17c8:	009b      	lsls	r3, r3, #2
    17ca:	189b      	adds	r3, r3, r2
    17cc:	005b      	lsls	r3, r3, #1
    17ce:	189b      	adds	r3, r3, r2
    17d0:	687a      	ldr	r2, [r7, #4]
    17d2:	18d2      	adds	r2, r2, r3
    17d4:	2325      	movs	r3, #37	; 0x25
    17d6:	18fb      	adds	r3, r7, r3
    17d8:	781b      	ldrb	r3, [r3, #0]
    17da:	3302      	adds	r3, #2
    17dc:	5cd3      	ldrb	r3, [r2, r3]
    17de:	2b00      	cmp	r3, #0
    17e0:	d052      	beq.n	1888 <_Z21drawClassicalCountersPA11_hhhhh+0x202>
    17e2:	2325      	movs	r3, #37	; 0x25
    17e4:	18fb      	adds	r3, r7, r3
    17e6:	781b      	ldrb	r3, [r3, #0]
    17e8:	1c9a      	adds	r2, r3, #2
    17ea:	1cbb      	adds	r3, r7, #2
    17ec:	781b      	ldrb	r3, [r3, #0]
    17ee:	429a      	cmp	r2, r3
    17f0:	d04a      	beq.n	1888 <_Z21drawClassicalCountersPA11_hhhhh+0x202>
			// Runs when another counter is found in the same square
			for (uint8_t j = 0; j < 9; j++) {
    17f2:	2324      	movs	r3, #36	; 0x24
    17f4:	18fb      	adds	r3, r7, r3
    17f6:	2200      	movs	r2, #0
    17f8:	701a      	strb	r2, [r3, #0]
    17fa:	2324      	movs	r3, #36	; 0x24
    17fc:	18fb      	adds	r3, r7, r3
    17fe:	781b      	ldrb	r3, [r3, #0]
    1800:	2b08      	cmp	r3, #8
    1802:	dc41      	bgt.n	1888 <_Z21drawClassicalCountersPA11_hhhhh+0x202>
				if (boardState[j][i + 2] != 0 && j != x) {
    1804:	2324      	movs	r3, #36	; 0x24
    1806:	18fb      	adds	r3, r7, r3
    1808:	781a      	ldrb	r2, [r3, #0]
    180a:	0013      	movs	r3, r2
    180c:	009b      	lsls	r3, r3, #2
    180e:	189b      	adds	r3, r3, r2
    1810:	005b      	lsls	r3, r3, #1
    1812:	189b      	adds	r3, r3, r2
    1814:	687a      	ldr	r2, [r7, #4]
    1816:	18d2      	adds	r2, r2, r3
    1818:	2325      	movs	r3, #37	; 0x25
    181a:	18fb      	adds	r3, r7, r3
    181c:	781b      	ldrb	r3, [r3, #0]
    181e:	3302      	adds	r3, #2
    1820:	5cd3      	ldrb	r3, [r2, r3]
    1822:	2b00      	cmp	r3, #0
    1824:	d028      	beq.n	1878 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
    1826:	2324      	movs	r3, #36	; 0x24
    1828:	18fa      	adds	r2, r7, r3
    182a:	1cfb      	adds	r3, r7, #3
    182c:	7812      	ldrb	r2, [r2, #0]
    182e:	781b      	ldrb	r3, [r3, #0]
    1830:	429a      	cmp	r2, r3
    1832:	d021      	beq.n	1878 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
					// Runs when pair is found at [j][i + 2]
					if (j != origX && i + 2 != origY) {
    1834:	2324      	movs	r3, #36	; 0x24
    1836:	18fa      	adds	r2, r7, r3
    1838:	1c7b      	adds	r3, r7, #1
    183a:	7812      	ldrb	r2, [r2, #0]
    183c:	781b      	ldrb	r3, [r3, #0]
    183e:	429a      	cmp	r2, r3
    1840:	d01a      	beq.n	1878 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
    1842:	2325      	movs	r3, #37	; 0x25
    1844:	18fb      	adds	r3, r7, r3
    1846:	781b      	ldrb	r3, [r3, #0]
    1848:	1c9a      	adds	r2, r3, #2
    184a:	2338      	movs	r3, #56	; 0x38
    184c:	18fb      	adds	r3, r7, r3
    184e:	781b      	ldrb	r3, [r3, #0]
    1850:	429a      	cmp	r2, r3
    1852:	d011      	beq.n	1878 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
						// Runs if not the original counter
						drawClassicalCounters(boardState, j, i + 2, origX, origY);
    1854:	2325      	movs	r3, #37	; 0x25
    1856:	18fb      	adds	r3, r7, r3
    1858:	781b      	ldrb	r3, [r3, #0]
    185a:	3302      	adds	r3, #2
    185c:	b2da      	uxtb	r2, r3
    185e:	1c7b      	adds	r3, r7, #1
    1860:	781c      	ldrb	r4, [r3, #0]
    1862:	2324      	movs	r3, #36	; 0x24
    1864:	18fb      	adds	r3, r7, r3
    1866:	7819      	ldrb	r1, [r3, #0]
    1868:	6878      	ldr	r0, [r7, #4]
    186a:	2338      	movs	r3, #56	; 0x38
    186c:	18fb      	adds	r3, r7, r3
    186e:	781b      	ldrb	r3, [r3, #0]
    1870:	9300      	str	r3, [sp, #0]
    1872:	0023      	movs	r3, r4
    1874:	f7ff ff07 	bl	1686 <_Z21drawClassicalCountersPA11_hhhhh>
			for (uint8_t j = 0; j < 9; j++) {
    1878:	2324      	movs	r3, #36	; 0x24
    187a:	18fb      	adds	r3, r7, r3
    187c:	781a      	ldrb	r2, [r3, #0]
    187e:	2324      	movs	r3, #36	; 0x24
    1880:	18fb      	adds	r3, r7, r3
    1882:	3201      	adds	r2, #1
    1884:	701a      	strb	r2, [r3, #0]
    1886:	e7b8      	b.n	17fa <_Z21drawClassicalCountersPA11_hhhhh+0x174>
	for (uint8_t i = 0; i < 9; i++) {
    1888:	2325      	movs	r3, #37	; 0x25
    188a:	18fb      	adds	r3, r7, r3
    188c:	781a      	ldrb	r2, [r3, #0]
    188e:	2325      	movs	r3, #37	; 0x25
    1890:	18fb      	adds	r3, r7, r3
    1892:	3201      	adds	r2, #1
    1894:	701a      	strb	r2, [r3, #0]
    1896:	e78f      	b.n	17b8 <_Z21drawClassicalCountersPA11_hhhhh+0x132>
					}
				}
			}
		}
	}
}
    1898:	46c0      	nop			; (mov r8, r8)
    189a:	46bd      	mov	sp, r7
    189c:	b00b      	add	sp, #44	; 0x2c
    189e:	bd90      	pop	{r4, r7, pc}

000018a0 <_Z21checkForQuantumWinnerPA11_h>:

uint8_t checkForQuantumWinner(uint8_t boardState[9][11]) {
    18a0:	b590      	push	{r4, r7, lr}
    18a2:	b087      	sub	sp, #28
    18a4:	af00      	add	r7, sp, #0
    18a6:	6078      	str	r0, [r7, #4]
	// winningRows[x][0] = winner
	// winningRows[x][1] = subscript total
	uint8_t winningRows[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    18a8:	2308      	movs	r3, #8
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	0018      	movs	r0, r3
    18ae:	2306      	movs	r3, #6
    18b0:	001a      	movs	r2, r3
    18b2:	2100      	movs	r1, #0
    18b4:	f00f f862 	bl	1097c <memset>
	uint8_t numOfWinningRows = 0;
    18b8:	2317      	movs	r3, #23
    18ba:	18fb      	adds	r3, r7, r3
    18bc:	2200      	movs	r2, #0
    18be:	701a      	strb	r2, [r3, #0]
	uint8_t winner = 0;
    18c0:	2316      	movs	r3, #22
    18c2:	18fb      	adds	r3, r7, r3
    18c4:	2200      	movs	r2, #0
    18c6:	701a      	strb	r2, [r3, #0]
	// Check to see if someone has won
	for (uint8_t i = 0; i < 8; i++) {
    18c8:	2315      	movs	r3, #21
    18ca:	18fb      	adds	r3, r7, r3
    18cc:	2200      	movs	r2, #0
    18ce:	701a      	strb	r2, [r3, #0]
    18d0:	2315      	movs	r3, #21
    18d2:	18fb      	adds	r3, r7, r3
    18d4:	781b      	ldrb	r3, [r3, #0]
    18d6:	2b07      	cmp	r3, #7
    18d8:	dd00      	ble.n	18dc <_Z21checkForQuantumWinnerPA11_h+0x3c>
    18da:	e0db      	b.n	1a94 <_Z21checkForQuantumWinnerPA11_h+0x1f4>
		if (boardState[winIndexes[i][0]][0] == boardState[winIndexes[i][1]][0]
    18dc:	2315      	movs	r3, #21
    18de:	18fb      	adds	r3, r7, r3
    18e0:	781a      	ldrb	r2, [r3, #0]
    18e2:	4992      	ldr	r1, [pc, #584]	; (1b2c <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    18e4:	0013      	movs	r3, r2
    18e6:	005b      	lsls	r3, r3, #1
    18e8:	189b      	adds	r3, r3, r2
    18ea:	5c5b      	ldrb	r3, [r3, r1]
    18ec:	001a      	movs	r2, r3
    18ee:	0013      	movs	r3, r2
    18f0:	009b      	lsls	r3, r3, #2
    18f2:	189b      	adds	r3, r3, r2
    18f4:	005b      	lsls	r3, r3, #1
    18f6:	189b      	adds	r3, r3, r2
    18f8:	687a      	ldr	r2, [r7, #4]
    18fa:	18d3      	adds	r3, r2, r3
    18fc:	7819      	ldrb	r1, [r3, #0]
    18fe:	2315      	movs	r3, #21
    1900:	18fb      	adds	r3, r7, r3
    1902:	781a      	ldrb	r2, [r3, #0]
    1904:	4889      	ldr	r0, [pc, #548]	; (1b2c <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1906:	0013      	movs	r3, r2
    1908:	005b      	lsls	r3, r3, #1
    190a:	189b      	adds	r3, r3, r2
    190c:	18c3      	adds	r3, r0, r3
    190e:	3301      	adds	r3, #1
    1910:	781b      	ldrb	r3, [r3, #0]
    1912:	001a      	movs	r2, r3
    1914:	0013      	movs	r3, r2
    1916:	009b      	lsls	r3, r3, #2
    1918:	189b      	adds	r3, r3, r2
    191a:	005b      	lsls	r3, r3, #1
    191c:	189b      	adds	r3, r3, r2
    191e:	687a      	ldr	r2, [r7, #4]
    1920:	18d3      	adds	r3, r2, r3
    1922:	781b      	ldrb	r3, [r3, #0]
    1924:	4299      	cmp	r1, r3
    1926:	d000      	beq.n	192a <_Z21checkForQuantumWinnerPA11_h+0x8a>
    1928:	e0ac      	b.n	1a84 <_Z21checkForQuantumWinnerPA11_h+0x1e4>
		&& boardState[winIndexes[i][0]][0] == boardState[winIndexes[i][2]][0]
    192a:	2315      	movs	r3, #21
    192c:	18fb      	adds	r3, r7, r3
    192e:	781a      	ldrb	r2, [r3, #0]
    1930:	497e      	ldr	r1, [pc, #504]	; (1b2c <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1932:	0013      	movs	r3, r2
    1934:	005b      	lsls	r3, r3, #1
    1936:	189b      	adds	r3, r3, r2
    1938:	5c5b      	ldrb	r3, [r3, r1]
    193a:	001a      	movs	r2, r3
    193c:	0013      	movs	r3, r2
    193e:	009b      	lsls	r3, r3, #2
    1940:	189b      	adds	r3, r3, r2
    1942:	005b      	lsls	r3, r3, #1
    1944:	189b      	adds	r3, r3, r2
    1946:	687a      	ldr	r2, [r7, #4]
    1948:	18d3      	adds	r3, r2, r3
    194a:	7819      	ldrb	r1, [r3, #0]
    194c:	2315      	movs	r3, #21
    194e:	18fb      	adds	r3, r7, r3
    1950:	781a      	ldrb	r2, [r3, #0]
    1952:	4876      	ldr	r0, [pc, #472]	; (1b2c <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1954:	0013      	movs	r3, r2
    1956:	005b      	lsls	r3, r3, #1
    1958:	189b      	adds	r3, r3, r2
    195a:	18c3      	adds	r3, r0, r3
    195c:	3302      	adds	r3, #2
    195e:	781b      	ldrb	r3, [r3, #0]
    1960:	001a      	movs	r2, r3
    1962:	0013      	movs	r3, r2
    1964:	009b      	lsls	r3, r3, #2
    1966:	189b      	adds	r3, r3, r2
    1968:	005b      	lsls	r3, r3, #1
    196a:	189b      	adds	r3, r3, r2
    196c:	687a      	ldr	r2, [r7, #4]
    196e:	18d3      	adds	r3, r2, r3
    1970:	781b      	ldrb	r3, [r3, #0]
    1972:	4299      	cmp	r1, r3
    1974:	d000      	beq.n	1978 <_Z21checkForQuantumWinnerPA11_h+0xd8>
    1976:	e085      	b.n	1a84 <_Z21checkForQuantumWinnerPA11_h+0x1e4>
		&& boardState[winIndexes[i][0]][0] != 0) {
    1978:	2315      	movs	r3, #21
    197a:	18fb      	adds	r3, r7, r3
    197c:	781a      	ldrb	r2, [r3, #0]
    197e:	496b      	ldr	r1, [pc, #428]	; (1b2c <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1980:	0013      	movs	r3, r2
    1982:	005b      	lsls	r3, r3, #1
    1984:	189b      	adds	r3, r3, r2
    1986:	5c5b      	ldrb	r3, [r3, r1]
    1988:	001a      	movs	r2, r3
    198a:	0013      	movs	r3, r2
    198c:	009b      	lsls	r3, r3, #2
    198e:	189b      	adds	r3, r3, r2
    1990:	005b      	lsls	r3, r3, #1
    1992:	189b      	adds	r3, r3, r2
    1994:	687a      	ldr	r2, [r7, #4]
    1996:	18d3      	adds	r3, r2, r3
    1998:	781b      	ldrb	r3, [r3, #0]
    199a:	2b00      	cmp	r3, #0
    199c:	d072      	beq.n	1a84 <_Z21checkForQuantumWinnerPA11_h+0x1e4>
			// Someone has won
				
			// Add the player that won to winningRows
			winningRows[numOfWinningRows][0] = boardState[winIndexes[i][0]][0];
    199e:	2317      	movs	r3, #23
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	7819      	ldrb	r1, [r3, #0]
    19a4:	2315      	movs	r3, #21
    19a6:	18fb      	adds	r3, r7, r3
    19a8:	781a      	ldrb	r2, [r3, #0]
    19aa:	4860      	ldr	r0, [pc, #384]	; (1b2c <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    19ac:	0013      	movs	r3, r2
    19ae:	005b      	lsls	r3, r3, #1
    19b0:	189b      	adds	r3, r3, r2
    19b2:	5c1b      	ldrb	r3, [r3, r0]
    19b4:	001a      	movs	r2, r3
    19b6:	0013      	movs	r3, r2
    19b8:	009b      	lsls	r3, r3, #2
    19ba:	189b      	adds	r3, r3, r2
    19bc:	005b      	lsls	r3, r3, #1
    19be:	189b      	adds	r3, r3, r2
    19c0:	687a      	ldr	r2, [r7, #4]
    19c2:	18d3      	adds	r3, r2, r3
    19c4:	7818      	ldrb	r0, [r3, #0]
    19c6:	2308      	movs	r3, #8
    19c8:	18fb      	adds	r3, r7, r3
    19ca:	004a      	lsls	r2, r1, #1
    19cc:	1c01      	adds	r1, r0, #0
    19ce:	54d1      	strb	r1, [r2, r3]
				
			// Total the subscripts and store in winningRows
			uint8_t highestSubscript = 0;
    19d0:	2314      	movs	r3, #20
    19d2:	18fb      	adds	r3, r7, r3
    19d4:	2200      	movs	r2, #0
    19d6:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 3; j++) {
    19d8:	2313      	movs	r3, #19
    19da:	18fb      	adds	r3, r7, r3
    19dc:	2200      	movs	r2, #0
    19de:	701a      	strb	r2, [r3, #0]
    19e0:	2313      	movs	r3, #19
    19e2:	18fb      	adds	r3, r7, r3
    19e4:	781b      	ldrb	r3, [r3, #0]
    19e6:	2b02      	cmp	r3, #2
    19e8:	dc39      	bgt.n	1a5e <_Z21checkForQuantumWinnerPA11_h+0x1be>
					if (highestSubscript < boardState[winIndexes[i][j]][1]) {
    19ea:	2314      	movs	r3, #20
    19ec:	18fb      	adds	r3, r7, r3
    19ee:	7819      	ldrb	r1, [r3, #0]
    19f0:	2315      	movs	r3, #21
    19f2:	18fb      	adds	r3, r7, r3
    19f4:	781a      	ldrb	r2, [r3, #0]
    19f6:	2313      	movs	r3, #19
    19f8:	18fb      	adds	r3, r7, r3
    19fa:	7818      	ldrb	r0, [r3, #0]
    19fc:	4c4b      	ldr	r4, [pc, #300]	; (1b2c <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    19fe:	0013      	movs	r3, r2
    1a00:	005b      	lsls	r3, r3, #1
    1a02:	189b      	adds	r3, r3, r2
    1a04:	18e3      	adds	r3, r4, r3
    1a06:	5c1b      	ldrb	r3, [r3, r0]
    1a08:	001a      	movs	r2, r3
    1a0a:	0013      	movs	r3, r2
    1a0c:	009b      	lsls	r3, r3, #2
    1a0e:	189b      	adds	r3, r3, r2
    1a10:	005b      	lsls	r3, r3, #1
    1a12:	189b      	adds	r3, r3, r2
    1a14:	687a      	ldr	r2, [r7, #4]
    1a16:	18d3      	adds	r3, r2, r3
    1a18:	785b      	ldrb	r3, [r3, #1]
    1a1a:	4299      	cmp	r1, r3
    1a1c:	da17      	bge.n	1a4e <_Z21checkForQuantumWinnerPA11_h+0x1ae>
						highestSubscript = boardState[winIndexes[i][j]][1];
    1a1e:	2315      	movs	r3, #21
    1a20:	18fb      	adds	r3, r7, r3
    1a22:	781a      	ldrb	r2, [r3, #0]
    1a24:	2313      	movs	r3, #19
    1a26:	18fb      	adds	r3, r7, r3
    1a28:	7819      	ldrb	r1, [r3, #0]
    1a2a:	4840      	ldr	r0, [pc, #256]	; (1b2c <_Z21checkForQuantumWinnerPA11_h+0x28c>)
    1a2c:	0013      	movs	r3, r2
    1a2e:	005b      	lsls	r3, r3, #1
    1a30:	189b      	adds	r3, r3, r2
    1a32:	18c3      	adds	r3, r0, r3
    1a34:	5c5b      	ldrb	r3, [r3, r1]
    1a36:	001a      	movs	r2, r3
    1a38:	0013      	movs	r3, r2
    1a3a:	009b      	lsls	r3, r3, #2
    1a3c:	189b      	adds	r3, r3, r2
    1a3e:	005b      	lsls	r3, r3, #1
    1a40:	189b      	adds	r3, r3, r2
    1a42:	687a      	ldr	r2, [r7, #4]
    1a44:	18d2      	adds	r2, r2, r3
    1a46:	2314      	movs	r3, #20
    1a48:	18fb      	adds	r3, r7, r3
    1a4a:	7852      	ldrb	r2, [r2, #1]
    1a4c:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 3; j++) {
    1a4e:	2313      	movs	r3, #19
    1a50:	18fb      	adds	r3, r7, r3
    1a52:	781a      	ldrb	r2, [r3, #0]
    1a54:	2313      	movs	r3, #19
    1a56:	18fb      	adds	r3, r7, r3
    1a58:	3201      	adds	r2, #1
    1a5a:	701a      	strb	r2, [r3, #0]
    1a5c:	e7c0      	b.n	19e0 <_Z21checkForQuantumWinnerPA11_h+0x140>
					}
			}
			winningRows[numOfWinningRows][1] = highestSubscript;
    1a5e:	2317      	movs	r3, #23
    1a60:	18fb      	adds	r3, r7, r3
    1a62:	781b      	ldrb	r3, [r3, #0]
    1a64:	2208      	movs	r2, #8
    1a66:	18ba      	adds	r2, r7, r2
    1a68:	005b      	lsls	r3, r3, #1
    1a6a:	18d3      	adds	r3, r2, r3
    1a6c:	3301      	adds	r3, #1
    1a6e:	2214      	movs	r2, #20
    1a70:	18ba      	adds	r2, r7, r2
    1a72:	7812      	ldrb	r2, [r2, #0]
    1a74:	701a      	strb	r2, [r3, #0]
			numOfWinningRows++;
    1a76:	2317      	movs	r3, #23
    1a78:	18fb      	adds	r3, r7, r3
    1a7a:	781a      	ldrb	r2, [r3, #0]
    1a7c:	2317      	movs	r3, #23
    1a7e:	18fb      	adds	r3, r7, r3
    1a80:	3201      	adds	r2, #1
    1a82:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
    1a84:	2315      	movs	r3, #21
    1a86:	18fb      	adds	r3, r7, r3
    1a88:	781a      	ldrb	r2, [r3, #0]
    1a8a:	2315      	movs	r3, #21
    1a8c:	18fb      	adds	r3, r7, r3
    1a8e:	3201      	adds	r2, #1
    1a90:	701a      	strb	r2, [r3, #0]
    1a92:	e71d      	b.n	18d0 <_Z21checkForQuantumWinnerPA11_h+0x30>
		}
	}
		
	// Find the winner if one exists
	uint8_t lowestMaxSubscript = 255;
    1a94:	2312      	movs	r3, #18
    1a96:	18fb      	adds	r3, r7, r3
    1a98:	22ff      	movs	r2, #255	; 0xff
    1a9a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
    1a9c:	2311      	movs	r3, #17
    1a9e:	18fb      	adds	r3, r7, r3
    1aa0:	2200      	movs	r2, #0
    1aa2:	701a      	strb	r2, [r3, #0]
    1aa4:	2311      	movs	r3, #17
    1aa6:	18fb      	adds	r3, r7, r3
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	2b02      	cmp	r3, #2
    1aac:	dc37      	bgt.n	1b1e <_Z21checkForQuantumWinnerPA11_h+0x27e>
		if (winningRows[i][1] < lowestMaxSubscript && winningRows[i][1] != 0) {
    1aae:	2311      	movs	r3, #17
    1ab0:	18fb      	adds	r3, r7, r3
    1ab2:	781b      	ldrb	r3, [r3, #0]
    1ab4:	2208      	movs	r2, #8
    1ab6:	18ba      	adds	r2, r7, r2
    1ab8:	005b      	lsls	r3, r3, #1
    1aba:	18d3      	adds	r3, r2, r3
    1abc:	3301      	adds	r3, #1
    1abe:	781b      	ldrb	r3, [r3, #0]
    1ac0:	001a      	movs	r2, r3
    1ac2:	2312      	movs	r3, #18
    1ac4:	18fb      	adds	r3, r7, r3
    1ac6:	781b      	ldrb	r3, [r3, #0]
    1ac8:	429a      	cmp	r2, r3
    1aca:	da20      	bge.n	1b0e <_Z21checkForQuantumWinnerPA11_h+0x26e>
    1acc:	2311      	movs	r3, #17
    1ace:	18fb      	adds	r3, r7, r3
    1ad0:	781b      	ldrb	r3, [r3, #0]
    1ad2:	2208      	movs	r2, #8
    1ad4:	18ba      	adds	r2, r7, r2
    1ad6:	005b      	lsls	r3, r3, #1
    1ad8:	18d3      	adds	r3, r2, r3
    1ada:	3301      	adds	r3, #1
    1adc:	781b      	ldrb	r3, [r3, #0]
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d015      	beq.n	1b0e <_Z21checkForQuantumWinnerPA11_h+0x26e>
			winner = winningRows[i][0];
    1ae2:	2311      	movs	r3, #17
    1ae4:	18fb      	adds	r3, r7, r3
    1ae6:	7819      	ldrb	r1, [r3, #0]
    1ae8:	2316      	movs	r3, #22
    1aea:	18fb      	adds	r3, r7, r3
    1aec:	2208      	movs	r2, #8
    1aee:	18ba      	adds	r2, r7, r2
    1af0:	0049      	lsls	r1, r1, #1
    1af2:	5c8a      	ldrb	r2, [r1, r2]
    1af4:	701a      	strb	r2, [r3, #0]
			lowestMaxSubscript = winningRows[i][1];
    1af6:	2311      	movs	r3, #17
    1af8:	18fb      	adds	r3, r7, r3
    1afa:	781a      	ldrb	r2, [r3, #0]
    1afc:	2312      	movs	r3, #18
    1afe:	18fb      	adds	r3, r7, r3
    1b00:	2108      	movs	r1, #8
    1b02:	1879      	adds	r1, r7, r1
    1b04:	0052      	lsls	r2, r2, #1
    1b06:	188a      	adds	r2, r1, r2
    1b08:	3201      	adds	r2, #1
    1b0a:	7812      	ldrb	r2, [r2, #0]
    1b0c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
    1b0e:	2311      	movs	r3, #17
    1b10:	18fb      	adds	r3, r7, r3
    1b12:	781a      	ldrb	r2, [r3, #0]
    1b14:	2311      	movs	r3, #17
    1b16:	18fb      	adds	r3, r7, r3
    1b18:	3201      	adds	r2, #1
    1b1a:	701a      	strb	r2, [r3, #0]
    1b1c:	e7c2      	b.n	1aa4 <_Z21checkForQuantumWinnerPA11_h+0x204>
		}
	}
	return winner;
    1b1e:	2316      	movs	r3, #22
    1b20:	18fb      	adds	r3, r7, r3
    1b22:	781b      	ldrb	r3, [r3, #0]
}
    1b24:	0018      	movs	r0, r3
    1b26:	46bd      	mov	sp, r7
    1b28:	b007      	add	sp, #28
    1b2a:	bd90      	pop	{r4, r7, pc}
    1b2c:	20000004 	.word	0x20000004

00001b30 <_Z4gamehh>:

State game(uint8_t noughtsScore, uint8_t crossesScore) {
    1b30:	b590      	push	{r4, r7, lr}
    1b32:	b08d      	sub	sp, #52	; 0x34
    1b34:	af00      	add	r7, sp, #0
    1b36:	0002      	movs	r2, r0
    1b38:	230f      	movs	r3, #15
    1b3a:	18fb      	adds	r3, r7, r3
    1b3c:	701a      	strb	r2, [r3, #0]
    1b3e:	230e      	movs	r3, #14
    1b40:	18fb      	adds	r3, r7, r3
    1b42:	1c0a      	adds	r2, r1, #0
    1b44:	701a      	strb	r2, [r3, #0]
	State player = cross;
    1b46:	232f      	movs	r3, #47	; 0x2f
    1b48:	18fb      	adds	r3, r7, r3
    1b4a:	2202      	movs	r2, #2
    1b4c:	701a      	strb	r2, [r3, #0]
	State boardState[9] = {empty, empty, empty, empty, empty, empty, empty, empty,
	empty};
    1b4e:	2320      	movs	r3, #32
    1b50:	18fb      	adds	r3, r7, r3
    1b52:	0018      	movs	r0, r3
    1b54:	2309      	movs	r3, #9
    1b56:	001a      	movs	r2, r3
    1b58:	2100      	movs	r1, #0
    1b5a:	f00e ff0f 	bl	1097c <memset>
	State winner = empty;
    1b5e:	232e      	movs	r3, #46	; 0x2e
    1b60:	18fb      	adds	r3, r7, r3
    1b62:	2200      	movs	r2, #0
    1b64:	701a      	strb	r2, [r3, #0]
	uint8_t placedCounters = 0;
    1b66:	232d      	movs	r3, #45	; 0x2d
    1b68:	18fb      	adds	r3, r7, r3
    1b6a:	2200      	movs	r2, #0
    1b6c:	701a      	strb	r2, [r3, #0]
	uint8_t square = 255;
    1b6e:	232b      	movs	r3, #43	; 0x2b
    1b70:	18fb      	adds	r3, r7, r3
    1b72:	22ff      	movs	r2, #255	; 0xff
    1b74:	701a      	strb	r2, [r3, #0]
	TS_Point newCounterPos;
    1b76:	2318      	movs	r3, #24
    1b78:	18fb      	adds	r3, r7, r3
    1b7a:	0018      	movs	r0, r3
    1b7c:	f003 f93c 	bl	4df8 <_ZN8TS_PointC1Ev>

	// Draw grid
	drawBitmap('d', 0, 80);
    1b80:	2250      	movs	r2, #80	; 0x50
    1b82:	2100      	movs	r1, #0
    1b84:	2064      	movs	r0, #100	; 0x64
    1b86:	f7fe fb6d 	bl	264 <_Z10drawBitmapcss>

	// Start game
	while (placedCounters < 9) {
    1b8a:	232d      	movs	r3, #45	; 0x2d
    1b8c:	18fb      	adds	r3, r7, r3
    1b8e:	781b      	ldrb	r3, [r3, #0]
    1b90:	2b08      	cmp	r3, #8
    1b92:	dd00      	ble.n	1b96 <_Z4gamehh+0x66>
    1b94:	e0d4      	b.n	1d40 <_Z4gamehh+0x210>
		while (true) {
			if (!touchScreen.touched()) continue;
    1b96:	4b6e      	ldr	r3, [pc, #440]	; (1d50 <_Z4gamehh+0x220>)
    1b98:	0018      	movs	r0, r3
    1b9a:	f003 f99d 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    1b9e:	0003      	movs	r3, r0
    1ba0:	425a      	negs	r2, r3
    1ba2:	4153      	adcs	r3, r2
    1ba4:	b2db      	uxtb	r3, r3
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d12e      	bne.n	1c08 <_Z4gamehh+0xd8>
			TS_Point pointTouched = getPoint();
    1baa:	2310      	movs	r3, #16
    1bac:	18fb      	adds	r3, r7, r3
    1bae:	0018      	movs	r0, r3
    1bb0:	f7ff fa36 	bl	1020 <_Z8getPointv>
			square = getSquare(pointTouched);
    1bb4:	232b      	movs	r3, #43	; 0x2b
    1bb6:	18fc      	adds	r4, r7, r3
    1bb8:	2310      	movs	r3, #16
    1bba:	18fb      	adds	r3, r7, r3
    1bbc:	6818      	ldr	r0, [r3, #0]
    1bbe:	6859      	ldr	r1, [r3, #4]
    1bc0:	f7ff fae9 	bl	1196 <_Z9getSquare8TS_Point>
    1bc4:	0003      	movs	r3, r0
    1bc6:	7023      	strb	r3, [r4, #0]
			newCounterPos = getCounterPosition(square);
    1bc8:	2318      	movs	r3, #24
    1bca:	18fc      	adds	r4, r7, r3
    1bcc:	003a      	movs	r2, r7
    1bce:	232b      	movs	r3, #43	; 0x2b
    1bd0:	18fb      	adds	r3, r7, r3
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	0019      	movs	r1, r3
    1bd6:	0010      	movs	r0, r2
    1bd8:	f7ff fb64 	bl	12a4 <_Z18getCounterPositionh>
    1bdc:	003b      	movs	r3, r7
    1bde:	0020      	movs	r0, r4
    1be0:	0019      	movs	r1, r3
    1be2:	2306      	movs	r3, #6
    1be4:	001a      	movs	r2, r3
    1be6:	f00e fec0 	bl	1096a <memcpy>
			if (!(square == 255)) break;
    1bea:	232b      	movs	r3, #43	; 0x2b
    1bec:	18fb      	adds	r3, r7, r3
    1bee:	781b      	ldrb	r3, [r3, #0]
    1bf0:	2bff      	cmp	r3, #255	; 0xff
    1bf2:	d0d0      	beq.n	1b96 <_Z4gamehh+0x66>
		}

		// Check to see if selected square is occupied
		if (boardState[square] != empty) continue;
    1bf4:	232b      	movs	r3, #43	; 0x2b
    1bf6:	18fb      	adds	r3, r7, r3
    1bf8:	781b      	ldrb	r3, [r3, #0]
    1bfa:	2220      	movs	r2, #32
    1bfc:	18ba      	adds	r2, r7, r2
    1bfe:	5cd3      	ldrb	r3, [r2, r3]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d000      	beq.n	1c06 <_Z4gamehh+0xd6>
    1c04:	e099      	b.n	1d3a <_Z4gamehh+0x20a>
    1c06:	e001      	b.n	1c0c <_Z4gamehh+0xdc>
			if (!touchScreen.touched()) continue;
    1c08:	46c0      	nop			; (mov r8, r8)
		}
    1c0a:	e7c4      	b.n	1b96 <_Z4gamehh+0x66>

		// Update boardState
		boardState[square] = player;
    1c0c:	232b      	movs	r3, #43	; 0x2b
    1c0e:	18fb      	adds	r3, r7, r3
    1c10:	781b      	ldrb	r3, [r3, #0]
    1c12:	2220      	movs	r2, #32
    1c14:	18ba      	adds	r2, r7, r2
    1c16:	212f      	movs	r1, #47	; 0x2f
    1c18:	1879      	adds	r1, r7, r1
    1c1a:	7809      	ldrb	r1, [r1, #0]
    1c1c:	54d1      	strb	r1, [r2, r3]

		// Draw nought or cross on selected square and swap player
		drawMove(square, newCounterPos, player);
    1c1e:	232f      	movs	r3, #47	; 0x2f
    1c20:	18fb      	adds	r3, r7, r3
    1c22:	7819      	ldrb	r1, [r3, #0]
    1c24:	2318      	movs	r3, #24
    1c26:	18fa      	adds	r2, r7, r3
    1c28:	232b      	movs	r3, #43	; 0x2b
    1c2a:	18fb      	adds	r3, r7, r3
    1c2c:	7818      	ldrb	r0, [r3, #0]
    1c2e:	000b      	movs	r3, r1
    1c30:	6811      	ldr	r1, [r2, #0]
    1c32:	6852      	ldr	r2, [r2, #4]
    1c34:	f7ff fa26 	bl	1084 <_Z8drawMoveh8TS_Point5State>
		placedCounters++;
    1c38:	232d      	movs	r3, #45	; 0x2d
    1c3a:	18fb      	adds	r3, r7, r3
    1c3c:	781a      	ldrb	r2, [r3, #0]
    1c3e:	232d      	movs	r3, #45	; 0x2d
    1c40:	18fb      	adds	r3, r7, r3
    1c42:	3201      	adds	r2, #1
    1c44:	701a      	strb	r2, [r3, #0]
		(player == cross) ? player = nought : player = cross;
    1c46:	232f      	movs	r3, #47	; 0x2f
    1c48:	18fb      	adds	r3, r7, r3
    1c4a:	781b      	ldrb	r3, [r3, #0]
    1c4c:	2b02      	cmp	r3, #2
    1c4e:	d104      	bne.n	1c5a <_Z4gamehh+0x12a>
    1c50:	232f      	movs	r3, #47	; 0x2f
    1c52:	18fb      	adds	r3, r7, r3
    1c54:	2201      	movs	r2, #1
    1c56:	701a      	strb	r2, [r3, #0]
    1c58:	e003      	b.n	1c62 <_Z4gamehh+0x132>
    1c5a:	232f      	movs	r3, #47	; 0x2f
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	2202      	movs	r2, #2
    1c60:	701a      	strb	r2, [r3, #0]

		// Check to see if someone has won
		for (uint8_t i = 0; i < 8; i++) {
    1c62:	232c      	movs	r3, #44	; 0x2c
    1c64:	18fb      	adds	r3, r7, r3
    1c66:	2200      	movs	r2, #0
    1c68:	701a      	strb	r2, [r3, #0]
    1c6a:	232c      	movs	r3, #44	; 0x2c
    1c6c:	18fb      	adds	r3, r7, r3
    1c6e:	781b      	ldrb	r3, [r3, #0]
    1c70:	2b07      	cmp	r3, #7
    1c72:	dc5c      	bgt.n	1d2e <_Z4gamehh+0x1fe>
			if (boardState[winIndexes[i][0]] == boardState[winIndexes[i][1]]
    1c74:	232c      	movs	r3, #44	; 0x2c
    1c76:	18fb      	adds	r3, r7, r3
    1c78:	781a      	ldrb	r2, [r3, #0]
    1c7a:	4936      	ldr	r1, [pc, #216]	; (1d54 <_Z4gamehh+0x224>)
    1c7c:	0013      	movs	r3, r2
    1c7e:	005b      	lsls	r3, r3, #1
    1c80:	189b      	adds	r3, r3, r2
    1c82:	5c5b      	ldrb	r3, [r3, r1]
    1c84:	001a      	movs	r2, r3
    1c86:	2320      	movs	r3, #32
    1c88:	18fb      	adds	r3, r7, r3
    1c8a:	5c99      	ldrb	r1, [r3, r2]
    1c8c:	232c      	movs	r3, #44	; 0x2c
    1c8e:	18fb      	adds	r3, r7, r3
    1c90:	781a      	ldrb	r2, [r3, #0]
    1c92:	4830      	ldr	r0, [pc, #192]	; (1d54 <_Z4gamehh+0x224>)
    1c94:	0013      	movs	r3, r2
    1c96:	005b      	lsls	r3, r3, #1
    1c98:	189b      	adds	r3, r3, r2
    1c9a:	18c3      	adds	r3, r0, r3
    1c9c:	3301      	adds	r3, #1
    1c9e:	781b      	ldrb	r3, [r3, #0]
    1ca0:	001a      	movs	r2, r3
    1ca2:	2320      	movs	r3, #32
    1ca4:	18fb      	adds	r3, r7, r3
    1ca6:	5c9b      	ldrb	r3, [r3, r2]
    1ca8:	4299      	cmp	r1, r3
    1caa:	d138      	bne.n	1d1e <_Z4gamehh+0x1ee>
			&& boardState[winIndexes[i][0]] == boardState[winIndexes[i][2]]
    1cac:	232c      	movs	r3, #44	; 0x2c
    1cae:	18fb      	adds	r3, r7, r3
    1cb0:	781a      	ldrb	r2, [r3, #0]
    1cb2:	4928      	ldr	r1, [pc, #160]	; (1d54 <_Z4gamehh+0x224>)
    1cb4:	0013      	movs	r3, r2
    1cb6:	005b      	lsls	r3, r3, #1
    1cb8:	189b      	adds	r3, r3, r2
    1cba:	5c5b      	ldrb	r3, [r3, r1]
    1cbc:	001a      	movs	r2, r3
    1cbe:	2320      	movs	r3, #32
    1cc0:	18fb      	adds	r3, r7, r3
    1cc2:	5c99      	ldrb	r1, [r3, r2]
    1cc4:	232c      	movs	r3, #44	; 0x2c
    1cc6:	18fb      	adds	r3, r7, r3
    1cc8:	781a      	ldrb	r2, [r3, #0]
    1cca:	4822      	ldr	r0, [pc, #136]	; (1d54 <_Z4gamehh+0x224>)
    1ccc:	0013      	movs	r3, r2
    1cce:	005b      	lsls	r3, r3, #1
    1cd0:	189b      	adds	r3, r3, r2
    1cd2:	18c3      	adds	r3, r0, r3
    1cd4:	3302      	adds	r3, #2
    1cd6:	781b      	ldrb	r3, [r3, #0]
    1cd8:	001a      	movs	r2, r3
    1cda:	2320      	movs	r3, #32
    1cdc:	18fb      	adds	r3, r7, r3
    1cde:	5c9b      	ldrb	r3, [r3, r2]
    1ce0:	4299      	cmp	r1, r3
    1ce2:	d11c      	bne.n	1d1e <_Z4gamehh+0x1ee>
			&& boardState[winIndexes[i][0]] != empty) {
    1ce4:	232c      	movs	r3, #44	; 0x2c
    1ce6:	18fb      	adds	r3, r7, r3
    1ce8:	781a      	ldrb	r2, [r3, #0]
    1cea:	491a      	ldr	r1, [pc, #104]	; (1d54 <_Z4gamehh+0x224>)
    1cec:	0013      	movs	r3, r2
    1cee:	005b      	lsls	r3, r3, #1
    1cf0:	189b      	adds	r3, r3, r2
    1cf2:	5c5b      	ldrb	r3, [r3, r1]
    1cf4:	001a      	movs	r2, r3
    1cf6:	2320      	movs	r3, #32
    1cf8:	18fb      	adds	r3, r7, r3
    1cfa:	5c9b      	ldrb	r3, [r3, r2]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d00e      	beq.n	1d1e <_Z4gamehh+0x1ee>
				winner = boardState[winIndexes[i][0]];
    1d00:	232c      	movs	r3, #44	; 0x2c
    1d02:	18fb      	adds	r3, r7, r3
    1d04:	781a      	ldrb	r2, [r3, #0]
    1d06:	4913      	ldr	r1, [pc, #76]	; (1d54 <_Z4gamehh+0x224>)
    1d08:	0013      	movs	r3, r2
    1d0a:	005b      	lsls	r3, r3, #1
    1d0c:	189b      	adds	r3, r3, r2
    1d0e:	5c5b      	ldrb	r3, [r3, r1]
    1d10:	0019      	movs	r1, r3
    1d12:	232e      	movs	r3, #46	; 0x2e
    1d14:	18fb      	adds	r3, r7, r3
    1d16:	2220      	movs	r2, #32
    1d18:	18ba      	adds	r2, r7, r2
    1d1a:	5c52      	ldrb	r2, [r2, r1]
    1d1c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++) {
    1d1e:	232c      	movs	r3, #44	; 0x2c
    1d20:	18fb      	adds	r3, r7, r3
    1d22:	781a      	ldrb	r2, [r3, #0]
    1d24:	232c      	movs	r3, #44	; 0x2c
    1d26:	18fb      	adds	r3, r7, r3
    1d28:	3201      	adds	r2, #1
    1d2a:	701a      	strb	r2, [r3, #0]
    1d2c:	e79d      	b.n	1c6a <_Z4gamehh+0x13a>
			}
		}
		if (winner != empty) break;
    1d2e:	232e      	movs	r3, #46	; 0x2e
    1d30:	18fb      	adds	r3, r7, r3
    1d32:	781b      	ldrb	r3, [r3, #0]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d102      	bne.n	1d3e <_Z4gamehh+0x20e>
    1d38:	e727      	b.n	1b8a <_Z4gamehh+0x5a>
		if (boardState[square] != empty) continue;
    1d3a:	46c0      	nop			; (mov r8, r8)
	while (placedCounters < 9) {
    1d3c:	e725      	b.n	1b8a <_Z4gamehh+0x5a>
		if (winner != empty) break;
    1d3e:	46c0      	nop			; (mov r8, r8)
	}
	return winner;
    1d40:	232e      	movs	r3, #46	; 0x2e
    1d42:	18fb      	adds	r3, r7, r3
    1d44:	781b      	ldrb	r3, [r3, #0]
}
    1d46:	0018      	movs	r0, r3
    1d48:	46bd      	mov	sp, r7
    1d4a:	b00d      	add	sp, #52	; 0x34
    1d4c:	bd90      	pop	{r4, r7, pc}
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	200001b4 	.word	0x200001b4
    1d54:	20000004 	.word	0x20000004

00001d58 <_Z11quantumGamehh>:

uint8_t quantumGame(uint8_t noughtsScore, uint8_t crossesScore) {
    1d58:	b5b0      	push	{r4, r5, r7, lr}
    1d5a:	b0b2      	sub	sp, #200	; 0xc8
    1d5c:	af02      	add	r7, sp, #8
    1d5e:	0002      	movs	r2, r0
    1d60:	1dfb      	adds	r3, r7, #7
    1d62:	701a      	strb	r2, [r3, #0]
    1d64:	1dbb      	adds	r3, r7, #6
    1d66:	1c0a      	adds	r2, r1, #0
    1d68:	701a      	strb	r2, [r3, #0]
	// 0 = none, 1 = cross, 2 = nought
	uint8_t player = 1;
    1d6a:	23bf      	movs	r3, #191	; 0xbf
    1d6c:	18fb      	adds	r3, r7, r3
    1d6e:	2201      	movs	r2, #1
    1d70:	701a      	strb	r2, [r3, #0]
	uint8_t turn = 1;
    1d72:	23be      	movs	r3, #190	; 0xbe
    1d74:	18fb      	adds	r3, r7, r3
    1d76:	2201      	movs	r2, #1
    1d78:	701a      	strb	r2, [r3, #0]
	uint8_t winner = 0;
    1d7a:	23b7      	movs	r3, #183	; 0xb7
    1d7c:	18fb      	adds	r3, r7, r3
    1d7e:	2200      	movs	r2, #0
    1d80:	701a      	strb	r2, [r3, #0]
	uint8_t boardState[9][11] = {0}; // Define board to be empty
    1d82:	2354      	movs	r3, #84	; 0x54
    1d84:	18fb      	adds	r3, r7, r3
    1d86:	0018      	movs	r0, r3
    1d88:	2363      	movs	r3, #99	; 0x63
    1d8a:	001a      	movs	r2, r3
    1d8c:	2100      	movs	r1, #0
    1d8e:	f00e fdf5 	bl	1097c <memset>
	TS_Point newCounterPos;
    1d92:	234c      	movs	r3, #76	; 0x4c
    1d94:	18fb      	adds	r3, r7, r3
    1d96:	0018      	movs	r0, r3
    1d98:	f003 f82e 	bl	4df8 <_ZN8TS_PointC1Ev>

	// Draw grid
	drawBitmap('d', 0, 80);
    1d9c:	2250      	movs	r2, #80	; 0x50
    1d9e:	2100      	movs	r1, #0
    1da0:	2064      	movs	r0, #100	; 0x64
    1da2:	f7fe fa5f 	bl	264 <_Z10drawBitmapcss>

	// Game logic
	while (true) {
		uint8_t countersThisTurn = 0;
    1da6:	23bd      	movs	r3, #189	; 0xbd
    1da8:	18fb      	adds	r3, r7, r3
    1daa:	2200      	movs	r2, #0
    1dac:	701a      	strb	r2, [r3, #0]
		uint8_t square = 255;
    1dae:	23bc      	movs	r3, #188	; 0xbc
    1db0:	18fb      	adds	r3, r7, r3
    1db2:	22ff      	movs	r2, #255	; 0xff
    1db4:	701a      	strb	r2, [r3, #0]
		uint8_t recentSquares[] = {255, 255};
    1db6:	2348      	movs	r3, #72	; 0x48
    1db8:	18fb      	adds	r3, r7, r3
    1dba:	4ae1      	ldr	r2, [pc, #900]	; (2140 <_Z11quantumGamehh+0x3e8>)
    1dbc:	8812      	ldrh	r2, [r2, #0]
    1dbe:	801a      	strh	r2, [r3, #0]
		
		// On final turn check if only one square is left
		if (turn == 9) {
    1dc0:	23be      	movs	r3, #190	; 0xbe
    1dc2:	18fb      	adds	r3, r7, r3
    1dc4:	781b      	ldrb	r3, [r3, #0]
    1dc6:	2b09      	cmp	r3, #9
    1dc8:	d000      	beq.n	1dcc <_Z11quantumGamehh+0x74>
    1dca:	e097      	b.n	1efc <_Z11quantumGamehh+0x1a4>
			uint8_t classicalCounters = 0;
    1dcc:	23bb      	movs	r3, #187	; 0xbb
    1dce:	18fb      	adds	r3, r7, r3
    1dd0:	2200      	movs	r2, #0
    1dd2:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 9; i++) {
    1dd4:	23ba      	movs	r3, #186	; 0xba
    1dd6:	18fb      	adds	r3, r7, r3
    1dd8:	2200      	movs	r2, #0
    1dda:	701a      	strb	r2, [r3, #0]
    1ddc:	23ba      	movs	r3, #186	; 0xba
    1dde:	18fb      	adds	r3, r7, r3
    1de0:	781b      	ldrb	r3, [r3, #0]
    1de2:	2b08      	cmp	r3, #8
    1de4:	dc1b      	bgt.n	1e1e <_Z11quantumGamehh+0xc6>
				if (boardState[i][0] != 0) {
    1de6:	23ba      	movs	r3, #186	; 0xba
    1de8:	18fb      	adds	r3, r7, r3
    1dea:	781a      	ldrb	r2, [r3, #0]
    1dec:	2354      	movs	r3, #84	; 0x54
    1dee:	18f9      	adds	r1, r7, r3
    1df0:	0013      	movs	r3, r2
    1df2:	009b      	lsls	r3, r3, #2
    1df4:	189b      	adds	r3, r3, r2
    1df6:	005b      	lsls	r3, r3, #1
    1df8:	189b      	adds	r3, r3, r2
    1dfa:	5c5b      	ldrb	r3, [r3, r1]
    1dfc:	2b00      	cmp	r3, #0
    1dfe:	d006      	beq.n	1e0e <_Z11quantumGamehh+0xb6>
					classicalCounters++;
    1e00:	23bb      	movs	r3, #187	; 0xbb
    1e02:	18fb      	adds	r3, r7, r3
    1e04:	781a      	ldrb	r2, [r3, #0]
    1e06:	23bb      	movs	r3, #187	; 0xbb
    1e08:	18fb      	adds	r3, r7, r3
    1e0a:	3201      	adds	r2, #1
    1e0c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 9; i++) {
    1e0e:	23ba      	movs	r3, #186	; 0xba
    1e10:	18fb      	adds	r3, r7, r3
    1e12:	781a      	ldrb	r2, [r3, #0]
    1e14:	23ba      	movs	r3, #186	; 0xba
    1e16:	18fb      	adds	r3, r7, r3
    1e18:	3201      	adds	r2, #1
    1e1a:	701a      	strb	r2, [r3, #0]
    1e1c:	e7de      	b.n	1ddc <_Z11quantumGamehh+0x84>
				}
			}
			if (classicalCounters == 8) {
    1e1e:	23bb      	movs	r3, #187	; 0xbb
    1e20:	18fb      	adds	r3, r7, r3
    1e22:	781b      	ldrb	r3, [r3, #0]
    1e24:	2b08      	cmp	r3, #8
    1e26:	d169      	bne.n	1efc <_Z11quantumGamehh+0x1a4>
				while (true) {
					if (!touchScreen.touched()) continue;
    1e28:	4bc6      	ldr	r3, [pc, #792]	; (2144 <_Z11quantumGamehh+0x3ec>)
    1e2a:	0018      	movs	r0, r3
    1e2c:	f003 f854 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    1e30:	0003      	movs	r3, r0
    1e32:	425a      	negs	r2, r3
    1e34:	4153      	adcs	r3, r2
    1e36:	b2db      	uxtb	r3, r3
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d15b      	bne.n	1ef4 <_Z11quantumGamehh+0x19c>
					TS_Point point = getPoint();
    1e3c:	2334      	movs	r3, #52	; 0x34
    1e3e:	18fb      	adds	r3, r7, r3
    1e40:	0018      	movs	r0, r3
    1e42:	f7ff f8ed 	bl	1020 <_Z8getPointv>
					square = getSquare(point);
    1e46:	23bc      	movs	r3, #188	; 0xbc
    1e48:	18fc      	adds	r4, r7, r3
    1e4a:	2334      	movs	r3, #52	; 0x34
    1e4c:	18fb      	adds	r3, r7, r3
    1e4e:	6818      	ldr	r0, [r3, #0]
    1e50:	6859      	ldr	r1, [r3, #4]
    1e52:	f7ff f9a0 	bl	1196 <_Z9getSquare8TS_Point>
    1e56:	0003      	movs	r3, r0
    1e58:	7023      	strb	r3, [r4, #0]
					if (square == 255) continue;
    1e5a:	23bc      	movs	r3, #188	; 0xbc
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	781b      	ldrb	r3, [r3, #0]
    1e60:	2bff      	cmp	r3, #255	; 0xff
    1e62:	d049      	beq.n	1ef8 <_Z11quantumGamehh+0x1a0>
					if (boardState[square][0] == 0) break;
    1e64:	23bc      	movs	r3, #188	; 0xbc
    1e66:	18fb      	adds	r3, r7, r3
    1e68:	781a      	ldrb	r2, [r3, #0]
    1e6a:	2354      	movs	r3, #84	; 0x54
    1e6c:	18f9      	adds	r1, r7, r3
    1e6e:	0013      	movs	r3, r2
    1e70:	009b      	lsls	r3, r3, #2
    1e72:	189b      	adds	r3, r3, r2
    1e74:	005b      	lsls	r3, r3, #1
    1e76:	189b      	adds	r3, r3, r2
    1e78:	5c5b      	ldrb	r3, [r3, r1]
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d1d4      	bne.n	1e28 <_Z11quantumGamehh+0xd0>
				}
				boardState[square][turn + 1] = player;
    1e7e:	23bc      	movs	r3, #188	; 0xbc
    1e80:	18fb      	adds	r3, r7, r3
    1e82:	781a      	ldrb	r2, [r3, #0]
    1e84:	23be      	movs	r3, #190	; 0xbe
    1e86:	18fb      	adds	r3, r7, r3
    1e88:	781b      	ldrb	r3, [r3, #0]
    1e8a:	1c59      	adds	r1, r3, #1
    1e8c:	2354      	movs	r3, #84	; 0x54
    1e8e:	18f8      	adds	r0, r7, r3
    1e90:	0013      	movs	r3, r2
    1e92:	009b      	lsls	r3, r3, #2
    1e94:	189b      	adds	r3, r3, r2
    1e96:	005b      	lsls	r3, r3, #1
    1e98:	189b      	adds	r3, r3, r2
    1e9a:	18c3      	adds	r3, r0, r3
    1e9c:	22bf      	movs	r2, #191	; 0xbf
    1e9e:	18ba      	adds	r2, r7, r2
    1ea0:	7812      	ldrb	r2, [r2, #0]
    1ea2:	545a      	strb	r2, [r3, r1]
				drawSmallCounter(square, turn);
    1ea4:	23be      	movs	r3, #190	; 0xbe
    1ea6:	18fb      	adds	r3, r7, r3
    1ea8:	781a      	ldrb	r2, [r3, #0]
    1eaa:	23bc      	movs	r3, #188	; 0xbc
    1eac:	18fb      	adds	r3, r7, r3
    1eae:	781b      	ldrb	r3, [r3, #0]
    1eb0:	0011      	movs	r1, r2
    1eb2:	0018      	movs	r0, r3
    1eb4:	f7ff face 	bl	1454 <_Z16drawSmallCounterhh>
				drawClassicalCounters(boardState, square, turn + 1, square, turn + 1);
    1eb8:	23be      	movs	r3, #190	; 0xbe
    1eba:	18fb      	adds	r3, r7, r3
    1ebc:	781b      	ldrb	r3, [r3, #0]
    1ebe:	3301      	adds	r3, #1
    1ec0:	b2dc      	uxtb	r4, r3
    1ec2:	23be      	movs	r3, #190	; 0xbe
    1ec4:	18fb      	adds	r3, r7, r3
    1ec6:	781b      	ldrb	r3, [r3, #0]
    1ec8:	3301      	adds	r3, #1
    1eca:	b2db      	uxtb	r3, r3
    1ecc:	22bc      	movs	r2, #188	; 0xbc
    1ece:	18ba      	adds	r2, r7, r2
    1ed0:	7815      	ldrb	r5, [r2, #0]
    1ed2:	22bc      	movs	r2, #188	; 0xbc
    1ed4:	18ba      	adds	r2, r7, r2
    1ed6:	7811      	ldrb	r1, [r2, #0]
    1ed8:	2254      	movs	r2, #84	; 0x54
    1eda:	18b8      	adds	r0, r7, r2
    1edc:	9300      	str	r3, [sp, #0]
    1ede:	002b      	movs	r3, r5
    1ee0:	0022      	movs	r2, r4
    1ee2:	f7ff fbd0 	bl	1686 <_Z21drawClassicalCountersPA11_hhhhh>
				return checkForQuantumWinner(boardState);
    1ee6:	2354      	movs	r3, #84	; 0x54
    1ee8:	18fb      	adds	r3, r7, r3
    1eea:	0018      	movs	r0, r3
    1eec:	f7ff fcd8 	bl	18a0 <_Z21checkForQuantumWinnerPA11_h>
    1ef0:	0003      	movs	r3, r0
    1ef2:	e1fe      	b.n	22f2 <_Z11quantumGamehh+0x59a>
					if (!touchScreen.touched()) continue;
    1ef4:	46c0      	nop			; (mov r8, r8)
    1ef6:	e797      	b.n	1e28 <_Z11quantumGamehh+0xd0>
					if (square == 255) continue;
    1ef8:	46c0      	nop			; (mov r8, r8)
				}
    1efa:	e795      	b.n	1e28 <_Z11quantumGamehh+0xd0>
			}
		}
		
		while (countersThisTurn < 2) {
    1efc:	23bd      	movs	r3, #189	; 0xbd
    1efe:	18fb      	adds	r3, r7, r3
    1f00:	781b      	ldrb	r3, [r3, #0]
    1f02:	2b01      	cmp	r3, #1
    1f04:	dd00      	ble.n	1f08 <_Z11quantumGamehh+0x1b0>
    1f06:	e07a      	b.n	1ffe <_Z11quantumGamehh+0x2a6>
			while (true) {
				if (!touchScreen.touched()) continue;
    1f08:	4b8e      	ldr	r3, [pc, #568]	; (2144 <_Z11quantumGamehh+0x3ec>)
    1f0a:	0018      	movs	r0, r3
    1f0c:	f002 ffe4 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    1f10:	0003      	movs	r3, r0
    1f12:	425a      	negs	r2, r3
    1f14:	4153      	adcs	r3, r2
    1f16:	b2db      	uxtb	r3, r3
    1f18:	2b00      	cmp	r3, #0
    1f1a:	d121      	bne.n	1f60 <_Z11quantumGamehh+0x208>
				TS_Point pointTouched = getPoint();
    1f1c:	232c      	movs	r3, #44	; 0x2c
    1f1e:	18fb      	adds	r3, r7, r3
    1f20:	0018      	movs	r0, r3
    1f22:	f7ff f87d 	bl	1020 <_Z8getPointv>
				square = getSquare(pointTouched);
    1f26:	23bc      	movs	r3, #188	; 0xbc
    1f28:	18fc      	adds	r4, r7, r3
    1f2a:	232c      	movs	r3, #44	; 0x2c
    1f2c:	18fb      	adds	r3, r7, r3
    1f2e:	6818      	ldr	r0, [r3, #0]
    1f30:	6859      	ldr	r1, [r3, #4]
    1f32:	f7ff f930 	bl	1196 <_Z9getSquare8TS_Point>
    1f36:	0003      	movs	r3, r0
    1f38:	7023      	strb	r3, [r4, #0]
				if (!(square == 255)) break;
    1f3a:	23bc      	movs	r3, #188	; 0xbc
    1f3c:	18fb      	adds	r3, r7, r3
    1f3e:	781b      	ldrb	r3, [r3, #0]
    1f40:	2bff      	cmp	r3, #255	; 0xff
    1f42:	d0e1      	beq.n	1f08 <_Z11quantumGamehh+0x1b0>
			}

			// Check to see if selected square is occupied
			if (boardState[square][0] != 0) continue;
    1f44:	23bc      	movs	r3, #188	; 0xbc
    1f46:	18fb      	adds	r3, r7, r3
    1f48:	781a      	ldrb	r2, [r3, #0]
    1f4a:	2354      	movs	r3, #84	; 0x54
    1f4c:	18f9      	adds	r1, r7, r3
    1f4e:	0013      	movs	r3, r2
    1f50:	009b      	lsls	r3, r3, #2
    1f52:	189b      	adds	r3, r3, r2
    1f54:	005b      	lsls	r3, r3, #1
    1f56:	189b      	adds	r3, r3, r2
    1f58:	5c5b      	ldrb	r3, [r3, r1]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d14b      	bne.n	1ff6 <_Z11quantumGamehh+0x29e>
    1f5e:	e001      	b.n	1f64 <_Z11quantumGamehh+0x20c>
				if (!touchScreen.touched()) continue;
    1f60:	46c0      	nop			; (mov r8, r8)
			}
    1f62:	e7d1      	b.n	1f08 <_Z11quantumGamehh+0x1b0>
			if (boardState[square][turn + 1] != 0) continue;
    1f64:	23bc      	movs	r3, #188	; 0xbc
    1f66:	18fb      	adds	r3, r7, r3
    1f68:	781a      	ldrb	r2, [r3, #0]
    1f6a:	23be      	movs	r3, #190	; 0xbe
    1f6c:	18fb      	adds	r3, r7, r3
    1f6e:	781b      	ldrb	r3, [r3, #0]
    1f70:	1c59      	adds	r1, r3, #1
    1f72:	2354      	movs	r3, #84	; 0x54
    1f74:	18f8      	adds	r0, r7, r3
    1f76:	0013      	movs	r3, r2
    1f78:	009b      	lsls	r3, r3, #2
    1f7a:	189b      	adds	r3, r3, r2
    1f7c:	005b      	lsls	r3, r3, #1
    1f7e:	189b      	adds	r3, r3, r2
    1f80:	18c3      	adds	r3, r0, r3
    1f82:	5c5b      	ldrb	r3, [r3, r1]
    1f84:	2b00      	cmp	r3, #0
    1f86:	d138      	bne.n	1ffa <_Z11quantumGamehh+0x2a2>

			// Update board state
			boardState[square][turn + 1] = player;
    1f88:	23bc      	movs	r3, #188	; 0xbc
    1f8a:	18fb      	adds	r3, r7, r3
    1f8c:	781a      	ldrb	r2, [r3, #0]
    1f8e:	23be      	movs	r3, #190	; 0xbe
    1f90:	18fb      	adds	r3, r7, r3
    1f92:	781b      	ldrb	r3, [r3, #0]
    1f94:	1c59      	adds	r1, r3, #1
    1f96:	2354      	movs	r3, #84	; 0x54
    1f98:	18f8      	adds	r0, r7, r3
    1f9a:	0013      	movs	r3, r2
    1f9c:	009b      	lsls	r3, r3, #2
    1f9e:	189b      	adds	r3, r3, r2
    1fa0:	005b      	lsls	r3, r3, #1
    1fa2:	189b      	adds	r3, r3, r2
    1fa4:	18c3      	adds	r3, r0, r3
    1fa6:	22bf      	movs	r2, #191	; 0xbf
    1fa8:	18ba      	adds	r2, r7, r2
    1faa:	7812      	ldrb	r2, [r2, #0]
    1fac:	545a      	strb	r2, [r3, r1]
			if (recentSquares[0] == 255) {
    1fae:	2348      	movs	r3, #72	; 0x48
    1fb0:	18fb      	adds	r3, r7, r3
    1fb2:	781b      	ldrb	r3, [r3, #0]
    1fb4:	2bff      	cmp	r3, #255	; 0xff
    1fb6:	d106      	bne.n	1fc6 <_Z11quantumGamehh+0x26e>
				recentSquares[0] = square;
    1fb8:	2348      	movs	r3, #72	; 0x48
    1fba:	18fb      	adds	r3, r7, r3
    1fbc:	22bc      	movs	r2, #188	; 0xbc
    1fbe:	18ba      	adds	r2, r7, r2
    1fc0:	7812      	ldrb	r2, [r2, #0]
    1fc2:	701a      	strb	r2, [r3, #0]
    1fc4:	e005      	b.n	1fd2 <_Z11quantumGamehh+0x27a>
			} else {
				recentSquares[1] = square;
    1fc6:	2348      	movs	r3, #72	; 0x48
    1fc8:	18fb      	adds	r3, r7, r3
    1fca:	22bc      	movs	r2, #188	; 0xbc
    1fcc:	18ba      	adds	r2, r7, r2
    1fce:	7812      	ldrb	r2, [r2, #0]
    1fd0:	705a      	strb	r2, [r3, #1]
			}
		

			// Draw small nought or cross on selected square
			drawSmallCounter(square, turn);
    1fd2:	23be      	movs	r3, #190	; 0xbe
    1fd4:	18fb      	adds	r3, r7, r3
    1fd6:	781a      	ldrb	r2, [r3, #0]
    1fd8:	23bc      	movs	r3, #188	; 0xbc
    1fda:	18fb      	adds	r3, r7, r3
    1fdc:	781b      	ldrb	r3, [r3, #0]
    1fde:	0011      	movs	r1, r2
    1fe0:	0018      	movs	r0, r3
    1fe2:	f7ff fa37 	bl	1454 <_Z16drawSmallCounterhh>
			
			countersThisTurn++;
    1fe6:	23bd      	movs	r3, #189	; 0xbd
    1fe8:	18fb      	adds	r3, r7, r3
    1fea:	781a      	ldrb	r2, [r3, #0]
    1fec:	23bd      	movs	r3, #189	; 0xbd
    1fee:	18fb      	adds	r3, r7, r3
    1ff0:	3201      	adds	r2, #1
    1ff2:	701a      	strb	r2, [r3, #0]
    1ff4:	e782      	b.n	1efc <_Z11quantumGamehh+0x1a4>
			if (boardState[square][0] != 0) continue;
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	e780      	b.n	1efc <_Z11quantumGamehh+0x1a4>
			if (boardState[square][turn + 1] != 0) continue;
    1ffa:	46c0      	nop			; (mov r8, r8)
		while (countersThisTurn < 2) {
    1ffc:	e77e      	b.n	1efc <_Z11quantumGamehh+0x1a4>
		}
		
		// Check for measurement
		uint8_t circle[9] = {255, 255, 255, 255, 255, 255, 255, 255, 255};
    1ffe:	233c      	movs	r3, #60	; 0x3c
    2000:	18fb      	adds	r3, r7, r3
    2002:	4a51      	ldr	r2, [pc, #324]	; (2148 <_Z11quantumGamehh+0x3f0>)
    2004:	ca03      	ldmia	r2!, {r0, r1}
    2006:	c303      	stmia	r3!, {r0, r1}
    2008:	7812      	ldrb	r2, [r2, #0]
    200a:	701a      	strb	r2, [r3, #0]
		findCircle(boardState, square, turn + 1, square, circle);
    200c:	23be      	movs	r3, #190	; 0xbe
    200e:	18fb      	adds	r3, r7, r3
    2010:	781b      	ldrb	r3, [r3, #0]
    2012:	3301      	adds	r3, #1
    2014:	b2da      	uxtb	r2, r3
    2016:	23bc      	movs	r3, #188	; 0xbc
    2018:	18fb      	adds	r3, r7, r3
    201a:	781c      	ldrb	r4, [r3, #0]
    201c:	23bc      	movs	r3, #188	; 0xbc
    201e:	18fb      	adds	r3, r7, r3
    2020:	7819      	ldrb	r1, [r3, #0]
    2022:	2354      	movs	r3, #84	; 0x54
    2024:	18f8      	adds	r0, r7, r3
    2026:	233c      	movs	r3, #60	; 0x3c
    2028:	18fb      	adds	r3, r7, r3
    202a:	9300      	str	r3, [sp, #0]
    202c:	0023      	movs	r3, r4
    202e:	f7ff fa7c 	bl	152a <_Z10findCirclePA11_hhhhPh>
		if (circle[0] != 255) {
    2032:	233c      	movs	r3, #60	; 0x3c
    2034:	18fb      	adds	r3, r7, r3
    2036:	781b      	ldrb	r3, [r3, #0]
    2038:	2bff      	cmp	r3, #255	; 0xff
    203a:	d100      	bne.n	203e <_Z11quantumGamehh+0x2e6>
    203c:	e12e      	b.n	229c <_Z11quantumGamehh+0x544>
			// Circle found
			
			// Ask user how to resolve
			// Underline/Draw box around recent counters
			for (uint8_t i = 0; i < 9; i++) {
    203e:	23b9      	movs	r3, #185	; 0xb9
    2040:	18fb      	adds	r3, r7, r3
    2042:	2200      	movs	r2, #0
    2044:	701a      	strb	r2, [r3, #0]
    2046:	23b9      	movs	r3, #185	; 0xb9
    2048:	18fb      	adds	r3, r7, r3
    204a:	781b      	ldrb	r3, [r3, #0]
    204c:	2b08      	cmp	r3, #8
    204e:	dd00      	ble.n	2052 <_Z11quantumGamehh+0x2fa>
    2050:	e07e      	b.n	2150 <_Z11quantumGamehh+0x3f8>
				if (boardState[i][turn + 1] != 0) {
    2052:	23b9      	movs	r3, #185	; 0xb9
    2054:	18fb      	adds	r3, r7, r3
    2056:	781a      	ldrb	r2, [r3, #0]
    2058:	23be      	movs	r3, #190	; 0xbe
    205a:	18fb      	adds	r3, r7, r3
    205c:	781b      	ldrb	r3, [r3, #0]
    205e:	1c59      	adds	r1, r3, #1
    2060:	2354      	movs	r3, #84	; 0x54
    2062:	18f8      	adds	r0, r7, r3
    2064:	0013      	movs	r3, r2
    2066:	009b      	lsls	r3, r3, #2
    2068:	189b      	adds	r3, r3, r2
    206a:	005b      	lsls	r3, r3, #1
    206c:	189b      	adds	r3, r3, r2
    206e:	18c3      	adds	r3, r0, r3
    2070:	5c5b      	ldrb	r3, [r3, r1]
    2072:	2b00      	cmp	r3, #0
    2074:	d05c      	beq.n	2130 <_Z11quantumGamehh+0x3d8>
					TS_Point point = getSmallCounterPosition(i, turn);
    2076:	2314      	movs	r3, #20
    2078:	18f8      	adds	r0, r7, r3
    207a:	23be      	movs	r3, #190	; 0xbe
    207c:	18fb      	adds	r3, r7, r3
    207e:	781a      	ldrb	r2, [r3, #0]
    2080:	23b9      	movs	r3, #185	; 0xb9
    2082:	18fb      	adds	r3, r7, r3
    2084:	781b      	ldrb	r3, [r3, #0]
    2086:	0019      	movs	r1, r3
    2088:	f7ff f962 	bl	1350 <_Z23getSmallCounterPositionhh>
					//tftDisplay.drawRect(point.x, point.y, 25, 25, 0x07FF);
					tftDisplay.drawLine(point.x + 2, point.y + 26, point.x + 24, point.y + 26, 0xF800);
    208c:	2314      	movs	r3, #20
    208e:	18fb      	adds	r3, r7, r3
    2090:	2200      	movs	r2, #0
    2092:	5e9b      	ldrsh	r3, [r3, r2]
    2094:	b29b      	uxth	r3, r3
    2096:	3302      	adds	r3, #2
    2098:	b29b      	uxth	r3, r3
    209a:	b219      	sxth	r1, r3
    209c:	2314      	movs	r3, #20
    209e:	18fb      	adds	r3, r7, r3
    20a0:	2202      	movs	r2, #2
    20a2:	5e9b      	ldrsh	r3, [r3, r2]
    20a4:	b29b      	uxth	r3, r3
    20a6:	331a      	adds	r3, #26
    20a8:	b29b      	uxth	r3, r3
    20aa:	b21c      	sxth	r4, r3
    20ac:	2314      	movs	r3, #20
    20ae:	18fb      	adds	r3, r7, r3
    20b0:	2200      	movs	r2, #0
    20b2:	5e9b      	ldrsh	r3, [r3, r2]
    20b4:	b29b      	uxth	r3, r3
    20b6:	3318      	adds	r3, #24
    20b8:	b29b      	uxth	r3, r3
    20ba:	b21d      	sxth	r5, r3
    20bc:	2314      	movs	r3, #20
    20be:	18fb      	adds	r3, r7, r3
    20c0:	2202      	movs	r2, #2
    20c2:	5e9b      	ldrsh	r3, [r3, r2]
    20c4:	b29b      	uxth	r3, r3
    20c6:	331a      	adds	r3, #26
    20c8:	b29b      	uxth	r3, r3
    20ca:	b21b      	sxth	r3, r3
    20cc:	481f      	ldr	r0, [pc, #124]	; (214c <_Z11quantumGamehh+0x3f4>)
    20ce:	22f8      	movs	r2, #248	; 0xf8
    20d0:	0212      	lsls	r2, r2, #8
    20d2:	9201      	str	r2, [sp, #4]
    20d4:	9300      	str	r3, [sp, #0]
    20d6:	002b      	movs	r3, r5
    20d8:	0022      	movs	r2, r4
    20da:	f00d f963 	bl	f3a4 <_ZN12Adafruit_GFX8drawLineEsssst>
					tftDisplay.drawLine(point.x + 2, point.y + 25, point.x + 24, point.y + 25, 0xF800);
    20de:	2314      	movs	r3, #20
    20e0:	18fb      	adds	r3, r7, r3
    20e2:	2200      	movs	r2, #0
    20e4:	5e9b      	ldrsh	r3, [r3, r2]
    20e6:	b29b      	uxth	r3, r3
    20e8:	3302      	adds	r3, #2
    20ea:	b29b      	uxth	r3, r3
    20ec:	b219      	sxth	r1, r3
    20ee:	2314      	movs	r3, #20
    20f0:	18fb      	adds	r3, r7, r3
    20f2:	2202      	movs	r2, #2
    20f4:	5e9b      	ldrsh	r3, [r3, r2]
    20f6:	b29b      	uxth	r3, r3
    20f8:	3319      	adds	r3, #25
    20fa:	b29b      	uxth	r3, r3
    20fc:	b21c      	sxth	r4, r3
    20fe:	2314      	movs	r3, #20
    2100:	18fb      	adds	r3, r7, r3
    2102:	2200      	movs	r2, #0
    2104:	5e9b      	ldrsh	r3, [r3, r2]
    2106:	b29b      	uxth	r3, r3
    2108:	3318      	adds	r3, #24
    210a:	b29b      	uxth	r3, r3
    210c:	b21d      	sxth	r5, r3
    210e:	2314      	movs	r3, #20
    2110:	18fb      	adds	r3, r7, r3
    2112:	2202      	movs	r2, #2
    2114:	5e9b      	ldrsh	r3, [r3, r2]
    2116:	b29b      	uxth	r3, r3
    2118:	3319      	adds	r3, #25
    211a:	b29b      	uxth	r3, r3
    211c:	b21b      	sxth	r3, r3
    211e:	480b      	ldr	r0, [pc, #44]	; (214c <_Z11quantumGamehh+0x3f4>)
    2120:	22f8      	movs	r2, #248	; 0xf8
    2122:	0212      	lsls	r2, r2, #8
    2124:	9201      	str	r2, [sp, #4]
    2126:	9300      	str	r3, [sp, #0]
    2128:	002b      	movs	r3, r5
    212a:	0022      	movs	r2, r4
    212c:	f00d f93a 	bl	f3a4 <_ZN12Adafruit_GFX8drawLineEsssst>
			for (uint8_t i = 0; i < 9; i++) {
    2130:	23b9      	movs	r3, #185	; 0xb9
    2132:	18fb      	adds	r3, r7, r3
    2134:	781a      	ldrb	r2, [r3, #0]
    2136:	23b9      	movs	r3, #185	; 0xb9
    2138:	18fb      	adds	r3, r7, r3
    213a:	3201      	adds	r2, #1
    213c:	701a      	strb	r2, [r3, #0]
    213e:	e782      	b.n	2046 <_Z11quantumGamehh+0x2ee>
    2140:	00010c0c 	.word	0x00010c0c
    2144:	200001b4 	.word	0x200001b4
    2148:	00010c10 	.word	0x00010c10
    214c:	20000150 	.word	0x20000150
				}
			}
			
			// Get the two boxes parameters
			TS_Point square0 = getCounterPosition(recentSquares[0]);
    2150:	2348      	movs	r3, #72	; 0x48
    2152:	18fb      	adds	r3, r7, r3
    2154:	781a      	ldrb	r2, [r3, #0]
    2156:	2324      	movs	r3, #36	; 0x24
    2158:	18fb      	adds	r3, r7, r3
    215a:	0011      	movs	r1, r2
    215c:	0018      	movs	r0, r3
    215e:	f7ff f8a1 	bl	12a4 <_Z18getCounterPositionh>
			TS_Point square1 = getCounterPosition(recentSquares[1]);
    2162:	2348      	movs	r3, #72	; 0x48
    2164:	18fb      	adds	r3, r7, r3
    2166:	785a      	ldrb	r2, [r3, #1]
    2168:	231c      	movs	r3, #28
    216a:	18fb      	adds	r3, r7, r3
    216c:	0011      	movs	r1, r2
    216e:	0018      	movs	r0, r3
    2170:	f7ff f898 	bl	12a4 <_Z18getCounterPositionh>
			
			
			// Wait for the user to click one of the two boxes
			uint8_t tappedSquare = 255;
    2174:	23b8      	movs	r3, #184	; 0xb8
    2176:	18fb      	adds	r3, r7, r3
    2178:	22ff      	movs	r2, #255	; 0xff
    217a:	701a      	strb	r2, [r3, #0]
			while (true) {
				if (!touchScreen.touched()) continue;
    217c:	4b5f      	ldr	r3, [pc, #380]	; (22fc <_Z11quantumGamehh+0x5a4>)
    217e:	0018      	movs	r0, r3
    2180:	f002 feaa 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    2184:	0003      	movs	r3, r0
    2186:	425a      	negs	r2, r3
    2188:	4153      	adcs	r3, r2
    218a:	b2db      	uxtb	r3, r3
    218c:	2b00      	cmp	r3, #0
    218e:	d000      	beq.n	2192 <_Z11quantumGamehh+0x43a>
    2190:	e082      	b.n	2298 <_Z11quantumGamehh+0x540>
				TS_Point point = getPoint();
    2192:	230c      	movs	r3, #12
    2194:	18fb      	adds	r3, r7, r3
    2196:	0018      	movs	r0, r3
    2198:	f7fe ff42 	bl	1020 <_Z8getPointv>
				if (point.x > square0.x && point.x < square0.x + 80 && point.y > square0.y && point.y < square0.y + 80) {
    219c:	230c      	movs	r3, #12
    219e:	18fb      	adds	r3, r7, r3
    21a0:	2200      	movs	r2, #0
    21a2:	5e9a      	ldrsh	r2, [r3, r2]
    21a4:	2324      	movs	r3, #36	; 0x24
    21a6:	18fb      	adds	r3, r7, r3
    21a8:	2100      	movs	r1, #0
    21aa:	5e5b      	ldrsh	r3, [r3, r1]
    21ac:	429a      	cmp	r2, r3
    21ae:	dd28      	ble.n	2202 <_Z11quantumGamehh+0x4aa>
    21b0:	230c      	movs	r3, #12
    21b2:	18fb      	adds	r3, r7, r3
    21b4:	2200      	movs	r2, #0
    21b6:	5e9b      	ldrsh	r3, [r3, r2]
    21b8:	001a      	movs	r2, r3
    21ba:	2324      	movs	r3, #36	; 0x24
    21bc:	18fb      	adds	r3, r7, r3
    21be:	2100      	movs	r1, #0
    21c0:	5e5b      	ldrsh	r3, [r3, r1]
    21c2:	3350      	adds	r3, #80	; 0x50
    21c4:	429a      	cmp	r2, r3
    21c6:	da1c      	bge.n	2202 <_Z11quantumGamehh+0x4aa>
    21c8:	230c      	movs	r3, #12
    21ca:	18fb      	adds	r3, r7, r3
    21cc:	2202      	movs	r2, #2
    21ce:	5e9a      	ldrsh	r2, [r3, r2]
    21d0:	2324      	movs	r3, #36	; 0x24
    21d2:	18fb      	adds	r3, r7, r3
    21d4:	2102      	movs	r1, #2
    21d6:	5e5b      	ldrsh	r3, [r3, r1]
    21d8:	429a      	cmp	r2, r3
    21da:	dd12      	ble.n	2202 <_Z11quantumGamehh+0x4aa>
    21dc:	230c      	movs	r3, #12
    21de:	18fb      	adds	r3, r7, r3
    21e0:	2202      	movs	r2, #2
    21e2:	5e9b      	ldrsh	r3, [r3, r2]
    21e4:	001a      	movs	r2, r3
    21e6:	2324      	movs	r3, #36	; 0x24
    21e8:	18fb      	adds	r3, r7, r3
    21ea:	2102      	movs	r1, #2
    21ec:	5e5b      	ldrsh	r3, [r3, r1]
    21ee:	3350      	adds	r3, #80	; 0x50
    21f0:	429a      	cmp	r2, r3
    21f2:	da06      	bge.n	2202 <_Z11quantumGamehh+0x4aa>
					tappedSquare = recentSquares[0];
    21f4:	23b8      	movs	r3, #184	; 0xb8
    21f6:	18fb      	adds	r3, r7, r3
    21f8:	2248      	movs	r2, #72	; 0x48
    21fa:	18ba      	adds	r2, r7, r2
    21fc:	7812      	ldrb	r2, [r2, #0]
    21fe:	701a      	strb	r2, [r3, #0]
					break;
    2200:	e032      	b.n	2268 <_Z11quantumGamehh+0x510>
				} else if (point.x > square1.x && point.x < square1.x + 80 && point.y > square1.y && point.y < square1.y + 80) {
    2202:	230c      	movs	r3, #12
    2204:	18fb      	adds	r3, r7, r3
    2206:	2200      	movs	r2, #0
    2208:	5e9a      	ldrsh	r2, [r3, r2]
    220a:	231c      	movs	r3, #28
    220c:	18fb      	adds	r3, r7, r3
    220e:	2100      	movs	r1, #0
    2210:	5e5b      	ldrsh	r3, [r3, r1]
    2212:	429a      	cmp	r2, r3
    2214:	ddb2      	ble.n	217c <_Z11quantumGamehh+0x424>
    2216:	230c      	movs	r3, #12
    2218:	18fb      	adds	r3, r7, r3
    221a:	2200      	movs	r2, #0
    221c:	5e9b      	ldrsh	r3, [r3, r2]
    221e:	001a      	movs	r2, r3
    2220:	231c      	movs	r3, #28
    2222:	18fb      	adds	r3, r7, r3
    2224:	2100      	movs	r1, #0
    2226:	5e5b      	ldrsh	r3, [r3, r1]
    2228:	3350      	adds	r3, #80	; 0x50
    222a:	429a      	cmp	r2, r3
    222c:	daa6      	bge.n	217c <_Z11quantumGamehh+0x424>
    222e:	230c      	movs	r3, #12
    2230:	18fb      	adds	r3, r7, r3
    2232:	2202      	movs	r2, #2
    2234:	5e9a      	ldrsh	r2, [r3, r2]
    2236:	231c      	movs	r3, #28
    2238:	18fb      	adds	r3, r7, r3
    223a:	2102      	movs	r1, #2
    223c:	5e5b      	ldrsh	r3, [r3, r1]
    223e:	429a      	cmp	r2, r3
    2240:	dd9c      	ble.n	217c <_Z11quantumGamehh+0x424>
    2242:	230c      	movs	r3, #12
    2244:	18fb      	adds	r3, r7, r3
    2246:	2202      	movs	r2, #2
    2248:	5e9b      	ldrsh	r3, [r3, r2]
    224a:	001a      	movs	r2, r3
    224c:	231c      	movs	r3, #28
    224e:	18fb      	adds	r3, r7, r3
    2250:	2102      	movs	r1, #2
    2252:	5e5b      	ldrsh	r3, [r3, r1]
    2254:	3350      	adds	r3, #80	; 0x50
    2256:	429a      	cmp	r2, r3
    2258:	da90      	bge.n	217c <_Z11quantumGamehh+0x424>
					tappedSquare = recentSquares[1];
    225a:	23b8      	movs	r3, #184	; 0xb8
    225c:	18fb      	adds	r3, r7, r3
    225e:	2248      	movs	r2, #72	; 0x48
    2260:	18ba      	adds	r2, r7, r2
    2262:	7852      	ldrb	r2, [r2, #1]
    2264:	701a      	strb	r2, [r3, #0]
					break;
    2266:	46c0      	nop			; (mov r8, r8)
				}
			}

			// Turn to classical counters
			drawClassicalCounters(boardState, tappedSquare, turn + 1, tappedSquare, turn + 1);			
    2268:	23be      	movs	r3, #190	; 0xbe
    226a:	18fb      	adds	r3, r7, r3
    226c:	781b      	ldrb	r3, [r3, #0]
    226e:	3301      	adds	r3, #1
    2270:	b2dc      	uxtb	r4, r3
    2272:	23be      	movs	r3, #190	; 0xbe
    2274:	18fb      	adds	r3, r7, r3
    2276:	781b      	ldrb	r3, [r3, #0]
    2278:	3301      	adds	r3, #1
    227a:	b2db      	uxtb	r3, r3
    227c:	22b8      	movs	r2, #184	; 0xb8
    227e:	18ba      	adds	r2, r7, r2
    2280:	7815      	ldrb	r5, [r2, #0]
    2282:	22b8      	movs	r2, #184	; 0xb8
    2284:	18ba      	adds	r2, r7, r2
    2286:	7811      	ldrb	r1, [r2, #0]
    2288:	2254      	movs	r2, #84	; 0x54
    228a:	18b8      	adds	r0, r7, r2
    228c:	9300      	str	r3, [sp, #0]
    228e:	002b      	movs	r3, r5
    2290:	0022      	movs	r2, r4
    2292:	f7ff f9f8 	bl	1686 <_Z21drawClassicalCountersPA11_hhhhh>
    2296:	e001      	b.n	229c <_Z11quantumGamehh+0x544>
				if (!touchScreen.touched()) continue;
    2298:	46c0      	nop			; (mov r8, r8)
			}
    229a:	e76f      	b.n	217c <_Z11quantumGamehh+0x424>
		}

		winner = checkForQuantumWinner(boardState);
    229c:	23b7      	movs	r3, #183	; 0xb7
    229e:	18fc      	adds	r4, r7, r3
    22a0:	2354      	movs	r3, #84	; 0x54
    22a2:	18fb      	adds	r3, r7, r3
    22a4:	0018      	movs	r0, r3
    22a6:	f7ff fafb 	bl	18a0 <_Z21checkForQuantumWinnerPA11_h>
    22aa:	0003      	movs	r3, r0
    22ac:	7023      	strb	r3, [r4, #0]
		if (winner != 0) break;
    22ae:	23b7      	movs	r3, #183	; 0xb7
    22b0:	18fb      	adds	r3, r7, r3
    22b2:	781b      	ldrb	r3, [r3, #0]
    22b4:	2b00      	cmp	r3, #0
    22b6:	d003      	beq.n	22c0 <_Z11quantumGamehh+0x568>
		turn++;
		(player == 1) ? player = 2 : player = 1;
		// Short delay to prevent tapping slowly from placing two moves
		delay(100);
	}
	return winner;
    22b8:	23b7      	movs	r3, #183	; 0xb7
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	781b      	ldrb	r3, [r3, #0]
    22be:	e018      	b.n	22f2 <_Z11quantumGamehh+0x59a>
		turn++;
    22c0:	23be      	movs	r3, #190	; 0xbe
    22c2:	18fb      	adds	r3, r7, r3
    22c4:	781a      	ldrb	r2, [r3, #0]
    22c6:	23be      	movs	r3, #190	; 0xbe
    22c8:	18fb      	adds	r3, r7, r3
    22ca:	3201      	adds	r2, #1
    22cc:	701a      	strb	r2, [r3, #0]
		(player == 1) ? player = 2 : player = 1;
    22ce:	23bf      	movs	r3, #191	; 0xbf
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	781b      	ldrb	r3, [r3, #0]
    22d4:	2b01      	cmp	r3, #1
    22d6:	d104      	bne.n	22e2 <_Z11quantumGamehh+0x58a>
    22d8:	23bf      	movs	r3, #191	; 0xbf
    22da:	18fb      	adds	r3, r7, r3
    22dc:	2202      	movs	r2, #2
    22de:	701a      	strb	r2, [r3, #0]
    22e0:	e003      	b.n	22ea <_Z11quantumGamehh+0x592>
    22e2:	23bf      	movs	r3, #191	; 0xbf
    22e4:	18fb      	adds	r3, r7, r3
    22e6:	2201      	movs	r2, #1
    22e8:	701a      	strb	r2, [r3, #0]
		delay(100);
    22ea:	2064      	movs	r0, #100	; 0x64
    22ec:	f000 fbf4 	bl	2ad8 <delay>
	}
    22f0:	e559      	b.n	1da6 <_Z11quantumGamehh+0x4e>
}
    22f2:	0018      	movs	r0, r3
    22f4:	46bd      	mov	sp, r7
    22f6:	b030      	add	sp, #192	; 0xc0
    22f8:	bdb0      	pop	{r4, r5, r7, pc}
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	200001b4 	.word	0x200001b4

00002300 <_Z9playMatchi>:

void playMatch(int maxGames) {
    2300:	b590      	push	{r4, r7, lr}
    2302:	b089      	sub	sp, #36	; 0x24
    2304:	af00      	add	r7, sp, #0
    2306:	6078      	str	r0, [r7, #4]
	uint8_t noughtsScore = 0;
    2308:	231f      	movs	r3, #31
    230a:	18fb      	adds	r3, r7, r3
    230c:	2200      	movs	r2, #0
    230e:	701a      	strb	r2, [r3, #0]
	uint8_t crossesScore = 0;
    2310:	231e      	movs	r3, #30
    2312:	18fb      	adds	r3, r7, r3
    2314:	2200      	movs	r2, #0
    2316:	701a      	strb	r2, [r3, #0]
	uint8_t gamesPlayed = 0;
    2318:	231d      	movs	r3, #29
    231a:	18fb      	adds	r3, r7, r3
    231c:	2200      	movs	r2, #0
    231e:	701a      	strb	r2, [r3, #0]

	// Draw score bar for match
	drawBitmap('a', 0, 0);
    2320:	2200      	movs	r2, #0
    2322:	2100      	movs	r1, #0
    2324:	2061      	movs	r0, #97	; 0x61
    2326:	f7fd ff9d 	bl	264 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
    232a:	2220      	movs	r2, #32
    232c:	2176      	movs	r1, #118	; 0x76
    232e:	2063      	movs	r0, #99	; 0x63
    2330:	f7fd ff98 	bl	264 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
    2334:	231f      	movs	r3, #31
    2336:	18fb      	adds	r3, r7, r3
    2338:	781a      	ldrb	r2, [r3, #0]
    233a:	231e      	movs	r3, #30
    233c:	18fb      	adds	r3, r7, r3
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	0019      	movs	r1, r3
    2342:	0010      	movs	r0, r2
    2344:	f7fe feee 	bl	1124 <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
    2348:	220a      	movs	r2, #10
    234a:	2151      	movs	r1, #81	; 0x51
    234c:	2062      	movs	r0, #98	; 0x62
    234e:	f7fd ff89 	bl	264 <_Z10drawBitmapcss>

	while (gamesPlayed < maxGames) {
    2352:	231d      	movs	r3, #29
    2354:	18fb      	adds	r3, r7, r3
    2356:	781a      	ldrb	r2, [r3, #0]
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	429a      	cmp	r2, r3
    235c:	db00      	blt.n	2360 <_Z9playMatchi+0x60>
    235e:	e0e4      	b.n	252a <_Z9playMatchi+0x22a>
		State winner = game(noughtsScore, crossesScore);
    2360:	231b      	movs	r3, #27
    2362:	18fc      	adds	r4, r7, r3
    2364:	231e      	movs	r3, #30
    2366:	18fb      	adds	r3, r7, r3
    2368:	781a      	ldrb	r2, [r3, #0]
    236a:	231f      	movs	r3, #31
    236c:	18fb      	adds	r3, r7, r3
    236e:	781b      	ldrb	r3, [r3, #0]
    2370:	0011      	movs	r1, r2
    2372:	0018      	movs	r0, r3
    2374:	f7ff fbdc 	bl	1b30 <_Z4gamehh>
    2378:	0003      	movs	r3, r0
    237a:	7023      	strb	r3, [r4, #0]

		// Select win banner and add to winners score
		char bitmap;
		switch (winner) {
    237c:	231b      	movs	r3, #27
    237e:	18fb      	adds	r3, r7, r3
    2380:	781b      	ldrb	r3, [r3, #0]
    2382:	2b01      	cmp	r3, #1
    2384:	d017      	beq.n	23b6 <_Z9playMatchi+0xb6>
    2386:	2b02      	cmp	r3, #2
    2388:	d002      	beq.n	2390 <_Z9playMatchi+0x90>
    238a:	2b00      	cmp	r3, #0
    238c:	d026      	beq.n	23dc <_Z9playMatchi+0xdc>
    238e:	e02a      	b.n	23e6 <_Z9playMatchi+0xe6>
			case cross:
			// Crosses wins
			bitmap = 'e';
    2390:	231c      	movs	r3, #28
    2392:	18fb      	adds	r3, r7, r3
    2394:	2265      	movs	r2, #101	; 0x65
    2396:	701a      	strb	r2, [r3, #0]
			crossesScore++;
    2398:	231e      	movs	r3, #30
    239a:	18fb      	adds	r3, r7, r3
    239c:	781a      	ldrb	r2, [r3, #0]
    239e:	231e      	movs	r3, #30
    23a0:	18fb      	adds	r3, r7, r3
    23a2:	3201      	adds	r2, #1
    23a4:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    23a6:	231d      	movs	r3, #29
    23a8:	18fb      	adds	r3, r7, r3
    23aa:	781a      	ldrb	r2, [r3, #0]
    23ac:	231d      	movs	r3, #29
    23ae:	18fb      	adds	r3, r7, r3
    23b0:	3201      	adds	r2, #1
    23b2:	701a      	strb	r2, [r3, #0]
			break;
    23b4:	e017      	b.n	23e6 <_Z9playMatchi+0xe6>
			case nought:
			// Noughts wins
			bitmap = 'g';
    23b6:	231c      	movs	r3, #28
    23b8:	18fb      	adds	r3, r7, r3
    23ba:	2267      	movs	r2, #103	; 0x67
    23bc:	701a      	strb	r2, [r3, #0]
			noughtsScore++;
    23be:	231f      	movs	r3, #31
    23c0:	18fb      	adds	r3, r7, r3
    23c2:	781a      	ldrb	r2, [r3, #0]
    23c4:	231f      	movs	r3, #31
    23c6:	18fb      	adds	r3, r7, r3
    23c8:	3201      	adds	r2, #1
    23ca:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    23cc:	231d      	movs	r3, #29
    23ce:	18fb      	adds	r3, r7, r3
    23d0:	781a      	ldrb	r2, [r3, #0]
    23d2:	231d      	movs	r3, #29
    23d4:	18fb      	adds	r3, r7, r3
    23d6:	3201      	adds	r2, #1
    23d8:	701a      	strb	r2, [r3, #0]
			break;
    23da:	e004      	b.n	23e6 <_Z9playMatchi+0xe6>
			case empty:
			// Game is a draw
			bitmap = 'f';
    23dc:	231c      	movs	r3, #28
    23de:	18fb      	adds	r3, r7, r3
    23e0:	2266      	movs	r2, #102	; 0x66
    23e2:	701a      	strb	r2, [r3, #0]
			break;
    23e4:	46c0      	nop			; (mov r8, r8)
		}
		
		updateScore(noughtsScore, crossesScore);
    23e6:	231f      	movs	r3, #31
    23e8:	18fb      	adds	r3, r7, r3
    23ea:	781a      	ldrb	r2, [r3, #0]
    23ec:	231e      	movs	r3, #30
    23ee:	18fb      	adds	r3, r7, r3
    23f0:	781b      	ldrb	r3, [r3, #0]
    23f2:	0019      	movs	r1, r3
    23f4:	0010      	movs	r0, r2
    23f6:	f7fe fe95 	bl	1124 <_Z11updateScoreii>
		
		// If there are still games to be played draw win banner,
		// otherwise draw end game screen
		uint8_t gamesToWin = (maxGames / 2) + 1;
    23fa:	687b      	ldr	r3, [r7, #4]
    23fc:	2b00      	cmp	r3, #0
    23fe:	da00      	bge.n	2402 <_Z9playMatchi+0x102>
    2400:	3301      	adds	r3, #1
    2402:	105b      	asrs	r3, r3, #1
    2404:	b2da      	uxtb	r2, r3
    2406:	231a      	movs	r3, #26
    2408:	18fb      	adds	r3, r7, r3
    240a:	3201      	adds	r2, #1
    240c:	701a      	strb	r2, [r3, #0]
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    240e:	231f      	movs	r3, #31
    2410:	18fb      	adds	r3, r7, r3
    2412:	781a      	ldrb	r2, [r3, #0]
    2414:	231a      	movs	r3, #26
    2416:	18fb      	adds	r3, r7, r3
    2418:	781b      	ldrb	r3, [r3, #0]
    241a:	429a      	cmp	r2, r3
    241c:	da1c      	bge.n	2458 <_Z9playMatchi+0x158>
    241e:	231e      	movs	r3, #30
    2420:	18fb      	adds	r3, r7, r3
    2422:	781a      	ldrb	r2, [r3, #0]
    2424:	231a      	movs	r3, #26
    2426:	18fb      	adds	r3, r7, r3
    2428:	781b      	ldrb	r3, [r3, #0]
    242a:	429a      	cmp	r2, r3
    242c:	da14      	bge.n	2458 <_Z9playMatchi+0x158>
			drawBitmap(bitmap, 0, 110);
    242e:	231c      	movs	r3, #28
    2430:	18fb      	adds	r3, r7, r3
    2432:	781b      	ldrb	r3, [r3, #0]
    2434:	226e      	movs	r2, #110	; 0x6e
    2436:	2100      	movs	r1, #0
    2438:	0018      	movs	r0, r3
    243a:	f7fd ff13 	bl	264 <_Z10drawBitmapcss>
			while (true) if (touchScreen.touched()) break;
    243e:	4b3d      	ldr	r3, [pc, #244]	; (2534 <_Z9playMatchi+0x234>)
    2440:	0018      	movs	r0, r3
    2442:	f002 fd49 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    2446:	0003      	movs	r3, r0
    2448:	1e5a      	subs	r2, r3, #1
    244a:	4193      	sbcs	r3, r2
    244c:	b2db      	uxtb	r3, r3
    244e:	2b00      	cmp	r3, #0
    2450:	d100      	bne.n	2454 <_Z9playMatchi+0x154>
    2452:	e7f4      	b.n	243e <_Z9playMatchi+0x13e>
    2454:	46c0      	nop			; (mov r8, r8)
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    2456:	e067      	b.n	2528 <_Z9playMatchi+0x228>
			} else {
			if (crossesScore > noughtsScore) {
    2458:	231e      	movs	r3, #30
    245a:	18fb      	adds	r3, r7, r3
    245c:	781a      	ldrb	r2, [r3, #0]
    245e:	231f      	movs	r3, #31
    2460:	18fb      	adds	r3, r7, r3
    2462:	781b      	ldrb	r3, [r3, #0]
    2464:	429a      	cmp	r2, r3
    2466:	dd2f      	ble.n	24c8 <_Z9playMatchi+0x1c8>
				// Draw game-over, crosses wins
				drawBitmap('m', 0, 0);
    2468:	2200      	movs	r2, #0
    246a:	2100      	movs	r1, #0
    246c:	206d      	movs	r0, #109	; 0x6d
    246e:	f7fd fef9 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2472:	4b30      	ldr	r3, [pc, #192]	; (2534 <_Z9playMatchi+0x234>)
    2474:	0018      	movs	r0, r3
    2476:	f002 fd2f 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    247a:	0003      	movs	r3, r0
    247c:	1e5a      	subs	r2, r3, #1
    247e:	4193      	sbcs	r3, r2
    2480:	b2db      	uxtb	r3, r3
    2482:	2b00      	cmp	r3, #0
    2484:	d0f5      	beq.n	2472 <_Z9playMatchi+0x172>
						TS_Point point = getPoint();
    2486:	2314      	movs	r3, #20
    2488:	18fb      	adds	r3, r7, r3
    248a:	0018      	movs	r0, r3
    248c:	f7fe fdc8 	bl	1020 <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    2490:	2314      	movs	r3, #20
    2492:	18fb      	adds	r3, r7, r3
    2494:	2200      	movs	r2, #0
    2496:	5e9b      	ldrsh	r3, [r3, r2]
    2498:	2b16      	cmp	r3, #22
    249a:	ddea      	ble.n	2472 <_Z9playMatchi+0x172>
    249c:	2314      	movs	r3, #20
    249e:	18fb      	adds	r3, r7, r3
    24a0:	2200      	movs	r2, #0
    24a2:	5e9b      	ldrsh	r3, [r3, r2]
    24a4:	2bd7      	cmp	r3, #215	; 0xd7
    24a6:	dce4      	bgt.n	2472 <_Z9playMatchi+0x172>
    24a8:	2314      	movs	r3, #20
    24aa:	18fb      	adds	r3, r7, r3
    24ac:	2202      	movs	r2, #2
    24ae:	5e9b      	ldrsh	r3, [r3, r2]
    24b0:	2bb9      	cmp	r3, #185	; 0xb9
    24b2:	ddde      	ble.n	2472 <_Z9playMatchi+0x172>
    24b4:	2314      	movs	r3, #20
    24b6:	18fb      	adds	r3, r7, r3
    24b8:	2202      	movs	r2, #2
    24ba:	5e9a      	ldrsh	r2, [r3, r2]
    24bc:	2384      	movs	r3, #132	; 0x84
    24be:	005b      	lsls	r3, r3, #1
    24c0:	429a      	cmp	r2, r3
    24c2:	dcd6      	bgt.n	2472 <_Z9playMatchi+0x172>
							// They pressed the start button
							goto exit;
    24c4:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
	exit:
	return;
    24c6:	e030      	b.n	252a <_Z9playMatchi+0x22a>
				drawBitmap('n', 0, 0);
    24c8:	2200      	movs	r2, #0
    24ca:	2100      	movs	r1, #0
    24cc:	206e      	movs	r0, #110	; 0x6e
    24ce:	f7fd fec9 	bl	264 <_Z10drawBitmapcss>
					if (touchScreen.touched()) {
    24d2:	4b18      	ldr	r3, [pc, #96]	; (2534 <_Z9playMatchi+0x234>)
    24d4:	0018      	movs	r0, r3
    24d6:	f002 fcff 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    24da:	0003      	movs	r3, r0
    24dc:	1e5a      	subs	r2, r3, #1
    24de:	4193      	sbcs	r3, r2
    24e0:	b2db      	uxtb	r3, r3
    24e2:	2b00      	cmp	r3, #0
    24e4:	d0f5      	beq.n	24d2 <_Z9playMatchi+0x1d2>
						TS_Point point = getPoint();
    24e6:	230c      	movs	r3, #12
    24e8:	18fb      	adds	r3, r7, r3
    24ea:	0018      	movs	r0, r3
    24ec:	f7fe fd98 	bl	1020 <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    24f0:	230c      	movs	r3, #12
    24f2:	18fb      	adds	r3, r7, r3
    24f4:	2200      	movs	r2, #0
    24f6:	5e9b      	ldrsh	r3, [r3, r2]
    24f8:	2b16      	cmp	r3, #22
    24fa:	dd13      	ble.n	2524 <_Z9playMatchi+0x224>
    24fc:	230c      	movs	r3, #12
    24fe:	18fb      	adds	r3, r7, r3
    2500:	2200      	movs	r2, #0
    2502:	5e9b      	ldrsh	r3, [r3, r2]
    2504:	2bd7      	cmp	r3, #215	; 0xd7
    2506:	dc0d      	bgt.n	2524 <_Z9playMatchi+0x224>
    2508:	230c      	movs	r3, #12
    250a:	18fb      	adds	r3, r7, r3
    250c:	2202      	movs	r2, #2
    250e:	5e9b      	ldrsh	r3, [r3, r2]
    2510:	2bb9      	cmp	r3, #185	; 0xb9
    2512:	dd07      	ble.n	2524 <_Z9playMatchi+0x224>
    2514:	230c      	movs	r3, #12
    2516:	18fb      	adds	r3, r7, r3
    2518:	2202      	movs	r2, #2
    251a:	5e9a      	ldrsh	r2, [r3, r2]
    251c:	2384      	movs	r3, #132	; 0x84
    251e:	005b      	lsls	r3, r3, #1
    2520:	429a      	cmp	r2, r3
    2522:	dd02      	ble.n	252a <_Z9playMatchi+0x22a>
							continue;
    2524:	46c0      	nop			; (mov r8, r8)
				}
    2526:	e7d4      	b.n	24d2 <_Z9playMatchi+0x1d2>
	while (gamesPlayed < maxGames) {
    2528:	e713      	b.n	2352 <_Z9playMatchi+0x52>
	return;
    252a:	46c0      	nop			; (mov r8, r8)
}
    252c:	46bd      	mov	sp, r7
    252e:	b009      	add	sp, #36	; 0x24
    2530:	bd90      	pop	{r4, r7, pc}
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	200001b4 	.word	0x200001b4

00002538 <_Z16playQuantumMatchi>:

void playQuantumMatch(int maxGames) {
    2538:	b590      	push	{r4, r7, lr}
    253a:	b089      	sub	sp, #36	; 0x24
    253c:	af00      	add	r7, sp, #0
    253e:	6078      	str	r0, [r7, #4]
	uint8_t noughtsScore = 0;
    2540:	231f      	movs	r3, #31
    2542:	18fb      	adds	r3, r7, r3
    2544:	2200      	movs	r2, #0
    2546:	701a      	strb	r2, [r3, #0]
	uint8_t crossesScore = 0;
    2548:	231e      	movs	r3, #30
    254a:	18fb      	adds	r3, r7, r3
    254c:	2200      	movs	r2, #0
    254e:	701a      	strb	r2, [r3, #0]
	uint8_t gamesPlayed = 0;
    2550:	231d      	movs	r3, #29
    2552:	18fb      	adds	r3, r7, r3
    2554:	2200      	movs	r2, #0
    2556:	701a      	strb	r2, [r3, #0]

	// Draw score bar for match
	drawBitmap('a', 0, 0);
    2558:	2200      	movs	r2, #0
    255a:	2100      	movs	r1, #0
    255c:	2061      	movs	r0, #97	; 0x61
    255e:	f7fd fe81 	bl	264 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
    2562:	2220      	movs	r2, #32
    2564:	2176      	movs	r1, #118	; 0x76
    2566:	2063      	movs	r0, #99	; 0x63
    2568:	f7fd fe7c 	bl	264 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
    256c:	231f      	movs	r3, #31
    256e:	18fb      	adds	r3, r7, r3
    2570:	781a      	ldrb	r2, [r3, #0]
    2572:	231e      	movs	r3, #30
    2574:	18fb      	adds	r3, r7, r3
    2576:	781b      	ldrb	r3, [r3, #0]
    2578:	0019      	movs	r1, r3
    257a:	0010      	movs	r0, r2
    257c:	f7fe fdd2 	bl	1124 <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
    2580:	220a      	movs	r2, #10
    2582:	2151      	movs	r1, #81	; 0x51
    2584:	2062      	movs	r0, #98	; 0x62
    2586:	f7fd fe6d 	bl	264 <_Z10drawBitmapcss>

	while (gamesPlayed < maxGames) {
    258a:	231d      	movs	r3, #29
    258c:	18fb      	adds	r3, r7, r3
    258e:	781a      	ldrb	r2, [r3, #0]
    2590:	687b      	ldr	r3, [r7, #4]
    2592:	429a      	cmp	r2, r3
    2594:	db00      	blt.n	2598 <_Z16playQuantumMatchi+0x60>
    2596:	e0e6      	b.n	2766 <_Z16playQuantumMatchi+0x22e>
		uint8_t winner = quantumGame(noughtsScore, crossesScore);
    2598:	231b      	movs	r3, #27
    259a:	18fc      	adds	r4, r7, r3
    259c:	231e      	movs	r3, #30
    259e:	18fb      	adds	r3, r7, r3
    25a0:	781a      	ldrb	r2, [r3, #0]
    25a2:	231f      	movs	r3, #31
    25a4:	18fb      	adds	r3, r7, r3
    25a6:	781b      	ldrb	r3, [r3, #0]
    25a8:	0011      	movs	r1, r2
    25aa:	0018      	movs	r0, r3
    25ac:	f7ff fbd4 	bl	1d58 <_Z11quantumGamehh>
    25b0:	0003      	movs	r3, r0
    25b2:	7023      	strb	r3, [r4, #0]

		// Select win banner and add to winners score
		char bitmap;
		switch (winner) {
    25b4:	231b      	movs	r3, #27
    25b6:	18fb      	adds	r3, r7, r3
    25b8:	781b      	ldrb	r3, [r3, #0]
    25ba:	2b01      	cmp	r3, #1
    25bc:	d004      	beq.n	25c8 <_Z16playQuantumMatchi+0x90>
    25be:	2b02      	cmp	r3, #2
    25c0:	d015      	beq.n	25ee <_Z16playQuantumMatchi+0xb6>
    25c2:	2b00      	cmp	r3, #0
    25c4:	d026      	beq.n	2614 <_Z16playQuantumMatchi+0xdc>
    25c6:	e02a      	b.n	261e <_Z16playQuantumMatchi+0xe6>
			case 1:
			// Crosses wins
			bitmap = 'e';
    25c8:	231c      	movs	r3, #28
    25ca:	18fb      	adds	r3, r7, r3
    25cc:	2265      	movs	r2, #101	; 0x65
    25ce:	701a      	strb	r2, [r3, #0]
			crossesScore++;
    25d0:	231e      	movs	r3, #30
    25d2:	18fb      	adds	r3, r7, r3
    25d4:	781a      	ldrb	r2, [r3, #0]
    25d6:	231e      	movs	r3, #30
    25d8:	18fb      	adds	r3, r7, r3
    25da:	3201      	adds	r2, #1
    25dc:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    25de:	231d      	movs	r3, #29
    25e0:	18fb      	adds	r3, r7, r3
    25e2:	781a      	ldrb	r2, [r3, #0]
    25e4:	231d      	movs	r3, #29
    25e6:	18fb      	adds	r3, r7, r3
    25e8:	3201      	adds	r2, #1
    25ea:	701a      	strb	r2, [r3, #0]
			break;
    25ec:	e017      	b.n	261e <_Z16playQuantumMatchi+0xe6>
			case 2:
			// Noughts wins
			bitmap = 'g';
    25ee:	231c      	movs	r3, #28
    25f0:	18fb      	adds	r3, r7, r3
    25f2:	2267      	movs	r2, #103	; 0x67
    25f4:	701a      	strb	r2, [r3, #0]
			noughtsScore++;
    25f6:	231f      	movs	r3, #31
    25f8:	18fb      	adds	r3, r7, r3
    25fa:	781a      	ldrb	r2, [r3, #0]
    25fc:	231f      	movs	r3, #31
    25fe:	18fb      	adds	r3, r7, r3
    2600:	3201      	adds	r2, #1
    2602:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    2604:	231d      	movs	r3, #29
    2606:	18fb      	adds	r3, r7, r3
    2608:	781a      	ldrb	r2, [r3, #0]
    260a:	231d      	movs	r3, #29
    260c:	18fb      	adds	r3, r7, r3
    260e:	3201      	adds	r2, #1
    2610:	701a      	strb	r2, [r3, #0]
			break;
    2612:	e004      	b.n	261e <_Z16playQuantumMatchi+0xe6>
			case 0:
			// Game is a draw
			bitmap = 'f';
    2614:	231c      	movs	r3, #28
    2616:	18fb      	adds	r3, r7, r3
    2618:	2266      	movs	r2, #102	; 0x66
    261a:	701a      	strb	r2, [r3, #0]
			break;
    261c:	46c0      	nop			; (mov r8, r8)
		}
		
		updateScore(noughtsScore, crossesScore);
    261e:	231f      	movs	r3, #31
    2620:	18fb      	adds	r3, r7, r3
    2622:	781a      	ldrb	r2, [r3, #0]
    2624:	231e      	movs	r3, #30
    2626:	18fb      	adds	r3, r7, r3
    2628:	781b      	ldrb	r3, [r3, #0]
    262a:	0019      	movs	r1, r3
    262c:	0010      	movs	r0, r2
    262e:	f7fe fd79 	bl	1124 <_Z11updateScoreii>
		
		// If there are still games to be played draw win banner,
		// otherwise draw end game screen
		uint8_t gamesToWin = (maxGames / 2) + 1;
    2632:	687b      	ldr	r3, [r7, #4]
    2634:	2b00      	cmp	r3, #0
    2636:	da00      	bge.n	263a <_Z16playQuantumMatchi+0x102>
    2638:	3301      	adds	r3, #1
    263a:	105b      	asrs	r3, r3, #1
    263c:	b2da      	uxtb	r2, r3
    263e:	231a      	movs	r3, #26
    2640:	18fb      	adds	r3, r7, r3
    2642:	3201      	adds	r2, #1
    2644:	701a      	strb	r2, [r3, #0]
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    2646:	231f      	movs	r3, #31
    2648:	18fb      	adds	r3, r7, r3
    264a:	781a      	ldrb	r2, [r3, #0]
    264c:	231a      	movs	r3, #26
    264e:	18fb      	adds	r3, r7, r3
    2650:	781b      	ldrb	r3, [r3, #0]
    2652:	429a      	cmp	r2, r3
    2654:	da1c      	bge.n	2690 <_Z16playQuantumMatchi+0x158>
    2656:	231e      	movs	r3, #30
    2658:	18fb      	adds	r3, r7, r3
    265a:	781a      	ldrb	r2, [r3, #0]
    265c:	231a      	movs	r3, #26
    265e:	18fb      	adds	r3, r7, r3
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	429a      	cmp	r2, r3
    2664:	da14      	bge.n	2690 <_Z16playQuantumMatchi+0x158>
			drawBitmap(bitmap, 0, 110);
    2666:	231c      	movs	r3, #28
    2668:	18fb      	adds	r3, r7, r3
    266a:	781b      	ldrb	r3, [r3, #0]
    266c:	226e      	movs	r2, #110	; 0x6e
    266e:	2100      	movs	r1, #0
    2670:	0018      	movs	r0, r3
    2672:	f7fd fdf7 	bl	264 <_Z10drawBitmapcss>
			while (true) if (touchScreen.touched()) break;
    2676:	4b3e      	ldr	r3, [pc, #248]	; (2770 <_Z16playQuantumMatchi+0x238>)
    2678:	0018      	movs	r0, r3
    267a:	f002 fc2d 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    267e:	0003      	movs	r3, r0
    2680:	1e5a      	subs	r2, r3, #1
    2682:	4193      	sbcs	r3, r2
    2684:	b2db      	uxtb	r3, r3
    2686:	2b00      	cmp	r3, #0
    2688:	d100      	bne.n	268c <_Z16playQuantumMatchi+0x154>
    268a:	e7f4      	b.n	2676 <_Z16playQuantumMatchi+0x13e>
    268c:	46c0      	nop			; (mov r8, r8)
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    268e:	e069      	b.n	2764 <_Z16playQuantumMatchi+0x22c>
			} else {
			if (crossesScore > noughtsScore) {
    2690:	231e      	movs	r3, #30
    2692:	18fb      	adds	r3, r7, r3
    2694:	781a      	ldrb	r2, [r3, #0]
    2696:	231f      	movs	r3, #31
    2698:	18fb      	adds	r3, r7, r3
    269a:	781b      	ldrb	r3, [r3, #0]
    269c:	429a      	cmp	r2, r3
    269e:	dd31      	ble.n	2704 <_Z16playQuantumMatchi+0x1cc>
				// Draw game-over, crosses wins
				drawBitmap('m', 0, 0);
    26a0:	2200      	movs	r2, #0
    26a2:	2100      	movs	r1, #0
    26a4:	206d      	movs	r0, #109	; 0x6d
    26a6:	f7fd fddd 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    26aa:	4b31      	ldr	r3, [pc, #196]	; (2770 <_Z16playQuantumMatchi+0x238>)
    26ac:	0018      	movs	r0, r3
    26ae:	f002 fc13 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    26b2:	0003      	movs	r3, r0
    26b4:	1e5a      	subs	r2, r3, #1
    26b6:	4193      	sbcs	r3, r2
    26b8:	b2db      	uxtb	r3, r3
    26ba:	2b00      	cmp	r3, #0
    26bc:	d020      	beq.n	2700 <_Z16playQuantumMatchi+0x1c8>
						TS_Point point = getPoint();
    26be:	2314      	movs	r3, #20
    26c0:	18fb      	adds	r3, r7, r3
    26c2:	0018      	movs	r0, r3
    26c4:	f7fe fcac 	bl	1020 <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    26c8:	2314      	movs	r3, #20
    26ca:	18fb      	adds	r3, r7, r3
    26cc:	2200      	movs	r2, #0
    26ce:	5e9b      	ldrsh	r3, [r3, r2]
    26d0:	2b16      	cmp	r3, #22
    26d2:	ddea      	ble.n	26aa <_Z16playQuantumMatchi+0x172>
    26d4:	2314      	movs	r3, #20
    26d6:	18fb      	adds	r3, r7, r3
    26d8:	2200      	movs	r2, #0
    26da:	5e9b      	ldrsh	r3, [r3, r2]
    26dc:	2bd7      	cmp	r3, #215	; 0xd7
    26de:	dce4      	bgt.n	26aa <_Z16playQuantumMatchi+0x172>
    26e0:	2314      	movs	r3, #20
    26e2:	18fb      	adds	r3, r7, r3
    26e4:	2202      	movs	r2, #2
    26e6:	5e9b      	ldrsh	r3, [r3, r2]
    26e8:	2bb9      	cmp	r3, #185	; 0xb9
    26ea:	ddde      	ble.n	26aa <_Z16playQuantumMatchi+0x172>
    26ec:	2314      	movs	r3, #20
    26ee:	18fb      	adds	r3, r7, r3
    26f0:	2202      	movs	r2, #2
    26f2:	5e9a      	ldrsh	r2, [r3, r2]
    26f4:	2384      	movs	r3, #132	; 0x84
    26f6:	005b      	lsls	r3, r3, #1
    26f8:	429a      	cmp	r2, r3
    26fa:	dcd6      	bgt.n	26aa <_Z16playQuantumMatchi+0x172>
							// They pressed the start button
							goto exit;
    26fc:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
	exit:
	return;
    26fe:	e032      	b.n	2766 <_Z16playQuantumMatchi+0x22e>
						continue;
    2700:	46c0      	nop			; (mov r8, r8)
				}
    2702:	e7d2      	b.n	26aa <_Z16playQuantumMatchi+0x172>
				drawBitmap('n', 0, 0);
    2704:	2200      	movs	r2, #0
    2706:	2100      	movs	r1, #0
    2708:	206e      	movs	r0, #110	; 0x6e
    270a:	f7fd fdab 	bl	264 <_Z10drawBitmapcss>
					if (touchScreen.touched()) {
    270e:	4b18      	ldr	r3, [pc, #96]	; (2770 <_Z16playQuantumMatchi+0x238>)
    2710:	0018      	movs	r0, r3
    2712:	f002 fbe1 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    2716:	0003      	movs	r3, r0
    2718:	1e5a      	subs	r2, r3, #1
    271a:	4193      	sbcs	r3, r2
    271c:	b2db      	uxtb	r3, r3
    271e:	2b00      	cmp	r3, #0
    2720:	d0f5      	beq.n	270e <_Z16playQuantumMatchi+0x1d6>
						TS_Point point = getPoint();
    2722:	230c      	movs	r3, #12
    2724:	18fb      	adds	r3, r7, r3
    2726:	0018      	movs	r0, r3
    2728:	f7fe fc7a 	bl	1020 <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    272c:	230c      	movs	r3, #12
    272e:	18fb      	adds	r3, r7, r3
    2730:	2200      	movs	r2, #0
    2732:	5e9b      	ldrsh	r3, [r3, r2]
    2734:	2b16      	cmp	r3, #22
    2736:	dd13      	ble.n	2760 <_Z16playQuantumMatchi+0x228>
    2738:	230c      	movs	r3, #12
    273a:	18fb      	adds	r3, r7, r3
    273c:	2200      	movs	r2, #0
    273e:	5e9b      	ldrsh	r3, [r3, r2]
    2740:	2bd7      	cmp	r3, #215	; 0xd7
    2742:	dc0d      	bgt.n	2760 <_Z16playQuantumMatchi+0x228>
    2744:	230c      	movs	r3, #12
    2746:	18fb      	adds	r3, r7, r3
    2748:	2202      	movs	r2, #2
    274a:	5e9b      	ldrsh	r3, [r3, r2]
    274c:	2bb9      	cmp	r3, #185	; 0xb9
    274e:	dd07      	ble.n	2760 <_Z16playQuantumMatchi+0x228>
    2750:	230c      	movs	r3, #12
    2752:	18fb      	adds	r3, r7, r3
    2754:	2202      	movs	r2, #2
    2756:	5e9a      	ldrsh	r2, [r3, r2]
    2758:	2384      	movs	r3, #132	; 0x84
    275a:	005b      	lsls	r3, r3, #1
    275c:	429a      	cmp	r2, r3
    275e:	dd02      	ble.n	2766 <_Z16playQuantumMatchi+0x22e>
							continue;
    2760:	46c0      	nop			; (mov r8, r8)
				}
    2762:	e7d4      	b.n	270e <_Z16playQuantumMatchi+0x1d6>
	while (gamesPlayed < maxGames) {
    2764:	e711      	b.n	258a <_Z16playQuantumMatchi+0x52>
	return;
    2766:	46c0      	nop			; (mov r8, r8)
}
    2768:	46bd      	mov	sp, r7
    276a:	b009      	add	sp, #36	; 0x24
    276c:	bd90      	pop	{r4, r7, pc}
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	200001b4 	.word	0x200001b4

00002774 <setup>:

void setup() {
    2774:	b580      	push	{r7, lr}
    2776:	af00      	add	r7, sp, #0
	
	Serial.begin(9600);
    2778:	2396      	movs	r3, #150	; 0x96
    277a:	019a      	lsls	r2, r3, #6
    277c:	4b13      	ldr	r3, [pc, #76]	; (27cc <setup+0x58>)
    277e:	0011      	movs	r1, r2
    2780:	0018      	movs	r0, r3
    2782:	f000 fbfd 	bl	2f80 <_ZN4Uart5beginEm>

	tftDisplay.begin();
    2786:	4b12      	ldr	r3, [pc, #72]	; (27d0 <setup+0x5c>)
    2788:	2100      	movs	r1, #0
    278a:	0018      	movs	r0, r3
    278c:	f003 f8a6 	bl	58dc <_ZN16Adafruit_ILI93415beginEm>

	if (!touchScreen.begin()) {
    2790:	4b10      	ldr	r3, [pc, #64]	; (27d4 <setup+0x60>)
    2792:	2180      	movs	r1, #128	; 0x80
    2794:	0018      	movs	r0, r3
    2796:	f002 fbbd 	bl	4f14 <_ZN15Adafruit_FT62065beginEh>
    279a:	0003      	movs	r3, r0
    279c:	001a      	movs	r2, r3
    279e:	2301      	movs	r3, #1
    27a0:	4053      	eors	r3, r2
    27a2:	b2db      	uxtb	r3, r3
    27a4:	2b00      	cmp	r3, #0
    27a6:	d000      	beq.n	27aa <setup+0x36>
		// Couldn't start FT6206 touchscreen controller
		// Driver might not have been found
		while (true); // Nothing will work so stop
    27a8:	e7fe      	b.n	27a8 <setup+0x34>
	}

	if (!SD.begin(SD_CS)) {
    27aa:	4b0b      	ldr	r3, [pc, #44]	; (27d8 <setup+0x64>)
    27ac:	2104      	movs	r1, #4
    27ae:	0018      	movs	r0, r3
    27b0:	f00a f81e 	bl	c7f0 <_ZN5SDLib7SDClass5beginEh>
    27b4:	0003      	movs	r3, r0
    27b6:	001a      	movs	r2, r3
    27b8:	2301      	movs	r3, #1
    27ba:	4053      	eors	r3, r2
    27bc:	b2db      	uxtb	r3, r3
    27be:	2b00      	cmp	r3, #0
    27c0:	d000      	beq.n	27c4 <setup+0x50>
		// Failed to initialise SD card
		// Usually because one isn't connected
		// Could also happen if not formatted as FAT or FAT32
		while (true); // Nothing will be drawn on screen so stop
    27c2:	e7fe      	b.n	27c2 <setup+0x4e>
	}
}
    27c4:	46c0      	nop			; (mov r8, r8)
    27c6:	46bd      	mov	sp, r7
    27c8:	bd80      	pop	{r7, pc}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	20000c58 	.word	0x20000c58
    27d0:	20000150 	.word	0x20000150
    27d4:	200001b4 	.word	0x200001b4
    27d8:	2000078c 	.word	0x2000078c

000027dc <loop>:

void loop() {
    27dc:	b580      	push	{r7, lr}
    27de:	b08c      	sub	sp, #48	; 0x30
    27e0:	af00      	add	r7, sp, #0
	// Menu screen, in loop() so will run after each game

	uint8_t maxGames = 1;
    27e2:	232f      	movs	r3, #47	; 0x2f
    27e4:	18fb      	adds	r3, r7, r3
    27e6:	2201      	movs	r2, #1
    27e8:	701a      	strb	r2, [r3, #0]
	drawBitmap('l', 0, 0);
    27ea:	2200      	movs	r2, #0
    27ec:	2100      	movs	r1, #0
    27ee:	206c      	movs	r0, #108	; 0x6c
    27f0:	f7fd fd38 	bl	264 <_Z10drawBitmapcss>
	drawBitmap(((String) maxGames).charAt(0), 173, 115);
    27f4:	232f      	movs	r3, #47	; 0x2f
    27f6:	18fb      	adds	r3, r7, r3
    27f8:	7819      	ldrb	r1, [r3, #0]
    27fa:	2308      	movs	r3, #8
    27fc:	18fb      	adds	r3, r7, r3
    27fe:	220a      	movs	r2, #10
    2800:	0018      	movs	r0, r3
    2802:	f002 fa7f 	bl	4d04 <_ZN6StringC1Ehh>
    2806:	2308      	movs	r3, #8
    2808:	18fb      	adds	r3, r7, r3
    280a:	2100      	movs	r1, #0
    280c:	0018      	movs	r0, r3
    280e:	f002 fae5 	bl	4ddc <_ZNK6String6charAtEj>
    2812:	0003      	movs	r3, r0
    2814:	2273      	movs	r2, #115	; 0x73
    2816:	21ad      	movs	r1, #173	; 0xad
    2818:	0018      	movs	r0, r3
    281a:	f7fd fd23 	bl	264 <_Z10drawBitmapcss>
    281e:	2308      	movs	r3, #8
    2820:	18fb      	adds	r3, r7, r3
    2822:	0018      	movs	r0, r3
    2824:	f002 fad2 	bl	4dcc <_ZN6StringD1Ev>
	boolean quantumMatch;

	while (true) {
		if (touchScreen.touched()) {
    2828:	4b6b      	ldr	r3, [pc, #428]	; (29d8 <loop+0x1fc>)
    282a:	0018      	movs	r0, r3
    282c:	f002 fb54 	bl	4ed8 <_ZN15Adafruit_FT62067touchedEv>
    2830:	0003      	movs	r3, r0
    2832:	1e5a      	subs	r2, r3, #1
    2834:	4193      	sbcs	r3, r2
    2836:	b2db      	uxtb	r3, r3
    2838:	2b00      	cmp	r3, #0
    283a:	d100      	bne.n	283e <loop+0x62>
    283c:	e0b3      	b.n	29a6 <loop+0x1ca>
			TS_Point point = getPoint();
    283e:	003b      	movs	r3, r7
    2840:	0018      	movs	r0, r3
    2842:	f7fe fbed 	bl	1020 <_Z8getPointv>
			if (point.x > 20 && point.x < 220 && point.y > 240 && point.y < 315) {
    2846:	003b      	movs	r3, r7
    2848:	2200      	movs	r2, #0
    284a:	5e9b      	ldrsh	r3, [r3, r2]
    284c:	2b14      	cmp	r3, #20
    284e:	dd15      	ble.n	287c <loop+0xa0>
    2850:	003b      	movs	r3, r7
    2852:	2200      	movs	r2, #0
    2854:	5e9b      	ldrsh	r3, [r3, r2]
    2856:	2bdb      	cmp	r3, #219	; 0xdb
    2858:	dc10      	bgt.n	287c <loop+0xa0>
    285a:	003b      	movs	r3, r7
    285c:	2202      	movs	r2, #2
    285e:	5e9b      	ldrsh	r3, [r3, r2]
    2860:	2bf0      	cmp	r3, #240	; 0xf0
    2862:	dd0b      	ble.n	287c <loop+0xa0>
    2864:	003b      	movs	r3, r7
    2866:	2202      	movs	r2, #2
    2868:	5e9a      	ldrsh	r2, [r3, r2]
    286a:	239d      	movs	r3, #157	; 0x9d
    286c:	005b      	lsls	r3, r3, #1
    286e:	429a      	cmp	r2, r3
    2870:	dc04      	bgt.n	287c <loop+0xa0>
				// They pressed the quantum button
				quantumMatch = true;
    2872:	232e      	movs	r3, #46	; 0x2e
    2874:	18fb      	adds	r3, r7, r3
    2876:	2201      	movs	r2, #1
    2878:	701a      	strb	r2, [r3, #0]
				break;
    287a:	e08e      	b.n	299a <loop+0x1be>
			} else if (point.x > 20 && point.x < 220 && point.y > 170 && point.y < 241) {
    287c:	003b      	movs	r3, r7
    287e:	2200      	movs	r2, #0
    2880:	5e9b      	ldrsh	r3, [r3, r2]
    2882:	2b14      	cmp	r3, #20
    2884:	dd13      	ble.n	28ae <loop+0xd2>
    2886:	003b      	movs	r3, r7
    2888:	2200      	movs	r2, #0
    288a:	5e9b      	ldrsh	r3, [r3, r2]
    288c:	2bdb      	cmp	r3, #219	; 0xdb
    288e:	dc0e      	bgt.n	28ae <loop+0xd2>
    2890:	003b      	movs	r3, r7
    2892:	2202      	movs	r2, #2
    2894:	5e9b      	ldrsh	r3, [r3, r2]
    2896:	2baa      	cmp	r3, #170	; 0xaa
    2898:	dd09      	ble.n	28ae <loop+0xd2>
    289a:	003b      	movs	r3, r7
    289c:	2202      	movs	r2, #2
    289e:	5e9b      	ldrsh	r3, [r3, r2]
    28a0:	2bf0      	cmp	r3, #240	; 0xf0
    28a2:	dc04      	bgt.n	28ae <loop+0xd2>
				// They pressed the classic button
				quantumMatch = false;
    28a4:	232e      	movs	r3, #46	; 0x2e
    28a6:	18fb      	adds	r3, r7, r3
    28a8:	2200      	movs	r2, #0
    28aa:	701a      	strb	r2, [r3, #0]
				break;
    28ac:	e075      	b.n	299a <loop+0x1be>
			} else if (point.x > 105 && point.x < 181 && point.y > 90 && point.y < 171) {
    28ae:	003b      	movs	r3, r7
    28b0:	2200      	movs	r2, #0
    28b2:	5e9b      	ldrsh	r3, [r3, r2]
    28b4:	2b69      	cmp	r3, #105	; 0x69
    28b6:	dd35      	ble.n	2924 <loop+0x148>
    28b8:	003b      	movs	r3, r7
    28ba:	2200      	movs	r2, #0
    28bc:	5e9b      	ldrsh	r3, [r3, r2]
    28be:	2bb4      	cmp	r3, #180	; 0xb4
    28c0:	dc30      	bgt.n	2924 <loop+0x148>
    28c2:	003b      	movs	r3, r7
    28c4:	2202      	movs	r2, #2
    28c6:	5e9b      	ldrsh	r3, [r3, r2]
    28c8:	2b5a      	cmp	r3, #90	; 0x5a
    28ca:	dd2b      	ble.n	2924 <loop+0x148>
    28cc:	003b      	movs	r3, r7
    28ce:	2202      	movs	r2, #2
    28d0:	5e9b      	ldrsh	r3, [r3, r2]
    28d2:	2baa      	cmp	r3, #170	; 0xaa
    28d4:	dc26      	bgt.n	2924 <loop+0x148>
				// They pressed the left "best of:" button
				if (maxGames != 1) {
    28d6:	232f      	movs	r3, #47	; 0x2f
    28d8:	18fb      	adds	r3, r7, r3
    28da:	781b      	ldrb	r3, [r3, #0]
    28dc:	2b01      	cmp	r3, #1
    28de:	d064      	beq.n	29aa <loop+0x1ce>
					maxGames -= 2;
    28e0:	232f      	movs	r3, #47	; 0x2f
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	222f      	movs	r2, #47	; 0x2f
    28e6:	18ba      	adds	r2, r7, r2
    28e8:	7812      	ldrb	r2, [r2, #0]
    28ea:	3a02      	subs	r2, #2
    28ec:	701a      	strb	r2, [r3, #0]
					// Update score
					drawBitmap(((String) maxGames).charAt(0), 173, 115);
    28ee:	232f      	movs	r3, #47	; 0x2f
    28f0:	18fb      	adds	r3, r7, r3
    28f2:	7819      	ldrb	r1, [r3, #0]
    28f4:	2314      	movs	r3, #20
    28f6:	18fb      	adds	r3, r7, r3
    28f8:	220a      	movs	r2, #10
    28fa:	0018      	movs	r0, r3
    28fc:	f002 fa02 	bl	4d04 <_ZN6StringC1Ehh>
    2900:	2314      	movs	r3, #20
    2902:	18fb      	adds	r3, r7, r3
    2904:	2100      	movs	r1, #0
    2906:	0018      	movs	r0, r3
    2908:	f002 fa68 	bl	4ddc <_ZNK6String6charAtEj>
    290c:	0003      	movs	r3, r0
    290e:	2273      	movs	r2, #115	; 0x73
    2910:	21ad      	movs	r1, #173	; 0xad
    2912:	0018      	movs	r0, r3
    2914:	f7fd fca6 	bl	264 <_Z10drawBitmapcss>
    2918:	2314      	movs	r3, #20
    291a:	18fb      	adds	r3, r7, r3
    291c:	0018      	movs	r0, r3
    291e:	f002 fa55 	bl	4dcc <_ZN6StringD1Ev>
				}
				continue;
    2922:	e042      	b.n	29aa <loop+0x1ce>
			} else if (point.x > 180 && point.x < 241 && point.y > 90 && point.y < 171) {
    2924:	003b      	movs	r3, r7
    2926:	2200      	movs	r2, #0
    2928:	5e9b      	ldrsh	r3, [r3, r2]
    292a:	2bb4      	cmp	r3, #180	; 0xb4
    292c:	dd3f      	ble.n	29ae <loop+0x1d2>
    292e:	003b      	movs	r3, r7
    2930:	2200      	movs	r2, #0
    2932:	5e9b      	ldrsh	r3, [r3, r2]
    2934:	2bf0      	cmp	r3, #240	; 0xf0
    2936:	dc3a      	bgt.n	29ae <loop+0x1d2>
    2938:	003b      	movs	r3, r7
    293a:	2202      	movs	r2, #2
    293c:	5e9b      	ldrsh	r3, [r3, r2]
    293e:	2b5a      	cmp	r3, #90	; 0x5a
    2940:	dd35      	ble.n	29ae <loop+0x1d2>
    2942:	003b      	movs	r3, r7
    2944:	2202      	movs	r2, #2
    2946:	5e9b      	ldrsh	r3, [r3, r2]
    2948:	2baa      	cmp	r3, #170	; 0xaa
    294a:	dc30      	bgt.n	29ae <loop+0x1d2>
				// They pressed the left "best of:" button
				if (maxGames != 9) {
    294c:	232f      	movs	r3, #47	; 0x2f
    294e:	18fb      	adds	r3, r7, r3
    2950:	781b      	ldrb	r3, [r3, #0]
    2952:	2b09      	cmp	r3, #9
    2954:	d02d      	beq.n	29b2 <loop+0x1d6>
					maxGames += 2;
    2956:	232f      	movs	r3, #47	; 0x2f
    2958:	18fb      	adds	r3, r7, r3
    295a:	222f      	movs	r2, #47	; 0x2f
    295c:	18ba      	adds	r2, r7, r2
    295e:	7812      	ldrb	r2, [r2, #0]
    2960:	3202      	adds	r2, #2
    2962:	701a      	strb	r2, [r3, #0]
					// Update score
					drawBitmap(((String) maxGames).charAt(0), 173, 115);
    2964:	232f      	movs	r3, #47	; 0x2f
    2966:	18fb      	adds	r3, r7, r3
    2968:	7819      	ldrb	r1, [r3, #0]
    296a:	2320      	movs	r3, #32
    296c:	18fb      	adds	r3, r7, r3
    296e:	220a      	movs	r2, #10
    2970:	0018      	movs	r0, r3
    2972:	f002 f9c7 	bl	4d04 <_ZN6StringC1Ehh>
    2976:	2320      	movs	r3, #32
    2978:	18fb      	adds	r3, r7, r3
    297a:	2100      	movs	r1, #0
    297c:	0018      	movs	r0, r3
    297e:	f002 fa2d 	bl	4ddc <_ZNK6String6charAtEj>
    2982:	0003      	movs	r3, r0
    2984:	2273      	movs	r2, #115	; 0x73
    2986:	21ad      	movs	r1, #173	; 0xad
    2988:	0018      	movs	r0, r3
    298a:	f7fd fc6b 	bl	264 <_Z10drawBitmapcss>
    298e:	2320      	movs	r3, #32
    2990:	18fb      	adds	r3, r7, r3
    2992:	0018      	movs	r0, r3
    2994:	f002 fa1a 	bl	4dcc <_ZN6StringD1Ev>
				}
				continue;
    2998:	e00b      	b.n	29b2 <loop+0x1d6>
		} else {
			continue;
		}
	}
	
	if (quantumMatch) {
    299a:	232e      	movs	r3, #46	; 0x2e
    299c:	18fb      	adds	r3, r7, r3
    299e:	781b      	ldrb	r3, [r3, #0]
    29a0:	2b00      	cmp	r3, #0
    29a2:	d108      	bne.n	29b6 <loop+0x1da>
    29a4:	e00e      	b.n	29c4 <loop+0x1e8>
			continue;
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	e73e      	b.n	2828 <loop+0x4c>
				continue;
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	e73c      	b.n	2828 <loop+0x4c>
				continue;
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	e73a      	b.n	2828 <loop+0x4c>
				continue;
    29b2:	46c0      	nop			; (mov r8, r8)
	}
    29b4:	e738      	b.n	2828 <loop+0x4c>
		playQuantumMatch(maxGames);
    29b6:	232f      	movs	r3, #47	; 0x2f
    29b8:	18fb      	adds	r3, r7, r3
    29ba:	781b      	ldrb	r3, [r3, #0]
    29bc:	0018      	movs	r0, r3
    29be:	f7ff fdbb 	bl	2538 <_Z16playQuantumMatchi>
	} else {
		playMatch(maxGames);
	}
    29c2:	e005      	b.n	29d0 <loop+0x1f4>
		playMatch(maxGames);
    29c4:	232f      	movs	r3, #47	; 0x2f
    29c6:	18fb      	adds	r3, r7, r3
    29c8:	781b      	ldrb	r3, [r3, #0]
    29ca:	0018      	movs	r0, r3
    29cc:	f7ff fc98 	bl	2300 <_Z9playMatchi>
    29d0:	46c0      	nop			; (mov r8, r8)
    29d2:	46bd      	mov	sp, r7
    29d4:	b00c      	add	sp, #48	; 0x30
    29d6:	bd80      	pop	{r7, pc}
    29d8:	200001b4 	.word	0x200001b4

000029dc <_Z41__static_initialization_and_destruction_0ii>:
    29dc:	b580      	push	{r7, lr}
    29de:	b082      	sub	sp, #8
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
    29e4:	6039      	str	r1, [r7, #0]
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	2b01      	cmp	r3, #1
    29ea:	d10e      	bne.n	2a0a <_Z41__static_initialization_and_destruction_0ii+0x2e>
    29ec:	683b      	ldr	r3, [r7, #0]
    29ee:	4a09      	ldr	r2, [pc, #36]	; (2a14 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    29f0:	4293      	cmp	r3, r2
    29f2:	d10a      	bne.n	2a0a <_Z41__static_initialization_and_destruction_0ii+0x2e>
Adafruit_ILI9341 tftDisplay = Adafruit_ILI9341(tftDisplay_CS, tftDisplay_DC);
    29f4:	2301      	movs	r3, #1
    29f6:	425b      	negs	r3, r3
    29f8:	4807      	ldr	r0, [pc, #28]	; (2a18 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    29fa:	2209      	movs	r2, #9
    29fc:	210a      	movs	r1, #10
    29fe:	f002 fe77 	bl	56f0 <_ZN16Adafruit_ILI9341C1Eaaa>
Adafruit_FT6206 touchScreen = Adafruit_FT6206();
    2a02:	4b06      	ldr	r3, [pc, #24]	; (2a1c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2a04:	0018      	movs	r0, r3
    2a06:	f002 f9f3 	bl	4df0 <_ZN15Adafruit_FT6206C1Ev>
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	46bd      	mov	sp, r7
    2a0e:	b002      	add	sp, #8
    2a10:	bd80      	pop	{r7, pc}
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	0000ffff 	.word	0x0000ffff
    2a18:	20000150 	.word	0x20000150
    2a1c:	200001b4 	.word	0x200001b4

00002a20 <_GLOBAL__sub_I_tftDisplay>:
    2a20:	b580      	push	{r7, lr}
    2a22:	af00      	add	r7, sp, #0
    2a24:	4b03      	ldr	r3, [pc, #12]	; (2a34 <_GLOBAL__sub_I_tftDisplay+0x14>)
    2a26:	0019      	movs	r1, r3
    2a28:	2001      	movs	r0, #1
    2a2a:	f7ff ffd7 	bl	29dc <_Z41__static_initialization_and_destruction_0ii>
    2a2e:	46bd      	mov	sp, r7
    2a30:	bd80      	pop	{r7, pc}
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	0000ffff 	.word	0x0000ffff

00002a38 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    2a38:	be03      	bkpt	0x0003
    2a3a:	e7fe      	b.n	2a3a <Dummy_Handler+0x2>

00002a3c <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    2a3c:	4b03      	ldr	r3, [pc, #12]	; (2a4c <USB_Handler+0x10>)
{
    2a3e:	b510      	push	{r4, lr}
  if (usb_isr)
    2a40:	681b      	ldr	r3, [r3, #0]
    2a42:	2b00      	cmp	r3, #0
    2a44:	d000      	beq.n	2a48 <USB_Handler+0xc>
    usb_isr();
    2a46:	4798      	blx	r3
}
    2a48:	bd10      	pop	{r4, pc}
    2a4a:	46c0      	nop			; (mov r8, r8)
    2a4c:	200001c4 	.word	0x200001c4

00002a50 <Reset_Handler>:
{
    2a50:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2a52:	4b12      	ldr	r3, [pc, #72]	; (2a9c <Reset_Handler+0x4c>)
    2a54:	4c12      	ldr	r4, [pc, #72]	; (2aa0 <Reset_Handler+0x50>)
    2a56:	429c      	cmp	r4, r3
    2a58:	d01b      	beq.n	2a92 <Reset_Handler+0x42>
    2a5a:	4d12      	ldr	r5, [pc, #72]	; (2aa4 <Reset_Handler+0x54>)
    2a5c:	42a5      	cmp	r5, r4
    2a5e:	d018      	beq.n	2a92 <Reset_Handler+0x42>
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2a60:	429c      	cmp	r4, r3
    2a62:	d20a      	bcs.n	2a7a <Reset_Handler+0x2a>
      *pDest = *pSrc;
    2a64:	43e2      	mvns	r2, r4
    2a66:	18d2      	adds	r2, r2, r3
    2a68:	0892      	lsrs	r2, r2, #2
    2a6a:	3201      	adds	r2, #1
    2a6c:	0092      	lsls	r2, r2, #2
    2a6e:	0029      	movs	r1, r5
    2a70:	0020      	movs	r0, r4
    2a72:	f00d ff7a 	bl	1096a <memcpy>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2a76:	42a5      	cmp	r5, r4
    2a78:	d00b      	beq.n	2a92 <Reset_Handler+0x42>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2a7a:	480b      	ldr	r0, [pc, #44]	; (2aa8 <Reset_Handler+0x58>)
    2a7c:	4b0b      	ldr	r3, [pc, #44]	; (2aac <Reset_Handler+0x5c>)
    2a7e:	4298      	cmp	r0, r3
    2a80:	d207      	bcs.n	2a92 <Reset_Handler+0x42>
      *pDest = 0;
    2a82:	43c2      	mvns	r2, r0
    2a84:	18d2      	adds	r2, r2, r3
    2a86:	0892      	lsrs	r2, r2, #2
    2a88:	3201      	adds	r2, #1
    2a8a:	0092      	lsls	r2, r2, #2
    2a8c:	2100      	movs	r1, #0
    2a8e:	f00d ff75 	bl	1097c <memset>
  SystemInit();
    2a92:	f000 f8a9 	bl	2be8 <SystemInit>
  main();
    2a96:	f000 f83d 	bl	2b14 <main>
    2a9a:	e7fe      	b.n	2a9a <Reset_Handler+0x4a>
    2a9c:	20000134 	.word	0x20000134
    2aa0:	20000000 	.word	0x20000000
    2aa4:	00011860 	.word	0x00011860
    2aa8:	20000134 	.word	0x20000134
    2aac:	20000e20 	.word	0x20000e20

00002ab0 <SysTick_Handler>:
{
    2ab0:	b510      	push	{r4, lr}
  if (sysTickHook())
    2ab2:	f000 f82b 	bl	2b0c <sysTickHook>
    2ab6:	2800      	cmp	r0, #0
    2ab8:	d101      	bne.n	2abe <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    2aba:	f000 f81b 	bl	2af4 <SysTick_DefaultHandler>
}
    2abe:	bd10      	pop	{r4, pc}

00002ac0 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
    2ac0:	4b01      	ldr	r3, [pc, #4]	; (2ac8 <USB_SetHandler+0x8>)
    2ac2:	6018      	str	r0, [r3, #0]
}
    2ac4:	4770      	bx	lr
    2ac6:	46c0      	nop			; (mov r8, r8)
    2ac8:	200001c4 	.word	0x200001c4

00002acc <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    2acc:	4b01      	ldr	r3, [pc, #4]	; (2ad4 <millis+0x8>)
    2ace:	6818      	ldr	r0, [r3, #0]
}
    2ad0:	4770      	bx	lr
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	200001c8 	.word	0x200001c8

00002ad8 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
    2ad8:	b570      	push	{r4, r5, r6, lr}
    2ada:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
    2adc:	d007      	beq.n	2aee <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
    2ade:	4d04      	ldr	r5, [pc, #16]	; (2af0 <delay+0x18>)
    2ae0:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
    2ae2:	f000 f811 	bl	2b08 <yield>
  } while ( _ulTickCount - start < ms ) ;
    2ae6:	682b      	ldr	r3, [r5, #0]
    2ae8:	1b9b      	subs	r3, r3, r6
    2aea:	429c      	cmp	r4, r3
    2aec:	d8f9      	bhi.n	2ae2 <delay+0xa>
}
    2aee:	bd70      	pop	{r4, r5, r6, pc}
    2af0:	200001c8 	.word	0x200001c8

00002af4 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    2af4:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
    2af6:	4a03      	ldr	r2, [pc, #12]	; (2b04 <SysTick_DefaultHandler+0x10>)
    2af8:	6813      	ldr	r3, [r2, #0]
    2afa:	3301      	adds	r3, #1
    2afc:	6013      	str	r3, [r2, #0]
  tickReset();
    2afe:	f000 f839 	bl	2b74 <tickReset>
}
    2b02:	bd10      	pop	{r4, pc}
    2b04:	200001c8 	.word	0x200001c8

00002b08 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    2b08:	4770      	bx	lr
    2b0a:	46c0      	nop			; (mov r8, r8)

00002b0c <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    2b0c:	2000      	movs	r0, #0
    2b0e:	4770      	bx	lr

00002b10 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2b10:	4770      	bx	lr
    2b12:	46c0      	nop			; (mov r8, r8)

00002b14 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    2b14:	b510      	push	{r4, lr}
  init();
    2b16:	f001 ff4b 	bl	49b0 <init>

  __libc_init_array();
    2b1a:	f00d fedf 	bl	108dc <__libc_init_array>

  initVariant();
    2b1e:	f7ff fff7 	bl	2b10 <_Z11initVariantv>

  delay(1);
    2b22:	2001      	movs	r0, #1
    2b24:	f7ff ffd8 	bl	2ad8 <delay>
#if defined(USBCON)
  USBDevice.init();
    2b28:	4c09      	ldr	r4, [pc, #36]	; (2b50 <main+0x3c>)
    2b2a:	0020      	movs	r0, r4
    2b2c:	f001 f808 	bl	3b40 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    2b30:	0020      	movs	r0, r4
    2b32:	f001 f8b9 	bl	3ca8 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    2b36:	f7ff fe1d 	bl	2774 <setup>
    2b3a:	4c06      	ldr	r4, [pc, #24]	; (2b54 <main+0x40>)
    2b3c:	2c00      	cmp	r4, #0
    2b3e:	d102      	bne.n	2b46 <main+0x32>

  for (;;)
  {
    loop();
    2b40:	f7ff fe4c 	bl	27dc <loop>
    2b44:	e7fc      	b.n	2b40 <main+0x2c>
    2b46:	f7ff fe49 	bl	27dc <loop>
    if (serialEventRun) serialEventRun();
    2b4a:	e000      	b.n	2b4e <main+0x3a>
    2b4c:	bf00      	nop
    2b4e:	e7f5      	b.n	2b3c <main+0x28>
    2b50:	200001cc 	.word	0x200001cc
    2b54:	00000000 	.word	0x00000000

00002b58 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    2b58:	4b01      	ldr	r3, [pc, #4]	; (2b60 <initiateReset+0x8>)
    2b5a:	6018      	str	r0, [r3, #0]
}
    2b5c:	4770      	bx	lr
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	2000001c 	.word	0x2000001c

00002b64 <cancelReset>:

void cancelReset() {
	ticks = -1;
    2b64:	2201      	movs	r2, #1
    2b66:	4b02      	ldr	r3, [pc, #8]	; (2b70 <cancelReset+0xc>)
    2b68:	4252      	negs	r2, r2
    2b6a:	601a      	str	r2, [r3, #0]
}
    2b6c:	4770      	bx	lr
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	2000001c 	.word	0x2000001c

00002b74 <tickReset>:

void tickReset() {
	if (ticks == -1)
    2b74:	4a15      	ldr	r2, [pc, #84]	; (2bcc <tickReset+0x58>)
    2b76:	6813      	ldr	r3, [r2, #0]
    2b78:	1c59      	adds	r1, r3, #1
    2b7a:	d003      	beq.n	2b84 <tickReset+0x10>
		return;
	ticks--;
    2b7c:	3b01      	subs	r3, #1
    2b7e:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    2b80:	2b00      	cmp	r3, #0
    2b82:	d000      	beq.n	2b86 <tickReset+0x12>
		banzai();
}
    2b84:	4770      	bx	lr
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2b86:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
    2b88:	4b11      	ldr	r3, [pc, #68]	; (2bd0 <tickReset+0x5c>)
    2b8a:	4a12      	ldr	r2, [pc, #72]	; (2bd4 <tickReset+0x60>)
    2b8c:	3304      	adds	r3, #4
    2b8e:	4293      	cmp	r3, r2
    2b90:	d913      	bls.n	2bba <tickReset+0x46>
	while (!nvmReady())
    2b92:	2101      	movs	r1, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    2b94:	4a10      	ldr	r2, [pc, #64]	; (2bd8 <tickReset+0x64>)
    2b96:	7d10      	ldrb	r0, [r2, #20]
	while (!nvmReady())
    2b98:	4201      	tst	r1, r0
    2b9a:	d0fc      	beq.n	2b96 <tickReset+0x22>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    2b9c:	2120      	movs	r1, #32
    2b9e:	8b10      	ldrh	r0, [r2, #24]
    2ba0:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    2ba2:	089b      	lsrs	r3, r3, #2
    2ba4:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    2ba6:	4301      	orrs	r1, r0
    2ba8:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    2baa:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    2bac:	4b0b      	ldr	r3, [pc, #44]	; (2bdc <tickReset+0x68>)
    2bae:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
    2bb0:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    2bb2:	4a09      	ldr	r2, [pc, #36]	; (2bd8 <tickReset+0x64>)
    2bb4:	7d11      	ldrb	r1, [r2, #20]
	while (!nvmReady())
    2bb6:	420b      	tst	r3, r1
    2bb8:	d0fc      	beq.n	2bb4 <tickReset+0x40>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2bba:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    2bbe:	4a08      	ldr	r2, [pc, #32]	; (2be0 <tickReset+0x6c>)
    2bc0:	4b08      	ldr	r3, [pc, #32]	; (2be4 <tickReset+0x70>)
    2bc2:	60da      	str	r2, [r3, #12]
    2bc4:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2bc8:	46c0      	nop			; (mov r8, r8)
    2bca:	e7fd      	b.n	2bc8 <tickReset+0x54>
    2bcc:	2000001c 	.word	0x2000001c
    2bd0:	00000000 	.word	0x00000000
    2bd4:	00000203 	.word	0x00000203
    2bd8:	41004000 	.word	0x41004000
    2bdc:	ffffa502 	.word	0xffffa502
    2be0:	05fa0004 	.word	0x05fa0004
    2be4:	e000ed00 	.word	0xe000ed00

00002be8 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    2be8:	211e      	movs	r1, #30
    2bea:	4a4f      	ldr	r2, [pc, #316]	; (2d28 <SystemInit+0x140>)
    2bec:	6853      	ldr	r3, [r2, #4]
    2bee:	438b      	bics	r3, r1
    2bf0:	391c      	subs	r1, #28
    2bf2:	430b      	orrs	r3, r1
    2bf4:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    2bf6:	4a4d      	ldr	r2, [pc, #308]	; (2d2c <SystemInit+0x144>)
    2bf8:	3106      	adds	r1, #6
    2bfa:	6993      	ldr	r3, [r2, #24]
    2bfc:	430b      	orrs	r3, r1
  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    2bfe:	2102      	movs	r1, #2
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    2c00:	6193      	str	r3, [r2, #24]
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    2c02:	4a4b      	ldr	r2, [pc, #300]	; (2d30 <SystemInit+0x148>)
    2c04:	4b4b      	ldr	r3, [pc, #300]	; (2d34 <SystemInit+0x14c>)
    2c06:	8293      	strh	r3, [r2, #20]
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    2c08:	8a93      	ldrh	r3, [r2, #20]
    2c0a:	430b      	orrs	r3, r1

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    2c0c:	2102      	movs	r1, #2
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    2c0e:	8293      	strh	r3, [r2, #20]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    2c10:	68d3      	ldr	r3, [r2, #12]
    2c12:	4219      	tst	r1, r3
    2c14:	d0fc      	beq.n	2c10 <SystemInit+0x28>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    2c16:	2301      	movs	r3, #1
    2c18:	4a47      	ldr	r2, [pc, #284]	; (2d38 <SystemInit+0x150>)

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    2c1a:	2101      	movs	r1, #1
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    2c1c:	7013      	strb	r3, [r2, #0]
  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    2c1e:	e003      	b.n	2c28 <SystemInit+0x40>
    2c20:	7853      	ldrb	r3, [r2, #1]
    2c22:	b25b      	sxtb	r3, r3
    2c24:	2b00      	cmp	r3, #0
    2c26:	da02      	bge.n	2c2e <SystemInit+0x46>
    2c28:	7813      	ldrb	r3, [r2, #0]
    2c2a:	4219      	tst	r1, r3
    2c2c:	d1f8      	bne.n	2c20 <SystemInit+0x38>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    2c2e:	2301      	movs	r3, #1
    2c30:	4a41      	ldr	r2, [pc, #260]	; (2d38 <SystemInit+0x150>)
    2c32:	6093      	str	r3, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2c34:	7853      	ldrb	r3, [r2, #1]
    2c36:	b25b      	sxtb	r3, r3
    2c38:	2b00      	cmp	r3, #0
    2c3a:	dbfb      	blt.n	2c34 <SystemInit+0x4c>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    2c3c:	4b3f      	ldr	r3, [pc, #252]	; (2d3c <SystemInit+0x154>)
    2c3e:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2c40:	4a3d      	ldr	r2, [pc, #244]	; (2d38 <SystemInit+0x150>)
    2c42:	7853      	ldrb	r3, [r2, #1]
    2c44:	b25b      	sxtb	r3, r3
    2c46:	2b00      	cmp	r3, #0
    2c48:	dbfb      	blt.n	2c42 <SystemInit+0x5a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    2c4a:	2382      	movs	r3, #130	; 0x82
    2c4c:	01db      	lsls	r3, r3, #7
    2c4e:	8053      	strh	r3, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2c50:	4a39      	ldr	r2, [pc, #228]	; (2d38 <SystemInit+0x150>)
    2c52:	7853      	ldrb	r3, [r2, #1]
    2c54:	b25b      	sxtb	r3, r3
    2c56:	2b00      	cmp	r3, #0
    2c58:	dbfb      	blt.n	2c52 <SystemInit+0x6a>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2c5a:	2302      	movs	r3, #2

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    2c5c:	2110      	movs	r1, #16
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2c5e:	4a34      	ldr	r2, [pc, #208]	; (2d30 <SystemInit+0x148>)
    2c60:	8493      	strh	r3, [r2, #36]	; 0x24
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    2c62:	68d3      	ldr	r3, [r2, #12]
    2c64:	4219      	tst	r1, r3
    2c66:	d0fc      	beq.n	2c62 <SystemInit+0x7a>

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    2c68:	2110      	movs	r1, #16
  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    2c6a:	4b35      	ldr	r3, [pc, #212]	; (2d40 <SystemInit+0x158>)
    2c6c:	62d3      	str	r3, [r2, #44]	; 0x2c
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    2c6e:	4a30      	ldr	r2, [pc, #192]	; (2d30 <SystemInit+0x148>)
    2c70:	68d3      	ldr	r3, [r2, #12]
    2c72:	4219      	tst	r1, r3
    2c74:	d0fc      	beq.n	2c70 <SystemInit+0x88>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    2c76:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2c78:	4b32      	ldr	r3, [pc, #200]	; (2d44 <SystemInit+0x15c>)
    2c7a:	430b      	orrs	r3, r1
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    2c7c:	2110      	movs	r1, #16
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    2c7e:	8493      	strh	r3, [r2, #36]	; 0x24
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    2c80:	4a2b      	ldr	r2, [pc, #172]	; (2d30 <SystemInit+0x148>)
    2c82:	68d3      	ldr	r3, [r2, #12]
    2c84:	4219      	tst	r1, r3
    2c86:	d0fc      	beq.n	2c82 <SystemInit+0x9a>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    2c88:	2102      	movs	r1, #2

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    2c8a:	2040      	movs	r0, #64	; 0x40
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    2c8c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2c8e:	430b      	orrs	r3, r1
    2c90:	8493      	strh	r3, [r2, #36]	; 0x24
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    2c92:	4a27      	ldr	r2, [pc, #156]	; (2d30 <SystemInit+0x148>)
    2c94:	317e      	adds	r1, #126	; 0x7e
    2c96:	68d3      	ldr	r3, [r2, #12]
    2c98:	4219      	tst	r1, r3
    2c9a:	d0fc      	beq.n	2c96 <SystemInit+0xae>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    2c9c:	68d3      	ldr	r3, [r2, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    2c9e:	4218      	tst	r0, r3
    2ca0:	d0f9      	beq.n	2c96 <SystemInit+0xae>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    2ca2:	2210      	movs	r2, #16
    2ca4:	4922      	ldr	r1, [pc, #136]	; (2d30 <SystemInit+0x148>)
    2ca6:	68cb      	ldr	r3, [r1, #12]
    2ca8:	421a      	tst	r2, r3
    2caa:	d0fc      	beq.n	2ca6 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    2cac:	2300      	movs	r3, #0
    2cae:	4a22      	ldr	r2, [pc, #136]	; (2d38 <SystemInit+0x150>)
    2cb0:	6093      	str	r3, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2cb2:	7853      	ldrb	r3, [r2, #1]
    2cb4:	b25b      	sxtb	r3, r3
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	dbfb      	blt.n	2cb2 <SystemInit+0xca>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    2cba:	4b23      	ldr	r3, [pc, #140]	; (2d48 <SystemInit+0x160>)
    2cbc:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2cbe:	4a1e      	ldr	r2, [pc, #120]	; (2d38 <SystemInit+0x150>)
    2cc0:	7853      	ldrb	r3, [r2, #1]
    2cc2:	b25b      	sxtb	r3, r3
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	dbfb      	blt.n	2cc0 <SystemInit+0xd8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    2cc8:	4b19      	ldr	r3, [pc, #100]	; (2d30 <SystemInit+0x148>)
    2cca:	4820      	ldr	r0, [pc, #128]	; (2d4c <SystemInit+0x164>)
    2ccc:	6a19      	ldr	r1, [r3, #32]
    2cce:	4001      	ands	r1, r0
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    2cd0:	2080      	movs	r0, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    2cd2:	6219      	str	r1, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    2cd4:	6a19      	ldr	r1, [r3, #32]
    2cd6:	4381      	bics	r1, r0
    2cd8:	6219      	str	r1, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    2cda:	2303      	movs	r3, #3
    2cdc:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    2cde:	4b1c      	ldr	r3, [pc, #112]	; (2d50 <SystemInit+0x168>)
    2ce0:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2ce2:	4a15      	ldr	r2, [pc, #84]	; (2d38 <SystemInit+0x150>)
    2ce4:	7853      	ldrb	r3, [r2, #1]
    2ce6:	b25b      	sxtb	r3, r3
    2ce8:	2b00      	cmp	r3, #0
    2cea:	dbfb      	blt.n	2ce4 <SystemInit+0xfc>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    2cec:	2200      	movs	r2, #0
    2cee:	4b0f      	ldr	r3, [pc, #60]	; (2d2c <SystemInit+0x144>)
    2cf0:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    2cf2:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    2cf4:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    2cf6:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=VARIANT_MCK ;
    2cf8:	4b16      	ldr	r3, [pc, #88]	; (2d54 <SystemInit+0x16c>)
    2cfa:	4a17      	ldr	r2, [pc, #92]	; (2d58 <SystemInit+0x170>)
    2cfc:	601a      	str	r2, [r3, #0]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    2cfe:	22ff      	movs	r2, #255	; 0xff
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    2d00:	4b16      	ldr	r3, [pc, #88]	; (2d5c <SystemInit+0x174>)
    2d02:	6819      	ldr	r1, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    2d04:	4b16      	ldr	r3, [pc, #88]	; (2d60 <SystemInit+0x178>)
    2d06:	6818      	ldr	r0, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    2d08:	068b      	lsls	r3, r1, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    2d0a:	0149      	lsls	r1, r1, #5
    2d0c:	400a      	ands	r2, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    2d0e:	2180      	movs	r1, #128	; 0x80
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    2d10:	0ec0      	lsrs	r0, r0, #27
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    2d12:	0f5b      	lsrs	r3, r3, #29
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    2d14:	4302      	orrs	r2, r0
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    2d16:	021b      	lsls	r3, r3, #8
    2d18:	4313      	orrs	r3, r2
    2d1a:	4a12      	ldr	r2, [pc, #72]	; (2d64 <SystemInit+0x17c>)
    2d1c:	8513      	strh	r3, [r2, #40]	; 0x28
  NVMCTRL->CTRLB.bit.MANW = 1;
    2d1e:	4a02      	ldr	r2, [pc, #8]	; (2d28 <SystemInit+0x140>)
    2d20:	6853      	ldr	r3, [r2, #4]
    2d22:	430b      	orrs	r3, r1
    2d24:	6053      	str	r3, [r2, #4]
}
    2d26:	4770      	bx	lr
    2d28:	41004000 	.word	0x41004000
    2d2c:	40000400 	.word	0x40000400
    2d30:	40000800 	.word	0x40000800
    2d34:	0000060c 	.word	0x0000060c
    2d38:	40000c00 	.word	0x40000c00
    2d3c:	00010501 	.word	0x00010501
    2d40:	7dff05b9 	.word	0x7dff05b9
    2d44:	00000a04 	.word	0x00000a04
    2d48:	00030700 	.word	0x00030700
    2d4c:	fffffcff 	.word	0xfffffcff
    2d50:	00010603 	.word	0x00010603
    2d54:	20000048 	.word	0x20000048
    2d58:	02dc6c00 	.word	0x02dc6c00
    2d5c:	00806024 	.word	0x00806024
    2d60:	00806020 	.word	0x00806020
    2d64:	42004000 	.word	0x42004000

00002d68 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    2d68:	2001      	movs	r0, #1
    2d6a:	4770      	bx	lr

00002d6c <_ZN4Uart9availableEv>:
}

template <int N>
int RingBufferN<N>::available()
{
  int delta = _iHead - _iTail;
    2d6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    2d6e:	6d80      	ldr	r0, [r0, #88]	; 0x58
    2d70:	1a18      	subs	r0, r3, r0

  if(delta < 0)
    2d72:	d500      	bpl.n	2d76 <_ZN4Uart9availableEv+0xa>
    return N + delta;
    2d74:	3040      	adds	r0, #64	; 0x40
}

int Uart::available()
{
  return rxBuffer.available();
}
    2d76:	4770      	bx	lr

00002d78 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
    2d78:	6d82      	ldr	r2, [r0, #88]	; 0x58
    2d7a:	6d43      	ldr	r3, [r0, #84]	; 0x54
    2d7c:	429a      	cmp	r2, r3
    2d7e:	d003      	beq.n	2d88 <_ZN4Uart4peekEv+0x10>
    return -1;

  return _aucBuffer[_iTail];
    2d80:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2d82:	18c0      	adds	r0, r0, r3
    2d84:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    2d86:	4770      	bx	lr
    return -1;
    2d88:	2001      	movs	r0, #1
    2d8a:	4240      	negs	r0, r0
  return rxBuffer.peek();
    2d8c:	e7fb      	b.n	2d86 <_ZN4Uart4peekEv+0xe>
    2d8e:	46c0      	nop			; (mov r8, r8)

00002d90 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    2d90:	6d81      	ldr	r1, [r0, #88]	; 0x58
    2d92:	6d42      	ldr	r2, [r0, #84]	; 0x54

int Uart::read()
{
    2d94:	0003      	movs	r3, r0
    2d96:	4291      	cmp	r1, r2
    2d98:	d020      	beq.n	2ddc <_ZN4Uart4readEv+0x4c>
  uint8_t value = _aucBuffer[_iTail];
    2d9a:	6d82      	ldr	r2, [r0, #88]	; 0x58
  _iTail = nextIndex(_iTail);
    2d9c:	6d99      	ldr	r1, [r3, #88]	; 0x58
  uint8_t value = _aucBuffer[_iTail];
    2d9e:	1882      	adds	r2, r0, r2
    2da0:	7d10      	ldrb	r0, [r2, #20]
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    2da2:	223f      	movs	r2, #63	; 0x3f
    2da4:	3101      	adds	r1, #1
    2da6:	400a      	ands	r2, r1
  _iTail = nextIndex(_iTail);
    2da8:	659a      	str	r2, [r3, #88]	; 0x58
  int c = rxBuffer.read_char();

  if (uc_pinRTS != NO_RTS_PIN) {
    2daa:	22a8      	movs	r2, #168	; 0xa8
    2dac:	5c9a      	ldrb	r2, [r3, r2]
    2dae:	2aff      	cmp	r2, #255	; 0xff
    2db0:	d00e      	beq.n	2dd0 <_ZN4Uart4readEv+0x40>
  if (_iHead >= _iTail)
    2db2:	6d59      	ldr	r1, [r3, #84]	; 0x54
    2db4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    2db6:	4291      	cmp	r1, r2
    2db8:	da0b      	bge.n	2dd2 <_ZN4Uart4readEv+0x42>
    return _iTail - _iHead - 1;
    2dba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    2dbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
    2dbe:	1a52      	subs	r2, r2, r1
    2dc0:	3a01      	subs	r2, #1
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    2dc2:	2a0a      	cmp	r2, #10
    2dc4:	dd04      	ble.n	2dd0 <_ZN4Uart4readEv+0x40>
      *pul_outclrRTS = ul_pinMaskRTS;
    2dc6:	22b0      	movs	r2, #176	; 0xb0
    2dc8:	21b4      	movs	r1, #180	; 0xb4
    2dca:	589a      	ldr	r2, [r3, r2]
    2dcc:	585b      	ldr	r3, [r3, r1]
    2dce:	6013      	str	r3, [r2, #0]
    }
  }

  return c;
}
    2dd0:	4770      	bx	lr
    return N - 1 - _iHead + _iTail;
    2dd2:	6d59      	ldr	r1, [r3, #84]	; 0x54
    2dd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    2dd6:	1a52      	subs	r2, r2, r1
    2dd8:	323f      	adds	r2, #63	; 0x3f
    2dda:	e7f2      	b.n	2dc2 <_ZN4Uart4readEv+0x32>
    return -1;
    2ddc:	2001      	movs	r0, #1
    2dde:	4240      	negs	r0, r0
    2de0:	e7e3      	b.n	2daa <_ZN4Uart4readEv+0x1a>
    2de2:	46c0      	nop			; (mov r8, r8)

00002de4 <_ZN4UartD1Ev>:
class Uart : public HardwareSerial
    2de4:	4770      	bx	lr
    2de6:	46c0      	nop			; (mov r8, r8)

00002de8 <_ZN4Uart5beginEmt>:
{
    2de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dea:	46c6      	mov	lr, r8
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2dec:	23a4      	movs	r3, #164	; 0xa4
{
    2dee:	000f      	movs	r7, r1
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2df0:	2108      	movs	r1, #8
{
    2df2:	b500      	push	{lr}
    2df4:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2df6:	5cc0      	ldrb	r0, [r0, r3]
    2df8:	4e42      	ldr	r6, [pc, #264]	; (2f04 <_ZN4Uart5beginEmt+0x11c>)
    2dfa:	0043      	lsls	r3, r0, #1
    2dfc:	181b      	adds	r3, r3, r0
    2dfe:	00db      	lsls	r3, r3, #3
    2e00:	18f3      	adds	r3, r6, r3
    2e02:	5659      	ldrsb	r1, [r3, r1]
{
    2e04:	b082      	sub	sp, #8
    2e06:	0015      	movs	r5, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2e08:	f001 ff10 	bl	4c2c <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    2e0c:	23a5      	movs	r3, #165	; 0xa5
    2e0e:	2108      	movs	r1, #8
    2e10:	5ce0      	ldrb	r0, [r4, r3]
    2e12:	0043      	lsls	r3, r0, #1
    2e14:	181b      	adds	r3, r3, r0
    2e16:	00db      	lsls	r3, r3, #3
    2e18:	18f3      	adds	r3, r6, r3
    2e1a:	5659      	ldrsb	r1, [r3, r1]
    2e1c:	f001 ff06 	bl	4c2c <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    2e20:	23a7      	movs	r3, #167	; 0xa7
    2e22:	5ce3      	ldrb	r3, [r4, r3]
    2e24:	2b02      	cmp	r3, #2
    2e26:	d05b      	beq.n	2ee0 <_ZN4Uart5beginEmt+0xf8>
  if (uc_pinRTS != NO_RTS_PIN) {
    2e28:	23a8      	movs	r3, #168	; 0xa8
    2e2a:	5ce0      	ldrb	r0, [r4, r3]
    2e2c:	4698      	mov	r8, r3
    2e2e:	28ff      	cmp	r0, #255	; 0xff
    2e30:	d019      	beq.n	2e66 <_ZN4Uart5beginEmt+0x7e>
    pinMode(uc_pinRTS, OUTPUT);
    2e32:	2101      	movs	r1, #1
    2e34:	f001 fe7c 	bl	4b30 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    2e38:	4643      	mov	r3, r8
    2e3a:	5ce3      	ldrb	r3, [r4, r3]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2e3c:	4932      	ldr	r1, [pc, #200]	; (2f08 <_ZN4Uart5beginEmt+0x120>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    2e3e:	005a      	lsls	r2, r3, #1
    2e40:	18d2      	adds	r2, r2, r3
    2e42:	00d2      	lsls	r2, r2, #3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2e44:	56b3      	ldrsb	r3, [r6, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2e46:	18b6      	adds	r6, r6, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2e48:	01db      	lsls	r3, r3, #7
    2e4a:	1858      	adds	r0, r3, r1
    2e4c:	21ac      	movs	r1, #172	; 0xac
    2e4e:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2e50:	492e      	ldr	r1, [pc, #184]	; (2f0c <_ZN4Uart5beginEmt+0x124>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2e52:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2e54:	468c      	mov	ip, r1
    2e56:	21b0      	movs	r1, #176	; 0xb0
    2e58:	4463      	add	r3, ip
    2e5a:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2e5c:	6871      	ldr	r1, [r6, #4]
    2e5e:	408a      	lsls	r2, r1
    2e60:	21b4      	movs	r1, #180	; 0xb4
    2e62:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    2e64:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    2e66:	003b      	movs	r3, r7
    2e68:	2201      	movs	r2, #1
    2e6a:	6920      	ldr	r0, [r4, #16]
    2e6c:	2101      	movs	r1, #1
    2e6e:	f00d f9d1 	bl	10214 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    2e72:	23f0      	movs	r3, #240	; 0xf0
    2e74:	2280      	movs	r2, #128	; 0x80
    2e76:	011b      	lsls	r3, r3, #4
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    2e78:	6920      	ldr	r0, [r4, #16]
  switch(config & HARDSER_DATA_MASK)
    2e7a:	402b      	ands	r3, r5
    2e7c:	0092      	lsls	r2, r2, #2
    2e7e:	4293      	cmp	r3, r2
    2e80:	d03d      	beq.n	2efe <_ZN4Uart5beginEmt+0x116>
    2e82:	3201      	adds	r2, #1
    2e84:	32ff      	adds	r2, #255	; 0xff
    2e86:	4293      	cmp	r3, r2
    2e88:	d037      	beq.n	2efa <_ZN4Uart5beginEmt+0x112>
    2e8a:	2280      	movs	r2, #128	; 0x80
    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    2e8c:	2100      	movs	r1, #0
  switch(config & HARDSER_DATA_MASK)
    2e8e:	0052      	lsls	r2, r2, #1
    2e90:	4293      	cmp	r3, r2
    2e92:	d01e      	beq.n	2ed2 <_ZN4Uart5beginEmt+0xea>
  }
}

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    2e94:	230f      	movs	r3, #15
    2e96:	402b      	ands	r3, r5
    2e98:	2b01      	cmp	r3, #1
    2e9a:	d01f      	beq.n	2edc <_ZN4Uart5beginEmt+0xf4>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    2e9c:	3b02      	subs	r3, #2
    2e9e:	1e5a      	subs	r2, r3, #1
    2ea0:	4193      	sbcs	r3, r2
    2ea2:	3301      	adds	r3, #1
  switch(config & HARDSER_STOP_BIT_MASK)
    2ea4:	22f0      	movs	r2, #240	; 0xf0
    2ea6:	4015      	ands	r5, r2
      return SERCOM_STOP_BIT_1;
    2ea8:	3d30      	subs	r5, #48	; 0x30
    2eaa:	426e      	negs	r6, r5
    2eac:	416e      	adcs	r6, r5
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    2eae:	2201      	movs	r2, #1
    2eb0:	9600      	str	r6, [sp, #0]
    2eb2:	f00c ffb9 	bl	fe28 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    2eb6:	23a6      	movs	r3, #166	; 0xa6
    2eb8:	5ce2      	ldrb	r2, [r4, r3]
    2eba:	3301      	adds	r3, #1
    2ebc:	5ce1      	ldrb	r1, [r4, r3]
    2ebe:	6920      	ldr	r0, [r4, #16]
    2ec0:	f00c ffce 	bl	fe60 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    2ec4:	6920      	ldr	r0, [r4, #16]
    2ec6:	f00c ffe9 	bl	fe9c <_ZN6SERCOM10enableUARTEv>
}
    2eca:	b002      	add	sp, #8
    2ecc:	bc04      	pop	{r2}
    2ece:	4690      	mov	r8, r2
    2ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch(config & HARDSER_PARITY_MASK)
    2ed2:	230f      	movs	r3, #15
      return UART_CHAR_SIZE_5_BITS;
    2ed4:	2105      	movs	r1, #5
  switch(config & HARDSER_PARITY_MASK)
    2ed6:	402b      	ands	r3, r5
    2ed8:	2b01      	cmp	r3, #1
    2eda:	d1df      	bne.n	2e9c <_ZN4Uart5beginEmt+0xb4>

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    2edc:	2300      	movs	r3, #0
    2ede:	e7e1      	b.n	2ea4 <_ZN4Uart5beginEmt+0xbc>
    if (uc_pinCTS != NO_CTS_PIN) {
    2ee0:	33b6      	adds	r3, #182	; 0xb6
    2ee2:	5ce0      	ldrb	r0, [r4, r3]
    2ee4:	28ff      	cmp	r0, #255	; 0xff
    2ee6:	d09f      	beq.n	2e28 <_ZN4Uart5beginEmt+0x40>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    2ee8:	2108      	movs	r1, #8
    2eea:	0043      	lsls	r3, r0, #1
    2eec:	181b      	adds	r3, r3, r0
    2eee:	00db      	lsls	r3, r3, #3
    2ef0:	18f3      	adds	r3, r6, r3
    2ef2:	5659      	ldrsb	r1, [r3, r1]
    2ef4:	f001 fe9a 	bl	4c2c <pinPeripheral>
    2ef8:	e796      	b.n	2e28 <_ZN4Uart5beginEmt+0x40>
      return UART_CHAR_SIZE_7_BITS;
    2efa:	2107      	movs	r1, #7
    2efc:	e7ca      	b.n	2e94 <_ZN4Uart5beginEmt+0xac>
      return UART_CHAR_SIZE_6_BITS;
    2efe:	2106      	movs	r1, #6
    2f00:	e7c8      	b.n	2e94 <_ZN4Uart5beginEmt+0xac>
    2f02:	46c0      	nop			; (mov r8, r8)
    2f04:	00010e00 	.word	0x00010e00
    2f08:	41004418 	.word	0x41004418
    2f0c:	41004414 	.word	0x41004414

00002f10 <_ZN4Uart3endEv>:
{
    2f10:	b510      	push	{r4, lr}
    2f12:	0004      	movs	r4, r0
  sercom->resetUART();
    2f14:	6900      	ldr	r0, [r0, #16]
    2f16:	f00c ffb5 	bl	fe84 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    2f1a:	2300      	movs	r3, #0
    2f1c:	229c      	movs	r2, #156	; 0x9c
    2f1e:	6563      	str	r3, [r4, #84]	; 0x54
  _iTail = 0;
    2f20:	65a3      	str	r3, [r4, #88]	; 0x58
  _iHead = 0;
    2f22:	50a3      	str	r3, [r4, r2]
  _iTail = 0;
    2f24:	3204      	adds	r2, #4
    2f26:	50a3      	str	r3, [r4, r2]
}
    2f28:	bd10      	pop	{r4, pc}
    2f2a:	46c0      	nop			; (mov r8, r8)

00002f2c <_ZN4Uart5flushEv>:
{
    2f2c:	b510      	push	{r4, lr}
  int delta = _iHead - _iTail;
    2f2e:	21a0      	movs	r1, #160	; 0xa0
    2f30:	249c      	movs	r4, #156	; 0x9c
    2f32:	e001      	b.n	2f38 <_ZN4Uart5flushEv+0xc>
  while(txBuffer.available()); // wait until TX buffer is empty
    2f34:	2b00      	cmp	r3, #0
    2f36:	d006      	beq.n	2f46 <_ZN4Uart5flushEv+0x1a>
    2f38:	5903      	ldr	r3, [r0, r4]
    2f3a:	5842      	ldr	r2, [r0, r1]
    2f3c:	1a9b      	subs	r3, r3, r2
    2f3e:	d5f9      	bpl.n	2f34 <_ZN4Uart5flushEv+0x8>
    return N + delta;
    2f40:	3340      	adds	r3, #64	; 0x40
    2f42:	2b00      	cmp	r3, #0
    2f44:	d1f8      	bne.n	2f38 <_ZN4Uart5flushEv+0xc>
  sercom->flushUART();
    2f46:	6900      	ldr	r0, [r0, #16]
    2f48:	f00c ffb2 	bl	feb0 <_ZN6SERCOM9flushUARTEv>
}
    2f4c:	bd10      	pop	{r4, pc}
    2f4e:	46c0      	nop			; (mov r8, r8)

00002f50 <_ZN4UartD0Ev>:
    2f50:	b510      	push	{r4, lr}
    2f52:	0004      	movs	r4, r0
    2f54:	f00c ff4e 	bl	fdf4 <_ZdlPv>
    2f58:	0020      	movs	r0, r4
    2f5a:	bd10      	pop	{r4, pc}

00002f5c <_ZN4Uart17availableForWriteEv>:
  if (_iHead >= _iTail)
    2f5c:	229c      	movs	r2, #156	; 0x9c
    2f5e:	23a0      	movs	r3, #160	; 0xa0
{
    2f60:	b510      	push	{r4, lr}
    2f62:	5884      	ldr	r4, [r0, r2]
    2f64:	58c1      	ldr	r1, [r0, r3]
    2f66:	428c      	cmp	r4, r1
    2f68:	da04      	bge.n	2f74 <_ZN4Uart17availableForWriteEv+0x18>
    return _iTail - _iHead - 1;
    2f6a:	58c3      	ldr	r3, [r0, r3]
    2f6c:	5880      	ldr	r0, [r0, r2]
    2f6e:	1a18      	subs	r0, r3, r0
    2f70:	3801      	subs	r0, #1
}
    2f72:	bd10      	pop	{r4, pc}
    return N - 1 - _iHead + _iTail;
    2f74:	5882      	ldr	r2, [r0, r2]
    2f76:	58c0      	ldr	r0, [r0, r3]
    2f78:	1a80      	subs	r0, r0, r2
    2f7a:	303f      	adds	r0, #63	; 0x3f
    2f7c:	e7f9      	b.n	2f72 <_ZN4Uart17availableForWriteEv+0x16>
    2f7e:	46c0      	nop			; (mov r8, r8)

00002f80 <_ZN4Uart5beginEm>:
{
    2f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  begin(baudrate, SERIAL_8N1);
    2f82:	6803      	ldr	r3, [r0, #0]
    2f84:	4a33      	ldr	r2, [pc, #204]	; (3054 <_ZN4Uart5beginEm+0xd4>)
    2f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
    2f88:	b083      	sub	sp, #12
    2f8a:	0004      	movs	r4, r0
    2f8c:	000e      	movs	r6, r1
    2f8e:	4293      	cmp	r3, r2
    2f90:	d15c      	bne.n	304c <_ZN4Uart5beginEm+0xcc>
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2f92:	23a4      	movs	r3, #164	; 0xa4
    2f94:	2108      	movs	r1, #8
    2f96:	5cc0      	ldrb	r0, [r0, r3]
    2f98:	4d2f      	ldr	r5, [pc, #188]	; (3058 <_ZN4Uart5beginEm+0xd8>)
    2f9a:	0043      	lsls	r3, r0, #1
    2f9c:	181b      	adds	r3, r3, r0
    2f9e:	00db      	lsls	r3, r3, #3
    2fa0:	18eb      	adds	r3, r5, r3
    2fa2:	5659      	ldrsb	r1, [r3, r1]
    2fa4:	f001 fe42 	bl	4c2c <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    2fa8:	23a5      	movs	r3, #165	; 0xa5
    2faa:	2108      	movs	r1, #8
    2fac:	5ce0      	ldrb	r0, [r4, r3]
    2fae:	0043      	lsls	r3, r0, #1
    2fb0:	181b      	adds	r3, r3, r0
    2fb2:	00db      	lsls	r3, r3, #3
    2fb4:	18eb      	adds	r3, r5, r3
    2fb6:	5659      	ldrsb	r1, [r3, r1]
    2fb8:	f001 fe38 	bl	4c2c <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    2fbc:	23a7      	movs	r3, #167	; 0xa7
    2fbe:	5ce3      	ldrb	r3, [r4, r3]
    2fc0:	2b02      	cmp	r3, #2
    2fc2:	d036      	beq.n	3032 <_ZN4Uart5beginEm+0xb2>
  if (uc_pinRTS != NO_RTS_PIN) {
    2fc4:	27a8      	movs	r7, #168	; 0xa8
    2fc6:	5de0      	ldrb	r0, [r4, r7]
    2fc8:	28ff      	cmp	r0, #255	; 0xff
    2fca:	d018      	beq.n	2ffe <_ZN4Uart5beginEm+0x7e>
    pinMode(uc_pinRTS, OUTPUT);
    2fcc:	2101      	movs	r1, #1
    2fce:	f001 fdaf 	bl	4b30 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    2fd2:	5de3      	ldrb	r3, [r4, r7]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2fd4:	4921      	ldr	r1, [pc, #132]	; (305c <_ZN4Uart5beginEm+0xdc>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    2fd6:	005a      	lsls	r2, r3, #1
    2fd8:	18d2      	adds	r2, r2, r3
    2fda:	00d2      	lsls	r2, r2, #3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2fdc:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2fde:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2fe0:	01db      	lsls	r3, r3, #7
    2fe2:	1858      	adds	r0, r3, r1
    2fe4:	21ac      	movs	r1, #172	; 0xac
    2fe6:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2fe8:	491d      	ldr	r1, [pc, #116]	; (3060 <_ZN4Uart5beginEm+0xe0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2fea:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2fec:	468c      	mov	ip, r1
    2fee:	21b0      	movs	r1, #176	; 0xb0
    2ff0:	4463      	add	r3, ip
    2ff2:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2ff4:	6869      	ldr	r1, [r5, #4]
    2ff6:	408a      	lsls	r2, r1
    2ff8:	21b4      	movs	r1, #180	; 0xb4
    2ffa:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    2ffc:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    2ffe:	0033      	movs	r3, r6
    3000:	2201      	movs	r2, #1
    3002:	2101      	movs	r1, #1
    3004:	6920      	ldr	r0, [r4, #16]
    3006:	f00d f905 	bl	10214 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    300a:	2300      	movs	r3, #0
    300c:	2201      	movs	r2, #1
    300e:	9300      	str	r3, [sp, #0]
    3010:	2100      	movs	r1, #0
    3012:	3302      	adds	r3, #2
    3014:	6920      	ldr	r0, [r4, #16]
    3016:	f00c ff07 	bl	fe28 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    301a:	23a6      	movs	r3, #166	; 0xa6
    301c:	5ce2      	ldrb	r2, [r4, r3]
    301e:	3301      	adds	r3, #1
    3020:	6920      	ldr	r0, [r4, #16]
    3022:	5ce1      	ldrb	r1, [r4, r3]
    3024:	f00c ff1c 	bl	fe60 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    3028:	6920      	ldr	r0, [r4, #16]
    302a:	f00c ff37 	bl	fe9c <_ZN6SERCOM10enableUARTEv>
}
    302e:	b003      	add	sp, #12
    3030:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (uc_pinCTS != NO_CTS_PIN) {
    3032:	33b6      	adds	r3, #182	; 0xb6
    3034:	5ce0      	ldrb	r0, [r4, r3]
    3036:	28ff      	cmp	r0, #255	; 0xff
    3038:	d0c4      	beq.n	2fc4 <_ZN4Uart5beginEm+0x44>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    303a:	2108      	movs	r1, #8
    303c:	0043      	lsls	r3, r0, #1
    303e:	181b      	adds	r3, r3, r0
    3040:	00db      	lsls	r3, r3, #3
    3042:	18eb      	adds	r3, r5, r3
    3044:	5659      	ldrsb	r1, [r3, r1]
    3046:	f001 fdf1 	bl	4c2c <pinPeripheral>
    304a:	e7bb      	b.n	2fc4 <_ZN4Uart5beginEm+0x44>
  begin(baudrate, SERIAL_8N1);
    304c:	4a05      	ldr	r2, [pc, #20]	; (3064 <_ZN4Uart5beginEm+0xe4>)
    304e:	4798      	blx	r3
}
    3050:	e7ed      	b.n	302e <_ZN4Uart5beginEm+0xae>
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	00002de9 	.word	0x00002de9
    3058:	00010e00 	.word	0x00010e00
    305c:	41004418 	.word	0x41004418
    3060:	41004414 	.word	0x41004414
    3064:	00000413 	.word	0x00000413

00003068 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    3068:	b5f0      	push	{r4, r5, r6, r7, lr}
    306a:	46d6      	mov	lr, sl
    306c:	464f      	mov	r7, r9
    306e:	4646      	mov	r6, r8
    3070:	b5c0      	push	{r6, r7, lr}
    3072:	4698      	mov	r8, r3
    3074:	ab08      	add	r3, sp, #32
    3076:	781f      	ldrb	r7, [r3, #0]
    3078:	ab09      	add	r3, sp, #36	; 0x24
    307a:	781e      	ldrb	r6, [r3, #0]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    307c:	23fa      	movs	r3, #250	; 0xfa
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    307e:	2500      	movs	r5, #0
    3080:	0004      	movs	r4, r0
    3082:	009b      	lsls	r3, r3, #2
    3084:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    3086:	4b17      	ldr	r3, [pc, #92]	; (30e4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x7c>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    3088:	468a      	mov	sl, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    308a:	3308      	adds	r3, #8
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    308c:	4691      	mov	r9, r2
    308e:	6045      	str	r5, [r0, #4]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    3090:	6003      	str	r3, [r0, #0]
    memset( _aucBuffer, 0, N ) ;
    3092:	2240      	movs	r2, #64	; 0x40
    3094:	2100      	movs	r1, #0
    3096:	3014      	adds	r0, #20
    3098:	f00d fc70 	bl	1097c <memset>
    309c:	0020      	movs	r0, r4
  _iHead = 0;
    309e:	6565      	str	r5, [r4, #84]	; 0x54
    memset( _aucBuffer, 0, N ) ;
    30a0:	2240      	movs	r2, #64	; 0x40
  _iTail = 0;
    30a2:	65a5      	str	r5, [r4, #88]	; 0x58
    memset( _aucBuffer, 0, N ) ;
    30a4:	2100      	movs	r1, #0
    30a6:	305c      	adds	r0, #92	; 0x5c
    30a8:	f00d fc68 	bl	1097c <memset>
  _iHead = 0;
    30ac:	239c      	movs	r3, #156	; 0x9c
    30ae:	50e5      	str	r5, [r4, r3]
  _iTail = 0;
    30b0:	3304      	adds	r3, #4
    30b2:	50e5      	str	r5, [r4, r3]
  sercom = _s;
    30b4:	4653      	mov	r3, sl
  uc_pinRX = _pinRX;
    30b6:	464a      	mov	r2, r9
  sercom = _s;
    30b8:	6123      	str	r3, [r4, #16]
  uc_pinRX = _pinRX;
    30ba:	23a4      	movs	r3, #164	; 0xa4
    30bc:	54e2      	strb	r2, [r4, r3]
  uc_pinTX = _pinTX;
    30be:	4642      	mov	r2, r8
    30c0:	3301      	adds	r3, #1
    30c2:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    30c4:	22a8      	movs	r2, #168	; 0xa8
  uc_padRX = _padRX ;
    30c6:	3301      	adds	r3, #1
    30c8:	54e7      	strb	r7, [r4, r3]
  uc_padTX = _padTX;
    30ca:	3301      	adds	r3, #1
    30cc:	54e6      	strb	r6, [r4, r3]
  uc_pinRTS = _pinRTS;
    30ce:	3358      	adds	r3, #88	; 0x58
    30d0:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    30d2:	3210      	adds	r2, #16
}
    30d4:	0020      	movs	r0, r4
  uc_pinCTS = _pinCTS;
    30d6:	54a3      	strb	r3, [r4, r2]
}
    30d8:	bc1c      	pop	{r2, r3, r4}
    30da:	4690      	mov	r8, r2
    30dc:	4699      	mov	r9, r3
    30de:	46a2      	mov	sl, r4
    30e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	00010c1c 	.word	0x00010c1c

000030e8 <_ZN4Uart10IrqHandlerEv>:
{
    30e8:	b510      	push	{r4, lr}
    30ea:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    30ec:	6900      	ldr	r0, [r0, #16]
    30ee:	f00c feeb 	bl	fec8 <_ZN6SERCOM17availableDataUARTEv>
    30f2:	2800      	cmp	r0, #0
    30f4:	d129      	bne.n	314a <_ZN4Uart10IrqHandlerEv+0x62>
  if (sercom->isDataRegisterEmptyUART()) {
    30f6:	6920      	ldr	r0, [r4, #16]
    30f8:	f00c fef8 	bl	feec <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    30fc:	2800      	cmp	r0, #0
    30fe:	d018      	beq.n	3132 <_ZN4Uart10IrqHandlerEv+0x4a>
  int delta = _iHead - _iTail;
    3100:	239c      	movs	r3, #156	; 0x9c
    3102:	22a0      	movs	r2, #160	; 0xa0
    3104:	58e3      	ldr	r3, [r4, r3]
    3106:	58a2      	ldr	r2, [r4, r2]
    3108:	1a9b      	subs	r3, r3, r2
  if(delta < 0)
    310a:	d444      	bmi.n	3196 <_ZN4Uart10IrqHandlerEv+0xae>
    if (txBuffer.available()) {
    310c:	d03f      	beq.n	318e <_ZN4Uart10IrqHandlerEv+0xa6>
  if(_iTail == _iHead)
    310e:	23a0      	movs	r3, #160	; 0xa0
    3110:	229c      	movs	r2, #156	; 0x9c
    3112:	58e1      	ldr	r1, [r4, r3]
    3114:	58a2      	ldr	r2, [r4, r2]
    3116:	4291      	cmp	r1, r2
    3118:	d046      	beq.n	31a8 <_ZN4Uart10IrqHandlerEv+0xc0>
  uint8_t value = _aucBuffer[_iTail];
    311a:	215c      	movs	r1, #92	; 0x5c
    311c:	58e2      	ldr	r2, [r4, r3]
  _iTail = nextIndex(_iTail);
    311e:	58e0      	ldr	r0, [r4, r3]
  uint8_t value = _aucBuffer[_iTail];
    3120:	18a2      	adds	r2, r4, r2
    3122:	5c51      	ldrb	r1, [r2, r1]
  return (uint32_t)(index + 1) % N;
    3124:	223f      	movs	r2, #63	; 0x3f
    3126:	3001      	adds	r0, #1
    3128:	4002      	ands	r2, r0
  _iTail = nextIndex(_iTail);
    312a:	50e2      	str	r2, [r4, r3]
      sercom->writeDataUART(data);
    312c:	6920      	ldr	r0, [r4, #16]
    312e:	f00c fee7 	bl	ff00 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    3132:	6920      	ldr	r0, [r4, #16]
    3134:	f00c fece 	bl	fed4 <_ZN6SERCOM11isUARTErrorEv>
    3138:	2800      	cmp	r0, #0
    313a:	d005      	beq.n	3148 <_ZN4Uart10IrqHandlerEv+0x60>
    sercom->acknowledgeUARTError();
    313c:	6920      	ldr	r0, [r4, #16]
    313e:	f00c fecd 	bl	fedc <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    3142:	6920      	ldr	r0, [r4, #16]
    3144:	f00c febc 	bl	fec0 <_ZN6SERCOM15clearStatusUARTEv>
}
    3148:	bd10      	pop	{r4, pc}
    rxBuffer.store_char(sercom->readDataUART());
    314a:	6920      	ldr	r0, [r4, #16]
    314c:	f00c fed4 	bl	fef8 <_ZN6SERCOM12readDataUARTEv>
  return (uint32_t)(index + 1) % N;
    3150:	233f      	movs	r3, #63	; 0x3f
  int i = nextIndex(_iHead);
    3152:	6d62      	ldr	r2, [r4, #84]	; 0x54
  return (uint32_t)(index + 1) % N;
    3154:	3201      	adds	r2, #1
    3156:	4013      	ands	r3, r2
  if ( i != _iTail )
    3158:	6da2      	ldr	r2, [r4, #88]	; 0x58
    315a:	4293      	cmp	r3, r2
    315c:	d003      	beq.n	3166 <_ZN4Uart10IrqHandlerEv+0x7e>
    _aucBuffer[_iHead] = c ;
    315e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3160:	18a2      	adds	r2, r4, r2
    3162:	7510      	strb	r0, [r2, #20]
    _iHead = i ;
    3164:	6563      	str	r3, [r4, #84]	; 0x54
    if (uc_pinRTS != NO_RTS_PIN) {
    3166:	23a8      	movs	r3, #168	; 0xa8
    3168:	5ce3      	ldrb	r3, [r4, r3]
    316a:	2bff      	cmp	r3, #255	; 0xff
    316c:	d0c3      	beq.n	30f6 <_ZN4Uart10IrqHandlerEv+0xe>
  if (_iHead >= _iTail)
    316e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3170:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3172:	429a      	cmp	r2, r3
    3174:	db13      	blt.n	319e <_ZN4Uart10IrqHandlerEv+0xb6>
    return N - 1 - _iHead + _iTail;
    3176:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3178:	6da3      	ldr	r3, [r4, #88]	; 0x58
    317a:	1a9b      	subs	r3, r3, r2
    317c:	333f      	adds	r3, #63	; 0x3f
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    317e:	2b09      	cmp	r3, #9
    3180:	dcb9      	bgt.n	30f6 <_ZN4Uart10IrqHandlerEv+0xe>
        *pul_outsetRTS = ul_pinMaskRTS;
    3182:	23ac      	movs	r3, #172	; 0xac
    3184:	22b4      	movs	r2, #180	; 0xb4
    3186:	58e3      	ldr	r3, [r4, r3]
    3188:	58a2      	ldr	r2, [r4, r2]
    318a:	601a      	str	r2, [r3, #0]
    318c:	e7b3      	b.n	30f6 <_ZN4Uart10IrqHandlerEv+0xe>
      sercom->disableDataRegisterEmptyInterruptUART();
    318e:	6920      	ldr	r0, [r4, #16]
    3190:	f00c fec2 	bl	ff18 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    3194:	e7cd      	b.n	3132 <_ZN4Uart10IrqHandlerEv+0x4a>
    return N + delta;
    3196:	3340      	adds	r3, #64	; 0x40
    if (txBuffer.available()) {
    3198:	2b00      	cmp	r3, #0
    319a:	d1b8      	bne.n	310e <_ZN4Uart10IrqHandlerEv+0x26>
    319c:	e7f7      	b.n	318e <_ZN4Uart10IrqHandlerEv+0xa6>
    return _iTail - _iHead - 1;
    319e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    31a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    31a2:	1a9b      	subs	r3, r3, r2
    31a4:	3b01      	subs	r3, #1
    31a6:	e7ea      	b.n	317e <_ZN4Uart10IrqHandlerEv+0x96>
  if(_iTail == _iHead)
    31a8:	21ff      	movs	r1, #255	; 0xff
    31aa:	e7bf      	b.n	312c <_ZN4Uart10IrqHandlerEv+0x44>

000031ac <_ZN4Uart5writeEh>:
{
    31ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ae:	46c6      	mov	lr, r8
    31b0:	0004      	movs	r4, r0
    31b2:	b500      	push	{lr}
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    31b4:	6900      	ldr	r0, [r0, #16]
{
    31b6:	4688      	mov	r8, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    31b8:	f00c fe98 	bl	feec <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    31bc:	2800      	cmp	r0, #0
    31be:	d006      	beq.n	31ce <_ZN4Uart5writeEh+0x22>
  int delta = _iHead - _iTail;
    31c0:	239c      	movs	r3, #156	; 0x9c
    31c2:	22a0      	movs	r2, #160	; 0xa0
    31c4:	58e3      	ldr	r3, [r4, r3]
    31c6:	58a2      	ldr	r2, [r4, r2]
    31c8:	1a9b      	subs	r3, r3, r2
  if(delta < 0)
    31ca:	d44b      	bmi.n	3264 <_ZN4Uart5writeEh+0xb8>
    31cc:	d045      	beq.n	325a <_ZN4Uart5writeEh+0xae>
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    31ce:	269c      	movs	r6, #156	; 0x9c
    31d0:	27a0      	movs	r7, #160	; 0xa0
  return (uint32_t)(index + 1) % N;
    31d2:	253f      	movs	r5, #63	; 0x3f
  return (nextIndex(_iHead) == _iTail);
    31d4:	59a3      	ldr	r3, [r4, r6]
    31d6:	59e2      	ldr	r2, [r4, r7]
  return (uint32_t)(index + 1) % N;
    31d8:	3301      	adds	r3, #1
    31da:	402b      	ands	r3, r5
    while(txBuffer.isFull()) {
    31dc:	4293      	cmp	r3, r2
    31de:	d11f      	bne.n	3220 <_ZN4Uart5writeEh+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31e0:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    31e4:	07db      	lsls	r3, r3, #31
    31e6:	d40d      	bmi.n	3204 <_ZN4Uart5writeEh+0x58>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    31e8:	4b20      	ldr	r3, [pc, #128]	; (326c <_ZN4Uart5writeEh+0xc0>)
    31ea:	685b      	ldr	r3, [r3, #4]
    31ec:	05db      	lsls	r3, r3, #23
    31ee:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    31f0:	d0f0      	beq.n	31d4 <_ZN4Uart5writeEh+0x28>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    31f2:	3b10      	subs	r3, #16
    31f4:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    31f6:	2b00      	cmp	r3, #0
    31f8:	db25      	blt.n	3246 <_ZN4Uart5writeEh+0x9a>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    31fa:	089b      	lsrs	r3, r3, #2
    31fc:	33c0      	adds	r3, #192	; 0xc0
    31fe:	4a1c      	ldr	r2, [pc, #112]	; (3270 <_ZN4Uart5writeEh+0xc4>)
    3200:	009b      	lsls	r3, r3, #2
    3202:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    3204:	6920      	ldr	r0, [r4, #16]
    3206:	f00c fe71 	bl	feec <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    320a:	2800      	cmp	r0, #0
    320c:	d0e2      	beq.n	31d4 <_ZN4Uart5writeEh+0x28>
        IrqHandler();
    320e:	0020      	movs	r0, r4
    3210:	f7ff ff6a 	bl	30e8 <_ZN4Uart10IrqHandlerEv>
  return (nextIndex(_iHead) == _iTail);
    3214:	59a3      	ldr	r3, [r4, r6]
    3216:	59e2      	ldr	r2, [r4, r7]
  return (uint32_t)(index + 1) % N;
    3218:	3301      	adds	r3, #1
    321a:	402b      	ands	r3, r5
    while(txBuffer.isFull()) {
    321c:	4293      	cmp	r3, r2
    321e:	d0df      	beq.n	31e0 <_ZN4Uart5writeEh+0x34>
  int i = nextIndex(_iHead);
    3220:	59a3      	ldr	r3, [r4, r6]
  return (uint32_t)(index + 1) % N;
    3222:	3301      	adds	r3, #1
    3224:	401d      	ands	r5, r3
  if ( i != _iTail )
    3226:	59e3      	ldr	r3, [r4, r7]
    3228:	429d      	cmp	r5, r3
    322a:	d005      	beq.n	3238 <_ZN4Uart5writeEh+0x8c>
    _aucBuffer[_iHead] = c ;
    322c:	225c      	movs	r2, #92	; 0x5c
    322e:	4641      	mov	r1, r8
    3230:	59a3      	ldr	r3, [r4, r6]
    3232:	18e3      	adds	r3, r4, r3
    3234:	5499      	strb	r1, [r3, r2]
    _iHead = i ;
    3236:	51a5      	str	r5, [r4, r6]
    sercom->enableDataRegisterEmptyInterruptUART();
    3238:	6920      	ldr	r0, [r4, #16]
    323a:	f00c fe69 	bl	ff10 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    323e:	2001      	movs	r0, #1
    3240:	bc04      	pop	{r2}
    3242:	4690      	mov	r8, r2
    3244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    3246:	220f      	movs	r2, #15
    3248:	4013      	ands	r3, r2
    324a:	4a0a      	ldr	r2, [pc, #40]	; (3274 <_ZN4Uart5writeEh+0xc8>)
    324c:	3b08      	subs	r3, #8
    324e:	4694      	mov	ip, r2
    3250:	089b      	lsrs	r3, r3, #2
    3252:	009b      	lsls	r3, r3, #2
    3254:	4463      	add	r3, ip
    3256:	681b      	ldr	r3, [r3, #0]
    3258:	e7d4      	b.n	3204 <_ZN4Uart5writeEh+0x58>
    sercom->writeDataUART(data);
    325a:	6920      	ldr	r0, [r4, #16]
    325c:	4641      	mov	r1, r8
    325e:	f00c fe4f 	bl	ff00 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    3262:	e7ec      	b.n	323e <_ZN4Uart5writeEh+0x92>
    return N + delta;
    3264:	3340      	adds	r3, #64	; 0x40
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    3266:	2b00      	cmp	r3, #0
    3268:	d0f7      	beq.n	325a <_ZN4Uart5writeEh+0xae>
    326a:	e7b0      	b.n	31ce <_ZN4Uart5writeEh+0x22>
    326c:	e000ed00 	.word	0xe000ed00
    3270:	e000e100 	.word	0xe000e100
    3274:	e000ed1c 	.word	0xe000ed1c

00003278 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual uint32_t recv(void *_data, uint32_t len)
    3278:	b5f0      	push	{r4, r5, r6, r7, lr}
    327a:	46d6      	mov	lr, sl
    327c:	464f      	mov	r7, r9
    327e:	4646      	mov	r6, r8
    3280:	0003      	movs	r3, r0
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    3282:	6900      	ldr	r0, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    3284:	b5c0      	push	{r6, r7, lr}
		if (current == 0) {
    3286:	2800      	cmp	r0, #0
    3288:	d137      	bne.n	32fa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    328a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    328e:	b672      	cpsid	i
			synchronized {
				if (!ready0) {
    3290:	2424      	movs	r4, #36	; 0x24
    3292:	5d1c      	ldrb	r4, [r3, r4]
    3294:	2c00      	cmp	r4, #0
    3296:	d100      	bne.n	329a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x22>
    3298:	e095      	b.n	33c6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x14e>
		if (primask == 0) {
    329a:	2800      	cmp	r0, #0
    329c:	d102      	bne.n	32a4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    329e:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    32a0:	f3bf 8f6f 	isb	sy
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    32a4:	69dc      	ldr	r4, [r3, #28]
    32a6:	2a00      	cmp	r2, #0
    32a8:	d049      	beq.n	333e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc6>
    32aa:	6a18      	ldr	r0, [r3, #32]
    32ac:	4284      	cmp	r4, r0
    32ae:	d246      	bcs.n	333e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc6>
    32b0:	2000      	movs	r0, #0
				data[i] = data0[first0++];
    32b2:	1c65      	adds	r5, r4, #1
    32b4:	61dd      	str	r5, [r3, #28]
    32b6:	699d      	ldr	r5, [r3, #24]
    32b8:	46ac      	mov	ip, r5
    32ba:	4464      	add	r4, ip
    32bc:	7824      	ldrb	r4, [r4, #0]
    32be:	540c      	strb	r4, [r1, r0]
			for (i=0; i<len && first0 < last0; i++) {
    32c0:	3001      	adds	r0, #1
    32c2:	69dc      	ldr	r4, [r3, #28]
    32c4:	4282      	cmp	r2, r0
    32c6:	d03b      	beq.n	3340 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc8>
    32c8:	6a1d      	ldr	r5, [r3, #32]
    32ca:	42ac      	cmp	r4, r5
    32cc:	d3f1      	bcc.n	32b2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x3a>
			}
			if (first0 == last0) {
    32ce:	6a1a      	ldr	r2, [r3, #32]
    32d0:	42a2      	cmp	r2, r4
    32d2:	d138      	bne.n	3346 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xce>
				first0 = 0;
    32d4:	2200      	movs	r2, #0
				current = 1;
    32d6:	2101      	movs	r1, #1
				first0 = 0;
    32d8:	61da      	str	r2, [r3, #28]
				current = 1;
    32da:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32dc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    32e0:	b672      	cpsid	i
				synchronized {
					ready0 = false;
    32e2:	3123      	adds	r1, #35	; 0x23
    32e4:	545a      	strb	r2, [r3, r1]
					if (notify) {
    32e6:	3111      	adds	r1, #17
    32e8:	5c5c      	ldrb	r4, [r3, r1]
    32ea:	2c00      	cmp	r4, #0
    32ec:	d140      	bne.n	3370 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xf8>
		if (primask == 0) {
    32ee:	2d00      	cmp	r5, #0
    32f0:	d129      	bne.n	3346 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xce>
  __ASM volatile ("cpsie i" : : : "memory");
    32f2:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    32f4:	f3bf 8f6f 	isb	sy
    32f8:	e025      	b.n	3346 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    32fe:	b672      	cpsid	i
				}
			}
			return i;
		} else {
			synchronized {
				if (!ready1) {
    3300:	2434      	movs	r4, #52	; 0x34
    3302:	5d1c      	ldrb	r4, [r3, r4]
    3304:	2c00      	cmp	r4, #0
    3306:	d05a      	beq.n	33be <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x146>
		if (primask == 0) {
    3308:	2800      	cmp	r0, #0
    330a:	d102      	bne.n	3312 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x9a>
  __ASM volatile ("cpsie i" : : : "memory");
    330c:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    330e:	f3bf 8f6f 	isb	sy
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    3312:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3314:	2a00      	cmp	r2, #0
    3316:	d01b      	beq.n	3350 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd8>
    3318:	6b18      	ldr	r0, [r3, #48]	; 0x30
    331a:	42a0      	cmp	r0, r4
    331c:	d918      	bls.n	3350 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd8>
    331e:	2000      	movs	r0, #0
				data[i] = data1[first1++];
    3320:	1c65      	adds	r5, r4, #1
    3322:	62dd      	str	r5, [r3, #44]	; 0x2c
    3324:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3326:	46ac      	mov	ip, r5
    3328:	4464      	add	r4, ip
    332a:	7824      	ldrb	r4, [r4, #0]
    332c:	540c      	strb	r4, [r1, r0]
			for (i=0; i<len && first1 < last1; i++) {
    332e:	3001      	adds	r0, #1
    3330:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3332:	4282      	cmp	r2, r0
    3334:	d00d      	beq.n	3352 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xda>
    3336:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    3338:	42ac      	cmp	r4, r5
    333a:	d3f1      	bcc.n	3320 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa8>
    333c:	e009      	b.n	3352 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xda>
			for (i=0; i<len && first0 < last0; i++) {
    333e:	2000      	movs	r0, #0
			if (first0 == last0) {
    3340:	6a1a      	ldr	r2, [r3, #32]
    3342:	42a2      	cmp	r2, r4
    3344:	d0c6      	beq.n	32d4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5c>
					}
				}
			}
			return i;
		}
	}
    3346:	bc1c      	pop	{r2, r3, r4}
    3348:	4690      	mov	r8, r2
    334a:	4699      	mov	r9, r3
    334c:	46a2      	mov	sl, r4
    334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i=0; i<len && first1 < last1; i++) {
    3350:	2000      	movs	r0, #0
			if (first1 == last1) {
    3352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3354:	42a2      	cmp	r2, r4
    3356:	d1f6      	bne.n	3346 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xce>
				first1 = 0;
    3358:	2200      	movs	r2, #0
    335a:	62da      	str	r2, [r3, #44]	; 0x2c
				current = 0;
    335c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    335e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    3362:	b672      	cpsid	i
					ready1 = false;
    3364:	2134      	movs	r1, #52	; 0x34
    3366:	545a      	strb	r2, [r3, r1]
					if (notify) {
    3368:	3101      	adds	r1, #1
    336a:	5c5c      	ldrb	r4, [r3, r1]
    336c:	2c00      	cmp	r4, #0
    336e:	d0be      	beq.n	32ee <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x76>
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3370:	2601      	movs	r6, #1
    3372:	46b0      	mov	r8, r6
						notify = false;
    3374:	545a      	strb	r2, [r3, r1]
		}
	}

	void release() {
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    3376:	685a      	ldr	r2, [r3, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3378:	4646      	mov	r6, r8
    337a:	6811      	ldr	r1, [r2, #0]
		usbd.epBank0EnableTransferComplete(ep);
    337c:	4694      	mov	ip, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    337e:	7a1a      	ldrb	r2, [r3, #8]
    3380:	4692      	mov	sl, r2
    3382:	0157      	lsls	r7, r2, #5
    3384:	19cc      	adds	r4, r1, r7
    3386:	3409      	adds	r4, #9
    3388:	34ff      	adds	r4, #255	; 0xff
    338a:	7862      	ldrb	r2, [r4, #1]
    338c:	4332      	orrs	r2, r6
    338e:	7062      	strb	r2, [r4, #1]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3390:	4652      	mov	r2, sl
		usbd.epBank0SetMultiPacketSize(ep, size);
    3392:	68de      	ldr	r6, [r3, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3394:	003b      	movs	r3, r7
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3396:	3208      	adds	r2, #8
    3398:	0152      	lsls	r2, r2, #5
    339a:	188a      	adds	r2, r1, r2
    339c:	2140      	movs	r1, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    339e:	4463      	add	r3, ip
    33a0:	689c      	ldr	r4, [r3, #8]
    33a2:	4f0c      	ldr	r7, [pc, #48]	; (33d4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x15c>)
    33a4:	04b6      	lsls	r6, r6, #18
    33a6:	0936      	lsrs	r6, r6, #4
    33a8:	403c      	ands	r4, r7
    33aa:	4334      	orrs	r4, r6
    33ac:	609c      	str	r4, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    33ae:	689c      	ldr	r4, [r3, #8]
    33b0:	0ba4      	lsrs	r4, r4, #14
    33b2:	03a4      	lsls	r4, r4, #14
    33b4:	609c      	str	r4, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    33b6:	7913      	ldrb	r3, [r2, #4]
    33b8:	430b      	orrs	r3, r1
    33ba:	7113      	strb	r3, [r2, #4]
    33bc:	e797      	b.n	32ee <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x76>
		if (primask == 0) {
    33be:	2800      	cmp	r0, #0
    33c0:	d097      	beq.n	32f2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x7a>
					return 0;
    33c2:	2000      	movs	r0, #0
    33c4:	e7bf      	b.n	3346 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xce>
		if (primask == 0) {
    33c6:	2800      	cmp	r0, #0
    33c8:	d1fb      	bne.n	33c2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x14a>
  __ASM volatile ("cpsie i" : : : "memory");
    33ca:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    33cc:	f3bf 8f6f 	isb	sy
					return 0;
    33d0:	2000      	movs	r0, #0
    33d2:	e7b8      	b.n	3346 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xce>
    33d4:	f0003fff 	.word	0xf0003fff

000033d8 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
		if (current == 0) {
    33d8:	6903      	ldr	r3, [r0, #16]
    33da:	2b00      	cmp	r3, #0
    33dc:	d110      	bne.n	3400 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    33de:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    33e2:	b672      	cpsid	i
				ready = ready0;
    33e4:	3324      	adds	r3, #36	; 0x24
    33e6:	5cc3      	ldrb	r3, [r0, r3]
    33e8:	b2db      	uxtb	r3, r3
		if (primask == 0) {
    33ea:	2a00      	cmp	r2, #0
    33ec:	d102      	bne.n	33f4 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
    33ee:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    33f0:	f3bf 8f6f 	isb	sy
			return ready ? (last0 - first0) : 0;
    33f4:	2b00      	cmp	r3, #0
    33f6:	d014      	beq.n	3422 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4a>
    33f8:	6a03      	ldr	r3, [r0, #32]
    33fa:	69c0      	ldr	r0, [r0, #28]
    33fc:	1a18      	subs	r0, r3, r0
    33fe:	e00f      	b.n	3420 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3400:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    3404:	b672      	cpsid	i
				ready = ready1;
    3406:	2334      	movs	r3, #52	; 0x34
    3408:	5cc3      	ldrb	r3, [r0, r3]
    340a:	b2db      	uxtb	r3, r3
		if (primask == 0) {
    340c:	2a00      	cmp	r2, #0
    340e:	d102      	bne.n	3416 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x3e>
  __ASM volatile ("cpsie i" : : : "memory");
    3410:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    3412:	f3bf 8f6f 	isb	sy
			return ready ? (last1 - first1) : 0;
    3416:	2b00      	cmp	r3, #0
    3418:	d003      	beq.n	3422 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4a>
    341a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    341c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    341e:	1a18      	subs	r0, r3, r0
	}
    3420:	4770      	bx	lr
			return ready ? (last0 - first0) : 0;
    3422:	2000      	movs	r0, #0
    3424:	e7fc      	b.n	3420 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x48>
    3426:	46c0      	nop			; (mov r8, r8)

00003428 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    3428:	7a01      	ldrb	r1, [r0, #8]
	virtual void handleEndpoint()
    342a:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    342c:	000e      	movs	r6, r1
		if (usbd.epBank0IsTransferComplete(ep))
    342e:	6844      	ldr	r4, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    3430:	3608      	adds	r6, #8
    3432:	6825      	ldr	r5, [r4, #0]
    3434:	0172      	lsls	r2, r6, #5
    3436:	18aa      	adds	r2, r5, r2
    3438:	79d3      	ldrb	r3, [r2, #7]
    343a:	27ff      	movs	r7, #255	; 0xff
		if (usbd.epBank0IsTransferComplete(ep))
    343c:	07db      	lsls	r3, r3, #31
    343e:	d545      	bpl.n	34cc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa4>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    3440:	2301      	movs	r3, #1
    3442:	71d3      	strb	r3, [r2, #7]
    3444:	469c      	mov	ip, r3
			if (incoming == 0) {
    3446:	6943      	ldr	r3, [r0, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3448:	0149      	lsls	r1, r1, #5
    344a:	1862      	adds	r2, r4, r1
			if (incoming == 0) {
    344c:	2b00      	cmp	r3, #0
    344e:	d13e      	bne.n	34ce <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa6>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3450:	6893      	ldr	r3, [r2, #8]
    3452:	049b      	lsls	r3, r3, #18
    3454:	0c9b      	lsrs	r3, r3, #18
				last0 = usbd.epBank0ByteCount(ep);
    3456:	6203      	str	r3, [r0, #32]
				if (last0 != 0) {
    3458:	6a03      	ldr	r3, [r0, #32]
    345a:	2b00      	cmp	r3, #0
    345c:	d01c      	beq.n	3498 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
					incoming = 1;
    345e:	4663      	mov	r3, ip
    3460:	6143      	str	r3, [r0, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    3462:	6a83      	ldr	r3, [r0, #40]	; 0x28
    3464:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3466:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    346a:	b672      	cpsid	i
						ready0 = true;
    346c:	2324      	movs	r3, #36	; 0x24
    346e:	4661      	mov	r1, ip
    3470:	54c1      	strb	r1, [r0, r3]
						if (ready1) {
    3472:	3310      	adds	r3, #16
    3474:	5cc3      	ldrb	r3, [r0, r3]
    3476:	b2db      	uxtb	r3, r3
    3478:	2b00      	cmp	r3, #0
    347a:	d13e      	bne.n	34fa <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xd2>
						notify = false;
    347c:	2135      	movs	r1, #53	; 0x35
    347e:	5443      	strb	r3, [r0, r1]
		if (primask == 0) {
    3480:	2a00      	cmp	r2, #0
    3482:	d102      	bne.n	348a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x62>
  __ASM volatile ("cpsie i" : : : "memory");
    3484:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    3486:	f3bf 8f6f 	isb	sy
    348a:	6881      	ldr	r1, [r0, #8]
    348c:	6844      	ldr	r4, [r0, #4]
    348e:	4039      	ands	r1, r7
    3490:	000e      	movs	r6, r1
    3492:	6825      	ldr	r5, [r4, #0]
    3494:	3608      	adds	r6, #8
    3496:	0149      	lsls	r1, r1, #5
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3498:	2701      	movs	r7, #1
    349a:	186b      	adds	r3, r5, r1
    349c:	3309      	adds	r3, #9
    349e:	33ff      	adds	r3, #255	; 0xff
    34a0:	785a      	ldrb	r2, [r3, #1]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    34a2:	1864      	adds	r4, r4, r1
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    34a4:	433a      	orrs	r2, r7
    34a6:	705a      	strb	r2, [r3, #1]
		usbd.epBank0SetMultiPacketSize(ep, size);
    34a8:	68c0      	ldr	r0, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    34aa:	68a2      	ldr	r2, [r4, #8]
    34ac:	0481      	lsls	r1, r0, #18
    34ae:	4817      	ldr	r0, [pc, #92]	; (350c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xe4>)
    34b0:	0909      	lsrs	r1, r1, #4
    34b2:	4002      	ands	r2, r0
    34b4:	430a      	orrs	r2, r1
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    34b6:	2140      	movs	r1, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    34b8:	60a2      	str	r2, [r4, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    34ba:	68a2      	ldr	r2, [r4, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    34bc:	0173      	lsls	r3, r6, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    34be:	0b92      	lsrs	r2, r2, #14
    34c0:	0392      	lsls	r2, r2, #14
    34c2:	60a2      	str	r2, [r4, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    34c4:	18eb      	adds	r3, r5, r3
    34c6:	791a      	ldrb	r2, [r3, #4]
    34c8:	430a      	orrs	r2, r1
    34ca:	711a      	strb	r2, [r3, #4]
	}
    34cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    34ce:	6893      	ldr	r3, [r2, #8]
    34d0:	049b      	lsls	r3, r3, #18
    34d2:	0c9b      	lsrs	r3, r3, #18
				last1 = usbd.epBank0ByteCount(ep);
    34d4:	6303      	str	r3, [r0, #48]	; 0x30
				if (last1 != 0) {
    34d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    34d8:	2b00      	cmp	r3, #0
    34da:	d0dd      	beq.n	3498 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
					incoming = 0;
    34dc:	2300      	movs	r3, #0
    34de:	6143      	str	r3, [r0, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    34e0:	6983      	ldr	r3, [r0, #24]
    34e2:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    34e4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    34e8:	b672      	cpsid	i
						ready1 = true;
    34ea:	2334      	movs	r3, #52	; 0x34
    34ec:	4661      	mov	r1, ip
    34ee:	54c1      	strb	r1, [r0, r3]
						if (ready0) {
    34f0:	3b10      	subs	r3, #16
    34f2:	5cc3      	ldrb	r3, [r0, r3]
    34f4:	b2db      	uxtb	r3, r3
    34f6:	2b00      	cmp	r3, #0
    34f8:	d0c0      	beq.n	347c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x54>
							notify = true;
    34fa:	2335      	movs	r3, #53	; 0x35
    34fc:	4661      	mov	r1, ip
    34fe:	54c1      	strb	r1, [r0, r3]
		if (primask == 0) {
    3500:	2a00      	cmp	r2, #0
    3502:	d1e3      	bne.n	34cc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa4>
  __ASM volatile ("cpsie i" : : : "memory");
    3504:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    3506:	f3bf 8f6f 	isb	sy
    350a:	e7df      	b.n	34cc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa4>
    350c:	f0003fff 	.word	0xf0003fff

00003510 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    3510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3512:	4647      	mov	r7, r8
    3514:	46ce      	mov	lr, r9
    3516:	b580      	push	{r7, lr}
    3518:	000c      	movs	r4, r1
    351a:	af00      	add	r7, sp, #0
    351c:	0015      	movs	r5, r2
	if (maxlen < 2)
    351e:	2a01      	cmp	r2, #1
    3520:	dd47      	ble.n	35b2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xa2>
		return false;

	uint8_t buffer[maxlen];
    3522:	1dd3      	adds	r3, r2, #7
    3524:	466a      	mov	r2, sp
    3526:	08db      	lsrs	r3, r3, #3
    3528:	00db      	lsls	r3, r3, #3
    352a:	1ad3      	subs	r3, r2, r3
    352c:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    352e:	0008      	movs	r0, r1
    3530:	f00d fb06 	bl	10b40 <strlen>
	uint8_t buffer[maxlen];
    3534:	466e      	mov	r6, sp
	buffer[1] = 0x03;
    3536:	2303      	movs	r3, #3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    3538:	3001      	adds	r0, #1
    353a:	0040      	lsls	r0, r0, #1
    353c:	7030      	strb	r0, [r6, #0]
	buffer[1] = 0x03;
    353e:	7073      	strb	r3, [r6, #1]

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    3540:	2d02      	cmp	r5, #2
    3542:	d03e      	beq.n	35c2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xb2>
    3544:	7823      	ldrb	r3, [r4, #0]
    3546:	2b00      	cmp	r3, #0
    3548:	d03b      	beq.n	35c2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xb2>
		buffer[i++] = *string++;
    354a:	1c61      	adds	r1, r4, #1
    354c:	70b3      	strb	r3, [r6, #2]
		if (i == maxlen) break;
    354e:	2d03      	cmp	r5, #3
    3550:	d050      	beq.n	35f4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xe4>
    3552:	2303      	movs	r3, #3
		buffer[i] = 0;
    3554:	2000      	movs	r0, #0
    3556:	e008      	b.n	356a <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5a>
	for (i = 2; i < maxlen && *string; i++) {
    3558:	780a      	ldrb	r2, [r1, #0]
    355a:	2a00      	cmp	r2, #0
    355c:	d00a      	beq.n	3574 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x64>
		buffer[i++] = *string++;
    355e:	3302      	adds	r3, #2
    3560:	b2db      	uxtb	r3, r3
    3562:	3101      	adds	r1, #1
    3564:	5532      	strb	r2, [r6, r4]
		if (i == maxlen) break;
    3566:	429d      	cmp	r5, r3
    3568:	d025      	beq.n	35b6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xa6>
	for (i = 2; i < maxlen && *string; i++) {
    356a:	1c5c      	adds	r4, r3, #1
    356c:	b2e4      	uxtb	r4, r4
		buffer[i] = 0;
    356e:	54f0      	strb	r0, [r6, r3]
	for (i = 2; i < maxlen && *string; i++) {
    3570:	42a5      	cmp	r5, r4
    3572:	dcf1      	bgt.n	3558 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x48>
    3574:	0025      	movs	r5, r4
    3576:	1e6b      	subs	r3, r5, #1
    3578:	419d      	sbcs	r5, r3
    357a:	0022      	movs	r2, r4
    357c:	b2ed      	uxtb	r5, r5
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    357e:	4b1f      	ldr	r3, [pc, #124]	; (35fc <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xec>)
    3580:	781b      	ldrb	r3, [r3, #0]
    3582:	2b00      	cmp	r3, #0
    3584:	d10f      	bne.n	35a6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x96>
		return length;

	if (_pack_message == true) {
    3586:	4b1e      	ldr	r3, [pc, #120]	; (3600 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xf0>)
    3588:	781b      	ldrb	r3, [r3, #0]
    358a:	2b00      	cmp	r3, #0
    358c:	d01d      	beq.n	35ca <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xba>
		memcpy(&_pack_buffer[_pack_size], data, len);
    358e:	4b1d      	ldr	r3, [pc, #116]	; (3604 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xf4>)
    3590:	481d      	ldr	r0, [pc, #116]	; (3608 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xf8>)
    3592:	4699      	mov	r9, r3
    3594:	881b      	ldrh	r3, [r3, #0]
    3596:	0031      	movs	r1, r6
    3598:	4698      	mov	r8, r3
    359a:	4440      	add	r0, r8
    359c:	f00d f9e5 	bl	1096a <memcpy>
		_pack_size += len;
    35a0:	464b      	mov	r3, r9
    35a2:	4444      	add	r4, r8
    35a4:	801c      	strh	r4, [r3, #0]
}
    35a6:	46bd      	mov	sp, r7
    35a8:	0028      	movs	r0, r5
    35aa:	bc0c      	pop	{r2, r3}
    35ac:	4690      	mov	r8, r2
    35ae:	4699      	mov	r9, r3
    35b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    35b2:	2500      	movs	r5, #0
    35b4:	e7f7      	b.n	35a6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x96>
    35b6:	002a      	movs	r2, r5
    35b8:	1e6b      	subs	r3, r5, #1
    35ba:	419d      	sbcs	r5, r3
		if (i == maxlen) break;
    35bc:	0014      	movs	r4, r2
    35be:	b2ed      	uxtb	r5, r5
    35c0:	e7dd      	b.n	357e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x6e>
	for (i = 2; i < maxlen && *string; i++) {
    35c2:	2501      	movs	r5, #1
    35c4:	2202      	movs	r2, #2
    35c6:	2402      	movs	r4, #2
    35c8:	e7d9      	b.n	357e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x6e>
		return length;
	}

 	while (len > 0)
    35ca:	2a00      	cmp	r2, #0
    35cc:	d0eb      	beq.n	35a6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x96>
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    35ce:	4b0f      	ldr	r3, [pc, #60]	; (360c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xfc>)
    35d0:	0031      	movs	r1, r6
    35d2:	4698      	mov	r8, r3
    35d4:	0018      	movs	r0, r3
    35d6:	f00d f9c8 	bl	1096a <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    35da:	4643      	mov	r3, r8
    35dc:	4a0c      	ldr	r2, [pc, #48]	; (3610 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x100>)
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    35de:	490d      	ldr	r1, [pc, #52]	; (3614 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x104>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    35e0:	6153      	str	r3, [r2, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    35e2:	6993      	ldr	r3, [r2, #24]
    35e4:	400b      	ands	r3, r1
    35e6:	6193      	str	r3, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    35e8:	6993      	ldr	r3, [r2, #24]
    35ea:	0b9b      	lsrs	r3, r3, #14
    35ec:	039b      	lsls	r3, r3, #14
    35ee:	431c      	orrs	r4, r3
    35f0:	6194      	str	r4, [r2, #24]
    35f2:	e7d8      	b.n	35a6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x96>
		buffer[i++] = *string++;
    35f4:	2403      	movs	r4, #3
		if (i == maxlen) break;
    35f6:	2501      	movs	r5, #1
    35f8:	2203      	movs	r2, #3
    35fa:	e7c0      	b.n	357e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x6e>
    35fc:	20000578 	.word	0x20000578
    3600:	2000067c 	.word	0x2000067c
    3604:	2000067e 	.word	0x2000067e
    3608:	2000057c 	.word	0x2000057c
    360c:	200001f8 	.word	0x200001f8
    3610:	20000688 	.word	0x20000688
    3614:	f0003fff 	.word	0xf0003fff

00003618 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    3618:	b5f0      	push	{r4, r5, r6, r7, lr}
    361a:	46de      	mov	lr, fp
    361c:	4657      	mov	r7, sl
    361e:	464e      	mov	r6, r9
    3620:	4645      	mov	r5, r8
	_dry_run = true;
    3622:	2301      	movs	r3, #1
{
    3624:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t interfaces = 0;
    3626:	2600      	movs	r6, #0
{
    3628:	b087      	sub	sp, #28
	uint8_t interfaces = 0;
    362a:	ac03      	add	r4, sp, #12
	_dry_run = true;
    362c:	4f44      	ldr	r7, [pc, #272]	; (3740 <_ZN14USBDeviceClass17sendConfigurationEm+0x128>)
	total[0] += CDC_GetInterface(&interfaces);
    362e:	0020      	movs	r0, r4
	_dry_run = true;
    3630:	4698      	mov	r8, r3
{
    3632:	468a      	mov	sl, r1
	_dry_run = true;
    3634:	703b      	strb	r3, [r7, #0]
	uint8_t interfaces = 0;
    3636:	7026      	strb	r6, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    3638:	f00c fef0 	bl	1041c <_Z16CDC_GetInterfacePh>
    363c:	0005      	movs	r5, r0
	total[0] += PluggableUSB().getInterface(&interfaces);
    363e:	f00c ffaf 	bl	105a0 <_Z12PluggableUSBv>
    3642:	0021      	movs	r1, r4
    3644:	f00c ff50 	bl	104e8 <_ZN13PluggableUSB_12getInterfaceEPh>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    3648:	2209      	movs	r2, #9
	return interfaces;
    364a:	7823      	ldrb	r3, [r4, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    364c:	4683      	mov	fp, r0
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    364e:	2100      	movs	r1, #0
    3650:	0020      	movs	r0, r4
	return interfaces;
    3652:	9301      	str	r3, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    3654:	4691      	mov	r9, r2
    3656:	f00d f991 	bl	1097c <memset>
    365a:	2302      	movs	r3, #2
    365c:	7063      	strb	r3, [r4, #1]
    365e:	339e      	adds	r3, #158	; 0x9e
    3660:	71e3      	strb	r3, [r4, #7]
    3662:	335a      	adds	r3, #90	; 0x5a
    3664:	7223      	strb	r3, [r4, #8]
    3666:	466b      	mov	r3, sp
    3668:	464a      	mov	r2, r9
    366a:	791b      	ldrb	r3, [r3, #4]
    366c:	7022      	strb	r2, [r4, #0]
    366e:	7123      	strb	r3, [r4, #4]
    3670:	4642      	mov	r2, r8
	if (maxlen == sizeof(ConfigDescriptor)) {
    3672:	4653      	mov	r3, sl
	total[0] += PluggableUSB().getInterface(&interfaces);
    3674:	445d      	add	r5, fp
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    3676:	3509      	adds	r5, #9
    3678:	7162      	strb	r2, [r4, #5]
    367a:	8065      	strh	r5, [r4, #2]
	_dry_run = false;
    367c:	703e      	strb	r6, [r7, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    367e:	2b09      	cmp	r3, #9
    3680:	d03c      	beq.n	36fc <_ZN14USBDeviceClass17sendConfigurationEm+0xe4>
		_pack_message = true;
    3682:	4642      	mov	r2, r8
    3684:	4b2f      	ldr	r3, [pc, #188]	; (3744 <_ZN14USBDeviceClass17sendConfigurationEm+0x12c>)
		memcpy(&_pack_buffer[_pack_size], data, len);
    3686:	4d30      	ldr	r5, [pc, #192]	; (3748 <_ZN14USBDeviceClass17sendConfigurationEm+0x130>)
		_pack_message = true;
    3688:	701a      	strb	r2, [r3, #0]
    368a:	469a      	mov	sl, r3
		memcpy(&_pack_buffer[_pack_size], data, len);
    368c:	002b      	movs	r3, r5
    368e:	cc06      	ldmia	r4!, {r1, r2}
    3690:	c306      	stmia	r3!, {r1, r2}
    3692:	7822      	ldrb	r2, [r4, #0]
    3694:	701a      	strb	r2, [r3, #0]
		_pack_size += len;
    3696:	464a      	mov	r2, r9
    3698:	4b2c      	ldr	r3, [pc, #176]	; (374c <_ZN14USBDeviceClass17sendConfigurationEm+0x134>)
    369a:	801a      	strh	r2, [r3, #0]
    369c:	4698      	mov	r8, r3
	uint8_t interfaces = 0;
    369e:	ab02      	add	r3, sp, #8
    36a0:	1cdc      	adds	r4, r3, #3
	total[0] += CDC_GetInterface(&interfaces);
    36a2:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    36a4:	70de      	strb	r6, [r3, #3]
	total[0] += CDC_GetInterface(&interfaces);
    36a6:	f00c feb9 	bl	1041c <_Z16CDC_GetInterfacePh>
	total[0] += PluggableUSB().getInterface(&interfaces);
    36aa:	f00c ff79 	bl	105a0 <_Z12PluggableUSBv>
    36ae:	0021      	movs	r1, r4
    36b0:	f00c ff1a 	bl	104e8 <_ZN13PluggableUSB_12getInterfaceEPh>
		_pack_message = false;
    36b4:	4653      	mov	r3, sl
    36b6:	701e      	strb	r6, [r3, #0]
	if (_dry_run == true)
    36b8:	783b      	ldrb	r3, [r7, #0]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d116      	bne.n	36ec <_ZN14USBDeviceClass17sendConfigurationEm+0xd4>
		sendControl(_pack_buffer, _pack_size);
    36be:	4643      	mov	r3, r8
    36c0:	881c      	ldrh	r4, [r3, #0]
 	while (len > 0)
    36c2:	2c00      	cmp	r4, #0
    36c4:	d012      	beq.n	36ec <_ZN14USBDeviceClass17sendConfigurationEm+0xd4>
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    36c6:	4e22      	ldr	r6, [pc, #136]	; (3750 <_ZN14USBDeviceClass17sendConfigurationEm+0x138>)
    36c8:	0022      	movs	r2, r4
    36ca:	0029      	movs	r1, r5
    36cc:	0030      	movs	r0, r6
    36ce:	f00d f94c 	bl	1096a <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    36d2:	4a20      	ldr	r2, [pc, #128]	; (3754 <_ZN14USBDeviceClass17sendConfigurationEm+0x13c>)
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    36d4:	4920      	ldr	r1, [pc, #128]	; (3758 <_ZN14USBDeviceClass17sendConfigurationEm+0x140>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    36d6:	6156      	str	r6, [r2, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    36d8:	6993      	ldr	r3, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    36da:	04a4      	lsls	r4, r4, #18
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    36dc:	400b      	ands	r3, r1
    36de:	6193      	str	r3, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    36e0:	6993      	ldr	r3, [r2, #24]
    36e2:	0ca4      	lsrs	r4, r4, #18
    36e4:	0b9b      	lsrs	r3, r3, #14
    36e6:	039b      	lsls	r3, r3, #14
    36e8:	431c      	orrs	r4, r3
    36ea:	6194      	str	r4, [r2, #24]
}
    36ec:	2001      	movs	r0, #1
    36ee:	b007      	add	sp, #28
    36f0:	bc3c      	pop	{r2, r3, r4, r5}
    36f2:	4690      	mov	r8, r2
    36f4:	4699      	mov	r9, r3
    36f6:	46a2      	mov	sl, r4
    36f8:	46ab      	mov	fp, r5
    36fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_pack_message == true) {
    36fc:	4b11      	ldr	r3, [pc, #68]	; (3744 <_ZN14USBDeviceClass17sendConfigurationEm+0x12c>)
    36fe:	781b      	ldrb	r3, [r3, #0]
    3700:	2b00      	cmp	r3, #0
    3702:	d00a      	beq.n	371a <_ZN14USBDeviceClass17sendConfigurationEm+0x102>
		memcpy(&_pack_buffer[_pack_size], data, len);
    3704:	4e11      	ldr	r6, [pc, #68]	; (374c <_ZN14USBDeviceClass17sendConfigurationEm+0x134>)
    3706:	4810      	ldr	r0, [pc, #64]	; (3748 <_ZN14USBDeviceClass17sendConfigurationEm+0x130>)
    3708:	8835      	ldrh	r5, [r6, #0]
    370a:	2209      	movs	r2, #9
    370c:	1940      	adds	r0, r0, r5
    370e:	0021      	movs	r1, r4
		_pack_size += len;
    3710:	3509      	adds	r5, #9
		memcpy(&_pack_buffer[_pack_size], data, len);
    3712:	f00d f92a 	bl	1096a <memcpy>
		_pack_size += len;
    3716:	8035      	strh	r5, [r6, #0]
    3718:	e7e8      	b.n	36ec <_ZN14USBDeviceClass17sendConfigurationEm+0xd4>
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    371a:	4b0d      	ldr	r3, [pc, #52]	; (3750 <_ZN14USBDeviceClass17sendConfigurationEm+0x138>)
    371c:	001a      	movs	r2, r3
    371e:	cc03      	ldmia	r4!, {r0, r1}
    3720:	c203      	stmia	r2!, {r0, r1}
    3722:	7821      	ldrb	r1, [r4, #0]
    3724:	7011      	strb	r1, [r2, #0]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3726:	4a0b      	ldr	r2, [pc, #44]	; (3754 <_ZN14USBDeviceClass17sendConfigurationEm+0x13c>)
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3728:	490b      	ldr	r1, [pc, #44]	; (3758 <_ZN14USBDeviceClass17sendConfigurationEm+0x140>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    372a:	6153      	str	r3, [r2, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    372c:	6993      	ldr	r3, [r2, #24]
    372e:	400b      	ands	r3, r1
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3730:	4651      	mov	r1, sl
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3732:	6193      	str	r3, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3734:	6993      	ldr	r3, [r2, #24]
    3736:	0b9b      	lsrs	r3, r3, #14
    3738:	039b      	lsls	r3, r3, #14
    373a:	430b      	orrs	r3, r1
    373c:	6193      	str	r3, [r2, #24]
    373e:	e7d5      	b.n	36ec <_ZN14USBDeviceClass17sendConfigurationEm+0xd4>
    3740:	20000578 	.word	0x20000578
    3744:	2000067c 	.word	0x2000067c
    3748:	2000057c 	.word	0x2000057c
    374c:	2000067e 	.word	0x2000067e
    3750:	200001f8 	.word	0x200001f8
    3754:	20000688 	.word	0x20000688
    3758:	f0003fff 	.word	0xf0003fff

0000375c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    375c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t t = setup.wValueH;
    375e:	78ce      	ldrb	r6, [r1, #3]
{
    3760:	b093      	sub	sp, #76	; 0x4c
    3762:	0007      	movs	r7, r0
    3764:	000d      	movs	r5, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    3766:	2e02      	cmp	r6, #2
    3768:	d012      	beq.n	3790 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x34>
	ret = PluggableUSB().getDescriptor(setup);
    376a:	f00c ff19 	bl	105a0 <_Z12PluggableUSBv>
    376e:	0029      	movs	r1, r5
    3770:	f00c fed0 	bl	10514 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    3774:	2800      	cmp	r0, #0
    3776:	d107      	bne.n	3788 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x2c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    3778:	2e01      	cmp	r6, #1
    377a:	d011      	beq.n	37a0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x44>
		return false;
    377c:	2400      	movs	r4, #0
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    377e:	2e03      	cmp	r6, #3
    3780:	d03e      	beq.n	3800 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa4>
}
    3782:	0020      	movs	r0, r4
    3784:	b013      	add	sp, #76	; 0x4c
    3786:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (ret > 0 ? true : false);
    3788:	17c4      	asrs	r4, r0, #31
    378a:	1a24      	subs	r4, r4, r0
    378c:	0fe4      	lsrs	r4, r4, #31
    378e:	e7f8      	b.n	3782 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		return USBDevice.sendConfiguration(setup.wLength);
    3790:	88c9      	ldrh	r1, [r1, #6]
    3792:	48d0      	ldr	r0, [pc, #832]	; (3ad4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x378>)
    3794:	f7ff ff40 	bl	3618 <_ZN14USBDeviceClass17sendConfigurationEm>
    3798:	1e44      	subs	r4, r0, #1
    379a:	41a0      	sbcs	r0, r4
    379c:	b2c4      	uxtb	r4, r0
    379e:	e7f0      	b.n	3782 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		if (setup.wLength == 8)
    37a0:	88eb      	ldrh	r3, [r5, #6]
		if (*desc_addr > setup.wLength) {
    37a2:	2b11      	cmp	r3, #17
    37a4:	dd00      	ble.n	37a8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x4c>
    37a6:	e189      	b.n	3abc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x360>
    37a8:	2212      	movs	r2, #18
    37aa:	2512      	movs	r5, #18
		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;
    37ac:	49ca      	ldr	r1, [pc, #808]	; (3ad8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x37c>)
			desc_length = setup.wLength;
    37ae:	b2db      	uxtb	r3, r3
	if (desc_length == 0) {
    37b0:	2b00      	cmp	r3, #0
    37b2:	d001      	beq.n	37b8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5c>
    37b4:	001a      	movs	r2, r3
    37b6:	001d      	movs	r5, r3
	if (_dry_run == true)
    37b8:	4bc8      	ldr	r3, [pc, #800]	; (3adc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x380>)
    37ba:	781c      	ldrb	r4, [r3, #0]
    37bc:	2c00      	cmp	r4, #0
    37be:	d1e0      	bne.n	3782 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
	if (_pack_message == true) {
    37c0:	4bc7      	ldr	r3, [pc, #796]	; (3ae0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x384>)
    37c2:	781c      	ldrb	r4, [r3, #0]
    37c4:	2c00      	cmp	r4, #0
    37c6:	d008      	beq.n	37da <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x7e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    37c8:	4fc6      	ldr	r7, [pc, #792]	; (3ae4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x388>)
    37ca:	48c7      	ldr	r0, [pc, #796]	; (3ae8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x38c>)
    37cc:	883e      	ldrh	r6, [r7, #0]
    37ce:	1980      	adds	r0, r0, r6
		_pack_size += len;
    37d0:	1975      	adds	r5, r6, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    37d2:	f00d f8ca 	bl	1096a <memcpy>
		_pack_size += len;
    37d6:	803d      	strh	r5, [r7, #0]
    37d8:	e7d3      	b.n	3782 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    37da:	4cc4      	ldr	r4, [pc, #784]	; (3aec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x390>)
    37dc:	04ad      	lsls	r5, r5, #18
    37de:	0020      	movs	r0, r4
    37e0:	f00d f8c3 	bl	1096a <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    37e4:	4ac2      	ldr	r2, [pc, #776]	; (3af0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x394>)
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    37e6:	49c3      	ldr	r1, [pc, #780]	; (3af4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x398>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    37e8:	6154      	str	r4, [r2, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    37ea:	6993      	ldr	r3, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    37ec:	0cad      	lsrs	r5, r5, #18
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    37ee:	400b      	ands	r3, r1
    37f0:	6193      	str	r3, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    37f2:	6993      	ldr	r3, [r2, #24]
	return true;
    37f4:	2401      	movs	r4, #1
    37f6:	0b9b      	lsrs	r3, r3, #14
    37f8:	039b      	lsls	r3, r3, #14
    37fa:	432b      	orrs	r3, r5
    37fc:	6193      	str	r3, [r2, #24]
    37fe:	e7c0      	b.n	3782 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		if (setup.wValueL == 0) {
    3800:	78ab      	ldrb	r3, [r5, #2]
    3802:	2b00      	cmp	r3, #0
    3804:	d100      	bne.n	3808 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xac>
    3806:	e15d      	b.n	3ac4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x368>
		else if (setup.wValueL == IPRODUCT) {
    3808:	2b02      	cmp	r3, #2
    380a:	d100      	bne.n	380e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb2>
    380c:	e183      	b.n	3b16 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3ba>
		else if (setup.wValueL == IMANUFACTURER) {
    380e:	2b01      	cmp	r3, #1
    3810:	d100      	bne.n	3814 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb8>
    3812:	e187      	b.n	3b24 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3c8>
		return false;
    3814:	0004      	movs	r4, r0
		else if (setup.wValueL == ISERIAL) {
    3816:	2b03      	cmp	r3, #3
    3818:	d1b3      	bne.n	3782 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		int d = val & 0XF;
    381a:	220f      	movs	r2, #15
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    381c:	4bb6      	ldr	r3, [pc, #728]	; (3af8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x39c>)
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    381e:	ac01      	add	r4, sp, #4
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    3820:	681b      	ldr	r3, [r3, #0]
		int d = val & 0XF;
    3822:	401a      	ands	r2, r3
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3824:	b2d0      	uxtb	r0, r2
    3826:	0001      	movs	r1, r0
    3828:	3130      	adds	r1, #48	; 0x30
    382a:	2a09      	cmp	r2, #9
    382c:	dd01      	ble.n	3832 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd6>
    382e:	3037      	adds	r0, #55	; 0x37
    3830:	0001      	movs	r1, r0
		int d = val & 0XF;
    3832:	061a      	lsls	r2, r3, #24
    3834:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3836:	b2d0      	uxtb	r0, r2
    3838:	71e1      	strb	r1, [r4, #7]
    383a:	0001      	movs	r1, r0
    383c:	3130      	adds	r1, #48	; 0x30
    383e:	2a09      	cmp	r2, #9
    3840:	dd01      	ble.n	3846 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xea>
    3842:	3037      	adds	r0, #55	; 0x37
    3844:	0001      	movs	r1, r0
		int d = val & 0XF;
    3846:	051a      	lsls	r2, r3, #20
    3848:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    384a:	b2d0      	uxtb	r0, r2
    384c:	71a1      	strb	r1, [r4, #6]
    384e:	0001      	movs	r1, r0
    3850:	3130      	adds	r1, #48	; 0x30
    3852:	2a09      	cmp	r2, #9
    3854:	dd01      	ble.n	385a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xfe>
    3856:	3037      	adds	r0, #55	; 0x37
    3858:	0001      	movs	r1, r0
		int d = val & 0XF;
    385a:	041a      	lsls	r2, r3, #16
    385c:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    385e:	b2d0      	uxtb	r0, r2
    3860:	7161      	strb	r1, [r4, #5]
    3862:	0001      	movs	r1, r0
    3864:	3130      	adds	r1, #48	; 0x30
    3866:	2a09      	cmp	r2, #9
    3868:	dd01      	ble.n	386e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x112>
    386a:	3037      	adds	r0, #55	; 0x37
    386c:	0001      	movs	r1, r0
		int d = val & 0XF;
    386e:	031a      	lsls	r2, r3, #12
    3870:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3872:	b2d0      	uxtb	r0, r2
    3874:	7121      	strb	r1, [r4, #4]
    3876:	0001      	movs	r1, r0
    3878:	3130      	adds	r1, #48	; 0x30
    387a:	2a09      	cmp	r2, #9
    387c:	dd01      	ble.n	3882 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x126>
    387e:	3037      	adds	r0, #55	; 0x37
    3880:	0001      	movs	r1, r0
		int d = val & 0XF;
    3882:	021a      	lsls	r2, r3, #8
    3884:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3886:	b2d0      	uxtb	r0, r2
    3888:	70e1      	strb	r1, [r4, #3]
    388a:	0001      	movs	r1, r0
    388c:	3130      	adds	r1, #48	; 0x30
    388e:	2a09      	cmp	r2, #9
    3890:	dd01      	ble.n	3896 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x13a>
    3892:	3037      	adds	r0, #55	; 0x37
    3894:	0001      	movs	r1, r0
		int d = val & 0XF;
    3896:	011a      	lsls	r2, r3, #4
    3898:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    389a:	b2d0      	uxtb	r0, r2
    389c:	70a1      	strb	r1, [r4, #2]
    389e:	0001      	movs	r1, r0
		val = (val >> 4);
    38a0:	0f1b      	lsrs	r3, r3, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    38a2:	3130      	adds	r1, #48	; 0x30
    38a4:	2a09      	cmp	r2, #9
    38a6:	dd01      	ble.n	38ac <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x150>
    38a8:	3037      	adds	r0, #55	; 0x37
    38aa:	0001      	movs	r1, r0
    38ac:	7061      	strb	r1, [r4, #1]
    38ae:	b2d9      	uxtb	r1, r3
    38b0:	000a      	movs	r2, r1
    38b2:	3230      	adds	r2, #48	; 0x30
    38b4:	2b09      	cmp	r3, #9
    38b6:	dd01      	ble.n	38bc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x160>
    38b8:	3137      	adds	r1, #55	; 0x37
    38ba:	000a      	movs	r2, r1
    38bc:	7022      	strb	r2, [r4, #0]
		int d = val & 0XF;
    38be:	220f      	movs	r2, #15
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    38c0:	4b8e      	ldr	r3, [pc, #568]	; (3afc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3a0>)
    38c2:	681b      	ldr	r3, [r3, #0]
		int d = val & 0XF;
    38c4:	401a      	ands	r2, r3
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    38c6:	b2d0      	uxtb	r0, r2
    38c8:	0001      	movs	r1, r0
    38ca:	3130      	adds	r1, #48	; 0x30
    38cc:	2a09      	cmp	r2, #9
    38ce:	dd01      	ble.n	38d4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x178>
    38d0:	3037      	adds	r0, #55	; 0x37
    38d2:	0001      	movs	r1, r0
		int d = val & 0XF;
    38d4:	061a      	lsls	r2, r3, #24
    38d6:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    38d8:	b2d0      	uxtb	r0, r2
    38da:	73e1      	strb	r1, [r4, #15]
    38dc:	0001      	movs	r1, r0
    38de:	3130      	adds	r1, #48	; 0x30
    38e0:	2a09      	cmp	r2, #9
    38e2:	dd01      	ble.n	38e8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x18c>
    38e4:	3037      	adds	r0, #55	; 0x37
    38e6:	0001      	movs	r1, r0
		int d = val & 0XF;
    38e8:	051a      	lsls	r2, r3, #20
    38ea:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    38ec:	b2d0      	uxtb	r0, r2
    38ee:	73a1      	strb	r1, [r4, #14]
    38f0:	0001      	movs	r1, r0
    38f2:	3130      	adds	r1, #48	; 0x30
    38f4:	2a09      	cmp	r2, #9
    38f6:	dd01      	ble.n	38fc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1a0>
    38f8:	3037      	adds	r0, #55	; 0x37
    38fa:	0001      	movs	r1, r0
		int d = val & 0XF;
    38fc:	041a      	lsls	r2, r3, #16
    38fe:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3900:	b2d0      	uxtb	r0, r2
    3902:	7361      	strb	r1, [r4, #13]
    3904:	0001      	movs	r1, r0
    3906:	3130      	adds	r1, #48	; 0x30
    3908:	2a09      	cmp	r2, #9
    390a:	dd01      	ble.n	3910 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1b4>
    390c:	3037      	adds	r0, #55	; 0x37
    390e:	0001      	movs	r1, r0
		int d = val & 0XF;
    3910:	031a      	lsls	r2, r3, #12
    3912:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3914:	b2d0      	uxtb	r0, r2
    3916:	7321      	strb	r1, [r4, #12]
    3918:	0001      	movs	r1, r0
    391a:	3130      	adds	r1, #48	; 0x30
    391c:	2a09      	cmp	r2, #9
    391e:	dd01      	ble.n	3924 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
    3920:	3037      	adds	r0, #55	; 0x37
    3922:	0001      	movs	r1, r0
		int d = val & 0XF;
    3924:	021a      	lsls	r2, r3, #8
    3926:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3928:	b2d0      	uxtb	r0, r2
    392a:	72e1      	strb	r1, [r4, #11]
    392c:	0001      	movs	r1, r0
    392e:	3130      	adds	r1, #48	; 0x30
    3930:	2a09      	cmp	r2, #9
    3932:	dd01      	ble.n	3938 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1dc>
    3934:	3037      	adds	r0, #55	; 0x37
    3936:	0001      	movs	r1, r0
		int d = val & 0XF;
    3938:	011a      	lsls	r2, r3, #4
    393a:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    393c:	b2d0      	uxtb	r0, r2
    393e:	72a1      	strb	r1, [r4, #10]
    3940:	0001      	movs	r1, r0
		val = (val >> 4);
    3942:	0f1b      	lsrs	r3, r3, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3944:	3130      	adds	r1, #48	; 0x30
    3946:	2a09      	cmp	r2, #9
    3948:	dd01      	ble.n	394e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1f2>
    394a:	3037      	adds	r0, #55	; 0x37
    394c:	0001      	movs	r1, r0
    394e:	7261      	strb	r1, [r4, #9]
    3950:	b2d9      	uxtb	r1, r3
    3952:	000a      	movs	r2, r1
    3954:	3230      	adds	r2, #48	; 0x30
    3956:	2b09      	cmp	r3, #9
    3958:	dd01      	ble.n	395e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x202>
    395a:	3137      	adds	r1, #55	; 0x37
    395c:	000a      	movs	r2, r1
    395e:	7222      	strb	r2, [r4, #8]
		int d = val & 0XF;
    3960:	220f      	movs	r2, #15
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    3962:	4b67      	ldr	r3, [pc, #412]	; (3b00 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3a4>)
    3964:	681b      	ldr	r3, [r3, #0]
		int d = val & 0XF;
    3966:	401a      	ands	r2, r3
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3968:	b2d0      	uxtb	r0, r2
    396a:	0001      	movs	r1, r0
    396c:	3130      	adds	r1, #48	; 0x30
    396e:	2a09      	cmp	r2, #9
    3970:	dd01      	ble.n	3976 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x21a>
    3972:	3037      	adds	r0, #55	; 0x37
    3974:	0001      	movs	r1, r0
		int d = val & 0XF;
    3976:	061a      	lsls	r2, r3, #24
    3978:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    397a:	b2d0      	uxtb	r0, r2
    397c:	75e1      	strb	r1, [r4, #23]
    397e:	0001      	movs	r1, r0
    3980:	3130      	adds	r1, #48	; 0x30
    3982:	2a09      	cmp	r2, #9
    3984:	dd01      	ble.n	398a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22e>
    3986:	3037      	adds	r0, #55	; 0x37
    3988:	0001      	movs	r1, r0
		int d = val & 0XF;
    398a:	051a      	lsls	r2, r3, #20
    398c:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    398e:	b2d0      	uxtb	r0, r2
    3990:	75a1      	strb	r1, [r4, #22]
    3992:	0001      	movs	r1, r0
    3994:	3130      	adds	r1, #48	; 0x30
    3996:	2a09      	cmp	r2, #9
    3998:	dd01      	ble.n	399e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x242>
    399a:	3037      	adds	r0, #55	; 0x37
    399c:	0001      	movs	r1, r0
		int d = val & 0XF;
    399e:	041a      	lsls	r2, r3, #16
    39a0:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    39a2:	b2d0      	uxtb	r0, r2
    39a4:	7561      	strb	r1, [r4, #21]
    39a6:	0001      	movs	r1, r0
    39a8:	3130      	adds	r1, #48	; 0x30
    39aa:	2a09      	cmp	r2, #9
    39ac:	dd01      	ble.n	39b2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x256>
    39ae:	3037      	adds	r0, #55	; 0x37
    39b0:	0001      	movs	r1, r0
		int d = val & 0XF;
    39b2:	031a      	lsls	r2, r3, #12
    39b4:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    39b6:	b2d0      	uxtb	r0, r2
    39b8:	7521      	strb	r1, [r4, #20]
    39ba:	0001      	movs	r1, r0
    39bc:	3130      	adds	r1, #48	; 0x30
    39be:	2a09      	cmp	r2, #9
    39c0:	dd01      	ble.n	39c6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26a>
    39c2:	3037      	adds	r0, #55	; 0x37
    39c4:	0001      	movs	r1, r0
		int d = val & 0XF;
    39c6:	021a      	lsls	r2, r3, #8
    39c8:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    39ca:	b2d0      	uxtb	r0, r2
    39cc:	74e1      	strb	r1, [r4, #19]
    39ce:	0001      	movs	r1, r0
    39d0:	3130      	adds	r1, #48	; 0x30
    39d2:	2a09      	cmp	r2, #9
    39d4:	dd01      	ble.n	39da <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x27e>
    39d6:	3037      	adds	r0, #55	; 0x37
    39d8:	0001      	movs	r1, r0
		int d = val & 0XF;
    39da:	011a      	lsls	r2, r3, #4
    39dc:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    39de:	b2d0      	uxtb	r0, r2
    39e0:	74a1      	strb	r1, [r4, #18]
    39e2:	0001      	movs	r1, r0
		val = (val >> 4);
    39e4:	0f1b      	lsrs	r3, r3, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    39e6:	3130      	adds	r1, #48	; 0x30
    39e8:	2a09      	cmp	r2, #9
    39ea:	dd01      	ble.n	39f0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x294>
    39ec:	3037      	adds	r0, #55	; 0x37
    39ee:	0001      	movs	r1, r0
    39f0:	7461      	strb	r1, [r4, #17]
    39f2:	b2d9      	uxtb	r1, r3
    39f4:	000a      	movs	r2, r1
    39f6:	3230      	adds	r2, #48	; 0x30
    39f8:	2b09      	cmp	r3, #9
    39fa:	dd01      	ble.n	3a00 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x2a4>
    39fc:	3137      	adds	r1, #55	; 0x37
    39fe:	000a      	movs	r2, r1
    3a00:	7422      	strb	r2, [r4, #16]
		int d = val & 0XF;
    3a02:	220f      	movs	r2, #15
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    3a04:	4b3f      	ldr	r3, [pc, #252]	; (3b04 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3a8>)
    3a06:	681b      	ldr	r3, [r3, #0]
		int d = val & 0XF;
    3a08:	401a      	ands	r2, r3
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3a0a:	b2d0      	uxtb	r0, r2
    3a0c:	0001      	movs	r1, r0
    3a0e:	3137      	adds	r1, #55	; 0x37
    3a10:	2a09      	cmp	r2, #9
    3a12:	dc01      	bgt.n	3a18 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x2bc>
    3a14:	3030      	adds	r0, #48	; 0x30
    3a16:	0001      	movs	r1, r0
		int d = val & 0XF;
    3a18:	061a      	lsls	r2, r3, #24
    3a1a:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3a1c:	b2d0      	uxtb	r0, r2
    3a1e:	77e1      	strb	r1, [r4, #31]
    3a20:	0001      	movs	r1, r0
    3a22:	3137      	adds	r1, #55	; 0x37
    3a24:	2a09      	cmp	r2, #9
    3a26:	dc01      	bgt.n	3a2c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x2d0>
    3a28:	3030      	adds	r0, #48	; 0x30
    3a2a:	0001      	movs	r1, r0
		int d = val & 0XF;
    3a2c:	051a      	lsls	r2, r3, #20
    3a2e:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3a30:	b2d0      	uxtb	r0, r2
    3a32:	77a1      	strb	r1, [r4, #30]
    3a34:	0001      	movs	r1, r0
    3a36:	3130      	adds	r1, #48	; 0x30
    3a38:	2a09      	cmp	r2, #9
    3a3a:	dd01      	ble.n	3a40 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x2e4>
    3a3c:	3037      	adds	r0, #55	; 0x37
    3a3e:	0001      	movs	r1, r0
		int d = val & 0XF;
    3a40:	041a      	lsls	r2, r3, #16
    3a42:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3a44:	b2d0      	uxtb	r0, r2
    3a46:	7761      	strb	r1, [r4, #29]
    3a48:	0001      	movs	r1, r0
    3a4a:	3130      	adds	r1, #48	; 0x30
    3a4c:	2a09      	cmp	r2, #9
    3a4e:	dd01      	ble.n	3a54 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x2f8>
    3a50:	3037      	adds	r0, #55	; 0x37
    3a52:	0001      	movs	r1, r0
		int d = val & 0XF;
    3a54:	031a      	lsls	r2, r3, #12
    3a56:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3a58:	b2d0      	uxtb	r0, r2
    3a5a:	7721      	strb	r1, [r4, #28]
    3a5c:	0001      	movs	r1, r0
    3a5e:	3130      	adds	r1, #48	; 0x30
    3a60:	2a09      	cmp	r2, #9
    3a62:	dd01      	ble.n	3a68 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x30c>
    3a64:	3037      	adds	r0, #55	; 0x37
    3a66:	0001      	movs	r1, r0
		int d = val & 0XF;
    3a68:	021a      	lsls	r2, r3, #8
    3a6a:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3a6c:	b2d0      	uxtb	r0, r2
    3a6e:	76e1      	strb	r1, [r4, #27]
    3a70:	0001      	movs	r1, r0
    3a72:	3130      	adds	r1, #48	; 0x30
    3a74:	2a09      	cmp	r2, #9
    3a76:	dd01      	ble.n	3a7c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x320>
    3a78:	3037      	adds	r0, #55	; 0x37
    3a7a:	0001      	movs	r1, r0
		int d = val & 0XF;
    3a7c:	011a      	lsls	r2, r3, #4
    3a7e:	0f12      	lsrs	r2, r2, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3a80:	b2d0      	uxtb	r0, r2
    3a82:	76a1      	strb	r1, [r4, #26]
    3a84:	0001      	movs	r1, r0
		val = (val >> 4);
    3a86:	0f1b      	lsrs	r3, r3, #28
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3a88:	3130      	adds	r1, #48	; 0x30
    3a8a:	2a09      	cmp	r2, #9
    3a8c:	dd01      	ble.n	3a92 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x336>
    3a8e:	3037      	adds	r0, #55	; 0x37
    3a90:	0001      	movs	r1, r0
    3a92:	7661      	strb	r1, [r4, #25]
    3a94:	b2d9      	uxtb	r1, r3
    3a96:	000a      	movs	r2, r1
    3a98:	3230      	adds	r2, #48	; 0x30
    3a9a:	2b09      	cmp	r3, #9
    3a9c:	dd01      	ble.n	3aa2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x346>
    3a9e:	3137      	adds	r1, #55	; 0x37
    3aa0:	000a      	movs	r2, r1
    3aa2:	7622      	strb	r2, [r4, #24]
			PluggableUSB().getShortName(&name[32]);
    3aa4:	f00c fd7c 	bl	105a0 <_Z12PluggableUSBv>
    3aa8:	a909      	add	r1, sp, #36	; 0x24
    3aaa:	f00c fd47 	bl	1053c <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    3aae:	0021      	movs	r1, r4
    3ab0:	79aa      	ldrb	r2, [r5, #6]
    3ab2:	0038      	movs	r0, r7
    3ab4:	f7ff fd2c 	bl	3510 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    3ab8:	0004      	movs	r4, r0
    3aba:	e662      	b.n	3782 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
    3abc:	2212      	movs	r2, #18
    3abe:	2512      	movs	r5, #18
		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;
    3ac0:	4905      	ldr	r1, [pc, #20]	; (3ad8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x37c>)
    3ac2:	e679      	b.n	37b8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5c>
		if (*desc_addr > setup.wLength) {
    3ac4:	88eb      	ldrh	r3, [r5, #6]
    3ac6:	2b03      	cmp	r3, #3
    3ac8:	dd20      	ble.n	3b0c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3b0>
    3aca:	2204      	movs	r2, #4
    3acc:	2504      	movs	r5, #4
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
    3ace:	490e      	ldr	r1, [pc, #56]	; (3b08 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3ac>)
    3ad0:	e672      	b.n	37b8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5c>
    3ad2:	46c0      	nop			; (mov r8, r8)
    3ad4:	200001cc 	.word	0x200001cc
    3ad8:	00010cbc 	.word	0x00010cbc
    3adc:	20000578 	.word	0x20000578
    3ae0:	2000067c 	.word	0x2000067c
    3ae4:	2000067e 	.word	0x2000067e
    3ae8:	2000057c 	.word	0x2000057c
    3aec:	200001f8 	.word	0x200001f8
    3af0:	20000688 	.word	0x20000688
    3af4:	f0003fff 	.word	0xf0003fff
    3af8:	0080a00c 	.word	0x0080a00c
    3afc:	0080a040 	.word	0x0080a040
    3b00:	0080a044 	.word	0x0080a044
    3b04:	0080a048 	.word	0x0080a048
    3b08:	00010cac 	.word	0x00010cac
			desc_length = setup.wLength;
    3b0c:	b2db      	uxtb	r3, r3
    3b0e:	2204      	movs	r2, #4
    3b10:	2504      	movs	r5, #4
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
    3b12:	4908      	ldr	r1, [pc, #32]	; (3b34 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3d8>)
    3b14:	e64c      	b.n	37b0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x54>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    3b16:	79aa      	ldrb	r2, [r5, #6]
    3b18:	4907      	ldr	r1, [pc, #28]	; (3b38 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3dc>)
    3b1a:	0038      	movs	r0, r7
    3b1c:	f7ff fcf8 	bl	3510 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    3b20:	0004      	movs	r4, r0
    3b22:	e62e      	b.n	3782 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3b24:	79aa      	ldrb	r2, [r5, #6]
    3b26:	4905      	ldr	r1, [pc, #20]	; (3b3c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3e0>)
    3b28:	0038      	movs	r0, r7
    3b2a:	f7ff fcf1 	bl	3510 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    3b2e:	0004      	movs	r4, r0
    3b30:	e627      	b.n	3782 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	00010cac 	.word	0x00010cac
    3b38:	00010c9c 	.word	0x00010c9c
    3b3c:	00010cb0 	.word	0x00010cb0

00003b40 <_ZN14USBDeviceClass4initEv>:
{
    3b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txLEDPulse = 0;
    3b42:	2400      	movs	r4, #0
    3b44:	4b4c      	ldr	r3, [pc, #304]	; (3c78 <_ZN14USBDeviceClass4initEv+0x138>)
	pinMode(PIN_LED_TXL, OUTPUT);
    3b46:	2101      	movs	r1, #1
{
    3b48:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    3b4a:	201f      	movs	r0, #31
	txLEDPulse = 0;
    3b4c:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    3b4e:	f000 ffef 	bl	4b30 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    3b52:	2101      	movs	r1, #1
    3b54:	201f      	movs	r0, #31
    3b56:	f001 f83b 	bl	4bd0 <digitalWrite>
	rxLEDPulse = 0;
    3b5a:	4b48      	ldr	r3, [pc, #288]	; (3c7c <_ZN14USBDeviceClass4initEv+0x13c>)
	pinMode(PIN_LED_RXL, OUTPUT);
    3b5c:	2101      	movs	r1, #1
    3b5e:	201e      	movs	r0, #30
	rxLEDPulse = 0;
    3b60:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    3b62:	f000 ffe5 	bl	4b30 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    3b66:	2101      	movs	r1, #1
    3b68:	201e      	movs	r0, #30
    3b6a:	f001 f831 	bl	4bd0 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    3b6e:	2120      	movs	r1, #32
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    3b70:	2601      	movs	r6, #1
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    3b72:	4a43      	ldr	r2, [pc, #268]	; (3c80 <_ZN14USBDeviceClass4initEv+0x140>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    3b74:	2006      	movs	r0, #6
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    3b76:	69d3      	ldr	r3, [r2, #28]
    3b78:	430b      	orrs	r3, r1
    3b7a:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    3b7c:	4b41      	ldr	r3, [pc, #260]	; (3c84 <_ZN14USBDeviceClass4initEv+0x144>)
    3b7e:	3138      	adds	r1, #56	; 0x38
    3b80:	5c5a      	ldrb	r2, [r3, r1]
    3b82:	4332      	orrs	r2, r6
    3b84:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    3b86:	223c      	movs	r2, #60	; 0x3c
    3b88:	5c9c      	ldrb	r4, [r3, r2]
    3b8a:	3949      	subs	r1, #73	; 0x49
    3b8c:	438c      	bics	r4, r1
    3b8e:	549c      	strb	r4, [r3, r2]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    3b90:	5c9c      	ldrb	r4, [r3, r2]
    3b92:	4304      	orrs	r4, r0
    3b94:	549c      	strb	r4, [r3, r2]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    3b96:	2459      	movs	r4, #89	; 0x59
    3b98:	5d18      	ldrb	r0, [r3, r4]
    3b9a:	4330      	orrs	r0, r6
    3b9c:	5518      	strb	r0, [r3, r4]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    3b9e:	5c98      	ldrb	r0, [r3, r2]
    3ba0:	4001      	ands	r1, r0
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    3ba2:	2060      	movs	r0, #96	; 0x60
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    3ba4:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    3ba6:	5c99      	ldrb	r1, [r3, r2]
    3ba8:	4301      	orrs	r1, r0
    3baa:	5499      	strb	r1, [r3, r2]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    3bac:	4a36      	ldr	r2, [pc, #216]	; (3c88 <_ZN14USBDeviceClass4initEv+0x148>)
    3bae:	4b37      	ldr	r3, [pc, #220]	; (3c8c <_ZN14USBDeviceClass4initEv+0x14c>)
    3bb0:	8053      	strh	r3, [r2, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    3bb2:	7853      	ldrb	r3, [r2, #1]
    3bb4:	09db      	lsrs	r3, r3, #7
    3bb6:	d1fc      	bne.n	3bb2 <_ZN14USBDeviceClass4initEv+0x72>
	USB_SetHandler(&UDD_Handler);
    3bb8:	4835      	ldr	r0, [pc, #212]	; (3c90 <_ZN14USBDeviceClass4initEv+0x150>)
    3bba:	f7fe ff81 	bl	2ac0 <USB_SetHandler>
	usb.CTRLA.bit.SWRST = 1;
    3bbe:	4e35      	ldr	r6, [pc, #212]	; (3c94 <_ZN14USBDeviceClass4initEv+0x154>)
    3bc0:	2201      	movs	r2, #1
    3bc2:	0030      	movs	r0, r6
    3bc4:	c810      	ldmia	r0!, {r4}
	memset(EP, 0, sizeof(EP));
    3bc6:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    3bc8:	7823      	ldrb	r3, [r4, #0]
    3bca:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    3bcc:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    3bce:	7023      	strb	r3, [r4, #0]
	memset(EP, 0, sizeof(EP));
    3bd0:	0052      	lsls	r2, r2, #1
    3bd2:	f00c fed3 	bl	1097c <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    3bd6:	78a3      	ldrb	r3, [r4, #2]
    3bd8:	07db      	lsls	r3, r3, #31
    3bda:	d4fc      	bmi.n	3bd6 <_ZN14USBDeviceClass4initEv+0x96>
	usb.DESCADD.reg = (uint32_t)(&EP);
    3bdc:	3604      	adds	r6, #4
    3bde:	6266      	str	r6, [r4, #36]	; 0x24
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    3be0:	261f      	movs	r6, #31
    3be2:	0030      	movs	r0, r6
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    3be4:	2707      	movs	r7, #7
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    3be6:	4b2c      	ldr	r3, [pc, #176]	; (3c98 <_ZN14USBDeviceClass4initEv+0x158>)
    3be8:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    3bea:	0c9a      	lsrs	r2, r3, #18
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    3bec:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    3bee:	4010      	ands	r0, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    3bf0:	0ddb      	lsrs	r3, r3, #23
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    3bf2:	4684      	mov	ip, r0
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    3bf4:	401f      	ands	r7, r3
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    3bf6:	400e      	ands	r6, r1
	if (pad_transn == 0x1F)  // maximum value (31)
    3bf8:	2e1f      	cmp	r6, #31
    3bfa:	d03a      	beq.n	3c72 <_ZN14USBDeviceClass4initEv+0x132>
    3bfc:	201f      	movs	r0, #31
    3bfe:	4008      	ands	r0, r1
	if (pad_transp == 0x1F)  // maximum value (31)
    3c00:	4661      	mov	r1, ip
    3c02:	291f      	cmp	r1, #31
    3c04:	d033      	beq.n	3c6e <_ZN14USBDeviceClass4initEv+0x12e>
    3c06:	261f      	movs	r6, #31
    3c08:	4016      	ands	r6, r2
	if (pad_trim == 0x7)     // maximum value (7)
    3c0a:	2f07      	cmp	r7, #7
    3c0c:	d100      	bne.n	3c10 <_ZN14USBDeviceClass4initEv+0xd0>
    3c0e:	2303      	movs	r3, #3
	usb.PADCAL.bit.TRANSN = pad_transn;
    3c10:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    3c12:	4a22      	ldr	r2, [pc, #136]	; (3c9c <_ZN14USBDeviceClass4initEv+0x15c>)
    3c14:	0180      	lsls	r0, r0, #6
    3c16:	4011      	ands	r1, r2
    3c18:	4301      	orrs	r1, r0
    3c1a:	8521      	strh	r1, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    3c1c:	211f      	movs	r1, #31
    3c1e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    3c20:	438a      	bics	r2, r1
    3c22:	4332      	orrs	r2, r6
    3c24:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    3c26:	3918      	subs	r1, #24
    3c28:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    3c2a:	4019      	ands	r1, r3
    3c2c:	4b1c      	ldr	r3, [pc, #112]	; (3ca0 <_ZN14USBDeviceClass4initEv+0x160>)
    3c2e:	0309      	lsls	r1, r1, #12
    3c30:	4013      	ands	r3, r2
    3c32:	430b      	orrs	r3, r1
    3c34:	8523      	strh	r3, [r4, #40]	; 0x28
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    3c36:	237f      	movs	r3, #127	; 0x7f
    3c38:	7822      	ldrb	r2, [r4, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3c3a:	21c1      	movs	r1, #193	; 0xc1
    3c3c:	4013      	ands	r3, r2
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    3c3e:	2204      	movs	r2, #4
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    3c40:	7023      	strb	r3, [r4, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    3c42:	7823      	ldrb	r3, [r4, #0]
    3c44:	0089      	lsls	r1, r1, #2
    3c46:	4313      	orrs	r3, r2
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    3c48:	220c      	movs	r2, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    3c4a:	7023      	strb	r3, [r4, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    3c4c:	8923      	ldrh	r3, [r4, #8]
    3c4e:	4393      	bics	r3, r2
    3c50:	4a14      	ldr	r2, [pc, #80]	; (3ca4 <_ZN14USBDeviceClass4initEv+0x164>)
    3c52:	8123      	strh	r3, [r4, #8]
    3c54:	5853      	ldr	r3, [r2, r1]
    3c56:	021b      	lsls	r3, r3, #8
    3c58:	0a1b      	lsrs	r3, r3, #8
    3c5a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3c5c:	2380      	movs	r3, #128	; 0x80
    3c5e:	6013      	str	r3, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    3c60:	2202      	movs	r2, #2
    3c62:	7823      	ldrb	r3, [r4, #0]
    3c64:	4313      	orrs	r3, r2
    3c66:	7023      	strb	r3, [r4, #0]
	initialized = true;
    3c68:	2301      	movs	r3, #1
    3c6a:	702b      	strb	r3, [r5, #0]
}
    3c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (pad_transp == 0x1F)  // maximum value (31)
    3c6e:	221d      	movs	r2, #29
    3c70:	e7c9      	b.n	3c06 <_ZN14USBDeviceClass4initEv+0xc6>
	if (pad_transn == 0x1F)  // maximum value (31)
    3c72:	2105      	movs	r1, #5
    3c74:	e7c2      	b.n	3bfc <_ZN14USBDeviceClass4initEv+0xbc>
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	200001ed 	.word	0x200001ed
    3c7c:	200001ec 	.word	0x200001ec
    3c80:	40000400 	.word	0x40000400
    3c84:	41004400 	.word	0x41004400
    3c88:	40000c00 	.word	0x40000c00
    3c8c:	00004006 	.word	0x00004006
    3c90:	00004985 	.word	0x00004985
    3c94:	20000688 	.word	0x20000688
    3c98:	00806024 	.word	0x00806024
    3c9c:	fffff83f 	.word	0xfffff83f
    3ca0:	ffff8fff 	.word	0xffff8fff
    3ca4:	e000e100 	.word	0xe000e100

00003ca8 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    3ca8:	7800      	ldrb	r0, [r0, #0]
    3caa:	2800      	cmp	r0, #0
    3cac:	d010      	beq.n	3cd0 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    3cae:	2101      	movs	r1, #1
    3cb0:	4b08      	ldr	r3, [pc, #32]	; (3cd4 <_ZN14USBDeviceClass6attachEv+0x2c>)
    3cb2:	681b      	ldr	r3, [r3, #0]
    3cb4:	891a      	ldrh	r2, [r3, #8]
    3cb6:	438a      	bics	r2, r1
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    3cb8:	2108      	movs	r1, #8
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    3cba:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    3cbc:	8b1a      	ldrh	r2, [r3, #24]
    3cbe:	430a      	orrs	r2, r1
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    3cc0:	2104      	movs	r1, #4
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    3cc2:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    3cc4:	8b1a      	ldrh	r2, [r3, #24]
    3cc6:	430a      	orrs	r2, r1
    3cc8:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    3cca:	2200      	movs	r2, #0
    3ccc:	4b02      	ldr	r3, [pc, #8]	; (3cd8 <_ZN14USBDeviceClass6attachEv+0x30>)
    3cce:	601a      	str	r2, [r3, #0]
}
    3cd0:	4770      	bx	lr
    3cd2:	46c0      	nop			; (mov r8, r8)
    3cd4:	20000688 	.word	0x20000688
    3cd8:	20000680 	.word	0x20000680

00003cdc <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    3cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cde:	4657      	mov	r7, sl
    3ce0:	46de      	mov	lr, fp
    3ce2:	464e      	mov	r6, r9
    3ce4:	4645      	mov	r5, r8
    3ce6:	b5e0      	push	{r5, r6, r7, lr}
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    3ce8:	4f6a      	ldr	r7, [pc, #424]	; (3e94 <_ZN14USBDeviceClass13initEndpointsEv+0x1b8>)
void USBDeviceClass::initEndpoints() {
    3cea:	b083      	sub	sp, #12
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d100      	bne.n	3cf4 <_ZN14USBDeviceClass13initEndpointsEv+0x18>
    3cf2:	e08c      	b.n	3e0e <_ZN14USBDeviceClass13initEndpointsEv+0x132>
    3cf4:	4d68      	ldr	r5, [pc, #416]	; (3e98 <_ZN14USBDeviceClass13initEndpointsEv+0x1bc>)
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    3cf6:	4a69      	ldr	r2, [pc, #420]	; (3e9c <_ZN14USBDeviceClass13initEndpointsEv+0x1c0>)
    3cf8:	3540      	adds	r5, #64	; 0x40
    3cfa:	4e69      	ldr	r6, [pc, #420]	; (3ea0 <_ZN14USBDeviceClass13initEndpointsEv+0x1c4>)
    3cfc:	2401      	movs	r4, #1
    3cfe:	4691      	mov	r9, r2
    3d00:	e009      	b.n	3d16 <_ZN14USBDeviceClass13initEndpointsEv+0x3a>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    3d02:	2b82      	cmp	r3, #130	; 0x82
    3d04:	d100      	bne.n	3d08 <_ZN14USBDeviceClass13initEndpointsEv+0x2c>
    3d06:	e0a4      	b.n	3e52 <_ZN14USBDeviceClass13initEndpointsEv+0x176>
    3d08:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    3d0a:	00a3      	lsls	r3, r4, #2
    3d0c:	58fb      	ldr	r3, [r7, r3]
    3d0e:	3540      	adds	r5, #64	; 0x40
    3d10:	3604      	adds	r6, #4
    3d12:	2b00      	cmp	r3, #0
    3d14:	d07b      	beq.n	3e0e <_ZN14USBDeviceClass13initEndpointsEv+0x132>
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    3d16:	2b83      	cmp	r3, #131	; 0x83
    3d18:	d100      	bne.n	3d1c <_ZN14USBDeviceClass13initEndpointsEv+0x40>
    3d1a:	e07f      	b.n	3e1c <_ZN14USBDeviceClass13initEndpointsEv+0x140>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    3d1c:	2b02      	cmp	r3, #2
    3d1e:	d1f0      	bne.n	3d02 <_ZN14USBDeviceClass13initEndpointsEv+0x26>
		if (epHandlers[ep] == NULL) {
    3d20:	6873      	ldr	r3, [r6, #4]
    3d22:	4698      	mov	r8, r3
    3d24:	2b00      	cmp	r3, #0
    3d26:	d1ef      	bne.n	3d08 <_ZN14USBDeviceClass13initEndpointsEv+0x2c>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    3d28:	2038      	movs	r0, #56	; 0x38
    3d2a:	f00c f85f 	bl	fdec <_Znwj>
		notify(false)
    3d2e:	2380      	movs	r3, #128	; 0x80
    3d30:	005b      	lsls	r3, r3, #1
    3d32:	469b      	mov	fp, r3
    3d34:	4a5b      	ldr	r2, [pc, #364]	; (3ea4 <_ZN14USBDeviceClass13initEndpointsEv+0x1c8>)
    3d36:	4641      	mov	r1, r8
    3d38:	6002      	str	r2, [r0, #0]
    3d3a:	4a58      	ldr	r2, [pc, #352]	; (3e9c <_ZN14USBDeviceClass13initEndpointsEv+0x1c0>)
    3d3c:	2324      	movs	r3, #36	; 0x24
    3d3e:	6042      	str	r2, [r0, #4]
    3d40:	465a      	mov	r2, fp
    3d42:	60c2      	str	r2, [r0, #12]
    3d44:	4642      	mov	r2, r8
    3d46:	6084      	str	r4, [r0, #8]
    3d48:	6202      	str	r2, [r0, #32]
    3d4a:	6102      	str	r2, [r0, #16]
    3d4c:	6142      	str	r2, [r0, #20]
    3d4e:	61c2      	str	r2, [r0, #28]
    3d50:	54c1      	strb	r1, [r0, r3]
    3d52:	4642      	mov	r2, r8
    3d54:	2334      	movs	r3, #52	; 0x34
    3d56:	4682      	mov	sl, r0
    3d58:	62c2      	str	r2, [r0, #44]	; 0x2c
    3d5a:	6302      	str	r2, [r0, #48]	; 0x30
    3d5c:	54c1      	strb	r1, [r0, r3]
    3d5e:	3301      	adds	r3, #1
    3d60:	54c1      	strb	r1, [r0, r3]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    3d62:	4658      	mov	r0, fp
    3d64:	f00c fdde 	bl	10924 <malloc>
    3d68:	4653      	mov	r3, sl
    3d6a:	4680      	mov	r8, r0
    3d6c:	6198      	str	r0, [r3, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    3d6e:	4658      	mov	r0, fp
    3d70:	f00c fdd8 	bl	10924 <malloc>
    3d74:	4653      	mov	r3, sl
    3d76:	6298      	str	r0, [r3, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    3d78:	4b48      	ldr	r3, [pc, #288]	; (3e9c <_ZN14USBDeviceClass13initEndpointsEv+0x1c0>)
    3d7a:	0162      	lsls	r2, r4, #5
    3d7c:	189a      	adds	r2, r3, r2
    3d7e:	6893      	ldr	r3, [r2, #8]
    3d80:	4849      	ldr	r0, [pc, #292]	; (3ea8 <_ZN14USBDeviceClass13initEndpointsEv+0x1cc>)
    3d82:	3540      	adds	r5, #64	; 0x40
    3d84:	4018      	ands	r0, r3
    3d86:	23c0      	movs	r3, #192	; 0xc0
    3d88:	059b      	lsls	r3, r3, #22
    3d8a:	4303      	orrs	r3, r0
    3d8c:	6093      	str	r3, [r2, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    3d8e:	4b43      	ldr	r3, [pc, #268]	; (3e9c <_ZN14USBDeviceClass13initEndpointsEv+0x1c0>)
    3d90:	3604      	adds	r6, #4
    3d92:	6818      	ldr	r0, [r3, #0]
    3d94:	0003      	movs	r3, r0
    3d96:	0020      	movs	r0, r4
    3d98:	3008      	adds	r0, #8
    3d9a:	0141      	lsls	r1, r0, #5
    3d9c:	5cc8      	ldrb	r0, [r1, r3]
    3d9e:	9301      	str	r3, [sp, #4]
    3da0:	4684      	mov	ip, r0
    3da2:	2007      	movs	r0, #7
    3da4:	4683      	mov	fp, r0
    3da6:	4660      	mov	r0, ip
    3da8:	465b      	mov	r3, fp
    3daa:	4398      	bics	r0, r3
    3dac:	2303      	movs	r3, #3
    3dae:	469b      	mov	fp, r3
    3db0:	465b      	mov	r3, fp
    3db2:	4318      	orrs	r0, r3
    3db4:	1c03      	adds	r3, r0, #0
    3db6:	9801      	ldr	r0, [sp, #4]
    3db8:	468b      	mov	fp, r1
    3dba:	540b      	strb	r3, [r1, r0]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    3dbc:	4643      	mov	r3, r8
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3dbe:	4684      	mov	ip, r0
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    3dc0:	6053      	str	r3, [r2, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3dc2:	0163      	lsls	r3, r4, #5
    3dc4:	4463      	add	r3, ip
    3dc6:	0019      	movs	r1, r3
    3dc8:	3109      	adds	r1, #9
    3dca:	31ff      	adds	r1, #255	; 0xff
    3dcc:	784b      	ldrb	r3, [r1, #1]
    3dce:	3401      	adds	r4, #1
    3dd0:	469c      	mov	ip, r3
    3dd2:	2301      	movs	r3, #1
    3dd4:	4698      	mov	r8, r3
    3dd6:	4660      	mov	r0, ip
    3dd8:	4643      	mov	r3, r8
    3dda:	4318      	orrs	r0, r3
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3ddc:	4b33      	ldr	r3, [pc, #204]	; (3eac <_ZN14USBDeviceClass13initEndpointsEv+0x1d0>)
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3dde:	7048      	strb	r0, [r1, #1]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3de0:	0018      	movs	r0, r3
    3de2:	6891      	ldr	r1, [r2, #8]
    3de4:	4008      	ands	r0, r1
    3de6:	2180      	movs	r1, #128	; 0x80
    3de8:	03c9      	lsls	r1, r1, #15
    3dea:	4301      	orrs	r1, r0
    3dec:	6091      	str	r1, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    3dee:	6891      	ldr	r1, [r2, #8]
    3df0:	0b89      	lsrs	r1, r1, #14
    3df2:	0389      	lsls	r1, r1, #14
    3df4:	6091      	str	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3df6:	2140      	movs	r1, #64	; 0x40
    3df8:	9b01      	ldr	r3, [sp, #4]
    3dfa:	445b      	add	r3, fp
    3dfc:	791a      	ldrb	r2, [r3, #4]
    3dfe:	430a      	orrs	r2, r1
    3e00:	711a      	strb	r2, [r3, #4]
    3e02:	4653      	mov	r3, sl
    3e04:	6033      	str	r3, [r6, #0]
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    3e06:	00a3      	lsls	r3, r4, #2
    3e08:	58fb      	ldr	r3, [r7, r3]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d183      	bne.n	3d16 <_ZN14USBDeviceClass13initEndpointsEv+0x3a>
}
    3e0e:	b003      	add	sp, #12
    3e10:	bc3c      	pop	{r2, r3, r4, r5}
    3e12:	4690      	mov	r8, r2
    3e14:	4699      	mov	r9, r3
    3e16:	46a2      	mov	sl, r4
    3e18:	46ab      	mov	fp, r5
    3e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    3e1c:	2210      	movs	r2, #16
    3e1e:	4694      	mov	ip, r2
    3e20:	481e      	ldr	r0, [pc, #120]	; (3e9c <_ZN14USBDeviceClass13initEndpointsEv+0x1c0>)
    3e22:	0163      	lsls	r3, r4, #5
    3e24:	18c3      	adds	r3, r0, r3
    3e26:	449c      	add	ip, r3
    3e28:	4662      	mov	r2, ip
    3e2a:	491f      	ldr	r1, [pc, #124]	; (3ea8 <_ZN14USBDeviceClass13initEndpointsEv+0x1cc>)
    3e2c:	6892      	ldr	r2, [r2, #8]
    3e2e:	4011      	ands	r1, r2
    3e30:	22c0      	movs	r2, #192	; 0xc0
    3e32:	0592      	lsls	r2, r2, #22
    3e34:	430a      	orrs	r2, r1
    3e36:	4661      	mov	r1, ip
    3e38:	608a      	str	r2, [r1, #8]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    3e3a:	0022      	movs	r2, r4
    3e3c:	6801      	ldr	r1, [r0, #0]
    3e3e:	2070      	movs	r0, #112	; 0x70
    3e40:	3208      	adds	r2, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3e42:	615d      	str	r5, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    3e44:	0152      	lsls	r2, r2, #5
    3e46:	5c53      	ldrb	r3, [r2, r1]
    3e48:	4383      	bics	r3, r0
    3e4a:	2040      	movs	r0, #64	; 0x40
    3e4c:	4303      	orrs	r3, r0
    3e4e:	5453      	strb	r3, [r2, r1]
    3e50:	e75a      	b.n	3d08 <_ZN14USBDeviceClass13initEndpointsEv+0x2c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    3e52:	0163      	lsls	r3, r4, #5
    3e54:	444b      	add	r3, r9
    3e56:	699a      	ldr	r2, [r3, #24]
    3e58:	4913      	ldr	r1, [pc, #76]	; (3ea8 <_ZN14USBDeviceClass13initEndpointsEv+0x1cc>)
    3e5a:	4011      	ands	r1, r2
    3e5c:	22c0      	movs	r2, #192	; 0xc0
    3e5e:	0592      	lsls	r2, r2, #22
    3e60:	430a      	orrs	r2, r1
    3e62:	619a      	str	r2, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3e64:	615d      	str	r5, [r3, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    3e66:	464b      	mov	r3, r9
    3e68:	6819      	ldr	r1, [r3, #0]
    3e6a:	0023      	movs	r3, r4
    3e6c:	3308      	adds	r3, #8
    3e6e:	015b      	lsls	r3, r3, #5
    3e70:	18c8      	adds	r0, r1, r3
    3e72:	7902      	ldrb	r2, [r0, #4]
    3e74:	9101      	str	r1, [sp, #4]
    3e76:	4694      	mov	ip, r2
    3e78:	2280      	movs	r2, #128	; 0x80
    3e7a:	4661      	mov	r1, ip
    3e7c:	4252      	negs	r2, r2
    3e7e:	430a      	orrs	r2, r1
    3e80:	7102      	strb	r2, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    3e82:	2070      	movs	r0, #112	; 0x70
    3e84:	9901      	ldr	r1, [sp, #4]
    3e86:	5c5a      	ldrb	r2, [r3, r1]
    3e88:	4382      	bics	r2, r0
    3e8a:	2030      	movs	r0, #48	; 0x30
    3e8c:	4302      	orrs	r2, r0
    3e8e:	545a      	strb	r2, [r3, r1]
    3e90:	e73a      	b.n	3d08 <_ZN14USBDeviceClass13initEndpointsEv+0x2c>
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	20000020 	.word	0x20000020
    3e98:	200001f8 	.word	0x200001f8
    3e9c:	20000688 	.word	0x20000688
    3ea0:	200001d0 	.word	0x200001d0
    3ea4:	00010c90 	.word	0x00010c90
    3ea8:	8fffffff 	.word	0x8fffffff
    3eac:	f0003fff 	.word	0xf0003fff

00003eb0 <_ZN14USBDeviceClass5flushEm>:
	if (epHandlers[ep]) {
    3eb0:	4b26      	ldr	r3, [pc, #152]	; (3f4c <_ZN14USBDeviceClass5flushEm+0x9c>)
    3eb2:	008a      	lsls	r2, r1, #2
    3eb4:	58d0      	ldr	r0, [r2, r3]
{
    3eb6:	b510      	push	{r4, lr}
    3eb8:	000c      	movs	r4, r1
	if (epHandlers[ep]) {
    3eba:	2800      	cmp	r0, #0
    3ebc:	d02a      	beq.n	3f14 <_ZN14USBDeviceClass5flushEm+0x64>
		return epHandlers[ep]->available();
    3ebe:	6803      	ldr	r3, [r0, #0]
    3ec0:	4a23      	ldr	r2, [pc, #140]	; (3f50 <_ZN14USBDeviceClass5flushEm+0xa0>)
    3ec2:	689b      	ldr	r3, [r3, #8]
    3ec4:	4293      	cmp	r3, r2
    3ec6:	d13e      	bne.n	3f46 <_ZN14USBDeviceClass5flushEm+0x96>
		if (current == 0) {
    3ec8:	6903      	ldr	r3, [r0, #16]
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d111      	bne.n	3ef2 <_ZN14USBDeviceClass5flushEm+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3ece:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    3ed2:	b672      	cpsid	i
				ready = ready0;
    3ed4:	3324      	adds	r3, #36	; 0x24
    3ed6:	5cc3      	ldrb	r3, [r0, r3]
    3ed8:	b2db      	uxtb	r3, r3
		if (primask == 0) {
    3eda:	2a00      	cmp	r2, #0
    3edc:	d102      	bne.n	3ee4 <_ZN14USBDeviceClass5flushEm+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
    3ede:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    3ee0:	f3bf 8f6f 	isb	sy
			return ready ? (last0 - first0) : 0;
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d003      	beq.n	3ef0 <_ZN14USBDeviceClass5flushEm+0x40>
    3ee8:	6a03      	ldr	r3, [r0, #32]
    3eea:	69c0      	ldr	r0, [r0, #28]
    3eec:	1a18      	subs	r0, r3, r0
	if (available(ep)) {
    3eee:	d11b      	bne.n	3f28 <_ZN14USBDeviceClass5flushEm+0x78>
}
    3ef0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3ef2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    3ef6:	b672      	cpsid	i
				ready = ready1;
    3ef8:	2334      	movs	r3, #52	; 0x34
    3efa:	5cc3      	ldrb	r3, [r0, r3]
    3efc:	b2db      	uxtb	r3, r3
		if (primask == 0) {
    3efe:	2a00      	cmp	r2, #0
    3f00:	d102      	bne.n	3f08 <_ZN14USBDeviceClass5flushEm+0x58>
  __ASM volatile ("cpsie i" : : : "memory");
    3f02:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    3f04:	f3bf 8f6f 	isb	sy
			return ready ? (last1 - first1) : 0;
    3f08:	2b00      	cmp	r3, #0
    3f0a:	d0f1      	beq.n	3ef0 <_ZN14USBDeviceClass5flushEm+0x40>
    3f0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3f0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3f10:	1a18      	subs	r0, r3, r0
    3f12:	e007      	b.n	3f24 <_ZN14USBDeviceClass5flushEm+0x74>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3f14:	23ff      	movs	r3, #255	; 0xff
    3f16:	4a0f      	ldr	r2, [pc, #60]	; (3f54 <_ZN14USBDeviceClass5flushEm+0xa4>)
    3f18:	400b      	ands	r3, r1
    3f1a:	015b      	lsls	r3, r3, #5
    3f1c:	18d3      	adds	r3, r2, r3
    3f1e:	6898      	ldr	r0, [r3, #8]
    3f20:	0480      	lsls	r0, r0, #18
    3f22:	0c80      	lsrs	r0, r0, #18
	if (available(ep)) {
    3f24:	2800      	cmp	r0, #0
    3f26:	d0e3      	beq.n	3ef0 <_ZN14USBDeviceClass5flushEm+0x40>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3f28:	21ff      	movs	r1, #255	; 0xff
    3f2a:	4b0a      	ldr	r3, [pc, #40]	; (3f54 <_ZN14USBDeviceClass5flushEm+0xa4>)
    3f2c:	4021      	ands	r1, r4
    3f2e:	681b      	ldr	r3, [r3, #0]
    3f30:	3108      	adds	r1, #8
    3f32:	0149      	lsls	r1, r1, #5
    3f34:	1859      	adds	r1, r3, r1
    3f36:	2380      	movs	r3, #128	; 0x80
    3f38:	794a      	ldrb	r2, [r1, #5]
    3f3a:	425b      	negs	r3, r3
    3f3c:	4313      	orrs	r3, r2
    3f3e:	714b      	strb	r3, [r1, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    3f40:	2302      	movs	r3, #2
    3f42:	71cb      	strb	r3, [r1, #7]
}
    3f44:	e7d4      	b.n	3ef0 <_ZN14USBDeviceClass5flushEm+0x40>
		return epHandlers[ep]->available();
    3f46:	4798      	blx	r3
    3f48:	e7ec      	b.n	3f24 <_ZN14USBDeviceClass5flushEm+0x74>
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	200001d0 	.word	0x200001d0
    3f50:	000033d9 	.word	0x000033d9
    3f54:	20000688 	.word	0x20000688

00003f58 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    3f58:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3f5a:	2540      	movs	r5, #64	; 0x40
    3f5c:	46ac      	mov	ip, r5
    3f5e:	2482      	movs	r4, #130	; 0x82
    3f60:	4665      	mov	r5, ip
    3f62:	4e2e      	ldr	r6, [pc, #184]	; (401c <_ZN14USBDeviceClass11recvControlEPvm+0xc4>)
    3f64:	0064      	lsls	r4, r4, #1
    3f66:	6833      	ldr	r3, [r6, #0]
    3f68:	5d18      	ldrb	r0, [r3, r4]
    3f6a:	4328      	orrs	r0, r5
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    3f6c:	4d2c      	ldr	r5, [pc, #176]	; (4020 <_ZN14USBDeviceClass11recvControlEPvm+0xc8>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3f6e:	5518      	strb	r0, [r3, r4]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    3f70:	6075      	str	r5, [r6, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3f72:	68b7      	ldr	r7, [r6, #8]
    3f74:	482b      	ldr	r0, [pc, #172]	; (4024 <_ZN14USBDeviceClass11recvControlEPvm+0xcc>)
    3f76:	4038      	ands	r0, r7
    3f78:	2780      	movs	r7, #128	; 0x80
    3f7a:	02bf      	lsls	r7, r7, #10
    3f7c:	4307      	orrs	r7, r0
    3f7e:	60b7      	str	r7, [r6, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3f80:	4667      	mov	r7, ip
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    3f82:	68b0      	ldr	r0, [r6, #8]
    3f84:	0b80      	lsrs	r0, r0, #14
    3f86:	0380      	lsls	r0, r0, #14
    3f88:	60b0      	str	r0, [r6, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3f8a:	5d18      	ldrb	r0, [r3, r4]
    3f8c:	4338      	orrs	r0, r7
    3f8e:	5518      	strb	r0, [r3, r4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    3f90:	3402      	adds	r4, #2
    3f92:	5d18      	ldrb	r0, [r3, r4]
	while (!usbd.epBank0IsReady(ep)) {}
    3f94:	0640      	lsls	r0, r0, #25
    3f96:	d5fc      	bpl.n	3f92 <_ZN14USBDeviceClass11recvControlEPvm+0x3a>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    3f98:	2408      	movs	r4, #8
    3f9a:	34ff      	adds	r4, #255	; 0xff
    3f9c:	5d18      	ldrb	r0, [r3, r4]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    3f9e:	07c0      	lsls	r0, r0, #31
    3fa0:	d5fc      	bpl.n	3f9c <_ZN14USBDeviceClass11recvControlEPvm+0x44>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3fa2:	68b0      	ldr	r0, [r6, #8]
	uint32_t read = armRecvCtrlOUT(0);
    3fa4:	b2c0      	uxtb	r0, r0
    3fa6:	4290      	cmp	r0, r2
    3fa8:	d900      	bls.n	3fac <_ZN14USBDeviceClass11recvControlEPvm+0x54>
    3faa:	0010      	movs	r0, r2
	for (uint32_t i=0; i<len; i++) {
    3fac:	2a00      	cmp	r2, #0
    3fae:	d02d      	beq.n	400c <_ZN14USBDeviceClass11recvControlEPvm+0xb4>
    3fb0:	2300      	movs	r3, #0
    3fb2:	001e      	movs	r6, r3
    3fb4:	1d0c      	adds	r4, r1, #4
    3fb6:	42a5      	cmp	r5, r4
    3fb8:	415e      	adcs	r6, r3
    3fba:	0034      	movs	r4, r6
    3fbc:	1d2e      	adds	r6, r5, #4
    3fbe:	42b1      	cmp	r1, r6
    3fc0:	415b      	adcs	r3, r3
    3fc2:	4323      	orrs	r3, r4
    3fc4:	2403      	movs	r4, #3
    3fc6:	400c      	ands	r4, r1
    3fc8:	0026      	movs	r6, r4
    3fca:	4274      	negs	r4, r6
    3fcc:	4174      	adcs	r4, r6
    3fce:	421c      	tst	r4, r3
    3fd0:	d01d      	beq.n	400e <_ZN14USBDeviceClass11recvControlEPvm+0xb6>
    3fd2:	2a08      	cmp	r2, #8
    3fd4:	d91b      	bls.n	400e <_ZN14USBDeviceClass11recvControlEPvm+0xb6>
    3fd6:	2600      	movs	r6, #0
    3fd8:	2700      	movs	r7, #0
    3fda:	1f14      	subs	r4, r2, #4
    3fdc:	08a4      	lsrs	r4, r4, #2
    3fde:	1c63      	adds	r3, r4, #1
    3fe0:	469c      	mov	ip, r3
    3fe2:	009b      	lsls	r3, r3, #2
		data[i] = buffer[i];
    3fe4:	59ac      	ldr	r4, [r5, r6]
    3fe6:	3701      	adds	r7, #1
    3fe8:	518c      	str	r4, [r1, r6]
    3fea:	3604      	adds	r6, #4
    3fec:	45bc      	cmp	ip, r7
    3fee:	d8f9      	bhi.n	3fe4 <_ZN14USBDeviceClass11recvControlEPvm+0x8c>
    3ff0:	429a      	cmp	r2, r3
    3ff2:	d00b      	beq.n	400c <_ZN14USBDeviceClass11recvControlEPvm+0xb4>
    3ff4:	5cec      	ldrb	r4, [r5, r3]
    3ff6:	54cc      	strb	r4, [r1, r3]
	for (uint32_t i=0; i<len; i++) {
    3ff8:	1c5c      	adds	r4, r3, #1
    3ffa:	42a2      	cmp	r2, r4
    3ffc:	d906      	bls.n	400c <_ZN14USBDeviceClass11recvControlEPvm+0xb4>
		data[i] = buffer[i];
    3ffe:	5d2e      	ldrb	r6, [r5, r4]
	for (uint32_t i=0; i<len; i++) {
    4000:	3302      	adds	r3, #2
		data[i] = buffer[i];
    4002:	550e      	strb	r6, [r1, r4]
	for (uint32_t i=0; i<len; i++) {
    4004:	429a      	cmp	r2, r3
    4006:	d901      	bls.n	400c <_ZN14USBDeviceClass11recvControlEPvm+0xb4>
		data[i] = buffer[i];
    4008:	5cea      	ldrb	r2, [r5, r3]
    400a:	54ca      	strb	r2, [r1, r3]
}
    400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (uint32_t i=0; i<len; i++) {
    400e:	2300      	movs	r3, #0
		data[i] = buffer[i];
    4010:	5cec      	ldrb	r4, [r5, r3]
    4012:	54cc      	strb	r4, [r1, r3]
	for (uint32_t i=0; i<len; i++) {
    4014:	3301      	adds	r3, #1
    4016:	429a      	cmp	r2, r3
    4018:	d1fa      	bne.n	4010 <_ZN14USBDeviceClass11recvControlEPvm+0xb8>
    401a:	e7f7      	b.n	400c <_ZN14USBDeviceClass11recvControlEPvm+0xb4>
    401c:	20000688 	.word	0x20000688
    4020:	200003b8 	.word	0x200003b8
    4024:	f0003fff 	.word	0xf0003fff

00004028 <_ZN14USBDeviceClass9availableEm>:
	if (epHandlers[ep]) {
    4028:	4b1e      	ldr	r3, [pc, #120]	; (40a4 <_ZN14USBDeviceClass9availableEm+0x7c>)
    402a:	008a      	lsls	r2, r1, #2
    402c:	58d0      	ldr	r0, [r2, r3]
{
    402e:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    4030:	2800      	cmp	r0, #0
    4032:	d016      	beq.n	4062 <_ZN14USBDeviceClass9availableEm+0x3a>
		return epHandlers[ep]->available();
    4034:	6803      	ldr	r3, [r0, #0]
    4036:	4a1c      	ldr	r2, [pc, #112]	; (40a8 <_ZN14USBDeviceClass9availableEm+0x80>)
    4038:	689b      	ldr	r3, [r3, #8]
    403a:	4293      	cmp	r3, r2
    403c:	d12b      	bne.n	4096 <_ZN14USBDeviceClass9availableEm+0x6e>
		if (current == 0) {
    403e:	6903      	ldr	r3, [r0, #16]
    4040:	2b00      	cmp	r3, #0
    4042:	d117      	bne.n	4074 <_ZN14USBDeviceClass9availableEm+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4044:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4048:	b672      	cpsid	i
				ready = ready0;
    404a:	3324      	adds	r3, #36	; 0x24
    404c:	5cc3      	ldrb	r3, [r0, r3]
    404e:	b2db      	uxtb	r3, r3
		if (primask == 0) {
    4050:	2a00      	cmp	r2, #0
    4052:	d102      	bne.n	405a <_ZN14USBDeviceClass9availableEm+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
    4054:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    4056:	f3bf 8f6f 	isb	sy
			return ready ? (last0 - first0) : 0;
    405a:	2b00      	cmp	r3, #0
    405c:	d11d      	bne.n	409a <_ZN14USBDeviceClass9availableEm+0x72>
    405e:	2000      	movs	r0, #0
}
    4060:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    4062:	23ff      	movs	r3, #255	; 0xff
    4064:	4019      	ands	r1, r3
    4066:	4b11      	ldr	r3, [pc, #68]	; (40ac <_ZN14USBDeviceClass9availableEm+0x84>)
    4068:	0149      	lsls	r1, r1, #5
    406a:	1859      	adds	r1, r3, r1
    406c:	6888      	ldr	r0, [r1, #8]
    406e:	0480      	lsls	r0, r0, #18
    4070:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    4072:	e7f5      	b.n	4060 <_ZN14USBDeviceClass9availableEm+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4074:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4078:	b672      	cpsid	i
				ready = ready1;
    407a:	2334      	movs	r3, #52	; 0x34
    407c:	5cc3      	ldrb	r3, [r0, r3]
    407e:	b2db      	uxtb	r3, r3
		if (primask == 0) {
    4080:	2a00      	cmp	r2, #0
    4082:	d102      	bne.n	408a <_ZN14USBDeviceClass9availableEm+0x62>
  __ASM volatile ("cpsie i" : : : "memory");
    4084:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    4086:	f3bf 8f6f 	isb	sy
			return ready ? (last1 - first1) : 0;
    408a:	2b00      	cmp	r3, #0
    408c:	d0e7      	beq.n	405e <_ZN14USBDeviceClass9availableEm+0x36>
    408e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4090:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4092:	1a18      	subs	r0, r3, r0
    4094:	e7e4      	b.n	4060 <_ZN14USBDeviceClass9availableEm+0x38>
		return epHandlers[ep]->available();
    4096:	4798      	blx	r3
    4098:	e7e2      	b.n	4060 <_ZN14USBDeviceClass9availableEm+0x38>
			return ready ? (last0 - first0) : 0;
    409a:	6a03      	ldr	r3, [r0, #32]
    409c:	69c0      	ldr	r0, [r0, #28]
    409e:	1a18      	subs	r0, r3, r0
    40a0:	e7de      	b.n	4060 <_ZN14USBDeviceClass9availableEm+0x38>
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	200001d0 	.word	0x200001d0
    40a8:	000033d9 	.word	0x000033d9
    40ac:	20000688 	.word	0x20000688

000040b0 <_ZN14USBDeviceClass4recvEm>:
{
    40b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40b2:	46de      	mov	lr, fp
    40b4:	4657      	mov	r7, sl
    40b6:	464e      	mov	r6, r9
    40b8:	4645      	mov	r5, r8
    40ba:	b5e0      	push	{r5, r6, r7, lr}
	if (!_usbConfiguration)
    40bc:	4b8d      	ldr	r3, [pc, #564]	; (42f4 <_ZN14USBDeviceClass4recvEm+0x244>)
{
    40be:	b083      	sub	sp, #12
	if (!_usbConfiguration)
    40c0:	681b      	ldr	r3, [r3, #0]
{
    40c2:	000c      	movs	r4, r1
	if (!_usbConfiguration)
    40c4:	2b00      	cmp	r3, #0
    40c6:	d108      	bne.n	40da <_ZN14USBDeviceClass4recvEm+0x2a>
		return -1;
    40c8:	2001      	movs	r0, #1
    40ca:	4240      	negs	r0, r0
}
    40cc:	b003      	add	sp, #12
    40ce:	bc3c      	pop	{r2, r3, r4, r5}
    40d0:	4690      	mov	r8, r2
    40d2:	4699      	mov	r9, r3
    40d4:	46a2      	mov	sl, r4
    40d6:	46ab      	mov	fp, r5
    40d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rxLEDPulse == 0)
    40da:	4d87      	ldr	r5, [pc, #540]	; (42f8 <_ZN14USBDeviceClass4recvEm+0x248>)
    40dc:	782b      	ldrb	r3, [r5, #0]
    40de:	2b00      	cmp	r3, #0
    40e0:	d100      	bne.n	40e4 <_ZN14USBDeviceClass4recvEm+0x34>
    40e2:	e0b8      	b.n	4256 <_ZN14USBDeviceClass4recvEm+0x1a6>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
    40e4:	2364      	movs	r3, #100	; 0x64
    40e6:	702b      	strb	r3, [r5, #0]
	if (epHandlers[ep]) {
    40e8:	4b84      	ldr	r3, [pc, #528]	; (42fc <_ZN14USBDeviceClass4recvEm+0x24c>)
    40ea:	00a2      	lsls	r2, r4, #2
    40ec:	58d3      	ldr	r3, [r2, r3]
    40ee:	2b00      	cmp	r3, #0
    40f0:	d062      	beq.n	41b8 <_ZN14USBDeviceClass4recvEm+0x108>
		return epHandlers[ep]->recv(_data, len);
    40f2:	681a      	ldr	r2, [r3, #0]
    40f4:	6854      	ldr	r4, [r2, #4]
    40f6:	4a82      	ldr	r2, [pc, #520]	; (4300 <_ZN14USBDeviceClass4recvEm+0x250>)
    40f8:	4294      	cmp	r4, r2
    40fa:	d000      	beq.n	40fe <_ZN14USBDeviceClass4recvEm+0x4e>
    40fc:	e0eb      	b.n	42d6 <_ZN14USBDeviceClass4recvEm+0x226>
		if (current == 0) {
    40fe:	691a      	ldr	r2, [r3, #16]
    4100:	2a00      	cmp	r2, #0
    4102:	d000      	beq.n	4106 <_ZN14USBDeviceClass4recvEm+0x56>
    4104:	e0ac      	b.n	4260 <_ZN14USBDeviceClass4recvEm+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4106:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    410a:	b672      	cpsid	i
				if (!ready0) {
    410c:	2124      	movs	r1, #36	; 0x24
    410e:	5c59      	ldrb	r1, [r3, r1]
    4110:	2900      	cmp	r1, #0
    4112:	d100      	bne.n	4116 <_ZN14USBDeviceClass4recvEm+0x66>
    4114:	e0e7      	b.n	42e6 <_ZN14USBDeviceClass4recvEm+0x236>
		if (primask == 0) {
    4116:	2a00      	cmp	r2, #0
    4118:	d102      	bne.n	4120 <_ZN14USBDeviceClass4recvEm+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
    411a:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    411c:	f3bf 8f6f 	isb	sy
			for (i=0; i<len && first0 < last0; i++) {
    4120:	69da      	ldr	r2, [r3, #28]
    4122:	6a19      	ldr	r1, [r3, #32]
    4124:	428a      	cmp	r2, r1
    4126:	d300      	bcc.n	412a <_ZN14USBDeviceClass4recvEm+0x7a>
    4128:	e0cf      	b.n	42ca <_ZN14USBDeviceClass4recvEm+0x21a>
				data[i] = data0[first0++];
    412a:	6998      	ldr	r0, [r3, #24]
    412c:	1c51      	adds	r1, r2, #1
    412e:	4684      	mov	ip, r0
    4130:	4668      	mov	r0, sp
    4132:	61d9      	str	r1, [r3, #28]
    4134:	4462      	add	r2, ip
    4136:	7812      	ldrb	r2, [r2, #0]
    4138:	3007      	adds	r0, #7
    413a:	7002      	strb	r2, [r0, #0]
			if (first0 == last0) {
    413c:	6a1a      	ldr	r2, [r3, #32]
			for (i=0; i<len && first0 < last0; i++) {
    413e:	2501      	movs	r5, #1
			if (first0 == last0) {
    4140:	4291      	cmp	r1, r2
    4142:	d000      	beq.n	4146 <_ZN14USBDeviceClass4recvEm+0x96>
    4144:	e085      	b.n	4252 <_ZN14USBDeviceClass4recvEm+0x1a2>
				first0 = 0;
    4146:	2200      	movs	r2, #0
				current = 1;
    4148:	2101      	movs	r1, #1
				first0 = 0;
    414a:	61da      	str	r2, [r3, #28]
				current = 1;
    414c:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    414e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4152:	b672      	cpsid	i
					ready0 = false;
    4154:	3123      	adds	r1, #35	; 0x23
    4156:	545a      	strb	r2, [r3, r1]
					if (notify) {
    4158:	3111      	adds	r1, #17
    415a:	5c58      	ldrb	r0, [r3, r1]
    415c:	2800      	cmp	r0, #0
    415e:	d025      	beq.n	41ac <_ZN14USBDeviceClass4recvEm+0xfc>
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    4160:	2601      	movs	r6, #1
    4162:	46b0      	mov	r8, r6
						notify = false;
    4164:	545a      	strb	r2, [r3, r1]
		usbd.epBank0EnableTransferComplete(ep);
    4166:	685a      	ldr	r2, [r3, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    4168:	4646      	mov	r6, r8
    416a:	6811      	ldr	r1, [r2, #0]
		usbd.epBank0EnableTransferComplete(ep);
    416c:	4694      	mov	ip, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    416e:	7a1a      	ldrb	r2, [r3, #8]
    4170:	4692      	mov	sl, r2
    4172:	0157      	lsls	r7, r2, #5
    4174:	19c8      	adds	r0, r1, r7
    4176:	3009      	adds	r0, #9
    4178:	30ff      	adds	r0, #255	; 0xff
    417a:	7842      	ldrb	r2, [r0, #1]
    417c:	4332      	orrs	r2, r6
    417e:	7042      	strb	r2, [r0, #1]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    4180:	4652      	mov	r2, sl
		usbd.epBank0SetMultiPacketSize(ep, size);
    4182:	68de      	ldr	r6, [r3, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    4184:	003b      	movs	r3, r7
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    4186:	3208      	adds	r2, #8
    4188:	0152      	lsls	r2, r2, #5
    418a:	188a      	adds	r2, r1, r2
    418c:	2140      	movs	r1, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    418e:	4463      	add	r3, ip
    4190:	6898      	ldr	r0, [r3, #8]
    4192:	4f5c      	ldr	r7, [pc, #368]	; (4304 <_ZN14USBDeviceClass4recvEm+0x254>)
    4194:	04b6      	lsls	r6, r6, #18
    4196:	0936      	lsrs	r6, r6, #4
    4198:	4038      	ands	r0, r7
    419a:	4330      	orrs	r0, r6
    419c:	6098      	str	r0, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    419e:	6898      	ldr	r0, [r3, #8]
    41a0:	0b80      	lsrs	r0, r0, #14
    41a2:	0380      	lsls	r0, r0, #14
    41a4:	6098      	str	r0, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    41a6:	7913      	ldrb	r3, [r2, #4]
    41a8:	430b      	orrs	r3, r1
    41aa:	7113      	strb	r3, [r2, #4]
		if (primask == 0) {
    41ac:	2c00      	cmp	r4, #0
    41ae:	d14b      	bne.n	4248 <_ZN14USBDeviceClass4recvEm+0x198>
  __ASM volatile ("cpsie i" : : : "memory");
    41b0:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    41b2:	f3bf 8f6f 	isb	sy
    41b6:	e047      	b.n	4248 <_ZN14USBDeviceClass4recvEm+0x198>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    41b8:	27ff      	movs	r7, #255	; 0xff
	if (available(ep) < len)
    41ba:	2001      	movs	r0, #1
    41bc:	4027      	ands	r7, r4
    41be:	4a52      	ldr	r2, [pc, #328]	; (4308 <_ZN14USBDeviceClass4recvEm+0x258>)
    41c0:	017e      	lsls	r6, r7, #5
    41c2:	1991      	adds	r1, r2, r6
    41c4:	688b      	ldr	r3, [r1, #8]
    41c6:	4680      	mov	r8, r0
    41c8:	049b      	lsls	r3, r3, #18
    41ca:	d103      	bne.n	41d4 <_ZN14USBDeviceClass4recvEm+0x124>
    41cc:	688b      	ldr	r3, [r1, #8]
    41ce:	049b      	lsls	r3, r3, #18
    41d0:	0c9b      	lsrs	r3, r3, #18
    41d2:	4698      	mov	r8, r3
    41d4:	1991      	adds	r1, r2, r6
    41d6:	688b      	ldr	r3, [r1, #8]
    41d8:	4645      	mov	r5, r8
    41da:	049b      	lsls	r3, r3, #18
    41dc:	0c9b      	lsrs	r3, r3, #18
	if (count >= 64) {
    41de:	2b3f      	cmp	r3, #63	; 0x3f
    41e0:	dd69      	ble.n	42b6 <_ZN14USBDeviceClass4recvEm+0x206>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    41e2:	6888      	ldr	r0, [r1, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    41e4:	3b40      	subs	r3, #64	; 0x40
    41e6:	049b      	lsls	r3, r3, #18
    41e8:	0b80      	lsrs	r0, r0, #14
    41ea:	0c9b      	lsrs	r3, r3, #18
    41ec:	0380      	lsls	r0, r0, #14
    41ee:	4303      	orrs	r3, r0
    41f0:	608b      	str	r3, [r1, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    41f2:	1993      	adds	r3, r2, r6
    41f4:	469b      	mov	fp, r3
    41f6:	689b      	ldr	r3, [r3, #8]
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    41f8:	6813      	ldr	r3, [r2, #0]
    41fa:	2201      	movs	r2, #1
    41fc:	4692      	mov	sl, r2
    41fe:	4699      	mov	r9, r3
    4200:	4652      	mov	r2, sl
    4202:	444e      	add	r6, r9
    4204:	3609      	adds	r6, #9
    4206:	36ff      	adds	r6, #255	; 0xff
    4208:	7833      	ldrb	r3, [r6, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    420a:	4940      	ldr	r1, [pc, #256]	; (430c <_ZN14USBDeviceClass4recvEm+0x25c>)
    420c:	4313      	orrs	r3, r2
    420e:	7033      	strb	r3, [r6, #0]
    4210:	466b      	mov	r3, sp
    4212:	01a4      	lsls	r4, r4, #6
    4214:	1dd8      	adds	r0, r3, #7
    4216:	1909      	adds	r1, r1, r4
    4218:	4642      	mov	r2, r8
    421a:	f00c fba6 	bl	1096a <memcpy>
	if (len && !available(ep)) {
    421e:	4643      	mov	r3, r8
    4220:	2b00      	cmp	r3, #0
    4222:	d100      	bne.n	4226 <_ZN14USBDeviceClass4recvEm+0x176>
    4224:	e750      	b.n	40c8 <_ZN14USBDeviceClass4recvEm+0x18>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    4226:	465b      	mov	r3, fp
    4228:	689b      	ldr	r3, [r3, #8]
    422a:	049b      	lsls	r3, r3, #18
    422c:	d10c      	bne.n	4248 <_ZN14USBDeviceClass4recvEm+0x198>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    422e:	2240      	movs	r2, #64	; 0x40
    4230:	3708      	adds	r7, #8
    4232:	017f      	lsls	r7, r7, #5
    4234:	444f      	add	r7, r9
    4236:	793b      	ldrb	r3, [r7, #4]
    4238:	4313      	orrs	r3, r2
    423a:	713b      	strb	r3, [r7, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    423c:	2301      	movs	r3, #1
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    423e:	4652      	mov	r2, sl
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    4240:	71fb      	strb	r3, [r7, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    4242:	7873      	ldrb	r3, [r6, #1]
    4244:	4313      	orrs	r3, r2
    4246:	7073      	strb	r3, [r6, #1]
	if (recv(ep, &c, 1) != 1) {
    4248:	2d01      	cmp	r5, #1
    424a:	d000      	beq.n	424e <_ZN14USBDeviceClass4recvEm+0x19e>
    424c:	e73c      	b.n	40c8 <_ZN14USBDeviceClass4recvEm+0x18>
    424e:	466b      	mov	r3, sp
    4250:	1dd8      	adds	r0, r3, #7
		return c;
    4252:	7800      	ldrb	r0, [r0, #0]
    4254:	e73a      	b.n	40cc <_ZN14USBDeviceClass4recvEm+0x1c>
		digitalWrite(PIN_LED_RXL, LOW);
    4256:	2100      	movs	r1, #0
    4258:	201e      	movs	r0, #30
    425a:	f000 fcb9 	bl	4bd0 <digitalWrite>
    425e:	e741      	b.n	40e4 <_ZN14USBDeviceClass4recvEm+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4260:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4264:	b672      	cpsid	i
				if (!ready1) {
    4266:	2134      	movs	r1, #52	; 0x34
    4268:	5c59      	ldrb	r1, [r3, r1]
    426a:	2900      	cmp	r1, #0
    426c:	d03b      	beq.n	42e6 <_ZN14USBDeviceClass4recvEm+0x236>
		if (primask == 0) {
    426e:	2a00      	cmp	r2, #0
    4270:	d102      	bne.n	4278 <_ZN14USBDeviceClass4recvEm+0x1c8>
  __ASM volatile ("cpsie i" : : : "memory");
    4272:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    4274:	f3bf 8f6f 	isb	sy
			for (i=0; i<len && first1 < last1; i++) {
    4278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    427a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    427c:	428a      	cmp	r2, r1
    427e:	d21f      	bcs.n	42c0 <_ZN14USBDeviceClass4recvEm+0x210>
				data[i] = data1[first1++];
    4280:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4282:	1c51      	adds	r1, r2, #1
    4284:	4684      	mov	ip, r0
    4286:	4668      	mov	r0, sp
    4288:	62d9      	str	r1, [r3, #44]	; 0x2c
    428a:	4462      	add	r2, ip
    428c:	7812      	ldrb	r2, [r2, #0]
    428e:	3007      	adds	r0, #7
    4290:	7002      	strb	r2, [r0, #0]
			if (first1 == last1) {
    4292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			for (i=0; i<len && first1 < last1; i++) {
    4294:	2501      	movs	r5, #1
			if (first1 == last1) {
    4296:	428a      	cmp	r2, r1
    4298:	d1db      	bne.n	4252 <_ZN14USBDeviceClass4recvEm+0x1a2>
				first1 = 0;
    429a:	2200      	movs	r2, #0
    429c:	62da      	str	r2, [r3, #44]	; 0x2c
				current = 0;
    429e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    42a0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    42a4:	b672      	cpsid	i
					ready1 = false;
    42a6:	2134      	movs	r1, #52	; 0x34
    42a8:	545a      	strb	r2, [r3, r1]
					if (notify) {
    42aa:	3101      	adds	r1, #1
    42ac:	5c58      	ldrb	r0, [r3, r1]
    42ae:	2800      	cmp	r0, #0
    42b0:	d100      	bne.n	42b4 <_ZN14USBDeviceClass4recvEm+0x204>
    42b2:	e77b      	b.n	41ac <_ZN14USBDeviceClass4recvEm+0xfc>
    42b4:	e754      	b.n	4160 <_ZN14USBDeviceClass4recvEm+0xb0>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    42b6:	688b      	ldr	r3, [r1, #8]
    42b8:	0b9b      	lsrs	r3, r3, #14
    42ba:	039b      	lsls	r3, r3, #14
    42bc:	608b      	str	r3, [r1, #8]
    42be:	e798      	b.n	41f2 <_ZN14USBDeviceClass4recvEm+0x142>
			if (first1 == last1) {
    42c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
    42c2:	2500      	movs	r5, #0
    42c4:	4291      	cmp	r1, r2
    42c6:	d0e8      	beq.n	429a <_ZN14USBDeviceClass4recvEm+0x1ea>
    42c8:	e6fe      	b.n	40c8 <_ZN14USBDeviceClass4recvEm+0x18>
			if (first0 == last0) {
    42ca:	6a19      	ldr	r1, [r3, #32]
    42cc:	2500      	movs	r5, #0
    42ce:	428a      	cmp	r2, r1
    42d0:	d100      	bne.n	42d4 <_ZN14USBDeviceClass4recvEm+0x224>
    42d2:	e738      	b.n	4146 <_ZN14USBDeviceClass4recvEm+0x96>
    42d4:	e6f8      	b.n	40c8 <_ZN14USBDeviceClass4recvEm+0x18>
		return epHandlers[ep]->recv(_data, len);
    42d6:	466a      	mov	r2, sp
    42d8:	1dd0      	adds	r0, r2, #7
    42da:	0001      	movs	r1, r0
    42dc:	2201      	movs	r2, #1
    42de:	0018      	movs	r0, r3
    42e0:	47a0      	blx	r4
    42e2:	0005      	movs	r5, r0
    42e4:	e7b0      	b.n	4248 <_ZN14USBDeviceClass4recvEm+0x198>
		if (primask == 0) {
    42e6:	2a00      	cmp	r2, #0
    42e8:	d000      	beq.n	42ec <_ZN14USBDeviceClass4recvEm+0x23c>
    42ea:	e6ed      	b.n	40c8 <_ZN14USBDeviceClass4recvEm+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
    42ec:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    42ee:	f3bf 8f6f 	isb	sy
    42f2:	e6e9      	b.n	40c8 <_ZN14USBDeviceClass4recvEm+0x18>
    42f4:	20000680 	.word	0x20000680
    42f8:	200001ec 	.word	0x200001ec
    42fc:	200001d0 	.word	0x200001d0
    4300:	00003279 	.word	0x00003279
    4304:	f0003fff 	.word	0xf0003fff
    4308:	20000688 	.word	0x20000688
    430c:	200003b8 	.word	0x200003b8

00004310 <_ZN14USBDeviceClass4sendEmPKvm>:
{
    4310:	b5f0      	push	{r4, r5, r6, r7, lr}
    4312:	46de      	mov	lr, fp
    4314:	464e      	mov	r6, r9
    4316:	4645      	mov	r5, r8
    4318:	4657      	mov	r7, sl
    431a:	b5e0      	push	{r5, r6, r7, lr}
    431c:	4699      	mov	r9, r3
	if (!_usbConfiguration)
    431e:	4b41      	ldr	r3, [pc, #260]	; (4424 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)
{
    4320:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    4322:	681b      	ldr	r3, [r3, #0]
{
    4324:	000d      	movs	r5, r1
    4326:	4693      	mov	fp, r2
	if (!_usbConfiguration)
    4328:	2b00      	cmp	r3, #0
    432a:	d109      	bne.n	4340 <_ZN14USBDeviceClass4sendEmPKvm+0x30>
					return -1;
    432c:	2601      	movs	r6, #1
    432e:	4276      	negs	r6, r6
}
    4330:	0030      	movs	r0, r6
    4332:	b005      	add	sp, #20
    4334:	bc3c      	pop	{r2, r3, r4, r5}
    4336:	4690      	mov	r8, r2
    4338:	4699      	mov	r9, r3
    433a:	46a2      	mov	sl, r4
    433c:	46ab      	mov	fp, r5
    433e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (len > 16384)
    4340:	2380      	movs	r3, #128	; 0x80
    4342:	01db      	lsls	r3, r3, #7
    4344:	4599      	cmp	r9, r3
    4346:	d8f1      	bhi.n	432c <_ZN14USBDeviceClass4sendEmPKvm+0x1c>
	if (txLEDPulse == 0)
    4348:	4c37      	ldr	r4, [pc, #220]	; (4428 <_ZN14USBDeviceClass4sendEmPKvm+0x118>)
    434a:	7823      	ldrb	r3, [r4, #0]
    434c:	2b00      	cmp	r3, #0
    434e:	d062      	beq.n	4416 <_ZN14USBDeviceClass4sendEmPKvm+0x106>
	txLEDPulse = TX_RX_LED_PULSE_MS;
    4350:	2364      	movs	r3, #100	; 0x64
    4352:	7023      	strb	r3, [r4, #0]
	while (len != 0)
    4354:	464b      	mov	r3, r9
    4356:	2b00      	cmp	r3, #0
    4358:	d062      	beq.n	4420 <_ZN14USBDeviceClass4sendEmPKvm+0x110>
    435a:	23ff      	movs	r3, #255	; 0xff
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    435c:	4933      	ldr	r1, [pc, #204]	; (442c <_ZN14USBDeviceClass4sendEmPKvm+0x11c>)
    435e:	01aa      	lsls	r2, r5, #6
    4360:	402b      	ands	r3, r5
    4362:	188a      	adds	r2, r1, r2
    4364:	4c32      	ldr	r4, [pc, #200]	; (4430 <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
    4366:	9202      	str	r2, [sp, #8]
    4368:	001a      	movs	r2, r3
    436a:	015b      	lsls	r3, r3, #5
    436c:	469a      	mov	sl, r3
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    436e:	6823      	ldr	r3, [r4, #0]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    4370:	2600      	movs	r6, #0
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    4372:	4698      	mov	r8, r3
    4374:	3208      	adds	r2, #8
    4376:	0152      	lsls	r2, r2, #5
    4378:	4490      	add	r8, r2
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    437a:	4643      	mov	r3, r8
    437c:	9601      	str	r6, [sp, #4]
    437e:	4646      	mov	r6, r8
    4380:	3307      	adds	r3, #7
    4382:	4f2c      	ldr	r7, [pc, #176]	; (4434 <_ZN14USBDeviceClass4sendEmPKvm+0x124>)
    4384:	9303      	str	r3, [sp, #12]
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    4386:	79b3      	ldrb	r3, [r6, #6]
    4388:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    438a:	d019      	beq.n	43c0 <_ZN14USBDeviceClass4sendEmPKvm+0xb0>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    438c:	4b2a      	ldr	r3, [pc, #168]	; (4438 <_ZN14USBDeviceClass4sendEmPKvm+0x128>)
    438e:	492b      	ldr	r1, [pc, #172]	; (443c <_ZN14USBDeviceClass4sendEmPKvm+0x12c>)
    4390:	6818      	ldr	r0, [r3, #0]
    4392:	f00c f91f 	bl	105d4 <__udivsi3>
    4396:	4b2a      	ldr	r3, [pc, #168]	; (4440 <_ZN14USBDeviceClass4sendEmPKvm+0x130>)
    4398:	2117      	movs	r1, #23
    439a:	4358      	muls	r0, r3
    439c:	f00c f91a 	bl	105d4 <__udivsi3>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    43a0:	79f3      	ldrb	r3, [r6, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    43a2:	079b      	lsls	r3, r3, #30
    43a4:	d40c      	bmi.n	43c0 <_ZN14USBDeviceClass4sendEmPKvm+0xb0>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    43a6:	5d7b      	ldrb	r3, [r7, r5]
    43a8:	2b00      	cmp	r3, #0
    43aa:	d101      	bne.n	43b0 <_ZN14USBDeviceClass4sendEmPKvm+0xa0>
    43ac:	3801      	subs	r0, #1
    43ae:	d2f7      	bcs.n	43a0 <_ZN14USBDeviceClass4sendEmPKvm+0x90>
					LastTransmitTimedOut[ep] = 1;
    43b0:	2301      	movs	r3, #1
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    43b2:	4454      	add	r4, sl
    43b4:	557b      	strb	r3, [r7, r5]
    43b6:	69a3      	ldr	r3, [r4, #24]
    43b8:	0b9b      	lsrs	r3, r3, #14
    43ba:	039b      	lsls	r3, r3, #14
    43bc:	61a3      	str	r3, [r4, #24]
    43be:	e7b5      	b.n	432c <_ZN14USBDeviceClass4sendEmPKvm+0x1c>
		LastTransmitTimedOut[ep] = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	557b      	strb	r3, [r7, r5]
    43c4:	464b      	mov	r3, r9
    43c6:	46c8      	mov	r8, r9
    43c8:	2b3f      	cmp	r3, #63	; 0x3f
    43ca:	d901      	bls.n	43d0 <_ZN14USBDeviceClass4sendEmPKvm+0xc0>
    43cc:	233f      	movs	r3, #63	; 0x3f
    43ce:	4698      	mov	r8, r3
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    43d0:	4659      	mov	r1, fp
    43d2:	4642      	mov	r2, r8
    43d4:	9802      	ldr	r0, [sp, #8]
    43d6:	f00c fac8 	bl	1096a <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    43da:	4653      	mov	r3, sl
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    43dc:	4641      	mov	r1, r8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    43de:	18e2      	adds	r2, r4, r3
    43e0:	9b02      	ldr	r3, [sp, #8]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    43e2:	0489      	lsls	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    43e4:	6153      	str	r3, [r2, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    43e6:	6993      	ldr	r3, [r2, #24]
    43e8:	0c89      	lsrs	r1, r1, #18
    43ea:	0b9b      	lsrs	r3, r3, #14
    43ec:	039b      	lsls	r3, r3, #14
    43ee:	430b      	orrs	r3, r1
    43f0:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    43f2:	2302      	movs	r3, #2
    43f4:	9a03      	ldr	r2, [sp, #12]
		data = (char *)data + length;
    43f6:	44c3      	add	fp, r8
    43f8:	7013      	strb	r3, [r2, #0]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    43fa:	7972      	ldrb	r2, [r6, #5]
    43fc:	3b82      	subs	r3, #130	; 0x82
    43fe:	4313      	orrs	r3, r2
    4400:	7173      	strb	r3, [r6, #5]
		written += length;
    4402:	9b01      	ldr	r3, [sp, #4]
		len -= length;
    4404:	4642      	mov	r2, r8
		written += length;
    4406:	4443      	add	r3, r8
    4408:	9301      	str	r3, [sp, #4]
		len -= length;
    440a:	464b      	mov	r3, r9
    440c:	1a9b      	subs	r3, r3, r2
    440e:	4699      	mov	r9, r3
	while (len != 0)
    4410:	d1b9      	bne.n	4386 <_ZN14USBDeviceClass4sendEmPKvm+0x76>
    4412:	9e01      	ldr	r6, [sp, #4]
    4414:	e78c      	b.n	4330 <_ZN14USBDeviceClass4sendEmPKvm+0x20>
		digitalWrite(PIN_LED_TXL, LOW);
    4416:	2100      	movs	r1, #0
    4418:	201f      	movs	r0, #31
    441a:	f000 fbd9 	bl	4bd0 <digitalWrite>
    441e:	e797      	b.n	4350 <_ZN14USBDeviceClass4sendEmPKvm+0x40>
	uint32_t written = 0;
    4420:	2600      	movs	r6, #0
    4422:	e785      	b.n	4330 <_ZN14USBDeviceClass4sendEmPKvm+0x20>
    4424:	20000680 	.word	0x20000680
    4428:	200001ed 	.word	0x200001ed
    442c:	200001f8 	.word	0x200001f8
    4430:	20000688 	.word	0x20000688
    4434:	200001f0 	.word	0x200001f0
    4438:	20000048 	.word	0x20000048
    443c:	000f4240 	.word	0x000f4240
    4440:	00011170 	.word	0x00011170

00004444 <_ZN14USBDeviceClass11sendControlEPKvm>:
	if (_dry_run == true)
    4444:	4b13      	ldr	r3, [pc, #76]	; (4494 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
{
    4446:	b570      	push	{r4, r5, r6, lr}
	if (_dry_run == true)
    4448:	781b      	ldrb	r3, [r3, #0]
{
    444a:	0014      	movs	r4, r2
	if (_dry_run == true)
    444c:	2b00      	cmp	r3, #0
    444e:	d10b      	bne.n	4468 <_ZN14USBDeviceClass11sendControlEPKvm+0x24>
	if (_pack_message == true) {
    4450:	4b11      	ldr	r3, [pc, #68]	; (4498 <_ZN14USBDeviceClass11sendControlEPKvm+0x54>)
    4452:	781b      	ldrb	r3, [r3, #0]
    4454:	2b00      	cmp	r3, #0
    4456:	d009      	beq.n	446c <_ZN14USBDeviceClass11sendControlEPKvm+0x28>
		memcpy(&_pack_buffer[_pack_size], data, len);
    4458:	4e10      	ldr	r6, [pc, #64]	; (449c <_ZN14USBDeviceClass11sendControlEPKvm+0x58>)
    445a:	4811      	ldr	r0, [pc, #68]	; (44a0 <_ZN14USBDeviceClass11sendControlEPKvm+0x5c>)
    445c:	8835      	ldrh	r5, [r6, #0]
    445e:	1940      	adds	r0, r0, r5
		_pack_size += len;
    4460:	192d      	adds	r5, r5, r4
		memcpy(&_pack_buffer[_pack_size], data, len);
    4462:	f00c fa82 	bl	1096a <memcpy>
		_pack_size += len;
    4466:	8035      	strh	r5, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    4468:	0020      	movs	r0, r4
    446a:	bd70      	pop	{r4, r5, r6, pc}
 	while (len > 0)
    446c:	2a00      	cmp	r2, #0
    446e:	d0fb      	beq.n	4468 <_ZN14USBDeviceClass11sendControlEPKvm+0x24>
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    4470:	4d0c      	ldr	r5, [pc, #48]	; (44a4 <_ZN14USBDeviceClass11sendControlEPKvm+0x60>)
    4472:	0028      	movs	r0, r5
    4474:	f00c fa79 	bl	1096a <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    4478:	4a0b      	ldr	r2, [pc, #44]	; (44a8 <_ZN14USBDeviceClass11sendControlEPKvm+0x64>)
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    447a:	490c      	ldr	r1, [pc, #48]	; (44ac <_ZN14USBDeviceClass11sendControlEPKvm+0x68>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    447c:	6155      	str	r5, [r2, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    447e:	6993      	ldr	r3, [r2, #24]
    4480:	400b      	ands	r3, r1
    4482:	6193      	str	r3, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    4484:	6993      	ldr	r3, [r2, #24]
    4486:	04a1      	lsls	r1, r4, #18
    4488:	0b9b      	lsrs	r3, r3, #14
    448a:	0c89      	lsrs	r1, r1, #18
    448c:	039b      	lsls	r3, r3, #14
    448e:	430b      	orrs	r3, r1
    4490:	6193      	str	r3, [r2, #24]
    4492:	e7e9      	b.n	4468 <_ZN14USBDeviceClass11sendControlEPKvm+0x24>
    4494:	20000578 	.word	0x20000578
    4498:	2000067c 	.word	0x2000067c
    449c:	2000067e 	.word	0x2000067e
    44a0:	2000057c 	.word	0x2000057c
    44a4:	200001f8 	.word	0x200001f8
    44a8:	20000688 	.word	0x20000688
    44ac:	f0003fff 	.word	0xf0003fff

000044b0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    44b0:	b570      	push	{r4, r5, r6, lr}
	switch (setup.bRequest) {
    44b2:	784b      	ldrb	r3, [r1, #1]
{
    44b4:	000c      	movs	r4, r1
	switch (setup.bRequest) {
    44b6:	2b0b      	cmp	r3, #11
    44b8:	d900      	bls.n	44bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xc>
    44ba:	e08c      	b.n	45d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x126>
    44bc:	4a52      	ldr	r2, [pc, #328]	; (4608 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x158>)
    44be:	009b      	lsls	r3, r3, #2
    44c0:	58d3      	ldr	r3, [r2, r3]
    44c2:	469f      	mov	pc, r3
	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
		return true;

	case SET_INTERFACE:
		_usbSetInterface = setup.wValueL;
    44c4:	788a      	ldrb	r2, [r1, #2]
    44c6:	4b51      	ldr	r3, [pc, #324]	; (460c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x15c>)
    44c8:	601a      	str	r2, [r3, #0]
    44ca:	4a51      	ldr	r2, [pc, #324]	; (4610 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
    44cc:	6993      	ldr	r3, [r2, #24]
    44ce:	0b9b      	lsrs	r3, r3, #14
    44d0:	039b      	lsls	r3, r3, #14
    44d2:	6193      	str	r3, [r2, #24]
		sendZlp(0);
		return true;
    44d4:	2301      	movs	r3, #1

	default:
		return true;
	}
}
    44d6:	0018      	movs	r0, r3
    44d8:	bd70      	pop	{r4, r5, r6, pc}
		if (setup.bmRequestType == 0)  // device
    44da:	780b      	ldrb	r3, [r1, #0]
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    44dc:	494d      	ldr	r1, [pc, #308]	; (4614 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x164>)
		if (setup.bmRequestType == 0)  // device
    44de:	2b00      	cmp	r3, #0
    44e0:	d07b      	beq.n	45da <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x12a>
			if (isEndpointHalt == 1)
    44e2:	4b4d      	ldr	r3, [pc, #308]	; (4618 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x168>)
    44e4:	781b      	ldrb	r3, [r3, #0]
    44e6:	3b01      	subs	r3, #1
    44e8:	425a      	negs	r2, r3
    44ea:	4153      	adcs	r3, r2
    44ec:	700b      	strb	r3, [r1, #0]
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    44ee:	2300      	movs	r3, #0
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    44f0:	4a47      	ldr	r2, [pc, #284]	; (4610 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
    44f2:	704b      	strb	r3, [r1, #1]
    44f4:	6151      	str	r1, [r2, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    44f6:	6993      	ldr	r3, [r2, #24]
    44f8:	4948      	ldr	r1, [pc, #288]	; (461c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x16c>)
    44fa:	400b      	ands	r3, r1
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    44fc:	2102      	movs	r1, #2
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    44fe:	6193      	str	r3, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    4500:	6993      	ldr	r3, [r2, #24]
    4502:	0b9b      	lsrs	r3, r3, #14
    4504:	039b      	lsls	r3, r3, #14
    4506:	430b      	orrs	r3, r1
    4508:	6193      	str	r3, [r2, #24]
			return true;
    450a:	2301      	movs	r3, #1
    450c:	e7e3      	b.n	44d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    450e:	788b      	ldrb	r3, [r1, #2]
    4510:	2b01      	cmp	r3, #1
    4512:	d064      	beq.n	45de <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x12e>
			isEndpointHalt = 0;
    4514:	2200      	movs	r2, #0
    4516:	4b40      	ldr	r3, [pc, #256]	; (4618 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x168>)
    4518:	701a      	strb	r2, [r3, #0]
    451a:	e7d6      	b.n	44ca <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    451c:	7888      	ldrb	r0, [r1, #2]
    451e:	2801      	cmp	r0, #1
    4520:	d060      	beq.n	45e4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x134>
		if (setup.wValueL == 0) // ENDPOINTHALT
    4522:	2800      	cmp	r0, #0
    4524:	d104      	bne.n	4530 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			isEndpointHalt = 1;
    4526:	2201      	movs	r2, #1
    4528:	4b3b      	ldr	r3, [pc, #236]	; (4618 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x168>)
    452a:	701a      	strb	r2, [r3, #0]
    452c:	e7cd      	b.n	44ca <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1a>
    452e:	7888      	ldrb	r0, [r1, #2]
    4530:	4b37      	ldr	r3, [pc, #220]	; (4610 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    4532:	2406      	movs	r4, #6
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    4534:	699a      	ldr	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    4536:	6819      	ldr	r1, [r3, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    4538:	0b92      	lsrs	r2, r2, #14
    453a:	0392      	lsls	r2, r2, #14
    453c:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    453e:	2208      	movs	r2, #8
    4540:	2302      	movs	r3, #2
    4542:	32ff      	adds	r2, #255	; 0xff
    4544:	548b      	strb	r3, [r1, r2]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    4546:	34ff      	adds	r4, #255	; 0xff
    4548:	5d0d      	ldrb	r5, [r1, r4]
    454a:	3b82      	subs	r3, #130	; 0x82
    454c:	432b      	orrs	r3, r5
    454e:	550b      	strb	r3, [r1, r4]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    4550:	5c8b      	ldrb	r3, [r1, r2]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    4552:	079b      	lsls	r3, r3, #30
    4554:	d5fc      	bpl.n	4550 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xa0>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    4556:	217f      	movs	r1, #127	; 0x7f
    4558:	4a31      	ldr	r2, [pc, #196]	; (4620 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x170>)
    455a:	4008      	ands	r0, r1
    455c:	7a93      	ldrb	r3, [r2, #10]
    455e:	438b      	bics	r3, r1
    4560:	4303      	orrs	r3, r0
    4562:	7293      	strb	r3, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    4564:	2380      	movs	r3, #128	; 0x80
    4566:	7a91      	ldrb	r1, [r2, #10]
    4568:	425b      	negs	r3, r3
    456a:	430b      	orrs	r3, r1
    456c:	7293      	strb	r3, [r2, #10]
		return true;
    456e:	2301      	movs	r3, #1
    4570:	e7b1      	b.n	44d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
		return sendDescriptor(setup);
    4572:	f7ff f8f3 	bl	375c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    4576:	0003      	movs	r3, r0
    4578:	e7ad      	b.n	44d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
		return false;
    457a:	2300      	movs	r3, #0
    457c:	e7ab      	b.n	44d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
    457e:	4b29      	ldr	r3, [pc, #164]	; (4624 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x174>)
    4580:	781a      	ldrb	r2, [r3, #0]
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    4582:	4b24      	ldr	r3, [pc, #144]	; (4614 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x164>)
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    4584:	4925      	ldr	r1, [pc, #148]	; (461c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x16c>)
    4586:	701a      	strb	r2, [r3, #0]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    4588:	4a21      	ldr	r2, [pc, #132]	; (4610 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
    458a:	6153      	str	r3, [r2, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    458c:	6993      	ldr	r3, [r2, #24]
    458e:	400b      	ands	r3, r1
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    4590:	2101      	movs	r1, #1
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    4592:	6193      	str	r3, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    4594:	6993      	ldr	r3, [r2, #24]
    4596:	0b9b      	lsrs	r3, r3, #14
    4598:	039b      	lsls	r3, r3, #14
    459a:	430b      	orrs	r3, r1
    459c:	6193      	str	r3, [r2, #24]
		return true;
    459e:	2301      	movs	r3, #1
    45a0:	e799      	b.n	44d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    45a2:	780a      	ldrb	r2, [r1, #0]
			return false;
    45a4:	2300      	movs	r3, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    45a6:	06d2      	lsls	r2, r2, #27
    45a8:	d195      	bne.n	44d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
			initEndpoints();
    45aa:	f7ff fb97 	bl	3cdc <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    45ae:	202a      	movs	r0, #42	; 0x2a
			_usbConfiguration = setup.wValueL;
    45b0:	78a2      	ldrb	r2, [r4, #2]
    45b2:	2402      	movs	r4, #2
    45b4:	4b1b      	ldr	r3, [pc, #108]	; (4624 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x174>)
    45b6:	30ff      	adds	r0, #255	; 0xff
    45b8:	601a      	str	r2, [r3, #0]
    45ba:	4a15      	ldr	r2, [pc, #84]	; (4610 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
    45bc:	6813      	ldr	r3, [r2, #0]
    45be:	5c19      	ldrb	r1, [r3, r0]
    45c0:	4321      	orrs	r1, r4
    45c2:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    45c4:	204a      	movs	r0, #74	; 0x4a
    45c6:	2401      	movs	r4, #1
    45c8:	30ff      	adds	r0, #255	; 0xff
    45ca:	5c19      	ldrb	r1, [r3, r0]
    45cc:	4321      	orrs	r1, r4
    45ce:	5419      	strb	r1, [r3, r0]
    45d0:	e77c      	b.n	44cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c>
    45d2:	4b0e      	ldr	r3, [pc, #56]	; (460c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x15c>)
    45d4:	e7d4      	b.n	4580 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xd0>
		return true;
    45d6:	2301      	movs	r3, #1
    45d8:	e77d      	b.n	44d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    45da:	700b      	strb	r3, [r1, #0]
    45dc:	e788      	b.n	44f0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x40>
    45de:	490d      	ldr	r1, [pc, #52]	; (4614 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x164>)
			if (isRemoteWakeUpEnabled == 1)
    45e0:	4b11      	ldr	r3, [pc, #68]	; (4628 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x178>)
    45e2:	e77f      	b.n	44e4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    45e4:	2200      	movs	r2, #0
			isRemoteWakeUpEnabled = 1;
    45e6:	4b10      	ldr	r3, [pc, #64]	; (4628 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x178>)
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    45e8:	490c      	ldr	r1, [pc, #48]	; (461c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x16c>)
    45ea:	7018      	strb	r0, [r3, #0]
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    45ec:	4b09      	ldr	r3, [pc, #36]	; (4614 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x164>)
    45ee:	701a      	strb	r2, [r3, #0]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    45f0:	4a07      	ldr	r2, [pc, #28]	; (4610 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x160>)
    45f2:	6153      	str	r3, [r2, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    45f4:	6993      	ldr	r3, [r2, #24]
    45f6:	400b      	ands	r3, r1
    45f8:	6193      	str	r3, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    45fa:	6993      	ldr	r3, [r2, #24]
    45fc:	0b9b      	lsrs	r3, r3, #14
    45fe:	039b      	lsls	r3, r3, #14
    4600:	4318      	orrs	r0, r3
    4602:	6190      	str	r0, [r2, #24]
			return true;
    4604:	2301      	movs	r3, #1
    4606:	e766      	b.n	44d6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x26>
    4608:	00010c58 	.word	0x00010c58
    460c:	20000684 	.word	0x20000684
    4610:	20000688 	.word	0x20000688
    4614:	200001f8 	.word	0x200001f8
    4618:	200001ee 	.word	0x200001ee
    461c:	f0003fff 	.word	0xf0003fff
    4620:	41005000 	.word	0x41005000
    4624:	20000680 	.word	0x20000680
    4628:	200001f7 	.word	0x200001f7

0000462c <_ZN14USBDeviceClass10ISRHandlerEv.part.10>:

void USBDeviceClass::ISRHandler()
    462c:	b5f0      	push	{r4, r5, r6, r7, lr}
    462e:	4657      	mov	r7, sl
    4630:	46de      	mov	lr, fp
    4632:	464e      	mov	r6, r9
    4634:	4645      	mov	r5, r8
    4636:	b5e0      	push	{r5, r6, r7, lr}
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    4638:	4fc7      	ldr	r7, [pc, #796]	; (4958 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x32c>)
    463a:	b083      	sub	sp, #12
    463c:	683b      	ldr	r3, [r7, #0]
    463e:	0004      	movs	r4, r0
    4640:	8b9a      	ldrh	r2, [r3, #28]

	if (_pack_message == true) {
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    4642:	0712      	lsls	r2, r2, #28
    4644:	d537      	bpl.n	46b6 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x8a>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    4646:	20c0      	movs	r0, #192	; 0xc0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    4648:	2180      	movs	r1, #128	; 0x80
    464a:	2607      	movs	r6, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    464c:	68ba      	ldr	r2, [r7, #8]
    464e:	4dc3      	ldr	r5, [pc, #780]	; (495c <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x330>)
    4650:	0580      	lsls	r0, r0, #22
    4652:	402a      	ands	r2, r5
    4654:	4302      	orrs	r2, r0
    4656:	60ba      	str	r2, [r7, #8]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    4658:	4ac1      	ldr	r2, [pc, #772]	; (4960 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x334>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    465a:	0049      	lsls	r1, r1, #1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    465c:	607a      	str	r2, [r7, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    465e:	5c5a      	ldrb	r2, [r3, r1]
    4660:	43b2      	bics	r2, r6
    4662:	2601      	movs	r6, #1
    4664:	4332      	orrs	r2, r6
    4666:	545a      	strb	r2, [r3, r1]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    4668:	69ba      	ldr	r2, [r7, #24]
    466a:	402a      	ands	r2, r5
    466c:	4310      	orrs	r0, r2
    466e:	61b8      	str	r0, [r7, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    4670:	2070      	movs	r0, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    4672:	4abc      	ldr	r2, [pc, #752]	; (4964 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x338>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    4674:	2540      	movs	r5, #64	; 0x40
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    4676:	617a      	str	r2, [r7, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    4678:	5c5a      	ldrb	r2, [r3, r1]
    467a:	4382      	bics	r2, r0
    467c:	2010      	movs	r0, #16
    467e:	4302      	orrs	r2, r0
    4680:	545a      	strb	r2, [r3, r1]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    4682:	68ba      	ldr	r2, [r7, #8]
    4684:	49b8      	ldr	r1, [pc, #736]	; (4968 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x33c>)
    4686:	4011      	ands	r1, r2
    4688:	2280      	movs	r2, #128	; 0x80
    468a:	0352      	lsls	r2, r2, #13
    468c:	430a      	orrs	r2, r1
    468e:	60ba      	str	r2, [r7, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    4690:	68ba      	ldr	r2, [r7, #8]
    4692:	0b92      	lsrs	r2, r2, #14
    4694:	0392      	lsls	r2, r2, #14
    4696:	60ba      	str	r2, [r7, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    4698:	2206      	movs	r2, #6
    469a:	32ff      	adds	r2, #255	; 0xff
    469c:	5c99      	ldrb	r1, [r3, r2]
    469e:	4329      	orrs	r1, r5
    46a0:	5499      	strb	r1, [r3, r2]
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    46a2:	210a      	movs	r1, #10
    46a4:	31ff      	adds	r1, #255	; 0xff
    46a6:	5c5a      	ldrb	r2, [r3, r1]
    46a8:	4302      	orrs	r2, r0
    46aa:	545a      	strb	r2, [r3, r1]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    46ac:	2100      	movs	r1, #0
    46ae:	4aaf      	ldr	r2, [pc, #700]	; (496c <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x340>)
    46b0:	6011      	str	r1, [r2, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    46b2:	2208      	movs	r2, #8
    46b4:	839a      	strh	r2, [r3, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    46b6:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    46b8:	0752      	lsls	r2, r2, #29
    46ba:	d51a      	bpl.n	46f2 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xc6>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    46bc:	2204      	movs	r2, #4
    46be:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    46c0:	4aab      	ldr	r2, [pc, #684]	; (4970 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x344>)
    46c2:	7813      	ldrb	r3, [r2, #0]
    46c4:	2b00      	cmp	r3, #0
    46c6:	d007      	beq.n	46d8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xac>
			txLEDPulse--;
    46c8:	7813      	ldrb	r3, [r2, #0]
    46ca:	3b01      	subs	r3, #1
    46cc:	b2db      	uxtb	r3, r3
    46ce:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    46d0:	7813      	ldrb	r3, [r2, #0]
    46d2:	2b00      	cmp	r3, #0
    46d4:	d100      	bne.n	46d8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xac>
    46d6:	e122      	b.n	491e <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2f2>
				digitalWrite(PIN_LED_TXL, HIGH);
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    46d8:	4aa6      	ldr	r2, [pc, #664]	; (4974 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x348>)
    46da:	7813      	ldrb	r3, [r2, #0]
    46dc:	2b00      	cmp	r3, #0
    46de:	d007      	beq.n	46f0 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xc4>
			rxLEDPulse--;
    46e0:	7813      	ldrb	r3, [r2, #0]
    46e2:	3b01      	subs	r3, #1
    46e4:	b2db      	uxtb	r3, r3
    46e6:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    46e8:	7813      	ldrb	r3, [r2, #0]
    46ea:	2b00      	cmp	r3, #0
    46ec:	d100      	bne.n	46f0 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xc4>
    46ee:	e120      	b.n	4932 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x306>
    46f0:	683b      	ldr	r3, [r7, #0]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    46f2:	2208      	movs	r2, #8
    46f4:	32ff      	adds	r2, #255	; 0xff
    46f6:	5c99      	ldrb	r1, [r3, r2]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    46f8:	06c9      	lsls	r1, r1, #27
    46fa:	d525      	bpl.n	4748 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x11c>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    46fc:	2110      	movs	r1, #16
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    46fe:	2040      	movs	r0, #64	; 0x40
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    4700:	5499      	strb	r1, [r3, r2]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    4702:	31f4      	adds	r1, #244	; 0xf4
    4704:	5c5a      	ldrb	r2, [r3, r1]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    4706:	4d96      	ldr	r5, [pc, #600]	; (4960 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x334>)
    4708:	4302      	orrs	r2, r0
    470a:	545a      	strb	r2, [r3, r1]
    470c:	2260      	movs	r2, #96	; 0x60
    470e:	782b      	ldrb	r3, [r5, #0]
    4710:	421a      	tst	r2, r3
    4712:	d000      	beq.n	4716 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xea>
    4714:	e0cf      	b.n	48b6 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x28a>
			// Standard Requests
			ok = handleStandardSetup(*setup);
    4716:	0029      	movs	r1, r5
    4718:	0020      	movs	r0, r4
    471a:	f7ff fec9 	bl	44b0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    471e:	2800      	cmp	r0, #0
    4720:	d000      	beq.n	4724 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xf8>
    4722:	e0d4      	b.n	48ce <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2a2>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    4724:	2306      	movs	r3, #6
    4726:	2120      	movs	r1, #32
    4728:	4a93      	ldr	r2, [pc, #588]	; (4978 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x34c>)
    472a:	33ff      	adds	r3, #255	; 0xff
    472c:	54d1      	strb	r1, [r2, r3]
    472e:	683b      	ldr	r3, [r7, #0]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    4730:	2208      	movs	r2, #8
    4732:	32ff      	adds	r2, #255	; 0xff
    4734:	5c99      	ldrb	r1, [r3, r2]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    4736:	0649      	lsls	r1, r1, #25
    4738:	d506      	bpl.n	4748 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x11c>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    473a:	2140      	movs	r1, #64	; 0x40
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    473c:	2040      	movs	r0, #64	; 0x40
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    473e:	5499      	strb	r1, [r3, r2]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    4740:	31c8      	adds	r1, #200	; 0xc8
    4742:	5c5a      	ldrb	r2, [r3, r1]
    4744:	4302      	orrs	r2, r0
    4746:	545a      	strb	r2, [r3, r1]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    4748:	8c1d      	ldrh	r5, [r3, #32]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    474a:	23fe      	movs	r3, #254	; 0xfe
    474c:	401d      	ands	r5, r3
	while (ept_int != 0)
    474e:	d100      	bne.n	4752 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x126>
    4750:	e087      	b.n	4862 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x236>
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
    4752:	4b8a      	ldr	r3, [pc, #552]	; (497c <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x350>)
	while (ept_int != 0)
    4754:	2400      	movs	r4, #0
		if ((ept_int & (1 << i)) != 0)
    4756:	2601      	movs	r6, #1
				if (epHandlers[i]) {
    4758:	4698      	mov	r8, r3
		if ((ept_int & (1 << i)) != 0)
    475a:	002b      	movs	r3, r5
    475c:	4123      	asrs	r3, r4
    475e:	421e      	tst	r6, r3
    4760:	d100      	bne.n	4764 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x138>
    4762:	e085      	b.n	4870 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x244>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    4764:	0023      	movs	r3, r4
    4766:	683a      	ldr	r2, [r7, #0]
    4768:	3308      	adds	r3, #8
    476a:	015b      	lsls	r3, r3, #5
    476c:	18d3      	adds	r3, r2, r3
    476e:	79d9      	ldrb	r1, [r3, #7]
			if (usbd.epBank0IsTransferComplete(i) ||
    4770:	07c9      	lsls	r1, r1, #31
    4772:	d402      	bmi.n	477a <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x14e>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    4774:	79db      	ldrb	r3, [r3, #7]
    4776:	079b      	lsls	r3, r3, #30
    4778:	d56a      	bpl.n	4850 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x224>
				if (epHandlers[i]) {
    477a:	4641      	mov	r1, r8
    477c:	00a3      	lsls	r3, r4, #2
    477e:	5858      	ldr	r0, [r3, r1]
    4780:	2800      	cmp	r0, #0
    4782:	d100      	bne.n	4786 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x15a>
    4784:	e0ac      	b.n	48e0 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2b4>
					epHandlers[i]->handleEndpoint();
    4786:	6803      	ldr	r3, [r0, #0]
    4788:	4a7d      	ldr	r2, [pc, #500]	; (4980 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x354>)
    478a:	681b      	ldr	r3, [r3, #0]
    478c:	4293      	cmp	r3, r2
    478e:	d000      	beq.n	4792 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x166>
    4790:	e0b7      	b.n	4902 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2d6>
		if (usbd.epBank0IsTransferComplete(ep))
    4792:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    4794:	7a01      	ldrb	r1, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    4796:	4699      	mov	r9, r3
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    4798:	681b      	ldr	r3, [r3, #0]
    479a:	469c      	mov	ip, r3
    479c:	23ff      	movs	r3, #255	; 0xff
    479e:	469a      	mov	sl, r3
    47a0:	000b      	movs	r3, r1
    47a2:	3308      	adds	r3, #8
    47a4:	015a      	lsls	r2, r3, #5
    47a6:	9300      	str	r3, [sp, #0]
    47a8:	4462      	add	r2, ip
    47aa:	79d3      	ldrb	r3, [r2, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    47ac:	07db      	lsls	r3, r3, #31
    47ae:	d54f      	bpl.n	4850 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x224>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    47b0:	0149      	lsls	r1, r1, #5
    47b2:	468b      	mov	fp, r1
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    47b4:	71d6      	strb	r6, [r2, #7]
			if (incoming == 0) {
    47b6:	6943      	ldr	r3, [r0, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    47b8:	44cb      	add	fp, r9
			if (incoming == 0) {
    47ba:	2b00      	cmp	r3, #0
    47bc:	d15c      	bne.n	4878 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x24c>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    47be:	465b      	mov	r3, fp
    47c0:	689a      	ldr	r2, [r3, #8]
    47c2:	0492      	lsls	r2, r2, #18
    47c4:	0c92      	lsrs	r2, r2, #18
				last0 = usbd.epBank0ByteCount(ep);
    47c6:	6202      	str	r2, [r0, #32]
				if (last0 != 0) {
    47c8:	6a02      	ldr	r2, [r0, #32]
    47ca:	2a00      	cmp	r2, #0
    47cc:	d01e      	beq.n	480c <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x1e0>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    47ce:	6a82      	ldr	r2, [r0, #40]	; 0x28
					incoming = 1;
    47d0:	6146      	str	r6, [r0, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    47d2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    47d4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    47d8:	b672      	cpsid	i
						ready0 = true;
    47da:	2324      	movs	r3, #36	; 0x24
    47dc:	54c6      	strb	r6, [r0, r3]
						if (ready1) {
    47de:	3310      	adds	r3, #16
    47e0:	5cc3      	ldrb	r3, [r0, r3]
    47e2:	b2db      	uxtb	r3, r3
    47e4:	2b00      	cmp	r3, #0
    47e6:	d15e      	bne.n	48a6 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x27a>
						notify = false;
    47e8:	2135      	movs	r1, #53	; 0x35
    47ea:	5443      	strb	r3, [r0, r1]
		if (primask == 0) {
    47ec:	2a00      	cmp	r2, #0
    47ee:	d102      	bne.n	47f6 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x1ca>
  __ASM volatile ("cpsie i" : : : "memory");
    47f0:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    47f2:	f3bf 8f6f 	isb	sy
    47f6:	4651      	mov	r1, sl
    47f8:	6843      	ldr	r3, [r0, #4]
    47fa:	4699      	mov	r9, r3
    47fc:	681b      	ldr	r3, [r3, #0]
    47fe:	469c      	mov	ip, r3
    4800:	6883      	ldr	r3, [r0, #8]
    4802:	4019      	ands	r1, r3
    4804:	000b      	movs	r3, r1
    4806:	3308      	adds	r3, #8
    4808:	9300      	str	r3, [sp, #0]
    480a:	0149      	lsls	r1, r1, #5
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    480c:	4663      	mov	r3, ip
    480e:	185a      	adds	r2, r3, r1
    4810:	3209      	adds	r2, #9
    4812:	32ff      	adds	r2, #255	; 0xff
    4814:	7853      	ldrb	r3, [r2, #1]
    4816:	9201      	str	r2, [sp, #4]
    4818:	469a      	mov	sl, r3
    481a:	2301      	movs	r3, #1
    481c:	469b      	mov	fp, r3
    481e:	4653      	mov	r3, sl
    4820:	465a      	mov	r2, fp
    4822:	4313      	orrs	r3, r2
    4824:	9a01      	ldr	r2, [sp, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    4826:	4449      	add	r1, r9
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    4828:	7053      	strb	r3, [r2, #1]
		usbd.epBank0SetMultiPacketSize(ep, size);
    482a:	68c0      	ldr	r0, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    482c:	688a      	ldr	r2, [r1, #8]
    482e:	4b4e      	ldr	r3, [pc, #312]	; (4968 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x33c>)
    4830:	0480      	lsls	r0, r0, #18
    4832:	401a      	ands	r2, r3
    4834:	0900      	lsrs	r0, r0, #4
    4836:	4302      	orrs	r2, r0
    4838:	608a      	str	r2, [r1, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    483a:	688a      	ldr	r2, [r1, #8]
    483c:	0b92      	lsrs	r2, r2, #14
    483e:	0392      	lsls	r2, r2, #14
    4840:	608a      	str	r2, [r1, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    4842:	2140      	movs	r1, #64	; 0x40
    4844:	9b00      	ldr	r3, [sp, #0]
    4846:	015b      	lsls	r3, r3, #5
    4848:	4463      	add	r3, ip
    484a:	791a      	ldrb	r2, [r3, #4]
    484c:	430a      	orrs	r2, r1
    484e:	711a      	strb	r2, [r3, #4]
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    4850:	0033      	movs	r3, r6
    4852:	40a3      	lsls	r3, r4
    4854:	439d      	bics	r5, r3
		}
		i++;
		if (i > USB_EPT_NUM)
    4856:	2c08      	cmp	r4, #8
    4858:	d003      	beq.n	4862 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x236>
    485a:	3401      	adds	r4, #1
	while (ept_int != 0)
    485c:	2d00      	cmp	r5, #0
    485e:	d000      	beq.n	4862 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x236>
    4860:	e77b      	b.n	475a <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x12e>
			break;  // fire exit
	}
}
    4862:	b003      	add	sp, #12
    4864:	bc3c      	pop	{r2, r3, r4, r5}
    4866:	4690      	mov	r8, r2
    4868:	4699      	mov	r9, r3
    486a:	46a2      	mov	sl, r4
    486c:	46ab      	mov	fp, r5
    486e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i > USB_EPT_NUM)
    4870:	2c08      	cmp	r4, #8
    4872:	d0f6      	beq.n	4862 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x236>
    4874:	3401      	adds	r4, #1
    4876:	e770      	b.n	475a <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x12e>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    4878:	465b      	mov	r3, fp
    487a:	689a      	ldr	r2, [r3, #8]
    487c:	0492      	lsls	r2, r2, #18
    487e:	0c92      	lsrs	r2, r2, #18
				last1 = usbd.epBank0ByteCount(ep);
    4880:	6302      	str	r2, [r0, #48]	; 0x30
				if (last1 != 0) {
    4882:	6b02      	ldr	r2, [r0, #48]	; 0x30
    4884:	2a00      	cmp	r2, #0
    4886:	d0c1      	beq.n	480c <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x1e0>
					incoming = 0;
    4888:	2300      	movs	r3, #0
    488a:	6143      	str	r3, [r0, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    488c:	465b      	mov	r3, fp
    488e:	6982      	ldr	r2, [r0, #24]
    4890:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4892:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4896:	b672      	cpsid	i
						ready1 = true;
    4898:	2334      	movs	r3, #52	; 0x34
    489a:	54c6      	strb	r6, [r0, r3]
						if (ready0) {
    489c:	3b10      	subs	r3, #16
    489e:	5cc3      	ldrb	r3, [r0, r3]
    48a0:	b2db      	uxtb	r3, r3
    48a2:	2b00      	cmp	r3, #0
    48a4:	d0a0      	beq.n	47e8 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x1bc>
							notify = true;
    48a6:	2335      	movs	r3, #53	; 0x35
    48a8:	54c6      	strb	r6, [r0, r3]
		if (primask == 0) {
    48aa:	2a00      	cmp	r2, #0
    48ac:	d1d0      	bne.n	4850 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x224>
  __ASM volatile ("cpsie i" : : : "memory");
    48ae:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    48b0:	f3bf 8f6f 	isb	sy
    48b4:	e7cc      	b.n	4850 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x224>
	if (CDC_ACM_INTERFACE == i)
    48b6:	792b      	ldrb	r3, [r5, #4]
    48b8:	2b00      	cmp	r3, #0
    48ba:	d124      	bne.n	4906 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2da>
		if (CDC_Setup(setup) == false) {
    48bc:	0028      	movs	r0, r5
    48be:	f00b fdbb 	bl	10438 <_Z9CDC_SetupR8USBSetup>
    48c2:	2800      	cmp	r0, #0
    48c4:	d103      	bne.n	48ce <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2a2>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    48c6:	69bb      	ldr	r3, [r7, #24]
    48c8:	0b9b      	lsrs	r3, r3, #14
    48ca:	039b      	lsls	r3, r3, #14
    48cc:	61bb      	str	r3, [r7, #24]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    48ce:	2106      	movs	r1, #6
    48d0:	2280      	movs	r2, #128	; 0x80
    48d2:	683b      	ldr	r3, [r7, #0]
    48d4:	31ff      	adds	r1, #255	; 0xff
    48d6:	5c58      	ldrb	r0, [r3, r1]
    48d8:	4252      	negs	r2, r2
    48da:	4302      	orrs	r2, r0
    48dc:	545a      	strb	r2, [r3, r1]
    48de:	e727      	b.n	4730 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x104>
    48e0:	b2e3      	uxtb	r3, r4
	if (ep == CDC_ENDPOINT_IN)
    48e2:	2c03      	cmp	r4, #3
    48e4:	d02a      	beq.n	493c <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x310>
	if (ep == CDC_ENDPOINT_ACM)
    48e6:	2b01      	cmp	r3, #1
    48e8:	d1b2      	bne.n	4850 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x224>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    48ea:	2192      	movs	r1, #146	; 0x92
    48ec:	0049      	lsls	r1, r1, #1
    48ee:	5c50      	ldrb	r0, [r2, r1]
    48f0:	3b81      	subs	r3, #129	; 0x81
    48f2:	4303      	orrs	r3, r0
    48f4:	5453      	strb	r3, [r2, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    48f6:	2328      	movs	r3, #40	; 0x28
    48f8:	3923      	subs	r1, #35	; 0x23
    48fa:	39ff      	subs	r1, #255	; 0xff
    48fc:	33ff      	adds	r3, #255	; 0xff
    48fe:	54d1      	strb	r1, [r2, r3]
    4900:	e7a6      	b.n	4850 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x224>
					epHandlers[i]->handleEndpoint();
    4902:	4798      	blx	r3
    4904:	e7a4      	b.n	4850 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x224>
	bool ret = PluggableUSB().setup(setup);
    4906:	f00b fe4b 	bl	105a0 <_Z12PluggableUSBv>
    490a:	0029      	movs	r1, r5
    490c:	f00b fe34 	bl	10578 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    4910:	2800      	cmp	r0, #0
    4912:	d1dc      	bne.n	48ce <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x2a2>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    4914:	69bb      	ldr	r3, [r7, #24]
    4916:	0b9b      	lsrs	r3, r3, #14
    4918:	039b      	lsls	r3, r3, #14
    491a:	61bb      	str	r3, [r7, #24]
    491c:	e702      	b.n	4724 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xf8>
				digitalWrite(PIN_LED_TXL, HIGH);
    491e:	2101      	movs	r1, #1
    4920:	201f      	movs	r0, #31
    4922:	f000 f955 	bl	4bd0 <digitalWrite>
		if (rxLEDPulse > 0) {
    4926:	4a13      	ldr	r2, [pc, #76]	; (4974 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x348>)
    4928:	7813      	ldrb	r3, [r2, #0]
    492a:	2b00      	cmp	r3, #0
    492c:	d000      	beq.n	4930 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x304>
    492e:	e6d7      	b.n	46e0 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xb4>
    4930:	e6de      	b.n	46f0 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xc4>
				digitalWrite(PIN_LED_RXL, HIGH);
    4932:	2101      	movs	r1, #1
    4934:	201e      	movs	r0, #30
    4936:	f000 f94b 	bl	4bd0 <digitalWrite>
    493a:	e6d9      	b.n	46f0 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0xc4>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    493c:	21b2      	movs	r1, #178	; 0xb2
    493e:	2380      	movs	r3, #128	; 0x80
    4940:	0049      	lsls	r1, r1, #1
    4942:	5c50      	ldrb	r0, [r2, r1]
    4944:	425b      	negs	r3, r3
    4946:	4303      	orrs	r3, r0
    4948:	5453      	strb	r3, [r2, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    494a:	2368      	movs	r3, #104	; 0x68
    494c:	3963      	subs	r1, #99	; 0x63
    494e:	39ff      	subs	r1, #255	; 0xff
    4950:	33ff      	adds	r3, #255	; 0xff
    4952:	54d1      	strb	r1, [r2, r3]
    4954:	e77c      	b.n	4850 <_ZN14USBDeviceClass10ISRHandlerEv.part.10+0x224>
    4956:	46c0      	nop			; (mov r8, r8)
    4958:	20000688 	.word	0x20000688
    495c:	8fffffff 	.word	0x8fffffff
    4960:	200003b8 	.word	0x200003b8
    4964:	200001f8 	.word	0x200001f8
    4968:	f0003fff 	.word	0xf0003fff
    496c:	20000680 	.word	0x20000680
    4970:	200001ed 	.word	0x200001ed
    4974:	200001ec 	.word	0x200001ec
    4978:	41005000 	.word	0x41005000
    497c:	200001d0 	.word	0x200001d0
    4980:	00003429 	.word	0x00003429

00004984 <UDD_Handler>:
	if (_pack_message == true) {
    4984:	4b04      	ldr	r3, [pc, #16]	; (4998 <UDD_Handler+0x14>)
extern "C" void UDD_Handler(void) {
    4986:	b510      	push	{r4, lr}
	if (_pack_message == true) {
    4988:	781b      	ldrb	r3, [r3, #0]
    498a:	2b00      	cmp	r3, #0
    498c:	d102      	bne.n	4994 <UDD_Handler+0x10>
    498e:	4803      	ldr	r0, [pc, #12]	; (499c <UDD_Handler+0x18>)
    4990:	f7ff fe4c 	bl	462c <_ZN14USBDeviceClass10ISRHandlerEv.part.10>
}
    4994:	bd10      	pop	{r4, pc}
    4996:	46c0      	nop			; (mov r8, r8)
    4998:	2000067c 	.word	0x2000067c
    499c:	200001cc 	.word	0x200001cc

000049a0 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    49a0:	4a01      	ldr	r2, [pc, #4]	; (49a8 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    49a2:	4b02      	ldr	r3, [pc, #8]	; (49ac <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    49a4:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    49a6:	4770      	bx	lr
    49a8:	41005000 	.word	0x41005000
    49ac:	20000688 	.word	0x20000688

000049b0 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    49b0:	21fa      	movs	r1, #250	; 0xfa
    49b2:	4b32      	ldr	r3, [pc, #200]	; (4a7c <init+0xcc>)
{
    49b4:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    49b6:	6818      	ldr	r0, [r3, #0]
    49b8:	0089      	lsls	r1, r1, #2
    49ba:	f00b fe0b 	bl	105d4 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    49be:	4b30      	ldr	r3, [pc, #192]	; (4a80 <init+0xd0>)
    49c0:	3801      	subs	r0, #1
    49c2:	4298      	cmp	r0, r3
    49c4:	d900      	bls.n	49c8 <init+0x18>
    49c6:	e7fe      	b.n	49c6 <init+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    49c8:	492e      	ldr	r1, [pc, #184]	; (4a84 <init+0xd4>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    49ca:	4a2f      	ldr	r2, [pc, #188]	; (4a88 <init+0xd8>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    49cc:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    49ce:	20c0      	movs	r0, #192	; 0xc0
    49d0:	6a13      	ldr	r3, [r2, #32]
    49d2:	0600      	lsls	r0, r0, #24
    49d4:	021b      	lsls	r3, r3, #8
    49d6:	0a1b      	lsrs	r3, r3, #8
    49d8:	4303      	orrs	r3, r0
    49da:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    49dc:	2300      	movs	r3, #0
    49de:	608b      	str	r3, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    49e0:	3307      	adds	r3, #7
    49e2:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    49e4:	2180      	movs	r1, #128	; 0x80
    49e6:	6a13      	ldr	r3, [r2, #32]
    49e8:	0609      	lsls	r1, r1, #24
    49ea:	021b      	lsls	r3, r3, #8
    49ec:	0a1b      	lsrs	r3, r3, #8
    49ee:	430b      	orrs	r3, r1
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    49f0:	21fc      	movs	r1, #252	; 0xfc
    49f2:	6213      	str	r3, [r2, #32]
    49f4:	4b25      	ldr	r3, [pc, #148]	; (4a8c <init+0xdc>)

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    49f6:	2400      	movs	r4, #0
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    49f8:	6a1a      	ldr	r2, [r3, #32]
    49fa:	430a      	orrs	r2, r1
    49fc:	621a      	str	r2, [r3, #32]
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    49fe:	22fc      	movs	r2, #252	; 0xfc
    4a00:	6a19      	ldr	r1, [r3, #32]
    4a02:	0192      	lsls	r2, r2, #6
    4a04:	430a      	orrs	r2, r1
    4a06:	621a      	str	r2, [r3, #32]
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    4a08:	22a0      	movs	r2, #160	; 0xa0
    4a0a:	6a19      	ldr	r1, [r3, #32]
    4a0c:	02d2      	lsls	r2, r2, #11
    4a0e:	430a      	orrs	r2, r1
    4a10:	621a      	str	r2, [r3, #32]
  {
    pinMode( ul, INPUT ) ;
    4a12:	0020      	movs	r0, r4
    4a14:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    4a16:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    4a18:	f000 f88a 	bl	4b30 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    4a1c:	2c13      	cmp	r4, #19
    4a1e:	d1f8      	bne.n	4a12 <init+0x62>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    4a20:	4a1b      	ldr	r2, [pc, #108]	; (4a90 <init+0xe0>)
    4a22:	7853      	ldrb	r3, [r2, #1]
    4a24:	b25b      	sxtb	r3, r3
    4a26:	2b00      	cmp	r3, #0
    4a28:	dbfb      	blt.n	4a22 <init+0x72>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    4a2a:	4b1a      	ldr	r3, [pc, #104]	; (4a94 <init+0xe4>)
    4a2c:	8053      	strh	r3, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    4a2e:	4b1a      	ldr	r3, [pc, #104]	; (4a98 <init+0xe8>)
    4a30:	7e5a      	ldrb	r2, [r3, #25]
    4a32:	09d2      	lsrs	r2, r2, #7
    4a34:	2a01      	cmp	r2, #1
    4a36:	d0fb      	beq.n	4a30 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    4a38:	22e4      	movs	r2, #228	; 0xe4
    4a3a:	00d2      	lsls	r2, r2, #3
    4a3c:	809a      	strh	r2, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    4a3e:	223f      	movs	r2, #63	; 0x3f
    4a40:	70da      	strb	r2, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    4a42:	4b15      	ldr	r3, [pc, #84]	; (4a98 <init+0xe8>)
    4a44:	7e5a      	ldrb	r2, [r3, #25]
    4a46:	09d2      	lsrs	r2, r2, #7
    4a48:	2a01      	cmp	r2, #1
    4a4a:	d0fb      	beq.n	4a44 <init+0x94>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    4a4c:	22c0      	movs	r2, #192	; 0xc0
    4a4e:	0152      	lsls	r2, r2, #5
    4a50:	611a      	str	r2, [r3, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    4a52:	2200      	movs	r2, #0
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    4a54:	2000      	movs	r0, #0
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    4a56:	709a      	strb	r2, [r3, #2]
  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    4a58:	f000 f824 	bl	4aa4 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    4a5c:	4a0c      	ldr	r2, [pc, #48]	; (4a90 <init+0xe0>)
    4a5e:	7853      	ldrb	r3, [r2, #1]
    4a60:	b25b      	sxtb	r3, r3
    4a62:	2b00      	cmp	r3, #0
    4a64:	dbfb      	blt.n	4a5e <init+0xae>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    4a66:	4b0d      	ldr	r3, [pc, #52]	; (4a9c <init+0xec>)
    4a68:	8053      	strh	r3, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    4a6a:	4a0d      	ldr	r2, [pc, #52]	; (4aa0 <init+0xf0>)
    4a6c:	79d3      	ldrb	r3, [r2, #7]
    4a6e:	09db      	lsrs	r3, r3, #7
    4a70:	2b01      	cmp	r3, #1
    4a72:	d0fb      	beq.n	4a6c <init+0xbc>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    4a74:	2341      	movs	r3, #65	; 0x41
    4a76:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    4a78:	bd10      	pop	{r4, pc}
    4a7a:	46c0      	nop			; (mov r8, r8)
    4a7c:	20000048 	.word	0x20000048
    4a80:	00ffffff 	.word	0x00ffffff
    4a84:	e000e010 	.word	0xe000e010
    4a88:	e000ed00 	.word	0xe000ed00
    4a8c:	40000400 	.word	0x40000400
    4a90:	40000c00 	.word	0x40000c00
    4a94:	0000401e 	.word	0x0000401e
    4a98:	42004000 	.word	0x42004000
    4a9c:	00004021 	.word	0x00004021
    4aa0:	42004800 	.word	0x42004800

00004aa4 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    4aa4:	4a1f      	ldr	r2, [pc, #124]	; (4b24 <analogReference+0x80>)
    4aa6:	7e53      	ldrb	r3, [r2, #25]
    4aa8:	09db      	lsrs	r3, r3, #7
    4aaa:	2b01      	cmp	r3, #1
    4aac:	d0fb      	beq.n	4aa6 <analogReference+0x2>
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
  syncADC();
  switch (mode)
    4aae:	2805      	cmp	r0, #5
    4ab0:	d831      	bhi.n	4b16 <analogReference+0x72>
    4ab2:	4b1d      	ldr	r3, [pc, #116]	; (4b28 <analogReference+0x84>)
    4ab4:	0080      	lsls	r0, r0, #2
    4ab6:	581b      	ldr	r3, [r3, r0]
    4ab8:	469f      	mov	pc, r3
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    4aba:	4a1a      	ldr	r2, [pc, #104]	; (4b24 <analogReference+0x80>)
    4abc:	491b      	ldr	r1, [pc, #108]	; (4b2c <analogReference+0x88>)
    4abe:	6913      	ldr	r3, [r2, #16]
    4ac0:	400b      	ands	r3, r1
      break;

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    4ac2:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    4ac4:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    4ac6:	7853      	ldrb	r3, [r2, #1]
    4ac8:	438b      	bics	r3, r1
    4aca:	2102      	movs	r1, #2
    4acc:	430b      	orrs	r3, r1
    4ace:	7053      	strb	r3, [r2, #1]
      break;
  }
}
    4ad0:	4770      	bx	lr
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    4ad2:	4b14      	ldr	r3, [pc, #80]	; (4b24 <analogReference+0x80>)
    4ad4:	4915      	ldr	r1, [pc, #84]	; (4b2c <analogReference+0x88>)
    4ad6:	691a      	ldr	r2, [r3, #16]
    4ad8:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
    4ada:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    4adc:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
    4ade:	785a      	ldrb	r2, [r3, #1]
    4ae0:	438a      	bics	r2, r1
    4ae2:	705a      	strb	r2, [r3, #1]
      break;
    4ae4:	e7f4      	b.n	4ad0 <analogReference+0x2c>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    4ae6:	4a0f      	ldr	r2, [pc, #60]	; (4b24 <analogReference+0x80>)
    4ae8:	4910      	ldr	r1, [pc, #64]	; (4b2c <analogReference+0x88>)
    4aea:	6913      	ldr	r3, [r2, #16]
    4aec:	400b      	ands	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    4aee:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    4af0:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    4af2:	7853      	ldrb	r3, [r2, #1]
    4af4:	438b      	bics	r3, r1
    4af6:	2103      	movs	r1, #3
    4af8:	430b      	orrs	r3, r1
    4afa:	7053      	strb	r3, [r2, #1]
      break;
    4afc:	e7e8      	b.n	4ad0 <analogReference+0x2c>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    4afe:	4a09      	ldr	r2, [pc, #36]	; (4b24 <analogReference+0x80>)
    4b00:	490a      	ldr	r1, [pc, #40]	; (4b2c <analogReference+0x88>)
    4b02:	6913      	ldr	r3, [r2, #16]
    4b04:	400b      	ands	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    4b06:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    4b08:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    4b0a:	7853      	ldrb	r3, [r2, #1]
    4b0c:	438b      	bics	r3, r1
    4b0e:	2101      	movs	r1, #1
    4b10:	430b      	orrs	r3, r1
    4b12:	7053      	strb	r3, [r2, #1]
      break;
    4b14:	e7dc      	b.n	4ad0 <analogReference+0x2c>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    4b16:	23f0      	movs	r3, #240	; 0xf0
    4b18:	4a02      	ldr	r2, [pc, #8]	; (4b24 <analogReference+0x80>)
    4b1a:	051b      	lsls	r3, r3, #20
    4b1c:	6911      	ldr	r1, [r2, #16]
    4b1e:	430b      	orrs	r3, r1
    4b20:	e7cf      	b.n	4ac2 <analogReference+0x1e>
    4b22:	46c0      	nop			; (mov r8, r8)
    4b24:	42004000 	.word	0x42004000
    4b28:	00010cd0 	.word	0x00010cd0
    4b2c:	f0ffffff 	.word	0xf0ffffff

00004b30 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    4b30:	b510      	push	{r4, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    4b32:	2408      	movs	r4, #8
    4b34:	0043      	lsls	r3, r0, #1
    4b36:	1818      	adds	r0, r3, r0
    4b38:	4a23      	ldr	r2, [pc, #140]	; (4bc8 <pinMode+0x98>)
    4b3a:	00c0      	lsls	r0, r0, #3
    4b3c:	1813      	adds	r3, r2, r0
    4b3e:	571c      	ldrsb	r4, [r3, r4]
    4b40:	3401      	adds	r4, #1
    4b42:	d015      	beq.n	4b70 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    4b44:	2901      	cmp	r1, #1
    4b46:	d031      	beq.n	4bac <pinMode+0x7c>
    4b48:	2900      	cmp	r1, #0
    4b4a:	d012      	beq.n	4b72 <pinMode+0x42>
    4b4c:	2902      	cmp	r1, #2
    4b4e:	d01e      	beq.n	4b8e <pinMode+0x5e>
    4b50:	2903      	cmp	r1, #3
    4b52:	d10d      	bne.n	4b70 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    4b54:	5682      	ldrsb	r2, [r0, r2]
    4b56:	6859      	ldr	r1, [r3, #4]
    4b58:	01d3      	lsls	r3, r2, #7
    4b5a:	4a1c      	ldr	r2, [pc, #112]	; (4bcc <pinMode+0x9c>)
    4b5c:	2006      	movs	r0, #6
    4b5e:	4694      	mov	ip, r2
    4b60:	4463      	add	r3, ip
    4b62:	185a      	adds	r2, r3, r1
    4b64:	3240      	adds	r2, #64	; 0x40
    4b66:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    4b68:	2201      	movs	r2, #1
    4b6a:	408a      	lsls	r2, r1
    4b6c:	605a      	str	r2, [r3, #4]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.6 Data Output Value Clear')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    4b6e:	615a      	str	r2, [r3, #20]

    default:
      // do nothing
    break ;
  }
}
    4b70:	bd10      	pop	{r4, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    4b72:	5682      	ldrsb	r2, [r0, r2]
    4b74:	6859      	ldr	r1, [r3, #4]
    4b76:	01d3      	lsls	r3, r2, #7
    4b78:	4a14      	ldr	r2, [pc, #80]	; (4bcc <pinMode+0x9c>)
    4b7a:	2002      	movs	r0, #2
    4b7c:	4694      	mov	ip, r2
    4b7e:	4463      	add	r3, ip
    4b80:	185a      	adds	r2, r3, r1
    4b82:	3240      	adds	r2, #64	; 0x40
    4b84:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    4b86:	2201      	movs	r2, #1
    4b88:	408a      	lsls	r2, r1
    4b8a:	605a      	str	r2, [r3, #4]
    break ;
    4b8c:	e7f0      	b.n	4b70 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    4b8e:	5682      	ldrsb	r2, [r0, r2]
    4b90:	6859      	ldr	r1, [r3, #4]
    4b92:	01d3      	lsls	r3, r2, #7
    4b94:	4a0d      	ldr	r2, [pc, #52]	; (4bcc <pinMode+0x9c>)
    4b96:	2006      	movs	r0, #6
    4b98:	4694      	mov	ip, r2
    4b9a:	4463      	add	r3, ip
    4b9c:	185a      	adds	r2, r3, r1
    4b9e:	3240      	adds	r2, #64	; 0x40
    4ba0:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    4ba2:	2201      	movs	r2, #1
    4ba4:	408a      	lsls	r2, r1
    4ba6:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    4ba8:	619a      	str	r2, [r3, #24]
    break ;
    4baa:	e7e1      	b.n	4b70 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    4bac:	5682      	ldrsb	r2, [r0, r2]
    4bae:	6858      	ldr	r0, [r3, #4]
    4bb0:	01d3      	lsls	r3, r2, #7
    4bb2:	4a06      	ldr	r2, [pc, #24]	; (4bcc <pinMode+0x9c>)
    4bb4:	2402      	movs	r4, #2
    4bb6:	4694      	mov	ip, r2
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    4bb8:	4081      	lsls	r1, r0
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    4bba:	4463      	add	r3, ip
    4bbc:	181a      	adds	r2, r3, r0
    4bbe:	3240      	adds	r2, #64	; 0x40
    4bc0:	7014      	strb	r4, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    4bc2:	6099      	str	r1, [r3, #8]
    break ;
    4bc4:	e7d4      	b.n	4b70 <pinMode+0x40>
    4bc6:	46c0      	nop			; (mov r8, r8)
    4bc8:	00010e00 	.word	0x00010e00
    4bcc:	41004400 	.word	0x41004400

00004bd0 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    4bd0:	2208      	movs	r2, #8
    4bd2:	0043      	lsls	r3, r0, #1
    4bd4:	1818      	adds	r0, r3, r0
{
    4bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    4bd8:	4d12      	ldr	r5, [pc, #72]	; (4c24 <digitalWrite+0x54>)
    4bda:	00c0      	lsls	r0, r0, #3
    4bdc:	182b      	adds	r3, r5, r0
    4bde:	569a      	ldrsb	r2, [r3, r2]
    4be0:	3201      	adds	r2, #1
    4be2:	d01c      	beq.n	4c1e <digitalWrite+0x4e>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    4be4:	2401      	movs	r4, #1
    4be6:	0026      	movs	r6, r4
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    4be8:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    4bea:	5743      	ldrsb	r3, [r0, r5]
  uint32_t pinMask = (1ul << pin);
    4bec:	40be      	lsls	r6, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    4bee:	4a0e      	ldr	r2, [pc, #56]	; (4c28 <digitalWrite+0x58>)
    4bf0:	01db      	lsls	r3, r3, #7
    4bf2:	189a      	adds	r2, r3, r2
    4bf4:	6890      	ldr	r0, [r2, #8]
    4bf6:	4230      	tst	r0, r6
    4bf8:	d10b      	bne.n	4c12 <digitalWrite+0x42>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    4bfa:	000d      	movs	r5, r1
    4bfc:	1e68      	subs	r0, r5, #1
    4bfe:	4185      	sbcs	r5, r0
    4c00:	402c      	ands	r4, r5
    4c02:	2504      	movs	r5, #4
    4c04:	19d2      	adds	r2, r2, r7
    4c06:	3240      	adds	r2, #64	; 0x40
    4c08:	7810      	ldrb	r0, [r2, #0]
    4c0a:	00a4      	lsls	r4, r4, #2
    4c0c:	43a8      	bics	r0, r5
    4c0e:	4304      	orrs	r4, r0
    4c10:	7014      	strb	r4, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    4c12:	4a05      	ldr	r2, [pc, #20]	; (4c28 <digitalWrite+0x58>)
    4c14:	4694      	mov	ip, r2
    4c16:	4463      	add	r3, ip
  switch ( ulVal )
    4c18:	2900      	cmp	r1, #0
    4c1a:	d001      	beq.n	4c20 <digitalWrite+0x50>
    break ;

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    4c1c:	619e      	str	r6, [r3, #24]
    break ;
  }

  return ;
}
    4c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTCLR.reg = pinMask;
    4c20:	615e      	str	r6, [r3, #20]
    break ;
    4c22:	e7fc      	b.n	4c1e <digitalWrite+0x4e>
    4c24:	00010e00 	.word	0x00010e00
    4c28:	41004400 	.word	0x41004400

00004c2c <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    4c2c:	b570      	push	{r4, r5, r6, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    4c2e:	2408      	movs	r4, #8
    4c30:	0042      	lsls	r2, r0, #1
    4c32:	4d2b      	ldr	r5, [pc, #172]	; (4ce0 <pinPeripheral+0xb4>)
    4c34:	1813      	adds	r3, r2, r0
    4c36:	00db      	lsls	r3, r3, #3
    4c38:	18eb      	adds	r3, r5, r3
    4c3a:	571c      	ldrsb	r4, [r3, r4]
    4c3c:	1c63      	adds	r3, r4, #1
    4c3e:	d009      	beq.n	4c54 <pinPeripheral+0x28>
  {
    return -1 ;
  }

  switch ( ulPeripheral )
    4c40:	1c4b      	adds	r3, r1, #1
    4c42:	b2db      	uxtb	r3, r3
    4c44:	2b0c      	cmp	r3, #12
    4c46:	d821      	bhi.n	4c8c <pinPeripheral+0x60>
    4c48:	4c26      	ldr	r4, [pc, #152]	; (4ce4 <pinPeripheral+0xb8>)
    4c4a:	009b      	lsls	r3, r3, #2
    4c4c:	58e3      	ldr	r3, [r4, r3]
    4c4e:	469f      	mov	pc, r3
      }
#endif
    break ;

    case PIO_NOT_A_PIN:
      return -1l ;
    4c50:	2401      	movs	r4, #1
    4c52:	4264      	negs	r4, r4
    break ;
  }

  return 0l ;
}
    4c54:	0020      	movs	r0, r4
    4c56:	bd70      	pop	{r4, r5, r6, pc}
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    4c58:	1812      	adds	r2, r2, r0
    4c5a:	00d2      	lsls	r2, r2, #3
    4c5c:	18ab      	adds	r3, r5, r2
    4c5e:	6858      	ldr	r0, [r3, #4]
    4c60:	07c3      	lsls	r3, r0, #31
    4c62:	d420      	bmi.n	4ca6 <pinPeripheral+0x7a>
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    4c64:	56ab      	ldrsb	r3, [r5, r2]
    4c66:	4a20      	ldr	r2, [pc, #128]	; (4ce8 <pinPeripheral+0xbc>)
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    4c68:	250f      	movs	r5, #15
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    4c6a:	4694      	mov	ip, r2
    4c6c:	01db      	lsls	r3, r3, #7
    4c6e:	4463      	add	r3, ip
    4c70:	0844      	lsrs	r4, r0, #1
    4c72:	191c      	adds	r4, r3, r4
    4c74:	3430      	adds	r4, #48	; 0x30
    4c76:	7822      	ldrb	r2, [r4, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    4c78:	181b      	adds	r3, r3, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    4c7a:	43aa      	bics	r2, r5
    4c7c:	4311      	orrs	r1, r2
    4c7e:	b2c9      	uxtb	r1, r1
    4c80:	7021      	strb	r1, [r4, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    4c82:	2101      	movs	r1, #1
    4c84:	3340      	adds	r3, #64	; 0x40
    4c86:	781a      	ldrb	r2, [r3, #0]
    4c88:	430a      	orrs	r2, r1
    4c8a:	701a      	strb	r2, [r3, #0]
  return 0l ;
    4c8c:	2400      	movs	r4, #0
    4c8e:	e7e1      	b.n	4c54 <pinPeripheral+0x28>
      if ( ulPeripheral == PIO_INPUT )
    4c90:	2909      	cmp	r1, #9
    4c92:	d01a      	beq.n	4cca <pinPeripheral+0x9e>
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    4c94:	290a      	cmp	r1, #10
    4c96:	d01d      	beq.n	4cd4 <pinPeripheral+0xa8>
  return 0l ;
    4c98:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    4c9a:	290b      	cmp	r1, #11
    4c9c:	d1da      	bne.n	4c54 <pinPeripheral+0x28>
            pinMode( ulPin, OUTPUT ) ;
    4c9e:	390a      	subs	r1, #10
    4ca0:	f7ff ff46 	bl	4b30 <pinMode>
    4ca4:	e7d6      	b.n	4c54 <pinPeripheral+0x28>
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    4ca6:	4b10      	ldr	r3, [pc, #64]	; (4ce8 <pinPeripheral+0xbc>)
    4ca8:	56aa      	ldrsb	r2, [r5, r2]
    4caa:	469c      	mov	ip, r3
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    4cac:	230f      	movs	r3, #15
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    4cae:	01d2      	lsls	r2, r2, #7
    4cb0:	4462      	add	r2, ip
    4cb2:	0844      	lsrs	r4, r0, #1
    4cb4:	1914      	adds	r4, r2, r4
    4cb6:	3430      	adds	r4, #48	; 0x30
    4cb8:	7825      	ldrb	r5, [r4, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    4cba:	0109      	lsls	r1, r1, #4
    4cbc:	402b      	ands	r3, r5
    4cbe:	4319      	orrs	r1, r3
    4cc0:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    4cc2:	1812      	adds	r2, r2, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    4cc4:	7021      	strb	r1, [r4, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    4cc6:	0013      	movs	r3, r2
    4cc8:	e7db      	b.n	4c82 <pinPeripheral+0x56>
        pinMode( ulPin, INPUT ) ;
    4cca:	2100      	movs	r1, #0
    4ccc:	f7ff ff30 	bl	4b30 <pinMode>
  return 0l ;
    4cd0:	2400      	movs	r4, #0
    4cd2:	e7bf      	b.n	4c54 <pinPeripheral+0x28>
          pinMode( ulPin, INPUT_PULLUP ) ;
    4cd4:	3908      	subs	r1, #8
    4cd6:	f7ff ff2b 	bl	4b30 <pinMode>
  return 0l ;
    4cda:	2400      	movs	r4, #0
    4cdc:	e7ba      	b.n	4c54 <pinPeripheral+0x28>
    4cde:	46c0      	nop			; (mov r8, r8)
    4ce0:	00010e00 	.word	0x00010e00
    4ce4:	00010ce8 	.word	0x00010ce8
    4ce8:	41004400 	.word	0x41004400

00004cec <_Z3maplllll>:

  return random(diff) + howsmall;
}

extern long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    4cec:	b510      	push	{r4, lr}
    4cee:	001c      	movs	r4, r3
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    4cf0:	1a43      	subs	r3, r0, r1
    4cf2:	9802      	ldr	r0, [sp, #8]
    4cf4:	1a51      	subs	r1, r2, r1
    4cf6:	1b00      	subs	r0, r0, r4
    4cf8:	4358      	muls	r0, r3
    4cfa:	f00b fcf5 	bl	106e8 <__divsi3>
    4cfe:	1900      	adds	r0, r0, r4
}
    4d00:	bd10      	pop	{r4, pc}
    4d02:	46c0      	nop			; (mov r8, r8)

00004d04 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    4d04:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4d06:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
    4d08:	0004      	movs	r4, r0
    4d0a:	b085      	sub	sp, #20
    4d0c:	0008      	movs	r0, r1
	buffer = NULL;
    4d0e:	6023      	str	r3, [r4, #0]
	capacity = 0;
    4d10:	6063      	str	r3, [r4, #4]
	len = 0;
    4d12:	60a3      	str	r3, [r4, #8]
	utoa(value, buf, base);
    4d14:	a901      	add	r1, sp, #4
    4d16:	f00b f823 	bl	fd60 <utoa>
}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) copy(cstr, strlen(cstr));
    4d1a:	a801      	add	r0, sp, #4
    4d1c:	f00b ff10 	bl	10b40 <strlen>
    4d20:	0005      	movs	r5, r0
	if (buffer && capacity >= size) return 1;
    4d22:	6820      	ldr	r0, [r4, #0]
    4d24:	2800      	cmp	r0, #0
    4d26:	d002      	beq.n	4d2e <_ZN6StringC1Ehh+0x2a>
    4d28:	6863      	ldr	r3, [r4, #4]
    4d2a:	429d      	cmp	r5, r3
    4d2c:	d90b      	bls.n	4d46 <_ZN6StringC1Ehh+0x42>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    4d2e:	1c69      	adds	r1, r5, #1
    4d30:	f00b fed4 	bl	10adc <realloc>
	if (newbuffer) {
    4d34:	2800      	cmp	r0, #0
    4d36:	d00d      	beq.n	4d54 <_ZN6StringC1Ehh+0x50>
		if (len == 0) buffer[0] = 0;
    4d38:	68a3      	ldr	r3, [r4, #8]
		buffer = newbuffer;
    4d3a:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    4d3c:	6065      	str	r5, [r4, #4]
		if (len == 0) buffer[0] = 0;
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d101      	bne.n	4d46 <_ZN6StringC1Ehh+0x42>
    4d42:	7003      	strb	r3, [r0, #0]
    4d44:	6820      	ldr	r0, [r4, #0]
	len = length;
    4d46:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    4d48:	a901      	add	r1, sp, #4
    4d4a:	f00b fef1 	bl	10b30 <strcpy>
}
    4d4e:	0020      	movs	r0, r4
    4d50:	b005      	add	sp, #20
    4d52:	bd30      	pop	{r4, r5, pc}
	if (buffer) free(buffer);
    4d54:	6820      	ldr	r0, [r4, #0]
    4d56:	2800      	cmp	r0, #0
    4d58:	d001      	beq.n	4d5e <_ZN6StringC1Ehh+0x5a>
    4d5a:	f00b fded 	bl	10938 <free>
	buffer = NULL;
    4d5e:	2300      	movs	r3, #0
    4d60:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    4d62:	60a3      	str	r3, [r4, #8]
    4d64:	6063      	str	r3, [r4, #4]
    4d66:	e7f2      	b.n	4d4e <_ZN6StringC1Ehh+0x4a>

00004d68 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
    4d68:	b530      	push	{r4, r5, lr}
	buffer = NULL;
    4d6a:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
    4d6c:	0004      	movs	r4, r0
    4d6e:	b08b      	sub	sp, #44	; 0x2c
    4d70:	0008      	movs	r0, r1
	buffer = NULL;
    4d72:	6023      	str	r3, [r4, #0]
	capacity = 0;
    4d74:	6063      	str	r3, [r4, #4]
	len = 0;
    4d76:	60a3      	str	r3, [r4, #8]
	itoa(value, buf, base);
    4d78:	a901      	add	r1, sp, #4
    4d7a:	f00a ff97 	bl	fcac <itoa>
	if (cstr) copy(cstr, strlen(cstr));
    4d7e:	a801      	add	r0, sp, #4
    4d80:	f00b fede 	bl	10b40 <strlen>
    4d84:	0005      	movs	r5, r0
	if (buffer && capacity >= size) return 1;
    4d86:	6820      	ldr	r0, [r4, #0]
    4d88:	2800      	cmp	r0, #0
    4d8a:	d002      	beq.n	4d92 <_ZN6StringC1Eih+0x2a>
    4d8c:	6863      	ldr	r3, [r4, #4]
    4d8e:	429d      	cmp	r5, r3
    4d90:	d90b      	bls.n	4daa <_ZN6StringC1Eih+0x42>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    4d92:	1c69      	adds	r1, r5, #1
    4d94:	f00b fea2 	bl	10adc <realloc>
	if (newbuffer) {
    4d98:	2800      	cmp	r0, #0
    4d9a:	d00d      	beq.n	4db8 <_ZN6StringC1Eih+0x50>
		if (len == 0) buffer[0] = 0;
    4d9c:	68a3      	ldr	r3, [r4, #8]
		buffer = newbuffer;
    4d9e:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    4da0:	6065      	str	r5, [r4, #4]
		if (len == 0) buffer[0] = 0;
    4da2:	2b00      	cmp	r3, #0
    4da4:	d101      	bne.n	4daa <_ZN6StringC1Eih+0x42>
    4da6:	7003      	strb	r3, [r0, #0]
    4da8:	6820      	ldr	r0, [r4, #0]
	len = length;
    4daa:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    4dac:	a901      	add	r1, sp, #4
    4dae:	f00b febf 	bl	10b30 <strcpy>
}
    4db2:	0020      	movs	r0, r4
    4db4:	b00b      	add	sp, #44	; 0x2c
    4db6:	bd30      	pop	{r4, r5, pc}
	if (buffer) free(buffer);
    4db8:	6820      	ldr	r0, [r4, #0]
    4dba:	2800      	cmp	r0, #0
    4dbc:	d001      	beq.n	4dc2 <_ZN6StringC1Eih+0x5a>
    4dbe:	f00b fdbb 	bl	10938 <free>
	buffer = NULL;
    4dc2:	2300      	movs	r3, #0
    4dc4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    4dc6:	60a3      	str	r3, [r4, #8]
    4dc8:	6063      	str	r3, [r4, #4]
    4dca:	e7f2      	b.n	4db2 <_ZN6StringC1Eih+0x4a>

00004dcc <_ZN6StringD1Ev>:
String::~String()
    4dcc:	b510      	push	{r4, lr}
    4dce:	0004      	movs	r4, r0
	free(buffer);
    4dd0:	6800      	ldr	r0, [r0, #0]
    4dd2:	f00b fdb1 	bl	10938 <free>
}
    4dd6:	0020      	movs	r0, r4
    4dd8:	bd10      	pop	{r4, pc}
    4dda:	46c0      	nop			; (mov r8, r8)

00004ddc <_ZNK6String6charAtEj>:
/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
    4ddc:	0003      	movs	r3, r0
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    4dde:	689a      	ldr	r2, [r3, #8]
    4de0:	2000      	movs	r0, #0
    4de2:	4291      	cmp	r1, r2
    4de4:	d203      	bcs.n	4dee <_ZNK6String6charAtEj+0x12>
    4de6:	681b      	ldr	r3, [r3, #0]
    4de8:	2b00      	cmp	r3, #0
    4dea:	d000      	beq.n	4dee <_ZNK6String6charAtEj+0x12>
	return buffer[index];
    4dec:	5c58      	ldrb	r0, [r3, r1]
}
    4dee:	4770      	bx	lr

00004df0 <_ZN15Adafruit_FT6206C1Ev>:
    @brief  Instantiates a new FT6206 class
*/
/**************************************************************************/
// I2C, no address adjustments or pins
Adafruit_FT6206::Adafruit_FT6206() {
  touches = 0;
    4df0:	2300      	movs	r3, #0
    4df2:	7003      	strb	r3, [r0, #0]
}
    4df4:	4770      	bx	lr
    4df6:	46c0      	nop			; (mov r8, r8)

00004df8 <_ZN8TS_PointC1Ev>:
*/

/****************/

TS_Point::TS_Point(void) {
  x = y = 0;
    4df8:	2300      	movs	r3, #0
    4dfa:	8043      	strh	r3, [r0, #2]
    4dfc:	8003      	strh	r3, [r0, #0]
}
    4dfe:	4770      	bx	lr

00004e00 <_ZN15Adafruit_FT62068readDataEv>:
void Adafruit_FT6206::readData(void) {
    4e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  Wire.beginTransmission(FT62XX_ADDR);
    4e02:	4d25      	ldr	r5, [pc, #148]	; (4e98 <_ZN15Adafruit_FT62068readDataEv+0x98>)
void Adafruit_FT6206::readData(void) {
    4e04:	b085      	sub	sp, #20
  Wire.beginTransmission(FT62XX_ADDR);
    4e06:	2138      	movs	r1, #56	; 0x38
void Adafruit_FT6206::readData(void) {
    4e08:	0007      	movs	r7, r0
  Wire.beginTransmission(FT62XX_ADDR);
    4e0a:	0028      	movs	r0, r5
    4e0c:	f009 ff20 	bl	ec50 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)0);  
    4e10:	2100      	movs	r1, #0
    4e12:	0028      	movs	r0, r5
    4e14:	f009 fdfe 	bl	ea14 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    4e18:	0028      	movs	r0, r5
    4e1a:	f009 ff27 	bl	ec6c <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)FT62XX_ADDR, (byte)16);
    4e1e:	2210      	movs	r2, #16
    4e20:	2138      	movs	r1, #56	; 0x38
    4e22:	0028      	movs	r0, r5
    4e24:	f009 febe 	bl	eba4 <_ZN7TwoWire11requestFromEhj>
    4e28:	466c      	mov	r4, sp
    4e2a:	ae04      	add	r6, sp, #16
    i2cdat[i] = Wire.read();
    4e2c:	0028      	movs	r0, r5
    4e2e:	f009 fdc9 	bl	e9c4 <_ZN7TwoWire4readEv>
    4e32:	7020      	strb	r0, [r4, #0]
    4e34:	3401      	adds	r4, #1
  for (uint8_t i=0; i<16; i++)
    4e36:	42b4      	cmp	r4, r6
    4e38:	d1f8      	bne.n	4e2c <_ZN15Adafruit_FT62068readDataEv+0x2c>
  touches = i2cdat[0x02];
    4e3a:	466b      	mov	r3, sp
    4e3c:	789b      	ldrb	r3, [r3, #2]
  if ((touches > 2) || (touches == 0)) {
    4e3e:	1e5a      	subs	r2, r3, #1
    4e40:	2a01      	cmp	r2, #1
    4e42:	d900      	bls.n	4e46 <_ZN15Adafruit_FT62068readDataEv+0x46>
    touches = 0;
    4e44:	2300      	movs	r3, #0
    4e46:	703b      	strb	r3, [r7, #0]
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    4e48:	466b      	mov	r3, sp
    touchX[i] |= i2cdat[0x04 + i*6]; 
    4e4a:	4669      	mov	r1, sp
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    4e4c:	78da      	ldrb	r2, [r3, #3]
    4e4e:	230f      	movs	r3, #15
    touchX[i] |= i2cdat[0x04 + i*6]; 
    4e50:	7909      	ldrb	r1, [r1, #4]
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    4e52:	401a      	ands	r2, r3
    touchX[i] <<= 8;
    4e54:	0212      	lsls	r2, r2, #8
    touchX[i] |= i2cdat[0x04 + i*6]; 
    4e56:	430a      	orrs	r2, r1
    4e58:	807a      	strh	r2, [r7, #2]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    4e5a:	466a      	mov	r2, sp
    4e5c:	0018      	movs	r0, r3
    touchY[i] |= i2cdat[0x06 + i*6];
    4e5e:	4669      	mov	r1, sp
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    4e60:	7952      	ldrb	r2, [r2, #5]
    touchY[i] |= i2cdat[0x06 + i*6];
    4e62:	7989      	ldrb	r1, [r1, #6]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    4e64:	4010      	ands	r0, r2
    touchID[i] = i2cdat[0x05 + i*6] >> 4;
    4e66:	1112      	asrs	r2, r2, #4
    4e68:	817a      	strh	r2, [r7, #10]
    touchY[i] <<= 8;
    4e6a:	0200      	lsls	r0, r0, #8
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    4e6c:	466a      	mov	r2, sp
    touchY[i] |= i2cdat[0x06 + i*6];
    4e6e:	4301      	orrs	r1, r0
    4e70:	80f9      	strh	r1, [r7, #6]
    touchX[i] |= i2cdat[0x04 + i*6]; 
    4e72:	4669      	mov	r1, sp
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    4e74:	7a52      	ldrb	r2, [r2, #9]
    touchX[i] |= i2cdat[0x04 + i*6]; 
    4e76:	7a89      	ldrb	r1, [r1, #10]
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    4e78:	401a      	ands	r2, r3
    touchX[i] <<= 8;
    4e7a:	0212      	lsls	r2, r2, #8
    touchX[i] |= i2cdat[0x04 + i*6]; 
    4e7c:	430a      	orrs	r2, r1
    4e7e:	80ba      	strh	r2, [r7, #4]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    4e80:	466a      	mov	r2, sp
    touchY[i] |= i2cdat[0x06 + i*6];
    4e82:	4669      	mov	r1, sp
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    4e84:	7ad2      	ldrb	r2, [r2, #11]
    touchY[i] |= i2cdat[0x06 + i*6];
    4e86:	7b09      	ldrb	r1, [r1, #12]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    4e88:	4013      	ands	r3, r2
    touchY[i] <<= 8;
    4e8a:	021b      	lsls	r3, r3, #8
    touchY[i] |= i2cdat[0x06 + i*6];
    4e8c:	430b      	orrs	r3, r1
    touchID[i] = i2cdat[0x05 + i*6] >> 4;
    4e8e:	1112      	asrs	r2, r2, #4
    touchY[i] |= i2cdat[0x06 + i*6];
    4e90:	813b      	strh	r3, [r7, #8]
    touchID[i] = i2cdat[0x05 + i*6] >> 4;
    4e92:	81ba      	strh	r2, [r7, #12]
}
    4e94:	b005      	add	sp, #20
    4e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e98:	20000a24 	.word	0x20000a24

00004e9c <_ZN15Adafruit_FT62068getPointEh>:
TS_Point Adafruit_FT6206::getPoint(uint8_t n) {
    4e9c:	b570      	push	{r4, r5, r6, lr}
    4e9e:	000d      	movs	r5, r1
    4ea0:	0004      	movs	r4, r0
  readData();
    4ea2:	0008      	movs	r0, r1
TS_Point Adafruit_FT6206::getPoint(uint8_t n) {
    4ea4:	0016      	movs	r6, r2
  readData();
    4ea6:	f7ff ffab 	bl	4e00 <_ZN15Adafruit_FT62068readDataEv>
  if ((touches == 0) || (n > 1)) {
    4eaa:	782b      	ldrb	r3, [r5, #0]
    4eac:	2b00      	cmp	r3, #0
    4eae:	d001      	beq.n	4eb4 <_ZN15Adafruit_FT62068getPointEh+0x18>
    4eb0:	2e01      	cmp	r6, #1
    4eb2:	dd05      	ble.n	4ec0 <_ZN15Adafruit_FT62068getPointEh+0x24>

TS_Point::TS_Point(int16_t x0, int16_t y0, int16_t z0) {
  x = x0;
    4eb4:	2300      	movs	r3, #0
    4eb6:	8023      	strh	r3, [r4, #0]
  y = y0;
    4eb8:	8063      	strh	r3, [r4, #2]
  z = z0;
    4eba:	80a3      	strh	r3, [r4, #4]
}
    4ebc:	0020      	movs	r0, r4
    4ebe:	bd70      	pop	{r4, r5, r6, pc}
    4ec0:	0076      	lsls	r6, r6, #1
    4ec2:	19ad      	adds	r5, r5, r6
    return TS_Point(touchX[n], touchY[n], 1);
    4ec4:	2302      	movs	r3, #2
    4ec6:	5eea      	ldrsh	r2, [r5, r3]
    4ec8:	2106      	movs	r1, #6
    4eca:	5e6b      	ldrsh	r3, [r5, r1]
  x = x0;
    4ecc:	8022      	strh	r2, [r4, #0]
  y = y0;
    4ece:	8063      	strh	r3, [r4, #2]
  z = z0;
    4ed0:	2301      	movs	r3, #1
    4ed2:	80a3      	strh	r3, [r4, #4]
    4ed4:	e7f2      	b.n	4ebc <_ZN15Adafruit_FT62068getPointEh+0x20>
    4ed6:	46c0      	nop			; (mov r8, r8)

00004ed8 <_ZN15Adafruit_FT62067touchedEv>:
uint8_t Adafruit_FT6206::touched(void) {
    4ed8:	b510      	push	{r4, lr}
  Wire.beginTransmission(FT62XX_ADDR);
    4eda:	4c0d      	ldr	r4, [pc, #52]	; (4f10 <_ZN15Adafruit_FT62067touchedEv+0x38>)
    4edc:	2138      	movs	r1, #56	; 0x38
    4ede:	0020      	movs	r0, r4
    4ee0:	f009 feb6 	bl	ec50 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    4ee4:	2102      	movs	r1, #2
    4ee6:	0020      	movs	r0, r4
    4ee8:	f009 fd94 	bl	ea14 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    4eec:	0020      	movs	r0, r4
    4eee:	f009 febd 	bl	ec6c <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)FT62XX_ADDR, (byte)1);
    4ef2:	2201      	movs	r2, #1
    4ef4:	2138      	movs	r1, #56	; 0x38
    4ef6:	0020      	movs	r0, r4
    4ef8:	f009 fe54 	bl	eba4 <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
    4efc:	0020      	movs	r0, r4
    4efe:	f009 fd61 	bl	e9c4 <_ZN7TwoWire4readEv>
  if (n > 2) {
    4f02:	b2c3      	uxtb	r3, r0
    4f04:	2b02      	cmp	r3, #2
    4f06:	dd00      	ble.n	4f0a <_ZN15Adafruit_FT62067touchedEv+0x32>
    4f08:	2000      	movs	r0, #0
  return n;
    4f0a:	b2c0      	uxtb	r0, r0
}
    4f0c:	bd10      	pop	{r4, pc}
    4f0e:	46c0      	nop			; (mov r8, r8)
    4f10:	20000a24 	.word	0x20000a24

00004f14 <_ZN15Adafruit_FT62065beginEh>:
boolean Adafruit_FT6206::begin(uint8_t thresh) {
    4f14:	b570      	push	{r4, r5, r6, lr}
    4f16:	000d      	movs	r5, r1
  Wire.begin();
    4f18:	4c23      	ldr	r4, [pc, #140]	; (4fa8 <_ZN15Adafruit_FT62065beginEh+0x94>)
    4f1a:	0020      	movs	r0, r4
    4f1c:	f009 fe20 	bl	eb60 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(FT62XX_ADDR);
    4f20:	2138      	movs	r1, #56	; 0x38
    4f22:	0020      	movs	r0, r4
    4f24:	f009 fe94 	bl	ec50 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    4f28:	2180      	movs	r1, #128	; 0x80
    4f2a:	0020      	movs	r0, r4
    4f2c:	f009 fd72 	bl	ea14 <_ZN7TwoWire5writeEh>
  Wire.write((byte)val);
    4f30:	0029      	movs	r1, r5
    4f32:	0020      	movs	r0, r4
    4f34:	f009 fd6e 	bl	ea14 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    4f38:	0020      	movs	r0, r4
    4f3a:	f009 fe97 	bl	ec6c <_ZN7TwoWire15endTransmissionEv>
  Wire.beginTransmission(FT62XX_ADDR);
    4f3e:	2138      	movs	r1, #56	; 0x38
    4f40:	0020      	movs	r0, r4
    4f42:	f009 fe85 	bl	ec50 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    4f46:	21a8      	movs	r1, #168	; 0xa8
    4f48:	0020      	movs	r0, r4
    4f4a:	f009 fd63 	bl	ea14 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    4f4e:	0020      	movs	r0, r4
    4f50:	f009 fe8c 	bl	ec6c <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)FT62XX_ADDR, (byte)1);
    4f54:	2201      	movs	r2, #1
    4f56:	2138      	movs	r1, #56	; 0x38
    4f58:	0020      	movs	r0, r4
    4f5a:	f009 fe23 	bl	eba4 <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
    4f5e:	0020      	movs	r0, r4
    4f60:	f009 fd30 	bl	e9c4 <_ZN7TwoWire4readEv>
  if (readRegister8(FT62XX_REG_VENDID) != FT62XX_VENDID) {
    4f64:	b2c0      	uxtb	r0, r0
    4f66:	2811      	cmp	r0, #17
    4f68:	d001      	beq.n	4f6e <_ZN15Adafruit_FT62065beginEh+0x5a>
    return false;
    4f6a:	2000      	movs	r0, #0
}
    4f6c:	bd70      	pop	{r4, r5, r6, pc}
  Wire.beginTransmission(FT62XX_ADDR);
    4f6e:	2138      	movs	r1, #56	; 0x38
    4f70:	0020      	movs	r0, r4
    4f72:	f009 fe6d 	bl	ec50 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    4f76:	21a3      	movs	r1, #163	; 0xa3
    4f78:	0020      	movs	r0, r4
    4f7a:	f009 fd4b 	bl	ea14 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    4f7e:	0020      	movs	r0, r4
    4f80:	f009 fe74 	bl	ec6c <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)FT62XX_ADDR, (byte)1);
    4f84:	2201      	movs	r2, #1
    4f86:	2138      	movs	r1, #56	; 0x38
    4f88:	0020      	movs	r0, r4
    4f8a:	f009 fe0b 	bl	eba4 <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
    4f8e:	0020      	movs	r0, r4
    4f90:	f009 fd18 	bl	e9c4 <_ZN7TwoWire4readEv>
    4f94:	b2c0      	uxtb	r0, r0
  if ((id != FT6206_CHIPID) && (id != FT6236_CHIPID) && (id != FT6236U_CHIPID)) {
    4f96:	2806      	cmp	r0, #6
    4f98:	d003      	beq.n	4fa2 <_ZN15Adafruit_FT62065beginEh+0x8e>
    4f9a:	2836      	cmp	r0, #54	; 0x36
    4f9c:	d001      	beq.n	4fa2 <_ZN15Adafruit_FT62065beginEh+0x8e>
    4f9e:	2864      	cmp	r0, #100	; 0x64
    4fa0:	d1e3      	bne.n	4f6a <_ZN15Adafruit_FT62065beginEh+0x56>
  return true;
    4fa2:	2001      	movs	r0, #1
    4fa4:	e7e2      	b.n	4f6c <_ZN15Adafruit_FT62065beginEh+0x58>
    4fa6:	46c0      	nop			; (mov r8, r8)
    4fa8:	20000a24 	.word	0x20000a24

00004fac <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    4fac:	2000      	movs	r0, #0
    4fae:	4770      	bx	lr

00004fb0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    4fb0:	4770      	bx	lr
    4fb2:	46c0      	nop			; (mov r8, r8)

00004fb4 <_ZN16Adafruit_ILI93418endWriteEv>:
    SPI_BEGIN_TRANSACTION();
    SPI_CS_LOW();
}

void Adafruit_ILI9341::endWrite(void){
    SPI_CS_HIGH();
    4fb4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    4fb6:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    4fb8:	6813      	ldr	r3, [r2, #0]
void Adafruit_ILI9341::endWrite(void){
    4fba:	b510      	push	{r4, lr}
    SPI_CS_HIGH();
    4fbc:	430b      	orrs	r3, r1
    4fbe:	6013      	str	r3, [r2, #0]
    SPI_END_TRANSACTION();
    4fc0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	db00      	blt.n	4fc8 <_ZN16Adafruit_ILI93418endWriteEv+0x14>
}
    4fc6:	bd10      	pop	{r4, pc}
    SPI_END_TRANSACTION();
    4fc8:	4801      	ldr	r0, [pc, #4]	; (4fd0 <_ZN16Adafruit_ILI93418endWriteEv+0x1c>)
    4fca:	f009 fcbb 	bl	e944 <_ZN8SPIClass14endTransactionEv>
}
    4fce:	e7fa      	b.n	4fc6 <_ZN16Adafruit_ILI93418endWriteEv+0x12>
    4fd0:	20000a0c 	.word	0x20000a0c

00004fd4 <_ZN11SPISettingsC1Em8BitOrderh>:
  // Conservatively, the divider is set for a 12 MHz maximum SPI clock.
  #define SPI_MIN_CLOCK_DIVIDER (uint8_t)(1 + ((F_CPU - 1) / 12000000))

class SPISettings {
  public:
  SPISettings(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    4fd4:	b510      	push	{r4, lr}
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    4fd6:	4c0e      	ldr	r4, [pc, #56]	; (5010 <_ZN11SPISettingsC1Em8BitOrderh+0x3c>)
    4fd8:	42a1      	cmp	r1, r4
    4fda:	d900      	bls.n	4fde <_ZN11SPISettingsC1Em8BitOrderh+0xa>
    4fdc:	0021      	movs	r1, r4

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    4fde:	3a01      	subs	r2, #1
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    4fe0:	6001      	str	r1, [r0, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    4fe2:	1e51      	subs	r1, r2, #1
    4fe4:	418a      	sbcs	r2, r1
    4fe6:	7142      	strb	r2, [r0, #5]

    switch (dataMode)
    4fe8:	2b01      	cmp	r3, #1
    4fea:	d00e      	beq.n	500a <_ZN11SPISettingsC1Em8BitOrderh+0x36>
    4fec:	2b00      	cmp	r3, #0
    4fee:	d009      	beq.n	5004 <_ZN11SPISettingsC1Em8BitOrderh+0x30>
    4ff0:	2b02      	cmp	r3, #2
    4ff2:	d004      	beq.n	4ffe <_ZN11SPISettingsC1Em8BitOrderh+0x2a>
    4ff4:	2b03      	cmp	r3, #3
    4ff6:	d102      	bne.n	4ffe <_ZN11SPISettingsC1Em8BitOrderh+0x2a>
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
      case SPI_MODE1:
        this->dataMode = SERCOM_SPI_MODE_1; break;
      case SPI_MODE2:
        this->dataMode = SERCOM_SPI_MODE_2; break;
    4ff8:	2302      	movs	r3, #2
    4ffa:	7103      	strb	r3, [r0, #4]
    4ffc:	e001      	b.n	5002 <_ZN11SPISettingsC1Em8BitOrderh+0x2e>
      case SPI_MODE3:
        this->dataMode = SERCOM_SPI_MODE_3; break;
      default:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    4ffe:	2300      	movs	r3, #0
    5000:	7103      	strb	r3, [r0, #4]
  }
    5002:	bd10      	pop	{r4, pc}
        this->dataMode = SERCOM_SPI_MODE_1; break;
    5004:	2301      	movs	r3, #1
    5006:	7103      	strb	r3, [r0, #4]
    5008:	e7fb      	b.n	5002 <_ZN11SPISettingsC1Em8BitOrderh+0x2e>
        this->dataMode = SERCOM_SPI_MODE_3; break;
    500a:	2303      	movs	r3, #3
    500c:	7103      	strb	r3, [r0, #4]
    500e:	e7f8      	b.n	5002 <_ZN11SPISettingsC1Em8BitOrderh+0x2e>
    5010:	00b71b00 	.word	0x00b71b00

00005014 <_ZN16Adafruit_ILI934110startWriteEv>:
void Adafruit_ILI9341::startWrite(void){
    5014:	b510      	push	{r4, lr}
    SPI_BEGIN_TRANSACTION();
    5016:	6b03      	ldr	r3, [r0, #48]	; 0x30
void Adafruit_ILI9341::startWrite(void){
    5018:	b082      	sub	sp, #8
    501a:	0004      	movs	r4, r0
    SPI_BEGIN_TRANSACTION();
    501c:	2b00      	cmp	r3, #0
    501e:	db06      	blt.n	502e <_ZN16Adafruit_ILI934110startWriteEv+0x1a>
    SPI_CS_LOW();
    5020:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5022:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    5024:	6813      	ldr	r3, [r2, #0]
    5026:	438b      	bics	r3, r1
    5028:	6013      	str	r3, [r2, #0]
}
    502a:	b002      	add	sp, #8
    502c:	bd10      	pop	{r4, pc}
    SPI_BEGIN_TRANSACTION();
    502e:	6a01      	ldr	r1, [r0, #32]
    5030:	2302      	movs	r3, #2
    5032:	2201      	movs	r2, #1
    5034:	4668      	mov	r0, sp
    5036:	f7ff ffcd 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    503a:	9900      	ldr	r1, [sp, #0]
    503c:	9a01      	ldr	r2, [sp, #4]
    503e:	4802      	ldr	r0, [pc, #8]	; (5048 <_ZN16Adafruit_ILI934110startWriteEv+0x34>)
    5040:	f009 fc50 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5044:	e7ec      	b.n	5020 <_ZN16Adafruit_ILI934110startWriteEv+0xc>
    5046:	46c0      	nop			; (mov r8, r8)
    5048:	20000a0c 	.word	0x20000a0c

0000504c <_ZN16Adafruit_ILI934113invertDisplayEb>:
void Adafruit_ILI9341::invertDisplay(boolean i) {
    504c:	b570      	push	{r4, r5, r6, lr}
    startWrite();
    504e:	6803      	ldr	r3, [r0, #0]
    5050:	4a5a      	ldr	r2, [pc, #360]	; (51bc <_ZN16Adafruit_ILI934113invertDisplayEb+0x170>)
    5052:	695b      	ldr	r3, [r3, #20]
void Adafruit_ILI9341::invertDisplay(boolean i) {
    5054:	b082      	sub	sp, #8
    5056:	0004      	movs	r4, r0
    5058:	000d      	movs	r5, r1
    505a:	4293      	cmp	r3, r2
    505c:	d000      	beq.n	5060 <_ZN16Adafruit_ILI934113invertDisplayEb+0x14>
    505e:	e09a      	b.n	5196 <_ZN16Adafruit_ILI934113invertDisplayEb+0x14a>
    SPI_BEGIN_TRANSACTION();
    5060:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5062:	2b00      	cmp	r3, #0
    5064:	da00      	bge.n	5068 <_ZN16Adafruit_ILI934113invertDisplayEb+0x1c>
    5066:	e09c      	b.n	51a2 <_ZN16Adafruit_ILI934113invertDisplayEb+0x156>
    SPI_CS_LOW();
    5068:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    506a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    506c:	6813      	ldr	r3, [r2, #0]
    506e:	438b      	bics	r3, r1
    5070:	6013      	str	r3, [r2, #0]
    writeCommand(i ? ILI9341_INVON : ILI9341_INVOFF);
    5072:	1e69      	subs	r1, r5, #1
    5074:	418d      	sbcs	r5, r1
    5076:	0029      	movs	r1, r5

void Adafruit_ILI9341::writeCommand(uint8_t cmd){
    SPI_DC_LOW();
    5078:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    507a:	6e22      	ldr	r2, [r4, #96]	; 0x60
    507c:	6803      	ldr	r3, [r0, #0]
    writeCommand(i ? ILI9341_INVON : ILI9341_INVOFF);
    507e:	3120      	adds	r1, #32
    SPI_DC_LOW();
    5080:	4393      	bics	r3, r2
    5082:	6003      	str	r3, [r0, #0]
    if(_sclk < 0){
    5084:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5086:	2b00      	cmp	r3, #0
    5088:	da18      	bge.n	50bc <_ZN16Adafruit_ILI934113invertDisplayEb+0x70>
        HSPI_WRITE(b);
    508a:	484d      	ldr	r0, [pc, #308]	; (51c0 <_ZN16Adafruit_ILI934113invertDisplayEb+0x174>)
    508c:	f009 fc6c 	bl	e968 <_ZN8SPIClass8transferEh>
    5090:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    spiWrite(cmd);
    SPI_DC_HIGH();
    5092:	6e22      	ldr	r2, [r4, #96]	; 0x60
    5094:	6803      	ldr	r3, [r0, #0]
    5096:	4313      	orrs	r3, r2
    5098:	6003      	str	r3, [r0, #0]
    endWrite();
    509a:	6823      	ldr	r3, [r4, #0]
    509c:	4a49      	ldr	r2, [pc, #292]	; (51c4 <_ZN16Adafruit_ILI934113invertDisplayEb+0x178>)
    509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50a0:	4293      	cmp	r3, r2
    50a2:	d000      	beq.n	50a6 <_ZN16Adafruit_ILI934113invertDisplayEb+0x5a>
    50a4:	e074      	b.n	5190 <_ZN16Adafruit_ILI934113invertDisplayEb+0x144>
    SPI_CS_HIGH();
    50a6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    50a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    50aa:	6813      	ldr	r3, [r2, #0]
    50ac:	430b      	orrs	r3, r1
    50ae:	6013      	str	r3, [r2, #0]
    SPI_END_TRANSACTION();
    50b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    50b2:	2b00      	cmp	r3, #0
    50b4:	da00      	bge.n	50b8 <_ZN16Adafruit_ILI934113invertDisplayEb+0x6c>
    50b6:	e070      	b.n	519a <_ZN16Adafruit_ILI934113invertDisplayEb+0x14e>
}
    50b8:	b002      	add	sp, #8
    50ba:	bd70      	pop	{r4, r5, r6, pc}
    50bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    50be:	6d26      	ldr	r6, [r4, #80]	; 0x50
    50c0:	6815      	ldr	r5, [r2, #0]
    50c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    50c4:	43b5      	bics	r5, r6
    50c6:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    50c8:	681d      	ldr	r5, [r3, #0]
    50ca:	6da6      	ldr	r6, [r4, #88]	; 0x58
    50cc:	43b5      	bics	r5, r6
    50ce:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    50d0:	681d      	ldr	r5, [r3, #0]
    50d2:	6da6      	ldr	r6, [r4, #88]	; 0x58
    50d4:	4335      	orrs	r5, r6
    50d6:	601d      	str	r5, [r3, #0]
            SSPI_MOSI_LOW();
    50d8:	6815      	ldr	r5, [r2, #0]
    50da:	6d26      	ldr	r6, [r4, #80]	; 0x50
    50dc:	43b5      	bics	r5, r6
    50de:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    50e0:	681d      	ldr	r5, [r3, #0]
    50e2:	6da6      	ldr	r6, [r4, #88]	; 0x58
    50e4:	43b5      	bics	r5, r6
    50e6:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    50e8:	681d      	ldr	r5, [r3, #0]
    50ea:	6da6      	ldr	r6, [r4, #88]	; 0x58
    50ec:	4335      	orrs	r5, r6
    50ee:	601d      	str	r5, [r3, #0]
            SSPI_MOSI_HIGH();
    50f0:	6815      	ldr	r5, [r2, #0]
    50f2:	6d26      	ldr	r6, [r4, #80]	; 0x50
    50f4:	4335      	orrs	r5, r6
    50f6:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    50f8:	681d      	ldr	r5, [r3, #0]
    50fa:	6da6      	ldr	r6, [r4, #88]	; 0x58
    50fc:	43b5      	bics	r5, r6
    50fe:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    5100:	681d      	ldr	r5, [r3, #0]
    5102:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5104:	4335      	orrs	r5, r6
    5106:	601d      	str	r5, [r3, #0]
            SSPI_MOSI_LOW();
    5108:	6d26      	ldr	r6, [r4, #80]	; 0x50
    510a:	6815      	ldr	r5, [r2, #0]
    510c:	43b5      	bics	r5, r6
    510e:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    5110:	681d      	ldr	r5, [r3, #0]
    5112:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5114:	43b5      	bics	r5, r6
    5116:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    5118:	681d      	ldr	r5, [r3, #0]
    511a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    511c:	4335      	orrs	r5, r6
    511e:	601d      	str	r5, [r3, #0]
            SSPI_MOSI_LOW();
    5120:	6815      	ldr	r5, [r2, #0]
    5122:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5124:	43b5      	bics	r5, r6
    5126:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    5128:	681d      	ldr	r5, [r3, #0]
    512a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    512c:	43b5      	bics	r5, r6
    512e:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    5130:	681d      	ldr	r5, [r3, #0]
    5132:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5134:	4335      	orrs	r5, r6
    5136:	601d      	str	r5, [r3, #0]
            SSPI_MOSI_LOW();
    5138:	6815      	ldr	r5, [r2, #0]
    513a:	6d26      	ldr	r6, [r4, #80]	; 0x50
    513c:	43b5      	bics	r5, r6
    513e:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    5140:	681d      	ldr	r5, [r3, #0]
    5142:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5144:	43b5      	bics	r5, r6
    5146:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    5148:	681d      	ldr	r5, [r3, #0]
    514a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    514c:	4335      	orrs	r5, r6
    514e:	601d      	str	r5, [r3, #0]
            SSPI_MOSI_LOW();
    5150:	6815      	ldr	r5, [r2, #0]
    5152:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5154:	43b5      	bics	r5, r6
    5156:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    5158:	681d      	ldr	r5, [r3, #0]
    515a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    515c:	43b5      	bics	r5, r6
    515e:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    5160:	681d      	ldr	r5, [r3, #0]
    5162:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5164:	4335      	orrs	r5, r6
    5166:	601d      	str	r5, [r3, #0]
        if((b) & bit){
    5168:	07c9      	lsls	r1, r1, #31
    516a:	d40c      	bmi.n	5186 <_ZN16Adafruit_ILI934113invertDisplayEb+0x13a>
            SSPI_MOSI_LOW();
    516c:	6811      	ldr	r1, [r2, #0]
    516e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5170:	43a9      	bics	r1, r5
    5172:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5174:	681a      	ldr	r2, [r3, #0]
    5176:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5178:	438a      	bics	r2, r1
    517a:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    517c:	681a      	ldr	r2, [r3, #0]
    517e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5180:	430a      	orrs	r2, r1
    5182:	601a      	str	r2, [r3, #0]
    5184:	e785      	b.n	5092 <_ZN16Adafruit_ILI934113invertDisplayEb+0x46>
            SSPI_MOSI_HIGH();
    5186:	6811      	ldr	r1, [r2, #0]
    5188:	6d25      	ldr	r5, [r4, #80]	; 0x50
    518a:	4329      	orrs	r1, r5
    518c:	6011      	str	r1, [r2, #0]
    518e:	e7f1      	b.n	5174 <_ZN16Adafruit_ILI934113invertDisplayEb+0x128>
    endWrite();
    5190:	0020      	movs	r0, r4
    5192:	4798      	blx	r3
}
    5194:	e790      	b.n	50b8 <_ZN16Adafruit_ILI934113invertDisplayEb+0x6c>
    startWrite();
    5196:	4798      	blx	r3
    5198:	e76b      	b.n	5072 <_ZN16Adafruit_ILI934113invertDisplayEb+0x26>
    SPI_END_TRANSACTION();
    519a:	4809      	ldr	r0, [pc, #36]	; (51c0 <_ZN16Adafruit_ILI934113invertDisplayEb+0x174>)
    519c:	f009 fbd2 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    51a0:	e78a      	b.n	50b8 <_ZN16Adafruit_ILI934113invertDisplayEb+0x6c>
    SPI_BEGIN_TRANSACTION();
    51a2:	6a01      	ldr	r1, [r0, #32]
    51a4:	2302      	movs	r3, #2
    51a6:	2201      	movs	r2, #1
    51a8:	4668      	mov	r0, sp
    51aa:	f7ff ff13 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    51ae:	9900      	ldr	r1, [sp, #0]
    51b0:	9a01      	ldr	r2, [sp, #4]
    51b2:	4803      	ldr	r0, [pc, #12]	; (51c0 <_ZN16Adafruit_ILI934113invertDisplayEb+0x174>)
    51b4:	f009 fb96 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    51b8:	e756      	b.n	5068 <_ZN16Adafruit_ILI934113invertDisplayEb+0x1c>
    51ba:	46c0      	nop			; (mov r8, r8)
    51bc:	00005015 	.word	0x00005015
    51c0:	20000a0c 	.word	0x20000a0c
    51c4:	00004fb5 	.word	0x00004fb5

000051c8 <_ZN16Adafruit_ILI934113drawFastHLineEssst>:
    writeFastVLine(x, y, h, color);
    endWrite();
}

void Adafruit_ILI9341::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    51c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51ca:	4647      	mov	r7, r8
    51cc:	46ce      	mov	lr, r9
    51ce:	b580      	push	{r7, lr}
    51d0:	b085      	sub	sp, #20
    51d2:	001f      	movs	r7, r3
    51d4:	ab0c      	add	r3, sp, #48	; 0x30
    51d6:	881b      	ldrh	r3, [r3, #0]
    51d8:	000d      	movs	r5, r1
    51da:	4698      	mov	r8, r3
    startWrite();
    51dc:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
    51de:	0016      	movs	r6, r2
    51e0:	492a      	ldr	r1, [pc, #168]	; (528c <_ZN16Adafruit_ILI934113drawFastHLineEssst+0xc4>)
    startWrite();
    51e2:	695a      	ldr	r2, [r3, #20]
        int16_t w, uint16_t color) {
    51e4:	0004      	movs	r4, r0
    51e6:	428a      	cmp	r2, r1
    51e8:	d129      	bne.n	523e <_ZN16Adafruit_ILI934113drawFastHLineEssst+0x76>
    SPI_BEGIN_TRANSACTION();
    51ea:	6b02      	ldr	r2, [r0, #48]	; 0x30
    51ec:	2a00      	cmp	r2, #0
    51ee:	db40      	blt.n	5272 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0xaa>
    SPI_CS_LOW();
    51f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    51f2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    51f4:	680a      	ldr	r2, [r1, #0]
    51f6:	4382      	bics	r2, r0
    51f8:	600a      	str	r2, [r1, #0]
    writeFastHLine(x, y, w, color);
    51fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    51fc:	4691      	mov	r9, r2
    51fe:	4a24      	ldr	r2, [pc, #144]	; (5290 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0xc8>)
    5200:	4591      	cmp	r9, r2
    5202:	d123      	bne.n	524c <_ZN16Adafruit_ILI934113drawFastHLineEssst+0x84>
    writeFillRect(x, y, w, 1, color);
    5204:	4642      	mov	r2, r8
    5206:	9201      	str	r2, [sp, #4]
    5208:	2201      	movs	r2, #1
    520a:	9200      	str	r2, [sp, #0]
    520c:	69db      	ldr	r3, [r3, #28]
    520e:	0032      	movs	r2, r6
    5210:	4698      	mov	r8, r3
    5212:	0029      	movs	r1, r5
    5214:	003b      	movs	r3, r7
    5216:	0020      	movs	r0, r4
    5218:	47c0      	blx	r8
    endWrite();
    521a:	6823      	ldr	r3, [r4, #0]
    521c:	4a1d      	ldr	r2, [pc, #116]	; (5294 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0xcc>)
    521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5220:	4293      	cmp	r3, r2
    5222:	d11f      	bne.n	5264 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0x9c>
    SPI_CS_HIGH();
    5224:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5226:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    5228:	6813      	ldr	r3, [r2, #0]
    522a:	430b      	orrs	r3, r1
    522c:	6013      	str	r3, [r2, #0]
    SPI_END_TRANSACTION();
    522e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5230:	2b00      	cmp	r3, #0
    5232:	db1a      	blt.n	526a <_ZN16Adafruit_ILI934113drawFastHLineEssst+0xa2>
}
    5234:	b005      	add	sp, #20
    5236:	bc0c      	pop	{r2, r3}
    5238:	4690      	mov	r8, r2
    523a:	4699      	mov	r9, r3
    523c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    startWrite();
    523e:	4790      	blx	r2
    5240:	6823      	ldr	r3, [r4, #0]
    writeFastHLine(x, y, w, color);
    5242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5244:	4691      	mov	r9, r2
    5246:	4a12      	ldr	r2, [pc, #72]	; (5290 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0xc8>)
    5248:	4591      	cmp	r9, r2
    524a:	d0db      	beq.n	5204 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0x3c>
    524c:	4643      	mov	r3, r8
    524e:	0032      	movs	r2, r6
    5250:	9300      	str	r3, [sp, #0]
    5252:	0029      	movs	r1, r5
    5254:	003b      	movs	r3, r7
    5256:	0020      	movs	r0, r4
    5258:	47c8      	blx	r9
    endWrite();
    525a:	6823      	ldr	r3, [r4, #0]
    525c:	4a0d      	ldr	r2, [pc, #52]	; (5294 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0xcc>)
    525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5260:	4293      	cmp	r3, r2
    5262:	d0df      	beq.n	5224 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0x5c>
    5264:	0020      	movs	r0, r4
    5266:	4798      	blx	r3
}
    5268:	e7e4      	b.n	5234 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0x6c>
    SPI_END_TRANSACTION();
    526a:	480b      	ldr	r0, [pc, #44]	; (5298 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0xd0>)
    526c:	f009 fb6a 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    5270:	e7e0      	b.n	5234 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0x6c>
    SPI_BEGIN_TRANSACTION();
    5272:	2302      	movs	r3, #2
    5274:	6a01      	ldr	r1, [r0, #32]
    5276:	2201      	movs	r2, #1
    5278:	a802      	add	r0, sp, #8
    527a:	f7ff feab 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    527e:	9902      	ldr	r1, [sp, #8]
    5280:	9a03      	ldr	r2, [sp, #12]
    5282:	4805      	ldr	r0, [pc, #20]	; (5298 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0xd0>)
    5284:	f009 fb2e 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5288:	6823      	ldr	r3, [r4, #0]
    528a:	e7b1      	b.n	51f0 <_ZN16Adafruit_ILI934113drawFastHLineEssst+0x28>
    528c:	00005015 	.word	0x00005015
    5290:	0000bb65 	.word	0x0000bb65
    5294:	00004fb5 	.word	0x00004fb5
    5298:	20000a0c 	.word	0x20000a0c

0000529c <_ZN16Adafruit_ILI934113drawFastVLineEssst>:
        int16_t h, uint16_t color) {
    529c:	b5f0      	push	{r4, r5, r6, r7, lr}
    529e:	4647      	mov	r7, r8
    52a0:	46ce      	mov	lr, r9
    52a2:	b580      	push	{r7, lr}
    52a4:	b085      	sub	sp, #20
    52a6:	001f      	movs	r7, r3
    52a8:	ab0c      	add	r3, sp, #48	; 0x30
    52aa:	881b      	ldrh	r3, [r3, #0]
    52ac:	000d      	movs	r5, r1
    52ae:	4698      	mov	r8, r3
    startWrite();
    52b0:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
    52b2:	0016      	movs	r6, r2
    52b4:	4929      	ldr	r1, [pc, #164]	; (535c <_ZN16Adafruit_ILI934113drawFastVLineEssst+0xc0>)
    startWrite();
    52b6:	695a      	ldr	r2, [r3, #20]
        int16_t h, uint16_t color) {
    52b8:	0004      	movs	r4, r0
    52ba:	428a      	cmp	r2, r1
    52bc:	d127      	bne.n	530e <_ZN16Adafruit_ILI934113drawFastVLineEssst+0x72>
    SPI_BEGIN_TRANSACTION();
    52be:	6b02      	ldr	r2, [r0, #48]	; 0x30
    52c0:	2a00      	cmp	r2, #0
    52c2:	db3e      	blt.n	5342 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0xa6>
    SPI_CS_LOW();
    52c4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    52c6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    52c8:	680a      	ldr	r2, [r1, #0]
    52ca:	4382      	bics	r2, r0
    52cc:	600a      	str	r2, [r1, #0]
    writeFastVLine(x, y, h, color);
    52ce:	6a1a      	ldr	r2, [r3, #32]
    52d0:	4691      	mov	r9, r2
    52d2:	4a23      	ldr	r2, [pc, #140]	; (5360 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0xc4>)
    52d4:	4591      	cmp	r9, r2
    52d6:	d121      	bne.n	531c <_ZN16Adafruit_ILI934113drawFastVLineEssst+0x80>
    writeFillRect(x, y, 1, h, color);
    52d8:	4642      	mov	r2, r8
    52da:	9700      	str	r7, [sp, #0]
    52dc:	9201      	str	r2, [sp, #4]
    52de:	69df      	ldr	r7, [r3, #28]
    52e0:	0032      	movs	r2, r6
    52e2:	2301      	movs	r3, #1
    52e4:	0029      	movs	r1, r5
    52e6:	0020      	movs	r0, r4
    52e8:	47b8      	blx	r7
    endWrite();
    52ea:	6823      	ldr	r3, [r4, #0]
    52ec:	4a1d      	ldr	r2, [pc, #116]	; (5364 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0xc8>)
    52ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52f0:	4293      	cmp	r3, r2
    52f2:	d11f      	bne.n	5334 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0x98>
    SPI_CS_HIGH();
    52f4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    52f6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    52f8:	6813      	ldr	r3, [r2, #0]
    52fa:	430b      	orrs	r3, r1
    52fc:	6013      	str	r3, [r2, #0]
    SPI_END_TRANSACTION();
    52fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5300:	2b00      	cmp	r3, #0
    5302:	db1a      	blt.n	533a <_ZN16Adafruit_ILI934113drawFastVLineEssst+0x9e>
}
    5304:	b005      	add	sp, #20
    5306:	bc0c      	pop	{r2, r3}
    5308:	4690      	mov	r8, r2
    530a:	4699      	mov	r9, r3
    530c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    startWrite();
    530e:	4790      	blx	r2
    5310:	6823      	ldr	r3, [r4, #0]
    writeFastVLine(x, y, h, color);
    5312:	6a1a      	ldr	r2, [r3, #32]
    5314:	4691      	mov	r9, r2
    5316:	4a12      	ldr	r2, [pc, #72]	; (5360 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0xc4>)
    5318:	4591      	cmp	r9, r2
    531a:	d0dd      	beq.n	52d8 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0x3c>
    531c:	4643      	mov	r3, r8
    531e:	0032      	movs	r2, r6
    5320:	9300      	str	r3, [sp, #0]
    5322:	0029      	movs	r1, r5
    5324:	003b      	movs	r3, r7
    5326:	0020      	movs	r0, r4
    5328:	47c8      	blx	r9
    endWrite();
    532a:	6823      	ldr	r3, [r4, #0]
    532c:	4a0d      	ldr	r2, [pc, #52]	; (5364 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0xc8>)
    532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5330:	4293      	cmp	r3, r2
    5332:	d0df      	beq.n	52f4 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0x58>
    5334:	0020      	movs	r0, r4
    5336:	4798      	blx	r3
}
    5338:	e7e4      	b.n	5304 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0x68>
    SPI_END_TRANSACTION();
    533a:	480b      	ldr	r0, [pc, #44]	; (5368 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0xcc>)
    533c:	f009 fb02 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    5340:	e7e0      	b.n	5304 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0x68>
    SPI_BEGIN_TRANSACTION();
    5342:	2302      	movs	r3, #2
    5344:	6a01      	ldr	r1, [r0, #32]
    5346:	2201      	movs	r2, #1
    5348:	a802      	add	r0, sp, #8
    534a:	f7ff fe43 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    534e:	9902      	ldr	r1, [sp, #8]
    5350:	9a03      	ldr	r2, [sp, #12]
    5352:	4805      	ldr	r0, [pc, #20]	; (5368 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0xcc>)
    5354:	f009 fac6 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5358:	6823      	ldr	r3, [r4, #0]
    535a:	e7b3      	b.n	52c4 <_ZN16Adafruit_ILI934113drawFastVLineEssst+0x28>
    535c:	00005015 	.word	0x00005015
    5360:	0000bf71 	.word	0x0000bf71
    5364:	00004fb5 	.word	0x00004fb5
    5368:	20000a0c 	.word	0x20000a0c

0000536c <_ZN16Adafruit_ILI93418fillRectEsssst>:

void Adafruit_ILI9341::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    536c:	b5f0      	push	{r4, r5, r6, r7, lr}
    536e:	4647      	mov	r7, r8
    5370:	46ce      	mov	lr, r9
    5372:	b580      	push	{r7, lr}
    5374:	b085      	sub	sp, #20
    5376:	001f      	movs	r7, r3
    5378:	ab0c      	add	r3, sp, #48	; 0x30
    537a:	0016      	movs	r6, r2
    537c:	2200      	movs	r2, #0
    537e:	5e9b      	ldrsh	r3, [r3, r2]
    5380:	000d      	movs	r5, r1
    5382:	4698      	mov	r8, r3
    5384:	ab0d      	add	r3, sp, #52	; 0x34
    5386:	881b      	ldrh	r3, [r3, #0]
    5388:	4921      	ldr	r1, [pc, #132]	; (5410 <_ZN16Adafruit_ILI93418fillRectEsssst+0xa4>)
    538a:	4699      	mov	r9, r3
    startWrite();
    538c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
    538e:	0004      	movs	r4, r0
    startWrite();
    5390:	695a      	ldr	r2, [r3, #20]
    5392:	428a      	cmp	r2, r1
    5394:	d124      	bne.n	53e0 <_ZN16Adafruit_ILI93418fillRectEsssst+0x74>
    SPI_BEGIN_TRANSACTION();
    5396:	6b02      	ldr	r2, [r0, #48]	; 0x30
    5398:	2a00      	cmp	r2, #0
    539a:	db2b      	blt.n	53f4 <_ZN16Adafruit_ILI93418fillRectEsssst+0x88>
    SPI_CS_LOW();
    539c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    539e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    53a0:	680a      	ldr	r2, [r1, #0]
    53a2:	4382      	bics	r2, r0
    53a4:	600a      	str	r2, [r1, #0]
    writeFillRect(x,y,w,h,color);
    53a6:	464a      	mov	r2, r9
    53a8:	9201      	str	r2, [sp, #4]
    53aa:	4642      	mov	r2, r8
    53ac:	9200      	str	r2, [sp, #0]
    53ae:	69db      	ldr	r3, [r3, #28]
    53b0:	0032      	movs	r2, r6
    53b2:	4698      	mov	r8, r3
    53b4:	0029      	movs	r1, r5
    53b6:	003b      	movs	r3, r7
    53b8:	0020      	movs	r0, r4
    53ba:	47c0      	blx	r8
    endWrite();
    53bc:	6823      	ldr	r3, [r4, #0]
    53be:	4a15      	ldr	r2, [pc, #84]	; (5414 <_ZN16Adafruit_ILI93418fillRectEsssst+0xa8>)
    53c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    53c2:	4293      	cmp	r3, r2
    53c4:	d10f      	bne.n	53e6 <_ZN16Adafruit_ILI93418fillRectEsssst+0x7a>
    SPI_CS_HIGH();
    53c6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    53c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    53ca:	6813      	ldr	r3, [r2, #0]
    53cc:	430b      	orrs	r3, r1
    53ce:	6013      	str	r3, [r2, #0]
    SPI_END_TRANSACTION();
    53d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    53d2:	2b00      	cmp	r3, #0
    53d4:	db0a      	blt.n	53ec <_ZN16Adafruit_ILI93418fillRectEsssst+0x80>
}
    53d6:	b005      	add	sp, #20
    53d8:	bc0c      	pop	{r2, r3}
    53da:	4690      	mov	r8, r2
    53dc:	4699      	mov	r9, r3
    53de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    startWrite();
    53e0:	4790      	blx	r2
    53e2:	6823      	ldr	r3, [r4, #0]
    53e4:	e7df      	b.n	53a6 <_ZN16Adafruit_ILI93418fillRectEsssst+0x3a>
    endWrite();
    53e6:	0020      	movs	r0, r4
    53e8:	4798      	blx	r3
}
    53ea:	e7f4      	b.n	53d6 <_ZN16Adafruit_ILI93418fillRectEsssst+0x6a>
    SPI_END_TRANSACTION();
    53ec:	480a      	ldr	r0, [pc, #40]	; (5418 <_ZN16Adafruit_ILI93418fillRectEsssst+0xac>)
    53ee:	f009 faa9 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    53f2:	e7f0      	b.n	53d6 <_ZN16Adafruit_ILI93418fillRectEsssst+0x6a>
    SPI_BEGIN_TRANSACTION();
    53f4:	2302      	movs	r3, #2
    53f6:	6a01      	ldr	r1, [r0, #32]
    53f8:	2201      	movs	r2, #1
    53fa:	a802      	add	r0, sp, #8
    53fc:	f7ff fdea 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    5400:	9902      	ldr	r1, [sp, #8]
    5402:	9a03      	ldr	r2, [sp, #12]
    5404:	4804      	ldr	r0, [pc, #16]	; (5418 <_ZN16Adafruit_ILI93418fillRectEsssst+0xac>)
    5406:	f009 fa6d 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    540a:	6823      	ldr	r3, [r4, #0]
    540c:	e7c6      	b.n	539c <_ZN16Adafruit_ILI93418fillRectEsssst+0x30>
    540e:	46c0      	nop			; (mov r8, r8)
    5410:	00005015 	.word	0x00005015
    5414:	00004fb5 	.word	0x00004fb5
    5418:	20000a0c 	.word	0x20000a0c

0000541c <_ZN16Adafruit_ILI934111setRotationEh>:
    rotation = m % 4; // can't be higher than 3
    541c:	2303      	movs	r3, #3
void Adafruit_ILI9341::setRotation(uint8_t m) {
    541e:	b570      	push	{r4, r5, r6, lr}
    rotation = m % 4; // can't be higher than 3
    5420:	4019      	ands	r1, r3
void Adafruit_ILI9341::setRotation(uint8_t m) {
    5422:	b082      	sub	sp, #8
    5424:	0004      	movs	r4, r0
    rotation = m % 4; // can't be higher than 3
    5426:	7641      	strb	r1, [r0, #25]
    switch (rotation) {
    5428:	2902      	cmp	r1, #2
    542a:	d100      	bne.n	542e <_ZN16Adafruit_ILI934111setRotationEh+0x12>
    542c:	e12d      	b.n	568a <_ZN16Adafruit_ILI934111setRotationEh+0x26e>
    542e:	2903      	cmp	r1, #3
    5430:	d100      	bne.n	5434 <_ZN16Adafruit_ILI934111setRotationEh+0x18>
    5432:	e126      	b.n	5682 <_ZN16Adafruit_ILI934111setRotationEh+0x266>
    5434:	2901      	cmp	r1, #1
    5436:	d100      	bne.n	543a <_ZN16Adafruit_ILI934111setRotationEh+0x1e>
    5438:	e100      	b.n	563c <_ZN16Adafruit_ILI934111setRotationEh+0x220>
            m = (MADCTL_MX | MADCTL_BGR);
    543a:	2548      	movs	r5, #72	; 0x48
            _width  = ILI9341_TFTWIDTH;
    543c:	4ba2      	ldr	r3, [pc, #648]	; (56c8 <_ZN16Adafruit_ILI934111setRotationEh+0x2ac>)
    543e:	60c3      	str	r3, [r0, #12]
    startWrite();
    5440:	6823      	ldr	r3, [r4, #0]
    5442:	4aa2      	ldr	r2, [pc, #648]	; (56cc <_ZN16Adafruit_ILI934111setRotationEh+0x2b0>)
    5444:	695b      	ldr	r3, [r3, #20]
    5446:	4293      	cmp	r3, r2
    5448:	d000      	beq.n	544c <_ZN16Adafruit_ILI934111setRotationEh+0x30>
    544a:	e100      	b.n	564e <_ZN16Adafruit_ILI934111setRotationEh+0x232>
    SPI_BEGIN_TRANSACTION();
    544c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    544e:	2b00      	cmp	r3, #0
    5450:	da00      	bge.n	5454 <_ZN16Adafruit_ILI934111setRotationEh+0x38>
    5452:	e11e      	b.n	5692 <_ZN16Adafruit_ILI934111setRotationEh+0x276>
    SPI_CS_LOW();
    5454:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5456:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    5458:	6813      	ldr	r3, [r2, #0]
    545a:	438b      	bics	r3, r1
    545c:	6013      	str	r3, [r2, #0]
    SPI_DC_LOW();
    545e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    5460:	6e22      	ldr	r2, [r4, #96]	; 0x60
    5462:	680b      	ldr	r3, [r1, #0]
    5464:	4393      	bics	r3, r2
    5466:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    5468:	6b23      	ldr	r3, [r4, #48]	; 0x30
    546a:	2b00      	cmp	r3, #0
    546c:	da00      	bge.n	5470 <_ZN16Adafruit_ILI934111setRotationEh+0x54>
    546e:	e125      	b.n	56bc <_ZN16Adafruit_ILI934111setRotationEh+0x2a0>
    5470:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    5472:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5474:	6810      	ldr	r0, [r2, #0]
    5476:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5478:	43b0      	bics	r0, r6
    547a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    547c:	6818      	ldr	r0, [r3, #0]
    547e:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5480:	43b0      	bics	r0, r6
    5482:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5484:	6818      	ldr	r0, [r3, #0]
    5486:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5488:	4330      	orrs	r0, r6
    548a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    548c:	6810      	ldr	r0, [r2, #0]
    548e:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5490:	43b0      	bics	r0, r6
    5492:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5494:	6818      	ldr	r0, [r3, #0]
    5496:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5498:	43b0      	bics	r0, r6
    549a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    549c:	6818      	ldr	r0, [r3, #0]
    549e:	6da6      	ldr	r6, [r4, #88]	; 0x58
    54a0:	4330      	orrs	r0, r6
    54a2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    54a4:	6810      	ldr	r0, [r2, #0]
    54a6:	6d26      	ldr	r6, [r4, #80]	; 0x50
    54a8:	4330      	orrs	r0, r6
    54aa:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    54ac:	6818      	ldr	r0, [r3, #0]
    54ae:	6da6      	ldr	r6, [r4, #88]	; 0x58
    54b0:	43b0      	bics	r0, r6
    54b2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    54b4:	6818      	ldr	r0, [r3, #0]
    54b6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    54b8:	4330      	orrs	r0, r6
    54ba:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    54bc:	6810      	ldr	r0, [r2, #0]
    54be:	6d26      	ldr	r6, [r4, #80]	; 0x50
    54c0:	4330      	orrs	r0, r6
    54c2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    54c4:	6818      	ldr	r0, [r3, #0]
    54c6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    54c8:	43b0      	bics	r0, r6
    54ca:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    54cc:	6818      	ldr	r0, [r3, #0]
    54ce:	6da6      	ldr	r6, [r4, #88]	; 0x58
    54d0:	4330      	orrs	r0, r6
    54d2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    54d4:	6810      	ldr	r0, [r2, #0]
    54d6:	6d26      	ldr	r6, [r4, #80]	; 0x50
    54d8:	43b0      	bics	r0, r6
    54da:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    54dc:	6818      	ldr	r0, [r3, #0]
    54de:	6da6      	ldr	r6, [r4, #88]	; 0x58
    54e0:	43b0      	bics	r0, r6
    54e2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    54e4:	6818      	ldr	r0, [r3, #0]
    54e6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    54e8:	4330      	orrs	r0, r6
    54ea:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    54ec:	6810      	ldr	r0, [r2, #0]
    54ee:	6d26      	ldr	r6, [r4, #80]	; 0x50
    54f0:	4330      	orrs	r0, r6
    54f2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    54f4:	6818      	ldr	r0, [r3, #0]
    54f6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    54f8:	43b0      	bics	r0, r6
    54fa:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    54fc:	6818      	ldr	r0, [r3, #0]
    54fe:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5500:	4330      	orrs	r0, r6
    5502:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    5504:	6810      	ldr	r0, [r2, #0]
    5506:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5508:	4330      	orrs	r0, r6
    550a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    550c:	6818      	ldr	r0, [r3, #0]
    550e:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5510:	43b0      	bics	r0, r6
    5512:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5514:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5516:	6818      	ldr	r0, [r3, #0]
    5518:	4330      	orrs	r0, r6
    551a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    551c:	6810      	ldr	r0, [r2, #0]
    551e:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5520:	43b0      	bics	r0, r6
    5522:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5524:	681a      	ldr	r2, [r3, #0]
    5526:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5528:	4382      	bics	r2, r0
    552a:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    552c:	681a      	ldr	r2, [r3, #0]
    552e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5530:	4302      	orrs	r2, r0
    5532:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    5534:	680b      	ldr	r3, [r1, #0]
    5536:	6e22      	ldr	r2, [r4, #96]	; 0x60
    5538:	4313      	orrs	r3, r2
    553a:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    553c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    553e:	2b00      	cmp	r3, #0
    5540:	da00      	bge.n	5544 <_ZN16Adafruit_ILI934111setRotationEh+0x128>
    5542:	e0b6      	b.n	56b2 <_ZN16Adafruit_ILI934111setRotationEh+0x296>
        if((b) & bit){
    5544:	b269      	sxtb	r1, r5
    5546:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5548:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    554a:	2900      	cmp	r1, #0
    554c:	da00      	bge.n	5550 <_ZN16Adafruit_ILI934111setRotationEh+0x134>
    554e:	e090      	b.n	5672 <_ZN16Adafruit_ILI934111setRotationEh+0x256>
            SSPI_MOSI_LOW();
    5550:	6811      	ldr	r1, [r2, #0]
    5552:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5554:	4381      	bics	r1, r0
    5556:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5558:	6819      	ldr	r1, [r3, #0]
    555a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    555c:	4381      	bics	r1, r0
    555e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5560:	6819      	ldr	r1, [r3, #0]
    5562:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5564:	4301      	orrs	r1, r0
    5566:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    5568:	0669      	lsls	r1, r5, #25
    556a:	d500      	bpl.n	556e <_ZN16Adafruit_ILI934111setRotationEh+0x152>
    556c:	e07c      	b.n	5668 <_ZN16Adafruit_ILI934111setRotationEh+0x24c>
            SSPI_MOSI_LOW();
    556e:	6811      	ldr	r1, [r2, #0]
    5570:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5572:	4381      	bics	r1, r0
    5574:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5576:	6819      	ldr	r1, [r3, #0]
    5578:	6da0      	ldr	r0, [r4, #88]	; 0x58
    557a:	4381      	bics	r1, r0
    557c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    557e:	6819      	ldr	r1, [r3, #0]
    5580:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5582:	4301      	orrs	r1, r0
    5584:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    5586:	06a9      	lsls	r1, r5, #26
    5588:	d469      	bmi.n	565e <_ZN16Adafruit_ILI934111setRotationEh+0x242>
            SSPI_MOSI_LOW();
    558a:	6811      	ldr	r1, [r2, #0]
    558c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    558e:	4381      	bics	r1, r0
    5590:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5592:	6819      	ldr	r1, [r3, #0]
    5594:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5596:	4381      	bics	r1, r0
    5598:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    559a:	6819      	ldr	r1, [r3, #0]
    559c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    559e:	4301      	orrs	r1, r0
    55a0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    55a2:	6811      	ldr	r1, [r2, #0]
    55a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    55a6:	4381      	bics	r1, r0
    55a8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    55aa:	6819      	ldr	r1, [r3, #0]
    55ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    55ae:	4381      	bics	r1, r0
    55b0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    55b2:	6819      	ldr	r1, [r3, #0]
    55b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    55b6:	4301      	orrs	r1, r0
    55b8:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    55ba:	0729      	lsls	r1, r5, #28
    55bc:	d44a      	bmi.n	5654 <_ZN16Adafruit_ILI934111setRotationEh+0x238>
            SSPI_MOSI_LOW();
    55be:	6811      	ldr	r1, [r2, #0]
    55c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    55c2:	4381      	bics	r1, r0
    55c4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    55c6:	6819      	ldr	r1, [r3, #0]
    55c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    55ca:	4381      	bics	r1, r0
    55cc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    55ce:	6819      	ldr	r1, [r3, #0]
    55d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    55d2:	4301      	orrs	r1, r0
    55d4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    55d6:	6811      	ldr	r1, [r2, #0]
    55d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    55da:	4381      	bics	r1, r0
    55dc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    55de:	6819      	ldr	r1, [r3, #0]
    55e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    55e2:	4381      	bics	r1, r0
    55e4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    55e6:	6819      	ldr	r1, [r3, #0]
    55e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    55ea:	4301      	orrs	r1, r0
    55ec:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    55ee:	6811      	ldr	r1, [r2, #0]
    55f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    55f2:	4381      	bics	r1, r0
    55f4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    55f6:	6819      	ldr	r1, [r3, #0]
    55f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    55fa:	4381      	bics	r1, r0
    55fc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    55fe:	6819      	ldr	r1, [r3, #0]
    5600:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5602:	4301      	orrs	r1, r0
    5604:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5606:	6811      	ldr	r1, [r2, #0]
    5608:	6d20      	ldr	r0, [r4, #80]	; 0x50
    560a:	4381      	bics	r1, r0
    560c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    560e:	681a      	ldr	r2, [r3, #0]
    5610:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5612:	438a      	bics	r2, r1
    5614:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    5616:	681a      	ldr	r2, [r3, #0]
    5618:	6da1      	ldr	r1, [r4, #88]	; 0x58
    561a:	430a      	orrs	r2, r1
    561c:	601a      	str	r2, [r3, #0]
    endWrite();
    561e:	6823      	ldr	r3, [r4, #0]
    5620:	4a2b      	ldr	r2, [pc, #172]	; (56d0 <_ZN16Adafruit_ILI934111setRotationEh+0x2b4>)
    5622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5624:	4293      	cmp	r3, r2
    5626:	d129      	bne.n	567c <_ZN16Adafruit_ILI934111setRotationEh+0x260>
    SPI_CS_HIGH();
    5628:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    562a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    562c:	6813      	ldr	r3, [r2, #0]
    562e:	430b      	orrs	r3, r1
    5630:	6013      	str	r3, [r2, #0]
    SPI_END_TRANSACTION();
    5632:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5634:	2b00      	cmp	r3, #0
    5636:	db38      	blt.n	56aa <_ZN16Adafruit_ILI934111setRotationEh+0x28e>
}
    5638:	b002      	add	sp, #8
    563a:	bd70      	pop	{r4, r5, r6, pc}
            _width  = ILI9341_TFTHEIGHT;
    563c:	4b25      	ldr	r3, [pc, #148]	; (56d4 <_ZN16Adafruit_ILI934111setRotationEh+0x2b8>)
    563e:	4a23      	ldr	r2, [pc, #140]	; (56cc <_ZN16Adafruit_ILI934111setRotationEh+0x2b0>)
    5640:	60c3      	str	r3, [r0, #12]
    startWrite();
    5642:	6823      	ldr	r3, [r4, #0]
            m = (MADCTL_MV | MADCTL_BGR);
    5644:	2528      	movs	r5, #40	; 0x28
    startWrite();
    5646:	695b      	ldr	r3, [r3, #20]
    5648:	4293      	cmp	r3, r2
    564a:	d100      	bne.n	564e <_ZN16Adafruit_ILI934111setRotationEh+0x232>
    564c:	e6fe      	b.n	544c <_ZN16Adafruit_ILI934111setRotationEh+0x30>
    564e:	0020      	movs	r0, r4
    5650:	4798      	blx	r3
    5652:	e704      	b.n	545e <_ZN16Adafruit_ILI934111setRotationEh+0x42>
            SSPI_MOSI_HIGH();
    5654:	6811      	ldr	r1, [r2, #0]
    5656:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5658:	4301      	orrs	r1, r0
    565a:	6011      	str	r1, [r2, #0]
    565c:	e7b3      	b.n	55c6 <_ZN16Adafruit_ILI934111setRotationEh+0x1aa>
    565e:	6811      	ldr	r1, [r2, #0]
    5660:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5662:	4301      	orrs	r1, r0
    5664:	6011      	str	r1, [r2, #0]
    5666:	e794      	b.n	5592 <_ZN16Adafruit_ILI934111setRotationEh+0x176>
    5668:	6811      	ldr	r1, [r2, #0]
    566a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    566c:	4301      	orrs	r1, r0
    566e:	6011      	str	r1, [r2, #0]
    5670:	e781      	b.n	5576 <_ZN16Adafruit_ILI934111setRotationEh+0x15a>
    5672:	6811      	ldr	r1, [r2, #0]
    5674:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5676:	4301      	orrs	r1, r0
    5678:	6011      	str	r1, [r2, #0]
    567a:	e76d      	b.n	5558 <_ZN16Adafruit_ILI934111setRotationEh+0x13c>
    endWrite();
    567c:	0020      	movs	r0, r4
    567e:	4798      	blx	r3
}
    5680:	e7da      	b.n	5638 <_ZN16Adafruit_ILI934111setRotationEh+0x21c>
            _width  = ILI9341_TFTHEIGHT;
    5682:	4b14      	ldr	r3, [pc, #80]	; (56d4 <_ZN16Adafruit_ILI934111setRotationEh+0x2b8>)
            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
    5684:	25e8      	movs	r5, #232	; 0xe8
            _width  = ILI9341_TFTHEIGHT;
    5686:	60c3      	str	r3, [r0, #12]
            break;
    5688:	e6da      	b.n	5440 <_ZN16Adafruit_ILI934111setRotationEh+0x24>
            _width  = ILI9341_TFTWIDTH;
    568a:	4b0f      	ldr	r3, [pc, #60]	; (56c8 <_ZN16Adafruit_ILI934111setRotationEh+0x2ac>)
            m = (MADCTL_MY | MADCTL_BGR);
    568c:	2588      	movs	r5, #136	; 0x88
            _width  = ILI9341_TFTWIDTH;
    568e:	60c3      	str	r3, [r0, #12]
            break;
    5690:	e6d6      	b.n	5440 <_ZN16Adafruit_ILI934111setRotationEh+0x24>
    SPI_BEGIN_TRANSACTION();
    5692:	6a21      	ldr	r1, [r4, #32]
    5694:	2302      	movs	r3, #2
    5696:	2201      	movs	r2, #1
    5698:	4668      	mov	r0, sp
    569a:	f7ff fc9b 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    569e:	9900      	ldr	r1, [sp, #0]
    56a0:	9a01      	ldr	r2, [sp, #4]
    56a2:	480d      	ldr	r0, [pc, #52]	; (56d8 <_ZN16Adafruit_ILI934111setRotationEh+0x2bc>)
    56a4:	f009 f91e 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    56a8:	e6d4      	b.n	5454 <_ZN16Adafruit_ILI934111setRotationEh+0x38>
    SPI_END_TRANSACTION();
    56aa:	480b      	ldr	r0, [pc, #44]	; (56d8 <_ZN16Adafruit_ILI934111setRotationEh+0x2bc>)
    56ac:	f009 f94a 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    56b0:	e7c2      	b.n	5638 <_ZN16Adafruit_ILI934111setRotationEh+0x21c>
        HSPI_WRITE(b);
    56b2:	0029      	movs	r1, r5
    56b4:	4808      	ldr	r0, [pc, #32]	; (56d8 <_ZN16Adafruit_ILI934111setRotationEh+0x2bc>)
    56b6:	f009 f957 	bl	e968 <_ZN8SPIClass8transferEh>
    56ba:	e7b0      	b.n	561e <_ZN16Adafruit_ILI934111setRotationEh+0x202>
    56bc:	2136      	movs	r1, #54	; 0x36
    56be:	4806      	ldr	r0, [pc, #24]	; (56d8 <_ZN16Adafruit_ILI934111setRotationEh+0x2bc>)
    56c0:	f009 f952 	bl	e968 <_ZN8SPIClass8transferEh>
    56c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    56c6:	e735      	b.n	5534 <_ZN16Adafruit_ILI934111setRotationEh+0x118>
    56c8:	014000f0 	.word	0x014000f0
    56cc:	00005015 	.word	0x00005015
    56d0:	00004fb5 	.word	0x00004fb5
    56d4:	00f00140 	.word	0x00f00140
    56d8:	20000a0c 	.word	0x20000a0c

000056dc <_ZN16Adafruit_ILI93418color565Ehhh>:
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    56dc:	20fc      	movs	r0, #252	; 0xfc
    56de:	00d2      	lsls	r2, r2, #3
    56e0:	00c0      	lsls	r0, r0, #3
    56e2:	4002      	ands	r2, r0
    56e4:	08c9      	lsrs	r1, r1, #3
    56e6:	08d8      	lsrs	r0, r3, #3
    56e8:	4310      	orrs	r0, r2
    56ea:	02c9      	lsls	r1, r1, #11
    56ec:	4308      	orrs	r0, r1
}
    56ee:	4770      	bx	lr

000056f0 <_ZN16Adafruit_ILI9341C1Eaaa>:
Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT) {
    56f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56f2:	0015      	movs	r5, r2
    56f4:	22a0      	movs	r2, #160	; 0xa0
    56f6:	0004      	movs	r4, r0
    56f8:	000e      	movs	r6, r1
    56fa:	0052      	lsls	r2, r2, #1
    56fc:	21f0      	movs	r1, #240	; 0xf0
    56fe:	001f      	movs	r7, r3
    5700:	f009 ffa6 	bl	f650 <_ZN12Adafruit_GFXC1Ess>
    5704:	4b17      	ldr	r3, [pc, #92]	; (5764 <_ZN16Adafruit_ILI9341C1Eaaa+0x74>)
    csport    = portOutputRegister(digitalPinToPort(_cs));
    5706:	0071      	lsls	r1, r6, #1
Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT) {
    5708:	3308      	adds	r3, #8
    570a:	6023      	str	r3, [r4, #0]
    _sclk  = -1;
    570c:	2301      	movs	r3, #1
    _cs   = cs;
    570e:	6266      	str	r6, [r4, #36]	; 0x24
    csport    = portOutputRegister(digitalPinToPort(_cs));
    5710:	1989      	adds	r1, r1, r6
    5712:	4e15      	ldr	r6, [pc, #84]	; (5768 <_ZN16Adafruit_ILI9341C1Eaaa+0x78>)
    _sclk  = -1;
    5714:	425b      	negs	r3, r3
    5716:	6323      	str	r3, [r4, #48]	; 0x30
    _mosi  = -1;
    5718:	6363      	str	r3, [r4, #52]	; 0x34
    _miso  = -1;
    571a:	63a3      	str	r3, [r4, #56]	; 0x38
    csport    = portOutputRegister(digitalPinToPort(_cs));
    571c:	46b4      	mov	ip, r6
    _freq = 0;
    571e:	2300      	movs	r3, #0
    cspinmask = digitalPinToBitMask(_cs);
    5720:	2601      	movs	r6, #1
    csport    = portOutputRegister(digitalPinToPort(_cs));
    5722:	4812      	ldr	r0, [pc, #72]	; (576c <_ZN16Adafruit_ILI9341C1Eaaa+0x7c>)
    5724:	00c9      	lsls	r1, r1, #3
    5726:	560a      	ldrsb	r2, [r1, r0]
    _dc   = dc;
    5728:	62a5      	str	r5, [r4, #40]	; 0x28
    csport    = portOutputRegister(digitalPinToPort(_cs));
    572a:	01d2      	lsls	r2, r2, #7
    _rst  = rst;
    572c:	62e7      	str	r7, [r4, #44]	; 0x2c
    _freq = 0;
    572e:	6223      	str	r3, [r4, #32]
    csport    = portOutputRegister(digitalPinToPort(_cs));
    5730:	4462      	add	r2, ip
    cspinmask = digitalPinToBitMask(_cs);
    5732:	1841      	adds	r1, r0, r1
    csport    = portOutputRegister(digitalPinToPort(_cs));
    5734:	64e2      	str	r2, [r4, #76]	; 0x4c
    cspinmask = digitalPinToBitMask(_cs);
    5736:	684a      	ldr	r2, [r1, #4]
    5738:	0031      	movs	r1, r6
    573a:	4091      	lsls	r1, r2
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    573c:	006a      	lsls	r2, r5, #1
    573e:	1952      	adds	r2, r2, r5
    5740:	00d2      	lsls	r2, r2, #3
    cspinmask = digitalPinToBitMask(_cs);
    5742:	65e1      	str	r1, [r4, #92]	; 0x5c
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    5744:	5611      	ldrsb	r1, [r2, r0]
    dcpinmask = digitalPinToBitMask(_dc);
    5746:	1880      	adds	r0, r0, r2
    5748:	6842      	ldr	r2, [r0, #4]
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    574a:	01c9      	lsls	r1, r1, #7
    dcpinmask = digitalPinToBitMask(_dc);
    574c:	4096      	lsls	r6, r2
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    574e:	4461      	add	r1, ip
    dcpinmask = digitalPinToBitMask(_dc);
    5750:	6626      	str	r6, [r4, #96]	; 0x60
}
    5752:	0020      	movs	r0, r4
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    5754:	64a1      	str	r1, [r4, #72]	; 0x48
    clkport     = 0;
    5756:	6463      	str	r3, [r4, #68]	; 0x44
    clkpinmask  = 0;
    5758:	65a3      	str	r3, [r4, #88]	; 0x58
    mosiport    = 0;
    575a:	63e3      	str	r3, [r4, #60]	; 0x3c
    mosipinmask = 0;
    575c:	6523      	str	r3, [r4, #80]	; 0x50
    misoport    = 0;
    575e:	6423      	str	r3, [r4, #64]	; 0x40
    misopinmask = 0;
    5760:	6563      	str	r3, [r4, #84]	; 0x54
}
    5762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5764:	00010d1c 	.word	0x00010d1c
    5768:	41004410 	.word	0x41004410
    576c:	00010e00 	.word	0x00010e00

00005770 <_ZN16Adafruit_ILI934112writeCommandEh>:
void Adafruit_ILI9341::writeCommand(uint8_t cmd){
    5770:	b570      	push	{r4, r5, r6, lr}
    5772:	0004      	movs	r4, r0
    SPI_DC_LOW();
    5774:	6c80      	ldr	r0, [r0, #72]	; 0x48
    5776:	6e22      	ldr	r2, [r4, #96]	; 0x60
    5778:	6803      	ldr	r3, [r0, #0]
    577a:	4393      	bics	r3, r2
    577c:	6003      	str	r3, [r0, #0]
    if(_sclk < 0){
    577e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5780:	2b00      	cmp	r3, #0
    5782:	da00      	bge.n	5786 <_ZN16Adafruit_ILI934112writeCommandEh+0x16>
    5784:	e0a2      	b.n	58cc <_ZN16Adafruit_ILI934112writeCommandEh+0x15c>
        if((b) & bit){
    5786:	b24d      	sxtb	r5, r1
    5788:	6c63      	ldr	r3, [r4, #68]	; 0x44
    578a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    578c:	2d00      	cmp	r5, #0
    578e:	da00      	bge.n	5792 <_ZN16Adafruit_ILI934112writeCommandEh+0x22>
    5790:	e074      	b.n	587c <_ZN16Adafruit_ILI934112writeCommandEh+0x10c>
            SSPI_MOSI_LOW();
    5792:	6815      	ldr	r5, [r2, #0]
    5794:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5796:	43b5      	bics	r5, r6
    5798:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    579a:	681d      	ldr	r5, [r3, #0]
    579c:	6da6      	ldr	r6, [r4, #88]	; 0x58
    579e:	43b5      	bics	r5, r6
    57a0:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    57a2:	681d      	ldr	r5, [r3, #0]
    57a4:	6da6      	ldr	r6, [r4, #88]	; 0x58
    57a6:	4335      	orrs	r5, r6
    57a8:	601d      	str	r5, [r3, #0]
        if((b) & bit){
    57aa:	064d      	lsls	r5, r1, #25
    57ac:	d500      	bpl.n	57b0 <_ZN16Adafruit_ILI934112writeCommandEh+0x40>
    57ae:	e088      	b.n	58c2 <_ZN16Adafruit_ILI934112writeCommandEh+0x152>
            SSPI_MOSI_LOW();
    57b0:	6815      	ldr	r5, [r2, #0]
    57b2:	6d26      	ldr	r6, [r4, #80]	; 0x50
    57b4:	43b5      	bics	r5, r6
    57b6:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    57b8:	681d      	ldr	r5, [r3, #0]
    57ba:	6da6      	ldr	r6, [r4, #88]	; 0x58
    57bc:	43b5      	bics	r5, r6
    57be:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    57c0:	681d      	ldr	r5, [r3, #0]
    57c2:	6da6      	ldr	r6, [r4, #88]	; 0x58
    57c4:	4335      	orrs	r5, r6
    57c6:	601d      	str	r5, [r3, #0]
        if((b) & bit){
    57c8:	068d      	lsls	r5, r1, #26
    57ca:	d500      	bpl.n	57ce <_ZN16Adafruit_ILI934112writeCommandEh+0x5e>
    57cc:	e074      	b.n	58b8 <_ZN16Adafruit_ILI934112writeCommandEh+0x148>
            SSPI_MOSI_LOW();
    57ce:	6815      	ldr	r5, [r2, #0]
    57d0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    57d2:	43b5      	bics	r5, r6
    57d4:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    57d6:	681d      	ldr	r5, [r3, #0]
    57d8:	6da6      	ldr	r6, [r4, #88]	; 0x58
    57da:	43b5      	bics	r5, r6
    57dc:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    57de:	681d      	ldr	r5, [r3, #0]
    57e0:	6da6      	ldr	r6, [r4, #88]	; 0x58
    57e2:	4335      	orrs	r5, r6
    57e4:	601d      	str	r5, [r3, #0]
        if((b) & bit){
    57e6:	06cd      	lsls	r5, r1, #27
    57e8:	d461      	bmi.n	58ae <_ZN16Adafruit_ILI934112writeCommandEh+0x13e>
            SSPI_MOSI_LOW();
    57ea:	6815      	ldr	r5, [r2, #0]
    57ec:	6d26      	ldr	r6, [r4, #80]	; 0x50
    57ee:	43b5      	bics	r5, r6
    57f0:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    57f2:	681d      	ldr	r5, [r3, #0]
    57f4:	6da6      	ldr	r6, [r4, #88]	; 0x58
    57f6:	43b5      	bics	r5, r6
    57f8:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    57fa:	681d      	ldr	r5, [r3, #0]
    57fc:	6da6      	ldr	r6, [r4, #88]	; 0x58
    57fe:	4335      	orrs	r5, r6
    5800:	601d      	str	r5, [r3, #0]
        if((b) & bit){
    5802:	070d      	lsls	r5, r1, #28
    5804:	d44e      	bmi.n	58a4 <_ZN16Adafruit_ILI934112writeCommandEh+0x134>
            SSPI_MOSI_LOW();
    5806:	6815      	ldr	r5, [r2, #0]
    5808:	6d26      	ldr	r6, [r4, #80]	; 0x50
    580a:	43b5      	bics	r5, r6
    580c:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    580e:	681d      	ldr	r5, [r3, #0]
    5810:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5812:	43b5      	bics	r5, r6
    5814:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    5816:	681d      	ldr	r5, [r3, #0]
    5818:	6da6      	ldr	r6, [r4, #88]	; 0x58
    581a:	4335      	orrs	r5, r6
    581c:	601d      	str	r5, [r3, #0]
        if((b) & bit){
    581e:	074d      	lsls	r5, r1, #29
    5820:	d43b      	bmi.n	589a <_ZN16Adafruit_ILI934112writeCommandEh+0x12a>
            SSPI_MOSI_LOW();
    5822:	6815      	ldr	r5, [r2, #0]
    5824:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5826:	43b5      	bics	r5, r6
    5828:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    582a:	681d      	ldr	r5, [r3, #0]
    582c:	6da6      	ldr	r6, [r4, #88]	; 0x58
    582e:	43b5      	bics	r5, r6
    5830:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    5832:	681d      	ldr	r5, [r3, #0]
    5834:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5836:	4335      	orrs	r5, r6
    5838:	601d      	str	r5, [r3, #0]
        if((b) & bit){
    583a:	078d      	lsls	r5, r1, #30
    583c:	d428      	bmi.n	5890 <_ZN16Adafruit_ILI934112writeCommandEh+0x120>
            SSPI_MOSI_LOW();
    583e:	6815      	ldr	r5, [r2, #0]
    5840:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5842:	43b5      	bics	r5, r6
    5844:	6015      	str	r5, [r2, #0]
        SSPI_SCK_LOW();
    5846:	681d      	ldr	r5, [r3, #0]
    5848:	6da6      	ldr	r6, [r4, #88]	; 0x58
    584a:	43b5      	bics	r5, r6
    584c:	601d      	str	r5, [r3, #0]
        SSPI_SCK_HIGH();
    584e:	681d      	ldr	r5, [r3, #0]
    5850:	6da6      	ldr	r6, [r4, #88]	; 0x58
    5852:	4335      	orrs	r5, r6
    5854:	601d      	str	r5, [r3, #0]
        if((b) & bit){
    5856:	07c9      	lsls	r1, r1, #31
    5858:	d515      	bpl.n	5886 <_ZN16Adafruit_ILI934112writeCommandEh+0x116>
            SSPI_MOSI_HIGH();
    585a:	6811      	ldr	r1, [r2, #0]
    585c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    585e:	4329      	orrs	r1, r5
    5860:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5862:	681a      	ldr	r2, [r3, #0]
    5864:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5866:	438a      	bics	r2, r1
    5868:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    586a:	681a      	ldr	r2, [r3, #0]
    586c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    586e:	430a      	orrs	r2, r1
    5870:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    5872:	6803      	ldr	r3, [r0, #0]
    5874:	6e22      	ldr	r2, [r4, #96]	; 0x60
    5876:	4313      	orrs	r3, r2
    5878:	6003      	str	r3, [r0, #0]
}
    587a:	bd70      	pop	{r4, r5, r6, pc}
            SSPI_MOSI_HIGH();
    587c:	6815      	ldr	r5, [r2, #0]
    587e:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5880:	4335      	orrs	r5, r6
    5882:	6015      	str	r5, [r2, #0]
    5884:	e789      	b.n	579a <_ZN16Adafruit_ILI934112writeCommandEh+0x2a>
            SSPI_MOSI_LOW();
    5886:	6811      	ldr	r1, [r2, #0]
    5888:	6d25      	ldr	r5, [r4, #80]	; 0x50
    588a:	43a9      	bics	r1, r5
    588c:	6011      	str	r1, [r2, #0]
    588e:	e7e8      	b.n	5862 <_ZN16Adafruit_ILI934112writeCommandEh+0xf2>
            SSPI_MOSI_HIGH();
    5890:	6815      	ldr	r5, [r2, #0]
    5892:	6d26      	ldr	r6, [r4, #80]	; 0x50
    5894:	4335      	orrs	r5, r6
    5896:	6015      	str	r5, [r2, #0]
    5898:	e7d5      	b.n	5846 <_ZN16Adafruit_ILI934112writeCommandEh+0xd6>
    589a:	6815      	ldr	r5, [r2, #0]
    589c:	6d26      	ldr	r6, [r4, #80]	; 0x50
    589e:	4335      	orrs	r5, r6
    58a0:	6015      	str	r5, [r2, #0]
    58a2:	e7c2      	b.n	582a <_ZN16Adafruit_ILI934112writeCommandEh+0xba>
    58a4:	6815      	ldr	r5, [r2, #0]
    58a6:	6d26      	ldr	r6, [r4, #80]	; 0x50
    58a8:	4335      	orrs	r5, r6
    58aa:	6015      	str	r5, [r2, #0]
    58ac:	e7af      	b.n	580e <_ZN16Adafruit_ILI934112writeCommandEh+0x9e>
    58ae:	6815      	ldr	r5, [r2, #0]
    58b0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    58b2:	4335      	orrs	r5, r6
    58b4:	6015      	str	r5, [r2, #0]
    58b6:	e79c      	b.n	57f2 <_ZN16Adafruit_ILI934112writeCommandEh+0x82>
    58b8:	6815      	ldr	r5, [r2, #0]
    58ba:	6d26      	ldr	r6, [r4, #80]	; 0x50
    58bc:	4335      	orrs	r5, r6
    58be:	6015      	str	r5, [r2, #0]
    58c0:	e789      	b.n	57d6 <_ZN16Adafruit_ILI934112writeCommandEh+0x66>
    58c2:	6815      	ldr	r5, [r2, #0]
    58c4:	6d26      	ldr	r6, [r4, #80]	; 0x50
    58c6:	4335      	orrs	r5, r6
    58c8:	6015      	str	r5, [r2, #0]
    58ca:	e775      	b.n	57b8 <_ZN16Adafruit_ILI934112writeCommandEh+0x48>
        HSPI_WRITE(b);
    58cc:	4802      	ldr	r0, [pc, #8]	; (58d8 <_ZN16Adafruit_ILI934112writeCommandEh+0x168>)
    58ce:	f009 f84b 	bl	e968 <_ZN8SPIClass8transferEh>
    58d2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    58d4:	e7cd      	b.n	5872 <_ZN16Adafruit_ILI934112writeCommandEh+0x102>
    58d6:	46c0      	nop			; (mov r8, r8)
    58d8:	20000a0c 	.word	0x20000a0c

000058dc <_ZN16Adafruit_ILI93415beginEm>:
{
    58dc:	b530      	push	{r4, r5, lr}
    58de:	0004      	movs	r4, r0
    58e0:	b083      	sub	sp, #12
    if(!freq){
    58e2:	2900      	cmp	r1, #0
    58e4:	d100      	bne.n	58e8 <_ZN16Adafruit_ILI93415beginEm+0xc>
        freq = SPI_DEFAULT_FREQ;
    58e6:	492d      	ldr	r1, [pc, #180]	; (599c <_ZN16Adafruit_ILI93415beginEm+0xc0>)
    _freq = freq;
    58e8:	6221      	str	r1, [r4, #32]
    pinMode(_dc, OUTPUT);
    58ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    58ec:	2101      	movs	r1, #1
    58ee:	f7ff f91f 	bl	4b30 <pinMode>
    digitalWrite(_dc, LOW);
    58f2:	2100      	movs	r1, #0
    58f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    58f6:	f7ff f96b 	bl	4bd0 <digitalWrite>
    pinMode(_cs, OUTPUT);
    58fa:	2101      	movs	r1, #1
    58fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    58fe:	f7ff f917 	bl	4b30 <pinMode>
    digitalWrite(_cs, HIGH);
    5902:	2101      	movs	r1, #1
    5904:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5906:	f7ff f963 	bl	4bd0 <digitalWrite>
    if(_sclk >= 0){
    590a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    590c:	2b00      	cmp	r3, #0
    590e:	da01      	bge.n	5914 <_ZN16Adafruit_ILI93415beginEm+0x38>
    5910:	f004 fa64 	bl	9ddc <_ZN16Adafruit_ILI93415beginEm+0x4500>
        pinMode(_mosi, OUTPUT);
    5914:	2101      	movs	r1, #1
    5916:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5918:	f7ff f90a 	bl	4b30 <pinMode>
        digitalWrite(_mosi, LOW);
    591c:	2100      	movs	r1, #0
    591e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5920:	f7ff f956 	bl	4bd0 <digitalWrite>
        pinMode(_sclk, OUTPUT);
    5924:	2101      	movs	r1, #1
    5926:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5928:	f7ff f902 	bl	4b30 <pinMode>
        digitalWrite(_sclk, HIGH);
    592c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    592e:	2101      	movs	r1, #1
    5930:	f7ff f94e 	bl	4bd0 <digitalWrite>
        if(_miso >= 0){
    5934:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5936:	2800      	cmp	r0, #0
    5938:	db02      	blt.n	5940 <_ZN16Adafruit_ILI93415beginEm+0x64>
            pinMode(_miso, INPUT);
    593a:	2100      	movs	r1, #0
    593c:	f7ff f8f8 	bl	4b30 <pinMode>
    SPI_BEGIN();
    5940:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5942:	2b00      	cmp	r3, #0
    5944:	da01      	bge.n	594a <_ZN16Adafruit_ILI93415beginEm+0x6e>
    5946:	f004 fa49 	bl	9ddc <_ZN16Adafruit_ILI93415beginEm+0x4500>
    if (_rst >= 0) {
    594a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    594c:	2800      	cmp	r0, #0
    594e:	db17      	blt.n	5980 <_ZN16Adafruit_ILI93415beginEm+0xa4>
        pinMode(_rst, OUTPUT);
    5950:	2101      	movs	r1, #1
    5952:	f7ff f8ed 	bl	4b30 <pinMode>
        digitalWrite(_rst, HIGH);
    5956:	2101      	movs	r1, #1
    5958:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    595a:	f7ff f939 	bl	4bd0 <digitalWrite>
        delay(100);
    595e:	2064      	movs	r0, #100	; 0x64
    5960:	f7fd f8ba 	bl	2ad8 <delay>
        digitalWrite(_rst, LOW);
    5964:	2100      	movs	r1, #0
    5966:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5968:	f7ff f932 	bl	4bd0 <digitalWrite>
        delay(100);
    596c:	2064      	movs	r0, #100	; 0x64
    596e:	f7fd f8b3 	bl	2ad8 <delay>
        digitalWrite(_rst, HIGH);
    5972:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5974:	2101      	movs	r1, #1
    5976:	f7ff f92b 	bl	4bd0 <digitalWrite>
        delay(200);
    597a:	20c8      	movs	r0, #200	; 0xc8
    597c:	f7fd f8ac 	bl	2ad8 <delay>
    startWrite();
    5980:	6823      	ldr	r3, [r4, #0]
    5982:	4a07      	ldr	r2, [pc, #28]	; (59a0 <_ZN16Adafruit_ILI93415beginEm+0xc4>)
    5984:	695b      	ldr	r3, [r3, #20]
    5986:	4293      	cmp	r3, r2
    5988:	d001      	beq.n	598e <_ZN16Adafruit_ILI93415beginEm+0xb2>
    598a:	f004 fa2f 	bl	9dec <_ZN16Adafruit_ILI93415beginEm+0x4510>
    SPI_BEGIN_TRANSACTION();
    598e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5990:	2b00      	cmp	r3, #0
    5992:	da01      	bge.n	5998 <_ZN16Adafruit_ILI93415beginEm+0xbc>
    5994:	f004 fa3e 	bl	9e14 <_ZN16Adafruit_ILI93415beginEm+0x4538>
    5998:	e004      	b.n	59a4 <_ZN16Adafruit_ILI93415beginEm+0xc8>
    599a:	46c0      	nop			; (mov r8, r8)
    599c:	016e3600 	.word	0x016e3600
    59a0:	00005015 	.word	0x00005015
    SPI_CS_LOW();
    59a4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    59a6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    59a8:	6813      	ldr	r3, [r2, #0]
    59aa:	438b      	bics	r3, r1
    59ac:	6013      	str	r3, [r2, #0]
    SPI_DC_LOW();
    59ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    59b0:	6e22      	ldr	r2, [r4, #96]	; 0x60
    59b2:	680b      	ldr	r3, [r1, #0]
    59b4:	4393      	bics	r3, r2
    59b6:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    59b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    59ba:	2b00      	cmp	r3, #0
    59bc:	da01      	bge.n	59c2 <_ZN16Adafruit_ILI93415beginEm+0xe6>
    59be:	f004 fb36 	bl	a02e <_ZN16Adafruit_ILI93415beginEm+0x4752>
    59c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    59c4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    59c6:	6810      	ldr	r0, [r2, #0]
    59c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    59ca:	4328      	orrs	r0, r5
    59cc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    59ce:	6818      	ldr	r0, [r3, #0]
    59d0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    59d2:	43a8      	bics	r0, r5
    59d4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    59d6:	6818      	ldr	r0, [r3, #0]
    59d8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    59da:	4328      	orrs	r0, r5
    59dc:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    59de:	6810      	ldr	r0, [r2, #0]
    59e0:	6d25      	ldr	r5, [r4, #80]	; 0x50
    59e2:	4328      	orrs	r0, r5
    59e4:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    59e6:	6818      	ldr	r0, [r3, #0]
    59e8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    59ea:	43a8      	bics	r0, r5
    59ec:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    59ee:	6818      	ldr	r0, [r3, #0]
    59f0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    59f2:	4328      	orrs	r0, r5
    59f4:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    59f6:	6810      	ldr	r0, [r2, #0]
    59f8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    59fa:	4328      	orrs	r0, r5
    59fc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    59fe:	6818      	ldr	r0, [r3, #0]
    5a00:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5a02:	43a8      	bics	r0, r5
    5a04:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5a06:	6818      	ldr	r0, [r3, #0]
    5a08:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5a0a:	4328      	orrs	r0, r5
    5a0c:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    5a0e:	6810      	ldr	r0, [r2, #0]
    5a10:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5a12:	43a8      	bics	r0, r5
    5a14:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5a16:	6818      	ldr	r0, [r3, #0]
    5a18:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5a1a:	43a8      	bics	r0, r5
    5a1c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5a1e:	6818      	ldr	r0, [r3, #0]
    5a20:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5a22:	4328      	orrs	r0, r5
    5a24:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    5a26:	6810      	ldr	r0, [r2, #0]
    5a28:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5a2a:	4328      	orrs	r0, r5
    5a2c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5a2e:	6818      	ldr	r0, [r3, #0]
    5a30:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5a32:	43a8      	bics	r0, r5
    5a34:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5a36:	6818      	ldr	r0, [r3, #0]
    5a38:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5a3a:	4328      	orrs	r0, r5
    5a3c:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    5a3e:	6810      	ldr	r0, [r2, #0]
    5a40:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5a42:	4328      	orrs	r0, r5
    5a44:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5a46:	6818      	ldr	r0, [r3, #0]
    5a48:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5a4a:	43a8      	bics	r0, r5
    5a4c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5a4e:	6818      	ldr	r0, [r3, #0]
    5a50:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5a52:	4328      	orrs	r0, r5
    5a54:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    5a56:	6810      	ldr	r0, [r2, #0]
    5a58:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5a5a:	4328      	orrs	r0, r5
    5a5c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5a5e:	6818      	ldr	r0, [r3, #0]
    5a60:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5a62:	43a8      	bics	r0, r5
    5a64:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5a66:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5a68:	6818      	ldr	r0, [r3, #0]
    5a6a:	4328      	orrs	r0, r5
    5a6c:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    5a6e:	6810      	ldr	r0, [r2, #0]
    5a70:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5a72:	4328      	orrs	r0, r5
    5a74:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5a76:	681a      	ldr	r2, [r3, #0]
    5a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5a7a:	4382      	bics	r2, r0
    5a7c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    5a7e:	681a      	ldr	r2, [r3, #0]
    5a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5a82:	4302      	orrs	r2, r0
    5a84:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    5a86:	680b      	ldr	r3, [r1, #0]
    5a88:	6e22      	ldr	r2, [r4, #96]	; 0x60
    5a8a:	4313      	orrs	r3, r2
    5a8c:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    5a8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5a90:	2b00      	cmp	r3, #0
    5a92:	da01      	bge.n	5a98 <_ZN16Adafruit_ILI93415beginEm+0x1bc>
    5a94:	f004 fad2 	bl	a03c <_ZN16Adafruit_ILI93415beginEm+0x4760>
    5a98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    5a9a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5a9c:	6811      	ldr	r1, [r2, #0]
    5a9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5aa0:	4381      	bics	r1, r0
    5aa2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5aa4:	6819      	ldr	r1, [r3, #0]
    5aa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5aa8:	4381      	bics	r1, r0
    5aaa:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5aac:	6819      	ldr	r1, [r3, #0]
    5aae:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ab0:	4301      	orrs	r1, r0
    5ab2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5ab4:	6811      	ldr	r1, [r2, #0]
    5ab6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5ab8:	4381      	bics	r1, r0
    5aba:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5abc:	6819      	ldr	r1, [r3, #0]
    5abe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ac0:	4381      	bics	r1, r0
    5ac2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5ac4:	6819      	ldr	r1, [r3, #0]
    5ac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ac8:	4301      	orrs	r1, r0
    5aca:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5acc:	6811      	ldr	r1, [r2, #0]
    5ace:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5ad0:	4381      	bics	r1, r0
    5ad2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5ad4:	6819      	ldr	r1, [r3, #0]
    5ad6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ad8:	4381      	bics	r1, r0
    5ada:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5adc:	6819      	ldr	r1, [r3, #0]
    5ade:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ae0:	4301      	orrs	r1, r0
    5ae2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5ae4:	6811      	ldr	r1, [r2, #0]
    5ae6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5ae8:	4381      	bics	r1, r0
    5aea:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5aec:	6819      	ldr	r1, [r3, #0]
    5aee:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5af0:	4381      	bics	r1, r0
    5af2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5af4:	6819      	ldr	r1, [r3, #0]
    5af6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5af8:	4301      	orrs	r1, r0
    5afa:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5afc:	6811      	ldr	r1, [r2, #0]
    5afe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5b00:	4381      	bics	r1, r0
    5b02:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5b04:	6819      	ldr	r1, [r3, #0]
    5b06:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b08:	4381      	bics	r1, r0
    5b0a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5b0c:	6819      	ldr	r1, [r3, #0]
    5b0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b10:	4301      	orrs	r1, r0
    5b12:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5b14:	6811      	ldr	r1, [r2, #0]
    5b16:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5b18:	4381      	bics	r1, r0
    5b1a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5b1c:	6819      	ldr	r1, [r3, #0]
    5b1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b20:	4381      	bics	r1, r0
    5b22:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5b24:	6819      	ldr	r1, [r3, #0]
    5b26:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b28:	4301      	orrs	r1, r0
    5b2a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    5b2c:	6811      	ldr	r1, [r2, #0]
    5b2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5b30:	4301      	orrs	r1, r0
    5b32:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5b34:	6819      	ldr	r1, [r3, #0]
    5b36:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b38:	4381      	bics	r1, r0
    5b3a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b3e:	6819      	ldr	r1, [r3, #0]
    5b40:	4301      	orrs	r1, r0
    5b42:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    5b44:	6811      	ldr	r1, [r2, #0]
    5b46:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5b48:	4301      	orrs	r1, r0
    5b4a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5b4c:	681a      	ldr	r2, [r3, #0]
    5b4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5b50:	438a      	bics	r2, r1
    5b52:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    5b54:	681a      	ldr	r2, [r3, #0]
    5b56:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5b58:	430a      	orrs	r2, r1
    5b5a:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    5b5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5b5e:	2b00      	cmp	r3, #0
    5b60:	da01      	bge.n	5b66 <_ZN16Adafruit_ILI93415beginEm+0x28a>
    5b62:	f004 fa4b 	bl	9ffc <_ZN16Adafruit_ILI93415beginEm+0x4720>
    5b66:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    5b68:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5b6a:	6811      	ldr	r1, [r2, #0]
    5b6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5b6e:	4301      	orrs	r1, r0
    5b70:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5b72:	6819      	ldr	r1, [r3, #0]
    5b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b76:	4381      	bics	r1, r0
    5b78:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5b7a:	6819      	ldr	r1, [r3, #0]
    5b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b7e:	4301      	orrs	r1, r0
    5b80:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5b82:	6811      	ldr	r1, [r2, #0]
    5b84:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5b86:	4381      	bics	r1, r0
    5b88:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5b8a:	6819      	ldr	r1, [r3, #0]
    5b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b8e:	4381      	bics	r1, r0
    5b90:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5b92:	6819      	ldr	r1, [r3, #0]
    5b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5b96:	4301      	orrs	r1, r0
    5b98:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5b9a:	6811      	ldr	r1, [r2, #0]
    5b9c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5b9e:	4381      	bics	r1, r0
    5ba0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5ba2:	6819      	ldr	r1, [r3, #0]
    5ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ba6:	4381      	bics	r1, r0
    5ba8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5baa:	6819      	ldr	r1, [r3, #0]
    5bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5bae:	4301      	orrs	r1, r0
    5bb0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5bb2:	6811      	ldr	r1, [r2, #0]
    5bb4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5bb6:	4381      	bics	r1, r0
    5bb8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5bba:	6819      	ldr	r1, [r3, #0]
    5bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5bbe:	4381      	bics	r1, r0
    5bc0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5bc2:	6819      	ldr	r1, [r3, #0]
    5bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5bc6:	4301      	orrs	r1, r0
    5bc8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5bca:	6811      	ldr	r1, [r2, #0]
    5bcc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5bce:	4381      	bics	r1, r0
    5bd0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5bd2:	6819      	ldr	r1, [r3, #0]
    5bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5bd6:	4381      	bics	r1, r0
    5bd8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5bda:	6819      	ldr	r1, [r3, #0]
    5bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5bde:	4301      	orrs	r1, r0
    5be0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5be2:	6811      	ldr	r1, [r2, #0]
    5be4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5be6:	4381      	bics	r1, r0
    5be8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5bea:	6819      	ldr	r1, [r3, #0]
    5bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5bee:	4381      	bics	r1, r0
    5bf0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5bf2:	6819      	ldr	r1, [r3, #0]
    5bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5bf6:	4301      	orrs	r1, r0
    5bf8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5bfa:	6811      	ldr	r1, [r2, #0]
    5bfc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5bfe:	4381      	bics	r1, r0
    5c00:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5c02:	6819      	ldr	r1, [r3, #0]
    5c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5c06:	4381      	bics	r1, r0
    5c08:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5c0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5c0c:	6819      	ldr	r1, [r3, #0]
    5c0e:	4301      	orrs	r1, r0
    5c10:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5c12:	6811      	ldr	r1, [r2, #0]
    5c14:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5c16:	4381      	bics	r1, r0
    5c18:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5c1a:	681a      	ldr	r2, [r3, #0]
    5c1c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5c1e:	438a      	bics	r2, r1
    5c20:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    5c22:	681a      	ldr	r2, [r3, #0]
    5c24:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5c26:	430a      	orrs	r2, r1
    5c28:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    5c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	da01      	bge.n	5c34 <_ZN16Adafruit_ILI93415beginEm+0x358>
    5c30:	f004 f9ea 	bl	a008 <_ZN16Adafruit_ILI93415beginEm+0x472c>
    5c34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    5c36:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5c38:	6811      	ldr	r1, [r2, #0]
    5c3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5c3c:	4381      	bics	r1, r0
    5c3e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5c40:	6819      	ldr	r1, [r3, #0]
    5c42:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5c44:	4381      	bics	r1, r0
    5c46:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5c48:	6819      	ldr	r1, [r3, #0]
    5c4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5c4c:	4301      	orrs	r1, r0
    5c4e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5c50:	6811      	ldr	r1, [r2, #0]
    5c52:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5c54:	4381      	bics	r1, r0
    5c56:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5c58:	6819      	ldr	r1, [r3, #0]
    5c5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5c5c:	4381      	bics	r1, r0
    5c5e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5c60:	6819      	ldr	r1, [r3, #0]
    5c62:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5c64:	4301      	orrs	r1, r0
    5c66:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5c68:	6811      	ldr	r1, [r2, #0]
    5c6a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5c6c:	4381      	bics	r1, r0
    5c6e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5c70:	6819      	ldr	r1, [r3, #0]
    5c72:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5c74:	4381      	bics	r1, r0
    5c76:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5c78:	6819      	ldr	r1, [r3, #0]
    5c7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5c7c:	4301      	orrs	r1, r0
    5c7e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5c80:	6811      	ldr	r1, [r2, #0]
    5c82:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5c84:	4381      	bics	r1, r0
    5c86:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5c88:	6819      	ldr	r1, [r3, #0]
    5c8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5c8c:	4381      	bics	r1, r0
    5c8e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5c90:	6819      	ldr	r1, [r3, #0]
    5c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5c94:	4301      	orrs	r1, r0
    5c96:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5c98:	6811      	ldr	r1, [r2, #0]
    5c9a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5c9c:	4381      	bics	r1, r0
    5c9e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5ca0:	6819      	ldr	r1, [r3, #0]
    5ca2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ca4:	4381      	bics	r1, r0
    5ca6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5ca8:	6819      	ldr	r1, [r3, #0]
    5caa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5cac:	4301      	orrs	r1, r0
    5cae:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5cb0:	6811      	ldr	r1, [r2, #0]
    5cb2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5cb4:	4381      	bics	r1, r0
    5cb6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5cb8:	6819      	ldr	r1, [r3, #0]
    5cba:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5cbc:	4381      	bics	r1, r0
    5cbe:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5cc0:	6819      	ldr	r1, [r3, #0]
    5cc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5cc4:	4301      	orrs	r1, r0
    5cc6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    5cc8:	6811      	ldr	r1, [r2, #0]
    5cca:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5ccc:	4301      	orrs	r1, r0
    5cce:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5cd0:	6819      	ldr	r1, [r3, #0]
    5cd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5cd4:	4381      	bics	r1, r0
    5cd6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5cda:	6819      	ldr	r1, [r3, #0]
    5cdc:	4301      	orrs	r1, r0
    5cde:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5ce0:	6811      	ldr	r1, [r2, #0]
    5ce2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5ce4:	4381      	bics	r1, r0
    5ce6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5ce8:	681a      	ldr	r2, [r3, #0]
    5cea:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5cec:	438a      	bics	r2, r1
    5cee:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    5cf0:	681a      	ldr	r2, [r3, #0]
    5cf2:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5cf4:	430a      	orrs	r2, r1
    5cf6:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    5cf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    5cfa:	6e22      	ldr	r2, [r4, #96]	; 0x60
    5cfc:	680b      	ldr	r3, [r1, #0]
    5cfe:	4393      	bics	r3, r2
    5d00:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    5d02:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5d04:	2b00      	cmp	r3, #0
    5d06:	da01      	bge.n	5d0c <_ZN16Adafruit_ILI93415beginEm+0x430>
    5d08:	f004 f984 	bl	a014 <_ZN16Adafruit_ILI93415beginEm+0x4738>
    5d0c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    5d0e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5d10:	6810      	ldr	r0, [r2, #0]
    5d12:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5d14:	4328      	orrs	r0, r5
    5d16:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5d18:	6818      	ldr	r0, [r3, #0]
    5d1a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d1c:	43a8      	bics	r0, r5
    5d1e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5d20:	6818      	ldr	r0, [r3, #0]
    5d22:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d24:	4328      	orrs	r0, r5
    5d26:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    5d28:	6810      	ldr	r0, [r2, #0]
    5d2a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5d2c:	4328      	orrs	r0, r5
    5d2e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5d30:	6818      	ldr	r0, [r3, #0]
    5d32:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d34:	43a8      	bics	r0, r5
    5d36:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5d38:	6818      	ldr	r0, [r3, #0]
    5d3a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d3c:	4328      	orrs	r0, r5
    5d3e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    5d40:	6810      	ldr	r0, [r2, #0]
    5d42:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5d44:	43a8      	bics	r0, r5
    5d46:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5d48:	6818      	ldr	r0, [r3, #0]
    5d4a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d4c:	43a8      	bics	r0, r5
    5d4e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5d50:	6818      	ldr	r0, [r3, #0]
    5d52:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d54:	4328      	orrs	r0, r5
    5d56:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    5d58:	6810      	ldr	r0, [r2, #0]
    5d5a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5d5c:	43a8      	bics	r0, r5
    5d5e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5d60:	6818      	ldr	r0, [r3, #0]
    5d62:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d64:	43a8      	bics	r0, r5
    5d66:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5d68:	6818      	ldr	r0, [r3, #0]
    5d6a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d6c:	4328      	orrs	r0, r5
    5d6e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    5d70:	6810      	ldr	r0, [r2, #0]
    5d72:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5d74:	4328      	orrs	r0, r5
    5d76:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5d78:	6818      	ldr	r0, [r3, #0]
    5d7a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d7c:	43a8      	bics	r0, r5
    5d7e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5d80:	6818      	ldr	r0, [r3, #0]
    5d82:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d84:	4328      	orrs	r0, r5
    5d86:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    5d88:	6810      	ldr	r0, [r2, #0]
    5d8a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5d8c:	4328      	orrs	r0, r5
    5d8e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5d90:	6818      	ldr	r0, [r3, #0]
    5d92:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d94:	43a8      	bics	r0, r5
    5d96:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5d98:	6818      	ldr	r0, [r3, #0]
    5d9a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5d9c:	4328      	orrs	r0, r5
    5d9e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    5da0:	6810      	ldr	r0, [r2, #0]
    5da2:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5da4:	4328      	orrs	r0, r5
    5da6:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5da8:	6818      	ldr	r0, [r3, #0]
    5daa:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5dac:	43a8      	bics	r0, r5
    5dae:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    5db0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    5db2:	6818      	ldr	r0, [r3, #0]
    5db4:	4328      	orrs	r0, r5
    5db6:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    5db8:	6810      	ldr	r0, [r2, #0]
    5dba:	6d25      	ldr	r5, [r4, #80]	; 0x50
    5dbc:	4328      	orrs	r0, r5
    5dbe:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    5dc0:	681a      	ldr	r2, [r3, #0]
    5dc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5dc4:	4382      	bics	r2, r0
    5dc6:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    5dc8:	681a      	ldr	r2, [r3, #0]
    5dca:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5dcc:	4302      	orrs	r2, r0
    5dce:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    5dd0:	680b      	ldr	r3, [r1, #0]
    5dd2:	6e22      	ldr	r2, [r4, #96]	; 0x60
    5dd4:	4313      	orrs	r3, r2
    5dd6:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    5dd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5dda:	2b00      	cmp	r3, #0
    5ddc:	da01      	bge.n	5de2 <_ZN16Adafruit_ILI93415beginEm+0x506>
    5dde:	f004 f920 	bl	a022 <_ZN16Adafruit_ILI93415beginEm+0x4746>
    5de2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    5de4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5de6:	6811      	ldr	r1, [r2, #0]
    5de8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5dea:	4381      	bics	r1, r0
    5dec:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5dee:	6819      	ldr	r1, [r3, #0]
    5df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5df2:	4381      	bics	r1, r0
    5df4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5df6:	6819      	ldr	r1, [r3, #0]
    5df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5dfa:	4301      	orrs	r1, r0
    5dfc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5dfe:	6811      	ldr	r1, [r2, #0]
    5e00:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5e02:	4381      	bics	r1, r0
    5e04:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5e06:	6819      	ldr	r1, [r3, #0]
    5e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e0a:	4381      	bics	r1, r0
    5e0c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5e0e:	6819      	ldr	r1, [r3, #0]
    5e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e12:	4301      	orrs	r1, r0
    5e14:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5e16:	6811      	ldr	r1, [r2, #0]
    5e18:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5e1a:	4381      	bics	r1, r0
    5e1c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5e1e:	6819      	ldr	r1, [r3, #0]
    5e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e22:	4381      	bics	r1, r0
    5e24:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5e26:	6819      	ldr	r1, [r3, #0]
    5e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e2a:	4301      	orrs	r1, r0
    5e2c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5e2e:	6811      	ldr	r1, [r2, #0]
    5e30:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5e32:	4381      	bics	r1, r0
    5e34:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5e36:	6819      	ldr	r1, [r3, #0]
    5e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e3a:	4381      	bics	r1, r0
    5e3c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5e3e:	6819      	ldr	r1, [r3, #0]
    5e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e42:	4301      	orrs	r1, r0
    5e44:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5e46:	6811      	ldr	r1, [r2, #0]
    5e48:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5e4a:	4381      	bics	r1, r0
    5e4c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5e4e:	6819      	ldr	r1, [r3, #0]
    5e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e52:	4381      	bics	r1, r0
    5e54:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5e56:	6819      	ldr	r1, [r3, #0]
    5e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e5a:	4301      	orrs	r1, r0
    5e5c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5e5e:	6811      	ldr	r1, [r2, #0]
    5e60:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5e62:	4381      	bics	r1, r0
    5e64:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5e66:	6819      	ldr	r1, [r3, #0]
    5e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e6a:	4381      	bics	r1, r0
    5e6c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5e6e:	6819      	ldr	r1, [r3, #0]
    5e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e72:	4301      	orrs	r1, r0
    5e74:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5e76:	6811      	ldr	r1, [r2, #0]
    5e78:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5e7a:	4381      	bics	r1, r0
    5e7c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5e7e:	6819      	ldr	r1, [r3, #0]
    5e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e82:	4381      	bics	r1, r0
    5e84:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5e86:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5e88:	6819      	ldr	r1, [r3, #0]
    5e8a:	4301      	orrs	r1, r0
    5e8c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5e8e:	6811      	ldr	r1, [r2, #0]
    5e90:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5e92:	4381      	bics	r1, r0
    5e94:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5e96:	681a      	ldr	r2, [r3, #0]
    5e98:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5e9a:	438a      	bics	r2, r1
    5e9c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    5e9e:	681a      	ldr	r2, [r3, #0]
    5ea0:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5ea2:	430a      	orrs	r2, r1
    5ea4:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    5ea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5ea8:	2b00      	cmp	r3, #0
    5eaa:	da01      	bge.n	5eb0 <_ZN16Adafruit_ILI93415beginEm+0x5d4>
    5eac:	f004 f9a4 	bl	a1f8 <_ZN16Adafruit_ILI93415beginEm+0x491c>
    5eb0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    5eb2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5eb4:	6811      	ldr	r1, [r2, #0]
    5eb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5eb8:	4301      	orrs	r1, r0
    5eba:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5ebc:	6819      	ldr	r1, [r3, #0]
    5ebe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ec0:	4381      	bics	r1, r0
    5ec2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5ec4:	6819      	ldr	r1, [r3, #0]
    5ec6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ec8:	4301      	orrs	r1, r0
    5eca:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    5ecc:	6811      	ldr	r1, [r2, #0]
    5ece:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5ed0:	4301      	orrs	r1, r0
    5ed2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5ed4:	6819      	ldr	r1, [r3, #0]
    5ed6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ed8:	4381      	bics	r1, r0
    5eda:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5edc:	6819      	ldr	r1, [r3, #0]
    5ede:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ee0:	4301      	orrs	r1, r0
    5ee2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5ee4:	6811      	ldr	r1, [r2, #0]
    5ee6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5ee8:	4381      	bics	r1, r0
    5eea:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5eec:	6819      	ldr	r1, [r3, #0]
    5eee:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ef0:	4381      	bics	r1, r0
    5ef2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5ef4:	6819      	ldr	r1, [r3, #0]
    5ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ef8:	4301      	orrs	r1, r0
    5efa:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5efc:	6811      	ldr	r1, [r2, #0]
    5efe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5f00:	4381      	bics	r1, r0
    5f02:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5f04:	6819      	ldr	r1, [r3, #0]
    5f06:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5f08:	4381      	bics	r1, r0
    5f0a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5f0c:	6819      	ldr	r1, [r3, #0]
    5f0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5f10:	4301      	orrs	r1, r0
    5f12:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5f14:	6811      	ldr	r1, [r2, #0]
    5f16:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5f18:	4381      	bics	r1, r0
    5f1a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5f1c:	6819      	ldr	r1, [r3, #0]
    5f1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5f20:	4381      	bics	r1, r0
    5f22:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5f24:	6819      	ldr	r1, [r3, #0]
    5f26:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5f28:	4301      	orrs	r1, r0
    5f2a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5f2c:	6811      	ldr	r1, [r2, #0]
    5f2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5f30:	4381      	bics	r1, r0
    5f32:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5f34:	6819      	ldr	r1, [r3, #0]
    5f36:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5f38:	4381      	bics	r1, r0
    5f3a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5f3c:	6819      	ldr	r1, [r3, #0]
    5f3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5f40:	4301      	orrs	r1, r0
    5f42:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5f44:	6811      	ldr	r1, [r2, #0]
    5f46:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5f48:	4381      	bics	r1, r0
    5f4a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5f4c:	6819      	ldr	r1, [r3, #0]
    5f4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5f50:	4381      	bics	r1, r0
    5f52:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5f56:	6819      	ldr	r1, [r3, #0]
    5f58:	4301      	orrs	r1, r0
    5f5a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    5f5c:	6811      	ldr	r1, [r2, #0]
    5f5e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5f60:	4301      	orrs	r1, r0
    5f62:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5f64:	681a      	ldr	r2, [r3, #0]
    5f66:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5f68:	438a      	bics	r2, r1
    5f6a:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    5f6c:	681a      	ldr	r2, [r3, #0]
    5f6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5f70:	430a      	orrs	r2, r1
    5f72:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    5f74:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5f76:	2b00      	cmp	r3, #0
    5f78:	da01      	bge.n	5f7e <_ZN16Adafruit_ILI93415beginEm+0x6a2>
    5f7a:	f004 f943 	bl	a204 <_ZN16Adafruit_ILI93415beginEm+0x4928>
    5f7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    5f80:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5f82:	6811      	ldr	r1, [r2, #0]
    5f84:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5f86:	4381      	bics	r1, r0
    5f88:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5f8a:	6819      	ldr	r1, [r3, #0]
    5f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5f8e:	4381      	bics	r1, r0
    5f90:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5f92:	6819      	ldr	r1, [r3, #0]
    5f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5f96:	4301      	orrs	r1, r0
    5f98:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5f9a:	6811      	ldr	r1, [r2, #0]
    5f9c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5f9e:	4381      	bics	r1, r0
    5fa0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5fa2:	6819      	ldr	r1, [r3, #0]
    5fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5fa6:	4381      	bics	r1, r0
    5fa8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5faa:	6819      	ldr	r1, [r3, #0]
    5fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5fae:	4301      	orrs	r1, r0
    5fb0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    5fb2:	6811      	ldr	r1, [r2, #0]
    5fb4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5fb6:	4301      	orrs	r1, r0
    5fb8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5fba:	6819      	ldr	r1, [r3, #0]
    5fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5fbe:	4381      	bics	r1, r0
    5fc0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5fc2:	6819      	ldr	r1, [r3, #0]
    5fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5fc6:	4301      	orrs	r1, r0
    5fc8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    5fca:	6811      	ldr	r1, [r2, #0]
    5fcc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5fce:	4301      	orrs	r1, r0
    5fd0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5fd2:	6819      	ldr	r1, [r3, #0]
    5fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5fd6:	4381      	bics	r1, r0
    5fd8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5fda:	6819      	ldr	r1, [r3, #0]
    5fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5fde:	4301      	orrs	r1, r0
    5fe0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5fe2:	6811      	ldr	r1, [r2, #0]
    5fe4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5fe6:	4381      	bics	r1, r0
    5fe8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    5fea:	6819      	ldr	r1, [r3, #0]
    5fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5fee:	4381      	bics	r1, r0
    5ff0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    5ff2:	6819      	ldr	r1, [r3, #0]
    5ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5ff6:	4301      	orrs	r1, r0
    5ff8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    5ffa:	6811      	ldr	r1, [r2, #0]
    5ffc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5ffe:	4381      	bics	r1, r0
    6000:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6002:	6819      	ldr	r1, [r3, #0]
    6004:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6006:	4381      	bics	r1, r0
    6008:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    600a:	6819      	ldr	r1, [r3, #0]
    600c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    600e:	4301      	orrs	r1, r0
    6010:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6012:	6811      	ldr	r1, [r2, #0]
    6014:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6016:	4381      	bics	r1, r0
    6018:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    601a:	6819      	ldr	r1, [r3, #0]
    601c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    601e:	4381      	bics	r1, r0
    6020:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6022:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6024:	6819      	ldr	r1, [r3, #0]
    6026:	4301      	orrs	r1, r0
    6028:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    602a:	6811      	ldr	r1, [r2, #0]
    602c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    602e:	4381      	bics	r1, r0
    6030:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6032:	681a      	ldr	r2, [r3, #0]
    6034:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6036:	438a      	bics	r2, r1
    6038:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    603a:	681a      	ldr	r2, [r3, #0]
    603c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    603e:	430a      	orrs	r2, r1
    6040:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    6042:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6044:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6046:	680b      	ldr	r3, [r1, #0]
    6048:	4393      	bics	r3, r2
    604a:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    604c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    604e:	2b00      	cmp	r3, #0
    6050:	da01      	bge.n	6056 <_ZN16Adafruit_ILI93415beginEm+0x77a>
    6052:	f004 f8dd 	bl	a210 <_ZN16Adafruit_ILI93415beginEm+0x4934>
    6056:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    6058:	6d25      	ldr	r5, [r4, #80]	; 0x50
    605a:	6810      	ldr	r0, [r2, #0]
    605c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    605e:	4328      	orrs	r0, r5
    6060:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6062:	6818      	ldr	r0, [r3, #0]
    6064:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6066:	43a8      	bics	r0, r5
    6068:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    606a:	6818      	ldr	r0, [r3, #0]
    606c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    606e:	4328      	orrs	r0, r5
    6070:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    6072:	6810      	ldr	r0, [r2, #0]
    6074:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6076:	4328      	orrs	r0, r5
    6078:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    607a:	6818      	ldr	r0, [r3, #0]
    607c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    607e:	43a8      	bics	r0, r5
    6080:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6082:	6818      	ldr	r0, [r3, #0]
    6084:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6086:	4328      	orrs	r0, r5
    6088:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    608a:	6810      	ldr	r0, [r2, #0]
    608c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    608e:	4328      	orrs	r0, r5
    6090:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6092:	6818      	ldr	r0, [r3, #0]
    6094:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6096:	43a8      	bics	r0, r5
    6098:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    609a:	6818      	ldr	r0, [r3, #0]
    609c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    609e:	4328      	orrs	r0, r5
    60a0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    60a2:	6810      	ldr	r0, [r2, #0]
    60a4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    60a6:	43a8      	bics	r0, r5
    60a8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    60aa:	6818      	ldr	r0, [r3, #0]
    60ac:	6da5      	ldr	r5, [r4, #88]	; 0x58
    60ae:	43a8      	bics	r0, r5
    60b0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    60b2:	6818      	ldr	r0, [r3, #0]
    60b4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    60b6:	4328      	orrs	r0, r5
    60b8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    60ba:	6810      	ldr	r0, [r2, #0]
    60bc:	6d25      	ldr	r5, [r4, #80]	; 0x50
    60be:	4328      	orrs	r0, r5
    60c0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    60c2:	6818      	ldr	r0, [r3, #0]
    60c4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    60c6:	43a8      	bics	r0, r5
    60c8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    60ca:	6818      	ldr	r0, [r3, #0]
    60cc:	6da5      	ldr	r5, [r4, #88]	; 0x58
    60ce:	4328      	orrs	r0, r5
    60d0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    60d2:	6810      	ldr	r0, [r2, #0]
    60d4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    60d6:	4328      	orrs	r0, r5
    60d8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    60da:	6818      	ldr	r0, [r3, #0]
    60dc:	6da5      	ldr	r5, [r4, #88]	; 0x58
    60de:	43a8      	bics	r0, r5
    60e0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    60e2:	6818      	ldr	r0, [r3, #0]
    60e4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    60e6:	4328      	orrs	r0, r5
    60e8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    60ea:	6810      	ldr	r0, [r2, #0]
    60ec:	6d25      	ldr	r5, [r4, #80]	; 0x50
    60ee:	43a8      	bics	r0, r5
    60f0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    60f2:	6818      	ldr	r0, [r3, #0]
    60f4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    60f6:	43a8      	bics	r0, r5
    60f8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    60fa:	6da5      	ldr	r5, [r4, #88]	; 0x58
    60fc:	6818      	ldr	r0, [r3, #0]
    60fe:	4328      	orrs	r0, r5
    6100:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    6102:	6810      	ldr	r0, [r2, #0]
    6104:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6106:	4328      	orrs	r0, r5
    6108:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    610a:	681a      	ldr	r2, [r3, #0]
    610c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    610e:	4382      	bics	r2, r0
    6110:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6112:	681a      	ldr	r2, [r3, #0]
    6114:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6116:	4302      	orrs	r2, r0
    6118:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    611a:	680b      	ldr	r3, [r1, #0]
    611c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    611e:	4313      	orrs	r3, r2
    6120:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    6122:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6124:	2b00      	cmp	r3, #0
    6126:	da01      	bge.n	612c <_ZN16Adafruit_ILI93415beginEm+0x850>
    6128:	f003 ff4a 	bl	9fc0 <_ZN16Adafruit_ILI93415beginEm+0x46e4>
    612c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    612e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6130:	6811      	ldr	r1, [r2, #0]
    6132:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6134:	4381      	bics	r1, r0
    6136:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6138:	6819      	ldr	r1, [r3, #0]
    613a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    613c:	4381      	bics	r1, r0
    613e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6140:	6819      	ldr	r1, [r3, #0]
    6142:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6144:	4301      	orrs	r1, r0
    6146:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6148:	6811      	ldr	r1, [r2, #0]
    614a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    614c:	4301      	orrs	r1, r0
    614e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6150:	6819      	ldr	r1, [r3, #0]
    6152:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6154:	4381      	bics	r1, r0
    6156:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6158:	6819      	ldr	r1, [r3, #0]
    615a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    615c:	4301      	orrs	r1, r0
    615e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6160:	6811      	ldr	r1, [r2, #0]
    6162:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6164:	4301      	orrs	r1, r0
    6166:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6168:	6819      	ldr	r1, [r3, #0]
    616a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    616c:	4381      	bics	r1, r0
    616e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6170:	6819      	ldr	r1, [r3, #0]
    6172:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6174:	4301      	orrs	r1, r0
    6176:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6178:	6811      	ldr	r1, [r2, #0]
    617a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    617c:	4381      	bics	r1, r0
    617e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6180:	6819      	ldr	r1, [r3, #0]
    6182:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6184:	4381      	bics	r1, r0
    6186:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6188:	6819      	ldr	r1, [r3, #0]
    618a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    618c:	4301      	orrs	r1, r0
    618e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6190:	6811      	ldr	r1, [r2, #0]
    6192:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6194:	4381      	bics	r1, r0
    6196:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6198:	6819      	ldr	r1, [r3, #0]
    619a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    619c:	4381      	bics	r1, r0
    619e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    61a0:	6819      	ldr	r1, [r3, #0]
    61a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    61a4:	4301      	orrs	r1, r0
    61a6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    61a8:	6811      	ldr	r1, [r2, #0]
    61aa:	6d20      	ldr	r0, [r4, #80]	; 0x50
    61ac:	4301      	orrs	r1, r0
    61ae:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    61b0:	6819      	ldr	r1, [r3, #0]
    61b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    61b4:	4381      	bics	r1, r0
    61b6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    61b8:	6819      	ldr	r1, [r3, #0]
    61ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
    61bc:	4301      	orrs	r1, r0
    61be:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    61c0:	6811      	ldr	r1, [r2, #0]
    61c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    61c4:	4381      	bics	r1, r0
    61c6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    61c8:	6819      	ldr	r1, [r3, #0]
    61ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
    61cc:	4381      	bics	r1, r0
    61ce:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    61d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    61d2:	6819      	ldr	r1, [r3, #0]
    61d4:	4301      	orrs	r1, r0
    61d6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    61d8:	6811      	ldr	r1, [r2, #0]
    61da:	6d20      	ldr	r0, [r4, #80]	; 0x50
    61dc:	4381      	bics	r1, r0
    61de:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    61e0:	681a      	ldr	r2, [r3, #0]
    61e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
    61e4:	438a      	bics	r2, r1
    61e6:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    61e8:	681a      	ldr	r2, [r3, #0]
    61ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
    61ec:	430a      	orrs	r2, r1
    61ee:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    61f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    61f2:	2b00      	cmp	r3, #0
    61f4:	da01      	bge.n	61fa <_ZN16Adafruit_ILI93415beginEm+0x91e>
    61f6:	f003 fee9 	bl	9fcc <_ZN16Adafruit_ILI93415beginEm+0x46f0>
    61fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    61fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    61fe:	6811      	ldr	r1, [r2, #0]
    6200:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6202:	4381      	bics	r1, r0
    6204:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6206:	6819      	ldr	r1, [r3, #0]
    6208:	6da0      	ldr	r0, [r4, #88]	; 0x58
    620a:	4381      	bics	r1, r0
    620c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    620e:	6819      	ldr	r1, [r3, #0]
    6210:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6212:	4301      	orrs	r1, r0
    6214:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6216:	6811      	ldr	r1, [r2, #0]
    6218:	6d20      	ldr	r0, [r4, #80]	; 0x50
    621a:	4381      	bics	r1, r0
    621c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    621e:	6819      	ldr	r1, [r3, #0]
    6220:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6222:	4381      	bics	r1, r0
    6224:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6226:	6819      	ldr	r1, [r3, #0]
    6228:	6da0      	ldr	r0, [r4, #88]	; 0x58
    622a:	4301      	orrs	r1, r0
    622c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    622e:	6811      	ldr	r1, [r2, #0]
    6230:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6232:	4381      	bics	r1, r0
    6234:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6236:	6819      	ldr	r1, [r3, #0]
    6238:	6da0      	ldr	r0, [r4, #88]	; 0x58
    623a:	4381      	bics	r1, r0
    623c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    623e:	6819      	ldr	r1, [r3, #0]
    6240:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6242:	4301      	orrs	r1, r0
    6244:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6246:	6811      	ldr	r1, [r2, #0]
    6248:	6d20      	ldr	r0, [r4, #80]	; 0x50
    624a:	4381      	bics	r1, r0
    624c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    624e:	6819      	ldr	r1, [r3, #0]
    6250:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6252:	4381      	bics	r1, r0
    6254:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6256:	6819      	ldr	r1, [r3, #0]
    6258:	6da0      	ldr	r0, [r4, #88]	; 0x58
    625a:	4301      	orrs	r1, r0
    625c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    625e:	6811      	ldr	r1, [r2, #0]
    6260:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6262:	4381      	bics	r1, r0
    6264:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6266:	6819      	ldr	r1, [r3, #0]
    6268:	6da0      	ldr	r0, [r4, #88]	; 0x58
    626a:	4381      	bics	r1, r0
    626c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    626e:	6819      	ldr	r1, [r3, #0]
    6270:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6272:	4301      	orrs	r1, r0
    6274:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6276:	6811      	ldr	r1, [r2, #0]
    6278:	6d20      	ldr	r0, [r4, #80]	; 0x50
    627a:	4381      	bics	r1, r0
    627c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    627e:	6819      	ldr	r1, [r3, #0]
    6280:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6282:	4381      	bics	r1, r0
    6284:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6286:	6819      	ldr	r1, [r3, #0]
    6288:	6da0      	ldr	r0, [r4, #88]	; 0x58
    628a:	4301      	orrs	r1, r0
    628c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    628e:	6811      	ldr	r1, [r2, #0]
    6290:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6292:	4301      	orrs	r1, r0
    6294:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6296:	6819      	ldr	r1, [r3, #0]
    6298:	6da0      	ldr	r0, [r4, #88]	; 0x58
    629a:	4381      	bics	r1, r0
    629c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    629e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    62a0:	6819      	ldr	r1, [r3, #0]
    62a2:	4301      	orrs	r1, r0
    62a4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    62a6:	6811      	ldr	r1, [r2, #0]
    62a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    62aa:	4301      	orrs	r1, r0
    62ac:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    62ae:	681a      	ldr	r2, [r3, #0]
    62b0:	6da1      	ldr	r1, [r4, #88]	; 0x58
    62b2:	438a      	bics	r2, r1
    62b4:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    62b6:	681a      	ldr	r2, [r3, #0]
    62b8:	6da1      	ldr	r1, [r4, #88]	; 0x58
    62ba:	430a      	orrs	r2, r1
    62bc:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    62be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    62c0:	2b00      	cmp	r3, #0
    62c2:	da01      	bge.n	62c8 <_ZN16Adafruit_ILI93415beginEm+0x9ec>
    62c4:	f003 fe88 	bl	9fd8 <_ZN16Adafruit_ILI93415beginEm+0x46fc>
    62c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    62ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
    62cc:	6811      	ldr	r1, [r2, #0]
    62ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
    62d0:	4381      	bics	r1, r0
    62d2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    62d4:	6819      	ldr	r1, [r3, #0]
    62d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    62d8:	4381      	bics	r1, r0
    62da:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    62dc:	6819      	ldr	r1, [r3, #0]
    62de:	6da0      	ldr	r0, [r4, #88]	; 0x58
    62e0:	4301      	orrs	r1, r0
    62e2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    62e4:	6811      	ldr	r1, [r2, #0]
    62e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    62e8:	4381      	bics	r1, r0
    62ea:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    62ec:	6819      	ldr	r1, [r3, #0]
    62ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
    62f0:	4381      	bics	r1, r0
    62f2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    62f4:	6819      	ldr	r1, [r3, #0]
    62f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    62f8:	4301      	orrs	r1, r0
    62fa:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    62fc:	6811      	ldr	r1, [r2, #0]
    62fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6300:	4381      	bics	r1, r0
    6302:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6304:	6819      	ldr	r1, [r3, #0]
    6306:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6308:	4381      	bics	r1, r0
    630a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    630c:	6819      	ldr	r1, [r3, #0]
    630e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6310:	4301      	orrs	r1, r0
    6312:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6314:	6811      	ldr	r1, [r2, #0]
    6316:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6318:	4301      	orrs	r1, r0
    631a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    631c:	6819      	ldr	r1, [r3, #0]
    631e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6320:	4381      	bics	r1, r0
    6322:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6324:	6819      	ldr	r1, [r3, #0]
    6326:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6328:	4301      	orrs	r1, r0
    632a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    632c:	6811      	ldr	r1, [r2, #0]
    632e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6330:	4381      	bics	r1, r0
    6332:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6334:	6819      	ldr	r1, [r3, #0]
    6336:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6338:	4381      	bics	r1, r0
    633a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    633c:	6819      	ldr	r1, [r3, #0]
    633e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6340:	4301      	orrs	r1, r0
    6342:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6344:	6811      	ldr	r1, [r2, #0]
    6346:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6348:	4381      	bics	r1, r0
    634a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    634c:	6819      	ldr	r1, [r3, #0]
    634e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6350:	4381      	bics	r1, r0
    6352:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6354:	6819      	ldr	r1, [r3, #0]
    6356:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6358:	4301      	orrs	r1, r0
    635a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    635c:	6811      	ldr	r1, [r2, #0]
    635e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6360:	4301      	orrs	r1, r0
    6362:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6364:	6819      	ldr	r1, [r3, #0]
    6366:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6368:	4381      	bics	r1, r0
    636a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    636c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    636e:	6819      	ldr	r1, [r3, #0]
    6370:	4301      	orrs	r1, r0
    6372:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6374:	6811      	ldr	r1, [r2, #0]
    6376:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6378:	4381      	bics	r1, r0
    637a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    637c:	681a      	ldr	r2, [r3, #0]
    637e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6380:	438a      	bics	r2, r1
    6382:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6384:	681a      	ldr	r2, [r3, #0]
    6386:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6388:	430a      	orrs	r2, r1
    638a:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    638c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    638e:	2b00      	cmp	r3, #0
    6390:	da01      	bge.n	6396 <_ZN16Adafruit_ILI93415beginEm+0xaba>
    6392:	f003 fe27 	bl	9fe4 <_ZN16Adafruit_ILI93415beginEm+0x4708>
    6396:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    6398:	6d20      	ldr	r0, [r4, #80]	; 0x50
    639a:	6811      	ldr	r1, [r2, #0]
    639c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    639e:	4301      	orrs	r1, r0
    63a0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    63a2:	6819      	ldr	r1, [r3, #0]
    63a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    63a6:	4381      	bics	r1, r0
    63a8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    63aa:	6819      	ldr	r1, [r3, #0]
    63ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    63ae:	4301      	orrs	r1, r0
    63b0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    63b2:	6811      	ldr	r1, [r2, #0]
    63b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    63b6:	4381      	bics	r1, r0
    63b8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    63ba:	6819      	ldr	r1, [r3, #0]
    63bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    63be:	4381      	bics	r1, r0
    63c0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    63c2:	6819      	ldr	r1, [r3, #0]
    63c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    63c6:	4301      	orrs	r1, r0
    63c8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    63ca:	6811      	ldr	r1, [r2, #0]
    63cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    63ce:	4381      	bics	r1, r0
    63d0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    63d2:	6819      	ldr	r1, [r3, #0]
    63d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    63d6:	4381      	bics	r1, r0
    63d8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    63da:	6819      	ldr	r1, [r3, #0]
    63dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    63de:	4301      	orrs	r1, r0
    63e0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    63e2:	6811      	ldr	r1, [r2, #0]
    63e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    63e6:	4381      	bics	r1, r0
    63e8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    63ea:	6819      	ldr	r1, [r3, #0]
    63ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    63ee:	4381      	bics	r1, r0
    63f0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    63f2:	6819      	ldr	r1, [r3, #0]
    63f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    63f6:	4301      	orrs	r1, r0
    63f8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    63fa:	6811      	ldr	r1, [r2, #0]
    63fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    63fe:	4381      	bics	r1, r0
    6400:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6402:	6819      	ldr	r1, [r3, #0]
    6404:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6406:	4381      	bics	r1, r0
    6408:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    640a:	6819      	ldr	r1, [r3, #0]
    640c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    640e:	4301      	orrs	r1, r0
    6410:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6412:	6811      	ldr	r1, [r2, #0]
    6414:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6416:	4381      	bics	r1, r0
    6418:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    641a:	6819      	ldr	r1, [r3, #0]
    641c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    641e:	4381      	bics	r1, r0
    6420:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6422:	6819      	ldr	r1, [r3, #0]
    6424:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6426:	4301      	orrs	r1, r0
    6428:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    642a:	6811      	ldr	r1, [r2, #0]
    642c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    642e:	4381      	bics	r1, r0
    6430:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6432:	6819      	ldr	r1, [r3, #0]
    6434:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6436:	4381      	bics	r1, r0
    6438:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    643a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    643c:	6819      	ldr	r1, [r3, #0]
    643e:	4301      	orrs	r1, r0
    6440:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6442:	6811      	ldr	r1, [r2, #0]
    6444:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6446:	4301      	orrs	r1, r0
    6448:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    644a:	681a      	ldr	r2, [r3, #0]
    644c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    644e:	438a      	bics	r2, r1
    6450:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6452:	681a      	ldr	r2, [r3, #0]
    6454:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6456:	430a      	orrs	r2, r1
    6458:	601a      	str	r2, [r3, #0]
    writeCommand(0xE8);
    645a:	21e8      	movs	r1, #232	; 0xe8
    645c:	0020      	movs	r0, r4
    645e:	f7ff f987 	bl	5770 <_ZN16Adafruit_ILI934112writeCommandEh>
    if(_sclk < 0){
    6462:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6464:	2b00      	cmp	r3, #0
    6466:	da01      	bge.n	646c <_ZN16Adafruit_ILI93415beginEm+0xb90>
    6468:	f003 fdc2 	bl	9ff0 <_ZN16Adafruit_ILI93415beginEm+0x4714>
    646c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    646e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6470:	6811      	ldr	r1, [r2, #0]
    6472:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6474:	4301      	orrs	r1, r0
    6476:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6478:	6819      	ldr	r1, [r3, #0]
    647a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    647c:	4381      	bics	r1, r0
    647e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6480:	6819      	ldr	r1, [r3, #0]
    6482:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6484:	4301      	orrs	r1, r0
    6486:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6488:	6811      	ldr	r1, [r2, #0]
    648a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    648c:	4381      	bics	r1, r0
    648e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6490:	6819      	ldr	r1, [r3, #0]
    6492:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6494:	4381      	bics	r1, r0
    6496:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6498:	6819      	ldr	r1, [r3, #0]
    649a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    649c:	4301      	orrs	r1, r0
    649e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    64a0:	6811      	ldr	r1, [r2, #0]
    64a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    64a4:	4381      	bics	r1, r0
    64a6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    64a8:	6819      	ldr	r1, [r3, #0]
    64aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    64ac:	4381      	bics	r1, r0
    64ae:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    64b0:	6819      	ldr	r1, [r3, #0]
    64b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    64b4:	4301      	orrs	r1, r0
    64b6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    64b8:	6811      	ldr	r1, [r2, #0]
    64ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
    64bc:	4381      	bics	r1, r0
    64be:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    64c0:	6819      	ldr	r1, [r3, #0]
    64c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    64c4:	4381      	bics	r1, r0
    64c6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    64c8:	6819      	ldr	r1, [r3, #0]
    64ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
    64cc:	4301      	orrs	r1, r0
    64ce:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    64d0:	6811      	ldr	r1, [r2, #0]
    64d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    64d4:	4381      	bics	r1, r0
    64d6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    64d8:	6819      	ldr	r1, [r3, #0]
    64da:	6da0      	ldr	r0, [r4, #88]	; 0x58
    64dc:	4381      	bics	r1, r0
    64de:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    64e0:	6819      	ldr	r1, [r3, #0]
    64e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    64e4:	4301      	orrs	r1, r0
    64e6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    64e8:	6811      	ldr	r1, [r2, #0]
    64ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
    64ec:	4301      	orrs	r1, r0
    64ee:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    64f0:	6819      	ldr	r1, [r3, #0]
    64f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    64f4:	4381      	bics	r1, r0
    64f6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    64f8:	6819      	ldr	r1, [r3, #0]
    64fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    64fc:	4301      	orrs	r1, r0
    64fe:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6500:	6811      	ldr	r1, [r2, #0]
    6502:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6504:	4381      	bics	r1, r0
    6506:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6508:	6819      	ldr	r1, [r3, #0]
    650a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    650c:	4381      	bics	r1, r0
    650e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6510:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6512:	6819      	ldr	r1, [r3, #0]
    6514:	4301      	orrs	r1, r0
    6516:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6518:	6811      	ldr	r1, [r2, #0]
    651a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    651c:	4301      	orrs	r1, r0
    651e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6520:	681a      	ldr	r2, [r3, #0]
    6522:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6524:	438a      	bics	r2, r1
    6526:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6528:	681a      	ldr	r2, [r3, #0]
    652a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    652c:	430a      	orrs	r2, r1
    652e:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    6530:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6532:	2b00      	cmp	r3, #0
    6534:	da01      	bge.n	653a <_ZN16Adafruit_ILI93415beginEm+0xc5e>
    6536:	f003 fdf5 	bl	a124 <_ZN16Adafruit_ILI93415beginEm+0x4848>
    653a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    653c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    653e:	6811      	ldr	r1, [r2, #0]
    6540:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6542:	4381      	bics	r1, r0
    6544:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6546:	6819      	ldr	r1, [r3, #0]
    6548:	6da0      	ldr	r0, [r4, #88]	; 0x58
    654a:	4381      	bics	r1, r0
    654c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    654e:	6819      	ldr	r1, [r3, #0]
    6550:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6552:	4301      	orrs	r1, r0
    6554:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6556:	6811      	ldr	r1, [r2, #0]
    6558:	6d20      	ldr	r0, [r4, #80]	; 0x50
    655a:	4381      	bics	r1, r0
    655c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    655e:	6819      	ldr	r1, [r3, #0]
    6560:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6562:	4381      	bics	r1, r0
    6564:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6566:	6819      	ldr	r1, [r3, #0]
    6568:	6da0      	ldr	r0, [r4, #88]	; 0x58
    656a:	4301      	orrs	r1, r0
    656c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    656e:	6811      	ldr	r1, [r2, #0]
    6570:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6572:	4381      	bics	r1, r0
    6574:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6576:	6819      	ldr	r1, [r3, #0]
    6578:	6da0      	ldr	r0, [r4, #88]	; 0x58
    657a:	4381      	bics	r1, r0
    657c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    657e:	6819      	ldr	r1, [r3, #0]
    6580:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6582:	4301      	orrs	r1, r0
    6584:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6586:	6811      	ldr	r1, [r2, #0]
    6588:	6d20      	ldr	r0, [r4, #80]	; 0x50
    658a:	4381      	bics	r1, r0
    658c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    658e:	6819      	ldr	r1, [r3, #0]
    6590:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6592:	4381      	bics	r1, r0
    6594:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6596:	6819      	ldr	r1, [r3, #0]
    6598:	6da0      	ldr	r0, [r4, #88]	; 0x58
    659a:	4301      	orrs	r1, r0
    659c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    659e:	6811      	ldr	r1, [r2, #0]
    65a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    65a2:	4381      	bics	r1, r0
    65a4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    65a6:	6819      	ldr	r1, [r3, #0]
    65a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    65aa:	4381      	bics	r1, r0
    65ac:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    65ae:	6819      	ldr	r1, [r3, #0]
    65b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    65b2:	4301      	orrs	r1, r0
    65b4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    65b6:	6811      	ldr	r1, [r2, #0]
    65b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    65ba:	4381      	bics	r1, r0
    65bc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    65be:	6819      	ldr	r1, [r3, #0]
    65c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    65c2:	4381      	bics	r1, r0
    65c4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    65c6:	6819      	ldr	r1, [r3, #0]
    65c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    65ca:	4301      	orrs	r1, r0
    65cc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    65ce:	6811      	ldr	r1, [r2, #0]
    65d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    65d2:	4381      	bics	r1, r0
    65d4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    65d6:	6819      	ldr	r1, [r3, #0]
    65d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    65da:	4381      	bics	r1, r0
    65dc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    65de:	6da0      	ldr	r0, [r4, #88]	; 0x58
    65e0:	6819      	ldr	r1, [r3, #0]
    65e2:	4301      	orrs	r1, r0
    65e4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    65e6:	6811      	ldr	r1, [r2, #0]
    65e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    65ea:	4381      	bics	r1, r0
    65ec:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    65ee:	681a      	ldr	r2, [r3, #0]
    65f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
    65f2:	438a      	bics	r2, r1
    65f4:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    65f6:	681a      	ldr	r2, [r3, #0]
    65f8:	6da1      	ldr	r1, [r4, #88]	; 0x58
    65fa:	430a      	orrs	r2, r1
    65fc:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    65fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6600:	2b00      	cmp	r3, #0
    6602:	da01      	bge.n	6608 <_ZN16Adafruit_ILI93415beginEm+0xd2c>
    6604:	f003 fd94 	bl	a130 <_ZN16Adafruit_ILI93415beginEm+0x4854>
    6608:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    660a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    660c:	6811      	ldr	r1, [r2, #0]
    660e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6610:	4381      	bics	r1, r0
    6612:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6614:	6819      	ldr	r1, [r3, #0]
    6616:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6618:	4381      	bics	r1, r0
    661a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    661c:	6819      	ldr	r1, [r3, #0]
    661e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6620:	4301      	orrs	r1, r0
    6622:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6624:	6811      	ldr	r1, [r2, #0]
    6626:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6628:	4301      	orrs	r1, r0
    662a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    662c:	6819      	ldr	r1, [r3, #0]
    662e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6630:	4381      	bics	r1, r0
    6632:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6634:	6819      	ldr	r1, [r3, #0]
    6636:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6638:	4301      	orrs	r1, r0
    663a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    663c:	6811      	ldr	r1, [r2, #0]
    663e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6640:	4301      	orrs	r1, r0
    6642:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6644:	6819      	ldr	r1, [r3, #0]
    6646:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6648:	4381      	bics	r1, r0
    664a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    664c:	6819      	ldr	r1, [r3, #0]
    664e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6650:	4301      	orrs	r1, r0
    6652:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6654:	6811      	ldr	r1, [r2, #0]
    6656:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6658:	4301      	orrs	r1, r0
    665a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    665c:	6819      	ldr	r1, [r3, #0]
    665e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6660:	4381      	bics	r1, r0
    6662:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6664:	6819      	ldr	r1, [r3, #0]
    6666:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6668:	4301      	orrs	r1, r0
    666a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    666c:	6811      	ldr	r1, [r2, #0]
    666e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6670:	4301      	orrs	r1, r0
    6672:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6674:	6819      	ldr	r1, [r3, #0]
    6676:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6678:	4381      	bics	r1, r0
    667a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    667c:	6819      	ldr	r1, [r3, #0]
    667e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6680:	4301      	orrs	r1, r0
    6682:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6684:	6811      	ldr	r1, [r2, #0]
    6686:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6688:	4381      	bics	r1, r0
    668a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    668c:	6819      	ldr	r1, [r3, #0]
    668e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6690:	4381      	bics	r1, r0
    6692:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6694:	6819      	ldr	r1, [r3, #0]
    6696:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6698:	4301      	orrs	r1, r0
    669a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    669c:	6811      	ldr	r1, [r2, #0]
    669e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    66a0:	4381      	bics	r1, r0
    66a2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    66a4:	6819      	ldr	r1, [r3, #0]
    66a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    66a8:	4381      	bics	r1, r0
    66aa:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    66ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    66ae:	6819      	ldr	r1, [r3, #0]
    66b0:	4301      	orrs	r1, r0
    66b2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    66b4:	6811      	ldr	r1, [r2, #0]
    66b6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    66b8:	4381      	bics	r1, r0
    66ba:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    66bc:	681a      	ldr	r2, [r3, #0]
    66be:	6da1      	ldr	r1, [r4, #88]	; 0x58
    66c0:	438a      	bics	r2, r1
    66c2:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    66c4:	681a      	ldr	r2, [r3, #0]
    66c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    66c8:	430a      	orrs	r2, r1
    66ca:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    66cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    66ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
    66d0:	680b      	ldr	r3, [r1, #0]
    66d2:	4393      	bics	r3, r2
    66d4:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    66d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    66d8:	2b00      	cmp	r3, #0
    66da:	da01      	bge.n	66e0 <_ZN16Adafruit_ILI93415beginEm+0xe04>
    66dc:	f003 fd2e 	bl	a13c <_ZN16Adafruit_ILI93415beginEm+0x4860>
    66e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    66e2:	6d25      	ldr	r5, [r4, #80]	; 0x50
    66e4:	6810      	ldr	r0, [r2, #0]
    66e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    66e8:	4328      	orrs	r0, r5
    66ea:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    66ec:	6818      	ldr	r0, [r3, #0]
    66ee:	6da5      	ldr	r5, [r4, #88]	; 0x58
    66f0:	43a8      	bics	r0, r5
    66f2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    66f4:	6818      	ldr	r0, [r3, #0]
    66f6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    66f8:	4328      	orrs	r0, r5
    66fa:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    66fc:	6810      	ldr	r0, [r2, #0]
    66fe:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6700:	4328      	orrs	r0, r5
    6702:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6704:	6818      	ldr	r0, [r3, #0]
    6706:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6708:	43a8      	bics	r0, r5
    670a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    670c:	6818      	ldr	r0, [r3, #0]
    670e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6710:	4328      	orrs	r0, r5
    6712:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    6714:	6810      	ldr	r0, [r2, #0]
    6716:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6718:	43a8      	bics	r0, r5
    671a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    671c:	6818      	ldr	r0, [r3, #0]
    671e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6720:	43a8      	bics	r0, r5
    6722:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6724:	6818      	ldr	r0, [r3, #0]
    6726:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6728:	4328      	orrs	r0, r5
    672a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    672c:	6810      	ldr	r0, [r2, #0]
    672e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6730:	43a8      	bics	r0, r5
    6732:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6734:	6818      	ldr	r0, [r3, #0]
    6736:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6738:	43a8      	bics	r0, r5
    673a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    673c:	6818      	ldr	r0, [r3, #0]
    673e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6740:	4328      	orrs	r0, r5
    6742:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    6744:	6810      	ldr	r0, [r2, #0]
    6746:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6748:	4328      	orrs	r0, r5
    674a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    674c:	6818      	ldr	r0, [r3, #0]
    674e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6750:	43a8      	bics	r0, r5
    6752:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6754:	6818      	ldr	r0, [r3, #0]
    6756:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6758:	4328      	orrs	r0, r5
    675a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    675c:	6810      	ldr	r0, [r2, #0]
    675e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6760:	43a8      	bics	r0, r5
    6762:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6764:	6818      	ldr	r0, [r3, #0]
    6766:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6768:	43a8      	bics	r0, r5
    676a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    676c:	6818      	ldr	r0, [r3, #0]
    676e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6770:	4328      	orrs	r0, r5
    6772:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    6774:	6810      	ldr	r0, [r2, #0]
    6776:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6778:	4328      	orrs	r0, r5
    677a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    677c:	6818      	ldr	r0, [r3, #0]
    677e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6780:	43a8      	bics	r0, r5
    6782:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6784:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6786:	6818      	ldr	r0, [r3, #0]
    6788:	4328      	orrs	r0, r5
    678a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    678c:	6810      	ldr	r0, [r2, #0]
    678e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6790:	4328      	orrs	r0, r5
    6792:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6794:	681a      	ldr	r2, [r3, #0]
    6796:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6798:	4382      	bics	r2, r0
    679a:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    679c:	681a      	ldr	r2, [r3, #0]
    679e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    67a0:	4302      	orrs	r2, r0
    67a2:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    67a4:	680b      	ldr	r3, [r1, #0]
    67a6:	6e22      	ldr	r2, [r4, #96]	; 0x60
    67a8:	4313      	orrs	r3, r2
    67aa:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    67ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
    67ae:	2b00      	cmp	r3, #0
    67b0:	da01      	bge.n	67b6 <_ZN16Adafruit_ILI93415beginEm+0xeda>
    67b2:	f003 fcca 	bl	a14a <_ZN16Adafruit_ILI93415beginEm+0x486e>
    67b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    67b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    67ba:	6811      	ldr	r1, [r2, #0]
    67bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    67be:	4381      	bics	r1, r0
    67c0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    67c2:	6819      	ldr	r1, [r3, #0]
    67c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    67c6:	4381      	bics	r1, r0
    67c8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    67ca:	6819      	ldr	r1, [r3, #0]
    67cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    67ce:	4301      	orrs	r1, r0
    67d0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    67d2:	6811      	ldr	r1, [r2, #0]
    67d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    67d6:	4381      	bics	r1, r0
    67d8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    67da:	6819      	ldr	r1, [r3, #0]
    67dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    67de:	4381      	bics	r1, r0
    67e0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    67e2:	6819      	ldr	r1, [r3, #0]
    67e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    67e6:	4301      	orrs	r1, r0
    67e8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    67ea:	6811      	ldr	r1, [r2, #0]
    67ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
    67ee:	4301      	orrs	r1, r0
    67f0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    67f2:	6819      	ldr	r1, [r3, #0]
    67f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    67f6:	4381      	bics	r1, r0
    67f8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    67fa:	6819      	ldr	r1, [r3, #0]
    67fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    67fe:	4301      	orrs	r1, r0
    6800:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6802:	6811      	ldr	r1, [r2, #0]
    6804:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6806:	4301      	orrs	r1, r0
    6808:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    680a:	6819      	ldr	r1, [r3, #0]
    680c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    680e:	4381      	bics	r1, r0
    6810:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6812:	6819      	ldr	r1, [r3, #0]
    6814:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6816:	4301      	orrs	r1, r0
    6818:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    681a:	6811      	ldr	r1, [r2, #0]
    681c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    681e:	4301      	orrs	r1, r0
    6820:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6822:	6819      	ldr	r1, [r3, #0]
    6824:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6826:	4381      	bics	r1, r0
    6828:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    682a:	6819      	ldr	r1, [r3, #0]
    682c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    682e:	4301      	orrs	r1, r0
    6830:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6832:	6811      	ldr	r1, [r2, #0]
    6834:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6836:	4381      	bics	r1, r0
    6838:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    683a:	6819      	ldr	r1, [r3, #0]
    683c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    683e:	4381      	bics	r1, r0
    6840:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6842:	6819      	ldr	r1, [r3, #0]
    6844:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6846:	4301      	orrs	r1, r0
    6848:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    684a:	6811      	ldr	r1, [r2, #0]
    684c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    684e:	4381      	bics	r1, r0
    6850:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6852:	6819      	ldr	r1, [r3, #0]
    6854:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6856:	4381      	bics	r1, r0
    6858:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    685a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    685c:	6819      	ldr	r1, [r3, #0]
    685e:	4301      	orrs	r1, r0
    6860:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6862:	6811      	ldr	r1, [r2, #0]
    6864:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6866:	4301      	orrs	r1, r0
    6868:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    686a:	681a      	ldr	r2, [r3, #0]
    686c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    686e:	438a      	bics	r2, r1
    6870:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6872:	681a      	ldr	r2, [r3, #0]
    6874:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6876:	430a      	orrs	r2, r1
    6878:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    687a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    687c:	2b00      	cmp	r3, #0
    687e:	da01      	bge.n	6884 <_ZN16Adafruit_ILI93415beginEm+0xfa8>
    6880:	f003 fc69 	bl	a156 <_ZN16Adafruit_ILI93415beginEm+0x487a>
    6884:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    6886:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6888:	6811      	ldr	r1, [r2, #0]
    688a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    688c:	4381      	bics	r1, r0
    688e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6890:	6819      	ldr	r1, [r3, #0]
    6892:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6894:	4381      	bics	r1, r0
    6896:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6898:	6819      	ldr	r1, [r3, #0]
    689a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    689c:	4301      	orrs	r1, r0
    689e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    68a0:	6811      	ldr	r1, [r2, #0]
    68a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    68a4:	4381      	bics	r1, r0
    68a6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    68a8:	6819      	ldr	r1, [r3, #0]
    68aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    68ac:	4381      	bics	r1, r0
    68ae:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    68b0:	6819      	ldr	r1, [r3, #0]
    68b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    68b4:	4301      	orrs	r1, r0
    68b6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    68b8:	6811      	ldr	r1, [r2, #0]
    68ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
    68bc:	4301      	orrs	r1, r0
    68be:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    68c0:	6819      	ldr	r1, [r3, #0]
    68c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    68c4:	4381      	bics	r1, r0
    68c6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    68c8:	6819      	ldr	r1, [r3, #0]
    68ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
    68cc:	4301      	orrs	r1, r0
    68ce:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    68d0:	6811      	ldr	r1, [r2, #0]
    68d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    68d4:	4381      	bics	r1, r0
    68d6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    68d8:	6819      	ldr	r1, [r3, #0]
    68da:	6da0      	ldr	r0, [r4, #88]	; 0x58
    68dc:	4381      	bics	r1, r0
    68de:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    68e0:	6819      	ldr	r1, [r3, #0]
    68e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    68e4:	4301      	orrs	r1, r0
    68e6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    68e8:	6811      	ldr	r1, [r2, #0]
    68ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
    68ec:	4301      	orrs	r1, r0
    68ee:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    68f0:	6819      	ldr	r1, [r3, #0]
    68f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    68f4:	4381      	bics	r1, r0
    68f6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    68f8:	6819      	ldr	r1, [r3, #0]
    68fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    68fc:	4301      	orrs	r1, r0
    68fe:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6900:	6811      	ldr	r1, [r2, #0]
    6902:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6904:	4301      	orrs	r1, r0
    6906:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6908:	6819      	ldr	r1, [r3, #0]
    690a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    690c:	4381      	bics	r1, r0
    690e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6910:	6819      	ldr	r1, [r3, #0]
    6912:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6914:	4301      	orrs	r1, r0
    6916:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6918:	6811      	ldr	r1, [r2, #0]
    691a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    691c:	4381      	bics	r1, r0
    691e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6920:	6819      	ldr	r1, [r3, #0]
    6922:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6924:	4381      	bics	r1, r0
    6926:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6928:	6da0      	ldr	r0, [r4, #88]	; 0x58
    692a:	6819      	ldr	r1, [r3, #0]
    692c:	4301      	orrs	r1, r0
    692e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6930:	6811      	ldr	r1, [r2, #0]
    6932:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6934:	4381      	bics	r1, r0
    6936:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6938:	681a      	ldr	r2, [r3, #0]
    693a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    693c:	438a      	bics	r2, r1
    693e:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6940:	681a      	ldr	r2, [r3, #0]
    6942:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6944:	430a      	orrs	r2, r1
    6946:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    6948:	6b23      	ldr	r3, [r4, #48]	; 0x30
    694a:	2b00      	cmp	r3, #0
    694c:	da01      	bge.n	6952 <_ZN16Adafruit_ILI93415beginEm+0x1076>
    694e:	f003 fc08 	bl	a162 <_ZN16Adafruit_ILI93415beginEm+0x4886>
    6952:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    6954:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6956:	6811      	ldr	r1, [r2, #0]
    6958:	6c63      	ldr	r3, [r4, #68]	; 0x44
    695a:	4381      	bics	r1, r0
    695c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    695e:	6819      	ldr	r1, [r3, #0]
    6960:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6962:	4381      	bics	r1, r0
    6964:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6966:	6819      	ldr	r1, [r3, #0]
    6968:	6da0      	ldr	r0, [r4, #88]	; 0x58
    696a:	4301      	orrs	r1, r0
    696c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    696e:	6811      	ldr	r1, [r2, #0]
    6970:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6972:	4381      	bics	r1, r0
    6974:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6976:	6819      	ldr	r1, [r3, #0]
    6978:	6da0      	ldr	r0, [r4, #88]	; 0x58
    697a:	4381      	bics	r1, r0
    697c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    697e:	6819      	ldr	r1, [r3, #0]
    6980:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6982:	4301      	orrs	r1, r0
    6984:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6986:	6811      	ldr	r1, [r2, #0]
    6988:	6d20      	ldr	r0, [r4, #80]	; 0x50
    698a:	4381      	bics	r1, r0
    698c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    698e:	6819      	ldr	r1, [r3, #0]
    6990:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6992:	4381      	bics	r1, r0
    6994:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6996:	6819      	ldr	r1, [r3, #0]
    6998:	6da0      	ldr	r0, [r4, #88]	; 0x58
    699a:	4301      	orrs	r1, r0
    699c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    699e:	6811      	ldr	r1, [r2, #0]
    69a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    69a2:	4381      	bics	r1, r0
    69a4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    69a6:	6819      	ldr	r1, [r3, #0]
    69a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    69aa:	4381      	bics	r1, r0
    69ac:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    69ae:	6819      	ldr	r1, [r3, #0]
    69b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    69b2:	4301      	orrs	r1, r0
    69b4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    69b6:	6811      	ldr	r1, [r2, #0]
    69b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    69ba:	4381      	bics	r1, r0
    69bc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    69be:	6819      	ldr	r1, [r3, #0]
    69c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    69c2:	4381      	bics	r1, r0
    69c4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    69c6:	6819      	ldr	r1, [r3, #0]
    69c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    69ca:	4301      	orrs	r1, r0
    69cc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    69ce:	6811      	ldr	r1, [r2, #0]
    69d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    69d2:	4381      	bics	r1, r0
    69d4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    69d6:	6819      	ldr	r1, [r3, #0]
    69d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    69da:	4381      	bics	r1, r0
    69dc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    69de:	6819      	ldr	r1, [r3, #0]
    69e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    69e2:	4301      	orrs	r1, r0
    69e4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    69e6:	6811      	ldr	r1, [r2, #0]
    69e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    69ea:	4381      	bics	r1, r0
    69ec:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    69ee:	6819      	ldr	r1, [r3, #0]
    69f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    69f2:	4381      	bics	r1, r0
    69f4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    69f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    69f8:	6819      	ldr	r1, [r3, #0]
    69fa:	4301      	orrs	r1, r0
    69fc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    69fe:	6811      	ldr	r1, [r2, #0]
    6a00:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6a02:	4381      	bics	r1, r0
    6a04:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6a06:	681a      	ldr	r2, [r3, #0]
    6a08:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6a0a:	438a      	bics	r2, r1
    6a0c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6a0e:	681a      	ldr	r2, [r3, #0]
    6a10:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6a12:	430a      	orrs	r2, r1
    6a14:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    6a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6a18:	2b00      	cmp	r3, #0
    6a1a:	da01      	bge.n	6a20 <_ZN16Adafruit_ILI93415beginEm+0x1144>
    6a1c:	f003 fbae 	bl	a17c <_ZN16Adafruit_ILI93415beginEm+0x48a0>
    6a20:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    6a22:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6a24:	6811      	ldr	r1, [r2, #0]
    6a26:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6a28:	4381      	bics	r1, r0
    6a2a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6a2c:	6819      	ldr	r1, [r3, #0]
    6a2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a30:	4381      	bics	r1, r0
    6a32:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6a34:	6819      	ldr	r1, [r3, #0]
    6a36:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a38:	4301      	orrs	r1, r0
    6a3a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6a3c:	6811      	ldr	r1, [r2, #0]
    6a3e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6a40:	4381      	bics	r1, r0
    6a42:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6a44:	6819      	ldr	r1, [r3, #0]
    6a46:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a48:	4381      	bics	r1, r0
    6a4a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6a4c:	6819      	ldr	r1, [r3, #0]
    6a4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a50:	4301      	orrs	r1, r0
    6a52:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6a54:	6811      	ldr	r1, [r2, #0]
    6a56:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6a58:	4301      	orrs	r1, r0
    6a5a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6a5c:	6819      	ldr	r1, [r3, #0]
    6a5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a60:	4381      	bics	r1, r0
    6a62:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6a64:	6819      	ldr	r1, [r3, #0]
    6a66:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a68:	4301      	orrs	r1, r0
    6a6a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6a6c:	6811      	ldr	r1, [r2, #0]
    6a6e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6a70:	4301      	orrs	r1, r0
    6a72:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6a74:	6819      	ldr	r1, [r3, #0]
    6a76:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a78:	4381      	bics	r1, r0
    6a7a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6a7c:	6819      	ldr	r1, [r3, #0]
    6a7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a80:	4301      	orrs	r1, r0
    6a82:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6a84:	6811      	ldr	r1, [r2, #0]
    6a86:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6a88:	4381      	bics	r1, r0
    6a8a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6a8c:	6819      	ldr	r1, [r3, #0]
    6a8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a90:	4381      	bics	r1, r0
    6a92:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6a94:	6819      	ldr	r1, [r3, #0]
    6a96:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6a98:	4301      	orrs	r1, r0
    6a9a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6a9c:	6811      	ldr	r1, [r2, #0]
    6a9e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6aa0:	4301      	orrs	r1, r0
    6aa2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6aa4:	6819      	ldr	r1, [r3, #0]
    6aa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6aa8:	4381      	bics	r1, r0
    6aaa:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6aac:	6819      	ldr	r1, [r3, #0]
    6aae:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ab0:	4301      	orrs	r1, r0
    6ab2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6ab4:	6811      	ldr	r1, [r2, #0]
    6ab6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6ab8:	4381      	bics	r1, r0
    6aba:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6abc:	6819      	ldr	r1, [r3, #0]
    6abe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ac0:	4381      	bics	r1, r0
    6ac2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ac6:	6819      	ldr	r1, [r3, #0]
    6ac8:	4301      	orrs	r1, r0
    6aca:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6acc:	6811      	ldr	r1, [r2, #0]
    6ace:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6ad0:	4381      	bics	r1, r0
    6ad2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6ad4:	681a      	ldr	r2, [r3, #0]
    6ad6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6ad8:	438a      	bics	r2, r1
    6ada:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6adc:	681a      	ldr	r2, [r3, #0]
    6ade:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6ae0:	430a      	orrs	r2, r1
    6ae2:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    6ae4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	da01      	bge.n	6aee <_ZN16Adafruit_ILI93415beginEm+0x1212>
    6aea:	f003 fb4d 	bl	a188 <_ZN16Adafruit_ILI93415beginEm+0x48ac>
    6aee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    6af0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6af2:	6811      	ldr	r1, [r2, #0]
    6af4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6af6:	4381      	bics	r1, r0
    6af8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6afa:	6819      	ldr	r1, [r3, #0]
    6afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6afe:	4381      	bics	r1, r0
    6b00:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6b02:	6819      	ldr	r1, [r3, #0]
    6b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b06:	4301      	orrs	r1, r0
    6b08:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6b0a:	6811      	ldr	r1, [r2, #0]
    6b0c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6b0e:	4381      	bics	r1, r0
    6b10:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6b12:	6819      	ldr	r1, [r3, #0]
    6b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b16:	4381      	bics	r1, r0
    6b18:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6b1a:	6819      	ldr	r1, [r3, #0]
    6b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b1e:	4301      	orrs	r1, r0
    6b20:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6b22:	6811      	ldr	r1, [r2, #0]
    6b24:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6b26:	4381      	bics	r1, r0
    6b28:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6b2a:	6819      	ldr	r1, [r3, #0]
    6b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b2e:	4381      	bics	r1, r0
    6b30:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6b32:	6819      	ldr	r1, [r3, #0]
    6b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b36:	4301      	orrs	r1, r0
    6b38:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6b3a:	6811      	ldr	r1, [r2, #0]
    6b3c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6b3e:	4381      	bics	r1, r0
    6b40:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6b42:	6819      	ldr	r1, [r3, #0]
    6b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b46:	4381      	bics	r1, r0
    6b48:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6b4a:	6819      	ldr	r1, [r3, #0]
    6b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b4e:	4301      	orrs	r1, r0
    6b50:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6b52:	6811      	ldr	r1, [r2, #0]
    6b54:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6b56:	4381      	bics	r1, r0
    6b58:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6b5a:	6819      	ldr	r1, [r3, #0]
    6b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b5e:	4381      	bics	r1, r0
    6b60:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6b62:	6819      	ldr	r1, [r3, #0]
    6b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b66:	4301      	orrs	r1, r0
    6b68:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6b6a:	6811      	ldr	r1, [r2, #0]
    6b6c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6b6e:	4381      	bics	r1, r0
    6b70:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6b72:	6819      	ldr	r1, [r3, #0]
    6b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b76:	4381      	bics	r1, r0
    6b78:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6b7a:	6819      	ldr	r1, [r3, #0]
    6b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b7e:	4301      	orrs	r1, r0
    6b80:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6b82:	6811      	ldr	r1, [r2, #0]
    6b84:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6b86:	4301      	orrs	r1, r0
    6b88:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6b8a:	6819      	ldr	r1, [r3, #0]
    6b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b8e:	4381      	bics	r1, r0
    6b90:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6b92:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6b94:	6819      	ldr	r1, [r3, #0]
    6b96:	4301      	orrs	r1, r0
    6b98:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6b9a:	6811      	ldr	r1, [r2, #0]
    6b9c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6b9e:	4381      	bics	r1, r0
    6ba0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6ba2:	681a      	ldr	r2, [r3, #0]
    6ba4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6ba6:	438a      	bics	r2, r1
    6ba8:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6baa:	681a      	ldr	r2, [r3, #0]
    6bac:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6bae:	430a      	orrs	r2, r1
    6bb0:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    6bb2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6bb4:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6bb6:	680b      	ldr	r3, [r1, #0]
    6bb8:	4393      	bics	r3, r2
    6bba:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    6bbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	da01      	bge.n	6bc6 <_ZN16Adafruit_ILI93415beginEm+0x12ea>
    6bc2:	f003 fae7 	bl	a194 <_ZN16Adafruit_ILI93415beginEm+0x48b8>
    6bc6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    6bc8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6bca:	6810      	ldr	r0, [r2, #0]
    6bcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6bce:	4328      	orrs	r0, r5
    6bd0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6bd2:	6818      	ldr	r0, [r3, #0]
    6bd4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6bd6:	43a8      	bics	r0, r5
    6bd8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6bda:	6818      	ldr	r0, [r3, #0]
    6bdc:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6bde:	4328      	orrs	r0, r5
    6be0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    6be2:	6810      	ldr	r0, [r2, #0]
    6be4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6be6:	4328      	orrs	r0, r5
    6be8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6bea:	6818      	ldr	r0, [r3, #0]
    6bec:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6bee:	43a8      	bics	r0, r5
    6bf0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6bf2:	6818      	ldr	r0, [r3, #0]
    6bf4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6bf6:	4328      	orrs	r0, r5
    6bf8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    6bfa:	6810      	ldr	r0, [r2, #0]
    6bfc:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6bfe:	4328      	orrs	r0, r5
    6c00:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6c02:	6818      	ldr	r0, [r3, #0]
    6c04:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6c06:	43a8      	bics	r0, r5
    6c08:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6c0a:	6818      	ldr	r0, [r3, #0]
    6c0c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6c0e:	4328      	orrs	r0, r5
    6c10:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    6c12:	6810      	ldr	r0, [r2, #0]
    6c14:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6c16:	4328      	orrs	r0, r5
    6c18:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6c1a:	6818      	ldr	r0, [r3, #0]
    6c1c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6c1e:	43a8      	bics	r0, r5
    6c20:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6c22:	6818      	ldr	r0, [r3, #0]
    6c24:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6c26:	4328      	orrs	r0, r5
    6c28:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    6c2a:	6810      	ldr	r0, [r2, #0]
    6c2c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6c2e:	43a8      	bics	r0, r5
    6c30:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6c32:	6818      	ldr	r0, [r3, #0]
    6c34:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6c36:	43a8      	bics	r0, r5
    6c38:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6c3a:	6818      	ldr	r0, [r3, #0]
    6c3c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6c3e:	4328      	orrs	r0, r5
    6c40:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    6c42:	6810      	ldr	r0, [r2, #0]
    6c44:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6c46:	4328      	orrs	r0, r5
    6c48:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6c4a:	6818      	ldr	r0, [r3, #0]
    6c4c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6c4e:	43a8      	bics	r0, r5
    6c50:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6c52:	6818      	ldr	r0, [r3, #0]
    6c54:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6c56:	4328      	orrs	r0, r5
    6c58:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    6c5a:	6810      	ldr	r0, [r2, #0]
    6c5c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6c5e:	4328      	orrs	r0, r5
    6c60:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6c62:	6818      	ldr	r0, [r3, #0]
    6c64:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6c66:	43a8      	bics	r0, r5
    6c68:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    6c6a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    6c6c:	6818      	ldr	r0, [r3, #0]
    6c6e:	4328      	orrs	r0, r5
    6c70:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    6c72:	6810      	ldr	r0, [r2, #0]
    6c74:	6d25      	ldr	r5, [r4, #80]	; 0x50
    6c76:	4328      	orrs	r0, r5
    6c78:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    6c7a:	681a      	ldr	r2, [r3, #0]
    6c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6c7e:	4382      	bics	r2, r0
    6c80:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6c82:	681a      	ldr	r2, [r3, #0]
    6c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6c86:	4302      	orrs	r2, r0
    6c88:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    6c8a:	680b      	ldr	r3, [r1, #0]
    6c8c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6c8e:	4313      	orrs	r3, r2
    6c90:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    6c92:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6c94:	2b00      	cmp	r3, #0
    6c96:	da01      	bge.n	6c9c <_ZN16Adafruit_ILI93415beginEm+0x13c0>
    6c98:	f003 fa83 	bl	a1a2 <_ZN16Adafruit_ILI93415beginEm+0x48c6>
    6c9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    6c9e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6ca0:	6811      	ldr	r1, [r2, #0]
    6ca2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6ca4:	4381      	bics	r1, r0
    6ca6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6ca8:	6819      	ldr	r1, [r3, #0]
    6caa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6cac:	4381      	bics	r1, r0
    6cae:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6cb0:	6819      	ldr	r1, [r3, #0]
    6cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6cb4:	4301      	orrs	r1, r0
    6cb6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6cb8:	6811      	ldr	r1, [r2, #0]
    6cba:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6cbc:	4381      	bics	r1, r0
    6cbe:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6cc0:	6819      	ldr	r1, [r3, #0]
    6cc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6cc4:	4381      	bics	r1, r0
    6cc6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6cc8:	6819      	ldr	r1, [r3, #0]
    6cca:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ccc:	4301      	orrs	r1, r0
    6cce:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6cd0:	6811      	ldr	r1, [r2, #0]
    6cd2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6cd4:	4301      	orrs	r1, r0
    6cd6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6cd8:	6819      	ldr	r1, [r3, #0]
    6cda:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6cdc:	4381      	bics	r1, r0
    6cde:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6ce0:	6819      	ldr	r1, [r3, #0]
    6ce2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ce4:	4301      	orrs	r1, r0
    6ce6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6ce8:	6811      	ldr	r1, [r2, #0]
    6cea:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6cec:	4381      	bics	r1, r0
    6cee:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6cf0:	6819      	ldr	r1, [r3, #0]
    6cf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6cf4:	4381      	bics	r1, r0
    6cf6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6cf8:	6819      	ldr	r1, [r3, #0]
    6cfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6cfc:	4301      	orrs	r1, r0
    6cfe:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6d00:	6811      	ldr	r1, [r2, #0]
    6d02:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6d04:	4381      	bics	r1, r0
    6d06:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6d08:	6819      	ldr	r1, [r3, #0]
    6d0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6d0c:	4381      	bics	r1, r0
    6d0e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6d10:	6819      	ldr	r1, [r3, #0]
    6d12:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6d14:	4301      	orrs	r1, r0
    6d16:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6d18:	6811      	ldr	r1, [r2, #0]
    6d1a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6d1c:	4381      	bics	r1, r0
    6d1e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6d20:	6819      	ldr	r1, [r3, #0]
    6d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6d24:	4381      	bics	r1, r0
    6d26:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6d28:	6819      	ldr	r1, [r3, #0]
    6d2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6d2c:	4301      	orrs	r1, r0
    6d2e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6d30:	6811      	ldr	r1, [r2, #0]
    6d32:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6d34:	4381      	bics	r1, r0
    6d36:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6d38:	6819      	ldr	r1, [r3, #0]
    6d3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6d3c:	4381      	bics	r1, r0
    6d3e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6d42:	6819      	ldr	r1, [r3, #0]
    6d44:	4301      	orrs	r1, r0
    6d46:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6d48:	6811      	ldr	r1, [r2, #0]
    6d4a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6d4c:	4381      	bics	r1, r0
    6d4e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6d50:	681a      	ldr	r2, [r3, #0]
    6d52:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6d54:	438a      	bics	r2, r1
    6d56:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6d58:	681a      	ldr	r2, [r3, #0]
    6d5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6d5c:	430a      	orrs	r2, r1
    6d5e:	601a      	str	r2, [r3, #0]
    writeCommand(0xEA);
    6d60:	21ea      	movs	r1, #234	; 0xea
    6d62:	0020      	movs	r0, r4
    6d64:	f7fe fd04 	bl	5770 <_ZN16Adafruit_ILI934112writeCommandEh>
    if(_sclk < 0){
    6d68:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	da01      	bge.n	6d72 <_ZN16Adafruit_ILI93415beginEm+0x1496>
    6d6e:	f003 fa1e 	bl	a1ae <_ZN16Adafruit_ILI93415beginEm+0x48d2>
    6d72:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    6d74:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6d76:	6811      	ldr	r1, [r2, #0]
    6d78:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6d7a:	4381      	bics	r1, r0
    6d7c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6d7e:	6819      	ldr	r1, [r3, #0]
    6d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6d82:	4381      	bics	r1, r0
    6d84:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6d86:	6819      	ldr	r1, [r3, #0]
    6d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6d8a:	4301      	orrs	r1, r0
    6d8c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6d8e:	6811      	ldr	r1, [r2, #0]
    6d90:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6d92:	4381      	bics	r1, r0
    6d94:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6d96:	6819      	ldr	r1, [r3, #0]
    6d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6d9a:	4381      	bics	r1, r0
    6d9c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6d9e:	6819      	ldr	r1, [r3, #0]
    6da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6da2:	4301      	orrs	r1, r0
    6da4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6da6:	6811      	ldr	r1, [r2, #0]
    6da8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6daa:	4381      	bics	r1, r0
    6dac:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6dae:	6819      	ldr	r1, [r3, #0]
    6db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6db2:	4381      	bics	r1, r0
    6db4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6db6:	6819      	ldr	r1, [r3, #0]
    6db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6dba:	4301      	orrs	r1, r0
    6dbc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6dbe:	6811      	ldr	r1, [r2, #0]
    6dc0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6dc2:	4381      	bics	r1, r0
    6dc4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6dc6:	6819      	ldr	r1, [r3, #0]
    6dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6dca:	4381      	bics	r1, r0
    6dcc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6dce:	6819      	ldr	r1, [r3, #0]
    6dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6dd2:	4301      	orrs	r1, r0
    6dd4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6dd6:	6811      	ldr	r1, [r2, #0]
    6dd8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6dda:	4381      	bics	r1, r0
    6ddc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6dde:	6819      	ldr	r1, [r3, #0]
    6de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6de2:	4381      	bics	r1, r0
    6de4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6de6:	6819      	ldr	r1, [r3, #0]
    6de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6dea:	4301      	orrs	r1, r0
    6dec:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6dee:	6811      	ldr	r1, [r2, #0]
    6df0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6df2:	4381      	bics	r1, r0
    6df4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6df6:	6819      	ldr	r1, [r3, #0]
    6df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6dfa:	4381      	bics	r1, r0
    6dfc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6dfe:	6819      	ldr	r1, [r3, #0]
    6e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6e02:	4301      	orrs	r1, r0
    6e04:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6e06:	6811      	ldr	r1, [r2, #0]
    6e08:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6e0a:	4381      	bics	r1, r0
    6e0c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6e0e:	6819      	ldr	r1, [r3, #0]
    6e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6e12:	4381      	bics	r1, r0
    6e14:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6e16:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6e18:	6819      	ldr	r1, [r3, #0]
    6e1a:	4301      	orrs	r1, r0
    6e1c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6e1e:	6811      	ldr	r1, [r2, #0]
    6e20:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6e22:	4381      	bics	r1, r0
    6e24:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6e26:	681a      	ldr	r2, [r3, #0]
    6e28:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6e2a:	438a      	bics	r2, r1
    6e2c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6e2e:	681a      	ldr	r2, [r3, #0]
    6e30:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6e32:	430a      	orrs	r2, r1
    6e34:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    6e36:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6e38:	2b00      	cmp	r3, #0
    6e3a:	da01      	bge.n	6e40 <_ZN16Adafruit_ILI93415beginEm+0x1564>
    6e3c:	f003 f9bd 	bl	a1ba <_ZN16Adafruit_ILI93415beginEm+0x48de>
    6e40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    6e42:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6e44:	6811      	ldr	r1, [r2, #0]
    6e46:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6e48:	4381      	bics	r1, r0
    6e4a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6e4c:	6819      	ldr	r1, [r3, #0]
    6e4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6e50:	4381      	bics	r1, r0
    6e52:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6e54:	6819      	ldr	r1, [r3, #0]
    6e56:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6e58:	4301      	orrs	r1, r0
    6e5a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6e5c:	6811      	ldr	r1, [r2, #0]
    6e5e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6e60:	4381      	bics	r1, r0
    6e62:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6e64:	6819      	ldr	r1, [r3, #0]
    6e66:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6e68:	4381      	bics	r1, r0
    6e6a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6e6c:	6819      	ldr	r1, [r3, #0]
    6e6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6e70:	4301      	orrs	r1, r0
    6e72:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6e74:	6811      	ldr	r1, [r2, #0]
    6e76:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6e78:	4381      	bics	r1, r0
    6e7a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6e7c:	6819      	ldr	r1, [r3, #0]
    6e7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6e80:	4381      	bics	r1, r0
    6e82:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6e84:	6819      	ldr	r1, [r3, #0]
    6e86:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6e88:	4301      	orrs	r1, r0
    6e8a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6e8c:	6811      	ldr	r1, [r2, #0]
    6e8e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6e90:	4381      	bics	r1, r0
    6e92:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6e94:	6819      	ldr	r1, [r3, #0]
    6e96:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6e98:	4381      	bics	r1, r0
    6e9a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6e9c:	6819      	ldr	r1, [r3, #0]
    6e9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ea0:	4301      	orrs	r1, r0
    6ea2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6ea4:	6811      	ldr	r1, [r2, #0]
    6ea6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6ea8:	4381      	bics	r1, r0
    6eaa:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6eac:	6819      	ldr	r1, [r3, #0]
    6eae:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6eb0:	4381      	bics	r1, r0
    6eb2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6eb4:	6819      	ldr	r1, [r3, #0]
    6eb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6eb8:	4301      	orrs	r1, r0
    6eba:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6ebc:	6811      	ldr	r1, [r2, #0]
    6ebe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6ec0:	4381      	bics	r1, r0
    6ec2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6ec4:	6819      	ldr	r1, [r3, #0]
    6ec6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ec8:	4381      	bics	r1, r0
    6eca:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6ecc:	6819      	ldr	r1, [r3, #0]
    6ece:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ed0:	4301      	orrs	r1, r0
    6ed2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6ed4:	6811      	ldr	r1, [r2, #0]
    6ed6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6ed8:	4381      	bics	r1, r0
    6eda:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6edc:	6819      	ldr	r1, [r3, #0]
    6ede:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ee0:	4381      	bics	r1, r0
    6ee2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ee6:	6819      	ldr	r1, [r3, #0]
    6ee8:	4301      	orrs	r1, r0
    6eea:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6eec:	6811      	ldr	r1, [r2, #0]
    6eee:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6ef0:	4381      	bics	r1, r0
    6ef2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6ef4:	681a      	ldr	r2, [r3, #0]
    6ef6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6ef8:	438a      	bics	r2, r1
    6efa:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6efc:	681a      	ldr	r2, [r3, #0]
    6efe:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6f00:	430a      	orrs	r2, r1
    6f02:	601a      	str	r2, [r3, #0]
    writeCommand(ILI9341_PWCTR1);    //Power control
    6f04:	21c0      	movs	r1, #192	; 0xc0
    6f06:	0020      	movs	r0, r4
    6f08:	f7fe fc32 	bl	5770 <_ZN16Adafruit_ILI934112writeCommandEh>
    if(_sclk < 0){
    6f0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6f0e:	2b00      	cmp	r3, #0
    6f10:	da01      	bge.n	6f16 <_ZN16Adafruit_ILI93415beginEm+0x163a>
    6f12:	f003 f958 	bl	a1c6 <_ZN16Adafruit_ILI93415beginEm+0x48ea>
    6f16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    6f18:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6f1a:	6811      	ldr	r1, [r2, #0]
    6f1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6f1e:	4381      	bics	r1, r0
    6f20:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6f22:	6819      	ldr	r1, [r3, #0]
    6f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f26:	4381      	bics	r1, r0
    6f28:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6f2a:	6819      	ldr	r1, [r3, #0]
    6f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f2e:	4301      	orrs	r1, r0
    6f30:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6f32:	6811      	ldr	r1, [r2, #0]
    6f34:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6f36:	4381      	bics	r1, r0
    6f38:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6f3a:	6819      	ldr	r1, [r3, #0]
    6f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f3e:	4381      	bics	r1, r0
    6f40:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6f42:	6819      	ldr	r1, [r3, #0]
    6f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f46:	4301      	orrs	r1, r0
    6f48:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6f4a:	6811      	ldr	r1, [r2, #0]
    6f4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6f4e:	4301      	orrs	r1, r0
    6f50:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6f52:	6819      	ldr	r1, [r3, #0]
    6f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f56:	4381      	bics	r1, r0
    6f58:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6f5a:	6819      	ldr	r1, [r3, #0]
    6f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f5e:	4301      	orrs	r1, r0
    6f60:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6f62:	6811      	ldr	r1, [r2, #0]
    6f64:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6f66:	4381      	bics	r1, r0
    6f68:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6f6a:	6819      	ldr	r1, [r3, #0]
    6f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f6e:	4381      	bics	r1, r0
    6f70:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6f72:	6819      	ldr	r1, [r3, #0]
    6f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f76:	4301      	orrs	r1, r0
    6f78:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6f7a:	6811      	ldr	r1, [r2, #0]
    6f7c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6f7e:	4381      	bics	r1, r0
    6f80:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6f82:	6819      	ldr	r1, [r3, #0]
    6f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f86:	4381      	bics	r1, r0
    6f88:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6f8a:	6819      	ldr	r1, [r3, #0]
    6f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f8e:	4301      	orrs	r1, r0
    6f90:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    6f92:	6811      	ldr	r1, [r2, #0]
    6f94:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6f96:	4381      	bics	r1, r0
    6f98:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6f9a:	6819      	ldr	r1, [r3, #0]
    6f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6f9e:	4381      	bics	r1, r0
    6fa0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6fa2:	6819      	ldr	r1, [r3, #0]
    6fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6fa6:	4301      	orrs	r1, r0
    6fa8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6faa:	6811      	ldr	r1, [r2, #0]
    6fac:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6fae:	4301      	orrs	r1, r0
    6fb0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6fb2:	6819      	ldr	r1, [r3, #0]
    6fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6fb6:	4381      	bics	r1, r0
    6fb8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    6fba:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6fbc:	6819      	ldr	r1, [r3, #0]
    6fbe:	4301      	orrs	r1, r0
    6fc0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    6fc2:	6811      	ldr	r1, [r2, #0]
    6fc4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6fc6:	4301      	orrs	r1, r0
    6fc8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6fca:	681a      	ldr	r2, [r3, #0]
    6fcc:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6fce:	438a      	bics	r2, r1
    6fd0:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    6fd2:	681a      	ldr	r2, [r3, #0]
    6fd4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6fd6:	430a      	orrs	r2, r1
    6fd8:	601a      	str	r2, [r3, #0]
    writeCommand(ILI9341_PWCTR2);    //Power control
    6fda:	21c1      	movs	r1, #193	; 0xc1
    6fdc:	0020      	movs	r0, r4
    6fde:	f7fe fbc7 	bl	5770 <_ZN16Adafruit_ILI934112writeCommandEh>
    if(_sclk < 0){
    6fe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6fe4:	2b00      	cmp	r3, #0
    6fe6:	da01      	bge.n	6fec <_ZN16Adafruit_ILI93415beginEm+0x1710>
    6fe8:	f003 f8f3 	bl	a1d2 <_ZN16Adafruit_ILI93415beginEm+0x48f6>
    6fec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    6fee:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6ff0:	6811      	ldr	r1, [r2, #0]
    6ff2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6ff4:	4381      	bics	r1, r0
    6ff6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    6ff8:	6819      	ldr	r1, [r3, #0]
    6ffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    6ffc:	4381      	bics	r1, r0
    6ffe:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7000:	6819      	ldr	r1, [r3, #0]
    7002:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7004:	4301      	orrs	r1, r0
    7006:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7008:	6811      	ldr	r1, [r2, #0]
    700a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    700c:	4381      	bics	r1, r0
    700e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7010:	6819      	ldr	r1, [r3, #0]
    7012:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7014:	4381      	bics	r1, r0
    7016:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7018:	6819      	ldr	r1, [r3, #0]
    701a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    701c:	4301      	orrs	r1, r0
    701e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7020:	6811      	ldr	r1, [r2, #0]
    7022:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7024:	4381      	bics	r1, r0
    7026:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7028:	6819      	ldr	r1, [r3, #0]
    702a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    702c:	4381      	bics	r1, r0
    702e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7030:	6819      	ldr	r1, [r3, #0]
    7032:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7034:	4301      	orrs	r1, r0
    7036:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7038:	6811      	ldr	r1, [r2, #0]
    703a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    703c:	4301      	orrs	r1, r0
    703e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7040:	6819      	ldr	r1, [r3, #0]
    7042:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7044:	4381      	bics	r1, r0
    7046:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7048:	6819      	ldr	r1, [r3, #0]
    704a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    704c:	4301      	orrs	r1, r0
    704e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7050:	6811      	ldr	r1, [r2, #0]
    7052:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7054:	4381      	bics	r1, r0
    7056:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7058:	6819      	ldr	r1, [r3, #0]
    705a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    705c:	4381      	bics	r1, r0
    705e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7060:	6819      	ldr	r1, [r3, #0]
    7062:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7064:	4301      	orrs	r1, r0
    7066:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7068:	6811      	ldr	r1, [r2, #0]
    706a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    706c:	4381      	bics	r1, r0
    706e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7070:	6819      	ldr	r1, [r3, #0]
    7072:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7074:	4381      	bics	r1, r0
    7076:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7078:	6819      	ldr	r1, [r3, #0]
    707a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    707c:	4301      	orrs	r1, r0
    707e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7080:	6811      	ldr	r1, [r2, #0]
    7082:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7084:	4381      	bics	r1, r0
    7086:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7088:	6819      	ldr	r1, [r3, #0]
    708a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    708c:	4381      	bics	r1, r0
    708e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7090:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7092:	6819      	ldr	r1, [r3, #0]
    7094:	4301      	orrs	r1, r0
    7096:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7098:	6811      	ldr	r1, [r2, #0]
    709a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    709c:	4381      	bics	r1, r0
    709e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    70a0:	681a      	ldr	r2, [r3, #0]
    70a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
    70a4:	438a      	bics	r2, r1
    70a6:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    70a8:	681a      	ldr	r2, [r3, #0]
    70aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
    70ac:	430a      	orrs	r2, r1
    70ae:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    70b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    70b2:	6e22      	ldr	r2, [r4, #96]	; 0x60
    70b4:	680b      	ldr	r3, [r1, #0]
    70b6:	4393      	bics	r3, r2
    70b8:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    70ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    70bc:	2b00      	cmp	r3, #0
    70be:	da01      	bge.n	70c4 <_ZN16Adafruit_ILI93415beginEm+0x17e8>
    70c0:	f003 f88d 	bl	a1de <_ZN16Adafruit_ILI93415beginEm+0x4902>
    70c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    70c6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    70c8:	6810      	ldr	r0, [r2, #0]
    70ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
    70cc:	4328      	orrs	r0, r5
    70ce:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    70d0:	6818      	ldr	r0, [r3, #0]
    70d2:	6da5      	ldr	r5, [r4, #88]	; 0x58
    70d4:	43a8      	bics	r0, r5
    70d6:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    70d8:	6818      	ldr	r0, [r3, #0]
    70da:	6da5      	ldr	r5, [r4, #88]	; 0x58
    70dc:	4328      	orrs	r0, r5
    70de:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    70e0:	6810      	ldr	r0, [r2, #0]
    70e2:	6d25      	ldr	r5, [r4, #80]	; 0x50
    70e4:	4328      	orrs	r0, r5
    70e6:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    70e8:	6818      	ldr	r0, [r3, #0]
    70ea:	6da5      	ldr	r5, [r4, #88]	; 0x58
    70ec:	43a8      	bics	r0, r5
    70ee:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    70f0:	6818      	ldr	r0, [r3, #0]
    70f2:	6da5      	ldr	r5, [r4, #88]	; 0x58
    70f4:	4328      	orrs	r0, r5
    70f6:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    70f8:	6810      	ldr	r0, [r2, #0]
    70fa:	6d25      	ldr	r5, [r4, #80]	; 0x50
    70fc:	43a8      	bics	r0, r5
    70fe:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7100:	6818      	ldr	r0, [r3, #0]
    7102:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7104:	43a8      	bics	r0, r5
    7106:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7108:	6818      	ldr	r0, [r3, #0]
    710a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    710c:	4328      	orrs	r0, r5
    710e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7110:	6810      	ldr	r0, [r2, #0]
    7112:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7114:	43a8      	bics	r0, r5
    7116:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7118:	6818      	ldr	r0, [r3, #0]
    711a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    711c:	43a8      	bics	r0, r5
    711e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7120:	6818      	ldr	r0, [r3, #0]
    7122:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7124:	4328      	orrs	r0, r5
    7126:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7128:	6810      	ldr	r0, [r2, #0]
    712a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    712c:	43a8      	bics	r0, r5
    712e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7130:	6818      	ldr	r0, [r3, #0]
    7132:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7134:	43a8      	bics	r0, r5
    7136:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7138:	6818      	ldr	r0, [r3, #0]
    713a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    713c:	4328      	orrs	r0, r5
    713e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7140:	6810      	ldr	r0, [r2, #0]
    7142:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7144:	4328      	orrs	r0, r5
    7146:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7148:	6818      	ldr	r0, [r3, #0]
    714a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    714c:	43a8      	bics	r0, r5
    714e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7150:	6818      	ldr	r0, [r3, #0]
    7152:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7154:	4328      	orrs	r0, r5
    7156:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7158:	6810      	ldr	r0, [r2, #0]
    715a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    715c:	43a8      	bics	r0, r5
    715e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7160:	6818      	ldr	r0, [r3, #0]
    7162:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7164:	43a8      	bics	r0, r5
    7166:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7168:	6da5      	ldr	r5, [r4, #88]	; 0x58
    716a:	6818      	ldr	r0, [r3, #0]
    716c:	4328      	orrs	r0, r5
    716e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7170:	6810      	ldr	r0, [r2, #0]
    7172:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7174:	4328      	orrs	r0, r5
    7176:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7178:	681a      	ldr	r2, [r3, #0]
    717a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    717c:	4382      	bics	r2, r0
    717e:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7180:	681a      	ldr	r2, [r3, #0]
    7182:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7184:	4302      	orrs	r2, r0
    7186:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    7188:	680b      	ldr	r3, [r1, #0]
    718a:	6e22      	ldr	r2, [r4, #96]	; 0x60
    718c:	4313      	orrs	r3, r2
    718e:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    7190:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7192:	2b00      	cmp	r3, #0
    7194:	da01      	bge.n	719a <_ZN16Adafruit_ILI93415beginEm+0x18be>
    7196:	f003 f829 	bl	a1ec <_ZN16Adafruit_ILI93415beginEm+0x4910>
    719a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    719c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    719e:	6811      	ldr	r1, [r2, #0]
    71a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    71a2:	4381      	bics	r1, r0
    71a4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    71a6:	6819      	ldr	r1, [r3, #0]
    71a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    71aa:	4381      	bics	r1, r0
    71ac:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    71ae:	6819      	ldr	r1, [r3, #0]
    71b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    71b2:	4301      	orrs	r1, r0
    71b4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    71b6:	6811      	ldr	r1, [r2, #0]
    71b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    71ba:	4381      	bics	r1, r0
    71bc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    71be:	6819      	ldr	r1, [r3, #0]
    71c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    71c2:	4381      	bics	r1, r0
    71c4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    71c6:	6819      	ldr	r1, [r3, #0]
    71c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    71ca:	4301      	orrs	r1, r0
    71cc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    71ce:	6811      	ldr	r1, [r2, #0]
    71d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    71d2:	4301      	orrs	r1, r0
    71d4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    71d6:	6819      	ldr	r1, [r3, #0]
    71d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    71da:	4381      	bics	r1, r0
    71dc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    71de:	6819      	ldr	r1, [r3, #0]
    71e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    71e2:	4301      	orrs	r1, r0
    71e4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    71e6:	6811      	ldr	r1, [r2, #0]
    71e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    71ea:	4301      	orrs	r1, r0
    71ec:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    71ee:	6819      	ldr	r1, [r3, #0]
    71f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    71f2:	4381      	bics	r1, r0
    71f4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    71f6:	6819      	ldr	r1, [r3, #0]
    71f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    71fa:	4301      	orrs	r1, r0
    71fc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    71fe:	6811      	ldr	r1, [r2, #0]
    7200:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7202:	4301      	orrs	r1, r0
    7204:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7206:	6819      	ldr	r1, [r3, #0]
    7208:	6da0      	ldr	r0, [r4, #88]	; 0x58
    720a:	4381      	bics	r1, r0
    720c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    720e:	6819      	ldr	r1, [r3, #0]
    7210:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7212:	4301      	orrs	r1, r0
    7214:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7216:	6811      	ldr	r1, [r2, #0]
    7218:	6d20      	ldr	r0, [r4, #80]	; 0x50
    721a:	4301      	orrs	r1, r0
    721c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    721e:	6819      	ldr	r1, [r3, #0]
    7220:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7222:	4381      	bics	r1, r0
    7224:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7226:	6819      	ldr	r1, [r3, #0]
    7228:	6da0      	ldr	r0, [r4, #88]	; 0x58
    722a:	4301      	orrs	r1, r0
    722c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    722e:	6811      	ldr	r1, [r2, #0]
    7230:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7232:	4301      	orrs	r1, r0
    7234:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7236:	6819      	ldr	r1, [r3, #0]
    7238:	6da0      	ldr	r0, [r4, #88]	; 0x58
    723a:	4381      	bics	r1, r0
    723c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    723e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7240:	6819      	ldr	r1, [r3, #0]
    7242:	4301      	orrs	r1, r0
    7244:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7246:	6811      	ldr	r1, [r2, #0]
    7248:	6d20      	ldr	r0, [r4, #80]	; 0x50
    724a:	4381      	bics	r1, r0
    724c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    724e:	681a      	ldr	r2, [r3, #0]
    7250:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7252:	438a      	bics	r2, r1
    7254:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7256:	681a      	ldr	r2, [r3, #0]
    7258:	6da1      	ldr	r1, [r4, #88]	; 0x58
    725a:	430a      	orrs	r2, r1
    725c:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    725e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7260:	2b00      	cmp	r3, #0
    7262:	da01      	bge.n	7268 <_ZN16Adafruit_ILI93415beginEm+0x198c>
    7264:	f002 ff2e 	bl	a0c4 <_ZN16Adafruit_ILI93415beginEm+0x47e8>
    7268:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    726a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    726c:	6811      	ldr	r1, [r2, #0]
    726e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7270:	4381      	bics	r1, r0
    7272:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7274:	6819      	ldr	r1, [r3, #0]
    7276:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7278:	4381      	bics	r1, r0
    727a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    727c:	6819      	ldr	r1, [r3, #0]
    727e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7280:	4301      	orrs	r1, r0
    7282:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7284:	6811      	ldr	r1, [r2, #0]
    7286:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7288:	4381      	bics	r1, r0
    728a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    728c:	6819      	ldr	r1, [r3, #0]
    728e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7290:	4381      	bics	r1, r0
    7292:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7294:	6819      	ldr	r1, [r3, #0]
    7296:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7298:	4301      	orrs	r1, r0
    729a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    729c:	6811      	ldr	r1, [r2, #0]
    729e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    72a0:	4301      	orrs	r1, r0
    72a2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    72a4:	6819      	ldr	r1, [r3, #0]
    72a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    72a8:	4381      	bics	r1, r0
    72aa:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    72ac:	6819      	ldr	r1, [r3, #0]
    72ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
    72b0:	4301      	orrs	r1, r0
    72b2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    72b4:	6811      	ldr	r1, [r2, #0]
    72b6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    72b8:	4381      	bics	r1, r0
    72ba:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    72bc:	6819      	ldr	r1, [r3, #0]
    72be:	6da0      	ldr	r0, [r4, #88]	; 0x58
    72c0:	4381      	bics	r1, r0
    72c2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    72c4:	6819      	ldr	r1, [r3, #0]
    72c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    72c8:	4301      	orrs	r1, r0
    72ca:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    72cc:	6811      	ldr	r1, [r2, #0]
    72ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
    72d0:	4301      	orrs	r1, r0
    72d2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    72d4:	6819      	ldr	r1, [r3, #0]
    72d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    72d8:	4381      	bics	r1, r0
    72da:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    72dc:	6819      	ldr	r1, [r3, #0]
    72de:	6da0      	ldr	r0, [r4, #88]	; 0x58
    72e0:	4301      	orrs	r1, r0
    72e2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    72e4:	6811      	ldr	r1, [r2, #0]
    72e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    72e8:	4381      	bics	r1, r0
    72ea:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    72ec:	6819      	ldr	r1, [r3, #0]
    72ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
    72f0:	4381      	bics	r1, r0
    72f2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    72f4:	6819      	ldr	r1, [r3, #0]
    72f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    72f8:	4301      	orrs	r1, r0
    72fa:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    72fc:	6811      	ldr	r1, [r2, #0]
    72fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7300:	4381      	bics	r1, r0
    7302:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7304:	6819      	ldr	r1, [r3, #0]
    7306:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7308:	4381      	bics	r1, r0
    730a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    730c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    730e:	6819      	ldr	r1, [r3, #0]
    7310:	4301      	orrs	r1, r0
    7312:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7314:	6811      	ldr	r1, [r2, #0]
    7316:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7318:	4381      	bics	r1, r0
    731a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    731c:	681a      	ldr	r2, [r3, #0]
    731e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7320:	438a      	bics	r2, r1
    7322:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7324:	681a      	ldr	r2, [r3, #0]
    7326:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7328:	430a      	orrs	r2, r1
    732a:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    732c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    732e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7330:	680b      	ldr	r3, [r1, #0]
    7332:	4393      	bics	r3, r2
    7334:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    7336:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7338:	2b00      	cmp	r3, #0
    733a:	da01      	bge.n	7340 <_ZN16Adafruit_ILI93415beginEm+0x1a64>
    733c:	f002 fec8 	bl	a0d0 <_ZN16Adafruit_ILI93415beginEm+0x47f4>
    7340:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    7342:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7344:	6810      	ldr	r0, [r2, #0]
    7346:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7348:	4328      	orrs	r0, r5
    734a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    734c:	6818      	ldr	r0, [r3, #0]
    734e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7350:	43a8      	bics	r0, r5
    7352:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7354:	6818      	ldr	r0, [r3, #0]
    7356:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7358:	4328      	orrs	r0, r5
    735a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    735c:	6810      	ldr	r0, [r2, #0]
    735e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7360:	4328      	orrs	r0, r5
    7362:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7364:	6818      	ldr	r0, [r3, #0]
    7366:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7368:	43a8      	bics	r0, r5
    736a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    736c:	6818      	ldr	r0, [r3, #0]
    736e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7370:	4328      	orrs	r0, r5
    7372:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7374:	6810      	ldr	r0, [r2, #0]
    7376:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7378:	43a8      	bics	r0, r5
    737a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    737c:	6818      	ldr	r0, [r3, #0]
    737e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7380:	43a8      	bics	r0, r5
    7382:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7384:	6818      	ldr	r0, [r3, #0]
    7386:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7388:	4328      	orrs	r0, r5
    738a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    738c:	6810      	ldr	r0, [r2, #0]
    738e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7390:	43a8      	bics	r0, r5
    7392:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7394:	6818      	ldr	r0, [r3, #0]
    7396:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7398:	43a8      	bics	r0, r5
    739a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    739c:	6818      	ldr	r0, [r3, #0]
    739e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    73a0:	4328      	orrs	r0, r5
    73a2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    73a4:	6810      	ldr	r0, [r2, #0]
    73a6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    73a8:	43a8      	bics	r0, r5
    73aa:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    73ac:	6818      	ldr	r0, [r3, #0]
    73ae:	6da5      	ldr	r5, [r4, #88]	; 0x58
    73b0:	43a8      	bics	r0, r5
    73b2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    73b4:	6818      	ldr	r0, [r3, #0]
    73b6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    73b8:	4328      	orrs	r0, r5
    73ba:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    73bc:	6810      	ldr	r0, [r2, #0]
    73be:	6d25      	ldr	r5, [r4, #80]	; 0x50
    73c0:	4328      	orrs	r0, r5
    73c2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    73c4:	6818      	ldr	r0, [r3, #0]
    73c6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    73c8:	43a8      	bics	r0, r5
    73ca:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    73cc:	6818      	ldr	r0, [r3, #0]
    73ce:	6da5      	ldr	r5, [r4, #88]	; 0x58
    73d0:	4328      	orrs	r0, r5
    73d2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    73d4:	6810      	ldr	r0, [r2, #0]
    73d6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    73d8:	4328      	orrs	r0, r5
    73da:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    73dc:	6818      	ldr	r0, [r3, #0]
    73de:	6da5      	ldr	r5, [r4, #88]	; 0x58
    73e0:	43a8      	bics	r0, r5
    73e2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    73e4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    73e6:	6818      	ldr	r0, [r3, #0]
    73e8:	4328      	orrs	r0, r5
    73ea:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    73ec:	6810      	ldr	r0, [r2, #0]
    73ee:	6d25      	ldr	r5, [r4, #80]	; 0x50
    73f0:	4328      	orrs	r0, r5
    73f2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    73f4:	681a      	ldr	r2, [r3, #0]
    73f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    73f8:	4382      	bics	r2, r0
    73fa:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    73fc:	681a      	ldr	r2, [r3, #0]
    73fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7400:	4302      	orrs	r2, r0
    7402:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    7404:	680b      	ldr	r3, [r1, #0]
    7406:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7408:	4313      	orrs	r3, r2
    740a:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    740c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    740e:	2b00      	cmp	r3, #0
    7410:	da01      	bge.n	7416 <_ZN16Adafruit_ILI93415beginEm+0x1b3a>
    7412:	f002 fe64 	bl	a0de <_ZN16Adafruit_ILI93415beginEm+0x4802>
    7416:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    7418:	6d25      	ldr	r5, [r4, #80]	; 0x50
    741a:	6810      	ldr	r0, [r2, #0]
    741c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    741e:	4328      	orrs	r0, r5
    7420:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7422:	6818      	ldr	r0, [r3, #0]
    7424:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7426:	43a8      	bics	r0, r5
    7428:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    742a:	6818      	ldr	r0, [r3, #0]
    742c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    742e:	4328      	orrs	r0, r5
    7430:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7432:	6810      	ldr	r0, [r2, #0]
    7434:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7436:	43a8      	bics	r0, r5
    7438:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    743a:	6818      	ldr	r0, [r3, #0]
    743c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    743e:	43a8      	bics	r0, r5
    7440:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7442:	6818      	ldr	r0, [r3, #0]
    7444:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7446:	4328      	orrs	r0, r5
    7448:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    744a:	6810      	ldr	r0, [r2, #0]
    744c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    744e:	43a8      	bics	r0, r5
    7450:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7452:	6818      	ldr	r0, [r3, #0]
    7454:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7456:	43a8      	bics	r0, r5
    7458:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    745a:	6818      	ldr	r0, [r3, #0]
    745c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    745e:	4328      	orrs	r0, r5
    7460:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7462:	6810      	ldr	r0, [r2, #0]
    7464:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7466:	43a8      	bics	r0, r5
    7468:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    746a:	6818      	ldr	r0, [r3, #0]
    746c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    746e:	43a8      	bics	r0, r5
    7470:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7472:	6818      	ldr	r0, [r3, #0]
    7474:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7476:	4328      	orrs	r0, r5
    7478:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    747a:	6810      	ldr	r0, [r2, #0]
    747c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    747e:	43a8      	bics	r0, r5
    7480:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7482:	6818      	ldr	r0, [r3, #0]
    7484:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7486:	43a8      	bics	r0, r5
    7488:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    748a:	6818      	ldr	r0, [r3, #0]
    748c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    748e:	4328      	orrs	r0, r5
    7490:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7492:	6810      	ldr	r0, [r2, #0]
    7494:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7496:	4328      	orrs	r0, r5
    7498:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    749a:	6818      	ldr	r0, [r3, #0]
    749c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    749e:	43a8      	bics	r0, r5
    74a0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    74a2:	6818      	ldr	r0, [r3, #0]
    74a4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    74a6:	4328      	orrs	r0, r5
    74a8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    74aa:	6810      	ldr	r0, [r2, #0]
    74ac:	6d25      	ldr	r5, [r4, #80]	; 0x50
    74ae:	4328      	orrs	r0, r5
    74b0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    74b2:	6818      	ldr	r0, [r3, #0]
    74b4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    74b6:	43a8      	bics	r0, r5
    74b8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    74ba:	6da5      	ldr	r5, [r4, #88]	; 0x58
    74bc:	6818      	ldr	r0, [r3, #0]
    74be:	4328      	orrs	r0, r5
    74c0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    74c2:	6810      	ldr	r0, [r2, #0]
    74c4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    74c6:	43a8      	bics	r0, r5
    74c8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    74ca:	681a      	ldr	r2, [r3, #0]
    74cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    74ce:	4382      	bics	r2, r0
    74d0:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    74d2:	681a      	ldr	r2, [r3, #0]
    74d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    74d6:	4302      	orrs	r2, r0
    74d8:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    74da:	680b      	ldr	r3, [r1, #0]
    74dc:	6e22      	ldr	r2, [r4, #96]	; 0x60
    74de:	4393      	bics	r3, r2
    74e0:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    74e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    74e4:	2b00      	cmp	r3, #0
    74e6:	da01      	bge.n	74ec <_ZN16Adafruit_ILI93415beginEm+0x1c10>
    74e8:	f002 fe00 	bl	a0ec <_ZN16Adafruit_ILI93415beginEm+0x4810>
    74ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    74ee:	6d25      	ldr	r5, [r4, #80]	; 0x50
    74f0:	6810      	ldr	r0, [r2, #0]
    74f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    74f4:	43a8      	bics	r0, r5
    74f6:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    74f8:	6818      	ldr	r0, [r3, #0]
    74fa:	6da5      	ldr	r5, [r4, #88]	; 0x58
    74fc:	43a8      	bics	r0, r5
    74fe:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7500:	6818      	ldr	r0, [r3, #0]
    7502:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7504:	4328      	orrs	r0, r5
    7506:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7508:	6810      	ldr	r0, [r2, #0]
    750a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    750c:	43a8      	bics	r0, r5
    750e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7510:	6818      	ldr	r0, [r3, #0]
    7512:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7514:	43a8      	bics	r0, r5
    7516:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7518:	6818      	ldr	r0, [r3, #0]
    751a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    751c:	4328      	orrs	r0, r5
    751e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7520:	6810      	ldr	r0, [r2, #0]
    7522:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7524:	4328      	orrs	r0, r5
    7526:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7528:	6818      	ldr	r0, [r3, #0]
    752a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    752c:	43a8      	bics	r0, r5
    752e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7530:	6818      	ldr	r0, [r3, #0]
    7532:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7534:	4328      	orrs	r0, r5
    7536:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7538:	6810      	ldr	r0, [r2, #0]
    753a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    753c:	4328      	orrs	r0, r5
    753e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7540:	6818      	ldr	r0, [r3, #0]
    7542:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7544:	43a8      	bics	r0, r5
    7546:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7548:	6818      	ldr	r0, [r3, #0]
    754a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    754c:	4328      	orrs	r0, r5
    754e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7550:	6810      	ldr	r0, [r2, #0]
    7552:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7554:	43a8      	bics	r0, r5
    7556:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7558:	6818      	ldr	r0, [r3, #0]
    755a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    755c:	43a8      	bics	r0, r5
    755e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7560:	6818      	ldr	r0, [r3, #0]
    7562:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7564:	4328      	orrs	r0, r5
    7566:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7568:	6810      	ldr	r0, [r2, #0]
    756a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    756c:	4328      	orrs	r0, r5
    756e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7570:	6818      	ldr	r0, [r3, #0]
    7572:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7574:	43a8      	bics	r0, r5
    7576:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7578:	6818      	ldr	r0, [r3, #0]
    757a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    757c:	4328      	orrs	r0, r5
    757e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7580:	6810      	ldr	r0, [r2, #0]
    7582:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7584:	4328      	orrs	r0, r5
    7586:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7588:	6818      	ldr	r0, [r3, #0]
    758a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    758c:	43a8      	bics	r0, r5
    758e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7590:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7592:	6818      	ldr	r0, [r3, #0]
    7594:	4328      	orrs	r0, r5
    7596:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7598:	6810      	ldr	r0, [r2, #0]
    759a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    759c:	43a8      	bics	r0, r5
    759e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    75a0:	681a      	ldr	r2, [r3, #0]
    75a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    75a4:	4382      	bics	r2, r0
    75a6:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    75a8:	681a      	ldr	r2, [r3, #0]
    75aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    75ac:	4302      	orrs	r2, r0
    75ae:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    75b0:	680b      	ldr	r3, [r1, #0]
    75b2:	6e22      	ldr	r2, [r4, #96]	; 0x60
    75b4:	4313      	orrs	r3, r2
    75b6:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    75b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    75ba:	2b00      	cmp	r3, #0
    75bc:	da01      	bge.n	75c2 <_ZN16Adafruit_ILI93415beginEm+0x1ce6>
    75be:	f002 fc36 	bl	9e2e <_ZN16Adafruit_ILI93415beginEm+0x4552>
    75c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    75c4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    75c6:	6810      	ldr	r0, [r2, #0]
    75c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    75ca:	43a8      	bics	r0, r5
    75cc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    75ce:	6818      	ldr	r0, [r3, #0]
    75d0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    75d2:	43a8      	bics	r0, r5
    75d4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    75d6:	6818      	ldr	r0, [r3, #0]
    75d8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    75da:	4328      	orrs	r0, r5
    75dc:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    75de:	6810      	ldr	r0, [r2, #0]
    75e0:	6d25      	ldr	r5, [r4, #80]	; 0x50
    75e2:	4328      	orrs	r0, r5
    75e4:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    75e6:	6818      	ldr	r0, [r3, #0]
    75e8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    75ea:	43a8      	bics	r0, r5
    75ec:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    75ee:	6818      	ldr	r0, [r3, #0]
    75f0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    75f2:	4328      	orrs	r0, r5
    75f4:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    75f6:	6810      	ldr	r0, [r2, #0]
    75f8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    75fa:	43a8      	bics	r0, r5
    75fc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    75fe:	6818      	ldr	r0, [r3, #0]
    7600:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7602:	43a8      	bics	r0, r5
    7604:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7606:	6818      	ldr	r0, [r3, #0]
    7608:	6da5      	ldr	r5, [r4, #88]	; 0x58
    760a:	4328      	orrs	r0, r5
    760c:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    760e:	6810      	ldr	r0, [r2, #0]
    7610:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7612:	43a8      	bics	r0, r5
    7614:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7616:	6818      	ldr	r0, [r3, #0]
    7618:	6da5      	ldr	r5, [r4, #88]	; 0x58
    761a:	43a8      	bics	r0, r5
    761c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    761e:	6818      	ldr	r0, [r3, #0]
    7620:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7622:	4328      	orrs	r0, r5
    7624:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7626:	6810      	ldr	r0, [r2, #0]
    7628:	6d25      	ldr	r5, [r4, #80]	; 0x50
    762a:	4328      	orrs	r0, r5
    762c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    762e:	6818      	ldr	r0, [r3, #0]
    7630:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7632:	43a8      	bics	r0, r5
    7634:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7636:	6818      	ldr	r0, [r3, #0]
    7638:	6da5      	ldr	r5, [r4, #88]	; 0x58
    763a:	4328      	orrs	r0, r5
    763c:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    763e:	6810      	ldr	r0, [r2, #0]
    7640:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7642:	43a8      	bics	r0, r5
    7644:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7646:	6818      	ldr	r0, [r3, #0]
    7648:	6da5      	ldr	r5, [r4, #88]	; 0x58
    764a:	43a8      	bics	r0, r5
    764c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    764e:	6818      	ldr	r0, [r3, #0]
    7650:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7652:	4328      	orrs	r0, r5
    7654:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7656:	6810      	ldr	r0, [r2, #0]
    7658:	6d25      	ldr	r5, [r4, #80]	; 0x50
    765a:	43a8      	bics	r0, r5
    765c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    765e:	6818      	ldr	r0, [r3, #0]
    7660:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7662:	43a8      	bics	r0, r5
    7664:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7666:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7668:	6818      	ldr	r0, [r3, #0]
    766a:	4328      	orrs	r0, r5
    766c:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    766e:	6810      	ldr	r0, [r2, #0]
    7670:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7672:	43a8      	bics	r0, r5
    7674:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7676:	681a      	ldr	r2, [r3, #0]
    7678:	6da0      	ldr	r0, [r4, #88]	; 0x58
    767a:	4382      	bics	r2, r0
    767c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    767e:	681a      	ldr	r2, [r3, #0]
    7680:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7682:	4302      	orrs	r2, r0
    7684:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    7686:	680b      	ldr	r3, [r1, #0]
    7688:	6e22      	ldr	r2, [r4, #96]	; 0x60
    768a:	4393      	bics	r3, r2
    768c:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    768e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7690:	2b00      	cmp	r3, #0
    7692:	da01      	bge.n	7698 <_ZN16Adafruit_ILI93415beginEm+0x1dbc>
    7694:	f002 fbd2 	bl	9e3c <_ZN16Adafruit_ILI93415beginEm+0x4560>
    7698:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    769a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    769c:	6810      	ldr	r0, [r2, #0]
    769e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    76a0:	43a8      	bics	r0, r5
    76a2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    76a4:	6818      	ldr	r0, [r3, #0]
    76a6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    76a8:	43a8      	bics	r0, r5
    76aa:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    76ac:	6818      	ldr	r0, [r3, #0]
    76ae:	6da5      	ldr	r5, [r4, #88]	; 0x58
    76b0:	4328      	orrs	r0, r5
    76b2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    76b4:	6810      	ldr	r0, [r2, #0]
    76b6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    76b8:	43a8      	bics	r0, r5
    76ba:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    76bc:	6818      	ldr	r0, [r3, #0]
    76be:	6da5      	ldr	r5, [r4, #88]	; 0x58
    76c0:	43a8      	bics	r0, r5
    76c2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    76c4:	6818      	ldr	r0, [r3, #0]
    76c6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    76c8:	4328      	orrs	r0, r5
    76ca:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    76cc:	6810      	ldr	r0, [r2, #0]
    76ce:	6d25      	ldr	r5, [r4, #80]	; 0x50
    76d0:	4328      	orrs	r0, r5
    76d2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    76d4:	6818      	ldr	r0, [r3, #0]
    76d6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    76d8:	43a8      	bics	r0, r5
    76da:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    76dc:	6818      	ldr	r0, [r3, #0]
    76de:	6da5      	ldr	r5, [r4, #88]	; 0x58
    76e0:	4328      	orrs	r0, r5
    76e2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    76e4:	6810      	ldr	r0, [r2, #0]
    76e6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    76e8:	4328      	orrs	r0, r5
    76ea:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    76ec:	6818      	ldr	r0, [r3, #0]
    76ee:	6da5      	ldr	r5, [r4, #88]	; 0x58
    76f0:	43a8      	bics	r0, r5
    76f2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    76f4:	6818      	ldr	r0, [r3, #0]
    76f6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    76f8:	4328      	orrs	r0, r5
    76fa:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    76fc:	6810      	ldr	r0, [r2, #0]
    76fe:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7700:	43a8      	bics	r0, r5
    7702:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7704:	6818      	ldr	r0, [r3, #0]
    7706:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7708:	43a8      	bics	r0, r5
    770a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    770c:	6818      	ldr	r0, [r3, #0]
    770e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7710:	4328      	orrs	r0, r5
    7712:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7714:	6810      	ldr	r0, [r2, #0]
    7716:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7718:	4328      	orrs	r0, r5
    771a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    771c:	6818      	ldr	r0, [r3, #0]
    771e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7720:	43a8      	bics	r0, r5
    7722:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7724:	6818      	ldr	r0, [r3, #0]
    7726:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7728:	4328      	orrs	r0, r5
    772a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    772c:	6810      	ldr	r0, [r2, #0]
    772e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7730:	4328      	orrs	r0, r5
    7732:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7734:	6818      	ldr	r0, [r3, #0]
    7736:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7738:	43a8      	bics	r0, r5
    773a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    773c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    773e:	6818      	ldr	r0, [r3, #0]
    7740:	4328      	orrs	r0, r5
    7742:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7744:	6810      	ldr	r0, [r2, #0]
    7746:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7748:	4328      	orrs	r0, r5
    774a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    774c:	681a      	ldr	r2, [r3, #0]
    774e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7750:	4382      	bics	r2, r0
    7752:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7754:	681a      	ldr	r2, [r3, #0]
    7756:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7758:	4302      	orrs	r2, r0
    775a:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    775c:	680b      	ldr	r3, [r1, #0]
    775e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7760:	4313      	orrs	r3, r2
    7762:	600b      	str	r3, [r1, #0]
    SPI_WRITE16(0);                 // Zero
    7764:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7766:	2b00      	cmp	r3, #0
    7768:	da01      	bge.n	776e <_ZN16Adafruit_ILI93415beginEm+0x1e92>
    776a:	f002 fb43 	bl	9df4 <_ZN16Adafruit_ILI93415beginEm+0x4518>
    776e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    7770:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7772:	6810      	ldr	r0, [r2, #0]
    7774:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7776:	43a8      	bics	r0, r5
    7778:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    777a:	6818      	ldr	r0, [r3, #0]
    777c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    777e:	43a8      	bics	r0, r5
    7780:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7782:	6818      	ldr	r0, [r3, #0]
    7784:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7786:	4328      	orrs	r0, r5
    7788:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    778a:	6810      	ldr	r0, [r2, #0]
    778c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    778e:	43a8      	bics	r0, r5
    7790:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7792:	6818      	ldr	r0, [r3, #0]
    7794:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7796:	43a8      	bics	r0, r5
    7798:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    779a:	6818      	ldr	r0, [r3, #0]
    779c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    779e:	4328      	orrs	r0, r5
    77a0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    77a2:	6810      	ldr	r0, [r2, #0]
    77a4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    77a6:	43a8      	bics	r0, r5
    77a8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    77aa:	6818      	ldr	r0, [r3, #0]
    77ac:	6da5      	ldr	r5, [r4, #88]	; 0x58
    77ae:	43a8      	bics	r0, r5
    77b0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    77b2:	6818      	ldr	r0, [r3, #0]
    77b4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    77b6:	4328      	orrs	r0, r5
    77b8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    77ba:	6d25      	ldr	r5, [r4, #80]	; 0x50
    77bc:	6810      	ldr	r0, [r2, #0]
    77be:	43a8      	bics	r0, r5
    77c0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    77c2:	6818      	ldr	r0, [r3, #0]
    77c4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    77c6:	43a8      	bics	r0, r5
    77c8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    77ca:	6818      	ldr	r0, [r3, #0]
    77cc:	6da5      	ldr	r5, [r4, #88]	; 0x58
    77ce:	4328      	orrs	r0, r5
    77d0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    77d2:	6810      	ldr	r0, [r2, #0]
    77d4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    77d6:	43a8      	bics	r0, r5
    77d8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    77da:	6818      	ldr	r0, [r3, #0]
    77dc:	6da5      	ldr	r5, [r4, #88]	; 0x58
    77de:	43a8      	bics	r0, r5
    77e0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    77e2:	6818      	ldr	r0, [r3, #0]
    77e4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    77e6:	4328      	orrs	r0, r5
    77e8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    77ea:	6810      	ldr	r0, [r2, #0]
    77ec:	6d25      	ldr	r5, [r4, #80]	; 0x50
    77ee:	43a8      	bics	r0, r5
    77f0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    77f2:	6818      	ldr	r0, [r3, #0]
    77f4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    77f6:	43a8      	bics	r0, r5
    77f8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    77fa:	6818      	ldr	r0, [r3, #0]
    77fc:	6da5      	ldr	r5, [r4, #88]	; 0x58
    77fe:	4328      	orrs	r0, r5
    7800:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7802:	6810      	ldr	r0, [r2, #0]
    7804:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7806:	43a8      	bics	r0, r5
    7808:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    780a:	6818      	ldr	r0, [r3, #0]
    780c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    780e:	43a8      	bics	r0, r5
    7810:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7812:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7814:	6818      	ldr	r0, [r3, #0]
    7816:	4328      	orrs	r0, r5
    7818:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    781a:	6810      	ldr	r0, [r2, #0]
    781c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    781e:	43a8      	bics	r0, r5
    7820:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7822:	6818      	ldr	r0, [r3, #0]
    7824:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7826:	43a8      	bics	r0, r5
    7828:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    782a:	6818      	ldr	r0, [r3, #0]
    782c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    782e:	4328      	orrs	r0, r5
    7830:	6018      	str	r0, [r3, #0]
    if(_sclk < 0){
    7832:	6b20      	ldr	r0, [r4, #48]	; 0x30
    7834:	2800      	cmp	r0, #0
    7836:	da01      	bge.n	783c <_ZN16Adafruit_ILI93415beginEm+0x1f60>
    7838:	f002 fcf1 	bl	a21e <_ZN16Adafruit_ILI93415beginEm+0x4942>
            SSPI_MOSI_LOW();
    783c:	6810      	ldr	r0, [r2, #0]
    783e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7840:	43a8      	bics	r0, r5
    7842:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7844:	6818      	ldr	r0, [r3, #0]
    7846:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7848:	43a8      	bics	r0, r5
    784a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    784c:	6818      	ldr	r0, [r3, #0]
    784e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7850:	4328      	orrs	r0, r5
    7852:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7854:	6810      	ldr	r0, [r2, #0]
    7856:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7858:	43a8      	bics	r0, r5
    785a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    785c:	6818      	ldr	r0, [r3, #0]
    785e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7860:	43a8      	bics	r0, r5
    7862:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7864:	6818      	ldr	r0, [r3, #0]
    7866:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7868:	4328      	orrs	r0, r5
    786a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    786c:	6810      	ldr	r0, [r2, #0]
    786e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7870:	43a8      	bics	r0, r5
    7872:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7874:	6818      	ldr	r0, [r3, #0]
    7876:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7878:	43a8      	bics	r0, r5
    787a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    787c:	6818      	ldr	r0, [r3, #0]
    787e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7880:	4328      	orrs	r0, r5
    7882:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7884:	6810      	ldr	r0, [r2, #0]
    7886:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7888:	43a8      	bics	r0, r5
    788a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    788c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    788e:	6818      	ldr	r0, [r3, #0]
    7890:	43a8      	bics	r0, r5
    7892:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7894:	6818      	ldr	r0, [r3, #0]
    7896:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7898:	4328      	orrs	r0, r5
    789a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    789c:	6810      	ldr	r0, [r2, #0]
    789e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    78a0:	43a8      	bics	r0, r5
    78a2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    78a4:	6818      	ldr	r0, [r3, #0]
    78a6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    78a8:	43a8      	bics	r0, r5
    78aa:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    78ac:	6818      	ldr	r0, [r3, #0]
    78ae:	6da5      	ldr	r5, [r4, #88]	; 0x58
    78b0:	4328      	orrs	r0, r5
    78b2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    78b4:	6810      	ldr	r0, [r2, #0]
    78b6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    78b8:	43a8      	bics	r0, r5
    78ba:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    78bc:	6818      	ldr	r0, [r3, #0]
    78be:	6da5      	ldr	r5, [r4, #88]	; 0x58
    78c0:	43a8      	bics	r0, r5
    78c2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    78c4:	6818      	ldr	r0, [r3, #0]
    78c6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    78c8:	4328      	orrs	r0, r5
    78ca:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    78cc:	6810      	ldr	r0, [r2, #0]
    78ce:	6d25      	ldr	r5, [r4, #80]	; 0x50
    78d0:	43a8      	bics	r0, r5
    78d2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    78d4:	6818      	ldr	r0, [r3, #0]
    78d6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    78d8:	43a8      	bics	r0, r5
    78da:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    78dc:	6818      	ldr	r0, [r3, #0]
    78de:	6da5      	ldr	r5, [r4, #88]	; 0x58
    78e0:	4328      	orrs	r0, r5
    78e2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    78e4:	6810      	ldr	r0, [r2, #0]
    78e6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    78e8:	43a8      	bics	r0, r5
    78ea:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    78ec:	681a      	ldr	r2, [r3, #0]
    78ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
    78f0:	4382      	bics	r2, r0
    78f2:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    78f4:	681a      	ldr	r2, [r3, #0]
    78f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    78f8:	4302      	orrs	r2, r0
    78fa:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    78fc:	680b      	ldr	r3, [r1, #0]
    78fe:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7900:	4393      	bics	r3, r2
    7902:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    7904:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7906:	2b00      	cmp	r3, #0
    7908:	da01      	bge.n	790e <_ZN16Adafruit_ILI93415beginEm+0x2032>
    790a:	f002 faec 	bl	9ee6 <_ZN16Adafruit_ILI93415beginEm+0x460a>
    790e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    7910:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7912:	6810      	ldr	r0, [r2, #0]
    7914:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7916:	43a8      	bics	r0, r5
    7918:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    791a:	6818      	ldr	r0, [r3, #0]
    791c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    791e:	43a8      	bics	r0, r5
    7920:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7922:	6818      	ldr	r0, [r3, #0]
    7924:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7926:	4328      	orrs	r0, r5
    7928:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    792a:	6810      	ldr	r0, [r2, #0]
    792c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    792e:	43a8      	bics	r0, r5
    7930:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7932:	6818      	ldr	r0, [r3, #0]
    7934:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7936:	43a8      	bics	r0, r5
    7938:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    793a:	6818      	ldr	r0, [r3, #0]
    793c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    793e:	4328      	orrs	r0, r5
    7940:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7942:	6810      	ldr	r0, [r2, #0]
    7944:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7946:	4328      	orrs	r0, r5
    7948:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    794a:	6818      	ldr	r0, [r3, #0]
    794c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    794e:	43a8      	bics	r0, r5
    7950:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7952:	6818      	ldr	r0, [r3, #0]
    7954:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7956:	4328      	orrs	r0, r5
    7958:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    795a:	6810      	ldr	r0, [r2, #0]
    795c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    795e:	4328      	orrs	r0, r5
    7960:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7962:	6818      	ldr	r0, [r3, #0]
    7964:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7966:	43a8      	bics	r0, r5
    7968:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    796a:	6818      	ldr	r0, [r3, #0]
    796c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    796e:	4328      	orrs	r0, r5
    7970:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7972:	6810      	ldr	r0, [r2, #0]
    7974:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7976:	4328      	orrs	r0, r5
    7978:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    797a:	6818      	ldr	r0, [r3, #0]
    797c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    797e:	43a8      	bics	r0, r5
    7980:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7982:	6818      	ldr	r0, [r3, #0]
    7984:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7986:	4328      	orrs	r0, r5
    7988:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    798a:	6810      	ldr	r0, [r2, #0]
    798c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    798e:	43a8      	bics	r0, r5
    7990:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7992:	6818      	ldr	r0, [r3, #0]
    7994:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7996:	43a8      	bics	r0, r5
    7998:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    799a:	6818      	ldr	r0, [r3, #0]
    799c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    799e:	4328      	orrs	r0, r5
    79a0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    79a2:	6810      	ldr	r0, [r2, #0]
    79a4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    79a6:	4328      	orrs	r0, r5
    79a8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    79aa:	6818      	ldr	r0, [r3, #0]
    79ac:	6da5      	ldr	r5, [r4, #88]	; 0x58
    79ae:	43a8      	bics	r0, r5
    79b0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    79b2:	6da5      	ldr	r5, [r4, #88]	; 0x58
    79b4:	6818      	ldr	r0, [r3, #0]
    79b6:	4328      	orrs	r0, r5
    79b8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    79ba:	6810      	ldr	r0, [r2, #0]
    79bc:	6d25      	ldr	r5, [r4, #80]	; 0x50
    79be:	43a8      	bics	r0, r5
    79c0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    79c2:	681a      	ldr	r2, [r3, #0]
    79c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    79c6:	4382      	bics	r2, r0
    79c8:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    79ca:	681a      	ldr	r2, [r3, #0]
    79cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    79ce:	4302      	orrs	r2, r0
    79d0:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    79d2:	680b      	ldr	r3, [r1, #0]
    79d4:	6e22      	ldr	r2, [r4, #96]	; 0x60
    79d6:	4313      	orrs	r3, r2
    79d8:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    79da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    79dc:	2b00      	cmp	r3, #0
    79de:	da01      	bge.n	79e4 <_ZN16Adafruit_ILI93415beginEm+0x2108>
    79e0:	f002 fa88 	bl	9ef4 <_ZN16Adafruit_ILI93415beginEm+0x4618>
    79e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    79e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    79e8:	6811      	ldr	r1, [r2, #0]
    79ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
    79ec:	4381      	bics	r1, r0
    79ee:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    79f0:	6819      	ldr	r1, [r3, #0]
    79f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    79f4:	4381      	bics	r1, r0
    79f6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    79f8:	6819      	ldr	r1, [r3, #0]
    79fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    79fc:	4301      	orrs	r1, r0
    79fe:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7a00:	6811      	ldr	r1, [r2, #0]
    7a02:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7a04:	4301      	orrs	r1, r0
    7a06:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7a08:	6819      	ldr	r1, [r3, #0]
    7a0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a0c:	4381      	bics	r1, r0
    7a0e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7a10:	6819      	ldr	r1, [r3, #0]
    7a12:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a14:	4301      	orrs	r1, r0
    7a16:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7a18:	6811      	ldr	r1, [r2, #0]
    7a1a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7a1c:	4381      	bics	r1, r0
    7a1e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7a20:	6819      	ldr	r1, [r3, #0]
    7a22:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a24:	4381      	bics	r1, r0
    7a26:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7a28:	6819      	ldr	r1, [r3, #0]
    7a2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a2c:	4301      	orrs	r1, r0
    7a2e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7a30:	6811      	ldr	r1, [r2, #0]
    7a32:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7a34:	4301      	orrs	r1, r0
    7a36:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7a38:	6819      	ldr	r1, [r3, #0]
    7a3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a3c:	4381      	bics	r1, r0
    7a3e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7a40:	6819      	ldr	r1, [r3, #0]
    7a42:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a44:	4301      	orrs	r1, r0
    7a46:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7a48:	6811      	ldr	r1, [r2, #0]
    7a4a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7a4c:	4381      	bics	r1, r0
    7a4e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7a50:	6819      	ldr	r1, [r3, #0]
    7a52:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a54:	4381      	bics	r1, r0
    7a56:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7a58:	6819      	ldr	r1, [r3, #0]
    7a5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a5c:	4301      	orrs	r1, r0
    7a5e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7a60:	6811      	ldr	r1, [r2, #0]
    7a62:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7a64:	4301      	orrs	r1, r0
    7a66:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7a68:	6819      	ldr	r1, [r3, #0]
    7a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a6c:	4381      	bics	r1, r0
    7a6e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7a70:	6819      	ldr	r1, [r3, #0]
    7a72:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a74:	4301      	orrs	r1, r0
    7a76:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7a78:	6811      	ldr	r1, [r2, #0]
    7a7a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7a7c:	4381      	bics	r1, r0
    7a7e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7a80:	6819      	ldr	r1, [r3, #0]
    7a82:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a84:	4381      	bics	r1, r0
    7a86:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7a8a:	6819      	ldr	r1, [r3, #0]
    7a8c:	4301      	orrs	r1, r0
    7a8e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7a90:	6811      	ldr	r1, [r2, #0]
    7a92:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7a94:	4301      	orrs	r1, r0
    7a96:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7a98:	681a      	ldr	r2, [r3, #0]
    7a9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7a9c:	438a      	bics	r2, r1
    7a9e:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7aa0:	681a      	ldr	r2, [r3, #0]
    7aa2:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7aa4:	430a      	orrs	r2, r1
    7aa6:	601a      	str	r2, [r3, #0]
    writeCommand(ILI9341_FRMCTR1);
    7aa8:	21b1      	movs	r1, #177	; 0xb1
    7aaa:	0020      	movs	r0, r4
    7aac:	f7fd fe60 	bl	5770 <_ZN16Adafruit_ILI934112writeCommandEh>
    if(_sclk < 0){
    7ab0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7ab2:	2b00      	cmp	r3, #0
    7ab4:	da01      	bge.n	7aba <_ZN16Adafruit_ILI93415beginEm+0x21de>
    7ab6:	f002 fa23 	bl	9f00 <_ZN16Adafruit_ILI93415beginEm+0x4624>
    7aba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    7abc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7abe:	6811      	ldr	r1, [r2, #0]
    7ac0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7ac2:	4381      	bics	r1, r0
    7ac4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7ac6:	6819      	ldr	r1, [r3, #0]
    7ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7aca:	4381      	bics	r1, r0
    7acc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7ace:	6819      	ldr	r1, [r3, #0]
    7ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7ad2:	4301      	orrs	r1, r0
    7ad4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7ad6:	6811      	ldr	r1, [r2, #0]
    7ad8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7ada:	4381      	bics	r1, r0
    7adc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7ade:	6819      	ldr	r1, [r3, #0]
    7ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7ae2:	4381      	bics	r1, r0
    7ae4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7ae6:	6819      	ldr	r1, [r3, #0]
    7ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7aea:	4301      	orrs	r1, r0
    7aec:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7aee:	6811      	ldr	r1, [r2, #0]
    7af0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7af2:	4381      	bics	r1, r0
    7af4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7af6:	6819      	ldr	r1, [r3, #0]
    7af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7afa:	4381      	bics	r1, r0
    7afc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7afe:	6819      	ldr	r1, [r3, #0]
    7b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7b02:	4301      	orrs	r1, r0
    7b04:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7b06:	6811      	ldr	r1, [r2, #0]
    7b08:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7b0a:	4381      	bics	r1, r0
    7b0c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7b0e:	6819      	ldr	r1, [r3, #0]
    7b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7b12:	4381      	bics	r1, r0
    7b14:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7b16:	6819      	ldr	r1, [r3, #0]
    7b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7b1a:	4301      	orrs	r1, r0
    7b1c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7b1e:	6811      	ldr	r1, [r2, #0]
    7b20:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7b22:	4381      	bics	r1, r0
    7b24:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7b26:	6819      	ldr	r1, [r3, #0]
    7b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7b2a:	4381      	bics	r1, r0
    7b2c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7b2e:	6819      	ldr	r1, [r3, #0]
    7b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7b32:	4301      	orrs	r1, r0
    7b34:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7b36:	6811      	ldr	r1, [r2, #0]
    7b38:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7b3a:	4381      	bics	r1, r0
    7b3c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7b3e:	6819      	ldr	r1, [r3, #0]
    7b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7b42:	4381      	bics	r1, r0
    7b44:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7b46:	6819      	ldr	r1, [r3, #0]
    7b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7b4a:	4301      	orrs	r1, r0
    7b4c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7b4e:	6811      	ldr	r1, [r2, #0]
    7b50:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7b52:	4381      	bics	r1, r0
    7b54:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7b56:	6819      	ldr	r1, [r3, #0]
    7b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7b5a:	4381      	bics	r1, r0
    7b5c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7b5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7b60:	6819      	ldr	r1, [r3, #0]
    7b62:	4301      	orrs	r1, r0
    7b64:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7b66:	6811      	ldr	r1, [r2, #0]
    7b68:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7b6a:	4381      	bics	r1, r0
    7b6c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7b6e:	681a      	ldr	r2, [r3, #0]
    7b70:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7b72:	438a      	bics	r2, r1
    7b74:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7b76:	681a      	ldr	r2, [r3, #0]
    7b78:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7b7a:	430a      	orrs	r2, r1
    7b7c:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    7b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7b80:	2b00      	cmp	r3, #0
    7b82:	da01      	bge.n	7b88 <_ZN16Adafruit_ILI93415beginEm+0x22ac>
    7b84:	f002 fa7f 	bl	a086 <_ZN16Adafruit_ILI93415beginEm+0x47aa>
    7b88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    7b8a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7b8c:	6811      	ldr	r1, [r2, #0]
    7b8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7b90:	4381      	bics	r1, r0
    7b92:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7b94:	6819      	ldr	r1, [r3, #0]
    7b96:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7b98:	4381      	bics	r1, r0
    7b9a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7b9c:	6819      	ldr	r1, [r3, #0]
    7b9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7ba0:	4301      	orrs	r1, r0
    7ba2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7ba4:	6811      	ldr	r1, [r2, #0]
    7ba6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7ba8:	4381      	bics	r1, r0
    7baa:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7bac:	6819      	ldr	r1, [r3, #0]
    7bae:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7bb0:	4381      	bics	r1, r0
    7bb2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7bb4:	6819      	ldr	r1, [r3, #0]
    7bb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7bb8:	4301      	orrs	r1, r0
    7bba:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7bbc:	6811      	ldr	r1, [r2, #0]
    7bbe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7bc0:	4381      	bics	r1, r0
    7bc2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7bc4:	6819      	ldr	r1, [r3, #0]
    7bc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7bc8:	4381      	bics	r1, r0
    7bca:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7bcc:	6819      	ldr	r1, [r3, #0]
    7bce:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7bd0:	4301      	orrs	r1, r0
    7bd2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7bd4:	6811      	ldr	r1, [r2, #0]
    7bd6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7bd8:	4301      	orrs	r1, r0
    7bda:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7bdc:	6819      	ldr	r1, [r3, #0]
    7bde:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7be0:	4381      	bics	r1, r0
    7be2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7be4:	6819      	ldr	r1, [r3, #0]
    7be6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7be8:	4301      	orrs	r1, r0
    7bea:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7bec:	6811      	ldr	r1, [r2, #0]
    7bee:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7bf0:	4301      	orrs	r1, r0
    7bf2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7bf4:	6819      	ldr	r1, [r3, #0]
    7bf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7bf8:	4381      	bics	r1, r0
    7bfa:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7bfc:	6819      	ldr	r1, [r3, #0]
    7bfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7c00:	4301      	orrs	r1, r0
    7c02:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7c04:	6811      	ldr	r1, [r2, #0]
    7c06:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7c08:	4381      	bics	r1, r0
    7c0a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7c0c:	6819      	ldr	r1, [r3, #0]
    7c0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7c10:	4381      	bics	r1, r0
    7c12:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7c14:	6819      	ldr	r1, [r3, #0]
    7c16:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7c18:	4301      	orrs	r1, r0
    7c1a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7c1c:	6811      	ldr	r1, [r2, #0]
    7c1e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7c20:	4381      	bics	r1, r0
    7c22:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7c24:	6819      	ldr	r1, [r3, #0]
    7c26:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7c28:	4381      	bics	r1, r0
    7c2a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7c2e:	6819      	ldr	r1, [r3, #0]
    7c30:	4301      	orrs	r1, r0
    7c32:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7c34:	6811      	ldr	r1, [r2, #0]
    7c36:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7c38:	4381      	bics	r1, r0
    7c3a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7c3c:	681a      	ldr	r2, [r3, #0]
    7c3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7c40:	438a      	bics	r2, r1
    7c42:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7c44:	681a      	ldr	r2, [r3, #0]
    7c46:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7c48:	430a      	orrs	r2, r1
    7c4a:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    7c4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7c4e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7c50:	680b      	ldr	r3, [r1, #0]
    7c52:	4393      	bics	r3, r2
    7c54:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    7c56:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7c58:	2b00      	cmp	r3, #0
    7c5a:	da01      	bge.n	7c60 <_ZN16Adafruit_ILI93415beginEm+0x2384>
    7c5c:	f002 fa19 	bl	a092 <_ZN16Adafruit_ILI93415beginEm+0x47b6>
    7c60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    7c62:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7c64:	6810      	ldr	r0, [r2, #0]
    7c66:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7c68:	4328      	orrs	r0, r5
    7c6a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7c6c:	6818      	ldr	r0, [r3, #0]
    7c6e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7c70:	43a8      	bics	r0, r5
    7c72:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7c74:	6818      	ldr	r0, [r3, #0]
    7c76:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7c78:	4328      	orrs	r0, r5
    7c7a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7c7c:	6810      	ldr	r0, [r2, #0]
    7c7e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7c80:	43a8      	bics	r0, r5
    7c82:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7c84:	6818      	ldr	r0, [r3, #0]
    7c86:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7c88:	43a8      	bics	r0, r5
    7c8a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7c8c:	6818      	ldr	r0, [r3, #0]
    7c8e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7c90:	4328      	orrs	r0, r5
    7c92:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7c94:	6810      	ldr	r0, [r2, #0]
    7c96:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7c98:	4328      	orrs	r0, r5
    7c9a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7c9c:	6818      	ldr	r0, [r3, #0]
    7c9e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7ca0:	43a8      	bics	r0, r5
    7ca2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7ca4:	6818      	ldr	r0, [r3, #0]
    7ca6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7ca8:	4328      	orrs	r0, r5
    7caa:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7cac:	6810      	ldr	r0, [r2, #0]
    7cae:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7cb0:	4328      	orrs	r0, r5
    7cb2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7cb4:	6818      	ldr	r0, [r3, #0]
    7cb6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7cb8:	43a8      	bics	r0, r5
    7cba:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7cbc:	6818      	ldr	r0, [r3, #0]
    7cbe:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7cc0:	4328      	orrs	r0, r5
    7cc2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7cc4:	6810      	ldr	r0, [r2, #0]
    7cc6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7cc8:	43a8      	bics	r0, r5
    7cca:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7ccc:	6818      	ldr	r0, [r3, #0]
    7cce:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7cd0:	43a8      	bics	r0, r5
    7cd2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7cd4:	6818      	ldr	r0, [r3, #0]
    7cd6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7cd8:	4328      	orrs	r0, r5
    7cda:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7cdc:	6810      	ldr	r0, [r2, #0]
    7cde:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7ce0:	4328      	orrs	r0, r5
    7ce2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7ce4:	6818      	ldr	r0, [r3, #0]
    7ce6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7ce8:	43a8      	bics	r0, r5
    7cea:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7cec:	6818      	ldr	r0, [r3, #0]
    7cee:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7cf0:	4328      	orrs	r0, r5
    7cf2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7cf4:	6810      	ldr	r0, [r2, #0]
    7cf6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7cf8:	4328      	orrs	r0, r5
    7cfa:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7cfc:	6818      	ldr	r0, [r3, #0]
    7cfe:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7d00:	43a8      	bics	r0, r5
    7d02:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7d04:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7d06:	6818      	ldr	r0, [r3, #0]
    7d08:	4328      	orrs	r0, r5
    7d0a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    7d0c:	6810      	ldr	r0, [r2, #0]
    7d0e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7d10:	43a8      	bics	r0, r5
    7d12:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7d14:	681a      	ldr	r2, [r3, #0]
    7d16:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d18:	4382      	bics	r2, r0
    7d1a:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7d1c:	681a      	ldr	r2, [r3, #0]
    7d1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d20:	4302      	orrs	r2, r0
    7d22:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    7d24:	680b      	ldr	r3, [r1, #0]
    7d26:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7d28:	4313      	orrs	r3, r2
    7d2a:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    7d2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7d2e:	2b00      	cmp	r3, #0
    7d30:	da01      	bge.n	7d36 <_ZN16Adafruit_ILI93415beginEm+0x245a>
    7d32:	f002 f9b5 	bl	a0a0 <_ZN16Adafruit_ILI93415beginEm+0x47c4>
    7d36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    7d38:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7d3a:	6811      	ldr	r1, [r2, #0]
    7d3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7d3e:	4381      	bics	r1, r0
    7d40:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7d42:	6819      	ldr	r1, [r3, #0]
    7d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d46:	4381      	bics	r1, r0
    7d48:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7d4a:	6819      	ldr	r1, [r3, #0]
    7d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d4e:	4301      	orrs	r1, r0
    7d50:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7d52:	6811      	ldr	r1, [r2, #0]
    7d54:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7d56:	4381      	bics	r1, r0
    7d58:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7d5a:	6819      	ldr	r1, [r3, #0]
    7d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d5e:	4381      	bics	r1, r0
    7d60:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7d62:	6819      	ldr	r1, [r3, #0]
    7d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d66:	4301      	orrs	r1, r0
    7d68:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7d6a:	6811      	ldr	r1, [r2, #0]
    7d6c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7d6e:	4381      	bics	r1, r0
    7d70:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7d72:	6819      	ldr	r1, [r3, #0]
    7d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d76:	4381      	bics	r1, r0
    7d78:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7d7a:	6819      	ldr	r1, [r3, #0]
    7d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d7e:	4301      	orrs	r1, r0
    7d80:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7d82:	6811      	ldr	r1, [r2, #0]
    7d84:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7d86:	4381      	bics	r1, r0
    7d88:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7d8a:	6819      	ldr	r1, [r3, #0]
    7d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d8e:	4381      	bics	r1, r0
    7d90:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7d92:	6819      	ldr	r1, [r3, #0]
    7d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7d96:	4301      	orrs	r1, r0
    7d98:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7d9a:	6811      	ldr	r1, [r2, #0]
    7d9c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7d9e:	4301      	orrs	r1, r0
    7da0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7da2:	6819      	ldr	r1, [r3, #0]
    7da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7da6:	4381      	bics	r1, r0
    7da8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7daa:	6819      	ldr	r1, [r3, #0]
    7dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7dae:	4301      	orrs	r1, r0
    7db0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7db2:	6811      	ldr	r1, [r2, #0]
    7db4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7db6:	4381      	bics	r1, r0
    7db8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7dba:	6819      	ldr	r1, [r3, #0]
    7dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7dbe:	4381      	bics	r1, r0
    7dc0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7dc2:	6819      	ldr	r1, [r3, #0]
    7dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7dc6:	4301      	orrs	r1, r0
    7dc8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7dca:	6811      	ldr	r1, [r2, #0]
    7dcc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7dce:	4381      	bics	r1, r0
    7dd0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7dd2:	6819      	ldr	r1, [r3, #0]
    7dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7dd6:	4381      	bics	r1, r0
    7dd8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7dda:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7ddc:	6819      	ldr	r1, [r3, #0]
    7dde:	4301      	orrs	r1, r0
    7de0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7de2:	6811      	ldr	r1, [r2, #0]
    7de4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7de6:	4381      	bics	r1, r0
    7de8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7dea:	681a      	ldr	r2, [r3, #0]
    7dec:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7dee:	438a      	bics	r2, r1
    7df0:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7df2:	681a      	ldr	r2, [r3, #0]
    7df4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7df6:	430a      	orrs	r2, r1
    7df8:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    7dfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7dfc:	2b00      	cmp	r3, #0
    7dfe:	da01      	bge.n	7e04 <_ZN16Adafruit_ILI93415beginEm+0x2528>
    7e00:	f002 f954 	bl	a0ac <_ZN16Adafruit_ILI93415beginEm+0x47d0>
    7e04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    7e06:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7e08:	6811      	ldr	r1, [r2, #0]
    7e0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7e0c:	4301      	orrs	r1, r0
    7e0e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7e10:	6819      	ldr	r1, [r3, #0]
    7e12:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e14:	4381      	bics	r1, r0
    7e16:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7e18:	6819      	ldr	r1, [r3, #0]
    7e1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e1c:	4301      	orrs	r1, r0
    7e1e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7e20:	6811      	ldr	r1, [r2, #0]
    7e22:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7e24:	4381      	bics	r1, r0
    7e26:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7e28:	6819      	ldr	r1, [r3, #0]
    7e2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e2c:	4381      	bics	r1, r0
    7e2e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7e30:	6819      	ldr	r1, [r3, #0]
    7e32:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e34:	4301      	orrs	r1, r0
    7e36:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7e38:	6811      	ldr	r1, [r2, #0]
    7e3a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7e3c:	4381      	bics	r1, r0
    7e3e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7e40:	6819      	ldr	r1, [r3, #0]
    7e42:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e44:	4381      	bics	r1, r0
    7e46:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7e48:	6819      	ldr	r1, [r3, #0]
    7e4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e4c:	4301      	orrs	r1, r0
    7e4e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7e50:	6811      	ldr	r1, [r2, #0]
    7e52:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7e54:	4381      	bics	r1, r0
    7e56:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7e58:	6819      	ldr	r1, [r3, #0]
    7e5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e5c:	4381      	bics	r1, r0
    7e5e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7e60:	6819      	ldr	r1, [r3, #0]
    7e62:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e64:	4301      	orrs	r1, r0
    7e66:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7e68:	6811      	ldr	r1, [r2, #0]
    7e6a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7e6c:	4381      	bics	r1, r0
    7e6e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7e70:	6819      	ldr	r1, [r3, #0]
    7e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e74:	4381      	bics	r1, r0
    7e76:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7e78:	6819      	ldr	r1, [r3, #0]
    7e7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e7c:	4301      	orrs	r1, r0
    7e7e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7e80:	6811      	ldr	r1, [r2, #0]
    7e82:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7e84:	4381      	bics	r1, r0
    7e86:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7e88:	6819      	ldr	r1, [r3, #0]
    7e8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e8c:	4381      	bics	r1, r0
    7e8e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7e90:	6819      	ldr	r1, [r3, #0]
    7e92:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7e94:	4301      	orrs	r1, r0
    7e96:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7e98:	6811      	ldr	r1, [r2, #0]
    7e9a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7e9c:	4301      	orrs	r1, r0
    7e9e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7ea0:	6819      	ldr	r1, [r3, #0]
    7ea2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7ea4:	4381      	bics	r1, r0
    7ea6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7eaa:	6819      	ldr	r1, [r3, #0]
    7eac:	4301      	orrs	r1, r0
    7eae:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7eb0:	6811      	ldr	r1, [r2, #0]
    7eb2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7eb4:	4381      	bics	r1, r0
    7eb6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7eb8:	681a      	ldr	r2, [r3, #0]
    7eba:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7ebc:	438a      	bics	r2, r1
    7ebe:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7ec0:	681a      	ldr	r2, [r3, #0]
    7ec2:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7ec4:	430a      	orrs	r2, r1
    7ec6:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    7ec8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7eca:	2b00      	cmp	r3, #0
    7ecc:	da01      	bge.n	7ed2 <_ZN16Adafruit_ILI93415beginEm+0x25f6>
    7ece:	f002 f8f3 	bl	a0b8 <_ZN16Adafruit_ILI93415beginEm+0x47dc>
    7ed2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    7ed4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7ed6:	6811      	ldr	r1, [r2, #0]
    7ed8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7eda:	4381      	bics	r1, r0
    7edc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7ede:	6819      	ldr	r1, [r3, #0]
    7ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7ee2:	4381      	bics	r1, r0
    7ee4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7ee6:	6819      	ldr	r1, [r3, #0]
    7ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7eea:	4301      	orrs	r1, r0
    7eec:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7eee:	6811      	ldr	r1, [r2, #0]
    7ef0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7ef2:	4381      	bics	r1, r0
    7ef4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7ef6:	6819      	ldr	r1, [r3, #0]
    7ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7efa:	4381      	bics	r1, r0
    7efc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7efe:	6819      	ldr	r1, [r3, #0]
    7f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f02:	4301      	orrs	r1, r0
    7f04:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7f06:	6811      	ldr	r1, [r2, #0]
    7f08:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7f0a:	4301      	orrs	r1, r0
    7f0c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7f0e:	6819      	ldr	r1, [r3, #0]
    7f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f12:	4381      	bics	r1, r0
    7f14:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7f16:	6819      	ldr	r1, [r3, #0]
    7f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f1a:	4301      	orrs	r1, r0
    7f1c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7f1e:	6811      	ldr	r1, [r2, #0]
    7f20:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7f22:	4381      	bics	r1, r0
    7f24:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7f26:	6819      	ldr	r1, [r3, #0]
    7f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f2a:	4381      	bics	r1, r0
    7f2c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7f2e:	6819      	ldr	r1, [r3, #0]
    7f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f32:	4301      	orrs	r1, r0
    7f34:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    7f36:	6811      	ldr	r1, [r2, #0]
    7f38:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7f3a:	4381      	bics	r1, r0
    7f3c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7f3e:	6819      	ldr	r1, [r3, #0]
    7f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f42:	4381      	bics	r1, r0
    7f44:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7f46:	6819      	ldr	r1, [r3, #0]
    7f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f4a:	4301      	orrs	r1, r0
    7f4c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7f4e:	6811      	ldr	r1, [r2, #0]
    7f50:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7f52:	4301      	orrs	r1, r0
    7f54:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7f56:	6819      	ldr	r1, [r3, #0]
    7f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f5a:	4381      	bics	r1, r0
    7f5c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7f5e:	6819      	ldr	r1, [r3, #0]
    7f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f62:	4301      	orrs	r1, r0
    7f64:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7f66:	6811      	ldr	r1, [r2, #0]
    7f68:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7f6a:	4301      	orrs	r1, r0
    7f6c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7f6e:	6819      	ldr	r1, [r3, #0]
    7f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f72:	4381      	bics	r1, r0
    7f74:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    7f76:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7f78:	6819      	ldr	r1, [r3, #0]
    7f7a:	4301      	orrs	r1, r0
    7f7c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    7f7e:	6811      	ldr	r1, [r2, #0]
    7f80:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7f82:	4301      	orrs	r1, r0
    7f84:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    7f86:	681a      	ldr	r2, [r3, #0]
    7f88:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7f8a:	438a      	bics	r2, r1
    7f8c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7f8e:	681a      	ldr	r2, [r3, #0]
    7f90:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7f92:	430a      	orrs	r2, r1
    7f94:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    7f96:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7f98:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7f9a:	680b      	ldr	r3, [r1, #0]
    7f9c:	4393      	bics	r3, r2
    7f9e:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    7fa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7fa2:	2b00      	cmp	r3, #0
    7fa4:	da01      	bge.n	7faa <_ZN16Adafruit_ILI93415beginEm+0x26ce>
    7fa6:	f001 ffb1 	bl	9f0c <_ZN16Adafruit_ILI93415beginEm+0x4630>
    7faa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    7fac:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7fae:	6810      	ldr	r0, [r2, #0]
    7fb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7fb2:	4328      	orrs	r0, r5
    7fb4:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7fb6:	6818      	ldr	r0, [r3, #0]
    7fb8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7fba:	43a8      	bics	r0, r5
    7fbc:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7fbe:	6818      	ldr	r0, [r3, #0]
    7fc0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7fc2:	4328      	orrs	r0, r5
    7fc4:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7fc6:	6810      	ldr	r0, [r2, #0]
    7fc8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7fca:	4328      	orrs	r0, r5
    7fcc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7fce:	6818      	ldr	r0, [r3, #0]
    7fd0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7fd2:	43a8      	bics	r0, r5
    7fd4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7fd6:	6818      	ldr	r0, [r3, #0]
    7fd8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7fda:	4328      	orrs	r0, r5
    7fdc:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7fde:	6810      	ldr	r0, [r2, #0]
    7fe0:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7fe2:	4328      	orrs	r0, r5
    7fe4:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7fe6:	6818      	ldr	r0, [r3, #0]
    7fe8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7fea:	43a8      	bics	r0, r5
    7fec:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    7fee:	6818      	ldr	r0, [r3, #0]
    7ff0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    7ff2:	4328      	orrs	r0, r5
    7ff4:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    7ff6:	6810      	ldr	r0, [r2, #0]
    7ff8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    7ffa:	4328      	orrs	r0, r5
    7ffc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    7ffe:	6818      	ldr	r0, [r3, #0]
    8000:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8002:	43a8      	bics	r0, r5
    8004:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8006:	6818      	ldr	r0, [r3, #0]
    8008:	6da5      	ldr	r5, [r4, #88]	; 0x58
    800a:	4328      	orrs	r0, r5
    800c:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    800e:	6810      	ldr	r0, [r2, #0]
    8010:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8012:	43a8      	bics	r0, r5
    8014:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8016:	6818      	ldr	r0, [r3, #0]
    8018:	6da5      	ldr	r5, [r4, #88]	; 0x58
    801a:	43a8      	bics	r0, r5
    801c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    801e:	6818      	ldr	r0, [r3, #0]
    8020:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8022:	4328      	orrs	r0, r5
    8024:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    8026:	6810      	ldr	r0, [r2, #0]
    8028:	6d25      	ldr	r5, [r4, #80]	; 0x50
    802a:	43a8      	bics	r0, r5
    802c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    802e:	6818      	ldr	r0, [r3, #0]
    8030:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8032:	43a8      	bics	r0, r5
    8034:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8036:	6818      	ldr	r0, [r3, #0]
    8038:	6da5      	ldr	r5, [r4, #88]	; 0x58
    803a:	4328      	orrs	r0, r5
    803c:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    803e:	6810      	ldr	r0, [r2, #0]
    8040:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8042:	4328      	orrs	r0, r5
    8044:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8046:	6818      	ldr	r0, [r3, #0]
    8048:	6da5      	ldr	r5, [r4, #88]	; 0x58
    804a:	43a8      	bics	r0, r5
    804c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    804e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8050:	6818      	ldr	r0, [r3, #0]
    8052:	4328      	orrs	r0, r5
    8054:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    8056:	6810      	ldr	r0, [r2, #0]
    8058:	6d25      	ldr	r5, [r4, #80]	; 0x50
    805a:	43a8      	bics	r0, r5
    805c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    805e:	681a      	ldr	r2, [r3, #0]
    8060:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8062:	4382      	bics	r2, r0
    8064:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8066:	681a      	ldr	r2, [r3, #0]
    8068:	6da0      	ldr	r0, [r4, #88]	; 0x58
    806a:	4302      	orrs	r2, r0
    806c:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    806e:	680b      	ldr	r3, [r1, #0]
    8070:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8072:	4313      	orrs	r3, r2
    8074:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    8076:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8078:	2b00      	cmp	r3, #0
    807a:	da01      	bge.n	8080 <_ZN16Adafruit_ILI93415beginEm+0x27a4>
    807c:	f001 ff4d 	bl	9f1a <_ZN16Adafruit_ILI93415beginEm+0x463e>
    8080:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8082:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8084:	6810      	ldr	r0, [r2, #0]
    8086:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8088:	43a8      	bics	r0, r5
    808a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    808c:	6818      	ldr	r0, [r3, #0]
    808e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8090:	43a8      	bics	r0, r5
    8092:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8094:	6818      	ldr	r0, [r3, #0]
    8096:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8098:	4328      	orrs	r0, r5
    809a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    809c:	6810      	ldr	r0, [r2, #0]
    809e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    80a0:	43a8      	bics	r0, r5
    80a2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    80a4:	6818      	ldr	r0, [r3, #0]
    80a6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    80a8:	43a8      	bics	r0, r5
    80aa:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    80ac:	6818      	ldr	r0, [r3, #0]
    80ae:	6da5      	ldr	r5, [r4, #88]	; 0x58
    80b0:	4328      	orrs	r0, r5
    80b2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    80b4:	6810      	ldr	r0, [r2, #0]
    80b6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    80b8:	43a8      	bics	r0, r5
    80ba:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    80bc:	6818      	ldr	r0, [r3, #0]
    80be:	6da5      	ldr	r5, [r4, #88]	; 0x58
    80c0:	43a8      	bics	r0, r5
    80c2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    80c4:	6818      	ldr	r0, [r3, #0]
    80c6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    80c8:	4328      	orrs	r0, r5
    80ca:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    80cc:	6810      	ldr	r0, [r2, #0]
    80ce:	6d25      	ldr	r5, [r4, #80]	; 0x50
    80d0:	43a8      	bics	r0, r5
    80d2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    80d4:	6818      	ldr	r0, [r3, #0]
    80d6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    80d8:	43a8      	bics	r0, r5
    80da:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    80dc:	6818      	ldr	r0, [r3, #0]
    80de:	6da5      	ldr	r5, [r4, #88]	; 0x58
    80e0:	4328      	orrs	r0, r5
    80e2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    80e4:	6810      	ldr	r0, [r2, #0]
    80e6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    80e8:	43a8      	bics	r0, r5
    80ea:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    80ec:	6818      	ldr	r0, [r3, #0]
    80ee:	6da5      	ldr	r5, [r4, #88]	; 0x58
    80f0:	43a8      	bics	r0, r5
    80f2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    80f4:	6818      	ldr	r0, [r3, #0]
    80f6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    80f8:	4328      	orrs	r0, r5
    80fa:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    80fc:	6810      	ldr	r0, [r2, #0]
    80fe:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8100:	43a8      	bics	r0, r5
    8102:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8104:	6818      	ldr	r0, [r3, #0]
    8106:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8108:	43a8      	bics	r0, r5
    810a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    810c:	6818      	ldr	r0, [r3, #0]
    810e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8110:	4328      	orrs	r0, r5
    8112:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    8114:	6810      	ldr	r0, [r2, #0]
    8116:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8118:	43a8      	bics	r0, r5
    811a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    811c:	6818      	ldr	r0, [r3, #0]
    811e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8120:	43a8      	bics	r0, r5
    8122:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8124:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8126:	6818      	ldr	r0, [r3, #0]
    8128:	4328      	orrs	r0, r5
    812a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    812c:	6810      	ldr	r0, [r2, #0]
    812e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8130:	43a8      	bics	r0, r5
    8132:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8134:	681a      	ldr	r2, [r3, #0]
    8136:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8138:	4382      	bics	r2, r0
    813a:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    813c:	681a      	ldr	r2, [r3, #0]
    813e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8140:	4302      	orrs	r2, r0
    8142:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    8144:	680b      	ldr	r3, [r1, #0]
    8146:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8148:	4393      	bics	r3, r2
    814a:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    814c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    814e:	2b00      	cmp	r3, #0
    8150:	da01      	bge.n	8156 <_ZN16Adafruit_ILI93415beginEm+0x287a>
    8152:	f001 fee9 	bl	9f28 <_ZN16Adafruit_ILI93415beginEm+0x464c>
    8156:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8158:	6d25      	ldr	r5, [r4, #80]	; 0x50
    815a:	6810      	ldr	r0, [r2, #0]
    815c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    815e:	43a8      	bics	r0, r5
    8160:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8162:	6818      	ldr	r0, [r3, #0]
    8164:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8166:	43a8      	bics	r0, r5
    8168:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    816a:	6818      	ldr	r0, [r3, #0]
    816c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    816e:	4328      	orrs	r0, r5
    8170:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    8172:	6810      	ldr	r0, [r2, #0]
    8174:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8176:	43a8      	bics	r0, r5
    8178:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    817a:	6818      	ldr	r0, [r3, #0]
    817c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    817e:	43a8      	bics	r0, r5
    8180:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8182:	6818      	ldr	r0, [r3, #0]
    8184:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8186:	4328      	orrs	r0, r5
    8188:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    818a:	6810      	ldr	r0, [r2, #0]
    818c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    818e:	4328      	orrs	r0, r5
    8190:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8192:	6818      	ldr	r0, [r3, #0]
    8194:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8196:	43a8      	bics	r0, r5
    8198:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    819a:	6818      	ldr	r0, [r3, #0]
    819c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    819e:	4328      	orrs	r0, r5
    81a0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    81a2:	6810      	ldr	r0, [r2, #0]
    81a4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    81a6:	43a8      	bics	r0, r5
    81a8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    81aa:	6818      	ldr	r0, [r3, #0]
    81ac:	6da5      	ldr	r5, [r4, #88]	; 0x58
    81ae:	43a8      	bics	r0, r5
    81b0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    81b2:	6818      	ldr	r0, [r3, #0]
    81b4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    81b6:	4328      	orrs	r0, r5
    81b8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    81ba:	6810      	ldr	r0, [r2, #0]
    81bc:	6d25      	ldr	r5, [r4, #80]	; 0x50
    81be:	43a8      	bics	r0, r5
    81c0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    81c2:	6818      	ldr	r0, [r3, #0]
    81c4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    81c6:	43a8      	bics	r0, r5
    81c8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    81ca:	6818      	ldr	r0, [r3, #0]
    81cc:	6da5      	ldr	r5, [r4, #88]	; 0x58
    81ce:	4328      	orrs	r0, r5
    81d0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    81d2:	6810      	ldr	r0, [r2, #0]
    81d4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    81d6:	4328      	orrs	r0, r5
    81d8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    81da:	6818      	ldr	r0, [r3, #0]
    81dc:	6da5      	ldr	r5, [r4, #88]	; 0x58
    81de:	43a8      	bics	r0, r5
    81e0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    81e2:	6818      	ldr	r0, [r3, #0]
    81e4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    81e6:	4328      	orrs	r0, r5
    81e8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    81ea:	6810      	ldr	r0, [r2, #0]
    81ec:	6d25      	ldr	r5, [r4, #80]	; 0x50
    81ee:	4328      	orrs	r0, r5
    81f0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    81f2:	6818      	ldr	r0, [r3, #0]
    81f4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    81f6:	43a8      	bics	r0, r5
    81f8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    81fa:	6da5      	ldr	r5, [r4, #88]	; 0x58
    81fc:	6818      	ldr	r0, [r3, #0]
    81fe:	4328      	orrs	r0, r5
    8200:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    8202:	6810      	ldr	r0, [r2, #0]
    8204:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8206:	43a8      	bics	r0, r5
    8208:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    820a:	681a      	ldr	r2, [r3, #0]
    820c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    820e:	4382      	bics	r2, r0
    8210:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8212:	681a      	ldr	r2, [r3, #0]
    8214:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8216:	4302      	orrs	r2, r0
    8218:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    821a:	680b      	ldr	r3, [r1, #0]
    821c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    821e:	4313      	orrs	r3, r2
    8220:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    8222:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8224:	2b00      	cmp	r3, #0
    8226:	da01      	bge.n	822c <_ZN16Adafruit_ILI93415beginEm+0x2950>
    8228:	f001 fe0f 	bl	9e4a <_ZN16Adafruit_ILI93415beginEm+0x456e>
    822c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    822e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8230:	6811      	ldr	r1, [r2, #0]
    8232:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8234:	4381      	bics	r1, r0
    8236:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8238:	6819      	ldr	r1, [r3, #0]
    823a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    823c:	4381      	bics	r1, r0
    823e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8240:	6819      	ldr	r1, [r3, #0]
    8242:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8244:	4301      	orrs	r1, r0
    8246:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8248:	6811      	ldr	r1, [r2, #0]
    824a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    824c:	4381      	bics	r1, r0
    824e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8250:	6819      	ldr	r1, [r3, #0]
    8252:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8254:	4381      	bics	r1, r0
    8256:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8258:	6819      	ldr	r1, [r3, #0]
    825a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    825c:	4301      	orrs	r1, r0
    825e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8260:	6811      	ldr	r1, [r2, #0]
    8262:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8264:	4381      	bics	r1, r0
    8266:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8268:	6819      	ldr	r1, [r3, #0]
    826a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    826c:	4381      	bics	r1, r0
    826e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8270:	6819      	ldr	r1, [r3, #0]
    8272:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8274:	4301      	orrs	r1, r0
    8276:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8278:	6811      	ldr	r1, [r2, #0]
    827a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    827c:	4381      	bics	r1, r0
    827e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8280:	6819      	ldr	r1, [r3, #0]
    8282:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8284:	4381      	bics	r1, r0
    8286:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8288:	6819      	ldr	r1, [r3, #0]
    828a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    828c:	4301      	orrs	r1, r0
    828e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8290:	6811      	ldr	r1, [r2, #0]
    8292:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8294:	4381      	bics	r1, r0
    8296:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8298:	6819      	ldr	r1, [r3, #0]
    829a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    829c:	4381      	bics	r1, r0
    829e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    82a0:	6819      	ldr	r1, [r3, #0]
    82a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    82a4:	4301      	orrs	r1, r0
    82a6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    82a8:	6811      	ldr	r1, [r2, #0]
    82aa:	6d20      	ldr	r0, [r4, #80]	; 0x50
    82ac:	4381      	bics	r1, r0
    82ae:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    82b0:	6819      	ldr	r1, [r3, #0]
    82b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    82b4:	4381      	bics	r1, r0
    82b6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    82b8:	6819      	ldr	r1, [r3, #0]
    82ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
    82bc:	4301      	orrs	r1, r0
    82be:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    82c0:	6811      	ldr	r1, [r2, #0]
    82c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    82c4:	4381      	bics	r1, r0
    82c6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    82c8:	6819      	ldr	r1, [r3, #0]
    82ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
    82cc:	4381      	bics	r1, r0
    82ce:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    82d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    82d2:	6819      	ldr	r1, [r3, #0]
    82d4:	4301      	orrs	r1, r0
    82d6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    82d8:	6811      	ldr	r1, [r2, #0]
    82da:	6d20      	ldr	r0, [r4, #80]	; 0x50
    82dc:	4301      	orrs	r1, r0
    82de:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    82e0:	681a      	ldr	r2, [r3, #0]
    82e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
    82e4:	438a      	bics	r2, r1
    82e6:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    82e8:	681a      	ldr	r2, [r3, #0]
    82ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
    82ec:	430a      	orrs	r2, r1
    82ee:	601a      	str	r2, [r3, #0]
    writeCommand(ILI9341_GMCTRP1);    //Set Gamma
    82f0:	21e0      	movs	r1, #224	; 0xe0
    82f2:	0020      	movs	r0, r4
    82f4:	f7fd fa3c 	bl	5770 <_ZN16Adafruit_ILI934112writeCommandEh>
    if(_sclk < 0){
    82f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    82fa:	2b00      	cmp	r3, #0
    82fc:	da01      	bge.n	8302 <_ZN16Adafruit_ILI93415beginEm+0x2a26>
    82fe:	f001 fdaa 	bl	9e56 <_ZN16Adafruit_ILI93415beginEm+0x457a>
    8302:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8304:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8306:	6811      	ldr	r1, [r2, #0]
    8308:	6c63      	ldr	r3, [r4, #68]	; 0x44
    830a:	4381      	bics	r1, r0
    830c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    830e:	6819      	ldr	r1, [r3, #0]
    8310:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8312:	4381      	bics	r1, r0
    8314:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8316:	6819      	ldr	r1, [r3, #0]
    8318:	6da0      	ldr	r0, [r4, #88]	; 0x58
    831a:	4301      	orrs	r1, r0
    831c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    831e:	6811      	ldr	r1, [r2, #0]
    8320:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8322:	4381      	bics	r1, r0
    8324:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8326:	6819      	ldr	r1, [r3, #0]
    8328:	6da0      	ldr	r0, [r4, #88]	; 0x58
    832a:	4381      	bics	r1, r0
    832c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    832e:	6819      	ldr	r1, [r3, #0]
    8330:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8332:	4301      	orrs	r1, r0
    8334:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8336:	6811      	ldr	r1, [r2, #0]
    8338:	6d20      	ldr	r0, [r4, #80]	; 0x50
    833a:	4381      	bics	r1, r0
    833c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    833e:	6819      	ldr	r1, [r3, #0]
    8340:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8342:	4381      	bics	r1, r0
    8344:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8346:	6819      	ldr	r1, [r3, #0]
    8348:	6da0      	ldr	r0, [r4, #88]	; 0x58
    834a:	4301      	orrs	r1, r0
    834c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    834e:	6811      	ldr	r1, [r2, #0]
    8350:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8352:	4381      	bics	r1, r0
    8354:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8356:	6819      	ldr	r1, [r3, #0]
    8358:	6da0      	ldr	r0, [r4, #88]	; 0x58
    835a:	4381      	bics	r1, r0
    835c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    835e:	6819      	ldr	r1, [r3, #0]
    8360:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8362:	4301      	orrs	r1, r0
    8364:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8366:	6811      	ldr	r1, [r2, #0]
    8368:	6d20      	ldr	r0, [r4, #80]	; 0x50
    836a:	4301      	orrs	r1, r0
    836c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    836e:	6819      	ldr	r1, [r3, #0]
    8370:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8372:	4381      	bics	r1, r0
    8374:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8376:	6819      	ldr	r1, [r3, #0]
    8378:	6da0      	ldr	r0, [r4, #88]	; 0x58
    837a:	4301      	orrs	r1, r0
    837c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    837e:	6811      	ldr	r1, [r2, #0]
    8380:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8382:	4301      	orrs	r1, r0
    8384:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8386:	6819      	ldr	r1, [r3, #0]
    8388:	6da0      	ldr	r0, [r4, #88]	; 0x58
    838a:	4381      	bics	r1, r0
    838c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    838e:	6819      	ldr	r1, [r3, #0]
    8390:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8392:	4301      	orrs	r1, r0
    8394:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8396:	6811      	ldr	r1, [r2, #0]
    8398:	6d20      	ldr	r0, [r4, #80]	; 0x50
    839a:	4301      	orrs	r1, r0
    839c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    839e:	6819      	ldr	r1, [r3, #0]
    83a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    83a2:	4381      	bics	r1, r0
    83a4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    83a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    83a8:	6819      	ldr	r1, [r3, #0]
    83aa:	4301      	orrs	r1, r0
    83ac:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    83ae:	6811      	ldr	r1, [r2, #0]
    83b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    83b2:	4301      	orrs	r1, r0
    83b4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    83b6:	681a      	ldr	r2, [r3, #0]
    83b8:	6da1      	ldr	r1, [r4, #88]	; 0x58
    83ba:	438a      	bics	r2, r1
    83bc:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    83be:	681a      	ldr	r2, [r3, #0]
    83c0:	6da1      	ldr	r1, [r4, #88]	; 0x58
    83c2:	430a      	orrs	r2, r1
    83c4:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    83c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    83c8:	2b00      	cmp	r3, #0
    83ca:	da01      	bge.n	83d0 <_ZN16Adafruit_ILI93415beginEm+0x2af4>
    83cc:	f001 fd49 	bl	9e62 <_ZN16Adafruit_ILI93415beginEm+0x4586>
    83d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    83d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    83d4:	6811      	ldr	r1, [r2, #0]
    83d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    83d8:	4381      	bics	r1, r0
    83da:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    83dc:	6819      	ldr	r1, [r3, #0]
    83de:	6da0      	ldr	r0, [r4, #88]	; 0x58
    83e0:	4381      	bics	r1, r0
    83e2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    83e4:	6819      	ldr	r1, [r3, #0]
    83e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    83e8:	4301      	orrs	r1, r0
    83ea:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    83ec:	6811      	ldr	r1, [r2, #0]
    83ee:	6d20      	ldr	r0, [r4, #80]	; 0x50
    83f0:	4381      	bics	r1, r0
    83f2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    83f4:	6819      	ldr	r1, [r3, #0]
    83f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    83f8:	4381      	bics	r1, r0
    83fa:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    83fc:	6819      	ldr	r1, [r3, #0]
    83fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8400:	4301      	orrs	r1, r0
    8402:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8404:	6811      	ldr	r1, [r2, #0]
    8406:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8408:	4301      	orrs	r1, r0
    840a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    840c:	6819      	ldr	r1, [r3, #0]
    840e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8410:	4381      	bics	r1, r0
    8412:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8414:	6819      	ldr	r1, [r3, #0]
    8416:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8418:	4301      	orrs	r1, r0
    841a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    841c:	6811      	ldr	r1, [r2, #0]
    841e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8420:	4301      	orrs	r1, r0
    8422:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8424:	6819      	ldr	r1, [r3, #0]
    8426:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8428:	4381      	bics	r1, r0
    842a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    842c:	6819      	ldr	r1, [r3, #0]
    842e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8430:	4301      	orrs	r1, r0
    8432:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8434:	6811      	ldr	r1, [r2, #0]
    8436:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8438:	4381      	bics	r1, r0
    843a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    843c:	6819      	ldr	r1, [r3, #0]
    843e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8440:	4381      	bics	r1, r0
    8442:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8444:	6819      	ldr	r1, [r3, #0]
    8446:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8448:	4301      	orrs	r1, r0
    844a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    844c:	6811      	ldr	r1, [r2, #0]
    844e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8450:	4381      	bics	r1, r0
    8452:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8454:	6819      	ldr	r1, [r3, #0]
    8456:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8458:	4381      	bics	r1, r0
    845a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    845c:	6819      	ldr	r1, [r3, #0]
    845e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8460:	4301      	orrs	r1, r0
    8462:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8464:	6811      	ldr	r1, [r2, #0]
    8466:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8468:	4381      	bics	r1, r0
    846a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    846c:	6819      	ldr	r1, [r3, #0]
    846e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8470:	4381      	bics	r1, r0
    8472:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8474:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8476:	6819      	ldr	r1, [r3, #0]
    8478:	4301      	orrs	r1, r0
    847a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    847c:	6811      	ldr	r1, [r2, #0]
    847e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8480:	4301      	orrs	r1, r0
    8482:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8484:	681a      	ldr	r2, [r3, #0]
    8486:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8488:	438a      	bics	r2, r1
    848a:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    848c:	681a      	ldr	r2, [r3, #0]
    848e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8490:	430a      	orrs	r2, r1
    8492:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    8494:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8496:	2b00      	cmp	r3, #0
    8498:	da01      	bge.n	849e <_ZN16Adafruit_ILI93415beginEm+0x2bc2>
    849a:	f001 fce8 	bl	9e6e <_ZN16Adafruit_ILI93415beginEm+0x4592>
    849e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    84a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    84a2:	6811      	ldr	r1, [r2, #0]
    84a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    84a6:	4381      	bics	r1, r0
    84a8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    84aa:	6819      	ldr	r1, [r3, #0]
    84ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    84ae:	4381      	bics	r1, r0
    84b0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    84b2:	6819      	ldr	r1, [r3, #0]
    84b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    84b6:	4301      	orrs	r1, r0
    84b8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    84ba:	6811      	ldr	r1, [r2, #0]
    84bc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    84be:	4381      	bics	r1, r0
    84c0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    84c2:	6819      	ldr	r1, [r3, #0]
    84c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    84c6:	4381      	bics	r1, r0
    84c8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    84ca:	6819      	ldr	r1, [r3, #0]
    84cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    84ce:	4301      	orrs	r1, r0
    84d0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    84d2:	6811      	ldr	r1, [r2, #0]
    84d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    84d6:	4301      	orrs	r1, r0
    84d8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    84da:	6819      	ldr	r1, [r3, #0]
    84dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    84de:	4381      	bics	r1, r0
    84e0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    84e2:	6819      	ldr	r1, [r3, #0]
    84e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    84e6:	4301      	orrs	r1, r0
    84e8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    84ea:	6811      	ldr	r1, [r2, #0]
    84ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
    84ee:	4381      	bics	r1, r0
    84f0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    84f2:	6819      	ldr	r1, [r3, #0]
    84f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    84f6:	4381      	bics	r1, r0
    84f8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    84fa:	6819      	ldr	r1, [r3, #0]
    84fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    84fe:	4301      	orrs	r1, r0
    8500:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8502:	6811      	ldr	r1, [r2, #0]
    8504:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8506:	4301      	orrs	r1, r0
    8508:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    850a:	6819      	ldr	r1, [r3, #0]
    850c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    850e:	4381      	bics	r1, r0
    8510:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8512:	6819      	ldr	r1, [r3, #0]
    8514:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8516:	4301      	orrs	r1, r0
    8518:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    851a:	6811      	ldr	r1, [r2, #0]
    851c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    851e:	4381      	bics	r1, r0
    8520:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8522:	6819      	ldr	r1, [r3, #0]
    8524:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8526:	4381      	bics	r1, r0
    8528:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    852a:	6819      	ldr	r1, [r3, #0]
    852c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    852e:	4301      	orrs	r1, r0
    8530:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8532:	6811      	ldr	r1, [r2, #0]
    8534:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8536:	4301      	orrs	r1, r0
    8538:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    853a:	6819      	ldr	r1, [r3, #0]
    853c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    853e:	4381      	bics	r1, r0
    8540:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8542:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8544:	6819      	ldr	r1, [r3, #0]
    8546:	4301      	orrs	r1, r0
    8548:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    854a:	6811      	ldr	r1, [r2, #0]
    854c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    854e:	4301      	orrs	r1, r0
    8550:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8552:	681a      	ldr	r2, [r3, #0]
    8554:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8556:	438a      	bics	r2, r1
    8558:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    855a:	681a      	ldr	r2, [r3, #0]
    855c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    855e:	430a      	orrs	r2, r1
    8560:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    8562:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8564:	2b00      	cmp	r3, #0
    8566:	da01      	bge.n	856c <_ZN16Adafruit_ILI93415beginEm+0x2c90>
    8568:	f001 fc87 	bl	9e7a <_ZN16Adafruit_ILI93415beginEm+0x459e>
    856c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    856e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8570:	6811      	ldr	r1, [r2, #0]
    8572:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8574:	4381      	bics	r1, r0
    8576:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8578:	6819      	ldr	r1, [r3, #0]
    857a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    857c:	4381      	bics	r1, r0
    857e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8580:	6819      	ldr	r1, [r3, #0]
    8582:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8584:	4301      	orrs	r1, r0
    8586:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8588:	6811      	ldr	r1, [r2, #0]
    858a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    858c:	4381      	bics	r1, r0
    858e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8590:	6819      	ldr	r1, [r3, #0]
    8592:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8594:	4381      	bics	r1, r0
    8596:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8598:	6819      	ldr	r1, [r3, #0]
    859a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    859c:	4301      	orrs	r1, r0
    859e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    85a0:	6811      	ldr	r1, [r2, #0]
    85a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    85a4:	4381      	bics	r1, r0
    85a6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    85a8:	6819      	ldr	r1, [r3, #0]
    85aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    85ac:	4381      	bics	r1, r0
    85ae:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    85b0:	6819      	ldr	r1, [r3, #0]
    85b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    85b4:	4301      	orrs	r1, r0
    85b6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    85b8:	6811      	ldr	r1, [r2, #0]
    85ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
    85bc:	4381      	bics	r1, r0
    85be:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    85c0:	6819      	ldr	r1, [r3, #0]
    85c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    85c4:	4381      	bics	r1, r0
    85c6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    85c8:	6819      	ldr	r1, [r3, #0]
    85ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
    85cc:	4301      	orrs	r1, r0
    85ce:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    85d0:	6811      	ldr	r1, [r2, #0]
    85d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    85d4:	4301      	orrs	r1, r0
    85d6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    85d8:	6819      	ldr	r1, [r3, #0]
    85da:	6da0      	ldr	r0, [r4, #88]	; 0x58
    85dc:	4381      	bics	r1, r0
    85de:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    85e0:	6819      	ldr	r1, [r3, #0]
    85e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    85e4:	4301      	orrs	r1, r0
    85e6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    85e8:	6811      	ldr	r1, [r2, #0]
    85ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
    85ec:	4301      	orrs	r1, r0
    85ee:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    85f0:	6819      	ldr	r1, [r3, #0]
    85f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    85f4:	4381      	bics	r1, r0
    85f6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    85f8:	6819      	ldr	r1, [r3, #0]
    85fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    85fc:	4301      	orrs	r1, r0
    85fe:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8600:	6811      	ldr	r1, [r2, #0]
    8602:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8604:	4381      	bics	r1, r0
    8606:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8608:	6819      	ldr	r1, [r3, #0]
    860a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    860c:	4381      	bics	r1, r0
    860e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8610:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8612:	6819      	ldr	r1, [r3, #0]
    8614:	4301      	orrs	r1, r0
    8616:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8618:	6811      	ldr	r1, [r2, #0]
    861a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    861c:	4381      	bics	r1, r0
    861e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8620:	681a      	ldr	r2, [r3, #0]
    8622:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8624:	438a      	bics	r2, r1
    8626:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8628:	681a      	ldr	r2, [r3, #0]
    862a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    862c:	430a      	orrs	r2, r1
    862e:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    8630:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8632:	2b00      	cmp	r3, #0
    8634:	da01      	bge.n	863a <_ZN16Adafruit_ILI93415beginEm+0x2d5e>
    8636:	f001 fc26 	bl	9e86 <_ZN16Adafruit_ILI93415beginEm+0x45aa>
    863a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    863c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    863e:	6811      	ldr	r1, [r2, #0]
    8640:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8642:	4381      	bics	r1, r0
    8644:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8646:	6819      	ldr	r1, [r3, #0]
    8648:	6da0      	ldr	r0, [r4, #88]	; 0x58
    864a:	4381      	bics	r1, r0
    864c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    864e:	6819      	ldr	r1, [r3, #0]
    8650:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8652:	4301      	orrs	r1, r0
    8654:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8656:	6811      	ldr	r1, [r2, #0]
    8658:	6d20      	ldr	r0, [r4, #80]	; 0x50
    865a:	4381      	bics	r1, r0
    865c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    865e:	6819      	ldr	r1, [r3, #0]
    8660:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8662:	4381      	bics	r1, r0
    8664:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8666:	6819      	ldr	r1, [r3, #0]
    8668:	6da0      	ldr	r0, [r4, #88]	; 0x58
    866a:	4301      	orrs	r1, r0
    866c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    866e:	6811      	ldr	r1, [r2, #0]
    8670:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8672:	4381      	bics	r1, r0
    8674:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8676:	6819      	ldr	r1, [r3, #0]
    8678:	6da0      	ldr	r0, [r4, #88]	; 0x58
    867a:	4381      	bics	r1, r0
    867c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    867e:	6819      	ldr	r1, [r3, #0]
    8680:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8682:	4301      	orrs	r1, r0
    8684:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8686:	6811      	ldr	r1, [r2, #0]
    8688:	6d20      	ldr	r0, [r4, #80]	; 0x50
    868a:	4381      	bics	r1, r0
    868c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    868e:	6819      	ldr	r1, [r3, #0]
    8690:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8692:	4381      	bics	r1, r0
    8694:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8696:	6819      	ldr	r1, [r3, #0]
    8698:	6da0      	ldr	r0, [r4, #88]	; 0x58
    869a:	4301      	orrs	r1, r0
    869c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    869e:	6811      	ldr	r1, [r2, #0]
    86a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    86a2:	4301      	orrs	r1, r0
    86a4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    86a6:	6819      	ldr	r1, [r3, #0]
    86a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    86aa:	4381      	bics	r1, r0
    86ac:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    86ae:	6819      	ldr	r1, [r3, #0]
    86b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    86b2:	4301      	orrs	r1, r0
    86b4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    86b6:	6811      	ldr	r1, [r2, #0]
    86b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    86ba:	4301      	orrs	r1, r0
    86bc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    86be:	6819      	ldr	r1, [r3, #0]
    86c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    86c2:	4381      	bics	r1, r0
    86c4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    86c6:	6819      	ldr	r1, [r3, #0]
    86c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    86ca:	4301      	orrs	r1, r0
    86cc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    86ce:	6811      	ldr	r1, [r2, #0]
    86d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    86d2:	4301      	orrs	r1, r0
    86d4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    86d6:	6819      	ldr	r1, [r3, #0]
    86d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    86da:	4381      	bics	r1, r0
    86dc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    86de:	6da0      	ldr	r0, [r4, #88]	; 0x58
    86e0:	6819      	ldr	r1, [r3, #0]
    86e2:	4301      	orrs	r1, r0
    86e4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    86e6:	6811      	ldr	r1, [r2, #0]
    86e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    86ea:	4381      	bics	r1, r0
    86ec:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    86ee:	681a      	ldr	r2, [r3, #0]
    86f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
    86f2:	438a      	bics	r2, r1
    86f4:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    86f6:	681a      	ldr	r2, [r3, #0]
    86f8:	6da1      	ldr	r1, [r4, #88]	; 0x58
    86fa:	430a      	orrs	r2, r1
    86fc:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    86fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8700:	2b00      	cmp	r3, #0
    8702:	da01      	bge.n	8708 <_ZN16Adafruit_ILI93415beginEm+0x2e2c>
    8704:	f001 fbc5 	bl	9e92 <_ZN16Adafruit_ILI93415beginEm+0x45b6>
    8708:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    870a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    870c:	6811      	ldr	r1, [r2, #0]
    870e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8710:	4381      	bics	r1, r0
    8712:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8714:	6819      	ldr	r1, [r3, #0]
    8716:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8718:	4381      	bics	r1, r0
    871a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    871c:	6819      	ldr	r1, [r3, #0]
    871e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8720:	4301      	orrs	r1, r0
    8722:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8724:	6811      	ldr	r1, [r2, #0]
    8726:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8728:	4381      	bics	r1, r0
    872a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    872c:	6819      	ldr	r1, [r3, #0]
    872e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8730:	4381      	bics	r1, r0
    8732:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8734:	6819      	ldr	r1, [r3, #0]
    8736:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8738:	4301      	orrs	r1, r0
    873a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    873c:	6811      	ldr	r1, [r2, #0]
    873e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8740:	4381      	bics	r1, r0
    8742:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8744:	6819      	ldr	r1, [r3, #0]
    8746:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8748:	4381      	bics	r1, r0
    874a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    874c:	6819      	ldr	r1, [r3, #0]
    874e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8750:	4301      	orrs	r1, r0
    8752:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8754:	6811      	ldr	r1, [r2, #0]
    8756:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8758:	4381      	bics	r1, r0
    875a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    875c:	6819      	ldr	r1, [r3, #0]
    875e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8760:	4381      	bics	r1, r0
    8762:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8764:	6819      	ldr	r1, [r3, #0]
    8766:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8768:	4301      	orrs	r1, r0
    876a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    876c:	6811      	ldr	r1, [r2, #0]
    876e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8770:	4301      	orrs	r1, r0
    8772:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8774:	6819      	ldr	r1, [r3, #0]
    8776:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8778:	4381      	bics	r1, r0
    877a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    877c:	6819      	ldr	r1, [r3, #0]
    877e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8780:	4301      	orrs	r1, r0
    8782:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8784:	6811      	ldr	r1, [r2, #0]
    8786:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8788:	4381      	bics	r1, r0
    878a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    878c:	6819      	ldr	r1, [r3, #0]
    878e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8790:	4381      	bics	r1, r0
    8792:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8794:	6819      	ldr	r1, [r3, #0]
    8796:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8798:	4301      	orrs	r1, r0
    879a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    879c:	6811      	ldr	r1, [r2, #0]
    879e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    87a0:	4381      	bics	r1, r0
    87a2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    87a4:	6819      	ldr	r1, [r3, #0]
    87a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    87a8:	4381      	bics	r1, r0
    87aa:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    87ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    87ae:	6819      	ldr	r1, [r3, #0]
    87b0:	4301      	orrs	r1, r0
    87b2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    87b4:	6811      	ldr	r1, [r2, #0]
    87b6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    87b8:	4381      	bics	r1, r0
    87ba:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    87bc:	681a      	ldr	r2, [r3, #0]
    87be:	6da1      	ldr	r1, [r4, #88]	; 0x58
    87c0:	438a      	bics	r2, r1
    87c2:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    87c4:	681a      	ldr	r2, [r3, #0]
    87c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    87c8:	430a      	orrs	r2, r1
    87ca:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    87cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    87ce:	2b00      	cmp	r3, #0
    87d0:	da01      	bge.n	87d6 <_ZN16Adafruit_ILI93415beginEm+0x2efa>
    87d2:	f001 fb64 	bl	9e9e <_ZN16Adafruit_ILI93415beginEm+0x45c2>
    87d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    87d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    87da:	6811      	ldr	r1, [r2, #0]
    87dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    87de:	4381      	bics	r1, r0
    87e0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    87e2:	6819      	ldr	r1, [r3, #0]
    87e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    87e6:	4381      	bics	r1, r0
    87e8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    87ea:	6819      	ldr	r1, [r3, #0]
    87ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    87ee:	4301      	orrs	r1, r0
    87f0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    87f2:	6811      	ldr	r1, [r2, #0]
    87f4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    87f6:	4301      	orrs	r1, r0
    87f8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    87fa:	6819      	ldr	r1, [r3, #0]
    87fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    87fe:	4381      	bics	r1, r0
    8800:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8802:	6819      	ldr	r1, [r3, #0]
    8804:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8806:	4301      	orrs	r1, r0
    8808:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    880a:	6811      	ldr	r1, [r2, #0]
    880c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    880e:	4381      	bics	r1, r0
    8810:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8812:	6819      	ldr	r1, [r3, #0]
    8814:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8816:	4381      	bics	r1, r0
    8818:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    881a:	6819      	ldr	r1, [r3, #0]
    881c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    881e:	4301      	orrs	r1, r0
    8820:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8822:	6811      	ldr	r1, [r2, #0]
    8824:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8826:	4381      	bics	r1, r0
    8828:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    882a:	6819      	ldr	r1, [r3, #0]
    882c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    882e:	4381      	bics	r1, r0
    8830:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8832:	6819      	ldr	r1, [r3, #0]
    8834:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8836:	4301      	orrs	r1, r0
    8838:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    883a:	6811      	ldr	r1, [r2, #0]
    883c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    883e:	4301      	orrs	r1, r0
    8840:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8842:	6819      	ldr	r1, [r3, #0]
    8844:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8846:	4381      	bics	r1, r0
    8848:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    884a:	6819      	ldr	r1, [r3, #0]
    884c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    884e:	4301      	orrs	r1, r0
    8850:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8852:	6811      	ldr	r1, [r2, #0]
    8854:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8856:	4301      	orrs	r1, r0
    8858:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    885a:	6819      	ldr	r1, [r3, #0]
    885c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    885e:	4381      	bics	r1, r0
    8860:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8862:	6819      	ldr	r1, [r3, #0]
    8864:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8866:	4301      	orrs	r1, r0
    8868:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    886a:	6811      	ldr	r1, [r2, #0]
    886c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    886e:	4301      	orrs	r1, r0
    8870:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8872:	6819      	ldr	r1, [r3, #0]
    8874:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8876:	4381      	bics	r1, r0
    8878:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    887a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    887c:	6819      	ldr	r1, [r3, #0]
    887e:	4301      	orrs	r1, r0
    8880:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8882:	6811      	ldr	r1, [r2, #0]
    8884:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8886:	4381      	bics	r1, r0
    8888:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    888a:	681a      	ldr	r2, [r3, #0]
    888c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    888e:	438a      	bics	r2, r1
    8890:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8892:	681a      	ldr	r2, [r3, #0]
    8894:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8896:	430a      	orrs	r2, r1
    8898:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    889a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    889c:	2b00      	cmp	r3, #0
    889e:	da01      	bge.n	88a4 <_ZN16Adafruit_ILI93415beginEm+0x2fc8>
    88a0:	f001 fb03 	bl	9eaa <_ZN16Adafruit_ILI93415beginEm+0x45ce>
    88a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    88a6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    88a8:	6811      	ldr	r1, [r2, #0]
    88aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    88ac:	4301      	orrs	r1, r0
    88ae:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    88b0:	6819      	ldr	r1, [r3, #0]
    88b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    88b4:	4381      	bics	r1, r0
    88b6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    88b8:	6819      	ldr	r1, [r3, #0]
    88ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
    88bc:	4301      	orrs	r1, r0
    88be:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    88c0:	6811      	ldr	r1, [r2, #0]
    88c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    88c4:	4301      	orrs	r1, r0
    88c6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    88c8:	6819      	ldr	r1, [r3, #0]
    88ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
    88cc:	4381      	bics	r1, r0
    88ce:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    88d0:	6819      	ldr	r1, [r3, #0]
    88d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    88d4:	4301      	orrs	r1, r0
    88d6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    88d8:	6811      	ldr	r1, [r2, #0]
    88da:	6d20      	ldr	r0, [r4, #80]	; 0x50
    88dc:	4301      	orrs	r1, r0
    88de:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    88e0:	6819      	ldr	r1, [r3, #0]
    88e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    88e4:	4381      	bics	r1, r0
    88e6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    88e8:	6819      	ldr	r1, [r3, #0]
    88ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
    88ec:	4301      	orrs	r1, r0
    88ee:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    88f0:	6811      	ldr	r1, [r2, #0]
    88f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    88f4:	4301      	orrs	r1, r0
    88f6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    88f8:	6819      	ldr	r1, [r3, #0]
    88fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    88fc:	4381      	bics	r1, r0
    88fe:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8900:	6819      	ldr	r1, [r3, #0]
    8902:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8904:	4301      	orrs	r1, r0
    8906:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8908:	6811      	ldr	r1, [r2, #0]
    890a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    890c:	4381      	bics	r1, r0
    890e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8910:	6819      	ldr	r1, [r3, #0]
    8912:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8914:	4381      	bics	r1, r0
    8916:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8918:	6819      	ldr	r1, [r3, #0]
    891a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    891c:	4301      	orrs	r1, r0
    891e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8920:	6811      	ldr	r1, [r2, #0]
    8922:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8924:	4381      	bics	r1, r0
    8926:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8928:	6819      	ldr	r1, [r3, #0]
    892a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    892c:	4381      	bics	r1, r0
    892e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8930:	6819      	ldr	r1, [r3, #0]
    8932:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8934:	4301      	orrs	r1, r0
    8936:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8938:	6811      	ldr	r1, [r2, #0]
    893a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    893c:	4381      	bics	r1, r0
    893e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8940:	6819      	ldr	r1, [r3, #0]
    8942:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8944:	4381      	bics	r1, r0
    8946:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8948:	6da0      	ldr	r0, [r4, #88]	; 0x58
    894a:	6819      	ldr	r1, [r3, #0]
    894c:	4301      	orrs	r1, r0
    894e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8950:	6811      	ldr	r1, [r2, #0]
    8952:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8954:	4301      	orrs	r1, r0
    8956:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8958:	681a      	ldr	r2, [r3, #0]
    895a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    895c:	438a      	bics	r2, r1
    895e:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8960:	681a      	ldr	r2, [r3, #0]
    8962:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8964:	430a      	orrs	r2, r1
    8966:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    8968:	6b23      	ldr	r3, [r4, #48]	; 0x30
    896a:	2b00      	cmp	r3, #0
    896c:	da01      	bge.n	8972 <_ZN16Adafruit_ILI93415beginEm+0x3096>
    896e:	f001 faa2 	bl	9eb6 <_ZN16Adafruit_ILI93415beginEm+0x45da>
    8972:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8974:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8976:	6811      	ldr	r1, [r2, #0]
    8978:	6c63      	ldr	r3, [r4, #68]	; 0x44
    897a:	4381      	bics	r1, r0
    897c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    897e:	6819      	ldr	r1, [r3, #0]
    8980:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8982:	4381      	bics	r1, r0
    8984:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8986:	6819      	ldr	r1, [r3, #0]
    8988:	6da0      	ldr	r0, [r4, #88]	; 0x58
    898a:	4301      	orrs	r1, r0
    898c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    898e:	6811      	ldr	r1, [r2, #0]
    8990:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8992:	4381      	bics	r1, r0
    8994:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8996:	6819      	ldr	r1, [r3, #0]
    8998:	6da0      	ldr	r0, [r4, #88]	; 0x58
    899a:	4381      	bics	r1, r0
    899c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    899e:	6819      	ldr	r1, [r3, #0]
    89a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    89a2:	4301      	orrs	r1, r0
    89a4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    89a6:	6811      	ldr	r1, [r2, #0]
    89a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    89aa:	4301      	orrs	r1, r0
    89ac:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    89ae:	6819      	ldr	r1, [r3, #0]
    89b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    89b2:	4381      	bics	r1, r0
    89b4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    89b6:	6819      	ldr	r1, [r3, #0]
    89b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    89ba:	4301      	orrs	r1, r0
    89bc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    89be:	6811      	ldr	r1, [r2, #0]
    89c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    89c2:	4301      	orrs	r1, r0
    89c4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    89c6:	6819      	ldr	r1, [r3, #0]
    89c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    89ca:	4381      	bics	r1, r0
    89cc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    89ce:	6819      	ldr	r1, [r3, #0]
    89d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    89d2:	4301      	orrs	r1, r0
    89d4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    89d6:	6811      	ldr	r1, [r2, #0]
    89d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    89da:	4381      	bics	r1, r0
    89dc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    89de:	6819      	ldr	r1, [r3, #0]
    89e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    89e2:	4381      	bics	r1, r0
    89e4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    89e6:	6819      	ldr	r1, [r3, #0]
    89e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    89ea:	4301      	orrs	r1, r0
    89ec:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    89ee:	6811      	ldr	r1, [r2, #0]
    89f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    89f2:	4301      	orrs	r1, r0
    89f4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    89f6:	6819      	ldr	r1, [r3, #0]
    89f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    89fa:	4381      	bics	r1, r0
    89fc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    89fe:	6819      	ldr	r1, [r3, #0]
    8a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8a02:	4301      	orrs	r1, r0
    8a04:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8a06:	6811      	ldr	r1, [r2, #0]
    8a08:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8a0a:	4301      	orrs	r1, r0
    8a0c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8a0e:	6819      	ldr	r1, [r3, #0]
    8a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8a12:	4381      	bics	r1, r0
    8a14:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8a16:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8a18:	6819      	ldr	r1, [r3, #0]
    8a1a:	4301      	orrs	r1, r0
    8a1c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8a1e:	6811      	ldr	r1, [r2, #0]
    8a20:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8a22:	4301      	orrs	r1, r0
    8a24:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8a26:	681a      	ldr	r2, [r3, #0]
    8a28:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8a2a:	438a      	bics	r2, r1
    8a2c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8a2e:	681a      	ldr	r2, [r3, #0]
    8a30:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8a32:	430a      	orrs	r2, r1
    8a34:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    8a36:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8a38:	2b00      	cmp	r3, #0
    8a3a:	da01      	bge.n	8a40 <_ZN16Adafruit_ILI93415beginEm+0x3164>
    8a3c:	f001 fa41 	bl	9ec2 <_ZN16Adafruit_ILI93415beginEm+0x45e6>
    8a40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8a42:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8a44:	6811      	ldr	r1, [r2, #0]
    8a46:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8a48:	4381      	bics	r1, r0
    8a4a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8a4c:	6819      	ldr	r1, [r3, #0]
    8a4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8a50:	4381      	bics	r1, r0
    8a52:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8a54:	6819      	ldr	r1, [r3, #0]
    8a56:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8a58:	4301      	orrs	r1, r0
    8a5a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8a5c:	6811      	ldr	r1, [r2, #0]
    8a5e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8a60:	4381      	bics	r1, r0
    8a62:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8a64:	6819      	ldr	r1, [r3, #0]
    8a66:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8a68:	4381      	bics	r1, r0
    8a6a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8a6c:	6819      	ldr	r1, [r3, #0]
    8a6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8a70:	4301      	orrs	r1, r0
    8a72:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8a74:	6811      	ldr	r1, [r2, #0]
    8a76:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8a78:	4381      	bics	r1, r0
    8a7a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8a7c:	6819      	ldr	r1, [r3, #0]
    8a7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8a80:	4381      	bics	r1, r0
    8a82:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8a84:	6819      	ldr	r1, [r3, #0]
    8a86:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8a88:	4301      	orrs	r1, r0
    8a8a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8a8c:	6811      	ldr	r1, [r2, #0]
    8a8e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8a90:	4381      	bics	r1, r0
    8a92:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8a94:	6819      	ldr	r1, [r3, #0]
    8a96:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8a98:	4381      	bics	r1, r0
    8a9a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8a9c:	6819      	ldr	r1, [r3, #0]
    8a9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8aa0:	4301      	orrs	r1, r0
    8aa2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8aa4:	6811      	ldr	r1, [r2, #0]
    8aa6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8aa8:	4381      	bics	r1, r0
    8aaa:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8aac:	6819      	ldr	r1, [r3, #0]
    8aae:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ab0:	4381      	bics	r1, r0
    8ab2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8ab4:	6819      	ldr	r1, [r3, #0]
    8ab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ab8:	4301      	orrs	r1, r0
    8aba:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8abc:	6811      	ldr	r1, [r2, #0]
    8abe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8ac0:	4301      	orrs	r1, r0
    8ac2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8ac4:	6819      	ldr	r1, [r3, #0]
    8ac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ac8:	4381      	bics	r1, r0
    8aca:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8acc:	6819      	ldr	r1, [r3, #0]
    8ace:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ad0:	4301      	orrs	r1, r0
    8ad2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8ad4:	6811      	ldr	r1, [r2, #0]
    8ad6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8ad8:	4301      	orrs	r1, r0
    8ada:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8adc:	6819      	ldr	r1, [r3, #0]
    8ade:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ae0:	4381      	bics	r1, r0
    8ae2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ae6:	6819      	ldr	r1, [r3, #0]
    8ae8:	4301      	orrs	r1, r0
    8aea:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8aec:	6811      	ldr	r1, [r2, #0]
    8aee:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8af0:	4301      	orrs	r1, r0
    8af2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8af4:	681a      	ldr	r2, [r3, #0]
    8af6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8af8:	438a      	bics	r2, r1
    8afa:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8afc:	681a      	ldr	r2, [r3, #0]
    8afe:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8b00:	430a      	orrs	r2, r1
    8b02:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    8b04:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8b06:	2b00      	cmp	r3, #0
    8b08:	da01      	bge.n	8b0e <_ZN16Adafruit_ILI93415beginEm+0x3232>
    8b0a:	f001 f9e0 	bl	9ece <_ZN16Adafruit_ILI93415beginEm+0x45f2>
    8b0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8b10:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8b12:	6811      	ldr	r1, [r2, #0]
    8b14:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8b16:	4381      	bics	r1, r0
    8b18:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8b1a:	6819      	ldr	r1, [r3, #0]
    8b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b1e:	4381      	bics	r1, r0
    8b20:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8b22:	6819      	ldr	r1, [r3, #0]
    8b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b26:	4301      	orrs	r1, r0
    8b28:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8b2a:	6811      	ldr	r1, [r2, #0]
    8b2c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8b2e:	4381      	bics	r1, r0
    8b30:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8b32:	6819      	ldr	r1, [r3, #0]
    8b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b36:	4381      	bics	r1, r0
    8b38:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8b3a:	6819      	ldr	r1, [r3, #0]
    8b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b3e:	4301      	orrs	r1, r0
    8b40:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8b42:	6811      	ldr	r1, [r2, #0]
    8b44:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8b46:	4381      	bics	r1, r0
    8b48:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8b4a:	6819      	ldr	r1, [r3, #0]
    8b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b4e:	4381      	bics	r1, r0
    8b50:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8b52:	6819      	ldr	r1, [r3, #0]
    8b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b56:	4301      	orrs	r1, r0
    8b58:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8b5a:	6811      	ldr	r1, [r2, #0]
    8b5c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8b5e:	4301      	orrs	r1, r0
    8b60:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8b62:	6819      	ldr	r1, [r3, #0]
    8b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b66:	4381      	bics	r1, r0
    8b68:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8b6a:	6819      	ldr	r1, [r3, #0]
    8b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b6e:	4301      	orrs	r1, r0
    8b70:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8b72:	6811      	ldr	r1, [r2, #0]
    8b74:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8b76:	4381      	bics	r1, r0
    8b78:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8b7a:	6819      	ldr	r1, [r3, #0]
    8b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b7e:	4381      	bics	r1, r0
    8b80:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8b82:	6819      	ldr	r1, [r3, #0]
    8b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b86:	4301      	orrs	r1, r0
    8b88:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8b8a:	6811      	ldr	r1, [r2, #0]
    8b8c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8b8e:	4381      	bics	r1, r0
    8b90:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8b92:	6819      	ldr	r1, [r3, #0]
    8b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b96:	4381      	bics	r1, r0
    8b98:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8b9a:	6819      	ldr	r1, [r3, #0]
    8b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8b9e:	4301      	orrs	r1, r0
    8ba0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8ba2:	6811      	ldr	r1, [r2, #0]
    8ba4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8ba6:	4381      	bics	r1, r0
    8ba8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8baa:	6819      	ldr	r1, [r3, #0]
    8bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8bae:	4381      	bics	r1, r0
    8bb0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8bb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8bb4:	6819      	ldr	r1, [r3, #0]
    8bb6:	4301      	orrs	r1, r0
    8bb8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8bba:	6811      	ldr	r1, [r2, #0]
    8bbc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8bbe:	4381      	bics	r1, r0
    8bc0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8bc2:	681a      	ldr	r2, [r3, #0]
    8bc4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8bc6:	438a      	bics	r2, r1
    8bc8:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8bca:	681a      	ldr	r2, [r3, #0]
    8bcc:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8bce:	430a      	orrs	r2, r1
    8bd0:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    8bd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8bd4:	2b00      	cmp	r3, #0
    8bd6:	da01      	bge.n	8bdc <_ZN16Adafruit_ILI93415beginEm+0x3300>
    8bd8:	f001 f97f 	bl	9eda <_ZN16Adafruit_ILI93415beginEm+0x45fe>
    8bdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8bde:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8be0:	6811      	ldr	r1, [r2, #0]
    8be2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8be4:	4381      	bics	r1, r0
    8be6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8be8:	6819      	ldr	r1, [r3, #0]
    8bea:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8bec:	4381      	bics	r1, r0
    8bee:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8bf0:	6819      	ldr	r1, [r3, #0]
    8bf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8bf4:	4301      	orrs	r1, r0
    8bf6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8bf8:	6811      	ldr	r1, [r2, #0]
    8bfa:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8bfc:	4381      	bics	r1, r0
    8bfe:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8c00:	6819      	ldr	r1, [r3, #0]
    8c02:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c04:	4381      	bics	r1, r0
    8c06:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8c08:	6819      	ldr	r1, [r3, #0]
    8c0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c0c:	4301      	orrs	r1, r0
    8c0e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8c10:	6811      	ldr	r1, [r2, #0]
    8c12:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8c14:	4381      	bics	r1, r0
    8c16:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8c18:	6819      	ldr	r1, [r3, #0]
    8c1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c1c:	4381      	bics	r1, r0
    8c1e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8c20:	6819      	ldr	r1, [r3, #0]
    8c22:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c24:	4301      	orrs	r1, r0
    8c26:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8c28:	6811      	ldr	r1, [r2, #0]
    8c2a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8c2c:	4381      	bics	r1, r0
    8c2e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8c30:	6819      	ldr	r1, [r3, #0]
    8c32:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c34:	4381      	bics	r1, r0
    8c36:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8c38:	6819      	ldr	r1, [r3, #0]
    8c3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c3c:	4301      	orrs	r1, r0
    8c3e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8c40:	6811      	ldr	r1, [r2, #0]
    8c42:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8c44:	4381      	bics	r1, r0
    8c46:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8c48:	6819      	ldr	r1, [r3, #0]
    8c4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c4c:	4381      	bics	r1, r0
    8c4e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8c50:	6819      	ldr	r1, [r3, #0]
    8c52:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c54:	4301      	orrs	r1, r0
    8c56:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8c58:	6811      	ldr	r1, [r2, #0]
    8c5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8c5c:	4381      	bics	r1, r0
    8c5e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8c60:	6819      	ldr	r1, [r3, #0]
    8c62:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c64:	4381      	bics	r1, r0
    8c66:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8c68:	6819      	ldr	r1, [r3, #0]
    8c6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c6c:	4301      	orrs	r1, r0
    8c6e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8c70:	6811      	ldr	r1, [r2, #0]
    8c72:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8c74:	4301      	orrs	r1, r0
    8c76:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8c78:	6819      	ldr	r1, [r3, #0]
    8c7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c7c:	4381      	bics	r1, r0
    8c7e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c82:	6819      	ldr	r1, [r3, #0]
    8c84:	4301      	orrs	r1, r0
    8c86:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8c88:	6811      	ldr	r1, [r2, #0]
    8c8a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8c8c:	4301      	orrs	r1, r0
    8c8e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8c90:	681a      	ldr	r2, [r3, #0]
    8c92:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8c94:	438a      	bics	r2, r1
    8c96:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8c98:	681a      	ldr	r2, [r3, #0]
    8c9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8c9c:	430a      	orrs	r2, r1
    8c9e:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    8ca0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8ca2:	2b00      	cmp	r3, #0
    8ca4:	da01      	bge.n	8caa <_ZN16Adafruit_ILI93415beginEm+0x33ce>
    8ca6:	f001 f9d5 	bl	a054 <_ZN16Adafruit_ILI93415beginEm+0x4778>
    8caa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8cac:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8cae:	6811      	ldr	r1, [r2, #0]
    8cb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8cb2:	4381      	bics	r1, r0
    8cb4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8cb6:	6819      	ldr	r1, [r3, #0]
    8cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8cba:	4381      	bics	r1, r0
    8cbc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8cbe:	6819      	ldr	r1, [r3, #0]
    8cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8cc2:	4301      	orrs	r1, r0
    8cc4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8cc6:	6811      	ldr	r1, [r2, #0]
    8cc8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8cca:	4381      	bics	r1, r0
    8ccc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8cce:	6819      	ldr	r1, [r3, #0]
    8cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8cd2:	4381      	bics	r1, r0
    8cd4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8cd6:	6819      	ldr	r1, [r3, #0]
    8cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8cda:	4301      	orrs	r1, r0
    8cdc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8cde:	6811      	ldr	r1, [r2, #0]
    8ce0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8ce2:	4381      	bics	r1, r0
    8ce4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8ce6:	6819      	ldr	r1, [r3, #0]
    8ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8cea:	4381      	bics	r1, r0
    8cec:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8cee:	6819      	ldr	r1, [r3, #0]
    8cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8cf2:	4301      	orrs	r1, r0
    8cf4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8cf6:	6811      	ldr	r1, [r2, #0]
    8cf8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8cfa:	4381      	bics	r1, r0
    8cfc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8cfe:	6819      	ldr	r1, [r3, #0]
    8d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8d02:	4381      	bics	r1, r0
    8d04:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8d06:	6819      	ldr	r1, [r3, #0]
    8d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8d0a:	4301      	orrs	r1, r0
    8d0c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8d0e:	6811      	ldr	r1, [r2, #0]
    8d10:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8d12:	4301      	orrs	r1, r0
    8d14:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8d16:	6819      	ldr	r1, [r3, #0]
    8d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8d1a:	4381      	bics	r1, r0
    8d1c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8d1e:	6819      	ldr	r1, [r3, #0]
    8d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8d22:	4301      	orrs	r1, r0
    8d24:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8d26:	6811      	ldr	r1, [r2, #0]
    8d28:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8d2a:	4301      	orrs	r1, r0
    8d2c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8d2e:	6819      	ldr	r1, [r3, #0]
    8d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8d32:	4381      	bics	r1, r0
    8d34:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8d36:	6819      	ldr	r1, [r3, #0]
    8d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8d3a:	4301      	orrs	r1, r0
    8d3c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8d3e:	6811      	ldr	r1, [r2, #0]
    8d40:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8d42:	4301      	orrs	r1, r0
    8d44:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8d46:	6819      	ldr	r1, [r3, #0]
    8d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8d4a:	4381      	bics	r1, r0
    8d4c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8d4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8d50:	6819      	ldr	r1, [r3, #0]
    8d52:	4301      	orrs	r1, r0
    8d54:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8d56:	6811      	ldr	r1, [r2, #0]
    8d58:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8d5a:	4381      	bics	r1, r0
    8d5c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8d5e:	681a      	ldr	r2, [r3, #0]
    8d60:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8d62:	438a      	bics	r2, r1
    8d64:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8d66:	681a      	ldr	r2, [r3, #0]
    8d68:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8d6a:	430a      	orrs	r2, r1
    8d6c:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    8d6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8d70:	2b00      	cmp	r3, #0
    8d72:	da01      	bge.n	8d78 <_ZN16Adafruit_ILI93415beginEm+0x349c>
    8d74:	f001 f974 	bl	a060 <_ZN16Adafruit_ILI93415beginEm+0x4784>
    8d78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8d7a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8d7c:	6811      	ldr	r1, [r2, #0]
    8d7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8d80:	4381      	bics	r1, r0
    8d82:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8d84:	6819      	ldr	r1, [r3, #0]
    8d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8d88:	4381      	bics	r1, r0
    8d8a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8d8c:	6819      	ldr	r1, [r3, #0]
    8d8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8d90:	4301      	orrs	r1, r0
    8d92:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8d94:	6811      	ldr	r1, [r2, #0]
    8d96:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8d98:	4381      	bics	r1, r0
    8d9a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8d9c:	6819      	ldr	r1, [r3, #0]
    8d9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8da0:	4381      	bics	r1, r0
    8da2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8da4:	6819      	ldr	r1, [r3, #0]
    8da6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8da8:	4301      	orrs	r1, r0
    8daa:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8dac:	6811      	ldr	r1, [r2, #0]
    8dae:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8db0:	4381      	bics	r1, r0
    8db2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8db4:	6819      	ldr	r1, [r3, #0]
    8db6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8db8:	4381      	bics	r1, r0
    8dba:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8dbc:	6819      	ldr	r1, [r3, #0]
    8dbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8dc0:	4301      	orrs	r1, r0
    8dc2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8dc4:	6811      	ldr	r1, [r2, #0]
    8dc6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8dc8:	4381      	bics	r1, r0
    8dca:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8dcc:	6819      	ldr	r1, [r3, #0]
    8dce:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8dd0:	4381      	bics	r1, r0
    8dd2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8dd4:	6819      	ldr	r1, [r3, #0]
    8dd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8dd8:	4301      	orrs	r1, r0
    8dda:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8ddc:	6811      	ldr	r1, [r2, #0]
    8dde:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8de0:	4301      	orrs	r1, r0
    8de2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8de4:	6819      	ldr	r1, [r3, #0]
    8de6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8de8:	4381      	bics	r1, r0
    8dea:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8dec:	6819      	ldr	r1, [r3, #0]
    8dee:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8df0:	4301      	orrs	r1, r0
    8df2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8df4:	6811      	ldr	r1, [r2, #0]
    8df6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8df8:	4381      	bics	r1, r0
    8dfa:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8dfc:	6819      	ldr	r1, [r3, #0]
    8dfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e00:	4381      	bics	r1, r0
    8e02:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8e04:	6819      	ldr	r1, [r3, #0]
    8e06:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e08:	4301      	orrs	r1, r0
    8e0a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8e0c:	6811      	ldr	r1, [r2, #0]
    8e0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8e10:	4381      	bics	r1, r0
    8e12:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8e14:	6819      	ldr	r1, [r3, #0]
    8e16:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e18:	4381      	bics	r1, r0
    8e1a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e1e:	6819      	ldr	r1, [r3, #0]
    8e20:	4301      	orrs	r1, r0
    8e22:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    8e24:	6811      	ldr	r1, [r2, #0]
    8e26:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8e28:	4301      	orrs	r1, r0
    8e2a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8e2c:	681a      	ldr	r2, [r3, #0]
    8e2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8e30:	438a      	bics	r2, r1
    8e32:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8e34:	681a      	ldr	r2, [r3, #0]
    8e36:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8e38:	430a      	orrs	r2, r1
    8e3a:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    8e3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8e3e:	2b00      	cmp	r3, #0
    8e40:	da01      	bge.n	8e46 <_ZN16Adafruit_ILI93415beginEm+0x356a>
    8e42:	f001 f913 	bl	a06c <_ZN16Adafruit_ILI93415beginEm+0x4790>
    8e46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8e48:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8e4a:	6811      	ldr	r1, [r2, #0]
    8e4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8e4e:	4381      	bics	r1, r0
    8e50:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8e52:	6819      	ldr	r1, [r3, #0]
    8e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e56:	4381      	bics	r1, r0
    8e58:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8e5a:	6819      	ldr	r1, [r3, #0]
    8e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e5e:	4301      	orrs	r1, r0
    8e60:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8e62:	6811      	ldr	r1, [r2, #0]
    8e64:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8e66:	4381      	bics	r1, r0
    8e68:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8e6a:	6819      	ldr	r1, [r3, #0]
    8e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e6e:	4381      	bics	r1, r0
    8e70:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8e72:	6819      	ldr	r1, [r3, #0]
    8e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e76:	4301      	orrs	r1, r0
    8e78:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8e7a:	6811      	ldr	r1, [r2, #0]
    8e7c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8e7e:	4381      	bics	r1, r0
    8e80:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8e82:	6819      	ldr	r1, [r3, #0]
    8e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e86:	4381      	bics	r1, r0
    8e88:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8e8a:	6819      	ldr	r1, [r3, #0]
    8e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e8e:	4301      	orrs	r1, r0
    8e90:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8e92:	6811      	ldr	r1, [r2, #0]
    8e94:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8e96:	4381      	bics	r1, r0
    8e98:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8e9a:	6819      	ldr	r1, [r3, #0]
    8e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8e9e:	4381      	bics	r1, r0
    8ea0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8ea2:	6819      	ldr	r1, [r3, #0]
    8ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ea6:	4301      	orrs	r1, r0
    8ea8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8eaa:	6811      	ldr	r1, [r2, #0]
    8eac:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8eae:	4381      	bics	r1, r0
    8eb0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8eb2:	6819      	ldr	r1, [r3, #0]
    8eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8eb6:	4381      	bics	r1, r0
    8eb8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8eba:	6819      	ldr	r1, [r3, #0]
    8ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ebe:	4301      	orrs	r1, r0
    8ec0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8ec2:	6811      	ldr	r1, [r2, #0]
    8ec4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8ec6:	4381      	bics	r1, r0
    8ec8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8eca:	6819      	ldr	r1, [r3, #0]
    8ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ece:	4381      	bics	r1, r0
    8ed0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8ed2:	6819      	ldr	r1, [r3, #0]
    8ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ed6:	4301      	orrs	r1, r0
    8ed8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8eda:	6811      	ldr	r1, [r2, #0]
    8edc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8ede:	4381      	bics	r1, r0
    8ee0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8ee2:	6819      	ldr	r1, [r3, #0]
    8ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8ee6:	4381      	bics	r1, r0
    8ee8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    8eea:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8eec:	6819      	ldr	r1, [r3, #0]
    8eee:	4301      	orrs	r1, r0
    8ef0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    8ef2:	6811      	ldr	r1, [r2, #0]
    8ef4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8ef6:	4381      	bics	r1, r0
    8ef8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    8efa:	681a      	ldr	r2, [r3, #0]
    8efc:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8efe:	438a      	bics	r2, r1
    8f00:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8f02:	681a      	ldr	r2, [r3, #0]
    8f04:	6da1      	ldr	r1, [r4, #88]	; 0x58
    8f06:	430a      	orrs	r2, r1
    8f08:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    8f0a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    8f0c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8f0e:	680b      	ldr	r3, [r1, #0]
    8f10:	4393      	bics	r3, r2
    8f12:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    8f14:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8f16:	2b00      	cmp	r3, #0
    8f18:	da01      	bge.n	8f1e <_ZN16Adafruit_ILI93415beginEm+0x3642>
    8f1a:	f001 f8ad 	bl	a078 <_ZN16Adafruit_ILI93415beginEm+0x479c>
    8f1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    8f20:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8f22:	6810      	ldr	r0, [r2, #0]
    8f24:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8f26:	4328      	orrs	r0, r5
    8f28:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8f2a:	6818      	ldr	r0, [r3, #0]
    8f2c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8f2e:	43a8      	bics	r0, r5
    8f30:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8f32:	6818      	ldr	r0, [r3, #0]
    8f34:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8f36:	4328      	orrs	r0, r5
    8f38:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    8f3a:	6810      	ldr	r0, [r2, #0]
    8f3c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8f3e:	4328      	orrs	r0, r5
    8f40:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8f42:	6818      	ldr	r0, [r3, #0]
    8f44:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8f46:	43a8      	bics	r0, r5
    8f48:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8f4a:	6818      	ldr	r0, [r3, #0]
    8f4c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8f4e:	4328      	orrs	r0, r5
    8f50:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    8f52:	6810      	ldr	r0, [r2, #0]
    8f54:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8f56:	4328      	orrs	r0, r5
    8f58:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8f5a:	6818      	ldr	r0, [r3, #0]
    8f5c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8f5e:	43a8      	bics	r0, r5
    8f60:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8f62:	6818      	ldr	r0, [r3, #0]
    8f64:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8f66:	4328      	orrs	r0, r5
    8f68:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    8f6a:	6810      	ldr	r0, [r2, #0]
    8f6c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8f6e:	43a8      	bics	r0, r5
    8f70:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8f72:	6818      	ldr	r0, [r3, #0]
    8f74:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8f76:	43a8      	bics	r0, r5
    8f78:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8f7a:	6818      	ldr	r0, [r3, #0]
    8f7c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8f7e:	4328      	orrs	r0, r5
    8f80:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    8f82:	6810      	ldr	r0, [r2, #0]
    8f84:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8f86:	43a8      	bics	r0, r5
    8f88:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8f8a:	6818      	ldr	r0, [r3, #0]
    8f8c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8f8e:	43a8      	bics	r0, r5
    8f90:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8f92:	6818      	ldr	r0, [r3, #0]
    8f94:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8f96:	4328      	orrs	r0, r5
    8f98:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    8f9a:	6810      	ldr	r0, [r2, #0]
    8f9c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8f9e:	43a8      	bics	r0, r5
    8fa0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8fa2:	6818      	ldr	r0, [r3, #0]
    8fa4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8fa6:	43a8      	bics	r0, r5
    8fa8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8faa:	6818      	ldr	r0, [r3, #0]
    8fac:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8fae:	4328      	orrs	r0, r5
    8fb0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    8fb2:	6810      	ldr	r0, [r2, #0]
    8fb4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8fb6:	43a8      	bics	r0, r5
    8fb8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8fba:	6818      	ldr	r0, [r3, #0]
    8fbc:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8fbe:	43a8      	bics	r0, r5
    8fc0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    8fc2:	6da5      	ldr	r5, [r4, #88]	; 0x58
    8fc4:	6818      	ldr	r0, [r3, #0]
    8fc6:	4328      	orrs	r0, r5
    8fc8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    8fca:	6810      	ldr	r0, [r2, #0]
    8fcc:	6d25      	ldr	r5, [r4, #80]	; 0x50
    8fce:	4328      	orrs	r0, r5
    8fd0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    8fd2:	681a      	ldr	r2, [r3, #0]
    8fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8fd6:	4382      	bics	r2, r0
    8fd8:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    8fda:	681a      	ldr	r2, [r3, #0]
    8fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8fde:	4302      	orrs	r2, r0
    8fe0:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    8fe2:	680b      	ldr	r3, [r1, #0]
    8fe4:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8fe6:	4313      	orrs	r3, r2
    8fe8:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    8fea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8fec:	2b00      	cmp	r3, #0
    8fee:	da01      	bge.n	8ff4 <_ZN16Adafruit_ILI93415beginEm+0x3718>
    8ff0:	f000 ffb6 	bl	9f60 <_ZN16Adafruit_ILI93415beginEm+0x4684>
    8ff4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    8ff6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8ff8:	6811      	ldr	r1, [r2, #0]
    8ffa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8ffc:	4381      	bics	r1, r0
    8ffe:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9000:	6819      	ldr	r1, [r3, #0]
    9002:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9004:	4381      	bics	r1, r0
    9006:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9008:	6819      	ldr	r1, [r3, #0]
    900a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    900c:	4301      	orrs	r1, r0
    900e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9010:	6811      	ldr	r1, [r2, #0]
    9012:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9014:	4381      	bics	r1, r0
    9016:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9018:	6819      	ldr	r1, [r3, #0]
    901a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    901c:	4381      	bics	r1, r0
    901e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9020:	6819      	ldr	r1, [r3, #0]
    9022:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9024:	4301      	orrs	r1, r0
    9026:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9028:	6811      	ldr	r1, [r2, #0]
    902a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    902c:	4381      	bics	r1, r0
    902e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9030:	6819      	ldr	r1, [r3, #0]
    9032:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9034:	4381      	bics	r1, r0
    9036:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9038:	6819      	ldr	r1, [r3, #0]
    903a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    903c:	4301      	orrs	r1, r0
    903e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9040:	6811      	ldr	r1, [r2, #0]
    9042:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9044:	4381      	bics	r1, r0
    9046:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9048:	6819      	ldr	r1, [r3, #0]
    904a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    904c:	4381      	bics	r1, r0
    904e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9050:	6819      	ldr	r1, [r3, #0]
    9052:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9054:	4301      	orrs	r1, r0
    9056:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9058:	6811      	ldr	r1, [r2, #0]
    905a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    905c:	4381      	bics	r1, r0
    905e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9060:	6819      	ldr	r1, [r3, #0]
    9062:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9064:	4381      	bics	r1, r0
    9066:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9068:	6819      	ldr	r1, [r3, #0]
    906a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    906c:	4301      	orrs	r1, r0
    906e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9070:	6811      	ldr	r1, [r2, #0]
    9072:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9074:	4381      	bics	r1, r0
    9076:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9078:	6819      	ldr	r1, [r3, #0]
    907a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    907c:	4381      	bics	r1, r0
    907e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9080:	6819      	ldr	r1, [r3, #0]
    9082:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9084:	4301      	orrs	r1, r0
    9086:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9088:	6811      	ldr	r1, [r2, #0]
    908a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    908c:	4381      	bics	r1, r0
    908e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9090:	6819      	ldr	r1, [r3, #0]
    9092:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9094:	4381      	bics	r1, r0
    9096:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9098:	6da0      	ldr	r0, [r4, #88]	; 0x58
    909a:	6819      	ldr	r1, [r3, #0]
    909c:	4301      	orrs	r1, r0
    909e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    90a0:	6811      	ldr	r1, [r2, #0]
    90a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    90a4:	4381      	bics	r1, r0
    90a6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    90a8:	681a      	ldr	r2, [r3, #0]
    90aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
    90ac:	438a      	bics	r2, r1
    90ae:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    90b0:	681a      	ldr	r2, [r3, #0]
    90b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
    90b4:	430a      	orrs	r2, r1
    90b6:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    90b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    90ba:	2b00      	cmp	r3, #0
    90bc:	da01      	bge.n	90c2 <_ZN16Adafruit_ILI93415beginEm+0x37e6>
    90be:	f000 ff55 	bl	9f6c <_ZN16Adafruit_ILI93415beginEm+0x4690>
    90c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    90c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    90c6:	6811      	ldr	r1, [r2, #0]
    90c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    90ca:	4381      	bics	r1, r0
    90cc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    90ce:	6819      	ldr	r1, [r3, #0]
    90d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    90d2:	4381      	bics	r1, r0
    90d4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    90d6:	6819      	ldr	r1, [r3, #0]
    90d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    90da:	4301      	orrs	r1, r0
    90dc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    90de:	6811      	ldr	r1, [r2, #0]
    90e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    90e2:	4381      	bics	r1, r0
    90e4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    90e6:	6819      	ldr	r1, [r3, #0]
    90e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    90ea:	4381      	bics	r1, r0
    90ec:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    90ee:	6819      	ldr	r1, [r3, #0]
    90f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    90f2:	4301      	orrs	r1, r0
    90f4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    90f6:	6811      	ldr	r1, [r2, #0]
    90f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    90fa:	4381      	bics	r1, r0
    90fc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    90fe:	6819      	ldr	r1, [r3, #0]
    9100:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9102:	4381      	bics	r1, r0
    9104:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9106:	6819      	ldr	r1, [r3, #0]
    9108:	6da0      	ldr	r0, [r4, #88]	; 0x58
    910a:	4301      	orrs	r1, r0
    910c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    910e:	6811      	ldr	r1, [r2, #0]
    9110:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9112:	4381      	bics	r1, r0
    9114:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9116:	6819      	ldr	r1, [r3, #0]
    9118:	6da0      	ldr	r0, [r4, #88]	; 0x58
    911a:	4381      	bics	r1, r0
    911c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    911e:	6819      	ldr	r1, [r3, #0]
    9120:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9122:	4301      	orrs	r1, r0
    9124:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9126:	6811      	ldr	r1, [r2, #0]
    9128:	6d20      	ldr	r0, [r4, #80]	; 0x50
    912a:	4301      	orrs	r1, r0
    912c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    912e:	6819      	ldr	r1, [r3, #0]
    9130:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9132:	4381      	bics	r1, r0
    9134:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9136:	6819      	ldr	r1, [r3, #0]
    9138:	6da0      	ldr	r0, [r4, #88]	; 0x58
    913a:	4301      	orrs	r1, r0
    913c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    913e:	6811      	ldr	r1, [r2, #0]
    9140:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9142:	4301      	orrs	r1, r0
    9144:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9146:	6819      	ldr	r1, [r3, #0]
    9148:	6da0      	ldr	r0, [r4, #88]	; 0x58
    914a:	4381      	bics	r1, r0
    914c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    914e:	6819      	ldr	r1, [r3, #0]
    9150:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9152:	4301      	orrs	r1, r0
    9154:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9156:	6811      	ldr	r1, [r2, #0]
    9158:	6d20      	ldr	r0, [r4, #80]	; 0x50
    915a:	4301      	orrs	r1, r0
    915c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    915e:	6819      	ldr	r1, [r3, #0]
    9160:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9162:	4381      	bics	r1, r0
    9164:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9166:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9168:	6819      	ldr	r1, [r3, #0]
    916a:	4301      	orrs	r1, r0
    916c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    916e:	6811      	ldr	r1, [r2, #0]
    9170:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9172:	4381      	bics	r1, r0
    9174:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9176:	681a      	ldr	r2, [r3, #0]
    9178:	6da1      	ldr	r1, [r4, #88]	; 0x58
    917a:	438a      	bics	r2, r1
    917c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    917e:	681a      	ldr	r2, [r3, #0]
    9180:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9182:	430a      	orrs	r2, r1
    9184:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    9186:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9188:	2b00      	cmp	r3, #0
    918a:	da01      	bge.n	9190 <_ZN16Adafruit_ILI93415beginEm+0x38b4>
    918c:	f000 fef4 	bl	9f78 <_ZN16Adafruit_ILI93415beginEm+0x469c>
    9190:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    9192:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9194:	6811      	ldr	r1, [r2, #0]
    9196:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9198:	4381      	bics	r1, r0
    919a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    919c:	6819      	ldr	r1, [r3, #0]
    919e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91a0:	4381      	bics	r1, r0
    91a2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    91a4:	6819      	ldr	r1, [r3, #0]
    91a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91a8:	4301      	orrs	r1, r0
    91aa:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    91ac:	6811      	ldr	r1, [r2, #0]
    91ae:	6d20      	ldr	r0, [r4, #80]	; 0x50
    91b0:	4381      	bics	r1, r0
    91b2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    91b4:	6819      	ldr	r1, [r3, #0]
    91b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91b8:	4381      	bics	r1, r0
    91ba:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    91bc:	6819      	ldr	r1, [r3, #0]
    91be:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91c0:	4301      	orrs	r1, r0
    91c2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    91c4:	6811      	ldr	r1, [r2, #0]
    91c6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    91c8:	4381      	bics	r1, r0
    91ca:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    91cc:	6819      	ldr	r1, [r3, #0]
    91ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91d0:	4381      	bics	r1, r0
    91d2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    91d4:	6819      	ldr	r1, [r3, #0]
    91d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91d8:	4301      	orrs	r1, r0
    91da:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    91dc:	6811      	ldr	r1, [r2, #0]
    91de:	6d20      	ldr	r0, [r4, #80]	; 0x50
    91e0:	4301      	orrs	r1, r0
    91e2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    91e4:	6819      	ldr	r1, [r3, #0]
    91e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91e8:	4381      	bics	r1, r0
    91ea:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    91ec:	6819      	ldr	r1, [r3, #0]
    91ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
    91f0:	4301      	orrs	r1, r0
    91f2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    91f4:	6811      	ldr	r1, [r2, #0]
    91f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    91f8:	4381      	bics	r1, r0
    91fa:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    91fc:	6819      	ldr	r1, [r3, #0]
    91fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9200:	4381      	bics	r1, r0
    9202:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9204:	6819      	ldr	r1, [r3, #0]
    9206:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9208:	4301      	orrs	r1, r0
    920a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    920c:	6811      	ldr	r1, [r2, #0]
    920e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9210:	4301      	orrs	r1, r0
    9212:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9214:	6819      	ldr	r1, [r3, #0]
    9216:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9218:	4381      	bics	r1, r0
    921a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    921c:	6819      	ldr	r1, [r3, #0]
    921e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9220:	4301      	orrs	r1, r0
    9222:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9224:	6811      	ldr	r1, [r2, #0]
    9226:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9228:	4381      	bics	r1, r0
    922a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    922c:	6819      	ldr	r1, [r3, #0]
    922e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9230:	4381      	bics	r1, r0
    9232:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9234:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9236:	6819      	ldr	r1, [r3, #0]
    9238:	4301      	orrs	r1, r0
    923a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    923c:	6811      	ldr	r1, [r2, #0]
    923e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9240:	4381      	bics	r1, r0
    9242:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9244:	681a      	ldr	r2, [r3, #0]
    9246:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9248:	438a      	bics	r2, r1
    924a:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    924c:	681a      	ldr	r2, [r3, #0]
    924e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9250:	430a      	orrs	r2, r1
    9252:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    9254:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9256:	2b00      	cmp	r3, #0
    9258:	da01      	bge.n	925e <_ZN16Adafruit_ILI93415beginEm+0x3982>
    925a:	f000 fe93 	bl	9f84 <_ZN16Adafruit_ILI93415beginEm+0x46a8>
    925e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    9260:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9262:	6811      	ldr	r1, [r2, #0]
    9264:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9266:	4381      	bics	r1, r0
    9268:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    926a:	6819      	ldr	r1, [r3, #0]
    926c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    926e:	4381      	bics	r1, r0
    9270:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9272:	6819      	ldr	r1, [r3, #0]
    9274:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9276:	4301      	orrs	r1, r0
    9278:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    927a:	6811      	ldr	r1, [r2, #0]
    927c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    927e:	4381      	bics	r1, r0
    9280:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9282:	6819      	ldr	r1, [r3, #0]
    9284:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9286:	4381      	bics	r1, r0
    9288:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    928a:	6819      	ldr	r1, [r3, #0]
    928c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    928e:	4301      	orrs	r1, r0
    9290:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9292:	6811      	ldr	r1, [r2, #0]
    9294:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9296:	4381      	bics	r1, r0
    9298:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    929a:	6819      	ldr	r1, [r3, #0]
    929c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    929e:	4381      	bics	r1, r0
    92a0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    92a2:	6819      	ldr	r1, [r3, #0]
    92a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    92a6:	4301      	orrs	r1, r0
    92a8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    92aa:	6811      	ldr	r1, [r2, #0]
    92ac:	6d20      	ldr	r0, [r4, #80]	; 0x50
    92ae:	4381      	bics	r1, r0
    92b0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    92b2:	6819      	ldr	r1, [r3, #0]
    92b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    92b6:	4381      	bics	r1, r0
    92b8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    92ba:	6819      	ldr	r1, [r3, #0]
    92bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    92be:	4301      	orrs	r1, r0
    92c0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    92c2:	6811      	ldr	r1, [r2, #0]
    92c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    92c6:	4381      	bics	r1, r0
    92c8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    92ca:	6819      	ldr	r1, [r3, #0]
    92cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    92ce:	4381      	bics	r1, r0
    92d0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    92d2:	6819      	ldr	r1, [r3, #0]
    92d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    92d6:	4301      	orrs	r1, r0
    92d8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    92da:	6811      	ldr	r1, [r2, #0]
    92dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    92de:	4381      	bics	r1, r0
    92e0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    92e2:	6819      	ldr	r1, [r3, #0]
    92e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    92e6:	4381      	bics	r1, r0
    92e8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    92ea:	6819      	ldr	r1, [r3, #0]
    92ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    92ee:	4301      	orrs	r1, r0
    92f0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    92f2:	6811      	ldr	r1, [r2, #0]
    92f4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    92f6:	4301      	orrs	r1, r0
    92f8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    92fa:	6819      	ldr	r1, [r3, #0]
    92fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    92fe:	4381      	bics	r1, r0
    9300:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9302:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9304:	6819      	ldr	r1, [r3, #0]
    9306:	4301      	orrs	r1, r0
    9308:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    930a:	6811      	ldr	r1, [r2, #0]
    930c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    930e:	4301      	orrs	r1, r0
    9310:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9312:	681a      	ldr	r2, [r3, #0]
    9314:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9316:	438a      	bics	r2, r1
    9318:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    931a:	681a      	ldr	r2, [r3, #0]
    931c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    931e:	430a      	orrs	r2, r1
    9320:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    9322:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9324:	2b00      	cmp	r3, #0
    9326:	da01      	bge.n	932c <_ZN16Adafruit_ILI93415beginEm+0x3a50>
    9328:	f000 fe32 	bl	9f90 <_ZN16Adafruit_ILI93415beginEm+0x46b4>
    932c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    932e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9330:	6811      	ldr	r1, [r2, #0]
    9332:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9334:	4381      	bics	r1, r0
    9336:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9338:	6819      	ldr	r1, [r3, #0]
    933a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    933c:	4381      	bics	r1, r0
    933e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9340:	6819      	ldr	r1, [r3, #0]
    9342:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9344:	4301      	orrs	r1, r0
    9346:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9348:	6811      	ldr	r1, [r2, #0]
    934a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    934c:	4381      	bics	r1, r0
    934e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9350:	6819      	ldr	r1, [r3, #0]
    9352:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9354:	4381      	bics	r1, r0
    9356:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9358:	6819      	ldr	r1, [r3, #0]
    935a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    935c:	4301      	orrs	r1, r0
    935e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9360:	6811      	ldr	r1, [r2, #0]
    9362:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9364:	4381      	bics	r1, r0
    9366:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9368:	6819      	ldr	r1, [r3, #0]
    936a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    936c:	4381      	bics	r1, r0
    936e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9370:	6819      	ldr	r1, [r3, #0]
    9372:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9374:	4301      	orrs	r1, r0
    9376:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9378:	6811      	ldr	r1, [r2, #0]
    937a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    937c:	4301      	orrs	r1, r0
    937e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9380:	6819      	ldr	r1, [r3, #0]
    9382:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9384:	4381      	bics	r1, r0
    9386:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9388:	6819      	ldr	r1, [r3, #0]
    938a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    938c:	4301      	orrs	r1, r0
    938e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9390:	6811      	ldr	r1, [r2, #0]
    9392:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9394:	4381      	bics	r1, r0
    9396:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9398:	6819      	ldr	r1, [r3, #0]
    939a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    939c:	4381      	bics	r1, r0
    939e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    93a0:	6819      	ldr	r1, [r3, #0]
    93a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    93a4:	4301      	orrs	r1, r0
    93a6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    93a8:	6811      	ldr	r1, [r2, #0]
    93aa:	6d20      	ldr	r0, [r4, #80]	; 0x50
    93ac:	4381      	bics	r1, r0
    93ae:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    93b0:	6819      	ldr	r1, [r3, #0]
    93b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    93b4:	4381      	bics	r1, r0
    93b6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    93b8:	6819      	ldr	r1, [r3, #0]
    93ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
    93bc:	4301      	orrs	r1, r0
    93be:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    93c0:	6811      	ldr	r1, [r2, #0]
    93c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    93c4:	4381      	bics	r1, r0
    93c6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    93c8:	6819      	ldr	r1, [r3, #0]
    93ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
    93cc:	4381      	bics	r1, r0
    93ce:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    93d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    93d2:	6819      	ldr	r1, [r3, #0]
    93d4:	4301      	orrs	r1, r0
    93d6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    93d8:	6811      	ldr	r1, [r2, #0]
    93da:	6d20      	ldr	r0, [r4, #80]	; 0x50
    93dc:	4301      	orrs	r1, r0
    93de:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    93e0:	681a      	ldr	r2, [r3, #0]
    93e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
    93e4:	438a      	bics	r2, r1
    93e6:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    93e8:	681a      	ldr	r2, [r3, #0]
    93ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
    93ec:	430a      	orrs	r2, r1
    93ee:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    93f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    93f2:	2b00      	cmp	r3, #0
    93f4:	da01      	bge.n	93fa <_ZN16Adafruit_ILI93415beginEm+0x3b1e>
    93f6:	f000 fdd1 	bl	9f9c <_ZN16Adafruit_ILI93415beginEm+0x46c0>
    93fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    93fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    93fe:	6811      	ldr	r1, [r2, #0]
    9400:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9402:	4381      	bics	r1, r0
    9404:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9406:	6819      	ldr	r1, [r3, #0]
    9408:	6da0      	ldr	r0, [r4, #88]	; 0x58
    940a:	4381      	bics	r1, r0
    940c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    940e:	6819      	ldr	r1, [r3, #0]
    9410:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9412:	4301      	orrs	r1, r0
    9414:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9416:	6811      	ldr	r1, [r2, #0]
    9418:	6d20      	ldr	r0, [r4, #80]	; 0x50
    941a:	4381      	bics	r1, r0
    941c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    941e:	6819      	ldr	r1, [r3, #0]
    9420:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9422:	4381      	bics	r1, r0
    9424:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9426:	6819      	ldr	r1, [r3, #0]
    9428:	6da0      	ldr	r0, [r4, #88]	; 0x58
    942a:	4301      	orrs	r1, r0
    942c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    942e:	6811      	ldr	r1, [r2, #0]
    9430:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9432:	4381      	bics	r1, r0
    9434:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9436:	6819      	ldr	r1, [r3, #0]
    9438:	6da0      	ldr	r0, [r4, #88]	; 0x58
    943a:	4381      	bics	r1, r0
    943c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    943e:	6819      	ldr	r1, [r3, #0]
    9440:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9442:	4301      	orrs	r1, r0
    9444:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9446:	6811      	ldr	r1, [r2, #0]
    9448:	6d20      	ldr	r0, [r4, #80]	; 0x50
    944a:	4381      	bics	r1, r0
    944c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    944e:	6819      	ldr	r1, [r3, #0]
    9450:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9452:	4381      	bics	r1, r0
    9454:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9456:	6819      	ldr	r1, [r3, #0]
    9458:	6da0      	ldr	r0, [r4, #88]	; 0x58
    945a:	4301      	orrs	r1, r0
    945c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    945e:	6811      	ldr	r1, [r2, #0]
    9460:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9462:	4381      	bics	r1, r0
    9464:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9466:	6819      	ldr	r1, [r3, #0]
    9468:	6da0      	ldr	r0, [r4, #88]	; 0x58
    946a:	4381      	bics	r1, r0
    946c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    946e:	6819      	ldr	r1, [r3, #0]
    9470:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9472:	4301      	orrs	r1, r0
    9474:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9476:	6811      	ldr	r1, [r2, #0]
    9478:	6d20      	ldr	r0, [r4, #80]	; 0x50
    947a:	4301      	orrs	r1, r0
    947c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    947e:	6819      	ldr	r1, [r3, #0]
    9480:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9482:	4381      	bics	r1, r0
    9484:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9486:	6819      	ldr	r1, [r3, #0]
    9488:	6da0      	ldr	r0, [r4, #88]	; 0x58
    948a:	4301      	orrs	r1, r0
    948c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    948e:	6811      	ldr	r1, [r2, #0]
    9490:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9492:	4301      	orrs	r1, r0
    9494:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9496:	6819      	ldr	r1, [r3, #0]
    9498:	6da0      	ldr	r0, [r4, #88]	; 0x58
    949a:	4381      	bics	r1, r0
    949c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    949e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    94a0:	6819      	ldr	r1, [r3, #0]
    94a2:	4301      	orrs	r1, r0
    94a4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    94a6:	6811      	ldr	r1, [r2, #0]
    94a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    94aa:	4301      	orrs	r1, r0
    94ac:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    94ae:	681a      	ldr	r2, [r3, #0]
    94b0:	6da1      	ldr	r1, [r4, #88]	; 0x58
    94b2:	438a      	bics	r2, r1
    94b4:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    94b6:	681a      	ldr	r2, [r3, #0]
    94b8:	6da1      	ldr	r1, [r4, #88]	; 0x58
    94ba:	430a      	orrs	r2, r1
    94bc:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    94be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    94c0:	2b00      	cmp	r3, #0
    94c2:	da01      	bge.n	94c8 <_ZN16Adafruit_ILI93415beginEm+0x3bec>
    94c4:	f000 fd70 	bl	9fa8 <_ZN16Adafruit_ILI93415beginEm+0x46cc>
    94c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    94ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
    94cc:	6811      	ldr	r1, [r2, #0]
    94ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
    94d0:	4381      	bics	r1, r0
    94d2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    94d4:	6819      	ldr	r1, [r3, #0]
    94d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    94d8:	4381      	bics	r1, r0
    94da:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    94dc:	6819      	ldr	r1, [r3, #0]
    94de:	6da0      	ldr	r0, [r4, #88]	; 0x58
    94e0:	4301      	orrs	r1, r0
    94e2:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    94e4:	6811      	ldr	r1, [r2, #0]
    94e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    94e8:	4381      	bics	r1, r0
    94ea:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    94ec:	6819      	ldr	r1, [r3, #0]
    94ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
    94f0:	4381      	bics	r1, r0
    94f2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    94f4:	6819      	ldr	r1, [r3, #0]
    94f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    94f8:	4301      	orrs	r1, r0
    94fa:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    94fc:	6811      	ldr	r1, [r2, #0]
    94fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9500:	4301      	orrs	r1, r0
    9502:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9504:	6819      	ldr	r1, [r3, #0]
    9506:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9508:	4381      	bics	r1, r0
    950a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    950c:	6819      	ldr	r1, [r3, #0]
    950e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9510:	4301      	orrs	r1, r0
    9512:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9514:	6811      	ldr	r1, [r2, #0]
    9516:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9518:	4301      	orrs	r1, r0
    951a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    951c:	6819      	ldr	r1, [r3, #0]
    951e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9520:	4381      	bics	r1, r0
    9522:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9524:	6819      	ldr	r1, [r3, #0]
    9526:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9528:	4301      	orrs	r1, r0
    952a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    952c:	6811      	ldr	r1, [r2, #0]
    952e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9530:	4381      	bics	r1, r0
    9532:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9534:	6819      	ldr	r1, [r3, #0]
    9536:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9538:	4381      	bics	r1, r0
    953a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    953c:	6819      	ldr	r1, [r3, #0]
    953e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9540:	4301      	orrs	r1, r0
    9542:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9544:	6811      	ldr	r1, [r2, #0]
    9546:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9548:	4381      	bics	r1, r0
    954a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    954c:	6819      	ldr	r1, [r3, #0]
    954e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9550:	4381      	bics	r1, r0
    9552:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9554:	6819      	ldr	r1, [r3, #0]
    9556:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9558:	4301      	orrs	r1, r0
    955a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    955c:	6811      	ldr	r1, [r2, #0]
    955e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9560:	4381      	bics	r1, r0
    9562:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9564:	6819      	ldr	r1, [r3, #0]
    9566:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9568:	4381      	bics	r1, r0
    956a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    956c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    956e:	6819      	ldr	r1, [r3, #0]
    9570:	4301      	orrs	r1, r0
    9572:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9574:	6811      	ldr	r1, [r2, #0]
    9576:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9578:	4301      	orrs	r1, r0
    957a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    957c:	681a      	ldr	r2, [r3, #0]
    957e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9580:	438a      	bics	r2, r1
    9582:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    9584:	681a      	ldr	r2, [r3, #0]
    9586:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9588:	430a      	orrs	r2, r1
    958a:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    958c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    958e:	2b00      	cmp	r3, #0
    9590:	da01      	bge.n	9596 <_ZN16Adafruit_ILI93415beginEm+0x3cba>
    9592:	f000 fd0f 	bl	9fb4 <_ZN16Adafruit_ILI93415beginEm+0x46d8>
    9596:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_HIGH();
    9598:	6d20      	ldr	r0, [r4, #80]	; 0x50
    959a:	6811      	ldr	r1, [r2, #0]
    959c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    959e:	4301      	orrs	r1, r0
    95a0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    95a2:	6819      	ldr	r1, [r3, #0]
    95a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    95a6:	4381      	bics	r1, r0
    95a8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    95aa:	6819      	ldr	r1, [r3, #0]
    95ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    95ae:	4301      	orrs	r1, r0
    95b0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    95b2:	6811      	ldr	r1, [r2, #0]
    95b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    95b6:	4301      	orrs	r1, r0
    95b8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    95ba:	6819      	ldr	r1, [r3, #0]
    95bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    95be:	4381      	bics	r1, r0
    95c0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    95c2:	6819      	ldr	r1, [r3, #0]
    95c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    95c6:	4301      	orrs	r1, r0
    95c8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    95ca:	6811      	ldr	r1, [r2, #0]
    95cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    95ce:	4381      	bics	r1, r0
    95d0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    95d2:	6819      	ldr	r1, [r3, #0]
    95d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    95d6:	4381      	bics	r1, r0
    95d8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    95da:	6819      	ldr	r1, [r3, #0]
    95dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    95de:	4301      	orrs	r1, r0
    95e0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    95e2:	6811      	ldr	r1, [r2, #0]
    95e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    95e6:	4381      	bics	r1, r0
    95e8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    95ea:	6819      	ldr	r1, [r3, #0]
    95ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    95ee:	4381      	bics	r1, r0
    95f0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    95f2:	6819      	ldr	r1, [r3, #0]
    95f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    95f6:	4301      	orrs	r1, r0
    95f8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    95fa:	6811      	ldr	r1, [r2, #0]
    95fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    95fe:	4381      	bics	r1, r0
    9600:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9602:	6819      	ldr	r1, [r3, #0]
    9604:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9606:	4381      	bics	r1, r0
    9608:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    960a:	6819      	ldr	r1, [r3, #0]
    960c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    960e:	4301      	orrs	r1, r0
    9610:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9612:	6811      	ldr	r1, [r2, #0]
    9614:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9616:	4381      	bics	r1, r0
    9618:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    961a:	6819      	ldr	r1, [r3, #0]
    961c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    961e:	4381      	bics	r1, r0
    9620:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9622:	6819      	ldr	r1, [r3, #0]
    9624:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9626:	4301      	orrs	r1, r0
    9628:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    962a:	6811      	ldr	r1, [r2, #0]
    962c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    962e:	4381      	bics	r1, r0
    9630:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9632:	6819      	ldr	r1, [r3, #0]
    9634:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9636:	4381      	bics	r1, r0
    9638:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    963a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    963c:	6819      	ldr	r1, [r3, #0]
    963e:	4301      	orrs	r1, r0
    9640:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9642:	6811      	ldr	r1, [r2, #0]
    9644:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9646:	4301      	orrs	r1, r0
    9648:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    964a:	681a      	ldr	r2, [r3, #0]
    964c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    964e:	438a      	bics	r2, r1
    9650:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    9652:	681a      	ldr	r2, [r3, #0]
    9654:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9656:	430a      	orrs	r2, r1
    9658:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    965a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    965c:	2b00      	cmp	r3, #0
    965e:	da01      	bge.n	9664 <_ZN16Adafruit_ILI93415beginEm+0x3d88>
    9660:	f000 fc69 	bl	9f36 <_ZN16Adafruit_ILI93415beginEm+0x465a>
    9664:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    9666:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9668:	6811      	ldr	r1, [r2, #0]
    966a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    966c:	4381      	bics	r1, r0
    966e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9670:	6819      	ldr	r1, [r3, #0]
    9672:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9674:	4381      	bics	r1, r0
    9676:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9678:	6819      	ldr	r1, [r3, #0]
    967a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    967c:	4301      	orrs	r1, r0
    967e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9680:	6811      	ldr	r1, [r2, #0]
    9682:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9684:	4301      	orrs	r1, r0
    9686:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9688:	6819      	ldr	r1, [r3, #0]
    968a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    968c:	4381      	bics	r1, r0
    968e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9690:	6819      	ldr	r1, [r3, #0]
    9692:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9694:	4301      	orrs	r1, r0
    9696:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9698:	6811      	ldr	r1, [r2, #0]
    969a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    969c:	4381      	bics	r1, r0
    969e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    96a0:	6819      	ldr	r1, [r3, #0]
    96a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    96a4:	4381      	bics	r1, r0
    96a6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    96a8:	6819      	ldr	r1, [r3, #0]
    96aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    96ac:	4301      	orrs	r1, r0
    96ae:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    96b0:	6811      	ldr	r1, [r2, #0]
    96b2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    96b4:	4381      	bics	r1, r0
    96b6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    96b8:	6819      	ldr	r1, [r3, #0]
    96ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
    96bc:	4381      	bics	r1, r0
    96be:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    96c0:	6819      	ldr	r1, [r3, #0]
    96c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    96c4:	4301      	orrs	r1, r0
    96c6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    96c8:	6811      	ldr	r1, [r2, #0]
    96ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
    96cc:	4301      	orrs	r1, r0
    96ce:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    96d0:	6819      	ldr	r1, [r3, #0]
    96d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    96d4:	4381      	bics	r1, r0
    96d6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    96d8:	6819      	ldr	r1, [r3, #0]
    96da:	6da0      	ldr	r0, [r4, #88]	; 0x58
    96dc:	4301      	orrs	r1, r0
    96de:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    96e0:	6811      	ldr	r1, [r2, #0]
    96e2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    96e4:	4381      	bics	r1, r0
    96e6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    96e8:	6819      	ldr	r1, [r3, #0]
    96ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
    96ec:	4381      	bics	r1, r0
    96ee:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    96f0:	6819      	ldr	r1, [r3, #0]
    96f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    96f4:	4301      	orrs	r1, r0
    96f6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    96f8:	6811      	ldr	r1, [r2, #0]
    96fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
    96fc:	4381      	bics	r1, r0
    96fe:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9700:	6819      	ldr	r1, [r3, #0]
    9702:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9704:	4381      	bics	r1, r0
    9706:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9708:	6da0      	ldr	r0, [r4, #88]	; 0x58
    970a:	6819      	ldr	r1, [r3, #0]
    970c:	4301      	orrs	r1, r0
    970e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9710:	6811      	ldr	r1, [r2, #0]
    9712:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9714:	4381      	bics	r1, r0
    9716:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9718:	681a      	ldr	r2, [r3, #0]
    971a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    971c:	438a      	bics	r2, r1
    971e:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    9720:	681a      	ldr	r2, [r3, #0]
    9722:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9724:	430a      	orrs	r2, r1
    9726:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    9728:	6b23      	ldr	r3, [r4, #48]	; 0x30
    972a:	2b00      	cmp	r3, #0
    972c:	da01      	bge.n	9732 <_ZN16Adafruit_ILI93415beginEm+0x3e56>
    972e:	f000 fc08 	bl	9f42 <_ZN16Adafruit_ILI93415beginEm+0x4666>
    9732:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    9734:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9736:	6811      	ldr	r1, [r2, #0]
    9738:	6c63      	ldr	r3, [r4, #68]	; 0x44
    973a:	4381      	bics	r1, r0
    973c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    973e:	6819      	ldr	r1, [r3, #0]
    9740:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9742:	4381      	bics	r1, r0
    9744:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9746:	6819      	ldr	r1, [r3, #0]
    9748:	6da0      	ldr	r0, [r4, #88]	; 0x58
    974a:	4301      	orrs	r1, r0
    974c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    974e:	6811      	ldr	r1, [r2, #0]
    9750:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9752:	4381      	bics	r1, r0
    9754:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9756:	6819      	ldr	r1, [r3, #0]
    9758:	6da0      	ldr	r0, [r4, #88]	; 0x58
    975a:	4381      	bics	r1, r0
    975c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    975e:	6819      	ldr	r1, [r3, #0]
    9760:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9762:	4301      	orrs	r1, r0
    9764:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9766:	6811      	ldr	r1, [r2, #0]
    9768:	6d20      	ldr	r0, [r4, #80]	; 0x50
    976a:	4381      	bics	r1, r0
    976c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    976e:	6819      	ldr	r1, [r3, #0]
    9770:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9772:	4381      	bics	r1, r0
    9774:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9776:	6819      	ldr	r1, [r3, #0]
    9778:	6da0      	ldr	r0, [r4, #88]	; 0x58
    977a:	4301      	orrs	r1, r0
    977c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    977e:	6811      	ldr	r1, [r2, #0]
    9780:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9782:	4381      	bics	r1, r0
    9784:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9786:	6819      	ldr	r1, [r3, #0]
    9788:	6da0      	ldr	r0, [r4, #88]	; 0x58
    978a:	4381      	bics	r1, r0
    978c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    978e:	6819      	ldr	r1, [r3, #0]
    9790:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9792:	4301      	orrs	r1, r0
    9794:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9796:	6811      	ldr	r1, [r2, #0]
    9798:	6d20      	ldr	r0, [r4, #80]	; 0x50
    979a:	4301      	orrs	r1, r0
    979c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    979e:	6819      	ldr	r1, [r3, #0]
    97a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    97a2:	4381      	bics	r1, r0
    97a4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    97a6:	6819      	ldr	r1, [r3, #0]
    97a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    97aa:	4301      	orrs	r1, r0
    97ac:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    97ae:	6811      	ldr	r1, [r2, #0]
    97b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    97b2:	4381      	bics	r1, r0
    97b4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    97b6:	6819      	ldr	r1, [r3, #0]
    97b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    97ba:	4381      	bics	r1, r0
    97bc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    97be:	6819      	ldr	r1, [r3, #0]
    97c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    97c2:	4301      	orrs	r1, r0
    97c4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    97c6:	6811      	ldr	r1, [r2, #0]
    97c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    97ca:	4381      	bics	r1, r0
    97cc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    97ce:	6819      	ldr	r1, [r3, #0]
    97d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    97d2:	4381      	bics	r1, r0
    97d4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    97d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    97d8:	6819      	ldr	r1, [r3, #0]
    97da:	4301      	orrs	r1, r0
    97dc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    97de:	6811      	ldr	r1, [r2, #0]
    97e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    97e2:	4381      	bics	r1, r0
    97e4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    97e6:	681a      	ldr	r2, [r3, #0]
    97e8:	6da1      	ldr	r1, [r4, #88]	; 0x58
    97ea:	438a      	bics	r2, r1
    97ec:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    97ee:	681a      	ldr	r2, [r3, #0]
    97f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
    97f2:	430a      	orrs	r2, r1
    97f4:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    97f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    97f8:	2b00      	cmp	r3, #0
    97fa:	da00      	bge.n	97fe <_ZN16Adafruit_ILI93415beginEm+0x3f22>
    97fc:	e3a6      	b.n	9f4c <_ZN16Adafruit_ILI93415beginEm+0x4670>
    97fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    9800:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9802:	6811      	ldr	r1, [r2, #0]
    9804:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9806:	4381      	bics	r1, r0
    9808:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    980a:	6819      	ldr	r1, [r3, #0]
    980c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    980e:	4381      	bics	r1, r0
    9810:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9812:	6819      	ldr	r1, [r3, #0]
    9814:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9816:	4301      	orrs	r1, r0
    9818:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    981a:	6811      	ldr	r1, [r2, #0]
    981c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    981e:	4381      	bics	r1, r0
    9820:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9822:	6819      	ldr	r1, [r3, #0]
    9824:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9826:	4381      	bics	r1, r0
    9828:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    982a:	6819      	ldr	r1, [r3, #0]
    982c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    982e:	4301      	orrs	r1, r0
    9830:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9832:	6811      	ldr	r1, [r2, #0]
    9834:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9836:	4381      	bics	r1, r0
    9838:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    983a:	6819      	ldr	r1, [r3, #0]
    983c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    983e:	4381      	bics	r1, r0
    9840:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9842:	6819      	ldr	r1, [r3, #0]
    9844:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9846:	4301      	orrs	r1, r0
    9848:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    984a:	6811      	ldr	r1, [r2, #0]
    984c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    984e:	4381      	bics	r1, r0
    9850:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9852:	6819      	ldr	r1, [r3, #0]
    9854:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9856:	4381      	bics	r1, r0
    9858:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    985a:	6819      	ldr	r1, [r3, #0]
    985c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    985e:	4301      	orrs	r1, r0
    9860:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9862:	6811      	ldr	r1, [r2, #0]
    9864:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9866:	4301      	orrs	r1, r0
    9868:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    986a:	6819      	ldr	r1, [r3, #0]
    986c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    986e:	4381      	bics	r1, r0
    9870:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9872:	6819      	ldr	r1, [r3, #0]
    9874:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9876:	4301      	orrs	r1, r0
    9878:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    987a:	6811      	ldr	r1, [r2, #0]
    987c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    987e:	4301      	orrs	r1, r0
    9880:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9882:	6819      	ldr	r1, [r3, #0]
    9884:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9886:	4381      	bics	r1, r0
    9888:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    988a:	6819      	ldr	r1, [r3, #0]
    988c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    988e:	4301      	orrs	r1, r0
    9890:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9892:	6811      	ldr	r1, [r2, #0]
    9894:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9896:	4301      	orrs	r1, r0
    9898:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    989a:	6819      	ldr	r1, [r3, #0]
    989c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    989e:	4381      	bics	r1, r0
    98a0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    98a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    98a4:	6819      	ldr	r1, [r3, #0]
    98a6:	4301      	orrs	r1, r0
    98a8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    98aa:	6811      	ldr	r1, [r2, #0]
    98ac:	6d20      	ldr	r0, [r4, #80]	; 0x50
    98ae:	4301      	orrs	r1, r0
    98b0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    98b2:	681a      	ldr	r2, [r3, #0]
    98b4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    98b6:	438a      	bics	r2, r1
    98b8:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    98ba:	681a      	ldr	r2, [r3, #0]
    98bc:	6da1      	ldr	r1, [r4, #88]	; 0x58
    98be:	430a      	orrs	r2, r1
    98c0:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    98c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    98c4:	2b00      	cmp	r3, #0
    98c6:	da00      	bge.n	98ca <_ZN16Adafruit_ILI93415beginEm+0x3fee>
    98c8:	e345      	b.n	9f56 <_ZN16Adafruit_ILI93415beginEm+0x467a>
    98ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    98cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    98ce:	6811      	ldr	r1, [r2, #0]
    98d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    98d2:	4381      	bics	r1, r0
    98d4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    98d6:	6819      	ldr	r1, [r3, #0]
    98d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    98da:	4381      	bics	r1, r0
    98dc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    98de:	6819      	ldr	r1, [r3, #0]
    98e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    98e2:	4301      	orrs	r1, r0
    98e4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    98e6:	6811      	ldr	r1, [r2, #0]
    98e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    98ea:	4381      	bics	r1, r0
    98ec:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    98ee:	6819      	ldr	r1, [r3, #0]
    98f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    98f2:	4381      	bics	r1, r0
    98f4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    98f6:	6819      	ldr	r1, [r3, #0]
    98f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    98fa:	4301      	orrs	r1, r0
    98fc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    98fe:	6811      	ldr	r1, [r2, #0]
    9900:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9902:	4381      	bics	r1, r0
    9904:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9906:	6819      	ldr	r1, [r3, #0]
    9908:	6da0      	ldr	r0, [r4, #88]	; 0x58
    990a:	4381      	bics	r1, r0
    990c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    990e:	6819      	ldr	r1, [r3, #0]
    9910:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9912:	4301      	orrs	r1, r0
    9914:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9916:	6811      	ldr	r1, [r2, #0]
    9918:	6d20      	ldr	r0, [r4, #80]	; 0x50
    991a:	4381      	bics	r1, r0
    991c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    991e:	6819      	ldr	r1, [r3, #0]
    9920:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9922:	4381      	bics	r1, r0
    9924:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9926:	6819      	ldr	r1, [r3, #0]
    9928:	6da0      	ldr	r0, [r4, #88]	; 0x58
    992a:	4301      	orrs	r1, r0
    992c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    992e:	6811      	ldr	r1, [r2, #0]
    9930:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9932:	4301      	orrs	r1, r0
    9934:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9936:	6819      	ldr	r1, [r3, #0]
    9938:	6da0      	ldr	r0, [r4, #88]	; 0x58
    993a:	4381      	bics	r1, r0
    993c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    993e:	6819      	ldr	r1, [r3, #0]
    9940:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9942:	4301      	orrs	r1, r0
    9944:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9946:	6811      	ldr	r1, [r2, #0]
    9948:	6d20      	ldr	r0, [r4, #80]	; 0x50
    994a:	4301      	orrs	r1, r0
    994c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    994e:	6819      	ldr	r1, [r3, #0]
    9950:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9952:	4381      	bics	r1, r0
    9954:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9956:	6819      	ldr	r1, [r3, #0]
    9958:	6da0      	ldr	r0, [r4, #88]	; 0x58
    995a:	4301      	orrs	r1, r0
    995c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    995e:	6811      	ldr	r1, [r2, #0]
    9960:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9962:	4381      	bics	r1, r0
    9964:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9966:	6819      	ldr	r1, [r3, #0]
    9968:	6da0      	ldr	r0, [r4, #88]	; 0x58
    996a:	4381      	bics	r1, r0
    996c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    996e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9970:	6819      	ldr	r1, [r3, #0]
    9972:	4301      	orrs	r1, r0
    9974:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9976:	6811      	ldr	r1, [r2, #0]
    9978:	6d20      	ldr	r0, [r4, #80]	; 0x50
    997a:	4381      	bics	r1, r0
    997c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    997e:	681a      	ldr	r2, [r3, #0]
    9980:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9982:	438a      	bics	r2, r1
    9984:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    9986:	681a      	ldr	r2, [r3, #0]
    9988:	6da1      	ldr	r1, [r4, #88]	; 0x58
    998a:	430a      	orrs	r2, r1
    998c:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    998e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9990:	2b00      	cmp	r3, #0
    9992:	da00      	bge.n	9996 <_ZN16Adafruit_ILI93415beginEm+0x40ba>
    9994:	e3b1      	b.n	a0fa <_ZN16Adafruit_ILI93415beginEm+0x481e>
    9996:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    9998:	6d20      	ldr	r0, [r4, #80]	; 0x50
    999a:	6811      	ldr	r1, [r2, #0]
    999c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    999e:	4381      	bics	r1, r0
    99a0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    99a2:	6819      	ldr	r1, [r3, #0]
    99a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    99a6:	4381      	bics	r1, r0
    99a8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    99aa:	6819      	ldr	r1, [r3, #0]
    99ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    99ae:	4301      	orrs	r1, r0
    99b0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    99b2:	6811      	ldr	r1, [r2, #0]
    99b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    99b6:	4381      	bics	r1, r0
    99b8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    99ba:	6819      	ldr	r1, [r3, #0]
    99bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    99be:	4381      	bics	r1, r0
    99c0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    99c2:	6819      	ldr	r1, [r3, #0]
    99c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    99c6:	4301      	orrs	r1, r0
    99c8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    99ca:	6811      	ldr	r1, [r2, #0]
    99cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    99ce:	4301      	orrs	r1, r0
    99d0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    99d2:	6819      	ldr	r1, [r3, #0]
    99d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    99d6:	4381      	bics	r1, r0
    99d8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    99da:	6819      	ldr	r1, [r3, #0]
    99dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    99de:	4301      	orrs	r1, r0
    99e0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    99e2:	6811      	ldr	r1, [r2, #0]
    99e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    99e6:	4301      	orrs	r1, r0
    99e8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    99ea:	6819      	ldr	r1, [r3, #0]
    99ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    99ee:	4381      	bics	r1, r0
    99f0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    99f2:	6819      	ldr	r1, [r3, #0]
    99f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    99f6:	4301      	orrs	r1, r0
    99f8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    99fa:	6811      	ldr	r1, [r2, #0]
    99fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    99fe:	4381      	bics	r1, r0
    9a00:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9a02:	6819      	ldr	r1, [r3, #0]
    9a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a06:	4381      	bics	r1, r0
    9a08:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9a0a:	6819      	ldr	r1, [r3, #0]
    9a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a0e:	4301      	orrs	r1, r0
    9a10:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9a12:	6811      	ldr	r1, [r2, #0]
    9a14:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9a16:	4381      	bics	r1, r0
    9a18:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9a1a:	6819      	ldr	r1, [r3, #0]
    9a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a1e:	4381      	bics	r1, r0
    9a20:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9a22:	6819      	ldr	r1, [r3, #0]
    9a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a26:	4301      	orrs	r1, r0
    9a28:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9a2a:	6811      	ldr	r1, [r2, #0]
    9a2c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9a2e:	4381      	bics	r1, r0
    9a30:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9a32:	6819      	ldr	r1, [r3, #0]
    9a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a36:	4381      	bics	r1, r0
    9a38:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9a3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a3c:	6819      	ldr	r1, [r3, #0]
    9a3e:	4301      	orrs	r1, r0
    9a40:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9a42:	6811      	ldr	r1, [r2, #0]
    9a44:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9a46:	4301      	orrs	r1, r0
    9a48:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9a4a:	681a      	ldr	r2, [r3, #0]
    9a4c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9a4e:	438a      	bics	r2, r1
    9a50:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    9a52:	681a      	ldr	r2, [r3, #0]
    9a54:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9a56:	430a      	orrs	r2, r1
    9a58:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    9a5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9a5c:	2b00      	cmp	r3, #0
    9a5e:	da00      	bge.n	9a62 <_ZN16Adafruit_ILI93415beginEm+0x4186>
    9a60:	e350      	b.n	a104 <_ZN16Adafruit_ILI93415beginEm+0x4828>
    9a62:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    9a64:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9a66:	6811      	ldr	r1, [r2, #0]
    9a68:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9a6a:	4381      	bics	r1, r0
    9a6c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9a6e:	6819      	ldr	r1, [r3, #0]
    9a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a72:	4381      	bics	r1, r0
    9a74:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9a76:	6819      	ldr	r1, [r3, #0]
    9a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a7a:	4301      	orrs	r1, r0
    9a7c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9a7e:	6811      	ldr	r1, [r2, #0]
    9a80:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9a82:	4381      	bics	r1, r0
    9a84:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9a86:	6819      	ldr	r1, [r3, #0]
    9a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a8a:	4381      	bics	r1, r0
    9a8c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9a8e:	6819      	ldr	r1, [r3, #0]
    9a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9a92:	4301      	orrs	r1, r0
    9a94:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9a96:	6811      	ldr	r1, [r2, #0]
    9a98:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9a9a:	4301      	orrs	r1, r0
    9a9c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9a9e:	6819      	ldr	r1, [r3, #0]
    9aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9aa2:	4381      	bics	r1, r0
    9aa4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9aa6:	6819      	ldr	r1, [r3, #0]
    9aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9aaa:	4301      	orrs	r1, r0
    9aac:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9aae:	6811      	ldr	r1, [r2, #0]
    9ab0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9ab2:	4301      	orrs	r1, r0
    9ab4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9ab6:	6819      	ldr	r1, [r3, #0]
    9ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9aba:	4381      	bics	r1, r0
    9abc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9abe:	6819      	ldr	r1, [r3, #0]
    9ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9ac2:	4301      	orrs	r1, r0
    9ac4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9ac6:	6811      	ldr	r1, [r2, #0]
    9ac8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9aca:	4381      	bics	r1, r0
    9acc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9ace:	6819      	ldr	r1, [r3, #0]
    9ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9ad2:	4381      	bics	r1, r0
    9ad4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9ad6:	6819      	ldr	r1, [r3, #0]
    9ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9ada:	4301      	orrs	r1, r0
    9adc:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9ade:	6811      	ldr	r1, [r2, #0]
    9ae0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9ae2:	4301      	orrs	r1, r0
    9ae4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9ae6:	6819      	ldr	r1, [r3, #0]
    9ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9aea:	4381      	bics	r1, r0
    9aec:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9aee:	6819      	ldr	r1, [r3, #0]
    9af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9af2:	4301      	orrs	r1, r0
    9af4:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9af6:	6811      	ldr	r1, [r2, #0]
    9af8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9afa:	4301      	orrs	r1, r0
    9afc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9afe:	6819      	ldr	r1, [r3, #0]
    9b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b02:	4381      	bics	r1, r0
    9b04:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9b06:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b08:	6819      	ldr	r1, [r3, #0]
    9b0a:	4301      	orrs	r1, r0
    9b0c:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9b0e:	6811      	ldr	r1, [r2, #0]
    9b10:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9b12:	4381      	bics	r1, r0
    9b14:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9b16:	681a      	ldr	r2, [r3, #0]
    9b18:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9b1a:	438a      	bics	r2, r1
    9b1c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    9b1e:	681a      	ldr	r2, [r3, #0]
    9b20:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9b22:	430a      	orrs	r2, r1
    9b24:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    9b26:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9b28:	2b00      	cmp	r3, #0
    9b2a:	da00      	bge.n	9b2e <_ZN16Adafruit_ILI93415beginEm+0x4252>
    9b2c:	e2ef      	b.n	a10e <_ZN16Adafruit_ILI93415beginEm+0x4832>
    9b2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    9b30:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9b32:	6811      	ldr	r1, [r2, #0]
    9b34:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9b36:	4381      	bics	r1, r0
    9b38:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9b3a:	6819      	ldr	r1, [r3, #0]
    9b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b3e:	4381      	bics	r1, r0
    9b40:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9b42:	6819      	ldr	r1, [r3, #0]
    9b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b46:	4301      	orrs	r1, r0
    9b48:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9b4a:	6811      	ldr	r1, [r2, #0]
    9b4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9b4e:	4381      	bics	r1, r0
    9b50:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9b52:	6819      	ldr	r1, [r3, #0]
    9b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b56:	4381      	bics	r1, r0
    9b58:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9b5a:	6819      	ldr	r1, [r3, #0]
    9b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b5e:	4301      	orrs	r1, r0
    9b60:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9b62:	6811      	ldr	r1, [r2, #0]
    9b64:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9b66:	4381      	bics	r1, r0
    9b68:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9b6a:	6819      	ldr	r1, [r3, #0]
    9b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b6e:	4381      	bics	r1, r0
    9b70:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9b72:	6819      	ldr	r1, [r3, #0]
    9b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b76:	4301      	orrs	r1, r0
    9b78:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_LOW();
    9b7a:	6811      	ldr	r1, [r2, #0]
    9b7c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9b7e:	4381      	bics	r1, r0
    9b80:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9b82:	6819      	ldr	r1, [r3, #0]
    9b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b86:	4381      	bics	r1, r0
    9b88:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9b8a:	6819      	ldr	r1, [r3, #0]
    9b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b8e:	4301      	orrs	r1, r0
    9b90:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9b92:	6811      	ldr	r1, [r2, #0]
    9b94:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9b96:	4301      	orrs	r1, r0
    9b98:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9b9a:	6819      	ldr	r1, [r3, #0]
    9b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9b9e:	4381      	bics	r1, r0
    9ba0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9ba2:	6819      	ldr	r1, [r3, #0]
    9ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9ba6:	4301      	orrs	r1, r0
    9ba8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9baa:	6811      	ldr	r1, [r2, #0]
    9bac:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9bae:	4301      	orrs	r1, r0
    9bb0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9bb2:	6819      	ldr	r1, [r3, #0]
    9bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9bb6:	4381      	bics	r1, r0
    9bb8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9bba:	6819      	ldr	r1, [r3, #0]
    9bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9bbe:	4301      	orrs	r1, r0
    9bc0:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9bc2:	6811      	ldr	r1, [r2, #0]
    9bc4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9bc6:	4301      	orrs	r1, r0
    9bc8:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9bca:	6819      	ldr	r1, [r3, #0]
    9bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9bce:	4381      	bics	r1, r0
    9bd0:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    9bd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9bd4:	6819      	ldr	r1, [r3, #0]
    9bd6:	4301      	orrs	r1, r0
    9bd8:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    9bda:	6811      	ldr	r1, [r2, #0]
    9bdc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9bde:	4301      	orrs	r1, r0
    9be0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    9be2:	681a      	ldr	r2, [r3, #0]
    9be4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9be6:	438a      	bics	r2, r1
    9be8:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    9bea:	681a      	ldr	r2, [r3, #0]
    9bec:	6da1      	ldr	r1, [r4, #88]	; 0x58
    9bee:	430a      	orrs	r2, r1
    9bf0:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    9bf2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9bf4:	6e22      	ldr	r2, [r4, #96]	; 0x60
    9bf6:	680b      	ldr	r3, [r1, #0]
    9bf8:	4393      	bics	r3, r2
    9bfa:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    9bfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9bfe:	2b00      	cmp	r3, #0
    9c00:	da00      	bge.n	9c04 <_ZN16Adafruit_ILI93415beginEm+0x4328>
    9c02:	e289      	b.n	a118 <_ZN16Adafruit_ILI93415beginEm+0x483c>
    9c04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    9c06:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9c08:	6810      	ldr	r0, [r2, #0]
    9c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9c0c:	43a8      	bics	r0, r5
    9c0e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9c10:	6818      	ldr	r0, [r3, #0]
    9c12:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c14:	43a8      	bics	r0, r5
    9c16:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9c18:	6818      	ldr	r0, [r3, #0]
    9c1a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c1c:	4328      	orrs	r0, r5
    9c1e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    9c20:	6810      	ldr	r0, [r2, #0]
    9c22:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9c24:	43a8      	bics	r0, r5
    9c26:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9c28:	6818      	ldr	r0, [r3, #0]
    9c2a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c2c:	43a8      	bics	r0, r5
    9c2e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9c30:	6818      	ldr	r0, [r3, #0]
    9c32:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c34:	4328      	orrs	r0, r5
    9c36:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    9c38:	6810      	ldr	r0, [r2, #0]
    9c3a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9c3c:	43a8      	bics	r0, r5
    9c3e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9c40:	6818      	ldr	r0, [r3, #0]
    9c42:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c44:	43a8      	bics	r0, r5
    9c46:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9c48:	6818      	ldr	r0, [r3, #0]
    9c4a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c4c:	4328      	orrs	r0, r5
    9c4e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    9c50:	6810      	ldr	r0, [r2, #0]
    9c52:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9c54:	4328      	orrs	r0, r5
    9c56:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9c58:	6818      	ldr	r0, [r3, #0]
    9c5a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c5c:	43a8      	bics	r0, r5
    9c5e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9c60:	6818      	ldr	r0, [r3, #0]
    9c62:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c64:	4328      	orrs	r0, r5
    9c66:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    9c68:	6810      	ldr	r0, [r2, #0]
    9c6a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9c6c:	43a8      	bics	r0, r5
    9c6e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9c70:	6818      	ldr	r0, [r3, #0]
    9c72:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c74:	43a8      	bics	r0, r5
    9c76:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9c78:	6818      	ldr	r0, [r3, #0]
    9c7a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c7c:	4328      	orrs	r0, r5
    9c7e:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    9c80:	6810      	ldr	r0, [r2, #0]
    9c82:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9c84:	43a8      	bics	r0, r5
    9c86:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9c88:	6818      	ldr	r0, [r3, #0]
    9c8a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c8c:	43a8      	bics	r0, r5
    9c8e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9c90:	6818      	ldr	r0, [r3, #0]
    9c92:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9c94:	4328      	orrs	r0, r5
    9c96:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    9c98:	6810      	ldr	r0, [r2, #0]
    9c9a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9c9c:	43a8      	bics	r0, r5
    9c9e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9ca0:	6818      	ldr	r0, [r3, #0]
    9ca2:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9ca4:	43a8      	bics	r0, r5
    9ca6:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9ca8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9caa:	6818      	ldr	r0, [r3, #0]
    9cac:	4328      	orrs	r0, r5
    9cae:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    9cb0:	6810      	ldr	r0, [r2, #0]
    9cb2:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9cb4:	4328      	orrs	r0, r5
    9cb6:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9cb8:	681a      	ldr	r2, [r3, #0]
    9cba:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9cbc:	4382      	bics	r2, r0
    9cbe:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    9cc0:	681a      	ldr	r2, [r3, #0]
    9cc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9cc4:	4302      	orrs	r2, r0
    9cc6:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    9cc8:	680b      	ldr	r3, [r1, #0]
    9cca:	6e22      	ldr	r2, [r4, #96]	; 0x60
    delay(120);
    9ccc:	2078      	movs	r0, #120	; 0x78
    SPI_DC_HIGH();
    9cce:	4313      	orrs	r3, r2
    9cd0:	600b      	str	r3, [r1, #0]
    delay(120);
    9cd2:	f7f8 ff01 	bl	2ad8 <delay>
    SPI_DC_LOW();
    9cd6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9cd8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    9cda:	680b      	ldr	r3, [r1, #0]
    9cdc:	4393      	bics	r3, r2
    9cde:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    9ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9ce2:	2b00      	cmp	r3, #0
    9ce4:	da00      	bge.n	9ce8 <_ZN16Adafruit_ILI93415beginEm+0x440c>
    9ce6:	e1af      	b.n	a048 <_ZN16Adafruit_ILI93415beginEm+0x476c>
    9ce8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    9cea:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9cec:	6810      	ldr	r0, [r2, #0]
    9cee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9cf0:	43a8      	bics	r0, r5
    9cf2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9cf4:	6818      	ldr	r0, [r3, #0]
    9cf6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9cf8:	43a8      	bics	r0, r5
    9cfa:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9cfc:	6818      	ldr	r0, [r3, #0]
    9cfe:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d00:	4328      	orrs	r0, r5
    9d02:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    9d04:	6810      	ldr	r0, [r2, #0]
    9d06:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9d08:	43a8      	bics	r0, r5
    9d0a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9d0c:	6818      	ldr	r0, [r3, #0]
    9d0e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d10:	43a8      	bics	r0, r5
    9d12:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9d14:	6818      	ldr	r0, [r3, #0]
    9d16:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d18:	4328      	orrs	r0, r5
    9d1a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    9d1c:	6810      	ldr	r0, [r2, #0]
    9d1e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9d20:	4328      	orrs	r0, r5
    9d22:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9d24:	6818      	ldr	r0, [r3, #0]
    9d26:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d28:	43a8      	bics	r0, r5
    9d2a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9d2c:	6818      	ldr	r0, [r3, #0]
    9d2e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d30:	4328      	orrs	r0, r5
    9d32:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    9d34:	6810      	ldr	r0, [r2, #0]
    9d36:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9d38:	43a8      	bics	r0, r5
    9d3a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9d3c:	6818      	ldr	r0, [r3, #0]
    9d3e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d40:	43a8      	bics	r0, r5
    9d42:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9d44:	6818      	ldr	r0, [r3, #0]
    9d46:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d48:	4328      	orrs	r0, r5
    9d4a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    9d4c:	6810      	ldr	r0, [r2, #0]
    9d4e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9d50:	4328      	orrs	r0, r5
    9d52:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9d54:	6818      	ldr	r0, [r3, #0]
    9d56:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d58:	43a8      	bics	r0, r5
    9d5a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9d5c:	6818      	ldr	r0, [r3, #0]
    9d5e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d60:	4328      	orrs	r0, r5
    9d62:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    9d64:	6810      	ldr	r0, [r2, #0]
    9d66:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9d68:	43a8      	bics	r0, r5
    9d6a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9d6c:	6818      	ldr	r0, [r3, #0]
    9d6e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d70:	43a8      	bics	r0, r5
    9d72:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9d74:	6818      	ldr	r0, [r3, #0]
    9d76:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d78:	4328      	orrs	r0, r5
    9d7a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    9d7c:	6810      	ldr	r0, [r2, #0]
    9d7e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9d80:	43a8      	bics	r0, r5
    9d82:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9d84:	6818      	ldr	r0, [r3, #0]
    9d86:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d88:	43a8      	bics	r0, r5
    9d8a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    9d8c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    9d8e:	6818      	ldr	r0, [r3, #0]
    9d90:	4328      	orrs	r0, r5
    9d92:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    9d94:	6810      	ldr	r0, [r2, #0]
    9d96:	6d25      	ldr	r5, [r4, #80]	; 0x50
    9d98:	4328      	orrs	r0, r5
    9d9a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    9d9c:	681a      	ldr	r2, [r3, #0]
    9d9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9da0:	4382      	bics	r2, r0
    9da2:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    9da4:	681a      	ldr	r2, [r3, #0]
    9da6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9da8:	4302      	orrs	r2, r0
    9daa:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    9dac:	6e22      	ldr	r2, [r4, #96]	; 0x60
    9dae:	680b      	ldr	r3, [r1, #0]
    delay(120);
    9db0:	2078      	movs	r0, #120	; 0x78
    SPI_DC_HIGH();
    9db2:	4313      	orrs	r3, r2
    9db4:	600b      	str	r3, [r1, #0]
    delay(120);
    9db6:	f7f8 fe8f 	bl	2ad8 <delay>
    endWrite();
    9dba:	6823      	ldr	r3, [r4, #0]
    9dbc:	4aec      	ldr	r2, [pc, #944]	; (a170 <_ZN16Adafruit_ILI93415beginEm+0x4894>)
    9dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9dc0:	4293      	cmp	r3, r2
    9dc2:	d110      	bne.n	9de6 <_ZN16Adafruit_ILI93415beginEm+0x450a>
    SPI_CS_HIGH();
    9dc4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    9dc6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    9dc8:	6813      	ldr	r3, [r2, #0]
    9dca:	430b      	orrs	r3, r1
    9dcc:	6013      	str	r3, [r2, #0]
    SPI_END_TRANSACTION();
    9dce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9dd0:	2b00      	cmp	r3, #0
    9dd2:	db1b      	blt.n	9e0c <_ZN16Adafruit_ILI93415beginEm+0x4530>
    _width  = ILI9341_TFTWIDTH;
    9dd4:	4be7      	ldr	r3, [pc, #924]	; (a174 <_ZN16Adafruit_ILI93415beginEm+0x4898>)
    9dd6:	60e3      	str	r3, [r4, #12]
}
    9dd8:	b003      	add	sp, #12
    9dda:	bd30      	pop	{r4, r5, pc}
    SPI_BEGIN();
    9ddc:	48e6      	ldr	r0, [pc, #920]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9dde:	f004 fd3d 	bl	e85c <_ZN8SPIClass5beginEv>
    9de2:	f7fb fdb2 	bl	594a <_ZN16Adafruit_ILI93415beginEm+0x6e>
    endWrite();
    9de6:	0020      	movs	r0, r4
    9de8:	4798      	blx	r3
    9dea:	e7f3      	b.n	9dd4 <_ZN16Adafruit_ILI93415beginEm+0x44f8>
    startWrite();
    9dec:	0020      	movs	r0, r4
    9dee:	4798      	blx	r3
    9df0:	f7fb fddd 	bl	59ae <_ZN16Adafruit_ILI93415beginEm+0xd2>
    SPI_WRITE16(0);                 // Zero
    9df4:	4de0      	ldr	r5, [pc, #896]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9df6:	2100      	movs	r1, #0
    9df8:	0028      	movs	r0, r5
    9dfa:	f004 fdb5 	bl	e968 <_ZN8SPIClass8transferEh>
    9dfe:	2100      	movs	r1, #0
    9e00:	0028      	movs	r0, r5
    9e02:	f004 fdb1 	bl	e968 <_ZN8SPIClass8transferEh>
    9e06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9e08:	f7fd fd78 	bl	78fc <_ZN16Adafruit_ILI93415beginEm+0x2020>
    SPI_END_TRANSACTION();
    9e0c:	48da      	ldr	r0, [pc, #872]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e0e:	f004 fd99 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    9e12:	e7df      	b.n	9dd4 <_ZN16Adafruit_ILI93415beginEm+0x44f8>
    SPI_BEGIN_TRANSACTION();
    9e14:	6a21      	ldr	r1, [r4, #32]
    9e16:	2302      	movs	r3, #2
    9e18:	2201      	movs	r2, #1
    9e1a:	4668      	mov	r0, sp
    9e1c:	f7fb f8da 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    9e20:	9900      	ldr	r1, [sp, #0]
    9e22:	9a01      	ldr	r2, [sp, #4]
    9e24:	48d4      	ldr	r0, [pc, #848]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e26:	f004 fd5d 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    9e2a:	f7fb fdbb 	bl	59a4 <_ZN16Adafruit_ILI93415beginEm+0xc8>
        HSPI_WRITE(b);
    9e2e:	2148      	movs	r1, #72	; 0x48
    9e30:	48d1      	ldr	r0, [pc, #836]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e32:	f004 fd99 	bl	e968 <_ZN8SPIClass8transferEh>
    9e36:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9e38:	f7fd fc25 	bl	7686 <_ZN16Adafruit_ILI93415beginEm+0x1daa>
    9e3c:	2137      	movs	r1, #55	; 0x37
    9e3e:	48ce      	ldr	r0, [pc, #824]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e40:	f004 fd92 	bl	e968 <_ZN8SPIClass8transferEh>
    9e44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9e46:	f7fd fc89 	bl	775c <_ZN16Adafruit_ILI93415beginEm+0x1e80>
    9e4a:	2101      	movs	r1, #1
    9e4c:	48ca      	ldr	r0, [pc, #808]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e4e:	f004 fd8b 	bl	e968 <_ZN8SPIClass8transferEh>
    9e52:	f7fe fa4d 	bl	82f0 <_ZN16Adafruit_ILI93415beginEm+0x2a14>
    9e56:	210f      	movs	r1, #15
    9e58:	48c7      	ldr	r0, [pc, #796]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e5a:	f004 fd85 	bl	e968 <_ZN8SPIClass8transferEh>
    9e5e:	f7fe fab2 	bl	83c6 <_ZN16Adafruit_ILI93415beginEm+0x2aea>
    9e62:	2131      	movs	r1, #49	; 0x31
    9e64:	48c4      	ldr	r0, [pc, #784]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e66:	f004 fd7f 	bl	e968 <_ZN8SPIClass8transferEh>
    9e6a:	f7fe fb13 	bl	8494 <_ZN16Adafruit_ILI93415beginEm+0x2bb8>
    9e6e:	212b      	movs	r1, #43	; 0x2b
    9e70:	48c1      	ldr	r0, [pc, #772]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e72:	f004 fd79 	bl	e968 <_ZN8SPIClass8transferEh>
    9e76:	f7fe fb74 	bl	8562 <_ZN16Adafruit_ILI93415beginEm+0x2c86>
    9e7a:	210c      	movs	r1, #12
    9e7c:	48be      	ldr	r0, [pc, #760]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e7e:	f004 fd73 	bl	e968 <_ZN8SPIClass8transferEh>
    9e82:	f7fe fbd5 	bl	8630 <_ZN16Adafruit_ILI93415beginEm+0x2d54>
    9e86:	210e      	movs	r1, #14
    9e88:	48bb      	ldr	r0, [pc, #748]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e8a:	f004 fd6d 	bl	e968 <_ZN8SPIClass8transferEh>
    9e8e:	f7fe fc36 	bl	86fe <_ZN16Adafruit_ILI93415beginEm+0x2e22>
    9e92:	2108      	movs	r1, #8
    9e94:	48b8      	ldr	r0, [pc, #736]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9e96:	f004 fd67 	bl	e968 <_ZN8SPIClass8transferEh>
    9e9a:	f7fe fc97 	bl	87cc <_ZN16Adafruit_ILI93415beginEm+0x2ef0>
    9e9e:	214e      	movs	r1, #78	; 0x4e
    9ea0:	48b5      	ldr	r0, [pc, #724]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9ea2:	f004 fd61 	bl	e968 <_ZN8SPIClass8transferEh>
    9ea6:	f7fe fcf8 	bl	889a <_ZN16Adafruit_ILI93415beginEm+0x2fbe>
    9eaa:	21f1      	movs	r1, #241	; 0xf1
    9eac:	48b2      	ldr	r0, [pc, #712]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9eae:	f004 fd5b 	bl	e968 <_ZN8SPIClass8transferEh>
    9eb2:	f7fe fd59 	bl	8968 <_ZN16Adafruit_ILI93415beginEm+0x308c>
    9eb6:	2137      	movs	r1, #55	; 0x37
    9eb8:	48af      	ldr	r0, [pc, #700]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9eba:	f004 fd55 	bl	e968 <_ZN8SPIClass8transferEh>
    9ebe:	f7fe fdba 	bl	8a36 <_ZN16Adafruit_ILI93415beginEm+0x315a>
    9ec2:	2107      	movs	r1, #7
    9ec4:	48ac      	ldr	r0, [pc, #688]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9ec6:	f004 fd4f 	bl	e968 <_ZN8SPIClass8transferEh>
    9eca:	f7fe fe1b 	bl	8b04 <_ZN16Adafruit_ILI93415beginEm+0x3228>
    9ece:	2110      	movs	r1, #16
    9ed0:	48a9      	ldr	r0, [pc, #676]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9ed2:	f004 fd49 	bl	e968 <_ZN8SPIClass8transferEh>
    9ed6:	f7fe fe7c 	bl	8bd2 <_ZN16Adafruit_ILI93415beginEm+0x32f6>
    9eda:	2103      	movs	r1, #3
    9edc:	48a6      	ldr	r0, [pc, #664]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9ede:	f004 fd43 	bl	e968 <_ZN8SPIClass8transferEh>
    9ee2:	f7fe fedd 	bl	8ca0 <_ZN16Adafruit_ILI93415beginEm+0x33c4>
    9ee6:	213a      	movs	r1, #58	; 0x3a
    9ee8:	48a3      	ldr	r0, [pc, #652]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9eea:	f004 fd3d 	bl	e968 <_ZN8SPIClass8transferEh>
    9eee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9ef0:	f7fd fd6f 	bl	79d2 <_ZN16Adafruit_ILI93415beginEm+0x20f6>
    9ef4:	2155      	movs	r1, #85	; 0x55
    9ef6:	48a0      	ldr	r0, [pc, #640]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9ef8:	f004 fd36 	bl	e968 <_ZN8SPIClass8transferEh>
    9efc:	f7fd fdd4 	bl	7aa8 <_ZN16Adafruit_ILI93415beginEm+0x21cc>
    9f00:	2100      	movs	r1, #0
    9f02:	489d      	ldr	r0, [pc, #628]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f04:	f004 fd30 	bl	e968 <_ZN8SPIClass8transferEh>
    9f08:	f7fd fe39 	bl	7b7e <_ZN16Adafruit_ILI93415beginEm+0x22a2>
    9f0c:	21f2      	movs	r1, #242	; 0xf2
    9f0e:	489a      	ldr	r0, [pc, #616]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f10:	f004 fd2a 	bl	e968 <_ZN8SPIClass8transferEh>
    9f14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9f16:	f7fe f8aa 	bl	806e <_ZN16Adafruit_ILI93415beginEm+0x2792>
    9f1a:	2100      	movs	r1, #0
    9f1c:	4896      	ldr	r0, [pc, #600]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f1e:	f004 fd23 	bl	e968 <_ZN8SPIClass8transferEh>
    9f22:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9f24:	f7fe f90e 	bl	8144 <_ZN16Adafruit_ILI93415beginEm+0x2868>
    9f28:	2126      	movs	r1, #38	; 0x26
    9f2a:	4893      	ldr	r0, [pc, #588]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f2c:	f004 fd1c 	bl	e968 <_ZN8SPIClass8transferEh>
    9f30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9f32:	f7fe f972 	bl	821a <_ZN16Adafruit_ILI93415beginEm+0x293e>
    9f36:	2148      	movs	r1, #72	; 0x48
    9f38:	488f      	ldr	r0, [pc, #572]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f3a:	f004 fd15 	bl	e968 <_ZN8SPIClass8transferEh>
    9f3e:	f7ff fbf3 	bl	9728 <_ZN16Adafruit_ILI93415beginEm+0x3e4c>
    9f42:	2108      	movs	r1, #8
    9f44:	488c      	ldr	r0, [pc, #560]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f46:	f004 fd0f 	bl	e968 <_ZN8SPIClass8transferEh>
    9f4a:	e454      	b.n	97f6 <_ZN16Adafruit_ILI93415beginEm+0x3f1a>
    9f4c:	210f      	movs	r1, #15
    9f4e:	488a      	ldr	r0, [pc, #552]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f50:	f004 fd0a 	bl	e968 <_ZN8SPIClass8transferEh>
    9f54:	e4b5      	b.n	98c2 <_ZN16Adafruit_ILI93415beginEm+0x3fe6>
    9f56:	210c      	movs	r1, #12
    9f58:	4887      	ldr	r0, [pc, #540]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f5a:	f004 fd05 	bl	e968 <_ZN8SPIClass8transferEh>
    9f5e:	e516      	b.n	998e <_ZN16Adafruit_ILI93415beginEm+0x40b2>
    9f60:	2100      	movs	r1, #0
    9f62:	4885      	ldr	r0, [pc, #532]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f64:	f004 fd00 	bl	e968 <_ZN8SPIClass8transferEh>
    9f68:	f7ff f8a6 	bl	90b8 <_ZN16Adafruit_ILI93415beginEm+0x37dc>
    9f6c:	210e      	movs	r1, #14
    9f6e:	4882      	ldr	r0, [pc, #520]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f70:	f004 fcfa 	bl	e968 <_ZN8SPIClass8transferEh>
    9f74:	f7ff f907 	bl	9186 <_ZN16Adafruit_ILI93415beginEm+0x38aa>
    9f78:	2114      	movs	r1, #20
    9f7a:	487f      	ldr	r0, [pc, #508]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f7c:	f004 fcf4 	bl	e968 <_ZN8SPIClass8transferEh>
    9f80:	f7ff f968 	bl	9254 <_ZN16Adafruit_ILI93415beginEm+0x3978>
    9f84:	2103      	movs	r1, #3
    9f86:	487c      	ldr	r0, [pc, #496]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f88:	f004 fcee 	bl	e968 <_ZN8SPIClass8transferEh>
    9f8c:	f7ff f9c9 	bl	9322 <_ZN16Adafruit_ILI93415beginEm+0x3a46>
    9f90:	2111      	movs	r1, #17
    9f92:	4879      	ldr	r0, [pc, #484]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9f94:	f004 fce8 	bl	e968 <_ZN8SPIClass8transferEh>
    9f98:	f7ff fa2a 	bl	93f0 <_ZN16Adafruit_ILI93415beginEm+0x3b14>
    9f9c:	2107      	movs	r1, #7
    9f9e:	4876      	ldr	r0, [pc, #472]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9fa0:	f004 fce2 	bl	e968 <_ZN8SPIClass8transferEh>
    9fa4:	f7ff fa8b 	bl	94be <_ZN16Adafruit_ILI93415beginEm+0x3be2>
    9fa8:	2131      	movs	r1, #49	; 0x31
    9faa:	4873      	ldr	r0, [pc, #460]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9fac:	f004 fcdc 	bl	e968 <_ZN8SPIClass8transferEh>
    9fb0:	f7ff faec 	bl	958c <_ZN16Adafruit_ILI93415beginEm+0x3cb0>
    9fb4:	21c1      	movs	r1, #193	; 0xc1
    9fb6:	4870      	ldr	r0, [pc, #448]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9fb8:	f004 fcd6 	bl	e968 <_ZN8SPIClass8transferEh>
    9fbc:	f7ff fb4d 	bl	965a <_ZN16Adafruit_ILI93415beginEm+0x3d7e>
    9fc0:	2164      	movs	r1, #100	; 0x64
    9fc2:	486d      	ldr	r0, [pc, #436]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9fc4:	f004 fcd0 	bl	e968 <_ZN8SPIClass8transferEh>
    9fc8:	f7fc f912 	bl	61f0 <_ZN16Adafruit_ILI93415beginEm+0x914>
    9fcc:	2103      	movs	r1, #3
    9fce:	486a      	ldr	r0, [pc, #424]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9fd0:	f004 fcca 	bl	e968 <_ZN8SPIClass8transferEh>
    9fd4:	f7fc f973 	bl	62be <_ZN16Adafruit_ILI93415beginEm+0x9e2>
    9fd8:	2112      	movs	r1, #18
    9fda:	4867      	ldr	r0, [pc, #412]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9fdc:	f004 fcc4 	bl	e968 <_ZN8SPIClass8transferEh>
    9fe0:	f7fc f9d4 	bl	638c <_ZN16Adafruit_ILI93415beginEm+0xab0>
    9fe4:	2181      	movs	r1, #129	; 0x81
    9fe6:	4864      	ldr	r0, [pc, #400]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9fe8:	f004 fcbe 	bl	e968 <_ZN8SPIClass8transferEh>
    9fec:	f7fc fa35 	bl	645a <_ZN16Adafruit_ILI93415beginEm+0xb7e>
    9ff0:	2185      	movs	r1, #133	; 0x85
    9ff2:	4861      	ldr	r0, [pc, #388]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    9ff4:	f004 fcb8 	bl	e968 <_ZN8SPIClass8transferEh>
    9ff8:	f7fc fa9a 	bl	6530 <_ZN16Adafruit_ILI93415beginEm+0xc54>
    9ffc:	2180      	movs	r1, #128	; 0x80
    9ffe:	485e      	ldr	r0, [pc, #376]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a000:	f004 fcb2 	bl	e968 <_ZN8SPIClass8transferEh>
    a004:	f7fb fe11 	bl	5c2a <_ZN16Adafruit_ILI93415beginEm+0x34e>
    a008:	2102      	movs	r1, #2
    a00a:	485b      	ldr	r0, [pc, #364]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a00c:	f004 fcac 	bl	e968 <_ZN8SPIClass8transferEh>
    a010:	f7fb fe72 	bl	5cf8 <_ZN16Adafruit_ILI93415beginEm+0x41c>
    a014:	21cf      	movs	r1, #207	; 0xcf
    a016:	4858      	ldr	r0, [pc, #352]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a018:	f004 fca6 	bl	e968 <_ZN8SPIClass8transferEh>
    a01c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a01e:	f7fb fed7 	bl	5dd0 <_ZN16Adafruit_ILI93415beginEm+0x4f4>
    a022:	2100      	movs	r1, #0
    a024:	4854      	ldr	r0, [pc, #336]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a026:	f004 fc9f 	bl	e968 <_ZN8SPIClass8transferEh>
    a02a:	f7fb ff3c 	bl	5ea6 <_ZN16Adafruit_ILI93415beginEm+0x5ca>
    a02e:	21ef      	movs	r1, #239	; 0xef
    a030:	4851      	ldr	r0, [pc, #324]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a032:	f004 fc99 	bl	e968 <_ZN8SPIClass8transferEh>
    a036:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a038:	f7fb fd25 	bl	5a86 <_ZN16Adafruit_ILI93415beginEm+0x1aa>
    a03c:	2103      	movs	r1, #3
    a03e:	484e      	ldr	r0, [pc, #312]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a040:	f004 fc92 	bl	e968 <_ZN8SPIClass8transferEh>
    a044:	f7fb fd8a 	bl	5b5c <_ZN16Adafruit_ILI93415beginEm+0x280>
    a048:	2129      	movs	r1, #41	; 0x29
    a04a:	484b      	ldr	r0, [pc, #300]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a04c:	f004 fc8c 	bl	e968 <_ZN8SPIClass8transferEh>
    a050:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a052:	e6ab      	b.n	9dac <_ZN16Adafruit_ILI93415beginEm+0x44d0>
    a054:	210e      	movs	r1, #14
    a056:	4848      	ldr	r0, [pc, #288]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a058:	f004 fc86 	bl	e968 <_ZN8SPIClass8transferEh>
    a05c:	f7fe fe87 	bl	8d6e <_ZN16Adafruit_ILI93415beginEm+0x3492>
    a060:	2109      	movs	r1, #9
    a062:	4845      	ldr	r0, [pc, #276]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a064:	f004 fc80 	bl	e968 <_ZN8SPIClass8transferEh>
    a068:	f7fe fee8 	bl	8e3c <_ZN16Adafruit_ILI93415beginEm+0x3560>
    a06c:	2100      	movs	r1, #0
    a06e:	4842      	ldr	r0, [pc, #264]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a070:	f004 fc7a 	bl	e968 <_ZN8SPIClass8transferEh>
    a074:	f7fe ff49 	bl	8f0a <_ZN16Adafruit_ILI93415beginEm+0x362e>
    a078:	21e1      	movs	r1, #225	; 0xe1
    a07a:	483f      	ldr	r0, [pc, #252]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a07c:	f004 fc74 	bl	e968 <_ZN8SPIClass8transferEh>
    a080:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a082:	f7fe ffae 	bl	8fe2 <_ZN16Adafruit_ILI93415beginEm+0x3706>
    a086:	2118      	movs	r1, #24
    a088:	483b      	ldr	r0, [pc, #236]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a08a:	f004 fc6d 	bl	e968 <_ZN8SPIClass8transferEh>
    a08e:	f7fd fddd 	bl	7c4c <_ZN16Adafruit_ILI93415beginEm+0x2370>
    a092:	21b6      	movs	r1, #182	; 0xb6
    a094:	4838      	ldr	r0, [pc, #224]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a096:	f004 fc67 	bl	e968 <_ZN8SPIClass8transferEh>
    a09a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a09c:	f7fd fe42 	bl	7d24 <_ZN16Adafruit_ILI93415beginEm+0x2448>
    a0a0:	2108      	movs	r1, #8
    a0a2:	4835      	ldr	r0, [pc, #212]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a0a4:	f004 fc60 	bl	e968 <_ZN8SPIClass8transferEh>
    a0a8:	f7fd fea7 	bl	7dfa <_ZN16Adafruit_ILI93415beginEm+0x251e>
    a0ac:	2182      	movs	r1, #130	; 0x82
    a0ae:	4832      	ldr	r0, [pc, #200]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a0b0:	f004 fc5a 	bl	e968 <_ZN8SPIClass8transferEh>
    a0b4:	f7fd ff08 	bl	7ec8 <_ZN16Adafruit_ILI93415beginEm+0x25ec>
    a0b8:	2127      	movs	r1, #39	; 0x27
    a0ba:	482f      	ldr	r0, [pc, #188]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a0bc:	f004 fc54 	bl	e968 <_ZN8SPIClass8transferEh>
    a0c0:	f7fd ff69 	bl	7f96 <_ZN16Adafruit_ILI93415beginEm+0x26ba>
    a0c4:	2128      	movs	r1, #40	; 0x28
    a0c6:	482c      	ldr	r0, [pc, #176]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a0c8:	f004 fc4e 	bl	e968 <_ZN8SPIClass8transferEh>
    a0cc:	f7fd f92e 	bl	732c <_ZN16Adafruit_ILI93415beginEm+0x1a50>
    a0d0:	21c7      	movs	r1, #199	; 0xc7
    a0d2:	4829      	ldr	r0, [pc, #164]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a0d4:	f004 fc48 	bl	e968 <_ZN8SPIClass8transferEh>
    a0d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a0da:	f7fd f993 	bl	7404 <_ZN16Adafruit_ILI93415beginEm+0x1b28>
    a0de:	2186      	movs	r1, #134	; 0x86
    a0e0:	4825      	ldr	r0, [pc, #148]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a0e2:	f004 fc41 	bl	e968 <_ZN8SPIClass8transferEh>
    a0e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a0e8:	f7fd f9f7 	bl	74da <_ZN16Adafruit_ILI93415beginEm+0x1bfe>
    a0ec:	2136      	movs	r1, #54	; 0x36
    a0ee:	4822      	ldr	r0, [pc, #136]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a0f0:	f004 fc3a 	bl	e968 <_ZN8SPIClass8transferEh>
    a0f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a0f6:	f7fd fa5b 	bl	75b0 <_ZN16Adafruit_ILI93415beginEm+0x1cd4>
    a0fa:	2131      	movs	r1, #49	; 0x31
    a0fc:	481e      	ldr	r0, [pc, #120]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a0fe:	f004 fc33 	bl	e968 <_ZN8SPIClass8transferEh>
    a102:	e4aa      	b.n	9a5a <_ZN16Adafruit_ILI93415beginEm+0x417e>
    a104:	2136      	movs	r1, #54	; 0x36
    a106:	481c      	ldr	r0, [pc, #112]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a108:	f004 fc2e 	bl	e968 <_ZN8SPIClass8transferEh>
    a10c:	e50b      	b.n	9b26 <_ZN16Adafruit_ILI93415beginEm+0x424a>
    a10e:	210f      	movs	r1, #15
    a110:	4819      	ldr	r0, [pc, #100]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a112:	f004 fc29 	bl	e968 <_ZN8SPIClass8transferEh>
    a116:	e56c      	b.n	9bf2 <_ZN16Adafruit_ILI93415beginEm+0x4316>
    a118:	2111      	movs	r1, #17
    a11a:	4817      	ldr	r0, [pc, #92]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a11c:	f004 fc24 	bl	e968 <_ZN8SPIClass8transferEh>
    a120:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a122:	e5d1      	b.n	9cc8 <_ZN16Adafruit_ILI93415beginEm+0x43ec>
    a124:	2100      	movs	r1, #0
    a126:	4814      	ldr	r0, [pc, #80]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a128:	f004 fc1e 	bl	e968 <_ZN8SPIClass8transferEh>
    a12c:	f7fc fa67 	bl	65fe <_ZN16Adafruit_ILI93415beginEm+0xd22>
    a130:	2178      	movs	r1, #120	; 0x78
    a132:	4811      	ldr	r0, [pc, #68]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a134:	f004 fc18 	bl	e968 <_ZN8SPIClass8transferEh>
    a138:	f7fc fac8 	bl	66cc <_ZN16Adafruit_ILI93415beginEm+0xdf0>
    a13c:	21cb      	movs	r1, #203	; 0xcb
    a13e:	480e      	ldr	r0, [pc, #56]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a140:	f004 fc12 	bl	e968 <_ZN8SPIClass8transferEh>
    a144:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a146:	f7fc fb2d 	bl	67a4 <_ZN16Adafruit_ILI93415beginEm+0xec8>
    a14a:	2139      	movs	r1, #57	; 0x39
    a14c:	480a      	ldr	r0, [pc, #40]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a14e:	f004 fc0b 	bl	e968 <_ZN8SPIClass8transferEh>
    a152:	f7fc fb92 	bl	687a <_ZN16Adafruit_ILI93415beginEm+0xf9e>
    a156:	212c      	movs	r1, #44	; 0x2c
    a158:	4807      	ldr	r0, [pc, #28]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a15a:	f004 fc05 	bl	e968 <_ZN8SPIClass8transferEh>
    a15e:	f7fc fbf3 	bl	6948 <_ZN16Adafruit_ILI93415beginEm+0x106c>
    a162:	2100      	movs	r1, #0
    a164:	4804      	ldr	r0, [pc, #16]	; (a178 <_ZN16Adafruit_ILI93415beginEm+0x489c>)
    a166:	f004 fbff 	bl	e968 <_ZN8SPIClass8transferEh>
    a16a:	f7fc fc54 	bl	6a16 <_ZN16Adafruit_ILI93415beginEm+0x113a>
    a16e:	46c0      	nop			; (mov r8, r8)
    a170:	00004fb5 	.word	0x00004fb5
    a174:	014000f0 	.word	0x014000f0
    a178:	20000a0c 	.word	0x20000a0c
    a17c:	2134      	movs	r1, #52	; 0x34
    a17e:	482b      	ldr	r0, [pc, #172]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a180:	f004 fbf2 	bl	e968 <_ZN8SPIClass8transferEh>
    a184:	f7fc fcae 	bl	6ae4 <_ZN16Adafruit_ILI93415beginEm+0x1208>
    a188:	2102      	movs	r1, #2
    a18a:	4828      	ldr	r0, [pc, #160]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a18c:	f004 fbec 	bl	e968 <_ZN8SPIClass8transferEh>
    a190:	f7fc fd0f 	bl	6bb2 <_ZN16Adafruit_ILI93415beginEm+0x12d6>
    a194:	21f7      	movs	r1, #247	; 0xf7
    a196:	4825      	ldr	r0, [pc, #148]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a198:	f004 fbe6 	bl	e968 <_ZN8SPIClass8transferEh>
    a19c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a19e:	f7fc fd74 	bl	6c8a <_ZN16Adafruit_ILI93415beginEm+0x13ae>
    a1a2:	2120      	movs	r1, #32
    a1a4:	4821      	ldr	r0, [pc, #132]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a1a6:	f004 fbdf 	bl	e968 <_ZN8SPIClass8transferEh>
    a1aa:	f7fc fdd9 	bl	6d60 <_ZN16Adafruit_ILI93415beginEm+0x1484>
    a1ae:	2100      	movs	r1, #0
    a1b0:	481e      	ldr	r0, [pc, #120]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a1b2:	f004 fbd9 	bl	e968 <_ZN8SPIClass8transferEh>
    a1b6:	f7fc fe3e 	bl	6e36 <_ZN16Adafruit_ILI93415beginEm+0x155a>
    a1ba:	2100      	movs	r1, #0
    a1bc:	481b      	ldr	r0, [pc, #108]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a1be:	f004 fbd3 	bl	e968 <_ZN8SPIClass8transferEh>
    a1c2:	f7fc fe9f 	bl	6f04 <_ZN16Adafruit_ILI93415beginEm+0x1628>
    a1c6:	2123      	movs	r1, #35	; 0x23
    a1c8:	4818      	ldr	r0, [pc, #96]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a1ca:	f004 fbcd 	bl	e968 <_ZN8SPIClass8transferEh>
    a1ce:	f7fc ff04 	bl	6fda <_ZN16Adafruit_ILI93415beginEm+0x16fe>
    a1d2:	2110      	movs	r1, #16
    a1d4:	4815      	ldr	r0, [pc, #84]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a1d6:	f004 fbc7 	bl	e968 <_ZN8SPIClass8transferEh>
    a1da:	f7fc ff69 	bl	70b0 <_ZN16Adafruit_ILI93415beginEm+0x17d4>
    a1de:	21c5      	movs	r1, #197	; 0xc5
    a1e0:	4812      	ldr	r0, [pc, #72]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a1e2:	f004 fbc1 	bl	e968 <_ZN8SPIClass8transferEh>
    a1e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a1e8:	f7fc ffce 	bl	7188 <_ZN16Adafruit_ILI93415beginEm+0x18ac>
    a1ec:	213e      	movs	r1, #62	; 0x3e
    a1ee:	480f      	ldr	r0, [pc, #60]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a1f0:	f004 fbba 	bl	e968 <_ZN8SPIClass8transferEh>
    a1f4:	f7fd f833 	bl	725e <_ZN16Adafruit_ILI93415beginEm+0x1982>
    a1f8:	21c1      	movs	r1, #193	; 0xc1
    a1fa:	480c      	ldr	r0, [pc, #48]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a1fc:	f004 fbb4 	bl	e968 <_ZN8SPIClass8transferEh>
    a200:	f7fb feb8 	bl	5f74 <_ZN16Adafruit_ILI93415beginEm+0x698>
    a204:	2130      	movs	r1, #48	; 0x30
    a206:	4809      	ldr	r0, [pc, #36]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a208:	f004 fbae 	bl	e968 <_ZN8SPIClass8transferEh>
    a20c:	f7fb ff19 	bl	6042 <_ZN16Adafruit_ILI93415beginEm+0x766>
    a210:	21ed      	movs	r1, #237	; 0xed
    a212:	4806      	ldr	r0, [pc, #24]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a214:	f004 fba8 	bl	e968 <_ZN8SPIClass8transferEh>
    a218:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a21a:	f7fb ff7e 	bl	611a <_ZN16Adafruit_ILI93415beginEm+0x83e>
    a21e:	2100      	movs	r1, #0
    a220:	4802      	ldr	r0, [pc, #8]	; (a22c <_ZN16Adafruit_ILI93415beginEm+0x4950>)
    a222:	f004 fba1 	bl	e968 <_ZN8SPIClass8transferEh>
    a226:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a228:	f7fd fb68 	bl	78fc <_ZN16Adafruit_ILI93415beginEm+0x2020>
    a22c:	20000a0c 	.word	0x20000a0c

0000a230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>:
void Adafruit_ILI9341::setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
    a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a232:	001e      	movs	r6, r3
    a234:	ab06      	add	r3, sp, #24
    a236:	881d      	ldrh	r5, [r3, #0]
    uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
    a238:	198e      	adds	r6, r1, r6
    a23a:	3e01      	subs	r6, #1
    a23c:	0409      	lsls	r1, r1, #16
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
    a23e:	1955      	adds	r5, r2, r5
    uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
    a240:	430e      	orrs	r6, r1
    SPI_DC_LOW();
    a242:	6c81      	ldr	r1, [r0, #72]	; 0x48
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
    a244:	0412      	lsls	r2, r2, #16
    a246:	3d01      	subs	r5, #1
    SPI_DC_LOW();
    a248:	680b      	ldr	r3, [r1, #0]
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
    a24a:	4315      	orrs	r5, r2
    SPI_DC_LOW();
    a24c:	6e02      	ldr	r2, [r0, #96]	; 0x60
void Adafruit_ILI9341::setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
    a24e:	0004      	movs	r4, r0
    SPI_DC_LOW();
    a250:	4393      	bics	r3, r2
    a252:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    a254:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a256:	2b00      	cmp	r3, #0
    a258:	da01      	bge.n	a25e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x2e>
    a25a:	f000 fef3 	bl	b044 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe14>
    a25e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    a260:	6c43      	ldr	r3, [r0, #68]	; 0x44
            SSPI_MOSI_LOW();
    a262:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a264:	6810      	ldr	r0, [r2, #0]
    a266:	43b8      	bics	r0, r7
    a268:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a26a:	6818      	ldr	r0, [r3, #0]
    a26c:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a26e:	43b8      	bics	r0, r7
    a270:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a272:	6818      	ldr	r0, [r3, #0]
    a274:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a276:	4338      	orrs	r0, r7
    a278:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    a27a:	6810      	ldr	r0, [r2, #0]
    a27c:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a27e:	43b8      	bics	r0, r7
    a280:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a282:	6818      	ldr	r0, [r3, #0]
    a284:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a286:	43b8      	bics	r0, r7
    a288:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a28a:	6818      	ldr	r0, [r3, #0]
    a28c:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a28e:	4338      	orrs	r0, r7
    a290:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    a292:	6810      	ldr	r0, [r2, #0]
    a294:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a296:	4338      	orrs	r0, r7
    a298:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a29a:	6818      	ldr	r0, [r3, #0]
    a29c:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a29e:	43b8      	bics	r0, r7
    a2a0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a2a2:	6818      	ldr	r0, [r3, #0]
    a2a4:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a2a6:	4338      	orrs	r0, r7
    a2a8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    a2aa:	6810      	ldr	r0, [r2, #0]
    a2ac:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a2ae:	43b8      	bics	r0, r7
    a2b0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a2b2:	6818      	ldr	r0, [r3, #0]
    a2b4:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a2b6:	43b8      	bics	r0, r7
    a2b8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a2ba:	6818      	ldr	r0, [r3, #0]
    a2bc:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a2be:	4338      	orrs	r0, r7
    a2c0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    a2c2:	6810      	ldr	r0, [r2, #0]
    a2c4:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a2c6:	4338      	orrs	r0, r7
    a2c8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a2ca:	6818      	ldr	r0, [r3, #0]
    a2cc:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a2ce:	43b8      	bics	r0, r7
    a2d0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a2d2:	6818      	ldr	r0, [r3, #0]
    a2d4:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a2d6:	4338      	orrs	r0, r7
    a2d8:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    a2da:	6810      	ldr	r0, [r2, #0]
    a2dc:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a2de:	43b8      	bics	r0, r7
    a2e0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a2e2:	6818      	ldr	r0, [r3, #0]
    a2e4:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a2e6:	43b8      	bics	r0, r7
    a2e8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a2ea:	6818      	ldr	r0, [r3, #0]
    a2ec:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a2ee:	4338      	orrs	r0, r7
    a2f0:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    a2f2:	6810      	ldr	r0, [r2, #0]
    a2f4:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a2f6:	4338      	orrs	r0, r7
    a2f8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a2fa:	6818      	ldr	r0, [r3, #0]
    a2fc:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a2fe:	43b8      	bics	r0, r7
    a300:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a302:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a304:	6818      	ldr	r0, [r3, #0]
    a306:	4338      	orrs	r0, r7
    a308:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    a30a:	6810      	ldr	r0, [r2, #0]
    a30c:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a30e:	43b8      	bics	r0, r7
    a310:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a312:	681a      	ldr	r2, [r3, #0]
    a314:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a316:	4382      	bics	r2, r0
    a318:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a31a:	681a      	ldr	r2, [r3, #0]
    a31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a31e:	4302      	orrs	r2, r0
    a320:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    a322:	680b      	ldr	r3, [r1, #0]
    a324:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a326:	4313      	orrs	r3, r2
    a328:	600b      	str	r3, [r1, #0]
    SPI_WRITE32(xa);
    a32a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a32c:	2b00      	cmp	r3, #0
    a32e:	da01      	bge.n	a334 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x104>
    a330:	f000 fe59 	bl	afe6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xdb6>
    a334:	0e30      	lsrs	r0, r6, #24
    a336:	b2c1      	uxtb	r1, r0
        if((b) & bit){
    a338:	b240      	sxtb	r0, r0
    a33a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a33c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    a33e:	2800      	cmp	r0, #0
    a340:	da01      	bge.n	a346 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x116>
    a342:	f000 fcf1 	bl	ad28 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xaf8>
            SSPI_MOSI_LOW();
    a346:	6810      	ldr	r0, [r2, #0]
    a348:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a34a:	43b8      	bics	r0, r7
    a34c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a34e:	6818      	ldr	r0, [r3, #0]
    a350:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a352:	43b8      	bics	r0, r7
    a354:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a356:	6818      	ldr	r0, [r3, #0]
    a358:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a35a:	4338      	orrs	r0, r7
    a35c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a35e:	0648      	lsls	r0, r1, #25
    a360:	d501      	bpl.n	a366 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x136>
    a362:	f000 fdab 	bl	aebc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc8c>
            SSPI_MOSI_LOW();
    a366:	6810      	ldr	r0, [r2, #0]
    a368:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a36a:	43b8      	bics	r0, r7
    a36c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a36e:	6818      	ldr	r0, [r3, #0]
    a370:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a372:	43b8      	bics	r0, r7
    a374:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a376:	6818      	ldr	r0, [r3, #0]
    a378:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a37a:	4338      	orrs	r0, r7
    a37c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a37e:	0688      	lsls	r0, r1, #26
    a380:	d501      	bpl.n	a386 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x156>
    a382:	f000 fd95 	bl	aeb0 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc80>
            SSPI_MOSI_LOW();
    a386:	6810      	ldr	r0, [r2, #0]
    a388:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a38a:	43b8      	bics	r0, r7
    a38c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a38e:	6818      	ldr	r0, [r3, #0]
    a390:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a392:	43b8      	bics	r0, r7
    a394:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a396:	6818      	ldr	r0, [r3, #0]
    a398:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a39a:	4338      	orrs	r0, r7
    a39c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a39e:	06c8      	lsls	r0, r1, #27
    a3a0:	d501      	bpl.n	a3a6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x176>
    a3a2:	f000 fd7f 	bl	aea4 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc74>
            SSPI_MOSI_LOW();
    a3a6:	6810      	ldr	r0, [r2, #0]
    a3a8:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a3aa:	43b8      	bics	r0, r7
    a3ac:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a3ae:	6818      	ldr	r0, [r3, #0]
    a3b0:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a3b2:	43b8      	bics	r0, r7
    a3b4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a3b6:	6818      	ldr	r0, [r3, #0]
    a3b8:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a3ba:	4338      	orrs	r0, r7
    a3bc:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a3be:	0708      	lsls	r0, r1, #28
    a3c0:	d501      	bpl.n	a3c6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x196>
    a3c2:	f000 fd69 	bl	ae98 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc68>
            SSPI_MOSI_LOW();
    a3c6:	6810      	ldr	r0, [r2, #0]
    a3c8:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a3ca:	43b8      	bics	r0, r7
    a3cc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a3ce:	6818      	ldr	r0, [r3, #0]
    a3d0:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a3d2:	43b8      	bics	r0, r7
    a3d4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a3d6:	6818      	ldr	r0, [r3, #0]
    a3d8:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a3da:	4338      	orrs	r0, r7
    a3dc:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a3de:	0748      	lsls	r0, r1, #29
    a3e0:	d501      	bpl.n	a3e6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x1b6>
    a3e2:	f000 fd53 	bl	ae8c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc5c>
            SSPI_MOSI_LOW();
    a3e6:	6810      	ldr	r0, [r2, #0]
    a3e8:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a3ea:	43b8      	bics	r0, r7
    a3ec:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a3ee:	6818      	ldr	r0, [r3, #0]
    a3f0:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a3f2:	43b8      	bics	r0, r7
    a3f4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a3f6:	6818      	ldr	r0, [r3, #0]
    a3f8:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a3fa:	4338      	orrs	r0, r7
    a3fc:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a3fe:	0788      	lsls	r0, r1, #30
    a400:	d501      	bpl.n	a406 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x1d6>
    a402:	f000 fd3d 	bl	ae80 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc50>
            SSPI_MOSI_LOW();
    a406:	6810      	ldr	r0, [r2, #0]
    a408:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a40a:	43b8      	bics	r0, r7
    a40c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a40e:	6818      	ldr	r0, [r3, #0]
    a410:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a412:	43b8      	bics	r0, r7
    a414:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a416:	6818      	ldr	r0, [r3, #0]
    a418:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a41a:	4338      	orrs	r0, r7
    a41c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a41e:	07c9      	lsls	r1, r1, #31
    a420:	d401      	bmi.n	a426 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x1f6>
    a422:	f000 fd27 	bl	ae74 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc44>
            SSPI_MOSI_HIGH();
    a426:	6811      	ldr	r1, [r2, #0]
    a428:	6d20      	ldr	r0, [r4, #80]	; 0x50
    a42a:	4301      	orrs	r1, r0
    a42c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    a42e:	6819      	ldr	r1, [r3, #0]
    a430:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a432:	4381      	bics	r1, r0
    a434:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    a436:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a438:	6819      	ldr	r1, [r3, #0]
    a43a:	4301      	orrs	r1, r0
    a43c:	6019      	str	r1, [r3, #0]
    if(_sclk < 0){
    a43e:	6b27      	ldr	r7, [r4, #48]	; 0x30
    SPI_WRITE32(xa);
    a440:	0c30      	lsrs	r0, r6, #16
    a442:	b2c1      	uxtb	r1, r0
    if(_sclk < 0){
    a444:	2f00      	cmp	r7, #0
    a446:	da01      	bge.n	a44c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x21c>
    a448:	f000 fe15 	bl	b076 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe46>
        if((b) & bit){
    a44c:	0600      	lsls	r0, r0, #24
    a44e:	d401      	bmi.n	a454 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x224>
    a450:	f000 fd3f 	bl	aed2 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xca2>
            SSPI_MOSI_HIGH();
    a454:	6810      	ldr	r0, [r2, #0]
    a456:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a458:	4338      	orrs	r0, r7
    a45a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a45c:	6818      	ldr	r0, [r3, #0]
    a45e:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a460:	43b8      	bics	r0, r7
    a462:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a464:	6818      	ldr	r0, [r3, #0]
    a466:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a468:	4338      	orrs	r0, r7
    a46a:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a46c:	0648      	lsls	r0, r1, #25
    a46e:	d401      	bmi.n	a474 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x244>
    a470:	f000 fd3b 	bl	aeea <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xcba>
            SSPI_MOSI_HIGH();
    a474:	6810      	ldr	r0, [r2, #0]
    a476:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a478:	4338      	orrs	r0, r7
    a47a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a47c:	6818      	ldr	r0, [r3, #0]
    a47e:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a480:	43b8      	bics	r0, r7
    a482:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a484:	6818      	ldr	r0, [r3, #0]
    a486:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a488:	4338      	orrs	r0, r7
    a48a:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a48c:	0688      	lsls	r0, r1, #26
    a48e:	d401      	bmi.n	a494 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x264>
    a490:	f000 fd25 	bl	aede <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xcae>
            SSPI_MOSI_HIGH();
    a494:	6810      	ldr	r0, [r2, #0]
    a496:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a498:	4338      	orrs	r0, r7
    a49a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a49c:	6818      	ldr	r0, [r3, #0]
    a49e:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a4a0:	43b8      	bics	r0, r7
    a4a2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a4a4:	6818      	ldr	r0, [r3, #0]
    a4a6:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a4a8:	4338      	orrs	r0, r7
    a4aa:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a4ac:	06c8      	lsls	r0, r1, #27
    a4ae:	d401      	bmi.n	a4b4 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x284>
    a4b0:	f000 fd33 	bl	af1a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xcea>
            SSPI_MOSI_HIGH();
    a4b4:	6810      	ldr	r0, [r2, #0]
    a4b6:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a4b8:	4338      	orrs	r0, r7
    a4ba:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a4bc:	6818      	ldr	r0, [r3, #0]
    a4be:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a4c0:	43b8      	bics	r0, r7
    a4c2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a4c4:	6818      	ldr	r0, [r3, #0]
    a4c6:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a4c8:	4338      	orrs	r0, r7
    a4ca:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a4cc:	0708      	lsls	r0, r1, #28
    a4ce:	d401      	bmi.n	a4d4 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x2a4>
    a4d0:	f000 fd1d 	bl	af0e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xcde>
            SSPI_MOSI_HIGH();
    a4d4:	6810      	ldr	r0, [r2, #0]
    a4d6:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a4d8:	4338      	orrs	r0, r7
    a4da:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a4dc:	6818      	ldr	r0, [r3, #0]
    a4de:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a4e0:	43b8      	bics	r0, r7
    a4e2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a4e4:	6818      	ldr	r0, [r3, #0]
    a4e6:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a4e8:	4338      	orrs	r0, r7
    a4ea:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a4ec:	0748      	lsls	r0, r1, #29
    a4ee:	d401      	bmi.n	a4f4 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x2c4>
    a4f0:	f000 fd07 	bl	af02 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xcd2>
            SSPI_MOSI_HIGH();
    a4f4:	6810      	ldr	r0, [r2, #0]
    a4f6:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a4f8:	4338      	orrs	r0, r7
    a4fa:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a4fc:	6818      	ldr	r0, [r3, #0]
    a4fe:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a500:	43b8      	bics	r0, r7
    a502:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a504:	6818      	ldr	r0, [r3, #0]
    a506:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a508:	4338      	orrs	r0, r7
    a50a:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a50c:	0788      	lsls	r0, r1, #30
    a50e:	d401      	bmi.n	a514 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x2e4>
    a510:	f000 fcf1 	bl	aef6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xcc6>
            SSPI_MOSI_HIGH();
    a514:	6810      	ldr	r0, [r2, #0]
    a516:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a518:	4338      	orrs	r0, r7
    a51a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a51c:	6818      	ldr	r0, [r3, #0]
    a51e:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a520:	43b8      	bics	r0, r7
    a522:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a524:	6818      	ldr	r0, [r3, #0]
    a526:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a528:	4338      	orrs	r0, r7
    a52a:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a52c:	07c9      	lsls	r1, r1, #31
    a52e:	d401      	bmi.n	a534 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x304>
    a530:	f000 fd53 	bl	afda <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xdaa>
            SSPI_MOSI_HIGH();
    a534:	6811      	ldr	r1, [r2, #0]
    a536:	6d20      	ldr	r0, [r4, #80]	; 0x50
    a538:	4301      	orrs	r1, r0
    a53a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    a53c:	681a      	ldr	r2, [r3, #0]
    a53e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    a540:	438a      	bics	r2, r1
    a542:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a544:	681a      	ldr	r2, [r3, #0]
    a546:	6da1      	ldr	r1, [r4, #88]	; 0x58
    a548:	430a      	orrs	r2, r1
    a54a:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    a54c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    SPI_WRITE32(xa);
    a54e:	0a30      	lsrs	r0, r6, #8
    a550:	b2c1      	uxtb	r1, r0
    if(_sclk < 0){
    a552:	2b00      	cmp	r3, #0
    a554:	da01      	bge.n	a55a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x32a>
    a556:	f000 fd98 	bl	b08a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe5a>
    a55a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a55c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        if((b) & bit){
    a55e:	0600      	lsls	r0, r0, #24
    a560:	d501      	bpl.n	a566 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x336>
    a562:	f000 fd34 	bl	afce <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd9e>
            SSPI_MOSI_LOW();
    a566:	6810      	ldr	r0, [r2, #0]
    a568:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a56a:	43b8      	bics	r0, r7
    a56c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a56e:	6818      	ldr	r0, [r3, #0]
    a570:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a572:	43b8      	bics	r0, r7
    a574:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a576:	6818      	ldr	r0, [r3, #0]
    a578:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a57a:	4338      	orrs	r0, r7
    a57c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a57e:	0648      	lsls	r0, r1, #25
    a580:	d501      	bpl.n	a586 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x356>
    a582:	f000 fd1e 	bl	afc2 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd92>
            SSPI_MOSI_LOW();
    a586:	6810      	ldr	r0, [r2, #0]
    a588:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a58a:	43b8      	bics	r0, r7
    a58c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a58e:	6818      	ldr	r0, [r3, #0]
    a590:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a592:	43b8      	bics	r0, r7
    a594:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a596:	6818      	ldr	r0, [r3, #0]
    a598:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a59a:	4338      	orrs	r0, r7
    a59c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a59e:	0688      	lsls	r0, r1, #26
    a5a0:	d501      	bpl.n	a5a6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x376>
    a5a2:	f000 fd08 	bl	afb6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd86>
            SSPI_MOSI_LOW();
    a5a6:	6810      	ldr	r0, [r2, #0]
    a5a8:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a5aa:	43b8      	bics	r0, r7
    a5ac:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a5ae:	6818      	ldr	r0, [r3, #0]
    a5b0:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a5b2:	43b8      	bics	r0, r7
    a5b4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a5b6:	6818      	ldr	r0, [r3, #0]
    a5b8:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a5ba:	4338      	orrs	r0, r7
    a5bc:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a5be:	06c8      	lsls	r0, r1, #27
    a5c0:	d501      	bpl.n	a5c6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x396>
    a5c2:	f000 fcf2 	bl	afaa <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd7a>
            SSPI_MOSI_LOW();
    a5c6:	6810      	ldr	r0, [r2, #0]
    a5c8:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a5ca:	43b8      	bics	r0, r7
    a5cc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a5ce:	6818      	ldr	r0, [r3, #0]
    a5d0:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a5d2:	43b8      	bics	r0, r7
    a5d4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a5d6:	6818      	ldr	r0, [r3, #0]
    a5d8:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a5da:	4338      	orrs	r0, r7
    a5dc:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a5de:	0708      	lsls	r0, r1, #28
    a5e0:	d501      	bpl.n	a5e6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x3b6>
    a5e2:	f000 fcdc 	bl	af9e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd6e>
            SSPI_MOSI_LOW();
    a5e6:	6810      	ldr	r0, [r2, #0]
    a5e8:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a5ea:	43b8      	bics	r0, r7
    a5ec:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a5ee:	6818      	ldr	r0, [r3, #0]
    a5f0:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a5f2:	43b8      	bics	r0, r7
    a5f4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a5f6:	6818      	ldr	r0, [r3, #0]
    a5f8:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a5fa:	4338      	orrs	r0, r7
    a5fc:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a5fe:	0748      	lsls	r0, r1, #29
    a600:	d501      	bpl.n	a606 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x3d6>
    a602:	f000 fcc6 	bl	af92 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd62>
            SSPI_MOSI_LOW();
    a606:	6810      	ldr	r0, [r2, #0]
    a608:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a60a:	43b8      	bics	r0, r7
    a60c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a60e:	6818      	ldr	r0, [r3, #0]
    a610:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a612:	43b8      	bics	r0, r7
    a614:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a616:	6818      	ldr	r0, [r3, #0]
    a618:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a61a:	4338      	orrs	r0, r7
    a61c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a61e:	0788      	lsls	r0, r1, #30
    a620:	d501      	bpl.n	a626 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x3f6>
    a622:	f000 fcb0 	bl	af86 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd56>
            SSPI_MOSI_LOW();
    a626:	6810      	ldr	r0, [r2, #0]
    a628:	6d27      	ldr	r7, [r4, #80]	; 0x50
    a62a:	43b8      	bics	r0, r7
    a62c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a62e:	6818      	ldr	r0, [r3, #0]
    a630:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a632:	43b8      	bics	r0, r7
    a634:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a636:	6818      	ldr	r0, [r3, #0]
    a638:	6da7      	ldr	r7, [r4, #88]	; 0x58
    a63a:	4338      	orrs	r0, r7
    a63c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a63e:	07c9      	lsls	r1, r1, #31
    a640:	d401      	bmi.n	a646 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x416>
    a642:	f000 fc9a 	bl	af7a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd4a>
            SSPI_MOSI_HIGH();
    a646:	6811      	ldr	r1, [r2, #0]
    a648:	6d20      	ldr	r0, [r4, #80]	; 0x50
    a64a:	4301      	orrs	r1, r0
    a64c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    a64e:	681a      	ldr	r2, [r3, #0]
    a650:	6da1      	ldr	r1, [r4, #88]	; 0x58
    a652:	438a      	bics	r2, r1
    a654:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a656:	681a      	ldr	r2, [r3, #0]
    a658:	6da1      	ldr	r1, [r4, #88]	; 0x58
    a65a:	430a      	orrs	r2, r1
    a65c:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    a65e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    SPI_WRITE32(xa);
    a660:	b2f1      	uxtb	r1, r6
    if(_sclk < 0){
    a662:	2b00      	cmp	r3, #0
    a664:	da01      	bge.n	a66a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x43a>
    a666:	f000 fd0b 	bl	b080 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe50>
    a66a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a66c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        if((b) & bit){
    a66e:	0630      	lsls	r0, r6, #24
    a670:	d501      	bpl.n	a676 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x446>
    a672:	f000 fc7c 	bl	af6e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd3e>
            SSPI_MOSI_LOW();
    a676:	6810      	ldr	r0, [r2, #0]
    a678:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a67a:	43b0      	bics	r0, r6
    a67c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a67e:	6818      	ldr	r0, [r3, #0]
    a680:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a682:	43b0      	bics	r0, r6
    a684:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a686:	6818      	ldr	r0, [r3, #0]
    a688:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a68a:	4330      	orrs	r0, r6
    a68c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a68e:	0648      	lsls	r0, r1, #25
    a690:	d501      	bpl.n	a696 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x466>
    a692:	f000 fc66 	bl	af62 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd32>
            SSPI_MOSI_LOW();
    a696:	6810      	ldr	r0, [r2, #0]
    a698:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a69a:	43b0      	bics	r0, r6
    a69c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a69e:	6818      	ldr	r0, [r3, #0]
    a6a0:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a6a2:	43b0      	bics	r0, r6
    a6a4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a6a6:	6818      	ldr	r0, [r3, #0]
    a6a8:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a6aa:	4330      	orrs	r0, r6
    a6ac:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a6ae:	0688      	lsls	r0, r1, #26
    a6b0:	d501      	bpl.n	a6b6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x486>
    a6b2:	f000 fc50 	bl	af56 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd26>
            SSPI_MOSI_LOW();
    a6b6:	6810      	ldr	r0, [r2, #0]
    a6b8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a6ba:	43b0      	bics	r0, r6
    a6bc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a6be:	6818      	ldr	r0, [r3, #0]
    a6c0:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a6c2:	43b0      	bics	r0, r6
    a6c4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a6c6:	6818      	ldr	r0, [r3, #0]
    a6c8:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a6ca:	4330      	orrs	r0, r6
    a6cc:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a6ce:	06c8      	lsls	r0, r1, #27
    a6d0:	d501      	bpl.n	a6d6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x4a6>
    a6d2:	f000 fc3a 	bl	af4a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd1a>
            SSPI_MOSI_LOW();
    a6d6:	6810      	ldr	r0, [r2, #0]
    a6d8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a6da:	43b0      	bics	r0, r6
    a6dc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a6de:	6818      	ldr	r0, [r3, #0]
    a6e0:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a6e2:	43b0      	bics	r0, r6
    a6e4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a6e6:	6818      	ldr	r0, [r3, #0]
    a6e8:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a6ea:	4330      	orrs	r0, r6
    a6ec:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a6ee:	0708      	lsls	r0, r1, #28
    a6f0:	d501      	bpl.n	a6f6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x4c6>
    a6f2:	f000 fc24 	bl	af3e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd0e>
            SSPI_MOSI_LOW();
    a6f6:	6810      	ldr	r0, [r2, #0]
    a6f8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a6fa:	43b0      	bics	r0, r6
    a6fc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a6fe:	6818      	ldr	r0, [r3, #0]
    a700:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a702:	43b0      	bics	r0, r6
    a704:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a706:	6818      	ldr	r0, [r3, #0]
    a708:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a70a:	4330      	orrs	r0, r6
    a70c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a70e:	0748      	lsls	r0, r1, #29
    a710:	d501      	bpl.n	a716 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x4e6>
    a712:	f000 fc0e 	bl	af32 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xd02>
            SSPI_MOSI_LOW();
    a716:	6810      	ldr	r0, [r2, #0]
    a718:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a71a:	43b0      	bics	r0, r6
    a71c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a71e:	6818      	ldr	r0, [r3, #0]
    a720:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a722:	43b0      	bics	r0, r6
    a724:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a726:	6818      	ldr	r0, [r3, #0]
    a728:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a72a:	4330      	orrs	r0, r6
    a72c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a72e:	0788      	lsls	r0, r1, #30
    a730:	d501      	bpl.n	a736 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x506>
    a732:	f000 fbf8 	bl	af26 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xcf6>
            SSPI_MOSI_LOW();
    a736:	6810      	ldr	r0, [r2, #0]
    a738:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a73a:	43b0      	bics	r0, r6
    a73c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a73e:	6818      	ldr	r0, [r3, #0]
    a740:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a742:	43b0      	bics	r0, r6
    a744:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a746:	6818      	ldr	r0, [r3, #0]
    a748:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a74a:	4330      	orrs	r0, r6
    a74c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    a74e:	07c9      	lsls	r1, r1, #31
    a750:	d400      	bmi.n	a754 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x524>
    a752:	e3b9      	b.n	aec8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc98>
            SSPI_MOSI_HIGH();
    a754:	6811      	ldr	r1, [r2, #0]
    a756:	6d20      	ldr	r0, [r4, #80]	; 0x50
    a758:	4301      	orrs	r1, r0
    a75a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    a75c:	681a      	ldr	r2, [r3, #0]
    a75e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    a760:	438a      	bics	r2, r1
    a762:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a764:	681a      	ldr	r2, [r3, #0]
    a766:	6da1      	ldr	r1, [r4, #88]	; 0x58
    a768:	430a      	orrs	r2, r1
    a76a:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    a76c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a76e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a770:	680b      	ldr	r3, [r1, #0]
    a772:	4393      	bics	r3, r2
    a774:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    a776:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a778:	2b00      	cmp	r3, #0
    a77a:	da01      	bge.n	a780 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x550>
    a77c:	f000 fc5b 	bl	b036 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe06>
    a780:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    a782:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a784:	6810      	ldr	r0, [r2, #0]
    a786:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a788:	43b0      	bics	r0, r6
    a78a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a78c:	6818      	ldr	r0, [r3, #0]
    a78e:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a790:	43b0      	bics	r0, r6
    a792:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a794:	6818      	ldr	r0, [r3, #0]
    a796:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a798:	4330      	orrs	r0, r6
    a79a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    a79c:	6810      	ldr	r0, [r2, #0]
    a79e:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a7a0:	43b0      	bics	r0, r6
    a7a2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a7a4:	6818      	ldr	r0, [r3, #0]
    a7a6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a7a8:	43b0      	bics	r0, r6
    a7aa:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a7ac:	6818      	ldr	r0, [r3, #0]
    a7ae:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a7b0:	4330      	orrs	r0, r6
    a7b2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    a7b4:	6810      	ldr	r0, [r2, #0]
    a7b6:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a7b8:	4330      	orrs	r0, r6
    a7ba:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a7bc:	6818      	ldr	r0, [r3, #0]
    a7be:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a7c0:	43b0      	bics	r0, r6
    a7c2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a7c4:	6818      	ldr	r0, [r3, #0]
    a7c6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a7c8:	4330      	orrs	r0, r6
    a7ca:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    a7cc:	6810      	ldr	r0, [r2, #0]
    a7ce:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a7d0:	43b0      	bics	r0, r6
    a7d2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a7d4:	6818      	ldr	r0, [r3, #0]
    a7d6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a7d8:	43b0      	bics	r0, r6
    a7da:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a7dc:	6818      	ldr	r0, [r3, #0]
    a7de:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a7e0:	4330      	orrs	r0, r6
    a7e2:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    a7e4:	6810      	ldr	r0, [r2, #0]
    a7e6:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a7e8:	4330      	orrs	r0, r6
    a7ea:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a7ec:	6818      	ldr	r0, [r3, #0]
    a7ee:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a7f0:	43b0      	bics	r0, r6
    a7f2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a7f4:	6818      	ldr	r0, [r3, #0]
    a7f6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a7f8:	4330      	orrs	r0, r6
    a7fa:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    a7fc:	6810      	ldr	r0, [r2, #0]
    a7fe:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a800:	43b0      	bics	r0, r6
    a802:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a804:	6818      	ldr	r0, [r3, #0]
    a806:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a808:	43b0      	bics	r0, r6
    a80a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a80c:	6818      	ldr	r0, [r3, #0]
    a80e:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a810:	4330      	orrs	r0, r6
    a812:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    a814:	6810      	ldr	r0, [r2, #0]
    a816:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a818:	4330      	orrs	r0, r6
    a81a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a81c:	6818      	ldr	r0, [r3, #0]
    a81e:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a820:	43b0      	bics	r0, r6
    a822:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    a824:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a826:	6818      	ldr	r0, [r3, #0]
    a828:	4330      	orrs	r0, r6
    a82a:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    a82c:	6810      	ldr	r0, [r2, #0]
    a82e:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a830:	4330      	orrs	r0, r6
    a832:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    a834:	681a      	ldr	r2, [r3, #0]
    a836:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a838:	4382      	bics	r2, r0
    a83a:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a83c:	681a      	ldr	r2, [r3, #0]
    a83e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a840:	4302      	orrs	r2, r0
    a842:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    a844:	680b      	ldr	r3, [r1, #0]
    a846:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a848:	4313      	orrs	r3, r2
    a84a:	600b      	str	r3, [r1, #0]
    SPI_WRITE32(ya);
    a84c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a84e:	0e29      	lsrs	r1, r5, #24
    a850:	2b00      	cmp	r3, #0
    a852:	da00      	bge.n	a856 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x626>
    a854:	e3dc      	b.n	b010 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xde0>
    a856:	b2ca      	uxtb	r2, r1
        if((b) & bit){
    a858:	b249      	sxtb	r1, r1
    a85a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a85c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a85e:	2900      	cmp	r1, #0
    a860:	da00      	bge.n	a864 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x634>
    a862:	e28a      	b.n	ad7a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb4a>
            SSPI_MOSI_LOW();
    a864:	6801      	ldr	r1, [r0, #0]
    a866:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a868:	43b1      	bics	r1, r6
    a86a:	6001      	str	r1, [r0, #0]
        SSPI_SCK_LOW();
    a86c:	6819      	ldr	r1, [r3, #0]
    a86e:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a870:	43b1      	bics	r1, r6
    a872:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    a874:	6819      	ldr	r1, [r3, #0]
    a876:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a878:	4331      	orrs	r1, r6
    a87a:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    a87c:	0651      	lsls	r1, r2, #25
    a87e:	d500      	bpl.n	a882 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x652>
    a880:	e276      	b.n	ad70 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb40>
            SSPI_MOSI_LOW();
    a882:	6801      	ldr	r1, [r0, #0]
    a884:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a886:	43b1      	bics	r1, r6
    a888:	6001      	str	r1, [r0, #0]
        SSPI_SCK_LOW();
    a88a:	6819      	ldr	r1, [r3, #0]
    a88c:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a88e:	43b1      	bics	r1, r6
    a890:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    a892:	6819      	ldr	r1, [r3, #0]
    a894:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a896:	4331      	orrs	r1, r6
    a898:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    a89a:	0691      	lsls	r1, r2, #26
    a89c:	d500      	bpl.n	a8a0 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x670>
    a89e:	e262      	b.n	ad66 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb36>
            SSPI_MOSI_LOW();
    a8a0:	6801      	ldr	r1, [r0, #0]
    a8a2:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a8a4:	43b1      	bics	r1, r6
    a8a6:	6001      	str	r1, [r0, #0]
        SSPI_SCK_LOW();
    a8a8:	6819      	ldr	r1, [r3, #0]
    a8aa:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a8ac:	43b1      	bics	r1, r6
    a8ae:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    a8b0:	6819      	ldr	r1, [r3, #0]
    a8b2:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a8b4:	4331      	orrs	r1, r6
    a8b6:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    a8b8:	06d1      	lsls	r1, r2, #27
    a8ba:	d500      	bpl.n	a8be <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x68e>
    a8bc:	e24e      	b.n	ad5c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb2c>
            SSPI_MOSI_LOW();
    a8be:	6801      	ldr	r1, [r0, #0]
    a8c0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a8c2:	43b1      	bics	r1, r6
    a8c4:	6001      	str	r1, [r0, #0]
        SSPI_SCK_LOW();
    a8c6:	6819      	ldr	r1, [r3, #0]
    a8c8:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a8ca:	43b1      	bics	r1, r6
    a8cc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    a8ce:	6819      	ldr	r1, [r3, #0]
    a8d0:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a8d2:	4331      	orrs	r1, r6
    a8d4:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    a8d6:	0711      	lsls	r1, r2, #28
    a8d8:	d500      	bpl.n	a8dc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x6ac>
    a8da:	e23a      	b.n	ad52 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb22>
            SSPI_MOSI_LOW();
    a8dc:	6801      	ldr	r1, [r0, #0]
    a8de:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a8e0:	43b1      	bics	r1, r6
    a8e2:	6001      	str	r1, [r0, #0]
        SSPI_SCK_LOW();
    a8e4:	6819      	ldr	r1, [r3, #0]
    a8e6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a8e8:	43b1      	bics	r1, r6
    a8ea:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    a8ec:	6819      	ldr	r1, [r3, #0]
    a8ee:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a8f0:	4331      	orrs	r1, r6
    a8f2:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    a8f4:	0751      	lsls	r1, r2, #29
    a8f6:	d500      	bpl.n	a8fa <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x6ca>
    a8f8:	e226      	b.n	ad48 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb18>
            SSPI_MOSI_LOW();
    a8fa:	6801      	ldr	r1, [r0, #0]
    a8fc:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a8fe:	43b1      	bics	r1, r6
    a900:	6001      	str	r1, [r0, #0]
        SSPI_SCK_LOW();
    a902:	6819      	ldr	r1, [r3, #0]
    a904:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a906:	43b1      	bics	r1, r6
    a908:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    a90a:	6819      	ldr	r1, [r3, #0]
    a90c:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a90e:	4331      	orrs	r1, r6
    a910:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    a912:	0791      	lsls	r1, r2, #30
    a914:	d500      	bpl.n	a918 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x6e8>
    a916:	e212      	b.n	ad3e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb0e>
            SSPI_MOSI_LOW();
    a918:	6801      	ldr	r1, [r0, #0]
    a91a:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a91c:	43b1      	bics	r1, r6
    a91e:	6001      	str	r1, [r0, #0]
        SSPI_SCK_LOW();
    a920:	6819      	ldr	r1, [r3, #0]
    a922:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a924:	43b1      	bics	r1, r6
    a926:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    a928:	6819      	ldr	r1, [r3, #0]
    a92a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a92c:	4331      	orrs	r1, r6
    a92e:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    a930:	07d2      	lsls	r2, r2, #31
    a932:	d400      	bmi.n	a936 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x706>
    a934:	e1fe      	b.n	ad34 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb04>
            SSPI_MOSI_HIGH();
    a936:	6802      	ldr	r2, [r0, #0]
    a938:	6d21      	ldr	r1, [r4, #80]	; 0x50
    a93a:	430a      	orrs	r2, r1
    a93c:	6002      	str	r2, [r0, #0]
        SSPI_SCK_LOW();
    a93e:	681a      	ldr	r2, [r3, #0]
    a940:	6da1      	ldr	r1, [r4, #88]	; 0x58
    a942:	438a      	bics	r2, r1
    a944:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a946:	6da1      	ldr	r1, [r4, #88]	; 0x58
    a948:	681a      	ldr	r2, [r3, #0]
    a94a:	430a      	orrs	r2, r1
    a94c:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    a94e:	6b26      	ldr	r6, [r4, #48]	; 0x30
    SPI_WRITE32(ya);
    a950:	0c2a      	lsrs	r2, r5, #16
    a952:	b2d1      	uxtb	r1, r2
    if(_sclk < 0){
    a954:	2e00      	cmp	r6, #0
    a956:	da00      	bge.n	a95a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x72a>
    a958:	e389      	b.n	b06e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe3e>
        if((b) & bit){
    a95a:	0612      	lsls	r2, r2, #24
    a95c:	d400      	bmi.n	a960 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x730>
    a95e:	e216      	b.n	ad8e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb5e>
            SSPI_MOSI_HIGH();
    a960:	6802      	ldr	r2, [r0, #0]
    a962:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a964:	4332      	orrs	r2, r6
    a966:	6002      	str	r2, [r0, #0]
        SSPI_SCK_LOW();
    a968:	681a      	ldr	r2, [r3, #0]
    a96a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a96c:	43b2      	bics	r2, r6
    a96e:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a970:	681a      	ldr	r2, [r3, #0]
    a972:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a974:	4332      	orrs	r2, r6
    a976:	601a      	str	r2, [r3, #0]
        if((b) & bit){
    a978:	064a      	lsls	r2, r1, #25
    a97a:	d400      	bmi.n	a97e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x74e>
    a97c:	e211      	b.n	ada2 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb72>
            SSPI_MOSI_HIGH();
    a97e:	6802      	ldr	r2, [r0, #0]
    a980:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a982:	4332      	orrs	r2, r6
    a984:	6002      	str	r2, [r0, #0]
        SSPI_SCK_LOW();
    a986:	681a      	ldr	r2, [r3, #0]
    a988:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a98a:	43b2      	bics	r2, r6
    a98c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a98e:	681a      	ldr	r2, [r3, #0]
    a990:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a992:	4332      	orrs	r2, r6
    a994:	601a      	str	r2, [r3, #0]
        if((b) & bit){
    a996:	068a      	lsls	r2, r1, #26
    a998:	d400      	bmi.n	a99c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x76c>
    a99a:	e1fd      	b.n	ad98 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb68>
            SSPI_MOSI_HIGH();
    a99c:	6802      	ldr	r2, [r0, #0]
    a99e:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a9a0:	4332      	orrs	r2, r6
    a9a2:	6002      	str	r2, [r0, #0]
        SSPI_SCK_LOW();
    a9a4:	681a      	ldr	r2, [r3, #0]
    a9a6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a9a8:	43b2      	bics	r2, r6
    a9aa:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a9ac:	681a      	ldr	r2, [r3, #0]
    a9ae:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a9b0:	4332      	orrs	r2, r6
    a9b2:	601a      	str	r2, [r3, #0]
        if((b) & bit){
    a9b4:	06ca      	lsls	r2, r1, #27
    a9b6:	d400      	bmi.n	a9ba <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x78a>
    a9b8:	e207      	b.n	adca <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb9a>
            SSPI_MOSI_HIGH();
    a9ba:	6802      	ldr	r2, [r0, #0]
    a9bc:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a9be:	4332      	orrs	r2, r6
    a9c0:	6002      	str	r2, [r0, #0]
        SSPI_SCK_LOW();
    a9c2:	681a      	ldr	r2, [r3, #0]
    a9c4:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a9c6:	43b2      	bics	r2, r6
    a9c8:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a9ca:	681a      	ldr	r2, [r3, #0]
    a9cc:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a9ce:	4332      	orrs	r2, r6
    a9d0:	601a      	str	r2, [r3, #0]
        if((b) & bit){
    a9d2:	070a      	lsls	r2, r1, #28
    a9d4:	d400      	bmi.n	a9d8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x7a8>
    a9d6:	e1f3      	b.n	adc0 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb90>
            SSPI_MOSI_HIGH();
    a9d8:	6802      	ldr	r2, [r0, #0]
    a9da:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a9dc:	4332      	orrs	r2, r6
    a9de:	6002      	str	r2, [r0, #0]
        SSPI_SCK_LOW();
    a9e0:	681a      	ldr	r2, [r3, #0]
    a9e2:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a9e4:	43b2      	bics	r2, r6
    a9e6:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    a9e8:	681a      	ldr	r2, [r3, #0]
    a9ea:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a9ec:	4332      	orrs	r2, r6
    a9ee:	601a      	str	r2, [r3, #0]
        if((b) & bit){
    a9f0:	074a      	lsls	r2, r1, #29
    a9f2:	d400      	bmi.n	a9f6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x7c6>
    a9f4:	e1df      	b.n	adb6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb86>
            SSPI_MOSI_HIGH();
    a9f6:	6802      	ldr	r2, [r0, #0]
    a9f8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    a9fa:	4332      	orrs	r2, r6
    a9fc:	6002      	str	r2, [r0, #0]
        SSPI_SCK_LOW();
    a9fe:	681a      	ldr	r2, [r3, #0]
    aa00:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aa02:	43b2      	bics	r2, r6
    aa04:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    aa06:	681a      	ldr	r2, [r3, #0]
    aa08:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aa0a:	4332      	orrs	r2, r6
    aa0c:	601a      	str	r2, [r3, #0]
        if((b) & bit){
    aa0e:	078a      	lsls	r2, r1, #30
    aa10:	d400      	bmi.n	aa14 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x7e4>
    aa12:	e1cb      	b.n	adac <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb7c>
            SSPI_MOSI_HIGH();
    aa14:	6802      	ldr	r2, [r0, #0]
    aa16:	6d26      	ldr	r6, [r4, #80]	; 0x50
    aa18:	4332      	orrs	r2, r6
    aa1a:	6002      	str	r2, [r0, #0]
        SSPI_SCK_LOW();
    aa1c:	681a      	ldr	r2, [r3, #0]
    aa1e:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aa20:	43b2      	bics	r2, r6
    aa22:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    aa24:	681a      	ldr	r2, [r3, #0]
    aa26:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aa28:	4332      	orrs	r2, r6
    aa2a:	601a      	str	r2, [r3, #0]
        if((b) & bit){
    aa2c:	07ca      	lsls	r2, r1, #31
    aa2e:	d400      	bmi.n	aa32 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x802>
    aa30:	e21b      	b.n	ae6a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc3a>
            SSPI_MOSI_HIGH();
    aa32:	6802      	ldr	r2, [r0, #0]
    aa34:	6d21      	ldr	r1, [r4, #80]	; 0x50
    aa36:	430a      	orrs	r2, r1
    aa38:	6002      	str	r2, [r0, #0]
        SSPI_SCK_LOW();
    aa3a:	681a      	ldr	r2, [r3, #0]
    aa3c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    aa3e:	438a      	bics	r2, r1
    aa40:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    aa42:	681a      	ldr	r2, [r3, #0]
    aa44:	6da1      	ldr	r1, [r4, #88]	; 0x58
    aa46:	430a      	orrs	r2, r1
    aa48:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    aa4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    SPI_WRITE32(ya);
    aa4c:	0a28      	lsrs	r0, r5, #8
    aa4e:	b2c1      	uxtb	r1, r0
    if(_sclk < 0){
    aa50:	2b00      	cmp	r3, #0
    aa52:	da00      	bge.n	aa56 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x826>
    aa54:	e307      	b.n	b066 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe36>
    aa56:	6c63      	ldr	r3, [r4, #68]	; 0x44
    aa58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        if((b) & bit){
    aa5a:	0600      	lsls	r0, r0, #24
    aa5c:	d500      	bpl.n	aa60 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x830>
    aa5e:	e1ff      	b.n	ae60 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc30>
            SSPI_MOSI_LOW();
    aa60:	6810      	ldr	r0, [r2, #0]
    aa62:	6d26      	ldr	r6, [r4, #80]	; 0x50
    aa64:	43b0      	bics	r0, r6
    aa66:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    aa68:	6818      	ldr	r0, [r3, #0]
    aa6a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aa6c:	43b0      	bics	r0, r6
    aa6e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    aa70:	6818      	ldr	r0, [r3, #0]
    aa72:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aa74:	4330      	orrs	r0, r6
    aa76:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    aa78:	0648      	lsls	r0, r1, #25
    aa7a:	d500      	bpl.n	aa7e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x84e>
    aa7c:	e1eb      	b.n	ae56 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc26>
            SSPI_MOSI_LOW();
    aa7e:	6810      	ldr	r0, [r2, #0]
    aa80:	6d26      	ldr	r6, [r4, #80]	; 0x50
    aa82:	43b0      	bics	r0, r6
    aa84:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    aa86:	6818      	ldr	r0, [r3, #0]
    aa88:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aa8a:	43b0      	bics	r0, r6
    aa8c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    aa8e:	6818      	ldr	r0, [r3, #0]
    aa90:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aa92:	4330      	orrs	r0, r6
    aa94:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    aa96:	0688      	lsls	r0, r1, #26
    aa98:	d500      	bpl.n	aa9c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x86c>
    aa9a:	e1d7      	b.n	ae4c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc1c>
            SSPI_MOSI_LOW();
    aa9c:	6810      	ldr	r0, [r2, #0]
    aa9e:	6d26      	ldr	r6, [r4, #80]	; 0x50
    aaa0:	43b0      	bics	r0, r6
    aaa2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    aaa4:	6818      	ldr	r0, [r3, #0]
    aaa6:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aaa8:	43b0      	bics	r0, r6
    aaaa:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    aaac:	6818      	ldr	r0, [r3, #0]
    aaae:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aab0:	4330      	orrs	r0, r6
    aab2:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    aab4:	06c8      	lsls	r0, r1, #27
    aab6:	d500      	bpl.n	aaba <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x88a>
    aab8:	e1c3      	b.n	ae42 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc12>
            SSPI_MOSI_LOW();
    aaba:	6810      	ldr	r0, [r2, #0]
    aabc:	6d26      	ldr	r6, [r4, #80]	; 0x50
    aabe:	43b0      	bics	r0, r6
    aac0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    aac2:	6818      	ldr	r0, [r3, #0]
    aac4:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aac6:	43b0      	bics	r0, r6
    aac8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    aaca:	6818      	ldr	r0, [r3, #0]
    aacc:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aace:	4330      	orrs	r0, r6
    aad0:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    aad2:	0708      	lsls	r0, r1, #28
    aad4:	d500      	bpl.n	aad8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x8a8>
    aad6:	e1af      	b.n	ae38 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xc08>
            SSPI_MOSI_LOW();
    aad8:	6810      	ldr	r0, [r2, #0]
    aada:	6d26      	ldr	r6, [r4, #80]	; 0x50
    aadc:	43b0      	bics	r0, r6
    aade:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    aae0:	6818      	ldr	r0, [r3, #0]
    aae2:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aae4:	43b0      	bics	r0, r6
    aae6:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    aae8:	6818      	ldr	r0, [r3, #0]
    aaea:	6da6      	ldr	r6, [r4, #88]	; 0x58
    aaec:	4330      	orrs	r0, r6
    aaee:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    aaf0:	0748      	lsls	r0, r1, #29
    aaf2:	d500      	bpl.n	aaf6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x8c6>
    aaf4:	e19b      	b.n	ae2e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xbfe>
            SSPI_MOSI_LOW();
    aaf6:	6810      	ldr	r0, [r2, #0]
    aaf8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    aafa:	43b0      	bics	r0, r6
    aafc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    aafe:	6818      	ldr	r0, [r3, #0]
    ab00:	6da6      	ldr	r6, [r4, #88]	; 0x58
    ab02:	43b0      	bics	r0, r6
    ab04:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ab06:	6818      	ldr	r0, [r3, #0]
    ab08:	6da6      	ldr	r6, [r4, #88]	; 0x58
    ab0a:	4330      	orrs	r0, r6
    ab0c:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    ab0e:	0788      	lsls	r0, r1, #30
    ab10:	d500      	bpl.n	ab14 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x8e4>
    ab12:	e187      	b.n	ae24 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xbf4>
            SSPI_MOSI_LOW();
    ab14:	6810      	ldr	r0, [r2, #0]
    ab16:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ab18:	43b0      	bics	r0, r6
    ab1a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ab1c:	6818      	ldr	r0, [r3, #0]
    ab1e:	6da6      	ldr	r6, [r4, #88]	; 0x58
    ab20:	43b0      	bics	r0, r6
    ab22:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ab24:	6818      	ldr	r0, [r3, #0]
    ab26:	6da6      	ldr	r6, [r4, #88]	; 0x58
    ab28:	4330      	orrs	r0, r6
    ab2a:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    ab2c:	07c9      	lsls	r1, r1, #31
    ab2e:	d400      	bmi.n	ab32 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x902>
    ab30:	e173      	b.n	ae1a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xbea>
            SSPI_MOSI_HIGH();
    ab32:	6811      	ldr	r1, [r2, #0]
    ab34:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ab36:	4301      	orrs	r1, r0
    ab38:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    ab3a:	681a      	ldr	r2, [r3, #0]
    ab3c:	6da1      	ldr	r1, [r4, #88]	; 0x58
    ab3e:	438a      	bics	r2, r1
    ab40:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    ab42:	681a      	ldr	r2, [r3, #0]
    ab44:	6da1      	ldr	r1, [r4, #88]	; 0x58
    ab46:	430a      	orrs	r2, r1
    ab48:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    ab4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    SPI_WRITE32(ya);
    ab4c:	b2e9      	uxtb	r1, r5
    if(_sclk < 0){
    ab4e:	2b00      	cmp	r3, #0
    ab50:	da00      	bge.n	ab54 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x924>
    ab52:	e284      	b.n	b05e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe2e>
    ab54:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ab56:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        if((b) & bit){
    ab58:	0628      	lsls	r0, r5, #24
    ab5a:	d500      	bpl.n	ab5e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x92e>
    ab5c:	e158      	b.n	ae10 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xbe0>
            SSPI_MOSI_LOW();
    ab5e:	6810      	ldr	r0, [r2, #0]
    ab60:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ab62:	43a8      	bics	r0, r5
    ab64:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ab66:	6818      	ldr	r0, [r3, #0]
    ab68:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ab6a:	43a8      	bics	r0, r5
    ab6c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ab6e:	6818      	ldr	r0, [r3, #0]
    ab70:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ab72:	4328      	orrs	r0, r5
    ab74:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    ab76:	0648      	lsls	r0, r1, #25
    ab78:	d500      	bpl.n	ab7c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x94c>
    ab7a:	e144      	b.n	ae06 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xbd6>
            SSPI_MOSI_LOW();
    ab7c:	6810      	ldr	r0, [r2, #0]
    ab7e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ab80:	43a8      	bics	r0, r5
    ab82:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ab84:	6818      	ldr	r0, [r3, #0]
    ab86:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ab88:	43a8      	bics	r0, r5
    ab8a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ab8c:	6818      	ldr	r0, [r3, #0]
    ab8e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ab90:	4328      	orrs	r0, r5
    ab92:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    ab94:	0688      	lsls	r0, r1, #26
    ab96:	d500      	bpl.n	ab9a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x96a>
    ab98:	e130      	b.n	adfc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xbcc>
            SSPI_MOSI_LOW();
    ab9a:	6810      	ldr	r0, [r2, #0]
    ab9c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ab9e:	43a8      	bics	r0, r5
    aba0:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    aba2:	6818      	ldr	r0, [r3, #0]
    aba4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    aba6:	43a8      	bics	r0, r5
    aba8:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    abaa:	6818      	ldr	r0, [r3, #0]
    abac:	6da5      	ldr	r5, [r4, #88]	; 0x58
    abae:	4328      	orrs	r0, r5
    abb0:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    abb2:	06c8      	lsls	r0, r1, #27
    abb4:	d500      	bpl.n	abb8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x988>
    abb6:	e11c      	b.n	adf2 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xbc2>
            SSPI_MOSI_LOW();
    abb8:	6810      	ldr	r0, [r2, #0]
    abba:	6d25      	ldr	r5, [r4, #80]	; 0x50
    abbc:	43a8      	bics	r0, r5
    abbe:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    abc0:	6818      	ldr	r0, [r3, #0]
    abc2:	6da5      	ldr	r5, [r4, #88]	; 0x58
    abc4:	43a8      	bics	r0, r5
    abc6:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    abc8:	6818      	ldr	r0, [r3, #0]
    abca:	6da5      	ldr	r5, [r4, #88]	; 0x58
    abcc:	4328      	orrs	r0, r5
    abce:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    abd0:	0708      	lsls	r0, r1, #28
    abd2:	d500      	bpl.n	abd6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x9a6>
    abd4:	e108      	b.n	ade8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xbb8>
            SSPI_MOSI_LOW();
    abd6:	6810      	ldr	r0, [r2, #0]
    abd8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    abda:	43a8      	bics	r0, r5
    abdc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    abde:	6818      	ldr	r0, [r3, #0]
    abe0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    abe2:	43a8      	bics	r0, r5
    abe4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    abe6:	6818      	ldr	r0, [r3, #0]
    abe8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    abea:	4328      	orrs	r0, r5
    abec:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    abee:	0748      	lsls	r0, r1, #29
    abf0:	d500      	bpl.n	abf4 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x9c4>
    abf2:	e0f4      	b.n	adde <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xbae>
            SSPI_MOSI_LOW();
    abf4:	6810      	ldr	r0, [r2, #0]
    abf6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    abf8:	43a8      	bics	r0, r5
    abfa:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    abfc:	6818      	ldr	r0, [r3, #0]
    abfe:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ac00:	43a8      	bics	r0, r5
    ac02:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ac04:	6818      	ldr	r0, [r3, #0]
    ac06:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ac08:	4328      	orrs	r0, r5
    ac0a:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    ac0c:	0788      	lsls	r0, r1, #30
    ac0e:	d500      	bpl.n	ac12 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x9e2>
    ac10:	e0e0      	b.n	add4 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xba4>
            SSPI_MOSI_LOW();
    ac12:	6810      	ldr	r0, [r2, #0]
    ac14:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ac16:	43a8      	bics	r0, r5
    ac18:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ac1a:	6818      	ldr	r0, [r3, #0]
    ac1c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ac1e:	43a8      	bics	r0, r5
    ac20:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ac22:	6818      	ldr	r0, [r3, #0]
    ac24:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ac26:	4328      	orrs	r0, r5
    ac28:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    ac2a:	07c9      	lsls	r1, r1, #31
    ac2c:	d400      	bmi.n	ac30 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xa00>
    ac2e:	e0a9      	b.n	ad84 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xb54>
            SSPI_MOSI_HIGH();
    ac30:	6811      	ldr	r1, [r2, #0]
    ac32:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ac34:	4301      	orrs	r1, r0
    ac36:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    ac38:	681a      	ldr	r2, [r3, #0]
    ac3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    ac3c:	438a      	bics	r2, r1
    ac3e:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    ac40:	681a      	ldr	r2, [r3, #0]
    ac42:	6da1      	ldr	r1, [r4, #88]	; 0x58
    ac44:	430a      	orrs	r2, r1
    ac46:	601a      	str	r2, [r3, #0]
    SPI_DC_LOW();
    ac48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    ac4a:	6e22      	ldr	r2, [r4, #96]	; 0x60
    ac4c:	680b      	ldr	r3, [r1, #0]
    ac4e:	4393      	bics	r3, r2
    ac50:	600b      	str	r3, [r1, #0]
    if(_sclk < 0){
    ac52:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ac54:	2b00      	cmp	r3, #0
    ac56:	da00      	bge.n	ac5a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xa2a>
    ac58:	e1fb      	b.n	b052 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe22>
    ac5a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            SSPI_MOSI_LOW();
    ac5c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ac5e:	6810      	ldr	r0, [r2, #0]
    ac60:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ac62:	43a8      	bics	r0, r5
    ac64:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ac66:	6818      	ldr	r0, [r3, #0]
    ac68:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ac6a:	43a8      	bics	r0, r5
    ac6c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ac6e:	6818      	ldr	r0, [r3, #0]
    ac70:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ac72:	4328      	orrs	r0, r5
    ac74:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    ac76:	6810      	ldr	r0, [r2, #0]
    ac78:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ac7a:	43a8      	bics	r0, r5
    ac7c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ac7e:	6818      	ldr	r0, [r3, #0]
    ac80:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ac82:	43a8      	bics	r0, r5
    ac84:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ac86:	6818      	ldr	r0, [r3, #0]
    ac88:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ac8a:	4328      	orrs	r0, r5
    ac8c:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    ac8e:	6810      	ldr	r0, [r2, #0]
    ac90:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ac92:	4328      	orrs	r0, r5
    ac94:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ac96:	6818      	ldr	r0, [r3, #0]
    ac98:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ac9a:	43a8      	bics	r0, r5
    ac9c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ac9e:	6818      	ldr	r0, [r3, #0]
    aca0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    aca2:	4328      	orrs	r0, r5
    aca4:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    aca6:	6810      	ldr	r0, [r2, #0]
    aca8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    acaa:	43a8      	bics	r0, r5
    acac:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    acae:	6818      	ldr	r0, [r3, #0]
    acb0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    acb2:	43a8      	bics	r0, r5
    acb4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    acb6:	6818      	ldr	r0, [r3, #0]
    acb8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    acba:	4328      	orrs	r0, r5
    acbc:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    acbe:	6810      	ldr	r0, [r2, #0]
    acc0:	6d25      	ldr	r5, [r4, #80]	; 0x50
    acc2:	4328      	orrs	r0, r5
    acc4:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    acc6:	6818      	ldr	r0, [r3, #0]
    acc8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    acca:	43a8      	bics	r0, r5
    accc:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    acce:	6818      	ldr	r0, [r3, #0]
    acd0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    acd2:	4328      	orrs	r0, r5
    acd4:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_HIGH();
    acd6:	6810      	ldr	r0, [r2, #0]
    acd8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    acda:	4328      	orrs	r0, r5
    acdc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    acde:	6818      	ldr	r0, [r3, #0]
    ace0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ace2:	43a8      	bics	r0, r5
    ace4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ace6:	6818      	ldr	r0, [r3, #0]
    ace8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    acea:	4328      	orrs	r0, r5
    acec:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    acee:	6810      	ldr	r0, [r2, #0]
    acf0:	6d25      	ldr	r5, [r4, #80]	; 0x50
    acf2:	43a8      	bics	r0, r5
    acf4:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    acf6:	6818      	ldr	r0, [r3, #0]
    acf8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    acfa:	43a8      	bics	r0, r5
    acfc:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    acfe:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ad00:	6818      	ldr	r0, [r3, #0]
    ad02:	4328      	orrs	r0, r5
    ad04:	6018      	str	r0, [r3, #0]
            SSPI_MOSI_LOW();
    ad06:	6810      	ldr	r0, [r2, #0]
    ad08:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ad0a:	43a8      	bics	r0, r5
    ad0c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ad0e:	681a      	ldr	r2, [r3, #0]
    ad10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ad12:	4382      	bics	r2, r0
    ad14:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    ad16:	681a      	ldr	r2, [r3, #0]
    ad18:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ad1a:	4302      	orrs	r2, r0
    ad1c:	601a      	str	r2, [r3, #0]
    SPI_DC_HIGH();
    ad1e:	680b      	ldr	r3, [r1, #0]
    ad20:	6e22      	ldr	r2, [r4, #96]	; 0x60
    ad22:	4313      	orrs	r3, r2
    ad24:	600b      	str	r3, [r1, #0]
}
    ad26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            SSPI_MOSI_HIGH();
    ad28:	6810      	ldr	r0, [r2, #0]
    ad2a:	6d27      	ldr	r7, [r4, #80]	; 0x50
    ad2c:	4338      	orrs	r0, r7
    ad2e:	6010      	str	r0, [r2, #0]
    ad30:	f7ff fb0d 	bl	a34e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x11e>
            SSPI_MOSI_LOW();
    ad34:	6802      	ldr	r2, [r0, #0]
    ad36:	6d21      	ldr	r1, [r4, #80]	; 0x50
    ad38:	438a      	bics	r2, r1
    ad3a:	6002      	str	r2, [r0, #0]
    ad3c:	e5ff      	b.n	a93e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x70e>
            SSPI_MOSI_HIGH();
    ad3e:	6801      	ldr	r1, [r0, #0]
    ad40:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ad42:	4331      	orrs	r1, r6
    ad44:	6001      	str	r1, [r0, #0]
    ad46:	e5eb      	b.n	a920 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x6f0>
    ad48:	6801      	ldr	r1, [r0, #0]
    ad4a:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ad4c:	4331      	orrs	r1, r6
    ad4e:	6001      	str	r1, [r0, #0]
    ad50:	e5d7      	b.n	a902 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x6d2>
    ad52:	6801      	ldr	r1, [r0, #0]
    ad54:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ad56:	4331      	orrs	r1, r6
    ad58:	6001      	str	r1, [r0, #0]
    ad5a:	e5c3      	b.n	a8e4 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x6b4>
    ad5c:	6801      	ldr	r1, [r0, #0]
    ad5e:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ad60:	4331      	orrs	r1, r6
    ad62:	6001      	str	r1, [r0, #0]
    ad64:	e5af      	b.n	a8c6 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x696>
    ad66:	6801      	ldr	r1, [r0, #0]
    ad68:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ad6a:	4331      	orrs	r1, r6
    ad6c:	6001      	str	r1, [r0, #0]
    ad6e:	e59b      	b.n	a8a8 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x678>
    ad70:	6801      	ldr	r1, [r0, #0]
    ad72:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ad74:	4331      	orrs	r1, r6
    ad76:	6001      	str	r1, [r0, #0]
    ad78:	e587      	b.n	a88a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x65a>
    ad7a:	6801      	ldr	r1, [r0, #0]
    ad7c:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ad7e:	4331      	orrs	r1, r6
    ad80:	6001      	str	r1, [r0, #0]
    ad82:	e573      	b.n	a86c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x63c>
            SSPI_MOSI_LOW();
    ad84:	6811      	ldr	r1, [r2, #0]
    ad86:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ad88:	4381      	bics	r1, r0
    ad8a:	6011      	str	r1, [r2, #0]
    ad8c:	e754      	b.n	ac38 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xa08>
    ad8e:	6802      	ldr	r2, [r0, #0]
    ad90:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ad92:	43b2      	bics	r2, r6
    ad94:	6002      	str	r2, [r0, #0]
    ad96:	e5e7      	b.n	a968 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x738>
    ad98:	6802      	ldr	r2, [r0, #0]
    ad9a:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ad9c:	43b2      	bics	r2, r6
    ad9e:	6002      	str	r2, [r0, #0]
    ada0:	e600      	b.n	a9a4 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x774>
    ada2:	6802      	ldr	r2, [r0, #0]
    ada4:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ada6:	43b2      	bics	r2, r6
    ada8:	6002      	str	r2, [r0, #0]
    adaa:	e5ec      	b.n	a986 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x756>
    adac:	6802      	ldr	r2, [r0, #0]
    adae:	6d26      	ldr	r6, [r4, #80]	; 0x50
    adb0:	43b2      	bics	r2, r6
    adb2:	6002      	str	r2, [r0, #0]
    adb4:	e632      	b.n	aa1c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x7ec>
    adb6:	6802      	ldr	r2, [r0, #0]
    adb8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    adba:	43b2      	bics	r2, r6
    adbc:	6002      	str	r2, [r0, #0]
    adbe:	e61e      	b.n	a9fe <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x7ce>
    adc0:	6802      	ldr	r2, [r0, #0]
    adc2:	6d26      	ldr	r6, [r4, #80]	; 0x50
    adc4:	43b2      	bics	r2, r6
    adc6:	6002      	str	r2, [r0, #0]
    adc8:	e60a      	b.n	a9e0 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x7b0>
    adca:	6802      	ldr	r2, [r0, #0]
    adcc:	6d26      	ldr	r6, [r4, #80]	; 0x50
    adce:	43b2      	bics	r2, r6
    add0:	6002      	str	r2, [r0, #0]
    add2:	e5f6      	b.n	a9c2 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x792>
            SSPI_MOSI_HIGH();
    add4:	6810      	ldr	r0, [r2, #0]
    add6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    add8:	4328      	orrs	r0, r5
    adda:	6010      	str	r0, [r2, #0]
    addc:	e71d      	b.n	ac1a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x9ea>
    adde:	6810      	ldr	r0, [r2, #0]
    ade0:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ade2:	4328      	orrs	r0, r5
    ade4:	6010      	str	r0, [r2, #0]
    ade6:	e709      	b.n	abfc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x9cc>
    ade8:	6810      	ldr	r0, [r2, #0]
    adea:	6d25      	ldr	r5, [r4, #80]	; 0x50
    adec:	4328      	orrs	r0, r5
    adee:	6010      	str	r0, [r2, #0]
    adf0:	e6f5      	b.n	abde <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x9ae>
    adf2:	6810      	ldr	r0, [r2, #0]
    adf4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    adf6:	4328      	orrs	r0, r5
    adf8:	6010      	str	r0, [r2, #0]
    adfa:	e6e1      	b.n	abc0 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x990>
    adfc:	6810      	ldr	r0, [r2, #0]
    adfe:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ae00:	4328      	orrs	r0, r5
    ae02:	6010      	str	r0, [r2, #0]
    ae04:	e6cd      	b.n	aba2 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x972>
    ae06:	6810      	ldr	r0, [r2, #0]
    ae08:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ae0a:	4328      	orrs	r0, r5
    ae0c:	6010      	str	r0, [r2, #0]
    ae0e:	e6b9      	b.n	ab84 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x954>
    ae10:	6810      	ldr	r0, [r2, #0]
    ae12:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ae14:	4328      	orrs	r0, r5
    ae16:	6010      	str	r0, [r2, #0]
    ae18:	e6a5      	b.n	ab66 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x936>
            SSPI_MOSI_LOW();
    ae1a:	6811      	ldr	r1, [r2, #0]
    ae1c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ae1e:	4381      	bics	r1, r0
    ae20:	6011      	str	r1, [r2, #0]
    ae22:	e68a      	b.n	ab3a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x90a>
            SSPI_MOSI_HIGH();
    ae24:	6810      	ldr	r0, [r2, #0]
    ae26:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ae28:	4330      	orrs	r0, r6
    ae2a:	6010      	str	r0, [r2, #0]
    ae2c:	e676      	b.n	ab1c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x8ec>
    ae2e:	6810      	ldr	r0, [r2, #0]
    ae30:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ae32:	4330      	orrs	r0, r6
    ae34:	6010      	str	r0, [r2, #0]
    ae36:	e662      	b.n	aafe <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x8ce>
    ae38:	6810      	ldr	r0, [r2, #0]
    ae3a:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ae3c:	4330      	orrs	r0, r6
    ae3e:	6010      	str	r0, [r2, #0]
    ae40:	e64e      	b.n	aae0 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x8b0>
    ae42:	6810      	ldr	r0, [r2, #0]
    ae44:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ae46:	4330      	orrs	r0, r6
    ae48:	6010      	str	r0, [r2, #0]
    ae4a:	e63a      	b.n	aac2 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x892>
    ae4c:	6810      	ldr	r0, [r2, #0]
    ae4e:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ae50:	4330      	orrs	r0, r6
    ae52:	6010      	str	r0, [r2, #0]
    ae54:	e626      	b.n	aaa4 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x874>
    ae56:	6810      	ldr	r0, [r2, #0]
    ae58:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ae5a:	4330      	orrs	r0, r6
    ae5c:	6010      	str	r0, [r2, #0]
    ae5e:	e612      	b.n	aa86 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x856>
    ae60:	6810      	ldr	r0, [r2, #0]
    ae62:	6d26      	ldr	r6, [r4, #80]	; 0x50
    ae64:	4330      	orrs	r0, r6
    ae66:	6010      	str	r0, [r2, #0]
    ae68:	e5fe      	b.n	aa68 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x838>
            SSPI_MOSI_LOW();
    ae6a:	6802      	ldr	r2, [r0, #0]
    ae6c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    ae6e:	438a      	bics	r2, r1
    ae70:	6002      	str	r2, [r0, #0]
    ae72:	e5e2      	b.n	aa3a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x80a>
    ae74:	6811      	ldr	r1, [r2, #0]
    ae76:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ae78:	4381      	bics	r1, r0
    ae7a:	6011      	str	r1, [r2, #0]
    ae7c:	f7ff fad7 	bl	a42e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x1fe>
            SSPI_MOSI_HIGH();
    ae80:	6810      	ldr	r0, [r2, #0]
    ae82:	6d27      	ldr	r7, [r4, #80]	; 0x50
    ae84:	4338      	orrs	r0, r7
    ae86:	6010      	str	r0, [r2, #0]
    ae88:	f7ff fac1 	bl	a40e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x1de>
    ae8c:	6810      	ldr	r0, [r2, #0]
    ae8e:	6d27      	ldr	r7, [r4, #80]	; 0x50
    ae90:	4338      	orrs	r0, r7
    ae92:	6010      	str	r0, [r2, #0]
    ae94:	f7ff faab 	bl	a3ee <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x1be>
    ae98:	6810      	ldr	r0, [r2, #0]
    ae9a:	6d27      	ldr	r7, [r4, #80]	; 0x50
    ae9c:	4338      	orrs	r0, r7
    ae9e:	6010      	str	r0, [r2, #0]
    aea0:	f7ff fa95 	bl	a3ce <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x19e>
    aea4:	6810      	ldr	r0, [r2, #0]
    aea6:	6d27      	ldr	r7, [r4, #80]	; 0x50
    aea8:	4338      	orrs	r0, r7
    aeaa:	6010      	str	r0, [r2, #0]
    aeac:	f7ff fa7f 	bl	a3ae <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x17e>
    aeb0:	6810      	ldr	r0, [r2, #0]
    aeb2:	6d27      	ldr	r7, [r4, #80]	; 0x50
    aeb4:	4338      	orrs	r0, r7
    aeb6:	6010      	str	r0, [r2, #0]
    aeb8:	f7ff fa69 	bl	a38e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x15e>
    aebc:	6810      	ldr	r0, [r2, #0]
    aebe:	6d27      	ldr	r7, [r4, #80]	; 0x50
    aec0:	4338      	orrs	r0, r7
    aec2:	6010      	str	r0, [r2, #0]
    aec4:	f7ff fa53 	bl	a36e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x13e>
            SSPI_MOSI_LOW();
    aec8:	6811      	ldr	r1, [r2, #0]
    aeca:	6d20      	ldr	r0, [r4, #80]	; 0x50
    aecc:	4381      	bics	r1, r0
    aece:	6011      	str	r1, [r2, #0]
    aed0:	e444      	b.n	a75c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x52c>
    aed2:	6810      	ldr	r0, [r2, #0]
    aed4:	6d27      	ldr	r7, [r4, #80]	; 0x50
    aed6:	43b8      	bics	r0, r7
    aed8:	6010      	str	r0, [r2, #0]
    aeda:	f7ff fabf 	bl	a45c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x22c>
    aede:	6810      	ldr	r0, [r2, #0]
    aee0:	6d27      	ldr	r7, [r4, #80]	; 0x50
    aee2:	43b8      	bics	r0, r7
    aee4:	6010      	str	r0, [r2, #0]
    aee6:	f7ff fad9 	bl	a49c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x26c>
    aeea:	6810      	ldr	r0, [r2, #0]
    aeec:	6d27      	ldr	r7, [r4, #80]	; 0x50
    aeee:	43b8      	bics	r0, r7
    aef0:	6010      	str	r0, [r2, #0]
    aef2:	f7ff fac3 	bl	a47c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x24c>
    aef6:	6810      	ldr	r0, [r2, #0]
    aef8:	6d27      	ldr	r7, [r4, #80]	; 0x50
    aefa:	43b8      	bics	r0, r7
    aefc:	6010      	str	r0, [r2, #0]
    aefe:	f7ff fb0d 	bl	a51c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x2ec>
    af02:	6810      	ldr	r0, [r2, #0]
    af04:	6d27      	ldr	r7, [r4, #80]	; 0x50
    af06:	43b8      	bics	r0, r7
    af08:	6010      	str	r0, [r2, #0]
    af0a:	f7ff faf7 	bl	a4fc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x2cc>
    af0e:	6810      	ldr	r0, [r2, #0]
    af10:	6d27      	ldr	r7, [r4, #80]	; 0x50
    af12:	43b8      	bics	r0, r7
    af14:	6010      	str	r0, [r2, #0]
    af16:	f7ff fae1 	bl	a4dc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x2ac>
    af1a:	6810      	ldr	r0, [r2, #0]
    af1c:	6d27      	ldr	r7, [r4, #80]	; 0x50
    af1e:	43b8      	bics	r0, r7
    af20:	6010      	str	r0, [r2, #0]
    af22:	f7ff facb 	bl	a4bc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x28c>
            SSPI_MOSI_HIGH();
    af26:	6810      	ldr	r0, [r2, #0]
    af28:	6d26      	ldr	r6, [r4, #80]	; 0x50
    af2a:	4330      	orrs	r0, r6
    af2c:	6010      	str	r0, [r2, #0]
    af2e:	f7ff fc06 	bl	a73e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x50e>
    af32:	6810      	ldr	r0, [r2, #0]
    af34:	6d26      	ldr	r6, [r4, #80]	; 0x50
    af36:	4330      	orrs	r0, r6
    af38:	6010      	str	r0, [r2, #0]
    af3a:	f7ff fbf0 	bl	a71e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x4ee>
    af3e:	6810      	ldr	r0, [r2, #0]
    af40:	6d26      	ldr	r6, [r4, #80]	; 0x50
    af42:	4330      	orrs	r0, r6
    af44:	6010      	str	r0, [r2, #0]
    af46:	f7ff fbda 	bl	a6fe <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x4ce>
    af4a:	6810      	ldr	r0, [r2, #0]
    af4c:	6d26      	ldr	r6, [r4, #80]	; 0x50
    af4e:	4330      	orrs	r0, r6
    af50:	6010      	str	r0, [r2, #0]
    af52:	f7ff fbc4 	bl	a6de <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x4ae>
    af56:	6810      	ldr	r0, [r2, #0]
    af58:	6d26      	ldr	r6, [r4, #80]	; 0x50
    af5a:	4330      	orrs	r0, r6
    af5c:	6010      	str	r0, [r2, #0]
    af5e:	f7ff fbae 	bl	a6be <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x48e>
    af62:	6810      	ldr	r0, [r2, #0]
    af64:	6d26      	ldr	r6, [r4, #80]	; 0x50
    af66:	4330      	orrs	r0, r6
    af68:	6010      	str	r0, [r2, #0]
    af6a:	f7ff fb98 	bl	a69e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x46e>
    af6e:	6810      	ldr	r0, [r2, #0]
    af70:	6d26      	ldr	r6, [r4, #80]	; 0x50
    af72:	4330      	orrs	r0, r6
    af74:	6010      	str	r0, [r2, #0]
    af76:	f7ff fb82 	bl	a67e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x44e>
            SSPI_MOSI_LOW();
    af7a:	6811      	ldr	r1, [r2, #0]
    af7c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    af7e:	4381      	bics	r1, r0
    af80:	6011      	str	r1, [r2, #0]
    af82:	f7ff fb64 	bl	a64e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x41e>
            SSPI_MOSI_HIGH();
    af86:	6810      	ldr	r0, [r2, #0]
    af88:	6d27      	ldr	r7, [r4, #80]	; 0x50
    af8a:	4338      	orrs	r0, r7
    af8c:	6010      	str	r0, [r2, #0]
    af8e:	f7ff fb4e 	bl	a62e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x3fe>
    af92:	6810      	ldr	r0, [r2, #0]
    af94:	6d27      	ldr	r7, [r4, #80]	; 0x50
    af96:	4338      	orrs	r0, r7
    af98:	6010      	str	r0, [r2, #0]
    af9a:	f7ff fb38 	bl	a60e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x3de>
    af9e:	6810      	ldr	r0, [r2, #0]
    afa0:	6d27      	ldr	r7, [r4, #80]	; 0x50
    afa2:	4338      	orrs	r0, r7
    afa4:	6010      	str	r0, [r2, #0]
    afa6:	f7ff fb22 	bl	a5ee <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x3be>
    afaa:	6810      	ldr	r0, [r2, #0]
    afac:	6d27      	ldr	r7, [r4, #80]	; 0x50
    afae:	4338      	orrs	r0, r7
    afb0:	6010      	str	r0, [r2, #0]
    afb2:	f7ff fb0c 	bl	a5ce <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x39e>
    afb6:	6810      	ldr	r0, [r2, #0]
    afb8:	6d27      	ldr	r7, [r4, #80]	; 0x50
    afba:	4338      	orrs	r0, r7
    afbc:	6010      	str	r0, [r2, #0]
    afbe:	f7ff faf6 	bl	a5ae <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x37e>
    afc2:	6810      	ldr	r0, [r2, #0]
    afc4:	6d27      	ldr	r7, [r4, #80]	; 0x50
    afc6:	4338      	orrs	r0, r7
    afc8:	6010      	str	r0, [r2, #0]
    afca:	f7ff fae0 	bl	a58e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x35e>
    afce:	6810      	ldr	r0, [r2, #0]
    afd0:	6d27      	ldr	r7, [r4, #80]	; 0x50
    afd2:	4338      	orrs	r0, r7
    afd4:	6010      	str	r0, [r2, #0]
    afd6:	f7ff faca 	bl	a56e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x33e>
            SSPI_MOSI_LOW();
    afda:	6811      	ldr	r1, [r2, #0]
    afdc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    afde:	4381      	bics	r1, r0
    afe0:	6011      	str	r1, [r2, #0]
    afe2:	f7ff faab 	bl	a53c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x30c>
    SPI_WRITE32(xa);
    afe6:	4f2b      	ldr	r7, [pc, #172]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    afe8:	0e31      	lsrs	r1, r6, #24
    afea:	0038      	movs	r0, r7
    afec:	f003 fcbc 	bl	e968 <_ZN8SPIClass8transferEh>
    aff0:	0c31      	lsrs	r1, r6, #16
    aff2:	b2c9      	uxtb	r1, r1
    aff4:	0038      	movs	r0, r7
    aff6:	f003 fcb7 	bl	e968 <_ZN8SPIClass8transferEh>
    affa:	0a31      	lsrs	r1, r6, #8
    affc:	b2c9      	uxtb	r1, r1
    affe:	0038      	movs	r0, r7
    b000:	f003 fcb2 	bl	e968 <_ZN8SPIClass8transferEh>
    b004:	b2f1      	uxtb	r1, r6
    b006:	0038      	movs	r0, r7
    b008:	f003 fcae 	bl	e968 <_ZN8SPIClass8transferEh>
    b00c:	f7ff fbae 	bl	a76c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x53c>
    SPI_WRITE32(ya);
    b010:	4e20      	ldr	r6, [pc, #128]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    b012:	0030      	movs	r0, r6
    b014:	f003 fca8 	bl	e968 <_ZN8SPIClass8transferEh>
    b018:	0c29      	lsrs	r1, r5, #16
    b01a:	b2c9      	uxtb	r1, r1
    b01c:	0030      	movs	r0, r6
    b01e:	f003 fca3 	bl	e968 <_ZN8SPIClass8transferEh>
    b022:	0a29      	lsrs	r1, r5, #8
    b024:	b2c9      	uxtb	r1, r1
    b026:	0030      	movs	r0, r6
    b028:	f003 fc9e 	bl	e968 <_ZN8SPIClass8transferEh>
    b02c:	b2e9      	uxtb	r1, r5
    b02e:	0030      	movs	r0, r6
    b030:	f003 fc9a 	bl	e968 <_ZN8SPIClass8transferEh>
    b034:	e608      	b.n	ac48 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xa18>
        HSPI_WRITE(b);
    b036:	212b      	movs	r1, #43	; 0x2b
    b038:	4816      	ldr	r0, [pc, #88]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    b03a:	f003 fc95 	bl	e968 <_ZN8SPIClass8transferEh>
    b03e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    b040:	f7ff fc00 	bl	a844 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x614>
    b044:	212a      	movs	r1, #42	; 0x2a
    b046:	4813      	ldr	r0, [pc, #76]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    b048:	f003 fc8e 	bl	e968 <_ZN8SPIClass8transferEh>
    b04c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    b04e:	f7ff f968 	bl	a322 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xf2>
    b052:	212c      	movs	r1, #44	; 0x2c
    b054:	480f      	ldr	r0, [pc, #60]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    b056:	f003 fc87 	bl	e968 <_ZN8SPIClass8transferEh>
    b05a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    b05c:	e65f      	b.n	ad1e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xaee>
    b05e:	480d      	ldr	r0, [pc, #52]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    b060:	f003 fc82 	bl	e968 <_ZN8SPIClass8transferEh>
    b064:	e5f0      	b.n	ac48 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xa18>
    b066:	480b      	ldr	r0, [pc, #44]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    b068:	f003 fc7e 	bl	e968 <_ZN8SPIClass8transferEh>
    b06c:	e56d      	b.n	ab4a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x91a>
    b06e:	4809      	ldr	r0, [pc, #36]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    b070:	f003 fc7a 	bl	e968 <_ZN8SPIClass8transferEh>
    b074:	e4e9      	b.n	aa4a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x81a>
    b076:	4807      	ldr	r0, [pc, #28]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    b078:	f003 fc76 	bl	e968 <_ZN8SPIClass8transferEh>
    b07c:	f7ff fa66 	bl	a54c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x31c>
    b080:	4804      	ldr	r0, [pc, #16]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    b082:	f003 fc71 	bl	e968 <_ZN8SPIClass8transferEh>
    b086:	f7ff fb71 	bl	a76c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x53c>
    b08a:	4802      	ldr	r0, [pc, #8]	; (b094 <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xe64>)
    b08c:	f003 fc6c 	bl	e968 <_ZN8SPIClass8transferEh>
    b090:	f7ff fae5 	bl	a65e <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x42e>
    b094:	20000a0c 	.word	0x20000a0c

0000b098 <_ZN16Adafruit_ILI934110writePixelEsst>:
void Adafruit_ILI9341::writePixel(int16_t x, int16_t y, uint16_t color) {
    b098:	b570      	push	{r4, r5, r6, lr}
    b09a:	0004      	movs	r4, r0
    b09c:	b082      	sub	sp, #8
    b09e:	001d      	movs	r5, r3
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    b0a0:	2900      	cmp	r1, #0
    b0a2:	db09      	blt.n	b0b8 <_ZN16Adafruit_ILI934110writePixelEsst+0x20>
    b0a4:	200c      	movs	r0, #12
    b0a6:	5e23      	ldrsh	r3, [r4, r0]
    b0a8:	428b      	cmp	r3, r1
    b0aa:	dd05      	ble.n	b0b8 <_ZN16Adafruit_ILI934110writePixelEsst+0x20>
    b0ac:	2a00      	cmp	r2, #0
    b0ae:	db03      	blt.n	b0b8 <_ZN16Adafruit_ILI934110writePixelEsst+0x20>
    b0b0:	200e      	movs	r0, #14
    b0b2:	5e23      	ldrsh	r3, [r4, r0]
    b0b4:	4293      	cmp	r3, r2
    b0b6:	dc01      	bgt.n	b0bc <_ZN16Adafruit_ILI934110writePixelEsst+0x24>
}
    b0b8:	b002      	add	sp, #8
    b0ba:	bd70      	pop	{r4, r5, r6, pc}
    setAddrWindow(x,y,1,1);
    b0bc:	2301      	movs	r3, #1
    b0be:	b292      	uxth	r2, r2
    b0c0:	9300      	str	r3, [sp, #0]
    b0c2:	b289      	uxth	r1, r1
    b0c4:	0020      	movs	r0, r4
    b0c6:	f7ff f8b3 	bl	a230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    SPI_WRITE16(color);
    b0ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b0cc:	2b00      	cmp	r3, #0
    b0ce:	da00      	bge.n	b0d2 <_ZN16Adafruit_ILI934110writePixelEsst+0x3a>
    b0d0:	e145      	b.n	b35e <_ZN16Adafruit_ILI934110writePixelEsst+0x2c6>
    b0d2:	1228      	asrs	r0, r5, #8
    b0d4:	b2c1      	uxtb	r1, r0
        if((b) & bit){
    b0d6:	b240      	sxtb	r0, r0
    b0d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b0da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    b0dc:	2800      	cmp	r0, #0
    b0de:	da00      	bge.n	b0e2 <_ZN16Adafruit_ILI934110writePixelEsst+0x4a>
    b0e0:	e0ed      	b.n	b2be <_ZN16Adafruit_ILI934110writePixelEsst+0x226>
            SSPI_MOSI_LOW();
    b0e2:	6810      	ldr	r0, [r2, #0]
    b0e4:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b0e6:	43b0      	bics	r0, r6
    b0e8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b0ea:	6818      	ldr	r0, [r3, #0]
    b0ec:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b0ee:	43b0      	bics	r0, r6
    b0f0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b0f2:	6818      	ldr	r0, [r3, #0]
    b0f4:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b0f6:	4330      	orrs	r0, r6
    b0f8:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b0fa:	0648      	lsls	r0, r1, #25
    b0fc:	d500      	bpl.n	b100 <_ZN16Adafruit_ILI934110writePixelEsst+0x68>
    b0fe:	e101      	b.n	b304 <_ZN16Adafruit_ILI934110writePixelEsst+0x26c>
            SSPI_MOSI_LOW();
    b100:	6810      	ldr	r0, [r2, #0]
    b102:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b104:	43b0      	bics	r0, r6
    b106:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b108:	6818      	ldr	r0, [r3, #0]
    b10a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b10c:	43b0      	bics	r0, r6
    b10e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b110:	6818      	ldr	r0, [r3, #0]
    b112:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b114:	4330      	orrs	r0, r6
    b116:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b118:	0688      	lsls	r0, r1, #26
    b11a:	d500      	bpl.n	b11e <_ZN16Adafruit_ILI934110writePixelEsst+0x86>
    b11c:	e0ed      	b.n	b2fa <_ZN16Adafruit_ILI934110writePixelEsst+0x262>
            SSPI_MOSI_LOW();
    b11e:	6810      	ldr	r0, [r2, #0]
    b120:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b122:	43b0      	bics	r0, r6
    b124:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b126:	6818      	ldr	r0, [r3, #0]
    b128:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b12a:	43b0      	bics	r0, r6
    b12c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b12e:	6818      	ldr	r0, [r3, #0]
    b130:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b132:	4330      	orrs	r0, r6
    b134:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b136:	06c8      	lsls	r0, r1, #27
    b138:	d500      	bpl.n	b13c <_ZN16Adafruit_ILI934110writePixelEsst+0xa4>
    b13a:	e0d9      	b.n	b2f0 <_ZN16Adafruit_ILI934110writePixelEsst+0x258>
            SSPI_MOSI_LOW();
    b13c:	6810      	ldr	r0, [r2, #0]
    b13e:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b140:	43b0      	bics	r0, r6
    b142:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b144:	6818      	ldr	r0, [r3, #0]
    b146:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b148:	43b0      	bics	r0, r6
    b14a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b14c:	6818      	ldr	r0, [r3, #0]
    b14e:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b150:	4330      	orrs	r0, r6
    b152:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b154:	0708      	lsls	r0, r1, #28
    b156:	d500      	bpl.n	b15a <_ZN16Adafruit_ILI934110writePixelEsst+0xc2>
    b158:	e0c5      	b.n	b2e6 <_ZN16Adafruit_ILI934110writePixelEsst+0x24e>
            SSPI_MOSI_LOW();
    b15a:	6810      	ldr	r0, [r2, #0]
    b15c:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b15e:	43b0      	bics	r0, r6
    b160:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b162:	6818      	ldr	r0, [r3, #0]
    b164:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b166:	43b0      	bics	r0, r6
    b168:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b16a:	6818      	ldr	r0, [r3, #0]
    b16c:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b16e:	4330      	orrs	r0, r6
    b170:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b172:	0748      	lsls	r0, r1, #29
    b174:	d500      	bpl.n	b178 <_ZN16Adafruit_ILI934110writePixelEsst+0xe0>
    b176:	e0b1      	b.n	b2dc <_ZN16Adafruit_ILI934110writePixelEsst+0x244>
            SSPI_MOSI_LOW();
    b178:	6810      	ldr	r0, [r2, #0]
    b17a:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b17c:	43b0      	bics	r0, r6
    b17e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b180:	6818      	ldr	r0, [r3, #0]
    b182:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b184:	43b0      	bics	r0, r6
    b186:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b188:	6818      	ldr	r0, [r3, #0]
    b18a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b18c:	4330      	orrs	r0, r6
    b18e:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b190:	0788      	lsls	r0, r1, #30
    b192:	d500      	bpl.n	b196 <_ZN16Adafruit_ILI934110writePixelEsst+0xfe>
    b194:	e09d      	b.n	b2d2 <_ZN16Adafruit_ILI934110writePixelEsst+0x23a>
            SSPI_MOSI_LOW();
    b196:	6810      	ldr	r0, [r2, #0]
    b198:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b19a:	43b0      	bics	r0, r6
    b19c:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b19e:	6818      	ldr	r0, [r3, #0]
    b1a0:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b1a2:	43b0      	bics	r0, r6
    b1a4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b1a6:	6818      	ldr	r0, [r3, #0]
    b1a8:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b1aa:	4330      	orrs	r0, r6
    b1ac:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b1ae:	07c9      	lsls	r1, r1, #31
    b1b0:	d400      	bmi.n	b1b4 <_ZN16Adafruit_ILI934110writePixelEsst+0x11c>
    b1b2:	e089      	b.n	b2c8 <_ZN16Adafruit_ILI934110writePixelEsst+0x230>
            SSPI_MOSI_HIGH();
    b1b4:	6811      	ldr	r1, [r2, #0]
    b1b6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b1b8:	4301      	orrs	r1, r0
    b1ba:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b1bc:	6819      	ldr	r1, [r3, #0]
    b1be:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b1c0:	4381      	bics	r1, r0
    b1c2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b1c6:	6819      	ldr	r1, [r3, #0]
    b1c8:	4301      	orrs	r1, r0
    b1ca:	6019      	str	r1, [r3, #0]
    if(_sclk < 0){
    b1cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    SPI_WRITE16(color);
    b1ce:	b2e9      	uxtb	r1, r5
    if(_sclk < 0){
    b1d0:	2800      	cmp	r0, #0
    b1d2:	da00      	bge.n	b1d6 <_ZN16Adafruit_ILI934110writePixelEsst+0x13e>
    b1d4:	e0cd      	b.n	b372 <_ZN16Adafruit_ILI934110writePixelEsst+0x2da>
        if((b) & bit){
    b1d6:	0628      	lsls	r0, r5, #24
    b1d8:	d400      	bmi.n	b1dc <_ZN16Adafruit_ILI934110writePixelEsst+0x144>
    b1da:	e0bb      	b.n	b354 <_ZN16Adafruit_ILI934110writePixelEsst+0x2bc>
            SSPI_MOSI_HIGH();
    b1dc:	6810      	ldr	r0, [r2, #0]
    b1de:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b1e0:	4328      	orrs	r0, r5
    b1e2:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b1e4:	6818      	ldr	r0, [r3, #0]
    b1e6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b1e8:	43a8      	bics	r0, r5
    b1ea:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b1ec:	6818      	ldr	r0, [r3, #0]
    b1ee:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b1f0:	4328      	orrs	r0, r5
    b1f2:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b1f4:	0648      	lsls	r0, r1, #25
    b1f6:	d400      	bmi.n	b1fa <_ZN16Adafruit_ILI934110writePixelEsst+0x162>
    b1f8:	e098      	b.n	b32c <_ZN16Adafruit_ILI934110writePixelEsst+0x294>
            SSPI_MOSI_HIGH();
    b1fa:	6810      	ldr	r0, [r2, #0]
    b1fc:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b1fe:	4328      	orrs	r0, r5
    b200:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b202:	6818      	ldr	r0, [r3, #0]
    b204:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b206:	43a8      	bics	r0, r5
    b208:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b20a:	6818      	ldr	r0, [r3, #0]
    b20c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b20e:	4328      	orrs	r0, r5
    b210:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b212:	0688      	lsls	r0, r1, #26
    b214:	d400      	bmi.n	b218 <_ZN16Adafruit_ILI934110writePixelEsst+0x180>
    b216:	e084      	b.n	b322 <_ZN16Adafruit_ILI934110writePixelEsst+0x28a>
            SSPI_MOSI_HIGH();
    b218:	6810      	ldr	r0, [r2, #0]
    b21a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b21c:	4328      	orrs	r0, r5
    b21e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b220:	6818      	ldr	r0, [r3, #0]
    b222:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b224:	43a8      	bics	r0, r5
    b226:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b228:	6818      	ldr	r0, [r3, #0]
    b22a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b22c:	4328      	orrs	r0, r5
    b22e:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b230:	06c8      	lsls	r0, r1, #27
    b232:	d571      	bpl.n	b318 <_ZN16Adafruit_ILI934110writePixelEsst+0x280>
            SSPI_MOSI_HIGH();
    b234:	6810      	ldr	r0, [r2, #0]
    b236:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b238:	4328      	orrs	r0, r5
    b23a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b23c:	6818      	ldr	r0, [r3, #0]
    b23e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b240:	43a8      	bics	r0, r5
    b242:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b244:	6818      	ldr	r0, [r3, #0]
    b246:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b248:	4328      	orrs	r0, r5
    b24a:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b24c:	0708      	lsls	r0, r1, #28
    b24e:	d55e      	bpl.n	b30e <_ZN16Adafruit_ILI934110writePixelEsst+0x276>
            SSPI_MOSI_HIGH();
    b250:	6810      	ldr	r0, [r2, #0]
    b252:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b254:	4328      	orrs	r0, r5
    b256:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b258:	6818      	ldr	r0, [r3, #0]
    b25a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b25c:	43a8      	bics	r0, r5
    b25e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b260:	6818      	ldr	r0, [r3, #0]
    b262:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b264:	4328      	orrs	r0, r5
    b266:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b268:	0748      	lsls	r0, r1, #29
    b26a:	d569      	bpl.n	b340 <_ZN16Adafruit_ILI934110writePixelEsst+0x2a8>
            SSPI_MOSI_HIGH();
    b26c:	6810      	ldr	r0, [r2, #0]
    b26e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b270:	4328      	orrs	r0, r5
    b272:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b274:	6818      	ldr	r0, [r3, #0]
    b276:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b278:	43a8      	bics	r0, r5
    b27a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b27c:	6818      	ldr	r0, [r3, #0]
    b27e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b280:	4328      	orrs	r0, r5
    b282:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b284:	0788      	lsls	r0, r1, #30
    b286:	d556      	bpl.n	b336 <_ZN16Adafruit_ILI934110writePixelEsst+0x29e>
            SSPI_MOSI_HIGH();
    b288:	6810      	ldr	r0, [r2, #0]
    b28a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b28c:	4328      	orrs	r0, r5
    b28e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b290:	6818      	ldr	r0, [r3, #0]
    b292:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b294:	43a8      	bics	r0, r5
    b296:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b298:	6818      	ldr	r0, [r3, #0]
    b29a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b29c:	4328      	orrs	r0, r5
    b29e:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b2a0:	07c9      	lsls	r1, r1, #31
    b2a2:	d552      	bpl.n	b34a <_ZN16Adafruit_ILI934110writePixelEsst+0x2b2>
            SSPI_MOSI_HIGH();
    b2a4:	6811      	ldr	r1, [r2, #0]
    b2a6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b2a8:	4301      	orrs	r1, r0
    b2aa:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b2ac:	681a      	ldr	r2, [r3, #0]
    b2ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
    b2b0:	438a      	bics	r2, r1
    b2b2:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    b2b4:	681a      	ldr	r2, [r3, #0]
    b2b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    b2b8:	430a      	orrs	r2, r1
    b2ba:	601a      	str	r2, [r3, #0]
    b2bc:	e6fc      	b.n	b0b8 <_ZN16Adafruit_ILI934110writePixelEsst+0x20>
            SSPI_MOSI_HIGH();
    b2be:	6810      	ldr	r0, [r2, #0]
    b2c0:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b2c2:	4330      	orrs	r0, r6
    b2c4:	6010      	str	r0, [r2, #0]
    b2c6:	e710      	b.n	b0ea <_ZN16Adafruit_ILI934110writePixelEsst+0x52>
            SSPI_MOSI_LOW();
    b2c8:	6811      	ldr	r1, [r2, #0]
    b2ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b2cc:	4381      	bics	r1, r0
    b2ce:	6011      	str	r1, [r2, #0]
    b2d0:	e774      	b.n	b1bc <_ZN16Adafruit_ILI934110writePixelEsst+0x124>
            SSPI_MOSI_HIGH();
    b2d2:	6810      	ldr	r0, [r2, #0]
    b2d4:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b2d6:	4330      	orrs	r0, r6
    b2d8:	6010      	str	r0, [r2, #0]
    b2da:	e760      	b.n	b19e <_ZN16Adafruit_ILI934110writePixelEsst+0x106>
    b2dc:	6810      	ldr	r0, [r2, #0]
    b2de:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b2e0:	4330      	orrs	r0, r6
    b2e2:	6010      	str	r0, [r2, #0]
    b2e4:	e74c      	b.n	b180 <_ZN16Adafruit_ILI934110writePixelEsst+0xe8>
    b2e6:	6810      	ldr	r0, [r2, #0]
    b2e8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b2ea:	4330      	orrs	r0, r6
    b2ec:	6010      	str	r0, [r2, #0]
    b2ee:	e738      	b.n	b162 <_ZN16Adafruit_ILI934110writePixelEsst+0xca>
    b2f0:	6810      	ldr	r0, [r2, #0]
    b2f2:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b2f4:	4330      	orrs	r0, r6
    b2f6:	6010      	str	r0, [r2, #0]
    b2f8:	e724      	b.n	b144 <_ZN16Adafruit_ILI934110writePixelEsst+0xac>
    b2fa:	6810      	ldr	r0, [r2, #0]
    b2fc:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b2fe:	4330      	orrs	r0, r6
    b300:	6010      	str	r0, [r2, #0]
    b302:	e710      	b.n	b126 <_ZN16Adafruit_ILI934110writePixelEsst+0x8e>
    b304:	6810      	ldr	r0, [r2, #0]
    b306:	6d26      	ldr	r6, [r4, #80]	; 0x50
    b308:	4330      	orrs	r0, r6
    b30a:	6010      	str	r0, [r2, #0]
    b30c:	e6fc      	b.n	b108 <_ZN16Adafruit_ILI934110writePixelEsst+0x70>
            SSPI_MOSI_LOW();
    b30e:	6810      	ldr	r0, [r2, #0]
    b310:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b312:	43a8      	bics	r0, r5
    b314:	6010      	str	r0, [r2, #0]
    b316:	e79f      	b.n	b258 <_ZN16Adafruit_ILI934110writePixelEsst+0x1c0>
    b318:	6810      	ldr	r0, [r2, #0]
    b31a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b31c:	43a8      	bics	r0, r5
    b31e:	6010      	str	r0, [r2, #0]
    b320:	e78c      	b.n	b23c <_ZN16Adafruit_ILI934110writePixelEsst+0x1a4>
    b322:	6810      	ldr	r0, [r2, #0]
    b324:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b326:	43a8      	bics	r0, r5
    b328:	6010      	str	r0, [r2, #0]
    b32a:	e779      	b.n	b220 <_ZN16Adafruit_ILI934110writePixelEsst+0x188>
    b32c:	6810      	ldr	r0, [r2, #0]
    b32e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b330:	43a8      	bics	r0, r5
    b332:	6010      	str	r0, [r2, #0]
    b334:	e765      	b.n	b202 <_ZN16Adafruit_ILI934110writePixelEsst+0x16a>
    b336:	6810      	ldr	r0, [r2, #0]
    b338:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b33a:	43a8      	bics	r0, r5
    b33c:	6010      	str	r0, [r2, #0]
    b33e:	e7a7      	b.n	b290 <_ZN16Adafruit_ILI934110writePixelEsst+0x1f8>
    b340:	6810      	ldr	r0, [r2, #0]
    b342:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b344:	43a8      	bics	r0, r5
    b346:	6010      	str	r0, [r2, #0]
    b348:	e794      	b.n	b274 <_ZN16Adafruit_ILI934110writePixelEsst+0x1dc>
    b34a:	6811      	ldr	r1, [r2, #0]
    b34c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b34e:	4381      	bics	r1, r0
    b350:	6011      	str	r1, [r2, #0]
    b352:	e7ab      	b.n	b2ac <_ZN16Adafruit_ILI934110writePixelEsst+0x214>
    b354:	6810      	ldr	r0, [r2, #0]
    b356:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b358:	43a8      	bics	r0, r5
    b35a:	6010      	str	r0, [r2, #0]
    b35c:	e742      	b.n	b1e4 <_ZN16Adafruit_ILI934110writePixelEsst+0x14c>
    SPI_WRITE16(color);
    b35e:	4c07      	ldr	r4, [pc, #28]	; (b37c <_ZN16Adafruit_ILI934110writePixelEsst+0x2e4>)
    b360:	0a29      	lsrs	r1, r5, #8
    b362:	0020      	movs	r0, r4
    b364:	f003 fb00 	bl	e968 <_ZN8SPIClass8transferEh>
    b368:	b2e9      	uxtb	r1, r5
    b36a:	0020      	movs	r0, r4
    b36c:	f003 fafc 	bl	e968 <_ZN8SPIClass8transferEh>
    b370:	e6a2      	b.n	b0b8 <_ZN16Adafruit_ILI934110writePixelEsst+0x20>
        HSPI_WRITE(b);
    b372:	4802      	ldr	r0, [pc, #8]	; (b37c <_ZN16Adafruit_ILI934110writePixelEsst+0x2e4>)
    b374:	f003 faf8 	bl	e968 <_ZN8SPIClass8transferEh>
    b378:	e69e      	b.n	b0b8 <_ZN16Adafruit_ILI934110writePixelEsst+0x20>
    b37a:	46c0      	nop			; (mov r8, r8)
    b37c:	20000a0c 	.word	0x20000a0c

0000b380 <_ZN16Adafruit_ILI934113writeFillRectEsssst>:
void Adafruit_ILI9341::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
    b380:	b5f0      	push	{r4, r5, r6, r7, lr}
    b382:	46de      	mov	lr, fp
    b384:	464e      	mov	r6, r9
    b386:	4645      	mov	r5, r8
    b388:	4657      	mov	r7, sl
    b38a:	b5e0      	push	{r5, r6, r7, lr}
    b38c:	0006      	movs	r6, r0
    if((x >= _width) || (y >= _height)) return;
    b38e:	0034      	movs	r4, r6
void Adafruit_ILI9341::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
    b390:	b091      	sub	sp, #68	; 0x44
    b392:	900d      	str	r0, [sp, #52]	; 0x34
    b394:	a81a      	add	r0, sp, #104	; 0x68
    b396:	2500      	movs	r5, #0
    b398:	5f45      	ldrsh	r5, [r0, r5]
    b39a:	a81b      	add	r0, sp, #108	; 0x6c
    b39c:	8800      	ldrh	r0, [r0, #0]
    b39e:	4683      	mov	fp, r0
    if((x >= _width) || (y >= _height)) return;
    b3a0:	200c      	movs	r0, #12
    b3a2:	5e20      	ldrsh	r0, [r4, r0]
    b3a4:	4288      	cmp	r0, r1
    b3a6:	dc00      	bgt.n	b3aa <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x2a>
    b3a8:	e1ad      	b.n	b706 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x386>
    b3aa:	0034      	movs	r4, r6
    b3ac:	260e      	movs	r6, #14
    b3ae:	5fa6      	ldrsh	r6, [r4, r6]
    b3b0:	4296      	cmp	r6, r2
    b3b2:	dc00      	bgt.n	b3b6 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x36>
    b3b4:	e1a7      	b.n	b706 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x386>
    int16_t x2 = x + w - 1, y2 = y + h - 1;
    b3b6:	b28c      	uxth	r4, r1
    b3b8:	18e7      	adds	r7, r4, r3
    b3ba:	46a1      	mov	r9, r4
    b3bc:	b2bc      	uxth	r4, r7
    b3be:	1e67      	subs	r7, r4, #1
    b3c0:	9404      	str	r4, [sp, #16]
    b3c2:	b23c      	sxth	r4, r7
    b3c4:	9402      	str	r4, [sp, #8]
    b3c6:	b294      	uxth	r4, r2
    b3c8:	46a2      	mov	sl, r4
    b3ca:	46a8      	mov	r8, r5
    b3cc:	44d0      	add	r8, sl
    b3ce:	4644      	mov	r4, r8
    b3d0:	466f      	mov	r7, sp
    b3d2:	81bc      	strh	r4, [r7, #12]
    b3d4:	89bc      	ldrh	r4, [r7, #12]
    b3d6:	46a0      	mov	r8, r4
    b3d8:	2401      	movs	r4, #1
    b3da:	4264      	negs	r4, r4
    b3dc:	4444      	add	r4, r8
    b3de:	b224      	sxth	r4, r4
    b3e0:	46a4      	mov	ip, r4
    if((x2 < 0) || (y2 < 0)) return;
    b3e2:	9c02      	ldr	r4, [sp, #8]
    b3e4:	2c00      	cmp	r4, #0
    b3e6:	da00      	bge.n	b3ea <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x6a>
    b3e8:	e18d      	b.n	b706 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x386>
    b3ea:	4664      	mov	r4, ip
    b3ec:	2c00      	cmp	r4, #0
    b3ee:	da00      	bge.n	b3f2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x72>
    b3f0:	e189      	b.n	b706 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x386>
    if(x < 0) {
    b3f2:	2900      	cmp	r1, #0
    b3f4:	da00      	bge.n	b3f8 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x78>
    b3f6:	e192      	b.n	b71e <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x39e>
    if(y < 0) {
    b3f8:	2a00      	cmp	r2, #0
    b3fa:	da00      	bge.n	b3fe <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x7e>
    b3fc:	e18a      	b.n	b714 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x394>
    if(x2 >= _width)  w = _width  - x;
    b3fe:	9a02      	ldr	r2, [sp, #8]
    b400:	4290      	cmp	r0, r2
    b402:	dc02      	bgt.n	b40a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x8a>
    b404:	464b      	mov	r3, r9
    b406:	1ac3      	subs	r3, r0, r3
    b408:	b21b      	sxth	r3, r3
    if(y2 >= _height) h = _height - y;
    b40a:	4566      	cmp	r6, ip
    b40c:	dc02      	bgt.n	b414 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x94>
    b40e:	4652      	mov	r2, sl
    b410:	1ab5      	subs	r5, r6, r2
    b412:	b22d      	sxth	r5, r5
    int32_t len = (int32_t)w * h;
    b414:	002e      	movs	r6, r5
    setAddrWindow(x, y, w, h);
    b416:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    b418:	b2ad      	uxth	r5, r5
    int32_t len = (int32_t)w * h;
    b41a:	435e      	muls	r6, r3
    setAddrWindow(x, y, w, h);
    b41c:	9500      	str	r5, [sp, #0]
    b41e:	b29b      	uxth	r3, r3
    b420:	4652      	mov	r2, sl
    b422:	4649      	mov	r1, r9
    b424:	0020      	movs	r0, r4
    b426:	f7fe ff03 	bl	a230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    uint8_t hi = color >> 8, lo = color;
    b42a:	465b      	mov	r3, fp
    b42c:	121a      	asrs	r2, r3, #8
    b42e:	b2d3      	uxtb	r3, r2
    b430:	4668      	mov	r0, sp
    b432:	0019      	movs	r1, r3
    b434:	930e      	str	r3, [sp, #56]	; 0x38
    b436:	465b      	mov	r3, fp
    b438:	7303      	strb	r3, [r0, #12]
    if(_sclk < 0){ //AVR Optimization
    b43a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    writeColor(color, len);
    b43c:	0035      	movs	r5, r6
    if(_sclk < 0){ //AVR Optimization
    b43e:	940d      	str	r4, [sp, #52]	; 0x34
    uint8_t hi = color >> 8, lo = color;
    b440:	7b06      	ldrb	r6, [r0, #12]
    if(_sclk < 0){ //AVR Optimization
    b442:	2b00      	cmp	r3, #0
    b444:	da00      	bge.n	b448 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0xc8>
    b446:	e14f      	b.n	b6e8 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x368>
    for (uint32_t t=len; t; t--){
    b448:	2d00      	cmp	r5, #0
    b44a:	d100      	bne.n	b44e <_ZN16Adafruit_ILI934113writeFillRectEsssst+0xce>
    b44c:	e15b      	b.n	b706 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x386>
        if((b) & bit){
    b44e:	2040      	movs	r0, #64	; 0x40
    b450:	4682      	mov	sl, r0
    b452:	4654      	mov	r4, sl
    b454:	0008      	movs	r0, r1
    b456:	4021      	ands	r1, r4
    b458:	9107      	str	r1, [sp, #28]
    b45a:	2120      	movs	r1, #32
    b45c:	4689      	mov	r9, r1
    b45e:	464c      	mov	r4, r9
    b460:	0001      	movs	r1, r0
    b462:	4020      	ands	r0, r4
    b464:	9008      	str	r0, [sp, #32]
    b466:	2010      	movs	r0, #16
    b468:	4680      	mov	r8, r0
    b46a:	000f      	movs	r7, r1
    b46c:	0008      	movs	r0, r1
    b46e:	4641      	mov	r1, r8
    b470:	400f      	ands	r7, r1
    b472:	3908      	subs	r1, #8
    b474:	468c      	mov	ip, r1
    b476:	0001      	movs	r1, r0
    b478:	4664      	mov	r4, ip
    b47a:	9709      	str	r7, [sp, #36]	; 0x24
    b47c:	2704      	movs	r7, #4
    b47e:	4021      	ands	r1, r4
    b480:	0004      	movs	r4, r0
    b482:	4038      	ands	r0, r7
    b484:	910a      	str	r1, [sp, #40]	; 0x28
    b486:	900b      	str	r0, [sp, #44]	; 0x2c
    b488:	0021      	movs	r1, r4
    b48a:	2002      	movs	r0, #2
    b48c:	4001      	ands	r1, r0
    b48e:	910c      	str	r1, [sp, #48]	; 0x30
    b490:	2101      	movs	r1, #1
    b492:	400c      	ands	r4, r1
    b494:	9404      	str	r4, [sp, #16]
    b496:	4654      	mov	r4, sl
    b498:	4034      	ands	r4, r6
    b49a:	46a2      	mov	sl, r4
    b49c:	464c      	mov	r4, r9
    b49e:	4034      	ands	r4, r6
    b4a0:	46a1      	mov	r9, r4
    b4a2:	4644      	mov	r4, r8
    b4a4:	4034      	ands	r4, r6
    b4a6:	4037      	ands	r7, r6
    b4a8:	4031      	ands	r1, r6
    b4aa:	46a0      	mov	r8, r4
    b4ac:	4664      	mov	r4, ip
    b4ae:	9103      	str	r1, [sp, #12]
    b4b0:	0039      	movs	r1, r7
    b4b2:	4034      	ands	r4, r6
    b4b4:	4030      	ands	r0, r6
    b4b6:	b252      	sxtb	r2, r2
    b4b8:	9405      	str	r4, [sp, #20]
    b4ba:	960f      	str	r6, [sp, #60]	; 0x3c
    b4bc:	464f      	mov	r7, r9
    b4be:	4656      	mov	r6, sl
    b4c0:	9006      	str	r0, [sp, #24]
    b4c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    b4c4:	4692      	mov	sl, r2
    b4c6:	4689      	mov	r9, r1
    b4c8:	e100      	b.n	b6cc <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x34c>
            SSPI_MOSI_LOW();
    b4ca:	6811      	ldr	r1, [r2, #0]
    b4cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b4ce:	4381      	bics	r1, r0
    b4d0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b4d2:	6819      	ldr	r1, [r3, #0]
    b4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b4d6:	4381      	bics	r1, r0
    b4d8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b4da:	6819      	ldr	r1, [r3, #0]
    b4dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b4de:	4301      	orrs	r1, r0
    b4e0:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b4e2:	9907      	ldr	r1, [sp, #28]
    b4e4:	2900      	cmp	r1, #0
    b4e6:	d000      	beq.n	b4ea <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x16a>
    b4e8:	e160      	b.n	b7ac <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x42c>
            SSPI_MOSI_LOW();
    b4ea:	6811      	ldr	r1, [r2, #0]
    b4ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b4ee:	4381      	bics	r1, r0
    b4f0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b4f2:	6819      	ldr	r1, [r3, #0]
    b4f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b4f6:	4381      	bics	r1, r0
    b4f8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b4fa:	6819      	ldr	r1, [r3, #0]
    b4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b4fe:	4301      	orrs	r1, r0
    b500:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b502:	9908      	ldr	r1, [sp, #32]
    b504:	2900      	cmp	r1, #0
    b506:	d000      	beq.n	b50a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x18a>
    b508:	e14b      	b.n	b7a2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x422>
            SSPI_MOSI_LOW();
    b50a:	6811      	ldr	r1, [r2, #0]
    b50c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b50e:	4381      	bics	r1, r0
    b510:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b512:	6819      	ldr	r1, [r3, #0]
    b514:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b516:	4381      	bics	r1, r0
    b518:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b51a:	6819      	ldr	r1, [r3, #0]
    b51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b51e:	4301      	orrs	r1, r0
    b520:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b522:	9909      	ldr	r1, [sp, #36]	; 0x24
    b524:	2900      	cmp	r1, #0
    b526:	d000      	beq.n	b52a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x1aa>
    b528:	e136      	b.n	b798 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x418>
            SSPI_MOSI_LOW();
    b52a:	6811      	ldr	r1, [r2, #0]
    b52c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b52e:	4381      	bics	r1, r0
    b530:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b532:	6819      	ldr	r1, [r3, #0]
    b534:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b536:	4381      	bics	r1, r0
    b538:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b53a:	6819      	ldr	r1, [r3, #0]
    b53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b53e:	4301      	orrs	r1, r0
    b540:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b542:	990a      	ldr	r1, [sp, #40]	; 0x28
    b544:	2900      	cmp	r1, #0
    b546:	d000      	beq.n	b54a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x1ca>
    b548:	e121      	b.n	b78e <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x40e>
            SSPI_MOSI_LOW();
    b54a:	6811      	ldr	r1, [r2, #0]
    b54c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b54e:	4381      	bics	r1, r0
    b550:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b552:	6819      	ldr	r1, [r3, #0]
    b554:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b556:	4381      	bics	r1, r0
    b558:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b55a:	6819      	ldr	r1, [r3, #0]
    b55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b55e:	4301      	orrs	r1, r0
    b560:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b562:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b564:	2900      	cmp	r1, #0
    b566:	d000      	beq.n	b56a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x1ea>
    b568:	e10c      	b.n	b784 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x404>
            SSPI_MOSI_LOW();
    b56a:	6811      	ldr	r1, [r2, #0]
    b56c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b56e:	4381      	bics	r1, r0
    b570:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b572:	6819      	ldr	r1, [r3, #0]
    b574:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b576:	4381      	bics	r1, r0
    b578:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b57a:	6819      	ldr	r1, [r3, #0]
    b57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b57e:	4301      	orrs	r1, r0
    b580:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b582:	990c      	ldr	r1, [sp, #48]	; 0x30
    b584:	2900      	cmp	r1, #0
    b586:	d000      	beq.n	b58a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x20a>
    b588:	e0f7      	b.n	b77a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x3fa>
            SSPI_MOSI_LOW();
    b58a:	6811      	ldr	r1, [r2, #0]
    b58c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b58e:	4381      	bics	r1, r0
    b590:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b592:	6819      	ldr	r1, [r3, #0]
    b594:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b596:	4381      	bics	r1, r0
    b598:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b59a:	6819      	ldr	r1, [r3, #0]
    b59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b59e:	4301      	orrs	r1, r0
    b5a0:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b5a2:	9904      	ldr	r1, [sp, #16]
    b5a4:	2900      	cmp	r1, #0
    b5a6:	d100      	bne.n	b5aa <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x22a>
    b5a8:	e0e2      	b.n	b770 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x3f0>
            SSPI_MOSI_HIGH();
    b5aa:	6811      	ldr	r1, [r2, #0]
    b5ac:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b5ae:	4301      	orrs	r1, r0
    b5b0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b5b2:	681a      	ldr	r2, [r3, #0]
    b5b4:	6da1      	ldr	r1, [r4, #88]	; 0x58
    b5b6:	438a      	bics	r2, r1
    b5b8:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    b5ba:	681a      	ldr	r2, [r3, #0]
    b5bc:	6da1      	ldr	r1, [r4, #88]	; 0x58
    b5be:	430a      	orrs	r2, r1
    b5c0:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    b5c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b5c4:	2b00      	cmp	r3, #0
    b5c6:	da00      	bge.n	b5ca <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x24a>
    b5c8:	e0fd      	b.n	b7c6 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x446>
        if((b) & bit){
    b5ca:	4659      	mov	r1, fp
    b5cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b5ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    b5d0:	0609      	lsls	r1, r1, #24
    b5d2:	d500      	bpl.n	b5d6 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x256>
    b5d4:	e0c7      	b.n	b766 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x3e6>
            SSPI_MOSI_LOW();
    b5d6:	6811      	ldr	r1, [r2, #0]
    b5d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b5da:	4381      	bics	r1, r0
    b5dc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b5de:	6819      	ldr	r1, [r3, #0]
    b5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b5e2:	4381      	bics	r1, r0
    b5e4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b5e6:	6819      	ldr	r1, [r3, #0]
    b5e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b5ea:	4301      	orrs	r1, r0
    b5ec:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    b5ee:	6811      	ldr	r1, [r2, #0]
    b5f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
        if((b) & bit){
    b5f2:	2e00      	cmp	r6, #0
    b5f4:	d000      	beq.n	b5f8 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x278>
    b5f6:	e0b3      	b.n	b760 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x3e0>
            SSPI_MOSI_LOW();
    b5f8:	4381      	bics	r1, r0
    b5fa:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b5fc:	6819      	ldr	r1, [r3, #0]
    b5fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b600:	4381      	bics	r1, r0
    b602:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b604:	6819      	ldr	r1, [r3, #0]
    b606:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b608:	4301      	orrs	r1, r0
    b60a:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    b60c:	6811      	ldr	r1, [r2, #0]
    b60e:	6d20      	ldr	r0, [r4, #80]	; 0x50
        if((b) & bit){
    b610:	2f00      	cmp	r7, #0
    b612:	d000      	beq.n	b616 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x296>
    b614:	e0a1      	b.n	b75a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x3da>
            SSPI_MOSI_LOW();
    b616:	4381      	bics	r1, r0
    b618:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b61a:	6819      	ldr	r1, [r3, #0]
    b61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b61e:	4381      	bics	r1, r0
    b620:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b622:	6819      	ldr	r1, [r3, #0]
    b624:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b626:	4301      	orrs	r1, r0
    b628:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b62a:	4641      	mov	r1, r8
    b62c:	2900      	cmp	r1, #0
    b62e:	d000      	beq.n	b632 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x2b2>
    b630:	e08e      	b.n	b750 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x3d0>
            SSPI_MOSI_LOW();
    b632:	6811      	ldr	r1, [r2, #0]
    b634:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b636:	4381      	bics	r1, r0
    b638:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b63a:	6819      	ldr	r1, [r3, #0]
    b63c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b63e:	4381      	bics	r1, r0
    b640:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b642:	6819      	ldr	r1, [r3, #0]
    b644:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b646:	4301      	orrs	r1, r0
    b648:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b64a:	9905      	ldr	r1, [sp, #20]
    b64c:	2900      	cmp	r1, #0
    b64e:	d000      	beq.n	b652 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x2d2>
    b650:	e079      	b.n	b746 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x3c6>
            SSPI_MOSI_LOW();
    b652:	6811      	ldr	r1, [r2, #0]
    b654:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b656:	4381      	bics	r1, r0
    b658:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b65a:	6819      	ldr	r1, [r3, #0]
    b65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b65e:	4381      	bics	r1, r0
    b660:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b662:	6819      	ldr	r1, [r3, #0]
    b664:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b666:	4301      	orrs	r1, r0
    b668:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b66a:	4649      	mov	r1, r9
    b66c:	2900      	cmp	r1, #0
    b66e:	d165      	bne.n	b73c <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x3bc>
            SSPI_MOSI_LOW();
    b670:	6811      	ldr	r1, [r2, #0]
    b672:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b674:	4381      	bics	r1, r0
    b676:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b678:	6819      	ldr	r1, [r3, #0]
    b67a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b67c:	4381      	bics	r1, r0
    b67e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b680:	6819      	ldr	r1, [r3, #0]
    b682:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b684:	4301      	orrs	r1, r0
    b686:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b688:	9906      	ldr	r1, [sp, #24]
    b68a:	2900      	cmp	r1, #0
    b68c:	d151      	bne.n	b732 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x3b2>
            SSPI_MOSI_LOW();
    b68e:	6811      	ldr	r1, [r2, #0]
    b690:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b692:	4381      	bics	r1, r0
    b694:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b696:	6819      	ldr	r1, [r3, #0]
    b698:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b69a:	4381      	bics	r1, r0
    b69c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b69e:	6819      	ldr	r1, [r3, #0]
    b6a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b6a2:	4301      	orrs	r1, r0
    b6a4:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    b6a6:	9903      	ldr	r1, [sp, #12]
    b6a8:	2900      	cmp	r1, #0
    b6aa:	d03d      	beq.n	b728 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x3a8>
            SSPI_MOSI_HIGH();
    b6ac:	6811      	ldr	r1, [r2, #0]
    b6ae:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b6b0:	4301      	orrs	r1, r0
    b6b2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b6b4:	681a      	ldr	r2, [r3, #0]
    b6b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
    b6b8:	438a      	bics	r2, r1
    b6ba:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    b6bc:	681a      	ldr	r2, [r3, #0]
    b6be:	6da1      	ldr	r1, [r4, #88]	; 0x58
    b6c0:	430a      	orrs	r2, r1
    b6c2:	601a      	str	r2, [r3, #0]
    for (uint32_t t=len; t; t--){
    b6c4:	3d01      	subs	r5, #1
    b6c6:	2d00      	cmp	r5, #0
    b6c8:	d01d      	beq.n	b706 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x386>
    b6ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if(_sclk < 0){
    b6cc:	2b00      	cmp	r3, #0
    b6ce:	da00      	bge.n	b6d2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x352>
    b6d0:	e071      	b.n	b7b6 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x436>
        if((b) & bit){
    b6d2:	4651      	mov	r1, sl
    b6d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b6d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    b6d8:	2900      	cmp	r1, #0
    b6da:	db00      	blt.n	b6de <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x35e>
    b6dc:	e6f5      	b.n	b4ca <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x14a>
            SSPI_MOSI_HIGH();
    b6de:	6811      	ldr	r1, [r2, #0]
    b6e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b6e2:	4301      	orrs	r1, r0
    b6e4:	6011      	str	r1, [r2, #0]
    b6e6:	e6f4      	b.n	b4d2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x152>
        for (uint32_t t=len; t; t--){
    b6e8:	2d00      	cmp	r5, #0
    b6ea:	d00c      	beq.n	b706 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x386>
    b6ec:	000f      	movs	r7, r1
    b6ee:	4c38      	ldr	r4, [pc, #224]	; (b7d0 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x450>)
            HSPI_WRITE(hi);
    b6f0:	0039      	movs	r1, r7
    b6f2:	0020      	movs	r0, r4
    b6f4:	f003 f938 	bl	e968 <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    b6f8:	3d01      	subs	r5, #1
            HSPI_WRITE(lo);
    b6fa:	0031      	movs	r1, r6
    b6fc:	0020      	movs	r0, r4
    b6fe:	f003 f933 	bl	e968 <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    b702:	2d00      	cmp	r5, #0
    b704:	d1f4      	bne.n	b6f0 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x370>
}
    b706:	b011      	add	sp, #68	; 0x44
    b708:	bc3c      	pop	{r2, r3, r4, r5}
    b70a:	4690      	mov	r8, r2
    b70c:	4699      	mov	r9, r3
    b70e:	46a2      	mov	sl, r4
    b710:	46ab      	mov	fp, r5
    b712:	bdf0      	pop	{r4, r5, r6, r7, pc}
        h = y2 + 1;
    b714:	4642      	mov	r2, r8
    b716:	b215      	sxth	r5, r2
    b718:	2200      	movs	r2, #0
    b71a:	4692      	mov	sl, r2
    b71c:	e66f      	b.n	b3fe <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x7e>
        w = x2 + 1;
    b71e:	2110      	movs	r1, #16
    b720:	5e7b      	ldrsh	r3, [r7, r1]
    b722:	2100      	movs	r1, #0
    b724:	4689      	mov	r9, r1
    b726:	e667      	b.n	b3f8 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x78>
            SSPI_MOSI_LOW();
    b728:	6811      	ldr	r1, [r2, #0]
    b72a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b72c:	4381      	bics	r1, r0
    b72e:	6011      	str	r1, [r2, #0]
    b730:	e7c0      	b.n	b6b4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x334>
            SSPI_MOSI_HIGH();
    b732:	6811      	ldr	r1, [r2, #0]
    b734:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b736:	4301      	orrs	r1, r0
    b738:	6011      	str	r1, [r2, #0]
    b73a:	e7ac      	b.n	b696 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x316>
    b73c:	6811      	ldr	r1, [r2, #0]
    b73e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b740:	4301      	orrs	r1, r0
    b742:	6011      	str	r1, [r2, #0]
    b744:	e798      	b.n	b678 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x2f8>
    b746:	6811      	ldr	r1, [r2, #0]
    b748:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b74a:	4301      	orrs	r1, r0
    b74c:	6011      	str	r1, [r2, #0]
    b74e:	e784      	b.n	b65a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x2da>
    b750:	6811      	ldr	r1, [r2, #0]
    b752:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b754:	4301      	orrs	r1, r0
    b756:	6011      	str	r1, [r2, #0]
    b758:	e76f      	b.n	b63a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x2ba>
    b75a:	4301      	orrs	r1, r0
    b75c:	6011      	str	r1, [r2, #0]
    b75e:	e75c      	b.n	b61a <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x29a>
    b760:	4301      	orrs	r1, r0
    b762:	6011      	str	r1, [r2, #0]
    b764:	e74a      	b.n	b5fc <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x27c>
    b766:	6811      	ldr	r1, [r2, #0]
    b768:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b76a:	4301      	orrs	r1, r0
    b76c:	6011      	str	r1, [r2, #0]
    b76e:	e736      	b.n	b5de <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x25e>
            SSPI_MOSI_LOW();
    b770:	6811      	ldr	r1, [r2, #0]
    b772:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b774:	4381      	bics	r1, r0
    b776:	6011      	str	r1, [r2, #0]
    b778:	e71b      	b.n	b5b2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x232>
            SSPI_MOSI_HIGH();
    b77a:	6811      	ldr	r1, [r2, #0]
    b77c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b77e:	4301      	orrs	r1, r0
    b780:	6011      	str	r1, [r2, #0]
    b782:	e706      	b.n	b592 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x212>
    b784:	6811      	ldr	r1, [r2, #0]
    b786:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b788:	4301      	orrs	r1, r0
    b78a:	6011      	str	r1, [r2, #0]
    b78c:	e6f1      	b.n	b572 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x1f2>
    b78e:	6811      	ldr	r1, [r2, #0]
    b790:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b792:	4301      	orrs	r1, r0
    b794:	6011      	str	r1, [r2, #0]
    b796:	e6dc      	b.n	b552 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x1d2>
    b798:	6811      	ldr	r1, [r2, #0]
    b79a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b79c:	4301      	orrs	r1, r0
    b79e:	6011      	str	r1, [r2, #0]
    b7a0:	e6c7      	b.n	b532 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x1b2>
    b7a2:	6811      	ldr	r1, [r2, #0]
    b7a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b7a6:	4301      	orrs	r1, r0
    b7a8:	6011      	str	r1, [r2, #0]
    b7aa:	e6b2      	b.n	b512 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x192>
    b7ac:	6811      	ldr	r1, [r2, #0]
    b7ae:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b7b0:	4301      	orrs	r1, r0
    b7b2:	6011      	str	r1, [r2, #0]
    b7b4:	e69d      	b.n	b4f2 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x172>
        HSPI_WRITE(b);
    b7b6:	990e      	ldr	r1, [sp, #56]	; 0x38
    b7b8:	4805      	ldr	r0, [pc, #20]	; (b7d0 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x450>)
    b7ba:	f003 f8d5 	bl	e968 <_ZN8SPIClass8transferEh>
    if(_sclk < 0){
    b7be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b7c0:	2b00      	cmp	r3, #0
    b7c2:	db00      	blt.n	b7c6 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x446>
    b7c4:	e701      	b.n	b5ca <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x24a>
        HSPI_WRITE(b);
    b7c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b7c8:	4801      	ldr	r0, [pc, #4]	; (b7d0 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x450>)
    b7ca:	f003 f8cd 	bl	e968 <_ZN8SPIClass8transferEh>
    b7ce:	e779      	b.n	b6c4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x344>
    b7d0:	20000a0c 	.word	0x20000a0c

0000b7d4 <_ZN16Adafruit_ILI93419drawPixelEsst>:
void Adafruit_ILI9341::drawPixel(int16_t x, int16_t y, uint16_t color){
    b7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7d6:	46c6      	mov	lr, r8
    b7d8:	b500      	push	{lr}
    b7da:	001e      	movs	r6, r3
    startWrite();
    b7dc:	6803      	ldr	r3, [r0, #0]
void Adafruit_ILI9341::drawPixel(int16_t x, int16_t y, uint16_t color){
    b7de:	000d      	movs	r5, r1
    b7e0:	0017      	movs	r7, r2
    b7e2:	49d3      	ldr	r1, [pc, #844]	; (bb30 <_ZN16Adafruit_ILI93419drawPixelEsst+0x35c>)
    startWrite();
    b7e4:	695a      	ldr	r2, [r3, #20]
void Adafruit_ILI9341::drawPixel(int16_t x, int16_t y, uint16_t color){
    b7e6:	b084      	sub	sp, #16
    b7e8:	0004      	movs	r4, r0
    b7ea:	428a      	cmp	r2, r1
    b7ec:	d137      	bne.n	b85e <_ZN16Adafruit_ILI93419drawPixelEsst+0x8a>
    SPI_BEGIN_TRANSACTION();
    b7ee:	6b02      	ldr	r2, [r0, #48]	; 0x30
    b7f0:	2a00      	cmp	r2, #0
    b7f2:	da00      	bge.n	b7f6 <_ZN16Adafruit_ILI93419drawPixelEsst+0x22>
    b7f4:	e13e      	b.n	ba74 <_ZN16Adafruit_ILI93419drawPixelEsst+0x2a0>
    SPI_CS_LOW();
    b7f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    b7f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    b7fa:	6808      	ldr	r0, [r1, #0]
    b7fc:	4390      	bics	r0, r2
    b7fe:	6008      	str	r0, [r1, #0]
    writePixel(x, y, color);
    b800:	699a      	ldr	r2, [r3, #24]
    b802:	4690      	mov	r8, r2
    b804:	4acb      	ldr	r2, [pc, #812]	; (bb34 <_ZN16Adafruit_ILI93419drawPixelEsst+0x360>)
    b806:	4590      	cmp	r8, r2
    b808:	d11c      	bne.n	b844 <_ZN16Adafruit_ILI93419drawPixelEsst+0x70>
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    b80a:	2d00      	cmp	r5, #0
    b80c:	db09      	blt.n	b822 <_ZN16Adafruit_ILI93419drawPixelEsst+0x4e>
    b80e:	210c      	movs	r1, #12
    b810:	5e62      	ldrsh	r2, [r4, r1]
    b812:	42aa      	cmp	r2, r5
    b814:	dd05      	ble.n	b822 <_ZN16Adafruit_ILI93419drawPixelEsst+0x4e>
    b816:	2f00      	cmp	r7, #0
    b818:	db03      	blt.n	b822 <_ZN16Adafruit_ILI93419drawPixelEsst+0x4e>
    b81a:	210e      	movs	r1, #14
    b81c:	5e62      	ldrsh	r2, [r4, r1]
    b81e:	42ba      	cmp	r2, r7
    b820:	dc20      	bgt.n	b864 <_ZN16Adafruit_ILI93419drawPixelEsst+0x90>
    endWrite();
    b822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b824:	4ac4      	ldr	r2, [pc, #784]	; (bb38 <_ZN16Adafruit_ILI93419drawPixelEsst+0x364>)
    b826:	4293      	cmp	r3, r2
    b828:	d116      	bne.n	b858 <_ZN16Adafruit_ILI93419drawPixelEsst+0x84>
    SPI_CS_HIGH();
    b82a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    b82c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    b82e:	6813      	ldr	r3, [r2, #0]
    b830:	430b      	orrs	r3, r1
    b832:	6013      	str	r3, [r2, #0]
    SPI_END_TRANSACTION();
    b834:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b836:	2b00      	cmp	r3, #0
    b838:	da00      	bge.n	b83c <_ZN16Adafruit_ILI93419drawPixelEsst+0x68>
    b83a:	e117      	b.n	ba6c <_ZN16Adafruit_ILI93419drawPixelEsst+0x298>
}
    b83c:	b004      	add	sp, #16
    b83e:	bc04      	pop	{r2}
    b840:	4690      	mov	r8, r2
    b842:	bdf0      	pop	{r4, r5, r6, r7, pc}
    writePixel(x, y, color);
    b844:	0033      	movs	r3, r6
    b846:	003a      	movs	r2, r7
    b848:	0029      	movs	r1, r5
    b84a:	0020      	movs	r0, r4
    b84c:	47c0      	blx	r8
    b84e:	6823      	ldr	r3, [r4, #0]
    b850:	4ab9      	ldr	r2, [pc, #740]	; (bb38 <_ZN16Adafruit_ILI93419drawPixelEsst+0x364>)
    endWrite();
    b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b854:	4293      	cmp	r3, r2
    b856:	d0e8      	beq.n	b82a <_ZN16Adafruit_ILI93419drawPixelEsst+0x56>
    b858:	0020      	movs	r0, r4
    b85a:	4798      	blx	r3
}
    b85c:	e7ee      	b.n	b83c <_ZN16Adafruit_ILI93419drawPixelEsst+0x68>
    startWrite();
    b85e:	4790      	blx	r2
    b860:	6823      	ldr	r3, [r4, #0]
    b862:	e7cd      	b.n	b800 <_ZN16Adafruit_ILI93419drawPixelEsst+0x2c>
    setAddrWindow(x,y,1,1);
    b864:	2301      	movs	r3, #1
    b866:	b2ba      	uxth	r2, r7
    b868:	9300      	str	r3, [sp, #0]
    b86a:	b2a9      	uxth	r1, r5
    b86c:	0020      	movs	r0, r4
    b86e:	f7fe fcdf 	bl	a230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    SPI_WRITE16(color);
    b872:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b874:	2b00      	cmp	r3, #0
    b876:	da00      	bge.n	b87a <_ZN16Adafruit_ILI93419drawPixelEsst+0xa6>
    b878:	e162      	b.n	bb40 <_ZN16Adafruit_ILI93419drawPixelEsst+0x36c>
    b87a:	1230      	asrs	r0, r6, #8
    b87c:	b2c1      	uxtb	r1, r0
        if((b) & bit){
    b87e:	b240      	sxtb	r0, r0
    b880:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b882:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    b884:	2800      	cmp	r0, #0
    b886:	da00      	bge.n	b88a <_ZN16Adafruit_ILI93419drawPixelEsst+0xb6>
    b888:	e124      	b.n	bad4 <_ZN16Adafruit_ILI93419drawPixelEsst+0x300>
            SSPI_MOSI_LOW();
    b88a:	6810      	ldr	r0, [r2, #0]
    b88c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b88e:	43a8      	bics	r0, r5
    b890:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b892:	6818      	ldr	r0, [r3, #0]
    b894:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b896:	43a8      	bics	r0, r5
    b898:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b89a:	6818      	ldr	r0, [r3, #0]
    b89c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b89e:	4328      	orrs	r0, r5
    b8a0:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b8a2:	0648      	lsls	r0, r1, #25
    b8a4:	d500      	bpl.n	b8a8 <_ZN16Adafruit_ILI93419drawPixelEsst+0xd4>
    b8a6:	e110      	b.n	baca <_ZN16Adafruit_ILI93419drawPixelEsst+0x2f6>
            SSPI_MOSI_LOW();
    b8a8:	6810      	ldr	r0, [r2, #0]
    b8aa:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b8ac:	43a8      	bics	r0, r5
    b8ae:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b8b0:	6818      	ldr	r0, [r3, #0]
    b8b2:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b8b4:	43a8      	bics	r0, r5
    b8b6:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b8b8:	6818      	ldr	r0, [r3, #0]
    b8ba:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b8bc:	4328      	orrs	r0, r5
    b8be:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b8c0:	0688      	lsls	r0, r1, #26
    b8c2:	d500      	bpl.n	b8c6 <_ZN16Adafruit_ILI93419drawPixelEsst+0xf2>
    b8c4:	e0fc      	b.n	bac0 <_ZN16Adafruit_ILI93419drawPixelEsst+0x2ec>
            SSPI_MOSI_LOW();
    b8c6:	6810      	ldr	r0, [r2, #0]
    b8c8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b8ca:	43a8      	bics	r0, r5
    b8cc:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b8ce:	6818      	ldr	r0, [r3, #0]
    b8d0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b8d2:	43a8      	bics	r0, r5
    b8d4:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b8d6:	6818      	ldr	r0, [r3, #0]
    b8d8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b8da:	4328      	orrs	r0, r5
    b8dc:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b8de:	06c8      	lsls	r0, r1, #27
    b8e0:	d500      	bpl.n	b8e4 <_ZN16Adafruit_ILI93419drawPixelEsst+0x110>
    b8e2:	e0e8      	b.n	bab6 <_ZN16Adafruit_ILI93419drawPixelEsst+0x2e2>
            SSPI_MOSI_LOW();
    b8e4:	6810      	ldr	r0, [r2, #0]
    b8e6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b8e8:	43a8      	bics	r0, r5
    b8ea:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b8ec:	6818      	ldr	r0, [r3, #0]
    b8ee:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b8f0:	43a8      	bics	r0, r5
    b8f2:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b8f4:	6818      	ldr	r0, [r3, #0]
    b8f6:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b8f8:	4328      	orrs	r0, r5
    b8fa:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b8fc:	0708      	lsls	r0, r1, #28
    b8fe:	d500      	bpl.n	b902 <_ZN16Adafruit_ILI93419drawPixelEsst+0x12e>
    b900:	e0d4      	b.n	baac <_ZN16Adafruit_ILI93419drawPixelEsst+0x2d8>
            SSPI_MOSI_LOW();
    b902:	6810      	ldr	r0, [r2, #0]
    b904:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b906:	43a8      	bics	r0, r5
    b908:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b90a:	6818      	ldr	r0, [r3, #0]
    b90c:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b90e:	43a8      	bics	r0, r5
    b910:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b912:	6818      	ldr	r0, [r3, #0]
    b914:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b916:	4328      	orrs	r0, r5
    b918:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b91a:	0748      	lsls	r0, r1, #29
    b91c:	d500      	bpl.n	b920 <_ZN16Adafruit_ILI93419drawPixelEsst+0x14c>
    b91e:	e0c0      	b.n	baa2 <_ZN16Adafruit_ILI93419drawPixelEsst+0x2ce>
            SSPI_MOSI_LOW();
    b920:	6810      	ldr	r0, [r2, #0]
    b922:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b924:	43a8      	bics	r0, r5
    b926:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b928:	6818      	ldr	r0, [r3, #0]
    b92a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b92c:	43a8      	bics	r0, r5
    b92e:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b930:	6818      	ldr	r0, [r3, #0]
    b932:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b934:	4328      	orrs	r0, r5
    b936:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b938:	0788      	lsls	r0, r1, #30
    b93a:	d500      	bpl.n	b93e <_ZN16Adafruit_ILI93419drawPixelEsst+0x16a>
    b93c:	e0ac      	b.n	ba98 <_ZN16Adafruit_ILI93419drawPixelEsst+0x2c4>
            SSPI_MOSI_LOW();
    b93e:	6810      	ldr	r0, [r2, #0]
    b940:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b942:	43a8      	bics	r0, r5
    b944:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b946:	6818      	ldr	r0, [r3, #0]
    b948:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b94a:	43a8      	bics	r0, r5
    b94c:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b94e:	6818      	ldr	r0, [r3, #0]
    b950:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b952:	4328      	orrs	r0, r5
    b954:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b956:	07c9      	lsls	r1, r1, #31
    b958:	d400      	bmi.n	b95c <_ZN16Adafruit_ILI93419drawPixelEsst+0x188>
    b95a:	e098      	b.n	ba8e <_ZN16Adafruit_ILI93419drawPixelEsst+0x2ba>
            SSPI_MOSI_HIGH();
    b95c:	6811      	ldr	r1, [r2, #0]
    b95e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b960:	4301      	orrs	r1, r0
    b962:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    b964:	6819      	ldr	r1, [r3, #0]
    b966:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b968:	4381      	bics	r1, r0
    b96a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    b96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b96e:	6819      	ldr	r1, [r3, #0]
    b970:	4301      	orrs	r1, r0
    b972:	6019      	str	r1, [r3, #0]
    if(_sclk < 0){
    b974:	6b20      	ldr	r0, [r4, #48]	; 0x30
    SPI_WRITE16(color);
    b976:	b2f1      	uxtb	r1, r6
    if(_sclk < 0){
    b978:	2800      	cmp	r0, #0
    b97a:	da00      	bge.n	b97e <_ZN16Adafruit_ILI93419drawPixelEsst+0x1aa>
    b97c:	e0eb      	b.n	bb56 <_ZN16Adafruit_ILI93419drawPixelEsst+0x382>
        if((b) & bit){
    b97e:	0630      	lsls	r0, r6, #24
    b980:	d500      	bpl.n	b984 <_ZN16Adafruit_ILI93419drawPixelEsst+0x1b0>
    b982:	e0ac      	b.n	bade <_ZN16Adafruit_ILI93419drawPixelEsst+0x30a>
            SSPI_MOSI_LOW();
    b984:	6810      	ldr	r0, [r2, #0]
    b986:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b988:	43a8      	bics	r0, r5
    b98a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b98c:	6818      	ldr	r0, [r3, #0]
    b98e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b990:	43a8      	bics	r0, r5
    b992:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b994:	6818      	ldr	r0, [r3, #0]
    b996:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b998:	4328      	orrs	r0, r5
    b99a:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b99c:	0648      	lsls	r0, r1, #25
    b99e:	d400      	bmi.n	b9a2 <_ZN16Adafruit_ILI93419drawPixelEsst+0x1ce>
    b9a0:	e0c0      	b.n	bb24 <_ZN16Adafruit_ILI93419drawPixelEsst+0x350>
            SSPI_MOSI_HIGH();
    b9a2:	6810      	ldr	r0, [r2, #0]
    b9a4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b9a6:	4328      	orrs	r0, r5
    b9a8:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b9aa:	6818      	ldr	r0, [r3, #0]
    b9ac:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b9ae:	43a8      	bics	r0, r5
    b9b0:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b9b2:	6818      	ldr	r0, [r3, #0]
    b9b4:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b9b6:	4328      	orrs	r0, r5
    b9b8:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b9ba:	0688      	lsls	r0, r1, #26
    b9bc:	d400      	bmi.n	b9c0 <_ZN16Adafruit_ILI93419drawPixelEsst+0x1ec>
    b9be:	e0ac      	b.n	bb1a <_ZN16Adafruit_ILI93419drawPixelEsst+0x346>
            SSPI_MOSI_HIGH();
    b9c0:	6810      	ldr	r0, [r2, #0]
    b9c2:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b9c4:	4328      	orrs	r0, r5
    b9c6:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b9c8:	6818      	ldr	r0, [r3, #0]
    b9ca:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b9cc:	43a8      	bics	r0, r5
    b9ce:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b9d0:	6818      	ldr	r0, [r3, #0]
    b9d2:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b9d4:	4328      	orrs	r0, r5
    b9d6:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b9d8:	06c8      	lsls	r0, r1, #27
    b9da:	d400      	bmi.n	b9de <_ZN16Adafruit_ILI93419drawPixelEsst+0x20a>
    b9dc:	e098      	b.n	bb10 <_ZN16Adafruit_ILI93419drawPixelEsst+0x33c>
            SSPI_MOSI_HIGH();
    b9de:	6810      	ldr	r0, [r2, #0]
    b9e0:	6d25      	ldr	r5, [r4, #80]	; 0x50
    b9e2:	4328      	orrs	r0, r5
    b9e4:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    b9e6:	6818      	ldr	r0, [r3, #0]
    b9e8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b9ea:	43a8      	bics	r0, r5
    b9ec:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    b9ee:	6818      	ldr	r0, [r3, #0]
    b9f0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    b9f2:	4328      	orrs	r0, r5
    b9f4:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    b9f6:	0708      	lsls	r0, r1, #28
    b9f8:	d400      	bmi.n	b9fc <_ZN16Adafruit_ILI93419drawPixelEsst+0x228>
    b9fa:	e084      	b.n	bb06 <_ZN16Adafruit_ILI93419drawPixelEsst+0x332>
            SSPI_MOSI_HIGH();
    b9fc:	6810      	ldr	r0, [r2, #0]
    b9fe:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ba00:	4328      	orrs	r0, r5
    ba02:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ba04:	6818      	ldr	r0, [r3, #0]
    ba06:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ba08:	43a8      	bics	r0, r5
    ba0a:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ba0c:	6818      	ldr	r0, [r3, #0]
    ba0e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ba10:	4328      	orrs	r0, r5
    ba12:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    ba14:	0748      	lsls	r0, r1, #29
    ba16:	d571      	bpl.n	bafc <_ZN16Adafruit_ILI93419drawPixelEsst+0x328>
            SSPI_MOSI_HIGH();
    ba18:	6810      	ldr	r0, [r2, #0]
    ba1a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ba1c:	4328      	orrs	r0, r5
    ba1e:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ba20:	6818      	ldr	r0, [r3, #0]
    ba22:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ba24:	43a8      	bics	r0, r5
    ba26:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ba28:	6818      	ldr	r0, [r3, #0]
    ba2a:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ba2c:	4328      	orrs	r0, r5
    ba2e:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    ba30:	0788      	lsls	r0, r1, #30
    ba32:	d55e      	bpl.n	baf2 <_ZN16Adafruit_ILI93419drawPixelEsst+0x31e>
            SSPI_MOSI_HIGH();
    ba34:	6810      	ldr	r0, [r2, #0]
    ba36:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ba38:	4328      	orrs	r0, r5
    ba3a:	6010      	str	r0, [r2, #0]
        SSPI_SCK_LOW();
    ba3c:	6818      	ldr	r0, [r3, #0]
    ba3e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ba40:	43a8      	bics	r0, r5
    ba42:	6018      	str	r0, [r3, #0]
        SSPI_SCK_HIGH();
    ba44:	6818      	ldr	r0, [r3, #0]
    ba46:	6da5      	ldr	r5, [r4, #88]	; 0x58
    ba48:	4328      	orrs	r0, r5
    ba4a:	6018      	str	r0, [r3, #0]
        if((b) & bit){
    ba4c:	07c9      	lsls	r1, r1, #31
    ba4e:	d54b      	bpl.n	bae8 <_ZN16Adafruit_ILI93419drawPixelEsst+0x314>
            SSPI_MOSI_HIGH();
    ba50:	6811      	ldr	r1, [r2, #0]
    ba52:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ba54:	4301      	orrs	r1, r0
    ba56:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    ba58:	681a      	ldr	r2, [r3, #0]
    ba5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    ba5c:	438a      	bics	r2, r1
    ba5e:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    ba60:	681a      	ldr	r2, [r3, #0]
    ba62:	6da1      	ldr	r1, [r4, #88]	; 0x58
    ba64:	430a      	orrs	r2, r1
    ba66:	601a      	str	r2, [r3, #0]
    ba68:	6823      	ldr	r3, [r4, #0]
    ba6a:	e6da      	b.n	b822 <_ZN16Adafruit_ILI93419drawPixelEsst+0x4e>
    SPI_END_TRANSACTION();
    ba6c:	4833      	ldr	r0, [pc, #204]	; (bb3c <_ZN16Adafruit_ILI93419drawPixelEsst+0x368>)
    ba6e:	f002 ff69 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    ba72:	e6e3      	b.n	b83c <_ZN16Adafruit_ILI93419drawPixelEsst+0x68>
    SPI_BEGIN_TRANSACTION();
    ba74:	2302      	movs	r3, #2
    ba76:	6a01      	ldr	r1, [r0, #32]
    ba78:	2201      	movs	r2, #1
    ba7a:	a802      	add	r0, sp, #8
    ba7c:	f7f9 faaa 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    ba80:	9902      	ldr	r1, [sp, #8]
    ba82:	9a03      	ldr	r2, [sp, #12]
    ba84:	482d      	ldr	r0, [pc, #180]	; (bb3c <_ZN16Adafruit_ILI93419drawPixelEsst+0x368>)
    ba86:	f002 ff2d 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
    ba8a:	6823      	ldr	r3, [r4, #0]
    ba8c:	e6b3      	b.n	b7f6 <_ZN16Adafruit_ILI93419drawPixelEsst+0x22>
            SSPI_MOSI_LOW();
    ba8e:	6811      	ldr	r1, [r2, #0]
    ba90:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ba92:	4381      	bics	r1, r0
    ba94:	6011      	str	r1, [r2, #0]
    ba96:	e765      	b.n	b964 <_ZN16Adafruit_ILI93419drawPixelEsst+0x190>
            SSPI_MOSI_HIGH();
    ba98:	6810      	ldr	r0, [r2, #0]
    ba9a:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ba9c:	4328      	orrs	r0, r5
    ba9e:	6010      	str	r0, [r2, #0]
    baa0:	e751      	b.n	b946 <_ZN16Adafruit_ILI93419drawPixelEsst+0x172>
    baa2:	6810      	ldr	r0, [r2, #0]
    baa4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    baa6:	4328      	orrs	r0, r5
    baa8:	6010      	str	r0, [r2, #0]
    baaa:	e73d      	b.n	b928 <_ZN16Adafruit_ILI93419drawPixelEsst+0x154>
    baac:	6810      	ldr	r0, [r2, #0]
    baae:	6d25      	ldr	r5, [r4, #80]	; 0x50
    bab0:	4328      	orrs	r0, r5
    bab2:	6010      	str	r0, [r2, #0]
    bab4:	e729      	b.n	b90a <_ZN16Adafruit_ILI93419drawPixelEsst+0x136>
    bab6:	6810      	ldr	r0, [r2, #0]
    bab8:	6d25      	ldr	r5, [r4, #80]	; 0x50
    baba:	4328      	orrs	r0, r5
    babc:	6010      	str	r0, [r2, #0]
    babe:	e715      	b.n	b8ec <_ZN16Adafruit_ILI93419drawPixelEsst+0x118>
    bac0:	6810      	ldr	r0, [r2, #0]
    bac2:	6d25      	ldr	r5, [r4, #80]	; 0x50
    bac4:	4328      	orrs	r0, r5
    bac6:	6010      	str	r0, [r2, #0]
    bac8:	e701      	b.n	b8ce <_ZN16Adafruit_ILI93419drawPixelEsst+0xfa>
    baca:	6810      	ldr	r0, [r2, #0]
    bacc:	6d25      	ldr	r5, [r4, #80]	; 0x50
    bace:	4328      	orrs	r0, r5
    bad0:	6010      	str	r0, [r2, #0]
    bad2:	e6ed      	b.n	b8b0 <_ZN16Adafruit_ILI93419drawPixelEsst+0xdc>
    bad4:	6810      	ldr	r0, [r2, #0]
    bad6:	6d25      	ldr	r5, [r4, #80]	; 0x50
    bad8:	4328      	orrs	r0, r5
    bada:	6010      	str	r0, [r2, #0]
    badc:	e6d9      	b.n	b892 <_ZN16Adafruit_ILI93419drawPixelEsst+0xbe>
    bade:	6810      	ldr	r0, [r2, #0]
    bae0:	6d25      	ldr	r5, [r4, #80]	; 0x50
    bae2:	4328      	orrs	r0, r5
    bae4:	6010      	str	r0, [r2, #0]
    bae6:	e751      	b.n	b98c <_ZN16Adafruit_ILI93419drawPixelEsst+0x1b8>
            SSPI_MOSI_LOW();
    bae8:	6811      	ldr	r1, [r2, #0]
    baea:	6d20      	ldr	r0, [r4, #80]	; 0x50
    baec:	4381      	bics	r1, r0
    baee:	6011      	str	r1, [r2, #0]
    baf0:	e7b2      	b.n	ba58 <_ZN16Adafruit_ILI93419drawPixelEsst+0x284>
    baf2:	6810      	ldr	r0, [r2, #0]
    baf4:	6d25      	ldr	r5, [r4, #80]	; 0x50
    baf6:	43a8      	bics	r0, r5
    baf8:	6010      	str	r0, [r2, #0]
    bafa:	e79f      	b.n	ba3c <_ZN16Adafruit_ILI93419drawPixelEsst+0x268>
    bafc:	6810      	ldr	r0, [r2, #0]
    bafe:	6d25      	ldr	r5, [r4, #80]	; 0x50
    bb00:	43a8      	bics	r0, r5
    bb02:	6010      	str	r0, [r2, #0]
    bb04:	e78c      	b.n	ba20 <_ZN16Adafruit_ILI93419drawPixelEsst+0x24c>
    bb06:	6810      	ldr	r0, [r2, #0]
    bb08:	6d25      	ldr	r5, [r4, #80]	; 0x50
    bb0a:	43a8      	bics	r0, r5
    bb0c:	6010      	str	r0, [r2, #0]
    bb0e:	e779      	b.n	ba04 <_ZN16Adafruit_ILI93419drawPixelEsst+0x230>
    bb10:	6810      	ldr	r0, [r2, #0]
    bb12:	6d25      	ldr	r5, [r4, #80]	; 0x50
    bb14:	43a8      	bics	r0, r5
    bb16:	6010      	str	r0, [r2, #0]
    bb18:	e765      	b.n	b9e6 <_ZN16Adafruit_ILI93419drawPixelEsst+0x212>
    bb1a:	6810      	ldr	r0, [r2, #0]
    bb1c:	6d25      	ldr	r5, [r4, #80]	; 0x50
    bb1e:	43a8      	bics	r0, r5
    bb20:	6010      	str	r0, [r2, #0]
    bb22:	e751      	b.n	b9c8 <_ZN16Adafruit_ILI93419drawPixelEsst+0x1f4>
    bb24:	6810      	ldr	r0, [r2, #0]
    bb26:	6d25      	ldr	r5, [r4, #80]	; 0x50
    bb28:	43a8      	bics	r0, r5
    bb2a:	6010      	str	r0, [r2, #0]
    bb2c:	e73d      	b.n	b9aa <_ZN16Adafruit_ILI93419drawPixelEsst+0x1d6>
    bb2e:	46c0      	nop			; (mov r8, r8)
    bb30:	00005015 	.word	0x00005015
    bb34:	0000b099 	.word	0x0000b099
    bb38:	00004fb5 	.word	0x00004fb5
    bb3c:	20000a0c 	.word	0x20000a0c
    SPI_WRITE16(color);
    bb40:	4d07      	ldr	r5, [pc, #28]	; (bb60 <_ZN16Adafruit_ILI93419drawPixelEsst+0x38c>)
    bb42:	0a31      	lsrs	r1, r6, #8
    bb44:	0028      	movs	r0, r5
    bb46:	f002 ff0f 	bl	e968 <_ZN8SPIClass8transferEh>
    bb4a:	b2f1      	uxtb	r1, r6
    bb4c:	0028      	movs	r0, r5
    bb4e:	f002 ff0b 	bl	e968 <_ZN8SPIClass8transferEh>
    bb52:	6823      	ldr	r3, [r4, #0]
    bb54:	e665      	b.n	b822 <_ZN16Adafruit_ILI93419drawPixelEsst+0x4e>
        HSPI_WRITE(b);
    bb56:	4802      	ldr	r0, [pc, #8]	; (bb60 <_ZN16Adafruit_ILI93419drawPixelEsst+0x38c>)
    bb58:	f002 ff06 	bl	e968 <_ZN8SPIClass8transferEh>
    bb5c:	6823      	ldr	r3, [r4, #0]
    bb5e:	e660      	b.n	b822 <_ZN16Adafruit_ILI93419drawPixelEsst+0x4e>
    bb60:	20000a0c 	.word	0x20000a0c

0000bb64 <_ZN16Adafruit_ILI934114writeFastHLineEssst>:
void Adafruit_ILI9341::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color){
    bb64:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb66:	4657      	mov	r7, sl
    bb68:	464e      	mov	r6, r9
    bb6a:	4645      	mov	r5, r8
    bb6c:	46de      	mov	lr, fp
    bb6e:	b5e0      	push	{r5, r6, r7, lr}
    bb70:	b08f      	sub	sp, #60	; 0x3c
    bb72:	001d      	movs	r5, r3
    bb74:	ab18      	add	r3, sp, #96	; 0x60
    bb76:	881e      	ldrh	r6, [r3, #0]
    writeFillRect(x, y, w, 1, color);
    bb78:	6803      	ldr	r3, [r0, #0]
void Adafruit_ILI9341::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color){
    bb7a:	0004      	movs	r4, r0
    writeFillRect(x, y, w, 1, color);
    bb7c:	69df      	ldr	r7, [r3, #28]
    bb7e:	4bdd      	ldr	r3, [pc, #884]	; (bef4 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x390>)
    bb80:	429f      	cmp	r7, r3
    bb82:	d000      	beq.n	bb86 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x22>
    bb84:	e17b      	b.n	be7e <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x31a>
    if((x >= _width) || (y >= _height)) return;
    bb86:	200c      	movs	r0, #12
    bb88:	5e23      	ldrsh	r3, [r4, r0]
    bb8a:	4299      	cmp	r1, r3
    bb8c:	db00      	blt.n	bb90 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x2c>
    bb8e:	e17b      	b.n	be88 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x324>
    bb90:	270e      	movs	r7, #14
    bb92:	5fe0      	ldrsh	r0, [r4, r7]
    bb94:	4290      	cmp	r0, r2
    bb96:	dc00      	bgt.n	bb9a <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x36>
    bb98:	e176      	b.n	be88 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x324>
    int16_t x2 = x + w - 1, y2 = y + h - 1;
    bb9a:	b28f      	uxth	r7, r1
    bb9c:	1978      	adds	r0, r7, r5
    bb9e:	b280      	uxth	r0, r0
    bba0:	4684      	mov	ip, r0
    bba2:	3801      	subs	r0, #1
    bba4:	b200      	sxth	r0, r0
    if((x2 < 0) || (y2 < 0)) return;
    bba6:	2800      	cmp	r0, #0
    bba8:	da00      	bge.n	bbac <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x48>
    bbaa:	e16d      	b.n	be88 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x324>
    bbac:	2a00      	cmp	r2, #0
    bbae:	da00      	bge.n	bbb2 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x4e>
    bbb0:	e16a      	b.n	be88 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x324>
    if(x < 0) {
    bbb2:	2900      	cmp	r1, #0
    bbb4:	da00      	bge.n	bbb8 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x54>
    bbb6:	e1d5      	b.n	bf64 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x400>
    if(x2 >= _width)  w = _width  - x;
    bbb8:	4283      	cmp	r3, r0
    bbba:	dc01      	bgt.n	bbc0 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x5c>
    bbbc:	1bdb      	subs	r3, r3, r7
    bbbe:	b21d      	sxth	r5, r3
    setAddrWindow(x, y, w, h);
    bbc0:	2101      	movs	r1, #1
    bbc2:	b2ab      	uxth	r3, r5
    bbc4:	b292      	uxth	r2, r2
    bbc6:	9100      	str	r1, [sp, #0]
    bbc8:	0020      	movs	r0, r4
    bbca:	4688      	mov	r8, r1
    bbcc:	0039      	movs	r1, r7
    bbce:	f7fe fb2f 	bl	a230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    uint8_t hi = color >> 8, lo = color;
    bbd2:	1232      	asrs	r2, r6, #8
    bbd4:	b2d3      	uxtb	r3, r2
    bbd6:	0018      	movs	r0, r3
    bbd8:	930c      	str	r3, [sp, #48]	; 0x30
    if(_sclk < 0){ //AVR Optimization
    bbda:	6b23      	ldr	r3, [r4, #48]	; 0x30
    uint8_t hi = color >> 8, lo = color;
    bbdc:	b2f7      	uxtb	r7, r6
    if(_sclk < 0){ //AVR Optimization
    bbde:	930d      	str	r3, [sp, #52]	; 0x34
    bbe0:	2b00      	cmp	r3, #0
    bbe2:	da00      	bge.n	bbe6 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x82>
    bbe4:	e1ae      	b.n	bf44 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x3e0>
    for (uint32_t t=len; t; t--){
    bbe6:	2d00      	cmp	r5, #0
    bbe8:	d100      	bne.n	bbec <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x88>
    bbea:	e14d      	b.n	be88 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x324>
        if((b) & bit){
    bbec:	2340      	movs	r3, #64	; 0x40
    bbee:	0001      	movs	r1, r0
    bbf0:	4019      	ands	r1, r3
    bbf2:	9106      	str	r1, [sp, #24]
    bbf4:	0001      	movs	r1, r0
    bbf6:	469b      	mov	fp, r3
    bbf8:	3b20      	subs	r3, #32
    bbfa:	4018      	ands	r0, r3
    bbfc:	9007      	str	r0, [sp, #28]
    bbfe:	0008      	movs	r0, r1
    bc00:	469a      	mov	sl, r3
    bc02:	3b10      	subs	r3, #16
    bc04:	4019      	ands	r1, r3
    bc06:	9108      	str	r1, [sp, #32]
    bc08:	0001      	movs	r1, r0
    bc0a:	4699      	mov	r9, r3
    bc0c:	3b08      	subs	r3, #8
    bc0e:	4019      	ands	r1, r3
    bc10:	9109      	str	r1, [sp, #36]	; 0x24
    bc12:	0001      	movs	r1, r0
    bc14:	469c      	mov	ip, r3
    bc16:	3b04      	subs	r3, #4
    bc18:	4019      	ands	r1, r3
    bc1a:	910a      	str	r1, [sp, #40]	; 0x28
    bc1c:	2102      	movs	r1, #2
    bc1e:	4643      	mov	r3, r8
    bc20:	4008      	ands	r0, r1
    bc22:	900b      	str	r0, [sp, #44]	; 0x2c
    bc24:	980c      	ldr	r0, [sp, #48]	; 0x30
    bc26:	4039      	ands	r1, r7
    bc28:	4003      	ands	r3, r0
    bc2a:	9302      	str	r3, [sp, #8]
    bc2c:	465b      	mov	r3, fp
    bc2e:	403b      	ands	r3, r7
    bc30:	469b      	mov	fp, r3
    bc32:	4653      	mov	r3, sl
    bc34:	403b      	ands	r3, r7
    bc36:	469a      	mov	sl, r3
    bc38:	464b      	mov	r3, r9
    bc3a:	403b      	ands	r3, r7
    bc3c:	4699      	mov	r9, r3
    bc3e:	4663      	mov	r3, ip
    bc40:	403b      	ands	r3, r7
    bc42:	9303      	str	r3, [sp, #12]
    bc44:	4643      	mov	r3, r8
    bc46:	403b      	ands	r3, r7
    bc48:	4698      	mov	r8, r3
    bc4a:	2004      	movs	r0, #4
    bc4c:	b253      	sxtb	r3, r2
    bc4e:	001a      	movs	r2, r3
    bc50:	4038      	ands	r0, r7
    bc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bc54:	9004      	str	r0, [sp, #16]
    bc56:	970d      	str	r7, [sp, #52]	; 0x34
    bc58:	9105      	str	r1, [sp, #20]
    bc5a:	4647      	mov	r7, r8
    bc5c:	46b0      	mov	r8, r6
    bc5e:	465e      	mov	r6, fp
    bc60:	4693      	mov	fp, r2
    bc62:	e0ff      	b.n	be64 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x300>
            SSPI_MOSI_LOW();
    bc64:	6811      	ldr	r1, [r2, #0]
    bc66:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bc68:	4381      	bics	r1, r0
    bc6a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bc6c:	6819      	ldr	r1, [r3, #0]
    bc6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bc70:	4381      	bics	r1, r0
    bc72:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bc74:	6819      	ldr	r1, [r3, #0]
    bc76:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bc78:	4301      	orrs	r1, r0
    bc7a:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    bc7c:	9906      	ldr	r1, [sp, #24]
    bc7e:	2900      	cmp	r1, #0
    bc80:	d000      	beq.n	bc84 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x120>
    bc82:	e14d      	b.n	bf20 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x3bc>
            SSPI_MOSI_LOW();
    bc84:	6811      	ldr	r1, [r2, #0]
    bc86:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bc88:	4381      	bics	r1, r0
    bc8a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bc8c:	6819      	ldr	r1, [r3, #0]
    bc8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bc90:	4381      	bics	r1, r0
    bc92:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bc94:	6819      	ldr	r1, [r3, #0]
    bc96:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bc98:	4301      	orrs	r1, r0
    bc9a:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    bc9c:	9907      	ldr	r1, [sp, #28]
    bc9e:	2900      	cmp	r1, #0
    bca0:	d000      	beq.n	bca4 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x140>
    bca2:	e138      	b.n	bf16 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x3b2>
            SSPI_MOSI_LOW();
    bca4:	6811      	ldr	r1, [r2, #0]
    bca6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bca8:	4381      	bics	r1, r0
    bcaa:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bcac:	6819      	ldr	r1, [r3, #0]
    bcae:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bcb0:	4381      	bics	r1, r0
    bcb2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bcb4:	6819      	ldr	r1, [r3, #0]
    bcb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bcb8:	4301      	orrs	r1, r0
    bcba:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    bcbc:	9908      	ldr	r1, [sp, #32]
    bcbe:	2900      	cmp	r1, #0
    bcc0:	d000      	beq.n	bcc4 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x160>
    bcc2:	e123      	b.n	bf0c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x3a8>
            SSPI_MOSI_LOW();
    bcc4:	6811      	ldr	r1, [r2, #0]
    bcc6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bcc8:	4381      	bics	r1, r0
    bcca:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bccc:	6819      	ldr	r1, [r3, #0]
    bcce:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bcd0:	4381      	bics	r1, r0
    bcd2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bcd4:	6819      	ldr	r1, [r3, #0]
    bcd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bcd8:	4301      	orrs	r1, r0
    bcda:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    bcdc:	9909      	ldr	r1, [sp, #36]	; 0x24
    bcde:	2900      	cmp	r1, #0
    bce0:	d000      	beq.n	bce4 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x180>
    bce2:	e10e      	b.n	bf02 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x39e>
            SSPI_MOSI_LOW();
    bce4:	6811      	ldr	r1, [r2, #0]
    bce6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bce8:	4381      	bics	r1, r0
    bcea:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bcec:	6819      	ldr	r1, [r3, #0]
    bcee:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bcf0:	4381      	bics	r1, r0
    bcf2:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bcf4:	6819      	ldr	r1, [r3, #0]
    bcf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bcf8:	4301      	orrs	r1, r0
    bcfa:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    bcfc:	990a      	ldr	r1, [sp, #40]	; 0x28
    bcfe:	2900      	cmp	r1, #0
    bd00:	d000      	beq.n	bd04 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x1a0>
    bd02:	e0f9      	b.n	bef8 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x394>
            SSPI_MOSI_LOW();
    bd04:	6811      	ldr	r1, [r2, #0]
    bd06:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bd08:	4381      	bics	r1, r0
    bd0a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bd0c:	6819      	ldr	r1, [r3, #0]
    bd0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bd10:	4381      	bics	r1, r0
    bd12:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bd14:	6819      	ldr	r1, [r3, #0]
    bd16:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bd18:	4301      	orrs	r1, r0
    bd1a:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    bd1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bd1e:	2900      	cmp	r1, #0
    bd20:	d000      	beq.n	bd24 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x1c0>
    bd22:	e0e1      	b.n	bee8 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x384>
            SSPI_MOSI_LOW();
    bd24:	6811      	ldr	r1, [r2, #0]
    bd26:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bd28:	4381      	bics	r1, r0
    bd2a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bd2c:	6819      	ldr	r1, [r3, #0]
    bd2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bd30:	4381      	bics	r1, r0
    bd32:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bd34:	6819      	ldr	r1, [r3, #0]
    bd36:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bd38:	4301      	orrs	r1, r0
    bd3a:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    bd3c:	9902      	ldr	r1, [sp, #8]
    bd3e:	2900      	cmp	r1, #0
    bd40:	d100      	bne.n	bd44 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x1e0>
    bd42:	e0cc      	b.n	bede <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x37a>
            SSPI_MOSI_HIGH();
    bd44:	6811      	ldr	r1, [r2, #0]
    bd46:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bd48:	4301      	orrs	r1, r0
    bd4a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bd4c:	681a      	ldr	r2, [r3, #0]
    bd4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    bd50:	438a      	bics	r2, r1
    bd52:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    bd54:	681a      	ldr	r2, [r3, #0]
    bd56:	6da1      	ldr	r1, [r4, #88]	; 0x58
    bd58:	430a      	orrs	r2, r1
    bd5a:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    bd5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    bd5e:	2b00      	cmp	r3, #0
    bd60:	da00      	bge.n	bd64 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x200>
    bd62:	e0ea      	b.n	bf3a <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x3d6>
        if((b) & bit){
    bd64:	4641      	mov	r1, r8
    bd66:	6c63      	ldr	r3, [r4, #68]	; 0x44
    bd68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    bd6a:	0609      	lsls	r1, r1, #24
    bd6c:	d500      	bpl.n	bd70 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x20c>
    bd6e:	e0b1      	b.n	bed4 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x370>
            SSPI_MOSI_LOW();
    bd70:	6811      	ldr	r1, [r2, #0]
    bd72:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bd74:	4381      	bics	r1, r0
    bd76:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bd78:	6819      	ldr	r1, [r3, #0]
    bd7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bd7c:	4381      	bics	r1, r0
    bd7e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bd80:	6819      	ldr	r1, [r3, #0]
    bd82:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bd84:	4301      	orrs	r1, r0
    bd86:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    bd88:	6811      	ldr	r1, [r2, #0]
    bd8a:	6d20      	ldr	r0, [r4, #80]	; 0x50
        if((b) & bit){
    bd8c:	2e00      	cmp	r6, #0
    bd8e:	d000      	beq.n	bd92 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x22e>
    bd90:	e09d      	b.n	bece <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x36a>
            SSPI_MOSI_LOW();
    bd92:	4381      	bics	r1, r0
    bd94:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bd96:	6819      	ldr	r1, [r3, #0]
    bd98:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bd9a:	4381      	bics	r1, r0
    bd9c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bd9e:	6819      	ldr	r1, [r3, #0]
    bda0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bda2:	4301      	orrs	r1, r0
    bda4:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    bda6:	4651      	mov	r1, sl
    bda8:	2900      	cmp	r1, #0
    bdaa:	d000      	beq.n	bdae <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x24a>
    bdac:	e08a      	b.n	bec4 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x360>
            SSPI_MOSI_LOW();
    bdae:	6811      	ldr	r1, [r2, #0]
    bdb0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bdb2:	4381      	bics	r1, r0
    bdb4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bdb6:	6819      	ldr	r1, [r3, #0]
    bdb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bdba:	4381      	bics	r1, r0
    bdbc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bdbe:	6819      	ldr	r1, [r3, #0]
    bdc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bdc2:	4301      	orrs	r1, r0
    bdc4:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    bdc6:	4649      	mov	r1, r9
    bdc8:	2900      	cmp	r1, #0
    bdca:	d000      	beq.n	bdce <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x26a>
    bdcc:	e075      	b.n	beba <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x356>
            SSPI_MOSI_LOW();
    bdce:	6811      	ldr	r1, [r2, #0]
    bdd0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bdd2:	4381      	bics	r1, r0
    bdd4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bdd6:	6819      	ldr	r1, [r3, #0]
    bdd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bdda:	4381      	bics	r1, r0
    bddc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bdde:	6819      	ldr	r1, [r3, #0]
    bde0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bde2:	4301      	orrs	r1, r0
    bde4:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    bde6:	9903      	ldr	r1, [sp, #12]
    bde8:	2900      	cmp	r1, #0
    bdea:	d161      	bne.n	beb0 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x34c>
            SSPI_MOSI_LOW();
    bdec:	6811      	ldr	r1, [r2, #0]
    bdee:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bdf0:	4381      	bics	r1, r0
    bdf2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    bdf4:	6819      	ldr	r1, [r3, #0]
    bdf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bdf8:	4381      	bics	r1, r0
    bdfa:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    bdfc:	6819      	ldr	r1, [r3, #0]
    bdfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    be00:	4301      	orrs	r1, r0
    be02:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    be04:	9904      	ldr	r1, [sp, #16]
    be06:	2900      	cmp	r1, #0
    be08:	d14d      	bne.n	bea6 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x342>
            SSPI_MOSI_LOW();
    be0a:	6811      	ldr	r1, [r2, #0]
    be0c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    be0e:	4381      	bics	r1, r0
    be10:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    be12:	6819      	ldr	r1, [r3, #0]
    be14:	6da0      	ldr	r0, [r4, #88]	; 0x58
    be16:	4381      	bics	r1, r0
    be18:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    be1a:	6819      	ldr	r1, [r3, #0]
    be1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    be1e:	4301      	orrs	r1, r0
    be20:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    be22:	9905      	ldr	r1, [sp, #20]
    be24:	2900      	cmp	r1, #0
    be26:	d139      	bne.n	be9c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x338>
            SSPI_MOSI_LOW();
    be28:	6811      	ldr	r1, [r2, #0]
    be2a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    be2c:	4381      	bics	r1, r0
    be2e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    be30:	6819      	ldr	r1, [r3, #0]
    be32:	6da0      	ldr	r0, [r4, #88]	; 0x58
    be34:	4381      	bics	r1, r0
    be36:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    be38:	6819      	ldr	r1, [r3, #0]
    be3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    be3c:	4301      	orrs	r1, r0
    be3e:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    be40:	6811      	ldr	r1, [r2, #0]
    be42:	6d20      	ldr	r0, [r4, #80]	; 0x50
        if((b) & bit){
    be44:	2f00      	cmp	r7, #0
    be46:	d026      	beq.n	be96 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x332>
            SSPI_MOSI_HIGH();
    be48:	4301      	orrs	r1, r0
    be4a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    be4c:	681a      	ldr	r2, [r3, #0]
    be4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    be50:	438a      	bics	r2, r1
    be52:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    be54:	681a      	ldr	r2, [r3, #0]
    be56:	6da1      	ldr	r1, [r4, #88]	; 0x58
    be58:	430a      	orrs	r2, r1
    be5a:	601a      	str	r2, [r3, #0]
    for (uint32_t t=len; t; t--){
    be5c:	3d01      	subs	r5, #1
    be5e:	2d00      	cmp	r5, #0
    be60:	d012      	beq.n	be88 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x324>
    be62:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if(_sclk < 0){
    be64:	2b00      	cmp	r3, #0
    be66:	db60      	blt.n	bf2a <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x3c6>
        if((b) & bit){
    be68:	4659      	mov	r1, fp
    be6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    be6c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    be6e:	2900      	cmp	r1, #0
    be70:	db00      	blt.n	be74 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x310>
    be72:	e6f7      	b.n	bc64 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x100>
            SSPI_MOSI_HIGH();
    be74:	6811      	ldr	r1, [r2, #0]
    be76:	6d20      	ldr	r0, [r4, #80]	; 0x50
    be78:	4301      	orrs	r1, r0
    be7a:	6011      	str	r1, [r2, #0]
    be7c:	e6f6      	b.n	bc6c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x108>
    writeFillRect(x, y, w, 1, color);
    be7e:	2301      	movs	r3, #1
    be80:	9601      	str	r6, [sp, #4]
    be82:	9300      	str	r3, [sp, #0]
    be84:	002b      	movs	r3, r5
    be86:	47b8      	blx	r7
}
    be88:	b00f      	add	sp, #60	; 0x3c
    be8a:	bc3c      	pop	{r2, r3, r4, r5}
    be8c:	4690      	mov	r8, r2
    be8e:	4699      	mov	r9, r3
    be90:	46a2      	mov	sl, r4
    be92:	46ab      	mov	fp, r5
    be94:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SSPI_MOSI_LOW();
    be96:	4381      	bics	r1, r0
    be98:	6011      	str	r1, [r2, #0]
    be9a:	e7d7      	b.n	be4c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x2e8>
            SSPI_MOSI_HIGH();
    be9c:	6811      	ldr	r1, [r2, #0]
    be9e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bea0:	4301      	orrs	r1, r0
    bea2:	6011      	str	r1, [r2, #0]
    bea4:	e7c4      	b.n	be30 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x2cc>
    bea6:	6811      	ldr	r1, [r2, #0]
    bea8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    beaa:	4301      	orrs	r1, r0
    beac:	6011      	str	r1, [r2, #0]
    beae:	e7b0      	b.n	be12 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x2ae>
    beb0:	6811      	ldr	r1, [r2, #0]
    beb2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    beb4:	4301      	orrs	r1, r0
    beb6:	6011      	str	r1, [r2, #0]
    beb8:	e79c      	b.n	bdf4 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x290>
    beba:	6811      	ldr	r1, [r2, #0]
    bebc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bebe:	4301      	orrs	r1, r0
    bec0:	6011      	str	r1, [r2, #0]
    bec2:	e788      	b.n	bdd6 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x272>
    bec4:	6811      	ldr	r1, [r2, #0]
    bec6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bec8:	4301      	orrs	r1, r0
    beca:	6011      	str	r1, [r2, #0]
    becc:	e773      	b.n	bdb6 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x252>
    bece:	4301      	orrs	r1, r0
    bed0:	6011      	str	r1, [r2, #0]
    bed2:	e760      	b.n	bd96 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x232>
    bed4:	6811      	ldr	r1, [r2, #0]
    bed6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bed8:	4301      	orrs	r1, r0
    beda:	6011      	str	r1, [r2, #0]
    bedc:	e74c      	b.n	bd78 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x214>
            SSPI_MOSI_LOW();
    bede:	6811      	ldr	r1, [r2, #0]
    bee0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bee2:	4381      	bics	r1, r0
    bee4:	6011      	str	r1, [r2, #0]
    bee6:	e731      	b.n	bd4c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x1e8>
            SSPI_MOSI_HIGH();
    bee8:	6811      	ldr	r1, [r2, #0]
    beea:	6d20      	ldr	r0, [r4, #80]	; 0x50
    beec:	4301      	orrs	r1, r0
    beee:	6011      	str	r1, [r2, #0]
    bef0:	e71c      	b.n	bd2c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x1c8>
    bef2:	46c0      	nop			; (mov r8, r8)
    bef4:	0000b381 	.word	0x0000b381
    bef8:	6811      	ldr	r1, [r2, #0]
    befa:	6d20      	ldr	r0, [r4, #80]	; 0x50
    befc:	4301      	orrs	r1, r0
    befe:	6011      	str	r1, [r2, #0]
    bf00:	e704      	b.n	bd0c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x1a8>
    bf02:	6811      	ldr	r1, [r2, #0]
    bf04:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bf06:	4301      	orrs	r1, r0
    bf08:	6011      	str	r1, [r2, #0]
    bf0a:	e6ef      	b.n	bcec <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x188>
    bf0c:	6811      	ldr	r1, [r2, #0]
    bf0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bf10:	4301      	orrs	r1, r0
    bf12:	6011      	str	r1, [r2, #0]
    bf14:	e6da      	b.n	bccc <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x168>
    bf16:	6811      	ldr	r1, [r2, #0]
    bf18:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bf1a:	4301      	orrs	r1, r0
    bf1c:	6011      	str	r1, [r2, #0]
    bf1e:	e6c5      	b.n	bcac <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x148>
    bf20:	6811      	ldr	r1, [r2, #0]
    bf22:	6d20      	ldr	r0, [r4, #80]	; 0x50
    bf24:	4301      	orrs	r1, r0
    bf26:	6011      	str	r1, [r2, #0]
    bf28:	e6b0      	b.n	bc8c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x128>
        HSPI_WRITE(b);
    bf2a:	990c      	ldr	r1, [sp, #48]	; 0x30
    bf2c:	480f      	ldr	r0, [pc, #60]	; (bf6c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x408>)
    bf2e:	f002 fd1b 	bl	e968 <_ZN8SPIClass8transferEh>
    if(_sclk < 0){
    bf32:	6b23      	ldr	r3, [r4, #48]	; 0x30
    bf34:	2b00      	cmp	r3, #0
    bf36:	db00      	blt.n	bf3a <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x3d6>
    bf38:	e714      	b.n	bd64 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x200>
        HSPI_WRITE(b);
    bf3a:	990d      	ldr	r1, [sp, #52]	; 0x34
    bf3c:	480b      	ldr	r0, [pc, #44]	; (bf6c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x408>)
    bf3e:	f002 fd13 	bl	e968 <_ZN8SPIClass8transferEh>
    bf42:	e78b      	b.n	be5c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x2f8>
        for (uint32_t t=len; t; t--){
    bf44:	2d00      	cmp	r5, #0
    bf46:	d09f      	beq.n	be88 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x324>
    bf48:	0006      	movs	r6, r0
    bf4a:	4c08      	ldr	r4, [pc, #32]	; (bf6c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x408>)
            HSPI_WRITE(hi);
    bf4c:	0031      	movs	r1, r6
    bf4e:	0020      	movs	r0, r4
    bf50:	f002 fd0a 	bl	e968 <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    bf54:	3d01      	subs	r5, #1
            HSPI_WRITE(lo);
    bf56:	0039      	movs	r1, r7
    bf58:	0020      	movs	r0, r4
    bf5a:	f002 fd05 	bl	e968 <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    bf5e:	2d00      	cmp	r5, #0
    bf60:	d1f4      	bne.n	bf4c <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x3e8>
    bf62:	e791      	b.n	be88 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x324>
        w = x2 + 1;
    bf64:	4661      	mov	r1, ip
    bf66:	2700      	movs	r7, #0
    bf68:	b20d      	sxth	r5, r1
    bf6a:	e625      	b.n	bbb8 <_ZN16Adafruit_ILI934114writeFastHLineEssst+0x54>
    bf6c:	20000a0c 	.word	0x20000a0c

0000bf70 <_ZN16Adafruit_ILI934114writeFastVLineEssst>:
void Adafruit_ILI9341::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color){
    bf70:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf72:	4657      	mov	r7, sl
    bf74:	464e      	mov	r6, r9
    bf76:	4645      	mov	r5, r8
    bf78:	46de      	mov	lr, fp
    bf7a:	b5e0      	push	{r5, r6, r7, lr}
    bf7c:	b08f      	sub	sp, #60	; 0x3c
    bf7e:	001d      	movs	r5, r3
    bf80:	ab18      	add	r3, sp, #96	; 0x60
    bf82:	881e      	ldrh	r6, [r3, #0]
    writeFillRect(x, y, 1, h, color);
    bf84:	6803      	ldr	r3, [r0, #0]
void Adafruit_ILI9341::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color){
    bf86:	0004      	movs	r4, r0
    writeFillRect(x, y, 1, h, color);
    bf88:	69df      	ldr	r7, [r3, #28]
    bf8a:	4bde      	ldr	r3, [pc, #888]	; (c304 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x394>)
    bf8c:	429f      	cmp	r7, r3
    bf8e:	d000      	beq.n	bf92 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x22>
    bf90:	e17e      	b.n	c290 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x320>
    if((x >= _width) || (y >= _height)) return;
    bf92:	200c      	movs	r0, #12
    bf94:	5e23      	ldrsh	r3, [r4, r0]
    bf96:	428b      	cmp	r3, r1
    bf98:	dc00      	bgt.n	bf9c <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x2c>
    bf9a:	e17d      	b.n	c298 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x328>
    bf9c:	200e      	movs	r0, #14
    bf9e:	5e23      	ldrsh	r3, [r4, r0]
    bfa0:	429a      	cmp	r2, r3
    bfa2:	db00      	blt.n	bfa6 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x36>
    bfa4:	e178      	b.n	c298 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x328>
    int16_t x2 = x + w - 1, y2 = y + h - 1;
    bfa6:	b290      	uxth	r0, r2
    bfa8:	1947      	adds	r7, r0, r5
    bfaa:	b2bf      	uxth	r7, r7
    bfac:	4684      	mov	ip, r0
    bfae:	1e78      	subs	r0, r7, #1
    bfb0:	b200      	sxth	r0, r0
    if((x2 < 0) || (y2 < 0)) return;
    bfb2:	2900      	cmp	r1, #0
    bfb4:	da00      	bge.n	bfb8 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x48>
    bfb6:	e16f      	b.n	c298 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x328>
    bfb8:	2800      	cmp	r0, #0
    bfba:	da00      	bge.n	bfbe <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x4e>
    bfbc:	e16c      	b.n	c298 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x328>
    if(y < 0) {
    bfbe:	2a00      	cmp	r2, #0
    bfc0:	da00      	bge.n	bfc4 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x54>
    bfc2:	e1d7      	b.n	c374 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x404>
    if(y2 >= _height) h = _height - y;
    bfc4:	4283      	cmp	r3, r0
    bfc6:	dc02      	bgt.n	bfce <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x5e>
    bfc8:	4662      	mov	r2, ip
    bfca:	1a9d      	subs	r5, r3, r2
    bfcc:	b22d      	sxth	r5, r5
    setAddrWindow(x, y, w, h);
    bfce:	b2ab      	uxth	r3, r5
    bfd0:	b289      	uxth	r1, r1
    bfd2:	9300      	str	r3, [sp, #0]
    bfd4:	4662      	mov	r2, ip
    bfd6:	2301      	movs	r3, #1
    bfd8:	0020      	movs	r0, r4
    bfda:	f7fe f929 	bl	a230 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    uint8_t hi = color >> 8, lo = color;
    bfde:	1232      	asrs	r2, r6, #8
    bfe0:	b2d3      	uxtb	r3, r2
    bfe2:	0019      	movs	r1, r3
    bfe4:	930c      	str	r3, [sp, #48]	; 0x30
    if(_sclk < 0){ //AVR Optimization
    bfe6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    uint8_t hi = color >> 8, lo = color;
    bfe8:	b2f7      	uxtb	r7, r6
    if(_sclk < 0){ //AVR Optimization
    bfea:	930d      	str	r3, [sp, #52]	; 0x34
    bfec:	2b00      	cmp	r3, #0
    bfee:	da00      	bge.n	bff2 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x82>
    bff0:	e1b0      	b.n	c354 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x3e4>
    for (uint32_t t=len; t; t--){
    bff2:	2d00      	cmp	r5, #0
    bff4:	d100      	bne.n	bff8 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x88>
    bff6:	e14f      	b.n	c298 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x328>
        if((b) & bit){
    bff8:	2040      	movs	r0, #64	; 0x40
    bffa:	4683      	mov	fp, r0
    bffc:	465b      	mov	r3, fp
    bffe:	0008      	movs	r0, r1
    c000:	4019      	ands	r1, r3
    c002:	9106      	str	r1, [sp, #24]
    c004:	0001      	movs	r1, r0
    c006:	3b20      	subs	r3, #32
    c008:	4018      	ands	r0, r3
    c00a:	9007      	str	r0, [sp, #28]
    c00c:	0008      	movs	r0, r1
    c00e:	469a      	mov	sl, r3
    c010:	3b10      	subs	r3, #16
    c012:	4019      	ands	r1, r3
    c014:	9108      	str	r1, [sp, #32]
    c016:	0001      	movs	r1, r0
    c018:	4699      	mov	r9, r3
    c01a:	3b08      	subs	r3, #8
    c01c:	4019      	ands	r1, r3
    c01e:	9109      	str	r1, [sp, #36]	; 0x24
    c020:	0001      	movs	r1, r0
    c022:	4698      	mov	r8, r3
    c024:	3b04      	subs	r3, #4
    c026:	4018      	ands	r0, r3
    c028:	469c      	mov	ip, r3
    c02a:	3b02      	subs	r3, #2
    c02c:	900a      	str	r0, [sp, #40]	; 0x28
    c02e:	0008      	movs	r0, r1
    c030:	4019      	ands	r1, r3
    c032:	910b      	str	r1, [sp, #44]	; 0x2c
    c034:	2101      	movs	r1, #1
    c036:	4008      	ands	r0, r1
    c038:	9003      	str	r0, [sp, #12]
    c03a:	4658      	mov	r0, fp
    c03c:	4038      	ands	r0, r7
    c03e:	4683      	mov	fp, r0
    c040:	4650      	mov	r0, sl
    c042:	4038      	ands	r0, r7
    c044:	4682      	mov	sl, r0
    c046:	4648      	mov	r0, r9
    c048:	4038      	ands	r0, r7
    c04a:	4681      	mov	r9, r0
    c04c:	4640      	mov	r0, r8
    c04e:	4038      	ands	r0, r7
    c050:	4680      	mov	r8, r0
    c052:	4660      	mov	r0, ip
    c054:	4038      	ands	r0, r7
    c056:	4039      	ands	r1, r7
    c058:	9004      	str	r0, [sp, #16]
    c05a:	0018      	movs	r0, r3
    c05c:	b253      	sxtb	r3, r2
    c05e:	001a      	movs	r2, r3
    c060:	9102      	str	r1, [sp, #8]
    c062:	0031      	movs	r1, r6
    c064:	4038      	ands	r0, r7
    c066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c068:	4656      	mov	r6, sl
    c06a:	970d      	str	r7, [sp, #52]	; 0x34
    c06c:	9005      	str	r0, [sp, #20]
    c06e:	465f      	mov	r7, fp
    c070:	468a      	mov	sl, r1
    c072:	4693      	mov	fp, r2
    c074:	e0ff      	b.n	c276 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x306>
            SSPI_MOSI_LOW();
    c076:	6811      	ldr	r1, [r2, #0]
    c078:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c07a:	4381      	bics	r1, r0
    c07c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c07e:	6819      	ldr	r1, [r3, #0]
    c080:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c082:	4381      	bics	r1, r0
    c084:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c086:	6819      	ldr	r1, [r3, #0]
    c088:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c08a:	4301      	orrs	r1, r0
    c08c:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c08e:	9906      	ldr	r1, [sp, #24]
    c090:	2900      	cmp	r1, #0
    c092:	d000      	beq.n	c096 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x126>
    c094:	e14c      	b.n	c330 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x3c0>
            SSPI_MOSI_LOW();
    c096:	6811      	ldr	r1, [r2, #0]
    c098:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c09a:	4381      	bics	r1, r0
    c09c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c09e:	6819      	ldr	r1, [r3, #0]
    c0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c0a2:	4381      	bics	r1, r0
    c0a4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c0a6:	6819      	ldr	r1, [r3, #0]
    c0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c0aa:	4301      	orrs	r1, r0
    c0ac:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c0ae:	9907      	ldr	r1, [sp, #28]
    c0b0:	2900      	cmp	r1, #0
    c0b2:	d000      	beq.n	c0b6 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x146>
    c0b4:	e137      	b.n	c326 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x3b6>
            SSPI_MOSI_LOW();
    c0b6:	6811      	ldr	r1, [r2, #0]
    c0b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c0ba:	4381      	bics	r1, r0
    c0bc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c0be:	6819      	ldr	r1, [r3, #0]
    c0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c0c2:	4381      	bics	r1, r0
    c0c4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c0c6:	6819      	ldr	r1, [r3, #0]
    c0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c0ca:	4301      	orrs	r1, r0
    c0cc:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c0ce:	9908      	ldr	r1, [sp, #32]
    c0d0:	2900      	cmp	r1, #0
    c0d2:	d000      	beq.n	c0d6 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x166>
    c0d4:	e122      	b.n	c31c <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x3ac>
            SSPI_MOSI_LOW();
    c0d6:	6811      	ldr	r1, [r2, #0]
    c0d8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c0da:	4381      	bics	r1, r0
    c0dc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c0de:	6819      	ldr	r1, [r3, #0]
    c0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c0e2:	4381      	bics	r1, r0
    c0e4:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c0e6:	6819      	ldr	r1, [r3, #0]
    c0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c0ea:	4301      	orrs	r1, r0
    c0ec:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c0ee:	9909      	ldr	r1, [sp, #36]	; 0x24
    c0f0:	2900      	cmp	r1, #0
    c0f2:	d000      	beq.n	c0f6 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x186>
    c0f4:	e10d      	b.n	c312 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x3a2>
            SSPI_MOSI_LOW();
    c0f6:	6811      	ldr	r1, [r2, #0]
    c0f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c0fa:	4381      	bics	r1, r0
    c0fc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c0fe:	6819      	ldr	r1, [r3, #0]
    c100:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c102:	4381      	bics	r1, r0
    c104:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c106:	6819      	ldr	r1, [r3, #0]
    c108:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c10a:	4301      	orrs	r1, r0
    c10c:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c10e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c110:	2900      	cmp	r1, #0
    c112:	d000      	beq.n	c116 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x1a6>
    c114:	e0f8      	b.n	c308 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x398>
            SSPI_MOSI_LOW();
    c116:	6811      	ldr	r1, [r2, #0]
    c118:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c11a:	4381      	bics	r1, r0
    c11c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c11e:	6819      	ldr	r1, [r3, #0]
    c120:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c122:	4381      	bics	r1, r0
    c124:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c126:	6819      	ldr	r1, [r3, #0]
    c128:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c12a:	4301      	orrs	r1, r0
    c12c:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c12e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c130:	2900      	cmp	r1, #0
    c132:	d000      	beq.n	c136 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x1c6>
    c134:	e0e0      	b.n	c2f8 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x388>
            SSPI_MOSI_LOW();
    c136:	6811      	ldr	r1, [r2, #0]
    c138:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c13a:	4381      	bics	r1, r0
    c13c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c13e:	6819      	ldr	r1, [r3, #0]
    c140:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c142:	4381      	bics	r1, r0
    c144:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c146:	6819      	ldr	r1, [r3, #0]
    c148:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c14a:	4301      	orrs	r1, r0
    c14c:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c14e:	9903      	ldr	r1, [sp, #12]
    c150:	2900      	cmp	r1, #0
    c152:	d100      	bne.n	c156 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x1e6>
    c154:	e0cb      	b.n	c2ee <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x37e>
            SSPI_MOSI_HIGH();
    c156:	6811      	ldr	r1, [r2, #0]
    c158:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c15a:	4301      	orrs	r1, r0
    c15c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c15e:	681a      	ldr	r2, [r3, #0]
    c160:	6da1      	ldr	r1, [r4, #88]	; 0x58
    c162:	438a      	bics	r2, r1
    c164:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    c166:	681a      	ldr	r2, [r3, #0]
    c168:	6da1      	ldr	r1, [r4, #88]	; 0x58
    c16a:	430a      	orrs	r2, r1
    c16c:	601a      	str	r2, [r3, #0]
    if(_sclk < 0){
    c16e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c170:	2b00      	cmp	r3, #0
    c172:	da00      	bge.n	c176 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x206>
    c174:	e0e9      	b.n	c34a <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x3da>
        if((b) & bit){
    c176:	4651      	mov	r1, sl
    c178:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c17a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    c17c:	0609      	lsls	r1, r1, #24
    c17e:	d500      	bpl.n	c182 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x212>
    c180:	e0b0      	b.n	c2e4 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x374>
            SSPI_MOSI_LOW();
    c182:	6811      	ldr	r1, [r2, #0]
    c184:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c186:	4381      	bics	r1, r0
    c188:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c18a:	6819      	ldr	r1, [r3, #0]
    c18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c18e:	4381      	bics	r1, r0
    c190:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c192:	6819      	ldr	r1, [r3, #0]
    c194:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c196:	4301      	orrs	r1, r0
    c198:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    c19a:	6811      	ldr	r1, [r2, #0]
    c19c:	6d20      	ldr	r0, [r4, #80]	; 0x50
        if((b) & bit){
    c19e:	2f00      	cmp	r7, #0
    c1a0:	d000      	beq.n	c1a4 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x234>
    c1a2:	e09c      	b.n	c2de <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x36e>
            SSPI_MOSI_LOW();
    c1a4:	4381      	bics	r1, r0
    c1a6:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c1a8:	6819      	ldr	r1, [r3, #0]
    c1aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c1ac:	4381      	bics	r1, r0
    c1ae:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c1b0:	6819      	ldr	r1, [r3, #0]
    c1b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c1b4:	4301      	orrs	r1, r0
    c1b6:	6019      	str	r1, [r3, #0]
            SSPI_MOSI_HIGH();
    c1b8:	6811      	ldr	r1, [r2, #0]
    c1ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
        if((b) & bit){
    c1bc:	2e00      	cmp	r6, #0
    c1be:	d000      	beq.n	c1c2 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x252>
    c1c0:	e08a      	b.n	c2d8 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x368>
            SSPI_MOSI_LOW();
    c1c2:	4381      	bics	r1, r0
    c1c4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c1c6:	6819      	ldr	r1, [r3, #0]
    c1c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c1ca:	4381      	bics	r1, r0
    c1cc:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c1ce:	6819      	ldr	r1, [r3, #0]
    c1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c1d2:	4301      	orrs	r1, r0
    c1d4:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c1d6:	4649      	mov	r1, r9
    c1d8:	2900      	cmp	r1, #0
    c1da:	d000      	beq.n	c1de <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x26e>
    c1dc:	e077      	b.n	c2ce <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x35e>
            SSPI_MOSI_LOW();
    c1de:	6811      	ldr	r1, [r2, #0]
    c1e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c1e2:	4381      	bics	r1, r0
    c1e4:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c1e6:	6819      	ldr	r1, [r3, #0]
    c1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c1ea:	4381      	bics	r1, r0
    c1ec:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c1ee:	6819      	ldr	r1, [r3, #0]
    c1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c1f2:	4301      	orrs	r1, r0
    c1f4:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c1f6:	4641      	mov	r1, r8
    c1f8:	2900      	cmp	r1, #0
    c1fa:	d163      	bne.n	c2c4 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x354>
            SSPI_MOSI_LOW();
    c1fc:	6811      	ldr	r1, [r2, #0]
    c1fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c200:	4381      	bics	r1, r0
    c202:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c204:	6819      	ldr	r1, [r3, #0]
    c206:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c208:	4381      	bics	r1, r0
    c20a:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c20c:	6819      	ldr	r1, [r3, #0]
    c20e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c210:	4301      	orrs	r1, r0
    c212:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c214:	9904      	ldr	r1, [sp, #16]
    c216:	2900      	cmp	r1, #0
    c218:	d14f      	bne.n	c2ba <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x34a>
            SSPI_MOSI_LOW();
    c21a:	6811      	ldr	r1, [r2, #0]
    c21c:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c21e:	4381      	bics	r1, r0
    c220:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c222:	6819      	ldr	r1, [r3, #0]
    c224:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c226:	4381      	bics	r1, r0
    c228:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c22a:	6819      	ldr	r1, [r3, #0]
    c22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c22e:	4301      	orrs	r1, r0
    c230:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c232:	9905      	ldr	r1, [sp, #20]
    c234:	2900      	cmp	r1, #0
    c236:	d13b      	bne.n	c2b0 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x340>
            SSPI_MOSI_LOW();
    c238:	6811      	ldr	r1, [r2, #0]
    c23a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c23c:	4381      	bics	r1, r0
    c23e:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c240:	6819      	ldr	r1, [r3, #0]
    c242:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c244:	4381      	bics	r1, r0
    c246:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c248:	6819      	ldr	r1, [r3, #0]
    c24a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c24c:	4301      	orrs	r1, r0
    c24e:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c250:	9902      	ldr	r1, [sp, #8]
    c252:	2900      	cmp	r1, #0
    c254:	d027      	beq.n	c2a6 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x336>
            SSPI_MOSI_HIGH();
    c256:	6811      	ldr	r1, [r2, #0]
    c258:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c25a:	4301      	orrs	r1, r0
    c25c:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c25e:	681a      	ldr	r2, [r3, #0]
    c260:	6da1      	ldr	r1, [r4, #88]	; 0x58
    c262:	438a      	bics	r2, r1
    c264:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    c266:	681a      	ldr	r2, [r3, #0]
    c268:	6da1      	ldr	r1, [r4, #88]	; 0x58
    c26a:	430a      	orrs	r2, r1
    c26c:	601a      	str	r2, [r3, #0]
    for (uint32_t t=len; t; t--){
    c26e:	3d01      	subs	r5, #1
    c270:	2d00      	cmp	r5, #0
    c272:	d011      	beq.n	c298 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x328>
    c274:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if(_sclk < 0){
    c276:	2b00      	cmp	r3, #0
    c278:	db5f      	blt.n	c33a <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x3ca>
        if((b) & bit){
    c27a:	4659      	mov	r1, fp
    c27c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c27e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    c280:	2900      	cmp	r1, #0
    c282:	db00      	blt.n	c286 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x316>
    c284:	e6f7      	b.n	c076 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x106>
            SSPI_MOSI_HIGH();
    c286:	6811      	ldr	r1, [r2, #0]
    c288:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c28a:	4301      	orrs	r1, r0
    c28c:	6011      	str	r1, [r2, #0]
    c28e:	e6f6      	b.n	c07e <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x10e>
    writeFillRect(x, y, 1, h, color);
    c290:	9601      	str	r6, [sp, #4]
    c292:	9500      	str	r5, [sp, #0]
    c294:	2301      	movs	r3, #1
    c296:	47b8      	blx	r7
}
    c298:	b00f      	add	sp, #60	; 0x3c
    c29a:	bc3c      	pop	{r2, r3, r4, r5}
    c29c:	4690      	mov	r8, r2
    c29e:	4699      	mov	r9, r3
    c2a0:	46a2      	mov	sl, r4
    c2a2:	46ab      	mov	fp, r5
    c2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SSPI_MOSI_LOW();
    c2a6:	6811      	ldr	r1, [r2, #0]
    c2a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c2aa:	4381      	bics	r1, r0
    c2ac:	6011      	str	r1, [r2, #0]
    c2ae:	e7d6      	b.n	c25e <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x2ee>
            SSPI_MOSI_HIGH();
    c2b0:	6811      	ldr	r1, [r2, #0]
    c2b2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c2b4:	4301      	orrs	r1, r0
    c2b6:	6011      	str	r1, [r2, #0]
    c2b8:	e7c2      	b.n	c240 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x2d0>
    c2ba:	6811      	ldr	r1, [r2, #0]
    c2bc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c2be:	4301      	orrs	r1, r0
    c2c0:	6011      	str	r1, [r2, #0]
    c2c2:	e7ae      	b.n	c222 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x2b2>
    c2c4:	6811      	ldr	r1, [r2, #0]
    c2c6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c2c8:	4301      	orrs	r1, r0
    c2ca:	6011      	str	r1, [r2, #0]
    c2cc:	e79a      	b.n	c204 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x294>
    c2ce:	6811      	ldr	r1, [r2, #0]
    c2d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c2d2:	4301      	orrs	r1, r0
    c2d4:	6011      	str	r1, [r2, #0]
    c2d6:	e786      	b.n	c1e6 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x276>
    c2d8:	4301      	orrs	r1, r0
    c2da:	6011      	str	r1, [r2, #0]
    c2dc:	e773      	b.n	c1c6 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x256>
    c2de:	4301      	orrs	r1, r0
    c2e0:	6011      	str	r1, [r2, #0]
    c2e2:	e761      	b.n	c1a8 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x238>
    c2e4:	6811      	ldr	r1, [r2, #0]
    c2e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c2e8:	4301      	orrs	r1, r0
    c2ea:	6011      	str	r1, [r2, #0]
    c2ec:	e74d      	b.n	c18a <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x21a>
            SSPI_MOSI_LOW();
    c2ee:	6811      	ldr	r1, [r2, #0]
    c2f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c2f2:	4381      	bics	r1, r0
    c2f4:	6011      	str	r1, [r2, #0]
    c2f6:	e732      	b.n	c15e <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x1ee>
            SSPI_MOSI_HIGH();
    c2f8:	6811      	ldr	r1, [r2, #0]
    c2fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c2fc:	4301      	orrs	r1, r0
    c2fe:	6011      	str	r1, [r2, #0]
    c300:	e71d      	b.n	c13e <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x1ce>
    c302:	46c0      	nop			; (mov r8, r8)
    c304:	0000b381 	.word	0x0000b381
    c308:	6811      	ldr	r1, [r2, #0]
    c30a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c30c:	4301      	orrs	r1, r0
    c30e:	6011      	str	r1, [r2, #0]
    c310:	e705      	b.n	c11e <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x1ae>
    c312:	6811      	ldr	r1, [r2, #0]
    c314:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c316:	4301      	orrs	r1, r0
    c318:	6011      	str	r1, [r2, #0]
    c31a:	e6f0      	b.n	c0fe <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x18e>
    c31c:	6811      	ldr	r1, [r2, #0]
    c31e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c320:	4301      	orrs	r1, r0
    c322:	6011      	str	r1, [r2, #0]
    c324:	e6db      	b.n	c0de <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x16e>
    c326:	6811      	ldr	r1, [r2, #0]
    c328:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c32a:	4301      	orrs	r1, r0
    c32c:	6011      	str	r1, [r2, #0]
    c32e:	e6c6      	b.n	c0be <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x14e>
    c330:	6811      	ldr	r1, [r2, #0]
    c332:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c334:	4301      	orrs	r1, r0
    c336:	6011      	str	r1, [r2, #0]
    c338:	e6b1      	b.n	c09e <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x12e>
        HSPI_WRITE(b);
    c33a:	990c      	ldr	r1, [sp, #48]	; 0x30
    c33c:	480f      	ldr	r0, [pc, #60]	; (c37c <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x40c>)
    c33e:	f002 fb13 	bl	e968 <_ZN8SPIClass8transferEh>
    if(_sclk < 0){
    c342:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c344:	2b00      	cmp	r3, #0
    c346:	db00      	blt.n	c34a <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x3da>
    c348:	e715      	b.n	c176 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x206>
        HSPI_WRITE(b);
    c34a:	990d      	ldr	r1, [sp, #52]	; 0x34
    c34c:	480b      	ldr	r0, [pc, #44]	; (c37c <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x40c>)
    c34e:	f002 fb0b 	bl	e968 <_ZN8SPIClass8transferEh>
    c352:	e78c      	b.n	c26e <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x2fe>
        for (uint32_t t=len; t; t--){
    c354:	2d00      	cmp	r5, #0
    c356:	d09f      	beq.n	c298 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x328>
    c358:	000e      	movs	r6, r1
    c35a:	4c08      	ldr	r4, [pc, #32]	; (c37c <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x40c>)
            HSPI_WRITE(hi);
    c35c:	0031      	movs	r1, r6
    c35e:	0020      	movs	r0, r4
    c360:	f002 fb02 	bl	e968 <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    c364:	3d01      	subs	r5, #1
            HSPI_WRITE(lo);
    c366:	0039      	movs	r1, r7
    c368:	0020      	movs	r0, r4
    c36a:	f002 fafd 	bl	e968 <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    c36e:	2d00      	cmp	r5, #0
    c370:	d1f4      	bne.n	c35c <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x3ec>
    c372:	e791      	b.n	c298 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x328>
        h = y2 + 1;
    c374:	2200      	movs	r2, #0
    c376:	b23d      	sxth	r5, r7
    c378:	4694      	mov	ip, r2
    c37a:	e623      	b.n	bfc4 <_ZN16Adafruit_ILI934114writeFastVLineEssst+0x54>
    c37c:	20000a0c 	.word	0x20000a0c

0000c380 <_ZN16Adafruit_ILI934110writePixelEt>:
    SPI_WRITE16(color);
    c380:	6b03      	ldr	r3, [r0, #48]	; 0x30
void Adafruit_ILI9341::writePixel(uint16_t color){
    c382:	b570      	push	{r4, r5, r6, lr}
    c384:	000d      	movs	r5, r1
    SPI_WRITE16(color);
    c386:	2b00      	cmp	r3, #0
    c388:	da00      	bge.n	c38c <_ZN16Adafruit_ILI934110writePixelEt+0xc>
    c38a:	e147      	b.n	c61c <_ZN16Adafruit_ILI934110writePixelEt+0x29c>
    c38c:	1209      	asrs	r1, r1, #8
    c38e:	b2cc      	uxtb	r4, r1
        if((b) & bit){
    c390:	b249      	sxtb	r1, r1
    c392:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c394:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    c396:	2900      	cmp	r1, #0
    c398:	da00      	bge.n	c39c <_ZN16Adafruit_ILI934110writePixelEt+0x1c>
    c39a:	e0ef      	b.n	c57c <_ZN16Adafruit_ILI934110writePixelEt+0x1fc>
            SSPI_MOSI_LOW();
    c39c:	6811      	ldr	r1, [r2, #0]
    c39e:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c3a0:	43b1      	bics	r1, r6
    c3a2:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c3a4:	6819      	ldr	r1, [r3, #0]
    c3a6:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c3a8:	43b1      	bics	r1, r6
    c3aa:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c3ac:	6819      	ldr	r1, [r3, #0]
    c3ae:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c3b0:	4331      	orrs	r1, r6
    c3b2:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c3b4:	0661      	lsls	r1, r4, #25
    c3b6:	d500      	bpl.n	c3ba <_ZN16Adafruit_ILI934110writePixelEt+0x3a>
    c3b8:	e103      	b.n	c5c2 <_ZN16Adafruit_ILI934110writePixelEt+0x242>
            SSPI_MOSI_LOW();
    c3ba:	6811      	ldr	r1, [r2, #0]
    c3bc:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c3be:	43b1      	bics	r1, r6
    c3c0:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c3c2:	6819      	ldr	r1, [r3, #0]
    c3c4:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c3c6:	43b1      	bics	r1, r6
    c3c8:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c3ca:	6819      	ldr	r1, [r3, #0]
    c3cc:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c3ce:	4331      	orrs	r1, r6
    c3d0:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c3d2:	06a1      	lsls	r1, r4, #26
    c3d4:	d500      	bpl.n	c3d8 <_ZN16Adafruit_ILI934110writePixelEt+0x58>
    c3d6:	e0ef      	b.n	c5b8 <_ZN16Adafruit_ILI934110writePixelEt+0x238>
            SSPI_MOSI_LOW();
    c3d8:	6811      	ldr	r1, [r2, #0]
    c3da:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c3dc:	43b1      	bics	r1, r6
    c3de:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c3e0:	6819      	ldr	r1, [r3, #0]
    c3e2:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c3e4:	43b1      	bics	r1, r6
    c3e6:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c3e8:	6819      	ldr	r1, [r3, #0]
    c3ea:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c3ec:	4331      	orrs	r1, r6
    c3ee:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c3f0:	06e1      	lsls	r1, r4, #27
    c3f2:	d500      	bpl.n	c3f6 <_ZN16Adafruit_ILI934110writePixelEt+0x76>
    c3f4:	e0db      	b.n	c5ae <_ZN16Adafruit_ILI934110writePixelEt+0x22e>
            SSPI_MOSI_LOW();
    c3f6:	6811      	ldr	r1, [r2, #0]
    c3f8:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c3fa:	43b1      	bics	r1, r6
    c3fc:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c3fe:	6819      	ldr	r1, [r3, #0]
    c400:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c402:	43b1      	bics	r1, r6
    c404:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c406:	6819      	ldr	r1, [r3, #0]
    c408:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c40a:	4331      	orrs	r1, r6
    c40c:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c40e:	0721      	lsls	r1, r4, #28
    c410:	d500      	bpl.n	c414 <_ZN16Adafruit_ILI934110writePixelEt+0x94>
    c412:	e0c7      	b.n	c5a4 <_ZN16Adafruit_ILI934110writePixelEt+0x224>
            SSPI_MOSI_LOW();
    c414:	6811      	ldr	r1, [r2, #0]
    c416:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c418:	43b1      	bics	r1, r6
    c41a:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c41c:	6819      	ldr	r1, [r3, #0]
    c41e:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c420:	43b1      	bics	r1, r6
    c422:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c424:	6819      	ldr	r1, [r3, #0]
    c426:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c428:	4331      	orrs	r1, r6
    c42a:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c42c:	0761      	lsls	r1, r4, #29
    c42e:	d500      	bpl.n	c432 <_ZN16Adafruit_ILI934110writePixelEt+0xb2>
    c430:	e0b3      	b.n	c59a <_ZN16Adafruit_ILI934110writePixelEt+0x21a>
            SSPI_MOSI_LOW();
    c432:	6811      	ldr	r1, [r2, #0]
    c434:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c436:	43b1      	bics	r1, r6
    c438:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c43a:	6819      	ldr	r1, [r3, #0]
    c43c:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c43e:	43b1      	bics	r1, r6
    c440:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c442:	6819      	ldr	r1, [r3, #0]
    c444:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c446:	4331      	orrs	r1, r6
    c448:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c44a:	07a1      	lsls	r1, r4, #30
    c44c:	d500      	bpl.n	c450 <_ZN16Adafruit_ILI934110writePixelEt+0xd0>
    c44e:	e09f      	b.n	c590 <_ZN16Adafruit_ILI934110writePixelEt+0x210>
            SSPI_MOSI_LOW();
    c450:	6811      	ldr	r1, [r2, #0]
    c452:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c454:	43b1      	bics	r1, r6
    c456:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c458:	6819      	ldr	r1, [r3, #0]
    c45a:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c45c:	43b1      	bics	r1, r6
    c45e:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c460:	6819      	ldr	r1, [r3, #0]
    c462:	6d86      	ldr	r6, [r0, #88]	; 0x58
    c464:	4331      	orrs	r1, r6
    c466:	6019      	str	r1, [r3, #0]
        if((b) & bit){
    c468:	07e1      	lsls	r1, r4, #31
    c46a:	d400      	bmi.n	c46e <_ZN16Adafruit_ILI934110writePixelEt+0xee>
    c46c:	e08b      	b.n	c586 <_ZN16Adafruit_ILI934110writePixelEt+0x206>
            SSPI_MOSI_HIGH();
    c46e:	6811      	ldr	r1, [r2, #0]
    c470:	6d04      	ldr	r4, [r0, #80]	; 0x50
    c472:	4321      	orrs	r1, r4
    c474:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c476:	6819      	ldr	r1, [r3, #0]
    c478:	6d84      	ldr	r4, [r0, #88]	; 0x58
    c47a:	43a1      	bics	r1, r4
    c47c:	6019      	str	r1, [r3, #0]
        SSPI_SCK_HIGH();
    c47e:	6d84      	ldr	r4, [r0, #88]	; 0x58
    c480:	6819      	ldr	r1, [r3, #0]
    c482:	4321      	orrs	r1, r4
    c484:	6019      	str	r1, [r3, #0]
    if(_sclk < 0){
    c486:	6b04      	ldr	r4, [r0, #48]	; 0x30
    SPI_WRITE16(color);
    c488:	b2e9      	uxtb	r1, r5
    if(_sclk < 0){
    c48a:	2c00      	cmp	r4, #0
    c48c:	da00      	bge.n	c490 <_ZN16Adafruit_ILI934110writePixelEt+0x110>
    c48e:	e0cf      	b.n	c630 <_ZN16Adafruit_ILI934110writePixelEt+0x2b0>
        if((b) & bit){
    c490:	062c      	lsls	r4, r5, #24
    c492:	d400      	bmi.n	c496 <_ZN16Adafruit_ILI934110writePixelEt+0x116>
    c494:	e09a      	b.n	c5cc <_ZN16Adafruit_ILI934110writePixelEt+0x24c>
            SSPI_MOSI_HIGH();
    c496:	6814      	ldr	r4, [r2, #0]
    c498:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c49a:	432c      	orrs	r4, r5
    c49c:	6014      	str	r4, [r2, #0]
        SSPI_SCK_LOW();
    c49e:	681c      	ldr	r4, [r3, #0]
    c4a0:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c4a2:	43ac      	bics	r4, r5
    c4a4:	601c      	str	r4, [r3, #0]
        SSPI_SCK_HIGH();
    c4a6:	681c      	ldr	r4, [r3, #0]
    c4a8:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c4aa:	432c      	orrs	r4, r5
    c4ac:	601c      	str	r4, [r3, #0]
        if((b) & bit){
    c4ae:	064c      	lsls	r4, r1, #25
    c4b0:	d400      	bmi.n	c4b4 <_ZN16Adafruit_ILI934110writePixelEt+0x134>
    c4b2:	e0ae      	b.n	c612 <_ZN16Adafruit_ILI934110writePixelEt+0x292>
            SSPI_MOSI_HIGH();
    c4b4:	6814      	ldr	r4, [r2, #0]
    c4b6:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c4b8:	432c      	orrs	r4, r5
    c4ba:	6014      	str	r4, [r2, #0]
        SSPI_SCK_LOW();
    c4bc:	681c      	ldr	r4, [r3, #0]
    c4be:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c4c0:	43ac      	bics	r4, r5
    c4c2:	601c      	str	r4, [r3, #0]
        SSPI_SCK_HIGH();
    c4c4:	681c      	ldr	r4, [r3, #0]
    c4c6:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c4c8:	432c      	orrs	r4, r5
    c4ca:	601c      	str	r4, [r3, #0]
        if((b) & bit){
    c4cc:	068c      	lsls	r4, r1, #26
    c4ce:	d400      	bmi.n	c4d2 <_ZN16Adafruit_ILI934110writePixelEt+0x152>
    c4d0:	e09a      	b.n	c608 <_ZN16Adafruit_ILI934110writePixelEt+0x288>
            SSPI_MOSI_HIGH();
    c4d2:	6814      	ldr	r4, [r2, #0]
    c4d4:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c4d6:	432c      	orrs	r4, r5
    c4d8:	6014      	str	r4, [r2, #0]
        SSPI_SCK_LOW();
    c4da:	681c      	ldr	r4, [r3, #0]
    c4dc:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c4de:	43ac      	bics	r4, r5
    c4e0:	601c      	str	r4, [r3, #0]
        SSPI_SCK_HIGH();
    c4e2:	681c      	ldr	r4, [r3, #0]
    c4e4:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c4e6:	432c      	orrs	r4, r5
    c4e8:	601c      	str	r4, [r3, #0]
        if((b) & bit){
    c4ea:	06cc      	lsls	r4, r1, #27
    c4ec:	d400      	bmi.n	c4f0 <_ZN16Adafruit_ILI934110writePixelEt+0x170>
    c4ee:	e086      	b.n	c5fe <_ZN16Adafruit_ILI934110writePixelEt+0x27e>
            SSPI_MOSI_HIGH();
    c4f0:	6814      	ldr	r4, [r2, #0]
    c4f2:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c4f4:	432c      	orrs	r4, r5
    c4f6:	6014      	str	r4, [r2, #0]
        SSPI_SCK_LOW();
    c4f8:	681c      	ldr	r4, [r3, #0]
    c4fa:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c4fc:	43ac      	bics	r4, r5
    c4fe:	601c      	str	r4, [r3, #0]
        SSPI_SCK_HIGH();
    c500:	681c      	ldr	r4, [r3, #0]
    c502:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c504:	432c      	orrs	r4, r5
    c506:	601c      	str	r4, [r3, #0]
        if((b) & bit){
    c508:	070c      	lsls	r4, r1, #28
    c50a:	d400      	bmi.n	c50e <_ZN16Adafruit_ILI934110writePixelEt+0x18e>
    c50c:	e072      	b.n	c5f4 <_ZN16Adafruit_ILI934110writePixelEt+0x274>
            SSPI_MOSI_HIGH();
    c50e:	6814      	ldr	r4, [r2, #0]
    c510:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c512:	432c      	orrs	r4, r5
    c514:	6014      	str	r4, [r2, #0]
        SSPI_SCK_LOW();
    c516:	681c      	ldr	r4, [r3, #0]
    c518:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c51a:	43ac      	bics	r4, r5
    c51c:	601c      	str	r4, [r3, #0]
        SSPI_SCK_HIGH();
    c51e:	681c      	ldr	r4, [r3, #0]
    c520:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c522:	432c      	orrs	r4, r5
    c524:	601c      	str	r4, [r3, #0]
        if((b) & bit){
    c526:	074c      	lsls	r4, r1, #29
    c528:	d55f      	bpl.n	c5ea <_ZN16Adafruit_ILI934110writePixelEt+0x26a>
            SSPI_MOSI_HIGH();
    c52a:	6814      	ldr	r4, [r2, #0]
    c52c:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c52e:	432c      	orrs	r4, r5
    c530:	6014      	str	r4, [r2, #0]
        SSPI_SCK_LOW();
    c532:	681c      	ldr	r4, [r3, #0]
    c534:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c536:	43ac      	bics	r4, r5
    c538:	601c      	str	r4, [r3, #0]
        SSPI_SCK_HIGH();
    c53a:	681c      	ldr	r4, [r3, #0]
    c53c:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c53e:	432c      	orrs	r4, r5
    c540:	601c      	str	r4, [r3, #0]
        if((b) & bit){
    c542:	078c      	lsls	r4, r1, #30
    c544:	d54c      	bpl.n	c5e0 <_ZN16Adafruit_ILI934110writePixelEt+0x260>
            SSPI_MOSI_HIGH();
    c546:	6814      	ldr	r4, [r2, #0]
    c548:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c54a:	432c      	orrs	r4, r5
    c54c:	6014      	str	r4, [r2, #0]
        SSPI_SCK_LOW();
    c54e:	681c      	ldr	r4, [r3, #0]
    c550:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c552:	43ac      	bics	r4, r5
    c554:	601c      	str	r4, [r3, #0]
        SSPI_SCK_HIGH();
    c556:	681c      	ldr	r4, [r3, #0]
    c558:	6d85      	ldr	r5, [r0, #88]	; 0x58
    c55a:	432c      	orrs	r4, r5
    c55c:	601c      	str	r4, [r3, #0]
        if((b) & bit){
    c55e:	07c9      	lsls	r1, r1, #31
    c560:	d539      	bpl.n	c5d6 <_ZN16Adafruit_ILI934110writePixelEt+0x256>
            SSPI_MOSI_HIGH();
    c562:	6811      	ldr	r1, [r2, #0]
    c564:	6d04      	ldr	r4, [r0, #80]	; 0x50
    c566:	4321      	orrs	r1, r4
    c568:	6011      	str	r1, [r2, #0]
        SSPI_SCK_LOW();
    c56a:	681a      	ldr	r2, [r3, #0]
    c56c:	6d81      	ldr	r1, [r0, #88]	; 0x58
    c56e:	438a      	bics	r2, r1
    c570:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    c572:	681a      	ldr	r2, [r3, #0]
    c574:	6d81      	ldr	r1, [r0, #88]	; 0x58
    c576:	430a      	orrs	r2, r1
    c578:	601a      	str	r2, [r3, #0]
}
    c57a:	bd70      	pop	{r4, r5, r6, pc}
            SSPI_MOSI_HIGH();
    c57c:	6811      	ldr	r1, [r2, #0]
    c57e:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c580:	4331      	orrs	r1, r6
    c582:	6011      	str	r1, [r2, #0]
    c584:	e70e      	b.n	c3a4 <_ZN16Adafruit_ILI934110writePixelEt+0x24>
            SSPI_MOSI_LOW();
    c586:	6811      	ldr	r1, [r2, #0]
    c588:	6d04      	ldr	r4, [r0, #80]	; 0x50
    c58a:	43a1      	bics	r1, r4
    c58c:	6011      	str	r1, [r2, #0]
    c58e:	e772      	b.n	c476 <_ZN16Adafruit_ILI934110writePixelEt+0xf6>
            SSPI_MOSI_HIGH();
    c590:	6811      	ldr	r1, [r2, #0]
    c592:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c594:	4331      	orrs	r1, r6
    c596:	6011      	str	r1, [r2, #0]
    c598:	e75e      	b.n	c458 <_ZN16Adafruit_ILI934110writePixelEt+0xd8>
    c59a:	6811      	ldr	r1, [r2, #0]
    c59c:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c59e:	4331      	orrs	r1, r6
    c5a0:	6011      	str	r1, [r2, #0]
    c5a2:	e74a      	b.n	c43a <_ZN16Adafruit_ILI934110writePixelEt+0xba>
    c5a4:	6811      	ldr	r1, [r2, #0]
    c5a6:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c5a8:	4331      	orrs	r1, r6
    c5aa:	6011      	str	r1, [r2, #0]
    c5ac:	e736      	b.n	c41c <_ZN16Adafruit_ILI934110writePixelEt+0x9c>
    c5ae:	6811      	ldr	r1, [r2, #0]
    c5b0:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c5b2:	4331      	orrs	r1, r6
    c5b4:	6011      	str	r1, [r2, #0]
    c5b6:	e722      	b.n	c3fe <_ZN16Adafruit_ILI934110writePixelEt+0x7e>
    c5b8:	6811      	ldr	r1, [r2, #0]
    c5ba:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c5bc:	4331      	orrs	r1, r6
    c5be:	6011      	str	r1, [r2, #0]
    c5c0:	e70e      	b.n	c3e0 <_ZN16Adafruit_ILI934110writePixelEt+0x60>
    c5c2:	6811      	ldr	r1, [r2, #0]
    c5c4:	6d06      	ldr	r6, [r0, #80]	; 0x50
    c5c6:	4331      	orrs	r1, r6
    c5c8:	6011      	str	r1, [r2, #0]
    c5ca:	e6fa      	b.n	c3c2 <_ZN16Adafruit_ILI934110writePixelEt+0x42>
            SSPI_MOSI_LOW();
    c5cc:	6814      	ldr	r4, [r2, #0]
    c5ce:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c5d0:	43ac      	bics	r4, r5
    c5d2:	6014      	str	r4, [r2, #0]
    c5d4:	e763      	b.n	c49e <_ZN16Adafruit_ILI934110writePixelEt+0x11e>
    c5d6:	6811      	ldr	r1, [r2, #0]
    c5d8:	6d04      	ldr	r4, [r0, #80]	; 0x50
    c5da:	43a1      	bics	r1, r4
    c5dc:	6011      	str	r1, [r2, #0]
    c5de:	e7c4      	b.n	c56a <_ZN16Adafruit_ILI934110writePixelEt+0x1ea>
    c5e0:	6814      	ldr	r4, [r2, #0]
    c5e2:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c5e4:	43ac      	bics	r4, r5
    c5e6:	6014      	str	r4, [r2, #0]
    c5e8:	e7b1      	b.n	c54e <_ZN16Adafruit_ILI934110writePixelEt+0x1ce>
    c5ea:	6814      	ldr	r4, [r2, #0]
    c5ec:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c5ee:	43ac      	bics	r4, r5
    c5f0:	6014      	str	r4, [r2, #0]
    c5f2:	e79e      	b.n	c532 <_ZN16Adafruit_ILI934110writePixelEt+0x1b2>
    c5f4:	6814      	ldr	r4, [r2, #0]
    c5f6:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c5f8:	43ac      	bics	r4, r5
    c5fa:	6014      	str	r4, [r2, #0]
    c5fc:	e78b      	b.n	c516 <_ZN16Adafruit_ILI934110writePixelEt+0x196>
    c5fe:	6814      	ldr	r4, [r2, #0]
    c600:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c602:	43ac      	bics	r4, r5
    c604:	6014      	str	r4, [r2, #0]
    c606:	e777      	b.n	c4f8 <_ZN16Adafruit_ILI934110writePixelEt+0x178>
    c608:	6814      	ldr	r4, [r2, #0]
    c60a:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c60c:	43ac      	bics	r4, r5
    c60e:	6014      	str	r4, [r2, #0]
    c610:	e763      	b.n	c4da <_ZN16Adafruit_ILI934110writePixelEt+0x15a>
    c612:	6814      	ldr	r4, [r2, #0]
    c614:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c616:	43ac      	bics	r4, r5
    c618:	6014      	str	r4, [r2, #0]
    c61a:	e74f      	b.n	c4bc <_ZN16Adafruit_ILI934110writePixelEt+0x13c>
    SPI_WRITE16(color);
    c61c:	4c06      	ldr	r4, [pc, #24]	; (c638 <_ZN16Adafruit_ILI934110writePixelEt+0x2b8>)
    c61e:	0a09      	lsrs	r1, r1, #8
    c620:	0020      	movs	r0, r4
    c622:	f002 f9a1 	bl	e968 <_ZN8SPIClass8transferEh>
    c626:	b2e9      	uxtb	r1, r5
    c628:	0020      	movs	r0, r4
    c62a:	f002 f99d 	bl	e968 <_ZN8SPIClass8transferEh>
    c62e:	e7a4      	b.n	c57a <_ZN16Adafruit_ILI934110writePixelEt+0x1fa>
        HSPI_WRITE(b);
    c630:	4801      	ldr	r0, [pc, #4]	; (c638 <_ZN16Adafruit_ILI934110writePixelEt+0x2b8>)
    c632:	f002 f999 	bl	e968 <_ZN8SPIClass8transferEh>
    c636:	e7a0      	b.n	c57a <_ZN16Adafruit_ILI934110writePixelEt+0x1fa>
    c638:	20000a0c 	.word	0x20000a0c

0000c63c <_ZN5SDLib4File9availableEv>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    c63c:	6a03      	ldr	r3, [r0, #32]
    c63e:	2b00      	cmp	r3, #0
    c640:	d008      	beq.n	c654 <_ZN5SDLib4File9availableEv+0x18>

  uint32_t n = size() - position();
    c642:	69d8      	ldr	r0, [r3, #28]
    c644:	691b      	ldr	r3, [r3, #16]
    c646:	1ac0      	subs	r0, r0, r3

  return n > 0X7FFF ? 0X7FFF : n;
    c648:	4b03      	ldr	r3, [pc, #12]	; (c658 <_ZN5SDLib4File9availableEv+0x1c>)
    c64a:	4298      	cmp	r0, r3
    c64c:	d800      	bhi.n	c650 <_ZN5SDLib4File9availableEv+0x14>
}
    c64e:	4770      	bx	lr
  return n > 0X7FFF ? 0X7FFF : n;
    c650:	0018      	movs	r0, r3
    c652:	e7fc      	b.n	c64e <_ZN5SDLib4File9availableEv+0x12>
    c654:	2000      	movs	r0, #0
    c656:	e7fa      	b.n	c64e <_ZN5SDLib4File9availableEv+0x12>
    c658:	00007fff 	.word	0x00007fff

0000c65c <_ZN5SDLib4File5writeEPKhj>:
size_t File::write(const uint8_t *buf, size_t size) {
    c65c:	b510      	push	{r4, lr}
    c65e:	0004      	movs	r4, r0
  if (!_file) {
    c660:	6a00      	ldr	r0, [r0, #32]
    c662:	2800      	cmp	r0, #0
    c664:	d008      	beq.n	c678 <_ZN5SDLib4File5writeEPKhj+0x1c>
    void setWriteError(int err = 1) { write_error = err; }
    c666:	2300      	movs	r3, #0
  t = _file->write(buf, size);
    c668:	b292      	uxth	r2, r2
    c66a:	6043      	str	r3, [r0, #4]
    c66c:	f001 f946 	bl	d8fc <_ZN6SdFile5writeEPKvt>
  if (_file->getWriteError()) {
    c670:	6a23      	ldr	r3, [r4, #32]
    c672:	685b      	ldr	r3, [r3, #4]
    c674:	2b00      	cmp	r3, #0
    c676:	d002      	beq.n	c67e <_ZN5SDLib4File5writeEPKhj+0x22>
    c678:	2301      	movs	r3, #1
    return 0;
    c67a:	2000      	movs	r0, #0
    c67c:	6063      	str	r3, [r4, #4]
}
    c67e:	bd10      	pop	{r4, pc}

0000c680 <_ZN5SDLib4File4readEv>:
int File::read() {
    c680:	b500      	push	{lr}
  if (_file) 
    c682:	6a00      	ldr	r0, [r0, #32]
int File::read() {
    c684:	b083      	sub	sp, #12
  if (_file) 
    c686:	2800      	cmp	r0, #0
    c688:	d006      	beq.n	c698 <_ZN5SDLib4File4readEv+0x18>
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    c68a:	466b      	mov	r3, sp
    c68c:	2201      	movs	r2, #1
    c68e:	1dd9      	adds	r1, r3, #7
    c690:	f000 fe8c 	bl	d3ac <_ZN6SdFile4readEPvt>
    c694:	2801      	cmp	r0, #1
    c696:	d003      	beq.n	c6a0 <_ZN5SDLib4File4readEv+0x20>
  return -1;
    c698:	2001      	movs	r0, #1
    c69a:	4240      	negs	r0, r0
}
    c69c:	b003      	add	sp, #12
    c69e:	bd00      	pop	{pc}
    c6a0:	466b      	mov	r3, sp
    c6a2:	79d8      	ldrb	r0, [r3, #7]
    c6a4:	e7fa      	b.n	c69c <_ZN5SDLib4File4readEv+0x1c>
    c6a6:	46c0      	nop			; (mov r8, r8)

0000c6a8 <_ZN5SDLib4File4peekEv>:
int File::peek() {
    c6a8:	b530      	push	{r4, r5, lr}
    c6aa:	0004      	movs	r4, r0
  if (! _file) 
    c6ac:	6a00      	ldr	r0, [r0, #32]
int File::peek() {
    c6ae:	b083      	sub	sp, #12
  if (! _file) 
    c6b0:	2800      	cmp	r0, #0
    c6b2:	d013      	beq.n	c6dc <_ZN5SDLib4File4peekEv+0x34>
    c6b4:	466b      	mov	r3, sp
    c6b6:	2201      	movs	r2, #1
    c6b8:	1dd9      	adds	r1, r3, #7
    c6ba:	f000 fe77 	bl	d3ac <_ZN6SdFile4readEPvt>
    c6be:	2801      	cmp	r0, #1
    c6c0:	d004      	beq.n	c6cc <_ZN5SDLib4File4peekEv+0x24>
    c6c2:	2501      	movs	r5, #1
    c6c4:	426d      	negs	r5, r5
}
    c6c6:	0028      	movs	r0, r5
    c6c8:	b003      	add	sp, #12
    c6ca:	bd30      	pop	{r4, r5, pc}
    c6cc:	466b      	mov	r3, sp
  if (c != -1) _file->seekCur(-1);
    c6ce:	6a20      	ldr	r0, [r4, #32]
    c6d0:	79dd      	ldrb	r5, [r3, #7]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    c6d2:	6903      	ldr	r3, [r0, #16]
    c6d4:	1e59      	subs	r1, r3, #1
    c6d6:	f001 f8a5 	bl	d824 <_ZN6SdFile7seekSetEm>
    c6da:	e7f4      	b.n	c6c6 <_ZN5SDLib4File4peekEv+0x1e>
    return 0;
    c6dc:	2500      	movs	r5, #0
    c6de:	e7f2      	b.n	c6c6 <_ZN5SDLib4File4peekEv+0x1e>

0000c6e0 <_ZN5SDLib4File5flushEv>:

void File::flush() {
  if (_file)
    c6e0:	6a00      	ldr	r0, [r0, #32]
void File::flush() {
    c6e2:	b510      	push	{r4, lr}
  if (_file)
    c6e4:	2800      	cmp	r0, #0
    c6e6:	d001      	beq.n	c6ec <_ZN5SDLib4File5flushEv+0xc>
    _file->sync();
    c6e8:	f001 f8d0 	bl	d88c <_ZN6SdFile4syncEv>
}
    c6ec:	bd10      	pop	{r4, pc}
    c6ee:	46c0      	nop			; (mov r8, r8)

0000c6f0 <_ZN5SDLib4File5writeEh>:
size_t File::write(uint8_t val) {
    c6f0:	b530      	push	{r4, r5, lr}
    c6f2:	b083      	sub	sp, #12
    c6f4:	466b      	mov	r3, sp
  return write(&val, 1);
    c6f6:	6802      	ldr	r2, [r0, #0]
size_t File::write(uint8_t val) {
    c6f8:	3307      	adds	r3, #7
  return write(&val, 1);
    c6fa:	6855      	ldr	r5, [r2, #4]
    c6fc:	4a0d      	ldr	r2, [pc, #52]	; (c734 <_ZN5SDLib4File5writeEh+0x44>)
size_t File::write(uint8_t val) {
    c6fe:	0004      	movs	r4, r0
    c700:	7019      	strb	r1, [r3, #0]
    c702:	4295      	cmp	r5, r2
    c704:	d111      	bne.n	c72a <_ZN5SDLib4File5writeEh+0x3a>
  if (!_file) {
    c706:	6a00      	ldr	r0, [r0, #32]
    c708:	2800      	cmp	r0, #0
    c70a:	d009      	beq.n	c720 <_ZN5SDLib4File5writeEh+0x30>
    c70c:	2200      	movs	r2, #0
  t = _file->write(buf, size);
    c70e:	0019      	movs	r1, r3
    c710:	6042      	str	r2, [r0, #4]
    c712:	3201      	adds	r2, #1
    c714:	f001 f8f2 	bl	d8fc <_ZN6SdFile5writeEPKvt>
  if (_file->getWriteError()) {
    c718:	6a23      	ldr	r3, [r4, #32]
    c71a:	685b      	ldr	r3, [r3, #4]
    c71c:	2b00      	cmp	r3, #0
    c71e:	d002      	beq.n	c726 <_ZN5SDLib4File5writeEh+0x36>
    c720:	2301      	movs	r3, #1
    return 0;
    c722:	2000      	movs	r0, #0
    c724:	6063      	str	r3, [r4, #4]
}
    c726:	b003      	add	sp, #12
    c728:	bd30      	pop	{r4, r5, pc}
  return write(&val, 1);
    c72a:	2201      	movs	r2, #1
    c72c:	0019      	movs	r1, r3
    c72e:	47a8      	blx	r5
    c730:	e7f9      	b.n	c726 <_ZN5SDLib4File5writeEh+0x36>
    c732:	46c0      	nop			; (mov r8, r8)
    c734:	0000c65d 	.word	0x0000c65d

0000c738 <_ZN5SDLib4FileC1E6SdFilePKc>:
File::File(SdFile f, const char *n) {
    c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c73a:	23fa      	movs	r3, #250	; 0xfa
    Print() : write_error(0) {}
    c73c:	2500      	movs	r5, #0
    c73e:	009b      	lsls	r3, r3, #2
    c740:	6083      	str	r3, [r0, #8]
    c742:	4b0d      	ldr	r3, [pc, #52]	; (c778 <_ZN5SDLib4FileC1E6SdFilePKc+0x40>)
    c744:	0004      	movs	r4, r0
    c746:	3308      	adds	r3, #8
    c748:	6045      	str	r5, [r0, #4]
    c74a:	6003      	str	r3, [r0, #0]
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    c74c:	2028      	movs	r0, #40	; 0x28
File::File(SdFile f, const char *n) {
    c74e:	000f      	movs	r7, r1
    c750:	0016      	movs	r6, r2
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    c752:	f004 f8e7 	bl	10924 <malloc>
    c756:	6220      	str	r0, [r4, #32]
  if (_file) {
    c758:	2800      	cmp	r0, #0
    c75a:	d00a      	beq.n	c772 <_ZN5SDLib4FileC1E6SdFilePKc+0x3a>
    memcpy(_file, &f, sizeof(SdFile));
    c75c:	2228      	movs	r2, #40	; 0x28
    c75e:	0039      	movs	r1, r7
    c760:	f004 f903 	bl	1096a <memcpy>
    strncpy(_name, n, 12);
    c764:	0020      	movs	r0, r4
    c766:	220c      	movs	r2, #12
    c768:	0031      	movs	r1, r6
    c76a:	3010      	adds	r0, #16
    c76c:	f004 f9ef 	bl	10b4e <strncpy>
    _name[12] = 0;
    c770:	7725      	strb	r5, [r4, #28]
}
    c772:	0020      	movs	r0, r4
    c774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c776:	46c0      	nop			; (mov r8, r8)
    c778:	00010d74 	.word	0x00010d74

0000c77c <_ZN5SDLib4FileC1Ev>:
    c77c:	22fa      	movs	r2, #250	; 0xfa
    c77e:	2300      	movs	r3, #0
    c780:	0092      	lsls	r2, r2, #2
    c782:	6082      	str	r2, [r0, #8]
File::File(void) {
    c784:	4a03      	ldr	r2, [pc, #12]	; (c794 <_ZN5SDLib4FileC1Ev+0x18>)
    c786:	6043      	str	r3, [r0, #4]
    c788:	3208      	adds	r2, #8
    c78a:	6002      	str	r2, [r0, #0]
  _file = 0;
    c78c:	6203      	str	r3, [r0, #32]
  _name[0] = 0;
    c78e:	7403      	strb	r3, [r0, #16]
}
    c790:	4770      	bx	lr
    c792:	46c0      	nop			; (mov r8, r8)
    c794:	00010d74 	.word	0x00010d74

0000c798 <_ZN5SDLib4File4readEPvt>:
  if (_file) 
    c798:	6a00      	ldr	r0, [r0, #32]
int File::read(void *buf, uint16_t nbyte) {
    c79a:	b510      	push	{r4, lr}
  if (_file) 
    c79c:	2800      	cmp	r0, #0
    c79e:	d002      	beq.n	c7a6 <_ZN5SDLib4File4readEPvt+0xe>
    return _file->read(buf, nbyte);
    c7a0:	f000 fe04 	bl	d3ac <_ZN6SdFile4readEPvt>
}
    c7a4:	bd10      	pop	{r4, pc}
  return 0;
    c7a6:	2000      	movs	r0, #0
    c7a8:	e7fc      	b.n	c7a4 <_ZN5SDLib4File4readEPvt+0xc>
    c7aa:	46c0      	nop			; (mov r8, r8)

0000c7ac <_ZN5SDLib4File4seekEm>:

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
    c7ac:	6a00      	ldr	r0, [r0, #32]
boolean File::seek(uint32_t pos) {
    c7ae:	b510      	push	{r4, lr}
  if (! _file) return false;
    c7b0:	2800      	cmp	r0, #0
    c7b2:	d005      	beq.n	c7c0 <_ZN5SDLib4File4seekEm+0x14>

  return _file->seekSet(pos);
    c7b4:	f001 f836 	bl	d824 <_ZN6SdFile7seekSetEm>
    c7b8:	1e43      	subs	r3, r0, #1
    c7ba:	4198      	sbcs	r0, r3
    c7bc:	b2c0      	uxtb	r0, r0
}
    c7be:	bd10      	pop	{r4, pc}
  if (! _file) return false;
    c7c0:	2000      	movs	r0, #0
    c7c2:	e7fc      	b.n	c7be <_ZN5SDLib4File4seekEm+0x12>

0000c7c4 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
    c7c4:	6a03      	ldr	r3, [r0, #32]
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d001      	beq.n	c7ce <_ZN5SDLib4File8positionEv+0xa>
    c7ca:	6918      	ldr	r0, [r3, #16]
  return _file->curPosition();
}
    c7cc:	4770      	bx	lr
  if (! _file) return -1;
    c7ce:	2001      	movs	r0, #1
    c7d0:	4240      	negs	r0, r0
    c7d2:	e7fb      	b.n	c7cc <_ZN5SDLib4File8positionEv+0x8>

0000c7d4 <_ZN5SDLib4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    c7d4:	b510      	push	{r4, lr}
    c7d6:	0004      	movs	r4, r0
  if (_file) {
    c7d8:	6a00      	ldr	r0, [r0, #32]
    c7da:	2800      	cmp	r0, #0
    c7dc:	d006      	beq.n	c7ec <_ZN5SDLib4File5closeEv+0x18>
    _file->close();
    c7de:	f000 fcf3 	bl	d1c8 <_ZN6SdFile5closeEv>
    free(_file); 
    c7e2:	6a20      	ldr	r0, [r4, #32]
    c7e4:	f004 f8a8 	bl	10938 <free>
    _file = 0;
    c7e8:	2300      	movs	r3, #0
    c7ea:	6223      	str	r3, [r4, #32]
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    c7ec:	bd10      	pop	{r4, pc}
    c7ee:	46c0      	nop			; (mov r8, r8)

0000c7f0 <_ZN5SDLib7SDClass5beginEh>:
/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
  if(root.isOpen()) root.close();
    c7f0:	2341      	movs	r3, #65	; 0x41
boolean SDClass::begin(uint8_t csPin) {
    c7f2:	b570      	push	{r4, r5, r6, lr}
  if(root.isOpen()) root.close();
    c7f4:	5cc3      	ldrb	r3, [r0, r3]
boolean SDClass::begin(uint8_t csPin) {
    c7f6:	0004      	movs	r4, r0
    c7f8:	000d      	movs	r5, r1
  if(root.isOpen()) root.close();
    c7fa:	2b00      	cmp	r3, #0
    c7fc:	d11a      	bne.n	c834 <_ZN5SDLib7SDClass5beginEh+0x44>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    c7fe:	002a      	movs	r2, r5
    c800:	2101      	movs	r1, #1
    c802:	0020      	movs	r0, r4
    c804:	f000 f9b6 	bl	cb74 <_ZN7Sd2Card4initEhh>
         volume.init(card) &&
    c808:	2800      	cmp	r0, #0
    c80a:	d101      	bne.n	c810 <_ZN5SDLib7SDClass5beginEh+0x20>
    c80c:	2000      	movs	r0, #0
         root.openRoot(volume);
}
    c80e:	bd70      	pop	{r4, r5, r6, pc}
         volume.init(card) &&
    c810:	0025      	movs	r5, r4
    c812:	3510      	adds	r5, #16
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    c814:	2201      	movs	r2, #1
    c816:	0021      	movs	r1, r4
    c818:	0028      	movs	r0, r5
    c81a:	f001 feeb 	bl	e5f4 <_ZN8SdVolume4initEP7Sd2Cardh>
    c81e:	2800      	cmp	r0, #0
    c820:	d00c      	beq.n	c83c <_ZN5SDLib7SDClass5beginEh+0x4c>
         root.openRoot(volume);
    c822:	0020      	movs	r0, r4
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    c824:	0029      	movs	r1, r5
    c826:	3038      	adds	r0, #56	; 0x38
    c828:	f000 fd96 	bl	d358 <_ZN6SdFile8openRootEP8SdVolume>
         volume.init(card) &&
    c82c:	1e43      	subs	r3, r0, #1
    c82e:	4198      	sbcs	r0, r3
    c830:	b2c0      	uxtb	r0, r0
    c832:	e7ec      	b.n	c80e <_ZN5SDLib7SDClass5beginEh+0x1e>
  if(root.isOpen()) root.close();
    c834:	3038      	adds	r0, #56	; 0x38
    c836:	f000 fcc7 	bl	d1c8 <_ZN6SdFile5closeEv>
    c83a:	e7e0      	b.n	c7fe <_ZN5SDLib7SDClass5beginEh+0xe>
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    c83c:	2200      	movs	r2, #0
    c83e:	0021      	movs	r1, r4
    c840:	0028      	movs	r0, r5
    c842:	f001 fed7 	bl	e5f4 <_ZN8SdVolume4initEP7Sd2Cardh>
  return card.init(SPI_HALF_SPEED, csPin) &&
    c846:	2800      	cmp	r0, #0
    c848:	d0e0      	beq.n	c80c <_ZN5SDLib7SDClass5beginEh+0x1c>
    c84a:	e7ea      	b.n	c822 <_ZN5SDLib7SDClass5beginEh+0x32>

0000c84c <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
{
  root.close();
}

// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    c84c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c84e:	4657      	mov	r7, sl
    c850:	464e      	mov	r6, r9
    c852:	46de      	mov	lr, fp
    c854:	4645      	mov	r5, r8
    c856:	b5e0      	push	{r5, r6, r7, lr}
    c858:	b09b      	sub	sp, #108	; 0x6c
    c85a:	9301      	str	r3, [sp, #4]
    c85c:	2300      	movs	r3, #0
    c85e:	4683      	mov	fp, r0
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    c860:	4839      	ldr	r0, [pc, #228]	; (c948 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xfc>)
    c862:	ae06      	add	r6, sp, #24
    c864:	af10      	add	r7, sp, #64	; 0x40
    c866:	6073      	str	r3, [r6, #4]
    c868:	9006      	str	r0, [sp, #24]
    c86a:	607b      	str	r3, [r7, #4]
    c86c:	9010      	str	r0, [sp, #64]	; 0x40
  // get parent directory
  SdFile d1;
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!
    c86e:	3110      	adds	r1, #16
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    c870:	0030      	movs	r0, r6
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    c872:	7273      	strb	r3, [r6, #9]
    c874:	727b      	strb	r3, [r7, #9]
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    c876:	0015      	movs	r5, r2
    c878:	9200      	str	r2, [sp, #0]
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    c87a:	f000 fd6d 	bl	d358 <_ZN6SdFile8openRootEP8SdVolume>
    c87e:	23ff      	movs	r3, #255	; 0xff
    c880:	469a      	mov	sl, r3
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    c882:	2300      	movs	r3, #0
    c884:	4699      	mov	r9, r3
  while (strchr(filepath, '/')) {
    c886:	212f      	movs	r1, #47	; 0x2f
    c888:	0028      	movs	r0, r5
    c88a:	f004 f943 	bl	10b14 <strchr>
    c88e:	2800      	cmp	r0, #0
    c890:	d02b      	beq.n	c8ea <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x9e>
    if (filepath[0] == '/') {
    c892:	782b      	ldrb	r3, [r5, #0]
    c894:	2b2f      	cmp	r3, #47	; 0x2f
    c896:	d04f      	beq.n	c938 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xec>
    c898:	4653      	mov	r3, sl
    uint8_t idx = strchr(filepath, '/') - filepath;
    c89a:	1b44      	subs	r4, r0, r5
    c89c:	401c      	ands	r4, r3
    c89e:	46a0      	mov	r8, r4
    if (idx > 12)
    c8a0:	2c0c      	cmp	r4, #12
    c8a2:	dd02      	ble.n	c8aa <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x5e>
    c8a4:	230c      	movs	r3, #12
    c8a6:	240c      	movs	r4, #12
    c8a8:	4698      	mov	r8, r3
    strncpy(subdirname, filepath, idx);
    c8aa:	0029      	movs	r1, r5
    c8ac:	4642      	mov	r2, r8
    c8ae:	a802      	add	r0, sp, #8
    c8b0:	f004 f94d 	bl	10b4e <strncpy>
    subdirname[idx] = 0;
    c8b4:	464a      	mov	r2, r9
    c8b6:	ab02      	add	r3, sp, #8

    // close the subdir (we reuse them) if open
    subdir->close();
    c8b8:	0038      	movs	r0, r7
    subdirname[idx] = 0;
    c8ba:	551a      	strb	r2, [r3, r4]
    subdir->close();
    c8bc:	f000 fc84 	bl	d1c8 <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    c8c0:	2301      	movs	r3, #1
    c8c2:	aa02      	add	r2, sp, #8
    c8c4:	0031      	movs	r1, r6
    c8c6:	0038      	movs	r0, r7
    c8c8:	f000 ffa2 	bl	d810 <_ZN6SdFile4openEPS_PKch>
    c8cc:	2800      	cmp	r0, #0
    c8ce:	d035      	beq.n	c93c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf0>
    }
    // move forward to the next subdirectory
    filepath += idx;

    // we reuse the objects, close it.
    parent->close();
    c8d0:	0030      	movs	r0, r6
    c8d2:	f000 fc79 	bl	d1c8 <_ZN6SdFile5closeEv>
    c8d6:	0033      	movs	r3, r6
    filepath += idx;
    c8d8:	4445      	add	r5, r8
  while (strchr(filepath, '/')) {
    c8da:	212f      	movs	r1, #47	; 0x2f
    c8dc:	0028      	movs	r0, r5

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    c8de:	003e      	movs	r6, r7
    c8e0:	001f      	movs	r7, r3
  while (strchr(filepath, '/')) {
    c8e2:	f004 f917 	bl	10b14 <strchr>
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d1d3      	bne.n	c892 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x46>
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    c8ea:	9b00      	ldr	r3, [sp, #0]
class Print
    c8ec:	6872      	ldr	r2, [r6, #4]
    c8ee:	1aed      	subs	r5, r5, r3
    c8f0:	9b01      	ldr	r3, [sp, #4]
    c8f2:	601d      	str	r5, [r3, #0]
    c8f4:	465b      	mov	r3, fp
    c8f6:	605a      	str	r2, [r3, #4]
class SdFile : public Print {
    c8f8:	4a13      	ldr	r2, [pc, #76]	; (c948 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xfc>)
    c8fa:	601a      	str	r2, [r3, #0]
    c8fc:	465a      	mov	r2, fp
    c8fe:	7a33      	ldrb	r3, [r6, #8]
    c900:	7213      	strb	r3, [r2, #8]
    c902:	7a73      	ldrb	r3, [r6, #9]
    c904:	7253      	strb	r3, [r2, #9]
    c906:	465b      	mov	r3, fp
    c908:	68f2      	ldr	r2, [r6, #12]
    c90a:	60da      	str	r2, [r3, #12]
    c90c:	6932      	ldr	r2, [r6, #16]
    c90e:	611a      	str	r2, [r3, #16]
    c910:	6972      	ldr	r2, [r6, #20]
    c912:	615a      	str	r2, [r3, #20]
    c914:	465a      	mov	r2, fp
    c916:	7e33      	ldrb	r3, [r6, #24]
    c918:	7613      	strb	r3, [r2, #24]
    c91a:	465b      	mov	r3, fp
    c91c:	69f2      	ldr	r2, [r6, #28]
    c91e:	61da      	str	r2, [r3, #28]
    c920:	6a32      	ldr	r2, [r6, #32]
    c922:	621a      	str	r2, [r3, #32]
    c924:	6a72      	ldr	r2, [r6, #36]	; 0x24
    c926:	625a      	str	r2, [r3, #36]	; 0x24
  // parent is now the parent directory of the file!
  return *parent;
}
    c928:	4658      	mov	r0, fp
    c92a:	b01b      	add	sp, #108	; 0x6c
    c92c:	bc3c      	pop	{r2, r3, r4, r5}
    c92e:	4690      	mov	r8, r2
    c930:	4699      	mov	r9, r3
    c932:	46a2      	mov	sl, r4
    c934:	46ab      	mov	fp, r5
    c936:	bdf0      	pop	{r4, r5, r6, r7, pc}
      filepath++;
    c938:	3501      	adds	r5, #1
    c93a:	e7a4      	b.n	c886 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x3a>
    Print() : write_error(0) {}
    c93c:	465b      	mov	r3, fp
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    c93e:	4a02      	ldr	r2, [pc, #8]	; (c948 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xfc>)
    c940:	6058      	str	r0, [r3, #4]
    c942:	601a      	str	r2, [r3, #0]
    c944:	7258      	strb	r0, [r3, #9]
    c946:	e7ef      	b.n	c928 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xdc>
    c948:	00010dcc 	.word	0x00010dcc

0000c94c <_ZN5SDLib7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    c94c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c94e:	46c6      	mov	lr, r8
    c950:	b500      	push	{lr}
    c952:	b0a2      	sub	sp, #136	; 0x88
    c954:	0006      	movs	r6, r0
    c956:	001f      	movs	r7, r3
   */

  int pathidx;

  // do the interactive search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    c958:	a804      	add	r0, sp, #16
    c95a:	ab03      	add	r3, sp, #12
File SDClass::open(const char *filepath, uint8_t mode) {
    c95c:	0015      	movs	r5, r2
  SdFile parentdir = getParentDir(filepath, &pathidx);
    c95e:	f7ff ff75 	bl	c84c <_ZN5SDLib7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    c962:	9b03      	ldr	r3, [sp, #12]
    c964:	469c      	mov	ip, r3
    c966:	4465      	add	r5, ip

  if (! filepath[0]) {
    c968:	782b      	ldrb	r3, [r5, #0]
    c96a:	2b00      	cmp	r3, #0
    c96c:	d03d      	beq.n	c9ea <_ZN5SDLib7SDClass4openEPKch+0x9e>
    c96e:	2300      	movs	r3, #0
    c970:	ac0e      	add	r4, sp, #56	; 0x38
    c972:	6063      	str	r3, [r4, #4]
    c974:	7263      	strb	r3, [r4, #9]

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    c976:	ab02      	add	r3, sp, #8
    c978:	4a2f      	ldr	r2, [pc, #188]	; (ca38 <_ZN5SDLib7SDClass4openEPKch+0xec>)
    c97a:	7c5b      	ldrb	r3, [r3, #17]
    c97c:	4690      	mov	r8, r2
    c97e:	920e      	str	r2, [sp, #56]	; 0x38
    c980:	2b00      	cmp	r3, #0
    c982:	d02e      	beq.n	c9e2 <_ZN5SDLib7SDClass4openEPKch+0x96>
    return open(&dirFile, fileName, oflag);
    c984:	003b      	movs	r3, r7
    c986:	002a      	movs	r2, r5
    c988:	a904      	add	r1, sp, #16
    c98a:	0020      	movs	r0, r4
    c98c:	f000 ff40 	bl	d810 <_ZN6SdFile4openEPS_PKch>
    return File();

  if ( ! file.open(parentdir, filepath, mode)) {
    c990:	2800      	cmp	r0, #0
    c992:	d026      	beq.n	c9e2 <_ZN5SDLib7SDClass4openEPKch+0x96>
    return File();
  }
  // close the parent
  parentdir.close();
    c994:	a804      	add	r0, sp, #16
    c996:	f000 fc17 	bl	d1c8 <_ZN6SdFile5closeEv>

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    c99a:	2306      	movs	r3, #6
    c99c:	401f      	ands	r7, r3
    c99e:	2f06      	cmp	r7, #6
    c9a0:	d045      	beq.n	ca2e <_ZN5SDLib7SDClass4openEPKch+0xe2>
class Print
    c9a2:	6863      	ldr	r3, [r4, #4]
    c9a4:	a918      	add	r1, sp, #96	; 0x60
    c9a6:	604b      	str	r3, [r1, #4]
class SdFile : public Print {
    c9a8:	4643      	mov	r3, r8
    c9aa:	9318      	str	r3, [sp, #96]	; 0x60
    c9ac:	7a23      	ldrb	r3, [r4, #8]
    file.seekSet(file.fileSize());
  return File(file, filepath);
    c9ae:	002a      	movs	r2, r5
    c9b0:	720b      	strb	r3, [r1, #8]
    c9b2:	7a63      	ldrb	r3, [r4, #9]
    c9b4:	0030      	movs	r0, r6
    c9b6:	724b      	strb	r3, [r1, #9]
    c9b8:	68e3      	ldr	r3, [r4, #12]
    c9ba:	60cb      	str	r3, [r1, #12]
    c9bc:	6923      	ldr	r3, [r4, #16]
    c9be:	610b      	str	r3, [r1, #16]
    c9c0:	6963      	ldr	r3, [r4, #20]
    c9c2:	614b      	str	r3, [r1, #20]
    c9c4:	7e23      	ldrb	r3, [r4, #24]
    c9c6:	760b      	strb	r3, [r1, #24]
    c9c8:	69e3      	ldr	r3, [r4, #28]
    c9ca:	61cb      	str	r3, [r1, #28]
    c9cc:	6a23      	ldr	r3, [r4, #32]
    c9ce:	620b      	str	r3, [r1, #32]
    c9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c9d2:	624b      	str	r3, [r1, #36]	; 0x24
    c9d4:	f7ff feb0 	bl	c738 <_ZN5SDLib4FileC1E6SdFilePKc>
}
    c9d8:	0030      	movs	r0, r6
    c9da:	b022      	add	sp, #136	; 0x88
    c9dc:	bc04      	pop	{r2}
    c9de:	4690      	mov	r8, r2
    c9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return File();
    c9e2:	0030      	movs	r0, r6
    c9e4:	f7ff feca 	bl	c77c <_ZN5SDLib4FileC1Ev>
    c9e8:	e7f6      	b.n	c9d8 <_ZN5SDLib7SDClass4openEPKch+0x8c>
    c9ea:	2220      	movs	r2, #32
    c9ec:	9b05      	ldr	r3, [sp, #20]
    c9ee:	a918      	add	r1, sp, #96	; 0x60
    c9f0:	604b      	str	r3, [r1, #4]
    c9f2:	4b11      	ldr	r3, [pc, #68]	; (ca38 <_ZN5SDLib7SDClass4openEPKch+0xec>)
    return File(parentdir, "/");
    c9f4:	0030      	movs	r0, r6
    c9f6:	9318      	str	r3, [sp, #96]	; 0x60
    c9f8:	ab02      	add	r3, sp, #8
    c9fa:	7c1b      	ldrb	r3, [r3, #16]
    c9fc:	720b      	strb	r3, [r1, #8]
    c9fe:	ab02      	add	r3, sp, #8
    ca00:	7c5b      	ldrb	r3, [r3, #17]
    ca02:	724b      	strb	r3, [r1, #9]
    ca04:	9b07      	ldr	r3, [sp, #28]
    ca06:	60cb      	str	r3, [r1, #12]
    ca08:	9b08      	ldr	r3, [sp, #32]
    ca0a:	610b      	str	r3, [r1, #16]
    ca0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca0e:	614b      	str	r3, [r1, #20]
    ca10:	ab02      	add	r3, sp, #8
    ca12:	189b      	adds	r3, r3, r2
    ca14:	781b      	ldrb	r3, [r3, #0]
    ca16:	4a09      	ldr	r2, [pc, #36]	; (ca3c <_ZN5SDLib7SDClass4openEPKch+0xf0>)
    ca18:	760b      	strb	r3, [r1, #24]
    ca1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca1c:	61cb      	str	r3, [r1, #28]
    ca1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca20:	9301      	str	r3, [sp, #4]
    ca22:	620b      	str	r3, [r1, #32]
    ca24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca26:	624b      	str	r3, [r1, #36]	; 0x24
    ca28:	f7ff fe86 	bl	c738 <_ZN5SDLib4FileC1E6SdFilePKc>
    ca2c:	e7d4      	b.n	c9d8 <_ZN5SDLib7SDClass4openEPKch+0x8c>
    file.seekSet(file.fileSize());
    ca2e:	9915      	ldr	r1, [sp, #84]	; 0x54
    ca30:	0020      	movs	r0, r4
    ca32:	f000 fef7 	bl	d824 <_ZN6SdFile7seekSetEm>
    ca36:	e7b4      	b.n	c9a2 <_ZN5SDLib7SDClass4openEPKch+0x56>
    ca38:	00010dcc 	.word	0x00010dcc
    ca3c:	00010d98 	.word	0x00010d98

0000ca40 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    ca40:	2102      	movs	r1, #2
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    ca42:	2200      	movs	r2, #0
    ca44:	4b06      	ldr	r3, [pc, #24]	; (ca60 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x20>)
    ca46:	6119      	str	r1, [r3, #16]
    ca48:	312e      	adds	r1, #46	; 0x2e
    ca4a:	545a      	strb	r2, [r3, r1]
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    ca4c:	4905      	ldr	r1, [pc, #20]	; (ca64 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x24>)
    ca4e:	715a      	strb	r2, [r3, #5]
    ca50:	6399      	str	r1, [r3, #56]	; 0x38
    ca52:	2141      	movs	r1, #65	; 0x41
    ca54:	719a      	strb	r2, [r3, #6]
    ca56:	729a      	strb	r2, [r3, #10]
    ca58:	731a      	strb	r2, [r3, #12]
    Print() : write_error(0) {}
    ca5a:	63da      	str	r2, [r3, #60]	; 0x3c
    ca5c:	545a      	strb	r2, [r3, r1]
    _file->rewind();
}

SDClass SD;

};
    ca5e:	4770      	bx	lr
    ca60:	2000078c 	.word	0x2000078c
    ca64:	00010dcc 	.word	0x00010dcc

0000ca68 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca6a:	46ce      	mov	lr, r9
    ca6c:	4647      	mov	r7, r8
    ca6e:	b580      	push	{r7, lr}
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
  if (inBlock_) {
    ca70:	7983      	ldrb	r3, [r0, #6]
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    ca72:	0005      	movs	r5, r0
    ca74:	4689      	mov	r9, r1
    ca76:	4690      	mov	r8, r2
  if (inBlock_) {
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d14f      	bne.n	cb1c <_ZN7Sd2Card11cardCommandEhm+0xb4>
    ca7c:	4e39      	ldr	r6, [pc, #228]	; (cb64 <_ZN7Sd2Card11cardCommandEhm+0xfc>)
    ca7e:	4c3a      	ldr	r4, [pc, #232]	; (cb68 <_ZN7Sd2Card11cardCommandEhm+0x100>)
    ca80:	7833      	ldrb	r3, [r6, #0]
  if (!chip_select_asserted) {
    ca82:	2b00      	cmp	r3, #0
    ca84:	d106      	bne.n	ca94 <_ZN7Sd2Card11cardCommandEhm+0x2c>
    chip_select_asserted = 1;
    ca86:	3301      	adds	r3, #1
    ca88:	7033      	strb	r3, [r6, #0]
    SDCARD_SPI.beginTransaction(settings);
    ca8a:	4b38      	ldr	r3, [pc, #224]	; (cb6c <_ZN7Sd2Card11cardCommandEhm+0x104>)
    ca8c:	0020      	movs	r0, r4
    ca8e:	cb06      	ldmia	r3!, {r1, r2}
    ca90:	f001 ff28 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
  digitalWrite(chipSelectPin_, LOW);
    ca94:	7928      	ldrb	r0, [r5, #4]
    ca96:	2100      	movs	r1, #0
    ca98:	f7f8 f89a 	bl	4bd0 <digitalWrite>
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    ca9c:	262c      	movs	r6, #44	; 0x2c
  unsigned int t0 = millis();
    ca9e:	f7f6 f815 	bl	2acc <millis>
  while (d < timeoutMillis);
    caa2:	36ff      	adds	r6, #255	; 0xff
  unsigned int t0 = millis();
    caa4:	0007      	movs	r7, r0
    caa6:	e004      	b.n	cab2 <_ZN7Sd2Card11cardCommandEhm+0x4a>
    d = millis() - t0;
    caa8:	f7f6 f810 	bl	2acc <millis>
    caac:	1bc0      	subs	r0, r0, r7
  while (d < timeoutMillis);
    caae:	42b0      	cmp	r0, r6
    cab0:	d805      	bhi.n	cabe <_ZN7Sd2Card11cardCommandEhm+0x56>
  return SDCARD_SPI.transfer(0xFF);
    cab2:	21ff      	movs	r1, #255	; 0xff
    cab4:	0020      	movs	r0, r4
    cab6:	f001 ff57 	bl	e968 <_ZN8SPIClass8transferEh>
    if (spiRec() == 0XFF) return true;
    caba:	28ff      	cmp	r0, #255	; 0xff
    cabc:	d1f4      	bne.n	caa8 <_ZN7Sd2Card11cardCommandEhm+0x40>
  SDCARD_SPI.transfer(b);
    cabe:	464b      	mov	r3, r9
  spiSend(cmd | 0x40);
    cac0:	2140      	movs	r1, #64	; 0x40
  SDCARD_SPI.transfer(b);
    cac2:	0020      	movs	r0, r4
    cac4:	4319      	orrs	r1, r3
    cac6:	f001 ff4f 	bl	e968 <_ZN8SPIClass8transferEh>
    caca:	2618      	movs	r6, #24
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    cacc:	4641      	mov	r1, r8
    cace:	40f1      	lsrs	r1, r6
  SDCARD_SPI.transfer(b);
    cad0:	0020      	movs	r0, r4
    cad2:	b2c9      	uxtb	r1, r1
    cad4:	3e08      	subs	r6, #8
    cad6:	f001 ff47 	bl	e968 <_ZN8SPIClass8transferEh>
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    cada:	0033      	movs	r3, r6
    cadc:	3308      	adds	r3, #8
    cade:	d1f5      	bne.n	cacc <_ZN7Sd2Card11cardCommandEhm+0x64>
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    cae0:	464b      	mov	r3, r9
    cae2:	2195      	movs	r1, #149	; 0x95
    cae4:	2b00      	cmp	r3, #0
    cae6:	d002      	beq.n	caee <_ZN7Sd2Card11cardCommandEhm+0x86>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    cae8:	390e      	subs	r1, #14
    caea:	2b08      	cmp	r3, #8
    caec:	d114      	bne.n	cb18 <_ZN7Sd2Card11cardCommandEhm+0xb0>
  SDCARD_SPI.transfer(b);
    caee:	0020      	movs	r0, r4
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    caf0:	2780      	movs	r7, #128	; 0x80
  SDCARD_SPI.transfer(b);
    caf2:	f001 ff39 	bl	e968 <_ZN8SPIClass8transferEh>
    caf6:	2600      	movs	r6, #0
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    caf8:	007f      	lsls	r7, r7, #1
  return SDCARD_SPI.transfer(0xFF);
    cafa:	21ff      	movs	r1, #255	; 0xff
    cafc:	0020      	movs	r0, r4
    cafe:	f001 ff33 	bl	e968 <_ZN8SPIClass8transferEh>
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    cb02:	72e8      	strb	r0, [r5, #11]
    cb04:	0603      	lsls	r3, r0, #24
    cb06:	d403      	bmi.n	cb10 <_ZN7Sd2Card11cardCommandEhm+0xa8>
}
    cb08:	bc0c      	pop	{r2, r3}
    cb0a:	4690      	mov	r8, r2
    cb0c:	4699      	mov	r9, r3
    cb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb10:	3601      	adds	r6, #1
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    cb12:	42be      	cmp	r6, r7
    cb14:	d1f1      	bne.n	cafa <_ZN7Sd2Card11cardCommandEhm+0x92>
    cb16:	e7f7      	b.n	cb08 <_ZN7Sd2Card11cardCommandEhm+0xa0>
  uint8_t crc = 0XFF;
    cb18:	3178      	adds	r1, #120	; 0x78
    cb1a:	e7e8      	b.n	caee <_ZN7Sd2Card11cardCommandEhm+0x86>
    while (offset_++ < 514) spiRec();
    cb1c:	8903      	ldrh	r3, [r0, #8]
    cb1e:	4e14      	ldr	r6, [pc, #80]	; (cb70 <_ZN7Sd2Card11cardCommandEhm+0x108>)
    cb20:	1c5a      	adds	r2, r3, #1
    cb22:	8102      	strh	r2, [r0, #8]
    cb24:	4c10      	ldr	r4, [pc, #64]	; (cb68 <_ZN7Sd2Card11cardCommandEhm+0x100>)
    cb26:	42b3      	cmp	r3, r6
    cb28:	dc08      	bgt.n	cb3c <_ZN7Sd2Card11cardCommandEhm+0xd4>
  return SDCARD_SPI.transfer(0xFF);
    cb2a:	21ff      	movs	r1, #255	; 0xff
    cb2c:	0020      	movs	r0, r4
    cb2e:	f001 ff1b 	bl	e968 <_ZN8SPIClass8transferEh>
    while (offset_++ < 514) spiRec();
    cb32:	892b      	ldrh	r3, [r5, #8]
    cb34:	1c5a      	adds	r2, r3, #1
    cb36:	812a      	strh	r2, [r5, #8]
    cb38:	42b3      	cmp	r3, r6
    cb3a:	ddf6      	ble.n	cb2a <_ZN7Sd2Card11cardCommandEhm+0xc2>
  digitalWrite(chipSelectPin_, HIGH);
    cb3c:	7928      	ldrb	r0, [r5, #4]
    cb3e:	2101      	movs	r1, #1
    cb40:	f7f8 f846 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    cb44:	4e07      	ldr	r6, [pc, #28]	; (cb64 <_ZN7Sd2Card11cardCommandEhm+0xfc>)
    cb46:	7833      	ldrb	r3, [r6, #0]
    cb48:	2b00      	cmp	r3, #0
    cb4a:	d102      	bne.n	cb52 <_ZN7Sd2Card11cardCommandEhm+0xea>
    inBlock_ = 0;
    cb4c:	2200      	movs	r2, #0
    cb4e:	71aa      	strb	r2, [r5, #6]
    cb50:	e797      	b.n	ca82 <_ZN7Sd2Card11cardCommandEhm+0x1a>
    chip_select_asserted = 0;
    cb52:	2300      	movs	r3, #0
    SDCARD_SPI.endTransaction();
    cb54:	0020      	movs	r0, r4
    chip_select_asserted = 0;
    cb56:	7033      	strb	r3, [r6, #0]
    SDCARD_SPI.endTransaction();
    cb58:	f001 fef4 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    inBlock_ = 0;
    cb5c:	2200      	movs	r2, #0
    cb5e:	7833      	ldrb	r3, [r6, #0]
    cb60:	71aa      	strb	r2, [r5, #6]
    cb62:	e78e      	b.n	ca82 <_ZN7Sd2Card11cardCommandEhm+0x1a>
    cb64:	200007f0 	.word	0x200007f0
    cb68:	20000a0c 	.word	0x20000a0c
    cb6c:	200007f4 	.word	0x200007f4
    cb70:	00000201 	.word	0x00000201

0000cb74 <_ZN7Sd2Card4initEhh>:
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    cb74:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb76:	46de      	mov	lr, fp
    cb78:	4645      	mov	r5, r8
    cb7a:	4657      	mov	r7, sl
    cb7c:	464e      	mov	r6, r9
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    cb7e:	2300      	movs	r3, #0
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    cb80:	b5e0      	push	{r5, r6, r7, lr}
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    cb82:	7303      	strb	r3, [r0, #12]
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    cb84:	b085      	sub	sp, #20
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    cb86:	7283      	strb	r3, [r0, #10]
    cb88:	7183      	strb	r3, [r0, #6]
    cb8a:	7143      	strb	r3, [r0, #5]
  chipSelectPin_ = chipSelectPin;
    cb8c:	7102      	strb	r2, [r0, #4]
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    cb8e:	0004      	movs	r4, r0
    cb90:	9101      	str	r1, [sp, #4]
  unsigned int t0 = millis();
    cb92:	f7f5 ff9b 	bl	2acc <millis>
  pinMode(chipSelectPin_, OUTPUT);
    cb96:	2101      	movs	r1, #1
  unsigned int t0 = millis();
    cb98:	0006      	movs	r6, r0
  pinMode(chipSelectPin_, OUTPUT);
    cb9a:	7920      	ldrb	r0, [r4, #4]
    cb9c:	f7f7 ffc8 	bl	4b30 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    cba0:	2101      	movs	r1, #1
    cba2:	7920      	ldrb	r0, [r4, #4]
    cba4:	f7f8 f814 	bl	4bd0 <digitalWrite>
  SDCARD_SPI.begin();
    cba8:	4d80      	ldr	r5, [pc, #512]	; (cdac <_ZN7Sd2Card4initEhh+0x238>)
  SDCARD_SPI.beginTransaction(settings);
    cbaa:	270a      	movs	r7, #10
  SDCARD_SPI.begin();
    cbac:	0028      	movs	r0, r5
    cbae:	f001 fe55 	bl	e85c <_ZN8SPIClass5beginEv>
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    cbb2:	2302      	movs	r3, #2
    cbb4:	2201      	movs	r2, #1
    cbb6:	497e      	ldr	r1, [pc, #504]	; (cdb0 <_ZN7Sd2Card4initEhh+0x23c>)
    cbb8:	a802      	add	r0, sp, #8
    cbba:	f7f8 fa0b 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    cbbe:	4b7d      	ldr	r3, [pc, #500]	; (cdb4 <_ZN7Sd2Card4initEhh+0x240>)
    cbc0:	9a02      	ldr	r2, [sp, #8]
    cbc2:	4698      	mov	r8, r3
    cbc4:	601a      	str	r2, [r3, #0]
    cbc6:	4642      	mov	r2, r8
    cbc8:	ab02      	add	r3, sp, #8
    cbca:	889b      	ldrh	r3, [r3, #4]
  SDCARD_SPI.beginTransaction(settings);
    cbcc:	0028      	movs	r0, r5
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    cbce:	8093      	strh	r3, [r2, #4]
  SDCARD_SPI.beginTransaction(settings);
    cbd0:	9902      	ldr	r1, [sp, #8]
    cbd2:	6852      	ldr	r2, [r2, #4]
    cbd4:	f001 fe86 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
  SDCARD_SPI.transfer(b);
    cbd8:	21ff      	movs	r1, #255	; 0xff
    cbda:	0028      	movs	r0, r5
    cbdc:	3f01      	subs	r7, #1
    cbde:	f001 fec3 	bl	e968 <_ZN8SPIClass8transferEh>
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    cbe2:	2f00      	cmp	r7, #0
    cbe4:	d1f8      	bne.n	cbd8 <_ZN7Sd2Card4initEhh+0x64>
  SDCARD_SPI.endTransaction();
    cbe6:	0028      	movs	r0, r5
    cbe8:	f001 feac 	bl	e944 <_ZN8SPIClass14endTransactionEv>
  if (!chip_select_asserted) {
    cbec:	4b72      	ldr	r3, [pc, #456]	; (cdb8 <_ZN7Sd2Card4initEhh+0x244>)
    cbee:	469b      	mov	fp, r3
    cbf0:	781b      	ldrb	r3, [r3, #0]
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	d107      	bne.n	cc06 <_ZN7Sd2Card4initEhh+0x92>
    chip_select_asserted = 1;
    cbf6:	465a      	mov	r2, fp
    cbf8:	3301      	adds	r3, #1
    cbfa:	7013      	strb	r3, [r2, #0]
    SDCARD_SPI.beginTransaction(settings);
    cbfc:	4643      	mov	r3, r8
    cbfe:	0028      	movs	r0, r5
    cc00:	cb06      	ldmia	r3!, {r1, r2}
    cc02:	f001 fe6f 	bl	e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>
  digitalWrite(chipSelectPin_, LOW);
    cc06:	7920      	ldrb	r0, [r4, #4]
    cc08:	2100      	movs	r1, #0
    cc0a:	f7f7 ffe1 	bl	4bd0 <digitalWrite>
    if (d > SD_INIT_TIMEOUT) {
    cc0e:	23fa      	movs	r3, #250	; 0xfa
    cc10:	00db      	lsls	r3, r3, #3
    cc12:	4699      	mov	r9, r3
    cc14:	e004      	b.n	cc20 <_ZN7Sd2Card4initEhh+0xac>
    unsigned int d = millis() - t0;
    cc16:	f7f5 ff59 	bl	2acc <millis>
    cc1a:	1b80      	subs	r0, r0, r6
    if (d > SD_INIT_TIMEOUT) {
    cc1c:	4548      	cmp	r0, r9
    cc1e:	d864      	bhi.n	ccea <_ZN7Sd2Card4initEhh+0x176>
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    cc20:	2200      	movs	r2, #0
    cc22:	2100      	movs	r1, #0
    cc24:	0020      	movs	r0, r4
    cc26:	f7ff ff1f 	bl	ca68 <_ZN7Sd2Card11cardCommandEhm>
    cc2a:	0007      	movs	r7, r0
    cc2c:	72e0      	strb	r0, [r4, #11]
    cc2e:	2801      	cmp	r0, #1
    cc30:	d1f1      	bne.n	cc16 <_ZN7Sd2Card4initEhh+0xa2>
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    cc32:	22d5      	movs	r2, #213	; 0xd5
    cc34:	2108      	movs	r1, #8
    cc36:	0052      	lsls	r2, r2, #1
    cc38:	0020      	movs	r0, r4
    cc3a:	f7ff ff15 	bl	ca68 <_ZN7Sd2Card11cardCommandEhm>
    cc3e:	0743      	lsls	r3, r0, #29
    cc40:	d52f      	bpl.n	cca2 <_ZN7Sd2Card4initEhh+0x12e>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    cc42:	2300      	movs	r3, #0
    cc44:	4699      	mov	r9, r3
  void error(uint8_t code) {errorCode_ = code;}
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    cc46:	7327      	strb	r7, [r4, #12]
    if (d > SD_INIT_TIMEOUT) {
    cc48:	23fa      	movs	r3, #250	; 0xfa
    cc4a:	00db      	lsls	r3, r3, #3
    cc4c:	469a      	mov	sl, r3
    cc4e:	e004      	b.n	cc5a <_ZN7Sd2Card4initEhh+0xe6>
    unsigned int d = millis() - t0;
    cc50:	f7f5 ff3c 	bl	2acc <millis>
    cc54:	1b80      	subs	r0, r0, r6
    if (d > SD_INIT_TIMEOUT) {
    cc56:	4550      	cmp	r0, sl
    cc58:	d84f      	bhi.n	ccfa <_ZN7Sd2Card4initEhh+0x186>
    cardCommand(CMD55, 0);
    cc5a:	2200      	movs	r2, #0
    cc5c:	2137      	movs	r1, #55	; 0x37
    cc5e:	0020      	movs	r0, r4
    cc60:	f7ff ff02 	bl	ca68 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    cc64:	464a      	mov	r2, r9
    cc66:	2129      	movs	r1, #41	; 0x29
    cc68:	0020      	movs	r0, r4
    cc6a:	f7ff fefd 	bl	ca68 <_ZN7Sd2Card11cardCommandEhm>
    cc6e:	1e07      	subs	r7, r0, #0
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    cc70:	72e0      	strb	r0, [r4, #11]
    cc72:	d1ed      	bne.n	cc50 <_ZN7Sd2Card4initEhh+0xdc>
  if (type() == SD_CARD_TYPE_SD2) {
    cc74:	7b23      	ldrb	r3, [r4, #12]
    cc76:	2b02      	cmp	r3, #2
    cc78:	d041      	beq.n	ccfe <_ZN7Sd2Card4initEhh+0x18a>
  digitalWrite(chipSelectPin_, HIGH);
    cc7a:	7920      	ldrb	r0, [r4, #4]
    cc7c:	2101      	movs	r1, #1
    cc7e:	f7f7 ffa7 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    cc82:	465b      	mov	r3, fp
    cc84:	781b      	ldrb	r3, [r3, #0]
    cc86:	2b00      	cmp	r3, #0
    cc88:	d005      	beq.n	cc96 <_ZN7Sd2Card4initEhh+0x122>
    chip_select_asserted = 0;
    cc8a:	2300      	movs	r3, #0
    cc8c:	465a      	mov	r2, fp
    SDCARD_SPI.endTransaction();
    cc8e:	0028      	movs	r0, r5
    chip_select_asserted = 0;
    cc90:	7013      	strb	r3, [r2, #0]
    SDCARD_SPI.endTransaction();
    cc92:	f001 fe57 	bl	e944 <_ZN8SPIClass14endTransactionEv>
  if (sckRateID > 6) {
    cc96:	9b01      	ldr	r3, [sp, #4]
    cc98:	2b06      	cmp	r3, #6
    cc9a:	dd3a      	ble.n	cd12 <_ZN7Sd2Card4initEhh+0x19e>
  void error(uint8_t code) {errorCode_ = code;}
    cc9c:	2316      	movs	r3, #22
    cc9e:	7163      	strb	r3, [r4, #5]
    cca0:	e01b      	b.n	ccda <_ZN7Sd2Card4initEhh+0x166>
    cca2:	2704      	movs	r7, #4
  return SDCARD_SPI.transfer(0xFF);
    cca4:	21ff      	movs	r1, #255	; 0xff
    cca6:	0028      	movs	r0, r5
    cca8:	f001 fe5e 	bl	e968 <_ZN8SPIClass8transferEh>
    ccac:	3f01      	subs	r7, #1
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    ccae:	72e0      	strb	r0, [r4, #11]
    ccb0:	2f00      	cmp	r7, #0
    ccb2:	d1f7      	bne.n	cca4 <_ZN7Sd2Card4initEhh+0x130>
    ccb4:	2302      	movs	r3, #2
    if (status_ != 0XAA) {
    ccb6:	28aa      	cmp	r0, #170	; 0xaa
    ccb8:	d01a      	beq.n	ccf0 <_ZN7Sd2Card4initEhh+0x17c>
    ccba:	7163      	strb	r3, [r4, #5]
  digitalWrite(chipSelectPin_, HIGH);
    ccbc:	7920      	ldrb	r0, [r4, #4]
    ccbe:	2101      	movs	r1, #1
    ccc0:	f7f7 ff86 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    ccc4:	465b      	mov	r3, fp
    ccc6:	781f      	ldrb	r7, [r3, #0]
    ccc8:	2f00      	cmp	r7, #0
    ccca:	d006      	beq.n	ccda <_ZN7Sd2Card4initEhh+0x166>
    chip_select_asserted = 0;
    cccc:	2300      	movs	r3, #0
    ccce:	465a      	mov	r2, fp
    SDCARD_SPI.endTransaction();
    ccd0:	0028      	movs	r0, r5
    chip_select_asserted = 0;
    ccd2:	7013      	strb	r3, [r2, #0]
  return false;
    ccd4:	2700      	movs	r7, #0
    SDCARD_SPI.endTransaction();
    ccd6:	f001 fe35 	bl	e944 <_ZN8SPIClass14endTransactionEv>
}
    ccda:	0038      	movs	r0, r7
    ccdc:	b005      	add	sp, #20
    ccde:	bc3c      	pop	{r2, r3, r4, r5}
    cce0:	4690      	mov	r8, r2
    cce2:	4699      	mov	r9, r3
    cce4:	46a2      	mov	sl, r4
    cce6:	46ab      	mov	fp, r5
    cce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccea:	2301      	movs	r3, #1
    ccec:	7163      	strb	r3, [r4, #5]
    ccee:	e7e5      	b.n	ccbc <_ZN7Sd2Card4initEhh+0x148>
  void type(uint8_t value) {type_ = value;}
    ccf0:	7323      	strb	r3, [r4, #12]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    ccf2:	2380      	movs	r3, #128	; 0x80
    ccf4:	05db      	lsls	r3, r3, #23
    ccf6:	4699      	mov	r9, r3
    ccf8:	e7a6      	b.n	cc48 <_ZN7Sd2Card4initEhh+0xd4>
  void error(uint8_t code) {errorCode_ = code;}
    ccfa:	2308      	movs	r3, #8
    ccfc:	e7dd      	b.n	ccba <_ZN7Sd2Card4initEhh+0x146>
    if (cardCommand(CMD58, 0)) {
    ccfe:	2200      	movs	r2, #0
    cd00:	213a      	movs	r1, #58	; 0x3a
    cd02:	0020      	movs	r0, r4
    cd04:	f7ff feb0 	bl	ca68 <_ZN7Sd2Card11cardCommandEhm>
    cd08:	2800      	cmp	r0, #0
    cd0a:	d036      	beq.n	cd7a <_ZN7Sd2Card4initEhh+0x206>
    cd0c:	2306      	movs	r3, #6
    cd0e:	7163      	strb	r3, [r4, #5]
    cd10:	e7d4      	b.n	ccbc <_ZN7Sd2Card4initEhh+0x148>
  switch (sckRateID) {
    cd12:	2b05      	cmp	r3, #5
    cd14:	d845      	bhi.n	cda2 <_ZN7Sd2Card4initEhh+0x22e>
    cd16:	4a29      	ldr	r2, [pc, #164]	; (cdbc <_ZN7Sd2Card4initEhh+0x248>)
    cd18:	009b      	lsls	r3, r3, #2
    cd1a:	58d3      	ldr	r3, [r2, r3]
    cd1c:	469f      	mov	pc, r3
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    cd1e:	2302      	movs	r3, #2
    cd20:	2201      	movs	r2, #1
    cd22:	4927      	ldr	r1, [pc, #156]	; (cdc0 <_ZN7Sd2Card4initEhh+0x24c>)
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    cd24:	a802      	add	r0, sp, #8
    cd26:	f7f8 f955 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    cd2a:	4643      	mov	r3, r8
    cd2c:	9a02      	ldr	r2, [sp, #8]
    cd2e:	2701      	movs	r7, #1
    cd30:	601a      	str	r2, [r3, #0]
    cd32:	4642      	mov	r2, r8
    cd34:	ab02      	add	r3, sp, #8
    cd36:	889b      	ldrh	r3, [r3, #4]
    cd38:	8093      	strh	r3, [r2, #4]
    cd3a:	e7ce      	b.n	ccda <_ZN7Sd2Card4initEhh+0x166>
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    cd3c:	2302      	movs	r3, #2
    cd3e:	2201      	movs	r2, #1
    cd40:	4920      	ldr	r1, [pc, #128]	; (cdc4 <_ZN7Sd2Card4initEhh+0x250>)
    cd42:	e7ef      	b.n	cd24 <_ZN7Sd2Card4initEhh+0x1b0>
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    cd44:	2302      	movs	r3, #2
    cd46:	2201      	movs	r2, #1
    cd48:	491f      	ldr	r1, [pc, #124]	; (cdc8 <_ZN7Sd2Card4initEhh+0x254>)
    cd4a:	e7eb      	b.n	cd24 <_ZN7Sd2Card4initEhh+0x1b0>
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    cd4c:	2302      	movs	r3, #2
    cd4e:	2201      	movs	r2, #1
    cd50:	491e      	ldr	r1, [pc, #120]	; (cdcc <_ZN7Sd2Card4initEhh+0x258>)
    cd52:	a802      	add	r0, sp, #8
    cd54:	f7f8 f93e 	bl	4fd4 <_ZN11SPISettingsC1Em8BitOrderh>
    cd58:	4643      	mov	r3, r8
    cd5a:	9a02      	ldr	r2, [sp, #8]
    cd5c:	601a      	str	r2, [r3, #0]
    cd5e:	4642      	mov	r2, r8
    cd60:	ab02      	add	r3, sp, #8
    cd62:	889b      	ldrh	r3, [r3, #4]
    cd64:	8093      	strh	r3, [r2, #4]
    cd66:	9f01      	ldr	r7, [sp, #4]
    cd68:	e7b7      	b.n	ccda <_ZN7Sd2Card4initEhh+0x166>
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    cd6a:	2302      	movs	r3, #2
    cd6c:	2201      	movs	r2, #1
    cd6e:	4918      	ldr	r1, [pc, #96]	; (cdd0 <_ZN7Sd2Card4initEhh+0x25c>)
    cd70:	e7d8      	b.n	cd24 <_ZN7Sd2Card4initEhh+0x1b0>
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    cd72:	2302      	movs	r3, #2
    cd74:	2201      	movs	r2, #1
    cd76:	490e      	ldr	r1, [pc, #56]	; (cdb0 <_ZN7Sd2Card4initEhh+0x23c>)
    cd78:	e7d4      	b.n	cd24 <_ZN7Sd2Card4initEhh+0x1b0>
  return SDCARD_SPI.transfer(0xFF);
    cd7a:	21ff      	movs	r1, #255	; 0xff
    cd7c:	0028      	movs	r0, r5
    cd7e:	f001 fdf3 	bl	e968 <_ZN8SPIClass8transferEh>
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    cd82:	23c0      	movs	r3, #192	; 0xc0
    cd84:	4018      	ands	r0, r3
    cd86:	28c0      	cmp	r0, #192	; 0xc0
    cd88:	d008      	beq.n	cd9c <_ZN7Sd2Card4initEhh+0x228>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    cd8a:	2603      	movs	r6, #3
  return SDCARD_SPI.transfer(0xFF);
    cd8c:	21ff      	movs	r1, #255	; 0xff
    cd8e:	0028      	movs	r0, r5
    cd90:	3e01      	subs	r6, #1
    cd92:	f001 fde9 	bl	e968 <_ZN8SPIClass8transferEh>
    for (uint8_t i = 0; i < 3; i++) spiRec();
    cd96:	2e00      	cmp	r6, #0
    cd98:	d1f8      	bne.n	cd8c <_ZN7Sd2Card4initEhh+0x218>
    cd9a:	e76e      	b.n	cc7a <_ZN7Sd2Card4initEhh+0x106>
  void type(uint8_t value) {type_ = value;}
    cd9c:	3bbd      	subs	r3, #189	; 0xbd
    cd9e:	7323      	strb	r3, [r4, #12]
    cda0:	e7f3      	b.n	cd8a <_ZN7Sd2Card4initEhh+0x216>
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    cda2:	2302      	movs	r3, #2
    cda4:	2201      	movs	r2, #1
    cda6:	490b      	ldr	r1, [pc, #44]	; (cdd4 <_ZN7Sd2Card4initEhh+0x260>)
    cda8:	e7bc      	b.n	cd24 <_ZN7Sd2Card4initEhh+0x1b0>
    cdaa:	46c0      	nop			; (mov r8, r8)
    cdac:	20000a0c 	.word	0x20000a0c
    cdb0:	0003d090 	.word	0x0003d090
    cdb4:	200007f4 	.word	0x200007f4
    cdb8:	200007f0 	.word	0x200007f0
    cdbc:	00010d9c 	.word	0x00010d9c
    cdc0:	0007a120 	.word	0x0007a120
    cdc4:	000f4240 	.word	0x000f4240
    cdc8:	001e8480 	.word	0x001e8480
    cdcc:	003d0900 	.word	0x003d0900
    cdd0:	017d7840 	.word	0x017d7840
    cdd4:	0001e848 	.word	0x0001e848

0000cdd8 <_ZN7Sd2Card9readBlockEmPh>:
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    cdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdda:	46c6      	mov	lr, r8
    cddc:	b500      	push	{lr}
  if (!inBlock_ || block != block_ || offset < offset_) {
    cdde:	7983      	ldrb	r3, [r0, #6]
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    cde0:	0004      	movs	r4, r0
    cde2:	0015      	movs	r5, r2
  if (!inBlock_ || block != block_ || offset < offset_) {
    cde4:	2b00      	cmp	r3, #0
    cde6:	d002      	beq.n	cdee <_ZN7Sd2Card9readBlockEmPh+0x16>
    cde8:	6803      	ldr	r3, [r0, #0]
    cdea:	4299      	cmp	r1, r3
    cdec:	d044      	beq.n	ce78 <_ZN7Sd2Card9readBlockEmPh+0xa0>
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    cdee:	7b23      	ldrb	r3, [r4, #12]
    block_ = block;
    cdf0:	6021      	str	r1, [r4, #0]
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    cdf2:	2b03      	cmp	r3, #3
    cdf4:	d000      	beq.n	cdf8 <_ZN7Sd2Card9readBlockEmPh+0x20>
    cdf6:	0249      	lsls	r1, r1, #9
    if (cardCommand(CMD17, block)) {
    cdf8:	000a      	movs	r2, r1
    cdfa:	0020      	movs	r0, r4
    cdfc:	2111      	movs	r1, #17
    cdfe:	f7ff fe33 	bl	ca68 <_ZN7Sd2Card11cardCommandEhm>
    ce02:	2800      	cmp	r0, #0
    ce04:	d012      	beq.n	ce2c <_ZN7Sd2Card9readBlockEmPh+0x54>
  void error(uint8_t code) {errorCode_ = code;}
    ce06:	2303      	movs	r3, #3
    ce08:	4d40      	ldr	r5, [pc, #256]	; (cf0c <_ZN7Sd2Card9readBlockEmPh+0x134>)
    ce0a:	7163      	strb	r3, [r4, #5]
  digitalWrite(chipSelectPin_, HIGH);
    ce0c:	7920      	ldrb	r0, [r4, #4]
    ce0e:	2101      	movs	r1, #1
    ce10:	f7f7 fede 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    ce14:	7828      	ldrb	r0, [r5, #0]
    ce16:	2800      	cmp	r0, #0
    ce18:	d005      	beq.n	ce26 <_ZN7Sd2Card9readBlockEmPh+0x4e>
    chip_select_asserted = 0;
    ce1a:	2300      	movs	r3, #0
    SDCARD_SPI.endTransaction();
    ce1c:	483c      	ldr	r0, [pc, #240]	; (cf10 <_ZN7Sd2Card9readBlockEmPh+0x138>)
    chip_select_asserted = 0;
    ce1e:	702b      	strb	r3, [r5, #0]
    SDCARD_SPI.endTransaction();
    ce20:	f001 fd90 	bl	e944 <_ZN8SPIClass14endTransactionEv>
  return false;
    ce24:	2000      	movs	r0, #0
}
    ce26:	bc04      	pop	{r2}
    ce28:	4690      	mov	r8, r2
    ce2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
    ce2c:	f7f5 fe4e 	bl	2acc <millis>
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    ce30:	2796      	movs	r7, #150	; 0x96
  unsigned int t0 = millis();
    ce32:	4680      	mov	r8, r0
    ce34:	4e36      	ldr	r6, [pc, #216]	; (cf10 <_ZN7Sd2Card9readBlockEmPh+0x138>)
    if (d > SD_READ_TIMEOUT) {
    ce36:	007f      	lsls	r7, r7, #1
    ce38:	e005      	b.n	ce46 <_ZN7Sd2Card9readBlockEmPh+0x6e>
    unsigned int d = millis() - t0;
    ce3a:	f7f5 fe47 	bl	2acc <millis>
    ce3e:	4643      	mov	r3, r8
    ce40:	1ac0      	subs	r0, r0, r3
    if (d > SD_READ_TIMEOUT) {
    ce42:	42b8      	cmp	r0, r7
    ce44:	d85e      	bhi.n	cf04 <_ZN7Sd2Card9readBlockEmPh+0x12c>
  return SDCARD_SPI.transfer(0xFF);
    ce46:	21ff      	movs	r1, #255	; 0xff
    ce48:	0030      	movs	r0, r6
    ce4a:	f001 fd8d 	bl	e968 <_ZN8SPIClass8transferEh>
  while ((status_ = spiRec()) == 0XFF) {
    ce4e:	72e0      	strb	r0, [r4, #11]
    ce50:	28ff      	cmp	r0, #255	; 0xff
    ce52:	d0f2      	beq.n	ce3a <_ZN7Sd2Card9readBlockEmPh+0x62>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    ce54:	28fe      	cmp	r0, #254	; 0xfe
    ce56:	d050      	beq.n	cefa <_ZN7Sd2Card9readBlockEmPh+0x122>
    ce58:	230d      	movs	r3, #13
    ce5a:	7163      	strb	r3, [r4, #5]
  digitalWrite(chipSelectPin_, HIGH);
    ce5c:	7920      	ldrb	r0, [r4, #4]
    ce5e:	2101      	movs	r1, #1
    ce60:	f7f7 feb6 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    ce64:	4d29      	ldr	r5, [pc, #164]	; (cf0c <_ZN7Sd2Card9readBlockEmPh+0x134>)
    ce66:	782b      	ldrb	r3, [r5, #0]
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d0cf      	beq.n	ce0c <_ZN7Sd2Card9readBlockEmPh+0x34>
    chip_select_asserted = 0;
    ce6c:	2300      	movs	r3, #0
    SDCARD_SPI.endTransaction();
    ce6e:	0030      	movs	r0, r6
    chip_select_asserted = 0;
    ce70:	702b      	strb	r3, [r5, #0]
    SDCARD_SPI.endTransaction();
    ce72:	f001 fd67 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    ce76:	e7c9      	b.n	ce0c <_ZN7Sd2Card9readBlockEmPh+0x34>
  if (!inBlock_ || block != block_ || offset < offset_) {
    ce78:	8903      	ldrh	r3, [r0, #8]
    ce7a:	2b00      	cmp	r3, #0
    ce7c:	d1b7      	bne.n	cdee <_ZN7Sd2Card9readBlockEmPh+0x16>
    ce7e:	4e24      	ldr	r6, [pc, #144]	; (cf10 <_ZN7Sd2Card9readBlockEmPh+0x138>)
    ce80:	2380      	movs	r3, #128	; 0x80
    ce82:	009b      	lsls	r3, r3, #2
    ce84:	18ef      	adds	r7, r5, r3
  return SDCARD_SPI.transfer(0xFF);
    ce86:	21ff      	movs	r1, #255	; 0xff
    ce88:	0030      	movs	r0, r6
    ce8a:	f001 fd6d 	bl	e968 <_ZN8SPIClass8transferEh>
    dst[i] = spiRec();
    ce8e:	7028      	strb	r0, [r5, #0]
    ce90:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < count; i++) {
    ce92:	42bd      	cmp	r5, r7
    ce94:	d1f7      	bne.n	ce86 <_ZN7Sd2Card9readBlockEmPh+0xae>
  offset_ += count;
    ce96:	2380      	movs	r3, #128	; 0x80
    ce98:	8922      	ldrh	r2, [r4, #8]
    ce9a:	009b      	lsls	r3, r3, #2
    ce9c:	18d3      	adds	r3, r2, r3
  if (!partialBlockRead_ || offset_ >= 512) {
    ce9e:	7aa1      	ldrb	r1, [r4, #10]
  offset_ += count;
    cea0:	b29b      	uxth	r3, r3
    cea2:	8123      	strh	r3, [r4, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    cea4:	2900      	cmp	r1, #0
    cea6:	d003      	beq.n	ceb0 <_ZN7Sd2Card9readBlockEmPh+0xd8>
    cea8:	491a      	ldr	r1, [pc, #104]	; (cf14 <_ZN7Sd2Card9readBlockEmPh+0x13c>)
  return true;
    ceaa:	2001      	movs	r0, #1
  if (!partialBlockRead_ || offset_ >= 512) {
    ceac:	428b      	cmp	r3, r1
    ceae:	d9ba      	bls.n	ce26 <_ZN7Sd2Card9readBlockEmPh+0x4e>
  if (inBlock_) {
    ceb0:	79a1      	ldrb	r1, [r4, #6]
  return true;
    ceb2:	2001      	movs	r0, #1
  if (inBlock_) {
    ceb4:	2900      	cmp	r1, #0
    ceb6:	d0b6      	beq.n	ce26 <_ZN7Sd2Card9readBlockEmPh+0x4e>
    while (offset_++ < 514) spiRec();
    ceb8:	4917      	ldr	r1, [pc, #92]	; (cf18 <_ZN7Sd2Card9readBlockEmPh+0x140>)
    ceba:	468c      	mov	ip, r1
    cebc:	4462      	add	r2, ip
    cebe:	8122      	strh	r2, [r4, #8]
    cec0:	000d      	movs	r5, r1
    cec2:	428b      	cmp	r3, r1
    cec4:	d808      	bhi.n	ced8 <_ZN7Sd2Card9readBlockEmPh+0x100>
  return SDCARD_SPI.transfer(0xFF);
    cec6:	21ff      	movs	r1, #255	; 0xff
    cec8:	0030      	movs	r0, r6
    ceca:	f001 fd4d 	bl	e968 <_ZN8SPIClass8transferEh>
    while (offset_++ < 514) spiRec();
    cece:	8923      	ldrh	r3, [r4, #8]
    ced0:	1c5a      	adds	r2, r3, #1
    ced2:	8122      	strh	r2, [r4, #8]
    ced4:	42ab      	cmp	r3, r5
    ced6:	ddf6      	ble.n	cec6 <_ZN7Sd2Card9readBlockEmPh+0xee>
  digitalWrite(chipSelectPin_, HIGH);
    ced8:	7920      	ldrb	r0, [r4, #4]
    ceda:	2101      	movs	r1, #1
    cedc:	f7f7 fe78 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    cee0:	4b0a      	ldr	r3, [pc, #40]	; (cf0c <_ZN7Sd2Card9readBlockEmPh+0x134>)
    cee2:	781a      	ldrb	r2, [r3, #0]
    cee4:	2a00      	cmp	r2, #0
    cee6:	d004      	beq.n	cef2 <_ZN7Sd2Card9readBlockEmPh+0x11a>
    chip_select_asserted = 0;
    cee8:	2200      	movs	r2, #0
    SDCARD_SPI.endTransaction();
    ceea:	0030      	movs	r0, r6
    chip_select_asserted = 0;
    ceec:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.endTransaction();
    ceee:	f001 fd29 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    inBlock_ = 0;
    cef2:	2300      	movs	r3, #0
  return true;
    cef4:	2001      	movs	r0, #1
    inBlock_ = 0;
    cef6:	71a3      	strb	r3, [r4, #6]
    cef8:	e795      	b.n	ce26 <_ZN7Sd2Card9readBlockEmPh+0x4e>
    offset_ = 0;
    cefa:	2300      	movs	r3, #0
    cefc:	8123      	strh	r3, [r4, #8]
    inBlock_ = 1;
    cefe:	3301      	adds	r3, #1
    cf00:	71a3      	strb	r3, [r4, #6]
    cf02:	e7bd      	b.n	ce80 <_ZN7Sd2Card9readBlockEmPh+0xa8>
    cf04:	230f      	movs	r3, #15
    cf06:	7163      	strb	r3, [r4, #5]
    cf08:	e7a8      	b.n	ce5c <_ZN7Sd2Card9readBlockEmPh+0x84>
    cf0a:	46c0      	nop			; (mov r8, r8)
    cf0c:	200007f0 	.word	0x200007f0
    cf10:	20000a0c 	.word	0x20000a0c
    cf14:	000001ff 	.word	0x000001ff
    cf18:	00000201 	.word	0x00000201

0000cf1c <_ZN7Sd2Card8readDataEmttPh>:
        uint16_t offset, uint16_t count, uint8_t* dst) {
    cf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf1e:	46ce      	mov	lr, r9
    cf20:	4647      	mov	r7, r8
    cf22:	0004      	movs	r4, r0
    cf24:	b580      	push	{r7, lr}
    cf26:	0015      	movs	r5, r2
    cf28:	1e1e      	subs	r6, r3, #0
  if (count == 0) return true;
    cf2a:	d100      	bne.n	cf2e <_ZN7Sd2Card8readDataEmttPh+0x12>
    cf2c:	e08b      	b.n	d046 <_ZN7Sd2Card8readDataEmttPh+0x12a>
  if ((count + offset) > 512) {
    cf2e:	189b      	adds	r3, r3, r2
    cf30:	2280      	movs	r2, #128	; 0x80
    cf32:	0092      	lsls	r2, r2, #2
    cf34:	4293      	cmp	r3, r2
    cf36:	dc14      	bgt.n	cf62 <_ZN7Sd2Card8readDataEmttPh+0x46>
  if (!inBlock_ || block != block_ || offset < offset_) {
    cf38:	7983      	ldrb	r3, [r0, #6]
    cf3a:	2b00      	cmp	r3, #0
    cf3c:	d003      	beq.n	cf46 <_ZN7Sd2Card8readDataEmttPh+0x2a>
    cf3e:	6803      	ldr	r3, [r0, #0]
    cf40:	4299      	cmp	r1, r3
    cf42:	d100      	bne.n	cf46 <_ZN7Sd2Card8readDataEmttPh+0x2a>
    cf44:	e081      	b.n	d04a <_ZN7Sd2Card8readDataEmttPh+0x12e>
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    cf46:	7b23      	ldrb	r3, [r4, #12]
    block_ = block;
    cf48:	6021      	str	r1, [r4, #0]
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    cf4a:	2b03      	cmp	r3, #3
    cf4c:	d000      	beq.n	cf50 <_ZN7Sd2Card8readDataEmttPh+0x34>
    cf4e:	0249      	lsls	r1, r1, #9
    if (cardCommand(CMD17, block)) {
    cf50:	000a      	movs	r2, r1
    cf52:	0020      	movs	r0, r4
    cf54:	2111      	movs	r1, #17
    cf56:	f7ff fd87 	bl	ca68 <_ZN7Sd2Card11cardCommandEhm>
    cf5a:	2800      	cmp	r0, #0
    cf5c:	d013      	beq.n	cf86 <_ZN7Sd2Card8readDataEmttPh+0x6a>
    cf5e:	2303      	movs	r3, #3
    cf60:	7163      	strb	r3, [r4, #5]
    cf62:	4d47      	ldr	r5, [pc, #284]	; (d080 <_ZN7Sd2Card8readDataEmttPh+0x164>)
  digitalWrite(chipSelectPin_, HIGH);
    cf64:	7920      	ldrb	r0, [r4, #4]
    cf66:	2101      	movs	r1, #1
    cf68:	f7f7 fe32 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    cf6c:	7828      	ldrb	r0, [r5, #0]
    cf6e:	2800      	cmp	r0, #0
    cf70:	d005      	beq.n	cf7e <_ZN7Sd2Card8readDataEmttPh+0x62>
    chip_select_asserted = 0;
    cf72:	2300      	movs	r3, #0
    SDCARD_SPI.endTransaction();
    cf74:	4843      	ldr	r0, [pc, #268]	; (d084 <_ZN7Sd2Card8readDataEmttPh+0x168>)
    chip_select_asserted = 0;
    cf76:	702b      	strb	r3, [r5, #0]
    SDCARD_SPI.endTransaction();
    cf78:	f001 fce4 	bl	e944 <_ZN8SPIClass14endTransactionEv>
  return false;
    cf7c:	2000      	movs	r0, #0
}
    cf7e:	bc0c      	pop	{r2, r3}
    cf80:	4690      	mov	r8, r2
    cf82:	4699      	mov	r9, r3
    cf84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  unsigned int t0 = millis();
    cf86:	f7f5 fda1 	bl	2acc <millis>
    if (d > SD_READ_TIMEOUT) {
    cf8a:	2396      	movs	r3, #150	; 0x96
    cf8c:	005b      	lsls	r3, r3, #1
  unsigned int t0 = millis();
    cf8e:	4681      	mov	r9, r0
    cf90:	4f3c      	ldr	r7, [pc, #240]	; (d084 <_ZN7Sd2Card8readDataEmttPh+0x168>)
    if (d > SD_READ_TIMEOUT) {
    cf92:	4698      	mov	r8, r3
    cf94:	e005      	b.n	cfa2 <_ZN7Sd2Card8readDataEmttPh+0x86>
    unsigned int d = millis() - t0;
    cf96:	f7f5 fd99 	bl	2acc <millis>
    cf9a:	464b      	mov	r3, r9
    cf9c:	1ac0      	subs	r0, r0, r3
    if (d > SD_READ_TIMEOUT) {
    cf9e:	4540      	cmp	r0, r8
    cfa0:	d859      	bhi.n	d056 <_ZN7Sd2Card8readDataEmttPh+0x13a>
  return SDCARD_SPI.transfer(0xFF);
    cfa2:	21ff      	movs	r1, #255	; 0xff
    cfa4:	0038      	movs	r0, r7
    cfa6:	f001 fcdf 	bl	e968 <_ZN8SPIClass8transferEh>
  while ((status_ = spiRec()) == 0XFF) {
    cfaa:	72e0      	strb	r0, [r4, #11]
    cfac:	28ff      	cmp	r0, #255	; 0xff
    cfae:	d0f2      	beq.n	cf96 <_ZN7Sd2Card8readDataEmttPh+0x7a>
  if (status_ != DATA_START_BLOCK) {
    cfb0:	28fe      	cmp	r0, #254	; 0xfe
    cfb2:	d161      	bne.n	d078 <_ZN7Sd2Card8readDataEmttPh+0x15c>
    offset_ = 0;
    cfb4:	2300      	movs	r3, #0
    cfb6:	8123      	strh	r3, [r4, #8]
    inBlock_ = 1;
    cfb8:	3301      	adds	r3, #1
    cfba:	71a3      	strb	r3, [r4, #6]
    cfbc:	2300      	movs	r3, #0
    cfbe:	e007      	b.n	cfd0 <_ZN7Sd2Card8readDataEmttPh+0xb4>
  return SDCARD_SPI.transfer(0xFF);
    cfc0:	21ff      	movs	r1, #255	; 0xff
    cfc2:	0038      	movs	r0, r7
    cfc4:	f001 fcd0 	bl	e968 <_ZN8SPIClass8transferEh>
  for (;offset_ < offset; offset_++) {
    cfc8:	8923      	ldrh	r3, [r4, #8]
    cfca:	3301      	adds	r3, #1
    cfcc:	b29b      	uxth	r3, r3
    cfce:	8123      	strh	r3, [r4, #8]
    cfd0:	429d      	cmp	r5, r3
    cfd2:	dcf5      	bgt.n	cfc0 <_ZN7Sd2Card8readDataEmttPh+0xa4>
        uint16_t offset, uint16_t count, uint8_t* dst) {
    cfd4:	2500      	movs	r5, #0
    dst[i] = spiRec();
    cfd6:	9b08      	ldr	r3, [sp, #32]
  return SDCARD_SPI.transfer(0xFF);
    cfd8:	21ff      	movs	r1, #255	; 0xff
    dst[i] = spiRec();
    cfda:	4698      	mov	r8, r3
  return SDCARD_SPI.transfer(0xFF);
    cfdc:	0038      	movs	r0, r7
    dst[i] = spiRec();
    cfde:	44a8      	add	r8, r5
  return SDCARD_SPI.transfer(0xFF);
    cfe0:	f001 fcc2 	bl	e968 <_ZN8SPIClass8transferEh>
    dst[i] = spiRec();
    cfe4:	4643      	mov	r3, r8
  for (uint16_t i = 0; i < count; i++) {
    cfe6:	3501      	adds	r5, #1
    cfe8:	b2ad      	uxth	r5, r5
    dst[i] = spiRec();
    cfea:	7018      	strb	r0, [r3, #0]
  for (uint16_t i = 0; i < count; i++) {
    cfec:	42ae      	cmp	r6, r5
    cfee:	dcf2      	bgt.n	cfd6 <_ZN7Sd2Card8readDataEmttPh+0xba>
  offset_ += count;
    cff0:	8923      	ldrh	r3, [r4, #8]
    cff2:	18f6      	adds	r6, r6, r3
  if (!partialBlockRead_ || offset_ >= 512) {
    cff4:	7aa3      	ldrb	r3, [r4, #10]
  offset_ += count;
    cff6:	b2b6      	uxth	r6, r6
    cff8:	8126      	strh	r6, [r4, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    cffa:	2b00      	cmp	r3, #0
    cffc:	d002      	beq.n	d004 <_ZN7Sd2Card8readDataEmttPh+0xe8>
    cffe:	4b22      	ldr	r3, [pc, #136]	; (d088 <_ZN7Sd2Card8readDataEmttPh+0x16c>)
    d000:	429e      	cmp	r6, r3
    d002:	d920      	bls.n	d046 <_ZN7Sd2Card8readDataEmttPh+0x12a>
  if (inBlock_) {
    d004:	79a3      	ldrb	r3, [r4, #6]
    d006:	2b00      	cmp	r3, #0
    d008:	d01d      	beq.n	d046 <_ZN7Sd2Card8readDataEmttPh+0x12a>
    while (offset_++ < 514) spiRec();
    d00a:	1c73      	adds	r3, r6, #1
    d00c:	8123      	strh	r3, [r4, #8]
    d00e:	4b1f      	ldr	r3, [pc, #124]	; (d08c <_ZN7Sd2Card8readDataEmttPh+0x170>)
    d010:	001d      	movs	r5, r3
    d012:	429e      	cmp	r6, r3
    d014:	d808      	bhi.n	d028 <_ZN7Sd2Card8readDataEmttPh+0x10c>
  return SDCARD_SPI.transfer(0xFF);
    d016:	21ff      	movs	r1, #255	; 0xff
    d018:	0038      	movs	r0, r7
    d01a:	f001 fca5 	bl	e968 <_ZN8SPIClass8transferEh>
    while (offset_++ < 514) spiRec();
    d01e:	8923      	ldrh	r3, [r4, #8]
    d020:	1c5a      	adds	r2, r3, #1
    d022:	8122      	strh	r2, [r4, #8]
    d024:	42ab      	cmp	r3, r5
    d026:	ddf6      	ble.n	d016 <_ZN7Sd2Card8readDataEmttPh+0xfa>
  digitalWrite(chipSelectPin_, HIGH);
    d028:	7920      	ldrb	r0, [r4, #4]
    d02a:	2101      	movs	r1, #1
    d02c:	f7f7 fdd0 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    d030:	4b13      	ldr	r3, [pc, #76]	; (d080 <_ZN7Sd2Card8readDataEmttPh+0x164>)
    d032:	781a      	ldrb	r2, [r3, #0]
    d034:	2a00      	cmp	r2, #0
    d036:	d004      	beq.n	d042 <_ZN7Sd2Card8readDataEmttPh+0x126>
    chip_select_asserted = 0;
    d038:	2200      	movs	r2, #0
    SDCARD_SPI.endTransaction();
    d03a:	0038      	movs	r0, r7
    chip_select_asserted = 0;
    d03c:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.endTransaction();
    d03e:	f001 fc81 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    inBlock_ = 0;
    d042:	2300      	movs	r3, #0
    d044:	71a3      	strb	r3, [r4, #6]
  return true;
    d046:	2001      	movs	r0, #1
    d048:	e799      	b.n	cf7e <_ZN7Sd2Card8readDataEmttPh+0x62>
  if (!inBlock_ || block != block_ || offset < offset_) {
    d04a:	8903      	ldrh	r3, [r0, #8]
    d04c:	429d      	cmp	r5, r3
    d04e:	da00      	bge.n	d052 <_ZN7Sd2Card8readDataEmttPh+0x136>
    d050:	e779      	b.n	cf46 <_ZN7Sd2Card8readDataEmttPh+0x2a>
    d052:	4f0c      	ldr	r7, [pc, #48]	; (d084 <_ZN7Sd2Card8readDataEmttPh+0x168>)
    d054:	e7bc      	b.n	cfd0 <_ZN7Sd2Card8readDataEmttPh+0xb4>
    d056:	230f      	movs	r3, #15
    d058:	7163      	strb	r3, [r4, #5]
  digitalWrite(chipSelectPin_, HIGH);
    d05a:	7920      	ldrb	r0, [r4, #4]
    d05c:	2101      	movs	r1, #1
    d05e:	f7f7 fdb7 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    d062:	4d07      	ldr	r5, [pc, #28]	; (d080 <_ZN7Sd2Card8readDataEmttPh+0x164>)
    d064:	782b      	ldrb	r3, [r5, #0]
    d066:	2b00      	cmp	r3, #0
    d068:	d100      	bne.n	d06c <_ZN7Sd2Card8readDataEmttPh+0x150>
    d06a:	e77b      	b.n	cf64 <_ZN7Sd2Card8readDataEmttPh+0x48>
    chip_select_asserted = 0;
    d06c:	2300      	movs	r3, #0
    SDCARD_SPI.endTransaction();
    d06e:	0038      	movs	r0, r7
    chip_select_asserted = 0;
    d070:	702b      	strb	r3, [r5, #0]
    SDCARD_SPI.endTransaction();
    d072:	f001 fc67 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    d076:	e775      	b.n	cf64 <_ZN7Sd2Card8readDataEmttPh+0x48>
    d078:	230d      	movs	r3, #13
    d07a:	7163      	strb	r3, [r4, #5]
    d07c:	e7ed      	b.n	d05a <_ZN7Sd2Card8readDataEmttPh+0x13e>
    d07e:	46c0      	nop			; (mov r8, r8)
    d080:	200007f0 	.word	0x200007f0
    d084:	20000a0c 	.word	0x20000a0c
    d088:	000001ff 	.word	0x000001ff
    d08c:	00000201 	.word	0x00000201

0000d090 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d092:	0007      	movs	r7, r0
    d094:	0014      	movs	r4, r2
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    d096:	2900      	cmp	r1, #0
    d098:	d110      	bne.n	d0bc <_ZN7Sd2Card10writeBlockEmPKh+0x2c>
    d09a:	2312      	movs	r3, #18
    d09c:	4c41      	ldr	r4, [pc, #260]	; (d1a4 <_ZN7Sd2Card10writeBlockEmPKh+0x114>)
    d09e:	7143      	strb	r3, [r0, #5]
  digitalWrite(chipSelectPin_, HIGH);
    d0a0:	7938      	ldrb	r0, [r7, #4]
    d0a2:	2101      	movs	r1, #1
    d0a4:	f7f7 fd94 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    d0a8:	7820      	ldrb	r0, [r4, #0]
    d0aa:	2800      	cmp	r0, #0
    d0ac:	d005      	beq.n	d0ba <_ZN7Sd2Card10writeBlockEmPKh+0x2a>
    chip_select_asserted = 0;
    d0ae:	2300      	movs	r3, #0
    SDCARD_SPI.endTransaction();
    d0b0:	483d      	ldr	r0, [pc, #244]	; (d1a8 <_ZN7Sd2Card10writeBlockEmPKh+0x118>)
    chip_select_asserted = 0;
    d0b2:	7023      	strb	r3, [r4, #0]
    SDCARD_SPI.endTransaction();
    d0b4:	f001 fc46 	bl	e944 <_ZN8SPIClass14endTransactionEv>
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
  return false;
    d0b8:	2000      	movs	r0, #0
}
    d0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    d0bc:	7b03      	ldrb	r3, [r0, #12]
    d0be:	2b03      	cmp	r3, #3
    d0c0:	d000      	beq.n	d0c4 <_ZN7Sd2Card10writeBlockEmPKh+0x34>
    d0c2:	0249      	lsls	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
    d0c4:	000a      	movs	r2, r1
    d0c6:	0038      	movs	r0, r7
    d0c8:	2118      	movs	r1, #24
    d0ca:	f7ff fccd 	bl	ca68 <_ZN7Sd2Card11cardCommandEhm>
    d0ce:	2800      	cmp	r0, #0
    d0d0:	d003      	beq.n	d0da <_ZN7Sd2Card10writeBlockEmPKh+0x4a>
    d0d2:	2304      	movs	r3, #4
    d0d4:	4c33      	ldr	r4, [pc, #204]	; (d1a4 <_ZN7Sd2Card10writeBlockEmPKh+0x114>)
    d0d6:	717b      	strb	r3, [r7, #5]
    d0d8:	e7e2      	b.n	d0a0 <_ZN7Sd2Card10writeBlockEmPKh+0x10>
  SDCARD_SPI.transfer(b);
    d0da:	4d33      	ldr	r5, [pc, #204]	; (d1a8 <_ZN7Sd2Card10writeBlockEmPKh+0x118>)
    d0dc:	21fe      	movs	r1, #254	; 0xfe
    d0de:	0028      	movs	r0, r5
    d0e0:	f001 fc42 	bl	e968 <_ZN8SPIClass8transferEh>
    d0e4:	2380      	movs	r3, #128	; 0x80
    d0e6:	009b      	lsls	r3, r3, #2
    d0e8:	18e6      	adds	r6, r4, r3
    d0ea:	7821      	ldrb	r1, [r4, #0]
    d0ec:	0028      	movs	r0, r5
    d0ee:	3401      	adds	r4, #1
    d0f0:	f001 fc3a 	bl	e968 <_ZN8SPIClass8transferEh>
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    d0f4:	42a6      	cmp	r6, r4
    d0f6:	d1f8      	bne.n	d0ea <_ZN7Sd2Card10writeBlockEmPKh+0x5a>
  SDCARD_SPI.transfer(b);
    d0f8:	21ff      	movs	r1, #255	; 0xff
    d0fa:	0028      	movs	r0, r5
    d0fc:	f001 fc34 	bl	e968 <_ZN8SPIClass8transferEh>
    d100:	21ff      	movs	r1, #255	; 0xff
    d102:	0028      	movs	r0, r5
    d104:	f001 fc30 	bl	e968 <_ZN8SPIClass8transferEh>
  return SDCARD_SPI.transfer(0xFF);
    d108:	21ff      	movs	r1, #255	; 0xff
    d10a:	0028      	movs	r0, r5
    d10c:	f001 fc2c 	bl	e968 <_ZN8SPIClass8transferEh>
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    d110:	231f      	movs	r3, #31
  status_ = spiRec();
    d112:	72f8      	strb	r0, [r7, #11]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    d114:	4018      	ands	r0, r3
    d116:	2805      	cmp	r0, #5
    d118:	d00f      	beq.n	d13a <_ZN7Sd2Card10writeBlockEmPKh+0xaa>
    d11a:	3b0e      	subs	r3, #14
    d11c:	717b      	strb	r3, [r7, #5]
  digitalWrite(chipSelectPin_, HIGH);
    d11e:	7938      	ldrb	r0, [r7, #4]
    d120:	2101      	movs	r1, #1
    d122:	f7f7 fd55 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    d126:	4c1f      	ldr	r4, [pc, #124]	; (d1a4 <_ZN7Sd2Card10writeBlockEmPKh+0x114>)
    d128:	7823      	ldrb	r3, [r4, #0]
    d12a:	2b00      	cmp	r3, #0
    d12c:	d0b8      	beq.n	d0a0 <_ZN7Sd2Card10writeBlockEmPKh+0x10>
    chip_select_asserted = 0;
    d12e:	2300      	movs	r3, #0
    SDCARD_SPI.endTransaction();
    d130:	0028      	movs	r0, r5
    chip_select_asserted = 0;
    d132:	7023      	strb	r3, [r4, #0]
    SDCARD_SPI.endTransaction();
    d134:	f001 fc06 	bl	e944 <_ZN8SPIClass14endTransactionEv>
    d138:	e7b2      	b.n	d0a0 <_ZN7Sd2Card10writeBlockEmPKh+0x10>
  unsigned int t0 = millis();
    d13a:	f7f5 fcc7 	bl	2acc <millis>
  while (d < timeoutMillis);
    d13e:	4c1b      	ldr	r4, [pc, #108]	; (d1ac <_ZN7Sd2Card10writeBlockEmPKh+0x11c>)
  unsigned int t0 = millis();
    d140:	0006      	movs	r6, r0
    d142:	e004      	b.n	d14e <_ZN7Sd2Card10writeBlockEmPKh+0xbe>
    d = millis() - t0;
    d144:	f7f5 fcc2 	bl	2acc <millis>
    d148:	1b80      	subs	r0, r0, r6
  while (d < timeoutMillis);
    d14a:	42a0      	cmp	r0, r4
    d14c:	d810      	bhi.n	d170 <_ZN7Sd2Card10writeBlockEmPKh+0xe0>
  return SDCARD_SPI.transfer(0xFF);
    d14e:	21ff      	movs	r1, #255	; 0xff
    d150:	0028      	movs	r0, r5
    d152:	f001 fc09 	bl	e968 <_ZN8SPIClass8transferEh>
    if (spiRec() == 0XFF) return true;
    d156:	28ff      	cmp	r0, #255	; 0xff
    d158:	d1f4      	bne.n	d144 <_ZN7Sd2Card10writeBlockEmPKh+0xb4>
  if (cardCommand(CMD13, 0) || spiRec()) {
    d15a:	2200      	movs	r2, #0
    d15c:	210d      	movs	r1, #13
    d15e:	0038      	movs	r0, r7
    d160:	f7ff fc82 	bl	ca68 <_ZN7Sd2Card11cardCommandEhm>
    d164:	2800      	cmp	r0, #0
    d166:	d007      	beq.n	d178 <_ZN7Sd2Card10writeBlockEmPKh+0xe8>
    d168:	2314      	movs	r3, #20
    d16a:	4c0e      	ldr	r4, [pc, #56]	; (d1a4 <_ZN7Sd2Card10writeBlockEmPKh+0x114>)
    d16c:	717b      	strb	r3, [r7, #5]
    d16e:	e797      	b.n	d0a0 <_ZN7Sd2Card10writeBlockEmPKh+0x10>
    d170:	2315      	movs	r3, #21
    d172:	4c0c      	ldr	r4, [pc, #48]	; (d1a4 <_ZN7Sd2Card10writeBlockEmPKh+0x114>)
    d174:	717b      	strb	r3, [r7, #5]
    d176:	e793      	b.n	d0a0 <_ZN7Sd2Card10writeBlockEmPKh+0x10>
  return SDCARD_SPI.transfer(0xFF);
    d178:	21ff      	movs	r1, #255	; 0xff
    d17a:	0028      	movs	r0, r5
    d17c:	f001 fbf4 	bl	e968 <_ZN8SPIClass8transferEh>
    d180:	1e04      	subs	r4, r0, #0
  if (cardCommand(CMD13, 0) || spiRec()) {
    d182:	d1f1      	bne.n	d168 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  digitalWrite(chipSelectPin_, HIGH);
    d184:	7938      	ldrb	r0, [r7, #4]
    d186:	2101      	movs	r1, #1
    d188:	f7f7 fd22 	bl	4bd0 <digitalWrite>
  if (chip_select_asserted) {
    d18c:	4b05      	ldr	r3, [pc, #20]	; (d1a4 <_ZN7Sd2Card10writeBlockEmPKh+0x114>)
    d18e:	781a      	ldrb	r2, [r3, #0]
    d190:	2a00      	cmp	r2, #0
    d192:	d101      	bne.n	d198 <_ZN7Sd2Card10writeBlockEmPKh+0x108>
  return true;
    d194:	2001      	movs	r0, #1
    d196:	e790      	b.n	d0ba <_ZN7Sd2Card10writeBlockEmPKh+0x2a>
    SDCARD_SPI.endTransaction();
    d198:	0028      	movs	r0, r5
    chip_select_asserted = 0;
    d19a:	701c      	strb	r4, [r3, #0]
    SDCARD_SPI.endTransaction();
    d19c:	f001 fbd2 	bl	e944 <_ZN8SPIClass14endTransactionEv>
  return true;
    d1a0:	2001      	movs	r0, #1
    d1a2:	e78a      	b.n	d0ba <_ZN7Sd2Card10writeBlockEmPKh+0x2a>
    d1a4:	200007f0 	.word	0x200007f0
    d1a8:	20000a0c 	.word	0x20000a0c
    d1ac:	00000257 	.word	0x00000257

0000d1b0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    d1b0:	4b03      	ldr	r3, [pc, #12]	; (d1c0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    d1b2:	4a04      	ldr	r2, [pc, #16]	; (d1c4 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x14>)
    d1b4:	601a      	str	r2, [r3, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    d1b6:	2200      	movs	r2, #0
    d1b8:	715a      	strb	r2, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    d1ba:	711a      	strb	r2, [r3, #4]

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    d1bc:	4770      	bx	lr
    d1be:	46c0      	nop			; (mov r8, r8)
    d1c0:	200007f4 	.word	0x200007f4
    d1c4:	003d0900 	.word	0x003d0900

0000d1c8 <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    d1c8:	b570      	push	{r4, r5, r6, lr}
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    d1ca:	7a43      	ldrb	r3, [r0, #9]
uint8_t SdFile::close(void) {
    d1cc:	0004      	movs	r4, r0
  if (!isOpen()) return false;
    d1ce:	2b00      	cmp	r3, #0
    d1d0:	d101      	bne.n	d1d6 <_ZN6SdFile5closeEv+0xe>
  if (!sync())return false;
    d1d2:	2000      	movs	r0, #0
}
    d1d4:	bd70      	pop	{r4, r5, r6, pc}

  if (flags_ & F_FILE_DIR_DIRTY) {
    d1d6:	7a03      	ldrb	r3, [r0, #8]
    d1d8:	2b7f      	cmp	r3, #127	; 0x7f
    d1da:	d807      	bhi.n	d1ec <_ZN6SdFile5closeEv+0x24>
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    d1dc:	f000 ff3c 	bl	e058 <_ZN8SdVolume10cacheFlushEv>
  if (!sync())return false;
    d1e0:	2800      	cmp	r0, #0
    d1e2:	d0f6      	beq.n	d1d2 <_ZN6SdFile5closeEv+0xa>
  type_ = FAT_FILE_TYPE_CLOSED;
    d1e4:	2300      	movs	r3, #0
  return true;
    d1e6:	2001      	movs	r0, #1
  type_ = FAT_FILE_TYPE_CLOSED;
    d1e8:	7263      	strb	r3, [r4, #9]
  return true;
    d1ea:	e7f3      	b.n	d1d4 <_ZN6SdFile5closeEv+0xc>
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    d1ec:	2101      	movs	r1, #1
    d1ee:	6940      	ldr	r0, [r0, #20]
    d1f0:	f000 ff60 	bl	e0b4 <_ZN8SdVolume13cacheRawBlockEmh>
    d1f4:	2800      	cmp	r0, #0
    d1f6:	d0ec      	beq.n	d1d2 <_ZN6SdFile5closeEv+0xa>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    d1f8:	7e25      	ldrb	r5, [r4, #24]
    d1fa:	4b0f      	ldr	r3, [pc, #60]	; (d238 <_ZN6SdFile5closeEv+0x70>)
    d1fc:	016d      	lsls	r5, r5, #5
    d1fe:	18ed      	adds	r5, r5, r3
    if (!d) return false;
    d200:	2d00      	cmp	r5, #0
    d202:	d0e6      	beq.n	d1d2 <_ZN6SdFile5closeEv+0xa>
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    d204:	7a63      	ldrb	r3, [r4, #9]
    if (!isDir()) d->fileSize = fileSize_;
    d206:	2b01      	cmp	r3, #1
    d208:	dd13      	ble.n	d232 <_ZN6SdFile5closeEv+0x6a>
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d20a:	6a23      	ldr	r3, [r4, #32]
    d20c:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    d20e:	0c1b      	lsrs	r3, r3, #16
    d210:	82ab      	strh	r3, [r5, #20]
    if (dateTime_) {
    d212:	4b0a      	ldr	r3, [pc, #40]	; (d23c <_ZN6SdFile5closeEv+0x74>)
    d214:	681b      	ldr	r3, [r3, #0]
    d216:	2b00      	cmp	r3, #0
    d218:	d006      	beq.n	d228 <_ZN6SdFile5closeEv+0x60>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    d21a:	0029      	movs	r1, r5
    d21c:	0028      	movs	r0, r5
    d21e:	3116      	adds	r1, #22
    d220:	3018      	adds	r0, #24
    d222:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    d224:	8b2b      	ldrh	r3, [r5, #24]
    d226:	826b      	strh	r3, [r5, #18]
    flags_ &= ~F_FILE_DIR_DIRTY;
    d228:	237f      	movs	r3, #127	; 0x7f
    d22a:	7a22      	ldrb	r2, [r4, #8]
    d22c:	4013      	ands	r3, r2
    d22e:	7223      	strb	r3, [r4, #8]
    d230:	e7d4      	b.n	d1dc <_ZN6SdFile5closeEv+0x14>
    if (!isDir()) d->fileSize = fileSize_;
    d232:	69e3      	ldr	r3, [r4, #28]
    d234:	61eb      	str	r3, [r5, #28]
    d236:	e7e8      	b.n	d20a <_ZN6SdFile5closeEv+0x42>
    d238:	20000804 	.word	0x20000804
    d23c:	200007fc 	.word	0x200007fc

0000d240 <_ZN6SdFile15openCachedEntryEhh>:
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    d240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d242:	0004      	movs	r4, r0
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    d244:	2011      	movs	r0, #17
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    d246:	4f41      	ldr	r7, [pc, #260]	; (d34c <_ZN6SdFile15openCachedEntryEhh+0x10c>)
    d248:	014b      	lsls	r3, r1, #5
    d24a:	18fb      	adds	r3, r7, r3
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    d24c:	0016      	movs	r6, r2
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    d24e:	7ada      	ldrb	r2, [r3, #11]
    d250:	4210      	tst	r0, r2
    d252:	d002      	beq.n	d25a <_ZN6SdFile15openCachedEntryEhh+0x1a>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    d254:	2242      	movs	r2, #66	; 0x42
    d256:	4232      	tst	r2, r6
    d258:	d12c      	bne.n	d2b4 <_ZN6SdFile15openCachedEntryEhh+0x74>
    d25a:	2518      	movs	r5, #24
  dirBlock_ = SdVolume::cacheBlockNumber_;
    d25c:	4a3c      	ldr	r2, [pc, #240]	; (d350 <_ZN6SdFile15openCachedEntryEhh+0x110>)
  dirIndex_ = dirIndex;
    d25e:	7621      	strb	r1, [r4, #24]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    d260:	6812      	ldr	r2, [r2, #0]
    d262:	6162      	str	r2, [r4, #20]
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    d264:	8a99      	ldrh	r1, [r3, #20]
  firstCluster_ |= p->firstClusterLow;
    d266:	8b5a      	ldrh	r2, [r3, #26]
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    d268:	0409      	lsls	r1, r1, #16
  firstCluster_ |= p->firstClusterLow;
    d26a:	4311      	orrs	r1, r2
    d26c:	6221      	str	r1, [r4, #32]
    d26e:	7ada      	ldrb	r2, [r3, #11]
    d270:	4015      	ands	r5, r2
  if (DIR_IS_FILE(p)) {
    d272:	d10c      	bne.n	d28e <_ZN6SdFile15openCachedEntryEhh+0x4e>
    fileSize_ = p->fileSize;
    d274:	69da      	ldr	r2, [r3, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
    d276:	2301      	movs	r3, #1
    d278:	7263      	strb	r3, [r4, #9]
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    d27a:	330e      	adds	r3, #14
    d27c:	4033      	ands	r3, r6
    fileSize_ = p->fileSize;
    d27e:	61e2      	str	r2, [r4, #28]
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    d280:	7223      	strb	r3, [r4, #8]
  curCluster_ = 0;
    d282:	60e5      	str	r5, [r4, #12]
  curPosition_ = 0;
    d284:	6125      	str	r5, [r4, #16]
  if (oflag & O_TRUNC) return truncate(0);
    d286:	0673      	lsls	r3, r6, #25
    d288:	d416      	bmi.n	d2b8 <_ZN6SdFile15openCachedEntryEhh+0x78>
    return true;
    d28a:	2001      	movs	r0, #1
    d28c:	e013      	b.n	d2b6 <_ZN6SdFile15openCachedEntryEhh+0x76>
  } else if (DIR_IS_SUBDIR(p)) {
    d28e:	2d10      	cmp	r5, #16
    d290:	d110      	bne.n	d2b4 <_ZN6SdFile15openCachedEntryEhh+0x74>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    d292:	0022      	movs	r2, r4
    d294:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d296:	321c      	adds	r2, #28
    d298:	f000 ff9a 	bl	e1d0 <_ZNK8SdVolume9chainSizeEmPm>
    d29c:	2800      	cmp	r0, #0
    d29e:	d009      	beq.n	d2b4 <_ZN6SdFile15openCachedEntryEhh+0x74>
    type_ = FAT_FILE_TYPE_SUBDIR;
    d2a0:	2304      	movs	r3, #4
    d2a2:	7263      	strb	r3, [r4, #9]
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    d2a4:	330b      	adds	r3, #11
    d2a6:	4033      	ands	r3, r6
    d2a8:	7223      	strb	r3, [r4, #8]
  curCluster_ = 0;
    d2aa:	2300      	movs	r3, #0
    d2ac:	60e3      	str	r3, [r4, #12]
  curPosition_ = 0;
    d2ae:	6123      	str	r3, [r4, #16]
  if (oflag & O_TRUNC) return truncate(0);
    d2b0:	0673      	lsls	r3, r6, #25
    d2b2:	d5ea      	bpl.n	d28a <_ZN6SdFile15openCachedEntryEhh+0x4a>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    d2b4:	2000      	movs	r0, #0
}
    d2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    d2b8:	07b3      	lsls	r3, r6, #30
    d2ba:	d5fb      	bpl.n	d2b4 <_ZN6SdFile15openCachedEntryEhh+0x74>
  return true;
    d2bc:	2001      	movs	r0, #1

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    d2be:	2a00      	cmp	r2, #0
    d2c0:	d0f9      	beq.n	d2b6 <_ZN6SdFile15openCachedEntryEhh+0x76>
  // position to last cluster in truncated file
  if (!seekSet(length)) return false;

  if (length == 0) {
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    d2c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d2c4:	f001 f894 	bl	e3f0 <_ZN8SdVolume9freeChainEm>
    d2c8:	2800      	cmp	r0, #0
    d2ca:	d0f3      	beq.n	d2b4 <_ZN6SdFile15openCachedEntryEhh+0x74>
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    d2cc:	2380      	movs	r3, #128	; 0x80
    d2ce:	7a22      	ldrb	r2, [r4, #8]
    d2d0:	425b      	negs	r3, r3
    d2d2:	4313      	orrs	r3, r2
    d2d4:	7223      	strb	r3, [r4, #8]
  if (!isOpen()) return false;
    d2d6:	7a63      	ldrb	r3, [r4, #9]
    firstCluster_ = 0;
    d2d8:	6225      	str	r5, [r4, #32]
  fileSize_ = length;
    d2da:	61e5      	str	r5, [r4, #28]
  if (!isOpen()) return false;
    d2dc:	2b00      	cmp	r3, #0
    d2de:	d0e9      	beq.n	d2b4 <_ZN6SdFile15openCachedEntryEhh+0x74>
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    d2e0:	2101      	movs	r1, #1
    d2e2:	6960      	ldr	r0, [r4, #20]
    d2e4:	f000 fee6 	bl	e0b4 <_ZN8SdVolume13cacheRawBlockEmh>
    d2e8:	2800      	cmp	r0, #0
    d2ea:	d0e3      	beq.n	d2b4 <_ZN6SdFile15openCachedEntryEhh+0x74>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    d2ec:	7e23      	ldrb	r3, [r4, #24]
    d2ee:	015b      	lsls	r3, r3, #5
    d2f0:	18ff      	adds	r7, r7, r3
    if (!d) return false;
    d2f2:	2f00      	cmp	r7, #0
    d2f4:	d0de      	beq.n	d2b4 <_ZN6SdFile15openCachedEntryEhh+0x74>
    d2f6:	7a63      	ldrb	r3, [r4, #9]
    if (!isDir()) d->fileSize = fileSize_;
    d2f8:	2b01      	cmp	r3, #1
    d2fa:	dd24      	ble.n	d346 <_ZN6SdFile15openCachedEntryEhh+0x106>
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d2fc:	6a23      	ldr	r3, [r4, #32]
    d2fe:	837b      	strh	r3, [r7, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    d300:	0c1b      	lsrs	r3, r3, #16
    d302:	82bb      	strh	r3, [r7, #20]
    if (dateTime_) {
    d304:	4b13      	ldr	r3, [pc, #76]	; (d354 <_ZN6SdFile15openCachedEntryEhh+0x114>)
    d306:	681b      	ldr	r3, [r3, #0]
    d308:	2b00      	cmp	r3, #0
    d30a:	d006      	beq.n	d31a <_ZN6SdFile15openCachedEntryEhh+0xda>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    d30c:	0039      	movs	r1, r7
    d30e:	0038      	movs	r0, r7
    d310:	3116      	adds	r1, #22
    d312:	3018      	adds	r0, #24
    d314:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    d316:	8b3b      	ldrh	r3, [r7, #24]
    d318:	827b      	strh	r3, [r7, #18]
    flags_ &= ~F_FILE_DIR_DIRTY;
    d31a:	237f      	movs	r3, #127	; 0x7f
    d31c:	7a22      	ldrb	r2, [r4, #8]
    d31e:	4013      	ands	r3, r2
    d320:	7223      	strb	r3, [r4, #8]
  return SdVolume::cacheFlush();
    d322:	f000 fe99 	bl	e058 <_ZN8SdVolume10cacheFlushEv>

  if (!sync()) return false;
    d326:	2800      	cmp	r0, #0
    d328:	d0c4      	beq.n	d2b4 <_ZN6SdFile15openCachedEntryEhh+0x74>
    d32a:	7a63      	ldrb	r3, [r4, #9]
  if (!isOpen() || pos > fileSize_) return false;
    d32c:	2b00      	cmp	r3, #0
    d32e:	d0c1      	beq.n	d2b4 <_ZN6SdFile15openCachedEntryEhh+0x74>
  if (type_ == FAT_FILE_TYPE_ROOT16) {
    d330:	2b02      	cmp	r3, #2
    d332:	d004      	beq.n	d33e <_ZN6SdFile15openCachedEntryEhh+0xfe>
    curCluster_ = 0;
    d334:	2300      	movs	r3, #0
    return true;
    d336:	2001      	movs	r0, #1
    curCluster_ = 0;
    d338:	60e3      	str	r3, [r4, #12]
    curPosition_ = 0;
    d33a:	6123      	str	r3, [r4, #16]
    d33c:	e7bb      	b.n	d2b6 <_ZN6SdFile15openCachedEntryEhh+0x76>
    curPosition_ = pos;
    d33e:	2300      	movs	r3, #0
    return true;
    d340:	2001      	movs	r0, #1
    curPosition_ = pos;
    d342:	6123      	str	r3, [r4, #16]
    d344:	e7b7      	b.n	d2b6 <_ZN6SdFile15openCachedEntryEhh+0x76>
    if (!isDir()) d->fileSize = fileSize_;
    d346:	69e3      	ldr	r3, [r4, #28]
    d348:	61fb      	str	r3, [r7, #28]
    d34a:	e7d7      	b.n	d2fc <_ZN6SdFile15openCachedEntryEhh+0xbc>
    d34c:	20000804 	.word	0x20000804
    d350:	2000004c 	.word	0x2000004c
    d354:	200007fc 	.word	0x200007fc

0000d358 <_ZN6SdFile8openRootEP8SdVolume>:
uint8_t SdFile::openRoot(SdVolume* vol) {
    d358:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) return false;
    d35a:	7a43      	ldrb	r3, [r0, #9]
uint8_t SdFile::openRoot(SdVolume* vol) {
    d35c:	0004      	movs	r4, r0
    d35e:	000d      	movs	r5, r1
  if (isOpen()) return false;
    d360:	2b00      	cmp	r3, #0
    d362:	d105      	bne.n	d370 <_ZN6SdFile8openRootEP8SdVolume+0x18>
    d364:	2220      	movs	r2, #32
    d366:	5c8a      	ldrb	r2, [r1, r2]
  if (vol->fatType() == 16) {
    d368:	2a10      	cmp	r2, #16
    d36a:	d003      	beq.n	d374 <_ZN6SdFile8openRootEP8SdVolume+0x1c>
  } else if (vol->fatType() == 32) {
    d36c:	2a20      	cmp	r2, #32
    d36e:	d011      	beq.n	d394 <_ZN6SdFile8openRootEP8SdVolume+0x3c>
  if (isOpen()) return false;
    d370:	2000      	movs	r0, #0
}
    d372:	bd70      	pop	{r4, r5, r6, pc}
    type_ = FAT_FILE_TYPE_ROOT16;
    d374:	3a0e      	subs	r2, #14
    d376:	7242      	strb	r2, [r0, #9]
    firstCluster_ = 0;
    d378:	6203      	str	r3, [r0, #32]
  /** \return The logical block number for the start of the first FAT. */
  uint32_t fatStartBlock(void) const {return fatStartBlock_;}
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType(void) const {return fatType_;}
  /** \return The number of entries in the root directory for FAT16 volumes. */
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
    d37a:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
    fileSize_ = 32 * vol->rootDirEntryCount();
    d37c:	015b      	lsls	r3, r3, #5
    d37e:	61c3      	str	r3, [r0, #28]
  flags_ = O_READ;
    d380:	2301      	movs	r3, #1
    d382:	7223      	strb	r3, [r4, #8]
  curCluster_ = 0;
    d384:	2300      	movs	r3, #0
  vol_ = vol;
    d386:	6265      	str	r5, [r4, #36]	; 0x24
  curCluster_ = 0;
    d388:	60e3      	str	r3, [r4, #12]
  curPosition_ = 0;
    d38a:	6123      	str	r3, [r4, #16]
  dirBlock_ = 0;
    d38c:	6163      	str	r3, [r4, #20]
  dirIndex_ = 0;
    d38e:	7623      	strb	r3, [r4, #24]
  return true;
    d390:	2001      	movs	r0, #1
    d392:	e7ee      	b.n	d372 <_ZN6SdFile8openRootEP8SdVolume+0x1a>
    type_ = FAT_FILE_TYPE_ROOT32;
    d394:	2303      	movs	r3, #3
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    d396:	0002      	movs	r2, r0
    type_ = FAT_FILE_TYPE_ROOT32;
    d398:	7243      	strb	r3, [r0, #9]
    d39a:	6a49      	ldr	r1, [r1, #36]	; 0x24
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    d39c:	321c      	adds	r2, #28
    firstCluster_ = vol->rootDirStart();
    d39e:	6201      	str	r1, [r0, #32]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    d3a0:	0028      	movs	r0, r5
    d3a2:	f000 ff15 	bl	e1d0 <_ZNK8SdVolume9chainSizeEmPm>
    d3a6:	2800      	cmp	r0, #0
    d3a8:	d1ea      	bne.n	d380 <_ZN6SdFile8openRootEP8SdVolume+0x28>
    d3aa:	e7e1      	b.n	d370 <_ZN6SdFile8openRootEP8SdVolume+0x18>

0000d3ac <_ZN6SdFile4readEPvt>:
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3ae:	4657      	mov	r7, sl
    d3b0:	46de      	mov	lr, fp
    d3b2:	464e      	mov	r6, r9
    d3b4:	4645      	mov	r5, r8
    d3b6:	b5e0      	push	{r5, r6, r7, lr}
    d3b8:	b087      	sub	sp, #28
    d3ba:	9205      	str	r2, [sp, #20]
    d3bc:	7a42      	ldrb	r2, [r0, #9]
    d3be:	0007      	movs	r7, r0
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    d3c0:	2a00      	cmp	r2, #0
    d3c2:	d002      	beq.n	d3ca <_ZN6SdFile4readEPvt+0x1e>
    d3c4:	7a03      	ldrb	r3, [r0, #8]
    d3c6:	07db      	lsls	r3, r3, #31
    d3c8:	d408      	bmi.n	d3dc <_ZN6SdFile4readEPvt+0x30>
    d3ca:	2001      	movs	r0, #1
    d3cc:	4240      	negs	r0, r0
}
    d3ce:	b007      	add	sp, #28
    d3d0:	bc3c      	pop	{r2, r3, r4, r5}
    d3d2:	4690      	mov	r8, r2
    d3d4:	4699      	mov	r9, r3
    d3d6:	46a2      	mov	sl, r4
    d3d8:	46ab      	mov	fp, r5
    d3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    d3dc:	6903      	ldr	r3, [r0, #16]
    d3de:	9c05      	ldr	r4, [sp, #20]
    d3e0:	69c0      	ldr	r0, [r0, #28]
    d3e2:	1ac0      	subs	r0, r0, r3
    d3e4:	4284      	cmp	r4, r0
    d3e6:	d900      	bls.n	d3ea <_ZN6SdFile4readEPvt+0x3e>
    d3e8:	e0c5      	b.n	d576 <_ZN6SdFile4readEPvt+0x1ca>
  while (toRead > 0) {
    d3ea:	46a1      	mov	r9, r4
    d3ec:	2c00      	cmp	r4, #0
    d3ee:	d100      	bne.n	d3f2 <_ZN6SdFile4readEPvt+0x46>
    d3f0:	e0a3      	b.n	d53a <_ZN6SdFile4readEPvt+0x18e>
    d3f2:	4688      	mov	r8, r1
      block != SdVolume::cacheBlockNumber_) {
    d3f4:	4962      	ldr	r1, [pc, #392]	; (d580 <_ZN6SdFile4readEPvt+0x1d4>)
  while (toRead > 0) {
    d3f6:	0025      	movs	r5, r4
      block != SdVolume::cacheBlockNumber_) {
    d3f8:	468a      	mov	sl, r1
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    d3fa:	4962      	ldr	r1, [pc, #392]	; (d584 <_ZN6SdFile4readEPvt+0x1d8>)
    d3fc:	4646      	mov	r6, r8
    d3fe:	468b      	mov	fp, r1
    d400:	e05d      	b.n	d4be <_ZN6SdFile4readEPvt+0x112>
    if ((unbufferedRead() || n == 512) &&
    d402:	2380      	movs	r3, #128	; 0x80
    d404:	009b      	lsls	r3, r3, #2
    d406:	429c      	cmp	r4, r3
    d408:	d07e      	beq.n	d508 <_ZN6SdFile4readEPvt+0x15c>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    d40a:	2100      	movs	r1, #0
    d40c:	f000 fe52 	bl	e0b4 <_ZN8SdVolume13cacheRawBlockEmh>
    d410:	2800      	cmp	r0, #0
    d412:	d0da      	beq.n	d3ca <_ZN6SdFile4readEPvt+0x1e>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    d414:	4b5c      	ldr	r3, [pc, #368]	; (d588 <_ZN6SdFile4readEPvt+0x1dc>)
    d416:	4443      	add	r3, r8
      uint8_t* end = src + n;
    d418:	191a      	adds	r2, r3, r4
      while (src != end) *dst++ = *src++;
    d41a:	9203      	str	r2, [sp, #12]
    d41c:	4293      	cmp	r3, r2
    d41e:	d045      	beq.n	d4ac <_ZN6SdFile4readEPvt+0x100>
    d420:	2100      	movs	r1, #0
    d422:	1c5a      	adds	r2, r3, #1
    d424:	9204      	str	r2, [sp, #16]
    d426:	4a58      	ldr	r2, [pc, #352]	; (d588 <_ZN6SdFile4readEPvt+0x1dc>)
    d428:	4640      	mov	r0, r8
    d42a:	4694      	mov	ip, r2
    d42c:	000a      	movs	r2, r1
    d42e:	3004      	adds	r0, #4
    d430:	4460      	add	r0, ip
    d432:	4286      	cmp	r6, r0
    d434:	414a      	adcs	r2, r1
    d436:	0010      	movs	r0, r2
    d438:	1d32      	adds	r2, r6, #4
    d43a:	4293      	cmp	r3, r2
    d43c:	4149      	adcs	r1, r1
    d43e:	0032      	movs	r2, r6
    d440:	4308      	orrs	r0, r1
    d442:	2103      	movs	r1, #3
    d444:	431a      	orrs	r2, r3
    d446:	4011      	ands	r1, r2
    d448:	424a      	negs	r2, r1
    d44a:	414a      	adcs	r2, r1
    d44c:	4202      	tst	r2, r0
    d44e:	d100      	bne.n	d452 <_ZN6SdFile4readEPvt+0xa6>
    d450:	e087      	b.n	d562 <_ZN6SdFile4readEPvt+0x1b6>
    d452:	2c09      	cmp	r4, #9
    d454:	d800      	bhi.n	d458 <_ZN6SdFile4readEPvt+0xac>
    d456:	e084      	b.n	d562 <_ZN6SdFile4readEPvt+0x1b6>
    d458:	1f21      	subs	r1, r4, #4
    d45a:	0889      	lsrs	r1, r1, #2
    d45c:	1c4a      	adds	r2, r1, #1
    d45e:	4694      	mov	ip, r2
    d460:	0092      	lsls	r2, r2, #2
    d462:	4691      	mov	r9, r2
    d464:	9a03      	ldr	r2, [sp, #12]
    d466:	2100      	movs	r1, #0
    d468:	2000      	movs	r0, #0
    d46a:	4690      	mov	r8, r2
    d46c:	585a      	ldr	r2, [r3, r1]
    d46e:	3001      	adds	r0, #1
    d470:	5072      	str	r2, [r6, r1]
    d472:	3104      	adds	r1, #4
    d474:	4584      	cmp	ip, r0
    d476:	d8f9      	bhi.n	d46c <_ZN6SdFile4readEPvt+0xc0>
    d478:	4642      	mov	r2, r8
    d47a:	9203      	str	r2, [sp, #12]
    d47c:	464a      	mov	r2, r9
    d47e:	4640      	mov	r0, r8
    d480:	18b1      	adds	r1, r6, r2
    d482:	444b      	add	r3, r9
    d484:	454c      	cmp	r4, r9
    d486:	d00c      	beq.n	d4a2 <_ZN6SdFile4readEPvt+0xf6>
    d488:	781a      	ldrb	r2, [r3, #0]
    d48a:	700a      	strb	r2, [r1, #0]
    d48c:	1c5a      	adds	r2, r3, #1
    d48e:	4290      	cmp	r0, r2
    d490:	d007      	beq.n	d4a2 <_ZN6SdFile4readEPvt+0xf6>
    d492:	785a      	ldrb	r2, [r3, #1]
    d494:	704a      	strb	r2, [r1, #1]
    d496:	1c9a      	adds	r2, r3, #2
    d498:	4694      	mov	ip, r2
    d49a:	4560      	cmp	r0, ip
    d49c:	d001      	beq.n	d4a2 <_ZN6SdFile4readEPvt+0xf6>
    d49e:	789b      	ldrb	r3, [r3, #2]
    d4a0:	708b      	strb	r3, [r1, #2]
    d4a2:	9b04      	ldr	r3, [sp, #16]
    d4a4:	9a03      	ldr	r2, [sp, #12]
    d4a6:	1ad2      	subs	r2, r2, r3
    d4a8:	3201      	adds	r2, #1
    d4aa:	18b6      	adds	r6, r6, r2
    curPosition_ += n;
    d4ac:	693b      	ldr	r3, [r7, #16]
    toRead -= n;
    d4ae:	1b2d      	subs	r5, r5, r4
    curPosition_ += n;
    d4b0:	18e3      	adds	r3, r4, r3
    toRead -= n;
    d4b2:	b2ad      	uxth	r5, r5
    curPosition_ += n;
    d4b4:	613b      	str	r3, [r7, #16]
  while (toRead > 0) {
    d4b6:	46a9      	mov	r9, r5
    d4b8:	2d00      	cmp	r5, #0
    d4ba:	d03e      	beq.n	d53a <_ZN6SdFile4readEPvt+0x18e>
    d4bc:	7a7a      	ldrb	r2, [r7, #9]
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    d4be:	05d9      	lsls	r1, r3, #23
    d4c0:	0dc9      	lsrs	r1, r1, #23
    d4c2:	4688      	mov	r8, r1
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    d4c4:	2a02      	cmp	r2, #2
    d4c6:	d047      	beq.n	d558 <_ZN6SdFile4readEPvt+0x1ac>
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    d4c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
          return (position >> 9) & (blocksPerCluster_ - 1);}
    d4ca:	0a5c      	lsrs	r4, r3, #9
    d4cc:	7902      	ldrb	r2, [r0, #4]
    d4ce:	3a01      	subs	r2, #1
    d4d0:	4014      	ands	r4, r2
    d4d2:	b2e4      	uxtb	r4, r4
      if (offset == 0 && blockOfCluster == 0) {
    d4d4:	2900      	cmp	r1, #0
    d4d6:	d13d      	bne.n	d554 <_ZN6SdFile4readEPvt+0x1a8>
    d4d8:	2c00      	cmp	r4, #0
    d4da:	d13b      	bne.n	d554 <_ZN6SdFile4readEPvt+0x1a8>
        if (curPosition_ == 0) {
    d4dc:	2b00      	cmp	r3, #0
    d4de:	d130      	bne.n	d542 <_ZN6SdFile4readEPvt+0x196>
          curCluster_ = firstCluster_;
    d4e0:	6a3b      	ldr	r3, [r7, #32]
    d4e2:	60fb      	str	r3, [r7, #12]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    d4e4:	7c02      	ldrb	r2, [r0, #16]
    d4e6:	3b02      	subs	r3, #2
    d4e8:	4093      	lsls	r3, r2
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    d4ea:	6940      	ldr	r0, [r0, #20]
    d4ec:	1820      	adds	r0, r4, r0
    d4ee:	1818      	adds	r0, r3, r0
    if (n > (512 - offset)) n = 512 - offset;
    d4f0:	2380      	movs	r3, #128	; 0x80
    d4f2:	4642      	mov	r2, r8
    d4f4:	009b      	lsls	r3, r3, #2
    d4f6:	1a9b      	subs	r3, r3, r2
    d4f8:	002c      	movs	r4, r5
    d4fa:	454b      	cmp	r3, r9
    d4fc:	da00      	bge.n	d500 <_ZN6SdFile4readEPvt+0x154>
    d4fe:	b29c      	uxth	r4, r3
    return flags_ & F_FILE_UNBUFFERED_READ;
    d500:	7a3b      	ldrb	r3, [r7, #8]
    if ((unbufferedRead() || n == 512) &&
    d502:	065b      	lsls	r3, r3, #25
    d504:	d400      	bmi.n	d508 <_ZN6SdFile4readEPvt+0x15c>
    d506:	e77c      	b.n	d402 <_ZN6SdFile4readEPvt+0x56>
    d508:	4653      	mov	r3, sl
    d50a:	681b      	ldr	r3, [r3, #0]
    d50c:	4298      	cmp	r0, r3
    d50e:	d100      	bne.n	d512 <_ZN6SdFile4readEPvt+0x166>
    d510:	e77b      	b.n	d40a <_ZN6SdFile4readEPvt+0x5e>
      return sdCard_->readData(block, offset, count, dst);
    d512:	0001      	movs	r1, r0
    d514:	4658      	mov	r0, fp
    d516:	9600      	str	r6, [sp, #0]
    d518:	0023      	movs	r3, r4
    d51a:	4642      	mov	r2, r8
    d51c:	6800      	ldr	r0, [r0, #0]
    d51e:	f7ff fcfd 	bl	cf1c <_ZN7Sd2Card8readDataEmttPh>
      if (!vol_->readData(block, offset, n, dst)) return -1;
    d522:	2800      	cmp	r0, #0
    d524:	d100      	bne.n	d528 <_ZN6SdFile4readEPvt+0x17c>
    d526:	e750      	b.n	d3ca <_ZN6SdFile4readEPvt+0x1e>
    curPosition_ += n;
    d528:	693b      	ldr	r3, [r7, #16]
    toRead -= n;
    d52a:	1b2d      	subs	r5, r5, r4
    curPosition_ += n;
    d52c:	18e3      	adds	r3, r4, r3
    toRead -= n;
    d52e:	b2ad      	uxth	r5, r5
      dst += n;
    d530:	1936      	adds	r6, r6, r4
    curPosition_ += n;
    d532:	613b      	str	r3, [r7, #16]
  while (toRead > 0) {
    d534:	46a9      	mov	r9, r5
    d536:	2d00      	cmp	r5, #0
    d538:	d1c0      	bne.n	d4bc <_ZN6SdFile4readEPvt+0x110>
  return nbyte;
    d53a:	466b      	mov	r3, sp
    d53c:	2014      	movs	r0, #20
    d53e:	5e18      	ldrsh	r0, [r3, r0]
    d540:	e745      	b.n	d3ce <_ZN6SdFile4readEPvt+0x22>
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    d542:	003a      	movs	r2, r7
    d544:	68f9      	ldr	r1, [r7, #12]
    d546:	320c      	adds	r2, #12
    d548:	f000 fed6 	bl	e2f8 <_ZNK8SdVolume6fatGetEmPm>
    d54c:	2800      	cmp	r0, #0
    d54e:	d100      	bne.n	d552 <_ZN6SdFile4readEPvt+0x1a6>
    d550:	e73b      	b.n	d3ca <_ZN6SdFile4readEPvt+0x1e>
    d552:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d554:	68fb      	ldr	r3, [r7, #12]
    d556:	e7c5      	b.n	d4e4 <_ZN6SdFile4readEPvt+0x138>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    d558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d55a:	0a5b      	lsrs	r3, r3, #9
    d55c:	6a50      	ldr	r0, [r2, #36]	; 0x24
    d55e:	1818      	adds	r0, r3, r0
    d560:	e7c6      	b.n	d4f0 <_ZN6SdFile4readEPvt+0x144>
    d562:	0031      	movs	r1, r6
    d564:	9a03      	ldr	r2, [sp, #12]
      while (src != end) *dst++ = *src++;
    d566:	7818      	ldrb	r0, [r3, #0]
    d568:	3301      	adds	r3, #1
    d56a:	7008      	strb	r0, [r1, #0]
    d56c:	3101      	adds	r1, #1
    d56e:	429a      	cmp	r2, r3
    d570:	d1f9      	bne.n	d566 <_ZN6SdFile4readEPvt+0x1ba>
    d572:	9203      	str	r2, [sp, #12]
    d574:	e795      	b.n	d4a2 <_ZN6SdFile4readEPvt+0xf6>
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    d576:	b280      	uxth	r0, r0
    d578:	9005      	str	r0, [sp, #20]
    d57a:	0004      	movs	r4, r0
    d57c:	e735      	b.n	d3ea <_ZN6SdFile4readEPvt+0x3e>
    d57e:	46c0      	nop			; (mov r8, r8)
    d580:	2000004c 	.word	0x2000004c
    d584:	20000a08 	.word	0x20000a08
    d588:	20000804 	.word	0x20000804

0000d58c <_ZN6SdFile4openEPS_PKch.part.25>:
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d58e:	464e      	mov	r6, r9
    d590:	46de      	mov	lr, fp
    d592:	4657      	mov	r7, sl
    d594:	4645      	mov	r5, r8
    d596:	b5e0      	push	{r5, r6, r7, lr}
    d598:	b08b      	sub	sp, #44	; 0x2c
    d59a:	9300      	str	r3, [sp, #0]
  while (i < 11) name[i++] = ' ';
    d59c:	4b96      	ldr	r3, [pc, #600]	; (d7f8 <_ZN6SdFile4openEPS_PKch.part.25+0x26c>)
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    d59e:	000e      	movs	r6, r1
  while (i < 11) name[i++] = ' ';
    d5a0:	9303      	str	r3, [sp, #12]
    d5a2:	9304      	str	r3, [sp, #16]
    d5a4:	2320      	movs	r3, #32
    d5a6:	a902      	add	r1, sp, #8
    d5a8:	730b      	strb	r3, [r1, #12]
    d5aa:	734b      	strb	r3, [r1, #13]
    d5ac:	738b      	strb	r3, [r1, #14]
    d5ae:	3b19      	subs	r3, #25
    d5b0:	469c      	mov	ip, r3
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    d5b2:	ab06      	add	r3, sp, #24
    d5b4:	46e3      	mov	fp, ip
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    d5b6:	4681      	mov	r9, r0
  while (i < 11) name[i++] = ' ';
    d5b8:	2500      	movs	r5, #0
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    d5ba:	469a      	mov	sl, r3
    d5bc:	46b4      	mov	ip, r6
  while ((c = *str++) != '\0') {
    d5be:	7817      	ldrb	r7, [r2, #0]
    d5c0:	2f00      	cmp	r7, #0
    d5c2:	d046      	beq.n	d652 <_ZN6SdFile4openEPS_PKch.part.25+0xc6>
    if (c == '.') {
    d5c4:	2f2e      	cmp	r7, #46	; 0x2e
    d5c6:	d03c      	beq.n	d642 <_ZN6SdFile4openEPS_PKch.part.25+0xb6>
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    d5c8:	4653      	mov	r3, sl
    d5ca:	498c      	ldr	r1, [pc, #560]	; (d7fc <_ZN6SdFile4openEPS_PKch.part.25+0x270>)
    d5cc:	c951      	ldmia	r1!, {r0, r4, r6}
    d5ce:	c351      	stmia	r3!, {r0, r4, r6}
    d5d0:	6809      	ldr	r1, [r1, #0]
    d5d2:	6019      	str	r1, [r3, #0]
    d5d4:	4653      	mov	r3, sl
    d5d6:	e002      	b.n	d5de <_ZN6SdFile4openEPS_PKch.part.25+0x52>
    d5d8:	3301      	adds	r3, #1
      while ((b = *p++)) if (b == c) return false;
    d5da:	428f      	cmp	r7, r1
    d5dc:	d028      	beq.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
    d5de:	7819      	ldrb	r1, [r3, #0]
    d5e0:	2900      	cmp	r1, #0
    d5e2:	d1f9      	bne.n	d5d8 <_ZN6SdFile4openEPS_PKch.part.25+0x4c>
      if (i > n || c < 0X21 || c > 0X7E)return false;
    d5e4:	455d      	cmp	r5, fp
    d5e6:	dc23      	bgt.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
    d5e8:	003b      	movs	r3, r7
    d5ea:	3b21      	subs	r3, #33	; 0x21
    d5ec:	b2db      	uxtb	r3, r3
    d5ee:	2b5d      	cmp	r3, #93	; 0x5d
    d5f0:	d81e      	bhi.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    d5f2:	a903      	add	r1, sp, #12
    d5f4:	4688      	mov	r8, r1
    d5f6:	0039      	movs	r1, r7
    d5f8:	3961      	subs	r1, #97	; 0x61
    d5fa:	1c6b      	adds	r3, r5, #1
    d5fc:	b2c9      	uxtb	r1, r1
    d5fe:	b2db      	uxtb	r3, r3
    d600:	4445      	add	r5, r8
    d602:	2919      	cmp	r1, #25
    d604:	d801      	bhi.n	d60a <_ZN6SdFile4openEPS_PKch.part.25+0x7e>
    d606:	3f20      	subs	r7, #32
    d608:	b2ff      	uxtb	r7, r7
    d60a:	702f      	strb	r7, [r5, #0]
  while ((c = *str++) != '\0') {
    d60c:	3201      	adds	r2, #1
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    d60e:	001d      	movs	r5, r3
    d610:	e7d5      	b.n	d5be <_ZN6SdFile4openEPS_PKch.part.25+0x32>
      if (!emptyFound) {
    d612:	4643      	mov	r3, r8
    d614:	2b00      	cmp	r3, #0
    d616:	d105      	bne.n	d624 <_ZN6SdFile4openEPS_PKch.part.25+0x98>
        dirIndex_ = index;
    d618:	464b      	mov	r3, r9
        dirBlock_ = SdVolume::cacheBlockNumber_;
    d61a:	464a      	mov	r2, r9
        dirIndex_ = index;
    d61c:	761d      	strb	r5, [r3, #24]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    d61e:	4b78      	ldr	r3, [pc, #480]	; (d800 <_ZN6SdFile4openEPS_PKch.part.25+0x274>)
    d620:	681b      	ldr	r3, [r3, #0]
    d622:	6153      	str	r3, [r2, #20]
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    d624:	2312      	movs	r3, #18
    d626:	9a00      	ldr	r2, [sp, #0]
    d628:	4013      	ands	r3, r2
    d62a:	2b12      	cmp	r3, #18
    d62c:	d100      	bne.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
    d62e:	e08d      	b.n	d74c <_ZN6SdFile4openEPS_PKch.part.25+0x1c0>
  if (!make83Name(fileName, dname)) return false;
    d630:	2700      	movs	r7, #0
}
    d632:	0038      	movs	r0, r7
    d634:	b00b      	add	sp, #44	; 0x2c
    d636:	bc3c      	pop	{r2, r3, r4, r5}
    d638:	4690      	mov	r8, r2
    d63a:	4699      	mov	r9, r3
    d63c:	46a2      	mov	sl, r4
    d63e:	46ab      	mov	fp, r5
    d640:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (n == 10) return false;  // only one dot allowed
    d642:	465b      	mov	r3, fp
    d644:	2b0a      	cmp	r3, #10
    d646:	d0f3      	beq.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
      n = 10;  // max index for full 8.3 name
    d648:	230a      	movs	r3, #10
      i = 8;   // place for extension
    d64a:	2508      	movs	r5, #8
      n = 10;  // max index for full 8.3 name
    d64c:	469b      	mov	fp, r3
  while ((c = *str++) != '\0') {
    d64e:	3201      	adds	r2, #1
    d650:	e7b5      	b.n	d5be <_ZN6SdFile4openEPS_PKch.part.25+0x32>
  if (!make83Name(fileName, dname)) return false;
    d652:	ab02      	add	r3, sp, #8
    d654:	791b      	ldrb	r3, [r3, #4]
    d656:	4666      	mov	r6, ip
    d658:	2b20      	cmp	r3, #32
    d65a:	d0e9      	beq.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
  vol_ = dirFile->vol_;
    d65c:	464b      	mov	r3, r9
    d65e:	6a72      	ldr	r2, [r6, #36]	; 0x24
    curPosition_ = curCluster_ = 0;
    d660:	2400      	movs	r4, #0
    d662:	625a      	str	r2, [r3, #36]	; 0x24
  uint8_t emptyFound = false;
    d664:	2300      	movs	r3, #0
    d666:	4698      	mov	r8, r3
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    d668:	330f      	adds	r3, #15
    d66a:	469a      	mov	sl, r3
  return (SdVolume::cacheBuffer_.dir + i);
    d66c:	4b65      	ldr	r3, [pc, #404]	; (d804 <_ZN6SdFile4openEPS_PKch.part.25+0x278>)
    d66e:	60f7      	str	r7, [r6, #12]
    d670:	469b      	mov	fp, r3
    d672:	6137      	str	r7, [r6, #16]
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    d674:	69f3      	ldr	r3, [r6, #28]
    d676:	42a3      	cmp	r3, r4
    d678:	d932      	bls.n	d6e0 <_ZN6SdFile4openEPS_PKch.part.25+0x154>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    d67a:	4655      	mov	r5, sl
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    d67c:	7a73      	ldrb	r3, [r6, #9]
    d67e:	0964      	lsrs	r4, r4, #5
    d680:	4025      	ands	r5, r4
  if (!isDir()) return NULL;
    d682:	2b01      	cmp	r3, #1
    d684:	ddd4      	ble.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
    return read(&b, 1) == 1 ? b : -1;
    d686:	2201      	movs	r2, #1
    d688:	a906      	add	r1, sp, #24
    d68a:	0030      	movs	r0, r6
    d68c:	f7ff fe8e 	bl	d3ac <_ZN6SdFile4readEPvt>
    d690:	2801      	cmp	r0, #1
    d692:	d1ce      	bne.n	d632 <_ZN6SdFile4openEPS_PKch.part.25+0xa6>
  curPosition_ += 31;
    d694:	6934      	ldr	r4, [r6, #16]
  return (SdVolume::cacheBuffer_.dir + i);
    d696:	0169      	lsls	r1, r5, #5
  curPosition_ += 31;
    d698:	341f      	adds	r4, #31
  return (SdVolume::cacheBuffer_.dir + i);
    d69a:	4459      	add	r1, fp
  curPosition_ += 31;
    d69c:	6134      	str	r4, [r6, #16]
    if (p == NULL) return false;
    d69e:	2900      	cmp	r1, #0
    d6a0:	d0c6      	beq.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    d6a2:	780b      	ldrb	r3, [r1, #0]
    d6a4:	2b00      	cmp	r3, #0
    d6a6:	d0b4      	beq.n	d612 <_ZN6SdFile4openEPS_PKch.part.25+0x86>
    d6a8:	2be5      	cmp	r3, #229	; 0xe5
    d6aa:	d010      	beq.n	d6ce <_ZN6SdFile4openEPS_PKch.part.25+0x142>
    } else if (!memcmp(dname, p->name, 11)) {
    d6ac:	220b      	movs	r2, #11
    d6ae:	a803      	add	r0, sp, #12
    d6b0:	f003 f94c 	bl	1094c <memcmp>
    d6b4:	2800      	cmp	r0, #0
    d6b6:	d1dd      	bne.n	d674 <_ZN6SdFile4openEPS_PKch.part.25+0xe8>
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    d6b8:	2330      	movs	r3, #48	; 0x30
    d6ba:	9a00      	ldr	r2, [sp, #0]
    d6bc:	4013      	ands	r3, r2
    d6be:	2b30      	cmp	r3, #48	; 0x30
    d6c0:	d0b6      	beq.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
      return openCachedEntry(0XF & index, oflag);
    d6c2:	0029      	movs	r1, r5
    d6c4:	4648      	mov	r0, r9
    d6c6:	f7ff fdbb 	bl	d240 <_ZN6SdFile15openCachedEntryEhh>
    d6ca:	0007      	movs	r7, r0
    d6cc:	e7b1      	b.n	d632 <_ZN6SdFile4openEPS_PKch.part.25+0xa6>
      if (!emptyFound) {
    d6ce:	4643      	mov	r3, r8
    d6d0:	2b00      	cmp	r3, #0
    d6d2:	d100      	bne.n	d6d6 <_ZN6SdFile4openEPS_PKch.part.25+0x14a>
    d6d4:	e086      	b.n	d7e4 <_ZN6SdFile4openEPS_PKch.part.25+0x258>
  while (i < 11) name[i++] = ' ';
    d6d6:	2301      	movs	r3, #1
    d6d8:	4698      	mov	r8, r3
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    d6da:	69f3      	ldr	r3, [r6, #28]
    d6dc:	42a3      	cmp	r3, r4
    d6de:	d8cc      	bhi.n	d67a <_ZN6SdFile4openEPS_PKch.part.25+0xee>
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    d6e0:	2312      	movs	r3, #18
    d6e2:	9a00      	ldr	r2, [sp, #0]
    d6e4:	4013      	ands	r3, r2
    d6e6:	2b12      	cmp	r3, #18
    d6e8:	d1a2      	bne.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
  if (emptyFound) {
    d6ea:	4643      	mov	r3, r8
    d6ec:	2b00      	cmp	r3, #0
    d6ee:	d12d      	bne.n	d74c <_ZN6SdFile4openEPS_PKch.part.25+0x1c0>
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    d6f0:	7a73      	ldrb	r3, [r6, #9]
    d6f2:	2b02      	cmp	r3, #2
    d6f4:	d09c      	beq.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    d6f6:	0032      	movs	r2, r6
    d6f8:	2101      	movs	r1, #1
    d6fa:	320c      	adds	r2, #12
    d6fc:	6a70      	ldr	r0, [r6, #36]	; 0x24
    d6fe:	f000 fb4d 	bl	dd9c <_ZN8SdVolume15allocContiguousEmPm>
    d702:	2800      	cmp	r0, #0
    d704:	d094      	beq.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
  if (firstCluster_ == 0) {
    d706:	6a33      	ldr	r3, [r6, #32]
    firstCluster_ = curCluster_;
    d708:	68f5      	ldr	r5, [r6, #12]
  if (firstCluster_ == 0) {
    d70a:	2b00      	cmp	r3, #0
    d70c:	d105      	bne.n	d71a <_ZN6SdFile4openEPS_PKch.part.25+0x18e>
    flags_ |= F_FILE_DIR_DIRTY;
    d70e:	2280      	movs	r2, #128	; 0x80
    d710:	7a31      	ldrb	r1, [r6, #8]
    d712:	4252      	negs	r2, r2
    d714:	430a      	orrs	r2, r1
    firstCluster_ = curCluster_;
    d716:	6235      	str	r5, [r6, #32]
    flags_ |= F_FILE_DIR_DIRTY;
    d718:	7232      	strb	r2, [r6, #8]
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    d71a:	6a71      	ldr	r1, [r6, #36]	; 0x24
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    d71c:	3d02      	subs	r5, #2
    d71e:	7c08      	ldrb	r0, [r1, #16]
    d720:	694b      	ldr	r3, [r1, #20]
    d722:	4085      	lsls	r5, r0
    d724:	18ea      	adds	r2, r5, r3
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    d726:	790b      	ldrb	r3, [r1, #4]
    d728:	2b00      	cmp	r3, #0
    d72a:	d049      	beq.n	d7c0 <_ZN6SdFile4openEPS_PKch.part.25+0x234>
    d72c:	1e5d      	subs	r5, r3, #1
    d72e:	18ac      	adds	r4, r5, r2
    d730:	3b02      	subs	r3, #2
    d732:	b2ed      	uxtb	r5, r5
    d734:	1b5d      	subs	r5, r3, r5
    d736:	18ad      	adds	r5, r5, r2
    d738:	e002      	b.n	d740 <_ZN6SdFile4openEPS_PKch.part.25+0x1b4>
    d73a:	3c01      	subs	r4, #1
    d73c:	42ac      	cmp	r4, r5
    d73e:	d03d      	beq.n	d7bc <_ZN6SdFile4openEPS_PKch.part.25+0x230>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    d740:	0020      	movs	r0, r4
    d742:	f000 fd05 	bl	e150 <_ZN8SdVolume14cacheZeroBlockEm>
    d746:	2800      	cmp	r0, #0
    d748:	d1f7      	bne.n	d73a <_ZN6SdFile4openEPS_PKch.part.25+0x1ae>
    d74a:	e771      	b.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    d74c:	464b      	mov	r3, r9
    d74e:	2101      	movs	r1, #1
    d750:	6958      	ldr	r0, [r3, #20]
    d752:	f000 fcaf 	bl	e0b4 <_ZN8SdVolume13cacheRawBlockEmh>
    d756:	2800      	cmp	r0, #0
    d758:	d100      	bne.n	d75c <_ZN6SdFile4openEPS_PKch.part.25+0x1d0>
    d75a:	e769      	b.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    d75c:	464b      	mov	r3, r9
    d75e:	7e1c      	ldrb	r4, [r3, #24]
    d760:	4b28      	ldr	r3, [pc, #160]	; (d804 <_ZN6SdFile4openEPS_PKch.part.25+0x278>)
    d762:	0164      	lsls	r4, r4, #5
    d764:	18e4      	adds	r4, r4, r3
    if (!p) return false;
    d766:	2c00      	cmp	r4, #0
    d768:	d100      	bne.n	d76c <_ZN6SdFile4openEPS_PKch.part.25+0x1e0>
    d76a:	e761      	b.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
  memset(p, 0, sizeof(dir_t));
    d76c:	2100      	movs	r1, #0
    d76e:	2220      	movs	r2, #32
    d770:	0020      	movs	r0, r4
    d772:	f003 f903 	bl	1097c <memset>
  memcpy(p->name, dname, 11);
    d776:	0023      	movs	r3, r4
    d778:	aa03      	add	r2, sp, #12
    d77a:	ca03      	ldmia	r2!, {r0, r1}
    d77c:	c303      	stmia	r3!, {r0, r1}
    d77e:	8811      	ldrh	r1, [r2, #0]
    d780:	8019      	strh	r1, [r3, #0]
    d782:	7892      	ldrb	r2, [r2, #2]
    d784:	709a      	strb	r2, [r3, #2]
  if (dateTime_) {
    d786:	4b20      	ldr	r3, [pc, #128]	; (d808 <_ZN6SdFile4openEPS_PKch.part.25+0x27c>)
    d788:	681b      	ldr	r3, [r3, #0]
    d78a:	2b00      	cmp	r3, #0
    d78c:	d024      	beq.n	d7d8 <_ZN6SdFile4openEPS_PKch.part.25+0x24c>
    dateTime_(&p->creationDate, &p->creationTime);
    d78e:	0021      	movs	r1, r4
    d790:	0020      	movs	r0, r4
    d792:	310e      	adds	r1, #14
    d794:	3010      	adds	r0, #16
    d796:	4798      	blx	r3
    d798:	8a23      	ldrh	r3, [r4, #16]
    d79a:	89e2      	ldrh	r2, [r4, #14]
  p->lastAccessDate = p->creationDate;
    d79c:	8263      	strh	r3, [r4, #18]
  p->lastWriteDate = p->creationDate;
    d79e:	8323      	strh	r3, [r4, #24]
  p->lastWriteTime = p->creationTime;
    d7a0:	82e2      	strh	r2, [r4, #22]
  if (!SdVolume::cacheFlush()) return false;
    d7a2:	f000 fc59 	bl	e058 <_ZN8SdVolume10cacheFlushEv>
    d7a6:	2800      	cmp	r0, #0
    d7a8:	d100      	bne.n	d7ac <_ZN6SdFile4openEPS_PKch.part.25+0x220>
    d7aa:	e741      	b.n	d630 <_ZN6SdFile4openEPS_PKch.part.25+0xa4>
  return openCachedEntry(dirIndex_, oflag);
    d7ac:	464b      	mov	r3, r9
    d7ae:	9a00      	ldr	r2, [sp, #0]
    d7b0:	7e19      	ldrb	r1, [r3, #24]
    d7b2:	4648      	mov	r0, r9
    d7b4:	f7ff fd44 	bl	d240 <_ZN6SdFile15openCachedEntryEhh>
    d7b8:	0007      	movs	r7, r0
    d7ba:	e73a      	b.n	d632 <_ZN6SdFile4openEPS_PKch.part.25+0xa6>
    d7bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
    d7be:	7c18      	ldrb	r0, [r3, #16]
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    d7c0:	2380      	movs	r3, #128	; 0x80
    d7c2:	69f2      	ldr	r2, [r6, #28]
    d7c4:	009b      	lsls	r3, r3, #2
    d7c6:	4694      	mov	ip, r2
    d7c8:	4083      	lsls	r3, r0
    d7ca:	4463      	add	r3, ip
    d7cc:	61f3      	str	r3, [r6, #28]
    dirIndex_ = 0;
    d7ce:	464a      	mov	r2, r9
    d7d0:	2300      	movs	r3, #0
    p = SdVolume::cacheBuffer_.dir;
    d7d2:	4c0c      	ldr	r4, [pc, #48]	; (d804 <_ZN6SdFile4openEPS_PKch.part.25+0x278>)
    dirIndex_ = 0;
    d7d4:	7613      	strb	r3, [r2, #24]
    d7d6:	e7c9      	b.n	d76c <_ZN6SdFile4openEPS_PKch.part.25+0x1e0>
    p->creationTime = FAT_DEFAULT_TIME;
    d7d8:	2280      	movs	r2, #128	; 0x80
    p->creationDate = FAT_DEFAULT_DATE;
    d7da:	4b0c      	ldr	r3, [pc, #48]	; (d80c <_ZN6SdFile4openEPS_PKch.part.25+0x280>)
    p->creationTime = FAT_DEFAULT_TIME;
    d7dc:	0112      	lsls	r2, r2, #4
    p->creationDate = FAT_DEFAULT_DATE;
    d7de:	8223      	strh	r3, [r4, #16]
    p->creationTime = FAT_DEFAULT_TIME;
    d7e0:	81e2      	strh	r2, [r4, #14]
    d7e2:	e7db      	b.n	d79c <_ZN6SdFile4openEPS_PKch.part.25+0x210>
        dirIndex_ = index;
    d7e4:	464b      	mov	r3, r9
    d7e6:	761d      	strb	r5, [r3, #24]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    d7e8:	4b05      	ldr	r3, [pc, #20]	; (d800 <_ZN6SdFile4openEPS_PKch.part.25+0x274>)
    d7ea:	681b      	ldr	r3, [r3, #0]
    d7ec:	9301      	str	r3, [sp, #4]
    d7ee:	464b      	mov	r3, r9
    d7f0:	9a01      	ldr	r2, [sp, #4]
    d7f2:	615a      	str	r2, [r3, #20]
    d7f4:	e76f      	b.n	d6d6 <_ZN6SdFile4openEPS_PKch.part.25+0x14a>
    d7f6:	46c0      	nop			; (mov r8, r8)
    d7f8:	20202020 	.word	0x20202020
    d7fc:	00010db4 	.word	0x00010db4
    d800:	2000004c 	.word	0x2000004c
    d804:	20000804 	.word	0x20000804
    d808:	200007fc 	.word	0x200007fc
    d80c:	00002821 	.word	0x00002821

0000d810 <_ZN6SdFile4openEPS_PKch>:
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    d810:	b570      	push	{r4, r5, r6, lr}
  if (isOpen())return false;
    d812:	7a45      	ldrb	r5, [r0, #9]
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    d814:	0004      	movs	r4, r0
  if (isOpen())return false;
    d816:	2000      	movs	r0, #0
    d818:	2d00      	cmp	r5, #0
    d81a:	d102      	bne.n	d822 <_ZN6SdFile4openEPS_PKch+0x12>
    d81c:	0020      	movs	r0, r4
    d81e:	f7ff feb5 	bl	d58c <_ZN6SdFile4openEPS_PKch.part.25>
}
    d822:	bd70      	pop	{r4, r5, r6, pc}

0000d824 <_ZN6SdFile7seekSetEm>:
uint8_t SdFile::seekSet(uint32_t pos) {
    d824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d826:	7a43      	ldrb	r3, [r0, #9]
    d828:	0005      	movs	r5, r0
    d82a:	000f      	movs	r7, r1
  if (!isOpen() || pos > fileSize_) return false;
    d82c:	2b00      	cmp	r3, #0
    d82e:	d002      	beq.n	d836 <_ZN6SdFile7seekSetEm+0x12>
    d830:	69c2      	ldr	r2, [r0, #28]
    d832:	428a      	cmp	r2, r1
    d834:	d201      	bcs.n	d83a <_ZN6SdFile7seekSetEm+0x16>
    d836:	2000      	movs	r0, #0
}
    d838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ == FAT_FILE_TYPE_ROOT16) {
    d83a:	2b02      	cmp	r3, #2
    d83c:	d01a      	beq.n	d874 <_ZN6SdFile7seekSetEm+0x50>
  if (pos == 0) {
    d83e:	2f00      	cmp	r7, #0
    d840:	d01f      	beq.n	d882 <_ZN6SdFile7seekSetEm+0x5e>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    d842:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d844:	6929      	ldr	r1, [r5, #16]
    d846:	7c1b      	ldrb	r3, [r3, #16]
    d848:	1e4a      	subs	r2, r1, #1
    d84a:	3309      	adds	r3, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    d84c:	1e7c      	subs	r4, r7, #1
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    d84e:	40da      	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    d850:	40dc      	lsrs	r4, r3
  if (nNew < nCur || curPosition_ == 0) {
    d852:	42a2      	cmp	r2, r4
    d854:	d911      	bls.n	d87a <_ZN6SdFile7seekSetEm+0x56>
    curCluster_ = firstCluster_;
    d856:	6a2b      	ldr	r3, [r5, #32]
    d858:	60eb      	str	r3, [r5, #12]
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    d85a:	002e      	movs	r6, r5
    d85c:	360c      	adds	r6, #12
    d85e:	e007      	b.n	d870 <_ZN6SdFile7seekSetEm+0x4c>
    d860:	0032      	movs	r2, r6
    d862:	68e9      	ldr	r1, [r5, #12]
    d864:	6a68      	ldr	r0, [r5, #36]	; 0x24
    d866:	f000 fd47 	bl	e2f8 <_ZNK8SdVolume6fatGetEmPm>
    d86a:	3c01      	subs	r4, #1
    d86c:	2800      	cmp	r0, #0
    d86e:	d0e2      	beq.n	d836 <_ZN6SdFile7seekSetEm+0x12>
  while (nNew--) {
    d870:	2c00      	cmp	r4, #0
    d872:	d1f5      	bne.n	d860 <_ZN6SdFile7seekSetEm+0x3c>
    curPosition_ = 0;
    d874:	612f      	str	r7, [r5, #16]
    return true;
    d876:	2001      	movs	r0, #1
    d878:	e7de      	b.n	d838 <_ZN6SdFile7seekSetEm+0x14>
  if (nNew < nCur || curPosition_ == 0) {
    d87a:	2900      	cmp	r1, #0
    d87c:	d0eb      	beq.n	d856 <_ZN6SdFile7seekSetEm+0x32>
    nNew -= nCur;
    d87e:	1aa4      	subs	r4, r4, r2
    d880:	e7eb      	b.n	d85a <_ZN6SdFile7seekSetEm+0x36>
    curCluster_ = 0;
    d882:	60ef      	str	r7, [r5, #12]
    curPosition_ = 0;
    d884:	612f      	str	r7, [r5, #16]
    return true;
    d886:	2001      	movs	r0, #1
    d888:	e7d6      	b.n	d838 <_ZN6SdFile7seekSetEm+0x14>
    d88a:	46c0      	nop			; (mov r8, r8)

0000d88c <_ZN6SdFile4syncEv>:
uint8_t SdFile::sync(void) {
    d88c:	b570      	push	{r4, r5, r6, lr}
  if (!isOpen()) return false;
    d88e:	7a43      	ldrb	r3, [r0, #9]
uint8_t SdFile::sync(void) {
    d890:	0004      	movs	r4, r0
  if (!isOpen()) return false;
    d892:	2b00      	cmp	r3, #0
    d894:	d005      	beq.n	d8a2 <_ZN6SdFile4syncEv+0x16>
  if (flags_ & F_FILE_DIR_DIRTY) {
    d896:	7a03      	ldrb	r3, [r0, #8]
    d898:	2b7f      	cmp	r3, #127	; 0x7f
    d89a:	d804      	bhi.n	d8a6 <_ZN6SdFile4syncEv+0x1a>
  return SdVolume::cacheFlush();
    d89c:	f000 fbdc 	bl	e058 <_ZN8SdVolume10cacheFlushEv>
}
    d8a0:	bd70      	pop	{r4, r5, r6, pc}
  if (!isOpen()) return false;
    d8a2:	2000      	movs	r0, #0
    d8a4:	e7fc      	b.n	d8a0 <_ZN6SdFile4syncEv+0x14>
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    d8a6:	2101      	movs	r1, #1
    d8a8:	6940      	ldr	r0, [r0, #20]
    d8aa:	f000 fc03 	bl	e0b4 <_ZN8SdVolume13cacheRawBlockEmh>
    d8ae:	2800      	cmp	r0, #0
    d8b0:	d0f7      	beq.n	d8a2 <_ZN6SdFile4syncEv+0x16>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    d8b2:	7e25      	ldrb	r5, [r4, #24]
    d8b4:	4b0f      	ldr	r3, [pc, #60]	; (d8f4 <_ZN6SdFile4syncEv+0x68>)
    d8b6:	016d      	lsls	r5, r5, #5
    d8b8:	18ed      	adds	r5, r5, r3
    if (!d) return false;
    d8ba:	2d00      	cmp	r5, #0
    d8bc:	d0f1      	beq.n	d8a2 <_ZN6SdFile4syncEv+0x16>
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    d8be:	7a63      	ldrb	r3, [r4, #9]
    if (!isDir()) d->fileSize = fileSize_;
    d8c0:	2b01      	cmp	r3, #1
    d8c2:	dd13      	ble.n	d8ec <_ZN6SdFile4syncEv+0x60>
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d8c4:	6a23      	ldr	r3, [r4, #32]
    d8c6:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    d8c8:	0c1b      	lsrs	r3, r3, #16
    d8ca:	82ab      	strh	r3, [r5, #20]
    if (dateTime_) {
    d8cc:	4b0a      	ldr	r3, [pc, #40]	; (d8f8 <_ZN6SdFile4syncEv+0x6c>)
    d8ce:	681b      	ldr	r3, [r3, #0]
    d8d0:	2b00      	cmp	r3, #0
    d8d2:	d006      	beq.n	d8e2 <_ZN6SdFile4syncEv+0x56>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    d8d4:	0029      	movs	r1, r5
    d8d6:	0028      	movs	r0, r5
    d8d8:	3116      	adds	r1, #22
    d8da:	3018      	adds	r0, #24
    d8dc:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    d8de:	8b2b      	ldrh	r3, [r5, #24]
    d8e0:	826b      	strh	r3, [r5, #18]
    flags_ &= ~F_FILE_DIR_DIRTY;
    d8e2:	237f      	movs	r3, #127	; 0x7f
    d8e4:	7a22      	ldrb	r2, [r4, #8]
    d8e6:	4013      	ands	r3, r2
    d8e8:	7223      	strb	r3, [r4, #8]
    d8ea:	e7d7      	b.n	d89c <_ZN6SdFile4syncEv+0x10>
    if (!isDir()) d->fileSize = fileSize_;
    d8ec:	69e3      	ldr	r3, [r4, #28]
    d8ee:	61eb      	str	r3, [r5, #28]
    d8f0:	e7e8      	b.n	d8c4 <_ZN6SdFile4syncEv+0x38>
    d8f2:	46c0      	nop			; (mov r8, r8)
    d8f4:	20000804 	.word	0x20000804
    d8f8:	200007fc 	.word	0x200007fc

0000d8fc <_ZN6SdFile5writeEPKvt>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    d8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8fe:	4645      	mov	r5, r8
    d900:	46de      	mov	lr, fp
    d902:	4657      	mov	r7, sl
    d904:	464e      	mov	r6, r9
    d906:	b5e0      	push	{r5, r6, r7, lr}

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    d908:	7a43      	ldrb	r3, [r0, #9]
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    d90a:	b085      	sub	sp, #20
    d90c:	4680      	mov	r8, r0
    d90e:	000c      	movs	r4, r1
    d910:	9201      	str	r2, [sp, #4]
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    d912:	2b01      	cmp	r3, #1
    d914:	d00a      	beq.n	d92c <_ZN6SdFile5writeEPKvt+0x30>
    void setWriteError(int err = 1) { write_error = err; }
    d916:	2301      	movs	r3, #1
    d918:	4642      	mov	r2, r8

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    d91a:	2000      	movs	r0, #0
    d91c:	6053      	str	r3, [r2, #4]
}
    d91e:	b005      	add	sp, #20
    d920:	bc3c      	pop	{r2, r3, r4, r5}
    d922:	4690      	mov	r8, r2
    d924:	4699      	mov	r9, r3
    d926:	46a2      	mov	sl, r4
    d928:	46ab      	mov	fp, r5
    d92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    d92c:	7a03      	ldrb	r3, [r0, #8]
    d92e:	079a      	lsls	r2, r3, #30
    d930:	d5f1      	bpl.n	d916 <_ZN6SdFile5writeEPKvt+0x1a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    d932:	075a      	lsls	r2, r3, #29
    d934:	d500      	bpl.n	d938 <_ZN6SdFile5writeEPKvt+0x3c>
    d936:	e0f4      	b.n	db22 <_ZN6SdFile5writeEPKvt+0x226>
    d938:	6907      	ldr	r7, [r0, #16]
  while (nToWrite > 0) {
    d93a:	9a01      	ldr	r2, [sp, #4]
    d93c:	4692      	mov	sl, r2
    d93e:	2a00      	cmp	r2, #0
    d940:	d100      	bne.n	d944 <_ZN6SdFile5writeEPKvt+0x48>
    d942:	e11b      	b.n	db7c <_ZN6SdFile5writeEPKvt+0x280>
    d944:	4643      	mov	r3, r8
    d946:	0016      	movs	r6, r2
    d948:	68d9      	ldr	r1, [r3, #12]
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    d94a:	4bc3      	ldr	r3, [pc, #780]	; (dc58 <_ZN6SdFile5writeEPKvt+0x35c>)
  while (nToWrite > 0) {
    d94c:	46a1      	mov	r9, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    d94e:	469b      	mov	fp, r3
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    d950:	4643      	mov	r3, r8
    d952:	003c      	movs	r4, r7
    d954:	46b0      	mov	r8, r6
    d956:	464f      	mov	r7, r9
    d958:	001e      	movs	r6, r3
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    d95a:	6a70      	ldr	r0, [r6, #36]	; 0x24
          return (position >> 9) & (blocksPerCluster_ - 1);}
    d95c:	0a63      	lsrs	r3, r4, #9
    d95e:	7902      	ldrb	r2, [r0, #4]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    d960:	05e4      	lsls	r4, r4, #23
    d962:	3a01      	subs	r2, #1
    d964:	4013      	ands	r3, r2
    d966:	b2db      	uxtb	r3, r3
    d968:	4699      	mov	r9, r3
    d96a:	0de4      	lsrs	r4, r4, #23
    if (blockOfCluster == 0 && blockOffset == 0) {
    d96c:	2b00      	cmp	r3, #0
    d96e:	d108      	bne.n	d982 <_ZN6SdFile5writeEPKvt+0x86>
    d970:	2c00      	cmp	r4, #0
    d972:	d106      	bne.n	d982 <_ZN6SdFile5writeEPKvt+0x86>
      if (curCluster_ == 0) {
    d974:	2900      	cmp	r1, #0
    d976:	d000      	beq.n	d97a <_ZN6SdFile5writeEPKvt+0x7e>
    d978:	e0ba      	b.n	daf0 <_ZN6SdFile5writeEPKvt+0x1f4>
        if (firstCluster_ == 0) {
    d97a:	6a31      	ldr	r1, [r6, #32]
    d97c:	2900      	cmp	r1, #0
    d97e:	d070      	beq.n	da62 <_ZN6SdFile5writeEPKvt+0x166>
          curCluster_ = next;
    d980:	60f1      	str	r1, [r6, #12]
    uint16_t n = 512 - blockOffset;
    d982:	2580      	movs	r5, #128	; 0x80
    d984:	00ad      	lsls	r5, r5, #2
    d986:	1b2d      	subs	r5, r5, r4
    d988:	b2ad      	uxth	r5, r5
    if (n > nToWrite) n = nToWrite;
    d98a:	4555      	cmp	r5, sl
    d98c:	dd00      	ble.n	d990 <_ZN6SdFile5writeEPKvt+0x94>
    d98e:	4645      	mov	r5, r8
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    d990:	7c03      	ldrb	r3, [r0, #16]
    d992:	3902      	subs	r1, #2
    d994:	4099      	lsls	r1, r3
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    d996:	6943      	ldr	r3, [r0, #20]
    d998:	444b      	add	r3, r9
    d99a:	4689      	mov	r9, r1
    d99c:	4499      	add	r9, r3
    if (n == 512) {
    d99e:	2380      	movs	r3, #128	; 0x80
    d9a0:	009b      	lsls	r3, r3, #2
    d9a2:	429d      	cmp	r5, r3
    d9a4:	d071      	beq.n	da8a <_ZN6SdFile5writeEPKvt+0x18e>
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    d9a6:	2c00      	cmp	r4, #0
    d9a8:	d103      	bne.n	d9b2 <_ZN6SdFile5writeEPKvt+0xb6>
    d9aa:	6933      	ldr	r3, [r6, #16]
    d9ac:	69f2      	ldr	r2, [r6, #28]
    d9ae:	4293      	cmp	r3, r2
    d9b0:	d27d      	bcs.n	daae <_ZN6SdFile5writeEPKvt+0x1b2>
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    d9b2:	2101      	movs	r1, #1
    d9b4:	4648      	mov	r0, r9
    d9b6:	f000 fb7d 	bl	e0b4 <_ZN8SdVolume13cacheRawBlockEmh>
    d9ba:	2800      	cmp	r0, #0
    d9bc:	d100      	bne.n	d9c0 <_ZN6SdFile5writeEPKvt+0xc4>
    d9be:	e0ae      	b.n	db1e <_ZN6SdFile5writeEPKvt+0x222>
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    d9c0:	465b      	mov	r3, fp
    d9c2:	18e3      	adds	r3, r4, r3
      uint8_t* end = dst + n;
    d9c4:	195a      	adds	r2, r3, r5
      while (dst != end) *dst++ = *src++;
    d9c6:	4293      	cmp	r3, r2
    d9c8:	d100      	bne.n	d9cc <_ZN6SdFile5writeEPKvt+0xd0>
    d9ca:	e083      	b.n	dad4 <_ZN6SdFile5writeEPKvt+0x1d8>
    d9cc:	1c59      	adds	r1, r3, #1
    d9ce:	468c      	mov	ip, r1
    d9d0:	2100      	movs	r1, #0
    d9d2:	0008      	movs	r0, r1
    d9d4:	3404      	adds	r4, #4
    d9d6:	445c      	add	r4, fp
    d9d8:	42a7      	cmp	r7, r4
    d9da:	4148      	adcs	r0, r1
    d9dc:	0004      	movs	r4, r0
    d9de:	1d38      	adds	r0, r7, #4
    d9e0:	4283      	cmp	r3, r0
    d9e2:	4149      	adcs	r1, r1
    d9e4:	0018      	movs	r0, r3
    d9e6:	4321      	orrs	r1, r4
    d9e8:	2403      	movs	r4, #3
    d9ea:	4338      	orrs	r0, r7
    d9ec:	4020      	ands	r0, r4
    d9ee:	4244      	negs	r4, r0
    d9f0:	4144      	adcs	r4, r0
    d9f2:	420c      	tst	r4, r1
    d9f4:	d070      	beq.n	dad8 <_ZN6SdFile5writeEPKvt+0x1dc>
    d9f6:	2d09      	cmp	r5, #9
    d9f8:	d96e      	bls.n	dad8 <_ZN6SdFile5writeEPKvt+0x1dc>
    d9fa:	1f29      	subs	r1, r5, #4
    d9fc:	0889      	lsrs	r1, r1, #2
    d9fe:	3101      	adds	r1, #1
    da00:	0088      	lsls	r0, r1, #2
    da02:	4681      	mov	r9, r0
    da04:	2400      	movs	r4, #0
    da06:	2000      	movs	r0, #0
    da08:	4692      	mov	sl, r2
    da0a:	593a      	ldr	r2, [r7, r4]
    da0c:	3001      	adds	r0, #1
    da0e:	511a      	str	r2, [r3, r4]
    da10:	3404      	adds	r4, #4
    da12:	4288      	cmp	r0, r1
    da14:	d3f9      	bcc.n	da0a <_ZN6SdFile5writeEPKvt+0x10e>
    da16:	4649      	mov	r1, r9
    da18:	4652      	mov	r2, sl
    da1a:	1879      	adds	r1, r7, r1
    da1c:	444b      	add	r3, r9
    da1e:	454d      	cmp	r5, r9
    da20:	d00b      	beq.n	da3a <_ZN6SdFile5writeEPKvt+0x13e>
    da22:	780c      	ldrb	r4, [r1, #0]
    da24:	701c      	strb	r4, [r3, #0]
    da26:	1c5c      	adds	r4, r3, #1
    da28:	42a2      	cmp	r2, r4
    da2a:	d006      	beq.n	da3a <_ZN6SdFile5writeEPKvt+0x13e>
    da2c:	784c      	ldrb	r4, [r1, #1]
    da2e:	705c      	strb	r4, [r3, #1]
    da30:	1c9c      	adds	r4, r3, #2
    da32:	42a2      	cmp	r2, r4
    da34:	d001      	beq.n	da3a <_ZN6SdFile5writeEPKvt+0x13e>
    da36:	7889      	ldrb	r1, [r1, #2]
    da38:	7099      	strb	r1, [r3, #2]
    da3a:	4663      	mov	r3, ip
    da3c:	002c      	movs	r4, r5
    da3e:	1ad2      	subs	r2, r2, r3
    da40:	3201      	adds	r2, #1
    da42:	18bf      	adds	r7, r7, r2
    nToWrite -= n;
    da44:	4643      	mov	r3, r8
    da46:	1b5d      	subs	r5, r3, r5
    da48:	b2ab      	uxth	r3, r5
    da4a:	4698      	mov	r8, r3
    curPosition_ += n;
    da4c:	6933      	ldr	r3, [r6, #16]
  while (nToWrite > 0) {
    da4e:	46c2      	mov	sl, r8
    curPosition_ += n;
    da50:	469c      	mov	ip, r3
  while (nToWrite > 0) {
    da52:	4643      	mov	r3, r8
    curPosition_ += n;
    da54:	4464      	add	r4, ip
    da56:	6134      	str	r4, [r6, #16]
  while (nToWrite > 0) {
    da58:	2b00      	cmp	r3, #0
    da5a:	d100      	bne.n	da5e <_ZN6SdFile5writeEPKvt+0x162>
    da5c:	e08c      	b.n	db78 <_ZN6SdFile5writeEPKvt+0x27c>
    da5e:	68f1      	ldr	r1, [r6, #12]
    da60:	e77b      	b.n	d95a <_ZN6SdFile5writeEPKvt+0x5e>
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    da62:	0032      	movs	r2, r6
    da64:	3101      	adds	r1, #1
    da66:	320c      	adds	r2, #12
    da68:	f000 f998 	bl	dd9c <_ZN8SdVolume15allocContiguousEmPm>
    da6c:	2800      	cmp	r0, #0
    da6e:	d056      	beq.n	db1e <_ZN6SdFile5writeEPKvt+0x222>
  if (firstCluster_ == 0) {
    da70:	6a33      	ldr	r3, [r6, #32]
    da72:	2b00      	cmp	r3, #0
    da74:	d000      	beq.n	da78 <_ZN6SdFile5writeEPKvt+0x17c>
    da76:	e0ad      	b.n	dbd4 <_ZN6SdFile5writeEPKvt+0x2d8>
    flags_ |= F_FILE_DIR_DIRTY;
    da78:	2380      	movs	r3, #128	; 0x80
    da7a:	7a32      	ldrb	r2, [r6, #8]
    firstCluster_ = curCluster_;
    da7c:	68f1      	ldr	r1, [r6, #12]
    flags_ |= F_FILE_DIR_DIRTY;
    da7e:	425b      	negs	r3, r3
    da80:	4313      	orrs	r3, r2
    firstCluster_ = curCluster_;
    da82:	6231      	str	r1, [r6, #32]
    flags_ |= F_FILE_DIR_DIRTY;
    da84:	7233      	strb	r3, [r6, #8]
    da86:	6a70      	ldr	r0, [r6, #36]	; 0x24
    da88:	e77b      	b.n	d982 <_ZN6SdFile5writeEPKvt+0x86>
      if (SdVolume::cacheBlockNumber_ == block) {
    da8a:	4b74      	ldr	r3, [pc, #464]	; (dc5c <_ZN6SdFile5writeEPKvt+0x360>)
    da8c:	681a      	ldr	r2, [r3, #0]
    da8e:	4591      	cmp	r9, r2
    da90:	d02a      	beq.n	dae8 <_ZN6SdFile5writeEPKvt+0x1ec>
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    da92:	4b73      	ldr	r3, [pc, #460]	; (dc60 <_ZN6SdFile5writeEPKvt+0x364>)
    da94:	003a      	movs	r2, r7
    da96:	6818      	ldr	r0, [r3, #0]
    da98:	4649      	mov	r1, r9
    da9a:	f7ff faf9 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    da9e:	2800      	cmp	r0, #0
    daa0:	d03d      	beq.n	db1e <_ZN6SdFile5writeEPKvt+0x222>
      src += 512;
    daa2:	2380      	movs	r3, #128	; 0x80
    daa4:	009b      	lsls	r3, r3, #2
    daa6:	469c      	mov	ip, r3
    daa8:	001c      	movs	r4, r3
    daaa:	4467      	add	r7, ip
    daac:	e7ca      	b.n	da44 <_ZN6SdFile5writeEPKvt+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    daae:	f000 fad3 	bl	e058 <_ZN8SdVolume10cacheFlushEv>
    dab2:	2800      	cmp	r0, #0
    dab4:	d033      	beq.n	db1e <_ZN6SdFile5writeEPKvt+0x222>
        SdVolume::cacheBlockNumber_ = block;
    dab6:	464a      	mov	r2, r9
    dab8:	4b68      	ldr	r3, [pc, #416]	; (dc5c <_ZN6SdFile5writeEPKvt+0x360>)
    daba:	601a      	str	r2, [r3, #0]
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    dabc:	2201      	movs	r2, #1
    dabe:	4b69      	ldr	r3, [pc, #420]	; (dc64 <_ZN6SdFile5writeEPKvt+0x368>)
    dac0:	781b      	ldrb	r3, [r3, #0]
    dac2:	4313      	orrs	r3, r2
    dac4:	4a67      	ldr	r2, [pc, #412]	; (dc64 <_ZN6SdFile5writeEPKvt+0x368>)
    dac6:	7013      	strb	r3, [r2, #0]
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    dac8:	465b      	mov	r3, fp
    daca:	18e3      	adds	r3, r4, r3
      uint8_t* end = dst + n;
    dacc:	195a      	adds	r2, r3, r5
      while (dst != end) *dst++ = *src++;
    dace:	4293      	cmp	r3, r2
    dad0:	d000      	beq.n	dad4 <_ZN6SdFile5writeEPKvt+0x1d8>
    dad2:	e77b      	b.n	d9cc <_ZN6SdFile5writeEPKvt+0xd0>
    dad4:	002c      	movs	r4, r5
    dad6:	e7b5      	b.n	da44 <_ZN6SdFile5writeEPKvt+0x148>
    dad8:	0039      	movs	r1, r7
    dada:	7808      	ldrb	r0, [r1, #0]
    dadc:	3101      	adds	r1, #1
    dade:	7018      	strb	r0, [r3, #0]
    dae0:	3301      	adds	r3, #1
    dae2:	429a      	cmp	r2, r3
    dae4:	d1f9      	bne.n	dada <_ZN6SdFile5writeEPKvt+0x1de>
    dae6:	e7a8      	b.n	da3a <_ZN6SdFile5writeEPKvt+0x13e>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    dae8:	2201      	movs	r2, #1
    daea:	4252      	negs	r2, r2
    daec:	601a      	str	r2, [r3, #0]
    daee:	e7d0      	b.n	da92 <_ZN6SdFile5writeEPKvt+0x196>
        if (!vol_->fatGet(curCluster_, &next)) return false;
    daf0:	aa03      	add	r2, sp, #12
    daf2:	f000 fc01 	bl	e2f8 <_ZNK8SdVolume6fatGetEmPm>
    daf6:	2800      	cmp	r0, #0
    daf8:	d100      	bne.n	dafc <_ZN6SdFile5writeEPKvt+0x200>
    dafa:	e710      	b.n	d91e <_ZN6SdFile5writeEPKvt+0x22>
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    dafc:	2320      	movs	r3, #32
        if (vol_->isEOC(next)) {
    dafe:	6a70      	ldr	r0, [r6, #36]	; 0x24
    db00:	9903      	ldr	r1, [sp, #12]
    db02:	5cc3      	ldrb	r3, [r0, r3]
    db04:	2b10      	cmp	r3, #16
    db06:	d045      	beq.n	db94 <_ZN6SdFile5writeEPKvt+0x298>
    db08:	4b57      	ldr	r3, [pc, #348]	; (dc68 <_ZN6SdFile5writeEPKvt+0x36c>)
    db0a:	4299      	cmp	r1, r3
    db0c:	d200      	bcs.n	db10 <_ZN6SdFile5writeEPKvt+0x214>
    db0e:	e737      	b.n	d980 <_ZN6SdFile5writeEPKvt+0x84>
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    db10:	0032      	movs	r2, r6
    db12:	2101      	movs	r1, #1
    db14:	320c      	adds	r2, #12
    db16:	f000 f941 	bl	dd9c <_ZN8SdVolume15allocContiguousEmPm>
    db1a:	2800      	cmp	r0, #0
    db1c:	d1a8      	bne.n	da70 <_ZN6SdFile5writeEPKvt+0x174>
    db1e:	46b0      	mov	r8, r6
    db20:	e6f9      	b.n	d916 <_ZN6SdFile5writeEPKvt+0x1a>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    db22:	4642      	mov	r2, r8
    db24:	4641      	mov	r1, r8
    db26:	6912      	ldr	r2, [r2, #16]
    db28:	69cf      	ldr	r7, [r1, #28]
    db2a:	42ba      	cmp	r2, r7
    db2c:	d100      	bne.n	db30 <_ZN6SdFile5writeEPKvt+0x234>
    db2e:	e704      	b.n	d93a <_ZN6SdFile5writeEPKvt+0x3e>
  if (pos == 0) {
    db30:	2f00      	cmp	r7, #0
    db32:	d052      	beq.n	dbda <_ZN6SdFile5writeEPKvt+0x2de>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    db34:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    db36:	1e7d      	subs	r5, r7, #1
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    db38:	7c19      	ldrb	r1, [r3, #16]
    db3a:	1e53      	subs	r3, r2, #1
    db3c:	3109      	adds	r1, #9
    db3e:	40cb      	lsrs	r3, r1
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    db40:	40cd      	lsrs	r5, r1
  if (nNew < nCur || curPosition_ == 0) {
    db42:	42ab      	cmp	r3, r5
    db44:	d852      	bhi.n	dbec <_ZN6SdFile5writeEPKvt+0x2f0>
    db46:	2a00      	cmp	r2, #0
    db48:	d050      	beq.n	dbec <_ZN6SdFile5writeEPKvt+0x2f0>
    nNew -= nCur;
    db4a:	1aed      	subs	r5, r5, r3
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    db4c:	4646      	mov	r6, r8
    db4e:	0023      	movs	r3, r4
    db50:	360c      	adds	r6, #12
    db52:	4644      	mov	r4, r8
    db54:	4698      	mov	r8, r3
    db56:	e007      	b.n	db68 <_ZN6SdFile5writeEPKvt+0x26c>
    db58:	0032      	movs	r2, r6
    db5a:	68e1      	ldr	r1, [r4, #12]
    db5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    db5e:	f000 fbcb 	bl	e2f8 <_ZNK8SdVolume6fatGetEmPm>
    db62:	3d01      	subs	r5, #1
    db64:	2800      	cmp	r0, #0
    db66:	d045      	beq.n	dbf4 <_ZN6SdFile5writeEPKvt+0x2f8>
  while (nNew--) {
    db68:	2d00      	cmp	r5, #0
    db6a:	d1f5      	bne.n	db58 <_ZN6SdFile5writeEPKvt+0x25c>
    db6c:	4643      	mov	r3, r8
    db6e:	46a0      	mov	r8, r4
    db70:	001c      	movs	r4, r3
  curPosition_ = pos;
    db72:	4643      	mov	r3, r8
    db74:	611f      	str	r7, [r3, #16]
    db76:	e6e0      	b.n	d93a <_ZN6SdFile5writeEPKvt+0x3e>
    db78:	0027      	movs	r7, r4
    db7a:	46b0      	mov	r8, r6
  if (curPosition_ > fileSize_) {
    db7c:	4643      	mov	r3, r8
    db7e:	69db      	ldr	r3, [r3, #28]
    db80:	42bb      	cmp	r3, r7
    db82:	d209      	bcs.n	db98 <_ZN6SdFile5writeEPKvt+0x29c>
    fileSize_ = curPosition_;
    db84:	4643      	mov	r3, r8
    flags_ |= F_FILE_DIR_DIRTY;
    db86:	2280      	movs	r2, #128	; 0x80
    fileSize_ = curPosition_;
    db88:	61df      	str	r7, [r3, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    db8a:	7a1b      	ldrb	r3, [r3, #8]
    db8c:	4313      	orrs	r3, r2
    db8e:	4642      	mov	r2, r8
    db90:	7213      	strb	r3, [r2, #8]
    db92:	e00e      	b.n	dbb2 <_ZN6SdFile5writeEPKvt+0x2b6>
    db94:	4b35      	ldr	r3, [pc, #212]	; (dc6c <_ZN6SdFile5writeEPKvt+0x370>)
    db96:	e7b8      	b.n	db0a <_ZN6SdFile5writeEPKvt+0x20e>
    db98:	4643      	mov	r3, r8
  } else if (dateTime_ && nbyte) {
    db9a:	4a35      	ldr	r2, [pc, #212]	; (dc70 <_ZN6SdFile5writeEPKvt+0x374>)
    db9c:	7a1b      	ldrb	r3, [r3, #8]
    db9e:	6812      	ldr	r2, [r2, #0]
    dba0:	2a00      	cmp	r2, #0
    dba2:	d006      	beq.n	dbb2 <_ZN6SdFile5writeEPKvt+0x2b6>
    dba4:	9a01      	ldr	r2, [sp, #4]
    dba6:	2a00      	cmp	r2, #0
    dba8:	d003      	beq.n	dbb2 <_ZN6SdFile5writeEPKvt+0x2b6>
    flags_ |= F_FILE_DIR_DIRTY;
    dbaa:	2280      	movs	r2, #128	; 0x80
    dbac:	4313      	orrs	r3, r2
    dbae:	4642      	mov	r2, r8
    dbb0:	7213      	strb	r3, [r2, #8]
  if (flags_ & O_SYNC) {
    dbb2:	071a      	lsls	r2, r3, #28
    dbb4:	d50c      	bpl.n	dbd0 <_ZN6SdFile5writeEPKvt+0x2d4>
  if (!isOpen()) return false;
    dbb6:	4642      	mov	r2, r8
    dbb8:	7a52      	ldrb	r2, [r2, #9]
    dbba:	2a00      	cmp	r2, #0
    dbbc:	d100      	bne.n	dbc0 <_ZN6SdFile5writeEPKvt+0x2c4>
    dbbe:	e6aa      	b.n	d916 <_ZN6SdFile5writeEPKvt+0x1a>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dbc0:	b25b      	sxtb	r3, r3
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	db18      	blt.n	dbf8 <_ZN6SdFile5writeEPKvt+0x2fc>
  return SdVolume::cacheFlush();
    dbc6:	f000 fa47 	bl	e058 <_ZN8SdVolume10cacheFlushEv>
    if (!sync()) goto writeErrorReturn;
    dbca:	2800      	cmp	r0, #0
    dbcc:	d100      	bne.n	dbd0 <_ZN6SdFile5writeEPKvt+0x2d4>
    dbce:	e6a2      	b.n	d916 <_ZN6SdFile5writeEPKvt+0x1a>
  return nbyte;
    dbd0:	9801      	ldr	r0, [sp, #4]
    dbd2:	e6a4      	b.n	d91e <_ZN6SdFile5writeEPKvt+0x22>
    dbd4:	6a70      	ldr	r0, [r6, #36]	; 0x24
    dbd6:	68f1      	ldr	r1, [r6, #12]
    dbd8:	e6d3      	b.n	d982 <_ZN6SdFile5writeEPKvt+0x86>
    curCluster_ = 0;
    dbda:	60cf      	str	r7, [r1, #12]
    curPosition_ = 0;
    dbdc:	610f      	str	r7, [r1, #16]
  while (nToWrite > 0) {
    dbde:	9901      	ldr	r1, [sp, #4]
    dbe0:	468a      	mov	sl, r1
    dbe2:	2900      	cmp	r1, #0
    dbe4:	d0e5      	beq.n	dbb2 <_ZN6SdFile5writeEPKvt+0x2b6>
    dbe6:	2100      	movs	r1, #0
    dbe8:	9e01      	ldr	r6, [sp, #4]
    dbea:	e6ae      	b.n	d94a <_ZN6SdFile5writeEPKvt+0x4e>
    curCluster_ = firstCluster_;
    dbec:	4643      	mov	r3, r8
    dbee:	6a1a      	ldr	r2, [r3, #32]
    dbf0:	60da      	str	r2, [r3, #12]
    dbf2:	e7ab      	b.n	db4c <_ZN6SdFile5writeEPKvt+0x250>
    dbf4:	46a0      	mov	r8, r4
    dbf6:	e68e      	b.n	d916 <_ZN6SdFile5writeEPKvt+0x1a>
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    dbf8:	4643      	mov	r3, r8
    dbfa:	2101      	movs	r1, #1
    dbfc:	6958      	ldr	r0, [r3, #20]
    dbfe:	f000 fa59 	bl	e0b4 <_ZN8SdVolume13cacheRawBlockEmh>
    dc02:	2800      	cmp	r0, #0
    dc04:	d100      	bne.n	dc08 <_ZN6SdFile5writeEPKvt+0x30c>
    dc06:	e686      	b.n	d916 <_ZN6SdFile5writeEPKvt+0x1a>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    dc08:	4643      	mov	r3, r8
    dc0a:	7e1c      	ldrb	r4, [r3, #24]
    dc0c:	4b12      	ldr	r3, [pc, #72]	; (dc58 <_ZN6SdFile5writeEPKvt+0x35c>)
    dc0e:	0164      	lsls	r4, r4, #5
    dc10:	18e4      	adds	r4, r4, r3
    if (!d) return false;
    dc12:	2c00      	cmp	r4, #0
    dc14:	d100      	bne.n	dc18 <_ZN6SdFile5writeEPKvt+0x31c>
    dc16:	e67e      	b.n	d916 <_ZN6SdFile5writeEPKvt+0x1a>
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    dc18:	4643      	mov	r3, r8
    dc1a:	7a5b      	ldrb	r3, [r3, #9]
    if (!isDir()) d->fileSize = fileSize_;
    dc1c:	2b01      	cmp	r3, #1
    dc1e:	dd16      	ble.n	dc4e <_ZN6SdFile5writeEPKvt+0x352>
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    dc20:	4643      	mov	r3, r8
    dc22:	6a1b      	ldr	r3, [r3, #32]
    dc24:	8363      	strh	r3, [r4, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    dc26:	0c1b      	lsrs	r3, r3, #16
    dc28:	82a3      	strh	r3, [r4, #20]
    if (dateTime_) {
    dc2a:	4b11      	ldr	r3, [pc, #68]	; (dc70 <_ZN6SdFile5writeEPKvt+0x374>)
    dc2c:	681b      	ldr	r3, [r3, #0]
    dc2e:	2b00      	cmp	r3, #0
    dc30:	d006      	beq.n	dc40 <_ZN6SdFile5writeEPKvt+0x344>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    dc32:	0021      	movs	r1, r4
    dc34:	0020      	movs	r0, r4
    dc36:	3116      	adds	r1, #22
    dc38:	3018      	adds	r0, #24
    dc3a:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    dc3c:	8b23      	ldrh	r3, [r4, #24]
    dc3e:	8263      	strh	r3, [r4, #18]
    flags_ &= ~F_FILE_DIR_DIRTY;
    dc40:	4643      	mov	r3, r8
    dc42:	7a1a      	ldrb	r2, [r3, #8]
    dc44:	237f      	movs	r3, #127	; 0x7f
    dc46:	4013      	ands	r3, r2
    dc48:	4642      	mov	r2, r8
    dc4a:	7213      	strb	r3, [r2, #8]
    dc4c:	e7bb      	b.n	dbc6 <_ZN6SdFile5writeEPKvt+0x2ca>
    if (!isDir()) d->fileSize = fileSize_;
    dc4e:	4643      	mov	r3, r8
    dc50:	69db      	ldr	r3, [r3, #28]
    dc52:	61e3      	str	r3, [r4, #28]
    dc54:	e7e4      	b.n	dc20 <_ZN6SdFile5writeEPKvt+0x324>
    dc56:	46c0      	nop			; (mov r8, r8)
    dc58:	20000804 	.word	0x20000804
    dc5c:	2000004c 	.word	0x2000004c
    dc60:	20000a08 	.word	0x20000a08
    dc64:	20000800 	.word	0x20000800
    dc68:	0ffffff8 	.word	0x0ffffff8
    dc6c:	0000fff8 	.word	0x0000fff8
    dc70:	200007fc 	.word	0x200007fc

0000dc74 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    dc74:	b500      	push	{lr}
    dc76:	b083      	sub	sp, #12
    dc78:	466b      	mov	r3, sp
    dc7a:	71d9      	strb	r1, [r3, #7]
    dc7c:	3307      	adds	r3, #7
  return write(&b, 1);
    dc7e:	2201      	movs	r2, #1
    dc80:	0019      	movs	r1, r3
    dc82:	f7ff fe3b 	bl	d8fc <_ZN6SdFile5writeEPKvt>
}
    dc86:	b003      	add	sp, #12
    dc88:	bd00      	pop	{pc}
    dc8a:	46c0      	nop			; (mov r8, r8)

0000dc8c <_ZN8SdVolume6fatPutEmm.part.3>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    dc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc8e:	4657      	mov	r7, sl
    dc90:	464e      	mov	r6, r9
    dc92:	4645      	mov	r5, r8
    dc94:	46de      	mov	lr, fp
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    dc96:	2320      	movs	r3, #32
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    dc98:	b5e0      	push	{r5, r6, r7, lr}
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    dc9a:	5cc3      	ldrb	r3, [r0, r3]
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    dc9c:	0005      	movs	r5, r0
    dc9e:	000e      	movs	r6, r1
    dca0:	4692      	mov	sl, r2
  uint32_t lba = fatStartBlock_;
    dca2:	69c4      	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    dca4:	2b10      	cmp	r3, #16
    dca6:	d021      	beq.n	dcec <_ZN8SdVolume6fatPutEmm.part.3+0x60>
    dca8:	09cb      	lsrs	r3, r1, #7
    dcaa:	191c      	adds	r4, r3, r4

  if (lba != cacheBlockNumber_) {
    dcac:	4b36      	ldr	r3, [pc, #216]	; (dd88 <_ZN8SdVolume6fatPutEmm.part.3+0xfc>)
    dcae:	6819      	ldr	r1, [r3, #0]
    dcb0:	4698      	mov	r8, r3
    dcb2:	42a1      	cmp	r1, r4
    dcb4:	d121      	bne.n	dcfa <_ZN8SdVolume6fatPutEmm.part.3+0x6e>
    dcb6:	4b35      	ldr	r3, [pc, #212]	; (dd8c <_ZN8SdVolume6fatPutEmm.part.3+0x100>)
    dcb8:	4f35      	ldr	r7, [pc, #212]	; (dd90 <_ZN8SdVolume6fatPutEmm.part.3+0x104>)
    dcba:	4699      	mov	r9, r3
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    dcbc:	237f      	movs	r3, #127	; 0x7f
    dcbe:	4652      	mov	r2, sl
    dcc0:	401e      	ands	r6, r3
    dcc2:	464b      	mov	r3, r9
    dcc4:	00b6      	lsls	r6, r6, #2
    dcc6:	519a      	str	r2, [r3, r6]
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    dcc8:	2201      	movs	r2, #1
    dcca:	783b      	ldrb	r3, [r7, #0]
    dccc:	4313      	orrs	r3, r2
    dcce:	703b      	strb	r3, [r7, #0]
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    dcd0:	7e2b      	ldrb	r3, [r5, #24]
    dcd2:	2b01      	cmp	r3, #1
    dcd4:	dd34      	ble.n	dd40 <_ZN8SdVolume6fatPutEmm.part.3+0xb4>
  return true;
    dcd6:	2001      	movs	r0, #1
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    dcd8:	68ab      	ldr	r3, [r5, #8]
    dcda:	191c      	adds	r4, r3, r4
    dcdc:	4b2d      	ldr	r3, [pc, #180]	; (dd94 <_ZN8SdVolume6fatPutEmm.part.3+0x108>)
    dcde:	601c      	str	r4, [r3, #0]
}
    dce0:	bc3c      	pop	{r2, r3, r4, r5}
    dce2:	4690      	mov	r8, r2
    dce4:	4699      	mov	r9, r3
    dce6:	46a2      	mov	sl, r4
    dce8:	46ab      	mov	fp, r5
    dcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    dcec:	0a0b      	lsrs	r3, r1, #8
    dcee:	191c      	adds	r4, r3, r4
  if (lba != cacheBlockNumber_) {
    dcf0:	4b25      	ldr	r3, [pc, #148]	; (dd88 <_ZN8SdVolume6fatPutEmm.part.3+0xfc>)
    dcf2:	6819      	ldr	r1, [r3, #0]
    dcf4:	4698      	mov	r8, r3
    dcf6:	428c      	cmp	r4, r1
    dcf8:	d042      	beq.n	dd80 <_ZN8SdVolume6fatPutEmm.part.3+0xf4>
  if (cacheDirty_) {
    dcfa:	4f25      	ldr	r7, [pc, #148]	; (dd90 <_ZN8SdVolume6fatPutEmm.part.3+0x104>)
    dcfc:	783b      	ldrb	r3, [r7, #0]
    dcfe:	2b00      	cmp	r3, #0
    dd00:	d120      	bne.n	dd44 <_ZN8SdVolume6fatPutEmm.part.3+0xb8>
    dd02:	4b22      	ldr	r3, [pc, #136]	; (dd8c <_ZN8SdVolume6fatPutEmm.part.3+0x100>)
    dd04:	4699      	mov	r9, r3
    dd06:	4b24      	ldr	r3, [pc, #144]	; (dd98 <_ZN8SdVolume6fatPutEmm.part.3+0x10c>)
    dd08:	469b      	mov	fp, r3
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    dd0a:	465b      	mov	r3, fp
    dd0c:	464a      	mov	r2, r9
    dd0e:	6818      	ldr	r0, [r3, #0]
    dd10:	0021      	movs	r1, r4
    dd12:	f7ff f861 	bl	cdd8 <_ZN7Sd2Card9readBlockEmPh>
    dd16:	2800      	cmp	r0, #0
    dd18:	d025      	beq.n	dd66 <_ZN8SdVolume6fatPutEmm.part.3+0xda>
    cacheBlockNumber_ = blockNumber;
    dd1a:	4643      	mov	r3, r8
    dd1c:	601c      	str	r4, [r3, #0]
  if (fatType_ == 16) {
    dd1e:	2320      	movs	r3, #32
    dd20:	5ceb      	ldrb	r3, [r5, r3]
    dd22:	2b10      	cmp	r3, #16
    dd24:	d1ca      	bne.n	dcbc <_ZN8SdVolume6fatPutEmm.part.3+0x30>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    dd26:	23ff      	movs	r3, #255	; 0xff
    dd28:	4652      	mov	r2, sl
    dd2a:	401e      	ands	r6, r3
    dd2c:	464b      	mov	r3, r9
    dd2e:	0076      	lsls	r6, r6, #1
    dd30:	539a      	strh	r2, [r3, r6]
    dd32:	2201      	movs	r2, #1
    dd34:	783b      	ldrb	r3, [r7, #0]
    dd36:	4313      	orrs	r3, r2
    dd38:	703b      	strb	r3, [r7, #0]
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    dd3a:	7e2b      	ldrb	r3, [r5, #24]
    dd3c:	2b01      	cmp	r3, #1
    dd3e:	dcca      	bgt.n	dcd6 <_ZN8SdVolume6fatPutEmm.part.3+0x4a>
  return true;
    dd40:	2001      	movs	r0, #1
    dd42:	e7cd      	b.n	dce0 <_ZN8SdVolume6fatPutEmm.part.3+0x54>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    dd44:	4b11      	ldr	r3, [pc, #68]	; (dd8c <_ZN8SdVolume6fatPutEmm.part.3+0x100>)
    dd46:	4699      	mov	r9, r3
    dd48:	4b13      	ldr	r3, [pc, #76]	; (dd98 <_ZN8SdVolume6fatPutEmm.part.3+0x10c>)
    dd4a:	464a      	mov	r2, r9
    dd4c:	6818      	ldr	r0, [r3, #0]
    dd4e:	469b      	mov	fp, r3
    dd50:	f7ff f99e 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    dd54:	2800      	cmp	r0, #0
    dd56:	d006      	beq.n	dd66 <_ZN8SdVolume6fatPutEmm.part.3+0xda>
    if (cacheMirrorBlock_) {
    dd58:	4b0e      	ldr	r3, [pc, #56]	; (dd94 <_ZN8SdVolume6fatPutEmm.part.3+0x108>)
    dd5a:	6819      	ldr	r1, [r3, #0]
    dd5c:	2900      	cmp	r1, #0
    dd5e:	d104      	bne.n	dd6a <_ZN8SdVolume6fatPutEmm.part.3+0xde>
    cacheDirty_ = 0;
    dd60:	2300      	movs	r3, #0
    dd62:	703b      	strb	r3, [r7, #0]
    dd64:	e7d1      	b.n	dd0a <_ZN8SdVolume6fatPutEmm.part.3+0x7e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    dd66:	2000      	movs	r0, #0
    dd68:	e7ba      	b.n	dce0 <_ZN8SdVolume6fatPutEmm.part.3+0x54>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    dd6a:	465b      	mov	r3, fp
    dd6c:	464a      	mov	r2, r9
    dd6e:	6818      	ldr	r0, [r3, #0]
    dd70:	f7ff f98e 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    dd74:	2800      	cmp	r0, #0
    dd76:	d0f6      	beq.n	dd66 <_ZN8SdVolume6fatPutEmm.part.3+0xda>
      cacheMirrorBlock_ = 0;
    dd78:	2300      	movs	r3, #0
    dd7a:	4a06      	ldr	r2, [pc, #24]	; (dd94 <_ZN8SdVolume6fatPutEmm.part.3+0x108>)
    dd7c:	6013      	str	r3, [r2, #0]
    dd7e:	e7ef      	b.n	dd60 <_ZN8SdVolume6fatPutEmm.part.3+0xd4>
    dd80:	4b02      	ldr	r3, [pc, #8]	; (dd8c <_ZN8SdVolume6fatPutEmm.part.3+0x100>)
    dd82:	4f03      	ldr	r7, [pc, #12]	; (dd90 <_ZN8SdVolume6fatPutEmm.part.3+0x104>)
    dd84:	4699      	mov	r9, r3
    dd86:	e7ce      	b.n	dd26 <_ZN8SdVolume6fatPutEmm.part.3+0x9a>
    dd88:	2000004c 	.word	0x2000004c
    dd8c:	20000804 	.word	0x20000804
    dd90:	20000800 	.word	0x20000800
    dd94:	20000a04 	.word	0x20000a04
    dd98:	20000a08 	.word	0x20000a08

0000dd9c <_ZN8SdVolume15allocContiguousEmPm>:
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    dd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd9e:	464e      	mov	r6, r9
    dda0:	46de      	mov	lr, fp
    dda2:	4657      	mov	r7, sl
    dda4:	4645      	mov	r5, r8
    dda6:	b5e0      	push	{r5, r6, r7, lr}
  if (*curCluster) {
    dda8:	6813      	ldr	r3, [r2, #0]
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    ddaa:	b087      	sub	sp, #28
    ddac:	0006      	movs	r6, r0
    ddae:	9102      	str	r1, [sp, #8]
    ddb0:	9205      	str	r2, [sp, #20]
  if (*curCluster) {
    ddb2:	2b00      	cmp	r3, #0
    ddb4:	d100      	bne.n	ddb8 <_ZN8SdVolume15allocContiguousEmPm+0x1c>
    ddb6:	e080      	b.n	deba <_ZN8SdVolume15allocContiguousEmPm+0x11e>
    bgnCluster = *curCluster + 1;
    ddb8:	3301      	adds	r3, #1
    ddba:	469a      	mov	sl, r3
    setStart = false;
    ddbc:	2300      	movs	r3, #0
    ddbe:	9301      	str	r3, [sp, #4]
  uint32_t fatEnd = clusterCount_ + 1;
    ddc0:	68f1      	ldr	r1, [r6, #12]
    if (n >= clusterCount_) return false;
    ddc2:	4652      	mov	r2, sl
  uint32_t fatEnd = clusterCount_ + 1;
    ddc4:	1c4b      	adds	r3, r1, #1
    ddc6:	4699      	mov	r9, r3
    if (n >= clusterCount_) return false;
    ddc8:	2700      	movs	r7, #0
    ddca:	2900      	cmp	r1, #0
    ddcc:	d108      	bne.n	dde0 <_ZN8SdVolume15allocContiguousEmPm+0x44>
    ddce:	e032      	b.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
      bgnCluster = endCluster + 1;
    ddd0:	1c63      	adds	r3, r4, #1
    ddd2:	469a      	mov	sl, r3
    ddd4:	001a      	movs	r2, r3
    if (n >= clusterCount_) return false;
    ddd6:	68f3      	ldr	r3, [r6, #12]
  for (uint32_t n = 0;; n++, endCluster++) {
    ddd8:	3701      	adds	r7, #1
    if (n >= clusterCount_) return false;
    ddda:	42bb      	cmp	r3, r7
    dddc:	d92b      	bls.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
    ddde:	3301      	adds	r3, #1
    if (endCluster > fatEnd) {
    dde0:	0014      	movs	r4, r2
    dde2:	4591      	cmp	r9, r2
    dde4:	d202      	bcs.n	ddec <_ZN8SdVolume15allocContiguousEmPm+0x50>
      bgnCluster = endCluster = 2;
    dde6:	2202      	movs	r2, #2
    dde8:	2402      	movs	r4, #2
    ddea:	4692      	mov	sl, r2
  if (cluster > (clusterCount_ + 1)) return false;
    ddec:	429c      	cmp	r4, r3
    ddee:	d822      	bhi.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    ddf0:	2320      	movs	r3, #32
    ddf2:	5cf3      	ldrb	r3, [r6, r3]
  uint32_t lba = fatStartBlock_;
    ddf4:	69f5      	ldr	r5, [r6, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    ddf6:	2b10      	cmp	r3, #16
    ddf8:	d027      	beq.n	de4a <_ZN8SdVolume15allocContiguousEmPm+0xae>
    ddfa:	09e3      	lsrs	r3, r4, #7
    ddfc:	195d      	adds	r5, r3, r5
  if (lba != cacheBlockNumber_) {
    ddfe:	4b90      	ldr	r3, [pc, #576]	; (e040 <_ZN8SdVolume15allocContiguousEmPm+0x2a4>)
    de00:	6819      	ldr	r1, [r3, #0]
    de02:	4698      	mov	r8, r3
    de04:	42a9      	cmp	r1, r5
    de06:	d128      	bne.n	de5a <_ZN8SdVolume15allocContiguousEmPm+0xbe>
    de08:	4b8e      	ldr	r3, [pc, #568]	; (e044 <_ZN8SdVolume15allocContiguousEmPm+0x2a8>)
    de0a:	469b      	mov	fp, r3
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    de0c:	237f      	movs	r3, #127	; 0x7f
    de0e:	465a      	mov	r2, fp
    de10:	4023      	ands	r3, r4
    de12:	009b      	lsls	r3, r3, #2
    de14:	58d3      	ldr	r3, [r2, r3]
    de16:	011b      	lsls	r3, r3, #4
    de18:	091b      	lsrs	r3, r3, #4
    if (f != 0) {
    de1a:	2b00      	cmp	r3, #0
    de1c:	d1d8      	bne.n	ddd0 <_ZN8SdVolume15allocContiguousEmPm+0x34>
    } else if ((endCluster - bgnCluster + 1) == count) {
    de1e:	4653      	mov	r3, sl
    de20:	9902      	ldr	r1, [sp, #8]
    de22:	1c62      	adds	r2, r4, #1
    de24:	1ad3      	subs	r3, r2, r3
    de26:	4299      	cmp	r1, r3
    de28:	d1d5      	bne.n	ddd6 <_ZN8SdVolume15allocContiguousEmPm+0x3a>
  if (cluster < 2) return false;
    de2a:	2c01      	cmp	r4, #1
    de2c:	d903      	bls.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
  if (cluster > (clusterCount_ + 1)) return false;
    de2e:	68f3      	ldr	r3, [r6, #12]
    de30:	3301      	adds	r3, #1
    de32:	429c      	cmp	r4, r3
    de34:	d957      	bls.n	dee6 <_ZN8SdVolume15allocContiguousEmPm+0x14a>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    de36:	2300      	movs	r3, #0
    de38:	0018      	movs	r0, r3
    de3a:	9301      	str	r3, [sp, #4]
}
    de3c:	b007      	add	sp, #28
    de3e:	bc3c      	pop	{r2, r3, r4, r5}
    de40:	4690      	mov	r8, r2
    de42:	4699      	mov	r9, r3
    de44:	46a2      	mov	sl, r4
    de46:	46ab      	mov	fp, r5
    de48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    de4a:	0a23      	lsrs	r3, r4, #8
    de4c:	195d      	adds	r5, r3, r5
  if (lba != cacheBlockNumber_) {
    de4e:	4b7c      	ldr	r3, [pc, #496]	; (e040 <_ZN8SdVolume15allocContiguousEmPm+0x2a4>)
    de50:	6819      	ldr	r1, [r3, #0]
    de52:	4698      	mov	r8, r3
    de54:	428d      	cmp	r5, r1
    de56:	d100      	bne.n	de5a <_ZN8SdVolume15allocContiguousEmPm+0xbe>
    de58:	e0ef      	b.n	e03a <_ZN8SdVolume15allocContiguousEmPm+0x29e>
  if (cacheDirty_) {
    de5a:	4b7b      	ldr	r3, [pc, #492]	; (e048 <_ZN8SdVolume15allocContiguousEmPm+0x2ac>)
    de5c:	781b      	ldrb	r3, [r3, #0]
    de5e:	2b00      	cmp	r3, #0
    de60:	d116      	bne.n	de90 <_ZN8SdVolume15allocContiguousEmPm+0xf4>
    de62:	4b78      	ldr	r3, [pc, #480]	; (e044 <_ZN8SdVolume15allocContiguousEmPm+0x2a8>)
    de64:	469b      	mov	fp, r3
    de66:	4b79      	ldr	r3, [pc, #484]	; (e04c <_ZN8SdVolume15allocContiguousEmPm+0x2b0>)
    de68:	9303      	str	r3, [sp, #12]
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    de6a:	6818      	ldr	r0, [r3, #0]
    de6c:	465a      	mov	r2, fp
    de6e:	0029      	movs	r1, r5
    de70:	f7fe ffb2 	bl	cdd8 <_ZN7Sd2Card9readBlockEmPh>
    de74:	2800      	cmp	r0, #0
    de76:	d0de      	beq.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
    cacheBlockNumber_ = blockNumber;
    de78:	4643      	mov	r3, r8
    de7a:	601d      	str	r5, [r3, #0]
  if (fatType_ == 16) {
    de7c:	2320      	movs	r3, #32
    de7e:	5cf3      	ldrb	r3, [r6, r3]
    de80:	2b10      	cmp	r3, #16
    de82:	d1c3      	bne.n	de0c <_ZN8SdVolume15allocContiguousEmPm+0x70>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    de84:	23ff      	movs	r3, #255	; 0xff
    de86:	465a      	mov	r2, fp
    de88:	4023      	ands	r3, r4
    de8a:	005b      	lsls	r3, r3, #1
    de8c:	5ad3      	ldrh	r3, [r2, r3]
    de8e:	e7c4      	b.n	de1a <_ZN8SdVolume15allocContiguousEmPm+0x7e>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    de90:	4b6c      	ldr	r3, [pc, #432]	; (e044 <_ZN8SdVolume15allocContiguousEmPm+0x2a8>)
    de92:	469b      	mov	fp, r3
    de94:	4b6d      	ldr	r3, [pc, #436]	; (e04c <_ZN8SdVolume15allocContiguousEmPm+0x2b0>)
    de96:	465a      	mov	r2, fp
    de98:	9303      	str	r3, [sp, #12]
    de9a:	681b      	ldr	r3, [r3, #0]
    de9c:	0018      	movs	r0, r3
    de9e:	9304      	str	r3, [sp, #16]
    dea0:	f7ff f8f6 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    dea4:	2800      	cmp	r0, #0
    dea6:	d0c6      	beq.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
    if (cacheMirrorBlock_) {
    dea8:	4b69      	ldr	r3, [pc, #420]	; (e050 <_ZN8SdVolume15allocContiguousEmPm+0x2b4>)
    deaa:	6819      	ldr	r1, [r3, #0]
    deac:	2900      	cmp	r1, #0
    deae:	d10d      	bne.n	decc <_ZN8SdVolume15allocContiguousEmPm+0x130>
    cacheDirty_ = 0;
    deb0:	2300      	movs	r3, #0
    deb2:	4a65      	ldr	r2, [pc, #404]	; (e048 <_ZN8SdVolume15allocContiguousEmPm+0x2ac>)
    deb4:	7013      	strb	r3, [r2, #0]
    deb6:	9b03      	ldr	r3, [sp, #12]
    deb8:	e7d7      	b.n	de6a <_ZN8SdVolume15allocContiguousEmPm+0xce>
    bgnCluster = allocSearchStart_;
    deba:	6803      	ldr	r3, [r0, #0]
    debc:	469a      	mov	sl, r3
    setStart = 1 == count;
    debe:	9b02      	ldr	r3, [sp, #8]
    dec0:	3b01      	subs	r3, #1
    dec2:	4259      	negs	r1, r3
    dec4:	4159      	adcs	r1, r3
    dec6:	b2cb      	uxtb	r3, r1
    dec8:	9301      	str	r3, [sp, #4]
    deca:	e779      	b.n	ddc0 <_ZN8SdVolume15allocContiguousEmPm+0x24>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    decc:	4b5f      	ldr	r3, [pc, #380]	; (e04c <_ZN8SdVolume15allocContiguousEmPm+0x2b0>)
    dece:	4a5d      	ldr	r2, [pc, #372]	; (e044 <_ZN8SdVolume15allocContiguousEmPm+0x2a8>)
    ded0:	681b      	ldr	r3, [r3, #0]
    ded2:	0018      	movs	r0, r3
    ded4:	9304      	str	r3, [sp, #16]
    ded6:	f7ff f8db 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    deda:	2800      	cmp	r0, #0
    dedc:	d0ab      	beq.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
      cacheMirrorBlock_ = 0;
    dede:	2300      	movs	r3, #0
    dee0:	4a5b      	ldr	r2, [pc, #364]	; (e050 <_ZN8SdVolume15allocContiguousEmPm+0x2b4>)
    dee2:	6013      	str	r3, [r2, #0]
    dee4:	e7e4      	b.n	deb0 <_ZN8SdVolume15allocContiguousEmPm+0x114>
    dee6:	4a5b      	ldr	r2, [pc, #364]	; (e054 <_ZN8SdVolume15allocContiguousEmPm+0x2b8>)
    dee8:	0021      	movs	r1, r4
    deea:	0030      	movs	r0, r6
    deec:	f7ff fece 	bl	dc8c <_ZN8SdVolume6fatPutEmm.part.3>
  if (!fatPutEOC(endCluster)) return false;
    def0:	2800      	cmp	r0, #0
    def2:	d0a0      	beq.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
  while (endCluster > bgnCluster) {
    def4:	45a2      	cmp	sl, r4
    def6:	d270      	bcs.n	dfda <_ZN8SdVolume15allocContiguousEmPm+0x23e>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    def8:	1e67      	subs	r7, r4, #1
  if (cluster < 2) return false;
    defa:	2f01      	cmp	r7, #1
    defc:	d99b      	bls.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
  if (cluster > (clusterCount_ + 1)) return false;
    defe:	68f3      	ldr	r3, [r6, #12]
    df00:	3301      	adds	r3, #1
    df02:	42bb      	cmp	r3, r7
    df04:	d397      	bcc.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
    df06:	4b50      	ldr	r3, [pc, #320]	; (e048 <_ZN8SdVolume15allocContiguousEmPm+0x2ac>)
    df08:	4651      	mov	r1, sl
    df0a:	781a      	ldrb	r2, [r3, #0]
    df0c:	4653      	mov	r3, sl
    df0e:	3301      	adds	r3, #1
    df10:	9103      	str	r1, [sp, #12]
    df12:	4699      	mov	r9, r3
    df14:	e023      	b.n	df5e <_ZN8SdVolume15allocContiguousEmPm+0x1c2>
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    df16:	09fb      	lsrs	r3, r7, #7
    df18:	195d      	adds	r5, r3, r5
  if (lba != cacheBlockNumber_) {
    df1a:	4643      	mov	r3, r8
    df1c:	6819      	ldr	r1, [r3, #0]
    df1e:	428d      	cmp	r5, r1
    df20:	d128      	bne.n	df74 <_ZN8SdVolume15allocContiguousEmPm+0x1d8>
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    df22:	237f      	movs	r3, #127	; 0x7f
    df24:	4658      	mov	r0, fp
    df26:	403b      	ands	r3, r7
    df28:	009b      	lsls	r3, r3, #2
    df2a:	50c4      	str	r4, [r0, r3]
    df2c:	2301      	movs	r3, #1
    df2e:	431a      	orrs	r2, r3
    df30:	4b45      	ldr	r3, [pc, #276]	; (e048 <_ZN8SdVolume15allocContiguousEmPm+0x2ac>)
    df32:	701a      	strb	r2, [r3, #0]
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    df34:	7e33      	ldrb	r3, [r6, #24]
    df36:	2b01      	cmp	r3, #1
    df38:	dd04      	ble.n	df44 <_ZN8SdVolume15allocContiguousEmPm+0x1a8>
    df3a:	68b3      	ldr	r3, [r6, #8]
    df3c:	469c      	mov	ip, r3
    df3e:	4b44      	ldr	r3, [pc, #272]	; (e050 <_ZN8SdVolume15allocContiguousEmPm+0x2b4>)
    df40:	4461      	add	r1, ip
    df42:	6019      	str	r1, [r3, #0]
  while (endCluster > bgnCluster) {
    df44:	454c      	cmp	r4, r9
    df46:	d046      	beq.n	dfd6 <_ZN8SdVolume15allocContiguousEmPm+0x23a>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    df48:	1ea1      	subs	r1, r4, #2
  if (cluster < 2) return false;
    df4a:	2c03      	cmp	r4, #3
    df4c:	d100      	bne.n	df50 <_ZN8SdVolume15allocContiguousEmPm+0x1b4>
    df4e:	e772      	b.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
  if (cluster > (clusterCount_ + 1)) return false;
    df50:	68f3      	ldr	r3, [r6, #12]
    df52:	003c      	movs	r4, r7
    df54:	3301      	adds	r3, #1
    df56:	4299      	cmp	r1, r3
    df58:	d900      	bls.n	df5c <_ZN8SdVolume15allocContiguousEmPm+0x1c0>
    df5a:	e76c      	b.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
    df5c:	3f01      	subs	r7, #1
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    df5e:	2320      	movs	r3, #32
    df60:	5cf3      	ldrb	r3, [r6, r3]
  uint32_t lba = fatStartBlock_;
    df62:	69f5      	ldr	r5, [r6, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    df64:	2b10      	cmp	r3, #16
    df66:	d1d6      	bne.n	df16 <_ZN8SdVolume15allocContiguousEmPm+0x17a>
    df68:	0a3b      	lsrs	r3, r7, #8
    df6a:	195d      	adds	r5, r3, r5
  if (lba != cacheBlockNumber_) {
    df6c:	4643      	mov	r3, r8
    df6e:	6819      	ldr	r1, [r3, #0]
    df70:	428d      	cmp	r5, r1
    df72:	d014      	beq.n	df9e <_ZN8SdVolume15allocContiguousEmPm+0x202>
    df74:	4b35      	ldr	r3, [pc, #212]	; (e04c <_ZN8SdVolume15allocContiguousEmPm+0x2b0>)
    df76:	469a      	mov	sl, r3
  if (cacheDirty_) {
    df78:	2a00      	cmp	r2, #0
    df7a:	d117      	bne.n	dfac <_ZN8SdVolume15allocContiguousEmPm+0x210>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    df7c:	4653      	mov	r3, sl
    df7e:	465a      	mov	r2, fp
    df80:	6818      	ldr	r0, [r3, #0]
    df82:	0029      	movs	r1, r5
    df84:	f7fe ff28 	bl	cdd8 <_ZN7Sd2Card9readBlockEmPh>
    df88:	2800      	cmp	r0, #0
    df8a:	d100      	bne.n	df8e <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
    df8c:	e753      	b.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
    cacheBlockNumber_ = blockNumber;
    df8e:	4643      	mov	r3, r8
    df90:	601d      	str	r5, [r3, #0]
  if (fatType_ == 16) {
    df92:	2320      	movs	r3, #32
    df94:	5cf3      	ldrb	r3, [r6, r3]
    df96:	2b10      	cmp	r3, #16
    df98:	d119      	bne.n	dfce <_ZN8SdVolume15allocContiguousEmPm+0x232>
    df9a:	4b2b      	ldr	r3, [pc, #172]	; (e048 <_ZN8SdVolume15allocContiguousEmPm+0x2ac>)
    df9c:	781a      	ldrb	r2, [r3, #0]
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    df9e:	23ff      	movs	r3, #255	; 0xff
    dfa0:	4659      	mov	r1, fp
    dfa2:	403b      	ands	r3, r7
    dfa4:	005b      	lsls	r3, r3, #1
    dfa6:	52cc      	strh	r4, [r1, r3]
    dfa8:	0029      	movs	r1, r5
    dfaa:	e7bf      	b.n	df2c <_ZN8SdVolume15allocContiguousEmPm+0x190>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    dfac:	681b      	ldr	r3, [r3, #0]
    dfae:	465a      	mov	r2, fp
    dfb0:	0018      	movs	r0, r3
    dfb2:	9302      	str	r3, [sp, #8]
    dfb4:	f7ff f86c 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    dfb8:	2800      	cmp	r0, #0
    dfba:	d100      	bne.n	dfbe <_ZN8SdVolume15allocContiguousEmPm+0x222>
    dfbc:	e73b      	b.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
    if (cacheMirrorBlock_) {
    dfbe:	4b24      	ldr	r3, [pc, #144]	; (e050 <_ZN8SdVolume15allocContiguousEmPm+0x2b4>)
    dfc0:	6819      	ldr	r1, [r3, #0]
    dfc2:	2900      	cmp	r1, #0
    dfc4:	d127      	bne.n	e016 <_ZN8SdVolume15allocContiguousEmPm+0x27a>
    cacheDirty_ = 0;
    dfc6:	2300      	movs	r3, #0
    dfc8:	4a1f      	ldr	r2, [pc, #124]	; (e048 <_ZN8SdVolume15allocContiguousEmPm+0x2ac>)
    dfca:	7013      	strb	r3, [r2, #0]
    dfcc:	e7d6      	b.n	df7c <_ZN8SdVolume15allocContiguousEmPm+0x1e0>
    dfce:	4b1e      	ldr	r3, [pc, #120]	; (e048 <_ZN8SdVolume15allocContiguousEmPm+0x2ac>)
  if (fatType_ == 16) {
    dfd0:	0029      	movs	r1, r5
    dfd2:	781a      	ldrb	r2, [r3, #0]
    dfd4:	e7a5      	b.n	df22 <_ZN8SdVolume15allocContiguousEmPm+0x186>
    dfd6:	9b03      	ldr	r3, [sp, #12]
    dfd8:	469a      	mov	sl, r3
  if (*curCluster != 0) {
    dfda:	9b05      	ldr	r3, [sp, #20]
    dfdc:	6819      	ldr	r1, [r3, #0]
    dfde:	2900      	cmp	r1, #0
    dfe0:	d00e      	beq.n	e000 <_ZN8SdVolume15allocContiguousEmPm+0x264>
  if (cluster < 2) return false;
    dfe2:	2901      	cmp	r1, #1
    dfe4:	d800      	bhi.n	dfe8 <_ZN8SdVolume15allocContiguousEmPm+0x24c>
    dfe6:	e726      	b.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
  if (cluster > (clusterCount_ + 1)) return false;
    dfe8:	68f3      	ldr	r3, [r6, #12]
    dfea:	3301      	adds	r3, #1
    dfec:	4299      	cmp	r1, r3
    dfee:	d900      	bls.n	dff2 <_ZN8SdVolume15allocContiguousEmPm+0x256>
    dff0:	e721      	b.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
    dff2:	4652      	mov	r2, sl
    dff4:	0030      	movs	r0, r6
    dff6:	f7ff fe49 	bl	dc8c <_ZN8SdVolume6fatPutEmm.part.3>
    if (!fatPut(*curCluster, bgnCluster)) return false;
    dffa:	2800      	cmp	r0, #0
    dffc:	d100      	bne.n	e000 <_ZN8SdVolume15allocContiguousEmPm+0x264>
    dffe:	e71a      	b.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
  *curCluster = bgnCluster;
    e000:	4652      	mov	r2, sl
    e002:	9b05      	ldr	r3, [sp, #20]
    e004:	601a      	str	r2, [r3, #0]
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    e006:	9b01      	ldr	r3, [sp, #4]
    e008:	2b00      	cmp	r3, #0
    e00a:	d012      	beq.n	e032 <_ZN8SdVolume15allocContiguousEmPm+0x296>
    e00c:	4653      	mov	r3, sl
    e00e:	3301      	adds	r3, #1
    e010:	6033      	str	r3, [r6, #0]
    e012:	9801      	ldr	r0, [sp, #4]
    e014:	e712      	b.n	de3c <_ZN8SdVolume15allocContiguousEmPm+0xa0>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    e016:	4b0d      	ldr	r3, [pc, #52]	; (e04c <_ZN8SdVolume15allocContiguousEmPm+0x2b0>)
    e018:	465a      	mov	r2, fp
    e01a:	681b      	ldr	r3, [r3, #0]
    e01c:	0018      	movs	r0, r3
    e01e:	9302      	str	r3, [sp, #8]
    e020:	f7ff f836 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e024:	2800      	cmp	r0, #0
    e026:	d100      	bne.n	e02a <_ZN8SdVolume15allocContiguousEmPm+0x28e>
    e028:	e705      	b.n	de36 <_ZN8SdVolume15allocContiguousEmPm+0x9a>
      cacheMirrorBlock_ = 0;
    e02a:	2300      	movs	r3, #0
    e02c:	4a08      	ldr	r2, [pc, #32]	; (e050 <_ZN8SdVolume15allocContiguousEmPm+0x2b4>)
    e02e:	6013      	str	r3, [r2, #0]
    e030:	e7c9      	b.n	dfc6 <_ZN8SdVolume15allocContiguousEmPm+0x22a>
  return true;
    e032:	3301      	adds	r3, #1
    e034:	9301      	str	r3, [sp, #4]
    e036:	0018      	movs	r0, r3
    e038:	e700      	b.n	de3c <_ZN8SdVolume15allocContiguousEmPm+0xa0>
    e03a:	4b02      	ldr	r3, [pc, #8]	; (e044 <_ZN8SdVolume15allocContiguousEmPm+0x2a8>)
    e03c:	469b      	mov	fp, r3
    e03e:	e721      	b.n	de84 <_ZN8SdVolume15allocContiguousEmPm+0xe8>
    e040:	2000004c 	.word	0x2000004c
    e044:	20000804 	.word	0x20000804
    e048:	20000800 	.word	0x20000800
    e04c:	20000a08 	.word	0x20000a08
    e050:	20000a04 	.word	0x20000a04
    e054:	0fffffff 	.word	0x0fffffff

0000e058 <_ZN8SdVolume10cacheFlushEv>:
uint8_t SdVolume::cacheFlush(void) {
    e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cacheDirty_) {
    e05a:	4c11      	ldr	r4, [pc, #68]	; (e0a0 <_ZN8SdVolume10cacheFlushEv+0x48>)
  return true;
    e05c:	2001      	movs	r0, #1
  if (cacheDirty_) {
    e05e:	7823      	ldrb	r3, [r4, #0]
    e060:	2b00      	cmp	r3, #0
    e062:	d100      	bne.n	e066 <_ZN8SdVolume10cacheFlushEv+0xe>
}
    e064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e066:	4d0f      	ldr	r5, [pc, #60]	; (e0a4 <_ZN8SdVolume10cacheFlushEv+0x4c>)
    e068:	4b0f      	ldr	r3, [pc, #60]	; (e0a8 <_ZN8SdVolume10cacheFlushEv+0x50>)
    e06a:	4e10      	ldr	r6, [pc, #64]	; (e0ac <_ZN8SdVolume10cacheFlushEv+0x54>)
    e06c:	6819      	ldr	r1, [r3, #0]
    e06e:	002a      	movs	r2, r5
    e070:	6830      	ldr	r0, [r6, #0]
    e072:	f7ff f80d 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e076:	2800      	cmp	r0, #0
    e078:	d010      	beq.n	e09c <_ZN8SdVolume10cacheFlushEv+0x44>
    if (cacheMirrorBlock_) {
    e07a:	4f0d      	ldr	r7, [pc, #52]	; (e0b0 <_ZN8SdVolume10cacheFlushEv+0x58>)
    e07c:	6839      	ldr	r1, [r7, #0]
    e07e:	2900      	cmp	r1, #0
    e080:	d103      	bne.n	e08a <_ZN8SdVolume10cacheFlushEv+0x32>
    cacheDirty_ = 0;
    e082:	2300      	movs	r3, #0
  return true;
    e084:	2001      	movs	r0, #1
    cacheDirty_ = 0;
    e086:	7023      	strb	r3, [r4, #0]
    e088:	e7ec      	b.n	e064 <_ZN8SdVolume10cacheFlushEv+0xc>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    e08a:	6830      	ldr	r0, [r6, #0]
    e08c:	002a      	movs	r2, r5
    e08e:	f7fe ffff 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e092:	2800      	cmp	r0, #0
    e094:	d002      	beq.n	e09c <_ZN8SdVolume10cacheFlushEv+0x44>
      cacheMirrorBlock_ = 0;
    e096:	2300      	movs	r3, #0
    e098:	603b      	str	r3, [r7, #0]
    e09a:	e7f2      	b.n	e082 <_ZN8SdVolume10cacheFlushEv+0x2a>
      return false;
    e09c:	2000      	movs	r0, #0
    e09e:	e7e1      	b.n	e064 <_ZN8SdVolume10cacheFlushEv+0xc>
    e0a0:	20000800 	.word	0x20000800
    e0a4:	20000804 	.word	0x20000804
    e0a8:	2000004c 	.word	0x2000004c
    e0ac:	20000a08 	.word	0x20000a08
    e0b0:	20000a04 	.word	0x20000a04

0000e0b4 <_ZN8SdVolume13cacheRawBlockEmh>:
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    e0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0b6:	464f      	mov	r7, r9
    e0b8:	4646      	mov	r6, r8
    e0ba:	46d6      	mov	lr, sl
    e0bc:	b5c0      	push	{r6, r7, lr}
  if (cacheBlockNumber_ != blockNumber) {
    e0be:	4e1f      	ldr	r6, [pc, #124]	; (e13c <_ZN8SdVolume13cacheRawBlockEmh+0x88>)
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    e0c0:	000f      	movs	r7, r1
  if (cacheBlockNumber_ != blockNumber) {
    e0c2:	6831      	ldr	r1, [r6, #0]
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    e0c4:	0005      	movs	r5, r0
  if (cacheDirty_) {
    e0c6:	4c1e      	ldr	r4, [pc, #120]	; (e140 <_ZN8SdVolume13cacheRawBlockEmh+0x8c>)
  if (cacheBlockNumber_ != blockNumber) {
    e0c8:	4281      	cmp	r1, r0
    e0ca:	d00f      	beq.n	e0ec <_ZN8SdVolume13cacheRawBlockEmh+0x38>
  if (cacheDirty_) {
    e0cc:	7823      	ldrb	r3, [r4, #0]
    e0ce:	2b00      	cmp	r3, #0
    e0d0:	d117      	bne.n	e102 <_ZN8SdVolume13cacheRawBlockEmh+0x4e>
    e0d2:	4b1c      	ldr	r3, [pc, #112]	; (e144 <_ZN8SdVolume13cacheRawBlockEmh+0x90>)
    e0d4:	4698      	mov	r8, r3
    e0d6:	4b1c      	ldr	r3, [pc, #112]	; (e148 <_ZN8SdVolume13cacheRawBlockEmh+0x94>)
    e0d8:	4699      	mov	r9, r3
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    e0da:	464b      	mov	r3, r9
    e0dc:	4642      	mov	r2, r8
    e0de:	6818      	ldr	r0, [r3, #0]
    e0e0:	0029      	movs	r1, r5
    e0e2:	f7fe fe79 	bl	cdd8 <_ZN7Sd2Card9readBlockEmPh>
    e0e6:	2800      	cmp	r0, #0
    e0e8:	d009      	beq.n	e0fe <_ZN8SdVolume13cacheRawBlockEmh+0x4a>
    cacheBlockNumber_ = blockNumber;
    e0ea:	6035      	str	r5, [r6, #0]
  return true;
    e0ec:	2001      	movs	r0, #1
  cacheDirty_ |= action;
    e0ee:	7821      	ldrb	r1, [r4, #0]
    e0f0:	4339      	orrs	r1, r7
    e0f2:	7021      	strb	r1, [r4, #0]
}
    e0f4:	bc1c      	pop	{r2, r3, r4}
    e0f6:	4690      	mov	r8, r2
    e0f8:	4699      	mov	r9, r3
    e0fa:	46a2      	mov	sl, r4
    e0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!cacheFlush()) return false;
    e0fe:	2000      	movs	r0, #0
    e100:	e7f8      	b.n	e0f4 <_ZN8SdVolume13cacheRawBlockEmh+0x40>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e102:	4b10      	ldr	r3, [pc, #64]	; (e144 <_ZN8SdVolume13cacheRawBlockEmh+0x90>)
    e104:	4698      	mov	r8, r3
    e106:	4b10      	ldr	r3, [pc, #64]	; (e148 <_ZN8SdVolume13cacheRawBlockEmh+0x94>)
    e108:	4642      	mov	r2, r8
    e10a:	6818      	ldr	r0, [r3, #0]
    e10c:	4699      	mov	r9, r3
    e10e:	f7fe ffbf 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e112:	2800      	cmp	r0, #0
    e114:	d0f3      	beq.n	e0fe <_ZN8SdVolume13cacheRawBlockEmh+0x4a>
    if (cacheMirrorBlock_) {
    e116:	4b0d      	ldr	r3, [pc, #52]	; (e14c <_ZN8SdVolume13cacheRawBlockEmh+0x98>)
    e118:	6819      	ldr	r1, [r3, #0]
    e11a:	469a      	mov	sl, r3
    e11c:	2900      	cmp	r1, #0
    e11e:	d102      	bne.n	e126 <_ZN8SdVolume13cacheRawBlockEmh+0x72>
    cacheDirty_ = 0;
    e120:	2300      	movs	r3, #0
    e122:	7023      	strb	r3, [r4, #0]
    e124:	e7d9      	b.n	e0da <_ZN8SdVolume13cacheRawBlockEmh+0x26>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    e126:	464b      	mov	r3, r9
    e128:	4642      	mov	r2, r8
    e12a:	6818      	ldr	r0, [r3, #0]
    e12c:	f7fe ffb0 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e130:	2800      	cmp	r0, #0
    e132:	d0e4      	beq.n	e0fe <_ZN8SdVolume13cacheRawBlockEmh+0x4a>
      cacheMirrorBlock_ = 0;
    e134:	2300      	movs	r3, #0
    e136:	4652      	mov	r2, sl
    e138:	6013      	str	r3, [r2, #0]
    e13a:	e7f1      	b.n	e120 <_ZN8SdVolume13cacheRawBlockEmh+0x6c>
    e13c:	2000004c 	.word	0x2000004c
    e140:	20000800 	.word	0x20000800
    e144:	20000804 	.word	0x20000804
    e148:	20000a08 	.word	0x20000a08
    e14c:	20000a04 	.word	0x20000a04

0000e150 <_ZN8SdVolume14cacheZeroBlockEm>:
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    e150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e152:	4647      	mov	r7, r8
    e154:	46ce      	mov	lr, r9
    e156:	b580      	push	{r7, lr}
  if (cacheDirty_) {
    e158:	4d18      	ldr	r5, [pc, #96]	; (e1bc <_ZN8SdVolume14cacheZeroBlockEm+0x6c>)
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    e15a:	0007      	movs	r7, r0
  if (cacheDirty_) {
    e15c:	782b      	ldrb	r3, [r5, #0]
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e15e:	4c18      	ldr	r4, [pc, #96]	; (e1c0 <_ZN8SdVolume14cacheZeroBlockEm+0x70>)
    e160:	4e18      	ldr	r6, [pc, #96]	; (e1c4 <_ZN8SdVolume14cacheZeroBlockEm+0x74>)
  if (cacheDirty_) {
    e162:	2b00      	cmp	r3, #0
    e164:	d10e      	bne.n	e184 <_ZN8SdVolume14cacheZeroBlockEm+0x34>
    e166:	2380      	movs	r3, #128	; 0x80
    e168:	009b      	lsls	r3, r3, #2
    e16a:	18e1      	adds	r1, r4, r3
    cacheBuffer_.data[i] = 0;
    e16c:	2300      	movs	r3, #0
    e16e:	c408      	stmia	r4!, {r3}
    e170:	428c      	cmp	r4, r1
    e172:	d1fc      	bne.n	e16e <_ZN8SdVolume14cacheZeroBlockEm+0x1e>
    e174:	2301      	movs	r3, #1
  return true;
    e176:	2001      	movs	r0, #1
  cacheBlockNumber_ = blockNumber;
    e178:	6037      	str	r7, [r6, #0]
    e17a:	702b      	strb	r3, [r5, #0]
}
    e17c:	bc0c      	pop	{r2, r3}
    e17e:	4690      	mov	r8, r2
    e180:	4699      	mov	r9, r3
    e182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e184:	4b10      	ldr	r3, [pc, #64]	; (e1c8 <_ZN8SdVolume14cacheZeroBlockEm+0x78>)
    e186:	0022      	movs	r2, r4
    e188:	6831      	ldr	r1, [r6, #0]
    e18a:	6818      	ldr	r0, [r3, #0]
    e18c:	4698      	mov	r8, r3
    e18e:	f7fe ff7f 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e192:	2800      	cmp	r0, #0
    e194:	d00f      	beq.n	e1b6 <_ZN8SdVolume14cacheZeroBlockEm+0x66>
    if (cacheMirrorBlock_) {
    e196:	4b0d      	ldr	r3, [pc, #52]	; (e1cc <_ZN8SdVolume14cacheZeroBlockEm+0x7c>)
    e198:	6819      	ldr	r1, [r3, #0]
    e19a:	4699      	mov	r9, r3
    e19c:	2900      	cmp	r1, #0
    e19e:	d0e2      	beq.n	e166 <_ZN8SdVolume14cacheZeroBlockEm+0x16>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    e1a0:	4643      	mov	r3, r8
    e1a2:	0022      	movs	r2, r4
    e1a4:	6818      	ldr	r0, [r3, #0]
    e1a6:	f7fe ff73 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e1aa:	2800      	cmp	r0, #0
    e1ac:	d003      	beq.n	e1b6 <_ZN8SdVolume14cacheZeroBlockEm+0x66>
      cacheMirrorBlock_ = 0;
    e1ae:	2300      	movs	r3, #0
    e1b0:	464a      	mov	r2, r9
    e1b2:	6013      	str	r3, [r2, #0]
    e1b4:	e7d7      	b.n	e166 <_ZN8SdVolume14cacheZeroBlockEm+0x16>
  if (!cacheFlush()) return false;
    e1b6:	2000      	movs	r0, #0
    e1b8:	e7e0      	b.n	e17c <_ZN8SdVolume14cacheZeroBlockEm+0x2c>
    e1ba:	46c0      	nop			; (mov r8, r8)
    e1bc:	20000800 	.word	0x20000800
    e1c0:	20000804 	.word	0x20000804
    e1c4:	2000004c 	.word	0x2000004c
    e1c8:	20000a08 	.word	0x20000a08
    e1cc:	20000a04 	.word	0x20000a04

0000e1d0 <_ZNK8SdVolume9chainSizeEmPm>:
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    e1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1d2:	46de      	mov	lr, fp
    e1d4:	4657      	mov	r7, sl
    e1d6:	464e      	mov	r6, r9
    e1d8:	4645      	mov	r5, r8
    e1da:	b5e0      	push	{r5, r6, r7, lr}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e1dc:	4b3f      	ldr	r3, [pc, #252]	; (e2dc <_ZNK8SdVolume9chainSizeEmPm+0x10c>)
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    e1de:	b083      	sub	sp, #12
    e1e0:	0006      	movs	r6, r0
    e1e2:	000c      	movs	r4, r1
    e1e4:	9201      	str	r2, [sp, #4]
  uint32_t s = 0;
    e1e6:	2700      	movs	r7, #0
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e1e8:	469b      	mov	fp, r3
    e1ea:	e01c      	b.n	e226 <_ZNK8SdVolume9chainSizeEmPm+0x56>
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e1ec:	2320      	movs	r3, #32
    e1ee:	5cf3      	ldrb	r3, [r6, r3]
  uint32_t lba = fatStartBlock_;
    e1f0:	69f5      	ldr	r5, [r6, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e1f2:	2b10      	cmp	r3, #16
    e1f4:	d023      	beq.n	e23e <_ZNK8SdVolume9chainSizeEmPm+0x6e>
    e1f6:	09e3      	lsrs	r3, r4, #7
    e1f8:	195d      	adds	r5, r3, r5
  if (lba != cacheBlockNumber_) {
    e1fa:	4b39      	ldr	r3, [pc, #228]	; (e2e0 <_ZNK8SdVolume9chainSizeEmPm+0x110>)
    e1fc:	6819      	ldr	r1, [r3, #0]
    e1fe:	4699      	mov	r9, r3
    e200:	42a9      	cmp	r1, r5
    e202:	d123      	bne.n	e24c <_ZNK8SdVolume9chainSizeEmPm+0x7c>
    e204:	4b37      	ldr	r3, [pc, #220]	; (e2e4 <_ZNK8SdVolume9chainSizeEmPm+0x114>)
    e206:	4698      	mov	r8, r3
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    e208:	237f      	movs	r3, #127	; 0x7f
    e20a:	401c      	ands	r4, r3
    e20c:	4643      	mov	r3, r8
    e20e:	00a4      	lsls	r4, r4, #2
    e210:	591c      	ldr	r4, [r3, r4]
    s += 512UL << clusterSizeShift_;
    e212:	2380      	movs	r3, #128	; 0x80
    e214:	7c32      	ldrb	r2, [r6, #16]
    e216:	009b      	lsls	r3, r3, #2
    e218:	4093      	lsls	r3, r2
    e21a:	18ff      	adds	r7, r7, r3
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    e21c:	4b32      	ldr	r3, [pc, #200]	; (e2e8 <_ZNK8SdVolume9chainSizeEmPm+0x118>)
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    e21e:	0124      	lsls	r4, r4, #4
    e220:	0924      	lsrs	r4, r4, #4
  do {
    e222:	42a3      	cmp	r3, r4
    e224:	d935      	bls.n	e292 <_ZNK8SdVolume9chainSizeEmPm+0xc2>
  if (cluster > (clusterCount_ + 1)) return false;
    e226:	68f3      	ldr	r3, [r6, #12]
    e228:	3301      	adds	r3, #1
    e22a:	42a3      	cmp	r3, r4
    e22c:	d2de      	bcs.n	e1ec <_ZNK8SdVolume9chainSizeEmPm+0x1c>
    if (!fatGet(cluster, &cluster)) return false;
    e22e:	2000      	movs	r0, #0
}
    e230:	b003      	add	sp, #12
    e232:	bc3c      	pop	{r2, r3, r4, r5}
    e234:	4690      	mov	r8, r2
    e236:	4699      	mov	r9, r3
    e238:	46a2      	mov	sl, r4
    e23a:	46ab      	mov	fp, r5
    e23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e23e:	0a23      	lsrs	r3, r4, #8
    e240:	195d      	adds	r5, r3, r5
  if (lba != cacheBlockNumber_) {
    e242:	4b27      	ldr	r3, [pc, #156]	; (e2e0 <_ZNK8SdVolume9chainSizeEmPm+0x110>)
    e244:	6819      	ldr	r1, [r3, #0]
    e246:	4699      	mov	r9, r3
    e248:	42a9      	cmp	r1, r5
    e24a:	d043      	beq.n	e2d4 <_ZNK8SdVolume9chainSizeEmPm+0x104>
  if (cacheDirty_) {
    e24c:	4b27      	ldr	r3, [pc, #156]	; (e2ec <_ZNK8SdVolume9chainSizeEmPm+0x11c>)
    e24e:	781b      	ldrb	r3, [r3, #0]
    e250:	2b00      	cmp	r3, #0
    e252:	d122      	bne.n	e29a <_ZNK8SdVolume9chainSizeEmPm+0xca>
    e254:	4b23      	ldr	r3, [pc, #140]	; (e2e4 <_ZNK8SdVolume9chainSizeEmPm+0x114>)
    e256:	4698      	mov	r8, r3
    e258:	4b20      	ldr	r3, [pc, #128]	; (e2dc <_ZNK8SdVolume9chainSizeEmPm+0x10c>)
    e25a:	469a      	mov	sl, r3
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    e25c:	4653      	mov	r3, sl
    e25e:	4642      	mov	r2, r8
    e260:	6818      	ldr	r0, [r3, #0]
    e262:	0029      	movs	r1, r5
    e264:	f7fe fdb8 	bl	cdd8 <_ZN7Sd2Card9readBlockEmPh>
    e268:	2800      	cmp	r0, #0
    e26a:	d0e0      	beq.n	e22e <_ZNK8SdVolume9chainSizeEmPm+0x5e>
    cacheBlockNumber_ = blockNumber;
    e26c:	464b      	mov	r3, r9
    e26e:	601d      	str	r5, [r3, #0]
  if (fatType_ == 16) {
    e270:	2320      	movs	r3, #32
    e272:	5cf3      	ldrb	r3, [r6, r3]
    e274:	2b10      	cmp	r3, #16
    e276:	d1c7      	bne.n	e208 <_ZNK8SdVolume9chainSizeEmPm+0x38>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    e278:	23ff      	movs	r3, #255	; 0xff
    e27a:	401c      	ands	r4, r3
    e27c:	4643      	mov	r3, r8
    e27e:	0064      	lsls	r4, r4, #1
    e280:	5b1c      	ldrh	r4, [r3, r4]
    s += 512UL << clusterSizeShift_;
    e282:	2380      	movs	r3, #128	; 0x80
    e284:	7c32      	ldrb	r2, [r6, #16]
    e286:	009b      	lsls	r3, r3, #2
    e288:	4093      	lsls	r3, r2
    e28a:	18ff      	adds	r7, r7, r3
    e28c:	4b18      	ldr	r3, [pc, #96]	; (e2f0 <_ZNK8SdVolume9chainSizeEmPm+0x120>)
  do {
    e28e:	42a3      	cmp	r3, r4
    e290:	d8c9      	bhi.n	e226 <_ZNK8SdVolume9chainSizeEmPm+0x56>
  *size = s;
    e292:	9b01      	ldr	r3, [sp, #4]
  return true;
    e294:	2001      	movs	r0, #1
  *size = s;
    e296:	601f      	str	r7, [r3, #0]
  return true;
    e298:	e7ca      	b.n	e230 <_ZNK8SdVolume9chainSizeEmPm+0x60>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e29a:	4b12      	ldr	r3, [pc, #72]	; (e2e4 <_ZNK8SdVolume9chainSizeEmPm+0x114>)
    e29c:	46da      	mov	sl, fp
    e29e:	4698      	mov	r8, r3
    e2a0:	001a      	movs	r2, r3
    e2a2:	465b      	mov	r3, fp
    e2a4:	6818      	ldr	r0, [r3, #0]
    e2a6:	f7fe fef3 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e2aa:	2800      	cmp	r0, #0
    e2ac:	d0bf      	beq.n	e22e <_ZNK8SdVolume9chainSizeEmPm+0x5e>
    if (cacheMirrorBlock_) {
    e2ae:	4b11      	ldr	r3, [pc, #68]	; (e2f4 <_ZNK8SdVolume9chainSizeEmPm+0x124>)
    e2b0:	6819      	ldr	r1, [r3, #0]
    e2b2:	2900      	cmp	r1, #0
    e2b4:	d103      	bne.n	e2be <_ZNK8SdVolume9chainSizeEmPm+0xee>
    cacheDirty_ = 0;
    e2b6:	2300      	movs	r3, #0
    e2b8:	4a0c      	ldr	r2, [pc, #48]	; (e2ec <_ZNK8SdVolume9chainSizeEmPm+0x11c>)
    e2ba:	7013      	strb	r3, [r2, #0]
    e2bc:	e7ce      	b.n	e25c <_ZNK8SdVolume9chainSizeEmPm+0x8c>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    e2be:	465b      	mov	r3, fp
    e2c0:	4a08      	ldr	r2, [pc, #32]	; (e2e4 <_ZNK8SdVolume9chainSizeEmPm+0x114>)
    e2c2:	6818      	ldr	r0, [r3, #0]
    e2c4:	f7fe fee4 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e2c8:	2800      	cmp	r0, #0
    e2ca:	d0b0      	beq.n	e22e <_ZNK8SdVolume9chainSizeEmPm+0x5e>
      cacheMirrorBlock_ = 0;
    e2cc:	2300      	movs	r3, #0
    e2ce:	4a09      	ldr	r2, [pc, #36]	; (e2f4 <_ZNK8SdVolume9chainSizeEmPm+0x124>)
    e2d0:	6013      	str	r3, [r2, #0]
    e2d2:	e7f0      	b.n	e2b6 <_ZNK8SdVolume9chainSizeEmPm+0xe6>
    e2d4:	4b03      	ldr	r3, [pc, #12]	; (e2e4 <_ZNK8SdVolume9chainSizeEmPm+0x114>)
    e2d6:	4698      	mov	r8, r3
    e2d8:	e7ce      	b.n	e278 <_ZNK8SdVolume9chainSizeEmPm+0xa8>
    e2da:	46c0      	nop			; (mov r8, r8)
    e2dc:	20000a08 	.word	0x20000a08
    e2e0:	2000004c 	.word	0x2000004c
    e2e4:	20000804 	.word	0x20000804
    e2e8:	0ffffff8 	.word	0x0ffffff8
    e2ec:	20000800 	.word	0x20000800
    e2f0:	0000fff8 	.word	0x0000fff8
    e2f4:	20000a04 	.word	0x20000a04

0000e2f8 <_ZNK8SdVolume6fatGetEmPm>:
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    e2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2fa:	4657      	mov	r7, sl
    e2fc:	4645      	mov	r5, r8
    e2fe:	46de      	mov	lr, fp
    e300:	464e      	mov	r6, r9
  if (cluster > (clusterCount_ + 1)) return false;
    e302:	68c3      	ldr	r3, [r0, #12]
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    e304:	b5e0      	push	{r5, r6, r7, lr}
  if (cluster > (clusterCount_ + 1)) return false;
    e306:	3301      	adds	r3, #1
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    e308:	0004      	movs	r4, r0
    e30a:	000d      	movs	r5, r1
    e30c:	0017      	movs	r7, r2
  if (cluster > (clusterCount_ + 1)) return false;
    e30e:	428b      	cmp	r3, r1
    e310:	d326      	bcc.n	e360 <_ZNK8SdVolume6fatGetEmPm+0x68>
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e312:	2320      	movs	r3, #32
    e314:	5cc3      	ldrb	r3, [r0, r3]
  uint32_t lba = fatStartBlock_;
    e316:	69c6      	ldr	r6, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e318:	2b10      	cmp	r3, #16
    e31a:	d023      	beq.n	e364 <_ZNK8SdVolume6fatGetEmPm+0x6c>
    e31c:	09cb      	lsrs	r3, r1, #7
    e31e:	199e      	adds	r6, r3, r6
  if (lba != cacheBlockNumber_) {
    e320:	4b2e      	ldr	r3, [pc, #184]	; (e3dc <_ZNK8SdVolume6fatGetEmPm+0xe4>)
    e322:	6819      	ldr	r1, [r3, #0]
    e324:	4698      	mov	r8, r3
    e326:	42b1      	cmp	r1, r6
    e328:	d123      	bne.n	e372 <_ZNK8SdVolume6fatGetEmPm+0x7a>
    e32a:	4b2d      	ldr	r3, [pc, #180]	; (e3e0 <_ZNK8SdVolume6fatGetEmPm+0xe8>)
    e32c:	4699      	mov	r9, r3
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    e32e:	237f      	movs	r3, #127	; 0x7f
    e330:	401d      	ands	r5, r3
    e332:	464b      	mov	r3, r9
    e334:	2001      	movs	r0, #1
    e336:	00ad      	lsls	r5, r5, #2
    e338:	595b      	ldr	r3, [r3, r5]
    e33a:	011b      	lsls	r3, r3, #4
    e33c:	091b      	lsrs	r3, r3, #4
    e33e:	603b      	str	r3, [r7, #0]
}
    e340:	bc3c      	pop	{r2, r3, r4, r5}
    e342:	4690      	mov	r8, r2
    e344:	4699      	mov	r9, r3
    e346:	46a2      	mov	sl, r4
    e348:	46ab      	mov	fp, r5
    e34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e34c:	4b24      	ldr	r3, [pc, #144]	; (e3e0 <_ZNK8SdVolume6fatGetEmPm+0xe8>)
    e34e:	4699      	mov	r9, r3
    e350:	4b24      	ldr	r3, [pc, #144]	; (e3e4 <_ZNK8SdVolume6fatGetEmPm+0xec>)
    e352:	464a      	mov	r2, r9
    e354:	6818      	ldr	r0, [r3, #0]
    e356:	469a      	mov	sl, r3
    e358:	f7fe fe9a 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e35c:	2800      	cmp	r0, #0
    e35e:	d127      	bne.n	e3b0 <_ZNK8SdVolume6fatGetEmPm+0xb8>
  if (cluster > (clusterCount_ + 1)) return false;
    e360:	2000      	movs	r0, #0
    e362:	e7ed      	b.n	e340 <_ZNK8SdVolume6fatGetEmPm+0x48>
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e364:	0a0b      	lsrs	r3, r1, #8
    e366:	199e      	adds	r6, r3, r6
  if (lba != cacheBlockNumber_) {
    e368:	4b1c      	ldr	r3, [pc, #112]	; (e3dc <_ZNK8SdVolume6fatGetEmPm+0xe4>)
    e36a:	6819      	ldr	r1, [r3, #0]
    e36c:	4698      	mov	r8, r3
    e36e:	42b1      	cmp	r1, r6
    e370:	d031      	beq.n	e3d6 <_ZNK8SdVolume6fatGetEmPm+0xde>
  if (cacheDirty_) {
    e372:	4b1d      	ldr	r3, [pc, #116]	; (e3e8 <_ZNK8SdVolume6fatGetEmPm+0xf0>)
    e374:	469b      	mov	fp, r3
    e376:	781b      	ldrb	r3, [r3, #0]
    e378:	2b00      	cmp	r3, #0
    e37a:	d1e7      	bne.n	e34c <_ZNK8SdVolume6fatGetEmPm+0x54>
    e37c:	4b18      	ldr	r3, [pc, #96]	; (e3e0 <_ZNK8SdVolume6fatGetEmPm+0xe8>)
    e37e:	4699      	mov	r9, r3
    e380:	4b18      	ldr	r3, [pc, #96]	; (e3e4 <_ZNK8SdVolume6fatGetEmPm+0xec>)
    e382:	469a      	mov	sl, r3
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    e384:	4653      	mov	r3, sl
    e386:	464a      	mov	r2, r9
    e388:	6818      	ldr	r0, [r3, #0]
    e38a:	0031      	movs	r1, r6
    e38c:	f7fe fd24 	bl	cdd8 <_ZN7Sd2Card9readBlockEmPh>
    e390:	2800      	cmp	r0, #0
    e392:	d0e5      	beq.n	e360 <_ZNK8SdVolume6fatGetEmPm+0x68>
    cacheBlockNumber_ = blockNumber;
    e394:	4643      	mov	r3, r8
    e396:	601e      	str	r6, [r3, #0]
  if (fatType_ == 16) {
    e398:	2320      	movs	r3, #32
    e39a:	5ce3      	ldrb	r3, [r4, r3]
    e39c:	2b10      	cmp	r3, #16
    e39e:	d1c6      	bne.n	e32e <_ZNK8SdVolume6fatGetEmPm+0x36>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    e3a0:	23ff      	movs	r3, #255	; 0xff
    e3a2:	401d      	ands	r5, r3
    e3a4:	464b      	mov	r3, r9
    e3a6:	006d      	lsls	r5, r5, #1
    e3a8:	5b5b      	ldrh	r3, [r3, r5]
    e3aa:	2001      	movs	r0, #1
    e3ac:	603b      	str	r3, [r7, #0]
    e3ae:	e7c7      	b.n	e340 <_ZNK8SdVolume6fatGetEmPm+0x48>
    if (cacheMirrorBlock_) {
    e3b0:	4b0e      	ldr	r3, [pc, #56]	; (e3ec <_ZNK8SdVolume6fatGetEmPm+0xf4>)
    e3b2:	6819      	ldr	r1, [r3, #0]
    e3b4:	2900      	cmp	r1, #0
    e3b6:	d103      	bne.n	e3c0 <_ZNK8SdVolume6fatGetEmPm+0xc8>
    cacheDirty_ = 0;
    e3b8:	2300      	movs	r3, #0
    e3ba:	465a      	mov	r2, fp
    e3bc:	7013      	strb	r3, [r2, #0]
    e3be:	e7e1      	b.n	e384 <_ZNK8SdVolume6fatGetEmPm+0x8c>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    e3c0:	4653      	mov	r3, sl
    e3c2:	464a      	mov	r2, r9
    e3c4:	6818      	ldr	r0, [r3, #0]
    e3c6:	f7fe fe63 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e3ca:	2800      	cmp	r0, #0
    e3cc:	d0c8      	beq.n	e360 <_ZNK8SdVolume6fatGetEmPm+0x68>
      cacheMirrorBlock_ = 0;
    e3ce:	2300      	movs	r3, #0
    e3d0:	4a06      	ldr	r2, [pc, #24]	; (e3ec <_ZNK8SdVolume6fatGetEmPm+0xf4>)
    e3d2:	6013      	str	r3, [r2, #0]
    e3d4:	e7f0      	b.n	e3b8 <_ZNK8SdVolume6fatGetEmPm+0xc0>
    e3d6:	4b02      	ldr	r3, [pc, #8]	; (e3e0 <_ZNK8SdVolume6fatGetEmPm+0xe8>)
    e3d8:	4699      	mov	r9, r3
    e3da:	e7e1      	b.n	e3a0 <_ZNK8SdVolume6fatGetEmPm+0xa8>
    e3dc:	2000004c 	.word	0x2000004c
    e3e0:	20000804 	.word	0x20000804
    e3e4:	20000a08 	.word	0x20000a08
    e3e8:	20000800 	.word	0x20000800
    e3ec:	20000a04 	.word	0x20000a04

0000e3f0 <_ZN8SdVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    e3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3f2:	4645      	mov	r5, r8
    e3f4:	46de      	mov	lr, fp
    e3f6:	4657      	mov	r7, sl
    e3f8:	464e      	mov	r6, r9
  // clear free cluster location
  allocSearchStart_ = 2;
    e3fa:	2302      	movs	r3, #2
uint8_t SdVolume::freeChain(uint32_t cluster) {
    e3fc:	b5e0      	push	{r5, r6, r7, lr}
    e3fe:	000c      	movs	r4, r1
    e400:	b083      	sub	sp, #12
    e402:	0005      	movs	r5, r0
  allocSearchStart_ = 2;
    e404:	6003      	str	r3, [r0, #0]
    e406:	e043      	b.n	e490 <_ZN8SdVolume9freeChainEm+0xa0>
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e408:	2320      	movs	r3, #32
    e40a:	5cea      	ldrb	r2, [r5, r3]
  uint32_t lba = fatStartBlock_;
    e40c:	69ee      	ldr	r6, [r5, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e40e:	2a10      	cmp	r2, #16
    e410:	d100      	bne.n	e414 <_ZN8SdVolume9freeChainEm+0x24>
    e412:	e073      	b.n	e4fc <_ZN8SdVolume9freeChainEm+0x10c>
    e414:	09e3      	lsrs	r3, r4, #7
    e416:	199e      	adds	r6, r3, r6
  if (lba != cacheBlockNumber_) {
    e418:	4b6f      	ldr	r3, [pc, #444]	; (e5d8 <_ZN8SdVolume9freeChainEm+0x1e8>)
    e41a:	6819      	ldr	r1, [r3, #0]
    e41c:	4698      	mov	r8, r3
    e41e:	42b1      	cmp	r1, r6
    e420:	d000      	beq.n	e424 <_ZN8SdVolume9freeChainEm+0x34>
    e422:	e072      	b.n	e50a <_ZN8SdVolume9freeChainEm+0x11a>
    e424:	4b6d      	ldr	r3, [pc, #436]	; (e5dc <_ZN8SdVolume9freeChainEm+0x1ec>)
    e426:	469a      	mov	sl, r3
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    e428:	237f      	movs	r3, #127	; 0x7f
    e42a:	4651      	mov	r1, sl
    e42c:	4023      	ands	r3, r4
    e42e:	009b      	lsls	r3, r3, #2
    e430:	58cf      	ldr	r7, [r1, r3]
    e432:	013f      	lsls	r7, r7, #4
    e434:	093f      	lsrs	r7, r7, #4
  if (cluster < 2) return false;
    e436:	2c01      	cmp	r4, #1
    e438:	d92e      	bls.n	e498 <_ZN8SdVolume9freeChainEm+0xa8>
  if (cluster > (clusterCount_ + 1)) return false;
    e43a:	68eb      	ldr	r3, [r5, #12]
    e43c:	3301      	adds	r3, #1
    e43e:	429c      	cmp	r4, r3
    e440:	d82a      	bhi.n	e498 <_ZN8SdVolume9freeChainEm+0xa8>
  uint32_t lba = fatStartBlock_;
    e442:	69ee      	ldr	r6, [r5, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e444:	2a10      	cmp	r2, #16
    e446:	d035      	beq.n	e4b4 <_ZN8SdVolume9freeChainEm+0xc4>
    e448:	09e3      	lsrs	r3, r4, #7
    e44a:	199e      	adds	r6, r3, r6
  if (lba != cacheBlockNumber_) {
    e44c:	4643      	mov	r3, r8
    e44e:	6819      	ldr	r1, [r3, #0]
    e450:	428e      	cmp	r6, r1
    e452:	d136      	bne.n	e4c2 <_ZN8SdVolume9freeChainEm+0xd2>
    e454:	4b62      	ldr	r3, [pc, #392]	; (e5e0 <_ZN8SdVolume9freeChainEm+0x1f0>)
    e456:	4699      	mov	r9, r3
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    e458:	237f      	movs	r3, #127	; 0x7f
    e45a:	4652      	mov	r2, sl
    e45c:	401c      	ands	r4, r3
    e45e:	2300      	movs	r3, #0
    e460:	00a4      	lsls	r4, r4, #2
    e462:	5113      	str	r3, [r2, r4]
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    e464:	464b      	mov	r3, r9
    e466:	2201      	movs	r2, #1
    e468:	781b      	ldrb	r3, [r3, #0]
    e46a:	4313      	orrs	r3, r2
    e46c:	464a      	mov	r2, r9
    e46e:	7013      	strb	r3, [r2, #0]
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    e470:	7e2b      	ldrb	r3, [r5, #24]
    e472:	2b01      	cmp	r3, #1
    e474:	dd04      	ble.n	e480 <_ZN8SdVolume9freeChainEm+0x90>
    e476:	68ab      	ldr	r3, [r5, #8]
    e478:	469c      	mov	ip, r3
    e47a:	4b5a      	ldr	r3, [pc, #360]	; (e5e4 <_ZN8SdVolume9freeChainEm+0x1f4>)
    e47c:	4461      	add	r1, ip
    e47e:	6019      	str	r1, [r3, #0]
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    e480:	2320      	movs	r3, #32
    e482:	5ceb      	ldrb	r3, [r5, r3]
    e484:	2b10      	cmp	r3, #16
    e486:	d00f      	beq.n	e4a8 <_ZN8SdVolume9freeChainEm+0xb8>
    e488:	4b57      	ldr	r3, [pc, #348]	; (e5e8 <_ZN8SdVolume9freeChainEm+0x1f8>)
    e48a:	003c      	movs	r4, r7

  do {
    e48c:	429f      	cmp	r7, r3
    e48e:	d20f      	bcs.n	e4b0 <_ZN8SdVolume9freeChainEm+0xc0>
  if (cluster > (clusterCount_ + 1)) return false;
    e490:	68eb      	ldr	r3, [r5, #12]
    e492:	3301      	adds	r3, #1
    e494:	429c      	cmp	r4, r3
    e496:	d9b7      	bls.n	e408 <_ZN8SdVolume9freeChainEm+0x18>
    e498:	2000      	movs	r0, #0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    e49a:	b003      	add	sp, #12
    e49c:	bc3c      	pop	{r2, r3, r4, r5}
    e49e:	4690      	mov	r8, r2
    e4a0:	4699      	mov	r9, r3
    e4a2:	46a2      	mov	sl, r4
    e4a4:	46ab      	mov	fp, r5
    e4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4a8:	4b50      	ldr	r3, [pc, #320]	; (e5ec <_ZN8SdVolume9freeChainEm+0x1fc>)
    e4aa:	003c      	movs	r4, r7
  do {
    e4ac:	429f      	cmp	r7, r3
    e4ae:	d3ef      	bcc.n	e490 <_ZN8SdVolume9freeChainEm+0xa0>
  return true;
    e4b0:	2001      	movs	r0, #1
    e4b2:	e7f2      	b.n	e49a <_ZN8SdVolume9freeChainEm+0xaa>
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e4b4:	0a23      	lsrs	r3, r4, #8
    e4b6:	199e      	adds	r6, r3, r6
  if (lba != cacheBlockNumber_) {
    e4b8:	4643      	mov	r3, r8
    e4ba:	6819      	ldr	r1, [r3, #0]
    e4bc:	428e      	cmp	r6, r1
    e4be:	d100      	bne.n	e4c2 <_ZN8SdVolume9freeChainEm+0xd2>
    e4c0:	e084      	b.n	e5cc <_ZN8SdVolume9freeChainEm+0x1dc>
  if (cacheDirty_) {
    e4c2:	4b47      	ldr	r3, [pc, #284]	; (e5e0 <_ZN8SdVolume9freeChainEm+0x1f0>)
    e4c4:	4699      	mov	r9, r3
    e4c6:	781b      	ldrb	r3, [r3, #0]
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d13c      	bne.n	e546 <_ZN8SdVolume9freeChainEm+0x156>
    e4cc:	4b48      	ldr	r3, [pc, #288]	; (e5f0 <_ZN8SdVolume9freeChainEm+0x200>)
    e4ce:	469b      	mov	fp, r3
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    e4d0:	465b      	mov	r3, fp
    e4d2:	4652      	mov	r2, sl
    e4d4:	6818      	ldr	r0, [r3, #0]
    e4d6:	0031      	movs	r1, r6
    e4d8:	f7fe fc7e 	bl	cdd8 <_ZN7Sd2Card9readBlockEmPh>
    e4dc:	2800      	cmp	r0, #0
    e4de:	d0db      	beq.n	e498 <_ZN8SdVolume9freeChainEm+0xa8>
    cacheBlockNumber_ = blockNumber;
    e4e0:	4643      	mov	r3, r8
    e4e2:	601e      	str	r6, [r3, #0]
  if (fatType_ == 16) {
    e4e4:	2320      	movs	r3, #32
    e4e6:	5ceb      	ldrb	r3, [r5, r3]
    e4e8:	2b10      	cmp	r3, #16
    e4ea:	d13c      	bne.n	e566 <_ZN8SdVolume9freeChainEm+0x176>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    e4ec:	23ff      	movs	r3, #255	; 0xff
    e4ee:	4652      	mov	r2, sl
    e4f0:	401c      	ands	r4, r3
    e4f2:	2300      	movs	r3, #0
    e4f4:	0064      	lsls	r4, r4, #1
    e4f6:	5313      	strh	r3, [r2, r4]
    e4f8:	0031      	movs	r1, r6
    e4fa:	e7b3      	b.n	e464 <_ZN8SdVolume9freeChainEm+0x74>
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    e4fc:	0a23      	lsrs	r3, r4, #8
    e4fe:	199e      	adds	r6, r3, r6
  if (lba != cacheBlockNumber_) {
    e500:	4b35      	ldr	r3, [pc, #212]	; (e5d8 <_ZN8SdVolume9freeChainEm+0x1e8>)
    e502:	6819      	ldr	r1, [r3, #0]
    e504:	4698      	mov	r8, r3
    e506:	42b1      	cmp	r1, r6
    e508:	d063      	beq.n	e5d2 <_ZN8SdVolume9freeChainEm+0x1e2>
  if (cacheDirty_) {
    e50a:	4b35      	ldr	r3, [pc, #212]	; (e5e0 <_ZN8SdVolume9freeChainEm+0x1f0>)
    e50c:	781b      	ldrb	r3, [r3, #0]
    e50e:	2b00      	cmp	r3, #0
    e510:	d12b      	bne.n	e56a <_ZN8SdVolume9freeChainEm+0x17a>
    e512:	4b32      	ldr	r3, [pc, #200]	; (e5dc <_ZN8SdVolume9freeChainEm+0x1ec>)
    e514:	469a      	mov	sl, r3
    e516:	4b36      	ldr	r3, [pc, #216]	; (e5f0 <_ZN8SdVolume9freeChainEm+0x200>)
    e518:	469b      	mov	fp, r3
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    e51a:	465b      	mov	r3, fp
    e51c:	4652      	mov	r2, sl
    e51e:	6818      	ldr	r0, [r3, #0]
    e520:	0031      	movs	r1, r6
    e522:	f7fe fc59 	bl	cdd8 <_ZN7Sd2Card9readBlockEmPh>
    e526:	2800      	cmp	r0, #0
    e528:	d0b6      	beq.n	e498 <_ZN8SdVolume9freeChainEm+0xa8>
    cacheBlockNumber_ = blockNumber;
    e52a:	4643      	mov	r3, r8
    e52c:	601e      	str	r6, [r3, #0]
  if (fatType_ == 16) {
    e52e:	2320      	movs	r3, #32
    e530:	5cea      	ldrb	r2, [r5, r3]
    e532:	2a10      	cmp	r2, #16
    e534:	d000      	beq.n	e538 <_ZN8SdVolume9freeChainEm+0x148>
    e536:	e777      	b.n	e428 <_ZN8SdVolume9freeChainEm+0x38>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    e538:	23ff      	movs	r3, #255	; 0xff
    e53a:	4652      	mov	r2, sl
    e53c:	4023      	ands	r3, r4
    e53e:	005b      	lsls	r3, r3, #1
    e540:	5ad7      	ldrh	r7, [r2, r3]
    e542:	2210      	movs	r2, #16
    e544:	e777      	b.n	e436 <_ZN8SdVolume9freeChainEm+0x46>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e546:	4b2a      	ldr	r3, [pc, #168]	; (e5f0 <_ZN8SdVolume9freeChainEm+0x200>)
    e548:	4652      	mov	r2, sl
    e54a:	6818      	ldr	r0, [r3, #0]
    e54c:	469b      	mov	fp, r3
    e54e:	f7fe fd9f 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e552:	2800      	cmp	r0, #0
    e554:	d0a0      	beq.n	e498 <_ZN8SdVolume9freeChainEm+0xa8>
    if (cacheMirrorBlock_) {
    e556:	4b23      	ldr	r3, [pc, #140]	; (e5e4 <_ZN8SdVolume9freeChainEm+0x1f4>)
    e558:	6819      	ldr	r1, [r3, #0]
    e55a:	2900      	cmp	r1, #0
    e55c:	d11a      	bne.n	e594 <_ZN8SdVolume9freeChainEm+0x1a4>
    cacheDirty_ = 0;
    e55e:	2300      	movs	r3, #0
    e560:	464a      	mov	r2, r9
    e562:	7013      	strb	r3, [r2, #0]
    e564:	e7b4      	b.n	e4d0 <_ZN8SdVolume9freeChainEm+0xe0>
  if (fatType_ == 16) {
    e566:	0031      	movs	r1, r6
    e568:	e776      	b.n	e458 <_ZN8SdVolume9freeChainEm+0x68>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e56a:	4b1c      	ldr	r3, [pc, #112]	; (e5dc <_ZN8SdVolume9freeChainEm+0x1ec>)
    e56c:	469a      	mov	sl, r3
    e56e:	4b20      	ldr	r3, [pc, #128]	; (e5f0 <_ZN8SdVolume9freeChainEm+0x200>)
    e570:	4652      	mov	r2, sl
    e572:	469b      	mov	fp, r3
    e574:	681b      	ldr	r3, [r3, #0]
    e576:	0018      	movs	r0, r3
    e578:	9301      	str	r3, [sp, #4]
    e57a:	f7fe fd89 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e57e:	2800      	cmp	r0, #0
    e580:	d100      	bne.n	e584 <_ZN8SdVolume9freeChainEm+0x194>
    e582:	e789      	b.n	e498 <_ZN8SdVolume9freeChainEm+0xa8>
    if (cacheMirrorBlock_) {
    e584:	4f17      	ldr	r7, [pc, #92]	; (e5e4 <_ZN8SdVolume9freeChainEm+0x1f4>)
    e586:	6839      	ldr	r1, [r7, #0]
    e588:	2900      	cmp	r1, #0
    e58a:	d112      	bne.n	e5b2 <_ZN8SdVolume9freeChainEm+0x1c2>
    cacheDirty_ = 0;
    e58c:	2300      	movs	r3, #0
    e58e:	4a14      	ldr	r2, [pc, #80]	; (e5e0 <_ZN8SdVolume9freeChainEm+0x1f0>)
    e590:	7013      	strb	r3, [r2, #0]
    e592:	e7c2      	b.n	e51a <_ZN8SdVolume9freeChainEm+0x12a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    e594:	465b      	mov	r3, fp
    e596:	4652      	mov	r2, sl
    e598:	6818      	ldr	r0, [r3, #0]
    e59a:	f7fe fd79 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e59e:	2800      	cmp	r0, #0
    e5a0:	d100      	bne.n	e5a4 <_ZN8SdVolume9freeChainEm+0x1b4>
    e5a2:	e779      	b.n	e498 <_ZN8SdVolume9freeChainEm+0xa8>
      cacheMirrorBlock_ = 0;
    e5a4:	2300      	movs	r3, #0
    e5a6:	4a0f      	ldr	r2, [pc, #60]	; (e5e4 <_ZN8SdVolume9freeChainEm+0x1f4>)
    e5a8:	6013      	str	r3, [r2, #0]
    cacheDirty_ = 0;
    e5aa:	2300      	movs	r3, #0
    e5ac:	464a      	mov	r2, r9
    e5ae:	7013      	strb	r3, [r2, #0]
    e5b0:	e78e      	b.n	e4d0 <_ZN8SdVolume9freeChainEm+0xe0>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    e5b2:	4b0f      	ldr	r3, [pc, #60]	; (e5f0 <_ZN8SdVolume9freeChainEm+0x200>)
    e5b4:	4a09      	ldr	r2, [pc, #36]	; (e5dc <_ZN8SdVolume9freeChainEm+0x1ec>)
    e5b6:	681b      	ldr	r3, [r3, #0]
    e5b8:	0018      	movs	r0, r3
    e5ba:	9301      	str	r3, [sp, #4]
    e5bc:	f7fe fd68 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e5c0:	2800      	cmp	r0, #0
    e5c2:	d100      	bne.n	e5c6 <_ZN8SdVolume9freeChainEm+0x1d6>
    e5c4:	e768      	b.n	e498 <_ZN8SdVolume9freeChainEm+0xa8>
      cacheMirrorBlock_ = 0;
    e5c6:	2300      	movs	r3, #0
    e5c8:	603b      	str	r3, [r7, #0]
    e5ca:	e7df      	b.n	e58c <_ZN8SdVolume9freeChainEm+0x19c>
    e5cc:	4b04      	ldr	r3, [pc, #16]	; (e5e0 <_ZN8SdVolume9freeChainEm+0x1f0>)
    e5ce:	4699      	mov	r9, r3
    e5d0:	e78c      	b.n	e4ec <_ZN8SdVolume9freeChainEm+0xfc>
    e5d2:	4b02      	ldr	r3, [pc, #8]	; (e5dc <_ZN8SdVolume9freeChainEm+0x1ec>)
    e5d4:	469a      	mov	sl, r3
    e5d6:	e7af      	b.n	e538 <_ZN8SdVolume9freeChainEm+0x148>
    e5d8:	2000004c 	.word	0x2000004c
    e5dc:	20000804 	.word	0x20000804
    e5e0:	20000800 	.word	0x20000800
    e5e4:	20000a04 	.word	0x20000a04
    e5e8:	0ffffff8 	.word	0x0ffffff8
    e5ec:	0000fff8 	.word	0x0000fff8
    e5f0:	20000a08 	.word	0x20000a08

0000e5f4 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    e5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5f6:	464f      	mov	r7, r9
    e5f8:	46d6      	mov	lr, sl
    e5fa:	4646      	mov	r6, r8
    e5fc:	b5c0      	push	{r6, r7, lr}
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    e5fe:	4d8f      	ldr	r5, [pc, #572]	; (e83c <_ZN8SdVolume4initEP7Sd2Cardh+0x248>)
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    e600:	0007      	movs	r7, r0
    e602:	b082      	sub	sp, #8
    e604:	0008      	movs	r0, r1
    e606:	1e14      	subs	r4, r2, #0
  sdCard_ = dev;
    e608:	6029      	str	r1, [r5, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    e60a:	d01e      	beq.n	e64a <_ZN8SdVolume4initEP7Sd2Cardh+0x56>
    if (part > 4)return false;
    e60c:	2a04      	cmp	r2, #4
    e60e:	dd06      	ble.n	e61e <_ZN8SdVolume4initEP7Sd2Cardh+0x2a>
    e610:	2000      	movs	r0, #0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    e612:	b002      	add	sp, #8
    e614:	bc1c      	pop	{r2, r3, r4}
    e616:	4690      	mov	r8, r2
    e618:	4699      	mov	r9, r3
    e61a:	46a2      	mov	sl, r4
    e61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cacheBlockNumber_ != blockNumber) {
    e61e:	4b88      	ldr	r3, [pc, #544]	; (e840 <_ZN8SdVolume4initEP7Sd2Cardh+0x24c>)
    e620:	6819      	ldr	r1, [r3, #0]
    e622:	4698      	mov	r8, r3
    e624:	2900      	cmp	r1, #0
    e626:	d054      	beq.n	e6d2 <_ZN8SdVolume4initEP7Sd2Cardh+0xde>
  if (cacheDirty_) {
    e628:	4b86      	ldr	r3, [pc, #536]	; (e844 <_ZN8SdVolume4initEP7Sd2Cardh+0x250>)
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e62a:	4e87      	ldr	r6, [pc, #540]	; (e848 <_ZN8SdVolume4initEP7Sd2Cardh+0x254>)
  if (cacheDirty_) {
    e62c:	4699      	mov	r9, r3
    e62e:	781b      	ldrb	r3, [r3, #0]
    e630:	2b00      	cmp	r3, #0
    e632:	d000      	beq.n	e636 <_ZN8SdVolume4initEP7Sd2Cardh+0x42>
    e634:	e08a      	b.n	e74c <_ZN8SdVolume4initEP7Sd2Cardh+0x158>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    e636:	0032      	movs	r2, r6
    e638:	2100      	movs	r1, #0
    e63a:	f7fe fbcd 	bl	cdd8 <_ZN7Sd2Card9readBlockEmPh>
    e63e:	2800      	cmp	r0, #0
    e640:	d0e6      	beq.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
    cacheBlockNumber_ = blockNumber;
    e642:	2300      	movs	r3, #0
    e644:	4642      	mov	r2, r8
    e646:	6013      	str	r3, [r2, #0]
    e648:	e044      	b.n	e6d4 <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    e64a:	4b7d      	ldr	r3, [pc, #500]	; (e840 <_ZN8SdVolume4initEP7Sd2Cardh+0x24c>)
    e64c:	6819      	ldr	r1, [r3, #0]
    e64e:	4698      	mov	r8, r3
  if (cacheBlockNumber_ != blockNumber) {
    e650:	2900      	cmp	r1, #0
    e652:	d158      	bne.n	e706 <_ZN8SdVolume4initEP7Sd2Cardh+0x112>
    e654:	4e7c      	ldr	r6, [pc, #496]	; (e848 <_ZN8SdVolume4initEP7Sd2Cardh+0x254>)
  if (bpb->bytesPerSector != 512 ||
    e656:	2280      	movs	r2, #128	; 0x80
    e658:	7b33      	ldrb	r3, [r6, #12]
    e65a:	7af0      	ldrb	r0, [r6, #11]
    e65c:	021b      	lsls	r3, r3, #8
    e65e:	0092      	lsls	r2, r2, #2
    e660:	4303      	orrs	r3, r0
    e662:	4293      	cmp	r3, r2
    e664:	d1d4      	bne.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
    bpb->fatCount == 0 ||
    e666:	7c32      	ldrb	r2, [r6, #16]
  if (bpb->bytesPerSector != 512 ||
    e668:	2a00      	cmp	r2, #0
    e66a:	d0d1      	beq.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
    bpb->reservedSectorCount == 0 ||
    e66c:	89f0      	ldrh	r0, [r6, #14]
    bpb->fatCount == 0 ||
    e66e:	2800      	cmp	r0, #0
    e670:	d0ce      	beq.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
    bpb->sectorsPerCluster == 0) {
    e672:	7b73      	ldrb	r3, [r6, #13]
    bpb->reservedSectorCount == 0 ||
    e674:	2b00      	cmp	r3, #0
    e676:	d0cb      	beq.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
  clusterSizeShift_ = 0;
    e678:	2400      	movs	r4, #0
  fatCount_ = bpb->fatCount;
    e67a:	763a      	strb	r2, [r7, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;
    e67c:	713b      	strb	r3, [r7, #4]
  clusterSizeShift_ = 0;
    e67e:	743c      	strb	r4, [r7, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e680:	2b01      	cmp	r3, #1
    e682:	d100      	bne.n	e686 <_ZN8SdVolume4initEP7Sd2Cardh+0x92>
    e684:	e088      	b.n	e798 <_ZN8SdVolume4initEP7Sd2Cardh+0x1a4>
    if (clusterSizeShift_++ > 7) return false;
    e686:	3401      	adds	r4, #1
    e688:	743c      	strb	r4, [r7, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e68a:	2b02      	cmp	r3, #2
    e68c:	d100      	bne.n	e690 <_ZN8SdVolume4initEP7Sd2Cardh+0x9c>
    e68e:	e0c0      	b.n	e812 <_ZN8SdVolume4initEP7Sd2Cardh+0x21e>
    if (clusterSizeShift_++ > 7) return false;
    e690:	3401      	adds	r4, #1
    e692:	743c      	strb	r4, [r7, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e694:	2b04      	cmp	r3, #4
    e696:	d100      	bne.n	e69a <_ZN8SdVolume4initEP7Sd2Cardh+0xa6>
    e698:	e0c1      	b.n	e81e <_ZN8SdVolume4initEP7Sd2Cardh+0x22a>
    if (clusterSizeShift_++ > 7) return false;
    e69a:	3401      	adds	r4, #1
    e69c:	743c      	strb	r4, [r7, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e69e:	2b08      	cmp	r3, #8
    e6a0:	d100      	bne.n	e6a4 <_ZN8SdVolume4initEP7Sd2Cardh+0xb0>
    e6a2:	e0b9      	b.n	e818 <_ZN8SdVolume4initEP7Sd2Cardh+0x224>
    if (clusterSizeShift_++ > 7) return false;
    e6a4:	3401      	adds	r4, #1
    e6a6:	743c      	strb	r4, [r7, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e6a8:	2b10      	cmp	r3, #16
    e6aa:	d100      	bne.n	e6ae <_ZN8SdVolume4initEP7Sd2Cardh+0xba>
    e6ac:	e0c3      	b.n	e836 <_ZN8SdVolume4initEP7Sd2Cardh+0x242>
    if (clusterSizeShift_++ > 7) return false;
    e6ae:	3401      	adds	r4, #1
    e6b0:	743c      	strb	r4, [r7, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e6b2:	2b20      	cmp	r3, #32
    e6b4:	d100      	bne.n	e6b8 <_ZN8SdVolume4initEP7Sd2Cardh+0xc4>
    e6b6:	e0bb      	b.n	e830 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
    if (clusterSizeShift_++ > 7) return false;
    e6b8:	3401      	adds	r4, #1
    e6ba:	743c      	strb	r4, [r7, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e6bc:	2b40      	cmp	r3, #64	; 0x40
    e6be:	d100      	bne.n	e6c2 <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    e6c0:	e0b3      	b.n	e82a <_ZN8SdVolume4initEP7Sd2Cardh+0x236>
    if (clusterSizeShift_++ > 7) return false;
    e6c2:	3401      	adds	r4, #1
    e6c4:	743c      	strb	r4, [r7, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e6c6:	2b80      	cmp	r3, #128	; 0x80
    e6c8:	d100      	bne.n	e6cc <_ZN8SdVolume4initEP7Sd2Cardh+0xd8>
    e6ca:	e0ab      	b.n	e824 <_ZN8SdVolume4initEP7Sd2Cardh+0x230>
    if (clusterSizeShift_++ > 7) return false;
    e6cc:	2309      	movs	r3, #9
    e6ce:	743b      	strb	r3, [r7, #16]
    e6d0:	e79e      	b.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
    e6d2:	4e5d      	ldr	r6, [pc, #372]	; (e848 <_ZN8SdVolume4initEP7Sd2Cardh+0x254>)
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    e6d4:	1e63      	subs	r3, r4, #1
    if ((p->boot & 0X7F) !=0  ||
    e6d6:	011b      	lsls	r3, r3, #4
    e6d8:	18f3      	adds	r3, r6, r3
    e6da:	33bf      	adds	r3, #191	; 0xbf
    e6dc:	33ff      	adds	r3, #255	; 0xff
    e6de:	781b      	ldrb	r3, [r3, #0]
    e6e0:	065b      	lsls	r3, r3, #25
    e6e2:	d195      	bne.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
      p->totalSectors < 100 ||
    e6e4:	341b      	adds	r4, #27
    e6e6:	0124      	lsls	r4, r4, #4
    e6e8:	1934      	adds	r4, r6, r4
    e6ea:	89a3      	ldrh	r3, [r4, #12]
    e6ec:	8962      	ldrh	r2, [r4, #10]
    e6ee:	041b      	lsls	r3, r3, #16
    e6f0:	4313      	orrs	r3, r2
    if ((p->boot & 0X7F) !=0  ||
    e6f2:	2b63      	cmp	r3, #99	; 0x63
    e6f4:	d800      	bhi.n	e6f8 <_ZN8SdVolume4initEP7Sd2Cardh+0x104>
    e6f6:	e78b      	b.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
      p->firstSector == 0) {
    e6f8:	88e3      	ldrh	r3, [r4, #6]
    e6fa:	8924      	ldrh	r4, [r4, #8]
    e6fc:	2100      	movs	r1, #0
    e6fe:	0424      	lsls	r4, r4, #16
    e700:	431c      	orrs	r4, r3
      p->totalSectors < 100 ||
    e702:	d102      	bne.n	e70a <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    e704:	e784      	b.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
  if (cacheBlockNumber_ != blockNumber) {
    e706:	2400      	movs	r4, #0
    e708:	4e4f      	ldr	r6, [pc, #316]	; (e848 <_ZN8SdVolume4initEP7Sd2Cardh+0x254>)
  if (cacheDirty_) {
    e70a:	4b4e      	ldr	r3, [pc, #312]	; (e844 <_ZN8SdVolume4initEP7Sd2Cardh+0x250>)
    e70c:	4699      	mov	r9, r3
    e70e:	781b      	ldrb	r3, [r3, #0]
    e710:	2b00      	cmp	r3, #0
    e712:	d10b      	bne.n	e72c <_ZN8SdVolume4initEP7Sd2Cardh+0x138>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    e714:	6828      	ldr	r0, [r5, #0]
    e716:	0032      	movs	r2, r6
    e718:	0021      	movs	r1, r4
    e71a:	f7fe fb5d 	bl	cdd8 <_ZN7Sd2Card9readBlockEmPh>
    e71e:	2800      	cmp	r0, #0
    e720:	d100      	bne.n	e724 <_ZN8SdVolume4initEP7Sd2Cardh+0x130>
    e722:	e775      	b.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
    cacheBlockNumber_ = blockNumber;
    e724:	4643      	mov	r3, r8
    e726:	0021      	movs	r1, r4
    e728:	601c      	str	r4, [r3, #0]
    e72a:	e794      	b.n	e656 <_ZN8SdVolume4initEP7Sd2Cardh+0x62>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e72c:	0032      	movs	r2, r6
    e72e:	6828      	ldr	r0, [r5, #0]
    e730:	f7fe fcae 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e734:	2800      	cmp	r0, #0
    e736:	d100      	bne.n	e73a <_ZN8SdVolume4initEP7Sd2Cardh+0x146>
    e738:	e76a      	b.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
    if (cacheMirrorBlock_) {
    e73a:	4b44      	ldr	r3, [pc, #272]	; (e84c <_ZN8SdVolume4initEP7Sd2Cardh+0x258>)
    e73c:	6819      	ldr	r1, [r3, #0]
    e73e:	469a      	mov	sl, r3
    e740:	2900      	cmp	r1, #0
    e742:	d113      	bne.n	e76c <_ZN8SdVolume4initEP7Sd2Cardh+0x178>
    cacheDirty_ = 0;
    e744:	2300      	movs	r3, #0
    e746:	464a      	mov	r2, r9
    e748:	7013      	strb	r3, [r2, #0]
    e74a:	e7e3      	b.n	e714 <_ZN8SdVolume4initEP7Sd2Cardh+0x120>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e74c:	0032      	movs	r2, r6
    e74e:	f7fe fc9f 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e752:	2800      	cmp	r0, #0
    e754:	d100      	bne.n	e758 <_ZN8SdVolume4initEP7Sd2Cardh+0x164>
    e756:	e75b      	b.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
    if (cacheMirrorBlock_) {
    e758:	4b3c      	ldr	r3, [pc, #240]	; (e84c <_ZN8SdVolume4initEP7Sd2Cardh+0x258>)
    e75a:	6819      	ldr	r1, [r3, #0]
    e75c:	469a      	mov	sl, r3
    e75e:	2900      	cmp	r1, #0
    e760:	d10f      	bne.n	e782 <_ZN8SdVolume4initEP7Sd2Cardh+0x18e>
    cacheDirty_ = 0;
    e762:	2300      	movs	r3, #0
    e764:	464a      	mov	r2, r9
    e766:	6828      	ldr	r0, [r5, #0]
    e768:	7013      	strb	r3, [r2, #0]
    e76a:	e764      	b.n	e636 <_ZN8SdVolume4initEP7Sd2Cardh+0x42>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    e76c:	0032      	movs	r2, r6
    e76e:	6828      	ldr	r0, [r5, #0]
    e770:	f7fe fc8e 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e774:	2800      	cmp	r0, #0
    e776:	d100      	bne.n	e77a <_ZN8SdVolume4initEP7Sd2Cardh+0x186>
    e778:	e74a      	b.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
      cacheMirrorBlock_ = 0;
    e77a:	2300      	movs	r3, #0
    e77c:	4652      	mov	r2, sl
    e77e:	6013      	str	r3, [r2, #0]
    e780:	e7e0      	b.n	e744 <_ZN8SdVolume4initEP7Sd2Cardh+0x150>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    e782:	0032      	movs	r2, r6
    e784:	6828      	ldr	r0, [r5, #0]
    e786:	f7fe fc83 	bl	d090 <_ZN7Sd2Card10writeBlockEmPKh>
    e78a:	2800      	cmp	r0, #0
    e78c:	d100      	bne.n	e790 <_ZN8SdVolume4initEP7Sd2Cardh+0x19c>
    e78e:	e73f      	b.n	e610 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c>
      cacheMirrorBlock_ = 0;
    e790:	2300      	movs	r3, #0
    e792:	4652      	mov	r2, sl
    e794:	6013      	str	r3, [r2, #0]
    e796:	e7e4      	b.n	e762 <_ZN8SdVolume4initEP7Sd2Cardh+0x16e>
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e798:	2300      	movs	r3, #0
    e79a:	4698      	mov	r8, r3
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    e79c:	8af5      	ldrh	r5, [r6, #22]
    e79e:	2d00      	cmp	r5, #0
    e7a0:	d100      	bne.n	e7a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x1b0>
    e7a2:	6a75      	ldr	r5, [r6, #36]	; 0x24
  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    e7a4:	1840      	adds	r0, r0, r1
    e7a6:	61f8      	str	r0, [r7, #28]
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    e7a8:	60bd      	str	r5, [r7, #8]
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    e7aa:	6934      	ldr	r4, [r6, #16]
    e7ac:	466b      	mov	r3, sp
    e7ae:	0224      	lsls	r4, r4, #8
    e7b0:	0c24      	lsrs	r4, r4, #16
    e7b2:	46a4      	mov	ip, r4
    e7b4:	80dc      	strh	r4, [r3, #6]
    e7b6:	4663      	mov	r3, ip
    e7b8:	847b      	strh	r3, [r7, #34]	; 0x22
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    e7ba:	4b25      	ldr	r3, [pc, #148]	; (e850 <_ZN8SdVolume4initEP7Sd2Cardh+0x25c>)
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    e7bc:	436a      	muls	r2, r5
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    e7be:	469c      	mov	ip, r3
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    e7c0:	b2a4      	uxth	r4, r4
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    e7c2:	1812      	adds	r2, r2, r0
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    e7c4:	0160      	lsls	r0, r4, #5
    e7c6:	4460      	add	r0, ip
    e7c8:	1240      	asrs	r0, r0, #9
    e7ca:	1880      	adds	r0, r0, r2
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    e7cc:	627a      	str	r2, [r7, #36]	; 0x24
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    e7ce:	6178      	str	r0, [r7, #20]
  uint32_t totalBlocks = bpb->totalSectors16 ?
    e7d0:	7d32      	ldrb	r2, [r6, #20]
    e7d2:	7cf4      	ldrb	r4, [r6, #19]
    e7d4:	0212      	lsls	r2, r2, #8
    e7d6:	4322      	orrs	r2, r4
    e7d8:	d100      	bne.n	e7dc <_ZN8SdVolume4initEP7Sd2Cardh+0x1e8>
    e7da:	6a32      	ldr	r2, [r6, #32]
  clusterCount_ >>= clusterSizeShift_;
    e7dc:	4643      	mov	r3, r8
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    e7de:	1a09      	subs	r1, r1, r0
    e7e0:	1889      	adds	r1, r1, r2
  clusterCount_ >>= clusterSizeShift_;
    e7e2:	40d9      	lsrs	r1, r3
  if (clusterCount_ < 4085) {
    e7e4:	4b1b      	ldr	r3, [pc, #108]	; (e854 <_ZN8SdVolume4initEP7Sd2Cardh+0x260>)
  clusterCount_ >>= clusterSizeShift_;
    e7e6:	60f9      	str	r1, [r7, #12]
  if (clusterCount_ < 4085) {
    e7e8:	4299      	cmp	r1, r3
    e7ea:	d908      	bls.n	e7fe <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
  } else if (clusterCount_ < 65525) {
    e7ec:	4b1a      	ldr	r3, [pc, #104]	; (e858 <_ZN8SdVolume4initEP7Sd2Cardh+0x264>)
    e7ee:	4299      	cmp	r1, r3
    e7f0:	d90a      	bls.n	e808 <_ZN8SdVolume4initEP7Sd2Cardh+0x214>
    rootDirStart_ = bpb->fat32RootCluster;
    e7f2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  return true;
    e7f4:	2001      	movs	r0, #1
    rootDirStart_ = bpb->fat32RootCluster;
    e7f6:	627b      	str	r3, [r7, #36]	; 0x24
    fatType_ = 32;
    e7f8:	2320      	movs	r3, #32
    e7fa:	54fb      	strb	r3, [r7, r3]
    e7fc:	e709      	b.n	e612 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e>
    fatType_ = 12;
    e7fe:	220c      	movs	r2, #12
    e800:	2320      	movs	r3, #32
  return true;
    e802:	2001      	movs	r0, #1
    fatType_ = 12;
    e804:	54fa      	strb	r2, [r7, r3]
    e806:	e704      	b.n	e612 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e>
    fatType_ = 16;
    e808:	2210      	movs	r2, #16
    e80a:	2320      	movs	r3, #32
  return true;
    e80c:	2001      	movs	r0, #1
    fatType_ = 16;
    e80e:	54fa      	strb	r2, [r7, r3]
    e810:	e6ff      	b.n	e612 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e>
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e812:	2301      	movs	r3, #1
    e814:	4698      	mov	r8, r3
    e816:	e7c1      	b.n	e79c <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    e818:	2303      	movs	r3, #3
    e81a:	4698      	mov	r8, r3
    e81c:	e7be      	b.n	e79c <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    e81e:	2302      	movs	r3, #2
    e820:	4698      	mov	r8, r3
    e822:	e7bb      	b.n	e79c <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    e824:	2307      	movs	r3, #7
    e826:	4698      	mov	r8, r3
    e828:	e7b8      	b.n	e79c <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    e82a:	2306      	movs	r3, #6
    e82c:	4698      	mov	r8, r3
    e82e:	e7b5      	b.n	e79c <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    e830:	2305      	movs	r3, #5
    e832:	4698      	mov	r8, r3
    e834:	e7b2      	b.n	e79c <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    e836:	2304      	movs	r3, #4
    e838:	4698      	mov	r8, r3
    e83a:	e7af      	b.n	e79c <_ZN8SdVolume4initEP7Sd2Cardh+0x1a8>
    e83c:	20000a08 	.word	0x20000a08
    e840:	2000004c 	.word	0x2000004c
    e844:	20000800 	.word	0x20000800
    e848:	20000804 	.word	0x20000804
    e84c:	20000a04 	.word	0x20000a04
    e850:	000001ff 	.word	0x000001ff
    e854:	00000ff4 	.word	0x00000ff4
    e858:	0000fff4 	.word	0x0000fff4

0000e85c <_ZN8SPIClass5beginEv>:
  _padTx=PadTx;
  _padRx=PadRx;
}

void SPIClass::begin()
{
    e85c:	b5f0      	push	{r4, r5, r6, r7, lr}
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    e85e:	7a43      	ldrb	r3, [r0, #9]
{
    e860:	b083      	sub	sp, #12
    e862:	0004      	movs	r4, r0
  if (initialized)
    e864:	2b00      	cmp	r3, #0
    e866:	d104      	bne.n	e872 <_ZN8SPIClass5beginEv+0x16>
    return;
  interruptMode = SPI_IMODE_NONE;
    e868:	7283      	strb	r3, [r0, #10]
  interruptSave = 0;
    e86a:	72c3      	strb	r3, [r0, #11]
  interruptMask = 0;
    e86c:	60c3      	str	r3, [r0, #12]
  initialized = true;
    e86e:	3301      	adds	r3, #1
    e870:	7243      	strb	r3, [r0, #9]
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    e872:	2108      	movs	r1, #8
    e874:	7920      	ldrb	r0, [r4, #4]
    e876:	4d19      	ldr	r5, [pc, #100]	; (e8dc <_ZN8SPIClass5beginEv+0x80>)
    e878:	0043      	lsls	r3, r0, #1
    e87a:	181b      	adds	r3, r3, r0
    e87c:	00db      	lsls	r3, r3, #3
    e87e:	18eb      	adds	r3, r5, r3
    e880:	5659      	ldrsb	r1, [r3, r1]
    e882:	f7f6 f9d3 	bl	4c2c <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
    e886:	2108      	movs	r1, #8
    e888:	79a0      	ldrb	r0, [r4, #6]
    e88a:	0043      	lsls	r3, r0, #1
    e88c:	181b      	adds	r3, r3, r0
    e88e:	00db      	lsls	r3, r3, #3
    e890:	18eb      	adds	r3, r5, r3
    e892:	5659      	ldrsb	r1, [r3, r1]
    e894:	f7f6 f9ca 	bl	4c2c <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
    e898:	2108      	movs	r1, #8
    e89a:	7960      	ldrb	r0, [r4, #5]
    e89c:	0043      	lsls	r3, r0, #1
    e89e:	181b      	adds	r3, r3, r0
    e8a0:	00db      	lsls	r3, r3, #3
    e8a2:	18ed      	adds	r5, r5, r3
    e8a4:	5669      	ldrsb	r1, [r5, r1]
    e8a6:	f7f6 f9c1 	bl	4c2c <pinPeripheral>
    e8aa:	4b0d      	ldr	r3, [pc, #52]	; (e8e0 <_ZN8SPIClass5beginEv+0x84>)
}

void SPIClass::config(SPISettings settings)
{
  _p_sercom->disableSPI();
    e8ac:	6820      	ldr	r0, [r4, #0]
    e8ae:	795f      	ldrb	r7, [r3, #5]
    e8b0:	681e      	ldr	r6, [r3, #0]
    e8b2:	791d      	ldrb	r5, [r3, #4]
    e8b4:	f001 fb54 	bl	ff60 <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    e8b8:	2300      	movs	r3, #0
    e8ba:	7a22      	ldrb	r2, [r4, #8]
    e8bc:	79e1      	ldrb	r1, [r4, #7]
    e8be:	6820      	ldr	r0, [r4, #0]
    e8c0:	9700      	str	r7, [sp, #0]
    e8c2:	f001 fce3 	bl	1028c <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    e8c6:	0032      	movs	r2, r6
    e8c8:	0029      	movs	r1, r5
    e8ca:	6820      	ldr	r0, [r4, #0]
    e8cc:	f001 fb28 	bl	ff20 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    e8d0:	6820      	ldr	r0, [r4, #0]
    e8d2:	f001 fb3b 	bl	ff4c <_ZN6SERCOM9enableSPIEv>
}
    e8d6:	b003      	add	sp, #12
    e8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8da:	46c0      	nop			; (mov r8, r8)
    e8dc:	00010e00 	.word	0x00010e00
    e8e0:	20000a1c 	.word	0x20000a1c

0000e8e4 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    e8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8e6:	b085      	sub	sp, #20
    e8e8:	ab02      	add	r3, sp, #8
    e8ea:	9102      	str	r1, [sp, #8]
    e8ec:	605a      	str	r2, [r3, #4]
  if (interruptMode != SPI_IMODE_NONE)
    e8ee:	7a82      	ldrb	r2, [r0, #10]
{
    e8f0:	0004      	movs	r4, r0
  if (interruptMode != SPI_IMODE_NONE)
    e8f2:	2a00      	cmp	r2, #0
    e8f4:	d006      	beq.n	e904 <_ZN8SPIClass16beginTransactionE11SPISettings+0x20>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    e8f6:	0791      	lsls	r1, r2, #30
    e8f8:	d41b      	bmi.n	e932 <_ZN8SPIClass16beginTransactionE11SPISettings+0x4e>
    {
      interruptSave = interruptsStatus();
      noInterrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
    e8fa:	07d2      	lsls	r2, r2, #31
    e8fc:	d502      	bpl.n	e904 <_ZN8SPIClass16beginTransactionE11SPISettings+0x20>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    e8fe:	8981      	ldrh	r1, [r0, #12]
    e900:	4a0f      	ldr	r2, [pc, #60]	; (e940 <_ZN8SPIClass16beginTransactionE11SPISettings+0x5c>)
    e902:	6091      	str	r1, [r2, #8]
    e904:	795f      	ldrb	r7, [r3, #5]
    e906:	791d      	ldrb	r5, [r3, #4]
    e908:	9e02      	ldr	r6, [sp, #8]
  _p_sercom->disableSPI();
    e90a:	6820      	ldr	r0, [r4, #0]
    e90c:	f001 fb28 	bl	ff60 <_ZN6SERCOM10disableSPIEv>
  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    e910:	2300      	movs	r3, #0
    e912:	7a22      	ldrb	r2, [r4, #8]
    e914:	79e1      	ldrb	r1, [r4, #7]
    e916:	6820      	ldr	r0, [r4, #0]
    e918:	9700      	str	r7, [sp, #0]
    e91a:	f001 fcb7 	bl	1028c <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    e91e:	0032      	movs	r2, r6
    e920:	0029      	movs	r1, r5
    e922:	6820      	ldr	r0, [r4, #0]
    e924:	f001 fafc 	bl	ff20 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>
  _p_sercom->enableSPI();
    e928:	6820      	ldr	r0, [r4, #0]
    e92a:	f001 fb0f 	bl	ff4c <_ZN6SERCOM9enableSPIEv>
  }

  config(settings);
}
    e92e:	b005      	add	sp, #20
    e930:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e932:	f3ef 8110 	mrs	r1, PRIMASK
  return (__get_PRIMASK() ? 0 : 1);
    e936:	424a      	negs	r2, r1
    e938:	414a      	adcs	r2, r1
      interruptSave = interruptsStatus();
    e93a:	72c2      	strb	r2, [r0, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    e93c:	b672      	cpsid	i
    e93e:	e7e1      	b.n	e904 <_ZN8SPIClass16beginTransactionE11SPISettings+0x20>
    e940:	40001800 	.word	0x40001800

0000e944 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
  if (interruptMode != SPI_IMODE_NONE)
    e944:	7a83      	ldrb	r3, [r0, #10]
    e946:	2b00      	cmp	r3, #0
    e948:	d005      	beq.n	e956 <_ZN8SPIClass14endTransactionEv+0x12>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    e94a:	079a      	lsls	r2, r3, #30
    e94c:	d504      	bpl.n	e958 <_ZN8SPIClass14endTransactionEv+0x14>
    {
      if (interruptSave)
    e94e:	7ac3      	ldrb	r3, [r0, #11]
    e950:	2b00      	cmp	r3, #0
    e952:	d000      	beq.n	e956 <_ZN8SPIClass14endTransactionEv+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
    e954:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    e956:	4770      	bx	lr
    else if (interruptMode & SPI_IMODE_EXTINT)
    e958:	07db      	lsls	r3, r3, #31
    e95a:	d5fc      	bpl.n	e956 <_ZN8SPIClass14endTransactionEv+0x12>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    e95c:	8982      	ldrh	r2, [r0, #12]
    e95e:	4b01      	ldr	r3, [pc, #4]	; (e964 <_ZN8SPIClass14endTransactionEv+0x20>)
    e960:	60da      	str	r2, [r3, #12]
}
    e962:	e7f8      	b.n	e956 <_ZN8SPIClass14endTransactionEv+0x12>
    e964:	40001800 	.word	0x40001800

0000e968 <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    e968:	b510      	push	{r4, lr}
  return _p_sercom->transferDataSPI(data);
    e96a:	6800      	ldr	r0, [r0, #0]
    e96c:	f001 fb02 	bl	ff74 <_ZN6SERCOM15transferDataSPIEh>
}
    e970:	bd10      	pop	{r4, pc}
    e972:	46c0      	nop			; (mov r8, r8)

0000e974 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    e974:	4b09      	ldr	r3, [pc, #36]	; (e99c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x28>)
    e976:	4a0a      	ldr	r2, [pc, #40]	; (e9a0 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2c>)
  _p_sercom = p_sercom;
    e978:	490a      	ldr	r1, [pc, #40]	; (e9a4 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x30>)
    e97a:	601a      	str	r2, [r3, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    e97c:	2200      	movs	r2, #0
    e97e:	715a      	strb	r2, [r3, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    e980:	711a      	strb	r2, [r3, #4]
  initialized = false;
    e982:	4b09      	ldr	r3, [pc, #36]	; (e9a8 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x34>)
  _p_sercom = p_sercom;
    e984:	6019      	str	r1, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
    e986:	2112      	movs	r1, #18
    e988:	7119      	strb	r1, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    e98a:	3102      	adds	r1, #2
    e98c:	7199      	strb	r1, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    e98e:	3101      	adds	r1, #1
    e990:	7159      	strb	r1, [r3, #5]
  _padTx=PadTx;
    e992:	3914      	subs	r1, #20
  initialized = false;
    e994:	725a      	strb	r2, [r3, #9]
  _padTx=PadTx;
    e996:	71d9      	strb	r1, [r3, #7]
  _padRx=PadRx;
    e998:	721a      	strb	r2, [r3, #8]
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    e99a:	4770      	bx	lr
    e99c:	20000a1c 	.word	0x20000a1c
    e9a0:	003d0900 	.word	0x003d0900
    e9a4:	20000de0 	.word	0x20000de0
    e9a8:	20000a0c 	.word	0x20000a0c

0000e9ac <_ZN7TwoWire9availableEv>:
  int delta = _iHead - _iTail;
    e9ac:	238c      	movs	r3, #140	; 0x8c
    e9ae:	228e      	movs	r2, #142	; 0x8e
    e9b0:	005b      	lsls	r3, r3, #1
    e9b2:	0052      	lsls	r2, r2, #1
    e9b4:	58c3      	ldr	r3, [r0, r3]
    e9b6:	5880      	ldr	r0, [r0, r2]
    e9b8:	1a18      	subs	r0, r3, r0
  if(delta < 0)
    e9ba:	d501      	bpl.n	e9c0 <_ZN7TwoWire9availableEv+0x14>
    return N + delta;
    e9bc:	3001      	adds	r0, #1
    e9be:	30ff      	adds	r0, #255	; 0xff
}

int TwoWire::available(void)
{
  return rxBuffer.available();
}
    e9c0:	4770      	bx	lr
    e9c2:	46c0      	nop			; (mov r8, r8)

0000e9c4 <_ZN7TwoWire4readEv>:
  if(_iTail == _iHead)
    e9c4:	238e      	movs	r3, #142	; 0x8e
    e9c6:	228c      	movs	r2, #140	; 0x8c
    e9c8:	005b      	lsls	r3, r3, #1
    e9ca:	0052      	lsls	r2, r2, #1
    e9cc:	58c1      	ldr	r1, [r0, r3]
    e9ce:	5882      	ldr	r2, [r0, r2]

int TwoWire::read(void)
{
    e9d0:	b510      	push	{r4, lr}
    e9d2:	4291      	cmp	r1, r2
    e9d4:	d009      	beq.n	e9ea <_ZN7TwoWire4readEv+0x26>
  return (uint32_t)(index + 1) % N;
    e9d6:	21ff      	movs	r1, #255	; 0xff
  uint8_t value = _aucBuffer[_iTail];
    e9d8:	58c2      	ldr	r2, [r0, r3]
  _iTail = nextIndex(_iTail);
    e9da:	58c4      	ldr	r4, [r0, r3]
  uint8_t value = _aucBuffer[_iTail];
    e9dc:	1882      	adds	r2, r0, r2
    e9de:	7e12      	ldrb	r2, [r2, #24]
  return (uint32_t)(index + 1) % N;
    e9e0:	3401      	adds	r4, #1
    e9e2:	4021      	ands	r1, r4
  _iTail = nextIndex(_iTail);
    e9e4:	50c1      	str	r1, [r0, r3]
  return value;
    e9e6:	0010      	movs	r0, r2
  return rxBuffer.read_char();
}
    e9e8:	bd10      	pop	{r4, pc}
    return -1;
    e9ea:	2001      	movs	r0, #1
    e9ec:	4240      	negs	r0, r0
  return rxBuffer.read_char();
    e9ee:	e7fb      	b.n	e9e8 <_ZN7TwoWire4readEv+0x24>

0000e9f0 <_ZN7TwoWire4peekEv>:
  if(_iTail == _iHead)
    e9f0:	238e      	movs	r3, #142	; 0x8e
    e9f2:	228c      	movs	r2, #140	; 0x8c
    e9f4:	005b      	lsls	r3, r3, #1
    e9f6:	0052      	lsls	r2, r2, #1
    e9f8:	58c1      	ldr	r1, [r0, r3]
    e9fa:	5882      	ldr	r2, [r0, r2]
    e9fc:	4291      	cmp	r1, r2
    e9fe:	d003      	beq.n	ea08 <_ZN7TwoWire4peekEv+0x18>
  return _aucBuffer[_iTail];
    ea00:	58c3      	ldr	r3, [r0, r3]
    ea02:	18c0      	adds	r0, r0, r3
    ea04:	7e00      	ldrb	r0, [r0, #24]

int TwoWire::peek(void)
{
  return rxBuffer.peek();
}
    ea06:	4770      	bx	lr
    return -1;
    ea08:	2001      	movs	r0, #1
    ea0a:	4240      	negs	r0, r0
  return rxBuffer.peek();
    ea0c:	e7fb      	b.n	ea06 <_ZN7TwoWire4peekEv+0x16>
    ea0e:	46c0      	nop			; (mov r8, r8)

0000ea10 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
    ea10:	4770      	bx	lr
    ea12:	46c0      	nop			; (mov r8, r8)

0000ea14 <_ZN7TwoWire5writeEh>:
{
    ea14:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( !transmissionBegun || txBuffer.isFull() )
    ea16:	7d82      	ldrb	r2, [r0, #22]
{
    ea18:	0003      	movs	r3, r0
    return 0 ;
    ea1a:	2000      	movs	r0, #0
  if ( !transmissionBegun || txBuffer.isFull() )
    ea1c:	2a00      	cmp	r2, #0
    ea1e:	d01a      	beq.n	ea56 <_ZN7TwoWire5writeEh+0x42>
  return (nextIndex(_iHead) == _iTail);
    ea20:	2288      	movs	r2, #136	; 0x88
    ea22:	0092      	lsls	r2, r2, #2
    ea24:	189d      	adds	r5, r3, r2
    ea26:	3204      	adds	r2, #4
    ea28:	682c      	ldr	r4, [r5, #0]
    ea2a:	189e      	adds	r6, r3, r2
    ea2c:	6837      	ldr	r7, [r6, #0]
  return (uint32_t)(index + 1) % N;
    ea2e:	3a26      	subs	r2, #38	; 0x26
    ea30:	3401      	adds	r4, #1
    ea32:	3aff      	subs	r2, #255	; 0xff
    ea34:	4014      	ands	r4, r2
    ea36:	42bc      	cmp	r4, r7
    ea38:	d00d      	beq.n	ea56 <_ZN7TwoWire5writeEh+0x42>
  int i = nextIndex(_iHead);
    ea3a:	6828      	ldr	r0, [r5, #0]
  return (uint32_t)(index + 1) % N;
    ea3c:	3001      	adds	r0, #1
    ea3e:	4002      	ands	r2, r0
  if ( i != _iTail )
    ea40:	6830      	ldr	r0, [r6, #0]
    ea42:	4282      	cmp	r2, r0
    ea44:	d008      	beq.n	ea58 <_ZN7TwoWire5writeEh+0x44>
    _aucBuffer[_iHead] = c ;
    ea46:	6828      	ldr	r0, [r5, #0]
    ea48:	181b      	adds	r3, r3, r0
    ea4a:	2090      	movs	r0, #144	; 0x90
    ea4c:	0040      	lsls	r0, r0, #1
    ea4e:	5419      	strb	r1, [r3, r0]
    _iHead = i ;
    ea50:	3820      	subs	r0, #32
    ea52:	602a      	str	r2, [r5, #0]
    ea54:	38ff      	subs	r0, #255	; 0xff
}
    ea56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( i != _iTail )
    ea58:	2001      	movs	r0, #1
    ea5a:	e7fc      	b.n	ea56 <_ZN7TwoWire5writeEh+0x42>

0000ea5c <_ZN7TwoWire5writeEPKhj>:
{
    ea5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea5e:	4645      	mov	r5, r8
    ea60:	4657      	mov	r7, sl
    ea62:	46de      	mov	lr, fp
    ea64:	464e      	mov	r6, r9
    ea66:	4688      	mov	r8, r1
    ea68:	b5e0      	push	{r5, r6, r7, lr}
  for(size_t i = 0; i < quantity; ++i)
    ea6a:	2400      	movs	r4, #0
{
    ea6c:	0005      	movs	r5, r0
    ea6e:	1e17      	subs	r7, r2, #0
  for(size_t i = 0; i < quantity; ++i)
    ea70:	d013      	beq.n	ea9a <_ZN7TwoWire5writeEPKhj+0x3e>
    ea72:	4b1e      	ldr	r3, [pc, #120]	; (eaec <_ZN7TwoWire5writeEPKhj+0x90>)
    if(!write(data[i]))
    ea74:	4642      	mov	r2, r8
    ea76:	4699      	mov	r9, r3
  return (nextIndex(_iHead) == _iTail);
    ea78:	2390      	movs	r3, #144	; 0x90
    ea7a:	005b      	lsls	r3, r3, #1
    ea7c:	469b      	mov	fp, r3
    ea7e:	3301      	adds	r3, #1
    ea80:	33ff      	adds	r3, #255	; 0xff
    ea82:	18c6      	adds	r6, r0, r3
    ea84:	3304      	adds	r3, #4
    ea86:	469a      	mov	sl, r3
    ea88:	682b      	ldr	r3, [r5, #0]
    ea8a:	4482      	add	sl, r0
    ea8c:	681b      	ldr	r3, [r3, #0]
    ea8e:	5d11      	ldrb	r1, [r2, r4]
    ea90:	454b      	cmp	r3, r9
    ea92:	d126      	bne.n	eae2 <_ZN7TwoWire5writeEPKhj+0x86>
  if ( !transmissionBegun || txBuffer.isFull() )
    ea94:	7dab      	ldrb	r3, [r5, #22]
    ea96:	2b00      	cmp	r3, #0
    ea98:	d106      	bne.n	eaa8 <_ZN7TwoWire5writeEPKhj+0x4c>
}
    ea9a:	0020      	movs	r0, r4
    ea9c:	bc3c      	pop	{r2, r3, r4, r5}
    ea9e:	4690      	mov	r8, r2
    eaa0:	4699      	mov	r9, r3
    eaa2:	46a2      	mov	sl, r4
    eaa4:	46ab      	mov	fp, r5
    eaa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eaa8:	4653      	mov	r3, sl
    eaaa:	6832      	ldr	r2, [r6, #0]
    eaac:	6818      	ldr	r0, [r3, #0]
  return (uint32_t)(index + 1) % N;
    eaae:	23ff      	movs	r3, #255	; 0xff
    eab0:	3201      	adds	r2, #1
    eab2:	401a      	ands	r2, r3
  if ( !transmissionBegun || txBuffer.isFull() )
    eab4:	4282      	cmp	r2, r0
    eab6:	d0f0      	beq.n	ea9a <_ZN7TwoWire5writeEPKhj+0x3e>
  int i = nextIndex(_iHead);
    eab8:	6832      	ldr	r2, [r6, #0]
  return (uint32_t)(index + 1) % N;
    eaba:	3201      	adds	r2, #1
    eabc:	4013      	ands	r3, r2
  if ( i != _iTail )
    eabe:	4652      	mov	r2, sl
    eac0:	6812      	ldr	r2, [r2, #0]
    eac2:	4293      	cmp	r3, r2
    eac4:	d004      	beq.n	ead0 <_ZN7TwoWire5writeEPKhj+0x74>
    _aucBuffer[_iHead] = c ;
    eac6:	4658      	mov	r0, fp
    eac8:	6832      	ldr	r2, [r6, #0]
    eaca:	18aa      	adds	r2, r5, r2
    eacc:	5411      	strb	r1, [r2, r0]
    _iHead = i ;
    eace:	6033      	str	r3, [r6, #0]
  for(size_t i = 0; i < quantity; ++i)
    ead0:	3401      	adds	r4, #1
    ead2:	42a7      	cmp	r7, r4
    ead4:	d0e1      	beq.n	ea9a <_ZN7TwoWire5writeEPKhj+0x3e>
    if(!write(data[i]))
    ead6:	4642      	mov	r2, r8
    ead8:	682b      	ldr	r3, [r5, #0]
    eada:	5d11      	ldrb	r1, [r2, r4]
    eadc:	681b      	ldr	r3, [r3, #0]
    eade:	454b      	cmp	r3, r9
    eae0:	d0d8      	beq.n	ea94 <_ZN7TwoWire5writeEPKhj+0x38>
    eae2:	0028      	movs	r0, r5
    eae4:	4798      	blx	r3
    eae6:	2800      	cmp	r0, #0
    eae8:	d1f2      	bne.n	ead0 <_ZN7TwoWire5writeEPKhj+0x74>
    eaea:	e7d6      	b.n	ea9a <_ZN7TwoWire5writeEPKhj+0x3e>
    eaec:	0000ea15 	.word	0x0000ea15

0000eaf0 <_ZN7TwoWireC1EP6SERCOMhh>:
TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
    eaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eaf2:	46ce      	mov	lr, r9
    eaf4:	4647      	mov	r7, r8
    eaf6:	b580      	push	{r7, lr}
    eaf8:	001f      	movs	r7, r3
    eafa:	23fa      	movs	r3, #250	; 0xfa
    memset( _aucBuffer, 0, N ) ;
    eafc:	2680      	movs	r6, #128	; 0x80
    Print() : write_error(0) {}
    eafe:	2500      	movs	r5, #0
    eb00:	0004      	movs	r4, r0
    eb02:	009b      	lsls	r3, r3, #2
    eb04:	6083      	str	r3, [r0, #8]
    eb06:	4b15      	ldr	r3, [pc, #84]	; (eb5c <_ZN7TwoWireC1EP6SERCOMhh+0x6c>)
    eb08:	0076      	lsls	r6, r6, #1
    eb0a:	3308      	adds	r3, #8
    eb0c:	4689      	mov	r9, r1
    eb0e:	4690      	mov	r8, r2
    eb10:	6045      	str	r5, [r0, #4]
    eb12:	0032      	movs	r2, r6
    eb14:	6003      	str	r3, [r0, #0]
    eb16:	2100      	movs	r1, #0
    eb18:	3018      	adds	r0, #24
    eb1a:	f001 ff2f 	bl	1097c <memset>
  _iHead = 0;
    eb1e:	238c      	movs	r3, #140	; 0x8c
    memset( _aucBuffer, 0, N ) ;
    eb20:	0020      	movs	r0, r4
  _iHead = 0;
    eb22:	005b      	lsls	r3, r3, #1
    eb24:	50e5      	str	r5, [r4, r3]
    memset( _aucBuffer, 0, N ) ;
    eb26:	3021      	adds	r0, #33	; 0x21
  _iTail = 0;
    eb28:	3304      	adds	r3, #4
    eb2a:	50e5      	str	r5, [r4, r3]
    memset( _aucBuffer, 0, N ) ;
    eb2c:	0032      	movs	r2, r6
    eb2e:	2100      	movs	r1, #0
    eb30:	30ff      	adds	r0, #255	; 0xff
    eb32:	f001 ff23 	bl	1097c <memset>
  _iHead = 0;
    eb36:	2388      	movs	r3, #136	; 0x88
    eb38:	009b      	lsls	r3, r3, #2
    eb3a:	18e3      	adds	r3, r4, r3
    eb3c:	601d      	str	r5, [r3, #0]
  _iTail = 0;
    eb3e:	2389      	movs	r3, #137	; 0x89
    eb40:	009b      	lsls	r3, r3, #2
    eb42:	18e3      	adds	r3, r4, r3
    eb44:	601d      	str	r5, [r3, #0]
  this->sercom = s;
    eb46:	464b      	mov	r3, r9
    eb48:	6123      	str	r3, [r4, #16]
  this->_uc_pinSDA=pinSDA;
    eb4a:	4643      	mov	r3, r8
  this->_uc_pinSCL=pinSCL;
    eb4c:	7567      	strb	r7, [r4, #21]
  transmissionBegun = false;
    eb4e:	75a5      	strb	r5, [r4, #22]
}
    eb50:	0020      	movs	r0, r4
  this->_uc_pinSDA=pinSDA;
    eb52:	7523      	strb	r3, [r4, #20]
}
    eb54:	bc0c      	pop	{r2, r3}
    eb56:	4690      	mov	r8, r2
    eb58:	4699      	mov	r9, r3
    eb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb5c:	00010ddc 	.word	0x00010ddc

0000eb60 <_ZN7TwoWire5beginEv>:
void TwoWire::begin(void) {
    eb60:	b570      	push	{r4, r5, r6, lr}
    eb62:	0005      	movs	r5, r0
  sercom->initMasterWIRE(TWI_CLOCK);
    eb64:	490d      	ldr	r1, [pc, #52]	; (eb9c <_ZN7TwoWire5beginEv+0x3c>)
    eb66:	6900      	ldr	r0, [r0, #16]
    eb68:	f001 fbc0 	bl	102ec <_ZN6SERCOM14initMasterWIREEm>
  sercom->enableWIRE();
    eb6c:	6928      	ldr	r0, [r5, #16]
    eb6e:	f001 fa0d 	bl	ff8c <_ZN6SERCOM10enableWIREEv>
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    eb72:	2108      	movs	r1, #8
    eb74:	7d28      	ldrb	r0, [r5, #20]
    eb76:	4c0a      	ldr	r4, [pc, #40]	; (eba0 <_ZN7TwoWire5beginEv+0x40>)
    eb78:	0043      	lsls	r3, r0, #1
    eb7a:	181b      	adds	r3, r3, r0
    eb7c:	00db      	lsls	r3, r3, #3
    eb7e:	18e3      	adds	r3, r4, r3
    eb80:	5659      	ldrsb	r1, [r3, r1]
    eb82:	f7f6 f853 	bl	4c2c <pinPeripheral>
  pinPeripheral(_uc_pinSCL, g_APinDescription[_uc_pinSCL].ulPinType);
    eb86:	2108      	movs	r1, #8
    eb88:	7d68      	ldrb	r0, [r5, #21]
    eb8a:	0043      	lsls	r3, r0, #1
    eb8c:	181b      	adds	r3, r3, r0
    eb8e:	00db      	lsls	r3, r3, #3
    eb90:	18e3      	adds	r3, r4, r3
    eb92:	5659      	ldrsb	r1, [r3, r1]
    eb94:	f7f6 f84a 	bl	4c2c <pinPeripheral>
}
    eb98:	bd70      	pop	{r4, r5, r6, pc}
    eb9a:	46c0      	nop			; (mov r8, r8)
    eb9c:	000186a0 	.word	0x000186a0
    eba0:	00010e00 	.word	0x00010e00

0000eba4 <_ZN7TwoWire11requestFromEhj>:
{
    eba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eba6:	46ce      	mov	lr, r9
    eba8:	4647      	mov	r7, r8
    ebaa:	0004      	movs	r4, r0
    ebac:	b580      	push	{r7, lr}
    ebae:	0016      	movs	r6, r2
    return 0;
    ebb0:	2500      	movs	r5, #0
  if(quantity == 0)
    ebb2:	2a00      	cmp	r2, #0
    ebb4:	d104      	bne.n	ebc0 <_ZN7TwoWire11requestFromEhj+0x1c>
}
    ebb6:	0028      	movs	r0, r5
    ebb8:	bc0c      	pop	{r2, r3}
    ebba:	4690      	mov	r8, r2
    ebbc:	4699      	mov	r9, r3
    ebbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _iHead = 0;
    ebc0:	278c      	movs	r7, #140	; 0x8c
  _iTail = 0;
    ebc2:	238e      	movs	r3, #142	; 0x8e
  _iHead = 0;
    ebc4:	007f      	lsls	r7, r7, #1
  _iTail = 0;
    ebc6:	005b      	lsls	r3, r3, #1
  _iHead = 0;
    ebc8:	51c5      	str	r5, [r0, r7]
  if(sercom->startTransmissionWIRE(address, WIRE_READ_FLAG))
    ebca:	2201      	movs	r2, #1
  _iTail = 0;
    ebcc:	50c5      	str	r5, [r0, r3]
    ebce:	6900      	ldr	r0, [r0, #16]
    ebd0:	4698      	mov	r8, r3
    ebd2:	f001 fa1d 	bl	10010 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    ebd6:	2800      	cmp	r0, #0
    ebd8:	d0ed      	beq.n	ebb6 <_ZN7TwoWire11requestFromEhj+0x12>
    rxBuffer.store_char(sercom->readDataWIRE());
    ebda:	6920      	ldr	r0, [r4, #16]
    ebdc:	f001 fa8e 	bl	100fc <_ZN6SERCOM12readDataWIREEv>
  return (uint32_t)(index + 1) % N;
    ebe0:	23ff      	movs	r3, #255	; 0xff
  int i = nextIndex(_iHead);
    ebe2:	59e2      	ldr	r2, [r4, r7]
  return (uint32_t)(index + 1) % N;
    ebe4:	3201      	adds	r2, #1
    ebe6:	4013      	ands	r3, r2
  if ( i != _iTail )
    ebe8:	4642      	mov	r2, r8
    ebea:	58a2      	ldr	r2, [r4, r2]
    ebec:	4293      	cmp	r3, r2
    ebee:	d003      	beq.n	ebf8 <_ZN7TwoWire11requestFromEhj+0x54>
    _aucBuffer[_iHead] = c ;
    ebf0:	59e2      	ldr	r2, [r4, r7]
    ebf2:	18a2      	adds	r2, r4, r2
    ebf4:	7610      	strb	r0, [r2, #24]
    _iHead = i ;
    ebf6:	51e3      	str	r3, [r4, r7]
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    ebf8:	2501      	movs	r5, #1
    ebfa:	2e01      	cmp	r6, #1
    ebfc:	d91f      	bls.n	ec3e <_ZN7TwoWire11requestFromEhj+0x9a>
  return (uint32_t)(index + 1) % N;
    ebfe:	23ff      	movs	r3, #255	; 0xff
  int i = nextIndex(_iHead);
    ec00:	278c      	movs	r7, #140	; 0x8c
  return (uint32_t)(index + 1) % N;
    ec02:	4699      	mov	r9, r3
  if ( i != _iTail )
    ec04:	331d      	adds	r3, #29
    ec06:	4698      	mov	r8, r3
  int i = nextIndex(_iHead);
    ec08:	007f      	lsls	r7, r7, #1
      sercom->prepareAckBitWIRE();                          // Prepare Acknowledge
    ec0a:	6920      	ldr	r0, [r4, #16]
    ec0c:	f001 f9d8 	bl	ffc0 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_READ); // Prepare the ACK command for the slave
    ec10:	2102      	movs	r1, #2
    ec12:	6920      	ldr	r0, [r4, #16]
    ec14:	f001 f9de 	bl	ffd4 <_ZN6SERCOM22prepareCommandBitsWireEh>
      rxBuffer.store_char(sercom->readDataWIRE());          // Read data and send the ACK
    ec18:	6920      	ldr	r0, [r4, #16]
    ec1a:	f001 fa6f 	bl	100fc <_ZN6SERCOM12readDataWIREEv>
  return (uint32_t)(index + 1) % N;
    ec1e:	464a      	mov	r2, r9
  int i = nextIndex(_iHead);
    ec20:	59e3      	ldr	r3, [r4, r7]
  return (uint32_t)(index + 1) % N;
    ec22:	3301      	adds	r3, #1
    ec24:	4013      	ands	r3, r2
  if ( i != _iTail )
    ec26:	4642      	mov	r2, r8
    ec28:	58a2      	ldr	r2, [r4, r2]
    ec2a:	4293      	cmp	r3, r2
    ec2c:	d003      	beq.n	ec36 <_ZN7TwoWire11requestFromEhj+0x92>
    _aucBuffer[_iHead] = c ;
    ec2e:	59e2      	ldr	r2, [r4, r7]
    ec30:	18a2      	adds	r2, r4, r2
    ec32:	7610      	strb	r0, [r2, #24]
    _iHead = i ;
    ec34:	51e3      	str	r3, [r4, r7]
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    ec36:	3501      	adds	r5, #1
    ec38:	42ae      	cmp	r6, r5
    ec3a:	d1e6      	bne.n	ec0a <_ZN7TwoWire11requestFromEhj+0x66>
    ec3c:	b2f5      	uxtb	r5, r6
    sercom->prepareNackBitWIRE();                           // Prepare NACK to stop slave transmission
    ec3e:	6920      	ldr	r0, [r4, #16]
    ec40:	f001 f9b6 	bl	ffb0 <_ZN6SERCOM18prepareNackBitWIREEv>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);   // Send Stop
    ec44:	6920      	ldr	r0, [r4, #16]
    ec46:	2103      	movs	r1, #3
    ec48:	f001 f9c4 	bl	ffd4 <_ZN6SERCOM22prepareCommandBitsWireEh>
    ec4c:	e7b3      	b.n	ebb6 <_ZN7TwoWire11requestFromEhj+0x12>
    ec4e:	46c0      	nop			; (mov r8, r8)

0000ec50 <_ZN7TwoWire17beginTransmissionEh>:
  txAddress = address;
    ec50:	238a      	movs	r3, #138	; 0x8a
    ec52:	009b      	lsls	r3, r3, #2
    ec54:	54c1      	strb	r1, [r0, r3]
  _iHead = 0;
    ec56:	3b08      	subs	r3, #8
    ec58:	18c2      	adds	r2, r0, r3
    ec5a:	2300      	movs	r3, #0
    ec5c:	6013      	str	r3, [r2, #0]
  _iTail = 0;
    ec5e:	2289      	movs	r2, #137	; 0x89
    ec60:	0092      	lsls	r2, r2, #2
    ec62:	1882      	adds	r2, r0, r2
    ec64:	6013      	str	r3, [r2, #0]
  transmissionBegun = true;
    ec66:	3301      	adds	r3, #1
    ec68:	7583      	strb	r3, [r0, #22]
}
    ec6a:	4770      	bx	lr

0000ec6c <_ZN7TwoWire15endTransmissionEv>:
{
    ec6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  transmissionBegun = false ;
    ec6e:	2300      	movs	r3, #0
{
    ec70:	46c6      	mov	lr, r8
    ec72:	b500      	push	{lr}
  transmissionBegun = false ;
    ec74:	7583      	strb	r3, [r0, #22]
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    ec76:	238a      	movs	r3, #138	; 0x8a
    ec78:	009b      	lsls	r3, r3, #2
{
    ec7a:	0005      	movs	r5, r0
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    ec7c:	5cc1      	ldrb	r1, [r0, r3]
    ec7e:	2200      	movs	r2, #0
    ec80:	6900      	ldr	r0, [r0, #16]
    ec82:	f001 f9c5 	bl	10010 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    ec86:	2800      	cmp	r0, #0
    ec88:	d035      	beq.n	ecf6 <_ZN7TwoWire15endTransmissionEv+0x8a>
    ec8a:	2388      	movs	r3, #136	; 0x88
    ec8c:	009b      	lsls	r3, r3, #2
    ec8e:	18ee      	adds	r6, r5, r3
    ec90:	3304      	adds	r3, #4
    ec92:	18ec      	adds	r4, r5, r3
  if(_iTail == _iHead)
    ec94:	3b05      	subs	r3, #5
    ec96:	3bff      	subs	r3, #255	; 0xff
    ec98:	4698      	mov	r8, r3
    ec9a:	27ff      	movs	r7, #255	; 0xff
    ec9c:	e012      	b.n	ecc4 <_ZN7TwoWire15endTransmissionEv+0x58>
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    ec9e:	6928      	ldr	r0, [r5, #16]
  while( txBuffer.available() )
    eca0:	2b00      	cmp	r3, #0
    eca2:	d018      	beq.n	ecd6 <_ZN7TwoWire15endTransmissionEv+0x6a>
    eca4:	6822      	ldr	r2, [r4, #0]
    eca6:	6833      	ldr	r3, [r6, #0]
    eca8:	429a      	cmp	r2, r3
    ecaa:	d019      	beq.n	ece0 <_ZN7TwoWire15endTransmissionEv+0x74>
  uint8_t value = _aucBuffer[_iTail];
    ecac:	4642      	mov	r2, r8
    ecae:	6823      	ldr	r3, [r4, #0]
    ecb0:	18eb      	adds	r3, r5, r3
    ecb2:	5c99      	ldrb	r1, [r3, r2]
  _iTail = nextIndex(_iTail);
    ecb4:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(index + 1) % N;
    ecb6:	3301      	adds	r3, #1
    ecb8:	403b      	ands	r3, r7
  _iTail = nextIndex(_iTail);
    ecba:	6023      	str	r3, [r4, #0]
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    ecbc:	f001 f9d6 	bl	1006c <_ZN6SERCOM18sendDataMasterWIREEh>
    ecc0:	2800      	cmp	r0, #0
    ecc2:	d012      	beq.n	ecea <_ZN7TwoWire15endTransmissionEv+0x7e>
  int delta = _iHead - _iTail;
    ecc4:	6833      	ldr	r3, [r6, #0]
    ecc6:	6822      	ldr	r2, [r4, #0]
    ecc8:	1a9b      	subs	r3, r3, r2
  if(delta < 0)
    ecca:	d5e8      	bpl.n	ec9e <_ZN7TwoWire15endTransmissionEv+0x32>
    return N + delta;
    eccc:	3301      	adds	r3, #1
    ecce:	33ff      	adds	r3, #255	; 0xff
    ecd0:	6928      	ldr	r0, [r5, #16]
  while( txBuffer.available() )
    ecd2:	2b00      	cmp	r3, #0
    ecd4:	d1e6      	bne.n	eca4 <_ZN7TwoWire15endTransmissionEv+0x38>
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    ecd6:	2103      	movs	r1, #3
    ecd8:	f001 f97c 	bl	ffd4 <_ZN6SERCOM22prepareCommandBitsWireEh>
  return 0;
    ecdc:	2000      	movs	r0, #0
    ecde:	e00f      	b.n	ed00 <_ZN7TwoWire15endTransmissionEv+0x94>
  if(_iTail == _iHead)
    ece0:	21ff      	movs	r1, #255	; 0xff
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    ece2:	f001 f9c3 	bl	1006c <_ZN6SERCOM18sendDataMasterWIREEh>
    ece6:	2800      	cmp	r0, #0
    ece8:	d1ec      	bne.n	ecc4 <_ZN7TwoWire15endTransmissionEv+0x58>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    ecea:	6928      	ldr	r0, [r5, #16]
    ecec:	2103      	movs	r1, #3
    ecee:	f001 f971 	bl	ffd4 <_ZN6SERCOM22prepareCommandBitsWireEh>
      return 3 ;  // Nack or error
    ecf2:	2003      	movs	r0, #3
    ecf4:	e004      	b.n	ed00 <_ZN7TwoWire15endTransmissionEv+0x94>
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    ecf6:	6928      	ldr	r0, [r5, #16]
    ecf8:	2103      	movs	r1, #3
    ecfa:	f001 f96b 	bl	ffd4 <_ZN6SERCOM22prepareCommandBitsWireEh>
    return 2 ;  // Address error
    ecfe:	2002      	movs	r0, #2
}
    ed00:	bc04      	pop	{r2}
    ed02:	4690      	mov	r8, r2
    ed04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed06:	46c0      	nop			; (mov r8, r8)

0000ed08 <SERCOM3_Handler>:
    #define PERIPH_WIRE          sercom3
    #define WIRE_IT_HANDLER      SERCOM3_Handler
  #endif // PERIPH_WIRE
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);

  void WIRE_IT_HANDLER(void) {
    ed08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ( sercom->isSlaveWIRE() )
    ed0a:	4c55      	ldr	r4, [pc, #340]	; (ee60 <SERCOM3_Handler+0x158>)
    ed0c:	6920      	ldr	r0, [r4, #16]
    ed0e:	f001 f9cd 	bl	100ac <_ZN6SERCOM11isSlaveWIREEv>
    ed12:	2800      	cmp	r0, #0
    ed14:	d100      	bne.n	ed18 <SERCOM3_Handler+0x10>
    Wire.onService();
  }
    ed16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(sercom->isStopDetectedWIRE() || 
    ed18:	6920      	ldr	r0, [r4, #16]
    ed1a:	f001 f9d7 	bl	100cc <_ZN6SERCOM18isStopDetectedWIREEv>
    ed1e:	2800      	cmp	r0, #0
    ed20:	d01d      	beq.n	ed5e <SERCOM3_Handler+0x56>
      sercom->prepareAckBitWIRE();
    ed22:	6920      	ldr	r0, [r4, #16]
    ed24:	f001 f94c 	bl	ffc0 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    ed28:	2103      	movs	r1, #3
    ed2a:	6920      	ldr	r0, [r4, #16]
    ed2c:	f001 f952 	bl	ffd4 <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(onReceiveCallback)
    ed30:	238c      	movs	r3, #140	; 0x8c
    ed32:	009b      	lsls	r3, r3, #2
    ed34:	58e3      	ldr	r3, [r4, r3]
    ed36:	2b00      	cmp	r3, #0
    ed38:	d007      	beq.n	ed4a <SERCOM3_Handler+0x42>
  int delta = _iHead - _iTail;
    ed3a:	228c      	movs	r2, #140	; 0x8c
    ed3c:	0052      	lsls	r2, r2, #1
    ed3e:	58a0      	ldr	r0, [r4, r2]
    ed40:	3204      	adds	r2, #4
    ed42:	58a2      	ldr	r2, [r4, r2]
    ed44:	1a80      	subs	r0, r0, r2
  if(delta < 0)
    ed46:	d407      	bmi.n	ed58 <SERCOM3_Handler+0x50>
        onReceiveCallback(available());
    ed48:	4798      	blx	r3
  _iHead = 0;
    ed4a:	228c      	movs	r2, #140	; 0x8c
    ed4c:	2300      	movs	r3, #0
    ed4e:	0052      	lsls	r2, r2, #1
    ed50:	50a3      	str	r3, [r4, r2]
  _iTail = 0;
    ed52:	3204      	adds	r2, #4
    ed54:	50a3      	str	r3, [r4, r2]
    ed56:	e7de      	b.n	ed16 <SERCOM3_Handler+0xe>
    return N + delta;
    ed58:	3001      	adds	r0, #1
    ed5a:	30ff      	adds	r0, #255	; 0xff
    ed5c:	e7f4      	b.n	ed48 <SERCOM3_Handler+0x40>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    ed5e:	6920      	ldr	r0, [r4, #16]
    ed60:	f001 f9c0 	bl	100e4 <_ZN6SERCOM14isAddressMatchEv>
    if(sercom->isStopDetectedWIRE() || 
    ed64:	2800      	cmp	r0, #0
    ed66:	d14a      	bne.n	edfe <SERCOM3_Handler+0xf6>
    else if(sercom->isAddressMatch())  //Address Match
    ed68:	6920      	ldr	r0, [r4, #16]
    ed6a:	f001 f9bb 	bl	100e4 <_ZN6SERCOM14isAddressMatchEv>
    ed6e:	2800      	cmp	r0, #0
    ed70:	d01a      	beq.n	eda8 <SERCOM3_Handler+0xa0>
      sercom->prepareAckBitWIRE();
    ed72:	6920      	ldr	r0, [r4, #16]
    ed74:	f001 f924 	bl	ffc0 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    ed78:	6920      	ldr	r0, [r4, #16]
    ed7a:	2103      	movs	r1, #3
    ed7c:	f001 f92a 	bl	ffd4 <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
    ed80:	6920      	ldr	r0, [r4, #16]
    ed82:	f001 f9b5 	bl	100f0 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    ed86:	2800      	cmp	r0, #0
    ed88:	d0c5      	beq.n	ed16 <SERCOM3_Handler+0xe>
  _iHead = 0;
    ed8a:	2288      	movs	r2, #136	; 0x88
    ed8c:	2300      	movs	r3, #0
    ed8e:	0092      	lsls	r2, r2, #2
    ed90:	50a3      	str	r3, [r4, r2]
  _iTail = 0;
    ed92:	3204      	adds	r2, #4
    ed94:	50a3      	str	r3, [r4, r2]
        transmissionBegun = true;
    ed96:	3301      	adds	r3, #1
    ed98:	75a3      	strb	r3, [r4, #22]
        if(onRequestCallback)
    ed9a:	238b      	movs	r3, #139	; 0x8b
    ed9c:	009b      	lsls	r3, r3, #2
    ed9e:	58e3      	ldr	r3, [r4, r3]
    eda0:	2b00      	cmp	r3, #0
    eda2:	d0b8      	beq.n	ed16 <SERCOM3_Handler+0xe>
          onRequestCallback();
    eda4:	4798      	blx	r3
    eda6:	e7b6      	b.n	ed16 <SERCOM3_Handler+0xe>
    else if(sercom->isDataReadyWIRE())
    eda8:	6920      	ldr	r0, [r4, #16]
    edaa:	f001 f989 	bl	100c0 <_ZN6SERCOM15isDataReadyWIREEv>
    edae:	2800      	cmp	r0, #0
    edb0:	d0b1      	beq.n	ed16 <SERCOM3_Handler+0xe>
      if (sercom->isMasterReadOperationWIRE())
    edb2:	6920      	ldr	r0, [r4, #16]
    edb4:	f001 f99c 	bl	100f0 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    edb8:	2800      	cmp	r0, #0
    edba:	d02b      	beq.n	ee14 <SERCOM3_Handler+0x10c>
  int delta = _iHead - _iTail;
    edbc:	2388      	movs	r3, #136	; 0x88
    edbe:	2289      	movs	r2, #137	; 0x89
    edc0:	009b      	lsls	r3, r3, #2
    edc2:	0092      	lsls	r2, r2, #2
    edc4:	58e3      	ldr	r3, [r4, r3]
    edc6:	58a2      	ldr	r2, [r4, r2]
    edc8:	1a9b      	subs	r3, r3, r2
  if(delta < 0)
    edca:	d446      	bmi.n	ee5a <SERCOM3_Handler+0x152>
        uint8_t c = 0xff;
    edcc:	21ff      	movs	r1, #255	; 0xff
        if( txBuffer.available() ) {
    edce:	2b00      	cmp	r3, #0
    edd0:	d010      	beq.n	edf4 <SERCOM3_Handler+0xec>
  if(_iTail == _iHead)
    edd2:	2389      	movs	r3, #137	; 0x89
    edd4:	2288      	movs	r2, #136	; 0x88
    edd6:	009b      	lsls	r3, r3, #2
    edd8:	0092      	lsls	r2, r2, #2
    edda:	58e0      	ldr	r0, [r4, r3]
    eddc:	58a2      	ldr	r2, [r4, r2]
    edde:	4290      	cmp	r0, r2
    ede0:	d008      	beq.n	edf4 <SERCOM3_Handler+0xec>
  uint8_t value = _aucBuffer[_iTail];
    ede2:	58e2      	ldr	r2, [r4, r3]
    ede4:	3121      	adds	r1, #33	; 0x21
    ede6:	18a2      	adds	r2, r4, r2
    ede8:	5c51      	ldrb	r1, [r2, r1]
  return (uint32_t)(index + 1) % N;
    edea:	22ff      	movs	r2, #255	; 0xff
  _iTail = nextIndex(_iTail);
    edec:	58e0      	ldr	r0, [r4, r3]
  return (uint32_t)(index + 1) % N;
    edee:	3001      	adds	r0, #1
    edf0:	4002      	ands	r2, r0
  _iTail = nextIndex(_iTail);
    edf2:	50e2      	str	r2, [r4, r3]
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
    edf4:	6920      	ldr	r0, [r4, #16]
    edf6:	f001 f94b 	bl	10090 <_ZN6SERCOM17sendDataSlaveWIREEh>
    edfa:	75a0      	strb	r0, [r4, #22]
    edfc:	e78b      	b.n	ed16 <SERCOM3_Handler+0xe>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    edfe:	6920      	ldr	r0, [r4, #16]
    ee00:	f001 f96a 	bl	100d8 <_ZN6SERCOM21isRestartDetectedWIREEv>
    ee04:	2800      	cmp	r0, #0
    ee06:	d0af      	beq.n	ed68 <SERCOM3_Handler+0x60>
    ee08:	6920      	ldr	r0, [r4, #16]
    ee0a:	f001 f971 	bl	100f0 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    ee0e:	2800      	cmp	r0, #0
    ee10:	d1aa      	bne.n	ed68 <SERCOM3_Handler+0x60>
    ee12:	e786      	b.n	ed22 <SERCOM3_Handler+0x1a>
  return (nextIndex(_iHead) == _iTail);
    ee14:	268c      	movs	r6, #140	; 0x8c
    ee16:	278e      	movs	r7, #142	; 0x8e
  return (uint32_t)(index + 1) % N;
    ee18:	25ff      	movs	r5, #255	; 0xff
  return (nextIndex(_iHead) == _iTail);
    ee1a:	0076      	lsls	r6, r6, #1
    ee1c:	59a3      	ldr	r3, [r4, r6]
    ee1e:	007f      	lsls	r7, r7, #1
    ee20:	59e2      	ldr	r2, [r4, r7]
  return (uint32_t)(index + 1) % N;
    ee22:	3301      	adds	r3, #1
    ee24:	402b      	ands	r3, r5
          sercom->prepareNackBitWIRE(); 
    ee26:	6920      	ldr	r0, [r4, #16]
        if (rxBuffer.isFull()) {
    ee28:	4293      	cmp	r3, r2
    ee2a:	d013      	beq.n	ee54 <SERCOM3_Handler+0x14c>
          rxBuffer.store_char(sercom->readDataWIRE());
    ee2c:	f001 f966 	bl	100fc <_ZN6SERCOM12readDataWIREEv>
  int i = nextIndex(_iHead);
    ee30:	59a3      	ldr	r3, [r4, r6]
  return (uint32_t)(index + 1) % N;
    ee32:	3301      	adds	r3, #1
    ee34:	401d      	ands	r5, r3
  if ( i != _iTail )
    ee36:	59e3      	ldr	r3, [r4, r7]
    ee38:	429d      	cmp	r5, r3
    ee3a:	d003      	beq.n	ee44 <SERCOM3_Handler+0x13c>
    _aucBuffer[_iHead] = c ;
    ee3c:	59a3      	ldr	r3, [r4, r6]
    _iHead = i ;
    ee3e:	51a5      	str	r5, [r4, r6]
    _aucBuffer[_iHead] = c ;
    ee40:	18e3      	adds	r3, r4, r3
    ee42:	7618      	strb	r0, [r3, #24]
          sercom->prepareAckBitWIRE(); 
    ee44:	6920      	ldr	r0, [r4, #16]
    ee46:	f001 f8bb 	bl	ffc0 <_ZN6SERCOM17prepareAckBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
    ee4a:	6920      	ldr	r0, [r4, #16]
    ee4c:	2103      	movs	r1, #3
    ee4e:	f001 f8c1 	bl	ffd4 <_ZN6SERCOM22prepareCommandBitsWireEh>
  }
    ee52:	e760      	b.n	ed16 <SERCOM3_Handler+0xe>
          sercom->prepareNackBitWIRE(); 
    ee54:	f001 f8ac 	bl	ffb0 <_ZN6SERCOM18prepareNackBitWIREEv>
    ee58:	e7f7      	b.n	ee4a <SERCOM3_Handler+0x142>
    return N + delta;
    ee5a:	3301      	adds	r3, #1
    ee5c:	33ff      	adds	r3, #255	; 0xff
    ee5e:	e7b5      	b.n	edcc <SERCOM3_Handler+0xc4>
    ee60:	20000a24 	.word	0x20000a24

0000ee64 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
  }
    ee64:	b510      	push	{r4, lr}
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
    ee66:	2311      	movs	r3, #17
    ee68:	2210      	movs	r2, #16
    ee6a:	4902      	ldr	r1, [pc, #8]	; (ee74 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x10>)
    ee6c:	4802      	ldr	r0, [pc, #8]	; (ee78 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
    ee6e:	f7ff fe3f 	bl	eaf0 <_ZN7TwoWireC1EP6SERCOMhh>
  }
    ee72:	bd10      	pop	{r4, pc}
    ee74:	20000ddc 	.word	0x20000ddc
    ee78:	20000a24 	.word	0x20000a24

0000ee7c <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    ee7c:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    ee7e:	4802      	ldr	r0, [pc, #8]	; (ee88 <SERCOM0_Handler+0xc>)
    ee80:	f7f4 f932 	bl	30e8 <_ZN4Uart10IrqHandlerEv>
}
    ee84:	bd10      	pop	{r4, pc}
    ee86:	46c0      	nop			; (mov r8, r8)
    ee88:	20000d14 	.word	0x20000d14

0000ee8c <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    ee8c:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    ee8e:	4802      	ldr	r0, [pc, #8]	; (ee98 <SERCOM5_Handler+0xc>)
    ee90:	f7f4 f92a 	bl	30e8 <_ZN4Uart10IrqHandlerEv>
}
    ee94:	bd10      	pop	{r4, pc}
    ee96:	46c0      	nop			; (mov r8, r8)
    ee98:	20000c58 	.word	0x20000c58

0000ee9c <_GLOBAL__sub_I_g_APinDescription>:
    ee9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee9e:	46ce      	mov	lr, r9
    eea0:	4647      	mov	r7, r8
    eea2:	b580      	push	{r7, lr}
SERCOM sercom0( SERCOM0 ) ;
    eea4:	4d21      	ldr	r5, [pc, #132]	; (ef2c <_GLOBAL__sub_I_g_APinDescription+0x90>)
}
    eea6:	b083      	sub	sp, #12
SERCOM sercom0( SERCOM0 ) ;
    eea8:	4921      	ldr	r1, [pc, #132]	; (ef30 <_GLOBAL__sub_I_g_APinDescription+0x94>)
    eeaa:	0028      	movs	r0, r5
    eeac:	f000 ffba 	bl	fe24 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    eeb0:	4920      	ldr	r1, [pc, #128]	; (ef34 <_GLOBAL__sub_I_g_APinDescription+0x98>)
    eeb2:	4821      	ldr	r0, [pc, #132]	; (ef38 <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    eeb4:	f000 ffb6 	bl	fe24 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    eeb8:	4920      	ldr	r1, [pc, #128]	; (ef3c <_GLOBAL__sub_I_g_APinDescription+0xa0>)
    eeba:	4821      	ldr	r0, [pc, #132]	; (ef40 <_GLOBAL__sub_I_g_APinDescription+0xa4>)
    eebc:	f000 ffb2 	bl	fe24 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    eec0:	4920      	ldr	r1, [pc, #128]	; (ef44 <_GLOBAL__sub_I_g_APinDescription+0xa8>)
    eec2:	4821      	ldr	r0, [pc, #132]	; (ef48 <_GLOBAL__sub_I_g_APinDescription+0xac>)
    eec4:	f000 ffae 	bl	fe24 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    eec8:	4920      	ldr	r1, [pc, #128]	; (ef4c <_GLOBAL__sub_I_g_APinDescription+0xb0>)
    eeca:	4821      	ldr	r0, [pc, #132]	; (ef50 <_GLOBAL__sub_I_g_APinDescription+0xb4>)
    eecc:	f000 ffaa 	bl	fe24 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    eed0:	4f20      	ldr	r7, [pc, #128]	; (ef54 <_GLOBAL__sub_I_g_APinDescription+0xb8>)
    eed2:	4921      	ldr	r1, [pc, #132]	; (ef58 <_GLOBAL__sub_I_g_APinDescription+0xbc>)
    eed4:	0038      	movs	r0, r7
    eed6:	f000 ffa5 	bl	fe24 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    eeda:	2301      	movs	r3, #1
    eedc:	4699      	mov	r9, r3
    eede:	4c1f      	ldr	r4, [pc, #124]	; (ef5c <_GLOBAL__sub_I_g_APinDescription+0xc0>)
    eee0:	9301      	str	r3, [sp, #4]
    eee2:	3302      	adds	r3, #2
    eee4:	4698      	mov	r8, r3
    eee6:	9300      	str	r3, [sp, #0]
    eee8:	0029      	movs	r1, r5
    eeea:	3b02      	subs	r3, #2
    eeec:	2200      	movs	r2, #0
    eeee:	0020      	movs	r0, r4
    eef0:	f7f4 f8ba 	bl	3068 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    eef4:	4e1a      	ldr	r6, [pc, #104]	; (ef60 <_GLOBAL__sub_I_g_APinDescription+0xc4>)
    eef6:	4d1b      	ldr	r5, [pc, #108]	; (ef64 <_GLOBAL__sub_I_g_APinDescription+0xc8>)
    eef8:	0032      	movs	r2, r6
    eefa:	0029      	movs	r1, r5
    eefc:	0020      	movs	r0, r4
    eefe:	f001 fb61 	bl	105c4 <__aeabi_atexit>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    ef02:	464b      	mov	r3, r9
    ef04:	9301      	str	r3, [sp, #4]
    ef06:	4643      	mov	r3, r8
    ef08:	4c17      	ldr	r4, [pc, #92]	; (ef68 <_GLOBAL__sub_I_g_APinDescription+0xcc>)
    ef0a:	9300      	str	r3, [sp, #0]
    ef0c:	0039      	movs	r1, r7
    ef0e:	3320      	adds	r3, #32
    ef10:	2224      	movs	r2, #36	; 0x24
    ef12:	0020      	movs	r0, r4
    ef14:	f7f4 f8a8 	bl	3068 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    ef18:	0032      	movs	r2, r6
    ef1a:	0029      	movs	r1, r5
    ef1c:	0020      	movs	r0, r4
    ef1e:	f001 fb51 	bl	105c4 <__aeabi_atexit>
}
    ef22:	b003      	add	sp, #12
    ef24:	bc0c      	pop	{r2, r3}
    ef26:	4690      	mov	r8, r2
    ef28:	4699      	mov	r9, r3
    ef2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef2c:	20000dd0 	.word	0x20000dd0
    ef30:	42000800 	.word	0x42000800
    ef34:	42000c00 	.word	0x42000c00
    ef38:	20000dd4 	.word	0x20000dd4
    ef3c:	42001000 	.word	0x42001000
    ef40:	20000dd8 	.word	0x20000dd8
    ef44:	42001400 	.word	0x42001400
    ef48:	20000ddc 	.word	0x20000ddc
    ef4c:	42001800 	.word	0x42001800
    ef50:	20000de0 	.word	0x20000de0
    ef54:	20000de4 	.word	0x20000de4
    ef58:	42001c00 	.word	0x42001c00
    ef5c:	20000d14 	.word	0x20000d14
    ef60:	20000000 	.word	0x20000000
    ef64:	00002de5 	.word	0x00002de5
    ef68:	20000c58 	.word	0x20000c58

0000ef6c <_ZN12Adafruit_GFX10writePixelEsst>:

void Adafruit_GFX::startWrite(){
    // Overwrite in subclasses if desired!
}

void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    ef6c:	b510      	push	{r4, lr}
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    ef6e:	6804      	ldr	r4, [r0, #0]
    ef70:	6924      	ldr	r4, [r4, #16]
    ef72:	47a0      	blx	r4
}
    ef74:	bd10      	pop	{r4, pc}
    ef76:	46c0      	nop			; (mov r8, r8)

0000ef78 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
}

void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    ef78:	b570      	push	{r4, r5, r6, lr}
    ef7a:	b082      	sub	sp, #8
    ef7c:	ac06      	add	r4, sp, #24
    ef7e:	2500      	movs	r5, #0
    ef80:	5f65      	ldrsh	r5, [r4, r5]
    ef82:	ac07      	add	r4, sp, #28
    ef84:	8826      	ldrh	r6, [r4, #0]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    ef86:	6804      	ldr	r4, [r0, #0]
    ef88:	9601      	str	r6, [sp, #4]
    ef8a:	9500      	str	r5, [sp, #0]
    ef8c:	6c24      	ldr	r4, [r4, #64]	; 0x40
    ef8e:	47a0      	blx	r4
}
    ef90:	b002      	add	sp, #8
    ef92:	bd70      	pop	{r4, r5, r6, pc}

0000ef94 <_ZN12Adafruit_GFX10startWriteEv>:

void Adafruit_GFX::endWrite(){
    // Overwrite in subclasses if startWrite is defined!
}
    ef94:	4770      	bx	lr
    ef96:	46c0      	nop			; (mov r8, r8)

0000ef98 <_ZN12Adafruit_GFX10fillScreenEt>:
        writeFastVLine(i, y, h, color);
    }
    endWrite();
}

void Adafruit_GFX::fillScreen(uint16_t color) {
    ef98:	b510      	push	{r4, lr}
    ef9a:	b082      	sub	sp, #8
    // Update in subclasses if desired!
    fillRect(0, 0, _width, _height, color);
    ef9c:	9101      	str	r1, [sp, #4]
    ef9e:	240e      	movs	r4, #14
    efa0:	5f01      	ldrsh	r1, [r0, r4]
    efa2:	220c      	movs	r2, #12
    efa4:	5e83      	ldrsh	r3, [r0, r2]
    efa6:	6802      	ldr	r2, [r0, #0]
    efa8:	9100      	str	r1, [sp, #0]
    efaa:	6c14      	ldr	r4, [r2, #64]	; 0x40
    efac:	2100      	movs	r1, #0
    efae:	2200      	movs	r2, #0
    efb0:	47a0      	blx	r4
}
    efb2:	b002      	add	sp, #8
    efb4:	bd10      	pop	{r4, pc}
    efb6:	46c0      	nop			; (mov r8, r8)

0000efb8 <_ZN12Adafruit_GFX13invertDisplayEb>:
    return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
    efb8:	4770      	bx	lr
    efba:	46c0      	nop			; (mov r8, r8)

0000efbc <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
    efbc:	2303      	movs	r3, #3
    efbe:	4019      	ands	r1, r3
    efc0:	7641      	strb	r1, [r0, #25]
    switch(rotation) {
    efc2:	2901      	cmp	r1, #1
    efc4:	d004      	beq.n	efd0 <_ZN12Adafruit_GFX11setRotationEh+0x14>
    efc6:	2903      	cmp	r1, #3
    efc8:	d002      	beq.n	efd0 <_ZN12Adafruit_GFX11setRotationEh+0x14>
            _width  = WIDTH;
    efca:	6883      	ldr	r3, [r0, #8]
    efcc:	60c3      	str	r3, [r0, #12]
}
    efce:	4770      	bx	lr
            _width  = HEIGHT;
    efd0:	8943      	ldrh	r3, [r0, #10]
    efd2:	8183      	strh	r3, [r0, #12]
            _height = WIDTH;
    efd4:	8903      	ldrh	r3, [r0, #8]
    efd6:	81c3      	strh	r3, [r0, #14]
}
    efd8:	e7f9      	b.n	efce <_ZN12Adafruit_GFX11setRotationEh+0x12>
    efda:	46c0      	nop			; (mov r8, r8)

0000efdc <_ZN12Adafruit_GFX13drawFastVLineEssst>:
        int16_t h, uint16_t color) {
    efdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    efde:	4647      	mov	r7, r8
    efe0:	46ce      	mov	lr, r9
    efe2:	b580      	push	{r7, lr}
    efe4:	b083      	sub	sp, #12
    efe6:	001c      	movs	r4, r3
    efe8:	ab0a      	add	r3, sp, #40	; 0x28
    efea:	881b      	ldrh	r3, [r3, #0]
    efec:	4690      	mov	r8, r2
    efee:	4699      	mov	r9, r3
    startWrite();
    eff0:	6803      	ldr	r3, [r0, #0]
    eff2:	4e10      	ldr	r6, [pc, #64]	; (f034 <_ZN12Adafruit_GFX13drawFastVLineEssst+0x58>)
    eff4:	695a      	ldr	r2, [r3, #20]
        int16_t h, uint16_t color) {
    eff6:	0005      	movs	r5, r0
    eff8:	000f      	movs	r7, r1
    effa:	42b2      	cmp	r2, r6
    effc:	d114      	bne.n	f028 <_ZN12Adafruit_GFX13drawFastVLineEssst+0x4c>
    writeLine(x, y, x, y+h-1, color);
    effe:	464a      	mov	r2, r9
    f000:	3c01      	subs	r4, #1
    f002:	4444      	add	r4, r8
    f004:	b224      	sxth	r4, r4
    f006:	9201      	str	r2, [sp, #4]
    f008:	9400      	str	r4, [sp, #0]
    f00a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    f00c:	4642      	mov	r2, r8
    f00e:	003b      	movs	r3, r7
    f010:	0039      	movs	r1, r7
    f012:	0028      	movs	r0, r5
    f014:	47a0      	blx	r4
    endWrite();
    f016:	682b      	ldr	r3, [r5, #0]
    f018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f01a:	42b3      	cmp	r3, r6
    f01c:	d107      	bne.n	f02e <_ZN12Adafruit_GFX13drawFastVLineEssst+0x52>
}
    f01e:	b003      	add	sp, #12
    f020:	bc0c      	pop	{r2, r3}
    f022:	4690      	mov	r8, r2
    f024:	4699      	mov	r9, r3
    f026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    startWrite();
    f028:	4790      	blx	r2
    f02a:	682b      	ldr	r3, [r5, #0]
    f02c:	e7e7      	b.n	effe <_ZN12Adafruit_GFX13drawFastVLineEssst+0x22>
    endWrite();
    f02e:	0028      	movs	r0, r5
    f030:	4798      	blx	r3
}
    f032:	e7f4      	b.n	f01e <_ZN12Adafruit_GFX13drawFastVLineEssst+0x42>
    f034:	0000ef95 	.word	0x0000ef95

0000f038 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
        int16_t w, uint16_t color) {
    f038:	b5f0      	push	{r4, r5, r6, r7, lr}
    f03a:	4647      	mov	r7, r8
    f03c:	46ce      	mov	lr, r9
    f03e:	b580      	push	{r7, lr}
    f040:	b083      	sub	sp, #12
    f042:	001c      	movs	r4, r3
    f044:	ab0a      	add	r3, sp, #40	; 0x28
    f046:	881b      	ldrh	r3, [r3, #0]
    f048:	4690      	mov	r8, r2
    startWrite();
    f04a:	6802      	ldr	r2, [r0, #0]
        int16_t w, uint16_t color) {
    f04c:	4699      	mov	r9, r3
    f04e:	4e10      	ldr	r6, [pc, #64]	; (f090 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x58>)
    startWrite();
    f050:	6953      	ldr	r3, [r2, #20]
        int16_t w, uint16_t color) {
    f052:	0005      	movs	r5, r0
    f054:	000f      	movs	r7, r1
    f056:	42b3      	cmp	r3, r6
    f058:	d114      	bne.n	f084 <_ZN12Adafruit_GFX13drawFastHLineEssst+0x4c>
    writeLine(x, y, x+w-1, y, color);
    f05a:	4649      	mov	r1, r9
    f05c:	9101      	str	r1, [sp, #4]
    f05e:	4641      	mov	r1, r8
    f060:	3c01      	subs	r4, #1
    f062:	9100      	str	r1, [sp, #0]
    f064:	19e4      	adds	r4, r4, r7
    f066:	b223      	sxth	r3, r4
    f068:	0039      	movs	r1, r7
    f06a:	6a94      	ldr	r4, [r2, #40]	; 0x28
    f06c:	0028      	movs	r0, r5
    f06e:	4642      	mov	r2, r8
    f070:	47a0      	blx	r4
    endWrite();
    f072:	682b      	ldr	r3, [r5, #0]
    f074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f076:	42b3      	cmp	r3, r6
    f078:	d107      	bne.n	f08a <_ZN12Adafruit_GFX13drawFastHLineEssst+0x52>
}
    f07a:	b003      	add	sp, #12
    f07c:	bc0c      	pop	{r2, r3}
    f07e:	4690      	mov	r8, r2
    f080:	4699      	mov	r9, r3
    f082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    startWrite();
    f084:	4798      	blx	r3
    f086:	682a      	ldr	r2, [r5, #0]
    f088:	e7e7      	b.n	f05a <_ZN12Adafruit_GFX13drawFastHLineEssst+0x22>
    endWrite();
    f08a:	0028      	movs	r0, r5
    f08c:	4798      	blx	r3
}
    f08e:	e7f4      	b.n	f07a <_ZN12Adafruit_GFX13drawFastHLineEssst+0x42>
    f090:	0000ef95 	.word	0x0000ef95

0000f094 <_ZN12Adafruit_GFX8fillRectEsssst>:
        uint16_t color) {
    f094:	b5f0      	push	{r4, r5, r6, r7, lr}
    f096:	4657      	mov	r7, sl
    f098:	464e      	mov	r6, r9
    f09a:	4645      	mov	r5, r8
    f09c:	46de      	mov	lr, fp
    f09e:	b5e0      	push	{r5, r6, r7, lr}
    f0a0:	b085      	sub	sp, #20
    f0a2:	001e      	movs	r6, r3
    f0a4:	ab0e      	add	r3, sp, #56	; 0x38
    f0a6:	4691      	mov	r9, r2
    f0a8:	2200      	movs	r2, #0
    f0aa:	5e9b      	ldrsh	r3, [r3, r2]
    f0ac:	4f2b      	ldr	r7, [pc, #172]	; (f15c <_ZN12Adafruit_GFX8fillRectEsssst+0xc8>)
    f0ae:	9303      	str	r3, [sp, #12]
    f0b0:	ab0f      	add	r3, sp, #60	; 0x3c
    f0b2:	881b      	ldrh	r3, [r3, #0]
    f0b4:	0005      	movs	r5, r0
    f0b6:	469a      	mov	sl, r3
    startWrite();
    f0b8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
    f0ba:	000c      	movs	r4, r1
    startWrite();
    f0bc:	695a      	ldr	r2, [r3, #20]
    f0be:	42ba      	cmp	r2, r7
    f0c0:	d145      	bne.n	f14e <_ZN12Adafruit_GFX8fillRectEsssst+0xba>
    for (int16_t i=x; i<x+w; i++) {
    f0c2:	46b0      	mov	r8, r6
    f0c4:	44a0      	add	r8, r4
    f0c6:	45a0      	cmp	r8, r4
    f0c8:	dd2f      	ble.n	f12a <_ZN12Adafruit_GFX8fillRectEsssst+0x96>
    f0ca:	4a25      	ldr	r2, [pc, #148]	; (f160 <_ZN12Adafruit_GFX8fillRectEsssst+0xcc>)
    f0cc:	4693      	mov	fp, r2
    writeLine(x, y, x, y+h-1, color);
    f0ce:	9a03      	ldr	r2, [sp, #12]
    f0d0:	3a01      	subs	r2, #1
    f0d2:	444a      	add	r2, r9
    f0d4:	b212      	sxth	r2, r2
    f0d6:	9202      	str	r2, [sp, #8]
    f0d8:	e018      	b.n	f10c <_ZN12Adafruit_GFX8fillRectEsssst+0x78>
    drawFastVLine(x, y, h, color);
    f0da:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    f0dc:	4a21      	ldr	r2, [pc, #132]	; (f164 <_ZN12Adafruit_GFX8fillRectEsssst+0xd0>)
    f0de:	4296      	cmp	r6, r2
    f0e0:	d117      	bne.n	f112 <_ZN12Adafruit_GFX8fillRectEsssst+0x7e>
    startWrite();
    f0e2:	695a      	ldr	r2, [r3, #20]
    f0e4:	42ba      	cmp	r2, r7
    f0e6:	d12e      	bne.n	f146 <_ZN12Adafruit_GFX8fillRectEsssst+0xb2>
    writeLine(x, y, x, y+h-1, color);
    f0e8:	4652      	mov	r2, sl
    f0ea:	9201      	str	r2, [sp, #4]
    f0ec:	9a02      	ldr	r2, [sp, #8]
    f0ee:	0021      	movs	r1, r4
    f0f0:	9200      	str	r2, [sp, #0]
    f0f2:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    f0f4:	464a      	mov	r2, r9
    f0f6:	0023      	movs	r3, r4
    f0f8:	0028      	movs	r0, r5
    f0fa:	47b0      	blx	r6
    endWrite();
    f0fc:	682b      	ldr	r3, [r5, #0]
    f0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f100:	42ba      	cmp	r2, r7
    f102:	d11c      	bne.n	f13e <_ZN12Adafruit_GFX8fillRectEsssst+0xaa>
    f104:	3401      	adds	r4, #1
    f106:	b224      	sxth	r4, r4
    for (int16_t i=x; i<x+w; i++) {
    f108:	4544      	cmp	r4, r8
    f10a:	da0e      	bge.n	f12a <_ZN12Adafruit_GFX8fillRectEsssst+0x96>
        writeFastVLine(i, y, h, color);
    f10c:	6a1e      	ldr	r6, [r3, #32]
    f10e:	455e      	cmp	r6, fp
    f110:	d0e3      	beq.n	f0da <_ZN12Adafruit_GFX8fillRectEsssst+0x46>
    f112:	4653      	mov	r3, sl
    f114:	0021      	movs	r1, r4
    f116:	3401      	adds	r4, #1
    f118:	9300      	str	r3, [sp, #0]
    f11a:	464a      	mov	r2, r9
    f11c:	9b03      	ldr	r3, [sp, #12]
    f11e:	0028      	movs	r0, r5
    f120:	b224      	sxth	r4, r4
    f122:	47b0      	blx	r6
    f124:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
    f126:	4544      	cmp	r4, r8
    f128:	dbf0      	blt.n	f10c <_ZN12Adafruit_GFX8fillRectEsssst+0x78>
    endWrite();
    f12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f12c:	42bb      	cmp	r3, r7
    f12e:	d111      	bne.n	f154 <_ZN12Adafruit_GFX8fillRectEsssst+0xc0>
}
    f130:	b005      	add	sp, #20
    f132:	bc3c      	pop	{r2, r3, r4, r5}
    f134:	4690      	mov	r8, r2
    f136:	4699      	mov	r9, r3
    f138:	46a2      	mov	sl, r4
    f13a:	46ab      	mov	fp, r5
    f13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    endWrite();
    f13e:	0028      	movs	r0, r5
    f140:	4790      	blx	r2
    f142:	682b      	ldr	r3, [r5, #0]
    f144:	e7de      	b.n	f104 <_ZN12Adafruit_GFX8fillRectEsssst+0x70>
    startWrite();
    f146:	0028      	movs	r0, r5
    f148:	4790      	blx	r2
    f14a:	682b      	ldr	r3, [r5, #0]
    f14c:	e7cc      	b.n	f0e8 <_ZN12Adafruit_GFX8fillRectEsssst+0x54>
    startWrite();
    f14e:	4790      	blx	r2
    f150:	682b      	ldr	r3, [r5, #0]
    f152:	e7b6      	b.n	f0c2 <_ZN12Adafruit_GFX8fillRectEsssst+0x2e>
    endWrite();
    f154:	0028      	movs	r0, r5
    f156:	4798      	blx	r3
}
    f158:	e7ea      	b.n	f130 <_ZN12Adafruit_GFX8fillRectEsssst+0x9c>
    f15a:	46c0      	nop			; (mov r8, r8)
    f15c:	0000ef95 	.word	0x0000ef95
    f160:	0000f2b5 	.word	0x0000f2b5
    f164:	0000efdd 	.word	0x0000efdd

0000f168 <_ZN12Adafruit_GFX9writeLineEsssst>:
        uint16_t color) {
    f168:	b5f0      	push	{r4, r5, r6, r7, lr}
    f16a:	4657      	mov	r7, sl
    f16c:	464e      	mov	r6, r9
    f16e:	4645      	mov	r5, r8
    f170:	46de      	mov	lr, fp
    f172:	b5e0      	push	{r5, r6, r7, lr}
    f174:	001e      	movs	r6, r3
    f176:	b085      	sub	sp, #20
    f178:	ab0e      	add	r3, sp, #56	; 0x38
    f17a:	2500      	movs	r5, #0
    f17c:	5f5d      	ldrsh	r5, [r3, r5]
    f17e:	ab0f      	add	r3, sp, #60	; 0x3c
    f180:	881b      	ldrh	r3, [r3, #0]
    f182:	0017      	movs	r7, r2
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    f184:	4694      	mov	ip, r2
    f186:	1aaa      	subs	r2, r5, r2
        uint16_t color) {
    f188:	9300      	str	r3, [sp, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    f18a:	17d3      	asrs	r3, r2, #31
    f18c:	18d2      	adds	r2, r2, r3
    f18e:	405a      	eors	r2, r3
    f190:	1a73      	subs	r3, r6, r1
        uint16_t color) {
    f192:	4680      	mov	r8, r0
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    f194:	17d8      	asrs	r0, r3, #31
    f196:	181b      	adds	r3, r3, r0
    f198:	4043      	eors	r3, r0
    f19a:	46aa      	mov	sl, r5
    f19c:	0034      	movs	r4, r6
    f19e:	468b      	mov	fp, r1
    f1a0:	4699      	mov	r9, r3
    if (steep) {
    f1a2:	429a      	cmp	r2, r3
    f1a4:	dc06      	bgt.n	f1b4 <_ZN12Adafruit_GFX9writeLineEsssst+0x4c>
    f1a6:	002c      	movs	r4, r5
    f1a8:	46bb      	mov	fp, r7
    f1aa:	0035      	movs	r5, r6
    f1ac:	000f      	movs	r7, r1
    f1ae:	4691      	mov	r9, r2
    f1b0:	4656      	mov	r6, sl
    f1b2:	4661      	mov	r1, ip
    if (x0 > x1) {
    f1b4:	42af      	cmp	r7, r5
    f1b6:	dd3f      	ble.n	f238 <_ZN12Adafruit_GFX9writeLineEsssst+0xd0>
    f1b8:	4658      	mov	r0, fp
    f1ba:	1b00      	subs	r0, r0, r4
    f1bc:	17c4      	asrs	r4, r0, #31
    f1be:	1900      	adds	r0, r0, r4
    f1c0:	4060      	eors	r0, r4
    f1c2:	4681      	mov	r9, r0
    dx = x1 - x0;
    f1c4:	1b78      	subs	r0, r7, r5
    f1c6:	b280      	uxth	r0, r0
    f1c8:	9001      	str	r0, [sp, #4]
    int16_t err = dx / 2;
    f1ca:	b200      	sxth	r0, r0
    f1cc:	0fc4      	lsrs	r4, r0, #31
    f1ce:	1824      	adds	r4, r4, r0
    f1d0:	1064      	asrs	r4, r4, #1
    if (y0 < y1) {
    f1d2:	42b1      	cmp	r1, r6
    f1d4:	dd60      	ble.n	f298 <_ZN12Adafruit_GFX9writeLineEsssst+0x130>
    f1d6:	2101      	movs	r1, #1
    f1d8:	9102      	str	r1, [sp, #8]
    f1da:	4649      	mov	r1, r9
    f1dc:	4668      	mov	r0, sp
    f1de:	81c1      	strh	r1, [r0, #14]
    f1e0:	89c1      	ldrh	r1, [r0, #14]
    f1e2:	4689      	mov	r9, r1
    f1e4:	429a      	cmp	r2, r3
    f1e6:	dc35      	bgt.n	f254 <_ZN12Adafruit_GFX9writeLineEsssst+0xec>
    f1e8:	4b30      	ldr	r3, [pc, #192]	; (f2ac <_ZN12Adafruit_GFX9writeLineEsssst+0x144>)
    f1ea:	46bb      	mov	fp, r7
    f1ec:	469a      	mov	sl, r3
    f1ee:	0037      	movs	r7, r6
            writePixel(x0, y0, color);
    f1f0:	4643      	mov	r3, r8
    f1f2:	681b      	ldr	r3, [r3, #0]
    f1f4:	699e      	ldr	r6, [r3, #24]
    f1f6:	4556      	cmp	r6, sl
    f1f8:	d100      	bne.n	f1fc <_ZN12Adafruit_GFX9writeLineEsssst+0x94>
    drawPixel(x, y, color);
    f1fa:	691e      	ldr	r6, [r3, #16]
    f1fc:	9b00      	ldr	r3, [sp, #0]
    f1fe:	003a      	movs	r2, r7
    f200:	0029      	movs	r1, r5
    f202:	4640      	mov	r0, r8
    f204:	47b0      	blx	r6
        err -= dy;
    f206:	464b      	mov	r3, r9
    f208:	1ae4      	subs	r4, r4, r3
    f20a:	b2a3      	uxth	r3, r4
    f20c:	b21c      	sxth	r4, r3
        if (err < 0) {
    f20e:	2c00      	cmp	r4, #0
    f210:	da07      	bge.n	f222 <_ZN12Adafruit_GFX9writeLineEsssst+0xba>
            y0 += ystep;
    f212:	9a02      	ldr	r2, [sp, #8]
    f214:	4694      	mov	ip, r2
            err += dx;
    f216:	9a01      	ldr	r2, [sp, #4]
            y0 += ystep;
    f218:	4467      	add	r7, ip
            err += dx;
    f21a:	4694      	mov	ip, r2
    f21c:	4463      	add	r3, ip
            y0 += ystep;
    f21e:	b23f      	sxth	r7, r7
            err += dx;
    f220:	b21c      	sxth	r4, r3
    f222:	3501      	adds	r5, #1
    f224:	b22d      	sxth	r5, r5
    for (; x0<=x1; x0++) {
    f226:	45ab      	cmp	fp, r5
    f228:	dae2      	bge.n	f1f0 <_ZN12Adafruit_GFX9writeLineEsssst+0x88>
}
    f22a:	b005      	add	sp, #20
    f22c:	bc3c      	pop	{r2, r3, r4, r5}
    f22e:	4690      	mov	r8, r2
    f230:	4699      	mov	r9, r3
    f232:	46a2      	mov	sl, r4
    f234:	46ab      	mov	fp, r5
    f236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dx = x1 - x0;
    f238:	1be8      	subs	r0, r5, r7
    f23a:	b280      	uxth	r0, r0
    f23c:	9001      	str	r0, [sp, #4]
    int16_t err = dx / 2;
    f23e:	b200      	sxth	r0, r0
    f240:	0fc4      	lsrs	r4, r0, #31
    f242:	1824      	adds	r4, r4, r0
    f244:	1064      	asrs	r4, r4, #1
    if (y0 < y1) {
    f246:	42b1      	cmp	r1, r6
    f248:	da29      	bge.n	f29e <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
    f24a:	000e      	movs	r6, r1
    f24c:	0029      	movs	r1, r5
    f24e:	003d      	movs	r5, r7
    f250:	000f      	movs	r7, r1
    f252:	e7c0      	b.n	f1d6 <_ZN12Adafruit_GFX9writeLineEsssst+0x6e>
    f254:	4b15      	ldr	r3, [pc, #84]	; (f2ac <_ZN12Adafruit_GFX9writeLineEsssst+0x144>)
    f256:	46bb      	mov	fp, r7
    f258:	469a      	mov	sl, r3
    f25a:	0037      	movs	r7, r6
            writePixel(y0, x0, color);
    f25c:	4643      	mov	r3, r8
    f25e:	681b      	ldr	r3, [r3, #0]
    f260:	699e      	ldr	r6, [r3, #24]
    f262:	4556      	cmp	r6, sl
    f264:	d100      	bne.n	f268 <_ZN12Adafruit_GFX9writeLineEsssst+0x100>
    drawPixel(x, y, color);
    f266:	691e      	ldr	r6, [r3, #16]
            writePixel(y0, x0, color);
    f268:	9b00      	ldr	r3, [sp, #0]
    f26a:	002a      	movs	r2, r5
    f26c:	0039      	movs	r1, r7
    f26e:	4640      	mov	r0, r8
    f270:	47b0      	blx	r6
        err -= dy;
    f272:	464b      	mov	r3, r9
    f274:	1ae4      	subs	r4, r4, r3
    f276:	b2a3      	uxth	r3, r4
    f278:	b21c      	sxth	r4, r3
        if (err < 0) {
    f27a:	2c00      	cmp	r4, #0
    f27c:	da07      	bge.n	f28e <_ZN12Adafruit_GFX9writeLineEsssst+0x126>
            y0 += ystep;
    f27e:	9a02      	ldr	r2, [sp, #8]
    f280:	4694      	mov	ip, r2
            err += dx;
    f282:	9a01      	ldr	r2, [sp, #4]
            y0 += ystep;
    f284:	4467      	add	r7, ip
            err += dx;
    f286:	4694      	mov	ip, r2
    f288:	4463      	add	r3, ip
            y0 += ystep;
    f28a:	b23f      	sxth	r7, r7
            err += dx;
    f28c:	b21c      	sxth	r4, r3
    f28e:	3501      	adds	r5, #1
    f290:	b22d      	sxth	r5, r5
    for (; x0<=x1; x0++) {
    f292:	45ab      	cmp	fp, r5
    f294:	dae2      	bge.n	f25c <_ZN12Adafruit_GFX9writeLineEsssst+0xf4>
    f296:	e7c8      	b.n	f22a <_ZN12Adafruit_GFX9writeLineEsssst+0xc2>
    f298:	4905      	ldr	r1, [pc, #20]	; (f2b0 <_ZN12Adafruit_GFX9writeLineEsssst+0x148>)
    f29a:	9102      	str	r1, [sp, #8]
    f29c:	e79d      	b.n	f1da <_ZN12Adafruit_GFX9writeLineEsssst+0x72>
    if (y0 < y1) {
    f29e:	000e      	movs	r6, r1
    f2a0:	0029      	movs	r1, r5
    f2a2:	003d      	movs	r5, r7
    f2a4:	000f      	movs	r7, r1
    f2a6:	4902      	ldr	r1, [pc, #8]	; (f2b0 <_ZN12Adafruit_GFX9writeLineEsssst+0x148>)
    f2a8:	9102      	str	r1, [sp, #8]
    f2aa:	e796      	b.n	f1da <_ZN12Adafruit_GFX9writeLineEsssst+0x72>
    f2ac:	0000ef6d 	.word	0x0000ef6d
    f2b0:	0000ffff 	.word	0x0000ffff

0000f2b4 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
        int16_t h, uint16_t color) {
    f2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2b6:	4647      	mov	r7, r8
    f2b8:	46ce      	mov	lr, r9
    f2ba:	b580      	push	{r7, lr}
    f2bc:	b083      	sub	sp, #12
    f2be:	001c      	movs	r4, r3
    f2c0:	ab0a      	add	r3, sp, #40	; 0x28
    f2c2:	881b      	ldrh	r3, [r3, #0]
    f2c4:	0017      	movs	r7, r2
    f2c6:	4699      	mov	r9, r3
    drawFastVLine(x, y, h, color);
    f2c8:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
    f2ca:	0005      	movs	r5, r0
    drawFastVLine(x, y, h, color);
    f2cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        int16_t h, uint16_t color) {
    f2ce:	000e      	movs	r6, r1
    drawFastVLine(x, y, h, color);
    f2d0:	4690      	mov	r8, r2
    f2d2:	4a14      	ldr	r2, [pc, #80]	; (f324 <_ZN12Adafruit_GFX14writeFastVLineEssst+0x70>)
    f2d4:	4590      	cmp	r8, r2
    f2d6:	d119      	bne.n	f30c <_ZN12Adafruit_GFX14writeFastVLineEssst+0x58>
    f2d8:	4913      	ldr	r1, [pc, #76]	; (f328 <_ZN12Adafruit_GFX14writeFastVLineEssst+0x74>)
    startWrite();
    f2da:	695a      	ldr	r2, [r3, #20]
    f2dc:	4688      	mov	r8, r1
    f2de:	428a      	cmp	r2, r1
    f2e0:	d11d      	bne.n	f31e <_ZN12Adafruit_GFX14writeFastVLineEssst+0x6a>
    writeLine(x, y, x, y+h-1, color);
    f2e2:	464a      	mov	r2, r9
    f2e4:	3c01      	subs	r4, #1
    f2e6:	19e4      	adds	r4, r4, r7
    f2e8:	b224      	sxth	r4, r4
    f2ea:	9201      	str	r2, [sp, #4]
    f2ec:	9400      	str	r4, [sp, #0]
    f2ee:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    f2f0:	003a      	movs	r2, r7
    f2f2:	0033      	movs	r3, r6
    f2f4:	0031      	movs	r1, r6
    f2f6:	0028      	movs	r0, r5
    f2f8:	47a0      	blx	r4
    endWrite();
    f2fa:	682b      	ldr	r3, [r5, #0]
    f2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f2fe:	4543      	cmp	r3, r8
    f300:	d10a      	bne.n	f318 <_ZN12Adafruit_GFX14writeFastVLineEssst+0x64>
}
    f302:	b003      	add	sp, #12
    f304:	bc0c      	pop	{r2, r3}
    f306:	4690      	mov	r8, r2
    f308:	4699      	mov	r9, r3
    f30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    drawFastVLine(x, y, h, color);
    f30c:	464b      	mov	r3, r9
    f30e:	003a      	movs	r2, r7
    f310:	9300      	str	r3, [sp, #0]
    f312:	0023      	movs	r3, r4
    f314:	47c0      	blx	r8
}
    f316:	e7f4      	b.n	f302 <_ZN12Adafruit_GFX14writeFastVLineEssst+0x4e>
    endWrite();
    f318:	0028      	movs	r0, r5
    f31a:	4798      	blx	r3
    f31c:	e7f1      	b.n	f302 <_ZN12Adafruit_GFX14writeFastVLineEssst+0x4e>
    startWrite();
    f31e:	4790      	blx	r2
    f320:	682b      	ldr	r3, [r5, #0]
    f322:	e7de      	b.n	f2e2 <_ZN12Adafruit_GFX14writeFastVLineEssst+0x2e>
    f324:	0000efdd 	.word	0x0000efdd
    f328:	0000ef95 	.word	0x0000ef95

0000f32c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
        int16_t w, uint16_t color) {
    f32c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f32e:	4647      	mov	r7, r8
    f330:	46ce      	mov	lr, r9
    f332:	b580      	push	{r7, lr}
    f334:	b083      	sub	sp, #12
    f336:	001c      	movs	r4, r3
    f338:	ab0a      	add	r3, sp, #40	; 0x28
    f33a:	881b      	ldrh	r3, [r3, #0]
    f33c:	0017      	movs	r7, r2
    drawFastHLine(x, y, w, color);
    f33e:	6802      	ldr	r2, [r0, #0]
        int16_t w, uint16_t color) {
    f340:	4699      	mov	r9, r3
    drawFastHLine(x, y, w, color);
    f342:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
        int16_t w, uint16_t color) {
    f344:	0005      	movs	r5, r0
    drawFastHLine(x, y, w, color);
    f346:	4698      	mov	r8, r3
    f348:	4b14      	ldr	r3, [pc, #80]	; (f39c <_ZN12Adafruit_GFX14writeFastHLineEssst+0x70>)
        int16_t w, uint16_t color) {
    f34a:	000e      	movs	r6, r1
    f34c:	4598      	cmp	r8, r3
    f34e:	d118      	bne.n	f382 <_ZN12Adafruit_GFX14writeFastHLineEssst+0x56>
    f350:	4913      	ldr	r1, [pc, #76]	; (f3a0 <_ZN12Adafruit_GFX14writeFastHLineEssst+0x74>)
    startWrite();
    f352:	6953      	ldr	r3, [r2, #20]
    f354:	4688      	mov	r8, r1
    f356:	428b      	cmp	r3, r1
    f358:	d11c      	bne.n	f394 <_ZN12Adafruit_GFX14writeFastHLineEssst+0x68>
    writeLine(x, y, x+w-1, y, color);
    f35a:	4649      	mov	r1, r9
    f35c:	3c01      	subs	r4, #1
    f35e:	9101      	str	r1, [sp, #4]
    f360:	19a4      	adds	r4, r4, r6
    f362:	9700      	str	r7, [sp, #0]
    f364:	b223      	sxth	r3, r4
    f366:	0031      	movs	r1, r6
    f368:	6a94      	ldr	r4, [r2, #40]	; 0x28
    f36a:	0028      	movs	r0, r5
    f36c:	003a      	movs	r2, r7
    f36e:	47a0      	blx	r4
    endWrite();
    f370:	682b      	ldr	r3, [r5, #0]
    f372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f374:	4543      	cmp	r3, r8
    f376:	d10a      	bne.n	f38e <_ZN12Adafruit_GFX14writeFastHLineEssst+0x62>
}
    f378:	b003      	add	sp, #12
    f37a:	bc0c      	pop	{r2, r3}
    f37c:	4690      	mov	r8, r2
    f37e:	4699      	mov	r9, r3
    f380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    drawFastHLine(x, y, w, color);
    f382:	464b      	mov	r3, r9
    f384:	003a      	movs	r2, r7
    f386:	9300      	str	r3, [sp, #0]
    f388:	0023      	movs	r3, r4
    f38a:	47c0      	blx	r8
}
    f38c:	e7f4      	b.n	f378 <_ZN12Adafruit_GFX14writeFastHLineEssst+0x4c>
    endWrite();
    f38e:	0028      	movs	r0, r5
    f390:	4798      	blx	r3
    f392:	e7f1      	b.n	f378 <_ZN12Adafruit_GFX14writeFastHLineEssst+0x4c>
    startWrite();
    f394:	4798      	blx	r3
    f396:	682a      	ldr	r2, [r5, #0]
    f398:	e7df      	b.n	f35a <_ZN12Adafruit_GFX14writeFastHLineEssst+0x2e>
    f39a:	46c0      	nop			; (mov r8, r8)
    f39c:	0000f039 	.word	0x0000f039
    f3a0:	0000ef95 	.word	0x0000ef95

0000f3a4 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
    f3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3a6:	4646      	mov	r6, r8
    f3a8:	46d6      	mov	lr, sl
    f3aa:	464f      	mov	r7, r9
    f3ac:	b5c0      	push	{r6, r7, lr}
    f3ae:	b084      	sub	sp, #16
    f3b0:	001f      	movs	r7, r3
    f3b2:	ab0c      	add	r3, sp, #48	; 0x30
    f3b4:	0015      	movs	r5, r2
    f3b6:	2200      	movs	r2, #0
    f3b8:	5e9b      	ldrsh	r3, [r3, r2]
    f3ba:	0006      	movs	r6, r0
    f3bc:	4698      	mov	r8, r3
    f3be:	ab0d      	add	r3, sp, #52	; 0x34
    f3c0:	881b      	ldrh	r3, [r3, #0]
    f3c2:	000c      	movs	r4, r1
    f3c4:	469a      	mov	sl, r3
    if(x0 == x1){
    f3c6:	42b9      	cmp	r1, r7
    f3c8:	d044      	beq.n	f454 <_ZN12Adafruit_GFX8drawLineEsssst+0xb0>
    } else if(y0 == y1){
    f3ca:	4545      	cmp	r5, r8
    f3cc:	d01a      	beq.n	f404 <_ZN12Adafruit_GFX8drawLineEsssst+0x60>
        startWrite();
    f3ce:	6803      	ldr	r3, [r0, #0]
    f3d0:	4942      	ldr	r1, [pc, #264]	; (f4dc <_ZN12Adafruit_GFX8drawLineEsssst+0x138>)
    f3d2:	695a      	ldr	r2, [r3, #20]
    f3d4:	4689      	mov	r9, r1
    f3d6:	428a      	cmp	r2, r1
    f3d8:	d165      	bne.n	f4a6 <_ZN12Adafruit_GFX8drawLineEsssst+0x102>
        writeLine(x0, y0, x1, y1, color);
    f3da:	4652      	mov	r2, sl
    f3dc:	9201      	str	r2, [sp, #4]
    f3de:	4642      	mov	r2, r8
    f3e0:	9200      	str	r2, [sp, #0]
    f3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f3e4:	002a      	movs	r2, r5
    f3e6:	4698      	mov	r8, r3
    f3e8:	0021      	movs	r1, r4
    f3ea:	003b      	movs	r3, r7
    f3ec:	0030      	movs	r0, r6
    f3ee:	47c0      	blx	r8
        endWrite();
    f3f0:	6833      	ldr	r3, [r6, #0]
    f3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f3f4:	454b      	cmp	r3, r9
    f3f6:	d12a      	bne.n	f44e <_ZN12Adafruit_GFX8drawLineEsssst+0xaa>
}
    f3f8:	b004      	add	sp, #16
    f3fa:	bc1c      	pop	{r2, r3, r4}
    f3fc:	4690      	mov	r8, r2
    f3fe:	4699      	mov	r9, r3
    f400:	46a2      	mov	sl, r4
    f402:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(x0 > x1) _swap_int16_t(x0, x1);
    f404:	42b9      	cmp	r1, r7
    f406:	dc02      	bgt.n	f40e <_ZN12Adafruit_GFX8drawLineEsssst+0x6a>
    f408:	003b      	movs	r3, r7
    f40a:	000f      	movs	r7, r1
    f40c:	001c      	movs	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    f40e:	6832      	ldr	r2, [r6, #0]
    f410:	3401      	adds	r4, #1
    f412:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    f414:	4699      	mov	r9, r3
    f416:	b2bb      	uxth	r3, r7
    f418:	1ae4      	subs	r4, r4, r3
    f41a:	4698      	mov	r8, r3
    f41c:	4b30      	ldr	r3, [pc, #192]	; (f4e0 <_ZN12Adafruit_GFX8drawLineEsssst+0x13c>)
    f41e:	b2a4      	uxth	r4, r4
    f420:	4599      	cmp	r9, r3
    f422:	d143      	bne.n	f4ac <_ZN12Adafruit_GFX8drawLineEsssst+0x108>
    f424:	492d      	ldr	r1, [pc, #180]	; (f4dc <_ZN12Adafruit_GFX8drawLineEsssst+0x138>)
    startWrite();
    f426:	6953      	ldr	r3, [r2, #20]
    f428:	4689      	mov	r9, r1
    f42a:	428b      	cmp	r3, r1
    f42c:	d14e      	bne.n	f4cc <_ZN12Adafruit_GFX8drawLineEsssst+0x128>
    writeLine(x, y, x+w-1, y, color);
    f42e:	4643      	mov	r3, r8
    f430:	4651      	mov	r1, sl
    f432:	3b01      	subs	r3, #1
    f434:	9101      	str	r1, [sp, #4]
    f436:	18e3      	adds	r3, r4, r3
    f438:	9500      	str	r5, [sp, #0]
    f43a:	b21b      	sxth	r3, r3
    f43c:	6a94      	ldr	r4, [r2, #40]	; 0x28
    f43e:	0039      	movs	r1, r7
    f440:	002a      	movs	r2, r5
    f442:	0030      	movs	r0, r6
    f444:	47a0      	blx	r4
    endWrite();
    f446:	6833      	ldr	r3, [r6, #0]
    f448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f44a:	454b      	cmp	r3, r9
    f44c:	d0d4      	beq.n	f3f8 <_ZN12Adafruit_GFX8drawLineEsssst+0x54>
        endWrite();
    f44e:	0030      	movs	r0, r6
    f450:	4798      	blx	r3
}
    f452:	e7d1      	b.n	f3f8 <_ZN12Adafruit_GFX8drawLineEsssst+0x54>
        if(y0 > y1) _swap_int16_t(y0, y1);
    f454:	4545      	cmp	r5, r8
    f456:	dd22      	ble.n	f49e <_ZN12Adafruit_GFX8drawLineEsssst+0xfa>
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    f458:	6832      	ldr	r2, [r6, #0]
    f45a:	4669      	mov	r1, sp
    f45c:	6b93      	ldr	r3, [r2, #56]	; 0x38
    f45e:	3501      	adds	r5, #1
    f460:	4699      	mov	r9, r3
    f462:	4643      	mov	r3, r8
    f464:	81cb      	strh	r3, [r1, #14]
    f466:	89cf      	ldrh	r7, [r1, #14]
    f468:	4b1e      	ldr	r3, [pc, #120]	; (f4e4 <_ZN12Adafruit_GFX8drawLineEsssst+0x140>)
    f46a:	1bed      	subs	r5, r5, r7
    f46c:	b2ad      	uxth	r5, r5
    f46e:	4599      	cmp	r9, r3
    f470:	d124      	bne.n	f4bc <_ZN12Adafruit_GFX8drawLineEsssst+0x118>
    f472:	491a      	ldr	r1, [pc, #104]	; (f4dc <_ZN12Adafruit_GFX8drawLineEsssst+0x138>)
    startWrite();
    f474:	6953      	ldr	r3, [r2, #20]
    f476:	4689      	mov	r9, r1
    f478:	428b      	cmp	r3, r1
    f47a:	d12b      	bne.n	f4d4 <_ZN12Adafruit_GFX8drawLineEsssst+0x130>
    writeLine(x, y, x, y+h-1, color);
    f47c:	4653      	mov	r3, sl
    f47e:	3f01      	subs	r7, #1
    f480:	19ef      	adds	r7, r5, r7
    f482:	b23f      	sxth	r7, r7
    f484:	9301      	str	r3, [sp, #4]
    f486:	9700      	str	r7, [sp, #0]
    f488:	6a95      	ldr	r5, [r2, #40]	; 0x28
    f48a:	0023      	movs	r3, r4
    f48c:	4642      	mov	r2, r8
    f48e:	0021      	movs	r1, r4
    f490:	0030      	movs	r0, r6
    f492:	47a8      	blx	r5
    endWrite();
    f494:	6833      	ldr	r3, [r6, #0]
    f496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f498:	454b      	cmp	r3, r9
    f49a:	d0ad      	beq.n	f3f8 <_ZN12Adafruit_GFX8drawLineEsssst+0x54>
    f49c:	e7d7      	b.n	f44e <_ZN12Adafruit_GFX8drawLineEsssst+0xaa>
        if(y0 > y1) _swap_int16_t(y0, y1);
    f49e:	4643      	mov	r3, r8
    f4a0:	46a8      	mov	r8, r5
    f4a2:	001d      	movs	r5, r3
    f4a4:	e7d8      	b.n	f458 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
        startWrite();
    f4a6:	4790      	blx	r2
    f4a8:	6833      	ldr	r3, [r6, #0]
    f4aa:	e796      	b.n	f3da <_ZN12Adafruit_GFX8drawLineEsssst+0x36>
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    f4ac:	4652      	mov	r2, sl
    f4ae:	b223      	sxth	r3, r4
    f4b0:	9200      	str	r2, [sp, #0]
    f4b2:	0039      	movs	r1, r7
    f4b4:	002a      	movs	r2, r5
    f4b6:	0030      	movs	r0, r6
    f4b8:	47c8      	blx	r9
    f4ba:	e79d      	b.n	f3f8 <_ZN12Adafruit_GFX8drawLineEsssst+0x54>
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    f4bc:	4652      	mov	r2, sl
    f4be:	b22b      	sxth	r3, r5
    f4c0:	9200      	str	r2, [sp, #0]
    f4c2:	0021      	movs	r1, r4
    f4c4:	4642      	mov	r2, r8
    f4c6:	0030      	movs	r0, r6
    f4c8:	47c8      	blx	r9
    f4ca:	e795      	b.n	f3f8 <_ZN12Adafruit_GFX8drawLineEsssst+0x54>
    startWrite();
    f4cc:	0030      	movs	r0, r6
    f4ce:	4798      	blx	r3
    f4d0:	6832      	ldr	r2, [r6, #0]
    f4d2:	e7ac      	b.n	f42e <_ZN12Adafruit_GFX8drawLineEsssst+0x8a>
    startWrite();
    f4d4:	0030      	movs	r0, r6
    f4d6:	4798      	blx	r3
    f4d8:	6832      	ldr	r2, [r6, #0]
    f4da:	e7cf      	b.n	f47c <_ZN12Adafruit_GFX8drawLineEsssst+0xd8>
    f4dc:	0000ef95 	.word	0x0000ef95
    f4e0:	0000f039 	.word	0x0000f039
    f4e4:	0000efdd 	.word	0x0000efdd

0000f4e8 <_ZN12Adafruit_GFX8drawRectEsssst>:
        uint16_t color) {
    f4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4ea:	464e      	mov	r6, r9
    f4ec:	4645      	mov	r5, r8
    f4ee:	4657      	mov	r7, sl
    f4f0:	46de      	mov	lr, fp
    f4f2:	b5e0      	push	{r5, r6, r7, lr}
    f4f4:	b085      	sub	sp, #20
    f4f6:	001d      	movs	r5, r3
    f4f8:	ab0e      	add	r3, sp, #56	; 0x38
    f4fa:	4690      	mov	r8, r2
    f4fc:	2200      	movs	r2, #0
    f4fe:	5e9b      	ldrsh	r3, [r3, r2]
    f500:	4f50      	ldr	r7, [pc, #320]	; (f644 <_ZN12Adafruit_GFX8drawRectEsssst+0x15c>)
    f502:	9302      	str	r3, [sp, #8]
    f504:	ab0f      	add	r3, sp, #60	; 0x3c
    f506:	881b      	ldrh	r3, [r3, #0]
    f508:	0004      	movs	r4, r0
    f50a:	4699      	mov	r9, r3
    startWrite();
    f50c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
    f50e:	000e      	movs	r6, r1
    startWrite();
    f510:	695a      	ldr	r2, [r3, #20]
    f512:	42ba      	cmp	r2, r7
    f514:	d000      	beq.n	f518 <_ZN12Adafruit_GFX8drawRectEsssst+0x30>
    f516:	e077      	b.n	f608 <_ZN12Adafruit_GFX8drawRectEsssst+0x120>
    writeFastHLine(x, y, w, color);
    f518:	464a      	mov	r2, r9
    f51a:	9200      	str	r2, [sp, #0]
    f51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f51e:	4642      	mov	r2, r8
    f520:	469a      	mov	sl, r3
    f522:	0031      	movs	r1, r6
    f524:	002b      	movs	r3, r5
    f526:	0020      	movs	r0, r4
    f528:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
    f52a:	4649      	mov	r1, r9
    f52c:	9b02      	ldr	r3, [sp, #8]
    f52e:	9100      	str	r1, [sp, #0]
    f530:	3b01      	subs	r3, #1
    f532:	4443      	add	r3, r8
    f534:	b21b      	sxth	r3, r3
    f536:	001a      	movs	r2, r3
    f538:	9303      	str	r3, [sp, #12]
    f53a:	6823      	ldr	r3, [r4, #0]
    f53c:	0031      	movs	r1, r6
    f53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f540:	0020      	movs	r0, r4
    f542:	469a      	mov	sl, r3
    f544:	002b      	movs	r3, r5
    f546:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
    f548:	6823      	ldr	r3, [r4, #0]
    f54a:	6a1a      	ldr	r2, [r3, #32]
    f54c:	4693      	mov	fp, r2
    f54e:	4a3e      	ldr	r2, [pc, #248]	; (f648 <_ZN12Adafruit_GFX8drawRectEsssst+0x160>)
    f550:	4692      	mov	sl, r2
    f552:	4593      	cmp	fp, r2
    f554:	d13b      	bne.n	f5ce <_ZN12Adafruit_GFX8drawRectEsssst+0xe6>
    drawFastVLine(x, y, h, color);
    f556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f558:	4693      	mov	fp, r2
    f55a:	4a3c      	ldr	r2, [pc, #240]	; (f64c <_ZN12Adafruit_GFX8drawRectEsssst+0x164>)
    f55c:	4593      	cmp	fp, r2
    f55e:	d136      	bne.n	f5ce <_ZN12Adafruit_GFX8drawRectEsssst+0xe6>
    startWrite();
    f560:	695a      	ldr	r2, [r3, #20]
    f562:	42ba      	cmp	r2, r7
    f564:	d15d      	bne.n	f622 <_ZN12Adafruit_GFX8drawRectEsssst+0x13a>
    writeLine(x, y, x, y+h-1, color);
    f566:	464a      	mov	r2, r9
    f568:	9201      	str	r2, [sp, #4]
    f56a:	9a03      	ldr	r2, [sp, #12]
    f56c:	0031      	movs	r1, r6
    f56e:	9200      	str	r2, [sp, #0]
    f570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f572:	4642      	mov	r2, r8
    f574:	469b      	mov	fp, r3
    f576:	0020      	movs	r0, r4
    f578:	0033      	movs	r3, r6
    f57a:	47d8      	blx	fp
    endWrite();
    f57c:	6823      	ldr	r3, [r4, #0]
    f57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f580:	42ba      	cmp	r2, r7
    f582:	d152      	bne.n	f62a <_ZN12Adafruit_GFX8drawRectEsssst+0x142>
    writeFastVLine(x+w-1, y, h, color);
    f584:	6a1a      	ldr	r2, [r3, #32]
    f586:	3d01      	subs	r5, #1
    f588:	19ad      	adds	r5, r5, r6
    f58a:	4693      	mov	fp, r2
    f58c:	b22d      	sxth	r5, r5
    f58e:	4552      	cmp	r2, sl
    f590:	d12c      	bne.n	f5ec <_ZN12Adafruit_GFX8drawRectEsssst+0x104>
    drawFastVLine(x, y, h, color);
    f592:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    f594:	4a2d      	ldr	r2, [pc, #180]	; (f64c <_ZN12Adafruit_GFX8drawRectEsssst+0x164>)
    f596:	4296      	cmp	r6, r2
    f598:	d139      	bne.n	f60e <_ZN12Adafruit_GFX8drawRectEsssst+0x126>
    startWrite();
    f59a:	695a      	ldr	r2, [r3, #20]
    f59c:	42ba      	cmp	r2, r7
    f59e:	d148      	bne.n	f632 <_ZN12Adafruit_GFX8drawRectEsssst+0x14a>
    writeLine(x, y, x, y+h-1, color);
    f5a0:	464a      	mov	r2, r9
    f5a2:	9201      	str	r2, [sp, #4]
    f5a4:	9a03      	ldr	r2, [sp, #12]
    f5a6:	0029      	movs	r1, r5
    f5a8:	9200      	str	r2, [sp, #0]
    f5aa:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    f5ac:	4642      	mov	r2, r8
    f5ae:	002b      	movs	r3, r5
    f5b0:	0020      	movs	r0, r4
    f5b2:	47b0      	blx	r6
    endWrite();
    f5b4:	6823      	ldr	r3, [r4, #0]
    f5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f5b8:	42bb      	cmp	r3, r7
    f5ba:	d13e      	bne.n	f63a <_ZN12Adafruit_GFX8drawRectEsssst+0x152>
    f5bc:	42bb      	cmp	r3, r7
    f5be:	d120      	bne.n	f602 <_ZN12Adafruit_GFX8drawRectEsssst+0x11a>
}
    f5c0:	b005      	add	sp, #20
    f5c2:	bc3c      	pop	{r2, r3, r4, r5}
    f5c4:	4690      	mov	r8, r2
    f5c6:	4699      	mov	r9, r3
    f5c8:	46a2      	mov	sl, r4
    f5ca:	46ab      	mov	fp, r5
    f5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    writeFastVLine(x, y, h, color);
    f5ce:	464b      	mov	r3, r9
    f5d0:	4642      	mov	r2, r8
    f5d2:	9300      	str	r3, [sp, #0]
    f5d4:	0031      	movs	r1, r6
    f5d6:	9b02      	ldr	r3, [sp, #8]
    f5d8:	0020      	movs	r0, r4
    f5da:	47d8      	blx	fp
    f5dc:	6823      	ldr	r3, [r4, #0]
    writeFastVLine(x+w-1, y, h, color);
    f5de:	3d01      	subs	r5, #1
    f5e0:	6a1a      	ldr	r2, [r3, #32]
    f5e2:	19ad      	adds	r5, r5, r6
    f5e4:	4693      	mov	fp, r2
    f5e6:	b22d      	sxth	r5, r5
    f5e8:	4552      	cmp	r2, sl
    f5ea:	d0d2      	beq.n	f592 <_ZN12Adafruit_GFX8drawRectEsssst+0xaa>
    f5ec:	464b      	mov	r3, r9
    f5ee:	4642      	mov	r2, r8
    f5f0:	9300      	str	r3, [sp, #0]
    f5f2:	0029      	movs	r1, r5
    f5f4:	9b02      	ldr	r3, [sp, #8]
    f5f6:	0020      	movs	r0, r4
    f5f8:	47d8      	blx	fp
    f5fa:	6823      	ldr	r3, [r4, #0]
    f5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f5fe:	42bb      	cmp	r3, r7
    f600:	d0de      	beq.n	f5c0 <_ZN12Adafruit_GFX8drawRectEsssst+0xd8>
    endWrite();
    f602:	0020      	movs	r0, r4
    f604:	4798      	blx	r3
}
    f606:	e7db      	b.n	f5c0 <_ZN12Adafruit_GFX8drawRectEsssst+0xd8>
    startWrite();
    f608:	4790      	blx	r2
    f60a:	6823      	ldr	r3, [r4, #0]
    f60c:	e784      	b.n	f518 <_ZN12Adafruit_GFX8drawRectEsssst+0x30>
    drawFastVLine(x, y, h, color);
    f60e:	464b      	mov	r3, r9
    f610:	4642      	mov	r2, r8
    f612:	9300      	str	r3, [sp, #0]
    f614:	0029      	movs	r1, r5
    f616:	9b02      	ldr	r3, [sp, #8]
    f618:	0020      	movs	r0, r4
    f61a:	47b0      	blx	r6
    f61c:	6823      	ldr	r3, [r4, #0]
    f61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f620:	e7cc      	b.n	f5bc <_ZN12Adafruit_GFX8drawRectEsssst+0xd4>
    startWrite();
    f622:	0020      	movs	r0, r4
    f624:	4790      	blx	r2
    f626:	6823      	ldr	r3, [r4, #0]
    f628:	e79d      	b.n	f566 <_ZN12Adafruit_GFX8drawRectEsssst+0x7e>
    endWrite();
    f62a:	0020      	movs	r0, r4
    f62c:	4790      	blx	r2
    f62e:	6823      	ldr	r3, [r4, #0]
    f630:	e7a8      	b.n	f584 <_ZN12Adafruit_GFX8drawRectEsssst+0x9c>
    startWrite();
    f632:	0020      	movs	r0, r4
    f634:	4790      	blx	r2
    f636:	6823      	ldr	r3, [r4, #0]
    f638:	e7b2      	b.n	f5a0 <_ZN12Adafruit_GFX8drawRectEsssst+0xb8>
    endWrite();
    f63a:	0020      	movs	r0, r4
    f63c:	4798      	blx	r3
    f63e:	6823      	ldr	r3, [r4, #0]
    f640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f642:	e7bb      	b.n	f5bc <_ZN12Adafruit_GFX8drawRectEsssst+0xd4>
    f644:	0000ef95 	.word	0x0000ef95
    f648:	0000f2b5 	.word	0x0000f2b5
    f64c:	0000efdd 	.word	0x0000efdd

0000f650 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
    f650:	b510      	push	{r4, lr}
    f652:	0414      	lsls	r4, r2, #16
    f654:	040a      	lsls	r2, r1, #16
WIDTH(w), HEIGHT(h)
    f656:	490a      	ldr	r1, [pc, #40]	; (f680 <_ZN12Adafruit_GFXC1Ess+0x30>)
    f658:	0c12      	lsrs	r2, r2, #16
    f65a:	3108      	adds	r1, #8
    f65c:	4322      	orrs	r2, r4
    f65e:	6001      	str	r1, [r0, #0]
    textcolor = textbgcolor = 0xFFFF;
    f660:	2101      	movs	r1, #1
    f662:	2300      	movs	r3, #0
WIDTH(w), HEIGHT(h)
    f664:	6082      	str	r2, [r0, #8]
    f666:	60c2      	str	r2, [r0, #12]
    textsize  = 1;
    f668:	2201      	movs	r2, #1
    textcolor = textbgcolor = 0xFFFF;
    f66a:	4249      	negs	r1, r1
    f66c:	6043      	str	r3, [r0, #4]
    rotation  = 0;
    f66e:	7643      	strb	r3, [r0, #25]
    cursor_y  = cursor_x    = 0;
    f670:	6103      	str	r3, [r0, #16]
    textsize  = 1;
    f672:	7602      	strb	r2, [r0, #24]
    textcolor = textbgcolor = 0xFFFF;
    f674:	6141      	str	r1, [r0, #20]
    wrap      = true;
    f676:	7682      	strb	r2, [r0, #26]
    _cp437    = false;
    f678:	76c3      	strb	r3, [r0, #27]
    gfxFont   = NULL;
    f67a:	61c3      	str	r3, [r0, #28]
}
    f67c:	bd10      	pop	{r4, pc}
    f67e:	46c0      	nop			; (mov r8, r8)
    f680:	00011780 	.word	0x00011780

0000f684 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  uint16_t color, uint16_t bg, uint8_t size) {
    f684:	b5f0      	push	{r4, r5, r6, r7, lr}
    f686:	46de      	mov	lr, fp
    f688:	464e      	mov	r6, r9
    f68a:	4657      	mov	r7, sl
    f68c:	4645      	mov	r5, r8
    f68e:	b5e0      	push	{r5, r6, r7, lr}
    f690:	b097      	sub	sp, #92	; 0x5c
    f692:	9211      	str	r2, [sp, #68]	; 0x44
    f694:	aa20      	add	r2, sp, #128	; 0x80
    f696:	8812      	ldrh	r2, [r2, #0]
    f698:	4683      	mov	fp, r0
    f69a:	9203      	str	r2, [sp, #12]
    f69c:	aa21      	add	r2, sp, #132	; 0x84
    f69e:	8812      	ldrh	r2, [r2, #0]
    f6a0:	910c      	str	r1, [sp, #48]	; 0x30
    f6a2:	4691      	mov	r9, r2
    f6a4:	aa22      	add	r2, sp, #136	; 0x88
    f6a6:	7812      	ldrb	r2, [r2, #0]
    f6a8:	9209      	str	r2, [sp, #36]	; 0x24
    if(!gfxFont) { // 'Classic' built-in font
    f6aa:	69c2      	ldr	r2, [r0, #28]
    f6ac:	2a00      	cmp	r2, #0
    f6ae:	d100      	bne.n	f6b2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
    f6b0:	e12a      	b.n	f908 <_ZN12Adafruit_GFX8drawCharEsshtth+0x284>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    f6b2:	7a11      	ldrb	r1, [r2, #8]
    f6b4:	1a5b      	subs	r3, r3, r1
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    f6b6:	6851      	ldr	r1, [r2, #4]
    f6b8:	b2db      	uxtb	r3, r3
    f6ba:	468c      	mov	ip, r1
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    f6bc:	6812      	ldr	r2, [r2, #0]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    f6be:	00db      	lsls	r3, r3, #3
    f6c0:	4463      	add	r3, ip
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    f6c2:	920a      	str	r2, [sp, #40]	; 0x28
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    f6c4:	881a      	ldrh	r2, [r3, #0]
        if(size > 1) {
    f6c6:	9909      	ldr	r1, [sp, #36]	; 0x24
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    f6c8:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
    f6ca:	789a      	ldrb	r2, [r3, #2]
    f6cc:	9205      	str	r2, [sp, #20]
                 h  = pgm_read_byte(&glyph->height);
    f6ce:	78da      	ldrb	r2, [r3, #3]
    f6d0:	9210      	str	r2, [sp, #64]	; 0x40
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
    f6d2:	2205      	movs	r2, #5
    f6d4:	569a      	ldrsb	r2, [r3, r2]
                 yo = pgm_read_byte(&glyph->yOffset);
    f6d6:	799b      	ldrb	r3, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
    f6d8:	9214      	str	r2, [sp, #80]	; 0x50
                 yo = pgm_read_byte(&glyph->yOffset);
    f6da:	b25b      	sxtb	r3, r3
    f6dc:	9315      	str	r3, [sp, #84]	; 0x54
        if(size > 1) {
    f6de:	2901      	cmp	r1, #1
    f6e0:	dc00      	bgt.n	f6e4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x60>
    f6e2:	e0fe      	b.n	f8e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x25e>
            yo16 = yo;
    f6e4:	b21b      	sxth	r3, r3
    f6e6:	9312      	str	r3, [sp, #72]	; 0x48
        startWrite();
    f6e8:	465b      	mov	r3, fp
    f6ea:	681b      	ldr	r3, [r3, #0]
            xo16 = xo;
    f6ec:	b212      	sxth	r2, r2
    f6ee:	920e      	str	r2, [sp, #56]	; 0x38
    f6f0:	49cf      	ldr	r1, [pc, #828]	; (fa30 <_ZN12Adafruit_GFX8drawCharEsshtth+0x3ac>)
        startWrite();
    f6f2:	695a      	ldr	r2, [r3, #20]
    f6f4:	468a      	mov	sl, r1
    f6f6:	428a      	cmp	r2, r1
    f6f8:	d000      	beq.n	f6fc <_ZN12Adafruit_GFX8drawCharEsshtth+0x78>
    f6fa:	e0fd      	b.n	f8f8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x274>
        for(yy=0; yy<h; yy++) {
    f6fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f6fe:	2a00      	cmp	r2, #0
    f700:	d100      	bne.n	f704 <_ZN12Adafruit_GFX8drawCharEsshtth+0x80>
    f702:	e0bb      	b.n	f87c <_ZN12Adafruit_GFX8drawCharEsshtth+0x1f8>
    f704:	2100      	movs	r1, #0
    f706:	4689      	mov	r9, r1
    f708:	910d      	str	r1, [sp, #52]	; 0x34
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    f70a:	4669      	mov	r1, sp
        for(yy=0; yy<h; yy++) {
    f70c:	2200      	movs	r2, #0
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    f70e:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    writeLine(x, y, x, y+h-1, color);
    f710:	465e      	mov	r6, fp
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    f712:	910b      	str	r1, [sp, #44]	; 0x2c
    writeLine(x, y, x, y+h-1, color);
    f714:	3901      	subs	r1, #1
    f716:	9113      	str	r1, [sp, #76]	; 0x4c
    f718:	46d3      	mov	fp, sl
        for(yy=0; yy<h; yy++) {
    f71a:	2700      	movs	r7, #0
    writeLine(x, y, x, y+h-1, color);
    f71c:	0011      	movs	r1, r2
    f71e:	46ca      	mov	sl, r9
            for(xx=0; xx<w; xx++) {
    f720:	9a05      	ldr	r2, [sp, #20]
    f722:	2a00      	cmp	r2, #0
    f724:	d100      	bne.n	f728 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
    f726:	e09e      	b.n	f866 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1e2>
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    f728:	2044      	movs	r0, #68	; 0x44
    f72a:	466a      	mov	r2, sp
    f72c:	1812      	adds	r2, r2, r0
    f72e:	9812      	ldr	r0, [sp, #72]	; 0x48
    f730:	8812      	ldrh	r2, [r2, #0]
    f732:	4684      	mov	ip, r0
    f734:	4461      	add	r1, ip
    f736:	4694      	mov	ip, r2
    f738:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f73a:	920f      	str	r2, [sp, #60]	; 0x3c
    f73c:	4341      	muls	r1, r0
    writeLine(x, y, x, y+h-1, color);
    f73e:	9813      	ldr	r0, [sp, #76]	; 0x4c
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    f740:	4461      	add	r1, ip
    writeLine(x, y, x, y+h-1, color);
    f742:	4684      	mov	ip, r0
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    f744:	b289      	uxth	r1, r1
    f746:	b20a      	sxth	r2, r1
    writeLine(x, y, x, y+h-1, color);
    f748:	4461      	add	r1, ip
    f74a:	b209      	sxth	r1, r1
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    f74c:	9204      	str	r2, [sp, #16]
    writeLine(x, y, x, y+h-1, color);
    f74e:	46b0      	mov	r8, r6
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    f750:	4652      	mov	r2, sl
    f752:	2400      	movs	r4, #0
    f754:	2500      	movs	r5, #0
    writeLine(x, y, x, y+h-1, color);
    f756:	9107      	str	r1, [sp, #28]
    f758:	4656      	mov	r6, sl
    f75a:	e008      	b.n	f76e <_ZN12Adafruit_GFX8drawCharEsshtth+0xea>
            for(xx=0; xx<w; xx++) {
    f75c:	3501      	adds	r5, #1
    f75e:	9905      	ldr	r1, [sp, #20]
                bits <<= 1;
    f760:	007f      	lsls	r7, r7, #1
            for(xx=0; xx<w; xx++) {
    f762:	b2ed      	uxtb	r5, r5
                bits <<= 1;
    f764:	b2ff      	uxtb	r7, r7
            for(xx=0; xx<w; xx++) {
    f766:	002c      	movs	r4, r5
                if(!(bit++ & 7)) {
    f768:	0032      	movs	r2, r6
            for(xx=0; xx<w; xx++) {
    f76a:	428d      	cmp	r5, r1
    f76c:	da79      	bge.n	f862 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1de>
                if(!(bit++ & 7)) {
    f76e:	3601      	adds	r6, #1
    f770:	b2f6      	uxtb	r6, r6
    f772:	0752      	lsls	r2, r2, #29
    f774:	d106      	bne.n	f784 <_ZN12Adafruit_GFX8drawCharEsshtth+0x100>
                    bits = pgm_read_byte(&bitmap[bo++]);
    f776:	9906      	ldr	r1, [sp, #24]
    f778:	980a      	ldr	r0, [sp, #40]	; 0x28
    f77a:	000a      	movs	r2, r1
    f77c:	3201      	adds	r2, #1
    f77e:	b292      	uxth	r2, r2
    f780:	5c47      	ldrb	r7, [r0, r1]
    f782:	9206      	str	r2, [sp, #24]
                if(bits & 0x80) {
    f784:	b27a      	sxtb	r2, r7
    f786:	2a00      	cmp	r2, #0
    f788:	dae8      	bge.n	f75c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
                    if(size == 1) {
    f78a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f78c:	2a01      	cmp	r2, #1
    f78e:	d100      	bne.n	f792 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10e>
    f790:	e07e      	b.n	f890 <_ZN12Adafruit_GFX8drawCharEsshtth+0x20c>
                          size, size, color);
    f792:	69da      	ldr	r2, [r3, #28]
    f794:	4691      	mov	r9, r2
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    f796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f798:	4694      	mov	ip, r2
    f79a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f79c:	4464      	add	r4, ip
    f79e:	4354      	muls	r4, r2
    f7a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f7a2:	4694      	mov	ip, r2
    f7a4:	466a      	mov	r2, sp
    f7a6:	2124      	movs	r1, #36	; 0x24
    f7a8:	5e52      	ldrsh	r2, [r2, r1]
    f7aa:	4464      	add	r4, ip
    f7ac:	9208      	str	r2, [sp, #32]
    f7ae:	4aa1      	ldr	r2, [pc, #644]	; (fa34 <_ZN12Adafruit_GFX8drawCharEsshtth+0x3b0>)
    f7b0:	b224      	sxth	r4, r4
    f7b2:	4591      	cmp	r9, r2
    f7b4:	d000      	beq.n	f7b8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x134>
    f7b6:	e084      	b.n	f8c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x23e>
    fillRect(x,y,w,h,color);
    f7b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    f7ba:	4691      	mov	r9, r2
    f7bc:	4a9e      	ldr	r2, [pc, #632]	; (fa38 <_ZN12Adafruit_GFX8drawCharEsshtth+0x3b4>)
    f7be:	4591      	cmp	r9, r2
    f7c0:	d000      	beq.n	f7c4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x140>
    f7c2:	e07e      	b.n	f8c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x23e>
    startWrite();
    f7c4:	695a      	ldr	r2, [r3, #20]
    f7c6:	455a      	cmp	r2, fp
    f7c8:	d000      	beq.n	f7cc <_ZN12Adafruit_GFX8drawCharEsshtth+0x148>
    f7ca:	e085      	b.n	f8d8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x254>
    for (int16_t i=x; i<x+w; i++) {
    f7cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f7ce:	4692      	mov	sl, r2
    f7d0:	44a2      	add	sl, r4
    f7d2:	4554      	cmp	r4, sl
    f7d4:	da35      	bge.n	f842 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1be>
    f7d6:	465a      	mov	r2, fp
    f7d8:	46a9      	mov	r9, r5
    f7da:	46bb      	mov	fp, r7
    f7dc:	4645      	mov	r5, r8
    f7de:	0017      	movs	r7, r2
    f7e0:	46b0      	mov	r8, r6
    f7e2:	e018      	b.n	f816 <_ZN12Adafruit_GFX8drawCharEsshtth+0x192>
    drawFastVLine(x, y, h, color);
    f7e4:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    f7e6:	4a95      	ldr	r2, [pc, #596]	; (fa3c <_ZN12Adafruit_GFX8drawCharEsshtth+0x3b8>)
    f7e8:	4296      	cmp	r6, r2
    f7ea:	d118      	bne.n	f81e <_ZN12Adafruit_GFX8drawCharEsshtth+0x19a>
    startWrite();
    f7ec:	695a      	ldr	r2, [r3, #20]
    f7ee:	42ba      	cmp	r2, r7
    f7f0:	d133      	bne.n	f85a <_ZN12Adafruit_GFX8drawCharEsshtth+0x1d6>
    writeLine(x, y, x, y+h-1, color);
    f7f2:	9a03      	ldr	r2, [sp, #12]
    f7f4:	0021      	movs	r1, r4
    f7f6:	9201      	str	r2, [sp, #4]
    f7f8:	9a07      	ldr	r2, [sp, #28]
    f7fa:	0028      	movs	r0, r5
    f7fc:	9200      	str	r2, [sp, #0]
    f7fe:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    f800:	9a04      	ldr	r2, [sp, #16]
    f802:	0023      	movs	r3, r4
    f804:	47b0      	blx	r6
    endWrite();
    f806:	682b      	ldr	r3, [r5, #0]
    f808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f80a:	42ba      	cmp	r2, r7
    f80c:	d121      	bne.n	f852 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ce>
    f80e:	3401      	adds	r4, #1
    f810:	b224      	sxth	r4, r4
    for (int16_t i=x; i<x+w; i++) {
    f812:	45a2      	cmp	sl, r4
    f814:	dd0f      	ble.n	f836 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1b2>
        writeFastVLine(i, y, h, color);
    f816:	6a1e      	ldr	r6, [r3, #32]
    f818:	4a89      	ldr	r2, [pc, #548]	; (fa40 <_ZN12Adafruit_GFX8drawCharEsshtth+0x3bc>)
    f81a:	4296      	cmp	r6, r2
    f81c:	d0e2      	beq.n	f7e4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x160>
    f81e:	9b03      	ldr	r3, [sp, #12]
    f820:	0021      	movs	r1, r4
    f822:	3401      	adds	r4, #1
    f824:	9300      	str	r3, [sp, #0]
    f826:	9a04      	ldr	r2, [sp, #16]
    f828:	9b08      	ldr	r3, [sp, #32]
    f82a:	0028      	movs	r0, r5
    f82c:	b224      	sxth	r4, r4
    f82e:	47b0      	blx	r6
    f830:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
    f832:	45a2      	cmp	sl, r4
    f834:	dcef      	bgt.n	f816 <_ZN12Adafruit_GFX8drawCharEsshtth+0x192>
    f836:	003a      	movs	r2, r7
    f838:	4646      	mov	r6, r8
    f83a:	465f      	mov	r7, fp
    f83c:	46a8      	mov	r8, r5
    f83e:	4693      	mov	fp, r2
    f840:	464d      	mov	r5, r9
    endWrite();
    f842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f844:	455a      	cmp	r2, fp
    f846:	d089      	beq.n	f75c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
    f848:	4640      	mov	r0, r8
    f84a:	4790      	blx	r2
    f84c:	4643      	mov	r3, r8
    f84e:	681b      	ldr	r3, [r3, #0]
    f850:	e784      	b.n	f75c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
    endWrite();
    f852:	0028      	movs	r0, r5
    f854:	4790      	blx	r2
    f856:	682b      	ldr	r3, [r5, #0]
    f858:	e7d9      	b.n	f80e <_ZN12Adafruit_GFX8drawCharEsshtth+0x18a>
    startWrite();
    f85a:	0028      	movs	r0, r5
    f85c:	4790      	blx	r2
    f85e:	682b      	ldr	r3, [r5, #0]
    f860:	e7c7      	b.n	f7f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x16e>
    f862:	46b2      	mov	sl, r6
    f864:	4646      	mov	r6, r8
        for(yy=0; yy<h; yy++) {
    f866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f868:	9810      	ldr	r0, [sp, #64]	; 0x40
    f86a:	3201      	adds	r2, #1
    f86c:	b2d2      	uxtb	r2, r2
    f86e:	920d      	str	r2, [sp, #52]	; 0x34
    f870:	0011      	movs	r1, r2
    f872:	4282      	cmp	r2, r0
    f874:	da00      	bge.n	f878 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1f4>
    f876:	e753      	b.n	f720 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9c>
    f878:	46da      	mov	sl, fp
    f87a:	46b3      	mov	fp, r6
    f87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f87e:	4553      	cmp	r3, sl
    f880:	d13f      	bne.n	f902 <_ZN12Adafruit_GFX8drawCharEsshtth+0x27e>
}
    f882:	b017      	add	sp, #92	; 0x5c
    f884:	bc3c      	pop	{r2, r3, r4, r5}
    f886:	4690      	mov	r8, r2
    f888:	4699      	mov	r9, r3
    f88a:	46a2      	mov	sl, r4
    f88c:	46ab      	mov	fp, r5
    f88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        writePixel(x+xo+xx, y+yo+yy, color);
    f890:	980c      	ldr	r0, [sp, #48]	; 0x30
    f892:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f894:	4684      	mov	ip, r0
    f896:	9815      	ldr	r0, [sp, #84]	; 0x54
    f898:	4462      	add	r2, ip
    f89a:	4684      	mov	ip, r0
    f89c:	1951      	adds	r1, r2, r5
    f89e:	980d      	ldr	r0, [sp, #52]	; 0x34
    f8a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f8a2:	699c      	ldr	r4, [r3, #24]
    f8a4:	4462      	add	r2, ip
    f8a6:	4684      	mov	ip, r0
    f8a8:	4866      	ldr	r0, [pc, #408]	; (fa44 <_ZN12Adafruit_GFX8drawCharEsshtth+0x3c0>)
    f8aa:	4462      	add	r2, ip
    f8ac:	b209      	sxth	r1, r1
    f8ae:	b212      	sxth	r2, r2
    f8b0:	4284      	cmp	r4, r0
    f8b2:	d100      	bne.n	f8b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x232>
    drawPixel(x, y, color);
    f8b4:	691c      	ldr	r4, [r3, #16]
                        writePixel(x+xo+xx, y+yo+yy, color);
    f8b6:	9b03      	ldr	r3, [sp, #12]
    f8b8:	4640      	mov	r0, r8
    f8ba:	47a0      	blx	r4
    f8bc:	4643      	mov	r3, r8
    f8be:	681b      	ldr	r3, [r3, #0]
    f8c0:	e74c      	b.n	f75c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
                          size, size, color);
    f8c2:	9b03      	ldr	r3, [sp, #12]
    f8c4:	9a04      	ldr	r2, [sp, #16]
    f8c6:	9301      	str	r3, [sp, #4]
    f8c8:	9b08      	ldr	r3, [sp, #32]
    f8ca:	0021      	movs	r1, r4
    f8cc:	9300      	str	r3, [sp, #0]
    f8ce:	4640      	mov	r0, r8
    f8d0:	47c8      	blx	r9
    f8d2:	4643      	mov	r3, r8
    f8d4:	681b      	ldr	r3, [r3, #0]
    f8d6:	e741      	b.n	f75c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
    startWrite();
    f8d8:	4640      	mov	r0, r8
    f8da:	4790      	blx	r2
    f8dc:	4643      	mov	r3, r8
    f8de:	681b      	ldr	r3, [r3, #0]
    f8e0:	e774      	b.n	f7cc <_ZN12Adafruit_GFX8drawCharEsshtth+0x148>
        int16_t  xo16 = 0, yo16 = 0;
    f8e2:	2300      	movs	r3, #0
    f8e4:	9312      	str	r3, [sp, #72]	; 0x48
    f8e6:	930e      	str	r3, [sp, #56]	; 0x38
        startWrite();
    f8e8:	465b      	mov	r3, fp
    f8ea:	681b      	ldr	r3, [r3, #0]
    f8ec:	4950      	ldr	r1, [pc, #320]	; (fa30 <_ZN12Adafruit_GFX8drawCharEsshtth+0x3ac>)
    f8ee:	695a      	ldr	r2, [r3, #20]
    f8f0:	468a      	mov	sl, r1
    f8f2:	428a      	cmp	r2, r1
    f8f4:	d100      	bne.n	f8f8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x274>
    f8f6:	e701      	b.n	f6fc <_ZN12Adafruit_GFX8drawCharEsshtth+0x78>
    f8f8:	4658      	mov	r0, fp
    f8fa:	4790      	blx	r2
    f8fc:	465b      	mov	r3, fp
    f8fe:	681b      	ldr	r3, [r3, #0]
    f900:	e6fc      	b.n	f6fc <_ZN12Adafruit_GFX8drawCharEsshtth+0x78>
        endWrite();
    f902:	4658      	mov	r0, fp
    f904:	4798      	blx	r3
    f906:	e7bc      	b.n	f882 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fe>
    f908:	000c      	movs	r4, r1
        if((x >= _width)            || // Clip right
    f90a:	210c      	movs	r1, #12
    f90c:	5e42      	ldrsh	r2, [r0, r1]
    f90e:	42a2      	cmp	r2, r4
    f910:	ddb7      	ble.n	f882 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fe>
    f912:	210e      	movs	r1, #14
    f914:	5e42      	ldrsh	r2, [r0, r1]
    f916:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f918:	42aa      	cmp	r2, r5
    f91a:	ddb2      	ble.n	f882 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fe>
           ((x + 6 * size - 1) < 0) || // Clip left
    f91c:	9809      	ldr	r0, [sp, #36]	; 0x24
    f91e:	4684      	mov	ip, r0
    f920:	0042      	lsls	r2, r0, #1
    f922:	4462      	add	r2, ip
    f924:	46a4      	mov	ip, r4
    f926:	0052      	lsls	r2, r2, #1
    f928:	4462      	add	r2, ip
           (y >= _height)           || // Clip bottom
    f92a:	2a00      	cmp	r2, #0
    f92c:	dda9      	ble.n	f882 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fe>
           ((y + 8 * size - 1) < 0))   // Clip top
    f92e:	46ac      	mov	ip, r5
    f930:	00c2      	lsls	r2, r0, #3
    f932:	4462      	add	r2, ip
           ((x + 6 * size - 1) < 0) || // Clip left
    f934:	2a00      	cmp	r2, #0
    f936:	dda4      	ble.n	f882 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fe>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
    f938:	465a      	mov	r2, fp
    f93a:	7ed2      	ldrb	r2, [r2, #27]
    f93c:	2a00      	cmp	r2, #0
    f93e:	d000      	beq.n	f942 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2be>
    f940:	e0cf      	b.n	fae2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x45e>
    f942:	2baf      	cmp	r3, #175	; 0xaf
    f944:	dc00      	bgt.n	f948 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2c4>
    f946:	e0cc      	b.n	fae2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x45e>
    f948:	3301      	adds	r3, #1
    f94a:	b2dc      	uxtb	r4, r3
        startWrite();
    f94c:	465b      	mov	r3, fp
    f94e:	6818      	ldr	r0, [r3, #0]
    f950:	4a37      	ldr	r2, [pc, #220]	; (fa30 <_ZN12Adafruit_GFX8drawCharEsshtth+0x3ac>)
    f952:	6943      	ldr	r3, [r0, #20]
    f954:	4692      	mov	sl, r2
    f956:	4293      	cmp	r3, r2
    f958:	d003      	beq.n	f962 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2de>
    f95a:	4658      	mov	r0, fp
    f95c:	4798      	blx	r3
    f95e:	465b      	mov	r3, fp
    f960:	6818      	ldr	r0, [r3, #0]
    f962:	00a3      	lsls	r3, r4, #2
    f964:	191b      	adds	r3, r3, r4
    f966:	930d      	str	r3, [sp, #52]	; 0x34
  uint16_t color, uint16_t bg, uint8_t size) {
    f968:	2305      	movs	r3, #5
    f96a:	930a      	str	r3, [sp, #40]	; 0x28
    f96c:	2300      	movs	r3, #0
    f96e:	9308      	str	r3, [sp, #32]
    f970:	466b      	mov	r3, sp
    f972:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    f974:	2244      	movs	r2, #68	; 0x44
    f976:	4698      	mov	r8, r3
    f978:	466b      	mov	r3, sp
    f97a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    f97c:	9306      	str	r3, [sp, #24]
    f97e:	466b      	mov	r3, sp
    f980:	189b      	adds	r3, r3, r2
    f982:	881b      	ldrh	r3, [r3, #0]
    f984:	930b      	str	r3, [sp, #44]	; 0x2c
    f986:	4653      	mov	r3, sl
    f988:	930c      	str	r3, [sp, #48]	; 0x30
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    f98a:	9908      	ldr	r1, [sp, #32]
    f98c:	4b2e      	ldr	r3, [pc, #184]	; (fa48 <_ZN12Adafruit_GFX8drawCharEsshtth+0x3c4>)
    f98e:	468c      	mov	ip, r1
    f990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f992:	4463      	add	r3, ip
    f994:	5c9f      	ldrb	r7, [r3, r2]
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    f996:	4642      	mov	r2, r8
    f998:	b28b      	uxth	r3, r1
    f99a:	9906      	ldr	r1, [sp, #24]
    f99c:	435a      	muls	r2, r3
    f99e:	468c      	mov	ip, r1
    f9a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f9a2:	4462      	add	r2, ip
    f9a4:	b212      	sxth	r2, r2
    f9a6:	9205      	str	r2, [sp, #20]
    f9a8:	000a      	movs	r2, r1
                        writePixel(x+i, y+j, bg);
    f9aa:	4463      	add	r3, ip
    f9ac:	3208      	adds	r2, #8
    f9ae:	b292      	uxth	r2, r2
    f9b0:	b21b      	sxth	r3, r3
    f9b2:	9204      	str	r2, [sp, #16]
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    f9b4:	000c      	movs	r4, r1
    f9b6:	000e      	movs	r6, r1
    f9b8:	000d      	movs	r5, r1
                        writePixel(x+i, y+j, bg);
    f9ba:	9307      	str	r3, [sp, #28]
    f9bc:	e020      	b.n	fa00 <_ZN12Adafruit_GFX8drawCharEsshtth+0x37c>
                    if(size == 1)
    f9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9c0:	2b01      	cmp	r3, #1
    f9c2:	d043      	beq.n	fa4c <_ZN12Adafruit_GFX8drawCharEsshtth+0x3c8>
                        writeFillRect(x+i*size, y+j*size, size, size, color);
    f9c4:	69c3      	ldr	r3, [r0, #28]
    f9c6:	b22a      	sxth	r2, r5
    f9c8:	469a      	mov	sl, r3
    f9ca:	466b      	mov	r3, sp
    f9cc:	2124      	movs	r1, #36	; 0x24
    f9ce:	5e5b      	ldrsh	r3, [r3, r1]
    f9d0:	4918      	ldr	r1, [pc, #96]	; (fa34 <_ZN12Adafruit_GFX8drawCharEsshtth+0x3b0>)
    f9d2:	458a      	cmp	sl, r1
    f9d4:	d000      	beq.n	f9d8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x354>
    f9d6:	e07e      	b.n	fad6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x452>
    fillRect(x,y,w,h,color);
    f9d8:	9903      	ldr	r1, [sp, #12]
    f9da:	9300      	str	r3, [sp, #0]
    f9dc:	9101      	str	r1, [sp, #4]
    f9de:	6c01      	ldr	r1, [r0, #64]	; 0x40
    f9e0:	468a      	mov	sl, r1
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    f9e2:	4658      	mov	r0, fp
    f9e4:	9905      	ldr	r1, [sp, #20]
    f9e6:	47d0      	blx	sl
    f9e8:	465b      	mov	r3, fp
    f9ea:	6818      	ldr	r0, [r3, #0]
    f9ec:	3401      	adds	r4, #1
            for(int8_t j=0; j<8; j++, line >>= 1) {
    f9ee:	9b04      	ldr	r3, [sp, #16]
    f9f0:	4445      	add	r5, r8
    f9f2:	4446      	add	r6, r8
    f9f4:	b2a4      	uxth	r4, r4
    f9f6:	087f      	lsrs	r7, r7, #1
    f9f8:	b2ad      	uxth	r5, r5
    f9fa:	b2b6      	uxth	r6, r6
    f9fc:	42a3      	cmp	r3, r4
    f9fe:	d034      	beq.n	fa6a <_ZN12Adafruit_GFX8drawCharEsshtth+0x3e6>
                if(line & 1) {
    fa00:	07fb      	lsls	r3, r7, #31
    fa02:	d4dc      	bmi.n	f9be <_ZN12Adafruit_GFX8drawCharEsshtth+0x33a>
                } else if(bg != color) {
    fa04:	9b03      	ldr	r3, [sp, #12]
    fa06:	454b      	cmp	r3, r9
    fa08:	d0f0      	beq.n	f9ec <_ZN12Adafruit_GFX8drawCharEsshtth+0x368>
                    if(size == 1)
    fa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa0c:	2b01      	cmp	r3, #1
    fa0e:	d058      	beq.n	fac2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x43e>
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    fa10:	69c3      	ldr	r3, [r0, #28]
    fa12:	b232      	sxth	r2, r6
    fa14:	469a      	mov	sl, r3
    fa16:	466b      	mov	r3, sp
    fa18:	2124      	movs	r1, #36	; 0x24
    fa1a:	5e5b      	ldrsh	r3, [r3, r1]
    fa1c:	4905      	ldr	r1, [pc, #20]	; (fa34 <_ZN12Adafruit_GFX8drawCharEsshtth+0x3b0>)
    fa1e:	458a      	cmp	sl, r1
    fa20:	d15d      	bne.n	fade <_ZN12Adafruit_GFX8drawCharEsshtth+0x45a>
    fillRect(x,y,w,h,color);
    fa22:	4649      	mov	r1, r9
    fa24:	9300      	str	r3, [sp, #0]
    fa26:	9101      	str	r1, [sp, #4]
    fa28:	6c01      	ldr	r1, [r0, #64]	; 0x40
    fa2a:	468a      	mov	sl, r1
    fa2c:	e7d9      	b.n	f9e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x35e>
    fa2e:	46c0      	nop			; (mov r8, r8)
    fa30:	0000ef95 	.word	0x0000ef95
    fa34:	0000ef79 	.word	0x0000ef79
    fa38:	0000f095 	.word	0x0000f095
    fa3c:	0000efdd 	.word	0x0000efdd
    fa40:	0000f2b5 	.word	0x0000f2b5
    fa44:	0000ef6d 	.word	0x0000ef6d
    fa48:	00011280 	.word	0x00011280
                        writePixel(x+i, y+j, color);
    fa4c:	6983      	ldr	r3, [r0, #24]
    fa4e:	b222      	sxth	r2, r4
    fa50:	469a      	mov	sl, r3
    fa52:	4b43      	ldr	r3, [pc, #268]	; (fb60 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4dc>)
    fa54:	459a      	cmp	sl, r3
    fa56:	d146      	bne.n	fae6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x462>
    drawPixel(x, y, color);
    fa58:	6903      	ldr	r3, [r0, #16]
    fa5a:	469a      	mov	sl, r3
    fa5c:	9b03      	ldr	r3, [sp, #12]
                        writePixel(x+i, y+j, bg);
    fa5e:	4658      	mov	r0, fp
    fa60:	9907      	ldr	r1, [sp, #28]
    fa62:	47d0      	blx	sl
    fa64:	465b      	mov	r3, fp
    fa66:	6818      	ldr	r0, [r3, #0]
    fa68:	e7c0      	b.n	f9ec <_ZN12Adafruit_GFX8drawCharEsshtth+0x368>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    fa6a:	9b08      	ldr	r3, [sp, #32]
    fa6c:	3301      	adds	r3, #1
    fa6e:	b25b      	sxtb	r3, r3
    fa70:	9308      	str	r3, [sp, #32]
    fa72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa74:	3b01      	subs	r3, #1
    fa76:	b2db      	uxtb	r3, r3
    fa78:	930a      	str	r3, [sp, #40]	; 0x28
    fa7a:	2b00      	cmp	r3, #0
    fa7c:	d185      	bne.n	f98a <_ZN12Adafruit_GFX8drawCharEsshtth+0x306>
    fa7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fa80:	469a      	mov	sl, r3
        if(bg != color) { // If opaque, draw vertical line for last column
    fa82:	9b03      	ldr	r3, [sp, #12]
    fa84:	454b      	cmp	r3, r9
    fa86:	d05a      	beq.n	fb3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x4ba>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
    fa88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa8a:	2b01      	cmp	r3, #1
    fa8c:	d02d      	beq.n	faea <_ZN12Adafruit_GFX8drawCharEsshtth+0x466>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
    fa8e:	4643      	mov	r3, r8
    fa90:	0099      	lsls	r1, r3, #2
    fa92:	9b06      	ldr	r3, [sp, #24]
    fa94:	4441      	add	r1, r8
    fa96:	469c      	mov	ip, r3
    fa98:	466b      	mov	r3, sp
    fa9a:	2224      	movs	r2, #36	; 0x24
    fa9c:	5e9b      	ldrsh	r3, [r3, r2]
    fa9e:	4642      	mov	r2, r8
    faa0:	69c4      	ldr	r4, [r0, #28]
    faa2:	4d30      	ldr	r5, [pc, #192]	; (fb64 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4e0>)
    faa4:	4461      	add	r1, ip
    faa6:	b209      	sxth	r1, r1
    faa8:	00d2      	lsls	r2, r2, #3
    faaa:	42ac      	cmp	r4, r5
    faac:	d154      	bne.n	fb58 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4d4>
    fillRect(x,y,w,h,color);
    faae:	464c      	mov	r4, r9
    fab0:	9200      	str	r2, [sp, #0]
    fab2:	9401      	str	r4, [sp, #4]
    fab4:	6c04      	ldr	r4, [r0, #64]	; 0x40
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
    fab6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fab8:	4658      	mov	r0, fp
    faba:	47a0      	blx	r4
    fabc:	465b      	mov	r3, fp
    fabe:	681b      	ldr	r3, [r3, #0]
    fac0:	e6dc      	b.n	f87c <_ZN12Adafruit_GFX8drawCharEsshtth+0x1f8>
                        writePixel(x+i, y+j, bg);
    fac2:	6983      	ldr	r3, [r0, #24]
    fac4:	b222      	sxth	r2, r4
    fac6:	469a      	mov	sl, r3
    fac8:	4b25      	ldr	r3, [pc, #148]	; (fb60 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4dc>)
    faca:	459a      	cmp	sl, r3
    facc:	d101      	bne.n	fad2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x44e>
    drawPixel(x, y, color);
    face:	6903      	ldr	r3, [r0, #16]
    fad0:	469a      	mov	sl, r3
                        writePixel(x+i, y+j, bg);
    fad2:	464b      	mov	r3, r9
    fad4:	e7c3      	b.n	fa5e <_ZN12Adafruit_GFX8drawCharEsshtth+0x3da>
                        writeFillRect(x+i*size, y+j*size, size, size, color);
    fad6:	9903      	ldr	r1, [sp, #12]
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    fad8:	9101      	str	r1, [sp, #4]
    fada:	9300      	str	r3, [sp, #0]
    fadc:	e781      	b.n	f9e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x35e>
    fade:	4649      	mov	r1, r9
    fae0:	e7fa      	b.n	fad8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x454>
    fae2:	001c      	movs	r4, r3
    fae4:	e732      	b.n	f94c <_ZN12Adafruit_GFX8drawCharEsshtth+0x2c8>
                        writePixel(x+i, y+j, color);
    fae6:	9b03      	ldr	r3, [sp, #12]
    fae8:	e7b9      	b.n	fa5e <_ZN12Adafruit_GFX8drawCharEsshtth+0x3da>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
    faea:	9d06      	ldr	r5, [sp, #24]
    faec:	6a04      	ldr	r4, [r0, #32]
    faee:	4b1e      	ldr	r3, [pc, #120]	; (fb68 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4e4>)
    faf0:	3505      	adds	r5, #5
    faf2:	b22d      	sxth	r5, r5
    faf4:	429c      	cmp	r4, r3
    faf6:	d124      	bne.n	fb42 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4be>
    drawFastVLine(x, y, h, color);
    faf8:	6b84      	ldr	r4, [r0, #56]	; 0x38
    fafa:	4b1c      	ldr	r3, [pc, #112]	; (fb6c <_ZN12Adafruit_GFX8drawCharEsshtth+0x4e8>)
    fafc:	429c      	cmp	r4, r3
    fafe:	d120      	bne.n	fb42 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4be>
    startWrite();
    fb00:	6943      	ldr	r3, [r0, #20]
    fb02:	4553      	cmp	r3, sl
    fb04:	d003      	beq.n	fb0e <_ZN12Adafruit_GFX8drawCharEsshtth+0x48a>
    fb06:	4658      	mov	r0, fp
    fb08:	4798      	blx	r3
    fb0a:	465b      	mov	r3, fp
    fb0c:	6818      	ldr	r0, [r3, #0]
    writeLine(x, y, x, y+h-1, color);
    fb0e:	464b      	mov	r3, r9
    fb10:	9301      	str	r3, [sp, #4]
    fb12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fb14:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fb16:	3307      	adds	r3, #7
    fb18:	b21b      	sxth	r3, r3
    fb1a:	9300      	str	r3, [sp, #0]
    fb1c:	6a84      	ldr	r4, [r0, #40]	; 0x28
    fb1e:	002b      	movs	r3, r5
    fb20:	0029      	movs	r1, r5
    fb22:	4658      	mov	r0, fp
    fb24:	47a0      	blx	r4
    endWrite();
    fb26:	465b      	mov	r3, fp
    fb28:	681b      	ldr	r3, [r3, #0]
    fb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fb2c:	4553      	cmp	r3, sl
    fb2e:	d100      	bne.n	fb32 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4ae>
    fb30:	e6a5      	b.n	f87e <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fa>
    fb32:	4658      	mov	r0, fp
    fb34:	4798      	blx	r3
    fb36:	465b      	mov	r3, fp
    fb38:	681b      	ldr	r3, [r3, #0]
    fb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fb3c:	e69f      	b.n	f87e <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fa>
    fb3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    fb40:	e69d      	b.n	f87e <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fa>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
    fb42:	464b      	mov	r3, r9
    fb44:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fb46:	9300      	str	r3, [sp, #0]
    fb48:	0029      	movs	r1, r5
    fb4a:	2308      	movs	r3, #8
    fb4c:	4658      	mov	r0, fp
    fb4e:	47a0      	blx	r4
    fb50:	465b      	mov	r3, fp
    fb52:	681b      	ldr	r3, [r3, #0]
    fb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fb56:	e692      	b.n	f87e <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fa>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
    fb58:	4648      	mov	r0, r9
    fb5a:	9200      	str	r2, [sp, #0]
    fb5c:	9001      	str	r0, [sp, #4]
    fb5e:	e7aa      	b.n	fab6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x432>
    fb60:	0000ef6d 	.word	0x0000ef6d
    fb64:	0000ef79 	.word	0x0000ef79
    fb68:	0000f2b5 	.word	0x0000f2b5
    fb6c:	0000efdd 	.word	0x0000efdd

0000fb70 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
    fb70:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
    fb72:	69c3      	ldr	r3, [r0, #28]
size_t Adafruit_GFX::write(uint8_t c) {
    fb74:	b085      	sub	sp, #20
    fb76:	0004      	movs	r4, r0
    if(!gfxFont) { // 'Classic' built-in font
    fb78:	2b00      	cmp	r3, #0
    fb7a:	d038      	beq.n	fbee <_ZN12Adafruit_GFX5writeEh+0x7e>
        if(c == '\n') {
    fb7c:	290a      	cmp	r1, #10
    fb7e:	d02d      	beq.n	fbdc <_ZN12Adafruit_GFX5writeEh+0x6c>
        } else if(c != '\r') {
    fb80:	290d      	cmp	r1, #13
    fb82:	d028      	beq.n	fbd6 <_ZN12Adafruit_GFX5writeEh+0x66>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    fb84:	7a1d      	ldrb	r5, [r3, #8]
    fb86:	42a9      	cmp	r1, r5
    fb88:	db25      	blt.n	fbd6 <_ZN12Adafruit_GFX5writeEh+0x66>
    fb8a:	7a58      	ldrb	r0, [r3, #9]
    fb8c:	4281      	cmp	r1, r0
    fb8e:	dc22      	bgt.n	fbd6 <_ZN12Adafruit_GFX5writeEh+0x66>
                  &gfxFont->glyph))[c - first]);
    fb90:	685a      	ldr	r2, [r3, #4]
    fb92:	1b4d      	subs	r5, r1, r5
    fb94:	4694      	mov	ip, r2
    fb96:	00ed      	lsls	r5, r5, #3
    fb98:	4465      	add	r5, ip
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    fb9a:	78aa      	ldrb	r2, [r5, #2]
    fb9c:	2a00      	cmp	r2, #0
    fb9e:	d014      	beq.n	fbca <_ZN12Adafruit_GFX5writeEh+0x5a>
    fba0:	78e8      	ldrb	r0, [r5, #3]
    fba2:	2800      	cmp	r0, #0
    fba4:	d011      	beq.n	fbca <_ZN12Adafruit_GFX5writeEh+0x5a>
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
    fba6:	7ea0      	ldrb	r0, [r4, #26]
    fba8:	2800      	cmp	r0, #0
    fbaa:	d14b      	bne.n	fc44 <_ZN12Adafruit_GFX5writeEh+0xd4>
    fbac:	7e27      	ldrb	r7, [r4, #24]
    fbae:	2310      	movs	r3, #16
    fbb0:	5ee6      	ldrsh	r6, [r4, r3]
    fbb2:	2312      	movs	r3, #18
    fbb4:	5ee2      	ldrsh	r2, [r4, r3]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    fbb6:	8ae3      	ldrh	r3, [r4, #22]
    fbb8:	9702      	str	r7, [sp, #8]
    fbba:	9301      	str	r3, [sp, #4]
    fbbc:	8aa3      	ldrh	r3, [r4, #20]
    fbbe:	0020      	movs	r0, r4
    fbc0:	9300      	str	r3, [sp, #0]
    fbc2:	000b      	movs	r3, r1
    fbc4:	0031      	movs	r1, r6
    fbc6:	f7ff fd5d 	bl	f684 <_ZN12Adafruit_GFX8drawCharEsshtth>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    fbca:	792b      	ldrb	r3, [r5, #4]
    fbcc:	7e22      	ldrb	r2, [r4, #24]
    fbce:	4353      	muls	r3, r2
    fbd0:	8a22      	ldrh	r2, [r4, #16]
    fbd2:	189b      	adds	r3, r3, r2
    fbd4:	8223      	strh	r3, [r4, #16]
}
    fbd6:	2001      	movs	r0, #1
    fbd8:	b005      	add	sp, #20
    fbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cursor_x  = 0;
    fbdc:	2200      	movs	r2, #0
    fbde:	8202      	strh	r2, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    fbe0:	7a9b      	ldrb	r3, [r3, #10]
            cursor_y += (int16_t)textsize *
    fbe2:	7e02      	ldrb	r2, [r0, #24]
    fbe4:	4353      	muls	r3, r2
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    fbe6:	8a42      	ldrh	r2, [r0, #18]
    fbe8:	189b      	adds	r3, r3, r2
            cursor_y += (int16_t)textsize *
    fbea:	8243      	strh	r3, [r0, #18]
    fbec:	e7f3      	b.n	fbd6 <_ZN12Adafruit_GFX5writeEh+0x66>
        if(c == '\n') {                        // Newline?
    fbee:	290a      	cmp	r1, #10
    fbf0:	d04b      	beq.n	fc8a <_ZN12Adafruit_GFX5writeEh+0x11a>
        } else if(c != '\r') {                 // Ignore carriage returns
    fbf2:	290d      	cmp	r1, #13
    fbf4:	d0ef      	beq.n	fbd6 <_ZN12Adafruit_GFX5writeEh+0x66>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
    fbf6:	7e82      	ldrb	r2, [r0, #26]
    fbf8:	2a00      	cmp	r2, #0
    fbfa:	d040      	beq.n	fc7e <_ZN12Adafruit_GFX5writeEh+0x10e>
    fbfc:	2210      	movs	r2, #16
    fbfe:	5e85      	ldrsh	r5, [r0, r2]
    fc00:	7e00      	ldrb	r0, [r0, #24]
    fc02:	270c      	movs	r7, #12
    fc04:	5fe6      	ldrsh	r6, [r4, r7]
    fc06:	0042      	lsls	r2, r0, #1
    fc08:	1812      	adds	r2, r2, r0
    fc0a:	0052      	lsls	r2, r2, #1
    fc0c:	1952      	adds	r2, r2, r5
    fc0e:	42b2      	cmp	r2, r6
    fc10:	dd32      	ble.n	fc78 <_ZN12Adafruit_GFX5writeEh+0x108>
    fc12:	2500      	movs	r5, #0
                cursor_y += textsize * 8;      // advance y one line
    fc14:	8a62      	ldrh	r2, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
    fc16:	8223      	strh	r3, [r4, #16]
                cursor_y += textsize * 8;      // advance y one line
    fc18:	00c3      	lsls	r3, r0, #3
    fc1a:	18d2      	adds	r2, r2, r3
    fc1c:	b212      	sxth	r2, r2
    fc1e:	8262      	strh	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    fc20:	8ae3      	ldrh	r3, [r4, #22]
    fc22:	9002      	str	r0, [sp, #8]
    fc24:	9301      	str	r3, [sp, #4]
    fc26:	8aa3      	ldrh	r3, [r4, #20]
    fc28:	0020      	movs	r0, r4
    fc2a:	9300      	str	r3, [sp, #0]
    fc2c:	000b      	movs	r3, r1
    fc2e:	0029      	movs	r1, r5
    fc30:	f7ff fd28 	bl	f684 <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
    fc34:	7e23      	ldrb	r3, [r4, #24]
    fc36:	005a      	lsls	r2, r3, #1
    fc38:	189b      	adds	r3, r3, r2
    fc3a:	8a22      	ldrh	r2, [r4, #16]
    fc3c:	005b      	lsls	r3, r3, #1
    fc3e:	189b      	adds	r3, r3, r2
    fc40:	8223      	strh	r3, [r4, #16]
    fc42:	e7c8      	b.n	fbd6 <_ZN12Adafruit_GFX5writeEh+0x66>
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
    fc44:	2010      	movs	r0, #16
    fc46:	5e26      	ldrsh	r6, [r4, r0]
    fc48:	2005      	movs	r0, #5
    fc4a:	5628      	ldrsb	r0, [r5, r0]
    fc4c:	7e27      	ldrb	r7, [r4, #24]
    fc4e:	1882      	adds	r2, r0, r2
    fc50:	437a      	muls	r2, r7
    fc52:	4694      	mov	ip, r2
    fc54:	220c      	movs	r2, #12
    fc56:	5ea0      	ldrsh	r0, [r4, r2]
    fc58:	44b4      	add	ip, r6
    fc5a:	4584      	cmp	ip, r0
    fc5c:	dd09      	ble.n	fc72 <_ZN12Adafruit_GFX5writeEh+0x102>
                        cursor_x  = 0;
    fc5e:	2200      	movs	r2, #0
    fc60:	8222      	strh	r2, [r4, #16]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    fc62:	7a9a      	ldrb	r2, [r3, #10]
    fc64:	8a63      	ldrh	r3, [r4, #18]
                        cursor_y += (int16_t)textsize *
    fc66:	437a      	muls	r2, r7
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    fc68:	18d2      	adds	r2, r2, r3
    fc6a:	b212      	sxth	r2, r2
                        cursor_y += (int16_t)textsize *
    fc6c:	8262      	strh	r2, [r4, #18]
    fc6e:	2600      	movs	r6, #0
    fc70:	e7a1      	b.n	fbb6 <_ZN12Adafruit_GFX5writeEh+0x46>
    fc72:	2312      	movs	r3, #18
    fc74:	5ee2      	ldrsh	r2, [r4, r3]
    fc76:	e79e      	b.n	fbb6 <_ZN12Adafruit_GFX5writeEh+0x46>
    fc78:	2312      	movs	r3, #18
    fc7a:	5ee2      	ldrsh	r2, [r4, r3]
    fc7c:	e7d0      	b.n	fc20 <_ZN12Adafruit_GFX5writeEh+0xb0>
    fc7e:	7e00      	ldrb	r0, [r0, #24]
    fc80:	2310      	movs	r3, #16
    fc82:	5ee5      	ldrsh	r5, [r4, r3]
    fc84:	2312      	movs	r3, #18
    fc86:	5ee2      	ldrsh	r2, [r4, r3]
    fc88:	e7ca      	b.n	fc20 <_ZN12Adafruit_GFX5writeEh+0xb0>
            cursor_x  = 0;                     // Reset x to zero,
    fc8a:	8203      	strh	r3, [r0, #16]
            cursor_y += textsize * 8;          // advance y one line
    fc8c:	7e03      	ldrb	r3, [r0, #24]
    fc8e:	8a42      	ldrh	r2, [r0, #18]
    fc90:	00db      	lsls	r3, r3, #3
    fc92:	189b      	adds	r3, r3, r2
    fc94:	8243      	strh	r3, [r0, #18]
    fc96:	e79e      	b.n	fbd6 <_ZN12Adafruit_GFX5writeEh+0x66>

0000fc98 <_ZNK12Adafruit_GFX5widthEv>:
    return _width;
    fc98:	230c      	movs	r3, #12
    fc9a:	5ec0      	ldrsh	r0, [r0, r3]
}
    fc9c:	4770      	bx	lr
    fc9e:	46c0      	nop			; (mov r8, r8)

0000fca0 <_ZNK12Adafruit_GFX6heightEv>:
    return _height;
    fca0:	230e      	movs	r3, #14
    fca2:	5ec0      	ldrsh	r0, [r0, r3]
}
    fca4:	4770      	bx	lr
    fca6:	46c0      	nop			; (mov r8, r8)

0000fca8 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    fca8:	e7fe      	b.n	fca8 <__cxa_pure_virtual>
    fcaa:	46c0      	nop			; (mov r8, r8)

0000fcac <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
    fcac:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcae:	464f      	mov	r7, r9
    fcb0:	46d6      	mov	lr, sl
    fcb2:	4646      	mov	r6, r8
    fcb4:	b5c0      	push	{r6, r7, lr}
    fcb6:	4689      	mov	r9, r1
    fcb8:	b08a      	sub	sp, #40	; 0x28
    fcba:	0017      	movs	r7, r2
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
    fcbc:	2900      	cmp	r1, #0
    fcbe:	d04c      	beq.n	fd5a <itoa+0xae>
            {
                return 0;
            }

            if (radix > 36 || radix <= 1)
    fcc0:	1e93      	subs	r3, r2, #2
    fcc2:	2b22      	cmp	r3, #34	; 0x22
    fcc4:	d849      	bhi.n	fd5a <itoa+0xae>
            {
                return 0;
            }

            sign = (radix == 10 && value < 0);
    fcc6:	2a0a      	cmp	r2, #10
    fcc8:	d041      	beq.n	fd4e <itoa+0xa2>
            {
                v = -value;
            }
            else
            {
                v = (unsigned long)value;
    fcca:	2300      	movs	r3, #0
    fccc:	0005      	movs	r5, r0
    fcce:	469a      	mov	sl, r3
    fcd0:	ab01      	add	r3, sp, #4
    fcd2:	4698      	mov	r8, r3
            while (v || tp == tmp)
            {
                i = v % radix;
                v = v / radix;
                if (i < 10)
                    *tp++ = i + '0';
    fcd4:	001e      	movs	r6, r3
    fcd6:	e008      	b.n	fcea <itoa+0x3e>
            while (v || tp == tmp)
    fcd8:	45b0      	cmp	r8, r6
    fcda:	d117      	bne.n	fd0c <itoa+0x60>
                v = v / radix;
    fcdc:	2300      	movs	r3, #0
                    *tp++ = i + '0';
    fcde:	0029      	movs	r1, r5
    fce0:	001d      	movs	r5, r3
    fce2:	3130      	adds	r1, #48	; 0x30
    fce4:	b2c9      	uxtb	r1, r1
    fce6:	7031      	strb	r1, [r6, #0]
    fce8:	3601      	adds	r6, #1
            while (v || tp == tmp)
    fcea:	2d00      	cmp	r5, #0
    fcec:	d0f4      	beq.n	fcd8 <itoa+0x2c>
                i = v % radix;
    fcee:	0028      	movs	r0, r5
    fcf0:	0039      	movs	r1, r7
    fcf2:	f000 fcf5 	bl	106e0 <__aeabi_uidivmod>
                v = v / radix;
    fcf6:	0028      	movs	r0, r5
                i = v % radix;
    fcf8:	000c      	movs	r4, r1
                v = v / radix;
    fcfa:	0039      	movs	r1, r7
    fcfc:	f000 fc6a 	bl	105d4 <__udivsi3>
    fd00:	0005      	movs	r5, r0
                if (i < 10)
    fd02:	2c09      	cmp	r4, #9
    fd04:	d920      	bls.n	fd48 <itoa+0x9c>
                else
                    *tp++ = i + 'a' - 10;
    fd06:	3457      	adds	r4, #87	; 0x57
    fd08:	b2e1      	uxtb	r1, r4
    fd0a:	e7ec      	b.n	fce6 <itoa+0x3a>
            }

            sp = string;

            if (sign)
    fd0c:	4653      	mov	r3, sl
    fd0e:	4648      	mov	r0, r9
    fd10:	2b00      	cmp	r3, #0
    fd12:	d114      	bne.n	fd3e <itoa+0x92>
                *sp++ = '-';
            while (tp > tmp)
    fd14:	45b0      	cmp	r8, r6
    fd16:	d209      	bcs.n	fd2c <itoa+0x80>
    fd18:	0002      	movs	r2, r0
    fd1a:	0033      	movs	r3, r6
                *sp++ = *--tp;
    fd1c:	3b01      	subs	r3, #1
    fd1e:	7819      	ldrb	r1, [r3, #0]
    fd20:	7011      	strb	r1, [r2, #0]
    fd22:	3201      	adds	r2, #1
            while (tp > tmp)
    fd24:	4543      	cmp	r3, r8
    fd26:	d1f9      	bne.n	fd1c <itoa+0x70>
    fd28:	1af6      	subs	r6, r6, r3
    fd2a:	1980      	adds	r0, r0, r6
            *sp = 0;
    fd2c:	2300      	movs	r3, #0
    fd2e:	7003      	strb	r3, [r0, #0]
    fd30:	4648      	mov	r0, r9
        }
    fd32:	b00a      	add	sp, #40	; 0x28
    fd34:	bc1c      	pop	{r2, r3, r4}
    fd36:	4690      	mov	r8, r2
    fd38:	4699      	mov	r9, r3
    fd3a:	46a2      	mov	sl, r4
    fd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                *sp++ = '-';
    fd3e:	232d      	movs	r3, #45	; 0x2d
    fd40:	464a      	mov	r2, r9
    fd42:	3001      	adds	r0, #1
    fd44:	7013      	strb	r3, [r2, #0]
    fd46:	e7e5      	b.n	fd14 <itoa+0x68>
                v = v / radix;
    fd48:	0003      	movs	r3, r0
                if (i < 10)
    fd4a:	0025      	movs	r5, r4
    fd4c:	e7c7      	b.n	fcde <itoa+0x32>
            sign = (radix == 10 && value < 0);
    fd4e:	2800      	cmp	r0, #0
    fd50:	dabb      	bge.n	fcca <itoa+0x1e>
    fd52:	2301      	movs	r3, #1
                v = -value;
    fd54:	4245      	negs	r5, r0
            sign = (radix == 10 && value < 0);
    fd56:	469a      	mov	sl, r3
    fd58:	e7ba      	b.n	fcd0 <itoa+0x24>
                return 0;
    fd5a:	2000      	movs	r0, #0
            return ltoa(value, string, radix);
    fd5c:	e7e9      	b.n	fd32 <itoa+0x86>
    fd5e:	46c0      	nop			; (mov r8, r8)

0000fd60 <utoa>:

            return string;
        }

        extern char* utoa(unsigned value, char*string, int radix)
        {
    fd60:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd62:	4647      	mov	r7, r8
    fd64:	46ce      	mov	lr, r9
    fd66:	b580      	push	{r7, lr}
    fd68:	4688      	mov	r8, r1
    fd6a:	b08b      	sub	sp, #44	; 0x2c
    fd6c:	0017      	movs	r7, r2
            char* tp = tmp;
            long i;
            unsigned long v = value;
            char* sp;

            if (string == NULL)
    fd6e:	2900      	cmp	r1, #0
    fd70:	d038      	beq.n	fde4 <utoa+0x84>
            {
                return 0;
            }

            if (radix > 36 || radix <= 1)
    fd72:	1e93      	subs	r3, r2, #2
    fd74:	2b22      	cmp	r3, #34	; 0x22
    fd76:	d835      	bhi.n	fde4 <utoa+0x84>
    fd78:	ab01      	add	r3, sp, #4
    fd7a:	4699      	mov	r9, r3
    fd7c:	001d      	movs	r5, r3
    fd7e:	0006      	movs	r6, r0
    fd80:	e008      	b.n	fd94 <utoa+0x34>
            {
                return 0;
            }

            while (v || tp == tmp)
    fd82:	45a9      	cmp	r9, r5
    fd84:	d117      	bne.n	fdb6 <utoa+0x56>
            {
                i = v % radix;
                v = v / radix;
    fd86:	2300      	movs	r3, #0
                if (i < 10)
                    *tp++ = i + '0';
    fd88:	0031      	movs	r1, r6
    fd8a:	001e      	movs	r6, r3
    fd8c:	3130      	adds	r1, #48	; 0x30
    fd8e:	b2c9      	uxtb	r1, r1
    fd90:	7029      	strb	r1, [r5, #0]
    fd92:	3501      	adds	r5, #1
            while (v || tp == tmp)
    fd94:	2e00      	cmp	r6, #0
    fd96:	d0f4      	beq.n	fd82 <utoa+0x22>
                i = v % radix;
    fd98:	0030      	movs	r0, r6
    fd9a:	0039      	movs	r1, r7
    fd9c:	f000 fca0 	bl	106e0 <__aeabi_uidivmod>
                v = v / radix;
    fda0:	0030      	movs	r0, r6
                i = v % radix;
    fda2:	000c      	movs	r4, r1
                v = v / radix;
    fda4:	0039      	movs	r1, r7
    fda6:	f000 fc15 	bl	105d4 <__udivsi3>
    fdaa:	0006      	movs	r6, r0
                if (i < 10)
    fdac:	2c09      	cmp	r4, #9
    fdae:	d916      	bls.n	fdde <utoa+0x7e>
                else
                    *tp++ = i + 'a' - 10;
    fdb0:	3457      	adds	r4, #87	; 0x57
    fdb2:	b2e1      	uxtb	r1, r4
    fdb4:	e7ec      	b.n	fd90 <utoa+0x30>
            }

            sp = string;


            while (tp > tmp)
    fdb6:	45a9      	cmp	r9, r5
    fdb8:	d216      	bcs.n	fde8 <utoa+0x88>
    fdba:	4642      	mov	r2, r8
    fdbc:	002b      	movs	r3, r5
                *sp++ = *--tp;
    fdbe:	3b01      	subs	r3, #1
    fdc0:	7819      	ldrb	r1, [r3, #0]
    fdc2:	7011      	strb	r1, [r2, #0]
    fdc4:	3201      	adds	r2, #1
            while (tp > tmp)
    fdc6:	454b      	cmp	r3, r9
    fdc8:	d1f9      	bne.n	fdbe <utoa+0x5e>
    fdca:	1aed      	subs	r5, r5, r3
    fdcc:	4445      	add	r5, r8
            *sp = 0;
    fdce:	2300      	movs	r3, #0
    fdd0:	4640      	mov	r0, r8
    fdd2:	702b      	strb	r3, [r5, #0]
        }
    fdd4:	b00b      	add	sp, #44	; 0x2c
    fdd6:	bc0c      	pop	{r2, r3}
    fdd8:	4690      	mov	r8, r2
    fdda:	4699      	mov	r9, r3
    fddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                v = v / radix;
    fdde:	0003      	movs	r3, r0
                if (i < 10)
    fde0:	0026      	movs	r6, r4
    fde2:	e7d1      	b.n	fd88 <utoa+0x28>
                return 0;
    fde4:	2000      	movs	r0, #0
            return ultoa(value, string, radix);
    fde6:	e7f5      	b.n	fdd4 <utoa+0x74>
            while (tp > tmp)
    fde8:	4645      	mov	r5, r8
    fdea:	e7f0      	b.n	fdce <utoa+0x6e>

0000fdec <_Znwj>:
    fdec:	b510      	push	{r4, lr}
    fdee:	f000 fd99 	bl	10924 <malloc>
    fdf2:	bd10      	pop	{r4, pc}

0000fdf4 <_ZdlPv>:
    fdf4:	b510      	push	{r4, lr}
    fdf6:	f000 fd9f 	bl	10938 <free>
    fdfa:	bd10      	pop	{r4, pc}

0000fdfc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    fdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fdfe:	0005      	movs	r5, r0
    fe00:	000f      	movs	r7, r1
    fe02:	0016      	movs	r6, r2
  size_t n = 0;
  while (size--) {
    fe04:	2400      	movs	r4, #0
    fe06:	2a00      	cmp	r2, #0
    fe08:	d103      	bne.n	fe12 <_ZN5Print5writeEPKhj+0x16>
    fe0a:	e009      	b.n	fe20 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    fe0c:	3401      	adds	r4, #1
  while (size--) {
    fe0e:	42a6      	cmp	r6, r4
    fe10:	d006      	beq.n	fe20 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    fe12:	682b      	ldr	r3, [r5, #0]
    fe14:	5d39      	ldrb	r1, [r7, r4]
    fe16:	681b      	ldr	r3, [r3, #0]
    fe18:	0028      	movs	r0, r5
    fe1a:	4798      	blx	r3
    fe1c:	2800      	cmp	r0, #0
    fe1e:	d1f5      	bne.n	fe0c <_ZN5Print5writeEPKhj+0x10>
    else break;
  }
  return n;
}
    fe20:	0020      	movs	r0, r4
    fe22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fe24 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    fe24:	6001      	str	r1, [r0, #0]
}
    fe26:	4770      	bx	lr

0000fe28 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    fe28:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe2a:	ac05      	add	r4, sp, #20
    fe2c:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    fe2e:	6804      	ldr	r4, [r0, #0]
    fe30:	1e98      	subs	r0, r3, #2
    fe32:	1e47      	subs	r7, r0, #1
    fe34:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    fe36:	6826      	ldr	r6, [r4, #0]
    fe38:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    fe3a:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    fe3c:	4332      	orrs	r2, r6
    fe3e:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    fe40:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    fe42:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    fe44:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    fe46:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    fe48:	6862      	ldr	r2, [r4, #4]
    fe4a:	4329      	orrs	r1, r5
    fe4c:	2b02      	cmp	r3, #2
    fe4e:	d005      	beq.n	fe5c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x34>
    fe50:	0358      	lsls	r0, r3, #13
    fe52:	0013      	movs	r3, r2
    fe54:	430b      	orrs	r3, r1
    fe56:	4303      	orrs	r3, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    fe58:	6063      	str	r3, [r4, #4]
}
    fe5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe5c:	2000      	movs	r0, #0
    fe5e:	e7f8      	b.n	fe52 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2a>

0000fe60 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    fe60:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    fe62:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    fe64:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    fe66:	03a4      	lsls	r4, r4, #14
    fe68:	6818      	ldr	r0, [r3, #0]
    fe6a:	0512      	lsls	r2, r2, #20
    fe6c:	4022      	ands	r2, r4
    fe6e:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    fe70:	20c0      	movs	r0, #192	; 0xc0
    fe72:	0409      	lsls	r1, r1, #16
    fe74:	0280      	lsls	r0, r0, #10
    fe76:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    fe78:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    fe7a:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    fe7c:	685a      	ldr	r2, [r3, #4]
    fe7e:	4310      	orrs	r0, r2
    fe80:	6058      	str	r0, [r3, #4]
}
    fe82:	bd10      	pop	{r4, pc}

0000fe84 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    fe84:	2101      	movs	r1, #1
    fe86:	6802      	ldr	r2, [r0, #0]
    fe88:	6813      	ldr	r3, [r2, #0]
    fe8a:	430b      	orrs	r3, r1
    fe8c:	6013      	str	r3, [r2, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    fe8e:	6813      	ldr	r3, [r2, #0]
    fe90:	07db      	lsls	r3, r3, #31
    fe92:	d4fc      	bmi.n	fe8e <_ZN6SERCOM9resetUARTEv+0xa>
    fe94:	69d3      	ldr	r3, [r2, #28]
    fe96:	07db      	lsls	r3, r3, #31
    fe98:	d4f9      	bmi.n	fe8e <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    fe9a:	4770      	bx	lr

0000fe9c <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    fe9c:	2102      	movs	r1, #2
    fe9e:	6802      	ldr	r2, [r0, #0]
    fea0:	6813      	ldr	r3, [r2, #0]
    fea2:	430b      	orrs	r3, r1
    fea4:	6013      	str	r3, [r2, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    fea6:	69d3      	ldr	r3, [r2, #28]
    fea8:	079b      	lsls	r3, r3, #30
    feaa:	d4fc      	bmi.n	fea6 <_ZN6SERCOM10enableUARTEv+0xa>
}
    feac:	4770      	bx	lr
    feae:	46c0      	nop			; (mov r8, r8)

0000feb0 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    feb0:	6802      	ldr	r2, [r0, #0]
    feb2:	7e13      	ldrb	r3, [r2, #24]
  if(isDataRegisterEmptyUART())
    feb4:	07db      	lsls	r3, r3, #31
    feb6:	d402      	bmi.n	febe <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    feb8:	7e13      	ldrb	r3, [r2, #24]
    feba:	079b      	lsls	r3, r3, #30
    febc:	d5fc      	bpl.n	feb8 <_ZN6SERCOM9flushUARTEv+0x8>
}
    febe:	4770      	bx	lr

0000fec0 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    fec0:	2200      	movs	r2, #0
    fec2:	6803      	ldr	r3, [r0, #0]
    fec4:	835a      	strh	r2, [r3, #26]
}
    fec6:	4770      	bx	lr

0000fec8 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    fec8:	6803      	ldr	r3, [r0, #0]
    feca:	7e18      	ldrb	r0, [r3, #24]
    fecc:	0740      	lsls	r0, r0, #29
    fece:	0fc0      	lsrs	r0, r0, #31
}
    fed0:	4770      	bx	lr
    fed2:	46c0      	nop			; (mov r8, r8)

0000fed4 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    fed4:	6803      	ldr	r3, [r0, #0]
    fed6:	7e18      	ldrb	r0, [r3, #24]
    fed8:	09c0      	lsrs	r0, r0, #7
}
    feda:	4770      	bx	lr

0000fedc <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    fedc:	2380      	movs	r3, #128	; 0x80
    fede:	6802      	ldr	r2, [r0, #0]
    fee0:	425b      	negs	r3, r3
    fee2:	7e11      	ldrb	r1, [r2, #24]
    fee4:	430b      	orrs	r3, r1
    fee6:	7613      	strb	r3, [r2, #24]
}
    fee8:	4770      	bx	lr
    feea:	46c0      	nop			; (mov r8, r8)

0000feec <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    feec:	6803      	ldr	r3, [r0, #0]
    feee:	7e18      	ldrb	r0, [r3, #24]
    fef0:	07c0      	lsls	r0, r0, #31
    fef2:	0fc0      	lsrs	r0, r0, #31
}
    fef4:	4770      	bx	lr
    fef6:	46c0      	nop			; (mov r8, r8)

0000fef8 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    fef8:	6803      	ldr	r3, [r0, #0]
    fefa:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    fefc:	b2c0      	uxtb	r0, r0
}
    fefe:	4770      	bx	lr

0000ff00 <_ZN6SERCOM13writeDataUARTEh>:

int SERCOM::writeDataUART(uint8_t data)
{
    ff00:	6802      	ldr	r2, [r0, #0]
  return sercom->USART.INTFLAG.bit.DRE;
    ff02:	7e13      	ldrb	r3, [r2, #24]
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    ff04:	07db      	lsls	r3, r3, #31
    ff06:	d5fc      	bpl.n	ff02 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    ff08:	b289      	uxth	r1, r1
  return 1;
}
    ff0a:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    ff0c:	8511      	strh	r1, [r2, #40]	; 0x28
}
    ff0e:	4770      	bx	lr

0000ff10 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    ff10:	2201      	movs	r2, #1
    ff12:	6803      	ldr	r3, [r0, #0]
    ff14:	759a      	strb	r2, [r3, #22]
}
    ff16:	4770      	bx	lr

0000ff18 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    ff18:	2201      	movs	r2, #1
    ff1a:	6803      	ldr	r3, [r0, #0]
    ff1c:	751a      	strb	r2, [r3, #20]
}
    ff1e:	4770      	bx	lr

0000ff20 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:


}

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    ff20:	b570      	push	{r4, r5, r6, lr}
    cpol = 0;
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    ff22:	6804      	ldr	r4, [r0, #0]
  if((clockMode & (0x2ul)) == 0)
    ff24:	2001      	movs	r0, #1
    ff26:	084b      	lsrs	r3, r1, #1
    ff28:	4003      	ands	r3, r0
    cpha = 0;
    ff2a:	4008      	ands	r0, r1
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    ff2c:	6825      	ldr	r5, [r4, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    ff2e:	0700      	lsls	r0, r0, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    ff30:	075b      	lsls	r3, r3, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    ff32:	4303      	orrs	r3, r0
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    ff34:	432b      	orrs	r3, r5
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    ff36:	6023      	str	r3, [r4, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    ff38:	0051      	lsls	r1, r2, #1
    ff3a:	4803      	ldr	r0, [pc, #12]	; (ff48 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x28>)
    ff3c:	f000 fb4a 	bl	105d4 <__udivsi3>
    ff40:	3801      	subs	r0, #1
    ff42:	b2c0      	uxtb	r0, r0
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    ff44:	7320      	strb	r0, [r4, #12]
}
    ff46:	bd70      	pop	{r4, r5, r6, pc}
    ff48:	02dc6c00 	.word	0x02dc6c00

0000ff4c <_ZN6SERCOM9enableSPIEv>:
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    ff4c:	2102      	movs	r1, #2
    ff4e:	6802      	ldr	r2, [r0, #0]
    ff50:	6813      	ldr	r3, [r2, #0]
    ff52:	430b      	orrs	r3, r1
    ff54:	6013      	str	r3, [r2, #0]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    ff56:	69d3      	ldr	r3, [r2, #28]
    ff58:	079b      	lsls	r3, r3, #30
    ff5a:	d4fc      	bmi.n	ff56 <_ZN6SERCOM9enableSPIEv+0xa>
}
    ff5c:	4770      	bx	lr
    ff5e:	46c0      	nop			; (mov r8, r8)

0000ff60 <_ZN6SERCOM10disableSPIEv>:
{
    ff60:	6802      	ldr	r2, [r0, #0]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    ff62:	69d3      	ldr	r3, [r2, #28]
    ff64:	079b      	lsls	r3, r3, #30
    ff66:	d4fc      	bmi.n	ff62 <_ZN6SERCOM10disableSPIEv+0x2>
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    ff68:	2102      	movs	r1, #2
    ff6a:	6813      	ldr	r3, [r2, #0]
    ff6c:	438b      	bics	r3, r1
    ff6e:	6013      	str	r3, [r2, #0]
}
    ff70:	4770      	bx	lr
    ff72:	46c0      	nop			; (mov r8, r8)

0000ff74 <_ZN6SERCOM15transferDataSPIEh>:
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    ff74:	6802      	ldr	r2, [r0, #0]
    ff76:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ff78:	0a5b      	lsrs	r3, r3, #9
    ff7a:	025b      	lsls	r3, r3, #9
    ff7c:	4319      	orrs	r1, r3
    ff7e:	6291      	str	r1, [r2, #40]	; 0x28
  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    ff80:	7e13      	ldrb	r3, [r2, #24]
    ff82:	075b      	lsls	r3, r3, #29
    ff84:	d5fc      	bpl.n	ff80 <_ZN6SERCOM15transferDataSPIEh+0xc>
  return sercom->SPI.DATA.bit.DATA;  // Reading data
    ff86:	6a90      	ldr	r0, [r2, #40]	; 0x28
    ff88:	b2c0      	uxtb	r0, r0
}
    ff8a:	4770      	bx	lr

0000ff8c <_ZN6SERCOM10enableWIREEv>:
void SERCOM::enableWIRE()
{
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    ff8c:	2102      	movs	r1, #2
    ff8e:	6803      	ldr	r3, [r0, #0]
    ff90:	681a      	ldr	r2, [r3, #0]
    ff92:	430a      	orrs	r2, r1
    ff94:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    ff96:	69da      	ldr	r2, [r3, #28]
    ff98:	0792      	lsls	r2, r2, #30
    ff9a:	d4fc      	bmi.n	ff96 <_ZN6SERCOM10enableWIREEv+0xa>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    ff9c:	2130      	movs	r1, #48	; 0x30
    ff9e:	8b5a      	ldrh	r2, [r3, #26]
    ffa0:	438a      	bics	r2, r1
    ffa2:	2110      	movs	r1, #16
    ffa4:	430a      	orrs	r2, r1
    ffa6:	835a      	strh	r2, [r3, #26]

  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
    ffa8:	69da      	ldr	r2, [r3, #28]
    ffaa:	0752      	lsls	r2, r2, #29
    ffac:	d4fc      	bmi.n	ffa8 <_ZN6SERCOM10enableWIREEv+0x1c>
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    ffae:	4770      	bx	lr

0000ffb0 <_ZN6SERCOM18prepareNackBitWIREEv>:
    return true;
}

bool SERCOM::isMasterWIRE( void )
{
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    ffb0:	6802      	ldr	r2, [r0, #0]
    ffb2:	6813      	ldr	r3, [r2, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    ffb4:	2380      	movs	r3, #128	; 0x80
    sercom->I2CM.CTRLB.bit.ACKACT = 1;
    ffb6:	6851      	ldr	r1, [r2, #4]
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    ffb8:	02db      	lsls	r3, r3, #11
    ffba:	430b      	orrs	r3, r1
    ffbc:	6053      	str	r3, [r2, #4]
}
    ffbe:	4770      	bx	lr

0000ffc0 <_ZN6SERCOM17prepareAckBitWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    ffc0:	6802      	ldr	r2, [r0, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    ffc2:	4903      	ldr	r1, [pc, #12]	; (ffd0 <_ZN6SERCOM17prepareAckBitWIREEv+0x10>)
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    ffc4:	6813      	ldr	r3, [r2, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    ffc6:	6853      	ldr	r3, [r2, #4]
    ffc8:	400b      	ands	r3, r1
    ffca:	6053      	str	r3, [r2, #4]
}
    ffcc:	4770      	bx	lr
    ffce:	46c0      	nop			; (mov r8, r8)
    ffd0:	fffbffff 	.word	0xfffbffff

0000ffd4 <_ZN6SERCOM22prepareCommandBitsWireEh>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    ffd4:	6803      	ldr	r3, [r0, #0]
    ffd6:	681a      	ldr	r2, [r3, #0]
    ffd8:	06d2      	lsls	r2, r2, #27
    ffda:	0f52      	lsrs	r2, r2, #29
  if(isMasterWIRE()) {
    ffdc:	2a05      	cmp	r2, #5
    ffde:	d008      	beq.n	fff2 <_ZN6SERCOM22prepareCommandBitsWireEh+0x1e>
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    ffe0:	2003      	movs	r0, #3
    ffe2:	685a      	ldr	r2, [r3, #4]
    ffe4:	4008      	ands	r0, r1
    ffe6:	4909      	ldr	r1, [pc, #36]	; (1000c <_ZN6SERCOM22prepareCommandBitsWireEh+0x38>)
    ffe8:	0400      	lsls	r0, r0, #16
    ffea:	4011      	ands	r1, r2
    ffec:	4301      	orrs	r1, r0
    ffee:	6059      	str	r1, [r3, #4]
}
    fff0:	4770      	bx	lr
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    fff2:	2003      	movs	r0, #3
    fff4:	685a      	ldr	r2, [r3, #4]
    fff6:	4008      	ands	r0, r1
    fff8:	4904      	ldr	r1, [pc, #16]	; (1000c <_ZN6SERCOM22prepareCommandBitsWireEh+0x38>)
    fffa:	0400      	lsls	r0, r0, #16
    fffc:	4011      	ands	r1, r2
    fffe:	4301      	orrs	r1, r0
   10000:	6059      	str	r1, [r3, #4]
    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
   10002:	69da      	ldr	r2, [r3, #28]
   10004:	0752      	lsls	r2, r2, #29
   10006:	d4fc      	bmi.n	10002 <_ZN6SERCOM22prepareCommandBitsWireEh+0x2e>
   10008:	e7f2      	b.n	fff0 <_ZN6SERCOM22prepareCommandBitsWireEh+0x1c>
   1000a:	46c0      	nop			; (mov r8, r8)
   1000c:	fffcffff 	.word	0xfffcffff

00010010 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>:
  address = (address << 0x1ul) | flag;
   10010:	0049      	lsls	r1, r1, #1
   10012:	4311      	orrs	r1, r2
{
   10014:	b510      	push	{r4, lr}
  address = (address << 0x1ul) | flag;
   10016:	b2cc      	uxtb	r4, r1
   10018:	6801      	ldr	r1, [r0, #0]
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
}

bool SERCOM::isBusIdleWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
   1001a:	8b4b      	ldrh	r3, [r1, #26]
   1001c:	069b      	lsls	r3, r3, #26
   1001e:	0f9b      	lsrs	r3, r3, #30
  while ( !isBusIdleWIRE() && !isBusOwnerWIRE() );
   10020:	2b01      	cmp	r3, #1
   10022:	d004      	beq.n	1002e <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x1e>
}

bool SERCOM::isBusOwnerWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
   10024:	8b4b      	ldrh	r3, [r1, #26]
   10026:	069b      	lsls	r3, r3, #26
   10028:	0f9b      	lsrs	r3, r3, #30
  while ( !isBusIdleWIRE() && !isBusOwnerWIRE() );
   1002a:	2b02      	cmp	r3, #2
   1002c:	d1f5      	bne.n	1001a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xa>
  sercom->I2CM.ADDR.bit.ADDR = address;
   1002e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   10030:	0adb      	lsrs	r3, r3, #11
   10032:	02db      	lsls	r3, r3, #11
   10034:	4323      	orrs	r3, r4
   10036:	624b      	str	r3, [r1, #36]	; 0x24
  if ( flag == WIRE_WRITE_FLAG ) // Write mode
   10038:	2a00      	cmp	r2, #0
   1003a:	d10b      	bne.n	10054 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x44>
    while( !sercom->I2CM.INTFLAG.bit.MB )
   1003c:	7e0b      	ldrb	r3, [r1, #24]
   1003e:	07db      	lsls	r3, r3, #31
   10040:	d5fc      	bpl.n	1003c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2c>
  if(sercom->I2CM.STATUS.bit.RXNACK)
   10042:	2301      	movs	r3, #1
   10044:	8b48      	ldrh	r0, [r1, #26]
   10046:	0740      	lsls	r0, r0, #29
   10048:	0fc0      	lsrs	r0, r0, #31
   1004a:	4058      	eors	r0, r3
}
   1004c:	bd10      	pop	{r4, pc}
        if (sercom->I2CM.INTFLAG.bit.MB) {
   1004e:	7e0b      	ldrb	r3, [r1, #24]
   10050:	07db      	lsls	r3, r3, #31
   10052:	d403      	bmi.n	1005c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x4c>
    while( !sercom->I2CM.INTFLAG.bit.SB )
   10054:	7e0b      	ldrb	r3, [r1, #24]
   10056:	079b      	lsls	r3, r3, #30
   10058:	d5f9      	bpl.n	1004e <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x3e>
   1005a:	e7f2      	b.n	10042 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x32>
            sercom->I2CM.CTRLB.bit.CMD = 3; // Stop condition
   1005c:	23c0      	movs	r3, #192	; 0xc0
   1005e:	684a      	ldr	r2, [r1, #4]
   10060:	029b      	lsls	r3, r3, #10
   10062:	4313      	orrs	r3, r2
   10064:	604b      	str	r3, [r1, #4]
            return false;
   10066:	2000      	movs	r0, #0
   10068:	e7f0      	b.n	1004c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x3c>
   1006a:	46c0      	nop			; (mov r8, r8)

0001006c <_ZN6SERCOM18sendDataMasterWIREEh>:
  sercom->I2CM.DATA.bit.DATA = data;
   1006c:	2228      	movs	r2, #40	; 0x28
   1006e:	6803      	ldr	r3, [r0, #0]
   10070:	5499      	strb	r1, [r3, r2]
   10072:	e002      	b.n	1007a <_ZN6SERCOM18sendDataMasterWIREEh+0xe>
    if (sercom->I2CM.STATUS.bit.BUSERR) {
   10074:	8b5a      	ldrh	r2, [r3, #26]
   10076:	07d2      	lsls	r2, r2, #31
   10078:	d408      	bmi.n	1008c <_ZN6SERCOM18sendDataMasterWIREEh+0x20>
  while(!sercom->I2CM.INTFLAG.bit.MB) {
   1007a:	7e1a      	ldrb	r2, [r3, #24]
   1007c:	07d2      	lsls	r2, r2, #31
   1007e:	d5f9      	bpl.n	10074 <_ZN6SERCOM18sendDataMasterWIREEh+0x8>
  if(sercom->I2CM.STATUS.bit.RXNACK)
   10080:	8b58      	ldrh	r0, [r3, #26]
   10082:	2301      	movs	r3, #1
   10084:	0740      	lsls	r0, r0, #29
   10086:	0fc0      	lsrs	r0, r0, #31
   10088:	4058      	eors	r0, r3
}
   1008a:	4770      	bx	lr
      return false;
   1008c:	2000      	movs	r0, #0
   1008e:	e7fc      	b.n	1008a <_ZN6SERCOM18sendDataMasterWIREEh+0x1e>

00010090 <_ZN6SERCOM17sendDataSlaveWIREEh>:
  sercom->I2CS.DATA.bit.DATA = data;
   10090:	2228      	movs	r2, #40	; 0x28
   10092:	6803      	ldr	r3, [r0, #0]
    return false;
   10094:	2000      	movs	r0, #0
  sercom->I2CS.DATA.bit.DATA = data;
   10096:	5499      	strb	r1, [r3, r2]
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
   10098:	7e1a      	ldrb	r2, [r3, #24]
   1009a:	0752      	lsls	r2, r2, #29
   1009c:	d504      	bpl.n	100a8 <_ZN6SERCOM17sendDataSlaveWIREEh+0x18>
   1009e:	8b58      	ldrh	r0, [r3, #26]
   100a0:	2301      	movs	r3, #1
   100a2:	0740      	lsls	r0, r0, #29
   100a4:	0fc0      	lsrs	r0, r0, #31
   100a6:	4058      	eors	r0, r3
}
   100a8:	4770      	bx	lr
   100aa:	46c0      	nop			; (mov r8, r8)

000100ac <_ZN6SERCOM11isSlaveWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
   100ac:	6803      	ldr	r3, [r0, #0]
   100ae:	6818      	ldr	r0, [r3, #0]
   100b0:	06c0      	lsls	r0, r0, #27
   100b2:	0f40      	lsrs	r0, r0, #29
   100b4:	3804      	subs	r0, #4
   100b6:	4243      	negs	r3, r0
   100b8:	4158      	adcs	r0, r3
   100ba:	b2c0      	uxtb	r0, r0
}
   100bc:	4770      	bx	lr
   100be:	46c0      	nop			; (mov r8, r8)

000100c0 <_ZN6SERCOM15isDataReadyWIREEv>:
}

bool SERCOM::isDataReadyWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.DRDY;
   100c0:	6803      	ldr	r3, [r0, #0]
   100c2:	7e18      	ldrb	r0, [r3, #24]
   100c4:	0740      	lsls	r0, r0, #29
   100c6:	0fc0      	lsrs	r0, r0, #31
}
   100c8:	4770      	bx	lr
   100ca:	46c0      	nop			; (mov r8, r8)

000100cc <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.PREC;
   100cc:	6803      	ldr	r3, [r0, #0]
   100ce:	7e18      	ldrb	r0, [r3, #24]
   100d0:	07c0      	lsls	r0, r0, #31
   100d2:	0fc0      	lsrs	r0, r0, #31
}
   100d4:	4770      	bx	lr
   100d6:	46c0      	nop			; (mov r8, r8)

000100d8 <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
  return sercom->I2CS.STATUS.bit.SR;
   100d8:	6803      	ldr	r3, [r0, #0]
   100da:	8b58      	ldrh	r0, [r3, #26]
   100dc:	06c0      	lsls	r0, r0, #27
   100de:	0fc0      	lsrs	r0, r0, #31
}
   100e0:	4770      	bx	lr
   100e2:	46c0      	nop			; (mov r8, r8)

000100e4 <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
  return sercom->I2CS.INTFLAG.bit.AMATCH;
   100e4:	6803      	ldr	r3, [r0, #0]
   100e6:	7e18      	ldrb	r0, [r3, #24]
   100e8:	0780      	lsls	r0, r0, #30
   100ea:	0fc0      	lsrs	r0, r0, #31
}
   100ec:	4770      	bx	lr
   100ee:	46c0      	nop			; (mov r8, r8)

000100f0 <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
  return sercom->I2CS.STATUS.bit.DIR;
   100f0:	6803      	ldr	r3, [r0, #0]
   100f2:	8b58      	ldrh	r0, [r3, #26]
   100f4:	0700      	lsls	r0, r0, #28
   100f6:	0fc0      	lsrs	r0, r0, #31
}
   100f8:	4770      	bx	lr
   100fa:	46c0      	nop			; (mov r8, r8)

000100fc <_ZN6SERCOM12readDataWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
   100fc:	6802      	ldr	r2, [r0, #0]
   100fe:	6813      	ldr	r3, [r2, #0]
   10100:	06db      	lsls	r3, r3, #27
   10102:	0f5b      	lsrs	r3, r3, #29
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
  if(isMasterWIRE())
   10104:	2b05      	cmp	r3, #5
   10106:	d003      	beq.n	10110 <_ZN6SERCOM12readDataWIREEv+0x14>

    return sercom->I2CM.DATA.bit.DATA ;
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
   10108:	2328      	movs	r3, #40	; 0x28
   1010a:	5cd0      	ldrb	r0, [r2, r3]
   1010c:	b2c0      	uxtb	r0, r0
  }
}
   1010e:	4770      	bx	lr
    while( sercom->I2CM.INTFLAG.bit.SB == 0 )
   10110:	7e13      	ldrb	r3, [r2, #24]
   10112:	079b      	lsls	r3, r3, #30
   10114:	d4f8      	bmi.n	10108 <_ZN6SERCOM12readDataWIREEv+0xc>
   10116:	7e13      	ldrb	r3, [r2, #24]
   10118:	079b      	lsls	r3, r3, #30
   1011a:	d5f9      	bpl.n	10110 <_ZN6SERCOM12readDataWIREEv+0x14>
   1011c:	e7f4      	b.n	10108 <_ZN6SERCOM12readDataWIREEv+0xc>
   1011e:	46c0      	nop			; (mov r8, r8)

00010120 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
   10120:	6803      	ldr	r3, [r0, #0]
   10122:	4a2a      	ldr	r2, [pc, #168]	; (101cc <_ZN6SERCOM13initClockNVICEv+0xac>)
{
   10124:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
   10126:	4293      	cmp	r3, r2
   10128:	d028      	beq.n	1017c <_ZN6SERCOM13initClockNVICEv+0x5c>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
   1012a:	4a29      	ldr	r2, [pc, #164]	; (101d0 <_ZN6SERCOM13initClockNVICEv+0xb0>)
   1012c:	4293      	cmp	r3, r2
   1012e:	d02d      	beq.n	1018c <_ZN6SERCOM13initClockNVICEv+0x6c>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
   10130:	4a28      	ldr	r2, [pc, #160]	; (101d4 <_ZN6SERCOM13initClockNVICEv+0xb4>)
   10132:	4293      	cmp	r3, r2
   10134:	d032      	beq.n	1019c <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
   10136:	4a28      	ldr	r2, [pc, #160]	; (101d8 <_ZN6SERCOM13initClockNVICEv+0xb8>)
   10138:	4293      	cmp	r3, r2
   1013a:	d037      	beq.n	101ac <_ZN6SERCOM13initClockNVICEv+0x8c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
   1013c:	4a27      	ldr	r2, [pc, #156]	; (101dc <_ZN6SERCOM13initClockNVICEv+0xbc>)
   1013e:	4293      	cmp	r3, r2
   10140:	d003      	beq.n	1014a <_ZN6SERCOM13initClockNVICEv+0x2a>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
   10142:	4a27      	ldr	r2, [pc, #156]	; (101e0 <_ZN6SERCOM13initClockNVICEv+0xc0>)
   10144:	4293      	cmp	r3, r2
   10146:	d038      	beq.n	101ba <_ZN6SERCOM13initClockNVICEv+0x9a>

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
  {
    /* Wait for synchronization */
  }
}
   10148:	bd30      	pop	{r4, r5, pc}
   1014a:	25c0      	movs	r5, #192	; 0xc0
   1014c:	2080      	movs	r0, #128	; 0x80
   1014e:	2303      	movs	r3, #3
   10150:	4a24      	ldr	r2, [pc, #144]	; (101e4 <_ZN6SERCOM13initClockNVICEv+0xc4>)
   10152:	4c25      	ldr	r4, [pc, #148]	; (101e8 <_ZN6SERCOM13initClockNVICEv+0xc8>)
   10154:	022d      	lsls	r5, r5, #8
   10156:	0180      	lsls	r0, r0, #6
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10158:	4924      	ldr	r1, [pc, #144]	; (101ec <_ZN6SERCOM13initClockNVICEv+0xcc>)
   1015a:	009b      	lsls	r3, r3, #2
   1015c:	6008      	str	r0, [r1, #0]
   1015e:	468c      	mov	ip, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   10160:	21c0      	movs	r1, #192	; 0xc0
   10162:	4463      	add	r3, ip
   10164:	0089      	lsls	r1, r1, #2
   10166:	5858      	ldr	r0, [r3, r1]
   10168:	4002      	ands	r2, r0
   1016a:	432a      	orrs	r2, r5
   1016c:	505a      	str	r2, [r3, r1]
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
   1016e:	4a20      	ldr	r2, [pc, #128]	; (101f0 <_ZN6SERCOM13initClockNVICEv+0xd0>)
   10170:	8054      	strh	r4, [r2, #2]
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
   10172:	7853      	ldrb	r3, [r2, #1]
   10174:	b25b      	sxtb	r3, r3
   10176:	2b00      	cmp	r3, #0
   10178:	dbfb      	blt.n	10172 <_ZN6SERCOM13initClockNVICEv+0x52>
   1017a:	e7e5      	b.n	10148 <_ZN6SERCOM13initClockNVICEv+0x28>
   1017c:	25c0      	movs	r5, #192	; 0xc0
   1017e:	2080      	movs	r0, #128	; 0x80
   10180:	022d      	lsls	r5, r5, #8
   10182:	4a18      	ldr	r2, [pc, #96]	; (101e4 <_ZN6SERCOM13initClockNVICEv+0xc4>)
   10184:	2302      	movs	r3, #2
   10186:	0080      	lsls	r0, r0, #2
   10188:	4c1a      	ldr	r4, [pc, #104]	; (101f4 <_ZN6SERCOM13initClockNVICEv+0xd4>)
   1018a:	e7e5      	b.n	10158 <_ZN6SERCOM13initClockNVICEv+0x38>
   1018c:	25c0      	movs	r5, #192	; 0xc0
   1018e:	2080      	movs	r0, #128	; 0x80
   10190:	042d      	lsls	r5, r5, #16
   10192:	4a19      	ldr	r2, [pc, #100]	; (101f8 <_ZN6SERCOM13initClockNVICEv+0xd8>)
   10194:	2302      	movs	r3, #2
   10196:	00c0      	lsls	r0, r0, #3
   10198:	4c18      	ldr	r4, [pc, #96]	; (101fc <_ZN6SERCOM13initClockNVICEv+0xdc>)
   1019a:	e7dd      	b.n	10158 <_ZN6SERCOM13initClockNVICEv+0x38>
   1019c:	25c0      	movs	r5, #192	; 0xc0
   1019e:	2080      	movs	r0, #128	; 0x80
   101a0:	062d      	lsls	r5, r5, #24
   101a2:	4a17      	ldr	r2, [pc, #92]	; (10200 <_ZN6SERCOM13initClockNVICEv+0xe0>)
   101a4:	2302      	movs	r3, #2
   101a6:	0100      	lsls	r0, r0, #4
   101a8:	4c16      	ldr	r4, [pc, #88]	; (10204 <_ZN6SERCOM13initClockNVICEv+0xe4>)
   101aa:	e7d5      	b.n	10158 <_ZN6SERCOM13initClockNVICEv+0x38>
   101ac:	2080      	movs	r0, #128	; 0x80
   101ae:	25c0      	movs	r5, #192	; 0xc0
   101b0:	4a15      	ldr	r2, [pc, #84]	; (10208 <_ZN6SERCOM13initClockNVICEv+0xe8>)
   101b2:	2303      	movs	r3, #3
   101b4:	0140      	lsls	r0, r0, #5
   101b6:	4c15      	ldr	r4, [pc, #84]	; (1020c <_ZN6SERCOM13initClockNVICEv+0xec>)
   101b8:	e7ce      	b.n	10158 <_ZN6SERCOM13initClockNVICEv+0x38>
   101ba:	25c0      	movs	r5, #192	; 0xc0
   101bc:	2080      	movs	r0, #128	; 0x80
   101be:	042d      	lsls	r5, r5, #16
   101c0:	4a0d      	ldr	r2, [pc, #52]	; (101f8 <_ZN6SERCOM13initClockNVICEv+0xd8>)
   101c2:	2303      	movs	r3, #3
   101c4:	01c0      	lsls	r0, r0, #7
   101c6:	4c12      	ldr	r4, [pc, #72]	; (10210 <_ZN6SERCOM13initClockNVICEv+0xf0>)
   101c8:	e7c6      	b.n	10158 <_ZN6SERCOM13initClockNVICEv+0x38>
   101ca:	46c0      	nop			; (mov r8, r8)
   101cc:	42000800 	.word	0x42000800
   101d0:	42000c00 	.word	0x42000c00
   101d4:	42001000 	.word	0x42001000
   101d8:	42001400 	.word	0x42001400
   101dc:	42001800 	.word	0x42001800
   101e0:	42001c00 	.word	0x42001c00
   101e4:	ffff00ff 	.word	0xffff00ff
   101e8:	00004018 	.word	0x00004018
   101ec:	e000e100 	.word	0xe000e100
   101f0:	40000c00 	.word	0x40000c00
   101f4:	00004014 	.word	0x00004014
   101f8:	ff00ffff 	.word	0xff00ffff
   101fc:	00004015 	.word	0x00004015
   10200:	00ffffff 	.word	0x00ffffff
   10204:	00004016 	.word	0x00004016
   10208:	ffffff00 	.word	0xffffff00
   1020c:	00004017 	.word	0x00004017
   10210:	00004019 	.word	0x00004019

00010214 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
   10214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10216:	0004      	movs	r4, r0
   10218:	0016      	movs	r6, r2
   1021a:	001f      	movs	r7, r3
   1021c:	000d      	movs	r5, r1
  initClockNVIC();
   1021e:	f7ff ff7f 	bl	10120 <_ZN6SERCOM13initClockNVICEv>
  sercom->USART.CTRLA.bit.SWRST = 1 ;
   10222:	2201      	movs	r2, #1
   10224:	6824      	ldr	r4, [r4, #0]
   10226:	6823      	ldr	r3, [r4, #0]
   10228:	4313      	orrs	r3, r2
   1022a:	6023      	str	r3, [r4, #0]
  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
   1022c:	6823      	ldr	r3, [r4, #0]
   1022e:	07db      	lsls	r3, r3, #31
   10230:	d4fc      	bmi.n	1022c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x18>
   10232:	69e3      	ldr	r3, [r4, #28]
   10234:	07db      	lsls	r3, r3, #31
   10236:	d4f9      	bmi.n	1022c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x18>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
   10238:	231c      	movs	r3, #28
   1023a:	00aa      	lsls	r2, r5, #2
   1023c:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
   1023e:	0772      	lsls	r2, r6, #29
   10240:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
   10242:	4313      	orrs	r3, r2
   10244:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
   10246:	2384      	movs	r3, #132	; 0x84
   10248:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
   1024a:	2d01      	cmp	r5, #1
   1024c:	d000      	beq.n	10250 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x3c>
}
   1024e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10250:	2108      	movs	r1, #8
    if (sampleRate == SAMPLE_RATE_x16) {
   10252:	2e01      	cmp	r6, #1
   10254:	d015      	beq.n	10282 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6e>
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
   10256:	4b0c      	ldr	r3, [pc, #48]	; (10288 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x74>)
   10258:	4379      	muls	r1, r7
   1025a:	6818      	ldr	r0, [r3, #0]
   1025c:	00c0      	lsls	r0, r0, #3
   1025e:	f000 f9b9 	bl	105d4 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
   10262:	2207      	movs	r2, #7
   10264:	89a3      	ldrh	r3, [r4, #12]
   10266:	4002      	ands	r2, r0
   10268:	04db      	lsls	r3, r3, #19
   1026a:	0352      	lsls	r2, r2, #13
   1026c:	0cdb      	lsrs	r3, r3, #19
   1026e:	4313      	orrs	r3, r2
   10270:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
   10272:	0403      	lsls	r3, r0, #16
   10274:	89a0      	ldrh	r0, [r4, #12]
   10276:	0cdb      	lsrs	r3, r3, #19
   10278:	0b40      	lsrs	r0, r0, #13
   1027a:	0340      	lsls	r0, r0, #13
   1027c:	4318      	orrs	r0, r3
   1027e:	81a0      	strh	r0, [r4, #12]
}
   10280:	e7e5      	b.n	1024e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x3a>
    if (sampleRate == SAMPLE_RATE_x16) {
   10282:	3108      	adds	r1, #8
   10284:	e7e7      	b.n	10256 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x42>
   10286:	46c0      	nop			; (mov r8, r8)
   10288:	20000048 	.word	0x20000048

0001028c <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
{
   1028c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1028e:	46c6      	mov	lr, r8
   10290:	000e      	movs	r6, r1
  sercom->SPI.CTRLA.bit.SWRST = 1;
   10292:	2101      	movs	r1, #1
{
   10294:	4680      	mov	r8, r0
   10296:	b500      	push	{lr}
   10298:	0014      	movs	r4, r2
  sercom->SPI.CTRLA.bit.SWRST = 1;
   1029a:	6802      	ldr	r2, [r0, #0]
{
   1029c:	001d      	movs	r5, r3
   1029e:	ab06      	add	r3, sp, #24
   102a0:	781f      	ldrb	r7, [r3, #0]
  sercom->SPI.CTRLA.bit.SWRST = 1;
   102a2:	6813      	ldr	r3, [r2, #0]
   102a4:	430b      	orrs	r3, r1
   102a6:	6013      	str	r3, [r2, #0]
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
   102a8:	6813      	ldr	r3, [r2, #0]
   102aa:	07db      	lsls	r3, r3, #31
   102ac:	d4fc      	bmi.n	102a8 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder+0x1c>
   102ae:	69d3      	ldr	r3, [r2, #28]
   102b0:	07db      	lsls	r3, r3, #31
   102b2:	d4f9      	bmi.n	102a8 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder+0x1c>
  initClockNVIC();
   102b4:	4640      	mov	r0, r8
   102b6:	f7ff ff33 	bl	10120 <_ZN6SERCOM13initClockNVICEv>
                          SERCOM_SPI_CTRLA_DIPO(miso) |
   102ba:	22c0      	movs	r2, #192	; 0xc0
   102bc:	0524      	lsls	r4, r4, #20
   102be:	0392      	lsls	r2, r2, #14
   102c0:	4014      	ands	r4, r2
   102c2:	220c      	movs	r2, #12
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
   102c4:	07bf      	lsls	r7, r7, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
   102c6:	4317      	orrs	r7, r2
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
   102c8:	22c0      	movs	r2, #192	; 0xc0
   102ca:	0436      	lsls	r6, r6, #16
   102cc:	0292      	lsls	r2, r2, #10
   102ce:	4016      	ands	r6, r2
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
   102d0:	2207      	movs	r2, #7
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
   102d2:	4643      	mov	r3, r8
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
   102d4:	402a      	ands	r2, r5
   102d6:	2580      	movs	r5, #128	; 0x80
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
   102d8:	681b      	ldr	r3, [r3, #0]
                          SERCOM_SPI_CTRLA_DIPO(miso) |
   102da:	433c      	orrs	r4, r7
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
   102dc:	02ad      	lsls	r5, r5, #10
                          SERCOM_SPI_CTRLA_DIPO(miso) |
   102de:	4334      	orrs	r4, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
   102e0:	4315      	orrs	r5, r2
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
   102e2:	601c      	str	r4, [r3, #0]
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
   102e4:	605d      	str	r5, [r3, #4]
}
   102e6:	bc04      	pop	{r2}
   102e8:	4690      	mov	r8, r2
   102ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000102ec <_ZN6SERCOM14initMasterWIREEm>:
{
   102ec:	b570      	push	{r4, r5, r6, lr}
   102ee:	0004      	movs	r4, r0
   102f0:	000d      	movs	r5, r1
  initClockNVIC() ;
   102f2:	f7ff ff15 	bl	10120 <_ZN6SERCOM13initClockNVICEv>
  sercom->I2CM.CTRLA.bit.SWRST = 1;
   102f6:	2201      	movs	r2, #1
   102f8:	6824      	ldr	r4, [r4, #0]
   102fa:	6823      	ldr	r3, [r4, #0]
   102fc:	4313      	orrs	r3, r2
   102fe:	6023      	str	r3, [r4, #0]
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
   10300:	6823      	ldr	r3, [r4, #0]
   10302:	07db      	lsls	r3, r3, #31
   10304:	d4fc      	bmi.n	10300 <_ZN6SERCOM14initMasterWIREEm+0x14>
   10306:	69e3      	ldr	r3, [r4, #28]
   10308:	07db      	lsls	r3, r3, #31
   1030a:	d4f9      	bmi.n	10300 <_ZN6SERCOM14initMasterWIREEm+0x14>
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
   1030c:	2314      	movs	r3, #20
   1030e:	6023      	str	r3, [r4, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
   10310:	4b0d      	ldr	r3, [pc, #52]	; (10348 <_ZN6SERCOM14initMasterWIREEm+0x5c>)
   10312:	0069      	lsls	r1, r5, #1
   10314:	681e      	ldr	r6, [r3, #0]
   10316:	0030      	movs	r0, r6
   10318:	f000 f95c 	bl	105d4 <__udivsi3>
   1031c:	490b      	ldr	r1, [pc, #44]	; (1034c <_ZN6SERCOM14initMasterWIREEm+0x60>)
   1031e:	0005      	movs	r5, r0
   10320:	0030      	movs	r0, r6
   10322:	f000 f957 	bl	105d4 <__udivsi3>
   10326:	21fa      	movs	r1, #250	; 0xfa
   10328:	0143      	lsls	r3, r0, #5
   1032a:	1a1b      	subs	r3, r3, r0
   1032c:	009b      	lsls	r3, r3, #2
   1032e:	1818      	adds	r0, r3, r0
   10330:	00c9      	lsls	r1, r1, #3
   10332:	f000 f94f 	bl	105d4 <__udivsi3>
   10336:	22ff      	movs	r2, #255	; 0xff
   10338:	68e3      	ldr	r3, [r4, #12]
   1033a:	1a2d      	subs	r5, r5, r0
   1033c:	3d05      	subs	r5, #5
   1033e:	4015      	ands	r5, r2
   10340:	4393      	bics	r3, r2
   10342:	431d      	orrs	r5, r3
   10344:	60e5      	str	r5, [r4, #12]
}
   10346:	bd70      	pop	{r4, r5, r6, pc}
   10348:	20000048 	.word	0x20000048
   1034c:	000f4240 	.word	0x000f4240

00010350 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
   10350:	203f      	movs	r0, #63	; 0x3f
   10352:	4770      	bx	lr

00010354 <_ZN7Serial_9availableEv>:
{
   10354:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
   10356:	6900      	ldr	r0, [r0, #16]
   10358:	2102      	movs	r1, #2
   1035a:	f7f3 fe65 	bl	4028 <_ZN14USBDeviceClass9availableEm>
}
   1035e:	bd10      	pop	{r4, pc}

00010360 <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
   10360:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
   10362:	6900      	ldr	r0, [r0, #16]
   10364:	2103      	movs	r1, #3
   10366:	f7f3 fda3 	bl	3eb0 <_ZN14USBDeviceClass5flushEm>
}
   1036a:	bd10      	pop	{r4, pc}

0001036c <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
   1036c:	b510      	push	{r4, lr}
   1036e:	0013      	movs	r3, r2
   10370:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
   10372:	000a      	movs	r2, r1
   10374:	6900      	ldr	r0, [r0, #16]
   10376:	2103      	movs	r1, #3
   10378:	f7f3 ffca 	bl	4310 <_ZN14USBDeviceClass4sendEmPKvm>

	if (r > 0) {
   1037c:	2800      	cmp	r0, #0
   1037e:	d101      	bne.n	10384 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
   10380:	2301      	movs	r3, #1
   10382:	6063      	str	r3, [r4, #4]
		return r;
	} else {
		setWriteError();
		return 0;
	}
}
   10384:	bd10      	pop	{r4, pc}
   10386:	46c0      	nop			; (mov r8, r8)

00010388 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
   10388:	4b07      	ldr	r3, [pc, #28]	; (103a8 <_ZN7Serial_4readEv+0x20>)
{
   1038a:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
   1038c:	6818      	ldr	r0, [r3, #0]
{
   1038e:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
   10390:	1c41      	adds	r1, r0, #1
   10392:	d003      	beq.n	1039c <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
   10394:	2201      	movs	r2, #1
   10396:	4252      	negs	r2, r2
   10398:	601a      	str	r2, [r3, #0]
}
   1039a:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
   1039c:	6910      	ldr	r0, [r2, #16]
   1039e:	2102      	movs	r1, #2
   103a0:	f7f3 fe86 	bl	40b0 <_ZN14USBDeviceClass4recvEm>
   103a4:	e7f9      	b.n	1039a <_ZN7Serial_4readEv+0x12>
   103a6:	46c0      	nop			; (mov r8, r8)
   103a8:	200000a0 	.word	0x200000a0

000103ac <_ZN7Serial_5writeEh>:

size_t Serial_::write(uint8_t c) {
   103ac:	b510      	push	{r4, lr}
   103ae:	b082      	sub	sp, #8
   103b0:	0004      	movs	r4, r0
   103b2:	466b      	mov	r3, sp
   103b4:	1dd8      	adds	r0, r3, #7
	return write(&c, 1);
   103b6:	6823      	ldr	r3, [r4, #0]
   103b8:	4a0a      	ldr	r2, [pc, #40]	; (103e4 <_ZN7Serial_5writeEh+0x38>)
   103ba:	685b      	ldr	r3, [r3, #4]
size_t Serial_::write(uint8_t c) {
   103bc:	7001      	strb	r1, [r0, #0]
   103be:	4293      	cmp	r3, r2
   103c0:	d10b      	bne.n	103da <_ZN7Serial_5writeEh+0x2e>
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
   103c2:	0002      	movs	r2, r0
   103c4:	2301      	movs	r3, #1
   103c6:	2103      	movs	r1, #3
   103c8:	6920      	ldr	r0, [r4, #16]
   103ca:	f7f3 ffa1 	bl	4310 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
   103ce:	2800      	cmp	r0, #0
   103d0:	d101      	bne.n	103d6 <_ZN7Serial_5writeEh+0x2a>
   103d2:	2301      	movs	r3, #1
   103d4:	6063      	str	r3, [r4, #4]
}
   103d6:	b002      	add	sp, #8
   103d8:	bd10      	pop	{r4, pc}
	return write(&c, 1);
   103da:	0001      	movs	r1, r0
   103dc:	2201      	movs	r2, #1
   103de:	0020      	movs	r0, r4
   103e0:	4798      	blx	r3
   103e2:	e7f8      	b.n	103d6 <_ZN7Serial_5writeEh+0x2a>
   103e4:	0001036d 	.word	0x0001036d

000103e8 <_ZN7Serial_4peekEv>:
{
   103e8:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
   103ea:	4c0a      	ldr	r4, [pc, #40]	; (10414 <_ZN7Serial_4peekEv+0x2c>)
{
   103ec:	0003      	movs	r3, r0
	if (_serialPeek != -1)
   103ee:	6820      	ldr	r0, [r4, #0]
   103f0:	1c42      	adds	r2, r0, #1
   103f2:	d000      	beq.n	103f6 <_ZN7Serial_4peekEv+0xe>
}
   103f4:	bd10      	pop	{r4, pc}
	_serialPeek = read();
   103f6:	681a      	ldr	r2, [r3, #0]
   103f8:	4907      	ldr	r1, [pc, #28]	; (10418 <_ZN7Serial_4peekEv+0x30>)
   103fa:	6952      	ldr	r2, [r2, #20]
   103fc:	428a      	cmp	r2, r1
   103fe:	d105      	bne.n	1040c <_ZN7Serial_4peekEv+0x24>
	return usb.recv(CDC_ENDPOINT_OUT);
   10400:	6918      	ldr	r0, [r3, #16]
   10402:	2102      	movs	r1, #2
   10404:	f7f3 fe54 	bl	40b0 <_ZN14USBDeviceClass4recvEm>
	_serialPeek = read();
   10408:	6020      	str	r0, [r4, #0]
   1040a:	e7f3      	b.n	103f4 <_ZN7Serial_4peekEv+0xc>
   1040c:	0018      	movs	r0, r3
   1040e:	4790      	blx	r2
   10410:	6020      	str	r0, [r4, #0]
   10412:	e7ef      	b.n	103f4 <_ZN7Serial_4peekEv+0xc>
   10414:	200000a0 	.word	0x200000a0
   10418:	00010389 	.word	0x00010389

0001041c <_Z16CDC_GetInterfacePh>:
{
   1041c:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
   1041e:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
   10420:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
   10422:	3302      	adds	r3, #2
   10424:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
   10426:	4902      	ldr	r1, [pc, #8]	; (10430 <_Z16CDC_GetInterfacePh+0x14>)
   10428:	4802      	ldr	r0, [pc, #8]	; (10434 <_Z16CDC_GetInterfacePh+0x18>)
   1042a:	f7f4 f80b 	bl	4444 <_ZN14USBDeviceClass11sendControlEPKvm>
}
   1042e:	bd10      	pop	{r4, pc}
   10430:	2000005c 	.word	0x2000005c
   10434:	200001cc 	.word	0x200001cc

00010438 <_Z9CDC_SetupR8USBSetup>:
{
   10438:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
   1043a:	7802      	ldrb	r2, [r0, #0]
{
   1043c:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
   1043e:	7841      	ldrb	r1, [r0, #1]
	return false;
   10440:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
   10442:	2aa1      	cmp	r2, #161	; 0xa1
   10444:	d008      	beq.n	10458 <_Z9CDC_SetupR8USBSetup+0x20>
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
   10446:	2a21      	cmp	r2, #33	; 0x21
   10448:	d105      	bne.n	10456 <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
   1044a:	2920      	cmp	r1, #32
   1044c:	d01d      	beq.n	1048a <_Z9CDC_SetupR8USBSetup+0x52>
		if (r == CDC_SET_CONTROL_LINE_STATE)
   1044e:	2922      	cmp	r1, #34	; 0x22
   10450:	d00f      	beq.n	10472 <_Z9CDC_SetupR8USBSetup+0x3a>
		if (CDC_SEND_BREAK == r)
   10452:	2923      	cmp	r1, #35	; 0x23
   10454:	d009      	beq.n	1046a <_Z9CDC_SetupR8USBSetup+0x32>
}
   10456:	bd10      	pop	{r4, pc}
		if (r == CDC_GET_LINE_CODING)
   10458:	2921      	cmp	r1, #33	; 0x21
   1045a:	d1fc      	bne.n	10456 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
   1045c:	3a9a      	subs	r2, #154	; 0x9a
   1045e:	4912      	ldr	r1, [pc, #72]	; (104a8 <_Z9CDC_SetupR8USBSetup+0x70>)
   10460:	4812      	ldr	r0, [pc, #72]	; (104ac <_Z9CDC_SetupR8USBSetup+0x74>)
   10462:	f7f3 ffef 	bl	4444 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
   10466:	2001      	movs	r0, #1
   10468:	e7f5      	b.n	10456 <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
   1046a:	885a      	ldrh	r2, [r3, #2]
   1046c:	4b10      	ldr	r3, [pc, #64]	; (104b0 <_Z9CDC_SetupR8USBSetup+0x78>)
   1046e:	601a      	str	r2, [r3, #0]
			return false;
   10470:	e7f1      	b.n	10456 <_Z9CDC_SetupR8USBSetup+0x1e>
			_usbLineInfo.lineState = setup.wValueL;
   10472:	789b      	ldrb	r3, [r3, #2]
   10474:	4c0c      	ldr	r4, [pc, #48]	; (104a8 <_Z9CDC_SetupR8USBSetup+0x70>)
   10476:	71e3      	strb	r3, [r4, #7]
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
   10478:	2396      	movs	r3, #150	; 0x96
   1047a:	6822      	ldr	r2, [r4, #0]
   1047c:	00db      	lsls	r3, r3, #3
   1047e:	429a      	cmp	r2, r3
   10480:	d00a      	beq.n	10498 <_Z9CDC_SetupR8USBSetup+0x60>
				cancelReset();
   10482:	f7f2 fb6f 	bl	2b64 <cancelReset>
			return false;
   10486:	2000      	movs	r0, #0
   10488:	e7e5      	b.n	10456 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
   1048a:	4c07      	ldr	r4, [pc, #28]	; (104a8 <_Z9CDC_SetupR8USBSetup+0x70>)
   1048c:	3a1a      	subs	r2, #26
   1048e:	0021      	movs	r1, r4
   10490:	4806      	ldr	r0, [pc, #24]	; (104ac <_Z9CDC_SetupR8USBSetup+0x74>)
   10492:	f7f3 fd61 	bl	3f58 <_ZN14USBDeviceClass11recvControlEPvm>
   10496:	e7ef      	b.n	10478 <_Z9CDC_SetupR8USBSetup+0x40>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
   10498:	79e3      	ldrb	r3, [r4, #7]
   1049a:	07db      	lsls	r3, r3, #31
   1049c:	d4f1      	bmi.n	10482 <_Z9CDC_SetupR8USBSetup+0x4a>
				initiateReset(250);
   1049e:	20fa      	movs	r0, #250	; 0xfa
   104a0:	f7f2 fb5a 	bl	2b58 <initiateReset>
			return false;
   104a4:	2000      	movs	r0, #0
   104a6:	e7d6      	b.n	10456 <_Z9CDC_SetupR8USBSetup+0x1e>
   104a8:	20000054 	.word	0x20000054
   104ac:	200001cc 	.word	0x200001cc
   104b0:	20000050 	.word	0x20000050

000104b4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
   104b4:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
   104b6:	2100      	movs	r1, #0
   104b8:	4b05      	ldr	r3, [pc, #20]	; (104d0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
   104ba:	0092      	lsls	r2, r2, #2
   104bc:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
   104be:	4a05      	ldr	r2, [pc, #20]	; (104d4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
   104c0:	6059      	str	r1, [r3, #4]
   104c2:	3208      	adds	r2, #8
   104c4:	601a      	str	r2, [r3, #0]
   104c6:	4a04      	ldr	r2, [pc, #16]	; (104d8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
   104c8:	7619      	strb	r1, [r3, #24]
   104ca:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
   104cc:	4770      	bx	lr
   104ce:	46c0      	nop			; (mov r8, r8)
   104d0:	20000de8 	.word	0x20000de8
   104d4:	000117d8 	.word	0x000117d8
   104d8:	200001cc 	.word	0x200001cc

000104dc <_ZN18PluggableUSBModule12getShortNameEPc>:

protected:
  virtual bool setup(USBSetup& setup) = 0;
  virtual int getInterface(uint8_t* interfaceCount) = 0;
  virtual int getDescriptor(USBSetup& setup) = 0;
  virtual uint8_t getShortName(char *name) { name[0] = 'A'+pluggedInterface; return 1; }
   104dc:	7903      	ldrb	r3, [r0, #4]
   104de:	3341      	adds	r3, #65	; 0x41
   104e0:	2001      	movs	r0, #1
   104e2:	700b      	strb	r3, [r1, #0]
   104e4:	4770      	bx	lr
   104e6:	46c0      	nop			; (mov r8, r8)

000104e8 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
   104e8:	b570      	push	{r4, r5, r6, lr}
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
   104ea:	6844      	ldr	r4, [r0, #4]
{
   104ec:	000e      	movs	r6, r1
	int sent = 0;
   104ee:	2500      	movs	r5, #0
	for (node = rootNode; node; node = node->next) {
   104f0:	2c00      	cmp	r4, #0
   104f2:	d104      	bne.n	104fe <_ZN13PluggableUSB_12getInterfaceEPh+0x16>
   104f4:	e00c      	b.n	10510 <_ZN13PluggableUSB_12getInterfaceEPh+0x28>
   104f6:	68e4      	ldr	r4, [r4, #12]
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
		sent += res;
   104f8:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
   104fa:	2c00      	cmp	r4, #0
   104fc:	d008      	beq.n	10510 <_ZN13PluggableUSB_12getInterfaceEPh+0x28>
		int res = node->getInterface(interfaceCount);
   104fe:	6823      	ldr	r3, [r4, #0]
   10500:	0031      	movs	r1, r6
   10502:	685b      	ldr	r3, [r3, #4]
   10504:	0020      	movs	r0, r4
   10506:	4798      	blx	r3
		if (res < 0)
   10508:	2800      	cmp	r0, #0
   1050a:	daf4      	bge.n	104f6 <_ZN13PluggableUSB_12getInterfaceEPh+0xe>
			return -1;
   1050c:	2501      	movs	r5, #1
   1050e:	426d      	negs	r5, r5
	}
	return sent;
}
   10510:	0028      	movs	r0, r5
   10512:	bd70      	pop	{r4, r5, r6, pc}

00010514 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
   10514:	b570      	push	{r4, r5, r6, lr}
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
   10516:	6844      	ldr	r4, [r0, #4]
{
   10518:	000d      	movs	r5, r1
	for (node = rootNode; node; node = node->next) {
   1051a:	2c00      	cmp	r4, #0
   1051c:	d103      	bne.n	10526 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x12>
   1051e:	e00a      	b.n	10536 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x22>
   10520:	68e4      	ldr	r4, [r4, #12]
   10522:	2c00      	cmp	r4, #0
   10524:	d007      	beq.n	10536 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x22>
		int ret = node->getDescriptor(setup);
   10526:	6823      	ldr	r3, [r4, #0]
   10528:	0029      	movs	r1, r5
   1052a:	689b      	ldr	r3, [r3, #8]
   1052c:	0020      	movs	r0, r4
   1052e:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
   10530:	2800      	cmp	r0, #0
   10532:	d0f5      	beq.n	10520 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0xc>
			return ret;
	}
	return 0;
}
   10534:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   10536:	2000      	movs	r0, #0
   10538:	e7fc      	b.n	10534 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x20>
   1053a:	46c0      	nop			; (mov r8, r8)

0001053c <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
   1053c:	b570      	push	{r4, r5, r6, lr}
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
   1053e:	6844      	ldr	r4, [r0, #4]
{
   10540:	000d      	movs	r5, r1
       for (node = rootNode; node; node = node->next) {
   10542:	2c00      	cmp	r4, #0
   10544:	d00b      	beq.n	1055e <_ZN13PluggableUSB_12getShortNameEPc+0x22>
   10546:	4e0b      	ldr	r6, [pc, #44]	; (10574 <_ZN13PluggableUSB_12getShortNameEPc+0x38>)
               iSerialNum += node->getShortName(iSerialNum);
   10548:	6823      	ldr	r3, [r4, #0]
   1054a:	68db      	ldr	r3, [r3, #12]
   1054c:	42b3      	cmp	r3, r6
   1054e:	d109      	bne.n	10564 <_ZN13PluggableUSB_12getShortNameEPc+0x28>
   10550:	7923      	ldrb	r3, [r4, #4]
   10552:	3341      	adds	r3, #65	; 0x41
   10554:	702b      	strb	r3, [r5, #0]
       for (node = rootNode; node; node = node->next) {
   10556:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
   10558:	3501      	adds	r5, #1
       for (node = rootNode; node; node = node->next) {
   1055a:	2c00      	cmp	r4, #0
   1055c:	d1f4      	bne.n	10548 <_ZN13PluggableUSB_12getShortNameEPc+0xc>
       }
       *iSerialNum = 0;
   1055e:	2300      	movs	r3, #0
   10560:	702b      	strb	r3, [r5, #0]
}
   10562:	bd70      	pop	{r4, r5, r6, pc}
               iSerialNum += node->getShortName(iSerialNum);
   10564:	0029      	movs	r1, r5
   10566:	0020      	movs	r0, r4
   10568:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
   1056a:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
   1056c:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
   1056e:	2c00      	cmp	r4, #0
   10570:	d1ea      	bne.n	10548 <_ZN13PluggableUSB_12getShortNameEPc+0xc>
   10572:	e7f4      	b.n	1055e <_ZN13PluggableUSB_12getShortNameEPc+0x22>
   10574:	000104dd 	.word	0x000104dd

00010578 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
   10578:	b570      	push	{r4, r5, r6, lr}
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
   1057a:	6844      	ldr	r4, [r0, #4]
{
   1057c:	000d      	movs	r5, r1
	for (node = rootNode; node; node = node->next) {
   1057e:	2c00      	cmp	r4, #0
   10580:	d103      	bne.n	1058a <_ZN13PluggableUSB_5setupER8USBSetup+0x12>
   10582:	e00a      	b.n	1059a <_ZN13PluggableUSB_5setupER8USBSetup+0x22>
   10584:	68e4      	ldr	r4, [r4, #12]
   10586:	2c00      	cmp	r4, #0
   10588:	d007      	beq.n	1059a <_ZN13PluggableUSB_5setupER8USBSetup+0x22>
		if (node->setup(setup)) {
   1058a:	6823      	ldr	r3, [r4, #0]
   1058c:	0029      	movs	r1, r5
   1058e:	681b      	ldr	r3, [r3, #0]
   10590:	0020      	movs	r0, r4
   10592:	4798      	blx	r3
   10594:	2800      	cmp	r0, #0
   10596:	d0f5      	beq.n	10584 <_ZN13PluggableUSB_5setupER8USBSetup+0xc>
			return true;
		}
	}
	return false;
}
   10598:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1059a:	2000      	movs	r0, #0
   1059c:	e7fc      	b.n	10598 <_ZN13PluggableUSB_5setupER8USBSetup+0x20>
   1059e:	46c0      	nop			; (mov r8, r8)

000105a0 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
   105a0:	2101      	movs	r1, #1
   105a2:	4a06      	ldr	r2, [pc, #24]	; (105bc <_Z12PluggableUSBv+0x1c>)
{
   105a4:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
   105a6:	6813      	ldr	r3, [r2, #0]
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
   105a8:	4805      	ldr	r0, [pc, #20]	; (105c0 <_Z12PluggableUSBv+0x20>)
	static PluggableUSB_ obj;
   105aa:	400b      	ands	r3, r1
   105ac:	d105      	bne.n	105ba <_Z12PluggableUSBv+0x1a>
                                 rootNode(NULL)
   105ae:	2402      	movs	r4, #2
   105b0:	7004      	strb	r4, [r0, #0]
   105b2:	3402      	adds	r4, #2
   105b4:	7044      	strb	r4, [r0, #1]
   105b6:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
   105b8:	6011      	str	r1, [r2, #0]
}
   105ba:	bd10      	pop	{r4, pc}
   105bc:	20000e04 	.word	0x20000e04
   105c0:	20000e08 	.word	0x20000e08

000105c4 <__aeabi_atexit>:
   105c4:	000b      	movs	r3, r1
   105c6:	b510      	push	{r4, lr}
   105c8:	0001      	movs	r1, r0
   105ca:	0018      	movs	r0, r3
   105cc:	f000 f978 	bl	108c0 <__cxa_atexit>
   105d0:	bd10      	pop	{r4, pc}
	...

000105d4 <__udivsi3>:
   105d4:	2200      	movs	r2, #0
   105d6:	0843      	lsrs	r3, r0, #1
   105d8:	428b      	cmp	r3, r1
   105da:	d374      	bcc.n	106c6 <__udivsi3+0xf2>
   105dc:	0903      	lsrs	r3, r0, #4
   105de:	428b      	cmp	r3, r1
   105e0:	d35f      	bcc.n	106a2 <__udivsi3+0xce>
   105e2:	0a03      	lsrs	r3, r0, #8
   105e4:	428b      	cmp	r3, r1
   105e6:	d344      	bcc.n	10672 <__udivsi3+0x9e>
   105e8:	0b03      	lsrs	r3, r0, #12
   105ea:	428b      	cmp	r3, r1
   105ec:	d328      	bcc.n	10640 <__udivsi3+0x6c>
   105ee:	0c03      	lsrs	r3, r0, #16
   105f0:	428b      	cmp	r3, r1
   105f2:	d30d      	bcc.n	10610 <__udivsi3+0x3c>
   105f4:	22ff      	movs	r2, #255	; 0xff
   105f6:	0209      	lsls	r1, r1, #8
   105f8:	ba12      	rev	r2, r2
   105fa:	0c03      	lsrs	r3, r0, #16
   105fc:	428b      	cmp	r3, r1
   105fe:	d302      	bcc.n	10606 <__udivsi3+0x32>
   10600:	1212      	asrs	r2, r2, #8
   10602:	0209      	lsls	r1, r1, #8
   10604:	d065      	beq.n	106d2 <__udivsi3+0xfe>
   10606:	0b03      	lsrs	r3, r0, #12
   10608:	428b      	cmp	r3, r1
   1060a:	d319      	bcc.n	10640 <__udivsi3+0x6c>
   1060c:	e000      	b.n	10610 <__udivsi3+0x3c>
   1060e:	0a09      	lsrs	r1, r1, #8
   10610:	0bc3      	lsrs	r3, r0, #15
   10612:	428b      	cmp	r3, r1
   10614:	d301      	bcc.n	1061a <__udivsi3+0x46>
   10616:	03cb      	lsls	r3, r1, #15
   10618:	1ac0      	subs	r0, r0, r3
   1061a:	4152      	adcs	r2, r2
   1061c:	0b83      	lsrs	r3, r0, #14
   1061e:	428b      	cmp	r3, r1
   10620:	d301      	bcc.n	10626 <__udivsi3+0x52>
   10622:	038b      	lsls	r3, r1, #14
   10624:	1ac0      	subs	r0, r0, r3
   10626:	4152      	adcs	r2, r2
   10628:	0b43      	lsrs	r3, r0, #13
   1062a:	428b      	cmp	r3, r1
   1062c:	d301      	bcc.n	10632 <__udivsi3+0x5e>
   1062e:	034b      	lsls	r3, r1, #13
   10630:	1ac0      	subs	r0, r0, r3
   10632:	4152      	adcs	r2, r2
   10634:	0b03      	lsrs	r3, r0, #12
   10636:	428b      	cmp	r3, r1
   10638:	d301      	bcc.n	1063e <__udivsi3+0x6a>
   1063a:	030b      	lsls	r3, r1, #12
   1063c:	1ac0      	subs	r0, r0, r3
   1063e:	4152      	adcs	r2, r2
   10640:	0ac3      	lsrs	r3, r0, #11
   10642:	428b      	cmp	r3, r1
   10644:	d301      	bcc.n	1064a <__udivsi3+0x76>
   10646:	02cb      	lsls	r3, r1, #11
   10648:	1ac0      	subs	r0, r0, r3
   1064a:	4152      	adcs	r2, r2
   1064c:	0a83      	lsrs	r3, r0, #10
   1064e:	428b      	cmp	r3, r1
   10650:	d301      	bcc.n	10656 <__udivsi3+0x82>
   10652:	028b      	lsls	r3, r1, #10
   10654:	1ac0      	subs	r0, r0, r3
   10656:	4152      	adcs	r2, r2
   10658:	0a43      	lsrs	r3, r0, #9
   1065a:	428b      	cmp	r3, r1
   1065c:	d301      	bcc.n	10662 <__udivsi3+0x8e>
   1065e:	024b      	lsls	r3, r1, #9
   10660:	1ac0      	subs	r0, r0, r3
   10662:	4152      	adcs	r2, r2
   10664:	0a03      	lsrs	r3, r0, #8
   10666:	428b      	cmp	r3, r1
   10668:	d301      	bcc.n	1066e <__udivsi3+0x9a>
   1066a:	020b      	lsls	r3, r1, #8
   1066c:	1ac0      	subs	r0, r0, r3
   1066e:	4152      	adcs	r2, r2
   10670:	d2cd      	bcs.n	1060e <__udivsi3+0x3a>
   10672:	09c3      	lsrs	r3, r0, #7
   10674:	428b      	cmp	r3, r1
   10676:	d301      	bcc.n	1067c <__udivsi3+0xa8>
   10678:	01cb      	lsls	r3, r1, #7
   1067a:	1ac0      	subs	r0, r0, r3
   1067c:	4152      	adcs	r2, r2
   1067e:	0983      	lsrs	r3, r0, #6
   10680:	428b      	cmp	r3, r1
   10682:	d301      	bcc.n	10688 <__udivsi3+0xb4>
   10684:	018b      	lsls	r3, r1, #6
   10686:	1ac0      	subs	r0, r0, r3
   10688:	4152      	adcs	r2, r2
   1068a:	0943      	lsrs	r3, r0, #5
   1068c:	428b      	cmp	r3, r1
   1068e:	d301      	bcc.n	10694 <__udivsi3+0xc0>
   10690:	014b      	lsls	r3, r1, #5
   10692:	1ac0      	subs	r0, r0, r3
   10694:	4152      	adcs	r2, r2
   10696:	0903      	lsrs	r3, r0, #4
   10698:	428b      	cmp	r3, r1
   1069a:	d301      	bcc.n	106a0 <__udivsi3+0xcc>
   1069c:	010b      	lsls	r3, r1, #4
   1069e:	1ac0      	subs	r0, r0, r3
   106a0:	4152      	adcs	r2, r2
   106a2:	08c3      	lsrs	r3, r0, #3
   106a4:	428b      	cmp	r3, r1
   106a6:	d301      	bcc.n	106ac <__udivsi3+0xd8>
   106a8:	00cb      	lsls	r3, r1, #3
   106aa:	1ac0      	subs	r0, r0, r3
   106ac:	4152      	adcs	r2, r2
   106ae:	0883      	lsrs	r3, r0, #2
   106b0:	428b      	cmp	r3, r1
   106b2:	d301      	bcc.n	106b8 <__udivsi3+0xe4>
   106b4:	008b      	lsls	r3, r1, #2
   106b6:	1ac0      	subs	r0, r0, r3
   106b8:	4152      	adcs	r2, r2
   106ba:	0843      	lsrs	r3, r0, #1
   106bc:	428b      	cmp	r3, r1
   106be:	d301      	bcc.n	106c4 <__udivsi3+0xf0>
   106c0:	004b      	lsls	r3, r1, #1
   106c2:	1ac0      	subs	r0, r0, r3
   106c4:	4152      	adcs	r2, r2
   106c6:	1a41      	subs	r1, r0, r1
   106c8:	d200      	bcs.n	106cc <__udivsi3+0xf8>
   106ca:	4601      	mov	r1, r0
   106cc:	4152      	adcs	r2, r2
   106ce:	4610      	mov	r0, r2
   106d0:	4770      	bx	lr
   106d2:	e7ff      	b.n	106d4 <__udivsi3+0x100>
   106d4:	b501      	push	{r0, lr}
   106d6:	2000      	movs	r0, #0
   106d8:	f000 f8f0 	bl	108bc <__aeabi_idiv0>
   106dc:	bd02      	pop	{r1, pc}
   106de:	46c0      	nop			; (mov r8, r8)

000106e0 <__aeabi_uidivmod>:
   106e0:	2900      	cmp	r1, #0
   106e2:	d0f7      	beq.n	106d4 <__udivsi3+0x100>
   106e4:	e776      	b.n	105d4 <__udivsi3>
   106e6:	4770      	bx	lr

000106e8 <__divsi3>:
   106e8:	4603      	mov	r3, r0
   106ea:	430b      	orrs	r3, r1
   106ec:	d47f      	bmi.n	107ee <__divsi3+0x106>
   106ee:	2200      	movs	r2, #0
   106f0:	0843      	lsrs	r3, r0, #1
   106f2:	428b      	cmp	r3, r1
   106f4:	d374      	bcc.n	107e0 <__divsi3+0xf8>
   106f6:	0903      	lsrs	r3, r0, #4
   106f8:	428b      	cmp	r3, r1
   106fa:	d35f      	bcc.n	107bc <__divsi3+0xd4>
   106fc:	0a03      	lsrs	r3, r0, #8
   106fe:	428b      	cmp	r3, r1
   10700:	d344      	bcc.n	1078c <__divsi3+0xa4>
   10702:	0b03      	lsrs	r3, r0, #12
   10704:	428b      	cmp	r3, r1
   10706:	d328      	bcc.n	1075a <__divsi3+0x72>
   10708:	0c03      	lsrs	r3, r0, #16
   1070a:	428b      	cmp	r3, r1
   1070c:	d30d      	bcc.n	1072a <__divsi3+0x42>
   1070e:	22ff      	movs	r2, #255	; 0xff
   10710:	0209      	lsls	r1, r1, #8
   10712:	ba12      	rev	r2, r2
   10714:	0c03      	lsrs	r3, r0, #16
   10716:	428b      	cmp	r3, r1
   10718:	d302      	bcc.n	10720 <__divsi3+0x38>
   1071a:	1212      	asrs	r2, r2, #8
   1071c:	0209      	lsls	r1, r1, #8
   1071e:	d065      	beq.n	107ec <__divsi3+0x104>
   10720:	0b03      	lsrs	r3, r0, #12
   10722:	428b      	cmp	r3, r1
   10724:	d319      	bcc.n	1075a <__divsi3+0x72>
   10726:	e000      	b.n	1072a <__divsi3+0x42>
   10728:	0a09      	lsrs	r1, r1, #8
   1072a:	0bc3      	lsrs	r3, r0, #15
   1072c:	428b      	cmp	r3, r1
   1072e:	d301      	bcc.n	10734 <__divsi3+0x4c>
   10730:	03cb      	lsls	r3, r1, #15
   10732:	1ac0      	subs	r0, r0, r3
   10734:	4152      	adcs	r2, r2
   10736:	0b83      	lsrs	r3, r0, #14
   10738:	428b      	cmp	r3, r1
   1073a:	d301      	bcc.n	10740 <__divsi3+0x58>
   1073c:	038b      	lsls	r3, r1, #14
   1073e:	1ac0      	subs	r0, r0, r3
   10740:	4152      	adcs	r2, r2
   10742:	0b43      	lsrs	r3, r0, #13
   10744:	428b      	cmp	r3, r1
   10746:	d301      	bcc.n	1074c <__divsi3+0x64>
   10748:	034b      	lsls	r3, r1, #13
   1074a:	1ac0      	subs	r0, r0, r3
   1074c:	4152      	adcs	r2, r2
   1074e:	0b03      	lsrs	r3, r0, #12
   10750:	428b      	cmp	r3, r1
   10752:	d301      	bcc.n	10758 <__divsi3+0x70>
   10754:	030b      	lsls	r3, r1, #12
   10756:	1ac0      	subs	r0, r0, r3
   10758:	4152      	adcs	r2, r2
   1075a:	0ac3      	lsrs	r3, r0, #11
   1075c:	428b      	cmp	r3, r1
   1075e:	d301      	bcc.n	10764 <__divsi3+0x7c>
   10760:	02cb      	lsls	r3, r1, #11
   10762:	1ac0      	subs	r0, r0, r3
   10764:	4152      	adcs	r2, r2
   10766:	0a83      	lsrs	r3, r0, #10
   10768:	428b      	cmp	r3, r1
   1076a:	d301      	bcc.n	10770 <__divsi3+0x88>
   1076c:	028b      	lsls	r3, r1, #10
   1076e:	1ac0      	subs	r0, r0, r3
   10770:	4152      	adcs	r2, r2
   10772:	0a43      	lsrs	r3, r0, #9
   10774:	428b      	cmp	r3, r1
   10776:	d301      	bcc.n	1077c <__divsi3+0x94>
   10778:	024b      	lsls	r3, r1, #9
   1077a:	1ac0      	subs	r0, r0, r3
   1077c:	4152      	adcs	r2, r2
   1077e:	0a03      	lsrs	r3, r0, #8
   10780:	428b      	cmp	r3, r1
   10782:	d301      	bcc.n	10788 <__divsi3+0xa0>
   10784:	020b      	lsls	r3, r1, #8
   10786:	1ac0      	subs	r0, r0, r3
   10788:	4152      	adcs	r2, r2
   1078a:	d2cd      	bcs.n	10728 <__divsi3+0x40>
   1078c:	09c3      	lsrs	r3, r0, #7
   1078e:	428b      	cmp	r3, r1
   10790:	d301      	bcc.n	10796 <__divsi3+0xae>
   10792:	01cb      	lsls	r3, r1, #7
   10794:	1ac0      	subs	r0, r0, r3
   10796:	4152      	adcs	r2, r2
   10798:	0983      	lsrs	r3, r0, #6
   1079a:	428b      	cmp	r3, r1
   1079c:	d301      	bcc.n	107a2 <__divsi3+0xba>
   1079e:	018b      	lsls	r3, r1, #6
   107a0:	1ac0      	subs	r0, r0, r3
   107a2:	4152      	adcs	r2, r2
   107a4:	0943      	lsrs	r3, r0, #5
   107a6:	428b      	cmp	r3, r1
   107a8:	d301      	bcc.n	107ae <__divsi3+0xc6>
   107aa:	014b      	lsls	r3, r1, #5
   107ac:	1ac0      	subs	r0, r0, r3
   107ae:	4152      	adcs	r2, r2
   107b0:	0903      	lsrs	r3, r0, #4
   107b2:	428b      	cmp	r3, r1
   107b4:	d301      	bcc.n	107ba <__divsi3+0xd2>
   107b6:	010b      	lsls	r3, r1, #4
   107b8:	1ac0      	subs	r0, r0, r3
   107ba:	4152      	adcs	r2, r2
   107bc:	08c3      	lsrs	r3, r0, #3
   107be:	428b      	cmp	r3, r1
   107c0:	d301      	bcc.n	107c6 <__divsi3+0xde>
   107c2:	00cb      	lsls	r3, r1, #3
   107c4:	1ac0      	subs	r0, r0, r3
   107c6:	4152      	adcs	r2, r2
   107c8:	0883      	lsrs	r3, r0, #2
   107ca:	428b      	cmp	r3, r1
   107cc:	d301      	bcc.n	107d2 <__divsi3+0xea>
   107ce:	008b      	lsls	r3, r1, #2
   107d0:	1ac0      	subs	r0, r0, r3
   107d2:	4152      	adcs	r2, r2
   107d4:	0843      	lsrs	r3, r0, #1
   107d6:	428b      	cmp	r3, r1
   107d8:	d301      	bcc.n	107de <__divsi3+0xf6>
   107da:	004b      	lsls	r3, r1, #1
   107dc:	1ac0      	subs	r0, r0, r3
   107de:	4152      	adcs	r2, r2
   107e0:	1a41      	subs	r1, r0, r1
   107e2:	d200      	bcs.n	107e6 <__divsi3+0xfe>
   107e4:	4601      	mov	r1, r0
   107e6:	4152      	adcs	r2, r2
   107e8:	4610      	mov	r0, r2
   107ea:	4770      	bx	lr
   107ec:	e05d      	b.n	108aa <__divsi3+0x1c2>
   107ee:	0fca      	lsrs	r2, r1, #31
   107f0:	d000      	beq.n	107f4 <__divsi3+0x10c>
   107f2:	4249      	negs	r1, r1
   107f4:	1003      	asrs	r3, r0, #32
   107f6:	d300      	bcc.n	107fa <__divsi3+0x112>
   107f8:	4240      	negs	r0, r0
   107fa:	4053      	eors	r3, r2
   107fc:	2200      	movs	r2, #0
   107fe:	469c      	mov	ip, r3
   10800:	0903      	lsrs	r3, r0, #4
   10802:	428b      	cmp	r3, r1
   10804:	d32d      	bcc.n	10862 <__divsi3+0x17a>
   10806:	0a03      	lsrs	r3, r0, #8
   10808:	428b      	cmp	r3, r1
   1080a:	d312      	bcc.n	10832 <__divsi3+0x14a>
   1080c:	22fc      	movs	r2, #252	; 0xfc
   1080e:	0189      	lsls	r1, r1, #6
   10810:	ba12      	rev	r2, r2
   10812:	0a03      	lsrs	r3, r0, #8
   10814:	428b      	cmp	r3, r1
   10816:	d30c      	bcc.n	10832 <__divsi3+0x14a>
   10818:	0189      	lsls	r1, r1, #6
   1081a:	1192      	asrs	r2, r2, #6
   1081c:	428b      	cmp	r3, r1
   1081e:	d308      	bcc.n	10832 <__divsi3+0x14a>
   10820:	0189      	lsls	r1, r1, #6
   10822:	1192      	asrs	r2, r2, #6
   10824:	428b      	cmp	r3, r1
   10826:	d304      	bcc.n	10832 <__divsi3+0x14a>
   10828:	0189      	lsls	r1, r1, #6
   1082a:	d03a      	beq.n	108a2 <__divsi3+0x1ba>
   1082c:	1192      	asrs	r2, r2, #6
   1082e:	e000      	b.n	10832 <__divsi3+0x14a>
   10830:	0989      	lsrs	r1, r1, #6
   10832:	09c3      	lsrs	r3, r0, #7
   10834:	428b      	cmp	r3, r1
   10836:	d301      	bcc.n	1083c <__divsi3+0x154>
   10838:	01cb      	lsls	r3, r1, #7
   1083a:	1ac0      	subs	r0, r0, r3
   1083c:	4152      	adcs	r2, r2
   1083e:	0983      	lsrs	r3, r0, #6
   10840:	428b      	cmp	r3, r1
   10842:	d301      	bcc.n	10848 <__divsi3+0x160>
   10844:	018b      	lsls	r3, r1, #6
   10846:	1ac0      	subs	r0, r0, r3
   10848:	4152      	adcs	r2, r2
   1084a:	0943      	lsrs	r3, r0, #5
   1084c:	428b      	cmp	r3, r1
   1084e:	d301      	bcc.n	10854 <__divsi3+0x16c>
   10850:	014b      	lsls	r3, r1, #5
   10852:	1ac0      	subs	r0, r0, r3
   10854:	4152      	adcs	r2, r2
   10856:	0903      	lsrs	r3, r0, #4
   10858:	428b      	cmp	r3, r1
   1085a:	d301      	bcc.n	10860 <__divsi3+0x178>
   1085c:	010b      	lsls	r3, r1, #4
   1085e:	1ac0      	subs	r0, r0, r3
   10860:	4152      	adcs	r2, r2
   10862:	08c3      	lsrs	r3, r0, #3
   10864:	428b      	cmp	r3, r1
   10866:	d301      	bcc.n	1086c <__divsi3+0x184>
   10868:	00cb      	lsls	r3, r1, #3
   1086a:	1ac0      	subs	r0, r0, r3
   1086c:	4152      	adcs	r2, r2
   1086e:	0883      	lsrs	r3, r0, #2
   10870:	428b      	cmp	r3, r1
   10872:	d301      	bcc.n	10878 <__divsi3+0x190>
   10874:	008b      	lsls	r3, r1, #2
   10876:	1ac0      	subs	r0, r0, r3
   10878:	4152      	adcs	r2, r2
   1087a:	d2d9      	bcs.n	10830 <__divsi3+0x148>
   1087c:	0843      	lsrs	r3, r0, #1
   1087e:	428b      	cmp	r3, r1
   10880:	d301      	bcc.n	10886 <__divsi3+0x19e>
   10882:	004b      	lsls	r3, r1, #1
   10884:	1ac0      	subs	r0, r0, r3
   10886:	4152      	adcs	r2, r2
   10888:	1a41      	subs	r1, r0, r1
   1088a:	d200      	bcs.n	1088e <__divsi3+0x1a6>
   1088c:	4601      	mov	r1, r0
   1088e:	4663      	mov	r3, ip
   10890:	4152      	adcs	r2, r2
   10892:	105b      	asrs	r3, r3, #1
   10894:	4610      	mov	r0, r2
   10896:	d301      	bcc.n	1089c <__divsi3+0x1b4>
   10898:	4240      	negs	r0, r0
   1089a:	2b00      	cmp	r3, #0
   1089c:	d500      	bpl.n	108a0 <__divsi3+0x1b8>
   1089e:	4249      	negs	r1, r1
   108a0:	4770      	bx	lr
   108a2:	4663      	mov	r3, ip
   108a4:	105b      	asrs	r3, r3, #1
   108a6:	d300      	bcc.n	108aa <__divsi3+0x1c2>
   108a8:	4240      	negs	r0, r0
   108aa:	b501      	push	{r0, lr}
   108ac:	2000      	movs	r0, #0
   108ae:	f000 f805 	bl	108bc <__aeabi_idiv0>
   108b2:	bd02      	pop	{r1, pc}

000108b4 <__aeabi_idivmod>:
   108b4:	2900      	cmp	r1, #0
   108b6:	d0f8      	beq.n	108aa <__divsi3+0x1c2>
   108b8:	e716      	b.n	106e8 <__divsi3>
   108ba:	4770      	bx	lr

000108bc <__aeabi_idiv0>:
   108bc:	4770      	bx	lr
   108be:	46c0      	nop			; (mov r8, r8)

000108c0 <__cxa_atexit>:
   108c0:	b570      	push	{r4, r5, r6, lr}
   108c2:	4c05      	ldr	r4, [pc, #20]	; (108d8 <__cxa_atexit+0x18>)
   108c4:	0005      	movs	r5, r0
   108c6:	0013      	movs	r3, r2
   108c8:	1e20      	subs	r0, r4, #0
   108ca:	d004      	beq.n	108d6 <__cxa_atexit+0x16>
   108cc:	000a      	movs	r2, r1
   108ce:	2002      	movs	r0, #2
   108d0:	0029      	movs	r1, r5
   108d2:	e000      	b.n	108d6 <__cxa_atexit+0x16>
   108d4:	bf00      	nop
   108d6:	bd70      	pop	{r4, r5, r6, pc}
   108d8:	00000000 	.word	0x00000000

000108dc <__libc_init_array>:
   108dc:	b570      	push	{r4, r5, r6, lr}
   108de:	2600      	movs	r6, #0
   108e0:	4d0c      	ldr	r5, [pc, #48]	; (10914 <__libc_init_array+0x38>)
   108e2:	4c0d      	ldr	r4, [pc, #52]	; (10918 <__libc_init_array+0x3c>)
   108e4:	1b64      	subs	r4, r4, r5
   108e6:	10a4      	asrs	r4, r4, #2
   108e8:	42a6      	cmp	r6, r4
   108ea:	d109      	bne.n	10900 <__libc_init_array+0x24>
   108ec:	2600      	movs	r6, #0
   108ee:	f000 f981 	bl	10bf4 <_init>
   108f2:	4d0a      	ldr	r5, [pc, #40]	; (1091c <__libc_init_array+0x40>)
   108f4:	4c0a      	ldr	r4, [pc, #40]	; (10920 <__libc_init_array+0x44>)
   108f6:	1b64      	subs	r4, r4, r5
   108f8:	10a4      	asrs	r4, r4, #2
   108fa:	42a6      	cmp	r6, r4
   108fc:	d105      	bne.n	1090a <__libc_init_array+0x2e>
   108fe:	bd70      	pop	{r4, r5, r6, pc}
   10900:	00b3      	lsls	r3, r6, #2
   10902:	58eb      	ldr	r3, [r5, r3]
   10904:	4798      	blx	r3
   10906:	3601      	adds	r6, #1
   10908:	e7ee      	b.n	108e8 <__libc_init_array+0xc>
   1090a:	00b3      	lsls	r3, r6, #2
   1090c:	58eb      	ldr	r3, [r5, r3]
   1090e:	4798      	blx	r3
   10910:	3601      	adds	r6, #1
   10912:	e7f2      	b.n	108fa <__libc_init_array+0x1e>
   10914:	20000108 	.word	0x20000108
   10918:	20000108 	.word	0x20000108
   1091c:	20000108 	.word	0x20000108
   10920:	2000012c 	.word	0x2000012c

00010924 <malloc>:
   10924:	b510      	push	{r4, lr}
   10926:	4b03      	ldr	r3, [pc, #12]	; (10934 <malloc+0x10>)
   10928:	0001      	movs	r1, r0
   1092a:	6818      	ldr	r0, [r3, #0]
   1092c:	f000 f878 	bl	10a20 <_malloc_r>
   10930:	bd10      	pop	{r4, pc}
   10932:	46c0      	nop			; (mov r8, r8)
   10934:	200000a4 	.word	0x200000a4

00010938 <free>:
   10938:	b510      	push	{r4, lr}
   1093a:	4b03      	ldr	r3, [pc, #12]	; (10948 <free+0x10>)
   1093c:	0001      	movs	r1, r0
   1093e:	6818      	ldr	r0, [r3, #0]
   10940:	f000 f824 	bl	1098c <_free_r>
   10944:	bd10      	pop	{r4, pc}
   10946:	46c0      	nop			; (mov r8, r8)
   10948:	200000a4 	.word	0x200000a4

0001094c <memcmp>:
   1094c:	b530      	push	{r4, r5, lr}
   1094e:	2400      	movs	r4, #0
   10950:	42a2      	cmp	r2, r4
   10952:	d101      	bne.n	10958 <memcmp+0xc>
   10954:	2000      	movs	r0, #0
   10956:	e005      	b.n	10964 <memcmp+0x18>
   10958:	5d03      	ldrb	r3, [r0, r4]
   1095a:	1c65      	adds	r5, r4, #1
   1095c:	5d0c      	ldrb	r4, [r1, r4]
   1095e:	42a3      	cmp	r3, r4
   10960:	d001      	beq.n	10966 <memcmp+0x1a>
   10962:	1b18      	subs	r0, r3, r4
   10964:	bd30      	pop	{r4, r5, pc}
   10966:	002c      	movs	r4, r5
   10968:	e7f2      	b.n	10950 <memcmp+0x4>

0001096a <memcpy>:
   1096a:	2300      	movs	r3, #0
   1096c:	b510      	push	{r4, lr}
   1096e:	429a      	cmp	r2, r3
   10970:	d100      	bne.n	10974 <memcpy+0xa>
   10972:	bd10      	pop	{r4, pc}
   10974:	5ccc      	ldrb	r4, [r1, r3]
   10976:	54c4      	strb	r4, [r0, r3]
   10978:	3301      	adds	r3, #1
   1097a:	e7f8      	b.n	1096e <memcpy+0x4>

0001097c <memset>:
   1097c:	0003      	movs	r3, r0
   1097e:	1882      	adds	r2, r0, r2
   10980:	4293      	cmp	r3, r2
   10982:	d100      	bne.n	10986 <memset+0xa>
   10984:	4770      	bx	lr
   10986:	7019      	strb	r1, [r3, #0]
   10988:	3301      	adds	r3, #1
   1098a:	e7f9      	b.n	10980 <memset+0x4>

0001098c <_free_r>:
   1098c:	b570      	push	{r4, r5, r6, lr}
   1098e:	0005      	movs	r5, r0
   10990:	2900      	cmp	r1, #0
   10992:	d010      	beq.n	109b6 <_free_r+0x2a>
   10994:	1f0c      	subs	r4, r1, #4
   10996:	6823      	ldr	r3, [r4, #0]
   10998:	2b00      	cmp	r3, #0
   1099a:	da00      	bge.n	1099e <_free_r+0x12>
   1099c:	18e4      	adds	r4, r4, r3
   1099e:	0028      	movs	r0, r5
   109a0:	f000 f8ea 	bl	10b78 <__malloc_lock>
   109a4:	4a1d      	ldr	r2, [pc, #116]	; (10a1c <_free_r+0x90>)
   109a6:	6813      	ldr	r3, [r2, #0]
   109a8:	2b00      	cmp	r3, #0
   109aa:	d105      	bne.n	109b8 <_free_r+0x2c>
   109ac:	6063      	str	r3, [r4, #4]
   109ae:	6014      	str	r4, [r2, #0]
   109b0:	0028      	movs	r0, r5
   109b2:	f000 f8e2 	bl	10b7a <__malloc_unlock>
   109b6:	bd70      	pop	{r4, r5, r6, pc}
   109b8:	42a3      	cmp	r3, r4
   109ba:	d909      	bls.n	109d0 <_free_r+0x44>
   109bc:	6821      	ldr	r1, [r4, #0]
   109be:	1860      	adds	r0, r4, r1
   109c0:	4283      	cmp	r3, r0
   109c2:	d1f3      	bne.n	109ac <_free_r+0x20>
   109c4:	6818      	ldr	r0, [r3, #0]
   109c6:	685b      	ldr	r3, [r3, #4]
   109c8:	1841      	adds	r1, r0, r1
   109ca:	6021      	str	r1, [r4, #0]
   109cc:	e7ee      	b.n	109ac <_free_r+0x20>
   109ce:	0013      	movs	r3, r2
   109d0:	685a      	ldr	r2, [r3, #4]
   109d2:	2a00      	cmp	r2, #0
   109d4:	d001      	beq.n	109da <_free_r+0x4e>
   109d6:	42a2      	cmp	r2, r4
   109d8:	d9f9      	bls.n	109ce <_free_r+0x42>
   109da:	6819      	ldr	r1, [r3, #0]
   109dc:	1858      	adds	r0, r3, r1
   109de:	42a0      	cmp	r0, r4
   109e0:	d10b      	bne.n	109fa <_free_r+0x6e>
   109e2:	6820      	ldr	r0, [r4, #0]
   109e4:	1809      	adds	r1, r1, r0
   109e6:	1858      	adds	r0, r3, r1
   109e8:	6019      	str	r1, [r3, #0]
   109ea:	4282      	cmp	r2, r0
   109ec:	d1e0      	bne.n	109b0 <_free_r+0x24>
   109ee:	6810      	ldr	r0, [r2, #0]
   109f0:	6852      	ldr	r2, [r2, #4]
   109f2:	1841      	adds	r1, r0, r1
   109f4:	6019      	str	r1, [r3, #0]
   109f6:	605a      	str	r2, [r3, #4]
   109f8:	e7da      	b.n	109b0 <_free_r+0x24>
   109fa:	42a0      	cmp	r0, r4
   109fc:	d902      	bls.n	10a04 <_free_r+0x78>
   109fe:	230c      	movs	r3, #12
   10a00:	602b      	str	r3, [r5, #0]
   10a02:	e7d5      	b.n	109b0 <_free_r+0x24>
   10a04:	6821      	ldr	r1, [r4, #0]
   10a06:	1860      	adds	r0, r4, r1
   10a08:	4282      	cmp	r2, r0
   10a0a:	d103      	bne.n	10a14 <_free_r+0x88>
   10a0c:	6810      	ldr	r0, [r2, #0]
   10a0e:	6852      	ldr	r2, [r2, #4]
   10a10:	1841      	adds	r1, r0, r1
   10a12:	6021      	str	r1, [r4, #0]
   10a14:	6062      	str	r2, [r4, #4]
   10a16:	605c      	str	r4, [r3, #4]
   10a18:	e7ca      	b.n	109b0 <_free_r+0x24>
   10a1a:	46c0      	nop			; (mov r8, r8)
   10a1c:	20000e10 	.word	0x20000e10

00010a20 <_malloc_r>:
   10a20:	2303      	movs	r3, #3
   10a22:	b570      	push	{r4, r5, r6, lr}
   10a24:	1ccd      	adds	r5, r1, #3
   10a26:	439d      	bics	r5, r3
   10a28:	3508      	adds	r5, #8
   10a2a:	0006      	movs	r6, r0
   10a2c:	2d0c      	cmp	r5, #12
   10a2e:	d21e      	bcs.n	10a6e <_malloc_r+0x4e>
   10a30:	250c      	movs	r5, #12
   10a32:	42a9      	cmp	r1, r5
   10a34:	d81d      	bhi.n	10a72 <_malloc_r+0x52>
   10a36:	0030      	movs	r0, r6
   10a38:	f000 f89e 	bl	10b78 <__malloc_lock>
   10a3c:	4a25      	ldr	r2, [pc, #148]	; (10ad4 <_malloc_r+0xb4>)
   10a3e:	6814      	ldr	r4, [r2, #0]
   10a40:	0021      	movs	r1, r4
   10a42:	2900      	cmp	r1, #0
   10a44:	d119      	bne.n	10a7a <_malloc_r+0x5a>
   10a46:	4c24      	ldr	r4, [pc, #144]	; (10ad8 <_malloc_r+0xb8>)
   10a48:	6823      	ldr	r3, [r4, #0]
   10a4a:	2b00      	cmp	r3, #0
   10a4c:	d103      	bne.n	10a56 <_malloc_r+0x36>
   10a4e:	0030      	movs	r0, r6
   10a50:	f000 f84e 	bl	10af0 <_sbrk_r>
   10a54:	6020      	str	r0, [r4, #0]
   10a56:	0029      	movs	r1, r5
   10a58:	0030      	movs	r0, r6
   10a5a:	f000 f849 	bl	10af0 <_sbrk_r>
   10a5e:	1c43      	adds	r3, r0, #1
   10a60:	d12c      	bne.n	10abc <_malloc_r+0x9c>
   10a62:	230c      	movs	r3, #12
   10a64:	0030      	movs	r0, r6
   10a66:	6033      	str	r3, [r6, #0]
   10a68:	f000 f887 	bl	10b7a <__malloc_unlock>
   10a6c:	e003      	b.n	10a76 <_malloc_r+0x56>
   10a6e:	2d00      	cmp	r5, #0
   10a70:	dadf      	bge.n	10a32 <_malloc_r+0x12>
   10a72:	230c      	movs	r3, #12
   10a74:	6033      	str	r3, [r6, #0]
   10a76:	2000      	movs	r0, #0
   10a78:	bd70      	pop	{r4, r5, r6, pc}
   10a7a:	680b      	ldr	r3, [r1, #0]
   10a7c:	1b5b      	subs	r3, r3, r5
   10a7e:	d41a      	bmi.n	10ab6 <_malloc_r+0x96>
   10a80:	2b0b      	cmp	r3, #11
   10a82:	d903      	bls.n	10a8c <_malloc_r+0x6c>
   10a84:	600b      	str	r3, [r1, #0]
   10a86:	18cc      	adds	r4, r1, r3
   10a88:	6025      	str	r5, [r4, #0]
   10a8a:	e003      	b.n	10a94 <_malloc_r+0x74>
   10a8c:	428c      	cmp	r4, r1
   10a8e:	d10e      	bne.n	10aae <_malloc_r+0x8e>
   10a90:	6863      	ldr	r3, [r4, #4]
   10a92:	6013      	str	r3, [r2, #0]
   10a94:	0030      	movs	r0, r6
   10a96:	f000 f870 	bl	10b7a <__malloc_unlock>
   10a9a:	0020      	movs	r0, r4
   10a9c:	2207      	movs	r2, #7
   10a9e:	300b      	adds	r0, #11
   10aa0:	1d23      	adds	r3, r4, #4
   10aa2:	4390      	bics	r0, r2
   10aa4:	1ac3      	subs	r3, r0, r3
   10aa6:	d0e7      	beq.n	10a78 <_malloc_r+0x58>
   10aa8:	425a      	negs	r2, r3
   10aaa:	50e2      	str	r2, [r4, r3]
   10aac:	e7e4      	b.n	10a78 <_malloc_r+0x58>
   10aae:	684b      	ldr	r3, [r1, #4]
   10ab0:	6063      	str	r3, [r4, #4]
   10ab2:	000c      	movs	r4, r1
   10ab4:	e7ee      	b.n	10a94 <_malloc_r+0x74>
   10ab6:	000c      	movs	r4, r1
   10ab8:	6849      	ldr	r1, [r1, #4]
   10aba:	e7c2      	b.n	10a42 <_malloc_r+0x22>
   10abc:	2303      	movs	r3, #3
   10abe:	1cc4      	adds	r4, r0, #3
   10ac0:	439c      	bics	r4, r3
   10ac2:	42a0      	cmp	r0, r4
   10ac4:	d0e0      	beq.n	10a88 <_malloc_r+0x68>
   10ac6:	1a21      	subs	r1, r4, r0
   10ac8:	0030      	movs	r0, r6
   10aca:	f000 f811 	bl	10af0 <_sbrk_r>
   10ace:	1c43      	adds	r3, r0, #1
   10ad0:	d1da      	bne.n	10a88 <_malloc_r+0x68>
   10ad2:	e7c6      	b.n	10a62 <_malloc_r+0x42>
   10ad4:	20000e10 	.word	0x20000e10
   10ad8:	20000e14 	.word	0x20000e14

00010adc <realloc>:
   10adc:	b510      	push	{r4, lr}
   10ade:	4b03      	ldr	r3, [pc, #12]	; (10aec <realloc+0x10>)
   10ae0:	000a      	movs	r2, r1
   10ae2:	0001      	movs	r1, r0
   10ae4:	6818      	ldr	r0, [r3, #0]
   10ae6:	f000 f849 	bl	10b7c <_realloc_r>
   10aea:	bd10      	pop	{r4, pc}
   10aec:	200000a4 	.word	0x200000a4

00010af0 <_sbrk_r>:
   10af0:	2300      	movs	r3, #0
   10af2:	b570      	push	{r4, r5, r6, lr}
   10af4:	4c06      	ldr	r4, [pc, #24]	; (10b10 <_sbrk_r+0x20>)
   10af6:	0005      	movs	r5, r0
   10af8:	0008      	movs	r0, r1
   10afa:	6023      	str	r3, [r4, #0]
   10afc:	f000 f86c 	bl	10bd8 <_sbrk>
   10b00:	1c43      	adds	r3, r0, #1
   10b02:	d103      	bne.n	10b0c <_sbrk_r+0x1c>
   10b04:	6823      	ldr	r3, [r4, #0]
   10b06:	2b00      	cmp	r3, #0
   10b08:	d000      	beq.n	10b0c <_sbrk_r+0x1c>
   10b0a:	602b      	str	r3, [r5, #0]
   10b0c:	bd70      	pop	{r4, r5, r6, pc}
   10b0e:	46c0      	nop			; (mov r8, r8)
   10b10:	20000e1c 	.word	0x20000e1c

00010b14 <strchr>:
   10b14:	b2c9      	uxtb	r1, r1
   10b16:	7803      	ldrb	r3, [r0, #0]
   10b18:	2b00      	cmp	r3, #0
   10b1a:	d004      	beq.n	10b26 <strchr+0x12>
   10b1c:	4299      	cmp	r1, r3
   10b1e:	d100      	bne.n	10b22 <strchr+0xe>
   10b20:	4770      	bx	lr
   10b22:	3001      	adds	r0, #1
   10b24:	e7f7      	b.n	10b16 <strchr+0x2>
   10b26:	424b      	negs	r3, r1
   10b28:	4159      	adcs	r1, r3
   10b2a:	4249      	negs	r1, r1
   10b2c:	4008      	ands	r0, r1
   10b2e:	e7f7      	b.n	10b20 <strchr+0xc>

00010b30 <strcpy>:
   10b30:	1c03      	adds	r3, r0, #0
   10b32:	780a      	ldrb	r2, [r1, #0]
   10b34:	3101      	adds	r1, #1
   10b36:	701a      	strb	r2, [r3, #0]
   10b38:	3301      	adds	r3, #1
   10b3a:	2a00      	cmp	r2, #0
   10b3c:	d1f9      	bne.n	10b32 <strcpy+0x2>
   10b3e:	4770      	bx	lr

00010b40 <strlen>:
   10b40:	2300      	movs	r3, #0
   10b42:	5cc2      	ldrb	r2, [r0, r3]
   10b44:	3301      	adds	r3, #1
   10b46:	2a00      	cmp	r2, #0
   10b48:	d1fb      	bne.n	10b42 <strlen+0x2>
   10b4a:	1e58      	subs	r0, r3, #1
   10b4c:	4770      	bx	lr

00010b4e <strncpy>:
   10b4e:	b570      	push	{r4, r5, r6, lr}
   10b50:	0004      	movs	r4, r0
   10b52:	2a00      	cmp	r2, #0
   10b54:	d100      	bne.n	10b58 <strncpy+0xa>
   10b56:	bd70      	pop	{r4, r5, r6, pc}
   10b58:	780d      	ldrb	r5, [r1, #0]
   10b5a:	1e56      	subs	r6, r2, #1
   10b5c:	1c63      	adds	r3, r4, #1
   10b5e:	7025      	strb	r5, [r4, #0]
   10b60:	3101      	adds	r1, #1
   10b62:	2d00      	cmp	r5, #0
   10b64:	d105      	bne.n	10b72 <strncpy+0x24>
   10b66:	18a4      	adds	r4, r4, r2
   10b68:	429c      	cmp	r4, r3
   10b6a:	d0f4      	beq.n	10b56 <strncpy+0x8>
   10b6c:	701d      	strb	r5, [r3, #0]
   10b6e:	3301      	adds	r3, #1
   10b70:	e7fa      	b.n	10b68 <strncpy+0x1a>
   10b72:	001c      	movs	r4, r3
   10b74:	0032      	movs	r2, r6
   10b76:	e7ec      	b.n	10b52 <strncpy+0x4>

00010b78 <__malloc_lock>:
   10b78:	4770      	bx	lr

00010b7a <__malloc_unlock>:
   10b7a:	4770      	bx	lr

00010b7c <_realloc_r>:
   10b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b7e:	0007      	movs	r7, r0
   10b80:	000d      	movs	r5, r1
   10b82:	0016      	movs	r6, r2
   10b84:	2900      	cmp	r1, #0
   10b86:	d105      	bne.n	10b94 <_realloc_r+0x18>
   10b88:	0011      	movs	r1, r2
   10b8a:	f7ff ff49 	bl	10a20 <_malloc_r>
   10b8e:	0004      	movs	r4, r0
   10b90:	0020      	movs	r0, r4
   10b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b94:	2a00      	cmp	r2, #0
   10b96:	d103      	bne.n	10ba0 <_realloc_r+0x24>
   10b98:	f7ff fef8 	bl	1098c <_free_r>
   10b9c:	0034      	movs	r4, r6
   10b9e:	e7f7      	b.n	10b90 <_realloc_r+0x14>
   10ba0:	f000 f812 	bl	10bc8 <_malloc_usable_size_r>
   10ba4:	002c      	movs	r4, r5
   10ba6:	4286      	cmp	r6, r0
   10ba8:	d9f2      	bls.n	10b90 <_realloc_r+0x14>
   10baa:	0031      	movs	r1, r6
   10bac:	0038      	movs	r0, r7
   10bae:	f7ff ff37 	bl	10a20 <_malloc_r>
   10bb2:	1e04      	subs	r4, r0, #0
   10bb4:	d0ec      	beq.n	10b90 <_realloc_r+0x14>
   10bb6:	0029      	movs	r1, r5
   10bb8:	0032      	movs	r2, r6
   10bba:	f7ff fed6 	bl	1096a <memcpy>
   10bbe:	0029      	movs	r1, r5
   10bc0:	0038      	movs	r0, r7
   10bc2:	f7ff fee3 	bl	1098c <_free_r>
   10bc6:	e7e3      	b.n	10b90 <_realloc_r+0x14>

00010bc8 <_malloc_usable_size_r>:
   10bc8:	1f0b      	subs	r3, r1, #4
   10bca:	681b      	ldr	r3, [r3, #0]
   10bcc:	1f18      	subs	r0, r3, #4
   10bce:	2b00      	cmp	r3, #0
   10bd0:	da01      	bge.n	10bd6 <_malloc_usable_size_r+0xe>
   10bd2:	580b      	ldr	r3, [r1, r0]
   10bd4:	18c0      	adds	r0, r0, r3
   10bd6:	4770      	bx	lr

00010bd8 <_sbrk>:
   10bd8:	4a04      	ldr	r2, [pc, #16]	; (10bec <_sbrk+0x14>)
   10bda:	6813      	ldr	r3, [r2, #0]
   10bdc:	2b00      	cmp	r3, #0
   10bde:	d003      	beq.n	10be8 <_sbrk+0x10>
   10be0:	1818      	adds	r0, r3, r0
   10be2:	6010      	str	r0, [r2, #0]
   10be4:	0018      	movs	r0, r3
   10be6:	4770      	bx	lr
   10be8:	4b01      	ldr	r3, [pc, #4]	; (10bf0 <_sbrk+0x18>)
   10bea:	e7f9      	b.n	10be0 <_sbrk+0x8>
   10bec:	20000e18 	.word	0x20000e18
   10bf0:	20000e20 	.word	0x20000e20

00010bf4 <_init>:
   10bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bf6:	46c0      	nop			; (mov r8, r8)
   10bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10bfa:	bc08      	pop	{r3}
   10bfc:	469e      	mov	lr, r3
   10bfe:	4770      	bx	lr

00010c00 <_fini>:
   10c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c02:	46c0      	nop			; (mov r8, r8)
   10c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10c06:	bc08      	pop	{r3}
   10c08:	469e      	mov	lr, r3
   10c0a:	4770      	bx	lr
   10c0c:	0000ffff 	.word	0x0000ffff
   10c10:	ffffffff 	.word	0xffffffff
   10c14:	ffffffff 	.word	0xffffffff
   10c18:	000000ff 	.word	0x000000ff

00010c1c <_ZTV4Uart>:
	...
   10c24:	000031ad 0000fdfd 00002f5d 00002f2d     .1......]/..-/..
   10c34:	00002d6d 00002d91 00002d79 00002de5     m-...-..y-...-..
   10c44:	00002f51 00002f81 00002de9 00002f11     Q/.../...-.../..
   10c54:	00002d69 000044da 0000450e 000045d6     i-...D...E...E..
   10c64:	0000451c 000045d6 0000452e 00004572     .E...E...E..rE..
   10c74:	0000457a 0000457e 000045a2 000045d2     zE..~E...E...E..
   10c84:	000044c4                                .D..

00010c88 <_ZTV26DoubleBufferedEPOutHandler>:
	...
   10c90:	00003429 00003279 000033d9              )4..y2...3..

00010c9c <_ZL14STRING_PRODUCT>:
   10c9c:	75647241 206f6e69 5020304d 00006f72     Arduino M0 Pro..

00010cac <_ZL15STRING_LANGUAGE>:
   10cac:	04090304                                ....

00010cb0 <_ZL19STRING_MANUFACTURER>:
   10cb0:	75647241 206f6e69 00434c4c              Arduino LLC.

00010cbc <_ZL21USB_DeviceDescriptorB>:
   10cbc:	02000112 400102ef 804f2a03 02010100     .......@.*O.....
   10ccc:	00000103 00004b16 00004afe 00004ae6     .....K...J...J..
   10cdc:	00004ad2 00004aba 00004afe 00004c50     .J...J...J..PL..
   10cec:	00004c58 00004c58 00004c58 00004c58     XL..XL..XL..XL..
   10cfc:	00004c58 00004c58 00004c58 00004c58     XL..XL..XL..XL..
   10d0c:	00004c90 00004c90 00004c90 00004c90     .L...L...L...L..

00010d1c <_ZTV16Adafruit_ILI9341>:
	...
   10d24:	0000fb71 0000fdfd 00004fad 00004fb1     q........O...O..
   10d34:	0000b7d5 00005015 0000b099 0000b381     .....P..........
   10d44:	0000bf71 0000bb65 0000f169 00004fb5     q...e...i....O..
   10d54:	0000541d 0000504d 0000529d 000051c9     .T..MP...R...Q..
   10d64:	0000536d 0000ef99 0000f3a5 0000f4e9     mS..............

00010d74 <_ZTVN5SDLib4FileE>:
	...
   10d7c:	0000c6f1 0000c65d 00004fad 0000c6e1     ....]....O......
   10d8c:	0000c63d 0000c681 0000c6a9 0000002f     =.........../...
   10d9c:	0000cd6a 0000cd4c 0000cd44 0000cd3c     j...L...D...<...
   10dac:	0000cd1e 0000cd72 5e3e3c7c 2f3f3d2b     ....r...|<>^+=?/
   10dbc:	2c3b5d5b 005c222a                       [];,*"\.

00010dc4 <_ZTV6SdFile>:
	...
   10dcc:	0000dc75 0000fdfd 00004fad 00004fb1     u........O...O..

00010ddc <_ZTV7TwoWire>:
	...
   10de4:	0000ea15 0000ea5d 00004fad 0000ea11     ....]....O......
   10df4:	0000e9ad 0000e9c5 0000e9f1              ............

00010e00 <g_APinDescription>:
   10e00:	00000000 0000000b 00000002 00000004     ................
   10e10:	ffff00ff 000bffff 00000000 0000000a     ................
   10e20:	00000002 00000004 ffff00ff 000affff     ................
   10e30:	00000000 00000008 00000004 0000001c     ................
   10e40:	000000ff 00ff0000 00000000 00000009     ................
   10e50:	00000004 0000001c 000100ff 00090001     ................
   10e60:	00000000 0000000e 00000004 0000001c     ................
   10e70:	030000ff 000e0300 00000000 0000000f     ................
   10e80:	00000004 0000001c 030100ff 000f0301     ................
   10e90:	00000000 00000014 00000005 0000001c     ................
   10ea0:	000200ff 00040002 00000000 00000015     ................
   10eb0:	00000005 0000001c 000300ff 00050003     ................
   10ec0:	00000000 00000006 00000004 0000001c     ................
   10ed0:	010000ff 00060100 00000000 00000007     ................
   10ee0:	00000004 0000001c 010100ff 00070101     ................
   10ef0:	00000000 00000012 00000004 0000001c     ................
   10f00:	030000ff 00020300 00000000 00000010     ................
   10f10:	00000004 0000001c 020000ff 00000200     ................
   10f20:	00000000 00000013 00000004 0000001c     ................
   10f30:	030100ff 00030301 00000000 00000011     ................
   10f40:	00000004 0000000c 020100ff 0001ffff     ................
   10f50:	000000ff 00000000 000000ff 00000000     ................
   10f60:	ffff00ff 00ffffff 00000000 00000003     ................
   10f70:	00000001 00000002 ffff00ff 00ffffff     ................
   10f80:	00000000 00000016 00000002 00000004     ................
   10f90:	ffff00ff 0006ffff 00000000 00000017     ................
   10fa0:	00000002 00000004 ffff00ff 0007ffff     ................
   10fb0:	00000000 0000000c 00000003 00000004     ................
   10fc0:	ffff00ff 000cffff 000000ff 00000000     ................
   10fd0:	000000ff 00000000 ffff00ff 00ffffff     ................
   10fe0:	00000001 0000000b 00000003 00000004     ................
   10ff0:	ffff00ff 000bffff 00000001 0000000a     ................
   11000:	00000003 00000004 ffff00ff 000affff     ................
   11010:	000000ff 00000000 000000ff 00000000     ................
   11020:	ffff00ff 00ffffff 000000ff 00000000     ................
   11030:	000000ff 00000000 ffff00ff 00ffffff     ................
   11040:	00000000 00000002 00000001 00000002     ................
   11050:	ffff0000 0002ffff 00000001 00000008     ................
   11060:	00000001 00000002 ffff0002 0008ffff     ................
   11070:	00000001 00000009 00000001 00000002     ................
   11080:	ffff0003 0009ffff 00000000 00000004     ................
   11090:	00000001 00000002 ffff0004 0004ffff     ................
   110a0:	00000000 00000005 00000001 00000002     ................
   110b0:	ffff0005 0005ffff 00000001 00000002     ................
   110c0:	00000001 00000002 ffff000a 0002ffff     ................
   110d0:	00000001 00000003 0000000b 00000004     ................
   110e0:	ffff00ff 00ffffff 00000000 0000001b     ................
   110f0:	0000000b 00000004 ffff00ff 00ffffff     ................
   11100:	00000000 0000001c 00000006 00000000     ................
   11110:	ffff00ff 00ffffff 00000000 00000018     ................
   11120:	00000006 00000000 ffff00ff 00ffffff     ................
   11130:	00000000 00000019 00000006 00000000     ................
   11140:	ffff00ff 00ffffff 00000001 00000016     ................
   11150:	00000003 00000000 ffff00ff 00ffffff     ................
   11160:	00000001 00000017 00000003 00000000     ................
   11170:	ffff00ff 00ffffff 00000000 00000016     ................
   11180:	00000002 00000000 ffff00ff 00ffffff     ................
   11190:	00000000 00000017 00000002 00000000     ................
   111a0:	ffff00ff 00ffffff 00000000 00000013     ................
   111b0:	00000002 00000000 ffff00ff 00ffffff     ................
   111c0:	00000000 00000010 00000002 00000000     ................
   111d0:	ffff00ff 00ffffff 00000000 00000012     ................
   111e0:	00000002 00000000 ffff00ff 00ffffff     ................
   111f0:	00000000 00000011 00000002 00000000     ................
   11200:	ffff00ff 00ffffff 00000000 0000000d     ................
   11210:	00000004 0000000c 000100ff 000dffff     ................
   11220:	00000000 00000015 00000005 0000000c     ................
   11230:	000300ff 00ffffff 00000000 00000006     ................
   11240:	00000004 0000000c 010000ff 00ffffff     ................
   11250:	00000000 00000007 00000004 0000000c     ................
   11260:	010100ff 00ffffff 00000000 00000002     ................
   11270:	00000001 00000002 ffff0014 0002ffff     ................

00011280 <_ZL4font>:
   11280:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   11290:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   112a0:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   112b0:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   112c0:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   112d0:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   112e0:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   112f0:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   11300:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   11310:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   11320:	00000000 5f000000 07000000 14000700     ......._........
   11330:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   11340:	00502056 00030708 41221c00 22410000     V P......."A..A"
   11350:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   11360:	08080800 00000808 20006060 02040810     ........``. ....
   11370:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   11380:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   11390:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   113a0:	00001e29 00000014 00003440 22140800     ).......@4....."
   113b0:	14141441 41001414 02081422 06095901     A......A"....Y..
   113c0:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   113d0:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   113e0:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   113f0:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   11400:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   11410:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   11420:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   11430:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   11440:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   11450:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   11460:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   11470:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   11480:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   11490:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   114a0:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   114b0:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   114c0:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   114d0:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   114e0:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   114f0:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   11500:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   11510:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   11520:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   11530:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   11540:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   11550:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   11560:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   11570:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   11580:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   11590:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   115a0:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   115b0:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   115c0:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   115d0:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   115e0:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   115f0:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   11600:	00ff0000 ff101010 14141400 101000ff     ................
   11610:	10ff00ff f010f010 fc141414 f7141400     ................
   11620:	0000ff00 14ff00ff fc04f414 10171414     ................
   11630:	1f10101f 14141f10 10001f14 00f01010     ................
   11640:	1f000000 10101010 1010101f 0010f010     ................
   11650:	10ff0000 10101010 10101010 000010ff     ................
   11660:	0014ff00 ff00ff00 101f0000 fc000017     ................
   11670:	1414f404 14171017 f404f414 00ff0000     ................
   11680:	141414f7 14141414 14f700f7 14171414     ................
   11690:	101f1010 1414141f 101014f4 00f010f0     ................
   116a0:	1f101f00 1f000000 00000014 000014fc     ................
   116b0:	10f010f0 ff10ff10 ff141414 10101014     ................
   116c0:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   116d0:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   116e0:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   116f0:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   11700:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   11710:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   11720:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   11730:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   11740:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   11750:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   11760:	00000018 30001010 0101ff40 01011f00     .......0@.......
   11770:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

00011780 <_ZTV12Adafruit_GFX>:
	...
   11788:	0000fb71 0000fdfd 00004fad 00004fb1     q........O...O..
   11798:	0000fca9 0000ef95 0000ef6d 0000ef79     ........m...y...
   117a8:	0000f2b5 0000f32d 0000f169 0000ef95     ....-...i.......
   117b8:	0000efbd 0000efb9 0000efdd 0000f039     ............9...
   117c8:	0000f095 0000ef99 0000f3a5 0000f4e9     ................

000117d8 <_ZTV7Serial_>:
	...
   117e0:	000103ad 0001036d 00010351 00010361     ....m...Q...a...
   117f0:	00010355 00010389 000103e9              U...........

000117fc <__sf_fake_stderr>:
	...

0001181c <__sf_fake_stdin>:
	...

0001183c <__sf_fake_stdout>:
	...

0001185c <__EH_FRAME_BEGIN__>:
   1185c:	00000000                                ....
