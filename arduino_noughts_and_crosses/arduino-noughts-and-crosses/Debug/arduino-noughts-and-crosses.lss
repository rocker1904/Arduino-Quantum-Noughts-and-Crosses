
arduino-noughts-and-crosses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014498  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000074  00014498  00014498  00024498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002a0  20000000  0001450c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000ce8  200002a0  000147ac  000302a0  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
  6 .debug_info   000a092d  00000000  00000000  00030321  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000aa70  00000000  00000000  000d0c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000acaf  00000000  00000000  000db6be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001bf8  00000000  00000000  000e636d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001c70  00000000  00000000  000e7f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021386  00000000  00000000  000e9bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a04e  00000000  00000000  0010af5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000878db  00000000  00000000  00124fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000784c  00000000  00000000  001ac884  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stab         000000cc  00000000  00000000  001b40d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      000001b9  00000000  00000000  001b419c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 80 00 20 99 2d 00 00 91 2d 00 00 91 2d 00 00     ... .-...-...-..
	...
      2c:	91 2d 00 00 00 00 00 00 00 00 00 00 91 2d 00 00     .-...........-..
      3c:	1d 2e 00 00 91 2d 00 00 91 2d 00 00 91 2d 00 00     .....-...-...-..
      4c:	91 2d 00 00 91 2d 00 00 91 2d 00 00 91 2d 00 00     .-...-...-...-..
      5c:	35 2e 00 00 91 2d 00 00 c1 c1 00 00 91 2d 00 00     5....-.......-..
      6c:	91 2d 00 00 89 bf 00 00 91 2d 00 00 d9 c1 00 00     .-.......-......
      7c:	91 2d 00 00 91 2d 00 00 91 2d 00 00 91 2d 00 00     .-...-...-...-..
      8c:	91 2d 00 00 00 00 00 00 91 2d 00 00 91 2d 00 00     .-.......-...-..
      9c:	91 2d 00 00 91 2d 00 00 91 2d 00 00 91 2d 00 00     .-...-...-...-..
      ac:	91 2d 00 00 00 00 00 00                             .-......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002a0 	.word	0x200002a0
      d4:	00000000 	.word	0x00000000
      d8:	00014494 	.word	0x00014494

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002a4 	.word	0x200002a4
     108:	00014494 	.word	0x00014494
     10c:	2000029c 	.word	0x2000029c
     110:	00000000 	.word	0x00000000

00000114 <_Z6read16RN5SDLib4FileE>:

// These read 16-bit and 32-bit types from the SD card file.
// BMP data is stored little-endian, Arduino is little-endian too.
// May need to reverse subscript order if porting elsewhere.

uint16_t read16(File &f) {
     114:	b590      	push	{r4, r7, lr}
     116:	b085      	sub	sp, #20
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	uint16_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     11c:	230e      	movs	r3, #14
     11e:	18fc      	adds	r4, r7, r3
     120:	687b      	ldr	r3, [r7, #4]
     122:	681b      	ldr	r3, [r3, #0]
     124:	3314      	adds	r3, #20
     126:	681b      	ldr	r3, [r3, #0]
     128:	687a      	ldr	r2, [r7, #4]
     12a:	0010      	movs	r0, r2
     12c:	4798      	blx	r3
     12e:	0003      	movs	r3, r0
     130:	b2db      	uxtb	r3, r3
     132:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read(); // MSB
     134:	230e      	movs	r3, #14
     136:	18fc      	adds	r4, r7, r3
     138:	3401      	adds	r4, #1
     13a:	687b      	ldr	r3, [r7, #4]
     13c:	681b      	ldr	r3, [r3, #0]
     13e:	3314      	adds	r3, #20
     140:	681b      	ldr	r3, [r3, #0]
     142:	687a      	ldr	r2, [r7, #4]
     144:	0010      	movs	r0, r2
     146:	4798      	blx	r3
     148:	0003      	movs	r3, r0
     14a:	b2db      	uxtb	r3, r3
     14c:	7023      	strb	r3, [r4, #0]
	return result;
     14e:	230e      	movs	r3, #14
     150:	18fb      	adds	r3, r7, r3
     152:	881b      	ldrh	r3, [r3, #0]
}
     154:	0018      	movs	r0, r3
     156:	46bd      	mov	sp, r7
     158:	b005      	add	sp, #20
     15a:	bd90      	pop	{r4, r7, pc}

0000015c <_Z6read32RN5SDLib4FileE>:

uint32_t read32(File &f) {
     15c:	b590      	push	{r4, r7, lr}
     15e:	b085      	sub	sp, #20
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
	uint32_t result;
	((uint8_t *) &result)[0] = f.read(); // LSB
     164:	230c      	movs	r3, #12
     166:	18fc      	adds	r4, r7, r3
     168:	687b      	ldr	r3, [r7, #4]
     16a:	681b      	ldr	r3, [r3, #0]
     16c:	3314      	adds	r3, #20
     16e:	681b      	ldr	r3, [r3, #0]
     170:	687a      	ldr	r2, [r7, #4]
     172:	0010      	movs	r0, r2
     174:	4798      	blx	r3
     176:	0003      	movs	r3, r0
     178:	b2db      	uxtb	r3, r3
     17a:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[1] = f.read();
     17c:	230c      	movs	r3, #12
     17e:	18fc      	adds	r4, r7, r3
     180:	3401      	adds	r4, #1
     182:	687b      	ldr	r3, [r7, #4]
     184:	681b      	ldr	r3, [r3, #0]
     186:	3314      	adds	r3, #20
     188:	681b      	ldr	r3, [r3, #0]
     18a:	687a      	ldr	r2, [r7, #4]
     18c:	0010      	movs	r0, r2
     18e:	4798      	blx	r3
     190:	0003      	movs	r3, r0
     192:	b2db      	uxtb	r3, r3
     194:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[2] = f.read();
     196:	230c      	movs	r3, #12
     198:	18fc      	adds	r4, r7, r3
     19a:	3402      	adds	r4, #2
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	3314      	adds	r3, #20
     1a2:	681b      	ldr	r3, [r3, #0]
     1a4:	687a      	ldr	r2, [r7, #4]
     1a6:	0010      	movs	r0, r2
     1a8:	4798      	blx	r3
     1aa:	0003      	movs	r3, r0
     1ac:	b2db      	uxtb	r3, r3
     1ae:	7023      	strb	r3, [r4, #0]
	((uint8_t *) &result)[3] = f.read(); // MSB
     1b0:	230c      	movs	r3, #12
     1b2:	18fc      	adds	r4, r7, r3
     1b4:	3403      	adds	r4, #3
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	3314      	adds	r3, #20
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	687a      	ldr	r2, [r7, #4]
     1c0:	0010      	movs	r0, r2
     1c2:	4798      	blx	r3
     1c4:	0003      	movs	r3, r0
     1c6:	b2db      	uxtb	r3, r3
     1c8:	7023      	strb	r3, [r4, #0]
	return result;
     1ca:	68fb      	ldr	r3, [r7, #12]
}
     1cc:	0018      	movs	r0, r3
     1ce:	46bd      	mov	sp, r7
     1d0:	b005      	add	sp, #20
     1d2:	bd90      	pop	{r4, r7, pc}

000001d4 <_ZN5PrintaSEOS_>:
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     1d4:	b580      	push	{r7, lr}
     1d6:	b082      	sub	sp, #8
     1d8:	af00      	add	r7, sp, #0
     1da:	6078      	str	r0, [r7, #4]
     1dc:	6039      	str	r1, [r7, #0]
     1de:	683b      	ldr	r3, [r7, #0]
     1e0:	685a      	ldr	r2, [r3, #4]
     1e2:	687b      	ldr	r3, [r7, #4]
     1e4:	605a      	str	r2, [r3, #4]
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	0018      	movs	r0, r3
     1ea:	46bd      	mov	sp, r7
     1ec:	b002      	add	sp, #8
     1ee:	bd80      	pop	{r7, pc}

000001f0 <_ZN6StreamaSEOS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     1f0:	b580      	push	{r7, lr}
     1f2:	b082      	sub	sp, #8
     1f4:	af00      	add	r7, sp, #0
     1f6:	6078      	str	r0, [r7, #4]
     1f8:	6039      	str	r1, [r7, #0]
     1fa:	687b      	ldr	r3, [r7, #4]
     1fc:	683a      	ldr	r2, [r7, #0]
     1fe:	0011      	movs	r1, r2
     200:	0018      	movs	r0, r3
     202:	f7ff ffe7 	bl	1d4 <_ZN5PrintaSEOS_>
     206:	683b      	ldr	r3, [r7, #0]
     208:	689a      	ldr	r2, [r3, #8]
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	609a      	str	r2, [r3, #8]
     20e:	683b      	ldr	r3, [r7, #0]
     210:	68da      	ldr	r2, [r3, #12]
     212:	687b      	ldr	r3, [r7, #4]
     214:	60da      	str	r2, [r3, #12]
     216:	687b      	ldr	r3, [r7, #4]
     218:	0018      	movs	r0, r3
     21a:	46bd      	mov	sp, r7
     21c:	b002      	add	sp, #8
     21e:	bd80      	pop	{r7, pc}

00000220 <_ZN5SDLib4FileaSEOS0_>:
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
     220:	b580      	push	{r7, lr}
     222:	b082      	sub	sp, #8
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
     228:	6039      	str	r1, [r7, #0]
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	683a      	ldr	r2, [r7, #0]
     22e:	0011      	movs	r1, r2
     230:	0018      	movs	r0, r3
     232:	f7ff ffdd 	bl	1f0 <_ZN6StreamaSEOS_>
     236:	687b      	ldr	r3, [r7, #4]
     238:	3310      	adds	r3, #16
     23a:	0019      	movs	r1, r3
     23c:	220c      	movs	r2, #12
     23e:	683b      	ldr	r3, [r7, #0]
     240:	3310      	adds	r3, #16
     242:	2a00      	cmp	r2, #0
     244:	db05      	blt.n	252 <_ZN5SDLib4FileaSEOS0_+0x32>
     246:	7818      	ldrb	r0, [r3, #0]
     248:	7008      	strb	r0, [r1, #0]
     24a:	3101      	adds	r1, #1
     24c:	3301      	adds	r3, #1
     24e:	3a01      	subs	r2, #1
     250:	e7f7      	b.n	242 <_ZN5SDLib4FileaSEOS0_+0x22>
     252:	683b      	ldr	r3, [r7, #0]
     254:	6a1a      	ldr	r2, [r3, #32]
     256:	687b      	ldr	r3, [r7, #4]
     258:	621a      	str	r2, [r3, #32]
     25a:	687b      	ldr	r3, [r7, #4]
     25c:	0018      	movs	r0, r3
     25e:	46bd      	mov	sp, r7
     260:	b002      	add	sp, #8
     262:	bd80      	pop	{r7, pc}

00000264 <_Z10drawBitmapcss>:

void drawBitmap(char fileInput, int16_t x, int16_t y) {
     264:	b590      	push	{r4, r7, lr}
     266:	b0eb      	sub	sp, #428	; 0x1ac
     268:	af02      	add	r7, sp, #8
     26a:	0004      	movs	r4, r0
     26c:	0008      	movs	r0, r1
     26e:	0011      	movs	r1, r2
     270:	4bbb      	ldr	r3, [pc, #748]	; (560 <_Z10drawBitmapcss+0x2fc>)
     272:	22d0      	movs	r2, #208	; 0xd0
     274:	0052      	lsls	r2, r2, #1
     276:	4694      	mov	ip, r2
     278:	44bc      	add	ip, r7
     27a:	4463      	add	r3, ip
     27c:	1c22      	adds	r2, r4, #0
     27e:	701a      	strb	r2, [r3, #0]
     280:	4bb8      	ldr	r3, [pc, #736]	; (564 <_Z10drawBitmapcss+0x300>)
     282:	22d0      	movs	r2, #208	; 0xd0
     284:	0052      	lsls	r2, r2, #1
     286:	4694      	mov	ip, r2
     288:	44bc      	add	ip, r7
     28a:	4463      	add	r3, ip
     28c:	1c02      	adds	r2, r0, #0
     28e:	801a      	strh	r2, [r3, #0]
     290:	4bb5      	ldr	r3, [pc, #724]	; (568 <_Z10drawBitmapcss+0x304>)
     292:	22d0      	movs	r2, #208	; 0xd0
     294:	0052      	lsls	r2, r2, #1
     296:	4694      	mov	ip, r2
     298:	44bc      	add	ip, r7
     29a:	4463      	add	r3, ip
     29c:	1c0a      	adds	r2, r1, #0
     29e:	801a      	strh	r2, [r3, #0]

	File bmpFile;
     2a0:	238a      	movs	r3, #138	; 0x8a
     2a2:	005b      	lsls	r3, r3, #1
     2a4:	18fb      	adds	r3, r7, r3
     2a6:	0018      	movs	r0, r3
     2a8:	f008 fb3a 	bl	8920 <_ZN5SDLib4FileC1Ev>
	int bmpWidth, bmpHeight;   // W+H in pixels
	uint8_t bmpDepth;              // Bit depth (currently must be 24)
	uint32_t bmpImageoffset;        // Start of image data in file
	uint32_t rowSize;               // Not always = bmpWidth; may have padding
	uint8_t sdbuffer[3 * BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     2ac:	239c      	movs	r3, #156	; 0x9c
     2ae:	33ff      	adds	r3, #255	; 0xff
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	22ff      	movs	r2, #255	; 0xff
     2b4:	701a      	strb	r2, [r3, #0]
	boolean goodBmp = false;       // Set to true on valid header parse
     2b6:	23cd      	movs	r3, #205	; 0xcd
     2b8:	005b      	lsls	r3, r3, #1
     2ba:	18fb      	adds	r3, r7, r3
     2bc:	2200      	movs	r2, #0
     2be:	701a      	strb	r2, [r3, #0]
	boolean flip = true;        // BMP is stored bottom-to-top
     2c0:	239a      	movs	r3, #154	; 0x9a
     2c2:	33ff      	adds	r3, #255	; 0xff
     2c4:	18fb      	adds	r3, r7, r3
     2c6:	2201      	movs	r2, #1
     2c8:	701a      	strb	r2, [r3, #0]
	int w, h, row, col, x2, y2, bx1, by1;
	uint8_t r, g, b;
	uint32_t pos = 0, startTime = millis();
     2ca:	2300      	movs	r3, #0
     2cc:	22be      	movs	r2, #190	; 0xbe
     2ce:	0052      	lsls	r2, r2, #1
     2d0:	18ba      	adds	r2, r7, r2
     2d2:	6013      	str	r3, [r2, #0]
     2d4:	f002 fdca 	bl	2e6c <millis>
     2d8:	0003      	movs	r3, r0
     2da:	22bc      	movs	r2, #188	; 0xbc
     2dc:	0052      	lsls	r2, r2, #1
     2de:	18ba      	adds	r2, r7, r2
     2e0:	6013      	str	r3, [r2, #0]
	char filename[6] = {fileInput, '.', 'b', 'm', 'p'};
     2e2:	4ba2      	ldr	r3, [pc, #648]	; (56c <_Z10drawBitmapcss+0x308>)
     2e4:	22d0      	movs	r2, #208	; 0xd0
     2e6:	0052      	lsls	r2, r2, #1
     2e8:	4694      	mov	ip, r2
     2ea:	44bc      	add	ip, r7
     2ec:	4463      	add	r3, ip
     2ee:	0018      	movs	r0, r3
     2f0:	2306      	movs	r3, #6
     2f2:	001a      	movs	r2, r3
     2f4:	2100      	movs	r1, #0
     2f6:	f010 facf 	bl	10898 <memset>
     2fa:	4b9c      	ldr	r3, [pc, #624]	; (56c <_Z10drawBitmapcss+0x308>)
     2fc:	22d0      	movs	r2, #208	; 0xd0
     2fe:	0052      	lsls	r2, r2, #1
     300:	4694      	mov	ip, r2
     302:	44bc      	add	ip, r7
     304:	4463      	add	r3, ip
     306:	222e      	movs	r2, #46	; 0x2e
     308:	705a      	strb	r2, [r3, #1]
     30a:	4b98      	ldr	r3, [pc, #608]	; (56c <_Z10drawBitmapcss+0x308>)
     30c:	22d0      	movs	r2, #208	; 0xd0
     30e:	0052      	lsls	r2, r2, #1
     310:	4694      	mov	ip, r2
     312:	44bc      	add	ip, r7
     314:	4463      	add	r3, ip
     316:	2262      	movs	r2, #98	; 0x62
     318:	709a      	strb	r2, [r3, #2]
     31a:	4b94      	ldr	r3, [pc, #592]	; (56c <_Z10drawBitmapcss+0x308>)
     31c:	22d0      	movs	r2, #208	; 0xd0
     31e:	0052      	lsls	r2, r2, #1
     320:	4694      	mov	ip, r2
     322:	44bc      	add	ip, r7
     324:	4463      	add	r3, ip
     326:	226d      	movs	r2, #109	; 0x6d
     328:	70da      	strb	r2, [r3, #3]
     32a:	4b90      	ldr	r3, [pc, #576]	; (56c <_Z10drawBitmapcss+0x308>)
     32c:	22d0      	movs	r2, #208	; 0xd0
     32e:	0052      	lsls	r2, r2, #1
     330:	4694      	mov	ip, r2
     332:	44bc      	add	ip, r7
     334:	4463      	add	r3, ip
     336:	2270      	movs	r2, #112	; 0x70
     338:	711a      	strb	r2, [r3, #4]
     33a:	4b8c      	ldr	r3, [pc, #560]	; (56c <_Z10drawBitmapcss+0x308>)
     33c:	22d0      	movs	r2, #208	; 0xd0
     33e:	0052      	lsls	r2, r2, #1
     340:	4694      	mov	ip, r2
     342:	44bc      	add	ip, r7
     344:	4463      	add	r3, ip
     346:	4a86      	ldr	r2, [pc, #536]	; (560 <_Z10drawBitmapcss+0x2fc>)
     348:	21d0      	movs	r1, #208	; 0xd0
     34a:	0049      	lsls	r1, r1, #1
     34c:	468c      	mov	ip, r1
     34e:	44bc      	add	ip, r7
     350:	4462      	add	r2, ip
     352:	7812      	ldrb	r2, [r2, #0]
     354:	701a      	strb	r2, [r3, #0]

	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     356:	4b86      	ldr	r3, [pc, #536]	; (570 <_Z10drawBitmapcss+0x30c>)
     358:	0018      	movs	r0, r3
     35a:	f00d f8d3 	bl	d504 <_ZNK12Adafruit_GFX5widthEv>
     35e:	0003      	movs	r3, r0
     360:	001a      	movs	r2, r3
     362:	4b80      	ldr	r3, [pc, #512]	; (564 <_Z10drawBitmapcss+0x300>)
     364:	21d0      	movs	r1, #208	; 0xd0
     366:	0049      	lsls	r1, r1, #1
     368:	468c      	mov	ip, r1
     36a:	44bc      	add	ip, r7
     36c:	4463      	add	r3, ip
     36e:	2100      	movs	r1, #0
     370:	5e5b      	ldrsh	r3, [r3, r1]
     372:	4293      	cmp	r3, r2
     374:	da0f      	bge.n	396 <_Z10drawBitmapcss+0x132>
     376:	4b7e      	ldr	r3, [pc, #504]	; (570 <_Z10drawBitmapcss+0x30c>)
     378:	0018      	movs	r0, r3
     37a:	f00d f8ce 	bl	d51a <_ZNK12Adafruit_GFX6heightEv>
     37e:	0003      	movs	r3, r0
     380:	001a      	movs	r2, r3
     382:	4b79      	ldr	r3, [pc, #484]	; (568 <_Z10drawBitmapcss+0x304>)
     384:	21d0      	movs	r1, #208	; 0xd0
     386:	0049      	lsls	r1, r1, #1
     388:	468c      	mov	ip, r1
     38a:	44bc      	add	ip, r7
     38c:	4463      	add	r3, ip
     38e:	2100      	movs	r1, #0
     390:	5e5b      	ldrsh	r3, [r3, r1]
     392:	4293      	cmp	r3, r2
     394:	db01      	blt.n	39a <_Z10drawBitmapcss+0x136>
     396:	2301      	movs	r3, #1
     398:	e000      	b.n	39c <_Z10drawBitmapcss+0x138>
     39a:	2300      	movs	r3, #0
     39c:	2b00      	cmp	r3, #0
     39e:	d000      	beq.n	3a2 <_Z10drawBitmapcss+0x13e>
     3a0:	e3ae      	b.n	b00 <_Z10drawBitmapcss+0x89c>

	Serial.println();
     3a2:	4b74      	ldr	r3, [pc, #464]	; (574 <_Z10drawBitmapcss+0x310>)
     3a4:	0018      	movs	r0, r3
     3a6:	f002 fef1 	bl	318c <_ZN5Print7printlnEv>
	Serial.print(F("Loading image '"));
     3aa:	4a73      	ldr	r2, [pc, #460]	; (578 <_Z10drawBitmapcss+0x314>)
     3ac:	4b71      	ldr	r3, [pc, #452]	; (574 <_Z10drawBitmapcss+0x310>)
     3ae:	0011      	movs	r1, r2
     3b0:	0018      	movs	r0, r3
     3b2:	f002 fe16 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(filename);
     3b6:	230c      	movs	r3, #12
     3b8:	18fa      	adds	r2, r7, r3
     3ba:	4b6e      	ldr	r3, [pc, #440]	; (574 <_Z10drawBitmapcss+0x310>)
     3bc:	0011      	movs	r1, r2
     3be:	0018      	movs	r0, r3
     3c0:	f002 fe1f 	bl	3002 <_ZN5Print5printEPKc>
	Serial.println('\'');
     3c4:	4b6b      	ldr	r3, [pc, #428]	; (574 <_Z10drawBitmapcss+0x310>)
     3c6:	2127      	movs	r1, #39	; 0x27
     3c8:	0018      	movs	r0, r3
     3ca:	f002 ff0b 	bl	31e4 <_ZN5Print7printlnEc>

	// Todo (BROKEN)
	// Open requested file on SD card
	if ((bmpFile = SD.open(filename))) {
     3ce:	239c      	movs	r3, #156	; 0x9c
     3d0:	005b      	lsls	r3, r3, #1
     3d2:	18f8      	adds	r0, r7, r3
     3d4:	230c      	movs	r3, #12
     3d6:	18fa      	adds	r2, r7, r3
     3d8:	4968      	ldr	r1, [pc, #416]	; (57c <_Z10drawBitmapcss+0x318>)
     3da:	2301      	movs	r3, #1
     3dc:	f008 fdc8 	bl	8f70 <_ZN5SDLib7SDClass4openEPKch>
     3e0:	239c      	movs	r3, #156	; 0x9c
     3e2:	005b      	lsls	r3, r3, #1
     3e4:	18fa      	adds	r2, r7, r3
     3e6:	238a      	movs	r3, #138	; 0x8a
     3e8:	005b      	lsls	r3, r3, #1
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	0011      	movs	r1, r2
     3ee:	0018      	movs	r0, r3
     3f0:	f7ff ff16 	bl	220 <_ZN5SDLib4FileaSEOS0_>
     3f4:	0003      	movs	r3, r0
     3f6:	0018      	movs	r0, r3
     3f8:	f008 fbd5 	bl	8ba6 <_ZN5SDLib4FilecvbEv>
     3fc:	1e03      	subs	r3, r0, #0
     3fe:	d005      	beq.n	40c <_Z10drawBitmapcss+0x1a8>
		Serial.println(F("File (maybe) not found"));
     400:	4a5f      	ldr	r2, [pc, #380]	; (580 <_Z10drawBitmapcss+0x31c>)
     402:	4b5c      	ldr	r3, [pc, #368]	; (574 <_Z10drawBitmapcss+0x310>)
     404:	0011      	movs	r1, r2
     406:	0018      	movs	r0, r3
     408:	f002 fea6 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
		// return;
	}

	// Parse BMP header
	Serial.println(F("Start parse"));
     40c:	4a5d      	ldr	r2, [pc, #372]	; (584 <_Z10drawBitmapcss+0x320>)
     40e:	4b59      	ldr	r3, [pc, #356]	; (574 <_Z10drawBitmapcss+0x310>)
     410:	0011      	movs	r1, r2
     412:	0018      	movs	r0, r3
     414:	f002 fea0 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     418:	238a      	movs	r3, #138	; 0x8a
     41a:	005b      	lsls	r3, r3, #1
     41c:	18fb      	adds	r3, r7, r3
     41e:	0018      	movs	r0, r3
     420:	f7ff fe78 	bl	114 <_Z6read16RN5SDLib4FileE>
     424:	0003      	movs	r3, r0
     426:	4a58      	ldr	r2, [pc, #352]	; (588 <_Z10drawBitmapcss+0x324>)
     428:	4694      	mov	ip, r2
     42a:	4463      	add	r3, ip
     42c:	425a      	negs	r2, r3
     42e:	4153      	adcs	r3, r2
     430:	b2db      	uxtb	r3, r3
     432:	2b00      	cmp	r3, #0
     434:	d100      	bne.n	438 <_Z10drawBitmapcss+0x1d4>
     436:	e349      	b.n	acc <_Z10drawBitmapcss+0x868>
		Serial.print(F("File size: "));
     438:	4a54      	ldr	r2, [pc, #336]	; (58c <_Z10drawBitmapcss+0x328>)
     43a:	4b4e      	ldr	r3, [pc, #312]	; (574 <_Z10drawBitmapcss+0x310>)
     43c:	0011      	movs	r1, r2
     43e:	0018      	movs	r0, r3
     440:	f002 fdcf 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     444:	238a      	movs	r3, #138	; 0x8a
     446:	005b      	lsls	r3, r3, #1
     448:	18fb      	adds	r3, r7, r3
     44a:	0018      	movs	r0, r3
     44c:	f7ff fe86 	bl	15c <_Z6read32RN5SDLib4FileE>
     450:	0001      	movs	r1, r0
     452:	4b48      	ldr	r3, [pc, #288]	; (574 <_Z10drawBitmapcss+0x310>)
     454:	220a      	movs	r2, #10
     456:	0018      	movs	r0, r3
     458:	f002 ff1c 	bl	3294 <_ZN5Print7printlnEmi>
		(void) read32(bmpFile); // Read & ignore creator bytes
     45c:	238a      	movs	r3, #138	; 0x8a
     45e:	005b      	lsls	r3, r3, #1
     460:	18fb      	adds	r3, r7, r3
     462:	0018      	movs	r0, r3
     464:	f7ff fe7a 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     468:	238a      	movs	r3, #138	; 0x8a
     46a:	005b      	lsls	r3, r3, #1
     46c:	18fb      	adds	r3, r7, r3
     46e:	0018      	movs	r0, r3
     470:	f7ff fe74 	bl	15c <_Z6read32RN5SDLib4FileE>
     474:	0003      	movs	r3, r0
     476:	22ba      	movs	r2, #186	; 0xba
     478:	0052      	lsls	r2, r2, #1
     47a:	18ba      	adds	r2, r7, r2
     47c:	6013      	str	r3, [r2, #0]
		Serial.print(F("Image Offset: "));
     47e:	4a44      	ldr	r2, [pc, #272]	; (590 <_Z10drawBitmapcss+0x32c>)
     480:	4b3c      	ldr	r3, [pc, #240]	; (574 <_Z10drawBitmapcss+0x310>)
     482:	0011      	movs	r1, r2
     484:	0018      	movs	r0, r3
     486:	f002 fdac 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(bmpImageoffset, DEC);
     48a:	23ba      	movs	r3, #186	; 0xba
     48c:	005b      	lsls	r3, r3, #1
     48e:	18fb      	adds	r3, r7, r3
     490:	6819      	ldr	r1, [r3, #0]
     492:	4b38      	ldr	r3, [pc, #224]	; (574 <_Z10drawBitmapcss+0x310>)
     494:	220a      	movs	r2, #10
     496:	0018      	movs	r0, r3
     498:	f002 fefc 	bl	3294 <_ZN5Print7printlnEmi>
		// Read DIB header
		Serial.print(F("Header size: "));
     49c:	4a3d      	ldr	r2, [pc, #244]	; (594 <_Z10drawBitmapcss+0x330>)
     49e:	4b35      	ldr	r3, [pc, #212]	; (574 <_Z10drawBitmapcss+0x310>)
     4a0:	0011      	movs	r1, r2
     4a2:	0018      	movs	r0, r3
     4a4:	f002 fd9d 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     4a8:	238a      	movs	r3, #138	; 0x8a
     4aa:	005b      	lsls	r3, r3, #1
     4ac:	18fb      	adds	r3, r7, r3
     4ae:	0018      	movs	r0, r3
     4b0:	f7ff fe54 	bl	15c <_Z6read32RN5SDLib4FileE>
     4b4:	0001      	movs	r1, r0
     4b6:	4b2f      	ldr	r3, [pc, #188]	; (574 <_Z10drawBitmapcss+0x310>)
     4b8:	220a      	movs	r2, #10
     4ba:	0018      	movs	r0, r3
     4bc:	f002 feea 	bl	3294 <_ZN5Print7printlnEmi>
		bmpWidth = read32(bmpFile);
     4c0:	238a      	movs	r3, #138	; 0x8a
     4c2:	005b      	lsls	r3, r3, #1
     4c4:	18fb      	adds	r3, r7, r3
     4c6:	0018      	movs	r0, r3
     4c8:	f7ff fe48 	bl	15c <_Z6read32RN5SDLib4FileE>
     4cc:	0003      	movs	r3, r0
     4ce:	22b8      	movs	r2, #184	; 0xb8
     4d0:	0052      	lsls	r2, r2, #1
     4d2:	18ba      	adds	r2, r7, r2
     4d4:	6013      	str	r3, [r2, #0]
		bmpHeight = read32(bmpFile);
     4d6:	238a      	movs	r3, #138	; 0x8a
     4d8:	005b      	lsls	r3, r3, #1
     4da:	18fb      	adds	r3, r7, r3
     4dc:	0018      	movs	r0, r3
     4de:	f7ff fe3d 	bl	15c <_Z6read32RN5SDLib4FileE>
     4e2:	0003      	movs	r3, r0
     4e4:	22ce      	movs	r2, #206	; 0xce
     4e6:	0052      	lsls	r2, r2, #1
     4e8:	18ba      	adds	r2, r7, r2
     4ea:	6013      	str	r3, [r2, #0]
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     4ec:	238a      	movs	r3, #138	; 0x8a
     4ee:	005b      	lsls	r3, r3, #1
     4f0:	18fb      	adds	r3, r7, r3
     4f2:	0018      	movs	r0, r3
     4f4:	f7ff fe0e 	bl	114 <_Z6read16RN5SDLib4FileE>
     4f8:	0003      	movs	r3, r0
     4fa:	3b01      	subs	r3, #1
     4fc:	425a      	negs	r2, r3
     4fe:	4153      	adcs	r3, r2
     500:	b2db      	uxtb	r3, r3
     502:	2b00      	cmp	r3, #0
     504:	d100      	bne.n	508 <_Z10drawBitmapcss+0x2a4>
     506:	e2e1      	b.n	acc <_Z10drawBitmapcss+0x868>
			bmpDepth = read16(bmpFile); // bits per pixel
     508:	238a      	movs	r3, #138	; 0x8a
     50a:	005b      	lsls	r3, r3, #1
     50c:	18fb      	adds	r3, r7, r3
     50e:	0018      	movs	r0, r3
     510:	f7ff fe00 	bl	114 <_Z6read16RN5SDLib4FileE>
     514:	0003      	movs	r3, r0
     516:	001a      	movs	r2, r3
     518:	2370      	movs	r3, #112	; 0x70
     51a:	33ff      	adds	r3, #255	; 0xff
     51c:	18fb      	adds	r3, r7, r3
     51e:	701a      	strb	r2, [r3, #0]
			Serial.print(F("Bit Depth: "));
     520:	4a1d      	ldr	r2, [pc, #116]	; (598 <_Z10drawBitmapcss+0x334>)
     522:	4b14      	ldr	r3, [pc, #80]	; (574 <_Z10drawBitmapcss+0x310>)
     524:	0011      	movs	r1, r2
     526:	0018      	movs	r0, r3
     528:	f002 fd5b 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(bmpDepth);
     52c:	2370      	movs	r3, #112	; 0x70
     52e:	33ff      	adds	r3, #255	; 0xff
     530:	18fb      	adds	r3, r7, r3
     532:	7819      	ldrb	r1, [r3, #0]
     534:	4b0f      	ldr	r3, [pc, #60]	; (574 <_Z10drawBitmapcss+0x310>)
     536:	220a      	movs	r2, #10
     538:	0018      	movs	r0, r3
     53a:	f002 fe70 	bl	321e <_ZN5Print7printlnEhi>
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     53e:	2370      	movs	r3, #112	; 0x70
     540:	33ff      	adds	r3, #255	; 0xff
     542:	18fb      	adds	r3, r7, r3
     544:	781b      	ldrb	r3, [r3, #0]
     546:	2b18      	cmp	r3, #24
     548:	d128      	bne.n	59c <_Z10drawBitmapcss+0x338>
     54a:	238a      	movs	r3, #138	; 0x8a
     54c:	005b      	lsls	r3, r3, #1
     54e:	18fb      	adds	r3, r7, r3
     550:	0018      	movs	r0, r3
     552:	f7ff fe03 	bl	15c <_Z6read32RN5SDLib4FileE>
     556:	1e03      	subs	r3, r0, #0
     558:	d120      	bne.n	59c <_Z10drawBitmapcss+0x338>
     55a:	2301      	movs	r3, #1
     55c:	e01f      	b.n	59e <_Z10drawBitmapcss+0x33a>
     55e:	46c0      	nop			; (mov r8, r8)
     560:	fffffe67 	.word	0xfffffe67
     564:	fffffe64 	.word	0xfffffe64
     568:	fffffe62 	.word	0xfffffe62
     56c:	fffffe6c 	.word	0xfffffe6c
     570:	200002bc 	.word	0x200002bc
     574:	20000e94 	.word	0x20000e94
     578:	00013258 	.word	0x00013258
     57c:	200008f4 	.word	0x200008f4
     580:	00013268 	.word	0x00013268
     584:	00013280 	.word	0x00013280
     588:	ffffb2be 	.word	0xffffb2be
     58c:	0001328c 	.word	0x0001328c
     590:	00013298 	.word	0x00013298
     594:	000132a8 	.word	0x000132a8
     598:	000132b8 	.word	0x000132b8
     59c:	2300      	movs	r3, #0
     59e:	2b00      	cmp	r3, #0
     5a0:	d100      	bne.n	5a4 <_Z10drawBitmapcss+0x340>
     5a2:	e293      	b.n	acc <_Z10drawBitmapcss+0x868>

				goodBmp = true; // Supported BMP format -- proceed!
     5a4:	23cd      	movs	r3, #205	; 0xcd
     5a6:	005b      	lsls	r3, r3, #1
     5a8:	18fb      	adds	r3, r7, r3
     5aa:	2201      	movs	r2, #1
     5ac:	701a      	strb	r2, [r3, #0]
				Serial.print(F("Image size: "));
     5ae:	4ac0      	ldr	r2, [pc, #768]	; (8b0 <_Z10drawBitmapcss+0x64c>)
     5b0:	4bc0      	ldr	r3, [pc, #768]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5b2:	0011      	movs	r1, r2
     5b4:	0018      	movs	r0, r3
     5b6:	f002 fd14 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(bmpWidth);
     5ba:	23b8      	movs	r3, #184	; 0xb8
     5bc:	005b      	lsls	r3, r3, #1
     5be:	18fb      	adds	r3, r7, r3
     5c0:	6819      	ldr	r1, [r3, #0]
     5c2:	4bbc      	ldr	r3, [pc, #752]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5c4:	220a      	movs	r2, #10
     5c6:	0018      	movs	r0, r3
     5c8:	f002 fd55 	bl	3076 <_ZN5Print5printEii>
				Serial.print('x');
     5cc:	4bb9      	ldr	r3, [pc, #740]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5ce:	2178      	movs	r1, #120	; 0x78
     5d0:	0018      	movs	r0, r3
     5d2:	f002 fd26 	bl	3022 <_ZN5Print5printEc>
				Serial.println(bmpHeight);
     5d6:	23ce      	movs	r3, #206	; 0xce
     5d8:	005b      	lsls	r3, r3, #1
     5da:	18fb      	adds	r3, r7, r3
     5dc:	6819      	ldr	r1, [r3, #0]
     5de:	4bb5      	ldr	r3, [pc, #724]	; (8b4 <_Z10drawBitmapcss+0x650>)
     5e0:	220a      	movs	r2, #10
     5e2:	0018      	movs	r0, r3
     5e4:	f002 fe3b 	bl	325e <_ZN5Print7printlnEii>

				// BMP rows are padded (if needed) to 4-byte boundary
				rowSize = (bmpWidth * 3 + 3) & ~3;
     5e8:	23b8      	movs	r3, #184	; 0xb8
     5ea:	005b      	lsls	r3, r3, #1
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	681b      	ldr	r3, [r3, #0]
     5f0:	1c5a      	adds	r2, r3, #1
     5f2:	0013      	movs	r3, r2
     5f4:	005b      	lsls	r3, r3, #1
     5f6:	189b      	adds	r3, r3, r2
     5f8:	001a      	movs	r2, r3
     5fa:	2303      	movs	r3, #3
     5fc:	439a      	bics	r2, r3
     5fe:	0013      	movs	r3, r2
     600:	22b4      	movs	r2, #180	; 0xb4
     602:	0052      	lsls	r2, r2, #1
     604:	18ba      	adds	r2, r7, r2
     606:	6013      	str	r3, [r2, #0]

				// If bmpHeight is negative, image is in top-down order.
				// This is not canon but has been observed in the wild.
				if (bmpHeight < 0) {
     608:	23ce      	movs	r3, #206	; 0xce
     60a:	005b      	lsls	r3, r3, #1
     60c:	18fb      	adds	r3, r7, r3
     60e:	681b      	ldr	r3, [r3, #0]
     610:	2b00      	cmp	r3, #0
     612:	da0d      	bge.n	630 <_Z10drawBitmapcss+0x3cc>
					bmpHeight = -bmpHeight;
     614:	23ce      	movs	r3, #206	; 0xce
     616:	005b      	lsls	r3, r3, #1
     618:	18fb      	adds	r3, r7, r3
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	425b      	negs	r3, r3
     61e:	22ce      	movs	r2, #206	; 0xce
     620:	0052      	lsls	r2, r2, #1
     622:	18ba      	adds	r2, r7, r2
     624:	6013      	str	r3, [r2, #0]
					flip = false;
     626:	239a      	movs	r3, #154	; 0x9a
     628:	33ff      	adds	r3, #255	; 0xff
     62a:	18fb      	adds	r3, r7, r3
     62c:	2200      	movs	r2, #0
     62e:	701a      	strb	r2, [r3, #0]
				}

				// Crop area to be loaded
				x2 = x + bmpWidth - 1; // Lower-right corner
     630:	4ba1      	ldr	r3, [pc, #644]	; (8b8 <_Z10drawBitmapcss+0x654>)
     632:	22d0      	movs	r2, #208	; 0xd0
     634:	0052      	lsls	r2, r2, #1
     636:	4694      	mov	ip, r2
     638:	44bc      	add	ip, r7
     63a:	4463      	add	r3, ip
     63c:	2200      	movs	r2, #0
     63e:	5e9a      	ldrsh	r2, [r3, r2]
     640:	23b8      	movs	r3, #184	; 0xb8
     642:	005b      	lsls	r3, r3, #1
     644:	18fb      	adds	r3, r7, r3
     646:	681b      	ldr	r3, [r3, #0]
     648:	18d3      	adds	r3, r2, r3
     64a:	3b01      	subs	r3, #1
     64c:	22b2      	movs	r2, #178	; 0xb2
     64e:	0052      	lsls	r2, r2, #1
     650:	18ba      	adds	r2, r7, r2
     652:	6013      	str	r3, [r2, #0]
				y2 = y + bmpHeight - 1;
     654:	4b99      	ldr	r3, [pc, #612]	; (8bc <_Z10drawBitmapcss+0x658>)
     656:	22d0      	movs	r2, #208	; 0xd0
     658:	0052      	lsls	r2, r2, #1
     65a:	4694      	mov	ip, r2
     65c:	44bc      	add	ip, r7
     65e:	4463      	add	r3, ip
     660:	2200      	movs	r2, #0
     662:	5e9a      	ldrsh	r2, [r3, r2]
     664:	23ce      	movs	r3, #206	; 0xce
     666:	005b      	lsls	r3, r3, #1
     668:	18fb      	adds	r3, r7, r3
     66a:	681b      	ldr	r3, [r3, #0]
     66c:	18d3      	adds	r3, r2, r3
     66e:	3b01      	subs	r3, #1
     670:	22b0      	movs	r2, #176	; 0xb0
     672:	0052      	lsls	r2, r2, #1
     674:	18ba      	adds	r2, r7, r2
     676:	6013      	str	r3, [r2, #0]
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     678:	23b2      	movs	r3, #178	; 0xb2
     67a:	005b      	lsls	r3, r3, #1
     67c:	18fb      	adds	r3, r7, r3
     67e:	681b      	ldr	r3, [r3, #0]
     680:	2b00      	cmp	r3, #0
     682:	da00      	bge.n	686 <_Z10drawBitmapcss+0x422>
     684:	e209      	b.n	a9a <_Z10drawBitmapcss+0x836>
     686:	23b0      	movs	r3, #176	; 0xb0
     688:	005b      	lsls	r3, r3, #1
     68a:	18fb      	adds	r3, r7, r3
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	2b00      	cmp	r3, #0
     690:	da00      	bge.n	694 <_Z10drawBitmapcss+0x430>
     692:	e202      	b.n	a9a <_Z10drawBitmapcss+0x836>
					w = bmpWidth; // Width/height of section to load/display
     694:	23b8      	movs	r3, #184	; 0xb8
     696:	005b      	lsls	r3, r3, #1
     698:	18fb      	adds	r3, r7, r3
     69a:	681b      	ldr	r3, [r3, #0]
     69c:	22ca      	movs	r2, #202	; 0xca
     69e:	0052      	lsls	r2, r2, #1
     6a0:	18ba      	adds	r2, r7, r2
     6a2:	6013      	str	r3, [r2, #0]
					h = bmpHeight;
     6a4:	23ce      	movs	r3, #206	; 0xce
     6a6:	005b      	lsls	r3, r3, #1
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	22c8      	movs	r2, #200	; 0xc8
     6ae:	0052      	lsls	r2, r2, #1
     6b0:	18ba      	adds	r2, r7, r2
     6b2:	6013      	str	r3, [r2, #0]
					bx1 = by1 = 0; // UL coordinate in BMP file
     6b4:	2300      	movs	r3, #0
     6b6:	22c0      	movs	r2, #192	; 0xc0
     6b8:	0052      	lsls	r2, r2, #1
     6ba:	18ba      	adds	r2, r7, r2
     6bc:	6013      	str	r3, [r2, #0]
     6be:	23c0      	movs	r3, #192	; 0xc0
     6c0:	005b      	lsls	r3, r3, #1
     6c2:	18fb      	adds	r3, r7, r3
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	22c2      	movs	r2, #194	; 0xc2
     6c8:	0052      	lsls	r2, r2, #1
     6ca:	18ba      	adds	r2, r7, r2
     6cc:	6013      	str	r3, [r2, #0]
					if (x < 0) { // Clip left
     6ce:	4b7a      	ldr	r3, [pc, #488]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6d0:	22d0      	movs	r2, #208	; 0xd0
     6d2:	0052      	lsls	r2, r2, #1
     6d4:	4694      	mov	ip, r2
     6d6:	44bc      	add	ip, r7
     6d8:	4463      	add	r3, ip
     6da:	2200      	movs	r2, #0
     6dc:	5e9b      	ldrsh	r3, [r3, r2]
     6de:	2b00      	cmp	r3, #0
     6e0:	da1d      	bge.n	71e <_Z10drawBitmapcss+0x4ba>
						bx1 = -x;
     6e2:	4b75      	ldr	r3, [pc, #468]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6e4:	22d0      	movs	r2, #208	; 0xd0
     6e6:	0052      	lsls	r2, r2, #1
     6e8:	4694      	mov	ip, r2
     6ea:	44bc      	add	ip, r7
     6ec:	4463      	add	r3, ip
     6ee:	2200      	movs	r2, #0
     6f0:	5e9b      	ldrsh	r3, [r3, r2]
     6f2:	425b      	negs	r3, r3
     6f4:	22c2      	movs	r2, #194	; 0xc2
     6f6:	0052      	lsls	r2, r2, #1
     6f8:	18ba      	adds	r2, r7, r2
     6fa:	6013      	str	r3, [r2, #0]
						x = 0;
     6fc:	4b6e      	ldr	r3, [pc, #440]	; (8b8 <_Z10drawBitmapcss+0x654>)
     6fe:	22d0      	movs	r2, #208	; 0xd0
     700:	0052      	lsls	r2, r2, #1
     702:	4694      	mov	ip, r2
     704:	44bc      	add	ip, r7
     706:	4463      	add	r3, ip
     708:	2200      	movs	r2, #0
     70a:	801a      	strh	r2, [r3, #0]
						w = x2 + 1;
     70c:	23b2      	movs	r3, #178	; 0xb2
     70e:	005b      	lsls	r3, r3, #1
     710:	18fb      	adds	r3, r7, r3
     712:	681b      	ldr	r3, [r3, #0]
     714:	3301      	adds	r3, #1
     716:	22ca      	movs	r2, #202	; 0xca
     718:	0052      	lsls	r2, r2, #1
     71a:	18ba      	adds	r2, r7, r2
     71c:	6013      	str	r3, [r2, #0]
					}
					if (y < 0) { // Clip top
     71e:	4b67      	ldr	r3, [pc, #412]	; (8bc <_Z10drawBitmapcss+0x658>)
     720:	22d0      	movs	r2, #208	; 0xd0
     722:	0052      	lsls	r2, r2, #1
     724:	4694      	mov	ip, r2
     726:	44bc      	add	ip, r7
     728:	4463      	add	r3, ip
     72a:	2200      	movs	r2, #0
     72c:	5e9b      	ldrsh	r3, [r3, r2]
     72e:	2b00      	cmp	r3, #0
     730:	da1d      	bge.n	76e <_Z10drawBitmapcss+0x50a>
						by1 = -y;
     732:	4b62      	ldr	r3, [pc, #392]	; (8bc <_Z10drawBitmapcss+0x658>)
     734:	22d0      	movs	r2, #208	; 0xd0
     736:	0052      	lsls	r2, r2, #1
     738:	4694      	mov	ip, r2
     73a:	44bc      	add	ip, r7
     73c:	4463      	add	r3, ip
     73e:	2200      	movs	r2, #0
     740:	5e9b      	ldrsh	r3, [r3, r2]
     742:	425b      	negs	r3, r3
     744:	22c0      	movs	r2, #192	; 0xc0
     746:	0052      	lsls	r2, r2, #1
     748:	18ba      	adds	r2, r7, r2
     74a:	6013      	str	r3, [r2, #0]
						y = 0;
     74c:	4b5b      	ldr	r3, [pc, #364]	; (8bc <_Z10drawBitmapcss+0x658>)
     74e:	22d0      	movs	r2, #208	; 0xd0
     750:	0052      	lsls	r2, r2, #1
     752:	4694      	mov	ip, r2
     754:	44bc      	add	ip, r7
     756:	4463      	add	r3, ip
     758:	2200      	movs	r2, #0
     75a:	801a      	strh	r2, [r3, #0]
						h = y2 + 1;
     75c:	23b0      	movs	r3, #176	; 0xb0
     75e:	005b      	lsls	r3, r3, #1
     760:	18fb      	adds	r3, r7, r3
     762:	681b      	ldr	r3, [r3, #0]
     764:	3301      	adds	r3, #1
     766:	22c8      	movs	r2, #200	; 0xc8
     768:	0052      	lsls	r2, r2, #1
     76a:	18ba      	adds	r2, r7, r2
     76c:	6013      	str	r3, [r2, #0]
					}
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     76e:	4b54      	ldr	r3, [pc, #336]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     770:	0018      	movs	r0, r3
     772:	f00c fec7 	bl	d504 <_ZNK12Adafruit_GFX5widthEv>
     776:	0003      	movs	r3, r0
     778:	001a      	movs	r2, r3
     77a:	23b2      	movs	r3, #178	; 0xb2
     77c:	005b      	lsls	r3, r3, #1
     77e:	18fb      	adds	r3, r7, r3
     780:	681b      	ldr	r3, [r3, #0]
     782:	0fd0      	lsrs	r0, r2, #31
     784:	17d9      	asrs	r1, r3, #31
     786:	4293      	cmp	r3, r2
     788:	4148      	adcs	r0, r1
     78a:	0003      	movs	r3, r0
     78c:	b2db      	uxtb	r3, r3
     78e:	2b00      	cmp	r3, #0
     790:	d012      	beq.n	7b8 <_Z10drawBitmapcss+0x554>
     792:	4b4b      	ldr	r3, [pc, #300]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     794:	0018      	movs	r0, r3
     796:	f00c feb5 	bl	d504 <_ZNK12Adafruit_GFX5widthEv>
     79a:	0003      	movs	r3, r0
     79c:	001a      	movs	r2, r3
     79e:	4b46      	ldr	r3, [pc, #280]	; (8b8 <_Z10drawBitmapcss+0x654>)
     7a0:	21d0      	movs	r1, #208	; 0xd0
     7a2:	0049      	lsls	r1, r1, #1
     7a4:	468c      	mov	ip, r1
     7a6:	44bc      	add	ip, r7
     7a8:	4463      	add	r3, ip
     7aa:	2100      	movs	r1, #0
     7ac:	5e5b      	ldrsh	r3, [r3, r1]
     7ae:	1ad3      	subs	r3, r2, r3
     7b0:	22ca      	movs	r2, #202	; 0xca
     7b2:	0052      	lsls	r2, r2, #1
     7b4:	18ba      	adds	r2, r7, r2
     7b6:	6013      	str	r3, [r2, #0]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     7b8:	4b41      	ldr	r3, [pc, #260]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     7ba:	0018      	movs	r0, r3
     7bc:	f00c fead 	bl	d51a <_ZNK12Adafruit_GFX6heightEv>
     7c0:	0003      	movs	r3, r0
     7c2:	001a      	movs	r2, r3
     7c4:	23b0      	movs	r3, #176	; 0xb0
     7c6:	005b      	lsls	r3, r3, #1
     7c8:	18fb      	adds	r3, r7, r3
     7ca:	681b      	ldr	r3, [r3, #0]
     7cc:	0fd0      	lsrs	r0, r2, #31
     7ce:	17d9      	asrs	r1, r3, #31
     7d0:	4293      	cmp	r3, r2
     7d2:	4148      	adcs	r0, r1
     7d4:	0003      	movs	r3, r0
     7d6:	b2db      	uxtb	r3, r3
     7d8:	2b00      	cmp	r3, #0
     7da:	d012      	beq.n	802 <_Z10drawBitmapcss+0x59e>
     7dc:	4b38      	ldr	r3, [pc, #224]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     7de:	0018      	movs	r0, r3
     7e0:	f00c fe9b 	bl	d51a <_ZNK12Adafruit_GFX6heightEv>
     7e4:	0003      	movs	r3, r0
     7e6:	001a      	movs	r2, r3
     7e8:	4b34      	ldr	r3, [pc, #208]	; (8bc <_Z10drawBitmapcss+0x658>)
     7ea:	21d0      	movs	r1, #208	; 0xd0
     7ec:	0049      	lsls	r1, r1, #1
     7ee:	468c      	mov	ip, r1
     7f0:	44bc      	add	ip, r7
     7f2:	4463      	add	r3, ip
     7f4:	2100      	movs	r1, #0
     7f6:	5e5b      	ldrsh	r3, [r3, r1]
     7f8:	1ad3      	subs	r3, r2, r3
     7fa:	22c8      	movs	r2, #200	; 0xc8
     7fc:	0052      	lsls	r2, r2, #1
     7fe:	18ba      	adds	r2, r7, r2
     800:	6013      	str	r3, [r2, #0]

					// Set tftDisplay address window to clipped image bounds
					tftDisplay.startWrite(); // Requires start/end transaction now
     802:	4b2f      	ldr	r3, [pc, #188]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     804:	0018      	movs	r0, r3
     806:	f007 fbd1 	bl	7fac <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
     80a:	4b2b      	ldr	r3, [pc, #172]	; (8b8 <_Z10drawBitmapcss+0x654>)
     80c:	22d0      	movs	r2, #208	; 0xd0
     80e:	0052      	lsls	r2, r2, #1
     810:	4694      	mov	ip, r2
     812:	44bc      	add	ip, r7
     814:	4463      	add	r3, ip
     816:	8819      	ldrh	r1, [r3, #0]
     818:	4b28      	ldr	r3, [pc, #160]	; (8bc <_Z10drawBitmapcss+0x658>)
     81a:	22d0      	movs	r2, #208	; 0xd0
     81c:	0052      	lsls	r2, r2, #1
     81e:	4694      	mov	ip, r2
     820:	44bc      	add	ip, r7
     822:	4463      	add	r3, ip
     824:	881a      	ldrh	r2, [r3, #0]
     826:	23ca      	movs	r3, #202	; 0xca
     828:	005b      	lsls	r3, r3, #1
     82a:	18fb      	adds	r3, r7, r3
     82c:	681b      	ldr	r3, [r3, #0]
     82e:	b29c      	uxth	r4, r3
     830:	23c8      	movs	r3, #200	; 0xc8
     832:	005b      	lsls	r3, r3, #1
     834:	18fb      	adds	r3, r7, r3
     836:	681b      	ldr	r3, [r3, #0]
     838:	b29b      	uxth	r3, r3
     83a:	4821      	ldr	r0, [pc, #132]	; (8c0 <_Z10drawBitmapcss+0x65c>)
     83c:	9300      	str	r3, [sp, #0]
     83e:	0023      	movs	r3, r4
     840:	f007 fc1e 	bl	8080 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>

					for (row = 0; row < h; row++) { // For each scanline...
     844:	2300      	movs	r3, #0
     846:	22c6      	movs	r2, #198	; 0xc6
     848:	0052      	lsls	r2, r2, #1
     84a:	18ba      	adds	r2, r7, r2
     84c:	6013      	str	r3, [r2, #0]
     84e:	23c6      	movs	r3, #198	; 0xc6
     850:	005b      	lsls	r3, r3, #1
     852:	18fb      	adds	r3, r7, r3
     854:	681a      	ldr	r2, [r3, #0]
     856:	23c8      	movs	r3, #200	; 0xc8
     858:	005b      	lsls	r3, r3, #1
     85a:	18fb      	adds	r3, r7, r3
     85c:	681b      	ldr	r3, [r3, #0]
     85e:	429a      	cmp	r2, r3
     860:	db00      	blt.n	864 <_Z10drawBitmapcss+0x600>
     862:	e116      	b.n	a92 <_Z10drawBitmapcss+0x82e>
						// intensive to be doing this on every line, but this
						// method covers a lot of gritty details like cropping
						// and scanline padding.  Also, the seek only takes
						// place if the file position actually needs to change
						// (avoids a lot of cluster math in SD library).
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
     864:	239a      	movs	r3, #154	; 0x9a
     866:	33ff      	adds	r3, #255	; 0xff
     868:	18fb      	adds	r3, r7, r3
     86a:	781b      	ldrb	r3, [r3, #0]
     86c:	2b00      	cmp	r3, #0
     86e:	d029      	beq.n	8c4 <_Z10drawBitmapcss+0x660>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
     870:	23ce      	movs	r3, #206	; 0xce
     872:	005b      	lsls	r3, r3, #1
     874:	18fb      	adds	r3, r7, r3
     876:	681b      	ldr	r3, [r3, #0]
     878:	1e5a      	subs	r2, r3, #1
     87a:	23c6      	movs	r3, #198	; 0xc6
     87c:	005b      	lsls	r3, r3, #1
     87e:	18fb      	adds	r3, r7, r3
     880:	6819      	ldr	r1, [r3, #0]
     882:	23c0      	movs	r3, #192	; 0xc0
     884:	005b      	lsls	r3, r3, #1
     886:	18fb      	adds	r3, r7, r3
     888:	681b      	ldr	r3, [r3, #0]
     88a:	18cb      	adds	r3, r1, r3
     88c:	1ad3      	subs	r3, r2, r3
     88e:	001a      	movs	r2, r3
     890:	23b4      	movs	r3, #180	; 0xb4
     892:	005b      	lsls	r3, r3, #1
     894:	18fb      	adds	r3, r7, r3
     896:	681b      	ldr	r3, [r3, #0]
     898:	435a      	muls	r2, r3
     89a:	23ba      	movs	r3, #186	; 0xba
     89c:	005b      	lsls	r3, r3, #1
     89e:	18fb      	adds	r3, r7, r3
     8a0:	681b      	ldr	r3, [r3, #0]
     8a2:	18d3      	adds	r3, r2, r3
     8a4:	22be      	movs	r2, #190	; 0xbe
     8a6:	0052      	lsls	r2, r2, #1
     8a8:	18ba      	adds	r2, r7, r2
     8aa:	6013      	str	r3, [r2, #0]
     8ac:	e022      	b.n	8f4 <_Z10drawBitmapcss+0x690>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	000132c4 	.word	0x000132c4
     8b4:	20000e94 	.word	0x20000e94
     8b8:	fffffe64 	.word	0xfffffe64
     8bc:	fffffe62 	.word	0xfffffe62
     8c0:	200002bc 	.word	0x200002bc
						else
						// Bitmap is stored top-to-bottom
						pos = bmpImageoffset + (row + by1) * rowSize;
     8c4:	23c6      	movs	r3, #198	; 0xc6
     8c6:	005b      	lsls	r3, r3, #1
     8c8:	18fb      	adds	r3, r7, r3
     8ca:	681a      	ldr	r2, [r3, #0]
     8cc:	23c0      	movs	r3, #192	; 0xc0
     8ce:	005b      	lsls	r3, r3, #1
     8d0:	18fb      	adds	r3, r7, r3
     8d2:	681b      	ldr	r3, [r3, #0]
     8d4:	18d3      	adds	r3, r2, r3
     8d6:	001a      	movs	r2, r3
     8d8:	23b4      	movs	r3, #180	; 0xb4
     8da:	005b      	lsls	r3, r3, #1
     8dc:	18fb      	adds	r3, r7, r3
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	435a      	muls	r2, r3
     8e2:	23ba      	movs	r3, #186	; 0xba
     8e4:	005b      	lsls	r3, r3, #1
     8e6:	18fb      	adds	r3, r7, r3
     8e8:	681b      	ldr	r3, [r3, #0]
     8ea:	18d3      	adds	r3, r2, r3
     8ec:	22be      	movs	r2, #190	; 0xbe
     8ee:	0052      	lsls	r2, r2, #1
     8f0:	18ba      	adds	r2, r7, r2
     8f2:	6013      	str	r3, [r2, #0]
						pos += bx1 * 3; // Factor in starting column (bx1)
     8f4:	23c2      	movs	r3, #194	; 0xc2
     8f6:	005b      	lsls	r3, r3, #1
     8f8:	18fb      	adds	r3, r7, r3
     8fa:	681a      	ldr	r2, [r3, #0]
     8fc:	0013      	movs	r3, r2
     8fe:	005b      	lsls	r3, r3, #1
     900:	189b      	adds	r3, r3, r2
     902:	001a      	movs	r2, r3
     904:	23be      	movs	r3, #190	; 0xbe
     906:	005b      	lsls	r3, r3, #1
     908:	18fb      	adds	r3, r7, r3
     90a:	681b      	ldr	r3, [r3, #0]
     90c:	189b      	adds	r3, r3, r2
     90e:	22be      	movs	r2, #190	; 0xbe
     910:	0052      	lsls	r2, r2, #1
     912:	18ba      	adds	r2, r7, r2
     914:	6013      	str	r3, [r2, #0]
						if (bmpFile.position() != pos) { // Need seek?
     916:	238a      	movs	r3, #138	; 0x8a
     918:	005b      	lsls	r3, r3, #1
     91a:	18fb      	adds	r3, r7, r3
     91c:	0018      	movs	r0, r3
     91e:	f008 f900 	bl	8b22 <_ZN5SDLib4File8positionEv>
     922:	0002      	movs	r2, r0
     924:	23be      	movs	r3, #190	; 0xbe
     926:	005b      	lsls	r3, r3, #1
     928:	18fb      	adds	r3, r7, r3
     92a:	681b      	ldr	r3, [r3, #0]
     92c:	1ad3      	subs	r3, r2, r3
     92e:	1e5a      	subs	r2, r3, #1
     930:	4193      	sbcs	r3, r2
     932:	b2db      	uxtb	r3, r3
     934:	2b00      	cmp	r3, #0
     936:	d017      	beq.n	968 <_Z10drawBitmapcss+0x704>
							tftDisplay.endWrite(); // End tftDisplay transaction
     938:	4b73      	ldr	r3, [pc, #460]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     93a:	0018      	movs	r0, r3
     93c:	f007 fb5e 	bl	7ffc <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
     940:	23be      	movs	r3, #190	; 0xbe
     942:	005b      	lsls	r3, r3, #1
     944:	18fb      	adds	r3, r7, r3
     946:	681a      	ldr	r2, [r3, #0]
     948:	238a      	movs	r3, #138	; 0x8a
     94a:	005b      	lsls	r3, r3, #1
     94c:	18fb      	adds	r3, r7, r3
     94e:	0011      	movs	r1, r2
     950:	0018      	movs	r0, r3
     952:	f008 f8cc 	bl	8aee <_ZN5SDLib4File4seekEm>
							buffidx = sizeof(sdbuffer); // Force buffer reload
     956:	239c      	movs	r3, #156	; 0x9c
     958:	33ff      	adds	r3, #255	; 0xff
     95a:	18fb      	adds	r3, r7, r3
     95c:	22ff      	movs	r2, #255	; 0xff
     95e:	701a      	strb	r2, [r3, #0]
							tftDisplay.startWrite(); // Start new tftDisplay transaction
     960:	4b69      	ldr	r3, [pc, #420]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     962:	0018      	movs	r0, r3
     964:	f007 fb22 	bl	7fac <_ZN16Adafruit_ILI934110startWriteEv>
						}
						for (col = 0; col < w; col++) { // For each pixel...
     968:	2300      	movs	r3, #0
     96a:	22c4      	movs	r2, #196	; 0xc4
     96c:	0052      	lsls	r2, r2, #1
     96e:	18ba      	adds	r2, r7, r2
     970:	6013      	str	r3, [r2, #0]
     972:	23c4      	movs	r3, #196	; 0xc4
     974:	005b      	lsls	r3, r3, #1
     976:	18fb      	adds	r3, r7, r3
     978:	681a      	ldr	r2, [r3, #0]
     97a:	23ca      	movs	r3, #202	; 0xca
     97c:	005b      	lsls	r3, r3, #1
     97e:	18fb      	adds	r3, r7, r3
     980:	681b      	ldr	r3, [r3, #0]
     982:	429a      	cmp	r2, r3
     984:	da7b      	bge.n	a7e <_Z10drawBitmapcss+0x81a>
							// Time to read more pixel data?
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
     986:	239c      	movs	r3, #156	; 0x9c
     988:	33ff      	adds	r3, #255	; 0xff
     98a:	18fb      	adds	r3, r7, r3
     98c:	781b      	ldrb	r3, [r3, #0]
     98e:	2bff      	cmp	r3, #255	; 0xff
     990:	d115      	bne.n	9be <_Z10drawBitmapcss+0x75a>
								tftDisplay.endWrite(); // End tftDisplay transaction
     992:	4b5d      	ldr	r3, [pc, #372]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     994:	0018      	movs	r0, r3
     996:	f007 fb31 	bl	7ffc <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
     99a:	2314      	movs	r3, #20
     99c:	18f9      	adds	r1, r7, r3
     99e:	238a      	movs	r3, #138	; 0x8a
     9a0:	005b      	lsls	r3, r3, #1
     9a2:	18fb      	adds	r3, r7, r3
     9a4:	22ff      	movs	r2, #255	; 0xff
     9a6:	0018      	movs	r0, r3
     9a8:	f008 f853 	bl	8a52 <_ZN5SDLib4File4readEPvt>
								buffidx = 0; // Set index to beginning
     9ac:	239c      	movs	r3, #156	; 0x9c
     9ae:	33ff      	adds	r3, #255	; 0xff
     9b0:	18fb      	adds	r3, r7, r3
     9b2:	2200      	movs	r2, #0
     9b4:	701a      	strb	r2, [r3, #0]
								tftDisplay.startWrite(); // Start new tftDisplay transaction
     9b6:	4b54      	ldr	r3, [pc, #336]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     9b8:	0018      	movs	r0, r3
     9ba:	f007 faf7 	bl	7fac <_ZN16Adafruit_ILI934110startWriteEv>
							}
							// Convert pixel from BMP to tftDisplay format, push to display
							b = sdbuffer[buffidx++];
     9be:	239c      	movs	r3, #156	; 0x9c
     9c0:	33ff      	adds	r3, #255	; 0xff
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	229c      	movs	r2, #156	; 0x9c
     9c8:	32ff      	adds	r2, #255	; 0xff
     9ca:	18ba      	adds	r2, r7, r2
     9cc:	1c59      	adds	r1, r3, #1
     9ce:	7011      	strb	r1, [r2, #0]
     9d0:	0019      	movs	r1, r3
     9d2:	2360      	movs	r3, #96	; 0x60
     9d4:	33ff      	adds	r3, #255	; 0xff
     9d6:	18fb      	adds	r3, r7, r3
     9d8:	4a4c      	ldr	r2, [pc, #304]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     9da:	20d0      	movs	r0, #208	; 0xd0
     9dc:	0040      	lsls	r0, r0, #1
     9de:	4684      	mov	ip, r0
     9e0:	44bc      	add	ip, r7
     9e2:	4462      	add	r2, ip
     9e4:	5c52      	ldrb	r2, [r2, r1]
     9e6:	701a      	strb	r2, [r3, #0]
							g = sdbuffer[buffidx++];
     9e8:	239c      	movs	r3, #156	; 0x9c
     9ea:	33ff      	adds	r3, #255	; 0xff
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	229c      	movs	r2, #156	; 0x9c
     9f2:	32ff      	adds	r2, #255	; 0xff
     9f4:	18ba      	adds	r2, r7, r2
     9f6:	1c59      	adds	r1, r3, #1
     9f8:	7011      	strb	r1, [r2, #0]
     9fa:	0019      	movs	r1, r3
     9fc:	23af      	movs	r3, #175	; 0xaf
     9fe:	005b      	lsls	r3, r3, #1
     a00:	18fb      	adds	r3, r7, r3
     a02:	4a42      	ldr	r2, [pc, #264]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     a04:	20d0      	movs	r0, #208	; 0xd0
     a06:	0040      	lsls	r0, r0, #1
     a08:	4684      	mov	ip, r0
     a0a:	44bc      	add	ip, r7
     a0c:	4462      	add	r2, ip
     a0e:	5c52      	ldrb	r2, [r2, r1]
     a10:	701a      	strb	r2, [r3, #0]
							r = sdbuffer[buffidx++];
     a12:	239c      	movs	r3, #156	; 0x9c
     a14:	33ff      	adds	r3, #255	; 0xff
     a16:	18fb      	adds	r3, r7, r3
     a18:	781b      	ldrb	r3, [r3, #0]
     a1a:	229c      	movs	r2, #156	; 0x9c
     a1c:	32ff      	adds	r2, #255	; 0xff
     a1e:	18ba      	adds	r2, r7, r2
     a20:	1c59      	adds	r1, r3, #1
     a22:	7011      	strb	r1, [r2, #0]
     a24:	0019      	movs	r1, r3
     a26:	235e      	movs	r3, #94	; 0x5e
     a28:	33ff      	adds	r3, #255	; 0xff
     a2a:	18fb      	adds	r3, r7, r3
     a2c:	4a37      	ldr	r2, [pc, #220]	; (b0c <_Z10drawBitmapcss+0x8a8>)
     a2e:	20d0      	movs	r0, #208	; 0xd0
     a30:	0040      	lsls	r0, r0, #1
     a32:	4684      	mov	ip, r0
     a34:	44bc      	add	ip, r7
     a36:	4462      	add	r2, ip
     a38:	5c52      	ldrb	r2, [r2, r1]
     a3a:	701a      	strb	r2, [r3, #0]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
     a3c:	2360      	movs	r3, #96	; 0x60
     a3e:	33ff      	adds	r3, #255	; 0xff
     a40:	18fb      	adds	r3, r7, r3
     a42:	781c      	ldrb	r4, [r3, #0]
     a44:	23af      	movs	r3, #175	; 0xaf
     a46:	005b      	lsls	r3, r3, #1
     a48:	18fb      	adds	r3, r7, r3
     a4a:	781a      	ldrb	r2, [r3, #0]
     a4c:	235e      	movs	r3, #94	; 0x5e
     a4e:	33ff      	adds	r3, #255	; 0xff
     a50:	18fb      	adds	r3, r7, r3
     a52:	7819      	ldrb	r1, [r3, #0]
     a54:	482c      	ldr	r0, [pc, #176]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a56:	0023      	movs	r3, r4
     a58:	f006 fe98 	bl	778c <_ZN16Adafruit_ILI93418color565Ehhh>
     a5c:	0003      	movs	r3, r0
     a5e:	001a      	movs	r2, r3
     a60:	4b29      	ldr	r3, [pc, #164]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a62:	0011      	movs	r1, r2
     a64:	0018      	movs	r0, r3
     a66:	f007 fbd3 	bl	8210 <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
     a6a:	23c4      	movs	r3, #196	; 0xc4
     a6c:	005b      	lsls	r3, r3, #1
     a6e:	18fb      	adds	r3, r7, r3
     a70:	681b      	ldr	r3, [r3, #0]
     a72:	3301      	adds	r3, #1
     a74:	22c4      	movs	r2, #196	; 0xc4
     a76:	0052      	lsls	r2, r2, #1
     a78:	18ba      	adds	r2, r7, r2
     a7a:	6013      	str	r3, [r2, #0]
     a7c:	e779      	b.n	972 <_Z10drawBitmapcss+0x70e>
					for (row = 0; row < h; row++) { // For each scanline...
     a7e:	23c6      	movs	r3, #198	; 0xc6
     a80:	005b      	lsls	r3, r3, #1
     a82:	18fb      	adds	r3, r7, r3
     a84:	681b      	ldr	r3, [r3, #0]
     a86:	3301      	adds	r3, #1
     a88:	22c6      	movs	r2, #198	; 0xc6
     a8a:	0052      	lsls	r2, r2, #1
     a8c:	18ba      	adds	r2, r7, r2
     a8e:	6013      	str	r3, [r2, #0]
     a90:	e6dd      	b.n	84e <_Z10drawBitmapcss+0x5ea>
						} // end pixel
					} // end scanline
					tftDisplay.endWrite(); // End last tftDisplay transaction
     a92:	4b1d      	ldr	r3, [pc, #116]	; (b08 <_Z10drawBitmapcss+0x8a4>)
     a94:	0018      	movs	r0, r3
     a96:	f007 fab1 	bl	7ffc <_ZN16Adafruit_ILI93418endWriteEv>
				} // end onscreen
				Serial.print(F("Loaded in "));
     a9a:	4a1d      	ldr	r2, [pc, #116]	; (b10 <_Z10drawBitmapcss+0x8ac>)
     a9c:	4b1d      	ldr	r3, [pc, #116]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     a9e:	0011      	movs	r1, r2
     aa0:	0018      	movs	r0, r3
     aa2:	f002 fa9e 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(millis() - startTime);
     aa6:	f002 f9e1 	bl	2e6c <millis>
     aaa:	0002      	movs	r2, r0
     aac:	23bc      	movs	r3, #188	; 0xbc
     aae:	005b      	lsls	r3, r3, #1
     ab0:	18fb      	adds	r3, r7, r3
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	1ad1      	subs	r1, r2, r3
     ab6:	4b17      	ldr	r3, [pc, #92]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     ab8:	220a      	movs	r2, #10
     aba:	0018      	movs	r0, r3
     abc:	f002 fb2d 	bl	311a <_ZN5Print5printEmi>
				Serial.println(F(" ms"));
     ac0:	4a15      	ldr	r2, [pc, #84]	; (b18 <_Z10drawBitmapcss+0x8b4>)
     ac2:	4b14      	ldr	r3, [pc, #80]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     ac4:	0011      	movs	r1, r2
     ac6:	0018      	movs	r0, r3
     ac8:	f002 fb46 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
			} // end goodBmp
		}
	}

	bmpFile.close();
     acc:	238a      	movs	r3, #138	; 0x8a
     ace:	005b      	lsls	r3, r3, #1
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	0018      	movs	r0, r3
     ad4:	f008 f84e 	bl	8b74 <_ZN5SDLib4File5closeEv>
	if (!goodBmp)
     ad8:	23cd      	movs	r3, #205	; 0xcd
     ada:	005b      	lsls	r3, r3, #1
     adc:	18fb      	adds	r3, r7, r3
     ade:	781b      	ldrb	r3, [r3, #0]
     ae0:	2201      	movs	r2, #1
     ae2:	4053      	eors	r3, r2
     ae4:	b2db      	uxtb	r3, r3
     ae6:	2b00      	cmp	r3, #0
     ae8:	d005      	beq.n	af6 <_Z10drawBitmapcss+0x892>
	Serial.println(F("BMP format not recognized or SD not mounted"));
     aea:	4a0c      	ldr	r2, [pc, #48]	; (b1c <_Z10drawBitmapcss+0x8b8>)
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     aee:	0011      	movs	r1, r2
     af0:	0018      	movs	r0, r3
     af2:	f002 fb31 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println();
     af6:	4b07      	ldr	r3, [pc, #28]	; (b14 <_Z10drawBitmapcss+0x8b0>)
     af8:	0018      	movs	r0, r3
     afa:	f002 fb47 	bl	318c <_ZN5Print7printlnEv>
     afe:	e000      	b.n	b02 <_Z10drawBitmapcss+0x89e>
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     b00:	46c0      	nop			; (mov r8, r8)
}
     b02:	46bd      	mov	sp, r7
     b04:	b069      	add	sp, #420	; 0x1a4
     b06:	bd90      	pop	{r4, r7, pc}
     b08:	200002bc 	.word	0x200002bc
     b0c:	fffffe74 	.word	0xfffffe74
     b10:	000132d4 	.word	0x000132d4
     b14:	20000e94 	.word	0x20000e94
     b18:	000132e0 	.word	0x000132e0
     b1c:	000132e4 	.word	0x000132e4

00000b20 <_Z10drawBitmapPcss>:

void drawBitmap(char* filename, int16_t x, int16_t y) {
     b20:	b590      	push	{r4, r7, lr}
     b22:	b0e9      	sub	sp, #420	; 0x1a4
     b24:	af02      	add	r7, sp, #8
     b26:	6078      	str	r0, [r7, #4]
     b28:	0008      	movs	r0, r1
     b2a:	0011      	movs	r1, r2
     b2c:	4b99      	ldr	r3, [pc, #612]	; (d94 <_Z10drawBitmapPcss+0x274>)
     b2e:	22cc      	movs	r2, #204	; 0xcc
     b30:	0052      	lsls	r2, r2, #1
     b32:	4694      	mov	ip, r2
     b34:	44bc      	add	ip, r7
     b36:	4463      	add	r3, ip
     b38:	1c02      	adds	r2, r0, #0
     b3a:	801a      	strh	r2, [r3, #0]
     b3c:	4b96      	ldr	r3, [pc, #600]	; (d98 <_Z10drawBitmapPcss+0x278>)
     b3e:	22cc      	movs	r2, #204	; 0xcc
     b40:	0052      	lsls	r2, r2, #1
     b42:	4694      	mov	ip, r2
     b44:	44bc      	add	ip, r7
     b46:	4463      	add	r3, ip
     b48:	1c0a      	adds	r2, r1, #0
     b4a:	801a      	strh	r2, [r3, #0]

	File bmpFile;
     b4c:	2386      	movs	r3, #134	; 0x86
     b4e:	005b      	lsls	r3, r3, #1
     b50:	18fb      	adds	r3, r7, r3
     b52:	0018      	movs	r0, r3
     b54:	f007 fee4 	bl	8920 <_ZN5SDLib4FileC1Ev>
	int bmpWidth, bmpHeight;   // W+H in pixels
	uint8_t bmpDepth;              // Bit depth (currently must be 24)
	uint32_t bmpImageoffset;        // Start of image data in file
	uint32_t rowSize;               // Not always = bmpWidth; may have padding
	uint8_t sdbuffer[3 * BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
	uint8_t buffidx = sizeof(sdbuffer); // Current position in sdbuffer
     b58:	2394      	movs	r3, #148	; 0x94
     b5a:	33ff      	adds	r3, #255	; 0xff
     b5c:	18fb      	adds	r3, r7, r3
     b5e:	22ff      	movs	r2, #255	; 0xff
     b60:	701a      	strb	r2, [r3, #0]
	boolean goodBmp = false;       // Set to true on valid header parse
     b62:	23c9      	movs	r3, #201	; 0xc9
     b64:	005b      	lsls	r3, r3, #1
     b66:	18fb      	adds	r3, r7, r3
     b68:	2200      	movs	r2, #0
     b6a:	701a      	strb	r2, [r3, #0]
	boolean flip = true;        // BMP is stored bottom-to-top
     b6c:	2392      	movs	r3, #146	; 0x92
     b6e:	33ff      	adds	r3, #255	; 0xff
     b70:	18fb      	adds	r3, r7, r3
     b72:	2201      	movs	r2, #1
     b74:	701a      	strb	r2, [r3, #0]
	int w, h, row, col, x2, y2, bx1, by1;
	uint8_t r, g, b;
	uint32_t pos = 0, startTime = millis();
     b76:	2300      	movs	r3, #0
     b78:	22ba      	movs	r2, #186	; 0xba
     b7a:	0052      	lsls	r2, r2, #1
     b7c:	18ba      	adds	r2, r7, r2
     b7e:	6013      	str	r3, [r2, #0]
     b80:	f002 f974 	bl	2e6c <millis>
     b84:	0003      	movs	r3, r0
     b86:	22b8      	movs	r2, #184	; 0xb8
     b88:	0052      	lsls	r2, r2, #1
     b8a:	18ba      	adds	r2, r7, r2
     b8c:	6013      	str	r3, [r2, #0]

	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
     b8e:	4b83      	ldr	r3, [pc, #524]	; (d9c <_Z10drawBitmapPcss+0x27c>)
     b90:	0018      	movs	r0, r3
     b92:	f00c fcb7 	bl	d504 <_ZNK12Adafruit_GFX5widthEv>
     b96:	0003      	movs	r3, r0
     b98:	001a      	movs	r2, r3
     b9a:	4b7e      	ldr	r3, [pc, #504]	; (d94 <_Z10drawBitmapPcss+0x274>)
     b9c:	21cc      	movs	r1, #204	; 0xcc
     b9e:	0049      	lsls	r1, r1, #1
     ba0:	468c      	mov	ip, r1
     ba2:	44bc      	add	ip, r7
     ba4:	4463      	add	r3, ip
     ba6:	2100      	movs	r1, #0
     ba8:	5e5b      	ldrsh	r3, [r3, r1]
     baa:	4293      	cmp	r3, r2
     bac:	da0f      	bge.n	bce <_Z10drawBitmapPcss+0xae>
     bae:	4b7b      	ldr	r3, [pc, #492]	; (d9c <_Z10drawBitmapPcss+0x27c>)
     bb0:	0018      	movs	r0, r3
     bb2:	f00c fcb2 	bl	d51a <_ZNK12Adafruit_GFX6heightEv>
     bb6:	0003      	movs	r3, r0
     bb8:	001a      	movs	r2, r3
     bba:	4b77      	ldr	r3, [pc, #476]	; (d98 <_Z10drawBitmapPcss+0x278>)
     bbc:	21cc      	movs	r1, #204	; 0xcc
     bbe:	0049      	lsls	r1, r1, #1
     bc0:	468c      	mov	ip, r1
     bc2:	44bc      	add	ip, r7
     bc4:	4463      	add	r3, ip
     bc6:	2100      	movs	r1, #0
     bc8:	5e5b      	ldrsh	r3, [r3, r1]
     bca:	4293      	cmp	r3, r2
     bcc:	db01      	blt.n	bd2 <_Z10drawBitmapPcss+0xb2>
     bce:	2301      	movs	r3, #1
     bd0:	e000      	b.n	bd4 <_Z10drawBitmapPcss+0xb4>
     bd2:	2300      	movs	r3, #0
     bd4:	2b00      	cmp	r3, #0
     bd6:	d000      	beq.n	bda <_Z10drawBitmapPcss+0xba>
     bd8:	e3a8      	b.n	132c <_Z10drawBitmapPcss+0x80c>

	Serial.println();
     bda:	4b71      	ldr	r3, [pc, #452]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bdc:	0018      	movs	r0, r3
     bde:	f002 fad5 	bl	318c <_ZN5Print7printlnEv>
	Serial.print(F("Loading image '"));
     be2:	4a70      	ldr	r2, [pc, #448]	; (da4 <_Z10drawBitmapPcss+0x284>)
     be4:	4b6e      	ldr	r3, [pc, #440]	; (da0 <_Z10drawBitmapPcss+0x280>)
     be6:	0011      	movs	r1, r2
     be8:	0018      	movs	r0, r3
     bea:	f002 f9fa 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(filename);
     bee:	687a      	ldr	r2, [r7, #4]
     bf0:	4b6b      	ldr	r3, [pc, #428]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bf2:	0011      	movs	r1, r2
     bf4:	0018      	movs	r0, r3
     bf6:	f002 fa04 	bl	3002 <_ZN5Print5printEPKc>
	Serial.println('\'');
     bfa:	4b69      	ldr	r3, [pc, #420]	; (da0 <_Z10drawBitmapPcss+0x280>)
     bfc:	2127      	movs	r1, #39	; 0x27
     bfe:	0018      	movs	r0, r3
     c00:	f002 faf0 	bl	31e4 <_ZN5Print7printlnEc>

	// Todo (BROKEN)
	// Open requested file on SD card
	if ((bmpFile = SD.open(filename))) {
     c04:	2398      	movs	r3, #152	; 0x98
     c06:	005b      	lsls	r3, r3, #1
     c08:	18f8      	adds	r0, r7, r3
     c0a:	687a      	ldr	r2, [r7, #4]
     c0c:	4966      	ldr	r1, [pc, #408]	; (da8 <_Z10drawBitmapPcss+0x288>)
     c0e:	2301      	movs	r3, #1
     c10:	f008 f9ae 	bl	8f70 <_ZN5SDLib7SDClass4openEPKch>
     c14:	2398      	movs	r3, #152	; 0x98
     c16:	005b      	lsls	r3, r3, #1
     c18:	18fa      	adds	r2, r7, r3
     c1a:	2386      	movs	r3, #134	; 0x86
     c1c:	005b      	lsls	r3, r3, #1
     c1e:	18fb      	adds	r3, r7, r3
     c20:	0011      	movs	r1, r2
     c22:	0018      	movs	r0, r3
     c24:	f7ff fafc 	bl	220 <_ZN5SDLib4FileaSEOS0_>
     c28:	0003      	movs	r3, r0
     c2a:	0018      	movs	r0, r3
     c2c:	f007 ffbb 	bl	8ba6 <_ZN5SDLib4FilecvbEv>
     c30:	1e03      	subs	r3, r0, #0
     c32:	d005      	beq.n	c40 <_Z10drawBitmapPcss+0x120>
		Serial.println(F("File (maybe) not found"));
     c34:	4a5d      	ldr	r2, [pc, #372]	; (dac <_Z10drawBitmapPcss+0x28c>)
     c36:	4b5a      	ldr	r3, [pc, #360]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c38:	0011      	movs	r1, r2
     c3a:	0018      	movs	r0, r3
     c3c:	f002 fa8c 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
		// return;
	}

	// Parse BMP header
	Serial.println(F("Start parse"));
     c40:	4a5b      	ldr	r2, [pc, #364]	; (db0 <_Z10drawBitmapPcss+0x290>)
     c42:	4b57      	ldr	r3, [pc, #348]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c44:	0011      	movs	r1, r2
     c46:	0018      	movs	r0, r3
     c48:	f002 fa86 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (read16(bmpFile) == 0x4D42) { // BMP signature
     c4c:	2386      	movs	r3, #134	; 0x86
     c4e:	005b      	lsls	r3, r3, #1
     c50:	18fb      	adds	r3, r7, r3
     c52:	0018      	movs	r0, r3
     c54:	f7ff fa5e 	bl	114 <_Z6read16RN5SDLib4FileE>
     c58:	0003      	movs	r3, r0
     c5a:	4a56      	ldr	r2, [pc, #344]	; (db4 <_Z10drawBitmapPcss+0x294>)
     c5c:	4694      	mov	ip, r2
     c5e:	4463      	add	r3, ip
     c60:	425a      	negs	r2, r3
     c62:	4153      	adcs	r3, r2
     c64:	b2db      	uxtb	r3, r3
     c66:	2b00      	cmp	r3, #0
     c68:	d100      	bne.n	c6c <_Z10drawBitmapPcss+0x14c>
     c6a:	e345      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>
		Serial.print(F("File size: "));
     c6c:	4a52      	ldr	r2, [pc, #328]	; (db8 <_Z10drawBitmapPcss+0x298>)
     c6e:	4b4c      	ldr	r3, [pc, #304]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c70:	0011      	movs	r1, r2
     c72:	0018      	movs	r0, r3
     c74:	f002 f9b5 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     c78:	2386      	movs	r3, #134	; 0x86
     c7a:	005b      	lsls	r3, r3, #1
     c7c:	18fb      	adds	r3, r7, r3
     c7e:	0018      	movs	r0, r3
     c80:	f7ff fa6c 	bl	15c <_Z6read32RN5SDLib4FileE>
     c84:	0001      	movs	r1, r0
     c86:	4b46      	ldr	r3, [pc, #280]	; (da0 <_Z10drawBitmapPcss+0x280>)
     c88:	220a      	movs	r2, #10
     c8a:	0018      	movs	r0, r3
     c8c:	f002 fb02 	bl	3294 <_ZN5Print7printlnEmi>
		(void) read32(bmpFile); // Read & ignore creator bytes
     c90:	2386      	movs	r3, #134	; 0x86
     c92:	005b      	lsls	r3, r3, #1
     c94:	18fb      	adds	r3, r7, r3
     c96:	0018      	movs	r0, r3
     c98:	f7ff fa60 	bl	15c <_Z6read32RN5SDLib4FileE>
		bmpImageoffset = read32(bmpFile); // Start of image data
     c9c:	2386      	movs	r3, #134	; 0x86
     c9e:	005b      	lsls	r3, r3, #1
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	0018      	movs	r0, r3
     ca4:	f7ff fa5a 	bl	15c <_Z6read32RN5SDLib4FileE>
     ca8:	0003      	movs	r3, r0
     caa:	22b6      	movs	r2, #182	; 0xb6
     cac:	0052      	lsls	r2, r2, #1
     cae:	18ba      	adds	r2, r7, r2
     cb0:	6013      	str	r3, [r2, #0]
		Serial.print(F("Image Offset: "));
     cb2:	4a42      	ldr	r2, [pc, #264]	; (dbc <_Z10drawBitmapPcss+0x29c>)
     cb4:	4b3a      	ldr	r3, [pc, #232]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cb6:	0011      	movs	r1, r2
     cb8:	0018      	movs	r0, r3
     cba:	f002 f992 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(bmpImageoffset, DEC);
     cbe:	23b6      	movs	r3, #182	; 0xb6
     cc0:	005b      	lsls	r3, r3, #1
     cc2:	18fb      	adds	r3, r7, r3
     cc4:	6819      	ldr	r1, [r3, #0]
     cc6:	4b36      	ldr	r3, [pc, #216]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cc8:	220a      	movs	r2, #10
     cca:	0018      	movs	r0, r3
     ccc:	f002 fae2 	bl	3294 <_ZN5Print7printlnEmi>
		// Read DIB header
		Serial.print(F("Header size: "));
     cd0:	4a3b      	ldr	r2, [pc, #236]	; (dc0 <_Z10drawBitmapPcss+0x2a0>)
     cd2:	4b33      	ldr	r3, [pc, #204]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cd4:	0011      	movs	r1, r2
     cd6:	0018      	movs	r0, r3
     cd8:	f002 f983 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(read32(bmpFile));
     cdc:	2386      	movs	r3, #134	; 0x86
     cde:	005b      	lsls	r3, r3, #1
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	0018      	movs	r0, r3
     ce4:	f7ff fa3a 	bl	15c <_Z6read32RN5SDLib4FileE>
     ce8:	0001      	movs	r1, r0
     cea:	4b2d      	ldr	r3, [pc, #180]	; (da0 <_Z10drawBitmapPcss+0x280>)
     cec:	220a      	movs	r2, #10
     cee:	0018      	movs	r0, r3
     cf0:	f002 fad0 	bl	3294 <_ZN5Print7printlnEmi>
		bmpWidth = read32(bmpFile);
     cf4:	2386      	movs	r3, #134	; 0x86
     cf6:	005b      	lsls	r3, r3, #1
     cf8:	18fb      	adds	r3, r7, r3
     cfa:	0018      	movs	r0, r3
     cfc:	f7ff fa2e 	bl	15c <_Z6read32RN5SDLib4FileE>
     d00:	0003      	movs	r3, r0
     d02:	22b4      	movs	r2, #180	; 0xb4
     d04:	0052      	lsls	r2, r2, #1
     d06:	18ba      	adds	r2, r7, r2
     d08:	6013      	str	r3, [r2, #0]
		bmpHeight = read32(bmpFile);
     d0a:	2386      	movs	r3, #134	; 0x86
     d0c:	005b      	lsls	r3, r3, #1
     d0e:	18fb      	adds	r3, r7, r3
     d10:	0018      	movs	r0, r3
     d12:	f7ff fa23 	bl	15c <_Z6read32RN5SDLib4FileE>
     d16:	0003      	movs	r3, r0
     d18:	22ca      	movs	r2, #202	; 0xca
     d1a:	0052      	lsls	r2, r2, #1
     d1c:	18ba      	adds	r2, r7, r2
     d1e:	6013      	str	r3, [r2, #0]
		if (read16(bmpFile) == 1) { // # planes -- must be '1'
     d20:	2386      	movs	r3, #134	; 0x86
     d22:	005b      	lsls	r3, r3, #1
     d24:	18fb      	adds	r3, r7, r3
     d26:	0018      	movs	r0, r3
     d28:	f7ff f9f4 	bl	114 <_Z6read16RN5SDLib4FileE>
     d2c:	0003      	movs	r3, r0
     d2e:	3b01      	subs	r3, #1
     d30:	425a      	negs	r2, r3
     d32:	4153      	adcs	r3, r2
     d34:	b2db      	uxtb	r3, r3
     d36:	2b00      	cmp	r3, #0
     d38:	d100      	bne.n	d3c <_Z10drawBitmapPcss+0x21c>
     d3a:	e2dd      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>
			bmpDepth = read16(bmpFile); // bits per pixel
     d3c:	2386      	movs	r3, #134	; 0x86
     d3e:	005b      	lsls	r3, r3, #1
     d40:	18fb      	adds	r3, r7, r3
     d42:	0018      	movs	r0, r3
     d44:	f7ff f9e6 	bl	114 <_Z6read16RN5SDLib4FileE>
     d48:	0003      	movs	r3, r0
     d4a:	001a      	movs	r2, r3
     d4c:	2368      	movs	r3, #104	; 0x68
     d4e:	33ff      	adds	r3, #255	; 0xff
     d50:	18fb      	adds	r3, r7, r3
     d52:	701a      	strb	r2, [r3, #0]
			Serial.print(F("Bit Depth: "));
     d54:	4a1b      	ldr	r2, [pc, #108]	; (dc4 <_Z10drawBitmapPcss+0x2a4>)
     d56:	4b12      	ldr	r3, [pc, #72]	; (da0 <_Z10drawBitmapPcss+0x280>)
     d58:	0011      	movs	r1, r2
     d5a:	0018      	movs	r0, r3
     d5c:	f002 f941 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
			Serial.println(bmpDepth);
     d60:	2368      	movs	r3, #104	; 0x68
     d62:	33ff      	adds	r3, #255	; 0xff
     d64:	18fb      	adds	r3, r7, r3
     d66:	7819      	ldrb	r1, [r3, #0]
     d68:	4b0d      	ldr	r3, [pc, #52]	; (da0 <_Z10drawBitmapPcss+0x280>)
     d6a:	220a      	movs	r2, #10
     d6c:	0018      	movs	r0, r3
     d6e:	f002 fa56 	bl	321e <_ZN5Print7printlnEhi>
			if ((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed
     d72:	2368      	movs	r3, #104	; 0x68
     d74:	33ff      	adds	r3, #255	; 0xff
     d76:	18fb      	adds	r3, r7, r3
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	2b18      	cmp	r3, #24
     d7c:	d124      	bne.n	dc8 <_Z10drawBitmapPcss+0x2a8>
     d7e:	2386      	movs	r3, #134	; 0x86
     d80:	005b      	lsls	r3, r3, #1
     d82:	18fb      	adds	r3, r7, r3
     d84:	0018      	movs	r0, r3
     d86:	f7ff f9e9 	bl	15c <_Z6read32RN5SDLib4FileE>
     d8a:	1e03      	subs	r3, r0, #0
     d8c:	d11c      	bne.n	dc8 <_Z10drawBitmapPcss+0x2a8>
     d8e:	2301      	movs	r3, #1
     d90:	e01b      	b.n	dca <_Z10drawBitmapPcss+0x2aa>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	fffffe6a 	.word	0xfffffe6a
     d98:	fffffe68 	.word	0xfffffe68
     d9c:	200002bc 	.word	0x200002bc
     da0:	20000e94 	.word	0x20000e94
     da4:	00013258 	.word	0x00013258
     da8:	200008f4 	.word	0x200008f4
     dac:	00013268 	.word	0x00013268
     db0:	00013280 	.word	0x00013280
     db4:	ffffb2be 	.word	0xffffb2be
     db8:	0001328c 	.word	0x0001328c
     dbc:	00013298 	.word	0x00013298
     dc0:	000132a8 	.word	0x000132a8
     dc4:	000132b8 	.word	0x000132b8
     dc8:	2300      	movs	r3, #0
     dca:	2b00      	cmp	r3, #0
     dcc:	d100      	bne.n	dd0 <_Z10drawBitmapPcss+0x2b0>
     dce:	e293      	b.n	12f8 <_Z10drawBitmapPcss+0x7d8>

				goodBmp = true; // Supported BMP format -- proceed!
     dd0:	23c9      	movs	r3, #201	; 0xc9
     dd2:	005b      	lsls	r3, r3, #1
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	2201      	movs	r2, #1
     dd8:	701a      	strb	r2, [r3, #0]
				Serial.print(F("Image size: "));
     dda:	4ac0      	ldr	r2, [pc, #768]	; (10dc <_Z10drawBitmapPcss+0x5bc>)
     ddc:	4bc0      	ldr	r3, [pc, #768]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     dde:	0011      	movs	r1, r2
     de0:	0018      	movs	r0, r3
     de2:	f002 f8fe 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(bmpWidth);
     de6:	23b4      	movs	r3, #180	; 0xb4
     de8:	005b      	lsls	r3, r3, #1
     dea:	18fb      	adds	r3, r7, r3
     dec:	6819      	ldr	r1, [r3, #0]
     dee:	4bbc      	ldr	r3, [pc, #752]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     df0:	220a      	movs	r2, #10
     df2:	0018      	movs	r0, r3
     df4:	f002 f93f 	bl	3076 <_ZN5Print5printEii>
				Serial.print('x');
     df8:	4bb9      	ldr	r3, [pc, #740]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     dfa:	2178      	movs	r1, #120	; 0x78
     dfc:	0018      	movs	r0, r3
     dfe:	f002 f910 	bl	3022 <_ZN5Print5printEc>
				Serial.println(bmpHeight);
     e02:	23ca      	movs	r3, #202	; 0xca
     e04:	005b      	lsls	r3, r3, #1
     e06:	18fb      	adds	r3, r7, r3
     e08:	6819      	ldr	r1, [r3, #0]
     e0a:	4bb5      	ldr	r3, [pc, #724]	; (10e0 <_Z10drawBitmapPcss+0x5c0>)
     e0c:	220a      	movs	r2, #10
     e0e:	0018      	movs	r0, r3
     e10:	f002 fa25 	bl	325e <_ZN5Print7printlnEii>

				// BMP rows are padded (if needed) to 4-byte boundary
				rowSize = (bmpWidth * 3 + 3) & ~3;
     e14:	23b4      	movs	r3, #180	; 0xb4
     e16:	005b      	lsls	r3, r3, #1
     e18:	18fb      	adds	r3, r7, r3
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	1c5a      	adds	r2, r3, #1
     e1e:	0013      	movs	r3, r2
     e20:	005b      	lsls	r3, r3, #1
     e22:	189b      	adds	r3, r3, r2
     e24:	001a      	movs	r2, r3
     e26:	2303      	movs	r3, #3
     e28:	439a      	bics	r2, r3
     e2a:	0013      	movs	r3, r2
     e2c:	22b0      	movs	r2, #176	; 0xb0
     e2e:	0052      	lsls	r2, r2, #1
     e30:	18ba      	adds	r2, r7, r2
     e32:	6013      	str	r3, [r2, #0]

				// If bmpHeight is negative, image is in top-down order.
				// This is not canon but has been observed in the wild.
				if (bmpHeight < 0) {
     e34:	23ca      	movs	r3, #202	; 0xca
     e36:	005b      	lsls	r3, r3, #1
     e38:	18fb      	adds	r3, r7, r3
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	2b00      	cmp	r3, #0
     e3e:	da0d      	bge.n	e5c <_Z10drawBitmapPcss+0x33c>
					bmpHeight = -bmpHeight;
     e40:	23ca      	movs	r3, #202	; 0xca
     e42:	005b      	lsls	r3, r3, #1
     e44:	18fb      	adds	r3, r7, r3
     e46:	681b      	ldr	r3, [r3, #0]
     e48:	425b      	negs	r3, r3
     e4a:	22ca      	movs	r2, #202	; 0xca
     e4c:	0052      	lsls	r2, r2, #1
     e4e:	18ba      	adds	r2, r7, r2
     e50:	6013      	str	r3, [r2, #0]
					flip = false;
     e52:	2392      	movs	r3, #146	; 0x92
     e54:	33ff      	adds	r3, #255	; 0xff
     e56:	18fb      	adds	r3, r7, r3
     e58:	2200      	movs	r2, #0
     e5a:	701a      	strb	r2, [r3, #0]
				}

				// Crop area to be loaded
				x2 = x + bmpWidth - 1; // Lower-right corner
     e5c:	4ba1      	ldr	r3, [pc, #644]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     e5e:	22cc      	movs	r2, #204	; 0xcc
     e60:	0052      	lsls	r2, r2, #1
     e62:	4694      	mov	ip, r2
     e64:	44bc      	add	ip, r7
     e66:	4463      	add	r3, ip
     e68:	2200      	movs	r2, #0
     e6a:	5e9a      	ldrsh	r2, [r3, r2]
     e6c:	23b4      	movs	r3, #180	; 0xb4
     e6e:	005b      	lsls	r3, r3, #1
     e70:	18fb      	adds	r3, r7, r3
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	18d3      	adds	r3, r2, r3
     e76:	3b01      	subs	r3, #1
     e78:	22ae      	movs	r2, #174	; 0xae
     e7a:	0052      	lsls	r2, r2, #1
     e7c:	18ba      	adds	r2, r7, r2
     e7e:	6013      	str	r3, [r2, #0]
				y2 = y + bmpHeight - 1;
     e80:	4b99      	ldr	r3, [pc, #612]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     e82:	22cc      	movs	r2, #204	; 0xcc
     e84:	0052      	lsls	r2, r2, #1
     e86:	4694      	mov	ip, r2
     e88:	44bc      	add	ip, r7
     e8a:	4463      	add	r3, ip
     e8c:	2200      	movs	r2, #0
     e8e:	5e9a      	ldrsh	r2, [r3, r2]
     e90:	23ca      	movs	r3, #202	; 0xca
     e92:	005b      	lsls	r3, r3, #1
     e94:	18fb      	adds	r3, r7, r3
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	18d3      	adds	r3, r2, r3
     e9a:	3b01      	subs	r3, #1
     e9c:	22ac      	movs	r2, #172	; 0xac
     e9e:	0052      	lsls	r2, r2, #1
     ea0:	18ba      	adds	r2, r7, r2
     ea2:	6013      	str	r3, [r2, #0]
				if ((x2 >= 0) && (y2 >= 0)) { // On screen?
     ea4:	23ae      	movs	r3, #174	; 0xae
     ea6:	005b      	lsls	r3, r3, #1
     ea8:	18fb      	adds	r3, r7, r3
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	2b00      	cmp	r3, #0
     eae:	da00      	bge.n	eb2 <_Z10drawBitmapPcss+0x392>
     eb0:	e209      	b.n	12c6 <_Z10drawBitmapPcss+0x7a6>
     eb2:	23ac      	movs	r3, #172	; 0xac
     eb4:	005b      	lsls	r3, r3, #1
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	2b00      	cmp	r3, #0
     ebc:	da00      	bge.n	ec0 <_Z10drawBitmapPcss+0x3a0>
     ebe:	e202      	b.n	12c6 <_Z10drawBitmapPcss+0x7a6>
					w = bmpWidth; // Width/height of section to load/display
     ec0:	23b4      	movs	r3, #180	; 0xb4
     ec2:	005b      	lsls	r3, r3, #1
     ec4:	18fb      	adds	r3, r7, r3
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	22c6      	movs	r2, #198	; 0xc6
     eca:	0052      	lsls	r2, r2, #1
     ecc:	18ba      	adds	r2, r7, r2
     ece:	6013      	str	r3, [r2, #0]
					h = bmpHeight;
     ed0:	23ca      	movs	r3, #202	; 0xca
     ed2:	005b      	lsls	r3, r3, #1
     ed4:	18fb      	adds	r3, r7, r3
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	22c4      	movs	r2, #196	; 0xc4
     eda:	0052      	lsls	r2, r2, #1
     edc:	18ba      	adds	r2, r7, r2
     ede:	6013      	str	r3, [r2, #0]
					bx1 = by1 = 0; // UL coordinate in BMP file
     ee0:	2300      	movs	r3, #0
     ee2:	22bc      	movs	r2, #188	; 0xbc
     ee4:	0052      	lsls	r2, r2, #1
     ee6:	18ba      	adds	r2, r7, r2
     ee8:	6013      	str	r3, [r2, #0]
     eea:	23bc      	movs	r3, #188	; 0xbc
     eec:	005b      	lsls	r3, r3, #1
     eee:	18fb      	adds	r3, r7, r3
     ef0:	681b      	ldr	r3, [r3, #0]
     ef2:	22be      	movs	r2, #190	; 0xbe
     ef4:	0052      	lsls	r2, r2, #1
     ef6:	18ba      	adds	r2, r7, r2
     ef8:	6013      	str	r3, [r2, #0]
					if (x < 0) { // Clip left
     efa:	4b7a      	ldr	r3, [pc, #488]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     efc:	22cc      	movs	r2, #204	; 0xcc
     efe:	0052      	lsls	r2, r2, #1
     f00:	4694      	mov	ip, r2
     f02:	44bc      	add	ip, r7
     f04:	4463      	add	r3, ip
     f06:	2200      	movs	r2, #0
     f08:	5e9b      	ldrsh	r3, [r3, r2]
     f0a:	2b00      	cmp	r3, #0
     f0c:	da1d      	bge.n	f4a <_Z10drawBitmapPcss+0x42a>
						bx1 = -x;
     f0e:	4b75      	ldr	r3, [pc, #468]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     f10:	22cc      	movs	r2, #204	; 0xcc
     f12:	0052      	lsls	r2, r2, #1
     f14:	4694      	mov	ip, r2
     f16:	44bc      	add	ip, r7
     f18:	4463      	add	r3, ip
     f1a:	2200      	movs	r2, #0
     f1c:	5e9b      	ldrsh	r3, [r3, r2]
     f1e:	425b      	negs	r3, r3
     f20:	22be      	movs	r2, #190	; 0xbe
     f22:	0052      	lsls	r2, r2, #1
     f24:	18ba      	adds	r2, r7, r2
     f26:	6013      	str	r3, [r2, #0]
						x = 0;
     f28:	4b6e      	ldr	r3, [pc, #440]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     f2a:	22cc      	movs	r2, #204	; 0xcc
     f2c:	0052      	lsls	r2, r2, #1
     f2e:	4694      	mov	ip, r2
     f30:	44bc      	add	ip, r7
     f32:	4463      	add	r3, ip
     f34:	2200      	movs	r2, #0
     f36:	801a      	strh	r2, [r3, #0]
						w = x2 + 1;
     f38:	23ae      	movs	r3, #174	; 0xae
     f3a:	005b      	lsls	r3, r3, #1
     f3c:	18fb      	adds	r3, r7, r3
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	3301      	adds	r3, #1
     f42:	22c6      	movs	r2, #198	; 0xc6
     f44:	0052      	lsls	r2, r2, #1
     f46:	18ba      	adds	r2, r7, r2
     f48:	6013      	str	r3, [r2, #0]
					}
					if (y < 0) { // Clip top
     f4a:	4b67      	ldr	r3, [pc, #412]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f4c:	22cc      	movs	r2, #204	; 0xcc
     f4e:	0052      	lsls	r2, r2, #1
     f50:	4694      	mov	ip, r2
     f52:	44bc      	add	ip, r7
     f54:	4463      	add	r3, ip
     f56:	2200      	movs	r2, #0
     f58:	5e9b      	ldrsh	r3, [r3, r2]
     f5a:	2b00      	cmp	r3, #0
     f5c:	da1d      	bge.n	f9a <_Z10drawBitmapPcss+0x47a>
						by1 = -y;
     f5e:	4b62      	ldr	r3, [pc, #392]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f60:	22cc      	movs	r2, #204	; 0xcc
     f62:	0052      	lsls	r2, r2, #1
     f64:	4694      	mov	ip, r2
     f66:	44bc      	add	ip, r7
     f68:	4463      	add	r3, ip
     f6a:	2200      	movs	r2, #0
     f6c:	5e9b      	ldrsh	r3, [r3, r2]
     f6e:	425b      	negs	r3, r3
     f70:	22bc      	movs	r2, #188	; 0xbc
     f72:	0052      	lsls	r2, r2, #1
     f74:	18ba      	adds	r2, r7, r2
     f76:	6013      	str	r3, [r2, #0]
						y = 0;
     f78:	4b5b      	ldr	r3, [pc, #364]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
     f7a:	22cc      	movs	r2, #204	; 0xcc
     f7c:	0052      	lsls	r2, r2, #1
     f7e:	4694      	mov	ip, r2
     f80:	44bc      	add	ip, r7
     f82:	4463      	add	r3, ip
     f84:	2200      	movs	r2, #0
     f86:	801a      	strh	r2, [r3, #0]
						h = y2 + 1;
     f88:	23ac      	movs	r3, #172	; 0xac
     f8a:	005b      	lsls	r3, r3, #1
     f8c:	18fb      	adds	r3, r7, r3
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	3301      	adds	r3, #1
     f92:	22c4      	movs	r2, #196	; 0xc4
     f94:	0052      	lsls	r2, r2, #1
     f96:	18ba      	adds	r2, r7, r2
     f98:	6013      	str	r3, [r2, #0]
					}
					if (x2 >= tftDisplay.width()) w = tftDisplay.width() - x; // Clip right
     f9a:	4b54      	ldr	r3, [pc, #336]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     f9c:	0018      	movs	r0, r3
     f9e:	f00c fab1 	bl	d504 <_ZNK12Adafruit_GFX5widthEv>
     fa2:	0003      	movs	r3, r0
     fa4:	001a      	movs	r2, r3
     fa6:	23ae      	movs	r3, #174	; 0xae
     fa8:	005b      	lsls	r3, r3, #1
     faa:	18fb      	adds	r3, r7, r3
     fac:	681b      	ldr	r3, [r3, #0]
     fae:	0fd0      	lsrs	r0, r2, #31
     fb0:	17d9      	asrs	r1, r3, #31
     fb2:	4293      	cmp	r3, r2
     fb4:	4148      	adcs	r0, r1
     fb6:	0003      	movs	r3, r0
     fb8:	b2db      	uxtb	r3, r3
     fba:	2b00      	cmp	r3, #0
     fbc:	d012      	beq.n	fe4 <_Z10drawBitmapPcss+0x4c4>
     fbe:	4b4b      	ldr	r3, [pc, #300]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     fc0:	0018      	movs	r0, r3
     fc2:	f00c fa9f 	bl	d504 <_ZNK12Adafruit_GFX5widthEv>
     fc6:	0003      	movs	r3, r0
     fc8:	001a      	movs	r2, r3
     fca:	4b46      	ldr	r3, [pc, #280]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
     fcc:	21cc      	movs	r1, #204	; 0xcc
     fce:	0049      	lsls	r1, r1, #1
     fd0:	468c      	mov	ip, r1
     fd2:	44bc      	add	ip, r7
     fd4:	4463      	add	r3, ip
     fd6:	2100      	movs	r1, #0
     fd8:	5e5b      	ldrsh	r3, [r3, r1]
     fda:	1ad3      	subs	r3, r2, r3
     fdc:	22c6      	movs	r2, #198	; 0xc6
     fde:	0052      	lsls	r2, r2, #1
     fe0:	18ba      	adds	r2, r7, r2
     fe2:	6013      	str	r3, [r2, #0]
					if (y2 >= tftDisplay.height()) h = tftDisplay.height() - y; // Clip bottom
     fe4:	4b41      	ldr	r3, [pc, #260]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
     fe6:	0018      	movs	r0, r3
     fe8:	f00c fa97 	bl	d51a <_ZNK12Adafruit_GFX6heightEv>
     fec:	0003      	movs	r3, r0
     fee:	001a      	movs	r2, r3
     ff0:	23ac      	movs	r3, #172	; 0xac
     ff2:	005b      	lsls	r3, r3, #1
     ff4:	18fb      	adds	r3, r7, r3
     ff6:	681b      	ldr	r3, [r3, #0]
     ff8:	0fd0      	lsrs	r0, r2, #31
     ffa:	17d9      	asrs	r1, r3, #31
     ffc:	4293      	cmp	r3, r2
     ffe:	4148      	adcs	r0, r1
    1000:	0003      	movs	r3, r0
    1002:	b2db      	uxtb	r3, r3
    1004:	2b00      	cmp	r3, #0
    1006:	d012      	beq.n	102e <_Z10drawBitmapPcss+0x50e>
    1008:	4b38      	ldr	r3, [pc, #224]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    100a:	0018      	movs	r0, r3
    100c:	f00c fa85 	bl	d51a <_ZNK12Adafruit_GFX6heightEv>
    1010:	0003      	movs	r3, r0
    1012:	001a      	movs	r2, r3
    1014:	4b34      	ldr	r3, [pc, #208]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
    1016:	21cc      	movs	r1, #204	; 0xcc
    1018:	0049      	lsls	r1, r1, #1
    101a:	468c      	mov	ip, r1
    101c:	44bc      	add	ip, r7
    101e:	4463      	add	r3, ip
    1020:	2100      	movs	r1, #0
    1022:	5e5b      	ldrsh	r3, [r3, r1]
    1024:	1ad3      	subs	r3, r2, r3
    1026:	22c4      	movs	r2, #196	; 0xc4
    1028:	0052      	lsls	r2, r2, #1
    102a:	18ba      	adds	r2, r7, r2
    102c:	6013      	str	r3, [r2, #0]

					// Set tftDisplay address window to clipped image bounds
					tftDisplay.startWrite(); // Requires start/end transaction now
    102e:	4b2f      	ldr	r3, [pc, #188]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    1030:	0018      	movs	r0, r3
    1032:	f006 ffbb 	bl	7fac <_ZN16Adafruit_ILI934110startWriteEv>
					tftDisplay.setAddrWindow(x, y, w, h);
    1036:	4b2b      	ldr	r3, [pc, #172]	; (10e4 <_Z10drawBitmapPcss+0x5c4>)
    1038:	22cc      	movs	r2, #204	; 0xcc
    103a:	0052      	lsls	r2, r2, #1
    103c:	4694      	mov	ip, r2
    103e:	44bc      	add	ip, r7
    1040:	4463      	add	r3, ip
    1042:	8819      	ldrh	r1, [r3, #0]
    1044:	4b28      	ldr	r3, [pc, #160]	; (10e8 <_Z10drawBitmapPcss+0x5c8>)
    1046:	22cc      	movs	r2, #204	; 0xcc
    1048:	0052      	lsls	r2, r2, #1
    104a:	4694      	mov	ip, r2
    104c:	44bc      	add	ip, r7
    104e:	4463      	add	r3, ip
    1050:	881a      	ldrh	r2, [r3, #0]
    1052:	23c6      	movs	r3, #198	; 0xc6
    1054:	005b      	lsls	r3, r3, #1
    1056:	18fb      	adds	r3, r7, r3
    1058:	681b      	ldr	r3, [r3, #0]
    105a:	b29c      	uxth	r4, r3
    105c:	23c4      	movs	r3, #196	; 0xc4
    105e:	005b      	lsls	r3, r3, #1
    1060:	18fb      	adds	r3, r7, r3
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	b29b      	uxth	r3, r3
    1066:	4821      	ldr	r0, [pc, #132]	; (10ec <_Z10drawBitmapPcss+0x5cc>)
    1068:	9300      	str	r3, [sp, #0]
    106a:	0023      	movs	r3, r4
    106c:	f007 f808 	bl	8080 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>

					for (row = 0; row < h; row++) { // For each scanline...
    1070:	2300      	movs	r3, #0
    1072:	22c2      	movs	r2, #194	; 0xc2
    1074:	0052      	lsls	r2, r2, #1
    1076:	18ba      	adds	r2, r7, r2
    1078:	6013      	str	r3, [r2, #0]
    107a:	23c2      	movs	r3, #194	; 0xc2
    107c:	005b      	lsls	r3, r3, #1
    107e:	18fb      	adds	r3, r7, r3
    1080:	681a      	ldr	r2, [r3, #0]
    1082:	23c4      	movs	r3, #196	; 0xc4
    1084:	005b      	lsls	r3, r3, #1
    1086:	18fb      	adds	r3, r7, r3
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	429a      	cmp	r2, r3
    108c:	db00      	blt.n	1090 <_Z10drawBitmapPcss+0x570>
    108e:	e116      	b.n	12be <_Z10drawBitmapPcss+0x79e>
						// intensive to be doing this on every line, but this
						// method covers a lot of gritty details like cropping
						// and scanline padding.  Also, the seek only takes
						// place if the file position actually needs to change
						// (avoids a lot of cluster math in SD library).
						if (flip) // Bitmap is stored bottom-to-top order (normal BMP)
    1090:	2392      	movs	r3, #146	; 0x92
    1092:	33ff      	adds	r3, #255	; 0xff
    1094:	18fb      	adds	r3, r7, r3
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	2b00      	cmp	r3, #0
    109a:	d029      	beq.n	10f0 <_Z10drawBitmapPcss+0x5d0>
						pos = bmpImageoffset + (bmpHeight - 1 - (row + by1)) * rowSize;
    109c:	23ca      	movs	r3, #202	; 0xca
    109e:	005b      	lsls	r3, r3, #1
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	1e5a      	subs	r2, r3, #1
    10a6:	23c2      	movs	r3, #194	; 0xc2
    10a8:	005b      	lsls	r3, r3, #1
    10aa:	18fb      	adds	r3, r7, r3
    10ac:	6819      	ldr	r1, [r3, #0]
    10ae:	23bc      	movs	r3, #188	; 0xbc
    10b0:	005b      	lsls	r3, r3, #1
    10b2:	18fb      	adds	r3, r7, r3
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	18cb      	adds	r3, r1, r3
    10b8:	1ad3      	subs	r3, r2, r3
    10ba:	001a      	movs	r2, r3
    10bc:	23b0      	movs	r3, #176	; 0xb0
    10be:	005b      	lsls	r3, r3, #1
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	435a      	muls	r2, r3
    10c6:	23b6      	movs	r3, #182	; 0xb6
    10c8:	005b      	lsls	r3, r3, #1
    10ca:	18fb      	adds	r3, r7, r3
    10cc:	681b      	ldr	r3, [r3, #0]
    10ce:	18d3      	adds	r3, r2, r3
    10d0:	22ba      	movs	r2, #186	; 0xba
    10d2:	0052      	lsls	r2, r2, #1
    10d4:	18ba      	adds	r2, r7, r2
    10d6:	6013      	str	r3, [r2, #0]
    10d8:	e022      	b.n	1120 <_Z10drawBitmapPcss+0x600>
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	000132c4 	.word	0x000132c4
    10e0:	20000e94 	.word	0x20000e94
    10e4:	fffffe6a 	.word	0xfffffe6a
    10e8:	fffffe68 	.word	0xfffffe68
    10ec:	200002bc 	.word	0x200002bc
						else
						// Bitmap is stored top-to-bottom
						pos = bmpImageoffset + (row + by1) * rowSize;
    10f0:	23c2      	movs	r3, #194	; 0xc2
    10f2:	005b      	lsls	r3, r3, #1
    10f4:	18fb      	adds	r3, r7, r3
    10f6:	681a      	ldr	r2, [r3, #0]
    10f8:	23bc      	movs	r3, #188	; 0xbc
    10fa:	005b      	lsls	r3, r3, #1
    10fc:	18fb      	adds	r3, r7, r3
    10fe:	681b      	ldr	r3, [r3, #0]
    1100:	18d3      	adds	r3, r2, r3
    1102:	001a      	movs	r2, r3
    1104:	23b0      	movs	r3, #176	; 0xb0
    1106:	005b      	lsls	r3, r3, #1
    1108:	18fb      	adds	r3, r7, r3
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	435a      	muls	r2, r3
    110e:	23b6      	movs	r3, #182	; 0xb6
    1110:	005b      	lsls	r3, r3, #1
    1112:	18fb      	adds	r3, r7, r3
    1114:	681b      	ldr	r3, [r3, #0]
    1116:	18d3      	adds	r3, r2, r3
    1118:	22ba      	movs	r2, #186	; 0xba
    111a:	0052      	lsls	r2, r2, #1
    111c:	18ba      	adds	r2, r7, r2
    111e:	6013      	str	r3, [r2, #0]
						pos += bx1 * 3; // Factor in starting column (bx1)
    1120:	23be      	movs	r3, #190	; 0xbe
    1122:	005b      	lsls	r3, r3, #1
    1124:	18fb      	adds	r3, r7, r3
    1126:	681a      	ldr	r2, [r3, #0]
    1128:	0013      	movs	r3, r2
    112a:	005b      	lsls	r3, r3, #1
    112c:	189b      	adds	r3, r3, r2
    112e:	001a      	movs	r2, r3
    1130:	23ba      	movs	r3, #186	; 0xba
    1132:	005b      	lsls	r3, r3, #1
    1134:	18fb      	adds	r3, r7, r3
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	189b      	adds	r3, r3, r2
    113a:	22ba      	movs	r2, #186	; 0xba
    113c:	0052      	lsls	r2, r2, #1
    113e:	18ba      	adds	r2, r7, r2
    1140:	6013      	str	r3, [r2, #0]
						if (bmpFile.position() != pos) { // Need seek?
    1142:	2386      	movs	r3, #134	; 0x86
    1144:	005b      	lsls	r3, r3, #1
    1146:	18fb      	adds	r3, r7, r3
    1148:	0018      	movs	r0, r3
    114a:	f007 fcea 	bl	8b22 <_ZN5SDLib4File8positionEv>
    114e:	0002      	movs	r2, r0
    1150:	23ba      	movs	r3, #186	; 0xba
    1152:	005b      	lsls	r3, r3, #1
    1154:	18fb      	adds	r3, r7, r3
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	1ad3      	subs	r3, r2, r3
    115a:	1e5a      	subs	r2, r3, #1
    115c:	4193      	sbcs	r3, r2
    115e:	b2db      	uxtb	r3, r3
    1160:	2b00      	cmp	r3, #0
    1162:	d017      	beq.n	1194 <_Z10drawBitmapPcss+0x674>
							tftDisplay.endWrite(); // End tftDisplay transaction
    1164:	4b73      	ldr	r3, [pc, #460]	; (1334 <_Z10drawBitmapPcss+0x814>)
    1166:	0018      	movs	r0, r3
    1168:	f006 ff48 	bl	7ffc <_ZN16Adafruit_ILI93418endWriteEv>
							bmpFile.seek(pos);
    116c:	23ba      	movs	r3, #186	; 0xba
    116e:	005b      	lsls	r3, r3, #1
    1170:	18fb      	adds	r3, r7, r3
    1172:	681a      	ldr	r2, [r3, #0]
    1174:	2386      	movs	r3, #134	; 0x86
    1176:	005b      	lsls	r3, r3, #1
    1178:	18fb      	adds	r3, r7, r3
    117a:	0011      	movs	r1, r2
    117c:	0018      	movs	r0, r3
    117e:	f007 fcb6 	bl	8aee <_ZN5SDLib4File4seekEm>
							buffidx = sizeof(sdbuffer); // Force buffer reload
    1182:	2394      	movs	r3, #148	; 0x94
    1184:	33ff      	adds	r3, #255	; 0xff
    1186:	18fb      	adds	r3, r7, r3
    1188:	22ff      	movs	r2, #255	; 0xff
    118a:	701a      	strb	r2, [r3, #0]
							tftDisplay.startWrite(); // Start new tftDisplay transaction
    118c:	4b69      	ldr	r3, [pc, #420]	; (1334 <_Z10drawBitmapPcss+0x814>)
    118e:	0018      	movs	r0, r3
    1190:	f006 ff0c 	bl	7fac <_ZN16Adafruit_ILI934110startWriteEv>
						}
						for (col = 0; col < w; col++) { // For each pixel...
    1194:	2300      	movs	r3, #0
    1196:	22c0      	movs	r2, #192	; 0xc0
    1198:	0052      	lsls	r2, r2, #1
    119a:	18ba      	adds	r2, r7, r2
    119c:	6013      	str	r3, [r2, #0]
    119e:	23c0      	movs	r3, #192	; 0xc0
    11a0:	005b      	lsls	r3, r3, #1
    11a2:	18fb      	adds	r3, r7, r3
    11a4:	681a      	ldr	r2, [r3, #0]
    11a6:	23c6      	movs	r3, #198	; 0xc6
    11a8:	005b      	lsls	r3, r3, #1
    11aa:	18fb      	adds	r3, r7, r3
    11ac:	681b      	ldr	r3, [r3, #0]
    11ae:	429a      	cmp	r2, r3
    11b0:	da7b      	bge.n	12aa <_Z10drawBitmapPcss+0x78a>
							// Time to read more pixel data?
							if (buffidx >= sizeof(sdbuffer)) { // Indeed
    11b2:	2394      	movs	r3, #148	; 0x94
    11b4:	33ff      	adds	r3, #255	; 0xff
    11b6:	18fb      	adds	r3, r7, r3
    11b8:	781b      	ldrb	r3, [r3, #0]
    11ba:	2bff      	cmp	r3, #255	; 0xff
    11bc:	d115      	bne.n	11ea <_Z10drawBitmapPcss+0x6ca>
								tftDisplay.endWrite(); // End tftDisplay transaction
    11be:	4b5d      	ldr	r3, [pc, #372]	; (1334 <_Z10drawBitmapPcss+0x814>)
    11c0:	0018      	movs	r0, r3
    11c2:	f006 ff1b 	bl	7ffc <_ZN16Adafruit_ILI93418endWriteEv>
								bmpFile.read(sdbuffer, sizeof(sdbuffer));
    11c6:	230c      	movs	r3, #12
    11c8:	18f9      	adds	r1, r7, r3
    11ca:	2386      	movs	r3, #134	; 0x86
    11cc:	005b      	lsls	r3, r3, #1
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	22ff      	movs	r2, #255	; 0xff
    11d2:	0018      	movs	r0, r3
    11d4:	f007 fc3d 	bl	8a52 <_ZN5SDLib4File4readEPvt>
								buffidx = 0; // Set index to beginning
    11d8:	2394      	movs	r3, #148	; 0x94
    11da:	33ff      	adds	r3, #255	; 0xff
    11dc:	18fb      	adds	r3, r7, r3
    11de:	2200      	movs	r2, #0
    11e0:	701a      	strb	r2, [r3, #0]
								tftDisplay.startWrite(); // Start new tftDisplay transaction
    11e2:	4b54      	ldr	r3, [pc, #336]	; (1334 <_Z10drawBitmapPcss+0x814>)
    11e4:	0018      	movs	r0, r3
    11e6:	f006 fee1 	bl	7fac <_ZN16Adafruit_ILI934110startWriteEv>
							}
							// Convert pixel from BMP to tftDisplay format, push to display
							b = sdbuffer[buffidx++];
    11ea:	2394      	movs	r3, #148	; 0x94
    11ec:	33ff      	adds	r3, #255	; 0xff
    11ee:	18fb      	adds	r3, r7, r3
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	2294      	movs	r2, #148	; 0x94
    11f4:	32ff      	adds	r2, #255	; 0xff
    11f6:	18ba      	adds	r2, r7, r2
    11f8:	1c59      	adds	r1, r3, #1
    11fa:	7011      	strb	r1, [r2, #0]
    11fc:	0019      	movs	r1, r3
    11fe:	2358      	movs	r3, #88	; 0x58
    1200:	33ff      	adds	r3, #255	; 0xff
    1202:	18fb      	adds	r3, r7, r3
    1204:	4a4c      	ldr	r2, [pc, #304]	; (1338 <_Z10drawBitmapPcss+0x818>)
    1206:	20cc      	movs	r0, #204	; 0xcc
    1208:	0040      	lsls	r0, r0, #1
    120a:	4684      	mov	ip, r0
    120c:	44bc      	add	ip, r7
    120e:	4462      	add	r2, ip
    1210:	5c52      	ldrb	r2, [r2, r1]
    1212:	701a      	strb	r2, [r3, #0]
							g = sdbuffer[buffidx++];
    1214:	2394      	movs	r3, #148	; 0x94
    1216:	33ff      	adds	r3, #255	; 0xff
    1218:	18fb      	adds	r3, r7, r3
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	2294      	movs	r2, #148	; 0x94
    121e:	32ff      	adds	r2, #255	; 0xff
    1220:	18ba      	adds	r2, r7, r2
    1222:	1c59      	adds	r1, r3, #1
    1224:	7011      	strb	r1, [r2, #0]
    1226:	0019      	movs	r1, r3
    1228:	23ab      	movs	r3, #171	; 0xab
    122a:	005b      	lsls	r3, r3, #1
    122c:	18fb      	adds	r3, r7, r3
    122e:	4a42      	ldr	r2, [pc, #264]	; (1338 <_Z10drawBitmapPcss+0x818>)
    1230:	20cc      	movs	r0, #204	; 0xcc
    1232:	0040      	lsls	r0, r0, #1
    1234:	4684      	mov	ip, r0
    1236:	44bc      	add	ip, r7
    1238:	4462      	add	r2, ip
    123a:	5c52      	ldrb	r2, [r2, r1]
    123c:	701a      	strb	r2, [r3, #0]
							r = sdbuffer[buffidx++];
    123e:	2394      	movs	r3, #148	; 0x94
    1240:	33ff      	adds	r3, #255	; 0xff
    1242:	18fb      	adds	r3, r7, r3
    1244:	781b      	ldrb	r3, [r3, #0]
    1246:	2294      	movs	r2, #148	; 0x94
    1248:	32ff      	adds	r2, #255	; 0xff
    124a:	18ba      	adds	r2, r7, r2
    124c:	1c59      	adds	r1, r3, #1
    124e:	7011      	strb	r1, [r2, #0]
    1250:	0019      	movs	r1, r3
    1252:	2356      	movs	r3, #86	; 0x56
    1254:	33ff      	adds	r3, #255	; 0xff
    1256:	18fb      	adds	r3, r7, r3
    1258:	4a37      	ldr	r2, [pc, #220]	; (1338 <_Z10drawBitmapPcss+0x818>)
    125a:	20cc      	movs	r0, #204	; 0xcc
    125c:	0040      	lsls	r0, r0, #1
    125e:	4684      	mov	ip, r0
    1260:	44bc      	add	ip, r7
    1262:	4462      	add	r2, ip
    1264:	5c52      	ldrb	r2, [r2, r1]
    1266:	701a      	strb	r2, [r3, #0]
							tftDisplay.writePixel(tftDisplay.color565(r, g, b));
    1268:	2358      	movs	r3, #88	; 0x58
    126a:	33ff      	adds	r3, #255	; 0xff
    126c:	18fb      	adds	r3, r7, r3
    126e:	781c      	ldrb	r4, [r3, #0]
    1270:	23ab      	movs	r3, #171	; 0xab
    1272:	005b      	lsls	r3, r3, #1
    1274:	18fb      	adds	r3, r7, r3
    1276:	781a      	ldrb	r2, [r3, #0]
    1278:	2356      	movs	r3, #86	; 0x56
    127a:	33ff      	adds	r3, #255	; 0xff
    127c:	18fb      	adds	r3, r7, r3
    127e:	7819      	ldrb	r1, [r3, #0]
    1280:	482c      	ldr	r0, [pc, #176]	; (1334 <_Z10drawBitmapPcss+0x814>)
    1282:	0023      	movs	r3, r4
    1284:	f006 fa82 	bl	778c <_ZN16Adafruit_ILI93418color565Ehhh>
    1288:	0003      	movs	r3, r0
    128a:	001a      	movs	r2, r3
    128c:	4b29      	ldr	r3, [pc, #164]	; (1334 <_Z10drawBitmapPcss+0x814>)
    128e:	0011      	movs	r1, r2
    1290:	0018      	movs	r0, r3
    1292:	f006 ffbd 	bl	8210 <_ZN16Adafruit_ILI934110writePixelEt>
						for (col = 0; col < w; col++) { // For each pixel...
    1296:	23c0      	movs	r3, #192	; 0xc0
    1298:	005b      	lsls	r3, r3, #1
    129a:	18fb      	adds	r3, r7, r3
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	3301      	adds	r3, #1
    12a0:	22c0      	movs	r2, #192	; 0xc0
    12a2:	0052      	lsls	r2, r2, #1
    12a4:	18ba      	adds	r2, r7, r2
    12a6:	6013      	str	r3, [r2, #0]
    12a8:	e779      	b.n	119e <_Z10drawBitmapPcss+0x67e>
					for (row = 0; row < h; row++) { // For each scanline...
    12aa:	23c2      	movs	r3, #194	; 0xc2
    12ac:	005b      	lsls	r3, r3, #1
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	3301      	adds	r3, #1
    12b4:	22c2      	movs	r2, #194	; 0xc2
    12b6:	0052      	lsls	r2, r2, #1
    12b8:	18ba      	adds	r2, r7, r2
    12ba:	6013      	str	r3, [r2, #0]
    12bc:	e6dd      	b.n	107a <_Z10drawBitmapPcss+0x55a>
						} // end pixel
					} // end scanline
					tftDisplay.endWrite(); // End last tftDisplay transaction
    12be:	4b1d      	ldr	r3, [pc, #116]	; (1334 <_Z10drawBitmapPcss+0x814>)
    12c0:	0018      	movs	r0, r3
    12c2:	f006 fe9b 	bl	7ffc <_ZN16Adafruit_ILI93418endWriteEv>
				} // end onscreen
				Serial.print(F("Loaded in "));
    12c6:	4a1d      	ldr	r2, [pc, #116]	; (133c <_Z10drawBitmapPcss+0x81c>)
    12c8:	4b1d      	ldr	r3, [pc, #116]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12ca:	0011      	movs	r1, r2
    12cc:	0018      	movs	r0, r3
    12ce:	f001 fe88 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
				Serial.print(millis() - startTime);
    12d2:	f001 fdcb 	bl	2e6c <millis>
    12d6:	0002      	movs	r2, r0
    12d8:	23b8      	movs	r3, #184	; 0xb8
    12da:	005b      	lsls	r3, r3, #1
    12dc:	18fb      	adds	r3, r7, r3
    12de:	681b      	ldr	r3, [r3, #0]
    12e0:	1ad1      	subs	r1, r2, r3
    12e2:	4b17      	ldr	r3, [pc, #92]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12e4:	220a      	movs	r2, #10
    12e6:	0018      	movs	r0, r3
    12e8:	f001 ff17 	bl	311a <_ZN5Print5printEmi>
				Serial.println(F(" ms"));
    12ec:	4a15      	ldr	r2, [pc, #84]	; (1344 <_Z10drawBitmapPcss+0x824>)
    12ee:	4b14      	ldr	r3, [pc, #80]	; (1340 <_Z10drawBitmapPcss+0x820>)
    12f0:	0011      	movs	r1, r2
    12f2:	0018      	movs	r0, r3
    12f4:	f001 ff30 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
			} // end goodBmp
		}
	}

	bmpFile.close();
    12f8:	2386      	movs	r3, #134	; 0x86
    12fa:	005b      	lsls	r3, r3, #1
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	0018      	movs	r0, r3
    1300:	f007 fc38 	bl	8b74 <_ZN5SDLib4File5closeEv>
	if (!goodBmp)
    1304:	23c9      	movs	r3, #201	; 0xc9
    1306:	005b      	lsls	r3, r3, #1
    1308:	18fb      	adds	r3, r7, r3
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	2201      	movs	r2, #1
    130e:	4053      	eors	r3, r2
    1310:	b2db      	uxtb	r3, r3
    1312:	2b00      	cmp	r3, #0
    1314:	d005      	beq.n	1322 <_Z10drawBitmapPcss+0x802>
	Serial.println(F("BMP format not recognized or SD not mounted"));
    1316:	4a0c      	ldr	r2, [pc, #48]	; (1348 <_Z10drawBitmapPcss+0x828>)
    1318:	4b09      	ldr	r3, [pc, #36]	; (1340 <_Z10drawBitmapPcss+0x820>)
    131a:	0011      	movs	r1, r2
    131c:	0018      	movs	r0, r3
    131e:	f001 ff1b 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Serial.println();
    1322:	4b07      	ldr	r3, [pc, #28]	; (1340 <_Z10drawBitmapPcss+0x820>)
    1324:	0018      	movs	r0, r3
    1326:	f001 ff31 	bl	318c <_ZN5Print7printlnEv>
    132a:	e000      	b.n	132e <_Z10drawBitmapPcss+0x80e>
	if ((x >= tftDisplay.width()) || (y >= tftDisplay.height())) return;
    132c:	46c0      	nop			; (mov r8, r8)
}
    132e:	46bd      	mov	sp, r7
    1330:	b067      	add	sp, #412	; 0x19c
    1332:	bd90      	pop	{r4, r7, pc}
    1334:	200002bc 	.word	0x200002bc
    1338:	fffffe74 	.word	0xfffffe74
    133c:	000132d4 	.word	0x000132d4
    1340:	20000e94 	.word	0x20000e94
    1344:	000132e0 	.word	0x000132e0
    1348:	000132e4 	.word	0x000132e4

0000134c <_Z8getPointv>:

TS_Point getPoint() {
    134c:	b580      	push	{r7, lr}
    134e:	b084      	sub	sp, #16
    1350:	af02      	add	r7, sp, #8
    1352:	6078      	str	r0, [r7, #4]
	TS_Point point = touchScreen.getPoint();
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	4915      	ldr	r1, [pc, #84]	; (13ac <_Z8getPointv+0x60>)
    1358:	2200      	movs	r2, #0
    135a:	0018      	movs	r0, r3
    135c:	f005 ffdf 	bl	731e <_ZN15Adafruit_FT62068getPointEh>
	 // Map point so that coordinate system starts from top left
	point.x = map(point.x, 0, 240, 240, 0);
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	2200      	movs	r2, #0
    1364:	5e9b      	ldrsh	r3, [r3, r2]
    1366:	0018      	movs	r0, r3
    1368:	2300      	movs	r3, #0
    136a:	9300      	str	r3, [sp, #0]
    136c:	23f0      	movs	r3, #240	; 0xf0
    136e:	22f0      	movs	r2, #240	; 0xf0
    1370:	2100      	movs	r1, #0
    1372:	f005 fd8b 	bl	6e8c <_Z3maplllll>
    1376:	0003      	movs	r3, r0
    1378:	b21a      	sxth	r2, r3
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	801a      	strh	r2, [r3, #0]
	point.y = map(point.y, 0, 320, 320, 0);
    137e:	687b      	ldr	r3, [r7, #4]
    1380:	2202      	movs	r2, #2
    1382:	5e9b      	ldrsh	r3, [r3, r2]
    1384:	0018      	movs	r0, r3
    1386:	23a0      	movs	r3, #160	; 0xa0
    1388:	0059      	lsls	r1, r3, #1
    138a:	23a0      	movs	r3, #160	; 0xa0
    138c:	005a      	lsls	r2, r3, #1
    138e:	2300      	movs	r3, #0
    1390:	9300      	str	r3, [sp, #0]
    1392:	000b      	movs	r3, r1
    1394:	2100      	movs	r1, #0
    1396:	f005 fd79 	bl	6e8c <_Z3maplllll>
    139a:	0003      	movs	r3, r0
    139c:	b21a      	sxth	r2, r3
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	805a      	strh	r2, [r3, #2]
	return point;
    13a2:	46c0      	nop			; (mov r8, r8)
}
    13a4:	6878      	ldr	r0, [r7, #4]
    13a6:	46bd      	mov	sp, r7
    13a8:	b002      	add	sp, #8
    13aa:	bd80      	pop	{r7, pc}
    13ac:	20000320 	.word	0x20000320

000013b0 <_Z7addMoveh8TS_Point5State>:

State addMove(uint8_t square, TS_Point marker, State player) {
    13b0:	b590      	push	{r4, r7, lr}
    13b2:	b087      	sub	sp, #28
    13b4:	af00      	add	r7, sp, #0
    13b6:	0004      	movs	r4, r0
    13b8:	1d38      	adds	r0, r7, #4
    13ba:	6001      	str	r1, [r0, #0]
    13bc:	6042      	str	r2, [r0, #4]
    13be:	0019      	movs	r1, r3
    13c0:	230f      	movs	r3, #15
    13c2:	18fb      	adds	r3, r7, r3
    13c4:	1c22      	adds	r2, r4, #0
    13c6:	701a      	strb	r2, [r3, #0]
    13c8:	230e      	movs	r3, #14
    13ca:	18fb      	adds	r3, r7, r3
    13cc:	1c0a      	adds	r2, r1, #0
    13ce:	701a      	strb	r2, [r3, #0]
	char bitmap;
	Serial.print(F("addMove, player = "));
    13d0:	4a32      	ldr	r2, [pc, #200]	; (149c <_Z7addMoveh8TS_Point5State+0xec>)
    13d2:	4b33      	ldr	r3, [pc, #204]	; (14a0 <_Z7addMoveh8TS_Point5State+0xf0>)
    13d4:	0011      	movs	r1, r2
    13d6:	0018      	movs	r0, r3
    13d8:	f001 fe03 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(player);
    13dc:	230e      	movs	r3, #14
    13de:	18fb      	adds	r3, r7, r3
    13e0:	7819      	ldrb	r1, [r3, #0]
    13e2:	4b2f      	ldr	r3, [pc, #188]	; (14a0 <_Z7addMoveh8TS_Point5State+0xf0>)
    13e4:	220a      	movs	r2, #10
    13e6:	0018      	movs	r0, r3
    13e8:	f001 ff39 	bl	325e <_ZN5Print7printlnEii>
	if (player == cross) {
    13ec:	230e      	movs	r3, #14
    13ee:	18fb      	adds	r3, r7, r3
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	2b02      	cmp	r3, #2
    13f4:	d125      	bne.n	1442 <_Z7addMoveh8TS_Point5State+0x92>
		Serial.println(F("this might be a cross"));
    13f6:	4a2b      	ldr	r2, [pc, #172]	; (14a4 <_Z7addMoveh8TS_Point5State+0xf4>)
    13f8:	4b29      	ldr	r3, [pc, #164]	; (14a0 <_Z7addMoveh8TS_Point5State+0xf0>)
    13fa:	0011      	movs	r1, r2
    13fc:	0018      	movs	r0, r3
    13fe:	f001 feab 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if (square % 2) {
    1402:	230f      	movs	r3, #15
    1404:	18fb      	adds	r3, r7, r3
    1406:	781b      	ldrb	r3, [r3, #0]
    1408:	2201      	movs	r2, #1
    140a:	4013      	ands	r3, r2
    140c:	d004      	beq.n	1418 <_Z7addMoveh8TS_Point5State+0x68>
			bitmap = 'j';
    140e:	2317      	movs	r3, #23
    1410:	18fb      	adds	r3, r7, r3
    1412:	226a      	movs	r2, #106	; 0x6a
    1414:	701a      	strb	r2, [r3, #0]
    1416:	e003      	b.n	1420 <_Z7addMoveh8TS_Point5State+0x70>
			} else {
			bitmap = 'k';
    1418:	2317      	movs	r3, #23
    141a:	18fb      	adds	r3, r7, r3
    141c:	226b      	movs	r2, #107	; 0x6b
    141e:	701a      	strb	r2, [r3, #0]
		}
		drawBitmap(bitmap, marker.x, marker.y);
    1420:	1d3b      	adds	r3, r7, #4
    1422:	2100      	movs	r1, #0
    1424:	5e59      	ldrsh	r1, [r3, r1]
    1426:	1d3b      	adds	r3, r7, #4
    1428:	2202      	movs	r2, #2
    142a:	5e9a      	ldrsh	r2, [r3, r2]
    142c:	2317      	movs	r3, #23
    142e:	18fb      	adds	r3, r7, r3
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	0018      	movs	r0, r3
    1434:	f7fe ff16 	bl	264 <_Z10drawBitmapcss>
		// Change players
		player = nought;
    1438:	230e      	movs	r3, #14
    143a:	18fb      	adds	r3, r7, r3
    143c:	2201      	movs	r2, #1
    143e:	701a      	strb	r2, [r3, #0]
    1440:	e024      	b.n	148c <_Z7addMoveh8TS_Point5State+0xdc>
		} else {
		Serial.println(F("this might be a nought"));
    1442:	4a19      	ldr	r2, [pc, #100]	; (14a8 <_Z7addMoveh8TS_Point5State+0xf8>)
    1444:	4b16      	ldr	r3, [pc, #88]	; (14a0 <_Z7addMoveh8TS_Point5State+0xf0>)
    1446:	0011      	movs	r1, r2
    1448:	0018      	movs	r0, r3
    144a:	f001 fe85 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
		if (square % 2) {
    144e:	230f      	movs	r3, #15
    1450:	18fb      	adds	r3, r7, r3
    1452:	781b      	ldrb	r3, [r3, #0]
    1454:	2201      	movs	r2, #1
    1456:	4013      	ands	r3, r2
    1458:	d004      	beq.n	1464 <_Z7addMoveh8TS_Point5State+0xb4>
			bitmap = 'h';
    145a:	2317      	movs	r3, #23
    145c:	18fb      	adds	r3, r7, r3
    145e:	2268      	movs	r2, #104	; 0x68
    1460:	701a      	strb	r2, [r3, #0]
    1462:	e003      	b.n	146c <_Z7addMoveh8TS_Point5State+0xbc>
			} else {
			bitmap = 'i';
    1464:	2317      	movs	r3, #23
    1466:	18fb      	adds	r3, r7, r3
    1468:	2269      	movs	r2, #105	; 0x69
    146a:	701a      	strb	r2, [r3, #0]
		}
		drawBitmap(bitmap, marker.x, marker.y);
    146c:	1d3b      	adds	r3, r7, #4
    146e:	2100      	movs	r1, #0
    1470:	5e59      	ldrsh	r1, [r3, r1]
    1472:	1d3b      	adds	r3, r7, #4
    1474:	2202      	movs	r2, #2
    1476:	5e9a      	ldrsh	r2, [r3, r2]
    1478:	2317      	movs	r3, #23
    147a:	18fb      	adds	r3, r7, r3
    147c:	781b      	ldrb	r3, [r3, #0]
    147e:	0018      	movs	r0, r3
    1480:	f7fe fef0 	bl	264 <_Z10drawBitmapcss>
		// Change players
		player = cross;
    1484:	230e      	movs	r3, #14
    1486:	18fb      	adds	r3, r7, r3
    1488:	2202      	movs	r2, #2
    148a:	701a      	strb	r2, [r3, #0]
	}
	return player;
    148c:	230e      	movs	r3, #14
    148e:	18fb      	adds	r3, r7, r3
    1490:	781b      	ldrb	r3, [r3, #0]
}
    1492:	0018      	movs	r0, r3
    1494:	46bd      	mov	sp, r7
    1496:	b007      	add	sp, #28
    1498:	bd90      	pop	{r4, r7, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	00013310 	.word	0x00013310
    14a0:	20000e94 	.word	0x20000e94
    14a4:	00013324 	.word	0x00013324
    14a8:	0001333c 	.word	0x0001333c

000014ac <_Z11updateScoreii>:

void updateScore(int noughtsScore, int crossesScore) {
    14ac:	b590      	push	{r4, r7, lr}
    14ae:	b08b      	sub	sp, #44	; 0x2c
    14b0:	af00      	add	r7, sp, #0
    14b2:	6078      	str	r0, [r7, #4]
    14b4:	6039      	str	r1, [r7, #0]
	String s = (String) noughtsScore;
    14b6:	6879      	ldr	r1, [r7, #4]
    14b8:	230c      	movs	r3, #12
    14ba:	18fb      	adds	r3, r7, r3
    14bc:	220a      	movs	r2, #10
    14be:	0018      	movs	r0, r3
    14c0:	f005 fd4b 	bl	6f5a <_ZN6StringC1Eih>
	char newScore = s.charAt(0);
    14c4:	2327      	movs	r3, #39	; 0x27
    14c6:	18fc      	adds	r4, r7, r3
    14c8:	230c      	movs	r3, #12
    14ca:	18fb      	adds	r3, r7, r3
    14cc:	2100      	movs	r1, #0
    14ce:	0018      	movs	r0, r3
    14d0:	f005 fe90 	bl	71f4 <_ZNK6String6charAtEj>
    14d4:	0003      	movs	r3, r0
    14d6:	7023      	strb	r3, [r4, #0]
	drawBitmap(newScore, 95, 29);
    14d8:	2327      	movs	r3, #39	; 0x27
    14da:	18fb      	adds	r3, r7, r3
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	221d      	movs	r2, #29
    14e0:	215f      	movs	r1, #95	; 0x5f
    14e2:	0018      	movs	r0, r3
    14e4:	f7fe febe 	bl	264 <_Z10drawBitmapcss>
	s = (String) crossesScore;
    14e8:	6839      	ldr	r1, [r7, #0]
    14ea:	2318      	movs	r3, #24
    14ec:	18fb      	adds	r3, r7, r3
    14ee:	220a      	movs	r2, #10
    14f0:	0018      	movs	r0, r3
    14f2:	f005 fd32 	bl	6f5a <_ZN6StringC1Eih>
    14f6:	2318      	movs	r3, #24
    14f8:	18fa      	adds	r2, r7, r3
    14fa:	230c      	movs	r3, #12
    14fc:	18fb      	adds	r3, r7, r3
    14fe:	0011      	movs	r1, r2
    1500:	0018      	movs	r0, r3
    1502:	f005 fe47 	bl	7194 <_ZN6StringaSEOS_>
    1506:	2318      	movs	r3, #24
    1508:	18fb      	adds	r3, r7, r3
    150a:	0018      	movs	r0, r3
    150c:	f005 fd44 	bl	6f98 <_ZN6StringD1Ev>
	newScore = s.charAt(0);
    1510:	2327      	movs	r3, #39	; 0x27
    1512:	18fc      	adds	r4, r7, r3
    1514:	230c      	movs	r3, #12
    1516:	18fb      	adds	r3, r7, r3
    1518:	2100      	movs	r1, #0
    151a:	0018      	movs	r0, r3
    151c:	f005 fe6a 	bl	71f4 <_ZNK6String6charAtEj>
    1520:	0003      	movs	r3, r0
    1522:	7023      	strb	r3, [r4, #0]
	drawBitmap(newScore, 132, 28);
    1524:	2327      	movs	r3, #39	; 0x27
    1526:	18fb      	adds	r3, r7, r3
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	221c      	movs	r2, #28
    152c:	2184      	movs	r1, #132	; 0x84
    152e:	0018      	movs	r0, r3
    1530:	f7fe fe98 	bl	264 <_Z10drawBitmapcss>
	String s = (String) noughtsScore;
    1534:	230c      	movs	r3, #12
    1536:	18fb      	adds	r3, r7, r3
    1538:	0018      	movs	r0, r3
    153a:	f005 fd2d 	bl	6f98 <_ZN6StringD1Ev>
}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	46bd      	mov	sp, r7
    1542:	b00b      	add	sp, #44	; 0x2c
    1544:	bd90      	pop	{r4, r7, pc}

00001546 <_Z9getSquare8TS_Point>:

uint8_t getSquare(TS_Point point) {
    1546:	b580      	push	{r7, lr}
    1548:	b084      	sub	sp, #16
    154a:	af00      	add	r7, sp, #0
    154c:	003b      	movs	r3, r7
    154e:	6018      	str	r0, [r3, #0]
    1550:	6059      	str	r1, [r3, #4]
	uint8_t square = 255;
    1552:	230f      	movs	r3, #15
    1554:	18fb      	adds	r3, r7, r3
    1556:	22ff      	movs	r2, #255	; 0xff
    1558:	701a      	strb	r2, [r3, #0]
	if (point.y > 79 && point.y < 161) {
    155a:	003b      	movs	r3, r7
    155c:	2202      	movs	r2, #2
    155e:	5e9b      	ldrsh	r3, [r3, r2]
    1560:	2b4f      	cmp	r3, #79	; 0x4f
    1562:	dd22      	ble.n	15aa <_Z9getSquare8TS_Point+0x64>
    1564:	003b      	movs	r3, r7
    1566:	2202      	movs	r2, #2
    1568:	5e9b      	ldrsh	r3, [r3, r2]
    156a:	2ba0      	cmp	r3, #160	; 0xa0
    156c:	dc1d      	bgt.n	15aa <_Z9getSquare8TS_Point+0x64>
		if (point.x < 81) {
    156e:	003b      	movs	r3, r7
    1570:	2200      	movs	r2, #0
    1572:	5e9b      	ldrsh	r3, [r3, r2]
    1574:	2b50      	cmp	r3, #80	; 0x50
    1576:	dc04      	bgt.n	1582 <_Z9getSquare8TS_Point+0x3c>
			square = 0;
    1578:	230f      	movs	r3, #15
    157a:	18fb      	adds	r3, r7, r3
    157c:	2200      	movs	r2, #0
    157e:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1580:	e05e      	b.n	1640 <_Z9getSquare8TS_Point+0xfa>
			} else if (point.x < 161) {
    1582:	003b      	movs	r3, r7
    1584:	2200      	movs	r2, #0
    1586:	5e9b      	ldrsh	r3, [r3, r2]
    1588:	2ba0      	cmp	r3, #160	; 0xa0
    158a:	dc04      	bgt.n	1596 <_Z9getSquare8TS_Point+0x50>
			square = 1;
    158c:	230f      	movs	r3, #15
    158e:	18fb      	adds	r3, r7, r3
    1590:	2201      	movs	r2, #1
    1592:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    1594:	e054      	b.n	1640 <_Z9getSquare8TS_Point+0xfa>
			} else if (point.x < 240) {
    1596:	003b      	movs	r3, r7
    1598:	2200      	movs	r2, #0
    159a:	5e9b      	ldrsh	r3, [r3, r2]
    159c:	2bef      	cmp	r3, #239	; 0xef
    159e:	dc4f      	bgt.n	1640 <_Z9getSquare8TS_Point+0xfa>
			square = 2;
    15a0:	230f      	movs	r3, #15
    15a2:	18fb      	adds	r3, r7, r3
    15a4:	2202      	movs	r2, #2
    15a6:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15a8:	e04a      	b.n	1640 <_Z9getSquare8TS_Point+0xfa>
		}

		} else if (point.y > 160 && point.y < 241) {
    15aa:	003b      	movs	r3, r7
    15ac:	2202      	movs	r2, #2
    15ae:	5e9b      	ldrsh	r3, [r3, r2]
    15b0:	2ba0      	cmp	r3, #160	; 0xa0
    15b2:	dd22      	ble.n	15fa <_Z9getSquare8TS_Point+0xb4>
    15b4:	003b      	movs	r3, r7
    15b6:	2202      	movs	r2, #2
    15b8:	5e9b      	ldrsh	r3, [r3, r2]
    15ba:	2bf0      	cmp	r3, #240	; 0xf0
    15bc:	dc1d      	bgt.n	15fa <_Z9getSquare8TS_Point+0xb4>
		if (point.x < 81) {
    15be:	003b      	movs	r3, r7
    15c0:	2200      	movs	r2, #0
    15c2:	5e9b      	ldrsh	r3, [r3, r2]
    15c4:	2b50      	cmp	r3, #80	; 0x50
    15c6:	dc04      	bgt.n	15d2 <_Z9getSquare8TS_Point+0x8c>
			square = 3;
    15c8:	230f      	movs	r3, #15
    15ca:	18fb      	adds	r3, r7, r3
    15cc:	2203      	movs	r2, #3
    15ce:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15d0:	e038      	b.n	1644 <_Z9getSquare8TS_Point+0xfe>
			} else if (point.x < 161) {
    15d2:	003b      	movs	r3, r7
    15d4:	2200      	movs	r2, #0
    15d6:	5e9b      	ldrsh	r3, [r3, r2]
    15d8:	2ba0      	cmp	r3, #160	; 0xa0
    15da:	dc04      	bgt.n	15e6 <_Z9getSquare8TS_Point+0xa0>
			square = 4;
    15dc:	230f      	movs	r3, #15
    15de:	18fb      	adds	r3, r7, r3
    15e0:	2204      	movs	r2, #4
    15e2:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15e4:	e02e      	b.n	1644 <_Z9getSquare8TS_Point+0xfe>
			} else if (point.x < 240) {
    15e6:	003b      	movs	r3, r7
    15e8:	2200      	movs	r2, #0
    15ea:	5e9b      	ldrsh	r3, [r3, r2]
    15ec:	2bef      	cmp	r3, #239	; 0xef
    15ee:	dc29      	bgt.n	1644 <_Z9getSquare8TS_Point+0xfe>
			square = 5;
    15f0:	230f      	movs	r3, #15
    15f2:	18fb      	adds	r3, r7, r3
    15f4:	2205      	movs	r2, #5
    15f6:	701a      	strb	r2, [r3, #0]
		if (point.x < 81) {
    15f8:	e024      	b.n	1644 <_Z9getSquare8TS_Point+0xfe>
		}

		} else if (point.y > 240) {
    15fa:	003b      	movs	r3, r7
    15fc:	2202      	movs	r2, #2
    15fe:	5e9b      	ldrsh	r3, [r3, r2]
    1600:	2bf0      	cmp	r3, #240	; 0xf0
    1602:	dd20      	ble.n	1646 <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1604:	003b      	movs	r3, r7
    1606:	2200      	movs	r2, #0
    1608:	5e9b      	ldrsh	r3, [r3, r2]
    160a:	2b50      	cmp	r3, #80	; 0x50
    160c:	dc04      	bgt.n	1618 <_Z9getSquare8TS_Point+0xd2>
			square = 6;
    160e:	230f      	movs	r3, #15
    1610:	18fb      	adds	r3, r7, r3
    1612:	2206      	movs	r2, #6
    1614:	701a      	strb	r2, [r3, #0]
    1616:	e016      	b.n	1646 <_Z9getSquare8TS_Point+0x100>
			} else if (point.x < 161) {
    1618:	003b      	movs	r3, r7
    161a:	2200      	movs	r2, #0
    161c:	5e9b      	ldrsh	r3, [r3, r2]
    161e:	2ba0      	cmp	r3, #160	; 0xa0
    1620:	dc04      	bgt.n	162c <_Z9getSquare8TS_Point+0xe6>
			square = 7;
    1622:	230f      	movs	r3, #15
    1624:	18fb      	adds	r3, r7, r3
    1626:	2207      	movs	r2, #7
    1628:	701a      	strb	r2, [r3, #0]
    162a:	e00c      	b.n	1646 <_Z9getSquare8TS_Point+0x100>
			} else if (point.x < 240) {
    162c:	003b      	movs	r3, r7
    162e:	2200      	movs	r2, #0
    1630:	5e9b      	ldrsh	r3, [r3, r2]
    1632:	2bef      	cmp	r3, #239	; 0xef
    1634:	dc07      	bgt.n	1646 <_Z9getSquare8TS_Point+0x100>
			square = 8;
    1636:	230f      	movs	r3, #15
    1638:	18fb      	adds	r3, r7, r3
    163a:	2208      	movs	r2, #8
    163c:	701a      	strb	r2, [r3, #0]
    163e:	e002      	b.n	1646 <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1640:	46c0      	nop			; (mov r8, r8)
    1642:	e000      	b.n	1646 <_Z9getSquare8TS_Point+0x100>
		if (point.x < 81) {
    1644:	46c0      	nop			; (mov r8, r8)
		}
	}
	return square;
    1646:	230f      	movs	r3, #15
    1648:	18fb      	adds	r3, r7, r3
    164a:	781b      	ldrb	r3, [r3, #0]
}
    164c:	0018      	movs	r0, r3
    164e:	46bd      	mov	sp, r7
    1650:	b004      	add	sp, #16
    1652:	bd80      	pop	{r7, pc}

00001654 <_Z18getCounterPositionh>:

TS_Point getCounterPosition(uint8_t square) {
    1654:	b580      	push	{r7, lr}
    1656:	b082      	sub	sp, #8
    1658:	af00      	add	r7, sp, #0
    165a:	6078      	str	r0, [r7, #4]
    165c:	000a      	movs	r2, r1
    165e:	1cfb      	adds	r3, r7, #3
    1660:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	0018      	movs	r0, r3
    1666:	f005 ffef 	bl	7648 <_ZN8TS_PointC1Ev>
	if (square == 0 || square == 3 || square == 6) {
    166a:	1cfb      	adds	r3, r7, #3
    166c:	781b      	ldrb	r3, [r3, #0]
    166e:	2b00      	cmp	r3, #0
    1670:	d007      	beq.n	1682 <_Z18getCounterPositionh+0x2e>
    1672:	1cfb      	adds	r3, r7, #3
    1674:	781b      	ldrb	r3, [r3, #0]
    1676:	2b03      	cmp	r3, #3
    1678:	d003      	beq.n	1682 <_Z18getCounterPositionh+0x2e>
    167a:	1cfb      	adds	r3, r7, #3
    167c:	781b      	ldrb	r3, [r3, #0]
    167e:	2b06      	cmp	r3, #6
    1680:	d103      	bne.n	168a <_Z18getCounterPositionh+0x36>
		counterPos.x = 0;
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	2200      	movs	r2, #0
    1686:	801a      	strh	r2, [r3, #0]
    1688:	e012      	b.n	16b0 <_Z18getCounterPositionh+0x5c>
	} else if (square == 1 || square == 4 || square == 7) {
    168a:	1cfb      	adds	r3, r7, #3
    168c:	781b      	ldrb	r3, [r3, #0]
    168e:	2b01      	cmp	r3, #1
    1690:	d007      	beq.n	16a2 <_Z18getCounterPositionh+0x4e>
    1692:	1cfb      	adds	r3, r7, #3
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	2b04      	cmp	r3, #4
    1698:	d003      	beq.n	16a2 <_Z18getCounterPositionh+0x4e>
    169a:	1cfb      	adds	r3, r7, #3
    169c:	781b      	ldrb	r3, [r3, #0]
    169e:	2b07      	cmp	r3, #7
    16a0:	d103      	bne.n	16aa <_Z18getCounterPositionh+0x56>
		counterPos.x = 80;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	2250      	movs	r2, #80	; 0x50
    16a6:	801a      	strh	r2, [r3, #0]
    16a8:	e002      	b.n	16b0 <_Z18getCounterPositionh+0x5c>
	} else {
		counterPos.x = 160;
    16aa:	687b      	ldr	r3, [r7, #4]
    16ac:	22a0      	movs	r2, #160	; 0xa0
    16ae:	801a      	strh	r2, [r3, #0]
	}
	
	if (square == 0 || square == 1 || square == 2) {
    16b0:	1cfb      	adds	r3, r7, #3
    16b2:	781b      	ldrb	r3, [r3, #0]
    16b4:	2b00      	cmp	r3, #0
    16b6:	d007      	beq.n	16c8 <_Z18getCounterPositionh+0x74>
    16b8:	1cfb      	adds	r3, r7, #3
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	2b01      	cmp	r3, #1
    16be:	d003      	beq.n	16c8 <_Z18getCounterPositionh+0x74>
    16c0:	1cfb      	adds	r3, r7, #3
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	2b02      	cmp	r3, #2
    16c6:	d103      	bne.n	16d0 <_Z18getCounterPositionh+0x7c>
		counterPos.y = 80;
    16c8:	687b      	ldr	r3, [r7, #4]
    16ca:	2250      	movs	r2, #80	; 0x50
    16cc:	805a      	strh	r2, [r3, #2]
    16ce:	e012      	b.n	16f6 <_Z18getCounterPositionh+0xa2>
	} else if (square == 3 || square == 4 || square == 5) {
    16d0:	1cfb      	adds	r3, r7, #3
    16d2:	781b      	ldrb	r3, [r3, #0]
    16d4:	2b03      	cmp	r3, #3
    16d6:	d007      	beq.n	16e8 <_Z18getCounterPositionh+0x94>
    16d8:	1cfb      	adds	r3, r7, #3
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	2b04      	cmp	r3, #4
    16de:	d003      	beq.n	16e8 <_Z18getCounterPositionh+0x94>
    16e0:	1cfb      	adds	r3, r7, #3
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	2b05      	cmp	r3, #5
    16e6:	d103      	bne.n	16f0 <_Z18getCounterPositionh+0x9c>
		counterPos.y = 160;
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	22a0      	movs	r2, #160	; 0xa0
    16ec:	805a      	strh	r2, [r3, #2]
    16ee:	e002      	b.n	16f6 <_Z18getCounterPositionh+0xa2>
	} else {
		counterPos.y = 240;
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	22f0      	movs	r2, #240	; 0xf0
    16f4:	805a      	strh	r2, [r3, #2]
	}
	return counterPos;
    16f6:	46c0      	nop			; (mov r8, r8)
}
    16f8:	6878      	ldr	r0, [r7, #4]
    16fa:	46bd      	mov	sp, r7
    16fc:	b002      	add	sp, #8
    16fe:	bd80      	pop	{r7, pc}

00001700 <_Z23getSmallCounterPositionhh>:

TS_Point getSmallCounterPosition(uint8_t square, uint8_t turn) {
    1700:	b590      	push	{r4, r7, lr}
    1702:	b085      	sub	sp, #20
    1704:	af00      	add	r7, sp, #0
    1706:	60f8      	str	r0, [r7, #12]
    1708:	0008      	movs	r0, r1
    170a:	0011      	movs	r1, r2
    170c:	230b      	movs	r3, #11
    170e:	18fb      	adds	r3, r7, r3
    1710:	1c02      	adds	r2, r0, #0
    1712:	701a      	strb	r2, [r3, #0]
    1714:	230a      	movs	r3, #10
    1716:	18fb      	adds	r3, r7, r3
    1718:	1c0a      	adds	r2, r1, #0
    171a:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    171c:	68fb      	ldr	r3, [r7, #12]
    171e:	0018      	movs	r0, r3
    1720:	f005 ff92 	bl	7648 <_ZN8TS_PointC1Ev>
	
	counterPos = getCounterPosition(square);
    1724:	68fc      	ldr	r4, [r7, #12]
    1726:	003a      	movs	r2, r7
    1728:	230b      	movs	r3, #11
    172a:	18fb      	adds	r3, r7, r3
    172c:	781b      	ldrb	r3, [r3, #0]
    172e:	0019      	movs	r1, r3
    1730:	0010      	movs	r0, r2
    1732:	f7ff ff8f 	bl	1654 <_Z18getCounterPositionh>
    1736:	003b      	movs	r3, r7
    1738:	0020      	movs	r0, r4
    173a:	0019      	movs	r1, r3
    173c:	2306      	movs	r3, #6
    173e:	001a      	movs	r2, r3
    1740:	f00f f8a1 	bl	10886 <memcpy>
	
	if (turn == 1 || turn == 4 || turn == 7) {
    1744:	230a      	movs	r3, #10
    1746:	18fb      	adds	r3, r7, r3
    1748:	781b      	ldrb	r3, [r3, #0]
    174a:	2b01      	cmp	r3, #1
    174c:	d009      	beq.n	1762 <_Z23getSmallCounterPositionhh+0x62>
    174e:	230a      	movs	r3, #10
    1750:	18fb      	adds	r3, r7, r3
    1752:	781b      	ldrb	r3, [r3, #0]
    1754:	2b04      	cmp	r3, #4
    1756:	d004      	beq.n	1762 <_Z23getSmallCounterPositionhh+0x62>
    1758:	230a      	movs	r3, #10
    175a:	18fb      	adds	r3, r7, r3
    175c:	781b      	ldrb	r3, [r3, #0]
    175e:	2b07      	cmp	r3, #7
    1760:	d109      	bne.n	1776 <_Z23getSmallCounterPositionhh+0x76>
		counterPos.x += 1;
    1762:	68fb      	ldr	r3, [r7, #12]
    1764:	2200      	movs	r2, #0
    1766:	5e9b      	ldrsh	r3, [r3, r2]
    1768:	b29b      	uxth	r3, r3
    176a:	3301      	adds	r3, #1
    176c:	b29b      	uxth	r3, r3
    176e:	b21a      	sxth	r2, r3
    1770:	68fb      	ldr	r3, [r7, #12]
    1772:	801a      	strh	r2, [r3, #0]
    1774:	e021      	b.n	17ba <_Z23getSmallCounterPositionhh+0xba>
		} else if (turn == 2 || turn == 5 || turn == 8) {
    1776:	230a      	movs	r3, #10
    1778:	18fb      	adds	r3, r7, r3
    177a:	781b      	ldrb	r3, [r3, #0]
    177c:	2b02      	cmp	r3, #2
    177e:	d009      	beq.n	1794 <_Z23getSmallCounterPositionhh+0x94>
    1780:	230a      	movs	r3, #10
    1782:	18fb      	adds	r3, r7, r3
    1784:	781b      	ldrb	r3, [r3, #0]
    1786:	2b05      	cmp	r3, #5
    1788:	d004      	beq.n	1794 <_Z23getSmallCounterPositionhh+0x94>
    178a:	230a      	movs	r3, #10
    178c:	18fb      	adds	r3, r7, r3
    178e:	781b      	ldrb	r3, [r3, #0]
    1790:	2b08      	cmp	r3, #8
    1792:	d109      	bne.n	17a8 <_Z23getSmallCounterPositionhh+0xa8>
		counterPos.x += 27;
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	2200      	movs	r2, #0
    1798:	5e9b      	ldrsh	r3, [r3, r2]
    179a:	b29b      	uxth	r3, r3
    179c:	331b      	adds	r3, #27
    179e:	b29b      	uxth	r3, r3
    17a0:	b21a      	sxth	r2, r3
    17a2:	68fb      	ldr	r3, [r7, #12]
    17a4:	801a      	strh	r2, [r3, #0]
    17a6:	e008      	b.n	17ba <_Z23getSmallCounterPositionhh+0xba>
		} else {
		counterPos.x += 53;
    17a8:	68fb      	ldr	r3, [r7, #12]
    17aa:	2200      	movs	r2, #0
    17ac:	5e9b      	ldrsh	r3, [r3, r2]
    17ae:	b29b      	uxth	r3, r3
    17b0:	3335      	adds	r3, #53	; 0x35
    17b2:	b29b      	uxth	r3, r3
    17b4:	b21a      	sxth	r2, r3
    17b6:	68fb      	ldr	r3, [r7, #12]
    17b8:	801a      	strh	r2, [r3, #0]
	}
		
	if (turn == 1 || turn == 2 || turn == 3) {
    17ba:	230a      	movs	r3, #10
    17bc:	18fb      	adds	r3, r7, r3
    17be:	781b      	ldrb	r3, [r3, #0]
    17c0:	2b01      	cmp	r3, #1
    17c2:	d009      	beq.n	17d8 <_Z23getSmallCounterPositionhh+0xd8>
    17c4:	230a      	movs	r3, #10
    17c6:	18fb      	adds	r3, r7, r3
    17c8:	781b      	ldrb	r3, [r3, #0]
    17ca:	2b02      	cmp	r3, #2
    17cc:	d004      	beq.n	17d8 <_Z23getSmallCounterPositionhh+0xd8>
    17ce:	230a      	movs	r3, #10
    17d0:	18fb      	adds	r3, r7, r3
    17d2:	781b      	ldrb	r3, [r3, #0]
    17d4:	2b03      	cmp	r3, #3
    17d6:	d109      	bne.n	17ec <_Z23getSmallCounterPositionhh+0xec>
		counterPos.y += 1;
    17d8:	68fb      	ldr	r3, [r7, #12]
    17da:	2202      	movs	r2, #2
    17dc:	5e9b      	ldrsh	r3, [r3, r2]
    17de:	b29b      	uxth	r3, r3
    17e0:	3301      	adds	r3, #1
    17e2:	b29b      	uxth	r3, r3
    17e4:	b21a      	sxth	r2, r3
    17e6:	68fb      	ldr	r3, [r7, #12]
    17e8:	805a      	strh	r2, [r3, #2]
    17ea:	e021      	b.n	1830 <_Z23getSmallCounterPositionhh+0x130>
		} else if (turn == 4 || turn == 5 || turn == 6) {
    17ec:	230a      	movs	r3, #10
    17ee:	18fb      	adds	r3, r7, r3
    17f0:	781b      	ldrb	r3, [r3, #0]
    17f2:	2b04      	cmp	r3, #4
    17f4:	d009      	beq.n	180a <_Z23getSmallCounterPositionhh+0x10a>
    17f6:	230a      	movs	r3, #10
    17f8:	18fb      	adds	r3, r7, r3
    17fa:	781b      	ldrb	r3, [r3, #0]
    17fc:	2b05      	cmp	r3, #5
    17fe:	d004      	beq.n	180a <_Z23getSmallCounterPositionhh+0x10a>
    1800:	230a      	movs	r3, #10
    1802:	18fb      	adds	r3, r7, r3
    1804:	781b      	ldrb	r3, [r3, #0]
    1806:	2b06      	cmp	r3, #6
    1808:	d109      	bne.n	181e <_Z23getSmallCounterPositionhh+0x11e>
		counterPos.y += 27;
    180a:	68fb      	ldr	r3, [r7, #12]
    180c:	2202      	movs	r2, #2
    180e:	5e9b      	ldrsh	r3, [r3, r2]
    1810:	b29b      	uxth	r3, r3
    1812:	331b      	adds	r3, #27
    1814:	b29b      	uxth	r3, r3
    1816:	b21a      	sxth	r2, r3
    1818:	68fb      	ldr	r3, [r7, #12]
    181a:	805a      	strh	r2, [r3, #2]
    181c:	e008      	b.n	1830 <_Z23getSmallCounterPositionhh+0x130>
		} else {
		counterPos.y += 53;
    181e:	68fb      	ldr	r3, [r7, #12]
    1820:	2202      	movs	r2, #2
    1822:	5e9b      	ldrsh	r3, [r3, r2]
    1824:	b29b      	uxth	r3, r3
    1826:	3335      	adds	r3, #53	; 0x35
    1828:	b29b      	uxth	r3, r3
    182a:	b21a      	sxth	r2, r3
    182c:	68fb      	ldr	r3, [r7, #12]
    182e:	805a      	strh	r2, [r3, #2]
	}
	
	return counterPos;
    1830:	46c0      	nop			; (mov r8, r8)
}
    1832:	68f8      	ldr	r0, [r7, #12]
    1834:	46bd      	mov	sp, r7
    1836:	b005      	add	sp, #20
    1838:	bd90      	pop	{r4, r7, pc}

0000183a <_Z16drawSmallCounterhh>:

void drawSmallCounter(uint8_t square, uint8_t turn) {
    183a:	b590      	push	{r4, r7, lr}
    183c:	b08d      	sub	sp, #52	; 0x34
    183e:	af00      	add	r7, sp, #0
    1840:	0002      	movs	r2, r0
    1842:	230f      	movs	r3, #15
    1844:	18fb      	adds	r3, r7, r3
    1846:	701a      	strb	r2, [r3, #0]
    1848:	230e      	movs	r3, #14
    184a:	18fb      	adds	r3, r7, r3
    184c:	1c0a      	adds	r2, r1, #0
    184e:	701a      	strb	r2, [r3, #0]
	TS_Point counterPos;
    1850:	2318      	movs	r3, #24
    1852:	18fb      	adds	r3, r7, r3
    1854:	0018      	movs	r0, r3
    1856:	f005 fef7 	bl	7648 <_ZN8TS_PointC1Ev>
	
	counterPos = getSmallCounterPosition(square, turn);
    185a:	2318      	movs	r3, #24
    185c:	18fc      	adds	r4, r7, r3
    185e:	0038      	movs	r0, r7
    1860:	230e      	movs	r3, #14
    1862:	18fb      	adds	r3, r7, r3
    1864:	781a      	ldrb	r2, [r3, #0]
    1866:	230f      	movs	r3, #15
    1868:	18fb      	adds	r3, r7, r3
    186a:	781b      	ldrb	r3, [r3, #0]
    186c:	0019      	movs	r1, r3
    186e:	f7ff ff47 	bl	1700 <_Z23getSmallCounterPositionhh>
    1872:	003b      	movs	r3, r7
    1874:	0020      	movs	r0, r4
    1876:	0019      	movs	r1, r3
    1878:	2306      	movs	r3, #6
    187a:	001a      	movs	r2, r3
    187c:	f00f f803 	bl	10886 <memcpy>
	
	char bg;
	if (square % 2) {
    1880:	230f      	movs	r3, #15
    1882:	18fb      	adds	r3, r7, r3
    1884:	781b      	ldrb	r3, [r3, #0]
    1886:	2201      	movs	r2, #1
    1888:	4013      	ands	r3, r2
    188a:	d004      	beq.n	1896 <_Z16drawSmallCounterhh+0x5c>
		bg = 'b';
    188c:	232f      	movs	r3, #47	; 0x2f
    188e:	18fb      	adds	r3, r7, r3
    1890:	2262      	movs	r2, #98	; 0x62
    1892:	701a      	strb	r2, [r3, #0]
    1894:	e003      	b.n	189e <_Z16drawSmallCounterhh+0x64>
	} else {
		bg = 'w';
    1896:	232f      	movs	r3, #47	; 0x2f
    1898:	18fb      	adds	r3, r7, r3
    189a:	2277      	movs	r2, #119	; 0x77
    189c:	701a      	strb	r2, [r3, #0]
	}
	
	char bitmap[8] = {bg, 'c', ((String) turn).charAt(0), '.', 'b', 'm', 'p'};
    189e:	2310      	movs	r3, #16
    18a0:	18fb      	adds	r3, r7, r3
    18a2:	0018      	movs	r0, r3
    18a4:	2308      	movs	r3, #8
    18a6:	001a      	movs	r2, r3
    18a8:	2100      	movs	r1, #0
    18aa:	f00e fff5 	bl	10898 <memset>
    18ae:	2310      	movs	r3, #16
    18b0:	18fb      	adds	r3, r7, r3
    18b2:	2263      	movs	r2, #99	; 0x63
    18b4:	705a      	strb	r2, [r3, #1]
    18b6:	2310      	movs	r3, #16
    18b8:	18fb      	adds	r3, r7, r3
    18ba:	222e      	movs	r2, #46	; 0x2e
    18bc:	70da      	strb	r2, [r3, #3]
    18be:	2310      	movs	r3, #16
    18c0:	18fb      	adds	r3, r7, r3
    18c2:	2262      	movs	r2, #98	; 0x62
    18c4:	711a      	strb	r2, [r3, #4]
    18c6:	2310      	movs	r3, #16
    18c8:	18fb      	adds	r3, r7, r3
    18ca:	226d      	movs	r2, #109	; 0x6d
    18cc:	715a      	strb	r2, [r3, #5]
    18ce:	2310      	movs	r3, #16
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	2270      	movs	r2, #112	; 0x70
    18d4:	719a      	strb	r2, [r3, #6]
    18d6:	2310      	movs	r3, #16
    18d8:	18fb      	adds	r3, r7, r3
    18da:	222f      	movs	r2, #47	; 0x2f
    18dc:	18ba      	adds	r2, r7, r2
    18de:	7812      	ldrb	r2, [r2, #0]
    18e0:	701a      	strb	r2, [r3, #0]
    18e2:	230e      	movs	r3, #14
    18e4:	18fb      	adds	r3, r7, r3
    18e6:	7819      	ldrb	r1, [r3, #0]
    18e8:	2320      	movs	r3, #32
    18ea:	18fb      	adds	r3, r7, r3
    18ec:	220a      	movs	r2, #10
    18ee:	0018      	movs	r0, r3
    18f0:	f005 fb0e 	bl	6f10 <_ZN6StringC1Ehh>
    18f4:	2320      	movs	r3, #32
    18f6:	18fb      	adds	r3, r7, r3
    18f8:	2100      	movs	r1, #0
    18fa:	0018      	movs	r0, r3
    18fc:	f005 fc7a 	bl	71f4 <_ZNK6String6charAtEj>
    1900:	0003      	movs	r3, r0
    1902:	001a      	movs	r2, r3
    1904:	2310      	movs	r3, #16
    1906:	18fb      	adds	r3, r7, r3
    1908:	709a      	strb	r2, [r3, #2]
    190a:	2320      	movs	r3, #32
    190c:	18fb      	adds	r3, r7, r3
    190e:	0018      	movs	r0, r3
    1910:	f005 fb42 	bl	6f98 <_ZN6StringD1Ev>
	drawBitmap(bitmap, counterPos.x, counterPos.y);
    1914:	2318      	movs	r3, #24
    1916:	18fb      	adds	r3, r7, r3
    1918:	2100      	movs	r1, #0
    191a:	5e59      	ldrsh	r1, [r3, r1]
    191c:	2318      	movs	r3, #24
    191e:	18fb      	adds	r3, r7, r3
    1920:	2202      	movs	r2, #2
    1922:	5e9a      	ldrsh	r2, [r3, r2]
    1924:	2310      	movs	r3, #16
    1926:	18fb      	adds	r3, r7, r3
    1928:	0018      	movs	r0, r3
    192a:	f7ff f8f9 	bl	b20 <_Z10drawBitmapPcss>
}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	46bd      	mov	sp, r7
    1932:	b00d      	add	sp, #52	; 0x34
    1934:	bd90      	pop	{r4, r7, pc}

00001936 <_Z10findCirclePA11_hhhhPh>:

void findCircle(uint8_t boardState[9][11], uint8_t x, uint8_t y, uint8_t origX, uint8_t subscripts[9]) {
    1936:	b590      	push	{r4, r7, lr}
    1938:	b087      	sub	sp, #28
    193a:	af02      	add	r7, sp, #8
    193c:	6078      	str	r0, [r7, #4]
    193e:	000c      	movs	r4, r1
    1940:	0010      	movs	r0, r2
    1942:	0019      	movs	r1, r3
    1944:	1cfb      	adds	r3, r7, #3
    1946:	1c22      	adds	r2, r4, #0
    1948:	701a      	strb	r2, [r3, #0]
    194a:	1cbb      	adds	r3, r7, #2
    194c:	1c02      	adds	r2, r0, #0
    194e:	701a      	strb	r2, [r3, #0]
    1950:	1c7b      	adds	r3, r7, #1
    1952:	1c0a      	adds	r2, r1, #0
    1954:	701a      	strb	r2, [r3, #0]
	// For each of the possible small counters in this square
	for (uint8_t i = 0; i < 9; i++) {
    1956:	230f      	movs	r3, #15
    1958:	18fb      	adds	r3, r7, r3
    195a:	2200      	movs	r2, #0
    195c:	701a      	strb	r2, [r3, #0]
    195e:	230f      	movs	r3, #15
    1960:	18fb      	adds	r3, r7, r3
    1962:	781b      	ldrb	r3, [r3, #0]
    1964:	2b08      	cmp	r3, #8
    1966:	dd00      	ble.n	196a <_Z10findCirclePA11_hhhhPh+0x34>
    1968:	e090      	b.n	1a8c <_Z10findCirclePA11_hhhhPh+0x156>
		// Find any counters that exist and aren't the current counter
		if (boardState[x][i + 2] != 0 && i + 2 != y) {
    196a:	1cfb      	adds	r3, r7, #3
    196c:	781a      	ldrb	r2, [r3, #0]
    196e:	0013      	movs	r3, r2
    1970:	009b      	lsls	r3, r3, #2
    1972:	189b      	adds	r3, r3, r2
    1974:	005b      	lsls	r3, r3, #1
    1976:	189b      	adds	r3, r3, r2
    1978:	687a      	ldr	r2, [r7, #4]
    197a:	18d2      	adds	r2, r2, r3
    197c:	230f      	movs	r3, #15
    197e:	18fb      	adds	r3, r7, r3
    1980:	781b      	ldrb	r3, [r3, #0]
    1982:	3302      	adds	r3, #2
    1984:	5cd3      	ldrb	r3, [r2, r3]
    1986:	2b00      	cmp	r3, #0
    1988:	d100      	bne.n	198c <_Z10findCirclePA11_hhhhPh+0x56>
    198a:	e077      	b.n	1a7c <_Z10findCirclePA11_hhhhPh+0x146>
    198c:	230f      	movs	r3, #15
    198e:	18fb      	adds	r3, r7, r3
    1990:	781b      	ldrb	r3, [r3, #0]
    1992:	1c9a      	adds	r2, r3, #2
    1994:	1cbb      	adds	r3, r7, #2
    1996:	781b      	ldrb	r3, [r3, #0]
    1998:	429a      	cmp	r2, r3
    199a:	d100      	bne.n	199e <_Z10findCirclePA11_hhhhPh+0x68>
    199c:	e06e      	b.n	1a7c <_Z10findCirclePA11_hhhhPh+0x146>
			// Find the pair counter of the one found
			// By going through all the squares
			for (uint8_t j = 0; j < 9; j++) {
    199e:	230e      	movs	r3, #14
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	2200      	movs	r2, #0
    19a4:	701a      	strb	r2, [r3, #0]
    19a6:	230e      	movs	r3, #14
    19a8:	18fb      	adds	r3, r7, r3
    19aa:	781b      	ldrb	r3, [r3, #0]
    19ac:	2b08      	cmp	r3, #8
    19ae:	dc65      	bgt.n	1a7c <_Z10findCirclePA11_hhhhPh+0x146>
				// And finding a counter of the same subscript that isn't the current one
				if (boardState[j][i + 2] != 0 && j != x) {
    19b0:	230e      	movs	r3, #14
    19b2:	18fb      	adds	r3, r7, r3
    19b4:	781a      	ldrb	r2, [r3, #0]
    19b6:	0013      	movs	r3, r2
    19b8:	009b      	lsls	r3, r3, #2
    19ba:	189b      	adds	r3, r3, r2
    19bc:	005b      	lsls	r3, r3, #1
    19be:	189b      	adds	r3, r3, r2
    19c0:	687a      	ldr	r2, [r7, #4]
    19c2:	18d2      	adds	r2, r2, r3
    19c4:	230f      	movs	r3, #15
    19c6:	18fb      	adds	r3, r7, r3
    19c8:	781b      	ldrb	r3, [r3, #0]
    19ca:	3302      	adds	r3, #2
    19cc:	5cd3      	ldrb	r3, [r2, r3]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d04c      	beq.n	1a6c <_Z10findCirclePA11_hhhhPh+0x136>
    19d2:	230e      	movs	r3, #14
    19d4:	18fa      	adds	r2, r7, r3
    19d6:	1cfb      	adds	r3, r7, #3
    19d8:	7812      	ldrb	r2, [r2, #0]
    19da:	781b      	ldrb	r3, [r3, #0]
    19dc:	429a      	cmp	r2, r3
    19de:	d045      	beq.n	1a6c <_Z10findCirclePA11_hhhhPh+0x136>
					// Check if this is the original square
					if (j == origX) {
    19e0:	230e      	movs	r3, #14
    19e2:	18fa      	adds	r2, r7, r3
    19e4:	1c7b      	adds	r3, r7, #1
    19e6:	7812      	ldrb	r2, [r2, #0]
    19e8:	781b      	ldrb	r3, [r3, #0]
    19ea:	429a      	cmp	r2, r3
    19ec:	d106      	bne.n	19fc <_Z10findCirclePA11_hhhhPh+0xc6>
						subscripts[0] = y - 1;
    19ee:	1cbb      	adds	r3, r7, #2
    19f0:	781b      	ldrb	r3, [r3, #0]
    19f2:	3b01      	subs	r3, #1
    19f4:	b2da      	uxtb	r2, r3
    19f6:	6a3b      	ldr	r3, [r7, #32]
    19f8:	701a      	strb	r2, [r3, #0]
						return;
    19fa:	e047      	b.n	1a8c <_Z10findCirclePA11_hhhhPh+0x156>
					}
					// If not repeat for the next counter
					findCircle(boardState, j, i + 2, origX, subscripts);
    19fc:	230f      	movs	r3, #15
    19fe:	18fb      	adds	r3, r7, r3
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	3302      	adds	r3, #2
    1a04:	b2da      	uxtb	r2, r3
    1a06:	1c7b      	adds	r3, r7, #1
    1a08:	781c      	ldrb	r4, [r3, #0]
    1a0a:	230e      	movs	r3, #14
    1a0c:	18fb      	adds	r3, r7, r3
    1a0e:	7819      	ldrb	r1, [r3, #0]
    1a10:	6878      	ldr	r0, [r7, #4]
    1a12:	6a3b      	ldr	r3, [r7, #32]
    1a14:	9300      	str	r3, [sp, #0]
    1a16:	0023      	movs	r3, r4
    1a18:	f7ff ff8d 	bl	1936 <_Z10findCirclePA11_hhhhPh>
					// When the function returns, check if it found the original square
					if (subscripts[0] != 255) {
    1a1c:	6a3b      	ldr	r3, [r7, #32]
    1a1e:	781b      	ldrb	r3, [r3, #0]
    1a20:	2bff      	cmp	r3, #255	; 0xff
    1a22:	d023      	beq.n	1a6c <_Z10findCirclePA11_hhhhPh+0x136>
						// If it did add this point on the end
						for (uint8_t k = 0; k < 9; k++) {
    1a24:	230d      	movs	r3, #13
    1a26:	18fb      	adds	r3, r7, r3
    1a28:	2200      	movs	r2, #0
    1a2a:	701a      	strb	r2, [r3, #0]
    1a2c:	230d      	movs	r3, #13
    1a2e:	18fb      	adds	r3, r7, r3
    1a30:	781b      	ldrb	r3, [r3, #0]
    1a32:	2b08      	cmp	r3, #8
    1a34:	dc1a      	bgt.n	1a6c <_Z10findCirclePA11_hhhhPh+0x136>
							if (subscripts[k] == 255) {
    1a36:	230d      	movs	r3, #13
    1a38:	18fb      	adds	r3, r7, r3
    1a3a:	781b      	ldrb	r3, [r3, #0]
    1a3c:	6a3a      	ldr	r2, [r7, #32]
    1a3e:	18d3      	adds	r3, r2, r3
    1a40:	781b      	ldrb	r3, [r3, #0]
    1a42:	2bff      	cmp	r3, #255	; 0xff
    1a44:	d10a      	bne.n	1a5c <_Z10findCirclePA11_hhhhPh+0x126>
								subscripts[k] = y - 1;
    1a46:	230d      	movs	r3, #13
    1a48:	18fb      	adds	r3, r7, r3
    1a4a:	781b      	ldrb	r3, [r3, #0]
    1a4c:	6a3a      	ldr	r2, [r7, #32]
    1a4e:	18d3      	adds	r3, r2, r3
    1a50:	1cba      	adds	r2, r7, #2
    1a52:	7812      	ldrb	r2, [r2, #0]
    1a54:	3a01      	subs	r2, #1
    1a56:	b2d2      	uxtb	r2, r2
    1a58:	701a      	strb	r2, [r3, #0]
								return;
    1a5a:	e017      	b.n	1a8c <_Z10findCirclePA11_hhhhPh+0x156>
						for (uint8_t k = 0; k < 9; k++) {
    1a5c:	230d      	movs	r3, #13
    1a5e:	18fb      	adds	r3, r7, r3
    1a60:	781a      	ldrb	r2, [r3, #0]
    1a62:	230d      	movs	r3, #13
    1a64:	18fb      	adds	r3, r7, r3
    1a66:	3201      	adds	r2, #1
    1a68:	701a      	strb	r2, [r3, #0]
    1a6a:	e7df      	b.n	1a2c <_Z10findCirclePA11_hhhhPh+0xf6>
			for (uint8_t j = 0; j < 9; j++) {
    1a6c:	230e      	movs	r3, #14
    1a6e:	18fb      	adds	r3, r7, r3
    1a70:	781a      	ldrb	r2, [r3, #0]
    1a72:	230e      	movs	r3, #14
    1a74:	18fb      	adds	r3, r7, r3
    1a76:	3201      	adds	r2, #1
    1a78:	701a      	strb	r2, [r3, #0]
    1a7a:	e794      	b.n	19a6 <_Z10findCirclePA11_hhhhPh+0x70>
	for (uint8_t i = 0; i < 9; i++) {
    1a7c:	230f      	movs	r3, #15
    1a7e:	18fb      	adds	r3, r7, r3
    1a80:	781a      	ldrb	r2, [r3, #0]
    1a82:	230f      	movs	r3, #15
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	3201      	adds	r2, #1
    1a88:	701a      	strb	r2, [r3, #0]
    1a8a:	e768      	b.n	195e <_Z10findCirclePA11_hhhhPh+0x28>
					}
				}
			}
		}
	}
}
    1a8c:	46bd      	mov	sp, r7
    1a8e:	b005      	add	sp, #20
    1a90:	bd90      	pop	{r4, r7, pc}

00001a92 <_Z21drawClassicalCountersPA11_hhhhh>:

void drawClassicalCounters(uint8_t boardState[9][11], uint8_t x, uint8_t y, uint8_t origX, uint8_t origY) {
    1a92:	b590      	push	{r4, r7, lr}
    1a94:	b08d      	sub	sp, #52	; 0x34
    1a96:	af02      	add	r7, sp, #8
    1a98:	6078      	str	r0, [r7, #4]
    1a9a:	000c      	movs	r4, r1
    1a9c:	0010      	movs	r0, r2
    1a9e:	0019      	movs	r1, r3
    1aa0:	1cfb      	adds	r3, r7, #3
    1aa2:	1c22      	adds	r2, r4, #0
    1aa4:	701a      	strb	r2, [r3, #0]
    1aa6:	1cbb      	adds	r3, r7, #2
    1aa8:	1c02      	adds	r2, r0, #0
    1aaa:	701a      	strb	r2, [r3, #0]
    1aac:	1c7b      	adds	r3, r7, #1
    1aae:	1c0a      	adds	r2, r1, #0
    1ab0:	701a      	strb	r2, [r3, #0]
	// Draw classic counter
	char bg;
	if (x % 2) {
    1ab2:	1cfb      	adds	r3, r7, #3
    1ab4:	781b      	ldrb	r3, [r3, #0]
    1ab6:	2201      	movs	r2, #1
    1ab8:	4013      	ands	r3, r2
    1aba:	d004      	beq.n	1ac6 <_Z21drawClassicalCountersPA11_hhhhh+0x34>
		bg = 'b';
    1abc:	2327      	movs	r3, #39	; 0x27
    1abe:	18fb      	adds	r3, r7, r3
    1ac0:	2262      	movs	r2, #98	; 0x62
    1ac2:	701a      	strb	r2, [r3, #0]
    1ac4:	e003      	b.n	1ace <_Z21drawClassicalCountersPA11_hhhhh+0x3c>
	} else {
		bg = 'w';
    1ac6:	2327      	movs	r3, #39	; 0x27
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	2277      	movs	r2, #119	; 0x77
    1acc:	701a      	strb	r2, [r3, #0]
	}
	uint8_t player;
	if (y % 2) {
    1ace:	1cbb      	adds	r3, r7, #2
    1ad0:	781b      	ldrb	r3, [r3, #0]
    1ad2:	2201      	movs	r2, #1
    1ad4:	4013      	ands	r3, r2
    1ad6:	d004      	beq.n	1ae2 <_Z21drawClassicalCountersPA11_hhhhh+0x50>
		player = 1;
    1ad8:	2326      	movs	r3, #38	; 0x26
    1ada:	18fb      	adds	r3, r7, r3
    1adc:	2201      	movs	r2, #1
    1ade:	701a      	strb	r2, [r3, #0]
    1ae0:	e003      	b.n	1aea <_Z21drawClassicalCountersPA11_hhhhh+0x58>
	} else {
		player = 2;
    1ae2:	2326      	movs	r3, #38	; 0x26
    1ae4:	18fb      	adds	r3, r7, r3
    1ae6:	2202      	movs	r2, #2
    1ae8:	701a      	strb	r2, [r3, #0]
	}
	char bitmap[] = {bg , 'b', ((String) (y - 1)).charAt(0), '.', 'b', 'm', 'p'};
    1aea:	2310      	movs	r3, #16
    1aec:	18fb      	adds	r3, r7, r3
    1aee:	0018      	movs	r0, r3
    1af0:	2307      	movs	r3, #7
    1af2:	001a      	movs	r2, r3
    1af4:	2100      	movs	r1, #0
    1af6:	f00e fecf 	bl	10898 <memset>
    1afa:	2310      	movs	r3, #16
    1afc:	18fb      	adds	r3, r7, r3
    1afe:	2262      	movs	r2, #98	; 0x62
    1b00:	705a      	strb	r2, [r3, #1]
    1b02:	2310      	movs	r3, #16
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	222e      	movs	r2, #46	; 0x2e
    1b08:	70da      	strb	r2, [r3, #3]
    1b0a:	2310      	movs	r3, #16
    1b0c:	18fb      	adds	r3, r7, r3
    1b0e:	2262      	movs	r2, #98	; 0x62
    1b10:	711a      	strb	r2, [r3, #4]
    1b12:	2310      	movs	r3, #16
    1b14:	18fb      	adds	r3, r7, r3
    1b16:	226d      	movs	r2, #109	; 0x6d
    1b18:	715a      	strb	r2, [r3, #5]
    1b1a:	2310      	movs	r3, #16
    1b1c:	18fb      	adds	r3, r7, r3
    1b1e:	2270      	movs	r2, #112	; 0x70
    1b20:	719a      	strb	r2, [r3, #6]
    1b22:	2310      	movs	r3, #16
    1b24:	18fb      	adds	r3, r7, r3
    1b26:	2227      	movs	r2, #39	; 0x27
    1b28:	18ba      	adds	r2, r7, r2
    1b2a:	7812      	ldrb	r2, [r2, #0]
    1b2c:	701a      	strb	r2, [r3, #0]
    1b2e:	1cbb      	adds	r3, r7, #2
    1b30:	781b      	ldrb	r3, [r3, #0]
    1b32:	1e59      	subs	r1, r3, #1
    1b34:	2318      	movs	r3, #24
    1b36:	18fb      	adds	r3, r7, r3
    1b38:	220a      	movs	r2, #10
    1b3a:	0018      	movs	r0, r3
    1b3c:	f005 fa0d 	bl	6f5a <_ZN6StringC1Eih>
    1b40:	2318      	movs	r3, #24
    1b42:	18fb      	adds	r3, r7, r3
    1b44:	2100      	movs	r1, #0
    1b46:	0018      	movs	r0, r3
    1b48:	f005 fb54 	bl	71f4 <_ZNK6String6charAtEj>
    1b4c:	0003      	movs	r3, r0
    1b4e:	001a      	movs	r2, r3
    1b50:	2310      	movs	r3, #16
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	709a      	strb	r2, [r3, #2]
    1b56:	2318      	movs	r3, #24
    1b58:	18fb      	adds	r3, r7, r3
    1b5a:	0018      	movs	r0, r3
    1b5c:	f005 fa1c 	bl	6f98 <_ZN6StringD1Ev>
	TS_Point counterPos = getCounterPosition(x);
    1b60:	2308      	movs	r3, #8
    1b62:	18fa      	adds	r2, r7, r3
    1b64:	1cfb      	adds	r3, r7, #3
    1b66:	781b      	ldrb	r3, [r3, #0]
    1b68:	0019      	movs	r1, r3
    1b6a:	0010      	movs	r0, r2
    1b6c:	f7ff fd72 	bl	1654 <_Z18getCounterPositionh>
	drawBitmap(bitmap, counterPos.x, counterPos.y);
    1b70:	2308      	movs	r3, #8
    1b72:	18fb      	adds	r3, r7, r3
    1b74:	2100      	movs	r1, #0
    1b76:	5e59      	ldrsh	r1, [r3, r1]
    1b78:	2308      	movs	r3, #8
    1b7a:	18fb      	adds	r3, r7, r3
    1b7c:	2202      	movs	r2, #2
    1b7e:	5e9a      	ldrsh	r2, [r3, r2]
    1b80:	2310      	movs	r3, #16
    1b82:	18fb      	adds	r3, r7, r3
    1b84:	0018      	movs	r0, r3
    1b86:	f7fe ffcb 	bl	b20 <_Z10drawBitmapPcss>
	boardState[x][0] = player;
    1b8a:	1cfb      	adds	r3, r7, #3
    1b8c:	781a      	ldrb	r2, [r3, #0]
    1b8e:	0013      	movs	r3, r2
    1b90:	009b      	lsls	r3, r3, #2
    1b92:	189b      	adds	r3, r3, r2
    1b94:	005b      	lsls	r3, r3, #1
    1b96:	189b      	adds	r3, r3, r2
    1b98:	687a      	ldr	r2, [r7, #4]
    1b9a:	18d3      	adds	r3, r2, r3
    1b9c:	2226      	movs	r2, #38	; 0x26
    1b9e:	18ba      	adds	r2, r7, r2
    1ba0:	7812      	ldrb	r2, [r2, #0]
    1ba2:	701a      	strb	r2, [r3, #0]
	boardState[x][1] = y;
    1ba4:	1cfb      	adds	r3, r7, #3
    1ba6:	781a      	ldrb	r2, [r3, #0]
    1ba8:	0013      	movs	r3, r2
    1baa:	009b      	lsls	r3, r3, #2
    1bac:	189b      	adds	r3, r3, r2
    1bae:	005b      	lsls	r3, r3, #1
    1bb0:	189b      	adds	r3, r3, r2
    1bb2:	687a      	ldr	r2, [r7, #4]
    1bb4:	18d3      	adds	r3, r2, r3
    1bb6:	1cba      	adds	r2, r7, #2
    1bb8:	7812      	ldrb	r2, [r2, #0]
    1bba:	705a      	strb	r2, [r3, #1]
	
	for (uint8_t i = 0; i < 9; i++) {
    1bbc:	2325      	movs	r3, #37	; 0x25
    1bbe:	18fb      	adds	r3, r7, r3
    1bc0:	2200      	movs	r2, #0
    1bc2:	701a      	strb	r2, [r3, #0]
    1bc4:	2325      	movs	r3, #37	; 0x25
    1bc6:	18fb      	adds	r3, r7, r3
    1bc8:	781b      	ldrb	r3, [r3, #0]
    1bca:	2b08      	cmp	r3, #8
    1bcc:	dc6a      	bgt.n	1ca4 <_Z21drawClassicalCountersPA11_hhhhh+0x212>
		if (boardState[x][i + 2] != 0 && i + 2 != y) {
    1bce:	1cfb      	adds	r3, r7, #3
    1bd0:	781a      	ldrb	r2, [r3, #0]
    1bd2:	0013      	movs	r3, r2
    1bd4:	009b      	lsls	r3, r3, #2
    1bd6:	189b      	adds	r3, r3, r2
    1bd8:	005b      	lsls	r3, r3, #1
    1bda:	189b      	adds	r3, r3, r2
    1bdc:	687a      	ldr	r2, [r7, #4]
    1bde:	18d2      	adds	r2, r2, r3
    1be0:	2325      	movs	r3, #37	; 0x25
    1be2:	18fb      	adds	r3, r7, r3
    1be4:	781b      	ldrb	r3, [r3, #0]
    1be6:	3302      	adds	r3, #2
    1be8:	5cd3      	ldrb	r3, [r2, r3]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d052      	beq.n	1c94 <_Z21drawClassicalCountersPA11_hhhhh+0x202>
    1bee:	2325      	movs	r3, #37	; 0x25
    1bf0:	18fb      	adds	r3, r7, r3
    1bf2:	781b      	ldrb	r3, [r3, #0]
    1bf4:	1c9a      	adds	r2, r3, #2
    1bf6:	1cbb      	adds	r3, r7, #2
    1bf8:	781b      	ldrb	r3, [r3, #0]
    1bfa:	429a      	cmp	r2, r3
    1bfc:	d04a      	beq.n	1c94 <_Z21drawClassicalCountersPA11_hhhhh+0x202>
			// Runs when another counter is found in the same square
			for (uint8_t j = 0; j < 9; j++) {
    1bfe:	2324      	movs	r3, #36	; 0x24
    1c00:	18fb      	adds	r3, r7, r3
    1c02:	2200      	movs	r2, #0
    1c04:	701a      	strb	r2, [r3, #0]
    1c06:	2324      	movs	r3, #36	; 0x24
    1c08:	18fb      	adds	r3, r7, r3
    1c0a:	781b      	ldrb	r3, [r3, #0]
    1c0c:	2b08      	cmp	r3, #8
    1c0e:	dc41      	bgt.n	1c94 <_Z21drawClassicalCountersPA11_hhhhh+0x202>
				if (boardState[j][i + 2] != 0 && j != x) {
    1c10:	2324      	movs	r3, #36	; 0x24
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	781a      	ldrb	r2, [r3, #0]
    1c16:	0013      	movs	r3, r2
    1c18:	009b      	lsls	r3, r3, #2
    1c1a:	189b      	adds	r3, r3, r2
    1c1c:	005b      	lsls	r3, r3, #1
    1c1e:	189b      	adds	r3, r3, r2
    1c20:	687a      	ldr	r2, [r7, #4]
    1c22:	18d2      	adds	r2, r2, r3
    1c24:	2325      	movs	r3, #37	; 0x25
    1c26:	18fb      	adds	r3, r7, r3
    1c28:	781b      	ldrb	r3, [r3, #0]
    1c2a:	3302      	adds	r3, #2
    1c2c:	5cd3      	ldrb	r3, [r2, r3]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d028      	beq.n	1c84 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
    1c32:	2324      	movs	r3, #36	; 0x24
    1c34:	18fa      	adds	r2, r7, r3
    1c36:	1cfb      	adds	r3, r7, #3
    1c38:	7812      	ldrb	r2, [r2, #0]
    1c3a:	781b      	ldrb	r3, [r3, #0]
    1c3c:	429a      	cmp	r2, r3
    1c3e:	d021      	beq.n	1c84 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
					// Runs when pair is found at [j][i + 2]
					if (j != origX && i + 2 != origY) {
    1c40:	2324      	movs	r3, #36	; 0x24
    1c42:	18fa      	adds	r2, r7, r3
    1c44:	1c7b      	adds	r3, r7, #1
    1c46:	7812      	ldrb	r2, [r2, #0]
    1c48:	781b      	ldrb	r3, [r3, #0]
    1c4a:	429a      	cmp	r2, r3
    1c4c:	d01a      	beq.n	1c84 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
    1c4e:	2325      	movs	r3, #37	; 0x25
    1c50:	18fb      	adds	r3, r7, r3
    1c52:	781b      	ldrb	r3, [r3, #0]
    1c54:	1c9a      	adds	r2, r3, #2
    1c56:	2338      	movs	r3, #56	; 0x38
    1c58:	18fb      	adds	r3, r7, r3
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	429a      	cmp	r2, r3
    1c5e:	d011      	beq.n	1c84 <_Z21drawClassicalCountersPA11_hhhhh+0x1f2>
						// Runs if not the original counter
						drawClassicalCounters(boardState, j, i + 2, origX, origY);
    1c60:	2325      	movs	r3, #37	; 0x25
    1c62:	18fb      	adds	r3, r7, r3
    1c64:	781b      	ldrb	r3, [r3, #0]
    1c66:	3302      	adds	r3, #2
    1c68:	b2da      	uxtb	r2, r3
    1c6a:	1c7b      	adds	r3, r7, #1
    1c6c:	781c      	ldrb	r4, [r3, #0]
    1c6e:	2324      	movs	r3, #36	; 0x24
    1c70:	18fb      	adds	r3, r7, r3
    1c72:	7819      	ldrb	r1, [r3, #0]
    1c74:	6878      	ldr	r0, [r7, #4]
    1c76:	2338      	movs	r3, #56	; 0x38
    1c78:	18fb      	adds	r3, r7, r3
    1c7a:	781b      	ldrb	r3, [r3, #0]
    1c7c:	9300      	str	r3, [sp, #0]
    1c7e:	0023      	movs	r3, r4
    1c80:	f7ff ff07 	bl	1a92 <_Z21drawClassicalCountersPA11_hhhhh>
			for (uint8_t j = 0; j < 9; j++) {
    1c84:	2324      	movs	r3, #36	; 0x24
    1c86:	18fb      	adds	r3, r7, r3
    1c88:	781a      	ldrb	r2, [r3, #0]
    1c8a:	2324      	movs	r3, #36	; 0x24
    1c8c:	18fb      	adds	r3, r7, r3
    1c8e:	3201      	adds	r2, #1
    1c90:	701a      	strb	r2, [r3, #0]
    1c92:	e7b8      	b.n	1c06 <_Z21drawClassicalCountersPA11_hhhhh+0x174>
	for (uint8_t i = 0; i < 9; i++) {
    1c94:	2325      	movs	r3, #37	; 0x25
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	781a      	ldrb	r2, [r3, #0]
    1c9a:	2325      	movs	r3, #37	; 0x25
    1c9c:	18fb      	adds	r3, r7, r3
    1c9e:	3201      	adds	r2, #1
    1ca0:	701a      	strb	r2, [r3, #0]
    1ca2:	e78f      	b.n	1bc4 <_Z21drawClassicalCountersPA11_hhhhh+0x132>
					}
				}
			}
		}
	}
}
    1ca4:	46c0      	nop			; (mov r8, r8)
    1ca6:	46bd      	mov	sp, r7
    1ca8:	b00b      	add	sp, #44	; 0x2c
    1caa:	bd90      	pop	{r4, r7, pc}

00001cac <_Z4gamehh>:

State game(uint8_t noughtsScore, uint8_t crossesScore) {
    1cac:	b590      	push	{r4, r7, lr}
    1cae:	b09d      	sub	sp, #116	; 0x74
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	0002      	movs	r2, r0
    1cb4:	230f      	movs	r3, #15
    1cb6:	18fb      	adds	r3, r7, r3
    1cb8:	701a      	strb	r2, [r3, #0]
    1cba:	230e      	movs	r3, #14
    1cbc:	18fb      	adds	r3, r7, r3
    1cbe:	1c0a      	adds	r2, r1, #0
    1cc0:	701a      	strb	r2, [r3, #0]
	State player = cross;
    1cc2:	236f      	movs	r3, #111	; 0x6f
    1cc4:	18fb      	adds	r3, r7, r3
    1cc6:	2202      	movs	r2, #2
    1cc8:	701a      	strb	r2, [r3, #0]
	State boardState[9] = {empty, empty, empty, empty, empty, empty, empty, empty,
	empty};
    1cca:	2320      	movs	r3, #32
    1ccc:	18fb      	adds	r3, r7, r3
    1cce:	0018      	movs	r0, r3
    1cd0:	2309      	movs	r3, #9
    1cd2:	001a      	movs	r2, r3
    1cd4:	2100      	movs	r1, #0
    1cd6:	f00e fddf 	bl	10898 <memset>
	State winner = empty;
    1cda:	236e      	movs	r3, #110	; 0x6e
    1cdc:	18fb      	adds	r3, r7, r3
    1cde:	2200      	movs	r2, #0
    1ce0:	701a      	strb	r2, [r3, #0]
	uint8_t placedCounters = 0;
    1ce2:	236d      	movs	r3, #109	; 0x6d
    1ce4:	18fb      	adds	r3, r7, r3
    1ce6:	2200      	movs	r2, #0
    1ce8:	701a      	strb	r2, [r3, #0]
	uint8_t square = 255;
    1cea:	236b      	movs	r3, #107	; 0x6b
    1cec:	18fb      	adds	r3, r7, r3
    1cee:	22ff      	movs	r2, #255	; 0xff
    1cf0:	701a      	strb	r2, [r3, #0]
	TS_Point newCounterPos;
    1cf2:	2318      	movs	r3, #24
    1cf4:	18fb      	adds	r3, r7, r3
    1cf6:	0018      	movs	r0, r3
    1cf8:	f005 fca6 	bl	7648 <_ZN8TS_PointC1Ev>

	// Draw grid
	drawBitmap('d', 0, 80);
    1cfc:	2250      	movs	r2, #80	; 0x50
    1cfe:	2100      	movs	r1, #0
    1d00:	2064      	movs	r0, #100	; 0x64
    1d02:	f7fe faaf 	bl	264 <_Z10drawBitmapcss>

	// Start game
	while (placedCounters < 9) {
    1d06:	236d      	movs	r3, #109	; 0x6d
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	781b      	ldrb	r3, [r3, #0]
    1d0c:	2b08      	cmp	r3, #8
    1d0e:	dd00      	ble.n	1d12 <_Z4gamehh+0x66>
    1d10:	e0db      	b.n	1eca <_Z4gamehh+0x21e>
		while (true) {
			if (!touchScreen.touched()) continue;
    1d12:	4b71      	ldr	r3, [pc, #452]	; (1ed8 <_Z4gamehh+0x22c>)
    1d14:	0018      	movs	r0, r3
    1d16:	f005 fae5 	bl	72e4 <_ZN15Adafruit_FT62067touchedEv>
    1d1a:	0003      	movs	r3, r0
    1d1c:	425a      	negs	r2, r3
    1d1e:	4153      	adcs	r3, r2
    1d20:	b2db      	uxtb	r3, r3
    1d22:	2b00      	cmp	r3, #0
    1d24:	d12e      	bne.n	1d84 <_Z4gamehh+0xd8>
			TS_Point pointTouched = getPoint();
    1d26:	2310      	movs	r3, #16
    1d28:	18fb      	adds	r3, r7, r3
    1d2a:	0018      	movs	r0, r3
    1d2c:	f7ff fb0e 	bl	134c <_Z8getPointv>
			if (verbose)
			Serial.println(
			(String) F("screen pressed at: (") + (String) pointTouched.x + ","
			+ (String) pointTouched.y + (String) F(")"));
			square = getSquare(pointTouched);
    1d30:	236b      	movs	r3, #107	; 0x6b
    1d32:	18fc      	adds	r4, r7, r3
    1d34:	2310      	movs	r3, #16
    1d36:	18fb      	adds	r3, r7, r3
    1d38:	6818      	ldr	r0, [r3, #0]
    1d3a:	6859      	ldr	r1, [r3, #4]
    1d3c:	f7ff fc03 	bl	1546 <_Z9getSquare8TS_Point>
    1d40:	0003      	movs	r3, r0
    1d42:	7023      	strb	r3, [r4, #0]
			newCounterPos = getCounterPosition(square);
    1d44:	2318      	movs	r3, #24
    1d46:	18fc      	adds	r4, r7, r3
    1d48:	003a      	movs	r2, r7
    1d4a:	236b      	movs	r3, #107	; 0x6b
    1d4c:	18fb      	adds	r3, r7, r3
    1d4e:	781b      	ldrb	r3, [r3, #0]
    1d50:	0019      	movs	r1, r3
    1d52:	0010      	movs	r0, r2
    1d54:	f7ff fc7e 	bl	1654 <_Z18getCounterPositionh>
    1d58:	003b      	movs	r3, r7
    1d5a:	0020      	movs	r0, r4
    1d5c:	0019      	movs	r1, r3
    1d5e:	2306      	movs	r3, #6
    1d60:	001a      	movs	r2, r3
    1d62:	f00e fd90 	bl	10886 <memcpy>
			if (!(square == 255)) break;
    1d66:	236b      	movs	r3, #107	; 0x6b
    1d68:	18fb      	adds	r3, r7, r3
    1d6a:	781b      	ldrb	r3, [r3, #0]
    1d6c:	2bff      	cmp	r3, #255	; 0xff
    1d6e:	d0d0      	beq.n	1d12 <_Z4gamehh+0x66>
		}

		// Check to see if selected square is occupied
		if (boardState[square] != empty) continue;
    1d70:	236b      	movs	r3, #107	; 0x6b
    1d72:	18fb      	adds	r3, r7, r3
    1d74:	781b      	ldrb	r3, [r3, #0]
    1d76:	2220      	movs	r2, #32
    1d78:	18ba      	adds	r2, r7, r2
    1d7a:	5cd3      	ldrb	r3, [r2, r3]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d000      	beq.n	1d82 <_Z4gamehh+0xd6>
    1d80:	e0a0      	b.n	1ec4 <_Z4gamehh+0x218>
    1d82:	e001      	b.n	1d88 <_Z4gamehh+0xdc>
			if (!touchScreen.touched()) continue;
    1d84:	46c0      	nop			; (mov r8, r8)
		}
    1d86:	e7c4      	b.n	1d12 <_Z4gamehh+0x66>

		// Update boardState
		boardState[square] = player;
    1d88:	236b      	movs	r3, #107	; 0x6b
    1d8a:	18fb      	adds	r3, r7, r3
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	2220      	movs	r2, #32
    1d90:	18ba      	adds	r2, r7, r2
    1d92:	216f      	movs	r1, #111	; 0x6f
    1d94:	1879      	adds	r1, r7, r1
    1d96:	7809      	ldrb	r1, [r1, #0]
    1d98:	54d1      	strb	r1, [r2, r3]

		// Draw nought or cross on selected square and swap player
		player = addMove(square, newCounterPos, player);
    1d9a:	236f      	movs	r3, #111	; 0x6f
    1d9c:	18fc      	adds	r4, r7, r3
    1d9e:	236f      	movs	r3, #111	; 0x6f
    1da0:	18fb      	adds	r3, r7, r3
    1da2:	7819      	ldrb	r1, [r3, #0]
    1da4:	2318      	movs	r3, #24
    1da6:	18fa      	adds	r2, r7, r3
    1da8:	236b      	movs	r3, #107	; 0x6b
    1daa:	18fb      	adds	r3, r7, r3
    1dac:	7818      	ldrb	r0, [r3, #0]
    1dae:	000b      	movs	r3, r1
    1db0:	6811      	ldr	r1, [r2, #0]
    1db2:	6852      	ldr	r2, [r2, #4]
    1db4:	f7ff fafc 	bl	13b0 <_Z7addMoveh8TS_Point5State>
    1db8:	0003      	movs	r3, r0
    1dba:	7023      	strb	r3, [r4, #0]
		placedCounters++;
    1dbc:	236d      	movs	r3, #109	; 0x6d
    1dbe:	18fb      	adds	r3, r7, r3
    1dc0:	781a      	ldrb	r2, [r3, #0]
    1dc2:	236d      	movs	r3, #109	; 0x6d
    1dc4:	18fb      	adds	r3, r7, r3
    1dc6:	3201      	adds	r2, #1
    1dc8:	701a      	strb	r2, [r3, #0]

		// Check to see if someone has won
		for (uint8_t i = 0; i < 8; i++) {
    1dca:	236c      	movs	r3, #108	; 0x6c
    1dcc:	18fb      	adds	r3, r7, r3
    1dce:	2200      	movs	r2, #0
    1dd0:	701a      	strb	r2, [r3, #0]
    1dd2:	236c      	movs	r3, #108	; 0x6c
    1dd4:	18fb      	adds	r3, r7, r3
    1dd6:	781b      	ldrb	r3, [r3, #0]
    1dd8:	2b07      	cmp	r3, #7
    1dda:	dc5c      	bgt.n	1e96 <_Z4gamehh+0x1ea>
			if (boardState[winIndexes[i][0]] == boardState[winIndexes[i][1]]
    1ddc:	236c      	movs	r3, #108	; 0x6c
    1dde:	18fb      	adds	r3, r7, r3
    1de0:	781a      	ldrb	r2, [r3, #0]
    1de2:	493e      	ldr	r1, [pc, #248]	; (1edc <_Z4gamehh+0x230>)
    1de4:	0013      	movs	r3, r2
    1de6:	005b      	lsls	r3, r3, #1
    1de8:	189b      	adds	r3, r3, r2
    1dea:	5c5b      	ldrb	r3, [r3, r1]
    1dec:	001a      	movs	r2, r3
    1dee:	2320      	movs	r3, #32
    1df0:	18fb      	adds	r3, r7, r3
    1df2:	5c99      	ldrb	r1, [r3, r2]
    1df4:	236c      	movs	r3, #108	; 0x6c
    1df6:	18fb      	adds	r3, r7, r3
    1df8:	781a      	ldrb	r2, [r3, #0]
    1dfa:	4838      	ldr	r0, [pc, #224]	; (1edc <_Z4gamehh+0x230>)
    1dfc:	0013      	movs	r3, r2
    1dfe:	005b      	lsls	r3, r3, #1
    1e00:	189b      	adds	r3, r3, r2
    1e02:	18c3      	adds	r3, r0, r3
    1e04:	3301      	adds	r3, #1
    1e06:	781b      	ldrb	r3, [r3, #0]
    1e08:	001a      	movs	r2, r3
    1e0a:	2320      	movs	r3, #32
    1e0c:	18fb      	adds	r3, r7, r3
    1e0e:	5c9b      	ldrb	r3, [r3, r2]
    1e10:	4299      	cmp	r1, r3
    1e12:	d138      	bne.n	1e86 <_Z4gamehh+0x1da>
			&& boardState[winIndexes[i][0]] == boardState[winIndexes[i][2]]
    1e14:	236c      	movs	r3, #108	; 0x6c
    1e16:	18fb      	adds	r3, r7, r3
    1e18:	781a      	ldrb	r2, [r3, #0]
    1e1a:	4930      	ldr	r1, [pc, #192]	; (1edc <_Z4gamehh+0x230>)
    1e1c:	0013      	movs	r3, r2
    1e1e:	005b      	lsls	r3, r3, #1
    1e20:	189b      	adds	r3, r3, r2
    1e22:	5c5b      	ldrb	r3, [r3, r1]
    1e24:	001a      	movs	r2, r3
    1e26:	2320      	movs	r3, #32
    1e28:	18fb      	adds	r3, r7, r3
    1e2a:	5c99      	ldrb	r1, [r3, r2]
    1e2c:	236c      	movs	r3, #108	; 0x6c
    1e2e:	18fb      	adds	r3, r7, r3
    1e30:	781a      	ldrb	r2, [r3, #0]
    1e32:	482a      	ldr	r0, [pc, #168]	; (1edc <_Z4gamehh+0x230>)
    1e34:	0013      	movs	r3, r2
    1e36:	005b      	lsls	r3, r3, #1
    1e38:	189b      	adds	r3, r3, r2
    1e3a:	18c3      	adds	r3, r0, r3
    1e3c:	3302      	adds	r3, #2
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	001a      	movs	r2, r3
    1e42:	2320      	movs	r3, #32
    1e44:	18fb      	adds	r3, r7, r3
    1e46:	5c9b      	ldrb	r3, [r3, r2]
    1e48:	4299      	cmp	r1, r3
    1e4a:	d11c      	bne.n	1e86 <_Z4gamehh+0x1da>
			&& boardState[winIndexes[i][0]] != empty) {
    1e4c:	236c      	movs	r3, #108	; 0x6c
    1e4e:	18fb      	adds	r3, r7, r3
    1e50:	781a      	ldrb	r2, [r3, #0]
    1e52:	4922      	ldr	r1, [pc, #136]	; (1edc <_Z4gamehh+0x230>)
    1e54:	0013      	movs	r3, r2
    1e56:	005b      	lsls	r3, r3, #1
    1e58:	189b      	adds	r3, r3, r2
    1e5a:	5c5b      	ldrb	r3, [r3, r1]
    1e5c:	001a      	movs	r2, r3
    1e5e:	2320      	movs	r3, #32
    1e60:	18fb      	adds	r3, r7, r3
    1e62:	5c9b      	ldrb	r3, [r3, r2]
    1e64:	2b00      	cmp	r3, #0
    1e66:	d00e      	beq.n	1e86 <_Z4gamehh+0x1da>
				winner = boardState[winIndexes[i][0]];
    1e68:	236c      	movs	r3, #108	; 0x6c
    1e6a:	18fb      	adds	r3, r7, r3
    1e6c:	781a      	ldrb	r2, [r3, #0]
    1e6e:	491b      	ldr	r1, [pc, #108]	; (1edc <_Z4gamehh+0x230>)
    1e70:	0013      	movs	r3, r2
    1e72:	005b      	lsls	r3, r3, #1
    1e74:	189b      	adds	r3, r3, r2
    1e76:	5c5b      	ldrb	r3, [r3, r1]
    1e78:	0019      	movs	r1, r3
    1e7a:	236e      	movs	r3, #110	; 0x6e
    1e7c:	18fb      	adds	r3, r7, r3
    1e7e:	2220      	movs	r2, #32
    1e80:	18ba      	adds	r2, r7, r2
    1e82:	5c52      	ldrb	r2, [r2, r1]
    1e84:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++) {
    1e86:	236c      	movs	r3, #108	; 0x6c
    1e88:	18fb      	adds	r3, r7, r3
    1e8a:	781a      	ldrb	r2, [r3, #0]
    1e8c:	236c      	movs	r3, #108	; 0x6c
    1e8e:	18fb      	adds	r3, r7, r3
    1e90:	3201      	adds	r2, #1
    1e92:	701a      	strb	r2, [r3, #0]
    1e94:	e79d      	b.n	1dd2 <_Z4gamehh+0x126>
			}
		}
		Serial.print(F("winner = "));
    1e96:	4a12      	ldr	r2, [pc, #72]	; (1ee0 <_Z4gamehh+0x234>)
    1e98:	4b12      	ldr	r3, [pc, #72]	; (1ee4 <_Z4gamehh+0x238>)
    1e9a:	0011      	movs	r1, r2
    1e9c:	0018      	movs	r0, r3
    1e9e:	f001 f8a0 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(winner);
    1ea2:	236e      	movs	r3, #110	; 0x6e
    1ea4:	18fb      	adds	r3, r7, r3
    1ea6:	7819      	ldrb	r1, [r3, #0]
    1ea8:	4b0e      	ldr	r3, [pc, #56]	; (1ee4 <_Z4gamehh+0x238>)
    1eaa:	220a      	movs	r2, #10
    1eac:	0018      	movs	r0, r3
    1eae:	f001 f9d6 	bl	325e <_ZN5Print7printlnEii>
		if (!(winner == empty)) break;
    1eb2:	236e      	movs	r3, #110	; 0x6e
    1eb4:	18fb      	adds	r3, r7, r3
    1eb6:	781b      	ldrb	r3, [r3, #0]
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d105      	bne.n	1ec8 <_Z4gamehh+0x21c>
		delay(100);
    1ebc:	2064      	movs	r0, #100	; 0x64
    1ebe:	f000 ffdf 	bl	2e80 <delay>
    1ec2:	e720      	b.n	1d06 <_Z4gamehh+0x5a>
		if (boardState[square] != empty) continue;
    1ec4:	46c0      	nop			; (mov r8, r8)
	while (placedCounters < 9) {
    1ec6:	e71e      	b.n	1d06 <_Z4gamehh+0x5a>
		if (!(winner == empty)) break;
    1ec8:	46c0      	nop			; (mov r8, r8)
	}
	return winner;
    1eca:	236e      	movs	r3, #110	; 0x6e
    1ecc:	18fb      	adds	r3, r7, r3
    1ece:	781b      	ldrb	r3, [r3, #0]
}
    1ed0:	0018      	movs	r0, r3
    1ed2:	46bd      	mov	sp, r7
    1ed4:	b01d      	add	sp, #116	; 0x74
    1ed6:	bd90      	pop	{r4, r7, pc}
    1ed8:	20000320 	.word	0x20000320
    1edc:	20000004 	.word	0x20000004
    1ee0:	00013354 	.word	0x00013354
    1ee4:	20000e94 	.word	0x20000e94

00001ee8 <_Z11quantumGamehh>:

uint8_t quantumGame(uint8_t noughtsScore, uint8_t crossesScore) {
    1ee8:	b5b0      	push	{r4, r5, r7, lr}
    1eea:	b0c2      	sub	sp, #264	; 0x108
    1eec:	af02      	add	r7, sp, #8
    1eee:	0002      	movs	r2, r0
    1ef0:	1dfb      	adds	r3, r7, #7
    1ef2:	701a      	strb	r2, [r3, #0]
    1ef4:	1dbb      	adds	r3, r7, #6
    1ef6:	1c0a      	adds	r2, r1, #0
    1ef8:	701a      	strb	r2, [r3, #0]
	// 0 = none, 1 = cross, 2 = nought
	uint8_t player = 1;
    1efa:	23ff      	movs	r3, #255	; 0xff
    1efc:	18fb      	adds	r3, r7, r3
    1efe:	2201      	movs	r2, #1
    1f00:	701a      	strb	r2, [r3, #0]
	uint8_t turn = 1;
    1f02:	23fe      	movs	r3, #254	; 0xfe
    1f04:	18fb      	adds	r3, r7, r3
    1f06:	2201      	movs	r2, #1
    1f08:	701a      	strb	r2, [r3, #0]
	uint8_t winner = 0;
    1f0a:	23fd      	movs	r3, #253	; 0xfd
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	2200      	movs	r2, #0
    1f10:	701a      	strb	r2, [r3, #0]
	uint8_t boardState[9][11] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    1f12:	2350      	movs	r3, #80	; 0x50
    1f14:	18fb      	adds	r3, r7, r3
    1f16:	0018      	movs	r0, r3
    1f18:	2363      	movs	r3, #99	; 0x63
    1f1a:	001a      	movs	r2, r3
    1f1c:	2100      	movs	r1, #0
    1f1e:	f00e fcbb 	bl	10898 <memset>
	uint8_t bigCounters = 0;
    1f22:	23f2      	movs	r3, #242	; 0xf2
    1f24:	18fb      	adds	r3, r7, r3
    1f26:	2200      	movs	r2, #0
    1f28:	701a      	strb	r2, [r3, #0]
	uint8_t square = 255;
    1f2a:	23fc      	movs	r3, #252	; 0xfc
    1f2c:	18fb      	adds	r3, r7, r3
    1f2e:	22ff      	movs	r2, #255	; 0xff
    1f30:	701a      	strb	r2, [r3, #0]
	TS_Point newCounterPos;
    1f32:	2348      	movs	r3, #72	; 0x48
    1f34:	18fb      	adds	r3, r7, r3
    1f36:	0018      	movs	r0, r3
    1f38:	f005 fb86 	bl	7648 <_ZN8TS_PointC1Ev>

	// Draw grid
	drawBitmap('d', 0, 80);
    1f3c:	2250      	movs	r2, #80	; 0x50
    1f3e:	2100      	movs	r1, #0
    1f40:	2064      	movs	r0, #100	; 0x64
    1f42:	f7fe f98f 	bl	264 <_Z10drawBitmapcss>

	// Start match
	while (bigCounters < 9) {
    1f46:	23f2      	movs	r3, #242	; 0xf2
    1f48:	18fb      	adds	r3, r7, r3
    1f4a:	781b      	ldrb	r3, [r3, #0]
    1f4c:	2b08      	cmp	r3, #8
    1f4e:	dd00      	ble.n	1f52 <_Z11quantumGamehh+0x6a>
    1f50:	e325      	b.n	259e <_Z11quantumGamehh+0x6b6>
		uint8_t countersThisTurn = 0;
    1f52:	23fb      	movs	r3, #251	; 0xfb
    1f54:	18fb      	adds	r3, r7, r3
    1f56:	2200      	movs	r2, #0
    1f58:	701a      	strb	r2, [r3, #0]
		uint8_t recentSquares[] = {255, 255};
    1f5a:	2344      	movs	r3, #68	; 0x44
    1f5c:	18fb      	adds	r3, r7, r3
    1f5e:	4adc      	ldr	r2, [pc, #880]	; (22d0 <_Z11quantumGamehh+0x3e8>)
    1f60:	8812      	ldrh	r2, [r2, #0]
    1f62:	801a      	strh	r2, [r3, #0]
		while (countersThisTurn < 2) {
    1f64:	23fb      	movs	r3, #251	; 0xfb
    1f66:	18fb      	adds	r3, r7, r3
    1f68:	781b      	ldrb	r3, [r3, #0]
    1f6a:	2b01      	cmp	r3, #1
    1f6c:	dd00      	ble.n	1f70 <_Z11quantumGamehh+0x88>
    1f6e:	e07a      	b.n	2066 <_Z11quantumGamehh+0x17e>
			while (true) {
				if (!touchScreen.touched()) continue;
    1f70:	4bd8      	ldr	r3, [pc, #864]	; (22d4 <_Z11quantumGamehh+0x3ec>)
    1f72:	0018      	movs	r0, r3
    1f74:	f005 f9b6 	bl	72e4 <_ZN15Adafruit_FT62067touchedEv>
    1f78:	0003      	movs	r3, r0
    1f7a:	425a      	negs	r2, r3
    1f7c:	4153      	adcs	r3, r2
    1f7e:	b2db      	uxtb	r3, r3
    1f80:	2b00      	cmp	r3, #0
    1f82:	d121      	bne.n	1fc8 <_Z11quantumGamehh+0xe0>
				TS_Point pointTouched = getPoint();
    1f84:	2328      	movs	r3, #40	; 0x28
    1f86:	18fb      	adds	r3, r7, r3
    1f88:	0018      	movs	r0, r3
    1f8a:	f7ff f9df 	bl	134c <_Z8getPointv>
				if (verbose)
				Serial.println(
				(String) F("screen pressed at: (") + (String) pointTouched.x + ","
				+ (String) pointTouched.y + (String) F(")"));
				square = getSquare(pointTouched);
    1f8e:	23fc      	movs	r3, #252	; 0xfc
    1f90:	18fc      	adds	r4, r7, r3
    1f92:	2328      	movs	r3, #40	; 0x28
    1f94:	18fb      	adds	r3, r7, r3
    1f96:	6818      	ldr	r0, [r3, #0]
    1f98:	6859      	ldr	r1, [r3, #4]
    1f9a:	f7ff fad4 	bl	1546 <_Z9getSquare8TS_Point>
    1f9e:	0003      	movs	r3, r0
    1fa0:	7023      	strb	r3, [r4, #0]
				if (!(square == 255)) break;
    1fa2:	23fc      	movs	r3, #252	; 0xfc
    1fa4:	18fb      	adds	r3, r7, r3
    1fa6:	781b      	ldrb	r3, [r3, #0]
    1fa8:	2bff      	cmp	r3, #255	; 0xff
    1faa:	d0e1      	beq.n	1f70 <_Z11quantumGamehh+0x88>
			}

			// Check to see if selected square is occupied
			if (boardState[square][0] != 0) continue;
    1fac:	23fc      	movs	r3, #252	; 0xfc
    1fae:	18fb      	adds	r3, r7, r3
    1fb0:	781a      	ldrb	r2, [r3, #0]
    1fb2:	2350      	movs	r3, #80	; 0x50
    1fb4:	18f9      	adds	r1, r7, r3
    1fb6:	0013      	movs	r3, r2
    1fb8:	009b      	lsls	r3, r3, #2
    1fba:	189b      	adds	r3, r3, r2
    1fbc:	005b      	lsls	r3, r3, #1
    1fbe:	189b      	adds	r3, r3, r2
    1fc0:	5c5b      	ldrb	r3, [r3, r1]
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d14b      	bne.n	205e <_Z11quantumGamehh+0x176>
    1fc6:	e001      	b.n	1fcc <_Z11quantumGamehh+0xe4>
				if (!touchScreen.touched()) continue;
    1fc8:	46c0      	nop			; (mov r8, r8)
			}
    1fca:	e7d1      	b.n	1f70 <_Z11quantumGamehh+0x88>
			if (boardState[square][turn + 1] != 0) continue;
    1fcc:	23fc      	movs	r3, #252	; 0xfc
    1fce:	18fb      	adds	r3, r7, r3
    1fd0:	781a      	ldrb	r2, [r3, #0]
    1fd2:	23fe      	movs	r3, #254	; 0xfe
    1fd4:	18fb      	adds	r3, r7, r3
    1fd6:	781b      	ldrb	r3, [r3, #0]
    1fd8:	1c59      	adds	r1, r3, #1
    1fda:	2350      	movs	r3, #80	; 0x50
    1fdc:	18f8      	adds	r0, r7, r3
    1fde:	0013      	movs	r3, r2
    1fe0:	009b      	lsls	r3, r3, #2
    1fe2:	189b      	adds	r3, r3, r2
    1fe4:	005b      	lsls	r3, r3, #1
    1fe6:	189b      	adds	r3, r3, r2
    1fe8:	18c3      	adds	r3, r0, r3
    1fea:	5c5b      	ldrb	r3, [r3, r1]
    1fec:	2b00      	cmp	r3, #0
    1fee:	d138      	bne.n	2062 <_Z11quantumGamehh+0x17a>

			// Update board state
			boardState[square][turn + 1] = player;
    1ff0:	23fc      	movs	r3, #252	; 0xfc
    1ff2:	18fb      	adds	r3, r7, r3
    1ff4:	781a      	ldrb	r2, [r3, #0]
    1ff6:	23fe      	movs	r3, #254	; 0xfe
    1ff8:	18fb      	adds	r3, r7, r3
    1ffa:	781b      	ldrb	r3, [r3, #0]
    1ffc:	1c59      	adds	r1, r3, #1
    1ffe:	2350      	movs	r3, #80	; 0x50
    2000:	18f8      	adds	r0, r7, r3
    2002:	0013      	movs	r3, r2
    2004:	009b      	lsls	r3, r3, #2
    2006:	189b      	adds	r3, r3, r2
    2008:	005b      	lsls	r3, r3, #1
    200a:	189b      	adds	r3, r3, r2
    200c:	18c3      	adds	r3, r0, r3
    200e:	22ff      	movs	r2, #255	; 0xff
    2010:	18ba      	adds	r2, r7, r2
    2012:	7812      	ldrb	r2, [r2, #0]
    2014:	545a      	strb	r2, [r3, r1]
			if (recentSquares[0] == 255) {
    2016:	2344      	movs	r3, #68	; 0x44
    2018:	18fb      	adds	r3, r7, r3
    201a:	781b      	ldrb	r3, [r3, #0]
    201c:	2bff      	cmp	r3, #255	; 0xff
    201e:	d106      	bne.n	202e <_Z11quantumGamehh+0x146>
				recentSquares[0] = square;
    2020:	2344      	movs	r3, #68	; 0x44
    2022:	18fb      	adds	r3, r7, r3
    2024:	22fc      	movs	r2, #252	; 0xfc
    2026:	18ba      	adds	r2, r7, r2
    2028:	7812      	ldrb	r2, [r2, #0]
    202a:	701a      	strb	r2, [r3, #0]
    202c:	e005      	b.n	203a <_Z11quantumGamehh+0x152>
			} else {
				recentSquares[1] = square;
    202e:	2344      	movs	r3, #68	; 0x44
    2030:	18fb      	adds	r3, r7, r3
    2032:	22fc      	movs	r2, #252	; 0xfc
    2034:	18ba      	adds	r2, r7, r2
    2036:	7812      	ldrb	r2, [r2, #0]
    2038:	705a      	strb	r2, [r3, #1]
			}
		

			// Draw small nought or cross on selected square
			drawSmallCounter(square, turn);
    203a:	23fe      	movs	r3, #254	; 0xfe
    203c:	18fb      	adds	r3, r7, r3
    203e:	781a      	ldrb	r2, [r3, #0]
    2040:	23fc      	movs	r3, #252	; 0xfc
    2042:	18fb      	adds	r3, r7, r3
    2044:	781b      	ldrb	r3, [r3, #0]
    2046:	0011      	movs	r1, r2
    2048:	0018      	movs	r0, r3
    204a:	f7ff fbf6 	bl	183a <_Z16drawSmallCounterhh>
			
			countersThisTurn++;
    204e:	23fb      	movs	r3, #251	; 0xfb
    2050:	18fb      	adds	r3, r7, r3
    2052:	781a      	ldrb	r2, [r3, #0]
    2054:	23fb      	movs	r3, #251	; 0xfb
    2056:	18fb      	adds	r3, r7, r3
    2058:	3201      	adds	r2, #1
    205a:	701a      	strb	r2, [r3, #0]
    205c:	e782      	b.n	1f64 <_Z11quantumGamehh+0x7c>
			if (boardState[square][0] != 0) continue;
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	e780      	b.n	1f64 <_Z11quantumGamehh+0x7c>
			if (boardState[square][turn + 1] != 0) continue;
    2062:	46c0      	nop			; (mov r8, r8)
		while (countersThisTurn < 2) {
    2064:	e77e      	b.n	1f64 <_Z11quantumGamehh+0x7c>
		}
		
		// Check for measurement
		uint8_t circle[9] = {255, 255, 255, 255, 255, 255, 255, 255, 255};
    2066:	2338      	movs	r3, #56	; 0x38
    2068:	18fb      	adds	r3, r7, r3
    206a:	4a9b      	ldr	r2, [pc, #620]	; (22d8 <_Z11quantumGamehh+0x3f0>)
    206c:	ca03      	ldmia	r2!, {r0, r1}
    206e:	c303      	stmia	r3!, {r0, r1}
    2070:	7812      	ldrb	r2, [r2, #0]
    2072:	701a      	strb	r2, [r3, #0]
		findCircle(boardState, square, turn + 1, square, circle);
    2074:	23fe      	movs	r3, #254	; 0xfe
    2076:	18fb      	adds	r3, r7, r3
    2078:	781b      	ldrb	r3, [r3, #0]
    207a:	3301      	adds	r3, #1
    207c:	b2da      	uxtb	r2, r3
    207e:	23fc      	movs	r3, #252	; 0xfc
    2080:	18fb      	adds	r3, r7, r3
    2082:	781c      	ldrb	r4, [r3, #0]
    2084:	23fc      	movs	r3, #252	; 0xfc
    2086:	18fb      	adds	r3, r7, r3
    2088:	7819      	ldrb	r1, [r3, #0]
    208a:	2350      	movs	r3, #80	; 0x50
    208c:	18f8      	adds	r0, r7, r3
    208e:	2338      	movs	r3, #56	; 0x38
    2090:	18fb      	adds	r3, r7, r3
    2092:	9300      	str	r3, [sp, #0]
    2094:	0023      	movs	r3, r4
    2096:	f7ff fc4e 	bl	1936 <_Z10findCirclePA11_hhhhPh>
		if (circle[0] != 255) {
    209a:	2338      	movs	r3, #56	; 0x38
    209c:	18fb      	adds	r3, r7, r3
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	2bff      	cmp	r3, #255	; 0xff
    20a2:	d100      	bne.n	20a6 <_Z11quantumGamehh+0x1be>
    20a4:	e13a      	b.n	231c <_Z11quantumGamehh+0x434>
			// Circle found
			
			// Ask user how to resolve
			// Underline/Draw box around recent counters
			for (uint8_t i = 0; i < 9; i++) {
    20a6:	23fa      	movs	r3, #250	; 0xfa
    20a8:	18fb      	adds	r3, r7, r3
    20aa:	2200      	movs	r2, #0
    20ac:	701a      	strb	r2, [r3, #0]
    20ae:	23fa      	movs	r3, #250	; 0xfa
    20b0:	18fb      	adds	r3, r7, r3
    20b2:	781b      	ldrb	r3, [r3, #0]
    20b4:	2b08      	cmp	r3, #8
    20b6:	dc76      	bgt.n	21a6 <_Z11quantumGamehh+0x2be>
				if (boardState[i][turn + 1] != 0) {
    20b8:	23fa      	movs	r3, #250	; 0xfa
    20ba:	18fb      	adds	r3, r7, r3
    20bc:	781a      	ldrb	r2, [r3, #0]
    20be:	23fe      	movs	r3, #254	; 0xfe
    20c0:	18fb      	adds	r3, r7, r3
    20c2:	781b      	ldrb	r3, [r3, #0]
    20c4:	1c59      	adds	r1, r3, #1
    20c6:	2350      	movs	r3, #80	; 0x50
    20c8:	18f8      	adds	r0, r7, r3
    20ca:	0013      	movs	r3, r2
    20cc:	009b      	lsls	r3, r3, #2
    20ce:	189b      	adds	r3, r3, r2
    20d0:	005b      	lsls	r3, r3, #1
    20d2:	189b      	adds	r3, r3, r2
    20d4:	18c3      	adds	r3, r0, r3
    20d6:	5c5b      	ldrb	r3, [r3, r1]
    20d8:	2b00      	cmp	r3, #0
    20da:	d05c      	beq.n	2196 <_Z11quantumGamehh+0x2ae>
					TS_Point point = getSmallCounterPosition(i, turn);
    20dc:	2310      	movs	r3, #16
    20de:	18f8      	adds	r0, r7, r3
    20e0:	23fe      	movs	r3, #254	; 0xfe
    20e2:	18fb      	adds	r3, r7, r3
    20e4:	781a      	ldrb	r2, [r3, #0]
    20e6:	23fa      	movs	r3, #250	; 0xfa
    20e8:	18fb      	adds	r3, r7, r3
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	0019      	movs	r1, r3
    20ee:	f7ff fb07 	bl	1700 <_Z23getSmallCounterPositionhh>
					//tftDisplay.drawRect(point.x, point.y, 25, 25, 0x07FF);
					tftDisplay.drawLine(point.x + 2, point.y + 26, point.x + 24, point.y + 26, 0xF800);
    20f2:	2310      	movs	r3, #16
    20f4:	18fb      	adds	r3, r7, r3
    20f6:	2200      	movs	r2, #0
    20f8:	5e9b      	ldrsh	r3, [r3, r2]
    20fa:	b29b      	uxth	r3, r3
    20fc:	3302      	adds	r3, #2
    20fe:	b29b      	uxth	r3, r3
    2100:	b219      	sxth	r1, r3
    2102:	2310      	movs	r3, #16
    2104:	18fb      	adds	r3, r7, r3
    2106:	2202      	movs	r2, #2
    2108:	5e9b      	ldrsh	r3, [r3, r2]
    210a:	b29b      	uxth	r3, r3
    210c:	331a      	adds	r3, #26
    210e:	b29b      	uxth	r3, r3
    2110:	b21c      	sxth	r4, r3
    2112:	2310      	movs	r3, #16
    2114:	18fb      	adds	r3, r7, r3
    2116:	2200      	movs	r2, #0
    2118:	5e9b      	ldrsh	r3, [r3, r2]
    211a:	b29b      	uxth	r3, r3
    211c:	3318      	adds	r3, #24
    211e:	b29b      	uxth	r3, r3
    2120:	b21d      	sxth	r5, r3
    2122:	2310      	movs	r3, #16
    2124:	18fb      	adds	r3, r7, r3
    2126:	2202      	movs	r2, #2
    2128:	5e9b      	ldrsh	r3, [r3, r2]
    212a:	b29b      	uxth	r3, r3
    212c:	331a      	adds	r3, #26
    212e:	b29b      	uxth	r3, r3
    2130:	b21b      	sxth	r3, r3
    2132:	486a      	ldr	r0, [pc, #424]	; (22dc <_Z11quantumGamehh+0x3f4>)
    2134:	22f8      	movs	r2, #248	; 0xf8
    2136:	0212      	lsls	r2, r2, #8
    2138:	9201      	str	r2, [sp, #4]
    213a:	9300      	str	r3, [sp, #0]
    213c:	002b      	movs	r3, r5
    213e:	0022      	movs	r2, r4
    2140:	f00a fc1f 	bl	c982 <_ZN12Adafruit_GFX8drawLineEsssst>
					tftDisplay.drawLine(point.x + 2, point.y + 25, point.x + 24, point.y + 25, 0xF800);
    2144:	2310      	movs	r3, #16
    2146:	18fb      	adds	r3, r7, r3
    2148:	2200      	movs	r2, #0
    214a:	5e9b      	ldrsh	r3, [r3, r2]
    214c:	b29b      	uxth	r3, r3
    214e:	3302      	adds	r3, #2
    2150:	b29b      	uxth	r3, r3
    2152:	b219      	sxth	r1, r3
    2154:	2310      	movs	r3, #16
    2156:	18fb      	adds	r3, r7, r3
    2158:	2202      	movs	r2, #2
    215a:	5e9b      	ldrsh	r3, [r3, r2]
    215c:	b29b      	uxth	r3, r3
    215e:	3319      	adds	r3, #25
    2160:	b29b      	uxth	r3, r3
    2162:	b21c      	sxth	r4, r3
    2164:	2310      	movs	r3, #16
    2166:	18fb      	adds	r3, r7, r3
    2168:	2200      	movs	r2, #0
    216a:	5e9b      	ldrsh	r3, [r3, r2]
    216c:	b29b      	uxth	r3, r3
    216e:	3318      	adds	r3, #24
    2170:	b29b      	uxth	r3, r3
    2172:	b21d      	sxth	r5, r3
    2174:	2310      	movs	r3, #16
    2176:	18fb      	adds	r3, r7, r3
    2178:	2202      	movs	r2, #2
    217a:	5e9b      	ldrsh	r3, [r3, r2]
    217c:	b29b      	uxth	r3, r3
    217e:	3319      	adds	r3, #25
    2180:	b29b      	uxth	r3, r3
    2182:	b21b      	sxth	r3, r3
    2184:	4855      	ldr	r0, [pc, #340]	; (22dc <_Z11quantumGamehh+0x3f4>)
    2186:	22f8      	movs	r2, #248	; 0xf8
    2188:	0212      	lsls	r2, r2, #8
    218a:	9201      	str	r2, [sp, #4]
    218c:	9300      	str	r3, [sp, #0]
    218e:	002b      	movs	r3, r5
    2190:	0022      	movs	r2, r4
    2192:	f00a fbf6 	bl	c982 <_ZN12Adafruit_GFX8drawLineEsssst>
			for (uint8_t i = 0; i < 9; i++) {
    2196:	23fa      	movs	r3, #250	; 0xfa
    2198:	18fb      	adds	r3, r7, r3
    219a:	781a      	ldrb	r2, [r3, #0]
    219c:	23fa      	movs	r3, #250	; 0xfa
    219e:	18fb      	adds	r3, r7, r3
    21a0:	3201      	adds	r2, #1
    21a2:	701a      	strb	r2, [r3, #0]
    21a4:	e783      	b.n	20ae <_Z11quantumGamehh+0x1c6>
				}
			}
			
			// Get the two boxes parameters
			TS_Point square0 = getCounterPosition(recentSquares[0]);
    21a6:	2344      	movs	r3, #68	; 0x44
    21a8:	18fb      	adds	r3, r7, r3
    21aa:	781a      	ldrb	r2, [r3, #0]
    21ac:	2320      	movs	r3, #32
    21ae:	18fb      	adds	r3, r7, r3
    21b0:	0011      	movs	r1, r2
    21b2:	0018      	movs	r0, r3
    21b4:	f7ff fa4e 	bl	1654 <_Z18getCounterPositionh>
			TS_Point square1 = getCounterPosition(recentSquares[1]);
    21b8:	2344      	movs	r3, #68	; 0x44
    21ba:	18fb      	adds	r3, r7, r3
    21bc:	785a      	ldrb	r2, [r3, #1]
    21be:	2318      	movs	r3, #24
    21c0:	18fb      	adds	r3, r7, r3
    21c2:	0011      	movs	r1, r2
    21c4:	0018      	movs	r0, r3
    21c6:	f7ff fa45 	bl	1654 <_Z18getCounterPositionh>
			
			
			// Wait for the user to click one of the two boxes
			uint8_t tappedSquare = 255;
    21ca:	23f9      	movs	r3, #249	; 0xf9
    21cc:	18fb      	adds	r3, r7, r3
    21ce:	22ff      	movs	r2, #255	; 0xff
    21d0:	701a      	strb	r2, [r3, #0]
			while (true) {
				if (!touchScreen.touched()) continue;
    21d2:	4b40      	ldr	r3, [pc, #256]	; (22d4 <_Z11quantumGamehh+0x3ec>)
    21d4:	0018      	movs	r0, r3
    21d6:	f005 f885 	bl	72e4 <_ZN15Adafruit_FT62067touchedEv>
    21da:	0003      	movs	r3, r0
    21dc:	425a      	negs	r2, r3
    21de:	4153      	adcs	r3, r2
    21e0:	b2db      	uxtb	r3, r3
    21e2:	2b00      	cmp	r3, #0
    21e4:	d000      	beq.n	21e8 <_Z11quantumGamehh+0x300>
    21e6:	e070      	b.n	22ca <_Z11quantumGamehh+0x3e2>
				TS_Point point = getPoint();
    21e8:	2308      	movs	r3, #8
    21ea:	18fb      	adds	r3, r7, r3
    21ec:	0018      	movs	r0, r3
    21ee:	f7ff f8ad 	bl	134c <_Z8getPointv>
				if (point.x > square0.x && point.x < square0.x + 80 && point.y > square0.y && point.y < square0.y + 80) {
    21f2:	2308      	movs	r3, #8
    21f4:	18fb      	adds	r3, r7, r3
    21f6:	2200      	movs	r2, #0
    21f8:	5e9a      	ldrsh	r2, [r3, r2]
    21fa:	2320      	movs	r3, #32
    21fc:	18fb      	adds	r3, r7, r3
    21fe:	2100      	movs	r1, #0
    2200:	5e5b      	ldrsh	r3, [r3, r1]
    2202:	429a      	cmp	r2, r3
    2204:	dd28      	ble.n	2258 <_Z11quantumGamehh+0x370>
    2206:	2308      	movs	r3, #8
    2208:	18fb      	adds	r3, r7, r3
    220a:	2200      	movs	r2, #0
    220c:	5e9b      	ldrsh	r3, [r3, r2]
    220e:	001a      	movs	r2, r3
    2210:	2320      	movs	r3, #32
    2212:	18fb      	adds	r3, r7, r3
    2214:	2100      	movs	r1, #0
    2216:	5e5b      	ldrsh	r3, [r3, r1]
    2218:	3350      	adds	r3, #80	; 0x50
    221a:	429a      	cmp	r2, r3
    221c:	da1c      	bge.n	2258 <_Z11quantumGamehh+0x370>
    221e:	2308      	movs	r3, #8
    2220:	18fb      	adds	r3, r7, r3
    2222:	2202      	movs	r2, #2
    2224:	5e9a      	ldrsh	r2, [r3, r2]
    2226:	2320      	movs	r3, #32
    2228:	18fb      	adds	r3, r7, r3
    222a:	2102      	movs	r1, #2
    222c:	5e5b      	ldrsh	r3, [r3, r1]
    222e:	429a      	cmp	r2, r3
    2230:	dd12      	ble.n	2258 <_Z11quantumGamehh+0x370>
    2232:	2308      	movs	r3, #8
    2234:	18fb      	adds	r3, r7, r3
    2236:	2202      	movs	r2, #2
    2238:	5e9b      	ldrsh	r3, [r3, r2]
    223a:	001a      	movs	r2, r3
    223c:	2320      	movs	r3, #32
    223e:	18fb      	adds	r3, r7, r3
    2240:	2102      	movs	r1, #2
    2242:	5e5b      	ldrsh	r3, [r3, r1]
    2244:	3350      	adds	r3, #80	; 0x50
    2246:	429a      	cmp	r2, r3
    2248:	da06      	bge.n	2258 <_Z11quantumGamehh+0x370>
					tappedSquare = recentSquares[0];
    224a:	23f9      	movs	r3, #249	; 0xf9
    224c:	18fb      	adds	r3, r7, r3
    224e:	2244      	movs	r2, #68	; 0x44
    2250:	18ba      	adds	r2, r7, r2
    2252:	7812      	ldrb	r2, [r2, #0]
    2254:	701a      	strb	r2, [r3, #0]
					break;
    2256:	e032      	b.n	22be <_Z11quantumGamehh+0x3d6>
				} else if (point.x > square1.x && point.x < square1.x + 80 && point.y > square1.y && point.y < square1.y + 80) {
    2258:	2308      	movs	r3, #8
    225a:	18fb      	adds	r3, r7, r3
    225c:	2200      	movs	r2, #0
    225e:	5e9a      	ldrsh	r2, [r3, r2]
    2260:	2318      	movs	r3, #24
    2262:	18fb      	adds	r3, r7, r3
    2264:	2100      	movs	r1, #0
    2266:	5e5b      	ldrsh	r3, [r3, r1]
    2268:	429a      	cmp	r2, r3
    226a:	ddb2      	ble.n	21d2 <_Z11quantumGamehh+0x2ea>
    226c:	2308      	movs	r3, #8
    226e:	18fb      	adds	r3, r7, r3
    2270:	2200      	movs	r2, #0
    2272:	5e9b      	ldrsh	r3, [r3, r2]
    2274:	001a      	movs	r2, r3
    2276:	2318      	movs	r3, #24
    2278:	18fb      	adds	r3, r7, r3
    227a:	2100      	movs	r1, #0
    227c:	5e5b      	ldrsh	r3, [r3, r1]
    227e:	3350      	adds	r3, #80	; 0x50
    2280:	429a      	cmp	r2, r3
    2282:	daa6      	bge.n	21d2 <_Z11quantumGamehh+0x2ea>
    2284:	2308      	movs	r3, #8
    2286:	18fb      	adds	r3, r7, r3
    2288:	2202      	movs	r2, #2
    228a:	5e9a      	ldrsh	r2, [r3, r2]
    228c:	2318      	movs	r3, #24
    228e:	18fb      	adds	r3, r7, r3
    2290:	2102      	movs	r1, #2
    2292:	5e5b      	ldrsh	r3, [r3, r1]
    2294:	429a      	cmp	r2, r3
    2296:	dd9c      	ble.n	21d2 <_Z11quantumGamehh+0x2ea>
    2298:	2308      	movs	r3, #8
    229a:	18fb      	adds	r3, r7, r3
    229c:	2202      	movs	r2, #2
    229e:	5e9b      	ldrsh	r3, [r3, r2]
    22a0:	001a      	movs	r2, r3
    22a2:	2318      	movs	r3, #24
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	2102      	movs	r1, #2
    22a8:	5e5b      	ldrsh	r3, [r3, r1]
    22aa:	3350      	adds	r3, #80	; 0x50
    22ac:	429a      	cmp	r2, r3
    22ae:	da90      	bge.n	21d2 <_Z11quantumGamehh+0x2ea>
					tappedSquare = recentSquares[1];
    22b0:	23f9      	movs	r3, #249	; 0xf9
    22b2:	18fb      	adds	r3, r7, r3
    22b4:	2244      	movs	r2, #68	; 0x44
    22b6:	18ba      	adds	r2, r7, r2
    22b8:	7852      	ldrb	r2, [r2, #1]
    22ba:	701a      	strb	r2, [r3, #0]
					break;
    22bc:	46c0      	nop			; (mov r8, r8)
				}
			}


			// Turn to classical counters
			if (tappedSquare != 255) {
    22be:	23f9      	movs	r3, #249	; 0xf9
    22c0:	18fb      	adds	r3, r7, r3
    22c2:	781b      	ldrb	r3, [r3, #0]
    22c4:	2bff      	cmp	r3, #255	; 0xff
    22c6:	d10b      	bne.n	22e0 <_Z11quantumGamehh+0x3f8>
    22c8:	e022      	b.n	2310 <_Z11quantumGamehh+0x428>
				if (!touchScreen.touched()) continue;
    22ca:	46c0      	nop			; (mov r8, r8)
			}
    22cc:	e781      	b.n	21d2 <_Z11quantumGamehh+0x2ea>
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	00013368 	.word	0x00013368
    22d4:	20000320 	.word	0x20000320
    22d8:	0001336c 	.word	0x0001336c
    22dc:	200002bc 	.word	0x200002bc
				drawClassicalCounters(boardState, tappedSquare, turn + 1, tappedSquare, turn + 1);
    22e0:	23fe      	movs	r3, #254	; 0xfe
    22e2:	18fb      	adds	r3, r7, r3
    22e4:	781b      	ldrb	r3, [r3, #0]
    22e6:	3301      	adds	r3, #1
    22e8:	b2dc      	uxtb	r4, r3
    22ea:	23fe      	movs	r3, #254	; 0xfe
    22ec:	18fb      	adds	r3, r7, r3
    22ee:	781b      	ldrb	r3, [r3, #0]
    22f0:	3301      	adds	r3, #1
    22f2:	b2db      	uxtb	r3, r3
    22f4:	22f9      	movs	r2, #249	; 0xf9
    22f6:	18ba      	adds	r2, r7, r2
    22f8:	7815      	ldrb	r5, [r2, #0]
    22fa:	22f9      	movs	r2, #249	; 0xf9
    22fc:	18ba      	adds	r2, r7, r2
    22fe:	7811      	ldrb	r1, [r2, #0]
    2300:	2250      	movs	r2, #80	; 0x50
    2302:	18b8      	adds	r0, r7, r2
    2304:	9300      	str	r3, [sp, #0]
    2306:	002b      	movs	r3, r5
    2308:	0022      	movs	r2, r4
    230a:	f7ff fbc2 	bl	1a92 <_Z21drawClassicalCountersPA11_hhhhh>
    230e:	e005      	b.n	231c <_Z11quantumGamehh+0x434>
			} else {
				Serial.println(F("Error"));
    2310:	4aa6      	ldr	r2, [pc, #664]	; (25ac <_Z11quantumGamehh+0x6c4>)
    2312:	4ba7      	ldr	r3, [pc, #668]	; (25b0 <_Z11quantumGamehh+0x6c8>)
    2314:	0011      	movs	r1, r2
    2316:	0018      	movs	r0, r3
    2318:	f000 ff1e 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
			}
		} 
		
		// winningRows[x][0] = winner
		// winningRows[x][1] = subscript total
		uint8_t winningRows[3][2] = {{0, 0}, {0, 0}, {0, 0}};
    231c:	2330      	movs	r3, #48	; 0x30
    231e:	18fb      	adds	r3, r7, r3
    2320:	0018      	movs	r0, r3
    2322:	2306      	movs	r3, #6
    2324:	001a      	movs	r2, r3
    2326:	2100      	movs	r1, #0
    2328:	f00e fab6 	bl	10898 <memset>
		uint8_t numOfWinningRows = 0;
    232c:	23f8      	movs	r3, #248	; 0xf8
    232e:	18fb      	adds	r3, r7, r3
    2330:	2200      	movs	r2, #0
    2332:	701a      	strb	r2, [r3, #0]
		// Check to see if someone has won
		for (uint8_t i = 0; i < 8; i++) {
    2334:	23f7      	movs	r3, #247	; 0xf7
    2336:	18fb      	adds	r3, r7, r3
    2338:	2200      	movs	r2, #0
    233a:	701a      	strb	r2, [r3, #0]
    233c:	23f7      	movs	r3, #247	; 0xf7
    233e:	18fb      	adds	r3, r7, r3
    2340:	781b      	ldrb	r3, [r3, #0]
    2342:	2b07      	cmp	r3, #7
    2344:	dd00      	ble.n	2348 <_Z11quantumGamehh+0x460>
    2346:	e0c6      	b.n	24d6 <_Z11quantumGamehh+0x5ee>
			if (boardState[winIndexes[i][0]][0] == boardState[winIndexes[i][1]][0]
    2348:	23f7      	movs	r3, #247	; 0xf7
    234a:	18fb      	adds	r3, r7, r3
    234c:	781a      	ldrb	r2, [r3, #0]
    234e:	4999      	ldr	r1, [pc, #612]	; (25b4 <_Z11quantumGamehh+0x6cc>)
    2350:	0013      	movs	r3, r2
    2352:	005b      	lsls	r3, r3, #1
    2354:	189b      	adds	r3, r3, r2
    2356:	5c5b      	ldrb	r3, [r3, r1]
    2358:	001a      	movs	r2, r3
    235a:	2350      	movs	r3, #80	; 0x50
    235c:	18f9      	adds	r1, r7, r3
    235e:	0013      	movs	r3, r2
    2360:	009b      	lsls	r3, r3, #2
    2362:	189b      	adds	r3, r3, r2
    2364:	005b      	lsls	r3, r3, #1
    2366:	189b      	adds	r3, r3, r2
    2368:	5c59      	ldrb	r1, [r3, r1]
    236a:	23f7      	movs	r3, #247	; 0xf7
    236c:	18fb      	adds	r3, r7, r3
    236e:	781a      	ldrb	r2, [r3, #0]
    2370:	4890      	ldr	r0, [pc, #576]	; (25b4 <_Z11quantumGamehh+0x6cc>)
    2372:	0013      	movs	r3, r2
    2374:	005b      	lsls	r3, r3, #1
    2376:	189b      	adds	r3, r3, r2
    2378:	18c3      	adds	r3, r0, r3
    237a:	3301      	adds	r3, #1
    237c:	781b      	ldrb	r3, [r3, #0]
    237e:	001a      	movs	r2, r3
    2380:	2350      	movs	r3, #80	; 0x50
    2382:	18f8      	adds	r0, r7, r3
    2384:	0013      	movs	r3, r2
    2386:	009b      	lsls	r3, r3, #2
    2388:	189b      	adds	r3, r3, r2
    238a:	005b      	lsls	r3, r3, #1
    238c:	189b      	adds	r3, r3, r2
    238e:	5c1b      	ldrb	r3, [r3, r0]
    2390:	4299      	cmp	r1, r3
    2392:	d000      	beq.n	2396 <_Z11quantumGamehh+0x4ae>
    2394:	e097      	b.n	24c6 <_Z11quantumGamehh+0x5de>
			&& boardState[winIndexes[i][0]][0] == boardState[winIndexes[i][2]][0]
    2396:	23f7      	movs	r3, #247	; 0xf7
    2398:	18fb      	adds	r3, r7, r3
    239a:	781a      	ldrb	r2, [r3, #0]
    239c:	4985      	ldr	r1, [pc, #532]	; (25b4 <_Z11quantumGamehh+0x6cc>)
    239e:	0013      	movs	r3, r2
    23a0:	005b      	lsls	r3, r3, #1
    23a2:	189b      	adds	r3, r3, r2
    23a4:	5c5b      	ldrb	r3, [r3, r1]
    23a6:	001a      	movs	r2, r3
    23a8:	2350      	movs	r3, #80	; 0x50
    23aa:	18f9      	adds	r1, r7, r3
    23ac:	0013      	movs	r3, r2
    23ae:	009b      	lsls	r3, r3, #2
    23b0:	189b      	adds	r3, r3, r2
    23b2:	005b      	lsls	r3, r3, #1
    23b4:	189b      	adds	r3, r3, r2
    23b6:	5c59      	ldrb	r1, [r3, r1]
    23b8:	23f7      	movs	r3, #247	; 0xf7
    23ba:	18fb      	adds	r3, r7, r3
    23bc:	781a      	ldrb	r2, [r3, #0]
    23be:	487d      	ldr	r0, [pc, #500]	; (25b4 <_Z11quantumGamehh+0x6cc>)
    23c0:	0013      	movs	r3, r2
    23c2:	005b      	lsls	r3, r3, #1
    23c4:	189b      	adds	r3, r3, r2
    23c6:	18c3      	adds	r3, r0, r3
    23c8:	3302      	adds	r3, #2
    23ca:	781b      	ldrb	r3, [r3, #0]
    23cc:	001a      	movs	r2, r3
    23ce:	2350      	movs	r3, #80	; 0x50
    23d0:	18f8      	adds	r0, r7, r3
    23d2:	0013      	movs	r3, r2
    23d4:	009b      	lsls	r3, r3, #2
    23d6:	189b      	adds	r3, r3, r2
    23d8:	005b      	lsls	r3, r3, #1
    23da:	189b      	adds	r3, r3, r2
    23dc:	5c1b      	ldrb	r3, [r3, r0]
    23de:	4299      	cmp	r1, r3
    23e0:	d171      	bne.n	24c6 <_Z11quantumGamehh+0x5de>
			&& boardState[winIndexes[i][0]][0] != 0) {
    23e2:	23f7      	movs	r3, #247	; 0xf7
    23e4:	18fb      	adds	r3, r7, r3
    23e6:	781a      	ldrb	r2, [r3, #0]
    23e8:	4972      	ldr	r1, [pc, #456]	; (25b4 <_Z11quantumGamehh+0x6cc>)
    23ea:	0013      	movs	r3, r2
    23ec:	005b      	lsls	r3, r3, #1
    23ee:	189b      	adds	r3, r3, r2
    23f0:	5c5b      	ldrb	r3, [r3, r1]
    23f2:	001a      	movs	r2, r3
    23f4:	2350      	movs	r3, #80	; 0x50
    23f6:	18f9      	adds	r1, r7, r3
    23f8:	0013      	movs	r3, r2
    23fa:	009b      	lsls	r3, r3, #2
    23fc:	189b      	adds	r3, r3, r2
    23fe:	005b      	lsls	r3, r3, #1
    2400:	189b      	adds	r3, r3, r2
    2402:	5c5b      	ldrb	r3, [r3, r1]
    2404:	2b00      	cmp	r3, #0
    2406:	d05e      	beq.n	24c6 <_Z11quantumGamehh+0x5de>
				// Someone has won
				
				// Add the player that won to winningRows
				winningRows[numOfWinningRows][0] = boardState[winIndexes[i][0]][0];
    2408:	23f8      	movs	r3, #248	; 0xf8
    240a:	18fb      	adds	r3, r7, r3
    240c:	7819      	ldrb	r1, [r3, #0]
    240e:	23f7      	movs	r3, #247	; 0xf7
    2410:	18fb      	adds	r3, r7, r3
    2412:	781a      	ldrb	r2, [r3, #0]
    2414:	4867      	ldr	r0, [pc, #412]	; (25b4 <_Z11quantumGamehh+0x6cc>)
    2416:	0013      	movs	r3, r2
    2418:	005b      	lsls	r3, r3, #1
    241a:	189b      	adds	r3, r3, r2
    241c:	5c1b      	ldrb	r3, [r3, r0]
    241e:	001a      	movs	r2, r3
    2420:	2350      	movs	r3, #80	; 0x50
    2422:	18f8      	adds	r0, r7, r3
    2424:	0013      	movs	r3, r2
    2426:	009b      	lsls	r3, r3, #2
    2428:	189b      	adds	r3, r3, r2
    242a:	005b      	lsls	r3, r3, #1
    242c:	189b      	adds	r3, r3, r2
    242e:	5c18      	ldrb	r0, [r3, r0]
    2430:	2330      	movs	r3, #48	; 0x30
    2432:	18fb      	adds	r3, r7, r3
    2434:	004a      	lsls	r2, r1, #1
    2436:	1c01      	adds	r1, r0, #0
    2438:	54d1      	strb	r1, [r2, r3]
				
				// Total the subscripts and store in winningRows
				uint8_t subscriptTotal = 0;
    243a:	23f6      	movs	r3, #246	; 0xf6
    243c:	18fb      	adds	r3, r7, r3
    243e:	2200      	movs	r2, #0
    2440:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = 0; j < 3; j++) {
    2442:	23f5      	movs	r3, #245	; 0xf5
    2444:	18fb      	adds	r3, r7, r3
    2446:	2200      	movs	r2, #0
    2448:	701a      	strb	r2, [r3, #0]
    244a:	23f5      	movs	r3, #245	; 0xf5
    244c:	18fb      	adds	r3, r7, r3
    244e:	781b      	ldrb	r3, [r3, #0]
    2450:	2b02      	cmp	r3, #2
    2452:	dc25      	bgt.n	24a0 <_Z11quantumGamehh+0x5b8>
					subscriptTotal += boardState[winIndexes[i][j]][1];
    2454:	23f7      	movs	r3, #247	; 0xf7
    2456:	18fb      	adds	r3, r7, r3
    2458:	781a      	ldrb	r2, [r3, #0]
    245a:	23f5      	movs	r3, #245	; 0xf5
    245c:	18fb      	adds	r3, r7, r3
    245e:	7819      	ldrb	r1, [r3, #0]
    2460:	4854      	ldr	r0, [pc, #336]	; (25b4 <_Z11quantumGamehh+0x6cc>)
    2462:	0013      	movs	r3, r2
    2464:	005b      	lsls	r3, r3, #1
    2466:	189b      	adds	r3, r3, r2
    2468:	18c3      	adds	r3, r0, r3
    246a:	5c5b      	ldrb	r3, [r3, r1]
    246c:	001a      	movs	r2, r3
    246e:	2350      	movs	r3, #80	; 0x50
    2470:	18f9      	adds	r1, r7, r3
    2472:	0013      	movs	r3, r2
    2474:	009b      	lsls	r3, r3, #2
    2476:	189b      	adds	r3, r3, r2
    2478:	005b      	lsls	r3, r3, #1
    247a:	189b      	adds	r3, r3, r2
    247c:	18cb      	adds	r3, r1, r3
    247e:	3301      	adds	r3, #1
    2480:	7819      	ldrb	r1, [r3, #0]
    2482:	23f6      	movs	r3, #246	; 0xf6
    2484:	18fb      	adds	r3, r7, r3
    2486:	22f6      	movs	r2, #246	; 0xf6
    2488:	18ba      	adds	r2, r7, r2
    248a:	7812      	ldrb	r2, [r2, #0]
    248c:	188a      	adds	r2, r1, r2
    248e:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = 0; j < 3; j++) {
    2490:	23f5      	movs	r3, #245	; 0xf5
    2492:	18fb      	adds	r3, r7, r3
    2494:	781a      	ldrb	r2, [r3, #0]
    2496:	23f5      	movs	r3, #245	; 0xf5
    2498:	18fb      	adds	r3, r7, r3
    249a:	3201      	adds	r2, #1
    249c:	701a      	strb	r2, [r3, #0]
    249e:	e7d4      	b.n	244a <_Z11quantumGamehh+0x562>
				}
				winningRows[numOfWinningRows][1] = subscriptTotal;
    24a0:	23f8      	movs	r3, #248	; 0xf8
    24a2:	18fb      	adds	r3, r7, r3
    24a4:	781b      	ldrb	r3, [r3, #0]
    24a6:	2230      	movs	r2, #48	; 0x30
    24a8:	18ba      	adds	r2, r7, r2
    24aa:	005b      	lsls	r3, r3, #1
    24ac:	18d3      	adds	r3, r2, r3
    24ae:	3301      	adds	r3, #1
    24b0:	22f6      	movs	r2, #246	; 0xf6
    24b2:	18ba      	adds	r2, r7, r2
    24b4:	7812      	ldrb	r2, [r2, #0]
    24b6:	701a      	strb	r2, [r3, #0]
				numOfWinningRows++;
    24b8:	23f8      	movs	r3, #248	; 0xf8
    24ba:	18fb      	adds	r3, r7, r3
    24bc:	781a      	ldrb	r2, [r3, #0]
    24be:	23f8      	movs	r3, #248	; 0xf8
    24c0:	18fb      	adds	r3, r7, r3
    24c2:	3201      	adds	r2, #1
    24c4:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++) {
    24c6:	23f7      	movs	r3, #247	; 0xf7
    24c8:	18fb      	adds	r3, r7, r3
    24ca:	781a      	ldrb	r2, [r3, #0]
    24cc:	23f7      	movs	r3, #247	; 0xf7
    24ce:	18fb      	adds	r3, r7, r3
    24d0:	3201      	adds	r2, #1
    24d2:	701a      	strb	r2, [r3, #0]
    24d4:	e732      	b.n	233c <_Z11quantumGamehh+0x454>
			}
		}
		
		// Find the winner if one exists
		uint8_t highestSubscript = 0;
    24d6:	23f4      	movs	r3, #244	; 0xf4
    24d8:	18fb      	adds	r3, r7, r3
    24da:	2200      	movs	r2, #0
    24dc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 3; i++) {
    24de:	23f3      	movs	r3, #243	; 0xf3
    24e0:	18fb      	adds	r3, r7, r3
    24e2:	2200      	movs	r2, #0
    24e4:	701a      	strb	r2, [r3, #0]
    24e6:	23f3      	movs	r3, #243	; 0xf3
    24e8:	18fb      	adds	r3, r7, r3
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	2b02      	cmp	r3, #2
    24ee:	dc2c      	bgt.n	254a <_Z11quantumGamehh+0x662>
			if (winningRows[i][1] > highestSubscript) {
    24f0:	23f3      	movs	r3, #243	; 0xf3
    24f2:	18fb      	adds	r3, r7, r3
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	2230      	movs	r2, #48	; 0x30
    24f8:	18ba      	adds	r2, r7, r2
    24fa:	005b      	lsls	r3, r3, #1
    24fc:	18d3      	adds	r3, r2, r3
    24fe:	3301      	adds	r3, #1
    2500:	781b      	ldrb	r3, [r3, #0]
    2502:	001a      	movs	r2, r3
    2504:	23f4      	movs	r3, #244	; 0xf4
    2506:	18fb      	adds	r3, r7, r3
    2508:	781b      	ldrb	r3, [r3, #0]
    250a:	429a      	cmp	r2, r3
    250c:	dd15      	ble.n	253a <_Z11quantumGamehh+0x652>
				winner = winningRows[i][0];
    250e:	23f3      	movs	r3, #243	; 0xf3
    2510:	18fb      	adds	r3, r7, r3
    2512:	7819      	ldrb	r1, [r3, #0]
    2514:	23fd      	movs	r3, #253	; 0xfd
    2516:	18fb      	adds	r3, r7, r3
    2518:	2230      	movs	r2, #48	; 0x30
    251a:	18ba      	adds	r2, r7, r2
    251c:	0049      	lsls	r1, r1, #1
    251e:	5c8a      	ldrb	r2, [r1, r2]
    2520:	701a      	strb	r2, [r3, #0]
				highestSubscript = winningRows[i][1];
    2522:	23f3      	movs	r3, #243	; 0xf3
    2524:	18fb      	adds	r3, r7, r3
    2526:	781a      	ldrb	r2, [r3, #0]
    2528:	23f4      	movs	r3, #244	; 0xf4
    252a:	18fb      	adds	r3, r7, r3
    252c:	2130      	movs	r1, #48	; 0x30
    252e:	1879      	adds	r1, r7, r1
    2530:	0052      	lsls	r2, r2, #1
    2532:	188a      	adds	r2, r1, r2
    2534:	3201      	adds	r2, #1
    2536:	7812      	ldrb	r2, [r2, #0]
    2538:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 3; i++) {
    253a:	23f3      	movs	r3, #243	; 0xf3
    253c:	18fb      	adds	r3, r7, r3
    253e:	781a      	ldrb	r2, [r3, #0]
    2540:	23f3      	movs	r3, #243	; 0xf3
    2542:	18fb      	adds	r3, r7, r3
    2544:	3201      	adds	r2, #1
    2546:	701a      	strb	r2, [r3, #0]
    2548:	e7cd      	b.n	24e6 <_Z11quantumGamehh+0x5fe>
			}
		}
		
		Serial.print(F("winner = "));
    254a:	4a1b      	ldr	r2, [pc, #108]	; (25b8 <_Z11quantumGamehh+0x6d0>)
    254c:	4b18      	ldr	r3, [pc, #96]	; (25b0 <_Z11quantumGamehh+0x6c8>)
    254e:	0011      	movs	r1, r2
    2550:	0018      	movs	r0, r3
    2552:	f000 fd46 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(winner);
    2556:	23fd      	movs	r3, #253	; 0xfd
    2558:	18fb      	adds	r3, r7, r3
    255a:	7819      	ldrb	r1, [r3, #0]
    255c:	4b14      	ldr	r3, [pc, #80]	; (25b0 <_Z11quantumGamehh+0x6c8>)
    255e:	220a      	movs	r2, #10
    2560:	0018      	movs	r0, r3
    2562:	f000 fe5c 	bl	321e <_ZN5Print7printlnEhi>
		if (winner != 0) break;
    2566:	23fd      	movs	r3, #253	; 0xfd
    2568:	18fb      	adds	r3, r7, r3
    256a:	781b      	ldrb	r3, [r3, #0]
    256c:	2b00      	cmp	r3, #0
    256e:	d115      	bne.n	259c <_Z11quantumGamehh+0x6b4>
		
		turn++;
    2570:	23fe      	movs	r3, #254	; 0xfe
    2572:	18fb      	adds	r3, r7, r3
    2574:	781a      	ldrb	r2, [r3, #0]
    2576:	23fe      	movs	r3, #254	; 0xfe
    2578:	18fb      	adds	r3, r7, r3
    257a:	3201      	adds	r2, #1
    257c:	701a      	strb	r2, [r3, #0]
		(player == 1) ? player = 2 : player = 1;
    257e:	23ff      	movs	r3, #255	; 0xff
    2580:	18fb      	adds	r3, r7, r3
    2582:	781b      	ldrb	r3, [r3, #0]
    2584:	2b01      	cmp	r3, #1
    2586:	d104      	bne.n	2592 <_Z11quantumGamehh+0x6aa>
    2588:	23ff      	movs	r3, #255	; 0xff
    258a:	18fb      	adds	r3, r7, r3
    258c:	2202      	movs	r2, #2
    258e:	701a      	strb	r2, [r3, #0]
    2590:	e4d9      	b.n	1f46 <_Z11quantumGamehh+0x5e>
    2592:	23ff      	movs	r3, #255	; 0xff
    2594:	18fb      	adds	r3, r7, r3
    2596:	2201      	movs	r2, #1
    2598:	701a      	strb	r2, [r3, #0]
	while (bigCounters < 9) {
    259a:	e4d4      	b.n	1f46 <_Z11quantumGamehh+0x5e>
		if (winner != 0) break;
    259c:	46c0      	nop			; (mov r8, r8)
	}
	return winner;
    259e:	23fd      	movs	r3, #253	; 0xfd
    25a0:	18fb      	adds	r3, r7, r3
    25a2:	781b      	ldrb	r3, [r3, #0]
}
    25a4:	0018      	movs	r0, r3
    25a6:	46bd      	mov	sp, r7
    25a8:	b040      	add	sp, #256	; 0x100
    25aa:	bdb0      	pop	{r4, r5, r7, pc}
    25ac:	00013360 	.word	0x00013360
    25b0:	20000e94 	.word	0x20000e94
    25b4:	20000004 	.word	0x20000004
    25b8:	00013354 	.word	0x00013354

000025bc <_Z9playMatchi>:

void playMatch(int maxGames) {
    25bc:	b590      	push	{r4, r7, lr}
    25be:	b089      	sub	sp, #36	; 0x24
    25c0:	af00      	add	r7, sp, #0
    25c2:	6078      	str	r0, [r7, #4]
	uint8_t noughtsScore = 0;
    25c4:	231f      	movs	r3, #31
    25c6:	18fb      	adds	r3, r7, r3
    25c8:	2200      	movs	r2, #0
    25ca:	701a      	strb	r2, [r3, #0]
	uint8_t crossesScore = 0;
    25cc:	231e      	movs	r3, #30
    25ce:	18fb      	adds	r3, r7, r3
    25d0:	2200      	movs	r2, #0
    25d2:	701a      	strb	r2, [r3, #0]
	uint8_t gamesPlayed = 0;
    25d4:	231d      	movs	r3, #29
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	2200      	movs	r2, #0
    25da:	701a      	strb	r2, [r3, #0]

	// Draw score bar for match
	drawBitmap('a', 0, 0);
    25dc:	2200      	movs	r2, #0
    25de:	2100      	movs	r1, #0
    25e0:	2061      	movs	r0, #97	; 0x61
    25e2:	f7fd fe3f 	bl	264 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
    25e6:	2220      	movs	r2, #32
    25e8:	2176      	movs	r1, #118	; 0x76
    25ea:	2063      	movs	r0, #99	; 0x63
    25ec:	f7fd fe3a 	bl	264 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
    25f0:	231f      	movs	r3, #31
    25f2:	18fb      	adds	r3, r7, r3
    25f4:	781a      	ldrb	r2, [r3, #0]
    25f6:	231e      	movs	r3, #30
    25f8:	18fb      	adds	r3, r7, r3
    25fa:	781b      	ldrb	r3, [r3, #0]
    25fc:	0019      	movs	r1, r3
    25fe:	0010      	movs	r0, r2
    2600:	f7fe ff54 	bl	14ac <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
    2604:	220a      	movs	r2, #10
    2606:	2151      	movs	r1, #81	; 0x51
    2608:	2062      	movs	r0, #98	; 0x62
    260a:	f7fd fe2b 	bl	264 <_Z10drawBitmapcss>

	while (gamesPlayed < maxGames) {
    260e:	231d      	movs	r3, #29
    2610:	18fb      	adds	r3, r7, r3
    2612:	781a      	ldrb	r2, [r3, #0]
    2614:	687b      	ldr	r3, [r7, #4]
    2616:	429a      	cmp	r2, r3
    2618:	db00      	blt.n	261c <_Z9playMatchi+0x60>
    261a:	e0e6      	b.n	27ea <_Z9playMatchi+0x22e>
		State winner = game(noughtsScore, crossesScore);
    261c:	231b      	movs	r3, #27
    261e:	18fc      	adds	r4, r7, r3
    2620:	231e      	movs	r3, #30
    2622:	18fb      	adds	r3, r7, r3
    2624:	781a      	ldrb	r2, [r3, #0]
    2626:	231f      	movs	r3, #31
    2628:	18fb      	adds	r3, r7, r3
    262a:	781b      	ldrb	r3, [r3, #0]
    262c:	0011      	movs	r1, r2
    262e:	0018      	movs	r0, r3
    2630:	f7ff fb3c 	bl	1cac <_Z4gamehh>
    2634:	0003      	movs	r3, r0
    2636:	7023      	strb	r3, [r4, #0]

		// Select win banner and add to winners score
		char bitmap;
		switch (winner) {
    2638:	231b      	movs	r3, #27
    263a:	18fb      	adds	r3, r7, r3
    263c:	781b      	ldrb	r3, [r3, #0]
    263e:	2b01      	cmp	r3, #1
    2640:	d017      	beq.n	2672 <_Z9playMatchi+0xb6>
    2642:	2b02      	cmp	r3, #2
    2644:	d002      	beq.n	264c <_Z9playMatchi+0x90>
    2646:	2b00      	cmp	r3, #0
    2648:	d026      	beq.n	2698 <_Z9playMatchi+0xdc>
    264a:	e02a      	b.n	26a2 <_Z9playMatchi+0xe6>
			case cross:
			// Crosses wins
			bitmap = 'e';
    264c:	231c      	movs	r3, #28
    264e:	18fb      	adds	r3, r7, r3
    2650:	2265      	movs	r2, #101	; 0x65
    2652:	701a      	strb	r2, [r3, #0]
			crossesScore++;
    2654:	231e      	movs	r3, #30
    2656:	18fb      	adds	r3, r7, r3
    2658:	781a      	ldrb	r2, [r3, #0]
    265a:	231e      	movs	r3, #30
    265c:	18fb      	adds	r3, r7, r3
    265e:	3201      	adds	r2, #1
    2660:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    2662:	231d      	movs	r3, #29
    2664:	18fb      	adds	r3, r7, r3
    2666:	781a      	ldrb	r2, [r3, #0]
    2668:	231d      	movs	r3, #29
    266a:	18fb      	adds	r3, r7, r3
    266c:	3201      	adds	r2, #1
    266e:	701a      	strb	r2, [r3, #0]
			break;
    2670:	e017      	b.n	26a2 <_Z9playMatchi+0xe6>
			case nought:
			// Noughts wins
			bitmap = 'g';
    2672:	231c      	movs	r3, #28
    2674:	18fb      	adds	r3, r7, r3
    2676:	2267      	movs	r2, #103	; 0x67
    2678:	701a      	strb	r2, [r3, #0]
			noughtsScore++;
    267a:	231f      	movs	r3, #31
    267c:	18fb      	adds	r3, r7, r3
    267e:	781a      	ldrb	r2, [r3, #0]
    2680:	231f      	movs	r3, #31
    2682:	18fb      	adds	r3, r7, r3
    2684:	3201      	adds	r2, #1
    2686:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    2688:	231d      	movs	r3, #29
    268a:	18fb      	adds	r3, r7, r3
    268c:	781a      	ldrb	r2, [r3, #0]
    268e:	231d      	movs	r3, #29
    2690:	18fb      	adds	r3, r7, r3
    2692:	3201      	adds	r2, #1
    2694:	701a      	strb	r2, [r3, #0]
			break;
    2696:	e004      	b.n	26a2 <_Z9playMatchi+0xe6>
			case empty:
			// Game is a draw
			bitmap = 'f';
    2698:	231c      	movs	r3, #28
    269a:	18fb      	adds	r3, r7, r3
    269c:	2266      	movs	r2, #102	; 0x66
    269e:	701a      	strb	r2, [r3, #0]
			break;
    26a0:	46c0      	nop			; (mov r8, r8)
		}
		
		updateScore(noughtsScore, crossesScore);
    26a2:	231f      	movs	r3, #31
    26a4:	18fb      	adds	r3, r7, r3
    26a6:	781a      	ldrb	r2, [r3, #0]
    26a8:	231e      	movs	r3, #30
    26aa:	18fb      	adds	r3, r7, r3
    26ac:	781b      	ldrb	r3, [r3, #0]
    26ae:	0019      	movs	r1, r3
    26b0:	0010      	movs	r0, r2
    26b2:	f7fe fefb 	bl	14ac <_Z11updateScoreii>
		
		// If there are still games to be played draw win banner,
		// otherwise draw end game screen
		uint8_t gamesToWin = (maxGames / 2) + 1;
    26b6:	687b      	ldr	r3, [r7, #4]
    26b8:	2b00      	cmp	r3, #0
    26ba:	da00      	bge.n	26be <_Z9playMatchi+0x102>
    26bc:	3301      	adds	r3, #1
    26be:	105b      	asrs	r3, r3, #1
    26c0:	b2da      	uxtb	r2, r3
    26c2:	231a      	movs	r3, #26
    26c4:	18fb      	adds	r3, r7, r3
    26c6:	3201      	adds	r2, #1
    26c8:	701a      	strb	r2, [r3, #0]
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    26ca:	231f      	movs	r3, #31
    26cc:	18fb      	adds	r3, r7, r3
    26ce:	781a      	ldrb	r2, [r3, #0]
    26d0:	231a      	movs	r3, #26
    26d2:	18fb      	adds	r3, r7, r3
    26d4:	781b      	ldrb	r3, [r3, #0]
    26d6:	429a      	cmp	r2, r3
    26d8:	da1c      	bge.n	2714 <_Z9playMatchi+0x158>
    26da:	231e      	movs	r3, #30
    26dc:	18fb      	adds	r3, r7, r3
    26de:	781a      	ldrb	r2, [r3, #0]
    26e0:	231a      	movs	r3, #26
    26e2:	18fb      	adds	r3, r7, r3
    26e4:	781b      	ldrb	r3, [r3, #0]
    26e6:	429a      	cmp	r2, r3
    26e8:	da14      	bge.n	2714 <_Z9playMatchi+0x158>
			drawBitmap(bitmap, 0, 110);
    26ea:	231c      	movs	r3, #28
    26ec:	18fb      	adds	r3, r7, r3
    26ee:	781b      	ldrb	r3, [r3, #0]
    26f0:	226e      	movs	r2, #110	; 0x6e
    26f2:	2100      	movs	r1, #0
    26f4:	0018      	movs	r0, r3
    26f6:	f7fd fdb5 	bl	264 <_Z10drawBitmapcss>
			while (true) if (touchScreen.touched()) break;
    26fa:	4b41      	ldr	r3, [pc, #260]	; (2800 <_Z9playMatchi+0x244>)
    26fc:	0018      	movs	r0, r3
    26fe:	f004 fdf1 	bl	72e4 <_ZN15Adafruit_FT62067touchedEv>
    2702:	0003      	movs	r3, r0
    2704:	1e5a      	subs	r2, r3, #1
    2706:	4193      	sbcs	r3, r2
    2708:	b2db      	uxtb	r3, r3
    270a:	2b00      	cmp	r3, #0
    270c:	d100      	bne.n	2710 <_Z9playMatchi+0x154>
    270e:	e7f4      	b.n	26fa <_Z9playMatchi+0x13e>
    2710:	46c0      	nop			; (mov r8, r8)
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    2712:	e068      	b.n	27e6 <_Z9playMatchi+0x22a>
			} else {
			if (crossesScore > noughtsScore) {
    2714:	231e      	movs	r3, #30
    2716:	18fb      	adds	r3, r7, r3
    2718:	781a      	ldrb	r2, [r3, #0]
    271a:	231f      	movs	r3, #31
    271c:	18fb      	adds	r3, r7, r3
    271e:	781b      	ldrb	r3, [r3, #0]
    2720:	429a      	cmp	r2, r3
    2722:	dd30      	ble.n	2786 <_Z9playMatchi+0x1ca>
				// Draw game-over, crosses wins
				drawBitmap('m', 0, 0);
    2724:	2200      	movs	r2, #0
    2726:	2100      	movs	r1, #0
    2728:	206d      	movs	r0, #109	; 0x6d
    272a:	f7fd fd9b 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    272e:	4b34      	ldr	r3, [pc, #208]	; (2800 <_Z9playMatchi+0x244>)
    2730:	0018      	movs	r0, r3
    2732:	f004 fdd7 	bl	72e4 <_ZN15Adafruit_FT62067touchedEv>
    2736:	0003      	movs	r3, r0
    2738:	1e5a      	subs	r2, r3, #1
    273a:	4193      	sbcs	r3, r2
    273c:	b2db      	uxtb	r3, r3
    273e:	2b00      	cmp	r3, #0
    2740:	d01f      	beq.n	2782 <_Z9playMatchi+0x1c6>
						TS_Point point = getPoint();
    2742:	2314      	movs	r3, #20
    2744:	18fb      	adds	r3, r7, r3
    2746:	0018      	movs	r0, r3
    2748:	f7fe fe00 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    274c:	2314      	movs	r3, #20
    274e:	18fb      	adds	r3, r7, r3
    2750:	2200      	movs	r2, #0
    2752:	5e9b      	ldrsh	r3, [r3, r2]
    2754:	2b16      	cmp	r3, #22
    2756:	ddea      	ble.n	272e <_Z9playMatchi+0x172>
    2758:	2314      	movs	r3, #20
    275a:	18fb      	adds	r3, r7, r3
    275c:	2200      	movs	r2, #0
    275e:	5e9b      	ldrsh	r3, [r3, r2]
    2760:	2bd7      	cmp	r3, #215	; 0xd7
    2762:	dce4      	bgt.n	272e <_Z9playMatchi+0x172>
    2764:	2314      	movs	r3, #20
    2766:	18fb      	adds	r3, r7, r3
    2768:	2202      	movs	r2, #2
    276a:	5e9b      	ldrsh	r3, [r3, r2]
    276c:	2bb9      	cmp	r3, #185	; 0xb9
    276e:	ddde      	ble.n	272e <_Z9playMatchi+0x172>
    2770:	2314      	movs	r3, #20
    2772:	18fb      	adds	r3, r7, r3
    2774:	2202      	movs	r2, #2
    2776:	5e9a      	ldrsh	r2, [r3, r2]
    2778:	2384      	movs	r3, #132	; 0x84
    277a:	005b      	lsls	r3, r3, #1
    277c:	429a      	cmp	r2, r3
    277e:	dd33      	ble.n	27e8 <_Z9playMatchi+0x22c>
    2780:	e7d5      	b.n	272e <_Z9playMatchi+0x172>
							// They pressed the start button
							goto exit;
						}
						} else {
						continue;
    2782:	46c0      	nop			; (mov r8, r8)
					}
				}
    2784:	e7d3      	b.n	272e <_Z9playMatchi+0x172>
				} else {
				// Draw game-over, noughts wins
				drawBitmap('n', 0, 0);
    2786:	2200      	movs	r2, #0
    2788:	2100      	movs	r1, #0
    278a:	206e      	movs	r0, #110	; 0x6e
    278c:	f7fd fd6a 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    2790:	4b1b      	ldr	r3, [pc, #108]	; (2800 <_Z9playMatchi+0x244>)
    2792:	0018      	movs	r0, r3
    2794:	f004 fda6 	bl	72e4 <_ZN15Adafruit_FT62067touchedEv>
    2798:	0003      	movs	r3, r0
    279a:	1e5a      	subs	r2, r3, #1
    279c:	4193      	sbcs	r3, r2
    279e:	b2db      	uxtb	r3, r3
    27a0:	2b00      	cmp	r3, #0
    27a2:	d0f5      	beq.n	2790 <_Z9playMatchi+0x1d4>
						TS_Point point = getPoint();
    27a4:	230c      	movs	r3, #12
    27a6:	18fb      	adds	r3, r7, r3
    27a8:	0018      	movs	r0, r3
    27aa:	f7fe fdcf 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    27ae:	230c      	movs	r3, #12
    27b0:	18fb      	adds	r3, r7, r3
    27b2:	2200      	movs	r2, #0
    27b4:	5e9b      	ldrsh	r3, [r3, r2]
    27b6:	2b16      	cmp	r3, #22
    27b8:	dd13      	ble.n	27e2 <_Z9playMatchi+0x226>
    27ba:	230c      	movs	r3, #12
    27bc:	18fb      	adds	r3, r7, r3
    27be:	2200      	movs	r2, #0
    27c0:	5e9b      	ldrsh	r3, [r3, r2]
    27c2:	2bd7      	cmp	r3, #215	; 0xd7
    27c4:	dc0d      	bgt.n	27e2 <_Z9playMatchi+0x226>
    27c6:	230c      	movs	r3, #12
    27c8:	18fb      	adds	r3, r7, r3
    27ca:	2202      	movs	r2, #2
    27cc:	5e9b      	ldrsh	r3, [r3, r2]
    27ce:	2bb9      	cmp	r3, #185	; 0xb9
    27d0:	dd07      	ble.n	27e2 <_Z9playMatchi+0x226>
    27d2:	230c      	movs	r3, #12
    27d4:	18fb      	adds	r3, r7, r3
    27d6:	2202      	movs	r2, #2
    27d8:	5e9a      	ldrsh	r2, [r3, r2]
    27da:	2384      	movs	r3, #132	; 0x84
    27dc:	005b      	lsls	r3, r3, #1
    27de:	429a      	cmp	r2, r3
    27e0:	dd03      	ble.n	27ea <_Z9playMatchi+0x22e>
							// They pressed the start button
							goto exit;
							} else {
							continue;
    27e2:	46c0      	nop			; (mov r8, r8)
						}
					}
				}
    27e4:	e7d4      	b.n	2790 <_Z9playMatchi+0x1d4>
	while (gamesPlayed < maxGames) {
    27e6:	e712      	b.n	260e <_Z9playMatchi+0x52>
							goto exit;
    27e8:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	exit:
	Serial.println("Broke while loop");
    27ea:	4a06      	ldr	r2, [pc, #24]	; (2804 <_Z9playMatchi+0x248>)
    27ec:	4b06      	ldr	r3, [pc, #24]	; (2808 <_Z9playMatchi+0x24c>)
    27ee:	0011      	movs	r1, r2
    27f0:	0018      	movs	r0, r3
    27f2:	f000 fcdd 	bl	31b0 <_ZN5Print7printlnEPKc>
}
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	46bd      	mov	sp, r7
    27fa:	b009      	add	sp, #36	; 0x24
    27fc:	bd90      	pop	{r4, r7, pc}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	20000320 	.word	0x20000320
    2804:	00013378 	.word	0x00013378
    2808:	20000e94 	.word	0x20000e94

0000280c <_Z16playQuantumMatchi>:

void playQuantumMatch(int maxGames) {
    280c:	b590      	push	{r4, r7, lr}
    280e:	b089      	sub	sp, #36	; 0x24
    2810:	af00      	add	r7, sp, #0
    2812:	6078      	str	r0, [r7, #4]
	uint8_t noughtsScore = 0;
    2814:	231f      	movs	r3, #31
    2816:	18fb      	adds	r3, r7, r3
    2818:	2200      	movs	r2, #0
    281a:	701a      	strb	r2, [r3, #0]
	uint8_t crossesScore = 0;
    281c:	231e      	movs	r3, #30
    281e:	18fb      	adds	r3, r7, r3
    2820:	2200      	movs	r2, #0
    2822:	701a      	strb	r2, [r3, #0]
	uint8_t gamesPlayed = 0;
    2824:	231d      	movs	r3, #29
    2826:	18fb      	adds	r3, r7, r3
    2828:	2200      	movs	r2, #0
    282a:	701a      	strb	r2, [r3, #0]

	// Draw score bar for match
	drawBitmap('a', 0, 0);
    282c:	2200      	movs	r2, #0
    282e:	2100      	movs	r1, #0
    2830:	2061      	movs	r0, #97	; 0x61
    2832:	f7fd fd17 	bl	264 <_Z10drawBitmapcss>
	drawBitmap('c', 118, 32);
    2836:	2220      	movs	r2, #32
    2838:	2176      	movs	r1, #118	; 0x76
    283a:	2063      	movs	r0, #99	; 0x63
    283c:	f7fd fd12 	bl	264 <_Z10drawBitmapcss>
	updateScore(noughtsScore, crossesScore);
    2840:	231f      	movs	r3, #31
    2842:	18fb      	adds	r3, r7, r3
    2844:	781a      	ldrb	r2, [r3, #0]
    2846:	231e      	movs	r3, #30
    2848:	18fb      	adds	r3, r7, r3
    284a:	781b      	ldrb	r3, [r3, #0]
    284c:	0019      	movs	r1, r3
    284e:	0010      	movs	r0, r2
    2850:	f7fe fe2c 	bl	14ac <_Z11updateScoreii>
	drawBitmap('b', 81, 10);
    2854:	220a      	movs	r2, #10
    2856:	2151      	movs	r1, #81	; 0x51
    2858:	2062      	movs	r0, #98	; 0x62
    285a:	f7fd fd03 	bl	264 <_Z10drawBitmapcss>

	while (gamesPlayed < maxGames) {
    285e:	231d      	movs	r3, #29
    2860:	18fb      	adds	r3, r7, r3
    2862:	781a      	ldrb	r2, [r3, #0]
    2864:	687b      	ldr	r3, [r7, #4]
    2866:	429a      	cmp	r2, r3
    2868:	db00      	blt.n	286c <_Z16playQuantumMatchi+0x60>
    286a:	e0e6      	b.n	2a3a <_Z16playQuantumMatchi+0x22e>
		uint8_t winner = quantumGame(noughtsScore, crossesScore);
    286c:	231b      	movs	r3, #27
    286e:	18fc      	adds	r4, r7, r3
    2870:	231e      	movs	r3, #30
    2872:	18fb      	adds	r3, r7, r3
    2874:	781a      	ldrb	r2, [r3, #0]
    2876:	231f      	movs	r3, #31
    2878:	18fb      	adds	r3, r7, r3
    287a:	781b      	ldrb	r3, [r3, #0]
    287c:	0011      	movs	r1, r2
    287e:	0018      	movs	r0, r3
    2880:	f7ff fb32 	bl	1ee8 <_Z11quantumGamehh>
    2884:	0003      	movs	r3, r0
    2886:	7023      	strb	r3, [r4, #0]

		// Select win banner and add to winners score
		char bitmap;
		switch (winner) {
    2888:	231b      	movs	r3, #27
    288a:	18fb      	adds	r3, r7, r3
    288c:	781b      	ldrb	r3, [r3, #0]
    288e:	2b01      	cmp	r3, #1
    2890:	d004      	beq.n	289c <_Z16playQuantumMatchi+0x90>
    2892:	2b02      	cmp	r3, #2
    2894:	d015      	beq.n	28c2 <_Z16playQuantumMatchi+0xb6>
    2896:	2b00      	cmp	r3, #0
    2898:	d026      	beq.n	28e8 <_Z16playQuantumMatchi+0xdc>
    289a:	e02a      	b.n	28f2 <_Z16playQuantumMatchi+0xe6>
			case 1:
			// Crosses wins
			bitmap = 'e';
    289c:	231c      	movs	r3, #28
    289e:	18fb      	adds	r3, r7, r3
    28a0:	2265      	movs	r2, #101	; 0x65
    28a2:	701a      	strb	r2, [r3, #0]
			crossesScore++;
    28a4:	231e      	movs	r3, #30
    28a6:	18fb      	adds	r3, r7, r3
    28a8:	781a      	ldrb	r2, [r3, #0]
    28aa:	231e      	movs	r3, #30
    28ac:	18fb      	adds	r3, r7, r3
    28ae:	3201      	adds	r2, #1
    28b0:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    28b2:	231d      	movs	r3, #29
    28b4:	18fb      	adds	r3, r7, r3
    28b6:	781a      	ldrb	r2, [r3, #0]
    28b8:	231d      	movs	r3, #29
    28ba:	18fb      	adds	r3, r7, r3
    28bc:	3201      	adds	r2, #1
    28be:	701a      	strb	r2, [r3, #0]
			break;
    28c0:	e017      	b.n	28f2 <_Z16playQuantumMatchi+0xe6>
			case 2:
			// Noughts wins
			bitmap = 'g';
    28c2:	231c      	movs	r3, #28
    28c4:	18fb      	adds	r3, r7, r3
    28c6:	2267      	movs	r2, #103	; 0x67
    28c8:	701a      	strb	r2, [r3, #0]
			noughtsScore++;
    28ca:	231f      	movs	r3, #31
    28cc:	18fb      	adds	r3, r7, r3
    28ce:	781a      	ldrb	r2, [r3, #0]
    28d0:	231f      	movs	r3, #31
    28d2:	18fb      	adds	r3, r7, r3
    28d4:	3201      	adds	r2, #1
    28d6:	701a      	strb	r2, [r3, #0]
			gamesPlayed++;
    28d8:	231d      	movs	r3, #29
    28da:	18fb      	adds	r3, r7, r3
    28dc:	781a      	ldrb	r2, [r3, #0]
    28de:	231d      	movs	r3, #29
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	3201      	adds	r2, #1
    28e4:	701a      	strb	r2, [r3, #0]
			break;
    28e6:	e004      	b.n	28f2 <_Z16playQuantumMatchi+0xe6>
			case 0:
			// Game is a draw
			bitmap = 'f';
    28e8:	231c      	movs	r3, #28
    28ea:	18fb      	adds	r3, r7, r3
    28ec:	2266      	movs	r2, #102	; 0x66
    28ee:	701a      	strb	r2, [r3, #0]
			break;
    28f0:	46c0      	nop			; (mov r8, r8)
		}
		
		updateScore(noughtsScore, crossesScore);
    28f2:	231f      	movs	r3, #31
    28f4:	18fb      	adds	r3, r7, r3
    28f6:	781a      	ldrb	r2, [r3, #0]
    28f8:	231e      	movs	r3, #30
    28fa:	18fb      	adds	r3, r7, r3
    28fc:	781b      	ldrb	r3, [r3, #0]
    28fe:	0019      	movs	r1, r3
    2900:	0010      	movs	r0, r2
    2902:	f7fe fdd3 	bl	14ac <_Z11updateScoreii>
		
		// If there are still games to be played draw win banner,
		// otherwise draw end game screen
		uint8_t gamesToWin = (maxGames / 2) + 1;
    2906:	687b      	ldr	r3, [r7, #4]
    2908:	2b00      	cmp	r3, #0
    290a:	da00      	bge.n	290e <_Z16playQuantumMatchi+0x102>
    290c:	3301      	adds	r3, #1
    290e:	105b      	asrs	r3, r3, #1
    2910:	b2da      	uxtb	r2, r3
    2912:	231a      	movs	r3, #26
    2914:	18fb      	adds	r3, r7, r3
    2916:	3201      	adds	r2, #1
    2918:	701a      	strb	r2, [r3, #0]
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    291a:	231f      	movs	r3, #31
    291c:	18fb      	adds	r3, r7, r3
    291e:	781a      	ldrb	r2, [r3, #0]
    2920:	231a      	movs	r3, #26
    2922:	18fb      	adds	r3, r7, r3
    2924:	781b      	ldrb	r3, [r3, #0]
    2926:	429a      	cmp	r2, r3
    2928:	da1c      	bge.n	2964 <_Z16playQuantumMatchi+0x158>
    292a:	231e      	movs	r3, #30
    292c:	18fb      	adds	r3, r7, r3
    292e:	781a      	ldrb	r2, [r3, #0]
    2930:	231a      	movs	r3, #26
    2932:	18fb      	adds	r3, r7, r3
    2934:	781b      	ldrb	r3, [r3, #0]
    2936:	429a      	cmp	r2, r3
    2938:	da14      	bge.n	2964 <_Z16playQuantumMatchi+0x158>
			drawBitmap(bitmap, 0, 110);
    293a:	231c      	movs	r3, #28
    293c:	18fb      	adds	r3, r7, r3
    293e:	781b      	ldrb	r3, [r3, #0]
    2940:	226e      	movs	r2, #110	; 0x6e
    2942:	2100      	movs	r1, #0
    2944:	0018      	movs	r0, r3
    2946:	f7fd fc8d 	bl	264 <_Z10drawBitmapcss>
			while (true) if (touchScreen.touched()) break;
    294a:	4b41      	ldr	r3, [pc, #260]	; (2a50 <_Z16playQuantumMatchi+0x244>)
    294c:	0018      	movs	r0, r3
    294e:	f004 fcc9 	bl	72e4 <_ZN15Adafruit_FT62067touchedEv>
    2952:	0003      	movs	r3, r0
    2954:	1e5a      	subs	r2, r3, #1
    2956:	4193      	sbcs	r3, r2
    2958:	b2db      	uxtb	r3, r3
    295a:	2b00      	cmp	r3, #0
    295c:	d100      	bne.n	2960 <_Z16playQuantumMatchi+0x154>
    295e:	e7f4      	b.n	294a <_Z16playQuantumMatchi+0x13e>
    2960:	46c0      	nop			; (mov r8, r8)
		if (noughtsScore < gamesToWin && crossesScore < gamesToWin) {
    2962:	e068      	b.n	2a36 <_Z16playQuantumMatchi+0x22a>
			} else {
			if (crossesScore > noughtsScore) {
    2964:	231e      	movs	r3, #30
    2966:	18fb      	adds	r3, r7, r3
    2968:	781a      	ldrb	r2, [r3, #0]
    296a:	231f      	movs	r3, #31
    296c:	18fb      	adds	r3, r7, r3
    296e:	781b      	ldrb	r3, [r3, #0]
    2970:	429a      	cmp	r2, r3
    2972:	dd30      	ble.n	29d6 <_Z16playQuantumMatchi+0x1ca>
				// Draw game-over, crosses wins
				drawBitmap('m', 0, 0);
    2974:	2200      	movs	r2, #0
    2976:	2100      	movs	r1, #0
    2978:	206d      	movs	r0, #109	; 0x6d
    297a:	f7fd fc73 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    297e:	4b34      	ldr	r3, [pc, #208]	; (2a50 <_Z16playQuantumMatchi+0x244>)
    2980:	0018      	movs	r0, r3
    2982:	f004 fcaf 	bl	72e4 <_ZN15Adafruit_FT62067touchedEv>
    2986:	0003      	movs	r3, r0
    2988:	1e5a      	subs	r2, r3, #1
    298a:	4193      	sbcs	r3, r2
    298c:	b2db      	uxtb	r3, r3
    298e:	2b00      	cmp	r3, #0
    2990:	d01f      	beq.n	29d2 <_Z16playQuantumMatchi+0x1c6>
						TS_Point point = getPoint();
    2992:	2314      	movs	r3, #20
    2994:	18fb      	adds	r3, r7, r3
    2996:	0018      	movs	r0, r3
    2998:	f7fe fcd8 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    299c:	2314      	movs	r3, #20
    299e:	18fb      	adds	r3, r7, r3
    29a0:	2200      	movs	r2, #0
    29a2:	5e9b      	ldrsh	r3, [r3, r2]
    29a4:	2b16      	cmp	r3, #22
    29a6:	ddea      	ble.n	297e <_Z16playQuantumMatchi+0x172>
    29a8:	2314      	movs	r3, #20
    29aa:	18fb      	adds	r3, r7, r3
    29ac:	2200      	movs	r2, #0
    29ae:	5e9b      	ldrsh	r3, [r3, r2]
    29b0:	2bd7      	cmp	r3, #215	; 0xd7
    29b2:	dce4      	bgt.n	297e <_Z16playQuantumMatchi+0x172>
    29b4:	2314      	movs	r3, #20
    29b6:	18fb      	adds	r3, r7, r3
    29b8:	2202      	movs	r2, #2
    29ba:	5e9b      	ldrsh	r3, [r3, r2]
    29bc:	2bb9      	cmp	r3, #185	; 0xb9
    29be:	ddde      	ble.n	297e <_Z16playQuantumMatchi+0x172>
    29c0:	2314      	movs	r3, #20
    29c2:	18fb      	adds	r3, r7, r3
    29c4:	2202      	movs	r2, #2
    29c6:	5e9a      	ldrsh	r2, [r3, r2]
    29c8:	2384      	movs	r3, #132	; 0x84
    29ca:	005b      	lsls	r3, r3, #1
    29cc:	429a      	cmp	r2, r3
    29ce:	dd33      	ble.n	2a38 <_Z16playQuantumMatchi+0x22c>
    29d0:	e7d5      	b.n	297e <_Z16playQuantumMatchi+0x172>
							// They pressed the start button
							goto exit;
						}
						} else {
						continue;
    29d2:	46c0      	nop			; (mov r8, r8)
					}
				}
    29d4:	e7d3      	b.n	297e <_Z16playQuantumMatchi+0x172>
				} else {
				// Draw game-over, noughts wins
				drawBitmap('n', 0, 0);
    29d6:	2200      	movs	r2, #0
    29d8:	2100      	movs	r1, #0
    29da:	206e      	movs	r0, #110	; 0x6e
    29dc:	f7fd fc42 	bl	264 <_Z10drawBitmapcss>
				// Then wait button press to return to main menu
				while (true) {
					if (touchScreen.touched()) {
    29e0:	4b1b      	ldr	r3, [pc, #108]	; (2a50 <_Z16playQuantumMatchi+0x244>)
    29e2:	0018      	movs	r0, r3
    29e4:	f004 fc7e 	bl	72e4 <_ZN15Adafruit_FT62067touchedEv>
    29e8:	0003      	movs	r3, r0
    29ea:	1e5a      	subs	r2, r3, #1
    29ec:	4193      	sbcs	r3, r2
    29ee:	b2db      	uxtb	r3, r3
    29f0:	2b00      	cmp	r3, #0
    29f2:	d0f5      	beq.n	29e0 <_Z16playQuantumMatchi+0x1d4>
						TS_Point point = getPoint();
    29f4:	230c      	movs	r3, #12
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	0018      	movs	r0, r3
    29fa:	f7fe fca7 	bl	134c <_Z8getPointv>
						if (point.x > 22 && point.x < 216 && point.y > 185 && point.y < 265) {
    29fe:	230c      	movs	r3, #12
    2a00:	18fb      	adds	r3, r7, r3
    2a02:	2200      	movs	r2, #0
    2a04:	5e9b      	ldrsh	r3, [r3, r2]
    2a06:	2b16      	cmp	r3, #22
    2a08:	dd13      	ble.n	2a32 <_Z16playQuantumMatchi+0x226>
    2a0a:	230c      	movs	r3, #12
    2a0c:	18fb      	adds	r3, r7, r3
    2a0e:	2200      	movs	r2, #0
    2a10:	5e9b      	ldrsh	r3, [r3, r2]
    2a12:	2bd7      	cmp	r3, #215	; 0xd7
    2a14:	dc0d      	bgt.n	2a32 <_Z16playQuantumMatchi+0x226>
    2a16:	230c      	movs	r3, #12
    2a18:	18fb      	adds	r3, r7, r3
    2a1a:	2202      	movs	r2, #2
    2a1c:	5e9b      	ldrsh	r3, [r3, r2]
    2a1e:	2bb9      	cmp	r3, #185	; 0xb9
    2a20:	dd07      	ble.n	2a32 <_Z16playQuantumMatchi+0x226>
    2a22:	230c      	movs	r3, #12
    2a24:	18fb      	adds	r3, r7, r3
    2a26:	2202      	movs	r2, #2
    2a28:	5e9a      	ldrsh	r2, [r3, r2]
    2a2a:	2384      	movs	r3, #132	; 0x84
    2a2c:	005b      	lsls	r3, r3, #1
    2a2e:	429a      	cmp	r2, r3
    2a30:	dd03      	ble.n	2a3a <_Z16playQuantumMatchi+0x22e>
							// They pressed the start button
							goto exit;
							} else {
							continue;
    2a32:	46c0      	nop			; (mov r8, r8)
						}
					}
				}
    2a34:	e7d4      	b.n	29e0 <_Z16playQuantumMatchi+0x1d4>
	while (gamesPlayed < maxGames) {
    2a36:	e712      	b.n	285e <_Z16playQuantumMatchi+0x52>
							goto exit;
    2a38:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	exit:
	Serial.println("Broke while loop");
    2a3a:	4a06      	ldr	r2, [pc, #24]	; (2a54 <_Z16playQuantumMatchi+0x248>)
    2a3c:	4b06      	ldr	r3, [pc, #24]	; (2a58 <_Z16playQuantumMatchi+0x24c>)
    2a3e:	0011      	movs	r1, r2
    2a40:	0018      	movs	r0, r3
    2a42:	f000 fbb5 	bl	31b0 <_ZN5Print7printlnEPKc>
}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	46bd      	mov	sp, r7
    2a4a:	b009      	add	sp, #36	; 0x24
    2a4c:	bd90      	pop	{r4, r7, pc}
    2a4e:	46c0      	nop			; (mov r8, r8)
    2a50:	20000320 	.word	0x20000320
    2a54:	00013378 	.word	0x00013378
    2a58:	20000e94 	.word	0x20000e94

00002a5c <setup>:

void setup() {
    2a5c:	b580      	push	{r7, lr}
    2a5e:	af00      	add	r7, sp, #0

	Serial.begin(9600);
    2a60:	2396      	movs	r3, #150	; 0x96
    2a62:	019a      	lsls	r2, r3, #6
    2a64:	4b1b      	ldr	r3, [pc, #108]	; (2ad4 <setup+0x78>)
    2a66:	0011      	movs	r1, r2
    2a68:	0018      	movs	r0, r3
    2a6a:	f000 ff0b 	bl	3884 <_ZN4Uart5beginEm>

	tftDisplay.begin();
    2a6e:	4b1a      	ldr	r3, [pc, #104]	; (2ad8 <setup+0x7c>)
    2a70:	2100      	movs	r1, #0
    2a72:	0018      	movs	r0, r3
    2a74:	f004 ff4e 	bl	7914 <_ZN16Adafruit_ILI93415beginEm>

	if (!touchScreen.begin()) {
    2a78:	4b18      	ldr	r3, [pc, #96]	; (2adc <setup+0x80>)
    2a7a:	2180      	movs	r1, #128	; 0x80
    2a7c:	0018      	movs	r0, r3
    2a7e:	f004 fbef 	bl	7260 <_ZN15Adafruit_FT62065beginEh>
    2a82:	0003      	movs	r3, r0
    2a84:	001a      	movs	r2, r3
    2a86:	2301      	movs	r3, #1
    2a88:	4053      	eors	r3, r2
    2a8a:	b2db      	uxtb	r3, r3
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	d00c      	beq.n	2aaa <setup+0x4e>
		Serial.println(F("Couldn't start FT6206 touchscreen controller"));
    2a90:	4a13      	ldr	r2, [pc, #76]	; (2ae0 <setup+0x84>)
    2a92:	4b10      	ldr	r3, [pc, #64]	; (2ad4 <setup+0x78>)
    2a94:	0011      	movs	r1, r2
    2a96:	0018      	movs	r0, r3
    2a98:	f000 fb5e 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
		Serial.println(F("Driver might not have been found"));
    2a9c:	4a11      	ldr	r2, [pc, #68]	; (2ae4 <setup+0x88>)
    2a9e:	4b0d      	ldr	r3, [pc, #52]	; (2ad4 <setup+0x78>)
    2aa0:	0011      	movs	r1, r2
    2aa2:	0018      	movs	r0, r3
    2aa4:	f000 fb58 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
		while (true);
    2aa8:	e7fe      	b.n	2aa8 <setup+0x4c>
	}

	if (verbose) Serial.println(F("Display and touchscreen started"));

	if (!SD.begin(SD_CS)) {
    2aaa:	4b0f      	ldr	r3, [pc, #60]	; (2ae8 <setup+0x8c>)
    2aac:	2104      	movs	r1, #4
    2aae:	0018      	movs	r0, r3
    2ab0:	f006 f92a 	bl	8d08 <_ZN5SDLib7SDClass5beginEh>
    2ab4:	0003      	movs	r3, r0
    2ab6:	001a      	movs	r2, r3
    2ab8:	2301      	movs	r3, #1
    2aba:	4053      	eors	r3, r2
    2abc:	b2db      	uxtb	r3, r3
    2abe:	2b00      	cmp	r3, #0
    2ac0:	d005      	beq.n	2ace <setup+0x72>
		Serial.println(F("Failed to initialise SD card"));
    2ac2:	4a0a      	ldr	r2, [pc, #40]	; (2aec <setup+0x90>)
    2ac4:	4b03      	ldr	r3, [pc, #12]	; (2ad4 <setup+0x78>)
    2ac6:	0011      	movs	r1, r2
    2ac8:	0018      	movs	r0, r3
    2aca:	f000 fb45 	bl	3158 <_ZN5Print7printlnEPK19__FlashStringHelper>
	} else if (verbose) Serial.println(F("SD card mounted"));
}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	46bd      	mov	sp, r7
    2ad2:	bd80      	pop	{r7, pc}
    2ad4:	20000e94 	.word	0x20000e94
    2ad8:	200002bc 	.word	0x200002bc
    2adc:	20000320 	.word	0x20000320
    2ae0:	0001338c 	.word	0x0001338c
    2ae4:	000133bc 	.word	0x000133bc
    2ae8:	200008f4 	.word	0x200008f4
    2aec:	000133e0 	.word	0x000133e0

00002af0 <loop>:

void loop() {
    2af0:	b590      	push	{r4, r7, lr}
    2af2:	b08f      	sub	sp, #60	; 0x3c
    2af4:	af00      	add	r7, sp, #0
	uint8_t maxGames = 1;
    2af6:	2337      	movs	r3, #55	; 0x37
    2af8:	18fb      	adds	r3, r7, r3
    2afa:	2201      	movs	r2, #1
    2afc:	701a      	strb	r2, [r3, #0]
	drawBitmap('l', 0, 0);
    2afe:	2200      	movs	r2, #0
    2b00:	2100      	movs	r1, #0
    2b02:	206c      	movs	r0, #108	; 0x6c
    2b04:	f7fd fbae 	bl	264 <_Z10drawBitmapcss>
	String s = (String) maxGames;
    2b08:	2337      	movs	r3, #55	; 0x37
    2b0a:	18fb      	adds	r3, r7, r3
    2b0c:	7819      	ldrb	r1, [r3, #0]
    2b0e:	2324      	movs	r3, #36	; 0x24
    2b10:	18fb      	adds	r3, r7, r3
    2b12:	220a      	movs	r2, #10
    2b14:	0018      	movs	r0, r3
    2b16:	f004 f9fb 	bl	6f10 <_ZN6StringC1Ehh>
	char maxGamesChar = s.charAt(0);
    2b1a:	2335      	movs	r3, #53	; 0x35
    2b1c:	18fc      	adds	r4, r7, r3
    2b1e:	2324      	movs	r3, #36	; 0x24
    2b20:	18fb      	adds	r3, r7, r3
    2b22:	2100      	movs	r1, #0
    2b24:	0018      	movs	r0, r3
    2b26:	f004 fb65 	bl	71f4 <_ZNK6String6charAtEj>
    2b2a:	0003      	movs	r3, r0
    2b2c:	7023      	strb	r3, [r4, #0]
	drawBitmap(maxGamesChar, 173, 115);
    2b2e:	2335      	movs	r3, #53	; 0x35
    2b30:	18fb      	adds	r3, r7, r3
    2b32:	781b      	ldrb	r3, [r3, #0]
    2b34:	2273      	movs	r2, #115	; 0x73
    2b36:	21ad      	movs	r1, #173	; 0xad
    2b38:	0018      	movs	r0, r3
    2b3a:	f7fd fb93 	bl	264 <_Z10drawBitmapcss>
	boolean quantumMatch;

	while (true) {
		if (touchScreen.touched()) {
    2b3e:	4b7c      	ldr	r3, [pc, #496]	; (2d30 <loop+0x240>)
    2b40:	0018      	movs	r0, r3
    2b42:	f004 fbcf 	bl	72e4 <_ZN15Adafruit_FT62067touchedEv>
    2b46:	0003      	movs	r3, r0
    2b48:	1e5a      	subs	r2, r3, #1
    2b4a:	4193      	sbcs	r3, r2
    2b4c:	b2db      	uxtb	r3, r3
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d100      	bne.n	2b54 <loop+0x64>
    2b52:	e0ce      	b.n	2cf2 <loop+0x202>
			TS_Point point = getPoint();
    2b54:	231c      	movs	r3, #28
    2b56:	18fb      	adds	r3, r7, r3
    2b58:	0018      	movs	r0, r3
    2b5a:	f7fe fbf7 	bl	134c <_Z8getPointv>
			if (point.x > 20 && point.x < 220 && point.y > 240 && point.y < 315) {
    2b5e:	231c      	movs	r3, #28
    2b60:	18fb      	adds	r3, r7, r3
    2b62:	2200      	movs	r2, #0
    2b64:	5e9b      	ldrsh	r3, [r3, r2]
    2b66:	2b14      	cmp	r3, #20
    2b68:	dd18      	ble.n	2b9c <loop+0xac>
    2b6a:	231c      	movs	r3, #28
    2b6c:	18fb      	adds	r3, r7, r3
    2b6e:	2200      	movs	r2, #0
    2b70:	5e9b      	ldrsh	r3, [r3, r2]
    2b72:	2bdb      	cmp	r3, #219	; 0xdb
    2b74:	dc12      	bgt.n	2b9c <loop+0xac>
    2b76:	231c      	movs	r3, #28
    2b78:	18fb      	adds	r3, r7, r3
    2b7a:	2202      	movs	r2, #2
    2b7c:	5e9b      	ldrsh	r3, [r3, r2]
    2b7e:	2bf0      	cmp	r3, #240	; 0xf0
    2b80:	dd0c      	ble.n	2b9c <loop+0xac>
    2b82:	231c      	movs	r3, #28
    2b84:	18fb      	adds	r3, r7, r3
    2b86:	2202      	movs	r2, #2
    2b88:	5e9a      	ldrsh	r2, [r3, r2]
    2b8a:	239d      	movs	r3, #157	; 0x9d
    2b8c:	005b      	lsls	r3, r3, #1
    2b8e:	429a      	cmp	r2, r3
    2b90:	dc04      	bgt.n	2b9c <loop+0xac>
				// They pressed the quantum button
				quantumMatch = true;
    2b92:	2336      	movs	r3, #54	; 0x36
    2b94:	18fb      	adds	r3, r7, r3
    2b96:	2201      	movs	r2, #1
    2b98:	701a      	strb	r2, [r3, #0]
				break;
    2b9a:	e0a4      	b.n	2ce6 <loop+0x1f6>
			} else if (point.x > 20 && point.x < 220 && point.y > 170 && point.y < 241) {
    2b9c:	231c      	movs	r3, #28
    2b9e:	18fb      	adds	r3, r7, r3
    2ba0:	2200      	movs	r2, #0
    2ba2:	5e9b      	ldrsh	r3, [r3, r2]
    2ba4:	2b14      	cmp	r3, #20
    2ba6:	dd16      	ble.n	2bd6 <loop+0xe6>
    2ba8:	231c      	movs	r3, #28
    2baa:	18fb      	adds	r3, r7, r3
    2bac:	2200      	movs	r2, #0
    2bae:	5e9b      	ldrsh	r3, [r3, r2]
    2bb0:	2bdb      	cmp	r3, #219	; 0xdb
    2bb2:	dc10      	bgt.n	2bd6 <loop+0xe6>
    2bb4:	231c      	movs	r3, #28
    2bb6:	18fb      	adds	r3, r7, r3
    2bb8:	2202      	movs	r2, #2
    2bba:	5e9b      	ldrsh	r3, [r3, r2]
    2bbc:	2baa      	cmp	r3, #170	; 0xaa
    2bbe:	dd0a      	ble.n	2bd6 <loop+0xe6>
    2bc0:	231c      	movs	r3, #28
    2bc2:	18fb      	adds	r3, r7, r3
    2bc4:	2202      	movs	r2, #2
    2bc6:	5e9b      	ldrsh	r3, [r3, r2]
    2bc8:	2bf0      	cmp	r3, #240	; 0xf0
    2bca:	dc04      	bgt.n	2bd6 <loop+0xe6>
				// They pressed the classic button
				quantumMatch = false;
    2bcc:	2336      	movs	r3, #54	; 0x36
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	2200      	movs	r2, #0
    2bd2:	701a      	strb	r2, [r3, #0]
				break;
    2bd4:	e087      	b.n	2ce6 <loop+0x1f6>
			} else if (point.x > 105 && point.x < 181 && point.y > 90 && point.y < 171) {
    2bd6:	231c      	movs	r3, #28
    2bd8:	18fb      	adds	r3, r7, r3
    2bda:	2200      	movs	r2, #0
    2bdc:	5e9b      	ldrsh	r3, [r3, r2]
    2bde:	2b69      	cmp	r3, #105	; 0x69
    2be0:	dd3f      	ble.n	2c62 <loop+0x172>
    2be2:	231c      	movs	r3, #28
    2be4:	18fb      	adds	r3, r7, r3
    2be6:	2200      	movs	r2, #0
    2be8:	5e9b      	ldrsh	r3, [r3, r2]
    2bea:	2bb4      	cmp	r3, #180	; 0xb4
    2bec:	dc39      	bgt.n	2c62 <loop+0x172>
    2bee:	231c      	movs	r3, #28
    2bf0:	18fb      	adds	r3, r7, r3
    2bf2:	2202      	movs	r2, #2
    2bf4:	5e9b      	ldrsh	r3, [r3, r2]
    2bf6:	2b5a      	cmp	r3, #90	; 0x5a
    2bf8:	dd33      	ble.n	2c62 <loop+0x172>
    2bfa:	231c      	movs	r3, #28
    2bfc:	18fb      	adds	r3, r7, r3
    2bfe:	2202      	movs	r2, #2
    2c00:	5e9b      	ldrsh	r3, [r3, r2]
    2c02:	2baa      	cmp	r3, #170	; 0xaa
    2c04:	dc2d      	bgt.n	2c62 <loop+0x172>
				// They pressed the left "best of:" button
				if (maxGames != 1) {
    2c06:	2337      	movs	r3, #55	; 0x37
    2c08:	18fb      	adds	r3, r7, r3
    2c0a:	781b      	ldrb	r3, [r3, #0]
    2c0c:	2b01      	cmp	r3, #1
    2c0e:	d100      	bne.n	2c12 <loop+0x122>
    2c10:	e071      	b.n	2cf6 <loop+0x206>
					maxGames -= 2;
    2c12:	2337      	movs	r3, #55	; 0x37
    2c14:	18fb      	adds	r3, r7, r3
    2c16:	2237      	movs	r2, #55	; 0x37
    2c18:	18ba      	adds	r2, r7, r2
    2c1a:	7812      	ldrb	r2, [r2, #0]
    2c1c:	3a02      	subs	r2, #2
    2c1e:	701a      	strb	r2, [r3, #0]
					// Update score
					String s = (String) maxGames;
    2c20:	2337      	movs	r3, #55	; 0x37
    2c22:	18fb      	adds	r3, r7, r3
    2c24:	7819      	ldrb	r1, [r3, #0]
    2c26:	2310      	movs	r3, #16
    2c28:	18fb      	adds	r3, r7, r3
    2c2a:	220a      	movs	r2, #10
    2c2c:	0018      	movs	r0, r3
    2c2e:	f004 f96f 	bl	6f10 <_ZN6StringC1Ehh>
					char maxGamesChar = s.charAt(0);
    2c32:	2334      	movs	r3, #52	; 0x34
    2c34:	18fc      	adds	r4, r7, r3
    2c36:	2310      	movs	r3, #16
    2c38:	18fb      	adds	r3, r7, r3
    2c3a:	2100      	movs	r1, #0
    2c3c:	0018      	movs	r0, r3
    2c3e:	f004 fad9 	bl	71f4 <_ZNK6String6charAtEj>
    2c42:	0003      	movs	r3, r0
    2c44:	7023      	strb	r3, [r4, #0]
					drawBitmap(maxGamesChar, 173, 115);
    2c46:	2334      	movs	r3, #52	; 0x34
    2c48:	18fb      	adds	r3, r7, r3
    2c4a:	781b      	ldrb	r3, [r3, #0]
    2c4c:	2273      	movs	r2, #115	; 0x73
    2c4e:	21ad      	movs	r1, #173	; 0xad
    2c50:	0018      	movs	r0, r3
    2c52:	f7fd fb07 	bl	264 <_Z10drawBitmapcss>
					String s = (String) maxGames;
    2c56:	2310      	movs	r3, #16
    2c58:	18fb      	adds	r3, r7, r3
    2c5a:	0018      	movs	r0, r3
    2c5c:	f004 f99c 	bl	6f98 <_ZN6StringD1Ev>
				}
				continue;
    2c60:	e049      	b.n	2cf6 <loop+0x206>
			} else if (point.x > 180 && point.x < 241 && point.y > 90 && point.y < 171) {
    2c62:	231c      	movs	r3, #28
    2c64:	18fb      	adds	r3, r7, r3
    2c66:	2200      	movs	r2, #0
    2c68:	5e9b      	ldrsh	r3, [r3, r2]
    2c6a:	2bb4      	cmp	r3, #180	; 0xb4
    2c6c:	dd45      	ble.n	2cfa <loop+0x20a>
    2c6e:	231c      	movs	r3, #28
    2c70:	18fb      	adds	r3, r7, r3
    2c72:	2200      	movs	r2, #0
    2c74:	5e9b      	ldrsh	r3, [r3, r2]
    2c76:	2bf0      	cmp	r3, #240	; 0xf0
    2c78:	dc3f      	bgt.n	2cfa <loop+0x20a>
    2c7a:	231c      	movs	r3, #28
    2c7c:	18fb      	adds	r3, r7, r3
    2c7e:	2202      	movs	r2, #2
    2c80:	5e9b      	ldrsh	r3, [r3, r2]
    2c82:	2b5a      	cmp	r3, #90	; 0x5a
    2c84:	dd39      	ble.n	2cfa <loop+0x20a>
    2c86:	231c      	movs	r3, #28
    2c88:	18fb      	adds	r3, r7, r3
    2c8a:	2202      	movs	r2, #2
    2c8c:	5e9b      	ldrsh	r3, [r3, r2]
    2c8e:	2baa      	cmp	r3, #170	; 0xaa
    2c90:	dc33      	bgt.n	2cfa <loop+0x20a>
				// They pressed the left "best of:" button
				if (maxGames != 9) {
    2c92:	2337      	movs	r3, #55	; 0x37
    2c94:	18fb      	adds	r3, r7, r3
    2c96:	781b      	ldrb	r3, [r3, #0]
    2c98:	2b09      	cmp	r3, #9
    2c9a:	d030      	beq.n	2cfe <loop+0x20e>
					maxGames += 2;
    2c9c:	2337      	movs	r3, #55	; 0x37
    2c9e:	18fb      	adds	r3, r7, r3
    2ca0:	2237      	movs	r2, #55	; 0x37
    2ca2:	18ba      	adds	r2, r7, r2
    2ca4:	7812      	ldrb	r2, [r2, #0]
    2ca6:	3202      	adds	r2, #2
    2ca8:	701a      	strb	r2, [r3, #0]
					// Update score
					String s = (String) maxGames;
    2caa:	2337      	movs	r3, #55	; 0x37
    2cac:	18fb      	adds	r3, r7, r3
    2cae:	7819      	ldrb	r1, [r3, #0]
    2cb0:	1d3b      	adds	r3, r7, #4
    2cb2:	220a      	movs	r2, #10
    2cb4:	0018      	movs	r0, r3
    2cb6:	f004 f92b 	bl	6f10 <_ZN6StringC1Ehh>
					char maxGamesChar = s.charAt(0);
    2cba:	2333      	movs	r3, #51	; 0x33
    2cbc:	18fc      	adds	r4, r7, r3
    2cbe:	1d3b      	adds	r3, r7, #4
    2cc0:	2100      	movs	r1, #0
    2cc2:	0018      	movs	r0, r3
    2cc4:	f004 fa96 	bl	71f4 <_ZNK6String6charAtEj>
    2cc8:	0003      	movs	r3, r0
    2cca:	7023      	strb	r3, [r4, #0]
					drawBitmap(maxGamesChar, 173, 115);
    2ccc:	2333      	movs	r3, #51	; 0x33
    2cce:	18fb      	adds	r3, r7, r3
    2cd0:	781b      	ldrb	r3, [r3, #0]
    2cd2:	2273      	movs	r2, #115	; 0x73
    2cd4:	21ad      	movs	r1, #173	; 0xad
    2cd6:	0018      	movs	r0, r3
    2cd8:	f7fd fac4 	bl	264 <_Z10drawBitmapcss>
					String s = (String) maxGames;
    2cdc:	1d3b      	adds	r3, r7, #4
    2cde:	0018      	movs	r0, r3
    2ce0:	f004 f95a 	bl	6f98 <_ZN6StringD1Ev>
				}
				continue;
    2ce4:	e00b      	b.n	2cfe <loop+0x20e>
		} else {
			continue;
		}
	}
	
	if (quantumMatch) {
    2ce6:	2336      	movs	r3, #54	; 0x36
    2ce8:	18fb      	adds	r3, r7, r3
    2cea:	781b      	ldrb	r3, [r3, #0]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d108      	bne.n	2d02 <loop+0x212>
    2cf0:	e00e      	b.n	2d10 <loop+0x220>
			continue;
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	e723      	b.n	2b3e <loop+0x4e>
				continue;
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	e721      	b.n	2b3e <loop+0x4e>
				continue;
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	e71f      	b.n	2b3e <loop+0x4e>
				continue;
    2cfe:	46c0      	nop			; (mov r8, r8)
	}
    2d00:	e71d      	b.n	2b3e <loop+0x4e>
		playQuantumMatch(maxGames);
    2d02:	2337      	movs	r3, #55	; 0x37
    2d04:	18fb      	adds	r3, r7, r3
    2d06:	781b      	ldrb	r3, [r3, #0]
    2d08:	0018      	movs	r0, r3
    2d0a:	f7ff fd7f 	bl	280c <_Z16playQuantumMatchi>
    2d0e:	e005      	b.n	2d1c <loop+0x22c>
		} else {
		playMatch(maxGames);
    2d10:	2337      	movs	r3, #55	; 0x37
    2d12:	18fb      	adds	r3, r7, r3
    2d14:	781b      	ldrb	r3, [r3, #0]
    2d16:	0018      	movs	r0, r3
    2d18:	f7ff fc50 	bl	25bc <_Z9playMatchi>
	String s = (String) maxGames;
    2d1c:	2324      	movs	r3, #36	; 0x24
    2d1e:	18fb      	adds	r3, r7, r3
    2d20:	0018      	movs	r0, r3
    2d22:	f004 f939 	bl	6f98 <_ZN6StringD1Ev>
	}
    2d26:	46c0      	nop			; (mov r8, r8)
    2d28:	46bd      	mov	sp, r7
    2d2a:	b00f      	add	sp, #60	; 0x3c
    2d2c:	bd90      	pop	{r4, r7, pc}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	20000320 	.word	0x20000320

00002d34 <_Z41__static_initialization_and_destruction_0ii>:
    2d34:	b580      	push	{r7, lr}
    2d36:	b082      	sub	sp, #8
    2d38:	af00      	add	r7, sp, #0
    2d3a:	6078      	str	r0, [r7, #4]
    2d3c:	6039      	str	r1, [r7, #0]
    2d3e:	687b      	ldr	r3, [r7, #4]
    2d40:	2b01      	cmp	r3, #1
    2d42:	d10e      	bne.n	2d62 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    2d44:	683b      	ldr	r3, [r7, #0]
    2d46:	4a09      	ldr	r2, [pc, #36]	; (2d6c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2d48:	4293      	cmp	r3, r2
    2d4a:	d10a      	bne.n	2d62 <_Z41__static_initialization_and_destruction_0ii+0x2e>
Adafruit_ILI9341 tftDisplay = Adafruit_ILI9341(tftDisplay_CS, tftDisplay_DC);
    2d4c:	2301      	movs	r3, #1
    2d4e:	425b      	negs	r3, r3
    2d50:	4807      	ldr	r0, [pc, #28]	; (2d70 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2d52:	2209      	movs	r2, #9
    2d54:	210a      	movs	r1, #10
    2d56:	f004 fd47 	bl	77e8 <_ZN16Adafruit_ILI9341C1Eaaa>
Adafruit_FT6206 touchScreen = Adafruit_FT6206();
    2d5a:	4b06      	ldr	r3, [pc, #24]	; (2d74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2d5c:	0018      	movs	r0, r3
    2d5e:	f004 fa72 	bl	7246 <_ZN15Adafruit_FT6206C1Ev>
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	46bd      	mov	sp, r7
    2d66:	b002      	add	sp, #8
    2d68:	bd80      	pop	{r7, pc}
    2d6a:	46c0      	nop			; (mov r8, r8)
    2d6c:	0000ffff 	.word	0x0000ffff
    2d70:	200002bc 	.word	0x200002bc
    2d74:	20000320 	.word	0x20000320

00002d78 <_GLOBAL__sub_I_tftDisplay>:
    2d78:	b580      	push	{r7, lr}
    2d7a:	af00      	add	r7, sp, #0
    2d7c:	4b03      	ldr	r3, [pc, #12]	; (2d8c <_GLOBAL__sub_I_tftDisplay+0x14>)
    2d7e:	0019      	movs	r1, r3
    2d80:	2001      	movs	r0, #1
    2d82:	f7ff ffd7 	bl	2d34 <_Z41__static_initialization_and_destruction_0ii>
    2d86:	46bd      	mov	sp, r7
    2d88:	bd80      	pop	{r7, pc}
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	0000ffff 	.word	0x0000ffff

00002d90 <Dummy_Handler>:
extern void pendSVHook(void);
extern int sysTickHook(void);

/* Default empty handler */
void Dummy_Handler(void)
{
    2d90:	b580      	push	{r7, lr}
    2d92:	af00      	add	r7, sp, #0
#if defined DEBUG
  __BKPT(3);
    2d94:	be03      	bkpt	0x0003
#endif
  for (;;) { }
    2d96:	e7fe      	b.n	2d96 <Dummy_Handler+0x6>

00002d98 <Reset_Handler>:

extern int main(void);

/* This is called on processor reset to initialize the device and call main() */
void Reset_Handler(void)
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	b082      	sub	sp, #8
    2d9c:	af00      	add	r7, sp, #0
  uint32_t *pSrc, *pDest;

  /* Initialize the initialized data section */
  pSrc = &__etext;
    2d9e:	4b1a      	ldr	r3, [pc, #104]	; (2e08 <Reset_Handler+0x70>)
    2da0:	607b      	str	r3, [r7, #4]
  pDest = &__data_start__;
    2da2:	4b1a      	ldr	r3, [pc, #104]	; (2e0c <Reset_Handler+0x74>)
    2da4:	603b      	str	r3, [r7, #0]

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2da6:	4a19      	ldr	r2, [pc, #100]	; (2e0c <Reset_Handler+0x74>)
    2da8:	4b19      	ldr	r3, [pc, #100]	; (2e10 <Reset_Handler+0x78>)
    2daa:	429a      	cmp	r2, r3
    2dac:	d012      	beq.n	2dd4 <Reset_Handler+0x3c>
    2dae:	687a      	ldr	r2, [r7, #4]
    2db0:	683b      	ldr	r3, [r7, #0]
    2db2:	429a      	cmp	r2, r3
    2db4:	d00e      	beq.n	2dd4 <Reset_Handler+0x3c>
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2db6:	e009      	b.n	2dcc <Reset_Handler+0x34>
      *pDest = *pSrc;
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	681a      	ldr	r2, [r3, #0]
    2dbc:	683b      	ldr	r3, [r7, #0]
    2dbe:	601a      	str	r2, [r3, #0]
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2dc0:	683b      	ldr	r3, [r7, #0]
    2dc2:	3304      	adds	r3, #4
    2dc4:	603b      	str	r3, [r7, #0]
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	3304      	adds	r3, #4
    2dca:	607b      	str	r3, [r7, #4]
    2dcc:	683a      	ldr	r2, [r7, #0]
    2dce:	4b10      	ldr	r3, [pc, #64]	; (2e10 <Reset_Handler+0x78>)
    2dd0:	429a      	cmp	r2, r3
    2dd2:	d3f1      	bcc.n	2db8 <Reset_Handler+0x20>
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    2dd4:	4a0d      	ldr	r2, [pc, #52]	; (2e0c <Reset_Handler+0x74>)
    2dd6:	4b0e      	ldr	r3, [pc, #56]	; (2e10 <Reset_Handler+0x78>)
    2dd8:	429a      	cmp	r2, r3
    2dda:	d010      	beq.n	2dfe <Reset_Handler+0x66>
    2ddc:	687a      	ldr	r2, [r7, #4]
    2dde:	683b      	ldr	r3, [r7, #0]
    2de0:	429a      	cmp	r2, r3
    2de2:	d00c      	beq.n	2dfe <Reset_Handler+0x66>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2de4:	4b0b      	ldr	r3, [pc, #44]	; (2e14 <Reset_Handler+0x7c>)
    2de6:	603b      	str	r3, [r7, #0]
    2de8:	e005      	b.n	2df6 <Reset_Handler+0x5e>
      *pDest = 0;
    2dea:	683b      	ldr	r3, [r7, #0]
    2dec:	2200      	movs	r2, #0
    2dee:	601a      	str	r2, [r3, #0]
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    2df0:	683b      	ldr	r3, [r7, #0]
    2df2:	3304      	adds	r3, #4
    2df4:	603b      	str	r3, [r7, #0]
    2df6:	683a      	ldr	r2, [r7, #0]
    2df8:	4b07      	ldr	r3, [pc, #28]	; (2e18 <Reset_Handler+0x80>)
    2dfa:	429a      	cmp	r2, r3
    2dfc:	d3f5      	bcc.n	2dea <Reset_Handler+0x52>
  }

  SystemInit();
    2dfe:	f000 fb09 	bl	3414 <SystemInit>

  main();
    2e02:	f000 f875 	bl	2ef0 <main>

  while (1)
    2e06:	e7fe      	b.n	2e06 <Reset_Handler+0x6e>
    2e08:	0001450c 	.word	0x0001450c
    2e0c:	20000000 	.word	0x20000000
    2e10:	200002a0 	.word	0x200002a0
    2e14:	200002a0 	.word	0x200002a0
    2e18:	20000f88 	.word	0x20000f88

00002e1c <SysTick_Handler>:

/* Default Arduino systick handler */
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
    2e1c:	b580      	push	{r7, lr}
    2e1e:	af00      	add	r7, sp, #0
  if (sysTickHook())
    2e20:	f000 f85b 	bl	2eda <sysTickHook>
    2e24:	1e03      	subs	r3, r0, #0
    2e26:	d102      	bne.n	2e2e <SysTick_Handler+0x12>
    return;
  SysTick_DefaultHandler();
    2e28:	f000 f844 	bl	2eb4 <SysTick_DefaultHandler>
    2e2c:	e000      	b.n	2e30 <SysTick_Handler+0x14>
    return;
    2e2e:	46c0      	nop			; (mov r8, r8)
}
    2e30:	46bd      	mov	sp, r7
    2e32:	bd80      	pop	{r7, pc}

00002e34 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
    2e34:	b580      	push	{r7, lr}
    2e36:	af00      	add	r7, sp, #0
  if (usb_isr)
    2e38:	4b04      	ldr	r3, [pc, #16]	; (2e4c <USB_Handler+0x18>)
    2e3a:	681b      	ldr	r3, [r3, #0]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d002      	beq.n	2e46 <USB_Handler+0x12>
    usb_isr();
    2e40:	4b02      	ldr	r3, [pc, #8]	; (2e4c <USB_Handler+0x18>)
    2e42:	681b      	ldr	r3, [r3, #0]
    2e44:	4798      	blx	r3
}
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	46bd      	mov	sp, r7
    2e4a:	bd80      	pop	{r7, pc}
    2e4c:	20000330 	.word	0x20000330

00002e50 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
    2e50:	b580      	push	{r7, lr}
    2e52:	b082      	sub	sp, #8
    2e54:	af00      	add	r7, sp, #0
    2e56:	6078      	str	r0, [r7, #4]
  usb_isr = new_usb_isr;
    2e58:	4b03      	ldr	r3, [pc, #12]	; (2e68 <USB_SetHandler+0x18>)
    2e5a:	687a      	ldr	r2, [r7, #4]
    2e5c:	601a      	str	r2, [r3, #0]
}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	46bd      	mov	sp, r7
    2e62:	b002      	add	sp, #8
    2e64:	bd80      	pop	{r7, pc}
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	20000330 	.word	0x20000330

00002e6c <millis>:

/** Tick Counter united by ms */
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
    2e6c:	b580      	push	{r7, lr}
    2e6e:	af00      	add	r7, sp, #0
// todo: ensure no interrupts
  return _ulTickCount ;
    2e70:	4b02      	ldr	r3, [pc, #8]	; (2e7c <millis+0x10>)
    2e72:	681b      	ldr	r3, [r3, #0]
}
    2e74:	0018      	movs	r0, r3
    2e76:	46bd      	mov	sp, r7
    2e78:	bd80      	pop	{r7, pc}
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	20000334 	.word	0x20000334

00002e80 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
    2e80:	b580      	push	{r7, lr}
    2e82:	b084      	sub	sp, #16
    2e84:	af00      	add	r7, sp, #0
    2e86:	6078      	str	r0, [r7, #4]
  if ( ms == 0 )
    2e88:	687b      	ldr	r3, [r7, #4]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d00c      	beq.n	2ea8 <delay+0x28>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
    2e8e:	4b08      	ldr	r3, [pc, #32]	; (2eb0 <delay+0x30>)
    2e90:	681b      	ldr	r3, [r3, #0]
    2e92:	60fb      	str	r3, [r7, #12]

  do
  {
    yield() ;
    2e94:	f000 f81c 	bl	2ed0 <yield>
  } while ( _ulTickCount - start < ms ) ;
    2e98:	4b05      	ldr	r3, [pc, #20]	; (2eb0 <delay+0x30>)
    2e9a:	681a      	ldr	r2, [r3, #0]
    2e9c:	68fb      	ldr	r3, [r7, #12]
    2e9e:	1ad2      	subs	r2, r2, r3
    2ea0:	687b      	ldr	r3, [r7, #4]
    2ea2:	429a      	cmp	r2, r3
    2ea4:	d3f6      	bcc.n	2e94 <delay+0x14>
    2ea6:	e000      	b.n	2eaa <delay+0x2a>
    return ;
    2ea8:	46c0      	nop			; (mov r8, r8)
}
    2eaa:	46bd      	mov	sp, r7
    2eac:	b004      	add	sp, #16
    2eae:	bd80      	pop	{r7, pc}
    2eb0:	20000334 	.word	0x20000334

00002eb4 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    2eb4:	b580      	push	{r7, lr}
    2eb6:	af00      	add	r7, sp, #0
  // Increment tick count each ms
  _ulTickCount++;
    2eb8:	4b04      	ldr	r3, [pc, #16]	; (2ecc <SysTick_DefaultHandler+0x18>)
    2eba:	681b      	ldr	r3, [r3, #0]
    2ebc:	1c5a      	adds	r2, r3, #1
    2ebe:	4b03      	ldr	r3, [pc, #12]	; (2ecc <SysTick_DefaultHandler+0x18>)
    2ec0:	601a      	str	r2, [r3, #0]
  tickReset();
    2ec2:	f000 fa8d 	bl	33e0 <tickReset>
}
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	46bd      	mov	sp, r7
    2eca:	bd80      	pop	{r7, pc}
    2ecc:	20000334 	.word	0x20000334

00002ed0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2ed0:	b580      	push	{r7, lr}
    2ed2:	af00      	add	r7, sp, #0
	// Empty
}
    2ed4:	46c0      	nop			; (mov r8, r8)
    2ed6:	46bd      	mov	sp, r7
    2ed8:	bd80      	pop	{r7, pc}

00002eda <sysTickHook>:
 * SysTick hook
 *
 * This function is called from SysTick handler, before the default
 * handler provided by Arduino.
 */
static int __false() {
    2eda:	b580      	push	{r7, lr}
    2edc:	af00      	add	r7, sp, #0
	// Return false
	return 0;
    2ede:	2300      	movs	r3, #0
}
    2ee0:	0018      	movs	r0, r3
    2ee2:	46bd      	mov	sp, r7
    2ee4:	bd80      	pop	{r7, pc}

00002ee6 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2ee6:	b580      	push	{r7, lr}
    2ee8:	af00      	add	r7, sp, #0
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	46bd      	mov	sp, r7
    2eee:	bd80      	pop	{r7, pc}

00002ef0 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    2ef0:	b580      	push	{r7, lr}
    2ef2:	af00      	add	r7, sp, #0
  init();
    2ef4:	f003 fbf0 	bl	66d8 <init>

  __libc_init_array();
    2ef8:	f00d fc6c 	bl	107d4 <__libc_init_array>

  initVariant();
    2efc:	f7ff fff3 	bl	2ee6 <_Z11initVariantv>

  delay(1);
    2f00:	2001      	movs	r0, #1
    2f02:	f7ff ffbd 	bl	2e80 <delay>
#if defined(USBCON)
  USBDevice.init();
    2f06:	4b09      	ldr	r3, [pc, #36]	; (2f2c <main+0x3c>)
    2f08:	0018      	movs	r0, r3
    2f0a:	f002 fba1 	bl	5650 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    2f0e:	4b07      	ldr	r3, [pc, #28]	; (2f2c <main+0x3c>)
    2f10:	0018      	movs	r0, r3
    2f12:	f002 fc37 	bl	5784 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    2f16:	f7ff fda1 	bl	2a5c <setup>

  for (;;)
  {
    loop();
    2f1a:	f7ff fde9 	bl	2af0 <loop>
    if (serialEventRun) serialEventRun();
    2f1e:	4b04      	ldr	r3, [pc, #16]	; (2f30 <main+0x40>)
    2f20:	2b00      	cmp	r3, #0
    2f22:	d0fa      	beq.n	2f1a <main+0x2a>
    2f24:	e000      	b.n	2f28 <main+0x38>
    2f26:	bf00      	nop
    loop();
    2f28:	e7f7      	b.n	2f1a <main+0x2a>
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	200008f0 	.word	0x200008f0
    2f30:	00000000 	.word	0x00000000

00002f34 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    2f34:	b590      	push	{r4, r7, lr}
    2f36:	b083      	sub	sp, #12
    2f38:	af00      	add	r7, sp, #0
    2f3a:	6078      	str	r0, [r7, #4]
    2f3c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    2f3e:	683b      	ldr	r3, [r7, #0]
    2f40:	2b00      	cmp	r3, #0
    2f42:	d101      	bne.n	2f48 <_ZN5Print5writeEPKc+0x14>
    2f44:	2300      	movs	r3, #0
    2f46:	e00d      	b.n	2f64 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    2f48:	687b      	ldr	r3, [r7, #4]
    2f4a:	681b      	ldr	r3, [r3, #0]
    2f4c:	3304      	adds	r3, #4
    2f4e:	681c      	ldr	r4, [r3, #0]
    2f50:	683b      	ldr	r3, [r7, #0]
    2f52:	0018      	movs	r0, r3
    2f54:	f00e fb36 	bl	115c4 <strlen>
    2f58:	0002      	movs	r2, r0
    2f5a:	6839      	ldr	r1, [r7, #0]
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	0018      	movs	r0, r3
    2f60:	47a0      	blx	r4
    2f62:	0003      	movs	r3, r0
    }
    2f64:	0018      	movs	r0, r3
    2f66:	46bd      	mov	sp, r7
    2f68:	b003      	add	sp, #12
    2f6a:	bd90      	pop	{r4, r7, pc}

00002f6c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2f6c:	b580      	push	{r7, lr}
    2f6e:	b082      	sub	sp, #8
    2f70:	af00      	add	r7, sp, #0
    2f72:	6078      	str	r0, [r7, #4]
    2f74:	2300      	movs	r3, #0
    2f76:	0018      	movs	r0, r3
    2f78:	46bd      	mov	sp, r7
    2f7a:	b002      	add	sp, #8
    2f7c:	bd80      	pop	{r7, pc}

00002f7e <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2f7e:	b580      	push	{r7, lr}
    2f80:	b082      	sub	sp, #8
    2f82:	af00      	add	r7, sp, #0
    2f84:	6078      	str	r0, [r7, #4]
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	46bd      	mov	sp, r7
    2f8a:	b002      	add	sp, #8
    2f8c:	bd80      	pop	{r7, pc}

00002f8e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2f8e:	b580      	push	{r7, lr}
    2f90:	b086      	sub	sp, #24
    2f92:	af00      	add	r7, sp, #0
    2f94:	60f8      	str	r0, [r7, #12]
    2f96:	60b9      	str	r1, [r7, #8]
    2f98:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    2f9a:	2300      	movs	r3, #0
    2f9c:	617b      	str	r3, [r7, #20]
  while (size--) {
    2f9e:	687b      	ldr	r3, [r7, #4]
    2fa0:	1e5a      	subs	r2, r3, #1
    2fa2:	607a      	str	r2, [r7, #4]
    2fa4:	1e5a      	subs	r2, r3, #1
    2fa6:	4193      	sbcs	r3, r2
    2fa8:	b2db      	uxtb	r3, r3
    2faa:	2b00      	cmp	r3, #0
    2fac:	d014      	beq.n	2fd8 <_ZN5Print5writeEPKhj+0x4a>
    if (write(*buffer++)) n++;
    2fae:	68fb      	ldr	r3, [r7, #12]
    2fb0:	681b      	ldr	r3, [r3, #0]
    2fb2:	681a      	ldr	r2, [r3, #0]
    2fb4:	68bb      	ldr	r3, [r7, #8]
    2fb6:	1c59      	adds	r1, r3, #1
    2fb8:	60b9      	str	r1, [r7, #8]
    2fba:	7819      	ldrb	r1, [r3, #0]
    2fbc:	68fb      	ldr	r3, [r7, #12]
    2fbe:	0018      	movs	r0, r3
    2fc0:	4790      	blx	r2
    2fc2:	0003      	movs	r3, r0
    2fc4:	1e5a      	subs	r2, r3, #1
    2fc6:	4193      	sbcs	r3, r2
    2fc8:	b2db      	uxtb	r3, r3
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d003      	beq.n	2fd6 <_ZN5Print5writeEPKhj+0x48>
    2fce:	697b      	ldr	r3, [r7, #20]
    2fd0:	3301      	adds	r3, #1
    2fd2:	617b      	str	r3, [r7, #20]
  while (size--) {
    2fd4:	e7e3      	b.n	2f9e <_ZN5Print5writeEPKhj+0x10>
    else break;
    2fd6:	46c0      	nop			; (mov r8, r8)
  }
  return n;
    2fd8:	697b      	ldr	r3, [r7, #20]
}
    2fda:	0018      	movs	r0, r3
    2fdc:	46bd      	mov	sp, r7
    2fde:	b006      	add	sp, #24
    2fe0:	bd80      	pop	{r7, pc}

00002fe2 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    2fe2:	b580      	push	{r7, lr}
    2fe4:	b082      	sub	sp, #8
    2fe6:	af00      	add	r7, sp, #0
    2fe8:	6078      	str	r0, [r7, #4]
    2fea:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
    2fec:	683a      	ldr	r2, [r7, #0]
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	0011      	movs	r1, r2
    2ff2:	0018      	movs	r0, r3
    2ff4:	f000 f805 	bl	3002 <_ZN5Print5printEPKc>
    2ff8:	0003      	movs	r3, r0
}
    2ffa:	0018      	movs	r0, r3
    2ffc:	46bd      	mov	sp, r7
    2ffe:	b002      	add	sp, #8
    3000:	bd80      	pop	{r7, pc}

00003002 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    3002:	b580      	push	{r7, lr}
    3004:	b082      	sub	sp, #8
    3006:	af00      	add	r7, sp, #0
    3008:	6078      	str	r0, [r7, #4]
    300a:	6039      	str	r1, [r7, #0]
  return write(str);
    300c:	683a      	ldr	r2, [r7, #0]
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	0011      	movs	r1, r2
    3012:	0018      	movs	r0, r3
    3014:	f7ff ff8e 	bl	2f34 <_ZN5Print5writeEPKc>
    3018:	0003      	movs	r3, r0
}
    301a:	0018      	movs	r0, r3
    301c:	46bd      	mov	sp, r7
    301e:	b002      	add	sp, #8
    3020:	bd80      	pop	{r7, pc}

00003022 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    3022:	b580      	push	{r7, lr}
    3024:	b082      	sub	sp, #8
    3026:	af00      	add	r7, sp, #0
    3028:	6078      	str	r0, [r7, #4]
    302a:	000a      	movs	r2, r1
    302c:	1cfb      	adds	r3, r7, #3
    302e:	701a      	strb	r2, [r3, #0]
  return write(c);
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	681b      	ldr	r3, [r3, #0]
    3036:	1cfa      	adds	r2, r7, #3
    3038:	7811      	ldrb	r1, [r2, #0]
    303a:	687a      	ldr	r2, [r7, #4]
    303c:	0010      	movs	r0, r2
    303e:	4798      	blx	r3
    3040:	0003      	movs	r3, r0
}
    3042:	0018      	movs	r0, r3
    3044:	46bd      	mov	sp, r7
    3046:	b002      	add	sp, #8
    3048:	bd80      	pop	{r7, pc}

0000304a <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
    304a:	b580      	push	{r7, lr}
    304c:	b084      	sub	sp, #16
    304e:	af00      	add	r7, sp, #0
    3050:	60f8      	str	r0, [r7, #12]
    3052:	607a      	str	r2, [r7, #4]
    3054:	230b      	movs	r3, #11
    3056:	18fb      	adds	r3, r7, r3
    3058:	1c0a      	adds	r2, r1, #0
    305a:	701a      	strb	r2, [r3, #0]
  return print((unsigned long) b, base);
    305c:	230b      	movs	r3, #11
    305e:	18fb      	adds	r3, r7, r3
    3060:	7819      	ldrb	r1, [r3, #0]
    3062:	687a      	ldr	r2, [r7, #4]
    3064:	68fb      	ldr	r3, [r7, #12]
    3066:	0018      	movs	r0, r3
    3068:	f000 f857 	bl	311a <_ZN5Print5printEmi>
    306c:	0003      	movs	r3, r0
}
    306e:	0018      	movs	r0, r3
    3070:	46bd      	mov	sp, r7
    3072:	b004      	add	sp, #16
    3074:	bd80      	pop	{r7, pc}

00003076 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
    3076:	b580      	push	{r7, lr}
    3078:	b084      	sub	sp, #16
    307a:	af00      	add	r7, sp, #0
    307c:	60f8      	str	r0, [r7, #12]
    307e:	60b9      	str	r1, [r7, #8]
    3080:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
    3082:	687a      	ldr	r2, [r7, #4]
    3084:	68b9      	ldr	r1, [r7, #8]
    3086:	68fb      	ldr	r3, [r7, #12]
    3088:	0018      	movs	r0, r3
    308a:	f000 f805 	bl	3098 <_ZN5Print5printEli>
    308e:	0003      	movs	r3, r0
}
    3090:	0018      	movs	r0, r3
    3092:	46bd      	mov	sp, r7
    3094:	b004      	add	sp, #16
    3096:	bd80      	pop	{r7, pc}

00003098 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3098:	b580      	push	{r7, lr}
    309a:	b086      	sub	sp, #24
    309c:	af00      	add	r7, sp, #0
    309e:	60f8      	str	r0, [r7, #12]
    30a0:	60b9      	str	r1, [r7, #8]
    30a2:	607a      	str	r2, [r7, #4]
  if (base == 0) {
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	2b00      	cmp	r3, #0
    30a8:	d109      	bne.n	30be <_ZN5Print5printEli+0x26>
    return write(n);
    30aa:	68fb      	ldr	r3, [r7, #12]
    30ac:	681b      	ldr	r3, [r3, #0]
    30ae:	681b      	ldr	r3, [r3, #0]
    30b0:	68ba      	ldr	r2, [r7, #8]
    30b2:	b2d1      	uxtb	r1, r2
    30b4:	68fa      	ldr	r2, [r7, #12]
    30b6:	0010      	movs	r0, r2
    30b8:	4798      	blx	r3
    30ba:	0003      	movs	r3, r0
    30bc:	e029      	b.n	3112 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	2b0a      	cmp	r3, #10
    30c2:	d11e      	bne.n	3102 <_ZN5Print5printEli+0x6a>
    if (n < 0) {
    30c4:	68bb      	ldr	r3, [r7, #8]
    30c6:	2b00      	cmp	r3, #0
    30c8:	da13      	bge.n	30f2 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    30ca:	68fb      	ldr	r3, [r7, #12]
    30cc:	212d      	movs	r1, #45	; 0x2d
    30ce:	0018      	movs	r0, r3
    30d0:	f7ff ffa7 	bl	3022 <_ZN5Print5printEc>
    30d4:	0003      	movs	r3, r0
    30d6:	617b      	str	r3, [r7, #20]
      n = -n;
    30d8:	68bb      	ldr	r3, [r7, #8]
    30da:	425b      	negs	r3, r3
    30dc:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
    30de:	68b9      	ldr	r1, [r7, #8]
    30e0:	68fb      	ldr	r3, [r7, #12]
    30e2:	220a      	movs	r2, #10
    30e4:	0018      	movs	r0, r3
    30e6:	f000 f8f0 	bl	32ca <_ZN5Print11printNumberEmh>
    30ea:	0002      	movs	r2, r0
    30ec:	697b      	ldr	r3, [r7, #20]
    30ee:	18d3      	adds	r3, r2, r3
    30f0:	e00f      	b.n	3112 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
    30f2:	68b9      	ldr	r1, [r7, #8]
    30f4:	68fb      	ldr	r3, [r7, #12]
    30f6:	220a      	movs	r2, #10
    30f8:	0018      	movs	r0, r3
    30fa:	f000 f8e6 	bl	32ca <_ZN5Print11printNumberEmh>
    30fe:	0003      	movs	r3, r0
    3100:	e007      	b.n	3112 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
    3102:	68b9      	ldr	r1, [r7, #8]
    3104:	687b      	ldr	r3, [r7, #4]
    3106:	b2da      	uxtb	r2, r3
    3108:	68fb      	ldr	r3, [r7, #12]
    310a:	0018      	movs	r0, r3
    310c:	f000 f8dd 	bl	32ca <_ZN5Print11printNumberEmh>
    3110:	0003      	movs	r3, r0
  }
}
    3112:	0018      	movs	r0, r3
    3114:	46bd      	mov	sp, r7
    3116:	b006      	add	sp, #24
    3118:	bd80      	pop	{r7, pc}

0000311a <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
    311a:	b580      	push	{r7, lr}
    311c:	b084      	sub	sp, #16
    311e:	af00      	add	r7, sp, #0
    3120:	60f8      	str	r0, [r7, #12]
    3122:	60b9      	str	r1, [r7, #8]
    3124:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	2b00      	cmp	r3, #0
    312a:	d109      	bne.n	3140 <_ZN5Print5printEmi+0x26>
    312c:	68fb      	ldr	r3, [r7, #12]
    312e:	681b      	ldr	r3, [r3, #0]
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	68ba      	ldr	r2, [r7, #8]
    3134:	b2d1      	uxtb	r1, r2
    3136:	68fa      	ldr	r2, [r7, #12]
    3138:	0010      	movs	r0, r2
    313a:	4798      	blx	r3
    313c:	0003      	movs	r3, r0
    313e:	e007      	b.n	3150 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
    3140:	687b      	ldr	r3, [r7, #4]
    3142:	b2da      	uxtb	r2, r3
    3144:	68b9      	ldr	r1, [r7, #8]
    3146:	68fb      	ldr	r3, [r7, #12]
    3148:	0018      	movs	r0, r3
    314a:	f000 f8be 	bl	32ca <_ZN5Print11printNumberEmh>
    314e:	0003      	movs	r3, r0
}
    3150:	0018      	movs	r0, r3
    3152:	46bd      	mov	sp, r7
    3154:	b004      	add	sp, #16
    3156:	bd80      	pop	{r7, pc}

00003158 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    3158:	b580      	push	{r7, lr}
    315a:	b084      	sub	sp, #16
    315c:	af00      	add	r7, sp, #0
    315e:	6078      	str	r0, [r7, #4]
    3160:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
    3162:	683a      	ldr	r2, [r7, #0]
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	0011      	movs	r1, r2
    3168:	0018      	movs	r0, r3
    316a:	f7ff ff3a 	bl	2fe2 <_ZN5Print5printEPK19__FlashStringHelper>
    316e:	0003      	movs	r3, r0
    3170:	60fb      	str	r3, [r7, #12]
  n += println();
    3172:	687b      	ldr	r3, [r7, #4]
    3174:	0018      	movs	r0, r3
    3176:	f000 f809 	bl	318c <_ZN5Print7printlnEv>
    317a:	0002      	movs	r2, r0
    317c:	68fb      	ldr	r3, [r7, #12]
    317e:	189b      	adds	r3, r3, r2
    3180:	60fb      	str	r3, [r7, #12]
  return n;
    3182:	68fb      	ldr	r3, [r7, #12]
}
    3184:	0018      	movs	r0, r3
    3186:	46bd      	mov	sp, r7
    3188:	b004      	add	sp, #16
    318a:	bd80      	pop	{r7, pc}

0000318c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    318c:	b580      	push	{r7, lr}
    318e:	b082      	sub	sp, #8
    3190:	af00      	add	r7, sp, #0
    3192:	6078      	str	r0, [r7, #4]
  return write("\r\n");
    3194:	4a05      	ldr	r2, [pc, #20]	; (31ac <_ZN5Print7printlnEv+0x20>)
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	0011      	movs	r1, r2
    319a:	0018      	movs	r0, r3
    319c:	f7ff feca 	bl	2f34 <_ZN5Print5writeEPKc>
    31a0:	0003      	movs	r3, r0
}
    31a2:	0018      	movs	r0, r3
    31a4:	46bd      	mov	sp, r7
    31a6:	b002      	add	sp, #8
    31a8:	bd80      	pop	{r7, pc}
    31aa:	46c0      	nop			; (mov r8, r8)
    31ac:	00013400 	.word	0x00013400

000031b0 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    31b0:	b580      	push	{r7, lr}
    31b2:	b084      	sub	sp, #16
    31b4:	af00      	add	r7, sp, #0
    31b6:	6078      	str	r0, [r7, #4]
    31b8:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
    31ba:	683a      	ldr	r2, [r7, #0]
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	0011      	movs	r1, r2
    31c0:	0018      	movs	r0, r3
    31c2:	f7ff ff1e 	bl	3002 <_ZN5Print5printEPKc>
    31c6:	0003      	movs	r3, r0
    31c8:	60fb      	str	r3, [r7, #12]
  n += println();
    31ca:	687b      	ldr	r3, [r7, #4]
    31cc:	0018      	movs	r0, r3
    31ce:	f7ff ffdd 	bl	318c <_ZN5Print7printlnEv>
    31d2:	0002      	movs	r2, r0
    31d4:	68fb      	ldr	r3, [r7, #12]
    31d6:	189b      	adds	r3, r3, r2
    31d8:	60fb      	str	r3, [r7, #12]
  return n;
    31da:	68fb      	ldr	r3, [r7, #12]
}
    31dc:	0018      	movs	r0, r3
    31de:	46bd      	mov	sp, r7
    31e0:	b004      	add	sp, #16
    31e2:	bd80      	pop	{r7, pc}

000031e4 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    31e4:	b580      	push	{r7, lr}
    31e6:	b084      	sub	sp, #16
    31e8:	af00      	add	r7, sp, #0
    31ea:	6078      	str	r0, [r7, #4]
    31ec:	000a      	movs	r2, r1
    31ee:	1cfb      	adds	r3, r7, #3
    31f0:	701a      	strb	r2, [r3, #0]
  size_t n = print(c);
    31f2:	1cfb      	adds	r3, r7, #3
    31f4:	781a      	ldrb	r2, [r3, #0]
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	0011      	movs	r1, r2
    31fa:	0018      	movs	r0, r3
    31fc:	f7ff ff11 	bl	3022 <_ZN5Print5printEc>
    3200:	0003      	movs	r3, r0
    3202:	60fb      	str	r3, [r7, #12]
  n += println();
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	0018      	movs	r0, r3
    3208:	f7ff ffc0 	bl	318c <_ZN5Print7printlnEv>
    320c:	0002      	movs	r2, r0
    320e:	68fb      	ldr	r3, [r7, #12]
    3210:	189b      	adds	r3, r3, r2
    3212:	60fb      	str	r3, [r7, #12]
  return n;
    3214:	68fb      	ldr	r3, [r7, #12]
}
    3216:	0018      	movs	r0, r3
    3218:	46bd      	mov	sp, r7
    321a:	b004      	add	sp, #16
    321c:	bd80      	pop	{r7, pc}

0000321e <_ZN5Print7printlnEhi>:

size_t Print::println(unsigned char b, int base)
{
    321e:	b580      	push	{r7, lr}
    3220:	b086      	sub	sp, #24
    3222:	af00      	add	r7, sp, #0
    3224:	60f8      	str	r0, [r7, #12]
    3226:	607a      	str	r2, [r7, #4]
    3228:	230b      	movs	r3, #11
    322a:	18fb      	adds	r3, r7, r3
    322c:	1c0a      	adds	r2, r1, #0
    322e:	701a      	strb	r2, [r3, #0]
  size_t n = print(b, base);
    3230:	687a      	ldr	r2, [r7, #4]
    3232:	230b      	movs	r3, #11
    3234:	18fb      	adds	r3, r7, r3
    3236:	7819      	ldrb	r1, [r3, #0]
    3238:	68fb      	ldr	r3, [r7, #12]
    323a:	0018      	movs	r0, r3
    323c:	f7ff ff05 	bl	304a <_ZN5Print5printEhi>
    3240:	0003      	movs	r3, r0
    3242:	617b      	str	r3, [r7, #20]
  n += println();
    3244:	68fb      	ldr	r3, [r7, #12]
    3246:	0018      	movs	r0, r3
    3248:	f7ff ffa0 	bl	318c <_ZN5Print7printlnEv>
    324c:	0002      	movs	r2, r0
    324e:	697b      	ldr	r3, [r7, #20]
    3250:	189b      	adds	r3, r3, r2
    3252:	617b      	str	r3, [r7, #20]
  return n;
    3254:	697b      	ldr	r3, [r7, #20]
}
    3256:	0018      	movs	r0, r3
    3258:	46bd      	mov	sp, r7
    325a:	b006      	add	sp, #24
    325c:	bd80      	pop	{r7, pc}

0000325e <_ZN5Print7printlnEii>:

size_t Print::println(int num, int base)
{
    325e:	b580      	push	{r7, lr}
    3260:	b086      	sub	sp, #24
    3262:	af00      	add	r7, sp, #0
    3264:	60f8      	str	r0, [r7, #12]
    3266:	60b9      	str	r1, [r7, #8]
    3268:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
    326a:	687a      	ldr	r2, [r7, #4]
    326c:	68b9      	ldr	r1, [r7, #8]
    326e:	68fb      	ldr	r3, [r7, #12]
    3270:	0018      	movs	r0, r3
    3272:	f7ff ff00 	bl	3076 <_ZN5Print5printEii>
    3276:	0003      	movs	r3, r0
    3278:	617b      	str	r3, [r7, #20]
  n += println();
    327a:	68fb      	ldr	r3, [r7, #12]
    327c:	0018      	movs	r0, r3
    327e:	f7ff ff85 	bl	318c <_ZN5Print7printlnEv>
    3282:	0002      	movs	r2, r0
    3284:	697b      	ldr	r3, [r7, #20]
    3286:	189b      	adds	r3, r3, r2
    3288:	617b      	str	r3, [r7, #20]
  return n;
    328a:	697b      	ldr	r3, [r7, #20]
}
    328c:	0018      	movs	r0, r3
    328e:	46bd      	mov	sp, r7
    3290:	b006      	add	sp, #24
    3292:	bd80      	pop	{r7, pc}

00003294 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3294:	b580      	push	{r7, lr}
    3296:	b086      	sub	sp, #24
    3298:	af00      	add	r7, sp, #0
    329a:	60f8      	str	r0, [r7, #12]
    329c:	60b9      	str	r1, [r7, #8]
    329e:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
    32a0:	687a      	ldr	r2, [r7, #4]
    32a2:	68b9      	ldr	r1, [r7, #8]
    32a4:	68fb      	ldr	r3, [r7, #12]
    32a6:	0018      	movs	r0, r3
    32a8:	f7ff ff37 	bl	311a <_ZN5Print5printEmi>
    32ac:	0003      	movs	r3, r0
    32ae:	617b      	str	r3, [r7, #20]
  n += println();
    32b0:	68fb      	ldr	r3, [r7, #12]
    32b2:	0018      	movs	r0, r3
    32b4:	f7ff ff6a 	bl	318c <_ZN5Print7printlnEv>
    32b8:	0002      	movs	r2, r0
    32ba:	697b      	ldr	r3, [r7, #20]
    32bc:	189b      	adds	r3, r3, r2
    32be:	617b      	str	r3, [r7, #20]
  return n;
    32c0:	697b      	ldr	r3, [r7, #20]
}
    32c2:	0018      	movs	r0, r3
    32c4:	46bd      	mov	sp, r7
    32c6:	b006      	add	sp, #24
    32c8:	bd80      	pop	{r7, pc}

000032ca <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    32ca:	b580      	push	{r7, lr}
    32cc:	b08e      	sub	sp, #56	; 0x38
    32ce:	af00      	add	r7, sp, #0
    32d0:	60f8      	str	r0, [r7, #12]
    32d2:	60b9      	str	r1, [r7, #8]
    32d4:	1dfb      	adds	r3, r7, #7
    32d6:	701a      	strb	r2, [r3, #0]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    32d8:	2310      	movs	r3, #16
    32da:	18fb      	adds	r3, r7, r3
    32dc:	3320      	adds	r3, #32
    32de:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
    32e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32e2:	2200      	movs	r2, #0
    32e4:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    32e6:	1dfb      	adds	r3, r7, #7
    32e8:	781b      	ldrb	r3, [r3, #0]
    32ea:	2b01      	cmp	r3, #1
    32ec:	dc02      	bgt.n	32f4 <_ZN5Print11printNumberEmh+0x2a>
    32ee:	1dfb      	adds	r3, r7, #7
    32f0:	220a      	movs	r2, #10
    32f2:	701a      	strb	r2, [r3, #0]

  do {
    char c = n % base;
    32f4:	1dfb      	adds	r3, r7, #7
    32f6:	781a      	ldrb	r2, [r3, #0]
    32f8:	68bb      	ldr	r3, [r7, #8]
    32fa:	0011      	movs	r1, r2
    32fc:	0018      	movs	r0, r3
    32fe:	f00b fb7b 	bl	e9f8 <__aeabi_uidivmod>
    3302:	000b      	movs	r3, r1
    3304:	001a      	movs	r2, r3
    3306:	2333      	movs	r3, #51	; 0x33
    3308:	18fb      	adds	r3, r7, r3
    330a:	701a      	strb	r2, [r3, #0]
    n /= base;
    330c:	1dfb      	adds	r3, r7, #7
    330e:	781b      	ldrb	r3, [r3, #0]
    3310:	0019      	movs	r1, r3
    3312:	68b8      	ldr	r0, [r7, #8]
    3314:	f00b faea 	bl	e8ec <__udivsi3>
    3318:	0003      	movs	r3, r0
    331a:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    331e:	3b01      	subs	r3, #1
    3320:	637b      	str	r3, [r7, #52]	; 0x34
    3322:	2333      	movs	r3, #51	; 0x33
    3324:	18fb      	adds	r3, r7, r3
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	2b09      	cmp	r3, #9
    332a:	dc05      	bgt.n	3338 <_ZN5Print11printNumberEmh+0x6e>
    332c:	2333      	movs	r3, #51	; 0x33
    332e:	18fb      	adds	r3, r7, r3
    3330:	781b      	ldrb	r3, [r3, #0]
    3332:	3330      	adds	r3, #48	; 0x30
    3334:	b2db      	uxtb	r3, r3
    3336:	e004      	b.n	3342 <_ZN5Print11printNumberEmh+0x78>
    3338:	2333      	movs	r3, #51	; 0x33
    333a:	18fb      	adds	r3, r7, r3
    333c:	781b      	ldrb	r3, [r3, #0]
    333e:	3337      	adds	r3, #55	; 0x37
    3340:	b2db      	uxtb	r3, r3
    3342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3344:	7013      	strb	r3, [r2, #0]
  } while(n);
    3346:	68bb      	ldr	r3, [r7, #8]
    3348:	2b00      	cmp	r3, #0
    334a:	d004      	beq.n	3356 <_ZN5Print11printNumberEmh+0x8c>
    334c:	1dfb      	adds	r3, r7, #7
    334e:	1dfa      	adds	r2, r7, #7
    3350:	7812      	ldrb	r2, [r2, #0]
    3352:	701a      	strb	r2, [r3, #0]
  do {
    3354:	e7ce      	b.n	32f4 <_ZN5Print11printNumberEmh+0x2a>

  return write(str);
    3356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3358:	68fb      	ldr	r3, [r7, #12]
    335a:	0011      	movs	r1, r2
    335c:	0018      	movs	r0, r3
    335e:	f7ff fde9 	bl	2f34 <_ZN5Print5writeEPKc>
    3362:	0003      	movs	r3, r0
}
    3364:	0018      	movs	r0, r3
    3366:	46bd      	mov	sp, r7
    3368:	b00e      	add	sp, #56	; 0x38
    336a:	bd80      	pop	{r7, pc}

0000336c <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    336c:	b580      	push	{r7, lr}
    336e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3370:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    3374:	4b03      	ldr	r3, [pc, #12]	; (3384 <NVIC_SystemReset+0x18>)
    3376:	4a04      	ldr	r2, [pc, #16]	; (3388 <NVIC_SystemReset+0x1c>)
    3378:	60da      	str	r2, [r3, #12]
    337a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	e7fd      	b.n	337e <NVIC_SystemReset+0x12>
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	e000ed00 	.word	0xe000ed00
    3388:	05fa0004 	.word	0x05fa0004

0000338c <nvmReady>:

#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
    338c:	b580      	push	{r7, lr}
    338e:	af00      	add	r7, sp, #0
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    3390:	4b05      	ldr	r3, [pc, #20]	; (33a8 <nvmReady+0x1c>)
    3392:	7d1b      	ldrb	r3, [r3, #20]
    3394:	b2db      	uxtb	r3, r3
    3396:	001a      	movs	r2, r3
    3398:	2301      	movs	r3, #1
    339a:	4013      	ands	r3, r2
    339c:	1e5a      	subs	r2, r3, #1
    339e:	4193      	sbcs	r3, r2
    33a0:	b2db      	uxtb	r3, r3
}
    33a2:	0018      	movs	r0, r3
    33a4:	46bd      	mov	sp, r7
    33a6:	bd80      	pop	{r7, pc}
    33a8:	41004000 	.word	0x41004000

000033ac <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
    33ac:	b580      	push	{r7, lr}
    33ae:	b082      	sub	sp, #8
    33b0:	af00      	add	r7, sp, #0
    33b2:	6078      	str	r0, [r7, #4]
	ticks = _ticks;
    33b4:	4b03      	ldr	r3, [pc, #12]	; (33c4 <initiateReset+0x18>)
    33b6:	687a      	ldr	r2, [r7, #4]
    33b8:	601a      	str	r2, [r3, #0]
}
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	46bd      	mov	sp, r7
    33be:	b002      	add	sp, #8
    33c0:	bd80      	pop	{r7, pc}
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	2000001c 	.word	0x2000001c

000033c8 <cancelReset>:

void cancelReset() {
    33c8:	b580      	push	{r7, lr}
    33ca:	af00      	add	r7, sp, #0
	ticks = -1;
    33cc:	4b03      	ldr	r3, [pc, #12]	; (33dc <cancelReset+0x14>)
    33ce:	2201      	movs	r2, #1
    33d0:	4252      	negs	r2, r2
    33d2:	601a      	str	r2, [r3, #0]
}
    33d4:	46c0      	nop			; (mov r8, r8)
    33d6:	46bd      	mov	sp, r7
    33d8:	bd80      	pop	{r7, pc}
    33da:	46c0      	nop			; (mov r8, r8)
    33dc:	2000001c 	.word	0x2000001c

000033e0 <tickReset>:

void tickReset() {
    33e0:	b580      	push	{r7, lr}
    33e2:	af00      	add	r7, sp, #0
	if (ticks == -1)
    33e4:	4b09      	ldr	r3, [pc, #36]	; (340c <tickReset+0x2c>)
    33e6:	681b      	ldr	r3, [r3, #0]
    33e8:	3301      	adds	r3, #1
    33ea:	d00b      	beq.n	3404 <tickReset+0x24>
		return;
	ticks--;
    33ec:	4b07      	ldr	r3, [pc, #28]	; (340c <tickReset+0x2c>)
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	1e5a      	subs	r2, r3, #1
    33f2:	4b06      	ldr	r3, [pc, #24]	; (340c <tickReset+0x2c>)
    33f4:	601a      	str	r2, [r3, #0]
	if (ticks == 0)
    33f6:	4b05      	ldr	r3, [pc, #20]	; (340c <tickReset+0x2c>)
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d103      	bne.n	3406 <tickReset+0x26>
		banzai();
    33fe:	4b04      	ldr	r3, [pc, #16]	; (3410 <tickReset+0x30>)
    3400:	4798      	blx	r3
    3402:	e000      	b.n	3406 <tickReset+0x26>
		return;
    3404:	46c0      	nop			; (mov r8, r8)
}
    3406:	46bd      	mov	sp, r7
    3408:	bd80      	pop	{r7, pc}
    340a:	46c0      	nop			; (mov r8, r8)
    340c:	2000001c 	.word	0x2000001c
    3410:	00014499 	.word	0x00014499

00003414 <SystemInit>:
#define GENERIC_CLOCK_GENERATOR_OSC8M     (3u)
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
    3414:	b580      	push	{r7, lr}
    3416:	b082      	sub	sp, #8
    3418:	af00      	add	r7, sp, #0
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    341a:	4a75      	ldr	r2, [pc, #468]	; (35f0 <SystemInit+0x1dc>)
    341c:	6853      	ldr	r3, [r2, #4]
    341e:	211e      	movs	r1, #30
    3420:	438b      	bics	r3, r1
    3422:	2102      	movs	r1, #2
    3424:	430b      	orrs	r3, r1
    3426:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    3428:	4b72      	ldr	r3, [pc, #456]	; (35f4 <SystemInit+0x1e0>)
    342a:	4a72      	ldr	r2, [pc, #456]	; (35f4 <SystemInit+0x1e0>)
    342c:	6992      	ldr	r2, [r2, #24]
    342e:	2108      	movs	r1, #8
    3430:	430a      	orrs	r2, r1
    3432:	619a      	str	r2, [r3, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    3434:	4b70      	ldr	r3, [pc, #448]	; (35f8 <SystemInit+0x1e4>)
    3436:	4a71      	ldr	r2, [pc, #452]	; (35fc <SystemInit+0x1e8>)
    3438:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    343a:	4a6f      	ldr	r2, [pc, #444]	; (35f8 <SystemInit+0x1e4>)
    343c:	8a93      	ldrh	r3, [r2, #20]
    343e:	2102      	movs	r1, #2
    3440:	430b      	orrs	r3, r1
    3442:	8293      	strh	r3, [r2, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    3444:	46c0      	nop			; (mov r8, r8)
    3446:	4b6c      	ldr	r3, [pc, #432]	; (35f8 <SystemInit+0x1e4>)
    3448:	68db      	ldr	r3, [r3, #12]
    344a:	2202      	movs	r2, #2
    344c:	4013      	ands	r3, r2
    344e:	d0fa      	beq.n	3446 <SystemInit+0x32>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    3450:	4b6b      	ldr	r3, [pc, #428]	; (3600 <SystemInit+0x1ec>)
    3452:	2201      	movs	r2, #1
    3454:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    3456:	46c0      	nop			; (mov r8, r8)
    3458:	4b69      	ldr	r3, [pc, #420]	; (3600 <SystemInit+0x1ec>)
    345a:	781b      	ldrb	r3, [r3, #0]
    345c:	b2db      	uxtb	r3, r3
    345e:	001a      	movs	r2, r3
    3460:	2301      	movs	r3, #1
    3462:	4013      	ands	r3, r2
    3464:	d005      	beq.n	3472 <SystemInit+0x5e>
    3466:	4b66      	ldr	r3, [pc, #408]	; (3600 <SystemInit+0x1ec>)
    3468:	785b      	ldrb	r3, [r3, #1]
    346a:	b2db      	uxtb	r3, r3
    346c:	b25b      	sxtb	r3, r3
    346e:	2b00      	cmp	r3, #0
    3470:	dbf2      	blt.n	3458 <SystemInit+0x44>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    3472:	4b63      	ldr	r3, [pc, #396]	; (3600 <SystemInit+0x1ec>)
    3474:	2201      	movs	r2, #1
    3476:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3478:	46c0      	nop			; (mov r8, r8)
    347a:	4b61      	ldr	r3, [pc, #388]	; (3600 <SystemInit+0x1ec>)
    347c:	785b      	ldrb	r3, [r3, #1]
    347e:	b2db      	uxtb	r3, r3
    3480:	b25b      	sxtb	r3, r3
    3482:	2b00      	cmp	r3, #0
    3484:	dbf9      	blt.n	347a <SystemInit+0x66>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
    3486:	4b5e      	ldr	r3, [pc, #376]	; (3600 <SystemInit+0x1ec>)
    3488:	4a5e      	ldr	r2, [pc, #376]	; (3604 <SystemInit+0x1f0>)
    348a:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    348c:	46c0      	nop			; (mov r8, r8)
    348e:	4b5c      	ldr	r3, [pc, #368]	; (3600 <SystemInit+0x1ec>)
    3490:	785b      	ldrb	r3, [r3, #1]
    3492:	b2db      	uxtb	r3, r3
    3494:	b25b      	sxtb	r3, r3
    3496:	2b00      	cmp	r3, #0
    3498:	dbf9      	blt.n	348e <SystemInit+0x7a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    349a:	4b59      	ldr	r3, [pc, #356]	; (3600 <SystemInit+0x1ec>)
    349c:	2282      	movs	r2, #130	; 0x82
    349e:	01d2      	lsls	r2, r2, #7
    34a0:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    34a2:	46c0      	nop			; (mov r8, r8)
    34a4:	4b56      	ldr	r3, [pc, #344]	; (3600 <SystemInit+0x1ec>)
    34a6:	785b      	ldrb	r3, [r3, #1]
    34a8:	b2db      	uxtb	r3, r3
    34aa:	b25b      	sxtb	r3, r3
    34ac:	2b00      	cmp	r3, #0
    34ae:	dbf9      	blt.n	34a4 <SystemInit+0x90>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    34b0:	4b51      	ldr	r3, [pc, #324]	; (35f8 <SystemInit+0x1e4>)
    34b2:	2202      	movs	r2, #2
    34b4:	849a      	strh	r2, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	4b4f      	ldr	r3, [pc, #316]	; (35f8 <SystemInit+0x1e4>)
    34ba:	68db      	ldr	r3, [r3, #12]
    34bc:	2210      	movs	r2, #16
    34be:	4013      	ands	r3, r2
    34c0:	d0fa      	beq.n	34b8 <SystemInit+0xa4>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    34c2:	4b4d      	ldr	r3, [pc, #308]	; (35f8 <SystemInit+0x1e4>)
    34c4:	4a50      	ldr	r2, [pc, #320]	; (3608 <SystemInit+0x1f4>)
    34c6:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    34c8:	46c0      	nop			; (mov r8, r8)
    34ca:	4b4b      	ldr	r3, [pc, #300]	; (35f8 <SystemInit+0x1e4>)
    34cc:	68db      	ldr	r3, [r3, #12]
    34ce:	2210      	movs	r2, #16
    34d0:	4013      	ands	r3, r2
    34d2:	d0fa      	beq.n	34ca <SystemInit+0xb6>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    34d4:	4a48      	ldr	r2, [pc, #288]	; (35f8 <SystemInit+0x1e4>)
    34d6:	4b48      	ldr	r3, [pc, #288]	; (35f8 <SystemInit+0x1e4>)
    34d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    34da:	b29b      	uxth	r3, r3
    34dc:	494b      	ldr	r1, [pc, #300]	; (360c <SystemInit+0x1f8>)
    34de:	430b      	orrs	r3, r1
    34e0:	b29b      	uxth	r3, r3
    34e2:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    34e4:	46c0      	nop			; (mov r8, r8)
    34e6:	4b44      	ldr	r3, [pc, #272]	; (35f8 <SystemInit+0x1e4>)
    34e8:	68db      	ldr	r3, [r3, #12]
    34ea:	2210      	movs	r2, #16
    34ec:	4013      	ands	r3, r2
    34ee:	d0fa      	beq.n	34e6 <SystemInit+0xd2>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    34f0:	4a41      	ldr	r2, [pc, #260]	; (35f8 <SystemInit+0x1e4>)
    34f2:	4b41      	ldr	r3, [pc, #260]	; (35f8 <SystemInit+0x1e4>)
    34f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    34f6:	b29b      	uxth	r3, r3
    34f8:	2102      	movs	r1, #2
    34fa:	430b      	orrs	r3, r1
    34fc:	b29b      	uxth	r3, r3
    34fe:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    3500:	46c0      	nop			; (mov r8, r8)
    3502:	4b3d      	ldr	r3, [pc, #244]	; (35f8 <SystemInit+0x1e4>)
    3504:	68db      	ldr	r3, [r3, #12]
    3506:	2280      	movs	r2, #128	; 0x80
    3508:	4013      	ands	r3, r2
    350a:	d0fa      	beq.n	3502 <SystemInit+0xee>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    350c:	4b3a      	ldr	r3, [pc, #232]	; (35f8 <SystemInit+0x1e4>)
    350e:	68db      	ldr	r3, [r3, #12]
    3510:	2240      	movs	r2, #64	; 0x40
    3512:	4013      	ands	r3, r2
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    3514:	d0f5      	beq.n	3502 <SystemInit+0xee>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	4b37      	ldr	r3, [pc, #220]	; (35f8 <SystemInit+0x1e4>)
    351a:	68db      	ldr	r3, [r3, #12]
    351c:	2210      	movs	r2, #16
    351e:	4013      	ands	r3, r2
    3520:	d0fa      	beq.n	3518 <SystemInit+0x104>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    3522:	4b37      	ldr	r3, [pc, #220]	; (3600 <SystemInit+0x1ec>)
    3524:	2200      	movs	r2, #0
    3526:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    3528:	46c0      	nop			; (mov r8, r8)
    352a:	4b35      	ldr	r3, [pc, #212]	; (3600 <SystemInit+0x1ec>)
    352c:	785b      	ldrb	r3, [r3, #1]
    352e:	b2db      	uxtb	r3, r3
    3530:	b25b      	sxtb	r3, r3
    3532:	2b00      	cmp	r3, #0
    3534:	dbf9      	blt.n	352a <SystemInit+0x116>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    3536:	4b32      	ldr	r3, [pc, #200]	; (3600 <SystemInit+0x1ec>)
    3538:	4a35      	ldr	r2, [pc, #212]	; (3610 <SystemInit+0x1fc>)
    353a:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    353c:	46c0      	nop			; (mov r8, r8)
    353e:	4b30      	ldr	r3, [pc, #192]	; (3600 <SystemInit+0x1ec>)
    3540:	785b      	ldrb	r3, [r3, #1]
    3542:	b2db      	uxtb	r3, r3
    3544:	b25b      	sxtb	r3, r3
    3546:	2b00      	cmp	r3, #0
    3548:	dbf9      	blt.n	353e <SystemInit+0x12a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
    354a:	4a2b      	ldr	r2, [pc, #172]	; (35f8 <SystemInit+0x1e4>)
    354c:	6a13      	ldr	r3, [r2, #32]
    354e:	4931      	ldr	r1, [pc, #196]	; (3614 <SystemInit+0x200>)
    3550:	400b      	ands	r3, r1
    3552:	6213      	str	r3, [r2, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    3554:	4a28      	ldr	r2, [pc, #160]	; (35f8 <SystemInit+0x1e4>)
    3556:	6a13      	ldr	r3, [r2, #32]
    3558:	2180      	movs	r1, #128	; 0x80
    355a:	438b      	bics	r3, r1
    355c:	6213      	str	r3, [r2, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    355e:	4b28      	ldr	r3, [pc, #160]	; (3600 <SystemInit+0x1ec>)
    3560:	2203      	movs	r2, #3
    3562:	609a      	str	r2, [r3, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    3564:	4b26      	ldr	r3, [pc, #152]	; (3600 <SystemInit+0x1ec>)
    3566:	4a2c      	ldr	r2, [pc, #176]	; (3618 <SystemInit+0x204>)
    3568:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	4b24      	ldr	r3, [pc, #144]	; (3600 <SystemInit+0x1ec>)
    356e:	785b      	ldrb	r3, [r3, #1]
    3570:	b2db      	uxtb	r3, r3
    3572:	b25b      	sxtb	r3, r3
    3574:	2b00      	cmp	r3, #0
    3576:	dbf9      	blt.n	356c <SystemInit+0x158>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    3578:	4b1e      	ldr	r3, [pc, #120]	; (35f4 <SystemInit+0x1e0>)
    357a:	2200      	movs	r2, #0
    357c:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    357e:	4b1d      	ldr	r3, [pc, #116]	; (35f4 <SystemInit+0x1e0>)
    3580:	2200      	movs	r2, #0
    3582:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    3584:	4b1b      	ldr	r3, [pc, #108]	; (35f4 <SystemInit+0x1e0>)
    3586:	2200      	movs	r2, #0
    3588:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    358a:	4b1a      	ldr	r3, [pc, #104]	; (35f4 <SystemInit+0x1e0>)
    358c:	2200      	movs	r2, #0
    358e:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=VARIANT_MCK ;
    3590:	4b22      	ldr	r3, [pc, #136]	; (361c <SystemInit+0x208>)
    3592:	4a23      	ldr	r2, [pc, #140]	; (3620 <SystemInit+0x20c>)
    3594:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    3596:	4b23      	ldr	r3, [pc, #140]	; (3624 <SystemInit+0x210>)
    3598:	681b      	ldr	r3, [r3, #0]
    359a:	08db      	lsrs	r3, r3, #3
    359c:	2207      	movs	r2, #7
    359e:	4013      	ands	r3, r2
    35a0:	607b      	str	r3, [r7, #4]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    35a2:	4b21      	ldr	r3, [pc, #132]	; (3628 <SystemInit+0x214>)
    35a4:	681b      	ldr	r3, [r3, #0]
    35a6:	0edb      	lsrs	r3, r3, #27
    35a8:	603b      	str	r3, [r7, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
    35aa:	4b1e      	ldr	r3, [pc, #120]	; (3624 <SystemInit+0x210>)
    35ac:	681b      	ldr	r3, [r3, #0]
    35ae:	015b      	lsls	r3, r3, #5
    35b0:	22ff      	movs	r2, #255	; 0xff
    35b2:	4013      	ands	r3, r2
    35b4:	683a      	ldr	r2, [r7, #0]
    35b6:	4313      	orrs	r3, r2
    35b8:	603b      	str	r3, [r7, #0]

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    35ba:	491c      	ldr	r1, [pc, #112]	; (362c <SystemInit+0x218>)
    35bc:	687b      	ldr	r3, [r7, #4]
    35be:	b29b      	uxth	r3, r3
    35c0:	021b      	lsls	r3, r3, #8
    35c2:	b29a      	uxth	r2, r3
    35c4:	23e0      	movs	r3, #224	; 0xe0
    35c6:	00db      	lsls	r3, r3, #3
    35c8:	4013      	ands	r3, r2
    35ca:	b29a      	uxth	r2, r3
    35cc:	683b      	ldr	r3, [r7, #0]
    35ce:	b29b      	uxth	r3, r3
    35d0:	20ff      	movs	r0, #255	; 0xff
    35d2:	4003      	ands	r3, r0
    35d4:	b29b      	uxth	r3, r3
    35d6:	4313      	orrs	r3, r2
    35d8:	b29b      	uxth	r3, r3
    35da:	850b      	strh	r3, [r1, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    35dc:	4a04      	ldr	r2, [pc, #16]	; (35f0 <SystemInit+0x1dc>)
    35de:	6853      	ldr	r3, [r2, #4]
    35e0:	2180      	movs	r1, #128	; 0x80
    35e2:	430b      	orrs	r3, r1
    35e4:	6053      	str	r3, [r2, #4]
}
    35e6:	46c0      	nop			; (mov r8, r8)
    35e8:	46bd      	mov	sp, r7
    35ea:	b002      	add	sp, #8
    35ec:	bd80      	pop	{r7, pc}
    35ee:	46c0      	nop			; (mov r8, r8)
    35f0:	41004000 	.word	0x41004000
    35f4:	40000400 	.word	0x40000400
    35f8:	40000800 	.word	0x40000800
    35fc:	0000060c 	.word	0x0000060c
    3600:	40000c00 	.word	0x40000c00
    3604:	00010501 	.word	0x00010501
    3608:	7dff05b9 	.word	0x7dff05b9
    360c:	00000a04 	.word	0x00000a04
    3610:	00030700 	.word	0x00030700
    3614:	fffffcff 	.word	0xfffffcff
    3618:	00010603 	.word	0x00010603
    361c:	20000048 	.word	0x20000048
    3620:	02dc6c00 	.word	0x02dc6c00
    3624:	00806024 	.word	0x00806024
    3628:	00806020 	.word	0x00806020
    362c:	42004000 	.word	0x42004000

00003630 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
    3630:	b580      	push	{r7, lr}
    3632:	b082      	sub	sp, #8
    3634:	af00      	add	r7, sp, #0
    3636:	6078      	str	r0, [r7, #4]
    3638:	4a05      	ldr	r2, [pc, #20]	; (3650 <_ZN5PrintC1Ev+0x20>)
    363a:	687b      	ldr	r3, [r7, #4]
    363c:	601a      	str	r2, [r3, #0]
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	2200      	movs	r2, #0
    3642:	605a      	str	r2, [r3, #4]
    3644:	687b      	ldr	r3, [r7, #4]
    3646:	0018      	movs	r0, r3
    3648:	46bd      	mov	sp, r7
    364a:	b002      	add	sp, #8
    364c:	bd80      	pop	{r7, pc}
    364e:	46c0      	nop			; (mov r8, r8)
    3650:	00013418 	.word	0x00013418

00003654 <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3654:	b580      	push	{r7, lr}
    3656:	b082      	sub	sp, #8
    3658:	af00      	add	r7, sp, #0
    365a:	6078      	str	r0, [r7, #4]
    365c:	687b      	ldr	r3, [r7, #4]
    365e:	0018      	movs	r0, r3
    3660:	f7ff ffe6 	bl	3630 <_ZN5PrintC1Ev>
    3664:	4a05      	ldr	r2, [pc, #20]	; (367c <_ZN6StreamC1Ev+0x28>)
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	601a      	str	r2, [r3, #0]
    366a:	687b      	ldr	r3, [r7, #4]
    366c:	22fa      	movs	r2, #250	; 0xfa
    366e:	0092      	lsls	r2, r2, #2
    3670:	609a      	str	r2, [r3, #8]
    3672:	687b      	ldr	r3, [r7, #4]
    3674:	0018      	movs	r0, r3
    3676:	46bd      	mov	sp, r7
    3678:	b002      	add	sp, #8
    367a:	bd80      	pop	{r7, pc}
    367c:	000134a8 	.word	0x000134a8

00003680 <_ZN14HardwareSerialC1Ev>:

class HardwareSerial : public Stream
{
	public:
	
	HardwareSerial() {};
    3680:	b580      	push	{r7, lr}
    3682:	b082      	sub	sp, #8
    3684:	af00      	add	r7, sp, #0
    3686:	6078      	str	r0, [r7, #4]
    3688:	687b      	ldr	r3, [r7, #4]
    368a:	0018      	movs	r0, r3
    368c:	f7ff ffe2 	bl	3654 <_ZN6StreamC1Ev>
    3690:	4a03      	ldr	r2, [pc, #12]	; (36a0 <_ZN14HardwareSerialC1Ev+0x20>)
    3692:	687b      	ldr	r3, [r7, #4]
    3694:	601a      	str	r2, [r3, #0]
    3696:	687b      	ldr	r3, [r7, #4]
    3698:	0018      	movs	r0, r3
    369a:	46bd      	mov	sp, r7
    369c:	b002      	add	sp, #8
    369e:	bd80      	pop	{r7, pc}
    36a0:	0001346c 	.word	0x0001346c

000036a4 <_ZN14HardwareSerialD1Ev>:
	virtual ~HardwareSerial() {};
    36a4:	b580      	push	{r7, lr}
    36a6:	b082      	sub	sp, #8
    36a8:	af00      	add	r7, sp, #0
    36aa:	6078      	str	r0, [r7, #4]
    36ac:	4a03      	ldr	r2, [pc, #12]	; (36bc <_ZN14HardwareSerialD1Ev+0x18>)
    36ae:	687b      	ldr	r3, [r7, #4]
    36b0:	601a      	str	r2, [r3, #0]
    36b2:	687b      	ldr	r3, [r7, #4]
    36b4:	0018      	movs	r0, r3
    36b6:	46bd      	mov	sp, r7
    36b8:	b002      	add	sp, #8
    36ba:	bd80      	pop	{r7, pc}
    36bc:	0001346c 	.word	0x0001346c

000036c0 <_ZN14HardwareSerialD0Ev>:
    36c0:	b580      	push	{r7, lr}
    36c2:	b082      	sub	sp, #8
    36c4:	af00      	add	r7, sp, #0
    36c6:	6078      	str	r0, [r7, #4]
    36c8:	687b      	ldr	r3, [r7, #4]
    36ca:	0018      	movs	r0, r3
    36cc:	f7ff ffea 	bl	36a4 <_ZN14HardwareSerialD1Ev>
    36d0:	687b      	ldr	r3, [r7, #4]
    36d2:	0018      	movs	r0, r3
    36d4:	f00a f83b 	bl	d74e <_ZdlPv>
    36d8:	687b      	ldr	r3, [r7, #4]
    36da:	0018      	movs	r0, r3
    36dc:	46bd      	mov	sp, r7
    36de:	b002      	add	sp, #8
    36e0:	bd80      	pop	{r7, pc}

000036e2 <_ZN14HardwareSerial5beginEm>:
	
	virtual void begin(unsigned long) {};
    36e2:	b580      	push	{r7, lr}
    36e4:	b082      	sub	sp, #8
    36e6:	af00      	add	r7, sp, #0
    36e8:	6078      	str	r0, [r7, #4]
    36ea:	6039      	str	r1, [r7, #0]
    36ec:	46c0      	nop			; (mov r8, r8)
    36ee:	46bd      	mov	sp, r7
    36f0:	b002      	add	sp, #8
    36f2:	bd80      	pop	{r7, pc}

000036f4 <_ZN14HardwareSerial5beginEmt>:
	virtual void begin(unsigned long baudrate, uint16_t config) {};
    36f4:	b580      	push	{r7, lr}
    36f6:	b084      	sub	sp, #16
    36f8:	af00      	add	r7, sp, #0
    36fa:	60f8      	str	r0, [r7, #12]
    36fc:	60b9      	str	r1, [r7, #8]
    36fe:	1dbb      	adds	r3, r7, #6
    3700:	801a      	strh	r2, [r3, #0]
    3702:	46c0      	nop			; (mov r8, r8)
    3704:	46bd      	mov	sp, r7
    3706:	b004      	add	sp, #16
    3708:	bd80      	pop	{r7, pc}

0000370a <_ZN14HardwareSerial3endEv>:
	virtual void end() {};
    370a:	b580      	push	{r7, lr}
    370c:	b082      	sub	sp, #8
    370e:	af00      	add	r7, sp, #0
    3710:	6078      	str	r0, [r7, #4]
    3712:	46c0      	nop			; (mov r8, r8)
    3714:	46bd      	mov	sp, r7
    3716:	b002      	add	sp, #8
    3718:	bd80      	pop	{r7, pc}
	...

0000371c <__NVIC_GetPriority>:
{
    371c:	b580      	push	{r7, lr}
    371e:	b082      	sub	sp, #8
    3720:	af00      	add	r7, sp, #0
    3722:	0002      	movs	r2, r0
    3724:	1dfb      	adds	r3, r7, #7
    3726:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3728:	1dfb      	adds	r3, r7, #7
    372a:	781b      	ldrb	r3, [r3, #0]
    372c:	2b7f      	cmp	r3, #127	; 0x7f
    372e:	d813      	bhi.n	3758 <__NVIC_GetPriority+0x3c>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    3730:	4a17      	ldr	r2, [pc, #92]	; (3790 <__NVIC_GetPriority+0x74>)
    3732:	1dfb      	adds	r3, r7, #7
    3734:	781b      	ldrb	r3, [r3, #0]
    3736:	b25b      	sxtb	r3, r3
    3738:	089b      	lsrs	r3, r3, #2
    373a:	33c0      	adds	r3, #192	; 0xc0
    373c:	009b      	lsls	r3, r3, #2
    373e:	589a      	ldr	r2, [r3, r2]
    3740:	1dfb      	adds	r3, r7, #7
    3742:	781b      	ldrb	r3, [r3, #0]
    3744:	b25b      	sxtb	r3, r3
    3746:	2103      	movs	r1, #3
    3748:	400b      	ands	r3, r1
    374a:	00db      	lsls	r3, r3, #3
    374c:	40da      	lsrs	r2, r3
    374e:	0013      	movs	r3, r2
    3750:	099b      	lsrs	r3, r3, #6
    3752:	2203      	movs	r2, #3
    3754:	4013      	ands	r3, r2
    3756:	e017      	b.n	3788 <__NVIC_GetPriority+0x6c>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    3758:	4a0e      	ldr	r2, [pc, #56]	; (3794 <__NVIC_GetPriority+0x78>)
    375a:	1dfb      	adds	r3, r7, #7
    375c:	781b      	ldrb	r3, [r3, #0]
    375e:	b25b      	sxtb	r3, r3
    3760:	210f      	movs	r1, #15
    3762:	400b      	ands	r3, r1
    3764:	3b08      	subs	r3, #8
    3766:	089b      	lsrs	r3, r3, #2
    3768:	3306      	adds	r3, #6
    376a:	009b      	lsls	r3, r3, #2
    376c:	18d3      	adds	r3, r2, r3
    376e:	3304      	adds	r3, #4
    3770:	681a      	ldr	r2, [r3, #0]
    3772:	1dfb      	adds	r3, r7, #7
    3774:	781b      	ldrb	r3, [r3, #0]
    3776:	b25b      	sxtb	r3, r3
    3778:	2103      	movs	r1, #3
    377a:	400b      	ands	r3, r1
    377c:	00db      	lsls	r3, r3, #3
    377e:	40da      	lsrs	r2, r3
    3780:	0013      	movs	r3, r2
    3782:	099b      	lsrs	r3, r3, #6
    3784:	2203      	movs	r2, #3
    3786:	4013      	ands	r3, r2
}
    3788:	0018      	movs	r0, r3
    378a:	46bd      	mov	sp, r7
    378c:	b002      	add	sp, #8
    378e:	bd80      	pop	{r7, pc}
    3790:	e000e100 	.word	0xe000e100
    3794:	e000ed00 	.word	0xe000ed00

00003798 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    3798:	b580      	push	{r7, lr}
    379a:	b082      	sub	sp, #8
    379c:	af00      	add	r7, sp, #0
    379e:	6078      	str	r0, [r7, #4]
    37a0:	2301      	movs	r3, #1
    37a2:	0018      	movs	r0, r3
    37a4:	46bd      	mov	sp, r7
    37a6:	b002      	add	sp, #8
    37a8:	bd80      	pop	{r7, pc}

000037aa <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:

#define NO_RTS_PIN 255
#define NO_CTS_PIN 255
#define RTS_RX_THRESHOLD 10

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    37aa:	b590      	push	{r4, r7, lr}
    37ac:	b089      	sub	sp, #36	; 0x24
    37ae:	af04      	add	r7, sp, #16
    37b0:	60f8      	str	r0, [r7, #12]
    37b2:	60b9      	str	r1, [r7, #8]
    37b4:	0019      	movs	r1, r3
    37b6:	1dfb      	adds	r3, r7, #7
    37b8:	701a      	strb	r2, [r3, #0]
    37ba:	1dbb      	adds	r3, r7, #6
    37bc:	1c0a      	adds	r2, r1, #0
    37be:	701a      	strb	r2, [r3, #0]
  Uart(_s, _pinRX, _pinTX, _padRX, _padTX, NO_RTS_PIN, NO_CTS_PIN)
    37c0:	1dbb      	adds	r3, r7, #6
    37c2:	781c      	ldrb	r4, [r3, #0]
    37c4:	1dfb      	adds	r3, r7, #7
    37c6:	781a      	ldrb	r2, [r3, #0]
    37c8:	68b9      	ldr	r1, [r7, #8]
    37ca:	68f8      	ldr	r0, [r7, #12]
    37cc:	23ff      	movs	r3, #255	; 0xff
    37ce:	9303      	str	r3, [sp, #12]
    37d0:	23ff      	movs	r3, #255	; 0xff
    37d2:	9302      	str	r3, [sp, #8]
    37d4:	2324      	movs	r3, #36	; 0x24
    37d6:	18fb      	adds	r3, r7, r3
    37d8:	781b      	ldrb	r3, [r3, #0]
    37da:	9301      	str	r3, [sp, #4]
    37dc:	2320      	movs	r3, #32
    37de:	18fb      	adds	r3, r7, r3
    37e0:	781b      	ldrb	r3, [r3, #0]
    37e2:	9300      	str	r3, [sp, #0]
    37e4:	0023      	movs	r3, r4
    37e6:	f000 f805 	bl	37f4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>
{
}
    37ea:	68fb      	ldr	r3, [r7, #12]
    37ec:	0018      	movs	r0, r3
    37ee:	46bd      	mov	sp, r7
    37f0:	b005      	add	sp, #20
    37f2:	bd90      	pop	{r4, r7, pc}

000037f4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh>:

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    37f4:	b580      	push	{r7, lr}
    37f6:	b084      	sub	sp, #16
    37f8:	af00      	add	r7, sp, #0
    37fa:	60f8      	str	r0, [r7, #12]
    37fc:	60b9      	str	r1, [r7, #8]
    37fe:	0019      	movs	r1, r3
    3800:	1dfb      	adds	r3, r7, #7
    3802:	701a      	strb	r2, [r3, #0]
    3804:	1dbb      	adds	r3, r7, #6
    3806:	1c0a      	adds	r2, r1, #0
    3808:	701a      	strb	r2, [r3, #0]
    380a:	68fb      	ldr	r3, [r7, #12]
    380c:	0018      	movs	r0, r3
    380e:	f7ff ff37 	bl	3680 <_ZN14HardwareSerialC1Ev>
    3812:	4a1b      	ldr	r2, [pc, #108]	; (3880 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPadhh+0x8c>)
    3814:	68fb      	ldr	r3, [r7, #12]
    3816:	601a      	str	r2, [r3, #0]
    3818:	68fb      	ldr	r3, [r7, #12]
    381a:	3314      	adds	r3, #20
    381c:	0018      	movs	r0, r3
    381e:	f000 fad6 	bl	3dce <_ZN11RingBufferNILi64EEC1Ev>
    3822:	68fb      	ldr	r3, [r7, #12]
    3824:	335c      	adds	r3, #92	; 0x5c
    3826:	0018      	movs	r0, r3
    3828:	f000 fad1 	bl	3dce <_ZN11RingBufferNILi64EEC1Ev>
{
  sercom = _s;
    382c:	68fb      	ldr	r3, [r7, #12]
    382e:	68ba      	ldr	r2, [r7, #8]
    3830:	611a      	str	r2, [r3, #16]
  uc_pinRX = _pinRX;
    3832:	68fb      	ldr	r3, [r7, #12]
    3834:	1dfa      	adds	r2, r7, #7
    3836:	21a4      	movs	r1, #164	; 0xa4
    3838:	7812      	ldrb	r2, [r2, #0]
    383a:	545a      	strb	r2, [r3, r1]
  uc_pinTX = _pinTX;
    383c:	68fb      	ldr	r3, [r7, #12]
    383e:	1dba      	adds	r2, r7, #6
    3840:	21a5      	movs	r1, #165	; 0xa5
    3842:	7812      	ldrb	r2, [r2, #0]
    3844:	545a      	strb	r2, [r3, r1]
  uc_padRX = _padRX ;
    3846:	68fb      	ldr	r3, [r7, #12]
    3848:	2218      	movs	r2, #24
    384a:	18ba      	adds	r2, r7, r2
    384c:	21a6      	movs	r1, #166	; 0xa6
    384e:	7812      	ldrb	r2, [r2, #0]
    3850:	545a      	strb	r2, [r3, r1]
  uc_padTX = _padTX;
    3852:	68fb      	ldr	r3, [r7, #12]
    3854:	221c      	movs	r2, #28
    3856:	18ba      	adds	r2, r7, r2
    3858:	21a7      	movs	r1, #167	; 0xa7
    385a:	7812      	ldrb	r2, [r2, #0]
    385c:	545a      	strb	r2, [r3, r1]
  uc_pinRTS = _pinRTS;
    385e:	68fb      	ldr	r3, [r7, #12]
    3860:	2220      	movs	r2, #32
    3862:	18ba      	adds	r2, r7, r2
    3864:	21a8      	movs	r1, #168	; 0xa8
    3866:	7812      	ldrb	r2, [r2, #0]
    3868:	545a      	strb	r2, [r3, r1]
  uc_pinCTS = _pinCTS;
    386a:	68fb      	ldr	r3, [r7, #12]
    386c:	2224      	movs	r2, #36	; 0x24
    386e:	18ba      	adds	r2, r7, r2
    3870:	21b8      	movs	r1, #184	; 0xb8
    3872:	7812      	ldrb	r2, [r2, #0]
    3874:	545a      	strb	r2, [r3, r1]
}
    3876:	68fb      	ldr	r3, [r7, #12]
    3878:	0018      	movs	r0, r3
    387a:	46bd      	mov	sp, r7
    387c:	b004      	add	sp, #16
    387e:	bd80      	pop	{r7, pc}
    3880:	00013430 	.word	0x00013430

00003884 <_ZN4Uart5beginEm>:

void Uart::begin(unsigned long baudrate)
{
    3884:	b580      	push	{r7, lr}
    3886:	b082      	sub	sp, #8
    3888:	af00      	add	r7, sp, #0
    388a:	6078      	str	r0, [r7, #4]
    388c:	6039      	str	r1, [r7, #0]
  begin(baudrate, SERIAL_8N1);
    388e:	687b      	ldr	r3, [r7, #4]
    3890:	681b      	ldr	r3, [r3, #0]
    3892:	3328      	adds	r3, #40	; 0x28
    3894:	681b      	ldr	r3, [r3, #0]
    3896:	4a04      	ldr	r2, [pc, #16]	; (38a8 <_ZN4Uart5beginEm+0x24>)
    3898:	6839      	ldr	r1, [r7, #0]
    389a:	6878      	ldr	r0, [r7, #4]
    389c:	4798      	blx	r3
}
    389e:	46c0      	nop			; (mov r8, r8)
    38a0:	46bd      	mov	sp, r7
    38a2:	b002      	add	sp, #8
    38a4:	bd80      	pop	{r7, pc}
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	00000413 	.word	0x00000413

000038ac <_ZN4Uart5beginEmt>:

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ae:	b089      	sub	sp, #36	; 0x24
    38b0:	af02      	add	r7, sp, #8
    38b2:	60f8      	str	r0, [r7, #12]
    38b4:	60b9      	str	r1, [r7, #8]
    38b6:	1dbb      	adds	r3, r7, #6
    38b8:	801a      	strh	r2, [r3, #0]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    38ba:	68fb      	ldr	r3, [r7, #12]
    38bc:	22a4      	movs	r2, #164	; 0xa4
    38be:	5c9b      	ldrb	r3, [r3, r2]
    38c0:	0018      	movs	r0, r3
    38c2:	68fb      	ldr	r3, [r7, #12]
    38c4:	22a4      	movs	r2, #164	; 0xa4
    38c6:	5c9b      	ldrb	r3, [r3, r2]
    38c8:	0019      	movs	r1, r3
    38ca:	4a61      	ldr	r2, [pc, #388]	; (3a50 <_ZN4Uart5beginEmt+0x1a4>)
    38cc:	000b      	movs	r3, r1
    38ce:	005b      	lsls	r3, r3, #1
    38d0:	185b      	adds	r3, r3, r1
    38d2:	00db      	lsls	r3, r3, #3
    38d4:	18d3      	adds	r3, r2, r3
    38d6:	3308      	adds	r3, #8
    38d8:	781b      	ldrb	r3, [r3, #0]
    38da:	b25b      	sxtb	r3, r3
    38dc:	0019      	movs	r1, r3
    38de:	f003 f987 	bl	6bf0 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    38e2:	68fb      	ldr	r3, [r7, #12]
    38e4:	22a5      	movs	r2, #165	; 0xa5
    38e6:	5c9b      	ldrb	r3, [r3, r2]
    38e8:	0018      	movs	r0, r3
    38ea:	68fb      	ldr	r3, [r7, #12]
    38ec:	22a5      	movs	r2, #165	; 0xa5
    38ee:	5c9b      	ldrb	r3, [r3, r2]
    38f0:	0019      	movs	r1, r3
    38f2:	4a57      	ldr	r2, [pc, #348]	; (3a50 <_ZN4Uart5beginEmt+0x1a4>)
    38f4:	000b      	movs	r3, r1
    38f6:	005b      	lsls	r3, r3, #1
    38f8:	185b      	adds	r3, r3, r1
    38fa:	00db      	lsls	r3, r3, #3
    38fc:	18d3      	adds	r3, r2, r3
    38fe:	3308      	adds	r3, #8
    3900:	781b      	ldrb	r3, [r3, #0]
    3902:	b25b      	sxtb	r3, r3
    3904:	0019      	movs	r1, r3
    3906:	f003 f973 	bl	6bf0 <pinPeripheral>

  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    390a:	68fb      	ldr	r3, [r7, #12]
    390c:	22a7      	movs	r2, #167	; 0xa7
    390e:	5c9b      	ldrb	r3, [r3, r2]
    3910:	2b02      	cmp	r3, #2
    3912:	d118      	bne.n	3946 <_ZN4Uart5beginEmt+0x9a>
    if (uc_pinCTS != NO_CTS_PIN) {
    3914:	68fb      	ldr	r3, [r7, #12]
    3916:	22b8      	movs	r2, #184	; 0xb8
    3918:	5c9b      	ldrb	r3, [r3, r2]
    391a:	2bff      	cmp	r3, #255	; 0xff
    391c:	d013      	beq.n	3946 <_ZN4Uart5beginEmt+0x9a>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    391e:	68fb      	ldr	r3, [r7, #12]
    3920:	22b8      	movs	r2, #184	; 0xb8
    3922:	5c9b      	ldrb	r3, [r3, r2]
    3924:	0018      	movs	r0, r3
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	22b8      	movs	r2, #184	; 0xb8
    392a:	5c9b      	ldrb	r3, [r3, r2]
    392c:	0019      	movs	r1, r3
    392e:	4a48      	ldr	r2, [pc, #288]	; (3a50 <_ZN4Uart5beginEmt+0x1a4>)
    3930:	000b      	movs	r3, r1
    3932:	005b      	lsls	r3, r3, #1
    3934:	185b      	adds	r3, r3, r1
    3936:	00db      	lsls	r3, r3, #3
    3938:	18d3      	adds	r3, r2, r3
    393a:	3308      	adds	r3, #8
    393c:	781b      	ldrb	r3, [r3, #0]
    393e:	b25b      	sxtb	r3, r3
    3940:	0019      	movs	r1, r3
    3942:	f003 f955 	bl	6bf0 <pinPeripheral>
    }
  }

  if (uc_pinRTS != NO_RTS_PIN) {
    3946:	68fb      	ldr	r3, [r7, #12]
    3948:	22a8      	movs	r2, #168	; 0xa8
    394a:	5c9b      	ldrb	r3, [r3, r2]
    394c:	2bff      	cmp	r3, #255	; 0xff
    394e:	d041      	beq.n	39d4 <_ZN4Uart5beginEmt+0x128>
    pinMode(uc_pinRTS, OUTPUT);
    3950:	68fb      	ldr	r3, [r7, #12]
    3952:	22a8      	movs	r2, #168	; 0xa8
    3954:	5c9b      	ldrb	r3, [r3, r2]
    3956:	2101      	movs	r1, #1
    3958:	0018      	movs	r0, r3
    395a:	f002 ffad 	bl	68b8 <pinMode>

    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    395e:	68fb      	ldr	r3, [r7, #12]
    3960:	22a8      	movs	r2, #168	; 0xa8
    3962:	5c9b      	ldrb	r3, [r3, r2]
    3964:	0018      	movs	r0, r3
    3966:	2317      	movs	r3, #23
    3968:	18fa      	adds	r2, r7, r3
    396a:	4939      	ldr	r1, [pc, #228]	; (3a50 <_ZN4Uart5beginEmt+0x1a4>)
    396c:	0003      	movs	r3, r0
    396e:	005b      	lsls	r3, r3, #1
    3970:	181b      	adds	r3, r3, r0
    3972:	00db      	lsls	r3, r3, #3
    3974:	5c5b      	ldrb	r3, [r3, r1]
    3976:	7013      	strb	r3, [r2, #0]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    3978:	2317      	movs	r3, #23
    397a:	18fb      	adds	r3, r7, r3
    397c:	781b      	ldrb	r3, [r3, #0]
    397e:	b25b      	sxtb	r3, r3
    3980:	01db      	lsls	r3, r3, #7
    3982:	3318      	adds	r3, #24
    3984:	4a33      	ldr	r2, [pc, #204]	; (3a54 <_ZN4Uart5beginEmt+0x1a8>)
    3986:	189a      	adds	r2, r3, r2
    3988:	68fb      	ldr	r3, [r7, #12]
    398a:	21ac      	movs	r1, #172	; 0xac
    398c:	505a      	str	r2, [r3, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    398e:	2317      	movs	r3, #23
    3990:	18fb      	adds	r3, r7, r3
    3992:	781b      	ldrb	r3, [r3, #0]
    3994:	b25b      	sxtb	r3, r3
    3996:	01db      	lsls	r3, r3, #7
    3998:	3314      	adds	r3, #20
    399a:	4a2e      	ldr	r2, [pc, #184]	; (3a54 <_ZN4Uart5beginEmt+0x1a8>)
    399c:	189a      	adds	r2, r3, r2
    399e:	68fb      	ldr	r3, [r7, #12]
    39a0:	21b0      	movs	r1, #176	; 0xb0
    39a2:	505a      	str	r2, [r3, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    39a4:	68fb      	ldr	r3, [r7, #12]
    39a6:	22a8      	movs	r2, #168	; 0xa8
    39a8:	5c9b      	ldrb	r3, [r3, r2]
    39aa:	0019      	movs	r1, r3
    39ac:	4a28      	ldr	r2, [pc, #160]	; (3a50 <_ZN4Uart5beginEmt+0x1a4>)
    39ae:	000b      	movs	r3, r1
    39b0:	005b      	lsls	r3, r3, #1
    39b2:	185b      	adds	r3, r3, r1
    39b4:	00db      	lsls	r3, r3, #3
    39b6:	18d3      	adds	r3, r2, r3
    39b8:	3304      	adds	r3, #4
    39ba:	681b      	ldr	r3, [r3, #0]
    39bc:	2201      	movs	r2, #1
    39be:	409a      	lsls	r2, r3
    39c0:	68fb      	ldr	r3, [r7, #12]
    39c2:	21b4      	movs	r1, #180	; 0xb4
    39c4:	505a      	str	r2, [r3, r1]

    *pul_outclrRTS = ul_pinMaskRTS;
    39c6:	68fb      	ldr	r3, [r7, #12]
    39c8:	22b0      	movs	r2, #176	; 0xb0
    39ca:	589b      	ldr	r3, [r3, r2]
    39cc:	68fa      	ldr	r2, [r7, #12]
    39ce:	21b4      	movs	r1, #180	; 0xb4
    39d0:	5852      	ldr	r2, [r2, r1]
    39d2:	601a      	str	r2, [r3, #0]
  }

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    39d4:	68fb      	ldr	r3, [r7, #12]
    39d6:	6918      	ldr	r0, [r3, #16]
    39d8:	68bb      	ldr	r3, [r7, #8]
    39da:	2201      	movs	r2, #1
    39dc:	2101      	movs	r1, #1
    39de:	f009 ff59 	bl	d894 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    39e2:	68fb      	ldr	r3, [r7, #12]
    39e4:	691c      	ldr	r4, [r3, #16]
    39e6:	1dbb      	adds	r3, r7, #6
    39e8:	881a      	ldrh	r2, [r3, #0]
    39ea:	68fb      	ldr	r3, [r7, #12]
    39ec:	0011      	movs	r1, r2
    39ee:	0018      	movs	r0, r3
    39f0:	f000 f9b2 	bl	3d58 <_ZN4Uart15extractCharSizeEt>
    39f4:	0003      	movs	r3, r0
    39f6:	001d      	movs	r5, r3
    39f8:	1dbb      	adds	r3, r7, #6
    39fa:	881a      	ldrh	r2, [r3, #0]
    39fc:	68fb      	ldr	r3, [r7, #12]
    39fe:	0011      	movs	r1, r2
    3a00:	0018      	movs	r0, r3
    3a02:	f000 f9cc 	bl	3d9e <_ZN4Uart13extractParityEt>
    3a06:	0003      	movs	r3, r0
    3a08:	001e      	movs	r6, r3
    3a0a:	1dbb      	adds	r3, r7, #6
    3a0c:	881a      	ldrh	r2, [r3, #0]
    3a0e:	68fb      	ldr	r3, [r7, #12]
    3a10:	0011      	movs	r1, r2
    3a12:	0018      	movs	r0, r3
    3a14:	f000 f98c 	bl	3d30 <_ZN4Uart16extractNbStopBitEt>
    3a18:	0003      	movs	r3, r0
    3a1a:	9300      	str	r3, [sp, #0]
    3a1c:	0033      	movs	r3, r6
    3a1e:	2201      	movs	r2, #1
    3a20:	0029      	movs	r1, r5
    3a22:	0020      	movs	r0, r4
    3a24:	f009 ffaa 	bl	d97c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    3a28:	68fb      	ldr	r3, [r7, #12]
    3a2a:	6918      	ldr	r0, [r3, #16]
    3a2c:	68fb      	ldr	r3, [r7, #12]
    3a2e:	22a7      	movs	r2, #167	; 0xa7
    3a30:	5c99      	ldrb	r1, [r3, r2]
    3a32:	68fb      	ldr	r3, [r7, #12]
    3a34:	22a6      	movs	r2, #166	; 0xa6
    3a36:	5c9b      	ldrb	r3, [r3, r2]
    3a38:	001a      	movs	r2, r3
    3a3a:	f009 ffe3 	bl	da04 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    3a3e:	68fb      	ldr	r3, [r7, #12]
    3a40:	691b      	ldr	r3, [r3, #16]
    3a42:	0018      	movs	r0, r3
    3a44:	f00a f831 	bl	daaa <_ZN6SERCOM10enableUARTEv>
}
    3a48:	46c0      	nop			; (mov r8, r8)
    3a4a:	46bd      	mov	sp, r7
    3a4c:	b007      	add	sp, #28
    3a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a50:	0001371c 	.word	0x0001371c
    3a54:	41004400 	.word	0x41004400

00003a58 <_ZN4Uart3endEv>:

void Uart::end()
{
    3a58:	b580      	push	{r7, lr}
    3a5a:	b082      	sub	sp, #8
    3a5c:	af00      	add	r7, sp, #0
    3a5e:	6078      	str	r0, [r7, #4]
  sercom->resetUART();
    3a60:	687b      	ldr	r3, [r7, #4]
    3a62:	691b      	ldr	r3, [r3, #16]
    3a64:	0018      	movs	r0, r3
    3a66:	f009 fffc 	bl	da62 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    3a6a:	687b      	ldr	r3, [r7, #4]
    3a6c:	3314      	adds	r3, #20
    3a6e:	0018      	movs	r0, r3
    3a70:	f000 f9c0 	bl	3df4 <_ZN11RingBufferNILi64EE5clearEv>
  txBuffer.clear();
    3a74:	687b      	ldr	r3, [r7, #4]
    3a76:	335c      	adds	r3, #92	; 0x5c
    3a78:	0018      	movs	r0, r3
    3a7a:	f000 f9bb 	bl	3df4 <_ZN11RingBufferNILi64EE5clearEv>
}
    3a7e:	46c0      	nop			; (mov r8, r8)
    3a80:	46bd      	mov	sp, r7
    3a82:	b002      	add	sp, #8
    3a84:	bd80      	pop	{r7, pc}

00003a86 <_ZN4Uart5flushEv>:

void Uart::flush()
{
    3a86:	b580      	push	{r7, lr}
    3a88:	b082      	sub	sp, #8
    3a8a:	af00      	add	r7, sp, #0
    3a8c:	6078      	str	r0, [r7, #4]
  while(txBuffer.available()); // wait until TX buffer is empty
    3a8e:	687b      	ldr	r3, [r7, #4]
    3a90:	335c      	adds	r3, #92	; 0x5c
    3a92:	0018      	movs	r0, r3
    3a94:	f000 f9bc 	bl	3e10 <_ZN11RingBufferNILi64EE9availableEv>
    3a98:	0003      	movs	r3, r0
    3a9a:	1e5a      	subs	r2, r3, #1
    3a9c:	4193      	sbcs	r3, r2
    3a9e:	b2db      	uxtb	r3, r3
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	d000      	beq.n	3aa6 <_ZN4Uart5flushEv+0x20>
    3aa4:	e7f3      	b.n	3a8e <_ZN4Uart5flushEv+0x8>

  sercom->flushUART();
    3aa6:	687b      	ldr	r3, [r7, #4]
    3aa8:	691b      	ldr	r3, [r3, #16]
    3aaa:	0018      	movs	r0, r3
    3aac:	f00a f814 	bl	dad8 <_ZN6SERCOM9flushUARTEv>
}
    3ab0:	46c0      	nop			; (mov r8, r8)
    3ab2:	46bd      	mov	sp, r7
    3ab4:	b002      	add	sp, #8
    3ab6:	bd80      	pop	{r7, pc}

00003ab8 <_ZN4Uart10IrqHandlerEv>:

void Uart::IrqHandler()
{
    3ab8:	b590      	push	{r4, r7, lr}
    3aba:	b085      	sub	sp, #20
    3abc:	af00      	add	r7, sp, #0
    3abe:	6078      	str	r0, [r7, #4]
  if (sercom->availableDataUART()) {
    3ac0:	687b      	ldr	r3, [r7, #4]
    3ac2:	691b      	ldr	r3, [r3, #16]
    3ac4:	0018      	movs	r0, r3
    3ac6:	f00a f82d 	bl	db24 <_ZN6SERCOM17availableDataUARTEv>
    3aca:	1e03      	subs	r3, r0, #0
    3acc:	d027      	beq.n	3b1e <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	3314      	adds	r3, #20
    3ad2:	001c      	movs	r4, r3
    3ad4:	687b      	ldr	r3, [r7, #4]
    3ad6:	691b      	ldr	r3, [r3, #16]
    3ad8:	0018      	movs	r0, r3
    3ada:	f00a f85c 	bl	db96 <_ZN6SERCOM12readDataUARTEv>
    3ade:	0003      	movs	r3, r0
    3ae0:	0019      	movs	r1, r3
    3ae2:	0020      	movs	r0, r4
    3ae4:	f000 f9a9 	bl	3e3a <_ZN11RingBufferNILi64EE10store_charEh>

    if (uc_pinRTS != NO_RTS_PIN) {
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	22a8      	movs	r2, #168	; 0xa8
    3aec:	5c9b      	ldrb	r3, [r3, r2]
    3aee:	2bff      	cmp	r3, #255	; 0xff
    3af0:	d015      	beq.n	3b1e <_ZN4Uart10IrqHandlerEv+0x66>
      // RX buffer space is below the threshold, de-assert RTS
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    3af2:	687b      	ldr	r3, [r7, #4]
    3af4:	3314      	adds	r3, #20
    3af6:	0018      	movs	r0, r3
    3af8:	f000 f9c5 	bl	3e86 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3afc:	0002      	movs	r2, r0
    3afe:	2309      	movs	r3, #9
    3b00:	0fd0      	lsrs	r0, r2, #31
    3b02:	17d9      	asrs	r1, r3, #31
    3b04:	4293      	cmp	r3, r2
    3b06:	4148      	adcs	r0, r1
    3b08:	0003      	movs	r3, r0
    3b0a:	b2db      	uxtb	r3, r3
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d006      	beq.n	3b1e <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    3b10:	687b      	ldr	r3, [r7, #4]
    3b12:	22ac      	movs	r2, #172	; 0xac
    3b14:	589b      	ldr	r3, [r3, r2]
    3b16:	687a      	ldr	r2, [r7, #4]
    3b18:	21b4      	movs	r1, #180	; 0xb4
    3b1a:	5852      	ldr	r2, [r2, r1]
    3b1c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  if (sercom->isDataRegisterEmptyUART()) {
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	691b      	ldr	r3, [r3, #16]
    3b22:	0018      	movs	r0, r3
    3b24:	f00a f829 	bl	db7a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3b28:	1e03      	subs	r3, r0, #0
    3b2a:	d022      	beq.n	3b72 <_ZN4Uart10IrqHandlerEv+0xba>
    if (txBuffer.available()) {
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	335c      	adds	r3, #92	; 0x5c
    3b30:	0018      	movs	r0, r3
    3b32:	f000 f96d 	bl	3e10 <_ZN11RingBufferNILi64EE9availableEv>
    3b36:	0003      	movs	r3, r0
    3b38:	1e5a      	subs	r2, r3, #1
    3b3a:	4193      	sbcs	r3, r2
    3b3c:	b2db      	uxtb	r3, r3
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d012      	beq.n	3b68 <_ZN4Uart10IrqHandlerEv+0xb0>
      uint8_t data = txBuffer.read_char();
    3b42:	687b      	ldr	r3, [r7, #4]
    3b44:	335c      	adds	r3, #92	; 0x5c
    3b46:	0018      	movs	r0, r3
    3b48:	f000 f9bf 	bl	3eca <_ZN11RingBufferNILi64EE9read_charEv>
    3b4c:	0002      	movs	r2, r0
    3b4e:	230f      	movs	r3, #15
    3b50:	18fb      	adds	r3, r7, r3
    3b52:	701a      	strb	r2, [r3, #0]

      sercom->writeDataUART(data);
    3b54:	687b      	ldr	r3, [r7, #4]
    3b56:	691a      	ldr	r2, [r3, #16]
    3b58:	230f      	movs	r3, #15
    3b5a:	18fb      	adds	r3, r7, r3
    3b5c:	781b      	ldrb	r3, [r3, #0]
    3b5e:	0019      	movs	r1, r3
    3b60:	0010      	movs	r0, r2
    3b62:	f00a f827 	bl	dbb4 <_ZN6SERCOM13writeDataUARTEh>
    3b66:	e004      	b.n	3b72 <_ZN4Uart10IrqHandlerEv+0xba>
    } else {
      sercom->disableDataRegisterEmptyInterruptUART();
    3b68:	687b      	ldr	r3, [r7, #4]
    3b6a:	691b      	ldr	r3, [r3, #16]
    3b6c:	0018      	movs	r0, r3
    3b6e:	f00a f84b 	bl	dc08 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    }
  }

  if (sercom->isUARTError()) {
    3b72:	687b      	ldr	r3, [r7, #4]
    3b74:	691b      	ldr	r3, [r3, #16]
    3b76:	0018      	movs	r0, r3
    3b78:	f009 ffe2 	bl	db40 <_ZN6SERCOM11isUARTErrorEv>
    3b7c:	1e03      	subs	r3, r0, #0
    3b7e:	d009      	beq.n	3b94 <_ZN4Uart10IrqHandlerEv+0xdc>
    sercom->acknowledgeUARTError();
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	691b      	ldr	r3, [r3, #16]
    3b84:	0018      	movs	r0, r3
    3b86:	f009 ffe9 	bl	db5c <_ZN6SERCOM20acknowledgeUARTErrorEv>
    // TODO: if (sercom->isBufferOverflowErrorUART()) ....
    // TODO: if (sercom->isFrameErrorUART()) ....
    // TODO: if (sercom->isParityErrorUART()) ....
    sercom->clearStatusUART();
    3b8a:	687b      	ldr	r3, [r7, #4]
    3b8c:	691b      	ldr	r3, [r3, #16]
    3b8e:	0018      	movs	r0, r3
    3b90:	f009 ffbc 	bl	db0c <_ZN6SERCOM15clearStatusUARTEv>
  }
}
    3b94:	46c0      	nop			; (mov r8, r8)
    3b96:	46bd      	mov	sp, r7
    3b98:	b005      	add	sp, #20
    3b9a:	bd90      	pop	{r4, r7, pc}

00003b9c <_ZN4Uart9availableEv>:

int Uart::available()
{
    3b9c:	b580      	push	{r7, lr}
    3b9e:	b082      	sub	sp, #8
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	6078      	str	r0, [r7, #4]
  return rxBuffer.available();
    3ba4:	687b      	ldr	r3, [r7, #4]
    3ba6:	3314      	adds	r3, #20
    3ba8:	0018      	movs	r0, r3
    3baa:	f000 f931 	bl	3e10 <_ZN11RingBufferNILi64EE9availableEv>
    3bae:	0003      	movs	r3, r0
}
    3bb0:	0018      	movs	r0, r3
    3bb2:	46bd      	mov	sp, r7
    3bb4:	b002      	add	sp, #8
    3bb6:	bd80      	pop	{r7, pc}

00003bb8 <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b082      	sub	sp, #8
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
  return txBuffer.availableForStore();
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	335c      	adds	r3, #92	; 0x5c
    3bc4:	0018      	movs	r0, r3
    3bc6:	f000 f95e 	bl	3e86 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3bca:	0003      	movs	r3, r0
}
    3bcc:	0018      	movs	r0, r3
    3bce:	46bd      	mov	sp, r7
    3bd0:	b002      	add	sp, #8
    3bd2:	bd80      	pop	{r7, pc}

00003bd4 <_ZN4Uart4peekEv>:

int Uart::peek()
{
    3bd4:	b580      	push	{r7, lr}
    3bd6:	b082      	sub	sp, #8
    3bd8:	af00      	add	r7, sp, #0
    3bda:	6078      	str	r0, [r7, #4]
  return rxBuffer.peek();
    3bdc:	687b      	ldr	r3, [r7, #4]
    3bde:	3314      	adds	r3, #20
    3be0:	0018      	movs	r0, r3
    3be2:	f000 f99b 	bl	3f1c <_ZN11RingBufferNILi64EE4peekEv>
    3be6:	0003      	movs	r3, r0
}
    3be8:	0018      	movs	r0, r3
    3bea:	46bd      	mov	sp, r7
    3bec:	b002      	add	sp, #8
    3bee:	bd80      	pop	{r7, pc}

00003bf0 <_ZN4Uart4readEv>:

int Uart::read()
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	b084      	sub	sp, #16
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	6078      	str	r0, [r7, #4]
  int c = rxBuffer.read_char();
    3bf8:	687b      	ldr	r3, [r7, #4]
    3bfa:	3314      	adds	r3, #20
    3bfc:	0018      	movs	r0, r3
    3bfe:	f000 f964 	bl	3eca <_ZN11RingBufferNILi64EE9read_charEv>
    3c02:	0003      	movs	r3, r0
    3c04:	60fb      	str	r3, [r7, #12]

  if (uc_pinRTS != NO_RTS_PIN) {
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	22a8      	movs	r2, #168	; 0xa8
    3c0a:	5c9b      	ldrb	r3, [r3, r2]
    3c0c:	2bff      	cmp	r3, #255	; 0xff
    3c0e:	d014      	beq.n	3c3a <_ZN4Uart4readEv+0x4a>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	3314      	adds	r3, #20
    3c14:	0018      	movs	r0, r3
    3c16:	f000 f936 	bl	3e86 <_ZN11RingBufferNILi64EE17availableForStoreEv>
    3c1a:	0003      	movs	r3, r0
    3c1c:	2201      	movs	r2, #1
    3c1e:	2b0a      	cmp	r3, #10
    3c20:	dc01      	bgt.n	3c26 <_ZN4Uart4readEv+0x36>
    3c22:	2300      	movs	r3, #0
    3c24:	1c1a      	adds	r2, r3, #0
    3c26:	b2d3      	uxtb	r3, r2
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d006      	beq.n	3c3a <_ZN4Uart4readEv+0x4a>
      *pul_outclrRTS = ul_pinMaskRTS;
    3c2c:	687b      	ldr	r3, [r7, #4]
    3c2e:	22b0      	movs	r2, #176	; 0xb0
    3c30:	589b      	ldr	r3, [r3, r2]
    3c32:	687a      	ldr	r2, [r7, #4]
    3c34:	21b4      	movs	r1, #180	; 0xb4
    3c36:	5852      	ldr	r2, [r2, r1]
    3c38:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
    3c3a:	68fb      	ldr	r3, [r7, #12]
}
    3c3c:	0018      	movs	r0, r3
    3c3e:	46bd      	mov	sp, r7
    3c40:	b004      	add	sp, #16
    3c42:	bd80      	pop	{r7, pc}

00003c44 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    3c44:	b580      	push	{r7, lr}
    3c46:	b086      	sub	sp, #24
    3c48:	af00      	add	r7, sp, #0
    3c4a:	6078      	str	r0, [r7, #4]
    3c4c:	000a      	movs	r2, r1
    3c4e:	1cfb      	adds	r3, r7, #3
    3c50:	701a      	strb	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    3c52:	687b      	ldr	r3, [r7, #4]
    3c54:	691b      	ldr	r3, [r3, #16]
    3c56:	0018      	movs	r0, r3
    3c58:	f009 ff8f 	bl	db7a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3c5c:	1e03      	subs	r3, r0, #0
    3c5e:	d008      	beq.n	3c72 <_ZN4Uart5writeEh+0x2e>
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	335c      	adds	r3, #92	; 0x5c
    3c64:	0018      	movs	r0, r3
    3c66:	f000 f8d3 	bl	3e10 <_ZN11RingBufferNILi64EE9availableEv>
    3c6a:	1e03      	subs	r3, r0, #0
    3c6c:	d101      	bne.n	3c72 <_ZN4Uart5writeEh+0x2e>
    3c6e:	2301      	movs	r3, #1
    3c70:	e000      	b.n	3c74 <_ZN4Uart5writeEh+0x30>
    3c72:	2300      	movs	r3, #0
    3c74:	2b00      	cmp	r3, #0
    3c76:	d008      	beq.n	3c8a <_ZN4Uart5writeEh+0x46>
    sercom->writeDataUART(data);
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	691a      	ldr	r2, [r3, #16]
    3c7c:	1cfb      	adds	r3, r7, #3
    3c7e:	781b      	ldrb	r3, [r3, #0]
    3c80:	0019      	movs	r1, r3
    3c82:	0010      	movs	r0, r2
    3c84:	f009 ff96 	bl	dbb4 <_ZN6SERCOM13writeDataUARTEh>
    3c88:	e04b      	b.n	3d22 <_ZN4Uart5writeEh+0xde>
  } else {
    // spin lock until a spot opens up in the buffer
    while(txBuffer.isFull()) {
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	335c      	adds	r3, #92	; 0x5c
    3c8e:	0018      	movs	r0, r3
    3c90:	f000 f95d 	bl	3f4e <_ZN11RingBufferNILi64EE6isFullEv>
    3c94:	1e03      	subs	r3, r0, #0
    3c96:	d036      	beq.n	3d06 <_ZN4Uart5writeEh+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c98:	f3ef 8310 	mrs	r3, PRIMASK
    3c9c:	60fb      	str	r3, [r7, #12]
  return(result);
    3c9e:	68fb      	ldr	r3, [r7, #12]
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);
    3ca0:	2201      	movs	r2, #1
    3ca2:	4013      	ands	r3, r2
    3ca4:	425a      	negs	r2, r3
    3ca6:	4153      	adcs	r3, r2
    3ca8:	b2da      	uxtb	r2, r3
    3caa:	2317      	movs	r3, #23
    3cac:	18fb      	adds	r3, r7, r3
    3cae:	701a      	strb	r2, [r3, #0]

      if (interruptsEnabled) {
    3cb0:	2317      	movs	r3, #23
    3cb2:	18fb      	adds	r3, r7, r3
    3cb4:	781b      	ldrb	r3, [r3, #0]
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d017      	beq.n	3cea <_ZN4Uart5writeEh+0xa6>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    3cba:	4b1c      	ldr	r3, [pc, #112]	; (3d2c <_ZN4Uart5writeEh+0xe8>)
    3cbc:	685b      	ldr	r3, [r3, #4]
    3cbe:	05db      	lsls	r3, r3, #23
    3cc0:	0ddb      	lsrs	r3, r3, #23
    3cc2:	613b      	str	r3, [r7, #16]

        if (exceptionNumber == 0 ||
    3cc4:	693b      	ldr	r3, [r7, #16]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d00a      	beq.n	3ce0 <_ZN4Uart5writeEh+0x9c>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    3cca:	693b      	ldr	r3, [r7, #16]
    3ccc:	b2db      	uxtb	r3, r3
    3cce:	3b10      	subs	r3, #16
    3cd0:	b2db      	uxtb	r3, r3
    3cd2:	b25b      	sxtb	r3, r3
    3cd4:	0018      	movs	r0, r3
    3cd6:	f7ff fd21 	bl	371c <__NVIC_GetPriority>
    3cda:	0003      	movs	r3, r0
        if (exceptionNumber == 0 ||
    3cdc:	2b03      	cmp	r3, #3
    3cde:	d901      	bls.n	3ce4 <_ZN4Uart5writeEh+0xa0>
    3ce0:	2301      	movs	r3, #1
    3ce2:	e000      	b.n	3ce6 <_ZN4Uart5writeEh+0xa2>
    3ce4:	2300      	movs	r3, #0
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	d10b      	bne.n	3d02 <_ZN4Uart5writeEh+0xbe>
        }
      }

      // interrupts are disabled or called from ISR with higher or equal priority than the SERCOM IRQ
      // manually call the UART IRQ handler when the data register is empty
      if (sercom->isDataRegisterEmptyUART()) {
    3cea:	687b      	ldr	r3, [r7, #4]
    3cec:	691b      	ldr	r3, [r3, #16]
    3cee:	0018      	movs	r0, r3
    3cf0:	f009 ff43 	bl	db7a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    3cf4:	1e03      	subs	r3, r0, #0
    3cf6:	d0c8      	beq.n	3c8a <_ZN4Uart5writeEh+0x46>
        IrqHandler();
    3cf8:	687b      	ldr	r3, [r7, #4]
    3cfa:	0018      	movs	r0, r3
    3cfc:	f7ff fedc 	bl	3ab8 <_ZN4Uart10IrqHandlerEv>
    3d00:	e7c3      	b.n	3c8a <_ZN4Uart5writeEh+0x46>
          continue;
    3d02:	46c0      	nop			; (mov r8, r8)
    while(txBuffer.isFull()) {
    3d04:	e7c1      	b.n	3c8a <_ZN4Uart5writeEh+0x46>
      }
    }

    txBuffer.store_char(data);
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	335c      	adds	r3, #92	; 0x5c
    3d0a:	001a      	movs	r2, r3
    3d0c:	1cfb      	adds	r3, r7, #3
    3d0e:	781b      	ldrb	r3, [r3, #0]
    3d10:	0019      	movs	r1, r3
    3d12:	0010      	movs	r0, r2
    3d14:	f000 f891 	bl	3e3a <_ZN11RingBufferNILi64EE10store_charEh>

    sercom->enableDataRegisterEmptyInterruptUART();
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	691b      	ldr	r3, [r3, #16]
    3d1c:	0018      	movs	r0, r3
    3d1e:	f009 ff67 	bl	dbf0 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
  }

  return 1;
    3d22:	2301      	movs	r3, #1
}
    3d24:	0018      	movs	r0, r3
    3d26:	46bd      	mov	sp, r7
    3d28:	b006      	add	sp, #24
    3d2a:	bd80      	pop	{r7, pc}
    3d2c:	e000ed00 	.word	0xe000ed00

00003d30 <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
    3d30:	b580      	push	{r7, lr}
    3d32:	b082      	sub	sp, #8
    3d34:	af00      	add	r7, sp, #0
    3d36:	6078      	str	r0, [r7, #4]
    3d38:	000a      	movs	r2, r1
    3d3a:	1cbb      	adds	r3, r7, #2
    3d3c:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_STOP_BIT_MASK)
    3d3e:	1cbb      	adds	r3, r7, #2
    3d40:	881b      	ldrh	r3, [r3, #0]
    3d42:	22f0      	movs	r2, #240	; 0xf0
    3d44:	4013      	ands	r3, r2
    3d46:	2b30      	cmp	r3, #48	; 0x30
    3d48:	d001      	beq.n	3d4e <_ZN4Uart16extractNbStopBitEt+0x1e>
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    3d4a:	2300      	movs	r3, #0
    3d4c:	e000      	b.n	3d50 <_ZN4Uart16extractNbStopBitEt+0x20>

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
    3d4e:	2301      	movs	r3, #1
  }
}
    3d50:	0018      	movs	r0, r3
    3d52:	46bd      	mov	sp, r7
    3d54:	b002      	add	sp, #8
    3d56:	bd80      	pop	{r7, pc}

00003d58 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
    3d58:	b580      	push	{r7, lr}
    3d5a:	b082      	sub	sp, #8
    3d5c:	af00      	add	r7, sp, #0
    3d5e:	6078      	str	r0, [r7, #4]
    3d60:	000a      	movs	r2, r1
    3d62:	1cbb      	adds	r3, r7, #2
    3d64:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_DATA_MASK)
    3d66:	1cbb      	adds	r3, r7, #2
    3d68:	881a      	ldrh	r2, [r3, #0]
    3d6a:	23f0      	movs	r3, #240	; 0xf0
    3d6c:	011b      	lsls	r3, r3, #4
    3d6e:	4013      	ands	r3, r2
    3d70:	2280      	movs	r2, #128	; 0x80
    3d72:	0092      	lsls	r2, r2, #2
    3d74:	4293      	cmp	r3, r2
    3d76:	d009      	beq.n	3d8c <_ZN4Uart15extractCharSizeEt+0x34>
    3d78:	22c0      	movs	r2, #192	; 0xc0
    3d7a:	0092      	lsls	r2, r2, #2
    3d7c:	4293      	cmp	r3, r2
    3d7e:	d007      	beq.n	3d90 <_ZN4Uart15extractCharSizeEt+0x38>
    3d80:	2280      	movs	r2, #128	; 0x80
    3d82:	0052      	lsls	r2, r2, #1
    3d84:	4293      	cmp	r3, r2
    3d86:	d105      	bne.n	3d94 <_ZN4Uart15extractCharSizeEt+0x3c>
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;
    3d88:	2305      	movs	r3, #5
    3d8a:	e004      	b.n	3d96 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    3d8c:	2306      	movs	r3, #6
    3d8e:	e002      	b.n	3d96 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    3d90:	2307      	movs	r3, #7
    3d92:	e000      	b.n	3d96 <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    3d94:	2300      	movs	r3, #0

  }
}
    3d96:	0018      	movs	r0, r3
    3d98:	46bd      	mov	sp, r7
    3d9a:	b002      	add	sp, #8
    3d9c:	bd80      	pop	{r7, pc}

00003d9e <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
    3d9e:	b580      	push	{r7, lr}
    3da0:	b082      	sub	sp, #8
    3da2:	af00      	add	r7, sp, #0
    3da4:	6078      	str	r0, [r7, #4]
    3da6:	000a      	movs	r2, r1
    3da8:	1cbb      	adds	r3, r7, #2
    3daa:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_PARITY_MASK)
    3dac:	1cbb      	adds	r3, r7, #2
    3dae:	881b      	ldrh	r3, [r3, #0]
    3db0:	220f      	movs	r2, #15
    3db2:	4013      	ands	r3, r2
    3db4:	2b01      	cmp	r3, #1
    3db6:	d003      	beq.n	3dc0 <_ZN4Uart13extractParityEt+0x22>
    3db8:	2b02      	cmp	r3, #2
    3dba:	d003      	beq.n	3dc4 <_ZN4Uart13extractParityEt+0x26>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    3dbc:	2302      	movs	r3, #2
    3dbe:	e002      	b.n	3dc6 <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    3dc0:	2300      	movs	r3, #0
    3dc2:	e000      	b.n	3dc6 <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
    3dc4:	2301      	movs	r3, #1
  }
}
    3dc6:	0018      	movs	r0, r3
    3dc8:	46bd      	mov	sp, r7
    3dca:	b002      	add	sp, #8
    3dcc:	bd80      	pop	{r7, pc}

00003dce <_ZN11RingBufferNILi64EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;


template <int N>
RingBufferN<N>::RingBufferN( void )
    3dce:	b580      	push	{r7, lr}
    3dd0:	b082      	sub	sp, #8
    3dd2:	af00      	add	r7, sp, #0
    3dd4:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
    3dd6:	687b      	ldr	r3, [r7, #4]
    3dd8:	2240      	movs	r2, #64	; 0x40
    3dda:	2100      	movs	r1, #0
    3ddc:	0018      	movs	r0, r3
    3dde:	f00c fd5b 	bl	10898 <memset>
    clear();
    3de2:	687b      	ldr	r3, [r7, #4]
    3de4:	0018      	movs	r0, r3
    3de6:	f000 f805 	bl	3df4 <_ZN11RingBufferNILi64EE5clearEv>
}
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	0018      	movs	r0, r3
    3dee:	46bd      	mov	sp, r7
    3df0:	b002      	add	sp, #8
    3df2:	bd80      	pop	{r7, pc}

00003df4 <_ZN11RingBufferNILi64EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
    3df4:	b580      	push	{r7, lr}
    3df6:	b082      	sub	sp, #8
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	2200      	movs	r2, #0
    3e00:	641a      	str	r2, [r3, #64]	; 0x40
  _iTail = 0;
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	2200      	movs	r2, #0
    3e06:	645a      	str	r2, [r3, #68]	; 0x44
}
    3e08:	46c0      	nop			; (mov r8, r8)
    3e0a:	46bd      	mov	sp, r7
    3e0c:	b002      	add	sp, #8
    3e0e:	bd80      	pop	{r7, pc}

00003e10 <_ZN11RingBufferNILi64EE9availableEv>:

  return value;
}

template <int N>
int RingBufferN<N>::available()
    3e10:	b580      	push	{r7, lr}
    3e12:	b084      	sub	sp, #16
    3e14:	af00      	add	r7, sp, #0
    3e16:	6078      	str	r0, [r7, #4]
{
  int delta = _iHead - _iTail;
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3e1c:	687b      	ldr	r3, [r7, #4]
    3e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e20:	1ad3      	subs	r3, r2, r3
    3e22:	60fb      	str	r3, [r7, #12]

  if(delta < 0)
    3e24:	68fb      	ldr	r3, [r7, #12]
    3e26:	2b00      	cmp	r3, #0
    3e28:	da02      	bge.n	3e30 <_ZN11RingBufferNILi64EE9availableEv+0x20>
    return N + delta;
    3e2a:	68fb      	ldr	r3, [r7, #12]
    3e2c:	3340      	adds	r3, #64	; 0x40
    3e2e:	e000      	b.n	3e32 <_ZN11RingBufferNILi64EE9availableEv+0x22>
  else
    return delta;
    3e30:	68fb      	ldr	r3, [r7, #12]
}
    3e32:	0018      	movs	r0, r3
    3e34:	46bd      	mov	sp, r7
    3e36:	b004      	add	sp, #16
    3e38:	bd80      	pop	{r7, pc}

00003e3a <_ZN11RingBufferNILi64EE10store_charEh>:
void RingBufferN<N>::store_char( uint8_t c )
    3e3a:	b580      	push	{r7, lr}
    3e3c:	b084      	sub	sp, #16
    3e3e:	af00      	add	r7, sp, #0
    3e40:	6078      	str	r0, [r7, #4]
    3e42:	000a      	movs	r2, r1
    3e44:	1cfb      	adds	r3, r7, #3
    3e46:	701a      	strb	r2, [r3, #0]
  int i = nextIndex(_iHead);
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3e4c:	687b      	ldr	r3, [r7, #4]
    3e4e:	0011      	movs	r1, r2
    3e50:	0018      	movs	r0, r3
    3e52:	f000 f892 	bl	3f7a <_ZN11RingBufferNILi64EE9nextIndexEi>
    3e56:	0003      	movs	r3, r0
    3e58:	60fb      	str	r3, [r7, #12]
  if ( i != _iTail )
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3e5e:	68fb      	ldr	r3, [r7, #12]
    3e60:	1ad3      	subs	r3, r2, r3
    3e62:	1e5a      	subs	r2, r3, #1
    3e64:	4193      	sbcs	r3, r2
    3e66:	b2db      	uxtb	r3, r3
    3e68:	2b00      	cmp	r3, #0
    3e6a:	d008      	beq.n	3e7e <_ZN11RingBufferNILi64EE10store_charEh+0x44>
    _aucBuffer[_iHead] = c ;
    3e6c:	687b      	ldr	r3, [r7, #4]
    3e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e70:	687a      	ldr	r2, [r7, #4]
    3e72:	1cf9      	adds	r1, r7, #3
    3e74:	7809      	ldrb	r1, [r1, #0]
    3e76:	54d1      	strb	r1, [r2, r3]
    _iHead = i ;
    3e78:	687b      	ldr	r3, [r7, #4]
    3e7a:	68fa      	ldr	r2, [r7, #12]
    3e7c:	641a      	str	r2, [r3, #64]	; 0x40
}
    3e7e:	46c0      	nop			; (mov r8, r8)
    3e80:	46bd      	mov	sp, r7
    3e82:	b004      	add	sp, #16
    3e84:	bd80      	pop	{r7, pc}

00003e86 <_ZN11RingBufferNILi64EE17availableForStoreEv>:

template <int N>
int RingBufferN<N>::availableForStore()
    3e86:	b580      	push	{r7, lr}
    3e88:	b082      	sub	sp, #8
    3e8a:	af00      	add	r7, sp, #0
    3e8c:	6078      	str	r0, [r7, #4]
{
  if (_iHead >= _iTail)
    3e8e:	687b      	ldr	r3, [r7, #4]
    3e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3e92:	687b      	ldr	r3, [r7, #4]
    3e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3e96:	17d0      	asrs	r0, r2, #31
    3e98:	0fd9      	lsrs	r1, r3, #31
    3e9a:	429a      	cmp	r2, r3
    3e9c:	4148      	adcs	r0, r1
    3e9e:	0003      	movs	r3, r0
    3ea0:	b2db      	uxtb	r3, r3
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d007      	beq.n	3eb6 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x30>
    return N - 1 - _iHead + _iTail;
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3eaa:	223f      	movs	r2, #63	; 0x3f
    3eac:	1ad2      	subs	r2, r2, r3
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3eb2:	18d3      	adds	r3, r2, r3
    3eb4:	e005      	b.n	3ec2 <_ZN11RingBufferNILi64EE17availableForStoreEv+0x3c>
  else
    return _iTail - _iHead - 1;
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3ebe:	1ad3      	subs	r3, r2, r3
    3ec0:	3b01      	subs	r3, #1
}
    3ec2:	0018      	movs	r0, r3
    3ec4:	46bd      	mov	sp, r7
    3ec6:	b002      	add	sp, #8
    3ec8:	bd80      	pop	{r7, pc}

00003eca <_ZN11RingBufferNILi64EE9read_charEv>:
int RingBufferN<N>::read_char()
    3eca:	b580      	push	{r7, lr}
    3ecc:	b084      	sub	sp, #16
    3ece:	af00      	add	r7, sp, #0
    3ed0:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3ed6:	687b      	ldr	r3, [r7, #4]
    3ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3eda:	1ad3      	subs	r3, r2, r3
    3edc:	425a      	negs	r2, r3
    3ede:	4153      	adcs	r3, r2
    3ee0:	b2db      	uxtb	r3, r3
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d002      	beq.n	3eec <_ZN11RingBufferNILi64EE9read_charEv+0x22>
    return -1;
    3ee6:	2301      	movs	r3, #1
    3ee8:	425b      	negs	r3, r3
    3eea:	e013      	b.n	3f14 <_ZN11RingBufferNILi64EE9read_charEv+0x4a>
  uint8_t value = _aucBuffer[_iTail];
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3ef0:	230f      	movs	r3, #15
    3ef2:	18fb      	adds	r3, r7, r3
    3ef4:	6879      	ldr	r1, [r7, #4]
    3ef6:	5c8a      	ldrb	r2, [r1, r2]
    3ef8:	701a      	strb	r2, [r3, #0]
  _iTail = nextIndex(_iTail);
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	0011      	movs	r1, r2
    3f02:	0018      	movs	r0, r3
    3f04:	f000 f839 	bl	3f7a <_ZN11RingBufferNILi64EE9nextIndexEi>
    3f08:	0002      	movs	r2, r0
    3f0a:	687b      	ldr	r3, [r7, #4]
    3f0c:	645a      	str	r2, [r3, #68]	; 0x44
  return value;
    3f0e:	230f      	movs	r3, #15
    3f10:	18fb      	adds	r3, r7, r3
    3f12:	781b      	ldrb	r3, [r3, #0]
}
    3f14:	0018      	movs	r0, r3
    3f16:	46bd      	mov	sp, r7
    3f18:	b004      	add	sp, #16
    3f1a:	bd80      	pop	{r7, pc}

00003f1c <_ZN11RingBufferNILi64EE4peekEv>:

template <int N>
int RingBufferN<N>::peek()
    3f1c:	b580      	push	{r7, lr}
    3f1e:	b082      	sub	sp, #8
    3f20:	af00      	add	r7, sp, #0
    3f22:	6078      	str	r0, [r7, #4]
{
  if(_iTail == _iHead)
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3f28:	687b      	ldr	r3, [r7, #4]
    3f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3f2c:	1ad3      	subs	r3, r2, r3
    3f2e:	425a      	negs	r2, r3
    3f30:	4153      	adcs	r3, r2
    3f32:	b2db      	uxtb	r3, r3
    3f34:	2b00      	cmp	r3, #0
    3f36:	d002      	beq.n	3f3e <_ZN11RingBufferNILi64EE4peekEv+0x22>
    return -1;
    3f38:	2301      	movs	r3, #1
    3f3a:	425b      	negs	r3, r3
    3f3c:	e003      	b.n	3f46 <_ZN11RingBufferNILi64EE4peekEv+0x2a>

  return _aucBuffer[_iTail];
    3f3e:	687b      	ldr	r3, [r7, #4]
    3f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f42:	687a      	ldr	r2, [r7, #4]
    3f44:	5cd3      	ldrb	r3, [r2, r3]
}
    3f46:	0018      	movs	r0, r3
    3f48:	46bd      	mov	sp, r7
    3f4a:	b002      	add	sp, #8
    3f4c:	bd80      	pop	{r7, pc}

00003f4e <_ZN11RingBufferNILi64EE6isFullEv>:
{
  return (uint32_t)(index + 1) % N;
}

template <int N>
bool RingBufferN<N>::isFull()
    3f4e:	b580      	push	{r7, lr}
    3f50:	b082      	sub	sp, #8
    3f52:	af00      	add	r7, sp, #0
    3f54:	6078      	str	r0, [r7, #4]
{
  return (nextIndex(_iHead) == _iTail);
    3f56:	687b      	ldr	r3, [r7, #4]
    3f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3f5a:	687b      	ldr	r3, [r7, #4]
    3f5c:	0011      	movs	r1, r2
    3f5e:	0018      	movs	r0, r3
    3f60:	f000 f80b 	bl	3f7a <_ZN11RingBufferNILi64EE9nextIndexEi>
    3f64:	0002      	movs	r2, r0
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f6a:	1ad3      	subs	r3, r2, r3
    3f6c:	425a      	negs	r2, r3
    3f6e:	4153      	adcs	r3, r2
    3f70:	b2db      	uxtb	r3, r3
}
    3f72:	0018      	movs	r0, r3
    3f74:	46bd      	mov	sp, r7
    3f76:	b002      	add	sp, #8
    3f78:	bd80      	pop	{r7, pc}

00003f7a <_ZN11RingBufferNILi64EE9nextIndexEi>:
int RingBufferN<N>::nextIndex(int index)
    3f7a:	b580      	push	{r7, lr}
    3f7c:	b082      	sub	sp, #8
    3f7e:	af00      	add	r7, sp, #0
    3f80:	6078      	str	r0, [r7, #4]
    3f82:	6039      	str	r1, [r7, #0]
  return (uint32_t)(index + 1) % N;
    3f84:	683b      	ldr	r3, [r7, #0]
    3f86:	3301      	adds	r3, #1
    3f88:	223f      	movs	r2, #63	; 0x3f
    3f8a:	4013      	ands	r3, r2
}
    3f8c:	0018      	movs	r0, r3
    3f8e:	46bd      	mov	sp, r7
    3f90:	b002      	add	sp, #8
    3f92:	bd80      	pop	{r7, pc}

00003f94 <_ZN4UartD1Ev>:
class Uart : public HardwareSerial
    3f94:	b580      	push	{r7, lr}
    3f96:	b082      	sub	sp, #8
    3f98:	af00      	add	r7, sp, #0
    3f9a:	6078      	str	r0, [r7, #4]
    3f9c:	4a05      	ldr	r2, [pc, #20]	; (3fb4 <_ZN4UartD1Ev+0x20>)
    3f9e:	687b      	ldr	r3, [r7, #4]
    3fa0:	601a      	str	r2, [r3, #0]
    3fa2:	687b      	ldr	r3, [r7, #4]
    3fa4:	0018      	movs	r0, r3
    3fa6:	f7ff fb7d 	bl	36a4 <_ZN14HardwareSerialD1Ev>
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	0018      	movs	r0, r3
    3fae:	46bd      	mov	sp, r7
    3fb0:	b002      	add	sp, #8
    3fb2:	bd80      	pop	{r7, pc}
    3fb4:	00013430 	.word	0x00013430

00003fb8 <_ZN4UartD0Ev>:
    3fb8:	b580      	push	{r7, lr}
    3fba:	b082      	sub	sp, #8
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	6078      	str	r0, [r7, #4]
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	0018      	movs	r0, r3
    3fc4:	f7ff ffe6 	bl	3f94 <_ZN4UartD1Ev>
    3fc8:	687b      	ldr	r3, [r7, #4]
    3fca:	0018      	movs	r0, r3
    3fcc:	f009 fbbf 	bl	d74e <_ZdlPv>
    3fd0:	687b      	ldr	r3, [r7, #4]
    3fd2:	0018      	movs	r0, r3
    3fd4:	46bd      	mov	sp, r7
    3fd6:	b002      	add	sp, #8
    3fd8:	bd80      	pop	{r7, pc}
	...

00003fdc <__NVIC_EnableIRQ>:
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b082      	sub	sp, #8
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	0002      	movs	r2, r0
    3fe4:	1dfb      	adds	r3, r7, #7
    3fe6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3fe8:	1dfb      	adds	r3, r7, #7
    3fea:	781b      	ldrb	r3, [r3, #0]
    3fec:	2b7f      	cmp	r3, #127	; 0x7f
    3fee:	d809      	bhi.n	4004 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ff0:	4b06      	ldr	r3, [pc, #24]	; (400c <__NVIC_EnableIRQ+0x30>)
    3ff2:	1dfa      	adds	r2, r7, #7
    3ff4:	7812      	ldrb	r2, [r2, #0]
    3ff6:	b252      	sxtb	r2, r2
    3ff8:	211f      	movs	r1, #31
    3ffa:	400a      	ands	r2, r1
    3ffc:	2101      	movs	r1, #1
    3ffe:	4091      	lsls	r1, r2
    4000:	000a      	movs	r2, r1
    4002:	601a      	str	r2, [r3, #0]
}
    4004:	46c0      	nop			; (mov r8, r8)
    4006:	46bd      	mov	sp, r7
    4008:	b002      	add	sp, #8
    400a:	bd80      	pop	{r7, pc}
    400c:	e000e100 	.word	0xe000e100

00004010 <__NVIC_SetPriority>:
{
    4010:	b5b0      	push	{r4, r5, r7, lr}
    4012:	b082      	sub	sp, #8
    4014:	af00      	add	r7, sp, #0
    4016:	0002      	movs	r2, r0
    4018:	6039      	str	r1, [r7, #0]
    401a:	1dfb      	adds	r3, r7, #7
    401c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    401e:	1dfb      	adds	r3, r7, #7
    4020:	781b      	ldrb	r3, [r3, #0]
    4022:	2b7f      	cmp	r3, #127	; 0x7f
    4024:	d828      	bhi.n	4078 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4026:	4c2f      	ldr	r4, [pc, #188]	; (40e4 <__NVIC_SetPriority+0xd4>)
    4028:	1dfb      	adds	r3, r7, #7
    402a:	781b      	ldrb	r3, [r3, #0]
    402c:	b25b      	sxtb	r3, r3
    402e:	089b      	lsrs	r3, r3, #2
    4030:	492c      	ldr	r1, [pc, #176]	; (40e4 <__NVIC_SetPriority+0xd4>)
    4032:	1dfa      	adds	r2, r7, #7
    4034:	7812      	ldrb	r2, [r2, #0]
    4036:	b252      	sxtb	r2, r2
    4038:	0892      	lsrs	r2, r2, #2
    403a:	32c0      	adds	r2, #192	; 0xc0
    403c:	0092      	lsls	r2, r2, #2
    403e:	5852      	ldr	r2, [r2, r1]
    4040:	1df9      	adds	r1, r7, #7
    4042:	7809      	ldrb	r1, [r1, #0]
    4044:	b249      	sxtb	r1, r1
    4046:	2003      	movs	r0, #3
    4048:	4001      	ands	r1, r0
    404a:	00c9      	lsls	r1, r1, #3
    404c:	20ff      	movs	r0, #255	; 0xff
    404e:	4088      	lsls	r0, r1
    4050:	0001      	movs	r1, r0
    4052:	43c9      	mvns	r1, r1
    4054:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    4056:	683a      	ldr	r2, [r7, #0]
    4058:	0192      	lsls	r2, r2, #6
    405a:	20ff      	movs	r0, #255	; 0xff
    405c:	4010      	ands	r0, r2
    405e:	1dfa      	adds	r2, r7, #7
    4060:	7812      	ldrb	r2, [r2, #0]
    4062:	b252      	sxtb	r2, r2
    4064:	2503      	movs	r5, #3
    4066:	402a      	ands	r2, r5
    4068:	00d2      	lsls	r2, r2, #3
    406a:	4090      	lsls	r0, r2
    406c:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    406e:	430a      	orrs	r2, r1
    4070:	33c0      	adds	r3, #192	; 0xc0
    4072:	009b      	lsls	r3, r3, #2
    4074:	511a      	str	r2, [r3, r4]
}
    4076:	e031      	b.n	40dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4078:	4c1b      	ldr	r4, [pc, #108]	; (40e8 <__NVIC_SetPriority+0xd8>)
    407a:	1dfb      	adds	r3, r7, #7
    407c:	781b      	ldrb	r3, [r3, #0]
    407e:	b25b      	sxtb	r3, r3
    4080:	220f      	movs	r2, #15
    4082:	4013      	ands	r3, r2
    4084:	3b08      	subs	r3, #8
    4086:	0899      	lsrs	r1, r3, #2
    4088:	4a17      	ldr	r2, [pc, #92]	; (40e8 <__NVIC_SetPriority+0xd8>)
    408a:	1dfb      	adds	r3, r7, #7
    408c:	781b      	ldrb	r3, [r3, #0]
    408e:	b25b      	sxtb	r3, r3
    4090:	200f      	movs	r0, #15
    4092:	4003      	ands	r3, r0
    4094:	3b08      	subs	r3, #8
    4096:	089b      	lsrs	r3, r3, #2
    4098:	3306      	adds	r3, #6
    409a:	009b      	lsls	r3, r3, #2
    409c:	18d3      	adds	r3, r2, r3
    409e:	3304      	adds	r3, #4
    40a0:	681b      	ldr	r3, [r3, #0]
    40a2:	1dfa      	adds	r2, r7, #7
    40a4:	7812      	ldrb	r2, [r2, #0]
    40a6:	b252      	sxtb	r2, r2
    40a8:	2003      	movs	r0, #3
    40aa:	4002      	ands	r2, r0
    40ac:	00d2      	lsls	r2, r2, #3
    40ae:	20ff      	movs	r0, #255	; 0xff
    40b0:	4090      	lsls	r0, r2
    40b2:	0002      	movs	r2, r0
    40b4:	43d2      	mvns	r2, r2
    40b6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    40b8:	683b      	ldr	r3, [r7, #0]
    40ba:	019b      	lsls	r3, r3, #6
    40bc:	20ff      	movs	r0, #255	; 0xff
    40be:	4018      	ands	r0, r3
    40c0:	1dfb      	adds	r3, r7, #7
    40c2:	781b      	ldrb	r3, [r3, #0]
    40c4:	b25b      	sxtb	r3, r3
    40c6:	2503      	movs	r5, #3
    40c8:	402b      	ands	r3, r5
    40ca:	00db      	lsls	r3, r3, #3
    40cc:	4098      	lsls	r0, r3
    40ce:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    40d0:	431a      	orrs	r2, r3
    40d2:	1d8b      	adds	r3, r1, #6
    40d4:	009b      	lsls	r3, r3, #2
    40d6:	18e3      	adds	r3, r4, r3
    40d8:	3304      	adds	r3, #4
    40da:	601a      	str	r2, [r3, #0]
}
    40dc:	46c0      	nop			; (mov r8, r8)
    40de:	46bd      	mov	sp, r7
    40e0:	b002      	add	sp, #8
    40e2:	bdb0      	pop	{r4, r5, r7, pc}
    40e4:	e000e100 	.word	0xe000e100
    40e8:	e000ed00 	.word	0xe000ed00

000040ec <_ZN14USBDeviceClassC1Ev>:
	uint16_t wLength;
} USBSetup;

class USBDeviceClass {
public:
	USBDeviceClass() {};
    40ec:	b580      	push	{r7, lr}
    40ee:	b082      	sub	sp, #8
    40f0:	af00      	add	r7, sp, #0
    40f2:	6078      	str	r0, [r7, #4]
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	0018      	movs	r0, r3
    40f8:	46bd      	mov	sp, r7
    40fa:	b002      	add	sp, #8
    40fc:	bd80      	pop	{r7, pc}

000040fe <_ZN17UsbDeviceDescBankC1Ev>:
  __IO USB_DEVICE_ADDR_Type      ADDR;        /**< \brief Offset: 0x000 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Adress of Data Buffer */
  __IO USB_DEVICE_PCKSIZE_Type   PCKSIZE;     /**< \brief Offset: 0x004 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Packet Size */
  __IO USB_DEVICE_EXTREG_Type    EXTREG;      /**< \brief Offset: 0x008 (R/W 16) DEVICE_DESC_BANK Endpoint Bank, Extended */
  __IO USB_DEVICE_STATUS_BK_Type STATUS_BK;   /**< \brief Offset: 0x00A (R/W  8) DEVICE_DESC_BANK Enpoint Bank, Status of Bank */
       RoReg8                    Reserved1[0x5];
} UsbDeviceDescBank;
    40fe:	b580      	push	{r7, lr}
    4100:	b082      	sub	sp, #8
    4102:	af00      	add	r7, sp, #0
    4104:	6078      	str	r0, [r7, #4]
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	0018      	movs	r0, r3
    410a:	46bd      	mov	sp, r7
    410c:	b002      	add	sp, #8
    410e:	bd80      	pop	{r7, pc}

00004110 <_ZN19UsbDeviceDescriptorC1Ev>:

/** \brief USB_DEVICE Descriptor SRAM registers */
#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
typedef struct { /* USB is Device */
       UsbDeviceDescBank         DeviceDescBank[2]; /**< \brief Offset: 0x000 UsbDeviceDescBank groups */
} UsbDeviceDescriptor;
    4110:	b5b0      	push	{r4, r5, r7, lr}
    4112:	b082      	sub	sp, #8
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	2401      	movs	r4, #1
    411c:	001d      	movs	r5, r3
    411e:	2c00      	cmp	r4, #0
    4120:	db05      	blt.n	412e <_ZN19UsbDeviceDescriptorC1Ev+0x1e>
    4122:	0028      	movs	r0, r5
    4124:	f7ff ffeb 	bl	40fe <_ZN17UsbDeviceDescBankC1Ev>
    4128:	3510      	adds	r5, #16
    412a:	3c01      	subs	r4, #1
    412c:	e7f7      	b.n	411e <_ZN19UsbDeviceDescriptorC1Ev+0xe>
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	0018      	movs	r0, r3
    4132:	46bd      	mov	sp, r7
    4134:	b002      	add	sp, #8
    4136:	bdb0      	pop	{r4, r5, r7, pc}

00004138 <_ZN20USBDevice_SAMD21G18xC1Ev>:

typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    4138:	b5b0      	push	{r4, r5, r7, lr}
    413a:	b082      	sub	sp, #8
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
    4140:	687b      	ldr	r3, [r7, #4]
    4142:	4a09      	ldr	r2, [pc, #36]	; (4168 <_ZN20USBDevice_SAMD21G18xC1Ev+0x30>)
    4144:	601a      	str	r2, [r3, #0]
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	3304      	adds	r3, #4
    414a:	2407      	movs	r4, #7
    414c:	001d      	movs	r5, r3
    414e:	2c00      	cmp	r4, #0
    4150:	db05      	blt.n	415e <_ZN20USBDevice_SAMD21G18xC1Ev+0x26>
    4152:	0028      	movs	r0, r5
    4154:	f7ff ffdc 	bl	4110 <_ZN19UsbDeviceDescriptorC1Ev>
    4158:	3520      	adds	r5, #32
    415a:	3c01      	subs	r4, #1
    415c:	e7f7      	b.n	414e <_ZN20USBDevice_SAMD21G18xC1Ev+0x16>
		// Empty
	}
    415e:	687b      	ldr	r3, [r7, #4]
    4160:	0018      	movs	r0, r3
    4162:	46bd      	mov	sp, r7
    4164:	b002      	add	sp, #8
    4166:	bdb0      	pop	{r4, r5, r7, pc}
    4168:	41005000 	.word	0x41005000

0000416c <_ZN20USBDevice_SAMD21G18x6enableEv>:

	// Reset USB Device
	void reset();

	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    416c:	b580      	push	{r7, lr}
    416e:	b082      	sub	sp, #8
    4170:	af00      	add	r7, sp, #0
    4172:	6078      	str	r0, [r7, #4]
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	681a      	ldr	r2, [r3, #0]
    4178:	7813      	ldrb	r3, [r2, #0]
    417a:	2102      	movs	r1, #2
    417c:	430b      	orrs	r3, r1
    417e:	7013      	strb	r3, [r2, #0]
    4180:	46c0      	nop			; (mov r8, r8)
    4182:	46bd      	mov	sp, r7
    4184:	b002      	add	sp, #8
    4186:	bd80      	pop	{r7, pc}

00004188 <_ZN20USBDevice_SAMD21G18x16setUSBDeviceModeEv>:
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    4188:	b580      	push	{r7, lr}
    418a:	b082      	sub	sp, #8
    418c:	af00      	add	r7, sp, #0
    418e:	6078      	str	r0, [r7, #4]
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	681a      	ldr	r2, [r3, #0]
    4194:	7813      	ldrb	r3, [r2, #0]
    4196:	217f      	movs	r1, #127	; 0x7f
    4198:	400b      	ands	r3, r1
    419a:	7013      	strb	r3, [r2, #0]
    419c:	46c0      	nop			; (mov r8, r8)
    419e:	46bd      	mov	sp, r7
    41a0:	b002      	add	sp, #8
    41a2:	bd80      	pop	{r7, pc}

000041a4 <_ZN20USBDevice_SAMD21G18x12runInStandbyEv>:
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    41a4:	b580      	push	{r7, lr}
    41a6:	b082      	sub	sp, #8
    41a8:	af00      	add	r7, sp, #0
    41aa:	6078      	str	r0, [r7, #4]
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	681a      	ldr	r2, [r3, #0]
    41b0:	7813      	ldrb	r3, [r2, #0]
    41b2:	2104      	movs	r1, #4
    41b4:	430b      	orrs	r3, r1
    41b6:	7013      	strb	r3, [r2, #0]
    41b8:	46c0      	nop			; (mov r8, r8)
    41ba:	46bd      	mov	sp, r7
    41bc:	b002      	add	sp, #8
    41be:	bd80      	pop	{r7, pc}

000041c0 <_ZN20USBDevice_SAMD21G18x12setFullSpeedEv>:
	inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }
	inline void wakeupHost()     { usb.CTRLB.bit.UPRSM = 1; }

	// USB speed
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    41c0:	b580      	push	{r7, lr}
    41c2:	b082      	sub	sp, #8
    41c4:	af00      	add	r7, sp, #0
    41c6:	6078      	str	r0, [r7, #4]
    41c8:	687b      	ldr	r3, [r7, #4]
    41ca:	681a      	ldr	r2, [r3, #0]
    41cc:	8913      	ldrh	r3, [r2, #8]
    41ce:	210c      	movs	r1, #12
    41d0:	438b      	bics	r3, r1
    41d2:	8113      	strh	r3, [r2, #8]
    41d4:	46c0      	nop			; (mov r8, r8)
    41d6:	46bd      	mov	sp, r7
    41d8:	b002      	add	sp, #8
    41da:	bd80      	pop	{r7, pc}

000041dc <_ZN20USBDevice_SAMD21G18x6attachEv>:
	inline void setLowSpeed()        { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;   }
	inline void setHiSpeed()         { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HS_Val;   }
	inline void setHiSpeedTestMode() { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HSTM_Val; }

	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    41dc:	b580      	push	{r7, lr}
    41de:	b082      	sub	sp, #8
    41e0:	af00      	add	r7, sp, #0
    41e2:	6078      	str	r0, [r7, #4]
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	681a      	ldr	r2, [r3, #0]
    41e8:	8913      	ldrh	r3, [r2, #8]
    41ea:	2101      	movs	r1, #1
    41ec:	438b      	bics	r3, r1
    41ee:	8113      	strh	r3, [r2, #8]
    41f0:	46c0      	nop			; (mov r8, r8)
    41f2:	46bd      	mov	sp, r7
    41f4:	b002      	add	sp, #8
    41f6:	bd80      	pop	{r7, pc}

000041f8 <_ZN20USBDevice_SAMD21G18x21isEndOfResetInterruptEv>:
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    41f8:	b580      	push	{r7, lr}
    41fa:	b082      	sub	sp, #8
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	681b      	ldr	r3, [r3, #0]
    4204:	8b9b      	ldrh	r3, [r3, #28]
    4206:	071b      	lsls	r3, r3, #28
    4208:	0fdb      	lsrs	r3, r3, #31
    420a:	b2db      	uxtb	r3, r3
    420c:	0018      	movs	r0, r3
    420e:	46bd      	mov	sp, r7
    4210:	b002      	add	sp, #8
    4212:	bd80      	pop	{r7, pc}

00004214 <_ZN20USBDevice_SAMD21G18x22ackEndOfResetInterruptEv>:
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    4214:	b580      	push	{r7, lr}
    4216:	b082      	sub	sp, #8
    4218:	af00      	add	r7, sp, #0
    421a:	6078      	str	r0, [r7, #4]
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	681b      	ldr	r3, [r3, #0]
    4220:	2208      	movs	r2, #8
    4222:	839a      	strh	r2, [r3, #28]
    4224:	46c0      	nop			; (mov r8, r8)
    4226:	46bd      	mov	sp, r7
    4228:	b002      	add	sp, #8
    422a:	bd80      	pop	{r7, pc}

0000422c <_ZN20USBDevice_SAMD21G18x25enableEndOfResetInterruptEv>:
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    422c:	b580      	push	{r7, lr}
    422e:	b082      	sub	sp, #8
    4230:	af00      	add	r7, sp, #0
    4232:	6078      	str	r0, [r7, #4]
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	681a      	ldr	r2, [r3, #0]
    4238:	8b13      	ldrh	r3, [r2, #24]
    423a:	2108      	movs	r1, #8
    423c:	430b      	orrs	r3, r1
    423e:	8313      	strh	r3, [r2, #24]
    4240:	46c0      	nop			; (mov r8, r8)
    4242:	46bd      	mov	sp, r7
    4244:	b002      	add	sp, #8
    4246:	bd80      	pop	{r7, pc}

00004248 <_ZN20USBDevice_SAMD21G18x23isStartOfFrameInterruptEv>:
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    4248:	b580      	push	{r7, lr}
    424a:	b082      	sub	sp, #8
    424c:	af00      	add	r7, sp, #0
    424e:	6078      	str	r0, [r7, #4]
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	681b      	ldr	r3, [r3, #0]
    4254:	8b9b      	ldrh	r3, [r3, #28]
    4256:	075b      	lsls	r3, r3, #29
    4258:	0fdb      	lsrs	r3, r3, #31
    425a:	b2db      	uxtb	r3, r3
    425c:	0018      	movs	r0, r3
    425e:	46bd      	mov	sp, r7
    4260:	b002      	add	sp, #8
    4262:	bd80      	pop	{r7, pc}

00004264 <_ZN20USBDevice_SAMD21G18x24ackStartOfFrameInterruptEv>:
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    4264:	b580      	push	{r7, lr}
    4266:	b082      	sub	sp, #8
    4268:	af00      	add	r7, sp, #0
    426a:	6078      	str	r0, [r7, #4]
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	681b      	ldr	r3, [r3, #0]
    4270:	2204      	movs	r2, #4
    4272:	839a      	strh	r2, [r3, #28]
    4274:	46c0      	nop			; (mov r8, r8)
    4276:	46bd      	mov	sp, r7
    4278:	b002      	add	sp, #8
    427a:	bd80      	pop	{r7, pc}

0000427c <_ZN20USBDevice_SAMD21G18x27enableStartOfFrameInterruptEv>:
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    427c:	b580      	push	{r7, lr}
    427e:	b082      	sub	sp, #8
    4280:	af00      	add	r7, sp, #0
    4282:	6078      	str	r0, [r7, #4]
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	681a      	ldr	r2, [r3, #0]
    4288:	8b13      	ldrh	r3, [r2, #24]
    428a:	2104      	movs	r1, #4
    428c:	430b      	orrs	r3, r1
    428e:	8313      	strh	r3, [r2, #24]
    4290:	46c0      	nop			; (mov r8, r8)
    4292:	46bd      	mov	sp, r7
    4294:	b002      	add	sp, #8
    4296:	bd80      	pop	{r7, pc}

00004298 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>:

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    4298:	b590      	push	{r4, r7, lr}
    429a:	b083      	sub	sp, #12
    429c:	af00      	add	r7, sp, #0
    429e:	6078      	str	r0, [r7, #4]
    42a0:	0008      	movs	r0, r1
    42a2:	0011      	movs	r1, r2
    42a4:	1cfb      	adds	r3, r7, #3
    42a6:	1c02      	adds	r2, r0, #0
    42a8:	701a      	strb	r2, [r3, #0]
    42aa:	1cbb      	adds	r3, r7, #2
    42ac:	1c0a      	adds	r2, r1, #0
    42ae:	701a      	strb	r2, [r3, #0]
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	681a      	ldr	r2, [r3, #0]
    42b4:	1cfb      	adds	r3, r7, #3
    42b6:	781b      	ldrb	r3, [r3, #0]
    42b8:	1cb9      	adds	r1, r7, #2
    42ba:	7809      	ldrb	r1, [r1, #0]
    42bc:	2007      	movs	r0, #7
    42be:	4001      	ands	r1, r0
    42c0:	b2c8      	uxtb	r0, r1
    42c2:	3308      	adds	r3, #8
    42c4:	0159      	lsls	r1, r3, #5
    42c6:	5c8b      	ldrb	r3, [r1, r2]
    42c8:	2407      	movs	r4, #7
    42ca:	4004      	ands	r4, r0
    42cc:	2007      	movs	r0, #7
    42ce:	4383      	bics	r3, r0
    42d0:	1c18      	adds	r0, r3, #0
    42d2:	1c23      	adds	r3, r4, #0
    42d4:	4303      	orrs	r3, r0
    42d6:	548b      	strb	r3, [r1, r2]
    42d8:	46c0      	nop			; (mov r8, r8)
    42da:	46bd      	mov	sp, r7
    42dc:	b003      	add	sp, #12
    42de:	bd90      	pop	{r4, r7, pc}

000042e0 <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>:
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    42e0:	b590      	push	{r4, r7, lr}
    42e2:	b083      	sub	sp, #12
    42e4:	af00      	add	r7, sp, #0
    42e6:	6078      	str	r0, [r7, #4]
    42e8:	0008      	movs	r0, r1
    42ea:	0011      	movs	r1, r2
    42ec:	1cfb      	adds	r3, r7, #3
    42ee:	1c02      	adds	r2, r0, #0
    42f0:	701a      	strb	r2, [r3, #0]
    42f2:	1cbb      	adds	r3, r7, #2
    42f4:	1c0a      	adds	r2, r1, #0
    42f6:	701a      	strb	r2, [r3, #0]
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	681a      	ldr	r2, [r3, #0]
    42fc:	1cfb      	adds	r3, r7, #3
    42fe:	781b      	ldrb	r3, [r3, #0]
    4300:	1cb9      	adds	r1, r7, #2
    4302:	7809      	ldrb	r1, [r1, #0]
    4304:	2007      	movs	r0, #7
    4306:	4001      	ands	r1, r0
    4308:	b2c8      	uxtb	r0, r1
    430a:	3308      	adds	r3, #8
    430c:	0159      	lsls	r1, r3, #5
    430e:	5c8b      	ldrb	r3, [r1, r2]
    4310:	2407      	movs	r4, #7
    4312:	4020      	ands	r0, r4
    4314:	0104      	lsls	r4, r0, #4
    4316:	2070      	movs	r0, #112	; 0x70
    4318:	4383      	bics	r3, r0
    431a:	1c18      	adds	r0, r3, #0
    431c:	1c23      	adds	r3, r4, #0
    431e:	4303      	orrs	r3, r0
    4320:	548b      	strb	r3, [r1, r2]
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	46bd      	mov	sp, r7
    4326:	b003      	add	sp, #12
    4328:	bd90      	pop	{r4, r7, pc}

0000432a <_ZN20USBDevice_SAMD21G18x18epInterruptSummaryEv>:

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    432a:	b580      	push	{r7, lr}
    432c:	b082      	sub	sp, #8
    432e:	af00      	add	r7, sp, #0
    4330:	6078      	str	r0, [r7, #4]
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	681b      	ldr	r3, [r3, #0]
    4336:	8c1b      	ldrh	r3, [r3, #32]
    4338:	b29b      	uxth	r3, r3
    433a:	0018      	movs	r0, r3
    433c:	46bd      	mov	sp, r7
    433e:	b002      	add	sp, #8
    4340:	bd80      	pop	{r7, pc}

00004342 <_ZN20USBDevice_SAMD21G18x22epBank0IsSetupReceivedEh>:

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    4342:	b580      	push	{r7, lr}
    4344:	b082      	sub	sp, #8
    4346:	af00      	add	r7, sp, #0
    4348:	6078      	str	r0, [r7, #4]
    434a:	000a      	movs	r2, r1
    434c:	1cfb      	adds	r3, r7, #3
    434e:	701a      	strb	r2, [r3, #0]
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	681a      	ldr	r2, [r3, #0]
    4354:	1cfb      	adds	r3, r7, #3
    4356:	781b      	ldrb	r3, [r3, #0]
    4358:	3308      	adds	r3, #8
    435a:	015b      	lsls	r3, r3, #5
    435c:	18d3      	adds	r3, r2, r3
    435e:	79db      	ldrb	r3, [r3, #7]
    4360:	06db      	lsls	r3, r3, #27
    4362:	0fdb      	lsrs	r3, r3, #31
    4364:	b2db      	uxtb	r3, r3
    4366:	0018      	movs	r0, r3
    4368:	46bd      	mov	sp, r7
    436a:	b002      	add	sp, #8
    436c:	bd80      	pop	{r7, pc}

0000436e <_ZN20USBDevice_SAMD21G18x16epBank1IsStalledEh>:
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    436e:	b580      	push	{r7, lr}
    4370:	b082      	sub	sp, #8
    4372:	af00      	add	r7, sp, #0
    4374:	6078      	str	r0, [r7, #4]
    4376:	000a      	movs	r2, r1
    4378:	1cfb      	adds	r3, r7, #3
    437a:	701a      	strb	r2, [r3, #0]
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	681a      	ldr	r2, [r3, #0]
    4380:	1cfb      	adds	r3, r7, #3
    4382:	781b      	ldrb	r3, [r3, #0]
    4384:	3308      	adds	r3, #8
    4386:	015b      	lsls	r3, r3, #5
    4388:	18d3      	adds	r3, r2, r3
    438a:	79db      	ldrb	r3, [r3, #7]
    438c:	065b      	lsls	r3, r3, #25
    438e:	0fdb      	lsrs	r3, r3, #31
    4390:	b2db      	uxtb	r3, r3
    4392:	0018      	movs	r0, r3
    4394:	46bd      	mov	sp, r7
    4396:	b002      	add	sp, #8
    4398:	bd80      	pop	{r7, pc}

0000439a <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>:
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    439a:	b580      	push	{r7, lr}
    439c:	b082      	sub	sp, #8
    439e:	af00      	add	r7, sp, #0
    43a0:	6078      	str	r0, [r7, #4]
    43a2:	000a      	movs	r2, r1
    43a4:	1cfb      	adds	r3, r7, #3
    43a6:	701a      	strb	r2, [r3, #0]
    43a8:	687b      	ldr	r3, [r7, #4]
    43aa:	681a      	ldr	r2, [r3, #0]
    43ac:	1cfb      	adds	r3, r7, #3
    43ae:	781b      	ldrb	r3, [r3, #0]
    43b0:	3308      	adds	r3, #8
    43b2:	015b      	lsls	r3, r3, #5
    43b4:	18d3      	adds	r3, r2, r3
    43b6:	79db      	ldrb	r3, [r3, #7]
    43b8:	07db      	lsls	r3, r3, #31
    43ba:	0fdb      	lsrs	r3, r3, #31
    43bc:	b2db      	uxtb	r3, r3
    43be:	0018      	movs	r0, r3
    43c0:	46bd      	mov	sp, r7
    43c2:	b002      	add	sp, #8
    43c4:	bd80      	pop	{r7, pc}

000043c6 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>:
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    43c6:	b580      	push	{r7, lr}
    43c8:	b082      	sub	sp, #8
    43ca:	af00      	add	r7, sp, #0
    43cc:	6078      	str	r0, [r7, #4]
    43ce:	000a      	movs	r2, r1
    43d0:	1cfb      	adds	r3, r7, #3
    43d2:	701a      	strb	r2, [r3, #0]
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	681a      	ldr	r2, [r3, #0]
    43d8:	1cfb      	adds	r3, r7, #3
    43da:	781b      	ldrb	r3, [r3, #0]
    43dc:	3308      	adds	r3, #8
    43de:	015b      	lsls	r3, r3, #5
    43e0:	18d3      	adds	r3, r2, r3
    43e2:	79db      	ldrb	r3, [r3, #7]
    43e4:	079b      	lsls	r3, r3, #30
    43e6:	0fdb      	lsrs	r3, r3, #31
    43e8:	b2db      	uxtb	r3, r3
    43ea:	0018      	movs	r0, r3
    43ec:	46bd      	mov	sp, r7
    43ee:	b002      	add	sp, #8
    43f0:	bd80      	pop	{r7, pc}

000043f2 <_ZN20USBDevice_SAMD21G18x23epBank0AckSetupReceivedEh>:

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    43f2:	b580      	push	{r7, lr}
    43f4:	b082      	sub	sp, #8
    43f6:	af00      	add	r7, sp, #0
    43f8:	6078      	str	r0, [r7, #4]
    43fa:	000a      	movs	r2, r1
    43fc:	1cfb      	adds	r3, r7, #3
    43fe:	701a      	strb	r2, [r3, #0]
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	681a      	ldr	r2, [r3, #0]
    4404:	1cfb      	adds	r3, r7, #3
    4406:	781b      	ldrb	r3, [r3, #0]
    4408:	3308      	adds	r3, #8
    440a:	015b      	lsls	r3, r3, #5
    440c:	18d3      	adds	r3, r2, r3
    440e:	3307      	adds	r3, #7
    4410:	2210      	movs	r2, #16
    4412:	701a      	strb	r2, [r3, #0]
    4414:	46c0      	nop			; (mov r8, r8)
    4416:	46bd      	mov	sp, r7
    4418:	b002      	add	sp, #8
    441a:	bd80      	pop	{r7, pc}

0000441c <_ZN20USBDevice_SAMD21G18x17epBank1AckStalledEh>:
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    441c:	b580      	push	{r7, lr}
    441e:	b082      	sub	sp, #8
    4420:	af00      	add	r7, sp, #0
    4422:	6078      	str	r0, [r7, #4]
    4424:	000a      	movs	r2, r1
    4426:	1cfb      	adds	r3, r7, #3
    4428:	701a      	strb	r2, [r3, #0]
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	681a      	ldr	r2, [r3, #0]
    442e:	1cfb      	adds	r3, r7, #3
    4430:	781b      	ldrb	r3, [r3, #0]
    4432:	3308      	adds	r3, #8
    4434:	015b      	lsls	r3, r3, #5
    4436:	18d3      	adds	r3, r2, r3
    4438:	3307      	adds	r3, #7
    443a:	2240      	movs	r2, #64	; 0x40
    443c:	701a      	strb	r2, [r3, #0]
    443e:	46c0      	nop			; (mov r8, r8)
    4440:	46bd      	mov	sp, r7
    4442:	b002      	add	sp, #8
    4444:	bd80      	pop	{r7, pc}

00004446 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>:
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    4446:	b580      	push	{r7, lr}
    4448:	b082      	sub	sp, #8
    444a:	af00      	add	r7, sp, #0
    444c:	6078      	str	r0, [r7, #4]
    444e:	000a      	movs	r2, r1
    4450:	1cfb      	adds	r3, r7, #3
    4452:	701a      	strb	r2, [r3, #0]
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	681a      	ldr	r2, [r3, #0]
    4458:	1cfb      	adds	r3, r7, #3
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	3308      	adds	r3, #8
    445e:	015b      	lsls	r3, r3, #5
    4460:	18d3      	adds	r3, r2, r3
    4462:	3307      	adds	r3, #7
    4464:	2201      	movs	r2, #1
    4466:	701a      	strb	r2, [r3, #0]
    4468:	46c0      	nop			; (mov r8, r8)
    446a:	46bd      	mov	sp, r7
    446c:	b002      	add	sp, #8
    446e:	bd80      	pop	{r7, pc}

00004470 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>:
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    4470:	b580      	push	{r7, lr}
    4472:	b082      	sub	sp, #8
    4474:	af00      	add	r7, sp, #0
    4476:	6078      	str	r0, [r7, #4]
    4478:	000a      	movs	r2, r1
    447a:	1cfb      	adds	r3, r7, #3
    447c:	701a      	strb	r2, [r3, #0]
    447e:	687b      	ldr	r3, [r7, #4]
    4480:	681a      	ldr	r2, [r3, #0]
    4482:	1cfb      	adds	r3, r7, #3
    4484:	781b      	ldrb	r3, [r3, #0]
    4486:	3308      	adds	r3, #8
    4488:	015b      	lsls	r3, r3, #5
    448a:	18d3      	adds	r3, r2, r3
    448c:	3307      	adds	r3, #7
    448e:	2202      	movs	r2, #2
    4490:	701a      	strb	r2, [r3, #0]
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	46bd      	mov	sp, r7
    4496:	b002      	add	sp, #8
    4498:	bd80      	pop	{r7, pc}

0000449a <_ZN20USBDevice_SAMD21G18x26epBank0EnableSetupReceivedEh>:

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    449a:	b580      	push	{r7, lr}
    449c:	b082      	sub	sp, #8
    449e:	af00      	add	r7, sp, #0
    44a0:	6078      	str	r0, [r7, #4]
    44a2:	000a      	movs	r2, r1
    44a4:	1cfb      	adds	r3, r7, #3
    44a6:	701a      	strb	r2, [r3, #0]
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	6819      	ldr	r1, [r3, #0]
    44ac:	1cfb      	adds	r3, r7, #3
    44ae:	781a      	ldrb	r2, [r3, #0]
    44b0:	2384      	movs	r3, #132	; 0x84
    44b2:	005b      	lsls	r3, r3, #1
    44b4:	0152      	lsls	r2, r2, #5
    44b6:	188a      	adds	r2, r1, r2
    44b8:	18d2      	adds	r2, r2, r3
    44ba:	7853      	ldrb	r3, [r2, #1]
    44bc:	2110      	movs	r1, #16
    44be:	430b      	orrs	r3, r1
    44c0:	7053      	strb	r3, [r2, #1]
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	46bd      	mov	sp, r7
    44c6:	b002      	add	sp, #8
    44c8:	bd80      	pop	{r7, pc}

000044ca <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>:
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    44ca:	b580      	push	{r7, lr}
    44cc:	b082      	sub	sp, #8
    44ce:	af00      	add	r7, sp, #0
    44d0:	6078      	str	r0, [r7, #4]
    44d2:	000a      	movs	r2, r1
    44d4:	1cfb      	adds	r3, r7, #3
    44d6:	701a      	strb	r2, [r3, #0]
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	6819      	ldr	r1, [r3, #0]
    44dc:	1cfb      	adds	r3, r7, #3
    44de:	781a      	ldrb	r2, [r3, #0]
    44e0:	2384      	movs	r3, #132	; 0x84
    44e2:	005b      	lsls	r3, r3, #1
    44e4:	0152      	lsls	r2, r2, #5
    44e6:	188a      	adds	r2, r1, r2
    44e8:	18d2      	adds	r2, r2, r3
    44ea:	7853      	ldrb	r3, [r2, #1]
    44ec:	2101      	movs	r1, #1
    44ee:	430b      	orrs	r3, r1
    44f0:	7053      	strb	r3, [r2, #1]
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	46bd      	mov	sp, r7
    44f6:	b002      	add	sp, #8
    44f8:	bd80      	pop	{r7, pc}

000044fa <_ZN20USBDevice_SAMD21G18x29epBank1EnableTransferCompleteEh>:
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    44fa:	b580      	push	{r7, lr}
    44fc:	b082      	sub	sp, #8
    44fe:	af00      	add	r7, sp, #0
    4500:	6078      	str	r0, [r7, #4]
    4502:	000a      	movs	r2, r1
    4504:	1cfb      	adds	r3, r7, #3
    4506:	701a      	strb	r2, [r3, #0]
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	6819      	ldr	r1, [r3, #0]
    450c:	1cfb      	adds	r3, r7, #3
    450e:	781a      	ldrb	r2, [r3, #0]
    4510:	2384      	movs	r3, #132	; 0x84
    4512:	005b      	lsls	r3, r3, #1
    4514:	0152      	lsls	r2, r2, #5
    4516:	188a      	adds	r2, r1, r2
    4518:	18d2      	adds	r2, r2, r3
    451a:	7853      	ldrb	r3, [r2, #1]
    451c:	2102      	movs	r1, #2
    451e:	430b      	orrs	r3, r1
    4520:	7053      	strb	r3, [r2, #1]
    4522:	46c0      	nop			; (mov r8, r8)
    4524:	46bd      	mov	sp, r7
    4526:	b002      	add	sp, #8
    4528:	bd80      	pop	{r7, pc}

0000452a <_ZN20USBDevice_SAMD21G18x21epBank1DisableStalledEh>:

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    452a:	b580      	push	{r7, lr}
    452c:	b082      	sub	sp, #8
    452e:	af00      	add	r7, sp, #0
    4530:	6078      	str	r0, [r7, #4]
    4532:	000a      	movs	r2, r1
    4534:	1cfb      	adds	r3, r7, #3
    4536:	701a      	strb	r2, [r3, #0]
    4538:	687b      	ldr	r3, [r7, #4]
    453a:	6819      	ldr	r1, [r3, #0]
    453c:	1cfb      	adds	r3, r7, #3
    453e:	781a      	ldrb	r2, [r3, #0]
    4540:	2384      	movs	r3, #132	; 0x84
    4542:	005b      	lsls	r3, r3, #1
    4544:	0152      	lsls	r2, r2, #5
    4546:	188a      	adds	r2, r1, r2
    4548:	18d2      	adds	r2, r2, r3
    454a:	7813      	ldrb	r3, [r2, #0]
    454c:	2140      	movs	r1, #64	; 0x40
    454e:	430b      	orrs	r3, r1
    4550:	7013      	strb	r3, [r2, #0]
    4552:	46c0      	nop			; (mov r8, r8)
    4554:	46bd      	mov	sp, r7
    4556:	b002      	add	sp, #8
    4558:	bd80      	pop	{r7, pc}

0000455a <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>:
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    455a:	b580      	push	{r7, lr}
    455c:	b082      	sub	sp, #8
    455e:	af00      	add	r7, sp, #0
    4560:	6078      	str	r0, [r7, #4]
    4562:	000a      	movs	r2, r1
    4564:	1cfb      	adds	r3, r7, #3
    4566:	701a      	strb	r2, [r3, #0]
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	6819      	ldr	r1, [r3, #0]
    456c:	1cfb      	adds	r3, r7, #3
    456e:	781a      	ldrb	r2, [r3, #0]
    4570:	2384      	movs	r3, #132	; 0x84
    4572:	005b      	lsls	r3, r3, #1
    4574:	0152      	lsls	r2, r2, #5
    4576:	188a      	adds	r2, r1, r2
    4578:	18d2      	adds	r2, r2, r3
    457a:	7813      	ldrb	r3, [r2, #0]
    457c:	2101      	movs	r1, #1
    457e:	430b      	orrs	r3, r1
    4580:	7013      	strb	r3, [r2, #0]
    4582:	46c0      	nop			; (mov r8, r8)
    4584:	46bd      	mov	sp, r7
    4586:	b002      	add	sp, #8
    4588:	bd80      	pop	{r7, pc}

0000458a <_ZN20USBDevice_SAMD21G18x14epBank0IsReadyEh>:
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    458a:	b580      	push	{r7, lr}
    458c:	b082      	sub	sp, #8
    458e:	af00      	add	r7, sp, #0
    4590:	6078      	str	r0, [r7, #4]
    4592:	000a      	movs	r2, r1
    4594:	1cfb      	adds	r3, r7, #3
    4596:	701a      	strb	r2, [r3, #0]
    4598:	687b      	ldr	r3, [r7, #4]
    459a:	681a      	ldr	r2, [r3, #0]
    459c:	1cfb      	adds	r3, r7, #3
    459e:	781b      	ldrb	r3, [r3, #0]
    45a0:	3308      	adds	r3, #8
    45a2:	015b      	lsls	r3, r3, #5
    45a4:	18d3      	adds	r3, r2, r3
    45a6:	799b      	ldrb	r3, [r3, #6]
    45a8:	065b      	lsls	r3, r3, #25
    45aa:	0fdb      	lsrs	r3, r3, #31
    45ac:	b2db      	uxtb	r3, r3
    45ae:	0018      	movs	r0, r3
    45b0:	46bd      	mov	sp, r7
    45b2:	b002      	add	sp, #8
    45b4:	bd80      	pop	{r7, pc}

000045b6 <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>:
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    45b6:	b580      	push	{r7, lr}
    45b8:	b082      	sub	sp, #8
    45ba:	af00      	add	r7, sp, #0
    45bc:	6078      	str	r0, [r7, #4]
    45be:	000a      	movs	r2, r1
    45c0:	1cfb      	adds	r3, r7, #3
    45c2:	701a      	strb	r2, [r3, #0]
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	681a      	ldr	r2, [r3, #0]
    45c8:	1cfb      	adds	r3, r7, #3
    45ca:	781b      	ldrb	r3, [r3, #0]
    45cc:	3308      	adds	r3, #8
    45ce:	015b      	lsls	r3, r3, #5
    45d0:	18d3      	adds	r3, r2, r3
    45d2:	799b      	ldrb	r3, [r3, #6]
    45d4:	061b      	lsls	r3, r3, #24
    45d6:	0fdb      	lsrs	r3, r3, #31
    45d8:	b2db      	uxtb	r3, r3
    45da:	0018      	movs	r0, r3
    45dc:	46bd      	mov	sp, r7
    45de:	b002      	add	sp, #8
    45e0:	bd80      	pop	{r7, pc}

000045e2 <_ZN20USBDevice_SAMD21G18x15epBank0SetReadyEh>:
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    45e2:	b580      	push	{r7, lr}
    45e4:	b082      	sub	sp, #8
    45e6:	af00      	add	r7, sp, #0
    45e8:	6078      	str	r0, [r7, #4]
    45ea:	000a      	movs	r2, r1
    45ec:	1cfb      	adds	r3, r7, #3
    45ee:	701a      	strb	r2, [r3, #0]
    45f0:	687b      	ldr	r3, [r7, #4]
    45f2:	681a      	ldr	r2, [r3, #0]
    45f4:	1cfb      	adds	r3, r7, #3
    45f6:	781b      	ldrb	r3, [r3, #0]
    45f8:	3308      	adds	r3, #8
    45fa:	015b      	lsls	r3, r3, #5
    45fc:	18d2      	adds	r2, r2, r3
    45fe:	7953      	ldrb	r3, [r2, #5]
    4600:	2140      	movs	r1, #64	; 0x40
    4602:	430b      	orrs	r3, r1
    4604:	7153      	strb	r3, [r2, #5]
    4606:	46c0      	nop			; (mov r8, r8)
    4608:	46bd      	mov	sp, r7
    460a:	b002      	add	sp, #8
    460c:	bd80      	pop	{r7, pc}

0000460e <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>:
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    460e:	b580      	push	{r7, lr}
    4610:	b082      	sub	sp, #8
    4612:	af00      	add	r7, sp, #0
    4614:	6078      	str	r0, [r7, #4]
    4616:	000a      	movs	r2, r1
    4618:	1cfb      	adds	r3, r7, #3
    461a:	701a      	strb	r2, [r3, #0]
    461c:	687b      	ldr	r3, [r7, #4]
    461e:	681a      	ldr	r2, [r3, #0]
    4620:	1cfb      	adds	r3, r7, #3
    4622:	781b      	ldrb	r3, [r3, #0]
    4624:	3308      	adds	r3, #8
    4626:	015b      	lsls	r3, r3, #5
    4628:	18d2      	adds	r2, r2, r3
    462a:	7953      	ldrb	r3, [r2, #5]
    462c:	2180      	movs	r1, #128	; 0x80
    462e:	4249      	negs	r1, r1
    4630:	430b      	orrs	r3, r1
    4632:	7153      	strb	r3, [r2, #5]
    4634:	46c0      	nop			; (mov r8, r8)
    4636:	46bd      	mov	sp, r7
    4638:	b002      	add	sp, #8
    463a:	bd80      	pop	{r7, pc}

0000463c <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>:
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    463c:	b580      	push	{r7, lr}
    463e:	b082      	sub	sp, #8
    4640:	af00      	add	r7, sp, #0
    4642:	6078      	str	r0, [r7, #4]
    4644:	000a      	movs	r2, r1
    4646:	1cfb      	adds	r3, r7, #3
    4648:	701a      	strb	r2, [r3, #0]
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	681a      	ldr	r2, [r3, #0]
    464e:	1cfb      	adds	r3, r7, #3
    4650:	781b      	ldrb	r3, [r3, #0]
    4652:	3308      	adds	r3, #8
    4654:	015b      	lsls	r3, r3, #5
    4656:	18d2      	adds	r2, r2, r3
    4658:	7913      	ldrb	r3, [r2, #4]
    465a:	2140      	movs	r1, #64	; 0x40
    465c:	430b      	orrs	r3, r1
    465e:	7113      	strb	r3, [r2, #4]
    4660:	46c0      	nop			; (mov r8, r8)
    4662:	46bd      	mov	sp, r7
    4664:	b002      	add	sp, #8
    4666:	bd80      	pop	{r7, pc}

00004668 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>:
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    4668:	b580      	push	{r7, lr}
    466a:	b082      	sub	sp, #8
    466c:	af00      	add	r7, sp, #0
    466e:	6078      	str	r0, [r7, #4]
    4670:	000a      	movs	r2, r1
    4672:	1cfb      	adds	r3, r7, #3
    4674:	701a      	strb	r2, [r3, #0]
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	681a      	ldr	r2, [r3, #0]
    467a:	1cfb      	adds	r3, r7, #3
    467c:	781b      	ldrb	r3, [r3, #0]
    467e:	3308      	adds	r3, #8
    4680:	015b      	lsls	r3, r3, #5
    4682:	18d2      	adds	r2, r2, r3
    4684:	7913      	ldrb	r3, [r2, #4]
    4686:	2180      	movs	r1, #128	; 0x80
    4688:	4249      	negs	r1, r1
    468a:	430b      	orrs	r3, r1
    468c:	7113      	strb	r3, [r2, #4]
    468e:	46c0      	nop			; (mov r8, r8)
    4690:	46bd      	mov	sp, r7
    4692:	b002      	add	sp, #8
    4694:	bd80      	pop	{r7, pc}

00004696 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>:
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    4696:	b580      	push	{r7, lr}
    4698:	b082      	sub	sp, #8
    469a:	af00      	add	r7, sp, #0
    469c:	6078      	str	r0, [r7, #4]
    469e:	000a      	movs	r2, r1
    46a0:	1cfb      	adds	r3, r7, #3
    46a2:	701a      	strb	r2, [r3, #0]
    46a4:	1cfb      	adds	r3, r7, #3
    46a6:	781b      	ldrb	r3, [r3, #0]
    46a8:	687a      	ldr	r2, [r7, #4]
    46aa:	015b      	lsls	r3, r3, #5
    46ac:	18d3      	adds	r3, r2, r3
    46ae:	689b      	ldr	r3, [r3, #8]
    46b0:	049b      	lsls	r3, r3, #18
    46b2:	0c9b      	lsrs	r3, r3, #18
    46b4:	b29b      	uxth	r3, r3
    46b6:	0018      	movs	r0, r3
    46b8:	46bd      	mov	sp, r7
    46ba:	b002      	add	sp, #8
    46bc:	bd80      	pop	{r7, pc}

000046be <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>:
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    46be:	b580      	push	{r7, lr}
    46c0:	b082      	sub	sp, #8
    46c2:	af00      	add	r7, sp, #0
    46c4:	6078      	str	r0, [r7, #4]
    46c6:	0008      	movs	r0, r1
    46c8:	0011      	movs	r1, r2
    46ca:	1cfb      	adds	r3, r7, #3
    46cc:	1c02      	adds	r2, r0, #0
    46ce:	701a      	strb	r2, [r3, #0]
    46d0:	003b      	movs	r3, r7
    46d2:	1c0a      	adds	r2, r1, #0
    46d4:	801a      	strh	r2, [r3, #0]
    46d6:	1cfb      	adds	r3, r7, #3
    46d8:	781b      	ldrb	r3, [r3, #0]
    46da:	003a      	movs	r2, r7
    46dc:	8812      	ldrh	r2, [r2, #0]
    46de:	0492      	lsls	r2, r2, #18
    46e0:	0c92      	lsrs	r2, r2, #18
    46e2:	b291      	uxth	r1, r2
    46e4:	687a      	ldr	r2, [r7, #4]
    46e6:	015b      	lsls	r3, r3, #5
    46e8:	18d3      	adds	r3, r2, r3
    46ea:	689a      	ldr	r2, [r3, #8]
    46ec:	0489      	lsls	r1, r1, #18
    46ee:	0c89      	lsrs	r1, r1, #18
    46f0:	0b92      	lsrs	r2, r2, #14
    46f2:	0392      	lsls	r2, r2, #14
    46f4:	430a      	orrs	r2, r1
    46f6:	609a      	str	r2, [r3, #8]
    46f8:	46c0      	nop			; (mov r8, r8)
    46fa:	46bd      	mov	sp, r7
    46fc:	b002      	add	sp, #8
    46fe:	bd80      	pop	{r7, pc}

00004700 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>:
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    4700:	b580      	push	{r7, lr}
    4702:	b082      	sub	sp, #8
    4704:	af00      	add	r7, sp, #0
    4706:	6078      	str	r0, [r7, #4]
    4708:	0008      	movs	r0, r1
    470a:	0011      	movs	r1, r2
    470c:	1cfb      	adds	r3, r7, #3
    470e:	1c02      	adds	r2, r0, #0
    4710:	701a      	strb	r2, [r3, #0]
    4712:	003b      	movs	r3, r7
    4714:	1c0a      	adds	r2, r1, #0
    4716:	801a      	strh	r2, [r3, #0]
    4718:	1cfb      	adds	r3, r7, #3
    471a:	781b      	ldrb	r3, [r3, #0]
    471c:	003a      	movs	r2, r7
    471e:	8812      	ldrh	r2, [r2, #0]
    4720:	0492      	lsls	r2, r2, #18
    4722:	0c92      	lsrs	r2, r2, #18
    4724:	b291      	uxth	r1, r2
    4726:	687a      	ldr	r2, [r7, #4]
    4728:	015b      	lsls	r3, r3, #5
    472a:	18d3      	adds	r3, r2, r3
    472c:	3310      	adds	r3, #16
    472e:	689a      	ldr	r2, [r3, #8]
    4730:	0489      	lsls	r1, r1, #18
    4732:	0c89      	lsrs	r1, r1, #18
    4734:	0b92      	lsrs	r2, r2, #14
    4736:	0392      	lsls	r2, r2, #14
    4738:	430a      	orrs	r2, r1
    473a:	609a      	str	r2, [r3, #8]
    473c:	46c0      	nop			; (mov r8, r8)
    473e:	46bd      	mov	sp, r7
    4740:	b002      	add	sp, #8
    4742:	bd80      	pop	{r7, pc}

00004744 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>:
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    4744:	b580      	push	{r7, lr}
    4746:	b082      	sub	sp, #8
    4748:	af00      	add	r7, sp, #0
    474a:	6078      	str	r0, [r7, #4]
    474c:	0008      	movs	r0, r1
    474e:	0011      	movs	r1, r2
    4750:	1cfb      	adds	r3, r7, #3
    4752:	1c02      	adds	r2, r0, #0
    4754:	701a      	strb	r2, [r3, #0]
    4756:	003b      	movs	r3, r7
    4758:	1c0a      	adds	r2, r1, #0
    475a:	801a      	strh	r2, [r3, #0]
    475c:	1cfb      	adds	r3, r7, #3
    475e:	781b      	ldrb	r3, [r3, #0]
    4760:	003a      	movs	r2, r7
    4762:	8812      	ldrh	r2, [r2, #0]
    4764:	0492      	lsls	r2, r2, #18
    4766:	0c92      	lsrs	r2, r2, #18
    4768:	b291      	uxth	r1, r2
    476a:	687a      	ldr	r2, [r7, #4]
    476c:	015b      	lsls	r3, r3, #5
    476e:	18d3      	adds	r3, r2, r3
    4770:	689a      	ldr	r2, [r3, #8]
    4772:	0489      	lsls	r1, r1, #18
    4774:	0c89      	lsrs	r1, r1, #18
    4776:	0389      	lsls	r1, r1, #14
    4778:	4803      	ldr	r0, [pc, #12]	; (4788 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht+0x44>)
    477a:	4002      	ands	r2, r0
    477c:	430a      	orrs	r2, r1
    477e:	609a      	str	r2, [r3, #8]
    4780:	46c0      	nop			; (mov r8, r8)
    4782:	46bd      	mov	sp, r7
    4784:	b002      	add	sp, #8
    4786:	bd80      	pop	{r7, pc}
    4788:	f0003fff 	.word	0xf0003fff

0000478c <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht>:
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    478c:	b580      	push	{r7, lr}
    478e:	b082      	sub	sp, #8
    4790:	af00      	add	r7, sp, #0
    4792:	6078      	str	r0, [r7, #4]
    4794:	0008      	movs	r0, r1
    4796:	0011      	movs	r1, r2
    4798:	1cfb      	adds	r3, r7, #3
    479a:	1c02      	adds	r2, r0, #0
    479c:	701a      	strb	r2, [r3, #0]
    479e:	003b      	movs	r3, r7
    47a0:	1c0a      	adds	r2, r1, #0
    47a2:	801a      	strh	r2, [r3, #0]
    47a4:	1cfb      	adds	r3, r7, #3
    47a6:	781b      	ldrb	r3, [r3, #0]
    47a8:	003a      	movs	r2, r7
    47aa:	8812      	ldrh	r2, [r2, #0]
    47ac:	0492      	lsls	r2, r2, #18
    47ae:	0c92      	lsrs	r2, r2, #18
    47b0:	b291      	uxth	r1, r2
    47b2:	687a      	ldr	r2, [r7, #4]
    47b4:	015b      	lsls	r3, r3, #5
    47b6:	18d3      	adds	r3, r2, r3
    47b8:	3310      	adds	r3, #16
    47ba:	689a      	ldr	r2, [r3, #8]
    47bc:	0489      	lsls	r1, r1, #18
    47be:	0c89      	lsrs	r1, r1, #18
    47c0:	0389      	lsls	r1, r1, #14
    47c2:	4804      	ldr	r0, [pc, #16]	; (47d4 <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht+0x48>)
    47c4:	4002      	ands	r2, r0
    47c6:	430a      	orrs	r2, r1
    47c8:	609a      	str	r2, [r3, #8]
    47ca:	46c0      	nop			; (mov r8, r8)
    47cc:	46bd      	mov	sp, r7
    47ce:	b002      	add	sp, #8
    47d0:	bd80      	pop	{r7, pc}
    47d2:	46c0      	nop			; (mov r8, r8)
    47d4:	f0003fff 	.word	0xf0003fff

000047d8 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>:

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    47d8:	b580      	push	{r7, lr}
    47da:	b084      	sub	sp, #16
    47dc:	af00      	add	r7, sp, #0
    47de:	60f8      	str	r0, [r7, #12]
    47e0:	607a      	str	r2, [r7, #4]
    47e2:	230b      	movs	r3, #11
    47e4:	18fb      	adds	r3, r7, r3
    47e6:	1c0a      	adds	r2, r1, #0
    47e8:	701a      	strb	r2, [r3, #0]
    47ea:	230b      	movs	r3, #11
    47ec:	18fb      	adds	r3, r7, r3
    47ee:	781b      	ldrb	r3, [r3, #0]
    47f0:	687a      	ldr	r2, [r7, #4]
    47f2:	68f9      	ldr	r1, [r7, #12]
    47f4:	015b      	lsls	r3, r3, #5
    47f6:	18cb      	adds	r3, r1, r3
    47f8:	3304      	adds	r3, #4
    47fa:	601a      	str	r2, [r3, #0]
    47fc:	46c0      	nop			; (mov r8, r8)
    47fe:	46bd      	mov	sp, r7
    4800:	b004      	add	sp, #16
    4802:	bd80      	pop	{r7, pc}

00004804 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>:
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    4804:	b580      	push	{r7, lr}
    4806:	b084      	sub	sp, #16
    4808:	af00      	add	r7, sp, #0
    480a:	60f8      	str	r0, [r7, #12]
    480c:	607a      	str	r2, [r7, #4]
    480e:	230b      	movs	r3, #11
    4810:	18fb      	adds	r3, r7, r3
    4812:	1c0a      	adds	r2, r1, #0
    4814:	701a      	strb	r2, [r3, #0]
    4816:	230b      	movs	r3, #11
    4818:	18fb      	adds	r3, r7, r3
    481a:	781b      	ldrb	r3, [r3, #0]
    481c:	687a      	ldr	r2, [r7, #4]
    481e:	68f9      	ldr	r1, [r7, #12]
    4820:	015b      	lsls	r3, r3, #5
    4822:	18cb      	adds	r3, r1, r3
    4824:	3314      	adds	r3, #20
    4826:	601a      	str	r2, [r3, #0]
    4828:	46c0      	nop			; (mov r8, r8)
    482a:	46bd      	mov	sp, r7
    482c:	b004      	add	sp, #16
    482e:	bd80      	pop	{r7, pc}

00004830 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>:
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    4830:	b590      	push	{r4, r7, lr}
    4832:	b083      	sub	sp, #12
    4834:	af00      	add	r7, sp, #0
    4836:	6078      	str	r0, [r7, #4]
    4838:	0008      	movs	r0, r1
    483a:	0011      	movs	r1, r2
    483c:	1cfb      	adds	r3, r7, #3
    483e:	1c02      	adds	r2, r0, #0
    4840:	701a      	strb	r2, [r3, #0]
    4842:	003b      	movs	r3, r7
    4844:	1c0a      	adds	r2, r1, #0
    4846:	801a      	strh	r2, [r3, #0]
    4848:	1cfb      	adds	r3, r7, #3
    484a:	781c      	ldrb	r4, [r3, #0]
    484c:	003b      	movs	r3, r7
    484e:	881a      	ldrh	r2, [r3, #0]
    4850:	687b      	ldr	r3, [r7, #4]
    4852:	0011      	movs	r1, r2
    4854:	0018      	movs	r0, r3
    4856:	f000 f843 	bl	48e0 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>
    485a:	0003      	movs	r3, r0
    485c:	1c1a      	adds	r2, r3, #0
    485e:	2307      	movs	r3, #7
    4860:	4013      	ands	r3, r2
    4862:	b2d9      	uxtb	r1, r3
    4864:	687a      	ldr	r2, [r7, #4]
    4866:	0163      	lsls	r3, r4, #5
    4868:	18d3      	adds	r3, r2, r3
    486a:	689a      	ldr	r2, [r3, #8]
    486c:	2007      	movs	r0, #7
    486e:	4001      	ands	r1, r0
    4870:	0709      	lsls	r1, r1, #28
    4872:	4804      	ldr	r0, [pc, #16]	; (4884 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht+0x54>)
    4874:	4002      	ands	r2, r0
    4876:	430a      	orrs	r2, r1
    4878:	609a      	str	r2, [r3, #8]
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	46bd      	mov	sp, r7
    487e:	b003      	add	sp, #12
    4880:	bd90      	pop	{r4, r7, pc}
    4882:	46c0      	nop			; (mov r8, r8)
    4884:	8fffffff 	.word	0x8fffffff

00004888 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>:
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    4888:	b590      	push	{r4, r7, lr}
    488a:	b083      	sub	sp, #12
    488c:	af00      	add	r7, sp, #0
    488e:	6078      	str	r0, [r7, #4]
    4890:	0008      	movs	r0, r1
    4892:	0011      	movs	r1, r2
    4894:	1cfb      	adds	r3, r7, #3
    4896:	1c02      	adds	r2, r0, #0
    4898:	701a      	strb	r2, [r3, #0]
    489a:	003b      	movs	r3, r7
    489c:	1c0a      	adds	r2, r1, #0
    489e:	801a      	strh	r2, [r3, #0]
    48a0:	1cfb      	adds	r3, r7, #3
    48a2:	781c      	ldrb	r4, [r3, #0]
    48a4:	003b      	movs	r3, r7
    48a6:	881a      	ldrh	r2, [r3, #0]
    48a8:	687b      	ldr	r3, [r7, #4]
    48aa:	0011      	movs	r1, r2
    48ac:	0018      	movs	r0, r3
    48ae:	f000 f817 	bl	48e0 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>
    48b2:	0003      	movs	r3, r0
    48b4:	1c1a      	adds	r2, r3, #0
    48b6:	2307      	movs	r3, #7
    48b8:	4013      	ands	r3, r2
    48ba:	b2d9      	uxtb	r1, r3
    48bc:	687a      	ldr	r2, [r7, #4]
    48be:	0163      	lsls	r3, r4, #5
    48c0:	18d3      	adds	r3, r2, r3
    48c2:	3310      	adds	r3, #16
    48c4:	689a      	ldr	r2, [r3, #8]
    48c6:	2007      	movs	r0, #7
    48c8:	4001      	ands	r1, r0
    48ca:	0709      	lsls	r1, r1, #28
    48cc:	4803      	ldr	r0, [pc, #12]	; (48dc <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht+0x54>)
    48ce:	4002      	ands	r2, r0
    48d0:	430a      	orrs	r2, r1
    48d2:	609a      	str	r2, [r3, #8]
    48d4:	46c0      	nop			; (mov r8, r8)
    48d6:	46bd      	mov	sp, r7
    48d8:	b003      	add	sp, #12
    48da:	bd90      	pop	{r4, r7, pc}
    48dc:	8fffffff 	.word	0x8fffffff

000048e0 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt>:
	inline uint8_t EP_PCKSIZE_SIZE(uint16_t size) {
    48e0:	b580      	push	{r7, lr}
    48e2:	b082      	sub	sp, #8
    48e4:	af00      	add	r7, sp, #0
    48e6:	6078      	str	r0, [r7, #4]
    48e8:	000a      	movs	r2, r1
    48ea:	1cbb      	adds	r3, r7, #2
    48ec:	801a      	strh	r2, [r3, #0]
		switch (size) {
    48ee:	1cbb      	adds	r3, r7, #2
    48f0:	881b      	ldrh	r3, [r3, #0]
    48f2:	2b40      	cmp	r3, #64	; 0x40
    48f4:	d020      	beq.n	4938 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x58>
    48f6:	dc06      	bgt.n	4906 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x26>
    48f8:	2b10      	cmp	r3, #16
    48fa:	d019      	beq.n	4930 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x50>
    48fc:	2b20      	cmp	r3, #32
    48fe:	d019      	beq.n	4934 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x54>
    4900:	2b08      	cmp	r3, #8
    4902:	d013      	beq.n	492c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x4c>
    4904:	e022      	b.n	494c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
    4906:	2280      	movs	r2, #128	; 0x80
    4908:	0052      	lsls	r2, r2, #1
    490a:	4293      	cmp	r3, r2
    490c:	d018      	beq.n	4940 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x60>
    490e:	2280      	movs	r2, #128	; 0x80
    4910:	0052      	lsls	r2, r2, #1
    4912:	4293      	cmp	r3, r2
    4914:	dc02      	bgt.n	491c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x3c>
    4916:	2b80      	cmp	r3, #128	; 0x80
    4918:	d010      	beq.n	493c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x5c>
    491a:	e017      	b.n	494c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
    491c:	2280      	movs	r2, #128	; 0x80
    491e:	0092      	lsls	r2, r2, #2
    4920:	4293      	cmp	r3, r2
    4922:	d00f      	beq.n	4944 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x64>
    4924:	4a0c      	ldr	r2, [pc, #48]	; (4958 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x78>)
    4926:	4293      	cmp	r3, r2
    4928:	d00e      	beq.n	4948 <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x68>
    492a:	e00f      	b.n	494c <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6c>
		case 8:    return 0;
    492c:	2300      	movs	r3, #0
    492e:	e00e      	b.n	494e <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 16:   return 1;
    4930:	2301      	movs	r3, #1
    4932:	e00c      	b.n	494e <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 32:   return 2;
    4934:	2302      	movs	r3, #2
    4936:	e00a      	b.n	494e <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 64:   return 3;
    4938:	2303      	movs	r3, #3
    493a:	e008      	b.n	494e <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 128:  return 4;
    493c:	2304      	movs	r3, #4
    493e:	e006      	b.n	494e <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 256:  return 5;
    4940:	2305      	movs	r3, #5
    4942:	e004      	b.n	494e <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 512:  return 6;
    4944:	2306      	movs	r3, #6
    4946:	e002      	b.n	494e <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		case 1023: return 7;
    4948:	2307      	movs	r3, #7
    494a:	e000      	b.n	494e <_ZN20USBDevice_SAMD21G18x15EP_PCKSIZE_SIZEEt+0x6e>
		default:   return 0;
    494c:	2300      	movs	r3, #0
		}
	}
    494e:	0018      	movs	r0, r3
    4950:	46bd      	mov	sp, r7
    4952:	b002      	add	sp, #8
    4954:	bd80      	pop	{r7, pc}
    4956:	46c0      	nop			; (mov r8, r8)
    4958:	000003ff 	.word	0x000003ff

0000495c <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    495c:	b580      	push	{r7, lr}
    495e:	b082      	sub	sp, #8
    4960:	af00      	add	r7, sp, #0
    4962:	6078      	str	r0, [r7, #4]
	usb.CTRLA.bit.SWRST = 1;
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	681a      	ldr	r2, [r3, #0]
    4968:	7813      	ldrb	r3, [r2, #0]
    496a:	2101      	movs	r1, #1
    496c:	430b      	orrs	r3, r1
    496e:	7013      	strb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
    4970:	687b      	ldr	r3, [r7, #4]
    4972:	1d18      	adds	r0, r3, #4
    4974:	2380      	movs	r3, #128	; 0x80
    4976:	005b      	lsls	r3, r3, #1
    4978:	001a      	movs	r2, r3
    497a:	2100      	movs	r1, #0
    497c:	f00b ff8c 	bl	10898 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    4980:	687b      	ldr	r3, [r7, #4]
    4982:	681b      	ldr	r3, [r3, #0]
    4984:	789b      	ldrb	r3, [r3, #2]
    4986:	07db      	lsls	r3, r3, #31
    4988:	0fdb      	lsrs	r3, r3, #31
    498a:	b2db      	uxtb	r3, r3
    498c:	2b00      	cmp	r3, #0
    498e:	d000      	beq.n	4992 <_ZN20USBDevice_SAMD21G18x5resetEv+0x36>
    4990:	e7f6      	b.n	4980 <_ZN20USBDevice_SAMD21G18x5resetEv+0x24>
	usb.DESCADD.reg = (uint32_t)(&EP);
    4992:	687b      	ldr	r3, [r7, #4]
    4994:	681b      	ldr	r3, [r3, #0]
    4996:	687a      	ldr	r2, [r7, #4]
    4998:	3204      	adds	r2, #4
    499a:	625a      	str	r2, [r3, #36]	; 0x24
}
    499c:	46c0      	nop			; (mov r8, r8)
    499e:	46bd      	mov	sp, r7
    49a0:	b002      	add	sp, #8
    49a2:	bd80      	pop	{r7, pc}

000049a4 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:

void USBDevice_SAMD21G18x::calibrate() {
    49a4:	b580      	push	{r7, lr}
    49a6:	b088      	sub	sp, #32
    49a8:	af00      	add	r7, sp, #0
    49aa:	6078      	str	r0, [r7, #4]
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
    49ac:	4b31      	ldr	r3, [pc, #196]	; (4a74 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    49ae:	613b      	str	r3, [r7, #16]
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
    49b0:	4b30      	ldr	r3, [pc, #192]	; (4a74 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    49b2:	60fb      	str	r3, [r7, #12]
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;
    49b4:	4b2f      	ldr	r3, [pc, #188]	; (4a74 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd0>)
    49b6:	60bb      	str	r3, [r7, #8]

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    49b8:	693b      	ldr	r3, [r7, #16]
    49ba:	681b      	ldr	r3, [r3, #0]
    49bc:	0b5b      	lsrs	r3, r3, #13
    49be:	221f      	movs	r2, #31
    49c0:	4013      	ands	r3, r2
    49c2:	61fb      	str	r3, [r7, #28]
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    49c4:	68fb      	ldr	r3, [r7, #12]
    49c6:	681b      	ldr	r3, [r3, #0]
    49c8:	0c9b      	lsrs	r3, r3, #18
    49ca:	221f      	movs	r2, #31
    49cc:	4013      	ands	r3, r2
    49ce:	61bb      	str	r3, [r7, #24]
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    49d0:	68bb      	ldr	r3, [r7, #8]
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	0ddb      	lsrs	r3, r3, #23
    49d6:	2207      	movs	r2, #7
    49d8:	4013      	ands	r3, r2
    49da:	617b      	str	r3, [r7, #20]

	if (pad_transn == 0x1F)  // maximum value (31)
    49dc:	69fb      	ldr	r3, [r7, #28]
    49de:	2b1f      	cmp	r3, #31
    49e0:	d101      	bne.n	49e6 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x42>
		pad_transn = 5;
    49e2:	2305      	movs	r3, #5
    49e4:	61fb      	str	r3, [r7, #28]
	if (pad_transp == 0x1F)  // maximum value (31)
    49e6:	69bb      	ldr	r3, [r7, #24]
    49e8:	2b1f      	cmp	r3, #31
    49ea:	d101      	bne.n	49f0 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x4c>
		pad_transp = 29;
    49ec:	231d      	movs	r3, #29
    49ee:	61bb      	str	r3, [r7, #24]
	if (pad_trim == 0x7)     // maximum value (7)
    49f0:	697b      	ldr	r3, [r7, #20]
    49f2:	2b07      	cmp	r3, #7
    49f4:	d101      	bne.n	49fa <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x56>
		pad_trim = 3;
    49f6:	2303      	movs	r3, #3
    49f8:	617b      	str	r3, [r7, #20]

	usb.PADCAL.bit.TRANSN = pad_transn;
    49fa:	687b      	ldr	r3, [r7, #4]
    49fc:	681a      	ldr	r2, [r3, #0]
    49fe:	69fb      	ldr	r3, [r7, #28]
    4a00:	b2db      	uxtb	r3, r3
    4a02:	1c19      	adds	r1, r3, #0
    4a04:	231f      	movs	r3, #31
    4a06:	400b      	ands	r3, r1
    4a08:	b2d9      	uxtb	r1, r3
    4a0a:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4a0c:	1c08      	adds	r0, r1, #0
    4a0e:	211f      	movs	r1, #31
    4a10:	4001      	ands	r1, r0
    4a12:	0188      	lsls	r0, r1, #6
    4a14:	4918      	ldr	r1, [pc, #96]	; (4a78 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd4>)
    4a16:	400b      	ands	r3, r1
    4a18:	1c19      	adds	r1, r3, #0
    4a1a:	1c03      	adds	r3, r0, #0
    4a1c:	430b      	orrs	r3, r1
    4a1e:	8513      	strh	r3, [r2, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	681a      	ldr	r2, [r3, #0]
    4a24:	69bb      	ldr	r3, [r7, #24]
    4a26:	b2db      	uxtb	r3, r3
    4a28:	1c19      	adds	r1, r3, #0
    4a2a:	231f      	movs	r3, #31
    4a2c:	400b      	ands	r3, r1
    4a2e:	b2d9      	uxtb	r1, r3
    4a30:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4a32:	1c08      	adds	r0, r1, #0
    4a34:	211f      	movs	r1, #31
    4a36:	4008      	ands	r0, r1
    4a38:	211f      	movs	r1, #31
    4a3a:	438b      	bics	r3, r1
    4a3c:	1c19      	adds	r1, r3, #0
    4a3e:	1c03      	adds	r3, r0, #0
    4a40:	430b      	orrs	r3, r1
    4a42:	8513      	strh	r3, [r2, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    4a44:	687b      	ldr	r3, [r7, #4]
    4a46:	681a      	ldr	r2, [r3, #0]
    4a48:	697b      	ldr	r3, [r7, #20]
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	1c19      	adds	r1, r3, #0
    4a4e:	2307      	movs	r3, #7
    4a50:	400b      	ands	r3, r1
    4a52:	b2d9      	uxtb	r1, r3
    4a54:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4a56:	1c08      	adds	r0, r1, #0
    4a58:	2107      	movs	r1, #7
    4a5a:	4001      	ands	r1, r0
    4a5c:	0308      	lsls	r0, r1, #12
    4a5e:	4907      	ldr	r1, [pc, #28]	; (4a7c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0xd8>)
    4a60:	400b      	ands	r3, r1
    4a62:	1c19      	adds	r1, r3, #0
    4a64:	1c03      	adds	r3, r0, #0
    4a66:	430b      	orrs	r3, r1
    4a68:	8513      	strh	r3, [r2, #40]	; 0x28
}
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	46bd      	mov	sp, r7
    4a6e:	b008      	add	sp, #32
    4a70:	bd80      	pop	{r7, pc}
    4a72:	46c0      	nop			; (mov r8, r8)
    4a74:	00806024 	.word	0x00806024
    4a78:	fffff83f 	.word	0xfffff83f
    4a7c:	ffff8fff 	.word	0xffff8fff

00004a80 <_ZN7__GuardC1Ev>:
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    4a80:	b580      	push	{r7, lr}
    4a82:	b084      	sub	sp, #16
    4a84:	af00      	add	r7, sp, #0
    4a86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4a88:	f3ef 8310 	mrs	r3, PRIMASK
    4a8c:	60fb      	str	r3, [r7, #12]
  return(result);
    4a8e:	68fa      	ldr	r2, [r7, #12]
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	601a      	str	r2, [r3, #0]
    4a94:	687b      	ldr	r3, [r7, #4]
    4a96:	2201      	movs	r2, #1
    4a98:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    4a9a:	b672      	cpsid	i
		__disable_irq();
	}
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	0018      	movs	r0, r3
    4aa0:	46bd      	mov	sp, r7
    4aa2:	b004      	add	sp, #16
    4aa4:	bd80      	pop	{r7, pc}

00004aa6 <_ZN7__GuardD1Ev>:
	~__Guard() {
    4aa6:	b580      	push	{r7, lr}
    4aa8:	b082      	sub	sp, #8
    4aaa:	af00      	add	r7, sp, #0
    4aac:	6078      	str	r0, [r7, #4]
		if (primask == 0) {
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	681b      	ldr	r3, [r3, #0]
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	d102      	bne.n	4abc <_ZN7__GuardD1Ev+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
    4ab6:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
    4ab8:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	0018      	movs	r0, r3
    4ac0:	46bd      	mov	sp, r7
    4ac2:	b002      	add	sp, #8
    4ac4:	bd80      	pop	{r7, pc}

00004ac6 <_ZN7__Guard5enterEv>:
	uint32_t enter() { return loops--; }
    4ac6:	b580      	push	{r7, lr}
    4ac8:	b082      	sub	sp, #8
    4aca:	af00      	add	r7, sp, #0
    4acc:	6078      	str	r0, [r7, #4]
    4ace:	687b      	ldr	r3, [r7, #4]
    4ad0:	685a      	ldr	r2, [r3, #4]
    4ad2:	1e51      	subs	r1, r2, #1
    4ad4:	687b      	ldr	r3, [r7, #4]
    4ad6:	6059      	str	r1, [r3, #4]
    4ad8:	0013      	movs	r3, r2
    4ada:	0018      	movs	r0, r3
    4adc:	46bd      	mov	sp, r7
    4ade:	b002      	add	sp, #8
    4ae0:	bd80      	pop	{r7, pc}
	...

00004ae4 <_ZN9EPHandlerC1Ev>:

/*
 * USB EP generic handlers.
 */

class EPHandler {
    4ae4:	b580      	push	{r7, lr}
    4ae6:	b082      	sub	sp, #8
    4ae8:	af00      	add	r7, sp, #0
    4aea:	6078      	str	r0, [r7, #4]
    4aec:	4a03      	ldr	r2, [pc, #12]	; (4afc <_ZN9EPHandlerC1Ev+0x18>)
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	601a      	str	r2, [r3, #0]
    4af2:	687b      	ldr	r3, [r7, #4]
    4af4:	0018      	movs	r0, r3
    4af6:	46bd      	mov	sp, r7
    4af8:	b002      	add	sp, #8
    4afa:	bd80      	pop	{r7, pc}
    4afc:	00013558 	.word	0x00013558

00004b00 <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm>:
	virtual uint32_t available() const = 0;
};

class DoubleBufferedEPOutHandler : public EPHandler {
public:
	DoubleBufferedEPOutHandler(USBDevice_SAMD21G18x &usbDev, uint32_t endPoint, uint32_t bufferSize) :
    4b00:	b580      	push	{r7, lr}
    4b02:	b084      	sub	sp, #16
    4b04:	af00      	add	r7, sp, #0
    4b06:	60f8      	str	r0, [r7, #12]
    4b08:	60b9      	str	r1, [r7, #8]
    4b0a:	607a      	str	r2, [r7, #4]
    4b0c:	603b      	str	r3, [r7, #0]
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    4b0e:	68fb      	ldr	r3, [r7, #12]
    4b10:	0018      	movs	r0, r3
    4b12:	f7ff ffe7 	bl	4ae4 <_ZN9EPHandlerC1Ev>
    4b16:	4a30      	ldr	r2, [pc, #192]	; (4bd8 <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm+0xd8>)
    4b18:	68fb      	ldr	r3, [r7, #12]
    4b1a:	601a      	str	r2, [r3, #0]
    4b1c:	68fb      	ldr	r3, [r7, #12]
    4b1e:	68ba      	ldr	r2, [r7, #8]
    4b20:	605a      	str	r2, [r3, #4]
    4b22:	68fb      	ldr	r3, [r7, #12]
    4b24:	687a      	ldr	r2, [r7, #4]
    4b26:	609a      	str	r2, [r3, #8]
    4b28:	68fb      	ldr	r3, [r7, #12]
    4b2a:	683a      	ldr	r2, [r7, #0]
    4b2c:	60da      	str	r2, [r3, #12]
    4b2e:	68fb      	ldr	r3, [r7, #12]
    4b30:	2200      	movs	r2, #0
    4b32:	611a      	str	r2, [r3, #16]
    4b34:	68fb      	ldr	r3, [r7, #12]
    4b36:	2200      	movs	r2, #0
    4b38:	615a      	str	r2, [r3, #20]
    4b3a:	68fb      	ldr	r3, [r7, #12]
    4b3c:	2200      	movs	r2, #0
    4b3e:	61da      	str	r2, [r3, #28]
    4b40:	68fb      	ldr	r3, [r7, #12]
    4b42:	2200      	movs	r2, #0
    4b44:	621a      	str	r2, [r3, #32]
    4b46:	68fb      	ldr	r3, [r7, #12]
    4b48:	2224      	movs	r2, #36	; 0x24
    4b4a:	2100      	movs	r1, #0
    4b4c:	5499      	strb	r1, [r3, r2]
    4b4e:	68fb      	ldr	r3, [r7, #12]
    4b50:	2200      	movs	r2, #0
    4b52:	62da      	str	r2, [r3, #44]	; 0x2c
    4b54:	68fb      	ldr	r3, [r7, #12]
    4b56:	2200      	movs	r2, #0
    4b58:	631a      	str	r2, [r3, #48]	; 0x30
    4b5a:	68fb      	ldr	r3, [r7, #12]
    4b5c:	2234      	movs	r2, #52	; 0x34
    4b5e:	2100      	movs	r1, #0
    4b60:	5499      	strb	r1, [r3, r2]
    4b62:	68fb      	ldr	r3, [r7, #12]
    4b64:	2235      	movs	r2, #53	; 0x35
    4b66:	2100      	movs	r1, #0
    4b68:	5499      	strb	r1, [r3, r2]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    4b6a:	68fb      	ldr	r3, [r7, #12]
    4b6c:	68db      	ldr	r3, [r3, #12]
    4b6e:	0018      	movs	r0, r3
    4b70:	f00b fe54 	bl	1081c <malloc>
    4b74:	0003      	movs	r3, r0
    4b76:	001a      	movs	r2, r3
    4b78:	68fb      	ldr	r3, [r7, #12]
    4b7a:	619a      	str	r2, [r3, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    4b7c:	68fb      	ldr	r3, [r7, #12]
    4b7e:	68db      	ldr	r3, [r3, #12]
    4b80:	0018      	movs	r0, r3
    4b82:	f00b fe4b 	bl	1081c <malloc>
    4b86:	0003      	movs	r3, r0
    4b88:	001a      	movs	r2, r3
    4b8a:	68fb      	ldr	r3, [r7, #12]
    4b8c:	629a      	str	r2, [r3, #40]	; 0x28

		usbd.epBank0SetSize(ep, 64);
    4b8e:	68fb      	ldr	r3, [r7, #12]
    4b90:	6858      	ldr	r0, [r3, #4]
    4b92:	68fb      	ldr	r3, [r7, #12]
    4b94:	689b      	ldr	r3, [r3, #8]
    4b96:	b2db      	uxtb	r3, r3
    4b98:	2240      	movs	r2, #64	; 0x40
    4b9a:	0019      	movs	r1, r3
    4b9c:	f7ff fe48 	bl	4830 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>
		usbd.epBank0SetType(ep, 3); // BULK OUT
    4ba0:	68fb      	ldr	r3, [r7, #12]
    4ba2:	6858      	ldr	r0, [r3, #4]
    4ba4:	68fb      	ldr	r3, [r7, #12]
    4ba6:	689b      	ldr	r3, [r3, #8]
    4ba8:	b2db      	uxtb	r3, r3
    4baa:	2203      	movs	r2, #3
    4bac:	0019      	movs	r1, r3
    4bae:	f7ff fb73 	bl	4298 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    4bb2:	68fb      	ldr	r3, [r7, #12]
    4bb4:	6858      	ldr	r0, [r3, #4]
    4bb6:	68fb      	ldr	r3, [r7, #12]
    4bb8:	689b      	ldr	r3, [r3, #8]
    4bba:	b2d9      	uxtb	r1, r3
    4bbc:	68fb      	ldr	r3, [r7, #12]
    4bbe:	699b      	ldr	r3, [r3, #24]
    4bc0:	001a      	movs	r2, r3
    4bc2:	f7ff fe09 	bl	47d8 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>

		release();
    4bc6:	68fb      	ldr	r3, [r7, #12]
    4bc8:	0018      	movs	r0, r3
    4bca:	f000 fa47 	bl	505c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	}
    4bce:	68fb      	ldr	r3, [r7, #12]
    4bd0:	0018      	movs	r0, r3
    4bd2:	46bd      	mov	sp, r7
    4bd4:	b004      	add	sp, #16
    4bd6:	bd80      	pop	{r7, pc}
    4bd8:	00013544 	.word	0x00013544

00004bdc <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:

	virtual uint32_t recv(void *_data, uint32_t len)
    4bdc:	b5b0      	push	{r4, r5, r7, lr}
    4bde:	b090      	sub	sp, #64	; 0x40
    4be0:	af00      	add	r7, sp, #0
    4be2:	60f8      	str	r0, [r7, #12]
    4be4:	60b9      	str	r1, [r7, #8]
    4be6:	607a      	str	r2, [r7, #4]
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);
    4be8:	68bb      	ldr	r3, [r7, #8]
    4bea:	637b      	str	r3, [r7, #52]	; 0x34

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    4bec:	68fb      	ldr	r3, [r7, #12]
    4bee:	691b      	ldr	r3, [r3, #16]
    4bf0:	2b00      	cmp	r3, #0
    4bf2:	d000      	beq.n	4bf6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
    4bf4:	e082      	b.n	4cfc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x120>
			synchronized {
    4bf6:	232c      	movs	r3, #44	; 0x2c
    4bf8:	18fb      	adds	r3, r7, r3
    4bfa:	0018      	movs	r0, r3
    4bfc:	f7ff ff40 	bl	4a80 <_ZN7__GuardC1Ev>
    4c00:	232c      	movs	r3, #44	; 0x2c
    4c02:	18fb      	adds	r3, r7, r3
    4c04:	0018      	movs	r0, r3
    4c06:	f7ff ff5e 	bl	4ac6 <_ZN7__Guard5enterEv>
    4c0a:	0003      	movs	r3, r0
    4c0c:	1e5a      	subs	r2, r3, #1
    4c0e:	4193      	sbcs	r3, r2
    4c10:	b2db      	uxtb	r3, r3
    4c12:	2b00      	cmp	r3, #0
    4c14:	d00b      	beq.n	4c2e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x52>
				if (!ready0) {
    4c16:	68fb      	ldr	r3, [r7, #12]
    4c18:	2224      	movs	r2, #36	; 0x24
    4c1a:	5c9b      	ldrb	r3, [r3, r2]
    4c1c:	b2db      	uxtb	r3, r3
    4c1e:	2201      	movs	r2, #1
    4c20:	4053      	eors	r3, r2
    4c22:	b2db      	uxtb	r3, r3
    4c24:	2b00      	cmp	r3, #0
    4c26:	d0eb      	beq.n	4c00 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x24>
					return 0;
    4c28:	2400      	movs	r4, #0
    4c2a:	2500      	movs	r5, #0
    4c2c:	e000      	b.n	4c30 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x54>
    4c2e:	2501      	movs	r5, #1
    4c30:	232c      	movs	r3, #44	; 0x2c
    4c32:	18fb      	adds	r3, r7, r3
    4c34:	0018      	movs	r0, r3
    4c36:	f7ff ff36 	bl	4aa6 <_ZN7__GuardD1Ev>
    4c3a:	2d01      	cmp	r5, #1
    4c3c:	d000      	beq.n	4c40 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x64>
    4c3e:	e0de      	b.n	4dfe <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
			synchronized {
    4c40:	46c0      	nop			; (mov r8, r8)
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    4c42:	2300      	movs	r3, #0
    4c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    4c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4c48:	687b      	ldr	r3, [r7, #4]
    4c4a:	429a      	cmp	r2, r3
    4c4c:	d207      	bcs.n	4c5e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    4c4e:	68fb      	ldr	r3, [r7, #12]
    4c50:	69da      	ldr	r2, [r3, #28]
    4c52:	68fb      	ldr	r3, [r7, #12]
    4c54:	6a1b      	ldr	r3, [r3, #32]
    4c56:	429a      	cmp	r2, r3
    4c58:	d201      	bcs.n	4c5e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x82>
    4c5a:	2301      	movs	r3, #1
    4c5c:	e000      	b.n	4c60 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x84>
    4c5e:	2300      	movs	r3, #0
    4c60:	2b00      	cmp	r3, #0
    4c62:	d011      	beq.n	4c88 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xac>
				data[i] = data0[first0++];
    4c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4c68:	18d1      	adds	r1, r2, r3
    4c6a:	68fb      	ldr	r3, [r7, #12]
    4c6c:	6998      	ldr	r0, [r3, #24]
    4c6e:	68fb      	ldr	r3, [r7, #12]
    4c70:	69db      	ldr	r3, [r3, #28]
    4c72:	1c5c      	adds	r4, r3, #1
    4c74:	68fa      	ldr	r2, [r7, #12]
    4c76:	61d4      	str	r4, [r2, #28]
    4c78:	18c3      	adds	r3, r0, r3
    4c7a:	781b      	ldrb	r3, [r3, #0]
    4c7c:	b2db      	uxtb	r3, r3
    4c7e:	700b      	strb	r3, [r1, #0]
			for (i=0; i<len && first0 < last0; i++) {
    4c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4c82:	3301      	adds	r3, #1
    4c84:	63fb      	str	r3, [r7, #60]	; 0x3c
    4c86:	e7de      	b.n	4c46 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6a>
			}
			if (first0 == last0) {
    4c88:	68fb      	ldr	r3, [r7, #12]
    4c8a:	69da      	ldr	r2, [r3, #28]
    4c8c:	68fb      	ldr	r3, [r7, #12]
    4c8e:	6a1b      	ldr	r3, [r3, #32]
    4c90:	1ad3      	subs	r3, r2, r3
    4c92:	425a      	negs	r2, r3
    4c94:	4153      	adcs	r3, r2
    4c96:	b2db      	uxtb	r3, r3
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d02d      	beq.n	4cf8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x11c>
				first0 = 0;
    4c9c:	68fb      	ldr	r3, [r7, #12]
    4c9e:	2200      	movs	r2, #0
    4ca0:	61da      	str	r2, [r3, #28]
				current = 1;
    4ca2:	68fb      	ldr	r3, [r7, #12]
    4ca4:	2201      	movs	r2, #1
    4ca6:	611a      	str	r2, [r3, #16]
				synchronized {
    4ca8:	2324      	movs	r3, #36	; 0x24
    4caa:	18fb      	adds	r3, r7, r3
    4cac:	0018      	movs	r0, r3
    4cae:	f7ff fee7 	bl	4a80 <_ZN7__GuardC1Ev>
    4cb2:	2324      	movs	r3, #36	; 0x24
    4cb4:	18fb      	adds	r3, r7, r3
    4cb6:	0018      	movs	r0, r3
    4cb8:	f7ff ff05 	bl	4ac6 <_ZN7__Guard5enterEv>
    4cbc:	0003      	movs	r3, r0
    4cbe:	1e5a      	subs	r2, r3, #1
    4cc0:	4193      	sbcs	r3, r2
    4cc2:	b2db      	uxtb	r3, r3
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d012      	beq.n	4cee <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x112>
					ready0 = false;
    4cc8:	68fb      	ldr	r3, [r7, #12]
    4cca:	2224      	movs	r2, #36	; 0x24
    4ccc:	2100      	movs	r1, #0
    4cce:	5499      	strb	r1, [r3, r2]
					if (notify) {
    4cd0:	68fb      	ldr	r3, [r7, #12]
    4cd2:	2235      	movs	r2, #53	; 0x35
    4cd4:	5c9b      	ldrb	r3, [r3, r2]
    4cd6:	b2db      	uxtb	r3, r3
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d0ea      	beq.n	4cb2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
						notify = false;
    4cdc:	68fb      	ldr	r3, [r7, #12]
    4cde:	2235      	movs	r2, #53	; 0x35
    4ce0:	2100      	movs	r1, #0
    4ce2:	5499      	strb	r1, [r3, r2]
						release();
    4ce4:	68fb      	ldr	r3, [r7, #12]
    4ce6:	0018      	movs	r0, r3
    4ce8:	f000 f9b8 	bl	505c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
				synchronized {
    4cec:	e7e1      	b.n	4cb2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
    4cee:	2324      	movs	r3, #36	; 0x24
    4cf0:	18fb      	adds	r3, r7, r3
    4cf2:	0018      	movs	r0, r3
    4cf4:	f7ff fed7 	bl	4aa6 <_ZN7__GuardD1Ev>
					}
				}
			}
			return i;
    4cf8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    4cfa:	e080      	b.n	4dfe <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
		} else {
			synchronized {
    4cfc:	231c      	movs	r3, #28
    4cfe:	18fb      	adds	r3, r7, r3
    4d00:	0018      	movs	r0, r3
    4d02:	f7ff febd 	bl	4a80 <_ZN7__GuardC1Ev>
    4d06:	231c      	movs	r3, #28
    4d08:	18fb      	adds	r3, r7, r3
    4d0a:	0018      	movs	r0, r3
    4d0c:	f7ff fedb 	bl	4ac6 <_ZN7__Guard5enterEv>
    4d10:	0003      	movs	r3, r0
    4d12:	1e5a      	subs	r2, r3, #1
    4d14:	4193      	sbcs	r3, r2
    4d16:	b2db      	uxtb	r3, r3
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d00b      	beq.n	4d34 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x158>
				if (!ready1) {
    4d1c:	68fb      	ldr	r3, [r7, #12]
    4d1e:	2234      	movs	r2, #52	; 0x34
    4d20:	5c9b      	ldrb	r3, [r3, r2]
    4d22:	b2db      	uxtb	r3, r3
    4d24:	2201      	movs	r2, #1
    4d26:	4053      	eors	r3, r2
    4d28:	b2db      	uxtb	r3, r3
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	d0eb      	beq.n	4d06 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12a>
					return 0;
    4d2e:	2400      	movs	r4, #0
    4d30:	2500      	movs	r5, #0
    4d32:	e000      	b.n	4d36 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x15a>
    4d34:	2501      	movs	r5, #1
    4d36:	231c      	movs	r3, #28
    4d38:	18fb      	adds	r3, r7, r3
    4d3a:	0018      	movs	r0, r3
    4d3c:	f7ff feb3 	bl	4aa6 <_ZN7__GuardD1Ev>
    4d40:	2d01      	cmp	r5, #1
    4d42:	d15c      	bne.n	4dfe <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x222>
			synchronized {
    4d44:	46c0      	nop			; (mov r8, r8)
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    4d46:	2300      	movs	r3, #0
    4d48:	63bb      	str	r3, [r7, #56]	; 0x38
    4d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    4d4c:	687b      	ldr	r3, [r7, #4]
    4d4e:	429a      	cmp	r2, r3
    4d50:	d207      	bcs.n	4d62 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x186>
    4d52:	68fb      	ldr	r3, [r7, #12]
    4d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d56:	68fb      	ldr	r3, [r7, #12]
    4d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d5a:	429a      	cmp	r2, r3
    4d5c:	d201      	bcs.n	4d62 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x186>
    4d5e:	2301      	movs	r3, #1
    4d60:	e000      	b.n	4d64 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x188>
    4d62:	2300      	movs	r3, #0
    4d64:	2b00      	cmp	r3, #0
    4d66:	d011      	beq.n	4d8c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1b0>
				data[i] = data1[first1++];
    4d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4d6c:	18d1      	adds	r1, r2, r3
    4d6e:	68fb      	ldr	r3, [r7, #12]
    4d70:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4d72:	68fb      	ldr	r3, [r7, #12]
    4d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d76:	1c5c      	adds	r4, r3, #1
    4d78:	68fa      	ldr	r2, [r7, #12]
    4d7a:	62d4      	str	r4, [r2, #44]	; 0x2c
    4d7c:	18c3      	adds	r3, r0, r3
    4d7e:	781b      	ldrb	r3, [r3, #0]
    4d80:	b2db      	uxtb	r3, r3
    4d82:	700b      	strb	r3, [r1, #0]
			for (i=0; i<len && first1 < last1; i++) {
    4d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4d86:	3301      	adds	r3, #1
    4d88:	63bb      	str	r3, [r7, #56]	; 0x38
    4d8a:	e7de      	b.n	4d4a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x16e>
			}
			if (first1 == last1) {
    4d8c:	68fb      	ldr	r3, [r7, #12]
    4d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d90:	68fb      	ldr	r3, [r7, #12]
    4d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4d94:	1ad3      	subs	r3, r2, r3
    4d96:	425a      	negs	r2, r3
    4d98:	4153      	adcs	r3, r2
    4d9a:	b2db      	uxtb	r3, r3
    4d9c:	2b00      	cmp	r3, #0
    4d9e:	d02d      	beq.n	4dfc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x220>
				first1 = 0;
    4da0:	68fb      	ldr	r3, [r7, #12]
    4da2:	2200      	movs	r2, #0
    4da4:	62da      	str	r2, [r3, #44]	; 0x2c
				current = 0;
    4da6:	68fb      	ldr	r3, [r7, #12]
    4da8:	2200      	movs	r2, #0
    4daa:	611a      	str	r2, [r3, #16]
				synchronized {
    4dac:	2314      	movs	r3, #20
    4dae:	18fb      	adds	r3, r7, r3
    4db0:	0018      	movs	r0, r3
    4db2:	f7ff fe65 	bl	4a80 <_ZN7__GuardC1Ev>
    4db6:	2314      	movs	r3, #20
    4db8:	18fb      	adds	r3, r7, r3
    4dba:	0018      	movs	r0, r3
    4dbc:	f7ff fe83 	bl	4ac6 <_ZN7__Guard5enterEv>
    4dc0:	0003      	movs	r3, r0
    4dc2:	1e5a      	subs	r2, r3, #1
    4dc4:	4193      	sbcs	r3, r2
    4dc6:	b2db      	uxtb	r3, r3
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d012      	beq.n	4df2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x216>
					ready1 = false;
    4dcc:	68fb      	ldr	r3, [r7, #12]
    4dce:	2234      	movs	r2, #52	; 0x34
    4dd0:	2100      	movs	r1, #0
    4dd2:	5499      	strb	r1, [r3, r2]
					if (notify) {
    4dd4:	68fb      	ldr	r3, [r7, #12]
    4dd6:	2235      	movs	r2, #53	; 0x35
    4dd8:	5c9b      	ldrb	r3, [r3, r2]
    4dda:	b2db      	uxtb	r3, r3
    4ddc:	2b00      	cmp	r3, #0
    4dde:	d0ea      	beq.n	4db6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1da>
						notify = false;
    4de0:	68fb      	ldr	r3, [r7, #12]
    4de2:	2235      	movs	r2, #53	; 0x35
    4de4:	2100      	movs	r1, #0
    4de6:	5499      	strb	r1, [r3, r2]
						release();
    4de8:	68fb      	ldr	r3, [r7, #12]
    4dea:	0018      	movs	r0, r3
    4dec:	f000 f936 	bl	505c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
				synchronized {
    4df0:	e7e1      	b.n	4db6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1da>
    4df2:	2314      	movs	r3, #20
    4df4:	18fb      	adds	r3, r7, r3
    4df6:	0018      	movs	r0, r3
    4df8:	f7ff fe55 	bl	4aa6 <_ZN7__GuardD1Ev>
					}
				}
			}
			return i;
    4dfc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    4dfe:	0023      	movs	r3, r4
		}
	}
    4e00:	0018      	movs	r0, r3
    4e02:	46bd      	mov	sp, r7
    4e04:	b010      	add	sp, #64	; 0x40
    4e06:	bdb0      	pop	{r4, r5, r7, pc}

00004e08 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:

	virtual void handleEndpoint()
    4e08:	b590      	push	{r4, r7, lr}
    4e0a:	b087      	sub	sp, #28
    4e0c:	af00      	add	r7, sp, #0
    4e0e:	6078      	str	r0, [r7, #4]
	{
		// R/W : incoming, ready0/1
		//   W : last0/1, notify
		if (usbd.epBank0IsTransferComplete(ep))
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	685a      	ldr	r2, [r3, #4]
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	689b      	ldr	r3, [r3, #8]
    4e18:	b2db      	uxtb	r3, r3
    4e1a:	0019      	movs	r1, r3
    4e1c:	0010      	movs	r0, r2
    4e1e:	f7ff fabc 	bl	439a <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    4e22:	1e03      	subs	r3, r0, #0
    4e24:	d100      	bne.n	4e28 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x20>
    4e26:	e0b0      	b.n	4f8a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
		{
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
    4e28:	687b      	ldr	r3, [r7, #4]
    4e2a:	685a      	ldr	r2, [r3, #4]
    4e2c:	687b      	ldr	r3, [r7, #4]
    4e2e:	689b      	ldr	r3, [r3, #8]
    4e30:	b2db      	uxtb	r3, r3
    4e32:	0019      	movs	r1, r3
    4e34:	0010      	movs	r0, r2
    4e36:	f7ff fb06 	bl	4446 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks for non-ZLP's
			if (incoming == 0) {
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	695b      	ldr	r3, [r3, #20]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d14f      	bne.n	4ee2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
				last0 = usbd.epBank0ByteCount(ep);
    4e42:	687b      	ldr	r3, [r7, #4]
    4e44:	685a      	ldr	r2, [r3, #4]
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	689b      	ldr	r3, [r3, #8]
    4e4a:	b2db      	uxtb	r3, r3
    4e4c:	0019      	movs	r1, r3
    4e4e:	0010      	movs	r0, r2
    4e50:	f7ff fc21 	bl	4696 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    4e54:	0003      	movs	r3, r0
    4e56:	001a      	movs	r2, r3
    4e58:	687b      	ldr	r3, [r7, #4]
    4e5a:	621a      	str	r2, [r3, #32]
				if (last0 != 0) {
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	6a1b      	ldr	r3, [r3, #32]
    4e60:	1e5a      	subs	r2, r3, #1
    4e62:	4193      	sbcs	r3, r2
    4e64:	b2db      	uxtb	r3, r3
    4e66:	2b00      	cmp	r3, #0
    4e68:	d100      	bne.n	4e6c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x64>
    4e6a:	e08a      	b.n	4f82 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					incoming = 1;
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	2201      	movs	r2, #1
    4e70:	615a      	str	r2, [r3, #20]
					usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	6858      	ldr	r0, [r3, #4]
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	689b      	ldr	r3, [r3, #8]
    4e7a:	b2d9      	uxtb	r1, r3
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e80:	001a      	movs	r2, r3
    4e82:	f7ff fca9 	bl	47d8 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
					synchronized {
    4e86:	2310      	movs	r3, #16
    4e88:	18fb      	adds	r3, r7, r3
    4e8a:	0018      	movs	r0, r3
    4e8c:	f7ff fdf8 	bl	4a80 <_ZN7__GuardC1Ev>
    4e90:	2310      	movs	r3, #16
    4e92:	18fb      	adds	r3, r7, r3
    4e94:	0018      	movs	r0, r3
    4e96:	f7ff fe16 	bl	4ac6 <_ZN7__Guard5enterEv>
    4e9a:	0003      	movs	r3, r0
    4e9c:	1e5a      	subs	r2, r3, #1
    4e9e:	4193      	sbcs	r3, r2
    4ea0:	b2db      	uxtb	r3, r3
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d014      	beq.n	4ed0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xc8>
						ready0 = true;
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	2224      	movs	r2, #36	; 0x24
    4eaa:	2101      	movs	r1, #1
    4eac:	5499      	strb	r1, [r3, r2]
						if (ready1) {
    4eae:	687b      	ldr	r3, [r7, #4]
    4eb0:	2234      	movs	r2, #52	; 0x34
    4eb2:	5c9b      	ldrb	r3, [r3, r2]
    4eb4:	b2db      	uxtb	r3, r3
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d005      	beq.n	4ec6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xbe>
							notify = true;
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	2235      	movs	r2, #53	; 0x35
    4ebe:	2101      	movs	r1, #1
    4ec0:	5499      	strb	r1, [r3, r2]
    4ec2:	2400      	movs	r4, #0
							return;
    4ec4:	e005      	b.n	4ed2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xca>
						}
						notify = false;
    4ec6:	687b      	ldr	r3, [r7, #4]
    4ec8:	2235      	movs	r2, #53	; 0x35
    4eca:	2100      	movs	r1, #0
    4ecc:	5499      	strb	r1, [r3, r2]
					synchronized {
    4ece:	e7df      	b.n	4e90 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x88>
    4ed0:	2401      	movs	r4, #1
    4ed2:	2310      	movs	r3, #16
    4ed4:	18fb      	adds	r3, r7, r3
    4ed6:	0018      	movs	r0, r3
    4ed8:	f7ff fde5 	bl	4aa6 <_ZN7__GuardD1Ev>
    4edc:	2c01      	cmp	r4, #1
    4ede:	d04f      	beq.n	4f80 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x178>
    4ee0:	e053      	b.n	4f8a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
					}
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
    4ee2:	687b      	ldr	r3, [r7, #4]
    4ee4:	685a      	ldr	r2, [r3, #4]
    4ee6:	687b      	ldr	r3, [r7, #4]
    4ee8:	689b      	ldr	r3, [r3, #8]
    4eea:	b2db      	uxtb	r3, r3
    4eec:	0019      	movs	r1, r3
    4eee:	0010      	movs	r0, r2
    4ef0:	f7ff fbd1 	bl	4696 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    4ef4:	0003      	movs	r3, r0
    4ef6:	001a      	movs	r2, r3
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	631a      	str	r2, [r3, #48]	; 0x30
				if (last1 != 0) {
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4f00:	1e5a      	subs	r2, r3, #1
    4f02:	4193      	sbcs	r3, r2
    4f04:	b2db      	uxtb	r3, r3
    4f06:	2b00      	cmp	r3, #0
    4f08:	d03b      	beq.n	4f82 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					incoming = 0;
    4f0a:	687b      	ldr	r3, [r7, #4]
    4f0c:	2200      	movs	r2, #0
    4f0e:	615a      	str	r2, [r3, #20]
					usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    4f10:	687b      	ldr	r3, [r7, #4]
    4f12:	6858      	ldr	r0, [r3, #4]
    4f14:	687b      	ldr	r3, [r7, #4]
    4f16:	689b      	ldr	r3, [r3, #8]
    4f18:	b2d9      	uxtb	r1, r3
    4f1a:	687b      	ldr	r3, [r7, #4]
    4f1c:	699b      	ldr	r3, [r3, #24]
    4f1e:	001a      	movs	r2, r3
    4f20:	f7ff fc5a 	bl	47d8 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
					synchronized {
    4f24:	2308      	movs	r3, #8
    4f26:	18fb      	adds	r3, r7, r3
    4f28:	0018      	movs	r0, r3
    4f2a:	f7ff fda9 	bl	4a80 <_ZN7__GuardC1Ev>
    4f2e:	2308      	movs	r3, #8
    4f30:	18fb      	adds	r3, r7, r3
    4f32:	0018      	movs	r0, r3
    4f34:	f7ff fdc7 	bl	4ac6 <_ZN7__Guard5enterEv>
    4f38:	0003      	movs	r3, r0
    4f3a:	1e5a      	subs	r2, r3, #1
    4f3c:	4193      	sbcs	r3, r2
    4f3e:	b2db      	uxtb	r3, r3
    4f40:	2b00      	cmp	r3, #0
    4f42:	d014      	beq.n	4f6e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x166>
						ready1 = true;
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	2234      	movs	r2, #52	; 0x34
    4f48:	2101      	movs	r1, #1
    4f4a:	5499      	strb	r1, [r3, r2]
						if (ready0) {
    4f4c:	687b      	ldr	r3, [r7, #4]
    4f4e:	2224      	movs	r2, #36	; 0x24
    4f50:	5c9b      	ldrb	r3, [r3, r2]
    4f52:	b2db      	uxtb	r3, r3
    4f54:	2b00      	cmp	r3, #0
    4f56:	d005      	beq.n	4f64 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x15c>
							notify = true;
    4f58:	687b      	ldr	r3, [r7, #4]
    4f5a:	2235      	movs	r2, #53	; 0x35
    4f5c:	2101      	movs	r1, #1
    4f5e:	5499      	strb	r1, [r3, r2]
    4f60:	2400      	movs	r4, #0
							return;
    4f62:	e005      	b.n	4f70 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x168>
						}
						notify = false;
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	2235      	movs	r2, #53	; 0x35
    4f68:	2100      	movs	r1, #0
    4f6a:	5499      	strb	r1, [r3, r2]
					synchronized {
    4f6c:	e7df      	b.n	4f2e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x126>
    4f6e:	2401      	movs	r4, #1
    4f70:	2308      	movs	r3, #8
    4f72:	18fb      	adds	r3, r7, r3
    4f74:	0018      	movs	r0, r3
    4f76:	f7ff fd96 	bl	4aa6 <_ZN7__GuardD1Ev>
    4f7a:	2c01      	cmp	r4, #1
    4f7c:	d105      	bne.n	4f8a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x182>
    4f7e:	e000      	b.n	4f82 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x17a>
					synchronized {
    4f80:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
			release();
    4f82:	687b      	ldr	r3, [r7, #4]
    4f84:	0018      	movs	r0, r3
    4f86:	f000 f869 	bl	505c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
		}
	}
    4f8a:	46bd      	mov	sp, r7
    4f8c:	b007      	add	sp, #28
    4f8e:	bd90      	pop	{r4, r7, pc}

00004f90 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    4f90:	b580      	push	{r7, lr}
    4f92:	b088      	sub	sp, #32
    4f94:	af00      	add	r7, sp, #0
    4f96:	6078      	str	r0, [r7, #4]
		if (current == 0) {
    4f98:	687b      	ldr	r3, [r7, #4]
    4f9a:	691b      	ldr	r3, [r3, #16]
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	d12c      	bne.n	4ffa <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x6a>
			bool ready = false;
    4fa0:	231f      	movs	r3, #31
    4fa2:	18fb      	adds	r3, r7, r3
    4fa4:	2200      	movs	r2, #0
    4fa6:	701a      	strb	r2, [r3, #0]
			synchronized {
    4fa8:	2314      	movs	r3, #20
    4faa:	18fb      	adds	r3, r7, r3
    4fac:	0018      	movs	r0, r3
    4fae:	f7ff fd67 	bl	4a80 <_ZN7__GuardC1Ev>
    4fb2:	2314      	movs	r3, #20
    4fb4:	18fb      	adds	r3, r7, r3
    4fb6:	0018      	movs	r0, r3
    4fb8:	f7ff fd85 	bl	4ac6 <_ZN7__Guard5enterEv>
    4fbc:	0003      	movs	r3, r0
    4fbe:	1e5a      	subs	r2, r3, #1
    4fc0:	4193      	sbcs	r3, r2
    4fc2:	b2db      	uxtb	r3, r3
    4fc4:	2b00      	cmp	r3, #0
    4fc6:	d006      	beq.n	4fd6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x46>
				ready = ready0;
    4fc8:	231f      	movs	r3, #31
    4fca:	18fb      	adds	r3, r7, r3
    4fcc:	687a      	ldr	r2, [r7, #4]
    4fce:	2124      	movs	r1, #36	; 0x24
    4fd0:	5c52      	ldrb	r2, [r2, r1]
    4fd2:	701a      	strb	r2, [r3, #0]
			synchronized {
    4fd4:	e7ed      	b.n	4fb2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x22>
    4fd6:	2314      	movs	r3, #20
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	0018      	movs	r0, r3
    4fdc:	f7ff fd63 	bl	4aa6 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    4fe0:	231f      	movs	r3, #31
    4fe2:	18fb      	adds	r3, r7, r3
    4fe4:	781b      	ldrb	r3, [r3, #0]
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	d005      	beq.n	4ff6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x66>
    4fea:	687b      	ldr	r3, [r7, #4]
    4fec:	6a1a      	ldr	r2, [r3, #32]
    4fee:	687b      	ldr	r3, [r7, #4]
    4ff0:	69db      	ldr	r3, [r3, #28]
    4ff2:	1ad3      	subs	r3, r2, r3
    4ff4:	e02e      	b.n	5054 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc4>
    4ff6:	2300      	movs	r3, #0
    4ff8:	e02c      	b.n	5054 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc4>
		} else {
			bool ready = false;
    4ffa:	231e      	movs	r3, #30
    4ffc:	18fb      	adds	r3, r7, r3
    4ffe:	2200      	movs	r2, #0
    5000:	701a      	strb	r2, [r3, #0]
			synchronized {
    5002:	230c      	movs	r3, #12
    5004:	18fb      	adds	r3, r7, r3
    5006:	0018      	movs	r0, r3
    5008:	f7ff fd3a 	bl	4a80 <_ZN7__GuardC1Ev>
    500c:	230c      	movs	r3, #12
    500e:	18fb      	adds	r3, r7, r3
    5010:	0018      	movs	r0, r3
    5012:	f7ff fd58 	bl	4ac6 <_ZN7__Guard5enterEv>
    5016:	0003      	movs	r3, r0
    5018:	1e5a      	subs	r2, r3, #1
    501a:	4193      	sbcs	r3, r2
    501c:	b2db      	uxtb	r3, r3
    501e:	2b00      	cmp	r3, #0
    5020:	d006      	beq.n	5030 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xa0>
				ready = ready1;
    5022:	231e      	movs	r3, #30
    5024:	18fb      	adds	r3, r7, r3
    5026:	687a      	ldr	r2, [r7, #4]
    5028:	2134      	movs	r1, #52	; 0x34
    502a:	5c52      	ldrb	r2, [r2, r1]
    502c:	701a      	strb	r2, [r3, #0]
			synchronized {
    502e:	e7ed      	b.n	500c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x7c>
    5030:	230c      	movs	r3, #12
    5032:	18fb      	adds	r3, r7, r3
    5034:	0018      	movs	r0, r3
    5036:	f7ff fd36 	bl	4aa6 <_ZN7__GuardD1Ev>
			}
			return ready ? (last1 - first1) : 0;
    503a:	231e      	movs	r3, #30
    503c:	18fb      	adds	r3, r7, r3
    503e:	781b      	ldrb	r3, [r3, #0]
    5040:	2b00      	cmp	r3, #0
    5042:	d005      	beq.n	5050 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc0>
    5044:	687b      	ldr	r3, [r7, #4]
    5046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    504c:	1ad3      	subs	r3, r2, r3
    504e:	e000      	b.n	5052 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0xc2>
    5050:	2300      	movs	r3, #0
    5052:	46c0      	nop			; (mov r8, r8)
		}
	}
    5054:	0018      	movs	r0, r3
    5056:	46bd      	mov	sp, r7
    5058:	b008      	add	sp, #32
    505a:	bd80      	pop	{r7, pc}

0000505c <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    505c:	b580      	push	{r7, lr}
    505e:	b082      	sub	sp, #8
    5060:	af00      	add	r7, sp, #0
    5062:	6078      	str	r0, [r7, #4]
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    5064:	687b      	ldr	r3, [r7, #4]
    5066:	685a      	ldr	r2, [r3, #4]
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	689b      	ldr	r3, [r3, #8]
    506c:	b2db      	uxtb	r3, r3
    506e:	0019      	movs	r1, r3
    5070:	0010      	movs	r0, r2
    5072:	f7ff fa2a 	bl	44ca <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
		usbd.epBank0SetMultiPacketSize(ep, size);
    5076:	687b      	ldr	r3, [r7, #4]
    5078:	6858      	ldr	r0, [r3, #4]
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	689b      	ldr	r3, [r3, #8]
    507e:	b2d9      	uxtb	r1, r3
    5080:	687b      	ldr	r3, [r7, #4]
    5082:	68db      	ldr	r3, [r3, #12]
    5084:	b29b      	uxth	r3, r3
    5086:	001a      	movs	r2, r3
    5088:	f7ff fb5c 	bl	4744 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
		usbd.epBank0SetByteCount(ep, 0);
    508c:	687b      	ldr	r3, [r7, #4]
    508e:	6858      	ldr	r0, [r3, #4]
    5090:	687b      	ldr	r3, [r7, #4]
    5092:	689b      	ldr	r3, [r3, #8]
    5094:	b2db      	uxtb	r3, r3
    5096:	2200      	movs	r2, #0
    5098:	0019      	movs	r1, r3
    509a:	f7ff fb10 	bl	46be <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
		usbd.epBank0ResetReady(ep);
    509e:	687b      	ldr	r3, [r7, #4]
    50a0:	685a      	ldr	r2, [r3, #4]
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	689b      	ldr	r3, [r3, #8]
    50a6:	b2db      	uxtb	r3, r3
    50a8:	0019      	movs	r1, r3
    50aa:	0010      	movs	r0, r2
    50ac:	f7ff fac6 	bl	463c <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>
	}
    50b0:	46c0      	nop			; (mov r8, r8)
    50b2:	46bd      	mov	sp, r7
    50b4:	b002      	add	sp, #8
    50b6:	bd80      	pop	{r7, pc}

000050b8 <UDD_Handler>:
static char isEndpointHalt = 0;

extern void (*gpf_isr)(void);

// USB_Handler ISR
extern "C" void UDD_Handler(void) {
    50b8:	b580      	push	{r7, lr}
    50ba:	af00      	add	r7, sp, #0
	USBDevice.ISRHandler();
    50bc:	4b03      	ldr	r3, [pc, #12]	; (50cc <UDD_Handler+0x14>)
    50be:	0018      	movs	r0, r3
    50c0:	f001 f910 	bl	62e4 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    50c4:	46c0      	nop			; (mov r8, r8)
    50c6:	46bd      	mov	sp, r7
    50c8:	bd80      	pop	{r7, pc}
    50ca:	46c0      	nop			; (mov r8, r8)
    50cc:	200008f0 	.word	0x200008f0

000050d0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    50d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50d2:	b08d      	sub	sp, #52	; 0x34
    50d4:	af00      	add	r7, sp, #0
    50d6:	61f8      	str	r0, [r7, #28]
    50d8:	61b9      	str	r1, [r7, #24]
    50da:	0011      	movs	r1, r2
    50dc:	2217      	movs	r2, #23
    50de:	18ba      	adds	r2, r7, r2
    50e0:	7011      	strb	r1, [r2, #0]
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
    50e2:	466a      	mov	r2, sp
    50e4:	613a      	str	r2, [r7, #16]
	if (maxlen < 2)
    50e6:	2217      	movs	r2, #23
    50e8:	18ba      	adds	r2, r7, r2
    50ea:	7812      	ldrb	r2, [r2, #0]
    50ec:	2a01      	cmp	r2, #1
    50ee:	dc01      	bgt.n	50f4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x24>
		return false;
    50f0:	2300      	movs	r3, #0
    50f2:	e092      	b.n	521a <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x14a>
	uint8_t buffer[maxlen];
    50f4:	2217      	movs	r2, #23
    50f6:	18ba      	adds	r2, r7, r2
    50f8:	7812      	ldrb	r2, [r2, #0]
    50fa:	3a01      	subs	r2, #1
    50fc:	62ba      	str	r2, [r7, #40]	; 0x28
    50fe:	0011      	movs	r1, r2
    5100:	3101      	adds	r1, #1
    5102:	60b9      	str	r1, [r7, #8]
    5104:	2100      	movs	r1, #0
    5106:	60f9      	str	r1, [r7, #12]
    5108:	68b9      	ldr	r1, [r7, #8]
    510a:	0f49      	lsrs	r1, r1, #29
    510c:	68f8      	ldr	r0, [r7, #12]
    510e:	00c6      	lsls	r6, r0, #3
    5110:	430e      	orrs	r6, r1
    5112:	68b9      	ldr	r1, [r7, #8]
    5114:	00cd      	lsls	r5, r1, #3
    5116:	0011      	movs	r1, r2
    5118:	3101      	adds	r1, #1
    511a:	6039      	str	r1, [r7, #0]
    511c:	2100      	movs	r1, #0
    511e:	6079      	str	r1, [r7, #4]
    5120:	683d      	ldr	r5, [r7, #0]
    5122:	687e      	ldr	r6, [r7, #4]
    5124:	0029      	movs	r1, r5
    5126:	0f49      	lsrs	r1, r1, #29
    5128:	0030      	movs	r0, r6
    512a:	00c4      	lsls	r4, r0, #3
    512c:	430c      	orrs	r4, r1
    512e:	0029      	movs	r1, r5
    5130:	00cb      	lsls	r3, r1, #3
    5132:	0013      	movs	r3, r2
    5134:	3301      	adds	r3, #1
    5136:	3307      	adds	r3, #7
    5138:	08db      	lsrs	r3, r3, #3
    513a:	00db      	lsls	r3, r3, #3
    513c:	466a      	mov	r2, sp
    513e:	1ad3      	subs	r3, r2, r3
    5140:	469d      	mov	sp, r3
    5142:	466b      	mov	r3, sp
    5144:	3300      	adds	r3, #0
    5146:	627b      	str	r3, [r7, #36]	; 0x24
	buffer[0] = strlen((const char*)string) * 2 + 2;
    5148:	69bb      	ldr	r3, [r7, #24]
    514a:	0018      	movs	r0, r3
    514c:	f00c fa3a 	bl	115c4 <strlen>
    5150:	0003      	movs	r3, r0
    5152:	3301      	adds	r3, #1
    5154:	b2db      	uxtb	r3, r3
    5156:	18db      	adds	r3, r3, r3
    5158:	b2da      	uxtb	r2, r3
    515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    515c:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x03;
    515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5160:	2203      	movs	r2, #3
    5162:	705a      	strb	r2, [r3, #1]
	for (i = 2; i < maxlen && *string; i++) {
    5164:	231f      	movs	r3, #31
    5166:	2210      	movs	r2, #16
    5168:	4694      	mov	ip, r2
    516a:	44bc      	add	ip, r7
    516c:	4463      	add	r3, ip
    516e:	2202      	movs	r2, #2
    5170:	701a      	strb	r2, [r3, #0]
    5172:	231f      	movs	r3, #31
    5174:	2210      	movs	r2, #16
    5176:	4694      	mov	ip, r2
    5178:	44bc      	add	ip, r7
    517a:	4463      	add	r3, ip
    517c:	781a      	ldrb	r2, [r3, #0]
    517e:	2317      	movs	r3, #23
    5180:	18fb      	adds	r3, r7, r3
    5182:	781b      	ldrb	r3, [r3, #0]
    5184:	429a      	cmp	r2, r3
    5186:	da39      	bge.n	51fc <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12c>
    5188:	69bb      	ldr	r3, [r7, #24]
    518a:	781b      	ldrb	r3, [r3, #0]
    518c:	2b00      	cmp	r3, #0
    518e:	d035      	beq.n	51fc <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12c>
		buffer[i++] = *string++;
    5190:	231f      	movs	r3, #31
    5192:	2210      	movs	r2, #16
    5194:	4694      	mov	ip, r2
    5196:	44bc      	add	ip, r7
    5198:	4463      	add	r3, ip
    519a:	781b      	ldrb	r3, [r3, #0]
    519c:	221f      	movs	r2, #31
    519e:	2110      	movs	r1, #16
    51a0:	468c      	mov	ip, r1
    51a2:	44bc      	add	ip, r7
    51a4:	4462      	add	r2, ip
    51a6:	1c59      	adds	r1, r3, #1
    51a8:	7011      	strb	r1, [r2, #0]
    51aa:	0019      	movs	r1, r3
    51ac:	69bb      	ldr	r3, [r7, #24]
    51ae:	1c5a      	adds	r2, r3, #1
    51b0:	61ba      	str	r2, [r7, #24]
    51b2:	781a      	ldrb	r2, [r3, #0]
    51b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51b6:	545a      	strb	r2, [r3, r1]
		if (i == maxlen) break;
    51b8:	231f      	movs	r3, #31
    51ba:	2210      	movs	r2, #16
    51bc:	18ba      	adds	r2, r7, r2
    51be:	18d2      	adds	r2, r2, r3
    51c0:	2317      	movs	r3, #23
    51c2:	18fb      	adds	r3, r7, r3
    51c4:	7812      	ldrb	r2, [r2, #0]
    51c6:	781b      	ldrb	r3, [r3, #0]
    51c8:	429a      	cmp	r2, r3
    51ca:	d016      	beq.n	51fa <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x12a>
		buffer[i] = 0;
    51cc:	231f      	movs	r3, #31
    51ce:	2210      	movs	r2, #16
    51d0:	4694      	mov	ip, r2
    51d2:	44bc      	add	ip, r7
    51d4:	4463      	add	r3, ip
    51d6:	781b      	ldrb	r3, [r3, #0]
    51d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    51da:	2100      	movs	r1, #0
    51dc:	54d1      	strb	r1, [r2, r3]
	for (i = 2; i < maxlen && *string; i++) {
    51de:	231f      	movs	r3, #31
    51e0:	2210      	movs	r2, #16
    51e2:	4694      	mov	ip, r2
    51e4:	44bc      	add	ip, r7
    51e6:	4463      	add	r3, ip
    51e8:	781a      	ldrb	r2, [r3, #0]
    51ea:	231f      	movs	r3, #31
    51ec:	2110      	movs	r1, #16
    51ee:	468c      	mov	ip, r1
    51f0:	44bc      	add	ip, r7
    51f2:	4463      	add	r3, ip
    51f4:	3201      	adds	r2, #1
    51f6:	701a      	strb	r2, [r3, #0]
    51f8:	e7bb      	b.n	5172 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0xa2>
		if (i == maxlen) break;
    51fa:	46c0      	nop			; (mov r8, r8)
	return USBDevice.sendControl(buffer, i);
    51fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
    51fe:	231f      	movs	r3, #31
    5200:	2210      	movs	r2, #16
    5202:	4694      	mov	ip, r2
    5204:	44bc      	add	ip, r7
    5206:	4463      	add	r3, ip
    5208:	781a      	ldrb	r2, [r3, #0]
    520a:	4b07      	ldr	r3, [pc, #28]	; (5228 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x158>)
    520c:	0018      	movs	r0, r3
    520e:	f000 ff1d 	bl	604c <_ZN14USBDeviceClass11sendControlEPKvm>
    5212:	0003      	movs	r3, r0
    5214:	1e5a      	subs	r2, r3, #1
    5216:	4193      	sbcs	r3, r2
    5218:	b2db      	uxtb	r3, r3
    521a:	693a      	ldr	r2, [r7, #16]
    521c:	4695      	mov	sp, r2
}
    521e:	0018      	movs	r0, r3
    5220:	46bd      	mov	sp, r7
    5222:	b00d      	add	sp, #52	; 0x34
    5224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	200008f0 	.word	0x200008f0

0000522c <_ZN14USBDeviceClass12packMessagesEb>:
bool _pack_message = false;
uint16_t _pack_size = 0;
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
    522c:	b580      	push	{r7, lr}
    522e:	b082      	sub	sp, #8
    5230:	af00      	add	r7, sp, #0
    5232:	6078      	str	r0, [r7, #4]
    5234:	000a      	movs	r2, r1
    5236:	1cfb      	adds	r3, r7, #3
    5238:	701a      	strb	r2, [r3, #0]
	if (val) {
    523a:	1cfb      	adds	r3, r7, #3
    523c:	781b      	ldrb	r3, [r3, #0]
    523e:	2b00      	cmp	r3, #0
    5240:	d006      	beq.n	5250 <_ZN14USBDeviceClass12packMessagesEb+0x24>
		_pack_message = true;
    5242:	4b0b      	ldr	r3, [pc, #44]	; (5270 <_ZN14USBDeviceClass12packMessagesEb+0x44>)
    5244:	2201      	movs	r2, #1
    5246:	701a      	strb	r2, [r3, #0]
		_pack_size = 0;
    5248:	4b0a      	ldr	r3, [pc, #40]	; (5274 <_ZN14USBDeviceClass12packMessagesEb+0x48>)
    524a:	2200      	movs	r2, #0
    524c:	801a      	strh	r2, [r3, #0]
	} else {
		_pack_message = false;
		sendControl(_pack_buffer, _pack_size);
	}
}
    524e:	e00a      	b.n	5266 <_ZN14USBDeviceClass12packMessagesEb+0x3a>
		_pack_message = false;
    5250:	4b07      	ldr	r3, [pc, #28]	; (5270 <_ZN14USBDeviceClass12packMessagesEb+0x44>)
    5252:	2200      	movs	r2, #0
    5254:	701a      	strb	r2, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    5256:	4b07      	ldr	r3, [pc, #28]	; (5274 <_ZN14USBDeviceClass12packMessagesEb+0x48>)
    5258:	881b      	ldrh	r3, [r3, #0]
    525a:	001a      	movs	r2, r3
    525c:	4906      	ldr	r1, [pc, #24]	; (5278 <_ZN14USBDeviceClass12packMessagesEb+0x4c>)
    525e:	687b      	ldr	r3, [r7, #4]
    5260:	0018      	movs	r0, r3
    5262:	f000 fef3 	bl	604c <_ZN14USBDeviceClass11sendControlEPKvm>
}
    5266:	46c0      	nop			; (mov r8, r8)
    5268:	46bd      	mov	sp, r7
    526a:	b002      	add	sp, #8
    526c:	bd80      	pop	{r7, pc}
    526e:	46c0      	nop			; (mov r8, r8)
    5270:	200007e5 	.word	0x200007e5
    5274:	200007e6 	.word	0x200007e6
    5278:	200007e8 	.word	0x200007e8

0000527c <_ZN14USBDeviceClass14SendInterfacesEPm>:

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
    527c:	b580      	push	{r7, lr}
    527e:	b084      	sub	sp, #16
    5280:	af00      	add	r7, sp, #0
    5282:	6078      	str	r0, [r7, #4]
    5284:	6039      	str	r1, [r7, #0]
	uint8_t interfaces = 0;
    5286:	230f      	movs	r3, #15
    5288:	18fb      	adds	r3, r7, r3
    528a:	2200      	movs	r2, #0
    528c:	701a      	strb	r2, [r3, #0]

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    528e:	230f      	movs	r3, #15
    5290:	18fb      	adds	r3, r7, r3
    5292:	0018      	movs	r0, r3
    5294:	f009 f91c 	bl	e4d0 <_Z16CDC_GetInterfacePh>
    5298:	0002      	movs	r2, r0
    529a:	683b      	ldr	r3, [r7, #0]
    529c:	681b      	ldr	r3, [r3, #0]
    529e:	189a      	adds	r2, r3, r2
    52a0:	683b      	ldr	r3, [r7, #0]
    52a2:	601a      	str	r2, [r3, #0]
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
    52a4:	f009 faf2 	bl	e88c <_Z12PluggableUSBv>
    52a8:	0002      	movs	r2, r0
    52aa:	230f      	movs	r3, #15
    52ac:	18fb      	adds	r3, r7, r3
    52ae:	0019      	movs	r1, r3
    52b0:	0010      	movs	r0, r2
    52b2:	f009 fa5b 	bl	e76c <_ZN13PluggableUSB_12getInterfaceEPh>
    52b6:	0002      	movs	r2, r0
    52b8:	683b      	ldr	r3, [r7, #0]
    52ba:	681b      	ldr	r3, [r3, #0]
    52bc:	189a      	adds	r2, r3, r2
    52be:	683b      	ldr	r3, [r7, #0]
    52c0:	601a      	str	r2, [r3, #0]
#endif

	return interfaces;
    52c2:	230f      	movs	r3, #15
    52c4:	18fb      	adds	r3, r7, r3
    52c6:	781b      	ldrb	r3, [r3, #0]
}
    52c8:	0018      	movs	r0, r3
    52ca:	46bd      	mov	sp, r7
    52cc:	b004      	add	sp, #16
    52ce:	bd80      	pop	{r7, pc}

000052d0 <_ZN14USBDeviceClass17sendConfigurationEm>:

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    52d0:	b590      	push	{r4, r7, lr}
    52d2:	b089      	sub	sp, #36	; 0x24
    52d4:	af00      	add	r7, sp, #0
    52d6:	6078      	str	r0, [r7, #4]
    52d8:	6039      	str	r1, [r7, #0]
	uint32_t total = 0;
    52da:	2300      	movs	r3, #0
    52dc:	61bb      	str	r3, [r7, #24]
	// Count and measure interfaces
	_dry_run = true;
    52de:	4b32      	ldr	r3, [pc, #200]	; (53a8 <_ZN14USBDeviceClass17sendConfigurationEm+0xd8>)
    52e0:	2201      	movs	r2, #1
    52e2:	701a      	strb	r2, [r3, #0]
	uint8_t interfaces = SendInterfaces(&total);
    52e4:	231f      	movs	r3, #31
    52e6:	18fc      	adds	r4, r7, r3
    52e8:	2318      	movs	r3, #24
    52ea:	18fa      	adds	r2, r7, r3
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	0011      	movs	r1, r2
    52f0:	0018      	movs	r0, r3
    52f2:	f7ff ffc3 	bl	527c <_ZN14USBDeviceClass14SendInterfacesEPm>
    52f6:	0003      	movs	r3, r0
    52f8:	7023      	strb	r3, [r4, #0]

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    52fa:	230c      	movs	r3, #12
    52fc:	18fb      	adds	r3, r7, r3
    52fe:	0018      	movs	r0, r3
    5300:	2309      	movs	r3, #9
    5302:	001a      	movs	r2, r3
    5304:	2100      	movs	r1, #0
    5306:	f00b fac7 	bl	10898 <memset>
    530a:	230c      	movs	r3, #12
    530c:	18fb      	adds	r3, r7, r3
    530e:	2209      	movs	r2, #9
    5310:	701a      	strb	r2, [r3, #0]
    5312:	230c      	movs	r3, #12
    5314:	18fb      	adds	r3, r7, r3
    5316:	2202      	movs	r2, #2
    5318:	705a      	strb	r2, [r3, #1]
    531a:	230c      	movs	r3, #12
    531c:	18fb      	adds	r3, r7, r3
    531e:	2201      	movs	r2, #1
    5320:	715a      	strb	r2, [r3, #5]
    5322:	230c      	movs	r3, #12
    5324:	18fb      	adds	r3, r7, r3
    5326:	22a0      	movs	r2, #160	; 0xa0
    5328:	71da      	strb	r2, [r3, #7]
    532a:	230c      	movs	r3, #12
    532c:	18fb      	adds	r3, r7, r3
    532e:	22fa      	movs	r2, #250	; 0xfa
    5330:	721a      	strb	r2, [r3, #8]
    5332:	69bb      	ldr	r3, [r7, #24]
    5334:	b29b      	uxth	r3, r3
    5336:	3309      	adds	r3, #9
    5338:	b29a      	uxth	r2, r3
    533a:	230c      	movs	r3, #12
    533c:	18fb      	adds	r3, r7, r3
    533e:	805a      	strh	r2, [r3, #2]
    5340:	230c      	movs	r3, #12
    5342:	18fb      	adds	r3, r7, r3
    5344:	221f      	movs	r2, #31
    5346:	18ba      	adds	r2, r7, r2
    5348:	7812      	ldrb	r2, [r2, #0]
    534a:	711a      	strb	r2, [r3, #4]
	_Pragma("pack()")

	//	Now send them
	_dry_run = false;
    534c:	4b16      	ldr	r3, [pc, #88]	; (53a8 <_ZN14USBDeviceClass17sendConfigurationEm+0xd8>)
    534e:	2200      	movs	r2, #0
    5350:	701a      	strb	r2, [r3, #0]

	if (maxlen == sizeof(ConfigDescriptor)) {
    5352:	683b      	ldr	r3, [r7, #0]
    5354:	2b09      	cmp	r3, #9
    5356:	d108      	bne.n	536a <_ZN14USBDeviceClass17sendConfigurationEm+0x9a>
		sendControl(&config, sizeof(ConfigDescriptor));
    5358:	230c      	movs	r3, #12
    535a:	18f9      	adds	r1, r7, r3
    535c:	687b      	ldr	r3, [r7, #4]
    535e:	2209      	movs	r2, #9
    5360:	0018      	movs	r0, r3
    5362:	f000 fe73 	bl	604c <_ZN14USBDeviceClass11sendControlEPKvm>
		return true;
    5366:	2301      	movs	r3, #1
    5368:	e01a      	b.n	53a0 <_ZN14USBDeviceClass17sendConfigurationEm+0xd0>
	}

	total = 0;
    536a:	2300      	movs	r3, #0
    536c:	61bb      	str	r3, [r7, #24]

	packMessages(true);
    536e:	687b      	ldr	r3, [r7, #4]
    5370:	2101      	movs	r1, #1
    5372:	0018      	movs	r0, r3
    5374:	f7ff ff5a 	bl	522c <_ZN14USBDeviceClass12packMessagesEb>
	sendControl(&config, sizeof(ConfigDescriptor));
    5378:	230c      	movs	r3, #12
    537a:	18f9      	adds	r1, r7, r3
    537c:	687b      	ldr	r3, [r7, #4]
    537e:	2209      	movs	r2, #9
    5380:	0018      	movs	r0, r3
    5382:	f000 fe63 	bl	604c <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    5386:	2318      	movs	r3, #24
    5388:	18fa      	adds	r2, r7, r3
    538a:	687b      	ldr	r3, [r7, #4]
    538c:	0011      	movs	r1, r2
    538e:	0018      	movs	r0, r3
    5390:	f7ff ff74 	bl	527c <_ZN14USBDeviceClass14SendInterfacesEPm>
	packMessages(false);
    5394:	687b      	ldr	r3, [r7, #4]
    5396:	2100      	movs	r1, #0
    5398:	0018      	movs	r0, r3
    539a:	f7ff ff47 	bl	522c <_ZN14USBDeviceClass12packMessagesEb>

	return true;
    539e:	2301      	movs	r3, #1
}
    53a0:	0018      	movs	r0, r3
    53a2:	46bd      	mov	sp, r7
    53a4:	b009      	add	sp, #36	; 0x24
    53a6:	bd90      	pop	{r4, r7, pc}
    53a8:	200007e4 	.word	0x200007e4

000053ac <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
    53ac:	b580      	push	{r7, lr}
    53ae:	b084      	sub	sp, #16
    53b0:	af00      	add	r7, sp, #0
    53b2:	6078      	str	r0, [r7, #4]
    53b4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 8; i++) {
    53b6:	2300      	movs	r3, #0
    53b8:	60fb      	str	r3, [r7, #12]
    53ba:	68fb      	ldr	r3, [r7, #12]
    53bc:	2b07      	cmp	r3, #7
    53be:	dc1d      	bgt.n	53fc <_ZL5utox8mPc+0x50>
		int d = val & 0XF;
    53c0:	687b      	ldr	r3, [r7, #4]
    53c2:	220f      	movs	r2, #15
    53c4:	4013      	ands	r3, r2
    53c6:	60bb      	str	r3, [r7, #8]
		val = (val >> 4);
    53c8:	687b      	ldr	r3, [r7, #4]
    53ca:	091b      	lsrs	r3, r3, #4
    53cc:	607b      	str	r3, [r7, #4]

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    53ce:	68fb      	ldr	r3, [r7, #12]
    53d0:	2207      	movs	r2, #7
    53d2:	1ad3      	subs	r3, r2, r3
    53d4:	001a      	movs	r2, r3
    53d6:	683b      	ldr	r3, [r7, #0]
    53d8:	189a      	adds	r2, r3, r2
    53da:	68bb      	ldr	r3, [r7, #8]
    53dc:	2b09      	cmp	r3, #9
    53de:	dd04      	ble.n	53ea <_ZL5utox8mPc+0x3e>
    53e0:	68bb      	ldr	r3, [r7, #8]
    53e2:	b2db      	uxtb	r3, r3
    53e4:	3337      	adds	r3, #55	; 0x37
    53e6:	b2db      	uxtb	r3, r3
    53e8:	e003      	b.n	53f2 <_ZL5utox8mPc+0x46>
    53ea:	68bb      	ldr	r3, [r7, #8]
    53ec:	b2db      	uxtb	r3, r3
    53ee:	3330      	adds	r3, #48	; 0x30
    53f0:	b2db      	uxtb	r3, r3
    53f2:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < 8; i++) {
    53f4:	68fb      	ldr	r3, [r7, #12]
    53f6:	3301      	adds	r3, #1
    53f8:	60fb      	str	r3, [r7, #12]
    53fa:	e7de      	b.n	53ba <_ZL5utox8mPc+0xe>
	}
}
    53fc:	46c0      	nop			; (mov r8, r8)
    53fe:	46bd      	mov	sp, r7
    5400:	b004      	add	sp, #16
    5402:	bd80      	pop	{r7, pc}

00005404 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    5404:	b580      	push	{r7, lr}
    5406:	b098      	sub	sp, #96	; 0x60
    5408:	af00      	add	r7, sp, #0
    540a:	6078      	str	r0, [r7, #4]
    540c:	6039      	str	r1, [r7, #0]
	uint8_t t = setup.wValueH;
    540e:	2357      	movs	r3, #87	; 0x57
    5410:	18fb      	adds	r3, r7, r3
    5412:	683a      	ldr	r2, [r7, #0]
    5414:	78d2      	ldrb	r2, [r2, #3]
    5416:	701a      	strb	r2, [r3, #0]
	uint8_t desc_length = 0;
    5418:	235f      	movs	r3, #95	; 0x5f
    541a:	18fb      	adds	r3, r7, r3
    541c:	2200      	movs	r2, #0
    541e:	701a      	strb	r2, [r3, #0]
	bool _cdcComposite;
	int ret;
	const uint8_t *desc_addr = 0;
    5420:	2300      	movs	r3, #0
    5422:	65bb      	str	r3, [r7, #88]	; 0x58

	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    5424:	2357      	movs	r3, #87	; 0x57
    5426:	18fb      	adds	r3, r7, r3
    5428:	781b      	ldrb	r3, [r3, #0]
    542a:	2b02      	cmp	r3, #2
    542c:	d10c      	bne.n	5448 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x44>
	{
		return USBDevice.sendConfiguration(setup.wLength);
    542e:	683b      	ldr	r3, [r7, #0]
    5430:	88db      	ldrh	r3, [r3, #6]
    5432:	001a      	movs	r2, r3
    5434:	4b67      	ldr	r3, [pc, #412]	; (55d4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d0>)
    5436:	0011      	movs	r1, r2
    5438:	0018      	movs	r0, r3
    543a:	f7ff ff49 	bl	52d0 <_ZN14USBDeviceClass17sendConfigurationEm>
    543e:	0003      	movs	r3, r0
    5440:	1e5a      	subs	r2, r3, #1
    5442:	4193      	sbcs	r3, r2
    5444:	b2db      	uxtb	r3, r3
    5446:	e0c1      	b.n	55cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}

#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    5448:	f009 fa20 	bl	e88c <_Z12PluggableUSBv>
    544c:	0002      	movs	r2, r0
    544e:	683b      	ldr	r3, [r7, #0]
    5450:	0019      	movs	r1, r3
    5452:	0010      	movs	r0, r2
    5454:	f009 f9b4 	bl	e7c0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    5458:	0003      	movs	r3, r0
    545a:	653b      	str	r3, [r7, #80]	; 0x50
	if (ret != 0) {
    545c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    545e:	2b00      	cmp	r3, #0
    5460:	d005      	beq.n	546e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x6a>
		return (ret > 0 ? true : false);
    5462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5464:	17da      	asrs	r2, r3, #31
    5466:	1ad3      	subs	r3, r2, r3
    5468:	0fdb      	lsrs	r3, r3, #31
    546a:	b2db      	uxtb	r3, r3
    546c:	e0ae      	b.n	55cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}
#endif

	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    546e:	2357      	movs	r3, #87	; 0x57
    5470:	18fb      	adds	r3, r7, r3
    5472:	781b      	ldrb	r3, [r3, #0]
    5474:	2b01      	cmp	r3, #1
    5476:	d11e      	bne.n	54b6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb2>
	{
		if (setup.wLength == 8)
    5478:	683b      	ldr	r3, [r7, #0]
    547a:	88db      	ldrh	r3, [r3, #6]
    547c:	2b08      	cmp	r3, #8
    547e:	d103      	bne.n	5488 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
			_cdcComposite = 1;
    5480:	235e      	movs	r3, #94	; 0x5e
    5482:	18fb      	adds	r3, r7, r3
    5484:	2201      	movs	r2, #1
    5486:	701a      	strb	r2, [r3, #0]

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;
    5488:	235e      	movs	r3, #94	; 0x5e
    548a:	18fb      	adds	r3, r7, r3
    548c:	781b      	ldrb	r3, [r3, #0]
    548e:	2b00      	cmp	r3, #0
    5490:	d001      	beq.n	5496 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x92>
    5492:	4b51      	ldr	r3, [pc, #324]	; (55d8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d4>)
    5494:	e000      	b.n	5498 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
    5496:	4b51      	ldr	r3, [pc, #324]	; (55dc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1d8>)
    5498:	65bb      	str	r3, [r7, #88]	; 0x58

		if (*desc_addr > setup.wLength) {
    549a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    549c:	781b      	ldrb	r3, [r3, #0]
    549e:	001a      	movs	r2, r3
    54a0:	683b      	ldr	r3, [r7, #0]
    54a2:	88db      	ldrh	r3, [r3, #6]
    54a4:	429a      	cmp	r2, r3
    54a6:	dc00      	bgt.n	54aa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa6>
    54a8:	e078      	b.n	559c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
			desc_length = setup.wLength;
    54aa:	683b      	ldr	r3, [r7, #0]
    54ac:	88da      	ldrh	r2, [r3, #6]
    54ae:	235f      	movs	r3, #95	; 0x5f
    54b0:	18fb      	adds	r3, r7, r3
    54b2:	701a      	strb	r2, [r3, #0]
    54b4:	e072      	b.n	559c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    54b6:	2357      	movs	r3, #87	; 0x57
    54b8:	18fb      	adds	r3, r7, r3
    54ba:	781b      	ldrb	r3, [r3, #0]
    54bc:	2b03      	cmp	r3, #3
    54be:	d000      	beq.n	54c2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xbe>
    54c0:	e06c      	b.n	559c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
	{
		if (setup.wValueL == 0) {
    54c2:	683b      	ldr	r3, [r7, #0]
    54c4:	789b      	ldrb	r3, [r3, #2]
    54c6:	2b00      	cmp	r3, #0
    54c8:	d109      	bne.n	54de <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xda>
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
    54ca:	4b45      	ldr	r3, [pc, #276]	; (55e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1dc>)
    54cc:	65bb      	str	r3, [r7, #88]	; 0x58
#endif
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
    54ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    54d0:	781b      	ldrb	r3, [r3, #0]
    54d2:	001a      	movs	r2, r3
    54d4:	683b      	ldr	r3, [r7, #0]
    54d6:	88db      	ldrh	r3, [r3, #6]
    54d8:	429a      	cmp	r2, r3
    54da:	dd5f      	ble.n	559c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x198>
    54dc:	e059      	b.n	5592 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x18e>
		else if (setup.wValueL == IPRODUCT) {
    54de:	683b      	ldr	r3, [r7, #0]
    54e0:	789b      	ldrb	r3, [r3, #2]
    54e2:	2b02      	cmp	r3, #2
    54e4:	d109      	bne.n	54fa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xf6>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    54e6:	683b      	ldr	r3, [r7, #0]
    54e8:	88db      	ldrh	r3, [r3, #6]
    54ea:	b2da      	uxtb	r2, r3
    54ec:	493d      	ldr	r1, [pc, #244]	; (55e4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e0>)
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	0018      	movs	r0, r3
    54f2:	f7ff fded 	bl	50d0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    54f6:	0003      	movs	r3, r0
    54f8:	e068      	b.n	55cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
		else if (setup.wValueL == IMANUFACTURER) {
    54fa:	683b      	ldr	r3, [r7, #0]
    54fc:	789b      	ldrb	r3, [r3, #2]
    54fe:	2b01      	cmp	r3, #1
    5500:	d109      	bne.n	5516 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x112>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    5502:	683b      	ldr	r3, [r7, #0]
    5504:	88db      	ldrh	r3, [r3, #6]
    5506:	b2da      	uxtb	r2, r3
    5508:	4937      	ldr	r1, [pc, #220]	; (55e8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e4>)
    550a:	687b      	ldr	r3, [r7, #4]
    550c:	0018      	movs	r0, r3
    550e:	f7ff fddf 	bl	50d0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    5512:	0003      	movs	r3, r0
    5514:	e05a      	b.n	55cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
		else if (setup.wValueL == ISERIAL) {
    5516:	683b      	ldr	r3, [r7, #0]
    5518:	789b      	ldrb	r3, [r3, #2]
    551a:	2b03      	cmp	r3, #3
    551c:	d137      	bne.n	558e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x18a>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    551e:	4b33      	ldr	r3, [pc, #204]	; (55ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e8>)
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	220c      	movs	r2, #12
    5524:	18ba      	adds	r2, r7, r2
    5526:	0011      	movs	r1, r2
    5528:	0018      	movs	r0, r3
    552a:	f7ff ff3f 	bl	53ac <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    552e:	4b30      	ldr	r3, [pc, #192]	; (55f0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1ec>)
    5530:	681a      	ldr	r2, [r3, #0]
    5532:	230c      	movs	r3, #12
    5534:	18fb      	adds	r3, r7, r3
    5536:	3308      	adds	r3, #8
    5538:	0019      	movs	r1, r3
    553a:	0010      	movs	r0, r2
    553c:	f7ff ff36 	bl	53ac <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    5540:	4b2c      	ldr	r3, [pc, #176]	; (55f4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1f0>)
    5542:	681a      	ldr	r2, [r3, #0]
    5544:	230c      	movs	r3, #12
    5546:	18fb      	adds	r3, r7, r3
    5548:	3310      	adds	r3, #16
    554a:	0019      	movs	r1, r3
    554c:	0010      	movs	r0, r2
    554e:	f7ff ff2d 	bl	53ac <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    5552:	4b29      	ldr	r3, [pc, #164]	; (55f8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1f4>)
    5554:	681a      	ldr	r2, [r3, #0]
    5556:	230c      	movs	r3, #12
    5558:	18fb      	adds	r3, r7, r3
    555a:	3318      	adds	r3, #24
    555c:	0019      	movs	r1, r3
    555e:	0010      	movs	r0, r2
    5560:	f7ff ff24 	bl	53ac <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    5564:	f009 f992 	bl	e88c <_Z12PluggableUSBv>
    5568:	0002      	movs	r2, r0
    556a:	230c      	movs	r3, #12
    556c:	18fb      	adds	r3, r7, r3
    556e:	3320      	adds	r3, #32
    5570:	0019      	movs	r1, r3
    5572:	0010      	movs	r0, r2
    5574:	f009 f947 	bl	e806 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    5578:	683b      	ldr	r3, [r7, #0]
    557a:	88db      	ldrh	r3, [r3, #6]
    557c:	b2da      	uxtb	r2, r3
    557e:	230c      	movs	r3, #12
    5580:	18f9      	adds	r1, r7, r3
    5582:	687b      	ldr	r3, [r7, #4]
    5584:	0018      	movs	r0, r3
    5586:	f7ff fda3 	bl	50d0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    558a:	0003      	movs	r3, r0
    558c:	e01e      	b.n	55cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
			return false;
    558e:	2300      	movs	r3, #0
    5590:	e01c      	b.n	55cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
			desc_length = setup.wLength;
    5592:	683b      	ldr	r3, [r7, #0]
    5594:	88da      	ldrh	r2, [r3, #6]
    5596:	235f      	movs	r3, #95	; 0x5f
    5598:	18fb      	adds	r3, r7, r3
    559a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}

	if (desc_addr == 0) {
    559c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    559e:	2b00      	cmp	r3, #0
    55a0:	d101      	bne.n	55a6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1a2>
		return false;
    55a2:	2300      	movs	r3, #0
    55a4:	e012      	b.n	55cc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c8>
	}

	if (desc_length == 0) {
    55a6:	235f      	movs	r3, #95	; 0x5f
    55a8:	18fb      	adds	r3, r7, r3
    55aa:	781b      	ldrb	r3, [r3, #0]
    55ac:	2b00      	cmp	r3, #0
    55ae:	d104      	bne.n	55ba <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1b6>
		desc_length = *desc_addr;
    55b0:	235f      	movs	r3, #95	; 0x5f
    55b2:	18fb      	adds	r3, r7, r3
    55b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
    55b6:	7812      	ldrb	r2, [r2, #0]
    55b8:	701a      	strb	r2, [r3, #0]
	}

	sendControl(desc_addr, desc_length);
    55ba:	235f      	movs	r3, #95	; 0x5f
    55bc:	18fb      	adds	r3, r7, r3
    55be:	781a      	ldrb	r2, [r3, #0]
    55c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
    55c2:	687b      	ldr	r3, [r7, #4]
    55c4:	0018      	movs	r0, r3
    55c6:	f000 fd41 	bl	604c <_ZN14USBDeviceClass11sendControlEPKvm>

	return true;
    55ca:	2301      	movs	r3, #1
}
    55cc:	0018      	movs	r0, r3
    55ce:	46bd      	mov	sp, r7
    55d0:	b018      	add	sp, #96	; 0x60
    55d2:	bd80      	pop	{r7, pc}
    55d4:	200008f0 	.word	0x200008f0
    55d8:	000134e4 	.word	0x000134e4
    55dc:	000134f8 	.word	0x000134f8
    55e0:	000134c4 	.word	0x000134c4
    55e4:	000134c8 	.word	0x000134c8
    55e8:	000134d8 	.word	0x000134d8
    55ec:	0080a00c 	.word	0x0080a00c
    55f0:	0080a040 	.word	0x0080a040
    55f4:	0080a044 	.word	0x0080a044
    55f8:	0080a048 	.word	0x0080a048

000055fc <_ZN14USBDeviceClass14handleEndpointEh>:
	usbd.noRunInStandby();
}


void USBDeviceClass::handleEndpoint(uint8_t ep)
{
    55fc:	b580      	push	{r7, lr}
    55fe:	b082      	sub	sp, #8
    5600:	af00      	add	r7, sp, #0
    5602:	6078      	str	r0, [r7, #4]
    5604:	000a      	movs	r2, r1
    5606:	1cfb      	adds	r3, r7, #3
    5608:	701a      	strb	r2, [r3, #0]
#if defined(CDC_ENABLED)
	if (ep == CDC_ENDPOINT_IN)
    560a:	1cfb      	adds	r3, r7, #3
    560c:	781b      	ldrb	r3, [r3, #0]
    560e:	2b03      	cmp	r3, #3
    5610:	d109      	bne.n	5626 <_ZN14USBDeviceClass14handleEndpointEh+0x2a>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_IN);
    5612:	4b0e      	ldr	r3, [pc, #56]	; (564c <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    5614:	2103      	movs	r1, #3
    5616:	0018      	movs	r0, r3
    5618:	f7ff f826 	bl	4668 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_IN);
    561c:	4b0b      	ldr	r3, [pc, #44]	; (564c <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    561e:	2103      	movs	r1, #3
    5620:	0018      	movs	r0, r3
    5622:	f7fe ff25 	bl	4470 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
	if (ep == CDC_ENDPOINT_ACM)
    5626:	1cfb      	adds	r3, r7, #3
    5628:	781b      	ldrb	r3, [r3, #0]
    562a:	2b01      	cmp	r3, #1
    562c:	d109      	bne.n	5642 <_ZN14USBDeviceClass14handleEndpointEh+0x46>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_ACM);
    562e:	4b07      	ldr	r3, [pc, #28]	; (564c <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    5630:	2101      	movs	r1, #1
    5632:	0018      	movs	r0, r3
    5634:	f7ff f818 	bl	4668 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_ACM);
    5638:	4b04      	ldr	r3, [pc, #16]	; (564c <_ZN14USBDeviceClass14handleEndpointEh+0x50>)
    563a:	2101      	movs	r1, #1
    563c:	0018      	movs	r0, r3
    563e:	f7fe ff17 	bl	4470 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
#endif

#if defined(PLUGGABLE_USB_ENABLED)
	// Empty
#endif
}
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	46bd      	mov	sp, r7
    5646:	b002      	add	sp, #8
    5648:	bd80      	pop	{r7, pc}
    564a:	46c0      	nop			; (mov r8, r8)
    564c:	20000338 	.word	0x20000338

00005650 <_ZN14USBDeviceClass4initEv>:

void USBDeviceClass::init()
{
    5650:	b580      	push	{r7, lr}
    5652:	b082      	sub	sp, #8
    5654:	af00      	add	r7, sp, #0
    5656:	6078      	str	r0, [r7, #4]
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    5658:	4b42      	ldr	r3, [pc, #264]	; (5764 <_ZN14USBDeviceClass4initEv+0x114>)
    565a:	2200      	movs	r2, #0
    565c:	701a      	strb	r2, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    565e:	2101      	movs	r1, #1
    5660:	201f      	movs	r0, #31
    5662:	f001 f929 	bl	68b8 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    5666:	2101      	movs	r1, #1
    5668:	201f      	movs	r0, #31
    566a:	f001 fa4f 	bl	6b0c <digitalWrite>
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    566e:	4b3e      	ldr	r3, [pc, #248]	; (5768 <_ZN14USBDeviceClass4initEv+0x118>)
    5670:	2200      	movs	r2, #0
    5672:	701a      	strb	r2, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    5674:	2101      	movs	r1, #1
    5676:	201e      	movs	r0, #30
    5678:	f001 f91e 	bl	68b8 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    567c:	2101      	movs	r1, #1
    567e:	201e      	movs	r0, #30
    5680:	f001 fa44 	bl	6b0c <digitalWrite>
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    5684:	4b39      	ldr	r3, [pc, #228]	; (576c <_ZN14USBDeviceClass4initEv+0x11c>)
    5686:	4a39      	ldr	r2, [pc, #228]	; (576c <_ZN14USBDeviceClass4initEv+0x11c>)
    5688:	69d2      	ldr	r2, [r2, #28]
    568a:	2120      	movs	r1, #32
    568c:	430a      	orrs	r2, r1
    568e:	61da      	str	r2, [r3, #28]

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    5690:	4937      	ldr	r1, [pc, #220]	; (5770 <_ZN14USBDeviceClass4initEv+0x120>)
    5692:	2258      	movs	r2, #88	; 0x58
    5694:	5c8b      	ldrb	r3, [r1, r2]
    5696:	2001      	movs	r0, #1
    5698:	4303      	orrs	r3, r0
    569a:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    569c:	4a34      	ldr	r2, [pc, #208]	; (5770 <_ZN14USBDeviceClass4initEv+0x120>)
    569e:	4934      	ldr	r1, [pc, #208]	; (5770 <_ZN14USBDeviceClass4initEv+0x120>)
    56a0:	233c      	movs	r3, #60	; 0x3c
    56a2:	5ccb      	ldrb	r3, [r1, r3]
    56a4:	b2db      	uxtb	r3, r3
    56a6:	210f      	movs	r1, #15
    56a8:	438b      	bics	r3, r1
    56aa:	b2d9      	uxtb	r1, r3
    56ac:	233c      	movs	r3, #60	; 0x3c
    56ae:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    56b0:	4a2f      	ldr	r2, [pc, #188]	; (5770 <_ZN14USBDeviceClass4initEv+0x120>)
    56b2:	492f      	ldr	r1, [pc, #188]	; (5770 <_ZN14USBDeviceClass4initEv+0x120>)
    56b4:	233c      	movs	r3, #60	; 0x3c
    56b6:	5ccb      	ldrb	r3, [r1, r3]
    56b8:	b2db      	uxtb	r3, r3
    56ba:	2106      	movs	r1, #6
    56bc:	430b      	orrs	r3, r1
    56be:	b2d9      	uxtb	r1, r3
    56c0:	233c      	movs	r3, #60	; 0x3c
    56c2:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    56c4:	492a      	ldr	r1, [pc, #168]	; (5770 <_ZN14USBDeviceClass4initEv+0x120>)
    56c6:	2259      	movs	r2, #89	; 0x59
    56c8:	5c8b      	ldrb	r3, [r1, r2]
    56ca:	2001      	movs	r0, #1
    56cc:	4303      	orrs	r3, r0
    56ce:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    56d0:	4a27      	ldr	r2, [pc, #156]	; (5770 <_ZN14USBDeviceClass4initEv+0x120>)
    56d2:	4927      	ldr	r1, [pc, #156]	; (5770 <_ZN14USBDeviceClass4initEv+0x120>)
    56d4:	233c      	movs	r3, #60	; 0x3c
    56d6:	5ccb      	ldrb	r3, [r1, r3]
    56d8:	b2db      	uxtb	r3, r3
    56da:	210f      	movs	r1, #15
    56dc:	400b      	ands	r3, r1
    56de:	b2d9      	uxtb	r1, r3
    56e0:	233c      	movs	r3, #60	; 0x3c
    56e2:	54d1      	strb	r1, [r2, r3]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    56e4:	4a22      	ldr	r2, [pc, #136]	; (5770 <_ZN14USBDeviceClass4initEv+0x120>)
    56e6:	4922      	ldr	r1, [pc, #136]	; (5770 <_ZN14USBDeviceClass4initEv+0x120>)
    56e8:	233c      	movs	r3, #60	; 0x3c
    56ea:	5ccb      	ldrb	r3, [r1, r3]
    56ec:	b2db      	uxtb	r3, r3
    56ee:	2160      	movs	r1, #96	; 0x60
    56f0:	430b      	orrs	r3, r1
    56f2:	b2d9      	uxtb	r1, r3
    56f4:	233c      	movs	r3, #60	; 0x3c
    56f6:	54d1      	strb	r1, [r2, r3]

	// Put Generic Clock Generator 0 as source for Generic Clock Multiplexer 6 (USB reference)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    56f8:	4b1e      	ldr	r3, [pc, #120]	; (5774 <_ZN14USBDeviceClass4initEv+0x124>)
    56fa:	4a1f      	ldr	r2, [pc, #124]	; (5778 <_ZN14USBDeviceClass4initEv+0x128>)
    56fc:	805a      	strh	r2, [r3, #2]
	                    GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
	                    GCLK_CLKCTRL_CLKEN;
	while (GCLK->STATUS.bit.SYNCBUSY)
    56fe:	4b1d      	ldr	r3, [pc, #116]	; (5774 <_ZN14USBDeviceClass4initEv+0x124>)
    5700:	785b      	ldrb	r3, [r3, #1]
    5702:	061b      	lsls	r3, r3, #24
    5704:	0fdb      	lsrs	r3, r3, #31
    5706:	b2db      	uxtb	r3, r3
    5708:	2b00      	cmp	r3, #0
    570a:	d000      	beq.n	570e <_ZN14USBDeviceClass4initEv+0xbe>
    570c:	e7f7      	b.n	56fe <_ZN14USBDeviceClass4initEv+0xae>
		;

	USB_SetHandler(&UDD_Handler);
    570e:	4b1b      	ldr	r3, [pc, #108]	; (577c <_ZN14USBDeviceClass4initEv+0x12c>)
    5710:	0018      	movs	r0, r3
    5712:	f7fd fb9d 	bl	2e50 <USB_SetHandler>

	// Reset USB Device
	usbd.reset();
    5716:	4b1a      	ldr	r3, [pc, #104]	; (5780 <_ZN14USBDeviceClass4initEv+0x130>)
    5718:	0018      	movs	r0, r3
    571a:	f7ff f91f 	bl	495c <_ZN20USBDevice_SAMD21G18x5resetEv>

	usbd.calibrate();
    571e:	4b18      	ldr	r3, [pc, #96]	; (5780 <_ZN14USBDeviceClass4initEv+0x130>)
    5720:	0018      	movs	r0, r3
    5722:	f7ff f93f 	bl	49a4 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	usbd.setUSBDeviceMode();
    5726:	4b16      	ldr	r3, [pc, #88]	; (5780 <_ZN14USBDeviceClass4initEv+0x130>)
    5728:	0018      	movs	r0, r3
    572a:	f7fe fd2d 	bl	4188 <_ZN20USBDevice_SAMD21G18x16setUSBDeviceModeEv>
	usbd.runInStandby();
    572e:	4b14      	ldr	r3, [pc, #80]	; (5780 <_ZN14USBDeviceClass4initEv+0x130>)
    5730:	0018      	movs	r0, r3
    5732:	f7fe fd37 	bl	41a4 <_ZN20USBDevice_SAMD21G18x12runInStandbyEv>
	usbd.setFullSpeed();
    5736:	4b12      	ldr	r3, [pc, #72]	; (5780 <_ZN14USBDeviceClass4initEv+0x130>)
    5738:	0018      	movs	r0, r3
    573a:	f7fe fd41 	bl	41c0 <_ZN20USBDevice_SAMD21G18x12setFullSpeedEv>

	// Configure interrupts
	NVIC_SetPriority((IRQn_Type) USB_IRQn, 0UL);
    573e:	2100      	movs	r1, #0
    5740:	2007      	movs	r0, #7
    5742:	f7fe fc65 	bl	4010 <__NVIC_SetPriority>
	NVIC_EnableIRQ((IRQn_Type) USB_IRQn);
    5746:	2007      	movs	r0, #7
    5748:	f7fe fc48 	bl	3fdc <__NVIC_EnableIRQ>

	usbd.enable();
    574c:	4b0c      	ldr	r3, [pc, #48]	; (5780 <_ZN14USBDeviceClass4initEv+0x130>)
    574e:	0018      	movs	r0, r3
    5750:	f7fe fd0c 	bl	416c <_ZN20USBDevice_SAMD21G18x6enableEv>

	initialized = true;
    5754:	687b      	ldr	r3, [r7, #4]
    5756:	2201      	movs	r2, #1
    5758:	701a      	strb	r2, [r3, #0]
}
    575a:	46c0      	nop			; (mov r8, r8)
    575c:	46bd      	mov	sp, r7
    575e:	b002      	add	sp, #8
    5760:	bd80      	pop	{r7, pc}
    5762:	46c0      	nop			; (mov r8, r8)
    5764:	2000043c 	.word	0x2000043c
    5768:	2000043d 	.word	0x2000043d
    576c:	40000400 	.word	0x40000400
    5770:	41004400 	.word	0x41004400
    5774:	40000c00 	.word	0x40000c00
    5778:	00004006 	.word	0x00004006
    577c:	000050b9 	.word	0x000050b9
    5780:	20000338 	.word	0x20000338

00005784 <_ZN14USBDeviceClass6attachEv>:

bool USBDeviceClass::attach()
{
    5784:	b580      	push	{r7, lr}
    5786:	b082      	sub	sp, #8
    5788:	af00      	add	r7, sp, #0
    578a:	6078      	str	r0, [r7, #4]
	if (!initialized)
    578c:	687b      	ldr	r3, [r7, #4]
    578e:	781b      	ldrb	r3, [r3, #0]
    5790:	2201      	movs	r2, #1
    5792:	4053      	eors	r3, r2
    5794:	b2db      	uxtb	r3, r3
    5796:	2b00      	cmp	r3, #0
    5798:	d001      	beq.n	579e <_ZN14USBDeviceClass6attachEv+0x1a>
		return false;
    579a:	2300      	movs	r3, #0
    579c:	e00f      	b.n	57be <_ZN14USBDeviceClass6attachEv+0x3a>

	usbd.attach();
    579e:	4b0a      	ldr	r3, [pc, #40]	; (57c8 <_ZN14USBDeviceClass6attachEv+0x44>)
    57a0:	0018      	movs	r0, r3
    57a2:	f7fe fd1b 	bl	41dc <_ZN20USBDevice_SAMD21G18x6attachEv>
	usbd.enableEndOfResetInterrupt();
    57a6:	4b08      	ldr	r3, [pc, #32]	; (57c8 <_ZN14USBDeviceClass6attachEv+0x44>)
    57a8:	0018      	movs	r0, r3
    57aa:	f7fe fd3f 	bl	422c <_ZN20USBDevice_SAMD21G18x25enableEndOfResetInterruptEv>
	usbd.enableStartOfFrameInterrupt();
    57ae:	4b06      	ldr	r3, [pc, #24]	; (57c8 <_ZN14USBDeviceClass6attachEv+0x44>)
    57b0:	0018      	movs	r0, r3
    57b2:	f7fe fd63 	bl	427c <_ZN20USBDevice_SAMD21G18x27enableStartOfFrameInterruptEv>

	_usbConfiguration = 0;
    57b6:	4b05      	ldr	r3, [pc, #20]	; (57cc <_ZN14USBDeviceClass6attachEv+0x48>)
    57b8:	2200      	movs	r2, #0
    57ba:	601a      	str	r2, [r3, #0]
	return true;
    57bc:	2301      	movs	r3, #1
}
    57be:	0018      	movs	r0, r3
    57c0:	46bd      	mov	sp, r7
    57c2:	b002      	add	sp, #8
    57c4:	bd80      	pop	{r7, pc}
    57c6:	46c0      	nop			; (mov r8, r8)
    57c8:	20000338 	.word	0x20000338
    57cc:	20000440 	.word	0x20000440

000057d0 <_ZN14USBDeviceClass10setAddressEm>:

void USBDeviceClass::setAddress(uint32_t addr)
{
    57d0:	b580      	push	{r7, lr}
    57d2:	b082      	sub	sp, #8
    57d4:	af00      	add	r7, sp, #0
    57d6:	6078      	str	r0, [r7, #4]
    57d8:	6039      	str	r1, [r7, #0]
	usbd.epBank1SetByteCount(0, 0);
    57da:	4b1b      	ldr	r3, [pc, #108]	; (5848 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    57dc:	2200      	movs	r2, #0
    57de:	2100      	movs	r1, #0
    57e0:	0018      	movs	r0, r3
    57e2:	f7fe ff8d 	bl	4700 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
	usbd.epBank1AckTransferComplete(0);
    57e6:	4b18      	ldr	r3, [pc, #96]	; (5848 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    57e8:	2100      	movs	r1, #0
    57ea:	0018      	movs	r0, r3
    57ec:	f7fe fe40 	bl	4470 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(0);
    57f0:	4b15      	ldr	r3, [pc, #84]	; (5848 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    57f2:	2100      	movs	r1, #0
    57f4:	0018      	movs	r0, r3
    57f6:	f7fe ff0a 	bl	460e <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	// Wait for transfer to complete
	while (!usbd.epBank1IsTransferComplete(0)) {}
    57fa:	4b13      	ldr	r3, [pc, #76]	; (5848 <_ZN14USBDeviceClass10setAddressEm+0x78>)
    57fc:	2100      	movs	r1, #0
    57fe:	0018      	movs	r0, r3
    5800:	f7fe fde1 	bl	43c6 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    5804:	0003      	movs	r3, r0
    5806:	001a      	movs	r2, r3
    5808:	2301      	movs	r3, #1
    580a:	4053      	eors	r3, r2
    580c:	b2db      	uxtb	r3, r3
    580e:	2b00      	cmp	r3, #0
    5810:	d000      	beq.n	5814 <_ZN14USBDeviceClass10setAddressEm+0x44>
    5812:	e7f2      	b.n	57fa <_ZN14USBDeviceClass10setAddressEm+0x2a>

	// Set USB address to addr
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    5814:	4a0d      	ldr	r2, [pc, #52]	; (584c <_ZN14USBDeviceClass10setAddressEm+0x7c>)
    5816:	683b      	ldr	r3, [r7, #0]
    5818:	b2db      	uxtb	r3, r3
    581a:	1c19      	adds	r1, r3, #0
    581c:	237f      	movs	r3, #127	; 0x7f
    581e:	400b      	ands	r3, r1
    5820:	b2d9      	uxtb	r1, r3
    5822:	7a93      	ldrb	r3, [r2, #10]
    5824:	207f      	movs	r0, #127	; 0x7f
    5826:	4008      	ands	r0, r1
    5828:	217f      	movs	r1, #127	; 0x7f
    582a:	438b      	bics	r3, r1
    582c:	1c19      	adds	r1, r3, #0
    582e:	1c03      	adds	r3, r0, #0
    5830:	430b      	orrs	r3, r1
    5832:	7293      	strb	r3, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    5834:	4a05      	ldr	r2, [pc, #20]	; (584c <_ZN14USBDeviceClass10setAddressEm+0x7c>)
    5836:	7a93      	ldrb	r3, [r2, #10]
    5838:	2180      	movs	r1, #128	; 0x80
    583a:	4249      	negs	r1, r1
    583c:	430b      	orrs	r3, r1
    583e:	7293      	strb	r3, [r2, #10]
}
    5840:	46c0      	nop			; (mov r8, r8)
    5842:	46bd      	mov	sp, r7
    5844:	b002      	add	sp, #8
    5846:	bd80      	pop	{r7, pc}
    5848:	20000338 	.word	0x20000338
    584c:	41005000 	.word	0x41005000

00005850 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
    5850:	b590      	push	{r4, r7, lr}
    5852:	b085      	sub	sp, #20
    5854:	af00      	add	r7, sp, #0
    5856:	6078      	str	r0, [r7, #4]
    5858:	6039      	str	r1, [r7, #0]
	uint8_t i = setup.wIndex;
    585a:	683b      	ldr	r3, [r7, #0]
    585c:	889a      	ldrh	r2, [r3, #4]
    585e:	230f      	movs	r3, #15
    5860:	18fb      	adds	r3, r7, r3
    5862:	701a      	strb	r2, [r3, #0]

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
    5864:	230f      	movs	r3, #15
    5866:	18fb      	adds	r3, r7, r3
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	2b00      	cmp	r3, #0
    586c:	d111      	bne.n	5892 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x42>
	{
		if (CDC_Setup(setup) == false) {
    586e:	683b      	ldr	r3, [r7, #0]
    5870:	0018      	movs	r0, r3
    5872:	f008 fe47 	bl	e504 <_Z9CDC_SetupR8USBSetup>
    5876:	0003      	movs	r3, r0
    5878:	001a      	movs	r2, r3
    587a:	2301      	movs	r3, #1
    587c:	4053      	eors	r3, r2
    587e:	b2db      	uxtb	r3, r3
    5880:	2b00      	cmp	r3, #0
    5882:	d004      	beq.n	588e <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3e>
			sendZlp(0);
    5884:	687b      	ldr	r3, [r7, #4]
    5886:	2100      	movs	r1, #0
    5888:	0018      	movs	r0, r3
    588a:	f000 fc2f 	bl	60ec <_ZN14USBDeviceClass7sendZlpEm>
		}
		return true;
    588e:	2301      	movs	r3, #1
    5890:	e01b      	b.n	58ca <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x7a>
	}
	#endif

	#if defined(PLUGGABLE_USB_ENABLED)
	bool ret = PluggableUSB().setup(setup);
    5892:	f008 fffb 	bl	e88c <_Z12PluggableUSBv>
    5896:	0002      	movs	r2, r0
    5898:	230e      	movs	r3, #14
    589a:	18fc      	adds	r4, r7, r3
    589c:	683b      	ldr	r3, [r7, #0]
    589e:	0019      	movs	r1, r3
    58a0:	0010      	movs	r0, r2
    58a2:	f008 ffd3 	bl	e84c <_ZN13PluggableUSB_5setupER8USBSetup>
    58a6:	0003      	movs	r3, r0
    58a8:	7023      	strb	r3, [r4, #0]
	if ( ret == false) {
    58aa:	230e      	movs	r3, #14
    58ac:	18fb      	adds	r3, r7, r3
    58ae:	781b      	ldrb	r3, [r3, #0]
    58b0:	2201      	movs	r2, #1
    58b2:	4053      	eors	r3, r2
    58b4:	b2db      	uxtb	r3, r3
    58b6:	2b00      	cmp	r3, #0
    58b8:	d004      	beq.n	58c4 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x74>
		sendZlp(0);
    58ba:	687b      	ldr	r3, [r7, #4]
    58bc:	2100      	movs	r1, #0
    58be:	0018      	movs	r0, r3
    58c0:	f000 fc14 	bl	60ec <_ZN14USBDeviceClass7sendZlpEm>
	}
	return ret;
    58c4:	230e      	movs	r3, #14
    58c6:	18fb      	adds	r3, r7, r3
    58c8:	781b      	ldrb	r3, [r3, #0]
	#endif

	return false;
}
    58ca:	0018      	movs	r0, r3
    58cc:	46bd      	mov	sp, r7
    58ce:	b005      	add	sp, #20
    58d0:	bd90      	pop	{r4, r7, pc}
	...

000058d4 <_ZN14USBDeviceClass13initEndpointsEv>:
	0,
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
    58d4:	b580      	push	{r7, lr}
    58d6:	b084      	sub	sp, #16
    58d8:	af00      	add	r7, sp, #0
    58da:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    58dc:	230f      	movs	r3, #15
    58de:	18fb      	adds	r3, r7, r3
    58e0:	2201      	movs	r2, #1
    58e2:	701a      	strb	r2, [r3, #0]
    58e4:	230f      	movs	r3, #15
    58e6:	18fb      	adds	r3, r7, r3
    58e8:	781b      	ldrb	r3, [r3, #0]
    58ea:	2b27      	cmp	r3, #39	; 0x27
    58ec:	d81c      	bhi.n	5928 <_ZN14USBDeviceClass13initEndpointsEv+0x54>
    58ee:	230f      	movs	r3, #15
    58f0:	18fb      	adds	r3, r7, r3
    58f2:	781a      	ldrb	r2, [r3, #0]
    58f4:	4b0e      	ldr	r3, [pc, #56]	; (5930 <_ZN14USBDeviceClass13initEndpointsEv+0x5c>)
    58f6:	0092      	lsls	r2, r2, #2
    58f8:	58d3      	ldr	r3, [r2, r3]
    58fa:	2b00      	cmp	r3, #0
    58fc:	d014      	beq.n	5928 <_ZN14USBDeviceClass13initEndpointsEv+0x54>
		initEP(i, EndPoints[i]);
    58fe:	230f      	movs	r3, #15
    5900:	18fb      	adds	r3, r7, r3
    5902:	7819      	ldrb	r1, [r3, #0]
    5904:	230f      	movs	r3, #15
    5906:	18fb      	adds	r3, r7, r3
    5908:	781a      	ldrb	r2, [r3, #0]
    590a:	4b09      	ldr	r3, [pc, #36]	; (5930 <_ZN14USBDeviceClass13initEndpointsEv+0x5c>)
    590c:	0092      	lsls	r2, r2, #2
    590e:	58d2      	ldr	r2, [r2, r3]
    5910:	687b      	ldr	r3, [r7, #4]
    5912:	0018      	movs	r0, r3
    5914:	f000 f80e 	bl	5934 <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5918:	230f      	movs	r3, #15
    591a:	18fb      	adds	r3, r7, r3
    591c:	781a      	ldrb	r2, [r3, #0]
    591e:	230f      	movs	r3, #15
    5920:	18fb      	adds	r3, r7, r3
    5922:	3201      	adds	r2, #1
    5924:	701a      	strb	r2, [r3, #0]
    5926:	e7dd      	b.n	58e4 <_ZN14USBDeviceClass13initEndpointsEv+0x10>
	}
}
    5928:	46c0      	nop			; (mov r8, r8)
    592a:	46bd      	mov	sp, r7
    592c:	b004      	add	sp, #16
    592e:	bd80      	pop	{r7, pc}
    5930:	20000020 	.word	0x20000020

00005934 <_ZN14USBDeviceClass6initEPEmm>:

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
{
    5934:	b590      	push	{r4, r7, lr}
    5936:	b085      	sub	sp, #20
    5938:	af00      	add	r7, sp, #0
    593a:	60f8      	str	r0, [r7, #12]
    593c:	60b9      	str	r1, [r7, #8]
    593e:	607a      	str	r2, [r7, #4]
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    5940:	687b      	ldr	r3, [r7, #4]
    5942:	2b83      	cmp	r3, #131	; 0x83
    5944:	d118      	bne.n	5978 <_ZN14USBDeviceClass6initEPEmm+0x44>
	{
		usbd.epBank1SetSize(ep, 64);
    5946:	68bb      	ldr	r3, [r7, #8]
    5948:	b2d9      	uxtb	r1, r3
    594a:	4b4e      	ldr	r3, [pc, #312]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    594c:	2240      	movs	r2, #64	; 0x40
    594e:	0018      	movs	r0, r3
    5950:	f7fe ff9a 	bl	4888 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5954:	68bb      	ldr	r3, [r7, #8]
    5956:	b2d9      	uxtb	r1, r3
    5958:	68bb      	ldr	r3, [r7, #8]
    595a:	019a      	lsls	r2, r3, #6
    595c:	4b4a      	ldr	r3, [pc, #296]	; (5a88 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    595e:	18d2      	adds	r2, r2, r3
    5960:	4b48      	ldr	r3, [pc, #288]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5962:	0018      	movs	r0, r3
    5964:	f7fe ff4e 	bl	4804 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
    5968:	68bb      	ldr	r3, [r7, #8]
    596a:	b2d9      	uxtb	r1, r3
    596c:	4b45      	ldr	r3, [pc, #276]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    596e:	2204      	movs	r2, #4
    5970:	0018      	movs	r0, r3
    5972:	f7fe fcb5 	bl	42e0 <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    5976:	e081      	b.n	5a7c <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    5978:	687b      	ldr	r3, [r7, #4]
    597a:	2b02      	cmp	r3, #2
    597c:	d116      	bne.n	59ac <_ZN14USBDeviceClass6initEPEmm+0x78>
		if (epHandlers[ep] == NULL) {
    597e:	4b43      	ldr	r3, [pc, #268]	; (5a8c <_ZN14USBDeviceClass6initEPEmm+0x158>)
    5980:	68ba      	ldr	r2, [r7, #8]
    5982:	0092      	lsls	r2, r2, #2
    5984:	58d3      	ldr	r3, [r2, r3]
    5986:	2b00      	cmp	r3, #0
    5988:	d178      	bne.n	5a7c <_ZN14USBDeviceClass6initEPEmm+0x148>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    598a:	2038      	movs	r0, #56	; 0x38
    598c:	f007 fed2 	bl	d734 <_Znwj>
    5990:	0003      	movs	r3, r0
    5992:	001c      	movs	r4, r3
    5994:	2380      	movs	r3, #128	; 0x80
    5996:	005b      	lsls	r3, r3, #1
    5998:	68ba      	ldr	r2, [r7, #8]
    599a:	493a      	ldr	r1, [pc, #232]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    599c:	0020      	movs	r0, r4
    599e:	f7ff f8af 	bl	4b00 <_ZN26DoubleBufferedEPOutHandlerC1ER20USBDevice_SAMD21G18xmm>
    59a2:	4b3a      	ldr	r3, [pc, #232]	; (5a8c <_ZN14USBDeviceClass6initEPEmm+0x158>)
    59a4:	68ba      	ldr	r2, [r7, #8]
    59a6:	0092      	lsls	r2, r2, #2
    59a8:	50d4      	str	r4, [r2, r3]
}
    59aa:	e067      	b.n	5a7c <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    59ac:	687b      	ldr	r3, [r7, #4]
    59ae:	2b82      	cmp	r3, #130	; 0x82
    59b0:	d11f      	bne.n	59f2 <_ZN14USBDeviceClass6initEPEmm+0xbe>
		usbd.epBank1SetSize(ep, 64);
    59b2:	68bb      	ldr	r3, [r7, #8]
    59b4:	b2d9      	uxtb	r1, r3
    59b6:	4b33      	ldr	r3, [pc, #204]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59b8:	2240      	movs	r2, #64	; 0x40
    59ba:	0018      	movs	r0, r3
    59bc:	f7fe ff64 	bl	4888 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    59c0:	68bb      	ldr	r3, [r7, #8]
    59c2:	b2d9      	uxtb	r1, r3
    59c4:	68bb      	ldr	r3, [r7, #8]
    59c6:	019a      	lsls	r2, r3, #6
    59c8:	4b2f      	ldr	r3, [pc, #188]	; (5a88 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    59ca:	18d2      	adds	r2, r2, r3
    59cc:	4b2d      	ldr	r3, [pc, #180]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59ce:	0018      	movs	r0, r3
    59d0:	f7fe ff18 	bl	4804 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1ResetReady(ep);
    59d4:	68bb      	ldr	r3, [r7, #8]
    59d6:	b2da      	uxtb	r2, r3
    59d8:	4b2a      	ldr	r3, [pc, #168]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59da:	0011      	movs	r1, r2
    59dc:	0018      	movs	r0, r3
    59de:	f7fe fe43 	bl	4668 <_ZN20USBDevice_SAMD21G18x17epBank1ResetReadyEh>
		usbd.epBank1SetType(ep, 3); // BULK IN
    59e2:	68bb      	ldr	r3, [r7, #8]
    59e4:	b2d9      	uxtb	r1, r3
    59e6:	4b27      	ldr	r3, [pc, #156]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59e8:	2203      	movs	r2, #3
    59ea:	0018      	movs	r0, r3
    59ec:	f7fe fc78 	bl	42e0 <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
}
    59f0:	e044      	b.n	5a7c <_ZN14USBDeviceClass6initEPEmm+0x148>
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	2b00      	cmp	r3, #0
    59f6:	d141      	bne.n	5a7c <_ZN14USBDeviceClass6initEPEmm+0x148>
		usbd.epBank0SetSize(ep, 64);
    59f8:	68bb      	ldr	r3, [r7, #8]
    59fa:	b2d9      	uxtb	r1, r3
    59fc:	4b21      	ldr	r3, [pc, #132]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    59fe:	2240      	movs	r2, #64	; 0x40
    5a00:	0018      	movs	r0, r3
    5a02:	f7fe ff15 	bl	4830 <_ZN20USBDevice_SAMD21G18x14epBank0SetSizeEht>
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5a06:	68bb      	ldr	r3, [r7, #8]
    5a08:	b2d9      	uxtb	r1, r3
    5a0a:	68bb      	ldr	r3, [r7, #8]
    5a0c:	019a      	lsls	r2, r3, #6
    5a0e:	4b20      	ldr	r3, [pc, #128]	; (5a90 <_ZN14USBDeviceClass6initEPEmm+0x15c>)
    5a10:	18d2      	adds	r2, r2, r3
    5a12:	4b1c      	ldr	r3, [pc, #112]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a14:	0018      	movs	r0, r3
    5a16:	f7fe fedf 	bl	47d8 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
		usbd.epBank0SetType(ep, 1); // CONTROL OUT / SETUP
    5a1a:	68bb      	ldr	r3, [r7, #8]
    5a1c:	b2d9      	uxtb	r1, r3
    5a1e:	4b19      	ldr	r3, [pc, #100]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a20:	2201      	movs	r2, #1
    5a22:	0018      	movs	r0, r3
    5a24:	f7fe fc38 	bl	4298 <_ZN20USBDevice_SAMD21G18x14epBank0SetTypeEhh>
		usbd.epBank1SetSize(ep, 64);
    5a28:	68bb      	ldr	r3, [r7, #8]
    5a2a:	b2d9      	uxtb	r1, r3
    5a2c:	4b15      	ldr	r3, [pc, #84]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a2e:	2240      	movs	r2, #64	; 0x40
    5a30:	0018      	movs	r0, r3
    5a32:	f7fe ff29 	bl	4888 <_ZN20USBDevice_SAMD21G18x14epBank1SetSizeEht>
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[0]);
    5a36:	68bb      	ldr	r3, [r7, #8]
    5a38:	b2d9      	uxtb	r1, r3
    5a3a:	4a13      	ldr	r2, [pc, #76]	; (5a88 <_ZN14USBDeviceClass6initEPEmm+0x154>)
    5a3c:	4b11      	ldr	r3, [pc, #68]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a3e:	0018      	movs	r0, r3
    5a40:	f7fe fee0 	bl	4804 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetType(ep, 1); // CONTROL IN
    5a44:	68bb      	ldr	r3, [r7, #8]
    5a46:	b2d9      	uxtb	r1, r3
    5a48:	4b0e      	ldr	r3, [pc, #56]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a4a:	2201      	movs	r2, #1
    5a4c:	0018      	movs	r0, r3
    5a4e:	f7fe fc47 	bl	42e0 <_ZN20USBDevice_SAMD21G18x14epBank1SetTypeEhh>
		usbd.epBank0SetMultiPacketSize(ep, 64);
    5a52:	68bb      	ldr	r3, [r7, #8]
    5a54:	b2d9      	uxtb	r1, r3
    5a56:	4b0b      	ldr	r3, [pc, #44]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a58:	2240      	movs	r2, #64	; 0x40
    5a5a:	0018      	movs	r0, r3
    5a5c:	f7fe fe72 	bl	4744 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
		usbd.epBank0SetByteCount(ep, 0);
    5a60:	68bb      	ldr	r3, [r7, #8]
    5a62:	b2d9      	uxtb	r1, r3
    5a64:	4b07      	ldr	r3, [pc, #28]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a66:	2200      	movs	r2, #0
    5a68:	0018      	movs	r0, r3
    5a6a:	f7fe fe28 	bl	46be <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
		usbd.epBank0SetReady(ep);
    5a6e:	68bb      	ldr	r3, [r7, #8]
    5a70:	b2da      	uxtb	r2, r3
    5a72:	4b04      	ldr	r3, [pc, #16]	; (5a84 <_ZN14USBDeviceClass6initEPEmm+0x150>)
    5a74:	0011      	movs	r1, r2
    5a76:	0018      	movs	r0, r3
    5a78:	f7fe fdb3 	bl	45e2 <_ZN20USBDevice_SAMD21G18x15epBank0SetReadyEh>
}
    5a7c:	46c0      	nop			; (mov r8, r8)
    5a7e:	46bd      	mov	sp, r7
    5a80:	b005      	add	sp, #20
    5a82:	bd90      	pop	{r4, r7, pc}
    5a84:	20000338 	.word	0x20000338
    5a88:	20000608 	.word	0x20000608
    5a8c:	200007c8 	.word	0x200007c8
    5a90:	20000448 	.word	0x20000448

00005a94 <_ZN14USBDeviceClass5flushEm>:

void USBDeviceClass::flush(uint32_t ep)
{
    5a94:	b580      	push	{r7, lr}
    5a96:	b082      	sub	sp, #8
    5a98:	af00      	add	r7, sp, #0
    5a9a:	6078      	str	r0, [r7, #4]
    5a9c:	6039      	str	r1, [r7, #0]
	if (available(ep)) {
    5a9e:	683a      	ldr	r2, [r7, #0]
    5aa0:	687b      	ldr	r3, [r7, #4]
    5aa2:	0011      	movs	r1, r2
    5aa4:	0018      	movs	r0, r3
    5aa6:	f000 f867 	bl	5b78 <_ZN14USBDeviceClass9availableEm>
    5aaa:	0003      	movs	r3, r0
    5aac:	1e5a      	subs	r2, r3, #1
    5aae:	4193      	sbcs	r3, r2
    5ab0:	b2db      	uxtb	r3, r3
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	d00d      	beq.n	5ad2 <_ZN14USBDeviceClass5flushEm+0x3e>
		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    5ab6:	683b      	ldr	r3, [r7, #0]
    5ab8:	b2da      	uxtb	r2, r3
    5aba:	4b08      	ldr	r3, [pc, #32]	; (5adc <_ZN14USBDeviceClass5flushEm+0x48>)
    5abc:	0011      	movs	r1, r2
    5abe:	0018      	movs	r0, r3
    5ac0:	f7fe fda5 	bl	460e <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    5ac4:	683b      	ldr	r3, [r7, #0]
    5ac6:	b2da      	uxtb	r2, r3
    5ac8:	4b04      	ldr	r3, [pc, #16]	; (5adc <_ZN14USBDeviceClass5flushEm+0x48>)
    5aca:	0011      	movs	r1, r2
    5acc:	0018      	movs	r0, r3
    5ace:	f7fe fccf 	bl	4470 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
}
    5ad2:	46c0      	nop			; (mov r8, r8)
    5ad4:	46bd      	mov	sp, r7
    5ad6:	b002      	add	sp, #8
    5ad8:	bd80      	pop	{r7, pc}
    5ada:	46c0      	nop			; (mov r8, r8)
    5adc:	20000338 	.word	0x20000338

00005ae0 <_ZN14USBDeviceClass5stallEm>:

void USBDeviceClass::stall(uint32_t ep)
{
    5ae0:	b580      	push	{r7, lr}
    5ae2:	b082      	sub	sp, #8
    5ae4:	af00      	add	r7, sp, #0
    5ae6:	6078      	str	r0, [r7, #4]
    5ae8:	6039      	str	r1, [r7, #0]
	// TODO: test
	// TODO: use .bit. notation

	// Stall endpoint
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    5aea:	4a06      	ldr	r2, [pc, #24]	; (5b04 <_ZN14USBDeviceClass5stallEm+0x24>)
    5aec:	683b      	ldr	r3, [r7, #0]
    5aee:	3308      	adds	r3, #8
    5af0:	015b      	lsls	r3, r3, #5
    5af2:	18d3      	adds	r3, r2, r3
    5af4:	3305      	adds	r3, #5
    5af6:	2220      	movs	r2, #32
    5af8:	701a      	strb	r2, [r3, #0]
}
    5afa:	46c0      	nop			; (mov r8, r8)
    5afc:	46bd      	mov	sp, r7
    5afe:	b002      	add	sp, #8
    5b00:	bd80      	pop	{r7, pc}
    5b02:	46c0      	nop			; (mov r8, r8)
    5b04:	41005000 	.word	0x41005000

00005b08 <_ZN14USBDeviceClass11recvControlEPvm>:
	return f != USB->DEVICE.FNUM.bit.FNUM;
}


uint32_t USBDeviceClass::recvControl(void *_data, uint32_t len)
{
    5b08:	b580      	push	{r7, lr}
    5b0a:	b088      	sub	sp, #32
    5b0c:	af00      	add	r7, sp, #0
    5b0e:	60f8      	str	r0, [r7, #12]
    5b10:	60b9      	str	r1, [r7, #8]
    5b12:	607a      	str	r2, [r7, #4]
	uint8_t *data = reinterpret_cast<uint8_t *>(_data);
    5b14:	68bb      	ldr	r3, [r7, #8]
    5b16:	617b      	str	r3, [r7, #20]

	// The RAM Buffer is empty: we can receive data
	usbd.epBank0ResetReady(0);
    5b18:	4b15      	ldr	r3, [pc, #84]	; (5b70 <_ZN14USBDeviceClass11recvControlEPvm+0x68>)
    5b1a:	2100      	movs	r1, #0
    5b1c:	0018      	movs	r0, r3
    5b1e:	f7fe fd8d 	bl	463c <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

	//usbd.epBank0AckSetupReceived(0);
	uint32_t read = armRecvCtrlOUT(0);
    5b22:	68fb      	ldr	r3, [r7, #12]
    5b24:	2100      	movs	r1, #0
    5b26:	0018      	movs	r0, r3
    5b28:	f000 f904 	bl	5d34 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    5b2c:	0003      	movs	r3, r0
    5b2e:	61fb      	str	r3, [r7, #28]
	if (read > len)
    5b30:	69fa      	ldr	r2, [r7, #28]
    5b32:	687b      	ldr	r3, [r7, #4]
    5b34:	429a      	cmp	r2, r3
    5b36:	d901      	bls.n	5b3c <_ZN14USBDeviceClass11recvControlEPvm+0x34>
		read = len;
    5b38:	687b      	ldr	r3, [r7, #4]
    5b3a:	61fb      	str	r3, [r7, #28]
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
    5b3c:	4b0d      	ldr	r3, [pc, #52]	; (5b74 <_ZN14USBDeviceClass11recvControlEPvm+0x6c>)
    5b3e:	613b      	str	r3, [r7, #16]
	for (uint32_t i=0; i<len; i++) {
    5b40:	2300      	movs	r3, #0
    5b42:	61bb      	str	r3, [r7, #24]
    5b44:	69ba      	ldr	r2, [r7, #24]
    5b46:	687b      	ldr	r3, [r7, #4]
    5b48:	429a      	cmp	r2, r3
    5b4a:	d20b      	bcs.n	5b64 <_ZN14USBDeviceClass11recvControlEPvm+0x5c>
		data[i] = buffer[i];
    5b4c:	697a      	ldr	r2, [r7, #20]
    5b4e:	69bb      	ldr	r3, [r7, #24]
    5b50:	18d3      	adds	r3, r2, r3
    5b52:	6939      	ldr	r1, [r7, #16]
    5b54:	69ba      	ldr	r2, [r7, #24]
    5b56:	188a      	adds	r2, r1, r2
    5b58:	7812      	ldrb	r2, [r2, #0]
    5b5a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i<len; i++) {
    5b5c:	69bb      	ldr	r3, [r7, #24]
    5b5e:	3301      	adds	r3, #1
    5b60:	61bb      	str	r3, [r7, #24]
    5b62:	e7ef      	b.n	5b44 <_ZN14USBDeviceClass11recvControlEPvm+0x3c>
	}

	return read;
    5b64:	69fb      	ldr	r3, [r7, #28]
}
    5b66:	0018      	movs	r0, r3
    5b68:	46bd      	mov	sp, r7
    5b6a:	b008      	add	sp, #32
    5b6c:	bd80      	pop	{r7, pc}
    5b6e:	46c0      	nop			; (mov r8, r8)
    5b70:	20000338 	.word	0x20000338
    5b74:	20000448 	.word	0x20000448

00005b78 <_ZN14USBDeviceClass9availableEm>:

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
    5b78:	b580      	push	{r7, lr}
    5b7a:	b082      	sub	sp, #8
    5b7c:	af00      	add	r7, sp, #0
    5b7e:	6078      	str	r0, [r7, #4]
    5b80:	6039      	str	r1, [r7, #0]
	if (epHandlers[ep]) {
    5b82:	4b10      	ldr	r3, [pc, #64]	; (5bc4 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5b84:	683a      	ldr	r2, [r7, #0]
    5b86:	0092      	lsls	r2, r2, #2
    5b88:	58d3      	ldr	r3, [r2, r3]
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d00e      	beq.n	5bac <_ZN14USBDeviceClass9availableEm+0x34>
		return epHandlers[ep]->available();
    5b8e:	4b0d      	ldr	r3, [pc, #52]	; (5bc4 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5b90:	683a      	ldr	r2, [r7, #0]
    5b92:	0092      	lsls	r2, r2, #2
    5b94:	58d3      	ldr	r3, [r2, r3]
    5b96:	681b      	ldr	r3, [r3, #0]
    5b98:	3308      	adds	r3, #8
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	4a09      	ldr	r2, [pc, #36]	; (5bc4 <_ZN14USBDeviceClass9availableEm+0x4c>)
    5b9e:	6839      	ldr	r1, [r7, #0]
    5ba0:	0089      	lsls	r1, r1, #2
    5ba2:	588a      	ldr	r2, [r1, r2]
    5ba4:	0010      	movs	r0, r2
    5ba6:	4798      	blx	r3
    5ba8:	0003      	movs	r3, r0
    5baa:	e007      	b.n	5bbc <_ZN14USBDeviceClass9availableEm+0x44>
	} else {
		return usbd.epBank0ByteCount(ep);
    5bac:	683b      	ldr	r3, [r7, #0]
    5bae:	b2da      	uxtb	r2, r3
    5bb0:	4b05      	ldr	r3, [pc, #20]	; (5bc8 <_ZN14USBDeviceClass9availableEm+0x50>)
    5bb2:	0011      	movs	r1, r2
    5bb4:	0018      	movs	r0, r3
    5bb6:	f7fe fd6e 	bl	4696 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5bba:	0003      	movs	r3, r0
	}
}
    5bbc:	0018      	movs	r0, r3
    5bbe:	46bd      	mov	sp, r7
    5bc0:	b002      	add	sp, #8
    5bc2:	bd80      	pop	{r7, pc}
    5bc4:	200007c8 	.word	0x200007c8
    5bc8:	20000338 	.word	0x20000338

00005bcc <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    5bcc:	b580      	push	{r7, lr}
    5bce:	b084      	sub	sp, #16
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	60f8      	str	r0, [r7, #12]
    5bd4:	60b9      	str	r1, [r7, #8]
    5bd6:	607a      	str	r2, [r7, #4]
    5bd8:	603b      	str	r3, [r7, #0]
	if (!_usbConfiguration)
    5bda:	4b42      	ldr	r3, [pc, #264]	; (5ce4 <_ZN14USBDeviceClass4recvEmPvm+0x118>)
    5bdc:	681b      	ldr	r3, [r3, #0]
    5bde:	425a      	negs	r2, r3
    5be0:	4153      	adcs	r3, r2
    5be2:	b2db      	uxtb	r3, r3
    5be4:	2b00      	cmp	r3, #0
    5be6:	d002      	beq.n	5bee <_ZN14USBDeviceClass4recvEmPvm+0x22>
		return -1;
    5be8:	2301      	movs	r3, #1
    5bea:	425b      	negs	r3, r3
    5bec:	e076      	b.n	5cdc <_ZN14USBDeviceClass4recvEmPvm+0x110>

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    5bee:	4b3e      	ldr	r3, [pc, #248]	; (5ce8 <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
    5bf0:	781b      	ldrb	r3, [r3, #0]
    5bf2:	b2db      	uxtb	r3, r3
    5bf4:	425a      	negs	r2, r3
    5bf6:	4153      	adcs	r3, r2
    5bf8:	b2db      	uxtb	r3, r3
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d003      	beq.n	5c06 <_ZN14USBDeviceClass4recvEmPvm+0x3a>
		digitalWrite(PIN_LED_RXL, LOW);
    5bfe:	2100      	movs	r1, #0
    5c00:	201e      	movs	r0, #30
    5c02:	f000 ff83 	bl	6b0c <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    5c06:	4b38      	ldr	r3, [pc, #224]	; (5ce8 <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
    5c08:	2264      	movs	r2, #100	; 0x64
    5c0a:	701a      	strb	r2, [r3, #0]
#endif

	if (epHandlers[ep]) {
    5c0c:	4b37      	ldr	r3, [pc, #220]	; (5cec <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5c0e:	68ba      	ldr	r2, [r7, #8]
    5c10:	0092      	lsls	r2, r2, #2
    5c12:	58d3      	ldr	r3, [r2, r3]
    5c14:	2b00      	cmp	r3, #0
    5c16:	d00f      	beq.n	5c38 <_ZN14USBDeviceClass4recvEmPvm+0x6c>
		return epHandlers[ep]->recv(_data, len);
    5c18:	4b34      	ldr	r3, [pc, #208]	; (5cec <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5c1a:	68ba      	ldr	r2, [r7, #8]
    5c1c:	0092      	lsls	r2, r2, #2
    5c1e:	58d3      	ldr	r3, [r2, r3]
    5c20:	681b      	ldr	r3, [r3, #0]
    5c22:	3304      	adds	r3, #4
    5c24:	681b      	ldr	r3, [r3, #0]
    5c26:	4a31      	ldr	r2, [pc, #196]	; (5cec <_ZN14USBDeviceClass4recvEmPvm+0x120>)
    5c28:	68b9      	ldr	r1, [r7, #8]
    5c2a:	0089      	lsls	r1, r1, #2
    5c2c:	5888      	ldr	r0, [r1, r2]
    5c2e:	683a      	ldr	r2, [r7, #0]
    5c30:	6879      	ldr	r1, [r7, #4]
    5c32:	4798      	blx	r3
    5c34:	0003      	movs	r3, r0
    5c36:	e051      	b.n	5cdc <_ZN14USBDeviceClass4recvEmPvm+0x110>
	}

	if (available(ep) < len)
    5c38:	68ba      	ldr	r2, [r7, #8]
    5c3a:	68fb      	ldr	r3, [r7, #12]
    5c3c:	0011      	movs	r1, r2
    5c3e:	0018      	movs	r0, r3
    5c40:	f7ff ff9a 	bl	5b78 <_ZN14USBDeviceClass9availableEm>
    5c44:	0002      	movs	r2, r0
    5c46:	683b      	ldr	r3, [r7, #0]
    5c48:	429a      	cmp	r2, r3
    5c4a:	419b      	sbcs	r3, r3
    5c4c:	425b      	negs	r3, r3
    5c4e:	b2db      	uxtb	r3, r3
    5c50:	2b00      	cmp	r3, #0
    5c52:	d007      	beq.n	5c64 <_ZN14USBDeviceClass4recvEmPvm+0x98>
		len = available(ep);
    5c54:	68ba      	ldr	r2, [r7, #8]
    5c56:	68fb      	ldr	r3, [r7, #12]
    5c58:	0011      	movs	r1, r2
    5c5a:	0018      	movs	r0, r3
    5c5c:	f7ff ff8c 	bl	5b78 <_ZN14USBDeviceClass9availableEm>
    5c60:	0003      	movs	r3, r0
    5c62:	603b      	str	r3, [r7, #0]

	armRecv(ep);
    5c64:	68ba      	ldr	r2, [r7, #8]
    5c66:	68fb      	ldr	r3, [r7, #12]
    5c68:	0011      	movs	r1, r2
    5c6a:	0018      	movs	r0, r3
    5c6c:	f000 f8b6 	bl	5ddc <_ZN14USBDeviceClass7armRecvEm>

	usbd.epBank0DisableTransferComplete(ep);
    5c70:	68bb      	ldr	r3, [r7, #8]
    5c72:	b2da      	uxtb	r2, r3
    5c74:	4b1e      	ldr	r3, [pc, #120]	; (5cf0 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5c76:	0011      	movs	r1, r2
    5c78:	0018      	movs	r0, r3
    5c7a:	f7fe fc6e 	bl	455a <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>

	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    5c7e:	68bb      	ldr	r3, [r7, #8]
    5c80:	019a      	lsls	r2, r3, #6
    5c82:	4b1c      	ldr	r3, [pc, #112]	; (5cf4 <_ZN14USBDeviceClass4recvEmPvm+0x128>)
    5c84:	18d1      	adds	r1, r2, r3
    5c86:	683a      	ldr	r2, [r7, #0]
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	0018      	movs	r0, r3
    5c8c:	f00a fdfb 	bl	10886 <memcpy>

	// release empty buffer
	if (len && !available(ep)) {
    5c90:	683b      	ldr	r3, [r7, #0]
    5c92:	2b00      	cmp	r3, #0
    5c94:	d009      	beq.n	5caa <_ZN14USBDeviceClass4recvEmPvm+0xde>
    5c96:	68ba      	ldr	r2, [r7, #8]
    5c98:	68fb      	ldr	r3, [r7, #12]
    5c9a:	0011      	movs	r1, r2
    5c9c:	0018      	movs	r0, r3
    5c9e:	f7ff ff6b 	bl	5b78 <_ZN14USBDeviceClass9availableEm>
    5ca2:	1e03      	subs	r3, r0, #0
    5ca4:	d101      	bne.n	5caa <_ZN14USBDeviceClass4recvEmPvm+0xde>
    5ca6:	2301      	movs	r3, #1
    5ca8:	e000      	b.n	5cac <_ZN14USBDeviceClass4recvEmPvm+0xe0>
    5caa:	2300      	movs	r3, #0
    5cac:	2b00      	cmp	r3, #0
    5cae:	d014      	beq.n	5cda <_ZN14USBDeviceClass4recvEmPvm+0x10e>
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(ep);
    5cb0:	68bb      	ldr	r3, [r7, #8]
    5cb2:	b2da      	uxtb	r2, r3
    5cb4:	4b0e      	ldr	r3, [pc, #56]	; (5cf0 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5cb6:	0011      	movs	r1, r2
    5cb8:	0018      	movs	r0, r3
    5cba:	f7fe fcbf 	bl	463c <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		// Clear Transfer complete 0 flag
		usbd.epBank0AckTransferComplete(ep);
    5cbe:	68bb      	ldr	r3, [r7, #8]
    5cc0:	b2da      	uxtb	r2, r3
    5cc2:	4b0b      	ldr	r3, [pc, #44]	; (5cf0 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5cc4:	0011      	movs	r1, r2
    5cc6:	0018      	movs	r0, r3
    5cc8:	f7fe fbbd 	bl	4446 <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>

		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
    5ccc:	68bb      	ldr	r3, [r7, #8]
    5cce:	b2da      	uxtb	r2, r3
    5cd0:	4b07      	ldr	r3, [pc, #28]	; (5cf0 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
    5cd2:	0011      	movs	r1, r2
    5cd4:	0018      	movs	r0, r3
    5cd6:	f7fe fbf8 	bl	44ca <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
	}

	return len;
    5cda:	683b      	ldr	r3, [r7, #0]
}
    5cdc:	0018      	movs	r0, r3
    5cde:	46bd      	mov	sp, r7
    5ce0:	b004      	add	sp, #16
    5ce2:	bd80      	pop	{r7, pc}
    5ce4:	20000440 	.word	0x20000440
    5ce8:	2000043d 	.word	0x2000043d
    5cec:	200007c8 	.word	0x200007c8
    5cf0:	20000338 	.word	0x20000338
    5cf4:	20000448 	.word	0x20000448

00005cf8 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    5cf8:	b580      	push	{r7, lr}
    5cfa:	b084      	sub	sp, #16
    5cfc:	af00      	add	r7, sp, #0
    5cfe:	6078      	str	r0, [r7, #4]
    5d00:	6039      	str	r1, [r7, #0]
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    5d02:	230f      	movs	r3, #15
    5d04:	18fa      	adds	r2, r7, r3
    5d06:	6839      	ldr	r1, [r7, #0]
    5d08:	6878      	ldr	r0, [r7, #4]
    5d0a:	2301      	movs	r3, #1
    5d0c:	f7ff ff5e 	bl	5bcc <_ZN14USBDeviceClass4recvEmPvm>
    5d10:	0003      	movs	r3, r0
    5d12:	3b01      	subs	r3, #1
    5d14:	1e5a      	subs	r2, r3, #1
    5d16:	4193      	sbcs	r3, r2
    5d18:	b2db      	uxtb	r3, r3
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d002      	beq.n	5d24 <_ZN14USBDeviceClass4recvEm+0x2c>
		return -1;
    5d1e:	2301      	movs	r3, #1
    5d20:	425b      	negs	r3, r3
    5d22:	e002      	b.n	5d2a <_ZN14USBDeviceClass4recvEm+0x32>
	} else {
		return c;
    5d24:	230f      	movs	r3, #15
    5d26:	18fb      	adds	r3, r7, r3
    5d28:	781b      	ldrb	r3, [r3, #0]
	}
}
    5d2a:	0018      	movs	r0, r3
    5d2c:	46bd      	mov	sp, r7
    5d2e:	b004      	add	sp, #16
    5d30:	bd80      	pop	{r7, pc}
	...

00005d34 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    5d34:	b580      	push	{r7, lr}
    5d36:	b082      	sub	sp, #8
    5d38:	af00      	add	r7, sp, #0
    5d3a:	6078      	str	r0, [r7, #4]
    5d3c:	6039      	str	r1, [r7, #0]
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5d3e:	683b      	ldr	r3, [r7, #0]
    5d40:	b2d9      	uxtb	r1, r3
    5d42:	683b      	ldr	r3, [r7, #0]
    5d44:	019a      	lsls	r2, r3, #6
    5d46:	4b23      	ldr	r3, [pc, #140]	; (5dd4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa0>)
    5d48:	18d2      	adds	r2, r2, r3
    5d4a:	4b23      	ldr	r3, [pc, #140]	; (5dd8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d4c:	0018      	movs	r0, r3
    5d4e:	f7fe fd43 	bl	47d8 <_ZN20USBDevice_SAMD21G18x17epBank0SetAddressEhPv>
	usbd.epBank0SetMultiPacketSize(ep, 8);
    5d52:	683b      	ldr	r3, [r7, #0]
    5d54:	b2d9      	uxtb	r1, r3
    5d56:	4b20      	ldr	r3, [pc, #128]	; (5dd8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d58:	2208      	movs	r2, #8
    5d5a:	0018      	movs	r0, r3
    5d5c:	f7fe fcf2 	bl	4744 <_ZN20USBDevice_SAMD21G18x25epBank0SetMultiPacketSizeEht>
	usbd.epBank0SetByteCount(ep, 0);
    5d60:	683b      	ldr	r3, [r7, #0]
    5d62:	b2d9      	uxtb	r1, r3
    5d64:	4b1c      	ldr	r3, [pc, #112]	; (5dd8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d66:	2200      	movs	r2, #0
    5d68:	0018      	movs	r0, r3
    5d6a:	f7fe fca8 	bl	46be <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>

	usbd.epBank0ResetReady(ep);
    5d6e:	683b      	ldr	r3, [r7, #0]
    5d70:	b2da      	uxtb	r2, r3
    5d72:	4b19      	ldr	r3, [pc, #100]	; (5dd8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d74:	0011      	movs	r1, r2
    5d76:	0018      	movs	r0, r3
    5d78:	f7fe fc60 	bl	463c <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    5d7c:	683b      	ldr	r3, [r7, #0]
    5d7e:	b2da      	uxtb	r2, r3
    5d80:	4b15      	ldr	r3, [pc, #84]	; (5dd8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5d82:	0011      	movs	r1, r2
    5d84:	0018      	movs	r0, r3
    5d86:	f7fe fc00 	bl	458a <_ZN20USBDevice_SAMD21G18x14epBank0IsReadyEh>
    5d8a:	0003      	movs	r3, r0
    5d8c:	001a      	movs	r2, r3
    5d8e:	2301      	movs	r3, #1
    5d90:	4053      	eors	r3, r2
    5d92:	b2db      	uxtb	r3, r3
    5d94:	2b00      	cmp	r3, #0
    5d96:	d000      	beq.n	5d9a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x66>
    5d98:	e7f0      	b.n	5d7c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x48>
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    5d9a:	683b      	ldr	r3, [r7, #0]
    5d9c:	b2da      	uxtb	r2, r3
    5d9e:	4b0e      	ldr	r3, [pc, #56]	; (5dd8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5da0:	0011      	movs	r1, r2
    5da2:	0018      	movs	r0, r3
    5da4:	f7fe faf9 	bl	439a <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    5da8:	0003      	movs	r3, r0
    5daa:	001a      	movs	r2, r3
    5dac:	2301      	movs	r3, #1
    5dae:	4053      	eors	r3, r2
    5db0:	b2db      	uxtb	r3, r3
    5db2:	2b00      	cmp	r3, #0
    5db4:	d000      	beq.n	5db8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x84>
    5db6:	e7f0      	b.n	5d9a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x66>
	return usbd.epBank0ByteCount(ep);
    5db8:	683b      	ldr	r3, [r7, #0]
    5dba:	b2da      	uxtb	r2, r3
    5dbc:	4b06      	ldr	r3, [pc, #24]	; (5dd8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0xa4>)
    5dbe:	0011      	movs	r1, r2
    5dc0:	0018      	movs	r0, r3
    5dc2:	f7fe fc68 	bl	4696 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5dc6:	0003      	movs	r3, r0
    5dc8:	b2db      	uxtb	r3, r3
}
    5dca:	0018      	movs	r0, r3
    5dcc:	46bd      	mov	sp, r7
    5dce:	b002      	add	sp, #8
    5dd0:	bd80      	pop	{r7, pc}
    5dd2:	46c0      	nop			; (mov r8, r8)
    5dd4:	20000448 	.word	0x20000448
    5dd8:	20000338 	.word	0x20000338

00005ddc <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    5ddc:	b590      	push	{r4, r7, lr}
    5dde:	b085      	sub	sp, #20
    5de0:	af00      	add	r7, sp, #0
    5de2:	6078      	str	r0, [r7, #4]
    5de4:	6039      	str	r1, [r7, #0]
	uint16_t count = usbd.epBank0ByteCount(ep);
    5de6:	683b      	ldr	r3, [r7, #0]
    5de8:	b2da      	uxtb	r2, r3
    5dea:	230e      	movs	r3, #14
    5dec:	18fc      	adds	r4, r7, r3
    5dee:	4b16      	ldr	r3, [pc, #88]	; (5e48 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5df0:	0011      	movs	r1, r2
    5df2:	0018      	movs	r0, r3
    5df4:	f7fe fc4f 	bl	4696 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5df8:	0003      	movs	r3, r0
    5dfa:	8023      	strh	r3, [r4, #0]
	if (count >= 64) {
    5dfc:	230e      	movs	r3, #14
    5dfe:	18fb      	adds	r3, r7, r3
    5e00:	881b      	ldrh	r3, [r3, #0]
    5e02:	2b3f      	cmp	r3, #63	; 0x3f
    5e04:	dd0b      	ble.n	5e1e <_ZN14USBDeviceClass7armRecvEm+0x42>
		usbd.epBank0SetByteCount(ep, count - 64);
    5e06:	683b      	ldr	r3, [r7, #0]
    5e08:	b2d9      	uxtb	r1, r3
    5e0a:	230e      	movs	r3, #14
    5e0c:	18fb      	adds	r3, r7, r3
    5e0e:	881b      	ldrh	r3, [r3, #0]
    5e10:	3b40      	subs	r3, #64	; 0x40
    5e12:	b29a      	uxth	r2, r3
    5e14:	4b0c      	ldr	r3, [pc, #48]	; (5e48 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5e16:	0018      	movs	r0, r3
    5e18:	f7fe fc51 	bl	46be <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
    5e1c:	e006      	b.n	5e2c <_ZN14USBDeviceClass7armRecvEm+0x50>
	} else {
		usbd.epBank0SetByteCount(ep, 0);
    5e1e:	683b      	ldr	r3, [r7, #0]
    5e20:	b2d9      	uxtb	r1, r3
    5e22:	4b09      	ldr	r3, [pc, #36]	; (5e48 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5e24:	2200      	movs	r2, #0
    5e26:	0018      	movs	r0, r3
    5e28:	f7fe fc49 	bl	46be <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
	}
	return usbd.epBank0ByteCount(ep);
    5e2c:	683b      	ldr	r3, [r7, #0]
    5e2e:	b2da      	uxtb	r2, r3
    5e30:	4b05      	ldr	r3, [pc, #20]	; (5e48 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
    5e32:	0011      	movs	r1, r2
    5e34:	0018      	movs	r0, r3
    5e36:	f7fe fc2e 	bl	4696 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
    5e3a:	0003      	movs	r3, r0
    5e3c:	b2db      	uxtb	r3, r3
}
    5e3e:	0018      	movs	r0, r3
    5e40:	46bd      	mov	sp, r7
    5e42:	b005      	add	sp, #20
    5e44:	bd90      	pop	{r4, r7, pc}
    5e46:	46c0      	nop			; (mov r8, r8)
    5e48:	20000338 	.word	0x20000338

00005e4c <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    5e4c:	b580      	push	{r7, lr}
    5e4e:	b088      	sub	sp, #32
    5e50:	af00      	add	r7, sp, #0
    5e52:	60f8      	str	r0, [r7, #12]
    5e54:	60b9      	str	r1, [r7, #8]
    5e56:	607a      	str	r2, [r7, #4]
    5e58:	603b      	str	r3, [r7, #0]
	uint32_t written = 0;
    5e5a:	2300      	movs	r3, #0
    5e5c:	61fb      	str	r3, [r7, #28]
	uint32_t length = 0;
    5e5e:	2300      	movs	r3, #0
    5e60:	61bb      	str	r3, [r7, #24]

	if (!_usbConfiguration)
    5e62:	4b59      	ldr	r3, [pc, #356]	; (5fc8 <_ZN14USBDeviceClass4sendEmPKvm+0x17c>)
    5e64:	681b      	ldr	r3, [r3, #0]
    5e66:	425a      	negs	r2, r3
    5e68:	4153      	adcs	r3, r2
    5e6a:	b2db      	uxtb	r3, r3
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d002      	beq.n	5e76 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		return -1;
    5e70:	2301      	movs	r3, #1
    5e72:	425b      	negs	r3, r3
    5e74:	e0a4      	b.n	5fc0 <_ZN14USBDeviceClass4sendEmPKvm+0x174>
	if (len > 16384)
    5e76:	683a      	ldr	r2, [r7, #0]
    5e78:	2380      	movs	r3, #128	; 0x80
    5e7a:	01db      	lsls	r3, r3, #7
    5e7c:	429a      	cmp	r2, r3
    5e7e:	d902      	bls.n	5e86 <_ZN14USBDeviceClass4sendEmPKvm+0x3a>
		return -1;
    5e80:	2301      	movs	r3, #1
    5e82:	425b      	negs	r3, r3
    5e84:	e09c      	b.n	5fc0 <_ZN14USBDeviceClass4sendEmPKvm+0x174>

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    5e86:	4b51      	ldr	r3, [pc, #324]	; (5fcc <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    5e88:	781b      	ldrb	r3, [r3, #0]
    5e8a:	b2db      	uxtb	r3, r3
    5e8c:	425a      	negs	r2, r3
    5e8e:	4153      	adcs	r3, r2
    5e90:	b2db      	uxtb	r3, r3
    5e92:	2b00      	cmp	r3, #0
    5e94:	d003      	beq.n	5e9e <_ZN14USBDeviceClass4sendEmPKvm+0x52>
		digitalWrite(PIN_LED_TXL, LOW);
    5e96:	2100      	movs	r1, #0
    5e98:	201f      	movs	r0, #31
    5e9a:	f000 fe37 	bl	6b0c <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    5e9e:	4b4b      	ldr	r3, [pc, #300]	; (5fcc <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    5ea0:	2264      	movs	r2, #100	; 0x64
    5ea2:	701a      	strb	r2, [r3, #0]
#endif

	// Flash area
	while (len != 0)
    5ea4:	683b      	ldr	r3, [r7, #0]
    5ea6:	2b00      	cmp	r3, #0
    5ea8:	d100      	bne.n	5eac <_ZN14USBDeviceClass4sendEmPKvm+0x60>
    5eaa:	e088      	b.n	5fbe <_ZN14USBDeviceClass4sendEmPKvm+0x172>
	{
		if (usbd.epBank1IsReady(ep)) {
    5eac:	68bb      	ldr	r3, [r7, #8]
    5eae:	b2da      	uxtb	r2, r3
    5eb0:	4b47      	ldr	r3, [pc, #284]	; (5fd0 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5eb2:	0011      	movs	r1, r2
    5eb4:	0018      	movs	r0, r3
    5eb6:	f7fe fb7e 	bl	45b6 <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>
    5eba:	1e03      	subs	r3, r0, #0
    5ebc:	d03c      	beq.n	5f38 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
			// previous transfer is still not complete

			// convert the timeout from microseconds to a number of times through
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    5ebe:	4b45      	ldr	r3, [pc, #276]	; (5fd4 <_ZN14USBDeviceClass4sendEmPKvm+0x188>)
    5ec0:	681b      	ldr	r3, [r3, #0]
    5ec2:	4945      	ldr	r1, [pc, #276]	; (5fd8 <_ZN14USBDeviceClass4sendEmPKvm+0x18c>)
    5ec4:	0018      	movs	r0, r3
    5ec6:	f008 fd11 	bl	e8ec <__udivsi3>
    5eca:	0003      	movs	r3, r0
    5ecc:	001a      	movs	r2, r3
    5ece:	4b43      	ldr	r3, [pc, #268]	; (5fdc <_ZN14USBDeviceClass4sendEmPKvm+0x190>)
    5ed0:	4353      	muls	r3, r2
    5ed2:	2117      	movs	r1, #23
    5ed4:	0018      	movs	r0, r3
    5ed6:	f008 fd09 	bl	e8ec <__udivsi3>
    5eda:	0003      	movs	r3, r0
    5edc:	617b      	str	r3, [r7, #20]

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
    5ede:	68bb      	ldr	r3, [r7, #8]
    5ee0:	b2da      	uxtb	r2, r3
    5ee2:	4b3b      	ldr	r3, [pc, #236]	; (5fd0 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5ee4:	0011      	movs	r1, r2
    5ee6:	0018      	movs	r0, r3
    5ee8:	f7fe fa6d 	bl	43c6 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    5eec:	0003      	movs	r3, r0
    5eee:	001a      	movs	r2, r3
    5ef0:	2301      	movs	r3, #1
    5ef2:	4053      	eors	r3, r2
    5ef4:	b2db      	uxtb	r3, r3
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	d01e      	beq.n	5f38 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    5efa:	4a39      	ldr	r2, [pc, #228]	; (5fe0 <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    5efc:	68bb      	ldr	r3, [r7, #8]
    5efe:	18d3      	adds	r3, r2, r3
    5f00:	781b      	ldrb	r3, [r3, #0]
    5f02:	2b00      	cmp	r3, #0
    5f04:	d104      	bne.n	5f10 <_ZN14USBDeviceClass4sendEmPKvm+0xc4>
    5f06:	697b      	ldr	r3, [r7, #20]
    5f08:	1e5a      	subs	r2, r3, #1
    5f0a:	617a      	str	r2, [r7, #20]
    5f0c:	2b00      	cmp	r3, #0
    5f0e:	d101      	bne.n	5f14 <_ZN14USBDeviceClass4sendEmPKvm+0xc8>
    5f10:	2301      	movs	r3, #1
    5f12:	e000      	b.n	5f16 <_ZN14USBDeviceClass4sendEmPKvm+0xca>
    5f14:	2300      	movs	r3, #0
    5f16:	2b00      	cmp	r3, #0
    5f18:	d0e1      	beq.n	5ede <_ZN14USBDeviceClass4sendEmPKvm+0x92>
					LastTransmitTimedOut[ep] = 1;
    5f1a:	4a31      	ldr	r2, [pc, #196]	; (5fe0 <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    5f1c:	68bb      	ldr	r3, [r7, #8]
    5f1e:	18d3      	adds	r3, r2, r3
    5f20:	2201      	movs	r2, #1
    5f22:	701a      	strb	r2, [r3, #0]

					// set byte count to zero, so that ZLP is sent
					// instead of stale data
					usbd.epBank1SetByteCount(ep, 0);
    5f24:	68bb      	ldr	r3, [r7, #8]
    5f26:	b2d9      	uxtb	r1, r3
    5f28:	4b29      	ldr	r3, [pc, #164]	; (5fd0 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f2a:	2200      	movs	r2, #0
    5f2c:	0018      	movs	r0, r3
    5f2e:	f7fe fbe7 	bl	4700 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
					return -1;
    5f32:	2301      	movs	r3, #1
    5f34:	425b      	negs	r3, r3
    5f36:	e043      	b.n	5fc0 <_ZN14USBDeviceClass4sendEmPKvm+0x174>
				}
			}
		}

		LastTransmitTimedOut[ep] = 0;
    5f38:	4a29      	ldr	r2, [pc, #164]	; (5fe0 <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    5f3a:	68bb      	ldr	r3, [r7, #8]
    5f3c:	18d3      	adds	r3, r2, r3
    5f3e:	2200      	movs	r2, #0
    5f40:	701a      	strb	r2, [r3, #0]

		if (len >= EPX_SIZE) {
    5f42:	683b      	ldr	r3, [r7, #0]
    5f44:	2b3f      	cmp	r3, #63	; 0x3f
    5f46:	d902      	bls.n	5f4e <_ZN14USBDeviceClass4sendEmPKvm+0x102>
			length = EPX_SIZE - 1;
    5f48:	233f      	movs	r3, #63	; 0x3f
    5f4a:	61bb      	str	r3, [r7, #24]
    5f4c:	e001      	b.n	5f52 <_ZN14USBDeviceClass4sendEmPKvm+0x106>
		} else {
			length = len;
    5f4e:	683b      	ldr	r3, [r7, #0]
    5f50:	61bb      	str	r3, [r7, #24]
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    5f52:	68bb      	ldr	r3, [r7, #8]
    5f54:	019a      	lsls	r2, r3, #6
    5f56:	4b23      	ldr	r3, [pc, #140]	; (5fe4 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    5f58:	18d3      	adds	r3, r2, r3
    5f5a:	69ba      	ldr	r2, [r7, #24]
    5f5c:	6879      	ldr	r1, [r7, #4]
    5f5e:	0018      	movs	r0, r3
    5f60:	f00a fc91 	bl	10886 <memcpy>

		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    5f64:	68bb      	ldr	r3, [r7, #8]
    5f66:	b2d9      	uxtb	r1, r3
    5f68:	68bb      	ldr	r3, [r7, #8]
    5f6a:	019a      	lsls	r2, r3, #6
    5f6c:	4b1d      	ldr	r3, [pc, #116]	; (5fe4 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    5f6e:	18d2      	adds	r2, r2, r3
    5f70:	4b17      	ldr	r3, [pc, #92]	; (5fd0 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f72:	0018      	movs	r0, r3
    5f74:	f7fe fc46 	bl	4804 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetByteCount(ep, length);
    5f78:	68bb      	ldr	r3, [r7, #8]
    5f7a:	b2d9      	uxtb	r1, r3
    5f7c:	69bb      	ldr	r3, [r7, #24]
    5f7e:	b29a      	uxth	r2, r3
    5f80:	4b13      	ldr	r3, [pc, #76]	; (5fd0 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f82:	0018      	movs	r0, r3
    5f84:	f7fe fbbc 	bl	4700 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

		// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    5f88:	68bb      	ldr	r3, [r7, #8]
    5f8a:	b2da      	uxtb	r2, r3
    5f8c:	4b10      	ldr	r3, [pc, #64]	; (5fd0 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f8e:	0011      	movs	r1, r2
    5f90:	0018      	movs	r0, r3
    5f92:	f7fe fa6d 	bl	4470 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    5f96:	68bb      	ldr	r3, [r7, #8]
    5f98:	b2da      	uxtb	r2, r3
    5f9a:	4b0d      	ldr	r3, [pc, #52]	; (5fd0 <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    5f9c:	0011      	movs	r1, r2
    5f9e:	0018      	movs	r0, r3
    5fa0:	f7fe fb35 	bl	460e <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

		written += length;
    5fa4:	69fa      	ldr	r2, [r7, #28]
    5fa6:	69bb      	ldr	r3, [r7, #24]
    5fa8:	18d3      	adds	r3, r2, r3
    5faa:	61fb      	str	r3, [r7, #28]
		len -= length;
    5fac:	683a      	ldr	r2, [r7, #0]
    5fae:	69bb      	ldr	r3, [r7, #24]
    5fb0:	1ad3      	subs	r3, r2, r3
    5fb2:	603b      	str	r3, [r7, #0]
		data = (char *)data + length;
    5fb4:	687a      	ldr	r2, [r7, #4]
    5fb6:	69bb      	ldr	r3, [r7, #24]
    5fb8:	18d3      	adds	r3, r2, r3
    5fba:	607b      	str	r3, [r7, #4]
	while (len != 0)
    5fbc:	e772      	b.n	5ea4 <_ZN14USBDeviceClass4sendEmPKvm+0x58>
	}
	return written;
    5fbe:	69fb      	ldr	r3, [r7, #28]
}
    5fc0:	0018      	movs	r0, r3
    5fc2:	46bd      	mov	sp, r7
    5fc4:	b008      	add	sp, #32
    5fc6:	bd80      	pop	{r7, pc}
    5fc8:	20000440 	.word	0x20000440
    5fcc:	2000043c 	.word	0x2000043c
    5fd0:	20000338 	.word	0x20000338
    5fd4:	20000048 	.word	0x20000048
    5fd8:	000f4240 	.word	0x000f4240
    5fdc:	00011170 	.word	0x00011170
    5fe0:	200008e8 	.word	0x200008e8
    5fe4:	20000608 	.word	0x20000608

00005fe8 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    5fe8:	b580      	push	{r7, lr}
    5fea:	b084      	sub	sp, #16
    5fec:	af00      	add	r7, sp, #0
    5fee:	60f8      	str	r0, [r7, #12]
    5ff0:	60b9      	str	r1, [r7, #8]
    5ff2:	607a      	str	r2, [r7, #4]
    5ff4:	603b      	str	r3, [r7, #0]
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    5ff6:	68bb      	ldr	r3, [r7, #8]
    5ff8:	019a      	lsls	r2, r3, #6
    5ffa:	4b12      	ldr	r3, [pc, #72]	; (6044 <_ZN14USBDeviceClass7armSendEmPKvm+0x5c>)
    5ffc:	18d3      	adds	r3, r2, r3
    5ffe:	683a      	ldr	r2, [r7, #0]
    6000:	6879      	ldr	r1, [r7, #4]
    6002:	0018      	movs	r0, r3
    6004:	f00a fc3f 	bl	10886 <memcpy>

	// Get endpoint configuration from setting register
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    6008:	68bb      	ldr	r3, [r7, #8]
    600a:	b2d9      	uxtb	r1, r3
    600c:	68bb      	ldr	r3, [r7, #8]
    600e:	019a      	lsls	r2, r3, #6
    6010:	4b0c      	ldr	r3, [pc, #48]	; (6044 <_ZN14USBDeviceClass7armSendEmPKvm+0x5c>)
    6012:	18d2      	adds	r2, r2, r3
    6014:	4b0c      	ldr	r3, [pc, #48]	; (6048 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    6016:	0018      	movs	r0, r3
    6018:	f7fe fbf4 	bl	4804 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
	usbd.epBank1SetMultiPacketSize(ep, 0);
    601c:	68bb      	ldr	r3, [r7, #8]
    601e:	b2d9      	uxtb	r1, r3
    6020:	4b09      	ldr	r3, [pc, #36]	; (6048 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    6022:	2200      	movs	r2, #0
    6024:	0018      	movs	r0, r3
    6026:	f7fe fbb1 	bl	478c <_ZN20USBDevice_SAMD21G18x25epBank1SetMultiPacketSizeEht>
	usbd.epBank1SetByteCount(ep, len);
    602a:	68bb      	ldr	r3, [r7, #8]
    602c:	b2d9      	uxtb	r1, r3
    602e:	683b      	ldr	r3, [r7, #0]
    6030:	b29a      	uxth	r2, r3
    6032:	4b05      	ldr	r3, [pc, #20]	; (6048 <_ZN14USBDeviceClass7armSendEmPKvm+0x60>)
    6034:	0018      	movs	r0, r3
    6036:	f7fe fb63 	bl	4700 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

	return len;
    603a:	683b      	ldr	r3, [r7, #0]
}
    603c:	0018      	movs	r0, r3
    603e:	46bd      	mov	sp, r7
    6040:	b004      	add	sp, #16
    6042:	bd80      	pop	{r7, pc}
    6044:	20000608 	.word	0x20000608
    6048:	20000338 	.word	0x20000338

0000604c <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    604c:	b580      	push	{r7, lr}
    604e:	b088      	sub	sp, #32
    6050:	af00      	add	r7, sp, #0
    6052:	60f8      	str	r0, [r7, #12]
    6054:	60b9      	str	r1, [r7, #8]
    6056:	607a      	str	r2, [r7, #4]
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
    6058:	68bb      	ldr	r3, [r7, #8]
    605a:	61bb      	str	r3, [r7, #24]
	uint32_t length = len;
    605c:	687b      	ldr	r3, [r7, #4]
    605e:	617b      	str	r3, [r7, #20]
	uint32_t sent = 0;
    6060:	2300      	movs	r3, #0
    6062:	613b      	str	r3, [r7, #16]
	uint32_t pos = 0;
    6064:	2300      	movs	r3, #0
    6066:	61fb      	str	r3, [r7, #28]

	if (_dry_run == true)
    6068:	4b1c      	ldr	r3, [pc, #112]	; (60dc <_ZN14USBDeviceClass11sendControlEPKvm+0x90>)
    606a:	781b      	ldrb	r3, [r3, #0]
    606c:	2b00      	cmp	r3, #0
    606e:	d001      	beq.n	6074 <_ZN14USBDeviceClass11sendControlEPKvm+0x28>
		return length;
    6070:	697b      	ldr	r3, [r7, #20]
    6072:	e02e      	b.n	60d2 <_ZN14USBDeviceClass11sendControlEPKvm+0x86>

	if (_pack_message == true) {
    6074:	4b1a      	ldr	r3, [pc, #104]	; (60e0 <_ZN14USBDeviceClass11sendControlEPKvm+0x94>)
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	2b00      	cmp	r3, #0
    607a:	d013      	beq.n	60a4 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>
		memcpy(&_pack_buffer[_pack_size], data, len);
    607c:	4b19      	ldr	r3, [pc, #100]	; (60e4 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    607e:	881b      	ldrh	r3, [r3, #0]
    6080:	001a      	movs	r2, r3
    6082:	4b19      	ldr	r3, [pc, #100]	; (60e8 <_ZN14USBDeviceClass11sendControlEPKvm+0x9c>)
    6084:	18d3      	adds	r3, r2, r3
    6086:	687a      	ldr	r2, [r7, #4]
    6088:	69b9      	ldr	r1, [r7, #24]
    608a:	0018      	movs	r0, r3
    608c:	f00a fbfb 	bl	10886 <memcpy>
		_pack_size += len;
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	b29a      	uxth	r2, r3
    6094:	4b13      	ldr	r3, [pc, #76]	; (60e4 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    6096:	881b      	ldrh	r3, [r3, #0]
    6098:	18d3      	adds	r3, r2, r3
    609a:	b29a      	uxth	r2, r3
    609c:	4b11      	ldr	r3, [pc, #68]	; (60e4 <_ZN14USBDeviceClass11sendControlEPKvm+0x98>)
    609e:	801a      	strh	r2, [r3, #0]
		return length;
    60a0:	697b      	ldr	r3, [r7, #20]
    60a2:	e016      	b.n	60d2 <_ZN14USBDeviceClass11sendControlEPKvm+0x86>
	}

 	while (len > 0)
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	2b00      	cmp	r3, #0
    60a8:	d012      	beq.n	60d0 <_ZN14USBDeviceClass11sendControlEPKvm+0x84>
 	{
		sent = armSend(EP0, data + pos, len);
    60aa:	69ba      	ldr	r2, [r7, #24]
    60ac:	69fb      	ldr	r3, [r7, #28]
    60ae:	18d2      	adds	r2, r2, r3
    60b0:	687b      	ldr	r3, [r7, #4]
    60b2:	68f8      	ldr	r0, [r7, #12]
    60b4:	2100      	movs	r1, #0
    60b6:	f7ff ff97 	bl	5fe8 <_ZN14USBDeviceClass7armSendEmPKvm>
    60ba:	0003      	movs	r3, r0
    60bc:	613b      	str	r3, [r7, #16]
		pos += sent;
    60be:	69fa      	ldr	r2, [r7, #28]
    60c0:	693b      	ldr	r3, [r7, #16]
    60c2:	18d3      	adds	r3, r2, r3
    60c4:	61fb      	str	r3, [r7, #28]
		len -= sent;
    60c6:	687a      	ldr	r2, [r7, #4]
    60c8:	693b      	ldr	r3, [r7, #16]
    60ca:	1ad3      	subs	r3, r2, r3
    60cc:	607b      	str	r3, [r7, #4]
 	while (len > 0)
    60ce:	e7e9      	b.n	60a4 <_ZN14USBDeviceClass11sendControlEPKvm+0x58>
 	}

	return length;
    60d0:	697b      	ldr	r3, [r7, #20]
}
    60d2:	0018      	movs	r0, r3
    60d4:	46bd      	mov	sp, r7
    60d6:	b008      	add	sp, #32
    60d8:	bd80      	pop	{r7, pc}
    60da:	46c0      	nop			; (mov r8, r8)
    60dc:	200007e4 	.word	0x200007e4
    60e0:	200007e5 	.word	0x200007e5
    60e4:	200007e6 	.word	0x200007e6
    60e8:	200007e8 	.word	0x200007e8

000060ec <_ZN14USBDeviceClass7sendZlpEm>:

void USBDeviceClass::sendZlp(uint32_t ep)
{
    60ec:	b580      	push	{r7, lr}
    60ee:	b082      	sub	sp, #8
    60f0:	af00      	add	r7, sp, #0
    60f2:	6078      	str	r0, [r7, #4]
    60f4:	6039      	str	r1, [r7, #0]
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
    60f6:	683b      	ldr	r3, [r7, #0]
    60f8:	b2d9      	uxtb	r1, r3
    60fa:	4b04      	ldr	r3, [pc, #16]	; (610c <_ZN14USBDeviceClass7sendZlpEm+0x20>)
    60fc:	2200      	movs	r2, #0
    60fe:	0018      	movs	r0, r3
    6100:	f7fe fafe 	bl	4700 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
}
    6104:	46c0      	nop			; (mov r8, r8)
    6106:	46bd      	mov	sp, r7
    6108:	b002      	add	sp, #8
    610a:	bd80      	pop	{r7, pc}
    610c:	20000338 	.word	0x20000338

00006110 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    6110:	b580      	push	{r7, lr}
    6112:	b086      	sub	sp, #24
    6114:	af00      	add	r7, sp, #0
    6116:	6078      	str	r0, [r7, #4]
    6118:	6039      	str	r1, [r7, #0]
	switch (setup.bRequest) {
    611a:	683b      	ldr	r3, [r7, #0]
    611c:	785b      	ldrb	r3, [r3, #1]
    611e:	2b0b      	cmp	r3, #11
    6120:	d900      	bls.n	6124 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x14>
    6122:	e0cd      	b.n	62c0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b0>
    6124:	009a      	lsls	r2, r3, #2
    6126:	4b69      	ldr	r3, [pc, #420]	; (62cc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1bc>)
    6128:	18d3      	adds	r3, r2, r3
    612a:	681b      	ldr	r3, [r3, #0]
    612c:	469f      	mov	pc, r3
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    612e:	683b      	ldr	r3, [r7, #0]
    6130:	781b      	ldrb	r3, [r3, #0]
    6132:	2b00      	cmp	r3, #0
    6134:	d110      	bne.n	6158 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x48>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
    6136:	2314      	movs	r3, #20
    6138:	18fb      	adds	r3, r7, r3
    613a:	2200      	movs	r2, #0
    613c:	701a      	strb	r2, [r3, #0]
    613e:	2314      	movs	r3, #20
    6140:	18fb      	adds	r3, r7, r3
    6142:	2200      	movs	r2, #0
    6144:	705a      	strb	r2, [r3, #1]
			armSend(0, buff, 2);
    6146:	2314      	movs	r3, #20
    6148:	18fa      	adds	r2, r7, r3
    614a:	6878      	ldr	r0, [r7, #4]
    614c:	2302      	movs	r3, #2
    614e:	2100      	movs	r1, #0
    6150:	f7ff ff4a 	bl	5fe8 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    6154:	2301      	movs	r3, #1
    6156:	e0b4      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		// if( setup.bmRequestType == 2 ) // Endpoint:
		else
		{
			// Send the endpoint status
			// Check if the endpoint if currently halted
			uint8_t buff[] = { 0, 0 };
    6158:	2310      	movs	r3, #16
    615a:	18fb      	adds	r3, r7, r3
    615c:	2200      	movs	r2, #0
    615e:	701a      	strb	r2, [r3, #0]
    6160:	2310      	movs	r3, #16
    6162:	18fb      	adds	r3, r7, r3
    6164:	2200      	movs	r2, #0
    6166:	705a      	strb	r2, [r3, #1]
			if (isEndpointHalt == 1)
    6168:	4b59      	ldr	r3, [pc, #356]	; (62d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    616a:	781b      	ldrb	r3, [r3, #0]
    616c:	2b01      	cmp	r3, #1
    616e:	d103      	bne.n	6178 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x68>
				buff[0] = 1;
    6170:	2310      	movs	r3, #16
    6172:	18fb      	adds	r3, r7, r3
    6174:	2201      	movs	r2, #1
    6176:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 2);
    6178:	2310      	movs	r3, #16
    617a:	18fa      	adds	r2, r7, r3
    617c:	6878      	ldr	r0, [r7, #4]
    617e:	2302      	movs	r3, #2
    6180:	2100      	movs	r1, #0
    6182:	f7ff ff31 	bl	5fe8 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    6186:	2301      	movs	r3, #1
    6188:	e09b      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case CLEAR_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    618a:	683b      	ldr	r3, [r7, #0]
    618c:	789b      	ldrb	r3, [r3, #2]
    618e:	2b01      	cmp	r3, #1
    6190:	d118      	bne.n	61c4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xb4>
		{
			// Enable remote wake-up and send a ZLP
			uint8_t buff[] = { 0, 0 };
    6192:	230c      	movs	r3, #12
    6194:	18fb      	adds	r3, r7, r3
    6196:	2200      	movs	r2, #0
    6198:	701a      	strb	r2, [r3, #0]
    619a:	230c      	movs	r3, #12
    619c:	18fb      	adds	r3, r7, r3
    619e:	2200      	movs	r2, #0
    61a0:	705a      	strb	r2, [r3, #1]
			if (isRemoteWakeUpEnabled == 1)
    61a2:	4b4c      	ldr	r3, [pc, #304]	; (62d4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c4>)
    61a4:	781b      	ldrb	r3, [r3, #0]
    61a6:	2b01      	cmp	r3, #1
    61a8:	d103      	bne.n	61b2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xa2>
				buff[0] = 1;
    61aa:	230c      	movs	r3, #12
    61ac:	18fb      	adds	r3, r7, r3
    61ae:	2201      	movs	r2, #1
    61b0:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 2);
    61b2:	230c      	movs	r3, #12
    61b4:	18fa      	adds	r2, r7, r3
    61b6:	6878      	ldr	r0, [r7, #4]
    61b8:	2302      	movs	r3, #2
    61ba:	2100      	movs	r1, #0
    61bc:	f7ff ff14 	bl	5fe8 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    61c0:	2301      	movs	r3, #1
    61c2:	e07e      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}
		else // if( setup.wValueL == 0) // ENDPOINTHALT
		{
			isEndpointHalt = 0;
    61c4:	4b42      	ldr	r3, [pc, #264]	; (62d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    61c6:	2200      	movs	r2, #0
    61c8:	701a      	strb	r2, [r3, #0]
			sendZlp(0);
    61ca:	687b      	ldr	r3, [r7, #4]
    61cc:	2100      	movs	r1, #0
    61ce:	0018      	movs	r0, r3
    61d0:	f7ff ff8c 	bl	60ec <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    61d4:	2301      	movs	r3, #1
    61d6:	e074      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    61d8:	683b      	ldr	r3, [r7, #0]
    61da:	789b      	ldrb	r3, [r3, #2]
    61dc:	2b01      	cmp	r3, #1
    61de:	d10f      	bne.n	6200 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    61e0:	4b3c      	ldr	r3, [pc, #240]	; (62d4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c4>)
    61e2:	2201      	movs	r2, #1
    61e4:	701a      	strb	r2, [r3, #0]
			uint8_t buff[] = { 0 };
    61e6:	2308      	movs	r3, #8
    61e8:	18fb      	adds	r3, r7, r3
    61ea:	2200      	movs	r2, #0
    61ec:	701a      	strb	r2, [r3, #0]
			armSend(0, buff, 1);
    61ee:	2308      	movs	r3, #8
    61f0:	18fa      	adds	r2, r7, r3
    61f2:	6878      	ldr	r0, [r7, #4]
    61f4:	2301      	movs	r3, #1
    61f6:	2100      	movs	r1, #0
    61f8:	f7ff fef6 	bl	5fe8 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    61fc:	2301      	movs	r3, #1
    61fe:	e060      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}
		if (setup.wValueL == 0) // ENDPOINTHALT
    6200:	683b      	ldr	r3, [r7, #0]
    6202:	789b      	ldrb	r3, [r3, #2]
    6204:	2b00      	cmp	r3, #0
    6206:	d109      	bne.n	621c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x10c>
		{
			// Halt endpoint
			isEndpointHalt = 1;
    6208:	4b31      	ldr	r3, [pc, #196]	; (62d0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c0>)
    620a:	2201      	movs	r2, #1
    620c:	701a      	strb	r2, [r3, #0]
			sendZlp(0);
    620e:	687b      	ldr	r3, [r7, #4]
    6210:	2100      	movs	r1, #0
    6212:	0018      	movs	r0, r3
    6214:	f7ff ff6a 	bl	60ec <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    6218:	2301      	movs	r3, #1
    621a:	e052      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case SET_ADDRESS:
		setAddress(setup.wValueL);
    621c:	683b      	ldr	r3, [r7, #0]
    621e:	789b      	ldrb	r3, [r3, #2]
    6220:	001a      	movs	r2, r3
    6222:	687b      	ldr	r3, [r7, #4]
    6224:	0011      	movs	r1, r2
    6226:	0018      	movs	r0, r3
    6228:	f7ff fad2 	bl	57d0 <_ZN14USBDeviceClass10setAddressEm>
		return true;
    622c:	2301      	movs	r3, #1
    622e:	e048      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);
    6230:	683a      	ldr	r2, [r7, #0]
    6232:	687b      	ldr	r3, [r7, #4]
    6234:	0011      	movs	r1, r2
    6236:	0018      	movs	r0, r3
    6238:	f7ff f8e4 	bl	5404 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    623c:	0003      	movs	r3, r0
    623e:	e040      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_DESCRIPTOR:
		return false;
    6240:	2300      	movs	r3, #0
    6242:	e03e      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
    6244:	4a24      	ldr	r2, [pc, #144]	; (62d8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c8>)
    6246:	6878      	ldr	r0, [r7, #4]
    6248:	2301      	movs	r3, #1
    624a:	2100      	movs	r1, #0
    624c:	f7ff fecc 	bl	5fe8 <_ZN14USBDeviceClass7armSendEmPKvm>
		return true;
    6250:	2301      	movs	r3, #1
    6252:	e036      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    6254:	683b      	ldr	r3, [r7, #0]
    6256:	781b      	ldrb	r3, [r3, #0]
    6258:	001a      	movs	r2, r3
    625a:	231f      	movs	r3, #31
    625c:	4013      	ands	r3, r2
    625e:	d119      	bne.n	6294 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x184>

			initEndpoints();
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	0018      	movs	r0, r3
    6264:	f7ff fb36 	bl	58d4 <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    6268:	683b      	ldr	r3, [r7, #0]
    626a:	789b      	ldrb	r3, [r3, #2]
    626c:	001a      	movs	r2, r3
    626e:	4b1a      	ldr	r3, [pc, #104]	; (62d8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1c8>)
    6270:	601a      	str	r2, [r3, #0]

			#if defined(CDC_ENABLED)
			// Enable interrupt for CDC reception from host (OUT packet)
			usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
    6272:	4b1a      	ldr	r3, [pc, #104]	; (62dc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1cc>)
    6274:	2101      	movs	r1, #1
    6276:	0018      	movs	r0, r3
    6278:	f7fe f93f 	bl	44fa <_ZN20USBDevice_SAMD21G18x29epBank1EnableTransferCompleteEh>
			usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
    627c:	4b17      	ldr	r3, [pc, #92]	; (62dc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1cc>)
    627e:	2102      	movs	r1, #2
    6280:	0018      	movs	r0, r3
    6282:	f7fe f922 	bl	44ca <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
			#endif

			sendZlp(0);
    6286:	687b      	ldr	r3, [r7, #4]
    6288:	2100      	movs	r1, #0
    628a:	0018      	movs	r0, r3
    628c:	f7ff ff2e 	bl	60ec <_ZN14USBDeviceClass7sendZlpEm>
			return true;
    6290:	2301      	movs	r3, #1
    6292:	e016      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		} else {
			return false;
    6294:	2300      	movs	r3, #0
    6296:	e014      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>
		}

	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
    6298:	4a11      	ldr	r2, [pc, #68]	; (62e0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1d0>)
    629a:	6878      	ldr	r0, [r7, #4]
    629c:	2301      	movs	r3, #1
    629e:	2100      	movs	r1, #0
    62a0:	f7ff fea2 	bl	5fe8 <_ZN14USBDeviceClass7armSendEmPKvm>
		return true;
    62a4:	2301      	movs	r3, #1
    62a6:	e00c      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	case SET_INTERFACE:
		_usbSetInterface = setup.wValueL;
    62a8:	683b      	ldr	r3, [r7, #0]
    62aa:	789b      	ldrb	r3, [r3, #2]
    62ac:	001a      	movs	r2, r3
    62ae:	4b0c      	ldr	r3, [pc, #48]	; (62e0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1d0>)
    62b0:	601a      	str	r2, [r3, #0]
		sendZlp(0);
    62b2:	687b      	ldr	r3, [r7, #4]
    62b4:	2100      	movs	r1, #0
    62b6:	0018      	movs	r0, r3
    62b8:	f7ff ff18 	bl	60ec <_ZN14USBDeviceClass7sendZlpEm>
		return true;
    62bc:	2301      	movs	r3, #1
    62be:	e000      	b.n	62c2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x1b2>

	default:
		return true;
    62c0:	2301      	movs	r3, #1
	}
}
    62c2:	0018      	movs	r0, r3
    62c4:	46bd      	mov	sp, r7
    62c6:	b006      	add	sp, #24
    62c8:	bd80      	pop	{r7, pc}
    62ca:	46c0      	nop			; (mov r8, r8)
    62cc:	0001350c 	.word	0x0001350c
    62d0:	2000043f 	.word	0x2000043f
    62d4:	2000043e 	.word	0x2000043e
    62d8:	20000440 	.word	0x20000440
    62dc:	20000338 	.word	0x20000338
    62e0:	20000444 	.word	0x20000444

000062e4 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
    62e4:	b590      	push	{r4, r7, lr}
    62e6:	b085      	sub	sp, #20
    62e8:	af00      	add	r7, sp, #0
    62ea:	6078      	str	r0, [r7, #4]

	if (_pack_message == true) {
    62ec:	4b95      	ldr	r3, [pc, #596]	; (6544 <_ZN14USBDeviceClass10ISRHandlerEv+0x260>)
    62ee:	781b      	ldrb	r3, [r3, #0]
    62f0:	2b00      	cmp	r3, #0
    62f2:	d000      	beq.n	62f6 <_ZN14USBDeviceClass10ISRHandlerEv+0x12>
    62f4:	e120      	b.n	6538 <_ZN14USBDeviceClass10ISRHandlerEv+0x254>
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    62f6:	4b94      	ldr	r3, [pc, #592]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    62f8:	0018      	movs	r0, r3
    62fa:	f7fd ff7d 	bl	41f8 <_ZN20USBDevice_SAMD21G18x21isEndOfResetInterruptEv>
    62fe:	1e03      	subs	r3, r0, #0
    6300:	d011      	beq.n	6326 <_ZN14USBDeviceClass10ISRHandlerEv+0x42>
	{
		// Configure EP 0
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);
    6302:	687b      	ldr	r3, [r7, #4]
    6304:	2200      	movs	r2, #0
    6306:	2100      	movs	r1, #0
    6308:	0018      	movs	r0, r3
    630a:	f7ff fb13 	bl	5934 <_ZN14USBDeviceClass6initEPEmm>

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);
    630e:	4b8e      	ldr	r3, [pc, #568]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6310:	2100      	movs	r1, #0
    6312:	0018      	movs	r0, r3
    6314:	f7fe f8c1 	bl	449a <_ZN20USBDevice_SAMD21G18x26epBank0EnableSetupReceivedEh>

		_usbConfiguration = 0;
    6318:	4b8c      	ldr	r3, [pc, #560]	; (654c <_ZN14USBDeviceClass10ISRHandlerEv+0x268>)
    631a:	2200      	movs	r2, #0
    631c:	601a      	str	r2, [r3, #0]

		usbd.ackEndOfResetInterrupt();
    631e:	4b8a      	ldr	r3, [pc, #552]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6320:	0018      	movs	r0, r3
    6322:	f7fd ff77 	bl	4214 <_ZN20USBDevice_SAMD21G18x22ackEndOfResetInterruptEv>
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    6326:	4b88      	ldr	r3, [pc, #544]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6328:	0018      	movs	r0, r3
    632a:	f7fd ff8d 	bl	4248 <_ZN20USBDevice_SAMD21G18x23isStartOfFrameInterruptEv>
    632e:	1e03      	subs	r3, r0, #0
    6330:	d03b      	beq.n	63aa <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
	{
		usbd.ackStartOfFrameInterrupt();
    6332:	4b85      	ldr	r3, [pc, #532]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6334:	0018      	movs	r0, r3
    6336:	f7fd ff95 	bl	4264 <_ZN20USBDevice_SAMD21G18x24ackStartOfFrameInterruptEv>

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    633a:	4b85      	ldr	r3, [pc, #532]	; (6550 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    633c:	781b      	ldrb	r3, [r3, #0]
    633e:	b2db      	uxtb	r3, r3
    6340:	17da      	asrs	r2, r3, #31
    6342:	1ad3      	subs	r3, r2, r3
    6344:	0fdb      	lsrs	r3, r3, #31
    6346:	b2db      	uxtb	r3, r3
    6348:	2b00      	cmp	r3, #0
    634a:	d012      	beq.n	6372 <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
			txLEDPulse--;
    634c:	4b80      	ldr	r3, [pc, #512]	; (6550 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    634e:	781b      	ldrb	r3, [r3, #0]
    6350:	b2db      	uxtb	r3, r3
    6352:	3b01      	subs	r3, #1
    6354:	b2da      	uxtb	r2, r3
    6356:	4b7e      	ldr	r3, [pc, #504]	; (6550 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    6358:	701a      	strb	r2, [r3, #0]
			if (txLEDPulse == 0)
    635a:	4b7d      	ldr	r3, [pc, #500]	; (6550 <_ZN14USBDeviceClass10ISRHandlerEv+0x26c>)
    635c:	781b      	ldrb	r3, [r3, #0]
    635e:	b2db      	uxtb	r3, r3
    6360:	425a      	negs	r2, r3
    6362:	4153      	adcs	r3, r2
    6364:	b2db      	uxtb	r3, r3
    6366:	2b00      	cmp	r3, #0
    6368:	d003      	beq.n	6372 <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
				digitalWrite(PIN_LED_TXL, HIGH);
    636a:	2101      	movs	r1, #1
    636c:	201f      	movs	r0, #31
    636e:	f000 fbcd 	bl	6b0c <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    6372:	4b78      	ldr	r3, [pc, #480]	; (6554 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6374:	781b      	ldrb	r3, [r3, #0]
    6376:	b2db      	uxtb	r3, r3
    6378:	17da      	asrs	r2, r3, #31
    637a:	1ad3      	subs	r3, r2, r3
    637c:	0fdb      	lsrs	r3, r3, #31
    637e:	b2db      	uxtb	r3, r3
    6380:	2b00      	cmp	r3, #0
    6382:	d012      	beq.n	63aa <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
			rxLEDPulse--;
    6384:	4b73      	ldr	r3, [pc, #460]	; (6554 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6386:	781b      	ldrb	r3, [r3, #0]
    6388:	b2db      	uxtb	r3, r3
    638a:	3b01      	subs	r3, #1
    638c:	b2da      	uxtb	r2, r3
    638e:	4b71      	ldr	r3, [pc, #452]	; (6554 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6390:	701a      	strb	r2, [r3, #0]
			if (rxLEDPulse == 0)
    6392:	4b70      	ldr	r3, [pc, #448]	; (6554 <_ZN14USBDeviceClass10ISRHandlerEv+0x270>)
    6394:	781b      	ldrb	r3, [r3, #0]
    6396:	b2db      	uxtb	r3, r3
    6398:	425a      	negs	r2, r3
    639a:	4153      	adcs	r3, r2
    639c:	b2db      	uxtb	r3, r3
    639e:	2b00      	cmp	r3, #0
    63a0:	d003      	beq.n	63aa <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
				digitalWrite(PIN_LED_RXL, HIGH);
    63a2:	2101      	movs	r1, #1
    63a4:	201e      	movs	r0, #30
    63a6:	f000 fbb1 	bl	6b0c <digitalWrite>
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    63aa:	4b67      	ldr	r3, [pc, #412]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63ac:	2100      	movs	r1, #0
    63ae:	0018      	movs	r0, r3
    63b0:	f7fd ffc7 	bl	4342 <_ZN20USBDevice_SAMD21G18x22epBank0IsSetupReceivedEh>
    63b4:	1e03      	subs	r3, r0, #0
    63b6:	d047      	beq.n	6448 <_ZN14USBDeviceClass10ISRHandlerEv+0x164>
	{
		usbd.epBank0AckSetupReceived(0);
    63b8:	4b63      	ldr	r3, [pc, #396]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63ba:	2100      	movs	r1, #0
    63bc:	0018      	movs	r0, r3
    63be:	f7fe f818 	bl	43f2 <_ZN20USBDevice_SAMD21G18x23epBank0AckSetupReceivedEh>

		USBSetup *setup = reinterpret_cast<USBSetup *>(udd_ep_out_cache_buffer[0]);
    63c2:	4b65      	ldr	r3, [pc, #404]	; (6558 <_ZN14USBDeviceClass10ISRHandlerEv+0x274>)
    63c4:	60bb      	str	r3, [r7, #8]

		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);
    63c6:	4b60      	ldr	r3, [pc, #384]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    63c8:	2100      	movs	r1, #0
    63ca:	0018      	movs	r0, r3
    63cc:	f7fe f936 	bl	463c <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    63d0:	68bb      	ldr	r3, [r7, #8]
    63d2:	781b      	ldrb	r3, [r3, #0]
    63d4:	001a      	movs	r2, r3
    63d6:	2360      	movs	r3, #96	; 0x60
    63d8:	4013      	ands	r3, r2
    63da:	d10a      	bne.n	63f2 <_ZN14USBDeviceClass10ISRHandlerEv+0x10e>
			// Standard Requests
			ok = handleStandardSetup(*setup);
    63dc:	230f      	movs	r3, #15
    63de:	18fc      	adds	r4, r7, r3
    63e0:	68ba      	ldr	r2, [r7, #8]
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	0011      	movs	r1, r2
    63e6:	0018      	movs	r0, r3
    63e8:	f7ff fe92 	bl	6110 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
    63ec:	0003      	movs	r3, r0
    63ee:	7023      	strb	r3, [r4, #0]
    63f0:	e009      	b.n	6406 <_ZN14USBDeviceClass10ISRHandlerEv+0x122>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
    63f2:	230f      	movs	r3, #15
    63f4:	18fc      	adds	r4, r7, r3
    63f6:	68ba      	ldr	r2, [r7, #8]
    63f8:	687b      	ldr	r3, [r7, #4]
    63fa:	0011      	movs	r1, r2
    63fc:	0018      	movs	r0, r3
    63fe:	f7ff fa27 	bl	5850 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    6402:	0003      	movs	r3, r0
    6404:	7023      	strb	r3, [r4, #0]
		}

		if (ok) {
    6406:	230f      	movs	r3, #15
    6408:	18fb      	adds	r3, r7, r3
    640a:	781b      	ldrb	r3, [r3, #0]
    640c:	2b00      	cmp	r3, #0
    640e:	d005      	beq.n	641c <_ZN14USBDeviceClass10ISRHandlerEv+0x138>
			usbd.epBank1SetReady(0);
    6410:	4b4d      	ldr	r3, [pc, #308]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6412:	2100      	movs	r1, #0
    6414:	0018      	movs	r0, r3
    6416:	f7fe f8fa 	bl	460e <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>
    641a:	e004      	b.n	6426 <_ZN14USBDeviceClass10ISRHandlerEv+0x142>
		} else {
			stall(0);
    641c:	687b      	ldr	r3, [r7, #4]
    641e:	2100      	movs	r1, #0
    6420:	0018      	movs	r0, r3
    6422:	f7ff fb5d 	bl	5ae0 <_ZN14USBDeviceClass5stallEm>
		}

		if (usbd.epBank1IsStalled(0))
    6426:	4b48      	ldr	r3, [pc, #288]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6428:	2100      	movs	r1, #0
    642a:	0018      	movs	r0, r3
    642c:	f7fd ff9f 	bl	436e <_ZN20USBDevice_SAMD21G18x16epBank1IsStalledEh>
    6430:	1e03      	subs	r3, r0, #0
    6432:	d009      	beq.n	6448 <_ZN14USBDeviceClass10ISRHandlerEv+0x164>
		{
			usbd.epBank1AckStalled(0);
    6434:	4b44      	ldr	r3, [pc, #272]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6436:	2100      	movs	r1, #0
    6438:	0018      	movs	r0, r3
    643a:	f7fd ffef 	bl	441c <_ZN20USBDevice_SAMD21G18x17epBank1AckStalledEh>

			// Remove stall request
			usbd.epBank1DisableStalled(0);
    643e:	4b42      	ldr	r3, [pc, #264]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6440:	2100      	movs	r1, #0
    6442:	0018      	movs	r0, r3
    6444:	f7fe f871 	bl	452a <_ZN20USBDevice_SAMD21G18x21epBank1DisableStalledEh>
		}

	} // end Received Setup handler

	uint8_t i=0;
    6448:	230e      	movs	r3, #14
    644a:	18fb      	adds	r3, r7, r3
    644c:	2200      	movs	r2, #0
    644e:	701a      	strb	r2, [r3, #0]
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    6450:	4b3d      	ldr	r3, [pc, #244]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    6452:	0018      	movs	r0, r3
    6454:	f7fd ff69 	bl	432a <_ZN20USBDevice_SAMD21G18x18epInterruptSummaryEv>
    6458:	0003      	movs	r3, r0
    645a:	b2da      	uxtb	r2, r3
    645c:	230d      	movs	r3, #13
    645e:	18fb      	adds	r3, r7, r3
    6460:	2101      	movs	r1, #1
    6462:	438a      	bics	r2, r1
    6464:	701a      	strb	r2, [r3, #0]
	while (ept_int != 0)
    6466:	230d      	movs	r3, #13
    6468:	18fb      	adds	r3, r7, r3
    646a:	781b      	ldrb	r3, [r3, #0]
    646c:	2b00      	cmp	r3, #0
    646e:	d066      	beq.n	653e <_ZN14USBDeviceClass10ISRHandlerEv+0x25a>
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    6470:	230d      	movs	r3, #13
    6472:	18fb      	adds	r3, r7, r3
    6474:	781a      	ldrb	r2, [r3, #0]
    6476:	230e      	movs	r3, #14
    6478:	18fb      	adds	r3, r7, r3
    647a:	781b      	ldrb	r3, [r3, #0]
    647c:	411a      	asrs	r2, r3
    647e:	0013      	movs	r3, r2
    6480:	2201      	movs	r2, #1
    6482:	4013      	ands	r3, r2
    6484:	d04b      	beq.n	651e <_ZN14USBDeviceClass10ISRHandlerEv+0x23a>
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    6486:	230e      	movs	r3, #14
    6488:	18fb      	adds	r3, r7, r3
    648a:	781a      	ldrb	r2, [r3, #0]
    648c:	4b2e      	ldr	r3, [pc, #184]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    648e:	0011      	movs	r1, r2
    6490:	0018      	movs	r0, r3
    6492:	f7fd ff82 	bl	439a <_ZN20USBDevice_SAMD21G18x25epBank0IsTransferCompleteEh>
    6496:	1e03      	subs	r3, r0, #0
    6498:	d109      	bne.n	64ae <_ZN14USBDeviceClass10ISRHandlerEv+0x1ca>
			    usbd.epBank1IsTransferComplete(i))
    649a:	230e      	movs	r3, #14
    649c:	18fb      	adds	r3, r7, r3
    649e:	781a      	ldrb	r2, [r3, #0]
    64a0:	4b29      	ldr	r3, [pc, #164]	; (6548 <_ZN14USBDeviceClass10ISRHandlerEv+0x264>)
    64a2:	0011      	movs	r1, r2
    64a4:	0018      	movs	r0, r3
    64a6:	f7fd ff8e 	bl	43c6 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    64aa:	1e03      	subs	r3, r0, #0
			if (usbd.epBank0IsTransferComplete(i) ||
    64ac:	d001      	beq.n	64b2 <_ZN14USBDeviceClass10ISRHandlerEv+0x1ce>
    64ae:	2301      	movs	r3, #1
    64b0:	e000      	b.n	64b4 <_ZN14USBDeviceClass10ISRHandlerEv+0x1d0>
    64b2:	2300      	movs	r3, #0
    64b4:	2b00      	cmp	r3, #0
    64b6:	d020      	beq.n	64fa <_ZN14USBDeviceClass10ISRHandlerEv+0x216>
			{
				if (epHandlers[i]) {
    64b8:	230e      	movs	r3, #14
    64ba:	18fb      	adds	r3, r7, r3
    64bc:	781a      	ldrb	r2, [r3, #0]
    64be:	4b27      	ldr	r3, [pc, #156]	; (655c <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    64c0:	0092      	lsls	r2, r2, #2
    64c2:	58d3      	ldr	r3, [r2, r3]
    64c4:	2b00      	cmp	r3, #0
    64c6:	d010      	beq.n	64ea <_ZN14USBDeviceClass10ISRHandlerEv+0x206>
					epHandlers[i]->handleEndpoint();
    64c8:	230e      	movs	r3, #14
    64ca:	18fb      	adds	r3, r7, r3
    64cc:	781a      	ldrb	r2, [r3, #0]
    64ce:	4b23      	ldr	r3, [pc, #140]	; (655c <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    64d0:	0092      	lsls	r2, r2, #2
    64d2:	58d3      	ldr	r3, [r2, r3]
    64d4:	681b      	ldr	r3, [r3, #0]
    64d6:	681b      	ldr	r3, [r3, #0]
    64d8:	220e      	movs	r2, #14
    64da:	18ba      	adds	r2, r7, r2
    64dc:	7811      	ldrb	r1, [r2, #0]
    64de:	4a1f      	ldr	r2, [pc, #124]	; (655c <_ZN14USBDeviceClass10ISRHandlerEv+0x278>)
    64e0:	0089      	lsls	r1, r1, #2
    64e2:	588a      	ldr	r2, [r1, r2]
    64e4:	0010      	movs	r0, r2
    64e6:	4798      	blx	r3
    64e8:	e007      	b.n	64fa <_ZN14USBDeviceClass10ISRHandlerEv+0x216>
				} else {
					handleEndpoint(i);
    64ea:	230e      	movs	r3, #14
    64ec:	18fb      	adds	r3, r7, r3
    64ee:	781a      	ldrb	r2, [r3, #0]
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	0011      	movs	r1, r2
    64f4:	0018      	movs	r0, r3
    64f6:	f7ff f881 	bl	55fc <_ZN14USBDeviceClass14handleEndpointEh>
				}
			}
			ept_int &= ~(1 << i);
    64fa:	230e      	movs	r3, #14
    64fc:	18fb      	adds	r3, r7, r3
    64fe:	781b      	ldrb	r3, [r3, #0]
    6500:	2201      	movs	r2, #1
    6502:	409a      	lsls	r2, r3
    6504:	0013      	movs	r3, r2
    6506:	b25b      	sxtb	r3, r3
    6508:	43db      	mvns	r3, r3
    650a:	b25b      	sxtb	r3, r3
    650c:	220d      	movs	r2, #13
    650e:	18ba      	adds	r2, r7, r2
    6510:	7812      	ldrb	r2, [r2, #0]
    6512:	b252      	sxtb	r2, r2
    6514:	4013      	ands	r3, r2
    6516:	b25a      	sxtb	r2, r3
    6518:	230d      	movs	r3, #13
    651a:	18fb      	adds	r3, r7, r3
    651c:	701a      	strb	r2, [r3, #0]
		}
		i++;
    651e:	230e      	movs	r3, #14
    6520:	18fb      	adds	r3, r7, r3
    6522:	781a      	ldrb	r2, [r3, #0]
    6524:	230e      	movs	r3, #14
    6526:	18fb      	adds	r3, r7, r3
    6528:	3201      	adds	r2, #1
    652a:	701a      	strb	r2, [r3, #0]
		if (i > USB_EPT_NUM)
    652c:	230e      	movs	r3, #14
    652e:	18fb      	adds	r3, r7, r3
    6530:	781b      	ldrb	r3, [r3, #0]
    6532:	2b08      	cmp	r3, #8
    6534:	dc02      	bgt.n	653c <_ZN14USBDeviceClass10ISRHandlerEv+0x258>
	while (ept_int != 0)
    6536:	e796      	b.n	6466 <_ZN14USBDeviceClass10ISRHandlerEv+0x182>
		return;
    6538:	46c0      	nop			; (mov r8, r8)
    653a:	e000      	b.n	653e <_ZN14USBDeviceClass10ISRHandlerEv+0x25a>
			break;  // fire exit
    653c:	46c0      	nop			; (mov r8, r8)
	}
}
    653e:	46bd      	mov	sp, r7
    6540:	b005      	add	sp, #20
    6542:	bd90      	pop	{r4, r7, pc}
    6544:	200007e5 	.word	0x200007e5
    6548:	20000338 	.word	0x20000338
    654c:	20000440 	.word	0x20000440
    6550:	2000043c 	.word	0x2000043c
    6554:	2000043d 	.word	0x2000043d
    6558:	20000448 	.word	0x20000448
    655c:	200007c8 	.word	0x200007c8

00006560 <_Z41__static_initialization_and_destruction_0ii>:
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    6560:	b580      	push	{r7, lr}
    6562:	b082      	sub	sp, #8
    6564:	af00      	add	r7, sp, #0
    6566:	6078      	str	r0, [r7, #4]
    6568:	6039      	str	r1, [r7, #0]
    656a:	687b      	ldr	r3, [r7, #4]
    656c:	2b01      	cmp	r3, #1
    656e:	d10b      	bne.n	6588 <_Z41__static_initialization_and_destruction_0ii+0x28>
    6570:	683b      	ldr	r3, [r7, #0]
    6572:	4a07      	ldr	r2, [pc, #28]	; (6590 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    6574:	4293      	cmp	r3, r2
    6576:	d107      	bne.n	6588 <_Z41__static_initialization_and_destruction_0ii+0x28>
USBDevice_SAMD21G18x usbd;
    6578:	4b06      	ldr	r3, [pc, #24]	; (6594 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    657a:	0018      	movs	r0, r3
    657c:	f7fd fddc 	bl	4138 <_ZN20USBDevice_SAMD21G18xC1Ev>
USBDeviceClass USBDevice;
    6580:	4b05      	ldr	r3, [pc, #20]	; (6598 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    6582:	0018      	movs	r0, r3
    6584:	f7fd fdb2 	bl	40ec <_ZN14USBDeviceClassC1Ev>
    6588:	46c0      	nop			; (mov r8, r8)
    658a:	46bd      	mov	sp, r7
    658c:	b002      	add	sp, #8
    658e:	bd80      	pop	{r7, pc}
    6590:	0000ffff 	.word	0x0000ffff
    6594:	20000338 	.word	0x20000338
    6598:	200008f0 	.word	0x200008f0

0000659c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
    659c:	b580      	push	{r7, lr}
    659e:	af00      	add	r7, sp, #0
    65a0:	4b03      	ldr	r3, [pc, #12]	; (65b0 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x14>)
    65a2:	0019      	movs	r1, r3
    65a4:	2001      	movs	r0, #1
    65a6:	f7ff ffdb 	bl	6560 <_Z41__static_initialization_and_destruction_0ii>
    65aa:	46bd      	mov	sp, r7
    65ac:	bd80      	pop	{r7, pc}
    65ae:	46c0      	nop			; (mov r8, r8)
    65b0:	0000ffff 	.word	0x0000ffff

000065b4 <__NVIC_SetPriority>:
{
    65b4:	b5b0      	push	{r4, r5, r7, lr}
    65b6:	b082      	sub	sp, #8
    65b8:	af00      	add	r7, sp, #0
    65ba:	0002      	movs	r2, r0
    65bc:	6039      	str	r1, [r7, #0]
    65be:	1dfb      	adds	r3, r7, #7
    65c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    65c2:	1dfb      	adds	r3, r7, #7
    65c4:	781b      	ldrb	r3, [r3, #0]
    65c6:	2b7f      	cmp	r3, #127	; 0x7f
    65c8:	d828      	bhi.n	661c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    65ca:	4c2f      	ldr	r4, [pc, #188]	; (6688 <__NVIC_SetPriority+0xd4>)
    65cc:	1dfb      	adds	r3, r7, #7
    65ce:	781b      	ldrb	r3, [r3, #0]
    65d0:	b25b      	sxtb	r3, r3
    65d2:	089b      	lsrs	r3, r3, #2
    65d4:	492c      	ldr	r1, [pc, #176]	; (6688 <__NVIC_SetPriority+0xd4>)
    65d6:	1dfa      	adds	r2, r7, #7
    65d8:	7812      	ldrb	r2, [r2, #0]
    65da:	b252      	sxtb	r2, r2
    65dc:	0892      	lsrs	r2, r2, #2
    65de:	32c0      	adds	r2, #192	; 0xc0
    65e0:	0092      	lsls	r2, r2, #2
    65e2:	5852      	ldr	r2, [r2, r1]
    65e4:	1df9      	adds	r1, r7, #7
    65e6:	7809      	ldrb	r1, [r1, #0]
    65e8:	0008      	movs	r0, r1
    65ea:	2103      	movs	r1, #3
    65ec:	4001      	ands	r1, r0
    65ee:	00c9      	lsls	r1, r1, #3
    65f0:	20ff      	movs	r0, #255	; 0xff
    65f2:	4088      	lsls	r0, r1
    65f4:	0001      	movs	r1, r0
    65f6:	43c9      	mvns	r1, r1
    65f8:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    65fa:	683a      	ldr	r2, [r7, #0]
    65fc:	0192      	lsls	r2, r2, #6
    65fe:	20ff      	movs	r0, #255	; 0xff
    6600:	4010      	ands	r0, r2
    6602:	1dfa      	adds	r2, r7, #7
    6604:	7812      	ldrb	r2, [r2, #0]
    6606:	0015      	movs	r5, r2
    6608:	2203      	movs	r2, #3
    660a:	402a      	ands	r2, r5
    660c:	00d2      	lsls	r2, r2, #3
    660e:	4090      	lsls	r0, r2
    6610:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6612:	430a      	orrs	r2, r1
    6614:	33c0      	adds	r3, #192	; 0xc0
    6616:	009b      	lsls	r3, r3, #2
    6618:	511a      	str	r2, [r3, r4]
}
    661a:	e031      	b.n	6680 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    661c:	4c1b      	ldr	r4, [pc, #108]	; (668c <__NVIC_SetPriority+0xd8>)
    661e:	1dfb      	adds	r3, r7, #7
    6620:	781b      	ldrb	r3, [r3, #0]
    6622:	001a      	movs	r2, r3
    6624:	230f      	movs	r3, #15
    6626:	4013      	ands	r3, r2
    6628:	3b08      	subs	r3, #8
    662a:	0899      	lsrs	r1, r3, #2
    662c:	4a17      	ldr	r2, [pc, #92]	; (668c <__NVIC_SetPriority+0xd8>)
    662e:	1dfb      	adds	r3, r7, #7
    6630:	781b      	ldrb	r3, [r3, #0]
    6632:	0018      	movs	r0, r3
    6634:	230f      	movs	r3, #15
    6636:	4003      	ands	r3, r0
    6638:	3b08      	subs	r3, #8
    663a:	089b      	lsrs	r3, r3, #2
    663c:	3306      	adds	r3, #6
    663e:	009b      	lsls	r3, r3, #2
    6640:	18d3      	adds	r3, r2, r3
    6642:	3304      	adds	r3, #4
    6644:	681b      	ldr	r3, [r3, #0]
    6646:	1dfa      	adds	r2, r7, #7
    6648:	7812      	ldrb	r2, [r2, #0]
    664a:	0010      	movs	r0, r2
    664c:	2203      	movs	r2, #3
    664e:	4002      	ands	r2, r0
    6650:	00d2      	lsls	r2, r2, #3
    6652:	20ff      	movs	r0, #255	; 0xff
    6654:	4090      	lsls	r0, r2
    6656:	0002      	movs	r2, r0
    6658:	43d2      	mvns	r2, r2
    665a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    665c:	683b      	ldr	r3, [r7, #0]
    665e:	019b      	lsls	r3, r3, #6
    6660:	20ff      	movs	r0, #255	; 0xff
    6662:	4018      	ands	r0, r3
    6664:	1dfb      	adds	r3, r7, #7
    6666:	781b      	ldrb	r3, [r3, #0]
    6668:	001d      	movs	r5, r3
    666a:	2303      	movs	r3, #3
    666c:	402b      	ands	r3, r5
    666e:	00db      	lsls	r3, r3, #3
    6670:	4098      	lsls	r0, r3
    6672:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    6674:	431a      	orrs	r2, r3
    6676:	1d8b      	adds	r3, r1, #6
    6678:	009b      	lsls	r3, r3, #2
    667a:	18e3      	adds	r3, r4, r3
    667c:	3304      	adds	r3, #4
    667e:	601a      	str	r2, [r3, #0]
}
    6680:	46c0      	nop			; (mov r8, r8)
    6682:	46bd      	mov	sp, r7
    6684:	b002      	add	sp, #8
    6686:	bdb0      	pop	{r4, r5, r7, pc}
    6688:	e000e100 	.word	0xe000e100
    668c:	e000ed00 	.word	0xe000ed00

00006690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    6690:	b580      	push	{r7, lr}
    6692:	b082      	sub	sp, #8
    6694:	af00      	add	r7, sp, #0
    6696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    6698:	687b      	ldr	r3, [r7, #4]
    669a:	3b01      	subs	r3, #1
    669c:	4a0c      	ldr	r2, [pc, #48]	; (66d0 <SysTick_Config+0x40>)
    669e:	4293      	cmp	r3, r2
    66a0:	d901      	bls.n	66a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
    66a2:	2301      	movs	r3, #1
    66a4:	e010      	b.n	66c8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    66a6:	4b0b      	ldr	r3, [pc, #44]	; (66d4 <SysTick_Config+0x44>)
    66a8:	687a      	ldr	r2, [r7, #4]
    66aa:	3a01      	subs	r2, #1
    66ac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    66ae:	2301      	movs	r3, #1
    66b0:	425b      	negs	r3, r3
    66b2:	2103      	movs	r1, #3
    66b4:	0018      	movs	r0, r3
    66b6:	f7ff ff7d 	bl	65b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    66ba:	4b06      	ldr	r3, [pc, #24]	; (66d4 <SysTick_Config+0x44>)
    66bc:	2200      	movs	r2, #0
    66be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    66c0:	4b04      	ldr	r3, [pc, #16]	; (66d4 <SysTick_Config+0x44>)
    66c2:	2207      	movs	r2, #7
    66c4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    66c6:	2300      	movs	r3, #0
}
    66c8:	0018      	movs	r0, r3
    66ca:	46bd      	mov	sp, r7
    66cc:	b002      	add	sp, #8
    66ce:	bd80      	pop	{r7, pc}
    66d0:	00ffffff 	.word	0x00ffffff
    66d4:	e000e010 	.word	0xe000e010

000066d8 <init>:
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz.
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    66d8:	b580      	push	{r7, lr}
    66da:	b082      	sub	sp, #8
    66dc:	af00      	add	r7, sp, #0
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    66de:	4b3d      	ldr	r3, [pc, #244]	; (67d4 <init+0xfc>)
    66e0:	681a      	ldr	r2, [r3, #0]
    66e2:	23fa      	movs	r3, #250	; 0xfa
    66e4:	0099      	lsls	r1, r3, #2
    66e6:	0010      	movs	r0, r2
    66e8:	f008 f900 	bl	e8ec <__udivsi3>
    66ec:	0003      	movs	r3, r0
    66ee:	0018      	movs	r0, r3
    66f0:	f7ff ffce 	bl	6690 <SysTick_Config>
    66f4:	1e03      	subs	r3, r0, #0
    66f6:	d000      	beq.n	66fa <init+0x22>
  {
    // Capture error
    while ( 1 ) ;
    66f8:	e7fe      	b.n	66f8 <init+0x20>
  }
  NVIC_SetPriority (SysTick_IRQn,  (1 << __NVIC_PRIO_BITS) - 2);  /* set Priority for Systick Interrupt (2nd lowest) */
    66fa:	2301      	movs	r3, #1
    66fc:	425b      	negs	r3, r3
    66fe:	2102      	movs	r1, #2
    6700:	0018      	movs	r0, r3
    6702:	f7ff ff57 	bl	65b4 <__NVIC_SetPriority>
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    6706:	4b34      	ldr	r3, [pc, #208]	; (67d8 <init+0x100>)
    6708:	4a33      	ldr	r2, [pc, #204]	; (67d8 <init+0x100>)
    670a:	6a12      	ldr	r2, [r2, #32]
    670c:	21fc      	movs	r1, #252	; 0xfc
    670e:	430a      	orrs	r2, r1
    6710:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    6712:	4b31      	ldr	r3, [pc, #196]	; (67d8 <init+0x100>)
    6714:	4a30      	ldr	r2, [pc, #192]	; (67d8 <init+0x100>)
    6716:	6a12      	ldr	r2, [r2, #32]
    6718:	21fc      	movs	r1, #252	; 0xfc
    671a:	0189      	lsls	r1, r1, #6
    671c:	430a      	orrs	r2, r1
    671e:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    6720:	4b2d      	ldr	r3, [pc, #180]	; (67d8 <init+0x100>)
    6722:	4a2d      	ldr	r2, [pc, #180]	; (67d8 <init+0x100>)
    6724:	6a12      	ldr	r2, [r2, #32]
    6726:	21a0      	movs	r1, #160	; 0xa0
    6728:	02c9      	lsls	r1, r1, #11
    672a:	430a      	orrs	r2, r1
    672c:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    672e:	2300      	movs	r3, #0
    6730:	607b      	str	r3, [r7, #4]
    6732:	e007      	b.n	6744 <init+0x6c>
  {
    pinMode( ul, INPUT ) ;
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	2100      	movs	r1, #0
    6738:	0018      	movs	r0, r3
    673a:	f000 f8bd 	bl	68b8 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    673e:	687b      	ldr	r3, [r7, #4]
    6740:	3301      	adds	r3, #1
    6742:	607b      	str	r3, [r7, #4]
    6744:	687b      	ldr	r3, [r7, #4]
    6746:	2b12      	cmp	r3, #18
    6748:	d9f4      	bls.n	6734 <init+0x5c>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    674a:	46c0      	nop			; (mov r8, r8)
    674c:	4b23      	ldr	r3, [pc, #140]	; (67dc <init+0x104>)
    674e:	785b      	ldrb	r3, [r3, #1]
    6750:	b2db      	uxtb	r3, r3
    6752:	b25b      	sxtb	r3, r3
    6754:	2b00      	cmp	r3, #0
    6756:	dbf9      	blt.n	674c <init+0x74>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    6758:	4b20      	ldr	r3, [pc, #128]	; (67dc <init+0x104>)
    675a:	4a21      	ldr	r2, [pc, #132]	; (67e0 <init+0x108>)
    675c:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    675e:	46c0      	nop			; (mov r8, r8)
    6760:	4b20      	ldr	r3, [pc, #128]	; (67e4 <init+0x10c>)
    6762:	7e5b      	ldrb	r3, [r3, #25]
    6764:	061b      	lsls	r3, r3, #24
    6766:	0fdb      	lsrs	r3, r3, #31
    6768:	b2db      	uxtb	r3, r3
    676a:	2b01      	cmp	r3, #1
    676c:	d0f8      	beq.n	6760 <init+0x88>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    676e:	4b1d      	ldr	r3, [pc, #116]	; (67e4 <init+0x10c>)
    6770:	22e4      	movs	r2, #228	; 0xe4
    6772:	00d2      	lsls	r2, r2, #3
    6774:	809a      	strh	r2, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    6776:	4b1b      	ldr	r3, [pc, #108]	; (67e4 <init+0x10c>)
    6778:	223f      	movs	r2, #63	; 0x3f
    677a:	70da      	strb	r2, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    677c:	46c0      	nop			; (mov r8, r8)
    677e:	4b19      	ldr	r3, [pc, #100]	; (67e4 <init+0x10c>)
    6780:	7e5b      	ldrb	r3, [r3, #25]
    6782:	061b      	lsls	r3, r3, #24
    6784:	0fdb      	lsrs	r3, r3, #31
    6786:	b2db      	uxtb	r3, r3
    6788:	2b01      	cmp	r3, #1
    678a:	d0f8      	beq.n	677e <init+0xa6>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    678c:	4b15      	ldr	r3, [pc, #84]	; (67e4 <init+0x10c>)
    678e:	22c0      	movs	r2, #192	; 0xc0
    6790:	0152      	lsls	r2, r2, #5
    6792:	611a      	str	r2, [r3, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    6794:	4b13      	ldr	r3, [pc, #76]	; (67e4 <init+0x10c>)
    6796:	2200      	movs	r2, #0
    6798:	709a      	strb	r2, [r3, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    679a:	2000      	movs	r0, #0
    679c:	f000 f828 	bl	67f0 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    67a0:	46c0      	nop			; (mov r8, r8)
    67a2:	4b0e      	ldr	r3, [pc, #56]	; (67dc <init+0x104>)
    67a4:	785b      	ldrb	r3, [r3, #1]
    67a6:	b2db      	uxtb	r3, r3
    67a8:	b25b      	sxtb	r3, r3
    67aa:	2b00      	cmp	r3, #0
    67ac:	dbf9      	blt.n	67a2 <init+0xca>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    67ae:	4b0b      	ldr	r3, [pc, #44]	; (67dc <init+0x104>)
    67b0:	4a0d      	ldr	r2, [pc, #52]	; (67e8 <init+0x110>)
    67b2:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    67b4:	46c0      	nop			; (mov r8, r8)
    67b6:	4b0d      	ldr	r3, [pc, #52]	; (67ec <init+0x114>)
    67b8:	79db      	ldrb	r3, [r3, #7]
    67ba:	061b      	lsls	r3, r3, #24
    67bc:	0fdb      	lsrs	r3, r3, #31
    67be:	b2db      	uxtb	r3, r3
    67c0:	2b01      	cmp	r3, #1
    67c2:	d0f8      	beq.n	67b6 <init+0xde>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    67c4:	4b09      	ldr	r3, [pc, #36]	; (67ec <init+0x114>)
    67c6:	2241      	movs	r2, #65	; 0x41
    67c8:	705a      	strb	r2, [r3, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    67ca:	46c0      	nop			; (mov r8, r8)
    67cc:	46bd      	mov	sp, r7
    67ce:	b002      	add	sp, #8
    67d0:	bd80      	pop	{r7, pc}
    67d2:	46c0      	nop			; (mov r8, r8)
    67d4:	20000048 	.word	0x20000048
    67d8:	40000400 	.word	0x40000400
    67dc:	40000c00 	.word	0x40000c00
    67e0:	0000401e 	.word	0x0000401e
    67e4:	42004000 	.word	0x42004000
    67e8:	00004021 	.word	0x00004021
    67ec:	42004800 	.word	0x42004800

000067f0 <analogReference>:
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    67f0:	b580      	push	{r7, lr}
    67f2:	b082      	sub	sp, #8
    67f4:	af00      	add	r7, sp, #0
    67f6:	0002      	movs	r2, r0
    67f8:	1dfb      	adds	r3, r7, #7
    67fa:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    67fc:	4b2b      	ldr	r3, [pc, #172]	; (68ac <analogReference+0xbc>)
    67fe:	7e5b      	ldrb	r3, [r3, #25]
    6800:	061b      	lsls	r3, r3, #24
    6802:	0fdb      	lsrs	r3, r3, #31
    6804:	b2db      	uxtb	r3, r3
    6806:	2b01      	cmp	r3, #1
    6808:	d0f8      	beq.n	67fc <analogReference+0xc>
  syncADC();
  switch (mode)
    680a:	1dfb      	adds	r3, r7, #7
    680c:	781b      	ldrb	r3, [r3, #0]
    680e:	2b05      	cmp	r3, #5
    6810:	d839      	bhi.n	6886 <analogReference+0x96>
    6812:	009a      	lsls	r2, r3, #2
    6814:	4b26      	ldr	r3, [pc, #152]	; (68b0 <analogReference+0xc0>)
    6816:	18d3      	adds	r3, r2, r3
    6818:	681b      	ldr	r3, [r3, #0]
    681a:	469f      	mov	pc, r3
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    681c:	4a23      	ldr	r2, [pc, #140]	; (68ac <analogReference+0xbc>)
    681e:	6913      	ldr	r3, [r2, #16]
    6820:	4924      	ldr	r1, [pc, #144]	; (68b4 <analogReference+0xc4>)
    6822:	400b      	ands	r3, r1
    6824:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    6826:	4a21      	ldr	r2, [pc, #132]	; (68ac <analogReference+0xbc>)
    6828:	7853      	ldrb	r3, [r2, #1]
    682a:	210f      	movs	r1, #15
    682c:	438b      	bics	r3, r1
    682e:	1c19      	adds	r1, r3, #0
    6830:	2301      	movs	r3, #1
    6832:	430b      	orrs	r3, r1
    6834:	7053      	strb	r3, [r2, #1]
      break;
    6836:	e035      	b.n	68a4 <analogReference+0xb4>

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    6838:	4a1c      	ldr	r2, [pc, #112]	; (68ac <analogReference+0xbc>)
    683a:	6913      	ldr	r3, [r2, #16]
    683c:	491d      	ldr	r1, [pc, #116]	; (68b4 <analogReference+0xc4>)
    683e:	400b      	ands	r3, r1
    6840:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    6842:	4a1a      	ldr	r2, [pc, #104]	; (68ac <analogReference+0xbc>)
    6844:	7853      	ldrb	r3, [r2, #1]
    6846:	210f      	movs	r1, #15
    6848:	438b      	bics	r3, r1
    684a:	1c19      	adds	r1, r3, #0
    684c:	2303      	movs	r3, #3
    684e:	430b      	orrs	r3, r1
    6850:	7053      	strb	r3, [r2, #1]
      break;
    6852:	e027      	b.n	68a4 <analogReference+0xb4>

    case AR_INTERNAL1V0:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    6854:	4a15      	ldr	r2, [pc, #84]	; (68ac <analogReference+0xbc>)
    6856:	6913      	ldr	r3, [r2, #16]
    6858:	4916      	ldr	r1, [pc, #88]	; (68b4 <analogReference+0xc4>)
    685a:	400b      	ands	r3, r1
    685c:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
    685e:	4a13      	ldr	r2, [pc, #76]	; (68ac <analogReference+0xbc>)
    6860:	7853      	ldrb	r3, [r2, #1]
    6862:	210f      	movs	r1, #15
    6864:	438b      	bics	r3, r1
    6866:	7053      	strb	r3, [r2, #1]
      break;
    6868:	e01c      	b.n	68a4 <analogReference+0xb4>

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    686a:	4a10      	ldr	r2, [pc, #64]	; (68ac <analogReference+0xbc>)
    686c:	6913      	ldr	r3, [r2, #16]
    686e:	4911      	ldr	r1, [pc, #68]	; (68b4 <analogReference+0xc4>)
    6870:	400b      	ands	r3, r1
    6872:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    6874:	4a0d      	ldr	r2, [pc, #52]	; (68ac <analogReference+0xbc>)
    6876:	7853      	ldrb	r3, [r2, #1]
    6878:	210f      	movs	r1, #15
    687a:	438b      	bics	r3, r1
    687c:	1c19      	adds	r1, r3, #0
    687e:	2302      	movs	r3, #2
    6880:	430b      	orrs	r3, r1
    6882:	7053      	strb	r3, [r2, #1]
      break;
    6884:	e00e      	b.n	68a4 <analogReference+0xb4>

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    6886:	4a09      	ldr	r2, [pc, #36]	; (68ac <analogReference+0xbc>)
    6888:	6913      	ldr	r3, [r2, #16]
    688a:	21f0      	movs	r1, #240	; 0xf0
    688c:	0509      	lsls	r1, r1, #20
    688e:	430b      	orrs	r3, r1
    6890:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    6892:	4a06      	ldr	r2, [pc, #24]	; (68ac <analogReference+0xbc>)
    6894:	7853      	ldrb	r3, [r2, #1]
    6896:	210f      	movs	r1, #15
    6898:	438b      	bics	r3, r1
    689a:	1c19      	adds	r1, r3, #0
    689c:	2302      	movs	r3, #2
    689e:	430b      	orrs	r3, r1
    68a0:	7053      	strb	r3, [r2, #1]
      break;
    68a2:	46c0      	nop			; (mov r8, r8)
  }
}
    68a4:	46c0      	nop			; (mov r8, r8)
    68a6:	46bd      	mov	sp, r7
    68a8:	b002      	add	sp, #8
    68aa:	bd80      	pop	{r7, pc}
    68ac:	42004000 	.word	0x42004000
    68b0:	00013564 	.word	0x00013564
    68b4:	f0ffffff 	.word	0xf0ffffff

000068b8 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    68b8:	b590      	push	{r4, r7, lr}
    68ba:	b083      	sub	sp, #12
    68bc:	af00      	add	r7, sp, #0
    68be:	6078      	str	r0, [r7, #4]
    68c0:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    68c2:	4990      	ldr	r1, [pc, #576]	; (6b04 <pinMode+0x24c>)
    68c4:	687a      	ldr	r2, [r7, #4]
    68c6:	0013      	movs	r3, r2
    68c8:	005b      	lsls	r3, r3, #1
    68ca:	189b      	adds	r3, r3, r2
    68cc:	00db      	lsls	r3, r3, #3
    68ce:	18cb      	adds	r3, r1, r3
    68d0:	3308      	adds	r3, #8
    68d2:	781b      	ldrb	r3, [r3, #0]
    68d4:	b25b      	sxtb	r3, r3
    68d6:	3301      	adds	r3, #1
    68d8:	d100      	bne.n	68dc <pinMode+0x24>
    68da:	e10e      	b.n	6afa <pinMode+0x242>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    68dc:	683b      	ldr	r3, [r7, #0]
    68de:	2b01      	cmp	r3, #1
    68e0:	d100      	bne.n	68e4 <pinMode+0x2c>
    68e2:	e0d6      	b.n	6a92 <pinMode+0x1da>
    68e4:	d305      	bcc.n	68f2 <pinMode+0x3a>
    68e6:	2b02      	cmp	r3, #2
    68e8:	d037      	beq.n	695a <pinMode+0xa2>
    68ea:	2b03      	cmp	r3, #3
    68ec:	d100      	bne.n	68f0 <pinMode+0x38>
    68ee:	e082      	b.n	69f6 <pinMode+0x13e>
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    default:
      // do nothing
    break ;
    68f0:	e104      	b.n	6afc <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    68f2:	4885      	ldr	r0, [pc, #532]	; (6b08 <pinMode+0x250>)
    68f4:	4983      	ldr	r1, [pc, #524]	; (6b04 <pinMode+0x24c>)
    68f6:	687a      	ldr	r2, [r7, #4]
    68f8:	0013      	movs	r3, r2
    68fa:	005b      	lsls	r3, r3, #1
    68fc:	189b      	adds	r3, r3, r2
    68fe:	00db      	lsls	r3, r3, #3
    6900:	565b      	ldrsb	r3, [r3, r1]
    6902:	001c      	movs	r4, r3
    6904:	497f      	ldr	r1, [pc, #508]	; (6b04 <pinMode+0x24c>)
    6906:	687a      	ldr	r2, [r7, #4]
    6908:	0013      	movs	r3, r2
    690a:	005b      	lsls	r3, r3, #1
    690c:	189b      	adds	r3, r3, r2
    690e:	00db      	lsls	r3, r3, #3
    6910:	18cb      	adds	r3, r1, r3
    6912:	3304      	adds	r3, #4
    6914:	681b      	ldr	r3, [r3, #0]
    6916:	2140      	movs	r1, #64	; 0x40
    6918:	01e2      	lsls	r2, r4, #7
    691a:	1882      	adds	r2, r0, r2
    691c:	18d3      	adds	r3, r2, r3
    691e:	185b      	adds	r3, r3, r1
    6920:	2202      	movs	r2, #2
    6922:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6924:	4878      	ldr	r0, [pc, #480]	; (6b08 <pinMode+0x250>)
    6926:	4977      	ldr	r1, [pc, #476]	; (6b04 <pinMode+0x24c>)
    6928:	687a      	ldr	r2, [r7, #4]
    692a:	0013      	movs	r3, r2
    692c:	005b      	lsls	r3, r3, #1
    692e:	189b      	adds	r3, r3, r2
    6930:	00db      	lsls	r3, r3, #3
    6932:	565b      	ldrsb	r3, [r3, r1]
    6934:	001c      	movs	r4, r3
    6936:	4973      	ldr	r1, [pc, #460]	; (6b04 <pinMode+0x24c>)
    6938:	687a      	ldr	r2, [r7, #4]
    693a:	0013      	movs	r3, r2
    693c:	005b      	lsls	r3, r3, #1
    693e:	189b      	adds	r3, r3, r2
    6940:	00db      	lsls	r3, r3, #3
    6942:	18cb      	adds	r3, r1, r3
    6944:	3304      	adds	r3, #4
    6946:	681b      	ldr	r3, [r3, #0]
    6948:	2201      	movs	r2, #1
    694a:	409a      	lsls	r2, r3
    694c:	0013      	movs	r3, r2
    694e:	001a      	movs	r2, r3
    6950:	01e3      	lsls	r3, r4, #7
    6952:	18c3      	adds	r3, r0, r3
    6954:	3304      	adds	r3, #4
    6956:	601a      	str	r2, [r3, #0]
    break ;
    6958:	e0d0      	b.n	6afc <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    695a:	486b      	ldr	r0, [pc, #428]	; (6b08 <pinMode+0x250>)
    695c:	4969      	ldr	r1, [pc, #420]	; (6b04 <pinMode+0x24c>)
    695e:	687a      	ldr	r2, [r7, #4]
    6960:	0013      	movs	r3, r2
    6962:	005b      	lsls	r3, r3, #1
    6964:	189b      	adds	r3, r3, r2
    6966:	00db      	lsls	r3, r3, #3
    6968:	565b      	ldrsb	r3, [r3, r1]
    696a:	001c      	movs	r4, r3
    696c:	4965      	ldr	r1, [pc, #404]	; (6b04 <pinMode+0x24c>)
    696e:	687a      	ldr	r2, [r7, #4]
    6970:	0013      	movs	r3, r2
    6972:	005b      	lsls	r3, r3, #1
    6974:	189b      	adds	r3, r3, r2
    6976:	00db      	lsls	r3, r3, #3
    6978:	18cb      	adds	r3, r1, r3
    697a:	3304      	adds	r3, #4
    697c:	681b      	ldr	r3, [r3, #0]
    697e:	2140      	movs	r1, #64	; 0x40
    6980:	01e2      	lsls	r2, r4, #7
    6982:	1882      	adds	r2, r0, r2
    6984:	18d3      	adds	r3, r2, r3
    6986:	185b      	adds	r3, r3, r1
    6988:	2206      	movs	r2, #6
    698a:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    698c:	485e      	ldr	r0, [pc, #376]	; (6b08 <pinMode+0x250>)
    698e:	495d      	ldr	r1, [pc, #372]	; (6b04 <pinMode+0x24c>)
    6990:	687a      	ldr	r2, [r7, #4]
    6992:	0013      	movs	r3, r2
    6994:	005b      	lsls	r3, r3, #1
    6996:	189b      	adds	r3, r3, r2
    6998:	00db      	lsls	r3, r3, #3
    699a:	565b      	ldrsb	r3, [r3, r1]
    699c:	001c      	movs	r4, r3
    699e:	4959      	ldr	r1, [pc, #356]	; (6b04 <pinMode+0x24c>)
    69a0:	687a      	ldr	r2, [r7, #4]
    69a2:	0013      	movs	r3, r2
    69a4:	005b      	lsls	r3, r3, #1
    69a6:	189b      	adds	r3, r3, r2
    69a8:	00db      	lsls	r3, r3, #3
    69aa:	18cb      	adds	r3, r1, r3
    69ac:	3304      	adds	r3, #4
    69ae:	681b      	ldr	r3, [r3, #0]
    69b0:	2201      	movs	r2, #1
    69b2:	409a      	lsls	r2, r3
    69b4:	0013      	movs	r3, r2
    69b6:	001a      	movs	r2, r3
    69b8:	01e3      	lsls	r3, r4, #7
    69ba:	18c3      	adds	r3, r0, r3
    69bc:	3304      	adds	r3, #4
    69be:	601a      	str	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    69c0:	4851      	ldr	r0, [pc, #324]	; (6b08 <pinMode+0x250>)
    69c2:	4950      	ldr	r1, [pc, #320]	; (6b04 <pinMode+0x24c>)
    69c4:	687a      	ldr	r2, [r7, #4]
    69c6:	0013      	movs	r3, r2
    69c8:	005b      	lsls	r3, r3, #1
    69ca:	189b      	adds	r3, r3, r2
    69cc:	00db      	lsls	r3, r3, #3
    69ce:	565b      	ldrsb	r3, [r3, r1]
    69d0:	001c      	movs	r4, r3
    69d2:	494c      	ldr	r1, [pc, #304]	; (6b04 <pinMode+0x24c>)
    69d4:	687a      	ldr	r2, [r7, #4]
    69d6:	0013      	movs	r3, r2
    69d8:	005b      	lsls	r3, r3, #1
    69da:	189b      	adds	r3, r3, r2
    69dc:	00db      	lsls	r3, r3, #3
    69de:	18cb      	adds	r3, r1, r3
    69e0:	3304      	adds	r3, #4
    69e2:	681b      	ldr	r3, [r3, #0]
    69e4:	2201      	movs	r2, #1
    69e6:	409a      	lsls	r2, r3
    69e8:	0013      	movs	r3, r2
    69ea:	001a      	movs	r2, r3
    69ec:	01e3      	lsls	r3, r4, #7
    69ee:	18c3      	adds	r3, r0, r3
    69f0:	3318      	adds	r3, #24
    69f2:	601a      	str	r2, [r3, #0]
    break ;
    69f4:	e082      	b.n	6afc <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    69f6:	4844      	ldr	r0, [pc, #272]	; (6b08 <pinMode+0x250>)
    69f8:	4942      	ldr	r1, [pc, #264]	; (6b04 <pinMode+0x24c>)
    69fa:	687a      	ldr	r2, [r7, #4]
    69fc:	0013      	movs	r3, r2
    69fe:	005b      	lsls	r3, r3, #1
    6a00:	189b      	adds	r3, r3, r2
    6a02:	00db      	lsls	r3, r3, #3
    6a04:	565b      	ldrsb	r3, [r3, r1]
    6a06:	001c      	movs	r4, r3
    6a08:	493e      	ldr	r1, [pc, #248]	; (6b04 <pinMode+0x24c>)
    6a0a:	687a      	ldr	r2, [r7, #4]
    6a0c:	0013      	movs	r3, r2
    6a0e:	005b      	lsls	r3, r3, #1
    6a10:	189b      	adds	r3, r3, r2
    6a12:	00db      	lsls	r3, r3, #3
    6a14:	18cb      	adds	r3, r1, r3
    6a16:	3304      	adds	r3, #4
    6a18:	681b      	ldr	r3, [r3, #0]
    6a1a:	2140      	movs	r1, #64	; 0x40
    6a1c:	01e2      	lsls	r2, r4, #7
    6a1e:	1882      	adds	r2, r0, r2
    6a20:	18d3      	adds	r3, r2, r3
    6a22:	185b      	adds	r3, r3, r1
    6a24:	2206      	movs	r2, #6
    6a26:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6a28:	4837      	ldr	r0, [pc, #220]	; (6b08 <pinMode+0x250>)
    6a2a:	4936      	ldr	r1, [pc, #216]	; (6b04 <pinMode+0x24c>)
    6a2c:	687a      	ldr	r2, [r7, #4]
    6a2e:	0013      	movs	r3, r2
    6a30:	005b      	lsls	r3, r3, #1
    6a32:	189b      	adds	r3, r3, r2
    6a34:	00db      	lsls	r3, r3, #3
    6a36:	565b      	ldrsb	r3, [r3, r1]
    6a38:	001c      	movs	r4, r3
    6a3a:	4932      	ldr	r1, [pc, #200]	; (6b04 <pinMode+0x24c>)
    6a3c:	687a      	ldr	r2, [r7, #4]
    6a3e:	0013      	movs	r3, r2
    6a40:	005b      	lsls	r3, r3, #1
    6a42:	189b      	adds	r3, r3, r2
    6a44:	00db      	lsls	r3, r3, #3
    6a46:	18cb      	adds	r3, r1, r3
    6a48:	3304      	adds	r3, #4
    6a4a:	681b      	ldr	r3, [r3, #0]
    6a4c:	2201      	movs	r2, #1
    6a4e:	409a      	lsls	r2, r3
    6a50:	0013      	movs	r3, r2
    6a52:	001a      	movs	r2, r3
    6a54:	01e3      	lsls	r3, r4, #7
    6a56:	18c3      	adds	r3, r0, r3
    6a58:	3304      	adds	r3, #4
    6a5a:	601a      	str	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6a5c:	482a      	ldr	r0, [pc, #168]	; (6b08 <pinMode+0x250>)
    6a5e:	4929      	ldr	r1, [pc, #164]	; (6b04 <pinMode+0x24c>)
    6a60:	687a      	ldr	r2, [r7, #4]
    6a62:	0013      	movs	r3, r2
    6a64:	005b      	lsls	r3, r3, #1
    6a66:	189b      	adds	r3, r3, r2
    6a68:	00db      	lsls	r3, r3, #3
    6a6a:	565b      	ldrsb	r3, [r3, r1]
    6a6c:	001c      	movs	r4, r3
    6a6e:	4925      	ldr	r1, [pc, #148]	; (6b04 <pinMode+0x24c>)
    6a70:	687a      	ldr	r2, [r7, #4]
    6a72:	0013      	movs	r3, r2
    6a74:	005b      	lsls	r3, r3, #1
    6a76:	189b      	adds	r3, r3, r2
    6a78:	00db      	lsls	r3, r3, #3
    6a7a:	18cb      	adds	r3, r1, r3
    6a7c:	3304      	adds	r3, #4
    6a7e:	681b      	ldr	r3, [r3, #0]
    6a80:	2201      	movs	r2, #1
    6a82:	409a      	lsls	r2, r3
    6a84:	0013      	movs	r3, r2
    6a86:	001a      	movs	r2, r3
    6a88:	01e3      	lsls	r3, r4, #7
    6a8a:	18c3      	adds	r3, r0, r3
    6a8c:	3314      	adds	r3, #20
    6a8e:	601a      	str	r2, [r3, #0]
    break ;
    6a90:	e034      	b.n	6afc <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    6a92:	481d      	ldr	r0, [pc, #116]	; (6b08 <pinMode+0x250>)
    6a94:	491b      	ldr	r1, [pc, #108]	; (6b04 <pinMode+0x24c>)
    6a96:	687a      	ldr	r2, [r7, #4]
    6a98:	0013      	movs	r3, r2
    6a9a:	005b      	lsls	r3, r3, #1
    6a9c:	189b      	adds	r3, r3, r2
    6a9e:	00db      	lsls	r3, r3, #3
    6aa0:	565b      	ldrsb	r3, [r3, r1]
    6aa2:	001c      	movs	r4, r3
    6aa4:	4917      	ldr	r1, [pc, #92]	; (6b04 <pinMode+0x24c>)
    6aa6:	687a      	ldr	r2, [r7, #4]
    6aa8:	0013      	movs	r3, r2
    6aaa:	005b      	lsls	r3, r3, #1
    6aac:	189b      	adds	r3, r3, r2
    6aae:	00db      	lsls	r3, r3, #3
    6ab0:	18cb      	adds	r3, r1, r3
    6ab2:	3304      	adds	r3, #4
    6ab4:	681b      	ldr	r3, [r3, #0]
    6ab6:	2140      	movs	r1, #64	; 0x40
    6ab8:	01e2      	lsls	r2, r4, #7
    6aba:	1882      	adds	r2, r0, r2
    6abc:	18d3      	adds	r3, r2, r3
    6abe:	185b      	adds	r3, r3, r1
    6ac0:	2202      	movs	r2, #2
    6ac2:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6ac4:	4810      	ldr	r0, [pc, #64]	; (6b08 <pinMode+0x250>)
    6ac6:	490f      	ldr	r1, [pc, #60]	; (6b04 <pinMode+0x24c>)
    6ac8:	687a      	ldr	r2, [r7, #4]
    6aca:	0013      	movs	r3, r2
    6acc:	005b      	lsls	r3, r3, #1
    6ace:	189b      	adds	r3, r3, r2
    6ad0:	00db      	lsls	r3, r3, #3
    6ad2:	565b      	ldrsb	r3, [r3, r1]
    6ad4:	001c      	movs	r4, r3
    6ad6:	490b      	ldr	r1, [pc, #44]	; (6b04 <pinMode+0x24c>)
    6ad8:	687a      	ldr	r2, [r7, #4]
    6ada:	0013      	movs	r3, r2
    6adc:	005b      	lsls	r3, r3, #1
    6ade:	189b      	adds	r3, r3, r2
    6ae0:	00db      	lsls	r3, r3, #3
    6ae2:	18cb      	adds	r3, r1, r3
    6ae4:	3304      	adds	r3, #4
    6ae6:	681b      	ldr	r3, [r3, #0]
    6ae8:	2201      	movs	r2, #1
    6aea:	409a      	lsls	r2, r3
    6aec:	0013      	movs	r3, r2
    6aee:	001a      	movs	r2, r3
    6af0:	01e3      	lsls	r3, r4, #7
    6af2:	18c3      	adds	r3, r0, r3
    6af4:	3308      	adds	r3, #8
    6af6:	601a      	str	r2, [r3, #0]
    break ;
    6af8:	e000      	b.n	6afc <pinMode+0x244>
    return ;
    6afa:	46c0      	nop			; (mov r8, r8)
  }
}
    6afc:	46bd      	mov	sp, r7
    6afe:	b003      	add	sp, #12
    6b00:	bd90      	pop	{r4, r7, pc}
    6b02:	46c0      	nop			; (mov r8, r8)
    6b04:	0001371c 	.word	0x0001371c
    6b08:	41004400 	.word	0x41004400

00006b0c <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    6b0c:	b590      	push	{r4, r7, lr}
    6b0e:	b087      	sub	sp, #28
    6b10:	af00      	add	r7, sp, #0
    6b12:	6078      	str	r0, [r7, #4]
    6b14:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6b16:	4934      	ldr	r1, [pc, #208]	; (6be8 <digitalWrite+0xdc>)
    6b18:	687a      	ldr	r2, [r7, #4]
    6b1a:	0013      	movs	r3, r2
    6b1c:	005b      	lsls	r3, r3, #1
    6b1e:	189b      	adds	r3, r3, r2
    6b20:	00db      	lsls	r3, r3, #3
    6b22:	18cb      	adds	r3, r1, r3
    6b24:	3308      	adds	r3, #8
    6b26:	781b      	ldrb	r3, [r3, #0]
    6b28:	b25b      	sxtb	r3, r3
    6b2a:	3301      	adds	r3, #1
    6b2c:	d058      	beq.n	6be0 <digitalWrite+0xd4>
  {
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
    6b2e:	2317      	movs	r3, #23
    6b30:	18f9      	adds	r1, r7, r3
    6b32:	482d      	ldr	r0, [pc, #180]	; (6be8 <digitalWrite+0xdc>)
    6b34:	687a      	ldr	r2, [r7, #4]
    6b36:	0013      	movs	r3, r2
    6b38:	005b      	lsls	r3, r3, #1
    6b3a:	189b      	adds	r3, r3, r2
    6b3c:	00db      	lsls	r3, r3, #3
    6b3e:	5c1b      	ldrb	r3, [r3, r0]
    6b40:	700b      	strb	r3, [r1, #0]
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    6b42:	4929      	ldr	r1, [pc, #164]	; (6be8 <digitalWrite+0xdc>)
    6b44:	687a      	ldr	r2, [r7, #4]
    6b46:	0013      	movs	r3, r2
    6b48:	005b      	lsls	r3, r3, #1
    6b4a:	189b      	adds	r3, r3, r2
    6b4c:	00db      	lsls	r3, r3, #3
    6b4e:	18cb      	adds	r3, r1, r3
    6b50:	3304      	adds	r3, #4
    6b52:	681b      	ldr	r3, [r3, #0]
    6b54:	613b      	str	r3, [r7, #16]
  uint32_t pinMask = (1ul << pin);
    6b56:	2201      	movs	r2, #1
    6b58:	693b      	ldr	r3, [r7, #16]
    6b5a:	409a      	lsls	r2, r3
    6b5c:	0013      	movs	r3, r2
    6b5e:	60fb      	str	r3, [r7, #12]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    6b60:	4a22      	ldr	r2, [pc, #136]	; (6bec <digitalWrite+0xe0>)
    6b62:	2317      	movs	r3, #23
    6b64:	18fb      	adds	r3, r7, r3
    6b66:	781b      	ldrb	r3, [r3, #0]
    6b68:	b25b      	sxtb	r3, r3
    6b6a:	01db      	lsls	r3, r3, #7
    6b6c:	18d3      	adds	r3, r2, r3
    6b6e:	3308      	adds	r3, #8
    6b70:	681b      	ldr	r3, [r3, #0]
    6b72:	68fa      	ldr	r2, [r7, #12]
    6b74:	4013      	ands	r3, r2
    6b76:	d118      	bne.n	6baa <digitalWrite+0x9e>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    6b78:	4c1c      	ldr	r4, [pc, #112]	; (6bec <digitalWrite+0xe0>)
    6b7a:	2317      	movs	r3, #23
    6b7c:	18fb      	adds	r3, r7, r3
    6b7e:	781b      	ldrb	r3, [r3, #0]
    6b80:	b25b      	sxtb	r3, r3
    6b82:	683a      	ldr	r2, [r7, #0]
    6b84:	1e51      	subs	r1, r2, #1
    6b86:	418a      	sbcs	r2, r1
    6b88:	b2d1      	uxtb	r1, r2
    6b8a:	2040      	movs	r0, #64	; 0x40
    6b8c:	01db      	lsls	r3, r3, #7
    6b8e:	18e2      	adds	r2, r4, r3
    6b90:	693b      	ldr	r3, [r7, #16]
    6b92:	18d3      	adds	r3, r2, r3
    6b94:	181a      	adds	r2, r3, r0
    6b96:	7813      	ldrb	r3, [r2, #0]
    6b98:	2001      	movs	r0, #1
    6b9a:	4001      	ands	r1, r0
    6b9c:	0088      	lsls	r0, r1, #2
    6b9e:	2104      	movs	r1, #4
    6ba0:	438b      	bics	r3, r1
    6ba2:	1c19      	adds	r1, r3, #0
    6ba4:	1c03      	adds	r3, r0, #0
    6ba6:	430b      	orrs	r3, r1
    6ba8:	7013      	strb	r3, [r2, #0]
  }

  switch ( ulVal )
    6baa:	683b      	ldr	r3, [r7, #0]
    6bac:	2b00      	cmp	r3, #0
    6bae:	d10a      	bne.n	6bc6 <digitalWrite+0xba>
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    6bb0:	4a0e      	ldr	r2, [pc, #56]	; (6bec <digitalWrite+0xe0>)
    6bb2:	2317      	movs	r3, #23
    6bb4:	18fb      	adds	r3, r7, r3
    6bb6:	781b      	ldrb	r3, [r3, #0]
    6bb8:	b25b      	sxtb	r3, r3
    6bba:	01db      	lsls	r3, r3, #7
    6bbc:	18d3      	adds	r3, r2, r3
    6bbe:	3314      	adds	r3, #20
    6bc0:	68fa      	ldr	r2, [r7, #12]
    6bc2:	601a      	str	r2, [r3, #0]
    break ;
    6bc4:	e00a      	b.n	6bdc <digitalWrite+0xd0>

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    6bc6:	4a09      	ldr	r2, [pc, #36]	; (6bec <digitalWrite+0xe0>)
    6bc8:	2317      	movs	r3, #23
    6bca:	18fb      	adds	r3, r7, r3
    6bcc:	781b      	ldrb	r3, [r3, #0]
    6bce:	b25b      	sxtb	r3, r3
    6bd0:	01db      	lsls	r3, r3, #7
    6bd2:	18d3      	adds	r3, r2, r3
    6bd4:	3318      	adds	r3, #24
    6bd6:	68fa      	ldr	r2, [r7, #12]
    6bd8:	601a      	str	r2, [r3, #0]
    break ;
    6bda:	46c0      	nop			; (mov r8, r8)
  }

  return ;
    6bdc:	46c0      	nop			; (mov r8, r8)
    6bde:	e000      	b.n	6be2 <digitalWrite+0xd6>
    return ;
    6be0:	46c0      	nop			; (mov r8, r8)
}
    6be2:	46bd      	mov	sp, r7
    6be4:	b007      	add	sp, #28
    6be6:	bd90      	pop	{r4, r7, pc}
    6be8:	0001371c 	.word	0x0001371c
    6bec:	41004400 	.word	0x41004400

00006bf0 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    6bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bf2:	b085      	sub	sp, #20
    6bf4:	af00      	add	r7, sp, #0
    6bf6:	6078      	str	r0, [r7, #4]
    6bf8:	000a      	movs	r2, r1
    6bfa:	1cfb      	adds	r3, r7, #3
    6bfc:	701a      	strb	r2, [r3, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6bfe:	49a0      	ldr	r1, [pc, #640]	; (6e80 <pinPeripheral+0x290>)
    6c00:	687a      	ldr	r2, [r7, #4]
    6c02:	0013      	movs	r3, r2
    6c04:	005b      	lsls	r3, r3, #1
    6c06:	189b      	adds	r3, r3, r2
    6c08:	00db      	lsls	r3, r3, #3
    6c0a:	18cb      	adds	r3, r1, r3
    6c0c:	3308      	adds	r3, #8
    6c0e:	781b      	ldrb	r3, [r3, #0]
    6c10:	b25b      	sxtb	r3, r3
    6c12:	3301      	adds	r3, #1
    6c14:	d102      	bne.n	6c1c <pinPeripheral+0x2c>
  {
    return -1 ;
    6c16:	2301      	movs	r3, #1
    6c18:	425b      	negs	r3, r3
    6c1a:	e12d      	b.n	6e78 <pinPeripheral+0x288>
  }

  switch ( ulPeripheral )
    6c1c:	1cfb      	adds	r3, r7, #3
    6c1e:	781b      	ldrb	r3, [r3, #0]
    6c20:	b25b      	sxtb	r3, r3
    6c22:	3301      	adds	r3, #1
    6c24:	2b0c      	cmp	r3, #12
    6c26:	d900      	bls.n	6c2a <pinPeripheral+0x3a>
    6c28:	e125      	b.n	6e76 <pinPeripheral+0x286>
    6c2a:	009a      	lsls	r2, r3, #2
    6c2c:	4b95      	ldr	r3, [pc, #596]	; (6e84 <pinPeripheral+0x294>)
    6c2e:	18d3      	adds	r3, r2, r3
    6c30:	681b      	ldr	r3, [r3, #0]
    6c32:	469f      	mov	pc, r3
    case PIO_OUTPUT:
      // Disable peripheral muxing, done in pinMode
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
    6c34:	1cfb      	adds	r3, r7, #3
    6c36:	781b      	ldrb	r3, [r3, #0]
    6c38:	b25b      	sxtb	r3, r3
    6c3a:	2b09      	cmp	r3, #9
    6c3c:	d105      	bne.n	6c4a <pinPeripheral+0x5a>
      {
        pinMode( ulPin, INPUT ) ;
    6c3e:	687b      	ldr	r3, [r7, #4]
    6c40:	2100      	movs	r1, #0
    6c42:	0018      	movs	r0, r3
    6c44:	f7ff fe38 	bl	68b8 <pinMode>
          {
            // PIO_DIGITAL, do we have to do something as all cases are covered?
          }
        }
      }
    break ;
    6c48:	e114      	b.n	6e74 <pinPeripheral+0x284>
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    6c4a:	1cfb      	adds	r3, r7, #3
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	b25b      	sxtb	r3, r3
    6c50:	2b0a      	cmp	r3, #10
    6c52:	d105      	bne.n	6c60 <pinPeripheral+0x70>
          pinMode( ulPin, INPUT_PULLUP ) ;
    6c54:	687b      	ldr	r3, [r7, #4]
    6c56:	2102      	movs	r1, #2
    6c58:	0018      	movs	r0, r3
    6c5a:	f7ff fe2d 	bl	68b8 <pinMode>
    break ;
    6c5e:	e109      	b.n	6e74 <pinPeripheral+0x284>
          if ( ulPeripheral == PIO_OUTPUT )
    6c60:	1cfb      	adds	r3, r7, #3
    6c62:	781b      	ldrb	r3, [r3, #0]
    6c64:	b25b      	sxtb	r3, r3
    6c66:	2b0b      	cmp	r3, #11
    6c68:	d000      	beq.n	6c6c <pinPeripheral+0x7c>
    6c6a:	e103      	b.n	6e74 <pinPeripheral+0x284>
            pinMode( ulPin, OUTPUT ) ;
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	2101      	movs	r1, #1
    6c70:	0018      	movs	r0, r3
    6c72:	f7ff fe21 	bl	68b8 <pinMode>
    break ;
    6c76:	e0fd      	b.n	6e74 <pinPeripheral+0x284>
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6c78:	4981      	ldr	r1, [pc, #516]	; (6e80 <pinPeripheral+0x290>)
    6c7a:	687a      	ldr	r2, [r7, #4]
    6c7c:	0013      	movs	r3, r2
    6c7e:	005b      	lsls	r3, r3, #1
    6c80:	189b      	adds	r3, r3, r2
    6c82:	00db      	lsls	r3, r3, #3
    6c84:	18cb      	adds	r3, r1, r3
    6c86:	3304      	adds	r3, #4
    6c88:	681b      	ldr	r3, [r3, #0]
    6c8a:	2201      	movs	r2, #1
    6c8c:	4013      	ands	r3, r2
    6c8e:	d076      	beq.n	6d7e <pinPeripheral+0x18e>
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    6c90:	487d      	ldr	r0, [pc, #500]	; (6e88 <pinPeripheral+0x298>)
    6c92:	497b      	ldr	r1, [pc, #492]	; (6e80 <pinPeripheral+0x290>)
    6c94:	687a      	ldr	r2, [r7, #4]
    6c96:	0013      	movs	r3, r2
    6c98:	005b      	lsls	r3, r3, #1
    6c9a:	189b      	adds	r3, r3, r2
    6c9c:	00db      	lsls	r3, r3, #3
    6c9e:	565b      	ldrsb	r3, [r3, r1]
    6ca0:	001c      	movs	r4, r3
    6ca2:	4977      	ldr	r1, [pc, #476]	; (6e80 <pinPeripheral+0x290>)
    6ca4:	687a      	ldr	r2, [r7, #4]
    6ca6:	0013      	movs	r3, r2
    6ca8:	005b      	lsls	r3, r3, #1
    6caa:	189b      	adds	r3, r3, r2
    6cac:	00db      	lsls	r3, r3, #3
    6cae:	18cb      	adds	r3, r1, r3
    6cb0:	3304      	adds	r3, #4
    6cb2:	681b      	ldr	r3, [r3, #0]
    6cb4:	085b      	lsrs	r3, r3, #1
    6cb6:	2130      	movs	r1, #48	; 0x30
    6cb8:	01e2      	lsls	r2, r4, #7
    6cba:	1882      	adds	r2, r0, r2
    6cbc:	18d3      	adds	r3, r2, r3
    6cbe:	185b      	adds	r3, r3, r1
    6cc0:	781b      	ldrb	r3, [r3, #0]
    6cc2:	b2db      	uxtb	r3, r3
    6cc4:	001a      	movs	r2, r3
    6cc6:	230f      	movs	r3, #15
    6cc8:	4013      	ands	r3, r2
    6cca:	60fb      	str	r3, [r7, #12]
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    6ccc:	486e      	ldr	r0, [pc, #440]	; (6e88 <pinPeripheral+0x298>)
    6cce:	496c      	ldr	r1, [pc, #432]	; (6e80 <pinPeripheral+0x290>)
    6cd0:	687a      	ldr	r2, [r7, #4]
    6cd2:	0013      	movs	r3, r2
    6cd4:	005b      	lsls	r3, r3, #1
    6cd6:	189b      	adds	r3, r3, r2
    6cd8:	00db      	lsls	r3, r3, #3
    6cda:	565b      	ldrsb	r3, [r3, r1]
    6cdc:	001d      	movs	r5, r3
    6cde:	4968      	ldr	r1, [pc, #416]	; (6e80 <pinPeripheral+0x290>)
    6ce0:	687a      	ldr	r2, [r7, #4]
    6ce2:	0013      	movs	r3, r2
    6ce4:	005b      	lsls	r3, r3, #1
    6ce6:	189b      	adds	r3, r3, r2
    6ce8:	00db      	lsls	r3, r3, #3
    6cea:	18cb      	adds	r3, r1, r3
    6cec:	3304      	adds	r3, #4
    6cee:	681b      	ldr	r3, [r3, #0]
    6cf0:	085b      	lsrs	r3, r3, #1
    6cf2:	1cfa      	adds	r2, r7, #3
    6cf4:	7812      	ldrb	r2, [r2, #0]
    6cf6:	0112      	lsls	r2, r2, #4
    6cf8:	b2d1      	uxtb	r1, r2
    6cfa:	68fa      	ldr	r2, [r7, #12]
    6cfc:	b2d2      	uxtb	r2, r2
    6cfe:	430a      	orrs	r2, r1
    6d00:	b2d4      	uxtb	r4, r2
    6d02:	2130      	movs	r1, #48	; 0x30
    6d04:	01ea      	lsls	r2, r5, #7
    6d06:	1882      	adds	r2, r0, r2
    6d08:	18d3      	adds	r3, r2, r3
    6d0a:	185b      	adds	r3, r3, r1
    6d0c:	1c22      	adds	r2, r4, #0
    6d0e:	701a      	strb	r2, [r3, #0]
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    6d10:	4c5d      	ldr	r4, [pc, #372]	; (6e88 <pinPeripheral+0x298>)
    6d12:	495b      	ldr	r1, [pc, #364]	; (6e80 <pinPeripheral+0x290>)
    6d14:	687a      	ldr	r2, [r7, #4]
    6d16:	0013      	movs	r3, r2
    6d18:	005b      	lsls	r3, r3, #1
    6d1a:	189b      	adds	r3, r3, r2
    6d1c:	00db      	lsls	r3, r3, #3
    6d1e:	565b      	ldrsb	r3, [r3, r1]
    6d20:	001e      	movs	r6, r3
    6d22:	4957      	ldr	r1, [pc, #348]	; (6e80 <pinPeripheral+0x290>)
    6d24:	687a      	ldr	r2, [r7, #4]
    6d26:	0013      	movs	r3, r2
    6d28:	005b      	lsls	r3, r3, #1
    6d2a:	189b      	adds	r3, r3, r2
    6d2c:	00db      	lsls	r3, r3, #3
    6d2e:	18cb      	adds	r3, r1, r3
    6d30:	3304      	adds	r3, #4
    6d32:	6819      	ldr	r1, [r3, #0]
    6d34:	4d54      	ldr	r5, [pc, #336]	; (6e88 <pinPeripheral+0x298>)
    6d36:	4852      	ldr	r0, [pc, #328]	; (6e80 <pinPeripheral+0x290>)
    6d38:	687a      	ldr	r2, [r7, #4]
    6d3a:	0013      	movs	r3, r2
    6d3c:	005b      	lsls	r3, r3, #1
    6d3e:	189b      	adds	r3, r3, r2
    6d40:	00db      	lsls	r3, r3, #3
    6d42:	561b      	ldrsb	r3, [r3, r0]
    6d44:	469c      	mov	ip, r3
    6d46:	484e      	ldr	r0, [pc, #312]	; (6e80 <pinPeripheral+0x290>)
    6d48:	687a      	ldr	r2, [r7, #4]
    6d4a:	0013      	movs	r3, r2
    6d4c:	005b      	lsls	r3, r3, #1
    6d4e:	189b      	adds	r3, r3, r2
    6d50:	00db      	lsls	r3, r3, #3
    6d52:	18c3      	adds	r3, r0, r3
    6d54:	3304      	adds	r3, #4
    6d56:	681b      	ldr	r3, [r3, #0]
    6d58:	2040      	movs	r0, #64	; 0x40
    6d5a:	4662      	mov	r2, ip
    6d5c:	01d2      	lsls	r2, r2, #7
    6d5e:	18aa      	adds	r2, r5, r2
    6d60:	18d3      	adds	r3, r2, r3
    6d62:	181b      	adds	r3, r3, r0
    6d64:	781b      	ldrb	r3, [r3, #0]
    6d66:	b2db      	uxtb	r3, r3
    6d68:	2201      	movs	r2, #1
    6d6a:	4313      	orrs	r3, r2
    6d6c:	b2d8      	uxtb	r0, r3
    6d6e:	2240      	movs	r2, #64	; 0x40
    6d70:	01f3      	lsls	r3, r6, #7
    6d72:	18e3      	adds	r3, r4, r3
    6d74:	185b      	adds	r3, r3, r1
    6d76:	189b      	adds	r3, r3, r2
    6d78:	1c02      	adds	r2, r0, #0
    6d7a:	701a      	strb	r2, [r3, #0]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
      }
#endif
    break ;
    6d7c:	e07b      	b.n	6e76 <pinPeripheral+0x286>
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    6d7e:	4842      	ldr	r0, [pc, #264]	; (6e88 <pinPeripheral+0x298>)
    6d80:	493f      	ldr	r1, [pc, #252]	; (6e80 <pinPeripheral+0x290>)
    6d82:	687a      	ldr	r2, [r7, #4]
    6d84:	0013      	movs	r3, r2
    6d86:	005b      	lsls	r3, r3, #1
    6d88:	189b      	adds	r3, r3, r2
    6d8a:	00db      	lsls	r3, r3, #3
    6d8c:	565b      	ldrsb	r3, [r3, r1]
    6d8e:	001c      	movs	r4, r3
    6d90:	493b      	ldr	r1, [pc, #236]	; (6e80 <pinPeripheral+0x290>)
    6d92:	687a      	ldr	r2, [r7, #4]
    6d94:	0013      	movs	r3, r2
    6d96:	005b      	lsls	r3, r3, #1
    6d98:	189b      	adds	r3, r3, r2
    6d9a:	00db      	lsls	r3, r3, #3
    6d9c:	18cb      	adds	r3, r1, r3
    6d9e:	3304      	adds	r3, #4
    6da0:	681b      	ldr	r3, [r3, #0]
    6da2:	085b      	lsrs	r3, r3, #1
    6da4:	2130      	movs	r1, #48	; 0x30
    6da6:	01e2      	lsls	r2, r4, #7
    6da8:	1882      	adds	r2, r0, r2
    6daa:	18d3      	adds	r3, r2, r3
    6dac:	185b      	adds	r3, r3, r1
    6dae:	781b      	ldrb	r3, [r3, #0]
    6db0:	b2db      	uxtb	r3, r3
    6db2:	001a      	movs	r2, r3
    6db4:	23f0      	movs	r3, #240	; 0xf0
    6db6:	4013      	ands	r3, r2
    6db8:	60bb      	str	r3, [r7, #8]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    6dba:	4833      	ldr	r0, [pc, #204]	; (6e88 <pinPeripheral+0x298>)
    6dbc:	4930      	ldr	r1, [pc, #192]	; (6e80 <pinPeripheral+0x290>)
    6dbe:	687a      	ldr	r2, [r7, #4]
    6dc0:	0013      	movs	r3, r2
    6dc2:	005b      	lsls	r3, r3, #1
    6dc4:	189b      	adds	r3, r3, r2
    6dc6:	00db      	lsls	r3, r3, #3
    6dc8:	565b      	ldrsb	r3, [r3, r1]
    6dca:	001d      	movs	r5, r3
    6dcc:	492c      	ldr	r1, [pc, #176]	; (6e80 <pinPeripheral+0x290>)
    6dce:	687a      	ldr	r2, [r7, #4]
    6dd0:	0013      	movs	r3, r2
    6dd2:	005b      	lsls	r3, r3, #1
    6dd4:	189b      	adds	r3, r3, r2
    6dd6:	00db      	lsls	r3, r3, #3
    6dd8:	18cb      	adds	r3, r1, r3
    6dda:	3304      	adds	r3, #4
    6ddc:	681b      	ldr	r3, [r3, #0]
    6dde:	085b      	lsrs	r3, r3, #1
    6de0:	1cfa      	adds	r2, r7, #3
    6de2:	7812      	ldrb	r2, [r2, #0]
    6de4:	210f      	movs	r1, #15
    6de6:	400a      	ands	r2, r1
    6de8:	b2d1      	uxtb	r1, r2
    6dea:	68ba      	ldr	r2, [r7, #8]
    6dec:	b2d2      	uxtb	r2, r2
    6dee:	430a      	orrs	r2, r1
    6df0:	b2d4      	uxtb	r4, r2
    6df2:	2130      	movs	r1, #48	; 0x30
    6df4:	01ea      	lsls	r2, r5, #7
    6df6:	1882      	adds	r2, r0, r2
    6df8:	18d3      	adds	r3, r2, r3
    6dfa:	185b      	adds	r3, r3, r1
    6dfc:	1c22      	adds	r2, r4, #0
    6dfe:	701a      	strb	r2, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    6e00:	4c21      	ldr	r4, [pc, #132]	; (6e88 <pinPeripheral+0x298>)
    6e02:	491f      	ldr	r1, [pc, #124]	; (6e80 <pinPeripheral+0x290>)
    6e04:	687a      	ldr	r2, [r7, #4]
    6e06:	0013      	movs	r3, r2
    6e08:	005b      	lsls	r3, r3, #1
    6e0a:	189b      	adds	r3, r3, r2
    6e0c:	00db      	lsls	r3, r3, #3
    6e0e:	565b      	ldrsb	r3, [r3, r1]
    6e10:	001e      	movs	r6, r3
    6e12:	491b      	ldr	r1, [pc, #108]	; (6e80 <pinPeripheral+0x290>)
    6e14:	687a      	ldr	r2, [r7, #4]
    6e16:	0013      	movs	r3, r2
    6e18:	005b      	lsls	r3, r3, #1
    6e1a:	189b      	adds	r3, r3, r2
    6e1c:	00db      	lsls	r3, r3, #3
    6e1e:	18cb      	adds	r3, r1, r3
    6e20:	3304      	adds	r3, #4
    6e22:	6819      	ldr	r1, [r3, #0]
    6e24:	4d18      	ldr	r5, [pc, #96]	; (6e88 <pinPeripheral+0x298>)
    6e26:	4816      	ldr	r0, [pc, #88]	; (6e80 <pinPeripheral+0x290>)
    6e28:	687a      	ldr	r2, [r7, #4]
    6e2a:	0013      	movs	r3, r2
    6e2c:	005b      	lsls	r3, r3, #1
    6e2e:	189b      	adds	r3, r3, r2
    6e30:	00db      	lsls	r3, r3, #3
    6e32:	561b      	ldrsb	r3, [r3, r0]
    6e34:	469c      	mov	ip, r3
    6e36:	4812      	ldr	r0, [pc, #72]	; (6e80 <pinPeripheral+0x290>)
    6e38:	687a      	ldr	r2, [r7, #4]
    6e3a:	0013      	movs	r3, r2
    6e3c:	005b      	lsls	r3, r3, #1
    6e3e:	189b      	adds	r3, r3, r2
    6e40:	00db      	lsls	r3, r3, #3
    6e42:	18c3      	adds	r3, r0, r3
    6e44:	3304      	adds	r3, #4
    6e46:	681b      	ldr	r3, [r3, #0]
    6e48:	2040      	movs	r0, #64	; 0x40
    6e4a:	4662      	mov	r2, ip
    6e4c:	01d2      	lsls	r2, r2, #7
    6e4e:	18aa      	adds	r2, r5, r2
    6e50:	18d3      	adds	r3, r2, r3
    6e52:	181b      	adds	r3, r3, r0
    6e54:	781b      	ldrb	r3, [r3, #0]
    6e56:	b2db      	uxtb	r3, r3
    6e58:	2201      	movs	r2, #1
    6e5a:	4313      	orrs	r3, r2
    6e5c:	b2d8      	uxtb	r0, r3
    6e5e:	2240      	movs	r2, #64	; 0x40
    6e60:	01f3      	lsls	r3, r6, #7
    6e62:	18e3      	adds	r3, r4, r3
    6e64:	185b      	adds	r3, r3, r1
    6e66:	189b      	adds	r3, r3, r2
    6e68:	1c02      	adds	r2, r0, #0
    6e6a:	701a      	strb	r2, [r3, #0]
    break ;
    6e6c:	e003      	b.n	6e76 <pinPeripheral+0x286>

    case PIO_NOT_A_PIN:
      return -1l ;
    6e6e:	2301      	movs	r3, #1
    6e70:	425b      	negs	r3, r3
    6e72:	e001      	b.n	6e78 <pinPeripheral+0x288>
    break ;
    6e74:	46c0      	nop			; (mov r8, r8)
    break ;
  }

  return 0l ;
    6e76:	2300      	movs	r3, #0
}
    6e78:	0018      	movs	r0, r3
    6e7a:	46bd      	mov	sp, r7
    6e7c:	b005      	add	sp, #20
    6e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e80:	0001371c 	.word	0x0001371c
    6e84:	0001357c 	.word	0x0001357c
    6e88:	41004400 	.word	0x41004400

00006e8c <_Z3maplllll>:

  return random(diff) + howsmall;
}

extern long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6e8c:	b580      	push	{r7, lr}
    6e8e:	b084      	sub	sp, #16
    6e90:	af00      	add	r7, sp, #0
    6e92:	60f8      	str	r0, [r7, #12]
    6e94:	60b9      	str	r1, [r7, #8]
    6e96:	607a      	str	r2, [r7, #4]
    6e98:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6e9a:	68fa      	ldr	r2, [r7, #12]
    6e9c:	68bb      	ldr	r3, [r7, #8]
    6e9e:	1ad3      	subs	r3, r2, r3
    6ea0:	69b9      	ldr	r1, [r7, #24]
    6ea2:	683a      	ldr	r2, [r7, #0]
    6ea4:	1a8a      	subs	r2, r1, r2
    6ea6:	435a      	muls	r2, r3
    6ea8:	0010      	movs	r0, r2
    6eaa:	687a      	ldr	r2, [r7, #4]
    6eac:	68bb      	ldr	r3, [r7, #8]
    6eae:	1ad3      	subs	r3, r2, r3
    6eb0:	0019      	movs	r1, r3
    6eb2:	f007 fda5 	bl	ea00 <__divsi3>
    6eb6:	0003      	movs	r3, r0
    6eb8:	001a      	movs	r2, r3
    6eba:	683b      	ldr	r3, [r7, #0]
    6ebc:	18d3      	adds	r3, r2, r3
}
    6ebe:	0018      	movs	r0, r3
    6ec0:	46bd      	mov	sp, r7
    6ec2:	b004      	add	sp, #16
    6ec4:	bd80      	pop	{r7, pc}

00006ec6 <_ZNK6String14StringIfHelperEv>:
{
	// use a function pointer to allow for "if (s)" without the
	// complications of an operator bool(). for more information, see:
	// http://www.artima.com/cppsource/safebool.html
	typedef void (String::*StringIfHelperType)() const;
	void StringIfHelper() const {}
    6ec6:	b580      	push	{r7, lr}
    6ec8:	b082      	sub	sp, #8
    6eca:	af00      	add	r7, sp, #0
    6ecc:	6078      	str	r0, [r7, #4]
    6ece:	46c0      	nop			; (mov r8, r8)
    6ed0:	46bd      	mov	sp, r7
    6ed2:	b002      	add	sp, #8
    6ed4:	bd80      	pop	{r7, pc}
	...

00006ed8 <_ZNK6StringcvMS_KFvvEEv>:
	friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    6ed8:	b580      	push	{r7, lr}
    6eda:	b082      	sub	sp, #8
    6edc:	af00      	add	r7, sp, #0
    6ede:	6078      	str	r0, [r7, #4]
    6ee0:	6039      	str	r1, [r7, #0]
    6ee2:	683b      	ldr	r3, [r7, #0]
    6ee4:	681b      	ldr	r3, [r3, #0]
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	d106      	bne.n	6ef8 <_ZNK6StringcvMS_KFvvEEv+0x20>
    6eea:	687b      	ldr	r3, [r7, #4]
    6eec:	2200      	movs	r2, #0
    6eee:	601a      	str	r2, [r3, #0]
    6ef0:	687b      	ldr	r3, [r7, #4]
    6ef2:	2200      	movs	r2, #0
    6ef4:	605a      	str	r2, [r3, #4]
    6ef6:	e005      	b.n	6f04 <_ZNK6StringcvMS_KFvvEEv+0x2c>
    6ef8:	687b      	ldr	r3, [r7, #4]
    6efa:	4a04      	ldr	r2, [pc, #16]	; (6f0c <_ZNK6StringcvMS_KFvvEEv+0x34>)
    6efc:	601a      	str	r2, [r3, #0]
    6efe:	687b      	ldr	r3, [r7, #4]
    6f00:	2200      	movs	r2, #0
    6f02:	605a      	str	r2, [r3, #4]
    6f04:	6878      	ldr	r0, [r7, #4]
    6f06:	46bd      	mov	sp, r7
    6f08:	b002      	add	sp, #8
    6f0a:	bd80      	pop	{r7, pc}
    6f0c:	00006ec7 	.word	0x00006ec7

00006f10 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    6f10:	b580      	push	{r7, lr}
    6f12:	b086      	sub	sp, #24
    6f14:	af00      	add	r7, sp, #0
    6f16:	6078      	str	r0, [r7, #4]
    6f18:	0008      	movs	r0, r1
    6f1a:	0011      	movs	r1, r2
    6f1c:	1cfb      	adds	r3, r7, #3
    6f1e:	1c02      	adds	r2, r0, #0
    6f20:	701a      	strb	r2, [r3, #0]
    6f22:	1cbb      	adds	r3, r7, #2
    6f24:	1c0a      	adds	r2, r1, #0
    6f26:	701a      	strb	r2, [r3, #0]
{
	init();
    6f28:	687b      	ldr	r3, [r7, #4]
    6f2a:	0018      	movs	r0, r3
    6f2c:	f000 f842 	bl	6fb4 <_ZN6String4initEv>
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
    6f30:	1cfb      	adds	r3, r7, #3
    6f32:	7818      	ldrb	r0, [r3, #0]
    6f34:	1cbb      	adds	r3, r7, #2
    6f36:	781a      	ldrb	r2, [r3, #0]
    6f38:	230c      	movs	r3, #12
    6f3a:	18fb      	adds	r3, r7, r3
    6f3c:	0019      	movs	r1, r3
    6f3e:	f006 fb8c 	bl	d65a <utoa>
	*this = buf;
    6f42:	230c      	movs	r3, #12
    6f44:	18fa      	adds	r2, r7, r3
    6f46:	687b      	ldr	r3, [r7, #4]
    6f48:	0011      	movs	r1, r2
    6f4a:	0018      	movs	r0, r3
    6f4c:	f000 f936 	bl	71bc <_ZN6StringaSEPKc>
}
    6f50:	687b      	ldr	r3, [r7, #4]
    6f52:	0018      	movs	r0, r3
    6f54:	46bd      	mov	sp, r7
    6f56:	b006      	add	sp, #24
    6f58:	bd80      	pop	{r7, pc}

00006f5a <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
    6f5a:	b580      	push	{r7, lr}
    6f5c:	b08e      	sub	sp, #56	; 0x38
    6f5e:	af00      	add	r7, sp, #0
    6f60:	60f8      	str	r0, [r7, #12]
    6f62:	60b9      	str	r1, [r7, #8]
    6f64:	1dfb      	adds	r3, r7, #7
    6f66:	701a      	strb	r2, [r3, #0]
{
	init();
    6f68:	68fb      	ldr	r3, [r7, #12]
    6f6a:	0018      	movs	r0, r3
    6f6c:	f000 f822 	bl	6fb4 <_ZN6String4initEv>
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
    6f70:	1dfb      	adds	r3, r7, #7
    6f72:	781a      	ldrb	r2, [r3, #0]
    6f74:	2314      	movs	r3, #20
    6f76:	18f9      	adds	r1, r7, r3
    6f78:	68bb      	ldr	r3, [r7, #8]
    6f7a:	0018      	movs	r0, r3
    6f7c:	f006 fae6 	bl	d54c <itoa>
	*this = buf;
    6f80:	2314      	movs	r3, #20
    6f82:	18fa      	adds	r2, r7, r3
    6f84:	68fb      	ldr	r3, [r7, #12]
    6f86:	0011      	movs	r1, r2
    6f88:	0018      	movs	r0, r3
    6f8a:	f000 f917 	bl	71bc <_ZN6StringaSEPKc>
}
    6f8e:	68fb      	ldr	r3, [r7, #12]
    6f90:	0018      	movs	r0, r3
    6f92:	46bd      	mov	sp, r7
    6f94:	b00e      	add	sp, #56	; 0x38
    6f96:	bd80      	pop	{r7, pc}

00006f98 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
    6f98:	b580      	push	{r7, lr}
    6f9a:	b082      	sub	sp, #8
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	6078      	str	r0, [r7, #4]
{
	free(buffer);
    6fa0:	687b      	ldr	r3, [r7, #4]
    6fa2:	681b      	ldr	r3, [r3, #0]
    6fa4:	0018      	movs	r0, r3
    6fa6:	f009 fc43 	bl	10830 <free>
}
    6faa:	687b      	ldr	r3, [r7, #4]
    6fac:	0018      	movs	r0, r3
    6fae:	46bd      	mov	sp, r7
    6fb0:	b002      	add	sp, #8
    6fb2:	bd80      	pop	{r7, pc}

00006fb4 <_ZN6String4initEv>:
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
    6fb4:	b580      	push	{r7, lr}
    6fb6:	b082      	sub	sp, #8
    6fb8:	af00      	add	r7, sp, #0
    6fba:	6078      	str	r0, [r7, #4]
	buffer = NULL;
    6fbc:	687b      	ldr	r3, [r7, #4]
    6fbe:	2200      	movs	r2, #0
    6fc0:	601a      	str	r2, [r3, #0]
	capacity = 0;
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	2200      	movs	r2, #0
    6fc6:	605a      	str	r2, [r3, #4]
	len = 0;
    6fc8:	687b      	ldr	r3, [r7, #4]
    6fca:	2200      	movs	r2, #0
    6fcc:	609a      	str	r2, [r3, #8]
}
    6fce:	46c0      	nop			; (mov r8, r8)
    6fd0:	46bd      	mov	sp, r7
    6fd2:	b002      	add	sp, #8
    6fd4:	bd80      	pop	{r7, pc}

00006fd6 <_ZN6String10invalidateEv>:

void String::invalidate(void)
{
    6fd6:	b580      	push	{r7, lr}
    6fd8:	b082      	sub	sp, #8
    6fda:	af00      	add	r7, sp, #0
    6fdc:	6078      	str	r0, [r7, #4]
	if (buffer) free(buffer);
    6fde:	687b      	ldr	r3, [r7, #4]
    6fe0:	681b      	ldr	r3, [r3, #0]
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d004      	beq.n	6ff0 <_ZN6String10invalidateEv+0x1a>
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	681b      	ldr	r3, [r3, #0]
    6fea:	0018      	movs	r0, r3
    6fec:	f009 fc20 	bl	10830 <free>
	buffer = NULL;
    6ff0:	687b      	ldr	r3, [r7, #4]
    6ff2:	2200      	movs	r2, #0
    6ff4:	601a      	str	r2, [r3, #0]
	capacity = len = 0;
    6ff6:	687b      	ldr	r3, [r7, #4]
    6ff8:	2200      	movs	r2, #0
    6ffa:	609a      	str	r2, [r3, #8]
    6ffc:	687b      	ldr	r3, [r7, #4]
    6ffe:	689a      	ldr	r2, [r3, #8]
    7000:	687b      	ldr	r3, [r7, #4]
    7002:	605a      	str	r2, [r3, #4]
}
    7004:	46c0      	nop			; (mov r8, r8)
    7006:	46bd      	mov	sp, r7
    7008:	b002      	add	sp, #8
    700a:	bd80      	pop	{r7, pc}

0000700c <_ZN6String7reserveEj>:

unsigned char String::reserve(unsigned int size)
{
    700c:	b580      	push	{r7, lr}
    700e:	b082      	sub	sp, #8
    7010:	af00      	add	r7, sp, #0
    7012:	6078      	str	r0, [r7, #4]
    7014:	6039      	str	r1, [r7, #0]
	if (buffer && capacity >= size) return 1;
    7016:	687b      	ldr	r3, [r7, #4]
    7018:	681b      	ldr	r3, [r3, #0]
    701a:	2b00      	cmp	r3, #0
    701c:	d006      	beq.n	702c <_ZN6String7reserveEj+0x20>
    701e:	687b      	ldr	r3, [r7, #4]
    7020:	685a      	ldr	r2, [r3, #4]
    7022:	683b      	ldr	r3, [r7, #0]
    7024:	429a      	cmp	r2, r3
    7026:	d301      	bcc.n	702c <_ZN6String7reserveEj+0x20>
    7028:	2301      	movs	r3, #1
    702a:	e016      	b.n	705a <_ZN6String7reserveEj+0x4e>
	if (changeBuffer(size)) {
    702c:	683a      	ldr	r2, [r7, #0]
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	0011      	movs	r1, r2
    7032:	0018      	movs	r0, r3
    7034:	f000 f815 	bl	7062 <_ZN6String12changeBufferEj>
    7038:	0003      	movs	r3, r0
    703a:	1e5a      	subs	r2, r3, #1
    703c:	4193      	sbcs	r3, r2
    703e:	b2db      	uxtb	r3, r3
    7040:	2b00      	cmp	r3, #0
    7042:	d009      	beq.n	7058 <_ZN6String7reserveEj+0x4c>
		if (len == 0) buffer[0] = 0;
    7044:	687b      	ldr	r3, [r7, #4]
    7046:	689b      	ldr	r3, [r3, #8]
    7048:	2b00      	cmp	r3, #0
    704a:	d103      	bne.n	7054 <_ZN6String7reserveEj+0x48>
    704c:	687b      	ldr	r3, [r7, #4]
    704e:	681b      	ldr	r3, [r3, #0]
    7050:	2200      	movs	r2, #0
    7052:	701a      	strb	r2, [r3, #0]
		return 1;
    7054:	2301      	movs	r3, #1
    7056:	e000      	b.n	705a <_ZN6String7reserveEj+0x4e>
	}
	return 0;
    7058:	2300      	movs	r3, #0
}
    705a:	0018      	movs	r0, r3
    705c:	46bd      	mov	sp, r7
    705e:	b002      	add	sp, #8
    7060:	bd80      	pop	{r7, pc}

00007062 <_ZN6String12changeBufferEj>:

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    7062:	b580      	push	{r7, lr}
    7064:	b084      	sub	sp, #16
    7066:	af00      	add	r7, sp, #0
    7068:	6078      	str	r0, [r7, #4]
    706a:	6039      	str	r1, [r7, #0]
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	681a      	ldr	r2, [r3, #0]
    7070:	683b      	ldr	r3, [r7, #0]
    7072:	3301      	adds	r3, #1
    7074:	0019      	movs	r1, r3
    7076:	0010      	movs	r0, r2
    7078:	f00a fa72 	bl	11560 <realloc>
    707c:	0003      	movs	r3, r0
    707e:	60fb      	str	r3, [r7, #12]
	if (newbuffer) {
    7080:	68fb      	ldr	r3, [r7, #12]
    7082:	2b00      	cmp	r3, #0
    7084:	d007      	beq.n	7096 <_ZN6String12changeBufferEj+0x34>
		buffer = newbuffer;
    7086:	687b      	ldr	r3, [r7, #4]
    7088:	68fa      	ldr	r2, [r7, #12]
    708a:	601a      	str	r2, [r3, #0]
		capacity = maxStrLen;
    708c:	687b      	ldr	r3, [r7, #4]
    708e:	683a      	ldr	r2, [r7, #0]
    7090:	605a      	str	r2, [r3, #4]
		return 1;
    7092:	2301      	movs	r3, #1
    7094:	e000      	b.n	7098 <_ZN6String12changeBufferEj+0x36>
	}
	return 0;
    7096:	2300      	movs	r3, #0
}
    7098:	0018      	movs	r0, r3
    709a:	46bd      	mov	sp, r7
    709c:	b004      	add	sp, #16
    709e:	bd80      	pop	{r7, pc}

000070a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    70a0:	b580      	push	{r7, lr}
    70a2:	b084      	sub	sp, #16
    70a4:	af00      	add	r7, sp, #0
    70a6:	60f8      	str	r0, [r7, #12]
    70a8:	60b9      	str	r1, [r7, #8]
    70aa:	607a      	str	r2, [r7, #4]
	if (!reserve(length)) {
    70ac:	687a      	ldr	r2, [r7, #4]
    70ae:	68fb      	ldr	r3, [r7, #12]
    70b0:	0011      	movs	r1, r2
    70b2:	0018      	movs	r0, r3
    70b4:	f7ff ffaa 	bl	700c <_ZN6String7reserveEj>
    70b8:	0003      	movs	r3, r0
    70ba:	425a      	negs	r2, r3
    70bc:	4153      	adcs	r3, r2
    70be:	b2db      	uxtb	r3, r3
    70c0:	2b00      	cmp	r3, #0
    70c2:	d005      	beq.n	70d0 <_ZN6String4copyEPKcj+0x30>
		invalidate();
    70c4:	68fb      	ldr	r3, [r7, #12]
    70c6:	0018      	movs	r0, r3
    70c8:	f7ff ff85 	bl	6fd6 <_ZN6String10invalidateEv>
		return *this;
    70cc:	68fb      	ldr	r3, [r7, #12]
    70ce:	e00a      	b.n	70e6 <_ZN6String4copyEPKcj+0x46>
	}
	len = length;
    70d0:	68fb      	ldr	r3, [r7, #12]
    70d2:	687a      	ldr	r2, [r7, #4]
    70d4:	609a      	str	r2, [r3, #8]
	strcpy(buffer, cstr);
    70d6:	68fb      	ldr	r3, [r7, #12]
    70d8:	681b      	ldr	r3, [r3, #0]
    70da:	68ba      	ldr	r2, [r7, #8]
    70dc:	0011      	movs	r1, r2
    70de:	0018      	movs	r0, r3
    70e0:	f00a fa68 	bl	115b4 <strcpy>
	return *this;
    70e4:	68fb      	ldr	r3, [r7, #12]
}
    70e6:	0018      	movs	r0, r3
    70e8:	46bd      	mov	sp, r7
    70ea:	b004      	add	sp, #16
    70ec:	bd80      	pop	{r7, pc}

000070ee <_ZN6String4moveERS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    70ee:	b580      	push	{r7, lr}
    70f0:	b084      	sub	sp, #16
    70f2:	af00      	add	r7, sp, #0
    70f4:	6078      	str	r0, [r7, #4]
    70f6:	6039      	str	r1, [r7, #0]
	if (buffer) {
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	681b      	ldr	r3, [r3, #0]
    70fc:	2b00      	cmp	r3, #0
    70fe:	d031      	beq.n	7164 <_ZN6String4moveERS_+0x76>
		if (rhs && capacity >= rhs.len) {
    7100:	2308      	movs	r3, #8
    7102:	18fb      	adds	r3, r7, r3
    7104:	683a      	ldr	r2, [r7, #0]
    7106:	0011      	movs	r1, r2
    7108:	0018      	movs	r0, r3
    710a:	f7ff fee5 	bl	6ed8 <_ZNK6StringcvMS_KFvvEEv>
    710e:	2308      	movs	r3, #8
    7110:	18fb      	adds	r3, r7, r3
    7112:	681b      	ldr	r3, [r3, #0]
    7114:	2b00      	cmp	r3, #0
    7116:	d105      	bne.n	7124 <_ZN6String4moveERS_+0x36>
    7118:	2308      	movs	r3, #8
    711a:	18fb      	adds	r3, r7, r3
    711c:	685b      	ldr	r3, [r3, #4]
    711e:	2201      	movs	r2, #1
    7120:	4013      	ands	r3, r2
    7122:	d007      	beq.n	7134 <_ZN6String4moveERS_+0x46>
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	685a      	ldr	r2, [r3, #4]
    7128:	683b      	ldr	r3, [r7, #0]
    712a:	689b      	ldr	r3, [r3, #8]
    712c:	429a      	cmp	r2, r3
    712e:	d301      	bcc.n	7134 <_ZN6String4moveERS_+0x46>
    7130:	2301      	movs	r3, #1
    7132:	e000      	b.n	7136 <_ZN6String4moveERS_+0x48>
    7134:	2300      	movs	r3, #0
    7136:	2b00      	cmp	r3, #0
    7138:	d00f      	beq.n	715a <_ZN6String4moveERS_+0x6c>
			strcpy(buffer, rhs.buffer);
    713a:	687b      	ldr	r3, [r7, #4]
    713c:	681a      	ldr	r2, [r3, #0]
    713e:	683b      	ldr	r3, [r7, #0]
    7140:	681b      	ldr	r3, [r3, #0]
    7142:	0019      	movs	r1, r3
    7144:	0010      	movs	r0, r2
    7146:	f00a fa35 	bl	115b4 <strcpy>
			len = rhs.len;
    714a:	683b      	ldr	r3, [r7, #0]
    714c:	689a      	ldr	r2, [r3, #8]
    714e:	687b      	ldr	r3, [r7, #4]
    7150:	609a      	str	r2, [r3, #8]
			rhs.len = 0;
    7152:	683b      	ldr	r3, [r7, #0]
    7154:	2200      	movs	r2, #0
    7156:	609a      	str	r2, [r3, #8]
			return;
    7158:	e019      	b.n	718e <_ZN6String4moveERS_+0xa0>
		} else {
			free(buffer);
    715a:	687b      	ldr	r3, [r7, #4]
    715c:	681b      	ldr	r3, [r3, #0]
    715e:	0018      	movs	r0, r3
    7160:	f009 fb66 	bl	10830 <free>
		}
	}
	buffer = rhs.buffer;
    7164:	683b      	ldr	r3, [r7, #0]
    7166:	681a      	ldr	r2, [r3, #0]
    7168:	687b      	ldr	r3, [r7, #4]
    716a:	601a      	str	r2, [r3, #0]
	capacity = rhs.capacity;
    716c:	683b      	ldr	r3, [r7, #0]
    716e:	685a      	ldr	r2, [r3, #4]
    7170:	687b      	ldr	r3, [r7, #4]
    7172:	605a      	str	r2, [r3, #4]
	len = rhs.len;
    7174:	683b      	ldr	r3, [r7, #0]
    7176:	689a      	ldr	r2, [r3, #8]
    7178:	687b      	ldr	r3, [r7, #4]
    717a:	609a      	str	r2, [r3, #8]
	rhs.buffer = NULL;
    717c:	683b      	ldr	r3, [r7, #0]
    717e:	2200      	movs	r2, #0
    7180:	601a      	str	r2, [r3, #0]
	rhs.capacity = 0;
    7182:	683b      	ldr	r3, [r7, #0]
    7184:	2200      	movs	r2, #0
    7186:	605a      	str	r2, [r3, #4]
	rhs.len = 0;
    7188:	683b      	ldr	r3, [r7, #0]
    718a:	2200      	movs	r2, #0
    718c:	609a      	str	r2, [r3, #8]
}
    718e:	46bd      	mov	sp, r7
    7190:	b004      	add	sp, #16
    7192:	bd80      	pop	{r7, pc}

00007194 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    7194:	b580      	push	{r7, lr}
    7196:	b082      	sub	sp, #8
    7198:	af00      	add	r7, sp, #0
    719a:	6078      	str	r0, [r7, #4]
    719c:	6039      	str	r1, [r7, #0]
	if (this != &rval) move(rval);
    719e:	687a      	ldr	r2, [r7, #4]
    71a0:	683b      	ldr	r3, [r7, #0]
    71a2:	429a      	cmp	r2, r3
    71a4:	d005      	beq.n	71b2 <_ZN6StringaSEOS_+0x1e>
    71a6:	683a      	ldr	r2, [r7, #0]
    71a8:	687b      	ldr	r3, [r7, #4]
    71aa:	0011      	movs	r1, r2
    71ac:	0018      	movs	r0, r3
    71ae:	f7ff ff9e 	bl	70ee <_ZN6String4moveERS_>
	return *this;
    71b2:	687b      	ldr	r3, [r7, #4]
}
    71b4:	0018      	movs	r0, r3
    71b6:	46bd      	mov	sp, r7
    71b8:	b002      	add	sp, #8
    71ba:	bd80      	pop	{r7, pc}

000071bc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    71bc:	b580      	push	{r7, lr}
    71be:	b082      	sub	sp, #8
    71c0:	af00      	add	r7, sp, #0
    71c2:	6078      	str	r0, [r7, #4]
    71c4:	6039      	str	r1, [r7, #0]
	if (cstr) copy(cstr, strlen(cstr));
    71c6:	683b      	ldr	r3, [r7, #0]
    71c8:	2b00      	cmp	r3, #0
    71ca:	d00a      	beq.n	71e2 <_ZN6StringaSEPKc+0x26>
    71cc:	683b      	ldr	r3, [r7, #0]
    71ce:	0018      	movs	r0, r3
    71d0:	f00a f9f8 	bl	115c4 <strlen>
    71d4:	0002      	movs	r2, r0
    71d6:	6839      	ldr	r1, [r7, #0]
    71d8:	687b      	ldr	r3, [r7, #4]
    71da:	0018      	movs	r0, r3
    71dc:	f7ff ff60 	bl	70a0 <_ZN6String4copyEPKcj>
    71e0:	e003      	b.n	71ea <_ZN6StringaSEPKc+0x2e>
	else invalidate();
    71e2:	687b      	ldr	r3, [r7, #4]
    71e4:	0018      	movs	r0, r3
    71e6:	f7ff fef6 	bl	6fd6 <_ZN6String10invalidateEv>
	
	return *this;
    71ea:	687b      	ldr	r3, [r7, #4]
}
    71ec:	0018      	movs	r0, r3
    71ee:	46bd      	mov	sp, r7
    71f0:	b002      	add	sp, #8
    71f2:	bd80      	pop	{r7, pc}

000071f4 <_ZNK6String6charAtEj>:
/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
    71f4:	b580      	push	{r7, lr}
    71f6:	b082      	sub	sp, #8
    71f8:	af00      	add	r7, sp, #0
    71fa:	6078      	str	r0, [r7, #4]
    71fc:	6039      	str	r1, [r7, #0]
	return operator[](loc);
    71fe:	683a      	ldr	r2, [r7, #0]
    7200:	687b      	ldr	r3, [r7, #4]
    7202:	0011      	movs	r1, r2
    7204:	0018      	movs	r0, r3
    7206:	f000 f805 	bl	7214 <_ZNK6StringixEj>
    720a:	0003      	movs	r3, r0
}
    720c:	0018      	movs	r0, r3
    720e:	46bd      	mov	sp, r7
    7210:	b002      	add	sp, #8
    7212:	bd80      	pop	{r7, pc}

00007214 <_ZNK6StringixEj>:
	}
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
    7214:	b580      	push	{r7, lr}
    7216:	b082      	sub	sp, #8
    7218:	af00      	add	r7, sp, #0
    721a:	6078      	str	r0, [r7, #4]
    721c:	6039      	str	r1, [r7, #0]
	if (index >= len || !buffer) return 0;
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	689a      	ldr	r2, [r3, #8]
    7222:	683b      	ldr	r3, [r7, #0]
    7224:	429a      	cmp	r2, r3
    7226:	d903      	bls.n	7230 <_ZNK6StringixEj+0x1c>
    7228:	687b      	ldr	r3, [r7, #4]
    722a:	681b      	ldr	r3, [r3, #0]
    722c:	2b00      	cmp	r3, #0
    722e:	d101      	bne.n	7234 <_ZNK6StringixEj+0x20>
    7230:	2300      	movs	r3, #0
    7232:	e004      	b.n	723e <_ZNK6StringixEj+0x2a>
	return buffer[index];
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	681a      	ldr	r2, [r3, #0]
    7238:	683b      	ldr	r3, [r7, #0]
    723a:	18d3      	adds	r3, r2, r3
    723c:	781b      	ldrb	r3, [r3, #0]
}
    723e:	0018      	movs	r0, r3
    7240:	46bd      	mov	sp, r7
    7242:	b002      	add	sp, #8
    7244:	bd80      	pop	{r7, pc}

00007246 <_ZN15Adafruit_FT6206C1Ev>:
/*! 
    @brief  Instantiates a new FT6206 class
*/
/**************************************************************************/
// I2C, no address adjustments or pins
Adafruit_FT6206::Adafruit_FT6206() {
    7246:	b580      	push	{r7, lr}
    7248:	b082      	sub	sp, #8
    724a:	af00      	add	r7, sp, #0
    724c:	6078      	str	r0, [r7, #4]
  touches = 0;
    724e:	687b      	ldr	r3, [r7, #4]
    7250:	2200      	movs	r2, #0
    7252:	701a      	strb	r2, [r3, #0]
}
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	0018      	movs	r0, r3
    7258:	46bd      	mov	sp, r7
    725a:	b002      	add	sp, #8
    725c:	bd80      	pop	{r7, pc}
	...

00007260 <_ZN15Adafruit_FT62065beginEh>:
    @brief  Setups the I2C interface and hardware, identifies if chip is found
    @param  thresh Optional threshhold-for-touch value, default is FT6206_DEFAULT_THRESSHOLD but you can try changing it if your screen is too/not sensitive.
    @returns True if an FT6206 is found, false on any failure
*/
/**************************************************************************/
boolean Adafruit_FT6206::begin(uint8_t thresh) {
    7260:	b590      	push	{r4, r7, lr}
    7262:	b085      	sub	sp, #20
    7264:	af00      	add	r7, sp, #0
    7266:	6078      	str	r0, [r7, #4]
    7268:	000a      	movs	r2, r1
    726a:	1cfb      	adds	r3, r7, #3
    726c:	701a      	strb	r2, [r3, #0]
  Wire.begin();
    726e:	4b1c      	ldr	r3, [pc, #112]	; (72e0 <_ZN15Adafruit_FT62065beginEh+0x80>)
    7270:	0018      	movs	r0, r3
    7272:	f004 fbdf 	bl	ba34 <_ZN7TwoWire5beginEv>
    Serial.print(" = 0x"); Serial.println(readRegister8(i), HEX);
  }
#endif

  // change threshhold to be higher/lower
  writeRegister8(FT62XX_REG_THRESHHOLD, thresh);
    7276:	1cfb      	adds	r3, r7, #3
    7278:	781a      	ldrb	r2, [r3, #0]
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	2180      	movs	r1, #128	; 0x80
    727e:	0018      	movs	r0, r3
    7280:	f000 f9b8 	bl	75f4 <_ZN15Adafruit_FT620614writeRegister8Ehh>
  
  if (readRegister8(FT62XX_REG_VENDID) != FT62XX_VENDID) {
    7284:	687b      	ldr	r3, [r7, #4]
    7286:	21a8      	movs	r1, #168	; 0xa8
    7288:	0018      	movs	r0, r3
    728a:	f000 f985 	bl	7598 <_ZN15Adafruit_FT620613readRegister8Eh>
    728e:	0003      	movs	r3, r0
    7290:	3b11      	subs	r3, #17
    7292:	1e5a      	subs	r2, r3, #1
    7294:	4193      	sbcs	r3, r2
    7296:	b2db      	uxtb	r3, r3
    7298:	2b00      	cmp	r3, #0
    729a:	d001      	beq.n	72a0 <_ZN15Adafruit_FT62065beginEh+0x40>
    return false;
    729c:	2300      	movs	r3, #0
    729e:	e01a      	b.n	72d6 <_ZN15Adafruit_FT62065beginEh+0x76>
  }
  uint8_t id = readRegister8(FT62XX_REG_CHIPID);
    72a0:	230f      	movs	r3, #15
    72a2:	18fc      	adds	r4, r7, r3
    72a4:	687b      	ldr	r3, [r7, #4]
    72a6:	21a3      	movs	r1, #163	; 0xa3
    72a8:	0018      	movs	r0, r3
    72aa:	f000 f975 	bl	7598 <_ZN15Adafruit_FT620613readRegister8Eh>
    72ae:	0003      	movs	r3, r0
    72b0:	7023      	strb	r3, [r4, #0]
  if ((id != FT6206_CHIPID) && (id != FT6236_CHIPID) && (id != FT6236U_CHIPID)) {
    72b2:	230f      	movs	r3, #15
    72b4:	18fb      	adds	r3, r7, r3
    72b6:	781b      	ldrb	r3, [r3, #0]
    72b8:	2b06      	cmp	r3, #6
    72ba:	d00b      	beq.n	72d4 <_ZN15Adafruit_FT62065beginEh+0x74>
    72bc:	230f      	movs	r3, #15
    72be:	18fb      	adds	r3, r7, r3
    72c0:	781b      	ldrb	r3, [r3, #0]
    72c2:	2b36      	cmp	r3, #54	; 0x36
    72c4:	d006      	beq.n	72d4 <_ZN15Adafruit_FT62065beginEh+0x74>
    72c6:	230f      	movs	r3, #15
    72c8:	18fb      	adds	r3, r7, r3
    72ca:	781b      	ldrb	r3, [r3, #0]
    72cc:	2b64      	cmp	r3, #100	; 0x64
    72ce:	d001      	beq.n	72d4 <_ZN15Adafruit_FT62065beginEh+0x74>
    return false;
    72d0:	2300      	movs	r3, #0
    72d2:	e000      	b.n	72d6 <_ZN15Adafruit_FT62065beginEh+0x76>
  }

  return true;
    72d4:	2301      	movs	r3, #1
}
    72d6:	0018      	movs	r0, r3
    72d8:	46bd      	mov	sp, r7
    72da:	b005      	add	sp, #20
    72dc:	bd90      	pop	{r4, r7, pc}
    72de:	46c0      	nop			; (mov r8, r8)
    72e0:	20000b8c 	.word	0x20000b8c

000072e4 <_ZN15Adafruit_FT62067touchedEv>:
/*! 
    @brief  Determines if there are any touches detected
    @returns Number of touches detected, can be 0, 1 or 2
*/
/**************************************************************************/
uint8_t Adafruit_FT6206::touched(void) {
    72e4:	b590      	push	{r4, r7, lr}
    72e6:	b085      	sub	sp, #20
    72e8:	af00      	add	r7, sp, #0
    72ea:	6078      	str	r0, [r7, #4]
  uint8_t n = readRegister8(FT62XX_REG_NUMTOUCHES);
    72ec:	230f      	movs	r3, #15
    72ee:	18fc      	adds	r4, r7, r3
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	2102      	movs	r1, #2
    72f4:	0018      	movs	r0, r3
    72f6:	f000 f94f 	bl	7598 <_ZN15Adafruit_FT620613readRegister8Eh>
    72fa:	0003      	movs	r3, r0
    72fc:	7023      	strb	r3, [r4, #0]
  if (n > 2) {
    72fe:	230f      	movs	r3, #15
    7300:	18fb      	adds	r3, r7, r3
    7302:	781b      	ldrb	r3, [r3, #0]
    7304:	2b02      	cmp	r3, #2
    7306:	dd03      	ble.n	7310 <_ZN15Adafruit_FT62067touchedEv+0x2c>
    n = 0;
    7308:	230f      	movs	r3, #15
    730a:	18fb      	adds	r3, r7, r3
    730c:	2200      	movs	r2, #0
    730e:	701a      	strb	r2, [r3, #0]
  }
  return n;
    7310:	230f      	movs	r3, #15
    7312:	18fb      	adds	r3, r7, r3
    7314:	781b      	ldrb	r3, [r3, #0]
}
    7316:	0018      	movs	r0, r3
    7318:	46bd      	mov	sp, r7
    731a:	b005      	add	sp, #20
    731c:	bd90      	pop	{r4, r7, pc}

0000731e <_ZN15Adafruit_FT62068getPointEh>:
    @brief  Queries the chip and retrieves a point data
    @param  n The # index (0 or 1) to the points we can detect. In theory we can detect 2 points but we've found that you should only use this for single-touch since the two points cant share the same half of the screen.
    @returns {@link TS_Point} object that has the x and y coordinets set. If the z coordinate is 0 it means the point is not touched. If z is 1, it is currently touched.
*/
/**************************************************************************/
TS_Point Adafruit_FT6206::getPoint(uint8_t n) {
    731e:	b580      	push	{r7, lr}
    7320:	b084      	sub	sp, #16
    7322:	af00      	add	r7, sp, #0
    7324:	60f8      	str	r0, [r7, #12]
    7326:	60b9      	str	r1, [r7, #8]
    7328:	1dfb      	adds	r3, r7, #7
    732a:	701a      	strb	r2, [r3, #0]
  readData();
    732c:	68bb      	ldr	r3, [r7, #8]
    732e:	0018      	movs	r0, r3
    7330:	f000 f828 	bl	7384 <_ZN15Adafruit_FT62068readDataEv>
  if ((touches == 0) || (n > 1)) {
    7334:	68bb      	ldr	r3, [r7, #8]
    7336:	781b      	ldrb	r3, [r3, #0]
    7338:	2b00      	cmp	r3, #0
    733a:	d003      	beq.n	7344 <_ZN15Adafruit_FT62068getPointEh+0x26>
    733c:	1dfb      	adds	r3, r7, #7
    733e:	781b      	ldrb	r3, [r3, #0]
    7340:	2b01      	cmp	r3, #1
    7342:	dd06      	ble.n	7352 <_ZN15Adafruit_FT62068getPointEh+0x34>
    return TS_Point(0, 0, 0);
    7344:	68f8      	ldr	r0, [r7, #12]
    7346:	2300      	movs	r3, #0
    7348:	2200      	movs	r2, #0
    734a:	2100      	movs	r1, #0
    734c:	f000 f98d 	bl	766a <_ZN8TS_PointC1Esss>
    7350:	e013      	b.n	737a <_ZN15Adafruit_FT62068getPointEh+0x5c>
  } else {
    return TS_Point(touchX[n], touchY[n], 1);
    7352:	1dfb      	adds	r3, r7, #7
    7354:	781b      	ldrb	r3, [r3, #0]
    7356:	68ba      	ldr	r2, [r7, #8]
    7358:	005b      	lsls	r3, r3, #1
    735a:	18d3      	adds	r3, r2, r3
    735c:	3302      	adds	r3, #2
    735e:	881b      	ldrh	r3, [r3, #0]
    7360:	b219      	sxth	r1, r3
    7362:	1dfb      	adds	r3, r7, #7
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	68ba      	ldr	r2, [r7, #8]
    7368:	005b      	lsls	r3, r3, #1
    736a:	18d3      	adds	r3, r2, r3
    736c:	3306      	adds	r3, #6
    736e:	881b      	ldrh	r3, [r3, #0]
    7370:	b21a      	sxth	r2, r3
    7372:	68f8      	ldr	r0, [r7, #12]
    7374:	2301      	movs	r3, #1
    7376:	f000 f978 	bl	766a <_ZN8TS_PointC1Esss>
  }
}
    737a:	68f8      	ldr	r0, [r7, #12]
    737c:	46bd      	mov	sp, r7
    737e:	b004      	add	sp, #16
    7380:	bd80      	pop	{r7, pc}
	...

00007384 <_ZN15Adafruit_FT62068readDataEv>:
/**************************************************************************/
/*! 
    @brief  Reads the bulk of data from captouch chip. Fill in {@link touches}, {@link touchX}, {@link touchY} and {@link touchID} with results
*/
/**************************************************************************/
void Adafruit_FT6206::readData(void) {
    7384:	b590      	push	{r4, r7, lr}
    7386:	b089      	sub	sp, #36	; 0x24
    7388:	af00      	add	r7, sp, #0
    738a:	6078      	str	r0, [r7, #4]

  uint8_t i2cdat[16];
  Wire.beginTransmission(FT62XX_ADDR);
    738c:	4b81      	ldr	r3, [pc, #516]	; (7594 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    738e:	2138      	movs	r1, #56	; 0x38
    7390:	0018      	movs	r0, r3
    7392:	f004 fc0c 	bl	bbae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)0);  
    7396:	4b7f      	ldr	r3, [pc, #508]	; (7594 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    7398:	2100      	movs	r1, #0
    739a:	0018      	movs	r0, r3
    739c:	f004 fc8a 	bl	bcb4 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    73a0:	4b7c      	ldr	r3, [pc, #496]	; (7594 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    73a2:	0018      	movs	r0, r3
    73a4:	f004 fc78 	bl	bc98 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom((byte)FT62XX_ADDR, (byte)16);
    73a8:	4b7a      	ldr	r3, [pc, #488]	; (7594 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    73aa:	2210      	movs	r2, #16
    73ac:	2138      	movs	r1, #56	; 0x38
    73ae:	0018      	movs	r0, r3
    73b0:	f004 fbe7 	bl	bb82 <_ZN7TwoWire11requestFromEhj>
  for (uint8_t i=0; i<16; i++)
    73b4:	231f      	movs	r3, #31
    73b6:	18fb      	adds	r3, r7, r3
    73b8:	2200      	movs	r2, #0
    73ba:	701a      	strb	r2, [r3, #0]
    73bc:	231f      	movs	r3, #31
    73be:	18fb      	adds	r3, r7, r3
    73c0:	781b      	ldrb	r3, [r3, #0]
    73c2:	2b0f      	cmp	r3, #15
    73c4:	dc13      	bgt.n	73ee <_ZN15Adafruit_FT62068readDataEv+0x6a>
    i2cdat[i] = Wire.read();
    73c6:	231f      	movs	r3, #31
    73c8:	18fb      	adds	r3, r7, r3
    73ca:	781c      	ldrb	r4, [r3, #0]
    73cc:	4b71      	ldr	r3, [pc, #452]	; (7594 <_ZN15Adafruit_FT62068readDataEv+0x210>)
    73ce:	0018      	movs	r0, r3
    73d0:	f004 fcd1 	bl	bd76 <_ZN7TwoWire4readEv>
    73d4:	0003      	movs	r3, r0
    73d6:	b2da      	uxtb	r2, r3
    73d8:	230c      	movs	r3, #12
    73da:	18fb      	adds	r3, r7, r3
    73dc:	551a      	strb	r2, [r3, r4]
  for (uint8_t i=0; i<16; i++)
    73de:	231f      	movs	r3, #31
    73e0:	18fb      	adds	r3, r7, r3
    73e2:	781a      	ldrb	r2, [r3, #0]
    73e4:	231f      	movs	r3, #31
    73e6:	18fb      	adds	r3, r7, r3
    73e8:	3201      	adds	r2, #1
    73ea:	701a      	strb	r2, [r3, #0]
    73ec:	e7e6      	b.n	73bc <_ZN15Adafruit_FT62068readDataEv+0x38>
    Serial.print("I2C $"); Serial.print(i, HEX); 
    Serial.print(" = 0x"); Serial.println(i2cdat[i], HEX);
  }
#endif

  touches = i2cdat[0x02];
    73ee:	230c      	movs	r3, #12
    73f0:	18fb      	adds	r3, r7, r3
    73f2:	789a      	ldrb	r2, [r3, #2]
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	701a      	strb	r2, [r3, #0]
  if ((touches > 2) || (touches == 0)) {
    73f8:	687b      	ldr	r3, [r7, #4]
    73fa:	781b      	ldrb	r3, [r3, #0]
    73fc:	2b02      	cmp	r3, #2
    73fe:	dc03      	bgt.n	7408 <_ZN15Adafruit_FT62068readDataEv+0x84>
    7400:	687b      	ldr	r3, [r7, #4]
    7402:	781b      	ldrb	r3, [r3, #0]
    7404:	2b00      	cmp	r3, #0
    7406:	d102      	bne.n	740e <_ZN15Adafruit_FT62068readDataEv+0x8a>
    touches = 0;
    7408:	687b      	ldr	r3, [r7, #4]
    740a:	2200      	movs	r2, #0
    740c:	701a      	strb	r2, [r3, #0]
    Serial.print("Gesture #"); 
    Serial.println(i2cdat[0x01]);
  }
#endif

  for (uint8_t i=0; i<2; i++) {
    740e:	231e      	movs	r3, #30
    7410:	18fb      	adds	r3, r7, r3
    7412:	2200      	movs	r2, #0
    7414:	701a      	strb	r2, [r3, #0]
    7416:	231e      	movs	r3, #30
    7418:	18fb      	adds	r3, r7, r3
    741a:	781b      	ldrb	r3, [r3, #0]
    741c:	2b01      	cmp	r3, #1
    741e:	dd00      	ble.n	7422 <_ZN15Adafruit_FT62068readDataEv+0x9e>
    7420:	e0b3      	b.n	758a <_ZN15Adafruit_FT62068readDataEv+0x206>
    touchX[i] = i2cdat[0x03 + i*6] & 0x0F;
    7422:	231e      	movs	r3, #30
    7424:	18fb      	adds	r3, r7, r3
    7426:	7819      	ldrb	r1, [r3, #0]
    7428:	231e      	movs	r3, #30
    742a:	18fb      	adds	r3, r7, r3
    742c:	781a      	ldrb	r2, [r3, #0]
    742e:	0013      	movs	r3, r2
    7430:	005b      	lsls	r3, r3, #1
    7432:	189b      	adds	r3, r3, r2
    7434:	005b      	lsls	r3, r3, #1
    7436:	3303      	adds	r3, #3
    7438:	220c      	movs	r2, #12
    743a:	18ba      	adds	r2, r7, r2
    743c:	5cd3      	ldrb	r3, [r2, r3]
    743e:	b29b      	uxth	r3, r3
    7440:	220f      	movs	r2, #15
    7442:	4013      	ands	r3, r2
    7444:	b298      	uxth	r0, r3
    7446:	687a      	ldr	r2, [r7, #4]
    7448:	004b      	lsls	r3, r1, #1
    744a:	18d3      	adds	r3, r2, r3
    744c:	3302      	adds	r3, #2
    744e:	1c02      	adds	r2, r0, #0
    7450:	801a      	strh	r2, [r3, #0]
    touchX[i] <<= 8;
    7452:	231e      	movs	r3, #30
    7454:	18fb      	adds	r3, r7, r3
    7456:	781b      	ldrb	r3, [r3, #0]
    7458:	221e      	movs	r2, #30
    745a:	18ba      	adds	r2, r7, r2
    745c:	7812      	ldrb	r2, [r2, #0]
    745e:	6879      	ldr	r1, [r7, #4]
    7460:	0052      	lsls	r2, r2, #1
    7462:	188a      	adds	r2, r1, r2
    7464:	3202      	adds	r2, #2
    7466:	8812      	ldrh	r2, [r2, #0]
    7468:	0212      	lsls	r2, r2, #8
    746a:	b291      	uxth	r1, r2
    746c:	687a      	ldr	r2, [r7, #4]
    746e:	005b      	lsls	r3, r3, #1
    7470:	18d3      	adds	r3, r2, r3
    7472:	3302      	adds	r3, #2
    7474:	1c0a      	adds	r2, r1, #0
    7476:	801a      	strh	r2, [r3, #0]
    touchX[i] |= i2cdat[0x04 + i*6]; 
    7478:	231e      	movs	r3, #30
    747a:	18fb      	adds	r3, r7, r3
    747c:	7819      	ldrb	r1, [r3, #0]
    747e:	231e      	movs	r3, #30
    7480:	18fb      	adds	r3, r7, r3
    7482:	781b      	ldrb	r3, [r3, #0]
    7484:	687a      	ldr	r2, [r7, #4]
    7486:	005b      	lsls	r3, r3, #1
    7488:	18d3      	adds	r3, r2, r3
    748a:	3302      	adds	r3, #2
    748c:	8818      	ldrh	r0, [r3, #0]
    748e:	231e      	movs	r3, #30
    7490:	18fb      	adds	r3, r7, r3
    7492:	781a      	ldrb	r2, [r3, #0]
    7494:	0013      	movs	r3, r2
    7496:	005b      	lsls	r3, r3, #1
    7498:	189b      	adds	r3, r3, r2
    749a:	005b      	lsls	r3, r3, #1
    749c:	3304      	adds	r3, #4
    749e:	220c      	movs	r2, #12
    74a0:	18ba      	adds	r2, r7, r2
    74a2:	5cd3      	ldrb	r3, [r2, r3]
    74a4:	b29b      	uxth	r3, r3
    74a6:	4303      	orrs	r3, r0
    74a8:	b298      	uxth	r0, r3
    74aa:	687a      	ldr	r2, [r7, #4]
    74ac:	004b      	lsls	r3, r1, #1
    74ae:	18d3      	adds	r3, r2, r3
    74b0:	3302      	adds	r3, #2
    74b2:	1c02      	adds	r2, r0, #0
    74b4:	801a      	strh	r2, [r3, #0]
    touchY[i] = i2cdat[0x05 + i*6] & 0x0F;
    74b6:	231e      	movs	r3, #30
    74b8:	18fb      	adds	r3, r7, r3
    74ba:	7819      	ldrb	r1, [r3, #0]
    74bc:	231e      	movs	r3, #30
    74be:	18fb      	adds	r3, r7, r3
    74c0:	781a      	ldrb	r2, [r3, #0]
    74c2:	0013      	movs	r3, r2
    74c4:	005b      	lsls	r3, r3, #1
    74c6:	189b      	adds	r3, r3, r2
    74c8:	005b      	lsls	r3, r3, #1
    74ca:	3305      	adds	r3, #5
    74cc:	220c      	movs	r2, #12
    74ce:	18ba      	adds	r2, r7, r2
    74d0:	5cd3      	ldrb	r3, [r2, r3]
    74d2:	b29b      	uxth	r3, r3
    74d4:	220f      	movs	r2, #15
    74d6:	4013      	ands	r3, r2
    74d8:	b298      	uxth	r0, r3
    74da:	687a      	ldr	r2, [r7, #4]
    74dc:	004b      	lsls	r3, r1, #1
    74de:	18d3      	adds	r3, r2, r3
    74e0:	3306      	adds	r3, #6
    74e2:	1c02      	adds	r2, r0, #0
    74e4:	801a      	strh	r2, [r3, #0]
    touchY[i] <<= 8;
    74e6:	231e      	movs	r3, #30
    74e8:	18fb      	adds	r3, r7, r3
    74ea:	781b      	ldrb	r3, [r3, #0]
    74ec:	221e      	movs	r2, #30
    74ee:	18ba      	adds	r2, r7, r2
    74f0:	7812      	ldrb	r2, [r2, #0]
    74f2:	6879      	ldr	r1, [r7, #4]
    74f4:	0052      	lsls	r2, r2, #1
    74f6:	188a      	adds	r2, r1, r2
    74f8:	3206      	adds	r2, #6
    74fa:	8812      	ldrh	r2, [r2, #0]
    74fc:	0212      	lsls	r2, r2, #8
    74fe:	b291      	uxth	r1, r2
    7500:	687a      	ldr	r2, [r7, #4]
    7502:	005b      	lsls	r3, r3, #1
    7504:	18d3      	adds	r3, r2, r3
    7506:	3306      	adds	r3, #6
    7508:	1c0a      	adds	r2, r1, #0
    750a:	801a      	strh	r2, [r3, #0]
    touchY[i] |= i2cdat[0x06 + i*6];
    750c:	231e      	movs	r3, #30
    750e:	18fb      	adds	r3, r7, r3
    7510:	7819      	ldrb	r1, [r3, #0]
    7512:	231e      	movs	r3, #30
    7514:	18fb      	adds	r3, r7, r3
    7516:	781b      	ldrb	r3, [r3, #0]
    7518:	687a      	ldr	r2, [r7, #4]
    751a:	005b      	lsls	r3, r3, #1
    751c:	18d3      	adds	r3, r2, r3
    751e:	3306      	adds	r3, #6
    7520:	8818      	ldrh	r0, [r3, #0]
    7522:	231e      	movs	r3, #30
    7524:	18fb      	adds	r3, r7, r3
    7526:	781b      	ldrb	r3, [r3, #0]
    7528:	1c5a      	adds	r2, r3, #1
    752a:	0013      	movs	r3, r2
    752c:	005b      	lsls	r3, r3, #1
    752e:	189b      	adds	r3, r3, r2
    7530:	005b      	lsls	r3, r3, #1
    7532:	001a      	movs	r2, r3
    7534:	230c      	movs	r3, #12
    7536:	18fb      	adds	r3, r7, r3
    7538:	5c9b      	ldrb	r3, [r3, r2]
    753a:	b29b      	uxth	r3, r3
    753c:	4303      	orrs	r3, r0
    753e:	b298      	uxth	r0, r3
    7540:	687a      	ldr	r2, [r7, #4]
    7542:	004b      	lsls	r3, r1, #1
    7544:	18d3      	adds	r3, r2, r3
    7546:	3306      	adds	r3, #6
    7548:	1c02      	adds	r2, r0, #0
    754a:	801a      	strh	r2, [r3, #0]
    touchID[i] = i2cdat[0x05 + i*6] >> 4;
    754c:	231e      	movs	r3, #30
    754e:	18fb      	adds	r3, r7, r3
    7550:	7819      	ldrb	r1, [r3, #0]
    7552:	231e      	movs	r3, #30
    7554:	18fb      	adds	r3, r7, r3
    7556:	781a      	ldrb	r2, [r3, #0]
    7558:	0013      	movs	r3, r2
    755a:	005b      	lsls	r3, r3, #1
    755c:	189b      	adds	r3, r3, r2
    755e:	005b      	lsls	r3, r3, #1
    7560:	3305      	adds	r3, #5
    7562:	220c      	movs	r2, #12
    7564:	18ba      	adds	r2, r7, r2
    7566:	5cd3      	ldrb	r3, [r2, r3]
    7568:	111b      	asrs	r3, r3, #4
    756a:	b298      	uxth	r0, r3
    756c:	687a      	ldr	r2, [r7, #4]
    756e:	1d0b      	adds	r3, r1, #4
    7570:	005b      	lsls	r3, r3, #1
    7572:	18d3      	adds	r3, r2, r3
    7574:	3302      	adds	r3, #2
    7576:	1c02      	adds	r2, r0, #0
    7578:	801a      	strh	r2, [r3, #0]
  for (uint8_t i=0; i<2; i++) {
    757a:	231e      	movs	r3, #30
    757c:	18fb      	adds	r3, r7, r3
    757e:	781a      	ldrb	r2, [r3, #0]
    7580:	231e      	movs	r3, #30
    7582:	18fb      	adds	r3, r7, r3
    7584:	3201      	adds	r2, #1
    7586:	701a      	strb	r2, [r3, #0]
    7588:	e745      	b.n	7416 <_ZN15Adafruit_FT62068readDataEv+0x92>
    Serial.print(", "); Serial.print(touchY[i]);
    Serial.print (") ");
  }
  Serial.println();
#endif
}
    758a:	46c0      	nop			; (mov r8, r8)
    758c:	46bd      	mov	sp, r7
    758e:	b009      	add	sp, #36	; 0x24
    7590:	bd90      	pop	{r4, r7, pc}
    7592:	46c0      	nop			; (mov r8, r8)
    7594:	20000b8c 	.word	0x20000b8c

00007598 <_ZN15Adafruit_FT620613readRegister8Eh>:

uint8_t Adafruit_FT6206::readRegister8(uint8_t reg) {
    7598:	b580      	push	{r7, lr}
    759a:	b084      	sub	sp, #16
    759c:	af00      	add	r7, sp, #0
    759e:	6078      	str	r0, [r7, #4]
    75a0:	000a      	movs	r2, r1
    75a2:	1cfb      	adds	r3, r7, #3
    75a4:	701a      	strb	r2, [r3, #0]
  uint8_t x ;
  // use i2c
  Wire.beginTransmission(FT62XX_ADDR);
    75a6:	4b12      	ldr	r3, [pc, #72]	; (75f0 <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    75a8:	2138      	movs	r1, #56	; 0x38
    75aa:	0018      	movs	r0, r3
    75ac:	f004 faff 	bl	bbae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    75b0:	1cfb      	adds	r3, r7, #3
    75b2:	781a      	ldrb	r2, [r3, #0]
    75b4:	4b0e      	ldr	r3, [pc, #56]	; (75f0 <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    75b6:	0011      	movs	r1, r2
    75b8:	0018      	movs	r0, r3
    75ba:	f004 fb7b 	bl	bcb4 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    75be:	4b0c      	ldr	r3, [pc, #48]	; (75f0 <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    75c0:	0018      	movs	r0, r3
    75c2:	f004 fb69 	bl	bc98 <_ZN7TwoWire15endTransmissionEv>
  
  Wire.requestFrom((byte)FT62XX_ADDR, (byte)1);
    75c6:	4b0a      	ldr	r3, [pc, #40]	; (75f0 <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    75c8:	2201      	movs	r2, #1
    75ca:	2138      	movs	r1, #56	; 0x38
    75cc:	0018      	movs	r0, r3
    75ce:	f004 fad8 	bl	bb82 <_ZN7TwoWire11requestFromEhj>
  x = Wire.read();
    75d2:	4b07      	ldr	r3, [pc, #28]	; (75f0 <_ZN15Adafruit_FT620613readRegister8Eh+0x58>)
    75d4:	0018      	movs	r0, r3
    75d6:	f004 fbce 	bl	bd76 <_ZN7TwoWire4readEv>
    75da:	0002      	movs	r2, r0
    75dc:	230f      	movs	r3, #15
    75de:	18fb      	adds	r3, r7, r3
    75e0:	701a      	strb	r2, [r3, #0]
#ifdef I2C_DEBUG
  Serial.print("$"); Serial.print(reg, HEX); 
  Serial.print(": 0x"); Serial.println(x, HEX);
#endif

  return x;
    75e2:	230f      	movs	r3, #15
    75e4:	18fb      	adds	r3, r7, r3
    75e6:	781b      	ldrb	r3, [r3, #0]
}
    75e8:	0018      	movs	r0, r3
    75ea:	46bd      	mov	sp, r7
    75ec:	b004      	add	sp, #16
    75ee:	bd80      	pop	{r7, pc}
    75f0:	20000b8c 	.word	0x20000b8c

000075f4 <_ZN15Adafruit_FT620614writeRegister8Ehh>:

void Adafruit_FT6206::writeRegister8(uint8_t reg, uint8_t val) {
    75f4:	b580      	push	{r7, lr}
    75f6:	b082      	sub	sp, #8
    75f8:	af00      	add	r7, sp, #0
    75fa:	6078      	str	r0, [r7, #4]
    75fc:	0008      	movs	r0, r1
    75fe:	0011      	movs	r1, r2
    7600:	1cfb      	adds	r3, r7, #3
    7602:	1c02      	adds	r2, r0, #0
    7604:	701a      	strb	r2, [r3, #0]
    7606:	1cbb      	adds	r3, r7, #2
    7608:	1c0a      	adds	r2, r1, #0
    760a:	701a      	strb	r2, [r3, #0]
  // use i2c
  Wire.beginTransmission(FT62XX_ADDR);
    760c:	4b0d      	ldr	r3, [pc, #52]	; (7644 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    760e:	2138      	movs	r1, #56	; 0x38
    7610:	0018      	movs	r0, r3
    7612:	f004 facc 	bl	bbae <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    7616:	1cfb      	adds	r3, r7, #3
    7618:	781a      	ldrb	r2, [r3, #0]
    761a:	4b0a      	ldr	r3, [pc, #40]	; (7644 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    761c:	0011      	movs	r1, r2
    761e:	0018      	movs	r0, r3
    7620:	f004 fb48 	bl	bcb4 <_ZN7TwoWire5writeEh>
  Wire.write((byte)val);
    7624:	1cbb      	adds	r3, r7, #2
    7626:	781a      	ldrb	r2, [r3, #0]
    7628:	4b06      	ldr	r3, [pc, #24]	; (7644 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    762a:	0011      	movs	r1, r2
    762c:	0018      	movs	r0, r3
    762e:	f004 fb41 	bl	bcb4 <_ZN7TwoWire5writeEh>
  Wire.endTransmission();
    7632:	4b04      	ldr	r3, [pc, #16]	; (7644 <_ZN15Adafruit_FT620614writeRegister8Ehh+0x50>)
    7634:	0018      	movs	r0, r3
    7636:	f004 fb2f 	bl	bc98 <_ZN7TwoWire15endTransmissionEv>
}
    763a:	46c0      	nop			; (mov r8, r8)
    763c:	46bd      	mov	sp, r7
    763e:	b002      	add	sp, #8
    7640:	bd80      	pop	{r7, pc}
    7642:	46c0      	nop			; (mov r8, r8)
    7644:	20000b8c 	.word	0x20000b8c

00007648 <_ZN8TS_PointC1Ev>:
}
*/

/****************/

TS_Point::TS_Point(void) {
    7648:	b580      	push	{r7, lr}
    764a:	b082      	sub	sp, #8
    764c:	af00      	add	r7, sp, #0
    764e:	6078      	str	r0, [r7, #4]
  x = y = 0;
    7650:	687b      	ldr	r3, [r7, #4]
    7652:	2200      	movs	r2, #0
    7654:	805a      	strh	r2, [r3, #2]
    7656:	687b      	ldr	r3, [r7, #4]
    7658:	2202      	movs	r2, #2
    765a:	5e9a      	ldrsh	r2, [r3, r2]
    765c:	687b      	ldr	r3, [r7, #4]
    765e:	801a      	strh	r2, [r3, #0]
}
    7660:	687b      	ldr	r3, [r7, #4]
    7662:	0018      	movs	r0, r3
    7664:	46bd      	mov	sp, r7
    7666:	b002      	add	sp, #8
    7668:	bd80      	pop	{r7, pc}

0000766a <_ZN8TS_PointC1Esss>:

TS_Point::TS_Point(int16_t x0, int16_t y0, int16_t z0) {
    766a:	b590      	push	{r4, r7, lr}
    766c:	b085      	sub	sp, #20
    766e:	af00      	add	r7, sp, #0
    7670:	60f8      	str	r0, [r7, #12]
    7672:	000c      	movs	r4, r1
    7674:	0010      	movs	r0, r2
    7676:	0019      	movs	r1, r3
    7678:	230a      	movs	r3, #10
    767a:	18fb      	adds	r3, r7, r3
    767c:	1c22      	adds	r2, r4, #0
    767e:	801a      	strh	r2, [r3, #0]
    7680:	2308      	movs	r3, #8
    7682:	18fb      	adds	r3, r7, r3
    7684:	1c02      	adds	r2, r0, #0
    7686:	801a      	strh	r2, [r3, #0]
    7688:	1dbb      	adds	r3, r7, #6
    768a:	1c0a      	adds	r2, r1, #0
    768c:	801a      	strh	r2, [r3, #0]
  x = x0;
    768e:	68fb      	ldr	r3, [r7, #12]
    7690:	220a      	movs	r2, #10
    7692:	18ba      	adds	r2, r7, r2
    7694:	8812      	ldrh	r2, [r2, #0]
    7696:	801a      	strh	r2, [r3, #0]
  y = y0;
    7698:	68fb      	ldr	r3, [r7, #12]
    769a:	2208      	movs	r2, #8
    769c:	18ba      	adds	r2, r7, r2
    769e:	8812      	ldrh	r2, [r2, #0]
    76a0:	805a      	strh	r2, [r3, #2]
  z = z0;
    76a2:	68fb      	ldr	r3, [r7, #12]
    76a4:	1dba      	adds	r2, r7, #6
    76a6:	8812      	ldrh	r2, [r2, #0]
    76a8:	809a      	strh	r2, [r3, #4]
}
    76aa:	68fb      	ldr	r3, [r7, #12]
    76ac:	0018      	movs	r0, r3
    76ae:	46bd      	mov	sp, r7
    76b0:	b005      	add	sp, #20
    76b2:	bd90      	pop	{r4, r7, pc}

000076b4 <_ZN11SPISettingsC1Em8BitOrderh>:
  // Conservatively, the divider is set for a 12 MHz maximum SPI clock.
  #define SPI_MIN_CLOCK_DIVIDER (uint8_t)(1 + ((F_CPU - 1) / 12000000))

class SPISettings {
  public:
  SPISettings(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    76b4:	b590      	push	{r4, r7, lr}
    76b6:	b085      	sub	sp, #20
    76b8:	af00      	add	r7, sp, #0
    76ba:	60f8      	str	r0, [r7, #12]
    76bc:	60b9      	str	r1, [r7, #8]
    76be:	0019      	movs	r1, r3
    76c0:	1dfb      	adds	r3, r7, #7
    76c2:	701a      	strb	r2, [r3, #0]
    76c4:	1dbb      	adds	r3, r7, #6
    76c6:	1c0a      	adds	r2, r1, #0
    76c8:	701a      	strb	r2, [r3, #0]
    if (__builtin_constant_p(clock)) {
      init_AlwaysInline(clock, bitOrder, dataMode);
    } else {
      init_MightInline(clock, bitOrder, dataMode);
    76ca:	1dbb      	adds	r3, r7, #6
    76cc:	781c      	ldrb	r4, [r3, #0]
    76ce:	1dfb      	adds	r3, r7, #7
    76d0:	781a      	ldrb	r2, [r3, #0]
    76d2:	68b9      	ldr	r1, [r7, #8]
    76d4:	68f8      	ldr	r0, [r7, #12]
    76d6:	0023      	movs	r3, r4
    76d8:	f000 f806 	bl	76e8 <_ZN11SPISettings16init_MightInlineEm8BitOrderh>
    }
  }
    76dc:	68fb      	ldr	r3, [r7, #12]
    76de:	0018      	movs	r0, r3
    76e0:	46bd      	mov	sp, r7
    76e2:	b005      	add	sp, #20
    76e4:	bd90      	pop	{r4, r7, pc}
	...

000076e8 <_ZN11SPISettings16init_MightInlineEm8BitOrderh>:

  // Default speed set to 4MHz, SPI mode set to MODE 0 and Bit order set to MSB first.
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }

  private:
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    76e8:	b580      	push	{r7, lr}
    76ea:	b088      	sub	sp, #32
    76ec:	af00      	add	r7, sp, #0
    76ee:	60f8      	str	r0, [r7, #12]
    76f0:	60b9      	str	r1, [r7, #8]
    76f2:	0019      	movs	r1, r3
    76f4:	1dfb      	adds	r3, r7, #7
    76f6:	701a      	strb	r2, [r3, #0]
    76f8:	1dbb      	adds	r3, r7, #6
    76fa:	1c0a      	adds	r2, r1, #0
    76fc:	701a      	strb	r2, [r3, #0]
    76fe:	68fb      	ldr	r3, [r7, #12]
    7700:	61fb      	str	r3, [r7, #28]
    7702:	68bb      	ldr	r3, [r7, #8]
    7704:	61bb      	str	r3, [r7, #24]
    7706:	2317      	movs	r3, #23
    7708:	18fb      	adds	r3, r7, r3
    770a:	1dfa      	adds	r2, r7, #7
    770c:	7812      	ldrb	r2, [r2, #0]
    770e:	701a      	strb	r2, [r3, #0]
    7710:	2316      	movs	r3, #22
    7712:	18fb      	adds	r3, r7, r3
    7714:	1dba      	adds	r2, r7, #6
    7716:	7812      	ldrb	r2, [r2, #0]
    7718:	701a      	strb	r2, [r3, #0]
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    771a:	69bb      	ldr	r3, [r7, #24]
    771c:	4a1a      	ldr	r2, [pc, #104]	; (7788 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0xa0>)
    771e:	4293      	cmp	r3, r2
    7720:	d900      	bls.n	7724 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x3c>
    7722:	4b19      	ldr	r3, [pc, #100]	; (7788 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0xa0>)
    7724:	69fa      	ldr	r2, [r7, #28]
    7726:	6013      	str	r3, [r2, #0]

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    7728:	2317      	movs	r3, #23
    772a:	18fb      	adds	r3, r7, r3
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	2b01      	cmp	r3, #1
    7730:	d101      	bne.n	7736 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x4e>
    7732:	2200      	movs	r2, #0
    7734:	e000      	b.n	7738 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x50>
    7736:	2201      	movs	r2, #1
    7738:	69fb      	ldr	r3, [r7, #28]
    773a:	715a      	strb	r2, [r3, #5]

    switch (dataMode)
    773c:	2316      	movs	r3, #22
    773e:	18fb      	adds	r3, r7, r3
    7740:	781b      	ldrb	r3, [r3, #0]
    7742:	2b01      	cmp	r3, #1
    7744:	d014      	beq.n	7770 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x88>
    7746:	dc02      	bgt.n	774e <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x66>
    7748:	2b00      	cmp	r3, #0
    774a:	d009      	beq.n	7760 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x78>
    774c:	e014      	b.n	7778 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x90>
    774e:	2b02      	cmp	r3, #2
    7750:	d002      	beq.n	7758 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x70>
    7752:	2b03      	cmp	r3, #3
    7754:	d008      	beq.n	7768 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x80>
    7756:	e00f      	b.n	7778 <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x90>
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    7758:	69fb      	ldr	r3, [r7, #28]
    775a:	2200      	movs	r2, #0
    775c:	711a      	strb	r2, [r3, #4]
  }
    775e:	e00e      	b.n	777e <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE1:
        this->dataMode = SERCOM_SPI_MODE_1; break;
    7760:	69fb      	ldr	r3, [r7, #28]
    7762:	2201      	movs	r2, #1
    7764:	711a      	strb	r2, [r3, #4]
  }
    7766:	e00a      	b.n	777e <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE2:
        this->dataMode = SERCOM_SPI_MODE_2; break;
    7768:	69fb      	ldr	r3, [r7, #28]
    776a:	2202      	movs	r2, #2
    776c:	711a      	strb	r2, [r3, #4]
  }
    776e:	e006      	b.n	777e <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      case SPI_MODE3:
        this->dataMode = SERCOM_SPI_MODE_3; break;
    7770:	69fb      	ldr	r3, [r7, #28]
    7772:	2203      	movs	r2, #3
    7774:	711a      	strb	r2, [r3, #4]
  }
    7776:	e002      	b.n	777e <_ZN11SPISettings16init_MightInlineEm8BitOrderh+0x96>
      default:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    7778:	69fb      	ldr	r3, [r7, #28]
    777a:	2200      	movs	r2, #0
    777c:	711a      	strb	r2, [r3, #4]
  }
    777e:	46c0      	nop			; (mov r8, r8)
    7780:	46bd      	mov	sp, r7
    7782:	b008      	add	sp, #32
    7784:	bd80      	pop	{r7, pc}
    7786:	46c0      	nop			; (mov r8, r8)
    7788:	00b71b00 	.word	0x00b71b00

0000778c <_ZN16Adafruit_ILI93418color565Ehhh>:
#define SPI_WRITE16(s)          if(_sclk < 0){HSPI_WRITE16(s);}else{SSPI_WRITE16(s);}
#define SPI_WRITE32(l)          if(_sclk < 0){HSPI_WRITE32(l);}else{SSPI_WRITE32(l);}
#define SPI_WRITE_PIXELS(c,l)   if(_sclk < 0){HSPI_WRITE_PIXELS(c,l);}else{SSPI_WRITE_PIXELS(c,l);}

// Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t Adafruit_ILI9341::color565(uint8_t r, uint8_t g, uint8_t b) {
    778c:	b590      	push	{r4, r7, lr}
    778e:	b083      	sub	sp, #12
    7790:	af00      	add	r7, sp, #0
    7792:	6078      	str	r0, [r7, #4]
    7794:	000c      	movs	r4, r1
    7796:	0010      	movs	r0, r2
    7798:	0019      	movs	r1, r3
    779a:	1cfb      	adds	r3, r7, #3
    779c:	1c22      	adds	r2, r4, #0
    779e:	701a      	strb	r2, [r3, #0]
    77a0:	1cbb      	adds	r3, r7, #2
    77a2:	1c02      	adds	r2, r0, #0
    77a4:	701a      	strb	r2, [r3, #0]
    77a6:	1c7b      	adds	r3, r7, #1
    77a8:	1c0a      	adds	r2, r1, #0
    77aa:	701a      	strb	r2, [r3, #0]
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    77ac:	1cfb      	adds	r3, r7, #3
    77ae:	781b      	ldrb	r3, [r3, #0]
    77b0:	021b      	lsls	r3, r3, #8
    77b2:	b21b      	sxth	r3, r3
    77b4:	0adb      	lsrs	r3, r3, #11
    77b6:	02db      	lsls	r3, r3, #11
    77b8:	b21a      	sxth	r2, r3
    77ba:	1cbb      	adds	r3, r7, #2
    77bc:	781b      	ldrb	r3, [r3, #0]
    77be:	00db      	lsls	r3, r3, #3
    77c0:	b219      	sxth	r1, r3
    77c2:	23fc      	movs	r3, #252	; 0xfc
    77c4:	00db      	lsls	r3, r3, #3
    77c6:	400b      	ands	r3, r1
    77c8:	b21b      	sxth	r3, r3
    77ca:	4313      	orrs	r3, r2
    77cc:	b21a      	sxth	r2, r3
    77ce:	1c7b      	adds	r3, r7, #1
    77d0:	781b      	ldrb	r3, [r3, #0]
    77d2:	08db      	lsrs	r3, r3, #3
    77d4:	b2db      	uxtb	r3, r3
    77d6:	b21b      	sxth	r3, r3
    77d8:	4313      	orrs	r3, r2
    77da:	b21b      	sxth	r3, r3
    77dc:	b29b      	uxth	r3, r3
}
    77de:	0018      	movs	r0, r3
    77e0:	46bd      	mov	sp, r7
    77e2:	b003      	add	sp, #12
    77e4:	bd90      	pop	{r4, r7, pc}
	...

000077e8 <_ZN16Adafruit_ILI9341C1Eaaa>:
        misopinmask = 0;
    }
#endif
}

Adafruit_ILI9341::Adafruit_ILI9341(int8_t cs, int8_t dc, int8_t rst) : Adafruit_GFX(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT) {
    77e8:	b590      	push	{r4, r7, lr}
    77ea:	b083      	sub	sp, #12
    77ec:	af00      	add	r7, sp, #0
    77ee:	6078      	str	r0, [r7, #4]
    77f0:	000c      	movs	r4, r1
    77f2:	0010      	movs	r0, r2
    77f4:	0019      	movs	r1, r3
    77f6:	1cfb      	adds	r3, r7, #3
    77f8:	1c22      	adds	r2, r4, #0
    77fa:	701a      	strb	r2, [r3, #0]
    77fc:	1cbb      	adds	r3, r7, #2
    77fe:	1c02      	adds	r2, r0, #0
    7800:	701a      	strb	r2, [r3, #0]
    7802:	1c7b      	adds	r3, r7, #1
    7804:	1c0a      	adds	r2, r1, #0
    7806:	701a      	strb	r2, [r3, #0]
    7808:	6878      	ldr	r0, [r7, #4]
    780a:	23a0      	movs	r3, #160	; 0xa0
    780c:	005b      	lsls	r3, r3, #1
    780e:	001a      	movs	r2, r3
    7810:	21f0      	movs	r1, #240	; 0xf0
    7812:	f004 fd6f 	bl	c2f4 <_ZN12Adafruit_GFXC1Ess>
    7816:	4a3c      	ldr	r2, [pc, #240]	; (7908 <_ZN16Adafruit_ILI9341C1Eaaa+0x120>)
    7818:	687b      	ldr	r3, [r7, #4]
    781a:	601a      	str	r2, [r3, #0]
    _cs   = cs;
    781c:	1cfb      	adds	r3, r7, #3
    781e:	2200      	movs	r2, #0
    7820:	569a      	ldrsb	r2, [r3, r2]
    7822:	687b      	ldr	r3, [r7, #4]
    7824:	625a      	str	r2, [r3, #36]	; 0x24
    _dc   = dc;
    7826:	1cbb      	adds	r3, r7, #2
    7828:	2200      	movs	r2, #0
    782a:	569a      	ldrsb	r2, [r3, r2]
    782c:	687b      	ldr	r3, [r7, #4]
    782e:	629a      	str	r2, [r3, #40]	; 0x28
    _rst  = rst;
    7830:	1c7b      	adds	r3, r7, #1
    7832:	2200      	movs	r2, #0
    7834:	569a      	ldrsb	r2, [r3, r2]
    7836:	687b      	ldr	r3, [r7, #4]
    7838:	62da      	str	r2, [r3, #44]	; 0x2c
    _sclk  = -1;
    783a:	687b      	ldr	r3, [r7, #4]
    783c:	2201      	movs	r2, #1
    783e:	4252      	negs	r2, r2
    7840:	631a      	str	r2, [r3, #48]	; 0x30
    _mosi  = -1;
    7842:	687b      	ldr	r3, [r7, #4]
    7844:	2201      	movs	r2, #1
    7846:	4252      	negs	r2, r2
    7848:	635a      	str	r2, [r3, #52]	; 0x34
    _miso  = -1;
    784a:	687b      	ldr	r3, [r7, #4]
    784c:	2201      	movs	r2, #1
    784e:	4252      	negs	r2, r2
    7850:	639a      	str	r2, [r3, #56]	; 0x38
    _freq = 0;
    7852:	687b      	ldr	r3, [r7, #4]
    7854:	2200      	movs	r2, #0
    7856:	621a      	str	r2, [r3, #32]
#ifdef USE_FAST_PINIO
    csport    = portOutputRegister(digitalPinToPort(_cs));
    7858:	687b      	ldr	r3, [r7, #4]
    785a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    785c:	492b      	ldr	r1, [pc, #172]	; (790c <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    785e:	0013      	movs	r3, r2
    7860:	005b      	lsls	r3, r3, #1
    7862:	189b      	adds	r3, r3, r2
    7864:	00db      	lsls	r3, r3, #3
    7866:	565b      	ldrsb	r3, [r3, r1]
    7868:	01db      	lsls	r3, r3, #7
    786a:	4a29      	ldr	r2, [pc, #164]	; (7910 <_ZN16Adafruit_ILI9341C1Eaaa+0x128>)
    786c:	4694      	mov	ip, r2
    786e:	4463      	add	r3, ip
    7870:	3310      	adds	r3, #16
    7872:	001a      	movs	r2, r3
    7874:	687b      	ldr	r3, [r7, #4]
    7876:	64da      	str	r2, [r3, #76]	; 0x4c
    cspinmask = digitalPinToBitMask(_cs);
    7878:	687b      	ldr	r3, [r7, #4]
    787a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    787c:	4923      	ldr	r1, [pc, #140]	; (790c <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    787e:	0013      	movs	r3, r2
    7880:	005b      	lsls	r3, r3, #1
    7882:	189b      	adds	r3, r3, r2
    7884:	00db      	lsls	r3, r3, #3
    7886:	18cb      	adds	r3, r1, r3
    7888:	3304      	adds	r3, #4
    788a:	681b      	ldr	r3, [r3, #0]
    788c:	2201      	movs	r2, #1
    788e:	409a      	lsls	r2, r3
    7890:	0013      	movs	r3, r2
    7892:	001a      	movs	r2, r3
    7894:	687b      	ldr	r3, [r7, #4]
    7896:	65da      	str	r2, [r3, #92]	; 0x5c
    dcport    = portOutputRegister(digitalPinToPort(_dc));
    7898:	687b      	ldr	r3, [r7, #4]
    789a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    789c:	491b      	ldr	r1, [pc, #108]	; (790c <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    789e:	0013      	movs	r3, r2
    78a0:	005b      	lsls	r3, r3, #1
    78a2:	189b      	adds	r3, r3, r2
    78a4:	00db      	lsls	r3, r3, #3
    78a6:	565b      	ldrsb	r3, [r3, r1]
    78a8:	01db      	lsls	r3, r3, #7
    78aa:	4a19      	ldr	r2, [pc, #100]	; (7910 <_ZN16Adafruit_ILI9341C1Eaaa+0x128>)
    78ac:	4694      	mov	ip, r2
    78ae:	4463      	add	r3, ip
    78b0:	3310      	adds	r3, #16
    78b2:	001a      	movs	r2, r3
    78b4:	687b      	ldr	r3, [r7, #4]
    78b6:	649a      	str	r2, [r3, #72]	; 0x48
    dcpinmask = digitalPinToBitMask(_dc);
    78b8:	687b      	ldr	r3, [r7, #4]
    78ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    78bc:	4913      	ldr	r1, [pc, #76]	; (790c <_ZN16Adafruit_ILI9341C1Eaaa+0x124>)
    78be:	0013      	movs	r3, r2
    78c0:	005b      	lsls	r3, r3, #1
    78c2:	189b      	adds	r3, r3, r2
    78c4:	00db      	lsls	r3, r3, #3
    78c6:	18cb      	adds	r3, r1, r3
    78c8:	3304      	adds	r3, #4
    78ca:	681b      	ldr	r3, [r3, #0]
    78cc:	2201      	movs	r2, #1
    78ce:	409a      	lsls	r2, r3
    78d0:	0013      	movs	r3, r2
    78d2:	001a      	movs	r2, r3
    78d4:	687b      	ldr	r3, [r7, #4]
    78d6:	661a      	str	r2, [r3, #96]	; 0x60
    clkport     = 0;
    78d8:	687b      	ldr	r3, [r7, #4]
    78da:	2200      	movs	r2, #0
    78dc:	645a      	str	r2, [r3, #68]	; 0x44
    clkpinmask  = 0;
    78de:	687b      	ldr	r3, [r7, #4]
    78e0:	2200      	movs	r2, #0
    78e2:	659a      	str	r2, [r3, #88]	; 0x58
    mosiport    = 0;
    78e4:	687b      	ldr	r3, [r7, #4]
    78e6:	2200      	movs	r2, #0
    78e8:	63da      	str	r2, [r3, #60]	; 0x3c
    mosipinmask = 0;
    78ea:	687b      	ldr	r3, [r7, #4]
    78ec:	2200      	movs	r2, #0
    78ee:	651a      	str	r2, [r3, #80]	; 0x50
    misoport    = 0;
    78f0:	687b      	ldr	r3, [r7, #4]
    78f2:	2200      	movs	r2, #0
    78f4:	641a      	str	r2, [r3, #64]	; 0x40
    misopinmask = 0;
    78f6:	687b      	ldr	r3, [r7, #4]
    78f8:	2200      	movs	r2, #0
    78fa:	655a      	str	r2, [r3, #84]	; 0x54
#endif
}
    78fc:	687b      	ldr	r3, [r7, #4]
    78fe:	0018      	movs	r0, r3
    7900:	46bd      	mov	sp, r7
    7902:	b003      	add	sp, #12
    7904:	bd90      	pop	{r4, r7, pc}
    7906:	46c0      	nop			; (mov r8, r8)
    7908:	000135b8 	.word	0x000135b8
    790c:	0001371c 	.word	0x0001371c
    7910:	41004400 	.word	0x41004400

00007914 <_ZN16Adafruit_ILI93415beginEm>:
#ifdef ESP32
void Adafruit_ILI9341::begin(uint32_t freq, SPIClass &spi)
#else
void Adafruit_ILI9341::begin(uint32_t freq)
#endif
{
    7914:	b580      	push	{r7, lr}
    7916:	b082      	sub	sp, #8
    7918:	af00      	add	r7, sp, #0
    791a:	6078      	str	r0, [r7, #4]
    791c:	6039      	str	r1, [r7, #0]
#ifdef ESP32
    _spi = spi;
#endif
    if(!freq){
    791e:	683b      	ldr	r3, [r7, #0]
    7920:	2b00      	cmp	r3, #0
    7922:	d101      	bne.n	7928 <_ZN16Adafruit_ILI93415beginEm+0x14>
        freq = SPI_DEFAULT_FREQ;
    7924:	4ba6      	ldr	r3, [pc, #664]	; (7bc0 <_ZN16Adafruit_ILI93415beginEm+0x2ac>)
    7926:	603b      	str	r3, [r7, #0]
    }
    _freq = freq;
    7928:	687b      	ldr	r3, [r7, #4]
    792a:	683a      	ldr	r2, [r7, #0]
    792c:	621a      	str	r2, [r3, #32]

    // Control Pins
    pinMode(_dc, OUTPUT);
    792e:	687b      	ldr	r3, [r7, #4]
    7930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7932:	2101      	movs	r1, #1
    7934:	0018      	movs	r0, r3
    7936:	f7fe ffbf 	bl	68b8 <pinMode>
    digitalWrite(_dc, LOW);
    793a:	687b      	ldr	r3, [r7, #4]
    793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    793e:	2100      	movs	r1, #0
    7940:	0018      	movs	r0, r3
    7942:	f7ff f8e3 	bl	6b0c <digitalWrite>
    pinMode(_cs, OUTPUT);
    7946:	687b      	ldr	r3, [r7, #4]
    7948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    794a:	2101      	movs	r1, #1
    794c:	0018      	movs	r0, r3
    794e:	f7fe ffb3 	bl	68b8 <pinMode>
    digitalWrite(_cs, HIGH);
    7952:	687b      	ldr	r3, [r7, #4]
    7954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7956:	2101      	movs	r1, #1
    7958:	0018      	movs	r0, r3
    795a:	f7ff f8d7 	bl	6b0c <digitalWrite>

    // Software SPI
    if(_sclk >= 0){
    795e:	687b      	ldr	r3, [r7, #4]
    7960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7962:	2b00      	cmp	r3, #0
    7964:	db21      	blt.n	79aa <_ZN16Adafruit_ILI93415beginEm+0x96>
        pinMode(_mosi, OUTPUT);
    7966:	687b      	ldr	r3, [r7, #4]
    7968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    796a:	2101      	movs	r1, #1
    796c:	0018      	movs	r0, r3
    796e:	f7fe ffa3 	bl	68b8 <pinMode>
        digitalWrite(_mosi, LOW);
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7976:	2100      	movs	r1, #0
    7978:	0018      	movs	r0, r3
    797a:	f7ff f8c7 	bl	6b0c <digitalWrite>
        pinMode(_sclk, OUTPUT);
    797e:	687b      	ldr	r3, [r7, #4]
    7980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7982:	2101      	movs	r1, #1
    7984:	0018      	movs	r0, r3
    7986:	f7fe ff97 	bl	68b8 <pinMode>
        digitalWrite(_sclk, HIGH);
    798a:	687b      	ldr	r3, [r7, #4]
    798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    798e:	2101      	movs	r1, #1
    7990:	0018      	movs	r0, r3
    7992:	f7ff f8bb 	bl	6b0c <digitalWrite>
        if(_miso >= 0){
    7996:	687b      	ldr	r3, [r7, #4]
    7998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    799a:	2b00      	cmp	r3, #0
    799c:	db05      	blt.n	79aa <_ZN16Adafruit_ILI93415beginEm+0x96>
            pinMode(_miso, INPUT);
    799e:	687b      	ldr	r3, [r7, #4]
    79a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    79a2:	2100      	movs	r1, #0
    79a4:	0018      	movs	r0, r3
    79a6:	f7fe ff87 	bl	68b8 <pinMode>
        }
    }

    // Hardware SPI
    SPI_BEGIN();
    79aa:	687b      	ldr	r3, [r7, #4]
    79ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    79ae:	2b00      	cmp	r3, #0
    79b0:	da03      	bge.n	79ba <_ZN16Adafruit_ILI93415beginEm+0xa6>
    79b2:	4b84      	ldr	r3, [pc, #528]	; (7bc4 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    79b4:	0018      	movs	r0, r3
    79b6:	f003 fed7 	bl	b768 <_ZN8SPIClass5beginEv>

    // toggle RST low to reset
    if (_rst >= 0) {
    79ba:	687b      	ldr	r3, [r7, #4]
    79bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    79be:	2b00      	cmp	r3, #0
    79c0:	db20      	blt.n	7a04 <_ZN16Adafruit_ILI93415beginEm+0xf0>
        pinMode(_rst, OUTPUT);
    79c2:	687b      	ldr	r3, [r7, #4]
    79c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    79c6:	2101      	movs	r1, #1
    79c8:	0018      	movs	r0, r3
    79ca:	f7fe ff75 	bl	68b8 <pinMode>
        digitalWrite(_rst, HIGH);
    79ce:	687b      	ldr	r3, [r7, #4]
    79d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    79d2:	2101      	movs	r1, #1
    79d4:	0018      	movs	r0, r3
    79d6:	f7ff f899 	bl	6b0c <digitalWrite>
        delay(100);
    79da:	2064      	movs	r0, #100	; 0x64
    79dc:	f7fb fa50 	bl	2e80 <delay>
        digitalWrite(_rst, LOW);
    79e0:	687b      	ldr	r3, [r7, #4]
    79e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    79e4:	2100      	movs	r1, #0
    79e6:	0018      	movs	r0, r3
    79e8:	f7ff f890 	bl	6b0c <digitalWrite>
        delay(100);
    79ec:	2064      	movs	r0, #100	; 0x64
    79ee:	f7fb fa47 	bl	2e80 <delay>
        digitalWrite(_rst, HIGH);
    79f2:	687b      	ldr	r3, [r7, #4]
    79f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    79f6:	2101      	movs	r1, #1
    79f8:	0018      	movs	r0, r3
    79fa:	f7ff f887 	bl	6b0c <digitalWrite>
        delay(200);
    79fe:	20c8      	movs	r0, #200	; 0xc8
    7a00:	f7fb fa3e 	bl	2e80 <delay>
    }

    startWrite();
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	681b      	ldr	r3, [r3, #0]
    7a08:	3314      	adds	r3, #20
    7a0a:	681b      	ldr	r3, [r3, #0]
    7a0c:	687a      	ldr	r2, [r7, #4]
    7a0e:	0010      	movs	r0, r2
    7a10:	4798      	blx	r3

    writeCommand(0xEF);
    7a12:	687b      	ldr	r3, [r7, #4]
    7a14:	21ef      	movs	r1, #239	; 0xef
    7a16:	0018      	movs	r0, r3
    7a18:	f000 fb0c 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x03);
    7a1c:	687b      	ldr	r3, [r7, #4]
    7a1e:	2103      	movs	r1, #3
    7a20:	0018      	movs	r0, r3
    7a22:	f000 fa69 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x80);
    7a26:	687b      	ldr	r3, [r7, #4]
    7a28:	2180      	movs	r1, #128	; 0x80
    7a2a:	0018      	movs	r0, r3
    7a2c:	f000 fa64 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x02);
    7a30:	687b      	ldr	r3, [r7, #4]
    7a32:	2102      	movs	r1, #2
    7a34:	0018      	movs	r0, r3
    7a36:	f000 fa5f 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xCF);
    7a3a:	687b      	ldr	r3, [r7, #4]
    7a3c:	21cf      	movs	r1, #207	; 0xcf
    7a3e:	0018      	movs	r0, r3
    7a40:	f000 faf8 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7a44:	687b      	ldr	r3, [r7, #4]
    7a46:	2100      	movs	r1, #0
    7a48:	0018      	movs	r0, r3
    7a4a:	f000 fa55 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0XC1);
    7a4e:	687b      	ldr	r3, [r7, #4]
    7a50:	21c1      	movs	r1, #193	; 0xc1
    7a52:	0018      	movs	r0, r3
    7a54:	f000 fa50 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X30);
    7a58:	687b      	ldr	r3, [r7, #4]
    7a5a:	2130      	movs	r1, #48	; 0x30
    7a5c:	0018      	movs	r0, r3
    7a5e:	f000 fa4b 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xED);
    7a62:	687b      	ldr	r3, [r7, #4]
    7a64:	21ed      	movs	r1, #237	; 0xed
    7a66:	0018      	movs	r0, r3
    7a68:	f000 fae4 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x64);
    7a6c:	687b      	ldr	r3, [r7, #4]
    7a6e:	2164      	movs	r1, #100	; 0x64
    7a70:	0018      	movs	r0, r3
    7a72:	f000 fa41 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7a76:	687b      	ldr	r3, [r7, #4]
    7a78:	2103      	movs	r1, #3
    7a7a:	0018      	movs	r0, r3
    7a7c:	f000 fa3c 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X12);
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	2112      	movs	r1, #18
    7a84:	0018      	movs	r0, r3
    7a86:	f000 fa37 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0X81);
    7a8a:	687b      	ldr	r3, [r7, #4]
    7a8c:	2181      	movs	r1, #129	; 0x81
    7a8e:	0018      	movs	r0, r3
    7a90:	f000 fa32 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xE8);
    7a94:	687b      	ldr	r3, [r7, #4]
    7a96:	21e8      	movs	r1, #232	; 0xe8
    7a98:	0018      	movs	r0, r3
    7a9a:	f000 facb 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x85);
    7a9e:	687b      	ldr	r3, [r7, #4]
    7aa0:	2185      	movs	r1, #133	; 0x85
    7aa2:	0018      	movs	r0, r3
    7aa4:	f000 fa28 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	2100      	movs	r1, #0
    7aac:	0018      	movs	r0, r3
    7aae:	f000 fa23 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x78);
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	2178      	movs	r1, #120	; 0x78
    7ab6:	0018      	movs	r0, r3
    7ab8:	f000 fa1e 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xCB);
    7abc:	687b      	ldr	r3, [r7, #4]
    7abe:	21cb      	movs	r1, #203	; 0xcb
    7ac0:	0018      	movs	r0, r3
    7ac2:	f000 fab7 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x39);
    7ac6:	687b      	ldr	r3, [r7, #4]
    7ac8:	2139      	movs	r1, #57	; 0x39
    7aca:	0018      	movs	r0, r3
    7acc:	f000 fa14 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x2C);
    7ad0:	687b      	ldr	r3, [r7, #4]
    7ad2:	212c      	movs	r1, #44	; 0x2c
    7ad4:	0018      	movs	r0, r3
    7ad6:	f000 fa0f 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7ada:	687b      	ldr	r3, [r7, #4]
    7adc:	2100      	movs	r1, #0
    7ade:	0018      	movs	r0, r3
    7ae0:	f000 fa0a 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x34);
    7ae4:	687b      	ldr	r3, [r7, #4]
    7ae6:	2134      	movs	r1, #52	; 0x34
    7ae8:	0018      	movs	r0, r3
    7aea:	f000 fa05 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x02);
    7aee:	687b      	ldr	r3, [r7, #4]
    7af0:	2102      	movs	r1, #2
    7af2:	0018      	movs	r0, r3
    7af4:	f000 fa00 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xF7);
    7af8:	687b      	ldr	r3, [r7, #4]
    7afa:	21f7      	movs	r1, #247	; 0xf7
    7afc:	0018      	movs	r0, r3
    7afe:	f000 fa99 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x20);
    7b02:	687b      	ldr	r3, [r7, #4]
    7b04:	2120      	movs	r1, #32
    7b06:	0018      	movs	r0, r3
    7b08:	f000 f9f6 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xEA);
    7b0c:	687b      	ldr	r3, [r7, #4]
    7b0e:	21ea      	movs	r1, #234	; 0xea
    7b10:	0018      	movs	r0, r3
    7b12:	f000 fa8f 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	2100      	movs	r1, #0
    7b1a:	0018      	movs	r0, r3
    7b1c:	f000 f9ec 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7b20:	687b      	ldr	r3, [r7, #4]
    7b22:	2100      	movs	r1, #0
    7b24:	0018      	movs	r0, r3
    7b26:	f000 f9e7 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PWCTR1);    //Power control
    7b2a:	687b      	ldr	r3, [r7, #4]
    7b2c:	21c0      	movs	r1, #192	; 0xc0
    7b2e:	0018      	movs	r0, r3
    7b30:	f000 fa80 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x23);   //VRH[5:0]
    7b34:	687b      	ldr	r3, [r7, #4]
    7b36:	2123      	movs	r1, #35	; 0x23
    7b38:	0018      	movs	r0, r3
    7b3a:	f000 f9dd 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PWCTR2);    //Power control
    7b3e:	687b      	ldr	r3, [r7, #4]
    7b40:	21c1      	movs	r1, #193	; 0xc1
    7b42:	0018      	movs	r0, r3
    7b44:	f000 fa76 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x10);   //SAP[2:0];BT[3:0]
    7b48:	687b      	ldr	r3, [r7, #4]
    7b4a:	2110      	movs	r1, #16
    7b4c:	0018      	movs	r0, r3
    7b4e:	f000 f9d3 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VMCTR1);    //VCM control
    7b52:	687b      	ldr	r3, [r7, #4]
    7b54:	21c5      	movs	r1, #197	; 0xc5
    7b56:	0018      	movs	r0, r3
    7b58:	f000 fa6c 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x3e);
    7b5c:	687b      	ldr	r3, [r7, #4]
    7b5e:	213e      	movs	r1, #62	; 0x3e
    7b60:	0018      	movs	r0, r3
    7b62:	f000 f9c9 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x28);
    7b66:	687b      	ldr	r3, [r7, #4]
    7b68:	2128      	movs	r1, #40	; 0x28
    7b6a:	0018      	movs	r0, r3
    7b6c:	f000 f9c4 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VMCTR2);    //VCM control2
    7b70:	687b      	ldr	r3, [r7, #4]
    7b72:	21c7      	movs	r1, #199	; 0xc7
    7b74:	0018      	movs	r0, r3
    7b76:	f000 fa5d 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x86);  //--
    7b7a:	687b      	ldr	r3, [r7, #4]
    7b7c:	2186      	movs	r1, #134	; 0x86
    7b7e:	0018      	movs	r0, r3
    7b80:	f000 f9ba 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_MADCTL);    // Memory Access Control
    7b84:	687b      	ldr	r3, [r7, #4]
    7b86:	2136      	movs	r1, #54	; 0x36
    7b88:	0018      	movs	r0, r3
    7b8a:	f000 fa53 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x48);
    7b8e:	687b      	ldr	r3, [r7, #4]
    7b90:	2148      	movs	r1, #72	; 0x48
    7b92:	0018      	movs	r0, r3
    7b94:	f000 f9b0 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_VSCRSADD); // Vertical scroll
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	2137      	movs	r1, #55	; 0x37
    7b9c:	0018      	movs	r0, r3
    7b9e:	f000 fa49 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE16(0);                 // Zero
    7ba2:	687b      	ldr	r3, [r7, #4]
    7ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7ba6:	2b00      	cmp	r3, #0
    7ba8:	da0e      	bge.n	7bc8 <_ZN16Adafruit_ILI93415beginEm+0x2b4>
    7baa:	4b06      	ldr	r3, [pc, #24]	; (7bc4 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7bac:	2100      	movs	r1, #0
    7bae:	0018      	movs	r0, r3
    7bb0:	f003 fec6 	bl	b940 <_ZN8SPIClass8transferEh>
    7bb4:	4b03      	ldr	r3, [pc, #12]	; (7bc4 <_ZN16Adafruit_ILI93415beginEm+0x2b0>)
    7bb6:	2100      	movs	r1, #0
    7bb8:	0018      	movs	r0, r3
    7bba:	f003 fec1 	bl	b940 <_ZN8SPIClass8transferEh>
    7bbe:	e00d      	b.n	7bdc <_ZN16Adafruit_ILI93415beginEm+0x2c8>
    7bc0:	016e3600 	.word	0x016e3600
    7bc4:	20000b7c 	.word	0x20000b7c
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	2100      	movs	r1, #0
    7bcc:	0018      	movs	r0, r3
    7bce:	f000 f993 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    7bd2:	687b      	ldr	r3, [r7, #4]
    7bd4:	2100      	movs	r1, #0
    7bd6:	0018      	movs	r0, r3
    7bd8:	f000 f98e 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_PIXFMT);
    7bdc:	687b      	ldr	r3, [r7, #4]
    7bde:	213a      	movs	r1, #58	; 0x3a
    7be0:	0018      	movs	r0, r3
    7be2:	f000 fa27 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x55);
    7be6:	687b      	ldr	r3, [r7, #4]
    7be8:	2155      	movs	r1, #85	; 0x55
    7bea:	0018      	movs	r0, r3
    7bec:	f000 f984 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_FRMCTR1);
    7bf0:	687b      	ldr	r3, [r7, #4]
    7bf2:	21b1      	movs	r1, #177	; 0xb1
    7bf4:	0018      	movs	r0, r3
    7bf6:	f000 fa1d 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7bfa:	687b      	ldr	r3, [r7, #4]
    7bfc:	2100      	movs	r1, #0
    7bfe:	0018      	movs	r0, r3
    7c00:	f000 f97a 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x18);
    7c04:	687b      	ldr	r3, [r7, #4]
    7c06:	2118      	movs	r1, #24
    7c08:	0018      	movs	r0, r3
    7c0a:	f000 f975 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_DFUNCTR);    // Display Function Control
    7c0e:	687b      	ldr	r3, [r7, #4]
    7c10:	21b6      	movs	r1, #182	; 0xb6
    7c12:	0018      	movs	r0, r3
    7c14:	f000 fa0e 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x08);
    7c18:	687b      	ldr	r3, [r7, #4]
    7c1a:	2108      	movs	r1, #8
    7c1c:	0018      	movs	r0, r3
    7c1e:	f000 f96b 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x82);
    7c22:	687b      	ldr	r3, [r7, #4]
    7c24:	2182      	movs	r1, #130	; 0x82
    7c26:	0018      	movs	r0, r3
    7c28:	f000 f966 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x27);
    7c2c:	687b      	ldr	r3, [r7, #4]
    7c2e:	2127      	movs	r1, #39	; 0x27
    7c30:	0018      	movs	r0, r3
    7c32:	f000 f961 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(0xF2);    // 3Gamma Function Disable
    7c36:	687b      	ldr	r3, [r7, #4]
    7c38:	21f2      	movs	r1, #242	; 0xf2
    7c3a:	0018      	movs	r0, r3
    7c3c:	f000 f9fa 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7c40:	687b      	ldr	r3, [r7, #4]
    7c42:	2100      	movs	r1, #0
    7c44:	0018      	movs	r0, r3
    7c46:	f000 f957 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GAMMASET);    //Gamma curve selected
    7c4a:	687b      	ldr	r3, [r7, #4]
    7c4c:	2126      	movs	r1, #38	; 0x26
    7c4e:	0018      	movs	r0, r3
    7c50:	f000 f9f0 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x01);
    7c54:	687b      	ldr	r3, [r7, #4]
    7c56:	2101      	movs	r1, #1
    7c58:	0018      	movs	r0, r3
    7c5a:	f000 f94d 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GMCTRP1);    //Set Gamma
    7c5e:	687b      	ldr	r3, [r7, #4]
    7c60:	21e0      	movs	r1, #224	; 0xe0
    7c62:	0018      	movs	r0, r3
    7c64:	f000 f9e6 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x0F);
    7c68:	687b      	ldr	r3, [r7, #4]
    7c6a:	210f      	movs	r1, #15
    7c6c:	0018      	movs	r0, r3
    7c6e:	f000 f943 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7c72:	687b      	ldr	r3, [r7, #4]
    7c74:	2131      	movs	r1, #49	; 0x31
    7c76:	0018      	movs	r0, r3
    7c78:	f000 f93e 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x2B);
    7c7c:	687b      	ldr	r3, [r7, #4]
    7c7e:	212b      	movs	r1, #43	; 0x2b
    7c80:	0018      	movs	r0, r3
    7c82:	f000 f939 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0C);
    7c86:	687b      	ldr	r3, [r7, #4]
    7c88:	210c      	movs	r1, #12
    7c8a:	0018      	movs	r0, r3
    7c8c:	f000 f934 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7c90:	687b      	ldr	r3, [r7, #4]
    7c92:	210e      	movs	r1, #14
    7c94:	0018      	movs	r0, r3
    7c96:	f000 f92f 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x08);
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	2108      	movs	r1, #8
    7c9e:	0018      	movs	r0, r3
    7ca0:	f000 f92a 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x4E);
    7ca4:	687b      	ldr	r3, [r7, #4]
    7ca6:	214e      	movs	r1, #78	; 0x4e
    7ca8:	0018      	movs	r0, r3
    7caa:	f000 f925 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0xF1);
    7cae:	687b      	ldr	r3, [r7, #4]
    7cb0:	21f1      	movs	r1, #241	; 0xf1
    7cb2:	0018      	movs	r0, r3
    7cb4:	f000 f920 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x37);
    7cb8:	687b      	ldr	r3, [r7, #4]
    7cba:	2137      	movs	r1, #55	; 0x37
    7cbc:	0018      	movs	r0, r3
    7cbe:	f000 f91b 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x07);
    7cc2:	687b      	ldr	r3, [r7, #4]
    7cc4:	2107      	movs	r1, #7
    7cc6:	0018      	movs	r0, r3
    7cc8:	f000 f916 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x10);
    7ccc:	687b      	ldr	r3, [r7, #4]
    7cce:	2110      	movs	r1, #16
    7cd0:	0018      	movs	r0, r3
    7cd2:	f000 f911 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7cd6:	687b      	ldr	r3, [r7, #4]
    7cd8:	2103      	movs	r1, #3
    7cda:	0018      	movs	r0, r3
    7cdc:	f000 f90c 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7ce0:	687b      	ldr	r3, [r7, #4]
    7ce2:	210e      	movs	r1, #14
    7ce4:	0018      	movs	r0, r3
    7ce6:	f000 f907 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x09);
    7cea:	687b      	ldr	r3, [r7, #4]
    7cec:	2109      	movs	r1, #9
    7cee:	0018      	movs	r0, r3
    7cf0:	f000 f902 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x00);
    7cf4:	687b      	ldr	r3, [r7, #4]
    7cf6:	2100      	movs	r1, #0
    7cf8:	0018      	movs	r0, r3
    7cfa:	f000 f8fd 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_GMCTRN1);    //Set Gamma
    7cfe:	687b      	ldr	r3, [r7, #4]
    7d00:	21e1      	movs	r1, #225	; 0xe1
    7d02:	0018      	movs	r0, r3
    7d04:	f000 f996 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(0x00);
    7d08:	687b      	ldr	r3, [r7, #4]
    7d0a:	2100      	movs	r1, #0
    7d0c:	0018      	movs	r0, r3
    7d0e:	f000 f8f3 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0E);
    7d12:	687b      	ldr	r3, [r7, #4]
    7d14:	210e      	movs	r1, #14
    7d16:	0018      	movs	r0, r3
    7d18:	f000 f8ee 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x14);
    7d1c:	687b      	ldr	r3, [r7, #4]
    7d1e:	2114      	movs	r1, #20
    7d20:	0018      	movs	r0, r3
    7d22:	f000 f8e9 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x03);
    7d26:	687b      	ldr	r3, [r7, #4]
    7d28:	2103      	movs	r1, #3
    7d2a:	0018      	movs	r0, r3
    7d2c:	f000 f8e4 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x11);
    7d30:	687b      	ldr	r3, [r7, #4]
    7d32:	2111      	movs	r1, #17
    7d34:	0018      	movs	r0, r3
    7d36:	f000 f8df 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x07);
    7d3a:	687b      	ldr	r3, [r7, #4]
    7d3c:	2107      	movs	r1, #7
    7d3e:	0018      	movs	r0, r3
    7d40:	f000 f8da 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7d44:	687b      	ldr	r3, [r7, #4]
    7d46:	2131      	movs	r1, #49	; 0x31
    7d48:	0018      	movs	r0, r3
    7d4a:	f000 f8d5 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0xC1);
    7d4e:	687b      	ldr	r3, [r7, #4]
    7d50:	21c1      	movs	r1, #193	; 0xc1
    7d52:	0018      	movs	r0, r3
    7d54:	f000 f8d0 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x48);
    7d58:	687b      	ldr	r3, [r7, #4]
    7d5a:	2148      	movs	r1, #72	; 0x48
    7d5c:	0018      	movs	r0, r3
    7d5e:	f000 f8cb 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x08);
    7d62:	687b      	ldr	r3, [r7, #4]
    7d64:	2108      	movs	r1, #8
    7d66:	0018      	movs	r0, r3
    7d68:	f000 f8c6 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0F);
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	210f      	movs	r1, #15
    7d70:	0018      	movs	r0, r3
    7d72:	f000 f8c1 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0C);
    7d76:	687b      	ldr	r3, [r7, #4]
    7d78:	210c      	movs	r1, #12
    7d7a:	0018      	movs	r0, r3
    7d7c:	f000 f8bc 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x31);
    7d80:	687b      	ldr	r3, [r7, #4]
    7d82:	2131      	movs	r1, #49	; 0x31
    7d84:	0018      	movs	r0, r3
    7d86:	f000 f8b7 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x36);
    7d8a:	687b      	ldr	r3, [r7, #4]
    7d8c:	2136      	movs	r1, #54	; 0x36
    7d8e:	0018      	movs	r0, r3
    7d90:	f000 f8b2 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    spiWrite(0x0F);
    7d94:	687b      	ldr	r3, [r7, #4]
    7d96:	210f      	movs	r1, #15
    7d98:	0018      	movs	r0, r3
    7d9a:	f000 f8ad 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>

    writeCommand(ILI9341_SLPOUT);    //Exit Sleep
    7d9e:	687b      	ldr	r3, [r7, #4]
    7da0:	2111      	movs	r1, #17
    7da2:	0018      	movs	r0, r3
    7da4:	f000 f946 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    delay(120);
    7da8:	2078      	movs	r0, #120	; 0x78
    7daa:	f7fb f869 	bl	2e80 <delay>
    writeCommand(ILI9341_DISPON);    //Display on
    7dae:	687b      	ldr	r3, [r7, #4]
    7db0:	2129      	movs	r1, #41	; 0x29
    7db2:	0018      	movs	r0, r3
    7db4:	f000 f93e 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    delay(120);
    7db8:	2078      	movs	r0, #120	; 0x78
    7dba:	f7fb f861 	bl	2e80 <delay>
    endWrite();
    7dbe:	687b      	ldr	r3, [r7, #4]
    7dc0:	681b      	ldr	r3, [r3, #0]
    7dc2:	332c      	adds	r3, #44	; 0x2c
    7dc4:	681b      	ldr	r3, [r3, #0]
    7dc6:	687a      	ldr	r2, [r7, #4]
    7dc8:	0010      	movs	r0, r2
    7dca:	4798      	blx	r3

    _width  = ILI9341_TFTWIDTH;
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	22f0      	movs	r2, #240	; 0xf0
    7dd0:	819a      	strh	r2, [r3, #12]
    _height = ILI9341_TFTHEIGHT;
    7dd2:	687b      	ldr	r3, [r7, #4]
    7dd4:	22a0      	movs	r2, #160	; 0xa0
    7dd6:	0052      	lsls	r2, r2, #1
    7dd8:	81da      	strh	r2, [r3, #14]
}
    7dda:	46c0      	nop			; (mov r8, r8)
    7ddc:	46bd      	mov	sp, r7
    7dde:	b002      	add	sp, #8
    7de0:	bd80      	pop	{r7, pc}
    7de2:	46c0      	nop			; (mov r8, r8)

00007de4 <_ZN16Adafruit_ILI934111setRotationEh>:

void Adafruit_ILI9341::setRotation(uint8_t m) {
    7de4:	b580      	push	{r7, lr}
    7de6:	b082      	sub	sp, #8
    7de8:	af00      	add	r7, sp, #0
    7dea:	6078      	str	r0, [r7, #4]
    7dec:	000a      	movs	r2, r1
    7dee:	1cfb      	adds	r3, r7, #3
    7df0:	701a      	strb	r2, [r3, #0]
    rotation = m % 4; // can't be higher than 3
    7df2:	1cfb      	adds	r3, r7, #3
    7df4:	781b      	ldrb	r3, [r3, #0]
    7df6:	2203      	movs	r2, #3
    7df8:	4013      	ands	r3, r2
    7dfa:	b2da      	uxtb	r2, r3
    7dfc:	687b      	ldr	r3, [r7, #4]
    7dfe:	765a      	strb	r2, [r3, #25]
    switch (rotation) {
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	7e5b      	ldrb	r3, [r3, #25]
    7e04:	2b01      	cmp	r3, #1
    7e06:	d013      	beq.n	7e30 <_ZN16Adafruit_ILI934111setRotationEh+0x4c>
    7e08:	dc02      	bgt.n	7e10 <_ZN16Adafruit_ILI934111setRotationEh+0x2c>
    7e0a:	2b00      	cmp	r3, #0
    7e0c:	d005      	beq.n	7e1a <_ZN16Adafruit_ILI934111setRotationEh+0x36>
    7e0e:	e030      	b.n	7e72 <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
    7e10:	2b02      	cmp	r3, #2
    7e12:	d018      	beq.n	7e46 <_ZN16Adafruit_ILI934111setRotationEh+0x62>
    7e14:	2b03      	cmp	r3, #3
    7e16:	d021      	beq.n	7e5c <_ZN16Adafruit_ILI934111setRotationEh+0x78>
    7e18:	e02b      	b.n	7e72 <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 0:
            m = (MADCTL_MX | MADCTL_BGR);
    7e1a:	1cfb      	adds	r3, r7, #3
    7e1c:	2248      	movs	r2, #72	; 0x48
    7e1e:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTWIDTH;
    7e20:	687b      	ldr	r3, [r7, #4]
    7e22:	22f0      	movs	r2, #240	; 0xf0
    7e24:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTHEIGHT;
    7e26:	687b      	ldr	r3, [r7, #4]
    7e28:	22a0      	movs	r2, #160	; 0xa0
    7e2a:	0052      	lsls	r2, r2, #1
    7e2c:	81da      	strh	r2, [r3, #14]
            break;
    7e2e:	e020      	b.n	7e72 <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 1:
            m = (MADCTL_MV | MADCTL_BGR);
    7e30:	1cfb      	adds	r3, r7, #3
    7e32:	2228      	movs	r2, #40	; 0x28
    7e34:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTHEIGHT;
    7e36:	687b      	ldr	r3, [r7, #4]
    7e38:	22a0      	movs	r2, #160	; 0xa0
    7e3a:	0052      	lsls	r2, r2, #1
    7e3c:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTWIDTH;
    7e3e:	687b      	ldr	r3, [r7, #4]
    7e40:	22f0      	movs	r2, #240	; 0xf0
    7e42:	81da      	strh	r2, [r3, #14]
            break;
    7e44:	e015      	b.n	7e72 <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 2:
            m = (MADCTL_MY | MADCTL_BGR);
    7e46:	1cfb      	adds	r3, r7, #3
    7e48:	2288      	movs	r2, #136	; 0x88
    7e4a:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTWIDTH;
    7e4c:	687b      	ldr	r3, [r7, #4]
    7e4e:	22f0      	movs	r2, #240	; 0xf0
    7e50:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTHEIGHT;
    7e52:	687b      	ldr	r3, [r7, #4]
    7e54:	22a0      	movs	r2, #160	; 0xa0
    7e56:	0052      	lsls	r2, r2, #1
    7e58:	81da      	strh	r2, [r3, #14]
            break;
    7e5a:	e00a      	b.n	7e72 <_ZN16Adafruit_ILI934111setRotationEh+0x8e>
        case 3:
            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
    7e5c:	1cfb      	adds	r3, r7, #3
    7e5e:	22e8      	movs	r2, #232	; 0xe8
    7e60:	701a      	strb	r2, [r3, #0]
            _width  = ILI9341_TFTHEIGHT;
    7e62:	687b      	ldr	r3, [r7, #4]
    7e64:	22a0      	movs	r2, #160	; 0xa0
    7e66:	0052      	lsls	r2, r2, #1
    7e68:	819a      	strh	r2, [r3, #12]
            _height = ILI9341_TFTWIDTH;
    7e6a:	687b      	ldr	r3, [r7, #4]
    7e6c:	22f0      	movs	r2, #240	; 0xf0
    7e6e:	81da      	strh	r2, [r3, #14]
            break;
    7e70:	46c0      	nop			; (mov r8, r8)
    }

    startWrite();
    7e72:	687b      	ldr	r3, [r7, #4]
    7e74:	681b      	ldr	r3, [r3, #0]
    7e76:	3314      	adds	r3, #20
    7e78:	681b      	ldr	r3, [r3, #0]
    7e7a:	687a      	ldr	r2, [r7, #4]
    7e7c:	0010      	movs	r0, r2
    7e7e:	4798      	blx	r3
    writeCommand(ILI9341_MADCTL);
    7e80:	687b      	ldr	r3, [r7, #4]
    7e82:	2136      	movs	r1, #54	; 0x36
    7e84:	0018      	movs	r0, r3
    7e86:	f000 f8d5 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    spiWrite(m);
    7e8a:	1cfb      	adds	r3, r7, #3
    7e8c:	781a      	ldrb	r2, [r3, #0]
    7e8e:	687b      	ldr	r3, [r7, #4]
    7e90:	0011      	movs	r1, r2
    7e92:	0018      	movs	r0, r3
    7e94:	f000 f830 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    endWrite();
    7e98:	687b      	ldr	r3, [r7, #4]
    7e9a:	681b      	ldr	r3, [r3, #0]
    7e9c:	332c      	adds	r3, #44	; 0x2c
    7e9e:	681b      	ldr	r3, [r3, #0]
    7ea0:	687a      	ldr	r2, [r7, #4]
    7ea2:	0010      	movs	r0, r2
    7ea4:	4798      	blx	r3
}
    7ea6:	46c0      	nop			; (mov r8, r8)
    7ea8:	46bd      	mov	sp, r7
    7eaa:	b002      	add	sp, #8
    7eac:	bd80      	pop	{r7, pc}

00007eae <_ZN16Adafruit_ILI934113invertDisplayEb>:

void Adafruit_ILI9341::invertDisplay(boolean i) {
    7eae:	b580      	push	{r7, lr}
    7eb0:	b082      	sub	sp, #8
    7eb2:	af00      	add	r7, sp, #0
    7eb4:	6078      	str	r0, [r7, #4]
    7eb6:	000a      	movs	r2, r1
    7eb8:	1cfb      	adds	r3, r7, #3
    7eba:	701a      	strb	r2, [r3, #0]
    startWrite();
    7ebc:	687b      	ldr	r3, [r7, #4]
    7ebe:	681b      	ldr	r3, [r3, #0]
    7ec0:	3314      	adds	r3, #20
    7ec2:	681b      	ldr	r3, [r3, #0]
    7ec4:	687a      	ldr	r2, [r7, #4]
    7ec6:	0010      	movs	r0, r2
    7ec8:	4798      	blx	r3
    writeCommand(i ? ILI9341_INVON : ILI9341_INVOFF);
    7eca:	1cfb      	adds	r3, r7, #3
    7ecc:	781b      	ldrb	r3, [r3, #0]
    7ece:	2b00      	cmp	r3, #0
    7ed0:	d001      	beq.n	7ed6 <_ZN16Adafruit_ILI934113invertDisplayEb+0x28>
    7ed2:	2321      	movs	r3, #33	; 0x21
    7ed4:	e000      	b.n	7ed8 <_ZN16Adafruit_ILI934113invertDisplayEb+0x2a>
    7ed6:	2320      	movs	r3, #32
    7ed8:	687a      	ldr	r2, [r7, #4]
    7eda:	0019      	movs	r1, r3
    7edc:	0010      	movs	r0, r2
    7ede:	f000 f8a9 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    endWrite();
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	681b      	ldr	r3, [r3, #0]
    7ee6:	332c      	adds	r3, #44	; 0x2c
    7ee8:	681b      	ldr	r3, [r3, #0]
    7eea:	687a      	ldr	r2, [r7, #4]
    7eec:	0010      	movs	r0, r2
    7eee:	4798      	blx	r3
}
    7ef0:	46c0      	nop			; (mov r8, r8)
    7ef2:	46bd      	mov	sp, r7
    7ef4:	b002      	add	sp, #8
    7ef6:	bd80      	pop	{r7, pc}

00007ef8 <_ZN16Adafruit_ILI93418spiWriteEh>:
        }
    }
    return r;
}

void Adafruit_ILI9341::spiWrite(uint8_t b) {
    7ef8:	b580      	push	{r7, lr}
    7efa:	b084      	sub	sp, #16
    7efc:	af00      	add	r7, sp, #0
    7efe:	6078      	str	r0, [r7, #4]
    7f00:	000a      	movs	r2, r1
    7f02:	1cfb      	adds	r3, r7, #3
    7f04:	701a      	strb	r2, [r3, #0]
    if(_sclk < 0){
    7f06:	687b      	ldr	r3, [r7, #4]
    7f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7f0a:	2b00      	cmp	r3, #0
    7f0c:	da07      	bge.n	7f1e <_ZN16Adafruit_ILI93418spiWriteEh+0x26>
        HSPI_WRITE(b);
    7f0e:	1cfb      	adds	r3, r7, #3
    7f10:	781a      	ldrb	r2, [r3, #0]
    7f12:	4b25      	ldr	r3, [pc, #148]	; (7fa8 <_ZN16Adafruit_ILI93418spiWriteEh+0xb0>)
    7f14:	0011      	movs	r1, r2
    7f16:	0018      	movs	r0, r3
    7f18:	f003 fd12 	bl	b940 <_ZN8SPIClass8transferEh>
        return;
    7f1c:	e040      	b.n	7fa0 <_ZN16Adafruit_ILI93418spiWriteEh+0xa8>
    }
    for(uint8_t bit = 0x80; bit; bit >>= 1){
    7f1e:	230f      	movs	r3, #15
    7f20:	18fb      	adds	r3, r7, r3
    7f22:	2280      	movs	r2, #128	; 0x80
    7f24:	701a      	strb	r2, [r3, #0]
    7f26:	230f      	movs	r3, #15
    7f28:	18fb      	adds	r3, r7, r3
    7f2a:	781b      	ldrb	r3, [r3, #0]
    7f2c:	2b00      	cmp	r3, #0
    7f2e:	d037      	beq.n	7fa0 <_ZN16Adafruit_ILI93418spiWriteEh+0xa8>
        if((b) & bit){
    7f30:	1cfb      	adds	r3, r7, #3
    7f32:	220f      	movs	r2, #15
    7f34:	18ba      	adds	r2, r7, r2
    7f36:	781b      	ldrb	r3, [r3, #0]
    7f38:	7812      	ldrb	r2, [r2, #0]
    7f3a:	4013      	ands	r3, r2
    7f3c:	b2db      	uxtb	r3, r3
    7f3e:	2b00      	cmp	r3, #0
    7f40:	d009      	beq.n	7f56 <_ZN16Adafruit_ILI93418spiWriteEh+0x5e>
            SSPI_MOSI_HIGH();
    7f42:	687b      	ldr	r3, [r7, #4]
    7f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7f46:	687a      	ldr	r2, [r7, #4]
    7f48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    7f4a:	6811      	ldr	r1, [r2, #0]
    7f4c:	687a      	ldr	r2, [r7, #4]
    7f4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
    7f50:	430a      	orrs	r2, r1
    7f52:	601a      	str	r2, [r3, #0]
    7f54:	e009      	b.n	7f6a <_ZN16Adafruit_ILI93418spiWriteEh+0x72>
        } else {
            SSPI_MOSI_LOW();
    7f56:	687b      	ldr	r3, [r7, #4]
    7f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7f5a:	687a      	ldr	r2, [r7, #4]
    7f5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    7f5e:	6811      	ldr	r1, [r2, #0]
    7f60:	687a      	ldr	r2, [r7, #4]
    7f62:	6d12      	ldr	r2, [r2, #80]	; 0x50
    7f64:	43d2      	mvns	r2, r2
    7f66:	400a      	ands	r2, r1
    7f68:	601a      	str	r2, [r3, #0]
        }
        SSPI_SCK_LOW();
    7f6a:	687b      	ldr	r3, [r7, #4]
    7f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7f6e:	687a      	ldr	r2, [r7, #4]
    7f70:	6c52      	ldr	r2, [r2, #68]	; 0x44
    7f72:	6811      	ldr	r1, [r2, #0]
    7f74:	687a      	ldr	r2, [r7, #4]
    7f76:	6d92      	ldr	r2, [r2, #88]	; 0x58
    7f78:	43d2      	mvns	r2, r2
    7f7a:	400a      	ands	r2, r1
    7f7c:	601a      	str	r2, [r3, #0]
        SSPI_SCK_HIGH();
    7f7e:	687b      	ldr	r3, [r7, #4]
    7f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7f82:	687a      	ldr	r2, [r7, #4]
    7f84:	6c52      	ldr	r2, [r2, #68]	; 0x44
    7f86:	6811      	ldr	r1, [r2, #0]
    7f88:	687a      	ldr	r2, [r7, #4]
    7f8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
    7f8c:	430a      	orrs	r2, r1
    7f8e:	601a      	str	r2, [r3, #0]
    for(uint8_t bit = 0x80; bit; bit >>= 1){
    7f90:	230f      	movs	r3, #15
    7f92:	18fb      	adds	r3, r7, r3
    7f94:	781b      	ldrb	r3, [r3, #0]
    7f96:	105a      	asrs	r2, r3, #1
    7f98:	230f      	movs	r3, #15
    7f9a:	18fb      	adds	r3, r7, r3
    7f9c:	701a      	strb	r2, [r3, #0]
    7f9e:	e7c2      	b.n	7f26 <_ZN16Adafruit_ILI93418spiWriteEh+0x2e>
    }
}
    7fa0:	46bd      	mov	sp, r7
    7fa2:	b004      	add	sp, #16
    7fa4:	bd80      	pop	{r7, pc}
    7fa6:	46c0      	nop			; (mov r8, r8)
    7fa8:	20000b7c 	.word	0x20000b7c

00007fac <_ZN16Adafruit_ILI934110startWriteEv>:

/*
 * Transaction API
 * */

void Adafruit_ILI9341::startWrite(void){
    7fac:	b580      	push	{r7, lr}
    7fae:	b084      	sub	sp, #16
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	6078      	str	r0, [r7, #4]
    SPI_BEGIN_TRANSACTION();
    7fb4:	687b      	ldr	r3, [r7, #4]
    7fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7fb8:	2b00      	cmp	r3, #0
    7fba:	da0e      	bge.n	7fda <_ZN16Adafruit_ILI934110startWriteEv+0x2e>
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	6a19      	ldr	r1, [r3, #32]
    7fc0:	2308      	movs	r3, #8
    7fc2:	18f8      	adds	r0, r7, r3
    7fc4:	2302      	movs	r3, #2
    7fc6:	2201      	movs	r2, #1
    7fc8:	f7ff fb74 	bl	76b4 <_ZN11SPISettingsC1Em8BitOrderh>
    7fcc:	2308      	movs	r3, #8
    7fce:	18fb      	adds	r3, r7, r3
    7fd0:	4809      	ldr	r0, [pc, #36]	; (7ff8 <_ZN16Adafruit_ILI934110startWriteEv+0x4c>)
    7fd2:	6819      	ldr	r1, [r3, #0]
    7fd4:	685a      	ldr	r2, [r3, #4]
    7fd6:	f003 fc57 	bl	b888 <_ZN8SPIClass16beginTransactionE11SPISettings>
    SPI_CS_LOW();
    7fda:	687b      	ldr	r3, [r7, #4]
    7fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    7fde:	687a      	ldr	r2, [r7, #4]
    7fe0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    7fe2:	6811      	ldr	r1, [r2, #0]
    7fe4:	687a      	ldr	r2, [r7, #4]
    7fe6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    7fe8:	43d2      	mvns	r2, r2
    7fea:	400a      	ands	r2, r1
    7fec:	601a      	str	r2, [r3, #0]
}
    7fee:	46c0      	nop			; (mov r8, r8)
    7ff0:	46bd      	mov	sp, r7
    7ff2:	b004      	add	sp, #16
    7ff4:	bd80      	pop	{r7, pc}
    7ff6:	46c0      	nop			; (mov r8, r8)
    7ff8:	20000b7c 	.word	0x20000b7c

00007ffc <_ZN16Adafruit_ILI93418endWriteEv>:

void Adafruit_ILI9341::endWrite(void){
    7ffc:	b580      	push	{r7, lr}
    7ffe:	b082      	sub	sp, #8
    8000:	af00      	add	r7, sp, #0
    8002:	6078      	str	r0, [r7, #4]
    SPI_CS_HIGH();
    8004:	687b      	ldr	r3, [r7, #4]
    8006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    8008:	687a      	ldr	r2, [r7, #4]
    800a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    800c:	6811      	ldr	r1, [r2, #0]
    800e:	687a      	ldr	r2, [r7, #4]
    8010:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    8012:	430a      	orrs	r2, r1
    8014:	601a      	str	r2, [r3, #0]
    SPI_END_TRANSACTION();
    8016:	687b      	ldr	r3, [r7, #4]
    8018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    801a:	2b00      	cmp	r3, #0
    801c:	da03      	bge.n	8026 <_ZN16Adafruit_ILI93418endWriteEv+0x2a>
    801e:	4b04      	ldr	r3, [pc, #16]	; (8030 <_ZN16Adafruit_ILI93418endWriteEv+0x34>)
    8020:	0018      	movs	r0, r3
    8022:	f003 fc67 	bl	b8f4 <_ZN8SPIClass14endTransactionEv>
}
    8026:	46c0      	nop			; (mov r8, r8)
    8028:	46bd      	mov	sp, r7
    802a:	b002      	add	sp, #8
    802c:	bd80      	pop	{r7, pc}
    802e:	46c0      	nop			; (mov r8, r8)
    8030:	20000b7c 	.word	0x20000b7c

00008034 <_ZN16Adafruit_ILI934112writeCommandEh>:

void Adafruit_ILI9341::writeCommand(uint8_t cmd){
    8034:	b580      	push	{r7, lr}
    8036:	b082      	sub	sp, #8
    8038:	af00      	add	r7, sp, #0
    803a:	6078      	str	r0, [r7, #4]
    803c:	000a      	movs	r2, r1
    803e:	1cfb      	adds	r3, r7, #3
    8040:	701a      	strb	r2, [r3, #0]
    SPI_DC_LOW();
    8042:	687b      	ldr	r3, [r7, #4]
    8044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8046:	687a      	ldr	r2, [r7, #4]
    8048:	6c92      	ldr	r2, [r2, #72]	; 0x48
    804a:	6811      	ldr	r1, [r2, #0]
    804c:	687a      	ldr	r2, [r7, #4]
    804e:	6e12      	ldr	r2, [r2, #96]	; 0x60
    8050:	43d2      	mvns	r2, r2
    8052:	400a      	ands	r2, r1
    8054:	601a      	str	r2, [r3, #0]
    spiWrite(cmd);
    8056:	1cfb      	adds	r3, r7, #3
    8058:	781a      	ldrb	r2, [r3, #0]
    805a:	687b      	ldr	r3, [r7, #4]
    805c:	0011      	movs	r1, r2
    805e:	0018      	movs	r0, r3
    8060:	f7ff ff4a 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    SPI_DC_HIGH();
    8064:	687b      	ldr	r3, [r7, #4]
    8066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8068:	687a      	ldr	r2, [r7, #4]
    806a:	6c92      	ldr	r2, [r2, #72]	; 0x48
    806c:	6811      	ldr	r1, [r2, #0]
    806e:	687a      	ldr	r2, [r7, #4]
    8070:	6e12      	ldr	r2, [r2, #96]	; 0x60
    8072:	430a      	orrs	r2, r1
    8074:	601a      	str	r2, [r3, #0]
}
    8076:	46c0      	nop			; (mov r8, r8)
    8078:	46bd      	mov	sp, r7
    807a:	b002      	add	sp, #8
    807c:	bd80      	pop	{r7, pc}
	...

00008080 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>:

void Adafruit_ILI9341::setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
    8080:	b590      	push	{r4, r7, lr}
    8082:	b087      	sub	sp, #28
    8084:	af00      	add	r7, sp, #0
    8086:	60f8      	str	r0, [r7, #12]
    8088:	000c      	movs	r4, r1
    808a:	0010      	movs	r0, r2
    808c:	0019      	movs	r1, r3
    808e:	230a      	movs	r3, #10
    8090:	18fb      	adds	r3, r7, r3
    8092:	1c22      	adds	r2, r4, #0
    8094:	801a      	strh	r2, [r3, #0]
    8096:	2308      	movs	r3, #8
    8098:	18fb      	adds	r3, r7, r3
    809a:	1c02      	adds	r2, r0, #0
    809c:	801a      	strh	r2, [r3, #0]
    809e:	1dbb      	adds	r3, r7, #6
    80a0:	1c0a      	adds	r2, r1, #0
    80a2:	801a      	strh	r2, [r3, #0]
    uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
    80a4:	230a      	movs	r3, #10
    80a6:	18fb      	adds	r3, r7, r3
    80a8:	881b      	ldrh	r3, [r3, #0]
    80aa:	041b      	lsls	r3, r3, #16
    80ac:	220a      	movs	r2, #10
    80ae:	18ba      	adds	r2, r7, r2
    80b0:	8811      	ldrh	r1, [r2, #0]
    80b2:	1dba      	adds	r2, r7, #6
    80b4:	8812      	ldrh	r2, [r2, #0]
    80b6:	188a      	adds	r2, r1, r2
    80b8:	3a01      	subs	r2, #1
    80ba:	4313      	orrs	r3, r2
    80bc:	617b      	str	r3, [r7, #20]
    uint32_t ya = ((uint32_t)y << 16) | (y+h-1);
    80be:	2308      	movs	r3, #8
    80c0:	18fb      	adds	r3, r7, r3
    80c2:	881b      	ldrh	r3, [r3, #0]
    80c4:	041b      	lsls	r3, r3, #16
    80c6:	2208      	movs	r2, #8
    80c8:	18ba      	adds	r2, r7, r2
    80ca:	8811      	ldrh	r1, [r2, #0]
    80cc:	2228      	movs	r2, #40	; 0x28
    80ce:	18ba      	adds	r2, r7, r2
    80d0:	8812      	ldrh	r2, [r2, #0]
    80d2:	188a      	adds	r2, r1, r2
    80d4:	3a01      	subs	r2, #1
    80d6:	4313      	orrs	r3, r2
    80d8:	613b      	str	r3, [r7, #16]
    writeCommand(ILI9341_CASET); // Column addr set
    80da:	68fb      	ldr	r3, [r7, #12]
    80dc:	212a      	movs	r1, #42	; 0x2a
    80de:	0018      	movs	r0, r3
    80e0:	f7ff ffa8 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE32(xa);
    80e4:	68fb      	ldr	r3, [r7, #12]
    80e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    80e8:	2b00      	cmp	r3, #0
    80ea:	da1f      	bge.n	812c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xac>
    80ec:	697b      	ldr	r3, [r7, #20]
    80ee:	0e1b      	lsrs	r3, r3, #24
    80f0:	b2da      	uxtb	r2, r3
    80f2:	4b46      	ldr	r3, [pc, #280]	; (820c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    80f4:	0011      	movs	r1, r2
    80f6:	0018      	movs	r0, r3
    80f8:	f003 fc22 	bl	b940 <_ZN8SPIClass8transferEh>
    80fc:	697b      	ldr	r3, [r7, #20]
    80fe:	0c1b      	lsrs	r3, r3, #16
    8100:	b2da      	uxtb	r2, r3
    8102:	4b42      	ldr	r3, [pc, #264]	; (820c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8104:	0011      	movs	r1, r2
    8106:	0018      	movs	r0, r3
    8108:	f003 fc1a 	bl	b940 <_ZN8SPIClass8transferEh>
    810c:	697b      	ldr	r3, [r7, #20]
    810e:	0a1b      	lsrs	r3, r3, #8
    8110:	b2da      	uxtb	r2, r3
    8112:	4b3e      	ldr	r3, [pc, #248]	; (820c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8114:	0011      	movs	r1, r2
    8116:	0018      	movs	r0, r3
    8118:	f003 fc12 	bl	b940 <_ZN8SPIClass8transferEh>
    811c:	697b      	ldr	r3, [r7, #20]
    811e:	b2da      	uxtb	r2, r3
    8120:	4b3a      	ldr	r3, [pc, #232]	; (820c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8122:	0011      	movs	r1, r2
    8124:	0018      	movs	r0, r3
    8126:	f003 fc0b 	bl	b940 <_ZN8SPIClass8transferEh>
    812a:	e01e      	b.n	816a <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0xea>
    812c:	697b      	ldr	r3, [r7, #20]
    812e:	0e1b      	lsrs	r3, r3, #24
    8130:	b2da      	uxtb	r2, r3
    8132:	68fb      	ldr	r3, [r7, #12]
    8134:	0011      	movs	r1, r2
    8136:	0018      	movs	r0, r3
    8138:	f7ff fede 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    813c:	697b      	ldr	r3, [r7, #20]
    813e:	0c1b      	lsrs	r3, r3, #16
    8140:	b2da      	uxtb	r2, r3
    8142:	68fb      	ldr	r3, [r7, #12]
    8144:	0011      	movs	r1, r2
    8146:	0018      	movs	r0, r3
    8148:	f7ff fed6 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    814c:	697b      	ldr	r3, [r7, #20]
    814e:	0a1b      	lsrs	r3, r3, #8
    8150:	b2da      	uxtb	r2, r3
    8152:	68fb      	ldr	r3, [r7, #12]
    8154:	0011      	movs	r1, r2
    8156:	0018      	movs	r0, r3
    8158:	f7ff fece 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    815c:	697b      	ldr	r3, [r7, #20]
    815e:	b2da      	uxtb	r2, r3
    8160:	68fb      	ldr	r3, [r7, #12]
    8162:	0011      	movs	r1, r2
    8164:	0018      	movs	r0, r3
    8166:	f7ff fec7 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_PASET); // Row addr set
    816a:	68fb      	ldr	r3, [r7, #12]
    816c:	212b      	movs	r1, #43	; 0x2b
    816e:	0018      	movs	r0, r3
    8170:	f7ff ff60 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
    SPI_WRITE32(ya);
    8174:	68fb      	ldr	r3, [r7, #12]
    8176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8178:	2b00      	cmp	r3, #0
    817a:	da1f      	bge.n	81bc <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x13c>
    817c:	693b      	ldr	r3, [r7, #16]
    817e:	0e1b      	lsrs	r3, r3, #24
    8180:	b2da      	uxtb	r2, r3
    8182:	4b22      	ldr	r3, [pc, #136]	; (820c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8184:	0011      	movs	r1, r2
    8186:	0018      	movs	r0, r3
    8188:	f003 fbda 	bl	b940 <_ZN8SPIClass8transferEh>
    818c:	693b      	ldr	r3, [r7, #16]
    818e:	0c1b      	lsrs	r3, r3, #16
    8190:	b2da      	uxtb	r2, r3
    8192:	4b1e      	ldr	r3, [pc, #120]	; (820c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    8194:	0011      	movs	r1, r2
    8196:	0018      	movs	r0, r3
    8198:	f003 fbd2 	bl	b940 <_ZN8SPIClass8transferEh>
    819c:	693b      	ldr	r3, [r7, #16]
    819e:	0a1b      	lsrs	r3, r3, #8
    81a0:	b2da      	uxtb	r2, r3
    81a2:	4b1a      	ldr	r3, [pc, #104]	; (820c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    81a4:	0011      	movs	r1, r2
    81a6:	0018      	movs	r0, r3
    81a8:	f003 fbca 	bl	b940 <_ZN8SPIClass8transferEh>
    81ac:	693b      	ldr	r3, [r7, #16]
    81ae:	b2da      	uxtb	r2, r3
    81b0:	4b16      	ldr	r3, [pc, #88]	; (820c <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x18c>)
    81b2:	0011      	movs	r1, r2
    81b4:	0018      	movs	r0, r3
    81b6:	f003 fbc3 	bl	b940 <_ZN8SPIClass8transferEh>
    81ba:	e01e      	b.n	81fa <_ZN16Adafruit_ILI934113setAddrWindowEtttt+0x17a>
    81bc:	693b      	ldr	r3, [r7, #16]
    81be:	0e1b      	lsrs	r3, r3, #24
    81c0:	b2da      	uxtb	r2, r3
    81c2:	68fb      	ldr	r3, [r7, #12]
    81c4:	0011      	movs	r1, r2
    81c6:	0018      	movs	r0, r3
    81c8:	f7ff fe96 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    81cc:	693b      	ldr	r3, [r7, #16]
    81ce:	0c1b      	lsrs	r3, r3, #16
    81d0:	b2da      	uxtb	r2, r3
    81d2:	68fb      	ldr	r3, [r7, #12]
    81d4:	0011      	movs	r1, r2
    81d6:	0018      	movs	r0, r3
    81d8:	f7ff fe8e 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    81dc:	693b      	ldr	r3, [r7, #16]
    81de:	0a1b      	lsrs	r3, r3, #8
    81e0:	b2da      	uxtb	r2, r3
    81e2:	68fb      	ldr	r3, [r7, #12]
    81e4:	0011      	movs	r1, r2
    81e6:	0018      	movs	r0, r3
    81e8:	f7ff fe86 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    81ec:	693b      	ldr	r3, [r7, #16]
    81ee:	b2da      	uxtb	r2, r3
    81f0:	68fb      	ldr	r3, [r7, #12]
    81f2:	0011      	movs	r1, r2
    81f4:	0018      	movs	r0, r3
    81f6:	f7ff fe7f 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    writeCommand(ILI9341_RAMWR); // write to RAM
    81fa:	68fb      	ldr	r3, [r7, #12]
    81fc:	212c      	movs	r1, #44	; 0x2c
    81fe:	0018      	movs	r0, r3
    8200:	f7ff ff18 	bl	8034 <_ZN16Adafruit_ILI934112writeCommandEh>
}
    8204:	46c0      	nop			; (mov r8, r8)
    8206:	46bd      	mov	sp, r7
    8208:	b007      	add	sp, #28
    820a:	bd90      	pop	{r4, r7, pc}
    820c:	20000b7c 	.word	0x20000b7c

00008210 <_ZN16Adafruit_ILI934110writePixelEt>:
void Adafruit_ILI9341::pushColor(uint16_t color) {
  SPI_WRITE16(color);
}


void Adafruit_ILI9341::writePixel(uint16_t color){
    8210:	b580      	push	{r7, lr}
    8212:	b082      	sub	sp, #8
    8214:	af00      	add	r7, sp, #0
    8216:	6078      	str	r0, [r7, #4]
    8218:	000a      	movs	r2, r1
    821a:	1cbb      	adds	r3, r7, #2
    821c:	801a      	strh	r2, [r3, #0]
    SPI_WRITE16(color);
    821e:	687b      	ldr	r3, [r7, #4]
    8220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8222:	2b00      	cmp	r3, #0
    8224:	da11      	bge.n	824a <_ZN16Adafruit_ILI934110writePixelEt+0x3a>
    8226:	1cbb      	adds	r3, r7, #2
    8228:	881b      	ldrh	r3, [r3, #0]
    822a:	121b      	asrs	r3, r3, #8
    822c:	b2da      	uxtb	r2, r3
    822e:	4b11      	ldr	r3, [pc, #68]	; (8274 <_ZN16Adafruit_ILI934110writePixelEt+0x64>)
    8230:	0011      	movs	r1, r2
    8232:	0018      	movs	r0, r3
    8234:	f003 fb84 	bl	b940 <_ZN8SPIClass8transferEh>
    8238:	1cbb      	adds	r3, r7, #2
    823a:	881b      	ldrh	r3, [r3, #0]
    823c:	b2da      	uxtb	r2, r3
    823e:	4b0d      	ldr	r3, [pc, #52]	; (8274 <_ZN16Adafruit_ILI934110writePixelEt+0x64>)
    8240:	0011      	movs	r1, r2
    8242:	0018      	movs	r0, r3
    8244:	f003 fb7c 	bl	b940 <_ZN8SPIClass8transferEh>
}
    8248:	e010      	b.n	826c <_ZN16Adafruit_ILI934110writePixelEt+0x5c>
    SPI_WRITE16(color);
    824a:	1cbb      	adds	r3, r7, #2
    824c:	881b      	ldrh	r3, [r3, #0]
    824e:	121b      	asrs	r3, r3, #8
    8250:	b2da      	uxtb	r2, r3
    8252:	687b      	ldr	r3, [r7, #4]
    8254:	0011      	movs	r1, r2
    8256:	0018      	movs	r0, r3
    8258:	f7ff fe4e 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    825c:	1cbb      	adds	r3, r7, #2
    825e:	881b      	ldrh	r3, [r3, #0]
    8260:	b2da      	uxtb	r2, r3
    8262:	687b      	ldr	r3, [r7, #4]
    8264:	0011      	movs	r1, r2
    8266:	0018      	movs	r0, r3
    8268:	f7ff fe46 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
}
    826c:	46c0      	nop			; (mov r8, r8)
    826e:	46bd      	mov	sp, r7
    8270:	b002      	add	sp, #8
    8272:	bd80      	pop	{r7, pc}
    8274:	20000b7c 	.word	0x20000b7c

00008278 <_ZN16Adafruit_ILI934110writeColorEtm>:

void Adafruit_ILI9341::writePixels(uint16_t * colors, uint32_t len){
    SPI_WRITE_PIXELS((uint8_t*)colors , len * 2);
}

void Adafruit_ILI9341::writeColor(uint16_t color, uint32_t len){
    8278:	b580      	push	{r7, lr}
    827a:	b088      	sub	sp, #32
    827c:	af00      	add	r7, sp, #0
    827e:	60f8      	str	r0, [r7, #12]
    8280:	607a      	str	r2, [r7, #4]
    8282:	230a      	movs	r3, #10
    8284:	18fb      	adds	r3, r7, r3
    8286:	1c0a      	adds	r2, r1, #0
    8288:	801a      	strh	r2, [r3, #0]
        tlen = (len>blen)?blen:len;
        writePixels(temp, tlen);
        len -= tlen;
    }
#else
    uint8_t hi = color >> 8, lo = color;
    828a:	230a      	movs	r3, #10
    828c:	18fb      	adds	r3, r7, r3
    828e:	881b      	ldrh	r3, [r3, #0]
    8290:	121a      	asrs	r2, r3, #8
    8292:	2317      	movs	r3, #23
    8294:	18fb      	adds	r3, r7, r3
    8296:	701a      	strb	r2, [r3, #0]
    8298:	2316      	movs	r3, #22
    829a:	18fb      	adds	r3, r7, r3
    829c:	220a      	movs	r2, #10
    829e:	18ba      	adds	r2, r7, r2
    82a0:	8812      	ldrh	r2, [r2, #0]
    82a2:	701a      	strb	r2, [r3, #0]
    if(_sclk < 0){ //AVR Optimization
    82a4:	68fb      	ldr	r3, [r7, #12]
    82a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82a8:	2b00      	cmp	r3, #0
    82aa:	da18      	bge.n	82de <_ZN16Adafruit_ILI934110writeColorEtm+0x66>
        for (uint32_t t=len; t; t--){
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	61fb      	str	r3, [r7, #28]
    82b0:	69fb      	ldr	r3, [r7, #28]
    82b2:	2b00      	cmp	r3, #0
    82b4:	d02c      	beq.n	8310 <_ZN16Adafruit_ILI934110writeColorEtm+0x98>
            HSPI_WRITE(hi);
    82b6:	2317      	movs	r3, #23
    82b8:	18fb      	adds	r3, r7, r3
    82ba:	781a      	ldrb	r2, [r3, #0]
    82bc:	4b16      	ldr	r3, [pc, #88]	; (8318 <_ZN16Adafruit_ILI934110writeColorEtm+0xa0>)
    82be:	0011      	movs	r1, r2
    82c0:	0018      	movs	r0, r3
    82c2:	f003 fb3d 	bl	b940 <_ZN8SPIClass8transferEh>
            HSPI_WRITE(lo);
    82c6:	2316      	movs	r3, #22
    82c8:	18fb      	adds	r3, r7, r3
    82ca:	781a      	ldrb	r2, [r3, #0]
    82cc:	4b12      	ldr	r3, [pc, #72]	; (8318 <_ZN16Adafruit_ILI934110writeColorEtm+0xa0>)
    82ce:	0011      	movs	r1, r2
    82d0:	0018      	movs	r0, r3
    82d2:	f003 fb35 	bl	b940 <_ZN8SPIClass8transferEh>
        for (uint32_t t=len; t; t--){
    82d6:	69fb      	ldr	r3, [r7, #28]
    82d8:	3b01      	subs	r3, #1
    82da:	61fb      	str	r3, [r7, #28]
    82dc:	e7e8      	b.n	82b0 <_ZN16Adafruit_ILI934110writeColorEtm+0x38>
        }
        return;
    }
    for (uint32_t t=len; t; t--){
    82de:	687b      	ldr	r3, [r7, #4]
    82e0:	61bb      	str	r3, [r7, #24]
    82e2:	69bb      	ldr	r3, [r7, #24]
    82e4:	2b00      	cmp	r3, #0
    82e6:	d014      	beq.n	8312 <_ZN16Adafruit_ILI934110writeColorEtm+0x9a>
        spiWrite(hi);
    82e8:	2317      	movs	r3, #23
    82ea:	18fb      	adds	r3, r7, r3
    82ec:	781a      	ldrb	r2, [r3, #0]
    82ee:	68fb      	ldr	r3, [r7, #12]
    82f0:	0011      	movs	r1, r2
    82f2:	0018      	movs	r0, r3
    82f4:	f7ff fe00 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
        spiWrite(lo);
    82f8:	2316      	movs	r3, #22
    82fa:	18fb      	adds	r3, r7, r3
    82fc:	781a      	ldrb	r2, [r3, #0]
    82fe:	68fb      	ldr	r3, [r7, #12]
    8300:	0011      	movs	r1, r2
    8302:	0018      	movs	r0, r3
    8304:	f7ff fdf8 	bl	7ef8 <_ZN16Adafruit_ILI93418spiWriteEh>
    for (uint32_t t=len; t; t--){
    8308:	69bb      	ldr	r3, [r7, #24]
    830a:	3b01      	subs	r3, #1
    830c:	61bb      	str	r3, [r7, #24]
    830e:	e7e8      	b.n	82e2 <_ZN16Adafruit_ILI934110writeColorEtm+0x6a>
        return;
    8310:	46c0      	nop			; (mov r8, r8)
    }
#endif
}
    8312:	46bd      	mov	sp, r7
    8314:	b008      	add	sp, #32
    8316:	bd80      	pop	{r7, pc}
    8318:	20000b7c 	.word	0x20000b7c

0000831c <_ZN16Adafruit_ILI934110writePixelEsst>:

void Adafruit_ILI9341::writePixel(int16_t x, int16_t y, uint16_t color) {
    831c:	b590      	push	{r4, r7, lr}
    831e:	b087      	sub	sp, #28
    8320:	af02      	add	r7, sp, #8
    8322:	60f8      	str	r0, [r7, #12]
    8324:	000c      	movs	r4, r1
    8326:	0010      	movs	r0, r2
    8328:	0019      	movs	r1, r3
    832a:	230a      	movs	r3, #10
    832c:	18fb      	adds	r3, r7, r3
    832e:	1c22      	adds	r2, r4, #0
    8330:	801a      	strh	r2, [r3, #0]
    8332:	2308      	movs	r3, #8
    8334:	18fb      	adds	r3, r7, r3
    8336:	1c02      	adds	r2, r0, #0
    8338:	801a      	strh	r2, [r3, #0]
    833a:	1dbb      	adds	r3, r7, #6
    833c:	1c0a      	adds	r2, r1, #0
    833e:	801a      	strh	r2, [r3, #0]
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    8340:	230a      	movs	r3, #10
    8342:	18fb      	adds	r3, r7, r3
    8344:	2200      	movs	r2, #0
    8346:	5e9b      	ldrsh	r3, [r3, r2]
    8348:	2b00      	cmp	r3, #0
    834a:	db2b      	blt.n	83a4 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    834c:	68fb      	ldr	r3, [r7, #12]
    834e:	220c      	movs	r2, #12
    8350:	5e9b      	ldrsh	r3, [r3, r2]
    8352:	220a      	movs	r2, #10
    8354:	18ba      	adds	r2, r7, r2
    8356:	2100      	movs	r1, #0
    8358:	5e52      	ldrsh	r2, [r2, r1]
    835a:	429a      	cmp	r2, r3
    835c:	da22      	bge.n	83a4 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    835e:	2308      	movs	r3, #8
    8360:	18fb      	adds	r3, r7, r3
    8362:	2200      	movs	r2, #0
    8364:	5e9b      	ldrsh	r3, [r3, r2]
    8366:	2b00      	cmp	r3, #0
    8368:	db1c      	blt.n	83a4 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    836a:	68fb      	ldr	r3, [r7, #12]
    836c:	220e      	movs	r2, #14
    836e:	5e9b      	ldrsh	r3, [r3, r2]
    8370:	2208      	movs	r2, #8
    8372:	18ba      	adds	r2, r7, r2
    8374:	2100      	movs	r1, #0
    8376:	5e52      	ldrsh	r2, [r2, r1]
    8378:	429a      	cmp	r2, r3
    837a:	da13      	bge.n	83a4 <_ZN16Adafruit_ILI934110writePixelEsst+0x88>
    setAddrWindow(x,y,1,1);
    837c:	230a      	movs	r3, #10
    837e:	18fb      	adds	r3, r7, r3
    8380:	8819      	ldrh	r1, [r3, #0]
    8382:	2308      	movs	r3, #8
    8384:	18fb      	adds	r3, r7, r3
    8386:	881a      	ldrh	r2, [r3, #0]
    8388:	68f8      	ldr	r0, [r7, #12]
    838a:	2301      	movs	r3, #1
    838c:	9300      	str	r3, [sp, #0]
    838e:	2301      	movs	r3, #1
    8390:	f7ff fe76 	bl	8080 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    writePixel(color);
    8394:	1dbb      	adds	r3, r7, #6
    8396:	881a      	ldrh	r2, [r3, #0]
    8398:	68fb      	ldr	r3, [r7, #12]
    839a:	0011      	movs	r1, r2
    839c:	0018      	movs	r0, r3
    839e:	f7ff ff37 	bl	8210 <_ZN16Adafruit_ILI934110writePixelEt>
    83a2:	e000      	b.n	83a6 <_ZN16Adafruit_ILI934110writePixelEsst+0x8a>
    if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    83a4:	46c0      	nop			; (mov r8, r8)
}
    83a6:	46bd      	mov	sp, r7
    83a8:	b005      	add	sp, #20
    83aa:	bd90      	pop	{r4, r7, pc}

000083ac <_ZN16Adafruit_ILI934113writeFillRectEsssst>:

void Adafruit_ILI9341::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
    83ac:	b590      	push	{r4, r7, lr}
    83ae:	b089      	sub	sp, #36	; 0x24
    83b0:	af02      	add	r7, sp, #8
    83b2:	60f8      	str	r0, [r7, #12]
    83b4:	000c      	movs	r4, r1
    83b6:	0010      	movs	r0, r2
    83b8:	0019      	movs	r1, r3
    83ba:	230a      	movs	r3, #10
    83bc:	18fb      	adds	r3, r7, r3
    83be:	1c22      	adds	r2, r4, #0
    83c0:	801a      	strh	r2, [r3, #0]
    83c2:	2308      	movs	r3, #8
    83c4:	18fb      	adds	r3, r7, r3
    83c6:	1c02      	adds	r2, r0, #0
    83c8:	801a      	strh	r2, [r3, #0]
    83ca:	1dbb      	adds	r3, r7, #6
    83cc:	1c0a      	adds	r2, r1, #0
    83ce:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
    83d0:	68fb      	ldr	r3, [r7, #12]
    83d2:	220c      	movs	r2, #12
    83d4:	5e9b      	ldrsh	r3, [r3, r2]
    83d6:	220a      	movs	r2, #10
    83d8:	18ba      	adds	r2, r7, r2
    83da:	2100      	movs	r1, #0
    83dc:	5e52      	ldrsh	r2, [r2, r1]
    83de:	429a      	cmp	r2, r3
    83e0:	db00      	blt.n	83e4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x38>
    83e2:	e09e      	b.n	8522 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x176>
    83e4:	68fb      	ldr	r3, [r7, #12]
    83e6:	220e      	movs	r2, #14
    83e8:	5e9b      	ldrsh	r3, [r3, r2]
    83ea:	2208      	movs	r2, #8
    83ec:	18ba      	adds	r2, r7, r2
    83ee:	2100      	movs	r1, #0
    83f0:	5e52      	ldrsh	r2, [r2, r1]
    83f2:	429a      	cmp	r2, r3
    83f4:	db00      	blt.n	83f8 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x4c>
    83f6:	e094      	b.n	8522 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x176>
    int16_t x2 = x + w - 1, y2 = y + h - 1;
    83f8:	230a      	movs	r3, #10
    83fa:	18fb      	adds	r3, r7, r3
    83fc:	881a      	ldrh	r2, [r3, #0]
    83fe:	1dbb      	adds	r3, r7, #6
    8400:	881b      	ldrh	r3, [r3, #0]
    8402:	18d3      	adds	r3, r2, r3
    8404:	b29b      	uxth	r3, r3
    8406:	3b01      	subs	r3, #1
    8408:	b29a      	uxth	r2, r3
    840a:	2316      	movs	r3, #22
    840c:	18fb      	adds	r3, r7, r3
    840e:	801a      	strh	r2, [r3, #0]
    8410:	2308      	movs	r3, #8
    8412:	18fb      	adds	r3, r7, r3
    8414:	881a      	ldrh	r2, [r3, #0]
    8416:	2328      	movs	r3, #40	; 0x28
    8418:	18fb      	adds	r3, r7, r3
    841a:	881b      	ldrh	r3, [r3, #0]
    841c:	18d3      	adds	r3, r2, r3
    841e:	b29b      	uxth	r3, r3
    8420:	3b01      	subs	r3, #1
    8422:	b29a      	uxth	r2, r3
    8424:	2314      	movs	r3, #20
    8426:	18fb      	adds	r3, r7, r3
    8428:	801a      	strh	r2, [r3, #0]
    if((x2 < 0) || (y2 < 0)) return;
    842a:	2316      	movs	r3, #22
    842c:	18fb      	adds	r3, r7, r3
    842e:	2200      	movs	r2, #0
    8430:	5e9b      	ldrsh	r3, [r3, r2]
    8432:	2b00      	cmp	r3, #0
    8434:	da00      	bge.n	8438 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x8c>
    8436:	e076      	b.n	8526 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17a>
    8438:	2314      	movs	r3, #20
    843a:	18fb      	adds	r3, r7, r3
    843c:	2200      	movs	r2, #0
    843e:	5e9b      	ldrsh	r3, [r3, r2]
    8440:	2b00      	cmp	r3, #0
    8442:	da00      	bge.n	8446 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x9a>
    8444:	e06f      	b.n	8526 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17a>

    // Clip left/top
    if(x < 0) {
    8446:	230a      	movs	r3, #10
    8448:	18fb      	adds	r3, r7, r3
    844a:	2200      	movs	r2, #0
    844c:	5e9b      	ldrsh	r3, [r3, r2]
    844e:	2b00      	cmp	r3, #0
    8450:	da0a      	bge.n	8468 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0xbc>
        x = 0;
    8452:	230a      	movs	r3, #10
    8454:	18fb      	adds	r3, r7, r3
    8456:	2200      	movs	r2, #0
    8458:	801a      	strh	r2, [r3, #0]
        w = x2 + 1;
    845a:	2316      	movs	r3, #22
    845c:	18fb      	adds	r3, r7, r3
    845e:	881b      	ldrh	r3, [r3, #0]
    8460:	3301      	adds	r3, #1
    8462:	b29a      	uxth	r2, r3
    8464:	1dbb      	adds	r3, r7, #6
    8466:	801a      	strh	r2, [r3, #0]
    }
    if(y < 0) {
    8468:	2308      	movs	r3, #8
    846a:	18fb      	adds	r3, r7, r3
    846c:	2200      	movs	r2, #0
    846e:	5e9b      	ldrsh	r3, [r3, r2]
    8470:	2b00      	cmp	r3, #0
    8472:	da0b      	bge.n	848c <_ZN16Adafruit_ILI934113writeFillRectEsssst+0xe0>
        y = 0;
    8474:	2308      	movs	r3, #8
    8476:	18fb      	adds	r3, r7, r3
    8478:	2200      	movs	r2, #0
    847a:	801a      	strh	r2, [r3, #0]
        h = y2 + 1;
    847c:	2314      	movs	r3, #20
    847e:	18fb      	adds	r3, r7, r3
    8480:	881b      	ldrh	r3, [r3, #0]
    8482:	3301      	adds	r3, #1
    8484:	b29a      	uxth	r2, r3
    8486:	2328      	movs	r3, #40	; 0x28
    8488:	18fb      	adds	r3, r7, r3
    848a:	801a      	strh	r2, [r3, #0]
    }

    // Clip right/bottom
    if(x2 >= _width)  w = _width  - x;
    848c:	68fb      	ldr	r3, [r7, #12]
    848e:	220c      	movs	r2, #12
    8490:	5e9b      	ldrsh	r3, [r3, r2]
    8492:	2216      	movs	r2, #22
    8494:	18ba      	adds	r2, r7, r2
    8496:	2100      	movs	r1, #0
    8498:	5e52      	ldrsh	r2, [r2, r1]
    849a:	429a      	cmp	r2, r3
    849c:	db0a      	blt.n	84b4 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x108>
    849e:	68fb      	ldr	r3, [r7, #12]
    84a0:	220c      	movs	r2, #12
    84a2:	5e9b      	ldrsh	r3, [r3, r2]
    84a4:	b29a      	uxth	r2, r3
    84a6:	230a      	movs	r3, #10
    84a8:	18fb      	adds	r3, r7, r3
    84aa:	881b      	ldrh	r3, [r3, #0]
    84ac:	1ad3      	subs	r3, r2, r3
    84ae:	b29a      	uxth	r2, r3
    84b0:	1dbb      	adds	r3, r7, #6
    84b2:	801a      	strh	r2, [r3, #0]
    if(y2 >= _height) h = _height - y;
    84b4:	68fb      	ldr	r3, [r7, #12]
    84b6:	220e      	movs	r2, #14
    84b8:	5e9b      	ldrsh	r3, [r3, r2]
    84ba:	2214      	movs	r2, #20
    84bc:	18ba      	adds	r2, r7, r2
    84be:	2100      	movs	r1, #0
    84c0:	5e52      	ldrsh	r2, [r2, r1]
    84c2:	429a      	cmp	r2, r3
    84c4:	db0b      	blt.n	84de <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x132>
    84c6:	68fb      	ldr	r3, [r7, #12]
    84c8:	220e      	movs	r2, #14
    84ca:	5e9b      	ldrsh	r3, [r3, r2]
    84cc:	b29a      	uxth	r2, r3
    84ce:	2308      	movs	r3, #8
    84d0:	18fb      	adds	r3, r7, r3
    84d2:	881b      	ldrh	r3, [r3, #0]
    84d4:	1ad3      	subs	r3, r2, r3
    84d6:	b29a      	uxth	r2, r3
    84d8:	2328      	movs	r3, #40	; 0x28
    84da:	18fb      	adds	r3, r7, r3
    84dc:	801a      	strh	r2, [r3, #0]

    int32_t len = (int32_t)w * h;
    84de:	1dbb      	adds	r3, r7, #6
    84e0:	2200      	movs	r2, #0
    84e2:	5e9b      	ldrsh	r3, [r3, r2]
    84e4:	2228      	movs	r2, #40	; 0x28
    84e6:	18ba      	adds	r2, r7, r2
    84e8:	2100      	movs	r1, #0
    84ea:	5e52      	ldrsh	r2, [r2, r1]
    84ec:	4353      	muls	r3, r2
    84ee:	613b      	str	r3, [r7, #16]
    setAddrWindow(x, y, w, h);
    84f0:	230a      	movs	r3, #10
    84f2:	18fb      	adds	r3, r7, r3
    84f4:	8819      	ldrh	r1, [r3, #0]
    84f6:	2308      	movs	r3, #8
    84f8:	18fb      	adds	r3, r7, r3
    84fa:	881a      	ldrh	r2, [r3, #0]
    84fc:	1dbb      	adds	r3, r7, #6
    84fe:	881c      	ldrh	r4, [r3, #0]
    8500:	2328      	movs	r3, #40	; 0x28
    8502:	18fb      	adds	r3, r7, r3
    8504:	881b      	ldrh	r3, [r3, #0]
    8506:	68f8      	ldr	r0, [r7, #12]
    8508:	9300      	str	r3, [sp, #0]
    850a:	0023      	movs	r3, r4
    850c:	f7ff fdb8 	bl	8080 <_ZN16Adafruit_ILI934113setAddrWindowEtttt>
    writeColor(color, len);
    8510:	693a      	ldr	r2, [r7, #16]
    8512:	232c      	movs	r3, #44	; 0x2c
    8514:	18fb      	adds	r3, r7, r3
    8516:	8819      	ldrh	r1, [r3, #0]
    8518:	68fb      	ldr	r3, [r7, #12]
    851a:	0018      	movs	r0, r3
    851c:	f7ff feac 	bl	8278 <_ZN16Adafruit_ILI934110writeColorEtm>
    8520:	e002      	b.n	8528 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17c>
    if((x >= _width) || (y >= _height)) return;
    8522:	46c0      	nop			; (mov r8, r8)
    8524:	e000      	b.n	8528 <_ZN16Adafruit_ILI934113writeFillRectEsssst+0x17c>
    if((x2 < 0) || (y2 < 0)) return;
    8526:	46c0      	nop			; (mov r8, r8)
}
    8528:	46bd      	mov	sp, r7
    852a:	b007      	add	sp, #28
    852c:	bd90      	pop	{r4, r7, pc}

0000852e <_ZN16Adafruit_ILI934114writeFastVLineEssst>:

void Adafruit_ILI9341::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color){
    852e:	b5b0      	push	{r4, r5, r7, lr}
    8530:	b086      	sub	sp, #24
    8532:	af02      	add	r7, sp, #8
    8534:	60f8      	str	r0, [r7, #12]
    8536:	000c      	movs	r4, r1
    8538:	0010      	movs	r0, r2
    853a:	0019      	movs	r1, r3
    853c:	230a      	movs	r3, #10
    853e:	18fb      	adds	r3, r7, r3
    8540:	1c22      	adds	r2, r4, #0
    8542:	801a      	strh	r2, [r3, #0]
    8544:	2308      	movs	r3, #8
    8546:	18fb      	adds	r3, r7, r3
    8548:	1c02      	adds	r2, r0, #0
    854a:	801a      	strh	r2, [r3, #0]
    854c:	1dbb      	adds	r3, r7, #6
    854e:	1c0a      	adds	r2, r1, #0
    8550:	801a      	strh	r2, [r3, #0]
    writeFillRect(x, y, 1, h, color);
    8552:	68fb      	ldr	r3, [r7, #12]
    8554:	681b      	ldr	r3, [r3, #0]
    8556:	331c      	adds	r3, #28
    8558:	681c      	ldr	r4, [r3, #0]
    855a:	2308      	movs	r3, #8
    855c:	18fb      	adds	r3, r7, r3
    855e:	2200      	movs	r2, #0
    8560:	5e9a      	ldrsh	r2, [r3, r2]
    8562:	230a      	movs	r3, #10
    8564:	18fb      	adds	r3, r7, r3
    8566:	2100      	movs	r1, #0
    8568:	5e59      	ldrsh	r1, [r3, r1]
    856a:	68f8      	ldr	r0, [r7, #12]
    856c:	2320      	movs	r3, #32
    856e:	18fb      	adds	r3, r7, r3
    8570:	881b      	ldrh	r3, [r3, #0]
    8572:	9301      	str	r3, [sp, #4]
    8574:	1dbb      	adds	r3, r7, #6
    8576:	2500      	movs	r5, #0
    8578:	5f5b      	ldrsh	r3, [r3, r5]
    857a:	9300      	str	r3, [sp, #0]
    857c:	2301      	movs	r3, #1
    857e:	47a0      	blx	r4
}
    8580:	46c0      	nop			; (mov r8, r8)
    8582:	46bd      	mov	sp, r7
    8584:	b004      	add	sp, #16
    8586:	bdb0      	pop	{r4, r5, r7, pc}

00008588 <_ZN16Adafruit_ILI934114writeFastHLineEssst>:

void Adafruit_ILI9341::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color){
    8588:	b5b0      	push	{r4, r5, r7, lr}
    858a:	b086      	sub	sp, #24
    858c:	af02      	add	r7, sp, #8
    858e:	60f8      	str	r0, [r7, #12]
    8590:	000c      	movs	r4, r1
    8592:	0010      	movs	r0, r2
    8594:	0019      	movs	r1, r3
    8596:	230a      	movs	r3, #10
    8598:	18fb      	adds	r3, r7, r3
    859a:	1c22      	adds	r2, r4, #0
    859c:	801a      	strh	r2, [r3, #0]
    859e:	2308      	movs	r3, #8
    85a0:	18fb      	adds	r3, r7, r3
    85a2:	1c02      	adds	r2, r0, #0
    85a4:	801a      	strh	r2, [r3, #0]
    85a6:	1dbb      	adds	r3, r7, #6
    85a8:	1c0a      	adds	r2, r1, #0
    85aa:	801a      	strh	r2, [r3, #0]
    writeFillRect(x, y, w, 1, color);
    85ac:	68fb      	ldr	r3, [r7, #12]
    85ae:	681b      	ldr	r3, [r3, #0]
    85b0:	331c      	adds	r3, #28
    85b2:	681c      	ldr	r4, [r3, #0]
    85b4:	1dbb      	adds	r3, r7, #6
    85b6:	2500      	movs	r5, #0
    85b8:	5f5d      	ldrsh	r5, [r3, r5]
    85ba:	2308      	movs	r3, #8
    85bc:	18fb      	adds	r3, r7, r3
    85be:	2200      	movs	r2, #0
    85c0:	5e9a      	ldrsh	r2, [r3, r2]
    85c2:	230a      	movs	r3, #10
    85c4:	18fb      	adds	r3, r7, r3
    85c6:	2100      	movs	r1, #0
    85c8:	5e59      	ldrsh	r1, [r3, r1]
    85ca:	68f8      	ldr	r0, [r7, #12]
    85cc:	2320      	movs	r3, #32
    85ce:	18fb      	adds	r3, r7, r3
    85d0:	881b      	ldrh	r3, [r3, #0]
    85d2:	9301      	str	r3, [sp, #4]
    85d4:	2301      	movs	r3, #1
    85d6:	9300      	str	r3, [sp, #0]
    85d8:	002b      	movs	r3, r5
    85da:	47a0      	blx	r4
}
    85dc:	46c0      	nop			; (mov r8, r8)
    85de:	46bd      	mov	sp, r7
    85e0:	b004      	add	sp, #16
    85e2:	bdb0      	pop	{r4, r5, r7, pc}

000085e4 <_ZN16Adafruit_ILI93419drawPixelEsst>:
    endWrite();
    _freq = freq;
    return r;
}

void Adafruit_ILI9341::drawPixel(int16_t x, int16_t y, uint16_t color){
    85e4:	b5b0      	push	{r4, r5, r7, lr}
    85e6:	b084      	sub	sp, #16
    85e8:	af00      	add	r7, sp, #0
    85ea:	60f8      	str	r0, [r7, #12]
    85ec:	000c      	movs	r4, r1
    85ee:	0010      	movs	r0, r2
    85f0:	0019      	movs	r1, r3
    85f2:	230a      	movs	r3, #10
    85f4:	18fb      	adds	r3, r7, r3
    85f6:	1c22      	adds	r2, r4, #0
    85f8:	801a      	strh	r2, [r3, #0]
    85fa:	2308      	movs	r3, #8
    85fc:	18fb      	adds	r3, r7, r3
    85fe:	1c02      	adds	r2, r0, #0
    8600:	801a      	strh	r2, [r3, #0]
    8602:	1dbb      	adds	r3, r7, #6
    8604:	1c0a      	adds	r2, r1, #0
    8606:	801a      	strh	r2, [r3, #0]
    startWrite();
    8608:	68fb      	ldr	r3, [r7, #12]
    860a:	681b      	ldr	r3, [r3, #0]
    860c:	3314      	adds	r3, #20
    860e:	681b      	ldr	r3, [r3, #0]
    8610:	68fa      	ldr	r2, [r7, #12]
    8612:	0010      	movs	r0, r2
    8614:	4798      	blx	r3
    writePixel(x, y, color);
    8616:	68fb      	ldr	r3, [r7, #12]
    8618:	681b      	ldr	r3, [r3, #0]
    861a:	3318      	adds	r3, #24
    861c:	681c      	ldr	r4, [r3, #0]
    861e:	1dbb      	adds	r3, r7, #6
    8620:	881d      	ldrh	r5, [r3, #0]
    8622:	2308      	movs	r3, #8
    8624:	18fb      	adds	r3, r7, r3
    8626:	2200      	movs	r2, #0
    8628:	5e9a      	ldrsh	r2, [r3, r2]
    862a:	230a      	movs	r3, #10
    862c:	18fb      	adds	r3, r7, r3
    862e:	2100      	movs	r1, #0
    8630:	5e59      	ldrsh	r1, [r3, r1]
    8632:	68f8      	ldr	r0, [r7, #12]
    8634:	002b      	movs	r3, r5
    8636:	47a0      	blx	r4
    endWrite();
    8638:	68fb      	ldr	r3, [r7, #12]
    863a:	681b      	ldr	r3, [r3, #0]
    863c:	332c      	adds	r3, #44	; 0x2c
    863e:	681b      	ldr	r3, [r3, #0]
    8640:	68fa      	ldr	r2, [r7, #12]
    8642:	0010      	movs	r0, r2
    8644:	4798      	blx	r3
}
    8646:	46c0      	nop			; (mov r8, r8)
    8648:	46bd      	mov	sp, r7
    864a:	b004      	add	sp, #16
    864c:	bdb0      	pop	{r4, r5, r7, pc}

0000864e <_ZN16Adafruit_ILI934113drawFastVLineEssst>:

void Adafruit_ILI9341::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    864e:	b5b0      	push	{r4, r5, r7, lr}
    8650:	b086      	sub	sp, #24
    8652:	af02      	add	r7, sp, #8
    8654:	60f8      	str	r0, [r7, #12]
    8656:	000c      	movs	r4, r1
    8658:	0010      	movs	r0, r2
    865a:	0019      	movs	r1, r3
    865c:	230a      	movs	r3, #10
    865e:	18fb      	adds	r3, r7, r3
    8660:	1c22      	adds	r2, r4, #0
    8662:	801a      	strh	r2, [r3, #0]
    8664:	2308      	movs	r3, #8
    8666:	18fb      	adds	r3, r7, r3
    8668:	1c02      	adds	r2, r0, #0
    866a:	801a      	strh	r2, [r3, #0]
    866c:	1dbb      	adds	r3, r7, #6
    866e:	1c0a      	adds	r2, r1, #0
    8670:	801a      	strh	r2, [r3, #0]
    startWrite();
    8672:	68fb      	ldr	r3, [r7, #12]
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	3314      	adds	r3, #20
    8678:	681b      	ldr	r3, [r3, #0]
    867a:	68fa      	ldr	r2, [r7, #12]
    867c:	0010      	movs	r0, r2
    867e:	4798      	blx	r3
    writeFastVLine(x, y, h, color);
    8680:	68fb      	ldr	r3, [r7, #12]
    8682:	681b      	ldr	r3, [r3, #0]
    8684:	3320      	adds	r3, #32
    8686:	681c      	ldr	r4, [r3, #0]
    8688:	1dbb      	adds	r3, r7, #6
    868a:	2500      	movs	r5, #0
    868c:	5f5d      	ldrsh	r5, [r3, r5]
    868e:	2308      	movs	r3, #8
    8690:	18fb      	adds	r3, r7, r3
    8692:	2200      	movs	r2, #0
    8694:	5e9a      	ldrsh	r2, [r3, r2]
    8696:	230a      	movs	r3, #10
    8698:	18fb      	adds	r3, r7, r3
    869a:	2100      	movs	r1, #0
    869c:	5e59      	ldrsh	r1, [r3, r1]
    869e:	68f8      	ldr	r0, [r7, #12]
    86a0:	2320      	movs	r3, #32
    86a2:	18fb      	adds	r3, r7, r3
    86a4:	881b      	ldrh	r3, [r3, #0]
    86a6:	9300      	str	r3, [sp, #0]
    86a8:	002b      	movs	r3, r5
    86aa:	47a0      	blx	r4
    endWrite();
    86ac:	68fb      	ldr	r3, [r7, #12]
    86ae:	681b      	ldr	r3, [r3, #0]
    86b0:	332c      	adds	r3, #44	; 0x2c
    86b2:	681b      	ldr	r3, [r3, #0]
    86b4:	68fa      	ldr	r2, [r7, #12]
    86b6:	0010      	movs	r0, r2
    86b8:	4798      	blx	r3
}
    86ba:	46c0      	nop			; (mov r8, r8)
    86bc:	46bd      	mov	sp, r7
    86be:	b004      	add	sp, #16
    86c0:	bdb0      	pop	{r4, r5, r7, pc}

000086c2 <_ZN16Adafruit_ILI934113drawFastHLineEssst>:

void Adafruit_ILI9341::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    86c2:	b5b0      	push	{r4, r5, r7, lr}
    86c4:	b086      	sub	sp, #24
    86c6:	af02      	add	r7, sp, #8
    86c8:	60f8      	str	r0, [r7, #12]
    86ca:	000c      	movs	r4, r1
    86cc:	0010      	movs	r0, r2
    86ce:	0019      	movs	r1, r3
    86d0:	230a      	movs	r3, #10
    86d2:	18fb      	adds	r3, r7, r3
    86d4:	1c22      	adds	r2, r4, #0
    86d6:	801a      	strh	r2, [r3, #0]
    86d8:	2308      	movs	r3, #8
    86da:	18fb      	adds	r3, r7, r3
    86dc:	1c02      	adds	r2, r0, #0
    86de:	801a      	strh	r2, [r3, #0]
    86e0:	1dbb      	adds	r3, r7, #6
    86e2:	1c0a      	adds	r2, r1, #0
    86e4:	801a      	strh	r2, [r3, #0]
    startWrite();
    86e6:	68fb      	ldr	r3, [r7, #12]
    86e8:	681b      	ldr	r3, [r3, #0]
    86ea:	3314      	adds	r3, #20
    86ec:	681b      	ldr	r3, [r3, #0]
    86ee:	68fa      	ldr	r2, [r7, #12]
    86f0:	0010      	movs	r0, r2
    86f2:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
    86f4:	68fb      	ldr	r3, [r7, #12]
    86f6:	681b      	ldr	r3, [r3, #0]
    86f8:	3324      	adds	r3, #36	; 0x24
    86fa:	681c      	ldr	r4, [r3, #0]
    86fc:	1dbb      	adds	r3, r7, #6
    86fe:	2500      	movs	r5, #0
    8700:	5f5d      	ldrsh	r5, [r3, r5]
    8702:	2308      	movs	r3, #8
    8704:	18fb      	adds	r3, r7, r3
    8706:	2200      	movs	r2, #0
    8708:	5e9a      	ldrsh	r2, [r3, r2]
    870a:	230a      	movs	r3, #10
    870c:	18fb      	adds	r3, r7, r3
    870e:	2100      	movs	r1, #0
    8710:	5e59      	ldrsh	r1, [r3, r1]
    8712:	68f8      	ldr	r0, [r7, #12]
    8714:	2320      	movs	r3, #32
    8716:	18fb      	adds	r3, r7, r3
    8718:	881b      	ldrh	r3, [r3, #0]
    871a:	9300      	str	r3, [sp, #0]
    871c:	002b      	movs	r3, r5
    871e:	47a0      	blx	r4
    endWrite();
    8720:	68fb      	ldr	r3, [r7, #12]
    8722:	681b      	ldr	r3, [r3, #0]
    8724:	332c      	adds	r3, #44	; 0x2c
    8726:	681b      	ldr	r3, [r3, #0]
    8728:	68fa      	ldr	r2, [r7, #12]
    872a:	0010      	movs	r0, r2
    872c:	4798      	blx	r3
}
    872e:	46c0      	nop			; (mov r8, r8)
    8730:	46bd      	mov	sp, r7
    8732:	b004      	add	sp, #16
    8734:	bdb0      	pop	{r4, r5, r7, pc}

00008736 <_ZN16Adafruit_ILI93418fillRectEsssst>:

void Adafruit_ILI9341::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    8736:	b5f0      	push	{r4, r5, r6, r7, lr}
    8738:	b087      	sub	sp, #28
    873a:	af02      	add	r7, sp, #8
    873c:	60f8      	str	r0, [r7, #12]
    873e:	000c      	movs	r4, r1
    8740:	0010      	movs	r0, r2
    8742:	0019      	movs	r1, r3
    8744:	230a      	movs	r3, #10
    8746:	18fb      	adds	r3, r7, r3
    8748:	1c22      	adds	r2, r4, #0
    874a:	801a      	strh	r2, [r3, #0]
    874c:	2308      	movs	r3, #8
    874e:	18fb      	adds	r3, r7, r3
    8750:	1c02      	adds	r2, r0, #0
    8752:	801a      	strh	r2, [r3, #0]
    8754:	1dbb      	adds	r3, r7, #6
    8756:	1c0a      	adds	r2, r1, #0
    8758:	801a      	strh	r2, [r3, #0]
    startWrite();
    875a:	68fb      	ldr	r3, [r7, #12]
    875c:	681b      	ldr	r3, [r3, #0]
    875e:	3314      	adds	r3, #20
    8760:	681b      	ldr	r3, [r3, #0]
    8762:	68fa      	ldr	r2, [r7, #12]
    8764:	0010      	movs	r0, r2
    8766:	4798      	blx	r3
    writeFillRect(x,y,w,h,color);
    8768:	68fb      	ldr	r3, [r7, #12]
    876a:	681b      	ldr	r3, [r3, #0]
    876c:	331c      	adds	r3, #28
    876e:	681c      	ldr	r4, [r3, #0]
    8770:	1dbb      	adds	r3, r7, #6
    8772:	2500      	movs	r5, #0
    8774:	5f5d      	ldrsh	r5, [r3, r5]
    8776:	2308      	movs	r3, #8
    8778:	18fb      	adds	r3, r7, r3
    877a:	2200      	movs	r2, #0
    877c:	5e9a      	ldrsh	r2, [r3, r2]
    877e:	230a      	movs	r3, #10
    8780:	18fb      	adds	r3, r7, r3
    8782:	2100      	movs	r1, #0
    8784:	5e59      	ldrsh	r1, [r3, r1]
    8786:	68f8      	ldr	r0, [r7, #12]
    8788:	2324      	movs	r3, #36	; 0x24
    878a:	2608      	movs	r6, #8
    878c:	46b4      	mov	ip, r6
    878e:	44bc      	add	ip, r7
    8790:	4463      	add	r3, ip
    8792:	881b      	ldrh	r3, [r3, #0]
    8794:	9301      	str	r3, [sp, #4]
    8796:	2320      	movs	r3, #32
    8798:	2608      	movs	r6, #8
    879a:	46b4      	mov	ip, r6
    879c:	44bc      	add	ip, r7
    879e:	4463      	add	r3, ip
    87a0:	2600      	movs	r6, #0
    87a2:	5f9b      	ldrsh	r3, [r3, r6]
    87a4:	9300      	str	r3, [sp, #0]
    87a6:	002b      	movs	r3, r5
    87a8:	47a0      	blx	r4
    endWrite();
    87aa:	68fb      	ldr	r3, [r7, #12]
    87ac:	681b      	ldr	r3, [r3, #0]
    87ae:	332c      	adds	r3, #44	; 0x2c
    87b0:	681b      	ldr	r3, [r3, #0]
    87b2:	68fa      	ldr	r2, [r7, #12]
    87b4:	0010      	movs	r0, r2
    87b6:	4798      	blx	r3
}
    87b8:	46c0      	nop			; (mov r8, r8)
    87ba:	46bd      	mov	sp, r7
    87bc:	b005      	add	sp, #20
    87be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000087c0 <_ZN5Print13setWriteErrorEi>:
    void setWriteError(int err = 1) { write_error = err; }
    87c0:	b580      	push	{r7, lr}
    87c2:	b082      	sub	sp, #8
    87c4:	af00      	add	r7, sp, #0
    87c6:	6078      	str	r0, [r7, #4]
    87c8:	6039      	str	r1, [r7, #0]
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	683a      	ldr	r2, [r7, #0]
    87ce:	605a      	str	r2, [r3, #4]
    87d0:	46c0      	nop			; (mov r8, r8)
    87d2:	46bd      	mov	sp, r7
    87d4:	b002      	add	sp, #8
    87d6:	bd80      	pop	{r7, pc}

000087d8 <_ZN5Print13getWriteErrorEv>:
    int getWriteError() { return write_error; }
    87d8:	b580      	push	{r7, lr}
    87da:	b082      	sub	sp, #8
    87dc:	af00      	add	r7, sp, #0
    87de:	6078      	str	r0, [r7, #4]
    87e0:	687b      	ldr	r3, [r7, #4]
    87e2:	685b      	ldr	r3, [r3, #4]
    87e4:	0018      	movs	r0, r3
    87e6:	46bd      	mov	sp, r7
    87e8:	b002      	add	sp, #8
    87ea:	bd80      	pop	{r7, pc}

000087ec <_ZN5Print15clearWriteErrorEv>:
    void clearWriteError() { setWriteError(0); }
    87ec:	b580      	push	{r7, lr}
    87ee:	b082      	sub	sp, #8
    87f0:	af00      	add	r7, sp, #0
    87f2:	6078      	str	r0, [r7, #4]
    87f4:	687b      	ldr	r3, [r7, #4]
    87f6:	2100      	movs	r1, #0
    87f8:	0018      	movs	r0, r3
    87fa:	f7ff ffe1 	bl	87c0 <_ZN5Print13setWriteErrorEi>
    87fe:	46c0      	nop			; (mov r8, r8)
    8800:	46bd      	mov	sp, r7
    8802:	b002      	add	sp, #8
    8804:	bd80      	pop	{r7, pc}

00008806 <_ZNK6SdFile11curPositionEv>:
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    8806:	b580      	push	{r7, lr}
    8808:	b082      	sub	sp, #8
    880a:	af00      	add	r7, sp, #0
    880c:	6078      	str	r0, [r7, #4]
    880e:	687b      	ldr	r3, [r7, #4]
    8810:	691b      	ldr	r3, [r3, #16]
    8812:	0018      	movs	r0, r3
    8814:	46bd      	mov	sp, r7
    8816:	b002      	add	sp, #8
    8818:	bd80      	pop	{r7, pc}

0000881a <_ZNK6SdFile8fileSizeEv>:
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    881a:	b580      	push	{r7, lr}
    881c:	b082      	sub	sp, #8
    881e:	af00      	add	r7, sp, #0
    8820:	6078      	str	r0, [r7, #4]
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	69db      	ldr	r3, [r3, #28]
    8826:	0018      	movs	r0, r3
    8828:	46bd      	mov	sp, r7
    882a:	b002      	add	sp, #8
    882c:	bd80      	pop	{r7, pc}

0000882e <_ZNK6SdFile5isDirEv>:
  /** \return The first cluster number for a file or directory. */
  uint32_t firstCluster(void) const {return firstCluster_;}
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    882e:	b580      	push	{r7, lr}
    8830:	b082      	sub	sp, #8
    8832:	af00      	add	r7, sp, #0
    8834:	6078      	str	r0, [r7, #4]
    8836:	687b      	ldr	r3, [r7, #4]
    8838:	7a5b      	ldrb	r3, [r3, #9]
    883a:	2201      	movs	r2, #1
    883c:	2b01      	cmp	r3, #1
    883e:	dc01      	bgt.n	8844 <_ZNK6SdFile5isDirEv+0x16>
    8840:	2300      	movs	r3, #0
    8842:	1c1a      	adds	r2, r3, #0
    8844:	b2d3      	uxtb	r3, r2
    8846:	0018      	movs	r0, r3
    8848:	46bd      	mov	sp, r7
    884a:	b002      	add	sp, #8
    884c:	bd80      	pop	{r7, pc}

0000884e <_ZNK6SdFile6isOpenEv>:
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    884e:	b580      	push	{r7, lr}
    8850:	b082      	sub	sp, #8
    8852:	af00      	add	r7, sp, #0
    8854:	6078      	str	r0, [r7, #4]
    8856:	687b      	ldr	r3, [r7, #4]
    8858:	7a5b      	ldrb	r3, [r3, #9]
    885a:	1e5a      	subs	r2, r3, #1
    885c:	4193      	sbcs	r3, r2
    885e:	b2db      	uxtb	r3, r3
    8860:	0018      	movs	r0, r3
    8862:	46bd      	mov	sp, r7
    8864:	b002      	add	sp, #8
    8866:	bd80      	pop	{r7, pc}

00008868 <_ZN6SdFile4readEv>:
   * Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    8868:	b580      	push	{r7, lr}
    886a:	b084      	sub	sp, #16
    886c:	af00      	add	r7, sp, #0
    886e:	6078      	str	r0, [r7, #4]
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    8870:	230f      	movs	r3, #15
    8872:	18f9      	adds	r1, r7, r3
    8874:	687b      	ldr	r3, [r7, #4]
    8876:	2201      	movs	r2, #1
    8878:	0018      	movs	r0, r3
    887a:	f001 fe7f 	bl	a57c <_ZN6SdFile4readEPvt>
    887e:	0003      	movs	r3, r0
    8880:	2b01      	cmp	r3, #1
    8882:	d104      	bne.n	888e <_ZN6SdFile4readEv+0x26>
    8884:	230f      	movs	r3, #15
    8886:	18fb      	adds	r3, r7, r3
    8888:	781b      	ldrb	r3, [r3, #0]
    888a:	b21b      	sxth	r3, r3
    888c:	e001      	b.n	8892 <_ZN6SdFile4readEv+0x2a>
    888e:	2301      	movs	r3, #1
    8890:	425b      	negs	r3, r3
  }
    8892:	0018      	movs	r0, r3
    8894:	46bd      	mov	sp, r7
    8896:	b004      	add	sp, #16
    8898:	bd80      	pop	{r7, pc}

0000889a <_ZN6SdFile7seekCurEm>:
    curPosition_ = curCluster_ = 0;
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    889a:	b580      	push	{r7, lr}
    889c:	b082      	sub	sp, #8
    889e:	af00      	add	r7, sp, #0
    88a0:	6078      	str	r0, [r7, #4]
    88a2:	6039      	str	r1, [r7, #0]
    return seekSet(curPosition_ + pos);
    88a4:	687b      	ldr	r3, [r7, #4]
    88a6:	691a      	ldr	r2, [r3, #16]
    88a8:	683b      	ldr	r3, [r7, #0]
    88aa:	18d2      	adds	r2, r2, r3
    88ac:	687b      	ldr	r3, [r7, #4]
    88ae:	0011      	movs	r1, r2
    88b0:	0018      	movs	r0, r3
    88b2:	f001 ffc1 	bl	a838 <_ZN6SdFile7seekSetEm>
    88b6:	0003      	movs	r3, r0
  }
    88b8:	0018      	movs	r0, r3
    88ba:	46bd      	mov	sp, r7
    88bc:	b002      	add	sp, #8
    88be:	bd80      	pop	{r7, pc}

000088c0 <_ZN5SDLib4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    88c0:	b580      	push	{r7, lr}
    88c2:	b084      	sub	sp, #16
    88c4:	af00      	add	r7, sp, #0
    88c6:	60f8      	str	r0, [r7, #12]
    88c8:	60b9      	str	r1, [r7, #8]
    88ca:	607a      	str	r2, [r7, #4]
    88cc:	68fb      	ldr	r3, [r7, #12]
    88ce:	0018      	movs	r0, r3
    88d0:	f7fa fec0 	bl	3654 <_ZN6StreamC1Ev>
    88d4:	4a11      	ldr	r2, [pc, #68]	; (891c <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>)
    88d6:	68fb      	ldr	r3, [r7, #12]
    88d8:	601a      	str	r2, [r3, #0]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    88da:	2028      	movs	r0, #40	; 0x28
    88dc:	f007 ff9e 	bl	1081c <malloc>
    88e0:	0003      	movs	r3, r0
    88e2:	001a      	movs	r2, r3
    88e4:	68fb      	ldr	r3, [r7, #12]
    88e6:	621a      	str	r2, [r3, #32]
  if (_file) {
    88e8:	68fb      	ldr	r3, [r7, #12]
    88ea:	6a1b      	ldr	r3, [r3, #32]
    88ec:	2b00      	cmp	r3, #0
    88ee:	d010      	beq.n	8912 <_ZN5SDLib4FileC1E6SdFilePKc+0x52>
    memcpy(_file, &f, sizeof(SdFile));
    88f0:	68fb      	ldr	r3, [r7, #12]
    88f2:	6a1b      	ldr	r3, [r3, #32]
    88f4:	68b9      	ldr	r1, [r7, #8]
    88f6:	2228      	movs	r2, #40	; 0x28
    88f8:	0018      	movs	r0, r3
    88fa:	f007 ffc4 	bl	10886 <memcpy>
    
    strncpy(_name, n, 12);
    88fe:	68fb      	ldr	r3, [r7, #12]
    8900:	3310      	adds	r3, #16
    8902:	6879      	ldr	r1, [r7, #4]
    8904:	220c      	movs	r2, #12
    8906:	0018      	movs	r0, r3
    8908:	f008 fe63 	bl	115d2 <strncpy>
    _name[12] = 0;
    890c:	68fb      	ldr	r3, [r7, #12]
    890e:	2200      	movs	r2, #0
    8910:	771a      	strb	r2, [r3, #28]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    8912:	68fb      	ldr	r3, [r7, #12]
    8914:	0018      	movs	r0, r3
    8916:	46bd      	mov	sp, r7
    8918:	b004      	add	sp, #16
    891a:	bd80      	pop	{r7, pc}
    891c:	00013610 	.word	0x00013610

00008920 <_ZN5SDLib4FileC1Ev>:

File::File(void) {
    8920:	b580      	push	{r7, lr}
    8922:	b082      	sub	sp, #8
    8924:	af00      	add	r7, sp, #0
    8926:	6078      	str	r0, [r7, #4]
    8928:	687b      	ldr	r3, [r7, #4]
    892a:	0018      	movs	r0, r3
    892c:	f7fa fe92 	bl	3654 <_ZN6StreamC1Ev>
    8930:	4a06      	ldr	r2, [pc, #24]	; (894c <_ZN5SDLib4FileC1Ev+0x2c>)
    8932:	687b      	ldr	r3, [r7, #4]
    8934:	601a      	str	r2, [r3, #0]
  _file = 0;
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	2200      	movs	r2, #0
    893a:	621a      	str	r2, [r3, #32]
  _name[0] = 0;
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	2200      	movs	r2, #0
    8940:	741a      	strb	r2, [r3, #16]
  //Serial.print("Created empty file object");
}
    8942:	687b      	ldr	r3, [r7, #4]
    8944:	0018      	movs	r0, r3
    8946:	46bd      	mov	sp, r7
    8948:	b002      	add	sp, #8
    894a:	bd80      	pop	{r7, pc}
    894c:	00013610 	.word	0x00013610

00008950 <_ZN5SDLib4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    8950:	b580      	push	{r7, lr}
    8952:	b082      	sub	sp, #8
    8954:	af00      	add	r7, sp, #0
    8956:	6078      	str	r0, [r7, #4]
    8958:	000a      	movs	r2, r1
    895a:	1cfb      	adds	r3, r7, #3
    895c:	701a      	strb	r2, [r3, #0]
  return write(&val, 1);
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	681b      	ldr	r3, [r3, #0]
    8962:	3304      	adds	r3, #4
    8964:	681b      	ldr	r3, [r3, #0]
    8966:	1cf9      	adds	r1, r7, #3
    8968:	6878      	ldr	r0, [r7, #4]
    896a:	2201      	movs	r2, #1
    896c:	4798      	blx	r3
    896e:	0003      	movs	r3, r0
}
    8970:	0018      	movs	r0, r3
    8972:	46bd      	mov	sp, r7
    8974:	b002      	add	sp, #8
    8976:	bd80      	pop	{r7, pc}

00008978 <_ZN5SDLib4File5writeEPKhj>:

size_t File::write(const uint8_t *buf, size_t size) {
    8978:	b580      	push	{r7, lr}
    897a:	b086      	sub	sp, #24
    897c:	af00      	add	r7, sp, #0
    897e:	60f8      	str	r0, [r7, #12]
    8980:	60b9      	str	r1, [r7, #8]
    8982:	607a      	str	r2, [r7, #4]
  size_t t;
  if (!_file) {
    8984:	68fb      	ldr	r3, [r7, #12]
    8986:	6a1b      	ldr	r3, [r3, #32]
    8988:	2b00      	cmp	r3, #0
    898a:	d106      	bne.n	899a <_ZN5SDLib4File5writeEPKhj+0x22>
    setWriteError();
    898c:	68fb      	ldr	r3, [r7, #12]
    898e:	2101      	movs	r1, #1
    8990:	0018      	movs	r0, r3
    8992:	f7ff ff15 	bl	87c0 <_ZN5Print13setWriteErrorEi>
    return 0;
    8996:	2300      	movs	r3, #0
    8998:	e021      	b.n	89de <_ZN5SDLib4File5writeEPKhj+0x66>
  }
  _file->clearWriteError();
    899a:	68fb      	ldr	r3, [r7, #12]
    899c:	6a1b      	ldr	r3, [r3, #32]
    899e:	0018      	movs	r0, r3
    89a0:	f7ff ff24 	bl	87ec <_ZN5Print15clearWriteErrorEv>
  t = _file->write(buf, size);
    89a4:	68fb      	ldr	r3, [r7, #12]
    89a6:	6a1b      	ldr	r3, [r3, #32]
    89a8:	687a      	ldr	r2, [r7, #4]
    89aa:	b292      	uxth	r2, r2
    89ac:	68b9      	ldr	r1, [r7, #8]
    89ae:	0018      	movs	r0, r3
    89b0:	f002 f924 	bl	abfc <_ZN6SdFile5writeEPKvt>
    89b4:	0003      	movs	r3, r0
    89b6:	617b      	str	r3, [r7, #20]
  if (_file->getWriteError()) {
    89b8:	68fb      	ldr	r3, [r7, #12]
    89ba:	6a1b      	ldr	r3, [r3, #32]
    89bc:	0018      	movs	r0, r3
    89be:	f7ff ff0b 	bl	87d8 <_ZN5Print13getWriteErrorEv>
    89c2:	0003      	movs	r3, r0
    89c4:	1e5a      	subs	r2, r3, #1
    89c6:	4193      	sbcs	r3, r2
    89c8:	b2db      	uxtb	r3, r3
    89ca:	2b00      	cmp	r3, #0
    89cc:	d006      	beq.n	89dc <_ZN5SDLib4File5writeEPKhj+0x64>
    setWriteError();
    89ce:	68fb      	ldr	r3, [r7, #12]
    89d0:	2101      	movs	r1, #1
    89d2:	0018      	movs	r0, r3
    89d4:	f7ff fef4 	bl	87c0 <_ZN5Print13setWriteErrorEi>
    return 0;
    89d8:	2300      	movs	r3, #0
    89da:	e000      	b.n	89de <_ZN5SDLib4File5writeEPKhj+0x66>
  }
  return t;
    89dc:	697b      	ldr	r3, [r7, #20]
}
    89de:	0018      	movs	r0, r3
    89e0:	46bd      	mov	sp, r7
    89e2:	b006      	add	sp, #24
    89e4:	bd80      	pop	{r7, pc}

000089e6 <_ZN5SDLib4File4peekEv>:

int File::peek() {
    89e6:	b580      	push	{r7, lr}
    89e8:	b084      	sub	sp, #16
    89ea:	af00      	add	r7, sp, #0
    89ec:	6078      	str	r0, [r7, #4]
  if (! _file) 
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	6a1b      	ldr	r3, [r3, #32]
    89f2:	2b00      	cmp	r3, #0
    89f4:	d101      	bne.n	89fa <_ZN5SDLib4File4peekEv+0x14>
    return 0;
    89f6:	2300      	movs	r3, #0
    89f8:	e012      	b.n	8a20 <_ZN5SDLib4File4peekEv+0x3a>

  int c = _file->read();
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	6a1b      	ldr	r3, [r3, #32]
    89fe:	0018      	movs	r0, r3
    8a00:	f7ff ff32 	bl	8868 <_ZN6SdFile4readEv>
    8a04:	0003      	movs	r3, r0
    8a06:	60fb      	str	r3, [r7, #12]
  if (c != -1) _file->seekCur(-1);
    8a08:	68fb      	ldr	r3, [r7, #12]
    8a0a:	3301      	adds	r3, #1
    8a0c:	d007      	beq.n	8a1e <_ZN5SDLib4File4peekEv+0x38>
    8a0e:	687b      	ldr	r3, [r7, #4]
    8a10:	6a1a      	ldr	r2, [r3, #32]
    8a12:	2301      	movs	r3, #1
    8a14:	425b      	negs	r3, r3
    8a16:	0019      	movs	r1, r3
    8a18:	0010      	movs	r0, r2
    8a1a:	f7ff ff3e 	bl	889a <_ZN6SdFile7seekCurEm>
  return c;
    8a1e:	68fb      	ldr	r3, [r7, #12]
}
    8a20:	0018      	movs	r0, r3
    8a22:	46bd      	mov	sp, r7
    8a24:	b004      	add	sp, #16
    8a26:	bd80      	pop	{r7, pc}

00008a28 <_ZN5SDLib4File4readEv>:

int File::read() {
    8a28:	b580      	push	{r7, lr}
    8a2a:	b082      	sub	sp, #8
    8a2c:	af00      	add	r7, sp, #0
    8a2e:	6078      	str	r0, [r7, #4]
  if (_file) 
    8a30:	687b      	ldr	r3, [r7, #4]
    8a32:	6a1b      	ldr	r3, [r3, #32]
    8a34:	2b00      	cmp	r3, #0
    8a36:	d006      	beq.n	8a46 <_ZN5SDLib4File4readEv+0x1e>
    return _file->read();
    8a38:	687b      	ldr	r3, [r7, #4]
    8a3a:	6a1b      	ldr	r3, [r3, #32]
    8a3c:	0018      	movs	r0, r3
    8a3e:	f7ff ff13 	bl	8868 <_ZN6SdFile4readEv>
    8a42:	0003      	movs	r3, r0
    8a44:	e001      	b.n	8a4a <_ZN5SDLib4File4readEv+0x22>
  return -1;
    8a46:	2301      	movs	r3, #1
    8a48:	425b      	negs	r3, r3
}
    8a4a:	0018      	movs	r0, r3
    8a4c:	46bd      	mov	sp, r7
    8a4e:	b002      	add	sp, #8
    8a50:	bd80      	pop	{r7, pc}

00008a52 <_ZN5SDLib4File4readEPvt>:

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
    8a52:	b580      	push	{r7, lr}
    8a54:	b084      	sub	sp, #16
    8a56:	af00      	add	r7, sp, #0
    8a58:	60f8      	str	r0, [r7, #12]
    8a5a:	60b9      	str	r1, [r7, #8]
    8a5c:	1dbb      	adds	r3, r7, #6
    8a5e:	801a      	strh	r2, [r3, #0]
  if (_file) 
    8a60:	68fb      	ldr	r3, [r7, #12]
    8a62:	6a1b      	ldr	r3, [r3, #32]
    8a64:	2b00      	cmp	r3, #0
    8a66:	d009      	beq.n	8a7c <_ZN5SDLib4File4readEPvt+0x2a>
    return _file->read(buf, nbyte);
    8a68:	68fb      	ldr	r3, [r7, #12]
    8a6a:	6a18      	ldr	r0, [r3, #32]
    8a6c:	1dbb      	adds	r3, r7, #6
    8a6e:	881a      	ldrh	r2, [r3, #0]
    8a70:	68bb      	ldr	r3, [r7, #8]
    8a72:	0019      	movs	r1, r3
    8a74:	f001 fd82 	bl	a57c <_ZN6SdFile4readEPvt>
    8a78:	0003      	movs	r3, r0
    8a7a:	e000      	b.n	8a7e <_ZN5SDLib4File4readEPvt+0x2c>
  return 0;
    8a7c:	2300      	movs	r3, #0
}
    8a7e:	0018      	movs	r0, r3
    8a80:	46bd      	mov	sp, r7
    8a82:	b004      	add	sp, #16
    8a84:	bd80      	pop	{r7, pc}
	...

00008a88 <_ZN5SDLib4File9availableEv>:

int File::available() {
    8a88:	b590      	push	{r4, r7, lr}
    8a8a:	b085      	sub	sp, #20
    8a8c:	af00      	add	r7, sp, #0
    8a8e:	6078      	str	r0, [r7, #4]
  if (! _file) return 0;
    8a90:	687b      	ldr	r3, [r7, #4]
    8a92:	6a1b      	ldr	r3, [r3, #32]
    8a94:	2b00      	cmp	r3, #0
    8a96:	d101      	bne.n	8a9c <_ZN5SDLib4File9availableEv+0x14>
    8a98:	2300      	movs	r3, #0
    8a9a:	e010      	b.n	8abe <_ZN5SDLib4File9availableEv+0x36>

  uint32_t n = size() - position();
    8a9c:	687b      	ldr	r3, [r7, #4]
    8a9e:	0018      	movs	r0, r3
    8aa0:	f000 f854 	bl	8b4c <_ZN5SDLib4File4sizeEv>
    8aa4:	0004      	movs	r4, r0
    8aa6:	687b      	ldr	r3, [r7, #4]
    8aa8:	0018      	movs	r0, r3
    8aaa:	f000 f83a 	bl	8b22 <_ZN5SDLib4File8positionEv>
    8aae:	0003      	movs	r3, r0
    8ab0:	1ae3      	subs	r3, r4, r3
    8ab2:	60fb      	str	r3, [r7, #12]

  return n > 0X7FFF ? 0X7FFF : n;
    8ab4:	68fb      	ldr	r3, [r7, #12]
    8ab6:	4a04      	ldr	r2, [pc, #16]	; (8ac8 <_ZN5SDLib4File9availableEv+0x40>)
    8ab8:	4293      	cmp	r3, r2
    8aba:	d900      	bls.n	8abe <_ZN5SDLib4File9availableEv+0x36>
    8abc:	4b02      	ldr	r3, [pc, #8]	; (8ac8 <_ZN5SDLib4File9availableEv+0x40>)
}
    8abe:	0018      	movs	r0, r3
    8ac0:	46bd      	mov	sp, r7
    8ac2:	b005      	add	sp, #20
    8ac4:	bd90      	pop	{r4, r7, pc}
    8ac6:	46c0      	nop			; (mov r8, r8)
    8ac8:	00007fff 	.word	0x00007fff

00008acc <_ZN5SDLib4File5flushEv>:

void File::flush() {
    8acc:	b580      	push	{r7, lr}
    8ace:	b082      	sub	sp, #8
    8ad0:	af00      	add	r7, sp, #0
    8ad2:	6078      	str	r0, [r7, #4]
  if (_file)
    8ad4:	687b      	ldr	r3, [r7, #4]
    8ad6:	6a1b      	ldr	r3, [r3, #32]
    8ad8:	2b00      	cmp	r3, #0
    8ada:	d004      	beq.n	8ae6 <_ZN5SDLib4File5flushEv+0x1a>
    _file->sync();
    8adc:	687b      	ldr	r3, [r7, #4]
    8ade:	6a1b      	ldr	r3, [r3, #32]
    8ae0:	0018      	movs	r0, r3
    8ae2:	f001 ff19 	bl	a918 <_ZN6SdFile4syncEv>
}
    8ae6:	46c0      	nop			; (mov r8, r8)
    8ae8:	46bd      	mov	sp, r7
    8aea:	b002      	add	sp, #8
    8aec:	bd80      	pop	{r7, pc}

00008aee <_ZN5SDLib4File4seekEm>:

boolean File::seek(uint32_t pos) {
    8aee:	b580      	push	{r7, lr}
    8af0:	b082      	sub	sp, #8
    8af2:	af00      	add	r7, sp, #0
    8af4:	6078      	str	r0, [r7, #4]
    8af6:	6039      	str	r1, [r7, #0]
  if (! _file) return false;
    8af8:	687b      	ldr	r3, [r7, #4]
    8afa:	6a1b      	ldr	r3, [r3, #32]
    8afc:	2b00      	cmp	r3, #0
    8afe:	d101      	bne.n	8b04 <_ZN5SDLib4File4seekEm+0x16>
    8b00:	2300      	movs	r3, #0
    8b02:	e00a      	b.n	8b1a <_ZN5SDLib4File4seekEm+0x2c>

  return _file->seekSet(pos);
    8b04:	687b      	ldr	r3, [r7, #4]
    8b06:	6a1b      	ldr	r3, [r3, #32]
    8b08:	683a      	ldr	r2, [r7, #0]
    8b0a:	0011      	movs	r1, r2
    8b0c:	0018      	movs	r0, r3
    8b0e:	f001 fe93 	bl	a838 <_ZN6SdFile7seekSetEm>
    8b12:	0003      	movs	r3, r0
    8b14:	1e5a      	subs	r2, r3, #1
    8b16:	4193      	sbcs	r3, r2
    8b18:	b2db      	uxtb	r3, r3
}
    8b1a:	0018      	movs	r0, r3
    8b1c:	46bd      	mov	sp, r7
    8b1e:	b002      	add	sp, #8
    8b20:	bd80      	pop	{r7, pc}

00008b22 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
    8b22:	b580      	push	{r7, lr}
    8b24:	b082      	sub	sp, #8
    8b26:	af00      	add	r7, sp, #0
    8b28:	6078      	str	r0, [r7, #4]
  if (! _file) return -1;
    8b2a:	687b      	ldr	r3, [r7, #4]
    8b2c:	6a1b      	ldr	r3, [r3, #32]
    8b2e:	2b00      	cmp	r3, #0
    8b30:	d102      	bne.n	8b38 <_ZN5SDLib4File8positionEv+0x16>
    8b32:	2301      	movs	r3, #1
    8b34:	425b      	negs	r3, r3
    8b36:	e005      	b.n	8b44 <_ZN5SDLib4File8positionEv+0x22>
  return _file->curPosition();
    8b38:	687b      	ldr	r3, [r7, #4]
    8b3a:	6a1b      	ldr	r3, [r3, #32]
    8b3c:	0018      	movs	r0, r3
    8b3e:	f7ff fe62 	bl	8806 <_ZNK6SdFile11curPositionEv>
    8b42:	0003      	movs	r3, r0
}
    8b44:	0018      	movs	r0, r3
    8b46:	46bd      	mov	sp, r7
    8b48:	b002      	add	sp, #8
    8b4a:	bd80      	pop	{r7, pc}

00008b4c <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
    8b4c:	b580      	push	{r7, lr}
    8b4e:	b082      	sub	sp, #8
    8b50:	af00      	add	r7, sp, #0
    8b52:	6078      	str	r0, [r7, #4]
  if (! _file) return 0;
    8b54:	687b      	ldr	r3, [r7, #4]
    8b56:	6a1b      	ldr	r3, [r3, #32]
    8b58:	2b00      	cmp	r3, #0
    8b5a:	d101      	bne.n	8b60 <_ZN5SDLib4File4sizeEv+0x14>
    8b5c:	2300      	movs	r3, #0
    8b5e:	e005      	b.n	8b6c <_ZN5SDLib4File4sizeEv+0x20>
  return _file->fileSize();
    8b60:	687b      	ldr	r3, [r7, #4]
    8b62:	6a1b      	ldr	r3, [r3, #32]
    8b64:	0018      	movs	r0, r3
    8b66:	f7ff fe58 	bl	881a <_ZNK6SdFile8fileSizeEv>
    8b6a:	0003      	movs	r3, r0
}
    8b6c:	0018      	movs	r0, r3
    8b6e:	46bd      	mov	sp, r7
    8b70:	b002      	add	sp, #8
    8b72:	bd80      	pop	{r7, pc}

00008b74 <_ZN5SDLib4File5closeEv>:

void File::close() {
    8b74:	b580      	push	{r7, lr}
    8b76:	b082      	sub	sp, #8
    8b78:	af00      	add	r7, sp, #0
    8b7a:	6078      	str	r0, [r7, #4]
  if (_file) {
    8b7c:	687b      	ldr	r3, [r7, #4]
    8b7e:	6a1b      	ldr	r3, [r3, #32]
    8b80:	2b00      	cmp	r3, #0
    8b82:	d00c      	beq.n	8b9e <_ZN5SDLib4File5closeEv+0x2a>
    _file->close();
    8b84:	687b      	ldr	r3, [r7, #4]
    8b86:	6a1b      	ldr	r3, [r3, #32]
    8b88:	0018      	movs	r0, r3
    8b8a:	f001 f9d5 	bl	9f38 <_ZN6SdFile5closeEv>
    free(_file); 
    8b8e:	687b      	ldr	r3, [r7, #4]
    8b90:	6a1b      	ldr	r3, [r3, #32]
    8b92:	0018      	movs	r0, r3
    8b94:	f007 fe4c 	bl	10830 <free>
    _file = 0;
    8b98:	687b      	ldr	r3, [r7, #4]
    8b9a:	2200      	movs	r2, #0
    8b9c:	621a      	str	r2, [r3, #32]
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    8b9e:	46c0      	nop			; (mov r8, r8)
    8ba0:	46bd      	mov	sp, r7
    8ba2:	b002      	add	sp, #8
    8ba4:	bd80      	pop	{r7, pc}

00008ba6 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
    8ba6:	b580      	push	{r7, lr}
    8ba8:	b082      	sub	sp, #8
    8baa:	af00      	add	r7, sp, #0
    8bac:	6078      	str	r0, [r7, #4]
  if (_file) 
    8bae:	687b      	ldr	r3, [r7, #4]
    8bb0:	6a1b      	ldr	r3, [r3, #32]
    8bb2:	2b00      	cmp	r3, #0
    8bb4:	d009      	beq.n	8bca <_ZN5SDLib4FilecvbEv+0x24>
    return  _file->isOpen();
    8bb6:	687b      	ldr	r3, [r7, #4]
    8bb8:	6a1b      	ldr	r3, [r3, #32]
    8bba:	0018      	movs	r0, r3
    8bbc:	f7ff fe47 	bl	884e <_ZNK6SdFile6isOpenEv>
    8bc0:	0003      	movs	r3, r0
    8bc2:	1e5a      	subs	r2, r3, #1
    8bc4:	4193      	sbcs	r3, r2
    8bc6:	b2db      	uxtb	r3, r3
    8bc8:	e000      	b.n	8bcc <_ZN5SDLib4FilecvbEv+0x26>
  return false;
    8bca:	2300      	movs	r3, #0
}
    8bcc:	0018      	movs	r0, r3
    8bce:	46bd      	mov	sp, r7
    8bd0:	b002      	add	sp, #8
    8bd2:	bd80      	pop	{r7, pc}

00008bd4 <_ZN7Sd2CardC1Ev>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    8bd4:	b580      	push	{r7, lr}
    8bd6:	b082      	sub	sp, #8
    8bd8:	af00      	add	r7, sp, #0
    8bda:	6078      	str	r0, [r7, #4]
    8bdc:	687b      	ldr	r3, [r7, #4]
    8bde:	2200      	movs	r2, #0
    8be0:	715a      	strb	r2, [r3, #5]
    8be2:	687b      	ldr	r3, [r7, #4]
    8be4:	2200      	movs	r2, #0
    8be6:	719a      	strb	r2, [r3, #6]
    8be8:	687b      	ldr	r3, [r7, #4]
    8bea:	2200      	movs	r2, #0
    8bec:	729a      	strb	r2, [r3, #10]
    8bee:	687b      	ldr	r3, [r7, #4]
    8bf0:	2200      	movs	r2, #0
    8bf2:	731a      	strb	r2, [r3, #12]
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	0018      	movs	r0, r3
    8bf8:	46bd      	mov	sp, r7
    8bfa:	b002      	add	sp, #8
    8bfc:	bd80      	pop	{r7, pc}
	...

00008c00 <_ZN6SdFileC1Ev>:
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    8c00:	b580      	push	{r7, lr}
    8c02:	b082      	sub	sp, #8
    8c04:	af00      	add	r7, sp, #0
    8c06:	6078      	str	r0, [r7, #4]
    8c08:	687b      	ldr	r3, [r7, #4]
    8c0a:	0018      	movs	r0, r3
    8c0c:	f7fa fd10 	bl	3630 <_ZN5PrintC1Ev>
    8c10:	4a05      	ldr	r2, [pc, #20]	; (8c28 <_ZN6SdFileC1Ev+0x28>)
    8c12:	687b      	ldr	r3, [r7, #4]
    8c14:	601a      	str	r2, [r3, #0]
    8c16:	687b      	ldr	r3, [r7, #4]
    8c18:	2200      	movs	r2, #0
    8c1a:	725a      	strb	r2, [r3, #9]
    8c1c:	687b      	ldr	r3, [r7, #4]
    8c1e:	0018      	movs	r0, r3
    8c20:	46bd      	mov	sp, r7
    8c22:	b002      	add	sp, #8
    8c24:	bd80      	pop	{r7, pc}
    8c26:	46c0      	nop			; (mov r8, r8)
    8c28:	00013660 	.word	0x00013660

00008c2c <_ZN6SdFile6rewindEv>:
  void rewind(void) {
    8c2c:	b580      	push	{r7, lr}
    8c2e:	b082      	sub	sp, #8
    8c30:	af00      	add	r7, sp, #0
    8c32:	6078      	str	r0, [r7, #4]
    curPosition_ = curCluster_ = 0;
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	2200      	movs	r2, #0
    8c38:	60da      	str	r2, [r3, #12]
    8c3a:	687b      	ldr	r3, [r7, #4]
    8c3c:	68da      	ldr	r2, [r3, #12]
    8c3e:	687b      	ldr	r3, [r7, #4]
    8c40:	611a      	str	r2, [r3, #16]
  }
    8c42:	46c0      	nop			; (mov r8, r8)
    8c44:	46bd      	mov	sp, r7
    8c46:	b002      	add	sp, #8
    8c48:	bd80      	pop	{r7, pc}

00008c4a <_ZN6SdFile4openERS_PKch>:
    return makeDir(&dir, dirName);
  }
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    8c4a:	b580      	push	{r7, lr}
    8c4c:	b084      	sub	sp, #16
    8c4e:	af00      	add	r7, sp, #0
    8c50:	60f8      	str	r0, [r7, #12]
    8c52:	60b9      	str	r1, [r7, #8]
    8c54:	607a      	str	r2, [r7, #4]
    8c56:	001a      	movs	r2, r3
    8c58:	1cfb      	adds	r3, r7, #3
    8c5a:	701a      	strb	r2, [r3, #0]
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    8c5c:	1cfb      	adds	r3, r7, #3
    8c5e:	781b      	ldrb	r3, [r3, #0]
    8c60:	687a      	ldr	r2, [r7, #4]
    8c62:	68b9      	ldr	r1, [r7, #8]
    8c64:	68f8      	ldr	r0, [r7, #12]
    8c66:	f001 fa29 	bl	a0bc <_ZN6SdFile4openEPS_PKch>
    8c6a:	0003      	movs	r3, r0
  }
    8c6c:	0018      	movs	r0, r3
    8c6e:	46bd      	mov	sp, r7
    8c70:	b004      	add	sp, #16
    8c72:	bd80      	pop	{r7, pc}

00008c74 <_ZN6SdFile8openRootER8SdVolume>:
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    8c74:	b580      	push	{r7, lr}
    8c76:	b082      	sub	sp, #8
    8c78:	af00      	add	r7, sp, #0
    8c7a:	6078      	str	r0, [r7, #4]
    8c7c:	6039      	str	r1, [r7, #0]
    8c7e:	683a      	ldr	r2, [r7, #0]
    8c80:	687b      	ldr	r3, [r7, #4]
    8c82:	0011      	movs	r1, r2
    8c84:	0018      	movs	r0, r3
    8c86:	f001 fc0f 	bl	a4a8 <_ZN6SdFile8openRootEP8SdVolume>
    8c8a:	0003      	movs	r3, r0
    8c8c:	0018      	movs	r0, r3
    8c8e:	46bd      	mov	sp, r7
    8c90:	b002      	add	sp, #8
    8c92:	bd80      	pop	{r7, pc}

00008c94 <_ZN8SdVolumeC1Ev>:
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    8c94:	b580      	push	{r7, lr}
    8c96:	b082      	sub	sp, #8
    8c98:	af00      	add	r7, sp, #0
    8c9a:	6078      	str	r0, [r7, #4]
    8c9c:	687b      	ldr	r3, [r7, #4]
    8c9e:	2202      	movs	r2, #2
    8ca0:	601a      	str	r2, [r3, #0]
    8ca2:	687b      	ldr	r3, [r7, #4]
    8ca4:	2220      	movs	r2, #32
    8ca6:	2100      	movs	r1, #0
    8ca8:	5499      	strb	r1, [r3, r2]
    8caa:	687b      	ldr	r3, [r7, #4]
    8cac:	0018      	movs	r0, r3
    8cae:	46bd      	mov	sp, r7
    8cb0:	b002      	add	sp, #8
    8cb2:	bd80      	pop	{r7, pc}

00008cb4 <_ZN8SdVolume4initEP7Sd2Card>:
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    8cb4:	b580      	push	{r7, lr}
    8cb6:	b082      	sub	sp, #8
    8cb8:	af00      	add	r7, sp, #0
    8cba:	6078      	str	r0, [r7, #4]
    8cbc:	6039      	str	r1, [r7, #0]
    8cbe:	6839      	ldr	r1, [r7, #0]
    8cc0:	687b      	ldr	r3, [r7, #4]
    8cc2:	2201      	movs	r2, #1
    8cc4:	0018      	movs	r0, r3
    8cc6:	f002 fbb1 	bl	b42c <_ZN8SdVolume4initEP7Sd2Cardh>
    8cca:	1e03      	subs	r3, r0, #0
    8ccc:	d107      	bne.n	8cde <_ZN8SdVolume4initEP7Sd2Card+0x2a>
    8cce:	6839      	ldr	r1, [r7, #0]
    8cd0:	687b      	ldr	r3, [r7, #4]
    8cd2:	2200      	movs	r2, #0
    8cd4:	0018      	movs	r0, r3
    8cd6:	f002 fba9 	bl	b42c <_ZN8SdVolume4initEP7Sd2Cardh>
    8cda:	0003      	movs	r3, r0
    8cdc:	e000      	b.n	8ce0 <_ZN8SdVolume4initEP7Sd2Card+0x2c>
    8cde:	2301      	movs	r3, #1
    8ce0:	0018      	movs	r0, r3
    8ce2:	46bd      	mov	sp, r7
    8ce4:	b002      	add	sp, #8
    8ce6:	bd80      	pop	{r7, pc}

00008ce8 <_ZN8SdVolume4initER7Sd2Card>:
  static Sd2Card* sdCard(void) {return sdCard_;}
//------------------------------------------------------------------------------
#if ALLOW_DEPRECATED_FUNCTIONS
  // Deprecated functions  - suppress cpplint warnings with NOLINT comment
  /** \deprecated Use: uint8_t SdVolume::init(Sd2Card* dev); */
  uint8_t init(Sd2Card& dev) {return init(&dev);}  // NOLINT
    8ce8:	b580      	push	{r7, lr}
    8cea:	b082      	sub	sp, #8
    8cec:	af00      	add	r7, sp, #0
    8cee:	6078      	str	r0, [r7, #4]
    8cf0:	6039      	str	r1, [r7, #0]
    8cf2:	683a      	ldr	r2, [r7, #0]
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	0011      	movs	r1, r2
    8cf8:	0018      	movs	r0, r3
    8cfa:	f7ff ffdb 	bl	8cb4 <_ZN8SdVolume4initEP7Sd2Card>
    8cfe:	0003      	movs	r3, r0
    8d00:	0018      	movs	r0, r3
    8d02:	46bd      	mov	sp, r7
    8d04:	b002      	add	sp, #8
    8d06:	bd80      	pop	{r7, pc}

00008d08 <_ZN5SDLib7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    8d08:	b580      	push	{r7, lr}
    8d0a:	b082      	sub	sp, #8
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	6078      	str	r0, [r7, #4]
    8d10:	000a      	movs	r2, r1
    8d12:	1cfb      	adds	r3, r7, #3
    8d14:	701a      	strb	r2, [r3, #0]
  if(root.isOpen()) root.close();
    8d16:	687b      	ldr	r3, [r7, #4]
    8d18:	3338      	adds	r3, #56	; 0x38
    8d1a:	0018      	movs	r0, r3
    8d1c:	f7ff fd97 	bl	884e <_ZNK6SdFile6isOpenEv>
    8d20:	0003      	movs	r3, r0
    8d22:	1e5a      	subs	r2, r3, #1
    8d24:	4193      	sbcs	r3, r2
    8d26:	b2db      	uxtb	r3, r3
    8d28:	2b00      	cmp	r3, #0
    8d2a:	d004      	beq.n	8d36 <_ZN5SDLib7SDClass5beginEh+0x2e>
    8d2c:	687b      	ldr	r3, [r7, #4]
    8d2e:	3338      	adds	r3, #56	; 0x38
    8d30:	0018      	movs	r0, r3
    8d32:	f001 f901 	bl	9f38 <_ZN6SdFile5closeEv>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    8d36:	6878      	ldr	r0, [r7, #4]
    8d38:	1cfb      	adds	r3, r7, #3
    8d3a:	781b      	ldrb	r3, [r3, #0]
    8d3c:	001a      	movs	r2, r3
    8d3e:	2101      	movs	r1, #1
    8d40:	f000 fb46 	bl	93d0 <_ZN7Sd2Card4initEhh>
    8d44:	1e03      	subs	r3, r0, #0
         volume.init(card) &&
    8d46:	d015      	beq.n	8d74 <_ZN5SDLib7SDClass5beginEh+0x6c>
    8d48:	687b      	ldr	r3, [r7, #4]
    8d4a:	3310      	adds	r3, #16
    8d4c:	687a      	ldr	r2, [r7, #4]
    8d4e:	0011      	movs	r1, r2
    8d50:	0018      	movs	r0, r3
    8d52:	f7ff ffc9 	bl	8ce8 <_ZN8SdVolume4initER7Sd2Card>
    8d56:	1e03      	subs	r3, r0, #0
  return card.init(SPI_HALF_SPEED, csPin) &&
    8d58:	d00c      	beq.n	8d74 <_ZN5SDLib7SDClass5beginEh+0x6c>
         root.openRoot(volume);
    8d5a:	687b      	ldr	r3, [r7, #4]
    8d5c:	3338      	adds	r3, #56	; 0x38
    8d5e:	001a      	movs	r2, r3
    8d60:	687b      	ldr	r3, [r7, #4]
    8d62:	3310      	adds	r3, #16
    8d64:	0019      	movs	r1, r3
    8d66:	0010      	movs	r0, r2
    8d68:	f7ff ff84 	bl	8c74 <_ZN6SdFile8openRootER8SdVolume>
    8d6c:	1e03      	subs	r3, r0, #0
         volume.init(card) &&
    8d6e:	d001      	beq.n	8d74 <_ZN5SDLib7SDClass5beginEh+0x6c>
    8d70:	2301      	movs	r3, #1
    8d72:	e000      	b.n	8d76 <_ZN5SDLib7SDClass5beginEh+0x6e>
    8d74:	2300      	movs	r3, #0
}
    8d76:	0018      	movs	r0, r3
    8d78:	46bd      	mov	sp, r7
    8d7a:	b002      	add	sp, #8
    8d7c:	bd80      	pop	{r7, pc}
	...

00008d80 <_ZN5PrintC1ERKS_>:
class Print
    8d80:	b580      	push	{r7, lr}
    8d82:	b082      	sub	sp, #8
    8d84:	af00      	add	r7, sp, #0
    8d86:	6078      	str	r0, [r7, #4]
    8d88:	6039      	str	r1, [r7, #0]
    8d8a:	4a06      	ldr	r2, [pc, #24]	; (8da4 <_ZN5PrintC1ERKS_+0x24>)
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	601a      	str	r2, [r3, #0]
    8d90:	683b      	ldr	r3, [r7, #0]
    8d92:	685a      	ldr	r2, [r3, #4]
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	605a      	str	r2, [r3, #4]
    8d98:	687b      	ldr	r3, [r7, #4]
    8d9a:	0018      	movs	r0, r3
    8d9c:	46bd      	mov	sp, r7
    8d9e:	b002      	add	sp, #8
    8da0:	bd80      	pop	{r7, pc}
    8da2:	46c0      	nop			; (mov r8, r8)
    8da4:	00013418 	.word	0x00013418

00008da8 <_ZN6SdFileC1ERKS_>:
class SdFile : public Print {
    8da8:	b580      	push	{r7, lr}
    8daa:	b082      	sub	sp, #8
    8dac:	af00      	add	r7, sp, #0
    8dae:	6078      	str	r0, [r7, #4]
    8db0:	6039      	str	r1, [r7, #0]
    8db2:	687b      	ldr	r3, [r7, #4]
    8db4:	683a      	ldr	r2, [r7, #0]
    8db6:	0011      	movs	r1, r2
    8db8:	0018      	movs	r0, r3
    8dba:	f7ff ffe1 	bl	8d80 <_ZN5PrintC1ERKS_>
    8dbe:	4a16      	ldr	r2, [pc, #88]	; (8e18 <_ZN6SdFileC1ERKS_+0x70>)
    8dc0:	687b      	ldr	r3, [r7, #4]
    8dc2:	601a      	str	r2, [r3, #0]
    8dc4:	683b      	ldr	r3, [r7, #0]
    8dc6:	7a1a      	ldrb	r2, [r3, #8]
    8dc8:	687b      	ldr	r3, [r7, #4]
    8dca:	721a      	strb	r2, [r3, #8]
    8dcc:	683b      	ldr	r3, [r7, #0]
    8dce:	7a5a      	ldrb	r2, [r3, #9]
    8dd0:	687b      	ldr	r3, [r7, #4]
    8dd2:	725a      	strb	r2, [r3, #9]
    8dd4:	683b      	ldr	r3, [r7, #0]
    8dd6:	68da      	ldr	r2, [r3, #12]
    8dd8:	687b      	ldr	r3, [r7, #4]
    8dda:	60da      	str	r2, [r3, #12]
    8ddc:	683b      	ldr	r3, [r7, #0]
    8dde:	691a      	ldr	r2, [r3, #16]
    8de0:	687b      	ldr	r3, [r7, #4]
    8de2:	611a      	str	r2, [r3, #16]
    8de4:	683b      	ldr	r3, [r7, #0]
    8de6:	695a      	ldr	r2, [r3, #20]
    8de8:	687b      	ldr	r3, [r7, #4]
    8dea:	615a      	str	r2, [r3, #20]
    8dec:	683b      	ldr	r3, [r7, #0]
    8dee:	7e1a      	ldrb	r2, [r3, #24]
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	761a      	strb	r2, [r3, #24]
    8df4:	683b      	ldr	r3, [r7, #0]
    8df6:	69da      	ldr	r2, [r3, #28]
    8df8:	687b      	ldr	r3, [r7, #4]
    8dfa:	61da      	str	r2, [r3, #28]
    8dfc:	683b      	ldr	r3, [r7, #0]
    8dfe:	6a1a      	ldr	r2, [r3, #32]
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	621a      	str	r2, [r3, #32]
    8e04:	683b      	ldr	r3, [r7, #0]
    8e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8e08:	687b      	ldr	r3, [r7, #4]
    8e0a:	625a      	str	r2, [r3, #36]	; 0x24
    8e0c:	687b      	ldr	r3, [r7, #4]
    8e0e:	0018      	movs	r0, r3
    8e10:	46bd      	mov	sp, r7
    8e12:	b002      	add	sp, #8
    8e14:	bd80      	pop	{r7, pc}
    8e16:	46c0      	nop			; (mov r8, r8)
    8e18:	00013660 	.word	0x00013660

00008e1c <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
{
  root.close();
}

// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    8e1c:	b580      	push	{r7, lr}
    8e1e:	b0a2      	sub	sp, #136	; 0x88
    8e20:	af00      	add	r7, sp, #0
    8e22:	60f8      	str	r0, [r7, #12]
    8e24:	60b9      	str	r1, [r7, #8]
    8e26:	607a      	str	r2, [r7, #4]
    8e28:	603b      	str	r3, [r7, #0]
  // get parent directory
  SdFile d1;
    8e2a:	234c      	movs	r3, #76	; 0x4c
    8e2c:	18fb      	adds	r3, r7, r3
    8e2e:	0018      	movs	r0, r3
    8e30:	f7ff fee6 	bl	8c00 <_ZN6SdFileC1Ev>
  SdFile d2;
    8e34:	2324      	movs	r3, #36	; 0x24
    8e36:	18fb      	adds	r3, r7, r3
    8e38:	0018      	movs	r0, r3
    8e3a:	f7ff fee1 	bl	8c00 <_ZN6SdFileC1Ev>

  d1.openRoot(volume); // start with the mostparent, root!
    8e3e:	68bb      	ldr	r3, [r7, #8]
    8e40:	3310      	adds	r3, #16
    8e42:	001a      	movs	r2, r3
    8e44:	234c      	movs	r3, #76	; 0x4c
    8e46:	18fb      	adds	r3, r7, r3
    8e48:	0011      	movs	r1, r2
    8e4a:	0018      	movs	r0, r3
    8e4c:	f7ff ff12 	bl	8c74 <_ZN6SdFile8openRootER8SdVolume>

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    8e50:	234c      	movs	r3, #76	; 0x4c
    8e52:	18fb      	adds	r3, r7, r3
    8e54:	2284      	movs	r2, #132	; 0x84
    8e56:	18ba      	adds	r2, r7, r2
    8e58:	6013      	str	r3, [r2, #0]
  SdFile *subdir = &d2;
    8e5a:	2324      	movs	r3, #36	; 0x24
    8e5c:	18fb      	adds	r3, r7, r3
    8e5e:	2280      	movs	r2, #128	; 0x80
    8e60:	18ba      	adds	r2, r7, r2
    8e62:	6013      	str	r3, [r2, #0]
  
  const char *origpath = filepath;
    8e64:	687b      	ldr	r3, [r7, #4]
    8e66:	67bb      	str	r3, [r7, #120]	; 0x78

  while (strchr(filepath, '/')) {
    8e68:	687b      	ldr	r3, [r7, #4]
    8e6a:	212f      	movs	r1, #47	; 0x2f
    8e6c:	0018      	movs	r0, r3
    8e6e:	f008 fb93 	bl	11598 <strchr>
    8e72:	1e03      	subs	r3, r0, #0
    8e74:	d06b      	beq.n	8f4e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x132>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    8e76:	687b      	ldr	r3, [r7, #4]
    8e78:	781b      	ldrb	r3, [r3, #0]
    8e7a:	2b2f      	cmp	r3, #47	; 0x2f
    8e7c:	d103      	bne.n	8e86 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6a>
      filepath++;
    8e7e:	687b      	ldr	r3, [r7, #4]
    8e80:	3301      	adds	r3, #1
    8e82:	607b      	str	r3, [r7, #4]
    8e84:	e7f0      	b.n	8e68 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x4c>
      continue;
    }
    
    if (! strchr(filepath, '/')) {
    8e86:	687b      	ldr	r3, [r7, #4]
    8e88:	212f      	movs	r1, #47	; 0x2f
    8e8a:	0018      	movs	r0, r3
    8e8c:	f008 fb84 	bl	11598 <strchr>
    8e90:	1e03      	subs	r3, r0, #0
    8e92:	d05b      	beq.n	8f4c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x130>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    8e94:	687b      	ldr	r3, [r7, #4]
    8e96:	212f      	movs	r1, #47	; 0x2f
    8e98:	0018      	movs	r0, r3
    8e9a:	f008 fb7d 	bl	11598 <strchr>
    8e9e:	0003      	movs	r3, r0
    8ea0:	001a      	movs	r2, r3
    8ea2:	687b      	ldr	r3, [r7, #4]
    8ea4:	1ad2      	subs	r2, r2, r3
    8ea6:	237f      	movs	r3, #127	; 0x7f
    8ea8:	18fb      	adds	r3, r7, r3
    8eaa:	701a      	strb	r2, [r3, #0]
    if (idx > 12)
    8eac:	237f      	movs	r3, #127	; 0x7f
    8eae:	18fb      	adds	r3, r7, r3
    8eb0:	781b      	ldrb	r3, [r3, #0]
    8eb2:	2b0c      	cmp	r3, #12
    8eb4:	dd03      	ble.n	8ebe <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa2>
      idx = 12;    // dont let them specify long names
    8eb6:	237f      	movs	r3, #127	; 0x7f
    8eb8:	18fb      	adds	r3, r7, r3
    8eba:	220c      	movs	r2, #12
    8ebc:	701a      	strb	r2, [r3, #0]
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    8ebe:	237f      	movs	r3, #127	; 0x7f
    8ec0:	18fb      	adds	r3, r7, r3
    8ec2:	781a      	ldrb	r2, [r3, #0]
    8ec4:	6879      	ldr	r1, [r7, #4]
    8ec6:	2314      	movs	r3, #20
    8ec8:	18fb      	adds	r3, r7, r3
    8eca:	0018      	movs	r0, r3
    8ecc:	f008 fb81 	bl	115d2 <strncpy>
    subdirname[idx] = 0;
    8ed0:	237f      	movs	r3, #127	; 0x7f
    8ed2:	18fb      	adds	r3, r7, r3
    8ed4:	781b      	ldrb	r3, [r3, #0]
    8ed6:	2214      	movs	r2, #20
    8ed8:	18ba      	adds	r2, r7, r2
    8eda:	2100      	movs	r1, #0
    8edc:	54d1      	strb	r1, [r2, r3]

    // close the subdir (we reuse them) if open
    subdir->close();
    8ede:	2380      	movs	r3, #128	; 0x80
    8ee0:	18fb      	adds	r3, r7, r3
    8ee2:	681b      	ldr	r3, [r3, #0]
    8ee4:	0018      	movs	r0, r3
    8ee6:	f001 f827 	bl	9f38 <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    8eea:	2314      	movs	r3, #20
    8eec:	18fa      	adds	r2, r7, r3
    8eee:	2384      	movs	r3, #132	; 0x84
    8ef0:	18fb      	adds	r3, r7, r3
    8ef2:	6819      	ldr	r1, [r3, #0]
    8ef4:	2380      	movs	r3, #128	; 0x80
    8ef6:	18fb      	adds	r3, r7, r3
    8ef8:	6818      	ldr	r0, [r3, #0]
    8efa:	2301      	movs	r3, #1
    8efc:	f001 f8de 	bl	a0bc <_ZN6SdFile4openEPS_PKch>
    8f00:	0003      	movs	r3, r0
    8f02:	425a      	negs	r2, r3
    8f04:	4153      	adcs	r3, r2
    8f06:	b2db      	uxtb	r3, r3
    8f08:	2b00      	cmp	r3, #0
    8f0a:	d004      	beq.n	8f16 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xfa>
      // failed to open one of the subdirectories
      return SdFile();
    8f0c:	68fb      	ldr	r3, [r7, #12]
    8f0e:	0018      	movs	r0, r3
    8f10:	f7ff fe76 	bl	8c00 <_ZN6SdFileC1Ev>
    8f14:	e028      	b.n	8f68 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x14c>
    }
    // move forward to the next subdirectory
    filepath += idx;
    8f16:	237f      	movs	r3, #127	; 0x7f
    8f18:	18fb      	adds	r3, r7, r3
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	687a      	ldr	r2, [r7, #4]
    8f1e:	18d3      	adds	r3, r2, r3
    8f20:	607b      	str	r3, [r7, #4]

    // we reuse the objects, close it.
    parent->close();
    8f22:	2384      	movs	r3, #132	; 0x84
    8f24:	18fb      	adds	r3, r7, r3
    8f26:	681b      	ldr	r3, [r3, #0]
    8f28:	0018      	movs	r0, r3
    8f2a:	f001 f805 	bl	9f38 <_ZN6SdFile5closeEv>

    // swap the pointers
    SdFile *t = parent;
    8f2e:	2384      	movs	r3, #132	; 0x84
    8f30:	18fb      	adds	r3, r7, r3
    8f32:	681b      	ldr	r3, [r3, #0]
    8f34:	677b      	str	r3, [r7, #116]	; 0x74
    parent = subdir;
    8f36:	2380      	movs	r3, #128	; 0x80
    8f38:	18fb      	adds	r3, r7, r3
    8f3a:	681b      	ldr	r3, [r3, #0]
    8f3c:	2284      	movs	r2, #132	; 0x84
    8f3e:	18ba      	adds	r2, r7, r2
    8f40:	6013      	str	r3, [r2, #0]
    subdir = t;
    8f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8f44:	2280      	movs	r2, #128	; 0x80
    8f46:	18ba      	adds	r2, r7, r2
    8f48:	6013      	str	r3, [r2, #0]
  while (strchr(filepath, '/')) {
    8f4a:	e78d      	b.n	8e68 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x4c>
      break;
    8f4c:	46c0      	nop			; (mov r8, r8)
  }

  *index = (int)(filepath - origpath);
    8f4e:	687a      	ldr	r2, [r7, #4]
    8f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8f52:	1ad2      	subs	r2, r2, r3
    8f54:	683b      	ldr	r3, [r7, #0]
    8f56:	601a      	str	r2, [r3, #0]
  // parent is now the parent diretory of the file!
  return *parent;
    8f58:	2384      	movs	r3, #132	; 0x84
    8f5a:	18fb      	adds	r3, r7, r3
    8f5c:	681a      	ldr	r2, [r3, #0]
    8f5e:	68fb      	ldr	r3, [r7, #12]
    8f60:	0011      	movs	r1, r2
    8f62:	0018      	movs	r0, r3
    8f64:	f7ff ff20 	bl	8da8 <_ZN6SdFileC1ERKS_>
}
    8f68:	68f8      	ldr	r0, [r7, #12]
    8f6a:	46bd      	mov	sp, r7
    8f6c:	b022      	add	sp, #136	; 0x88
    8f6e:	bd80      	pop	{r7, pc}

00008f70 <_ZN5SDLib7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    8f70:	b580      	push	{r7, lr}
    8f72:	b0ae      	sub	sp, #184	; 0xb8
    8f74:	af00      	add	r7, sp, #0
    8f76:	60f8      	str	r0, [r7, #12]
    8f78:	60b9      	str	r1, [r7, #8]
    8f7a:	607a      	str	r2, [r7, #4]
    8f7c:	001a      	movs	r2, r3
    8f7e:	1cfb      	adds	r3, r7, #3
    8f80:	701a      	strb	r2, [r3, #0]
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    8f82:	233c      	movs	r3, #60	; 0x3c
    8f84:	18f8      	adds	r0, r7, r3
    8f86:	2364      	movs	r3, #100	; 0x64
    8f88:	18fb      	adds	r3, r7, r3
    8f8a:	687a      	ldr	r2, [r7, #4]
    8f8c:	68b9      	ldr	r1, [r7, #8]
    8f8e:	f7ff ff45 	bl	8e1c <_ZN5SDLib7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    8f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    8f94:	001a      	movs	r2, r3
    8f96:	687b      	ldr	r3, [r7, #4]
    8f98:	189b      	adds	r3, r3, r2
    8f9a:	607b      	str	r3, [r7, #4]

  if (! filepath[0]) {
    8f9c:	687b      	ldr	r3, [r7, #4]
    8f9e:	781b      	ldrb	r3, [r3, #0]
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d10f      	bne.n	8fc4 <_ZN5SDLib7SDClass4openEPKch+0x54>
    // it was the directory itself!
    return File(parentdir, "/");
    8fa4:	233c      	movs	r3, #60	; 0x3c
    8fa6:	18fa      	adds	r2, r7, r3
    8fa8:	2368      	movs	r3, #104	; 0x68
    8faa:	18fb      	adds	r3, r7, r3
    8fac:	0011      	movs	r1, r2
    8fae:	0018      	movs	r0, r3
    8fb0:	f7ff fefa 	bl	8da8 <_ZN6SdFileC1ERKS_>
    8fb4:	4a2d      	ldr	r2, [pc, #180]	; (906c <_ZN5SDLib7SDClass4openEPKch+0xfc>)
    8fb6:	2368      	movs	r3, #104	; 0x68
    8fb8:	18f9      	adds	r1, r7, r3
    8fba:	68fb      	ldr	r3, [r7, #12]
    8fbc:	0018      	movs	r0, r3
    8fbe:	f7ff fc7f 	bl	88c0 <_ZN5SDLib4FileC1E6SdFilePKc>
    8fc2:	e04e      	b.n	9062 <_ZN5SDLib7SDClass4openEPKch+0xf2>
  }

  // Open the file itself
  SdFile file;
    8fc4:	2314      	movs	r3, #20
    8fc6:	18fb      	adds	r3, r7, r3
    8fc8:	0018      	movs	r0, r3
    8fca:	f7ff fe19 	bl	8c00 <_ZN6SdFileC1Ev>

  // failed to open a subdir!
  if (!parentdir.isOpen())
    8fce:	233c      	movs	r3, #60	; 0x3c
    8fd0:	18fb      	adds	r3, r7, r3
    8fd2:	0018      	movs	r0, r3
    8fd4:	f7ff fc3b 	bl	884e <_ZNK6SdFile6isOpenEv>
    8fd8:	0003      	movs	r3, r0
    8fda:	425a      	negs	r2, r3
    8fdc:	4153      	adcs	r3, r2
    8fde:	b2db      	uxtb	r3, r3
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d004      	beq.n	8fee <_ZN5SDLib7SDClass4openEPKch+0x7e>
    return File();
    8fe4:	68fb      	ldr	r3, [r7, #12]
    8fe6:	0018      	movs	r0, r3
    8fe8:	f7ff fc9a 	bl	8920 <_ZN5SDLib4FileC1Ev>
    8fec:	e039      	b.n	9062 <_ZN5SDLib7SDClass4openEPKch+0xf2>

  if ( ! file.open(parentdir, filepath, mode)) {
    8fee:	1cfb      	adds	r3, r7, #3
    8ff0:	781b      	ldrb	r3, [r3, #0]
    8ff2:	687a      	ldr	r2, [r7, #4]
    8ff4:	213c      	movs	r1, #60	; 0x3c
    8ff6:	1879      	adds	r1, r7, r1
    8ff8:	2014      	movs	r0, #20
    8ffa:	1838      	adds	r0, r7, r0
    8ffc:	f7ff fe25 	bl	8c4a <_ZN6SdFile4openERS_PKch>
    9000:	0003      	movs	r3, r0
    9002:	425a      	negs	r2, r3
    9004:	4153      	adcs	r3, r2
    9006:	b2db      	uxtb	r3, r3
    9008:	2b00      	cmp	r3, #0
    900a:	d004      	beq.n	9016 <_ZN5SDLib7SDClass4openEPKch+0xa6>
    return File();
    900c:	68fb      	ldr	r3, [r7, #12]
    900e:	0018      	movs	r0, r3
    9010:	f7ff fc86 	bl	8920 <_ZN5SDLib4FileC1Ev>
    9014:	e025      	b.n	9062 <_ZN5SDLib7SDClass4openEPKch+0xf2>
  }
  // close the parent
  parentdir.close();
    9016:	233c      	movs	r3, #60	; 0x3c
    9018:	18fb      	adds	r3, r7, r3
    901a:	0018      	movs	r0, r3
    901c:	f000 ff8c 	bl	9f38 <_ZN6SdFile5closeEv>

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    9020:	1cfb      	adds	r3, r7, #3
    9022:	781b      	ldrb	r3, [r3, #0]
    9024:	2206      	movs	r2, #6
    9026:	4013      	ands	r3, r2
    9028:	2b06      	cmp	r3, #6
    902a:	d10b      	bne.n	9044 <_ZN5SDLib7SDClass4openEPKch+0xd4>
    file.seekSet(file.fileSize());
    902c:	2314      	movs	r3, #20
    902e:	18fb      	adds	r3, r7, r3
    9030:	0018      	movs	r0, r3
    9032:	f7ff fbf2 	bl	881a <_ZNK6SdFile8fileSizeEv>
    9036:	0002      	movs	r2, r0
    9038:	2314      	movs	r3, #20
    903a:	18fb      	adds	r3, r7, r3
    903c:	0011      	movs	r1, r2
    903e:	0018      	movs	r0, r3
    9040:	f001 fbfa 	bl	a838 <_ZN6SdFile7seekSetEm>
  return File(file, filepath);
    9044:	2314      	movs	r3, #20
    9046:	18fa      	adds	r2, r7, r3
    9048:	2390      	movs	r3, #144	; 0x90
    904a:	18fb      	adds	r3, r7, r3
    904c:	0011      	movs	r1, r2
    904e:	0018      	movs	r0, r3
    9050:	f7ff feaa 	bl	8da8 <_ZN6SdFileC1ERKS_>
    9054:	687a      	ldr	r2, [r7, #4]
    9056:	2390      	movs	r3, #144	; 0x90
    9058:	18f9      	adds	r1, r7, r3
    905a:	68fb      	ldr	r3, [r7, #12]
    905c:	0018      	movs	r0, r3
    905e:	f7ff fc2f 	bl	88c0 <_ZN5SDLib4FileC1E6SdFilePKc>
}
    9062:	68f8      	ldr	r0, [r7, #12]
    9064:	46bd      	mov	sp, r7
    9066:	b02e      	add	sp, #184	; 0xb8
    9068:	bd80      	pop	{r7, pc}
    906a:	46c0      	nop			; (mov r8, r8)
    906c:	0001362c 	.word	0x0001362c

00009070 <_ZN5SDLib7SDClassC1Ev>:
  void rewindDirectory(void);
  
  using Print::write;
};

class SDClass {
    9070:	b580      	push	{r7, lr}
    9072:	b082      	sub	sp, #8
    9074:	af00      	add	r7, sp, #0
    9076:	6078      	str	r0, [r7, #4]
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	0018      	movs	r0, r3
    907c:	f7ff fdaa 	bl	8bd4 <_ZN7Sd2CardC1Ev>
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	3310      	adds	r3, #16
    9084:	0018      	movs	r0, r3
    9086:	f7ff fe05 	bl	8c94 <_ZN8SdVolumeC1Ev>
    908a:	687b      	ldr	r3, [r7, #4]
    908c:	3338      	adds	r3, #56	; 0x38
    908e:	0018      	movs	r0, r3
    9090:	f7ff fdb6 	bl	8c00 <_ZN6SdFileC1Ev>
    9094:	687b      	ldr	r3, [r7, #4]
    9096:	0018      	movs	r0, r3
    9098:	46bd      	mov	sp, r7
    909a:	b002      	add	sp, #8
    909c:	bd80      	pop	{r7, pc}
	...

000090a0 <_Z41__static_initialization_and_destruction_0ii>:
    _file->rewind();
}

SDClass SD;

};
    90a0:	b580      	push	{r7, lr}
    90a2:	b082      	sub	sp, #8
    90a4:	af00      	add	r7, sp, #0
    90a6:	6078      	str	r0, [r7, #4]
    90a8:	6039      	str	r1, [r7, #0]
    90aa:	687b      	ldr	r3, [r7, #4]
    90ac:	2b01      	cmp	r3, #1
    90ae:	d107      	bne.n	90c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
    90b0:	683b      	ldr	r3, [r7, #0]
    90b2:	4a05      	ldr	r2, [pc, #20]	; (90c8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    90b4:	4293      	cmp	r3, r2
    90b6:	d103      	bne.n	90c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
SDClass SD;
    90b8:	4b04      	ldr	r3, [pc, #16]	; (90cc <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    90ba:	0018      	movs	r0, r3
    90bc:	f7ff ffd8 	bl	9070 <_ZN5SDLib7SDClassC1Ev>
};
    90c0:	46c0      	nop			; (mov r8, r8)
    90c2:	46bd      	mov	sp, r7
    90c4:	b002      	add	sp, #8
    90c6:	bd80      	pop	{r7, pc}
    90c8:	0000ffff 	.word	0x0000ffff
    90cc:	200008f4 	.word	0x200008f4

000090d0 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
    90d0:	b580      	push	{r7, lr}
    90d2:	af00      	add	r7, sp, #0
    90d4:	4b03      	ldr	r3, [pc, #12]	; (90e4 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x14>)
    90d6:	0019      	movs	r1, r3
    90d8:	2001      	movs	r0, #1
    90da:	f7ff ffe1 	bl	90a0 <_Z41__static_initialization_and_destruction_0ii>
    90de:	46bd      	mov	sp, r7
    90e0:	bd80      	pop	{r7, pc}
    90e2:	46c0      	nop			; (mov r8, r8)
    90e4:	0000ffff 	.word	0x0000ffff

000090e8 <_ZNK7Sd2Card4typeEv>:
  uint8_t setSckRate(uint8_t sckRateID);
#ifdef USE_SPI_LIB
  uint8_t setSpiClock(uint32_t clock);
#endif
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t type(void) const {return type_;}
    90e8:	b580      	push	{r7, lr}
    90ea:	b082      	sub	sp, #8
    90ec:	af00      	add	r7, sp, #0
    90ee:	6078      	str	r0, [r7, #4]
    90f0:	687b      	ldr	r3, [r7, #4]
    90f2:	7b1b      	ldrb	r3, [r3, #12]
    90f4:	0018      	movs	r0, r3
    90f6:	46bd      	mov	sp, r7
    90f8:	b002      	add	sp, #8
    90fa:	bd80      	pop	{r7, pc}

000090fc <_ZN7Sd2Card8cardAcmdEhm>:
  uint16_t offset_;
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    90fc:	b580      	push	{r7, lr}
    90fe:	b084      	sub	sp, #16
    9100:	af00      	add	r7, sp, #0
    9102:	60f8      	str	r0, [r7, #12]
    9104:	607a      	str	r2, [r7, #4]
    9106:	230b      	movs	r3, #11
    9108:	18fb      	adds	r3, r7, r3
    910a:	1c0a      	adds	r2, r1, #0
    910c:	701a      	strb	r2, [r3, #0]
    cardCommand(CMD55, 0);
    910e:	68fb      	ldr	r3, [r7, #12]
    9110:	2200      	movs	r2, #0
    9112:	2137      	movs	r1, #55	; 0x37
    9114:	0018      	movs	r0, r3
    9116:	f000 f899 	bl	924c <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    911a:	687a      	ldr	r2, [r7, #4]
    911c:	230b      	movs	r3, #11
    911e:	18fb      	adds	r3, r7, r3
    9120:	7819      	ldrb	r1, [r3, #0]
    9122:	68fb      	ldr	r3, [r7, #12]
    9124:	0018      	movs	r0, r3
    9126:	f000 f891 	bl	924c <_ZN7Sd2Card11cardCommandEhm>
    912a:	0003      	movs	r3, r0
  }
    912c:	0018      	movs	r0, r3
    912e:	46bd      	mov	sp, r7
    9130:	b004      	add	sp, #16
    9132:	bd80      	pop	{r7, pc}

00009134 <_ZN7Sd2Card5errorEh>:
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    9134:	b580      	push	{r7, lr}
    9136:	b082      	sub	sp, #8
    9138:	af00      	add	r7, sp, #0
    913a:	6078      	str	r0, [r7, #4]
    913c:	000a      	movs	r2, r1
    913e:	1cfb      	adds	r3, r7, #3
    9140:	701a      	strb	r2, [r3, #0]
    9142:	687b      	ldr	r3, [r7, #4]
    9144:	1cfa      	adds	r2, r7, #3
    9146:	7812      	ldrb	r2, [r2, #0]
    9148:	715a      	strb	r2, [r3, #5]
    914a:	46c0      	nop			; (mov r8, r8)
    914c:	46bd      	mov	sp, r7
    914e:	b002      	add	sp, #8
    9150:	bd80      	pop	{r7, pc}

00009152 <_ZN7Sd2Card4typeEh>:
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    9152:	b580      	push	{r7, lr}
    9154:	b082      	sub	sp, #8
    9156:	af00      	add	r7, sp, #0
    9158:	6078      	str	r0, [r7, #4]
    915a:	000a      	movs	r2, r1
    915c:	1cfb      	adds	r3, r7, #3
    915e:	701a      	strb	r2, [r3, #0]
    9160:	687b      	ldr	r3, [r7, #4]
    9162:	1cfa      	adds	r2, r7, #3
    9164:	7812      	ldrb	r2, [r2, #0]
    9166:	731a      	strb	r2, [r3, #12]
    9168:	46c0      	nop			; (mov r8, r8)
    916a:	46bd      	mov	sp, r7
    916c:	b002      	add	sp, #8
    916e:	bd80      	pop	{r7, pc}

00009170 <_ZN11SPISettingsC1Ev>:
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }
    9170:	b580      	push	{r7, lr}
    9172:	b086      	sub	sp, #24
    9174:	af00      	add	r7, sp, #0
    9176:	6078      	str	r0, [r7, #4]
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	617b      	str	r3, [r7, #20]
    917c:	4b20      	ldr	r3, [pc, #128]	; (9200 <_ZN11SPISettingsC1Ev+0x90>)
    917e:	613b      	str	r3, [r7, #16]
    9180:	230f      	movs	r3, #15
    9182:	18fb      	adds	r3, r7, r3
    9184:	2201      	movs	r2, #1
    9186:	701a      	strb	r2, [r3, #0]
    9188:	230e      	movs	r3, #14
    918a:	18fb      	adds	r3, r7, r3
    918c:	2202      	movs	r2, #2
    918e:	701a      	strb	r2, [r3, #0]
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    9190:	693b      	ldr	r3, [r7, #16]
    9192:	4a1c      	ldr	r2, [pc, #112]	; (9204 <_ZN11SPISettingsC1Ev+0x94>)
    9194:	4293      	cmp	r3, r2
    9196:	d900      	bls.n	919a <_ZN11SPISettingsC1Ev+0x2a>
    9198:	4b1a      	ldr	r3, [pc, #104]	; (9204 <_ZN11SPISettingsC1Ev+0x94>)
    919a:	697a      	ldr	r2, [r7, #20]
    919c:	6013      	str	r3, [r2, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    919e:	230f      	movs	r3, #15
    91a0:	18fb      	adds	r3, r7, r3
    91a2:	781b      	ldrb	r3, [r3, #0]
    91a4:	2b01      	cmp	r3, #1
    91a6:	d101      	bne.n	91ac <_ZN11SPISettingsC1Ev+0x3c>
    91a8:	2200      	movs	r2, #0
    91aa:	e000      	b.n	91ae <_ZN11SPISettingsC1Ev+0x3e>
    91ac:	2201      	movs	r2, #1
    91ae:	697b      	ldr	r3, [r7, #20]
    91b0:	715a      	strb	r2, [r3, #5]
    switch (dataMode)
    91b2:	230e      	movs	r3, #14
    91b4:	18fb      	adds	r3, r7, r3
    91b6:	781b      	ldrb	r3, [r3, #0]
    91b8:	2b01      	cmp	r3, #1
    91ba:	d014      	beq.n	91e6 <_ZN11SPISettingsC1Ev+0x76>
    91bc:	dc02      	bgt.n	91c4 <_ZN11SPISettingsC1Ev+0x54>
    91be:	2b00      	cmp	r3, #0
    91c0:	d009      	beq.n	91d6 <_ZN11SPISettingsC1Ev+0x66>
    91c2:	e014      	b.n	91ee <_ZN11SPISettingsC1Ev+0x7e>
    91c4:	2b02      	cmp	r3, #2
    91c6:	d002      	beq.n	91ce <_ZN11SPISettingsC1Ev+0x5e>
    91c8:	2b03      	cmp	r3, #3
    91ca:	d008      	beq.n	91de <_ZN11SPISettingsC1Ev+0x6e>
    91cc:	e00f      	b.n	91ee <_ZN11SPISettingsC1Ev+0x7e>
        this->dataMode = SERCOM_SPI_MODE_0; break;
    91ce:	697b      	ldr	r3, [r7, #20]
    91d0:	2200      	movs	r2, #0
    91d2:	711a      	strb	r2, [r3, #4]
    91d4:	e00e      	b.n	91f4 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_1; break;
    91d6:	697b      	ldr	r3, [r7, #20]
    91d8:	2201      	movs	r2, #1
    91da:	711a      	strb	r2, [r3, #4]
    91dc:	e00a      	b.n	91f4 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_2; break;
    91de:	697b      	ldr	r3, [r7, #20]
    91e0:	2202      	movs	r2, #2
    91e2:	711a      	strb	r2, [r3, #4]
    91e4:	e006      	b.n	91f4 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_3; break;
    91e6:	697b      	ldr	r3, [r7, #20]
    91e8:	2203      	movs	r2, #3
    91ea:	711a      	strb	r2, [r3, #4]
    91ec:	e002      	b.n	91f4 <_ZN11SPISettingsC1Ev+0x84>
        this->dataMode = SERCOM_SPI_MODE_0; break;
    91ee:	697b      	ldr	r3, [r7, #20]
    91f0:	2200      	movs	r2, #0
    91f2:	711a      	strb	r2, [r3, #4]
  SPISettings() { init_AlwaysInline(4000000, MSBFIRST, SPI_MODE0); }
    91f4:	687b      	ldr	r3, [r7, #4]
    91f6:	0018      	movs	r0, r3
    91f8:	46bd      	mov	sp, r7
    91fa:	b006      	add	sp, #24
    91fc:	bd80      	pop	{r7, pc}
    91fe:	46c0      	nop			; (mov r8, r8)
    9200:	003d0900 	.word	0x003d0900
    9204:	00b71b00 	.word	0x00b71b00

00009208 <_ZL7spiSendh>:
#include <SPI.h>
static SPISettings settings;
#endif
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
    9208:	b580      	push	{r7, lr}
    920a:	b082      	sub	sp, #8
    920c:	af00      	add	r7, sp, #0
    920e:	0002      	movs	r2, r0
    9210:	1dfb      	adds	r3, r7, #7
    9212:	701a      	strb	r2, [r3, #0]
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SDCARD_SPI.transfer(b);
    9214:	1dfb      	adds	r3, r7, #7
    9216:	781a      	ldrb	r2, [r3, #0]
    9218:	4b04      	ldr	r3, [pc, #16]	; (922c <_ZL7spiSendh+0x24>)
    921a:	0011      	movs	r1, r2
    921c:	0018      	movs	r0, r3
    921e:	f002 fb8f 	bl	b940 <_ZN8SPIClass8transferEh>
#endif
}
    9222:	46c0      	nop			; (mov r8, r8)
    9224:	46bd      	mov	sp, r7
    9226:	b002      	add	sp, #8
    9228:	bd80      	pop	{r7, pc}
    922a:	46c0      	nop			; (mov r8, r8)
    922c:	20000b7c 	.word	0x20000b7c

00009230 <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
    9230:	b580      	push	{r7, lr}
    9232:	af00      	add	r7, sp, #0
#ifndef USE_SPI_LIB
  spiSend(0XFF);
  return SPDR;
#else
  return SDCARD_SPI.transfer(0xFF);
    9234:	4b04      	ldr	r3, [pc, #16]	; (9248 <_ZL6spiRecv+0x18>)
    9236:	21ff      	movs	r1, #255	; 0xff
    9238:	0018      	movs	r0, r3
    923a:	f002 fb81 	bl	b940 <_ZN8SPIClass8transferEh>
    923e:	0003      	movs	r3, r0
#endif
}
    9240:	0018      	movs	r0, r3
    9242:	46bd      	mov	sp, r7
    9244:	bd80      	pop	{r7, pc}
    9246:	46c0      	nop			; (mov r8, r8)
    9248:	20000b7c 	.word	0x20000b7c

0000924c <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    924c:	b580      	push	{r7, lr}
    924e:	b086      	sub	sp, #24
    9250:	af00      	add	r7, sp, #0
    9252:	60f8      	str	r0, [r7, #12]
    9254:	607a      	str	r2, [r7, #4]
    9256:	230b      	movs	r3, #11
    9258:	18fb      	adds	r3, r7, r3
    925a:	1c0a      	adds	r2, r1, #0
    925c:	701a      	strb	r2, [r3, #0]
  // end read if in partialBlockRead mode
  readEnd();
    925e:	68fb      	ldr	r3, [r7, #12]
    9260:	0018      	movs	r0, r3
    9262:	f000 fac9 	bl	97f8 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
    9266:	68fb      	ldr	r3, [r7, #12]
    9268:	0018      	movs	r0, r3
    926a:	f000 f88f 	bl	938c <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    926e:	2396      	movs	r3, #150	; 0x96
    9270:	005a      	lsls	r2, r3, #1
    9272:	68fb      	ldr	r3, [r7, #12]
    9274:	0011      	movs	r1, r2
    9276:	0018      	movs	r0, r3
    9278:	f000 fb80 	bl	997c <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
    927c:	230b      	movs	r3, #11
    927e:	18fb      	adds	r3, r7, r3
    9280:	781b      	ldrb	r3, [r3, #0]
    9282:	2240      	movs	r2, #64	; 0x40
    9284:	4313      	orrs	r3, r2
    9286:	b2db      	uxtb	r3, r3
    9288:	0018      	movs	r0, r3
    928a:	f7ff ffbd 	bl	9208 <_ZL7spiSendh>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    928e:	2317      	movs	r3, #23
    9290:	18fb      	adds	r3, r7, r3
    9292:	2218      	movs	r2, #24
    9294:	701a      	strb	r2, [r3, #0]
    9296:	2317      	movs	r3, #23
    9298:	18fb      	adds	r3, r7, r3
    929a:	781b      	ldrb	r3, [r3, #0]
    929c:	2b7f      	cmp	r3, #127	; 0x7f
    929e:	d813      	bhi.n	92c8 <_ZN7Sd2Card11cardCommandEhm+0x7c>
    92a0:	2317      	movs	r3, #23
    92a2:	18fb      	adds	r3, r7, r3
    92a4:	781b      	ldrb	r3, [r3, #0]
    92a6:	b25b      	sxtb	r3, r3
    92a8:	687a      	ldr	r2, [r7, #4]
    92aa:	40da      	lsrs	r2, r3
    92ac:	0013      	movs	r3, r2
    92ae:	b2db      	uxtb	r3, r3
    92b0:	0018      	movs	r0, r3
    92b2:	f7ff ffa9 	bl	9208 <_ZL7spiSendh>
    92b6:	2317      	movs	r3, #23
    92b8:	18fb      	adds	r3, r7, r3
    92ba:	781b      	ldrb	r3, [r3, #0]
    92bc:	3b08      	subs	r3, #8
    92be:	b2da      	uxtb	r2, r3
    92c0:	2317      	movs	r3, #23
    92c2:	18fb      	adds	r3, r7, r3
    92c4:	701a      	strb	r2, [r3, #0]
    92c6:	e7e6      	b.n	9296 <_ZN7Sd2Card11cardCommandEhm+0x4a>

  // send CRC
  uint8_t crc = 0XFF;
    92c8:	2316      	movs	r3, #22
    92ca:	18fb      	adds	r3, r7, r3
    92cc:	22ff      	movs	r2, #255	; 0xff
    92ce:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    92d0:	230b      	movs	r3, #11
    92d2:	18fb      	adds	r3, r7, r3
    92d4:	781b      	ldrb	r3, [r3, #0]
    92d6:	2b00      	cmp	r3, #0
    92d8:	d103      	bne.n	92e2 <_ZN7Sd2Card11cardCommandEhm+0x96>
    92da:	2316      	movs	r3, #22
    92dc:	18fb      	adds	r3, r7, r3
    92de:	2295      	movs	r2, #149	; 0x95
    92e0:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    92e2:	230b      	movs	r3, #11
    92e4:	18fb      	adds	r3, r7, r3
    92e6:	781b      	ldrb	r3, [r3, #0]
    92e8:	2b08      	cmp	r3, #8
    92ea:	d103      	bne.n	92f4 <_ZN7Sd2Card11cardCommandEhm+0xa8>
    92ec:	2316      	movs	r3, #22
    92ee:	18fb      	adds	r3, r7, r3
    92f0:	2287      	movs	r2, #135	; 0x87
    92f2:	701a      	strb	r2, [r3, #0]
  spiSend(crc);
    92f4:	2316      	movs	r3, #22
    92f6:	18fb      	adds	r3, r7, r3
    92f8:	781b      	ldrb	r3, [r3, #0]
    92fa:	0018      	movs	r0, r3
    92fc:	f7ff ff84 	bl	9208 <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    9300:	2315      	movs	r3, #21
    9302:	18fb      	adds	r3, r7, r3
    9304:	2200      	movs	r2, #0
    9306:	701a      	strb	r2, [r3, #0]
    9308:	f7ff ff92 	bl	9230 <_ZL6spiRecv>
    930c:	0003      	movs	r3, r0
    930e:	001a      	movs	r2, r3
    9310:	68fb      	ldr	r3, [r7, #12]
    9312:	72da      	strb	r2, [r3, #11]
    9314:	68fb      	ldr	r3, [r7, #12]
    9316:	7adb      	ldrb	r3, [r3, #11]
    9318:	b25b      	sxtb	r3, r3
    931a:	2b00      	cmp	r3, #0
    931c:	da06      	bge.n	932c <_ZN7Sd2Card11cardCommandEhm+0xe0>
    931e:	2315      	movs	r3, #21
    9320:	18fb      	adds	r3, r7, r3
    9322:	781b      	ldrb	r3, [r3, #0]
    9324:	2bff      	cmp	r3, #255	; 0xff
    9326:	d001      	beq.n	932c <_ZN7Sd2Card11cardCommandEhm+0xe0>
    9328:	2301      	movs	r3, #1
    932a:	e000      	b.n	932e <_ZN7Sd2Card11cardCommandEhm+0xe2>
    932c:	2300      	movs	r3, #0
    932e:	2b00      	cmp	r3, #0
    9330:	d007      	beq.n	9342 <_ZN7Sd2Card11cardCommandEhm+0xf6>
    9332:	2315      	movs	r3, #21
    9334:	18fb      	adds	r3, r7, r3
    9336:	781a      	ldrb	r2, [r3, #0]
    9338:	2315      	movs	r3, #21
    933a:	18fb      	adds	r3, r7, r3
    933c:	3201      	adds	r2, #1
    933e:	701a      	strb	r2, [r3, #0]
    9340:	e7e2      	b.n	9308 <_ZN7Sd2Card11cardCommandEhm+0xbc>
    ;
  return status_;
    9342:	68fb      	ldr	r3, [r7, #12]
    9344:	7adb      	ldrb	r3, [r3, #11]
}
    9346:	0018      	movs	r0, r3
    9348:	46bd      	mov	sp, r7
    934a:	b006      	add	sp, #24
    934c:	bd80      	pop	{r7, pc}
	...

00009350 <_ZN7Sd2Card14chipSelectHighEv>:
  }
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
    9350:	b580      	push	{r7, lr}
    9352:	b082      	sub	sp, #8
    9354:	af00      	add	r7, sp, #0
    9356:	6078      	str	r0, [r7, #4]
  digitalWrite(chipSelectPin_, HIGH);
    9358:	687b      	ldr	r3, [r7, #4]
    935a:	791b      	ldrb	r3, [r3, #4]
    935c:	2101      	movs	r1, #1
    935e:	0018      	movs	r0, r3
    9360:	f7fd fbd4 	bl	6b0c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    9364:	4b07      	ldr	r3, [pc, #28]	; (9384 <_ZN7Sd2Card14chipSelectHighEv+0x34>)
    9366:	781b      	ldrb	r3, [r3, #0]
    9368:	2b00      	cmp	r3, #0
    936a:	d006      	beq.n	937a <_ZN7Sd2Card14chipSelectHighEv+0x2a>
    chip_select_asserted = 0;
    936c:	4b05      	ldr	r3, [pc, #20]	; (9384 <_ZN7Sd2Card14chipSelectHighEv+0x34>)
    936e:	2200      	movs	r2, #0
    9370:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.endTransaction();
    9372:	4b05      	ldr	r3, [pc, #20]	; (9388 <_ZN7Sd2Card14chipSelectHighEv+0x38>)
    9374:	0018      	movs	r0, r3
    9376:	f002 fabd 	bl	b8f4 <_ZN8SPIClass14endTransactionEv>
  }
#endif
}
    937a:	46c0      	nop			; (mov r8, r8)
    937c:	46bd      	mov	sp, r7
    937e:	b002      	add	sp, #8
    9380:	bd80      	pop	{r7, pc}
    9382:	46c0      	nop			; (mov r8, r8)
    9384:	20000960 	.word	0x20000960
    9388:	20000b7c 	.word	0x20000b7c

0000938c <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    938c:	b580      	push	{r7, lr}
    938e:	b082      	sub	sp, #8
    9390:	af00      	add	r7, sp, #0
    9392:	6078      	str	r0, [r7, #4]
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    9394:	4b0b      	ldr	r3, [pc, #44]	; (93c4 <_ZN7Sd2Card13chipSelectLowEv+0x38>)
    9396:	781b      	ldrb	r3, [r3, #0]
    9398:	2b00      	cmp	r3, #0
    939a:	d108      	bne.n	93ae <_ZN7Sd2Card13chipSelectLowEv+0x22>
    chip_select_asserted = 1;
    939c:	4b09      	ldr	r3, [pc, #36]	; (93c4 <_ZN7Sd2Card13chipSelectLowEv+0x38>)
    939e:	2201      	movs	r2, #1
    93a0:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.beginTransaction(settings);
    93a2:	4b09      	ldr	r3, [pc, #36]	; (93c8 <_ZN7Sd2Card13chipSelectLowEv+0x3c>)
    93a4:	4809      	ldr	r0, [pc, #36]	; (93cc <_ZN7Sd2Card13chipSelectLowEv+0x40>)
    93a6:	6819      	ldr	r1, [r3, #0]
    93a8:	685a      	ldr	r2, [r3, #4]
    93aa:	f002 fa6d 	bl	b888 <_ZN8SPIClass16beginTransactionE11SPISettings>
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    93ae:	687b      	ldr	r3, [r7, #4]
    93b0:	791b      	ldrb	r3, [r3, #4]
    93b2:	2100      	movs	r1, #0
    93b4:	0018      	movs	r0, r3
    93b6:	f7fd fba9 	bl	6b0c <digitalWrite>
}
    93ba:	46c0      	nop			; (mov r8, r8)
    93bc:	46bd      	mov	sp, r7
    93be:	b002      	add	sp, #8
    93c0:	bd80      	pop	{r7, pc}
    93c2:	46c0      	nop			; (mov r8, r8)
    93c4:	20000960 	.word	0x20000960
    93c8:	20000958 	.word	0x20000958
    93cc:	20000b7c 	.word	0x20000b7c

000093d0 <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    93d0:	b580      	push	{r7, lr}
    93d2:	b08a      	sub	sp, #40	; 0x28
    93d4:	af00      	add	r7, sp, #0
    93d6:	6078      	str	r0, [r7, #4]
    93d8:	0008      	movs	r0, r1
    93da:	0011      	movs	r1, r2
    93dc:	1cfb      	adds	r3, r7, #3
    93de:	1c02      	adds	r2, r0, #0
    93e0:	701a      	strb	r2, [r3, #0]
    93e2:	1cbb      	adds	r3, r7, #2
    93e4:	1c0a      	adds	r2, r1, #0
    93e6:	701a      	strb	r2, [r3, #0]
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    93e8:	687b      	ldr	r3, [r7, #4]
    93ea:	2200      	movs	r2, #0
    93ec:	731a      	strb	r2, [r3, #12]
    93ee:	687b      	ldr	r3, [r7, #4]
    93f0:	7b1a      	ldrb	r2, [r3, #12]
    93f2:	687b      	ldr	r3, [r7, #4]
    93f4:	729a      	strb	r2, [r3, #10]
    93f6:	687b      	ldr	r3, [r7, #4]
    93f8:	7a9a      	ldrb	r2, [r3, #10]
    93fa:	687b      	ldr	r3, [r7, #4]
    93fc:	719a      	strb	r2, [r3, #6]
    93fe:	687b      	ldr	r3, [r7, #4]
    9400:	799a      	ldrb	r2, [r3, #6]
    9402:	687b      	ldr	r3, [r7, #4]
    9404:	715a      	strb	r2, [r3, #5]
  chipSelectPin_ = chipSelectPin;
    9406:	687b      	ldr	r3, [r7, #4]
    9408:	1cba      	adds	r2, r7, #2
    940a:	7812      	ldrb	r2, [r2, #0]
    940c:	711a      	strb	r2, [r3, #4]
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
    940e:	f7f9 fd2d 	bl	2e6c <millis>
    9412:	0003      	movs	r3, r0
    9414:	623b      	str	r3, [r7, #32]
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    9416:	687b      	ldr	r3, [r7, #4]
    9418:	791b      	ldrb	r3, [r3, #4]
    941a:	2101      	movs	r1, #1
    941c:	0018      	movs	r0, r3
    941e:	f7fd fa4b 	bl	68b8 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    9422:	687b      	ldr	r3, [r7, #4]
    9424:	791b      	ldrb	r3, [r3, #4]
    9426:	2101      	movs	r1, #1
    9428:	0018      	movs	r0, r3
    942a:	f7fd fb6f 	bl	6b0c <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SDCARD_SPI.begin();
    942e:	4b8c      	ldr	r3, [pc, #560]	; (9660 <_ZN7Sd2Card4initEhh+0x290>)
    9430:	0018      	movs	r0, r3
    9432:	f002 f999 	bl	b768 <_ZN8SPIClass5beginEv>
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    9436:	498b      	ldr	r1, [pc, #556]	; (9664 <_ZN7Sd2Card4initEhh+0x294>)
    9438:	230c      	movs	r3, #12
    943a:	18f8      	adds	r0, r7, r3
    943c:	2302      	movs	r3, #2
    943e:	2201      	movs	r2, #1
    9440:	f7fe f938 	bl	76b4 <_ZN11SPISettingsC1Em8BitOrderh>
    9444:	4b88      	ldr	r3, [pc, #544]	; (9668 <_ZN7Sd2Card4initEhh+0x298>)
    9446:	220c      	movs	r2, #12
    9448:	18ba      	adds	r2, r7, r2
    944a:	6811      	ldr	r1, [r2, #0]
    944c:	6019      	str	r1, [r3, #0]
    944e:	8892      	ldrh	r2, [r2, #4]
    9450:	809a      	strh	r2, [r3, #4]
#endif // USE_SPI_LIB
#endif // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
#ifdef USE_SPI_LIB
  SDCARD_SPI.beginTransaction(settings);
    9452:	4b85      	ldr	r3, [pc, #532]	; (9668 <_ZN7Sd2Card4initEhh+0x298>)
    9454:	4882      	ldr	r0, [pc, #520]	; (9660 <_ZN7Sd2Card4initEhh+0x290>)
    9456:	6819      	ldr	r1, [r3, #0]
    9458:	685a      	ldr	r2, [r3, #4]
    945a:	f002 fa15 	bl	b888 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    945e:	2327      	movs	r3, #39	; 0x27
    9460:	18fb      	adds	r3, r7, r3
    9462:	2200      	movs	r2, #0
    9464:	701a      	strb	r2, [r3, #0]
    9466:	2327      	movs	r3, #39	; 0x27
    9468:	18fb      	adds	r3, r7, r3
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	2b09      	cmp	r3, #9
    946e:	dc0a      	bgt.n	9486 <_ZN7Sd2Card4initEhh+0xb6>
    9470:	20ff      	movs	r0, #255	; 0xff
    9472:	f7ff fec9 	bl	9208 <_ZL7spiSendh>
    9476:	2327      	movs	r3, #39	; 0x27
    9478:	18fb      	adds	r3, r7, r3
    947a:	781a      	ldrb	r2, [r3, #0]
    947c:	2327      	movs	r3, #39	; 0x27
    947e:	18fb      	adds	r3, r7, r3
    9480:	3201      	adds	r2, #1
    9482:	701a      	strb	r2, [r3, #0]
    9484:	e7ef      	b.n	9466 <_ZN7Sd2Card4initEhh+0x96>
#ifdef USE_SPI_LIB
  SDCARD_SPI.endTransaction();
    9486:	4b76      	ldr	r3, [pc, #472]	; (9660 <_ZN7Sd2Card4initEhh+0x290>)
    9488:	0018      	movs	r0, r3
    948a:	f002 fa33 	bl	b8f4 <_ZN8SPIClass14endTransactionEv>
#endif

  chipSelectLow();
    948e:	687b      	ldr	r3, [r7, #4]
    9490:	0018      	movs	r0, r3
    9492:	f7ff ff7b 	bl	938c <_ZN7Sd2Card13chipSelectLowEv>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    9496:	687b      	ldr	r3, [r7, #4]
    9498:	2200      	movs	r2, #0
    949a:	2100      	movs	r1, #0
    949c:	0018      	movs	r0, r3
    949e:	f7ff fed5 	bl	924c <_ZN7Sd2Card11cardCommandEhm>
    94a2:	0003      	movs	r3, r0
    94a4:	001a      	movs	r2, r3
    94a6:	687b      	ldr	r3, [r7, #4]
    94a8:	72da      	strb	r2, [r3, #11]
    94aa:	687b      	ldr	r3, [r7, #4]
    94ac:	7adb      	ldrb	r3, [r3, #11]
    94ae:	3b01      	subs	r3, #1
    94b0:	1e5a      	subs	r2, r3, #1
    94b2:	4193      	sbcs	r3, r2
    94b4:	b2db      	uxtb	r3, r3
    94b6:	2b00      	cmp	r3, #0
    94b8:	d010      	beq.n	94dc <_ZN7Sd2Card4initEhh+0x10c>
    unsigned int d = millis() - t0;
    94ba:	f7f9 fcd7 	bl	2e6c <millis>
    94be:	0002      	movs	r2, r0
    94c0:	6a3b      	ldr	r3, [r7, #32]
    94c2:	1ad3      	subs	r3, r2, r3
    94c4:	61fb      	str	r3, [r7, #28]
    if (d > SD_INIT_TIMEOUT) {
    94c6:	69fa      	ldr	r2, [r7, #28]
    94c8:	23fa      	movs	r3, #250	; 0xfa
    94ca:	00db      	lsls	r3, r3, #3
    94cc:	429a      	cmp	r2, r3
    94ce:	d9e2      	bls.n	9496 <_ZN7Sd2Card4initEhh+0xc6>
      error(SD_CARD_ERROR_CMD0);
    94d0:	687b      	ldr	r3, [r7, #4]
    94d2:	2101      	movs	r1, #1
    94d4:	0018      	movs	r0, r3
    94d6:	f7ff fe2d 	bl	9134 <_ZN7Sd2Card5errorEh>
      goto fail;
    94da:	e0b7      	b.n	964c <_ZN7Sd2Card4initEhh+0x27c>
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    94dc:	23d5      	movs	r3, #213	; 0xd5
    94de:	005a      	lsls	r2, r3, #1
    94e0:	687b      	ldr	r3, [r7, #4]
    94e2:	2108      	movs	r1, #8
    94e4:	0018      	movs	r0, r3
    94e6:	f7ff feb1 	bl	924c <_ZN7Sd2Card11cardCommandEhm>
    94ea:	0003      	movs	r3, r0
    94ec:	001a      	movs	r2, r3
    94ee:	2304      	movs	r3, #4
    94f0:	4013      	ands	r3, r2
    94f2:	1e5a      	subs	r2, r3, #1
    94f4:	4193      	sbcs	r3, r2
    94f6:	b2db      	uxtb	r3, r3
    94f8:	2b00      	cmp	r3, #0
    94fa:	d005      	beq.n	9508 <_ZN7Sd2Card4initEhh+0x138>
    type(SD_CARD_TYPE_SD1);
    94fc:	687b      	ldr	r3, [r7, #4]
    94fe:	2101      	movs	r1, #1
    9500:	0018      	movs	r0, r3
    9502:	f7ff fe26 	bl	9152 <_ZN7Sd2Card4typeEh>
    9506:	e025      	b.n	9554 <_ZN7Sd2Card4initEhh+0x184>
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    9508:	2326      	movs	r3, #38	; 0x26
    950a:	18fb      	adds	r3, r7, r3
    950c:	2200      	movs	r2, #0
    950e:	701a      	strb	r2, [r3, #0]
    9510:	2326      	movs	r3, #38	; 0x26
    9512:	18fb      	adds	r3, r7, r3
    9514:	781b      	ldrb	r3, [r3, #0]
    9516:	2b03      	cmp	r3, #3
    9518:	dc0d      	bgt.n	9536 <_ZN7Sd2Card4initEhh+0x166>
    951a:	f7ff fe89 	bl	9230 <_ZL6spiRecv>
    951e:	0003      	movs	r3, r0
    9520:	001a      	movs	r2, r3
    9522:	687b      	ldr	r3, [r7, #4]
    9524:	72da      	strb	r2, [r3, #11]
    9526:	2326      	movs	r3, #38	; 0x26
    9528:	18fb      	adds	r3, r7, r3
    952a:	781a      	ldrb	r2, [r3, #0]
    952c:	2326      	movs	r3, #38	; 0x26
    952e:	18fb      	adds	r3, r7, r3
    9530:	3201      	adds	r2, #1
    9532:	701a      	strb	r2, [r3, #0]
    9534:	e7ec      	b.n	9510 <_ZN7Sd2Card4initEhh+0x140>
    if (status_ != 0XAA) {
    9536:	687b      	ldr	r3, [r7, #4]
    9538:	7adb      	ldrb	r3, [r3, #11]
    953a:	2baa      	cmp	r3, #170	; 0xaa
    953c:	d005      	beq.n	954a <_ZN7Sd2Card4initEhh+0x17a>
      error(SD_CARD_ERROR_CMD8);
    953e:	687b      	ldr	r3, [r7, #4]
    9540:	2102      	movs	r1, #2
    9542:	0018      	movs	r0, r3
    9544:	f7ff fdf6 	bl	9134 <_ZN7Sd2Card5errorEh>
      goto fail;
    9548:	e080      	b.n	964c <_ZN7Sd2Card4initEhh+0x27c>
    }
    type(SD_CARD_TYPE_SD2);
    954a:	687b      	ldr	r3, [r7, #4]
    954c:	2102      	movs	r1, #2
    954e:	0018      	movs	r0, r3
    9550:	f7ff fdff 	bl	9152 <_ZN7Sd2Card4typeEh>
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    9554:	687b      	ldr	r3, [r7, #4]
    9556:	0018      	movs	r0, r3
    9558:	f7ff fdc6 	bl	90e8 <_ZNK7Sd2Card4typeEv>
    955c:	0003      	movs	r3, r0
    955e:	2b02      	cmp	r3, #2
    9560:	d102      	bne.n	9568 <_ZN7Sd2Card4initEhh+0x198>
    9562:	2380      	movs	r3, #128	; 0x80
    9564:	05db      	lsls	r3, r3, #23
    9566:	e000      	b.n	956a <_ZN7Sd2Card4initEhh+0x19a>
    9568:	2300      	movs	r3, #0
    956a:	61bb      	str	r3, [r7, #24]

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    956c:	69ba      	ldr	r2, [r7, #24]
    956e:	687b      	ldr	r3, [r7, #4]
    9570:	2129      	movs	r1, #41	; 0x29
    9572:	0018      	movs	r0, r3
    9574:	f7ff fdc2 	bl	90fc <_ZN7Sd2Card8cardAcmdEhm>
    9578:	0003      	movs	r3, r0
    957a:	001a      	movs	r2, r3
    957c:	687b      	ldr	r3, [r7, #4]
    957e:	72da      	strb	r2, [r3, #11]
    9580:	687b      	ldr	r3, [r7, #4]
    9582:	7adb      	ldrb	r3, [r3, #11]
    9584:	1e5a      	subs	r2, r3, #1
    9586:	4193      	sbcs	r3, r2
    9588:	b2db      	uxtb	r3, r3
    958a:	2b00      	cmp	r3, #0
    958c:	d010      	beq.n	95b0 <_ZN7Sd2Card4initEhh+0x1e0>
    // check for timeout
    unsigned int d = millis() - t0;
    958e:	f7f9 fc6d 	bl	2e6c <millis>
    9592:	0002      	movs	r2, r0
    9594:	6a3b      	ldr	r3, [r7, #32]
    9596:	1ad3      	subs	r3, r2, r3
    9598:	617b      	str	r3, [r7, #20]
    if (d > SD_INIT_TIMEOUT) {
    959a:	697a      	ldr	r2, [r7, #20]
    959c:	23fa      	movs	r3, #250	; 0xfa
    959e:	00db      	lsls	r3, r3, #3
    95a0:	429a      	cmp	r2, r3
    95a2:	d9e3      	bls.n	956c <_ZN7Sd2Card4initEhh+0x19c>
      error(SD_CARD_ERROR_ACMD41);
    95a4:	687b      	ldr	r3, [r7, #4]
    95a6:	2108      	movs	r1, #8
    95a8:	0018      	movs	r0, r3
    95aa:	f7ff fdc3 	bl	9134 <_ZN7Sd2Card5errorEh>
      goto fail;
    95ae:	e04d      	b.n	964c <_ZN7Sd2Card4initEhh+0x27c>
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    95b0:	687b      	ldr	r3, [r7, #4]
    95b2:	0018      	movs	r0, r3
    95b4:	f7ff fd98 	bl	90e8 <_ZNK7Sd2Card4typeEv>
    95b8:	0003      	movs	r3, r0
    95ba:	3b02      	subs	r3, #2
    95bc:	425a      	negs	r2, r3
    95be:	4153      	adcs	r3, r2
    95c0:	b2db      	uxtb	r3, r3
    95c2:	2b00      	cmp	r3, #0
    95c4:	d035      	beq.n	9632 <_ZN7Sd2Card4initEhh+0x262>
    if (cardCommand(CMD58, 0)) {
    95c6:	687b      	ldr	r3, [r7, #4]
    95c8:	2200      	movs	r2, #0
    95ca:	213a      	movs	r1, #58	; 0x3a
    95cc:	0018      	movs	r0, r3
    95ce:	f7ff fe3d 	bl	924c <_ZN7Sd2Card11cardCommandEhm>
    95d2:	0003      	movs	r3, r0
    95d4:	1e5a      	subs	r2, r3, #1
    95d6:	4193      	sbcs	r3, r2
    95d8:	b2db      	uxtb	r3, r3
    95da:	2b00      	cmp	r3, #0
    95dc:	d005      	beq.n	95ea <_ZN7Sd2Card4initEhh+0x21a>
      error(SD_CARD_ERROR_CMD58);
    95de:	687b      	ldr	r3, [r7, #4]
    95e0:	2106      	movs	r1, #6
    95e2:	0018      	movs	r0, r3
    95e4:	f7ff fda6 	bl	9134 <_ZN7Sd2Card5errorEh>
      goto fail;
    95e8:	e030      	b.n	964c <_ZN7Sd2Card4initEhh+0x27c>
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    95ea:	f7ff fe21 	bl	9230 <_ZL6spiRecv>
    95ee:	0003      	movs	r3, r0
    95f0:	001a      	movs	r2, r3
    95f2:	23c0      	movs	r3, #192	; 0xc0
    95f4:	4013      	ands	r3, r2
    95f6:	3bc0      	subs	r3, #192	; 0xc0
    95f8:	425a      	negs	r2, r3
    95fa:	4153      	adcs	r3, r2
    95fc:	b2db      	uxtb	r3, r3
    95fe:	2b00      	cmp	r3, #0
    9600:	d004      	beq.n	960c <_ZN7Sd2Card4initEhh+0x23c>
    9602:	687b      	ldr	r3, [r7, #4]
    9604:	2103      	movs	r1, #3
    9606:	0018      	movs	r0, r3
    9608:	f7ff fda3 	bl	9152 <_ZN7Sd2Card4typeEh>
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    960c:	2325      	movs	r3, #37	; 0x25
    960e:	18fb      	adds	r3, r7, r3
    9610:	2200      	movs	r2, #0
    9612:	701a      	strb	r2, [r3, #0]
    9614:	2325      	movs	r3, #37	; 0x25
    9616:	18fb      	adds	r3, r7, r3
    9618:	781b      	ldrb	r3, [r3, #0]
    961a:	2b02      	cmp	r3, #2
    961c:	dc09      	bgt.n	9632 <_ZN7Sd2Card4initEhh+0x262>
    961e:	f7ff fe07 	bl	9230 <_ZL6spiRecv>
    9622:	2325      	movs	r3, #37	; 0x25
    9624:	18fb      	adds	r3, r7, r3
    9626:	781a      	ldrb	r2, [r3, #0]
    9628:	2325      	movs	r3, #37	; 0x25
    962a:	18fb      	adds	r3, r7, r3
    962c:	3201      	adds	r2, #1
    962e:	701a      	strb	r2, [r3, #0]
    9630:	e7f0      	b.n	9614 <_ZN7Sd2Card4initEhh+0x244>
  }
  chipSelectHigh();
    9632:	687b      	ldr	r3, [r7, #4]
    9634:	0018      	movs	r0, r3
    9636:	f7ff fe8b 	bl	9350 <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    963a:	1cfb      	adds	r3, r7, #3
    963c:	781a      	ldrb	r2, [r3, #0]
    963e:	687b      	ldr	r3, [r7, #4]
    9640:	0011      	movs	r1, r2
    9642:	0018      	movs	r0, r3
    9644:	f000 f900 	bl	9848 <_ZN7Sd2Card10setSckRateEh>
    9648:	0003      	movs	r3, r0
    964a:	e004      	b.n	9656 <_ZN7Sd2Card4initEhh+0x286>
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    964c:	687b      	ldr	r3, [r7, #4]
    964e:	0018      	movs	r0, r3
    9650:	f7ff fe7e 	bl	9350 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9654:	2300      	movs	r3, #0
}
    9656:	0018      	movs	r0, r3
    9658:	46bd      	mov	sp, r7
    965a:	b00a      	add	sp, #40	; 0x28
    965c:	bd80      	pop	{r7, pc}
    965e:	46c0      	nop			; (mov r8, r8)
    9660:	20000b7c 	.word	0x20000b7c
    9664:	0003d090 	.word	0x0003d090
    9668:	20000958 	.word	0x20000958

0000966c <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    966c:	b580      	push	{r7, lr}
    966e:	b086      	sub	sp, #24
    9670:	af02      	add	r7, sp, #8
    9672:	60f8      	str	r0, [r7, #12]
    9674:	60b9      	str	r1, [r7, #8]
    9676:	607a      	str	r2, [r7, #4]
  return readData(block, 0, 512, dst);
    9678:	2380      	movs	r3, #128	; 0x80
    967a:	009a      	lsls	r2, r3, #2
    967c:	68b9      	ldr	r1, [r7, #8]
    967e:	68f8      	ldr	r0, [r7, #12]
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	9300      	str	r3, [sp, #0]
    9684:	0013      	movs	r3, r2
    9686:	2200      	movs	r2, #0
    9688:	f000 f806 	bl	9698 <_ZN7Sd2Card8readDataEmttPh>
    968c:	0003      	movs	r3, r0
}
    968e:	0018      	movs	r0, r3
    9690:	46bd      	mov	sp, r7
    9692:	b004      	add	sp, #16
    9694:	bd80      	pop	{r7, pc}
	...

00009698 <_ZN7Sd2Card8readDataEmttPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    9698:	b590      	push	{r4, r7, lr}
    969a:	b087      	sub	sp, #28
    969c:	af00      	add	r7, sp, #0
    969e:	60f8      	str	r0, [r7, #12]
    96a0:	60b9      	str	r1, [r7, #8]
    96a2:	0019      	movs	r1, r3
    96a4:	1dbb      	adds	r3, r7, #6
    96a6:	801a      	strh	r2, [r3, #0]
    96a8:	1d3b      	adds	r3, r7, #4
    96aa:	1c0a      	adds	r2, r1, #0
    96ac:	801a      	strh	r2, [r3, #0]
  if (count == 0) return true;
    96ae:	1d3b      	adds	r3, r7, #4
    96b0:	881b      	ldrh	r3, [r3, #0]
    96b2:	2b00      	cmp	r3, #0
    96b4:	d101      	bne.n	96ba <_ZN7Sd2Card8readDataEmttPh+0x22>
    96b6:	2301      	movs	r3, #1
    96b8:	e097      	b.n	97ea <_ZN7Sd2Card8readDataEmttPh+0x152>
  if ((count + offset) > 512) {
    96ba:	1d3b      	adds	r3, r7, #4
    96bc:	881a      	ldrh	r2, [r3, #0]
    96be:	1dbb      	adds	r3, r7, #6
    96c0:	881b      	ldrh	r3, [r3, #0]
    96c2:	18d2      	adds	r2, r2, r3
    96c4:	2380      	movs	r3, #128	; 0x80
    96c6:	009b      	lsls	r3, r3, #2
    96c8:	429a      	cmp	r2, r3
    96ca:	dd00      	ble.n	96ce <_ZN7Sd2Card8readDataEmttPh+0x36>
    96cc:	e085      	b.n	97da <_ZN7Sd2Card8readDataEmttPh+0x142>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    96ce:	68fb      	ldr	r3, [r7, #12]
    96d0:	799b      	ldrb	r3, [r3, #6]
    96d2:	2b00      	cmp	r3, #0
    96d4:	d00a      	beq.n	96ec <_ZN7Sd2Card8readDataEmttPh+0x54>
    96d6:	68fb      	ldr	r3, [r7, #12]
    96d8:	681a      	ldr	r2, [r3, #0]
    96da:	68bb      	ldr	r3, [r7, #8]
    96dc:	429a      	cmp	r2, r3
    96de:	d105      	bne.n	96ec <_ZN7Sd2Card8readDataEmttPh+0x54>
    96e0:	1dbb      	adds	r3, r7, #6
    96e2:	881b      	ldrh	r3, [r3, #0]
    96e4:	68fa      	ldr	r2, [r7, #12]
    96e6:	8912      	ldrh	r2, [r2, #8]
    96e8:	4293      	cmp	r3, r2
    96ea:	da32      	bge.n	9752 <_ZN7Sd2Card8readDataEmttPh+0xba>
    block_ = block;
    96ec:	68fb      	ldr	r3, [r7, #12]
    96ee:	68ba      	ldr	r2, [r7, #8]
    96f0:	601a      	str	r2, [r3, #0]
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    96f2:	68fb      	ldr	r3, [r7, #12]
    96f4:	0018      	movs	r0, r3
    96f6:	f7ff fcf7 	bl	90e8 <_ZNK7Sd2Card4typeEv>
    96fa:	0003      	movs	r3, r0
    96fc:	3b03      	subs	r3, #3
    96fe:	1e5a      	subs	r2, r3, #1
    9700:	4193      	sbcs	r3, r2
    9702:	b2db      	uxtb	r3, r3
    9704:	2b00      	cmp	r3, #0
    9706:	d002      	beq.n	970e <_ZN7Sd2Card8readDataEmttPh+0x76>
    9708:	68bb      	ldr	r3, [r7, #8]
    970a:	025b      	lsls	r3, r3, #9
    970c:	60bb      	str	r3, [r7, #8]
    if (cardCommand(CMD17, block)) {
    970e:	68ba      	ldr	r2, [r7, #8]
    9710:	68fb      	ldr	r3, [r7, #12]
    9712:	2111      	movs	r1, #17
    9714:	0018      	movs	r0, r3
    9716:	f7ff fd99 	bl	924c <_ZN7Sd2Card11cardCommandEhm>
    971a:	0003      	movs	r3, r0
    971c:	1e5a      	subs	r2, r3, #1
    971e:	4193      	sbcs	r3, r2
    9720:	b2db      	uxtb	r3, r3
    9722:	2b00      	cmp	r3, #0
    9724:	d005      	beq.n	9732 <_ZN7Sd2Card8readDataEmttPh+0x9a>
      error(SD_CARD_ERROR_CMD17);
    9726:	68fb      	ldr	r3, [r7, #12]
    9728:	2103      	movs	r1, #3
    972a:	0018      	movs	r0, r3
    972c:	f7ff fd02 	bl	9134 <_ZN7Sd2Card5errorEh>
      goto fail;
    9730:	e056      	b.n	97e0 <_ZN7Sd2Card8readDataEmttPh+0x148>
    }
    if (!waitStartBlock()) {
    9732:	68fb      	ldr	r3, [r7, #12]
    9734:	0018      	movs	r0, r3
    9736:	f000 f945 	bl	99c4 <_ZN7Sd2Card14waitStartBlockEv>
    973a:	0003      	movs	r3, r0
    973c:	425a      	negs	r2, r3
    973e:	4153      	adcs	r3, r2
    9740:	b2db      	uxtb	r3, r3
    9742:	2b00      	cmp	r3, #0
    9744:	d14b      	bne.n	97de <_ZN7Sd2Card8readDataEmttPh+0x146>
      goto fail;
    }
    offset_ = 0;
    9746:	68fb      	ldr	r3, [r7, #12]
    9748:	2200      	movs	r2, #0
    974a:	811a      	strh	r2, [r3, #8]
    inBlock_ = 1;
    974c:	68fb      	ldr	r3, [r7, #12]
    974e:	2201      	movs	r2, #1
    9750:	719a      	strb	r2, [r3, #6]
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    9752:	68fb      	ldr	r3, [r7, #12]
    9754:	891b      	ldrh	r3, [r3, #8]
    9756:	001a      	movs	r2, r3
    9758:	1dbb      	adds	r3, r7, #6
    975a:	881b      	ldrh	r3, [r3, #0]
    975c:	429a      	cmp	r2, r3
    975e:	da08      	bge.n	9772 <_ZN7Sd2Card8readDataEmttPh+0xda>
    spiRec();
    9760:	f7ff fd66 	bl	9230 <_ZL6spiRecv>
  for (;offset_ < offset; offset_++) {
    9764:	68fb      	ldr	r3, [r7, #12]
    9766:	891b      	ldrh	r3, [r3, #8]
    9768:	3301      	adds	r3, #1
    976a:	b29a      	uxth	r2, r3
    976c:	68fb      	ldr	r3, [r7, #12]
    976e:	811a      	strh	r2, [r3, #8]
    9770:	e7ef      	b.n	9752 <_ZN7Sd2Card8readDataEmttPh+0xba>
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    9772:	2316      	movs	r3, #22
    9774:	18fb      	adds	r3, r7, r3
    9776:	2200      	movs	r2, #0
    9778:	801a      	strh	r2, [r3, #0]
    977a:	2316      	movs	r3, #22
    977c:	18fb      	adds	r3, r7, r3
    977e:	881a      	ldrh	r2, [r3, #0]
    9780:	1d3b      	adds	r3, r7, #4
    9782:	881b      	ldrh	r3, [r3, #0]
    9784:	429a      	cmp	r2, r3
    9786:	da10      	bge.n	97aa <_ZN7Sd2Card8readDataEmttPh+0x112>
    dst[i] = spiRec();
    9788:	2316      	movs	r3, #22
    978a:	18fb      	adds	r3, r7, r3
    978c:	881b      	ldrh	r3, [r3, #0]
    978e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9790:	18d4      	adds	r4, r2, r3
    9792:	f7ff fd4d 	bl	9230 <_ZL6spiRecv>
    9796:	0003      	movs	r3, r0
    9798:	7023      	strb	r3, [r4, #0]
  for (uint16_t i = 0; i < count; i++) {
    979a:	2316      	movs	r3, #22
    979c:	18fb      	adds	r3, r7, r3
    979e:	881a      	ldrh	r2, [r3, #0]
    97a0:	2316      	movs	r3, #22
    97a2:	18fb      	adds	r3, r7, r3
    97a4:	3201      	adds	r2, #1
    97a6:	801a      	strh	r2, [r3, #0]
    97a8:	e7e7      	b.n	977a <_ZN7Sd2Card8readDataEmttPh+0xe2>
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    97aa:	68fb      	ldr	r3, [r7, #12]
    97ac:	891a      	ldrh	r2, [r3, #8]
    97ae:	1d3b      	adds	r3, r7, #4
    97b0:	881b      	ldrh	r3, [r3, #0]
    97b2:	18d3      	adds	r3, r2, r3
    97b4:	b29a      	uxth	r2, r3
    97b6:	68fb      	ldr	r3, [r7, #12]
    97b8:	811a      	strh	r2, [r3, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    97ba:	68fb      	ldr	r3, [r7, #12]
    97bc:	7a9b      	ldrb	r3, [r3, #10]
    97be:	2b00      	cmp	r3, #0
    97c0:	d005      	beq.n	97ce <_ZN7Sd2Card8readDataEmttPh+0x136>
    97c2:	68fb      	ldr	r3, [r7, #12]
    97c4:	891b      	ldrh	r3, [r3, #8]
    97c6:	001a      	movs	r2, r3
    97c8:	4b0a      	ldr	r3, [pc, #40]	; (97f4 <_ZN7Sd2Card8readDataEmttPh+0x15c>)
    97ca:	429a      	cmp	r2, r3
    97cc:	dd03      	ble.n	97d6 <_ZN7Sd2Card8readDataEmttPh+0x13e>
    // read rest of data, checksum and set chip select high
    readEnd();
    97ce:	68fb      	ldr	r3, [r7, #12]
    97d0:	0018      	movs	r0, r3
    97d2:	f000 f811 	bl	97f8 <_ZN7Sd2Card7readEndEv>
  }
  return true;
    97d6:	2301      	movs	r3, #1
    97d8:	e007      	b.n	97ea <_ZN7Sd2Card8readDataEmttPh+0x152>
    goto fail;
    97da:	46c0      	nop			; (mov r8, r8)
    97dc:	e000      	b.n	97e0 <_ZN7Sd2Card8readDataEmttPh+0x148>
      goto fail;
    97de:	46c0      	nop			; (mov r8, r8)

 fail:
  chipSelectHigh();
    97e0:	68fb      	ldr	r3, [r7, #12]
    97e2:	0018      	movs	r0, r3
    97e4:	f7ff fdb4 	bl	9350 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    97e8:	2300      	movs	r3, #0
}
    97ea:	0018      	movs	r0, r3
    97ec:	46bd      	mov	sp, r7
    97ee:	b007      	add	sp, #28
    97f0:	bd90      	pop	{r4, r7, pc}
    97f2:	46c0      	nop			; (mov r8, r8)
    97f4:	000001ff 	.word	0x000001ff

000097f8 <_ZN7Sd2Card7readEndEv>:
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    97f8:	b580      	push	{r7, lr}
    97fa:	b082      	sub	sp, #8
    97fc:	af00      	add	r7, sp, #0
    97fe:	6078      	str	r0, [r7, #4]
  if (inBlock_) {
    9800:	687b      	ldr	r3, [r7, #4]
    9802:	799b      	ldrb	r3, [r3, #6]
    9804:	2b00      	cmp	r3, #0
    9806:	d019      	beq.n	983c <_ZN7Sd2Card7readEndEv+0x44>
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    9808:	687b      	ldr	r3, [r7, #4]
    980a:	891b      	ldrh	r3, [r3, #8]
    980c:	1c5a      	adds	r2, r3, #1
    980e:	b291      	uxth	r1, r2
    9810:	687a      	ldr	r2, [r7, #4]
    9812:	8111      	strh	r1, [r2, #8]
    9814:	001a      	movs	r2, r3
    9816:	4b0b      	ldr	r3, [pc, #44]	; (9844 <_ZN7Sd2Card7readEndEv+0x4c>)
    9818:	0fd0      	lsrs	r0, r2, #31
    981a:	17d9      	asrs	r1, r3, #31
    981c:	4293      	cmp	r3, r2
    981e:	4148      	adcs	r0, r1
    9820:	0003      	movs	r3, r0
    9822:	b2db      	uxtb	r3, r3
    9824:	2b00      	cmp	r3, #0
    9826:	d002      	beq.n	982e <_ZN7Sd2Card7readEndEv+0x36>
    9828:	f7ff fd02 	bl	9230 <_ZL6spiRecv>
    982c:	e7ec      	b.n	9808 <_ZN7Sd2Card7readEndEv+0x10>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    982e:	687b      	ldr	r3, [r7, #4]
    9830:	0018      	movs	r0, r3
    9832:	f7ff fd8d 	bl	9350 <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    9836:	687b      	ldr	r3, [r7, #4]
    9838:	2200      	movs	r2, #0
    983a:	719a      	strb	r2, [r3, #6]
  }
}
    983c:	46c0      	nop			; (mov r8, r8)
    983e:	46bd      	mov	sp, r7
    9840:	b002      	add	sp, #8
    9842:	bd80      	pop	{r7, pc}
    9844:	00000201 	.word	0x00000201

00009848 <_ZN7Sd2Card10setSckRateEh>:
 * for \a scsRateID = 6.
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
    9848:	b580      	push	{r7, lr}
    984a:	b090      	sub	sp, #64	; 0x40
    984c:	af00      	add	r7, sp, #0
    984e:	6078      	str	r0, [r7, #4]
    9850:	000a      	movs	r2, r1
    9852:	1cfb      	adds	r3, r7, #3
    9854:	701a      	strb	r2, [r3, #0]
  if (sckRateID > 6) {
    9856:	1cfb      	adds	r3, r7, #3
    9858:	781b      	ldrb	r3, [r3, #0]
    985a:	2b06      	cmp	r3, #6
    985c:	dd06      	ble.n	986c <_ZN7Sd2Card10setSckRateEh+0x24>
    error(SD_CARD_ERROR_SCK_RATE);
    985e:	687b      	ldr	r3, [r7, #4]
    9860:	2116      	movs	r1, #22
    9862:	0018      	movs	r0, r3
    9864:	f7ff fc66 	bl	9134 <_ZN7Sd2Card5errorEh>
    return false;
    9868:	2300      	movs	r3, #0
    986a:	e071      	b.n	9950 <_ZN7Sd2Card10setSckRateEh+0x108>
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    986c:	1cfb      	adds	r3, r7, #3
    986e:	781b      	ldrb	r3, [r3, #0]
    9870:	2b05      	cmp	r3, #5
    9872:	d85e      	bhi.n	9932 <_ZN7Sd2Card10setSckRateEh+0xea>
    9874:	009a      	lsls	r2, r3, #2
    9876:	4b38      	ldr	r3, [pc, #224]	; (9958 <_ZN7Sd2Card10setSckRateEh+0x110>)
    9878:	18d3      	adds	r3, r2, r3
    987a:	681b      	ldr	r3, [r3, #0]
    987c:	469f      	mov	pc, r3
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    987e:	4937      	ldr	r1, [pc, #220]	; (995c <_ZN7Sd2Card10setSckRateEh+0x114>)
    9880:	2308      	movs	r3, #8
    9882:	18f8      	adds	r0, r7, r3
    9884:	2302      	movs	r3, #2
    9886:	2201      	movs	r2, #1
    9888:	f7fd ff14 	bl	76b4 <_ZN11SPISettingsC1Em8BitOrderh>
    988c:	4b34      	ldr	r3, [pc, #208]	; (9960 <_ZN7Sd2Card10setSckRateEh+0x118>)
    988e:	2208      	movs	r2, #8
    9890:	18ba      	adds	r2, r7, r2
    9892:	6811      	ldr	r1, [r2, #0]
    9894:	6019      	str	r1, [r3, #0]
    9896:	8892      	ldrh	r2, [r2, #4]
    9898:	809a      	strh	r2, [r3, #4]
    989a:	e058      	b.n	994e <_ZN7Sd2Card10setSckRateEh+0x106>
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    989c:	4931      	ldr	r1, [pc, #196]	; (9964 <_ZN7Sd2Card10setSckRateEh+0x11c>)
    989e:	2310      	movs	r3, #16
    98a0:	18f8      	adds	r0, r7, r3
    98a2:	2302      	movs	r3, #2
    98a4:	2201      	movs	r2, #1
    98a6:	f7fd ff05 	bl	76b4 <_ZN11SPISettingsC1Em8BitOrderh>
    98aa:	4b2d      	ldr	r3, [pc, #180]	; (9960 <_ZN7Sd2Card10setSckRateEh+0x118>)
    98ac:	2210      	movs	r2, #16
    98ae:	18ba      	adds	r2, r7, r2
    98b0:	6811      	ldr	r1, [r2, #0]
    98b2:	6019      	str	r1, [r3, #0]
    98b4:	8892      	ldrh	r2, [r2, #4]
    98b6:	809a      	strh	r2, [r3, #4]
    98b8:	e049      	b.n	994e <_ZN7Sd2Card10setSckRateEh+0x106>
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    98ba:	492b      	ldr	r1, [pc, #172]	; (9968 <_ZN7Sd2Card10setSckRateEh+0x120>)
    98bc:	2318      	movs	r3, #24
    98be:	18f8      	adds	r0, r7, r3
    98c0:	2302      	movs	r3, #2
    98c2:	2201      	movs	r2, #1
    98c4:	f7fd fef6 	bl	76b4 <_ZN11SPISettingsC1Em8BitOrderh>
    98c8:	4b25      	ldr	r3, [pc, #148]	; (9960 <_ZN7Sd2Card10setSckRateEh+0x118>)
    98ca:	2218      	movs	r2, #24
    98cc:	18ba      	adds	r2, r7, r2
    98ce:	6811      	ldr	r1, [r2, #0]
    98d0:	6019      	str	r1, [r3, #0]
    98d2:	8892      	ldrh	r2, [r2, #4]
    98d4:	809a      	strh	r2, [r3, #4]
    98d6:	e03a      	b.n	994e <_ZN7Sd2Card10setSckRateEh+0x106>
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    98d8:	4924      	ldr	r1, [pc, #144]	; (996c <_ZN7Sd2Card10setSckRateEh+0x124>)
    98da:	2320      	movs	r3, #32
    98dc:	18f8      	adds	r0, r7, r3
    98de:	2302      	movs	r3, #2
    98e0:	2201      	movs	r2, #1
    98e2:	f7fd fee7 	bl	76b4 <_ZN11SPISettingsC1Em8BitOrderh>
    98e6:	4b1e      	ldr	r3, [pc, #120]	; (9960 <_ZN7Sd2Card10setSckRateEh+0x118>)
    98e8:	2220      	movs	r2, #32
    98ea:	18ba      	adds	r2, r7, r2
    98ec:	6811      	ldr	r1, [r2, #0]
    98ee:	6019      	str	r1, [r3, #0]
    98f0:	8892      	ldrh	r2, [r2, #4]
    98f2:	809a      	strh	r2, [r3, #4]
    98f4:	e02b      	b.n	994e <_ZN7Sd2Card10setSckRateEh+0x106>
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    98f6:	491e      	ldr	r1, [pc, #120]	; (9970 <_ZN7Sd2Card10setSckRateEh+0x128>)
    98f8:	2328      	movs	r3, #40	; 0x28
    98fa:	18f8      	adds	r0, r7, r3
    98fc:	2302      	movs	r3, #2
    98fe:	2201      	movs	r2, #1
    9900:	f7fd fed8 	bl	76b4 <_ZN11SPISettingsC1Em8BitOrderh>
    9904:	4b16      	ldr	r3, [pc, #88]	; (9960 <_ZN7Sd2Card10setSckRateEh+0x118>)
    9906:	2228      	movs	r2, #40	; 0x28
    9908:	18ba      	adds	r2, r7, r2
    990a:	6811      	ldr	r1, [r2, #0]
    990c:	6019      	str	r1, [r3, #0]
    990e:	8892      	ldrh	r2, [r2, #4]
    9910:	809a      	strh	r2, [r3, #4]
    9912:	e01c      	b.n	994e <_ZN7Sd2Card10setSckRateEh+0x106>
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    9914:	4917      	ldr	r1, [pc, #92]	; (9974 <_ZN7Sd2Card10setSckRateEh+0x12c>)
    9916:	2330      	movs	r3, #48	; 0x30
    9918:	18f8      	adds	r0, r7, r3
    991a:	2302      	movs	r3, #2
    991c:	2201      	movs	r2, #1
    991e:	f7fd fec9 	bl	76b4 <_ZN11SPISettingsC1Em8BitOrderh>
    9922:	4b0f      	ldr	r3, [pc, #60]	; (9960 <_ZN7Sd2Card10setSckRateEh+0x118>)
    9924:	2230      	movs	r2, #48	; 0x30
    9926:	18ba      	adds	r2, r7, r2
    9928:	6811      	ldr	r1, [r2, #0]
    992a:	6019      	str	r1, [r3, #0]
    992c:	8892      	ldrh	r2, [r2, #4]
    992e:	809a      	strh	r2, [r3, #4]
    9930:	e00d      	b.n	994e <_ZN7Sd2Card10setSckRateEh+0x106>
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    9932:	4911      	ldr	r1, [pc, #68]	; (9978 <_ZN7Sd2Card10setSckRateEh+0x130>)
    9934:	2338      	movs	r3, #56	; 0x38
    9936:	18f8      	adds	r0, r7, r3
    9938:	2302      	movs	r3, #2
    993a:	2201      	movs	r2, #1
    993c:	f7fd feba 	bl	76b4 <_ZN11SPISettingsC1Em8BitOrderh>
    9940:	4b07      	ldr	r3, [pc, #28]	; (9960 <_ZN7Sd2Card10setSckRateEh+0x118>)
    9942:	2238      	movs	r2, #56	; 0x38
    9944:	18ba      	adds	r2, r7, r2
    9946:	6811      	ldr	r1, [r2, #0]
    9948:	6019      	str	r1, [r3, #0]
    994a:	8892      	ldrh	r2, [r2, #4]
    994c:	809a      	strh	r2, [r3, #4]
  }
#endif // USE_SPI_LIB
  return true;
    994e:	2301      	movs	r3, #1
}
    9950:	0018      	movs	r0, r3
    9952:	46bd      	mov	sp, r7
    9954:	b010      	add	sp, #64	; 0x40
    9956:	bd80      	pop	{r7, pc}
    9958:	00013630 	.word	0x00013630
    995c:	017d7840 	.word	0x017d7840
    9960:	20000958 	.word	0x20000958
    9964:	003d0900 	.word	0x003d0900
    9968:	001e8480 	.word	0x001e8480
    996c:	000f4240 	.word	0x000f4240
    9970:	0007a120 	.word	0x0007a120
    9974:	0003d090 	.word	0x0003d090
    9978:	0001e848 	.word	0x0001e848

0000997c <_ZN7Sd2Card11waitNotBusyEj>:
  return true;
}
#endif
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    997c:	b580      	push	{r7, lr}
    997e:	b084      	sub	sp, #16
    9980:	af00      	add	r7, sp, #0
    9982:	6078      	str	r0, [r7, #4]
    9984:	6039      	str	r1, [r7, #0]
  unsigned int t0 = millis();
    9986:	f7f9 fa71 	bl	2e6c <millis>
    998a:	0003      	movs	r3, r0
    998c:	60fb      	str	r3, [r7, #12]
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    998e:	f7ff fc4f 	bl	9230 <_ZL6spiRecv>
    9992:	0003      	movs	r3, r0
    9994:	3bff      	subs	r3, #255	; 0xff
    9996:	425a      	negs	r2, r3
    9998:	4153      	adcs	r3, r2
    999a:	b2db      	uxtb	r3, r3
    999c:	2b00      	cmp	r3, #0
    999e:	d001      	beq.n	99a4 <_ZN7Sd2Card11waitNotBusyEj+0x28>
    99a0:	2301      	movs	r3, #1
    99a2:	e00b      	b.n	99bc <_ZN7Sd2Card11waitNotBusyEj+0x40>
    d = millis() - t0;
    99a4:	f7f9 fa62 	bl	2e6c <millis>
    99a8:	0002      	movs	r2, r0
    99aa:	68fb      	ldr	r3, [r7, #12]
    99ac:	1ad3      	subs	r3, r2, r3
    99ae:	60bb      	str	r3, [r7, #8]
  }
  while (d < timeoutMillis);
    99b0:	68ba      	ldr	r2, [r7, #8]
    99b2:	683b      	ldr	r3, [r7, #0]
    99b4:	429a      	cmp	r2, r3
    99b6:	d200      	bcs.n	99ba <_ZN7Sd2Card11waitNotBusyEj+0x3e>
  do {
    99b8:	e7e9      	b.n	998e <_ZN7Sd2Card11waitNotBusyEj+0x12>
  return false;
    99ba:	2300      	movs	r3, #0
}
    99bc:	0018      	movs	r0, r3
    99be:	46bd      	mov	sp, r7
    99c0:	b004      	add	sp, #16
    99c2:	bd80      	pop	{r7, pc}

000099c4 <_ZN7Sd2Card14waitStartBlockEv>:
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    99c4:	b580      	push	{r7, lr}
    99c6:	b084      	sub	sp, #16
    99c8:	af00      	add	r7, sp, #0
    99ca:	6078      	str	r0, [r7, #4]
  unsigned int t0 = millis();
    99cc:	f7f9 fa4e 	bl	2e6c <millis>
    99d0:	0003      	movs	r3, r0
    99d2:	60fb      	str	r3, [r7, #12]
  while ((status_ = spiRec()) == 0XFF) {
    99d4:	f7ff fc2c 	bl	9230 <_ZL6spiRecv>
    99d8:	0003      	movs	r3, r0
    99da:	001a      	movs	r2, r3
    99dc:	687b      	ldr	r3, [r7, #4]
    99de:	72da      	strb	r2, [r3, #11]
    99e0:	687b      	ldr	r3, [r7, #4]
    99e2:	7adb      	ldrb	r3, [r3, #11]
    99e4:	3bff      	subs	r3, #255	; 0xff
    99e6:	425a      	negs	r2, r3
    99e8:	4153      	adcs	r3, r2
    99ea:	b2db      	uxtb	r3, r3
    99ec:	2b00      	cmp	r3, #0
    99ee:	d010      	beq.n	9a12 <_ZN7Sd2Card14waitStartBlockEv+0x4e>
    unsigned int d = millis() - t0;
    99f0:	f7f9 fa3c 	bl	2e6c <millis>
    99f4:	0002      	movs	r2, r0
    99f6:	68fb      	ldr	r3, [r7, #12]
    99f8:	1ad3      	subs	r3, r2, r3
    99fa:	60bb      	str	r3, [r7, #8]
    if (d > SD_READ_TIMEOUT) {
    99fc:	68ba      	ldr	r2, [r7, #8]
    99fe:	2396      	movs	r3, #150	; 0x96
    9a00:	005b      	lsls	r3, r3, #1
    9a02:	429a      	cmp	r2, r3
    9a04:	d9e6      	bls.n	99d4 <_ZN7Sd2Card14waitStartBlockEv+0x10>
      error(SD_CARD_ERROR_READ_TIMEOUT);
    9a06:	687b      	ldr	r3, [r7, #4]
    9a08:	210f      	movs	r1, #15
    9a0a:	0018      	movs	r0, r3
    9a0c:	f7ff fb92 	bl	9134 <_ZN7Sd2Card5errorEh>
      goto fail;
    9a10:	e00b      	b.n	9a2a <_ZN7Sd2Card14waitStartBlockEv+0x66>
    }
  }
  if (status_ != DATA_START_BLOCK) {
    9a12:	687b      	ldr	r3, [r7, #4]
    9a14:	7adb      	ldrb	r3, [r3, #11]
    9a16:	2bfe      	cmp	r3, #254	; 0xfe
    9a18:	d005      	beq.n	9a26 <_ZN7Sd2Card14waitStartBlockEv+0x62>
    error(SD_CARD_ERROR_READ);
    9a1a:	687b      	ldr	r3, [r7, #4]
    9a1c:	210d      	movs	r1, #13
    9a1e:	0018      	movs	r0, r3
    9a20:	f7ff fb88 	bl	9134 <_ZN7Sd2Card5errorEh>
    goto fail;
    9a24:	e001      	b.n	9a2a <_ZN7Sd2Card14waitStartBlockEv+0x66>
  }
  return true;
    9a26:	2301      	movs	r3, #1
    9a28:	e004      	b.n	9a34 <_ZN7Sd2Card14waitStartBlockEv+0x70>

 fail:
  chipSelectHigh();
    9a2a:	687b      	ldr	r3, [r7, #4]
    9a2c:	0018      	movs	r0, r3
    9a2e:	f7ff fc8f 	bl	9350 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9a32:	2300      	movs	r3, #0
}
    9a34:	0018      	movs	r0, r3
    9a36:	46bd      	mov	sp, r7
    9a38:	b004      	add	sp, #16
    9a3a:	bd80      	pop	{r7, pc}

00009a3c <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    9a3c:	b580      	push	{r7, lr}
    9a3e:	b084      	sub	sp, #16
    9a40:	af00      	add	r7, sp, #0
    9a42:	60f8      	str	r0, [r7, #12]
    9a44:	60b9      	str	r1, [r7, #8]
    9a46:	607a      	str	r2, [r7, #4]
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    9a48:	68bb      	ldr	r3, [r7, #8]
    9a4a:	2b00      	cmp	r3, #0
    9a4c:	d105      	bne.n	9a5a <_ZN7Sd2Card10writeBlockEmPKh+0x1e>
    error(SD_CARD_ERROR_WRITE_BLOCK_ZERO);
    9a4e:	68fb      	ldr	r3, [r7, #12]
    9a50:	2112      	movs	r1, #18
    9a52:	0018      	movs	r0, r3
    9a54:	f7ff fb6e 	bl	9134 <_ZN7Sd2Card5errorEh>
    goto fail;
    9a58:	e05c      	b.n	9b14 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    9a5a:	68fb      	ldr	r3, [r7, #12]
    9a5c:	0018      	movs	r0, r3
    9a5e:	f7ff fb43 	bl	90e8 <_ZNK7Sd2Card4typeEv>
    9a62:	0003      	movs	r3, r0
    9a64:	3b03      	subs	r3, #3
    9a66:	1e5a      	subs	r2, r3, #1
    9a68:	4193      	sbcs	r3, r2
    9a6a:	b2db      	uxtb	r3, r3
    9a6c:	2b00      	cmp	r3, #0
    9a6e:	d002      	beq.n	9a76 <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
    9a70:	68bb      	ldr	r3, [r7, #8]
    9a72:	025b      	lsls	r3, r3, #9
    9a74:	60bb      	str	r3, [r7, #8]
  if (cardCommand(CMD24, blockNumber)) {
    9a76:	68ba      	ldr	r2, [r7, #8]
    9a78:	68fb      	ldr	r3, [r7, #12]
    9a7a:	2118      	movs	r1, #24
    9a7c:	0018      	movs	r0, r3
    9a7e:	f7ff fbe5 	bl	924c <_ZN7Sd2Card11cardCommandEhm>
    9a82:	0003      	movs	r3, r0
    9a84:	1e5a      	subs	r2, r3, #1
    9a86:	4193      	sbcs	r3, r2
    9a88:	b2db      	uxtb	r3, r3
    9a8a:	2b00      	cmp	r3, #0
    9a8c:	d005      	beq.n	9a9a <_ZN7Sd2Card10writeBlockEmPKh+0x5e>
    error(SD_CARD_ERROR_CMD24);
    9a8e:	68fb      	ldr	r3, [r7, #12]
    9a90:	2104      	movs	r1, #4
    9a92:	0018      	movs	r0, r3
    9a94:	f7ff fb4e 	bl	9134 <_ZN7Sd2Card5errorEh>
    goto fail;
    9a98:	e03c      	b.n	9b14 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    9a9a:	687a      	ldr	r2, [r7, #4]
    9a9c:	68fb      	ldr	r3, [r7, #12]
    9a9e:	21fe      	movs	r1, #254	; 0xfe
    9aa0:	0018      	movs	r0, r3
    9aa2:	f000 f841 	bl	9b28 <_ZN7Sd2Card9writeDataEhPKh>
    9aa6:	0003      	movs	r3, r0
    9aa8:	425a      	negs	r2, r3
    9aaa:	4153      	adcs	r3, r2
    9aac:	b2db      	uxtb	r3, r3
    9aae:	2b00      	cmp	r3, #0
    9ab0:	d12f      	bne.n	9b12 <_ZN7Sd2Card10writeBlockEmPKh+0xd6>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    9ab2:	2396      	movs	r3, #150	; 0x96
    9ab4:	009a      	lsls	r2, r3, #2
    9ab6:	68fb      	ldr	r3, [r7, #12]
    9ab8:	0011      	movs	r1, r2
    9aba:	0018      	movs	r0, r3
    9abc:	f7ff ff5e 	bl	997c <_ZN7Sd2Card11waitNotBusyEj>
    9ac0:	0003      	movs	r3, r0
    9ac2:	425a      	negs	r2, r3
    9ac4:	4153      	adcs	r3, r2
    9ac6:	b2db      	uxtb	r3, r3
    9ac8:	2b00      	cmp	r3, #0
    9aca:	d005      	beq.n	9ad8 <_ZN7Sd2Card10writeBlockEmPKh+0x9c>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    9acc:	68fb      	ldr	r3, [r7, #12]
    9ace:	2115      	movs	r1, #21
    9ad0:	0018      	movs	r0, r3
    9ad2:	f7ff fb2f 	bl	9134 <_ZN7Sd2Card5errorEh>
    goto fail;
    9ad6:	e01d      	b.n	9b14 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    9ad8:	68fb      	ldr	r3, [r7, #12]
    9ada:	2200      	movs	r2, #0
    9adc:	210d      	movs	r1, #13
    9ade:	0018      	movs	r0, r3
    9ae0:	f7ff fbb4 	bl	924c <_ZN7Sd2Card11cardCommandEhm>
    9ae4:	1e03      	subs	r3, r0, #0
    9ae6:	d103      	bne.n	9af0 <_ZN7Sd2Card10writeBlockEmPKh+0xb4>
    9ae8:	f7ff fba2 	bl	9230 <_ZL6spiRecv>
    9aec:	1e03      	subs	r3, r0, #0
    9aee:	d001      	beq.n	9af4 <_ZN7Sd2Card10writeBlockEmPKh+0xb8>
    9af0:	2301      	movs	r3, #1
    9af2:	e000      	b.n	9af6 <_ZN7Sd2Card10writeBlockEmPKh+0xba>
    9af4:	2300      	movs	r3, #0
    9af6:	2b00      	cmp	r3, #0
    9af8:	d005      	beq.n	9b06 <_ZN7Sd2Card10writeBlockEmPKh+0xca>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    9afa:	68fb      	ldr	r3, [r7, #12]
    9afc:	2114      	movs	r1, #20
    9afe:	0018      	movs	r0, r3
    9b00:	f7ff fb18 	bl	9134 <_ZN7Sd2Card5errorEh>
    goto fail;
    9b04:	e006      	b.n	9b14 <_ZN7Sd2Card10writeBlockEmPKh+0xd8>
  }
  chipSelectHigh();
    9b06:	68fb      	ldr	r3, [r7, #12]
    9b08:	0018      	movs	r0, r3
    9b0a:	f7ff fc21 	bl	9350 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    9b0e:	2301      	movs	r3, #1
    9b10:	e005      	b.n	9b1e <_ZN7Sd2Card10writeBlockEmPKh+0xe2>
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    9b12:	46c0      	nop			; (mov r8, r8)

 fail:
  chipSelectHigh();
    9b14:	68fb      	ldr	r3, [r7, #12]
    9b16:	0018      	movs	r0, r3
    9b18:	f7ff fc1a 	bl	9350 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    9b1c:	2300      	movs	r3, #0
}
    9b1e:	0018      	movs	r0, r3
    9b20:	46bd      	mov	sp, r7
    9b22:	b004      	add	sp, #16
    9b24:	bd80      	pop	{r7, pc}
	...

00009b28 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    9b28:	b580      	push	{r7, lr}
    9b2a:	b086      	sub	sp, #24
    9b2c:	af00      	add	r7, sp, #0
    9b2e:	60f8      	str	r0, [r7, #12]
    9b30:	607a      	str	r2, [r7, #4]
    9b32:	230b      	movs	r3, #11
    9b34:	18fb      	adds	r3, r7, r3
    9b36:	1c0a      	adds	r2, r1, #0
    9b38:	701a      	strb	r2, [r3, #0]
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
    9b3a:	230b      	movs	r3, #11
    9b3c:	18fb      	adds	r3, r7, r3
    9b3e:	781b      	ldrb	r3, [r3, #0]
    9b40:	0018      	movs	r0, r3
    9b42:	f7ff fb61 	bl	9208 <_ZL7spiSendh>
  for (uint16_t i = 0; i < 512; i++) {
    9b46:	2316      	movs	r3, #22
    9b48:	18fb      	adds	r3, r7, r3
    9b4a:	2200      	movs	r2, #0
    9b4c:	801a      	strh	r2, [r3, #0]
    9b4e:	2316      	movs	r3, #22
    9b50:	18fb      	adds	r3, r7, r3
    9b52:	881b      	ldrh	r3, [r3, #0]
    9b54:	4a1b      	ldr	r2, [pc, #108]	; (9bc4 <_ZN7Sd2Card9writeDataEhPKh+0x9c>)
    9b56:	4293      	cmp	r3, r2
    9b58:	dc10      	bgt.n	9b7c <_ZN7Sd2Card9writeDataEhPKh+0x54>
    spiSend(src[i]);
    9b5a:	2316      	movs	r3, #22
    9b5c:	18fb      	adds	r3, r7, r3
    9b5e:	881b      	ldrh	r3, [r3, #0]
    9b60:	687a      	ldr	r2, [r7, #4]
    9b62:	18d3      	adds	r3, r2, r3
    9b64:	781b      	ldrb	r3, [r3, #0]
    9b66:	0018      	movs	r0, r3
    9b68:	f7ff fb4e 	bl	9208 <_ZL7spiSendh>
  for (uint16_t i = 0; i < 512; i++) {
    9b6c:	2316      	movs	r3, #22
    9b6e:	18fb      	adds	r3, r7, r3
    9b70:	881a      	ldrh	r2, [r3, #0]
    9b72:	2316      	movs	r3, #22
    9b74:	18fb      	adds	r3, r7, r3
    9b76:	3201      	adds	r2, #1
    9b78:	801a      	strh	r2, [r3, #0]
    9b7a:	e7e8      	b.n	9b4e <_ZN7Sd2Card9writeDataEhPKh+0x26>
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
    9b7c:	20ff      	movs	r0, #255	; 0xff
    9b7e:	f7ff fb43 	bl	9208 <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
    9b82:	20ff      	movs	r0, #255	; 0xff
    9b84:	f7ff fb40 	bl	9208 <_ZL7spiSendh>

  status_ = spiRec();
    9b88:	f7ff fb52 	bl	9230 <_ZL6spiRecv>
    9b8c:	0003      	movs	r3, r0
    9b8e:	001a      	movs	r2, r3
    9b90:	68fb      	ldr	r3, [r7, #12]
    9b92:	72da      	strb	r2, [r3, #11]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    9b94:	68fb      	ldr	r3, [r7, #12]
    9b96:	7adb      	ldrb	r3, [r3, #11]
    9b98:	001a      	movs	r2, r3
    9b9a:	231f      	movs	r3, #31
    9b9c:	4013      	ands	r3, r2
    9b9e:	2b05      	cmp	r3, #5
    9ba0:	d00a      	beq.n	9bb8 <_ZN7Sd2Card9writeDataEhPKh+0x90>
    error(SD_CARD_ERROR_WRITE);
    9ba2:	68fb      	ldr	r3, [r7, #12]
    9ba4:	2111      	movs	r1, #17
    9ba6:	0018      	movs	r0, r3
    9ba8:	f7ff fac4 	bl	9134 <_ZN7Sd2Card5errorEh>
    chipSelectHigh();
    9bac:	68fb      	ldr	r3, [r7, #12]
    9bae:	0018      	movs	r0, r3
    9bb0:	f7ff fbce 	bl	9350 <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    9bb4:	2300      	movs	r3, #0
    9bb6:	e000      	b.n	9bba <_ZN7Sd2Card9writeDataEhPKh+0x92>
  }
  return true;
    9bb8:	2301      	movs	r3, #1
}
    9bba:	0018      	movs	r0, r3
    9bbc:	46bd      	mov	sp, r7
    9bbe:	b006      	add	sp, #24
    9bc0:	bd80      	pop	{r7, pc}
    9bc2:	46c0      	nop			; (mov r8, r8)
    9bc4:	000001ff 	.word	0x000001ff

00009bc8 <_Z41__static_initialization_and_destruction_0ii>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    9bc8:	b580      	push	{r7, lr}
    9bca:	b082      	sub	sp, #8
    9bcc:	af00      	add	r7, sp, #0
    9bce:	6078      	str	r0, [r7, #4]
    9bd0:	6039      	str	r1, [r7, #0]
    9bd2:	687b      	ldr	r3, [r7, #4]
    9bd4:	2b01      	cmp	r3, #1
    9bd6:	d107      	bne.n	9be8 <_Z41__static_initialization_and_destruction_0ii+0x20>
    9bd8:	683b      	ldr	r3, [r7, #0]
    9bda:	4a05      	ldr	r2, [pc, #20]	; (9bf0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    9bdc:	4293      	cmp	r3, r2
    9bde:	d103      	bne.n	9be8 <_Z41__static_initialization_and_destruction_0ii+0x20>
static SPISettings settings;
    9be0:	4b04      	ldr	r3, [pc, #16]	; (9bf4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    9be2:	0018      	movs	r0, r3
    9be4:	f7ff fac4 	bl	9170 <_ZN11SPISettingsC1Ev>
}
    9be8:	46c0      	nop			; (mov r8, r8)
    9bea:	46bd      	mov	sp, r7
    9bec:	b002      	add	sp, #8
    9bee:	bd80      	pop	{r7, pc}
    9bf0:	0000ffff 	.word	0x0000ffff
    9bf4:	20000958 	.word	0x20000958

00009bf8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    9bf8:	b580      	push	{r7, lr}
    9bfa:	af00      	add	r7, sp, #0
    9bfc:	4b03      	ldr	r3, [pc, #12]	; (9c0c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x14>)
    9bfe:	0019      	movs	r1, r3
    9c00:	2001      	movs	r0, #1
    9c02:	f7ff ffe1 	bl	9bc8 <_Z41__static_initialization_and_destruction_0ii>
    9c06:	46bd      	mov	sp, r7
    9c08:	bd80      	pop	{r7, pc}
    9c0a:	46c0      	nop			; (mov r8, r8)
    9c0c:	0000ffff 	.word	0x0000ffff

00009c10 <_ZL11DIR_IS_FILEPK14directoryEntry>:
  return (dir->attributes & DIR_ATT_LONG_NAME_MASK) == DIR_ATT_LONG_NAME;
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
    9c10:	b580      	push	{r7, lr}
    9c12:	b082      	sub	sp, #8
    9c14:	af00      	add	r7, sp, #0
    9c16:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    9c18:	687b      	ldr	r3, [r7, #4]
    9c1a:	7adb      	ldrb	r3, [r3, #11]
    9c1c:	001a      	movs	r2, r3
    9c1e:	2318      	movs	r3, #24
    9c20:	4013      	ands	r3, r2
    9c22:	425a      	negs	r2, r3
    9c24:	4153      	adcs	r3, r2
    9c26:	b2db      	uxtb	r3, r3
}
    9c28:	0018      	movs	r0, r3
    9c2a:	46bd      	mov	sp, r7
    9c2c:	b002      	add	sp, #8
    9c2e:	bd80      	pop	{r7, pc}

00009c30 <_ZL13DIR_IS_SUBDIRPK14directoryEntry>:
/** Directory entry is for a subdirectory */
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
    9c30:	b580      	push	{r7, lr}
    9c32:	b082      	sub	sp, #8
    9c34:	af00      	add	r7, sp, #0
    9c36:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
    9c38:	687b      	ldr	r3, [r7, #4]
    9c3a:	7adb      	ldrb	r3, [r3, #11]
    9c3c:	001a      	movs	r2, r3
    9c3e:	2318      	movs	r3, #24
    9c40:	4013      	ands	r3, r2
    9c42:	3b10      	subs	r3, #16
    9c44:	425a      	negs	r2, r3
    9c46:	4153      	adcs	r3, r2
    9c48:	b2db      	uxtb	r3, r3
}
    9c4a:	0018      	movs	r0, r3
    9c4c:	46bd      	mov	sp, r7
    9c4e:	b002      	add	sp, #8
    9c50:	bd80      	pop	{r7, pc}

00009c52 <_ZNK6SdFile6isFileEv>:
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
    9c52:	b580      	push	{r7, lr}
    9c54:	b082      	sub	sp, #8
    9c56:	af00      	add	r7, sp, #0
    9c58:	6078      	str	r0, [r7, #4]
    9c5a:	687b      	ldr	r3, [r7, #4]
    9c5c:	7a5b      	ldrb	r3, [r3, #9]
    9c5e:	3b01      	subs	r3, #1
    9c60:	425a      	negs	r2, r3
    9c62:	4153      	adcs	r3, r2
    9c64:	b2db      	uxtb	r3, r3
    9c66:	0018      	movs	r0, r3
    9c68:	46bd      	mov	sp, r7
    9c6a:	b002      	add	sp, #8
    9c6c:	bd80      	pop	{r7, pc}

00009c6e <_ZN6SdFile7seekEndEv>:
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    9c6e:	b580      	push	{r7, lr}
    9c70:	b082      	sub	sp, #8
    9c72:	af00      	add	r7, sp, #0
    9c74:	6078      	str	r0, [r7, #4]
    9c76:	687b      	ldr	r3, [r7, #4]
    9c78:	69da      	ldr	r2, [r3, #28]
    9c7a:	687b      	ldr	r3, [r7, #4]
    9c7c:	0011      	movs	r1, r2
    9c7e:	0018      	movs	r0, r3
    9c80:	f000 fdda 	bl	a838 <_ZN6SdFile7seekSetEm>
    9c84:	0003      	movs	r3, r0
    9c86:	0018      	movs	r0, r3
    9c88:	46bd      	mov	sp, r7
    9c8a:	b002      	add	sp, #8
    9c8c:	bd80      	pop	{r7, pc}

00009c8e <_ZNK6SdFile14unbufferedReadEv>:
  uint8_t unbufferedRead(void) const {
    9c8e:	b580      	push	{r7, lr}
    9c90:	b082      	sub	sp, #8
    9c92:	af00      	add	r7, sp, #0
    9c94:	6078      	str	r0, [r7, #4]
    return flags_ & F_FILE_UNBUFFERED_READ;
    9c96:	687b      	ldr	r3, [r7, #4]
    9c98:	7a1b      	ldrb	r3, [r3, #8]
    9c9a:	2240      	movs	r2, #64	; 0x40
    9c9c:	4013      	ands	r3, r2
    9c9e:	b2db      	uxtb	r3, r3
  }
    9ca0:	0018      	movs	r0, r3
    9ca2:	46bd      	mov	sp, r7
    9ca4:	b002      	add	sp, #8
    9ca6:	bd80      	pop	{r7, pc}

00009ca8 <_ZNK8SdVolume7fatTypeEv>:
  uint8_t fatType(void) const {return fatType_;}
    9ca8:	b580      	push	{r7, lr}
    9caa:	b082      	sub	sp, #8
    9cac:	af00      	add	r7, sp, #0
    9cae:	6078      	str	r0, [r7, #4]
    9cb0:	687b      	ldr	r3, [r7, #4]
    9cb2:	2220      	movs	r2, #32
    9cb4:	5c9b      	ldrb	r3, [r3, r2]
    9cb6:	0018      	movs	r0, r3
    9cb8:	46bd      	mov	sp, r7
    9cba:	b002      	add	sp, #8
    9cbc:	bd80      	pop	{r7, pc}

00009cbe <_ZNK8SdVolume17rootDirEntryCountEv>:
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
    9cbe:	b580      	push	{r7, lr}
    9cc0:	b082      	sub	sp, #8
    9cc2:	af00      	add	r7, sp, #0
    9cc4:	6078      	str	r0, [r7, #4]
    9cc6:	687b      	ldr	r3, [r7, #4]
    9cc8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9cca:	0018      	movs	r0, r3
    9ccc:	46bd      	mov	sp, r7
    9cce:	b002      	add	sp, #8
    9cd0:	bd80      	pop	{r7, pc}

00009cd2 <_ZNK8SdVolume12rootDirStartEv>:
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    9cd2:	b580      	push	{r7, lr}
    9cd4:	b082      	sub	sp, #8
    9cd6:	af00      	add	r7, sp, #0
    9cd8:	6078      	str	r0, [r7, #4]
    9cda:	687b      	ldr	r3, [r7, #4]
    9cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9cde:	0018      	movs	r0, r3
    9ce0:	46bd      	mov	sp, r7
    9ce2:	b002      	add	sp, #8
    9ce4:	bd80      	pop	{r7, pc}

00009ce6 <_ZNK8SdVolume14blockOfClusterEm>:
  uint8_t fatType_;             // volume type (12, 16, OR 32)
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    9ce6:	b580      	push	{r7, lr}
    9ce8:	b082      	sub	sp, #8
    9cea:	af00      	add	r7, sp, #0
    9cec:	6078      	str	r0, [r7, #4]
    9cee:	6039      	str	r1, [r7, #0]
          return (position >> 9) & (blocksPerCluster_ - 1);}
    9cf0:	683b      	ldr	r3, [r7, #0]
    9cf2:	0a5b      	lsrs	r3, r3, #9
    9cf4:	b2db      	uxtb	r3, r3
    9cf6:	687a      	ldr	r2, [r7, #4]
    9cf8:	7912      	ldrb	r2, [r2, #4]
    9cfa:	3a01      	subs	r2, #1
    9cfc:	b2d2      	uxtb	r2, r2
    9cfe:	4013      	ands	r3, r2
    9d00:	b2db      	uxtb	r3, r3
    9d02:	0018      	movs	r0, r3
    9d04:	46bd      	mov	sp, r7
    9d06:	b002      	add	sp, #8
    9d08:	bd80      	pop	{r7, pc}

00009d0a <_ZNK8SdVolume17clusterStartBlockEm>:
  uint32_t clusterStartBlock(uint32_t cluster) const {
    9d0a:	b580      	push	{r7, lr}
    9d0c:	b082      	sub	sp, #8
    9d0e:	af00      	add	r7, sp, #0
    9d10:	6078      	str	r0, [r7, #4]
    9d12:	6039      	str	r1, [r7, #0]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    9d14:	687b      	ldr	r3, [r7, #4]
    9d16:	695a      	ldr	r2, [r3, #20]
    9d18:	683b      	ldr	r3, [r7, #0]
    9d1a:	3b02      	subs	r3, #2
    9d1c:	6879      	ldr	r1, [r7, #4]
    9d1e:	7c09      	ldrb	r1, [r1, #16]
    9d20:	408b      	lsls	r3, r1
    9d22:	18d3      	adds	r3, r2, r3
    9d24:	0018      	movs	r0, r3
    9d26:	46bd      	mov	sp, r7
    9d28:	b002      	add	sp, #8
    9d2a:	bd80      	pop	{r7, pc}

00009d2c <_ZN8SdVolume13cacheSetDirtyEv>:
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    9d2c:	b580      	push	{r7, lr}
    9d2e:	af00      	add	r7, sp, #0
    9d30:	4b04      	ldr	r3, [pc, #16]	; (9d44 <_ZN8SdVolume13cacheSetDirtyEv+0x18>)
    9d32:	781b      	ldrb	r3, [r3, #0]
    9d34:	2201      	movs	r2, #1
    9d36:	4313      	orrs	r3, r2
    9d38:	b2da      	uxtb	r2, r3
    9d3a:	4b02      	ldr	r3, [pc, #8]	; (9d44 <_ZN8SdVolume13cacheSetDirtyEv+0x18>)
    9d3c:	701a      	strb	r2, [r3, #0]
    9d3e:	46c0      	nop			; (mov r8, r8)
    9d40:	46bd      	mov	sp, r7
    9d42:	bd80      	pop	{r7, pc}
    9d44:	20000b6c 	.word	0x20000b6c

00009d48 <_ZN8SdVolume9fatPutEOCEm>:
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    9d48:	b580      	push	{r7, lr}
    9d4a:	b082      	sub	sp, #8
    9d4c:	af00      	add	r7, sp, #0
    9d4e:	6078      	str	r0, [r7, #4]
    9d50:	6039      	str	r1, [r7, #0]
    return fatPut(cluster, 0x0FFFFFFF);
    9d52:	4a05      	ldr	r2, [pc, #20]	; (9d68 <_ZN8SdVolume9fatPutEOCEm+0x20>)
    9d54:	6839      	ldr	r1, [r7, #0]
    9d56:	687b      	ldr	r3, [r7, #4]
    9d58:	0018      	movs	r0, r3
    9d5a:	f001 facb 	bl	b2f4 <_ZN8SdVolume6fatPutEmm>
    9d5e:	0003      	movs	r3, r0
  }
    9d60:	0018      	movs	r0, r3
    9d62:	46bd      	mov	sp, r7
    9d64:	b002      	add	sp, #8
    9d66:	bd80      	pop	{r7, pc}
    9d68:	0fffffff 	.word	0x0fffffff

00009d6c <_ZNK8SdVolume5isEOCEm>:
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    9d6c:	b580      	push	{r7, lr}
    9d6e:	b082      	sub	sp, #8
    9d70:	af00      	add	r7, sp, #0
    9d72:	6078      	str	r0, [r7, #4]
    9d74:	6039      	str	r1, [r7, #0]
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    9d76:	687b      	ldr	r3, [r7, #4]
    9d78:	2220      	movs	r2, #32
    9d7a:	5c9b      	ldrb	r3, [r3, r2]
    9d7c:	2b10      	cmp	r3, #16
    9d7e:	d101      	bne.n	9d84 <_ZNK8SdVolume5isEOCEm+0x18>
    9d80:	4a05      	ldr	r2, [pc, #20]	; (9d98 <_ZNK8SdVolume5isEOCEm+0x2c>)
    9d82:	e000      	b.n	9d86 <_ZNK8SdVolume5isEOCEm+0x1a>
    9d84:	4a05      	ldr	r2, [pc, #20]	; (9d9c <_ZNK8SdVolume5isEOCEm+0x30>)
    9d86:	6839      	ldr	r1, [r7, #0]
    9d88:	2300      	movs	r3, #0
    9d8a:	4291      	cmp	r1, r2
    9d8c:	415b      	adcs	r3, r3
    9d8e:	b2db      	uxtb	r3, r3
  }
    9d90:	0018      	movs	r0, r3
    9d92:	46bd      	mov	sp, r7
    9d94:	b002      	add	sp, #8
    9d96:	bd80      	pop	{r7, pc}
    9d98:	0000fff8 	.word	0x0000fff8
    9d9c:	0ffffff8 	.word	0x0ffffff8

00009da0 <_ZN8SdVolume8readDataEmttPh>:
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    9da0:	b590      	push	{r4, r7, lr}
    9da2:	b087      	sub	sp, #28
    9da4:	af02      	add	r7, sp, #8
    9da6:	60f8      	str	r0, [r7, #12]
    9da8:	60b9      	str	r1, [r7, #8]
    9daa:	0019      	movs	r1, r3
    9dac:	1dbb      	adds	r3, r7, #6
    9dae:	801a      	strh	r2, [r3, #0]
    9db0:	1d3b      	adds	r3, r7, #4
    9db2:	1c0a      	adds	r2, r1, #0
    9db4:	801a      	strh	r2, [r3, #0]
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    9db6:	4b08      	ldr	r3, [pc, #32]	; (9dd8 <_ZN8SdVolume8readDataEmttPh+0x38>)
    9db8:	6818      	ldr	r0, [r3, #0]
    9dba:	1d3b      	adds	r3, r7, #4
    9dbc:	881c      	ldrh	r4, [r3, #0]
    9dbe:	1dbb      	adds	r3, r7, #6
    9dc0:	881a      	ldrh	r2, [r3, #0]
    9dc2:	68b9      	ldr	r1, [r7, #8]
    9dc4:	6a3b      	ldr	r3, [r7, #32]
    9dc6:	9300      	str	r3, [sp, #0]
    9dc8:	0023      	movs	r3, r4
    9dca:	f7ff fc65 	bl	9698 <_ZN7Sd2Card8readDataEmttPh>
    9dce:	0003      	movs	r3, r0
  }
    9dd0:	0018      	movs	r0, r3
    9dd2:	46bd      	mov	sp, r7
    9dd4:	b005      	add	sp, #20
    9dd6:	bd90      	pop	{r4, r7, pc}
    9dd8:	20000b68 	.word	0x20000b68

00009ddc <_ZN8SdVolume10writeBlockEmPKh>:
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    9ddc:	b580      	push	{r7, lr}
    9dde:	b084      	sub	sp, #16
    9de0:	af00      	add	r7, sp, #0
    9de2:	60f8      	str	r0, [r7, #12]
    9de4:	60b9      	str	r1, [r7, #8]
    9de6:	607a      	str	r2, [r7, #4]
    return sdCard_->writeBlock(block, dst);
    9de8:	4b05      	ldr	r3, [pc, #20]	; (9e00 <_ZN8SdVolume10writeBlockEmPKh+0x24>)
    9dea:	681b      	ldr	r3, [r3, #0]
    9dec:	687a      	ldr	r2, [r7, #4]
    9dee:	68b9      	ldr	r1, [r7, #8]
    9df0:	0018      	movs	r0, r3
    9df2:	f7ff fe23 	bl	9a3c <_ZN7Sd2Card10writeBlockEmPKh>
    9df6:	0003      	movs	r3, r0
  }
    9df8:	0018      	movs	r0, r3
    9dfa:	46bd      	mov	sp, r7
    9dfc:	b004      	add	sp, #16
    9dfe:	bd80      	pop	{r7, pc}
    9e00:	20000b68 	.word	0x20000b68

00009e04 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    9e04:	b580      	push	{r7, lr}
    9e06:	b082      	sub	sp, #8
    9e08:	af00      	add	r7, sp, #0
    9e0a:	6078      	str	r0, [r7, #4]
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    9e0c:	687b      	ldr	r3, [r7, #4]
    9e0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    9e10:	687b      	ldr	r3, [r7, #4]
    9e12:	330c      	adds	r3, #12
    9e14:	001a      	movs	r2, r3
    9e16:	2101      	movs	r1, #1
    9e18:	f001 f88e 	bl	af38 <_ZN8SdVolume15allocContiguousEmPm>
    9e1c:	0003      	movs	r3, r0
    9e1e:	425a      	negs	r2, r3
    9e20:	4153      	adcs	r3, r2
    9e22:	b2db      	uxtb	r3, r3
    9e24:	2b00      	cmp	r3, #0
    9e26:	d001      	beq.n	9e2c <_ZN6SdFile10addClusterEv+0x28>
    9e28:	2300      	movs	r3, #0
    9e2a:	e010      	b.n	9e4e <_ZN6SdFile10addClusterEv+0x4a>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    9e2c:	687b      	ldr	r3, [r7, #4]
    9e2e:	6a1b      	ldr	r3, [r3, #32]
    9e30:	2b00      	cmp	r3, #0
    9e32:	d10b      	bne.n	9e4c <_ZN6SdFile10addClusterEv+0x48>
    firstCluster_ = curCluster_;
    9e34:	687b      	ldr	r3, [r7, #4]
    9e36:	68da      	ldr	r2, [r3, #12]
    9e38:	687b      	ldr	r3, [r7, #4]
    9e3a:	621a      	str	r2, [r3, #32]
    flags_ |= F_FILE_DIR_DIRTY;
    9e3c:	687b      	ldr	r3, [r7, #4]
    9e3e:	7a1b      	ldrb	r3, [r3, #8]
    9e40:	2280      	movs	r2, #128	; 0x80
    9e42:	4252      	negs	r2, r2
    9e44:	4313      	orrs	r3, r2
    9e46:	b2da      	uxtb	r2, r3
    9e48:	687b      	ldr	r3, [r7, #4]
    9e4a:	721a      	strb	r2, [r3, #8]
  }
  return true;
    9e4c:	2301      	movs	r3, #1
}
    9e4e:	0018      	movs	r0, r3
    9e50:	46bd      	mov	sp, r7
    9e52:	b002      	add	sp, #8
    9e54:	bd80      	pop	{r7, pc}

00009e56 <_ZN6SdFile13addDirClusterEv>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    9e56:	b580      	push	{r7, lr}
    9e58:	b084      	sub	sp, #16
    9e5a:	af00      	add	r7, sp, #0
    9e5c:	6078      	str	r0, [r7, #4]
  if (!addCluster()) return false;
    9e5e:	687b      	ldr	r3, [r7, #4]
    9e60:	0018      	movs	r0, r3
    9e62:	f7ff ffcf 	bl	9e04 <_ZN6SdFile10addClusterEv>
    9e66:	0003      	movs	r3, r0
    9e68:	425a      	negs	r2, r3
    9e6a:	4153      	adcs	r3, r2
    9e6c:	b2db      	uxtb	r3, r3
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d001      	beq.n	9e76 <_ZN6SdFile13addDirClusterEv+0x20>
    9e72:	2300      	movs	r3, #0
    9e74:	e03a      	b.n	9eec <_ZN6SdFile13addDirClusterEv+0x96>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    9e76:	687b      	ldr	r3, [r7, #4]
    9e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9e7a:	687b      	ldr	r3, [r7, #4]
    9e7c:	68db      	ldr	r3, [r3, #12]
    9e7e:	0019      	movs	r1, r3
    9e80:	0010      	movs	r0, r2
    9e82:	f7ff ff42 	bl	9d0a <_ZNK8SdVolume17clusterStartBlockEm>
    9e86:	0003      	movs	r3, r0
    9e88:	60bb      	str	r3, [r7, #8]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9e8e:	230f      	movs	r3, #15
    9e90:	18fb      	adds	r3, r7, r3
    9e92:	7912      	ldrb	r2, [r2, #4]
    9e94:	701a      	strb	r2, [r3, #0]
    9e96:	230f      	movs	r3, #15
    9e98:	18fb      	adds	r3, r7, r3
    9e9a:	781b      	ldrb	r3, [r3, #0]
    9e9c:	2b00      	cmp	r3, #0
    9e9e:	d018      	beq.n	9ed2 <_ZN6SdFile13addDirClusterEv+0x7c>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    9ea0:	230f      	movs	r3, #15
    9ea2:	18fb      	adds	r3, r7, r3
    9ea4:	781a      	ldrb	r2, [r3, #0]
    9ea6:	68bb      	ldr	r3, [r7, #8]
    9ea8:	18d3      	adds	r3, r2, r3
    9eaa:	3b01      	subs	r3, #1
    9eac:	0018      	movs	r0, r3
    9eae:	f001 f963 	bl	b178 <_ZN8SdVolume14cacheZeroBlockEm>
    9eb2:	0003      	movs	r3, r0
    9eb4:	425a      	negs	r2, r3
    9eb6:	4153      	adcs	r3, r2
    9eb8:	b2db      	uxtb	r3, r3
    9eba:	2b00      	cmp	r3, #0
    9ebc:	d001      	beq.n	9ec2 <_ZN6SdFile13addDirClusterEv+0x6c>
    9ebe:	2300      	movs	r3, #0
    9ec0:	e014      	b.n	9eec <_ZN6SdFile13addDirClusterEv+0x96>
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    9ec2:	230f      	movs	r3, #15
    9ec4:	18fb      	adds	r3, r7, r3
    9ec6:	781a      	ldrb	r2, [r3, #0]
    9ec8:	230f      	movs	r3, #15
    9eca:	18fb      	adds	r3, r7, r3
    9ecc:	3a01      	subs	r2, #1
    9ece:	701a      	strb	r2, [r3, #0]
    9ed0:	e7e1      	b.n	9e96 <_ZN6SdFile13addDirClusterEv+0x40>
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	69da      	ldr	r2, [r3, #28]
    9ed6:	687b      	ldr	r3, [r7, #4]
    9ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9eda:	7c1b      	ldrb	r3, [r3, #16]
    9edc:	0019      	movs	r1, r3
    9ede:	2380      	movs	r3, #128	; 0x80
    9ee0:	009b      	lsls	r3, r3, #2
    9ee2:	408b      	lsls	r3, r1
    9ee4:	18d2      	adds	r2, r2, r3
    9ee6:	687b      	ldr	r3, [r7, #4]
    9ee8:	61da      	str	r2, [r3, #28]
  return true;
    9eea:	2301      	movs	r3, #1
}
    9eec:	0018      	movs	r0, r3
    9eee:	46bd      	mov	sp, r7
    9ef0:	b004      	add	sp, #16
    9ef2:	bd80      	pop	{r7, pc}

00009ef4 <_ZN6SdFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    9ef4:	b580      	push	{r7, lr}
    9ef6:	b082      	sub	sp, #8
    9ef8:	af00      	add	r7, sp, #0
    9efa:	6078      	str	r0, [r7, #4]
    9efc:	000a      	movs	r2, r1
    9efe:	1cfb      	adds	r3, r7, #3
    9f00:	701a      	strb	r2, [r3, #0]
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    9f02:	687b      	ldr	r3, [r7, #4]
    9f04:	695a      	ldr	r2, [r3, #20]
    9f06:	1cfb      	adds	r3, r7, #3
    9f08:	781b      	ldrb	r3, [r3, #0]
    9f0a:	0019      	movs	r1, r3
    9f0c:	0010      	movs	r0, r2
    9f0e:	f001 f8f5 	bl	b0fc <_ZN8SdVolume13cacheRawBlockEmh>
    9f12:	0003      	movs	r3, r0
    9f14:	425a      	negs	r2, r3
    9f16:	4153      	adcs	r3, r2
    9f18:	b2db      	uxtb	r3, r3
    9f1a:	2b00      	cmp	r3, #0
    9f1c:	d001      	beq.n	9f22 <_ZN6SdFile13cacheDirEntryEh+0x2e>
    9f1e:	2300      	movs	r3, #0
    9f20:	e004      	b.n	9f2c <_ZN6SdFile13cacheDirEntryEh+0x38>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    9f22:	687b      	ldr	r3, [r7, #4]
    9f24:	7e1b      	ldrb	r3, [r3, #24]
    9f26:	015a      	lsls	r2, r3, #5
    9f28:	4b02      	ldr	r3, [pc, #8]	; (9f34 <_ZN6SdFile13cacheDirEntryEh+0x40>)
    9f2a:	18d3      	adds	r3, r2, r3
}
    9f2c:	0018      	movs	r0, r3
    9f2e:	46bd      	mov	sp, r7
    9f30:	b002      	add	sp, #8
    9f32:	bd80      	pop	{r7, pc}
    9f34:	20000968 	.word	0x20000968

00009f38 <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    9f38:	b580      	push	{r7, lr}
    9f3a:	b082      	sub	sp, #8
    9f3c:	af00      	add	r7, sp, #0
    9f3e:	6078      	str	r0, [r7, #4]
  if (!sync())return false;
    9f40:	687b      	ldr	r3, [r7, #4]
    9f42:	0018      	movs	r0, r3
    9f44:	f000 fce8 	bl	a918 <_ZN6SdFile4syncEv>
    9f48:	0003      	movs	r3, r0
    9f4a:	425a      	negs	r2, r3
    9f4c:	4153      	adcs	r3, r2
    9f4e:	b2db      	uxtb	r3, r3
    9f50:	2b00      	cmp	r3, #0
    9f52:	d001      	beq.n	9f58 <_ZN6SdFile5closeEv+0x20>
    9f54:	2300      	movs	r3, #0
    9f56:	e003      	b.n	9f60 <_ZN6SdFile5closeEv+0x28>
  type_ = FAT_FILE_TYPE_CLOSED;
    9f58:	687b      	ldr	r3, [r7, #4]
    9f5a:	2200      	movs	r2, #0
    9f5c:	725a      	strb	r2, [r3, #9]
  return true;
    9f5e:	2301      	movs	r3, #1
}
    9f60:	0018      	movs	r0, r3
    9f62:	46bd      	mov	sp, r7
    9f64:	b002      	add	sp, #8
    9f66:	bd80      	pop	{r7, pc}

00009f68 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    9f68:	b590      	push	{r4, r7, lr}
    9f6a:	b08b      	sub	sp, #44	; 0x2c
    9f6c:	af00      	add	r7, sp, #0
    9f6e:	6078      	str	r0, [r7, #4]
    9f70:	6039      	str	r1, [r7, #0]
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
    9f72:	2327      	movs	r3, #39	; 0x27
    9f74:	18fb      	adds	r3, r7, r3
    9f76:	2207      	movs	r2, #7
    9f78:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
    9f7a:	2326      	movs	r3, #38	; 0x26
    9f7c:	18fb      	adds	r3, r7, r3
    9f7e:	2200      	movs	r2, #0
    9f80:	701a      	strb	r2, [r3, #0]
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    9f82:	2326      	movs	r3, #38	; 0x26
    9f84:	18fb      	adds	r3, r7, r3
    9f86:	781b      	ldrb	r3, [r3, #0]
    9f88:	2b0a      	cmp	r3, #10
    9f8a:	dc0c      	bgt.n	9fa6 <_ZN6SdFile10make83NameEPKcPh+0x3e>
    9f8c:	2326      	movs	r3, #38	; 0x26
    9f8e:	18fb      	adds	r3, r7, r3
    9f90:	781b      	ldrb	r3, [r3, #0]
    9f92:	2226      	movs	r2, #38	; 0x26
    9f94:	18ba      	adds	r2, r7, r2
    9f96:	1c59      	adds	r1, r3, #1
    9f98:	7011      	strb	r1, [r2, #0]
    9f9a:	001a      	movs	r2, r3
    9f9c:	683b      	ldr	r3, [r7, #0]
    9f9e:	189b      	adds	r3, r3, r2
    9fa0:	2220      	movs	r2, #32
    9fa2:	701a      	strb	r2, [r3, #0]
    9fa4:	e7ed      	b.n	9f82 <_ZN6SdFile10make83NameEPKcPh+0x1a>
  i = 0;
    9fa6:	2326      	movs	r3, #38	; 0x26
    9fa8:	18fb      	adds	r3, r7, r3
    9faa:	2200      	movs	r2, #0
    9fac:	701a      	strb	r2, [r3, #0]
  while ((c = *str++) != '\0') {
    9fae:	687b      	ldr	r3, [r7, #4]
    9fb0:	1c5a      	adds	r2, r3, #1
    9fb2:	607a      	str	r2, [r7, #4]
    9fb4:	221f      	movs	r2, #31
    9fb6:	18ba      	adds	r2, r7, r2
    9fb8:	781b      	ldrb	r3, [r3, #0]
    9fba:	7013      	strb	r3, [r2, #0]
    9fbc:	231f      	movs	r3, #31
    9fbe:	18fb      	adds	r3, r7, r3
    9fc0:	781b      	ldrb	r3, [r3, #0]
    9fc2:	1e5a      	subs	r2, r3, #1
    9fc4:	4193      	sbcs	r3, r2
    9fc6:	b2db      	uxtb	r3, r3
    9fc8:	2b00      	cmp	r3, #0
    9fca:	d100      	bne.n	9fce <_ZN6SdFile10make83NameEPKcPh+0x66>
    9fcc:	e06a      	b.n	a0a4 <_ZN6SdFile10make83NameEPKcPh+0x13c>
    if (c == '.') {
    9fce:	231f      	movs	r3, #31
    9fd0:	18fb      	adds	r3, r7, r3
    9fd2:	781b      	ldrb	r3, [r3, #0]
    9fd4:	2b2e      	cmp	r3, #46	; 0x2e
    9fd6:	d10f      	bne.n	9ff8 <_ZN6SdFile10make83NameEPKcPh+0x90>
      if (n == 10) return false;  // only one dot allowed
    9fd8:	2327      	movs	r3, #39	; 0x27
    9fda:	18fb      	adds	r3, r7, r3
    9fdc:	781b      	ldrb	r3, [r3, #0]
    9fde:	2b0a      	cmp	r3, #10
    9fe0:	d101      	bne.n	9fe6 <_ZN6SdFile10make83NameEPKcPh+0x7e>
    9fe2:	2300      	movs	r3, #0
    9fe4:	e064      	b.n	a0b0 <_ZN6SdFile10make83NameEPKcPh+0x148>
      n = 10;  // max index for full 8.3 name
    9fe6:	2327      	movs	r3, #39	; 0x27
    9fe8:	18fb      	adds	r3, r7, r3
    9fea:	220a      	movs	r2, #10
    9fec:	701a      	strb	r2, [r3, #0]
      i = 8;   // place for extension
    9fee:	2326      	movs	r3, #38	; 0x26
    9ff0:	18fb      	adds	r3, r7, r3
    9ff2:	2208      	movs	r2, #8
    9ff4:	701a      	strb	r2, [r3, #0]
    9ff6:	e7da      	b.n	9fae <_ZN6SdFile10make83NameEPKcPh+0x46>
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
#elif defined(__arm__)
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    9ff8:	230c      	movs	r3, #12
    9ffa:	18fb      	adds	r3, r7, r3
    9ffc:	4a2e      	ldr	r2, [pc, #184]	; (a0b8 <_ZN6SdFile10make83NameEPKcPh+0x150>)
    9ffe:	ca13      	ldmia	r2!, {r0, r1, r4}
    a000:	c313      	stmia	r3!, {r0, r1, r4}
    a002:	6812      	ldr	r2, [r2, #0]
    a004:	601a      	str	r2, [r3, #0]
      const uint8_t *p = valid;
    a006:	230c      	movs	r3, #12
    a008:	18fb      	adds	r3, r7, r3
    a00a:	623b      	str	r3, [r7, #32]
      while ((b = *p++)) if (b == c) return false;
    a00c:	6a3b      	ldr	r3, [r7, #32]
    a00e:	1c5a      	adds	r2, r3, #1
    a010:	623a      	str	r2, [r7, #32]
    a012:	221e      	movs	r2, #30
    a014:	18ba      	adds	r2, r7, r2
    a016:	781b      	ldrb	r3, [r3, #0]
    a018:	7013      	strb	r3, [r2, #0]
    a01a:	231e      	movs	r3, #30
    a01c:	18fb      	adds	r3, r7, r3
    a01e:	781b      	ldrb	r3, [r3, #0]
    a020:	1e5a      	subs	r2, r3, #1
    a022:	4193      	sbcs	r3, r2
    a024:	b2db      	uxtb	r3, r3
    a026:	2b00      	cmp	r3, #0
    a028:	d009      	beq.n	a03e <_ZN6SdFile10make83NameEPKcPh+0xd6>
    a02a:	231e      	movs	r3, #30
    a02c:	18fa      	adds	r2, r7, r3
    a02e:	231f      	movs	r3, #31
    a030:	18fb      	adds	r3, r7, r3
    a032:	7812      	ldrb	r2, [r2, #0]
    a034:	781b      	ldrb	r3, [r3, #0]
    a036:	429a      	cmp	r2, r3
    a038:	d1e8      	bne.n	a00c <_ZN6SdFile10make83NameEPKcPh+0xa4>
    a03a:	2300      	movs	r3, #0
    a03c:	e038      	b.n	a0b0 <_ZN6SdFile10make83NameEPKcPh+0x148>
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    a03e:	2326      	movs	r3, #38	; 0x26
    a040:	18fb      	adds	r3, r7, r3
    a042:	781a      	ldrb	r2, [r3, #0]
    a044:	2327      	movs	r3, #39	; 0x27
    a046:	18fb      	adds	r3, r7, r3
    a048:	781b      	ldrb	r3, [r3, #0]
    a04a:	429a      	cmp	r2, r3
    a04c:	dc09      	bgt.n	a062 <_ZN6SdFile10make83NameEPKcPh+0xfa>
    a04e:	231f      	movs	r3, #31
    a050:	18fb      	adds	r3, r7, r3
    a052:	781b      	ldrb	r3, [r3, #0]
    a054:	2b20      	cmp	r3, #32
    a056:	dd04      	ble.n	a062 <_ZN6SdFile10make83NameEPKcPh+0xfa>
    a058:	231f      	movs	r3, #31
    a05a:	18fb      	adds	r3, r7, r3
    a05c:	781b      	ldrb	r3, [r3, #0]
    a05e:	2b7e      	cmp	r3, #126	; 0x7e
    a060:	dd01      	ble.n	a066 <_ZN6SdFile10make83NameEPKcPh+0xfe>
    a062:	2300      	movs	r3, #0
    a064:	e024      	b.n	a0b0 <_ZN6SdFile10make83NameEPKcPh+0x148>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    a066:	2326      	movs	r3, #38	; 0x26
    a068:	18fb      	adds	r3, r7, r3
    a06a:	781b      	ldrb	r3, [r3, #0]
    a06c:	2226      	movs	r2, #38	; 0x26
    a06e:	18ba      	adds	r2, r7, r2
    a070:	1c59      	adds	r1, r3, #1
    a072:	7011      	strb	r1, [r2, #0]
    a074:	001a      	movs	r2, r3
    a076:	683b      	ldr	r3, [r7, #0]
    a078:	189a      	adds	r2, r3, r2
    a07a:	231f      	movs	r3, #31
    a07c:	18fb      	adds	r3, r7, r3
    a07e:	781b      	ldrb	r3, [r3, #0]
    a080:	2b60      	cmp	r3, #96	; 0x60
    a082:	dd0a      	ble.n	a09a <_ZN6SdFile10make83NameEPKcPh+0x132>
    a084:	231f      	movs	r3, #31
    a086:	18fb      	adds	r3, r7, r3
    a088:	781b      	ldrb	r3, [r3, #0]
    a08a:	2b7a      	cmp	r3, #122	; 0x7a
    a08c:	dc05      	bgt.n	a09a <_ZN6SdFile10make83NameEPKcPh+0x132>
    a08e:	231f      	movs	r3, #31
    a090:	18fb      	adds	r3, r7, r3
    a092:	781b      	ldrb	r3, [r3, #0]
    a094:	3b20      	subs	r3, #32
    a096:	b2db      	uxtb	r3, r3
    a098:	e002      	b.n	a0a0 <_ZN6SdFile10make83NameEPKcPh+0x138>
    a09a:	231f      	movs	r3, #31
    a09c:	18fb      	adds	r3, r7, r3
    a09e:	781b      	ldrb	r3, [r3, #0]
    a0a0:	7013      	strb	r3, [r2, #0]
  while ((c = *str++) != '\0') {
    a0a2:	e784      	b.n	9fae <_ZN6SdFile10make83NameEPKcPh+0x46>
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    a0a4:	683b      	ldr	r3, [r7, #0]
    a0a6:	781b      	ldrb	r3, [r3, #0]
    a0a8:	3b20      	subs	r3, #32
    a0aa:	1e5a      	subs	r2, r3, #1
    a0ac:	4193      	sbcs	r3, r2
    a0ae:	b2db      	uxtb	r3, r3
}
    a0b0:	0018      	movs	r0, r3
    a0b2:	46bd      	mov	sp, r7
    a0b4:	b00b      	add	sp, #44	; 0x2c
    a0b6:	bd90      	pop	{r4, r7, pc}
    a0b8:	00013648 	.word	0x00013648

0000a0bc <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    a0bc:	b590      	push	{r4, r7, lr}
    a0be:	b08b      	sub	sp, #44	; 0x2c
    a0c0:	af00      	add	r7, sp, #0
    a0c2:	60f8      	str	r0, [r7, #12]
    a0c4:	60b9      	str	r1, [r7, #8]
    a0c6:	607a      	str	r2, [r7, #4]
    a0c8:	001a      	movs	r2, r3
    a0ca:	1cfb      	adds	r3, r7, #3
    a0cc:	701a      	strb	r2, [r3, #0]
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    a0ce:	68fb      	ldr	r3, [r7, #12]
    a0d0:	0018      	movs	r0, r3
    a0d2:	f7fe fbbc 	bl	884e <_ZNK6SdFile6isOpenEv>
    a0d6:	0003      	movs	r3, r0
    a0d8:	1e5a      	subs	r2, r3, #1
    a0da:	4193      	sbcs	r3, r2
    a0dc:	b2db      	uxtb	r3, r3
    a0de:	2b00      	cmp	r3, #0
    a0e0:	d001      	beq.n	a0e6 <_ZN6SdFile4openEPS_PKch+0x2a>
    a0e2:	2300      	movs	r3, #0
    a0e4:	e13c      	b.n	a360 <_ZN6SdFile4openEPS_PKch+0x2a4>

  if (!make83Name(fileName, dname)) return false;
    a0e6:	2314      	movs	r3, #20
    a0e8:	18fa      	adds	r2, r7, r3
    a0ea:	687b      	ldr	r3, [r7, #4]
    a0ec:	0011      	movs	r1, r2
    a0ee:	0018      	movs	r0, r3
    a0f0:	f7ff ff3a 	bl	9f68 <_ZN6SdFile10make83NameEPKcPh>
    a0f4:	0003      	movs	r3, r0
    a0f6:	425a      	negs	r2, r3
    a0f8:	4153      	adcs	r3, r2
    a0fa:	b2db      	uxtb	r3, r3
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	d001      	beq.n	a104 <_ZN6SdFile4openEPS_PKch+0x48>
    a100:	2300      	movs	r3, #0
    a102:	e12d      	b.n	a360 <_ZN6SdFile4openEPS_PKch+0x2a4>
  vol_ = dirFile->vol_;
    a104:	68bb      	ldr	r3, [r7, #8]
    a106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a108:	68fb      	ldr	r3, [r7, #12]
    a10a:	625a      	str	r2, [r3, #36]	; 0x24
  dirFile->rewind();
    a10c:	68bb      	ldr	r3, [r7, #8]
    a10e:	0018      	movs	r0, r3
    a110:	f7fe fd8c 	bl	8c2c <_ZN6SdFile6rewindEv>

  // bool for empty entry found
  uint8_t emptyFound = false;
    a114:	2323      	movs	r3, #35	; 0x23
    a116:	18fb      	adds	r3, r7, r3
    a118:	2200      	movs	r2, #0
    a11a:	701a      	strb	r2, [r3, #0]

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    a11c:	68bb      	ldr	r3, [r7, #8]
    a11e:	691a      	ldr	r2, [r3, #16]
    a120:	68bb      	ldr	r3, [r7, #8]
    a122:	69db      	ldr	r3, [r3, #28]
    a124:	429a      	cmp	r2, r3
    a126:	d252      	bcs.n	a1ce <_ZN6SdFile4openEPS_PKch+0x112>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    a128:	68bb      	ldr	r3, [r7, #8]
    a12a:	691b      	ldr	r3, [r3, #16]
    a12c:	095b      	lsrs	r3, r3, #5
    a12e:	b2da      	uxtb	r2, r3
    a130:	2322      	movs	r3, #34	; 0x22
    a132:	18fb      	adds	r3, r7, r3
    a134:	210f      	movs	r1, #15
    a136:	400a      	ands	r2, r1
    a138:	701a      	strb	r2, [r3, #0]
    p = dirFile->readDirCache();
    a13a:	68bb      	ldr	r3, [r7, #8]
    a13c:	0018      	movs	r0, r3
    a13e:	f000 fb43 	bl	a7c8 <_ZN6SdFile12readDirCacheEv>
    a142:	0003      	movs	r3, r0
    a144:	627b      	str	r3, [r7, #36]	; 0x24
    if (p == NULL) return false;
    a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a148:	2b00      	cmp	r3, #0
    a14a:	d101      	bne.n	a150 <_ZN6SdFile4openEPS_PKch+0x94>
    a14c:	2300      	movs	r3, #0
    a14e:	e107      	b.n	a360 <_ZN6SdFile4openEPS_PKch+0x2a4>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a152:	781b      	ldrb	r3, [r3, #0]
    a154:	2b00      	cmp	r3, #0
    a156:	d003      	beq.n	a160 <_ZN6SdFile4openEPS_PKch+0xa4>
    a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a15a:	781b      	ldrb	r3, [r3, #0]
    a15c:	2be5      	cmp	r3, #229	; 0xe5
    a15e:	d116      	bne.n	a18e <_ZN6SdFile4openEPS_PKch+0xd2>
      // remember first empty slot
      if (!emptyFound) {
    a160:	2323      	movs	r3, #35	; 0x23
    a162:	18fb      	adds	r3, r7, r3
    a164:	781b      	ldrb	r3, [r3, #0]
    a166:	2b00      	cmp	r3, #0
    a168:	d10c      	bne.n	a184 <_ZN6SdFile4openEPS_PKch+0xc8>
        emptyFound = true;
    a16a:	2323      	movs	r3, #35	; 0x23
    a16c:	18fb      	adds	r3, r7, r3
    a16e:	2201      	movs	r2, #1
    a170:	701a      	strb	r2, [r3, #0]
        dirIndex_ = index;
    a172:	68fb      	ldr	r3, [r7, #12]
    a174:	2222      	movs	r2, #34	; 0x22
    a176:	18ba      	adds	r2, r7, r2
    a178:	7812      	ldrb	r2, [r2, #0]
    a17a:	761a      	strb	r2, [r3, #24]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    a17c:	4b7a      	ldr	r3, [pc, #488]	; (a368 <_ZN6SdFile4openEPS_PKch+0x2ac>)
    a17e:	681a      	ldr	r2, [r3, #0]
    a180:	68fb      	ldr	r3, [r7, #12]
    a182:	615a      	str	r2, [r3, #20]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a186:	781b      	ldrb	r3, [r3, #0]
    a188:	2b00      	cmp	r3, #0
    a18a:	d11f      	bne.n	a1cc <_ZN6SdFile4openEPS_PKch+0x110>
    a18c:	e01f      	b.n	a1ce <_ZN6SdFile4openEPS_PKch+0x112>
    } else if (!memcmp(dname, p->name, 11)) {
    a18e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a190:	2314      	movs	r3, #20
    a192:	18fb      	adds	r3, r7, r3
    a194:	220b      	movs	r2, #11
    a196:	0018      	movs	r0, r3
    a198:	f006 fb66 	bl	10868 <memcmp>
    a19c:	1e03      	subs	r3, r0, #0
    a19e:	d1bd      	bne.n	a11c <_ZN6SdFile4openEPS_PKch+0x60>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    a1a0:	1cfb      	adds	r3, r7, #3
    a1a2:	781b      	ldrb	r3, [r3, #0]
    a1a4:	2230      	movs	r2, #48	; 0x30
    a1a6:	4013      	ands	r3, r2
    a1a8:	2b30      	cmp	r3, #48	; 0x30
    a1aa:	d101      	bne.n	a1b0 <_ZN6SdFile4openEPS_PKch+0xf4>
    a1ac:	2300      	movs	r3, #0
    a1ae:	e0d7      	b.n	a360 <_ZN6SdFile4openEPS_PKch+0x2a4>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    a1b0:	2322      	movs	r3, #34	; 0x22
    a1b2:	18fb      	adds	r3, r7, r3
    a1b4:	781b      	ldrb	r3, [r3, #0]
    a1b6:	220f      	movs	r2, #15
    a1b8:	4013      	ands	r3, r2
    a1ba:	b2d9      	uxtb	r1, r3
    a1bc:	1cfb      	adds	r3, r7, #3
    a1be:	781a      	ldrb	r2, [r3, #0]
    a1c0:	68fb      	ldr	r3, [r7, #12]
    a1c2:	0018      	movs	r0, r3
    a1c4:	f000 f8d6 	bl	a374 <_ZN6SdFile15openCachedEntryEhh>
    a1c8:	0003      	movs	r3, r0
    a1ca:	e0c9      	b.n	a360 <_ZN6SdFile4openEPS_PKch+0x2a4>
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    a1cc:	e7a6      	b.n	a11c <_ZN6SdFile4openEPS_PKch+0x60>
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    a1ce:	1cfb      	adds	r3, r7, #3
    a1d0:	781b      	ldrb	r3, [r3, #0]
    a1d2:	2212      	movs	r2, #18
    a1d4:	4013      	ands	r3, r2
    a1d6:	2b12      	cmp	r3, #18
    a1d8:	d001      	beq.n	a1de <_ZN6SdFile4openEPS_PKch+0x122>
    a1da:	2300      	movs	r3, #0
    a1dc:	e0c0      	b.n	a360 <_ZN6SdFile4openEPS_PKch+0x2a4>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    a1de:	2323      	movs	r3, #35	; 0x23
    a1e0:	18fb      	adds	r3, r7, r3
    a1e2:	781b      	ldrb	r3, [r3, #0]
    a1e4:	2b00      	cmp	r3, #0
    a1e6:	d00b      	beq.n	a200 <_ZN6SdFile4openEPS_PKch+0x144>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    a1e8:	68fb      	ldr	r3, [r7, #12]
    a1ea:	2101      	movs	r1, #1
    a1ec:	0018      	movs	r0, r3
    a1ee:	f7ff fe81 	bl	9ef4 <_ZN6SdFile13cacheDirEntryEh>
    a1f2:	0003      	movs	r3, r0
    a1f4:	627b      	str	r3, [r7, #36]	; 0x24
    if (!p) return false;
    a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d118      	bne.n	a22e <_ZN6SdFile4openEPS_PKch+0x172>
    a1fc:	2300      	movs	r3, #0
    a1fe:	e0af      	b.n	a360 <_ZN6SdFile4openEPS_PKch+0x2a4>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    a200:	68bb      	ldr	r3, [r7, #8]
    a202:	7a5b      	ldrb	r3, [r3, #9]
    a204:	2b02      	cmp	r3, #2
    a206:	d101      	bne.n	a20c <_ZN6SdFile4openEPS_PKch+0x150>
    a208:	2300      	movs	r3, #0
    a20a:	e0a9      	b.n	a360 <_ZN6SdFile4openEPS_PKch+0x2a4>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    a20c:	68bb      	ldr	r3, [r7, #8]
    a20e:	0018      	movs	r0, r3
    a210:	f7ff fe21 	bl	9e56 <_ZN6SdFile13addDirClusterEv>
    a214:	0003      	movs	r3, r0
    a216:	425a      	negs	r2, r3
    a218:	4153      	adcs	r3, r2
    a21a:	b2db      	uxtb	r3, r3
    a21c:	2b00      	cmp	r3, #0
    a21e:	d001      	beq.n	a224 <_ZN6SdFile4openEPS_PKch+0x168>
    a220:	2300      	movs	r3, #0
    a222:	e09d      	b.n	a360 <_ZN6SdFile4openEPS_PKch+0x2a4>

    // use first entry in cluster
    dirIndex_ = 0;
    a224:	68fb      	ldr	r3, [r7, #12]
    a226:	2200      	movs	r2, #0
    a228:	761a      	strb	r2, [r3, #24]
    p = SdVolume::cacheBuffer_.dir;
    a22a:	4b50      	ldr	r3, [pc, #320]	; (a36c <_ZN6SdFile4openEPS_PKch+0x2b0>)
    a22c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a230:	2220      	movs	r2, #32
    a232:	2100      	movs	r1, #0
    a234:	0018      	movs	r0, r3
    a236:	f006 fb2f 	bl	10898 <memset>
  memcpy(p->name, dname, 11);
    a23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a23c:	2314      	movs	r3, #20
    a23e:	18fb      	adds	r3, r7, r3
    a240:	0010      	movs	r0, r2
    a242:	0019      	movs	r1, r3
    a244:	230b      	movs	r3, #11
    a246:	001a      	movs	r2, r3
    a248:	f006 fb1d 	bl	10886 <memcpy>

  // set timestamps
  if (dateTime_) {
    a24c:	4b48      	ldr	r3, [pc, #288]	; (a370 <_ZN6SdFile4openEPS_PKch+0x2b4>)
    a24e:	681b      	ldr	r3, [r3, #0]
    a250:	2b00      	cmp	r3, #0
    a252:	d009      	beq.n	a268 <_ZN6SdFile4openEPS_PKch+0x1ac>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    a254:	4b46      	ldr	r3, [pc, #280]	; (a370 <_ZN6SdFile4openEPS_PKch+0x2b4>)
    a256:	681b      	ldr	r3, [r3, #0]
    a258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a25a:	3210      	adds	r2, #16
    a25c:	0010      	movs	r0, r2
    a25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a260:	320e      	adds	r2, #14
    a262:	0011      	movs	r1, r2
    a264:	4798      	blx	r3
    a266:	e01a      	b.n	a29e <_ZN6SdFile4openEPS_PKch+0x1e2>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a26a:	7c1a      	ldrb	r2, [r3, #16]
    a26c:	2100      	movs	r1, #0
    a26e:	400a      	ands	r2, r1
    a270:	1c11      	adds	r1, r2, #0
    a272:	2221      	movs	r2, #33	; 0x21
    a274:	430a      	orrs	r2, r1
    a276:	741a      	strb	r2, [r3, #16]
    a278:	7c5a      	ldrb	r2, [r3, #17]
    a27a:	2100      	movs	r1, #0
    a27c:	400a      	ands	r2, r1
    a27e:	1c11      	adds	r1, r2, #0
    a280:	2228      	movs	r2, #40	; 0x28
    a282:	430a      	orrs	r2, r1
    a284:	745a      	strb	r2, [r3, #17]
    p->creationTime = FAT_DEFAULT_TIME;
    a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a288:	7b9a      	ldrb	r2, [r3, #14]
    a28a:	2100      	movs	r1, #0
    a28c:	400a      	ands	r2, r1
    a28e:	739a      	strb	r2, [r3, #14]
    a290:	7bda      	ldrb	r2, [r3, #15]
    a292:	2100      	movs	r1, #0
    a294:	400a      	ands	r2, r1
    a296:	1c11      	adds	r1, r2, #0
    a298:	2208      	movs	r2, #8
    a29a:	430a      	orrs	r2, r1
    a29c:	73da      	strb	r2, [r3, #15]
  }
  p->lastAccessDate = p->creationDate;
    a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2a0:	7c1a      	ldrb	r2, [r3, #16]
    a2a2:	7c5b      	ldrb	r3, [r3, #17]
    a2a4:	021b      	lsls	r3, r3, #8
    a2a6:	4313      	orrs	r3, r2
    a2a8:	b29a      	uxth	r2, r3
    a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2ac:	21ff      	movs	r1, #255	; 0xff
    a2ae:	4011      	ands	r1, r2
    a2b0:	000c      	movs	r4, r1
    a2b2:	7c99      	ldrb	r1, [r3, #18]
    a2b4:	2000      	movs	r0, #0
    a2b6:	4001      	ands	r1, r0
    a2b8:	1c08      	adds	r0, r1, #0
    a2ba:	1c21      	adds	r1, r4, #0
    a2bc:	4301      	orrs	r1, r0
    a2be:	7499      	strb	r1, [r3, #18]
    a2c0:	0a12      	lsrs	r2, r2, #8
    a2c2:	b290      	uxth	r0, r2
    a2c4:	7cda      	ldrb	r2, [r3, #19]
    a2c6:	2100      	movs	r1, #0
    a2c8:	400a      	ands	r2, r1
    a2ca:	1c11      	adds	r1, r2, #0
    a2cc:	1c02      	adds	r2, r0, #0
    a2ce:	430a      	orrs	r2, r1
    a2d0:	74da      	strb	r2, [r3, #19]
  p->lastWriteDate = p->creationDate;
    a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2d4:	7c1a      	ldrb	r2, [r3, #16]
    a2d6:	7c5b      	ldrb	r3, [r3, #17]
    a2d8:	021b      	lsls	r3, r3, #8
    a2da:	4313      	orrs	r3, r2
    a2dc:	b29a      	uxth	r2, r3
    a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2e0:	21ff      	movs	r1, #255	; 0xff
    a2e2:	4011      	ands	r1, r2
    a2e4:	000c      	movs	r4, r1
    a2e6:	7e19      	ldrb	r1, [r3, #24]
    a2e8:	2000      	movs	r0, #0
    a2ea:	4001      	ands	r1, r0
    a2ec:	1c08      	adds	r0, r1, #0
    a2ee:	1c21      	adds	r1, r4, #0
    a2f0:	4301      	orrs	r1, r0
    a2f2:	7619      	strb	r1, [r3, #24]
    a2f4:	0a12      	lsrs	r2, r2, #8
    a2f6:	b290      	uxth	r0, r2
    a2f8:	7e5a      	ldrb	r2, [r3, #25]
    a2fa:	2100      	movs	r1, #0
    a2fc:	400a      	ands	r2, r1
    a2fe:	1c11      	adds	r1, r2, #0
    a300:	1c02      	adds	r2, r0, #0
    a302:	430a      	orrs	r2, r1
    a304:	765a      	strb	r2, [r3, #25]
  p->lastWriteTime = p->creationTime;
    a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a308:	7b9a      	ldrb	r2, [r3, #14]
    a30a:	7bdb      	ldrb	r3, [r3, #15]
    a30c:	021b      	lsls	r3, r3, #8
    a30e:	4313      	orrs	r3, r2
    a310:	b29a      	uxth	r2, r3
    a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a314:	21ff      	movs	r1, #255	; 0xff
    a316:	4011      	ands	r1, r2
    a318:	000c      	movs	r4, r1
    a31a:	7d99      	ldrb	r1, [r3, #22]
    a31c:	2000      	movs	r0, #0
    a31e:	4001      	ands	r1, r0
    a320:	1c08      	adds	r0, r1, #0
    a322:	1c21      	adds	r1, r4, #0
    a324:	4301      	orrs	r1, r0
    a326:	7599      	strb	r1, [r3, #22]
    a328:	0a12      	lsrs	r2, r2, #8
    a32a:	b290      	uxth	r0, r2
    a32c:	7dda      	ldrb	r2, [r3, #23]
    a32e:	2100      	movs	r1, #0
    a330:	400a      	ands	r2, r1
    a332:	1c11      	adds	r1, r2, #0
    a334:	1c02      	adds	r2, r0, #0
    a336:	430a      	orrs	r2, r1
    a338:	75da      	strb	r2, [r3, #23]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    a33a:	f000 fea1 	bl	b080 <_ZN8SdVolume10cacheFlushEv>
    a33e:	0003      	movs	r3, r0
    a340:	425a      	negs	r2, r3
    a342:	4153      	adcs	r3, r2
    a344:	b2db      	uxtb	r3, r3
    a346:	2b00      	cmp	r3, #0
    a348:	d001      	beq.n	a34e <_ZN6SdFile4openEPS_PKch+0x292>
    a34a:	2300      	movs	r3, #0
    a34c:	e008      	b.n	a360 <_ZN6SdFile4openEPS_PKch+0x2a4>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    a34e:	68fb      	ldr	r3, [r7, #12]
    a350:	7e19      	ldrb	r1, [r3, #24]
    a352:	1cfb      	adds	r3, r7, #3
    a354:	781a      	ldrb	r2, [r3, #0]
    a356:	68fb      	ldr	r3, [r7, #12]
    a358:	0018      	movs	r0, r3
    a35a:	f000 f80b 	bl	a374 <_ZN6SdFile15openCachedEntryEhh>
    a35e:	0003      	movs	r3, r0
}
    a360:	0018      	movs	r0, r3
    a362:	46bd      	mov	sp, r7
    a364:	b00b      	add	sp, #44	; 0x2c
    a366:	bd90      	pop	{r4, r7, pc}
    a368:	2000004c 	.word	0x2000004c
    a36c:	20000968 	.word	0x20000968
    a370:	20000964 	.word	0x20000964

0000a374 <_ZN6SdFile15openCachedEntryEhh>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    a374:	b580      	push	{r7, lr}
    a376:	b084      	sub	sp, #16
    a378:	af00      	add	r7, sp, #0
    a37a:	6078      	str	r0, [r7, #4]
    a37c:	0008      	movs	r0, r1
    a37e:	0011      	movs	r1, r2
    a380:	1cfb      	adds	r3, r7, #3
    a382:	1c02      	adds	r2, r0, #0
    a384:	701a      	strb	r2, [r3, #0]
    a386:	1cbb      	adds	r3, r7, #2
    a388:	1c0a      	adds	r2, r1, #0
    a38a:	701a      	strb	r2, [r3, #0]
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    a38c:	1cfb      	adds	r3, r7, #3
    a38e:	781b      	ldrb	r3, [r3, #0]
    a390:	015a      	lsls	r2, r3, #5
    a392:	4b43      	ldr	r3, [pc, #268]	; (a4a0 <_ZN6SdFile15openCachedEntryEhh+0x12c>)
    a394:	18d3      	adds	r3, r2, r3
    a396:	60fb      	str	r3, [r7, #12]

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    a398:	68fb      	ldr	r3, [r7, #12]
    a39a:	7adb      	ldrb	r3, [r3, #11]
    a39c:	001a      	movs	r2, r3
    a39e:	2311      	movs	r3, #17
    a3a0:	4013      	ands	r3, r2
    a3a2:	d006      	beq.n	a3b2 <_ZN6SdFile15openCachedEntryEhh+0x3e>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    a3a4:	1cbb      	adds	r3, r7, #2
    a3a6:	781b      	ldrb	r3, [r3, #0]
    a3a8:	2242      	movs	r2, #66	; 0x42
    a3aa:	4013      	ands	r3, r2
    a3ac:	d001      	beq.n	a3b2 <_ZN6SdFile15openCachedEntryEhh+0x3e>
    a3ae:	2300      	movs	r3, #0
    a3b0:	e072      	b.n	a498 <_ZN6SdFile15openCachedEntryEhh+0x124>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    a3b2:	687b      	ldr	r3, [r7, #4]
    a3b4:	1cfa      	adds	r2, r7, #3
    a3b6:	7812      	ldrb	r2, [r2, #0]
    a3b8:	761a      	strb	r2, [r3, #24]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    a3ba:	4b3a      	ldr	r3, [pc, #232]	; (a4a4 <_ZN6SdFile15openCachedEntryEhh+0x130>)
    a3bc:	681a      	ldr	r2, [r3, #0]
    a3be:	687b      	ldr	r3, [r7, #4]
    a3c0:	615a      	str	r2, [r3, #20]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    a3c2:	68fb      	ldr	r3, [r7, #12]
    a3c4:	7d1a      	ldrb	r2, [r3, #20]
    a3c6:	7d5b      	ldrb	r3, [r3, #21]
    a3c8:	021b      	lsls	r3, r3, #8
    a3ca:	4313      	orrs	r3, r2
    a3cc:	b29b      	uxth	r3, r3
    a3ce:	041a      	lsls	r2, r3, #16
    a3d0:	687b      	ldr	r3, [r7, #4]
    a3d2:	621a      	str	r2, [r3, #32]
  firstCluster_ |= p->firstClusterLow;
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	6a1a      	ldr	r2, [r3, #32]
    a3d8:	68fb      	ldr	r3, [r7, #12]
    a3da:	7e99      	ldrb	r1, [r3, #26]
    a3dc:	7edb      	ldrb	r3, [r3, #27]
    a3de:	021b      	lsls	r3, r3, #8
    a3e0:	430b      	orrs	r3, r1
    a3e2:	b29b      	uxth	r3, r3
    a3e4:	431a      	orrs	r2, r3
    a3e6:	687b      	ldr	r3, [r7, #4]
    a3e8:	621a      	str	r2, [r3, #32]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    a3ea:	68fb      	ldr	r3, [r7, #12]
    a3ec:	0018      	movs	r0, r3
    a3ee:	f7ff fc0f 	bl	9c10 <_ZL11DIR_IS_FILEPK14directoryEntry>
    a3f2:	0003      	movs	r3, r0
    a3f4:	1e5a      	subs	r2, r3, #1
    a3f6:	4193      	sbcs	r3, r2
    a3f8:	b2db      	uxtb	r3, r3
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	d011      	beq.n	a422 <_ZN6SdFile15openCachedEntryEhh+0xae>
    fileSize_ = p->fileSize;
    a3fe:	68fb      	ldr	r3, [r7, #12]
    a400:	7f1a      	ldrb	r2, [r3, #28]
    a402:	7f59      	ldrb	r1, [r3, #29]
    a404:	0209      	lsls	r1, r1, #8
    a406:	430a      	orrs	r2, r1
    a408:	7f99      	ldrb	r1, [r3, #30]
    a40a:	0409      	lsls	r1, r1, #16
    a40c:	430a      	orrs	r2, r1
    a40e:	7fdb      	ldrb	r3, [r3, #31]
    a410:	061b      	lsls	r3, r3, #24
    a412:	4313      	orrs	r3, r2
    a414:	001a      	movs	r2, r3
    a416:	687b      	ldr	r3, [r7, #4]
    a418:	61da      	str	r2, [r3, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
    a41a:	687b      	ldr	r3, [r7, #4]
    a41c:	2201      	movs	r2, #1
    a41e:	725a      	strb	r2, [r3, #9]
    a420:	e020      	b.n	a464 <_ZN6SdFile15openCachedEntryEhh+0xf0>
  } else if (DIR_IS_SUBDIR(p)) {
    a422:	68fb      	ldr	r3, [r7, #12]
    a424:	0018      	movs	r0, r3
    a426:	f7ff fc03 	bl	9c30 <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
    a42a:	0003      	movs	r3, r0
    a42c:	1e5a      	subs	r2, r3, #1
    a42e:	4193      	sbcs	r3, r2
    a430:	b2db      	uxtb	r3, r3
    a432:	2b00      	cmp	r3, #0
    a434:	d014      	beq.n	a460 <_ZN6SdFile15openCachedEntryEhh+0xec>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    a436:	687b      	ldr	r3, [r7, #4]
    a438:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a43a:	687b      	ldr	r3, [r7, #4]
    a43c:	6a19      	ldr	r1, [r3, #32]
    a43e:	687b      	ldr	r3, [r7, #4]
    a440:	331c      	adds	r3, #28
    a442:	001a      	movs	r2, r3
    a444:	f000 fece 	bl	b1e4 <_ZNK8SdVolume9chainSizeEmPm>
    a448:	0003      	movs	r3, r0
    a44a:	425a      	negs	r2, r3
    a44c:	4153      	adcs	r3, r2
    a44e:	b2db      	uxtb	r3, r3
    a450:	2b00      	cmp	r3, #0
    a452:	d001      	beq.n	a458 <_ZN6SdFile15openCachedEntryEhh+0xe4>
    a454:	2300      	movs	r3, #0
    a456:	e01f      	b.n	a498 <_ZN6SdFile15openCachedEntryEhh+0x124>
    type_ = FAT_FILE_TYPE_SUBDIR;
    a458:	687b      	ldr	r3, [r7, #4]
    a45a:	2204      	movs	r2, #4
    a45c:	725a      	strb	r2, [r3, #9]
    a45e:	e001      	b.n	a464 <_ZN6SdFile15openCachedEntryEhh+0xf0>
  } else {
    return false;
    a460:	2300      	movs	r3, #0
    a462:	e019      	b.n	a498 <_ZN6SdFile15openCachedEntryEhh+0x124>
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    a464:	1cbb      	adds	r3, r7, #2
    a466:	781b      	ldrb	r3, [r3, #0]
    a468:	220f      	movs	r2, #15
    a46a:	4013      	ands	r3, r2
    a46c:	b2da      	uxtb	r2, r3
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	721a      	strb	r2, [r3, #8]

  // set to start of file
  curCluster_ = 0;
    a472:	687b      	ldr	r3, [r7, #4]
    a474:	2200      	movs	r2, #0
    a476:	60da      	str	r2, [r3, #12]
  curPosition_ = 0;
    a478:	687b      	ldr	r3, [r7, #4]
    a47a:	2200      	movs	r2, #0
    a47c:	611a      	str	r2, [r3, #16]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    a47e:	1cbb      	adds	r3, r7, #2
    a480:	781b      	ldrb	r3, [r3, #0]
    a482:	2240      	movs	r2, #64	; 0x40
    a484:	4013      	ands	r3, r2
    a486:	d006      	beq.n	a496 <_ZN6SdFile15openCachedEntryEhh+0x122>
    a488:	687b      	ldr	r3, [r7, #4]
    a48a:	2100      	movs	r1, #0
    a48c:	0018      	movs	r0, r3
    a48e:	f000 fb01 	bl	aa94 <_ZN6SdFile8truncateEm>
    a492:	0003      	movs	r3, r0
    a494:	e000      	b.n	a498 <_ZN6SdFile15openCachedEntryEhh+0x124>
  return true;
    a496:	2301      	movs	r3, #1
}
    a498:	0018      	movs	r0, r3
    a49a:	46bd      	mov	sp, r7
    a49c:	b004      	add	sp, #16
    a49e:	bd80      	pop	{r7, pc}
    a4a0:	20000968 	.word	0x20000968
    a4a4:	2000004c 	.word	0x2000004c

0000a4a8 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    a4a8:	b580      	push	{r7, lr}
    a4aa:	b082      	sub	sp, #8
    a4ac:	af00      	add	r7, sp, #0
    a4ae:	6078      	str	r0, [r7, #4]
    a4b0:	6039      	str	r1, [r7, #0]
  // error if file is already open
  if (isOpen()) return false;
    a4b2:	687b      	ldr	r3, [r7, #4]
    a4b4:	0018      	movs	r0, r3
    a4b6:	f7fe f9ca 	bl	884e <_ZNK6SdFile6isOpenEv>
    a4ba:	0003      	movs	r3, r0
    a4bc:	1e5a      	subs	r2, r3, #1
    a4be:	4193      	sbcs	r3, r2
    a4c0:	b2db      	uxtb	r3, r3
    a4c2:	2b00      	cmp	r3, #0
    a4c4:	d001      	beq.n	a4ca <_ZN6SdFile8openRootEP8SdVolume+0x22>
    a4c6:	2300      	movs	r3, #0
    a4c8:	e054      	b.n	a574 <_ZN6SdFile8openRootEP8SdVolume+0xcc>

  if (vol->fatType() == 16) {
    a4ca:	683b      	ldr	r3, [r7, #0]
    a4cc:	0018      	movs	r0, r3
    a4ce:	f7ff fbeb 	bl	9ca8 <_ZNK8SdVolume7fatTypeEv>
    a4d2:	0003      	movs	r3, r0
    a4d4:	3b10      	subs	r3, #16
    a4d6:	425a      	negs	r2, r3
    a4d8:	4153      	adcs	r3, r2
    a4da:	b2db      	uxtb	r3, r3
    a4dc:	2b00      	cmp	r3, #0
    a4de:	d00e      	beq.n	a4fe <_ZN6SdFile8openRootEP8SdVolume+0x56>
    type_ = FAT_FILE_TYPE_ROOT16;
    a4e0:	687b      	ldr	r3, [r7, #4]
    a4e2:	2202      	movs	r2, #2
    a4e4:	725a      	strb	r2, [r3, #9]
    firstCluster_ = 0;
    a4e6:	687b      	ldr	r3, [r7, #4]
    a4e8:	2200      	movs	r2, #0
    a4ea:	621a      	str	r2, [r3, #32]
    fileSize_ = 32 * vol->rootDirEntryCount();
    a4ec:	683b      	ldr	r3, [r7, #0]
    a4ee:	0018      	movs	r0, r3
    a4f0:	f7ff fbe5 	bl	9cbe <_ZNK8SdVolume17rootDirEntryCountEv>
    a4f4:	0003      	movs	r3, r0
    a4f6:	015a      	lsls	r2, r3, #5
    a4f8:	687b      	ldr	r3, [r7, #4]
    a4fa:	61da      	str	r2, [r3, #28]
    a4fc:	e027      	b.n	a54e <_ZN6SdFile8openRootEP8SdVolume+0xa6>
  } else if (vol->fatType() == 32) {
    a4fe:	683b      	ldr	r3, [r7, #0]
    a500:	0018      	movs	r0, r3
    a502:	f7ff fbd1 	bl	9ca8 <_ZNK8SdVolume7fatTypeEv>
    a506:	0003      	movs	r3, r0
    a508:	3b20      	subs	r3, #32
    a50a:	425a      	negs	r2, r3
    a50c:	4153      	adcs	r3, r2
    a50e:	b2db      	uxtb	r3, r3
    a510:	2b00      	cmp	r3, #0
    a512:	d01a      	beq.n	a54a <_ZN6SdFile8openRootEP8SdVolume+0xa2>
    type_ = FAT_FILE_TYPE_ROOT32;
    a514:	687b      	ldr	r3, [r7, #4]
    a516:	2203      	movs	r2, #3
    a518:	725a      	strb	r2, [r3, #9]
    firstCluster_ = vol->rootDirStart();
    a51a:	683b      	ldr	r3, [r7, #0]
    a51c:	0018      	movs	r0, r3
    a51e:	f7ff fbd8 	bl	9cd2 <_ZNK8SdVolume12rootDirStartEv>
    a522:	0002      	movs	r2, r0
    a524:	687b      	ldr	r3, [r7, #4]
    a526:	621a      	str	r2, [r3, #32]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    a528:	687b      	ldr	r3, [r7, #4]
    a52a:	6a19      	ldr	r1, [r3, #32]
    a52c:	687b      	ldr	r3, [r7, #4]
    a52e:	331c      	adds	r3, #28
    a530:	001a      	movs	r2, r3
    a532:	683b      	ldr	r3, [r7, #0]
    a534:	0018      	movs	r0, r3
    a536:	f000 fe55 	bl	b1e4 <_ZNK8SdVolume9chainSizeEmPm>
    a53a:	0003      	movs	r3, r0
    a53c:	425a      	negs	r2, r3
    a53e:	4153      	adcs	r3, r2
    a540:	b2db      	uxtb	r3, r3
    a542:	2b00      	cmp	r3, #0
    a544:	d003      	beq.n	a54e <_ZN6SdFile8openRootEP8SdVolume+0xa6>
    a546:	2300      	movs	r3, #0
    a548:	e014      	b.n	a574 <_ZN6SdFile8openRootEP8SdVolume+0xcc>
  } else {
    // volume is not initialized or FAT12
    return false;
    a54a:	2300      	movs	r3, #0
    a54c:	e012      	b.n	a574 <_ZN6SdFile8openRootEP8SdVolume+0xcc>
  }
  vol_ = vol;
    a54e:	687b      	ldr	r3, [r7, #4]
    a550:	683a      	ldr	r2, [r7, #0]
    a552:	625a      	str	r2, [r3, #36]	; 0x24
  // read only
  flags_ = O_READ;
    a554:	687b      	ldr	r3, [r7, #4]
    a556:	2201      	movs	r2, #1
    a558:	721a      	strb	r2, [r3, #8]

  // set to start of file
  curCluster_ = 0;
    a55a:	687b      	ldr	r3, [r7, #4]
    a55c:	2200      	movs	r2, #0
    a55e:	60da      	str	r2, [r3, #12]
  curPosition_ = 0;
    a560:	687b      	ldr	r3, [r7, #4]
    a562:	2200      	movs	r2, #0
    a564:	611a      	str	r2, [r3, #16]

  // root has no directory entry
  dirBlock_ = 0;
    a566:	687b      	ldr	r3, [r7, #4]
    a568:	2200      	movs	r2, #0
    a56a:	615a      	str	r2, [r3, #20]
  dirIndex_ = 0;
    a56c:	687b      	ldr	r3, [r7, #4]
    a56e:	2200      	movs	r2, #0
    a570:	761a      	strb	r2, [r3, #24]
  return true;
    a572:	2301      	movs	r3, #1
}
    a574:	0018      	movs	r0, r3
    a576:	46bd      	mov	sp, r7
    a578:	b002      	add	sp, #8
    a57a:	bd80      	pop	{r7, pc}

0000a57c <_ZN6SdFile4readEPvt>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    a57c:	b590      	push	{r4, r7, lr}
    a57e:	b08f      	sub	sp, #60	; 0x3c
    a580:	af02      	add	r7, sp, #8
    a582:	60f8      	str	r0, [r7, #12]
    a584:	60b9      	str	r1, [r7, #8]
    a586:	1dbb      	adds	r3, r7, #6
    a588:	801a      	strh	r2, [r3, #0]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    a58a:	68bb      	ldr	r3, [r7, #8]
    a58c:	62fb      	str	r3, [r7, #44]	; 0x2c

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    a58e:	68fb      	ldr	r3, [r7, #12]
    a590:	0018      	movs	r0, r3
    a592:	f7fe f95c 	bl	884e <_ZNK6SdFile6isOpenEv>
    a596:	1e03      	subs	r3, r0, #0
    a598:	d005      	beq.n	a5a6 <_ZN6SdFile4readEPvt+0x2a>
    a59a:	68fb      	ldr	r3, [r7, #12]
    a59c:	7a1b      	ldrb	r3, [r3, #8]
    a59e:	001a      	movs	r2, r3
    a5a0:	2301      	movs	r3, #1
    a5a2:	4013      	ands	r3, r2
    a5a4:	d101      	bne.n	a5aa <_ZN6SdFile4readEPvt+0x2e>
    a5a6:	2301      	movs	r3, #1
    a5a8:	e000      	b.n	a5ac <_ZN6SdFile4readEPvt+0x30>
    a5aa:	2300      	movs	r3, #0
    a5ac:	2b00      	cmp	r3, #0
    a5ae:	d002      	beq.n	a5b6 <_ZN6SdFile4readEPvt+0x3a>
    a5b0:	2301      	movs	r3, #1
    a5b2:	425b      	negs	r3, r3
    a5b4:	e0ff      	b.n	a7b6 <_ZN6SdFile4readEPvt+0x23a>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    a5b6:	1dbb      	adds	r3, r7, #6
    a5b8:	881a      	ldrh	r2, [r3, #0]
    a5ba:	68fb      	ldr	r3, [r7, #12]
    a5bc:	69d9      	ldr	r1, [r3, #28]
    a5be:	68fb      	ldr	r3, [r7, #12]
    a5c0:	691b      	ldr	r3, [r3, #16]
    a5c2:	1acb      	subs	r3, r1, r3
    a5c4:	429a      	cmp	r2, r3
    a5c6:	d908      	bls.n	a5da <_ZN6SdFile4readEPvt+0x5e>
    a5c8:	68fb      	ldr	r3, [r7, #12]
    a5ca:	69db      	ldr	r3, [r3, #28]
    a5cc:	b299      	uxth	r1, r3
    a5ce:	68fb      	ldr	r3, [r7, #12]
    a5d0:	691b      	ldr	r3, [r3, #16]
    a5d2:	b29a      	uxth	r2, r3
    a5d4:	1dbb      	adds	r3, r7, #6
    a5d6:	1a8a      	subs	r2, r1, r2
    a5d8:	801a      	strh	r2, [r3, #0]

  // amount left to read
  uint16_t toRead = nbyte;
    a5da:	232a      	movs	r3, #42	; 0x2a
    a5dc:	18fb      	adds	r3, r7, r3
    a5de:	1dba      	adds	r2, r7, #6
    a5e0:	8812      	ldrh	r2, [r2, #0]
    a5e2:	801a      	strh	r2, [r3, #0]
  while (toRead > 0) {
    a5e4:	232a      	movs	r3, #42	; 0x2a
    a5e6:	18fb      	adds	r3, r7, r3
    a5e8:	881b      	ldrh	r3, [r3, #0]
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	dc00      	bgt.n	a5f0 <_ZN6SdFile4readEPvt+0x74>
    a5ee:	e0df      	b.n	a7b0 <_ZN6SdFile4readEPvt+0x234>
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    a5f0:	68fb      	ldr	r3, [r7, #12]
    a5f2:	691b      	ldr	r3, [r3, #16]
    a5f4:	b29a      	uxth	r2, r3
    a5f6:	231a      	movs	r3, #26
    a5f8:	18fb      	adds	r3, r7, r3
    a5fa:	05d2      	lsls	r2, r2, #23
    a5fc:	0dd2      	lsrs	r2, r2, #23
    a5fe:	801a      	strh	r2, [r3, #0]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    a600:	68fb      	ldr	r3, [r7, #12]
    a602:	7a5b      	ldrb	r3, [r3, #9]
    a604:	2b02      	cmp	r3, #2
    a606:	d10b      	bne.n	a620 <_ZN6SdFile4readEPvt+0xa4>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    a608:	68fb      	ldr	r3, [r7, #12]
    a60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a60c:	0018      	movs	r0, r3
    a60e:	f7ff fb60 	bl	9cd2 <_ZNK8SdVolume12rootDirStartEv>
    a612:	0002      	movs	r2, r0
    a614:	68fb      	ldr	r3, [r7, #12]
    a616:	691b      	ldr	r3, [r3, #16]
    a618:	0a5b      	lsrs	r3, r3, #9
    a61a:	18d3      	adds	r3, r2, r3
    a61c:	627b      	str	r3, [r7, #36]	; 0x24
    a61e:	e03e      	b.n	a69e <_ZN6SdFile4readEPvt+0x122>
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    a620:	68fb      	ldr	r3, [r7, #12]
    a622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a624:	68fb      	ldr	r3, [r7, #12]
    a626:	691b      	ldr	r3, [r3, #16]
    a628:	2113      	movs	r1, #19
    a62a:	187c      	adds	r4, r7, r1
    a62c:	0019      	movs	r1, r3
    a62e:	0010      	movs	r0, r2
    a630:	f7ff fb59 	bl	9ce6 <_ZNK8SdVolume14blockOfClusterEm>
    a634:	0003      	movs	r3, r0
    a636:	7023      	strb	r3, [r4, #0]
      if (offset == 0 && blockOfCluster == 0) {
    a638:	231a      	movs	r3, #26
    a63a:	18fb      	adds	r3, r7, r3
    a63c:	881b      	ldrh	r3, [r3, #0]
    a63e:	2b00      	cmp	r3, #0
    a640:	d11f      	bne.n	a682 <_ZN6SdFile4readEPvt+0x106>
    a642:	2313      	movs	r3, #19
    a644:	18fb      	adds	r3, r7, r3
    a646:	781b      	ldrb	r3, [r3, #0]
    a648:	2b00      	cmp	r3, #0
    a64a:	d11a      	bne.n	a682 <_ZN6SdFile4readEPvt+0x106>
        // start of new cluster
        if (curPosition_ == 0) {
    a64c:	68fb      	ldr	r3, [r7, #12]
    a64e:	691b      	ldr	r3, [r3, #16]
    a650:	2b00      	cmp	r3, #0
    a652:	d104      	bne.n	a65e <_ZN6SdFile4readEPvt+0xe2>
          // use first cluster in file
          curCluster_ = firstCluster_;
    a654:	68fb      	ldr	r3, [r7, #12]
    a656:	6a1a      	ldr	r2, [r3, #32]
    a658:	68fb      	ldr	r3, [r7, #12]
    a65a:	60da      	str	r2, [r3, #12]
    a65c:	e011      	b.n	a682 <_ZN6SdFile4readEPvt+0x106>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    a65e:	68fb      	ldr	r3, [r7, #12]
    a660:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a662:	68fb      	ldr	r3, [r7, #12]
    a664:	68d9      	ldr	r1, [r3, #12]
    a666:	68fb      	ldr	r3, [r7, #12]
    a668:	330c      	adds	r3, #12
    a66a:	001a      	movs	r2, r3
    a66c:	f000 fdf0 	bl	b250 <_ZNK8SdVolume6fatGetEmPm>
    a670:	0003      	movs	r3, r0
    a672:	425a      	negs	r2, r3
    a674:	4153      	adcs	r3, r2
    a676:	b2db      	uxtb	r3, r3
    a678:	2b00      	cmp	r3, #0
    a67a:	d002      	beq.n	a682 <_ZN6SdFile4readEPvt+0x106>
    a67c:	2301      	movs	r3, #1
    a67e:	425b      	negs	r3, r3
    a680:	e099      	b.n	a7b6 <_ZN6SdFile4readEPvt+0x23a>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    a682:	68fb      	ldr	r3, [r7, #12]
    a684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a686:	68fb      	ldr	r3, [r7, #12]
    a688:	68db      	ldr	r3, [r3, #12]
    a68a:	0019      	movs	r1, r3
    a68c:	0010      	movs	r0, r2
    a68e:	f7ff fb3c 	bl	9d0a <_ZNK8SdVolume17clusterStartBlockEm>
    a692:	0002      	movs	r2, r0
    a694:	2313      	movs	r3, #19
    a696:	18fb      	adds	r3, r7, r3
    a698:	781b      	ldrb	r3, [r3, #0]
    a69a:	18d3      	adds	r3, r2, r3
    a69c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    uint16_t n = toRead;
    a69e:	2322      	movs	r3, #34	; 0x22
    a6a0:	18fb      	adds	r3, r7, r3
    a6a2:	222a      	movs	r2, #42	; 0x2a
    a6a4:	18ba      	adds	r2, r7, r2
    a6a6:	8812      	ldrh	r2, [r2, #0]
    a6a8:	801a      	strh	r2, [r3, #0]

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    a6aa:	2322      	movs	r3, #34	; 0x22
    a6ac:	18fb      	adds	r3, r7, r3
    a6ae:	881a      	ldrh	r2, [r3, #0]
    a6b0:	231a      	movs	r3, #26
    a6b2:	18fb      	adds	r3, r7, r3
    a6b4:	881b      	ldrh	r3, [r3, #0]
    a6b6:	2180      	movs	r1, #128	; 0x80
    a6b8:	0089      	lsls	r1, r1, #2
    a6ba:	1acb      	subs	r3, r1, r3
    a6bc:	429a      	cmp	r2, r3
    a6be:	dd08      	ble.n	a6d2 <_ZN6SdFile4readEPvt+0x156>
    a6c0:	2322      	movs	r3, #34	; 0x22
    a6c2:	18fb      	adds	r3, r7, r3
    a6c4:	221a      	movs	r2, #26
    a6c6:	18ba      	adds	r2, r7, r2
    a6c8:	8812      	ldrh	r2, [r2, #0]
    a6ca:	2180      	movs	r1, #128	; 0x80
    a6cc:	0089      	lsls	r1, r1, #2
    a6ce:	1a8a      	subs	r2, r1, r2
    a6d0:	801a      	strh	r2, [r3, #0]

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    a6d2:	68fb      	ldr	r3, [r7, #12]
    a6d4:	0018      	movs	r0, r3
    a6d6:	f7ff fada 	bl	9c8e <_ZNK6SdFile14unbufferedReadEv>
    a6da:	1e03      	subs	r3, r0, #0
    a6dc:	d106      	bne.n	a6ec <_ZN6SdFile4readEPvt+0x170>
    a6de:	2322      	movs	r3, #34	; 0x22
    a6e0:	18fb      	adds	r3, r7, r3
    a6e2:	881a      	ldrh	r2, [r3, #0]
    a6e4:	2380      	movs	r3, #128	; 0x80
    a6e6:	009b      	lsls	r3, r3, #2
    a6e8:	429a      	cmp	r2, r3
    a6ea:	d106      	bne.n	a6fa <_ZN6SdFile4readEPvt+0x17e>
      block != SdVolume::cacheBlockNumber_) {
    a6ec:	4b34      	ldr	r3, [pc, #208]	; (a7c0 <_ZN6SdFile4readEPvt+0x244>)
    a6ee:	681b      	ldr	r3, [r3, #0]
    if ((unbufferedRead() || n == 512) &&
    a6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a6f2:	429a      	cmp	r2, r3
    a6f4:	d001      	beq.n	a6fa <_ZN6SdFile4readEPvt+0x17e>
    a6f6:	2301      	movs	r3, #1
    a6f8:	e000      	b.n	a6fc <_ZN6SdFile4readEPvt+0x180>
    a6fa:	2300      	movs	r3, #0
    a6fc:	2b00      	cmp	r3, #0
    a6fe:	d01d      	beq.n	a73c <_ZN6SdFile4readEPvt+0x1c0>
      if (!vol_->readData(block, offset, n, dst)) return -1;
    a700:	68fb      	ldr	r3, [r7, #12]
    a702:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a704:	2322      	movs	r3, #34	; 0x22
    a706:	18fb      	adds	r3, r7, r3
    a708:	881c      	ldrh	r4, [r3, #0]
    a70a:	231a      	movs	r3, #26
    a70c:	18fb      	adds	r3, r7, r3
    a70e:	881a      	ldrh	r2, [r3, #0]
    a710:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a714:	9300      	str	r3, [sp, #0]
    a716:	0023      	movs	r3, r4
    a718:	f7ff fb42 	bl	9da0 <_ZN8SdVolume8readDataEmttPh>
    a71c:	0003      	movs	r3, r0
    a71e:	425a      	negs	r2, r3
    a720:	4153      	adcs	r3, r2
    a722:	b2db      	uxtb	r3, r3
    a724:	2b00      	cmp	r3, #0
    a726:	d002      	beq.n	a72e <_ZN6SdFile4readEPvt+0x1b2>
    a728:	2301      	movs	r3, #1
    a72a:	425b      	negs	r3, r3
    a72c:	e043      	b.n	a7b6 <_ZN6SdFile4readEPvt+0x23a>
      dst += n;
    a72e:	2322      	movs	r3, #34	; 0x22
    a730:	18fb      	adds	r3, r7, r3
    a732:	881b      	ldrh	r3, [r3, #0]
    a734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a736:	18d3      	adds	r3, r2, r3
    a738:	62fb      	str	r3, [r7, #44]	; 0x2c
    a73a:	e026      	b.n	a78a <_ZN6SdFile4readEPvt+0x20e>
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a73e:	2100      	movs	r1, #0
    a740:	0018      	movs	r0, r3
    a742:	f000 fcdb 	bl	b0fc <_ZN8SdVolume13cacheRawBlockEmh>
    a746:	0003      	movs	r3, r0
    a748:	425a      	negs	r2, r3
    a74a:	4153      	adcs	r3, r2
    a74c:	b2db      	uxtb	r3, r3
    a74e:	2b00      	cmp	r3, #0
    a750:	d002      	beq.n	a758 <_ZN6SdFile4readEPvt+0x1dc>
    a752:	2301      	movs	r3, #1
    a754:	425b      	negs	r3, r3
    a756:	e02e      	b.n	a7b6 <_ZN6SdFile4readEPvt+0x23a>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    a758:	231a      	movs	r3, #26
    a75a:	18fb      	adds	r3, r7, r3
    a75c:	881a      	ldrh	r2, [r3, #0]
    a75e:	4b19      	ldr	r3, [pc, #100]	; (a7c4 <_ZN6SdFile4readEPvt+0x248>)
    a760:	18d3      	adds	r3, r2, r3
    a762:	61fb      	str	r3, [r7, #28]
      uint8_t* end = src + n;
    a764:	2322      	movs	r3, #34	; 0x22
    a766:	18fb      	adds	r3, r7, r3
    a768:	881b      	ldrh	r3, [r3, #0]
    a76a:	69fa      	ldr	r2, [r7, #28]
    a76c:	18d3      	adds	r3, r2, r3
    a76e:	617b      	str	r3, [r7, #20]
      while (src != end) *dst++ = *src++;
    a770:	69fa      	ldr	r2, [r7, #28]
    a772:	697b      	ldr	r3, [r7, #20]
    a774:	429a      	cmp	r2, r3
    a776:	d008      	beq.n	a78a <_ZN6SdFile4readEPvt+0x20e>
    a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a77a:	1c5a      	adds	r2, r3, #1
    a77c:	62fa      	str	r2, [r7, #44]	; 0x2c
    a77e:	69fa      	ldr	r2, [r7, #28]
    a780:	1c51      	adds	r1, r2, #1
    a782:	61f9      	str	r1, [r7, #28]
    a784:	7812      	ldrb	r2, [r2, #0]
    a786:	701a      	strb	r2, [r3, #0]
    a788:	e7f2      	b.n	a770 <_ZN6SdFile4readEPvt+0x1f4>
    }
    curPosition_ += n;
    a78a:	68fb      	ldr	r3, [r7, #12]
    a78c:	691a      	ldr	r2, [r3, #16]
    a78e:	2322      	movs	r3, #34	; 0x22
    a790:	18fb      	adds	r3, r7, r3
    a792:	881b      	ldrh	r3, [r3, #0]
    a794:	18d2      	adds	r2, r2, r3
    a796:	68fb      	ldr	r3, [r7, #12]
    a798:	611a      	str	r2, [r3, #16]
    toRead -= n;
    a79a:	232a      	movs	r3, #42	; 0x2a
    a79c:	18fb      	adds	r3, r7, r3
    a79e:	222a      	movs	r2, #42	; 0x2a
    a7a0:	18b9      	adds	r1, r7, r2
    a7a2:	2222      	movs	r2, #34	; 0x22
    a7a4:	18ba      	adds	r2, r7, r2
    a7a6:	8809      	ldrh	r1, [r1, #0]
    a7a8:	8812      	ldrh	r2, [r2, #0]
    a7aa:	1a8a      	subs	r2, r1, r2
    a7ac:	801a      	strh	r2, [r3, #0]
  while (toRead > 0) {
    a7ae:	e719      	b.n	a5e4 <_ZN6SdFile4readEPvt+0x68>
  }
  return nbyte;
    a7b0:	1dbb      	adds	r3, r7, #6
    a7b2:	2200      	movs	r2, #0
    a7b4:	5e9b      	ldrsh	r3, [r3, r2]
}
    a7b6:	0018      	movs	r0, r3
    a7b8:	46bd      	mov	sp, r7
    a7ba:	b00d      	add	sp, #52	; 0x34
    a7bc:	bd90      	pop	{r4, r7, pc}
    a7be:	46c0      	nop			; (mov r8, r8)
    a7c0:	2000004c 	.word	0x2000004c
    a7c4:	20000968 	.word	0x20000968

0000a7c8 <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    a7c8:	b580      	push	{r7, lr}
    a7ca:	b084      	sub	sp, #16
    a7cc:	af00      	add	r7, sp, #0
    a7ce:	6078      	str	r0, [r7, #4]
  // error if not directory
  if (!isDir()) return NULL;
    a7d0:	687b      	ldr	r3, [r7, #4]
    a7d2:	0018      	movs	r0, r3
    a7d4:	f7fe f82b 	bl	882e <_ZNK6SdFile5isDirEv>
    a7d8:	0003      	movs	r3, r0
    a7da:	425a      	negs	r2, r3
    a7dc:	4153      	adcs	r3, r2
    a7de:	b2db      	uxtb	r3, r3
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	d001      	beq.n	a7e8 <_ZN6SdFile12readDirCacheEv+0x20>
    a7e4:	2300      	movs	r3, #0
    a7e6:	e020      	b.n	a82a <_ZN6SdFile12readDirCacheEv+0x62>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    a7e8:	687b      	ldr	r3, [r7, #4]
    a7ea:	691b      	ldr	r3, [r3, #16]
    a7ec:	095b      	lsrs	r3, r3, #5
    a7ee:	b2da      	uxtb	r2, r3
    a7f0:	230f      	movs	r3, #15
    a7f2:	18fb      	adds	r3, r7, r3
    a7f4:	210f      	movs	r1, #15
    a7f6:	400a      	ands	r2, r1
    a7f8:	701a      	strb	r2, [r3, #0]

  // use read to locate and cache block
  if (read() < 0) return NULL;
    a7fa:	687b      	ldr	r3, [r7, #4]
    a7fc:	0018      	movs	r0, r3
    a7fe:	f7fe f833 	bl	8868 <_ZN6SdFile4readEv>
    a802:	0003      	movs	r3, r0
    a804:	b29b      	uxth	r3, r3
    a806:	0bdb      	lsrs	r3, r3, #15
    a808:	b2db      	uxtb	r3, r3
    a80a:	2b00      	cmp	r3, #0
    a80c:	d001      	beq.n	a812 <_ZN6SdFile12readDirCacheEv+0x4a>
    a80e:	2300      	movs	r3, #0
    a810:	e00b      	b.n	a82a <_ZN6SdFile12readDirCacheEv+0x62>

  // advance to next entry
  curPosition_ += 31;
    a812:	687b      	ldr	r3, [r7, #4]
    a814:	691b      	ldr	r3, [r3, #16]
    a816:	331f      	adds	r3, #31
    a818:	001a      	movs	r2, r3
    a81a:	687b      	ldr	r3, [r7, #4]
    a81c:	611a      	str	r2, [r3, #16]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    a81e:	230f      	movs	r3, #15
    a820:	18fb      	adds	r3, r7, r3
    a822:	781b      	ldrb	r3, [r3, #0]
    a824:	015a      	lsls	r2, r3, #5
    a826:	4b03      	ldr	r3, [pc, #12]	; (a834 <_ZN6SdFile12readDirCacheEv+0x6c>)
    a828:	18d3      	adds	r3, r2, r3
}
    a82a:	0018      	movs	r0, r3
    a82c:	46bd      	mov	sp, r7
    a82e:	b004      	add	sp, #16
    a830:	bd80      	pop	{r7, pc}
    a832:	46c0      	nop			; (mov r8, r8)
    a834:	20000968 	.word	0x20000968

0000a838 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    a838:	b580      	push	{r7, lr}
    a83a:	b084      	sub	sp, #16
    a83c:	af00      	add	r7, sp, #0
    a83e:	6078      	str	r0, [r7, #4]
    a840:	6039      	str	r1, [r7, #0]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    a842:	687b      	ldr	r3, [r7, #4]
    a844:	0018      	movs	r0, r3
    a846:	f7fe f802 	bl	884e <_ZNK6SdFile6isOpenEv>
    a84a:	1e03      	subs	r3, r0, #0
    a84c:	d004      	beq.n	a858 <_ZN6SdFile7seekSetEm+0x20>
    a84e:	687b      	ldr	r3, [r7, #4]
    a850:	69da      	ldr	r2, [r3, #28]
    a852:	683b      	ldr	r3, [r7, #0]
    a854:	429a      	cmp	r2, r3
    a856:	d201      	bcs.n	a85c <_ZN6SdFile7seekSetEm+0x24>
    a858:	2301      	movs	r3, #1
    a85a:	e000      	b.n	a85e <_ZN6SdFile7seekSetEm+0x26>
    a85c:	2300      	movs	r3, #0
    a85e:	2b00      	cmp	r3, #0
    a860:	d001      	beq.n	a866 <_ZN6SdFile7seekSetEm+0x2e>
    a862:	2300      	movs	r3, #0
    a864:	e054      	b.n	a910 <_ZN6SdFile7seekSetEm+0xd8>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    a866:	687b      	ldr	r3, [r7, #4]
    a868:	7a5b      	ldrb	r3, [r3, #9]
    a86a:	2b02      	cmp	r3, #2
    a86c:	d104      	bne.n	a878 <_ZN6SdFile7seekSetEm+0x40>
    curPosition_ = pos;
    a86e:	687b      	ldr	r3, [r7, #4]
    a870:	683a      	ldr	r2, [r7, #0]
    a872:	611a      	str	r2, [r3, #16]
    return true;
    a874:	2301      	movs	r3, #1
    a876:	e04b      	b.n	a910 <_ZN6SdFile7seekSetEm+0xd8>
  }
  if (pos == 0) {
    a878:	683b      	ldr	r3, [r7, #0]
    a87a:	2b00      	cmp	r3, #0
    a87c:	d107      	bne.n	a88e <_ZN6SdFile7seekSetEm+0x56>
    // set position to start of file
    curCluster_ = 0;
    a87e:	687b      	ldr	r3, [r7, #4]
    a880:	2200      	movs	r2, #0
    a882:	60da      	str	r2, [r3, #12]
    curPosition_ = 0;
    a884:	687b      	ldr	r3, [r7, #4]
    a886:	2200      	movs	r2, #0
    a888:	611a      	str	r2, [r3, #16]
    return true;
    a88a:	2301      	movs	r3, #1
    a88c:	e040      	b.n	a910 <_ZN6SdFile7seekSetEm+0xd8>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    a88e:	687b      	ldr	r3, [r7, #4]
    a890:	691b      	ldr	r3, [r3, #16]
    a892:	1e5a      	subs	r2, r3, #1
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a898:	7c1b      	ldrb	r3, [r3, #16]
    a89a:	3309      	adds	r3, #9
    a89c:	40da      	lsrs	r2, r3
    a89e:	0013      	movs	r3, r2
    a8a0:	60bb      	str	r3, [r7, #8]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    a8a2:	683b      	ldr	r3, [r7, #0]
    a8a4:	1e5a      	subs	r2, r3, #1
    a8a6:	687b      	ldr	r3, [r7, #4]
    a8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a8aa:	7c1b      	ldrb	r3, [r3, #16]
    a8ac:	3309      	adds	r3, #9
    a8ae:	40da      	lsrs	r2, r3
    a8b0:	0013      	movs	r3, r2
    a8b2:	60fb      	str	r3, [r7, #12]

  if (nNew < nCur || curPosition_ == 0) {
    a8b4:	68fa      	ldr	r2, [r7, #12]
    a8b6:	68bb      	ldr	r3, [r7, #8]
    a8b8:	429a      	cmp	r2, r3
    a8ba:	d303      	bcc.n	a8c4 <_ZN6SdFile7seekSetEm+0x8c>
    a8bc:	687b      	ldr	r3, [r7, #4]
    a8be:	691b      	ldr	r3, [r3, #16]
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	d104      	bne.n	a8ce <_ZN6SdFile7seekSetEm+0x96>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	6a1a      	ldr	r2, [r3, #32]
    a8c8:	687b      	ldr	r3, [r7, #4]
    a8ca:	60da      	str	r2, [r3, #12]
    a8cc:	e003      	b.n	a8d6 <_ZN6SdFile7seekSetEm+0x9e>
  } else {
    // advance from curPosition
    nNew -= nCur;
    a8ce:	68fa      	ldr	r2, [r7, #12]
    a8d0:	68bb      	ldr	r3, [r7, #8]
    a8d2:	1ad3      	subs	r3, r2, r3
    a8d4:	60fb      	str	r3, [r7, #12]
  }
  while (nNew--) {
    a8d6:	68fb      	ldr	r3, [r7, #12]
    a8d8:	1e5a      	subs	r2, r3, #1
    a8da:	60fa      	str	r2, [r7, #12]
    a8dc:	1e5a      	subs	r2, r3, #1
    a8de:	4193      	sbcs	r3, r2
    a8e0:	b2db      	uxtb	r3, r3
    a8e2:	2b00      	cmp	r3, #0
    a8e4:	d010      	beq.n	a908 <_ZN6SdFile7seekSetEm+0xd0>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    a8e6:	687b      	ldr	r3, [r7, #4]
    a8e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a8ea:	687b      	ldr	r3, [r7, #4]
    a8ec:	68d9      	ldr	r1, [r3, #12]
    a8ee:	687b      	ldr	r3, [r7, #4]
    a8f0:	330c      	adds	r3, #12
    a8f2:	001a      	movs	r2, r3
    a8f4:	f000 fcac 	bl	b250 <_ZNK8SdVolume6fatGetEmPm>
    a8f8:	0003      	movs	r3, r0
    a8fa:	425a      	negs	r2, r3
    a8fc:	4153      	adcs	r3, r2
    a8fe:	b2db      	uxtb	r3, r3
    a900:	2b00      	cmp	r3, #0
    a902:	d0e8      	beq.n	a8d6 <_ZN6SdFile7seekSetEm+0x9e>
    a904:	2300      	movs	r3, #0
    a906:	e003      	b.n	a910 <_ZN6SdFile7seekSetEm+0xd8>
  }
  curPosition_ = pos;
    a908:	687b      	ldr	r3, [r7, #4]
    a90a:	683a      	ldr	r2, [r7, #0]
    a90c:	611a      	str	r2, [r3, #16]
  return true;
    a90e:	2301      	movs	r3, #1
}
    a910:	0018      	movs	r0, r3
    a912:	46bd      	mov	sp, r7
    a914:	b004      	add	sp, #16
    a916:	bd80      	pop	{r7, pc}

0000a918 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    a918:	b590      	push	{r4, r7, lr}
    a91a:	b085      	sub	sp, #20
    a91c:	af00      	add	r7, sp, #0
    a91e:	6078      	str	r0, [r7, #4]
  // only allow open files and directories
  if (!isOpen()) return false;
    a920:	687b      	ldr	r3, [r7, #4]
    a922:	0018      	movs	r0, r3
    a924:	f7fd ff93 	bl	884e <_ZNK6SdFile6isOpenEv>
    a928:	0003      	movs	r3, r0
    a92a:	425a      	negs	r2, r3
    a92c:	4153      	adcs	r3, r2
    a92e:	b2db      	uxtb	r3, r3
    a930:	2b00      	cmp	r3, #0
    a932:	d001      	beq.n	a938 <_ZN6SdFile4syncEv+0x20>
    a934:	2300      	movs	r3, #0
    a936:	e0a6      	b.n	aa86 <_ZN6SdFile4syncEv+0x16e>

  if (flags_ & F_FILE_DIR_DIRTY) {
    a938:	687b      	ldr	r3, [r7, #4]
    a93a:	7a1b      	ldrb	r3, [r3, #8]
    a93c:	b25b      	sxtb	r3, r3
    a93e:	2b00      	cmp	r3, #0
    a940:	db00      	blt.n	a944 <_ZN6SdFile4syncEv+0x2c>
    a942:	e09d      	b.n	aa80 <_ZN6SdFile4syncEv+0x168>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    a944:	687b      	ldr	r3, [r7, #4]
    a946:	2101      	movs	r1, #1
    a948:	0018      	movs	r0, r3
    a94a:	f7ff fad3 	bl	9ef4 <_ZN6SdFile13cacheDirEntryEh>
    a94e:	0003      	movs	r3, r0
    a950:	60fb      	str	r3, [r7, #12]
    if (!d) return false;
    a952:	68fb      	ldr	r3, [r7, #12]
    a954:	2b00      	cmp	r3, #0
    a956:	d101      	bne.n	a95c <_ZN6SdFile4syncEv+0x44>
    a958:	2300      	movs	r3, #0
    a95a:	e094      	b.n	aa86 <_ZN6SdFile4syncEv+0x16e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    a95c:	687b      	ldr	r3, [r7, #4]
    a95e:	0018      	movs	r0, r3
    a960:	f7fd ff65 	bl	882e <_ZNK6SdFile5isDirEv>
    a964:	0003      	movs	r3, r0
    a966:	425a      	negs	r2, r3
    a968:	4153      	adcs	r3, r2
    a96a:	b2db      	uxtb	r3, r3
    a96c:	2b00      	cmp	r3, #0
    a96e:	d02a      	beq.n	a9c6 <_ZN6SdFile4syncEv+0xae>
    a970:	687b      	ldr	r3, [r7, #4]
    a972:	69da      	ldr	r2, [r3, #28]
    a974:	68fb      	ldr	r3, [r7, #12]
    a976:	21ff      	movs	r1, #255	; 0xff
    a978:	4011      	ands	r1, r2
    a97a:	000c      	movs	r4, r1
    a97c:	7f19      	ldrb	r1, [r3, #28]
    a97e:	2000      	movs	r0, #0
    a980:	4001      	ands	r1, r0
    a982:	1c08      	adds	r0, r1, #0
    a984:	1c21      	adds	r1, r4, #0
    a986:	4301      	orrs	r1, r0
    a988:	7719      	strb	r1, [r3, #28]
    a98a:	0a11      	lsrs	r1, r2, #8
    a98c:	20ff      	movs	r0, #255	; 0xff
    a98e:	4001      	ands	r1, r0
    a990:	000c      	movs	r4, r1
    a992:	7f59      	ldrb	r1, [r3, #29]
    a994:	2000      	movs	r0, #0
    a996:	4001      	ands	r1, r0
    a998:	1c08      	adds	r0, r1, #0
    a99a:	1c21      	adds	r1, r4, #0
    a99c:	4301      	orrs	r1, r0
    a99e:	7759      	strb	r1, [r3, #29]
    a9a0:	0c11      	lsrs	r1, r2, #16
    a9a2:	20ff      	movs	r0, #255	; 0xff
    a9a4:	4001      	ands	r1, r0
    a9a6:	000c      	movs	r4, r1
    a9a8:	7f99      	ldrb	r1, [r3, #30]
    a9aa:	2000      	movs	r0, #0
    a9ac:	4001      	ands	r1, r0
    a9ae:	1c08      	adds	r0, r1, #0
    a9b0:	1c21      	adds	r1, r4, #0
    a9b2:	4301      	orrs	r1, r0
    a9b4:	7799      	strb	r1, [r3, #30]
    a9b6:	0e10      	lsrs	r0, r2, #24
    a9b8:	7fda      	ldrb	r2, [r3, #31]
    a9ba:	2100      	movs	r1, #0
    a9bc:	400a      	ands	r2, r1
    a9be:	1c11      	adds	r1, r2, #0
    a9c0:	1c02      	adds	r2, r0, #0
    a9c2:	430a      	orrs	r2, r1
    a9c4:	77da      	strb	r2, [r3, #31]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    a9c6:	687b      	ldr	r3, [r7, #4]
    a9c8:	6a1b      	ldr	r3, [r3, #32]
    a9ca:	b29a      	uxth	r2, r3
    a9cc:	68fb      	ldr	r3, [r7, #12]
    a9ce:	21ff      	movs	r1, #255	; 0xff
    a9d0:	4011      	ands	r1, r2
    a9d2:	000c      	movs	r4, r1
    a9d4:	7e99      	ldrb	r1, [r3, #26]
    a9d6:	2000      	movs	r0, #0
    a9d8:	4001      	ands	r1, r0
    a9da:	1c08      	adds	r0, r1, #0
    a9dc:	1c21      	adds	r1, r4, #0
    a9de:	4301      	orrs	r1, r0
    a9e0:	7699      	strb	r1, [r3, #26]
    a9e2:	0a12      	lsrs	r2, r2, #8
    a9e4:	b290      	uxth	r0, r2
    a9e6:	7eda      	ldrb	r2, [r3, #27]
    a9e8:	2100      	movs	r1, #0
    a9ea:	400a      	ands	r2, r1
    a9ec:	1c11      	adds	r1, r2, #0
    a9ee:	1c02      	adds	r2, r0, #0
    a9f0:	430a      	orrs	r2, r1
    a9f2:	76da      	strb	r2, [r3, #27]
    d->firstClusterHigh = firstCluster_ >> 16;
    a9f4:	687b      	ldr	r3, [r7, #4]
    a9f6:	6a1b      	ldr	r3, [r3, #32]
    a9f8:	0c1b      	lsrs	r3, r3, #16
    a9fa:	b29a      	uxth	r2, r3
    a9fc:	68fb      	ldr	r3, [r7, #12]
    a9fe:	21ff      	movs	r1, #255	; 0xff
    aa00:	4011      	ands	r1, r2
    aa02:	000c      	movs	r4, r1
    aa04:	7d19      	ldrb	r1, [r3, #20]
    aa06:	2000      	movs	r0, #0
    aa08:	4001      	ands	r1, r0
    aa0a:	1c08      	adds	r0, r1, #0
    aa0c:	1c21      	adds	r1, r4, #0
    aa0e:	4301      	orrs	r1, r0
    aa10:	7519      	strb	r1, [r3, #20]
    aa12:	0a12      	lsrs	r2, r2, #8
    aa14:	b290      	uxth	r0, r2
    aa16:	7d5a      	ldrb	r2, [r3, #21]
    aa18:	2100      	movs	r1, #0
    aa1a:	400a      	ands	r2, r1
    aa1c:	1c11      	adds	r1, r2, #0
    aa1e:	1c02      	adds	r2, r0, #0
    aa20:	430a      	orrs	r2, r1
    aa22:	755a      	strb	r2, [r3, #21]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    aa24:	4b1a      	ldr	r3, [pc, #104]	; (aa90 <_ZN6SdFile4syncEv+0x178>)
    aa26:	681b      	ldr	r3, [r3, #0]
    aa28:	2b00      	cmp	r3, #0
    aa2a:	d022      	beq.n	aa72 <_ZN6SdFile4syncEv+0x15a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    aa2c:	4b18      	ldr	r3, [pc, #96]	; (aa90 <_ZN6SdFile4syncEv+0x178>)
    aa2e:	681b      	ldr	r3, [r3, #0]
    aa30:	68fa      	ldr	r2, [r7, #12]
    aa32:	3218      	adds	r2, #24
    aa34:	0010      	movs	r0, r2
    aa36:	68fa      	ldr	r2, [r7, #12]
    aa38:	3216      	adds	r2, #22
    aa3a:	0011      	movs	r1, r2
    aa3c:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    aa3e:	68fb      	ldr	r3, [r7, #12]
    aa40:	7e1a      	ldrb	r2, [r3, #24]
    aa42:	7e5b      	ldrb	r3, [r3, #25]
    aa44:	021b      	lsls	r3, r3, #8
    aa46:	4313      	orrs	r3, r2
    aa48:	b29a      	uxth	r2, r3
    aa4a:	68fb      	ldr	r3, [r7, #12]
    aa4c:	21ff      	movs	r1, #255	; 0xff
    aa4e:	4011      	ands	r1, r2
    aa50:	000c      	movs	r4, r1
    aa52:	7c99      	ldrb	r1, [r3, #18]
    aa54:	2000      	movs	r0, #0
    aa56:	4001      	ands	r1, r0
    aa58:	1c08      	adds	r0, r1, #0
    aa5a:	1c21      	adds	r1, r4, #0
    aa5c:	4301      	orrs	r1, r0
    aa5e:	7499      	strb	r1, [r3, #18]
    aa60:	0a12      	lsrs	r2, r2, #8
    aa62:	b290      	uxth	r0, r2
    aa64:	7cda      	ldrb	r2, [r3, #19]
    aa66:	2100      	movs	r1, #0
    aa68:	400a      	ands	r2, r1
    aa6a:	1c11      	adds	r1, r2, #0
    aa6c:	1c02      	adds	r2, r0, #0
    aa6e:	430a      	orrs	r2, r1
    aa70:	74da      	strb	r2, [r3, #19]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    aa72:	687b      	ldr	r3, [r7, #4]
    aa74:	7a1b      	ldrb	r3, [r3, #8]
    aa76:	227f      	movs	r2, #127	; 0x7f
    aa78:	4013      	ands	r3, r2
    aa7a:	b2da      	uxtb	r2, r3
    aa7c:	687b      	ldr	r3, [r7, #4]
    aa7e:	721a      	strb	r2, [r3, #8]
  }
  return SdVolume::cacheFlush();
    aa80:	f000 fafe 	bl	b080 <_ZN8SdVolume10cacheFlushEv>
    aa84:	0003      	movs	r3, r0
}
    aa86:	0018      	movs	r0, r3
    aa88:	46bd      	mov	sp, r7
    aa8a:	b005      	add	sp, #20
    aa8c:	bd90      	pop	{r4, r7, pc}
    aa8e:	46c0      	nop			; (mov r8, r8)
    aa90:	20000964 	.word	0x20000964

0000aa94 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    aa94:	b580      	push	{r7, lr}
    aa96:	b084      	sub	sp, #16
    aa98:	af00      	add	r7, sp, #0
    aa9a:	6078      	str	r0, [r7, #4]
    aa9c:	6039      	str	r1, [r7, #0]
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    aa9e:	687b      	ldr	r3, [r7, #4]
    aaa0:	0018      	movs	r0, r3
    aaa2:	f7ff f8d6 	bl	9c52 <_ZNK6SdFile6isFileEv>
    aaa6:	1e03      	subs	r3, r0, #0
    aaa8:	d005      	beq.n	aab6 <_ZN6SdFile8truncateEm+0x22>
    aaaa:	687b      	ldr	r3, [r7, #4]
    aaac:	7a1b      	ldrb	r3, [r3, #8]
    aaae:	001a      	movs	r2, r3
    aab0:	2302      	movs	r3, #2
    aab2:	4013      	ands	r3, r2
    aab4:	d101      	bne.n	aaba <_ZN6SdFile8truncateEm+0x26>
    aab6:	2301      	movs	r3, #1
    aab8:	e000      	b.n	aabc <_ZN6SdFile8truncateEm+0x28>
    aaba:	2300      	movs	r3, #0
    aabc:	2b00      	cmp	r3, #0
    aabe:	d001      	beq.n	aac4 <_ZN6SdFile8truncateEm+0x30>
    aac0:	2300      	movs	r3, #0
    aac2:	e096      	b.n	abf2 <_ZN6SdFile8truncateEm+0x15e>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    aac4:	687b      	ldr	r3, [r7, #4]
    aac6:	69da      	ldr	r2, [r3, #28]
    aac8:	683b      	ldr	r3, [r7, #0]
    aaca:	429a      	cmp	r2, r3
    aacc:	d201      	bcs.n	aad2 <_ZN6SdFile8truncateEm+0x3e>
    aace:	2300      	movs	r3, #0
    aad0:	e08f      	b.n	abf2 <_ZN6SdFile8truncateEm+0x15e>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    aad2:	687b      	ldr	r3, [r7, #4]
    aad4:	69db      	ldr	r3, [r3, #28]
    aad6:	2b00      	cmp	r3, #0
    aad8:	d101      	bne.n	aade <_ZN6SdFile8truncateEm+0x4a>
    aada:	2301      	movs	r3, #1
    aadc:	e089      	b.n	abf2 <_ZN6SdFile8truncateEm+0x15e>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    aade:	687b      	ldr	r3, [r7, #4]
    aae0:	691a      	ldr	r2, [r3, #16]
    aae2:	683b      	ldr	r3, [r7, #0]
    aae4:	429a      	cmp	r2, r3
    aae6:	d802      	bhi.n	aaee <_ZN6SdFile8truncateEm+0x5a>
    aae8:	687b      	ldr	r3, [r7, #4]
    aaea:	691b      	ldr	r3, [r3, #16]
    aaec:	e000      	b.n	aaf0 <_ZN6SdFile8truncateEm+0x5c>
    aaee:	683b      	ldr	r3, [r7, #0]
    aaf0:	60fb      	str	r3, [r7, #12]

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    aaf2:	683a      	ldr	r2, [r7, #0]
    aaf4:	687b      	ldr	r3, [r7, #4]
    aaf6:	0011      	movs	r1, r2
    aaf8:	0018      	movs	r0, r3
    aafa:	f7ff fe9d 	bl	a838 <_ZN6SdFile7seekSetEm>
    aafe:	0003      	movs	r3, r0
    ab00:	425a      	negs	r2, r3
    ab02:	4153      	adcs	r3, r2
    ab04:	b2db      	uxtb	r3, r3
    ab06:	2b00      	cmp	r3, #0
    ab08:	d001      	beq.n	ab0e <_ZN6SdFile8truncateEm+0x7a>
    ab0a:	2300      	movs	r3, #0
    ab0c:	e071      	b.n	abf2 <_ZN6SdFile8truncateEm+0x15e>

  if (length == 0) {
    ab0e:	683b      	ldr	r3, [r7, #0]
    ab10:	2b00      	cmp	r3, #0
    ab12:	d113      	bne.n	ab3c <_ZN6SdFile8truncateEm+0xa8>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    ab14:	687b      	ldr	r3, [r7, #4]
    ab16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ab18:	687b      	ldr	r3, [r7, #4]
    ab1a:	6a1b      	ldr	r3, [r3, #32]
    ab1c:	0019      	movs	r1, r3
    ab1e:	0010      	movs	r0, r2
    ab20:	f000 fc4a 	bl	b3b8 <_ZN8SdVolume9freeChainEm>
    ab24:	0003      	movs	r3, r0
    ab26:	425a      	negs	r2, r3
    ab28:	4153      	adcs	r3, r2
    ab2a:	b2db      	uxtb	r3, r3
    ab2c:	2b00      	cmp	r3, #0
    ab2e:	d001      	beq.n	ab34 <_ZN6SdFile8truncateEm+0xa0>
    ab30:	2300      	movs	r3, #0
    ab32:	e05e      	b.n	abf2 <_ZN6SdFile8truncateEm+0x15e>
    firstCluster_ = 0;
    ab34:	687b      	ldr	r3, [r7, #4]
    ab36:	2200      	movs	r2, #0
    ab38:	621a      	str	r2, [r3, #32]
    ab3a:	e03c      	b.n	abb6 <_ZN6SdFile8truncateEm+0x122>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    ab3c:	687b      	ldr	r3, [r7, #4]
    ab3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ab40:	687b      	ldr	r3, [r7, #4]
    ab42:	68db      	ldr	r3, [r3, #12]
    ab44:	2208      	movs	r2, #8
    ab46:	18ba      	adds	r2, r7, r2
    ab48:	0019      	movs	r1, r3
    ab4a:	f000 fb81 	bl	b250 <_ZNK8SdVolume6fatGetEmPm>
    ab4e:	0003      	movs	r3, r0
    ab50:	425a      	negs	r2, r3
    ab52:	4153      	adcs	r3, r2
    ab54:	b2db      	uxtb	r3, r3
    ab56:	2b00      	cmp	r3, #0
    ab58:	d001      	beq.n	ab5e <_ZN6SdFile8truncateEm+0xca>
    ab5a:	2300      	movs	r3, #0
    ab5c:	e049      	b.n	abf2 <_ZN6SdFile8truncateEm+0x15e>

    if (!vol_->isEOC(toFree)) {
    ab5e:	687b      	ldr	r3, [r7, #4]
    ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ab62:	68ba      	ldr	r2, [r7, #8]
    ab64:	0011      	movs	r1, r2
    ab66:	0018      	movs	r0, r3
    ab68:	f7ff f900 	bl	9d6c <_ZNK8SdVolume5isEOCEm>
    ab6c:	0003      	movs	r3, r0
    ab6e:	425a      	negs	r2, r3
    ab70:	4153      	adcs	r3, r2
    ab72:	b2db      	uxtb	r3, r3
    ab74:	2b00      	cmp	r3, #0
    ab76:	d01e      	beq.n	abb6 <_ZN6SdFile8truncateEm+0x122>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    ab78:	687b      	ldr	r3, [r7, #4]
    ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ab7c:	68ba      	ldr	r2, [r7, #8]
    ab7e:	0011      	movs	r1, r2
    ab80:	0018      	movs	r0, r3
    ab82:	f000 fc19 	bl	b3b8 <_ZN8SdVolume9freeChainEm>
    ab86:	0003      	movs	r3, r0
    ab88:	425a      	negs	r2, r3
    ab8a:	4153      	adcs	r3, r2
    ab8c:	b2db      	uxtb	r3, r3
    ab8e:	2b00      	cmp	r3, #0
    ab90:	d001      	beq.n	ab96 <_ZN6SdFile8truncateEm+0x102>
    ab92:	2300      	movs	r3, #0
    ab94:	e02d      	b.n	abf2 <_ZN6SdFile8truncateEm+0x15e>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    ab96:	687b      	ldr	r3, [r7, #4]
    ab98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ab9a:	687b      	ldr	r3, [r7, #4]
    ab9c:	68db      	ldr	r3, [r3, #12]
    ab9e:	0019      	movs	r1, r3
    aba0:	0010      	movs	r0, r2
    aba2:	f7ff f8d1 	bl	9d48 <_ZN8SdVolume9fatPutEOCEm>
    aba6:	0003      	movs	r3, r0
    aba8:	425a      	negs	r2, r3
    abaa:	4153      	adcs	r3, r2
    abac:	b2db      	uxtb	r3, r3
    abae:	2b00      	cmp	r3, #0
    abb0:	d001      	beq.n	abb6 <_ZN6SdFile8truncateEm+0x122>
    abb2:	2300      	movs	r3, #0
    abb4:	e01d      	b.n	abf2 <_ZN6SdFile8truncateEm+0x15e>
    }
  }
  fileSize_ = length;
    abb6:	687b      	ldr	r3, [r7, #4]
    abb8:	683a      	ldr	r2, [r7, #0]
    abba:	61da      	str	r2, [r3, #28]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    abbc:	687b      	ldr	r3, [r7, #4]
    abbe:	7a1b      	ldrb	r3, [r3, #8]
    abc0:	2280      	movs	r2, #128	; 0x80
    abc2:	4252      	negs	r2, r2
    abc4:	4313      	orrs	r3, r2
    abc6:	b2da      	uxtb	r2, r3
    abc8:	687b      	ldr	r3, [r7, #4]
    abca:	721a      	strb	r2, [r3, #8]

  if (!sync()) return false;
    abcc:	687b      	ldr	r3, [r7, #4]
    abce:	0018      	movs	r0, r3
    abd0:	f7ff fea2 	bl	a918 <_ZN6SdFile4syncEv>
    abd4:	0003      	movs	r3, r0
    abd6:	425a      	negs	r2, r3
    abd8:	4153      	adcs	r3, r2
    abda:	b2db      	uxtb	r3, r3
    abdc:	2b00      	cmp	r3, #0
    abde:	d001      	beq.n	abe4 <_ZN6SdFile8truncateEm+0x150>
    abe0:	2300      	movs	r3, #0
    abe2:	e006      	b.n	abf2 <_ZN6SdFile8truncateEm+0x15e>

  // set file to correct position
  return seekSet(newPos);
    abe4:	68fa      	ldr	r2, [r7, #12]
    abe6:	687b      	ldr	r3, [r7, #4]
    abe8:	0011      	movs	r1, r2
    abea:	0018      	movs	r0, r3
    abec:	f7ff fe24 	bl	a838 <_ZN6SdFile7seekSetEm>
    abf0:	0003      	movs	r3, r0
}
    abf2:	0018      	movs	r0, r3
    abf4:	46bd      	mov	sp, r7
    abf6:	b004      	add	sp, #16
    abf8:	bd80      	pop	{r7, pc}
	...

0000abfc <_ZN6SdFile5writeEPKvt>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    abfc:	b590      	push	{r4, r7, lr}
    abfe:	b08d      	sub	sp, #52	; 0x34
    ac00:	af00      	add	r7, sp, #0
    ac02:	60f8      	str	r0, [r7, #12]
    ac04:	60b9      	str	r1, [r7, #8]
    ac06:	1dbb      	adds	r3, r7, #6
    ac08:	801a      	strh	r2, [r3, #0]
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    ac0a:	68bb      	ldr	r3, [r7, #8]
    ac0c:	62fb      	str	r3, [r7, #44]	; 0x2c

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
    ac0e:	232a      	movs	r3, #42	; 0x2a
    ac10:	18fb      	adds	r3, r7, r3
    ac12:	1dba      	adds	r2, r7, #6
    ac14:	8812      	ldrh	r2, [r2, #0]
    ac16:	801a      	strh	r2, [r3, #0]

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    ac18:	68fb      	ldr	r3, [r7, #12]
    ac1a:	0018      	movs	r0, r3
    ac1c:	f7ff f819 	bl	9c52 <_ZNK6SdFile6isFileEv>
    ac20:	1e03      	subs	r3, r0, #0
    ac22:	d005      	beq.n	ac30 <_ZN6SdFile5writeEPKvt+0x34>
    ac24:	68fb      	ldr	r3, [r7, #12]
    ac26:	7a1b      	ldrb	r3, [r3, #8]
    ac28:	001a      	movs	r2, r3
    ac2a:	2302      	movs	r3, #2
    ac2c:	4013      	ands	r3, r2
    ac2e:	d101      	bne.n	ac34 <_ZN6SdFile5writeEPKvt+0x38>
    ac30:	2301      	movs	r3, #1
    ac32:	e000      	b.n	ac36 <_ZN6SdFile5writeEPKvt+0x3a>
    ac34:	2300      	movs	r3, #0
    ac36:	2b00      	cmp	r3, #0
    ac38:	d000      	beq.n	ac3c <_ZN6SdFile5writeEPKvt+0x40>
    ac3a:	e150      	b.n	aede <_ZN6SdFile5writeEPKvt+0x2e2>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    ac3c:	68fb      	ldr	r3, [r7, #12]
    ac3e:	7a1b      	ldrb	r3, [r3, #8]
    ac40:	001a      	movs	r2, r3
    ac42:	2304      	movs	r3, #4
    ac44:	4013      	ands	r3, r2
    ac46:	d010      	beq.n	ac6a <_ZN6SdFile5writeEPKvt+0x6e>
    ac48:	68fb      	ldr	r3, [r7, #12]
    ac4a:	691a      	ldr	r2, [r3, #16]
    ac4c:	68fb      	ldr	r3, [r7, #12]
    ac4e:	69db      	ldr	r3, [r3, #28]
    ac50:	429a      	cmp	r2, r3
    ac52:	d00a      	beq.n	ac6a <_ZN6SdFile5writeEPKvt+0x6e>
    if (!seekEnd()) goto writeErrorReturn;
    ac54:	68fb      	ldr	r3, [r7, #12]
    ac56:	0018      	movs	r0, r3
    ac58:	f7ff f809 	bl	9c6e <_ZN6SdFile7seekEndEv>
    ac5c:	0003      	movs	r3, r0
    ac5e:	425a      	negs	r2, r3
    ac60:	4153      	adcs	r3, r2
    ac62:	b2db      	uxtb	r3, r3
    ac64:	2b00      	cmp	r3, #0
    ac66:	d000      	beq.n	ac6a <_ZN6SdFile5writeEPKvt+0x6e>
    ac68:	e13b      	b.n	aee2 <_ZN6SdFile5writeEPKvt+0x2e6>
  }

  while (nToWrite > 0) {
    ac6a:	232a      	movs	r3, #42	; 0x2a
    ac6c:	18fb      	adds	r3, r7, r3
    ac6e:	881b      	ldrh	r3, [r3, #0]
    ac70:	2b00      	cmp	r3, #0
    ac72:	dc00      	bgt.n	ac76 <_ZN6SdFile5writeEPKvt+0x7a>
    ac74:	e0fd      	b.n	ae72 <_ZN6SdFile5writeEPKvt+0x276>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    ac76:	68fb      	ldr	r3, [r7, #12]
    ac78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ac7a:	68fb      	ldr	r3, [r7, #12]
    ac7c:	691b      	ldr	r3, [r3, #16]
    ac7e:	2123      	movs	r1, #35	; 0x23
    ac80:	187c      	adds	r4, r7, r1
    ac82:	0019      	movs	r1, r3
    ac84:	0010      	movs	r0, r2
    ac86:	f7ff f82e 	bl	9ce6 <_ZNK8SdVolume14blockOfClusterEm>
    ac8a:	0003      	movs	r3, r0
    ac8c:	7023      	strb	r3, [r4, #0]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    ac8e:	68fb      	ldr	r3, [r7, #12]
    ac90:	691b      	ldr	r3, [r3, #16]
    ac92:	b29a      	uxth	r2, r3
    ac94:	2320      	movs	r3, #32
    ac96:	18fb      	adds	r3, r7, r3
    ac98:	05d2      	lsls	r2, r2, #23
    ac9a:	0dd2      	lsrs	r2, r2, #23
    ac9c:	801a      	strh	r2, [r3, #0]
    if (blockOfCluster == 0 && blockOffset == 0) {
    ac9e:	2323      	movs	r3, #35	; 0x23
    aca0:	18fb      	adds	r3, r7, r3
    aca2:	781b      	ldrb	r3, [r3, #0]
    aca4:	2b00      	cmp	r3, #0
    aca6:	d148      	bne.n	ad3a <_ZN6SdFile5writeEPKvt+0x13e>
    aca8:	2320      	movs	r3, #32
    acaa:	18fb      	adds	r3, r7, r3
    acac:	881b      	ldrh	r3, [r3, #0]
    acae:	2b00      	cmp	r3, #0
    acb0:	d143      	bne.n	ad3a <_ZN6SdFile5writeEPKvt+0x13e>
      // start of new cluster
      if (curCluster_ == 0) {
    acb2:	68fb      	ldr	r3, [r7, #12]
    acb4:	68db      	ldr	r3, [r3, #12]
    acb6:	2b00      	cmp	r3, #0
    acb8:	d113      	bne.n	ace2 <_ZN6SdFile5writeEPKvt+0xe6>
        if (firstCluster_ == 0) {
    acba:	68fb      	ldr	r3, [r7, #12]
    acbc:	6a1b      	ldr	r3, [r3, #32]
    acbe:	2b00      	cmp	r3, #0
    acc0:	d10a      	bne.n	acd8 <_ZN6SdFile5writeEPKvt+0xdc>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
    acc2:	68fb      	ldr	r3, [r7, #12]
    acc4:	0018      	movs	r0, r3
    acc6:	f7ff f89d 	bl	9e04 <_ZN6SdFile10addClusterEv>
    acca:	0003      	movs	r3, r0
    accc:	425a      	negs	r2, r3
    acce:	4153      	adcs	r3, r2
    acd0:	b2db      	uxtb	r3, r3
    acd2:	2b00      	cmp	r3, #0
    acd4:	d031      	beq.n	ad3a <_ZN6SdFile5writeEPKvt+0x13e>
    acd6:	e10d      	b.n	aef4 <_ZN6SdFile5writeEPKvt+0x2f8>
        } else {
          curCluster_ = firstCluster_;
    acd8:	68fb      	ldr	r3, [r7, #12]
    acda:	6a1a      	ldr	r2, [r3, #32]
    acdc:	68fb      	ldr	r3, [r7, #12]
    acde:	60da      	str	r2, [r3, #12]
    ace0:	e02b      	b.n	ad3a <_ZN6SdFile5writeEPKvt+0x13e>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    ace2:	68fb      	ldr	r3, [r7, #12]
    ace4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ace6:	68fb      	ldr	r3, [r7, #12]
    ace8:	68db      	ldr	r3, [r3, #12]
    acea:	2214      	movs	r2, #20
    acec:	18ba      	adds	r2, r7, r2
    acee:	0019      	movs	r1, r3
    acf0:	f000 faae 	bl	b250 <_ZNK8SdVolume6fatGetEmPm>
    acf4:	0003      	movs	r3, r0
    acf6:	425a      	negs	r2, r3
    acf8:	4153      	adcs	r3, r2
    acfa:	b2db      	uxtb	r3, r3
    acfc:	2b00      	cmp	r3, #0
    acfe:	d001      	beq.n	ad04 <_ZN6SdFile5writeEPKvt+0x108>
    ad00:	2300      	movs	r3, #0
    ad02:	e0fd      	b.n	af00 <_ZN6SdFile5writeEPKvt+0x304>
        if (vol_->isEOC(next)) {
    ad04:	68fb      	ldr	r3, [r7, #12]
    ad06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ad08:	697a      	ldr	r2, [r7, #20]
    ad0a:	0011      	movs	r1, r2
    ad0c:	0018      	movs	r0, r3
    ad0e:	f7ff f82d 	bl	9d6c <_ZNK8SdVolume5isEOCEm>
    ad12:	0003      	movs	r3, r0
    ad14:	1e5a      	subs	r2, r3, #1
    ad16:	4193      	sbcs	r3, r2
    ad18:	b2db      	uxtb	r3, r3
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	d00a      	beq.n	ad34 <_ZN6SdFile5writeEPKvt+0x138>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    ad1e:	68fb      	ldr	r3, [r7, #12]
    ad20:	0018      	movs	r0, r3
    ad22:	f7ff f86f 	bl	9e04 <_ZN6SdFile10addClusterEv>
    ad26:	0003      	movs	r3, r0
    ad28:	425a      	negs	r2, r3
    ad2a:	4153      	adcs	r3, r2
    ad2c:	b2db      	uxtb	r3, r3
    ad2e:	2b00      	cmp	r3, #0
    ad30:	d003      	beq.n	ad3a <_ZN6SdFile5writeEPKvt+0x13e>
    ad32:	e0df      	b.n	aef4 <_ZN6SdFile5writeEPKvt+0x2f8>
        } else {
          curCluster_ = next;
    ad34:	697a      	ldr	r2, [r7, #20]
    ad36:	68fb      	ldr	r3, [r7, #12]
    ad38:	60da      	str	r2, [r3, #12]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    ad3a:	2328      	movs	r3, #40	; 0x28
    ad3c:	18fb      	adds	r3, r7, r3
    ad3e:	2220      	movs	r2, #32
    ad40:	18ba      	adds	r2, r7, r2
    ad42:	8812      	ldrh	r2, [r2, #0]
    ad44:	2180      	movs	r1, #128	; 0x80
    ad46:	0089      	lsls	r1, r1, #2
    ad48:	1a8a      	subs	r2, r1, r2
    ad4a:	801a      	strh	r2, [r3, #0]

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    ad4c:	2328      	movs	r3, #40	; 0x28
    ad4e:	18fb      	adds	r3, r7, r3
    ad50:	881a      	ldrh	r2, [r3, #0]
    ad52:	232a      	movs	r3, #42	; 0x2a
    ad54:	18fb      	adds	r3, r7, r3
    ad56:	881b      	ldrh	r3, [r3, #0]
    ad58:	429a      	cmp	r2, r3
    ad5a:	dd05      	ble.n	ad68 <_ZN6SdFile5writeEPKvt+0x16c>
    ad5c:	2328      	movs	r3, #40	; 0x28
    ad5e:	18fb      	adds	r3, r7, r3
    ad60:	222a      	movs	r2, #42	; 0x2a
    ad62:	18ba      	adds	r2, r7, r2
    ad64:	8812      	ldrh	r2, [r2, #0]
    ad66:	801a      	strh	r2, [r3, #0]

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    ad68:	68fb      	ldr	r3, [r7, #12]
    ad6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ad6c:	68fb      	ldr	r3, [r7, #12]
    ad6e:	68db      	ldr	r3, [r3, #12]
    ad70:	0019      	movs	r1, r3
    ad72:	0010      	movs	r0, r2
    ad74:	f7fe ffc9 	bl	9d0a <_ZNK8SdVolume17clusterStartBlockEm>
    ad78:	0002      	movs	r2, r0
    ad7a:	2323      	movs	r3, #35	; 0x23
    ad7c:	18fb      	adds	r3, r7, r3
    ad7e:	781b      	ldrb	r3, [r3, #0]
    ad80:	18d3      	adds	r3, r2, r3
    ad82:	61fb      	str	r3, [r7, #28]
    if (n == 512) {
    ad84:	2328      	movs	r3, #40	; 0x28
    ad86:	18fb      	adds	r3, r7, r3
    ad88:	881a      	ldrh	r2, [r3, #0]
    ad8a:	2380      	movs	r3, #128	; 0x80
    ad8c:	009b      	lsls	r3, r3, #2
    ad8e:	429a      	cmp	r2, r3
    ad90:	d11d      	bne.n	adce <_ZN6SdFile5writeEPKvt+0x1d2>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    ad92:	4b5d      	ldr	r3, [pc, #372]	; (af08 <_ZN6SdFile5writeEPKvt+0x30c>)
    ad94:	681a      	ldr	r2, [r3, #0]
    ad96:	69fb      	ldr	r3, [r7, #28]
    ad98:	429a      	cmp	r2, r3
    ad9a:	d103      	bne.n	ada4 <_ZN6SdFile5writeEPKvt+0x1a8>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    ad9c:	4b5a      	ldr	r3, [pc, #360]	; (af08 <_ZN6SdFile5writeEPKvt+0x30c>)
    ad9e:	2201      	movs	r2, #1
    ada0:	4252      	negs	r2, r2
    ada2:	601a      	str	r2, [r3, #0]
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    ada4:	68fb      	ldr	r3, [r7, #12]
    ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ada8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    adaa:	69f9      	ldr	r1, [r7, #28]
    adac:	0018      	movs	r0, r3
    adae:	f7ff f815 	bl	9ddc <_ZN8SdVolume10writeBlockEmPKh>
    adb2:	0003      	movs	r3, r0
    adb4:	425a      	negs	r2, r3
    adb6:	4153      	adcs	r3, r2
    adb8:	b2db      	uxtb	r3, r3
    adba:	2b00      	cmp	r3, #0
    adbc:	d000      	beq.n	adc0 <_ZN6SdFile5writeEPKvt+0x1c4>
    adbe:	e092      	b.n	aee6 <_ZN6SdFile5writeEPKvt+0x2ea>
      src += 512;
    adc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    adc2:	2280      	movs	r2, #128	; 0x80
    adc4:	0092      	lsls	r2, r2, #2
    adc6:	4694      	mov	ip, r2
    adc8:	4463      	add	r3, ip
    adca:	62fb      	str	r3, [r7, #44]	; 0x2c
    adcc:	e03e      	b.n	ae4c <_ZN6SdFile5writeEPKvt+0x250>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    adce:	2320      	movs	r3, #32
    add0:	18fb      	adds	r3, r7, r3
    add2:	881b      	ldrh	r3, [r3, #0]
    add4:	2b00      	cmp	r3, #0
    add6:	d114      	bne.n	ae02 <_ZN6SdFile5writeEPKvt+0x206>
    add8:	68fb      	ldr	r3, [r7, #12]
    adda:	691a      	ldr	r2, [r3, #16]
    addc:	68fb      	ldr	r3, [r7, #12]
    adde:	69db      	ldr	r3, [r3, #28]
    ade0:	429a      	cmp	r2, r3
    ade2:	d30e      	bcc.n	ae02 <_ZN6SdFile5writeEPKvt+0x206>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    ade4:	f000 f94c 	bl	b080 <_ZN8SdVolume10cacheFlushEv>
    ade8:	0003      	movs	r3, r0
    adea:	425a      	negs	r2, r3
    adec:	4153      	adcs	r3, r2
    adee:	b2db      	uxtb	r3, r3
    adf0:	2b00      	cmp	r3, #0
    adf2:	d000      	beq.n	adf6 <_ZN6SdFile5writeEPKvt+0x1fa>
    adf4:	e079      	b.n	aeea <_ZN6SdFile5writeEPKvt+0x2ee>
        SdVolume::cacheBlockNumber_ = block;
    adf6:	4b44      	ldr	r3, [pc, #272]	; (af08 <_ZN6SdFile5writeEPKvt+0x30c>)
    adf8:	69fa      	ldr	r2, [r7, #28]
    adfa:	601a      	str	r2, [r3, #0]
        SdVolume::cacheSetDirty();
    adfc:	f7fe ff96 	bl	9d2c <_ZN8SdVolume13cacheSetDirtyEv>
    ae00:	e00b      	b.n	ae1a <_ZN6SdFile5writeEPKvt+0x21e>
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    ae02:	69fb      	ldr	r3, [r7, #28]
    ae04:	2101      	movs	r1, #1
    ae06:	0018      	movs	r0, r3
    ae08:	f000 f978 	bl	b0fc <_ZN8SdVolume13cacheRawBlockEmh>
    ae0c:	0003      	movs	r3, r0
    ae0e:	425a      	negs	r2, r3
    ae10:	4153      	adcs	r3, r2
    ae12:	b2db      	uxtb	r3, r3
    ae14:	2b00      	cmp	r3, #0
    ae16:	d000      	beq.n	ae1a <_ZN6SdFile5writeEPKvt+0x21e>
    ae18:	e069      	b.n	aeee <_ZN6SdFile5writeEPKvt+0x2f2>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    ae1a:	2320      	movs	r3, #32
    ae1c:	18fb      	adds	r3, r7, r3
    ae1e:	881a      	ldrh	r2, [r3, #0]
    ae20:	4b3a      	ldr	r3, [pc, #232]	; (af0c <_ZN6SdFile5writeEPKvt+0x310>)
    ae22:	18d3      	adds	r3, r2, r3
    ae24:	627b      	str	r3, [r7, #36]	; 0x24
      uint8_t* end = dst + n;
    ae26:	2328      	movs	r3, #40	; 0x28
    ae28:	18fb      	adds	r3, r7, r3
    ae2a:	881b      	ldrh	r3, [r3, #0]
    ae2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ae2e:	18d3      	adds	r3, r2, r3
    ae30:	61bb      	str	r3, [r7, #24]
      while (dst != end) *dst++ = *src++;
    ae32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ae34:	69bb      	ldr	r3, [r7, #24]
    ae36:	429a      	cmp	r2, r3
    ae38:	d008      	beq.n	ae4c <_ZN6SdFile5writeEPKvt+0x250>
    ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae3c:	1c5a      	adds	r2, r3, #1
    ae3e:	627a      	str	r2, [r7, #36]	; 0x24
    ae40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ae42:	1c51      	adds	r1, r2, #1
    ae44:	62f9      	str	r1, [r7, #44]	; 0x2c
    ae46:	7812      	ldrb	r2, [r2, #0]
    ae48:	701a      	strb	r2, [r3, #0]
    ae4a:	e7f2      	b.n	ae32 <_ZN6SdFile5writeEPKvt+0x236>
    }
    nToWrite -= n;
    ae4c:	232a      	movs	r3, #42	; 0x2a
    ae4e:	18fb      	adds	r3, r7, r3
    ae50:	222a      	movs	r2, #42	; 0x2a
    ae52:	18b9      	adds	r1, r7, r2
    ae54:	2228      	movs	r2, #40	; 0x28
    ae56:	18ba      	adds	r2, r7, r2
    ae58:	8809      	ldrh	r1, [r1, #0]
    ae5a:	8812      	ldrh	r2, [r2, #0]
    ae5c:	1a8a      	subs	r2, r1, r2
    ae5e:	801a      	strh	r2, [r3, #0]
    curPosition_ += n;
    ae60:	68fb      	ldr	r3, [r7, #12]
    ae62:	691a      	ldr	r2, [r3, #16]
    ae64:	2328      	movs	r3, #40	; 0x28
    ae66:	18fb      	adds	r3, r7, r3
    ae68:	881b      	ldrh	r3, [r3, #0]
    ae6a:	18d2      	adds	r2, r2, r3
    ae6c:	68fb      	ldr	r3, [r7, #12]
    ae6e:	611a      	str	r2, [r3, #16]
  while (nToWrite > 0) {
    ae70:	e6fb      	b.n	ac6a <_ZN6SdFile5writeEPKvt+0x6e>
  }
  if (curPosition_ > fileSize_) {
    ae72:	68fb      	ldr	r3, [r7, #12]
    ae74:	691a      	ldr	r2, [r3, #16]
    ae76:	68fb      	ldr	r3, [r7, #12]
    ae78:	69db      	ldr	r3, [r3, #28]
    ae7a:	429a      	cmp	r2, r3
    ae7c:	d90c      	bls.n	ae98 <_ZN6SdFile5writeEPKvt+0x29c>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    ae7e:	68fb      	ldr	r3, [r7, #12]
    ae80:	691a      	ldr	r2, [r3, #16]
    ae82:	68fb      	ldr	r3, [r7, #12]
    ae84:	61da      	str	r2, [r3, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    ae86:	68fb      	ldr	r3, [r7, #12]
    ae88:	7a1b      	ldrb	r3, [r3, #8]
    ae8a:	2280      	movs	r2, #128	; 0x80
    ae8c:	4252      	negs	r2, r2
    ae8e:	4313      	orrs	r3, r2
    ae90:	b2da      	uxtb	r2, r3
    ae92:	68fb      	ldr	r3, [r7, #12]
    ae94:	721a      	strb	r2, [r3, #8]
    ae96:	e00f      	b.n	aeb8 <_ZN6SdFile5writeEPKvt+0x2bc>
  } else if (dateTime_ && nbyte) {
    ae98:	4b1d      	ldr	r3, [pc, #116]	; (af10 <_ZN6SdFile5writeEPKvt+0x314>)
    ae9a:	681b      	ldr	r3, [r3, #0]
    ae9c:	2b00      	cmp	r3, #0
    ae9e:	d00b      	beq.n	aeb8 <_ZN6SdFile5writeEPKvt+0x2bc>
    aea0:	1dbb      	adds	r3, r7, #6
    aea2:	881b      	ldrh	r3, [r3, #0]
    aea4:	2b00      	cmp	r3, #0
    aea6:	d007      	beq.n	aeb8 <_ZN6SdFile5writeEPKvt+0x2bc>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    aea8:	68fb      	ldr	r3, [r7, #12]
    aeaa:	7a1b      	ldrb	r3, [r3, #8]
    aeac:	2280      	movs	r2, #128	; 0x80
    aeae:	4252      	negs	r2, r2
    aeb0:	4313      	orrs	r3, r2
    aeb2:	b2da      	uxtb	r2, r3
    aeb4:	68fb      	ldr	r3, [r7, #12]
    aeb6:	721a      	strb	r2, [r3, #8]
  }

  if (flags_ & O_SYNC) {
    aeb8:	68fb      	ldr	r3, [r7, #12]
    aeba:	7a1b      	ldrb	r3, [r3, #8]
    aebc:	001a      	movs	r2, r3
    aebe:	2308      	movs	r3, #8
    aec0:	4013      	ands	r3, r2
    aec2:	d009      	beq.n	aed8 <_ZN6SdFile5writeEPKvt+0x2dc>
    if (!sync()) goto writeErrorReturn;
    aec4:	68fb      	ldr	r3, [r7, #12]
    aec6:	0018      	movs	r0, r3
    aec8:	f7ff fd26 	bl	a918 <_ZN6SdFile4syncEv>
    aecc:	0003      	movs	r3, r0
    aece:	425a      	negs	r2, r3
    aed0:	4153      	adcs	r3, r2
    aed2:	b2db      	uxtb	r3, r3
    aed4:	2b00      	cmp	r3, #0
    aed6:	d10c      	bne.n	aef2 <_ZN6SdFile5writeEPKvt+0x2f6>
  }
  return nbyte;
    aed8:	1dbb      	adds	r3, r7, #6
    aeda:	881b      	ldrh	r3, [r3, #0]
    aedc:	e010      	b.n	af00 <_ZN6SdFile5writeEPKvt+0x304>
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    aede:	46c0      	nop			; (mov r8, r8)
    aee0:	e008      	b.n	aef4 <_ZN6SdFile5writeEPKvt+0x2f8>
    if (!seekEnd()) goto writeErrorReturn;
    aee2:	46c0      	nop			; (mov r8, r8)
    aee4:	e006      	b.n	aef4 <_ZN6SdFile5writeEPKvt+0x2f8>
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    aee6:	46c0      	nop			; (mov r8, r8)
    aee8:	e004      	b.n	aef4 <_ZN6SdFile5writeEPKvt+0x2f8>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    aeea:	46c0      	nop			; (mov r8, r8)
    aeec:	e002      	b.n	aef4 <_ZN6SdFile5writeEPKvt+0x2f8>
          goto writeErrorReturn;
    aeee:	46c0      	nop			; (mov r8, r8)
    aef0:	e000      	b.n	aef4 <_ZN6SdFile5writeEPKvt+0x2f8>
    if (!sync()) goto writeErrorReturn;
    aef2:	46c0      	nop			; (mov r8, r8)

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
    aef4:	68fb      	ldr	r3, [r7, #12]
    aef6:	2101      	movs	r1, #1
    aef8:	0018      	movs	r0, r3
    aefa:	f7fd fc61 	bl	87c0 <_ZN5Print13setWriteErrorEi>
  return 0;
    aefe:	2300      	movs	r3, #0
}
    af00:	0018      	movs	r0, r3
    af02:	46bd      	mov	sp, r7
    af04:	b00d      	add	sp, #52	; 0x34
    af06:	bd90      	pop	{r4, r7, pc}
    af08:	2000004c 	.word	0x2000004c
    af0c:	20000968 	.word	0x20000968
    af10:	20000964 	.word	0x20000964

0000af14 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    af14:	b580      	push	{r7, lr}
    af16:	b082      	sub	sp, #8
    af18:	af00      	add	r7, sp, #0
    af1a:	6078      	str	r0, [r7, #4]
    af1c:	000a      	movs	r2, r1
    af1e:	1cfb      	adds	r3, r7, #3
    af20:	701a      	strb	r2, [r3, #0]
  return write(&b, 1);
    af22:	1cf9      	adds	r1, r7, #3
    af24:	687b      	ldr	r3, [r7, #4]
    af26:	2201      	movs	r2, #1
    af28:	0018      	movs	r0, r3
    af2a:	f7ff fe67 	bl	abfc <_ZN6SdFile5writeEPKvt>
    af2e:	0003      	movs	r3, r0
}
    af30:	0018      	movs	r0, r3
    af32:	46bd      	mov	sp, r7
    af34:	b002      	add	sp, #8
    af36:	bd80      	pop	{r7, pc}

0000af38 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    af38:	b580      	push	{r7, lr}
    af3a:	b08a      	sub	sp, #40	; 0x28
    af3c:	af00      	add	r7, sp, #0
    af3e:	60f8      	str	r0, [r7, #12]
    af40:	60b9      	str	r1, [r7, #8]
    af42:	607a      	str	r2, [r7, #4]

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    af44:	687b      	ldr	r3, [r7, #4]
    af46:	681b      	ldr	r3, [r3, #0]
    af48:	2b00      	cmp	r3, #0
    af4a:	d008      	beq.n	af5e <_ZN8SdVolume15allocContiguousEmPm+0x26>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    af4c:	687b      	ldr	r3, [r7, #4]
    af4e:	681b      	ldr	r3, [r3, #0]
    af50:	3301      	adds	r3, #1
    af52:	627b      	str	r3, [r7, #36]	; 0x24

    // don't save new start location
    setStart = false;
    af54:	2323      	movs	r3, #35	; 0x23
    af56:	18fb      	adds	r3, r7, r3
    af58:	2200      	movs	r2, #0
    af5a:	701a      	strb	r2, [r3, #0]
    af5c:	e00a      	b.n	af74 <_ZN8SdVolume15allocContiguousEmPm+0x3c>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    af5e:	68fb      	ldr	r3, [r7, #12]
    af60:	681b      	ldr	r3, [r3, #0]
    af62:	627b      	str	r3, [r7, #36]	; 0x24

    // save next search start if one cluster
    setStart = 1 == count;
    af64:	68bb      	ldr	r3, [r7, #8]
    af66:	3b01      	subs	r3, #1
    af68:	425a      	negs	r2, r3
    af6a:	4153      	adcs	r3, r2
    af6c:	b2da      	uxtb	r2, r3
    af6e:	2323      	movs	r3, #35	; 0x23
    af70:	18fb      	adds	r3, r7, r3
    af72:	701a      	strb	r2, [r3, #0]
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    af76:	61fb      	str	r3, [r7, #28]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    af78:	68fb      	ldr	r3, [r7, #12]
    af7a:	68db      	ldr	r3, [r3, #12]
    af7c:	3301      	adds	r3, #1
    af7e:	617b      	str	r3, [r7, #20]

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    af80:	2300      	movs	r3, #0
    af82:	61bb      	str	r3, [r7, #24]
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    af84:	68fb      	ldr	r3, [r7, #12]
    af86:	68da      	ldr	r2, [r3, #12]
    af88:	69bb      	ldr	r3, [r7, #24]
    af8a:	429a      	cmp	r2, r3
    af8c:	d801      	bhi.n	af92 <_ZN8SdVolume15allocContiguousEmPm+0x5a>
    af8e:	2300      	movs	r3, #0
    af90:	e071      	b.n	b076 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    af92:	69fa      	ldr	r2, [r7, #28]
    af94:	697b      	ldr	r3, [r7, #20]
    af96:	429a      	cmp	r2, r3
    af98:	d903      	bls.n	afa2 <_ZN8SdVolume15allocContiguousEmPm+0x6a>
      bgnCluster = endCluster = 2;
    af9a:	2302      	movs	r3, #2
    af9c:	61fb      	str	r3, [r7, #28]
    af9e:	69fb      	ldr	r3, [r7, #28]
    afa0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    afa2:	2310      	movs	r3, #16
    afa4:	18fa      	adds	r2, r7, r3
    afa6:	69f9      	ldr	r1, [r7, #28]
    afa8:	68fb      	ldr	r3, [r7, #12]
    afaa:	0018      	movs	r0, r3
    afac:	f000 f950 	bl	b250 <_ZNK8SdVolume6fatGetEmPm>
    afb0:	0003      	movs	r3, r0
    afb2:	425a      	negs	r2, r3
    afb4:	4153      	adcs	r3, r2
    afb6:	b2db      	uxtb	r3, r3
    afb8:	2b00      	cmp	r3, #0
    afba:	d001      	beq.n	afc0 <_ZN8SdVolume15allocContiguousEmPm+0x88>
    afbc:	2300      	movs	r3, #0
    afbe:	e05a      	b.n	b076 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

    if (f != 0) {
    afc0:	693b      	ldr	r3, [r7, #16]
    afc2:	2b00      	cmp	r3, #0
    afc4:	d003      	beq.n	afce <_ZN8SdVolume15allocContiguousEmPm+0x96>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    afc6:	69fb      	ldr	r3, [r7, #28]
    afc8:	3301      	adds	r3, #1
    afca:	627b      	str	r3, [r7, #36]	; 0x24
    afcc:	e013      	b.n	aff6 <_ZN8SdVolume15allocContiguousEmPm+0xbe>
    } else if ((endCluster - bgnCluster + 1) == count) {
    afce:	69fa      	ldr	r2, [r7, #28]
    afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    afd2:	1ad3      	subs	r3, r2, r3
    afd4:	1c5a      	adds	r2, r3, #1
    afd6:	68bb      	ldr	r3, [r7, #8]
    afd8:	429a      	cmp	r2, r3
    afda:	d10c      	bne.n	aff6 <_ZN8SdVolume15allocContiguousEmPm+0xbe>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    afdc:	69fa      	ldr	r2, [r7, #28]
    afde:	68fb      	ldr	r3, [r7, #12]
    afe0:	0011      	movs	r1, r2
    afe2:	0018      	movs	r0, r3
    afe4:	f7fe feb0 	bl	9d48 <_ZN8SdVolume9fatPutEOCEm>
    afe8:	0003      	movs	r3, r0
    afea:	425a      	negs	r2, r3
    afec:	4153      	adcs	r3, r2
    afee:	b2db      	uxtb	r3, r3
    aff0:	2b00      	cmp	r3, #0
    aff2:	d107      	bne.n	b004 <_ZN8SdVolume15allocContiguousEmPm+0xcc>
    aff4:	e008      	b.n	b008 <_ZN8SdVolume15allocContiguousEmPm+0xd0>
  for (uint32_t n = 0;; n++, endCluster++) {
    aff6:	69bb      	ldr	r3, [r7, #24]
    aff8:	3301      	adds	r3, #1
    affa:	61bb      	str	r3, [r7, #24]
    affc:	69fb      	ldr	r3, [r7, #28]
    affe:	3301      	adds	r3, #1
    b000:	61fb      	str	r3, [r7, #28]
  }
    b002:	e7bf      	b.n	af84 <_ZN8SdVolume15allocContiguousEmPm+0x4c>
  if (!fatPutEOC(endCluster)) return false;
    b004:	2300      	movs	r3, #0
    b006:	e036      	b.n	b076 <_ZN8SdVolume15allocContiguousEmPm+0x13e>

  // link clusters
  while (endCluster > bgnCluster) {
    b008:	69fa      	ldr	r2, [r7, #28]
    b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b00c:	429a      	cmp	r2, r3
    b00e:	d912      	bls.n	b036 <_ZN8SdVolume15allocContiguousEmPm+0xfe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    b010:	69fb      	ldr	r3, [r7, #28]
    b012:	1e59      	subs	r1, r3, #1
    b014:	69fa      	ldr	r2, [r7, #28]
    b016:	68fb      	ldr	r3, [r7, #12]
    b018:	0018      	movs	r0, r3
    b01a:	f000 f96b 	bl	b2f4 <_ZN8SdVolume6fatPutEmm>
    b01e:	0003      	movs	r3, r0
    b020:	425a      	negs	r2, r3
    b022:	4153      	adcs	r3, r2
    b024:	b2db      	uxtb	r3, r3
    b026:	2b00      	cmp	r3, #0
    b028:	d001      	beq.n	b02e <_ZN8SdVolume15allocContiguousEmPm+0xf6>
    b02a:	2300      	movs	r3, #0
    b02c:	e023      	b.n	b076 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    endCluster--;
    b02e:	69fb      	ldr	r3, [r7, #28]
    b030:	3b01      	subs	r3, #1
    b032:	61fb      	str	r3, [r7, #28]
  while (endCluster > bgnCluster) {
    b034:	e7e8      	b.n	b008 <_ZN8SdVolume15allocContiguousEmPm+0xd0>
  }
  if (*curCluster != 0) {
    b036:	687b      	ldr	r3, [r7, #4]
    b038:	681b      	ldr	r3, [r3, #0]
    b03a:	2b00      	cmp	r3, #0
    b03c:	d00e      	beq.n	b05c <_ZN8SdVolume15allocContiguousEmPm+0x124>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    b03e:	687b      	ldr	r3, [r7, #4]
    b040:	6819      	ldr	r1, [r3, #0]
    b042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b044:	68fb      	ldr	r3, [r7, #12]
    b046:	0018      	movs	r0, r3
    b048:	f000 f954 	bl	b2f4 <_ZN8SdVolume6fatPutEmm>
    b04c:	0003      	movs	r3, r0
    b04e:	425a      	negs	r2, r3
    b050:	4153      	adcs	r3, r2
    b052:	b2db      	uxtb	r3, r3
    b054:	2b00      	cmp	r3, #0
    b056:	d001      	beq.n	b05c <_ZN8SdVolume15allocContiguousEmPm+0x124>
    b058:	2300      	movs	r3, #0
    b05a:	e00c      	b.n	b076 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    b05c:	687b      	ldr	r3, [r7, #4]
    b05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b060:	601a      	str	r2, [r3, #0]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    b062:	2323      	movs	r3, #35	; 0x23
    b064:	18fb      	adds	r3, r7, r3
    b066:	781b      	ldrb	r3, [r3, #0]
    b068:	2b00      	cmp	r3, #0
    b06a:	d003      	beq.n	b074 <_ZN8SdVolume15allocContiguousEmPm+0x13c>
    b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b06e:	1c5a      	adds	r2, r3, #1
    b070:	68fb      	ldr	r3, [r7, #12]
    b072:	601a      	str	r2, [r3, #0]

  return true;
    b074:	2301      	movs	r3, #1
}
    b076:	0018      	movs	r0, r3
    b078:	46bd      	mov	sp, r7
    b07a:	b00a      	add	sp, #40	; 0x28
    b07c:	bd80      	pop	{r7, pc}
	...

0000b080 <_ZN8SdVolume10cacheFlushEv>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    b080:	b580      	push	{r7, lr}
    b082:	af00      	add	r7, sp, #0
  if (cacheDirty_) {
    b084:	4b18      	ldr	r3, [pc, #96]	; (b0e8 <_ZN8SdVolume10cacheFlushEv+0x68>)
    b086:	781b      	ldrb	r3, [r3, #0]
    b088:	2b00      	cmp	r3, #0
    b08a:	d029      	beq.n	b0e0 <_ZN8SdVolume10cacheFlushEv+0x60>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    b08c:	4b17      	ldr	r3, [pc, #92]	; (b0ec <_ZN8SdVolume10cacheFlushEv+0x6c>)
    b08e:	6818      	ldr	r0, [r3, #0]
    b090:	4b17      	ldr	r3, [pc, #92]	; (b0f0 <_ZN8SdVolume10cacheFlushEv+0x70>)
    b092:	681b      	ldr	r3, [r3, #0]
    b094:	4a17      	ldr	r2, [pc, #92]	; (b0f4 <_ZN8SdVolume10cacheFlushEv+0x74>)
    b096:	0019      	movs	r1, r3
    b098:	f7fe fcd0 	bl	9a3c <_ZN7Sd2Card10writeBlockEmPKh>
    b09c:	0003      	movs	r3, r0
    b09e:	425a      	negs	r2, r3
    b0a0:	4153      	adcs	r3, r2
    b0a2:	b2db      	uxtb	r3, r3
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	d001      	beq.n	b0ac <_ZN8SdVolume10cacheFlushEv+0x2c>
      return false;
    b0a8:	2300      	movs	r3, #0
    b0aa:	e01a      	b.n	b0e2 <_ZN8SdVolume10cacheFlushEv+0x62>
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    b0ac:	4b12      	ldr	r3, [pc, #72]	; (b0f8 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b0ae:	681b      	ldr	r3, [r3, #0]
    b0b0:	2b00      	cmp	r3, #0
    b0b2:	d012      	beq.n	b0da <_ZN8SdVolume10cacheFlushEv+0x5a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    b0b4:	4b0d      	ldr	r3, [pc, #52]	; (b0ec <_ZN8SdVolume10cacheFlushEv+0x6c>)
    b0b6:	6818      	ldr	r0, [r3, #0]
    b0b8:	4b0f      	ldr	r3, [pc, #60]	; (b0f8 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b0ba:	681b      	ldr	r3, [r3, #0]
    b0bc:	4a0d      	ldr	r2, [pc, #52]	; (b0f4 <_ZN8SdVolume10cacheFlushEv+0x74>)
    b0be:	0019      	movs	r1, r3
    b0c0:	f7fe fcbc 	bl	9a3c <_ZN7Sd2Card10writeBlockEmPKh>
    b0c4:	0003      	movs	r3, r0
    b0c6:	425a      	negs	r2, r3
    b0c8:	4153      	adcs	r3, r2
    b0ca:	b2db      	uxtb	r3, r3
    b0cc:	2b00      	cmp	r3, #0
    b0ce:	d001      	beq.n	b0d4 <_ZN8SdVolume10cacheFlushEv+0x54>
        return false;
    b0d0:	2300      	movs	r3, #0
    b0d2:	e006      	b.n	b0e2 <_ZN8SdVolume10cacheFlushEv+0x62>
      }
      cacheMirrorBlock_ = 0;
    b0d4:	4b08      	ldr	r3, [pc, #32]	; (b0f8 <_ZN8SdVolume10cacheFlushEv+0x78>)
    b0d6:	2200      	movs	r2, #0
    b0d8:	601a      	str	r2, [r3, #0]
    }
    cacheDirty_ = 0;
    b0da:	4b03      	ldr	r3, [pc, #12]	; (b0e8 <_ZN8SdVolume10cacheFlushEv+0x68>)
    b0dc:	2200      	movs	r2, #0
    b0de:	701a      	strb	r2, [r3, #0]
  }
  return true;
    b0e0:	2301      	movs	r3, #1
}
    b0e2:	0018      	movs	r0, r3
    b0e4:	46bd      	mov	sp, r7
    b0e6:	bd80      	pop	{r7, pc}
    b0e8:	20000b6c 	.word	0x20000b6c
    b0ec:	20000b68 	.word	0x20000b68
    b0f0:	2000004c 	.word	0x2000004c
    b0f4:	20000968 	.word	0x20000968
    b0f8:	20000b70 	.word	0x20000b70

0000b0fc <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    b0fc:	b580      	push	{r7, lr}
    b0fe:	b082      	sub	sp, #8
    b100:	af00      	add	r7, sp, #0
    b102:	6078      	str	r0, [r7, #4]
    b104:	000a      	movs	r2, r1
    b106:	1cfb      	adds	r3, r7, #3
    b108:	701a      	strb	r2, [r3, #0]
  if (cacheBlockNumber_ != blockNumber) {
    b10a:	4b17      	ldr	r3, [pc, #92]	; (b168 <_ZN8SdVolume13cacheRawBlockEmh+0x6c>)
    b10c:	681a      	ldr	r2, [r3, #0]
    b10e:	687b      	ldr	r3, [r7, #4]
    b110:	429a      	cmp	r2, r3
    b112:	d01b      	beq.n	b14c <_ZN8SdVolume13cacheRawBlockEmh+0x50>
    if (!cacheFlush()) return false;
    b114:	f7ff ffb4 	bl	b080 <_ZN8SdVolume10cacheFlushEv>
    b118:	0003      	movs	r3, r0
    b11a:	425a      	negs	r2, r3
    b11c:	4153      	adcs	r3, r2
    b11e:	b2db      	uxtb	r3, r3
    b120:	2b00      	cmp	r3, #0
    b122:	d001      	beq.n	b128 <_ZN8SdVolume13cacheRawBlockEmh+0x2c>
    b124:	2300      	movs	r3, #0
    b126:	e01a      	b.n	b15e <_ZN8SdVolume13cacheRawBlockEmh+0x62>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    b128:	4b10      	ldr	r3, [pc, #64]	; (b16c <_ZN8SdVolume13cacheRawBlockEmh+0x70>)
    b12a:	681b      	ldr	r3, [r3, #0]
    b12c:	4a10      	ldr	r2, [pc, #64]	; (b170 <_ZN8SdVolume13cacheRawBlockEmh+0x74>)
    b12e:	6879      	ldr	r1, [r7, #4]
    b130:	0018      	movs	r0, r3
    b132:	f7fe fa9b 	bl	966c <_ZN7Sd2Card9readBlockEmPh>
    b136:	0003      	movs	r3, r0
    b138:	425a      	negs	r2, r3
    b13a:	4153      	adcs	r3, r2
    b13c:	b2db      	uxtb	r3, r3
    b13e:	2b00      	cmp	r3, #0
    b140:	d001      	beq.n	b146 <_ZN8SdVolume13cacheRawBlockEmh+0x4a>
    b142:	2300      	movs	r3, #0
    b144:	e00b      	b.n	b15e <_ZN8SdVolume13cacheRawBlockEmh+0x62>
    cacheBlockNumber_ = blockNumber;
    b146:	4b08      	ldr	r3, [pc, #32]	; (b168 <_ZN8SdVolume13cacheRawBlockEmh+0x6c>)
    b148:	687a      	ldr	r2, [r7, #4]
    b14a:	601a      	str	r2, [r3, #0]
  }
  cacheDirty_ |= action;
    b14c:	4b09      	ldr	r3, [pc, #36]	; (b174 <_ZN8SdVolume13cacheRawBlockEmh+0x78>)
    b14e:	781a      	ldrb	r2, [r3, #0]
    b150:	1cfb      	adds	r3, r7, #3
    b152:	781b      	ldrb	r3, [r3, #0]
    b154:	4313      	orrs	r3, r2
    b156:	b2da      	uxtb	r2, r3
    b158:	4b06      	ldr	r3, [pc, #24]	; (b174 <_ZN8SdVolume13cacheRawBlockEmh+0x78>)
    b15a:	701a      	strb	r2, [r3, #0]
  return true;
    b15c:	2301      	movs	r3, #1
}
    b15e:	0018      	movs	r0, r3
    b160:	46bd      	mov	sp, r7
    b162:	b002      	add	sp, #8
    b164:	bd80      	pop	{r7, pc}
    b166:	46c0      	nop			; (mov r8, r8)
    b168:	2000004c 	.word	0x2000004c
    b16c:	20000b68 	.word	0x20000b68
    b170:	20000968 	.word	0x20000968
    b174:	20000b6c 	.word	0x20000b6c

0000b178 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    b178:	b580      	push	{r7, lr}
    b17a:	b084      	sub	sp, #16
    b17c:	af00      	add	r7, sp, #0
    b17e:	6078      	str	r0, [r7, #4]
  if (!cacheFlush()) return false;
    b180:	f7ff ff7e 	bl	b080 <_ZN8SdVolume10cacheFlushEv>
    b184:	0003      	movs	r3, r0
    b186:	425a      	negs	r2, r3
    b188:	4153      	adcs	r3, r2
    b18a:	b2db      	uxtb	r3, r3
    b18c:	2b00      	cmp	r3, #0
    b18e:	d001      	beq.n	b194 <_ZN8SdVolume14cacheZeroBlockEm+0x1c>
    b190:	2300      	movs	r3, #0
    b192:	e01d      	b.n	b1d0 <_ZN8SdVolume14cacheZeroBlockEm+0x58>

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    b194:	230e      	movs	r3, #14
    b196:	18fb      	adds	r3, r7, r3
    b198:	2200      	movs	r2, #0
    b19a:	801a      	strh	r2, [r3, #0]
    b19c:	230e      	movs	r3, #14
    b19e:	18fb      	adds	r3, r7, r3
    b1a0:	881b      	ldrh	r3, [r3, #0]
    b1a2:	4a0d      	ldr	r2, [pc, #52]	; (b1d8 <_ZN8SdVolume14cacheZeroBlockEm+0x60>)
    b1a4:	4293      	cmp	r3, r2
    b1a6:	dc0d      	bgt.n	b1c4 <_ZN8SdVolume14cacheZeroBlockEm+0x4c>
    cacheBuffer_.data[i] = 0;
    b1a8:	230e      	movs	r3, #14
    b1aa:	18fb      	adds	r3, r7, r3
    b1ac:	881b      	ldrh	r3, [r3, #0]
    b1ae:	4a0b      	ldr	r2, [pc, #44]	; (b1dc <_ZN8SdVolume14cacheZeroBlockEm+0x64>)
    b1b0:	2100      	movs	r1, #0
    b1b2:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i = 0; i < 512; i++) {
    b1b4:	230e      	movs	r3, #14
    b1b6:	18fb      	adds	r3, r7, r3
    b1b8:	881a      	ldrh	r2, [r3, #0]
    b1ba:	230e      	movs	r3, #14
    b1bc:	18fb      	adds	r3, r7, r3
    b1be:	3201      	adds	r2, #1
    b1c0:	801a      	strh	r2, [r3, #0]
    b1c2:	e7eb      	b.n	b19c <_ZN8SdVolume14cacheZeroBlockEm+0x24>
  }
  cacheBlockNumber_ = blockNumber;
    b1c4:	4b06      	ldr	r3, [pc, #24]	; (b1e0 <_ZN8SdVolume14cacheZeroBlockEm+0x68>)
    b1c6:	687a      	ldr	r2, [r7, #4]
    b1c8:	601a      	str	r2, [r3, #0]
  cacheSetDirty();
    b1ca:	f7fe fdaf 	bl	9d2c <_ZN8SdVolume13cacheSetDirtyEv>
  return true;
    b1ce:	2301      	movs	r3, #1
}
    b1d0:	0018      	movs	r0, r3
    b1d2:	46bd      	mov	sp, r7
    b1d4:	b004      	add	sp, #16
    b1d6:	bd80      	pop	{r7, pc}
    b1d8:	000001ff 	.word	0x000001ff
    b1dc:	20000968 	.word	0x20000968
    b1e0:	2000004c 	.word	0x2000004c

0000b1e4 <_ZNK8SdVolume9chainSizeEmPm>:
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    b1e4:	b580      	push	{r7, lr}
    b1e6:	b086      	sub	sp, #24
    b1e8:	af00      	add	r7, sp, #0
    b1ea:	60f8      	str	r0, [r7, #12]
    b1ec:	60b9      	str	r1, [r7, #8]
    b1ee:	607a      	str	r2, [r7, #4]
  uint32_t s = 0;
    b1f0:	2300      	movs	r3, #0
    b1f2:	617b      	str	r3, [r7, #20]
  do {
    if (!fatGet(cluster, &cluster)) return false;
    b1f4:	68b9      	ldr	r1, [r7, #8]
    b1f6:	2308      	movs	r3, #8
    b1f8:	18fa      	adds	r2, r7, r3
    b1fa:	68fb      	ldr	r3, [r7, #12]
    b1fc:	0018      	movs	r0, r3
    b1fe:	f000 f827 	bl	b250 <_ZNK8SdVolume6fatGetEmPm>
    b202:	0003      	movs	r3, r0
    b204:	425a      	negs	r2, r3
    b206:	4153      	adcs	r3, r2
    b208:	b2db      	uxtb	r3, r3
    b20a:	2b00      	cmp	r3, #0
    b20c:	d001      	beq.n	b212 <_ZNK8SdVolume9chainSizeEmPm+0x2e>
    b20e:	2300      	movs	r3, #0
    b210:	e019      	b.n	b246 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    s += 512UL << clusterSizeShift_;
    b212:	68fb      	ldr	r3, [r7, #12]
    b214:	7c1b      	ldrb	r3, [r3, #16]
    b216:	001a      	movs	r2, r3
    b218:	2380      	movs	r3, #128	; 0x80
    b21a:	009b      	lsls	r3, r3, #2
    b21c:	4093      	lsls	r3, r2
    b21e:	697a      	ldr	r2, [r7, #20]
    b220:	18d3      	adds	r3, r2, r3
    b222:	617b      	str	r3, [r7, #20]
  } while (!isEOC(cluster));
    b224:	68ba      	ldr	r2, [r7, #8]
    b226:	68fb      	ldr	r3, [r7, #12]
    b228:	0011      	movs	r1, r2
    b22a:	0018      	movs	r0, r3
    b22c:	f7fe fd9e 	bl	9d6c <_ZNK8SdVolume5isEOCEm>
    b230:	0003      	movs	r3, r0
  do {
    b232:	425a      	negs	r2, r3
    b234:	4153      	adcs	r3, r2
    b236:	b2db      	uxtb	r3, r3
    b238:	2b00      	cmp	r3, #0
    b23a:	d000      	beq.n	b23e <_ZNK8SdVolume9chainSizeEmPm+0x5a>
    b23c:	e7da      	b.n	b1f4 <_ZNK8SdVolume9chainSizeEmPm+0x10>
  *size = s;
    b23e:	687b      	ldr	r3, [r7, #4]
    b240:	697a      	ldr	r2, [r7, #20]
    b242:	601a      	str	r2, [r3, #0]
  return true;
    b244:	2301      	movs	r3, #1
}
    b246:	0018      	movs	r0, r3
    b248:	46bd      	mov	sp, r7
    b24a:	b006      	add	sp, #24
    b24c:	bd80      	pop	{r7, pc}
	...

0000b250 <_ZNK8SdVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    b250:	b580      	push	{r7, lr}
    b252:	b086      	sub	sp, #24
    b254:	af00      	add	r7, sp, #0
    b256:	60f8      	str	r0, [r7, #12]
    b258:	60b9      	str	r1, [r7, #8]
    b25a:	607a      	str	r2, [r7, #4]
  if (cluster > (clusterCount_ + 1)) return false;
    b25c:	68fb      	ldr	r3, [r7, #12]
    b25e:	68db      	ldr	r3, [r3, #12]
    b260:	1c5a      	adds	r2, r3, #1
    b262:	68bb      	ldr	r3, [r7, #8]
    b264:	429a      	cmp	r2, r3
    b266:	d201      	bcs.n	b26c <_ZNK8SdVolume6fatGetEmPm+0x1c>
    b268:	2300      	movs	r3, #0
    b26a:	e03b      	b.n	b2e4 <_ZNK8SdVolume6fatGetEmPm+0x94>
  uint32_t lba = fatStartBlock_;
    b26c:	68fb      	ldr	r3, [r7, #12]
    b26e:	69db      	ldr	r3, [r3, #28]
    b270:	617b      	str	r3, [r7, #20]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    b272:	68fb      	ldr	r3, [r7, #12]
    b274:	2220      	movs	r2, #32
    b276:	5c9b      	ldrb	r3, [r3, r2]
    b278:	2b10      	cmp	r3, #16
    b27a:	d102      	bne.n	b282 <_ZNK8SdVolume6fatGetEmPm+0x32>
    b27c:	68bb      	ldr	r3, [r7, #8]
    b27e:	0a1b      	lsrs	r3, r3, #8
    b280:	e001      	b.n	b286 <_ZNK8SdVolume6fatGetEmPm+0x36>
    b282:	68bb      	ldr	r3, [r7, #8]
    b284:	09db      	lsrs	r3, r3, #7
    b286:	697a      	ldr	r2, [r7, #20]
    b288:	18d3      	adds	r3, r2, r3
    b28a:	617b      	str	r3, [r7, #20]
  if (lba != cacheBlockNumber_) {
    b28c:	4b17      	ldr	r3, [pc, #92]	; (b2ec <_ZNK8SdVolume6fatGetEmPm+0x9c>)
    b28e:	681b      	ldr	r3, [r3, #0]
    b290:	697a      	ldr	r2, [r7, #20]
    b292:	429a      	cmp	r2, r3
    b294:	d00c      	beq.n	b2b0 <_ZNK8SdVolume6fatGetEmPm+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    b296:	697b      	ldr	r3, [r7, #20]
    b298:	2100      	movs	r1, #0
    b29a:	0018      	movs	r0, r3
    b29c:	f7ff ff2e 	bl	b0fc <_ZN8SdVolume13cacheRawBlockEmh>
    b2a0:	0003      	movs	r3, r0
    b2a2:	425a      	negs	r2, r3
    b2a4:	4153      	adcs	r3, r2
    b2a6:	b2db      	uxtb	r3, r3
    b2a8:	2b00      	cmp	r3, #0
    b2aa:	d001      	beq.n	b2b0 <_ZNK8SdVolume6fatGetEmPm+0x60>
    b2ac:	2300      	movs	r3, #0
    b2ae:	e019      	b.n	b2e4 <_ZNK8SdVolume6fatGetEmPm+0x94>
  }
  if (fatType_ == 16) {
    b2b0:	68fb      	ldr	r3, [r7, #12]
    b2b2:	2220      	movs	r2, #32
    b2b4:	5c9b      	ldrb	r3, [r3, r2]
    b2b6:	2b10      	cmp	r3, #16
    b2b8:	d109      	bne.n	b2ce <_ZNK8SdVolume6fatGetEmPm+0x7e>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    b2ba:	68bb      	ldr	r3, [r7, #8]
    b2bc:	22ff      	movs	r2, #255	; 0xff
    b2be:	401a      	ands	r2, r3
    b2c0:	4b0b      	ldr	r3, [pc, #44]	; (b2f0 <_ZNK8SdVolume6fatGetEmPm+0xa0>)
    b2c2:	0052      	lsls	r2, r2, #1
    b2c4:	5ad3      	ldrh	r3, [r2, r3]
    b2c6:	001a      	movs	r2, r3
    b2c8:	687b      	ldr	r3, [r7, #4]
    b2ca:	601a      	str	r2, [r3, #0]
    b2cc:	e009      	b.n	b2e2 <_ZNK8SdVolume6fatGetEmPm+0x92>
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    b2ce:	68bb      	ldr	r3, [r7, #8]
    b2d0:	227f      	movs	r2, #127	; 0x7f
    b2d2:	401a      	ands	r2, r3
    b2d4:	4b06      	ldr	r3, [pc, #24]	; (b2f0 <_ZNK8SdVolume6fatGetEmPm+0xa0>)
    b2d6:	0092      	lsls	r2, r2, #2
    b2d8:	58d3      	ldr	r3, [r2, r3]
    b2da:	011b      	lsls	r3, r3, #4
    b2dc:	091a      	lsrs	r2, r3, #4
    b2de:	687b      	ldr	r3, [r7, #4]
    b2e0:	601a      	str	r2, [r3, #0]
  }
  return true;
    b2e2:	2301      	movs	r3, #1
}
    b2e4:	0018      	movs	r0, r3
    b2e6:	46bd      	mov	sp, r7
    b2e8:	b006      	add	sp, #24
    b2ea:	bd80      	pop	{r7, pc}
    b2ec:	2000004c 	.word	0x2000004c
    b2f0:	20000968 	.word	0x20000968

0000b2f4 <_ZN8SdVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    b2f4:	b580      	push	{r7, lr}
    b2f6:	b086      	sub	sp, #24
    b2f8:	af00      	add	r7, sp, #0
    b2fa:	60f8      	str	r0, [r7, #12]
    b2fc:	60b9      	str	r1, [r7, #8]
    b2fe:	607a      	str	r2, [r7, #4]
  // error if reserved cluster
  if (cluster < 2) return false;
    b300:	68bb      	ldr	r3, [r7, #8]
    b302:	2b01      	cmp	r3, #1
    b304:	d801      	bhi.n	b30a <_ZN8SdVolume6fatPutEmm+0x16>
    b306:	2300      	movs	r3, #0
    b308:	e04b      	b.n	b3a2 <_ZN8SdVolume6fatPutEmm+0xae>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    b30a:	68fb      	ldr	r3, [r7, #12]
    b30c:	68db      	ldr	r3, [r3, #12]
    b30e:	1c5a      	adds	r2, r3, #1
    b310:	68bb      	ldr	r3, [r7, #8]
    b312:	429a      	cmp	r2, r3
    b314:	d201      	bcs.n	b31a <_ZN8SdVolume6fatPutEmm+0x26>
    b316:	2300      	movs	r3, #0
    b318:	e043      	b.n	b3a2 <_ZN8SdVolume6fatPutEmm+0xae>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    b31a:	68fb      	ldr	r3, [r7, #12]
    b31c:	69db      	ldr	r3, [r3, #28]
    b31e:	617b      	str	r3, [r7, #20]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    b320:	68fb      	ldr	r3, [r7, #12]
    b322:	2220      	movs	r2, #32
    b324:	5c9b      	ldrb	r3, [r3, r2]
    b326:	2b10      	cmp	r3, #16
    b328:	d102      	bne.n	b330 <_ZN8SdVolume6fatPutEmm+0x3c>
    b32a:	68bb      	ldr	r3, [r7, #8]
    b32c:	0a1b      	lsrs	r3, r3, #8
    b32e:	e001      	b.n	b334 <_ZN8SdVolume6fatPutEmm+0x40>
    b330:	68bb      	ldr	r3, [r7, #8]
    b332:	09db      	lsrs	r3, r3, #7
    b334:	697a      	ldr	r2, [r7, #20]
    b336:	18d3      	adds	r3, r2, r3
    b338:	617b      	str	r3, [r7, #20]

  if (lba != cacheBlockNumber_) {
    b33a:	4b1c      	ldr	r3, [pc, #112]	; (b3ac <_ZN8SdVolume6fatPutEmm+0xb8>)
    b33c:	681b      	ldr	r3, [r3, #0]
    b33e:	697a      	ldr	r2, [r7, #20]
    b340:	429a      	cmp	r2, r3
    b342:	d00c      	beq.n	b35e <_ZN8SdVolume6fatPutEmm+0x6a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    b344:	697b      	ldr	r3, [r7, #20]
    b346:	2100      	movs	r1, #0
    b348:	0018      	movs	r0, r3
    b34a:	f7ff fed7 	bl	b0fc <_ZN8SdVolume13cacheRawBlockEmh>
    b34e:	0003      	movs	r3, r0
    b350:	425a      	negs	r2, r3
    b352:	4153      	adcs	r3, r2
    b354:	b2db      	uxtb	r3, r3
    b356:	2b00      	cmp	r3, #0
    b358:	d001      	beq.n	b35e <_ZN8SdVolume6fatPutEmm+0x6a>
    b35a:	2300      	movs	r3, #0
    b35c:	e021      	b.n	b3a2 <_ZN8SdVolume6fatPutEmm+0xae>
  }
  // store entry
  if (fatType_ == 16) {
    b35e:	68fb      	ldr	r3, [r7, #12]
    b360:	2220      	movs	r2, #32
    b362:	5c9b      	ldrb	r3, [r3, r2]
    b364:	2b10      	cmp	r3, #16
    b366:	d108      	bne.n	b37a <_ZN8SdVolume6fatPutEmm+0x86>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    b368:	68bb      	ldr	r3, [r7, #8]
    b36a:	22ff      	movs	r2, #255	; 0xff
    b36c:	401a      	ands	r2, r3
    b36e:	687b      	ldr	r3, [r7, #4]
    b370:	b299      	uxth	r1, r3
    b372:	4b0f      	ldr	r3, [pc, #60]	; (b3b0 <_ZN8SdVolume6fatPutEmm+0xbc>)
    b374:	0052      	lsls	r2, r2, #1
    b376:	52d1      	strh	r1, [r2, r3]
    b378:	e006      	b.n	b388 <_ZN8SdVolume6fatPutEmm+0x94>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    b37a:	68bb      	ldr	r3, [r7, #8]
    b37c:	227f      	movs	r2, #127	; 0x7f
    b37e:	401a      	ands	r2, r3
    b380:	4b0b      	ldr	r3, [pc, #44]	; (b3b0 <_ZN8SdVolume6fatPutEmm+0xbc>)
    b382:	0092      	lsls	r2, r2, #2
    b384:	6879      	ldr	r1, [r7, #4]
    b386:	50d1      	str	r1, [r2, r3]
  }
  cacheSetDirty();
    b388:	f7fe fcd0 	bl	9d2c <_ZN8SdVolume13cacheSetDirtyEv>

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    b38c:	68fb      	ldr	r3, [r7, #12]
    b38e:	7e1b      	ldrb	r3, [r3, #24]
    b390:	2b01      	cmp	r3, #1
    b392:	dd05      	ble.n	b3a0 <_ZN8SdVolume6fatPutEmm+0xac>
    b394:	68fb      	ldr	r3, [r7, #12]
    b396:	689a      	ldr	r2, [r3, #8]
    b398:	697b      	ldr	r3, [r7, #20]
    b39a:	18d2      	adds	r2, r2, r3
    b39c:	4b05      	ldr	r3, [pc, #20]	; (b3b4 <_ZN8SdVolume6fatPutEmm+0xc0>)
    b39e:	601a      	str	r2, [r3, #0]
  return true;
    b3a0:	2301      	movs	r3, #1
}
    b3a2:	0018      	movs	r0, r3
    b3a4:	46bd      	mov	sp, r7
    b3a6:	b006      	add	sp, #24
    b3a8:	bd80      	pop	{r7, pc}
    b3aa:	46c0      	nop			; (mov r8, r8)
    b3ac:	2000004c 	.word	0x2000004c
    b3b0:	20000968 	.word	0x20000968
    b3b4:	20000b70 	.word	0x20000b70

0000b3b8 <_ZN8SdVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    b3b8:	b580      	push	{r7, lr}
    b3ba:	b084      	sub	sp, #16
    b3bc:	af00      	add	r7, sp, #0
    b3be:	6078      	str	r0, [r7, #4]
    b3c0:	6039      	str	r1, [r7, #0]
  // clear free cluster location
  allocSearchStart_ = 2;
    b3c2:	687b      	ldr	r3, [r7, #4]
    b3c4:	2202      	movs	r2, #2
    b3c6:	601a      	str	r2, [r3, #0]

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    b3c8:	230c      	movs	r3, #12
    b3ca:	18fa      	adds	r2, r7, r3
    b3cc:	6839      	ldr	r1, [r7, #0]
    b3ce:	687b      	ldr	r3, [r7, #4]
    b3d0:	0018      	movs	r0, r3
    b3d2:	f7ff ff3d 	bl	b250 <_ZNK8SdVolume6fatGetEmPm>
    b3d6:	0003      	movs	r3, r0
    b3d8:	425a      	negs	r2, r3
    b3da:	4153      	adcs	r3, r2
    b3dc:	b2db      	uxtb	r3, r3
    b3de:	2b00      	cmp	r3, #0
    b3e0:	d001      	beq.n	b3e6 <_ZN8SdVolume9freeChainEm+0x2e>
    b3e2:	2300      	movs	r3, #0
    b3e4:	e01d      	b.n	b422 <_ZN8SdVolume9freeChainEm+0x6a>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    b3e6:	6839      	ldr	r1, [r7, #0]
    b3e8:	687b      	ldr	r3, [r7, #4]
    b3ea:	2200      	movs	r2, #0
    b3ec:	0018      	movs	r0, r3
    b3ee:	f7ff ff81 	bl	b2f4 <_ZN8SdVolume6fatPutEmm>
    b3f2:	0003      	movs	r3, r0
    b3f4:	425a      	negs	r2, r3
    b3f6:	4153      	adcs	r3, r2
    b3f8:	b2db      	uxtb	r3, r3
    b3fa:	2b00      	cmp	r3, #0
    b3fc:	d001      	beq.n	b402 <_ZN8SdVolume9freeChainEm+0x4a>
    b3fe:	2300      	movs	r3, #0
    b400:	e00f      	b.n	b422 <_ZN8SdVolume9freeChainEm+0x6a>

    cluster = next;
    b402:	68fb      	ldr	r3, [r7, #12]
    b404:	603b      	str	r3, [r7, #0]
  } while (!isEOC(cluster));
    b406:	683a      	ldr	r2, [r7, #0]
    b408:	687b      	ldr	r3, [r7, #4]
    b40a:	0011      	movs	r1, r2
    b40c:	0018      	movs	r0, r3
    b40e:	f7fe fcad 	bl	9d6c <_ZNK8SdVolume5isEOCEm>
    b412:	0003      	movs	r3, r0
  do {
    b414:	425a      	negs	r2, r3
    b416:	4153      	adcs	r3, r2
    b418:	b2db      	uxtb	r3, r3
    b41a:	2b00      	cmp	r3, #0
    b41c:	d000      	beq.n	b420 <_ZN8SdVolume9freeChainEm+0x68>
    b41e:	e7d3      	b.n	b3c8 <_ZN8SdVolume9freeChainEm+0x10>

  return true;
    b420:	2301      	movs	r3, #1
}
    b422:	0018      	movs	r0, r3
    b424:	46bd      	mov	sp, r7
    b426:	b004      	add	sp, #16
    b428:	bd80      	pop	{r7, pc}
	...

0000b42c <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    b42c:	b580      	push	{r7, lr}
    b42e:	b088      	sub	sp, #32
    b430:	af00      	add	r7, sp, #0
    b432:	60f8      	str	r0, [r7, #12]
    b434:	60b9      	str	r1, [r7, #8]
    b436:	1dfb      	adds	r3, r7, #7
    b438:	701a      	strb	r2, [r3, #0]
  uint32_t volumeStartBlock = 0;
    b43a:	2300      	movs	r3, #0
    b43c:	61fb      	str	r3, [r7, #28]
  sdCard_ = dev;
    b43e:	4ba6      	ldr	r3, [pc, #664]	; (b6d8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ac>)
    b440:	68ba      	ldr	r2, [r7, #8]
    b442:	601a      	str	r2, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    b444:	1dfb      	adds	r3, r7, #7
    b446:	781b      	ldrb	r3, [r3, #0]
    b448:	2b00      	cmp	r3, #0
    b44a:	d04a      	beq.n	b4e2 <_ZN8SdVolume4initEP7Sd2Cardh+0xb6>
    if (part > 4)return false;
    b44c:	1dfb      	adds	r3, r7, #7
    b44e:	781b      	ldrb	r3, [r3, #0]
    b450:	2b04      	cmp	r3, #4
    b452:	dd01      	ble.n	b458 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    b454:	2300      	movs	r3, #0
    b456:	e13b      	b.n	b6d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    b458:	69fb      	ldr	r3, [r7, #28]
    b45a:	2100      	movs	r1, #0
    b45c:	0018      	movs	r0, r3
    b45e:	f7ff fe4d 	bl	b0fc <_ZN8SdVolume13cacheRawBlockEmh>
    b462:	0003      	movs	r3, r0
    b464:	425a      	negs	r2, r3
    b466:	4153      	adcs	r3, r2
    b468:	b2db      	uxtb	r3, r3
    b46a:	2b00      	cmp	r3, #0
    b46c:	d001      	beq.n	b472 <_ZN8SdVolume4initEP7Sd2Cardh+0x46>
    b46e:	2300      	movs	r3, #0
    b470:	e12e      	b.n	b6d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    b472:	1dfb      	adds	r3, r7, #7
    b474:	781b      	ldrb	r3, [r3, #0]
    b476:	3b01      	subs	r3, #1
    b478:	011b      	lsls	r3, r3, #4
    b47a:	33b9      	adds	r3, #185	; 0xb9
    b47c:	33ff      	adds	r3, #255	; 0xff
    b47e:	001a      	movs	r2, r3
    b480:	4b96      	ldr	r3, [pc, #600]	; (b6dc <_ZN8SdVolume4initEP7Sd2Cardh+0x2b0>)
    b482:	18d3      	adds	r3, r2, r3
    b484:	3306      	adds	r3, #6
    b486:	61bb      	str	r3, [r7, #24]
    if ((p->boot & 0X7F) !=0  ||
    b488:	69bb      	ldr	r3, [r7, #24]
    b48a:	781b      	ldrb	r3, [r3, #0]
    b48c:	001a      	movs	r2, r3
    b48e:	237f      	movs	r3, #127	; 0x7f
    b490:	4013      	ands	r3, r2
    b492:	d118      	bne.n	b4c6 <_ZN8SdVolume4initEP7Sd2Cardh+0x9a>
      p->totalSectors < 100 ||
    b494:	69bb      	ldr	r3, [r7, #24]
    b496:	7b1a      	ldrb	r2, [r3, #12]
    b498:	7b59      	ldrb	r1, [r3, #13]
    b49a:	0209      	lsls	r1, r1, #8
    b49c:	430a      	orrs	r2, r1
    b49e:	7b99      	ldrb	r1, [r3, #14]
    b4a0:	0409      	lsls	r1, r1, #16
    b4a2:	430a      	orrs	r2, r1
    b4a4:	7bdb      	ldrb	r3, [r3, #15]
    b4a6:	061b      	lsls	r3, r3, #24
    b4a8:	4313      	orrs	r3, r2
    if ((p->boot & 0X7F) !=0  ||
    b4aa:	2b63      	cmp	r3, #99	; 0x63
    b4ac:	d90b      	bls.n	b4c6 <_ZN8SdVolume4initEP7Sd2Cardh+0x9a>
      p->firstSector == 0) {
    b4ae:	69bb      	ldr	r3, [r7, #24]
    b4b0:	7a1a      	ldrb	r2, [r3, #8]
    b4b2:	7a59      	ldrb	r1, [r3, #9]
    b4b4:	0209      	lsls	r1, r1, #8
    b4b6:	430a      	orrs	r2, r1
    b4b8:	7a99      	ldrb	r1, [r3, #10]
    b4ba:	0409      	lsls	r1, r1, #16
    b4bc:	430a      	orrs	r2, r1
    b4be:	7adb      	ldrb	r3, [r3, #11]
    b4c0:	061b      	lsls	r3, r3, #24
    b4c2:	4313      	orrs	r3, r2
      p->totalSectors < 100 ||
    b4c4:	d101      	bne.n	b4ca <_ZN8SdVolume4initEP7Sd2Cardh+0x9e>
      // not a valid partition
      return false;
    b4c6:	2300      	movs	r3, #0
    b4c8:	e102      	b.n	b6d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
    }
    volumeStartBlock = p->firstSector;
    b4ca:	69bb      	ldr	r3, [r7, #24]
    b4cc:	7a1a      	ldrb	r2, [r3, #8]
    b4ce:	7a59      	ldrb	r1, [r3, #9]
    b4d0:	0209      	lsls	r1, r1, #8
    b4d2:	430a      	orrs	r2, r1
    b4d4:	7a99      	ldrb	r1, [r3, #10]
    b4d6:	0409      	lsls	r1, r1, #16
    b4d8:	430a      	orrs	r2, r1
    b4da:	7adb      	ldrb	r3, [r3, #11]
    b4dc:	061b      	lsls	r3, r3, #24
    b4de:	4313      	orrs	r3, r2
    b4e0:	61fb      	str	r3, [r7, #28]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    b4e2:	69fb      	ldr	r3, [r7, #28]
    b4e4:	2100      	movs	r1, #0
    b4e6:	0018      	movs	r0, r3
    b4e8:	f7ff fe08 	bl	b0fc <_ZN8SdVolume13cacheRawBlockEmh>
    b4ec:	0003      	movs	r3, r0
    b4ee:	425a      	negs	r2, r3
    b4f0:	4153      	adcs	r3, r2
    b4f2:	b2db      	uxtb	r3, r3
    b4f4:	2b00      	cmp	r3, #0
    b4f6:	d001      	beq.n	b4fc <_ZN8SdVolume4initEP7Sd2Cardh+0xd0>
    b4f8:	2300      	movs	r3, #0
    b4fa:	e0e9      	b.n	b6d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
    b4fc:	4b78      	ldr	r3, [pc, #480]	; (b6e0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b4>)
    b4fe:	617b      	str	r3, [r7, #20]
  if (bpb->bytesPerSector != 512 ||
    b500:	697b      	ldr	r3, [r7, #20]
    b502:	781a      	ldrb	r2, [r3, #0]
    b504:	785b      	ldrb	r3, [r3, #1]
    b506:	021b      	lsls	r3, r3, #8
    b508:	4313      	orrs	r3, r2
    b50a:	b29a      	uxth	r2, r3
    b50c:	2380      	movs	r3, #128	; 0x80
    b50e:	009b      	lsls	r3, r3, #2
    b510:	429a      	cmp	r2, r3
    b512:	d10f      	bne.n	b534 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->fatCount == 0 ||
    b514:	697b      	ldr	r3, [r7, #20]
    b516:	795b      	ldrb	r3, [r3, #5]
  if (bpb->bytesPerSector != 512 ||
    b518:	2b00      	cmp	r3, #0
    b51a:	d00b      	beq.n	b534 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->reservedSectorCount == 0 ||
    b51c:	697b      	ldr	r3, [r7, #20]
    b51e:	78da      	ldrb	r2, [r3, #3]
    b520:	791b      	ldrb	r3, [r3, #4]
    b522:	021b      	lsls	r3, r3, #8
    b524:	4313      	orrs	r3, r2
    b526:	b29b      	uxth	r3, r3
    bpb->fatCount == 0 ||
    b528:	2b00      	cmp	r3, #0
    b52a:	d003      	beq.n	b534 <_ZN8SdVolume4initEP7Sd2Cardh+0x108>
    bpb->sectorsPerCluster == 0) {
    b52c:	697b      	ldr	r3, [r7, #20]
    b52e:	789b      	ldrb	r3, [r3, #2]
    bpb->reservedSectorCount == 0 ||
    b530:	2b00      	cmp	r3, #0
    b532:	d101      	bne.n	b538 <_ZN8SdVolume4initEP7Sd2Cardh+0x10c>
       // not valid FAT volume
      return false;
    b534:	2300      	movs	r3, #0
    b536:	e0cb      	b.n	b6d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  }
  fatCount_ = bpb->fatCount;
    b538:	697b      	ldr	r3, [r7, #20]
    b53a:	795a      	ldrb	r2, [r3, #5]
    b53c:	68fb      	ldr	r3, [r7, #12]
    b53e:	761a      	strb	r2, [r3, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;
    b540:	697b      	ldr	r3, [r7, #20]
    b542:	789a      	ldrb	r2, [r3, #2]
    b544:	68fb      	ldr	r3, [r7, #12]
    b546:	711a      	strb	r2, [r3, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    b548:	68fb      	ldr	r3, [r7, #12]
    b54a:	2200      	movs	r2, #0
    b54c:	741a      	strb	r2, [r3, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    b54e:	68fb      	ldr	r3, [r7, #12]
    b550:	791b      	ldrb	r3, [r3, #4]
    b552:	001a      	movs	r2, r3
    b554:	68fb      	ldr	r3, [r7, #12]
    b556:	7c1b      	ldrb	r3, [r3, #16]
    b558:	0019      	movs	r1, r3
    b55a:	2301      	movs	r3, #1
    b55c:	408b      	lsls	r3, r1
    b55e:	429a      	cmp	r2, r3
    b560:	d00f      	beq.n	b582 <_ZN8SdVolume4initEP7Sd2Cardh+0x156>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    b562:	68fb      	ldr	r3, [r7, #12]
    b564:	7c1b      	ldrb	r3, [r3, #16]
    b566:	1c5a      	adds	r2, r3, #1
    b568:	b2d1      	uxtb	r1, r2
    b56a:	68fa      	ldr	r2, [r7, #12]
    b56c:	7411      	strb	r1, [r2, #16]
    b56e:	2201      	movs	r2, #1
    b570:	2b07      	cmp	r3, #7
    b572:	dc01      	bgt.n	b578 <_ZN8SdVolume4initEP7Sd2Cardh+0x14c>
    b574:	2300      	movs	r3, #0
    b576:	1c1a      	adds	r2, r3, #0
    b578:	b2d3      	uxtb	r3, r2
    b57a:	2b00      	cmp	r3, #0
    b57c:	d0e7      	beq.n	b54e <_ZN8SdVolume4initEP7Sd2Cardh+0x122>
    b57e:	2300      	movs	r3, #0
    b580:	e0a6      	b.n	b6d0 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a4>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    b582:	697b      	ldr	r3, [r7, #20]
    b584:	7ada      	ldrb	r2, [r3, #11]
    b586:	7b1b      	ldrb	r3, [r3, #12]
    b588:	021b      	lsls	r3, r3, #8
    b58a:	4313      	orrs	r3, r2
    b58c:	b29b      	uxth	r3, r3
    b58e:	2b00      	cmp	r3, #0
    b590:	d007      	beq.n	b5a2 <_ZN8SdVolume4initEP7Sd2Cardh+0x176>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    b592:	697b      	ldr	r3, [r7, #20]
    b594:	7ada      	ldrb	r2, [r3, #11]
    b596:	7b1b      	ldrb	r3, [r3, #12]
    b598:	021b      	lsls	r3, r3, #8
    b59a:	4313      	orrs	r3, r2
    b59c:	b29b      	uxth	r3, r3
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    b59e:	001a      	movs	r2, r3
    b5a0:	e00b      	b.n	b5ba <_ZN8SdVolume4initEP7Sd2Cardh+0x18e>
    b5a2:	697b      	ldr	r3, [r7, #20]
    b5a4:	7e5a      	ldrb	r2, [r3, #25]
    b5a6:	7e99      	ldrb	r1, [r3, #26]
    b5a8:	0209      	lsls	r1, r1, #8
    b5aa:	430a      	orrs	r2, r1
    b5ac:	7ed9      	ldrb	r1, [r3, #27]
    b5ae:	0409      	lsls	r1, r1, #16
    b5b0:	430a      	orrs	r2, r1
    b5b2:	7f1b      	ldrb	r3, [r3, #28]
    b5b4:	061b      	lsls	r3, r3, #24
    b5b6:	4313      	orrs	r3, r2
    b5b8:	001a      	movs	r2, r3
    b5ba:	68fb      	ldr	r3, [r7, #12]
    b5bc:	609a      	str	r2, [r3, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    b5be:	697b      	ldr	r3, [r7, #20]
    b5c0:	78da      	ldrb	r2, [r3, #3]
    b5c2:	791b      	ldrb	r3, [r3, #4]
    b5c4:	021b      	lsls	r3, r3, #8
    b5c6:	4313      	orrs	r3, r2
    b5c8:	b29b      	uxth	r3, r3
    b5ca:	001a      	movs	r2, r3
    b5cc:	69fb      	ldr	r3, [r7, #28]
    b5ce:	18d2      	adds	r2, r2, r3
    b5d0:	68fb      	ldr	r3, [r7, #12]
    b5d2:	61da      	str	r2, [r3, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    b5d4:	697b      	ldr	r3, [r7, #20]
    b5d6:	799a      	ldrb	r2, [r3, #6]
    b5d8:	79db      	ldrb	r3, [r3, #7]
    b5da:	021b      	lsls	r3, r3, #8
    b5dc:	4313      	orrs	r3, r2
    b5de:	b29a      	uxth	r2, r3
    b5e0:	68fb      	ldr	r3, [r7, #12]
    b5e2:	845a      	strh	r2, [r3, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    b5e4:	68fb      	ldr	r3, [r7, #12]
    b5e6:	69da      	ldr	r2, [r3, #28]
    b5e8:	697b      	ldr	r3, [r7, #20]
    b5ea:	795b      	ldrb	r3, [r3, #5]
    b5ec:	0019      	movs	r1, r3
    b5ee:	68fb      	ldr	r3, [r7, #12]
    b5f0:	689b      	ldr	r3, [r3, #8]
    b5f2:	434b      	muls	r3, r1
    b5f4:	18d2      	adds	r2, r2, r3
    b5f6:	68fb      	ldr	r3, [r7, #12]
    b5f8:	625a      	str	r2, [r3, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    b5fa:	68fb      	ldr	r3, [r7, #12]
    b5fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b5fe:	697b      	ldr	r3, [r7, #20]
    b600:	7999      	ldrb	r1, [r3, #6]
    b602:	79db      	ldrb	r3, [r3, #7]
    b604:	021b      	lsls	r3, r3, #8
    b606:	430b      	orrs	r3, r1
    b608:	b29b      	uxth	r3, r3
    b60a:	015b      	lsls	r3, r3, #5
    b60c:	4935      	ldr	r1, [pc, #212]	; (b6e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b8>)
    b60e:	468c      	mov	ip, r1
    b610:	4463      	add	r3, ip
    b612:	2b00      	cmp	r3, #0
    b614:	da02      	bge.n	b61c <_ZN8SdVolume4initEP7Sd2Cardh+0x1f0>
    b616:	4933      	ldr	r1, [pc, #204]	; (b6e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2b8>)
    b618:	468c      	mov	ip, r1
    b61a:	4463      	add	r3, ip
    b61c:	125b      	asrs	r3, r3, #9
    b61e:	18d2      	adds	r2, r2, r3
    b620:	68fb      	ldr	r3, [r7, #12]
    b622:	615a      	str	r2, [r3, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    b624:	697b      	ldr	r3, [r7, #20]
    b626:	7a1a      	ldrb	r2, [r3, #8]
    b628:	7a5b      	ldrb	r3, [r3, #9]
    b62a:	021b      	lsls	r3, r3, #8
    b62c:	4313      	orrs	r3, r2
    b62e:	b29b      	uxth	r3, r3
    b630:	2b00      	cmp	r3, #0
    b632:	d006      	beq.n	b642 <_ZN8SdVolume4initEP7Sd2Cardh+0x216>
                           bpb->totalSectors16 : bpb->totalSectors32;
    b634:	697b      	ldr	r3, [r7, #20]
    b636:	7a1a      	ldrb	r2, [r3, #8]
    b638:	7a5b      	ldrb	r3, [r3, #9]
    b63a:	021b      	lsls	r3, r3, #8
    b63c:	4313      	orrs	r3, r2
    b63e:	b29b      	uxth	r3, r3
    b640:	e00a      	b.n	b658 <_ZN8SdVolume4initEP7Sd2Cardh+0x22c>
  uint32_t totalBlocks = bpb->totalSectors16 ?
    b642:	697b      	ldr	r3, [r7, #20]
    b644:	7d5a      	ldrb	r2, [r3, #21]
    b646:	7d99      	ldrb	r1, [r3, #22]
    b648:	0209      	lsls	r1, r1, #8
    b64a:	430a      	orrs	r2, r1
    b64c:	7dd9      	ldrb	r1, [r3, #23]
    b64e:	0409      	lsls	r1, r1, #16
    b650:	430a      	orrs	r2, r1
    b652:	7e1b      	ldrb	r3, [r3, #24]
    b654:	061b      	lsls	r3, r3, #24
    b656:	4313      	orrs	r3, r2
                           bpb->totalSectors16 : bpb->totalSectors32;
    b658:	613b      	str	r3, [r7, #16]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    b65a:	68fb      	ldr	r3, [r7, #12]
    b65c:	695b      	ldr	r3, [r3, #20]
    b65e:	69fa      	ldr	r2, [r7, #28]
    b660:	1ad2      	subs	r2, r2, r3
    b662:	693b      	ldr	r3, [r7, #16]
    b664:	18d2      	adds	r2, r2, r3
    b666:	68fb      	ldr	r3, [r7, #12]
    b668:	60da      	str	r2, [r3, #12]

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    b66a:	68fb      	ldr	r3, [r7, #12]
    b66c:	68db      	ldr	r3, [r3, #12]
    b66e:	68fa      	ldr	r2, [r7, #12]
    b670:	7c12      	ldrb	r2, [r2, #16]
    b672:	40d3      	lsrs	r3, r2
    b674:	001a      	movs	r2, r3
    b676:	68fb      	ldr	r3, [r7, #12]
    b678:	60da      	str	r2, [r3, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    b67a:	68fb      	ldr	r3, [r7, #12]
    b67c:	68db      	ldr	r3, [r3, #12]
    b67e:	4a1a      	ldr	r2, [pc, #104]	; (b6e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2bc>)
    b680:	4293      	cmp	r3, r2
    b682:	d804      	bhi.n	b68e <_ZN8SdVolume4initEP7Sd2Cardh+0x262>
    fatType_ = 12;
    b684:	68fb      	ldr	r3, [r7, #12]
    b686:	2220      	movs	r2, #32
    b688:	210c      	movs	r1, #12
    b68a:	5499      	strb	r1, [r3, r2]
    b68c:	e01f      	b.n	b6ce <_ZN8SdVolume4initEP7Sd2Cardh+0x2a2>
  } else if (clusterCount_ < 65525) {
    b68e:	68fb      	ldr	r3, [r7, #12]
    b690:	68db      	ldr	r3, [r3, #12]
    b692:	4a16      	ldr	r2, [pc, #88]	; (b6ec <_ZN8SdVolume4initEP7Sd2Cardh+0x2c0>)
    b694:	4293      	cmp	r3, r2
    b696:	d804      	bhi.n	b6a2 <_ZN8SdVolume4initEP7Sd2Cardh+0x276>
    fatType_ = 16;
    b698:	68fb      	ldr	r3, [r7, #12]
    b69a:	2220      	movs	r2, #32
    b69c:	2110      	movs	r1, #16
    b69e:	5499      	strb	r1, [r3, r2]
    b6a0:	e015      	b.n	b6ce <_ZN8SdVolume4initEP7Sd2Cardh+0x2a2>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    b6a2:	697b      	ldr	r3, [r7, #20]
    b6a4:	2221      	movs	r2, #33	; 0x21
    b6a6:	5c9a      	ldrb	r2, [r3, r2]
    b6a8:	2122      	movs	r1, #34	; 0x22
    b6aa:	5c59      	ldrb	r1, [r3, r1]
    b6ac:	0209      	lsls	r1, r1, #8
    b6ae:	430a      	orrs	r2, r1
    b6b0:	2123      	movs	r1, #35	; 0x23
    b6b2:	5c59      	ldrb	r1, [r3, r1]
    b6b4:	0409      	lsls	r1, r1, #16
    b6b6:	430a      	orrs	r2, r1
    b6b8:	2124      	movs	r1, #36	; 0x24
    b6ba:	5c5b      	ldrb	r3, [r3, r1]
    b6bc:	061b      	lsls	r3, r3, #24
    b6be:	4313      	orrs	r3, r2
    b6c0:	001a      	movs	r2, r3
    b6c2:	68fb      	ldr	r3, [r7, #12]
    b6c4:	625a      	str	r2, [r3, #36]	; 0x24
    fatType_ = 32;
    b6c6:	68fb      	ldr	r3, [r7, #12]
    b6c8:	2220      	movs	r2, #32
    b6ca:	2120      	movs	r1, #32
    b6cc:	5499      	strb	r1, [r3, r2]
  }
  return true;
    b6ce:	2301      	movs	r3, #1
}
    b6d0:	0018      	movs	r0, r3
    b6d2:	46bd      	mov	sp, r7
    b6d4:	b008      	add	sp, #32
    b6d6:	bd80      	pop	{r7, pc}
    b6d8:	20000b68 	.word	0x20000b68
    b6dc:	20000968 	.word	0x20000968
    b6e0:	20000973 	.word	0x20000973
    b6e4:	000001ff 	.word	0x000001ff
    b6e8:	00000ff4 	.word	0x00000ff4
    b6ec:	0000fff4 	.word	0x0000fff4

0000b6f0 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
#define SPI_IMODE_EXTINT 1
#define SPI_IMODE_GLOBAL 2

const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();

SPIClass::SPIClass(SERCOM *p_sercom, uint8_t uc_pinMISO, uint8_t uc_pinSCK, uint8_t uc_pinMOSI, SercomSpiTXPad PadTx, SercomRXPad PadRx)
    b6f0:	b580      	push	{r7, lr}
    b6f2:	b084      	sub	sp, #16
    b6f4:	af00      	add	r7, sp, #0
    b6f6:	60f8      	str	r0, [r7, #12]
    b6f8:	60b9      	str	r1, [r7, #8]
    b6fa:	0019      	movs	r1, r3
    b6fc:	1dfb      	adds	r3, r7, #7
    b6fe:	701a      	strb	r2, [r3, #0]
    b700:	1dbb      	adds	r3, r7, #6
    b702:	1c0a      	adds	r2, r1, #0
    b704:	701a      	strb	r2, [r3, #0]
{
  initialized = false;
    b706:	68fb      	ldr	r3, [r7, #12]
    b708:	2200      	movs	r2, #0
    b70a:	725a      	strb	r2, [r3, #9]
  assert(p_sercom != NULL);
    b70c:	68bb      	ldr	r3, [r7, #8]
    b70e:	2b00      	cmp	r3, #0
    b710:	d105      	bne.n	b71e <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2e>
    b712:	4b12      	ldr	r3, [pc, #72]	; (b75c <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x6c>)
    b714:	4a12      	ldr	r2, [pc, #72]	; (b760 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x70>)
    b716:	4813      	ldr	r0, [pc, #76]	; (b764 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x74>)
    b718:	2122      	movs	r1, #34	; 0x22
    b71a:	f005 f81f 	bl	1075c <__assert_func>
  _p_sercom = p_sercom;
    b71e:	68fb      	ldr	r3, [r7, #12]
    b720:	68ba      	ldr	r2, [r7, #8]
    b722:	601a      	str	r2, [r3, #0]

  // pins
  _uc_pinMiso = uc_pinMISO;
    b724:	68fb      	ldr	r3, [r7, #12]
    b726:	1dfa      	adds	r2, r7, #7
    b728:	7812      	ldrb	r2, [r2, #0]
    b72a:	711a      	strb	r2, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    b72c:	68fb      	ldr	r3, [r7, #12]
    b72e:	1dba      	adds	r2, r7, #6
    b730:	7812      	ldrb	r2, [r2, #0]
    b732:	719a      	strb	r2, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    b734:	68fb      	ldr	r3, [r7, #12]
    b736:	2218      	movs	r2, #24
    b738:	18ba      	adds	r2, r7, r2
    b73a:	7812      	ldrb	r2, [r2, #0]
    b73c:	715a      	strb	r2, [r3, #5]

  // SERCOM pads
  _padTx=PadTx;
    b73e:	68fb      	ldr	r3, [r7, #12]
    b740:	221c      	movs	r2, #28
    b742:	18ba      	adds	r2, r7, r2
    b744:	7812      	ldrb	r2, [r2, #0]
    b746:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    b748:	68fb      	ldr	r3, [r7, #12]
    b74a:	2220      	movs	r2, #32
    b74c:	18ba      	adds	r2, r7, r2
    b74e:	7812      	ldrb	r2, [r2, #0]
    b750:	721a      	strb	r2, [r3, #8]
}
    b752:	68fb      	ldr	r3, [r7, #12]
    b754:	0018      	movs	r0, r3
    b756:	46bd      	mov	sp, r7
    b758:	b004      	add	sp, #16
    b75a:	bd80      	pop	{r7, pc}
    b75c:	00013670 	.word	0x00013670
    b760:	000136a4 	.word	0x000136a4
    b764:	00013684 	.word	0x00013684

0000b768 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    b768:	b580      	push	{r7, lr}
    b76a:	b082      	sub	sp, #8
    b76c:	af00      	add	r7, sp, #0
    b76e:	6078      	str	r0, [r7, #4]
  init();
    b770:	687b      	ldr	r3, [r7, #4]
    b772:	0018      	movs	r0, r3
    b774:	f000 f844 	bl	b800 <_ZN8SPIClass4initEv>

  // PIO init
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    b778:	687b      	ldr	r3, [r7, #4]
    b77a:	791b      	ldrb	r3, [r3, #4]
    b77c:	0018      	movs	r0, r3
    b77e:	687b      	ldr	r3, [r7, #4]
    b780:	791b      	ldrb	r3, [r3, #4]
    b782:	0019      	movs	r1, r3
    b784:	4a1c      	ldr	r2, [pc, #112]	; (b7f8 <_ZN8SPIClass5beginEv+0x90>)
    b786:	000b      	movs	r3, r1
    b788:	005b      	lsls	r3, r3, #1
    b78a:	185b      	adds	r3, r3, r1
    b78c:	00db      	lsls	r3, r3, #3
    b78e:	18d3      	adds	r3, r2, r3
    b790:	3308      	adds	r3, #8
    b792:	781b      	ldrb	r3, [r3, #0]
    b794:	b25b      	sxtb	r3, r3
    b796:	0019      	movs	r1, r3
    b798:	f7fb fa2a 	bl	6bf0 <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
    b79c:	687b      	ldr	r3, [r7, #4]
    b79e:	799b      	ldrb	r3, [r3, #6]
    b7a0:	0018      	movs	r0, r3
    b7a2:	687b      	ldr	r3, [r7, #4]
    b7a4:	799b      	ldrb	r3, [r3, #6]
    b7a6:	0019      	movs	r1, r3
    b7a8:	4a13      	ldr	r2, [pc, #76]	; (b7f8 <_ZN8SPIClass5beginEv+0x90>)
    b7aa:	000b      	movs	r3, r1
    b7ac:	005b      	lsls	r3, r3, #1
    b7ae:	185b      	adds	r3, r3, r1
    b7b0:	00db      	lsls	r3, r3, #3
    b7b2:	18d3      	adds	r3, r2, r3
    b7b4:	3308      	adds	r3, #8
    b7b6:	781b      	ldrb	r3, [r3, #0]
    b7b8:	b25b      	sxtb	r3, r3
    b7ba:	0019      	movs	r1, r3
    b7bc:	f7fb fa18 	bl	6bf0 <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
    b7c0:	687b      	ldr	r3, [r7, #4]
    b7c2:	795b      	ldrb	r3, [r3, #5]
    b7c4:	0018      	movs	r0, r3
    b7c6:	687b      	ldr	r3, [r7, #4]
    b7c8:	795b      	ldrb	r3, [r3, #5]
    b7ca:	0019      	movs	r1, r3
    b7cc:	4a0a      	ldr	r2, [pc, #40]	; (b7f8 <_ZN8SPIClass5beginEv+0x90>)
    b7ce:	000b      	movs	r3, r1
    b7d0:	005b      	lsls	r3, r3, #1
    b7d2:	185b      	adds	r3, r3, r1
    b7d4:	00db      	lsls	r3, r3, #3
    b7d6:	18d3      	adds	r3, r2, r3
    b7d8:	3308      	adds	r3, #8
    b7da:	781b      	ldrb	r3, [r3, #0]
    b7dc:	b25b      	sxtb	r3, r3
    b7de:	0019      	movs	r1, r3
    b7e0:	f7fb fa06 	bl	6bf0 <pinPeripheral>

  config(DEFAULT_SPI_SETTINGS);
    b7e4:	4b05      	ldr	r3, [pc, #20]	; (b7fc <_ZN8SPIClass5beginEv+0x94>)
    b7e6:	6878      	ldr	r0, [r7, #4]
    b7e8:	6819      	ldr	r1, [r3, #0]
    b7ea:	685a      	ldr	r2, [r3, #4]
    b7ec:	f000 f821 	bl	b832 <_ZN8SPIClass6configE11SPISettings>
}
    b7f0:	46c0      	nop			; (mov r8, r8)
    b7f2:	46bd      	mov	sp, r7
    b7f4:	b002      	add	sp, #8
    b7f6:	bd80      	pop	{r7, pc}
    b7f8:	0001371c 	.word	0x0001371c
    b7fc:	20000b74 	.word	0x20000b74

0000b800 <_ZN8SPIClass4initEv>:

void SPIClass::init()
{
    b800:	b580      	push	{r7, lr}
    b802:	b082      	sub	sp, #8
    b804:	af00      	add	r7, sp, #0
    b806:	6078      	str	r0, [r7, #4]
  if (initialized)
    b808:	687b      	ldr	r3, [r7, #4]
    b80a:	7a5b      	ldrb	r3, [r3, #9]
    b80c:	2b00      	cmp	r3, #0
    b80e:	d10c      	bne.n	b82a <_ZN8SPIClass4initEv+0x2a>
    return;
  interruptMode = SPI_IMODE_NONE;
    b810:	687b      	ldr	r3, [r7, #4]
    b812:	2200      	movs	r2, #0
    b814:	729a      	strb	r2, [r3, #10]
  interruptSave = 0;
    b816:	687b      	ldr	r3, [r7, #4]
    b818:	2200      	movs	r2, #0
    b81a:	72da      	strb	r2, [r3, #11]
  interruptMask = 0;
    b81c:	687b      	ldr	r3, [r7, #4]
    b81e:	2200      	movs	r2, #0
    b820:	60da      	str	r2, [r3, #12]
  initialized = true;
    b822:	687b      	ldr	r3, [r7, #4]
    b824:	2201      	movs	r2, #1
    b826:	725a      	strb	r2, [r3, #9]
    b828:	e000      	b.n	b82c <_ZN8SPIClass4initEv+0x2c>
    return;
    b82a:	46c0      	nop			; (mov r8, r8)
}
    b82c:	46bd      	mov	sp, r7
    b82e:	b002      	add	sp, #8
    b830:	bd80      	pop	{r7, pc}

0000b832 <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    b832:	b580      	push	{r7, lr}
    b834:	b086      	sub	sp, #24
    b836:	af02      	add	r7, sp, #8
    b838:	60f8      	str	r0, [r7, #12]
    b83a:	1d3b      	adds	r3, r7, #4
    b83c:	6019      	str	r1, [r3, #0]
    b83e:	605a      	str	r2, [r3, #4]
  _p_sercom->disableSPI();
    b840:	68fb      	ldr	r3, [r7, #12]
    b842:	681b      	ldr	r3, [r3, #0]
    b844:	0018      	movs	r0, r3
    b846:	f002 fa9e 	bl	dd86 <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    b84a:	68fb      	ldr	r3, [r7, #12]
    b84c:	6818      	ldr	r0, [r3, #0]
    b84e:	68fb      	ldr	r3, [r7, #12]
    b850:	79d9      	ldrb	r1, [r3, #7]
    b852:	68fb      	ldr	r3, [r7, #12]
    b854:	7a1a      	ldrb	r2, [r3, #8]
    b856:	1d3b      	adds	r3, r7, #4
    b858:	795b      	ldrb	r3, [r3, #5]
    b85a:	9300      	str	r3, [sp, #0]
    b85c:	2300      	movs	r3, #0
    b85e:	f002 f9df 	bl	dc20 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    b862:	68fb      	ldr	r3, [r7, #12]
    b864:	6818      	ldr	r0, [r3, #0]
    b866:	1d3b      	adds	r3, r7, #4
    b868:	7919      	ldrb	r1, [r3, #4]
    b86a:	1d3b      	adds	r3, r7, #4
    b86c:	681b      	ldr	r3, [r3, #0]
    b86e:	001a      	movs	r2, r3
    b870:	f002 fa15 	bl	dc9e <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    b874:	68fb      	ldr	r3, [r7, #12]
    b876:	681b      	ldr	r3, [r3, #0]
    b878:	0018      	movs	r0, r3
    b87a:	f002 fa6d 	bl	dd58 <_ZN6SERCOM9enableSPIEv>
}
    b87e:	46c0      	nop			; (mov r8, r8)
    b880:	46bd      	mov	sp, r7
    b882:	b004      	add	sp, #16
    b884:	bd80      	pop	{r7, pc}
	...

0000b888 <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    b888:	b580      	push	{r7, lr}
    b88a:	b086      	sub	sp, #24
    b88c:	af00      	add	r7, sp, #0
    b88e:	60f8      	str	r0, [r7, #12]
    b890:	1d3b      	adds	r3, r7, #4
    b892:	6019      	str	r1, [r3, #0]
    b894:	605a      	str	r2, [r3, #4]
  if (interruptMode != SPI_IMODE_NONE)
    b896:	68fb      	ldr	r3, [r7, #12]
    b898:	7a9b      	ldrb	r3, [r3, #10]
    b89a:	2b00      	cmp	r3, #0
    b89c:	d01d      	beq.n	b8da <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    b89e:	68fb      	ldr	r3, [r7, #12]
    b8a0:	7a9b      	ldrb	r3, [r3, #10]
    b8a2:	001a      	movs	r2, r3
    b8a4:	2302      	movs	r3, #2
    b8a6:	4013      	ands	r3, r2
    b8a8:	d00b      	beq.n	b8c2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b8aa:	f3ef 8310 	mrs	r3, PRIMASK
    b8ae:	617b      	str	r3, [r7, #20]
  return(result);
    b8b0:	697b      	ldr	r3, [r7, #20]
  return (__get_PRIMASK() ? 0 : 1);
    b8b2:	425a      	negs	r2, r3
    b8b4:	4153      	adcs	r3, r2
    b8b6:	b2db      	uxtb	r3, r3
    b8b8:	001a      	movs	r2, r3
    {
      interruptSave = interruptsStatus();
    b8ba:	68fb      	ldr	r3, [r7, #12]
    b8bc:	72da      	strb	r2, [r3, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    b8be:	b672      	cpsid	i
    b8c0:	e00b      	b.n	b8da <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
      noInterrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
    b8c2:	68fb      	ldr	r3, [r7, #12]
    b8c4:	7a9b      	ldrb	r3, [r3, #10]
    b8c6:	001a      	movs	r2, r3
    b8c8:	2301      	movs	r3, #1
    b8ca:	4013      	ands	r3, r2
    b8cc:	d005      	beq.n	b8da <_ZN8SPIClass16beginTransactionE11SPISettings+0x52>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    b8ce:	4a08      	ldr	r2, [pc, #32]	; (b8f0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x68>)
    b8d0:	68fb      	ldr	r3, [r7, #12]
    b8d2:	68db      	ldr	r3, [r3, #12]
    b8d4:	041b      	lsls	r3, r3, #16
    b8d6:	0c1b      	lsrs	r3, r3, #16
    b8d8:	6093      	str	r3, [r2, #8]
  }

  config(settings);
    b8da:	1d3b      	adds	r3, r7, #4
    b8dc:	68f8      	ldr	r0, [r7, #12]
    b8de:	6819      	ldr	r1, [r3, #0]
    b8e0:	685a      	ldr	r2, [r3, #4]
    b8e2:	f7ff ffa6 	bl	b832 <_ZN8SPIClass6configE11SPISettings>
}
    b8e6:	46c0      	nop			; (mov r8, r8)
    b8e8:	46bd      	mov	sp, r7
    b8ea:	b006      	add	sp, #24
    b8ec:	bd80      	pop	{r7, pc}
    b8ee:	46c0      	nop			; (mov r8, r8)
    b8f0:	40001800 	.word	0x40001800

0000b8f4 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
    b8f4:	b580      	push	{r7, lr}
    b8f6:	b082      	sub	sp, #8
    b8f8:	af00      	add	r7, sp, #0
    b8fa:	6078      	str	r0, [r7, #4]
  if (interruptMode != SPI_IMODE_NONE)
    b8fc:	687b      	ldr	r3, [r7, #4]
    b8fe:	7a9b      	ldrb	r3, [r3, #10]
    b900:	2b00      	cmp	r3, #0
    b902:	d017      	beq.n	b934 <_ZN8SPIClass14endTransactionEv+0x40>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    b904:	687b      	ldr	r3, [r7, #4]
    b906:	7a9b      	ldrb	r3, [r3, #10]
    b908:	001a      	movs	r2, r3
    b90a:	2302      	movs	r3, #2
    b90c:	4013      	ands	r3, r2
    b90e:	d005      	beq.n	b91c <_ZN8SPIClass14endTransactionEv+0x28>
    {
      if (interruptSave)
    b910:	687b      	ldr	r3, [r7, #4]
    b912:	7adb      	ldrb	r3, [r3, #11]
    b914:	2b00      	cmp	r3, #0
    b916:	d00d      	beq.n	b934 <_ZN8SPIClass14endTransactionEv+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
    b918:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    b91a:	e00b      	b.n	b934 <_ZN8SPIClass14endTransactionEv+0x40>
    else if (interruptMode & SPI_IMODE_EXTINT)
    b91c:	687b      	ldr	r3, [r7, #4]
    b91e:	7a9b      	ldrb	r3, [r3, #10]
    b920:	001a      	movs	r2, r3
    b922:	2301      	movs	r3, #1
    b924:	4013      	ands	r3, r2
    b926:	d005      	beq.n	b934 <_ZN8SPIClass14endTransactionEv+0x40>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    b928:	4a04      	ldr	r2, [pc, #16]	; (b93c <_ZN8SPIClass14endTransactionEv+0x48>)
    b92a:	687b      	ldr	r3, [r7, #4]
    b92c:	68db      	ldr	r3, [r3, #12]
    b92e:	041b      	lsls	r3, r3, #16
    b930:	0c1b      	lsrs	r3, r3, #16
    b932:	60d3      	str	r3, [r2, #12]
}
    b934:	46c0      	nop			; (mov r8, r8)
    b936:	46bd      	mov	sp, r7
    b938:	b002      	add	sp, #8
    b93a:	bd80      	pop	{r7, pc}
    b93c:	40001800 	.word	0x40001800

0000b940 <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    b940:	b580      	push	{r7, lr}
    b942:	b082      	sub	sp, #8
    b944:	af00      	add	r7, sp, #0
    b946:	6078      	str	r0, [r7, #4]
    b948:	000a      	movs	r2, r1
    b94a:	1cfb      	adds	r3, r7, #3
    b94c:	701a      	strb	r2, [r3, #0]
  return _p_sercom->transferDataSPI(data);
    b94e:	687b      	ldr	r3, [r7, #4]
    b950:	681a      	ldr	r2, [r3, #0]
    b952:	1cfb      	adds	r3, r7, #3
    b954:	781b      	ldrb	r3, [r3, #0]
    b956:	0019      	movs	r1, r3
    b958:	0010      	movs	r0, r2
    b95a:	f002 fa2b 	bl	ddb4 <_ZN6SERCOM15transferDataSPIEh>
    b95e:	0003      	movs	r3, r0
}
    b960:	0018      	movs	r0, r3
    b962:	46bd      	mov	sp, r7
    b964:	b002      	add	sp, #8
    b966:	bd80      	pop	{r7, pc}

0000b968 <_Z41__static_initialization_and_destruction_0ii>:
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    b968:	b580      	push	{r7, lr}
    b96a:	b086      	sub	sp, #24
    b96c:	af04      	add	r7, sp, #16
    b96e:	6078      	str	r0, [r7, #4]
    b970:	6039      	str	r1, [r7, #0]
    b972:	687b      	ldr	r3, [r7, #4]
    b974:	2b01      	cmp	r3, #1
    b976:	d113      	bne.n	b9a0 <_Z41__static_initialization_and_destruction_0ii+0x38>
    b978:	683b      	ldr	r3, [r7, #0]
    b97a:	4a0b      	ldr	r2, [pc, #44]	; (b9a8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    b97c:	4293      	cmp	r3, r2
    b97e:	d10f      	bne.n	b9a0 <_Z41__static_initialization_and_destruction_0ii+0x38>
const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();
    b980:	4b0a      	ldr	r3, [pc, #40]	; (b9ac <_Z41__static_initialization_and_destruction_0ii+0x44>)
    b982:	0018      	movs	r0, r3
    b984:	f7fd fbf4 	bl	9170 <_ZN11SPISettingsC1Ev>
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    b988:	4909      	ldr	r1, [pc, #36]	; (b9b0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    b98a:	480a      	ldr	r0, [pc, #40]	; (b9b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    b98c:	2300      	movs	r3, #0
    b98e:	9302      	str	r3, [sp, #8]
    b990:	2301      	movs	r3, #1
    b992:	9301      	str	r3, [sp, #4]
    b994:	2315      	movs	r3, #21
    b996:	9300      	str	r3, [sp, #0]
    b998:	2314      	movs	r3, #20
    b99a:	2212      	movs	r2, #18
    b99c:	f7ff fea8 	bl	b6f0 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>
    b9a0:	46c0      	nop			; (mov r8, r8)
    b9a2:	46bd      	mov	sp, r7
    b9a4:	b002      	add	sp, #8
    b9a6:	bd80      	pop	{r7, pc}
    b9a8:	0000ffff 	.word	0x0000ffff
    b9ac:	20000b74 	.word	0x20000b74
    b9b0:	20000dd0 	.word	0x20000dd0
    b9b4:	20000b7c 	.word	0x20000b7c

0000b9b8 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
    b9b8:	b580      	push	{r7, lr}
    b9ba:	af00      	add	r7, sp, #0
    b9bc:	4b03      	ldr	r3, [pc, #12]	; (b9cc <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x14>)
    b9be:	0019      	movs	r1, r3
    b9c0:	2001      	movs	r0, #1
    b9c2:	f7ff ffd1 	bl	b968 <_Z41__static_initialization_and_destruction_0ii>
    b9c6:	46bd      	mov	sp, r7
    b9c8:	bd80      	pop	{r7, pc}
    b9ca:	46c0      	nop			; (mov r8, r8)
    b9cc:	0000ffff 	.word	0x0000ffff

0000b9d0 <_ZN7TwoWireC1EP6SERCOMhh>:
#include <Arduino.h>
#include <wiring_private.h>

#include "Wire.h"

TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
    b9d0:	b580      	push	{r7, lr}
    b9d2:	b084      	sub	sp, #16
    b9d4:	af00      	add	r7, sp, #0
    b9d6:	60f8      	str	r0, [r7, #12]
    b9d8:	60b9      	str	r1, [r7, #8]
    b9da:	0019      	movs	r1, r3
    b9dc:	1dfb      	adds	r3, r7, #7
    b9de:	701a      	strb	r2, [r3, #0]
    b9e0:	1dbb      	adds	r3, r7, #6
    b9e2:	1c0a      	adds	r2, r1, #0
    b9e4:	701a      	strb	r2, [r3, #0]
    b9e6:	68fb      	ldr	r3, [r7, #12]
    b9e8:	0018      	movs	r0, r3
    b9ea:	f7f7 fe33 	bl	3654 <_ZN6StreamC1Ev>
    b9ee:	4a10      	ldr	r2, [pc, #64]	; (ba30 <_ZN7TwoWireC1EP6SERCOMhh+0x60>)
    b9f0:	68fb      	ldr	r3, [r7, #12]
    b9f2:	601a      	str	r2, [r3, #0]
    b9f4:	68fb      	ldr	r3, [r7, #12]
    b9f6:	3318      	adds	r3, #24
    b9f8:	0018      	movs	r0, r3
    b9fa:	f000 fad1 	bl	bfa0 <_ZN11RingBufferNILi256EEC1Ev>
    b9fe:	68fb      	ldr	r3, [r7, #12]
    ba00:	3321      	adds	r3, #33	; 0x21
    ba02:	33ff      	adds	r3, #255	; 0xff
    ba04:	0018      	movs	r0, r3
    ba06:	f000 facb 	bl	bfa0 <_ZN11RingBufferNILi256EEC1Ev>
{
  this->sercom = s;
    ba0a:	68fb      	ldr	r3, [r7, #12]
    ba0c:	68ba      	ldr	r2, [r7, #8]
    ba0e:	611a      	str	r2, [r3, #16]
  this->_uc_pinSDA=pinSDA;
    ba10:	68fb      	ldr	r3, [r7, #12]
    ba12:	1dfa      	adds	r2, r7, #7
    ba14:	7812      	ldrb	r2, [r2, #0]
    ba16:	751a      	strb	r2, [r3, #20]
  this->_uc_pinSCL=pinSCL;
    ba18:	68fb      	ldr	r3, [r7, #12]
    ba1a:	1dba      	adds	r2, r7, #6
    ba1c:	7812      	ldrb	r2, [r2, #0]
    ba1e:	755a      	strb	r2, [r3, #21]
  transmissionBegun = false;
    ba20:	68fb      	ldr	r3, [r7, #12]
    ba22:	2200      	movs	r2, #0
    ba24:	759a      	strb	r2, [r3, #22]
}
    ba26:	68fb      	ldr	r3, [r7, #12]
    ba28:	0018      	movs	r0, r3
    ba2a:	46bd      	mov	sp, r7
    ba2c:	b004      	add	sp, #16
    ba2e:	bd80      	pop	{r7, pc}
    ba30:	00013700 	.word	0x00013700

0000ba34 <_ZN7TwoWire5beginEv>:

void TwoWire::begin(void) {
    ba34:	b580      	push	{r7, lr}
    ba36:	b082      	sub	sp, #8
    ba38:	af00      	add	r7, sp, #0
    ba3a:	6078      	str	r0, [r7, #4]
  //Master Mode
  sercom->initMasterWIRE(TWI_CLOCK);
    ba3c:	687b      	ldr	r3, [r7, #4]
    ba3e:	691b      	ldr	r3, [r3, #16]
    ba40:	4a18      	ldr	r2, [pc, #96]	; (baa4 <_ZN7TwoWire5beginEv+0x70>)
    ba42:	0011      	movs	r1, r2
    ba44:	0018      	movs	r0, r3
    ba46:	f002 fa47 	bl	ded8 <_ZN6SERCOM14initMasterWIREEm>
  sercom->enableWIRE();
    ba4a:	687b      	ldr	r3, [r7, #4]
    ba4c:	691b      	ldr	r3, [r3, #16]
    ba4e:	0018      	movs	r0, r3
    ba50:	f002 fa18 	bl	de84 <_ZN6SERCOM10enableWIREEv>

  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    ba54:	687b      	ldr	r3, [r7, #4]
    ba56:	7d1b      	ldrb	r3, [r3, #20]
    ba58:	0018      	movs	r0, r3
    ba5a:	687b      	ldr	r3, [r7, #4]
    ba5c:	7d1b      	ldrb	r3, [r3, #20]
    ba5e:	0019      	movs	r1, r3
    ba60:	4a11      	ldr	r2, [pc, #68]	; (baa8 <_ZN7TwoWire5beginEv+0x74>)
    ba62:	000b      	movs	r3, r1
    ba64:	005b      	lsls	r3, r3, #1
    ba66:	185b      	adds	r3, r3, r1
    ba68:	00db      	lsls	r3, r3, #3
    ba6a:	18d3      	adds	r3, r2, r3
    ba6c:	3308      	adds	r3, #8
    ba6e:	781b      	ldrb	r3, [r3, #0]
    ba70:	b25b      	sxtb	r3, r3
    ba72:	0019      	movs	r1, r3
    ba74:	f7fb f8bc 	bl	6bf0 <pinPeripheral>
  pinPeripheral(_uc_pinSCL, g_APinDescription[_uc_pinSCL].ulPinType);
    ba78:	687b      	ldr	r3, [r7, #4]
    ba7a:	7d5b      	ldrb	r3, [r3, #21]
    ba7c:	0018      	movs	r0, r3
    ba7e:	687b      	ldr	r3, [r7, #4]
    ba80:	7d5b      	ldrb	r3, [r3, #21]
    ba82:	0019      	movs	r1, r3
    ba84:	4a08      	ldr	r2, [pc, #32]	; (baa8 <_ZN7TwoWire5beginEv+0x74>)
    ba86:	000b      	movs	r3, r1
    ba88:	005b      	lsls	r3, r3, #1
    ba8a:	185b      	adds	r3, r3, r1
    ba8c:	00db      	lsls	r3, r3, #3
    ba8e:	18d3      	adds	r3, r2, r3
    ba90:	3308      	adds	r3, #8
    ba92:	781b      	ldrb	r3, [r3, #0]
    ba94:	b25b      	sxtb	r3, r3
    ba96:	0019      	movs	r1, r3
    ba98:	f7fb f8aa 	bl	6bf0 <pinPeripheral>
}
    ba9c:	46c0      	nop			; (mov r8, r8)
    ba9e:	46bd      	mov	sp, r7
    baa0:	b002      	add	sp, #8
    baa2:	bd80      	pop	{r7, pc}
    baa4:	000186a0 	.word	0x000186a0
    baa8:	0001371c 	.word	0x0001371c

0000baac <_ZN7TwoWire11requestFromEhjb>:
void TwoWire::end() {
  sercom->disableWIRE();
}

uint8_t TwoWire::requestFrom(uint8_t address, size_t quantity, bool stopBit)
{
    baac:	b590      	push	{r4, r7, lr}
    baae:	b087      	sub	sp, #28
    bab0:	af00      	add	r7, sp, #0
    bab2:	60f8      	str	r0, [r7, #12]
    bab4:	0008      	movs	r0, r1
    bab6:	607a      	str	r2, [r7, #4]
    bab8:	0019      	movs	r1, r3
    baba:	230b      	movs	r3, #11
    babc:	18fb      	adds	r3, r7, r3
    babe:	1c02      	adds	r2, r0, #0
    bac0:	701a      	strb	r2, [r3, #0]
    bac2:	230a      	movs	r3, #10
    bac4:	18fb      	adds	r3, r7, r3
    bac6:	1c0a      	adds	r2, r1, #0
    bac8:	701a      	strb	r2, [r3, #0]
  if(quantity == 0)
    baca:	687b      	ldr	r3, [r7, #4]
    bacc:	2b00      	cmp	r3, #0
    bace:	d101      	bne.n	bad4 <_ZN7TwoWire11requestFromEhjb+0x28>
  {
    return 0;
    bad0:	2300      	movs	r3, #0
    bad2:	e052      	b.n	bb7a <_ZN7TwoWire11requestFromEhjb+0xce>
  }

  size_t byteRead = 0;
    bad4:	2300      	movs	r3, #0
    bad6:	617b      	str	r3, [r7, #20]

  rxBuffer.clear();
    bad8:	68fb      	ldr	r3, [r7, #12]
    bada:	3318      	adds	r3, #24
    badc:	0018      	movs	r0, r3
    bade:	f000 fa73 	bl	bfc8 <_ZN11RingBufferNILi256EE5clearEv>

  if(sercom->startTransmissionWIRE(address, WIRE_READ_FLAG))
    bae2:	68fb      	ldr	r3, [r7, #12]
    bae4:	6918      	ldr	r0, [r3, #16]
    bae6:	230b      	movs	r3, #11
    bae8:	18fb      	adds	r3, r7, r3
    baea:	781b      	ldrb	r3, [r3, #0]
    baec:	2201      	movs	r2, #1
    baee:	0019      	movs	r1, r3
    baf0:	f002 faac 	bl	e04c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    baf4:	1e03      	subs	r3, r0, #0
    baf6:	d03e      	beq.n	bb76 <_ZN7TwoWire11requestFromEhjb+0xca>
  {
    // Read first data
    rxBuffer.store_char(sercom->readDataWIRE());
    baf8:	68fb      	ldr	r3, [r7, #12]
    bafa:	3318      	adds	r3, #24
    bafc:	001c      	movs	r4, r3
    bafe:	68fb      	ldr	r3, [r7, #12]
    bb00:	691b      	ldr	r3, [r3, #16]
    bb02:	0018      	movs	r0, r3
    bb04:	f002 fc07 	bl	e316 <_ZN6SERCOM12readDataWIREEv>
    bb08:	0003      	movs	r3, r0
    bb0a:	0019      	movs	r1, r3
    bb0c:	0020      	movs	r0, r4
    bb0e:	f000 fa6d 	bl	bfec <_ZN11RingBufferNILi256EE10store_charEh>

    // Connected to slave
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    bb12:	2301      	movs	r3, #1
    bb14:	617b      	str	r3, [r7, #20]
    bb16:	697a      	ldr	r2, [r7, #20]
    bb18:	687b      	ldr	r3, [r7, #4]
    bb1a:	429a      	cmp	r2, r3
    bb1c:	d21b      	bcs.n	bb56 <_ZN7TwoWire11requestFromEhjb+0xaa>
    {
      sercom->prepareAckBitWIRE();                          // Prepare Acknowledge
    bb1e:	68fb      	ldr	r3, [r7, #12]
    bb20:	691b      	ldr	r3, [r3, #16]
    bb22:	0018      	movs	r0, r3
    bb24:	f002 fa3a 	bl	df9c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_READ); // Prepare the ACK command for the slave
    bb28:	68fb      	ldr	r3, [r7, #12]
    bb2a:	691b      	ldr	r3, [r3, #16]
    bb2c:	2102      	movs	r1, #2
    bb2e:	0018      	movs	r0, r3
    bb30:	f002 fa52 	bl	dfd8 <_ZN6SERCOM22prepareCommandBitsWireEh>
      rxBuffer.store_char(sercom->readDataWIRE());          // Read data and send the ACK
    bb34:	68fb      	ldr	r3, [r7, #12]
    bb36:	3318      	adds	r3, #24
    bb38:	001c      	movs	r4, r3
    bb3a:	68fb      	ldr	r3, [r7, #12]
    bb3c:	691b      	ldr	r3, [r3, #16]
    bb3e:	0018      	movs	r0, r3
    bb40:	f002 fbe9 	bl	e316 <_ZN6SERCOM12readDataWIREEv>
    bb44:	0003      	movs	r3, r0
    bb46:	0019      	movs	r1, r3
    bb48:	0020      	movs	r0, r4
    bb4a:	f000 fa4f 	bl	bfec <_ZN11RingBufferNILi256EE10store_charEh>
    for (byteRead = 1; byteRead < quantity; ++byteRead)
    bb4e:	697b      	ldr	r3, [r7, #20]
    bb50:	3301      	adds	r3, #1
    bb52:	617b      	str	r3, [r7, #20]
    bb54:	e7df      	b.n	bb16 <_ZN7TwoWire11requestFromEhjb+0x6a>
    }
    sercom->prepareNackBitWIRE();                           // Prepare NACK to stop slave transmission
    bb56:	68fb      	ldr	r3, [r7, #12]
    bb58:	691b      	ldr	r3, [r3, #16]
    bb5a:	0018      	movs	r0, r3
    bb5c:	f002 fa00 	bl	df60 <_ZN6SERCOM18prepareNackBitWIREEv>
    //sercom->readDataWIRE();                               // Clear data register to send NACK

    if (stopBit)
    bb60:	230a      	movs	r3, #10
    bb62:	18fb      	adds	r3, r7, r3
    bb64:	781b      	ldrb	r3, [r3, #0]
    bb66:	2b00      	cmp	r3, #0
    bb68:	d005      	beq.n	bb76 <_ZN7TwoWire11requestFromEhjb+0xca>
    {
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);   // Send Stop
    bb6a:	68fb      	ldr	r3, [r7, #12]
    bb6c:	691b      	ldr	r3, [r3, #16]
    bb6e:	2103      	movs	r1, #3
    bb70:	0018      	movs	r0, r3
    bb72:	f002 fa31 	bl	dfd8 <_ZN6SERCOM22prepareCommandBitsWireEh>
    }
  }

  return byteRead;
    bb76:	697b      	ldr	r3, [r7, #20]
    bb78:	b2db      	uxtb	r3, r3
}
    bb7a:	0018      	movs	r0, r3
    bb7c:	46bd      	mov	sp, r7
    bb7e:	b007      	add	sp, #28
    bb80:	bd90      	pop	{r4, r7, pc}

0000bb82 <_ZN7TwoWire11requestFromEhj>:

uint8_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
    bb82:	b580      	push	{r7, lr}
    bb84:	b084      	sub	sp, #16
    bb86:	af00      	add	r7, sp, #0
    bb88:	60f8      	str	r0, [r7, #12]
    bb8a:	607a      	str	r2, [r7, #4]
    bb8c:	230b      	movs	r3, #11
    bb8e:	18fb      	adds	r3, r7, r3
    bb90:	1c0a      	adds	r2, r1, #0
    bb92:	701a      	strb	r2, [r3, #0]
  return requestFrom(address, quantity, true);
    bb94:	687a      	ldr	r2, [r7, #4]
    bb96:	230b      	movs	r3, #11
    bb98:	18fb      	adds	r3, r7, r3
    bb9a:	7819      	ldrb	r1, [r3, #0]
    bb9c:	68f8      	ldr	r0, [r7, #12]
    bb9e:	2301      	movs	r3, #1
    bba0:	f7ff ff84 	bl	baac <_ZN7TwoWire11requestFromEhjb>
    bba4:	0003      	movs	r3, r0
}
    bba6:	0018      	movs	r0, r3
    bba8:	46bd      	mov	sp, r7
    bbaa:	b004      	add	sp, #16
    bbac:	bd80      	pop	{r7, pc}

0000bbae <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address) {
    bbae:	b580      	push	{r7, lr}
    bbb0:	b082      	sub	sp, #8
    bbb2:	af00      	add	r7, sp, #0
    bbb4:	6078      	str	r0, [r7, #4]
    bbb6:	000a      	movs	r2, r1
    bbb8:	1cfb      	adds	r3, r7, #3
    bbba:	701a      	strb	r2, [r3, #0]
  // save address of target and clear buffer
  txAddress = address;
    bbbc:	687a      	ldr	r2, [r7, #4]
    bbbe:	1cf9      	adds	r1, r7, #3
    bbc0:	238a      	movs	r3, #138	; 0x8a
    bbc2:	009b      	lsls	r3, r3, #2
    bbc4:	7809      	ldrb	r1, [r1, #0]
    bbc6:	54d1      	strb	r1, [r2, r3]
  txBuffer.clear();
    bbc8:	687b      	ldr	r3, [r7, #4]
    bbca:	3321      	adds	r3, #33	; 0x21
    bbcc:	33ff      	adds	r3, #255	; 0xff
    bbce:	0018      	movs	r0, r3
    bbd0:	f000 f9fa 	bl	bfc8 <_ZN11RingBufferNILi256EE5clearEv>

  transmissionBegun = true;
    bbd4:	687b      	ldr	r3, [r7, #4]
    bbd6:	2201      	movs	r2, #1
    bbd8:	759a      	strb	r2, [r3, #22]
}
    bbda:	46c0      	nop			; (mov r8, r8)
    bbdc:	46bd      	mov	sp, r7
    bbde:	b002      	add	sp, #8
    bbe0:	bd80      	pop	{r7, pc}

0000bbe2 <_ZN7TwoWire15endTransmissionEb>:
//  1 : Data too long
//  2 : NACK on transmit of address
//  3 : NACK on transmit of data
//  4 : Other error
uint8_t TwoWire::endTransmission(bool stopBit)
{
    bbe2:	b590      	push	{r4, r7, lr}
    bbe4:	b083      	sub	sp, #12
    bbe6:	af00      	add	r7, sp, #0
    bbe8:	6078      	str	r0, [r7, #4]
    bbea:	000a      	movs	r2, r1
    bbec:	1cfb      	adds	r3, r7, #3
    bbee:	701a      	strb	r2, [r3, #0]
  transmissionBegun = false ;
    bbf0:	687b      	ldr	r3, [r7, #4]
    bbf2:	2200      	movs	r2, #0
    bbf4:	759a      	strb	r2, [r3, #22]

  // Start I2C transmission
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    bbf6:	687b      	ldr	r3, [r7, #4]
    bbf8:	6918      	ldr	r0, [r3, #16]
    bbfa:	687a      	ldr	r2, [r7, #4]
    bbfc:	238a      	movs	r3, #138	; 0x8a
    bbfe:	009b      	lsls	r3, r3, #2
    bc00:	5cd3      	ldrb	r3, [r2, r3]
    bc02:	2200      	movs	r2, #0
    bc04:	0019      	movs	r1, r3
    bc06:	f002 fa21 	bl	e04c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    bc0a:	0003      	movs	r3, r0
    bc0c:	001a      	movs	r2, r3
    bc0e:	2301      	movs	r3, #1
    bc10:	4053      	eors	r3, r2
    bc12:	b2db      	uxtb	r3, r3
    bc14:	2b00      	cmp	r3, #0
    bc16:	d007      	beq.n	bc28 <_ZN7TwoWire15endTransmissionEb+0x46>
  {
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    bc18:	687b      	ldr	r3, [r7, #4]
    bc1a:	691b      	ldr	r3, [r3, #16]
    bc1c:	2103      	movs	r1, #3
    bc1e:	0018      	movs	r0, r3
    bc20:	f002 f9da 	bl	dfd8 <_ZN6SERCOM22prepareCommandBitsWireEh>
    return 2 ;  // Address error
    bc24:	2302      	movs	r3, #2
    bc26:	e033      	b.n	bc90 <_ZN7TwoWire15endTransmissionEb+0xae>
  }

  // Send all buffer
  while( txBuffer.available() )
    bc28:	687b      	ldr	r3, [r7, #4]
    bc2a:	3321      	adds	r3, #33	; 0x21
    bc2c:	33ff      	adds	r3, #255	; 0xff
    bc2e:	0018      	movs	r0, r3
    bc30:	f000 fa0a 	bl	c048 <_ZN11RingBufferNILi256EE9availableEv>
    bc34:	0003      	movs	r3, r0
    bc36:	1e5a      	subs	r2, r3, #1
    bc38:	4193      	sbcs	r3, r2
    bc3a:	b2db      	uxtb	r3, r3
    bc3c:	2b00      	cmp	r3, #0
    bc3e:	d01c      	beq.n	bc7a <_ZN7TwoWire15endTransmissionEb+0x98>
  {
    // Trying to send data
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    bc40:	687b      	ldr	r3, [r7, #4]
    bc42:	691c      	ldr	r4, [r3, #16]
    bc44:	687b      	ldr	r3, [r7, #4]
    bc46:	3321      	adds	r3, #33	; 0x21
    bc48:	33ff      	adds	r3, #255	; 0xff
    bc4a:	0018      	movs	r0, r3
    bc4c:	f000 fa16 	bl	c07c <_ZN11RingBufferNILi256EE9read_charEv>
    bc50:	0003      	movs	r3, r0
    bc52:	b2db      	uxtb	r3, r3
    bc54:	0019      	movs	r1, r3
    bc56:	0020      	movs	r0, r4
    bc58:	f002 fa75 	bl	e146 <_ZN6SERCOM18sendDataMasterWIREEh>
    bc5c:	0003      	movs	r3, r0
    bc5e:	001a      	movs	r2, r3
    bc60:	2301      	movs	r3, #1
    bc62:	4053      	eors	r3, r2
    bc64:	b2db      	uxtb	r3, r3
    bc66:	2b00      	cmp	r3, #0
    bc68:	d0de      	beq.n	bc28 <_ZN7TwoWire15endTransmissionEb+0x46>
    {
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    bc6a:	687b      	ldr	r3, [r7, #4]
    bc6c:	691b      	ldr	r3, [r3, #16]
    bc6e:	2103      	movs	r1, #3
    bc70:	0018      	movs	r0, r3
    bc72:	f002 f9b1 	bl	dfd8 <_ZN6SERCOM22prepareCommandBitsWireEh>
      return 3 ;  // Nack or error
    bc76:	2303      	movs	r3, #3
    bc78:	e00a      	b.n	bc90 <_ZN7TwoWire15endTransmissionEb+0xae>
    }
  }
  
  if (stopBit)
    bc7a:	1cfb      	adds	r3, r7, #3
    bc7c:	781b      	ldrb	r3, [r3, #0]
    bc7e:	2b00      	cmp	r3, #0
    bc80:	d005      	beq.n	bc8e <_ZN7TwoWire15endTransmissionEb+0xac>
  {
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    bc82:	687b      	ldr	r3, [r7, #4]
    bc84:	691b      	ldr	r3, [r3, #16]
    bc86:	2103      	movs	r1, #3
    bc88:	0018      	movs	r0, r3
    bc8a:	f002 f9a5 	bl	dfd8 <_ZN6SERCOM22prepareCommandBitsWireEh>
  }   

  return 0;
    bc8e:	2300      	movs	r3, #0
}
    bc90:	0018      	movs	r0, r3
    bc92:	46bd      	mov	sp, r7
    bc94:	b003      	add	sp, #12
    bc96:	bd90      	pop	{r4, r7, pc}

0000bc98 <_ZN7TwoWire15endTransmissionEv>:

uint8_t TwoWire::endTransmission()
{
    bc98:	b580      	push	{r7, lr}
    bc9a:	b082      	sub	sp, #8
    bc9c:	af00      	add	r7, sp, #0
    bc9e:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
    bca0:	687b      	ldr	r3, [r7, #4]
    bca2:	2101      	movs	r1, #1
    bca4:	0018      	movs	r0, r3
    bca6:	f7ff ff9c 	bl	bbe2 <_ZN7TwoWire15endTransmissionEb>
    bcaa:	0003      	movs	r3, r0
}
    bcac:	0018      	movs	r0, r3
    bcae:	46bd      	mov	sp, r7
    bcb0:	b002      	add	sp, #8
    bcb2:	bd80      	pop	{r7, pc}

0000bcb4 <_ZN7TwoWire5writeEh>:

size_t TwoWire::write(uint8_t ucData)
{
    bcb4:	b580      	push	{r7, lr}
    bcb6:	b082      	sub	sp, #8
    bcb8:	af00      	add	r7, sp, #0
    bcba:	6078      	str	r0, [r7, #4]
    bcbc:	000a      	movs	r2, r1
    bcbe:	1cfb      	adds	r3, r7, #3
    bcc0:	701a      	strb	r2, [r3, #0]
  // No writing, without begun transmission or a full buffer
  if ( !transmissionBegun || txBuffer.isFull() )
    bcc2:	687b      	ldr	r3, [r7, #4]
    bcc4:	7d9b      	ldrb	r3, [r3, #22]
    bcc6:	2201      	movs	r2, #1
    bcc8:	4053      	eors	r3, r2
    bcca:	b2db      	uxtb	r3, r3
    bccc:	2b00      	cmp	r3, #0
    bcce:	d107      	bne.n	bce0 <_ZN7TwoWire5writeEh+0x2c>
    bcd0:	687b      	ldr	r3, [r7, #4]
    bcd2:	3321      	adds	r3, #33	; 0x21
    bcd4:	33ff      	adds	r3, #255	; 0xff
    bcd6:	0018      	movs	r0, r3
    bcd8:	f000 fa03 	bl	c0e2 <_ZN11RingBufferNILi256EE6isFullEv>
    bcdc:	1e03      	subs	r3, r0, #0
    bcde:	d001      	beq.n	bce4 <_ZN7TwoWire5writeEh+0x30>
    bce0:	2301      	movs	r3, #1
    bce2:	e000      	b.n	bce6 <_ZN7TwoWire5writeEh+0x32>
    bce4:	2300      	movs	r3, #0
    bce6:	2b00      	cmp	r3, #0
    bce8:	d001      	beq.n	bcee <_ZN7TwoWire5writeEh+0x3a>
  {
    return 0 ;
    bcea:	2300      	movs	r3, #0
    bcec:	e00a      	b.n	bd04 <_ZN7TwoWire5writeEh+0x50>
  }

  txBuffer.store_char( ucData ) ;
    bcee:	687b      	ldr	r3, [r7, #4]
    bcf0:	3321      	adds	r3, #33	; 0x21
    bcf2:	33ff      	adds	r3, #255	; 0xff
    bcf4:	001a      	movs	r2, r3
    bcf6:	1cfb      	adds	r3, r7, #3
    bcf8:	781b      	ldrb	r3, [r3, #0]
    bcfa:	0019      	movs	r1, r3
    bcfc:	0010      	movs	r0, r2
    bcfe:	f000 f975 	bl	bfec <_ZN11RingBufferNILi256EE10store_charEh>

  return 1 ;
    bd02:	2301      	movs	r3, #1
}
    bd04:	0018      	movs	r0, r3
    bd06:	46bd      	mov	sp, r7
    bd08:	b002      	add	sp, #8
    bd0a:	bd80      	pop	{r7, pc}

0000bd0c <_ZN7TwoWire5writeEPKhj>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    bd0c:	b580      	push	{r7, lr}
    bd0e:	b086      	sub	sp, #24
    bd10:	af00      	add	r7, sp, #0
    bd12:	60f8      	str	r0, [r7, #12]
    bd14:	60b9      	str	r1, [r7, #8]
    bd16:	607a      	str	r2, [r7, #4]
  //Try to store all data
  for(size_t i = 0; i < quantity; ++i)
    bd18:	2300      	movs	r3, #0
    bd1a:	617b      	str	r3, [r7, #20]
    bd1c:	697a      	ldr	r2, [r7, #20]
    bd1e:	687b      	ldr	r3, [r7, #4]
    bd20:	429a      	cmp	r2, r3
    bd22:	d215      	bcs.n	bd50 <_ZN7TwoWire5writeEPKhj+0x44>
  {
    //Return the number of data stored, when the buffer is full (if write return 0)
    if(!write(data[i]))
    bd24:	68fb      	ldr	r3, [r7, #12]
    bd26:	681b      	ldr	r3, [r3, #0]
    bd28:	681b      	ldr	r3, [r3, #0]
    bd2a:	68b9      	ldr	r1, [r7, #8]
    bd2c:	697a      	ldr	r2, [r7, #20]
    bd2e:	188a      	adds	r2, r1, r2
    bd30:	7811      	ldrb	r1, [r2, #0]
    bd32:	68fa      	ldr	r2, [r7, #12]
    bd34:	0010      	movs	r0, r2
    bd36:	4798      	blx	r3
    bd38:	0003      	movs	r3, r0
    bd3a:	425a      	negs	r2, r3
    bd3c:	4153      	adcs	r3, r2
    bd3e:	b2db      	uxtb	r3, r3
    bd40:	2b00      	cmp	r3, #0
    bd42:	d001      	beq.n	bd48 <_ZN7TwoWire5writeEPKhj+0x3c>
      return i;
    bd44:	697b      	ldr	r3, [r7, #20]
    bd46:	e004      	b.n	bd52 <_ZN7TwoWire5writeEPKhj+0x46>
  for(size_t i = 0; i < quantity; ++i)
    bd48:	697b      	ldr	r3, [r7, #20]
    bd4a:	3301      	adds	r3, #1
    bd4c:	617b      	str	r3, [r7, #20]
    bd4e:	e7e5      	b.n	bd1c <_ZN7TwoWire5writeEPKhj+0x10>
  }

  //All data stored
  return quantity;
    bd50:	687b      	ldr	r3, [r7, #4]
}
    bd52:	0018      	movs	r0, r3
    bd54:	46bd      	mov	sp, r7
    bd56:	b006      	add	sp, #24
    bd58:	bd80      	pop	{r7, pc}

0000bd5a <_ZN7TwoWire9availableEv>:

int TwoWire::available(void)
{
    bd5a:	b580      	push	{r7, lr}
    bd5c:	b082      	sub	sp, #8
    bd5e:	af00      	add	r7, sp, #0
    bd60:	6078      	str	r0, [r7, #4]
  return rxBuffer.available();
    bd62:	687b      	ldr	r3, [r7, #4]
    bd64:	3318      	adds	r3, #24
    bd66:	0018      	movs	r0, r3
    bd68:	f000 f96e 	bl	c048 <_ZN11RingBufferNILi256EE9availableEv>
    bd6c:	0003      	movs	r3, r0
}
    bd6e:	0018      	movs	r0, r3
    bd70:	46bd      	mov	sp, r7
    bd72:	b002      	add	sp, #8
    bd74:	bd80      	pop	{r7, pc}

0000bd76 <_ZN7TwoWire4readEv>:

int TwoWire::read(void)
{
    bd76:	b580      	push	{r7, lr}
    bd78:	b082      	sub	sp, #8
    bd7a:	af00      	add	r7, sp, #0
    bd7c:	6078      	str	r0, [r7, #4]
  return rxBuffer.read_char();
    bd7e:	687b      	ldr	r3, [r7, #4]
    bd80:	3318      	adds	r3, #24
    bd82:	0018      	movs	r0, r3
    bd84:	f000 f97a 	bl	c07c <_ZN11RingBufferNILi256EE9read_charEv>
    bd88:	0003      	movs	r3, r0
}
    bd8a:	0018      	movs	r0, r3
    bd8c:	46bd      	mov	sp, r7
    bd8e:	b002      	add	sp, #8
    bd90:	bd80      	pop	{r7, pc}

0000bd92 <_ZN7TwoWire4peekEv>:

int TwoWire::peek(void)
{
    bd92:	b580      	push	{r7, lr}
    bd94:	b082      	sub	sp, #8
    bd96:	af00      	add	r7, sp, #0
    bd98:	6078      	str	r0, [r7, #4]
  return rxBuffer.peek();
    bd9a:	687b      	ldr	r3, [r7, #4]
    bd9c:	3318      	adds	r3, #24
    bd9e:	0018      	movs	r0, r3
    bda0:	f000 f9b9 	bl	c116 <_ZN11RingBufferNILi256EE4peekEv>
    bda4:	0003      	movs	r3, r0
}
    bda6:	0018      	movs	r0, r3
    bda8:	46bd      	mov	sp, r7
    bdaa:	b002      	add	sp, #8
    bdac:	bd80      	pop	{r7, pc}

0000bdae <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    bdae:	b580      	push	{r7, lr}
    bdb0:	b082      	sub	sp, #8
    bdb2:	af00      	add	r7, sp, #0
    bdb4:	6078      	str	r0, [r7, #4]
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
    bdb6:	46c0      	nop			; (mov r8, r8)
    bdb8:	46bd      	mov	sp, r7
    bdba:	b002      	add	sp, #8
    bdbc:	bd80      	pop	{r7, pc}

0000bdbe <_ZN7TwoWire9onServiceEv>:
{
  onRequestCallback = function;
}

void TwoWire::onService(void)
{
    bdbe:	b590      	push	{r4, r7, lr}
    bdc0:	b085      	sub	sp, #20
    bdc2:	af00      	add	r7, sp, #0
    bdc4:	6078      	str	r0, [r7, #4]
  if ( sercom->isSlaveWIRE() )
    bdc6:	687b      	ldr	r3, [r7, #4]
    bdc8:	691b      	ldr	r3, [r3, #16]
    bdca:	0018      	movs	r0, r3
    bdcc:	f002 fa27 	bl	e21e <_ZN6SERCOM11isSlaveWIREEv>
    bdd0:	1e03      	subs	r3, r0, #0
    bdd2:	d100      	bne.n	bdd6 <_ZN7TwoWire9onServiceEv+0x18>
    bdd4:	e0d3      	b.n	bf7e <_ZN7TwoWire9onServiceEv+0x1c0>
  {
    if(sercom->isStopDetectedWIRE() || 
    bdd6:	687b      	ldr	r3, [r7, #4]
    bdd8:	691b      	ldr	r3, [r3, #16]
    bdda:	0018      	movs	r0, r3
    bddc:	f002 fa63 	bl	e2a6 <_ZN6SERCOM18isStopDetectedWIREEv>
    bde0:	1e03      	subs	r3, r0, #0
    bde2:	d119      	bne.n	be18 <_ZN7TwoWire9onServiceEv+0x5a>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    bde4:	687b      	ldr	r3, [r7, #4]
    bde6:	691b      	ldr	r3, [r3, #16]
    bde8:	0018      	movs	r0, r3
    bdea:	f002 fa78 	bl	e2de <_ZN6SERCOM14isAddressMatchEv>
    bdee:	1e03      	subs	r3, r0, #0
    if(sercom->isStopDetectedWIRE() || 
    bdf0:	d014      	beq.n	be1c <_ZN7TwoWire9onServiceEv+0x5e>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    bdf2:	687b      	ldr	r3, [r7, #4]
    bdf4:	691b      	ldr	r3, [r3, #16]
    bdf6:	0018      	movs	r0, r3
    bdf8:	f002 fa63 	bl	e2c2 <_ZN6SERCOM21isRestartDetectedWIREEv>
    bdfc:	1e03      	subs	r3, r0, #0
    bdfe:	d00d      	beq.n	be1c <_ZN7TwoWire9onServiceEv+0x5e>
    be00:	687b      	ldr	r3, [r7, #4]
    be02:	691b      	ldr	r3, [r3, #16]
    be04:	0018      	movs	r0, r3
    be06:	f002 fa78 	bl	e2fa <_ZN6SERCOM25isMasterReadOperationWIREEv>
    be0a:	0003      	movs	r3, r0
    be0c:	001a      	movs	r2, r3
    be0e:	2301      	movs	r3, #1
    be10:	4053      	eors	r3, r2
    be12:	b2db      	uxtb	r3, r3
    be14:	2b00      	cmp	r3, #0
    be16:	d001      	beq.n	be1c <_ZN7TwoWire9onServiceEv+0x5e>
    if(sercom->isStopDetectedWIRE() || 
    be18:	2301      	movs	r3, #1
    be1a:	e000      	b.n	be1e <_ZN7TwoWire9onServiceEv+0x60>
    be1c:	2300      	movs	r3, #0
    be1e:	2b00      	cmp	r3, #0
    be20:	d024      	beq.n	be6c <_ZN7TwoWire9onServiceEv+0xae>
    {
      sercom->prepareAckBitWIRE();
    be22:	687b      	ldr	r3, [r7, #4]
    be24:	691b      	ldr	r3, [r3, #16]
    be26:	0018      	movs	r0, r3
    be28:	f002 f8b8 	bl	df9c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    be2c:	687b      	ldr	r3, [r7, #4]
    be2e:	691b      	ldr	r3, [r3, #16]
    be30:	2103      	movs	r1, #3
    be32:	0018      	movs	r0, r3
    be34:	f002 f8d0 	bl	dfd8 <_ZN6SERCOM22prepareCommandBitsWireEh>

      //Calling onReceiveCallback, if exists
      if(onReceiveCallback)
    be38:	687a      	ldr	r2, [r7, #4]
    be3a:	238c      	movs	r3, #140	; 0x8c
    be3c:	009b      	lsls	r3, r3, #2
    be3e:	58d3      	ldr	r3, [r2, r3]
    be40:	2b00      	cmp	r3, #0
    be42:	d00d      	beq.n	be60 <_ZN7TwoWire9onServiceEv+0xa2>
      {
        onReceiveCallback(available());
    be44:	687a      	ldr	r2, [r7, #4]
    be46:	238c      	movs	r3, #140	; 0x8c
    be48:	009b      	lsls	r3, r3, #2
    be4a:	58d4      	ldr	r4, [r2, r3]
    be4c:	687b      	ldr	r3, [r7, #4]
    be4e:	681b      	ldr	r3, [r3, #0]
    be50:	3310      	adds	r3, #16
    be52:	681b      	ldr	r3, [r3, #0]
    be54:	687a      	ldr	r2, [r7, #4]
    be56:	0010      	movs	r0, r2
    be58:	4798      	blx	r3
    be5a:	0003      	movs	r3, r0
    be5c:	0018      	movs	r0, r3
    be5e:	47a0      	blx	r4
      }
      
      rxBuffer.clear();
    be60:	687b      	ldr	r3, [r7, #4]
    be62:	3318      	adds	r3, #24
    be64:	0018      	movs	r0, r3
    be66:	f000 f8af 	bl	bfc8 <_ZN11RingBufferNILi256EE5clearEv>

        sercom->prepareCommandBitsWire(0x03);
      }
    }
  }
}
    be6a:	e088      	b.n	bf7e <_ZN7TwoWire9onServiceEv+0x1c0>
    else if(sercom->isAddressMatch())  //Address Match
    be6c:	687b      	ldr	r3, [r7, #4]
    be6e:	691b      	ldr	r3, [r3, #16]
    be70:	0018      	movs	r0, r3
    be72:	f002 fa34 	bl	e2de <_ZN6SERCOM14isAddressMatchEv>
    be76:	1e03      	subs	r3, r0, #0
    be78:	d026      	beq.n	bec8 <_ZN7TwoWire9onServiceEv+0x10a>
      sercom->prepareAckBitWIRE();
    be7a:	687b      	ldr	r3, [r7, #4]
    be7c:	691b      	ldr	r3, [r3, #16]
    be7e:	0018      	movs	r0, r3
    be80:	f002 f88c 	bl	df9c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    be84:	687b      	ldr	r3, [r7, #4]
    be86:	691b      	ldr	r3, [r3, #16]
    be88:	2103      	movs	r1, #3
    be8a:	0018      	movs	r0, r3
    be8c:	f002 f8a4 	bl	dfd8 <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
    be90:	687b      	ldr	r3, [r7, #4]
    be92:	691b      	ldr	r3, [r3, #16]
    be94:	0018      	movs	r0, r3
    be96:	f002 fa30 	bl	e2fa <_ZN6SERCOM25isMasterReadOperationWIREEv>
    be9a:	1e03      	subs	r3, r0, #0
    be9c:	d06f      	beq.n	bf7e <_ZN7TwoWire9onServiceEv+0x1c0>
        txBuffer.clear();
    be9e:	687b      	ldr	r3, [r7, #4]
    bea0:	3321      	adds	r3, #33	; 0x21
    bea2:	33ff      	adds	r3, #255	; 0xff
    bea4:	0018      	movs	r0, r3
    bea6:	f000 f88f 	bl	bfc8 <_ZN11RingBufferNILi256EE5clearEv>
        transmissionBegun = true;
    beaa:	687b      	ldr	r3, [r7, #4]
    beac:	2201      	movs	r2, #1
    beae:	759a      	strb	r2, [r3, #22]
        if(onRequestCallback)
    beb0:	687a      	ldr	r2, [r7, #4]
    beb2:	238b      	movs	r3, #139	; 0x8b
    beb4:	009b      	lsls	r3, r3, #2
    beb6:	58d3      	ldr	r3, [r2, r3]
    beb8:	2b00      	cmp	r3, #0
    beba:	d060      	beq.n	bf7e <_ZN7TwoWire9onServiceEv+0x1c0>
          onRequestCallback();
    bebc:	687a      	ldr	r2, [r7, #4]
    bebe:	238b      	movs	r3, #139	; 0x8b
    bec0:	009b      	lsls	r3, r3, #2
    bec2:	58d3      	ldr	r3, [r2, r3]
    bec4:	4798      	blx	r3
}
    bec6:	e05a      	b.n	bf7e <_ZN7TwoWire9onServiceEv+0x1c0>
    else if(sercom->isDataReadyWIRE())
    bec8:	687b      	ldr	r3, [r7, #4]
    beca:	691b      	ldr	r3, [r3, #16]
    becc:	0018      	movs	r0, r3
    bece:	f002 f9dc 	bl	e28a <_ZN6SERCOM15isDataReadyWIREEv>
    bed2:	1e03      	subs	r3, r0, #0
    bed4:	d053      	beq.n	bf7e <_ZN7TwoWire9onServiceEv+0x1c0>
      if (sercom->isMasterReadOperationWIRE())
    bed6:	687b      	ldr	r3, [r7, #4]
    bed8:	691b      	ldr	r3, [r3, #16]
    beda:	0018      	movs	r0, r3
    bedc:	f002 fa0d 	bl	e2fa <_ZN6SERCOM25isMasterReadOperationWIREEv>
    bee0:	1e03      	subs	r3, r0, #0
    bee2:	d027      	beq.n	bf34 <_ZN7TwoWire9onServiceEv+0x176>
        uint8_t c = 0xff;
    bee4:	230f      	movs	r3, #15
    bee6:	18fb      	adds	r3, r7, r3
    bee8:	22ff      	movs	r2, #255	; 0xff
    beea:	701a      	strb	r2, [r3, #0]
        if( txBuffer.available() ) {
    beec:	687b      	ldr	r3, [r7, #4]
    beee:	3321      	adds	r3, #33	; 0x21
    bef0:	33ff      	adds	r3, #255	; 0xff
    bef2:	0018      	movs	r0, r3
    bef4:	f000 f8a8 	bl	c048 <_ZN11RingBufferNILi256EE9availableEv>
    bef8:	0003      	movs	r3, r0
    befa:	1e5a      	subs	r2, r3, #1
    befc:	4193      	sbcs	r3, r2
    befe:	b2db      	uxtb	r3, r3
    bf00:	2b00      	cmp	r3, #0
    bf02:	d009      	beq.n	bf18 <_ZN7TwoWire9onServiceEv+0x15a>
          c = txBuffer.read_char();
    bf04:	687b      	ldr	r3, [r7, #4]
    bf06:	3321      	adds	r3, #33	; 0x21
    bf08:	33ff      	adds	r3, #255	; 0xff
    bf0a:	0018      	movs	r0, r3
    bf0c:	f000 f8b6 	bl	c07c <_ZN11RingBufferNILi256EE9read_charEv>
    bf10:	0002      	movs	r2, r0
    bf12:	230f      	movs	r3, #15
    bf14:	18fb      	adds	r3, r7, r3
    bf16:	701a      	strb	r2, [r3, #0]
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
    bf18:	687b      	ldr	r3, [r7, #4]
    bf1a:	691a      	ldr	r2, [r3, #16]
    bf1c:	230f      	movs	r3, #15
    bf1e:	18fb      	adds	r3, r7, r3
    bf20:	781b      	ldrb	r3, [r3, #0]
    bf22:	0019      	movs	r1, r3
    bf24:	0010      	movs	r0, r2
    bf26:	f002 f93f 	bl	e1a8 <_ZN6SERCOM17sendDataSlaveWIREEh>
    bf2a:	0003      	movs	r3, r0
    bf2c:	001a      	movs	r2, r3
    bf2e:	687b      	ldr	r3, [r7, #4]
    bf30:	759a      	strb	r2, [r3, #22]
}
    bf32:	e024      	b.n	bf7e <_ZN7TwoWire9onServiceEv+0x1c0>
        if (rxBuffer.isFull()) {
    bf34:	687b      	ldr	r3, [r7, #4]
    bf36:	3318      	adds	r3, #24
    bf38:	0018      	movs	r0, r3
    bf3a:	f000 f8d2 	bl	c0e2 <_ZN11RingBufferNILi256EE6isFullEv>
    bf3e:	1e03      	subs	r3, r0, #0
    bf40:	d005      	beq.n	bf4e <_ZN7TwoWire9onServiceEv+0x190>
          sercom->prepareNackBitWIRE(); 
    bf42:	687b      	ldr	r3, [r7, #4]
    bf44:	691b      	ldr	r3, [r3, #16]
    bf46:	0018      	movs	r0, r3
    bf48:	f002 f80a 	bl	df60 <_ZN6SERCOM18prepareNackBitWIREEv>
    bf4c:	e011      	b.n	bf72 <_ZN7TwoWire9onServiceEv+0x1b4>
          rxBuffer.store_char(sercom->readDataWIRE());
    bf4e:	687b      	ldr	r3, [r7, #4]
    bf50:	3318      	adds	r3, #24
    bf52:	001c      	movs	r4, r3
    bf54:	687b      	ldr	r3, [r7, #4]
    bf56:	691b      	ldr	r3, [r3, #16]
    bf58:	0018      	movs	r0, r3
    bf5a:	f002 f9dc 	bl	e316 <_ZN6SERCOM12readDataWIREEv>
    bf5e:	0003      	movs	r3, r0
    bf60:	0019      	movs	r1, r3
    bf62:	0020      	movs	r0, r4
    bf64:	f000 f842 	bl	bfec <_ZN11RingBufferNILi256EE10store_charEh>
          sercom->prepareAckBitWIRE(); 
    bf68:	687b      	ldr	r3, [r7, #4]
    bf6a:	691b      	ldr	r3, [r3, #16]
    bf6c:	0018      	movs	r0, r3
    bf6e:	f002 f815 	bl	df9c <_ZN6SERCOM17prepareAckBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
    bf72:	687b      	ldr	r3, [r7, #4]
    bf74:	691b      	ldr	r3, [r3, #16]
    bf76:	2103      	movs	r1, #3
    bf78:	0018      	movs	r0, r3
    bf7a:	f002 f82d 	bl	dfd8 <_ZN6SERCOM22prepareCommandBitsWireEh>
}
    bf7e:	46c0      	nop			; (mov r8, r8)
    bf80:	46bd      	mov	sp, r7
    bf82:	b005      	add	sp, #20
    bf84:	bd90      	pop	{r4, r7, pc}
	...

0000bf88 <SERCOM3_Handler>:
    #define PERIPH_WIRE          sercom3
    #define WIRE_IT_HANDLER      SERCOM3_Handler
  #endif // PERIPH_WIRE
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);

  void WIRE_IT_HANDLER(void) {
    bf88:	b580      	push	{r7, lr}
    bf8a:	af00      	add	r7, sp, #0
    Wire.onService();
    bf8c:	4b03      	ldr	r3, [pc, #12]	; (bf9c <SERCOM3_Handler+0x14>)
    bf8e:	0018      	movs	r0, r3
    bf90:	f7ff ff15 	bl	bdbe <_ZN7TwoWire9onServiceEv>
  }
    bf94:	46c0      	nop			; (mov r8, r8)
    bf96:	46bd      	mov	sp, r7
    bf98:	bd80      	pop	{r7, pc}
    bf9a:	46c0      	nop			; (mov r8, r8)
    bf9c:	20000b8c 	.word	0x20000b8c

0000bfa0 <_ZN11RingBufferNILi256EEC1Ev>:
RingBufferN<N>::RingBufferN( void )
    bfa0:	b580      	push	{r7, lr}
    bfa2:	b082      	sub	sp, #8
    bfa4:	af00      	add	r7, sp, #0
    bfa6:	6078      	str	r0, [r7, #4]
    memset( _aucBuffer, 0, N ) ;
    bfa8:	6878      	ldr	r0, [r7, #4]
    bfaa:	2380      	movs	r3, #128	; 0x80
    bfac:	005b      	lsls	r3, r3, #1
    bfae:	001a      	movs	r2, r3
    bfb0:	2100      	movs	r1, #0
    bfb2:	f004 fc71 	bl	10898 <memset>
    clear();
    bfb6:	687b      	ldr	r3, [r7, #4]
    bfb8:	0018      	movs	r0, r3
    bfba:	f000 f805 	bl	bfc8 <_ZN11RingBufferNILi256EE5clearEv>
}
    bfbe:	687b      	ldr	r3, [r7, #4]
    bfc0:	0018      	movs	r0, r3
    bfc2:	46bd      	mov	sp, r7
    bfc4:	b002      	add	sp, #8
    bfc6:	bd80      	pop	{r7, pc}

0000bfc8 <_ZN11RingBufferNILi256EE5clearEv>:
void RingBufferN<N>::clear()
    bfc8:	b580      	push	{r7, lr}
    bfca:	b082      	sub	sp, #8
    bfcc:	af00      	add	r7, sp, #0
    bfce:	6078      	str	r0, [r7, #4]
  _iHead = 0;
    bfd0:	687a      	ldr	r2, [r7, #4]
    bfd2:	2380      	movs	r3, #128	; 0x80
    bfd4:	005b      	lsls	r3, r3, #1
    bfd6:	2100      	movs	r1, #0
    bfd8:	50d1      	str	r1, [r2, r3]
  _iTail = 0;
    bfda:	687a      	ldr	r2, [r7, #4]
    bfdc:	2382      	movs	r3, #130	; 0x82
    bfde:	005b      	lsls	r3, r3, #1
    bfe0:	2100      	movs	r1, #0
    bfe2:	50d1      	str	r1, [r2, r3]
}
    bfe4:	46c0      	nop			; (mov r8, r8)
    bfe6:	46bd      	mov	sp, r7
    bfe8:	b002      	add	sp, #8
    bfea:	bd80      	pop	{r7, pc}

0000bfec <_ZN11RingBufferNILi256EE10store_charEh>:
void RingBufferN<N>::store_char( uint8_t c )
    bfec:	b580      	push	{r7, lr}
    bfee:	b084      	sub	sp, #16
    bff0:	af00      	add	r7, sp, #0
    bff2:	6078      	str	r0, [r7, #4]
    bff4:	000a      	movs	r2, r1
    bff6:	1cfb      	adds	r3, r7, #3
    bff8:	701a      	strb	r2, [r3, #0]
  int i = nextIndex(_iHead);
    bffa:	687a      	ldr	r2, [r7, #4]
    bffc:	2380      	movs	r3, #128	; 0x80
    bffe:	005b      	lsls	r3, r3, #1
    c000:	58d2      	ldr	r2, [r2, r3]
    c002:	687b      	ldr	r3, [r7, #4]
    c004:	0011      	movs	r1, r2
    c006:	0018      	movs	r0, r3
    c008:	f000 f8a4 	bl	c154 <_ZN11RingBufferNILi256EE9nextIndexEi>
    c00c:	0003      	movs	r3, r0
    c00e:	60fb      	str	r3, [r7, #12]
  if ( i != _iTail )
    c010:	687a      	ldr	r2, [r7, #4]
    c012:	2382      	movs	r3, #130	; 0x82
    c014:	005b      	lsls	r3, r3, #1
    c016:	58d2      	ldr	r2, [r2, r3]
    c018:	68fb      	ldr	r3, [r7, #12]
    c01a:	1ad3      	subs	r3, r2, r3
    c01c:	1e5a      	subs	r2, r3, #1
    c01e:	4193      	sbcs	r3, r2
    c020:	b2db      	uxtb	r3, r3
    c022:	2b00      	cmp	r3, #0
    c024:	d00c      	beq.n	c040 <_ZN11RingBufferNILi256EE10store_charEh+0x54>
    _aucBuffer[_iHead] = c ;
    c026:	687a      	ldr	r2, [r7, #4]
    c028:	2380      	movs	r3, #128	; 0x80
    c02a:	005b      	lsls	r3, r3, #1
    c02c:	58d3      	ldr	r3, [r2, r3]
    c02e:	687a      	ldr	r2, [r7, #4]
    c030:	1cf9      	adds	r1, r7, #3
    c032:	7809      	ldrb	r1, [r1, #0]
    c034:	54d1      	strb	r1, [r2, r3]
    _iHead = i ;
    c036:	687a      	ldr	r2, [r7, #4]
    c038:	2380      	movs	r3, #128	; 0x80
    c03a:	005b      	lsls	r3, r3, #1
    c03c:	68f9      	ldr	r1, [r7, #12]
    c03e:	50d1      	str	r1, [r2, r3]
}
    c040:	46c0      	nop			; (mov r8, r8)
    c042:	46bd      	mov	sp, r7
    c044:	b004      	add	sp, #16
    c046:	bd80      	pop	{r7, pc}

0000c048 <_ZN11RingBufferNILi256EE9availableEv>:
int RingBufferN<N>::available()
    c048:	b580      	push	{r7, lr}
    c04a:	b084      	sub	sp, #16
    c04c:	af00      	add	r7, sp, #0
    c04e:	6078      	str	r0, [r7, #4]
  int delta = _iHead - _iTail;
    c050:	687a      	ldr	r2, [r7, #4]
    c052:	2380      	movs	r3, #128	; 0x80
    c054:	005b      	lsls	r3, r3, #1
    c056:	58d2      	ldr	r2, [r2, r3]
    c058:	6879      	ldr	r1, [r7, #4]
    c05a:	2382      	movs	r3, #130	; 0x82
    c05c:	005b      	lsls	r3, r3, #1
    c05e:	58cb      	ldr	r3, [r1, r3]
    c060:	1ad3      	subs	r3, r2, r3
    c062:	60fb      	str	r3, [r7, #12]
  if(delta < 0)
    c064:	68fb      	ldr	r3, [r7, #12]
    c066:	2b00      	cmp	r3, #0
    c068:	da03      	bge.n	c072 <_ZN11RingBufferNILi256EE9availableEv+0x2a>
    return N + delta;
    c06a:	68fb      	ldr	r3, [r7, #12]
    c06c:	3301      	adds	r3, #1
    c06e:	33ff      	adds	r3, #255	; 0xff
    c070:	e000      	b.n	c074 <_ZN11RingBufferNILi256EE9availableEv+0x2c>
    return delta;
    c072:	68fb      	ldr	r3, [r7, #12]
}
    c074:	0018      	movs	r0, r3
    c076:	46bd      	mov	sp, r7
    c078:	b004      	add	sp, #16
    c07a:	bd80      	pop	{r7, pc}

0000c07c <_ZN11RingBufferNILi256EE9read_charEv>:
int RingBufferN<N>::read_char()
    c07c:	b580      	push	{r7, lr}
    c07e:	b084      	sub	sp, #16
    c080:	af00      	add	r7, sp, #0
    c082:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    c084:	687a      	ldr	r2, [r7, #4]
    c086:	2382      	movs	r3, #130	; 0x82
    c088:	005b      	lsls	r3, r3, #1
    c08a:	58d2      	ldr	r2, [r2, r3]
    c08c:	6879      	ldr	r1, [r7, #4]
    c08e:	2380      	movs	r3, #128	; 0x80
    c090:	005b      	lsls	r3, r3, #1
    c092:	58cb      	ldr	r3, [r1, r3]
    c094:	1ad3      	subs	r3, r2, r3
    c096:	425a      	negs	r2, r3
    c098:	4153      	adcs	r3, r2
    c09a:	b2db      	uxtb	r3, r3
    c09c:	2b00      	cmp	r3, #0
    c09e:	d002      	beq.n	c0a6 <_ZN11RingBufferNILi256EE9read_charEv+0x2a>
    return -1;
    c0a0:	2301      	movs	r3, #1
    c0a2:	425b      	negs	r3, r3
    c0a4:	e019      	b.n	c0da <_ZN11RingBufferNILi256EE9read_charEv+0x5e>
  uint8_t value = _aucBuffer[_iTail];
    c0a6:	687a      	ldr	r2, [r7, #4]
    c0a8:	2382      	movs	r3, #130	; 0x82
    c0aa:	005b      	lsls	r3, r3, #1
    c0ac:	58d2      	ldr	r2, [r2, r3]
    c0ae:	230f      	movs	r3, #15
    c0b0:	18fb      	adds	r3, r7, r3
    c0b2:	6879      	ldr	r1, [r7, #4]
    c0b4:	5c8a      	ldrb	r2, [r1, r2]
    c0b6:	701a      	strb	r2, [r3, #0]
  _iTail = nextIndex(_iTail);
    c0b8:	687a      	ldr	r2, [r7, #4]
    c0ba:	2382      	movs	r3, #130	; 0x82
    c0bc:	005b      	lsls	r3, r3, #1
    c0be:	58d2      	ldr	r2, [r2, r3]
    c0c0:	687b      	ldr	r3, [r7, #4]
    c0c2:	0011      	movs	r1, r2
    c0c4:	0018      	movs	r0, r3
    c0c6:	f000 f845 	bl	c154 <_ZN11RingBufferNILi256EE9nextIndexEi>
    c0ca:	0001      	movs	r1, r0
    c0cc:	687a      	ldr	r2, [r7, #4]
    c0ce:	2382      	movs	r3, #130	; 0x82
    c0d0:	005b      	lsls	r3, r3, #1
    c0d2:	50d1      	str	r1, [r2, r3]
  return value;
    c0d4:	230f      	movs	r3, #15
    c0d6:	18fb      	adds	r3, r7, r3
    c0d8:	781b      	ldrb	r3, [r3, #0]
}
    c0da:	0018      	movs	r0, r3
    c0dc:	46bd      	mov	sp, r7
    c0de:	b004      	add	sp, #16
    c0e0:	bd80      	pop	{r7, pc}

0000c0e2 <_ZN11RingBufferNILi256EE6isFullEv>:
bool RingBufferN<N>::isFull()
    c0e2:	b580      	push	{r7, lr}
    c0e4:	b082      	sub	sp, #8
    c0e6:	af00      	add	r7, sp, #0
    c0e8:	6078      	str	r0, [r7, #4]
  return (nextIndex(_iHead) == _iTail);
    c0ea:	687a      	ldr	r2, [r7, #4]
    c0ec:	2380      	movs	r3, #128	; 0x80
    c0ee:	005b      	lsls	r3, r3, #1
    c0f0:	58d2      	ldr	r2, [r2, r3]
    c0f2:	687b      	ldr	r3, [r7, #4]
    c0f4:	0011      	movs	r1, r2
    c0f6:	0018      	movs	r0, r3
    c0f8:	f000 f82c 	bl	c154 <_ZN11RingBufferNILi256EE9nextIndexEi>
    c0fc:	0001      	movs	r1, r0
    c0fe:	687a      	ldr	r2, [r7, #4]
    c100:	2382      	movs	r3, #130	; 0x82
    c102:	005b      	lsls	r3, r3, #1
    c104:	58d3      	ldr	r3, [r2, r3]
    c106:	1acb      	subs	r3, r1, r3
    c108:	425a      	negs	r2, r3
    c10a:	4153      	adcs	r3, r2
    c10c:	b2db      	uxtb	r3, r3
}
    c10e:	0018      	movs	r0, r3
    c110:	46bd      	mov	sp, r7
    c112:	b002      	add	sp, #8
    c114:	bd80      	pop	{r7, pc}

0000c116 <_ZN11RingBufferNILi256EE4peekEv>:
int RingBufferN<N>::peek()
    c116:	b580      	push	{r7, lr}
    c118:	b082      	sub	sp, #8
    c11a:	af00      	add	r7, sp, #0
    c11c:	6078      	str	r0, [r7, #4]
  if(_iTail == _iHead)
    c11e:	687a      	ldr	r2, [r7, #4]
    c120:	2382      	movs	r3, #130	; 0x82
    c122:	005b      	lsls	r3, r3, #1
    c124:	58d2      	ldr	r2, [r2, r3]
    c126:	6879      	ldr	r1, [r7, #4]
    c128:	2380      	movs	r3, #128	; 0x80
    c12a:	005b      	lsls	r3, r3, #1
    c12c:	58cb      	ldr	r3, [r1, r3]
    c12e:	1ad3      	subs	r3, r2, r3
    c130:	425a      	negs	r2, r3
    c132:	4153      	adcs	r3, r2
    c134:	b2db      	uxtb	r3, r3
    c136:	2b00      	cmp	r3, #0
    c138:	d002      	beq.n	c140 <_ZN11RingBufferNILi256EE4peekEv+0x2a>
    return -1;
    c13a:	2301      	movs	r3, #1
    c13c:	425b      	negs	r3, r3
    c13e:	e005      	b.n	c14c <_ZN11RingBufferNILi256EE4peekEv+0x36>
  return _aucBuffer[_iTail];
    c140:	687a      	ldr	r2, [r7, #4]
    c142:	2382      	movs	r3, #130	; 0x82
    c144:	005b      	lsls	r3, r3, #1
    c146:	58d3      	ldr	r3, [r2, r3]
    c148:	687a      	ldr	r2, [r7, #4]
    c14a:	5cd3      	ldrb	r3, [r2, r3]
}
    c14c:	0018      	movs	r0, r3
    c14e:	46bd      	mov	sp, r7
    c150:	b002      	add	sp, #8
    c152:	bd80      	pop	{r7, pc}

0000c154 <_ZN11RingBufferNILi256EE9nextIndexEi>:
int RingBufferN<N>::nextIndex(int index)
    c154:	b580      	push	{r7, lr}
    c156:	b082      	sub	sp, #8
    c158:	af00      	add	r7, sp, #0
    c15a:	6078      	str	r0, [r7, #4]
    c15c:	6039      	str	r1, [r7, #0]
  return (uint32_t)(index + 1) % N;
    c15e:	683b      	ldr	r3, [r7, #0]
    c160:	3301      	adds	r3, #1
    c162:	22ff      	movs	r2, #255	; 0xff
    c164:	4013      	ands	r3, r2
}
    c166:	0018      	movs	r0, r3
    c168:	46bd      	mov	sp, r7
    c16a:	b002      	add	sp, #8
    c16c:	bd80      	pop	{r7, pc}
	...

0000c170 <_Z41__static_initialization_and_destruction_0ii>:
    c170:	b580      	push	{r7, lr}
    c172:	b082      	sub	sp, #8
    c174:	af00      	add	r7, sp, #0
    c176:	6078      	str	r0, [r7, #4]
    c178:	6039      	str	r1, [r7, #0]
    c17a:	687b      	ldr	r3, [r7, #4]
    c17c:	2b01      	cmp	r3, #1
    c17e:	d109      	bne.n	c194 <_Z41__static_initialization_and_destruction_0ii+0x24>
    c180:	683b      	ldr	r3, [r7, #0]
    c182:	4a06      	ldr	r2, [pc, #24]	; (c19c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    c184:	4293      	cmp	r3, r2
    c186:	d105      	bne.n	c194 <_Z41__static_initialization_and_destruction_0ii+0x24>
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
    c188:	4905      	ldr	r1, [pc, #20]	; (c1a0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    c18a:	4806      	ldr	r0, [pc, #24]	; (c1a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    c18c:	2311      	movs	r3, #17
    c18e:	2210      	movs	r2, #16
    c190:	f7ff fc1e 	bl	b9d0 <_ZN7TwoWireC1EP6SERCOMhh>
  }
    c194:	46c0      	nop			; (mov r8, r8)
    c196:	46bd      	mov	sp, r7
    c198:	b002      	add	sp, #8
    c19a:	bd80      	pop	{r7, pc}
    c19c:	0000ffff 	.word	0x0000ffff
    c1a0:	20000dcc 	.word	0x20000dcc
    c1a4:	20000b8c 	.word	0x20000b8c

0000c1a8 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
    c1a8:	b580      	push	{r7, lr}
    c1aa:	af00      	add	r7, sp, #0
    c1ac:	4b03      	ldr	r3, [pc, #12]	; (c1bc <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
    c1ae:	0019      	movs	r1, r3
    c1b0:	2001      	movs	r0, #1
    c1b2:	f7ff ffdd 	bl	c170 <_Z41__static_initialization_and_destruction_0ii>
    c1b6:	46bd      	mov	sp, r7
    c1b8:	bd80      	pop	{r7, pc}
    c1ba:	46c0      	nop			; (mov r8, r8)
    c1bc:	0000ffff 	.word	0x0000ffff

0000c1c0 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    c1c0:	b580      	push	{r7, lr}
    c1c2:	af00      	add	r7, sp, #0
  Serial1.IrqHandler();
    c1c4:	4b03      	ldr	r3, [pc, #12]	; (c1d4 <SERCOM0_Handler+0x14>)
    c1c6:	0018      	movs	r0, r3
    c1c8:	f7f7 fc76 	bl	3ab8 <_ZN4Uart10IrqHandlerEv>
}
    c1cc:	46c0      	nop			; (mov r8, r8)
    c1ce:	46bd      	mov	sp, r7
    c1d0:	bd80      	pop	{r7, pc}
    c1d2:	46c0      	nop			; (mov r8, r8)
    c1d4:	20000dd8 	.word	0x20000dd8

0000c1d8 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    c1d8:	b580      	push	{r7, lr}
    c1da:	af00      	add	r7, sp, #0
  Serial.IrqHandler();
    c1dc:	4b03      	ldr	r3, [pc, #12]	; (c1ec <SERCOM5_Handler+0x14>)
    c1de:	0018      	movs	r0, r3
    c1e0:	f7f7 fc6a 	bl	3ab8 <_ZN4Uart10IrqHandlerEv>
}
    c1e4:	46c0      	nop			; (mov r8, r8)
    c1e6:	46bd      	mov	sp, r7
    c1e8:	bd80      	pop	{r7, pc}
    c1ea:	46c0      	nop			; (mov r8, r8)
    c1ec:	20000e94 	.word	0x20000e94

0000c1f0 <_Z41__static_initialization_and_destruction_0ii>:
    c1f0:	b580      	push	{r7, lr}
    c1f2:	b084      	sub	sp, #16
    c1f4:	af02      	add	r7, sp, #8
    c1f6:	6078      	str	r0, [r7, #4]
    c1f8:	6039      	str	r1, [r7, #0]
    c1fa:	687b      	ldr	r3, [r7, #4]
    c1fc:	2b01      	cmp	r3, #1
    c1fe:	d147      	bne.n	c290 <_Z41__static_initialization_and_destruction_0ii+0xa0>
    c200:	683b      	ldr	r3, [r7, #0]
    c202:	4a25      	ldr	r2, [pc, #148]	; (c298 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    c204:	4293      	cmp	r3, r2
    c206:	d143      	bne.n	c290 <_Z41__static_initialization_and_destruction_0ii+0xa0>
SERCOM sercom0( SERCOM0 ) ;
    c208:	4a24      	ldr	r2, [pc, #144]	; (c29c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    c20a:	4b25      	ldr	r3, [pc, #148]	; (c2a0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    c20c:	0011      	movs	r1, r2
    c20e:	0018      	movs	r0, r3
    c210:	f001 fb32 	bl	d878 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    c214:	4a23      	ldr	r2, [pc, #140]	; (c2a4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    c216:	4b24      	ldr	r3, [pc, #144]	; (c2a8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    c218:	0011      	movs	r1, r2
    c21a:	0018      	movs	r0, r3
    c21c:	f001 fb2c 	bl	d878 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    c220:	4a22      	ldr	r2, [pc, #136]	; (c2ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    c222:	4b23      	ldr	r3, [pc, #140]	; (c2b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    c224:	0011      	movs	r1, r2
    c226:	0018      	movs	r0, r3
    c228:	f001 fb26 	bl	d878 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    c22c:	4a21      	ldr	r2, [pc, #132]	; (c2b4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    c22e:	4b22      	ldr	r3, [pc, #136]	; (c2b8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    c230:	0011      	movs	r1, r2
    c232:	0018      	movs	r0, r3
    c234:	f001 fb20 	bl	d878 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    c238:	4a20      	ldr	r2, [pc, #128]	; (c2bc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    c23a:	4b21      	ldr	r3, [pc, #132]	; (c2c0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    c23c:	0011      	movs	r1, r2
    c23e:	0018      	movs	r0, r3
    c240:	f001 fb1a 	bl	d878 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    c244:	4a1f      	ldr	r2, [pc, #124]	; (c2c4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    c246:	4b20      	ldr	r3, [pc, #128]	; (c2c8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    c248:	0011      	movs	r1, r2
    c24a:	0018      	movs	r0, r3
    c24c:	f001 fb14 	bl	d878 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    c250:	4913      	ldr	r1, [pc, #76]	; (c2a0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    c252:	481e      	ldr	r0, [pc, #120]	; (c2cc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    c254:	2301      	movs	r3, #1
    c256:	9301      	str	r3, [sp, #4]
    c258:	2303      	movs	r3, #3
    c25a:	9300      	str	r3, [sp, #0]
    c25c:	2301      	movs	r3, #1
    c25e:	2200      	movs	r2, #0
    c260:	f7f7 faa3 	bl	37aa <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    c264:	4a1a      	ldr	r2, [pc, #104]	; (c2d0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    c266:	491b      	ldr	r1, [pc, #108]	; (c2d4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    c268:	4b18      	ldr	r3, [pc, #96]	; (c2cc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    c26a:	0018      	movs	r0, r3
    c26c:	f002 fb36 	bl	e8dc <__aeabi_atexit>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    c270:	4915      	ldr	r1, [pc, #84]	; (c2c8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    c272:	4819      	ldr	r0, [pc, #100]	; (c2d8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    c274:	2301      	movs	r3, #1
    c276:	9301      	str	r3, [sp, #4]
    c278:	2303      	movs	r3, #3
    c27a:	9300      	str	r3, [sp, #0]
    c27c:	2323      	movs	r3, #35	; 0x23
    c27e:	2224      	movs	r2, #36	; 0x24
    c280:	f7f7 fa93 	bl	37aa <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    c284:	4a12      	ldr	r2, [pc, #72]	; (c2d0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    c286:	4913      	ldr	r1, [pc, #76]	; (c2d4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    c288:	4b13      	ldr	r3, [pc, #76]	; (c2d8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    c28a:	0018      	movs	r0, r3
    c28c:	f002 fb26 	bl	e8dc <__aeabi_atexit>
}
    c290:	46c0      	nop			; (mov r8, r8)
    c292:	46bd      	mov	sp, r7
    c294:	b002      	add	sp, #8
    c296:	bd80      	pop	{r7, pc}
    c298:	0000ffff 	.word	0x0000ffff
    c29c:	42000800 	.word	0x42000800
    c2a0:	20000dc0 	.word	0x20000dc0
    c2a4:	42000c00 	.word	0x42000c00
    c2a8:	20000dc4 	.word	0x20000dc4
    c2ac:	42001000 	.word	0x42001000
    c2b0:	20000dc8 	.word	0x20000dc8
    c2b4:	42001400 	.word	0x42001400
    c2b8:	20000dcc 	.word	0x20000dcc
    c2bc:	42001800 	.word	0x42001800
    c2c0:	20000dd0 	.word	0x20000dd0
    c2c4:	42001c00 	.word	0x42001c00
    c2c8:	20000dd4 	.word	0x20000dd4
    c2cc:	20000dd8 	.word	0x20000dd8
    c2d0:	20000000 	.word	0x20000000
    c2d4:	00003f95 	.word	0x00003f95
    c2d8:	20000e94 	.word	0x20000e94

0000c2dc <_GLOBAL__sub_I_g_APinDescription>:
    c2dc:	b580      	push	{r7, lr}
    c2de:	af00      	add	r7, sp, #0
    c2e0:	4b03      	ldr	r3, [pc, #12]	; (c2f0 <_GLOBAL__sub_I_g_APinDescription+0x14>)
    c2e2:	0019      	movs	r1, r3
    c2e4:	2001      	movs	r0, #1
    c2e6:	f7ff ff83 	bl	c1f0 <_Z41__static_initialization_and_destruction_0ii>
    c2ea:	46bd      	mov	sp, r7
    c2ec:	bd80      	pop	{r7, pc}
    c2ee:	46c0      	nop			; (mov r8, r8)
    c2f0:	0000ffff 	.word	0x0000ffff

0000c2f4 <_ZN12Adafruit_GFXC1Ess>:

#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
    c2f4:	b580      	push	{r7, lr}
    c2f6:	b082      	sub	sp, #8
    c2f8:	af00      	add	r7, sp, #0
    c2fa:	6078      	str	r0, [r7, #4]
    c2fc:	0008      	movs	r0, r1
    c2fe:	0011      	movs	r1, r2
    c300:	1cbb      	adds	r3, r7, #2
    c302:	1c02      	adds	r2, r0, #0
    c304:	801a      	strh	r2, [r3, #0]
    c306:	003b      	movs	r3, r7
    c308:	1c0a      	adds	r2, r1, #0
    c30a:	801a      	strh	r2, [r3, #0]
WIDTH(w), HEIGHT(h)
    c30c:	687b      	ldr	r3, [r7, #4]
    c30e:	0018      	movs	r0, r3
    c310:	f7f7 f98e 	bl	3630 <_ZN5PrintC1Ev>
    c314:	4a1c      	ldr	r2, [pc, #112]	; (c388 <_ZN12Adafruit_GFXC1Ess+0x94>)
    c316:	687b      	ldr	r3, [r7, #4]
    c318:	601a      	str	r2, [r3, #0]
    c31a:	687b      	ldr	r3, [r7, #4]
    c31c:	1cba      	adds	r2, r7, #2
    c31e:	8812      	ldrh	r2, [r2, #0]
    c320:	811a      	strh	r2, [r3, #8]
    c322:	687b      	ldr	r3, [r7, #4]
    c324:	003a      	movs	r2, r7
    c326:	8812      	ldrh	r2, [r2, #0]
    c328:	815a      	strh	r2, [r3, #10]
{
    _width    = WIDTH;
    c32a:	687b      	ldr	r3, [r7, #4]
    c32c:	2208      	movs	r2, #8
    c32e:	5e9a      	ldrsh	r2, [r3, r2]
    c330:	687b      	ldr	r3, [r7, #4]
    c332:	819a      	strh	r2, [r3, #12]
    _height   = HEIGHT;
    c334:	687b      	ldr	r3, [r7, #4]
    c336:	220a      	movs	r2, #10
    c338:	5e9a      	ldrsh	r2, [r3, r2]
    c33a:	687b      	ldr	r3, [r7, #4]
    c33c:	81da      	strh	r2, [r3, #14]
    rotation  = 0;
    c33e:	687b      	ldr	r3, [r7, #4]
    c340:	2200      	movs	r2, #0
    c342:	765a      	strb	r2, [r3, #25]
    cursor_y  = cursor_x    = 0;
    c344:	687b      	ldr	r3, [r7, #4]
    c346:	2200      	movs	r2, #0
    c348:	821a      	strh	r2, [r3, #16]
    c34a:	687b      	ldr	r3, [r7, #4]
    c34c:	2210      	movs	r2, #16
    c34e:	5e9a      	ldrsh	r2, [r3, r2]
    c350:	687b      	ldr	r3, [r7, #4]
    c352:	825a      	strh	r2, [r3, #18]
    textsize  = 1;
    c354:	687b      	ldr	r3, [r7, #4]
    c356:	2201      	movs	r2, #1
    c358:	761a      	strb	r2, [r3, #24]
    textcolor = textbgcolor = 0xFFFF;
    c35a:	687b      	ldr	r3, [r7, #4]
    c35c:	2201      	movs	r2, #1
    c35e:	4252      	negs	r2, r2
    c360:	82da      	strh	r2, [r3, #22]
    c362:	687b      	ldr	r3, [r7, #4]
    c364:	8ada      	ldrh	r2, [r3, #22]
    c366:	687b      	ldr	r3, [r7, #4]
    c368:	829a      	strh	r2, [r3, #20]
    wrap      = true;
    c36a:	687b      	ldr	r3, [r7, #4]
    c36c:	2201      	movs	r2, #1
    c36e:	769a      	strb	r2, [r3, #26]
    _cp437    = false;
    c370:	687b      	ldr	r3, [r7, #4]
    c372:	2200      	movs	r2, #0
    c374:	76da      	strb	r2, [r3, #27]
    gfxFont   = NULL;
    c376:	687b      	ldr	r3, [r7, #4]
    c378:	2200      	movs	r2, #0
    c37a:	61da      	str	r2, [r3, #28]
}
    c37c:	687b      	ldr	r3, [r7, #4]
    c37e:	0018      	movs	r0, r3
    c380:	46bd      	mov	sp, r7
    c382:	b002      	add	sp, #8
    c384:	bd80      	pop	{r7, pc}
    c386:	46c0      	nop			; (mov r8, r8)
    c388:	000140a4 	.word	0x000140a4

0000c38c <_ZN12Adafruit_GFX9writeLineEsssst>:

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    c38c:	b5b0      	push	{r4, r5, r7, lr}
    c38e:	b08a      	sub	sp, #40	; 0x28
    c390:	af00      	add	r7, sp, #0
    c392:	60f8      	str	r0, [r7, #12]
    c394:	000c      	movs	r4, r1
    c396:	0010      	movs	r0, r2
    c398:	0019      	movs	r1, r3
    c39a:	230a      	movs	r3, #10
    c39c:	18fb      	adds	r3, r7, r3
    c39e:	1c22      	adds	r2, r4, #0
    c3a0:	801a      	strh	r2, [r3, #0]
    c3a2:	2308      	movs	r3, #8
    c3a4:	18fb      	adds	r3, r7, r3
    c3a6:	1c02      	adds	r2, r0, #0
    c3a8:	801a      	strh	r2, [r3, #0]
    c3aa:	1dbb      	adds	r3, r7, #6
    c3ac:	1c0a      	adds	r2, r1, #0
    c3ae:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    c3b0:	2338      	movs	r3, #56	; 0x38
    c3b2:	18fb      	adds	r3, r7, r3
    c3b4:	2200      	movs	r2, #0
    c3b6:	5e9a      	ldrsh	r2, [r3, r2]
    c3b8:	2308      	movs	r3, #8
    c3ba:	18fb      	adds	r3, r7, r3
    c3bc:	2100      	movs	r1, #0
    c3be:	5e5b      	ldrsh	r3, [r3, r1]
    c3c0:	1ad3      	subs	r3, r2, r3
    c3c2:	17d9      	asrs	r1, r3, #31
    c3c4:	185a      	adds	r2, r3, r1
    c3c6:	404a      	eors	r2, r1
    c3c8:	1dbb      	adds	r3, r7, #6
    c3ca:	2100      	movs	r1, #0
    c3cc:	5e59      	ldrsh	r1, [r3, r1]
    c3ce:	230a      	movs	r3, #10
    c3d0:	18fb      	adds	r3, r7, r3
    c3d2:	2000      	movs	r0, #0
    c3d4:	5e1b      	ldrsh	r3, [r3, r0]
    c3d6:	1acb      	subs	r3, r1, r3
    c3d8:	17d9      	asrs	r1, r3, #31
    c3da:	185b      	adds	r3, r3, r1
    c3dc:	404b      	eors	r3, r1
    c3de:	2101      	movs	r1, #1
    c3e0:	429a      	cmp	r2, r3
    c3e2:	dc01      	bgt.n	c3e8 <_ZN12Adafruit_GFX9writeLineEsssst+0x5c>
    c3e4:	2300      	movs	r3, #0
    c3e6:	1c19      	adds	r1, r3, #0
    c3e8:	b2ca      	uxtb	r2, r1
    c3ea:	2322      	movs	r3, #34	; 0x22
    c3ec:	18fb      	adds	r3, r7, r3
    c3ee:	801a      	strh	r2, [r3, #0]
    if (steep) {
    c3f0:	2322      	movs	r3, #34	; 0x22
    c3f2:	18fb      	adds	r3, r7, r3
    c3f4:	2200      	movs	r2, #0
    c3f6:	5e9b      	ldrsh	r3, [r3, r2]
    c3f8:	2b00      	cmp	r3, #0
    c3fa:	d021      	beq.n	c440 <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
        _swap_int16_t(x0, y0);
    c3fc:	2320      	movs	r3, #32
    c3fe:	18fb      	adds	r3, r7, r3
    c400:	220a      	movs	r2, #10
    c402:	18ba      	adds	r2, r7, r2
    c404:	8812      	ldrh	r2, [r2, #0]
    c406:	801a      	strh	r2, [r3, #0]
    c408:	230a      	movs	r3, #10
    c40a:	18fb      	adds	r3, r7, r3
    c40c:	2208      	movs	r2, #8
    c40e:	18ba      	adds	r2, r7, r2
    c410:	8812      	ldrh	r2, [r2, #0]
    c412:	801a      	strh	r2, [r3, #0]
    c414:	2308      	movs	r3, #8
    c416:	18fb      	adds	r3, r7, r3
    c418:	2220      	movs	r2, #32
    c41a:	18ba      	adds	r2, r7, r2
    c41c:	8812      	ldrh	r2, [r2, #0]
    c41e:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
    c420:	231e      	movs	r3, #30
    c422:	18fb      	adds	r3, r7, r3
    c424:	1dba      	adds	r2, r7, #6
    c426:	8812      	ldrh	r2, [r2, #0]
    c428:	801a      	strh	r2, [r3, #0]
    c42a:	1dbb      	adds	r3, r7, #6
    c42c:	2238      	movs	r2, #56	; 0x38
    c42e:	18ba      	adds	r2, r7, r2
    c430:	8812      	ldrh	r2, [r2, #0]
    c432:	801a      	strh	r2, [r3, #0]
    c434:	2338      	movs	r3, #56	; 0x38
    c436:	18fa      	adds	r2, r7, r3
    c438:	231e      	movs	r3, #30
    c43a:	18fb      	adds	r3, r7, r3
    c43c:	881b      	ldrh	r3, [r3, #0]
    c43e:	8013      	strh	r3, [r2, #0]
    }

    if (x0 > x1) {
    c440:	230a      	movs	r3, #10
    c442:	18fa      	adds	r2, r7, r3
    c444:	1dbb      	adds	r3, r7, #6
    c446:	2100      	movs	r1, #0
    c448:	5e52      	ldrsh	r2, [r2, r1]
    c44a:	2100      	movs	r1, #0
    c44c:	5e5b      	ldrsh	r3, [r3, r1]
    c44e:	429a      	cmp	r2, r3
    c450:	dd21      	ble.n	c496 <_ZN12Adafruit_GFX9writeLineEsssst+0x10a>
        _swap_int16_t(x0, x1);
    c452:	231c      	movs	r3, #28
    c454:	18fb      	adds	r3, r7, r3
    c456:	220a      	movs	r2, #10
    c458:	18ba      	adds	r2, r7, r2
    c45a:	8812      	ldrh	r2, [r2, #0]
    c45c:	801a      	strh	r2, [r3, #0]
    c45e:	230a      	movs	r3, #10
    c460:	18fb      	adds	r3, r7, r3
    c462:	1dba      	adds	r2, r7, #6
    c464:	8812      	ldrh	r2, [r2, #0]
    c466:	801a      	strh	r2, [r3, #0]
    c468:	1dbb      	adds	r3, r7, #6
    c46a:	221c      	movs	r2, #28
    c46c:	18ba      	adds	r2, r7, r2
    c46e:	8812      	ldrh	r2, [r2, #0]
    c470:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
    c472:	231a      	movs	r3, #26
    c474:	18fb      	adds	r3, r7, r3
    c476:	2208      	movs	r2, #8
    c478:	18ba      	adds	r2, r7, r2
    c47a:	8812      	ldrh	r2, [r2, #0]
    c47c:	801a      	strh	r2, [r3, #0]
    c47e:	2308      	movs	r3, #8
    c480:	18fb      	adds	r3, r7, r3
    c482:	2238      	movs	r2, #56	; 0x38
    c484:	18ba      	adds	r2, r7, r2
    c486:	8812      	ldrh	r2, [r2, #0]
    c488:	801a      	strh	r2, [r3, #0]
    c48a:	2338      	movs	r3, #56	; 0x38
    c48c:	18fa      	adds	r2, r7, r3
    c48e:	231a      	movs	r3, #26
    c490:	18fb      	adds	r3, r7, r3
    c492:	881b      	ldrh	r3, [r3, #0]
    c494:	8013      	strh	r3, [r2, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
    c496:	1dbb      	adds	r3, r7, #6
    c498:	881a      	ldrh	r2, [r3, #0]
    c49a:	230a      	movs	r3, #10
    c49c:	18fb      	adds	r3, r7, r3
    c49e:	881b      	ldrh	r3, [r3, #0]
    c4a0:	1ad3      	subs	r3, r2, r3
    c4a2:	b29a      	uxth	r2, r3
    c4a4:	2318      	movs	r3, #24
    c4a6:	18fb      	adds	r3, r7, r3
    c4a8:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
    c4aa:	2338      	movs	r3, #56	; 0x38
    c4ac:	18fb      	adds	r3, r7, r3
    c4ae:	2200      	movs	r2, #0
    c4b0:	5e9a      	ldrsh	r2, [r3, r2]
    c4b2:	2308      	movs	r3, #8
    c4b4:	18fb      	adds	r3, r7, r3
    c4b6:	2100      	movs	r1, #0
    c4b8:	5e5b      	ldrsh	r3, [r3, r1]
    c4ba:	1ad3      	subs	r3, r2, r3
    c4bc:	17d9      	asrs	r1, r3, #31
    c4be:	185a      	adds	r2, r3, r1
    c4c0:	404a      	eors	r2, r1
    c4c2:	2316      	movs	r3, #22
    c4c4:	18fb      	adds	r3, r7, r3
    c4c6:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
    c4c8:	2326      	movs	r3, #38	; 0x26
    c4ca:	18fa      	adds	r2, r7, r3
    c4cc:	2318      	movs	r3, #24
    c4ce:	18fb      	adds	r3, r7, r3
    c4d0:	2100      	movs	r1, #0
    c4d2:	5e5b      	ldrsh	r3, [r3, r1]
    c4d4:	2b00      	cmp	r3, #0
    c4d6:	da00      	bge.n	c4da <_ZN12Adafruit_GFX9writeLineEsssst+0x14e>
    c4d8:	3301      	adds	r3, #1
    c4da:	105b      	asrs	r3, r3, #1
    c4dc:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
    c4de:	2308      	movs	r3, #8
    c4e0:	18fb      	adds	r3, r7, r3
    c4e2:	2238      	movs	r2, #56	; 0x38
    c4e4:	18b9      	adds	r1, r7, r2
    c4e6:	2200      	movs	r2, #0
    c4e8:	5e9a      	ldrsh	r2, [r3, r2]
    c4ea:	2300      	movs	r3, #0
    c4ec:	5ecb      	ldrsh	r3, [r1, r3]
    c4ee:	429a      	cmp	r2, r3
    c4f0:	da04      	bge.n	c4fc <_ZN12Adafruit_GFX9writeLineEsssst+0x170>
        ystep = 1;
    c4f2:	2324      	movs	r3, #36	; 0x24
    c4f4:	18fb      	adds	r3, r7, r3
    c4f6:	2201      	movs	r2, #1
    c4f8:	801a      	strh	r2, [r3, #0]
    c4fa:	e004      	b.n	c506 <_ZN12Adafruit_GFX9writeLineEsssst+0x17a>
    } else {
        ystep = -1;
    c4fc:	2324      	movs	r3, #36	; 0x24
    c4fe:	18fb      	adds	r3, r7, r3
    c500:	2201      	movs	r2, #1
    c502:	4252      	negs	r2, r2
    c504:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
    c506:	230a      	movs	r3, #10
    c508:	18fa      	adds	r2, r7, r3
    c50a:	1dbb      	adds	r3, r7, #6
    c50c:	2100      	movs	r1, #0
    c50e:	5e52      	ldrsh	r2, [r2, r1]
    c510:	2100      	movs	r1, #0
    c512:	5e5b      	ldrsh	r3, [r3, r1]
    c514:	429a      	cmp	r2, r3
    c516:	dc62      	bgt.n	c5de <_ZN12Adafruit_GFX9writeLineEsssst+0x252>
        if (steep) {
    c518:	2322      	movs	r3, #34	; 0x22
    c51a:	18fb      	adds	r3, r7, r3
    c51c:	2200      	movs	r2, #0
    c51e:	5e9b      	ldrsh	r3, [r3, r2]
    c520:	2b00      	cmp	r3, #0
    c522:	d012      	beq.n	c54a <_ZN12Adafruit_GFX9writeLineEsssst+0x1be>
            writePixel(y0, x0, color);
    c524:	68fb      	ldr	r3, [r7, #12]
    c526:	681b      	ldr	r3, [r3, #0]
    c528:	3318      	adds	r3, #24
    c52a:	681c      	ldr	r4, [r3, #0]
    c52c:	233c      	movs	r3, #60	; 0x3c
    c52e:	18fb      	adds	r3, r7, r3
    c530:	881d      	ldrh	r5, [r3, #0]
    c532:	230a      	movs	r3, #10
    c534:	18fb      	adds	r3, r7, r3
    c536:	2200      	movs	r2, #0
    c538:	5e9a      	ldrsh	r2, [r3, r2]
    c53a:	2308      	movs	r3, #8
    c53c:	18fb      	adds	r3, r7, r3
    c53e:	2100      	movs	r1, #0
    c540:	5e59      	ldrsh	r1, [r3, r1]
    c542:	68f8      	ldr	r0, [r7, #12]
    c544:	002b      	movs	r3, r5
    c546:	47a0      	blx	r4
    c548:	e011      	b.n	c56e <_ZN12Adafruit_GFX9writeLineEsssst+0x1e2>
        } else {
            writePixel(x0, y0, color);
    c54a:	68fb      	ldr	r3, [r7, #12]
    c54c:	681b      	ldr	r3, [r3, #0]
    c54e:	3318      	adds	r3, #24
    c550:	681c      	ldr	r4, [r3, #0]
    c552:	233c      	movs	r3, #60	; 0x3c
    c554:	18fb      	adds	r3, r7, r3
    c556:	881d      	ldrh	r5, [r3, #0]
    c558:	2308      	movs	r3, #8
    c55a:	18fb      	adds	r3, r7, r3
    c55c:	2200      	movs	r2, #0
    c55e:	5e9a      	ldrsh	r2, [r3, r2]
    c560:	230a      	movs	r3, #10
    c562:	18fb      	adds	r3, r7, r3
    c564:	2100      	movs	r1, #0
    c566:	5e59      	ldrsh	r1, [r3, r1]
    c568:	68f8      	ldr	r0, [r7, #12]
    c56a:	002b      	movs	r3, r5
    c56c:	47a0      	blx	r4
        }
        err -= dy;
    c56e:	2326      	movs	r3, #38	; 0x26
    c570:	18fb      	adds	r3, r7, r3
    c572:	881a      	ldrh	r2, [r3, #0]
    c574:	2316      	movs	r3, #22
    c576:	18fb      	adds	r3, r7, r3
    c578:	881b      	ldrh	r3, [r3, #0]
    c57a:	1ad3      	subs	r3, r2, r3
    c57c:	b29a      	uxth	r2, r3
    c57e:	2326      	movs	r3, #38	; 0x26
    c580:	18fb      	adds	r3, r7, r3
    c582:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
    c584:	2326      	movs	r3, #38	; 0x26
    c586:	18fb      	adds	r3, r7, r3
    c588:	2200      	movs	r2, #0
    c58a:	5e9b      	ldrsh	r3, [r3, r2]
    c58c:	2b00      	cmp	r3, #0
    c58e:	da15      	bge.n	c5bc <_ZN12Adafruit_GFX9writeLineEsssst+0x230>
            y0 += ystep;
    c590:	2308      	movs	r3, #8
    c592:	18fb      	adds	r3, r7, r3
    c594:	881a      	ldrh	r2, [r3, #0]
    c596:	2324      	movs	r3, #36	; 0x24
    c598:	18fb      	adds	r3, r7, r3
    c59a:	881b      	ldrh	r3, [r3, #0]
    c59c:	18d3      	adds	r3, r2, r3
    c59e:	b29a      	uxth	r2, r3
    c5a0:	2308      	movs	r3, #8
    c5a2:	18fb      	adds	r3, r7, r3
    c5a4:	801a      	strh	r2, [r3, #0]
            err += dx;
    c5a6:	2326      	movs	r3, #38	; 0x26
    c5a8:	18fb      	adds	r3, r7, r3
    c5aa:	881a      	ldrh	r2, [r3, #0]
    c5ac:	2318      	movs	r3, #24
    c5ae:	18fb      	adds	r3, r7, r3
    c5b0:	881b      	ldrh	r3, [r3, #0]
    c5b2:	18d3      	adds	r3, r2, r3
    c5b4:	b29a      	uxth	r2, r3
    c5b6:	2326      	movs	r3, #38	; 0x26
    c5b8:	18fb      	adds	r3, r7, r3
    c5ba:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
    c5bc:	230a      	movs	r3, #10
    c5be:	18fb      	adds	r3, r7, r3
    c5c0:	2200      	movs	r2, #0
    c5c2:	5e9b      	ldrsh	r3, [r3, r2]
    c5c4:	b29b      	uxth	r3, r3
    c5c6:	3301      	adds	r3, #1
    c5c8:	b29a      	uxth	r2, r3
    c5ca:	230a      	movs	r3, #10
    c5cc:	18fb      	adds	r3, r7, r3
    c5ce:	801a      	strh	r2, [r3, #0]
    c5d0:	2324      	movs	r3, #36	; 0x24
    c5d2:	18fb      	adds	r3, r7, r3
    c5d4:	2224      	movs	r2, #36	; 0x24
    c5d6:	18ba      	adds	r2, r7, r2
    c5d8:	8812      	ldrh	r2, [r2, #0]
    c5da:	801a      	strh	r2, [r3, #0]
    c5dc:	e793      	b.n	c506 <_ZN12Adafruit_GFX9writeLineEsssst+0x17a>
        }
    }
}
    c5de:	46c0      	nop			; (mov r8, r8)
    c5e0:	46bd      	mov	sp, r7
    c5e2:	b00a      	add	sp, #40	; 0x28
    c5e4:	bdb0      	pop	{r4, r5, r7, pc}

0000c5e6 <_ZN12Adafruit_GFX10startWriteEv>:

void Adafruit_GFX::startWrite(){
    c5e6:	b580      	push	{r7, lr}
    c5e8:	b082      	sub	sp, #8
    c5ea:	af00      	add	r7, sp, #0
    c5ec:	6078      	str	r0, [r7, #4]
    // Overwrite in subclasses if desired!
}
    c5ee:	46c0      	nop			; (mov r8, r8)
    c5f0:	46bd      	mov	sp, r7
    c5f2:	b002      	add	sp, #8
    c5f4:	bd80      	pop	{r7, pc}

0000c5f6 <_ZN12Adafruit_GFX10writePixelEsst>:

void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    c5f6:	b5b0      	push	{r4, r5, r7, lr}
    c5f8:	b084      	sub	sp, #16
    c5fa:	af00      	add	r7, sp, #0
    c5fc:	60f8      	str	r0, [r7, #12]
    c5fe:	000c      	movs	r4, r1
    c600:	0010      	movs	r0, r2
    c602:	0019      	movs	r1, r3
    c604:	230a      	movs	r3, #10
    c606:	18fb      	adds	r3, r7, r3
    c608:	1c22      	adds	r2, r4, #0
    c60a:	801a      	strh	r2, [r3, #0]
    c60c:	2308      	movs	r3, #8
    c60e:	18fb      	adds	r3, r7, r3
    c610:	1c02      	adds	r2, r0, #0
    c612:	801a      	strh	r2, [r3, #0]
    c614:	1dbb      	adds	r3, r7, #6
    c616:	1c0a      	adds	r2, r1, #0
    c618:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    c61a:	68fb      	ldr	r3, [r7, #12]
    c61c:	681b      	ldr	r3, [r3, #0]
    c61e:	3310      	adds	r3, #16
    c620:	681c      	ldr	r4, [r3, #0]
    c622:	1dbb      	adds	r3, r7, #6
    c624:	881d      	ldrh	r5, [r3, #0]
    c626:	2308      	movs	r3, #8
    c628:	18fb      	adds	r3, r7, r3
    c62a:	2200      	movs	r2, #0
    c62c:	5e9a      	ldrsh	r2, [r3, r2]
    c62e:	230a      	movs	r3, #10
    c630:	18fb      	adds	r3, r7, r3
    c632:	2100      	movs	r1, #0
    c634:	5e59      	ldrsh	r1, [r3, r1]
    c636:	68f8      	ldr	r0, [r7, #12]
    c638:	002b      	movs	r3, r5
    c63a:	47a0      	blx	r4
}
    c63c:	46c0      	nop			; (mov r8, r8)
    c63e:	46bd      	mov	sp, r7
    c640:	b004      	add	sp, #16
    c642:	bdb0      	pop	{r4, r5, r7, pc}

0000c644 <_ZN12Adafruit_GFX14writeFastVLineEssst>:

// (x,y) is topmost point; if unsure, calling function
// should sort endpoints or call writeLine() instead
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    c644:	b5b0      	push	{r4, r5, r7, lr}
    c646:	b086      	sub	sp, #24
    c648:	af02      	add	r7, sp, #8
    c64a:	60f8      	str	r0, [r7, #12]
    c64c:	000c      	movs	r4, r1
    c64e:	0010      	movs	r0, r2
    c650:	0019      	movs	r1, r3
    c652:	230a      	movs	r3, #10
    c654:	18fb      	adds	r3, r7, r3
    c656:	1c22      	adds	r2, r4, #0
    c658:	801a      	strh	r2, [r3, #0]
    c65a:	2308      	movs	r3, #8
    c65c:	18fb      	adds	r3, r7, r3
    c65e:	1c02      	adds	r2, r0, #0
    c660:	801a      	strh	r2, [r3, #0]
    c662:	1dbb      	adds	r3, r7, #6
    c664:	1c0a      	adds	r2, r1, #0
    c666:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    c668:	68fb      	ldr	r3, [r7, #12]
    c66a:	681b      	ldr	r3, [r3, #0]
    c66c:	3338      	adds	r3, #56	; 0x38
    c66e:	681c      	ldr	r4, [r3, #0]
    c670:	1dbb      	adds	r3, r7, #6
    c672:	2500      	movs	r5, #0
    c674:	5f5d      	ldrsh	r5, [r3, r5]
    c676:	2308      	movs	r3, #8
    c678:	18fb      	adds	r3, r7, r3
    c67a:	2200      	movs	r2, #0
    c67c:	5e9a      	ldrsh	r2, [r3, r2]
    c67e:	230a      	movs	r3, #10
    c680:	18fb      	adds	r3, r7, r3
    c682:	2100      	movs	r1, #0
    c684:	5e59      	ldrsh	r1, [r3, r1]
    c686:	68f8      	ldr	r0, [r7, #12]
    c688:	2320      	movs	r3, #32
    c68a:	18fb      	adds	r3, r7, r3
    c68c:	881b      	ldrh	r3, [r3, #0]
    c68e:	9300      	str	r3, [sp, #0]
    c690:	002b      	movs	r3, r5
    c692:	47a0      	blx	r4
}
    c694:	46c0      	nop			; (mov r8, r8)
    c696:	46bd      	mov	sp, r7
    c698:	b004      	add	sp, #16
    c69a:	bdb0      	pop	{r4, r5, r7, pc}

0000c69c <_ZN12Adafruit_GFX14writeFastHLineEssst>:

// (x,y) is leftmost point; if unsure, calling function
// should sort endpoints or call writeLine() instead
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    c69c:	b5b0      	push	{r4, r5, r7, lr}
    c69e:	b086      	sub	sp, #24
    c6a0:	af02      	add	r7, sp, #8
    c6a2:	60f8      	str	r0, [r7, #12]
    c6a4:	000c      	movs	r4, r1
    c6a6:	0010      	movs	r0, r2
    c6a8:	0019      	movs	r1, r3
    c6aa:	230a      	movs	r3, #10
    c6ac:	18fb      	adds	r3, r7, r3
    c6ae:	1c22      	adds	r2, r4, #0
    c6b0:	801a      	strh	r2, [r3, #0]
    c6b2:	2308      	movs	r3, #8
    c6b4:	18fb      	adds	r3, r7, r3
    c6b6:	1c02      	adds	r2, r0, #0
    c6b8:	801a      	strh	r2, [r3, #0]
    c6ba:	1dbb      	adds	r3, r7, #6
    c6bc:	1c0a      	adds	r2, r1, #0
    c6be:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    c6c0:	68fb      	ldr	r3, [r7, #12]
    c6c2:	681b      	ldr	r3, [r3, #0]
    c6c4:	333c      	adds	r3, #60	; 0x3c
    c6c6:	681c      	ldr	r4, [r3, #0]
    c6c8:	1dbb      	adds	r3, r7, #6
    c6ca:	2500      	movs	r5, #0
    c6cc:	5f5d      	ldrsh	r5, [r3, r5]
    c6ce:	2308      	movs	r3, #8
    c6d0:	18fb      	adds	r3, r7, r3
    c6d2:	2200      	movs	r2, #0
    c6d4:	5e9a      	ldrsh	r2, [r3, r2]
    c6d6:	230a      	movs	r3, #10
    c6d8:	18fb      	adds	r3, r7, r3
    c6da:	2100      	movs	r1, #0
    c6dc:	5e59      	ldrsh	r1, [r3, r1]
    c6de:	68f8      	ldr	r0, [r7, #12]
    c6e0:	2320      	movs	r3, #32
    c6e2:	18fb      	adds	r3, r7, r3
    c6e4:	881b      	ldrh	r3, [r3, #0]
    c6e6:	9300      	str	r3, [sp, #0]
    c6e8:	002b      	movs	r3, r5
    c6ea:	47a0      	blx	r4
}
    c6ec:	46c0      	nop			; (mov r8, r8)
    c6ee:	46bd      	mov	sp, r7
    c6f0:	b004      	add	sp, #16
    c6f2:	bdb0      	pop	{r4, r5, r7, pc}

0000c6f4 <_ZN12Adafruit_GFX13writeFillRectEsssst>:

void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    c6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6f6:	b087      	sub	sp, #28
    c6f8:	af02      	add	r7, sp, #8
    c6fa:	60f8      	str	r0, [r7, #12]
    c6fc:	000c      	movs	r4, r1
    c6fe:	0010      	movs	r0, r2
    c700:	0019      	movs	r1, r3
    c702:	230a      	movs	r3, #10
    c704:	18fb      	adds	r3, r7, r3
    c706:	1c22      	adds	r2, r4, #0
    c708:	801a      	strh	r2, [r3, #0]
    c70a:	2308      	movs	r3, #8
    c70c:	18fb      	adds	r3, r7, r3
    c70e:	1c02      	adds	r2, r0, #0
    c710:	801a      	strh	r2, [r3, #0]
    c712:	1dbb      	adds	r3, r7, #6
    c714:	1c0a      	adds	r2, r1, #0
    c716:	801a      	strh	r2, [r3, #0]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    c718:	68fb      	ldr	r3, [r7, #12]
    c71a:	681b      	ldr	r3, [r3, #0]
    c71c:	3340      	adds	r3, #64	; 0x40
    c71e:	681c      	ldr	r4, [r3, #0]
    c720:	1dbb      	adds	r3, r7, #6
    c722:	2500      	movs	r5, #0
    c724:	5f5d      	ldrsh	r5, [r3, r5]
    c726:	2308      	movs	r3, #8
    c728:	18fb      	adds	r3, r7, r3
    c72a:	2200      	movs	r2, #0
    c72c:	5e9a      	ldrsh	r2, [r3, r2]
    c72e:	230a      	movs	r3, #10
    c730:	18fb      	adds	r3, r7, r3
    c732:	2100      	movs	r1, #0
    c734:	5e59      	ldrsh	r1, [r3, r1]
    c736:	68f8      	ldr	r0, [r7, #12]
    c738:	2324      	movs	r3, #36	; 0x24
    c73a:	2608      	movs	r6, #8
    c73c:	46b4      	mov	ip, r6
    c73e:	44bc      	add	ip, r7
    c740:	4463      	add	r3, ip
    c742:	881b      	ldrh	r3, [r3, #0]
    c744:	9301      	str	r3, [sp, #4]
    c746:	2320      	movs	r3, #32
    c748:	2608      	movs	r6, #8
    c74a:	46b4      	mov	ip, r6
    c74c:	44bc      	add	ip, r7
    c74e:	4463      	add	r3, ip
    c750:	2600      	movs	r6, #0
    c752:	5f9b      	ldrsh	r3, [r3, r6]
    c754:	9300      	str	r3, [sp, #0]
    c756:	002b      	movs	r3, r5
    c758:	47a0      	blx	r4
}
    c75a:	46c0      	nop			; (mov r8, r8)
    c75c:	46bd      	mov	sp, r7
    c75e:	b005      	add	sp, #20
    c760:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c762 <_ZN12Adafruit_GFX8endWriteEv>:

void Adafruit_GFX::endWrite(){
    c762:	b580      	push	{r7, lr}
    c764:	b082      	sub	sp, #8
    c766:	af00      	add	r7, sp, #0
    c768:	6078      	str	r0, [r7, #4]
    // Overwrite in subclasses if startWrite is defined!
}
    c76a:	46c0      	nop			; (mov r8, r8)
    c76c:	46bd      	mov	sp, r7
    c76e:	b002      	add	sp, #8
    c770:	bd80      	pop	{r7, pc}

0000c772 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

// (x,y) is topmost point; if unsure, calling function
// should sort endpoints or call drawLine() instead
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    c772:	b5f0      	push	{r4, r5, r6, r7, lr}
    c774:	b087      	sub	sp, #28
    c776:	af02      	add	r7, sp, #8
    c778:	60f8      	str	r0, [r7, #12]
    c77a:	000c      	movs	r4, r1
    c77c:	0010      	movs	r0, r2
    c77e:	0019      	movs	r1, r3
    c780:	230a      	movs	r3, #10
    c782:	18fb      	adds	r3, r7, r3
    c784:	1c22      	adds	r2, r4, #0
    c786:	801a      	strh	r2, [r3, #0]
    c788:	2308      	movs	r3, #8
    c78a:	18fb      	adds	r3, r7, r3
    c78c:	1c02      	adds	r2, r0, #0
    c78e:	801a      	strh	r2, [r3, #0]
    c790:	1dbb      	adds	r3, r7, #6
    c792:	1c0a      	adds	r2, r1, #0
    c794:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c796:	68fb      	ldr	r3, [r7, #12]
    c798:	681b      	ldr	r3, [r3, #0]
    c79a:	3314      	adds	r3, #20
    c79c:	681b      	ldr	r3, [r3, #0]
    c79e:	68fa      	ldr	r2, [r7, #12]
    c7a0:	0010      	movs	r0, r2
    c7a2:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
    c7a4:	68fb      	ldr	r3, [r7, #12]
    c7a6:	681b      	ldr	r3, [r3, #0]
    c7a8:	3328      	adds	r3, #40	; 0x28
    c7aa:	681c      	ldr	r4, [r3, #0]
    c7ac:	2308      	movs	r3, #8
    c7ae:	18fb      	adds	r3, r7, r3
    c7b0:	881a      	ldrh	r2, [r3, #0]
    c7b2:	1dbb      	adds	r3, r7, #6
    c7b4:	881b      	ldrh	r3, [r3, #0]
    c7b6:	18d3      	adds	r3, r2, r3
    c7b8:	b29b      	uxth	r3, r3
    c7ba:	3b01      	subs	r3, #1
    c7bc:	b29b      	uxth	r3, r3
    c7be:	b21b      	sxth	r3, r3
    c7c0:	220a      	movs	r2, #10
    c7c2:	18ba      	adds	r2, r7, r2
    c7c4:	2600      	movs	r6, #0
    c7c6:	5f96      	ldrsh	r6, [r2, r6]
    c7c8:	2208      	movs	r2, #8
    c7ca:	18ba      	adds	r2, r7, r2
    c7cc:	2500      	movs	r5, #0
    c7ce:	5f55      	ldrsh	r5, [r2, r5]
    c7d0:	220a      	movs	r2, #10
    c7d2:	18ba      	adds	r2, r7, r2
    c7d4:	2100      	movs	r1, #0
    c7d6:	5e51      	ldrsh	r1, [r2, r1]
    c7d8:	68f8      	ldr	r0, [r7, #12]
    c7da:	2228      	movs	r2, #40	; 0x28
    c7dc:	18ba      	adds	r2, r7, r2
    c7de:	8812      	ldrh	r2, [r2, #0]
    c7e0:	9201      	str	r2, [sp, #4]
    c7e2:	9300      	str	r3, [sp, #0]
    c7e4:	0033      	movs	r3, r6
    c7e6:	002a      	movs	r2, r5
    c7e8:	47a0      	blx	r4
    endWrite();
    c7ea:	68fb      	ldr	r3, [r7, #12]
    c7ec:	681b      	ldr	r3, [r3, #0]
    c7ee:	332c      	adds	r3, #44	; 0x2c
    c7f0:	681b      	ldr	r3, [r3, #0]
    c7f2:	68fa      	ldr	r2, [r7, #12]
    c7f4:	0010      	movs	r0, r2
    c7f6:	4798      	blx	r3
}
    c7f8:	46c0      	nop			; (mov r8, r8)
    c7fa:	46bd      	mov	sp, r7
    c7fc:	b005      	add	sp, #20
    c7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c800 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

// (x,y) is leftmost point; if unsure, calling function
// should sort endpoints or call drawLine() instead
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    c800:	b5f0      	push	{r4, r5, r6, r7, lr}
    c802:	b087      	sub	sp, #28
    c804:	af02      	add	r7, sp, #8
    c806:	60f8      	str	r0, [r7, #12]
    c808:	000c      	movs	r4, r1
    c80a:	0010      	movs	r0, r2
    c80c:	0019      	movs	r1, r3
    c80e:	230a      	movs	r3, #10
    c810:	18fb      	adds	r3, r7, r3
    c812:	1c22      	adds	r2, r4, #0
    c814:	801a      	strh	r2, [r3, #0]
    c816:	2308      	movs	r3, #8
    c818:	18fb      	adds	r3, r7, r3
    c81a:	1c02      	adds	r2, r0, #0
    c81c:	801a      	strh	r2, [r3, #0]
    c81e:	1dbb      	adds	r3, r7, #6
    c820:	1c0a      	adds	r2, r1, #0
    c822:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c824:	68fb      	ldr	r3, [r7, #12]
    c826:	681b      	ldr	r3, [r3, #0]
    c828:	3314      	adds	r3, #20
    c82a:	681b      	ldr	r3, [r3, #0]
    c82c:	68fa      	ldr	r2, [r7, #12]
    c82e:	0010      	movs	r0, r2
    c830:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
    c832:	68fb      	ldr	r3, [r7, #12]
    c834:	681b      	ldr	r3, [r3, #0]
    c836:	3328      	adds	r3, #40	; 0x28
    c838:	681c      	ldr	r4, [r3, #0]
    c83a:	230a      	movs	r3, #10
    c83c:	18fb      	adds	r3, r7, r3
    c83e:	881a      	ldrh	r2, [r3, #0]
    c840:	1dbb      	adds	r3, r7, #6
    c842:	881b      	ldrh	r3, [r3, #0]
    c844:	18d3      	adds	r3, r2, r3
    c846:	b29b      	uxth	r3, r3
    c848:	3b01      	subs	r3, #1
    c84a:	b29b      	uxth	r3, r3
    c84c:	b21d      	sxth	r5, r3
    c84e:	2308      	movs	r3, #8
    c850:	18fb      	adds	r3, r7, r3
    c852:	2200      	movs	r2, #0
    c854:	5e9a      	ldrsh	r2, [r3, r2]
    c856:	230a      	movs	r3, #10
    c858:	18fb      	adds	r3, r7, r3
    c85a:	2100      	movs	r1, #0
    c85c:	5e59      	ldrsh	r1, [r3, r1]
    c85e:	68f8      	ldr	r0, [r7, #12]
    c860:	2320      	movs	r3, #32
    c862:	2608      	movs	r6, #8
    c864:	46b4      	mov	ip, r6
    c866:	44bc      	add	ip, r7
    c868:	4463      	add	r3, ip
    c86a:	881b      	ldrh	r3, [r3, #0]
    c86c:	9301      	str	r3, [sp, #4]
    c86e:	2308      	movs	r3, #8
    c870:	18fb      	adds	r3, r7, r3
    c872:	2600      	movs	r6, #0
    c874:	5f9b      	ldrsh	r3, [r3, r6]
    c876:	9300      	str	r3, [sp, #0]
    c878:	002b      	movs	r3, r5
    c87a:	47a0      	blx	r4
    endWrite();
    c87c:	68fb      	ldr	r3, [r7, #12]
    c87e:	681b      	ldr	r3, [r3, #0]
    c880:	332c      	adds	r3, #44	; 0x2c
    c882:	681b      	ldr	r3, [r3, #0]
    c884:	68fa      	ldr	r2, [r7, #12]
    c886:	0010      	movs	r0, r2
    c888:	4798      	blx	r3
}
    c88a:	46c0      	nop			; (mov r8, r8)
    c88c:	46bd      	mov	sp, r7
    c88e:	b005      	add	sp, #20
    c890:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c892 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    c892:	b5b0      	push	{r4, r5, r7, lr}
    c894:	b088      	sub	sp, #32
    c896:	af02      	add	r7, sp, #8
    c898:	60f8      	str	r0, [r7, #12]
    c89a:	000c      	movs	r4, r1
    c89c:	0010      	movs	r0, r2
    c89e:	0019      	movs	r1, r3
    c8a0:	230a      	movs	r3, #10
    c8a2:	18fb      	adds	r3, r7, r3
    c8a4:	1c22      	adds	r2, r4, #0
    c8a6:	801a      	strh	r2, [r3, #0]
    c8a8:	2308      	movs	r3, #8
    c8aa:	18fb      	adds	r3, r7, r3
    c8ac:	1c02      	adds	r2, r0, #0
    c8ae:	801a      	strh	r2, [r3, #0]
    c8b0:	1dbb      	adds	r3, r7, #6
    c8b2:	1c0a      	adds	r2, r1, #0
    c8b4:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    startWrite();
    c8b6:	68fb      	ldr	r3, [r7, #12]
    c8b8:	681b      	ldr	r3, [r3, #0]
    c8ba:	3314      	adds	r3, #20
    c8bc:	681b      	ldr	r3, [r3, #0]
    c8be:	68fa      	ldr	r2, [r7, #12]
    c8c0:	0010      	movs	r0, r2
    c8c2:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
    c8c4:	2316      	movs	r3, #22
    c8c6:	18fb      	adds	r3, r7, r3
    c8c8:	220a      	movs	r2, #10
    c8ca:	18ba      	adds	r2, r7, r2
    c8cc:	8812      	ldrh	r2, [r2, #0]
    c8ce:	801a      	strh	r2, [r3, #0]
    c8d0:	2316      	movs	r3, #22
    c8d2:	18fb      	adds	r3, r7, r3
    c8d4:	2200      	movs	r2, #0
    c8d6:	5e9a      	ldrsh	r2, [r3, r2]
    c8d8:	230a      	movs	r3, #10
    c8da:	18fb      	adds	r3, r7, r3
    c8dc:	2100      	movs	r1, #0
    c8de:	5e59      	ldrsh	r1, [r3, r1]
    c8e0:	1dbb      	adds	r3, r7, #6
    c8e2:	2000      	movs	r0, #0
    c8e4:	5e1b      	ldrsh	r3, [r3, r0]
    c8e6:	18cb      	adds	r3, r1, r3
    c8e8:	429a      	cmp	r2, r3
    c8ea:	da21      	bge.n	c930 <_ZN12Adafruit_GFX8fillRectEsssst+0x9e>
        writeFastVLine(i, y, h, color);
    c8ec:	68fb      	ldr	r3, [r7, #12]
    c8ee:	681b      	ldr	r3, [r3, #0]
    c8f0:	3320      	adds	r3, #32
    c8f2:	681c      	ldr	r4, [r3, #0]
    c8f4:	2328      	movs	r3, #40	; 0x28
    c8f6:	18fb      	adds	r3, r7, r3
    c8f8:	2500      	movs	r5, #0
    c8fa:	5f5d      	ldrsh	r5, [r3, r5]
    c8fc:	2308      	movs	r3, #8
    c8fe:	18fb      	adds	r3, r7, r3
    c900:	2200      	movs	r2, #0
    c902:	5e9a      	ldrsh	r2, [r3, r2]
    c904:	2316      	movs	r3, #22
    c906:	18fb      	adds	r3, r7, r3
    c908:	2100      	movs	r1, #0
    c90a:	5e59      	ldrsh	r1, [r3, r1]
    c90c:	68f8      	ldr	r0, [r7, #12]
    c90e:	232c      	movs	r3, #44	; 0x2c
    c910:	18fb      	adds	r3, r7, r3
    c912:	881b      	ldrh	r3, [r3, #0]
    c914:	9300      	str	r3, [sp, #0]
    c916:	002b      	movs	r3, r5
    c918:	47a0      	blx	r4
    for (int16_t i=x; i<x+w; i++) {
    c91a:	2316      	movs	r3, #22
    c91c:	18fb      	adds	r3, r7, r3
    c91e:	2200      	movs	r2, #0
    c920:	5e9b      	ldrsh	r3, [r3, r2]
    c922:	b29b      	uxth	r3, r3
    c924:	3301      	adds	r3, #1
    c926:	b29a      	uxth	r2, r3
    c928:	2316      	movs	r3, #22
    c92a:	18fb      	adds	r3, r7, r3
    c92c:	801a      	strh	r2, [r3, #0]
    c92e:	e7cf      	b.n	c8d0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3e>
    }
    endWrite();
    c930:	68fb      	ldr	r3, [r7, #12]
    c932:	681b      	ldr	r3, [r3, #0]
    c934:	332c      	adds	r3, #44	; 0x2c
    c936:	681b      	ldr	r3, [r3, #0]
    c938:	68fa      	ldr	r2, [r7, #12]
    c93a:	0010      	movs	r0, r2
    c93c:	4798      	blx	r3
}
    c93e:	46c0      	nop			; (mov r8, r8)
    c940:	46bd      	mov	sp, r7
    c942:	b006      	add	sp, #24
    c944:	bdb0      	pop	{r4, r5, r7, pc}

0000c946 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
    c946:	b590      	push	{r4, r7, lr}
    c948:	b085      	sub	sp, #20
    c94a:	af02      	add	r7, sp, #8
    c94c:	6078      	str	r0, [r7, #4]
    c94e:	000a      	movs	r2, r1
    c950:	1cbb      	adds	r3, r7, #2
    c952:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    fillRect(0, 0, _width, _height, color);
    c954:	687b      	ldr	r3, [r7, #4]
    c956:	681b      	ldr	r3, [r3, #0]
    c958:	3340      	adds	r3, #64	; 0x40
    c95a:	681c      	ldr	r4, [r3, #0]
    c95c:	687b      	ldr	r3, [r7, #4]
    c95e:	210c      	movs	r1, #12
    c960:	5e59      	ldrsh	r1, [r3, r1]
    c962:	687b      	ldr	r3, [r7, #4]
    c964:	220e      	movs	r2, #14
    c966:	5e9b      	ldrsh	r3, [r3, r2]
    c968:	6878      	ldr	r0, [r7, #4]
    c96a:	1cba      	adds	r2, r7, #2
    c96c:	8812      	ldrh	r2, [r2, #0]
    c96e:	9201      	str	r2, [sp, #4]
    c970:	9300      	str	r3, [sp, #0]
    c972:	000b      	movs	r3, r1
    c974:	2200      	movs	r2, #0
    c976:	2100      	movs	r1, #0
    c978:	47a0      	blx	r4
}
    c97a:	46c0      	nop			; (mov r8, r8)
    c97c:	46bd      	mov	sp, r7
    c97e:	b003      	add	sp, #12
    c980:	bd90      	pop	{r4, r7, pc}

0000c982 <_ZN12Adafruit_GFX8drawLineEsssst>:

void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    c982:	b5f0      	push	{r4, r5, r6, r7, lr}
    c984:	b089      	sub	sp, #36	; 0x24
    c986:	af02      	add	r7, sp, #8
    c988:	60f8      	str	r0, [r7, #12]
    c98a:	000c      	movs	r4, r1
    c98c:	0010      	movs	r0, r2
    c98e:	0019      	movs	r1, r3
    c990:	230a      	movs	r3, #10
    c992:	18fb      	adds	r3, r7, r3
    c994:	1c22      	adds	r2, r4, #0
    c996:	801a      	strh	r2, [r3, #0]
    c998:	2308      	movs	r3, #8
    c99a:	18fb      	adds	r3, r7, r3
    c99c:	1c02      	adds	r2, r0, #0
    c99e:	801a      	strh	r2, [r3, #0]
    c9a0:	1dbb      	adds	r3, r7, #6
    c9a2:	1c0a      	adds	r2, r1, #0
    c9a4:	801a      	strh	r2, [r3, #0]
    // Update in subclasses if desired!
    if(x0 == x1){
    c9a6:	230a      	movs	r3, #10
    c9a8:	18fa      	adds	r2, r7, r3
    c9aa:	1dbb      	adds	r3, r7, #6
    c9ac:	2100      	movs	r1, #0
    c9ae:	5e52      	ldrsh	r2, [r2, r1]
    c9b0:	2100      	movs	r1, #0
    c9b2:	5e5b      	ldrsh	r3, [r3, r1]
    c9b4:	429a      	cmp	r2, r3
    c9b6:	d147      	bne.n	ca48 <_ZN12Adafruit_GFX8drawLineEsssst+0xc6>
        if(y0 > y1) _swap_int16_t(y0, y1);
    c9b8:	2308      	movs	r3, #8
    c9ba:	18fb      	adds	r3, r7, r3
    c9bc:	2228      	movs	r2, #40	; 0x28
    c9be:	2108      	movs	r1, #8
    c9c0:	1879      	adds	r1, r7, r1
    c9c2:	1889      	adds	r1, r1, r2
    c9c4:	2200      	movs	r2, #0
    c9c6:	5e9a      	ldrsh	r2, [r3, r2]
    c9c8:	2300      	movs	r3, #0
    c9ca:	5ecb      	ldrsh	r3, [r1, r3]
    c9cc:	429a      	cmp	r2, r3
    c9ce:	dd16      	ble.n	c9fe <_ZN12Adafruit_GFX8drawLineEsssst+0x7c>
    c9d0:	2316      	movs	r3, #22
    c9d2:	18fb      	adds	r3, r7, r3
    c9d4:	2208      	movs	r2, #8
    c9d6:	18ba      	adds	r2, r7, r2
    c9d8:	8812      	ldrh	r2, [r2, #0]
    c9da:	801a      	strh	r2, [r3, #0]
    c9dc:	2308      	movs	r3, #8
    c9de:	18fb      	adds	r3, r7, r3
    c9e0:	2228      	movs	r2, #40	; 0x28
    c9e2:	2108      	movs	r1, #8
    c9e4:	468c      	mov	ip, r1
    c9e6:	44bc      	add	ip, r7
    c9e8:	4462      	add	r2, ip
    c9ea:	8812      	ldrh	r2, [r2, #0]
    c9ec:	801a      	strh	r2, [r3, #0]
    c9ee:	2328      	movs	r3, #40	; 0x28
    c9f0:	2208      	movs	r2, #8
    c9f2:	18ba      	adds	r2, r7, r2
    c9f4:	18d2      	adds	r2, r2, r3
    c9f6:	2316      	movs	r3, #22
    c9f8:	18fb      	adds	r3, r7, r3
    c9fa:	881b      	ldrh	r3, [r3, #0]
    c9fc:	8013      	strh	r3, [r2, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    c9fe:	68fb      	ldr	r3, [r7, #12]
    ca00:	681b      	ldr	r3, [r3, #0]
    ca02:	3338      	adds	r3, #56	; 0x38
    ca04:	681c      	ldr	r4, [r3, #0]
    ca06:	2328      	movs	r3, #40	; 0x28
    ca08:	2208      	movs	r2, #8
    ca0a:	4694      	mov	ip, r2
    ca0c:	44bc      	add	ip, r7
    ca0e:	4463      	add	r3, ip
    ca10:	881a      	ldrh	r2, [r3, #0]
    ca12:	2308      	movs	r3, #8
    ca14:	18fb      	adds	r3, r7, r3
    ca16:	881b      	ldrh	r3, [r3, #0]
    ca18:	1ad3      	subs	r3, r2, r3
    ca1a:	b29b      	uxth	r3, r3
    ca1c:	3301      	adds	r3, #1
    ca1e:	b29b      	uxth	r3, r3
    ca20:	b21d      	sxth	r5, r3
    ca22:	2308      	movs	r3, #8
    ca24:	18fb      	adds	r3, r7, r3
    ca26:	2200      	movs	r2, #0
    ca28:	5e9a      	ldrsh	r2, [r3, r2]
    ca2a:	230a      	movs	r3, #10
    ca2c:	18fb      	adds	r3, r7, r3
    ca2e:	2100      	movs	r1, #0
    ca30:	5e59      	ldrsh	r1, [r3, r1]
    ca32:	68f8      	ldr	r0, [r7, #12]
    ca34:	232c      	movs	r3, #44	; 0x2c
    ca36:	2608      	movs	r6, #8
    ca38:	46b4      	mov	ip, r6
    ca3a:	44bc      	add	ip, r7
    ca3c:	4463      	add	r3, ip
    ca3e:	881b      	ldrh	r3, [r3, #0]
    ca40:	9300      	str	r3, [sp, #0]
    ca42:	002b      	movs	r3, r5
    ca44:	47a0      	blx	r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
    ca46:	e074      	b.n	cb32 <_ZN12Adafruit_GFX8drawLineEsssst+0x1b0>
    } else if(y0 == y1){
    ca48:	2308      	movs	r3, #8
    ca4a:	18fb      	adds	r3, r7, r3
    ca4c:	2228      	movs	r2, #40	; 0x28
    ca4e:	2108      	movs	r1, #8
    ca50:	1879      	adds	r1, r7, r1
    ca52:	1889      	adds	r1, r1, r2
    ca54:	2200      	movs	r2, #0
    ca56:	5e9a      	ldrsh	r2, [r3, r2]
    ca58:	2300      	movs	r3, #0
    ca5a:	5ecb      	ldrsh	r3, [r1, r3]
    ca5c:	429a      	cmp	r2, r3
    ca5e:	d139      	bne.n	cad4 <_ZN12Adafruit_GFX8drawLineEsssst+0x152>
        if(x0 > x1) _swap_int16_t(x0, x1);
    ca60:	230a      	movs	r3, #10
    ca62:	18fa      	adds	r2, r7, r3
    ca64:	1dbb      	adds	r3, r7, #6
    ca66:	2100      	movs	r1, #0
    ca68:	5e52      	ldrsh	r2, [r2, r1]
    ca6a:	2100      	movs	r1, #0
    ca6c:	5e5b      	ldrsh	r3, [r3, r1]
    ca6e:	429a      	cmp	r2, r3
    ca70:	dd0f      	ble.n	ca92 <_ZN12Adafruit_GFX8drawLineEsssst+0x110>
    ca72:	2314      	movs	r3, #20
    ca74:	18fb      	adds	r3, r7, r3
    ca76:	220a      	movs	r2, #10
    ca78:	18ba      	adds	r2, r7, r2
    ca7a:	8812      	ldrh	r2, [r2, #0]
    ca7c:	801a      	strh	r2, [r3, #0]
    ca7e:	230a      	movs	r3, #10
    ca80:	18fb      	adds	r3, r7, r3
    ca82:	1dba      	adds	r2, r7, #6
    ca84:	8812      	ldrh	r2, [r2, #0]
    ca86:	801a      	strh	r2, [r3, #0]
    ca88:	1dbb      	adds	r3, r7, #6
    ca8a:	2214      	movs	r2, #20
    ca8c:	18ba      	adds	r2, r7, r2
    ca8e:	8812      	ldrh	r2, [r2, #0]
    ca90:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    ca92:	68fb      	ldr	r3, [r7, #12]
    ca94:	681b      	ldr	r3, [r3, #0]
    ca96:	333c      	adds	r3, #60	; 0x3c
    ca98:	681c      	ldr	r4, [r3, #0]
    ca9a:	1dbb      	adds	r3, r7, #6
    ca9c:	881a      	ldrh	r2, [r3, #0]
    ca9e:	230a      	movs	r3, #10
    caa0:	18fb      	adds	r3, r7, r3
    caa2:	881b      	ldrh	r3, [r3, #0]
    caa4:	1ad3      	subs	r3, r2, r3
    caa6:	b29b      	uxth	r3, r3
    caa8:	3301      	adds	r3, #1
    caaa:	b29b      	uxth	r3, r3
    caac:	b21d      	sxth	r5, r3
    caae:	2308      	movs	r3, #8
    cab0:	18fb      	adds	r3, r7, r3
    cab2:	2200      	movs	r2, #0
    cab4:	5e9a      	ldrsh	r2, [r3, r2]
    cab6:	230a      	movs	r3, #10
    cab8:	18fb      	adds	r3, r7, r3
    caba:	2100      	movs	r1, #0
    cabc:	5e59      	ldrsh	r1, [r3, r1]
    cabe:	68f8      	ldr	r0, [r7, #12]
    cac0:	232c      	movs	r3, #44	; 0x2c
    cac2:	2608      	movs	r6, #8
    cac4:	46b4      	mov	ip, r6
    cac6:	44bc      	add	ip, r7
    cac8:	4463      	add	r3, ip
    caca:	881b      	ldrh	r3, [r3, #0]
    cacc:	9300      	str	r3, [sp, #0]
    cace:	002b      	movs	r3, r5
    cad0:	47a0      	blx	r4
}
    cad2:	e02e      	b.n	cb32 <_ZN12Adafruit_GFX8drawLineEsssst+0x1b0>
        startWrite();
    cad4:	68fb      	ldr	r3, [r7, #12]
    cad6:	681b      	ldr	r3, [r3, #0]
    cad8:	3314      	adds	r3, #20
    cada:	681b      	ldr	r3, [r3, #0]
    cadc:	68fa      	ldr	r2, [r7, #12]
    cade:	0010      	movs	r0, r2
    cae0:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
    cae2:	68fb      	ldr	r3, [r7, #12]
    cae4:	681b      	ldr	r3, [r3, #0]
    cae6:	3328      	adds	r3, #40	; 0x28
    cae8:	681c      	ldr	r4, [r3, #0]
    caea:	1dbb      	adds	r3, r7, #6
    caec:	2500      	movs	r5, #0
    caee:	5f5d      	ldrsh	r5, [r3, r5]
    caf0:	2308      	movs	r3, #8
    caf2:	18fb      	adds	r3, r7, r3
    caf4:	2200      	movs	r2, #0
    caf6:	5e9a      	ldrsh	r2, [r3, r2]
    caf8:	230a      	movs	r3, #10
    cafa:	18fb      	adds	r3, r7, r3
    cafc:	2100      	movs	r1, #0
    cafe:	5e59      	ldrsh	r1, [r3, r1]
    cb00:	68f8      	ldr	r0, [r7, #12]
    cb02:	232c      	movs	r3, #44	; 0x2c
    cb04:	2608      	movs	r6, #8
    cb06:	46b4      	mov	ip, r6
    cb08:	44bc      	add	ip, r7
    cb0a:	4463      	add	r3, ip
    cb0c:	881b      	ldrh	r3, [r3, #0]
    cb0e:	9301      	str	r3, [sp, #4]
    cb10:	2328      	movs	r3, #40	; 0x28
    cb12:	2608      	movs	r6, #8
    cb14:	46b4      	mov	ip, r6
    cb16:	44bc      	add	ip, r7
    cb18:	4463      	add	r3, ip
    cb1a:	2600      	movs	r6, #0
    cb1c:	5f9b      	ldrsh	r3, [r3, r6]
    cb1e:	9300      	str	r3, [sp, #0]
    cb20:	002b      	movs	r3, r5
    cb22:	47a0      	blx	r4
        endWrite();
    cb24:	68fb      	ldr	r3, [r7, #12]
    cb26:	681b      	ldr	r3, [r3, #0]
    cb28:	332c      	adds	r3, #44	; 0x2c
    cb2a:	681b      	ldr	r3, [r3, #0]
    cb2c:	68fa      	ldr	r2, [r7, #12]
    cb2e:	0010      	movs	r0, r2
    cb30:	4798      	blx	r3
}
    cb32:	46c0      	nop			; (mov r8, r8)
    cb34:	46bd      	mov	sp, r7
    cb36:	b007      	add	sp, #28
    cb38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cb3a <_ZN12Adafruit_GFX8drawRectEsssst>:
    }
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    cb3a:	b5b0      	push	{r4, r5, r7, lr}
    cb3c:	b086      	sub	sp, #24
    cb3e:	af02      	add	r7, sp, #8
    cb40:	60f8      	str	r0, [r7, #12]
    cb42:	000c      	movs	r4, r1
    cb44:	0010      	movs	r0, r2
    cb46:	0019      	movs	r1, r3
    cb48:	230a      	movs	r3, #10
    cb4a:	18fb      	adds	r3, r7, r3
    cb4c:	1c22      	adds	r2, r4, #0
    cb4e:	801a      	strh	r2, [r3, #0]
    cb50:	2308      	movs	r3, #8
    cb52:	18fb      	adds	r3, r7, r3
    cb54:	1c02      	adds	r2, r0, #0
    cb56:	801a      	strh	r2, [r3, #0]
    cb58:	1dbb      	adds	r3, r7, #6
    cb5a:	1c0a      	adds	r2, r1, #0
    cb5c:	801a      	strh	r2, [r3, #0]
    startWrite();
    cb5e:	68fb      	ldr	r3, [r7, #12]
    cb60:	681b      	ldr	r3, [r3, #0]
    cb62:	3314      	adds	r3, #20
    cb64:	681b      	ldr	r3, [r3, #0]
    cb66:	68fa      	ldr	r2, [r7, #12]
    cb68:	0010      	movs	r0, r2
    cb6a:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
    cb6c:	68fb      	ldr	r3, [r7, #12]
    cb6e:	681b      	ldr	r3, [r3, #0]
    cb70:	3324      	adds	r3, #36	; 0x24
    cb72:	681c      	ldr	r4, [r3, #0]
    cb74:	1dbb      	adds	r3, r7, #6
    cb76:	2500      	movs	r5, #0
    cb78:	5f5d      	ldrsh	r5, [r3, r5]
    cb7a:	2308      	movs	r3, #8
    cb7c:	18fb      	adds	r3, r7, r3
    cb7e:	2200      	movs	r2, #0
    cb80:	5e9a      	ldrsh	r2, [r3, r2]
    cb82:	230a      	movs	r3, #10
    cb84:	18fb      	adds	r3, r7, r3
    cb86:	2100      	movs	r1, #0
    cb88:	5e59      	ldrsh	r1, [r3, r1]
    cb8a:	68f8      	ldr	r0, [r7, #12]
    cb8c:	2324      	movs	r3, #36	; 0x24
    cb8e:	18fb      	adds	r3, r7, r3
    cb90:	881b      	ldrh	r3, [r3, #0]
    cb92:	9300      	str	r3, [sp, #0]
    cb94:	002b      	movs	r3, r5
    cb96:	47a0      	blx	r4
    writeFastHLine(x, y+h-1, w, color);
    cb98:	68fb      	ldr	r3, [r7, #12]
    cb9a:	681b      	ldr	r3, [r3, #0]
    cb9c:	3324      	adds	r3, #36	; 0x24
    cb9e:	681c      	ldr	r4, [r3, #0]
    cba0:	2308      	movs	r3, #8
    cba2:	18fb      	adds	r3, r7, r3
    cba4:	881a      	ldrh	r2, [r3, #0]
    cba6:	2320      	movs	r3, #32
    cba8:	18fb      	adds	r3, r7, r3
    cbaa:	881b      	ldrh	r3, [r3, #0]
    cbac:	18d3      	adds	r3, r2, r3
    cbae:	b29b      	uxth	r3, r3
    cbb0:	3b01      	subs	r3, #1
    cbb2:	b29b      	uxth	r3, r3
    cbb4:	b21a      	sxth	r2, r3
    cbb6:	1dbb      	adds	r3, r7, #6
    cbb8:	2500      	movs	r5, #0
    cbba:	5f5d      	ldrsh	r5, [r3, r5]
    cbbc:	230a      	movs	r3, #10
    cbbe:	18fb      	adds	r3, r7, r3
    cbc0:	2100      	movs	r1, #0
    cbc2:	5e59      	ldrsh	r1, [r3, r1]
    cbc4:	68f8      	ldr	r0, [r7, #12]
    cbc6:	2324      	movs	r3, #36	; 0x24
    cbc8:	18fb      	adds	r3, r7, r3
    cbca:	881b      	ldrh	r3, [r3, #0]
    cbcc:	9300      	str	r3, [sp, #0]
    cbce:	002b      	movs	r3, r5
    cbd0:	47a0      	blx	r4
    writeFastVLine(x, y, h, color);
    cbd2:	68fb      	ldr	r3, [r7, #12]
    cbd4:	681b      	ldr	r3, [r3, #0]
    cbd6:	3320      	adds	r3, #32
    cbd8:	681c      	ldr	r4, [r3, #0]
    cbda:	2320      	movs	r3, #32
    cbdc:	18fb      	adds	r3, r7, r3
    cbde:	2500      	movs	r5, #0
    cbe0:	5f5d      	ldrsh	r5, [r3, r5]
    cbe2:	2308      	movs	r3, #8
    cbe4:	18fb      	adds	r3, r7, r3
    cbe6:	2200      	movs	r2, #0
    cbe8:	5e9a      	ldrsh	r2, [r3, r2]
    cbea:	230a      	movs	r3, #10
    cbec:	18fb      	adds	r3, r7, r3
    cbee:	2100      	movs	r1, #0
    cbf0:	5e59      	ldrsh	r1, [r3, r1]
    cbf2:	68f8      	ldr	r0, [r7, #12]
    cbf4:	2324      	movs	r3, #36	; 0x24
    cbf6:	18fb      	adds	r3, r7, r3
    cbf8:	881b      	ldrh	r3, [r3, #0]
    cbfa:	9300      	str	r3, [sp, #0]
    cbfc:	002b      	movs	r3, r5
    cbfe:	47a0      	blx	r4
    writeFastVLine(x+w-1, y, h, color);
    cc00:	68fb      	ldr	r3, [r7, #12]
    cc02:	681b      	ldr	r3, [r3, #0]
    cc04:	3320      	adds	r3, #32
    cc06:	681c      	ldr	r4, [r3, #0]
    cc08:	230a      	movs	r3, #10
    cc0a:	18fb      	adds	r3, r7, r3
    cc0c:	881a      	ldrh	r2, [r3, #0]
    cc0e:	1dbb      	adds	r3, r7, #6
    cc10:	881b      	ldrh	r3, [r3, #0]
    cc12:	18d3      	adds	r3, r2, r3
    cc14:	b29b      	uxth	r3, r3
    cc16:	3b01      	subs	r3, #1
    cc18:	b29b      	uxth	r3, r3
    cc1a:	b219      	sxth	r1, r3
    cc1c:	2320      	movs	r3, #32
    cc1e:	18fb      	adds	r3, r7, r3
    cc20:	2500      	movs	r5, #0
    cc22:	5f5d      	ldrsh	r5, [r3, r5]
    cc24:	2308      	movs	r3, #8
    cc26:	18fb      	adds	r3, r7, r3
    cc28:	2200      	movs	r2, #0
    cc2a:	5e9a      	ldrsh	r2, [r3, r2]
    cc2c:	68f8      	ldr	r0, [r7, #12]
    cc2e:	2324      	movs	r3, #36	; 0x24
    cc30:	18fb      	adds	r3, r7, r3
    cc32:	881b      	ldrh	r3, [r3, #0]
    cc34:	9300      	str	r3, [sp, #0]
    cc36:	002b      	movs	r3, r5
    cc38:	47a0      	blx	r4
    endWrite();
    cc3a:	68fb      	ldr	r3, [r7, #12]
    cc3c:	681b      	ldr	r3, [r3, #0]
    cc3e:	332c      	adds	r3, #44	; 0x2c
    cc40:	681b      	ldr	r3, [r3, #0]
    cc42:	68fa      	ldr	r2, [r7, #12]
    cc44:	0010      	movs	r0, r2
    cc46:	4798      	blx	r3
}
    cc48:	46c0      	nop			; (mov r8, r8)
    cc4a:	46bd      	mov	sp, r7
    cc4c:	b004      	add	sp, #16
    cc4e:	bdb0      	pop	{r4, r5, r7, pc}

0000cc50 <_ZN12Adafruit_GFX8drawCharEsshtth>:

// TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    cc50:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc52:	b08f      	sub	sp, #60	; 0x3c
    cc54:	af02      	add	r7, sp, #8
    cc56:	60f8      	str	r0, [r7, #12]
    cc58:	000c      	movs	r4, r1
    cc5a:	0010      	movs	r0, r2
    cc5c:	0019      	movs	r1, r3
    cc5e:	230a      	movs	r3, #10
    cc60:	18fb      	adds	r3, r7, r3
    cc62:	1c22      	adds	r2, r4, #0
    cc64:	801a      	strh	r2, [r3, #0]
    cc66:	2308      	movs	r3, #8
    cc68:	18fb      	adds	r3, r7, r3
    cc6a:	1c02      	adds	r2, r0, #0
    cc6c:	801a      	strh	r2, [r3, #0]
    cc6e:	1dfb      	adds	r3, r7, #7
    cc70:	1c0a      	adds	r2, r1, #0
    cc72:	701a      	strb	r2, [r3, #0]

    if(!gfxFont) { // 'Classic' built-in font
    cc74:	68fb      	ldr	r3, [r7, #12]
    cc76:	69db      	ldr	r3, [r3, #28]
    cc78:	2b00      	cmp	r3, #0
    cc7a:	d000      	beq.n	cc7e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
    cc7c:	e1a8      	b.n	cfd0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x380>

        if((x >= _width)            || // Clip right
    cc7e:	68fb      	ldr	r3, [r7, #12]
    cc80:	220c      	movs	r2, #12
    cc82:	5e9b      	ldrsh	r3, [r3, r2]
    cc84:	220a      	movs	r2, #10
    cc86:	18ba      	adds	r2, r7, r2
    cc88:	2100      	movs	r1, #0
    cc8a:	5e52      	ldrsh	r2, [r2, r1]
    cc8c:	429a      	cmp	r2, r3
    cc8e:	db00      	blt.n	cc92 <_ZN12Adafruit_GFX8drawCharEsshtth+0x42>
    cc90:	e2c7      	b.n	d222 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           (y >= _height)           || // Clip bottom
    cc92:	68fb      	ldr	r3, [r7, #12]
    cc94:	220e      	movs	r2, #14
    cc96:	5e9b      	ldrsh	r3, [r3, r2]
        if((x >= _width)            || // Clip right
    cc98:	2208      	movs	r2, #8
    cc9a:	18ba      	adds	r2, r7, r2
    cc9c:	2100      	movs	r1, #0
    cc9e:	5e52      	ldrsh	r2, [r2, r1]
    cca0:	429a      	cmp	r2, r3
    cca2:	db00      	blt.n	cca6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
    cca4:	e2bd      	b.n	d222 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           ((x + 6 * size - 1) < 0) || // Clip left
    cca6:	230a      	movs	r3, #10
    cca8:	18fb      	adds	r3, r7, r3
    ccaa:	2100      	movs	r1, #0
    ccac:	5e59      	ldrsh	r1, [r3, r1]
    ccae:	2350      	movs	r3, #80	; 0x50
    ccb0:	18fb      	adds	r3, r7, r3
    ccb2:	781a      	ldrb	r2, [r3, #0]
    ccb4:	0013      	movs	r3, r2
    ccb6:	005b      	lsls	r3, r3, #1
    ccb8:	189b      	adds	r3, r3, r2
    ccba:	005b      	lsls	r3, r3, #1
    ccbc:	18cb      	adds	r3, r1, r3
    ccbe:	3b01      	subs	r3, #1
           (y >= _height)           || // Clip bottom
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	da00      	bge.n	ccc6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x76>
    ccc4:	e2ad      	b.n	d222 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
           ((y + 8 * size - 1) < 0))   // Clip top
    ccc6:	2308      	movs	r3, #8
    ccc8:	18fb      	adds	r3, r7, r3
    ccca:	2200      	movs	r2, #0
    cccc:	5e9a      	ldrsh	r2, [r3, r2]
    ccce:	2350      	movs	r3, #80	; 0x50
    ccd0:	18fb      	adds	r3, r7, r3
    ccd2:	781b      	ldrb	r3, [r3, #0]
    ccd4:	00db      	lsls	r3, r3, #3
    ccd6:	18d3      	adds	r3, r2, r3
    ccd8:	3b01      	subs	r3, #1
           ((x + 6 * size - 1) < 0) || // Clip left
    ccda:	2b00      	cmp	r3, #0
    ccdc:	da00      	bge.n	cce0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x90>
    ccde:	e2a0      	b.n	d222 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d2>
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
    cce0:	68fb      	ldr	r3, [r7, #12]
    cce2:	7edb      	ldrb	r3, [r3, #27]
    cce4:	2201      	movs	r2, #1
    cce6:	4053      	eors	r3, r2
    cce8:	b2db      	uxtb	r3, r3
    ccea:	2b00      	cmp	r3, #0
    ccec:	d008      	beq.n	cd00 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb0>
    ccee:	1dfb      	adds	r3, r7, #7
    ccf0:	781b      	ldrb	r3, [r3, #0]
    ccf2:	2baf      	cmp	r3, #175	; 0xaf
    ccf4:	dd04      	ble.n	cd00 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb0>
    ccf6:	1dfb      	adds	r3, r7, #7
    ccf8:	781a      	ldrb	r2, [r3, #0]
    ccfa:	1dfb      	adds	r3, r7, #7
    ccfc:	3201      	adds	r2, #1
    ccfe:	701a      	strb	r2, [r3, #0]

        startWrite();
    cd00:	68fb      	ldr	r3, [r7, #12]
    cd02:	681b      	ldr	r3, [r3, #0]
    cd04:	3314      	adds	r3, #20
    cd06:	681b      	ldr	r3, [r3, #0]
    cd08:	68fa      	ldr	r2, [r7, #12]
    cd0a:	0010      	movs	r0, r2
    cd0c:	4798      	blx	r3
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    cd0e:	232f      	movs	r3, #47	; 0x2f
    cd10:	18fb      	adds	r3, r7, r3
    cd12:	2200      	movs	r2, #0
    cd14:	701a      	strb	r2, [r3, #0]
    cd16:	232f      	movs	r3, #47	; 0x2f
    cd18:	18fb      	adds	r3, r7, r3
    cd1a:	781b      	ldrb	r3, [r3, #0]
    cd1c:	b25b      	sxtb	r3, r3
    cd1e:	2b04      	cmp	r3, #4
    cd20:	dd00      	ble.n	cd24 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd4>
    cd22:	e0fd      	b.n	cf20 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2d0>
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    cd24:	1dfb      	adds	r3, r7, #7
    cd26:	781a      	ldrb	r2, [r3, #0]
    cd28:	0013      	movs	r3, r2
    cd2a:	009b      	lsls	r3, r3, #2
    cd2c:	189a      	adds	r2, r3, r2
    cd2e:	232f      	movs	r3, #47	; 0x2f
    cd30:	18fb      	adds	r3, r7, r3
    cd32:	781b      	ldrb	r3, [r3, #0]
    cd34:	b25b      	sxtb	r3, r3
    cd36:	18d2      	adds	r2, r2, r3
    cd38:	232e      	movs	r3, #46	; 0x2e
    cd3a:	18fb      	adds	r3, r7, r3
    cd3c:	49a3      	ldr	r1, [pc, #652]	; (cfcc <_ZN12Adafruit_GFX8drawCharEsshtth+0x37c>)
    cd3e:	5c8a      	ldrb	r2, [r1, r2]
    cd40:	701a      	strb	r2, [r3, #0]
            for(int8_t j=0; j<8; j++, line >>= 1) {
    cd42:	232d      	movs	r3, #45	; 0x2d
    cd44:	18fb      	adds	r3, r7, r3
    cd46:	2200      	movs	r2, #0
    cd48:	701a      	strb	r2, [r3, #0]
    cd4a:	232d      	movs	r3, #45	; 0x2d
    cd4c:	18fb      	adds	r3, r7, r3
    cd4e:	781b      	ldrb	r3, [r3, #0]
    cd50:	b25b      	sxtb	r3, r3
    cd52:	2b07      	cmp	r3, #7
    cd54:	dd00      	ble.n	cd58 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
    cd56:	e0d8      	b.n	cf0a <_ZN12Adafruit_GFX8drawCharEsshtth+0x2ba>
                if(line & 1) {
    cd58:	232e      	movs	r3, #46	; 0x2e
    cd5a:	18fb      	adds	r3, r7, r3
    cd5c:	781b      	ldrb	r3, [r3, #0]
    cd5e:	2201      	movs	r2, #1
    cd60:	4013      	ands	r3, r2
    cd62:	d05c      	beq.n	ce1e <_ZN12Adafruit_GFX8drawCharEsshtth+0x1ce>
                    if(size == 1)
    cd64:	2350      	movs	r3, #80	; 0x50
    cd66:	18fb      	adds	r3, r7, r3
    cd68:	781b      	ldrb	r3, [r3, #0]
    cd6a:	2b01      	cmp	r3, #1
    cd6c:	d11f      	bne.n	cdae <_ZN12Adafruit_GFX8drawCharEsshtth+0x15e>
                        writePixel(x+i, y+j, color);
    cd6e:	68fb      	ldr	r3, [r7, #12]
    cd70:	681b      	ldr	r3, [r3, #0]
    cd72:	3318      	adds	r3, #24
    cd74:	681c      	ldr	r4, [r3, #0]
    cd76:	232f      	movs	r3, #47	; 0x2f
    cd78:	18fb      	adds	r3, r7, r3
    cd7a:	781b      	ldrb	r3, [r3, #0]
    cd7c:	b25b      	sxtb	r3, r3
    cd7e:	b29a      	uxth	r2, r3
    cd80:	230a      	movs	r3, #10
    cd82:	18fb      	adds	r3, r7, r3
    cd84:	881b      	ldrh	r3, [r3, #0]
    cd86:	18d3      	adds	r3, r2, r3
    cd88:	b29b      	uxth	r3, r3
    cd8a:	b219      	sxth	r1, r3
    cd8c:	232d      	movs	r3, #45	; 0x2d
    cd8e:	18fb      	adds	r3, r7, r3
    cd90:	781b      	ldrb	r3, [r3, #0]
    cd92:	b25b      	sxtb	r3, r3
    cd94:	b29a      	uxth	r2, r3
    cd96:	2308      	movs	r3, #8
    cd98:	18fb      	adds	r3, r7, r3
    cd9a:	881b      	ldrh	r3, [r3, #0]
    cd9c:	18d3      	adds	r3, r2, r3
    cd9e:	b29b      	uxth	r3, r3
    cda0:	b21a      	sxth	r2, r3
    cda2:	2348      	movs	r3, #72	; 0x48
    cda4:	18fb      	adds	r3, r7, r3
    cda6:	881b      	ldrh	r3, [r3, #0]
    cda8:	68f8      	ldr	r0, [r7, #12]
    cdaa:	47a0      	blx	r4
    cdac:	e09b      	b.n	cee6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
    cdae:	68fb      	ldr	r3, [r7, #12]
    cdb0:	681b      	ldr	r3, [r3, #0]
    cdb2:	331c      	adds	r3, #28
    cdb4:	681c      	ldr	r4, [r3, #0]
    cdb6:	232f      	movs	r3, #47	; 0x2f
    cdb8:	18fb      	adds	r3, r7, r3
    cdba:	781b      	ldrb	r3, [r3, #0]
    cdbc:	b25b      	sxtb	r3, r3
    cdbe:	b29b      	uxth	r3, r3
    cdc0:	2250      	movs	r2, #80	; 0x50
    cdc2:	18ba      	adds	r2, r7, r2
    cdc4:	7812      	ldrb	r2, [r2, #0]
    cdc6:	b292      	uxth	r2, r2
    cdc8:	4353      	muls	r3, r2
    cdca:	b29a      	uxth	r2, r3
    cdcc:	230a      	movs	r3, #10
    cdce:	18fb      	adds	r3, r7, r3
    cdd0:	881b      	ldrh	r3, [r3, #0]
    cdd2:	18d3      	adds	r3, r2, r3
    cdd4:	b29b      	uxth	r3, r3
    cdd6:	b219      	sxth	r1, r3
    cdd8:	232d      	movs	r3, #45	; 0x2d
    cdda:	18fb      	adds	r3, r7, r3
    cddc:	781b      	ldrb	r3, [r3, #0]
    cdde:	b25b      	sxtb	r3, r3
    cde0:	b29b      	uxth	r3, r3
    cde2:	2250      	movs	r2, #80	; 0x50
    cde4:	18ba      	adds	r2, r7, r2
    cde6:	7812      	ldrb	r2, [r2, #0]
    cde8:	b292      	uxth	r2, r2
    cdea:	4353      	muls	r3, r2
    cdec:	b29a      	uxth	r2, r3
    cdee:	2308      	movs	r3, #8
    cdf0:	18fb      	adds	r3, r7, r3
    cdf2:	881b      	ldrh	r3, [r3, #0]
    cdf4:	18d3      	adds	r3, r2, r3
    cdf6:	b29b      	uxth	r3, r3
    cdf8:	b21d      	sxth	r5, r3
    cdfa:	2350      	movs	r3, #80	; 0x50
    cdfc:	18fb      	adds	r3, r7, r3
    cdfe:	781b      	ldrb	r3, [r3, #0]
    ce00:	b21e      	sxth	r6, r3
    ce02:	2350      	movs	r3, #80	; 0x50
    ce04:	18fb      	adds	r3, r7, r3
    ce06:	781b      	ldrb	r3, [r3, #0]
    ce08:	b21b      	sxth	r3, r3
    ce0a:	68f8      	ldr	r0, [r7, #12]
    ce0c:	2248      	movs	r2, #72	; 0x48
    ce0e:	18ba      	adds	r2, r7, r2
    ce10:	8812      	ldrh	r2, [r2, #0]
    ce12:	9201      	str	r2, [sp, #4]
    ce14:	9300      	str	r3, [sp, #0]
    ce16:	0033      	movs	r3, r6
    ce18:	002a      	movs	r2, r5
    ce1a:	47a0      	blx	r4
    ce1c:	e063      	b.n	cee6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                } else if(bg != color) {
    ce1e:	234c      	movs	r3, #76	; 0x4c
    ce20:	18fb      	adds	r3, r7, r3
    ce22:	2248      	movs	r2, #72	; 0x48
    ce24:	18b9      	adds	r1, r7, r2
    ce26:	881a      	ldrh	r2, [r3, #0]
    ce28:	880b      	ldrh	r3, [r1, #0]
    ce2a:	429a      	cmp	r2, r3
    ce2c:	d05b      	beq.n	cee6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    if(size == 1)
    ce2e:	2350      	movs	r3, #80	; 0x50
    ce30:	18fb      	adds	r3, r7, r3
    ce32:	781b      	ldrb	r3, [r3, #0]
    ce34:	2b01      	cmp	r3, #1
    ce36:	d11f      	bne.n	ce78 <_ZN12Adafruit_GFX8drawCharEsshtth+0x228>
                        writePixel(x+i, y+j, bg);
    ce38:	68fb      	ldr	r3, [r7, #12]
    ce3a:	681b      	ldr	r3, [r3, #0]
    ce3c:	3318      	adds	r3, #24
    ce3e:	681c      	ldr	r4, [r3, #0]
    ce40:	232f      	movs	r3, #47	; 0x2f
    ce42:	18fb      	adds	r3, r7, r3
    ce44:	781b      	ldrb	r3, [r3, #0]
    ce46:	b25b      	sxtb	r3, r3
    ce48:	b29a      	uxth	r2, r3
    ce4a:	230a      	movs	r3, #10
    ce4c:	18fb      	adds	r3, r7, r3
    ce4e:	881b      	ldrh	r3, [r3, #0]
    ce50:	18d3      	adds	r3, r2, r3
    ce52:	b29b      	uxth	r3, r3
    ce54:	b219      	sxth	r1, r3
    ce56:	232d      	movs	r3, #45	; 0x2d
    ce58:	18fb      	adds	r3, r7, r3
    ce5a:	781b      	ldrb	r3, [r3, #0]
    ce5c:	b25b      	sxtb	r3, r3
    ce5e:	b29a      	uxth	r2, r3
    ce60:	2308      	movs	r3, #8
    ce62:	18fb      	adds	r3, r7, r3
    ce64:	881b      	ldrh	r3, [r3, #0]
    ce66:	18d3      	adds	r3, r2, r3
    ce68:	b29b      	uxth	r3, r3
    ce6a:	b21a      	sxth	r2, r3
    ce6c:	234c      	movs	r3, #76	; 0x4c
    ce6e:	18fb      	adds	r3, r7, r3
    ce70:	881b      	ldrh	r3, [r3, #0]
    ce72:	68f8      	ldr	r0, [r7, #12]
    ce74:	47a0      	blx	r4
    ce76:	e036      	b.n	cee6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x296>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
    ce78:	68fb      	ldr	r3, [r7, #12]
    ce7a:	681b      	ldr	r3, [r3, #0]
    ce7c:	331c      	adds	r3, #28
    ce7e:	681c      	ldr	r4, [r3, #0]
    ce80:	232f      	movs	r3, #47	; 0x2f
    ce82:	18fb      	adds	r3, r7, r3
    ce84:	781b      	ldrb	r3, [r3, #0]
    ce86:	b25b      	sxtb	r3, r3
    ce88:	b29b      	uxth	r3, r3
    ce8a:	2250      	movs	r2, #80	; 0x50
    ce8c:	18ba      	adds	r2, r7, r2
    ce8e:	7812      	ldrb	r2, [r2, #0]
    ce90:	b292      	uxth	r2, r2
    ce92:	4353      	muls	r3, r2
    ce94:	b29a      	uxth	r2, r3
    ce96:	230a      	movs	r3, #10
    ce98:	18fb      	adds	r3, r7, r3
    ce9a:	881b      	ldrh	r3, [r3, #0]
    ce9c:	18d3      	adds	r3, r2, r3
    ce9e:	b29b      	uxth	r3, r3
    cea0:	b219      	sxth	r1, r3
    cea2:	232d      	movs	r3, #45	; 0x2d
    cea4:	18fb      	adds	r3, r7, r3
    cea6:	781b      	ldrb	r3, [r3, #0]
    cea8:	b25b      	sxtb	r3, r3
    ceaa:	b29b      	uxth	r3, r3
    ceac:	2250      	movs	r2, #80	; 0x50
    ceae:	18ba      	adds	r2, r7, r2
    ceb0:	7812      	ldrb	r2, [r2, #0]
    ceb2:	b292      	uxth	r2, r2
    ceb4:	4353      	muls	r3, r2
    ceb6:	b29a      	uxth	r2, r3
    ceb8:	2308      	movs	r3, #8
    ceba:	18fb      	adds	r3, r7, r3
    cebc:	881b      	ldrh	r3, [r3, #0]
    cebe:	18d3      	adds	r3, r2, r3
    cec0:	b29b      	uxth	r3, r3
    cec2:	b21d      	sxth	r5, r3
    cec4:	2350      	movs	r3, #80	; 0x50
    cec6:	18fb      	adds	r3, r7, r3
    cec8:	781b      	ldrb	r3, [r3, #0]
    ceca:	b21e      	sxth	r6, r3
    cecc:	2350      	movs	r3, #80	; 0x50
    cece:	18fb      	adds	r3, r7, r3
    ced0:	781b      	ldrb	r3, [r3, #0]
    ced2:	b21b      	sxth	r3, r3
    ced4:	68f8      	ldr	r0, [r7, #12]
    ced6:	224c      	movs	r2, #76	; 0x4c
    ced8:	18ba      	adds	r2, r7, r2
    ceda:	8812      	ldrh	r2, [r2, #0]
    cedc:	9201      	str	r2, [sp, #4]
    cede:	9300      	str	r3, [sp, #0]
    cee0:	0033      	movs	r3, r6
    cee2:	002a      	movs	r2, r5
    cee4:	47a0      	blx	r4
            for(int8_t j=0; j<8; j++, line >>= 1) {
    cee6:	232d      	movs	r3, #45	; 0x2d
    cee8:	18fb      	adds	r3, r7, r3
    ceea:	781b      	ldrb	r3, [r3, #0]
    ceec:	b25b      	sxtb	r3, r3
    ceee:	b2db      	uxtb	r3, r3
    cef0:	3301      	adds	r3, #1
    cef2:	b2da      	uxtb	r2, r3
    cef4:	232d      	movs	r3, #45	; 0x2d
    cef6:	18fb      	adds	r3, r7, r3
    cef8:	701a      	strb	r2, [r3, #0]
    cefa:	232e      	movs	r3, #46	; 0x2e
    cefc:	18fb      	adds	r3, r7, r3
    cefe:	781b      	ldrb	r3, [r3, #0]
    cf00:	105a      	asrs	r2, r3, #1
    cf02:	232e      	movs	r3, #46	; 0x2e
    cf04:	18fb      	adds	r3, r7, r3
    cf06:	701a      	strb	r2, [r3, #0]
    cf08:	e71f      	b.n	cd4a <_ZN12Adafruit_GFX8drawCharEsshtth+0xfa>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    cf0a:	232f      	movs	r3, #47	; 0x2f
    cf0c:	18fb      	adds	r3, r7, r3
    cf0e:	781b      	ldrb	r3, [r3, #0]
    cf10:	b25b      	sxtb	r3, r3
    cf12:	b2db      	uxtb	r3, r3
    cf14:	3301      	adds	r3, #1
    cf16:	b2da      	uxtb	r2, r3
    cf18:	232f      	movs	r3, #47	; 0x2f
    cf1a:	18fb      	adds	r3, r7, r3
    cf1c:	701a      	strb	r2, [r3, #0]
    cf1e:	e6fa      	b.n	cd16 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc6>
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
    cf20:	234c      	movs	r3, #76	; 0x4c
    cf22:	18fb      	adds	r3, r7, r3
    cf24:	2248      	movs	r2, #72	; 0x48
    cf26:	18b9      	adds	r1, r7, r2
    cf28:	881a      	ldrh	r2, [r3, #0]
    cf2a:	880b      	ldrh	r3, [r1, #0]
    cf2c:	429a      	cmp	r2, r3
    cf2e:	d044      	beq.n	cfba <_ZN12Adafruit_GFX8drawCharEsshtth+0x36a>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
    cf30:	2350      	movs	r3, #80	; 0x50
    cf32:	18fb      	adds	r3, r7, r3
    cf34:	781b      	ldrb	r3, [r3, #0]
    cf36:	2b01      	cmp	r3, #1
    cf38:	d115      	bne.n	cf66 <_ZN12Adafruit_GFX8drawCharEsshtth+0x316>
    cf3a:	68fb      	ldr	r3, [r7, #12]
    cf3c:	681b      	ldr	r3, [r3, #0]
    cf3e:	3320      	adds	r3, #32
    cf40:	681c      	ldr	r4, [r3, #0]
    cf42:	230a      	movs	r3, #10
    cf44:	18fb      	adds	r3, r7, r3
    cf46:	881b      	ldrh	r3, [r3, #0]
    cf48:	3305      	adds	r3, #5
    cf4a:	b29b      	uxth	r3, r3
    cf4c:	b219      	sxth	r1, r3
    cf4e:	2308      	movs	r3, #8
    cf50:	18fb      	adds	r3, r7, r3
    cf52:	2200      	movs	r2, #0
    cf54:	5e9a      	ldrsh	r2, [r3, r2]
    cf56:	68f8      	ldr	r0, [r7, #12]
    cf58:	234c      	movs	r3, #76	; 0x4c
    cf5a:	18fb      	adds	r3, r7, r3
    cf5c:	881b      	ldrh	r3, [r3, #0]
    cf5e:	9300      	str	r3, [sp, #0]
    cf60:	2308      	movs	r3, #8
    cf62:	47a0      	blx	r4
    cf64:	e029      	b.n	cfba <_ZN12Adafruit_GFX8drawCharEsshtth+0x36a>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
    cf66:	68fb      	ldr	r3, [r7, #12]
    cf68:	681b      	ldr	r3, [r3, #0]
    cf6a:	331c      	adds	r3, #28
    cf6c:	681c      	ldr	r4, [r3, #0]
    cf6e:	2350      	movs	r3, #80	; 0x50
    cf70:	18fb      	adds	r3, r7, r3
    cf72:	781b      	ldrb	r3, [r3, #0]
    cf74:	b29b      	uxth	r3, r3
    cf76:	1c1a      	adds	r2, r3, #0
    cf78:	0092      	lsls	r2, r2, #2
    cf7a:	18d3      	adds	r3, r2, r3
    cf7c:	b29a      	uxth	r2, r3
    cf7e:	230a      	movs	r3, #10
    cf80:	18fb      	adds	r3, r7, r3
    cf82:	881b      	ldrh	r3, [r3, #0]
    cf84:	18d3      	adds	r3, r2, r3
    cf86:	b29b      	uxth	r3, r3
    cf88:	b219      	sxth	r1, r3
    cf8a:	2350      	movs	r3, #80	; 0x50
    cf8c:	18fb      	adds	r3, r7, r3
    cf8e:	781b      	ldrb	r3, [r3, #0]
    cf90:	b21e      	sxth	r6, r3
    cf92:	2350      	movs	r3, #80	; 0x50
    cf94:	18fb      	adds	r3, r7, r3
    cf96:	781b      	ldrb	r3, [r3, #0]
    cf98:	b29b      	uxth	r3, r3
    cf9a:	00db      	lsls	r3, r3, #3
    cf9c:	b29b      	uxth	r3, r3
    cf9e:	b21b      	sxth	r3, r3
    cfa0:	2208      	movs	r2, #8
    cfa2:	18ba      	adds	r2, r7, r2
    cfa4:	2500      	movs	r5, #0
    cfa6:	5f55      	ldrsh	r5, [r2, r5]
    cfa8:	68f8      	ldr	r0, [r7, #12]
    cfaa:	224c      	movs	r2, #76	; 0x4c
    cfac:	18ba      	adds	r2, r7, r2
    cfae:	8812      	ldrh	r2, [r2, #0]
    cfb0:	9201      	str	r2, [sp, #4]
    cfb2:	9300      	str	r3, [sp, #0]
    cfb4:	0033      	movs	r3, r6
    cfb6:	002a      	movs	r2, r5
    cfb8:	47a0      	blx	r4
        }
        endWrite();
    cfba:	68fb      	ldr	r3, [r7, #12]
    cfbc:	681b      	ldr	r3, [r3, #0]
    cfbe:	332c      	adds	r3, #44	; 0x2c
    cfc0:	681b      	ldr	r3, [r3, #0]
    cfc2:	68fa      	ldr	r2, [r7, #12]
    cfc4:	0010      	movs	r0, r2
    cfc6:	4798      	blx	r3
    cfc8:	e12c      	b.n	d224 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d4>
    cfca:	46c0      	nop			; (mov r8, r8)
    cfcc:	00013b9c 	.word	0x00013b9c

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    cfd0:	68fb      	ldr	r3, [r7, #12]
    cfd2:	69db      	ldr	r3, [r3, #28]
    cfd4:	3308      	adds	r3, #8
    cfd6:	781a      	ldrb	r2, [r3, #0]
    cfd8:	1dfb      	adds	r3, r7, #7
    cfda:	1df9      	adds	r1, r7, #7
    cfdc:	7809      	ldrb	r1, [r1, #0]
    cfde:	1a8a      	subs	r2, r1, r2
    cfe0:	701a      	strb	r2, [r3, #0]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    cfe2:	1dfb      	adds	r3, r7, #7
    cfe4:	781b      	ldrb	r3, [r3, #0]
    cfe6:	00da      	lsls	r2, r3, #3
    cfe8:	68fb      	ldr	r3, [r7, #12]
    cfea:	69db      	ldr	r3, [r3, #28]
    cfec:	3304      	adds	r3, #4
    cfee:	681b      	ldr	r3, [r3, #0]
    cff0:	18d3      	adds	r3, r2, r3
    cff2:	61fb      	str	r3, [r7, #28]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    cff4:	68fb      	ldr	r3, [r7, #12]
    cff6:	69db      	ldr	r3, [r3, #28]
    cff8:	681b      	ldr	r3, [r3, #0]
    cffa:	61bb      	str	r3, [r7, #24]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    cffc:	69fa      	ldr	r2, [r7, #28]
    cffe:	232a      	movs	r3, #42	; 0x2a
    d000:	18fb      	adds	r3, r7, r3
    d002:	8812      	ldrh	r2, [r2, #0]
    d004:	801a      	strh	r2, [r3, #0]
        uint8_t  w  = pgm_read_byte(&glyph->width),
    d006:	69fb      	ldr	r3, [r7, #28]
    d008:	1c9a      	adds	r2, r3, #2
    d00a:	2317      	movs	r3, #23
    d00c:	18fb      	adds	r3, r7, r3
    d00e:	7812      	ldrb	r2, [r2, #0]
    d010:	701a      	strb	r2, [r3, #0]
                 h  = pgm_read_byte(&glyph->height);
    d012:	69fb      	ldr	r3, [r7, #28]
    d014:	1cda      	adds	r2, r3, #3
    d016:	2316      	movs	r3, #22
    d018:	18fb      	adds	r3, r7, r3
    d01a:	7812      	ldrb	r2, [r2, #0]
    d01c:	701a      	strb	r2, [r3, #0]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
    d01e:	69fb      	ldr	r3, [r7, #28]
    d020:	3305      	adds	r3, #5
    d022:	781a      	ldrb	r2, [r3, #0]
    d024:	2315      	movs	r3, #21
    d026:	18fb      	adds	r3, r7, r3
    d028:	701a      	strb	r2, [r3, #0]
                 yo = pgm_read_byte(&glyph->yOffset);
    d02a:	69fb      	ldr	r3, [r7, #28]
    d02c:	3306      	adds	r3, #6
    d02e:	781a      	ldrb	r2, [r3, #0]
    d030:	2314      	movs	r3, #20
    d032:	18fb      	adds	r3, r7, r3
    d034:	701a      	strb	r2, [r3, #0]
        uint8_t  xx, yy, bits = 0, bit = 0;
    d036:	2327      	movs	r3, #39	; 0x27
    d038:	18fb      	adds	r3, r7, r3
    d03a:	2200      	movs	r2, #0
    d03c:	701a      	strb	r2, [r3, #0]
    d03e:	2326      	movs	r3, #38	; 0x26
    d040:	18fb      	adds	r3, r7, r3
    d042:	2200      	movs	r2, #0
    d044:	701a      	strb	r2, [r3, #0]
        int16_t  xo16 = 0, yo16 = 0;
    d046:	2324      	movs	r3, #36	; 0x24
    d048:	18fb      	adds	r3, r7, r3
    d04a:	2200      	movs	r2, #0
    d04c:	801a      	strh	r2, [r3, #0]
    d04e:	2322      	movs	r3, #34	; 0x22
    d050:	18fb      	adds	r3, r7, r3
    d052:	2200      	movs	r2, #0
    d054:	801a      	strh	r2, [r3, #0]

        if(size > 1) {
    d056:	2350      	movs	r3, #80	; 0x50
    d058:	18fb      	adds	r3, r7, r3
    d05a:	781b      	ldrb	r3, [r3, #0]
    d05c:	2b01      	cmp	r3, #1
    d05e:	dd0d      	ble.n	d07c <_ZN12Adafruit_GFX8drawCharEsshtth+0x42c>
            xo16 = xo;
    d060:	2324      	movs	r3, #36	; 0x24
    d062:	18fb      	adds	r3, r7, r3
    d064:	2215      	movs	r2, #21
    d066:	18ba      	adds	r2, r7, r2
    d068:	7812      	ldrb	r2, [r2, #0]
    d06a:	b252      	sxtb	r2, r2
    d06c:	801a      	strh	r2, [r3, #0]
            yo16 = yo;
    d06e:	2322      	movs	r3, #34	; 0x22
    d070:	18fb      	adds	r3, r7, r3
    d072:	2214      	movs	r2, #20
    d074:	18ba      	adds	r2, r7, r2
    d076:	7812      	ldrb	r2, [r2, #0]
    d078:	b252      	sxtb	r2, r2
    d07a:	801a      	strh	r2, [r3, #0]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
    d07c:	68fb      	ldr	r3, [r7, #12]
    d07e:	681b      	ldr	r3, [r3, #0]
    d080:	3314      	adds	r3, #20
    d082:	681b      	ldr	r3, [r3, #0]
    d084:	68fa      	ldr	r2, [r7, #12]
    d086:	0010      	movs	r0, r2
    d088:	4798      	blx	r3
        for(yy=0; yy<h; yy++) {
    d08a:	2328      	movs	r3, #40	; 0x28
    d08c:	18fb      	adds	r3, r7, r3
    d08e:	2200      	movs	r2, #0
    d090:	701a      	strb	r2, [r3, #0]
    d092:	2328      	movs	r3, #40	; 0x28
    d094:	18fb      	adds	r3, r7, r3
    d096:	781a      	ldrb	r2, [r3, #0]
    d098:	2316      	movs	r3, #22
    d09a:	18fb      	adds	r3, r7, r3
    d09c:	781b      	ldrb	r3, [r3, #0]
    d09e:	429a      	cmp	r2, r3
    d0a0:	db00      	blt.n	d0a4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x454>
    d0a2:	e0b6      	b.n	d212 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5c2>
            for(xx=0; xx<w; xx++) {
    d0a4:	2329      	movs	r3, #41	; 0x29
    d0a6:	18fb      	adds	r3, r7, r3
    d0a8:	2200      	movs	r2, #0
    d0aa:	701a      	strb	r2, [r3, #0]
    d0ac:	2329      	movs	r3, #41	; 0x29
    d0ae:	18fb      	adds	r3, r7, r3
    d0b0:	781a      	ldrb	r2, [r3, #0]
    d0b2:	2317      	movs	r3, #23
    d0b4:	18fb      	adds	r3, r7, r3
    d0b6:	781b      	ldrb	r3, [r3, #0]
    d0b8:	429a      	cmp	r2, r3
    d0ba:	db00      	blt.n	d0be <_ZN12Adafruit_GFX8drawCharEsshtth+0x46e>
    d0bc:	e0a1      	b.n	d202 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5b2>
                if(!(bit++ & 7)) {
    d0be:	2326      	movs	r3, #38	; 0x26
    d0c0:	18fb      	adds	r3, r7, r3
    d0c2:	781b      	ldrb	r3, [r3, #0]
    d0c4:	2226      	movs	r2, #38	; 0x26
    d0c6:	18ba      	adds	r2, r7, r2
    d0c8:	1c59      	adds	r1, r3, #1
    d0ca:	7011      	strb	r1, [r2, #0]
    d0cc:	001a      	movs	r2, r3
    d0ce:	2307      	movs	r3, #7
    d0d0:	4013      	ands	r3, r2
    d0d2:	425a      	negs	r2, r3
    d0d4:	4153      	adcs	r3, r2
    d0d6:	b2db      	uxtb	r3, r3
    d0d8:	2b00      	cmp	r3, #0
    d0da:	d00d      	beq.n	d0f8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x4a8>
                    bits = pgm_read_byte(&bitmap[bo++]);
    d0dc:	232a      	movs	r3, #42	; 0x2a
    d0de:	18fb      	adds	r3, r7, r3
    d0e0:	881b      	ldrh	r3, [r3, #0]
    d0e2:	222a      	movs	r2, #42	; 0x2a
    d0e4:	18ba      	adds	r2, r7, r2
    d0e6:	1c59      	adds	r1, r3, #1
    d0e8:	8011      	strh	r1, [r2, #0]
    d0ea:	001a      	movs	r2, r3
    d0ec:	69bb      	ldr	r3, [r7, #24]
    d0ee:	189a      	adds	r2, r3, r2
    d0f0:	2327      	movs	r3, #39	; 0x27
    d0f2:	18fb      	adds	r3, r7, r3
    d0f4:	7812      	ldrb	r2, [r2, #0]
    d0f6:	701a      	strb	r2, [r3, #0]
                }
                if(bits & 0x80) {
    d0f8:	2327      	movs	r3, #39	; 0x27
    d0fa:	18fb      	adds	r3, r7, r3
    d0fc:	781b      	ldrb	r3, [r3, #0]
    d0fe:	b25b      	sxtb	r3, r3
    d100:	2b00      	cmp	r3, #0
    d102:	da6f      	bge.n	d1e4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x594>
                    if(size == 1) {
    d104:	2350      	movs	r3, #80	; 0x50
    d106:	18fb      	adds	r3, r7, r3
    d108:	781b      	ldrb	r3, [r3, #0]
    d10a:	2b01      	cmp	r3, #1
    d10c:	d12b      	bne.n	d166 <_ZN12Adafruit_GFX8drawCharEsshtth+0x516>
                        writePixel(x+xo+xx, y+yo+yy, color);
    d10e:	68fb      	ldr	r3, [r7, #12]
    d110:	681b      	ldr	r3, [r3, #0]
    d112:	3318      	adds	r3, #24
    d114:	681c      	ldr	r4, [r3, #0]
    d116:	2315      	movs	r3, #21
    d118:	18fb      	adds	r3, r7, r3
    d11a:	781b      	ldrb	r3, [r3, #0]
    d11c:	b25b      	sxtb	r3, r3
    d11e:	b29a      	uxth	r2, r3
    d120:	230a      	movs	r3, #10
    d122:	18fb      	adds	r3, r7, r3
    d124:	881b      	ldrh	r3, [r3, #0]
    d126:	18d3      	adds	r3, r2, r3
    d128:	b29a      	uxth	r2, r3
    d12a:	2329      	movs	r3, #41	; 0x29
    d12c:	18fb      	adds	r3, r7, r3
    d12e:	781b      	ldrb	r3, [r3, #0]
    d130:	b29b      	uxth	r3, r3
    d132:	18d3      	adds	r3, r2, r3
    d134:	b29b      	uxth	r3, r3
    d136:	b219      	sxth	r1, r3
    d138:	2314      	movs	r3, #20
    d13a:	18fb      	adds	r3, r7, r3
    d13c:	781b      	ldrb	r3, [r3, #0]
    d13e:	b25b      	sxtb	r3, r3
    d140:	b29a      	uxth	r2, r3
    d142:	2308      	movs	r3, #8
    d144:	18fb      	adds	r3, r7, r3
    d146:	881b      	ldrh	r3, [r3, #0]
    d148:	18d3      	adds	r3, r2, r3
    d14a:	b29a      	uxth	r2, r3
    d14c:	2328      	movs	r3, #40	; 0x28
    d14e:	18fb      	adds	r3, r7, r3
    d150:	781b      	ldrb	r3, [r3, #0]
    d152:	b29b      	uxth	r3, r3
    d154:	18d3      	adds	r3, r2, r3
    d156:	b29b      	uxth	r3, r3
    d158:	b21a      	sxth	r2, r3
    d15a:	2348      	movs	r3, #72	; 0x48
    d15c:	18fb      	adds	r3, r7, r3
    d15e:	881b      	ldrh	r3, [r3, #0]
    d160:	68f8      	ldr	r0, [r7, #12]
    d162:	47a0      	blx	r4
    d164:	e03e      	b.n	d1e4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x594>
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
                          size, size, color);
    d166:	68fb      	ldr	r3, [r7, #12]
    d168:	681b      	ldr	r3, [r3, #0]
    d16a:	331c      	adds	r3, #28
    d16c:	681c      	ldr	r4, [r3, #0]
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    d16e:	2324      	movs	r3, #36	; 0x24
    d170:	18fb      	adds	r3, r7, r3
    d172:	2200      	movs	r2, #0
    d174:	5e9a      	ldrsh	r2, [r3, r2]
    d176:	2329      	movs	r3, #41	; 0x29
    d178:	18fb      	adds	r3, r7, r3
    d17a:	781b      	ldrb	r3, [r3, #0]
    d17c:	18d3      	adds	r3, r2, r3
    d17e:	b29b      	uxth	r3, r3
    d180:	2250      	movs	r2, #80	; 0x50
    d182:	18ba      	adds	r2, r7, r2
    d184:	7812      	ldrb	r2, [r2, #0]
    d186:	b292      	uxth	r2, r2
    d188:	4353      	muls	r3, r2
    d18a:	b29a      	uxth	r2, r3
    d18c:	230a      	movs	r3, #10
    d18e:	18fb      	adds	r3, r7, r3
    d190:	881b      	ldrh	r3, [r3, #0]
    d192:	18d3      	adds	r3, r2, r3
    d194:	b29b      	uxth	r3, r3
    d196:	b219      	sxth	r1, r3
    d198:	2322      	movs	r3, #34	; 0x22
    d19a:	18fb      	adds	r3, r7, r3
    d19c:	2200      	movs	r2, #0
    d19e:	5e9a      	ldrsh	r2, [r3, r2]
    d1a0:	2328      	movs	r3, #40	; 0x28
    d1a2:	18fb      	adds	r3, r7, r3
    d1a4:	781b      	ldrb	r3, [r3, #0]
    d1a6:	18d3      	adds	r3, r2, r3
    d1a8:	b29b      	uxth	r3, r3
    d1aa:	2250      	movs	r2, #80	; 0x50
    d1ac:	18ba      	adds	r2, r7, r2
    d1ae:	7812      	ldrb	r2, [r2, #0]
    d1b0:	b292      	uxth	r2, r2
    d1b2:	4353      	muls	r3, r2
    d1b4:	b29a      	uxth	r2, r3
    d1b6:	2308      	movs	r3, #8
    d1b8:	18fb      	adds	r3, r7, r3
    d1ba:	881b      	ldrh	r3, [r3, #0]
    d1bc:	18d3      	adds	r3, r2, r3
    d1be:	b29b      	uxth	r3, r3
    d1c0:	b21d      	sxth	r5, r3
    d1c2:	2350      	movs	r3, #80	; 0x50
    d1c4:	18fb      	adds	r3, r7, r3
    d1c6:	781b      	ldrb	r3, [r3, #0]
    d1c8:	b21e      	sxth	r6, r3
    d1ca:	2350      	movs	r3, #80	; 0x50
    d1cc:	18fb      	adds	r3, r7, r3
    d1ce:	781b      	ldrb	r3, [r3, #0]
    d1d0:	b21b      	sxth	r3, r3
                          size, size, color);
    d1d2:	68f8      	ldr	r0, [r7, #12]
    d1d4:	2248      	movs	r2, #72	; 0x48
    d1d6:	18ba      	adds	r2, r7, r2
    d1d8:	8812      	ldrh	r2, [r2, #0]
    d1da:	9201      	str	r2, [sp, #4]
    d1dc:	9300      	str	r3, [sp, #0]
    d1de:	0033      	movs	r3, r6
    d1e0:	002a      	movs	r2, r5
    d1e2:	47a0      	blx	r4
                    }
                }
                bits <<= 1;
    d1e4:	2327      	movs	r3, #39	; 0x27
    d1e6:	18fa      	adds	r2, r7, r3
    d1e8:	2327      	movs	r3, #39	; 0x27
    d1ea:	18fb      	adds	r3, r7, r3
    d1ec:	781b      	ldrb	r3, [r3, #0]
    d1ee:	18db      	adds	r3, r3, r3
    d1f0:	7013      	strb	r3, [r2, #0]
            for(xx=0; xx<w; xx++) {
    d1f2:	2329      	movs	r3, #41	; 0x29
    d1f4:	18fb      	adds	r3, r7, r3
    d1f6:	781a      	ldrb	r2, [r3, #0]
    d1f8:	2329      	movs	r3, #41	; 0x29
    d1fa:	18fb      	adds	r3, r7, r3
    d1fc:	3201      	adds	r2, #1
    d1fe:	701a      	strb	r2, [r3, #0]
    d200:	e754      	b.n	d0ac <_ZN12Adafruit_GFX8drawCharEsshtth+0x45c>
        for(yy=0; yy<h; yy++) {
    d202:	2328      	movs	r3, #40	; 0x28
    d204:	18fb      	adds	r3, r7, r3
    d206:	781a      	ldrb	r2, [r3, #0]
    d208:	2328      	movs	r3, #40	; 0x28
    d20a:	18fb      	adds	r3, r7, r3
    d20c:	3201      	adds	r2, #1
    d20e:	701a      	strb	r2, [r3, #0]
    d210:	e73f      	b.n	d092 <_ZN12Adafruit_GFX8drawCharEsshtth+0x442>
            }
        }
        endWrite();
    d212:	68fb      	ldr	r3, [r7, #12]
    d214:	681b      	ldr	r3, [r3, #0]
    d216:	332c      	adds	r3, #44	; 0x2c
    d218:	681b      	ldr	r3, [r3, #0]
    d21a:	68fa      	ldr	r2, [r7, #12]
    d21c:	0010      	movs	r0, r2
    d21e:	4798      	blx	r3
    d220:	e000      	b.n	d224 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5d4>
            return;
    d222:	46c0      	nop			; (mov r8, r8)

    } // End classic vs custom font
}
    d224:	46bd      	mov	sp, r7
    d226:	b00d      	add	sp, #52	; 0x34
    d228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d22a:	46c0      	nop			; (mov r8, r8)

0000d22c <_ZN12Adafruit_GFX5writeEh>:

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
    d22c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d22e:	b08b      	sub	sp, #44	; 0x2c
    d230:	af04      	add	r7, sp, #16
    d232:	6078      	str	r0, [r7, #4]
    d234:	000a      	movs	r2, r1
    d236:	1cfb      	adds	r3, r7, #3
    d238:	701a      	strb	r2, [r3, #0]
#else
void Adafruit_GFX::write(uint8_t c) {
#endif
    if(!gfxFont) { // 'Classic' built-in font
    d23a:	687b      	ldr	r3, [r7, #4]
    d23c:	69db      	ldr	r3, [r3, #28]
    d23e:	2b00      	cmp	r3, #0
    d240:	d16a      	bne.n	d318 <_ZN12Adafruit_GFX5writeEh+0xec>

        if(c == '\n') {                        // Newline?
    d242:	1cfb      	adds	r3, r7, #3
    d244:	781b      	ldrb	r3, [r3, #0]
    d246:	2b0a      	cmp	r3, #10
    d248:	d111      	bne.n	d26e <_ZN12Adafruit_GFX5writeEh+0x42>
            cursor_x  = 0;                     // Reset x to zero,
    d24a:	687b      	ldr	r3, [r7, #4]
    d24c:	2200      	movs	r2, #0
    d24e:	821a      	strh	r2, [r3, #16]
            cursor_y += textsize * 8;          // advance y one line
    d250:	687b      	ldr	r3, [r7, #4]
    d252:	2212      	movs	r2, #18
    d254:	5e9b      	ldrsh	r3, [r3, r2]
    d256:	b29a      	uxth	r2, r3
    d258:	687b      	ldr	r3, [r7, #4]
    d25a:	7e1b      	ldrb	r3, [r3, #24]
    d25c:	b29b      	uxth	r3, r3
    d25e:	00db      	lsls	r3, r3, #3
    d260:	b29b      	uxth	r3, r3
    d262:	18d3      	adds	r3, r2, r3
    d264:	b29b      	uxth	r3, r3
    d266:	b21a      	sxth	r2, r3
    d268:	687b      	ldr	r3, [r7, #4]
    d26a:	825a      	strh	r2, [r3, #18]
    d26c:	e110      	b.n	d490 <_ZN12Adafruit_GFX5writeEh+0x264>
        } else if(c != '\r') {                 // Ignore carriage returns
    d26e:	1cfb      	adds	r3, r7, #3
    d270:	781b      	ldrb	r3, [r3, #0]
    d272:	2b0d      	cmp	r3, #13
    d274:	d100      	bne.n	d278 <_ZN12Adafruit_GFX5writeEh+0x4c>
    d276:	e10b      	b.n	d490 <_ZN12Adafruit_GFX5writeEh+0x264>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
    d278:	687b      	ldr	r3, [r7, #4]
    d27a:	7e9b      	ldrb	r3, [r3, #26]
    d27c:	2b00      	cmp	r3, #0
    d27e:	d021      	beq.n	d2c4 <_ZN12Adafruit_GFX5writeEh+0x98>
    d280:	687b      	ldr	r3, [r7, #4]
    d282:	2210      	movs	r2, #16
    d284:	5e9b      	ldrsh	r3, [r3, r2]
    d286:	0019      	movs	r1, r3
    d288:	687b      	ldr	r3, [r7, #4]
    d28a:	7e1b      	ldrb	r3, [r3, #24]
    d28c:	001a      	movs	r2, r3
    d28e:	0013      	movs	r3, r2
    d290:	005b      	lsls	r3, r3, #1
    d292:	189b      	adds	r3, r3, r2
    d294:	005b      	lsls	r3, r3, #1
    d296:	18cb      	adds	r3, r1, r3
    d298:	687a      	ldr	r2, [r7, #4]
    d29a:	210c      	movs	r1, #12
    d29c:	5e52      	ldrsh	r2, [r2, r1]
    d29e:	4293      	cmp	r3, r2
    d2a0:	dd10      	ble.n	d2c4 <_ZN12Adafruit_GFX5writeEh+0x98>
                cursor_x  = 0;                 // Reset x to zero,
    d2a2:	687b      	ldr	r3, [r7, #4]
    d2a4:	2200      	movs	r2, #0
    d2a6:	821a      	strh	r2, [r3, #16]
                cursor_y += textsize * 8;      // advance y one line
    d2a8:	687b      	ldr	r3, [r7, #4]
    d2aa:	2212      	movs	r2, #18
    d2ac:	5e9b      	ldrsh	r3, [r3, r2]
    d2ae:	b29a      	uxth	r2, r3
    d2b0:	687b      	ldr	r3, [r7, #4]
    d2b2:	7e1b      	ldrb	r3, [r3, #24]
    d2b4:	b29b      	uxth	r3, r3
    d2b6:	00db      	lsls	r3, r3, #3
    d2b8:	b29b      	uxth	r3, r3
    d2ba:	18d3      	adds	r3, r2, r3
    d2bc:	b29b      	uxth	r3, r3
    d2be:	b21a      	sxth	r2, r3
    d2c0:	687b      	ldr	r3, [r7, #4]
    d2c2:	825a      	strh	r2, [r3, #18]
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    d2c4:	687b      	ldr	r3, [r7, #4]
    d2c6:	2410      	movs	r4, #16
    d2c8:	5f1c      	ldrsh	r4, [r3, r4]
    d2ca:	687b      	ldr	r3, [r7, #4]
    d2cc:	2512      	movs	r5, #18
    d2ce:	5f5d      	ldrsh	r5, [r3, r5]
    d2d0:	687b      	ldr	r3, [r7, #4]
    d2d2:	8a9b      	ldrh	r3, [r3, #20]
    d2d4:	687a      	ldr	r2, [r7, #4]
    d2d6:	8ad2      	ldrh	r2, [r2, #22]
    d2d8:	6879      	ldr	r1, [r7, #4]
    d2da:	7e09      	ldrb	r1, [r1, #24]
    d2dc:	1cf8      	adds	r0, r7, #3
    d2de:	7806      	ldrb	r6, [r0, #0]
    d2e0:	6878      	ldr	r0, [r7, #4]
    d2e2:	9102      	str	r1, [sp, #8]
    d2e4:	9201      	str	r2, [sp, #4]
    d2e6:	9300      	str	r3, [sp, #0]
    d2e8:	0033      	movs	r3, r6
    d2ea:	002a      	movs	r2, r5
    d2ec:	0021      	movs	r1, r4
    d2ee:	f7ff fcaf 	bl	cc50 <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
    d2f2:	687b      	ldr	r3, [r7, #4]
    d2f4:	2210      	movs	r2, #16
    d2f6:	5e9b      	ldrsh	r3, [r3, r2]
    d2f8:	b29a      	uxth	r2, r3
    d2fa:	687b      	ldr	r3, [r7, #4]
    d2fc:	7e1b      	ldrb	r3, [r3, #24]
    d2fe:	b29b      	uxth	r3, r3
    d300:	1c19      	adds	r1, r3, #0
    d302:	1c0b      	adds	r3, r1, #0
    d304:	18db      	adds	r3, r3, r3
    d306:	185b      	adds	r3, r3, r1
    d308:	18db      	adds	r3, r3, r3
    d30a:	b29b      	uxth	r3, r3
    d30c:	18d3      	adds	r3, r2, r3
    d30e:	b29b      	uxth	r3, r3
    d310:	b21a      	sxth	r2, r3
    d312:	687b      	ldr	r3, [r7, #4]
    d314:	821a      	strh	r2, [r3, #16]
    d316:	e0bb      	b.n	d490 <_ZN12Adafruit_GFX5writeEh+0x264>
        }

    } else { // Custom font

        if(c == '\n') {
    d318:	1cfb      	adds	r3, r7, #3
    d31a:	781b      	ldrb	r3, [r3, #0]
    d31c:	2b0a      	cmp	r3, #10
    d31e:	d116      	bne.n	d34e <_ZN12Adafruit_GFX5writeEh+0x122>
            cursor_x  = 0;
    d320:	687b      	ldr	r3, [r7, #4]
    d322:	2200      	movs	r2, #0
    d324:	821a      	strh	r2, [r3, #16]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d326:	687b      	ldr	r3, [r7, #4]
    d328:	2212      	movs	r2, #18
    d32a:	5e9b      	ldrsh	r3, [r3, r2]
    d32c:	b29a      	uxth	r2, r3
            cursor_y += (int16_t)textsize *
    d32e:	687b      	ldr	r3, [r7, #4]
    d330:	7e1b      	ldrb	r3, [r3, #24]
    d332:	b299      	uxth	r1, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d334:	687b      	ldr	r3, [r7, #4]
    d336:	69db      	ldr	r3, [r3, #28]
    d338:	330a      	adds	r3, #10
    d33a:	781b      	ldrb	r3, [r3, #0]
    d33c:	b29b      	uxth	r3, r3
            cursor_y += (int16_t)textsize *
    d33e:	434b      	muls	r3, r1
    d340:	b29b      	uxth	r3, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d342:	18d3      	adds	r3, r2, r3
    d344:	b29b      	uxth	r3, r3
    d346:	b21a      	sxth	r2, r3
            cursor_y += (int16_t)textsize *
    d348:	687b      	ldr	r3, [r7, #4]
    d34a:	825a      	strh	r2, [r3, #18]
    d34c:	e0a0      	b.n	d490 <_ZN12Adafruit_GFX5writeEh+0x264>
        } else if(c != '\r') {
    d34e:	1cfb      	adds	r3, r7, #3
    d350:	781b      	ldrb	r3, [r3, #0]
    d352:	2b0d      	cmp	r3, #13
    d354:	d100      	bne.n	d358 <_ZN12Adafruit_GFX5writeEh+0x12c>
    d356:	e09b      	b.n	d490 <_ZN12Adafruit_GFX5writeEh+0x264>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    d358:	687b      	ldr	r3, [r7, #4]
    d35a:	69db      	ldr	r3, [r3, #28]
    d35c:	3308      	adds	r3, #8
    d35e:	001a      	movs	r2, r3
    d360:	2317      	movs	r3, #23
    d362:	18fb      	adds	r3, r7, r3
    d364:	7812      	ldrb	r2, [r2, #0]
    d366:	701a      	strb	r2, [r3, #0]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    d368:	1cfb      	adds	r3, r7, #3
    d36a:	781a      	ldrb	r2, [r3, #0]
    d36c:	2317      	movs	r3, #23
    d36e:	18fb      	adds	r3, r7, r3
    d370:	781b      	ldrb	r3, [r3, #0]
    d372:	429a      	cmp	r2, r3
    d374:	da00      	bge.n	d378 <_ZN12Adafruit_GFX5writeEh+0x14c>
    d376:	e08b      	b.n	d490 <_ZN12Adafruit_GFX5writeEh+0x264>
    d378:	1cfb      	adds	r3, r7, #3
    d37a:	781a      	ldrb	r2, [r3, #0]
    d37c:	687b      	ldr	r3, [r7, #4]
    d37e:	69db      	ldr	r3, [r3, #28]
    d380:	3309      	adds	r3, #9
    d382:	781b      	ldrb	r3, [r3, #0]
    d384:	429a      	cmp	r2, r3
    d386:	dd00      	ble.n	d38a <_ZN12Adafruit_GFX5writeEh+0x15e>
    d388:	e082      	b.n	d490 <_ZN12Adafruit_GFX5writeEh+0x264>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
    d38a:	1cfb      	adds	r3, r7, #3
    d38c:	781a      	ldrb	r2, [r3, #0]
    d38e:	2317      	movs	r3, #23
    d390:	18fb      	adds	r3, r7, r3
    d392:	781b      	ldrb	r3, [r3, #0]
    d394:	1ad3      	subs	r3, r2, r3
    d396:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
    d398:	687b      	ldr	r3, [r7, #4]
    d39a:	69db      	ldr	r3, [r3, #28]
    d39c:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
    d39e:	681b      	ldr	r3, [r3, #0]
    d3a0:	18d3      	adds	r3, r2, r3
    d3a2:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
    d3a4:	693b      	ldr	r3, [r7, #16]
    d3a6:	1c9a      	adds	r2, r3, #2
    d3a8:	230f      	movs	r3, #15
    d3aa:	18fb      	adds	r3, r7, r3
    d3ac:	7812      	ldrb	r2, [r2, #0]
    d3ae:	701a      	strb	r2, [r3, #0]
                          h     = pgm_read_byte(&glyph->height);
    d3b0:	693b      	ldr	r3, [r7, #16]
    d3b2:	1cda      	adds	r2, r3, #3
    d3b4:	230e      	movs	r3, #14
    d3b6:	18fb      	adds	r3, r7, r3
    d3b8:	7812      	ldrb	r2, [r2, #0]
    d3ba:	701a      	strb	r2, [r3, #0]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    d3bc:	230f      	movs	r3, #15
    d3be:	18fb      	adds	r3, r7, r3
    d3c0:	781b      	ldrb	r3, [r3, #0]
    d3c2:	2b00      	cmp	r3, #0
    d3c4:	dd52      	ble.n	d46c <_ZN12Adafruit_GFX5writeEh+0x240>
    d3c6:	230e      	movs	r3, #14
    d3c8:	18fb      	adds	r3, r7, r3
    d3ca:	781b      	ldrb	r3, [r3, #0]
    d3cc:	2b00      	cmp	r3, #0
    d3ce:	dd4d      	ble.n	d46c <_ZN12Adafruit_GFX5writeEh+0x240>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    d3d0:	693b      	ldr	r3, [r7, #16]
    d3d2:	3305      	adds	r3, #5
    d3d4:	781b      	ldrb	r3, [r3, #0]
    d3d6:	b25a      	sxtb	r2, r3
    d3d8:	230c      	movs	r3, #12
    d3da:	18fb      	adds	r3, r7, r3
    d3dc:	801a      	strh	r2, [r3, #0]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
    d3de:	687b      	ldr	r3, [r7, #4]
    d3e0:	7e9b      	ldrb	r3, [r3, #26]
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d02b      	beq.n	d43e <_ZN12Adafruit_GFX5writeEh+0x212>
    d3e6:	687b      	ldr	r3, [r7, #4]
    d3e8:	2210      	movs	r2, #16
    d3ea:	5e9b      	ldrsh	r3, [r3, r2]
    d3ec:	0019      	movs	r1, r3
    d3ee:	687b      	ldr	r3, [r7, #4]
    d3f0:	7e1b      	ldrb	r3, [r3, #24]
    d3f2:	0018      	movs	r0, r3
    d3f4:	230c      	movs	r3, #12
    d3f6:	18fb      	adds	r3, r7, r3
    d3f8:	2200      	movs	r2, #0
    d3fa:	5e9a      	ldrsh	r2, [r3, r2]
    d3fc:	230f      	movs	r3, #15
    d3fe:	18fb      	adds	r3, r7, r3
    d400:	781b      	ldrb	r3, [r3, #0]
    d402:	18d3      	adds	r3, r2, r3
    d404:	4343      	muls	r3, r0
    d406:	18cb      	adds	r3, r1, r3
    d408:	687a      	ldr	r2, [r7, #4]
    d40a:	210c      	movs	r1, #12
    d40c:	5e52      	ldrsh	r2, [r2, r1]
    d40e:	4293      	cmp	r3, r2
    d410:	dd15      	ble.n	d43e <_ZN12Adafruit_GFX5writeEh+0x212>
                        cursor_x  = 0;
    d412:	687b      	ldr	r3, [r7, #4]
    d414:	2200      	movs	r2, #0
    d416:	821a      	strh	r2, [r3, #16]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d418:	687b      	ldr	r3, [r7, #4]
    d41a:	2212      	movs	r2, #18
    d41c:	5e9b      	ldrsh	r3, [r3, r2]
    d41e:	b29a      	uxth	r2, r3
                        cursor_y += (int16_t)textsize *
    d420:	687b      	ldr	r3, [r7, #4]
    d422:	7e1b      	ldrb	r3, [r3, #24]
    d424:	b299      	uxth	r1, r3
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d426:	687b      	ldr	r3, [r7, #4]
    d428:	69db      	ldr	r3, [r3, #28]
    d42a:	330a      	adds	r3, #10
    d42c:	781b      	ldrb	r3, [r3, #0]
    d42e:	b29b      	uxth	r3, r3
                        cursor_y += (int16_t)textsize *
    d430:	434b      	muls	r3, r1
    d432:	b29b      	uxth	r3, r3
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d434:	18d3      	adds	r3, r2, r3
    d436:	b29b      	uxth	r3, r3
    d438:	b21a      	sxth	r2, r3
                        cursor_y += (int16_t)textsize *
    d43a:	687b      	ldr	r3, [r7, #4]
    d43c:	825a      	strh	r2, [r3, #18]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    d43e:	687b      	ldr	r3, [r7, #4]
    d440:	2410      	movs	r4, #16
    d442:	5f1c      	ldrsh	r4, [r3, r4]
    d444:	687b      	ldr	r3, [r7, #4]
    d446:	2512      	movs	r5, #18
    d448:	5f5d      	ldrsh	r5, [r3, r5]
    d44a:	687b      	ldr	r3, [r7, #4]
    d44c:	8a9b      	ldrh	r3, [r3, #20]
    d44e:	687a      	ldr	r2, [r7, #4]
    d450:	8ad2      	ldrh	r2, [r2, #22]
    d452:	6879      	ldr	r1, [r7, #4]
    d454:	7e09      	ldrb	r1, [r1, #24]
    d456:	1cf8      	adds	r0, r7, #3
    d458:	7806      	ldrb	r6, [r0, #0]
    d45a:	6878      	ldr	r0, [r7, #4]
    d45c:	9102      	str	r1, [sp, #8]
    d45e:	9201      	str	r2, [sp, #4]
    d460:	9300      	str	r3, [sp, #0]
    d462:	0033      	movs	r3, r6
    d464:	002a      	movs	r2, r5
    d466:	0021      	movs	r1, r4
    d468:	f7ff fbf2 	bl	cc50 <_ZN12Adafruit_GFX8drawCharEsshtth>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    d46c:	687b      	ldr	r3, [r7, #4]
    d46e:	2210      	movs	r2, #16
    d470:	5e9b      	ldrsh	r3, [r3, r2]
    d472:	b29a      	uxth	r2, r3
    d474:	693b      	ldr	r3, [r7, #16]
    d476:	3304      	adds	r3, #4
    d478:	781b      	ldrb	r3, [r3, #0]
    d47a:	b29b      	uxth	r3, r3
    d47c:	6879      	ldr	r1, [r7, #4]
    d47e:	7e09      	ldrb	r1, [r1, #24]
    d480:	b289      	uxth	r1, r1
    d482:	434b      	muls	r3, r1
    d484:	b29b      	uxth	r3, r3
    d486:	18d3      	adds	r3, r2, r3
    d488:	b29b      	uxth	r3, r3
    d48a:	b21a      	sxth	r2, r3
    d48c:	687b      	ldr	r3, [r7, #4]
    d48e:	821a      	strh	r2, [r3, #16]
            }
        }

    }
#if ARDUINO >= 100
    return 1;
    d490:	2301      	movs	r3, #1
#endif
}
    d492:	0018      	movs	r0, r3
    d494:	46bd      	mov	sp, r7
    d496:	b007      	add	sp, #28
    d498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d49a <_ZN12Adafruit_GFX11setRotationEh>:

uint8_t Adafruit_GFX::getRotation(void) const {
    return rotation;
}

void Adafruit_GFX::setRotation(uint8_t x) {
    d49a:	b580      	push	{r7, lr}
    d49c:	b082      	sub	sp, #8
    d49e:	af00      	add	r7, sp, #0
    d4a0:	6078      	str	r0, [r7, #4]
    d4a2:	000a      	movs	r2, r1
    d4a4:	1cfb      	adds	r3, r7, #3
    d4a6:	701a      	strb	r2, [r3, #0]
    rotation = (x & 3);
    d4a8:	1cfb      	adds	r3, r7, #3
    d4aa:	781b      	ldrb	r3, [r3, #0]
    d4ac:	2203      	movs	r2, #3
    d4ae:	4013      	ands	r3, r2
    d4b0:	b2da      	uxtb	r2, r3
    d4b2:	687b      	ldr	r3, [r7, #4]
    d4b4:	765a      	strb	r2, [r3, #25]
    switch(rotation) {
    d4b6:	687b      	ldr	r3, [r7, #4]
    d4b8:	7e5b      	ldrb	r3, [r3, #25]
    d4ba:	2b01      	cmp	r3, #1
    d4bc:	d013      	beq.n	d4e6 <_ZN12Adafruit_GFX11setRotationEh+0x4c>
    d4be:	dc02      	bgt.n	d4c6 <_ZN12Adafruit_GFX11setRotationEh+0x2c>
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	d005      	beq.n	d4d0 <_ZN12Adafruit_GFX11setRotationEh+0x36>
        case 3:
            _width  = HEIGHT;
            _height = WIDTH;
            break;
    }
}
    d4c4:	e01a      	b.n	d4fc <_ZN12Adafruit_GFX11setRotationEh+0x62>
    switch(rotation) {
    d4c6:	2b02      	cmp	r3, #2
    d4c8:	d002      	beq.n	d4d0 <_ZN12Adafruit_GFX11setRotationEh+0x36>
    d4ca:	2b03      	cmp	r3, #3
    d4cc:	d00b      	beq.n	d4e6 <_ZN12Adafruit_GFX11setRotationEh+0x4c>
}
    d4ce:	e015      	b.n	d4fc <_ZN12Adafruit_GFX11setRotationEh+0x62>
            _width  = WIDTH;
    d4d0:	687b      	ldr	r3, [r7, #4]
    d4d2:	2208      	movs	r2, #8
    d4d4:	5e9a      	ldrsh	r2, [r3, r2]
    d4d6:	687b      	ldr	r3, [r7, #4]
    d4d8:	819a      	strh	r2, [r3, #12]
            _height = HEIGHT;
    d4da:	687b      	ldr	r3, [r7, #4]
    d4dc:	220a      	movs	r2, #10
    d4de:	5e9a      	ldrsh	r2, [r3, r2]
    d4e0:	687b      	ldr	r3, [r7, #4]
    d4e2:	81da      	strh	r2, [r3, #14]
            break;
    d4e4:	e00a      	b.n	d4fc <_ZN12Adafruit_GFX11setRotationEh+0x62>
            _width  = HEIGHT;
    d4e6:	687b      	ldr	r3, [r7, #4]
    d4e8:	220a      	movs	r2, #10
    d4ea:	5e9a      	ldrsh	r2, [r3, r2]
    d4ec:	687b      	ldr	r3, [r7, #4]
    d4ee:	819a      	strh	r2, [r3, #12]
            _height = WIDTH;
    d4f0:	687b      	ldr	r3, [r7, #4]
    d4f2:	2208      	movs	r2, #8
    d4f4:	5e9a      	ldrsh	r2, [r3, r2]
    d4f6:	687b      	ldr	r3, [r7, #4]
    d4f8:	81da      	strh	r2, [r3, #14]
            break;
    d4fa:	46c0      	nop			; (mov r8, r8)
}
    d4fc:	46c0      	nop			; (mov r8, r8)
    d4fe:	46bd      	mov	sp, r7
    d500:	b002      	add	sp, #8
    d502:	bd80      	pop	{r7, pc}

0000d504 <_ZNK12Adafruit_GFX5widthEv>:
        *h  = maxy - miny + 1;
    }
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
    d504:	b580      	push	{r7, lr}
    d506:	b082      	sub	sp, #8
    d508:	af00      	add	r7, sp, #0
    d50a:	6078      	str	r0, [r7, #4]
    return _width;
    d50c:	687b      	ldr	r3, [r7, #4]
    d50e:	220c      	movs	r2, #12
    d510:	5e9b      	ldrsh	r3, [r3, r2]
}
    d512:	0018      	movs	r0, r3
    d514:	46bd      	mov	sp, r7
    d516:	b002      	add	sp, #8
    d518:	bd80      	pop	{r7, pc}

0000d51a <_ZNK12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) const {
    d51a:	b580      	push	{r7, lr}
    d51c:	b082      	sub	sp, #8
    d51e:	af00      	add	r7, sp, #0
    d520:	6078      	str	r0, [r7, #4]
    return _height;
    d522:	687b      	ldr	r3, [r7, #4]
    d524:	220e      	movs	r2, #14
    d526:	5e9b      	ldrsh	r3, [r3, r2]
}
    d528:	0018      	movs	r0, r3
    d52a:	46bd      	mov	sp, r7
    d52c:	b002      	add	sp, #8
    d52e:	bd80      	pop	{r7, pc}

0000d530 <_ZN12Adafruit_GFX13invertDisplayEb>:

void Adafruit_GFX::invertDisplay(boolean i) {
    d530:	b580      	push	{r7, lr}
    d532:	b082      	sub	sp, #8
    d534:	af00      	add	r7, sp, #0
    d536:	6078      	str	r0, [r7, #4]
    d538:	000a      	movs	r2, r1
    d53a:	1cfb      	adds	r3, r7, #3
    d53c:	701a      	strb	r2, [r3, #0]
    // Do nothing, must be subclassed if supported by hardware
}
    d53e:	46c0      	nop			; (mov r8, r8)
    d540:	46bd      	mov	sp, r7
    d542:	b002      	add	sp, #8
    d544:	bd80      	pop	{r7, pc}

0000d546 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    d546:	b580      	push	{r7, lr}
    d548:	af00      	add	r7, sp, #0
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  while (1)
    d54a:	e7fe      	b.n	d54a <__cxa_pure_virtual+0x4>

0000d54c <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
    d54c:	b580      	push	{r7, lr}
    d54e:	b084      	sub	sp, #16
    d550:	af00      	add	r7, sp, #0
    d552:	60f8      	str	r0, [r7, #12]
    d554:	60b9      	str	r1, [r7, #8]
    d556:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
    d558:	687a      	ldr	r2, [r7, #4]
    d55a:	68b9      	ldr	r1, [r7, #8]
    d55c:	68fb      	ldr	r3, [r7, #12]
    d55e:	0018      	movs	r0, r3
    d560:	f000 f805 	bl	d56e <ltoa>
    d564:	0003      	movs	r3, r0
        }
    d566:	0018      	movs	r0, r3
    d568:	46bd      	mov	sp, r7
    d56a:	b004      	add	sp, #16
    d56c:	bd80      	pop	{r7, pc}

0000d56e <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
    d56e:	b580      	push	{r7, lr}
    d570:	b092      	sub	sp, #72	; 0x48
    d572:	af00      	add	r7, sp, #0
    d574:	60f8      	str	r0, [r7, #12]
    d576:	60b9      	str	r1, [r7, #8]
    d578:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    d57a:	2310      	movs	r3, #16
    d57c:	18fb      	adds	r3, r7, r3
    d57e:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
    d580:	68bb      	ldr	r3, [r7, #8]
    d582:	2b00      	cmp	r3, #0
    d584:	d101      	bne.n	d58a <ltoa+0x1c>
            {
                return 0;
    d586:	2300      	movs	r3, #0
    d588:	e063      	b.n	d652 <ltoa+0xe4>
            }

            if (radix > 36 || radix <= 1)
    d58a:	687b      	ldr	r3, [r7, #4]
    d58c:	2b24      	cmp	r3, #36	; 0x24
    d58e:	dc02      	bgt.n	d596 <ltoa+0x28>
    d590:	687b      	ldr	r3, [r7, #4]
    d592:	2b01      	cmp	r3, #1
    d594:	dc01      	bgt.n	d59a <ltoa+0x2c>
            {
                return 0;
    d596:	2300      	movs	r3, #0
    d598:	e05b      	b.n	d652 <ltoa+0xe4>
            }

            sign = (radix == 10 && value < 0);
    d59a:	687b      	ldr	r3, [r7, #4]
    d59c:	2b0a      	cmp	r3, #10
    d59e:	d104      	bne.n	d5aa <ltoa+0x3c>
    d5a0:	68fb      	ldr	r3, [r7, #12]
    d5a2:	2b00      	cmp	r3, #0
    d5a4:	da01      	bge.n	d5aa <ltoa+0x3c>
    d5a6:	2301      	movs	r3, #1
    d5a8:	e000      	b.n	d5ac <ltoa+0x3e>
    d5aa:	2300      	movs	r3, #0
    d5ac:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
    d5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d5b0:	2b00      	cmp	r3, #0
    d5b2:	d003      	beq.n	d5bc <ltoa+0x4e>
            {
                v = -value;
    d5b4:	68fb      	ldr	r3, [r7, #12]
    d5b6:	425b      	negs	r3, r3
    d5b8:	643b      	str	r3, [r7, #64]	; 0x40
    d5ba:	e025      	b.n	d608 <ltoa+0x9a>
            }
            else
            {
                v = (unsigned long)value;
    d5bc:	68fb      	ldr	r3, [r7, #12]
    d5be:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
    d5c0:	e022      	b.n	d608 <ltoa+0x9a>
            {
                i = v % radix;
    d5c2:	687a      	ldr	r2, [r7, #4]
    d5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d5c6:	0011      	movs	r1, r2
    d5c8:	0018      	movs	r0, r3
    d5ca:	f001 fa15 	bl	e9f8 <__aeabi_uidivmod>
    d5ce:	000b      	movs	r3, r1
    d5d0:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
    d5d2:	687b      	ldr	r3, [r7, #4]
    d5d4:	0019      	movs	r1, r3
    d5d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d5d8:	f001 f988 	bl	e8ec <__udivsi3>
    d5dc:	0003      	movs	r3, r0
    d5de:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    d5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d5e2:	2b09      	cmp	r3, #9
    d5e4:	dc08      	bgt.n	d5f8 <ltoa+0x8a>
                    *tp++ = i + '0';
    d5e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d5e8:	1c5a      	adds	r2, r3, #1
    d5ea:	647a      	str	r2, [r7, #68]	; 0x44
    d5ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d5ee:	b2d2      	uxtb	r2, r2
    d5f0:	3230      	adds	r2, #48	; 0x30
    d5f2:	b2d2      	uxtb	r2, r2
    d5f4:	701a      	strb	r2, [r3, #0]
    d5f6:	e007      	b.n	d608 <ltoa+0x9a>
                else
                    *tp++ = i + 'a' - 10;
    d5f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d5fa:	1c5a      	adds	r2, r3, #1
    d5fc:	647a      	str	r2, [r7, #68]	; 0x44
    d5fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d600:	b2d2      	uxtb	r2, r2
    d602:	3257      	adds	r2, #87	; 0x57
    d604:	b2d2      	uxtb	r2, r2
    d606:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    d608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d60a:	2b00      	cmp	r3, #0
    d60c:	d1d9      	bne.n	d5c2 <ltoa+0x54>
    d60e:	2310      	movs	r3, #16
    d610:	18fb      	adds	r3, r7, r3
    d612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d614:	429a      	cmp	r2, r3
    d616:	d0d4      	beq.n	d5c2 <ltoa+0x54>
            }

            sp = string;
    d618:	68bb      	ldr	r3, [r7, #8]
    d61a:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
    d61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d61e:	2b00      	cmp	r3, #0
    d620:	d00e      	beq.n	d640 <ltoa+0xd2>
                *sp++ = '-';
    d622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d624:	1c5a      	adds	r2, r3, #1
    d626:	63fa      	str	r2, [r7, #60]	; 0x3c
    d628:	222d      	movs	r2, #45	; 0x2d
    d62a:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d62c:	e008      	b.n	d640 <ltoa+0xd2>
                *sp++ = *--tp;
    d62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d630:	1c5a      	adds	r2, r3, #1
    d632:	63fa      	str	r2, [r7, #60]	; 0x3c
    d634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d636:	3a01      	subs	r2, #1
    d638:	647a      	str	r2, [r7, #68]	; 0x44
    d63a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d63c:	7812      	ldrb	r2, [r2, #0]
    d63e:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d640:	2310      	movs	r3, #16
    d642:	18fb      	adds	r3, r7, r3
    d644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d646:	429a      	cmp	r2, r3
    d648:	d8f1      	bhi.n	d62e <ltoa+0xc0>
            *sp = 0;
    d64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d64c:	2200      	movs	r2, #0
    d64e:	701a      	strb	r2, [r3, #0]

            return string;
    d650:	68bb      	ldr	r3, [r7, #8]
        }
    d652:	0018      	movs	r0, r3
    d654:	46bd      	mov	sp, r7
    d656:	b012      	add	sp, #72	; 0x48
    d658:	bd80      	pop	{r7, pc}

0000d65a <utoa>:

        extern char* utoa(unsigned value, char*string, int radix)
        {
    d65a:	b580      	push	{r7, lr}
    d65c:	b084      	sub	sp, #16
    d65e:	af00      	add	r7, sp, #0
    d660:	60f8      	str	r0, [r7, #12]
    d662:	60b9      	str	r1, [r7, #8]
    d664:	607a      	str	r2, [r7, #4]
            return ultoa(value, string, radix);
    d666:	687a      	ldr	r2, [r7, #4]
    d668:	68b9      	ldr	r1, [r7, #8]
    d66a:	68fb      	ldr	r3, [r7, #12]
    d66c:	0018      	movs	r0, r3
    d66e:	f000 f805 	bl	d67c <ultoa>
    d672:	0003      	movs	r3, r0
        }
    d674:	0018      	movs	r0, r3
    d676:	46bd      	mov	sp, r7
    d678:	b004      	add	sp, #16
    d67a:	bd80      	pop	{r7, pc}

0000d67c <ultoa>:

        extern char* ultoa(unsigned long value, char*string, int radix)
        {
    d67c:	b580      	push	{r7, lr}
    d67e:	b092      	sub	sp, #72	; 0x48
    d680:	af00      	add	r7, sp, #0
    d682:	60f8      	str	r0, [r7, #12]
    d684:	60b9      	str	r1, [r7, #8]
    d686:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
    d688:	2314      	movs	r3, #20
    d68a:	18fb      	adds	r3, r7, r3
    d68c:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v = value;
    d68e:	68fb      	ldr	r3, [r7, #12]
    d690:	643b      	str	r3, [r7, #64]	; 0x40
            char* sp;

            if (string == NULL)
    d692:	68bb      	ldr	r3, [r7, #8]
    d694:	2b00      	cmp	r3, #0
    d696:	d101      	bne.n	d69c <ultoa+0x20>
            {
                return 0;
    d698:	2300      	movs	r3, #0
    d69a:	e047      	b.n	d72c <ultoa+0xb0>
            }

            if (radix > 36 || radix <= 1)
    d69c:	687b      	ldr	r3, [r7, #4]
    d69e:	2b24      	cmp	r3, #36	; 0x24
    d6a0:	dc02      	bgt.n	d6a8 <ultoa+0x2c>
    d6a2:	687b      	ldr	r3, [r7, #4]
    d6a4:	2b01      	cmp	r3, #1
    d6a6:	dc24      	bgt.n	d6f2 <ultoa+0x76>
            {
                return 0;
    d6a8:	2300      	movs	r3, #0
    d6aa:	e03f      	b.n	d72c <ultoa+0xb0>
            }

            while (v || tp == tmp)
            {
                i = v % radix;
    d6ac:	687a      	ldr	r2, [r7, #4]
    d6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d6b0:	0011      	movs	r1, r2
    d6b2:	0018      	movs	r0, r3
    d6b4:	f001 f9a0 	bl	e9f8 <__aeabi_uidivmod>
    d6b8:	000b      	movs	r3, r1
    d6ba:	63bb      	str	r3, [r7, #56]	; 0x38
                v = v / radix;
    d6bc:	687b      	ldr	r3, [r7, #4]
    d6be:	0019      	movs	r1, r3
    d6c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d6c2:	f001 f913 	bl	e8ec <__udivsi3>
    d6c6:	0003      	movs	r3, r0
    d6c8:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
    d6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d6cc:	2b09      	cmp	r3, #9
    d6ce:	dc08      	bgt.n	d6e2 <ultoa+0x66>
                    *tp++ = i + '0';
    d6d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d6d2:	1c5a      	adds	r2, r3, #1
    d6d4:	647a      	str	r2, [r7, #68]	; 0x44
    d6d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d6d8:	b2d2      	uxtb	r2, r2
    d6da:	3230      	adds	r2, #48	; 0x30
    d6dc:	b2d2      	uxtb	r2, r2
    d6de:	701a      	strb	r2, [r3, #0]
    d6e0:	e007      	b.n	d6f2 <ultoa+0x76>
                else
                    *tp++ = i + 'a' - 10;
    d6e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d6e4:	1c5a      	adds	r2, r3, #1
    d6e6:	647a      	str	r2, [r7, #68]	; 0x44
    d6e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d6ea:	b2d2      	uxtb	r2, r2
    d6ec:	3257      	adds	r2, #87	; 0x57
    d6ee:	b2d2      	uxtb	r2, r2
    d6f0:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
    d6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d6f4:	2b00      	cmp	r3, #0
    d6f6:	d1d9      	bne.n	d6ac <ultoa+0x30>
    d6f8:	2314      	movs	r3, #20
    d6fa:	18fb      	adds	r3, r7, r3
    d6fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d6fe:	429a      	cmp	r2, r3
    d700:	d0d4      	beq.n	d6ac <ultoa+0x30>
            }

            sp = string;
    d702:	68bb      	ldr	r3, [r7, #8]
    d704:	63fb      	str	r3, [r7, #60]	; 0x3c


            while (tp > tmp)
    d706:	e008      	b.n	d71a <ultoa+0x9e>
                *sp++ = *--tp;
    d708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d70a:	1c5a      	adds	r2, r3, #1
    d70c:	63fa      	str	r2, [r7, #60]	; 0x3c
    d70e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d710:	3a01      	subs	r2, #1
    d712:	647a      	str	r2, [r7, #68]	; 0x44
    d714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d716:	7812      	ldrb	r2, [r2, #0]
    d718:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
    d71a:	2314      	movs	r3, #20
    d71c:	18fb      	adds	r3, r7, r3
    d71e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d720:	429a      	cmp	r2, r3
    d722:	d8f1      	bhi.n	d708 <ultoa+0x8c>
            *sp = 0;
    d724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d726:	2200      	movs	r2, #0
    d728:	701a      	strb	r2, [r3, #0]

            return string;
    d72a:	68bb      	ldr	r3, [r7, #8]
        }
    d72c:	0018      	movs	r0, r3
    d72e:	46bd      	mov	sp, r7
    d730:	b012      	add	sp, #72	; 0x48
    d732:	bd80      	pop	{r7, pc}

0000d734 <_Znwj>:
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <stdlib.h>

void *operator new(size_t size) {
    d734:	b580      	push	{r7, lr}
    d736:	b082      	sub	sp, #8
    d738:	af00      	add	r7, sp, #0
    d73a:	6078      	str	r0, [r7, #4]
  return malloc(size);
    d73c:	687b      	ldr	r3, [r7, #4]
    d73e:	0018      	movs	r0, r3
    d740:	f003 f86c 	bl	1081c <malloc>
    d744:	0003      	movs	r3, r0
}
    d746:	0018      	movs	r0, r3
    d748:	46bd      	mov	sp, r7
    d74a:	b002      	add	sp, #8
    d74c:	bd80      	pop	{r7, pc}

0000d74e <_ZdlPv>:

void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
    d74e:	b580      	push	{r7, lr}
    d750:	b082      	sub	sp, #8
    d752:	af00      	add	r7, sp, #0
    d754:	6078      	str	r0, [r7, #4]
  free(ptr);
    d756:	687b      	ldr	r3, [r7, #4]
    d758:	0018      	movs	r0, r3
    d75a:	f003 f869 	bl	10830 <free>
}
    d75e:	46c0      	nop			; (mov r8, r8)
    d760:	46bd      	mov	sp, r7
    d762:	b002      	add	sp, #8
    d764:	bd80      	pop	{r7, pc}
	...

0000d768 <__NVIC_EnableIRQ>:
{
    d768:	b580      	push	{r7, lr}
    d76a:	b082      	sub	sp, #8
    d76c:	af00      	add	r7, sp, #0
    d76e:	0002      	movs	r2, r0
    d770:	1dfb      	adds	r3, r7, #7
    d772:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    d774:	1dfb      	adds	r3, r7, #7
    d776:	781b      	ldrb	r3, [r3, #0]
    d778:	2b7f      	cmp	r3, #127	; 0x7f
    d77a:	d809      	bhi.n	d790 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    d77c:	4b06      	ldr	r3, [pc, #24]	; (d798 <__NVIC_EnableIRQ+0x30>)
    d77e:	1dfa      	adds	r2, r7, #7
    d780:	7812      	ldrb	r2, [r2, #0]
    d782:	b252      	sxtb	r2, r2
    d784:	211f      	movs	r1, #31
    d786:	400a      	ands	r2, r1
    d788:	2101      	movs	r1, #1
    d78a:	4091      	lsls	r1, r2
    d78c:	000a      	movs	r2, r1
    d78e:	601a      	str	r2, [r3, #0]
}
    d790:	46c0      	nop			; (mov r8, r8)
    d792:	46bd      	mov	sp, r7
    d794:	b002      	add	sp, #8
    d796:	bd80      	pop	{r7, pc}
    d798:	e000e100 	.word	0xe000e100

0000d79c <__NVIC_SetPriority>:
{
    d79c:	b5b0      	push	{r4, r5, r7, lr}
    d79e:	b082      	sub	sp, #8
    d7a0:	af00      	add	r7, sp, #0
    d7a2:	0002      	movs	r2, r0
    d7a4:	6039      	str	r1, [r7, #0]
    d7a6:	1dfb      	adds	r3, r7, #7
    d7a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    d7aa:	1dfb      	adds	r3, r7, #7
    d7ac:	781b      	ldrb	r3, [r3, #0]
    d7ae:	2b7f      	cmp	r3, #127	; 0x7f
    d7b0:	d828      	bhi.n	d804 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d7b2:	4c2f      	ldr	r4, [pc, #188]	; (d870 <__NVIC_SetPriority+0xd4>)
    d7b4:	1dfb      	adds	r3, r7, #7
    d7b6:	781b      	ldrb	r3, [r3, #0]
    d7b8:	b25b      	sxtb	r3, r3
    d7ba:	089b      	lsrs	r3, r3, #2
    d7bc:	492c      	ldr	r1, [pc, #176]	; (d870 <__NVIC_SetPriority+0xd4>)
    d7be:	1dfa      	adds	r2, r7, #7
    d7c0:	7812      	ldrb	r2, [r2, #0]
    d7c2:	b252      	sxtb	r2, r2
    d7c4:	0892      	lsrs	r2, r2, #2
    d7c6:	32c0      	adds	r2, #192	; 0xc0
    d7c8:	0092      	lsls	r2, r2, #2
    d7ca:	5852      	ldr	r2, [r2, r1]
    d7cc:	1df9      	adds	r1, r7, #7
    d7ce:	7809      	ldrb	r1, [r1, #0]
    d7d0:	b249      	sxtb	r1, r1
    d7d2:	2003      	movs	r0, #3
    d7d4:	4001      	ands	r1, r0
    d7d6:	00c9      	lsls	r1, r1, #3
    d7d8:	20ff      	movs	r0, #255	; 0xff
    d7da:	4088      	lsls	r0, r1
    d7dc:	0001      	movs	r1, r0
    d7de:	43c9      	mvns	r1, r1
    d7e0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    d7e2:	683a      	ldr	r2, [r7, #0]
    d7e4:	0192      	lsls	r2, r2, #6
    d7e6:	20ff      	movs	r0, #255	; 0xff
    d7e8:	4010      	ands	r0, r2
    d7ea:	1dfa      	adds	r2, r7, #7
    d7ec:	7812      	ldrb	r2, [r2, #0]
    d7ee:	b252      	sxtb	r2, r2
    d7f0:	2503      	movs	r5, #3
    d7f2:	402a      	ands	r2, r5
    d7f4:	00d2      	lsls	r2, r2, #3
    d7f6:	4090      	lsls	r0, r2
    d7f8:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d7fa:	430a      	orrs	r2, r1
    d7fc:	33c0      	adds	r3, #192	; 0xc0
    d7fe:	009b      	lsls	r3, r3, #2
    d800:	511a      	str	r2, [r3, r4]
}
    d802:	e031      	b.n	d868 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d804:	4c1b      	ldr	r4, [pc, #108]	; (d874 <__NVIC_SetPriority+0xd8>)
    d806:	1dfb      	adds	r3, r7, #7
    d808:	781b      	ldrb	r3, [r3, #0]
    d80a:	b25b      	sxtb	r3, r3
    d80c:	220f      	movs	r2, #15
    d80e:	4013      	ands	r3, r2
    d810:	3b08      	subs	r3, #8
    d812:	0899      	lsrs	r1, r3, #2
    d814:	4a17      	ldr	r2, [pc, #92]	; (d874 <__NVIC_SetPriority+0xd8>)
    d816:	1dfb      	adds	r3, r7, #7
    d818:	781b      	ldrb	r3, [r3, #0]
    d81a:	b25b      	sxtb	r3, r3
    d81c:	200f      	movs	r0, #15
    d81e:	4003      	ands	r3, r0
    d820:	3b08      	subs	r3, #8
    d822:	089b      	lsrs	r3, r3, #2
    d824:	3306      	adds	r3, #6
    d826:	009b      	lsls	r3, r3, #2
    d828:	18d3      	adds	r3, r2, r3
    d82a:	3304      	adds	r3, #4
    d82c:	681b      	ldr	r3, [r3, #0]
    d82e:	1dfa      	adds	r2, r7, #7
    d830:	7812      	ldrb	r2, [r2, #0]
    d832:	b252      	sxtb	r2, r2
    d834:	2003      	movs	r0, #3
    d836:	4002      	ands	r2, r0
    d838:	00d2      	lsls	r2, r2, #3
    d83a:	20ff      	movs	r0, #255	; 0xff
    d83c:	4090      	lsls	r0, r2
    d83e:	0002      	movs	r2, r0
    d840:	43d2      	mvns	r2, r2
    d842:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    d844:	683b      	ldr	r3, [r7, #0]
    d846:	019b      	lsls	r3, r3, #6
    d848:	20ff      	movs	r0, #255	; 0xff
    d84a:	4018      	ands	r0, r3
    d84c:	1dfb      	adds	r3, r7, #7
    d84e:	781b      	ldrb	r3, [r3, #0]
    d850:	b25b      	sxtb	r3, r3
    d852:	2503      	movs	r5, #3
    d854:	402b      	ands	r3, r5
    d856:	00db      	lsls	r3, r3, #3
    d858:	4098      	lsls	r0, r3
    d85a:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    d85c:	431a      	orrs	r2, r3
    d85e:	1d8b      	adds	r3, r1, #6
    d860:	009b      	lsls	r3, r3, #2
    d862:	18e3      	adds	r3, r4, r3
    d864:	3304      	adds	r3, #4
    d866:	601a      	str	r2, [r3, #0]
}
    d868:	46c0      	nop			; (mov r8, r8)
    d86a:	46bd      	mov	sp, r7
    d86c:	b002      	add	sp, #8
    d86e:	bdb0      	pop	{r4, r5, r7, pc}
    d870:	e000e100 	.word	0xe000e100
    d874:	e000ed00 	.word	0xe000ed00

0000d878 <_ZN6SERCOMC1EP6Sercom>:
// Default rise time in nanoseconds, based on 4.7K ohm pull up resistors
// you can override this value in your variant if needed
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
    d878:	b580      	push	{r7, lr}
    d87a:	b082      	sub	sp, #8
    d87c:	af00      	add	r7, sp, #0
    d87e:	6078      	str	r0, [r7, #4]
    d880:	6039      	str	r1, [r7, #0]
{
  sercom = s;
    d882:	687b      	ldr	r3, [r7, #4]
    d884:	683a      	ldr	r2, [r7, #0]
    d886:	601a      	str	r2, [r3, #0]
}
    d888:	687b      	ldr	r3, [r7, #4]
    d88a:	0018      	movs	r0, r3
    d88c:	46bd      	mov	sp, r7
    d88e:	b002      	add	sp, #8
    d890:	bd80      	pop	{r7, pc}
	...

0000d894 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
/* 	=========================
 *	===== Sercom UART
 *	=========================
*/
void SERCOM::initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate)
{
    d894:	b580      	push	{r7, lr}
    d896:	b086      	sub	sp, #24
    d898:	af00      	add	r7, sp, #0
    d89a:	60f8      	str	r0, [r7, #12]
    d89c:	0008      	movs	r0, r1
    d89e:	0011      	movs	r1, r2
    d8a0:	607b      	str	r3, [r7, #4]
    d8a2:	230b      	movs	r3, #11
    d8a4:	18fb      	adds	r3, r7, r3
    d8a6:	1c02      	adds	r2, r0, #0
    d8a8:	701a      	strb	r2, [r3, #0]
    d8aa:	230a      	movs	r3, #10
    d8ac:	18fb      	adds	r3, r7, r3
    d8ae:	1c0a      	adds	r2, r1, #0
    d8b0:	701a      	strb	r2, [r3, #0]
  initClockNVIC();
    d8b2:	68fb      	ldr	r3, [r7, #12]
    d8b4:	0018      	movs	r0, r3
    d8b6:	f000 fd53 	bl	e360 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    d8ba:	68fb      	ldr	r3, [r7, #12]
    d8bc:	0018      	movs	r0, r3
    d8be:	f000 f8d0 	bl	da62 <_ZN6SERCOM9resetUARTEv>

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    d8c2:	68fb      	ldr	r3, [r7, #12]
    d8c4:	681b      	ldr	r3, [r3, #0]
    d8c6:	220b      	movs	r2, #11
    d8c8:	18ba      	adds	r2, r7, r2
    d8ca:	7812      	ldrb	r2, [r2, #0]
    d8cc:	0092      	lsls	r2, r2, #2
    d8ce:	0011      	movs	r1, r2
    d8d0:	221c      	movs	r2, #28
    d8d2:	4011      	ands	r1, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    d8d4:	220a      	movs	r2, #10
    d8d6:	18ba      	adds	r2, r7, r2
    d8d8:	7812      	ldrb	r2, [r2, #0]
    d8da:	0352      	lsls	r2, r2, #13
    d8dc:	0412      	lsls	r2, r2, #16
    d8de:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    d8e0:	430a      	orrs	r2, r1
    d8e2:	601a      	str	r2, [r3, #0]

  //Setting the Interrupt register
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    d8e4:	68fb      	ldr	r3, [r7, #12]
    d8e6:	681b      	ldr	r3, [r3, #0]
    d8e8:	2284      	movs	r2, #132	; 0x84
    d8ea:	759a      	strb	r2, [r3, #22]
                                SERCOM_USART_INTENSET_ERROR; //All others errors

  if ( mode == UART_INT_CLOCK )
    d8ec:	230b      	movs	r3, #11
    d8ee:	18fb      	adds	r3, r7, r3
    d8f0:	781b      	ldrb	r3, [r3, #0]
    d8f2:	2b01      	cmp	r3, #1
    d8f4:	d13b      	bne.n	d96e <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xda>
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    d8f6:	230a      	movs	r3, #10
    d8f8:	18fb      	adds	r3, r7, r3
    d8fa:	781b      	ldrb	r3, [r3, #0]
    d8fc:	2b01      	cmp	r3, #1
    d8fe:	d104      	bne.n	d90a <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x76>
      sampleRateValue = 16;
    d900:	2316      	movs	r3, #22
    d902:	18fb      	adds	r3, r7, r3
    d904:	2210      	movs	r2, #16
    d906:	801a      	strh	r2, [r3, #0]
    d908:	e003      	b.n	d912 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x7e>
    } else {
      sampleRateValue = 8;
    d90a:	2316      	movs	r3, #22
    d90c:	18fb      	adds	r3, r7, r3
    d90e:	2208      	movs	r2, #8
    d910:	801a      	strh	r2, [r3, #0]
    }

    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    d912:	4b19      	ldr	r3, [pc, #100]	; (d978 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xe4>)
    d914:	681b      	ldr	r3, [r3, #0]
    d916:	00d8      	lsls	r0, r3, #3
    d918:	2316      	movs	r3, #22
    d91a:	18fb      	adds	r3, r7, r3
    d91c:	881b      	ldrh	r3, [r3, #0]
    d91e:	687a      	ldr	r2, [r7, #4]
    d920:	4353      	muls	r3, r2
    d922:	0019      	movs	r1, r3
    d924:	f000 ffe2 	bl	e8ec <__udivsi3>
    d928:	0003      	movs	r3, r0
    d92a:	613b      	str	r3, [r7, #16]

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    d92c:	68fb      	ldr	r3, [r7, #12]
    d92e:	681a      	ldr	r2, [r3, #0]
    d930:	693b      	ldr	r3, [r7, #16]
    d932:	b2db      	uxtb	r3, r3
    d934:	1c19      	adds	r1, r3, #0
    d936:	2307      	movs	r3, #7
    d938:	400b      	ands	r3, r1
    d93a:	b2d9      	uxtb	r1, r3
    d93c:	8993      	ldrh	r3, [r2, #12]
    d93e:	0348      	lsls	r0, r1, #13
    d940:	04db      	lsls	r3, r3, #19
    d942:	0cdb      	lsrs	r3, r3, #19
    d944:	1c19      	adds	r1, r3, #0
    d946:	1c03      	adds	r3, r0, #0
    d948:	430b      	orrs	r3, r1
    d94a:	8193      	strh	r3, [r2, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    d94c:	68fb      	ldr	r3, [r7, #12]
    d94e:	681a      	ldr	r2, [r3, #0]
    d950:	693b      	ldr	r3, [r7, #16]
    d952:	08db      	lsrs	r3, r3, #3
    d954:	b29b      	uxth	r3, r3
    d956:	04db      	lsls	r3, r3, #19
    d958:	0cdb      	lsrs	r3, r3, #19
    d95a:	b299      	uxth	r1, r3
    d95c:	8993      	ldrh	r3, [r2, #12]
    d95e:	04c9      	lsls	r1, r1, #19
    d960:	0cc8      	lsrs	r0, r1, #19
    d962:	0b5b      	lsrs	r3, r3, #13
    d964:	035b      	lsls	r3, r3, #13
    d966:	1c19      	adds	r1, r3, #0
    d968:	1c03      	adds	r3, r0, #0
    d96a:	430b      	orrs	r3, r1
    d96c:	8193      	strh	r3, [r2, #12]
  }
}
    d96e:	46c0      	nop			; (mov r8, r8)
    d970:	46bd      	mov	sp, r7
    d972:	b006      	add	sp, #24
    d974:	bd80      	pop	{r7, pc}
    d976:	46c0      	nop			; (mov r8, r8)
    d978:	20000048 	.word	0x20000048

0000d97c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    d97c:	b590      	push	{r4, r7, lr}
    d97e:	b083      	sub	sp, #12
    d980:	af00      	add	r7, sp, #0
    d982:	6078      	str	r0, [r7, #4]
    d984:	000c      	movs	r4, r1
    d986:	0010      	movs	r0, r2
    d988:	0019      	movs	r1, r3
    d98a:	1cfb      	adds	r3, r7, #3
    d98c:	1c22      	adds	r2, r4, #0
    d98e:	701a      	strb	r2, [r3, #0]
    d990:	1cbb      	adds	r3, r7, #2
    d992:	1c02      	adds	r2, r0, #0
    d994:	701a      	strb	r2, [r3, #0]
    d996:	1c7b      	adds	r3, r7, #1
    d998:	1c0a      	adds	r2, r1, #0
    d99a:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d99c:	687b      	ldr	r3, [r7, #4]
    d99e:	681b      	ldr	r3, [r3, #0]
    d9a0:	687a      	ldr	r2, [r7, #4]
    d9a2:	6812      	ldr	r2, [r2, #0]
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    d9a4:	6811      	ldr	r1, [r2, #0]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d9a6:	1c7a      	adds	r2, r7, #1
    d9a8:	7812      	ldrb	r2, [r2, #0]
    d9aa:	3a02      	subs	r2, #2
    d9ac:	1e50      	subs	r0, r2, #1
    d9ae:	4182      	sbcs	r2, r0
    d9b0:	b2d2      	uxtb	r2, r2
    d9b2:	0612      	lsls	r2, r2, #24
    d9b4:	0010      	movs	r0, r2
    d9b6:	22f0      	movs	r2, #240	; 0xf0
    d9b8:	0512      	lsls	r2, r2, #20
    d9ba:	4002      	ands	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    d9bc:	1cb8      	adds	r0, r7, #2
    d9be:	7800      	ldrb	r0, [r0, #0]
    d9c0:	0780      	lsls	r0, r0, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d9c2:	4302      	orrs	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    d9c4:	430a      	orrs	r2, r1
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    d9c6:	601a      	str	r2, [r3, #0]

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d9c8:	687b      	ldr	r3, [r7, #4]
    d9ca:	681b      	ldr	r3, [r3, #0]
    d9cc:	687a      	ldr	r2, [r7, #4]
    d9ce:	6812      	ldr	r2, [r2, #0]
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    d9d0:	6851      	ldr	r1, [r2, #4]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d9d2:	1cfa      	adds	r2, r7, #3
    d9d4:	7812      	ldrb	r2, [r2, #0]
    d9d6:	2007      	movs	r0, #7
    d9d8:	4002      	ands	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    d9da:	2018      	movs	r0, #24
    d9dc:	1838      	adds	r0, r7, r0
    d9de:	7800      	ldrb	r0, [r0, #0]
    d9e0:	0180      	lsls	r0, r0, #6
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d9e2:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    d9e4:	1c78      	adds	r0, r7, #1
    d9e6:	7800      	ldrb	r0, [r0, #0]
    d9e8:	2802      	cmp	r0, #2
    d9ea:	d003      	beq.n	d9f4 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x78>
    d9ec:	1c78      	adds	r0, r7, #1
    d9ee:	7800      	ldrb	r0, [r0, #0]
    d9f0:	0340      	lsls	r0, r0, #13
    d9f2:	e000      	b.n	d9f6 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x7a>
    d9f4:	2000      	movs	r0, #0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    d9f6:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    d9f8:	430a      	orrs	r2, r1
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    d9fa:	605a      	str	r2, [r3, #4]
}
    d9fc:	46c0      	nop			; (mov r8, r8)
    d9fe:	46bd      	mov	sp, r7
    da00:	b003      	add	sp, #12
    da02:	bd90      	pop	{r4, r7, pc}

0000da04 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    da04:	b590      	push	{r4, r7, lr}
    da06:	b083      	sub	sp, #12
    da08:	af00      	add	r7, sp, #0
    da0a:	6078      	str	r0, [r7, #4]
    da0c:	0008      	movs	r0, r1
    da0e:	0011      	movs	r1, r2
    da10:	1cfb      	adds	r3, r7, #3
    da12:	1c02      	adds	r2, r0, #0
    da14:	701a      	strb	r2, [r3, #0]
    da16:	1cbb      	adds	r3, r7, #2
    da18:	1c0a      	adds	r2, r1, #0
    da1a:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    da1c:	687b      	ldr	r3, [r7, #4]
    da1e:	681b      	ldr	r3, [r3, #0]
    da20:	687a      	ldr	r2, [r7, #4]
    da22:	6812      	ldr	r2, [r2, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    da24:	6811      	ldr	r1, [r2, #0]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    da26:	1cfa      	adds	r2, r7, #3
    da28:	7812      	ldrb	r2, [r2, #0]
    da2a:	0412      	lsls	r2, r2, #16
    da2c:	0010      	movs	r0, r2
    da2e:	22c0      	movs	r2, #192	; 0xc0
    da30:	0292      	lsls	r2, r2, #10
    da32:	4010      	ands	r0, r2
                SERCOM_USART_CTRLA_RXPO(rxPad);
    da34:	1cba      	adds	r2, r7, #2
    da36:	7812      	ldrb	r2, [r2, #0]
    da38:	0512      	lsls	r2, r2, #20
    da3a:	0014      	movs	r4, r2
    da3c:	22c0      	movs	r2, #192	; 0xc0
    da3e:	0392      	lsls	r2, r2, #14
    da40:	4022      	ands	r2, r4
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    da42:	4302      	orrs	r2, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    da44:	430a      	orrs	r2, r1
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    da46:	601a      	str	r2, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    da48:	687b      	ldr	r3, [r7, #4]
    da4a:	681b      	ldr	r3, [r3, #0]
    da4c:	687a      	ldr	r2, [r7, #4]
    da4e:	6812      	ldr	r2, [r2, #0]
    da50:	6852      	ldr	r2, [r2, #4]
    da52:	21c0      	movs	r1, #192	; 0xc0
    da54:	0289      	lsls	r1, r1, #10
    da56:	430a      	orrs	r2, r1
    da58:	605a      	str	r2, [r3, #4]
}
    da5a:	46c0      	nop			; (mov r8, r8)
    da5c:	46bd      	mov	sp, r7
    da5e:	b003      	add	sp, #12
    da60:	bd90      	pop	{r4, r7, pc}

0000da62 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
    da62:	b580      	push	{r7, lr}
    da64:	b082      	sub	sp, #8
    da66:	af00      	add	r7, sp, #0
    da68:	6078      	str	r0, [r7, #4]
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    da6a:	687b      	ldr	r3, [r7, #4]
    da6c:	681b      	ldr	r3, [r3, #0]
    da6e:	681a      	ldr	r2, [r3, #0]
    da70:	2101      	movs	r1, #1
    da72:	430a      	orrs	r2, r1
    da74:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    da76:	687b      	ldr	r3, [r7, #4]
    da78:	681b      	ldr	r3, [r3, #0]
    da7a:	681b      	ldr	r3, [r3, #0]
    da7c:	07db      	lsls	r3, r3, #31
    da7e:	0fdb      	lsrs	r3, r3, #31
    da80:	b2db      	uxtb	r3, r3
    da82:	2b00      	cmp	r3, #0
    da84:	d107      	bne.n	da96 <_ZN6SERCOM9resetUARTEv+0x34>
    da86:	687b      	ldr	r3, [r7, #4]
    da88:	681b      	ldr	r3, [r3, #0]
    da8a:	69db      	ldr	r3, [r3, #28]
    da8c:	07db      	lsls	r3, r3, #31
    da8e:	0fdb      	lsrs	r3, r3, #31
    da90:	b2db      	uxtb	r3, r3
    da92:	2b00      	cmp	r3, #0
    da94:	d001      	beq.n	da9a <_ZN6SERCOM9resetUARTEv+0x38>
    da96:	2301      	movs	r3, #1
    da98:	e000      	b.n	da9c <_ZN6SERCOM9resetUARTEv+0x3a>
    da9a:	2300      	movs	r3, #0
    da9c:	2b00      	cmp	r3, #0
    da9e:	d000      	beq.n	daa2 <_ZN6SERCOM9resetUARTEv+0x40>
    daa0:	e7e9      	b.n	da76 <_ZN6SERCOM9resetUARTEv+0x14>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    daa2:	46c0      	nop			; (mov r8, r8)
    daa4:	46bd      	mov	sp, r7
    daa6:	b002      	add	sp, #8
    daa8:	bd80      	pop	{r7, pc}

0000daaa <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
    daaa:	b580      	push	{r7, lr}
    daac:	b082      	sub	sp, #8
    daae:	af00      	add	r7, sp, #0
    dab0:	6078      	str	r0, [r7, #4]
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    dab2:	687b      	ldr	r3, [r7, #4]
    dab4:	681b      	ldr	r3, [r3, #0]
    dab6:	681a      	ldr	r2, [r3, #0]
    dab8:	2102      	movs	r1, #2
    daba:	430a      	orrs	r2, r1
    dabc:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    dabe:	687b      	ldr	r3, [r7, #4]
    dac0:	681b      	ldr	r3, [r3, #0]
    dac2:	69db      	ldr	r3, [r3, #28]
    dac4:	079b      	lsls	r3, r3, #30
    dac6:	0fdb      	lsrs	r3, r3, #31
    dac8:	b2db      	uxtb	r3, r3
    daca:	2b00      	cmp	r3, #0
    dacc:	d000      	beq.n	dad0 <_ZN6SERCOM10enableUARTEv+0x26>
    dace:	e7f6      	b.n	dabe <_ZN6SERCOM10enableUARTEv+0x14>
}
    dad0:	46c0      	nop			; (mov r8, r8)
    dad2:	46bd      	mov	sp, r7
    dad4:	b002      	add	sp, #8
    dad6:	bd80      	pop	{r7, pc}

0000dad8 <_ZN6SERCOM9flushUARTEv>:

void SERCOM::flushUART()
{
    dad8:	b580      	push	{r7, lr}
    dada:	b082      	sub	sp, #8
    dadc:	af00      	add	r7, sp, #0
    dade:	6078      	str	r0, [r7, #4]
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    dae0:	687b      	ldr	r3, [r7, #4]
    dae2:	0018      	movs	r0, r3
    dae4:	f000 f849 	bl	db7a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    dae8:	1e03      	subs	r3, r0, #0
    daea:	d10b      	bne.n	db04 <_ZN6SERCOM9flushUARTEv+0x2c>
    return;

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
    daec:	687b      	ldr	r3, [r7, #4]
    daee:	681b      	ldr	r3, [r3, #0]
    daf0:	7e1b      	ldrb	r3, [r3, #24]
    daf2:	079b      	lsls	r3, r3, #30
    daf4:	0fdb      	lsrs	r3, r3, #31
    daf6:	b2db      	uxtb	r3, r3
    daf8:	2201      	movs	r2, #1
    dafa:	4053      	eors	r3, r2
    dafc:	b2db      	uxtb	r3, r3
    dafe:	2b00      	cmp	r3, #0
    db00:	d001      	beq.n	db06 <_ZN6SERCOM9flushUARTEv+0x2e>
    db02:	e7f3      	b.n	daec <_ZN6SERCOM9flushUARTEv+0x14>
    return;
    db04:	46c0      	nop			; (mov r8, r8)
}
    db06:	46bd      	mov	sp, r7
    db08:	b002      	add	sp, #8
    db0a:	bd80      	pop	{r7, pc}

0000db0c <_ZN6SERCOM15clearStatusUARTEv>:

void SERCOM::clearStatusUART()
{
    db0c:	b580      	push	{r7, lr}
    db0e:	b082      	sub	sp, #8
    db10:	af00      	add	r7, sp, #0
    db12:	6078      	str	r0, [r7, #4]
  //Reset (with 0) the STATUS register
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    db14:	687b      	ldr	r3, [r7, #4]
    db16:	681b      	ldr	r3, [r3, #0]
    db18:	2200      	movs	r2, #0
    db1a:	835a      	strh	r2, [r3, #26]
}
    db1c:	46c0      	nop			; (mov r8, r8)
    db1e:	46bd      	mov	sp, r7
    db20:	b002      	add	sp, #8
    db22:	bd80      	pop	{r7, pc}

0000db24 <_ZN6SERCOM17availableDataUARTEv>:

bool SERCOM::availableDataUART()
{
    db24:	b580      	push	{r7, lr}
    db26:	b082      	sub	sp, #8
    db28:	af00      	add	r7, sp, #0
    db2a:	6078      	str	r0, [r7, #4]
  //RXC : Receive Complete
  return sercom->USART.INTFLAG.bit.RXC;
    db2c:	687b      	ldr	r3, [r7, #4]
    db2e:	681b      	ldr	r3, [r3, #0]
    db30:	7e1b      	ldrb	r3, [r3, #24]
    db32:	075b      	lsls	r3, r3, #29
    db34:	0fdb      	lsrs	r3, r3, #31
    db36:	b2db      	uxtb	r3, r3
}
    db38:	0018      	movs	r0, r3
    db3a:	46bd      	mov	sp, r7
    db3c:	b002      	add	sp, #8
    db3e:	bd80      	pop	{r7, pc}

0000db40 <_ZN6SERCOM11isUARTErrorEv>:

bool SERCOM::isUARTError()
{
    db40:	b580      	push	{r7, lr}
    db42:	b082      	sub	sp, #8
    db44:	af00      	add	r7, sp, #0
    db46:	6078      	str	r0, [r7, #4]
  return sercom->USART.INTFLAG.bit.ERROR;
    db48:	687b      	ldr	r3, [r7, #4]
    db4a:	681b      	ldr	r3, [r3, #0]
    db4c:	7e1b      	ldrb	r3, [r3, #24]
    db4e:	061b      	lsls	r3, r3, #24
    db50:	0fdb      	lsrs	r3, r3, #31
    db52:	b2db      	uxtb	r3, r3
}
    db54:	0018      	movs	r0, r3
    db56:	46bd      	mov	sp, r7
    db58:	b002      	add	sp, #8
    db5a:	bd80      	pop	{r7, pc}

0000db5c <_ZN6SERCOM20acknowledgeUARTErrorEv>:

void SERCOM::acknowledgeUARTError()
{
    db5c:	b580      	push	{r7, lr}
    db5e:	b082      	sub	sp, #8
    db60:	af00      	add	r7, sp, #0
    db62:	6078      	str	r0, [r7, #4]
  sercom->USART.INTFLAG.bit.ERROR = 1;
    db64:	687b      	ldr	r3, [r7, #4]
    db66:	681a      	ldr	r2, [r3, #0]
    db68:	7e13      	ldrb	r3, [r2, #24]
    db6a:	2180      	movs	r1, #128	; 0x80
    db6c:	4249      	negs	r1, r1
    db6e:	430b      	orrs	r3, r1
    db70:	7613      	strb	r3, [r2, #24]
}
    db72:	46c0      	nop			; (mov r8, r8)
    db74:	46bd      	mov	sp, r7
    db76:	b002      	add	sp, #8
    db78:	bd80      	pop	{r7, pc}

0000db7a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  //PERR : Parity Error
  return sercom->USART.STATUS.bit.PERR;
}

bool SERCOM::isDataRegisterEmptyUART()
{
    db7a:	b580      	push	{r7, lr}
    db7c:	b082      	sub	sp, #8
    db7e:	af00      	add	r7, sp, #0
    db80:	6078      	str	r0, [r7, #4]
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    db82:	687b      	ldr	r3, [r7, #4]
    db84:	681b      	ldr	r3, [r3, #0]
    db86:	7e1b      	ldrb	r3, [r3, #24]
    db88:	07db      	lsls	r3, r3, #31
    db8a:	0fdb      	lsrs	r3, r3, #31
    db8c:	b2db      	uxtb	r3, r3
}
    db8e:	0018      	movs	r0, r3
    db90:	46bd      	mov	sp, r7
    db92:	b002      	add	sp, #8
    db94:	bd80      	pop	{r7, pc}

0000db96 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
    db96:	b580      	push	{r7, lr}
    db98:	b082      	sub	sp, #8
    db9a:	af00      	add	r7, sp, #0
    db9c:	6078      	str	r0, [r7, #4]
  return sercom->USART.DATA.bit.DATA;
    db9e:	687b      	ldr	r3, [r7, #4]
    dba0:	681b      	ldr	r3, [r3, #0]
    dba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    dba4:	05db      	lsls	r3, r3, #23
    dba6:	0ddb      	lsrs	r3, r3, #23
    dba8:	b29b      	uxth	r3, r3
    dbaa:	b2db      	uxtb	r3, r3
}
    dbac:	0018      	movs	r0, r3
    dbae:	46bd      	mov	sp, r7
    dbb0:	b002      	add	sp, #8
    dbb2:	bd80      	pop	{r7, pc}

0000dbb4 <_ZN6SERCOM13writeDataUARTEh>:

int SERCOM::writeDataUART(uint8_t data)
{
    dbb4:	b580      	push	{r7, lr}
    dbb6:	b082      	sub	sp, #8
    dbb8:	af00      	add	r7, sp, #0
    dbba:	6078      	str	r0, [r7, #4]
    dbbc:	000a      	movs	r2, r1
    dbbe:	1cfb      	adds	r3, r7, #3
    dbc0:	701a      	strb	r2, [r3, #0]
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    dbc2:	687b      	ldr	r3, [r7, #4]
    dbc4:	0018      	movs	r0, r3
    dbc6:	f7ff ffd8 	bl	db7a <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    dbca:	0003      	movs	r3, r0
    dbcc:	001a      	movs	r2, r3
    dbce:	2301      	movs	r3, #1
    dbd0:	4053      	eors	r3, r2
    dbd2:	b2db      	uxtb	r3, r3
    dbd4:	2b00      	cmp	r3, #0
    dbd6:	d000      	beq.n	dbda <_ZN6SERCOM13writeDataUARTEh+0x26>
    dbd8:	e7f3      	b.n	dbc2 <_ZN6SERCOM13writeDataUARTEh+0xe>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    dbda:	687b      	ldr	r3, [r7, #4]
    dbdc:	681b      	ldr	r3, [r3, #0]
    dbde:	1cfa      	adds	r2, r7, #3
    dbe0:	7812      	ldrb	r2, [r2, #0]
    dbe2:	b292      	uxth	r2, r2
    dbe4:	851a      	strh	r2, [r3, #40]	; 0x28
  return 1;
    dbe6:	2301      	movs	r3, #1
}
    dbe8:	0018      	movs	r0, r3
    dbea:	46bd      	mov	sp, r7
    dbec:	b002      	add	sp, #8
    dbee:	bd80      	pop	{r7, pc}

0000dbf0 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
    dbf0:	b580      	push	{r7, lr}
    dbf2:	b082      	sub	sp, #8
    dbf4:	af00      	add	r7, sp, #0
    dbf6:	6078      	str	r0, [r7, #4]
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    dbf8:	687b      	ldr	r3, [r7, #4]
    dbfa:	681b      	ldr	r3, [r3, #0]
    dbfc:	2201      	movs	r2, #1
    dbfe:	759a      	strb	r2, [r3, #22]
}
    dc00:	46c0      	nop			; (mov r8, r8)
    dc02:	46bd      	mov	sp, r7
    dc04:	b002      	add	sp, #8
    dc06:	bd80      	pop	{r7, pc}

0000dc08 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
    dc08:	b580      	push	{r7, lr}
    dc0a:	b082      	sub	sp, #8
    dc0c:	af00      	add	r7, sp, #0
    dc0e:	6078      	str	r0, [r7, #4]
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    dc10:	687b      	ldr	r3, [r7, #4]
    dc12:	681b      	ldr	r3, [r3, #0]
    dc14:	2201      	movs	r2, #1
    dc16:	751a      	strb	r2, [r3, #20]
}
    dc18:	46c0      	nop			; (mov r8, r8)
    dc1a:	46bd      	mov	sp, r7
    dc1c:	b002      	add	sp, #8
    dc1e:	bd80      	pop	{r7, pc}

0000dc20 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
/*	=========================
 *	===== Sercom SPI
 *	=========================
*/
void SERCOM::initSPI(SercomSpiTXPad mosi, SercomRXPad miso, SercomSpiCharSize charSize, SercomDataOrder dataOrder)
{
    dc20:	b590      	push	{r4, r7, lr}
    dc22:	b083      	sub	sp, #12
    dc24:	af00      	add	r7, sp, #0
    dc26:	6078      	str	r0, [r7, #4]
    dc28:	000c      	movs	r4, r1
    dc2a:	0010      	movs	r0, r2
    dc2c:	0019      	movs	r1, r3
    dc2e:	1cfb      	adds	r3, r7, #3
    dc30:	1c22      	adds	r2, r4, #0
    dc32:	701a      	strb	r2, [r3, #0]
    dc34:	1cbb      	adds	r3, r7, #2
    dc36:	1c02      	adds	r2, r0, #0
    dc38:	701a      	strb	r2, [r3, #0]
    dc3a:	1c7b      	adds	r3, r7, #1
    dc3c:	1c0a      	adds	r2, r1, #0
    dc3e:	701a      	strb	r2, [r3, #0]
  resetSPI();
    dc40:	687b      	ldr	r3, [r7, #4]
    dc42:	0018      	movs	r0, r3
    dc44:	f000 f864 	bl	dd10 <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    dc48:	687b      	ldr	r3, [r7, #4]
    dc4a:	0018      	movs	r0, r3
    dc4c:	f000 fb88 	bl	e360 <_ZN6SERCOM13initClockNVICEv>

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    dc50:	687b      	ldr	r3, [r7, #4]
    dc52:	681b      	ldr	r3, [r3, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    dc54:	1cfa      	adds	r2, r7, #3
    dc56:	7812      	ldrb	r2, [r2, #0]
    dc58:	0412      	lsls	r2, r2, #16
    dc5a:	0011      	movs	r1, r2
    dc5c:	22c0      	movs	r2, #192	; 0xc0
    dc5e:	0292      	lsls	r2, r2, #10
    dc60:	4011      	ands	r1, r2
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    dc62:	1cba      	adds	r2, r7, #2
    dc64:	7812      	ldrb	r2, [r2, #0]
    dc66:	0512      	lsls	r2, r2, #20
    dc68:	0010      	movs	r0, r2
    dc6a:	22c0      	movs	r2, #192	; 0xc0
    dc6c:	0392      	lsls	r2, r2, #14
    dc6e:	4002      	ands	r2, r0
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    dc70:	430a      	orrs	r2, r1
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    dc72:	2118      	movs	r1, #24
    dc74:	1879      	adds	r1, r7, r1
    dc76:	7809      	ldrb	r1, [r1, #0]
    dc78:	0789      	lsls	r1, r1, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    dc7a:	430a      	orrs	r2, r1
    dc7c:	210c      	movs	r1, #12
    dc7e:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    dc80:	601a      	str	r2, [r3, #0]

  //Setting the CTRLB register
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    dc82:	687b      	ldr	r3, [r7, #4]
    dc84:	681b      	ldr	r3, [r3, #0]
    dc86:	1c7a      	adds	r2, r7, #1
    dc88:	7812      	ldrb	r2, [r2, #0]
    dc8a:	2107      	movs	r1, #7
    dc8c:	400a      	ands	r2, r1
    dc8e:	2180      	movs	r1, #128	; 0x80
    dc90:	0289      	lsls	r1, r1, #10
    dc92:	430a      	orrs	r2, r1
    dc94:	605a      	str	r2, [r3, #4]
                          SERCOM_SPI_CTRLB_RXEN;	//Active the SPI receiver.


}
    dc96:	46c0      	nop			; (mov r8, r8)
    dc98:	46bd      	mov	sp, r7
    dc9a:	b003      	add	sp, #12
    dc9c:	bd90      	pop	{r4, r7, pc}

0000dc9e <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    dc9e:	b590      	push	{r4, r7, lr}
    dca0:	b087      	sub	sp, #28
    dca2:	af00      	add	r7, sp, #0
    dca4:	60f8      	str	r0, [r7, #12]
    dca6:	607a      	str	r2, [r7, #4]
    dca8:	230b      	movs	r3, #11
    dcaa:	18fb      	adds	r3, r7, r3
    dcac:	1c0a      	adds	r2, r1, #0
    dcae:	701a      	strb	r2, [r3, #0]
  //Extract data from clockMode
  int cpha, cpol;

  if((clockMode & (0x1ul)) == 0 )
    dcb0:	230b      	movs	r3, #11
    dcb2:	18fb      	adds	r3, r7, r3
    dcb4:	781b      	ldrb	r3, [r3, #0]
    dcb6:	2201      	movs	r2, #1
    dcb8:	4013      	ands	r3, r2
    dcba:	d102      	bne.n	dcc2 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x24>
    cpha = 0;
    dcbc:	2300      	movs	r3, #0
    dcbe:	617b      	str	r3, [r7, #20]
    dcc0:	e001      	b.n	dcc6 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x28>
  else
    cpha = 1;
    dcc2:	2301      	movs	r3, #1
    dcc4:	617b      	str	r3, [r7, #20]

  if((clockMode & (0x2ul)) == 0)
    dcc6:	230b      	movs	r3, #11
    dcc8:	18fb      	adds	r3, r7, r3
    dcca:	781b      	ldrb	r3, [r3, #0]
    dccc:	2202      	movs	r2, #2
    dcce:	4013      	ands	r3, r2
    dcd0:	d102      	bne.n	dcd8 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x3a>
    cpol = 0;
    dcd2:	2300      	movs	r3, #0
    dcd4:	613b      	str	r3, [r7, #16]
    dcd6:	e001      	b.n	dcdc <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x3e>
  else
    cpol = 1;
    dcd8:	2301      	movs	r3, #1
    dcda:	613b      	str	r3, [r7, #16]

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dcdc:	68fb      	ldr	r3, [r7, #12]
    dcde:	681b      	ldr	r3, [r3, #0]
    dce0:	68fa      	ldr	r2, [r7, #12]
    dce2:	6812      	ldr	r2, [r2, #0]
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    dce4:	6812      	ldr	r2, [r2, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dce6:	6979      	ldr	r1, [r7, #20]
    dce8:	0708      	lsls	r0, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    dcea:	6939      	ldr	r1, [r7, #16]
    dcec:	0749      	lsls	r1, r1, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dcee:	4301      	orrs	r1, r0
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    dcf0:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    dcf2:	601a      	str	r2, [r3, #0]

  //Synchronous arithmetic
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    dcf4:	68fb      	ldr	r3, [r7, #12]
    dcf6:	681c      	ldr	r4, [r3, #0]
    dcf8:	687a      	ldr	r2, [r7, #4]
    dcfa:	68fb      	ldr	r3, [r7, #12]
    dcfc:	0011      	movs	r1, r2
    dcfe:	0018      	movs	r0, r3
    dd00:	f000 f886 	bl	de10 <_ZN6SERCOM28calculateBaudrateSynchronousEm>
    dd04:	0003      	movs	r3, r0
    dd06:	7323      	strb	r3, [r4, #12]
}
    dd08:	46c0      	nop			; (mov r8, r8)
    dd0a:	46bd      	mov	sp, r7
    dd0c:	b007      	add	sp, #28
    dd0e:	bd90      	pop	{r4, r7, pc}

0000dd10 <_ZN6SERCOM8resetSPIEv>:

void SERCOM::resetSPI()
{
    dd10:	b580      	push	{r7, lr}
    dd12:	b082      	sub	sp, #8
    dd14:	af00      	add	r7, sp, #0
    dd16:	6078      	str	r0, [r7, #4]
  //Setting the Software Reset bit to 1
  sercom->SPI.CTRLA.bit.SWRST = 1;
    dd18:	687b      	ldr	r3, [r7, #4]
    dd1a:	681b      	ldr	r3, [r3, #0]
    dd1c:	681a      	ldr	r2, [r3, #0]
    dd1e:	2101      	movs	r1, #1
    dd20:	430a      	orrs	r2, r1
    dd22:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    dd24:	687b      	ldr	r3, [r7, #4]
    dd26:	681b      	ldr	r3, [r3, #0]
    dd28:	681b      	ldr	r3, [r3, #0]
    dd2a:	07db      	lsls	r3, r3, #31
    dd2c:	0fdb      	lsrs	r3, r3, #31
    dd2e:	b2db      	uxtb	r3, r3
    dd30:	2b00      	cmp	r3, #0
    dd32:	d107      	bne.n	dd44 <_ZN6SERCOM8resetSPIEv+0x34>
    dd34:	687b      	ldr	r3, [r7, #4]
    dd36:	681b      	ldr	r3, [r3, #0]
    dd38:	69db      	ldr	r3, [r3, #28]
    dd3a:	07db      	lsls	r3, r3, #31
    dd3c:	0fdb      	lsrs	r3, r3, #31
    dd3e:	b2db      	uxtb	r3, r3
    dd40:	2b00      	cmp	r3, #0
    dd42:	d001      	beq.n	dd48 <_ZN6SERCOM8resetSPIEv+0x38>
    dd44:	2301      	movs	r3, #1
    dd46:	e000      	b.n	dd4a <_ZN6SERCOM8resetSPIEv+0x3a>
    dd48:	2300      	movs	r3, #0
    dd4a:	2b00      	cmp	r3, #0
    dd4c:	d000      	beq.n	dd50 <_ZN6SERCOM8resetSPIEv+0x40>
    dd4e:	e7e9      	b.n	dd24 <_ZN6SERCOM8resetSPIEv+0x14>
}
    dd50:	46c0      	nop			; (mov r8, r8)
    dd52:	46bd      	mov	sp, r7
    dd54:	b002      	add	sp, #8
    dd56:	bd80      	pop	{r7, pc}

0000dd58 <_ZN6SERCOM9enableSPIEv>:

void SERCOM::enableSPI()
{
    dd58:	b580      	push	{r7, lr}
    dd5a:	b082      	sub	sp, #8
    dd5c:	af00      	add	r7, sp, #0
    dd5e:	6078      	str	r0, [r7, #4]
  //Setting the enable bit to 1
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    dd60:	687b      	ldr	r3, [r7, #4]
    dd62:	681b      	ldr	r3, [r3, #0]
    dd64:	681a      	ldr	r2, [r3, #0]
    dd66:	2102      	movs	r1, #2
    dd68:	430a      	orrs	r2, r1
    dd6a:	601a      	str	r2, [r3, #0]

  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    dd6c:	687b      	ldr	r3, [r7, #4]
    dd6e:	681b      	ldr	r3, [r3, #0]
    dd70:	69db      	ldr	r3, [r3, #28]
    dd72:	079b      	lsls	r3, r3, #30
    dd74:	0fdb      	lsrs	r3, r3, #31
    dd76:	b2db      	uxtb	r3, r3
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d000      	beq.n	dd7e <_ZN6SERCOM9enableSPIEv+0x26>
    dd7c:	e7f6      	b.n	dd6c <_ZN6SERCOM9enableSPIEv+0x14>
  {
    //Waiting then enable bit from SYNCBUSY is equal to 0;
  }
}
    dd7e:	46c0      	nop			; (mov r8, r8)
    dd80:	46bd      	mov	sp, r7
    dd82:	b002      	add	sp, #8
    dd84:	bd80      	pop	{r7, pc}

0000dd86 <_ZN6SERCOM10disableSPIEv>:

void SERCOM::disableSPI()
{
    dd86:	b580      	push	{r7, lr}
    dd88:	b082      	sub	sp, #8
    dd8a:	af00      	add	r7, sp, #0
    dd8c:	6078      	str	r0, [r7, #4]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    dd8e:	687b      	ldr	r3, [r7, #4]
    dd90:	681b      	ldr	r3, [r3, #0]
    dd92:	69db      	ldr	r3, [r3, #28]
    dd94:	079b      	lsls	r3, r3, #30
    dd96:	0fdb      	lsrs	r3, r3, #31
    dd98:	b2db      	uxtb	r3, r3
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d000      	beq.n	dda0 <_ZN6SERCOM10disableSPIEv+0x1a>
    dd9e:	e7f6      	b.n	dd8e <_ZN6SERCOM10disableSPIEv+0x8>
  {
    //Waiting then enable bit from SYNCBUSY is equal to 0;
  }

  //Setting the enable bit to 0
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    dda0:	687b      	ldr	r3, [r7, #4]
    dda2:	681b      	ldr	r3, [r3, #0]
    dda4:	681a      	ldr	r2, [r3, #0]
    dda6:	2102      	movs	r1, #2
    dda8:	438a      	bics	r2, r1
    ddaa:	601a      	str	r2, [r3, #0]
}
    ddac:	46c0      	nop			; (mov r8, r8)
    ddae:	46bd      	mov	sp, r7
    ddb0:	b002      	add	sp, #8
    ddb2:	bd80      	pop	{r7, pc}

0000ddb4 <_ZN6SERCOM15transferDataSPIEh>:

  enableSPI();
}

uint8_t SERCOM::transferDataSPI(uint8_t data)
{
    ddb4:	b580      	push	{r7, lr}
    ddb6:	b082      	sub	sp, #8
    ddb8:	af00      	add	r7, sp, #0
    ddba:	6078      	str	r0, [r7, #4]
    ddbc:	000a      	movs	r2, r1
    ddbe:	1cfb      	adds	r3, r7, #3
    ddc0:	701a      	strb	r2, [r3, #0]
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    ddc2:	687b      	ldr	r3, [r7, #4]
    ddc4:	681b      	ldr	r3, [r3, #0]
    ddc6:	1cfa      	adds	r2, r7, #3
    ddc8:	7812      	ldrb	r2, [r2, #0]
    ddca:	b292      	uxth	r2, r2
    ddcc:	05d2      	lsls	r2, r2, #23
    ddce:	0dd2      	lsrs	r2, r2, #23
    ddd0:	b291      	uxth	r1, r2
    ddd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ddd4:	05c9      	lsls	r1, r1, #23
    ddd6:	0dc9      	lsrs	r1, r1, #23
    ddd8:	0a52      	lsrs	r2, r2, #9
    ddda:	0252      	lsls	r2, r2, #9
    dddc:	430a      	orrs	r2, r1
    ddde:	629a      	str	r2, [r3, #40]	; 0x28

  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    dde0:	687b      	ldr	r3, [r7, #4]
    dde2:	681b      	ldr	r3, [r3, #0]
    dde4:	7e1b      	ldrb	r3, [r3, #24]
    dde6:	075b      	lsls	r3, r3, #29
    dde8:	0fdb      	lsrs	r3, r3, #31
    ddea:	b2db      	uxtb	r3, r3
    ddec:	2201      	movs	r2, #1
    ddee:	4053      	eors	r3, r2
    ddf0:	b2db      	uxtb	r3, r3
    ddf2:	2b00      	cmp	r3, #0
    ddf4:	d000      	beq.n	ddf8 <_ZN6SERCOM15transferDataSPIEh+0x44>
    ddf6:	e7f3      	b.n	dde0 <_ZN6SERCOM15transferDataSPIEh+0x2c>
  {
    // Waiting Complete Reception
  }

  return sercom->SPI.DATA.bit.DATA;  // Reading data
    ddf8:	687b      	ldr	r3, [r7, #4]
    ddfa:	681b      	ldr	r3, [r3, #0]
    ddfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ddfe:	05db      	lsls	r3, r3, #23
    de00:	0ddb      	lsrs	r3, r3, #23
    de02:	b29b      	uxth	r3, r3
    de04:	b2db      	uxtb	r3, r3
}
    de06:	0018      	movs	r0, r3
    de08:	46bd      	mov	sp, r7
    de0a:	b002      	add	sp, #8
    de0c:	bd80      	pop	{r7, pc}
	...

0000de10 <_ZN6SERCOM28calculateBaudrateSynchronousEm>:
//	//RXC : Receive complete
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
    de10:	b580      	push	{r7, lr}
    de12:	b082      	sub	sp, #8
    de14:	af00      	add	r7, sp, #0
    de16:	6078      	str	r0, [r7, #4]
    de18:	6039      	str	r1, [r7, #0]
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    de1a:	683b      	ldr	r3, [r7, #0]
    de1c:	005b      	lsls	r3, r3, #1
    de1e:	0019      	movs	r1, r3
    de20:	4805      	ldr	r0, [pc, #20]	; (de38 <_ZN6SERCOM28calculateBaudrateSynchronousEm+0x28>)
    de22:	f000 fd63 	bl	e8ec <__udivsi3>
    de26:	0003      	movs	r3, r0
    de28:	b2db      	uxtb	r3, r3
    de2a:	3b01      	subs	r3, #1
    de2c:	b2db      	uxtb	r3, r3
}
    de2e:	0018      	movs	r0, r3
    de30:	46bd      	mov	sp, r7
    de32:	b002      	add	sp, #8
    de34:	bd80      	pop	{r7, pc}
    de36:	46c0      	nop			; (mov r8, r8)
    de38:	02dc6c00 	.word	0x02dc6c00

0000de3c <_ZN6SERCOM9resetWIREEv>:
/*	=========================
 *	===== Sercom WIRE
 *	=========================
 */
void SERCOM::resetWIRE()
{
    de3c:	b580      	push	{r7, lr}
    de3e:	b082      	sub	sp, #8
    de40:	af00      	add	r7, sp, #0
    de42:	6078      	str	r0, [r7, #4]
  //I2CM OR I2CS, no matter SWRST is the same bit.

  //Setting the Software bit to 1
  sercom->I2CM.CTRLA.bit.SWRST = 1;
    de44:	687b      	ldr	r3, [r7, #4]
    de46:	681b      	ldr	r3, [r3, #0]
    de48:	681a      	ldr	r2, [r3, #0]
    de4a:	2101      	movs	r1, #1
    de4c:	430a      	orrs	r2, r1
    de4e:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
    de50:	687b      	ldr	r3, [r7, #4]
    de52:	681b      	ldr	r3, [r3, #0]
    de54:	681b      	ldr	r3, [r3, #0]
    de56:	07db      	lsls	r3, r3, #31
    de58:	0fdb      	lsrs	r3, r3, #31
    de5a:	b2db      	uxtb	r3, r3
    de5c:	2b00      	cmp	r3, #0
    de5e:	d107      	bne.n	de70 <_ZN6SERCOM9resetWIREEv+0x34>
    de60:	687b      	ldr	r3, [r7, #4]
    de62:	681b      	ldr	r3, [r3, #0]
    de64:	69db      	ldr	r3, [r3, #28]
    de66:	07db      	lsls	r3, r3, #31
    de68:	0fdb      	lsrs	r3, r3, #31
    de6a:	b2db      	uxtb	r3, r3
    de6c:	2b00      	cmp	r3, #0
    de6e:	d001      	beq.n	de74 <_ZN6SERCOM9resetWIREEv+0x38>
    de70:	2301      	movs	r3, #1
    de72:	e000      	b.n	de76 <_ZN6SERCOM9resetWIREEv+0x3a>
    de74:	2300      	movs	r3, #0
    de76:	2b00      	cmp	r3, #0
    de78:	d000      	beq.n	de7c <_ZN6SERCOM9resetWIREEv+0x40>
    de7a:	e7e9      	b.n	de50 <_ZN6SERCOM9resetWIREEv+0x14>
}
    de7c:	46c0      	nop			; (mov r8, r8)
    de7e:	46bd      	mov	sp, r7
    de80:	b002      	add	sp, #8
    de82:	bd80      	pop	{r7, pc}

0000de84 <_ZN6SERCOM10enableWIREEv>:

void SERCOM::enableWIRE()
{
    de84:	b580      	push	{r7, lr}
    de86:	b082      	sub	sp, #8
    de88:	af00      	add	r7, sp, #0
    de8a:	6078      	str	r0, [r7, #4]
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    de8c:	687b      	ldr	r3, [r7, #4]
    de8e:	681b      	ldr	r3, [r3, #0]
    de90:	681a      	ldr	r2, [r3, #0]
    de92:	2102      	movs	r1, #2
    de94:	430a      	orrs	r2, r1
    de96:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    de98:	687b      	ldr	r3, [r7, #4]
    de9a:	681b      	ldr	r3, [r3, #0]
    de9c:	69db      	ldr	r3, [r3, #28]
    de9e:	079b      	lsls	r3, r3, #30
    dea0:	0fdb      	lsrs	r3, r3, #31
    dea2:	b2db      	uxtb	r3, r3
    dea4:	2b00      	cmp	r3, #0
    dea6:	d000      	beq.n	deaa <_ZN6SERCOM10enableWIREEv+0x26>
    dea8:	e7f6      	b.n	de98 <_ZN6SERCOM10enableWIREEv+0x14>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    deaa:	687b      	ldr	r3, [r7, #4]
    deac:	681a      	ldr	r2, [r3, #0]
    deae:	8b53      	ldrh	r3, [r2, #26]
    deb0:	2130      	movs	r1, #48	; 0x30
    deb2:	438b      	bics	r3, r1
    deb4:	1c19      	adds	r1, r3, #0
    deb6:	2310      	movs	r3, #16
    deb8:	430b      	orrs	r3, r1
    deba:	8353      	strh	r3, [r2, #26]

  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
    debc:	687b      	ldr	r3, [r7, #4]
    debe:	681b      	ldr	r3, [r3, #0]
    dec0:	69db      	ldr	r3, [r3, #28]
    dec2:	075b      	lsls	r3, r3, #29
    dec4:	0fdb      	lsrs	r3, r3, #31
    dec6:	b2db      	uxtb	r3, r3
    dec8:	2b00      	cmp	r3, #0
    deca:	d000      	beq.n	dece <_ZN6SERCOM10enableWIREEv+0x4a>
    decc:	e7f6      	b.n	debc <_ZN6SERCOM10enableWIREEv+0x38>
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    dece:	46c0      	nop			; (mov r8, r8)
    ded0:	46bd      	mov	sp, r7
    ded2:	b002      	add	sp, #8
    ded4:	bd80      	pop	{r7, pc}
	...

0000ded8 <_ZN6SERCOM14initMasterWIREEm>:
    // Wait the SYSOP bit from SYNCBUSY to come back to 0
  }
}

void SERCOM::initMasterWIRE( uint32_t baudrate )
{
    ded8:	b5b0      	push	{r4, r5, r7, lr}
    deda:	b082      	sub	sp, #8
    dedc:	af00      	add	r7, sp, #0
    dede:	6078      	str	r0, [r7, #4]
    dee0:	6039      	str	r1, [r7, #0]
  // Initialize the peripheral clock and interruption
  initClockNVIC() ;
    dee2:	687b      	ldr	r3, [r7, #4]
    dee4:	0018      	movs	r0, r3
    dee6:	f000 fa3b 	bl	e360 <_ZN6SERCOM13initClockNVICEv>

  resetWIRE() ;
    deea:	687b      	ldr	r3, [r7, #4]
    deec:	0018      	movs	r0, r3
    deee:	f7ff ffa5 	bl	de3c <_ZN6SERCOM9resetWIREEv>

  // Set master mode and enable SCL Clock Stretch mode (stretch after ACK bit)
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    def2:	687b      	ldr	r3, [r7, #4]
    def4:	681b      	ldr	r3, [r3, #0]
    def6:	2214      	movs	r2, #20
    def8:	601a      	str	r2, [r3, #0]

  // Enable all interrupts
//  sercom->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB | SERCOM_I2CM_INTENSET_ERROR ;

  // Synchronous arithmetic baudrate
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    defa:	687b      	ldr	r3, [r7, #4]
    defc:	681c      	ldr	r4, [r3, #0]
    defe:	4b16      	ldr	r3, [pc, #88]	; (df58 <_ZN6SERCOM14initMasterWIREEm+0x80>)
    df00:	681a      	ldr	r2, [r3, #0]
    df02:	683b      	ldr	r3, [r7, #0]
    df04:	005b      	lsls	r3, r3, #1
    df06:	0019      	movs	r1, r3
    df08:	0010      	movs	r0, r2
    df0a:	f000 fcef 	bl	e8ec <__udivsi3>
    df0e:	0003      	movs	r3, r0
    df10:	b2dd      	uxtb	r5, r3
    df12:	4b11      	ldr	r3, [pc, #68]	; (df58 <_ZN6SERCOM14initMasterWIREEm+0x80>)
    df14:	681b      	ldr	r3, [r3, #0]
    df16:	4911      	ldr	r1, [pc, #68]	; (df5c <_ZN6SERCOM14initMasterWIREEm+0x84>)
    df18:	0018      	movs	r0, r3
    df1a:	f000 fce7 	bl	e8ec <__udivsi3>
    df1e:	0003      	movs	r3, r0
    df20:	001a      	movs	r2, r3
    df22:	0013      	movs	r3, r2
    df24:	015b      	lsls	r3, r3, #5
    df26:	1a9b      	subs	r3, r3, r2
    df28:	009b      	lsls	r3, r3, #2
    df2a:	189a      	adds	r2, r3, r2
    df2c:	23fa      	movs	r3, #250	; 0xfa
    df2e:	00d9      	lsls	r1, r3, #3
    df30:	0010      	movs	r0, r2
    df32:	f000 fcdb 	bl	e8ec <__udivsi3>
    df36:	0003      	movs	r3, r0
    df38:	b2db      	uxtb	r3, r3
    df3a:	1aeb      	subs	r3, r5, r3
    df3c:	b2db      	uxtb	r3, r3
    df3e:	3b05      	subs	r3, #5
    df40:	b2da      	uxtb	r2, r3
    df42:	68e3      	ldr	r3, [r4, #12]
    df44:	21ff      	movs	r1, #255	; 0xff
    df46:	400a      	ands	r2, r1
    df48:	21ff      	movs	r1, #255	; 0xff
    df4a:	438b      	bics	r3, r1
    df4c:	4313      	orrs	r3, r2
    df4e:	60e3      	str	r3, [r4, #12]
}
    df50:	46c0      	nop			; (mov r8, r8)
    df52:	46bd      	mov	sp, r7
    df54:	b002      	add	sp, #8
    df56:	bdb0      	pop	{r4, r5, r7, pc}
    df58:	20000048 	.word	0x20000048
    df5c:	000f4240 	.word	0x000f4240

0000df60 <_ZN6SERCOM18prepareNackBitWIREEv>:

void SERCOM::prepareNackBitWIRE( void )
{
    df60:	b580      	push	{r7, lr}
    df62:	b082      	sub	sp, #8
    df64:	af00      	add	r7, sp, #0
    df66:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE()) {
    df68:	687b      	ldr	r3, [r7, #4]
    df6a:	0018      	movs	r0, r3
    df6c:	f000 f945 	bl	e1fa <_ZN6SERCOM12isMasterWIREEv>
    df70:	1e03      	subs	r3, r0, #0
    df72:	d007      	beq.n	df84 <_ZN6SERCOM18prepareNackBitWIREEv+0x24>
    // Send a NACK
    sercom->I2CM.CTRLB.bit.ACKACT = 1;
    df74:	687b      	ldr	r3, [r7, #4]
    df76:	681b      	ldr	r3, [r3, #0]
    df78:	685a      	ldr	r2, [r3, #4]
    df7a:	2180      	movs	r1, #128	; 0x80
    df7c:	02c9      	lsls	r1, r1, #11
    df7e:	430a      	orrs	r2, r1
    df80:	605a      	str	r2, [r3, #4]
  } else {
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
  }
}
    df82:	e006      	b.n	df92 <_ZN6SERCOM18prepareNackBitWIREEv+0x32>
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    df84:	687b      	ldr	r3, [r7, #4]
    df86:	681b      	ldr	r3, [r3, #0]
    df88:	685a      	ldr	r2, [r3, #4]
    df8a:	2180      	movs	r1, #128	; 0x80
    df8c:	02c9      	lsls	r1, r1, #11
    df8e:	430a      	orrs	r2, r1
    df90:	605a      	str	r2, [r3, #4]
}
    df92:	46c0      	nop			; (mov r8, r8)
    df94:	46bd      	mov	sp, r7
    df96:	b002      	add	sp, #8
    df98:	bd80      	pop	{r7, pc}
	...

0000df9c <_ZN6SERCOM17prepareAckBitWIREEv>:

void SERCOM::prepareAckBitWIRE( void )
{
    df9c:	b580      	push	{r7, lr}
    df9e:	b082      	sub	sp, #8
    dfa0:	af00      	add	r7, sp, #0
    dfa2:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE()) {
    dfa4:	687b      	ldr	r3, [r7, #4]
    dfa6:	0018      	movs	r0, r3
    dfa8:	f000 f927 	bl	e1fa <_ZN6SERCOM12isMasterWIREEv>
    dfac:	1e03      	subs	r3, r0, #0
    dfae:	d006      	beq.n	dfbe <_ZN6SERCOM17prepareAckBitWIREEv+0x22>
    // Send an ACK
    sercom->I2CM.CTRLB.bit.ACKACT = 0;
    dfb0:	687b      	ldr	r3, [r7, #4]
    dfb2:	681b      	ldr	r3, [r3, #0]
    dfb4:	685a      	ldr	r2, [r3, #4]
    dfb6:	4907      	ldr	r1, [pc, #28]	; (dfd4 <_ZN6SERCOM17prepareAckBitWIREEv+0x38>)
    dfb8:	400a      	ands	r2, r1
    dfba:	605a      	str	r2, [r3, #4]
  } else {
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
  }
}
    dfbc:	e005      	b.n	dfca <_ZN6SERCOM17prepareAckBitWIREEv+0x2e>
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    dfbe:	687b      	ldr	r3, [r7, #4]
    dfc0:	681b      	ldr	r3, [r3, #0]
    dfc2:	685a      	ldr	r2, [r3, #4]
    dfc4:	4903      	ldr	r1, [pc, #12]	; (dfd4 <_ZN6SERCOM17prepareAckBitWIREEv+0x38>)
    dfc6:	400a      	ands	r2, r1
    dfc8:	605a      	str	r2, [r3, #4]
}
    dfca:	46c0      	nop			; (mov r8, r8)
    dfcc:	46bd      	mov	sp, r7
    dfce:	b002      	add	sp, #8
    dfd0:	bd80      	pop	{r7, pc}
    dfd2:	46c0      	nop			; (mov r8, r8)
    dfd4:	fffbffff 	.word	0xfffbffff

0000dfd8 <_ZN6SERCOM22prepareCommandBitsWireEh>:

void SERCOM::prepareCommandBitsWire(uint8_t cmd)
{
    dfd8:	b580      	push	{r7, lr}
    dfda:	b082      	sub	sp, #8
    dfdc:	af00      	add	r7, sp, #0
    dfde:	6078      	str	r0, [r7, #4]
    dfe0:	000a      	movs	r2, r1
    dfe2:	1cfb      	adds	r3, r7, #3
    dfe4:	701a      	strb	r2, [r3, #0]
  if(isMasterWIRE()) {
    dfe6:	687b      	ldr	r3, [r7, #4]
    dfe8:	0018      	movs	r0, r3
    dfea:	f000 f906 	bl	e1fa <_ZN6SERCOM12isMasterWIREEv>
    dfee:	1e03      	subs	r3, r0, #0
    dff0:	d017      	beq.n	e022 <_ZN6SERCOM22prepareCommandBitsWireEh+0x4a>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    dff2:	687b      	ldr	r3, [r7, #4]
    dff4:	681b      	ldr	r3, [r3, #0]
    dff6:	1cfa      	adds	r2, r7, #3
    dff8:	7812      	ldrb	r2, [r2, #0]
    dffa:	2103      	movs	r1, #3
    dffc:	400a      	ands	r2, r1
    dffe:	b2d1      	uxtb	r1, r2
    e000:	685a      	ldr	r2, [r3, #4]
    e002:	2003      	movs	r0, #3
    e004:	4001      	ands	r1, r0
    e006:	0409      	lsls	r1, r1, #16
    e008:	480f      	ldr	r0, [pc, #60]	; (e048 <_ZN6SERCOM22prepareCommandBitsWireEh+0x70>)
    e00a:	4002      	ands	r2, r0
    e00c:	430a      	orrs	r2, r1
    e00e:	605a      	str	r2, [r3, #4]

    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
    e010:	687b      	ldr	r3, [r7, #4]
    e012:	681b      	ldr	r3, [r3, #0]
    e014:	69db      	ldr	r3, [r3, #28]
    e016:	075b      	lsls	r3, r3, #29
    e018:	0fdb      	lsrs	r3, r3, #31
    e01a:	b2db      	uxtb	r3, r3
    e01c:	2b00      	cmp	r3, #0
    e01e:	d00f      	beq.n	e040 <_ZN6SERCOM22prepareCommandBitsWireEh+0x68>
    e020:	e7f6      	b.n	e010 <_ZN6SERCOM22prepareCommandBitsWireEh+0x38>
    {
      // Waiting for synchronization
    }
  } else {
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    e022:	687b      	ldr	r3, [r7, #4]
    e024:	681b      	ldr	r3, [r3, #0]
    e026:	1cfa      	adds	r2, r7, #3
    e028:	7812      	ldrb	r2, [r2, #0]
    e02a:	2103      	movs	r1, #3
    e02c:	400a      	ands	r2, r1
    e02e:	b2d1      	uxtb	r1, r2
    e030:	685a      	ldr	r2, [r3, #4]
    e032:	2003      	movs	r0, #3
    e034:	4001      	ands	r1, r0
    e036:	0409      	lsls	r1, r1, #16
    e038:	4803      	ldr	r0, [pc, #12]	; (e048 <_ZN6SERCOM22prepareCommandBitsWireEh+0x70>)
    e03a:	4002      	ands	r2, r0
    e03c:	430a      	orrs	r2, r1
    e03e:	605a      	str	r2, [r3, #4]
  }
}
    e040:	46c0      	nop			; (mov r8, r8)
    e042:	46bd      	mov	sp, r7
    e044:	b002      	add	sp, #8
    e046:	bd80      	pop	{r7, pc}
    e048:	fffcffff 	.word	0xfffcffff

0000e04c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>:

bool SERCOM::startTransmissionWIRE(uint8_t address, SercomWireReadWriteFlag flag)
{
    e04c:	b580      	push	{r7, lr}
    e04e:	b082      	sub	sp, #8
    e050:	af00      	add	r7, sp, #0
    e052:	6078      	str	r0, [r7, #4]
    e054:	0008      	movs	r0, r1
    e056:	0011      	movs	r1, r2
    e058:	1cfb      	adds	r3, r7, #3
    e05a:	1c02      	adds	r2, r0, #0
    e05c:	701a      	strb	r2, [r3, #0]
    e05e:	1cbb      	adds	r3, r7, #2
    e060:	1c0a      	adds	r2, r1, #0
    e062:	701a      	strb	r2, [r3, #0]
  // 7-bits address + 1-bits R/W
  address = (address << 0x1ul) | flag;
    e064:	1cfb      	adds	r3, r7, #3
    e066:	781b      	ldrb	r3, [r3, #0]
    e068:	005b      	lsls	r3, r3, #1
    e06a:	b25a      	sxtb	r2, r3
    e06c:	1cbb      	adds	r3, r7, #2
    e06e:	781b      	ldrb	r3, [r3, #0]
    e070:	b25b      	sxtb	r3, r3
    e072:	4313      	orrs	r3, r2
    e074:	b25a      	sxtb	r2, r3
    e076:	1cfb      	adds	r3, r7, #3
    e078:	701a      	strb	r2, [r3, #0]

  // Wait idle or owner bus mode
  while ( !isBusIdleWIRE() && !isBusOwnerWIRE() );
    e07a:	687b      	ldr	r3, [r7, #4]
    e07c:	0018      	movs	r0, r3
    e07e:	f000 f8e0 	bl	e242 <_ZN6SERCOM13isBusIdleWIREEv>
    e082:	0003      	movs	r3, r0
    e084:	001a      	movs	r2, r3
    e086:	2301      	movs	r3, #1
    e088:	4053      	eors	r3, r2
    e08a:	b2db      	uxtb	r3, r3
    e08c:	2b00      	cmp	r3, #0
    e08e:	d00c      	beq.n	e0aa <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5e>
    e090:	687b      	ldr	r3, [r7, #4]
    e092:	0018      	movs	r0, r3
    e094:	f000 f8e7 	bl	e266 <_ZN6SERCOM14isBusOwnerWIREEv>
    e098:	0003      	movs	r3, r0
    e09a:	001a      	movs	r2, r3
    e09c:	2301      	movs	r3, #1
    e09e:	4053      	eors	r3, r2
    e0a0:	b2db      	uxtb	r3, r3
    e0a2:	2b00      	cmp	r3, #0
    e0a4:	d001      	beq.n	e0aa <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5e>
    e0a6:	2301      	movs	r3, #1
    e0a8:	e000      	b.n	e0ac <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x60>
    e0aa:	2300      	movs	r3, #0
    e0ac:	2b00      	cmp	r3, #0
    e0ae:	d000      	beq.n	e0b2 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x66>
    e0b0:	e7e3      	b.n	e07a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>

  // Send start and address
  sercom->I2CM.ADDR.bit.ADDR = address;
    e0b2:	687b      	ldr	r3, [r7, #4]
    e0b4:	681b      	ldr	r3, [r3, #0]
    e0b6:	1cfa      	adds	r2, r7, #3
    e0b8:	7812      	ldrb	r2, [r2, #0]
    e0ba:	b292      	uxth	r2, r2
    e0bc:	0552      	lsls	r2, r2, #21
    e0be:	0d52      	lsrs	r2, r2, #21
    e0c0:	b291      	uxth	r1, r2
    e0c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e0c4:	0549      	lsls	r1, r1, #21
    e0c6:	0d49      	lsrs	r1, r1, #21
    e0c8:	0ad2      	lsrs	r2, r2, #11
    e0ca:	02d2      	lsls	r2, r2, #11
    e0cc:	430a      	orrs	r2, r1
    e0ce:	625a      	str	r2, [r3, #36]	; 0x24

  // Address Transmitted
  if ( flag == WIRE_WRITE_FLAG ) // Write mode
    e0d0:	1cbb      	adds	r3, r7, #2
    e0d2:	781b      	ldrb	r3, [r3, #0]
    e0d4:	2b00      	cmp	r3, #0
    e0d6:	d10b      	bne.n	e0f0 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xa4>
  {
    while( !sercom->I2CM.INTFLAG.bit.MB )
    e0d8:	687b      	ldr	r3, [r7, #4]
    e0da:	681b      	ldr	r3, [r3, #0]
    e0dc:	7e1b      	ldrb	r3, [r3, #24]
    e0de:	07db      	lsls	r3, r3, #31
    e0e0:	0fdb      	lsrs	r3, r3, #31
    e0e2:	b2db      	uxtb	r3, r3
    e0e4:	2201      	movs	r2, #1
    e0e6:	4053      	eors	r3, r2
    e0e8:	b2db      	uxtb	r3, r3
    e0ea:	2b00      	cmp	r3, #0
    e0ec:	d01c      	beq.n	e128 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xdc>
    e0ee:	e7f3      	b.n	e0d8 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x8c>
      // Wait transmission complete
    }
  }
  else  // Read mode
  {
    while( !sercom->I2CM.INTFLAG.bit.SB )
    e0f0:	687b      	ldr	r3, [r7, #4]
    e0f2:	681b      	ldr	r3, [r3, #0]
    e0f4:	7e1b      	ldrb	r3, [r3, #24]
    e0f6:	079b      	lsls	r3, r3, #30
    e0f8:	0fdb      	lsrs	r3, r3, #31
    e0fa:	b2db      	uxtb	r3, r3
    e0fc:	2201      	movs	r2, #1
    e0fe:	4053      	eors	r3, r2
    e100:	b2db      	uxtb	r3, r3
    e102:	2b00      	cmp	r3, #0
    e104:	d010      	beq.n	e128 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xdc>
    {
        // If the slave NACKS the address, the MB bit will be set.
        // In that case, send a stop condition and return false.
        if (sercom->I2CM.INTFLAG.bit.MB) {
    e106:	687b      	ldr	r3, [r7, #4]
    e108:	681b      	ldr	r3, [r3, #0]
    e10a:	7e1b      	ldrb	r3, [r3, #24]
    e10c:	07db      	lsls	r3, r3, #31
    e10e:	0fdb      	lsrs	r3, r3, #31
    e110:	b2db      	uxtb	r3, r3
    e112:	2b00      	cmp	r3, #0
    e114:	d0ec      	beq.n	e0f0 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xa4>
            sercom->I2CM.CTRLB.bit.CMD = 3; // Stop condition
    e116:	687b      	ldr	r3, [r7, #4]
    e118:	681b      	ldr	r3, [r3, #0]
    e11a:	685a      	ldr	r2, [r3, #4]
    e11c:	21c0      	movs	r1, #192	; 0xc0
    e11e:	0289      	lsls	r1, r1, #10
    e120:	430a      	orrs	r2, r1
    e122:	605a      	str	r2, [r3, #4]
            return false;
    e124:	2300      	movs	r3, #0
    e126:	e00a      	b.n	e13e <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf2>
    //sercom->I2CM.INTFLAG.bit.SB = 0x1ul;
  }


  //ACK received (0: ACK, 1: NACK)
  if(sercom->I2CM.STATUS.bit.RXNACK)
    e128:	687b      	ldr	r3, [r7, #4]
    e12a:	681b      	ldr	r3, [r3, #0]
    e12c:	8b5b      	ldrh	r3, [r3, #26]
    e12e:	075b      	lsls	r3, r3, #29
    e130:	0fdb      	lsrs	r3, r3, #31
    e132:	b2db      	uxtb	r3, r3
    e134:	2b00      	cmp	r3, #0
    e136:	d001      	beq.n	e13c <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf0>
  {
    return false;
    e138:	2300      	movs	r3, #0
    e13a:	e000      	b.n	e13e <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0xf2>
  }
  else
  {
    return true;
    e13c:	2301      	movs	r3, #1
  }
}
    e13e:	0018      	movs	r0, r3
    e140:	46bd      	mov	sp, r7
    e142:	b002      	add	sp, #8
    e144:	bd80      	pop	{r7, pc}

0000e146 <_ZN6SERCOM18sendDataMasterWIREEh>:

bool SERCOM::sendDataMasterWIRE(uint8_t data)
{
    e146:	b580      	push	{r7, lr}
    e148:	b082      	sub	sp, #8
    e14a:	af00      	add	r7, sp, #0
    e14c:	6078      	str	r0, [r7, #4]
    e14e:	000a      	movs	r2, r1
    e150:	1cfb      	adds	r3, r7, #3
    e152:	701a      	strb	r2, [r3, #0]
  //Send data
  sercom->I2CM.DATA.bit.DATA = data;
    e154:	687b      	ldr	r3, [r7, #4]
    e156:	681b      	ldr	r3, [r3, #0]
    e158:	1cfa      	adds	r2, r7, #3
    e15a:	2128      	movs	r1, #40	; 0x28
    e15c:	7812      	ldrb	r2, [r2, #0]
    e15e:	545a      	strb	r2, [r3, r1]

  //Wait transmission successful
  while(!sercom->I2CM.INTFLAG.bit.MB) {
    e160:	687b      	ldr	r3, [r7, #4]
    e162:	681b      	ldr	r3, [r3, #0]
    e164:	7e1b      	ldrb	r3, [r3, #24]
    e166:	07db      	lsls	r3, r3, #31
    e168:	0fdb      	lsrs	r3, r3, #31
    e16a:	b2db      	uxtb	r3, r3
    e16c:	2201      	movs	r2, #1
    e16e:	4053      	eors	r3, r2
    e170:	b2db      	uxtb	r3, r3
    e172:	2b00      	cmp	r3, #0
    e174:	d009      	beq.n	e18a <_ZN6SERCOM18sendDataMasterWIREEh+0x44>

    // If a bus error occurs, the MB bit may never be set.
    // Check the bus error bit and bail if it's set.
    if (sercom->I2CM.STATUS.bit.BUSERR) {
    e176:	687b      	ldr	r3, [r7, #4]
    e178:	681b      	ldr	r3, [r3, #0]
    e17a:	8b5b      	ldrh	r3, [r3, #26]
    e17c:	07db      	lsls	r3, r3, #31
    e17e:	0fdb      	lsrs	r3, r3, #31
    e180:	b2db      	uxtb	r3, r3
    e182:	2b00      	cmp	r3, #0
    e184:	d0ec      	beq.n	e160 <_ZN6SERCOM18sendDataMasterWIREEh+0x1a>
      return false;
    e186:	2300      	movs	r3, #0
    e188:	e00a      	b.n	e1a0 <_ZN6SERCOM18sendDataMasterWIREEh+0x5a>
    }
  }

  //Problems on line? nack received?
  if(sercom->I2CM.STATUS.bit.RXNACK)
    e18a:	687b      	ldr	r3, [r7, #4]
    e18c:	681b      	ldr	r3, [r3, #0]
    e18e:	8b5b      	ldrh	r3, [r3, #26]
    e190:	075b      	lsls	r3, r3, #29
    e192:	0fdb      	lsrs	r3, r3, #31
    e194:	b2db      	uxtb	r3, r3
    e196:	2b00      	cmp	r3, #0
    e198:	d001      	beq.n	e19e <_ZN6SERCOM18sendDataMasterWIREEh+0x58>
    return false;
    e19a:	2300      	movs	r3, #0
    e19c:	e000      	b.n	e1a0 <_ZN6SERCOM18sendDataMasterWIREEh+0x5a>
  else
    return true;
    e19e:	2301      	movs	r3, #1
}
    e1a0:	0018      	movs	r0, r3
    e1a2:	46bd      	mov	sp, r7
    e1a4:	b002      	add	sp, #8
    e1a6:	bd80      	pop	{r7, pc}

0000e1a8 <_ZN6SERCOM17sendDataSlaveWIREEh>:

bool SERCOM::sendDataSlaveWIRE(uint8_t data)
{
    e1a8:	b580      	push	{r7, lr}
    e1aa:	b082      	sub	sp, #8
    e1ac:	af00      	add	r7, sp, #0
    e1ae:	6078      	str	r0, [r7, #4]
    e1b0:	000a      	movs	r2, r1
    e1b2:	1cfb      	adds	r3, r7, #3
    e1b4:	701a      	strb	r2, [r3, #0]
  //Send data
  sercom->I2CS.DATA.bit.DATA = data;
    e1b6:	687b      	ldr	r3, [r7, #4]
    e1b8:	681b      	ldr	r3, [r3, #0]
    e1ba:	1cfa      	adds	r2, r7, #3
    e1bc:	2128      	movs	r1, #40	; 0x28
    e1be:	7812      	ldrb	r2, [r2, #0]
    e1c0:	545a      	strb	r2, [r3, r1]

  //Problems on line? nack received?
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
    e1c2:	687b      	ldr	r3, [r7, #4]
    e1c4:	681b      	ldr	r3, [r3, #0]
    e1c6:	7e1b      	ldrb	r3, [r3, #24]
    e1c8:	075b      	lsls	r3, r3, #29
    e1ca:	0fdb      	lsrs	r3, r3, #31
    e1cc:	b2db      	uxtb	r3, r3
    e1ce:	2b00      	cmp	r3, #0
    e1d0:	d007      	beq.n	e1e2 <_ZN6SERCOM17sendDataSlaveWIREEh+0x3a>
    e1d2:	687b      	ldr	r3, [r7, #4]
    e1d4:	681b      	ldr	r3, [r3, #0]
    e1d6:	8b5b      	ldrh	r3, [r3, #26]
    e1d8:	075b      	lsls	r3, r3, #29
    e1da:	0fdb      	lsrs	r3, r3, #31
    e1dc:	b2db      	uxtb	r3, r3
    e1de:	2b00      	cmp	r3, #0
    e1e0:	d001      	beq.n	e1e6 <_ZN6SERCOM17sendDataSlaveWIREEh+0x3e>
    e1e2:	2301      	movs	r3, #1
    e1e4:	e000      	b.n	e1e8 <_ZN6SERCOM17sendDataSlaveWIREEh+0x40>
    e1e6:	2300      	movs	r3, #0
    e1e8:	2b00      	cmp	r3, #0
    e1ea:	d001      	beq.n	e1f0 <_ZN6SERCOM17sendDataSlaveWIREEh+0x48>
    return false;
    e1ec:	2300      	movs	r3, #0
    e1ee:	e000      	b.n	e1f2 <_ZN6SERCOM17sendDataSlaveWIREEh+0x4a>
  else
    return true;
    e1f0:	2301      	movs	r3, #1
}
    e1f2:	0018      	movs	r0, r3
    e1f4:	46bd      	mov	sp, r7
    e1f6:	b002      	add	sp, #8
    e1f8:	bd80      	pop	{r7, pc}

0000e1fa <_ZN6SERCOM12isMasterWIREEv>:

bool SERCOM::isMasterWIRE( void )
{
    e1fa:	b580      	push	{r7, lr}
    e1fc:	b082      	sub	sp, #8
    e1fe:	af00      	add	r7, sp, #0
    e200:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    e202:	687b      	ldr	r3, [r7, #4]
    e204:	681b      	ldr	r3, [r3, #0]
    e206:	681b      	ldr	r3, [r3, #0]
    e208:	06db      	lsls	r3, r3, #27
    e20a:	0f5b      	lsrs	r3, r3, #29
    e20c:	b2db      	uxtb	r3, r3
    e20e:	3b05      	subs	r3, #5
    e210:	425a      	negs	r2, r3
    e212:	4153      	adcs	r3, r2
    e214:	b2db      	uxtb	r3, r3
}
    e216:	0018      	movs	r0, r3
    e218:	46bd      	mov	sp, r7
    e21a:	b002      	add	sp, #8
    e21c:	bd80      	pop	{r7, pc}

0000e21e <_ZN6SERCOM11isSlaveWIREEv>:

bool SERCOM::isSlaveWIRE( void )
{
    e21e:	b580      	push	{r7, lr}
    e220:	b082      	sub	sp, #8
    e222:	af00      	add	r7, sp, #0
    e224:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
    e226:	687b      	ldr	r3, [r7, #4]
    e228:	681b      	ldr	r3, [r3, #0]
    e22a:	681b      	ldr	r3, [r3, #0]
    e22c:	06db      	lsls	r3, r3, #27
    e22e:	0f5b      	lsrs	r3, r3, #29
    e230:	b2db      	uxtb	r3, r3
    e232:	3b04      	subs	r3, #4
    e234:	425a      	negs	r2, r3
    e236:	4153      	adcs	r3, r2
    e238:	b2db      	uxtb	r3, r3
}
    e23a:	0018      	movs	r0, r3
    e23c:	46bd      	mov	sp, r7
    e23e:	b002      	add	sp, #8
    e240:	bd80      	pop	{r7, pc}

0000e242 <_ZN6SERCOM13isBusIdleWIREEv>:

bool SERCOM::isBusIdleWIRE( void )
{
    e242:	b580      	push	{r7, lr}
    e244:	b082      	sub	sp, #8
    e246:	af00      	add	r7, sp, #0
    e248:	6078      	str	r0, [r7, #4]
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    e24a:	687b      	ldr	r3, [r7, #4]
    e24c:	681b      	ldr	r3, [r3, #0]
    e24e:	8b5b      	ldrh	r3, [r3, #26]
    e250:	069b      	lsls	r3, r3, #26
    e252:	0f9b      	lsrs	r3, r3, #30
    e254:	b2db      	uxtb	r3, r3
    e256:	3b01      	subs	r3, #1
    e258:	425a      	negs	r2, r3
    e25a:	4153      	adcs	r3, r2
    e25c:	b2db      	uxtb	r3, r3
}
    e25e:	0018      	movs	r0, r3
    e260:	46bd      	mov	sp, r7
    e262:	b002      	add	sp, #8
    e264:	bd80      	pop	{r7, pc}

0000e266 <_ZN6SERCOM14isBusOwnerWIREEv>:

bool SERCOM::isBusOwnerWIRE( void )
{
    e266:	b580      	push	{r7, lr}
    e268:	b082      	sub	sp, #8
    e26a:	af00      	add	r7, sp, #0
    e26c:	6078      	str	r0, [r7, #4]
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    e26e:	687b      	ldr	r3, [r7, #4]
    e270:	681b      	ldr	r3, [r3, #0]
    e272:	8b5b      	ldrh	r3, [r3, #26]
    e274:	069b      	lsls	r3, r3, #26
    e276:	0f9b      	lsrs	r3, r3, #30
    e278:	b2db      	uxtb	r3, r3
    e27a:	3b02      	subs	r3, #2
    e27c:	425a      	negs	r2, r3
    e27e:	4153      	adcs	r3, r2
    e280:	b2db      	uxtb	r3, r3
}
    e282:	0018      	movs	r0, r3
    e284:	46bd      	mov	sp, r7
    e286:	b002      	add	sp, #8
    e288:	bd80      	pop	{r7, pc}

0000e28a <_ZN6SERCOM15isDataReadyWIREEv>:

bool SERCOM::isDataReadyWIRE( void )
{
    e28a:	b580      	push	{r7, lr}
    e28c:	b082      	sub	sp, #8
    e28e:	af00      	add	r7, sp, #0
    e290:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.DRDY;
    e292:	687b      	ldr	r3, [r7, #4]
    e294:	681b      	ldr	r3, [r3, #0]
    e296:	7e1b      	ldrb	r3, [r3, #24]
    e298:	075b      	lsls	r3, r3, #29
    e29a:	0fdb      	lsrs	r3, r3, #31
    e29c:	b2db      	uxtb	r3, r3
}
    e29e:	0018      	movs	r0, r3
    e2a0:	46bd      	mov	sp, r7
    e2a2:	b002      	add	sp, #8
    e2a4:	bd80      	pop	{r7, pc}

0000e2a6 <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
    e2a6:	b580      	push	{r7, lr}
    e2a8:	b082      	sub	sp, #8
    e2aa:	af00      	add	r7, sp, #0
    e2ac:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.PREC;
    e2ae:	687b      	ldr	r3, [r7, #4]
    e2b0:	681b      	ldr	r3, [r3, #0]
    e2b2:	7e1b      	ldrb	r3, [r3, #24]
    e2b4:	07db      	lsls	r3, r3, #31
    e2b6:	0fdb      	lsrs	r3, r3, #31
    e2b8:	b2db      	uxtb	r3, r3
}
    e2ba:	0018      	movs	r0, r3
    e2bc:	46bd      	mov	sp, r7
    e2be:	b002      	add	sp, #8
    e2c0:	bd80      	pop	{r7, pc}

0000e2c2 <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
    e2c2:	b580      	push	{r7, lr}
    e2c4:	b082      	sub	sp, #8
    e2c6:	af00      	add	r7, sp, #0
    e2c8:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.STATUS.bit.SR;
    e2ca:	687b      	ldr	r3, [r7, #4]
    e2cc:	681b      	ldr	r3, [r3, #0]
    e2ce:	8b5b      	ldrh	r3, [r3, #26]
    e2d0:	06db      	lsls	r3, r3, #27
    e2d2:	0fdb      	lsrs	r3, r3, #31
    e2d4:	b2db      	uxtb	r3, r3
}
    e2d6:	0018      	movs	r0, r3
    e2d8:	46bd      	mov	sp, r7
    e2da:	b002      	add	sp, #8
    e2dc:	bd80      	pop	{r7, pc}

0000e2de <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
    e2de:	b580      	push	{r7, lr}
    e2e0:	b082      	sub	sp, #8
    e2e2:	af00      	add	r7, sp, #0
    e2e4:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.INTFLAG.bit.AMATCH;
    e2e6:	687b      	ldr	r3, [r7, #4]
    e2e8:	681b      	ldr	r3, [r3, #0]
    e2ea:	7e1b      	ldrb	r3, [r3, #24]
    e2ec:	079b      	lsls	r3, r3, #30
    e2ee:	0fdb      	lsrs	r3, r3, #31
    e2f0:	b2db      	uxtb	r3, r3
}
    e2f2:	0018      	movs	r0, r3
    e2f4:	46bd      	mov	sp, r7
    e2f6:	b002      	add	sp, #8
    e2f8:	bd80      	pop	{r7, pc}

0000e2fa <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
    e2fa:	b580      	push	{r7, lr}
    e2fc:	b082      	sub	sp, #8
    e2fe:	af00      	add	r7, sp, #0
    e300:	6078      	str	r0, [r7, #4]
  return sercom->I2CS.STATUS.bit.DIR;
    e302:	687b      	ldr	r3, [r7, #4]
    e304:	681b      	ldr	r3, [r3, #0]
    e306:	8b5b      	ldrh	r3, [r3, #26]
    e308:	071b      	lsls	r3, r3, #28
    e30a:	0fdb      	lsrs	r3, r3, #31
    e30c:	b2db      	uxtb	r3, r3
}
    e30e:	0018      	movs	r0, r3
    e310:	46bd      	mov	sp, r7
    e312:	b002      	add	sp, #8
    e314:	bd80      	pop	{r7, pc}

0000e316 <_ZN6SERCOM12readDataWIREEv>:
  else
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
    e316:	b580      	push	{r7, lr}
    e318:	b082      	sub	sp, #8
    e31a:	af00      	add	r7, sp, #0
    e31c:	6078      	str	r0, [r7, #4]
  if(isMasterWIRE())
    e31e:	687b      	ldr	r3, [r7, #4]
    e320:	0018      	movs	r0, r3
    e322:	f7ff ff6a 	bl	e1fa <_ZN6SERCOM12isMasterWIREEv>
    e326:	1e03      	subs	r3, r0, #0
    e328:	d011      	beq.n	e34e <_ZN6SERCOM12readDataWIREEv+0x38>
  {
    while( sercom->I2CM.INTFLAG.bit.SB == 0 )
    e32a:	687b      	ldr	r3, [r7, #4]
    e32c:	681b      	ldr	r3, [r3, #0]
    e32e:	7e1b      	ldrb	r3, [r3, #24]
    e330:	079b      	lsls	r3, r3, #30
    e332:	0fdb      	lsrs	r3, r3, #31
    e334:	b2db      	uxtb	r3, r3
    e336:	2201      	movs	r2, #1
    e338:	4053      	eors	r3, r2
    e33a:	b2db      	uxtb	r3, r3
    e33c:	2b00      	cmp	r3, #0
    e33e:	d000      	beq.n	e342 <_ZN6SERCOM12readDataWIREEv+0x2c>
    e340:	e7f3      	b.n	e32a <_ZN6SERCOM12readDataWIREEv+0x14>
    {
      // Waiting complete receive
    }

    return sercom->I2CM.DATA.bit.DATA ;
    e342:	687b      	ldr	r3, [r7, #4]
    e344:	681b      	ldr	r3, [r3, #0]
    e346:	2228      	movs	r2, #40	; 0x28
    e348:	5c9b      	ldrb	r3, [r3, r2]
    e34a:	b2db      	uxtb	r3, r3
    e34c:	e004      	b.n	e358 <_ZN6SERCOM12readDataWIREEv+0x42>
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
    e34e:	687b      	ldr	r3, [r7, #4]
    e350:	681b      	ldr	r3, [r3, #0]
    e352:	2228      	movs	r2, #40	; 0x28
    e354:	5c9b      	ldrb	r3, [r3, r2]
    e356:	b2db      	uxtb	r3, r3
  }
}
    e358:	0018      	movs	r0, r3
    e35a:	46bd      	mov	sp, r7
    e35c:	b002      	add	sp, #8
    e35e:	bd80      	pop	{r7, pc}

0000e360 <_ZN6SERCOM13initClockNVICEv>:


void SERCOM::initClockNVIC( void )
{
    e360:	b580      	push	{r7, lr}
    e362:	b084      	sub	sp, #16
    e364:	af00      	add	r7, sp, #0
    e366:	6078      	str	r0, [r7, #4]
  uint8_t clockId = 0;
    e368:	230f      	movs	r3, #15
    e36a:	18fb      	adds	r3, r7, r3
    e36c:	2200      	movs	r2, #0
    e36e:	701a      	strb	r2, [r3, #0]
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
    e370:	230e      	movs	r3, #14
    e372:	18fb      	adds	r3, r7, r3
    e374:	22fe      	movs	r2, #254	; 0xfe
    e376:	701a      	strb	r2, [r3, #0]

  if(sercom == SERCOM0)
    e378:	687b      	ldr	r3, [r7, #4]
    e37a:	681b      	ldr	r3, [r3, #0]
    e37c:	4a40      	ldr	r2, [pc, #256]	; (e480 <_ZN6SERCOM13initClockNVICEv+0x120>)
    e37e:	4293      	cmp	r3, r2
    e380:	d108      	bne.n	e394 <_ZN6SERCOM13initClockNVICEv+0x34>
  {
    clockId = GCM_SERCOM0_CORE;
    e382:	230f      	movs	r3, #15
    e384:	18fb      	adds	r3, r7, r3
    e386:	2214      	movs	r2, #20
    e388:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM0_IRQn;
    e38a:	230e      	movs	r3, #14
    e38c:	18fb      	adds	r3, r7, r3
    e38e:	2209      	movs	r2, #9
    e390:	701a      	strb	r2, [r3, #0]
    e392:	e044      	b.n	e41e <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM1)
    e394:	687b      	ldr	r3, [r7, #4]
    e396:	681b      	ldr	r3, [r3, #0]
    e398:	4a3a      	ldr	r2, [pc, #232]	; (e484 <_ZN6SERCOM13initClockNVICEv+0x124>)
    e39a:	4293      	cmp	r3, r2
    e39c:	d108      	bne.n	e3b0 <_ZN6SERCOM13initClockNVICEv+0x50>
  {
    clockId = GCM_SERCOM1_CORE;
    e39e:	230f      	movs	r3, #15
    e3a0:	18fb      	adds	r3, r7, r3
    e3a2:	2215      	movs	r2, #21
    e3a4:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM1_IRQn;
    e3a6:	230e      	movs	r3, #14
    e3a8:	18fb      	adds	r3, r7, r3
    e3aa:	220a      	movs	r2, #10
    e3ac:	701a      	strb	r2, [r3, #0]
    e3ae:	e036      	b.n	e41e <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM2)
    e3b0:	687b      	ldr	r3, [r7, #4]
    e3b2:	681b      	ldr	r3, [r3, #0]
    e3b4:	4a34      	ldr	r2, [pc, #208]	; (e488 <_ZN6SERCOM13initClockNVICEv+0x128>)
    e3b6:	4293      	cmp	r3, r2
    e3b8:	d108      	bne.n	e3cc <_ZN6SERCOM13initClockNVICEv+0x6c>
  {
    clockId = GCM_SERCOM2_CORE;
    e3ba:	230f      	movs	r3, #15
    e3bc:	18fb      	adds	r3, r7, r3
    e3be:	2216      	movs	r2, #22
    e3c0:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM2_IRQn;
    e3c2:	230e      	movs	r3, #14
    e3c4:	18fb      	adds	r3, r7, r3
    e3c6:	220b      	movs	r2, #11
    e3c8:	701a      	strb	r2, [r3, #0]
    e3ca:	e028      	b.n	e41e <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM3)
    e3cc:	687b      	ldr	r3, [r7, #4]
    e3ce:	681b      	ldr	r3, [r3, #0]
    e3d0:	4a2e      	ldr	r2, [pc, #184]	; (e48c <_ZN6SERCOM13initClockNVICEv+0x12c>)
    e3d2:	4293      	cmp	r3, r2
    e3d4:	d108      	bne.n	e3e8 <_ZN6SERCOM13initClockNVICEv+0x88>
  {
    clockId = GCM_SERCOM3_CORE;
    e3d6:	230f      	movs	r3, #15
    e3d8:	18fb      	adds	r3, r7, r3
    e3da:	2217      	movs	r2, #23
    e3dc:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM3_IRQn;
    e3de:	230e      	movs	r3, #14
    e3e0:	18fb      	adds	r3, r7, r3
    e3e2:	220c      	movs	r2, #12
    e3e4:	701a      	strb	r2, [r3, #0]
    e3e6:	e01a      	b.n	e41e <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    e3e8:	687b      	ldr	r3, [r7, #4]
    e3ea:	681b      	ldr	r3, [r3, #0]
    e3ec:	4a28      	ldr	r2, [pc, #160]	; (e490 <_ZN6SERCOM13initClockNVICEv+0x130>)
    e3ee:	4293      	cmp	r3, r2
    e3f0:	d108      	bne.n	e404 <_ZN6SERCOM13initClockNVICEv+0xa4>
  {
    clockId = GCM_SERCOM4_CORE;
    e3f2:	230f      	movs	r3, #15
    e3f4:	18fb      	adds	r3, r7, r3
    e3f6:	2218      	movs	r2, #24
    e3f8:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM4_IRQn;
    e3fa:	230e      	movs	r3, #14
    e3fc:	18fb      	adds	r3, r7, r3
    e3fe:	220d      	movs	r2, #13
    e400:	701a      	strb	r2, [r3, #0]
    e402:	e00c      	b.n	e41e <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    e404:	687b      	ldr	r3, [r7, #4]
    e406:	681b      	ldr	r3, [r3, #0]
    e408:	4a22      	ldr	r2, [pc, #136]	; (e494 <_ZN6SERCOM13initClockNVICEv+0x134>)
    e40a:	4293      	cmp	r3, r2
    e40c:	d107      	bne.n	e41e <_ZN6SERCOM13initClockNVICEv+0xbe>
  {
    clockId = GCM_SERCOM5_CORE;
    e40e:	230f      	movs	r3, #15
    e410:	18fb      	adds	r3, r7, r3
    e412:	2219      	movs	r2, #25
    e414:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM5_IRQn;
    e416:	230e      	movs	r3, #14
    e418:	18fb      	adds	r3, r7, r3
    e41a:	220e      	movs	r2, #14
    e41c:	701a      	strb	r2, [r3, #0]
  }
  #endif // SERCOM5

  if ( IdNvic == PendSV_IRQn )
    e41e:	230e      	movs	r3, #14
    e420:	18fb      	adds	r3, r7, r3
    e422:	781b      	ldrb	r3, [r3, #0]
    e424:	b25b      	sxtb	r3, r3
    e426:	3302      	adds	r3, #2
    e428:	d025      	beq.n	e476 <_ZN6SERCOM13initClockNVICEv+0x116>
    // We got a problem here
    return ;
  }

  // Setting NVIC
  NVIC_EnableIRQ(IdNvic);
    e42a:	230e      	movs	r3, #14
    e42c:	18fb      	adds	r3, r7, r3
    e42e:	781b      	ldrb	r3, [r3, #0]
    e430:	b25b      	sxtb	r3, r3
    e432:	0018      	movs	r0, r3
    e434:	f7ff f998 	bl	d768 <__NVIC_EnableIRQ>
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */
    e438:	230e      	movs	r3, #14
    e43a:	18fb      	adds	r3, r7, r3
    e43c:	781b      	ldrb	r3, [r3, #0]
    e43e:	b25b      	sxtb	r3, r3
    e440:	2103      	movs	r1, #3
    e442:	0018      	movs	r0, r3
    e444:	f7ff f9aa 	bl	d79c <__NVIC_SetPriority>

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    e448:	4913      	ldr	r1, [pc, #76]	; (e498 <_ZN6SERCOM13initClockNVICEv+0x138>)
    e44a:	230f      	movs	r3, #15
    e44c:	18fb      	adds	r3, r7, r3
    e44e:	781b      	ldrb	r3, [r3, #0]
    e450:	b29b      	uxth	r3, r3
    e452:	223f      	movs	r2, #63	; 0x3f
    e454:	4013      	ands	r3, r2
    e456:	b29b      	uxth	r3, r3
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    e458:	2280      	movs	r2, #128	; 0x80
    e45a:	01d2      	lsls	r2, r2, #7
    e45c:	4313      	orrs	r3, r2
    e45e:	b29b      	uxth	r3, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    e460:	804b      	strh	r3, [r1, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    e462:	4b0d      	ldr	r3, [pc, #52]	; (e498 <_ZN6SERCOM13initClockNVICEv+0x138>)
    e464:	785b      	ldrb	r3, [r3, #1]
    e466:	b2db      	uxtb	r3, r3
    e468:	b25b      	sxtb	r3, r3
    e46a:	b2db      	uxtb	r3, r3
    e46c:	09db      	lsrs	r3, r3, #7
    e46e:	b2db      	uxtb	r3, r3
    e470:	2b00      	cmp	r3, #0
    e472:	d001      	beq.n	e478 <_ZN6SERCOM13initClockNVICEv+0x118>
    e474:	e7f5      	b.n	e462 <_ZN6SERCOM13initClockNVICEv+0x102>
    return ;
    e476:	46c0      	nop			; (mov r8, r8)
  {
    /* Wait for synchronization */
  }
}
    e478:	46bd      	mov	sp, r7
    e47a:	b004      	add	sp, #16
    e47c:	bd80      	pop	{r7, pc}
    e47e:	46c0      	nop			; (mov r8, r8)
    e480:	42000800 	.word	0x42000800
    e484:	42000c00 	.word	0x42000c00
    e488:	42001000 	.word	0x42001000
    e48c:	42001400 	.word	0x42001400
    e490:	42001800 	.word	0x42001800
    e494:	42001c00 	.word	0x42001c00
    e498:	40000c00 	.word	0x40000c00

0000e49c <_ZN7Serial_C1ER14USBDeviceClass>:
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    e49c:	b580      	push	{r7, lr}
    e49e:	b082      	sub	sp, #8
    e4a0:	af00      	add	r7, sp, #0
    e4a2:	6078      	str	r0, [r7, #4]
    e4a4:	6039      	str	r1, [r7, #0]
    e4a6:	687b      	ldr	r3, [r7, #4]
    e4a8:	0018      	movs	r0, r3
    e4aa:	f7f5 f8d3 	bl	3654 <_ZN6StreamC1Ev>
    e4ae:	4a07      	ldr	r2, [pc, #28]	; (e4cc <_ZN7Serial_C1ER14USBDeviceClass+0x30>)
    e4b0:	687b      	ldr	r3, [r7, #4]
    e4b2:	601a      	str	r2, [r3, #0]
    e4b4:	687b      	ldr	r3, [r7, #4]
    e4b6:	683a      	ldr	r2, [r7, #0]
    e4b8:	611a      	str	r2, [r3, #16]
    e4ba:	687b      	ldr	r3, [r7, #4]
    e4bc:	2200      	movs	r2, #0
    e4be:	761a      	strb	r2, [r3, #24]
    e4c0:	687b      	ldr	r3, [r7, #4]
    e4c2:	0018      	movs	r0, r3
    e4c4:	46bd      	mov	sp, r7
    e4c6:	b002      	add	sp, #8
    e4c8:	bd80      	pop	{r7, pc}
    e4ca:	46c0      	nop			; (mov r8, r8)
    e4cc:	000140fc 	.word	0x000140fc

0000e4d0 <_Z16CDC_GetInterfacePh>:
{
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
    e4d0:	b580      	push	{r7, lr}
    e4d2:	b082      	sub	sp, #8
    e4d4:	af00      	add	r7, sp, #0
    e4d6:	6078      	str	r0, [r7, #4]
	interfaceNum[0] += 2;	// uses 2
    e4d8:	687b      	ldr	r3, [r7, #4]
    e4da:	781b      	ldrb	r3, [r3, #0]
    e4dc:	3302      	adds	r3, #2
    e4de:	b2da      	uxtb	r2, r3
    e4e0:	687b      	ldr	r3, [r7, #4]
    e4e2:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    e4e4:	4905      	ldr	r1, [pc, #20]	; (e4fc <_Z16CDC_GetInterfacePh+0x2c>)
    e4e6:	4b06      	ldr	r3, [pc, #24]	; (e500 <_Z16CDC_GetInterfacePh+0x30>)
    e4e8:	2242      	movs	r2, #66	; 0x42
    e4ea:	0018      	movs	r0, r3
    e4ec:	f7f7 fdae 	bl	604c <_ZN14USBDeviceClass11sendControlEPKvm>
    e4f0:	0003      	movs	r3, r0
}
    e4f2:	0018      	movs	r0, r3
    e4f4:	46bd      	mov	sp, r7
    e4f6:	b002      	add	sp, #8
    e4f8:	bd80      	pop	{r7, pc}
    e4fa:	46c0      	nop			; (mov r8, r8)
    e4fc:	2000005c 	.word	0x2000005c
    e500:	200008f0 	.word	0x200008f0

0000e504 <_Z9CDC_SetupR8USBSetup>:

bool CDC_Setup(USBSetup& setup)
{
    e504:	b580      	push	{r7, lr}
    e506:	b084      	sub	sp, #16
    e508:	af00      	add	r7, sp, #0
    e50a:	6078      	str	r0, [r7, #4]
	uint8_t requestType = setup.bmRequestType;
    e50c:	230f      	movs	r3, #15
    e50e:	18fb      	adds	r3, r7, r3
    e510:	687a      	ldr	r2, [r7, #4]
    e512:	7812      	ldrb	r2, [r2, #0]
    e514:	701a      	strb	r2, [r3, #0]
	uint8_t r = setup.bRequest;
    e516:	230e      	movs	r3, #14
    e518:	18fb      	adds	r3, r7, r3
    e51a:	687a      	ldr	r2, [r7, #4]
    e51c:	7852      	ldrb	r2, [r2, #1]
    e51e:	701a      	strb	r2, [r3, #0]

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    e520:	230f      	movs	r3, #15
    e522:	18fb      	adds	r3, r7, r3
    e524:	781b      	ldrb	r3, [r3, #0]
    e526:	2ba1      	cmp	r3, #161	; 0xa1
    e528:	d10c      	bne.n	e544 <_Z9CDC_SetupR8USBSetup+0x40>
	{
		if (r == CDC_GET_LINE_CODING)
    e52a:	230e      	movs	r3, #14
    e52c:	18fb      	adds	r3, r7, r3
    e52e:	781b      	ldrb	r3, [r3, #0]
    e530:	2b21      	cmp	r3, #33	; 0x21
    e532:	d107      	bne.n	e544 <_Z9CDC_SetupR8USBSetup+0x40>
		{
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    e534:	492c      	ldr	r1, [pc, #176]	; (e5e8 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e536:	4b2d      	ldr	r3, [pc, #180]	; (e5ec <_Z9CDC_SetupR8USBSetup+0xe8>)
    e538:	2207      	movs	r2, #7
    e53a:	0018      	movs	r0, r3
    e53c:	f7f7 fd86 	bl	604c <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    e540:	2301      	movs	r3, #1
    e542:	e04c      	b.n	e5de <_Z9CDC_SetupR8USBSetup+0xda>
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    e544:	230f      	movs	r3, #15
    e546:	18fb      	adds	r3, r7, r3
    e548:	781b      	ldrb	r3, [r3, #0]
    e54a:	2b21      	cmp	r3, #33	; 0x21
    e54c:	d146      	bne.n	e5dc <_Z9CDC_SetupR8USBSetup+0xd8>
	{
		if (r == CDC_SET_LINE_CODING)
    e54e:	230e      	movs	r3, #14
    e550:	18fb      	adds	r3, r7, r3
    e552:	781b      	ldrb	r3, [r3, #0]
    e554:	2b20      	cmp	r3, #32
    e556:	d105      	bne.n	e564 <_Z9CDC_SetupR8USBSetup+0x60>
		{
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    e558:	4923      	ldr	r1, [pc, #140]	; (e5e8 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e55a:	4b24      	ldr	r3, [pc, #144]	; (e5ec <_Z9CDC_SetupR8USBSetup+0xe8>)
    e55c:	2207      	movs	r2, #7
    e55e:	0018      	movs	r0, r3
    e560:	f7f7 fad2 	bl	5b08 <_ZN14USBDeviceClass11recvControlEPvm>
		}

		if (r == CDC_SET_CONTROL_LINE_STATE)
    e564:	230e      	movs	r3, #14
    e566:	18fb      	adds	r3, r7, r3
    e568:	781b      	ldrb	r3, [r3, #0]
    e56a:	2b22      	cmp	r3, #34	; 0x22
    e56c:	d103      	bne.n	e576 <_Z9CDC_SetupR8USBSetup+0x72>
		{
			_usbLineInfo.lineState = setup.wValueL;
    e56e:	687b      	ldr	r3, [r7, #4]
    e570:	789a      	ldrb	r2, [r3, #2]
    e572:	4b1d      	ldr	r3, [pc, #116]	; (e5e8 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e574:	71da      	strb	r2, [r3, #7]
		}

		if (r == CDC_SET_LINE_CODING || r == CDC_SET_CONTROL_LINE_STATE)
    e576:	230e      	movs	r3, #14
    e578:	18fb      	adds	r3, r7, r3
    e57a:	781b      	ldrb	r3, [r3, #0]
    e57c:	2b20      	cmp	r3, #32
    e57e:	d004      	beq.n	e58a <_Z9CDC_SetupR8USBSetup+0x86>
    e580:	230e      	movs	r3, #14
    e582:	18fb      	adds	r3, r7, r3
    e584:	781b      	ldrb	r3, [r3, #0]
    e586:	2b22      	cmp	r3, #34	; 0x22
    e588:	d119      	bne.n	e5be <_Z9CDC_SetupR8USBSetup+0xba>
		{
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed. We check DTR state to determine if host 
			// port is open (bit 0 of lineState).
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    e58a:	4b17      	ldr	r3, [pc, #92]	; (e5e8 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e58c:	681a      	ldr	r2, [r3, #0]
    e58e:	2396      	movs	r3, #150	; 0x96
    e590:	00db      	lsls	r3, r3, #3
    e592:	429a      	cmp	r2, r3
    e594:	d108      	bne.n	e5a8 <_Z9CDC_SetupR8USBSetup+0xa4>
    e596:	4b14      	ldr	r3, [pc, #80]	; (e5e8 <_Z9CDC_SetupR8USBSetup+0xe4>)
    e598:	79db      	ldrb	r3, [r3, #7]
    e59a:	b2db      	uxtb	r3, r3
    e59c:	001a      	movs	r2, r3
    e59e:	2301      	movs	r3, #1
    e5a0:	4013      	ands	r3, r2
    e5a2:	d101      	bne.n	e5a8 <_Z9CDC_SetupR8USBSetup+0xa4>
    e5a4:	2301      	movs	r3, #1
    e5a6:	e000      	b.n	e5aa <_Z9CDC_SetupR8USBSetup+0xa6>
    e5a8:	2300      	movs	r3, #0
    e5aa:	2b00      	cmp	r3, #0
    e5ac:	d003      	beq.n	e5b6 <_Z9CDC_SetupR8USBSetup+0xb2>
			{
				initiateReset(250);
    e5ae:	20fa      	movs	r0, #250	; 0xfa
    e5b0:	f7f4 fefc 	bl	33ac <initiateReset>
    e5b4:	e001      	b.n	e5ba <_Z9CDC_SetupR8USBSetup+0xb6>
			}
			else
			{
				cancelReset();
    e5b6:	f7f4 ff07 	bl	33c8 <cancelReset>
			}
			return false;
    e5ba:	2300      	movs	r3, #0
    e5bc:	e00f      	b.n	e5de <_Z9CDC_SetupR8USBSetup+0xda>
		}

		if (CDC_SEND_BREAK == r)
    e5be:	230e      	movs	r3, #14
    e5c0:	18fb      	adds	r3, r7, r3
    e5c2:	781b      	ldrb	r3, [r3, #0]
    e5c4:	2b23      	cmp	r3, #35	; 0x23
    e5c6:	d109      	bne.n	e5dc <_Z9CDC_SetupR8USBSetup+0xd8>
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    e5c8:	687b      	ldr	r3, [r7, #4]
    e5ca:	78db      	ldrb	r3, [r3, #3]
    e5cc:	021b      	lsls	r3, r3, #8
    e5ce:	687a      	ldr	r2, [r7, #4]
    e5d0:	7892      	ldrb	r2, [r2, #2]
    e5d2:	431a      	orrs	r2, r3
    e5d4:	4b06      	ldr	r3, [pc, #24]	; (e5f0 <_Z9CDC_SetupR8USBSetup+0xec>)
    e5d6:	601a      	str	r2, [r3, #0]
			return false;
    e5d8:	2300      	movs	r3, #0
    e5da:	e000      	b.n	e5de <_Z9CDC_SetupR8USBSetup+0xda>
		}
	}
	return false;
    e5dc:	2300      	movs	r3, #0
}
    e5de:	0018      	movs	r0, r3
    e5e0:	46bd      	mov	sp, r7
    e5e2:	b004      	add	sp, #16
    e5e4:	bd80      	pop	{r7, pc}
    e5e6:	46c0      	nop			; (mov r8, r8)
    e5e8:	20000050 	.word	0x20000050
    e5ec:	200008f0 	.word	0x200008f0
    e5f0:	20000058 	.word	0x20000058

0000e5f4 <_ZN7Serial_9availableEv>:
void Serial_::end(void)
{
}

int Serial_::available(void)
{
    e5f4:	b580      	push	{r7, lr}
    e5f6:	b082      	sub	sp, #8
    e5f8:	af00      	add	r7, sp, #0
    e5fa:	6078      	str	r0, [r7, #4]
	return usb.available(CDC_ENDPOINT_OUT);
    e5fc:	687b      	ldr	r3, [r7, #4]
    e5fe:	691b      	ldr	r3, [r3, #16]
    e600:	2102      	movs	r1, #2
    e602:	0018      	movs	r0, r3
    e604:	f7f7 fab8 	bl	5b78 <_ZN14USBDeviceClass9availableEm>
    e608:	0003      	movs	r3, r0
}
    e60a:	0018      	movs	r0, r3
    e60c:	46bd      	mov	sp, r7
    e60e:	b002      	add	sp, #8
    e610:	bd80      	pop	{r7, pc}

0000e612 <_ZN7Serial_17availableForWriteEv>:

int Serial_::availableForWrite(void)
{
    e612:	b580      	push	{r7, lr}
    e614:	b082      	sub	sp, #8
    e616:	af00      	add	r7, sp, #0
    e618:	6078      	str	r0, [r7, #4]
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
    e61a:	233f      	movs	r3, #63	; 0x3f
}
    e61c:	0018      	movs	r0, r3
    e61e:	46bd      	mov	sp, r7
    e620:	b002      	add	sp, #8
    e622:	bd80      	pop	{r7, pc}

0000e624 <_ZN7Serial_4peekEv>:

int _serialPeek = -1;

int Serial_::peek(void)
{
    e624:	b580      	push	{r7, lr}
    e626:	b082      	sub	sp, #8
    e628:	af00      	add	r7, sp, #0
    e62a:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1)
    e62c:	4b0b      	ldr	r3, [pc, #44]	; (e65c <_ZN7Serial_4peekEv+0x38>)
    e62e:	681b      	ldr	r3, [r3, #0]
    e630:	3301      	adds	r3, #1
    e632:	d002      	beq.n	e63a <_ZN7Serial_4peekEv+0x16>
		return _serialPeek;
    e634:	4b09      	ldr	r3, [pc, #36]	; (e65c <_ZN7Serial_4peekEv+0x38>)
    e636:	681b      	ldr	r3, [r3, #0]
    e638:	e00b      	b.n	e652 <_ZN7Serial_4peekEv+0x2e>
	_serialPeek = read();
    e63a:	687b      	ldr	r3, [r7, #4]
    e63c:	681b      	ldr	r3, [r3, #0]
    e63e:	3314      	adds	r3, #20
    e640:	681b      	ldr	r3, [r3, #0]
    e642:	687a      	ldr	r2, [r7, #4]
    e644:	0010      	movs	r0, r2
    e646:	4798      	blx	r3
    e648:	0002      	movs	r2, r0
    e64a:	4b04      	ldr	r3, [pc, #16]	; (e65c <_ZN7Serial_4peekEv+0x38>)
    e64c:	601a      	str	r2, [r3, #0]
	return _serialPeek;
    e64e:	4b03      	ldr	r3, [pc, #12]	; (e65c <_ZN7Serial_4peekEv+0x38>)
    e650:	681b      	ldr	r3, [r3, #0]
}
    e652:	0018      	movs	r0, r3
    e654:	46bd      	mov	sp, r7
    e656:	b002      	add	sp, #8
    e658:	bd80      	pop	{r7, pc}
    e65a:	46c0      	nop			; (mov r8, r8)
    e65c:	200000a0 	.word	0x200000a0

0000e660 <_ZN7Serial_4readEv>:

int Serial_::read(void)
{
    e660:	b580      	push	{r7, lr}
    e662:	b084      	sub	sp, #16
    e664:	af00      	add	r7, sp, #0
    e666:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1) {
    e668:	4b0b      	ldr	r3, [pc, #44]	; (e698 <_ZN7Serial_4readEv+0x38>)
    e66a:	681b      	ldr	r3, [r3, #0]
    e66c:	3301      	adds	r3, #1
    e66e:	d008      	beq.n	e682 <_ZN7Serial_4readEv+0x22>
		int res = _serialPeek;
    e670:	4b09      	ldr	r3, [pc, #36]	; (e698 <_ZN7Serial_4readEv+0x38>)
    e672:	681b      	ldr	r3, [r3, #0]
    e674:	60fb      	str	r3, [r7, #12]
		_serialPeek = -1;
    e676:	4b08      	ldr	r3, [pc, #32]	; (e698 <_ZN7Serial_4readEv+0x38>)
    e678:	2201      	movs	r2, #1
    e67a:	4252      	negs	r2, r2
    e67c:	601a      	str	r2, [r3, #0]
		return res;
    e67e:	68fb      	ldr	r3, [r7, #12]
    e680:	e006      	b.n	e690 <_ZN7Serial_4readEv+0x30>
	}
	return usb.recv(CDC_ENDPOINT_OUT);
    e682:	687b      	ldr	r3, [r7, #4]
    e684:	691b      	ldr	r3, [r3, #16]
    e686:	2102      	movs	r1, #2
    e688:	0018      	movs	r0, r3
    e68a:	f7f7 fb35 	bl	5cf8 <_ZN14USBDeviceClass4recvEm>
    e68e:	0003      	movs	r3, r0
}
    e690:	0018      	movs	r0, r3
    e692:	46bd      	mov	sp, r7
    e694:	b004      	add	sp, #16
    e696:	bd80      	pop	{r7, pc}
    e698:	200000a0 	.word	0x200000a0

0000e69c <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
    e69c:	b580      	push	{r7, lr}
    e69e:	b082      	sub	sp, #8
    e6a0:	af00      	add	r7, sp, #0
    e6a2:	6078      	str	r0, [r7, #4]
	usb.flush(CDC_ENDPOINT_IN);
    e6a4:	687b      	ldr	r3, [r7, #4]
    e6a6:	691b      	ldr	r3, [r3, #16]
    e6a8:	2103      	movs	r1, #3
    e6aa:	0018      	movs	r0, r3
    e6ac:	f7f7 f9f2 	bl	5a94 <_ZN14USBDeviceClass5flushEm>
}
    e6b0:	46c0      	nop			; (mov r8, r8)
    e6b2:	46bd      	mov	sp, r7
    e6b4:	b002      	add	sp, #8
    e6b6:	bd80      	pop	{r7, pc}

0000e6b8 <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
    e6b8:	b580      	push	{r7, lr}
    e6ba:	b086      	sub	sp, #24
    e6bc:	af00      	add	r7, sp, #0
    e6be:	60f8      	str	r0, [r7, #12]
    e6c0:	60b9      	str	r1, [r7, #8]
    e6c2:	607a      	str	r2, [r7, #4]
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    e6c4:	68fb      	ldr	r3, [r7, #12]
    e6c6:	6918      	ldr	r0, [r3, #16]
    e6c8:	687b      	ldr	r3, [r7, #4]
    e6ca:	68ba      	ldr	r2, [r7, #8]
    e6cc:	2103      	movs	r1, #3
    e6ce:	f7f7 fbbd 	bl	5e4c <_ZN14USBDeviceClass4sendEmPKvm>
    e6d2:	0003      	movs	r3, r0
    e6d4:	617b      	str	r3, [r7, #20]

	if (r > 0) {
    e6d6:	697b      	ldr	r3, [r7, #20]
    e6d8:	2b00      	cmp	r3, #0
    e6da:	d001      	beq.n	e6e0 <_ZN7Serial_5writeEPKhj+0x28>
		return r;
    e6dc:	697b      	ldr	r3, [r7, #20]
    e6de:	e005      	b.n	e6ec <_ZN7Serial_5writeEPKhj+0x34>
	} else {
		setWriteError();
    e6e0:	68fb      	ldr	r3, [r7, #12]
    e6e2:	2101      	movs	r1, #1
    e6e4:	0018      	movs	r0, r3
    e6e6:	f7fa f86b 	bl	87c0 <_ZN5Print13setWriteErrorEi>
		return 0;
    e6ea:	2300      	movs	r3, #0
	}
}
    e6ec:	0018      	movs	r0, r3
    e6ee:	46bd      	mov	sp, r7
    e6f0:	b006      	add	sp, #24
    e6f2:	bd80      	pop	{r7, pc}

0000e6f4 <_ZN7Serial_5writeEh>:

size_t Serial_::write(uint8_t c) {
    e6f4:	b580      	push	{r7, lr}
    e6f6:	b082      	sub	sp, #8
    e6f8:	af00      	add	r7, sp, #0
    e6fa:	6078      	str	r0, [r7, #4]
    e6fc:	000a      	movs	r2, r1
    e6fe:	1cfb      	adds	r3, r7, #3
    e700:	701a      	strb	r2, [r3, #0]
	return write(&c, 1);
    e702:	687b      	ldr	r3, [r7, #4]
    e704:	681b      	ldr	r3, [r3, #0]
    e706:	3304      	adds	r3, #4
    e708:	681b      	ldr	r3, [r3, #0]
    e70a:	1cf9      	adds	r1, r7, #3
    e70c:	6878      	ldr	r0, [r7, #4]
    e70e:	2201      	movs	r2, #1
    e710:	4798      	blx	r3
    e712:	0003      	movs	r3, r0
}
    e714:	0018      	movs	r0, r3
    e716:	46bd      	mov	sp, r7
    e718:	b002      	add	sp, #8
    e71a:	bd80      	pop	{r7, pc}

0000e71c <_Z41__static_initialization_and_destruction_0ii>:

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    e71c:	b580      	push	{r7, lr}
    e71e:	b082      	sub	sp, #8
    e720:	af00      	add	r7, sp, #0
    e722:	6078      	str	r0, [r7, #4]
    e724:	6039      	str	r1, [r7, #0]
    e726:	687b      	ldr	r3, [r7, #4]
    e728:	2b01      	cmp	r3, #1
    e72a:	d109      	bne.n	e740 <_Z41__static_initialization_and_destruction_0ii+0x24>
    e72c:	683b      	ldr	r3, [r7, #0]
    e72e:	4a06      	ldr	r2, [pc, #24]	; (e748 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    e730:	4293      	cmp	r3, r2
    e732:	d105      	bne.n	e740 <_Z41__static_initialization_and_destruction_0ii+0x24>
    e734:	4a05      	ldr	r2, [pc, #20]	; (e74c <_Z41__static_initialization_and_destruction_0ii+0x30>)
    e736:	4b06      	ldr	r3, [pc, #24]	; (e750 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e738:	0011      	movs	r1, r2
    e73a:	0018      	movs	r0, r3
    e73c:	f7ff feae 	bl	e49c <_ZN7Serial_C1ER14USBDeviceClass>
    e740:	46c0      	nop			; (mov r8, r8)
    e742:	46bd      	mov	sp, r7
    e744:	b002      	add	sp, #8
    e746:	bd80      	pop	{r7, pc}
    e748:	0000ffff 	.word	0x0000ffff
    e74c:	200008f0 	.word	0x200008f0
    e750:	20000f50 	.word	0x20000f50

0000e754 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    e754:	b580      	push	{r7, lr}
    e756:	af00      	add	r7, sp, #0
    e758:	4b03      	ldr	r3, [pc, #12]	; (e768 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x14>)
    e75a:	0019      	movs	r1, r3
    e75c:	2001      	movs	r0, #1
    e75e:	f7ff ffdd 	bl	e71c <_Z41__static_initialization_and_destruction_0ii>
    e762:	46bd      	mov	sp, r7
    e764:	bd80      	pop	{r7, pc}
    e766:	46c0      	nop			; (mov r8, r8)
    e768:	0000ffff 	.word	0x0000ffff

0000e76c <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    e76c:	b580      	push	{r7, lr}
    e76e:	b086      	sub	sp, #24
    e770:	af00      	add	r7, sp, #0
    e772:	6078      	str	r0, [r7, #4]
    e774:	6039      	str	r1, [r7, #0]
	int sent = 0;
    e776:	2300      	movs	r3, #0
    e778:	617b      	str	r3, [r7, #20]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e77a:	687b      	ldr	r3, [r7, #4]
    e77c:	685b      	ldr	r3, [r3, #4]
    e77e:	613b      	str	r3, [r7, #16]
    e780:	693b      	ldr	r3, [r7, #16]
    e782:	2b00      	cmp	r3, #0
    e784:	d017      	beq.n	e7b6 <_ZN13PluggableUSB_12getInterfaceEPh+0x4a>
		int res = node->getInterface(interfaceCount);
    e786:	693b      	ldr	r3, [r7, #16]
    e788:	681b      	ldr	r3, [r3, #0]
    e78a:	3304      	adds	r3, #4
    e78c:	681b      	ldr	r3, [r3, #0]
    e78e:	6839      	ldr	r1, [r7, #0]
    e790:	693a      	ldr	r2, [r7, #16]
    e792:	0010      	movs	r0, r2
    e794:	4798      	blx	r3
    e796:	0003      	movs	r3, r0
    e798:	60fb      	str	r3, [r7, #12]
		if (res < 0)
    e79a:	68fb      	ldr	r3, [r7, #12]
    e79c:	2b00      	cmp	r3, #0
    e79e:	da02      	bge.n	e7a6 <_ZN13PluggableUSB_12getInterfaceEPh+0x3a>
			return -1;
    e7a0:	2301      	movs	r3, #1
    e7a2:	425b      	negs	r3, r3
    e7a4:	e008      	b.n	e7b8 <_ZN13PluggableUSB_12getInterfaceEPh+0x4c>
		sent += res;
    e7a6:	697a      	ldr	r2, [r7, #20]
    e7a8:	68fb      	ldr	r3, [r7, #12]
    e7aa:	18d3      	adds	r3, r2, r3
    e7ac:	617b      	str	r3, [r7, #20]
	for (node = rootNode; node; node = node->next) {
    e7ae:	693b      	ldr	r3, [r7, #16]
    e7b0:	68db      	ldr	r3, [r3, #12]
    e7b2:	613b      	str	r3, [r7, #16]
    e7b4:	e7e4      	b.n	e780 <_ZN13PluggableUSB_12getInterfaceEPh+0x14>
	}
	return sent;
    e7b6:	697b      	ldr	r3, [r7, #20]
}
    e7b8:	0018      	movs	r0, r3
    e7ba:	46bd      	mov	sp, r7
    e7bc:	b006      	add	sp, #24
    e7be:	bd80      	pop	{r7, pc}

0000e7c0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    e7c0:	b580      	push	{r7, lr}
    e7c2:	b084      	sub	sp, #16
    e7c4:	af00      	add	r7, sp, #0
    e7c6:	6078      	str	r0, [r7, #4]
    e7c8:	6039      	str	r1, [r7, #0]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e7ca:	687b      	ldr	r3, [r7, #4]
    e7cc:	685b      	ldr	r3, [r3, #4]
    e7ce:	60fb      	str	r3, [r7, #12]
    e7d0:	68fb      	ldr	r3, [r7, #12]
    e7d2:	2b00      	cmp	r3, #0
    e7d4:	d012      	beq.n	e7fc <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x3c>
		int ret = node->getDescriptor(setup);
    e7d6:	68fb      	ldr	r3, [r7, #12]
    e7d8:	681b      	ldr	r3, [r3, #0]
    e7da:	3308      	adds	r3, #8
    e7dc:	681b      	ldr	r3, [r3, #0]
    e7de:	6839      	ldr	r1, [r7, #0]
    e7e0:	68fa      	ldr	r2, [r7, #12]
    e7e2:	0010      	movs	r0, r2
    e7e4:	4798      	blx	r3
    e7e6:	0003      	movs	r3, r0
    e7e8:	60bb      	str	r3, [r7, #8]
		// ret!=0 -> request has been processed
		if (ret)
    e7ea:	68bb      	ldr	r3, [r7, #8]
    e7ec:	2b00      	cmp	r3, #0
    e7ee:	d001      	beq.n	e7f4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
			return ret;
    e7f0:	68bb      	ldr	r3, [r7, #8]
    e7f2:	e004      	b.n	e7fe <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x3e>
	for (node = rootNode; node; node = node->next) {
    e7f4:	68fb      	ldr	r3, [r7, #12]
    e7f6:	68db      	ldr	r3, [r3, #12]
    e7f8:	60fb      	str	r3, [r7, #12]
    e7fa:	e7e9      	b.n	e7d0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
	}
	return 0;
    e7fc:	2300      	movs	r3, #0
}
    e7fe:	0018      	movs	r0, r3
    e800:	46bd      	mov	sp, r7
    e802:	b004      	add	sp, #16
    e804:	bd80      	pop	{r7, pc}

0000e806 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    e806:	b580      	push	{r7, lr}
    e808:	b084      	sub	sp, #16
    e80a:	af00      	add	r7, sp, #0
    e80c:	6078      	str	r0, [r7, #4]
    e80e:	6039      	str	r1, [r7, #0]
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    e810:	687b      	ldr	r3, [r7, #4]
    e812:	685b      	ldr	r3, [r3, #4]
    e814:	60fb      	str	r3, [r7, #12]
    e816:	68fb      	ldr	r3, [r7, #12]
    e818:	2b00      	cmp	r3, #0
    e81a:	d010      	beq.n	e83e <_ZN13PluggableUSB_12getShortNameEPc+0x38>
               iSerialNum += node->getShortName(iSerialNum);
    e81c:	68fb      	ldr	r3, [r7, #12]
    e81e:	681b      	ldr	r3, [r3, #0]
    e820:	330c      	adds	r3, #12
    e822:	681b      	ldr	r3, [r3, #0]
    e824:	6839      	ldr	r1, [r7, #0]
    e826:	68fa      	ldr	r2, [r7, #12]
    e828:	0010      	movs	r0, r2
    e82a:	4798      	blx	r3
    e82c:	0003      	movs	r3, r0
    e82e:	001a      	movs	r2, r3
    e830:	683b      	ldr	r3, [r7, #0]
    e832:	189b      	adds	r3, r3, r2
    e834:	603b      	str	r3, [r7, #0]
       for (node = rootNode; node; node = node->next) {
    e836:	68fb      	ldr	r3, [r7, #12]
    e838:	68db      	ldr	r3, [r3, #12]
    e83a:	60fb      	str	r3, [r7, #12]
    e83c:	e7eb      	b.n	e816 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
       }
       *iSerialNum = 0;
    e83e:	683b      	ldr	r3, [r7, #0]
    e840:	2200      	movs	r2, #0
    e842:	701a      	strb	r2, [r3, #0]
}
    e844:	46c0      	nop			; (mov r8, r8)
    e846:	46bd      	mov	sp, r7
    e848:	b004      	add	sp, #16
    e84a:	bd80      	pop	{r7, pc}

0000e84c <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    e84c:	b580      	push	{r7, lr}
    e84e:	b084      	sub	sp, #16
    e850:	af00      	add	r7, sp, #0
    e852:	6078      	str	r0, [r7, #4]
    e854:	6039      	str	r1, [r7, #0]
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    e856:	687b      	ldr	r3, [r7, #4]
    e858:	685b      	ldr	r3, [r3, #4]
    e85a:	60fb      	str	r3, [r7, #12]
    e85c:	68fb      	ldr	r3, [r7, #12]
    e85e:	2b00      	cmp	r3, #0
    e860:	d00e      	beq.n	e880 <_ZN13PluggableUSB_5setupER8USBSetup+0x34>
		if (node->setup(setup)) {
    e862:	68fb      	ldr	r3, [r7, #12]
    e864:	681b      	ldr	r3, [r3, #0]
    e866:	681b      	ldr	r3, [r3, #0]
    e868:	6839      	ldr	r1, [r7, #0]
    e86a:	68fa      	ldr	r2, [r7, #12]
    e86c:	0010      	movs	r0, r2
    e86e:	4798      	blx	r3
    e870:	1e03      	subs	r3, r0, #0
    e872:	d001      	beq.n	e878 <_ZN13PluggableUSB_5setupER8USBSetup+0x2c>
			return true;
    e874:	2301      	movs	r3, #1
    e876:	e004      	b.n	e882 <_ZN13PluggableUSB_5setupER8USBSetup+0x36>
	for (node = rootNode; node; node = node->next) {
    e878:	68fb      	ldr	r3, [r7, #12]
    e87a:	68db      	ldr	r3, [r3, #12]
    e87c:	60fb      	str	r3, [r7, #12]
    e87e:	e7ed      	b.n	e85c <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
		}
	}
	return false;
    e880:	2300      	movs	r3, #0
}
    e882:	0018      	movs	r0, r3
    e884:	46bd      	mov	sp, r7
    e886:	b004      	add	sp, #16
    e888:	bd80      	pop	{r7, pc}
	...

0000e88c <_Z12PluggableUSBv>:
	return true;
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
    e88c:	b580      	push	{r7, lr}
    e88e:	af00      	add	r7, sp, #0
	static PluggableUSB_ obj;
    e890:	4b07      	ldr	r3, [pc, #28]	; (e8b0 <_Z12PluggableUSBv+0x24>)
    e892:	681b      	ldr	r3, [r3, #0]
    e894:	2201      	movs	r2, #1
    e896:	4013      	ands	r3, r2
    e898:	d106      	bne.n	e8a8 <_Z12PluggableUSBv+0x1c>
    e89a:	4b06      	ldr	r3, [pc, #24]	; (e8b4 <_Z12PluggableUSBv+0x28>)
    e89c:	0018      	movs	r0, r3
    e89e:	f000 f80b 	bl	e8b8 <_ZN13PluggableUSB_C1Ev>
    e8a2:	4b03      	ldr	r3, [pc, #12]	; (e8b0 <_Z12PluggableUSBv+0x24>)
    e8a4:	2201      	movs	r2, #1
    e8a6:	601a      	str	r2, [r3, #0]
	return obj;
    e8a8:	4b02      	ldr	r3, [pc, #8]	; (e8b4 <_Z12PluggableUSBv+0x28>)
}
    e8aa:	0018      	movs	r0, r3
    e8ac:	46bd      	mov	sp, r7
    e8ae:	bd80      	pop	{r7, pc}
    e8b0:	20000f74 	.word	0x20000f74
    e8b4:	20000f6c 	.word	0x20000f6c

0000e8b8 <_ZN13PluggableUSB_C1Ev>:

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
    e8b8:	b580      	push	{r7, lr}
    e8ba:	b082      	sub	sp, #8
    e8bc:	af00      	add	r7, sp, #0
    e8be:	6078      	str	r0, [r7, #4]
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    e8c0:	687b      	ldr	r3, [r7, #4]
    e8c2:	2202      	movs	r2, #2
    e8c4:	701a      	strb	r2, [r3, #0]
    e8c6:	687b      	ldr	r3, [r7, #4]
    e8c8:	2204      	movs	r2, #4
    e8ca:	705a      	strb	r2, [r3, #1]
    e8cc:	687b      	ldr	r3, [r7, #4]
    e8ce:	2200      	movs	r2, #0
    e8d0:	605a      	str	r2, [r3, #4]
{
	// Empty
}
    e8d2:	687b      	ldr	r3, [r7, #4]
    e8d4:	0018      	movs	r0, r3
    e8d6:	46bd      	mov	sp, r7
    e8d8:	b002      	add	sp, #8
    e8da:	bd80      	pop	{r7, pc}

0000e8dc <__aeabi_atexit>:
    e8dc:	000b      	movs	r3, r1
    e8de:	b510      	push	{r4, lr}
    e8e0:	0001      	movs	r1, r0
    e8e2:	0018      	movs	r0, r3
    e8e4:	f001 ff58 	bl	10798 <__cxa_atexit>
    e8e8:	bd10      	pop	{r4, pc}
	...

0000e8ec <__udivsi3>:
    e8ec:	2200      	movs	r2, #0
    e8ee:	0843      	lsrs	r3, r0, #1
    e8f0:	428b      	cmp	r3, r1
    e8f2:	d374      	bcc.n	e9de <__udivsi3+0xf2>
    e8f4:	0903      	lsrs	r3, r0, #4
    e8f6:	428b      	cmp	r3, r1
    e8f8:	d35f      	bcc.n	e9ba <__udivsi3+0xce>
    e8fa:	0a03      	lsrs	r3, r0, #8
    e8fc:	428b      	cmp	r3, r1
    e8fe:	d344      	bcc.n	e98a <__udivsi3+0x9e>
    e900:	0b03      	lsrs	r3, r0, #12
    e902:	428b      	cmp	r3, r1
    e904:	d328      	bcc.n	e958 <__udivsi3+0x6c>
    e906:	0c03      	lsrs	r3, r0, #16
    e908:	428b      	cmp	r3, r1
    e90a:	d30d      	bcc.n	e928 <__udivsi3+0x3c>
    e90c:	22ff      	movs	r2, #255	; 0xff
    e90e:	0209      	lsls	r1, r1, #8
    e910:	ba12      	rev	r2, r2
    e912:	0c03      	lsrs	r3, r0, #16
    e914:	428b      	cmp	r3, r1
    e916:	d302      	bcc.n	e91e <__udivsi3+0x32>
    e918:	1212      	asrs	r2, r2, #8
    e91a:	0209      	lsls	r1, r1, #8
    e91c:	d065      	beq.n	e9ea <__udivsi3+0xfe>
    e91e:	0b03      	lsrs	r3, r0, #12
    e920:	428b      	cmp	r3, r1
    e922:	d319      	bcc.n	e958 <__udivsi3+0x6c>
    e924:	e000      	b.n	e928 <__udivsi3+0x3c>
    e926:	0a09      	lsrs	r1, r1, #8
    e928:	0bc3      	lsrs	r3, r0, #15
    e92a:	428b      	cmp	r3, r1
    e92c:	d301      	bcc.n	e932 <__udivsi3+0x46>
    e92e:	03cb      	lsls	r3, r1, #15
    e930:	1ac0      	subs	r0, r0, r3
    e932:	4152      	adcs	r2, r2
    e934:	0b83      	lsrs	r3, r0, #14
    e936:	428b      	cmp	r3, r1
    e938:	d301      	bcc.n	e93e <__udivsi3+0x52>
    e93a:	038b      	lsls	r3, r1, #14
    e93c:	1ac0      	subs	r0, r0, r3
    e93e:	4152      	adcs	r2, r2
    e940:	0b43      	lsrs	r3, r0, #13
    e942:	428b      	cmp	r3, r1
    e944:	d301      	bcc.n	e94a <__udivsi3+0x5e>
    e946:	034b      	lsls	r3, r1, #13
    e948:	1ac0      	subs	r0, r0, r3
    e94a:	4152      	adcs	r2, r2
    e94c:	0b03      	lsrs	r3, r0, #12
    e94e:	428b      	cmp	r3, r1
    e950:	d301      	bcc.n	e956 <__udivsi3+0x6a>
    e952:	030b      	lsls	r3, r1, #12
    e954:	1ac0      	subs	r0, r0, r3
    e956:	4152      	adcs	r2, r2
    e958:	0ac3      	lsrs	r3, r0, #11
    e95a:	428b      	cmp	r3, r1
    e95c:	d301      	bcc.n	e962 <__udivsi3+0x76>
    e95e:	02cb      	lsls	r3, r1, #11
    e960:	1ac0      	subs	r0, r0, r3
    e962:	4152      	adcs	r2, r2
    e964:	0a83      	lsrs	r3, r0, #10
    e966:	428b      	cmp	r3, r1
    e968:	d301      	bcc.n	e96e <__udivsi3+0x82>
    e96a:	028b      	lsls	r3, r1, #10
    e96c:	1ac0      	subs	r0, r0, r3
    e96e:	4152      	adcs	r2, r2
    e970:	0a43      	lsrs	r3, r0, #9
    e972:	428b      	cmp	r3, r1
    e974:	d301      	bcc.n	e97a <__udivsi3+0x8e>
    e976:	024b      	lsls	r3, r1, #9
    e978:	1ac0      	subs	r0, r0, r3
    e97a:	4152      	adcs	r2, r2
    e97c:	0a03      	lsrs	r3, r0, #8
    e97e:	428b      	cmp	r3, r1
    e980:	d301      	bcc.n	e986 <__udivsi3+0x9a>
    e982:	020b      	lsls	r3, r1, #8
    e984:	1ac0      	subs	r0, r0, r3
    e986:	4152      	adcs	r2, r2
    e988:	d2cd      	bcs.n	e926 <__udivsi3+0x3a>
    e98a:	09c3      	lsrs	r3, r0, #7
    e98c:	428b      	cmp	r3, r1
    e98e:	d301      	bcc.n	e994 <__udivsi3+0xa8>
    e990:	01cb      	lsls	r3, r1, #7
    e992:	1ac0      	subs	r0, r0, r3
    e994:	4152      	adcs	r2, r2
    e996:	0983      	lsrs	r3, r0, #6
    e998:	428b      	cmp	r3, r1
    e99a:	d301      	bcc.n	e9a0 <__udivsi3+0xb4>
    e99c:	018b      	lsls	r3, r1, #6
    e99e:	1ac0      	subs	r0, r0, r3
    e9a0:	4152      	adcs	r2, r2
    e9a2:	0943      	lsrs	r3, r0, #5
    e9a4:	428b      	cmp	r3, r1
    e9a6:	d301      	bcc.n	e9ac <__udivsi3+0xc0>
    e9a8:	014b      	lsls	r3, r1, #5
    e9aa:	1ac0      	subs	r0, r0, r3
    e9ac:	4152      	adcs	r2, r2
    e9ae:	0903      	lsrs	r3, r0, #4
    e9b0:	428b      	cmp	r3, r1
    e9b2:	d301      	bcc.n	e9b8 <__udivsi3+0xcc>
    e9b4:	010b      	lsls	r3, r1, #4
    e9b6:	1ac0      	subs	r0, r0, r3
    e9b8:	4152      	adcs	r2, r2
    e9ba:	08c3      	lsrs	r3, r0, #3
    e9bc:	428b      	cmp	r3, r1
    e9be:	d301      	bcc.n	e9c4 <__udivsi3+0xd8>
    e9c0:	00cb      	lsls	r3, r1, #3
    e9c2:	1ac0      	subs	r0, r0, r3
    e9c4:	4152      	adcs	r2, r2
    e9c6:	0883      	lsrs	r3, r0, #2
    e9c8:	428b      	cmp	r3, r1
    e9ca:	d301      	bcc.n	e9d0 <__udivsi3+0xe4>
    e9cc:	008b      	lsls	r3, r1, #2
    e9ce:	1ac0      	subs	r0, r0, r3
    e9d0:	4152      	adcs	r2, r2
    e9d2:	0843      	lsrs	r3, r0, #1
    e9d4:	428b      	cmp	r3, r1
    e9d6:	d301      	bcc.n	e9dc <__udivsi3+0xf0>
    e9d8:	004b      	lsls	r3, r1, #1
    e9da:	1ac0      	subs	r0, r0, r3
    e9dc:	4152      	adcs	r2, r2
    e9de:	1a41      	subs	r1, r0, r1
    e9e0:	d200      	bcs.n	e9e4 <__udivsi3+0xf8>
    e9e2:	4601      	mov	r1, r0
    e9e4:	4152      	adcs	r2, r2
    e9e6:	4610      	mov	r0, r2
    e9e8:	4770      	bx	lr
    e9ea:	e7ff      	b.n	e9ec <__udivsi3+0x100>
    e9ec:	b501      	push	{r0, lr}
    e9ee:	2000      	movs	r0, #0
    e9f0:	f000 f8f0 	bl	ebd4 <__aeabi_idiv0>
    e9f4:	bd02      	pop	{r1, pc}
    e9f6:	46c0      	nop			; (mov r8, r8)

0000e9f8 <__aeabi_uidivmod>:
    e9f8:	2900      	cmp	r1, #0
    e9fa:	d0f7      	beq.n	e9ec <__udivsi3+0x100>
    e9fc:	e776      	b.n	e8ec <__udivsi3>
    e9fe:	4770      	bx	lr

0000ea00 <__divsi3>:
    ea00:	4603      	mov	r3, r0
    ea02:	430b      	orrs	r3, r1
    ea04:	d47f      	bmi.n	eb06 <__divsi3+0x106>
    ea06:	2200      	movs	r2, #0
    ea08:	0843      	lsrs	r3, r0, #1
    ea0a:	428b      	cmp	r3, r1
    ea0c:	d374      	bcc.n	eaf8 <__divsi3+0xf8>
    ea0e:	0903      	lsrs	r3, r0, #4
    ea10:	428b      	cmp	r3, r1
    ea12:	d35f      	bcc.n	ead4 <__divsi3+0xd4>
    ea14:	0a03      	lsrs	r3, r0, #8
    ea16:	428b      	cmp	r3, r1
    ea18:	d344      	bcc.n	eaa4 <__divsi3+0xa4>
    ea1a:	0b03      	lsrs	r3, r0, #12
    ea1c:	428b      	cmp	r3, r1
    ea1e:	d328      	bcc.n	ea72 <__divsi3+0x72>
    ea20:	0c03      	lsrs	r3, r0, #16
    ea22:	428b      	cmp	r3, r1
    ea24:	d30d      	bcc.n	ea42 <__divsi3+0x42>
    ea26:	22ff      	movs	r2, #255	; 0xff
    ea28:	0209      	lsls	r1, r1, #8
    ea2a:	ba12      	rev	r2, r2
    ea2c:	0c03      	lsrs	r3, r0, #16
    ea2e:	428b      	cmp	r3, r1
    ea30:	d302      	bcc.n	ea38 <__divsi3+0x38>
    ea32:	1212      	asrs	r2, r2, #8
    ea34:	0209      	lsls	r1, r1, #8
    ea36:	d065      	beq.n	eb04 <__divsi3+0x104>
    ea38:	0b03      	lsrs	r3, r0, #12
    ea3a:	428b      	cmp	r3, r1
    ea3c:	d319      	bcc.n	ea72 <__divsi3+0x72>
    ea3e:	e000      	b.n	ea42 <__divsi3+0x42>
    ea40:	0a09      	lsrs	r1, r1, #8
    ea42:	0bc3      	lsrs	r3, r0, #15
    ea44:	428b      	cmp	r3, r1
    ea46:	d301      	bcc.n	ea4c <__divsi3+0x4c>
    ea48:	03cb      	lsls	r3, r1, #15
    ea4a:	1ac0      	subs	r0, r0, r3
    ea4c:	4152      	adcs	r2, r2
    ea4e:	0b83      	lsrs	r3, r0, #14
    ea50:	428b      	cmp	r3, r1
    ea52:	d301      	bcc.n	ea58 <__divsi3+0x58>
    ea54:	038b      	lsls	r3, r1, #14
    ea56:	1ac0      	subs	r0, r0, r3
    ea58:	4152      	adcs	r2, r2
    ea5a:	0b43      	lsrs	r3, r0, #13
    ea5c:	428b      	cmp	r3, r1
    ea5e:	d301      	bcc.n	ea64 <__divsi3+0x64>
    ea60:	034b      	lsls	r3, r1, #13
    ea62:	1ac0      	subs	r0, r0, r3
    ea64:	4152      	adcs	r2, r2
    ea66:	0b03      	lsrs	r3, r0, #12
    ea68:	428b      	cmp	r3, r1
    ea6a:	d301      	bcc.n	ea70 <__divsi3+0x70>
    ea6c:	030b      	lsls	r3, r1, #12
    ea6e:	1ac0      	subs	r0, r0, r3
    ea70:	4152      	adcs	r2, r2
    ea72:	0ac3      	lsrs	r3, r0, #11
    ea74:	428b      	cmp	r3, r1
    ea76:	d301      	bcc.n	ea7c <__divsi3+0x7c>
    ea78:	02cb      	lsls	r3, r1, #11
    ea7a:	1ac0      	subs	r0, r0, r3
    ea7c:	4152      	adcs	r2, r2
    ea7e:	0a83      	lsrs	r3, r0, #10
    ea80:	428b      	cmp	r3, r1
    ea82:	d301      	bcc.n	ea88 <__divsi3+0x88>
    ea84:	028b      	lsls	r3, r1, #10
    ea86:	1ac0      	subs	r0, r0, r3
    ea88:	4152      	adcs	r2, r2
    ea8a:	0a43      	lsrs	r3, r0, #9
    ea8c:	428b      	cmp	r3, r1
    ea8e:	d301      	bcc.n	ea94 <__divsi3+0x94>
    ea90:	024b      	lsls	r3, r1, #9
    ea92:	1ac0      	subs	r0, r0, r3
    ea94:	4152      	adcs	r2, r2
    ea96:	0a03      	lsrs	r3, r0, #8
    ea98:	428b      	cmp	r3, r1
    ea9a:	d301      	bcc.n	eaa0 <__divsi3+0xa0>
    ea9c:	020b      	lsls	r3, r1, #8
    ea9e:	1ac0      	subs	r0, r0, r3
    eaa0:	4152      	adcs	r2, r2
    eaa2:	d2cd      	bcs.n	ea40 <__divsi3+0x40>
    eaa4:	09c3      	lsrs	r3, r0, #7
    eaa6:	428b      	cmp	r3, r1
    eaa8:	d301      	bcc.n	eaae <__divsi3+0xae>
    eaaa:	01cb      	lsls	r3, r1, #7
    eaac:	1ac0      	subs	r0, r0, r3
    eaae:	4152      	adcs	r2, r2
    eab0:	0983      	lsrs	r3, r0, #6
    eab2:	428b      	cmp	r3, r1
    eab4:	d301      	bcc.n	eaba <__divsi3+0xba>
    eab6:	018b      	lsls	r3, r1, #6
    eab8:	1ac0      	subs	r0, r0, r3
    eaba:	4152      	adcs	r2, r2
    eabc:	0943      	lsrs	r3, r0, #5
    eabe:	428b      	cmp	r3, r1
    eac0:	d301      	bcc.n	eac6 <__divsi3+0xc6>
    eac2:	014b      	lsls	r3, r1, #5
    eac4:	1ac0      	subs	r0, r0, r3
    eac6:	4152      	adcs	r2, r2
    eac8:	0903      	lsrs	r3, r0, #4
    eaca:	428b      	cmp	r3, r1
    eacc:	d301      	bcc.n	ead2 <__divsi3+0xd2>
    eace:	010b      	lsls	r3, r1, #4
    ead0:	1ac0      	subs	r0, r0, r3
    ead2:	4152      	adcs	r2, r2
    ead4:	08c3      	lsrs	r3, r0, #3
    ead6:	428b      	cmp	r3, r1
    ead8:	d301      	bcc.n	eade <__divsi3+0xde>
    eada:	00cb      	lsls	r3, r1, #3
    eadc:	1ac0      	subs	r0, r0, r3
    eade:	4152      	adcs	r2, r2
    eae0:	0883      	lsrs	r3, r0, #2
    eae2:	428b      	cmp	r3, r1
    eae4:	d301      	bcc.n	eaea <__divsi3+0xea>
    eae6:	008b      	lsls	r3, r1, #2
    eae8:	1ac0      	subs	r0, r0, r3
    eaea:	4152      	adcs	r2, r2
    eaec:	0843      	lsrs	r3, r0, #1
    eaee:	428b      	cmp	r3, r1
    eaf0:	d301      	bcc.n	eaf6 <__divsi3+0xf6>
    eaf2:	004b      	lsls	r3, r1, #1
    eaf4:	1ac0      	subs	r0, r0, r3
    eaf6:	4152      	adcs	r2, r2
    eaf8:	1a41      	subs	r1, r0, r1
    eafa:	d200      	bcs.n	eafe <__divsi3+0xfe>
    eafc:	4601      	mov	r1, r0
    eafe:	4152      	adcs	r2, r2
    eb00:	4610      	mov	r0, r2
    eb02:	4770      	bx	lr
    eb04:	e05d      	b.n	ebc2 <__divsi3+0x1c2>
    eb06:	0fca      	lsrs	r2, r1, #31
    eb08:	d000      	beq.n	eb0c <__divsi3+0x10c>
    eb0a:	4249      	negs	r1, r1
    eb0c:	1003      	asrs	r3, r0, #32
    eb0e:	d300      	bcc.n	eb12 <__divsi3+0x112>
    eb10:	4240      	negs	r0, r0
    eb12:	4053      	eors	r3, r2
    eb14:	2200      	movs	r2, #0
    eb16:	469c      	mov	ip, r3
    eb18:	0903      	lsrs	r3, r0, #4
    eb1a:	428b      	cmp	r3, r1
    eb1c:	d32d      	bcc.n	eb7a <__divsi3+0x17a>
    eb1e:	0a03      	lsrs	r3, r0, #8
    eb20:	428b      	cmp	r3, r1
    eb22:	d312      	bcc.n	eb4a <__divsi3+0x14a>
    eb24:	22fc      	movs	r2, #252	; 0xfc
    eb26:	0189      	lsls	r1, r1, #6
    eb28:	ba12      	rev	r2, r2
    eb2a:	0a03      	lsrs	r3, r0, #8
    eb2c:	428b      	cmp	r3, r1
    eb2e:	d30c      	bcc.n	eb4a <__divsi3+0x14a>
    eb30:	0189      	lsls	r1, r1, #6
    eb32:	1192      	asrs	r2, r2, #6
    eb34:	428b      	cmp	r3, r1
    eb36:	d308      	bcc.n	eb4a <__divsi3+0x14a>
    eb38:	0189      	lsls	r1, r1, #6
    eb3a:	1192      	asrs	r2, r2, #6
    eb3c:	428b      	cmp	r3, r1
    eb3e:	d304      	bcc.n	eb4a <__divsi3+0x14a>
    eb40:	0189      	lsls	r1, r1, #6
    eb42:	d03a      	beq.n	ebba <__divsi3+0x1ba>
    eb44:	1192      	asrs	r2, r2, #6
    eb46:	e000      	b.n	eb4a <__divsi3+0x14a>
    eb48:	0989      	lsrs	r1, r1, #6
    eb4a:	09c3      	lsrs	r3, r0, #7
    eb4c:	428b      	cmp	r3, r1
    eb4e:	d301      	bcc.n	eb54 <__divsi3+0x154>
    eb50:	01cb      	lsls	r3, r1, #7
    eb52:	1ac0      	subs	r0, r0, r3
    eb54:	4152      	adcs	r2, r2
    eb56:	0983      	lsrs	r3, r0, #6
    eb58:	428b      	cmp	r3, r1
    eb5a:	d301      	bcc.n	eb60 <__divsi3+0x160>
    eb5c:	018b      	lsls	r3, r1, #6
    eb5e:	1ac0      	subs	r0, r0, r3
    eb60:	4152      	adcs	r2, r2
    eb62:	0943      	lsrs	r3, r0, #5
    eb64:	428b      	cmp	r3, r1
    eb66:	d301      	bcc.n	eb6c <__divsi3+0x16c>
    eb68:	014b      	lsls	r3, r1, #5
    eb6a:	1ac0      	subs	r0, r0, r3
    eb6c:	4152      	adcs	r2, r2
    eb6e:	0903      	lsrs	r3, r0, #4
    eb70:	428b      	cmp	r3, r1
    eb72:	d301      	bcc.n	eb78 <__divsi3+0x178>
    eb74:	010b      	lsls	r3, r1, #4
    eb76:	1ac0      	subs	r0, r0, r3
    eb78:	4152      	adcs	r2, r2
    eb7a:	08c3      	lsrs	r3, r0, #3
    eb7c:	428b      	cmp	r3, r1
    eb7e:	d301      	bcc.n	eb84 <__divsi3+0x184>
    eb80:	00cb      	lsls	r3, r1, #3
    eb82:	1ac0      	subs	r0, r0, r3
    eb84:	4152      	adcs	r2, r2
    eb86:	0883      	lsrs	r3, r0, #2
    eb88:	428b      	cmp	r3, r1
    eb8a:	d301      	bcc.n	eb90 <__divsi3+0x190>
    eb8c:	008b      	lsls	r3, r1, #2
    eb8e:	1ac0      	subs	r0, r0, r3
    eb90:	4152      	adcs	r2, r2
    eb92:	d2d9      	bcs.n	eb48 <__divsi3+0x148>
    eb94:	0843      	lsrs	r3, r0, #1
    eb96:	428b      	cmp	r3, r1
    eb98:	d301      	bcc.n	eb9e <__divsi3+0x19e>
    eb9a:	004b      	lsls	r3, r1, #1
    eb9c:	1ac0      	subs	r0, r0, r3
    eb9e:	4152      	adcs	r2, r2
    eba0:	1a41      	subs	r1, r0, r1
    eba2:	d200      	bcs.n	eba6 <__divsi3+0x1a6>
    eba4:	4601      	mov	r1, r0
    eba6:	4663      	mov	r3, ip
    eba8:	4152      	adcs	r2, r2
    ebaa:	105b      	asrs	r3, r3, #1
    ebac:	4610      	mov	r0, r2
    ebae:	d301      	bcc.n	ebb4 <__divsi3+0x1b4>
    ebb0:	4240      	negs	r0, r0
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d500      	bpl.n	ebb8 <__divsi3+0x1b8>
    ebb6:	4249      	negs	r1, r1
    ebb8:	4770      	bx	lr
    ebba:	4663      	mov	r3, ip
    ebbc:	105b      	asrs	r3, r3, #1
    ebbe:	d300      	bcc.n	ebc2 <__divsi3+0x1c2>
    ebc0:	4240      	negs	r0, r0
    ebc2:	b501      	push	{r0, lr}
    ebc4:	2000      	movs	r0, #0
    ebc6:	f000 f805 	bl	ebd4 <__aeabi_idiv0>
    ebca:	bd02      	pop	{r1, pc}

0000ebcc <__aeabi_idivmod>:
    ebcc:	2900      	cmp	r1, #0
    ebce:	d0f8      	beq.n	ebc2 <__divsi3+0x1c2>
    ebd0:	e716      	b.n	ea00 <__divsi3>
    ebd2:	4770      	bx	lr

0000ebd4 <__aeabi_idiv0>:
    ebd4:	4770      	bx	lr
    ebd6:	46c0      	nop			; (mov r8, r8)

0000ebd8 <__aeabi_cdrcmple>:
    ebd8:	4684      	mov	ip, r0
    ebda:	1c10      	adds	r0, r2, #0
    ebdc:	4662      	mov	r2, ip
    ebde:	468c      	mov	ip, r1
    ebe0:	1c19      	adds	r1, r3, #0
    ebe2:	4663      	mov	r3, ip
    ebe4:	e000      	b.n	ebe8 <__aeabi_cdcmpeq>
    ebe6:	46c0      	nop			; (mov r8, r8)

0000ebe8 <__aeabi_cdcmpeq>:
    ebe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ebea:	f000 ff15 	bl	fa18 <__ledf2>
    ebee:	2800      	cmp	r0, #0
    ebf0:	d401      	bmi.n	ebf6 <__aeabi_cdcmpeq+0xe>
    ebf2:	2100      	movs	r1, #0
    ebf4:	42c8      	cmn	r0, r1
    ebf6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000ebf8 <__aeabi_dcmpeq>:
    ebf8:	b510      	push	{r4, lr}
    ebfa:	f000 fe6f 	bl	f8dc <__eqdf2>
    ebfe:	4240      	negs	r0, r0
    ec00:	3001      	adds	r0, #1
    ec02:	bd10      	pop	{r4, pc}

0000ec04 <__aeabi_dcmplt>:
    ec04:	b510      	push	{r4, lr}
    ec06:	f000 ff07 	bl	fa18 <__ledf2>
    ec0a:	2800      	cmp	r0, #0
    ec0c:	db01      	blt.n	ec12 <__aeabi_dcmplt+0xe>
    ec0e:	2000      	movs	r0, #0
    ec10:	bd10      	pop	{r4, pc}
    ec12:	2001      	movs	r0, #1
    ec14:	bd10      	pop	{r4, pc}
    ec16:	46c0      	nop			; (mov r8, r8)

0000ec18 <__aeabi_dcmple>:
    ec18:	b510      	push	{r4, lr}
    ec1a:	f000 fefd 	bl	fa18 <__ledf2>
    ec1e:	2800      	cmp	r0, #0
    ec20:	dd01      	ble.n	ec26 <__aeabi_dcmple+0xe>
    ec22:	2000      	movs	r0, #0
    ec24:	bd10      	pop	{r4, pc}
    ec26:	2001      	movs	r0, #1
    ec28:	bd10      	pop	{r4, pc}
    ec2a:	46c0      	nop			; (mov r8, r8)

0000ec2c <__aeabi_dcmpgt>:
    ec2c:	b510      	push	{r4, lr}
    ec2e:	f000 fe8f 	bl	f950 <__gedf2>
    ec32:	2800      	cmp	r0, #0
    ec34:	dc01      	bgt.n	ec3a <__aeabi_dcmpgt+0xe>
    ec36:	2000      	movs	r0, #0
    ec38:	bd10      	pop	{r4, pc}
    ec3a:	2001      	movs	r0, #1
    ec3c:	bd10      	pop	{r4, pc}
    ec3e:	46c0      	nop			; (mov r8, r8)

0000ec40 <__aeabi_dcmpge>:
    ec40:	b510      	push	{r4, lr}
    ec42:	f000 fe85 	bl	f950 <__gedf2>
    ec46:	2800      	cmp	r0, #0
    ec48:	da01      	bge.n	ec4e <__aeabi_dcmpge+0xe>
    ec4a:	2000      	movs	r0, #0
    ec4c:	bd10      	pop	{r4, pc}
    ec4e:	2001      	movs	r0, #1
    ec50:	bd10      	pop	{r4, pc}
    ec52:	46c0      	nop			; (mov r8, r8)

0000ec54 <__aeabi_dadd>:
    ec54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec56:	4645      	mov	r5, r8
    ec58:	46de      	mov	lr, fp
    ec5a:	4657      	mov	r7, sl
    ec5c:	464e      	mov	r6, r9
    ec5e:	030c      	lsls	r4, r1, #12
    ec60:	b5e0      	push	{r5, r6, r7, lr}
    ec62:	004e      	lsls	r6, r1, #1
    ec64:	0fc9      	lsrs	r1, r1, #31
    ec66:	4688      	mov	r8, r1
    ec68:	000d      	movs	r5, r1
    ec6a:	0a61      	lsrs	r1, r4, #9
    ec6c:	0f44      	lsrs	r4, r0, #29
    ec6e:	430c      	orrs	r4, r1
    ec70:	00c7      	lsls	r7, r0, #3
    ec72:	0319      	lsls	r1, r3, #12
    ec74:	0058      	lsls	r0, r3, #1
    ec76:	0fdb      	lsrs	r3, r3, #31
    ec78:	469b      	mov	fp, r3
    ec7a:	0a4b      	lsrs	r3, r1, #9
    ec7c:	0f51      	lsrs	r1, r2, #29
    ec7e:	430b      	orrs	r3, r1
    ec80:	0d76      	lsrs	r6, r6, #21
    ec82:	0d40      	lsrs	r0, r0, #21
    ec84:	0019      	movs	r1, r3
    ec86:	00d2      	lsls	r2, r2, #3
    ec88:	45d8      	cmp	r8, fp
    ec8a:	d100      	bne.n	ec8e <__aeabi_dadd+0x3a>
    ec8c:	e0ae      	b.n	edec <__aeabi_dadd+0x198>
    ec8e:	1a35      	subs	r5, r6, r0
    ec90:	2d00      	cmp	r5, #0
    ec92:	dc00      	bgt.n	ec96 <__aeabi_dadd+0x42>
    ec94:	e0f6      	b.n	ee84 <__aeabi_dadd+0x230>
    ec96:	2800      	cmp	r0, #0
    ec98:	d10f      	bne.n	ecba <__aeabi_dadd+0x66>
    ec9a:	4313      	orrs	r3, r2
    ec9c:	d100      	bne.n	eca0 <__aeabi_dadd+0x4c>
    ec9e:	e0db      	b.n	ee58 <__aeabi_dadd+0x204>
    eca0:	1e6b      	subs	r3, r5, #1
    eca2:	2b00      	cmp	r3, #0
    eca4:	d000      	beq.n	eca8 <__aeabi_dadd+0x54>
    eca6:	e137      	b.n	ef18 <__aeabi_dadd+0x2c4>
    eca8:	1aba      	subs	r2, r7, r2
    ecaa:	4297      	cmp	r7, r2
    ecac:	41bf      	sbcs	r7, r7
    ecae:	1a64      	subs	r4, r4, r1
    ecb0:	427f      	negs	r7, r7
    ecb2:	1be4      	subs	r4, r4, r7
    ecb4:	2601      	movs	r6, #1
    ecb6:	0017      	movs	r7, r2
    ecb8:	e024      	b.n	ed04 <__aeabi_dadd+0xb0>
    ecba:	4bc6      	ldr	r3, [pc, #792]	; (efd4 <__aeabi_dadd+0x380>)
    ecbc:	429e      	cmp	r6, r3
    ecbe:	d04d      	beq.n	ed5c <__aeabi_dadd+0x108>
    ecc0:	2380      	movs	r3, #128	; 0x80
    ecc2:	041b      	lsls	r3, r3, #16
    ecc4:	4319      	orrs	r1, r3
    ecc6:	2d38      	cmp	r5, #56	; 0x38
    ecc8:	dd00      	ble.n	eccc <__aeabi_dadd+0x78>
    ecca:	e107      	b.n	eedc <__aeabi_dadd+0x288>
    eccc:	2d1f      	cmp	r5, #31
    ecce:	dd00      	ble.n	ecd2 <__aeabi_dadd+0x7e>
    ecd0:	e138      	b.n	ef44 <__aeabi_dadd+0x2f0>
    ecd2:	2020      	movs	r0, #32
    ecd4:	1b43      	subs	r3, r0, r5
    ecd6:	469a      	mov	sl, r3
    ecd8:	000b      	movs	r3, r1
    ecda:	4650      	mov	r0, sl
    ecdc:	4083      	lsls	r3, r0
    ecde:	4699      	mov	r9, r3
    ece0:	0013      	movs	r3, r2
    ece2:	4648      	mov	r0, r9
    ece4:	40eb      	lsrs	r3, r5
    ece6:	4318      	orrs	r0, r3
    ece8:	0003      	movs	r3, r0
    ecea:	4650      	mov	r0, sl
    ecec:	4082      	lsls	r2, r0
    ecee:	1e50      	subs	r0, r2, #1
    ecf0:	4182      	sbcs	r2, r0
    ecf2:	40e9      	lsrs	r1, r5
    ecf4:	431a      	orrs	r2, r3
    ecf6:	1aba      	subs	r2, r7, r2
    ecf8:	1a61      	subs	r1, r4, r1
    ecfa:	4297      	cmp	r7, r2
    ecfc:	41a4      	sbcs	r4, r4
    ecfe:	0017      	movs	r7, r2
    ed00:	4264      	negs	r4, r4
    ed02:	1b0c      	subs	r4, r1, r4
    ed04:	0223      	lsls	r3, r4, #8
    ed06:	d562      	bpl.n	edce <__aeabi_dadd+0x17a>
    ed08:	0264      	lsls	r4, r4, #9
    ed0a:	0a65      	lsrs	r5, r4, #9
    ed0c:	2d00      	cmp	r5, #0
    ed0e:	d100      	bne.n	ed12 <__aeabi_dadd+0xbe>
    ed10:	e0df      	b.n	eed2 <__aeabi_dadd+0x27e>
    ed12:	0028      	movs	r0, r5
    ed14:	f001 fd04 	bl	10720 <__clzsi2>
    ed18:	0003      	movs	r3, r0
    ed1a:	3b08      	subs	r3, #8
    ed1c:	2b1f      	cmp	r3, #31
    ed1e:	dd00      	ble.n	ed22 <__aeabi_dadd+0xce>
    ed20:	e0d2      	b.n	eec8 <__aeabi_dadd+0x274>
    ed22:	2220      	movs	r2, #32
    ed24:	003c      	movs	r4, r7
    ed26:	1ad2      	subs	r2, r2, r3
    ed28:	409d      	lsls	r5, r3
    ed2a:	40d4      	lsrs	r4, r2
    ed2c:	409f      	lsls	r7, r3
    ed2e:	4325      	orrs	r5, r4
    ed30:	429e      	cmp	r6, r3
    ed32:	dd00      	ble.n	ed36 <__aeabi_dadd+0xe2>
    ed34:	e0c4      	b.n	eec0 <__aeabi_dadd+0x26c>
    ed36:	1b9e      	subs	r6, r3, r6
    ed38:	1c73      	adds	r3, r6, #1
    ed3a:	2b1f      	cmp	r3, #31
    ed3c:	dd00      	ble.n	ed40 <__aeabi_dadd+0xec>
    ed3e:	e0f1      	b.n	ef24 <__aeabi_dadd+0x2d0>
    ed40:	2220      	movs	r2, #32
    ed42:	0038      	movs	r0, r7
    ed44:	0029      	movs	r1, r5
    ed46:	1ad2      	subs	r2, r2, r3
    ed48:	40d8      	lsrs	r0, r3
    ed4a:	4091      	lsls	r1, r2
    ed4c:	4097      	lsls	r7, r2
    ed4e:	002c      	movs	r4, r5
    ed50:	4301      	orrs	r1, r0
    ed52:	1e78      	subs	r0, r7, #1
    ed54:	4187      	sbcs	r7, r0
    ed56:	40dc      	lsrs	r4, r3
    ed58:	2600      	movs	r6, #0
    ed5a:	430f      	orrs	r7, r1
    ed5c:	077b      	lsls	r3, r7, #29
    ed5e:	d009      	beq.n	ed74 <__aeabi_dadd+0x120>
    ed60:	230f      	movs	r3, #15
    ed62:	403b      	ands	r3, r7
    ed64:	2b04      	cmp	r3, #4
    ed66:	d005      	beq.n	ed74 <__aeabi_dadd+0x120>
    ed68:	1d3b      	adds	r3, r7, #4
    ed6a:	42bb      	cmp	r3, r7
    ed6c:	41bf      	sbcs	r7, r7
    ed6e:	427f      	negs	r7, r7
    ed70:	19e4      	adds	r4, r4, r7
    ed72:	001f      	movs	r7, r3
    ed74:	0223      	lsls	r3, r4, #8
    ed76:	d52c      	bpl.n	edd2 <__aeabi_dadd+0x17e>
    ed78:	4b96      	ldr	r3, [pc, #600]	; (efd4 <__aeabi_dadd+0x380>)
    ed7a:	3601      	adds	r6, #1
    ed7c:	429e      	cmp	r6, r3
    ed7e:	d100      	bne.n	ed82 <__aeabi_dadd+0x12e>
    ed80:	e09a      	b.n	eeb8 <__aeabi_dadd+0x264>
    ed82:	4645      	mov	r5, r8
    ed84:	4b94      	ldr	r3, [pc, #592]	; (efd8 <__aeabi_dadd+0x384>)
    ed86:	08ff      	lsrs	r7, r7, #3
    ed88:	401c      	ands	r4, r3
    ed8a:	0760      	lsls	r0, r4, #29
    ed8c:	0576      	lsls	r6, r6, #21
    ed8e:	0264      	lsls	r4, r4, #9
    ed90:	4307      	orrs	r7, r0
    ed92:	0b24      	lsrs	r4, r4, #12
    ed94:	0d76      	lsrs	r6, r6, #21
    ed96:	2100      	movs	r1, #0
    ed98:	0324      	lsls	r4, r4, #12
    ed9a:	0b23      	lsrs	r3, r4, #12
    ed9c:	0d0c      	lsrs	r4, r1, #20
    ed9e:	4a8f      	ldr	r2, [pc, #572]	; (efdc <__aeabi_dadd+0x388>)
    eda0:	0524      	lsls	r4, r4, #20
    eda2:	431c      	orrs	r4, r3
    eda4:	4014      	ands	r4, r2
    eda6:	0533      	lsls	r3, r6, #20
    eda8:	4323      	orrs	r3, r4
    edaa:	005b      	lsls	r3, r3, #1
    edac:	07ed      	lsls	r5, r5, #31
    edae:	085b      	lsrs	r3, r3, #1
    edb0:	432b      	orrs	r3, r5
    edb2:	0038      	movs	r0, r7
    edb4:	0019      	movs	r1, r3
    edb6:	bc3c      	pop	{r2, r3, r4, r5}
    edb8:	4690      	mov	r8, r2
    edba:	4699      	mov	r9, r3
    edbc:	46a2      	mov	sl, r4
    edbe:	46ab      	mov	fp, r5
    edc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edc2:	4664      	mov	r4, ip
    edc4:	4304      	orrs	r4, r0
    edc6:	d100      	bne.n	edca <__aeabi_dadd+0x176>
    edc8:	e211      	b.n	f1ee <__aeabi_dadd+0x59a>
    edca:	0004      	movs	r4, r0
    edcc:	4667      	mov	r7, ip
    edce:	077b      	lsls	r3, r7, #29
    edd0:	d1c6      	bne.n	ed60 <__aeabi_dadd+0x10c>
    edd2:	4645      	mov	r5, r8
    edd4:	0760      	lsls	r0, r4, #29
    edd6:	08ff      	lsrs	r7, r7, #3
    edd8:	4307      	orrs	r7, r0
    edda:	08e4      	lsrs	r4, r4, #3
    eddc:	4b7d      	ldr	r3, [pc, #500]	; (efd4 <__aeabi_dadd+0x380>)
    edde:	429e      	cmp	r6, r3
    ede0:	d030      	beq.n	ee44 <__aeabi_dadd+0x1f0>
    ede2:	0324      	lsls	r4, r4, #12
    ede4:	0576      	lsls	r6, r6, #21
    ede6:	0b24      	lsrs	r4, r4, #12
    ede8:	0d76      	lsrs	r6, r6, #21
    edea:	e7d4      	b.n	ed96 <__aeabi_dadd+0x142>
    edec:	1a33      	subs	r3, r6, r0
    edee:	469a      	mov	sl, r3
    edf0:	2b00      	cmp	r3, #0
    edf2:	dd78      	ble.n	eee6 <__aeabi_dadd+0x292>
    edf4:	2800      	cmp	r0, #0
    edf6:	d031      	beq.n	ee5c <__aeabi_dadd+0x208>
    edf8:	4876      	ldr	r0, [pc, #472]	; (efd4 <__aeabi_dadd+0x380>)
    edfa:	4286      	cmp	r6, r0
    edfc:	d0ae      	beq.n	ed5c <__aeabi_dadd+0x108>
    edfe:	2080      	movs	r0, #128	; 0x80
    ee00:	0400      	lsls	r0, r0, #16
    ee02:	4301      	orrs	r1, r0
    ee04:	4653      	mov	r3, sl
    ee06:	2b38      	cmp	r3, #56	; 0x38
    ee08:	dc00      	bgt.n	ee0c <__aeabi_dadd+0x1b8>
    ee0a:	e0e9      	b.n	efe0 <__aeabi_dadd+0x38c>
    ee0c:	430a      	orrs	r2, r1
    ee0e:	1e51      	subs	r1, r2, #1
    ee10:	418a      	sbcs	r2, r1
    ee12:	2100      	movs	r1, #0
    ee14:	19d2      	adds	r2, r2, r7
    ee16:	42ba      	cmp	r2, r7
    ee18:	41bf      	sbcs	r7, r7
    ee1a:	1909      	adds	r1, r1, r4
    ee1c:	427c      	negs	r4, r7
    ee1e:	0017      	movs	r7, r2
    ee20:	190c      	adds	r4, r1, r4
    ee22:	0223      	lsls	r3, r4, #8
    ee24:	d5d3      	bpl.n	edce <__aeabi_dadd+0x17a>
    ee26:	4b6b      	ldr	r3, [pc, #428]	; (efd4 <__aeabi_dadd+0x380>)
    ee28:	3601      	adds	r6, #1
    ee2a:	429e      	cmp	r6, r3
    ee2c:	d100      	bne.n	ee30 <__aeabi_dadd+0x1dc>
    ee2e:	e13a      	b.n	f0a6 <__aeabi_dadd+0x452>
    ee30:	2001      	movs	r0, #1
    ee32:	4b69      	ldr	r3, [pc, #420]	; (efd8 <__aeabi_dadd+0x384>)
    ee34:	401c      	ands	r4, r3
    ee36:	087b      	lsrs	r3, r7, #1
    ee38:	4007      	ands	r7, r0
    ee3a:	431f      	orrs	r7, r3
    ee3c:	07e0      	lsls	r0, r4, #31
    ee3e:	4307      	orrs	r7, r0
    ee40:	0864      	lsrs	r4, r4, #1
    ee42:	e78b      	b.n	ed5c <__aeabi_dadd+0x108>
    ee44:	0023      	movs	r3, r4
    ee46:	433b      	orrs	r3, r7
    ee48:	d100      	bne.n	ee4c <__aeabi_dadd+0x1f8>
    ee4a:	e1cb      	b.n	f1e4 <__aeabi_dadd+0x590>
    ee4c:	2280      	movs	r2, #128	; 0x80
    ee4e:	0312      	lsls	r2, r2, #12
    ee50:	4314      	orrs	r4, r2
    ee52:	0324      	lsls	r4, r4, #12
    ee54:	0b24      	lsrs	r4, r4, #12
    ee56:	e79e      	b.n	ed96 <__aeabi_dadd+0x142>
    ee58:	002e      	movs	r6, r5
    ee5a:	e77f      	b.n	ed5c <__aeabi_dadd+0x108>
    ee5c:	0008      	movs	r0, r1
    ee5e:	4310      	orrs	r0, r2
    ee60:	d100      	bne.n	ee64 <__aeabi_dadd+0x210>
    ee62:	e0b4      	b.n	efce <__aeabi_dadd+0x37a>
    ee64:	1e58      	subs	r0, r3, #1
    ee66:	2800      	cmp	r0, #0
    ee68:	d000      	beq.n	ee6c <__aeabi_dadd+0x218>
    ee6a:	e0de      	b.n	f02a <__aeabi_dadd+0x3d6>
    ee6c:	18ba      	adds	r2, r7, r2
    ee6e:	42ba      	cmp	r2, r7
    ee70:	419b      	sbcs	r3, r3
    ee72:	1864      	adds	r4, r4, r1
    ee74:	425b      	negs	r3, r3
    ee76:	18e4      	adds	r4, r4, r3
    ee78:	0017      	movs	r7, r2
    ee7a:	2601      	movs	r6, #1
    ee7c:	0223      	lsls	r3, r4, #8
    ee7e:	d5a6      	bpl.n	edce <__aeabi_dadd+0x17a>
    ee80:	2602      	movs	r6, #2
    ee82:	e7d5      	b.n	ee30 <__aeabi_dadd+0x1dc>
    ee84:	2d00      	cmp	r5, #0
    ee86:	d16e      	bne.n	ef66 <__aeabi_dadd+0x312>
    ee88:	1c70      	adds	r0, r6, #1
    ee8a:	0540      	lsls	r0, r0, #21
    ee8c:	0d40      	lsrs	r0, r0, #21
    ee8e:	2801      	cmp	r0, #1
    ee90:	dc00      	bgt.n	ee94 <__aeabi_dadd+0x240>
    ee92:	e0f9      	b.n	f088 <__aeabi_dadd+0x434>
    ee94:	1ab8      	subs	r0, r7, r2
    ee96:	4684      	mov	ip, r0
    ee98:	4287      	cmp	r7, r0
    ee9a:	4180      	sbcs	r0, r0
    ee9c:	1ae5      	subs	r5, r4, r3
    ee9e:	4240      	negs	r0, r0
    eea0:	1a2d      	subs	r5, r5, r0
    eea2:	0228      	lsls	r0, r5, #8
    eea4:	d400      	bmi.n	eea8 <__aeabi_dadd+0x254>
    eea6:	e089      	b.n	efbc <__aeabi_dadd+0x368>
    eea8:	1bd7      	subs	r7, r2, r7
    eeaa:	42ba      	cmp	r2, r7
    eeac:	4192      	sbcs	r2, r2
    eeae:	1b1c      	subs	r4, r3, r4
    eeb0:	4252      	negs	r2, r2
    eeb2:	1aa5      	subs	r5, r4, r2
    eeb4:	46d8      	mov	r8, fp
    eeb6:	e729      	b.n	ed0c <__aeabi_dadd+0xb8>
    eeb8:	4645      	mov	r5, r8
    eeba:	2400      	movs	r4, #0
    eebc:	2700      	movs	r7, #0
    eebe:	e76a      	b.n	ed96 <__aeabi_dadd+0x142>
    eec0:	4c45      	ldr	r4, [pc, #276]	; (efd8 <__aeabi_dadd+0x384>)
    eec2:	1af6      	subs	r6, r6, r3
    eec4:	402c      	ands	r4, r5
    eec6:	e749      	b.n	ed5c <__aeabi_dadd+0x108>
    eec8:	003d      	movs	r5, r7
    eeca:	3828      	subs	r0, #40	; 0x28
    eecc:	4085      	lsls	r5, r0
    eece:	2700      	movs	r7, #0
    eed0:	e72e      	b.n	ed30 <__aeabi_dadd+0xdc>
    eed2:	0038      	movs	r0, r7
    eed4:	f001 fc24 	bl	10720 <__clzsi2>
    eed8:	3020      	adds	r0, #32
    eeda:	e71d      	b.n	ed18 <__aeabi_dadd+0xc4>
    eedc:	430a      	orrs	r2, r1
    eede:	1e51      	subs	r1, r2, #1
    eee0:	418a      	sbcs	r2, r1
    eee2:	2100      	movs	r1, #0
    eee4:	e707      	b.n	ecf6 <__aeabi_dadd+0xa2>
    eee6:	2b00      	cmp	r3, #0
    eee8:	d000      	beq.n	eeec <__aeabi_dadd+0x298>
    eeea:	e0f3      	b.n	f0d4 <__aeabi_dadd+0x480>
    eeec:	1c70      	adds	r0, r6, #1
    eeee:	0543      	lsls	r3, r0, #21
    eef0:	0d5b      	lsrs	r3, r3, #21
    eef2:	2b01      	cmp	r3, #1
    eef4:	dc00      	bgt.n	eef8 <__aeabi_dadd+0x2a4>
    eef6:	e0ad      	b.n	f054 <__aeabi_dadd+0x400>
    eef8:	4b36      	ldr	r3, [pc, #216]	; (efd4 <__aeabi_dadd+0x380>)
    eefa:	4298      	cmp	r0, r3
    eefc:	d100      	bne.n	ef00 <__aeabi_dadd+0x2ac>
    eefe:	e0d1      	b.n	f0a4 <__aeabi_dadd+0x450>
    ef00:	18ba      	adds	r2, r7, r2
    ef02:	42ba      	cmp	r2, r7
    ef04:	41bf      	sbcs	r7, r7
    ef06:	1864      	adds	r4, r4, r1
    ef08:	427f      	negs	r7, r7
    ef0a:	19e4      	adds	r4, r4, r7
    ef0c:	07e7      	lsls	r7, r4, #31
    ef0e:	0852      	lsrs	r2, r2, #1
    ef10:	4317      	orrs	r7, r2
    ef12:	0864      	lsrs	r4, r4, #1
    ef14:	0006      	movs	r6, r0
    ef16:	e721      	b.n	ed5c <__aeabi_dadd+0x108>
    ef18:	482e      	ldr	r0, [pc, #184]	; (efd4 <__aeabi_dadd+0x380>)
    ef1a:	4285      	cmp	r5, r0
    ef1c:	d100      	bne.n	ef20 <__aeabi_dadd+0x2cc>
    ef1e:	e093      	b.n	f048 <__aeabi_dadd+0x3f4>
    ef20:	001d      	movs	r5, r3
    ef22:	e6d0      	b.n	ecc6 <__aeabi_dadd+0x72>
    ef24:	0029      	movs	r1, r5
    ef26:	3e1f      	subs	r6, #31
    ef28:	40f1      	lsrs	r1, r6
    ef2a:	2b20      	cmp	r3, #32
    ef2c:	d100      	bne.n	ef30 <__aeabi_dadd+0x2dc>
    ef2e:	e08d      	b.n	f04c <__aeabi_dadd+0x3f8>
    ef30:	2240      	movs	r2, #64	; 0x40
    ef32:	1ad3      	subs	r3, r2, r3
    ef34:	409d      	lsls	r5, r3
    ef36:	432f      	orrs	r7, r5
    ef38:	1e7d      	subs	r5, r7, #1
    ef3a:	41af      	sbcs	r7, r5
    ef3c:	2400      	movs	r4, #0
    ef3e:	430f      	orrs	r7, r1
    ef40:	2600      	movs	r6, #0
    ef42:	e744      	b.n	edce <__aeabi_dadd+0x17a>
    ef44:	002b      	movs	r3, r5
    ef46:	0008      	movs	r0, r1
    ef48:	3b20      	subs	r3, #32
    ef4a:	40d8      	lsrs	r0, r3
    ef4c:	0003      	movs	r3, r0
    ef4e:	2d20      	cmp	r5, #32
    ef50:	d100      	bne.n	ef54 <__aeabi_dadd+0x300>
    ef52:	e07d      	b.n	f050 <__aeabi_dadd+0x3fc>
    ef54:	2040      	movs	r0, #64	; 0x40
    ef56:	1b45      	subs	r5, r0, r5
    ef58:	40a9      	lsls	r1, r5
    ef5a:	430a      	orrs	r2, r1
    ef5c:	1e51      	subs	r1, r2, #1
    ef5e:	418a      	sbcs	r2, r1
    ef60:	2100      	movs	r1, #0
    ef62:	431a      	orrs	r2, r3
    ef64:	e6c7      	b.n	ecf6 <__aeabi_dadd+0xa2>
    ef66:	2e00      	cmp	r6, #0
    ef68:	d050      	beq.n	f00c <__aeabi_dadd+0x3b8>
    ef6a:	4e1a      	ldr	r6, [pc, #104]	; (efd4 <__aeabi_dadd+0x380>)
    ef6c:	42b0      	cmp	r0, r6
    ef6e:	d057      	beq.n	f020 <__aeabi_dadd+0x3cc>
    ef70:	2680      	movs	r6, #128	; 0x80
    ef72:	426b      	negs	r3, r5
    ef74:	4699      	mov	r9, r3
    ef76:	0436      	lsls	r6, r6, #16
    ef78:	4334      	orrs	r4, r6
    ef7a:	464b      	mov	r3, r9
    ef7c:	2b38      	cmp	r3, #56	; 0x38
    ef7e:	dd00      	ble.n	ef82 <__aeabi_dadd+0x32e>
    ef80:	e0d6      	b.n	f130 <__aeabi_dadd+0x4dc>
    ef82:	2b1f      	cmp	r3, #31
    ef84:	dd00      	ble.n	ef88 <__aeabi_dadd+0x334>
    ef86:	e135      	b.n	f1f4 <__aeabi_dadd+0x5a0>
    ef88:	2620      	movs	r6, #32
    ef8a:	1af5      	subs	r5, r6, r3
    ef8c:	0026      	movs	r6, r4
    ef8e:	40ae      	lsls	r6, r5
    ef90:	46b2      	mov	sl, r6
    ef92:	003e      	movs	r6, r7
    ef94:	40de      	lsrs	r6, r3
    ef96:	46ac      	mov	ip, r5
    ef98:	0035      	movs	r5, r6
    ef9a:	4656      	mov	r6, sl
    ef9c:	432e      	orrs	r6, r5
    ef9e:	4665      	mov	r5, ip
    efa0:	40af      	lsls	r7, r5
    efa2:	1e7d      	subs	r5, r7, #1
    efa4:	41af      	sbcs	r7, r5
    efa6:	40dc      	lsrs	r4, r3
    efa8:	4337      	orrs	r7, r6
    efaa:	1bd7      	subs	r7, r2, r7
    efac:	42ba      	cmp	r2, r7
    efae:	4192      	sbcs	r2, r2
    efb0:	1b0c      	subs	r4, r1, r4
    efb2:	4252      	negs	r2, r2
    efb4:	1aa4      	subs	r4, r4, r2
    efb6:	0006      	movs	r6, r0
    efb8:	46d8      	mov	r8, fp
    efba:	e6a3      	b.n	ed04 <__aeabi_dadd+0xb0>
    efbc:	4664      	mov	r4, ip
    efbe:	4667      	mov	r7, ip
    efc0:	432c      	orrs	r4, r5
    efc2:	d000      	beq.n	efc6 <__aeabi_dadd+0x372>
    efc4:	e6a2      	b.n	ed0c <__aeabi_dadd+0xb8>
    efc6:	2500      	movs	r5, #0
    efc8:	2600      	movs	r6, #0
    efca:	2700      	movs	r7, #0
    efcc:	e706      	b.n	eddc <__aeabi_dadd+0x188>
    efce:	001e      	movs	r6, r3
    efd0:	e6c4      	b.n	ed5c <__aeabi_dadd+0x108>
    efd2:	46c0      	nop			; (mov r8, r8)
    efd4:	000007ff 	.word	0x000007ff
    efd8:	ff7fffff 	.word	0xff7fffff
    efdc:	800fffff 	.word	0x800fffff
    efe0:	2b1f      	cmp	r3, #31
    efe2:	dc63      	bgt.n	f0ac <__aeabi_dadd+0x458>
    efe4:	2020      	movs	r0, #32
    efe6:	1ac3      	subs	r3, r0, r3
    efe8:	0008      	movs	r0, r1
    efea:	4098      	lsls	r0, r3
    efec:	469c      	mov	ip, r3
    efee:	4683      	mov	fp, r0
    eff0:	4653      	mov	r3, sl
    eff2:	0010      	movs	r0, r2
    eff4:	40d8      	lsrs	r0, r3
    eff6:	0003      	movs	r3, r0
    eff8:	4658      	mov	r0, fp
    effa:	4318      	orrs	r0, r3
    effc:	4663      	mov	r3, ip
    effe:	409a      	lsls	r2, r3
    f000:	1e53      	subs	r3, r2, #1
    f002:	419a      	sbcs	r2, r3
    f004:	4653      	mov	r3, sl
    f006:	4302      	orrs	r2, r0
    f008:	40d9      	lsrs	r1, r3
    f00a:	e703      	b.n	ee14 <__aeabi_dadd+0x1c0>
    f00c:	0026      	movs	r6, r4
    f00e:	433e      	orrs	r6, r7
    f010:	d006      	beq.n	f020 <__aeabi_dadd+0x3cc>
    f012:	43eb      	mvns	r3, r5
    f014:	4699      	mov	r9, r3
    f016:	2b00      	cmp	r3, #0
    f018:	d0c7      	beq.n	efaa <__aeabi_dadd+0x356>
    f01a:	4e94      	ldr	r6, [pc, #592]	; (f26c <__aeabi_dadd+0x618>)
    f01c:	42b0      	cmp	r0, r6
    f01e:	d1ac      	bne.n	ef7a <__aeabi_dadd+0x326>
    f020:	000c      	movs	r4, r1
    f022:	0017      	movs	r7, r2
    f024:	0006      	movs	r6, r0
    f026:	46d8      	mov	r8, fp
    f028:	e698      	b.n	ed5c <__aeabi_dadd+0x108>
    f02a:	4b90      	ldr	r3, [pc, #576]	; (f26c <__aeabi_dadd+0x618>)
    f02c:	459a      	cmp	sl, r3
    f02e:	d00b      	beq.n	f048 <__aeabi_dadd+0x3f4>
    f030:	4682      	mov	sl, r0
    f032:	e6e7      	b.n	ee04 <__aeabi_dadd+0x1b0>
    f034:	2800      	cmp	r0, #0
    f036:	d000      	beq.n	f03a <__aeabi_dadd+0x3e6>
    f038:	e09e      	b.n	f178 <__aeabi_dadd+0x524>
    f03a:	0018      	movs	r0, r3
    f03c:	4310      	orrs	r0, r2
    f03e:	d100      	bne.n	f042 <__aeabi_dadd+0x3ee>
    f040:	e0e9      	b.n	f216 <__aeabi_dadd+0x5c2>
    f042:	001c      	movs	r4, r3
    f044:	0017      	movs	r7, r2
    f046:	46d8      	mov	r8, fp
    f048:	4e88      	ldr	r6, [pc, #544]	; (f26c <__aeabi_dadd+0x618>)
    f04a:	e687      	b.n	ed5c <__aeabi_dadd+0x108>
    f04c:	2500      	movs	r5, #0
    f04e:	e772      	b.n	ef36 <__aeabi_dadd+0x2e2>
    f050:	2100      	movs	r1, #0
    f052:	e782      	b.n	ef5a <__aeabi_dadd+0x306>
    f054:	0023      	movs	r3, r4
    f056:	433b      	orrs	r3, r7
    f058:	2e00      	cmp	r6, #0
    f05a:	d000      	beq.n	f05e <__aeabi_dadd+0x40a>
    f05c:	e0ab      	b.n	f1b6 <__aeabi_dadd+0x562>
    f05e:	2b00      	cmp	r3, #0
    f060:	d100      	bne.n	f064 <__aeabi_dadd+0x410>
    f062:	e0e7      	b.n	f234 <__aeabi_dadd+0x5e0>
    f064:	000b      	movs	r3, r1
    f066:	4313      	orrs	r3, r2
    f068:	d100      	bne.n	f06c <__aeabi_dadd+0x418>
    f06a:	e677      	b.n	ed5c <__aeabi_dadd+0x108>
    f06c:	18ba      	adds	r2, r7, r2
    f06e:	42ba      	cmp	r2, r7
    f070:	41bf      	sbcs	r7, r7
    f072:	1864      	adds	r4, r4, r1
    f074:	427f      	negs	r7, r7
    f076:	19e4      	adds	r4, r4, r7
    f078:	0223      	lsls	r3, r4, #8
    f07a:	d400      	bmi.n	f07e <__aeabi_dadd+0x42a>
    f07c:	e0f2      	b.n	f264 <__aeabi_dadd+0x610>
    f07e:	4b7c      	ldr	r3, [pc, #496]	; (f270 <__aeabi_dadd+0x61c>)
    f080:	0017      	movs	r7, r2
    f082:	401c      	ands	r4, r3
    f084:	0006      	movs	r6, r0
    f086:	e669      	b.n	ed5c <__aeabi_dadd+0x108>
    f088:	0020      	movs	r0, r4
    f08a:	4338      	orrs	r0, r7
    f08c:	2e00      	cmp	r6, #0
    f08e:	d1d1      	bne.n	f034 <__aeabi_dadd+0x3e0>
    f090:	2800      	cmp	r0, #0
    f092:	d15b      	bne.n	f14c <__aeabi_dadd+0x4f8>
    f094:	001c      	movs	r4, r3
    f096:	4314      	orrs	r4, r2
    f098:	d100      	bne.n	f09c <__aeabi_dadd+0x448>
    f09a:	e0a8      	b.n	f1ee <__aeabi_dadd+0x59a>
    f09c:	001c      	movs	r4, r3
    f09e:	0017      	movs	r7, r2
    f0a0:	46d8      	mov	r8, fp
    f0a2:	e65b      	b.n	ed5c <__aeabi_dadd+0x108>
    f0a4:	0006      	movs	r6, r0
    f0a6:	2400      	movs	r4, #0
    f0a8:	2700      	movs	r7, #0
    f0aa:	e697      	b.n	eddc <__aeabi_dadd+0x188>
    f0ac:	4650      	mov	r0, sl
    f0ae:	000b      	movs	r3, r1
    f0b0:	3820      	subs	r0, #32
    f0b2:	40c3      	lsrs	r3, r0
    f0b4:	4699      	mov	r9, r3
    f0b6:	4653      	mov	r3, sl
    f0b8:	2b20      	cmp	r3, #32
    f0ba:	d100      	bne.n	f0be <__aeabi_dadd+0x46a>
    f0bc:	e095      	b.n	f1ea <__aeabi_dadd+0x596>
    f0be:	2340      	movs	r3, #64	; 0x40
    f0c0:	4650      	mov	r0, sl
    f0c2:	1a1b      	subs	r3, r3, r0
    f0c4:	4099      	lsls	r1, r3
    f0c6:	430a      	orrs	r2, r1
    f0c8:	1e51      	subs	r1, r2, #1
    f0ca:	418a      	sbcs	r2, r1
    f0cc:	464b      	mov	r3, r9
    f0ce:	2100      	movs	r1, #0
    f0d0:	431a      	orrs	r2, r3
    f0d2:	e69f      	b.n	ee14 <__aeabi_dadd+0x1c0>
    f0d4:	2e00      	cmp	r6, #0
    f0d6:	d130      	bne.n	f13a <__aeabi_dadd+0x4e6>
    f0d8:	0026      	movs	r6, r4
    f0da:	433e      	orrs	r6, r7
    f0dc:	d067      	beq.n	f1ae <__aeabi_dadd+0x55a>
    f0de:	43db      	mvns	r3, r3
    f0e0:	469a      	mov	sl, r3
    f0e2:	2b00      	cmp	r3, #0
    f0e4:	d01c      	beq.n	f120 <__aeabi_dadd+0x4cc>
    f0e6:	4e61      	ldr	r6, [pc, #388]	; (f26c <__aeabi_dadd+0x618>)
    f0e8:	42b0      	cmp	r0, r6
    f0ea:	d060      	beq.n	f1ae <__aeabi_dadd+0x55a>
    f0ec:	4653      	mov	r3, sl
    f0ee:	2b38      	cmp	r3, #56	; 0x38
    f0f0:	dd00      	ble.n	f0f4 <__aeabi_dadd+0x4a0>
    f0f2:	e096      	b.n	f222 <__aeabi_dadd+0x5ce>
    f0f4:	2b1f      	cmp	r3, #31
    f0f6:	dd00      	ble.n	f0fa <__aeabi_dadd+0x4a6>
    f0f8:	e09f      	b.n	f23a <__aeabi_dadd+0x5e6>
    f0fa:	2620      	movs	r6, #32
    f0fc:	1af3      	subs	r3, r6, r3
    f0fe:	0026      	movs	r6, r4
    f100:	409e      	lsls	r6, r3
    f102:	469c      	mov	ip, r3
    f104:	46b3      	mov	fp, r6
    f106:	4653      	mov	r3, sl
    f108:	003e      	movs	r6, r7
    f10a:	40de      	lsrs	r6, r3
    f10c:	0033      	movs	r3, r6
    f10e:	465e      	mov	r6, fp
    f110:	431e      	orrs	r6, r3
    f112:	4663      	mov	r3, ip
    f114:	409f      	lsls	r7, r3
    f116:	1e7b      	subs	r3, r7, #1
    f118:	419f      	sbcs	r7, r3
    f11a:	4653      	mov	r3, sl
    f11c:	40dc      	lsrs	r4, r3
    f11e:	4337      	orrs	r7, r6
    f120:	18bf      	adds	r7, r7, r2
    f122:	4297      	cmp	r7, r2
    f124:	4192      	sbcs	r2, r2
    f126:	1864      	adds	r4, r4, r1
    f128:	4252      	negs	r2, r2
    f12a:	18a4      	adds	r4, r4, r2
    f12c:	0006      	movs	r6, r0
    f12e:	e678      	b.n	ee22 <__aeabi_dadd+0x1ce>
    f130:	4327      	orrs	r7, r4
    f132:	1e7c      	subs	r4, r7, #1
    f134:	41a7      	sbcs	r7, r4
    f136:	2400      	movs	r4, #0
    f138:	e737      	b.n	efaa <__aeabi_dadd+0x356>
    f13a:	4e4c      	ldr	r6, [pc, #304]	; (f26c <__aeabi_dadd+0x618>)
    f13c:	42b0      	cmp	r0, r6
    f13e:	d036      	beq.n	f1ae <__aeabi_dadd+0x55a>
    f140:	2680      	movs	r6, #128	; 0x80
    f142:	425b      	negs	r3, r3
    f144:	0436      	lsls	r6, r6, #16
    f146:	469a      	mov	sl, r3
    f148:	4334      	orrs	r4, r6
    f14a:	e7cf      	b.n	f0ec <__aeabi_dadd+0x498>
    f14c:	0018      	movs	r0, r3
    f14e:	4310      	orrs	r0, r2
    f150:	d100      	bne.n	f154 <__aeabi_dadd+0x500>
    f152:	e603      	b.n	ed5c <__aeabi_dadd+0x108>
    f154:	1ab8      	subs	r0, r7, r2
    f156:	4684      	mov	ip, r0
    f158:	4567      	cmp	r7, ip
    f15a:	41ad      	sbcs	r5, r5
    f15c:	1ae0      	subs	r0, r4, r3
    f15e:	426d      	negs	r5, r5
    f160:	1b40      	subs	r0, r0, r5
    f162:	0205      	lsls	r5, r0, #8
    f164:	d400      	bmi.n	f168 <__aeabi_dadd+0x514>
    f166:	e62c      	b.n	edc2 <__aeabi_dadd+0x16e>
    f168:	1bd7      	subs	r7, r2, r7
    f16a:	42ba      	cmp	r2, r7
    f16c:	4192      	sbcs	r2, r2
    f16e:	1b1c      	subs	r4, r3, r4
    f170:	4252      	negs	r2, r2
    f172:	1aa4      	subs	r4, r4, r2
    f174:	46d8      	mov	r8, fp
    f176:	e5f1      	b.n	ed5c <__aeabi_dadd+0x108>
    f178:	0018      	movs	r0, r3
    f17a:	4310      	orrs	r0, r2
    f17c:	d100      	bne.n	f180 <__aeabi_dadd+0x52c>
    f17e:	e763      	b.n	f048 <__aeabi_dadd+0x3f4>
    f180:	08f8      	lsrs	r0, r7, #3
    f182:	0767      	lsls	r7, r4, #29
    f184:	4307      	orrs	r7, r0
    f186:	2080      	movs	r0, #128	; 0x80
    f188:	08e4      	lsrs	r4, r4, #3
    f18a:	0300      	lsls	r0, r0, #12
    f18c:	4204      	tst	r4, r0
    f18e:	d008      	beq.n	f1a2 <__aeabi_dadd+0x54e>
    f190:	08dd      	lsrs	r5, r3, #3
    f192:	4205      	tst	r5, r0
    f194:	d105      	bne.n	f1a2 <__aeabi_dadd+0x54e>
    f196:	08d2      	lsrs	r2, r2, #3
    f198:	0759      	lsls	r1, r3, #29
    f19a:	4311      	orrs	r1, r2
    f19c:	000f      	movs	r7, r1
    f19e:	002c      	movs	r4, r5
    f1a0:	46d8      	mov	r8, fp
    f1a2:	0f7b      	lsrs	r3, r7, #29
    f1a4:	00e4      	lsls	r4, r4, #3
    f1a6:	431c      	orrs	r4, r3
    f1a8:	00ff      	lsls	r7, r7, #3
    f1aa:	4e30      	ldr	r6, [pc, #192]	; (f26c <__aeabi_dadd+0x618>)
    f1ac:	e5d6      	b.n	ed5c <__aeabi_dadd+0x108>
    f1ae:	000c      	movs	r4, r1
    f1b0:	0017      	movs	r7, r2
    f1b2:	0006      	movs	r6, r0
    f1b4:	e5d2      	b.n	ed5c <__aeabi_dadd+0x108>
    f1b6:	2b00      	cmp	r3, #0
    f1b8:	d038      	beq.n	f22c <__aeabi_dadd+0x5d8>
    f1ba:	000b      	movs	r3, r1
    f1bc:	4313      	orrs	r3, r2
    f1be:	d100      	bne.n	f1c2 <__aeabi_dadd+0x56e>
    f1c0:	e742      	b.n	f048 <__aeabi_dadd+0x3f4>
    f1c2:	08f8      	lsrs	r0, r7, #3
    f1c4:	0767      	lsls	r7, r4, #29
    f1c6:	4307      	orrs	r7, r0
    f1c8:	2080      	movs	r0, #128	; 0x80
    f1ca:	08e4      	lsrs	r4, r4, #3
    f1cc:	0300      	lsls	r0, r0, #12
    f1ce:	4204      	tst	r4, r0
    f1d0:	d0e7      	beq.n	f1a2 <__aeabi_dadd+0x54e>
    f1d2:	08cb      	lsrs	r3, r1, #3
    f1d4:	4203      	tst	r3, r0
    f1d6:	d1e4      	bne.n	f1a2 <__aeabi_dadd+0x54e>
    f1d8:	08d2      	lsrs	r2, r2, #3
    f1da:	0749      	lsls	r1, r1, #29
    f1dc:	4311      	orrs	r1, r2
    f1de:	000f      	movs	r7, r1
    f1e0:	001c      	movs	r4, r3
    f1e2:	e7de      	b.n	f1a2 <__aeabi_dadd+0x54e>
    f1e4:	2700      	movs	r7, #0
    f1e6:	2400      	movs	r4, #0
    f1e8:	e5d5      	b.n	ed96 <__aeabi_dadd+0x142>
    f1ea:	2100      	movs	r1, #0
    f1ec:	e76b      	b.n	f0c6 <__aeabi_dadd+0x472>
    f1ee:	2500      	movs	r5, #0
    f1f0:	2700      	movs	r7, #0
    f1f2:	e5f3      	b.n	eddc <__aeabi_dadd+0x188>
    f1f4:	464e      	mov	r6, r9
    f1f6:	0025      	movs	r5, r4
    f1f8:	3e20      	subs	r6, #32
    f1fa:	40f5      	lsrs	r5, r6
    f1fc:	464b      	mov	r3, r9
    f1fe:	002e      	movs	r6, r5
    f200:	2b20      	cmp	r3, #32
    f202:	d02d      	beq.n	f260 <__aeabi_dadd+0x60c>
    f204:	2540      	movs	r5, #64	; 0x40
    f206:	1aed      	subs	r5, r5, r3
    f208:	40ac      	lsls	r4, r5
    f20a:	4327      	orrs	r7, r4
    f20c:	1e7c      	subs	r4, r7, #1
    f20e:	41a7      	sbcs	r7, r4
    f210:	2400      	movs	r4, #0
    f212:	4337      	orrs	r7, r6
    f214:	e6c9      	b.n	efaa <__aeabi_dadd+0x356>
    f216:	2480      	movs	r4, #128	; 0x80
    f218:	2500      	movs	r5, #0
    f21a:	0324      	lsls	r4, r4, #12
    f21c:	4e13      	ldr	r6, [pc, #76]	; (f26c <__aeabi_dadd+0x618>)
    f21e:	2700      	movs	r7, #0
    f220:	e5dc      	b.n	eddc <__aeabi_dadd+0x188>
    f222:	4327      	orrs	r7, r4
    f224:	1e7c      	subs	r4, r7, #1
    f226:	41a7      	sbcs	r7, r4
    f228:	2400      	movs	r4, #0
    f22a:	e779      	b.n	f120 <__aeabi_dadd+0x4cc>
    f22c:	000c      	movs	r4, r1
    f22e:	0017      	movs	r7, r2
    f230:	4e0e      	ldr	r6, [pc, #56]	; (f26c <__aeabi_dadd+0x618>)
    f232:	e593      	b.n	ed5c <__aeabi_dadd+0x108>
    f234:	000c      	movs	r4, r1
    f236:	0017      	movs	r7, r2
    f238:	e590      	b.n	ed5c <__aeabi_dadd+0x108>
    f23a:	4656      	mov	r6, sl
    f23c:	0023      	movs	r3, r4
    f23e:	3e20      	subs	r6, #32
    f240:	40f3      	lsrs	r3, r6
    f242:	4699      	mov	r9, r3
    f244:	4653      	mov	r3, sl
    f246:	2b20      	cmp	r3, #32
    f248:	d00e      	beq.n	f268 <__aeabi_dadd+0x614>
    f24a:	2340      	movs	r3, #64	; 0x40
    f24c:	4656      	mov	r6, sl
    f24e:	1b9b      	subs	r3, r3, r6
    f250:	409c      	lsls	r4, r3
    f252:	4327      	orrs	r7, r4
    f254:	1e7c      	subs	r4, r7, #1
    f256:	41a7      	sbcs	r7, r4
    f258:	464b      	mov	r3, r9
    f25a:	2400      	movs	r4, #0
    f25c:	431f      	orrs	r7, r3
    f25e:	e75f      	b.n	f120 <__aeabi_dadd+0x4cc>
    f260:	2400      	movs	r4, #0
    f262:	e7d2      	b.n	f20a <__aeabi_dadd+0x5b6>
    f264:	0017      	movs	r7, r2
    f266:	e5b2      	b.n	edce <__aeabi_dadd+0x17a>
    f268:	2400      	movs	r4, #0
    f26a:	e7f2      	b.n	f252 <__aeabi_dadd+0x5fe>
    f26c:	000007ff 	.word	0x000007ff
    f270:	ff7fffff 	.word	0xff7fffff

0000f274 <__aeabi_ddiv>:
    f274:	b5f0      	push	{r4, r5, r6, r7, lr}
    f276:	4657      	mov	r7, sl
    f278:	4645      	mov	r5, r8
    f27a:	46de      	mov	lr, fp
    f27c:	464e      	mov	r6, r9
    f27e:	b5e0      	push	{r5, r6, r7, lr}
    f280:	004c      	lsls	r4, r1, #1
    f282:	030e      	lsls	r6, r1, #12
    f284:	b087      	sub	sp, #28
    f286:	4683      	mov	fp, r0
    f288:	4692      	mov	sl, r2
    f28a:	001d      	movs	r5, r3
    f28c:	4680      	mov	r8, r0
    f28e:	0b36      	lsrs	r6, r6, #12
    f290:	0d64      	lsrs	r4, r4, #21
    f292:	0fcf      	lsrs	r7, r1, #31
    f294:	2c00      	cmp	r4, #0
    f296:	d04f      	beq.n	f338 <__aeabi_ddiv+0xc4>
    f298:	4b6f      	ldr	r3, [pc, #444]	; (f458 <__aeabi_ddiv+0x1e4>)
    f29a:	429c      	cmp	r4, r3
    f29c:	d035      	beq.n	f30a <__aeabi_ddiv+0x96>
    f29e:	2380      	movs	r3, #128	; 0x80
    f2a0:	0f42      	lsrs	r2, r0, #29
    f2a2:	041b      	lsls	r3, r3, #16
    f2a4:	00f6      	lsls	r6, r6, #3
    f2a6:	4313      	orrs	r3, r2
    f2a8:	4333      	orrs	r3, r6
    f2aa:	4699      	mov	r9, r3
    f2ac:	00c3      	lsls	r3, r0, #3
    f2ae:	4698      	mov	r8, r3
    f2b0:	4b6a      	ldr	r3, [pc, #424]	; (f45c <__aeabi_ddiv+0x1e8>)
    f2b2:	2600      	movs	r6, #0
    f2b4:	469c      	mov	ip, r3
    f2b6:	2300      	movs	r3, #0
    f2b8:	4464      	add	r4, ip
    f2ba:	9303      	str	r3, [sp, #12]
    f2bc:	032b      	lsls	r3, r5, #12
    f2be:	0b1b      	lsrs	r3, r3, #12
    f2c0:	469b      	mov	fp, r3
    f2c2:	006b      	lsls	r3, r5, #1
    f2c4:	0fed      	lsrs	r5, r5, #31
    f2c6:	4650      	mov	r0, sl
    f2c8:	0d5b      	lsrs	r3, r3, #21
    f2ca:	9501      	str	r5, [sp, #4]
    f2cc:	d05e      	beq.n	f38c <__aeabi_ddiv+0x118>
    f2ce:	4a62      	ldr	r2, [pc, #392]	; (f458 <__aeabi_ddiv+0x1e4>)
    f2d0:	4293      	cmp	r3, r2
    f2d2:	d053      	beq.n	f37c <__aeabi_ddiv+0x108>
    f2d4:	465a      	mov	r2, fp
    f2d6:	00d1      	lsls	r1, r2, #3
    f2d8:	2280      	movs	r2, #128	; 0x80
    f2da:	0f40      	lsrs	r0, r0, #29
    f2dc:	0412      	lsls	r2, r2, #16
    f2de:	4302      	orrs	r2, r0
    f2e0:	430a      	orrs	r2, r1
    f2e2:	4693      	mov	fp, r2
    f2e4:	4652      	mov	r2, sl
    f2e6:	00d1      	lsls	r1, r2, #3
    f2e8:	4a5c      	ldr	r2, [pc, #368]	; (f45c <__aeabi_ddiv+0x1e8>)
    f2ea:	4694      	mov	ip, r2
    f2ec:	2200      	movs	r2, #0
    f2ee:	4463      	add	r3, ip
    f2f0:	0038      	movs	r0, r7
    f2f2:	4068      	eors	r0, r5
    f2f4:	4684      	mov	ip, r0
    f2f6:	9002      	str	r0, [sp, #8]
    f2f8:	1ae4      	subs	r4, r4, r3
    f2fa:	4316      	orrs	r6, r2
    f2fc:	2e0f      	cmp	r6, #15
    f2fe:	d900      	bls.n	f302 <__aeabi_ddiv+0x8e>
    f300:	e0b4      	b.n	f46c <__aeabi_ddiv+0x1f8>
    f302:	4b57      	ldr	r3, [pc, #348]	; (f460 <__aeabi_ddiv+0x1ec>)
    f304:	00b6      	lsls	r6, r6, #2
    f306:	599b      	ldr	r3, [r3, r6]
    f308:	469f      	mov	pc, r3
    f30a:	0003      	movs	r3, r0
    f30c:	4333      	orrs	r3, r6
    f30e:	4699      	mov	r9, r3
    f310:	d16c      	bne.n	f3ec <__aeabi_ddiv+0x178>
    f312:	2300      	movs	r3, #0
    f314:	4698      	mov	r8, r3
    f316:	3302      	adds	r3, #2
    f318:	2608      	movs	r6, #8
    f31a:	9303      	str	r3, [sp, #12]
    f31c:	e7ce      	b.n	f2bc <__aeabi_ddiv+0x48>
    f31e:	46cb      	mov	fp, r9
    f320:	4641      	mov	r1, r8
    f322:	9a03      	ldr	r2, [sp, #12]
    f324:	9701      	str	r7, [sp, #4]
    f326:	2a02      	cmp	r2, #2
    f328:	d165      	bne.n	f3f6 <__aeabi_ddiv+0x182>
    f32a:	9b01      	ldr	r3, [sp, #4]
    f32c:	4c4a      	ldr	r4, [pc, #296]	; (f458 <__aeabi_ddiv+0x1e4>)
    f32e:	469c      	mov	ip, r3
    f330:	2300      	movs	r3, #0
    f332:	2200      	movs	r2, #0
    f334:	4698      	mov	r8, r3
    f336:	e06b      	b.n	f410 <__aeabi_ddiv+0x19c>
    f338:	0003      	movs	r3, r0
    f33a:	4333      	orrs	r3, r6
    f33c:	4699      	mov	r9, r3
    f33e:	d04e      	beq.n	f3de <__aeabi_ddiv+0x16a>
    f340:	2e00      	cmp	r6, #0
    f342:	d100      	bne.n	f346 <__aeabi_ddiv+0xd2>
    f344:	e1bc      	b.n	f6c0 <__aeabi_ddiv+0x44c>
    f346:	0030      	movs	r0, r6
    f348:	f001 f9ea 	bl	10720 <__clzsi2>
    f34c:	0003      	movs	r3, r0
    f34e:	3b0b      	subs	r3, #11
    f350:	2b1c      	cmp	r3, #28
    f352:	dd00      	ble.n	f356 <__aeabi_ddiv+0xe2>
    f354:	e1ac      	b.n	f6b0 <__aeabi_ddiv+0x43c>
    f356:	221d      	movs	r2, #29
    f358:	1ad3      	subs	r3, r2, r3
    f35a:	465a      	mov	r2, fp
    f35c:	0001      	movs	r1, r0
    f35e:	40da      	lsrs	r2, r3
    f360:	3908      	subs	r1, #8
    f362:	408e      	lsls	r6, r1
    f364:	0013      	movs	r3, r2
    f366:	4333      	orrs	r3, r6
    f368:	4699      	mov	r9, r3
    f36a:	465b      	mov	r3, fp
    f36c:	408b      	lsls	r3, r1
    f36e:	4698      	mov	r8, r3
    f370:	2300      	movs	r3, #0
    f372:	4c3c      	ldr	r4, [pc, #240]	; (f464 <__aeabi_ddiv+0x1f0>)
    f374:	2600      	movs	r6, #0
    f376:	1a24      	subs	r4, r4, r0
    f378:	9303      	str	r3, [sp, #12]
    f37a:	e79f      	b.n	f2bc <__aeabi_ddiv+0x48>
    f37c:	4651      	mov	r1, sl
    f37e:	465a      	mov	r2, fp
    f380:	4311      	orrs	r1, r2
    f382:	d129      	bne.n	f3d8 <__aeabi_ddiv+0x164>
    f384:	2200      	movs	r2, #0
    f386:	4693      	mov	fp, r2
    f388:	3202      	adds	r2, #2
    f38a:	e7b1      	b.n	f2f0 <__aeabi_ddiv+0x7c>
    f38c:	4659      	mov	r1, fp
    f38e:	4301      	orrs	r1, r0
    f390:	d01e      	beq.n	f3d0 <__aeabi_ddiv+0x15c>
    f392:	465b      	mov	r3, fp
    f394:	2b00      	cmp	r3, #0
    f396:	d100      	bne.n	f39a <__aeabi_ddiv+0x126>
    f398:	e19e      	b.n	f6d8 <__aeabi_ddiv+0x464>
    f39a:	4658      	mov	r0, fp
    f39c:	f001 f9c0 	bl	10720 <__clzsi2>
    f3a0:	0003      	movs	r3, r0
    f3a2:	3b0b      	subs	r3, #11
    f3a4:	2b1c      	cmp	r3, #28
    f3a6:	dd00      	ble.n	f3aa <__aeabi_ddiv+0x136>
    f3a8:	e18f      	b.n	f6ca <__aeabi_ddiv+0x456>
    f3aa:	0002      	movs	r2, r0
    f3ac:	4659      	mov	r1, fp
    f3ae:	3a08      	subs	r2, #8
    f3b0:	4091      	lsls	r1, r2
    f3b2:	468b      	mov	fp, r1
    f3b4:	211d      	movs	r1, #29
    f3b6:	1acb      	subs	r3, r1, r3
    f3b8:	4651      	mov	r1, sl
    f3ba:	40d9      	lsrs	r1, r3
    f3bc:	000b      	movs	r3, r1
    f3be:	4659      	mov	r1, fp
    f3c0:	430b      	orrs	r3, r1
    f3c2:	4651      	mov	r1, sl
    f3c4:	469b      	mov	fp, r3
    f3c6:	4091      	lsls	r1, r2
    f3c8:	4b26      	ldr	r3, [pc, #152]	; (f464 <__aeabi_ddiv+0x1f0>)
    f3ca:	2200      	movs	r2, #0
    f3cc:	1a1b      	subs	r3, r3, r0
    f3ce:	e78f      	b.n	f2f0 <__aeabi_ddiv+0x7c>
    f3d0:	2300      	movs	r3, #0
    f3d2:	2201      	movs	r2, #1
    f3d4:	469b      	mov	fp, r3
    f3d6:	e78b      	b.n	f2f0 <__aeabi_ddiv+0x7c>
    f3d8:	4651      	mov	r1, sl
    f3da:	2203      	movs	r2, #3
    f3dc:	e788      	b.n	f2f0 <__aeabi_ddiv+0x7c>
    f3de:	2300      	movs	r3, #0
    f3e0:	4698      	mov	r8, r3
    f3e2:	3301      	adds	r3, #1
    f3e4:	2604      	movs	r6, #4
    f3e6:	2400      	movs	r4, #0
    f3e8:	9303      	str	r3, [sp, #12]
    f3ea:	e767      	b.n	f2bc <__aeabi_ddiv+0x48>
    f3ec:	2303      	movs	r3, #3
    f3ee:	46b1      	mov	r9, r6
    f3f0:	9303      	str	r3, [sp, #12]
    f3f2:	260c      	movs	r6, #12
    f3f4:	e762      	b.n	f2bc <__aeabi_ddiv+0x48>
    f3f6:	2a03      	cmp	r2, #3
    f3f8:	d100      	bne.n	f3fc <__aeabi_ddiv+0x188>
    f3fa:	e25c      	b.n	f8b6 <__aeabi_ddiv+0x642>
    f3fc:	9b01      	ldr	r3, [sp, #4]
    f3fe:	2a01      	cmp	r2, #1
    f400:	d000      	beq.n	f404 <__aeabi_ddiv+0x190>
    f402:	e1e4      	b.n	f7ce <__aeabi_ddiv+0x55a>
    f404:	4013      	ands	r3, r2
    f406:	469c      	mov	ip, r3
    f408:	2300      	movs	r3, #0
    f40a:	2400      	movs	r4, #0
    f40c:	2200      	movs	r2, #0
    f40e:	4698      	mov	r8, r3
    f410:	2100      	movs	r1, #0
    f412:	0312      	lsls	r2, r2, #12
    f414:	0b13      	lsrs	r3, r2, #12
    f416:	0d0a      	lsrs	r2, r1, #20
    f418:	0512      	lsls	r2, r2, #20
    f41a:	431a      	orrs	r2, r3
    f41c:	0523      	lsls	r3, r4, #20
    f41e:	4c12      	ldr	r4, [pc, #72]	; (f468 <__aeabi_ddiv+0x1f4>)
    f420:	4640      	mov	r0, r8
    f422:	4022      	ands	r2, r4
    f424:	4313      	orrs	r3, r2
    f426:	4662      	mov	r2, ip
    f428:	005b      	lsls	r3, r3, #1
    f42a:	07d2      	lsls	r2, r2, #31
    f42c:	085b      	lsrs	r3, r3, #1
    f42e:	4313      	orrs	r3, r2
    f430:	0019      	movs	r1, r3
    f432:	b007      	add	sp, #28
    f434:	bc3c      	pop	{r2, r3, r4, r5}
    f436:	4690      	mov	r8, r2
    f438:	4699      	mov	r9, r3
    f43a:	46a2      	mov	sl, r4
    f43c:	46ab      	mov	fp, r5
    f43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f440:	2300      	movs	r3, #0
    f442:	2280      	movs	r2, #128	; 0x80
    f444:	469c      	mov	ip, r3
    f446:	0312      	lsls	r2, r2, #12
    f448:	4698      	mov	r8, r3
    f44a:	4c03      	ldr	r4, [pc, #12]	; (f458 <__aeabi_ddiv+0x1e4>)
    f44c:	e7e0      	b.n	f410 <__aeabi_ddiv+0x19c>
    f44e:	2300      	movs	r3, #0
    f450:	4c01      	ldr	r4, [pc, #4]	; (f458 <__aeabi_ddiv+0x1e4>)
    f452:	2200      	movs	r2, #0
    f454:	4698      	mov	r8, r3
    f456:	e7db      	b.n	f410 <__aeabi_ddiv+0x19c>
    f458:	000007ff 	.word	0x000007ff
    f45c:	fffffc01 	.word	0xfffffc01
    f460:	00014118 	.word	0x00014118
    f464:	fffffc0d 	.word	0xfffffc0d
    f468:	800fffff 	.word	0x800fffff
    f46c:	45d9      	cmp	r9, fp
    f46e:	d900      	bls.n	f472 <__aeabi_ddiv+0x1fe>
    f470:	e139      	b.n	f6e6 <__aeabi_ddiv+0x472>
    f472:	d100      	bne.n	f476 <__aeabi_ddiv+0x202>
    f474:	e134      	b.n	f6e0 <__aeabi_ddiv+0x46c>
    f476:	2300      	movs	r3, #0
    f478:	4646      	mov	r6, r8
    f47a:	464d      	mov	r5, r9
    f47c:	469a      	mov	sl, r3
    f47e:	3c01      	subs	r4, #1
    f480:	465b      	mov	r3, fp
    f482:	0e0a      	lsrs	r2, r1, #24
    f484:	021b      	lsls	r3, r3, #8
    f486:	431a      	orrs	r2, r3
    f488:	020b      	lsls	r3, r1, #8
    f48a:	0c17      	lsrs	r7, r2, #16
    f48c:	9303      	str	r3, [sp, #12]
    f48e:	0413      	lsls	r3, r2, #16
    f490:	0c1b      	lsrs	r3, r3, #16
    f492:	0039      	movs	r1, r7
    f494:	0028      	movs	r0, r5
    f496:	4690      	mov	r8, r2
    f498:	9301      	str	r3, [sp, #4]
    f49a:	f7ff fa27 	bl	e8ec <__udivsi3>
    f49e:	0002      	movs	r2, r0
    f4a0:	9b01      	ldr	r3, [sp, #4]
    f4a2:	4683      	mov	fp, r0
    f4a4:	435a      	muls	r2, r3
    f4a6:	0028      	movs	r0, r5
    f4a8:	0039      	movs	r1, r7
    f4aa:	4691      	mov	r9, r2
    f4ac:	f7ff faa4 	bl	e9f8 <__aeabi_uidivmod>
    f4b0:	0c35      	lsrs	r5, r6, #16
    f4b2:	0409      	lsls	r1, r1, #16
    f4b4:	430d      	orrs	r5, r1
    f4b6:	45a9      	cmp	r9, r5
    f4b8:	d90d      	bls.n	f4d6 <__aeabi_ddiv+0x262>
    f4ba:	465b      	mov	r3, fp
    f4bc:	4445      	add	r5, r8
    f4be:	3b01      	subs	r3, #1
    f4c0:	45a8      	cmp	r8, r5
    f4c2:	d900      	bls.n	f4c6 <__aeabi_ddiv+0x252>
    f4c4:	e13a      	b.n	f73c <__aeabi_ddiv+0x4c8>
    f4c6:	45a9      	cmp	r9, r5
    f4c8:	d800      	bhi.n	f4cc <__aeabi_ddiv+0x258>
    f4ca:	e137      	b.n	f73c <__aeabi_ddiv+0x4c8>
    f4cc:	2302      	movs	r3, #2
    f4ce:	425b      	negs	r3, r3
    f4d0:	469c      	mov	ip, r3
    f4d2:	4445      	add	r5, r8
    f4d4:	44e3      	add	fp, ip
    f4d6:	464b      	mov	r3, r9
    f4d8:	1aeb      	subs	r3, r5, r3
    f4da:	0039      	movs	r1, r7
    f4dc:	0018      	movs	r0, r3
    f4de:	9304      	str	r3, [sp, #16]
    f4e0:	f7ff fa04 	bl	e8ec <__udivsi3>
    f4e4:	9b01      	ldr	r3, [sp, #4]
    f4e6:	0005      	movs	r5, r0
    f4e8:	4343      	muls	r3, r0
    f4ea:	0039      	movs	r1, r7
    f4ec:	9804      	ldr	r0, [sp, #16]
    f4ee:	4699      	mov	r9, r3
    f4f0:	f7ff fa82 	bl	e9f8 <__aeabi_uidivmod>
    f4f4:	0433      	lsls	r3, r6, #16
    f4f6:	0409      	lsls	r1, r1, #16
    f4f8:	0c1b      	lsrs	r3, r3, #16
    f4fa:	430b      	orrs	r3, r1
    f4fc:	4599      	cmp	r9, r3
    f4fe:	d909      	bls.n	f514 <__aeabi_ddiv+0x2a0>
    f500:	4443      	add	r3, r8
    f502:	1e6a      	subs	r2, r5, #1
    f504:	4598      	cmp	r8, r3
    f506:	d900      	bls.n	f50a <__aeabi_ddiv+0x296>
    f508:	e11a      	b.n	f740 <__aeabi_ddiv+0x4cc>
    f50a:	4599      	cmp	r9, r3
    f50c:	d800      	bhi.n	f510 <__aeabi_ddiv+0x29c>
    f50e:	e117      	b.n	f740 <__aeabi_ddiv+0x4cc>
    f510:	3d02      	subs	r5, #2
    f512:	4443      	add	r3, r8
    f514:	464a      	mov	r2, r9
    f516:	1a9b      	subs	r3, r3, r2
    f518:	465a      	mov	r2, fp
    f51a:	0412      	lsls	r2, r2, #16
    f51c:	432a      	orrs	r2, r5
    f51e:	9903      	ldr	r1, [sp, #12]
    f520:	4693      	mov	fp, r2
    f522:	0c10      	lsrs	r0, r2, #16
    f524:	0c0a      	lsrs	r2, r1, #16
    f526:	4691      	mov	r9, r2
    f528:	0409      	lsls	r1, r1, #16
    f52a:	465a      	mov	r2, fp
    f52c:	0c09      	lsrs	r1, r1, #16
    f52e:	464e      	mov	r6, r9
    f530:	000d      	movs	r5, r1
    f532:	0412      	lsls	r2, r2, #16
    f534:	0c12      	lsrs	r2, r2, #16
    f536:	4345      	muls	r5, r0
    f538:	9105      	str	r1, [sp, #20]
    f53a:	4351      	muls	r1, r2
    f53c:	4372      	muls	r2, r6
    f53e:	4370      	muls	r0, r6
    f540:	1952      	adds	r2, r2, r5
    f542:	0c0e      	lsrs	r6, r1, #16
    f544:	18b2      	adds	r2, r6, r2
    f546:	4295      	cmp	r5, r2
    f548:	d903      	bls.n	f552 <__aeabi_ddiv+0x2de>
    f54a:	2580      	movs	r5, #128	; 0x80
    f54c:	026d      	lsls	r5, r5, #9
    f54e:	46ac      	mov	ip, r5
    f550:	4460      	add	r0, ip
    f552:	0c15      	lsrs	r5, r2, #16
    f554:	0409      	lsls	r1, r1, #16
    f556:	0412      	lsls	r2, r2, #16
    f558:	0c09      	lsrs	r1, r1, #16
    f55a:	1828      	adds	r0, r5, r0
    f55c:	1852      	adds	r2, r2, r1
    f55e:	4283      	cmp	r3, r0
    f560:	d200      	bcs.n	f564 <__aeabi_ddiv+0x2f0>
    f562:	e0ce      	b.n	f702 <__aeabi_ddiv+0x48e>
    f564:	d100      	bne.n	f568 <__aeabi_ddiv+0x2f4>
    f566:	e0c8      	b.n	f6fa <__aeabi_ddiv+0x486>
    f568:	1a1d      	subs	r5, r3, r0
    f56a:	4653      	mov	r3, sl
    f56c:	1a9e      	subs	r6, r3, r2
    f56e:	45b2      	cmp	sl, r6
    f570:	4192      	sbcs	r2, r2
    f572:	4252      	negs	r2, r2
    f574:	1aab      	subs	r3, r5, r2
    f576:	469a      	mov	sl, r3
    f578:	4598      	cmp	r8, r3
    f57a:	d100      	bne.n	f57e <__aeabi_ddiv+0x30a>
    f57c:	e117      	b.n	f7ae <__aeabi_ddiv+0x53a>
    f57e:	0039      	movs	r1, r7
    f580:	0018      	movs	r0, r3
    f582:	f7ff f9b3 	bl	e8ec <__udivsi3>
    f586:	9b01      	ldr	r3, [sp, #4]
    f588:	0005      	movs	r5, r0
    f58a:	4343      	muls	r3, r0
    f58c:	0039      	movs	r1, r7
    f58e:	4650      	mov	r0, sl
    f590:	9304      	str	r3, [sp, #16]
    f592:	f7ff fa31 	bl	e9f8 <__aeabi_uidivmod>
    f596:	9804      	ldr	r0, [sp, #16]
    f598:	040b      	lsls	r3, r1, #16
    f59a:	0c31      	lsrs	r1, r6, #16
    f59c:	4319      	orrs	r1, r3
    f59e:	4288      	cmp	r0, r1
    f5a0:	d909      	bls.n	f5b6 <__aeabi_ddiv+0x342>
    f5a2:	4441      	add	r1, r8
    f5a4:	1e6b      	subs	r3, r5, #1
    f5a6:	4588      	cmp	r8, r1
    f5a8:	d900      	bls.n	f5ac <__aeabi_ddiv+0x338>
    f5aa:	e107      	b.n	f7bc <__aeabi_ddiv+0x548>
    f5ac:	4288      	cmp	r0, r1
    f5ae:	d800      	bhi.n	f5b2 <__aeabi_ddiv+0x33e>
    f5b0:	e104      	b.n	f7bc <__aeabi_ddiv+0x548>
    f5b2:	3d02      	subs	r5, #2
    f5b4:	4441      	add	r1, r8
    f5b6:	9b04      	ldr	r3, [sp, #16]
    f5b8:	1acb      	subs	r3, r1, r3
    f5ba:	0018      	movs	r0, r3
    f5bc:	0039      	movs	r1, r7
    f5be:	9304      	str	r3, [sp, #16]
    f5c0:	f7ff f994 	bl	e8ec <__udivsi3>
    f5c4:	9b01      	ldr	r3, [sp, #4]
    f5c6:	4682      	mov	sl, r0
    f5c8:	4343      	muls	r3, r0
    f5ca:	0039      	movs	r1, r7
    f5cc:	9804      	ldr	r0, [sp, #16]
    f5ce:	9301      	str	r3, [sp, #4]
    f5d0:	f7ff fa12 	bl	e9f8 <__aeabi_uidivmod>
    f5d4:	9801      	ldr	r0, [sp, #4]
    f5d6:	040b      	lsls	r3, r1, #16
    f5d8:	0431      	lsls	r1, r6, #16
    f5da:	0c09      	lsrs	r1, r1, #16
    f5dc:	4319      	orrs	r1, r3
    f5de:	4288      	cmp	r0, r1
    f5e0:	d90d      	bls.n	f5fe <__aeabi_ddiv+0x38a>
    f5e2:	4653      	mov	r3, sl
    f5e4:	4441      	add	r1, r8
    f5e6:	3b01      	subs	r3, #1
    f5e8:	4588      	cmp	r8, r1
    f5ea:	d900      	bls.n	f5ee <__aeabi_ddiv+0x37a>
    f5ec:	e0e8      	b.n	f7c0 <__aeabi_ddiv+0x54c>
    f5ee:	4288      	cmp	r0, r1
    f5f0:	d800      	bhi.n	f5f4 <__aeabi_ddiv+0x380>
    f5f2:	e0e5      	b.n	f7c0 <__aeabi_ddiv+0x54c>
    f5f4:	2302      	movs	r3, #2
    f5f6:	425b      	negs	r3, r3
    f5f8:	469c      	mov	ip, r3
    f5fa:	4441      	add	r1, r8
    f5fc:	44e2      	add	sl, ip
    f5fe:	9b01      	ldr	r3, [sp, #4]
    f600:	042d      	lsls	r5, r5, #16
    f602:	1ace      	subs	r6, r1, r3
    f604:	4651      	mov	r1, sl
    f606:	4329      	orrs	r1, r5
    f608:	9d05      	ldr	r5, [sp, #20]
    f60a:	464f      	mov	r7, r9
    f60c:	002a      	movs	r2, r5
    f60e:	040b      	lsls	r3, r1, #16
    f610:	0c08      	lsrs	r0, r1, #16
    f612:	0c1b      	lsrs	r3, r3, #16
    f614:	435a      	muls	r2, r3
    f616:	4345      	muls	r5, r0
    f618:	437b      	muls	r3, r7
    f61a:	4378      	muls	r0, r7
    f61c:	195b      	adds	r3, r3, r5
    f61e:	0c17      	lsrs	r7, r2, #16
    f620:	18fb      	adds	r3, r7, r3
    f622:	429d      	cmp	r5, r3
    f624:	d903      	bls.n	f62e <__aeabi_ddiv+0x3ba>
    f626:	2580      	movs	r5, #128	; 0x80
    f628:	026d      	lsls	r5, r5, #9
    f62a:	46ac      	mov	ip, r5
    f62c:	4460      	add	r0, ip
    f62e:	0c1d      	lsrs	r5, r3, #16
    f630:	0412      	lsls	r2, r2, #16
    f632:	041b      	lsls	r3, r3, #16
    f634:	0c12      	lsrs	r2, r2, #16
    f636:	1828      	adds	r0, r5, r0
    f638:	189b      	adds	r3, r3, r2
    f63a:	4286      	cmp	r6, r0
    f63c:	d200      	bcs.n	f640 <__aeabi_ddiv+0x3cc>
    f63e:	e093      	b.n	f768 <__aeabi_ddiv+0x4f4>
    f640:	d100      	bne.n	f644 <__aeabi_ddiv+0x3d0>
    f642:	e08e      	b.n	f762 <__aeabi_ddiv+0x4ee>
    f644:	2301      	movs	r3, #1
    f646:	4319      	orrs	r1, r3
    f648:	4ba0      	ldr	r3, [pc, #640]	; (f8cc <__aeabi_ddiv+0x658>)
    f64a:	18e3      	adds	r3, r4, r3
    f64c:	2b00      	cmp	r3, #0
    f64e:	dc00      	bgt.n	f652 <__aeabi_ddiv+0x3de>
    f650:	e099      	b.n	f786 <__aeabi_ddiv+0x512>
    f652:	074a      	lsls	r2, r1, #29
    f654:	d000      	beq.n	f658 <__aeabi_ddiv+0x3e4>
    f656:	e09e      	b.n	f796 <__aeabi_ddiv+0x522>
    f658:	465a      	mov	r2, fp
    f65a:	01d2      	lsls	r2, r2, #7
    f65c:	d506      	bpl.n	f66c <__aeabi_ddiv+0x3f8>
    f65e:	465a      	mov	r2, fp
    f660:	4b9b      	ldr	r3, [pc, #620]	; (f8d0 <__aeabi_ddiv+0x65c>)
    f662:	401a      	ands	r2, r3
    f664:	2380      	movs	r3, #128	; 0x80
    f666:	4693      	mov	fp, r2
    f668:	00db      	lsls	r3, r3, #3
    f66a:	18e3      	adds	r3, r4, r3
    f66c:	4a99      	ldr	r2, [pc, #612]	; (f8d4 <__aeabi_ddiv+0x660>)
    f66e:	4293      	cmp	r3, r2
    f670:	dd68      	ble.n	f744 <__aeabi_ddiv+0x4d0>
    f672:	2301      	movs	r3, #1
    f674:	9a02      	ldr	r2, [sp, #8]
    f676:	4c98      	ldr	r4, [pc, #608]	; (f8d8 <__aeabi_ddiv+0x664>)
    f678:	401a      	ands	r2, r3
    f67a:	2300      	movs	r3, #0
    f67c:	4694      	mov	ip, r2
    f67e:	4698      	mov	r8, r3
    f680:	2200      	movs	r2, #0
    f682:	e6c5      	b.n	f410 <__aeabi_ddiv+0x19c>
    f684:	2280      	movs	r2, #128	; 0x80
    f686:	464b      	mov	r3, r9
    f688:	0312      	lsls	r2, r2, #12
    f68a:	4213      	tst	r3, r2
    f68c:	d00a      	beq.n	f6a4 <__aeabi_ddiv+0x430>
    f68e:	465b      	mov	r3, fp
    f690:	4213      	tst	r3, r2
    f692:	d106      	bne.n	f6a2 <__aeabi_ddiv+0x42e>
    f694:	431a      	orrs	r2, r3
    f696:	0312      	lsls	r2, r2, #12
    f698:	0b12      	lsrs	r2, r2, #12
    f69a:	46ac      	mov	ip, r5
    f69c:	4688      	mov	r8, r1
    f69e:	4c8e      	ldr	r4, [pc, #568]	; (f8d8 <__aeabi_ddiv+0x664>)
    f6a0:	e6b6      	b.n	f410 <__aeabi_ddiv+0x19c>
    f6a2:	464b      	mov	r3, r9
    f6a4:	431a      	orrs	r2, r3
    f6a6:	0312      	lsls	r2, r2, #12
    f6a8:	0b12      	lsrs	r2, r2, #12
    f6aa:	46bc      	mov	ip, r7
    f6ac:	4c8a      	ldr	r4, [pc, #552]	; (f8d8 <__aeabi_ddiv+0x664>)
    f6ae:	e6af      	b.n	f410 <__aeabi_ddiv+0x19c>
    f6b0:	0003      	movs	r3, r0
    f6b2:	465a      	mov	r2, fp
    f6b4:	3b28      	subs	r3, #40	; 0x28
    f6b6:	409a      	lsls	r2, r3
    f6b8:	2300      	movs	r3, #0
    f6ba:	4691      	mov	r9, r2
    f6bc:	4698      	mov	r8, r3
    f6be:	e657      	b.n	f370 <__aeabi_ddiv+0xfc>
    f6c0:	4658      	mov	r0, fp
    f6c2:	f001 f82d 	bl	10720 <__clzsi2>
    f6c6:	3020      	adds	r0, #32
    f6c8:	e640      	b.n	f34c <__aeabi_ddiv+0xd8>
    f6ca:	0003      	movs	r3, r0
    f6cc:	4652      	mov	r2, sl
    f6ce:	3b28      	subs	r3, #40	; 0x28
    f6d0:	409a      	lsls	r2, r3
    f6d2:	2100      	movs	r1, #0
    f6d4:	4693      	mov	fp, r2
    f6d6:	e677      	b.n	f3c8 <__aeabi_ddiv+0x154>
    f6d8:	f001 f822 	bl	10720 <__clzsi2>
    f6dc:	3020      	adds	r0, #32
    f6de:	e65f      	b.n	f3a0 <__aeabi_ddiv+0x12c>
    f6e0:	4588      	cmp	r8, r1
    f6e2:	d200      	bcs.n	f6e6 <__aeabi_ddiv+0x472>
    f6e4:	e6c7      	b.n	f476 <__aeabi_ddiv+0x202>
    f6e6:	464b      	mov	r3, r9
    f6e8:	07de      	lsls	r6, r3, #31
    f6ea:	085d      	lsrs	r5, r3, #1
    f6ec:	4643      	mov	r3, r8
    f6ee:	085b      	lsrs	r3, r3, #1
    f6f0:	431e      	orrs	r6, r3
    f6f2:	4643      	mov	r3, r8
    f6f4:	07db      	lsls	r3, r3, #31
    f6f6:	469a      	mov	sl, r3
    f6f8:	e6c2      	b.n	f480 <__aeabi_ddiv+0x20c>
    f6fa:	2500      	movs	r5, #0
    f6fc:	4592      	cmp	sl, r2
    f6fe:	d300      	bcc.n	f702 <__aeabi_ddiv+0x48e>
    f700:	e733      	b.n	f56a <__aeabi_ddiv+0x2f6>
    f702:	9e03      	ldr	r6, [sp, #12]
    f704:	4659      	mov	r1, fp
    f706:	46b4      	mov	ip, r6
    f708:	44e2      	add	sl, ip
    f70a:	45b2      	cmp	sl, r6
    f70c:	41ad      	sbcs	r5, r5
    f70e:	426d      	negs	r5, r5
    f710:	4445      	add	r5, r8
    f712:	18eb      	adds	r3, r5, r3
    f714:	3901      	subs	r1, #1
    f716:	4598      	cmp	r8, r3
    f718:	d207      	bcs.n	f72a <__aeabi_ddiv+0x4b6>
    f71a:	4298      	cmp	r0, r3
    f71c:	d900      	bls.n	f720 <__aeabi_ddiv+0x4ac>
    f71e:	e07f      	b.n	f820 <__aeabi_ddiv+0x5ac>
    f720:	d100      	bne.n	f724 <__aeabi_ddiv+0x4b0>
    f722:	e0bc      	b.n	f89e <__aeabi_ddiv+0x62a>
    f724:	1a1d      	subs	r5, r3, r0
    f726:	468b      	mov	fp, r1
    f728:	e71f      	b.n	f56a <__aeabi_ddiv+0x2f6>
    f72a:	4598      	cmp	r8, r3
    f72c:	d1fa      	bne.n	f724 <__aeabi_ddiv+0x4b0>
    f72e:	9d03      	ldr	r5, [sp, #12]
    f730:	4555      	cmp	r5, sl
    f732:	d9f2      	bls.n	f71a <__aeabi_ddiv+0x4a6>
    f734:	4643      	mov	r3, r8
    f736:	468b      	mov	fp, r1
    f738:	1a1d      	subs	r5, r3, r0
    f73a:	e716      	b.n	f56a <__aeabi_ddiv+0x2f6>
    f73c:	469b      	mov	fp, r3
    f73e:	e6ca      	b.n	f4d6 <__aeabi_ddiv+0x262>
    f740:	0015      	movs	r5, r2
    f742:	e6e7      	b.n	f514 <__aeabi_ddiv+0x2a0>
    f744:	465a      	mov	r2, fp
    f746:	08c9      	lsrs	r1, r1, #3
    f748:	0752      	lsls	r2, r2, #29
    f74a:	430a      	orrs	r2, r1
    f74c:	055b      	lsls	r3, r3, #21
    f74e:	4690      	mov	r8, r2
    f750:	0d5c      	lsrs	r4, r3, #21
    f752:	465a      	mov	r2, fp
    f754:	2301      	movs	r3, #1
    f756:	9902      	ldr	r1, [sp, #8]
    f758:	0252      	lsls	r2, r2, #9
    f75a:	4019      	ands	r1, r3
    f75c:	0b12      	lsrs	r2, r2, #12
    f75e:	468c      	mov	ip, r1
    f760:	e656      	b.n	f410 <__aeabi_ddiv+0x19c>
    f762:	2b00      	cmp	r3, #0
    f764:	d100      	bne.n	f768 <__aeabi_ddiv+0x4f4>
    f766:	e76f      	b.n	f648 <__aeabi_ddiv+0x3d4>
    f768:	4446      	add	r6, r8
    f76a:	1e4a      	subs	r2, r1, #1
    f76c:	45b0      	cmp	r8, r6
    f76e:	d929      	bls.n	f7c4 <__aeabi_ddiv+0x550>
    f770:	0011      	movs	r1, r2
    f772:	4286      	cmp	r6, r0
    f774:	d000      	beq.n	f778 <__aeabi_ddiv+0x504>
    f776:	e765      	b.n	f644 <__aeabi_ddiv+0x3d0>
    f778:	9a03      	ldr	r2, [sp, #12]
    f77a:	4293      	cmp	r3, r2
    f77c:	d000      	beq.n	f780 <__aeabi_ddiv+0x50c>
    f77e:	e761      	b.n	f644 <__aeabi_ddiv+0x3d0>
    f780:	e762      	b.n	f648 <__aeabi_ddiv+0x3d4>
    f782:	2101      	movs	r1, #1
    f784:	4249      	negs	r1, r1
    f786:	2001      	movs	r0, #1
    f788:	1ac2      	subs	r2, r0, r3
    f78a:	2a38      	cmp	r2, #56	; 0x38
    f78c:	dd21      	ble.n	f7d2 <__aeabi_ddiv+0x55e>
    f78e:	9b02      	ldr	r3, [sp, #8]
    f790:	4003      	ands	r3, r0
    f792:	469c      	mov	ip, r3
    f794:	e638      	b.n	f408 <__aeabi_ddiv+0x194>
    f796:	220f      	movs	r2, #15
    f798:	400a      	ands	r2, r1
    f79a:	2a04      	cmp	r2, #4
    f79c:	d100      	bne.n	f7a0 <__aeabi_ddiv+0x52c>
    f79e:	e75b      	b.n	f658 <__aeabi_ddiv+0x3e4>
    f7a0:	000a      	movs	r2, r1
    f7a2:	1d11      	adds	r1, r2, #4
    f7a4:	4291      	cmp	r1, r2
    f7a6:	4192      	sbcs	r2, r2
    f7a8:	4252      	negs	r2, r2
    f7aa:	4493      	add	fp, r2
    f7ac:	e754      	b.n	f658 <__aeabi_ddiv+0x3e4>
    f7ae:	4b47      	ldr	r3, [pc, #284]	; (f8cc <__aeabi_ddiv+0x658>)
    f7b0:	18e3      	adds	r3, r4, r3
    f7b2:	2b00      	cmp	r3, #0
    f7b4:	dde5      	ble.n	f782 <__aeabi_ddiv+0x50e>
    f7b6:	2201      	movs	r2, #1
    f7b8:	4252      	negs	r2, r2
    f7ba:	e7f2      	b.n	f7a2 <__aeabi_ddiv+0x52e>
    f7bc:	001d      	movs	r5, r3
    f7be:	e6fa      	b.n	f5b6 <__aeabi_ddiv+0x342>
    f7c0:	469a      	mov	sl, r3
    f7c2:	e71c      	b.n	f5fe <__aeabi_ddiv+0x38a>
    f7c4:	42b0      	cmp	r0, r6
    f7c6:	d839      	bhi.n	f83c <__aeabi_ddiv+0x5c8>
    f7c8:	d06e      	beq.n	f8a8 <__aeabi_ddiv+0x634>
    f7ca:	0011      	movs	r1, r2
    f7cc:	e73a      	b.n	f644 <__aeabi_ddiv+0x3d0>
    f7ce:	9302      	str	r3, [sp, #8]
    f7d0:	e73a      	b.n	f648 <__aeabi_ddiv+0x3d4>
    f7d2:	2a1f      	cmp	r2, #31
    f7d4:	dc3c      	bgt.n	f850 <__aeabi_ddiv+0x5dc>
    f7d6:	2320      	movs	r3, #32
    f7d8:	1a9b      	subs	r3, r3, r2
    f7da:	000c      	movs	r4, r1
    f7dc:	4658      	mov	r0, fp
    f7de:	4099      	lsls	r1, r3
    f7e0:	4098      	lsls	r0, r3
    f7e2:	1e4b      	subs	r3, r1, #1
    f7e4:	4199      	sbcs	r1, r3
    f7e6:	465b      	mov	r3, fp
    f7e8:	40d4      	lsrs	r4, r2
    f7ea:	40d3      	lsrs	r3, r2
    f7ec:	4320      	orrs	r0, r4
    f7ee:	4308      	orrs	r0, r1
    f7f0:	001a      	movs	r2, r3
    f7f2:	0743      	lsls	r3, r0, #29
    f7f4:	d009      	beq.n	f80a <__aeabi_ddiv+0x596>
    f7f6:	230f      	movs	r3, #15
    f7f8:	4003      	ands	r3, r0
    f7fa:	2b04      	cmp	r3, #4
    f7fc:	d005      	beq.n	f80a <__aeabi_ddiv+0x596>
    f7fe:	0001      	movs	r1, r0
    f800:	1d08      	adds	r0, r1, #4
    f802:	4288      	cmp	r0, r1
    f804:	419b      	sbcs	r3, r3
    f806:	425b      	negs	r3, r3
    f808:	18d2      	adds	r2, r2, r3
    f80a:	0213      	lsls	r3, r2, #8
    f80c:	d53a      	bpl.n	f884 <__aeabi_ddiv+0x610>
    f80e:	2301      	movs	r3, #1
    f810:	9a02      	ldr	r2, [sp, #8]
    f812:	2401      	movs	r4, #1
    f814:	401a      	ands	r2, r3
    f816:	2300      	movs	r3, #0
    f818:	4694      	mov	ip, r2
    f81a:	4698      	mov	r8, r3
    f81c:	2200      	movs	r2, #0
    f81e:	e5f7      	b.n	f410 <__aeabi_ddiv+0x19c>
    f820:	2102      	movs	r1, #2
    f822:	4249      	negs	r1, r1
    f824:	468c      	mov	ip, r1
    f826:	9d03      	ldr	r5, [sp, #12]
    f828:	44e3      	add	fp, ip
    f82a:	46ac      	mov	ip, r5
    f82c:	44e2      	add	sl, ip
    f82e:	45aa      	cmp	sl, r5
    f830:	41ad      	sbcs	r5, r5
    f832:	426d      	negs	r5, r5
    f834:	4445      	add	r5, r8
    f836:	18ed      	adds	r5, r5, r3
    f838:	1a2d      	subs	r5, r5, r0
    f83a:	e696      	b.n	f56a <__aeabi_ddiv+0x2f6>
    f83c:	1e8a      	subs	r2, r1, #2
    f83e:	9903      	ldr	r1, [sp, #12]
    f840:	004d      	lsls	r5, r1, #1
    f842:	428d      	cmp	r5, r1
    f844:	4189      	sbcs	r1, r1
    f846:	4249      	negs	r1, r1
    f848:	4441      	add	r1, r8
    f84a:	1876      	adds	r6, r6, r1
    f84c:	9503      	str	r5, [sp, #12]
    f84e:	e78f      	b.n	f770 <__aeabi_ddiv+0x4fc>
    f850:	201f      	movs	r0, #31
    f852:	4240      	negs	r0, r0
    f854:	1ac3      	subs	r3, r0, r3
    f856:	4658      	mov	r0, fp
    f858:	40d8      	lsrs	r0, r3
    f85a:	0003      	movs	r3, r0
    f85c:	2a20      	cmp	r2, #32
    f85e:	d028      	beq.n	f8b2 <__aeabi_ddiv+0x63e>
    f860:	2040      	movs	r0, #64	; 0x40
    f862:	465d      	mov	r5, fp
    f864:	1a82      	subs	r2, r0, r2
    f866:	4095      	lsls	r5, r2
    f868:	4329      	orrs	r1, r5
    f86a:	1e4a      	subs	r2, r1, #1
    f86c:	4191      	sbcs	r1, r2
    f86e:	4319      	orrs	r1, r3
    f870:	2307      	movs	r3, #7
    f872:	2200      	movs	r2, #0
    f874:	400b      	ands	r3, r1
    f876:	d009      	beq.n	f88c <__aeabi_ddiv+0x618>
    f878:	230f      	movs	r3, #15
    f87a:	2200      	movs	r2, #0
    f87c:	400b      	ands	r3, r1
    f87e:	0008      	movs	r0, r1
    f880:	2b04      	cmp	r3, #4
    f882:	d1bd      	bne.n	f800 <__aeabi_ddiv+0x58c>
    f884:	0001      	movs	r1, r0
    f886:	0753      	lsls	r3, r2, #29
    f888:	0252      	lsls	r2, r2, #9
    f88a:	0b12      	lsrs	r2, r2, #12
    f88c:	08c9      	lsrs	r1, r1, #3
    f88e:	4319      	orrs	r1, r3
    f890:	2301      	movs	r3, #1
    f892:	4688      	mov	r8, r1
    f894:	9902      	ldr	r1, [sp, #8]
    f896:	2400      	movs	r4, #0
    f898:	4019      	ands	r1, r3
    f89a:	468c      	mov	ip, r1
    f89c:	e5b8      	b.n	f410 <__aeabi_ddiv+0x19c>
    f89e:	4552      	cmp	r2, sl
    f8a0:	d8be      	bhi.n	f820 <__aeabi_ddiv+0x5ac>
    f8a2:	468b      	mov	fp, r1
    f8a4:	2500      	movs	r5, #0
    f8a6:	e660      	b.n	f56a <__aeabi_ddiv+0x2f6>
    f8a8:	9d03      	ldr	r5, [sp, #12]
    f8aa:	429d      	cmp	r5, r3
    f8ac:	d3c6      	bcc.n	f83c <__aeabi_ddiv+0x5c8>
    f8ae:	0011      	movs	r1, r2
    f8b0:	e762      	b.n	f778 <__aeabi_ddiv+0x504>
    f8b2:	2500      	movs	r5, #0
    f8b4:	e7d8      	b.n	f868 <__aeabi_ddiv+0x5f4>
    f8b6:	2280      	movs	r2, #128	; 0x80
    f8b8:	465b      	mov	r3, fp
    f8ba:	0312      	lsls	r2, r2, #12
    f8bc:	431a      	orrs	r2, r3
    f8be:	9b01      	ldr	r3, [sp, #4]
    f8c0:	0312      	lsls	r2, r2, #12
    f8c2:	0b12      	lsrs	r2, r2, #12
    f8c4:	469c      	mov	ip, r3
    f8c6:	4688      	mov	r8, r1
    f8c8:	4c03      	ldr	r4, [pc, #12]	; (f8d8 <__aeabi_ddiv+0x664>)
    f8ca:	e5a1      	b.n	f410 <__aeabi_ddiv+0x19c>
    f8cc:	000003ff 	.word	0x000003ff
    f8d0:	feffffff 	.word	0xfeffffff
    f8d4:	000007fe 	.word	0x000007fe
    f8d8:	000007ff 	.word	0x000007ff

0000f8dc <__eqdf2>:
    f8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8de:	464f      	mov	r7, r9
    f8e0:	4646      	mov	r6, r8
    f8e2:	46d6      	mov	lr, sl
    f8e4:	005c      	lsls	r4, r3, #1
    f8e6:	b5c0      	push	{r6, r7, lr}
    f8e8:	031f      	lsls	r7, r3, #12
    f8ea:	0fdb      	lsrs	r3, r3, #31
    f8ec:	469a      	mov	sl, r3
    f8ee:	4b17      	ldr	r3, [pc, #92]	; (f94c <__eqdf2+0x70>)
    f8f0:	030e      	lsls	r6, r1, #12
    f8f2:	004d      	lsls	r5, r1, #1
    f8f4:	4684      	mov	ip, r0
    f8f6:	4680      	mov	r8, r0
    f8f8:	0b36      	lsrs	r6, r6, #12
    f8fa:	0d6d      	lsrs	r5, r5, #21
    f8fc:	0fc9      	lsrs	r1, r1, #31
    f8fe:	4691      	mov	r9, r2
    f900:	0b3f      	lsrs	r7, r7, #12
    f902:	0d64      	lsrs	r4, r4, #21
    f904:	2001      	movs	r0, #1
    f906:	429d      	cmp	r5, r3
    f908:	d008      	beq.n	f91c <__eqdf2+0x40>
    f90a:	429c      	cmp	r4, r3
    f90c:	d001      	beq.n	f912 <__eqdf2+0x36>
    f90e:	42a5      	cmp	r5, r4
    f910:	d00b      	beq.n	f92a <__eqdf2+0x4e>
    f912:	bc1c      	pop	{r2, r3, r4}
    f914:	4690      	mov	r8, r2
    f916:	4699      	mov	r9, r3
    f918:	46a2      	mov	sl, r4
    f91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f91c:	4663      	mov	r3, ip
    f91e:	4333      	orrs	r3, r6
    f920:	d1f7      	bne.n	f912 <__eqdf2+0x36>
    f922:	42ac      	cmp	r4, r5
    f924:	d1f5      	bne.n	f912 <__eqdf2+0x36>
    f926:	433a      	orrs	r2, r7
    f928:	d1f3      	bne.n	f912 <__eqdf2+0x36>
    f92a:	2001      	movs	r0, #1
    f92c:	42be      	cmp	r6, r7
    f92e:	d1f0      	bne.n	f912 <__eqdf2+0x36>
    f930:	45c8      	cmp	r8, r9
    f932:	d1ee      	bne.n	f912 <__eqdf2+0x36>
    f934:	4551      	cmp	r1, sl
    f936:	d007      	beq.n	f948 <__eqdf2+0x6c>
    f938:	2d00      	cmp	r5, #0
    f93a:	d1ea      	bne.n	f912 <__eqdf2+0x36>
    f93c:	4663      	mov	r3, ip
    f93e:	431e      	orrs	r6, r3
    f940:	0030      	movs	r0, r6
    f942:	1e46      	subs	r6, r0, #1
    f944:	41b0      	sbcs	r0, r6
    f946:	e7e4      	b.n	f912 <__eqdf2+0x36>
    f948:	2000      	movs	r0, #0
    f94a:	e7e2      	b.n	f912 <__eqdf2+0x36>
    f94c:	000007ff 	.word	0x000007ff

0000f950 <__gedf2>:
    f950:	b5f0      	push	{r4, r5, r6, r7, lr}
    f952:	4645      	mov	r5, r8
    f954:	46de      	mov	lr, fp
    f956:	4657      	mov	r7, sl
    f958:	464e      	mov	r6, r9
    f95a:	b5e0      	push	{r5, r6, r7, lr}
    f95c:	031f      	lsls	r7, r3, #12
    f95e:	0b3d      	lsrs	r5, r7, #12
    f960:	4f2c      	ldr	r7, [pc, #176]	; (fa14 <__gedf2+0xc4>)
    f962:	030e      	lsls	r6, r1, #12
    f964:	004c      	lsls	r4, r1, #1
    f966:	46ab      	mov	fp, r5
    f968:	005d      	lsls	r5, r3, #1
    f96a:	4684      	mov	ip, r0
    f96c:	0b36      	lsrs	r6, r6, #12
    f96e:	0d64      	lsrs	r4, r4, #21
    f970:	0fc9      	lsrs	r1, r1, #31
    f972:	4690      	mov	r8, r2
    f974:	0d6d      	lsrs	r5, r5, #21
    f976:	0fdb      	lsrs	r3, r3, #31
    f978:	42bc      	cmp	r4, r7
    f97a:	d02a      	beq.n	f9d2 <__gedf2+0x82>
    f97c:	4f25      	ldr	r7, [pc, #148]	; (fa14 <__gedf2+0xc4>)
    f97e:	42bd      	cmp	r5, r7
    f980:	d02d      	beq.n	f9de <__gedf2+0x8e>
    f982:	2c00      	cmp	r4, #0
    f984:	d10f      	bne.n	f9a6 <__gedf2+0x56>
    f986:	4330      	orrs	r0, r6
    f988:	0007      	movs	r7, r0
    f98a:	4681      	mov	r9, r0
    f98c:	4278      	negs	r0, r7
    f98e:	4178      	adcs	r0, r7
    f990:	b2c0      	uxtb	r0, r0
    f992:	2d00      	cmp	r5, #0
    f994:	d117      	bne.n	f9c6 <__gedf2+0x76>
    f996:	465f      	mov	r7, fp
    f998:	433a      	orrs	r2, r7
    f99a:	d114      	bne.n	f9c6 <__gedf2+0x76>
    f99c:	464b      	mov	r3, r9
    f99e:	2000      	movs	r0, #0
    f9a0:	2b00      	cmp	r3, #0
    f9a2:	d00a      	beq.n	f9ba <__gedf2+0x6a>
    f9a4:	e006      	b.n	f9b4 <__gedf2+0x64>
    f9a6:	2d00      	cmp	r5, #0
    f9a8:	d102      	bne.n	f9b0 <__gedf2+0x60>
    f9aa:	4658      	mov	r0, fp
    f9ac:	4302      	orrs	r2, r0
    f9ae:	d001      	beq.n	f9b4 <__gedf2+0x64>
    f9b0:	4299      	cmp	r1, r3
    f9b2:	d018      	beq.n	f9e6 <__gedf2+0x96>
    f9b4:	4248      	negs	r0, r1
    f9b6:	2101      	movs	r1, #1
    f9b8:	4308      	orrs	r0, r1
    f9ba:	bc3c      	pop	{r2, r3, r4, r5}
    f9bc:	4690      	mov	r8, r2
    f9be:	4699      	mov	r9, r3
    f9c0:	46a2      	mov	sl, r4
    f9c2:	46ab      	mov	fp, r5
    f9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9c6:	2800      	cmp	r0, #0
    f9c8:	d0f2      	beq.n	f9b0 <__gedf2+0x60>
    f9ca:	2001      	movs	r0, #1
    f9cc:	3b01      	subs	r3, #1
    f9ce:	4318      	orrs	r0, r3
    f9d0:	e7f3      	b.n	f9ba <__gedf2+0x6a>
    f9d2:	0037      	movs	r7, r6
    f9d4:	4307      	orrs	r7, r0
    f9d6:	d0d1      	beq.n	f97c <__gedf2+0x2c>
    f9d8:	2002      	movs	r0, #2
    f9da:	4240      	negs	r0, r0
    f9dc:	e7ed      	b.n	f9ba <__gedf2+0x6a>
    f9de:	465f      	mov	r7, fp
    f9e0:	4317      	orrs	r7, r2
    f9e2:	d0ce      	beq.n	f982 <__gedf2+0x32>
    f9e4:	e7f8      	b.n	f9d8 <__gedf2+0x88>
    f9e6:	42ac      	cmp	r4, r5
    f9e8:	dce4      	bgt.n	f9b4 <__gedf2+0x64>
    f9ea:	da03      	bge.n	f9f4 <__gedf2+0xa4>
    f9ec:	1e48      	subs	r0, r1, #1
    f9ee:	2101      	movs	r1, #1
    f9f0:	4308      	orrs	r0, r1
    f9f2:	e7e2      	b.n	f9ba <__gedf2+0x6a>
    f9f4:	455e      	cmp	r6, fp
    f9f6:	d8dd      	bhi.n	f9b4 <__gedf2+0x64>
    f9f8:	d006      	beq.n	fa08 <__gedf2+0xb8>
    f9fa:	2000      	movs	r0, #0
    f9fc:	455e      	cmp	r6, fp
    f9fe:	d2dc      	bcs.n	f9ba <__gedf2+0x6a>
    fa00:	2301      	movs	r3, #1
    fa02:	1e48      	subs	r0, r1, #1
    fa04:	4318      	orrs	r0, r3
    fa06:	e7d8      	b.n	f9ba <__gedf2+0x6a>
    fa08:	45c4      	cmp	ip, r8
    fa0a:	d8d3      	bhi.n	f9b4 <__gedf2+0x64>
    fa0c:	2000      	movs	r0, #0
    fa0e:	45c4      	cmp	ip, r8
    fa10:	d3f6      	bcc.n	fa00 <__gedf2+0xb0>
    fa12:	e7d2      	b.n	f9ba <__gedf2+0x6a>
    fa14:	000007ff 	.word	0x000007ff

0000fa18 <__ledf2>:
    fa18:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa1a:	464e      	mov	r6, r9
    fa1c:	4645      	mov	r5, r8
    fa1e:	46de      	mov	lr, fp
    fa20:	4657      	mov	r7, sl
    fa22:	005c      	lsls	r4, r3, #1
    fa24:	b5e0      	push	{r5, r6, r7, lr}
    fa26:	031f      	lsls	r7, r3, #12
    fa28:	0fdb      	lsrs	r3, r3, #31
    fa2a:	4699      	mov	r9, r3
    fa2c:	4b2a      	ldr	r3, [pc, #168]	; (fad8 <__ledf2+0xc0>)
    fa2e:	030e      	lsls	r6, r1, #12
    fa30:	004d      	lsls	r5, r1, #1
    fa32:	0fc9      	lsrs	r1, r1, #31
    fa34:	4684      	mov	ip, r0
    fa36:	0b36      	lsrs	r6, r6, #12
    fa38:	0d6d      	lsrs	r5, r5, #21
    fa3a:	468b      	mov	fp, r1
    fa3c:	4690      	mov	r8, r2
    fa3e:	0b3f      	lsrs	r7, r7, #12
    fa40:	0d64      	lsrs	r4, r4, #21
    fa42:	429d      	cmp	r5, r3
    fa44:	d020      	beq.n	fa88 <__ledf2+0x70>
    fa46:	4b24      	ldr	r3, [pc, #144]	; (fad8 <__ledf2+0xc0>)
    fa48:	429c      	cmp	r4, r3
    fa4a:	d022      	beq.n	fa92 <__ledf2+0x7a>
    fa4c:	2d00      	cmp	r5, #0
    fa4e:	d112      	bne.n	fa76 <__ledf2+0x5e>
    fa50:	4330      	orrs	r0, r6
    fa52:	4243      	negs	r3, r0
    fa54:	4143      	adcs	r3, r0
    fa56:	b2db      	uxtb	r3, r3
    fa58:	2c00      	cmp	r4, #0
    fa5a:	d01f      	beq.n	fa9c <__ledf2+0x84>
    fa5c:	2b00      	cmp	r3, #0
    fa5e:	d00c      	beq.n	fa7a <__ledf2+0x62>
    fa60:	464b      	mov	r3, r9
    fa62:	2001      	movs	r0, #1
    fa64:	3b01      	subs	r3, #1
    fa66:	4303      	orrs	r3, r0
    fa68:	0018      	movs	r0, r3
    fa6a:	bc3c      	pop	{r2, r3, r4, r5}
    fa6c:	4690      	mov	r8, r2
    fa6e:	4699      	mov	r9, r3
    fa70:	46a2      	mov	sl, r4
    fa72:	46ab      	mov	fp, r5
    fa74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa76:	2c00      	cmp	r4, #0
    fa78:	d016      	beq.n	faa8 <__ledf2+0x90>
    fa7a:	45cb      	cmp	fp, r9
    fa7c:	d017      	beq.n	faae <__ledf2+0x96>
    fa7e:	465b      	mov	r3, fp
    fa80:	4259      	negs	r1, r3
    fa82:	2301      	movs	r3, #1
    fa84:	430b      	orrs	r3, r1
    fa86:	e7ef      	b.n	fa68 <__ledf2+0x50>
    fa88:	0031      	movs	r1, r6
    fa8a:	2302      	movs	r3, #2
    fa8c:	4301      	orrs	r1, r0
    fa8e:	d1eb      	bne.n	fa68 <__ledf2+0x50>
    fa90:	e7d9      	b.n	fa46 <__ledf2+0x2e>
    fa92:	0039      	movs	r1, r7
    fa94:	2302      	movs	r3, #2
    fa96:	4311      	orrs	r1, r2
    fa98:	d1e6      	bne.n	fa68 <__ledf2+0x50>
    fa9a:	e7d7      	b.n	fa4c <__ledf2+0x34>
    fa9c:	433a      	orrs	r2, r7
    fa9e:	d1dd      	bne.n	fa5c <__ledf2+0x44>
    faa0:	2300      	movs	r3, #0
    faa2:	2800      	cmp	r0, #0
    faa4:	d0e0      	beq.n	fa68 <__ledf2+0x50>
    faa6:	e7ea      	b.n	fa7e <__ledf2+0x66>
    faa8:	433a      	orrs	r2, r7
    faaa:	d1e6      	bne.n	fa7a <__ledf2+0x62>
    faac:	e7e7      	b.n	fa7e <__ledf2+0x66>
    faae:	42a5      	cmp	r5, r4
    fab0:	dce5      	bgt.n	fa7e <__ledf2+0x66>
    fab2:	db05      	blt.n	fac0 <__ledf2+0xa8>
    fab4:	42be      	cmp	r6, r7
    fab6:	d8e2      	bhi.n	fa7e <__ledf2+0x66>
    fab8:	d007      	beq.n	faca <__ledf2+0xb2>
    faba:	2300      	movs	r3, #0
    fabc:	42be      	cmp	r6, r7
    fabe:	d2d3      	bcs.n	fa68 <__ledf2+0x50>
    fac0:	4659      	mov	r1, fp
    fac2:	2301      	movs	r3, #1
    fac4:	3901      	subs	r1, #1
    fac6:	430b      	orrs	r3, r1
    fac8:	e7ce      	b.n	fa68 <__ledf2+0x50>
    faca:	45c4      	cmp	ip, r8
    facc:	d8d7      	bhi.n	fa7e <__ledf2+0x66>
    face:	2300      	movs	r3, #0
    fad0:	45c4      	cmp	ip, r8
    fad2:	d3f5      	bcc.n	fac0 <__ledf2+0xa8>
    fad4:	e7c8      	b.n	fa68 <__ledf2+0x50>
    fad6:	46c0      	nop			; (mov r8, r8)
    fad8:	000007ff 	.word	0x000007ff

0000fadc <__aeabi_dmul>:
    fadc:	b5f0      	push	{r4, r5, r6, r7, lr}
    fade:	4657      	mov	r7, sl
    fae0:	4645      	mov	r5, r8
    fae2:	46de      	mov	lr, fp
    fae4:	464e      	mov	r6, r9
    fae6:	b5e0      	push	{r5, r6, r7, lr}
    fae8:	030c      	lsls	r4, r1, #12
    faea:	4698      	mov	r8, r3
    faec:	004e      	lsls	r6, r1, #1
    faee:	0b23      	lsrs	r3, r4, #12
    faf0:	b087      	sub	sp, #28
    faf2:	0007      	movs	r7, r0
    faf4:	4692      	mov	sl, r2
    faf6:	469b      	mov	fp, r3
    faf8:	0d76      	lsrs	r6, r6, #21
    fafa:	0fcd      	lsrs	r5, r1, #31
    fafc:	2e00      	cmp	r6, #0
    fafe:	d06b      	beq.n	fbd8 <__aeabi_dmul+0xfc>
    fb00:	4b6d      	ldr	r3, [pc, #436]	; (fcb8 <__aeabi_dmul+0x1dc>)
    fb02:	429e      	cmp	r6, r3
    fb04:	d035      	beq.n	fb72 <__aeabi_dmul+0x96>
    fb06:	2480      	movs	r4, #128	; 0x80
    fb08:	465b      	mov	r3, fp
    fb0a:	0f42      	lsrs	r2, r0, #29
    fb0c:	0424      	lsls	r4, r4, #16
    fb0e:	00db      	lsls	r3, r3, #3
    fb10:	4314      	orrs	r4, r2
    fb12:	431c      	orrs	r4, r3
    fb14:	00c3      	lsls	r3, r0, #3
    fb16:	4699      	mov	r9, r3
    fb18:	4b68      	ldr	r3, [pc, #416]	; (fcbc <__aeabi_dmul+0x1e0>)
    fb1a:	46a3      	mov	fp, r4
    fb1c:	469c      	mov	ip, r3
    fb1e:	2300      	movs	r3, #0
    fb20:	2700      	movs	r7, #0
    fb22:	4466      	add	r6, ip
    fb24:	9302      	str	r3, [sp, #8]
    fb26:	4643      	mov	r3, r8
    fb28:	031c      	lsls	r4, r3, #12
    fb2a:	005a      	lsls	r2, r3, #1
    fb2c:	0fdb      	lsrs	r3, r3, #31
    fb2e:	4650      	mov	r0, sl
    fb30:	0b24      	lsrs	r4, r4, #12
    fb32:	0d52      	lsrs	r2, r2, #21
    fb34:	4698      	mov	r8, r3
    fb36:	d100      	bne.n	fb3a <__aeabi_dmul+0x5e>
    fb38:	e076      	b.n	fc28 <__aeabi_dmul+0x14c>
    fb3a:	4b5f      	ldr	r3, [pc, #380]	; (fcb8 <__aeabi_dmul+0x1dc>)
    fb3c:	429a      	cmp	r2, r3
    fb3e:	d06d      	beq.n	fc1c <__aeabi_dmul+0x140>
    fb40:	2380      	movs	r3, #128	; 0x80
    fb42:	0f41      	lsrs	r1, r0, #29
    fb44:	041b      	lsls	r3, r3, #16
    fb46:	430b      	orrs	r3, r1
    fb48:	495c      	ldr	r1, [pc, #368]	; (fcbc <__aeabi_dmul+0x1e0>)
    fb4a:	00e4      	lsls	r4, r4, #3
    fb4c:	468c      	mov	ip, r1
    fb4e:	431c      	orrs	r4, r3
    fb50:	00c3      	lsls	r3, r0, #3
    fb52:	2000      	movs	r0, #0
    fb54:	4462      	add	r2, ip
    fb56:	4641      	mov	r1, r8
    fb58:	18b6      	adds	r6, r6, r2
    fb5a:	4069      	eors	r1, r5
    fb5c:	1c72      	adds	r2, r6, #1
    fb5e:	9101      	str	r1, [sp, #4]
    fb60:	4694      	mov	ip, r2
    fb62:	4307      	orrs	r7, r0
    fb64:	2f0f      	cmp	r7, #15
    fb66:	d900      	bls.n	fb6a <__aeabi_dmul+0x8e>
    fb68:	e0b0      	b.n	fccc <__aeabi_dmul+0x1f0>
    fb6a:	4a55      	ldr	r2, [pc, #340]	; (fcc0 <__aeabi_dmul+0x1e4>)
    fb6c:	00bf      	lsls	r7, r7, #2
    fb6e:	59d2      	ldr	r2, [r2, r7]
    fb70:	4697      	mov	pc, r2
    fb72:	465b      	mov	r3, fp
    fb74:	4303      	orrs	r3, r0
    fb76:	4699      	mov	r9, r3
    fb78:	d000      	beq.n	fb7c <__aeabi_dmul+0xa0>
    fb7a:	e087      	b.n	fc8c <__aeabi_dmul+0x1b0>
    fb7c:	2300      	movs	r3, #0
    fb7e:	469b      	mov	fp, r3
    fb80:	3302      	adds	r3, #2
    fb82:	2708      	movs	r7, #8
    fb84:	9302      	str	r3, [sp, #8]
    fb86:	e7ce      	b.n	fb26 <__aeabi_dmul+0x4a>
    fb88:	4642      	mov	r2, r8
    fb8a:	9201      	str	r2, [sp, #4]
    fb8c:	2802      	cmp	r0, #2
    fb8e:	d067      	beq.n	fc60 <__aeabi_dmul+0x184>
    fb90:	2803      	cmp	r0, #3
    fb92:	d100      	bne.n	fb96 <__aeabi_dmul+0xba>
    fb94:	e20e      	b.n	ffb4 <__aeabi_dmul+0x4d8>
    fb96:	2801      	cmp	r0, #1
    fb98:	d000      	beq.n	fb9c <__aeabi_dmul+0xc0>
    fb9a:	e162      	b.n	fe62 <__aeabi_dmul+0x386>
    fb9c:	2300      	movs	r3, #0
    fb9e:	2400      	movs	r4, #0
    fba0:	2200      	movs	r2, #0
    fba2:	4699      	mov	r9, r3
    fba4:	9901      	ldr	r1, [sp, #4]
    fba6:	4001      	ands	r1, r0
    fba8:	b2cd      	uxtb	r5, r1
    fbaa:	2100      	movs	r1, #0
    fbac:	0312      	lsls	r2, r2, #12
    fbae:	0d0b      	lsrs	r3, r1, #20
    fbb0:	0b12      	lsrs	r2, r2, #12
    fbb2:	051b      	lsls	r3, r3, #20
    fbb4:	4313      	orrs	r3, r2
    fbb6:	4a43      	ldr	r2, [pc, #268]	; (fcc4 <__aeabi_dmul+0x1e8>)
    fbb8:	0524      	lsls	r4, r4, #20
    fbba:	4013      	ands	r3, r2
    fbbc:	431c      	orrs	r4, r3
    fbbe:	0064      	lsls	r4, r4, #1
    fbc0:	07ed      	lsls	r5, r5, #31
    fbc2:	0864      	lsrs	r4, r4, #1
    fbc4:	432c      	orrs	r4, r5
    fbc6:	4648      	mov	r0, r9
    fbc8:	0021      	movs	r1, r4
    fbca:	b007      	add	sp, #28
    fbcc:	bc3c      	pop	{r2, r3, r4, r5}
    fbce:	4690      	mov	r8, r2
    fbd0:	4699      	mov	r9, r3
    fbd2:	46a2      	mov	sl, r4
    fbd4:	46ab      	mov	fp, r5
    fbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fbd8:	4303      	orrs	r3, r0
    fbda:	4699      	mov	r9, r3
    fbdc:	d04f      	beq.n	fc7e <__aeabi_dmul+0x1a2>
    fbde:	465b      	mov	r3, fp
    fbe0:	2b00      	cmp	r3, #0
    fbe2:	d100      	bne.n	fbe6 <__aeabi_dmul+0x10a>
    fbe4:	e189      	b.n	fefa <__aeabi_dmul+0x41e>
    fbe6:	4658      	mov	r0, fp
    fbe8:	f000 fd9a 	bl	10720 <__clzsi2>
    fbec:	0003      	movs	r3, r0
    fbee:	3b0b      	subs	r3, #11
    fbf0:	2b1c      	cmp	r3, #28
    fbf2:	dd00      	ble.n	fbf6 <__aeabi_dmul+0x11a>
    fbf4:	e17a      	b.n	feec <__aeabi_dmul+0x410>
    fbf6:	221d      	movs	r2, #29
    fbf8:	1ad3      	subs	r3, r2, r3
    fbfa:	003a      	movs	r2, r7
    fbfc:	0001      	movs	r1, r0
    fbfe:	465c      	mov	r4, fp
    fc00:	40da      	lsrs	r2, r3
    fc02:	3908      	subs	r1, #8
    fc04:	408c      	lsls	r4, r1
    fc06:	0013      	movs	r3, r2
    fc08:	408f      	lsls	r7, r1
    fc0a:	4323      	orrs	r3, r4
    fc0c:	469b      	mov	fp, r3
    fc0e:	46b9      	mov	r9, r7
    fc10:	2300      	movs	r3, #0
    fc12:	4e2d      	ldr	r6, [pc, #180]	; (fcc8 <__aeabi_dmul+0x1ec>)
    fc14:	2700      	movs	r7, #0
    fc16:	1a36      	subs	r6, r6, r0
    fc18:	9302      	str	r3, [sp, #8]
    fc1a:	e784      	b.n	fb26 <__aeabi_dmul+0x4a>
    fc1c:	4653      	mov	r3, sl
    fc1e:	4323      	orrs	r3, r4
    fc20:	d12a      	bne.n	fc78 <__aeabi_dmul+0x19c>
    fc22:	2400      	movs	r4, #0
    fc24:	2002      	movs	r0, #2
    fc26:	e796      	b.n	fb56 <__aeabi_dmul+0x7a>
    fc28:	4653      	mov	r3, sl
    fc2a:	4323      	orrs	r3, r4
    fc2c:	d020      	beq.n	fc70 <__aeabi_dmul+0x194>
    fc2e:	2c00      	cmp	r4, #0
    fc30:	d100      	bne.n	fc34 <__aeabi_dmul+0x158>
    fc32:	e157      	b.n	fee4 <__aeabi_dmul+0x408>
    fc34:	0020      	movs	r0, r4
    fc36:	f000 fd73 	bl	10720 <__clzsi2>
    fc3a:	0003      	movs	r3, r0
    fc3c:	3b0b      	subs	r3, #11
    fc3e:	2b1c      	cmp	r3, #28
    fc40:	dd00      	ble.n	fc44 <__aeabi_dmul+0x168>
    fc42:	e149      	b.n	fed8 <__aeabi_dmul+0x3fc>
    fc44:	211d      	movs	r1, #29
    fc46:	1acb      	subs	r3, r1, r3
    fc48:	4651      	mov	r1, sl
    fc4a:	0002      	movs	r2, r0
    fc4c:	40d9      	lsrs	r1, r3
    fc4e:	4653      	mov	r3, sl
    fc50:	3a08      	subs	r2, #8
    fc52:	4094      	lsls	r4, r2
    fc54:	4093      	lsls	r3, r2
    fc56:	430c      	orrs	r4, r1
    fc58:	4a1b      	ldr	r2, [pc, #108]	; (fcc8 <__aeabi_dmul+0x1ec>)
    fc5a:	1a12      	subs	r2, r2, r0
    fc5c:	2000      	movs	r0, #0
    fc5e:	e77a      	b.n	fb56 <__aeabi_dmul+0x7a>
    fc60:	2501      	movs	r5, #1
    fc62:	9b01      	ldr	r3, [sp, #4]
    fc64:	4c14      	ldr	r4, [pc, #80]	; (fcb8 <__aeabi_dmul+0x1dc>)
    fc66:	401d      	ands	r5, r3
    fc68:	2300      	movs	r3, #0
    fc6a:	2200      	movs	r2, #0
    fc6c:	4699      	mov	r9, r3
    fc6e:	e79c      	b.n	fbaa <__aeabi_dmul+0xce>
    fc70:	2400      	movs	r4, #0
    fc72:	2200      	movs	r2, #0
    fc74:	2001      	movs	r0, #1
    fc76:	e76e      	b.n	fb56 <__aeabi_dmul+0x7a>
    fc78:	4653      	mov	r3, sl
    fc7a:	2003      	movs	r0, #3
    fc7c:	e76b      	b.n	fb56 <__aeabi_dmul+0x7a>
    fc7e:	2300      	movs	r3, #0
    fc80:	469b      	mov	fp, r3
    fc82:	3301      	adds	r3, #1
    fc84:	2704      	movs	r7, #4
    fc86:	2600      	movs	r6, #0
    fc88:	9302      	str	r3, [sp, #8]
    fc8a:	e74c      	b.n	fb26 <__aeabi_dmul+0x4a>
    fc8c:	2303      	movs	r3, #3
    fc8e:	4681      	mov	r9, r0
    fc90:	270c      	movs	r7, #12
    fc92:	9302      	str	r3, [sp, #8]
    fc94:	e747      	b.n	fb26 <__aeabi_dmul+0x4a>
    fc96:	2280      	movs	r2, #128	; 0x80
    fc98:	2300      	movs	r3, #0
    fc9a:	2500      	movs	r5, #0
    fc9c:	0312      	lsls	r2, r2, #12
    fc9e:	4699      	mov	r9, r3
    fca0:	4c05      	ldr	r4, [pc, #20]	; (fcb8 <__aeabi_dmul+0x1dc>)
    fca2:	e782      	b.n	fbaa <__aeabi_dmul+0xce>
    fca4:	465c      	mov	r4, fp
    fca6:	464b      	mov	r3, r9
    fca8:	9802      	ldr	r0, [sp, #8]
    fcaa:	e76f      	b.n	fb8c <__aeabi_dmul+0xb0>
    fcac:	465c      	mov	r4, fp
    fcae:	464b      	mov	r3, r9
    fcb0:	9501      	str	r5, [sp, #4]
    fcb2:	9802      	ldr	r0, [sp, #8]
    fcb4:	e76a      	b.n	fb8c <__aeabi_dmul+0xb0>
    fcb6:	46c0      	nop			; (mov r8, r8)
    fcb8:	000007ff 	.word	0x000007ff
    fcbc:	fffffc01 	.word	0xfffffc01
    fcc0:	00014158 	.word	0x00014158
    fcc4:	800fffff 	.word	0x800fffff
    fcc8:	fffffc0d 	.word	0xfffffc0d
    fccc:	464a      	mov	r2, r9
    fcce:	4649      	mov	r1, r9
    fcd0:	0c17      	lsrs	r7, r2, #16
    fcd2:	0c1a      	lsrs	r2, r3, #16
    fcd4:	041b      	lsls	r3, r3, #16
    fcd6:	0c1b      	lsrs	r3, r3, #16
    fcd8:	0408      	lsls	r0, r1, #16
    fcda:	0019      	movs	r1, r3
    fcdc:	0c00      	lsrs	r0, r0, #16
    fcde:	4341      	muls	r1, r0
    fce0:	0015      	movs	r5, r2
    fce2:	4688      	mov	r8, r1
    fce4:	0019      	movs	r1, r3
    fce6:	437d      	muls	r5, r7
    fce8:	4379      	muls	r1, r7
    fcea:	9503      	str	r5, [sp, #12]
    fcec:	4689      	mov	r9, r1
    fcee:	0029      	movs	r1, r5
    fcf0:	0015      	movs	r5, r2
    fcf2:	4345      	muls	r5, r0
    fcf4:	444d      	add	r5, r9
    fcf6:	9502      	str	r5, [sp, #8]
    fcf8:	4645      	mov	r5, r8
    fcfa:	0c2d      	lsrs	r5, r5, #16
    fcfc:	46aa      	mov	sl, r5
    fcfe:	9d02      	ldr	r5, [sp, #8]
    fd00:	4455      	add	r5, sl
    fd02:	45a9      	cmp	r9, r5
    fd04:	d906      	bls.n	fd14 <__aeabi_dmul+0x238>
    fd06:	468a      	mov	sl, r1
    fd08:	2180      	movs	r1, #128	; 0x80
    fd0a:	0249      	lsls	r1, r1, #9
    fd0c:	4689      	mov	r9, r1
    fd0e:	44ca      	add	sl, r9
    fd10:	4651      	mov	r1, sl
    fd12:	9103      	str	r1, [sp, #12]
    fd14:	0c29      	lsrs	r1, r5, #16
    fd16:	9104      	str	r1, [sp, #16]
    fd18:	4641      	mov	r1, r8
    fd1a:	0409      	lsls	r1, r1, #16
    fd1c:	042d      	lsls	r5, r5, #16
    fd1e:	0c09      	lsrs	r1, r1, #16
    fd20:	4688      	mov	r8, r1
    fd22:	0029      	movs	r1, r5
    fd24:	0c25      	lsrs	r5, r4, #16
    fd26:	0424      	lsls	r4, r4, #16
    fd28:	4441      	add	r1, r8
    fd2a:	0c24      	lsrs	r4, r4, #16
    fd2c:	9105      	str	r1, [sp, #20]
    fd2e:	0021      	movs	r1, r4
    fd30:	4341      	muls	r1, r0
    fd32:	4688      	mov	r8, r1
    fd34:	0021      	movs	r1, r4
    fd36:	4379      	muls	r1, r7
    fd38:	468a      	mov	sl, r1
    fd3a:	4368      	muls	r0, r5
    fd3c:	4641      	mov	r1, r8
    fd3e:	4450      	add	r0, sl
    fd40:	4681      	mov	r9, r0
    fd42:	0c08      	lsrs	r0, r1, #16
    fd44:	4448      	add	r0, r9
    fd46:	436f      	muls	r7, r5
    fd48:	4582      	cmp	sl, r0
    fd4a:	d903      	bls.n	fd54 <__aeabi_dmul+0x278>
    fd4c:	2180      	movs	r1, #128	; 0x80
    fd4e:	0249      	lsls	r1, r1, #9
    fd50:	4689      	mov	r9, r1
    fd52:	444f      	add	r7, r9
    fd54:	0c01      	lsrs	r1, r0, #16
    fd56:	4689      	mov	r9, r1
    fd58:	0039      	movs	r1, r7
    fd5a:	4449      	add	r1, r9
    fd5c:	9102      	str	r1, [sp, #8]
    fd5e:	4641      	mov	r1, r8
    fd60:	040f      	lsls	r7, r1, #16
    fd62:	9904      	ldr	r1, [sp, #16]
    fd64:	0c3f      	lsrs	r7, r7, #16
    fd66:	4688      	mov	r8, r1
    fd68:	0400      	lsls	r0, r0, #16
    fd6a:	19c0      	adds	r0, r0, r7
    fd6c:	4480      	add	r8, r0
    fd6e:	4641      	mov	r1, r8
    fd70:	9104      	str	r1, [sp, #16]
    fd72:	4659      	mov	r1, fp
    fd74:	0c0f      	lsrs	r7, r1, #16
    fd76:	0409      	lsls	r1, r1, #16
    fd78:	0c09      	lsrs	r1, r1, #16
    fd7a:	4688      	mov	r8, r1
    fd7c:	4359      	muls	r1, r3
    fd7e:	468a      	mov	sl, r1
    fd80:	0039      	movs	r1, r7
    fd82:	4351      	muls	r1, r2
    fd84:	4689      	mov	r9, r1
    fd86:	4641      	mov	r1, r8
    fd88:	434a      	muls	r2, r1
    fd8a:	4651      	mov	r1, sl
    fd8c:	0c09      	lsrs	r1, r1, #16
    fd8e:	468b      	mov	fp, r1
    fd90:	437b      	muls	r3, r7
    fd92:	18d2      	adds	r2, r2, r3
    fd94:	445a      	add	r2, fp
    fd96:	4293      	cmp	r3, r2
    fd98:	d903      	bls.n	fda2 <__aeabi_dmul+0x2c6>
    fd9a:	2380      	movs	r3, #128	; 0x80
    fd9c:	025b      	lsls	r3, r3, #9
    fd9e:	469b      	mov	fp, r3
    fda0:	44d9      	add	r9, fp
    fda2:	4651      	mov	r1, sl
    fda4:	0409      	lsls	r1, r1, #16
    fda6:	0c09      	lsrs	r1, r1, #16
    fda8:	468a      	mov	sl, r1
    fdaa:	4641      	mov	r1, r8
    fdac:	4361      	muls	r1, r4
    fdae:	437c      	muls	r4, r7
    fdb0:	0c13      	lsrs	r3, r2, #16
    fdb2:	0412      	lsls	r2, r2, #16
    fdb4:	444b      	add	r3, r9
    fdb6:	4452      	add	r2, sl
    fdb8:	46a1      	mov	r9, r4
    fdba:	468a      	mov	sl, r1
    fdbc:	003c      	movs	r4, r7
    fdbe:	4641      	mov	r1, r8
    fdc0:	436c      	muls	r4, r5
    fdc2:	434d      	muls	r5, r1
    fdc4:	4651      	mov	r1, sl
    fdc6:	444d      	add	r5, r9
    fdc8:	0c0f      	lsrs	r7, r1, #16
    fdca:	197d      	adds	r5, r7, r5
    fdcc:	45a9      	cmp	r9, r5
    fdce:	d903      	bls.n	fdd8 <__aeabi_dmul+0x2fc>
    fdd0:	2180      	movs	r1, #128	; 0x80
    fdd2:	0249      	lsls	r1, r1, #9
    fdd4:	4688      	mov	r8, r1
    fdd6:	4444      	add	r4, r8
    fdd8:	9f04      	ldr	r7, [sp, #16]
    fdda:	9903      	ldr	r1, [sp, #12]
    fddc:	46b8      	mov	r8, r7
    fdde:	4441      	add	r1, r8
    fde0:	468b      	mov	fp, r1
    fde2:	4583      	cmp	fp, r0
    fde4:	4180      	sbcs	r0, r0
    fde6:	4241      	negs	r1, r0
    fde8:	4688      	mov	r8, r1
    fdea:	4651      	mov	r1, sl
    fdec:	0408      	lsls	r0, r1, #16
    fdee:	042f      	lsls	r7, r5, #16
    fdf0:	0c00      	lsrs	r0, r0, #16
    fdf2:	183f      	adds	r7, r7, r0
    fdf4:	4658      	mov	r0, fp
    fdf6:	9902      	ldr	r1, [sp, #8]
    fdf8:	1810      	adds	r0, r2, r0
    fdfa:	4689      	mov	r9, r1
    fdfc:	4290      	cmp	r0, r2
    fdfe:	4192      	sbcs	r2, r2
    fe00:	444f      	add	r7, r9
    fe02:	46ba      	mov	sl, r7
    fe04:	4252      	negs	r2, r2
    fe06:	4699      	mov	r9, r3
    fe08:	4693      	mov	fp, r2
    fe0a:	44c2      	add	sl, r8
    fe0c:	44d1      	add	r9, sl
    fe0e:	44cb      	add	fp, r9
    fe10:	428f      	cmp	r7, r1
    fe12:	41bf      	sbcs	r7, r7
    fe14:	45c2      	cmp	sl, r8
    fe16:	4189      	sbcs	r1, r1
    fe18:	4599      	cmp	r9, r3
    fe1a:	419b      	sbcs	r3, r3
    fe1c:	4593      	cmp	fp, r2
    fe1e:	4192      	sbcs	r2, r2
    fe20:	427f      	negs	r7, r7
    fe22:	4249      	negs	r1, r1
    fe24:	0c2d      	lsrs	r5, r5, #16
    fe26:	4252      	negs	r2, r2
    fe28:	430f      	orrs	r7, r1
    fe2a:	425b      	negs	r3, r3
    fe2c:	4313      	orrs	r3, r2
    fe2e:	197f      	adds	r7, r7, r5
    fe30:	18ff      	adds	r7, r7, r3
    fe32:	465b      	mov	r3, fp
    fe34:	193c      	adds	r4, r7, r4
    fe36:	0ddb      	lsrs	r3, r3, #23
    fe38:	9a05      	ldr	r2, [sp, #20]
    fe3a:	0264      	lsls	r4, r4, #9
    fe3c:	431c      	orrs	r4, r3
    fe3e:	0243      	lsls	r3, r0, #9
    fe40:	4313      	orrs	r3, r2
    fe42:	1e5d      	subs	r5, r3, #1
    fe44:	41ab      	sbcs	r3, r5
    fe46:	465a      	mov	r2, fp
    fe48:	0dc0      	lsrs	r0, r0, #23
    fe4a:	4303      	orrs	r3, r0
    fe4c:	0252      	lsls	r2, r2, #9
    fe4e:	4313      	orrs	r3, r2
    fe50:	01e2      	lsls	r2, r4, #7
    fe52:	d556      	bpl.n	ff02 <__aeabi_dmul+0x426>
    fe54:	2001      	movs	r0, #1
    fe56:	085a      	lsrs	r2, r3, #1
    fe58:	4003      	ands	r3, r0
    fe5a:	4313      	orrs	r3, r2
    fe5c:	07e2      	lsls	r2, r4, #31
    fe5e:	4313      	orrs	r3, r2
    fe60:	0864      	lsrs	r4, r4, #1
    fe62:	485a      	ldr	r0, [pc, #360]	; (ffcc <__aeabi_dmul+0x4f0>)
    fe64:	4460      	add	r0, ip
    fe66:	2800      	cmp	r0, #0
    fe68:	dd4d      	ble.n	ff06 <__aeabi_dmul+0x42a>
    fe6a:	075a      	lsls	r2, r3, #29
    fe6c:	d009      	beq.n	fe82 <__aeabi_dmul+0x3a6>
    fe6e:	220f      	movs	r2, #15
    fe70:	401a      	ands	r2, r3
    fe72:	2a04      	cmp	r2, #4
    fe74:	d005      	beq.n	fe82 <__aeabi_dmul+0x3a6>
    fe76:	1d1a      	adds	r2, r3, #4
    fe78:	429a      	cmp	r2, r3
    fe7a:	419b      	sbcs	r3, r3
    fe7c:	425b      	negs	r3, r3
    fe7e:	18e4      	adds	r4, r4, r3
    fe80:	0013      	movs	r3, r2
    fe82:	01e2      	lsls	r2, r4, #7
    fe84:	d504      	bpl.n	fe90 <__aeabi_dmul+0x3b4>
    fe86:	2080      	movs	r0, #128	; 0x80
    fe88:	4a51      	ldr	r2, [pc, #324]	; (ffd0 <__aeabi_dmul+0x4f4>)
    fe8a:	00c0      	lsls	r0, r0, #3
    fe8c:	4014      	ands	r4, r2
    fe8e:	4460      	add	r0, ip
    fe90:	4a50      	ldr	r2, [pc, #320]	; (ffd4 <__aeabi_dmul+0x4f8>)
    fe92:	4290      	cmp	r0, r2
    fe94:	dd00      	ble.n	fe98 <__aeabi_dmul+0x3bc>
    fe96:	e6e3      	b.n	fc60 <__aeabi_dmul+0x184>
    fe98:	2501      	movs	r5, #1
    fe9a:	08db      	lsrs	r3, r3, #3
    fe9c:	0762      	lsls	r2, r4, #29
    fe9e:	431a      	orrs	r2, r3
    fea0:	0264      	lsls	r4, r4, #9
    fea2:	9b01      	ldr	r3, [sp, #4]
    fea4:	4691      	mov	r9, r2
    fea6:	0b22      	lsrs	r2, r4, #12
    fea8:	0544      	lsls	r4, r0, #21
    feaa:	0d64      	lsrs	r4, r4, #21
    feac:	401d      	ands	r5, r3
    feae:	e67c      	b.n	fbaa <__aeabi_dmul+0xce>
    feb0:	2280      	movs	r2, #128	; 0x80
    feb2:	4659      	mov	r1, fp
    feb4:	0312      	lsls	r2, r2, #12
    feb6:	4211      	tst	r1, r2
    feb8:	d008      	beq.n	fecc <__aeabi_dmul+0x3f0>
    feba:	4214      	tst	r4, r2
    febc:	d106      	bne.n	fecc <__aeabi_dmul+0x3f0>
    febe:	4322      	orrs	r2, r4
    fec0:	0312      	lsls	r2, r2, #12
    fec2:	0b12      	lsrs	r2, r2, #12
    fec4:	4645      	mov	r5, r8
    fec6:	4699      	mov	r9, r3
    fec8:	4c43      	ldr	r4, [pc, #268]	; (ffd8 <__aeabi_dmul+0x4fc>)
    feca:	e66e      	b.n	fbaa <__aeabi_dmul+0xce>
    fecc:	465b      	mov	r3, fp
    fece:	431a      	orrs	r2, r3
    fed0:	0312      	lsls	r2, r2, #12
    fed2:	0b12      	lsrs	r2, r2, #12
    fed4:	4c40      	ldr	r4, [pc, #256]	; (ffd8 <__aeabi_dmul+0x4fc>)
    fed6:	e668      	b.n	fbaa <__aeabi_dmul+0xce>
    fed8:	0003      	movs	r3, r0
    feda:	4654      	mov	r4, sl
    fedc:	3b28      	subs	r3, #40	; 0x28
    fede:	409c      	lsls	r4, r3
    fee0:	2300      	movs	r3, #0
    fee2:	e6b9      	b.n	fc58 <__aeabi_dmul+0x17c>
    fee4:	f000 fc1c 	bl	10720 <__clzsi2>
    fee8:	3020      	adds	r0, #32
    feea:	e6a6      	b.n	fc3a <__aeabi_dmul+0x15e>
    feec:	0003      	movs	r3, r0
    feee:	3b28      	subs	r3, #40	; 0x28
    fef0:	409f      	lsls	r7, r3
    fef2:	2300      	movs	r3, #0
    fef4:	46bb      	mov	fp, r7
    fef6:	4699      	mov	r9, r3
    fef8:	e68a      	b.n	fc10 <__aeabi_dmul+0x134>
    fefa:	f000 fc11 	bl	10720 <__clzsi2>
    fefe:	3020      	adds	r0, #32
    ff00:	e674      	b.n	fbec <__aeabi_dmul+0x110>
    ff02:	46b4      	mov	ip, r6
    ff04:	e7ad      	b.n	fe62 <__aeabi_dmul+0x386>
    ff06:	2501      	movs	r5, #1
    ff08:	1a2a      	subs	r2, r5, r0
    ff0a:	2a38      	cmp	r2, #56	; 0x38
    ff0c:	dd06      	ble.n	ff1c <__aeabi_dmul+0x440>
    ff0e:	9b01      	ldr	r3, [sp, #4]
    ff10:	2400      	movs	r4, #0
    ff12:	401d      	ands	r5, r3
    ff14:	2300      	movs	r3, #0
    ff16:	2200      	movs	r2, #0
    ff18:	4699      	mov	r9, r3
    ff1a:	e646      	b.n	fbaa <__aeabi_dmul+0xce>
    ff1c:	2a1f      	cmp	r2, #31
    ff1e:	dc21      	bgt.n	ff64 <__aeabi_dmul+0x488>
    ff20:	2520      	movs	r5, #32
    ff22:	0020      	movs	r0, r4
    ff24:	1aad      	subs	r5, r5, r2
    ff26:	001e      	movs	r6, r3
    ff28:	40ab      	lsls	r3, r5
    ff2a:	40a8      	lsls	r0, r5
    ff2c:	40d6      	lsrs	r6, r2
    ff2e:	1e5d      	subs	r5, r3, #1
    ff30:	41ab      	sbcs	r3, r5
    ff32:	4330      	orrs	r0, r6
    ff34:	4318      	orrs	r0, r3
    ff36:	40d4      	lsrs	r4, r2
    ff38:	0743      	lsls	r3, r0, #29
    ff3a:	d009      	beq.n	ff50 <__aeabi_dmul+0x474>
    ff3c:	230f      	movs	r3, #15
    ff3e:	4003      	ands	r3, r0
    ff40:	2b04      	cmp	r3, #4
    ff42:	d005      	beq.n	ff50 <__aeabi_dmul+0x474>
    ff44:	0003      	movs	r3, r0
    ff46:	1d18      	adds	r0, r3, #4
    ff48:	4298      	cmp	r0, r3
    ff4a:	419b      	sbcs	r3, r3
    ff4c:	425b      	negs	r3, r3
    ff4e:	18e4      	adds	r4, r4, r3
    ff50:	0223      	lsls	r3, r4, #8
    ff52:	d521      	bpl.n	ff98 <__aeabi_dmul+0x4bc>
    ff54:	2501      	movs	r5, #1
    ff56:	9b01      	ldr	r3, [sp, #4]
    ff58:	2401      	movs	r4, #1
    ff5a:	401d      	ands	r5, r3
    ff5c:	2300      	movs	r3, #0
    ff5e:	2200      	movs	r2, #0
    ff60:	4699      	mov	r9, r3
    ff62:	e622      	b.n	fbaa <__aeabi_dmul+0xce>
    ff64:	251f      	movs	r5, #31
    ff66:	0021      	movs	r1, r4
    ff68:	426d      	negs	r5, r5
    ff6a:	1a28      	subs	r0, r5, r0
    ff6c:	40c1      	lsrs	r1, r0
    ff6e:	0008      	movs	r0, r1
    ff70:	2a20      	cmp	r2, #32
    ff72:	d01d      	beq.n	ffb0 <__aeabi_dmul+0x4d4>
    ff74:	355f      	adds	r5, #95	; 0x5f
    ff76:	1aaa      	subs	r2, r5, r2
    ff78:	4094      	lsls	r4, r2
    ff7a:	4323      	orrs	r3, r4
    ff7c:	1e5c      	subs	r4, r3, #1
    ff7e:	41a3      	sbcs	r3, r4
    ff80:	2507      	movs	r5, #7
    ff82:	4303      	orrs	r3, r0
    ff84:	401d      	ands	r5, r3
    ff86:	2200      	movs	r2, #0
    ff88:	2d00      	cmp	r5, #0
    ff8a:	d009      	beq.n	ffa0 <__aeabi_dmul+0x4c4>
    ff8c:	220f      	movs	r2, #15
    ff8e:	2400      	movs	r4, #0
    ff90:	401a      	ands	r2, r3
    ff92:	0018      	movs	r0, r3
    ff94:	2a04      	cmp	r2, #4
    ff96:	d1d6      	bne.n	ff46 <__aeabi_dmul+0x46a>
    ff98:	0003      	movs	r3, r0
    ff9a:	0765      	lsls	r5, r4, #29
    ff9c:	0264      	lsls	r4, r4, #9
    ff9e:	0b22      	lsrs	r2, r4, #12
    ffa0:	08db      	lsrs	r3, r3, #3
    ffa2:	432b      	orrs	r3, r5
    ffa4:	2501      	movs	r5, #1
    ffa6:	4699      	mov	r9, r3
    ffa8:	9b01      	ldr	r3, [sp, #4]
    ffaa:	2400      	movs	r4, #0
    ffac:	401d      	ands	r5, r3
    ffae:	e5fc      	b.n	fbaa <__aeabi_dmul+0xce>
    ffb0:	2400      	movs	r4, #0
    ffb2:	e7e2      	b.n	ff7a <__aeabi_dmul+0x49e>
    ffb4:	2280      	movs	r2, #128	; 0x80
    ffb6:	2501      	movs	r5, #1
    ffb8:	0312      	lsls	r2, r2, #12
    ffba:	4322      	orrs	r2, r4
    ffbc:	9901      	ldr	r1, [sp, #4]
    ffbe:	0312      	lsls	r2, r2, #12
    ffc0:	0b12      	lsrs	r2, r2, #12
    ffc2:	400d      	ands	r5, r1
    ffc4:	4699      	mov	r9, r3
    ffc6:	4c04      	ldr	r4, [pc, #16]	; (ffd8 <__aeabi_dmul+0x4fc>)
    ffc8:	e5ef      	b.n	fbaa <__aeabi_dmul+0xce>
    ffca:	46c0      	nop			; (mov r8, r8)
    ffcc:	000003ff 	.word	0x000003ff
    ffd0:	feffffff 	.word	0xfeffffff
    ffd4:	000007fe 	.word	0x000007fe
    ffd8:	000007ff 	.word	0x000007ff

0000ffdc <__aeabi_dsub>:
    ffdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffde:	4646      	mov	r6, r8
    ffe0:	46d6      	mov	lr, sl
    ffe2:	464f      	mov	r7, r9
    ffe4:	030c      	lsls	r4, r1, #12
    ffe6:	b5c0      	push	{r6, r7, lr}
    ffe8:	0fcd      	lsrs	r5, r1, #31
    ffea:	004e      	lsls	r6, r1, #1
    ffec:	0a61      	lsrs	r1, r4, #9
    ffee:	0f44      	lsrs	r4, r0, #29
    fff0:	430c      	orrs	r4, r1
    fff2:	00c1      	lsls	r1, r0, #3
    fff4:	0058      	lsls	r0, r3, #1
    fff6:	0d40      	lsrs	r0, r0, #21
    fff8:	4684      	mov	ip, r0
    fffa:	468a      	mov	sl, r1
    fffc:	000f      	movs	r7, r1
    fffe:	0319      	lsls	r1, r3, #12
   10000:	0f50      	lsrs	r0, r2, #29
   10002:	0a49      	lsrs	r1, r1, #9
   10004:	4301      	orrs	r1, r0
   10006:	48c6      	ldr	r0, [pc, #792]	; (10320 <__aeabi_dsub+0x344>)
   10008:	0d76      	lsrs	r6, r6, #21
   1000a:	46a8      	mov	r8, r5
   1000c:	0fdb      	lsrs	r3, r3, #31
   1000e:	00d2      	lsls	r2, r2, #3
   10010:	4584      	cmp	ip, r0
   10012:	d100      	bne.n	10016 <__aeabi_dsub+0x3a>
   10014:	e0d8      	b.n	101c8 <__aeabi_dsub+0x1ec>
   10016:	2001      	movs	r0, #1
   10018:	4043      	eors	r3, r0
   1001a:	42ab      	cmp	r3, r5
   1001c:	d100      	bne.n	10020 <__aeabi_dsub+0x44>
   1001e:	e0a6      	b.n	1016e <__aeabi_dsub+0x192>
   10020:	4660      	mov	r0, ip
   10022:	1a35      	subs	r5, r6, r0
   10024:	2d00      	cmp	r5, #0
   10026:	dc00      	bgt.n	1002a <__aeabi_dsub+0x4e>
   10028:	e105      	b.n	10236 <__aeabi_dsub+0x25a>
   1002a:	2800      	cmp	r0, #0
   1002c:	d110      	bne.n	10050 <__aeabi_dsub+0x74>
   1002e:	000b      	movs	r3, r1
   10030:	4313      	orrs	r3, r2
   10032:	d100      	bne.n	10036 <__aeabi_dsub+0x5a>
   10034:	e0d7      	b.n	101e6 <__aeabi_dsub+0x20a>
   10036:	1e6b      	subs	r3, r5, #1
   10038:	2b00      	cmp	r3, #0
   1003a:	d000      	beq.n	1003e <__aeabi_dsub+0x62>
   1003c:	e14b      	b.n	102d6 <__aeabi_dsub+0x2fa>
   1003e:	4653      	mov	r3, sl
   10040:	1a9f      	subs	r7, r3, r2
   10042:	45ba      	cmp	sl, r7
   10044:	4180      	sbcs	r0, r0
   10046:	1a64      	subs	r4, r4, r1
   10048:	4240      	negs	r0, r0
   1004a:	1a24      	subs	r4, r4, r0
   1004c:	2601      	movs	r6, #1
   1004e:	e01e      	b.n	1008e <__aeabi_dsub+0xb2>
   10050:	4bb3      	ldr	r3, [pc, #716]	; (10320 <__aeabi_dsub+0x344>)
   10052:	429e      	cmp	r6, r3
   10054:	d048      	beq.n	100e8 <__aeabi_dsub+0x10c>
   10056:	2380      	movs	r3, #128	; 0x80
   10058:	041b      	lsls	r3, r3, #16
   1005a:	4319      	orrs	r1, r3
   1005c:	2d38      	cmp	r5, #56	; 0x38
   1005e:	dd00      	ble.n	10062 <__aeabi_dsub+0x86>
   10060:	e119      	b.n	10296 <__aeabi_dsub+0x2ba>
   10062:	2d1f      	cmp	r5, #31
   10064:	dd00      	ble.n	10068 <__aeabi_dsub+0x8c>
   10066:	e14c      	b.n	10302 <__aeabi_dsub+0x326>
   10068:	2320      	movs	r3, #32
   1006a:	000f      	movs	r7, r1
   1006c:	1b5b      	subs	r3, r3, r5
   1006e:	0010      	movs	r0, r2
   10070:	409a      	lsls	r2, r3
   10072:	409f      	lsls	r7, r3
   10074:	40e8      	lsrs	r0, r5
   10076:	1e53      	subs	r3, r2, #1
   10078:	419a      	sbcs	r2, r3
   1007a:	40e9      	lsrs	r1, r5
   1007c:	4307      	orrs	r7, r0
   1007e:	4317      	orrs	r7, r2
   10080:	4653      	mov	r3, sl
   10082:	1bdf      	subs	r7, r3, r7
   10084:	1a61      	subs	r1, r4, r1
   10086:	45ba      	cmp	sl, r7
   10088:	41a4      	sbcs	r4, r4
   1008a:	4264      	negs	r4, r4
   1008c:	1b0c      	subs	r4, r1, r4
   1008e:	0223      	lsls	r3, r4, #8
   10090:	d400      	bmi.n	10094 <__aeabi_dsub+0xb8>
   10092:	e0c5      	b.n	10220 <__aeabi_dsub+0x244>
   10094:	0264      	lsls	r4, r4, #9
   10096:	0a65      	lsrs	r5, r4, #9
   10098:	2d00      	cmp	r5, #0
   1009a:	d100      	bne.n	1009e <__aeabi_dsub+0xc2>
   1009c:	e0f6      	b.n	1028c <__aeabi_dsub+0x2b0>
   1009e:	0028      	movs	r0, r5
   100a0:	f000 fb3e 	bl	10720 <__clzsi2>
   100a4:	0003      	movs	r3, r0
   100a6:	3b08      	subs	r3, #8
   100a8:	2b1f      	cmp	r3, #31
   100aa:	dd00      	ble.n	100ae <__aeabi_dsub+0xd2>
   100ac:	e0e9      	b.n	10282 <__aeabi_dsub+0x2a6>
   100ae:	2220      	movs	r2, #32
   100b0:	003c      	movs	r4, r7
   100b2:	1ad2      	subs	r2, r2, r3
   100b4:	409d      	lsls	r5, r3
   100b6:	40d4      	lsrs	r4, r2
   100b8:	409f      	lsls	r7, r3
   100ba:	4325      	orrs	r5, r4
   100bc:	429e      	cmp	r6, r3
   100be:	dd00      	ble.n	100c2 <__aeabi_dsub+0xe6>
   100c0:	e0db      	b.n	1027a <__aeabi_dsub+0x29e>
   100c2:	1b9e      	subs	r6, r3, r6
   100c4:	1c73      	adds	r3, r6, #1
   100c6:	2b1f      	cmp	r3, #31
   100c8:	dd00      	ble.n	100cc <__aeabi_dsub+0xf0>
   100ca:	e10a      	b.n	102e2 <__aeabi_dsub+0x306>
   100cc:	2220      	movs	r2, #32
   100ce:	0038      	movs	r0, r7
   100d0:	1ad2      	subs	r2, r2, r3
   100d2:	0029      	movs	r1, r5
   100d4:	4097      	lsls	r7, r2
   100d6:	002c      	movs	r4, r5
   100d8:	4091      	lsls	r1, r2
   100da:	40d8      	lsrs	r0, r3
   100dc:	1e7a      	subs	r2, r7, #1
   100de:	4197      	sbcs	r7, r2
   100e0:	40dc      	lsrs	r4, r3
   100e2:	2600      	movs	r6, #0
   100e4:	4301      	orrs	r1, r0
   100e6:	430f      	orrs	r7, r1
   100e8:	077b      	lsls	r3, r7, #29
   100ea:	d009      	beq.n	10100 <__aeabi_dsub+0x124>
   100ec:	230f      	movs	r3, #15
   100ee:	403b      	ands	r3, r7
   100f0:	2b04      	cmp	r3, #4
   100f2:	d005      	beq.n	10100 <__aeabi_dsub+0x124>
   100f4:	1d3b      	adds	r3, r7, #4
   100f6:	42bb      	cmp	r3, r7
   100f8:	41bf      	sbcs	r7, r7
   100fa:	427f      	negs	r7, r7
   100fc:	19e4      	adds	r4, r4, r7
   100fe:	001f      	movs	r7, r3
   10100:	0223      	lsls	r3, r4, #8
   10102:	d525      	bpl.n	10150 <__aeabi_dsub+0x174>
   10104:	4b86      	ldr	r3, [pc, #536]	; (10320 <__aeabi_dsub+0x344>)
   10106:	3601      	adds	r6, #1
   10108:	429e      	cmp	r6, r3
   1010a:	d100      	bne.n	1010e <__aeabi_dsub+0x132>
   1010c:	e0af      	b.n	1026e <__aeabi_dsub+0x292>
   1010e:	4b85      	ldr	r3, [pc, #532]	; (10324 <__aeabi_dsub+0x348>)
   10110:	2501      	movs	r5, #1
   10112:	401c      	ands	r4, r3
   10114:	4643      	mov	r3, r8
   10116:	0762      	lsls	r2, r4, #29
   10118:	08ff      	lsrs	r7, r7, #3
   1011a:	0264      	lsls	r4, r4, #9
   1011c:	0576      	lsls	r6, r6, #21
   1011e:	4317      	orrs	r7, r2
   10120:	0b24      	lsrs	r4, r4, #12
   10122:	0d76      	lsrs	r6, r6, #21
   10124:	401d      	ands	r5, r3
   10126:	2100      	movs	r1, #0
   10128:	0324      	lsls	r4, r4, #12
   1012a:	0b23      	lsrs	r3, r4, #12
   1012c:	0d0c      	lsrs	r4, r1, #20
   1012e:	4a7e      	ldr	r2, [pc, #504]	; (10328 <__aeabi_dsub+0x34c>)
   10130:	0524      	lsls	r4, r4, #20
   10132:	431c      	orrs	r4, r3
   10134:	4014      	ands	r4, r2
   10136:	0533      	lsls	r3, r6, #20
   10138:	4323      	orrs	r3, r4
   1013a:	005b      	lsls	r3, r3, #1
   1013c:	07ed      	lsls	r5, r5, #31
   1013e:	085b      	lsrs	r3, r3, #1
   10140:	432b      	orrs	r3, r5
   10142:	0038      	movs	r0, r7
   10144:	0019      	movs	r1, r3
   10146:	bc1c      	pop	{r2, r3, r4}
   10148:	4690      	mov	r8, r2
   1014a:	4699      	mov	r9, r3
   1014c:	46a2      	mov	sl, r4
   1014e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10150:	2501      	movs	r5, #1
   10152:	4643      	mov	r3, r8
   10154:	0762      	lsls	r2, r4, #29
   10156:	08ff      	lsrs	r7, r7, #3
   10158:	4317      	orrs	r7, r2
   1015a:	08e4      	lsrs	r4, r4, #3
   1015c:	401d      	ands	r5, r3
   1015e:	4b70      	ldr	r3, [pc, #448]	; (10320 <__aeabi_dsub+0x344>)
   10160:	429e      	cmp	r6, r3
   10162:	d036      	beq.n	101d2 <__aeabi_dsub+0x1f6>
   10164:	0324      	lsls	r4, r4, #12
   10166:	0576      	lsls	r6, r6, #21
   10168:	0b24      	lsrs	r4, r4, #12
   1016a:	0d76      	lsrs	r6, r6, #21
   1016c:	e7db      	b.n	10126 <__aeabi_dsub+0x14a>
   1016e:	4663      	mov	r3, ip
   10170:	1af3      	subs	r3, r6, r3
   10172:	2b00      	cmp	r3, #0
   10174:	dc00      	bgt.n	10178 <__aeabi_dsub+0x19c>
   10176:	e094      	b.n	102a2 <__aeabi_dsub+0x2c6>
   10178:	4660      	mov	r0, ip
   1017a:	2800      	cmp	r0, #0
   1017c:	d035      	beq.n	101ea <__aeabi_dsub+0x20e>
   1017e:	4868      	ldr	r0, [pc, #416]	; (10320 <__aeabi_dsub+0x344>)
   10180:	4286      	cmp	r6, r0
   10182:	d0b1      	beq.n	100e8 <__aeabi_dsub+0x10c>
   10184:	2780      	movs	r7, #128	; 0x80
   10186:	043f      	lsls	r7, r7, #16
   10188:	4339      	orrs	r1, r7
   1018a:	2b38      	cmp	r3, #56	; 0x38
   1018c:	dc00      	bgt.n	10190 <__aeabi_dsub+0x1b4>
   1018e:	e0fd      	b.n	1038c <__aeabi_dsub+0x3b0>
   10190:	430a      	orrs	r2, r1
   10192:	0017      	movs	r7, r2
   10194:	2100      	movs	r1, #0
   10196:	1e7a      	subs	r2, r7, #1
   10198:	4197      	sbcs	r7, r2
   1019a:	4457      	add	r7, sl
   1019c:	4557      	cmp	r7, sl
   1019e:	4180      	sbcs	r0, r0
   101a0:	1909      	adds	r1, r1, r4
   101a2:	4244      	negs	r4, r0
   101a4:	190c      	adds	r4, r1, r4
   101a6:	0223      	lsls	r3, r4, #8
   101a8:	d53a      	bpl.n	10220 <__aeabi_dsub+0x244>
   101aa:	4b5d      	ldr	r3, [pc, #372]	; (10320 <__aeabi_dsub+0x344>)
   101ac:	3601      	adds	r6, #1
   101ae:	429e      	cmp	r6, r3
   101b0:	d100      	bne.n	101b4 <__aeabi_dsub+0x1d8>
   101b2:	e14b      	b.n	1044c <__aeabi_dsub+0x470>
   101b4:	2201      	movs	r2, #1
   101b6:	4b5b      	ldr	r3, [pc, #364]	; (10324 <__aeabi_dsub+0x348>)
   101b8:	401c      	ands	r4, r3
   101ba:	087b      	lsrs	r3, r7, #1
   101bc:	4017      	ands	r7, r2
   101be:	431f      	orrs	r7, r3
   101c0:	07e2      	lsls	r2, r4, #31
   101c2:	4317      	orrs	r7, r2
   101c4:	0864      	lsrs	r4, r4, #1
   101c6:	e78f      	b.n	100e8 <__aeabi_dsub+0x10c>
   101c8:	0008      	movs	r0, r1
   101ca:	4310      	orrs	r0, r2
   101cc:	d000      	beq.n	101d0 <__aeabi_dsub+0x1f4>
   101ce:	e724      	b.n	1001a <__aeabi_dsub+0x3e>
   101d0:	e721      	b.n	10016 <__aeabi_dsub+0x3a>
   101d2:	0023      	movs	r3, r4
   101d4:	433b      	orrs	r3, r7
   101d6:	d100      	bne.n	101da <__aeabi_dsub+0x1fe>
   101d8:	e1b9      	b.n	1054e <__aeabi_dsub+0x572>
   101da:	2280      	movs	r2, #128	; 0x80
   101dc:	0312      	lsls	r2, r2, #12
   101de:	4314      	orrs	r4, r2
   101e0:	0324      	lsls	r4, r4, #12
   101e2:	0b24      	lsrs	r4, r4, #12
   101e4:	e79f      	b.n	10126 <__aeabi_dsub+0x14a>
   101e6:	002e      	movs	r6, r5
   101e8:	e77e      	b.n	100e8 <__aeabi_dsub+0x10c>
   101ea:	0008      	movs	r0, r1
   101ec:	4310      	orrs	r0, r2
   101ee:	d100      	bne.n	101f2 <__aeabi_dsub+0x216>
   101f0:	e0ca      	b.n	10388 <__aeabi_dsub+0x3ac>
   101f2:	1e58      	subs	r0, r3, #1
   101f4:	4684      	mov	ip, r0
   101f6:	2800      	cmp	r0, #0
   101f8:	d000      	beq.n	101fc <__aeabi_dsub+0x220>
   101fa:	e0e7      	b.n	103cc <__aeabi_dsub+0x3f0>
   101fc:	4452      	add	r2, sl
   101fe:	4552      	cmp	r2, sl
   10200:	4180      	sbcs	r0, r0
   10202:	1864      	adds	r4, r4, r1
   10204:	4240      	negs	r0, r0
   10206:	1824      	adds	r4, r4, r0
   10208:	0017      	movs	r7, r2
   1020a:	2601      	movs	r6, #1
   1020c:	0223      	lsls	r3, r4, #8
   1020e:	d507      	bpl.n	10220 <__aeabi_dsub+0x244>
   10210:	2602      	movs	r6, #2
   10212:	e7cf      	b.n	101b4 <__aeabi_dsub+0x1d8>
   10214:	4664      	mov	r4, ip
   10216:	432c      	orrs	r4, r5
   10218:	d100      	bne.n	1021c <__aeabi_dsub+0x240>
   1021a:	e1b3      	b.n	10584 <__aeabi_dsub+0x5a8>
   1021c:	002c      	movs	r4, r5
   1021e:	4667      	mov	r7, ip
   10220:	077b      	lsls	r3, r7, #29
   10222:	d000      	beq.n	10226 <__aeabi_dsub+0x24a>
   10224:	e762      	b.n	100ec <__aeabi_dsub+0x110>
   10226:	0763      	lsls	r3, r4, #29
   10228:	08ff      	lsrs	r7, r7, #3
   1022a:	431f      	orrs	r7, r3
   1022c:	2501      	movs	r5, #1
   1022e:	4643      	mov	r3, r8
   10230:	08e4      	lsrs	r4, r4, #3
   10232:	401d      	ands	r5, r3
   10234:	e793      	b.n	1015e <__aeabi_dsub+0x182>
   10236:	2d00      	cmp	r5, #0
   10238:	d178      	bne.n	1032c <__aeabi_dsub+0x350>
   1023a:	1c75      	adds	r5, r6, #1
   1023c:	056d      	lsls	r5, r5, #21
   1023e:	0d6d      	lsrs	r5, r5, #21
   10240:	2d01      	cmp	r5, #1
   10242:	dc00      	bgt.n	10246 <__aeabi_dsub+0x26a>
   10244:	e0f2      	b.n	1042c <__aeabi_dsub+0x450>
   10246:	4650      	mov	r0, sl
   10248:	1a80      	subs	r0, r0, r2
   1024a:	4582      	cmp	sl, r0
   1024c:	41bf      	sbcs	r7, r7
   1024e:	1a65      	subs	r5, r4, r1
   10250:	427f      	negs	r7, r7
   10252:	1bed      	subs	r5, r5, r7
   10254:	4684      	mov	ip, r0
   10256:	0228      	lsls	r0, r5, #8
   10258:	d400      	bmi.n	1025c <__aeabi_dsub+0x280>
   1025a:	e08c      	b.n	10376 <__aeabi_dsub+0x39a>
   1025c:	4650      	mov	r0, sl
   1025e:	1a17      	subs	r7, r2, r0
   10260:	42ba      	cmp	r2, r7
   10262:	4192      	sbcs	r2, r2
   10264:	1b0c      	subs	r4, r1, r4
   10266:	4255      	negs	r5, r2
   10268:	1b65      	subs	r5, r4, r5
   1026a:	4698      	mov	r8, r3
   1026c:	e714      	b.n	10098 <__aeabi_dsub+0xbc>
   1026e:	2501      	movs	r5, #1
   10270:	4643      	mov	r3, r8
   10272:	2400      	movs	r4, #0
   10274:	401d      	ands	r5, r3
   10276:	2700      	movs	r7, #0
   10278:	e755      	b.n	10126 <__aeabi_dsub+0x14a>
   1027a:	4c2a      	ldr	r4, [pc, #168]	; (10324 <__aeabi_dsub+0x348>)
   1027c:	1af6      	subs	r6, r6, r3
   1027e:	402c      	ands	r4, r5
   10280:	e732      	b.n	100e8 <__aeabi_dsub+0x10c>
   10282:	003d      	movs	r5, r7
   10284:	3828      	subs	r0, #40	; 0x28
   10286:	4085      	lsls	r5, r0
   10288:	2700      	movs	r7, #0
   1028a:	e717      	b.n	100bc <__aeabi_dsub+0xe0>
   1028c:	0038      	movs	r0, r7
   1028e:	f000 fa47 	bl	10720 <__clzsi2>
   10292:	3020      	adds	r0, #32
   10294:	e706      	b.n	100a4 <__aeabi_dsub+0xc8>
   10296:	430a      	orrs	r2, r1
   10298:	0017      	movs	r7, r2
   1029a:	2100      	movs	r1, #0
   1029c:	1e7a      	subs	r2, r7, #1
   1029e:	4197      	sbcs	r7, r2
   102a0:	e6ee      	b.n	10080 <__aeabi_dsub+0xa4>
   102a2:	2b00      	cmp	r3, #0
   102a4:	d000      	beq.n	102a8 <__aeabi_dsub+0x2cc>
   102a6:	e0e5      	b.n	10474 <__aeabi_dsub+0x498>
   102a8:	1c73      	adds	r3, r6, #1
   102aa:	469c      	mov	ip, r3
   102ac:	055b      	lsls	r3, r3, #21
   102ae:	0d5b      	lsrs	r3, r3, #21
   102b0:	2b01      	cmp	r3, #1
   102b2:	dc00      	bgt.n	102b6 <__aeabi_dsub+0x2da>
   102b4:	e09f      	b.n	103f6 <__aeabi_dsub+0x41a>
   102b6:	4b1a      	ldr	r3, [pc, #104]	; (10320 <__aeabi_dsub+0x344>)
   102b8:	459c      	cmp	ip, r3
   102ba:	d100      	bne.n	102be <__aeabi_dsub+0x2e2>
   102bc:	e0c5      	b.n	1044a <__aeabi_dsub+0x46e>
   102be:	4452      	add	r2, sl
   102c0:	4552      	cmp	r2, sl
   102c2:	4180      	sbcs	r0, r0
   102c4:	1864      	adds	r4, r4, r1
   102c6:	4240      	negs	r0, r0
   102c8:	1824      	adds	r4, r4, r0
   102ca:	07e7      	lsls	r7, r4, #31
   102cc:	0852      	lsrs	r2, r2, #1
   102ce:	4317      	orrs	r7, r2
   102d0:	0864      	lsrs	r4, r4, #1
   102d2:	4666      	mov	r6, ip
   102d4:	e708      	b.n	100e8 <__aeabi_dsub+0x10c>
   102d6:	4812      	ldr	r0, [pc, #72]	; (10320 <__aeabi_dsub+0x344>)
   102d8:	4285      	cmp	r5, r0
   102da:	d100      	bne.n	102de <__aeabi_dsub+0x302>
   102dc:	e085      	b.n	103ea <__aeabi_dsub+0x40e>
   102de:	001d      	movs	r5, r3
   102e0:	e6bc      	b.n	1005c <__aeabi_dsub+0x80>
   102e2:	0029      	movs	r1, r5
   102e4:	3e1f      	subs	r6, #31
   102e6:	40f1      	lsrs	r1, r6
   102e8:	2b20      	cmp	r3, #32
   102ea:	d100      	bne.n	102ee <__aeabi_dsub+0x312>
   102ec:	e07f      	b.n	103ee <__aeabi_dsub+0x412>
   102ee:	2240      	movs	r2, #64	; 0x40
   102f0:	1ad3      	subs	r3, r2, r3
   102f2:	409d      	lsls	r5, r3
   102f4:	432f      	orrs	r7, r5
   102f6:	1e7d      	subs	r5, r7, #1
   102f8:	41af      	sbcs	r7, r5
   102fa:	2400      	movs	r4, #0
   102fc:	430f      	orrs	r7, r1
   102fe:	2600      	movs	r6, #0
   10300:	e78e      	b.n	10220 <__aeabi_dsub+0x244>
   10302:	002b      	movs	r3, r5
   10304:	000f      	movs	r7, r1
   10306:	3b20      	subs	r3, #32
   10308:	40df      	lsrs	r7, r3
   1030a:	2d20      	cmp	r5, #32
   1030c:	d071      	beq.n	103f2 <__aeabi_dsub+0x416>
   1030e:	2340      	movs	r3, #64	; 0x40
   10310:	1b5d      	subs	r5, r3, r5
   10312:	40a9      	lsls	r1, r5
   10314:	430a      	orrs	r2, r1
   10316:	1e51      	subs	r1, r2, #1
   10318:	418a      	sbcs	r2, r1
   1031a:	2100      	movs	r1, #0
   1031c:	4317      	orrs	r7, r2
   1031e:	e6af      	b.n	10080 <__aeabi_dsub+0xa4>
   10320:	000007ff 	.word	0x000007ff
   10324:	ff7fffff 	.word	0xff7fffff
   10328:	800fffff 	.word	0x800fffff
   1032c:	2e00      	cmp	r6, #0
   1032e:	d03e      	beq.n	103ae <__aeabi_dsub+0x3d2>
   10330:	4eb3      	ldr	r6, [pc, #716]	; (10600 <__aeabi_dsub+0x624>)
   10332:	45b4      	cmp	ip, r6
   10334:	d045      	beq.n	103c2 <__aeabi_dsub+0x3e6>
   10336:	2680      	movs	r6, #128	; 0x80
   10338:	0436      	lsls	r6, r6, #16
   1033a:	426d      	negs	r5, r5
   1033c:	4334      	orrs	r4, r6
   1033e:	2d38      	cmp	r5, #56	; 0x38
   10340:	dd00      	ble.n	10344 <__aeabi_dsub+0x368>
   10342:	e0a8      	b.n	10496 <__aeabi_dsub+0x4ba>
   10344:	2d1f      	cmp	r5, #31
   10346:	dd00      	ble.n	1034a <__aeabi_dsub+0x36e>
   10348:	e11f      	b.n	1058a <__aeabi_dsub+0x5ae>
   1034a:	2620      	movs	r6, #32
   1034c:	0027      	movs	r7, r4
   1034e:	4650      	mov	r0, sl
   10350:	1b76      	subs	r6, r6, r5
   10352:	40b7      	lsls	r7, r6
   10354:	40e8      	lsrs	r0, r5
   10356:	4307      	orrs	r7, r0
   10358:	4650      	mov	r0, sl
   1035a:	40b0      	lsls	r0, r6
   1035c:	1e46      	subs	r6, r0, #1
   1035e:	41b0      	sbcs	r0, r6
   10360:	40ec      	lsrs	r4, r5
   10362:	4338      	orrs	r0, r7
   10364:	1a17      	subs	r7, r2, r0
   10366:	42ba      	cmp	r2, r7
   10368:	4192      	sbcs	r2, r2
   1036a:	1b0c      	subs	r4, r1, r4
   1036c:	4252      	negs	r2, r2
   1036e:	1aa4      	subs	r4, r4, r2
   10370:	4666      	mov	r6, ip
   10372:	4698      	mov	r8, r3
   10374:	e68b      	b.n	1008e <__aeabi_dsub+0xb2>
   10376:	4664      	mov	r4, ip
   10378:	4667      	mov	r7, ip
   1037a:	432c      	orrs	r4, r5
   1037c:	d000      	beq.n	10380 <__aeabi_dsub+0x3a4>
   1037e:	e68b      	b.n	10098 <__aeabi_dsub+0xbc>
   10380:	2500      	movs	r5, #0
   10382:	2600      	movs	r6, #0
   10384:	2700      	movs	r7, #0
   10386:	e6ea      	b.n	1015e <__aeabi_dsub+0x182>
   10388:	001e      	movs	r6, r3
   1038a:	e6ad      	b.n	100e8 <__aeabi_dsub+0x10c>
   1038c:	2b1f      	cmp	r3, #31
   1038e:	dc60      	bgt.n	10452 <__aeabi_dsub+0x476>
   10390:	2720      	movs	r7, #32
   10392:	1af8      	subs	r0, r7, r3
   10394:	000f      	movs	r7, r1
   10396:	4684      	mov	ip, r0
   10398:	4087      	lsls	r7, r0
   1039a:	0010      	movs	r0, r2
   1039c:	40d8      	lsrs	r0, r3
   1039e:	4307      	orrs	r7, r0
   103a0:	4660      	mov	r0, ip
   103a2:	4082      	lsls	r2, r0
   103a4:	1e50      	subs	r0, r2, #1
   103a6:	4182      	sbcs	r2, r0
   103a8:	40d9      	lsrs	r1, r3
   103aa:	4317      	orrs	r7, r2
   103ac:	e6f5      	b.n	1019a <__aeabi_dsub+0x1be>
   103ae:	0026      	movs	r6, r4
   103b0:	4650      	mov	r0, sl
   103b2:	4306      	orrs	r6, r0
   103b4:	d005      	beq.n	103c2 <__aeabi_dsub+0x3e6>
   103b6:	43ed      	mvns	r5, r5
   103b8:	2d00      	cmp	r5, #0
   103ba:	d0d3      	beq.n	10364 <__aeabi_dsub+0x388>
   103bc:	4e90      	ldr	r6, [pc, #576]	; (10600 <__aeabi_dsub+0x624>)
   103be:	45b4      	cmp	ip, r6
   103c0:	d1bd      	bne.n	1033e <__aeabi_dsub+0x362>
   103c2:	000c      	movs	r4, r1
   103c4:	0017      	movs	r7, r2
   103c6:	4666      	mov	r6, ip
   103c8:	4698      	mov	r8, r3
   103ca:	e68d      	b.n	100e8 <__aeabi_dsub+0x10c>
   103cc:	488c      	ldr	r0, [pc, #560]	; (10600 <__aeabi_dsub+0x624>)
   103ce:	4283      	cmp	r3, r0
   103d0:	d00b      	beq.n	103ea <__aeabi_dsub+0x40e>
   103d2:	4663      	mov	r3, ip
   103d4:	e6d9      	b.n	1018a <__aeabi_dsub+0x1ae>
   103d6:	2d00      	cmp	r5, #0
   103d8:	d000      	beq.n	103dc <__aeabi_dsub+0x400>
   103da:	e096      	b.n	1050a <__aeabi_dsub+0x52e>
   103dc:	0008      	movs	r0, r1
   103de:	4310      	orrs	r0, r2
   103e0:	d100      	bne.n	103e4 <__aeabi_dsub+0x408>
   103e2:	e0e2      	b.n	105aa <__aeabi_dsub+0x5ce>
   103e4:	000c      	movs	r4, r1
   103e6:	0017      	movs	r7, r2
   103e8:	4698      	mov	r8, r3
   103ea:	4e85      	ldr	r6, [pc, #532]	; (10600 <__aeabi_dsub+0x624>)
   103ec:	e67c      	b.n	100e8 <__aeabi_dsub+0x10c>
   103ee:	2500      	movs	r5, #0
   103f0:	e780      	b.n	102f4 <__aeabi_dsub+0x318>
   103f2:	2100      	movs	r1, #0
   103f4:	e78e      	b.n	10314 <__aeabi_dsub+0x338>
   103f6:	0023      	movs	r3, r4
   103f8:	4650      	mov	r0, sl
   103fa:	4303      	orrs	r3, r0
   103fc:	2e00      	cmp	r6, #0
   103fe:	d000      	beq.n	10402 <__aeabi_dsub+0x426>
   10400:	e0a8      	b.n	10554 <__aeabi_dsub+0x578>
   10402:	2b00      	cmp	r3, #0
   10404:	d100      	bne.n	10408 <__aeabi_dsub+0x42c>
   10406:	e0de      	b.n	105c6 <__aeabi_dsub+0x5ea>
   10408:	000b      	movs	r3, r1
   1040a:	4313      	orrs	r3, r2
   1040c:	d100      	bne.n	10410 <__aeabi_dsub+0x434>
   1040e:	e66b      	b.n	100e8 <__aeabi_dsub+0x10c>
   10410:	4452      	add	r2, sl
   10412:	4552      	cmp	r2, sl
   10414:	4180      	sbcs	r0, r0
   10416:	1864      	adds	r4, r4, r1
   10418:	4240      	negs	r0, r0
   1041a:	1824      	adds	r4, r4, r0
   1041c:	0017      	movs	r7, r2
   1041e:	0223      	lsls	r3, r4, #8
   10420:	d400      	bmi.n	10424 <__aeabi_dsub+0x448>
   10422:	e6fd      	b.n	10220 <__aeabi_dsub+0x244>
   10424:	4b77      	ldr	r3, [pc, #476]	; (10604 <__aeabi_dsub+0x628>)
   10426:	4666      	mov	r6, ip
   10428:	401c      	ands	r4, r3
   1042a:	e65d      	b.n	100e8 <__aeabi_dsub+0x10c>
   1042c:	0025      	movs	r5, r4
   1042e:	4650      	mov	r0, sl
   10430:	4305      	orrs	r5, r0
   10432:	2e00      	cmp	r6, #0
   10434:	d1cf      	bne.n	103d6 <__aeabi_dsub+0x3fa>
   10436:	2d00      	cmp	r5, #0
   10438:	d14f      	bne.n	104da <__aeabi_dsub+0x4fe>
   1043a:	000c      	movs	r4, r1
   1043c:	4314      	orrs	r4, r2
   1043e:	d100      	bne.n	10442 <__aeabi_dsub+0x466>
   10440:	e0a0      	b.n	10584 <__aeabi_dsub+0x5a8>
   10442:	000c      	movs	r4, r1
   10444:	0017      	movs	r7, r2
   10446:	4698      	mov	r8, r3
   10448:	e64e      	b.n	100e8 <__aeabi_dsub+0x10c>
   1044a:	4666      	mov	r6, ip
   1044c:	2400      	movs	r4, #0
   1044e:	2700      	movs	r7, #0
   10450:	e685      	b.n	1015e <__aeabi_dsub+0x182>
   10452:	001f      	movs	r7, r3
   10454:	0008      	movs	r0, r1
   10456:	3f20      	subs	r7, #32
   10458:	40f8      	lsrs	r0, r7
   1045a:	0007      	movs	r7, r0
   1045c:	2b20      	cmp	r3, #32
   1045e:	d100      	bne.n	10462 <__aeabi_dsub+0x486>
   10460:	e08e      	b.n	10580 <__aeabi_dsub+0x5a4>
   10462:	2040      	movs	r0, #64	; 0x40
   10464:	1ac3      	subs	r3, r0, r3
   10466:	4099      	lsls	r1, r3
   10468:	430a      	orrs	r2, r1
   1046a:	1e51      	subs	r1, r2, #1
   1046c:	418a      	sbcs	r2, r1
   1046e:	2100      	movs	r1, #0
   10470:	4317      	orrs	r7, r2
   10472:	e692      	b.n	1019a <__aeabi_dsub+0x1be>
   10474:	2e00      	cmp	r6, #0
   10476:	d114      	bne.n	104a2 <__aeabi_dsub+0x4c6>
   10478:	0026      	movs	r6, r4
   1047a:	4650      	mov	r0, sl
   1047c:	4306      	orrs	r6, r0
   1047e:	d062      	beq.n	10546 <__aeabi_dsub+0x56a>
   10480:	43db      	mvns	r3, r3
   10482:	2b00      	cmp	r3, #0
   10484:	d15c      	bne.n	10540 <__aeabi_dsub+0x564>
   10486:	1887      	adds	r7, r0, r2
   10488:	4297      	cmp	r7, r2
   1048a:	4192      	sbcs	r2, r2
   1048c:	1864      	adds	r4, r4, r1
   1048e:	4252      	negs	r2, r2
   10490:	18a4      	adds	r4, r4, r2
   10492:	4666      	mov	r6, ip
   10494:	e687      	b.n	101a6 <__aeabi_dsub+0x1ca>
   10496:	4650      	mov	r0, sl
   10498:	4320      	orrs	r0, r4
   1049a:	1e44      	subs	r4, r0, #1
   1049c:	41a0      	sbcs	r0, r4
   1049e:	2400      	movs	r4, #0
   104a0:	e760      	b.n	10364 <__aeabi_dsub+0x388>
   104a2:	4e57      	ldr	r6, [pc, #348]	; (10600 <__aeabi_dsub+0x624>)
   104a4:	45b4      	cmp	ip, r6
   104a6:	d04e      	beq.n	10546 <__aeabi_dsub+0x56a>
   104a8:	2680      	movs	r6, #128	; 0x80
   104aa:	0436      	lsls	r6, r6, #16
   104ac:	425b      	negs	r3, r3
   104ae:	4334      	orrs	r4, r6
   104b0:	2b38      	cmp	r3, #56	; 0x38
   104b2:	dd00      	ble.n	104b6 <__aeabi_dsub+0x4da>
   104b4:	e07f      	b.n	105b6 <__aeabi_dsub+0x5da>
   104b6:	2b1f      	cmp	r3, #31
   104b8:	dd00      	ble.n	104bc <__aeabi_dsub+0x4e0>
   104ba:	e08b      	b.n	105d4 <__aeabi_dsub+0x5f8>
   104bc:	2620      	movs	r6, #32
   104be:	0027      	movs	r7, r4
   104c0:	4650      	mov	r0, sl
   104c2:	1af6      	subs	r6, r6, r3
   104c4:	40b7      	lsls	r7, r6
   104c6:	40d8      	lsrs	r0, r3
   104c8:	4307      	orrs	r7, r0
   104ca:	4650      	mov	r0, sl
   104cc:	40b0      	lsls	r0, r6
   104ce:	1e46      	subs	r6, r0, #1
   104d0:	41b0      	sbcs	r0, r6
   104d2:	4307      	orrs	r7, r0
   104d4:	40dc      	lsrs	r4, r3
   104d6:	18bf      	adds	r7, r7, r2
   104d8:	e7d6      	b.n	10488 <__aeabi_dsub+0x4ac>
   104da:	000d      	movs	r5, r1
   104dc:	4315      	orrs	r5, r2
   104de:	d100      	bne.n	104e2 <__aeabi_dsub+0x506>
   104e0:	e602      	b.n	100e8 <__aeabi_dsub+0x10c>
   104e2:	4650      	mov	r0, sl
   104e4:	1a80      	subs	r0, r0, r2
   104e6:	4582      	cmp	sl, r0
   104e8:	41bf      	sbcs	r7, r7
   104ea:	1a65      	subs	r5, r4, r1
   104ec:	427f      	negs	r7, r7
   104ee:	1bed      	subs	r5, r5, r7
   104f0:	4684      	mov	ip, r0
   104f2:	0228      	lsls	r0, r5, #8
   104f4:	d400      	bmi.n	104f8 <__aeabi_dsub+0x51c>
   104f6:	e68d      	b.n	10214 <__aeabi_dsub+0x238>
   104f8:	4650      	mov	r0, sl
   104fa:	1a17      	subs	r7, r2, r0
   104fc:	42ba      	cmp	r2, r7
   104fe:	4192      	sbcs	r2, r2
   10500:	1b0c      	subs	r4, r1, r4
   10502:	4252      	negs	r2, r2
   10504:	1aa4      	subs	r4, r4, r2
   10506:	4698      	mov	r8, r3
   10508:	e5ee      	b.n	100e8 <__aeabi_dsub+0x10c>
   1050a:	000d      	movs	r5, r1
   1050c:	4315      	orrs	r5, r2
   1050e:	d100      	bne.n	10512 <__aeabi_dsub+0x536>
   10510:	e76b      	b.n	103ea <__aeabi_dsub+0x40e>
   10512:	4650      	mov	r0, sl
   10514:	0767      	lsls	r7, r4, #29
   10516:	08c0      	lsrs	r0, r0, #3
   10518:	4307      	orrs	r7, r0
   1051a:	2080      	movs	r0, #128	; 0x80
   1051c:	08e4      	lsrs	r4, r4, #3
   1051e:	0300      	lsls	r0, r0, #12
   10520:	4204      	tst	r4, r0
   10522:	d007      	beq.n	10534 <__aeabi_dsub+0x558>
   10524:	08cd      	lsrs	r5, r1, #3
   10526:	4205      	tst	r5, r0
   10528:	d104      	bne.n	10534 <__aeabi_dsub+0x558>
   1052a:	002c      	movs	r4, r5
   1052c:	4698      	mov	r8, r3
   1052e:	08d7      	lsrs	r7, r2, #3
   10530:	0749      	lsls	r1, r1, #29
   10532:	430f      	orrs	r7, r1
   10534:	0f7b      	lsrs	r3, r7, #29
   10536:	00e4      	lsls	r4, r4, #3
   10538:	431c      	orrs	r4, r3
   1053a:	00ff      	lsls	r7, r7, #3
   1053c:	4e30      	ldr	r6, [pc, #192]	; (10600 <__aeabi_dsub+0x624>)
   1053e:	e5d3      	b.n	100e8 <__aeabi_dsub+0x10c>
   10540:	4e2f      	ldr	r6, [pc, #188]	; (10600 <__aeabi_dsub+0x624>)
   10542:	45b4      	cmp	ip, r6
   10544:	d1b4      	bne.n	104b0 <__aeabi_dsub+0x4d4>
   10546:	000c      	movs	r4, r1
   10548:	0017      	movs	r7, r2
   1054a:	4666      	mov	r6, ip
   1054c:	e5cc      	b.n	100e8 <__aeabi_dsub+0x10c>
   1054e:	2700      	movs	r7, #0
   10550:	2400      	movs	r4, #0
   10552:	e5e8      	b.n	10126 <__aeabi_dsub+0x14a>
   10554:	2b00      	cmp	r3, #0
   10556:	d039      	beq.n	105cc <__aeabi_dsub+0x5f0>
   10558:	000b      	movs	r3, r1
   1055a:	4313      	orrs	r3, r2
   1055c:	d100      	bne.n	10560 <__aeabi_dsub+0x584>
   1055e:	e744      	b.n	103ea <__aeabi_dsub+0x40e>
   10560:	08c0      	lsrs	r0, r0, #3
   10562:	0767      	lsls	r7, r4, #29
   10564:	4307      	orrs	r7, r0
   10566:	2080      	movs	r0, #128	; 0x80
   10568:	08e4      	lsrs	r4, r4, #3
   1056a:	0300      	lsls	r0, r0, #12
   1056c:	4204      	tst	r4, r0
   1056e:	d0e1      	beq.n	10534 <__aeabi_dsub+0x558>
   10570:	08cb      	lsrs	r3, r1, #3
   10572:	4203      	tst	r3, r0
   10574:	d1de      	bne.n	10534 <__aeabi_dsub+0x558>
   10576:	08d7      	lsrs	r7, r2, #3
   10578:	0749      	lsls	r1, r1, #29
   1057a:	430f      	orrs	r7, r1
   1057c:	001c      	movs	r4, r3
   1057e:	e7d9      	b.n	10534 <__aeabi_dsub+0x558>
   10580:	2100      	movs	r1, #0
   10582:	e771      	b.n	10468 <__aeabi_dsub+0x48c>
   10584:	2500      	movs	r5, #0
   10586:	2700      	movs	r7, #0
   10588:	e5e9      	b.n	1015e <__aeabi_dsub+0x182>
   1058a:	002e      	movs	r6, r5
   1058c:	0027      	movs	r7, r4
   1058e:	3e20      	subs	r6, #32
   10590:	40f7      	lsrs	r7, r6
   10592:	2d20      	cmp	r5, #32
   10594:	d02f      	beq.n	105f6 <__aeabi_dsub+0x61a>
   10596:	2640      	movs	r6, #64	; 0x40
   10598:	1b75      	subs	r5, r6, r5
   1059a:	40ac      	lsls	r4, r5
   1059c:	4650      	mov	r0, sl
   1059e:	4320      	orrs	r0, r4
   105a0:	1e44      	subs	r4, r0, #1
   105a2:	41a0      	sbcs	r0, r4
   105a4:	2400      	movs	r4, #0
   105a6:	4338      	orrs	r0, r7
   105a8:	e6dc      	b.n	10364 <__aeabi_dsub+0x388>
   105aa:	2480      	movs	r4, #128	; 0x80
   105ac:	2500      	movs	r5, #0
   105ae:	0324      	lsls	r4, r4, #12
   105b0:	4e13      	ldr	r6, [pc, #76]	; (10600 <__aeabi_dsub+0x624>)
   105b2:	2700      	movs	r7, #0
   105b4:	e5d3      	b.n	1015e <__aeabi_dsub+0x182>
   105b6:	4650      	mov	r0, sl
   105b8:	4320      	orrs	r0, r4
   105ba:	0007      	movs	r7, r0
   105bc:	1e78      	subs	r0, r7, #1
   105be:	4187      	sbcs	r7, r0
   105c0:	2400      	movs	r4, #0
   105c2:	18bf      	adds	r7, r7, r2
   105c4:	e760      	b.n	10488 <__aeabi_dsub+0x4ac>
   105c6:	000c      	movs	r4, r1
   105c8:	0017      	movs	r7, r2
   105ca:	e58d      	b.n	100e8 <__aeabi_dsub+0x10c>
   105cc:	000c      	movs	r4, r1
   105ce:	0017      	movs	r7, r2
   105d0:	4e0b      	ldr	r6, [pc, #44]	; (10600 <__aeabi_dsub+0x624>)
   105d2:	e589      	b.n	100e8 <__aeabi_dsub+0x10c>
   105d4:	001e      	movs	r6, r3
   105d6:	0027      	movs	r7, r4
   105d8:	3e20      	subs	r6, #32
   105da:	40f7      	lsrs	r7, r6
   105dc:	2b20      	cmp	r3, #32
   105de:	d00c      	beq.n	105fa <__aeabi_dsub+0x61e>
   105e0:	2640      	movs	r6, #64	; 0x40
   105e2:	1af3      	subs	r3, r6, r3
   105e4:	409c      	lsls	r4, r3
   105e6:	4650      	mov	r0, sl
   105e8:	4320      	orrs	r0, r4
   105ea:	1e44      	subs	r4, r0, #1
   105ec:	41a0      	sbcs	r0, r4
   105ee:	4307      	orrs	r7, r0
   105f0:	2400      	movs	r4, #0
   105f2:	18bf      	adds	r7, r7, r2
   105f4:	e748      	b.n	10488 <__aeabi_dsub+0x4ac>
   105f6:	2400      	movs	r4, #0
   105f8:	e7d0      	b.n	1059c <__aeabi_dsub+0x5c0>
   105fa:	2400      	movs	r4, #0
   105fc:	e7f3      	b.n	105e6 <__aeabi_dsub+0x60a>
   105fe:	46c0      	nop			; (mov r8, r8)
   10600:	000007ff 	.word	0x000007ff
   10604:	ff7fffff 	.word	0xff7fffff

00010608 <__aeabi_dcmpun>:
   10608:	b570      	push	{r4, r5, r6, lr}
   1060a:	4e0e      	ldr	r6, [pc, #56]	; (10644 <__aeabi_dcmpun+0x3c>)
   1060c:	030d      	lsls	r5, r1, #12
   1060e:	031c      	lsls	r4, r3, #12
   10610:	0049      	lsls	r1, r1, #1
   10612:	005b      	lsls	r3, r3, #1
   10614:	0b2d      	lsrs	r5, r5, #12
   10616:	0d49      	lsrs	r1, r1, #21
   10618:	0b24      	lsrs	r4, r4, #12
   1061a:	0d5b      	lsrs	r3, r3, #21
   1061c:	42b1      	cmp	r1, r6
   1061e:	d004      	beq.n	1062a <__aeabi_dcmpun+0x22>
   10620:	4908      	ldr	r1, [pc, #32]	; (10644 <__aeabi_dcmpun+0x3c>)
   10622:	2000      	movs	r0, #0
   10624:	428b      	cmp	r3, r1
   10626:	d008      	beq.n	1063a <__aeabi_dcmpun+0x32>
   10628:	bd70      	pop	{r4, r5, r6, pc}
   1062a:	4305      	orrs	r5, r0
   1062c:	2001      	movs	r0, #1
   1062e:	2d00      	cmp	r5, #0
   10630:	d1fa      	bne.n	10628 <__aeabi_dcmpun+0x20>
   10632:	4904      	ldr	r1, [pc, #16]	; (10644 <__aeabi_dcmpun+0x3c>)
   10634:	2000      	movs	r0, #0
   10636:	428b      	cmp	r3, r1
   10638:	d1f6      	bne.n	10628 <__aeabi_dcmpun+0x20>
   1063a:	4314      	orrs	r4, r2
   1063c:	0020      	movs	r0, r4
   1063e:	1e44      	subs	r4, r0, #1
   10640:	41a0      	sbcs	r0, r4
   10642:	e7f1      	b.n	10628 <__aeabi_dcmpun+0x20>
   10644:	000007ff 	.word	0x000007ff

00010648 <__aeabi_d2iz>:
   10648:	b530      	push	{r4, r5, lr}
   1064a:	4d13      	ldr	r5, [pc, #76]	; (10698 <__aeabi_d2iz+0x50>)
   1064c:	030a      	lsls	r2, r1, #12
   1064e:	004b      	lsls	r3, r1, #1
   10650:	0b12      	lsrs	r2, r2, #12
   10652:	0d5b      	lsrs	r3, r3, #21
   10654:	0fc9      	lsrs	r1, r1, #31
   10656:	2400      	movs	r4, #0
   10658:	42ab      	cmp	r3, r5
   1065a:	dd10      	ble.n	1067e <__aeabi_d2iz+0x36>
   1065c:	4c0f      	ldr	r4, [pc, #60]	; (1069c <__aeabi_d2iz+0x54>)
   1065e:	42a3      	cmp	r3, r4
   10660:	dc0f      	bgt.n	10682 <__aeabi_d2iz+0x3a>
   10662:	2480      	movs	r4, #128	; 0x80
   10664:	4d0e      	ldr	r5, [pc, #56]	; (106a0 <__aeabi_d2iz+0x58>)
   10666:	0364      	lsls	r4, r4, #13
   10668:	4322      	orrs	r2, r4
   1066a:	1aed      	subs	r5, r5, r3
   1066c:	2d1f      	cmp	r5, #31
   1066e:	dd0b      	ble.n	10688 <__aeabi_d2iz+0x40>
   10670:	480c      	ldr	r0, [pc, #48]	; (106a4 <__aeabi_d2iz+0x5c>)
   10672:	1ac3      	subs	r3, r0, r3
   10674:	40da      	lsrs	r2, r3
   10676:	4254      	negs	r4, r2
   10678:	2900      	cmp	r1, #0
   1067a:	d100      	bne.n	1067e <__aeabi_d2iz+0x36>
   1067c:	0014      	movs	r4, r2
   1067e:	0020      	movs	r0, r4
   10680:	bd30      	pop	{r4, r5, pc}
   10682:	4b09      	ldr	r3, [pc, #36]	; (106a8 <__aeabi_d2iz+0x60>)
   10684:	18cc      	adds	r4, r1, r3
   10686:	e7fa      	b.n	1067e <__aeabi_d2iz+0x36>
   10688:	4c08      	ldr	r4, [pc, #32]	; (106ac <__aeabi_d2iz+0x64>)
   1068a:	40e8      	lsrs	r0, r5
   1068c:	46a4      	mov	ip, r4
   1068e:	4463      	add	r3, ip
   10690:	409a      	lsls	r2, r3
   10692:	4302      	orrs	r2, r0
   10694:	e7ef      	b.n	10676 <__aeabi_d2iz+0x2e>
   10696:	46c0      	nop			; (mov r8, r8)
   10698:	000003fe 	.word	0x000003fe
   1069c:	0000041d 	.word	0x0000041d
   106a0:	00000433 	.word	0x00000433
   106a4:	00000413 	.word	0x00000413
   106a8:	7fffffff 	.word	0x7fffffff
   106ac:	fffffbed 	.word	0xfffffbed

000106b0 <__aeabi_ui2d>:
   106b0:	b510      	push	{r4, lr}
   106b2:	1e04      	subs	r4, r0, #0
   106b4:	d028      	beq.n	10708 <__aeabi_ui2d+0x58>
   106b6:	f000 f833 	bl	10720 <__clzsi2>
   106ba:	4b15      	ldr	r3, [pc, #84]	; (10710 <__aeabi_ui2d+0x60>)
   106bc:	4a15      	ldr	r2, [pc, #84]	; (10714 <__aeabi_ui2d+0x64>)
   106be:	1a1b      	subs	r3, r3, r0
   106c0:	1ad2      	subs	r2, r2, r3
   106c2:	2a1f      	cmp	r2, #31
   106c4:	dd15      	ble.n	106f2 <__aeabi_ui2d+0x42>
   106c6:	4a14      	ldr	r2, [pc, #80]	; (10718 <__aeabi_ui2d+0x68>)
   106c8:	1ad2      	subs	r2, r2, r3
   106ca:	4094      	lsls	r4, r2
   106cc:	2200      	movs	r2, #0
   106ce:	0324      	lsls	r4, r4, #12
   106d0:	055b      	lsls	r3, r3, #21
   106d2:	0b24      	lsrs	r4, r4, #12
   106d4:	0d5b      	lsrs	r3, r3, #21
   106d6:	2100      	movs	r1, #0
   106d8:	0010      	movs	r0, r2
   106da:	0324      	lsls	r4, r4, #12
   106dc:	0d0a      	lsrs	r2, r1, #20
   106de:	0b24      	lsrs	r4, r4, #12
   106e0:	0512      	lsls	r2, r2, #20
   106e2:	4322      	orrs	r2, r4
   106e4:	4c0d      	ldr	r4, [pc, #52]	; (1071c <__aeabi_ui2d+0x6c>)
   106e6:	051b      	lsls	r3, r3, #20
   106e8:	4022      	ands	r2, r4
   106ea:	4313      	orrs	r3, r2
   106ec:	005b      	lsls	r3, r3, #1
   106ee:	0859      	lsrs	r1, r3, #1
   106f0:	bd10      	pop	{r4, pc}
   106f2:	0021      	movs	r1, r4
   106f4:	4091      	lsls	r1, r2
   106f6:	000a      	movs	r2, r1
   106f8:	210b      	movs	r1, #11
   106fa:	1a08      	subs	r0, r1, r0
   106fc:	40c4      	lsrs	r4, r0
   106fe:	055b      	lsls	r3, r3, #21
   10700:	0324      	lsls	r4, r4, #12
   10702:	0b24      	lsrs	r4, r4, #12
   10704:	0d5b      	lsrs	r3, r3, #21
   10706:	e7e6      	b.n	106d6 <__aeabi_ui2d+0x26>
   10708:	2300      	movs	r3, #0
   1070a:	2400      	movs	r4, #0
   1070c:	2200      	movs	r2, #0
   1070e:	e7e2      	b.n	106d6 <__aeabi_ui2d+0x26>
   10710:	0000041e 	.word	0x0000041e
   10714:	00000433 	.word	0x00000433
   10718:	00000413 	.word	0x00000413
   1071c:	800fffff 	.word	0x800fffff

00010720 <__clzsi2>:
   10720:	211c      	movs	r1, #28
   10722:	2301      	movs	r3, #1
   10724:	041b      	lsls	r3, r3, #16
   10726:	4298      	cmp	r0, r3
   10728:	d301      	bcc.n	1072e <__clzsi2+0xe>
   1072a:	0c00      	lsrs	r0, r0, #16
   1072c:	3910      	subs	r1, #16
   1072e:	0a1b      	lsrs	r3, r3, #8
   10730:	4298      	cmp	r0, r3
   10732:	d301      	bcc.n	10738 <__clzsi2+0x18>
   10734:	0a00      	lsrs	r0, r0, #8
   10736:	3908      	subs	r1, #8
   10738:	091b      	lsrs	r3, r3, #4
   1073a:	4298      	cmp	r0, r3
   1073c:	d301      	bcc.n	10742 <__clzsi2+0x22>
   1073e:	0900      	lsrs	r0, r0, #4
   10740:	3904      	subs	r1, #4
   10742:	a202      	add	r2, pc, #8	; (adr r2, 1074c <__clzsi2+0x2c>)
   10744:	5c10      	ldrb	r0, [r2, r0]
   10746:	1840      	adds	r0, r0, r1
   10748:	4770      	bx	lr
   1074a:	46c0      	nop			; (mov r8, r8)
   1074c:	02020304 	.word	0x02020304
   10750:	01010101 	.word	0x01010101
	...

0001075c <__assert_func>:
   1075c:	b530      	push	{r4, r5, lr}
   1075e:	001c      	movs	r4, r3
   10760:	4b09      	ldr	r3, [pc, #36]	; (10788 <__assert_func+0x2c>)
   10762:	0005      	movs	r5, r0
   10764:	681b      	ldr	r3, [r3, #0]
   10766:	b085      	sub	sp, #20
   10768:	68d8      	ldr	r0, [r3, #12]
   1076a:	4b08      	ldr	r3, [pc, #32]	; (1078c <__assert_func+0x30>)
   1076c:	2a00      	cmp	r2, #0
   1076e:	d101      	bne.n	10774 <__assert_func+0x18>
   10770:	4b07      	ldr	r3, [pc, #28]	; (10790 <__assert_func+0x34>)
   10772:	001a      	movs	r2, r3
   10774:	9202      	str	r2, [sp, #8]
   10776:	9301      	str	r3, [sp, #4]
   10778:	9100      	str	r1, [sp, #0]
   1077a:	002b      	movs	r3, r5
   1077c:	0022      	movs	r2, r4
   1077e:	4905      	ldr	r1, [pc, #20]	; (10794 <__assert_func+0x38>)
   10780:	f000 f818 	bl	107b4 <fiprintf>
   10784:	f001 f812 	bl	117ac <abort>
   10788:	200000a4 	.word	0x200000a4
   1078c:	00014198 	.word	0x00014198
   10790:	000141d3 	.word	0x000141d3
   10794:	000141a5 	.word	0x000141a5

00010798 <__cxa_atexit>:
   10798:	b570      	push	{r4, r5, r6, lr}
   1079a:	4c05      	ldr	r4, [pc, #20]	; (107b0 <__cxa_atexit+0x18>)
   1079c:	0005      	movs	r5, r0
   1079e:	0013      	movs	r3, r2
   107a0:	1e20      	subs	r0, r4, #0
   107a2:	d004      	beq.n	107ae <__cxa_atexit+0x16>
   107a4:	000a      	movs	r2, r1
   107a6:	2002      	movs	r0, #2
   107a8:	0029      	movs	r1, r5
   107aa:	e000      	b.n	107ae <__cxa_atexit+0x16>
   107ac:	bf00      	nop
   107ae:	bd70      	pop	{r4, r5, r6, pc}
   107b0:	00000000 	.word	0x00000000

000107b4 <fiprintf>:
   107b4:	b40e      	push	{r1, r2, r3}
   107b6:	b503      	push	{r0, r1, lr}
   107b8:	0001      	movs	r1, r0
   107ba:	ab03      	add	r3, sp, #12
   107bc:	4804      	ldr	r0, [pc, #16]	; (107d0 <fiprintf+0x1c>)
   107be:	cb04      	ldmia	r3!, {r2}
   107c0:	6800      	ldr	r0, [r0, #0]
   107c2:	9301      	str	r3, [sp, #4]
   107c4:	f000 f940 	bl	10a48 <_vfiprintf_r>
   107c8:	b002      	add	sp, #8
   107ca:	bc08      	pop	{r3}
   107cc:	b003      	add	sp, #12
   107ce:	4718      	bx	r3
   107d0:	200000a4 	.word	0x200000a4

000107d4 <__libc_init_array>:
   107d4:	b570      	push	{r4, r5, r6, lr}
   107d6:	2600      	movs	r6, #0
   107d8:	4d0c      	ldr	r5, [pc, #48]	; (1080c <__libc_init_array+0x38>)
   107da:	4c0d      	ldr	r4, [pc, #52]	; (10810 <__libc_init_array+0x3c>)
   107dc:	1b64      	subs	r4, r4, r5
   107de:	10a4      	asrs	r4, r4, #2
   107e0:	42a6      	cmp	r6, r4
   107e2:	d109      	bne.n	107f8 <__libc_init_array+0x24>
   107e4:	2600      	movs	r6, #0
   107e6:	f002 fd2b 	bl	13240 <_init>
   107ea:	4d0a      	ldr	r5, [pc, #40]	; (10814 <__libc_init_array+0x40>)
   107ec:	4c0a      	ldr	r4, [pc, #40]	; (10818 <__libc_init_array+0x44>)
   107ee:	1b64      	subs	r4, r4, r5
   107f0:	10a4      	asrs	r4, r4, #2
   107f2:	42a6      	cmp	r6, r4
   107f4:	d105      	bne.n	10802 <__libc_init_array+0x2e>
   107f6:	bd70      	pop	{r4, r5, r6, pc}
   107f8:	00b3      	lsls	r3, r6, #2
   107fa:	58eb      	ldr	r3, [r5, r3]
   107fc:	4798      	blx	r3
   107fe:	3601      	adds	r6, #1
   10800:	e7ee      	b.n	107e0 <__libc_init_array+0xc>
   10802:	00b3      	lsls	r3, r6, #2
   10804:	58eb      	ldr	r3, [r5, r3]
   10806:	4798      	blx	r3
   10808:	3601      	adds	r6, #1
   1080a:	e7f2      	b.n	107f2 <__libc_init_array+0x1e>
   1080c:	20000274 	.word	0x20000274
   10810:	20000274 	.word	0x20000274
   10814:	20000274 	.word	0x20000274
   10818:	20000298 	.word	0x20000298

0001081c <malloc>:
   1081c:	b510      	push	{r4, lr}
   1081e:	4b03      	ldr	r3, [pc, #12]	; (1082c <malloc+0x10>)
   10820:	0001      	movs	r1, r0
   10822:	6818      	ldr	r0, [r3, #0]
   10824:	f000 f88a 	bl	1093c <_malloc_r>
   10828:	bd10      	pop	{r4, pc}
   1082a:	46c0      	nop			; (mov r8, r8)
   1082c:	200000a4 	.word	0x200000a4

00010830 <free>:
   10830:	b510      	push	{r4, lr}
   10832:	4b03      	ldr	r3, [pc, #12]	; (10840 <free+0x10>)
   10834:	0001      	movs	r1, r0
   10836:	6818      	ldr	r0, [r3, #0]
   10838:	f000 f836 	bl	108a8 <_free_r>
   1083c:	bd10      	pop	{r4, pc}
   1083e:	46c0      	nop			; (mov r8, r8)
   10840:	200000a4 	.word	0x200000a4

00010844 <__ascii_mbtowc>:
   10844:	b082      	sub	sp, #8
   10846:	2900      	cmp	r1, #0
   10848:	d100      	bne.n	1084c <__ascii_mbtowc+0x8>
   1084a:	a901      	add	r1, sp, #4
   1084c:	1e10      	subs	r0, r2, #0
   1084e:	d006      	beq.n	1085e <__ascii_mbtowc+0x1a>
   10850:	2b00      	cmp	r3, #0
   10852:	d006      	beq.n	10862 <__ascii_mbtowc+0x1e>
   10854:	7813      	ldrb	r3, [r2, #0]
   10856:	600b      	str	r3, [r1, #0]
   10858:	7810      	ldrb	r0, [r2, #0]
   1085a:	1e43      	subs	r3, r0, #1
   1085c:	4198      	sbcs	r0, r3
   1085e:	b002      	add	sp, #8
   10860:	4770      	bx	lr
   10862:	2002      	movs	r0, #2
   10864:	4240      	negs	r0, r0
   10866:	e7fa      	b.n	1085e <__ascii_mbtowc+0x1a>

00010868 <memcmp>:
   10868:	b530      	push	{r4, r5, lr}
   1086a:	2400      	movs	r4, #0
   1086c:	42a2      	cmp	r2, r4
   1086e:	d101      	bne.n	10874 <memcmp+0xc>
   10870:	2000      	movs	r0, #0
   10872:	e005      	b.n	10880 <memcmp+0x18>
   10874:	5d03      	ldrb	r3, [r0, r4]
   10876:	1c65      	adds	r5, r4, #1
   10878:	5d0c      	ldrb	r4, [r1, r4]
   1087a:	42a3      	cmp	r3, r4
   1087c:	d001      	beq.n	10882 <memcmp+0x1a>
   1087e:	1b18      	subs	r0, r3, r4
   10880:	bd30      	pop	{r4, r5, pc}
   10882:	002c      	movs	r4, r5
   10884:	e7f2      	b.n	1086c <memcmp+0x4>

00010886 <memcpy>:
   10886:	2300      	movs	r3, #0
   10888:	b510      	push	{r4, lr}
   1088a:	429a      	cmp	r2, r3
   1088c:	d100      	bne.n	10890 <memcpy+0xa>
   1088e:	bd10      	pop	{r4, pc}
   10890:	5ccc      	ldrb	r4, [r1, r3]
   10892:	54c4      	strb	r4, [r0, r3]
   10894:	3301      	adds	r3, #1
   10896:	e7f8      	b.n	1088a <memcpy+0x4>

00010898 <memset>:
   10898:	0003      	movs	r3, r0
   1089a:	1882      	adds	r2, r0, r2
   1089c:	4293      	cmp	r3, r2
   1089e:	d100      	bne.n	108a2 <memset+0xa>
   108a0:	4770      	bx	lr
   108a2:	7019      	strb	r1, [r3, #0]
   108a4:	3301      	adds	r3, #1
   108a6:	e7f9      	b.n	1089c <memset+0x4>

000108a8 <_free_r>:
   108a8:	b570      	push	{r4, r5, r6, lr}
   108aa:	0005      	movs	r5, r0
   108ac:	2900      	cmp	r1, #0
   108ae:	d010      	beq.n	108d2 <_free_r+0x2a>
   108b0:	1f0c      	subs	r4, r1, #4
   108b2:	6823      	ldr	r3, [r4, #0]
   108b4:	2b00      	cmp	r3, #0
   108b6:	da00      	bge.n	108ba <_free_r+0x12>
   108b8:	18e4      	adds	r4, r4, r3
   108ba:	0028      	movs	r0, r5
   108bc:	f001 fffb 	bl	128b6 <__malloc_lock>
   108c0:	4a1d      	ldr	r2, [pc, #116]	; (10938 <_free_r+0x90>)
   108c2:	6813      	ldr	r3, [r2, #0]
   108c4:	2b00      	cmp	r3, #0
   108c6:	d105      	bne.n	108d4 <_free_r+0x2c>
   108c8:	6063      	str	r3, [r4, #4]
   108ca:	6014      	str	r4, [r2, #0]
   108cc:	0028      	movs	r0, r5
   108ce:	f001 fff3 	bl	128b8 <__malloc_unlock>
   108d2:	bd70      	pop	{r4, r5, r6, pc}
   108d4:	42a3      	cmp	r3, r4
   108d6:	d909      	bls.n	108ec <_free_r+0x44>
   108d8:	6821      	ldr	r1, [r4, #0]
   108da:	1860      	adds	r0, r4, r1
   108dc:	4283      	cmp	r3, r0
   108de:	d1f3      	bne.n	108c8 <_free_r+0x20>
   108e0:	6818      	ldr	r0, [r3, #0]
   108e2:	685b      	ldr	r3, [r3, #4]
   108e4:	1841      	adds	r1, r0, r1
   108e6:	6021      	str	r1, [r4, #0]
   108e8:	e7ee      	b.n	108c8 <_free_r+0x20>
   108ea:	0013      	movs	r3, r2
   108ec:	685a      	ldr	r2, [r3, #4]
   108ee:	2a00      	cmp	r2, #0
   108f0:	d001      	beq.n	108f6 <_free_r+0x4e>
   108f2:	42a2      	cmp	r2, r4
   108f4:	d9f9      	bls.n	108ea <_free_r+0x42>
   108f6:	6819      	ldr	r1, [r3, #0]
   108f8:	1858      	adds	r0, r3, r1
   108fa:	42a0      	cmp	r0, r4
   108fc:	d10b      	bne.n	10916 <_free_r+0x6e>
   108fe:	6820      	ldr	r0, [r4, #0]
   10900:	1809      	adds	r1, r1, r0
   10902:	1858      	adds	r0, r3, r1
   10904:	6019      	str	r1, [r3, #0]
   10906:	4282      	cmp	r2, r0
   10908:	d1e0      	bne.n	108cc <_free_r+0x24>
   1090a:	6810      	ldr	r0, [r2, #0]
   1090c:	6852      	ldr	r2, [r2, #4]
   1090e:	1841      	adds	r1, r0, r1
   10910:	6019      	str	r1, [r3, #0]
   10912:	605a      	str	r2, [r3, #4]
   10914:	e7da      	b.n	108cc <_free_r+0x24>
   10916:	42a0      	cmp	r0, r4
   10918:	d902      	bls.n	10920 <_free_r+0x78>
   1091a:	230c      	movs	r3, #12
   1091c:	602b      	str	r3, [r5, #0]
   1091e:	e7d5      	b.n	108cc <_free_r+0x24>
   10920:	6821      	ldr	r1, [r4, #0]
   10922:	1860      	adds	r0, r4, r1
   10924:	4282      	cmp	r2, r0
   10926:	d103      	bne.n	10930 <_free_r+0x88>
   10928:	6810      	ldr	r0, [r2, #0]
   1092a:	6852      	ldr	r2, [r2, #4]
   1092c:	1841      	adds	r1, r0, r1
   1092e:	6021      	str	r1, [r4, #0]
   10930:	6062      	str	r2, [r4, #4]
   10932:	605c      	str	r4, [r3, #4]
   10934:	e7ca      	b.n	108cc <_free_r+0x24>
   10936:	46c0      	nop			; (mov r8, r8)
   10938:	20000f78 	.word	0x20000f78

0001093c <_malloc_r>:
   1093c:	2303      	movs	r3, #3
   1093e:	b570      	push	{r4, r5, r6, lr}
   10940:	1ccd      	adds	r5, r1, #3
   10942:	439d      	bics	r5, r3
   10944:	3508      	adds	r5, #8
   10946:	0006      	movs	r6, r0
   10948:	2d0c      	cmp	r5, #12
   1094a:	d21e      	bcs.n	1098a <_malloc_r+0x4e>
   1094c:	250c      	movs	r5, #12
   1094e:	42a9      	cmp	r1, r5
   10950:	d81d      	bhi.n	1098e <_malloc_r+0x52>
   10952:	0030      	movs	r0, r6
   10954:	f001 ffaf 	bl	128b6 <__malloc_lock>
   10958:	4a25      	ldr	r2, [pc, #148]	; (109f0 <_malloc_r+0xb4>)
   1095a:	6814      	ldr	r4, [r2, #0]
   1095c:	0021      	movs	r1, r4
   1095e:	2900      	cmp	r1, #0
   10960:	d119      	bne.n	10996 <_malloc_r+0x5a>
   10962:	4c24      	ldr	r4, [pc, #144]	; (109f4 <_malloc_r+0xb8>)
   10964:	6823      	ldr	r3, [r4, #0]
   10966:	2b00      	cmp	r3, #0
   10968:	d103      	bne.n	10972 <_malloc_r+0x36>
   1096a:	0030      	movs	r0, r6
   1096c:	f000 fe02 	bl	11574 <_sbrk_r>
   10970:	6020      	str	r0, [r4, #0]
   10972:	0029      	movs	r1, r5
   10974:	0030      	movs	r0, r6
   10976:	f000 fdfd 	bl	11574 <_sbrk_r>
   1097a:	1c43      	adds	r3, r0, #1
   1097c:	d12c      	bne.n	109d8 <_malloc_r+0x9c>
   1097e:	230c      	movs	r3, #12
   10980:	0030      	movs	r0, r6
   10982:	6033      	str	r3, [r6, #0]
   10984:	f001 ff98 	bl	128b8 <__malloc_unlock>
   10988:	e003      	b.n	10992 <_malloc_r+0x56>
   1098a:	2d00      	cmp	r5, #0
   1098c:	dadf      	bge.n	1094e <_malloc_r+0x12>
   1098e:	230c      	movs	r3, #12
   10990:	6033      	str	r3, [r6, #0]
   10992:	2000      	movs	r0, #0
   10994:	bd70      	pop	{r4, r5, r6, pc}
   10996:	680b      	ldr	r3, [r1, #0]
   10998:	1b5b      	subs	r3, r3, r5
   1099a:	d41a      	bmi.n	109d2 <_malloc_r+0x96>
   1099c:	2b0b      	cmp	r3, #11
   1099e:	d903      	bls.n	109a8 <_malloc_r+0x6c>
   109a0:	600b      	str	r3, [r1, #0]
   109a2:	18cc      	adds	r4, r1, r3
   109a4:	6025      	str	r5, [r4, #0]
   109a6:	e003      	b.n	109b0 <_malloc_r+0x74>
   109a8:	428c      	cmp	r4, r1
   109aa:	d10e      	bne.n	109ca <_malloc_r+0x8e>
   109ac:	6863      	ldr	r3, [r4, #4]
   109ae:	6013      	str	r3, [r2, #0]
   109b0:	0030      	movs	r0, r6
   109b2:	f001 ff81 	bl	128b8 <__malloc_unlock>
   109b6:	0020      	movs	r0, r4
   109b8:	2207      	movs	r2, #7
   109ba:	300b      	adds	r0, #11
   109bc:	1d23      	adds	r3, r4, #4
   109be:	4390      	bics	r0, r2
   109c0:	1ac3      	subs	r3, r0, r3
   109c2:	d0e7      	beq.n	10994 <_malloc_r+0x58>
   109c4:	425a      	negs	r2, r3
   109c6:	50e2      	str	r2, [r4, r3]
   109c8:	e7e4      	b.n	10994 <_malloc_r+0x58>
   109ca:	684b      	ldr	r3, [r1, #4]
   109cc:	6063      	str	r3, [r4, #4]
   109ce:	000c      	movs	r4, r1
   109d0:	e7ee      	b.n	109b0 <_malloc_r+0x74>
   109d2:	000c      	movs	r4, r1
   109d4:	6849      	ldr	r1, [r1, #4]
   109d6:	e7c2      	b.n	1095e <_malloc_r+0x22>
   109d8:	2303      	movs	r3, #3
   109da:	1cc4      	adds	r4, r0, #3
   109dc:	439c      	bics	r4, r3
   109de:	42a0      	cmp	r0, r4
   109e0:	d0e0      	beq.n	109a4 <_malloc_r+0x68>
   109e2:	1a21      	subs	r1, r4, r0
   109e4:	0030      	movs	r0, r6
   109e6:	f000 fdc5 	bl	11574 <_sbrk_r>
   109ea:	1c43      	adds	r3, r0, #1
   109ec:	d1da      	bne.n	109a4 <_malloc_r+0x68>
   109ee:	e7c6      	b.n	1097e <_malloc_r+0x42>
   109f0:	20000f78 	.word	0x20000f78
   109f4:	20000f7c 	.word	0x20000f7c

000109f8 <__sfputc_r>:
   109f8:	6893      	ldr	r3, [r2, #8]
   109fa:	b510      	push	{r4, lr}
   109fc:	3b01      	subs	r3, #1
   109fe:	6093      	str	r3, [r2, #8]
   10a00:	2b00      	cmp	r3, #0
   10a02:	da05      	bge.n	10a10 <__sfputc_r+0x18>
   10a04:	6994      	ldr	r4, [r2, #24]
   10a06:	42a3      	cmp	r3, r4
   10a08:	db08      	blt.n	10a1c <__sfputc_r+0x24>
   10a0a:	b2cb      	uxtb	r3, r1
   10a0c:	2b0a      	cmp	r3, #10
   10a0e:	d005      	beq.n	10a1c <__sfputc_r+0x24>
   10a10:	6813      	ldr	r3, [r2, #0]
   10a12:	1c58      	adds	r0, r3, #1
   10a14:	6010      	str	r0, [r2, #0]
   10a16:	7019      	strb	r1, [r3, #0]
   10a18:	b2c8      	uxtb	r0, r1
   10a1a:	bd10      	pop	{r4, pc}
   10a1c:	f000 fdee 	bl	115fc <__swbuf_r>
   10a20:	e7fb      	b.n	10a1a <__sfputc_r+0x22>

00010a22 <__sfputs_r>:
   10a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a24:	0006      	movs	r6, r0
   10a26:	000f      	movs	r7, r1
   10a28:	0014      	movs	r4, r2
   10a2a:	18d5      	adds	r5, r2, r3
   10a2c:	42ac      	cmp	r4, r5
   10a2e:	d101      	bne.n	10a34 <__sfputs_r+0x12>
   10a30:	2000      	movs	r0, #0
   10a32:	e007      	b.n	10a44 <__sfputs_r+0x22>
   10a34:	7821      	ldrb	r1, [r4, #0]
   10a36:	003a      	movs	r2, r7
   10a38:	0030      	movs	r0, r6
   10a3a:	f7ff ffdd 	bl	109f8 <__sfputc_r>
   10a3e:	3401      	adds	r4, #1
   10a40:	1c43      	adds	r3, r0, #1
   10a42:	d1f3      	bne.n	10a2c <__sfputs_r+0xa>
   10a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00010a48 <_vfiprintf_r>:
   10a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a4a:	b09f      	sub	sp, #124	; 0x7c
   10a4c:	0006      	movs	r6, r0
   10a4e:	000f      	movs	r7, r1
   10a50:	0014      	movs	r4, r2
   10a52:	9305      	str	r3, [sp, #20]
   10a54:	2800      	cmp	r0, #0
   10a56:	d004      	beq.n	10a62 <_vfiprintf_r+0x1a>
   10a58:	6983      	ldr	r3, [r0, #24]
   10a5a:	2b00      	cmp	r3, #0
   10a5c:	d101      	bne.n	10a62 <_vfiprintf_r+0x1a>
   10a5e:	f001 fe11 	bl	12684 <__sinit>
   10a62:	4b7f      	ldr	r3, [pc, #508]	; (10c60 <_vfiprintf_r+0x218>)
   10a64:	429f      	cmp	r7, r3
   10a66:	d15c      	bne.n	10b22 <_vfiprintf_r+0xda>
   10a68:	6877      	ldr	r7, [r6, #4]
   10a6a:	89bb      	ldrh	r3, [r7, #12]
   10a6c:	071b      	lsls	r3, r3, #28
   10a6e:	d562      	bpl.n	10b36 <_vfiprintf_r+0xee>
   10a70:	693b      	ldr	r3, [r7, #16]
   10a72:	2b00      	cmp	r3, #0
   10a74:	d05f      	beq.n	10b36 <_vfiprintf_r+0xee>
   10a76:	2300      	movs	r3, #0
   10a78:	ad06      	add	r5, sp, #24
   10a7a:	616b      	str	r3, [r5, #20]
   10a7c:	3320      	adds	r3, #32
   10a7e:	766b      	strb	r3, [r5, #25]
   10a80:	3310      	adds	r3, #16
   10a82:	76ab      	strb	r3, [r5, #26]
   10a84:	9402      	str	r4, [sp, #8]
   10a86:	9c02      	ldr	r4, [sp, #8]
   10a88:	7823      	ldrb	r3, [r4, #0]
   10a8a:	2b00      	cmp	r3, #0
   10a8c:	d15d      	bne.n	10b4a <_vfiprintf_r+0x102>
   10a8e:	9b02      	ldr	r3, [sp, #8]
   10a90:	1ae3      	subs	r3, r4, r3
   10a92:	9304      	str	r3, [sp, #16]
   10a94:	d00d      	beq.n	10ab2 <_vfiprintf_r+0x6a>
   10a96:	9b04      	ldr	r3, [sp, #16]
   10a98:	9a02      	ldr	r2, [sp, #8]
   10a9a:	0039      	movs	r1, r7
   10a9c:	0030      	movs	r0, r6
   10a9e:	f7ff ffc0 	bl	10a22 <__sfputs_r>
   10aa2:	1c43      	adds	r3, r0, #1
   10aa4:	d100      	bne.n	10aa8 <_vfiprintf_r+0x60>
   10aa6:	e0cc      	b.n	10c42 <_vfiprintf_r+0x1fa>
   10aa8:	696a      	ldr	r2, [r5, #20]
   10aaa:	9b04      	ldr	r3, [sp, #16]
   10aac:	4694      	mov	ip, r2
   10aae:	4463      	add	r3, ip
   10ab0:	616b      	str	r3, [r5, #20]
   10ab2:	7823      	ldrb	r3, [r4, #0]
   10ab4:	2b00      	cmp	r3, #0
   10ab6:	d100      	bne.n	10aba <_vfiprintf_r+0x72>
   10ab8:	e0c3      	b.n	10c42 <_vfiprintf_r+0x1fa>
   10aba:	2201      	movs	r2, #1
   10abc:	2300      	movs	r3, #0
   10abe:	4252      	negs	r2, r2
   10ac0:	606a      	str	r2, [r5, #4]
   10ac2:	a902      	add	r1, sp, #8
   10ac4:	3254      	adds	r2, #84	; 0x54
   10ac6:	1852      	adds	r2, r2, r1
   10ac8:	3401      	adds	r4, #1
   10aca:	602b      	str	r3, [r5, #0]
   10acc:	60eb      	str	r3, [r5, #12]
   10ace:	60ab      	str	r3, [r5, #8]
   10ad0:	7013      	strb	r3, [r2, #0]
   10ad2:	65ab      	str	r3, [r5, #88]	; 0x58
   10ad4:	7821      	ldrb	r1, [r4, #0]
   10ad6:	2205      	movs	r2, #5
   10ad8:	4862      	ldr	r0, [pc, #392]	; (10c64 <_vfiprintf_r+0x21c>)
   10ada:	f001 fee1 	bl	128a0 <memchr>
   10ade:	1c63      	adds	r3, r4, #1
   10ae0:	469c      	mov	ip, r3
   10ae2:	2800      	cmp	r0, #0
   10ae4:	d135      	bne.n	10b52 <_vfiprintf_r+0x10a>
   10ae6:	6829      	ldr	r1, [r5, #0]
   10ae8:	06cb      	lsls	r3, r1, #27
   10aea:	d504      	bpl.n	10af6 <_vfiprintf_r+0xae>
   10aec:	2353      	movs	r3, #83	; 0x53
   10aee:	aa02      	add	r2, sp, #8
   10af0:	3020      	adds	r0, #32
   10af2:	189b      	adds	r3, r3, r2
   10af4:	7018      	strb	r0, [r3, #0]
   10af6:	070b      	lsls	r3, r1, #28
   10af8:	d504      	bpl.n	10b04 <_vfiprintf_r+0xbc>
   10afa:	2353      	movs	r3, #83	; 0x53
   10afc:	202b      	movs	r0, #43	; 0x2b
   10afe:	aa02      	add	r2, sp, #8
   10b00:	189b      	adds	r3, r3, r2
   10b02:	7018      	strb	r0, [r3, #0]
   10b04:	7823      	ldrb	r3, [r4, #0]
   10b06:	2b2a      	cmp	r3, #42	; 0x2a
   10b08:	d02c      	beq.n	10b64 <_vfiprintf_r+0x11c>
   10b0a:	2000      	movs	r0, #0
   10b0c:	210a      	movs	r1, #10
   10b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10b10:	7822      	ldrb	r2, [r4, #0]
   10b12:	3a30      	subs	r2, #48	; 0x30
   10b14:	2a09      	cmp	r2, #9
   10b16:	d800      	bhi.n	10b1a <_vfiprintf_r+0xd2>
   10b18:	e06b      	b.n	10bf2 <_vfiprintf_r+0x1aa>
   10b1a:	2800      	cmp	r0, #0
   10b1c:	d02a      	beq.n	10b74 <_vfiprintf_r+0x12c>
   10b1e:	9309      	str	r3, [sp, #36]	; 0x24
   10b20:	e028      	b.n	10b74 <_vfiprintf_r+0x12c>
   10b22:	4b51      	ldr	r3, [pc, #324]	; (10c68 <_vfiprintf_r+0x220>)
   10b24:	429f      	cmp	r7, r3
   10b26:	d101      	bne.n	10b2c <_vfiprintf_r+0xe4>
   10b28:	68b7      	ldr	r7, [r6, #8]
   10b2a:	e79e      	b.n	10a6a <_vfiprintf_r+0x22>
   10b2c:	4b4f      	ldr	r3, [pc, #316]	; (10c6c <_vfiprintf_r+0x224>)
   10b2e:	429f      	cmp	r7, r3
   10b30:	d19b      	bne.n	10a6a <_vfiprintf_r+0x22>
   10b32:	68f7      	ldr	r7, [r6, #12]
   10b34:	e799      	b.n	10a6a <_vfiprintf_r+0x22>
   10b36:	0039      	movs	r1, r7
   10b38:	0030      	movs	r0, r6
   10b3a:	f000 fdc1 	bl	116c0 <__swsetup_r>
   10b3e:	2800      	cmp	r0, #0
   10b40:	d099      	beq.n	10a76 <_vfiprintf_r+0x2e>
   10b42:	2001      	movs	r0, #1
   10b44:	4240      	negs	r0, r0
   10b46:	b01f      	add	sp, #124	; 0x7c
   10b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b4a:	2b25      	cmp	r3, #37	; 0x25
   10b4c:	d09f      	beq.n	10a8e <_vfiprintf_r+0x46>
   10b4e:	3401      	adds	r4, #1
   10b50:	e79a      	b.n	10a88 <_vfiprintf_r+0x40>
   10b52:	4b44      	ldr	r3, [pc, #272]	; (10c64 <_vfiprintf_r+0x21c>)
   10b54:	6829      	ldr	r1, [r5, #0]
   10b56:	1ac0      	subs	r0, r0, r3
   10b58:	2301      	movs	r3, #1
   10b5a:	4083      	lsls	r3, r0
   10b5c:	430b      	orrs	r3, r1
   10b5e:	602b      	str	r3, [r5, #0]
   10b60:	4664      	mov	r4, ip
   10b62:	e7b7      	b.n	10ad4 <_vfiprintf_r+0x8c>
   10b64:	9b05      	ldr	r3, [sp, #20]
   10b66:	1d18      	adds	r0, r3, #4
   10b68:	681b      	ldr	r3, [r3, #0]
   10b6a:	9005      	str	r0, [sp, #20]
   10b6c:	2b00      	cmp	r3, #0
   10b6e:	db3a      	blt.n	10be6 <_vfiprintf_r+0x19e>
   10b70:	9309      	str	r3, [sp, #36]	; 0x24
   10b72:	4664      	mov	r4, ip
   10b74:	7823      	ldrb	r3, [r4, #0]
   10b76:	2b2e      	cmp	r3, #46	; 0x2e
   10b78:	d10b      	bne.n	10b92 <_vfiprintf_r+0x14a>
   10b7a:	7863      	ldrb	r3, [r4, #1]
   10b7c:	1c62      	adds	r2, r4, #1
   10b7e:	2b2a      	cmp	r3, #42	; 0x2a
   10b80:	d13f      	bne.n	10c02 <_vfiprintf_r+0x1ba>
   10b82:	9b05      	ldr	r3, [sp, #20]
   10b84:	3402      	adds	r4, #2
   10b86:	1d1a      	adds	r2, r3, #4
   10b88:	681b      	ldr	r3, [r3, #0]
   10b8a:	9205      	str	r2, [sp, #20]
   10b8c:	2b00      	cmp	r3, #0
   10b8e:	db35      	blt.n	10bfc <_vfiprintf_r+0x1b4>
   10b90:	9307      	str	r3, [sp, #28]
   10b92:	7821      	ldrb	r1, [r4, #0]
   10b94:	2203      	movs	r2, #3
   10b96:	4836      	ldr	r0, [pc, #216]	; (10c70 <_vfiprintf_r+0x228>)
   10b98:	f001 fe82 	bl	128a0 <memchr>
   10b9c:	2800      	cmp	r0, #0
   10b9e:	d007      	beq.n	10bb0 <_vfiprintf_r+0x168>
   10ba0:	4b33      	ldr	r3, [pc, #204]	; (10c70 <_vfiprintf_r+0x228>)
   10ba2:	682a      	ldr	r2, [r5, #0]
   10ba4:	1ac0      	subs	r0, r0, r3
   10ba6:	2340      	movs	r3, #64	; 0x40
   10ba8:	4083      	lsls	r3, r0
   10baa:	4313      	orrs	r3, r2
   10bac:	602b      	str	r3, [r5, #0]
   10bae:	3401      	adds	r4, #1
   10bb0:	7821      	ldrb	r1, [r4, #0]
   10bb2:	1c63      	adds	r3, r4, #1
   10bb4:	2206      	movs	r2, #6
   10bb6:	482f      	ldr	r0, [pc, #188]	; (10c74 <_vfiprintf_r+0x22c>)
   10bb8:	9302      	str	r3, [sp, #8]
   10bba:	7629      	strb	r1, [r5, #24]
   10bbc:	f001 fe70 	bl	128a0 <memchr>
   10bc0:	2800      	cmp	r0, #0
   10bc2:	d044      	beq.n	10c4e <_vfiprintf_r+0x206>
   10bc4:	4b2c      	ldr	r3, [pc, #176]	; (10c78 <_vfiprintf_r+0x230>)
   10bc6:	2b00      	cmp	r3, #0
   10bc8:	d12f      	bne.n	10c2a <_vfiprintf_r+0x1e2>
   10bca:	6829      	ldr	r1, [r5, #0]
   10bcc:	9b05      	ldr	r3, [sp, #20]
   10bce:	2207      	movs	r2, #7
   10bd0:	05c9      	lsls	r1, r1, #23
   10bd2:	d528      	bpl.n	10c26 <_vfiprintf_r+0x1de>
   10bd4:	189b      	adds	r3, r3, r2
   10bd6:	4393      	bics	r3, r2
   10bd8:	3308      	adds	r3, #8
   10bda:	9305      	str	r3, [sp, #20]
   10bdc:	696b      	ldr	r3, [r5, #20]
   10bde:	9a03      	ldr	r2, [sp, #12]
   10be0:	189b      	adds	r3, r3, r2
   10be2:	616b      	str	r3, [r5, #20]
   10be4:	e74f      	b.n	10a86 <_vfiprintf_r+0x3e>
   10be6:	425b      	negs	r3, r3
   10be8:	60eb      	str	r3, [r5, #12]
   10bea:	2302      	movs	r3, #2
   10bec:	430b      	orrs	r3, r1
   10bee:	602b      	str	r3, [r5, #0]
   10bf0:	e7bf      	b.n	10b72 <_vfiprintf_r+0x12a>
   10bf2:	434b      	muls	r3, r1
   10bf4:	3401      	adds	r4, #1
   10bf6:	189b      	adds	r3, r3, r2
   10bf8:	2001      	movs	r0, #1
   10bfa:	e789      	b.n	10b10 <_vfiprintf_r+0xc8>
   10bfc:	2301      	movs	r3, #1
   10bfe:	425b      	negs	r3, r3
   10c00:	e7c6      	b.n	10b90 <_vfiprintf_r+0x148>
   10c02:	2300      	movs	r3, #0
   10c04:	0014      	movs	r4, r2
   10c06:	200a      	movs	r0, #10
   10c08:	001a      	movs	r2, r3
   10c0a:	606b      	str	r3, [r5, #4]
   10c0c:	7821      	ldrb	r1, [r4, #0]
   10c0e:	3930      	subs	r1, #48	; 0x30
   10c10:	2909      	cmp	r1, #9
   10c12:	d903      	bls.n	10c1c <_vfiprintf_r+0x1d4>
   10c14:	2b00      	cmp	r3, #0
   10c16:	d0bc      	beq.n	10b92 <_vfiprintf_r+0x14a>
   10c18:	9207      	str	r2, [sp, #28]
   10c1a:	e7ba      	b.n	10b92 <_vfiprintf_r+0x14a>
   10c1c:	4342      	muls	r2, r0
   10c1e:	3401      	adds	r4, #1
   10c20:	1852      	adds	r2, r2, r1
   10c22:	2301      	movs	r3, #1
   10c24:	e7f2      	b.n	10c0c <_vfiprintf_r+0x1c4>
   10c26:	3307      	adds	r3, #7
   10c28:	e7d5      	b.n	10bd6 <_vfiprintf_r+0x18e>
   10c2a:	ab05      	add	r3, sp, #20
   10c2c:	9300      	str	r3, [sp, #0]
   10c2e:	003a      	movs	r2, r7
   10c30:	4b12      	ldr	r3, [pc, #72]	; (10c7c <_vfiprintf_r+0x234>)
   10c32:	0029      	movs	r1, r5
   10c34:	0030      	movs	r0, r6
   10c36:	f000 f8bf 	bl	10db8 <_printf_float>
   10c3a:	9003      	str	r0, [sp, #12]
   10c3c:	9b03      	ldr	r3, [sp, #12]
   10c3e:	3301      	adds	r3, #1
   10c40:	d1cc      	bne.n	10bdc <_vfiprintf_r+0x194>
   10c42:	89bb      	ldrh	r3, [r7, #12]
   10c44:	065b      	lsls	r3, r3, #25
   10c46:	d500      	bpl.n	10c4a <_vfiprintf_r+0x202>
   10c48:	e77b      	b.n	10b42 <_vfiprintf_r+0xfa>
   10c4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10c4c:	e77b      	b.n	10b46 <_vfiprintf_r+0xfe>
   10c4e:	ab05      	add	r3, sp, #20
   10c50:	9300      	str	r3, [sp, #0]
   10c52:	003a      	movs	r2, r7
   10c54:	4b09      	ldr	r3, [pc, #36]	; (10c7c <_vfiprintf_r+0x234>)
   10c56:	0029      	movs	r1, r5
   10c58:	0030      	movs	r0, r6
   10c5a:	f000 fb67 	bl	1132c <_printf_i>
   10c5e:	e7ec      	b.n	10c3a <_vfiprintf_r+0x1f2>
   10c60:	00014358 	.word	0x00014358
   10c64:	000141e2 	.word	0x000141e2
   10c68:	00014378 	.word	0x00014378
   10c6c:	00014338 	.word	0x00014338
   10c70:	000141e8 	.word	0x000141e8
   10c74:	000141ec 	.word	0x000141ec
   10c78:	00010db9 	.word	0x00010db9
   10c7c:	00010a23 	.word	0x00010a23

00010c80 <__cvt>:
   10c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c82:	b08b      	sub	sp, #44	; 0x2c
   10c84:	0014      	movs	r4, r2
   10c86:	1e1d      	subs	r5, r3, #0
   10c88:	9912      	ldr	r1, [sp, #72]	; 0x48
   10c8a:	da53      	bge.n	10d34 <__cvt+0xb4>
   10c8c:	2480      	movs	r4, #128	; 0x80
   10c8e:	0624      	lsls	r4, r4, #24
   10c90:	191b      	adds	r3, r3, r4
   10c92:	001d      	movs	r5, r3
   10c94:	0014      	movs	r4, r2
   10c96:	232d      	movs	r3, #45	; 0x2d
   10c98:	700b      	strb	r3, [r1, #0]
   10c9a:	2320      	movs	r3, #32
   10c9c:	9e14      	ldr	r6, [sp, #80]	; 0x50
   10c9e:	2203      	movs	r2, #3
   10ca0:	439e      	bics	r6, r3
   10ca2:	2e46      	cmp	r6, #70	; 0x46
   10ca4:	d007      	beq.n	10cb6 <__cvt+0x36>
   10ca6:	0033      	movs	r3, r6
   10ca8:	3b45      	subs	r3, #69	; 0x45
   10caa:	4259      	negs	r1, r3
   10cac:	414b      	adcs	r3, r1
   10cae:	9910      	ldr	r1, [sp, #64]	; 0x40
   10cb0:	3a01      	subs	r2, #1
   10cb2:	18cb      	adds	r3, r1, r3
   10cb4:	9310      	str	r3, [sp, #64]	; 0x40
   10cb6:	ab09      	add	r3, sp, #36	; 0x24
   10cb8:	9304      	str	r3, [sp, #16]
   10cba:	ab08      	add	r3, sp, #32
   10cbc:	9303      	str	r3, [sp, #12]
   10cbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10cc0:	9200      	str	r2, [sp, #0]
   10cc2:	9302      	str	r3, [sp, #8]
   10cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10cc6:	0022      	movs	r2, r4
   10cc8:	9301      	str	r3, [sp, #4]
   10cca:	002b      	movs	r3, r5
   10ccc:	f000 fdfa 	bl	118c4 <_dtoa_r>
   10cd0:	0007      	movs	r7, r0
   10cd2:	2e47      	cmp	r6, #71	; 0x47
   10cd4:	d102      	bne.n	10cdc <__cvt+0x5c>
   10cd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10cd8:	07db      	lsls	r3, r3, #31
   10cda:	d524      	bpl.n	10d26 <__cvt+0xa6>
   10cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10cde:	18fb      	adds	r3, r7, r3
   10ce0:	9307      	str	r3, [sp, #28]
   10ce2:	2e46      	cmp	r6, #70	; 0x46
   10ce4:	d114      	bne.n	10d10 <__cvt+0x90>
   10ce6:	783b      	ldrb	r3, [r7, #0]
   10ce8:	2b30      	cmp	r3, #48	; 0x30
   10cea:	d10c      	bne.n	10d06 <__cvt+0x86>
   10cec:	2200      	movs	r2, #0
   10cee:	2300      	movs	r3, #0
   10cf0:	0020      	movs	r0, r4
   10cf2:	0029      	movs	r1, r5
   10cf4:	f7fd ff80 	bl	ebf8 <__aeabi_dcmpeq>
   10cf8:	2800      	cmp	r0, #0
   10cfa:	d104      	bne.n	10d06 <__cvt+0x86>
   10cfc:	2301      	movs	r3, #1
   10cfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10d00:	1a9b      	subs	r3, r3, r2
   10d02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10d04:	6013      	str	r3, [r2, #0]
   10d06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10d08:	9a07      	ldr	r2, [sp, #28]
   10d0a:	681b      	ldr	r3, [r3, #0]
   10d0c:	18d3      	adds	r3, r2, r3
   10d0e:	9307      	str	r3, [sp, #28]
   10d10:	2200      	movs	r2, #0
   10d12:	2300      	movs	r3, #0
   10d14:	0020      	movs	r0, r4
   10d16:	0029      	movs	r1, r5
   10d18:	f7fd ff6e 	bl	ebf8 <__aeabi_dcmpeq>
   10d1c:	2230      	movs	r2, #48	; 0x30
   10d1e:	2800      	cmp	r0, #0
   10d20:	d00d      	beq.n	10d3e <__cvt+0xbe>
   10d22:	9b07      	ldr	r3, [sp, #28]
   10d24:	9309      	str	r3, [sp, #36]	; 0x24
   10d26:	0038      	movs	r0, r7
   10d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10d2c:	1bdb      	subs	r3, r3, r7
   10d2e:	6013      	str	r3, [r2, #0]
   10d30:	b00b      	add	sp, #44	; 0x2c
   10d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d34:	2300      	movs	r3, #0
   10d36:	e7af      	b.n	10c98 <__cvt+0x18>
   10d38:	1c59      	adds	r1, r3, #1
   10d3a:	9109      	str	r1, [sp, #36]	; 0x24
   10d3c:	701a      	strb	r2, [r3, #0]
   10d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d40:	9907      	ldr	r1, [sp, #28]
   10d42:	4299      	cmp	r1, r3
   10d44:	d8f8      	bhi.n	10d38 <__cvt+0xb8>
   10d46:	e7ee      	b.n	10d26 <__cvt+0xa6>

00010d48 <__exponent>:
   10d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d4a:	232b      	movs	r3, #43	; 0x2b
   10d4c:	b085      	sub	sp, #20
   10d4e:	0007      	movs	r7, r0
   10d50:	000c      	movs	r4, r1
   10d52:	7002      	strb	r2, [r0, #0]
   10d54:	1c86      	adds	r6, r0, #2
   10d56:	2900      	cmp	r1, #0
   10d58:	da01      	bge.n	10d5e <__exponent+0x16>
   10d5a:	232d      	movs	r3, #45	; 0x2d
   10d5c:	424c      	negs	r4, r1
   10d5e:	707b      	strb	r3, [r7, #1]
   10d60:	2c09      	cmp	r4, #9
   10d62:	dd23      	ble.n	10dac <__exponent+0x64>
   10d64:	ab02      	add	r3, sp, #8
   10d66:	1ddd      	adds	r5, r3, #7
   10d68:	1e6b      	subs	r3, r5, #1
   10d6a:	0020      	movs	r0, r4
   10d6c:	210a      	movs	r1, #10
   10d6e:	9301      	str	r3, [sp, #4]
   10d70:	f7fd ff2c 	bl	ebcc <__aeabi_idivmod>
   10d74:	1e6b      	subs	r3, r5, #1
   10d76:	3130      	adds	r1, #48	; 0x30
   10d78:	7019      	strb	r1, [r3, #0]
   10d7a:	0020      	movs	r0, r4
   10d7c:	210a      	movs	r1, #10
   10d7e:	f7fd fe3f 	bl	ea00 <__divsi3>
   10d82:	0004      	movs	r4, r0
   10d84:	2809      	cmp	r0, #9
   10d86:	dc0a      	bgt.n	10d9e <__exponent+0x56>
   10d88:	3d02      	subs	r5, #2
   10d8a:	3430      	adds	r4, #48	; 0x30
   10d8c:	702c      	strb	r4, [r5, #0]
   10d8e:	ab02      	add	r3, sp, #8
   10d90:	3307      	adds	r3, #7
   10d92:	0030      	movs	r0, r6
   10d94:	42ab      	cmp	r3, r5
   10d96:	d804      	bhi.n	10da2 <__exponent+0x5a>
   10d98:	1bc0      	subs	r0, r0, r7
   10d9a:	b005      	add	sp, #20
   10d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d9e:	9d01      	ldr	r5, [sp, #4]
   10da0:	e7e2      	b.n	10d68 <__exponent+0x20>
   10da2:	782b      	ldrb	r3, [r5, #0]
   10da4:	3501      	adds	r5, #1
   10da6:	7033      	strb	r3, [r6, #0]
   10da8:	3601      	adds	r6, #1
   10daa:	e7f0      	b.n	10d8e <__exponent+0x46>
   10dac:	2330      	movs	r3, #48	; 0x30
   10dae:	18e4      	adds	r4, r4, r3
   10db0:	7033      	strb	r3, [r6, #0]
   10db2:	1cb0      	adds	r0, r6, #2
   10db4:	7074      	strb	r4, [r6, #1]
   10db6:	e7ef      	b.n	10d98 <__exponent+0x50>

00010db8 <_printf_float>:
   10db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dba:	b095      	sub	sp, #84	; 0x54
   10dbc:	000c      	movs	r4, r1
   10dbe:	920a      	str	r2, [sp, #40]	; 0x28
   10dc0:	930b      	str	r3, [sp, #44]	; 0x2c
   10dc2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   10dc4:	9009      	str	r0, [sp, #36]	; 0x24
   10dc6:	f001 fcf3 	bl	127b0 <_localeconv_r>
   10dca:	6803      	ldr	r3, [r0, #0]
   10dcc:	0018      	movs	r0, r3
   10dce:	930d      	str	r3, [sp, #52]	; 0x34
   10dd0:	f000 fbf8 	bl	115c4 <strlen>
   10dd4:	2300      	movs	r3, #0
   10dd6:	9312      	str	r3, [sp, #72]	; 0x48
   10dd8:	6823      	ldr	r3, [r4, #0]
   10dda:	900e      	str	r0, [sp, #56]	; 0x38
   10ddc:	930c      	str	r3, [sp, #48]	; 0x30
   10dde:	990c      	ldr	r1, [sp, #48]	; 0x30
   10de0:	7e27      	ldrb	r7, [r4, #24]
   10de2:	682b      	ldr	r3, [r5, #0]
   10de4:	2207      	movs	r2, #7
   10de6:	05c9      	lsls	r1, r1, #23
   10de8:	d547      	bpl.n	10e7a <_printf_float+0xc2>
   10dea:	189b      	adds	r3, r3, r2
   10dec:	4393      	bics	r3, r2
   10dee:	001a      	movs	r2, r3
   10df0:	3208      	adds	r2, #8
   10df2:	602a      	str	r2, [r5, #0]
   10df4:	681a      	ldr	r2, [r3, #0]
   10df6:	685b      	ldr	r3, [r3, #4]
   10df8:	64a2      	str	r2, [r4, #72]	; 0x48
   10dfa:	64e3      	str	r3, [r4, #76]	; 0x4c
   10dfc:	2201      	movs	r2, #1
   10dfe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   10e00:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   10e02:	006b      	lsls	r3, r5, #1
   10e04:	085b      	lsrs	r3, r3, #1
   10e06:	930f      	str	r3, [sp, #60]	; 0x3c
   10e08:	4252      	negs	r2, r2
   10e0a:	4ba7      	ldr	r3, [pc, #668]	; (110a8 <_printf_float+0x2f0>)
   10e0c:	0030      	movs	r0, r6
   10e0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10e10:	f7ff fbfa 	bl	10608 <__aeabi_dcmpun>
   10e14:	2800      	cmp	r0, #0
   10e16:	d000      	beq.n	10e1a <_printf_float+0x62>
   10e18:	e206      	b.n	11228 <_printf_float+0x470>
   10e1a:	2201      	movs	r2, #1
   10e1c:	4ba2      	ldr	r3, [pc, #648]	; (110a8 <_printf_float+0x2f0>)
   10e1e:	4252      	negs	r2, r2
   10e20:	0030      	movs	r0, r6
   10e22:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10e24:	f7fd fef8 	bl	ec18 <__aeabi_dcmple>
   10e28:	2800      	cmp	r0, #0
   10e2a:	d000      	beq.n	10e2e <_printf_float+0x76>
   10e2c:	e1fc      	b.n	11228 <_printf_float+0x470>
   10e2e:	2200      	movs	r2, #0
   10e30:	2300      	movs	r3, #0
   10e32:	0030      	movs	r0, r6
   10e34:	0029      	movs	r1, r5
   10e36:	f7fd fee5 	bl	ec04 <__aeabi_dcmplt>
   10e3a:	2800      	cmp	r0, #0
   10e3c:	d003      	beq.n	10e46 <_printf_float+0x8e>
   10e3e:	0023      	movs	r3, r4
   10e40:	222d      	movs	r2, #45	; 0x2d
   10e42:	3343      	adds	r3, #67	; 0x43
   10e44:	701a      	strb	r2, [r3, #0]
   10e46:	4d99      	ldr	r5, [pc, #612]	; (110ac <_printf_float+0x2f4>)
   10e48:	2f47      	cmp	r7, #71	; 0x47
   10e4a:	d800      	bhi.n	10e4e <_printf_float+0x96>
   10e4c:	4d98      	ldr	r5, [pc, #608]	; (110b0 <_printf_float+0x2f8>)
   10e4e:	2303      	movs	r3, #3
   10e50:	2600      	movs	r6, #0
   10e52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10e54:	6123      	str	r3, [r4, #16]
   10e56:	3301      	adds	r3, #1
   10e58:	439a      	bics	r2, r3
   10e5a:	6022      	str	r2, [r4, #0]
   10e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10e5e:	aa13      	add	r2, sp, #76	; 0x4c
   10e60:	9300      	str	r3, [sp, #0]
   10e62:	0021      	movs	r1, r4
   10e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10e66:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e68:	f000 f9f2 	bl	11250 <_printf_common>
   10e6c:	1c43      	adds	r3, r0, #1
   10e6e:	d000      	beq.n	10e72 <_printf_float+0xba>
   10e70:	e09c      	b.n	10fac <_printf_float+0x1f4>
   10e72:	2001      	movs	r0, #1
   10e74:	4240      	negs	r0, r0
   10e76:	b015      	add	sp, #84	; 0x54
   10e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e7a:	3307      	adds	r3, #7
   10e7c:	e7b6      	b.n	10dec <_printf_float+0x34>
   10e7e:	2380      	movs	r3, #128	; 0x80
   10e80:	6862      	ldr	r2, [r4, #4]
   10e82:	00db      	lsls	r3, r3, #3
   10e84:	1c51      	adds	r1, r2, #1
   10e86:	d145      	bne.n	10f14 <_printf_float+0x15c>
   10e88:	3207      	adds	r2, #7
   10e8a:	6062      	str	r2, [r4, #4]
   10e8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10e8e:	2100      	movs	r1, #0
   10e90:	4313      	orrs	r3, r2
   10e92:	aa12      	add	r2, sp, #72	; 0x48
   10e94:	9205      	str	r2, [sp, #20]
   10e96:	aa11      	add	r2, sp, #68	; 0x44
   10e98:	9203      	str	r2, [sp, #12]
   10e9a:	2223      	movs	r2, #35	; 0x23
   10e9c:	6023      	str	r3, [r4, #0]
   10e9e:	9106      	str	r1, [sp, #24]
   10ea0:	9301      	str	r3, [sp, #4]
   10ea2:	a908      	add	r1, sp, #32
   10ea4:	6863      	ldr	r3, [r4, #4]
   10ea6:	1852      	adds	r2, r2, r1
   10ea8:	9202      	str	r2, [sp, #8]
   10eaa:	9300      	str	r3, [sp, #0]
   10eac:	0032      	movs	r2, r6
   10eae:	002b      	movs	r3, r5
   10eb0:	9704      	str	r7, [sp, #16]
   10eb2:	9809      	ldr	r0, [sp, #36]	; 0x24
   10eb4:	f7ff fee4 	bl	10c80 <__cvt>
   10eb8:	2320      	movs	r3, #32
   10eba:	003a      	movs	r2, r7
   10ebc:	0005      	movs	r5, r0
   10ebe:	439a      	bics	r2, r3
   10ec0:	2a47      	cmp	r2, #71	; 0x47
   10ec2:	d107      	bne.n	10ed4 <_printf_float+0x11c>
   10ec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10ec6:	1cda      	adds	r2, r3, #3
   10ec8:	db02      	blt.n	10ed0 <_printf_float+0x118>
   10eca:	6862      	ldr	r2, [r4, #4]
   10ecc:	4293      	cmp	r3, r2
   10ece:	dd5b      	ble.n	10f88 <_printf_float+0x1d0>
   10ed0:	3f02      	subs	r7, #2
   10ed2:	b2ff      	uxtb	r7, r7
   10ed4:	9911      	ldr	r1, [sp, #68]	; 0x44
   10ed6:	2f65      	cmp	r7, #101	; 0x65
   10ed8:	d83b      	bhi.n	10f52 <_printf_float+0x19a>
   10eda:	0020      	movs	r0, r4
   10edc:	3901      	subs	r1, #1
   10ede:	003a      	movs	r2, r7
   10ee0:	3050      	adds	r0, #80	; 0x50
   10ee2:	9111      	str	r1, [sp, #68]	; 0x44
   10ee4:	f7ff ff30 	bl	10d48 <__exponent>
   10ee8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10eea:	0006      	movs	r6, r0
   10eec:	1883      	adds	r3, r0, r2
   10eee:	6123      	str	r3, [r4, #16]
   10ef0:	2a01      	cmp	r2, #1
   10ef2:	dc02      	bgt.n	10efa <_printf_float+0x142>
   10ef4:	6822      	ldr	r2, [r4, #0]
   10ef6:	07d2      	lsls	r2, r2, #31
   10ef8:	d501      	bpl.n	10efe <_printf_float+0x146>
   10efa:	3301      	adds	r3, #1
   10efc:	6123      	str	r3, [r4, #16]
   10efe:	2323      	movs	r3, #35	; 0x23
   10f00:	aa08      	add	r2, sp, #32
   10f02:	189b      	adds	r3, r3, r2
   10f04:	781b      	ldrb	r3, [r3, #0]
   10f06:	2b00      	cmp	r3, #0
   10f08:	d0a8      	beq.n	10e5c <_printf_float+0xa4>
   10f0a:	0023      	movs	r3, r4
   10f0c:	222d      	movs	r2, #45	; 0x2d
   10f0e:	3343      	adds	r3, #67	; 0x43
   10f10:	701a      	strb	r2, [r3, #0]
   10f12:	e7a3      	b.n	10e5c <_printf_float+0xa4>
   10f14:	2f67      	cmp	r7, #103	; 0x67
   10f16:	d001      	beq.n	10f1c <_printf_float+0x164>
   10f18:	2f47      	cmp	r7, #71	; 0x47
   10f1a:	d1b7      	bne.n	10e8c <_printf_float+0xd4>
   10f1c:	2a00      	cmp	r2, #0
   10f1e:	d016      	beq.n	10f4e <_printf_float+0x196>
   10f20:	990c      	ldr	r1, [sp, #48]	; 0x30
   10f22:	a808      	add	r0, sp, #32
   10f24:	430b      	orrs	r3, r1
   10f26:	2100      	movs	r1, #0
   10f28:	9106      	str	r1, [sp, #24]
   10f2a:	a912      	add	r1, sp, #72	; 0x48
   10f2c:	9105      	str	r1, [sp, #20]
   10f2e:	a911      	add	r1, sp, #68	; 0x44
   10f30:	9103      	str	r1, [sp, #12]
   10f32:	2123      	movs	r1, #35	; 0x23
   10f34:	1809      	adds	r1, r1, r0
   10f36:	6023      	str	r3, [r4, #0]
   10f38:	9301      	str	r3, [sp, #4]
   10f3a:	9200      	str	r2, [sp, #0]
   10f3c:	002b      	movs	r3, r5
   10f3e:	9704      	str	r7, [sp, #16]
   10f40:	9102      	str	r1, [sp, #8]
   10f42:	0032      	movs	r2, r6
   10f44:	9809      	ldr	r0, [sp, #36]	; 0x24
   10f46:	f7ff fe9b 	bl	10c80 <__cvt>
   10f4a:	0005      	movs	r5, r0
   10f4c:	e7ba      	b.n	10ec4 <_printf_float+0x10c>
   10f4e:	2201      	movs	r2, #1
   10f50:	e79b      	b.n	10e8a <_printf_float+0xd2>
   10f52:	2f66      	cmp	r7, #102	; 0x66
   10f54:	d119      	bne.n	10f8a <_printf_float+0x1d2>
   10f56:	6863      	ldr	r3, [r4, #4]
   10f58:	2900      	cmp	r1, #0
   10f5a:	dd0c      	ble.n	10f76 <_printf_float+0x1be>
   10f5c:	6121      	str	r1, [r4, #16]
   10f5e:	2b00      	cmp	r3, #0
   10f60:	d102      	bne.n	10f68 <_printf_float+0x1b0>
   10f62:	6822      	ldr	r2, [r4, #0]
   10f64:	07d2      	lsls	r2, r2, #31
   10f66:	d502      	bpl.n	10f6e <_printf_float+0x1b6>
   10f68:	3301      	adds	r3, #1
   10f6a:	185b      	adds	r3, r3, r1
   10f6c:	6123      	str	r3, [r4, #16]
   10f6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10f70:	2600      	movs	r6, #0
   10f72:	65a3      	str	r3, [r4, #88]	; 0x58
   10f74:	e7c3      	b.n	10efe <_printf_float+0x146>
   10f76:	2b00      	cmp	r3, #0
   10f78:	d103      	bne.n	10f82 <_printf_float+0x1ca>
   10f7a:	2201      	movs	r2, #1
   10f7c:	6821      	ldr	r1, [r4, #0]
   10f7e:	4211      	tst	r1, r2
   10f80:	d000      	beq.n	10f84 <_printf_float+0x1cc>
   10f82:	1c9a      	adds	r2, r3, #2
   10f84:	6122      	str	r2, [r4, #16]
   10f86:	e7f2      	b.n	10f6e <_printf_float+0x1b6>
   10f88:	2767      	movs	r7, #103	; 0x67
   10f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10f8c:	9812      	ldr	r0, [sp, #72]	; 0x48
   10f8e:	4283      	cmp	r3, r0
   10f90:	db05      	blt.n	10f9e <_printf_float+0x1e6>
   10f92:	6822      	ldr	r2, [r4, #0]
   10f94:	6123      	str	r3, [r4, #16]
   10f96:	07d2      	lsls	r2, r2, #31
   10f98:	d5e9      	bpl.n	10f6e <_printf_float+0x1b6>
   10f9a:	3301      	adds	r3, #1
   10f9c:	e7e6      	b.n	10f6c <_printf_float+0x1b4>
   10f9e:	2201      	movs	r2, #1
   10fa0:	2b00      	cmp	r3, #0
   10fa2:	dc01      	bgt.n	10fa8 <_printf_float+0x1f0>
   10fa4:	1892      	adds	r2, r2, r2
   10fa6:	1ad2      	subs	r2, r2, r3
   10fa8:	1812      	adds	r2, r2, r0
   10faa:	e7eb      	b.n	10f84 <_printf_float+0x1cc>
   10fac:	6822      	ldr	r2, [r4, #0]
   10fae:	0553      	lsls	r3, r2, #21
   10fb0:	d408      	bmi.n	10fc4 <_printf_float+0x20c>
   10fb2:	6923      	ldr	r3, [r4, #16]
   10fb4:	002a      	movs	r2, r5
   10fb6:	990a      	ldr	r1, [sp, #40]	; 0x28
   10fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
   10fba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10fbc:	47a8      	blx	r5
   10fbe:	1c43      	adds	r3, r0, #1
   10fc0:	d129      	bne.n	11016 <_printf_float+0x25e>
   10fc2:	e756      	b.n	10e72 <_printf_float+0xba>
   10fc4:	2f65      	cmp	r7, #101	; 0x65
   10fc6:	d800      	bhi.n	10fca <_printf_float+0x212>
   10fc8:	e0dc      	b.n	11184 <_printf_float+0x3cc>
   10fca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   10fcc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   10fce:	2200      	movs	r2, #0
   10fd0:	2300      	movs	r3, #0
   10fd2:	f7fd fe11 	bl	ebf8 <__aeabi_dcmpeq>
   10fd6:	2800      	cmp	r0, #0
   10fd8:	d035      	beq.n	11046 <_printf_float+0x28e>
   10fda:	2301      	movs	r3, #1
   10fdc:	4a35      	ldr	r2, [pc, #212]	; (110b4 <_printf_float+0x2fc>)
   10fde:	990a      	ldr	r1, [sp, #40]	; 0x28
   10fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
   10fe2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10fe4:	47a8      	blx	r5
   10fe6:	1c43      	adds	r3, r0, #1
   10fe8:	d100      	bne.n	10fec <_printf_float+0x234>
   10fea:	e742      	b.n	10e72 <_printf_float+0xba>
   10fec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10fee:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10ff0:	4293      	cmp	r3, r2
   10ff2:	db02      	blt.n	10ffa <_printf_float+0x242>
   10ff4:	6823      	ldr	r3, [r4, #0]
   10ff6:	07db      	lsls	r3, r3, #31
   10ff8:	d50d      	bpl.n	11016 <_printf_float+0x25e>
   10ffa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10ffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11000:	990a      	ldr	r1, [sp, #40]	; 0x28
   11002:	9809      	ldr	r0, [sp, #36]	; 0x24
   11004:	47a8      	blx	r5
   11006:	2500      	movs	r5, #0
   11008:	1c43      	adds	r3, r0, #1
   1100a:	d100      	bne.n	1100e <_printf_float+0x256>
   1100c:	e731      	b.n	10e72 <_printf_float+0xba>
   1100e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11010:	3b01      	subs	r3, #1
   11012:	429d      	cmp	r5, r3
   11014:	db0b      	blt.n	1102e <_printf_float+0x276>
   11016:	6823      	ldr	r3, [r4, #0]
   11018:	2500      	movs	r5, #0
   1101a:	079b      	lsls	r3, r3, #30
   1101c:	d500      	bpl.n	11020 <_printf_float+0x268>
   1101e:	e0fd      	b.n	1121c <_printf_float+0x464>
   11020:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11022:	68e0      	ldr	r0, [r4, #12]
   11024:	4298      	cmp	r0, r3
   11026:	db00      	blt.n	1102a <_printf_float+0x272>
   11028:	e725      	b.n	10e76 <_printf_float+0xbe>
   1102a:	0018      	movs	r0, r3
   1102c:	e723      	b.n	10e76 <_printf_float+0xbe>
   1102e:	0022      	movs	r2, r4
   11030:	2301      	movs	r3, #1
   11032:	321a      	adds	r2, #26
   11034:	990a      	ldr	r1, [sp, #40]	; 0x28
   11036:	9809      	ldr	r0, [sp, #36]	; 0x24
   11038:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1103a:	47b0      	blx	r6
   1103c:	1c43      	adds	r3, r0, #1
   1103e:	d100      	bne.n	11042 <_printf_float+0x28a>
   11040:	e717      	b.n	10e72 <_printf_float+0xba>
   11042:	3501      	adds	r5, #1
   11044:	e7e3      	b.n	1100e <_printf_float+0x256>
   11046:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11048:	2b00      	cmp	r3, #0
   1104a:	dc35      	bgt.n	110b8 <_printf_float+0x300>
   1104c:	2301      	movs	r3, #1
   1104e:	4a19      	ldr	r2, [pc, #100]	; (110b4 <_printf_float+0x2fc>)
   11050:	990a      	ldr	r1, [sp, #40]	; 0x28
   11052:	9809      	ldr	r0, [sp, #36]	; 0x24
   11054:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11056:	47b0      	blx	r6
   11058:	1c43      	adds	r3, r0, #1
   1105a:	d100      	bne.n	1105e <_printf_float+0x2a6>
   1105c:	e709      	b.n	10e72 <_printf_float+0xba>
   1105e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11060:	2b00      	cmp	r3, #0
   11062:	d105      	bne.n	11070 <_printf_float+0x2b8>
   11064:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11066:	2b00      	cmp	r3, #0
   11068:	d102      	bne.n	11070 <_printf_float+0x2b8>
   1106a:	6823      	ldr	r3, [r4, #0]
   1106c:	07db      	lsls	r3, r3, #31
   1106e:	d5d2      	bpl.n	11016 <_printf_float+0x25e>
   11070:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11076:	990a      	ldr	r1, [sp, #40]	; 0x28
   11078:	9809      	ldr	r0, [sp, #36]	; 0x24
   1107a:	47b0      	blx	r6
   1107c:	2600      	movs	r6, #0
   1107e:	1c43      	adds	r3, r0, #1
   11080:	d100      	bne.n	11084 <_printf_float+0x2cc>
   11082:	e6f6      	b.n	10e72 <_printf_float+0xba>
   11084:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11086:	425b      	negs	r3, r3
   11088:	429e      	cmp	r6, r3
   1108a:	db01      	blt.n	11090 <_printf_float+0x2d8>
   1108c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1108e:	e791      	b.n	10fb4 <_printf_float+0x1fc>
   11090:	0022      	movs	r2, r4
   11092:	2301      	movs	r3, #1
   11094:	321a      	adds	r2, #26
   11096:	990a      	ldr	r1, [sp, #40]	; 0x28
   11098:	9809      	ldr	r0, [sp, #36]	; 0x24
   1109a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1109c:	47b8      	blx	r7
   1109e:	1c43      	adds	r3, r0, #1
   110a0:	d100      	bne.n	110a4 <_printf_float+0x2ec>
   110a2:	e6e6      	b.n	10e72 <_printf_float+0xba>
   110a4:	3601      	adds	r6, #1
   110a6:	e7ed      	b.n	11084 <_printf_float+0x2cc>
   110a8:	7fefffff 	.word	0x7fefffff
   110ac:	000141f7 	.word	0x000141f7
   110b0:	000141f3 	.word	0x000141f3
   110b4:	00014203 	.word	0x00014203
   110b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   110ba:	9e12      	ldr	r6, [sp, #72]	; 0x48
   110bc:	429e      	cmp	r6, r3
   110be:	dd00      	ble.n	110c2 <_printf_float+0x30a>
   110c0:	001e      	movs	r6, r3
   110c2:	2e00      	cmp	r6, #0
   110c4:	dc35      	bgt.n	11132 <_printf_float+0x37a>
   110c6:	2300      	movs	r3, #0
   110c8:	930c      	str	r3, [sp, #48]	; 0x30
   110ca:	43f3      	mvns	r3, r6
   110cc:	17db      	asrs	r3, r3, #31
   110ce:	930f      	str	r3, [sp, #60]	; 0x3c
   110d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   110d2:	6da7      	ldr	r7, [r4, #88]	; 0x58
   110d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   110d6:	4033      	ands	r3, r6
   110d8:	1afb      	subs	r3, r7, r3
   110da:	429a      	cmp	r2, r3
   110dc:	db32      	blt.n	11144 <_printf_float+0x38c>
   110de:	9b11      	ldr	r3, [sp, #68]	; 0x44
   110e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   110e2:	4293      	cmp	r3, r2
   110e4:	db3c      	blt.n	11160 <_printf_float+0x3a8>
   110e6:	6823      	ldr	r3, [r4, #0]
   110e8:	07db      	lsls	r3, r3, #31
   110ea:	d439      	bmi.n	11160 <_printf_float+0x3a8>
   110ec:	9e12      	ldr	r6, [sp, #72]	; 0x48
   110ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
   110f0:	1bf3      	subs	r3, r6, r7
   110f2:	1ab6      	subs	r6, r6, r2
   110f4:	429e      	cmp	r6, r3
   110f6:	dd00      	ble.n	110fa <_printf_float+0x342>
   110f8:	001e      	movs	r6, r3
   110fa:	2e00      	cmp	r6, #0
   110fc:	dc39      	bgt.n	11172 <_printf_float+0x3ba>
   110fe:	43f7      	mvns	r7, r6
   11100:	2500      	movs	r5, #0
   11102:	17fb      	asrs	r3, r7, #31
   11104:	930c      	str	r3, [sp, #48]	; 0x30
   11106:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11108:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1110a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1110c:	1a9b      	subs	r3, r3, r2
   1110e:	0032      	movs	r2, r6
   11110:	400a      	ands	r2, r1
   11112:	1a9b      	subs	r3, r3, r2
   11114:	429d      	cmp	r5, r3
   11116:	db00      	blt.n	1111a <_printf_float+0x362>
   11118:	e77d      	b.n	11016 <_printf_float+0x25e>
   1111a:	0022      	movs	r2, r4
   1111c:	2301      	movs	r3, #1
   1111e:	321a      	adds	r2, #26
   11120:	990a      	ldr	r1, [sp, #40]	; 0x28
   11122:	9809      	ldr	r0, [sp, #36]	; 0x24
   11124:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11126:	47b8      	blx	r7
   11128:	1c43      	adds	r3, r0, #1
   1112a:	d100      	bne.n	1112e <_printf_float+0x376>
   1112c:	e6a1      	b.n	10e72 <_printf_float+0xba>
   1112e:	3501      	adds	r5, #1
   11130:	e7e9      	b.n	11106 <_printf_float+0x34e>
   11132:	0033      	movs	r3, r6
   11134:	002a      	movs	r2, r5
   11136:	990a      	ldr	r1, [sp, #40]	; 0x28
   11138:	9809      	ldr	r0, [sp, #36]	; 0x24
   1113a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1113c:	47b8      	blx	r7
   1113e:	1c43      	adds	r3, r0, #1
   11140:	d1c1      	bne.n	110c6 <_printf_float+0x30e>
   11142:	e696      	b.n	10e72 <_printf_float+0xba>
   11144:	0022      	movs	r2, r4
   11146:	2301      	movs	r3, #1
   11148:	321a      	adds	r2, #26
   1114a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1114c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1114e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11150:	47b8      	blx	r7
   11152:	1c43      	adds	r3, r0, #1
   11154:	d100      	bne.n	11158 <_printf_float+0x3a0>
   11156:	e68c      	b.n	10e72 <_printf_float+0xba>
   11158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1115a:	3301      	adds	r3, #1
   1115c:	930c      	str	r3, [sp, #48]	; 0x30
   1115e:	e7b7      	b.n	110d0 <_printf_float+0x318>
   11160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11164:	990a      	ldr	r1, [sp, #40]	; 0x28
   11166:	9809      	ldr	r0, [sp, #36]	; 0x24
   11168:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1116a:	47b0      	blx	r6
   1116c:	1c43      	adds	r3, r0, #1
   1116e:	d1bd      	bne.n	110ec <_printf_float+0x334>
   11170:	e67f      	b.n	10e72 <_printf_float+0xba>
   11172:	19ea      	adds	r2, r5, r7
   11174:	0033      	movs	r3, r6
   11176:	990a      	ldr	r1, [sp, #40]	; 0x28
   11178:	9809      	ldr	r0, [sp, #36]	; 0x24
   1117a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1117c:	47a8      	blx	r5
   1117e:	1c43      	adds	r3, r0, #1
   11180:	d1bd      	bne.n	110fe <_printf_float+0x346>
   11182:	e676      	b.n	10e72 <_printf_float+0xba>
   11184:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11186:	2b01      	cmp	r3, #1
   11188:	dc02      	bgt.n	11190 <_printf_float+0x3d8>
   1118a:	2301      	movs	r3, #1
   1118c:	421a      	tst	r2, r3
   1118e:	d038      	beq.n	11202 <_printf_float+0x44a>
   11190:	2301      	movs	r3, #1
   11192:	002a      	movs	r2, r5
   11194:	990a      	ldr	r1, [sp, #40]	; 0x28
   11196:	9809      	ldr	r0, [sp, #36]	; 0x24
   11198:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1119a:	47b8      	blx	r7
   1119c:	1c43      	adds	r3, r0, #1
   1119e:	d100      	bne.n	111a2 <_printf_float+0x3ea>
   111a0:	e667      	b.n	10e72 <_printf_float+0xba>
   111a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   111a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   111a6:	990a      	ldr	r1, [sp, #40]	; 0x28
   111a8:	9809      	ldr	r0, [sp, #36]	; 0x24
   111aa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   111ac:	47b8      	blx	r7
   111ae:	1c43      	adds	r3, r0, #1
   111b0:	d100      	bne.n	111b4 <_printf_float+0x3fc>
   111b2:	e65e      	b.n	10e72 <_printf_float+0xba>
   111b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   111b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   111b8:	2200      	movs	r2, #0
   111ba:	2300      	movs	r3, #0
   111bc:	f7fd fd1c 	bl	ebf8 <__aeabi_dcmpeq>
   111c0:	2800      	cmp	r0, #0
   111c2:	d008      	beq.n	111d6 <_printf_float+0x41e>
   111c4:	2500      	movs	r5, #0
   111c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111c8:	3b01      	subs	r3, #1
   111ca:	429d      	cmp	r5, r3
   111cc:	db0d      	blt.n	111ea <_printf_float+0x432>
   111ce:	0022      	movs	r2, r4
   111d0:	0033      	movs	r3, r6
   111d2:	3250      	adds	r2, #80	; 0x50
   111d4:	e6ef      	b.n	10fb6 <_printf_float+0x1fe>
   111d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   111d8:	1c6a      	adds	r2, r5, #1
   111da:	3b01      	subs	r3, #1
   111dc:	990a      	ldr	r1, [sp, #40]	; 0x28
   111de:	9809      	ldr	r0, [sp, #36]	; 0x24
   111e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   111e2:	47a8      	blx	r5
   111e4:	1c43      	adds	r3, r0, #1
   111e6:	d1f2      	bne.n	111ce <_printf_float+0x416>
   111e8:	e643      	b.n	10e72 <_printf_float+0xba>
   111ea:	0022      	movs	r2, r4
   111ec:	2301      	movs	r3, #1
   111ee:	321a      	adds	r2, #26
   111f0:	990a      	ldr	r1, [sp, #40]	; 0x28
   111f2:	9809      	ldr	r0, [sp, #36]	; 0x24
   111f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   111f6:	47b8      	blx	r7
   111f8:	1c43      	adds	r3, r0, #1
   111fa:	d100      	bne.n	111fe <_printf_float+0x446>
   111fc:	e639      	b.n	10e72 <_printf_float+0xba>
   111fe:	3501      	adds	r5, #1
   11200:	e7e1      	b.n	111c6 <_printf_float+0x40e>
   11202:	002a      	movs	r2, r5
   11204:	e7ea      	b.n	111dc <_printf_float+0x424>
   11206:	0022      	movs	r2, r4
   11208:	2301      	movs	r3, #1
   1120a:	3219      	adds	r2, #25
   1120c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1120e:	9809      	ldr	r0, [sp, #36]	; 0x24
   11210:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11212:	47b0      	blx	r6
   11214:	1c43      	adds	r3, r0, #1
   11216:	d100      	bne.n	1121a <_printf_float+0x462>
   11218:	e62b      	b.n	10e72 <_printf_float+0xba>
   1121a:	3501      	adds	r5, #1
   1121c:	68e3      	ldr	r3, [r4, #12]
   1121e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11220:	1a9b      	subs	r3, r3, r2
   11222:	429d      	cmp	r5, r3
   11224:	dbef      	blt.n	11206 <_printf_float+0x44e>
   11226:	e6fb      	b.n	11020 <_printf_float+0x268>
   11228:	0032      	movs	r2, r6
   1122a:	002b      	movs	r3, r5
   1122c:	0030      	movs	r0, r6
   1122e:	0029      	movs	r1, r5
   11230:	f7ff f9ea 	bl	10608 <__aeabi_dcmpun>
   11234:	2800      	cmp	r0, #0
   11236:	d100      	bne.n	1123a <_printf_float+0x482>
   11238:	e621      	b.n	10e7e <_printf_float+0xc6>
   1123a:	4d03      	ldr	r5, [pc, #12]	; (11248 <_printf_float+0x490>)
   1123c:	2f47      	cmp	r7, #71	; 0x47
   1123e:	d900      	bls.n	11242 <_printf_float+0x48a>
   11240:	e605      	b.n	10e4e <_printf_float+0x96>
   11242:	4d02      	ldr	r5, [pc, #8]	; (1124c <_printf_float+0x494>)
   11244:	e603      	b.n	10e4e <_printf_float+0x96>
   11246:	46c0      	nop			; (mov r8, r8)
   11248:	000141ff 	.word	0x000141ff
   1124c:	000141fb 	.word	0x000141fb

00011250 <_printf_common>:
   11250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11252:	0015      	movs	r5, r2
   11254:	9301      	str	r3, [sp, #4]
   11256:	688a      	ldr	r2, [r1, #8]
   11258:	690b      	ldr	r3, [r1, #16]
   1125a:	9000      	str	r0, [sp, #0]
   1125c:	000c      	movs	r4, r1
   1125e:	4293      	cmp	r3, r2
   11260:	da00      	bge.n	11264 <_printf_common+0x14>
   11262:	0013      	movs	r3, r2
   11264:	0022      	movs	r2, r4
   11266:	602b      	str	r3, [r5, #0]
   11268:	3243      	adds	r2, #67	; 0x43
   1126a:	7812      	ldrb	r2, [r2, #0]
   1126c:	2a00      	cmp	r2, #0
   1126e:	d001      	beq.n	11274 <_printf_common+0x24>
   11270:	3301      	adds	r3, #1
   11272:	602b      	str	r3, [r5, #0]
   11274:	6823      	ldr	r3, [r4, #0]
   11276:	069b      	lsls	r3, r3, #26
   11278:	d502      	bpl.n	11280 <_printf_common+0x30>
   1127a:	682b      	ldr	r3, [r5, #0]
   1127c:	3302      	adds	r3, #2
   1127e:	602b      	str	r3, [r5, #0]
   11280:	2706      	movs	r7, #6
   11282:	6823      	ldr	r3, [r4, #0]
   11284:	401f      	ands	r7, r3
   11286:	d027      	beq.n	112d8 <_printf_common+0x88>
   11288:	0023      	movs	r3, r4
   1128a:	3343      	adds	r3, #67	; 0x43
   1128c:	781b      	ldrb	r3, [r3, #0]
   1128e:	1e5a      	subs	r2, r3, #1
   11290:	4193      	sbcs	r3, r2
   11292:	6822      	ldr	r2, [r4, #0]
   11294:	0692      	lsls	r2, r2, #26
   11296:	d430      	bmi.n	112fa <_printf_common+0xaa>
   11298:	0022      	movs	r2, r4
   1129a:	9901      	ldr	r1, [sp, #4]
   1129c:	3243      	adds	r2, #67	; 0x43
   1129e:	9800      	ldr	r0, [sp, #0]
   112a0:	9e08      	ldr	r6, [sp, #32]
   112a2:	47b0      	blx	r6
   112a4:	1c43      	adds	r3, r0, #1
   112a6:	d025      	beq.n	112f4 <_printf_common+0xa4>
   112a8:	2306      	movs	r3, #6
   112aa:	6820      	ldr	r0, [r4, #0]
   112ac:	682a      	ldr	r2, [r5, #0]
   112ae:	68e1      	ldr	r1, [r4, #12]
   112b0:	4003      	ands	r3, r0
   112b2:	2500      	movs	r5, #0
   112b4:	2b04      	cmp	r3, #4
   112b6:	d103      	bne.n	112c0 <_printf_common+0x70>
   112b8:	1a8d      	subs	r5, r1, r2
   112ba:	43eb      	mvns	r3, r5
   112bc:	17db      	asrs	r3, r3, #31
   112be:	401d      	ands	r5, r3
   112c0:	68a3      	ldr	r3, [r4, #8]
   112c2:	6922      	ldr	r2, [r4, #16]
   112c4:	4293      	cmp	r3, r2
   112c6:	dd01      	ble.n	112cc <_printf_common+0x7c>
   112c8:	1a9b      	subs	r3, r3, r2
   112ca:	18ed      	adds	r5, r5, r3
   112cc:	2700      	movs	r7, #0
   112ce:	42bd      	cmp	r5, r7
   112d0:	d120      	bne.n	11314 <_printf_common+0xc4>
   112d2:	2000      	movs	r0, #0
   112d4:	e010      	b.n	112f8 <_printf_common+0xa8>
   112d6:	3701      	adds	r7, #1
   112d8:	68e3      	ldr	r3, [r4, #12]
   112da:	682a      	ldr	r2, [r5, #0]
   112dc:	1a9b      	subs	r3, r3, r2
   112de:	429f      	cmp	r7, r3
   112e0:	dad2      	bge.n	11288 <_printf_common+0x38>
   112e2:	0022      	movs	r2, r4
   112e4:	2301      	movs	r3, #1
   112e6:	3219      	adds	r2, #25
   112e8:	9901      	ldr	r1, [sp, #4]
   112ea:	9800      	ldr	r0, [sp, #0]
   112ec:	9e08      	ldr	r6, [sp, #32]
   112ee:	47b0      	blx	r6
   112f0:	1c43      	adds	r3, r0, #1
   112f2:	d1f0      	bne.n	112d6 <_printf_common+0x86>
   112f4:	2001      	movs	r0, #1
   112f6:	4240      	negs	r0, r0
   112f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   112fa:	2030      	movs	r0, #48	; 0x30
   112fc:	18e1      	adds	r1, r4, r3
   112fe:	3143      	adds	r1, #67	; 0x43
   11300:	7008      	strb	r0, [r1, #0]
   11302:	0021      	movs	r1, r4
   11304:	1c5a      	adds	r2, r3, #1
   11306:	3145      	adds	r1, #69	; 0x45
   11308:	7809      	ldrb	r1, [r1, #0]
   1130a:	18a2      	adds	r2, r4, r2
   1130c:	3243      	adds	r2, #67	; 0x43
   1130e:	3302      	adds	r3, #2
   11310:	7011      	strb	r1, [r2, #0]
   11312:	e7c1      	b.n	11298 <_printf_common+0x48>
   11314:	0022      	movs	r2, r4
   11316:	2301      	movs	r3, #1
   11318:	321a      	adds	r2, #26
   1131a:	9901      	ldr	r1, [sp, #4]
   1131c:	9800      	ldr	r0, [sp, #0]
   1131e:	9e08      	ldr	r6, [sp, #32]
   11320:	47b0      	blx	r6
   11322:	1c43      	adds	r3, r0, #1
   11324:	d0e6      	beq.n	112f4 <_printf_common+0xa4>
   11326:	3701      	adds	r7, #1
   11328:	e7d1      	b.n	112ce <_printf_common+0x7e>
	...

0001132c <_printf_i>:
   1132c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1132e:	b08b      	sub	sp, #44	; 0x2c
   11330:	9206      	str	r2, [sp, #24]
   11332:	000a      	movs	r2, r1
   11334:	3243      	adds	r2, #67	; 0x43
   11336:	9307      	str	r3, [sp, #28]
   11338:	9005      	str	r0, [sp, #20]
   1133a:	9204      	str	r2, [sp, #16]
   1133c:	7e0a      	ldrb	r2, [r1, #24]
   1133e:	000c      	movs	r4, r1
   11340:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11342:	2a6e      	cmp	r2, #110	; 0x6e
   11344:	d100      	bne.n	11348 <_printf_i+0x1c>
   11346:	e08f      	b.n	11468 <_printf_i+0x13c>
   11348:	d817      	bhi.n	1137a <_printf_i+0x4e>
   1134a:	2a63      	cmp	r2, #99	; 0x63
   1134c:	d02c      	beq.n	113a8 <_printf_i+0x7c>
   1134e:	d808      	bhi.n	11362 <_printf_i+0x36>
   11350:	2a00      	cmp	r2, #0
   11352:	d100      	bne.n	11356 <_printf_i+0x2a>
   11354:	e099      	b.n	1148a <_printf_i+0x15e>
   11356:	2a58      	cmp	r2, #88	; 0x58
   11358:	d054      	beq.n	11404 <_printf_i+0xd8>
   1135a:	0026      	movs	r6, r4
   1135c:	3642      	adds	r6, #66	; 0x42
   1135e:	7032      	strb	r2, [r6, #0]
   11360:	e029      	b.n	113b6 <_printf_i+0x8a>
   11362:	2a64      	cmp	r2, #100	; 0x64
   11364:	d001      	beq.n	1136a <_printf_i+0x3e>
   11366:	2a69      	cmp	r2, #105	; 0x69
   11368:	d1f7      	bne.n	1135a <_printf_i+0x2e>
   1136a:	6821      	ldr	r1, [r4, #0]
   1136c:	681a      	ldr	r2, [r3, #0]
   1136e:	0608      	lsls	r0, r1, #24
   11370:	d523      	bpl.n	113ba <_printf_i+0x8e>
   11372:	1d11      	adds	r1, r2, #4
   11374:	6019      	str	r1, [r3, #0]
   11376:	6815      	ldr	r5, [r2, #0]
   11378:	e025      	b.n	113c6 <_printf_i+0x9a>
   1137a:	2a73      	cmp	r2, #115	; 0x73
   1137c:	d100      	bne.n	11380 <_printf_i+0x54>
   1137e:	e088      	b.n	11492 <_printf_i+0x166>
   11380:	d808      	bhi.n	11394 <_printf_i+0x68>
   11382:	2a6f      	cmp	r2, #111	; 0x6f
   11384:	d029      	beq.n	113da <_printf_i+0xae>
   11386:	2a70      	cmp	r2, #112	; 0x70
   11388:	d1e7      	bne.n	1135a <_printf_i+0x2e>
   1138a:	2220      	movs	r2, #32
   1138c:	6809      	ldr	r1, [r1, #0]
   1138e:	430a      	orrs	r2, r1
   11390:	6022      	str	r2, [r4, #0]
   11392:	e003      	b.n	1139c <_printf_i+0x70>
   11394:	2a75      	cmp	r2, #117	; 0x75
   11396:	d020      	beq.n	113da <_printf_i+0xae>
   11398:	2a78      	cmp	r2, #120	; 0x78
   1139a:	d1de      	bne.n	1135a <_printf_i+0x2e>
   1139c:	0022      	movs	r2, r4
   1139e:	2178      	movs	r1, #120	; 0x78
   113a0:	3245      	adds	r2, #69	; 0x45
   113a2:	7011      	strb	r1, [r2, #0]
   113a4:	4a6c      	ldr	r2, [pc, #432]	; (11558 <_printf_i+0x22c>)
   113a6:	e030      	b.n	1140a <_printf_i+0xde>
   113a8:	000e      	movs	r6, r1
   113aa:	681a      	ldr	r2, [r3, #0]
   113ac:	3642      	adds	r6, #66	; 0x42
   113ae:	1d11      	adds	r1, r2, #4
   113b0:	6019      	str	r1, [r3, #0]
   113b2:	6813      	ldr	r3, [r2, #0]
   113b4:	7033      	strb	r3, [r6, #0]
   113b6:	2301      	movs	r3, #1
   113b8:	e079      	b.n	114ae <_printf_i+0x182>
   113ba:	0649      	lsls	r1, r1, #25
   113bc:	d5d9      	bpl.n	11372 <_printf_i+0x46>
   113be:	1d11      	adds	r1, r2, #4
   113c0:	6019      	str	r1, [r3, #0]
   113c2:	2300      	movs	r3, #0
   113c4:	5ed5      	ldrsh	r5, [r2, r3]
   113c6:	2d00      	cmp	r5, #0
   113c8:	da03      	bge.n	113d2 <_printf_i+0xa6>
   113ca:	232d      	movs	r3, #45	; 0x2d
   113cc:	9a04      	ldr	r2, [sp, #16]
   113ce:	426d      	negs	r5, r5
   113d0:	7013      	strb	r3, [r2, #0]
   113d2:	4b62      	ldr	r3, [pc, #392]	; (1155c <_printf_i+0x230>)
   113d4:	270a      	movs	r7, #10
   113d6:	9303      	str	r3, [sp, #12]
   113d8:	e02f      	b.n	1143a <_printf_i+0x10e>
   113da:	6820      	ldr	r0, [r4, #0]
   113dc:	6819      	ldr	r1, [r3, #0]
   113de:	0605      	lsls	r5, r0, #24
   113e0:	d503      	bpl.n	113ea <_printf_i+0xbe>
   113e2:	1d08      	adds	r0, r1, #4
   113e4:	6018      	str	r0, [r3, #0]
   113e6:	680d      	ldr	r5, [r1, #0]
   113e8:	e005      	b.n	113f6 <_printf_i+0xca>
   113ea:	0640      	lsls	r0, r0, #25
   113ec:	d5f9      	bpl.n	113e2 <_printf_i+0xb6>
   113ee:	680d      	ldr	r5, [r1, #0]
   113f0:	1d08      	adds	r0, r1, #4
   113f2:	6018      	str	r0, [r3, #0]
   113f4:	b2ad      	uxth	r5, r5
   113f6:	4b59      	ldr	r3, [pc, #356]	; (1155c <_printf_i+0x230>)
   113f8:	2708      	movs	r7, #8
   113fa:	9303      	str	r3, [sp, #12]
   113fc:	2a6f      	cmp	r2, #111	; 0x6f
   113fe:	d018      	beq.n	11432 <_printf_i+0x106>
   11400:	270a      	movs	r7, #10
   11402:	e016      	b.n	11432 <_printf_i+0x106>
   11404:	3145      	adds	r1, #69	; 0x45
   11406:	700a      	strb	r2, [r1, #0]
   11408:	4a54      	ldr	r2, [pc, #336]	; (1155c <_printf_i+0x230>)
   1140a:	9203      	str	r2, [sp, #12]
   1140c:	681a      	ldr	r2, [r3, #0]
   1140e:	6821      	ldr	r1, [r4, #0]
   11410:	1d10      	adds	r0, r2, #4
   11412:	6018      	str	r0, [r3, #0]
   11414:	6815      	ldr	r5, [r2, #0]
   11416:	0608      	lsls	r0, r1, #24
   11418:	d522      	bpl.n	11460 <_printf_i+0x134>
   1141a:	07cb      	lsls	r3, r1, #31
   1141c:	d502      	bpl.n	11424 <_printf_i+0xf8>
   1141e:	2320      	movs	r3, #32
   11420:	4319      	orrs	r1, r3
   11422:	6021      	str	r1, [r4, #0]
   11424:	2710      	movs	r7, #16
   11426:	2d00      	cmp	r5, #0
   11428:	d103      	bne.n	11432 <_printf_i+0x106>
   1142a:	2320      	movs	r3, #32
   1142c:	6822      	ldr	r2, [r4, #0]
   1142e:	439a      	bics	r2, r3
   11430:	6022      	str	r2, [r4, #0]
   11432:	0023      	movs	r3, r4
   11434:	2200      	movs	r2, #0
   11436:	3343      	adds	r3, #67	; 0x43
   11438:	701a      	strb	r2, [r3, #0]
   1143a:	6863      	ldr	r3, [r4, #4]
   1143c:	60a3      	str	r3, [r4, #8]
   1143e:	2b00      	cmp	r3, #0
   11440:	db5c      	blt.n	114fc <_printf_i+0x1d0>
   11442:	2204      	movs	r2, #4
   11444:	6821      	ldr	r1, [r4, #0]
   11446:	4391      	bics	r1, r2
   11448:	6021      	str	r1, [r4, #0]
   1144a:	2d00      	cmp	r5, #0
   1144c:	d158      	bne.n	11500 <_printf_i+0x1d4>
   1144e:	9e04      	ldr	r6, [sp, #16]
   11450:	2b00      	cmp	r3, #0
   11452:	d064      	beq.n	1151e <_printf_i+0x1f2>
   11454:	0026      	movs	r6, r4
   11456:	9b03      	ldr	r3, [sp, #12]
   11458:	3642      	adds	r6, #66	; 0x42
   1145a:	781b      	ldrb	r3, [r3, #0]
   1145c:	7033      	strb	r3, [r6, #0]
   1145e:	e05e      	b.n	1151e <_printf_i+0x1f2>
   11460:	0648      	lsls	r0, r1, #25
   11462:	d5da      	bpl.n	1141a <_printf_i+0xee>
   11464:	b2ad      	uxth	r5, r5
   11466:	e7d8      	b.n	1141a <_printf_i+0xee>
   11468:	6809      	ldr	r1, [r1, #0]
   1146a:	681a      	ldr	r2, [r3, #0]
   1146c:	0608      	lsls	r0, r1, #24
   1146e:	d505      	bpl.n	1147c <_printf_i+0x150>
   11470:	1d11      	adds	r1, r2, #4
   11472:	6019      	str	r1, [r3, #0]
   11474:	6813      	ldr	r3, [r2, #0]
   11476:	6962      	ldr	r2, [r4, #20]
   11478:	601a      	str	r2, [r3, #0]
   1147a:	e006      	b.n	1148a <_printf_i+0x15e>
   1147c:	0649      	lsls	r1, r1, #25
   1147e:	d5f7      	bpl.n	11470 <_printf_i+0x144>
   11480:	1d11      	adds	r1, r2, #4
   11482:	6019      	str	r1, [r3, #0]
   11484:	6813      	ldr	r3, [r2, #0]
   11486:	8aa2      	ldrh	r2, [r4, #20]
   11488:	801a      	strh	r2, [r3, #0]
   1148a:	2300      	movs	r3, #0
   1148c:	9e04      	ldr	r6, [sp, #16]
   1148e:	6123      	str	r3, [r4, #16]
   11490:	e054      	b.n	1153c <_printf_i+0x210>
   11492:	681a      	ldr	r2, [r3, #0]
   11494:	1d11      	adds	r1, r2, #4
   11496:	6019      	str	r1, [r3, #0]
   11498:	6816      	ldr	r6, [r2, #0]
   1149a:	2100      	movs	r1, #0
   1149c:	6862      	ldr	r2, [r4, #4]
   1149e:	0030      	movs	r0, r6
   114a0:	f001 f9fe 	bl	128a0 <memchr>
   114a4:	2800      	cmp	r0, #0
   114a6:	d001      	beq.n	114ac <_printf_i+0x180>
   114a8:	1b80      	subs	r0, r0, r6
   114aa:	6060      	str	r0, [r4, #4]
   114ac:	6863      	ldr	r3, [r4, #4]
   114ae:	6123      	str	r3, [r4, #16]
   114b0:	2300      	movs	r3, #0
   114b2:	9a04      	ldr	r2, [sp, #16]
   114b4:	7013      	strb	r3, [r2, #0]
   114b6:	e041      	b.n	1153c <_printf_i+0x210>
   114b8:	6923      	ldr	r3, [r4, #16]
   114ba:	0032      	movs	r2, r6
   114bc:	9906      	ldr	r1, [sp, #24]
   114be:	9805      	ldr	r0, [sp, #20]
   114c0:	9d07      	ldr	r5, [sp, #28]
   114c2:	47a8      	blx	r5
   114c4:	1c43      	adds	r3, r0, #1
   114c6:	d043      	beq.n	11550 <_printf_i+0x224>
   114c8:	6823      	ldr	r3, [r4, #0]
   114ca:	2500      	movs	r5, #0
   114cc:	079b      	lsls	r3, r3, #30
   114ce:	d40f      	bmi.n	114f0 <_printf_i+0x1c4>
   114d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   114d2:	68e0      	ldr	r0, [r4, #12]
   114d4:	4298      	cmp	r0, r3
   114d6:	da3d      	bge.n	11554 <_printf_i+0x228>
   114d8:	0018      	movs	r0, r3
   114da:	e03b      	b.n	11554 <_printf_i+0x228>
   114dc:	0022      	movs	r2, r4
   114de:	2301      	movs	r3, #1
   114e0:	3219      	adds	r2, #25
   114e2:	9906      	ldr	r1, [sp, #24]
   114e4:	9805      	ldr	r0, [sp, #20]
   114e6:	9e07      	ldr	r6, [sp, #28]
   114e8:	47b0      	blx	r6
   114ea:	1c43      	adds	r3, r0, #1
   114ec:	d030      	beq.n	11550 <_printf_i+0x224>
   114ee:	3501      	adds	r5, #1
   114f0:	68e3      	ldr	r3, [r4, #12]
   114f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   114f4:	1a9b      	subs	r3, r3, r2
   114f6:	429d      	cmp	r5, r3
   114f8:	dbf0      	blt.n	114dc <_printf_i+0x1b0>
   114fa:	e7e9      	b.n	114d0 <_printf_i+0x1a4>
   114fc:	2d00      	cmp	r5, #0
   114fe:	d0a9      	beq.n	11454 <_printf_i+0x128>
   11500:	9e04      	ldr	r6, [sp, #16]
   11502:	0028      	movs	r0, r5
   11504:	0039      	movs	r1, r7
   11506:	f7fd fa77 	bl	e9f8 <__aeabi_uidivmod>
   1150a:	9b03      	ldr	r3, [sp, #12]
   1150c:	3e01      	subs	r6, #1
   1150e:	5c5b      	ldrb	r3, [r3, r1]
   11510:	0028      	movs	r0, r5
   11512:	7033      	strb	r3, [r6, #0]
   11514:	0039      	movs	r1, r7
   11516:	f7fd f9e9 	bl	e8ec <__udivsi3>
   1151a:	1e05      	subs	r5, r0, #0
   1151c:	d1f1      	bne.n	11502 <_printf_i+0x1d6>
   1151e:	2f08      	cmp	r7, #8
   11520:	d109      	bne.n	11536 <_printf_i+0x20a>
   11522:	6823      	ldr	r3, [r4, #0]
   11524:	07db      	lsls	r3, r3, #31
   11526:	d506      	bpl.n	11536 <_printf_i+0x20a>
   11528:	6863      	ldr	r3, [r4, #4]
   1152a:	6922      	ldr	r2, [r4, #16]
   1152c:	4293      	cmp	r3, r2
   1152e:	dc02      	bgt.n	11536 <_printf_i+0x20a>
   11530:	2330      	movs	r3, #48	; 0x30
   11532:	3e01      	subs	r6, #1
   11534:	7033      	strb	r3, [r6, #0]
   11536:	9b04      	ldr	r3, [sp, #16]
   11538:	1b9b      	subs	r3, r3, r6
   1153a:	6123      	str	r3, [r4, #16]
   1153c:	9b07      	ldr	r3, [sp, #28]
   1153e:	aa09      	add	r2, sp, #36	; 0x24
   11540:	9300      	str	r3, [sp, #0]
   11542:	0021      	movs	r1, r4
   11544:	9b06      	ldr	r3, [sp, #24]
   11546:	9805      	ldr	r0, [sp, #20]
   11548:	f7ff fe82 	bl	11250 <_printf_common>
   1154c:	1c43      	adds	r3, r0, #1
   1154e:	d1b3      	bne.n	114b8 <_printf_i+0x18c>
   11550:	2001      	movs	r0, #1
   11552:	4240      	negs	r0, r0
   11554:	b00b      	add	sp, #44	; 0x2c
   11556:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11558:	00014216 	.word	0x00014216
   1155c:	00014205 	.word	0x00014205

00011560 <realloc>:
   11560:	b510      	push	{r4, lr}
   11562:	4b03      	ldr	r3, [pc, #12]	; (11570 <realloc+0x10>)
   11564:	000a      	movs	r2, r1
   11566:	0001      	movs	r1, r0
   11568:	6818      	ldr	r0, [r3, #0]
   1156a:	f001 fc97 	bl	12e9c <_realloc_r>
   1156e:	bd10      	pop	{r4, pc}
   11570:	200000a4 	.word	0x200000a4

00011574 <_sbrk_r>:
   11574:	2300      	movs	r3, #0
   11576:	b570      	push	{r4, r5, r6, lr}
   11578:	4c06      	ldr	r4, [pc, #24]	; (11594 <_sbrk_r+0x20>)
   1157a:	0005      	movs	r5, r0
   1157c:	0008      	movs	r0, r1
   1157e:	6023      	str	r3, [r4, #0]
   11580:	f001 fe46 	bl	13210 <_sbrk>
   11584:	1c43      	adds	r3, r0, #1
   11586:	d103      	bne.n	11590 <_sbrk_r+0x1c>
   11588:	6823      	ldr	r3, [r4, #0]
   1158a:	2b00      	cmp	r3, #0
   1158c:	d000      	beq.n	11590 <_sbrk_r+0x1c>
   1158e:	602b      	str	r3, [r5, #0]
   11590:	bd70      	pop	{r4, r5, r6, pc}
   11592:	46c0      	nop			; (mov r8, r8)
   11594:	20000f84 	.word	0x20000f84

00011598 <strchr>:
   11598:	b2c9      	uxtb	r1, r1
   1159a:	7803      	ldrb	r3, [r0, #0]
   1159c:	2b00      	cmp	r3, #0
   1159e:	d004      	beq.n	115aa <strchr+0x12>
   115a0:	4299      	cmp	r1, r3
   115a2:	d100      	bne.n	115a6 <strchr+0xe>
   115a4:	4770      	bx	lr
   115a6:	3001      	adds	r0, #1
   115a8:	e7f7      	b.n	1159a <strchr+0x2>
   115aa:	424b      	negs	r3, r1
   115ac:	4159      	adcs	r1, r3
   115ae:	4249      	negs	r1, r1
   115b0:	4008      	ands	r0, r1
   115b2:	e7f7      	b.n	115a4 <strchr+0xc>

000115b4 <strcpy>:
   115b4:	1c03      	adds	r3, r0, #0
   115b6:	780a      	ldrb	r2, [r1, #0]
   115b8:	3101      	adds	r1, #1
   115ba:	701a      	strb	r2, [r3, #0]
   115bc:	3301      	adds	r3, #1
   115be:	2a00      	cmp	r2, #0
   115c0:	d1f9      	bne.n	115b6 <strcpy+0x2>
   115c2:	4770      	bx	lr

000115c4 <strlen>:
   115c4:	2300      	movs	r3, #0
   115c6:	5cc2      	ldrb	r2, [r0, r3]
   115c8:	3301      	adds	r3, #1
   115ca:	2a00      	cmp	r2, #0
   115cc:	d1fb      	bne.n	115c6 <strlen+0x2>
   115ce:	1e58      	subs	r0, r3, #1
   115d0:	4770      	bx	lr

000115d2 <strncpy>:
   115d2:	b570      	push	{r4, r5, r6, lr}
   115d4:	0004      	movs	r4, r0
   115d6:	2a00      	cmp	r2, #0
   115d8:	d100      	bne.n	115dc <strncpy+0xa>
   115da:	bd70      	pop	{r4, r5, r6, pc}
   115dc:	780d      	ldrb	r5, [r1, #0]
   115de:	1e56      	subs	r6, r2, #1
   115e0:	1c63      	adds	r3, r4, #1
   115e2:	7025      	strb	r5, [r4, #0]
   115e4:	3101      	adds	r1, #1
   115e6:	2d00      	cmp	r5, #0
   115e8:	d105      	bne.n	115f6 <strncpy+0x24>
   115ea:	18a4      	adds	r4, r4, r2
   115ec:	429c      	cmp	r4, r3
   115ee:	d0f4      	beq.n	115da <strncpy+0x8>
   115f0:	701d      	strb	r5, [r3, #0]
   115f2:	3301      	adds	r3, #1
   115f4:	e7fa      	b.n	115ec <strncpy+0x1a>
   115f6:	001c      	movs	r4, r3
   115f8:	0032      	movs	r2, r6
   115fa:	e7ec      	b.n	115d6 <strncpy+0x4>

000115fc <__swbuf_r>:
   115fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115fe:	0005      	movs	r5, r0
   11600:	000e      	movs	r6, r1
   11602:	0014      	movs	r4, r2
   11604:	2800      	cmp	r0, #0
   11606:	d004      	beq.n	11612 <__swbuf_r+0x16>
   11608:	6983      	ldr	r3, [r0, #24]
   1160a:	2b00      	cmp	r3, #0
   1160c:	d101      	bne.n	11612 <__swbuf_r+0x16>
   1160e:	f001 f839 	bl	12684 <__sinit>
   11612:	4b22      	ldr	r3, [pc, #136]	; (1169c <__swbuf_r+0xa0>)
   11614:	429c      	cmp	r4, r3
   11616:	d12d      	bne.n	11674 <__swbuf_r+0x78>
   11618:	686c      	ldr	r4, [r5, #4]
   1161a:	69a3      	ldr	r3, [r4, #24]
   1161c:	60a3      	str	r3, [r4, #8]
   1161e:	89a3      	ldrh	r3, [r4, #12]
   11620:	071b      	lsls	r3, r3, #28
   11622:	d531      	bpl.n	11688 <__swbuf_r+0x8c>
   11624:	6923      	ldr	r3, [r4, #16]
   11626:	2b00      	cmp	r3, #0
   11628:	d02e      	beq.n	11688 <__swbuf_r+0x8c>
   1162a:	6823      	ldr	r3, [r4, #0]
   1162c:	6922      	ldr	r2, [r4, #16]
   1162e:	b2f7      	uxtb	r7, r6
   11630:	1a98      	subs	r0, r3, r2
   11632:	6963      	ldr	r3, [r4, #20]
   11634:	b2f6      	uxtb	r6, r6
   11636:	4298      	cmp	r0, r3
   11638:	db05      	blt.n	11646 <__swbuf_r+0x4a>
   1163a:	0021      	movs	r1, r4
   1163c:	0028      	movs	r0, r5
   1163e:	f000 ffb3 	bl	125a8 <_fflush_r>
   11642:	2800      	cmp	r0, #0
   11644:	d126      	bne.n	11694 <__swbuf_r+0x98>
   11646:	68a3      	ldr	r3, [r4, #8]
   11648:	3001      	adds	r0, #1
   1164a:	3b01      	subs	r3, #1
   1164c:	60a3      	str	r3, [r4, #8]
   1164e:	6823      	ldr	r3, [r4, #0]
   11650:	1c5a      	adds	r2, r3, #1
   11652:	6022      	str	r2, [r4, #0]
   11654:	701f      	strb	r7, [r3, #0]
   11656:	6963      	ldr	r3, [r4, #20]
   11658:	4298      	cmp	r0, r3
   1165a:	d004      	beq.n	11666 <__swbuf_r+0x6a>
   1165c:	89a3      	ldrh	r3, [r4, #12]
   1165e:	07db      	lsls	r3, r3, #31
   11660:	d51a      	bpl.n	11698 <__swbuf_r+0x9c>
   11662:	2e0a      	cmp	r6, #10
   11664:	d118      	bne.n	11698 <__swbuf_r+0x9c>
   11666:	0021      	movs	r1, r4
   11668:	0028      	movs	r0, r5
   1166a:	f000 ff9d 	bl	125a8 <_fflush_r>
   1166e:	2800      	cmp	r0, #0
   11670:	d012      	beq.n	11698 <__swbuf_r+0x9c>
   11672:	e00f      	b.n	11694 <__swbuf_r+0x98>
   11674:	4b0a      	ldr	r3, [pc, #40]	; (116a0 <__swbuf_r+0xa4>)
   11676:	429c      	cmp	r4, r3
   11678:	d101      	bne.n	1167e <__swbuf_r+0x82>
   1167a:	68ac      	ldr	r4, [r5, #8]
   1167c:	e7cd      	b.n	1161a <__swbuf_r+0x1e>
   1167e:	4b09      	ldr	r3, [pc, #36]	; (116a4 <__swbuf_r+0xa8>)
   11680:	429c      	cmp	r4, r3
   11682:	d1ca      	bne.n	1161a <__swbuf_r+0x1e>
   11684:	68ec      	ldr	r4, [r5, #12]
   11686:	e7c8      	b.n	1161a <__swbuf_r+0x1e>
   11688:	0021      	movs	r1, r4
   1168a:	0028      	movs	r0, r5
   1168c:	f000 f818 	bl	116c0 <__swsetup_r>
   11690:	2800      	cmp	r0, #0
   11692:	d0ca      	beq.n	1162a <__swbuf_r+0x2e>
   11694:	2601      	movs	r6, #1
   11696:	4276      	negs	r6, r6
   11698:	0030      	movs	r0, r6
   1169a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1169c:	00014358 	.word	0x00014358
   116a0:	00014378 	.word	0x00014378
   116a4:	00014338 	.word	0x00014338

000116a8 <__ascii_wctomb>:
   116a8:	1e0b      	subs	r3, r1, #0
   116aa:	d004      	beq.n	116b6 <__ascii_wctomb+0xe>
   116ac:	2aff      	cmp	r2, #255	; 0xff
   116ae:	d904      	bls.n	116ba <__ascii_wctomb+0x12>
   116b0:	238a      	movs	r3, #138	; 0x8a
   116b2:	6003      	str	r3, [r0, #0]
   116b4:	3b8b      	subs	r3, #139	; 0x8b
   116b6:	0018      	movs	r0, r3
   116b8:	4770      	bx	lr
   116ba:	700a      	strb	r2, [r1, #0]
   116bc:	2301      	movs	r3, #1
   116be:	e7fa      	b.n	116b6 <__ascii_wctomb+0xe>

000116c0 <__swsetup_r>:
   116c0:	4b36      	ldr	r3, [pc, #216]	; (1179c <__swsetup_r+0xdc>)
   116c2:	b570      	push	{r4, r5, r6, lr}
   116c4:	681d      	ldr	r5, [r3, #0]
   116c6:	0006      	movs	r6, r0
   116c8:	000c      	movs	r4, r1
   116ca:	2d00      	cmp	r5, #0
   116cc:	d005      	beq.n	116da <__swsetup_r+0x1a>
   116ce:	69ab      	ldr	r3, [r5, #24]
   116d0:	2b00      	cmp	r3, #0
   116d2:	d102      	bne.n	116da <__swsetup_r+0x1a>
   116d4:	0028      	movs	r0, r5
   116d6:	f000 ffd5 	bl	12684 <__sinit>
   116da:	4b31      	ldr	r3, [pc, #196]	; (117a0 <__swsetup_r+0xe0>)
   116dc:	429c      	cmp	r4, r3
   116de:	d10f      	bne.n	11700 <__swsetup_r+0x40>
   116e0:	686c      	ldr	r4, [r5, #4]
   116e2:	230c      	movs	r3, #12
   116e4:	5ee2      	ldrsh	r2, [r4, r3]
   116e6:	b293      	uxth	r3, r2
   116e8:	0719      	lsls	r1, r3, #28
   116ea:	d42d      	bmi.n	11748 <__swsetup_r+0x88>
   116ec:	06d9      	lsls	r1, r3, #27
   116ee:	d411      	bmi.n	11714 <__swsetup_r+0x54>
   116f0:	2309      	movs	r3, #9
   116f2:	2001      	movs	r0, #1
   116f4:	6033      	str	r3, [r6, #0]
   116f6:	3337      	adds	r3, #55	; 0x37
   116f8:	4313      	orrs	r3, r2
   116fa:	81a3      	strh	r3, [r4, #12]
   116fc:	4240      	negs	r0, r0
   116fe:	bd70      	pop	{r4, r5, r6, pc}
   11700:	4b28      	ldr	r3, [pc, #160]	; (117a4 <__swsetup_r+0xe4>)
   11702:	429c      	cmp	r4, r3
   11704:	d101      	bne.n	1170a <__swsetup_r+0x4a>
   11706:	68ac      	ldr	r4, [r5, #8]
   11708:	e7eb      	b.n	116e2 <__swsetup_r+0x22>
   1170a:	4b27      	ldr	r3, [pc, #156]	; (117a8 <__swsetup_r+0xe8>)
   1170c:	429c      	cmp	r4, r3
   1170e:	d1e8      	bne.n	116e2 <__swsetup_r+0x22>
   11710:	68ec      	ldr	r4, [r5, #12]
   11712:	e7e6      	b.n	116e2 <__swsetup_r+0x22>
   11714:	075b      	lsls	r3, r3, #29
   11716:	d513      	bpl.n	11740 <__swsetup_r+0x80>
   11718:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1171a:	2900      	cmp	r1, #0
   1171c:	d008      	beq.n	11730 <__swsetup_r+0x70>
   1171e:	0023      	movs	r3, r4
   11720:	3344      	adds	r3, #68	; 0x44
   11722:	4299      	cmp	r1, r3
   11724:	d002      	beq.n	1172c <__swsetup_r+0x6c>
   11726:	0030      	movs	r0, r6
   11728:	f7ff f8be 	bl	108a8 <_free_r>
   1172c:	2300      	movs	r3, #0
   1172e:	6363      	str	r3, [r4, #52]	; 0x34
   11730:	2224      	movs	r2, #36	; 0x24
   11732:	89a3      	ldrh	r3, [r4, #12]
   11734:	4393      	bics	r3, r2
   11736:	81a3      	strh	r3, [r4, #12]
   11738:	2300      	movs	r3, #0
   1173a:	6063      	str	r3, [r4, #4]
   1173c:	6923      	ldr	r3, [r4, #16]
   1173e:	6023      	str	r3, [r4, #0]
   11740:	2308      	movs	r3, #8
   11742:	89a2      	ldrh	r2, [r4, #12]
   11744:	4313      	orrs	r3, r2
   11746:	81a3      	strh	r3, [r4, #12]
   11748:	6923      	ldr	r3, [r4, #16]
   1174a:	2b00      	cmp	r3, #0
   1174c:	d10b      	bne.n	11766 <__swsetup_r+0xa6>
   1174e:	21a0      	movs	r1, #160	; 0xa0
   11750:	2280      	movs	r2, #128	; 0x80
   11752:	89a3      	ldrh	r3, [r4, #12]
   11754:	0089      	lsls	r1, r1, #2
   11756:	0092      	lsls	r2, r2, #2
   11758:	400b      	ands	r3, r1
   1175a:	4293      	cmp	r3, r2
   1175c:	d003      	beq.n	11766 <__swsetup_r+0xa6>
   1175e:	0021      	movs	r1, r4
   11760:	0030      	movs	r0, r6
   11762:	f001 f859 	bl	12818 <__smakebuf_r>
   11766:	2301      	movs	r3, #1
   11768:	89a2      	ldrh	r2, [r4, #12]
   1176a:	4013      	ands	r3, r2
   1176c:	d011      	beq.n	11792 <__swsetup_r+0xd2>
   1176e:	2300      	movs	r3, #0
   11770:	60a3      	str	r3, [r4, #8]
   11772:	6963      	ldr	r3, [r4, #20]
   11774:	425b      	negs	r3, r3
   11776:	61a3      	str	r3, [r4, #24]
   11778:	2000      	movs	r0, #0
   1177a:	6923      	ldr	r3, [r4, #16]
   1177c:	4283      	cmp	r3, r0
   1177e:	d1be      	bne.n	116fe <__swsetup_r+0x3e>
   11780:	230c      	movs	r3, #12
   11782:	5ee2      	ldrsh	r2, [r4, r3]
   11784:	0613      	lsls	r3, r2, #24
   11786:	d5ba      	bpl.n	116fe <__swsetup_r+0x3e>
   11788:	2340      	movs	r3, #64	; 0x40
   1178a:	4313      	orrs	r3, r2
   1178c:	81a3      	strh	r3, [r4, #12]
   1178e:	3801      	subs	r0, #1
   11790:	e7b5      	b.n	116fe <__swsetup_r+0x3e>
   11792:	0792      	lsls	r2, r2, #30
   11794:	d400      	bmi.n	11798 <__swsetup_r+0xd8>
   11796:	6963      	ldr	r3, [r4, #20]
   11798:	60a3      	str	r3, [r4, #8]
   1179a:	e7ed      	b.n	11778 <__swsetup_r+0xb8>
   1179c:	200000a4 	.word	0x200000a4
   117a0:	00014358 	.word	0x00014358
   117a4:	00014378 	.word	0x00014378
   117a8:	00014338 	.word	0x00014338

000117ac <abort>:
   117ac:	b510      	push	{r4, lr}
   117ae:	2006      	movs	r0, #6
   117b0:	f001 fbc4 	bl	12f3c <raise>
   117b4:	2001      	movs	r0, #1
   117b6:	f001 fd41 	bl	1323c <_exit>

000117ba <quorem>:
   117ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   117bc:	6903      	ldr	r3, [r0, #16]
   117be:	690c      	ldr	r4, [r1, #16]
   117c0:	b089      	sub	sp, #36	; 0x24
   117c2:	0007      	movs	r7, r0
   117c4:	9105      	str	r1, [sp, #20]
   117c6:	2600      	movs	r6, #0
   117c8:	429c      	cmp	r4, r3
   117ca:	dc6d      	bgt.n	118a8 <quorem+0xee>
   117cc:	000b      	movs	r3, r1
   117ce:	3c01      	subs	r4, #1
   117d0:	3314      	adds	r3, #20
   117d2:	00a5      	lsls	r5, r4, #2
   117d4:	9303      	str	r3, [sp, #12]
   117d6:	195b      	adds	r3, r3, r5
   117d8:	9304      	str	r3, [sp, #16]
   117da:	0003      	movs	r3, r0
   117dc:	3314      	adds	r3, #20
   117de:	9302      	str	r3, [sp, #8]
   117e0:	195d      	adds	r5, r3, r5
   117e2:	9b04      	ldr	r3, [sp, #16]
   117e4:	6828      	ldr	r0, [r5, #0]
   117e6:	681b      	ldr	r3, [r3, #0]
   117e8:	1c59      	adds	r1, r3, #1
   117ea:	9301      	str	r3, [sp, #4]
   117ec:	f7fd f87e 	bl	e8ec <__udivsi3>
   117f0:	9001      	str	r0, [sp, #4]
   117f2:	42b0      	cmp	r0, r6
   117f4:	d02d      	beq.n	11852 <quorem+0x98>
   117f6:	9b03      	ldr	r3, [sp, #12]
   117f8:	9802      	ldr	r0, [sp, #8]
   117fa:	469c      	mov	ip, r3
   117fc:	9606      	str	r6, [sp, #24]
   117fe:	4662      	mov	r2, ip
   11800:	ca08      	ldmia	r2!, {r3}
   11802:	4694      	mov	ip, r2
   11804:	9a01      	ldr	r2, [sp, #4]
   11806:	b299      	uxth	r1, r3
   11808:	4351      	muls	r1, r2
   1180a:	0c1b      	lsrs	r3, r3, #16
   1180c:	4353      	muls	r3, r2
   1180e:	1989      	adds	r1, r1, r6
   11810:	0c0a      	lsrs	r2, r1, #16
   11812:	189b      	adds	r3, r3, r2
   11814:	9307      	str	r3, [sp, #28]
   11816:	8802      	ldrh	r2, [r0, #0]
   11818:	0c1e      	lsrs	r6, r3, #16
   1181a:	9b06      	ldr	r3, [sp, #24]
   1181c:	b289      	uxth	r1, r1
   1181e:	18d2      	adds	r2, r2, r3
   11820:	6803      	ldr	r3, [r0, #0]
   11822:	1a52      	subs	r2, r2, r1
   11824:	0c19      	lsrs	r1, r3, #16
   11826:	466b      	mov	r3, sp
   11828:	8b9b      	ldrh	r3, [r3, #28]
   1182a:	1acb      	subs	r3, r1, r3
   1182c:	1411      	asrs	r1, r2, #16
   1182e:	185b      	adds	r3, r3, r1
   11830:	1419      	asrs	r1, r3, #16
   11832:	b292      	uxth	r2, r2
   11834:	041b      	lsls	r3, r3, #16
   11836:	431a      	orrs	r2, r3
   11838:	9b04      	ldr	r3, [sp, #16]
   1183a:	9106      	str	r1, [sp, #24]
   1183c:	c004      	stmia	r0!, {r2}
   1183e:	4563      	cmp	r3, ip
   11840:	d2dd      	bcs.n	117fe <quorem+0x44>
   11842:	682b      	ldr	r3, [r5, #0]
   11844:	2b00      	cmp	r3, #0
   11846:	d104      	bne.n	11852 <quorem+0x98>
   11848:	9b02      	ldr	r3, [sp, #8]
   1184a:	3d04      	subs	r5, #4
   1184c:	42ab      	cmp	r3, r5
   1184e:	d32e      	bcc.n	118ae <quorem+0xf4>
   11850:	613c      	str	r4, [r7, #16]
   11852:	9905      	ldr	r1, [sp, #20]
   11854:	0038      	movs	r0, r7
   11856:	f001 fa42 	bl	12cde <__mcmp>
   1185a:	2800      	cmp	r0, #0
   1185c:	db23      	blt.n	118a6 <quorem+0xec>
   1185e:	2500      	movs	r5, #0
   11860:	9b01      	ldr	r3, [sp, #4]
   11862:	9802      	ldr	r0, [sp, #8]
   11864:	3301      	adds	r3, #1
   11866:	9903      	ldr	r1, [sp, #12]
   11868:	9301      	str	r3, [sp, #4]
   1186a:	c908      	ldmia	r1!, {r3}
   1186c:	8802      	ldrh	r2, [r0, #0]
   1186e:	1955      	adds	r5, r2, r5
   11870:	b29a      	uxth	r2, r3
   11872:	1aaa      	subs	r2, r5, r2
   11874:	6805      	ldr	r5, [r0, #0]
   11876:	0c1b      	lsrs	r3, r3, #16
   11878:	0c2d      	lsrs	r5, r5, #16
   1187a:	1aeb      	subs	r3, r5, r3
   1187c:	1415      	asrs	r5, r2, #16
   1187e:	195b      	adds	r3, r3, r5
   11880:	141d      	asrs	r5, r3, #16
   11882:	b292      	uxth	r2, r2
   11884:	041b      	lsls	r3, r3, #16
   11886:	4313      	orrs	r3, r2
   11888:	c008      	stmia	r0!, {r3}
   1188a:	9b04      	ldr	r3, [sp, #16]
   1188c:	428b      	cmp	r3, r1
   1188e:	d2ec      	bcs.n	1186a <quorem+0xb0>
   11890:	9a02      	ldr	r2, [sp, #8]
   11892:	00a3      	lsls	r3, r4, #2
   11894:	18d3      	adds	r3, r2, r3
   11896:	681a      	ldr	r2, [r3, #0]
   11898:	2a00      	cmp	r2, #0
   1189a:	d104      	bne.n	118a6 <quorem+0xec>
   1189c:	9a02      	ldr	r2, [sp, #8]
   1189e:	3b04      	subs	r3, #4
   118a0:	429a      	cmp	r2, r3
   118a2:	d309      	bcc.n	118b8 <quorem+0xfe>
   118a4:	613c      	str	r4, [r7, #16]
   118a6:	9e01      	ldr	r6, [sp, #4]
   118a8:	0030      	movs	r0, r6
   118aa:	b009      	add	sp, #36	; 0x24
   118ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118ae:	682b      	ldr	r3, [r5, #0]
   118b0:	2b00      	cmp	r3, #0
   118b2:	d1cd      	bne.n	11850 <quorem+0x96>
   118b4:	3c01      	subs	r4, #1
   118b6:	e7c7      	b.n	11848 <quorem+0x8e>
   118b8:	681a      	ldr	r2, [r3, #0]
   118ba:	2a00      	cmp	r2, #0
   118bc:	d1f2      	bne.n	118a4 <quorem+0xea>
   118be:	3c01      	subs	r4, #1
   118c0:	e7ec      	b.n	1189c <quorem+0xe2>
	...

000118c4 <_dtoa_r>:
   118c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   118c6:	0016      	movs	r6, r2
   118c8:	001f      	movs	r7, r3
   118ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
   118cc:	b09d      	sub	sp, #116	; 0x74
   118ce:	9004      	str	r0, [sp, #16]
   118d0:	9d25      	ldr	r5, [sp, #148]	; 0x94
   118d2:	9606      	str	r6, [sp, #24]
   118d4:	9707      	str	r7, [sp, #28]
   118d6:	2c00      	cmp	r4, #0
   118d8:	d108      	bne.n	118ec <_dtoa_r+0x28>
   118da:	2010      	movs	r0, #16
   118dc:	f7fe ff9e 	bl	1081c <malloc>
   118e0:	9b04      	ldr	r3, [sp, #16]
   118e2:	6258      	str	r0, [r3, #36]	; 0x24
   118e4:	6044      	str	r4, [r0, #4]
   118e6:	6084      	str	r4, [r0, #8]
   118e8:	6004      	str	r4, [r0, #0]
   118ea:	60c4      	str	r4, [r0, #12]
   118ec:	9b04      	ldr	r3, [sp, #16]
   118ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   118f0:	6819      	ldr	r1, [r3, #0]
   118f2:	2900      	cmp	r1, #0
   118f4:	d00b      	beq.n	1190e <_dtoa_r+0x4a>
   118f6:	685a      	ldr	r2, [r3, #4]
   118f8:	2301      	movs	r3, #1
   118fa:	4093      	lsls	r3, r2
   118fc:	604a      	str	r2, [r1, #4]
   118fe:	608b      	str	r3, [r1, #8]
   11900:	9804      	ldr	r0, [sp, #16]
   11902:	f001 f812 	bl	1292a <_Bfree>
   11906:	2200      	movs	r2, #0
   11908:	9b04      	ldr	r3, [sp, #16]
   1190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1190c:	601a      	str	r2, [r3, #0]
   1190e:	9b07      	ldr	r3, [sp, #28]
   11910:	2b00      	cmp	r3, #0
   11912:	da1f      	bge.n	11954 <_dtoa_r+0x90>
   11914:	2301      	movs	r3, #1
   11916:	602b      	str	r3, [r5, #0]
   11918:	007b      	lsls	r3, r7, #1
   1191a:	085b      	lsrs	r3, r3, #1
   1191c:	9307      	str	r3, [sp, #28]
   1191e:	9c07      	ldr	r4, [sp, #28]
   11920:	4bb7      	ldr	r3, [pc, #732]	; (11c00 <_dtoa_r+0x33c>)
   11922:	0022      	movs	r2, r4
   11924:	9319      	str	r3, [sp, #100]	; 0x64
   11926:	401a      	ands	r2, r3
   11928:	429a      	cmp	r2, r3
   1192a:	d116      	bne.n	1195a <_dtoa_r+0x96>
   1192c:	4bb5      	ldr	r3, [pc, #724]	; (11c04 <_dtoa_r+0x340>)
   1192e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11930:	6013      	str	r3, [r2, #0]
   11932:	9b06      	ldr	r3, [sp, #24]
   11934:	2b00      	cmp	r3, #0
   11936:	d103      	bne.n	11940 <_dtoa_r+0x7c>
   11938:	0324      	lsls	r4, r4, #12
   1193a:	d101      	bne.n	11940 <_dtoa_r+0x7c>
   1193c:	f000 fd91 	bl	12462 <_dtoa_r+0xb9e>
   11940:	4bb1      	ldr	r3, [pc, #708]	; (11c08 <_dtoa_r+0x344>)
   11942:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11944:	930a      	str	r3, [sp, #40]	; 0x28
   11946:	4bb1      	ldr	r3, [pc, #708]	; (11c0c <_dtoa_r+0x348>)
   11948:	2a00      	cmp	r2, #0
   1194a:	d001      	beq.n	11950 <_dtoa_r+0x8c>
   1194c:	f000 fd8f 	bl	1246e <_dtoa_r+0xbaa>
   11950:	f000 fd8f 	bl	12472 <_dtoa_r+0xbae>
   11954:	2300      	movs	r3, #0
   11956:	602b      	str	r3, [r5, #0]
   11958:	e7e1      	b.n	1191e <_dtoa_r+0x5a>
   1195a:	9e06      	ldr	r6, [sp, #24]
   1195c:	9f07      	ldr	r7, [sp, #28]
   1195e:	2200      	movs	r2, #0
   11960:	2300      	movs	r3, #0
   11962:	0030      	movs	r0, r6
   11964:	0039      	movs	r1, r7
   11966:	f7fd f947 	bl	ebf8 <__aeabi_dcmpeq>
   1196a:	1e05      	subs	r5, r0, #0
   1196c:	d00e      	beq.n	1198c <_dtoa_r+0xc8>
   1196e:	2301      	movs	r3, #1
   11970:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11972:	6013      	str	r3, [r2, #0]
   11974:	4ba6      	ldr	r3, [pc, #664]	; (11c10 <_dtoa_r+0x34c>)
   11976:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11978:	930a      	str	r3, [sp, #40]	; 0x28
   1197a:	2a00      	cmp	r2, #0
   1197c:	d101      	bne.n	11982 <_dtoa_r+0xbe>
   1197e:	f000 fd78 	bl	12472 <_dtoa_r+0xbae>
   11982:	4aa4      	ldr	r2, [pc, #656]	; (11c14 <_dtoa_r+0x350>)
   11984:	9926      	ldr	r1, [sp, #152]	; 0x98
   11986:	600a      	str	r2, [r1, #0]
   11988:	f000 fd73 	bl	12472 <_dtoa_r+0xbae>
   1198c:	ab1a      	add	r3, sp, #104	; 0x68
   1198e:	9301      	str	r3, [sp, #4]
   11990:	ab1b      	add	r3, sp, #108	; 0x6c
   11992:	9300      	str	r3, [sp, #0]
   11994:	0032      	movs	r2, r6
   11996:	003b      	movs	r3, r7
   11998:	9804      	ldr	r0, [sp, #16]
   1199a:	f001 fa1d 	bl	12dd8 <__d2b>
   1199e:	0063      	lsls	r3, r4, #1
   119a0:	9005      	str	r0, [sp, #20]
   119a2:	0d5b      	lsrs	r3, r3, #21
   119a4:	d100      	bne.n	119a8 <_dtoa_r+0xe4>
   119a6:	e07f      	b.n	11aa8 <_dtoa_r+0x1e4>
   119a8:	033a      	lsls	r2, r7, #12
   119aa:	4c9b      	ldr	r4, [pc, #620]	; (11c18 <_dtoa_r+0x354>)
   119ac:	0b12      	lsrs	r2, r2, #12
   119ae:	4314      	orrs	r4, r2
   119b0:	0021      	movs	r1, r4
   119b2:	4a9a      	ldr	r2, [pc, #616]	; (11c1c <_dtoa_r+0x358>)
   119b4:	0030      	movs	r0, r6
   119b6:	9518      	str	r5, [sp, #96]	; 0x60
   119b8:	189e      	adds	r6, r3, r2
   119ba:	2200      	movs	r2, #0
   119bc:	4b98      	ldr	r3, [pc, #608]	; (11c20 <_dtoa_r+0x35c>)
   119be:	f7fe fb0d 	bl	ffdc <__aeabi_dsub>
   119c2:	4a98      	ldr	r2, [pc, #608]	; (11c24 <_dtoa_r+0x360>)
   119c4:	4b98      	ldr	r3, [pc, #608]	; (11c28 <_dtoa_r+0x364>)
   119c6:	f7fe f889 	bl	fadc <__aeabi_dmul>
   119ca:	4a98      	ldr	r2, [pc, #608]	; (11c2c <_dtoa_r+0x368>)
   119cc:	4b98      	ldr	r3, [pc, #608]	; (11c30 <_dtoa_r+0x36c>)
   119ce:	f7fd f941 	bl	ec54 <__aeabi_dadd>
   119d2:	0004      	movs	r4, r0
   119d4:	0030      	movs	r0, r6
   119d6:	000d      	movs	r5, r1
   119d8:	f001 fba0 	bl	1311c <__aeabi_i2d>
   119dc:	4a95      	ldr	r2, [pc, #596]	; (11c34 <_dtoa_r+0x370>)
   119de:	4b96      	ldr	r3, [pc, #600]	; (11c38 <_dtoa_r+0x374>)
   119e0:	f7fe f87c 	bl	fadc <__aeabi_dmul>
   119e4:	0002      	movs	r2, r0
   119e6:	000b      	movs	r3, r1
   119e8:	0020      	movs	r0, r4
   119ea:	0029      	movs	r1, r5
   119ec:	f7fd f932 	bl	ec54 <__aeabi_dadd>
   119f0:	0004      	movs	r4, r0
   119f2:	000d      	movs	r5, r1
   119f4:	f7fe fe28 	bl	10648 <__aeabi_d2iz>
   119f8:	2200      	movs	r2, #0
   119fa:	9003      	str	r0, [sp, #12]
   119fc:	2300      	movs	r3, #0
   119fe:	0020      	movs	r0, r4
   11a00:	0029      	movs	r1, r5
   11a02:	f7fd f8ff 	bl	ec04 <__aeabi_dcmplt>
   11a06:	2800      	cmp	r0, #0
   11a08:	d00e      	beq.n	11a28 <_dtoa_r+0x164>
   11a0a:	9803      	ldr	r0, [sp, #12]
   11a0c:	f001 fb86 	bl	1311c <__aeabi_i2d>
   11a10:	000b      	movs	r3, r1
   11a12:	0002      	movs	r2, r0
   11a14:	0029      	movs	r1, r5
   11a16:	0020      	movs	r0, r4
   11a18:	f7fd f8ee 	bl	ebf8 <__aeabi_dcmpeq>
   11a1c:	0003      	movs	r3, r0
   11a1e:	4258      	negs	r0, r3
   11a20:	4158      	adcs	r0, r3
   11a22:	9b03      	ldr	r3, [sp, #12]
   11a24:	1a1b      	subs	r3, r3, r0
   11a26:	9303      	str	r3, [sp, #12]
   11a28:	2301      	movs	r3, #1
   11a2a:	9316      	str	r3, [sp, #88]	; 0x58
   11a2c:	9b03      	ldr	r3, [sp, #12]
   11a2e:	2b16      	cmp	r3, #22
   11a30:	d80f      	bhi.n	11a52 <_dtoa_r+0x18e>
   11a32:	4982      	ldr	r1, [pc, #520]	; (11c3c <_dtoa_r+0x378>)
   11a34:	00db      	lsls	r3, r3, #3
   11a36:	18c9      	adds	r1, r1, r3
   11a38:	6808      	ldr	r0, [r1, #0]
   11a3a:	6849      	ldr	r1, [r1, #4]
   11a3c:	9a06      	ldr	r2, [sp, #24]
   11a3e:	9b07      	ldr	r3, [sp, #28]
   11a40:	f7fd f8f4 	bl	ec2c <__aeabi_dcmpgt>
   11a44:	2800      	cmp	r0, #0
   11a46:	d04b      	beq.n	11ae0 <_dtoa_r+0x21c>
   11a48:	9b03      	ldr	r3, [sp, #12]
   11a4a:	3b01      	subs	r3, #1
   11a4c:	9303      	str	r3, [sp, #12]
   11a4e:	2300      	movs	r3, #0
   11a50:	9316      	str	r3, [sp, #88]	; 0x58
   11a52:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11a54:	1b9e      	subs	r6, r3, r6
   11a56:	2300      	movs	r3, #0
   11a58:	930b      	str	r3, [sp, #44]	; 0x2c
   11a5a:	0033      	movs	r3, r6
   11a5c:	3b01      	subs	r3, #1
   11a5e:	930c      	str	r3, [sp, #48]	; 0x30
   11a60:	d504      	bpl.n	11a6c <_dtoa_r+0x1a8>
   11a62:	2301      	movs	r3, #1
   11a64:	1b9b      	subs	r3, r3, r6
   11a66:	930b      	str	r3, [sp, #44]	; 0x2c
   11a68:	2300      	movs	r3, #0
   11a6a:	930c      	str	r3, [sp, #48]	; 0x30
   11a6c:	9b03      	ldr	r3, [sp, #12]
   11a6e:	2b00      	cmp	r3, #0
   11a70:	db38      	blt.n	11ae4 <_dtoa_r+0x220>
   11a72:	9a03      	ldr	r2, [sp, #12]
   11a74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11a76:	4694      	mov	ip, r2
   11a78:	4463      	add	r3, ip
   11a7a:	930c      	str	r3, [sp, #48]	; 0x30
   11a7c:	2300      	movs	r3, #0
   11a7e:	920f      	str	r2, [sp, #60]	; 0x3c
   11a80:	9308      	str	r3, [sp, #32]
   11a82:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11a84:	2501      	movs	r5, #1
   11a86:	2b09      	cmp	r3, #9
   11a88:	d900      	bls.n	11a8c <_dtoa_r+0x1c8>
   11a8a:	e091      	b.n	11bb0 <_dtoa_r+0x2ec>
   11a8c:	2b05      	cmp	r3, #5
   11a8e:	dd02      	ble.n	11a96 <_dtoa_r+0x1d2>
   11a90:	2500      	movs	r5, #0
   11a92:	3b04      	subs	r3, #4
   11a94:	9322      	str	r3, [sp, #136]	; 0x88
   11a96:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11a98:	1e98      	subs	r0, r3, #2
   11a9a:	2803      	cmp	r0, #3
   11a9c:	d900      	bls.n	11aa0 <_dtoa_r+0x1dc>
   11a9e:	e091      	b.n	11bc4 <_dtoa_r+0x300>
   11aa0:	f001 fb32 	bl	13108 <__gnu_thumb1_case_uqi>
   11aa4:	76298482 	.word	0x76298482
   11aa8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11aaa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11aac:	189e      	adds	r6, r3, r2
   11aae:	4b64      	ldr	r3, [pc, #400]	; (11c40 <_dtoa_r+0x37c>)
   11ab0:	18f2      	adds	r2, r6, r3
   11ab2:	2a20      	cmp	r2, #32
   11ab4:	dd0f      	ble.n	11ad6 <_dtoa_r+0x212>
   11ab6:	4b63      	ldr	r3, [pc, #396]	; (11c44 <_dtoa_r+0x380>)
   11ab8:	9806      	ldr	r0, [sp, #24]
   11aba:	18f3      	adds	r3, r6, r3
   11abc:	40d8      	lsrs	r0, r3
   11abe:	2340      	movs	r3, #64	; 0x40
   11ac0:	1a9b      	subs	r3, r3, r2
   11ac2:	409c      	lsls	r4, r3
   11ac4:	4320      	orrs	r0, r4
   11ac6:	f7fe fdf3 	bl	106b0 <__aeabi_ui2d>
   11aca:	2301      	movs	r3, #1
   11acc:	4c5e      	ldr	r4, [pc, #376]	; (11c48 <_dtoa_r+0x384>)
   11ace:	3e01      	subs	r6, #1
   11ad0:	1909      	adds	r1, r1, r4
   11ad2:	9318      	str	r3, [sp, #96]	; 0x60
   11ad4:	e771      	b.n	119ba <_dtoa_r+0xf6>
   11ad6:	2320      	movs	r3, #32
   11ad8:	9806      	ldr	r0, [sp, #24]
   11ada:	1a9b      	subs	r3, r3, r2
   11adc:	4098      	lsls	r0, r3
   11ade:	e7f2      	b.n	11ac6 <_dtoa_r+0x202>
   11ae0:	9016      	str	r0, [sp, #88]	; 0x58
   11ae2:	e7b6      	b.n	11a52 <_dtoa_r+0x18e>
   11ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ae6:	9a03      	ldr	r2, [sp, #12]
   11ae8:	1a9b      	subs	r3, r3, r2
   11aea:	930b      	str	r3, [sp, #44]	; 0x2c
   11aec:	4253      	negs	r3, r2
   11aee:	9308      	str	r3, [sp, #32]
   11af0:	2300      	movs	r3, #0
   11af2:	930f      	str	r3, [sp, #60]	; 0x3c
   11af4:	e7c5      	b.n	11a82 <_dtoa_r+0x1be>
   11af6:	2301      	movs	r3, #1
   11af8:	930e      	str	r3, [sp, #56]	; 0x38
   11afa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11afc:	2b00      	cmp	r3, #0
   11afe:	dd65      	ble.n	11bcc <_dtoa_r+0x308>
   11b00:	001f      	movs	r7, r3
   11b02:	930d      	str	r3, [sp, #52]	; 0x34
   11b04:	9a04      	ldr	r2, [sp, #16]
   11b06:	6a54      	ldr	r4, [r2, #36]	; 0x24
   11b08:	2200      	movs	r2, #0
   11b0a:	6062      	str	r2, [r4, #4]
   11b0c:	3204      	adds	r2, #4
   11b0e:	0011      	movs	r1, r2
   11b10:	3114      	adds	r1, #20
   11b12:	4299      	cmp	r1, r3
   11b14:	d95f      	bls.n	11bd6 <_dtoa_r+0x312>
   11b16:	6861      	ldr	r1, [r4, #4]
   11b18:	9804      	ldr	r0, [sp, #16]
   11b1a:	f000 fece 	bl	128ba <_Balloc>
   11b1e:	9b04      	ldr	r3, [sp, #16]
   11b20:	6020      	str	r0, [r4, #0]
   11b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11b24:	681b      	ldr	r3, [r3, #0]
   11b26:	930a      	str	r3, [sp, #40]	; 0x28
   11b28:	2f0e      	cmp	r7, #14
   11b2a:	d900      	bls.n	11b2e <_dtoa_r+0x26a>
   11b2c:	e105      	b.n	11d3a <_dtoa_r+0x476>
   11b2e:	2d00      	cmp	r5, #0
   11b30:	d100      	bne.n	11b34 <_dtoa_r+0x270>
   11b32:	e102      	b.n	11d3a <_dtoa_r+0x476>
   11b34:	9b06      	ldr	r3, [sp, #24]
   11b36:	9c07      	ldr	r4, [sp, #28]
   11b38:	9314      	str	r3, [sp, #80]	; 0x50
   11b3a:	9415      	str	r4, [sp, #84]	; 0x54
   11b3c:	9b03      	ldr	r3, [sp, #12]
   11b3e:	2b00      	cmp	r3, #0
   11b40:	dc00      	bgt.n	11b44 <_dtoa_r+0x280>
   11b42:	e085      	b.n	11c50 <_dtoa_r+0x38c>
   11b44:	001a      	movs	r2, r3
   11b46:	210f      	movs	r1, #15
   11b48:	4b3c      	ldr	r3, [pc, #240]	; (11c3c <_dtoa_r+0x378>)
   11b4a:	400a      	ands	r2, r1
   11b4c:	00d2      	lsls	r2, r2, #3
   11b4e:	189b      	adds	r3, r3, r2
   11b50:	685c      	ldr	r4, [r3, #4]
   11b52:	681b      	ldr	r3, [r3, #0]
   11b54:	9310      	str	r3, [sp, #64]	; 0x40
   11b56:	9411      	str	r4, [sp, #68]	; 0x44
   11b58:	9b03      	ldr	r3, [sp, #12]
   11b5a:	2402      	movs	r4, #2
   11b5c:	111d      	asrs	r5, r3, #4
   11b5e:	06eb      	lsls	r3, r5, #27
   11b60:	d50a      	bpl.n	11b78 <_dtoa_r+0x2b4>
   11b62:	4b3a      	ldr	r3, [pc, #232]	; (11c4c <_dtoa_r+0x388>)
   11b64:	400d      	ands	r5, r1
   11b66:	6a1a      	ldr	r2, [r3, #32]
   11b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11b6a:	9814      	ldr	r0, [sp, #80]	; 0x50
   11b6c:	9915      	ldr	r1, [sp, #84]	; 0x54
   11b6e:	f7fd fb81 	bl	f274 <__aeabi_ddiv>
   11b72:	9006      	str	r0, [sp, #24]
   11b74:	9107      	str	r1, [sp, #28]
   11b76:	3401      	adds	r4, #1
   11b78:	4e34      	ldr	r6, [pc, #208]	; (11c4c <_dtoa_r+0x388>)
   11b7a:	2d00      	cmp	r5, #0
   11b7c:	d130      	bne.n	11be0 <_dtoa_r+0x31c>
   11b7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11b80:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11b82:	9806      	ldr	r0, [sp, #24]
   11b84:	9907      	ldr	r1, [sp, #28]
   11b86:	f7fd fb75 	bl	f274 <__aeabi_ddiv>
   11b8a:	9006      	str	r0, [sp, #24]
   11b8c:	9107      	str	r1, [sp, #28]
   11b8e:	e07a      	b.n	11c86 <_dtoa_r+0x3c2>
   11b90:	2301      	movs	r3, #1
   11b92:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11b94:	930e      	str	r3, [sp, #56]	; 0x38
   11b96:	4694      	mov	ip, r2
   11b98:	9b03      	ldr	r3, [sp, #12]
   11b9a:	4463      	add	r3, ip
   11b9c:	1c5f      	adds	r7, r3, #1
   11b9e:	930d      	str	r3, [sp, #52]	; 0x34
   11ba0:	1e3b      	subs	r3, r7, #0
   11ba2:	dcaf      	bgt.n	11b04 <_dtoa_r+0x240>
   11ba4:	2301      	movs	r3, #1
   11ba6:	e7ad      	b.n	11b04 <_dtoa_r+0x240>
   11ba8:	2300      	movs	r3, #0
   11baa:	e7a5      	b.n	11af8 <_dtoa_r+0x234>
   11bac:	2300      	movs	r3, #0
   11bae:	e7f0      	b.n	11b92 <_dtoa_r+0x2ce>
   11bb0:	2300      	movs	r3, #0
   11bb2:	950e      	str	r5, [sp, #56]	; 0x38
   11bb4:	9322      	str	r3, [sp, #136]	; 0x88
   11bb6:	3b01      	subs	r3, #1
   11bb8:	2200      	movs	r2, #0
   11bba:	930d      	str	r3, [sp, #52]	; 0x34
   11bbc:	001f      	movs	r7, r3
   11bbe:	3313      	adds	r3, #19
   11bc0:	9223      	str	r2, [sp, #140]	; 0x8c
   11bc2:	e79f      	b.n	11b04 <_dtoa_r+0x240>
   11bc4:	2301      	movs	r3, #1
   11bc6:	930e      	str	r3, [sp, #56]	; 0x38
   11bc8:	3b02      	subs	r3, #2
   11bca:	e7f5      	b.n	11bb8 <_dtoa_r+0x2f4>
   11bcc:	2301      	movs	r3, #1
   11bce:	930d      	str	r3, [sp, #52]	; 0x34
   11bd0:	001f      	movs	r7, r3
   11bd2:	001a      	movs	r2, r3
   11bd4:	e7f4      	b.n	11bc0 <_dtoa_r+0x2fc>
   11bd6:	6861      	ldr	r1, [r4, #4]
   11bd8:	0052      	lsls	r2, r2, #1
   11bda:	3101      	adds	r1, #1
   11bdc:	6061      	str	r1, [r4, #4]
   11bde:	e796      	b.n	11b0e <_dtoa_r+0x24a>
   11be0:	2301      	movs	r3, #1
   11be2:	421d      	tst	r5, r3
   11be4:	d008      	beq.n	11bf8 <_dtoa_r+0x334>
   11be6:	9810      	ldr	r0, [sp, #64]	; 0x40
   11be8:	9911      	ldr	r1, [sp, #68]	; 0x44
   11bea:	18e4      	adds	r4, r4, r3
   11bec:	6832      	ldr	r2, [r6, #0]
   11bee:	6873      	ldr	r3, [r6, #4]
   11bf0:	f7fd ff74 	bl	fadc <__aeabi_dmul>
   11bf4:	9010      	str	r0, [sp, #64]	; 0x40
   11bf6:	9111      	str	r1, [sp, #68]	; 0x44
   11bf8:	106d      	asrs	r5, r5, #1
   11bfa:	3608      	adds	r6, #8
   11bfc:	e7bd      	b.n	11b7a <_dtoa_r+0x2b6>
   11bfe:	46c0      	nop			; (mov r8, r8)
   11c00:	7ff00000 	.word	0x7ff00000
   11c04:	0000270f 	.word	0x0000270f
   11c08:	00014331 	.word	0x00014331
   11c0c:	00014334 	.word	0x00014334
   11c10:	00014203 	.word	0x00014203
   11c14:	00014204 	.word	0x00014204
   11c18:	3ff00000 	.word	0x3ff00000
   11c1c:	fffffc01 	.word	0xfffffc01
   11c20:	3ff80000 	.word	0x3ff80000
   11c24:	636f4361 	.word	0x636f4361
   11c28:	3fd287a7 	.word	0x3fd287a7
   11c2c:	8b60c8b3 	.word	0x8b60c8b3
   11c30:	3fc68a28 	.word	0x3fc68a28
   11c34:	509f79fb 	.word	0x509f79fb
   11c38:	3fd34413 	.word	0x3fd34413
   11c3c:	000143c0 	.word	0x000143c0
   11c40:	00000432 	.word	0x00000432
   11c44:	00000412 	.word	0x00000412
   11c48:	fe100000 	.word	0xfe100000
   11c4c:	00014398 	.word	0x00014398
   11c50:	9b03      	ldr	r3, [sp, #12]
   11c52:	2402      	movs	r4, #2
   11c54:	2b00      	cmp	r3, #0
   11c56:	d016      	beq.n	11c86 <_dtoa_r+0x3c2>
   11c58:	9814      	ldr	r0, [sp, #80]	; 0x50
   11c5a:	9915      	ldr	r1, [sp, #84]	; 0x54
   11c5c:	425d      	negs	r5, r3
   11c5e:	230f      	movs	r3, #15
   11c60:	4aca      	ldr	r2, [pc, #808]	; (11f8c <_dtoa_r+0x6c8>)
   11c62:	402b      	ands	r3, r5
   11c64:	00db      	lsls	r3, r3, #3
   11c66:	18d3      	adds	r3, r2, r3
   11c68:	681a      	ldr	r2, [r3, #0]
   11c6a:	685b      	ldr	r3, [r3, #4]
   11c6c:	f7fd ff36 	bl	fadc <__aeabi_dmul>
   11c70:	2300      	movs	r3, #0
   11c72:	9006      	str	r0, [sp, #24]
   11c74:	9107      	str	r1, [sp, #28]
   11c76:	4ec6      	ldr	r6, [pc, #792]	; (11f90 <_dtoa_r+0x6cc>)
   11c78:	112d      	asrs	r5, r5, #4
   11c7a:	2d00      	cmp	r5, #0
   11c7c:	d000      	beq.n	11c80 <_dtoa_r+0x3bc>
   11c7e:	e08c      	b.n	11d9a <_dtoa_r+0x4d6>
   11c80:	2b00      	cmp	r3, #0
   11c82:	d000      	beq.n	11c86 <_dtoa_r+0x3c2>
   11c84:	e781      	b.n	11b8a <_dtoa_r+0x2c6>
   11c86:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11c88:	2b00      	cmp	r3, #0
   11c8a:	d100      	bne.n	11c8e <_dtoa_r+0x3ca>
   11c8c:	e091      	b.n	11db2 <_dtoa_r+0x4ee>
   11c8e:	9a06      	ldr	r2, [sp, #24]
   11c90:	9b07      	ldr	r3, [sp, #28]
   11c92:	9210      	str	r2, [sp, #64]	; 0x40
   11c94:	9311      	str	r3, [sp, #68]	; 0x44
   11c96:	9810      	ldr	r0, [sp, #64]	; 0x40
   11c98:	9911      	ldr	r1, [sp, #68]	; 0x44
   11c9a:	2200      	movs	r2, #0
   11c9c:	4bbd      	ldr	r3, [pc, #756]	; (11f94 <_dtoa_r+0x6d0>)
   11c9e:	f7fc ffb1 	bl	ec04 <__aeabi_dcmplt>
   11ca2:	2800      	cmp	r0, #0
   11ca4:	d100      	bne.n	11ca8 <_dtoa_r+0x3e4>
   11ca6:	e084      	b.n	11db2 <_dtoa_r+0x4ee>
   11ca8:	2f00      	cmp	r7, #0
   11caa:	d100      	bne.n	11cae <_dtoa_r+0x3ea>
   11cac:	e081      	b.n	11db2 <_dtoa_r+0x4ee>
   11cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11cb0:	2b00      	cmp	r3, #0
   11cb2:	dd3e      	ble.n	11d32 <_dtoa_r+0x46e>
   11cb4:	9810      	ldr	r0, [sp, #64]	; 0x40
   11cb6:	9911      	ldr	r1, [sp, #68]	; 0x44
   11cb8:	9b03      	ldr	r3, [sp, #12]
   11cba:	2200      	movs	r2, #0
   11cbc:	1e5e      	subs	r6, r3, #1
   11cbe:	4bb6      	ldr	r3, [pc, #728]	; (11f98 <_dtoa_r+0x6d4>)
   11cc0:	f7fd ff0c 	bl	fadc <__aeabi_dmul>
   11cc4:	9006      	str	r0, [sp, #24]
   11cc6:	9107      	str	r1, [sp, #28]
   11cc8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   11cca:	3401      	adds	r4, #1
   11ccc:	0020      	movs	r0, r4
   11cce:	f001 fa25 	bl	1311c <__aeabi_i2d>
   11cd2:	9a06      	ldr	r2, [sp, #24]
   11cd4:	9b07      	ldr	r3, [sp, #28]
   11cd6:	f7fd ff01 	bl	fadc <__aeabi_dmul>
   11cda:	2200      	movs	r2, #0
   11cdc:	4baf      	ldr	r3, [pc, #700]	; (11f9c <_dtoa_r+0x6d8>)
   11cde:	f7fc ffb9 	bl	ec54 <__aeabi_dadd>
   11ce2:	9012      	str	r0, [sp, #72]	; 0x48
   11ce4:	9113      	str	r1, [sp, #76]	; 0x4c
   11ce6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11ce8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11cea:	4aad      	ldr	r2, [pc, #692]	; (11fa0 <_dtoa_r+0x6dc>)
   11cec:	9310      	str	r3, [sp, #64]	; 0x40
   11cee:	9411      	str	r4, [sp, #68]	; 0x44
   11cf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11cf2:	189c      	adds	r4, r3, r2
   11cf4:	9411      	str	r4, [sp, #68]	; 0x44
   11cf6:	2d00      	cmp	r5, #0
   11cf8:	d15e      	bne.n	11db8 <_dtoa_r+0x4f4>
   11cfa:	9806      	ldr	r0, [sp, #24]
   11cfc:	9907      	ldr	r1, [sp, #28]
   11cfe:	2200      	movs	r2, #0
   11d00:	4ba8      	ldr	r3, [pc, #672]	; (11fa4 <_dtoa_r+0x6e0>)
   11d02:	f7fe f96b 	bl	ffdc <__aeabi_dsub>
   11d06:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11d08:	0023      	movs	r3, r4
   11d0a:	9006      	str	r0, [sp, #24]
   11d0c:	9107      	str	r1, [sp, #28]
   11d0e:	f7fc ff8d 	bl	ec2c <__aeabi_dcmpgt>
   11d12:	2800      	cmp	r0, #0
   11d14:	d000      	beq.n	11d18 <_dtoa_r+0x454>
   11d16:	e301      	b.n	1231c <_dtoa_r+0xa58>
   11d18:	48a3      	ldr	r0, [pc, #652]	; (11fa8 <_dtoa_r+0x6e4>)
   11d1a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11d1c:	4684      	mov	ip, r0
   11d1e:	4461      	add	r1, ip
   11d20:	000b      	movs	r3, r1
   11d22:	9806      	ldr	r0, [sp, #24]
   11d24:	9907      	ldr	r1, [sp, #28]
   11d26:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11d28:	f7fc ff6c 	bl	ec04 <__aeabi_dcmplt>
   11d2c:	2800      	cmp	r0, #0
   11d2e:	d000      	beq.n	11d32 <_dtoa_r+0x46e>
   11d30:	e2e8      	b.n	12304 <_dtoa_r+0xa40>
   11d32:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11d34:	9c15      	ldr	r4, [sp, #84]	; 0x54
   11d36:	9306      	str	r3, [sp, #24]
   11d38:	9407      	str	r4, [sp, #28]
   11d3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11d3c:	2b00      	cmp	r3, #0
   11d3e:	da00      	bge.n	11d42 <_dtoa_r+0x47e>
   11d40:	e157      	b.n	11ff2 <_dtoa_r+0x72e>
   11d42:	9a03      	ldr	r2, [sp, #12]
   11d44:	2a0e      	cmp	r2, #14
   11d46:	dd00      	ble.n	11d4a <_dtoa_r+0x486>
   11d48:	e153      	b.n	11ff2 <_dtoa_r+0x72e>
   11d4a:	4b90      	ldr	r3, [pc, #576]	; (11f8c <_dtoa_r+0x6c8>)
   11d4c:	00d2      	lsls	r2, r2, #3
   11d4e:	189b      	adds	r3, r3, r2
   11d50:	685c      	ldr	r4, [r3, #4]
   11d52:	681b      	ldr	r3, [r3, #0]
   11d54:	9308      	str	r3, [sp, #32]
   11d56:	9409      	str	r4, [sp, #36]	; 0x24
   11d58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11d5a:	2b00      	cmp	r3, #0
   11d5c:	db00      	blt.n	11d60 <_dtoa_r+0x49c>
   11d5e:	e0ce      	b.n	11efe <_dtoa_r+0x63a>
   11d60:	2f00      	cmp	r7, #0
   11d62:	dd00      	ble.n	11d66 <_dtoa_r+0x4a2>
   11d64:	e0cb      	b.n	11efe <_dtoa_r+0x63a>
   11d66:	d000      	beq.n	11d6a <_dtoa_r+0x4a6>
   11d68:	e2cf      	b.n	1230a <_dtoa_r+0xa46>
   11d6a:	9808      	ldr	r0, [sp, #32]
   11d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
   11d6e:	2200      	movs	r2, #0
   11d70:	4b8c      	ldr	r3, [pc, #560]	; (11fa4 <_dtoa_r+0x6e0>)
   11d72:	f7fd feb3 	bl	fadc <__aeabi_dmul>
   11d76:	9a06      	ldr	r2, [sp, #24]
   11d78:	9b07      	ldr	r3, [sp, #28]
   11d7a:	f7fc ff61 	bl	ec40 <__aeabi_dcmpge>
   11d7e:	003e      	movs	r6, r7
   11d80:	9708      	str	r7, [sp, #32]
   11d82:	2800      	cmp	r0, #0
   11d84:	d000      	beq.n	11d88 <_dtoa_r+0x4c4>
   11d86:	e2a4      	b.n	122d2 <_dtoa_r+0xa0e>
   11d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11d8c:	1c5d      	adds	r5, r3, #1
   11d8e:	2331      	movs	r3, #49	; 0x31
   11d90:	7013      	strb	r3, [r2, #0]
   11d92:	9b03      	ldr	r3, [sp, #12]
   11d94:	3301      	adds	r3, #1
   11d96:	9303      	str	r3, [sp, #12]
   11d98:	e29f      	b.n	122da <_dtoa_r+0xa16>
   11d9a:	2201      	movs	r2, #1
   11d9c:	4215      	tst	r5, r2
   11d9e:	d005      	beq.n	11dac <_dtoa_r+0x4e8>
   11da0:	18a4      	adds	r4, r4, r2
   11da2:	6832      	ldr	r2, [r6, #0]
   11da4:	6873      	ldr	r3, [r6, #4]
   11da6:	f7fd fe99 	bl	fadc <__aeabi_dmul>
   11daa:	2301      	movs	r3, #1
   11dac:	106d      	asrs	r5, r5, #1
   11dae:	3608      	adds	r6, #8
   11db0:	e763      	b.n	11c7a <_dtoa_r+0x3b6>
   11db2:	9e03      	ldr	r6, [sp, #12]
   11db4:	003d      	movs	r5, r7
   11db6:	e789      	b.n	11ccc <_dtoa_r+0x408>
   11db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11dba:	1e69      	subs	r1, r5, #1
   11dbc:	1952      	adds	r2, r2, r5
   11dbe:	9217      	str	r2, [sp, #92]	; 0x5c
   11dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11dc2:	4b72      	ldr	r3, [pc, #456]	; (11f8c <_dtoa_r+0x6c8>)
   11dc4:	00c9      	lsls	r1, r1, #3
   11dc6:	2a00      	cmp	r2, #0
   11dc8:	d04a      	beq.n	11e60 <_dtoa_r+0x59c>
   11dca:	185b      	adds	r3, r3, r1
   11dcc:	681a      	ldr	r2, [r3, #0]
   11dce:	685b      	ldr	r3, [r3, #4]
   11dd0:	2000      	movs	r0, #0
   11dd2:	4976      	ldr	r1, [pc, #472]	; (11fac <_dtoa_r+0x6e8>)
   11dd4:	f7fd fa4e 	bl	f274 <__aeabi_ddiv>
   11dd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11dda:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11ddc:	f7fe f8fe 	bl	ffdc <__aeabi_dsub>
   11de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11de2:	9010      	str	r0, [sp, #64]	; 0x40
   11de4:	9111      	str	r1, [sp, #68]	; 0x44
   11de6:	9312      	str	r3, [sp, #72]	; 0x48
   11de8:	9806      	ldr	r0, [sp, #24]
   11dea:	9907      	ldr	r1, [sp, #28]
   11dec:	f7fe fc2c 	bl	10648 <__aeabi_d2iz>
   11df0:	0004      	movs	r4, r0
   11df2:	f001 f993 	bl	1311c <__aeabi_i2d>
   11df6:	0002      	movs	r2, r0
   11df8:	000b      	movs	r3, r1
   11dfa:	9806      	ldr	r0, [sp, #24]
   11dfc:	9907      	ldr	r1, [sp, #28]
   11dfe:	f7fe f8ed 	bl	ffdc <__aeabi_dsub>
   11e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e04:	3430      	adds	r4, #48	; 0x30
   11e06:	1c5d      	adds	r5, r3, #1
   11e08:	701c      	strb	r4, [r3, #0]
   11e0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11e0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11e0e:	9006      	str	r0, [sp, #24]
   11e10:	9107      	str	r1, [sp, #28]
   11e12:	f7fc fef7 	bl	ec04 <__aeabi_dcmplt>
   11e16:	2800      	cmp	r0, #0
   11e18:	d165      	bne.n	11ee6 <_dtoa_r+0x622>
   11e1a:	9a06      	ldr	r2, [sp, #24]
   11e1c:	9b07      	ldr	r3, [sp, #28]
   11e1e:	2000      	movs	r0, #0
   11e20:	495c      	ldr	r1, [pc, #368]	; (11f94 <_dtoa_r+0x6d0>)
   11e22:	f7fe f8db 	bl	ffdc <__aeabi_dsub>
   11e26:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11e2a:	f7fc feeb 	bl	ec04 <__aeabi_dcmplt>
   11e2e:	2800      	cmp	r0, #0
   11e30:	d000      	beq.n	11e34 <_dtoa_r+0x570>
   11e32:	e0be      	b.n	11fb2 <_dtoa_r+0x6ee>
   11e34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11e36:	429d      	cmp	r5, r3
   11e38:	d100      	bne.n	11e3c <_dtoa_r+0x578>
   11e3a:	e77a      	b.n	11d32 <_dtoa_r+0x46e>
   11e3c:	9810      	ldr	r0, [sp, #64]	; 0x40
   11e3e:	9911      	ldr	r1, [sp, #68]	; 0x44
   11e40:	2200      	movs	r2, #0
   11e42:	4b55      	ldr	r3, [pc, #340]	; (11f98 <_dtoa_r+0x6d4>)
   11e44:	f7fd fe4a 	bl	fadc <__aeabi_dmul>
   11e48:	2200      	movs	r2, #0
   11e4a:	9010      	str	r0, [sp, #64]	; 0x40
   11e4c:	9111      	str	r1, [sp, #68]	; 0x44
   11e4e:	9806      	ldr	r0, [sp, #24]
   11e50:	9907      	ldr	r1, [sp, #28]
   11e52:	4b51      	ldr	r3, [pc, #324]	; (11f98 <_dtoa_r+0x6d4>)
   11e54:	f7fd fe42 	bl	fadc <__aeabi_dmul>
   11e58:	9512      	str	r5, [sp, #72]	; 0x48
   11e5a:	9006      	str	r0, [sp, #24]
   11e5c:	9107      	str	r1, [sp, #28]
   11e5e:	e7c3      	b.n	11de8 <_dtoa_r+0x524>
   11e60:	1859      	adds	r1, r3, r1
   11e62:	6808      	ldr	r0, [r1, #0]
   11e64:	6849      	ldr	r1, [r1, #4]
   11e66:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11e6a:	f7fd fe37 	bl	fadc <__aeabi_dmul>
   11e6e:	9010      	str	r0, [sp, #64]	; 0x40
   11e70:	9111      	str	r1, [sp, #68]	; 0x44
   11e72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11e74:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   11e76:	9806      	ldr	r0, [sp, #24]
   11e78:	9907      	ldr	r1, [sp, #28]
   11e7a:	f7fe fbe5 	bl	10648 <__aeabi_d2iz>
   11e7e:	9012      	str	r0, [sp, #72]	; 0x48
   11e80:	f001 f94c 	bl	1311c <__aeabi_i2d>
   11e84:	0002      	movs	r2, r0
   11e86:	000b      	movs	r3, r1
   11e88:	9806      	ldr	r0, [sp, #24]
   11e8a:	9907      	ldr	r1, [sp, #28]
   11e8c:	f7fe f8a6 	bl	ffdc <__aeabi_dsub>
   11e90:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e92:	9006      	str	r0, [sp, #24]
   11e94:	9107      	str	r1, [sp, #28]
   11e96:	3330      	adds	r3, #48	; 0x30
   11e98:	7023      	strb	r3, [r4, #0]
   11e9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11e9c:	3401      	adds	r4, #1
   11e9e:	2200      	movs	r2, #0
   11ea0:	42a3      	cmp	r3, r4
   11ea2:	d124      	bne.n	11eee <_dtoa_r+0x62a>
   11ea4:	4b41      	ldr	r3, [pc, #260]	; (11fac <_dtoa_r+0x6e8>)
   11ea6:	9810      	ldr	r0, [sp, #64]	; 0x40
   11ea8:	9911      	ldr	r1, [sp, #68]	; 0x44
   11eaa:	f7fc fed3 	bl	ec54 <__aeabi_dadd>
   11eae:	0002      	movs	r2, r0
   11eb0:	000b      	movs	r3, r1
   11eb2:	9806      	ldr	r0, [sp, #24]
   11eb4:	9907      	ldr	r1, [sp, #28]
   11eb6:	f7fc feb9 	bl	ec2c <__aeabi_dcmpgt>
   11eba:	2800      	cmp	r0, #0
   11ebc:	d000      	beq.n	11ec0 <_dtoa_r+0x5fc>
   11ebe:	e078      	b.n	11fb2 <_dtoa_r+0x6ee>
   11ec0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11ec4:	2000      	movs	r0, #0
   11ec6:	4939      	ldr	r1, [pc, #228]	; (11fac <_dtoa_r+0x6e8>)
   11ec8:	f7fe f888 	bl	ffdc <__aeabi_dsub>
   11ecc:	0002      	movs	r2, r0
   11ece:	000b      	movs	r3, r1
   11ed0:	9806      	ldr	r0, [sp, #24]
   11ed2:	9907      	ldr	r1, [sp, #28]
   11ed4:	f7fc fe96 	bl	ec04 <__aeabi_dcmplt>
   11ed8:	2800      	cmp	r0, #0
   11eda:	d100      	bne.n	11ede <_dtoa_r+0x61a>
   11edc:	e729      	b.n	11d32 <_dtoa_r+0x46e>
   11ede:	1e6b      	subs	r3, r5, #1
   11ee0:	781a      	ldrb	r2, [r3, #0]
   11ee2:	2a30      	cmp	r2, #48	; 0x30
   11ee4:	d001      	beq.n	11eea <_dtoa_r+0x626>
   11ee6:	9603      	str	r6, [sp, #12]
   11ee8:	e03f      	b.n	11f6a <_dtoa_r+0x6a6>
   11eea:	001d      	movs	r5, r3
   11eec:	e7f7      	b.n	11ede <_dtoa_r+0x61a>
   11eee:	9806      	ldr	r0, [sp, #24]
   11ef0:	9907      	ldr	r1, [sp, #28]
   11ef2:	4b29      	ldr	r3, [pc, #164]	; (11f98 <_dtoa_r+0x6d4>)
   11ef4:	f7fd fdf2 	bl	fadc <__aeabi_dmul>
   11ef8:	9006      	str	r0, [sp, #24]
   11efa:	9107      	str	r1, [sp, #28]
   11efc:	e7bb      	b.n	11e76 <_dtoa_r+0x5b2>
   11efe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   11f00:	9a08      	ldr	r2, [sp, #32]
   11f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f04:	9806      	ldr	r0, [sp, #24]
   11f06:	9907      	ldr	r1, [sp, #28]
   11f08:	f7fd f9b4 	bl	f274 <__aeabi_ddiv>
   11f0c:	f7fe fb9c 	bl	10648 <__aeabi_d2iz>
   11f10:	0004      	movs	r4, r0
   11f12:	f001 f903 	bl	1311c <__aeabi_i2d>
   11f16:	9a08      	ldr	r2, [sp, #32]
   11f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f1a:	f7fd fddf 	bl	fadc <__aeabi_dmul>
   11f1e:	000b      	movs	r3, r1
   11f20:	0002      	movs	r2, r0
   11f22:	9806      	ldr	r0, [sp, #24]
   11f24:	9907      	ldr	r1, [sp, #28]
   11f26:	f7fe f859 	bl	ffdc <__aeabi_dsub>
   11f2a:	0023      	movs	r3, r4
   11f2c:	3330      	adds	r3, #48	; 0x30
   11f2e:	7033      	strb	r3, [r6, #0]
   11f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11f32:	1c75      	adds	r5, r6, #1
   11f34:	1aeb      	subs	r3, r5, r3
   11f36:	429f      	cmp	r7, r3
   11f38:	d14c      	bne.n	11fd4 <_dtoa_r+0x710>
   11f3a:	0002      	movs	r2, r0
   11f3c:	000b      	movs	r3, r1
   11f3e:	f7fc fe89 	bl	ec54 <__aeabi_dadd>
   11f42:	0006      	movs	r6, r0
   11f44:	000f      	movs	r7, r1
   11f46:	0002      	movs	r2, r0
   11f48:	000b      	movs	r3, r1
   11f4a:	9808      	ldr	r0, [sp, #32]
   11f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
   11f4e:	f7fc fe59 	bl	ec04 <__aeabi_dcmplt>
   11f52:	2800      	cmp	r0, #0
   11f54:	d12c      	bne.n	11fb0 <_dtoa_r+0x6ec>
   11f56:	9808      	ldr	r0, [sp, #32]
   11f58:	9909      	ldr	r1, [sp, #36]	; 0x24
   11f5a:	0032      	movs	r2, r6
   11f5c:	003b      	movs	r3, r7
   11f5e:	f7fc fe4b 	bl	ebf8 <__aeabi_dcmpeq>
   11f62:	2800      	cmp	r0, #0
   11f64:	d001      	beq.n	11f6a <_dtoa_r+0x6a6>
   11f66:	07e3      	lsls	r3, r4, #31
   11f68:	d422      	bmi.n	11fb0 <_dtoa_r+0x6ec>
   11f6a:	9905      	ldr	r1, [sp, #20]
   11f6c:	9804      	ldr	r0, [sp, #16]
   11f6e:	f000 fcdc 	bl	1292a <_Bfree>
   11f72:	2300      	movs	r3, #0
   11f74:	702b      	strb	r3, [r5, #0]
   11f76:	9b03      	ldr	r3, [sp, #12]
   11f78:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11f7a:	3301      	adds	r3, #1
   11f7c:	6013      	str	r3, [r2, #0]
   11f7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11f80:	2b00      	cmp	r3, #0
   11f82:	d100      	bne.n	11f86 <_dtoa_r+0x6c2>
   11f84:	e275      	b.n	12472 <_dtoa_r+0xbae>
   11f86:	601d      	str	r5, [r3, #0]
   11f88:	e273      	b.n	12472 <_dtoa_r+0xbae>
   11f8a:	46c0      	nop			; (mov r8, r8)
   11f8c:	000143c0 	.word	0x000143c0
   11f90:	00014398 	.word	0x00014398
   11f94:	3ff00000 	.word	0x3ff00000
   11f98:	40240000 	.word	0x40240000
   11f9c:	401c0000 	.word	0x401c0000
   11fa0:	fcc00000 	.word	0xfcc00000
   11fa4:	40140000 	.word	0x40140000
   11fa8:	7cc00000 	.word	0x7cc00000
   11fac:	3fe00000 	.word	0x3fe00000
   11fb0:	9e03      	ldr	r6, [sp, #12]
   11fb2:	1e6b      	subs	r3, r5, #1
   11fb4:	781a      	ldrb	r2, [r3, #0]
   11fb6:	2a39      	cmp	r2, #57	; 0x39
   11fb8:	d106      	bne.n	11fc8 <_dtoa_r+0x704>
   11fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11fbc:	429a      	cmp	r2, r3
   11fbe:	d107      	bne.n	11fd0 <_dtoa_r+0x70c>
   11fc0:	2330      	movs	r3, #48	; 0x30
   11fc2:	7013      	strb	r3, [r2, #0]
   11fc4:	0013      	movs	r3, r2
   11fc6:	3601      	adds	r6, #1
   11fc8:	781a      	ldrb	r2, [r3, #0]
   11fca:	3201      	adds	r2, #1
   11fcc:	701a      	strb	r2, [r3, #0]
   11fce:	e78a      	b.n	11ee6 <_dtoa_r+0x622>
   11fd0:	001d      	movs	r5, r3
   11fd2:	e7ee      	b.n	11fb2 <_dtoa_r+0x6ee>
   11fd4:	2200      	movs	r2, #0
   11fd6:	4bcf      	ldr	r3, [pc, #828]	; (12314 <_dtoa_r+0xa50>)
   11fd8:	f7fd fd80 	bl	fadc <__aeabi_dmul>
   11fdc:	2200      	movs	r2, #0
   11fde:	2300      	movs	r3, #0
   11fe0:	9006      	str	r0, [sp, #24]
   11fe2:	9107      	str	r1, [sp, #28]
   11fe4:	002e      	movs	r6, r5
   11fe6:	f7fc fe07 	bl	ebf8 <__aeabi_dcmpeq>
   11fea:	2800      	cmp	r0, #0
   11fec:	d100      	bne.n	11ff0 <_dtoa_r+0x72c>
   11fee:	e787      	b.n	11f00 <_dtoa_r+0x63c>
   11ff0:	e7bb      	b.n	11f6a <_dtoa_r+0x6a6>
   11ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11ff4:	2a00      	cmp	r2, #0
   11ff6:	d100      	bne.n	11ffa <_dtoa_r+0x736>
   11ff8:	e087      	b.n	1210a <_dtoa_r+0x846>
   11ffa:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11ffc:	2a01      	cmp	r2, #1
   11ffe:	dc6e      	bgt.n	120de <_dtoa_r+0x81a>
   12000:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12002:	2a00      	cmp	r2, #0
   12004:	d067      	beq.n	120d6 <_dtoa_r+0x812>
   12006:	4ac4      	ldr	r2, [pc, #784]	; (12318 <_dtoa_r+0xa54>)
   12008:	189b      	adds	r3, r3, r2
   1200a:	9d08      	ldr	r5, [sp, #32]
   1200c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1200e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12010:	2101      	movs	r1, #1
   12012:	18d2      	adds	r2, r2, r3
   12014:	920b      	str	r2, [sp, #44]	; 0x2c
   12016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12018:	9804      	ldr	r0, [sp, #16]
   1201a:	18d3      	adds	r3, r2, r3
   1201c:	930c      	str	r3, [sp, #48]	; 0x30
   1201e:	f000 fd22 	bl	12a66 <__i2b>
   12022:	0006      	movs	r6, r0
   12024:	2c00      	cmp	r4, #0
   12026:	dd0e      	ble.n	12046 <_dtoa_r+0x782>
   12028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1202a:	2b00      	cmp	r3, #0
   1202c:	dd0b      	ble.n	12046 <_dtoa_r+0x782>
   1202e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12030:	0023      	movs	r3, r4
   12032:	4294      	cmp	r4, r2
   12034:	dd00      	ble.n	12038 <_dtoa_r+0x774>
   12036:	0013      	movs	r3, r2
   12038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1203a:	1ae4      	subs	r4, r4, r3
   1203c:	1ad2      	subs	r2, r2, r3
   1203e:	920b      	str	r2, [sp, #44]	; 0x2c
   12040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12042:	1ad3      	subs	r3, r2, r3
   12044:	930c      	str	r3, [sp, #48]	; 0x30
   12046:	9b08      	ldr	r3, [sp, #32]
   12048:	2b00      	cmp	r3, #0
   1204a:	d01e      	beq.n	1208a <_dtoa_r+0x7c6>
   1204c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1204e:	2b00      	cmp	r3, #0
   12050:	d05f      	beq.n	12112 <_dtoa_r+0x84e>
   12052:	2d00      	cmp	r5, #0
   12054:	dd11      	ble.n	1207a <_dtoa_r+0x7b6>
   12056:	0031      	movs	r1, r6
   12058:	002a      	movs	r2, r5
   1205a:	9804      	ldr	r0, [sp, #16]
   1205c:	f000 fd9c 	bl	12b98 <__pow5mult>
   12060:	9a05      	ldr	r2, [sp, #20]
   12062:	0001      	movs	r1, r0
   12064:	0006      	movs	r6, r0
   12066:	9804      	ldr	r0, [sp, #16]
   12068:	f000 fd06 	bl	12a78 <__multiply>
   1206c:	9905      	ldr	r1, [sp, #20]
   1206e:	9010      	str	r0, [sp, #64]	; 0x40
   12070:	9804      	ldr	r0, [sp, #16]
   12072:	f000 fc5a 	bl	1292a <_Bfree>
   12076:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12078:	9305      	str	r3, [sp, #20]
   1207a:	9b08      	ldr	r3, [sp, #32]
   1207c:	1b5a      	subs	r2, r3, r5
   1207e:	d004      	beq.n	1208a <_dtoa_r+0x7c6>
   12080:	9905      	ldr	r1, [sp, #20]
   12082:	9804      	ldr	r0, [sp, #16]
   12084:	f000 fd88 	bl	12b98 <__pow5mult>
   12088:	9005      	str	r0, [sp, #20]
   1208a:	2101      	movs	r1, #1
   1208c:	9804      	ldr	r0, [sp, #16]
   1208e:	f000 fcea 	bl	12a66 <__i2b>
   12092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12094:	9008      	str	r0, [sp, #32]
   12096:	2b00      	cmp	r3, #0
   12098:	dd3d      	ble.n	12116 <_dtoa_r+0x852>
   1209a:	001a      	movs	r2, r3
   1209c:	0001      	movs	r1, r0
   1209e:	9804      	ldr	r0, [sp, #16]
   120a0:	f000 fd7a 	bl	12b98 <__pow5mult>
   120a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   120a6:	9008      	str	r0, [sp, #32]
   120a8:	2500      	movs	r5, #0
   120aa:	2b01      	cmp	r3, #1
   120ac:	dc3b      	bgt.n	12126 <_dtoa_r+0x862>
   120ae:	2500      	movs	r5, #0
   120b0:	9b06      	ldr	r3, [sp, #24]
   120b2:	42ab      	cmp	r3, r5
   120b4:	d133      	bne.n	1211e <_dtoa_r+0x85a>
   120b6:	9b07      	ldr	r3, [sp, #28]
   120b8:	031b      	lsls	r3, r3, #12
   120ba:	42ab      	cmp	r3, r5
   120bc:	d12f      	bne.n	1211e <_dtoa_r+0x85a>
   120be:	9b19      	ldr	r3, [sp, #100]	; 0x64
   120c0:	9a07      	ldr	r2, [sp, #28]
   120c2:	4213      	tst	r3, r2
   120c4:	d02b      	beq.n	1211e <_dtoa_r+0x85a>
   120c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   120c8:	3501      	adds	r5, #1
   120ca:	3301      	adds	r3, #1
   120cc:	930b      	str	r3, [sp, #44]	; 0x2c
   120ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   120d0:	3301      	adds	r3, #1
   120d2:	930c      	str	r3, [sp, #48]	; 0x30
   120d4:	e023      	b.n	1211e <_dtoa_r+0x85a>
   120d6:	2336      	movs	r3, #54	; 0x36
   120d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   120da:	1a9b      	subs	r3, r3, r2
   120dc:	e795      	b.n	1200a <_dtoa_r+0x746>
   120de:	9b08      	ldr	r3, [sp, #32]
   120e0:	1e7d      	subs	r5, r7, #1
   120e2:	42ab      	cmp	r3, r5
   120e4:	db06      	blt.n	120f4 <_dtoa_r+0x830>
   120e6:	1b5d      	subs	r5, r3, r5
   120e8:	2f00      	cmp	r7, #0
   120ea:	da0b      	bge.n	12104 <_dtoa_r+0x840>
   120ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   120ee:	1bdc      	subs	r4, r3, r7
   120f0:	2300      	movs	r3, #0
   120f2:	e78c      	b.n	1200e <_dtoa_r+0x74a>
   120f4:	9b08      	ldr	r3, [sp, #32]
   120f6:	9508      	str	r5, [sp, #32]
   120f8:	1aea      	subs	r2, r5, r3
   120fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   120fc:	2500      	movs	r5, #0
   120fe:	189b      	adds	r3, r3, r2
   12100:	930f      	str	r3, [sp, #60]	; 0x3c
   12102:	e7f1      	b.n	120e8 <_dtoa_r+0x824>
   12104:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   12106:	003b      	movs	r3, r7
   12108:	e781      	b.n	1200e <_dtoa_r+0x74a>
   1210a:	9d08      	ldr	r5, [sp, #32]
   1210c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1210e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   12110:	e788      	b.n	12024 <_dtoa_r+0x760>
   12112:	9a08      	ldr	r2, [sp, #32]
   12114:	e7b4      	b.n	12080 <_dtoa_r+0x7bc>
   12116:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12118:	2500      	movs	r5, #0
   1211a:	2b01      	cmp	r3, #1
   1211c:	ddc7      	ble.n	120ae <_dtoa_r+0x7ea>
   1211e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12120:	2001      	movs	r0, #1
   12122:	2b00      	cmp	r3, #0
   12124:	d00b      	beq.n	1213e <_dtoa_r+0x87a>
   12126:	9b08      	ldr	r3, [sp, #32]
   12128:	9a08      	ldr	r2, [sp, #32]
   1212a:	691b      	ldr	r3, [r3, #16]
   1212c:	930f      	str	r3, [sp, #60]	; 0x3c
   1212e:	3303      	adds	r3, #3
   12130:	009b      	lsls	r3, r3, #2
   12132:	18d3      	adds	r3, r2, r3
   12134:	6858      	ldr	r0, [r3, #4]
   12136:	f000 fc4d 	bl	129d4 <__hi0bits>
   1213a:	2320      	movs	r3, #32
   1213c:	1a18      	subs	r0, r3, r0
   1213e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12140:	18c0      	adds	r0, r0, r3
   12142:	231f      	movs	r3, #31
   12144:	4018      	ands	r0, r3
   12146:	d100      	bne.n	1214a <_dtoa_r+0x886>
   12148:	e0ab      	b.n	122a2 <_dtoa_r+0x9de>
   1214a:	3301      	adds	r3, #1
   1214c:	1a1b      	subs	r3, r3, r0
   1214e:	2b04      	cmp	r3, #4
   12150:	dc00      	bgt.n	12154 <_dtoa_r+0x890>
   12152:	e09b      	b.n	1228c <_dtoa_r+0x9c8>
   12154:	231c      	movs	r3, #28
   12156:	1a18      	subs	r0, r3, r0
   12158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1215a:	1824      	adds	r4, r4, r0
   1215c:	181b      	adds	r3, r3, r0
   1215e:	930b      	str	r3, [sp, #44]	; 0x2c
   12160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12162:	181b      	adds	r3, r3, r0
   12164:	930c      	str	r3, [sp, #48]	; 0x30
   12166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12168:	2b00      	cmp	r3, #0
   1216a:	dd05      	ble.n	12178 <_dtoa_r+0x8b4>
   1216c:	001a      	movs	r2, r3
   1216e:	9905      	ldr	r1, [sp, #20]
   12170:	9804      	ldr	r0, [sp, #16]
   12172:	f000 fd63 	bl	12c3c <__lshift>
   12176:	9005      	str	r0, [sp, #20]
   12178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1217a:	2b00      	cmp	r3, #0
   1217c:	dd05      	ble.n	1218a <_dtoa_r+0x8c6>
   1217e:	001a      	movs	r2, r3
   12180:	9908      	ldr	r1, [sp, #32]
   12182:	9804      	ldr	r0, [sp, #16]
   12184:	f000 fd5a 	bl	12c3c <__lshift>
   12188:	9008      	str	r0, [sp, #32]
   1218a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1218c:	2b00      	cmp	r3, #0
   1218e:	d100      	bne.n	12192 <_dtoa_r+0x8ce>
   12190:	e089      	b.n	122a6 <_dtoa_r+0x9e2>
   12192:	9908      	ldr	r1, [sp, #32]
   12194:	9805      	ldr	r0, [sp, #20]
   12196:	f000 fda2 	bl	12cde <__mcmp>
   1219a:	2800      	cmp	r0, #0
   1219c:	db00      	blt.n	121a0 <_dtoa_r+0x8dc>
   1219e:	e082      	b.n	122a6 <_dtoa_r+0x9e2>
   121a0:	9b03      	ldr	r3, [sp, #12]
   121a2:	220a      	movs	r2, #10
   121a4:	3b01      	subs	r3, #1
   121a6:	9303      	str	r3, [sp, #12]
   121a8:	9905      	ldr	r1, [sp, #20]
   121aa:	2300      	movs	r3, #0
   121ac:	9804      	ldr	r0, [sp, #16]
   121ae:	f000 fbd5 	bl	1295c <__multadd>
   121b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   121b4:	9005      	str	r0, [sp, #20]
   121b6:	2b00      	cmp	r3, #0
   121b8:	d100      	bne.n	121bc <_dtoa_r+0x8f8>
   121ba:	e15d      	b.n	12478 <_dtoa_r+0xbb4>
   121bc:	2300      	movs	r3, #0
   121be:	0031      	movs	r1, r6
   121c0:	220a      	movs	r2, #10
   121c2:	9804      	ldr	r0, [sp, #16]
   121c4:	f000 fbca 	bl	1295c <__multadd>
   121c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   121ca:	0006      	movs	r6, r0
   121cc:	2b00      	cmp	r3, #0
   121ce:	dc02      	bgt.n	121d6 <_dtoa_r+0x912>
   121d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   121d2:	2b02      	cmp	r3, #2
   121d4:	dc6d      	bgt.n	122b2 <_dtoa_r+0x9ee>
   121d6:	2c00      	cmp	r4, #0
   121d8:	dd05      	ble.n	121e6 <_dtoa_r+0x922>
   121da:	0031      	movs	r1, r6
   121dc:	0022      	movs	r2, r4
   121de:	9804      	ldr	r0, [sp, #16]
   121e0:	f000 fd2c 	bl	12c3c <__lshift>
   121e4:	0006      	movs	r6, r0
   121e6:	0030      	movs	r0, r6
   121e8:	2d00      	cmp	r5, #0
   121ea:	d011      	beq.n	12210 <_dtoa_r+0x94c>
   121ec:	6871      	ldr	r1, [r6, #4]
   121ee:	9804      	ldr	r0, [sp, #16]
   121f0:	f000 fb63 	bl	128ba <_Balloc>
   121f4:	0031      	movs	r1, r6
   121f6:	0004      	movs	r4, r0
   121f8:	6933      	ldr	r3, [r6, #16]
   121fa:	310c      	adds	r1, #12
   121fc:	1c9a      	adds	r2, r3, #2
   121fe:	0092      	lsls	r2, r2, #2
   12200:	300c      	adds	r0, #12
   12202:	f7fe fb40 	bl	10886 <memcpy>
   12206:	2201      	movs	r2, #1
   12208:	0021      	movs	r1, r4
   1220a:	9804      	ldr	r0, [sp, #16]
   1220c:	f000 fd16 	bl	12c3c <__lshift>
   12210:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   12212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12214:	3f01      	subs	r7, #1
   12216:	930b      	str	r3, [sp, #44]	; 0x2c
   12218:	19db      	adds	r3, r3, r7
   1221a:	0037      	movs	r7, r6
   1221c:	0006      	movs	r6, r0
   1221e:	930f      	str	r3, [sp, #60]	; 0x3c
   12220:	9908      	ldr	r1, [sp, #32]
   12222:	9805      	ldr	r0, [sp, #20]
   12224:	f7ff fac9 	bl	117ba <quorem>
   12228:	0039      	movs	r1, r7
   1222a:	900d      	str	r0, [sp, #52]	; 0x34
   1222c:	0004      	movs	r4, r0
   1222e:	9805      	ldr	r0, [sp, #20]
   12230:	f000 fd55 	bl	12cde <__mcmp>
   12234:	0032      	movs	r2, r6
   12236:	900e      	str	r0, [sp, #56]	; 0x38
   12238:	9908      	ldr	r1, [sp, #32]
   1223a:	9804      	ldr	r0, [sp, #16]
   1223c:	f000 fd68 	bl	12d10 <__mdiff>
   12240:	2301      	movs	r3, #1
   12242:	930c      	str	r3, [sp, #48]	; 0x30
   12244:	68c3      	ldr	r3, [r0, #12]
   12246:	3430      	adds	r4, #48	; 0x30
   12248:	0005      	movs	r5, r0
   1224a:	2b00      	cmp	r3, #0
   1224c:	d104      	bne.n	12258 <_dtoa_r+0x994>
   1224e:	0001      	movs	r1, r0
   12250:	9805      	ldr	r0, [sp, #20]
   12252:	f000 fd44 	bl	12cde <__mcmp>
   12256:	900c      	str	r0, [sp, #48]	; 0x30
   12258:	0029      	movs	r1, r5
   1225a:	9804      	ldr	r0, [sp, #16]
   1225c:	f000 fb65 	bl	1292a <_Bfree>
   12260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12262:	9a22      	ldr	r2, [sp, #136]	; 0x88
   12264:	4313      	orrs	r3, r2
   12266:	d000      	beq.n	1226a <_dtoa_r+0x9a6>
   12268:	e089      	b.n	1237e <_dtoa_r+0xaba>
   1226a:	9a06      	ldr	r2, [sp, #24]
   1226c:	3301      	adds	r3, #1
   1226e:	4213      	tst	r3, r2
   12270:	d000      	beq.n	12274 <_dtoa_r+0x9b0>
   12272:	e084      	b.n	1237e <_dtoa_r+0xaba>
   12274:	2c39      	cmp	r4, #57	; 0x39
   12276:	d100      	bne.n	1227a <_dtoa_r+0x9b6>
   12278:	e0a3      	b.n	123c2 <_dtoa_r+0xafe>
   1227a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1227c:	2b00      	cmp	r3, #0
   1227e:	dd01      	ble.n	12284 <_dtoa_r+0x9c0>
   12280:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   12282:	3431      	adds	r4, #49	; 0x31
   12284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12286:	1c5d      	adds	r5, r3, #1
   12288:	701c      	strb	r4, [r3, #0]
   1228a:	e027      	b.n	122dc <_dtoa_r+0xa18>
   1228c:	2b04      	cmp	r3, #4
   1228e:	d100      	bne.n	12292 <_dtoa_r+0x9ce>
   12290:	e769      	b.n	12166 <_dtoa_r+0x8a2>
   12292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12294:	331c      	adds	r3, #28
   12296:	18d2      	adds	r2, r2, r3
   12298:	920b      	str	r2, [sp, #44]	; 0x2c
   1229a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1229c:	18e4      	adds	r4, r4, r3
   1229e:	18d3      	adds	r3, r2, r3
   122a0:	e760      	b.n	12164 <_dtoa_r+0x8a0>
   122a2:	0003      	movs	r3, r0
   122a4:	e7f5      	b.n	12292 <_dtoa_r+0x9ce>
   122a6:	2f00      	cmp	r7, #0
   122a8:	dc3c      	bgt.n	12324 <_dtoa_r+0xa60>
   122aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   122ac:	2b02      	cmp	r3, #2
   122ae:	dd39      	ble.n	12324 <_dtoa_r+0xa60>
   122b0:	970d      	str	r7, [sp, #52]	; 0x34
   122b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122b4:	2b00      	cmp	r3, #0
   122b6:	d10c      	bne.n	122d2 <_dtoa_r+0xa0e>
   122b8:	9908      	ldr	r1, [sp, #32]
   122ba:	2205      	movs	r2, #5
   122bc:	9804      	ldr	r0, [sp, #16]
   122be:	f000 fb4d 	bl	1295c <__multadd>
   122c2:	9008      	str	r0, [sp, #32]
   122c4:	0001      	movs	r1, r0
   122c6:	9805      	ldr	r0, [sp, #20]
   122c8:	f000 fd09 	bl	12cde <__mcmp>
   122cc:	2800      	cmp	r0, #0
   122ce:	dd00      	ble.n	122d2 <_dtoa_r+0xa0e>
   122d0:	e55a      	b.n	11d88 <_dtoa_r+0x4c4>
   122d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   122d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   122d6:	43db      	mvns	r3, r3
   122d8:	9303      	str	r3, [sp, #12]
   122da:	2700      	movs	r7, #0
   122dc:	9908      	ldr	r1, [sp, #32]
   122de:	9804      	ldr	r0, [sp, #16]
   122e0:	f000 fb23 	bl	1292a <_Bfree>
   122e4:	2e00      	cmp	r6, #0
   122e6:	d100      	bne.n	122ea <_dtoa_r+0xa26>
   122e8:	e63f      	b.n	11f6a <_dtoa_r+0x6a6>
   122ea:	2f00      	cmp	r7, #0
   122ec:	d005      	beq.n	122fa <_dtoa_r+0xa36>
   122ee:	42b7      	cmp	r7, r6
   122f0:	d003      	beq.n	122fa <_dtoa_r+0xa36>
   122f2:	0039      	movs	r1, r7
   122f4:	9804      	ldr	r0, [sp, #16]
   122f6:	f000 fb18 	bl	1292a <_Bfree>
   122fa:	0031      	movs	r1, r6
   122fc:	9804      	ldr	r0, [sp, #16]
   122fe:	f000 fb14 	bl	1292a <_Bfree>
   12302:	e632      	b.n	11f6a <_dtoa_r+0x6a6>
   12304:	9508      	str	r5, [sp, #32]
   12306:	002e      	movs	r6, r5
   12308:	e7e3      	b.n	122d2 <_dtoa_r+0xa0e>
   1230a:	2300      	movs	r3, #0
   1230c:	9308      	str	r3, [sp, #32]
   1230e:	001e      	movs	r6, r3
   12310:	e7df      	b.n	122d2 <_dtoa_r+0xa0e>
   12312:	46c0      	nop			; (mov r8, r8)
   12314:	40240000 	.word	0x40240000
   12318:	00000433 	.word	0x00000433
   1231c:	9603      	str	r6, [sp, #12]
   1231e:	9508      	str	r5, [sp, #32]
   12320:	002e      	movs	r6, r5
   12322:	e531      	b.n	11d88 <_dtoa_r+0x4c4>
   12324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12326:	970d      	str	r7, [sp, #52]	; 0x34
   12328:	2b00      	cmp	r3, #0
   1232a:	d000      	beq.n	1232e <_dtoa_r+0xa6a>
   1232c:	e753      	b.n	121d6 <_dtoa_r+0x912>
   1232e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   12330:	9908      	ldr	r1, [sp, #32]
   12332:	9805      	ldr	r0, [sp, #20]
   12334:	f7ff fa41 	bl	117ba <quorem>
   12338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1233a:	3030      	adds	r0, #48	; 0x30
   1233c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1233e:	7028      	strb	r0, [r5, #0]
   12340:	3501      	adds	r5, #1
   12342:	0004      	movs	r4, r0
   12344:	1aeb      	subs	r3, r5, r3
   12346:	429a      	cmp	r2, r3
   12348:	dc78      	bgt.n	1243c <_dtoa_r+0xb78>
   1234a:	1e15      	subs	r5, r2, #0
   1234c:	dc00      	bgt.n	12350 <_dtoa_r+0xa8c>
   1234e:	2501      	movs	r5, #1
   12350:	2700      	movs	r7, #0
   12352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12354:	195d      	adds	r5, r3, r5
   12356:	9905      	ldr	r1, [sp, #20]
   12358:	2201      	movs	r2, #1
   1235a:	9804      	ldr	r0, [sp, #16]
   1235c:	f000 fc6e 	bl	12c3c <__lshift>
   12360:	9908      	ldr	r1, [sp, #32]
   12362:	9005      	str	r0, [sp, #20]
   12364:	f000 fcbb 	bl	12cde <__mcmp>
   12368:	2800      	cmp	r0, #0
   1236a:	dc2f      	bgt.n	123cc <_dtoa_r+0xb08>
   1236c:	d101      	bne.n	12372 <_dtoa_r+0xaae>
   1236e:	07e3      	lsls	r3, r4, #31
   12370:	d42c      	bmi.n	123cc <_dtoa_r+0xb08>
   12372:	1e6b      	subs	r3, r5, #1
   12374:	781a      	ldrb	r2, [r3, #0]
   12376:	2a30      	cmp	r2, #48	; 0x30
   12378:	d1b0      	bne.n	122dc <_dtoa_r+0xa18>
   1237a:	001d      	movs	r5, r3
   1237c:	e7f9      	b.n	12372 <_dtoa_r+0xaae>
   1237e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12380:	2b00      	cmp	r3, #0
   12382:	db07      	blt.n	12394 <_dtoa_r+0xad0>
   12384:	001d      	movs	r5, r3
   12386:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12388:	431d      	orrs	r5, r3
   1238a:	d126      	bne.n	123da <_dtoa_r+0xb16>
   1238c:	2301      	movs	r3, #1
   1238e:	9a06      	ldr	r2, [sp, #24]
   12390:	4213      	tst	r3, r2
   12392:	d122      	bne.n	123da <_dtoa_r+0xb16>
   12394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12396:	2b00      	cmp	r3, #0
   12398:	dc00      	bgt.n	1239c <_dtoa_r+0xad8>
   1239a:	e773      	b.n	12284 <_dtoa_r+0x9c0>
   1239c:	9905      	ldr	r1, [sp, #20]
   1239e:	2201      	movs	r2, #1
   123a0:	9804      	ldr	r0, [sp, #16]
   123a2:	f000 fc4b 	bl	12c3c <__lshift>
   123a6:	9908      	ldr	r1, [sp, #32]
   123a8:	9005      	str	r0, [sp, #20]
   123aa:	f000 fc98 	bl	12cde <__mcmp>
   123ae:	2800      	cmp	r0, #0
   123b0:	dc04      	bgt.n	123bc <_dtoa_r+0xaf8>
   123b2:	d000      	beq.n	123b6 <_dtoa_r+0xaf2>
   123b4:	e766      	b.n	12284 <_dtoa_r+0x9c0>
   123b6:	07e3      	lsls	r3, r4, #31
   123b8:	d400      	bmi.n	123bc <_dtoa_r+0xaf8>
   123ba:	e763      	b.n	12284 <_dtoa_r+0x9c0>
   123bc:	2c39      	cmp	r4, #57	; 0x39
   123be:	d000      	beq.n	123c2 <_dtoa_r+0xafe>
   123c0:	e75e      	b.n	12280 <_dtoa_r+0x9bc>
   123c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   123c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   123c6:	1c5d      	adds	r5, r3, #1
   123c8:	2339      	movs	r3, #57	; 0x39
   123ca:	7013      	strb	r3, [r2, #0]
   123cc:	1e6b      	subs	r3, r5, #1
   123ce:	781a      	ldrb	r2, [r3, #0]
   123d0:	2a39      	cmp	r2, #57	; 0x39
   123d2:	d03b      	beq.n	1244c <_dtoa_r+0xb88>
   123d4:	3201      	adds	r2, #1
   123d6:	701a      	strb	r2, [r3, #0]
   123d8:	e780      	b.n	122dc <_dtoa_r+0xa18>
   123da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   123dc:	3301      	adds	r3, #1
   123de:	930d      	str	r3, [sp, #52]	; 0x34
   123e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   123e2:	2b00      	cmp	r3, #0
   123e4:	dd05      	ble.n	123f2 <_dtoa_r+0xb2e>
   123e6:	2c39      	cmp	r4, #57	; 0x39
   123e8:	d0eb      	beq.n	123c2 <_dtoa_r+0xafe>
   123ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   123ec:	3401      	adds	r4, #1
   123ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   123f0:	e74a      	b.n	12288 <_dtoa_r+0x9c4>
   123f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   123f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   123f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   123f8:	701c      	strb	r4, [r3, #0]
   123fa:	4293      	cmp	r3, r2
   123fc:	d0ab      	beq.n	12356 <_dtoa_r+0xa92>
   123fe:	2300      	movs	r3, #0
   12400:	220a      	movs	r2, #10
   12402:	9905      	ldr	r1, [sp, #20]
   12404:	9804      	ldr	r0, [sp, #16]
   12406:	f000 faa9 	bl	1295c <__multadd>
   1240a:	2300      	movs	r3, #0
   1240c:	9005      	str	r0, [sp, #20]
   1240e:	220a      	movs	r2, #10
   12410:	0039      	movs	r1, r7
   12412:	9804      	ldr	r0, [sp, #16]
   12414:	42b7      	cmp	r7, r6
   12416:	d106      	bne.n	12426 <_dtoa_r+0xb62>
   12418:	f000 faa0 	bl	1295c <__multadd>
   1241c:	0007      	movs	r7, r0
   1241e:	0006      	movs	r6, r0
   12420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12422:	930b      	str	r3, [sp, #44]	; 0x2c
   12424:	e6fc      	b.n	12220 <_dtoa_r+0x95c>
   12426:	f000 fa99 	bl	1295c <__multadd>
   1242a:	0031      	movs	r1, r6
   1242c:	0007      	movs	r7, r0
   1242e:	2300      	movs	r3, #0
   12430:	220a      	movs	r2, #10
   12432:	9804      	ldr	r0, [sp, #16]
   12434:	f000 fa92 	bl	1295c <__multadd>
   12438:	0006      	movs	r6, r0
   1243a:	e7f1      	b.n	12420 <_dtoa_r+0xb5c>
   1243c:	2300      	movs	r3, #0
   1243e:	220a      	movs	r2, #10
   12440:	9905      	ldr	r1, [sp, #20]
   12442:	9804      	ldr	r0, [sp, #16]
   12444:	f000 fa8a 	bl	1295c <__multadd>
   12448:	9005      	str	r0, [sp, #20]
   1244a:	e771      	b.n	12330 <_dtoa_r+0xa6c>
   1244c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1244e:	429a      	cmp	r2, r3
   12450:	d105      	bne.n	1245e <_dtoa_r+0xb9a>
   12452:	9b03      	ldr	r3, [sp, #12]
   12454:	3301      	adds	r3, #1
   12456:	9303      	str	r3, [sp, #12]
   12458:	2331      	movs	r3, #49	; 0x31
   1245a:	7013      	strb	r3, [r2, #0]
   1245c:	e73e      	b.n	122dc <_dtoa_r+0xa18>
   1245e:	001d      	movs	r5, r3
   12460:	e7b4      	b.n	123cc <_dtoa_r+0xb08>
   12462:	4b0a      	ldr	r3, [pc, #40]	; (1248c <_dtoa_r+0xbc8>)
   12464:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12466:	930a      	str	r3, [sp, #40]	; 0x28
   12468:	4b09      	ldr	r3, [pc, #36]	; (12490 <_dtoa_r+0xbcc>)
   1246a:	2a00      	cmp	r2, #0
   1246c:	d001      	beq.n	12472 <_dtoa_r+0xbae>
   1246e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12470:	6013      	str	r3, [r2, #0]
   12472:	980a      	ldr	r0, [sp, #40]	; 0x28
   12474:	b01d      	add	sp, #116	; 0x74
   12476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1247a:	2b00      	cmp	r3, #0
   1247c:	dd00      	ble.n	12480 <_dtoa_r+0xbbc>
   1247e:	e756      	b.n	1232e <_dtoa_r+0xa6a>
   12480:	9b22      	ldr	r3, [sp, #136]	; 0x88
   12482:	2b02      	cmp	r3, #2
   12484:	dc00      	bgt.n	12488 <_dtoa_r+0xbc4>
   12486:	e752      	b.n	1232e <_dtoa_r+0xa6a>
   12488:	e713      	b.n	122b2 <_dtoa_r+0x9ee>
   1248a:	46c0      	nop			; (mov r8, r8)
   1248c:	00014328 	.word	0x00014328
   12490:	00014330 	.word	0x00014330

00012494 <__sflush_r>:
   12494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12496:	898a      	ldrh	r2, [r1, #12]
   12498:	0005      	movs	r5, r0
   1249a:	000c      	movs	r4, r1
   1249c:	0713      	lsls	r3, r2, #28
   1249e:	d460      	bmi.n	12562 <__sflush_r+0xce>
   124a0:	684b      	ldr	r3, [r1, #4]
   124a2:	2b00      	cmp	r3, #0
   124a4:	dc04      	bgt.n	124b0 <__sflush_r+0x1c>
   124a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   124a8:	2b00      	cmp	r3, #0
   124aa:	dc01      	bgt.n	124b0 <__sflush_r+0x1c>
   124ac:	2000      	movs	r0, #0
   124ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   124b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   124b2:	2f00      	cmp	r7, #0
   124b4:	d0fa      	beq.n	124ac <__sflush_r+0x18>
   124b6:	2300      	movs	r3, #0
   124b8:	682e      	ldr	r6, [r5, #0]
   124ba:	602b      	str	r3, [r5, #0]
   124bc:	2380      	movs	r3, #128	; 0x80
   124be:	015b      	lsls	r3, r3, #5
   124c0:	401a      	ands	r2, r3
   124c2:	d034      	beq.n	1252e <__sflush_r+0x9a>
   124c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   124c6:	89a3      	ldrh	r3, [r4, #12]
   124c8:	075b      	lsls	r3, r3, #29
   124ca:	d506      	bpl.n	124da <__sflush_r+0x46>
   124cc:	6863      	ldr	r3, [r4, #4]
   124ce:	1ac0      	subs	r0, r0, r3
   124d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   124d2:	2b00      	cmp	r3, #0
   124d4:	d001      	beq.n	124da <__sflush_r+0x46>
   124d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   124d8:	1ac0      	subs	r0, r0, r3
   124da:	0002      	movs	r2, r0
   124dc:	6a21      	ldr	r1, [r4, #32]
   124de:	2300      	movs	r3, #0
   124e0:	0028      	movs	r0, r5
   124e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   124e4:	47b8      	blx	r7
   124e6:	89a1      	ldrh	r1, [r4, #12]
   124e8:	1c43      	adds	r3, r0, #1
   124ea:	d106      	bne.n	124fa <__sflush_r+0x66>
   124ec:	682b      	ldr	r3, [r5, #0]
   124ee:	2b1d      	cmp	r3, #29
   124f0:	d831      	bhi.n	12556 <__sflush_r+0xc2>
   124f2:	4a2c      	ldr	r2, [pc, #176]	; (125a4 <__sflush_r+0x110>)
   124f4:	40da      	lsrs	r2, r3
   124f6:	07d3      	lsls	r3, r2, #31
   124f8:	d52d      	bpl.n	12556 <__sflush_r+0xc2>
   124fa:	2300      	movs	r3, #0
   124fc:	6063      	str	r3, [r4, #4]
   124fe:	6923      	ldr	r3, [r4, #16]
   12500:	6023      	str	r3, [r4, #0]
   12502:	04cb      	lsls	r3, r1, #19
   12504:	d505      	bpl.n	12512 <__sflush_r+0x7e>
   12506:	1c43      	adds	r3, r0, #1
   12508:	d102      	bne.n	12510 <__sflush_r+0x7c>
   1250a:	682b      	ldr	r3, [r5, #0]
   1250c:	2b00      	cmp	r3, #0
   1250e:	d100      	bne.n	12512 <__sflush_r+0x7e>
   12510:	6560      	str	r0, [r4, #84]	; 0x54
   12512:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12514:	602e      	str	r6, [r5, #0]
   12516:	2900      	cmp	r1, #0
   12518:	d0c8      	beq.n	124ac <__sflush_r+0x18>
   1251a:	0023      	movs	r3, r4
   1251c:	3344      	adds	r3, #68	; 0x44
   1251e:	4299      	cmp	r1, r3
   12520:	d002      	beq.n	12528 <__sflush_r+0x94>
   12522:	0028      	movs	r0, r5
   12524:	f7fe f9c0 	bl	108a8 <_free_r>
   12528:	2000      	movs	r0, #0
   1252a:	6360      	str	r0, [r4, #52]	; 0x34
   1252c:	e7bf      	b.n	124ae <__sflush_r+0x1a>
   1252e:	2301      	movs	r3, #1
   12530:	6a21      	ldr	r1, [r4, #32]
   12532:	0028      	movs	r0, r5
   12534:	47b8      	blx	r7
   12536:	1c43      	adds	r3, r0, #1
   12538:	d1c5      	bne.n	124c6 <__sflush_r+0x32>
   1253a:	682b      	ldr	r3, [r5, #0]
   1253c:	2b00      	cmp	r3, #0
   1253e:	d0c2      	beq.n	124c6 <__sflush_r+0x32>
   12540:	2b1d      	cmp	r3, #29
   12542:	d001      	beq.n	12548 <__sflush_r+0xb4>
   12544:	2b16      	cmp	r3, #22
   12546:	d101      	bne.n	1254c <__sflush_r+0xb8>
   12548:	602e      	str	r6, [r5, #0]
   1254a:	e7af      	b.n	124ac <__sflush_r+0x18>
   1254c:	2340      	movs	r3, #64	; 0x40
   1254e:	89a2      	ldrh	r2, [r4, #12]
   12550:	4313      	orrs	r3, r2
   12552:	81a3      	strh	r3, [r4, #12]
   12554:	e7ab      	b.n	124ae <__sflush_r+0x1a>
   12556:	2340      	movs	r3, #64	; 0x40
   12558:	430b      	orrs	r3, r1
   1255a:	2001      	movs	r0, #1
   1255c:	81a3      	strh	r3, [r4, #12]
   1255e:	4240      	negs	r0, r0
   12560:	e7a5      	b.n	124ae <__sflush_r+0x1a>
   12562:	690f      	ldr	r7, [r1, #16]
   12564:	2f00      	cmp	r7, #0
   12566:	d0a1      	beq.n	124ac <__sflush_r+0x18>
   12568:	680b      	ldr	r3, [r1, #0]
   1256a:	600f      	str	r7, [r1, #0]
   1256c:	1bdb      	subs	r3, r3, r7
   1256e:	9301      	str	r3, [sp, #4]
   12570:	2300      	movs	r3, #0
   12572:	0792      	lsls	r2, r2, #30
   12574:	d100      	bne.n	12578 <__sflush_r+0xe4>
   12576:	694b      	ldr	r3, [r1, #20]
   12578:	60a3      	str	r3, [r4, #8]
   1257a:	9b01      	ldr	r3, [sp, #4]
   1257c:	2b00      	cmp	r3, #0
   1257e:	dc00      	bgt.n	12582 <__sflush_r+0xee>
   12580:	e794      	b.n	124ac <__sflush_r+0x18>
   12582:	9b01      	ldr	r3, [sp, #4]
   12584:	003a      	movs	r2, r7
   12586:	6a21      	ldr	r1, [r4, #32]
   12588:	0028      	movs	r0, r5
   1258a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1258c:	47b0      	blx	r6
   1258e:	2800      	cmp	r0, #0
   12590:	dc03      	bgt.n	1259a <__sflush_r+0x106>
   12592:	2340      	movs	r3, #64	; 0x40
   12594:	89a2      	ldrh	r2, [r4, #12]
   12596:	4313      	orrs	r3, r2
   12598:	e7df      	b.n	1255a <__sflush_r+0xc6>
   1259a:	9b01      	ldr	r3, [sp, #4]
   1259c:	183f      	adds	r7, r7, r0
   1259e:	1a1b      	subs	r3, r3, r0
   125a0:	9301      	str	r3, [sp, #4]
   125a2:	e7ea      	b.n	1257a <__sflush_r+0xe6>
   125a4:	20400001 	.word	0x20400001

000125a8 <_fflush_r>:
   125a8:	690b      	ldr	r3, [r1, #16]
   125aa:	b570      	push	{r4, r5, r6, lr}
   125ac:	0005      	movs	r5, r0
   125ae:	000c      	movs	r4, r1
   125b0:	2b00      	cmp	r3, #0
   125b2:	d101      	bne.n	125b8 <_fflush_r+0x10>
   125b4:	2000      	movs	r0, #0
   125b6:	bd70      	pop	{r4, r5, r6, pc}
   125b8:	2800      	cmp	r0, #0
   125ba:	d004      	beq.n	125c6 <_fflush_r+0x1e>
   125bc:	6983      	ldr	r3, [r0, #24]
   125be:	2b00      	cmp	r3, #0
   125c0:	d101      	bne.n	125c6 <_fflush_r+0x1e>
   125c2:	f000 f85f 	bl	12684 <__sinit>
   125c6:	4b0b      	ldr	r3, [pc, #44]	; (125f4 <_fflush_r+0x4c>)
   125c8:	429c      	cmp	r4, r3
   125ca:	d109      	bne.n	125e0 <_fflush_r+0x38>
   125cc:	686c      	ldr	r4, [r5, #4]
   125ce:	220c      	movs	r2, #12
   125d0:	5ea3      	ldrsh	r3, [r4, r2]
   125d2:	2b00      	cmp	r3, #0
   125d4:	d0ee      	beq.n	125b4 <_fflush_r+0xc>
   125d6:	0021      	movs	r1, r4
   125d8:	0028      	movs	r0, r5
   125da:	f7ff ff5b 	bl	12494 <__sflush_r>
   125de:	e7ea      	b.n	125b6 <_fflush_r+0xe>
   125e0:	4b05      	ldr	r3, [pc, #20]	; (125f8 <_fflush_r+0x50>)
   125e2:	429c      	cmp	r4, r3
   125e4:	d101      	bne.n	125ea <_fflush_r+0x42>
   125e6:	68ac      	ldr	r4, [r5, #8]
   125e8:	e7f1      	b.n	125ce <_fflush_r+0x26>
   125ea:	4b04      	ldr	r3, [pc, #16]	; (125fc <_fflush_r+0x54>)
   125ec:	429c      	cmp	r4, r3
   125ee:	d1ee      	bne.n	125ce <_fflush_r+0x26>
   125f0:	68ec      	ldr	r4, [r5, #12]
   125f2:	e7ec      	b.n	125ce <_fflush_r+0x26>
   125f4:	00014358 	.word	0x00014358
   125f8:	00014378 	.word	0x00014378
   125fc:	00014338 	.word	0x00014338

00012600 <_cleanup_r>:
   12600:	b510      	push	{r4, lr}
   12602:	4902      	ldr	r1, [pc, #8]	; (1260c <_cleanup_r+0xc>)
   12604:	f000 f8b2 	bl	1276c <_fwalk_reent>
   12608:	bd10      	pop	{r4, pc}
   1260a:	46c0      	nop			; (mov r8, r8)
   1260c:	000125a9 	.word	0x000125a9

00012610 <std.isra.0>:
   12610:	2300      	movs	r3, #0
   12612:	b510      	push	{r4, lr}
   12614:	0004      	movs	r4, r0
   12616:	6003      	str	r3, [r0, #0]
   12618:	6043      	str	r3, [r0, #4]
   1261a:	6083      	str	r3, [r0, #8]
   1261c:	8181      	strh	r1, [r0, #12]
   1261e:	6643      	str	r3, [r0, #100]	; 0x64
   12620:	81c2      	strh	r2, [r0, #14]
   12622:	6103      	str	r3, [r0, #16]
   12624:	6143      	str	r3, [r0, #20]
   12626:	6183      	str	r3, [r0, #24]
   12628:	0019      	movs	r1, r3
   1262a:	2208      	movs	r2, #8
   1262c:	305c      	adds	r0, #92	; 0x5c
   1262e:	f7fe f933 	bl	10898 <memset>
   12632:	4b05      	ldr	r3, [pc, #20]	; (12648 <std.isra.0+0x38>)
   12634:	6224      	str	r4, [r4, #32]
   12636:	6263      	str	r3, [r4, #36]	; 0x24
   12638:	4b04      	ldr	r3, [pc, #16]	; (1264c <std.isra.0+0x3c>)
   1263a:	62a3      	str	r3, [r4, #40]	; 0x28
   1263c:	4b04      	ldr	r3, [pc, #16]	; (12650 <std.isra.0+0x40>)
   1263e:	62e3      	str	r3, [r4, #44]	; 0x2c
   12640:	4b04      	ldr	r3, [pc, #16]	; (12654 <std.isra.0+0x44>)
   12642:	6323      	str	r3, [r4, #48]	; 0x30
   12644:	bd10      	pop	{r4, pc}
   12646:	46c0      	nop			; (mov r8, r8)
   12648:	00012f7d 	.word	0x00012f7d
   1264c:	00012fa5 	.word	0x00012fa5
   12650:	00012fdd 	.word	0x00012fdd
   12654:	00013009 	.word	0x00013009

00012658 <__sfmoreglue>:
   12658:	b570      	push	{r4, r5, r6, lr}
   1265a:	2568      	movs	r5, #104	; 0x68
   1265c:	1e4a      	subs	r2, r1, #1
   1265e:	4355      	muls	r5, r2
   12660:	000e      	movs	r6, r1
   12662:	0029      	movs	r1, r5
   12664:	3174      	adds	r1, #116	; 0x74
   12666:	f7fe f969 	bl	1093c <_malloc_r>
   1266a:	1e04      	subs	r4, r0, #0
   1266c:	d008      	beq.n	12680 <__sfmoreglue+0x28>
   1266e:	2100      	movs	r1, #0
   12670:	002a      	movs	r2, r5
   12672:	6001      	str	r1, [r0, #0]
   12674:	6046      	str	r6, [r0, #4]
   12676:	300c      	adds	r0, #12
   12678:	60a0      	str	r0, [r4, #8]
   1267a:	3268      	adds	r2, #104	; 0x68
   1267c:	f7fe f90c 	bl	10898 <memset>
   12680:	0020      	movs	r0, r4
   12682:	bd70      	pop	{r4, r5, r6, pc}

00012684 <__sinit>:
   12684:	6983      	ldr	r3, [r0, #24]
   12686:	b513      	push	{r0, r1, r4, lr}
   12688:	0004      	movs	r4, r0
   1268a:	2b00      	cmp	r3, #0
   1268c:	d128      	bne.n	126e0 <__sinit+0x5c>
   1268e:	6483      	str	r3, [r0, #72]	; 0x48
   12690:	64c3      	str	r3, [r0, #76]	; 0x4c
   12692:	6503      	str	r3, [r0, #80]	; 0x50
   12694:	4b13      	ldr	r3, [pc, #76]	; (126e4 <__sinit+0x60>)
   12696:	4a14      	ldr	r2, [pc, #80]	; (126e8 <__sinit+0x64>)
   12698:	681b      	ldr	r3, [r3, #0]
   1269a:	6282      	str	r2, [r0, #40]	; 0x28
   1269c:	9301      	str	r3, [sp, #4]
   1269e:	4298      	cmp	r0, r3
   126a0:	d101      	bne.n	126a6 <__sinit+0x22>
   126a2:	2301      	movs	r3, #1
   126a4:	6183      	str	r3, [r0, #24]
   126a6:	0020      	movs	r0, r4
   126a8:	f000 f820 	bl	126ec <__sfp>
   126ac:	6060      	str	r0, [r4, #4]
   126ae:	0020      	movs	r0, r4
   126b0:	f000 f81c 	bl	126ec <__sfp>
   126b4:	60a0      	str	r0, [r4, #8]
   126b6:	0020      	movs	r0, r4
   126b8:	f000 f818 	bl	126ec <__sfp>
   126bc:	2200      	movs	r2, #0
   126be:	60e0      	str	r0, [r4, #12]
   126c0:	2104      	movs	r1, #4
   126c2:	6860      	ldr	r0, [r4, #4]
   126c4:	f7ff ffa4 	bl	12610 <std.isra.0>
   126c8:	2201      	movs	r2, #1
   126ca:	2109      	movs	r1, #9
   126cc:	68a0      	ldr	r0, [r4, #8]
   126ce:	f7ff ff9f 	bl	12610 <std.isra.0>
   126d2:	2202      	movs	r2, #2
   126d4:	2112      	movs	r1, #18
   126d6:	68e0      	ldr	r0, [r4, #12]
   126d8:	f7ff ff9a 	bl	12610 <std.isra.0>
   126dc:	2301      	movs	r3, #1
   126de:	61a3      	str	r3, [r4, #24]
   126e0:	bd13      	pop	{r0, r1, r4, pc}
   126e2:	46c0      	nop			; (mov r8, r8)
   126e4:	000141d4 	.word	0x000141d4
   126e8:	00012601 	.word	0x00012601

000126ec <__sfp>:
   126ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126ee:	4b1e      	ldr	r3, [pc, #120]	; (12768 <__sfp+0x7c>)
   126f0:	0007      	movs	r7, r0
   126f2:	681e      	ldr	r6, [r3, #0]
   126f4:	69b3      	ldr	r3, [r6, #24]
   126f6:	2b00      	cmp	r3, #0
   126f8:	d102      	bne.n	12700 <__sfp+0x14>
   126fa:	0030      	movs	r0, r6
   126fc:	f7ff ffc2 	bl	12684 <__sinit>
   12700:	3648      	adds	r6, #72	; 0x48
   12702:	68b4      	ldr	r4, [r6, #8]
   12704:	6873      	ldr	r3, [r6, #4]
   12706:	3b01      	subs	r3, #1
   12708:	d504      	bpl.n	12714 <__sfp+0x28>
   1270a:	6833      	ldr	r3, [r6, #0]
   1270c:	2b00      	cmp	r3, #0
   1270e:	d007      	beq.n	12720 <__sfp+0x34>
   12710:	6836      	ldr	r6, [r6, #0]
   12712:	e7f6      	b.n	12702 <__sfp+0x16>
   12714:	220c      	movs	r2, #12
   12716:	5ea5      	ldrsh	r5, [r4, r2]
   12718:	2d00      	cmp	r5, #0
   1271a:	d00d      	beq.n	12738 <__sfp+0x4c>
   1271c:	3468      	adds	r4, #104	; 0x68
   1271e:	e7f2      	b.n	12706 <__sfp+0x1a>
   12720:	2104      	movs	r1, #4
   12722:	0038      	movs	r0, r7
   12724:	f7ff ff98 	bl	12658 <__sfmoreglue>
   12728:	6030      	str	r0, [r6, #0]
   1272a:	2800      	cmp	r0, #0
   1272c:	d1f0      	bne.n	12710 <__sfp+0x24>
   1272e:	230c      	movs	r3, #12
   12730:	0004      	movs	r4, r0
   12732:	603b      	str	r3, [r7, #0]
   12734:	0020      	movs	r0, r4
   12736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12738:	2301      	movs	r3, #1
   1273a:	0020      	movs	r0, r4
   1273c:	425b      	negs	r3, r3
   1273e:	81e3      	strh	r3, [r4, #14]
   12740:	3302      	adds	r3, #2
   12742:	81a3      	strh	r3, [r4, #12]
   12744:	6665      	str	r5, [r4, #100]	; 0x64
   12746:	6025      	str	r5, [r4, #0]
   12748:	60a5      	str	r5, [r4, #8]
   1274a:	6065      	str	r5, [r4, #4]
   1274c:	6125      	str	r5, [r4, #16]
   1274e:	6165      	str	r5, [r4, #20]
   12750:	61a5      	str	r5, [r4, #24]
   12752:	2208      	movs	r2, #8
   12754:	0029      	movs	r1, r5
   12756:	305c      	adds	r0, #92	; 0x5c
   12758:	f7fe f89e 	bl	10898 <memset>
   1275c:	6365      	str	r5, [r4, #52]	; 0x34
   1275e:	63a5      	str	r5, [r4, #56]	; 0x38
   12760:	64a5      	str	r5, [r4, #72]	; 0x48
   12762:	64e5      	str	r5, [r4, #76]	; 0x4c
   12764:	e7e6      	b.n	12734 <__sfp+0x48>
   12766:	46c0      	nop			; (mov r8, r8)
   12768:	000141d4 	.word	0x000141d4

0001276c <_fwalk_reent>:
   1276c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1276e:	0004      	movs	r4, r0
   12770:	0007      	movs	r7, r0
   12772:	2600      	movs	r6, #0
   12774:	9101      	str	r1, [sp, #4]
   12776:	3448      	adds	r4, #72	; 0x48
   12778:	2c00      	cmp	r4, #0
   1277a:	d101      	bne.n	12780 <_fwalk_reent+0x14>
   1277c:	0030      	movs	r0, r6
   1277e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12780:	6863      	ldr	r3, [r4, #4]
   12782:	68a5      	ldr	r5, [r4, #8]
   12784:	9300      	str	r3, [sp, #0]
   12786:	9b00      	ldr	r3, [sp, #0]
   12788:	3b01      	subs	r3, #1
   1278a:	9300      	str	r3, [sp, #0]
   1278c:	d501      	bpl.n	12792 <_fwalk_reent+0x26>
   1278e:	6824      	ldr	r4, [r4, #0]
   12790:	e7f2      	b.n	12778 <_fwalk_reent+0xc>
   12792:	89ab      	ldrh	r3, [r5, #12]
   12794:	2b01      	cmp	r3, #1
   12796:	d908      	bls.n	127aa <_fwalk_reent+0x3e>
   12798:	220e      	movs	r2, #14
   1279a:	5eab      	ldrsh	r3, [r5, r2]
   1279c:	3301      	adds	r3, #1
   1279e:	d004      	beq.n	127aa <_fwalk_reent+0x3e>
   127a0:	0029      	movs	r1, r5
   127a2:	0038      	movs	r0, r7
   127a4:	9b01      	ldr	r3, [sp, #4]
   127a6:	4798      	blx	r3
   127a8:	4306      	orrs	r6, r0
   127aa:	3568      	adds	r5, #104	; 0x68
   127ac:	e7eb      	b.n	12786 <_fwalk_reent+0x1a>
	...

000127b0 <_localeconv_r>:
   127b0:	4b03      	ldr	r3, [pc, #12]	; (127c0 <_localeconv_r+0x10>)
   127b2:	681b      	ldr	r3, [r3, #0]
   127b4:	6a18      	ldr	r0, [r3, #32]
   127b6:	2800      	cmp	r0, #0
   127b8:	d100      	bne.n	127bc <_localeconv_r+0xc>
   127ba:	4802      	ldr	r0, [pc, #8]	; (127c4 <_localeconv_r+0x14>)
   127bc:	30f0      	adds	r0, #240	; 0xf0
   127be:	4770      	bx	lr
   127c0:	200000a4 	.word	0x200000a4
   127c4:	20000108 	.word	0x20000108

000127c8 <__swhatbuf_r>:
   127c8:	b570      	push	{r4, r5, r6, lr}
   127ca:	000e      	movs	r6, r1
   127cc:	001d      	movs	r5, r3
   127ce:	230e      	movs	r3, #14
   127d0:	5ec9      	ldrsh	r1, [r1, r3]
   127d2:	b090      	sub	sp, #64	; 0x40
   127d4:	0014      	movs	r4, r2
   127d6:	2900      	cmp	r1, #0
   127d8:	da07      	bge.n	127ea <__swhatbuf_r+0x22>
   127da:	2300      	movs	r3, #0
   127dc:	602b      	str	r3, [r5, #0]
   127de:	89b3      	ldrh	r3, [r6, #12]
   127e0:	061b      	lsls	r3, r3, #24
   127e2:	d411      	bmi.n	12808 <__swhatbuf_r+0x40>
   127e4:	2380      	movs	r3, #128	; 0x80
   127e6:	00db      	lsls	r3, r3, #3
   127e8:	e00f      	b.n	1280a <__swhatbuf_r+0x42>
   127ea:	aa01      	add	r2, sp, #4
   127ec:	f000 fc38 	bl	13060 <_fstat_r>
   127f0:	2800      	cmp	r0, #0
   127f2:	dbf2      	blt.n	127da <__swhatbuf_r+0x12>
   127f4:	22f0      	movs	r2, #240	; 0xf0
   127f6:	9b02      	ldr	r3, [sp, #8]
   127f8:	0212      	lsls	r2, r2, #8
   127fa:	4013      	ands	r3, r2
   127fc:	4a05      	ldr	r2, [pc, #20]	; (12814 <__swhatbuf_r+0x4c>)
   127fe:	189b      	adds	r3, r3, r2
   12800:	425a      	negs	r2, r3
   12802:	4153      	adcs	r3, r2
   12804:	602b      	str	r3, [r5, #0]
   12806:	e7ed      	b.n	127e4 <__swhatbuf_r+0x1c>
   12808:	2340      	movs	r3, #64	; 0x40
   1280a:	2000      	movs	r0, #0
   1280c:	6023      	str	r3, [r4, #0]
   1280e:	b010      	add	sp, #64	; 0x40
   12810:	bd70      	pop	{r4, r5, r6, pc}
   12812:	46c0      	nop			; (mov r8, r8)
   12814:	ffffe000 	.word	0xffffe000

00012818 <__smakebuf_r>:
   12818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1281a:	2602      	movs	r6, #2
   1281c:	898b      	ldrh	r3, [r1, #12]
   1281e:	0005      	movs	r5, r0
   12820:	000c      	movs	r4, r1
   12822:	4233      	tst	r3, r6
   12824:	d006      	beq.n	12834 <__smakebuf_r+0x1c>
   12826:	0023      	movs	r3, r4
   12828:	3347      	adds	r3, #71	; 0x47
   1282a:	6023      	str	r3, [r4, #0]
   1282c:	6123      	str	r3, [r4, #16]
   1282e:	2301      	movs	r3, #1
   12830:	6163      	str	r3, [r4, #20]
   12832:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   12834:	ab01      	add	r3, sp, #4
   12836:	466a      	mov	r2, sp
   12838:	f7ff ffc6 	bl	127c8 <__swhatbuf_r>
   1283c:	9900      	ldr	r1, [sp, #0]
   1283e:	0007      	movs	r7, r0
   12840:	0028      	movs	r0, r5
   12842:	f7fe f87b 	bl	1093c <_malloc_r>
   12846:	2800      	cmp	r0, #0
   12848:	d108      	bne.n	1285c <__smakebuf_r+0x44>
   1284a:	220c      	movs	r2, #12
   1284c:	5ea3      	ldrsh	r3, [r4, r2]
   1284e:	059a      	lsls	r2, r3, #22
   12850:	d4ef      	bmi.n	12832 <__smakebuf_r+0x1a>
   12852:	2203      	movs	r2, #3
   12854:	4393      	bics	r3, r2
   12856:	431e      	orrs	r6, r3
   12858:	81a6      	strh	r6, [r4, #12]
   1285a:	e7e4      	b.n	12826 <__smakebuf_r+0xe>
   1285c:	4b0f      	ldr	r3, [pc, #60]	; (1289c <__smakebuf_r+0x84>)
   1285e:	62ab      	str	r3, [r5, #40]	; 0x28
   12860:	2380      	movs	r3, #128	; 0x80
   12862:	89a2      	ldrh	r2, [r4, #12]
   12864:	6020      	str	r0, [r4, #0]
   12866:	4313      	orrs	r3, r2
   12868:	81a3      	strh	r3, [r4, #12]
   1286a:	9b00      	ldr	r3, [sp, #0]
   1286c:	6120      	str	r0, [r4, #16]
   1286e:	6163      	str	r3, [r4, #20]
   12870:	9b01      	ldr	r3, [sp, #4]
   12872:	2b00      	cmp	r3, #0
   12874:	d00d      	beq.n	12892 <__smakebuf_r+0x7a>
   12876:	230e      	movs	r3, #14
   12878:	5ee1      	ldrsh	r1, [r4, r3]
   1287a:	0028      	movs	r0, r5
   1287c:	f000 fc02 	bl	13084 <_isatty_r>
   12880:	2800      	cmp	r0, #0
   12882:	d006      	beq.n	12892 <__smakebuf_r+0x7a>
   12884:	2203      	movs	r2, #3
   12886:	89a3      	ldrh	r3, [r4, #12]
   12888:	4393      	bics	r3, r2
   1288a:	001a      	movs	r2, r3
   1288c:	2301      	movs	r3, #1
   1288e:	4313      	orrs	r3, r2
   12890:	81a3      	strh	r3, [r4, #12]
   12892:	89a0      	ldrh	r0, [r4, #12]
   12894:	4338      	orrs	r0, r7
   12896:	81a0      	strh	r0, [r4, #12]
   12898:	e7cb      	b.n	12832 <__smakebuf_r+0x1a>
   1289a:	46c0      	nop			; (mov r8, r8)
   1289c:	00012601 	.word	0x00012601

000128a0 <memchr>:
   128a0:	b2c9      	uxtb	r1, r1
   128a2:	1882      	adds	r2, r0, r2
   128a4:	4290      	cmp	r0, r2
   128a6:	d101      	bne.n	128ac <memchr+0xc>
   128a8:	2000      	movs	r0, #0
   128aa:	4770      	bx	lr
   128ac:	7803      	ldrb	r3, [r0, #0]
   128ae:	428b      	cmp	r3, r1
   128b0:	d0fb      	beq.n	128aa <memchr+0xa>
   128b2:	3001      	adds	r0, #1
   128b4:	e7f6      	b.n	128a4 <memchr+0x4>

000128b6 <__malloc_lock>:
   128b6:	4770      	bx	lr

000128b8 <__malloc_unlock>:
   128b8:	4770      	bx	lr

000128ba <_Balloc>:
   128ba:	b570      	push	{r4, r5, r6, lr}
   128bc:	6a46      	ldr	r6, [r0, #36]	; 0x24
   128be:	0004      	movs	r4, r0
   128c0:	000d      	movs	r5, r1
   128c2:	2e00      	cmp	r6, #0
   128c4:	d107      	bne.n	128d6 <_Balloc+0x1c>
   128c6:	2010      	movs	r0, #16
   128c8:	f7fd ffa8 	bl	1081c <malloc>
   128cc:	6260      	str	r0, [r4, #36]	; 0x24
   128ce:	6046      	str	r6, [r0, #4]
   128d0:	6086      	str	r6, [r0, #8]
   128d2:	6006      	str	r6, [r0, #0]
   128d4:	60c6      	str	r6, [r0, #12]
   128d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   128d8:	68f3      	ldr	r3, [r6, #12]
   128da:	2b00      	cmp	r3, #0
   128dc:	d013      	beq.n	12906 <_Balloc+0x4c>
   128de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   128e0:	00aa      	lsls	r2, r5, #2
   128e2:	68db      	ldr	r3, [r3, #12]
   128e4:	189b      	adds	r3, r3, r2
   128e6:	6818      	ldr	r0, [r3, #0]
   128e8:	2800      	cmp	r0, #0
   128ea:	d118      	bne.n	1291e <_Balloc+0x64>
   128ec:	2101      	movs	r1, #1
   128ee:	000e      	movs	r6, r1
   128f0:	40ae      	lsls	r6, r5
   128f2:	1d72      	adds	r2, r6, #5
   128f4:	0092      	lsls	r2, r2, #2
   128f6:	0020      	movs	r0, r4
   128f8:	f000 fac2 	bl	12e80 <_calloc_r>
   128fc:	2800      	cmp	r0, #0
   128fe:	d00c      	beq.n	1291a <_Balloc+0x60>
   12900:	6045      	str	r5, [r0, #4]
   12902:	6086      	str	r6, [r0, #8]
   12904:	e00d      	b.n	12922 <_Balloc+0x68>
   12906:	2221      	movs	r2, #33	; 0x21
   12908:	2104      	movs	r1, #4
   1290a:	0020      	movs	r0, r4
   1290c:	f000 fab8 	bl	12e80 <_calloc_r>
   12910:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12912:	60f0      	str	r0, [r6, #12]
   12914:	68db      	ldr	r3, [r3, #12]
   12916:	2b00      	cmp	r3, #0
   12918:	d1e1      	bne.n	128de <_Balloc+0x24>
   1291a:	2000      	movs	r0, #0
   1291c:	bd70      	pop	{r4, r5, r6, pc}
   1291e:	6802      	ldr	r2, [r0, #0]
   12920:	601a      	str	r2, [r3, #0]
   12922:	2300      	movs	r3, #0
   12924:	6103      	str	r3, [r0, #16]
   12926:	60c3      	str	r3, [r0, #12]
   12928:	e7f8      	b.n	1291c <_Balloc+0x62>

0001292a <_Bfree>:
   1292a:	b570      	push	{r4, r5, r6, lr}
   1292c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1292e:	0006      	movs	r6, r0
   12930:	000d      	movs	r5, r1
   12932:	2c00      	cmp	r4, #0
   12934:	d107      	bne.n	12946 <_Bfree+0x1c>
   12936:	2010      	movs	r0, #16
   12938:	f7fd ff70 	bl	1081c <malloc>
   1293c:	6270      	str	r0, [r6, #36]	; 0x24
   1293e:	6044      	str	r4, [r0, #4]
   12940:	6084      	str	r4, [r0, #8]
   12942:	6004      	str	r4, [r0, #0]
   12944:	60c4      	str	r4, [r0, #12]
   12946:	2d00      	cmp	r5, #0
   12948:	d007      	beq.n	1295a <_Bfree+0x30>
   1294a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1294c:	686a      	ldr	r2, [r5, #4]
   1294e:	68db      	ldr	r3, [r3, #12]
   12950:	0092      	lsls	r2, r2, #2
   12952:	189b      	adds	r3, r3, r2
   12954:	681a      	ldr	r2, [r3, #0]
   12956:	602a      	str	r2, [r5, #0]
   12958:	601d      	str	r5, [r3, #0]
   1295a:	bd70      	pop	{r4, r5, r6, pc}

0001295c <__multadd>:
   1295c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1295e:	001e      	movs	r6, r3
   12960:	2314      	movs	r3, #20
   12962:	469c      	mov	ip, r3
   12964:	0007      	movs	r7, r0
   12966:	000c      	movs	r4, r1
   12968:	2000      	movs	r0, #0
   1296a:	690d      	ldr	r5, [r1, #16]
   1296c:	448c      	add	ip, r1
   1296e:	4663      	mov	r3, ip
   12970:	8819      	ldrh	r1, [r3, #0]
   12972:	681b      	ldr	r3, [r3, #0]
   12974:	4351      	muls	r1, r2
   12976:	0c1b      	lsrs	r3, r3, #16
   12978:	4353      	muls	r3, r2
   1297a:	1989      	adds	r1, r1, r6
   1297c:	0c0e      	lsrs	r6, r1, #16
   1297e:	199b      	adds	r3, r3, r6
   12980:	b289      	uxth	r1, r1
   12982:	0c1e      	lsrs	r6, r3, #16
   12984:	041b      	lsls	r3, r3, #16
   12986:	185b      	adds	r3, r3, r1
   12988:	4661      	mov	r1, ip
   1298a:	3001      	adds	r0, #1
   1298c:	c108      	stmia	r1!, {r3}
   1298e:	468c      	mov	ip, r1
   12990:	4285      	cmp	r5, r0
   12992:	dcec      	bgt.n	1296e <__multadd+0x12>
   12994:	2e00      	cmp	r6, #0
   12996:	d01b      	beq.n	129d0 <__multadd+0x74>
   12998:	68a3      	ldr	r3, [r4, #8]
   1299a:	429d      	cmp	r5, r3
   1299c:	db12      	blt.n	129c4 <__multadd+0x68>
   1299e:	6863      	ldr	r3, [r4, #4]
   129a0:	0038      	movs	r0, r7
   129a2:	1c59      	adds	r1, r3, #1
   129a4:	f7ff ff89 	bl	128ba <_Balloc>
   129a8:	0021      	movs	r1, r4
   129aa:	6923      	ldr	r3, [r4, #16]
   129ac:	9001      	str	r0, [sp, #4]
   129ae:	1c9a      	adds	r2, r3, #2
   129b0:	0092      	lsls	r2, r2, #2
   129b2:	310c      	adds	r1, #12
   129b4:	300c      	adds	r0, #12
   129b6:	f7fd ff66 	bl	10886 <memcpy>
   129ba:	0021      	movs	r1, r4
   129bc:	0038      	movs	r0, r7
   129be:	f7ff ffb4 	bl	1292a <_Bfree>
   129c2:	9c01      	ldr	r4, [sp, #4]
   129c4:	1d2b      	adds	r3, r5, #4
   129c6:	009b      	lsls	r3, r3, #2
   129c8:	18e3      	adds	r3, r4, r3
   129ca:	3501      	adds	r5, #1
   129cc:	605e      	str	r6, [r3, #4]
   129ce:	6125      	str	r5, [r4, #16]
   129d0:	0020      	movs	r0, r4
   129d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000129d4 <__hi0bits>:
   129d4:	0003      	movs	r3, r0
   129d6:	0c02      	lsrs	r2, r0, #16
   129d8:	2000      	movs	r0, #0
   129da:	4282      	cmp	r2, r0
   129dc:	d101      	bne.n	129e2 <__hi0bits+0xe>
   129de:	041b      	lsls	r3, r3, #16
   129e0:	3010      	adds	r0, #16
   129e2:	0e1a      	lsrs	r2, r3, #24
   129e4:	d101      	bne.n	129ea <__hi0bits+0x16>
   129e6:	3008      	adds	r0, #8
   129e8:	021b      	lsls	r3, r3, #8
   129ea:	0f1a      	lsrs	r2, r3, #28
   129ec:	d101      	bne.n	129f2 <__hi0bits+0x1e>
   129ee:	3004      	adds	r0, #4
   129f0:	011b      	lsls	r3, r3, #4
   129f2:	0f9a      	lsrs	r2, r3, #30
   129f4:	d101      	bne.n	129fa <__hi0bits+0x26>
   129f6:	3002      	adds	r0, #2
   129f8:	009b      	lsls	r3, r3, #2
   129fa:	2b00      	cmp	r3, #0
   129fc:	db03      	blt.n	12a06 <__hi0bits+0x32>
   129fe:	3001      	adds	r0, #1
   12a00:	005b      	lsls	r3, r3, #1
   12a02:	d400      	bmi.n	12a06 <__hi0bits+0x32>
   12a04:	2020      	movs	r0, #32
   12a06:	4770      	bx	lr

00012a08 <__lo0bits>:
   12a08:	2207      	movs	r2, #7
   12a0a:	6803      	ldr	r3, [r0, #0]
   12a0c:	b510      	push	{r4, lr}
   12a0e:	0001      	movs	r1, r0
   12a10:	401a      	ands	r2, r3
   12a12:	d00d      	beq.n	12a30 <__lo0bits+0x28>
   12a14:	2401      	movs	r4, #1
   12a16:	2000      	movs	r0, #0
   12a18:	4223      	tst	r3, r4
   12a1a:	d105      	bne.n	12a28 <__lo0bits+0x20>
   12a1c:	3002      	adds	r0, #2
   12a1e:	4203      	tst	r3, r0
   12a20:	d003      	beq.n	12a2a <__lo0bits+0x22>
   12a22:	40e3      	lsrs	r3, r4
   12a24:	0020      	movs	r0, r4
   12a26:	600b      	str	r3, [r1, #0]
   12a28:	bd10      	pop	{r4, pc}
   12a2a:	089b      	lsrs	r3, r3, #2
   12a2c:	600b      	str	r3, [r1, #0]
   12a2e:	e7fb      	b.n	12a28 <__lo0bits+0x20>
   12a30:	b29c      	uxth	r4, r3
   12a32:	0010      	movs	r0, r2
   12a34:	2c00      	cmp	r4, #0
   12a36:	d101      	bne.n	12a3c <__lo0bits+0x34>
   12a38:	2010      	movs	r0, #16
   12a3a:	0c1b      	lsrs	r3, r3, #16
   12a3c:	b2da      	uxtb	r2, r3
   12a3e:	2a00      	cmp	r2, #0
   12a40:	d101      	bne.n	12a46 <__lo0bits+0x3e>
   12a42:	3008      	adds	r0, #8
   12a44:	0a1b      	lsrs	r3, r3, #8
   12a46:	071a      	lsls	r2, r3, #28
   12a48:	d101      	bne.n	12a4e <__lo0bits+0x46>
   12a4a:	3004      	adds	r0, #4
   12a4c:	091b      	lsrs	r3, r3, #4
   12a4e:	079a      	lsls	r2, r3, #30
   12a50:	d101      	bne.n	12a56 <__lo0bits+0x4e>
   12a52:	3002      	adds	r0, #2
   12a54:	089b      	lsrs	r3, r3, #2
   12a56:	07da      	lsls	r2, r3, #31
   12a58:	d4e8      	bmi.n	12a2c <__lo0bits+0x24>
   12a5a:	085b      	lsrs	r3, r3, #1
   12a5c:	d001      	beq.n	12a62 <__lo0bits+0x5a>
   12a5e:	3001      	adds	r0, #1
   12a60:	e7e4      	b.n	12a2c <__lo0bits+0x24>
   12a62:	2020      	movs	r0, #32
   12a64:	e7e0      	b.n	12a28 <__lo0bits+0x20>

00012a66 <__i2b>:
   12a66:	b510      	push	{r4, lr}
   12a68:	000c      	movs	r4, r1
   12a6a:	2101      	movs	r1, #1
   12a6c:	f7ff ff25 	bl	128ba <_Balloc>
   12a70:	2301      	movs	r3, #1
   12a72:	6144      	str	r4, [r0, #20]
   12a74:	6103      	str	r3, [r0, #16]
   12a76:	bd10      	pop	{r4, pc}

00012a78 <__multiply>:
   12a78:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a7a:	690b      	ldr	r3, [r1, #16]
   12a7c:	0015      	movs	r5, r2
   12a7e:	6912      	ldr	r2, [r2, #16]
   12a80:	b089      	sub	sp, #36	; 0x24
   12a82:	000c      	movs	r4, r1
   12a84:	4293      	cmp	r3, r2
   12a86:	da01      	bge.n	12a8c <__multiply+0x14>
   12a88:	002c      	movs	r4, r5
   12a8a:	000d      	movs	r5, r1
   12a8c:	6927      	ldr	r7, [r4, #16]
   12a8e:	692e      	ldr	r6, [r5, #16]
   12a90:	68a2      	ldr	r2, [r4, #8]
   12a92:	19bb      	adds	r3, r7, r6
   12a94:	6861      	ldr	r1, [r4, #4]
   12a96:	9301      	str	r3, [sp, #4]
   12a98:	4293      	cmp	r3, r2
   12a9a:	dd00      	ble.n	12a9e <__multiply+0x26>
   12a9c:	3101      	adds	r1, #1
   12a9e:	f7ff ff0c 	bl	128ba <_Balloc>
   12aa2:	0003      	movs	r3, r0
   12aa4:	3314      	adds	r3, #20
   12aa6:	9300      	str	r3, [sp, #0]
   12aa8:	9a00      	ldr	r2, [sp, #0]
   12aaa:	19bb      	adds	r3, r7, r6
   12aac:	4694      	mov	ip, r2
   12aae:	009b      	lsls	r3, r3, #2
   12ab0:	449c      	add	ip, r3
   12ab2:	0013      	movs	r3, r2
   12ab4:	2200      	movs	r2, #0
   12ab6:	9004      	str	r0, [sp, #16]
   12ab8:	4563      	cmp	r3, ip
   12aba:	d31c      	bcc.n	12af6 <__multiply+0x7e>
   12abc:	002a      	movs	r2, r5
   12abe:	3414      	adds	r4, #20
   12ac0:	00bf      	lsls	r7, r7, #2
   12ac2:	19e3      	adds	r3, r4, r7
   12ac4:	3214      	adds	r2, #20
   12ac6:	00b6      	lsls	r6, r6, #2
   12ac8:	9305      	str	r3, [sp, #20]
   12aca:	1993      	adds	r3, r2, r6
   12acc:	9402      	str	r4, [sp, #8]
   12ace:	9306      	str	r3, [sp, #24]
   12ad0:	9b06      	ldr	r3, [sp, #24]
   12ad2:	429a      	cmp	r2, r3
   12ad4:	d311      	bcc.n	12afa <__multiply+0x82>
   12ad6:	9b01      	ldr	r3, [sp, #4]
   12ad8:	2b00      	cmp	r3, #0
   12ada:	dd06      	ble.n	12aea <__multiply+0x72>
   12adc:	2304      	movs	r3, #4
   12ade:	425b      	negs	r3, r3
   12ae0:	449c      	add	ip, r3
   12ae2:	4663      	mov	r3, ip
   12ae4:	681b      	ldr	r3, [r3, #0]
   12ae6:	2b00      	cmp	r3, #0
   12ae8:	d051      	beq.n	12b8e <__multiply+0x116>
   12aea:	9b04      	ldr	r3, [sp, #16]
   12aec:	9a01      	ldr	r2, [sp, #4]
   12aee:	0018      	movs	r0, r3
   12af0:	611a      	str	r2, [r3, #16]
   12af2:	b009      	add	sp, #36	; 0x24
   12af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12af6:	c304      	stmia	r3!, {r2}
   12af8:	e7de      	b.n	12ab8 <__multiply+0x40>
   12afa:	8814      	ldrh	r4, [r2, #0]
   12afc:	2c00      	cmp	r4, #0
   12afe:	d01e      	beq.n	12b3e <__multiply+0xc6>
   12b00:	2600      	movs	r6, #0
   12b02:	9d00      	ldr	r5, [sp, #0]
   12b04:	9f02      	ldr	r7, [sp, #8]
   12b06:	cf01      	ldmia	r7!, {r0}
   12b08:	9507      	str	r5, [sp, #28]
   12b0a:	cd08      	ldmia	r5!, {r3}
   12b0c:	9303      	str	r3, [sp, #12]
   12b0e:	b283      	uxth	r3, r0
   12b10:	4363      	muls	r3, r4
   12b12:	0019      	movs	r1, r3
   12b14:	466b      	mov	r3, sp
   12b16:	0c00      	lsrs	r0, r0, #16
   12b18:	899b      	ldrh	r3, [r3, #12]
   12b1a:	4360      	muls	r0, r4
   12b1c:	18cb      	adds	r3, r1, r3
   12b1e:	9903      	ldr	r1, [sp, #12]
   12b20:	199b      	adds	r3, r3, r6
   12b22:	0c09      	lsrs	r1, r1, #16
   12b24:	1841      	adds	r1, r0, r1
   12b26:	0c18      	lsrs	r0, r3, #16
   12b28:	1809      	adds	r1, r1, r0
   12b2a:	0c0e      	lsrs	r6, r1, #16
   12b2c:	b29b      	uxth	r3, r3
   12b2e:	0409      	lsls	r1, r1, #16
   12b30:	430b      	orrs	r3, r1
   12b32:	9907      	ldr	r1, [sp, #28]
   12b34:	600b      	str	r3, [r1, #0]
   12b36:	9b05      	ldr	r3, [sp, #20]
   12b38:	42bb      	cmp	r3, r7
   12b3a:	d8e4      	bhi.n	12b06 <__multiply+0x8e>
   12b3c:	602e      	str	r6, [r5, #0]
   12b3e:	6813      	ldr	r3, [r2, #0]
   12b40:	0c1b      	lsrs	r3, r3, #16
   12b42:	9303      	str	r3, [sp, #12]
   12b44:	d01e      	beq.n	12b84 <__multiply+0x10c>
   12b46:	2600      	movs	r6, #0
   12b48:	9b00      	ldr	r3, [sp, #0]
   12b4a:	9c02      	ldr	r4, [sp, #8]
   12b4c:	681b      	ldr	r3, [r3, #0]
   12b4e:	9800      	ldr	r0, [sp, #0]
   12b50:	0007      	movs	r7, r0
   12b52:	8821      	ldrh	r1, [r4, #0]
   12b54:	9d03      	ldr	r5, [sp, #12]
   12b56:	b29b      	uxth	r3, r3
   12b58:	4369      	muls	r1, r5
   12b5a:	c820      	ldmia	r0!, {r5}
   12b5c:	0c2d      	lsrs	r5, r5, #16
   12b5e:	1949      	adds	r1, r1, r5
   12b60:	198e      	adds	r6, r1, r6
   12b62:	0431      	lsls	r1, r6, #16
   12b64:	430b      	orrs	r3, r1
   12b66:	603b      	str	r3, [r7, #0]
   12b68:	cc08      	ldmia	r4!, {r3}
   12b6a:	9903      	ldr	r1, [sp, #12]
   12b6c:	0c1b      	lsrs	r3, r3, #16
   12b6e:	434b      	muls	r3, r1
   12b70:	6879      	ldr	r1, [r7, #4]
   12b72:	0c36      	lsrs	r6, r6, #16
   12b74:	b289      	uxth	r1, r1
   12b76:	185b      	adds	r3, r3, r1
   12b78:	9905      	ldr	r1, [sp, #20]
   12b7a:	199b      	adds	r3, r3, r6
   12b7c:	0c1e      	lsrs	r6, r3, #16
   12b7e:	42a1      	cmp	r1, r4
   12b80:	d8e6      	bhi.n	12b50 <__multiply+0xd8>
   12b82:	6003      	str	r3, [r0, #0]
   12b84:	9b00      	ldr	r3, [sp, #0]
   12b86:	3204      	adds	r2, #4
   12b88:	3304      	adds	r3, #4
   12b8a:	9300      	str	r3, [sp, #0]
   12b8c:	e7a0      	b.n	12ad0 <__multiply+0x58>
   12b8e:	9b01      	ldr	r3, [sp, #4]
   12b90:	3b01      	subs	r3, #1
   12b92:	9301      	str	r3, [sp, #4]
   12b94:	e79f      	b.n	12ad6 <__multiply+0x5e>
	...

00012b98 <__pow5mult>:
   12b98:	2303      	movs	r3, #3
   12b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b9c:	4013      	ands	r3, r2
   12b9e:	0005      	movs	r5, r0
   12ba0:	000e      	movs	r6, r1
   12ba2:	0014      	movs	r4, r2
   12ba4:	2b00      	cmp	r3, #0
   12ba6:	d008      	beq.n	12bba <__pow5mult+0x22>
   12ba8:	4922      	ldr	r1, [pc, #136]	; (12c34 <__pow5mult+0x9c>)
   12baa:	3b01      	subs	r3, #1
   12bac:	009a      	lsls	r2, r3, #2
   12bae:	5852      	ldr	r2, [r2, r1]
   12bb0:	2300      	movs	r3, #0
   12bb2:	0031      	movs	r1, r6
   12bb4:	f7ff fed2 	bl	1295c <__multadd>
   12bb8:	0006      	movs	r6, r0
   12bba:	10a3      	asrs	r3, r4, #2
   12bbc:	9301      	str	r3, [sp, #4]
   12bbe:	d036      	beq.n	12c2e <__pow5mult+0x96>
   12bc0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   12bc2:	2c00      	cmp	r4, #0
   12bc4:	d107      	bne.n	12bd6 <__pow5mult+0x3e>
   12bc6:	2010      	movs	r0, #16
   12bc8:	f7fd fe28 	bl	1081c <malloc>
   12bcc:	6268      	str	r0, [r5, #36]	; 0x24
   12bce:	6044      	str	r4, [r0, #4]
   12bd0:	6084      	str	r4, [r0, #8]
   12bd2:	6004      	str	r4, [r0, #0]
   12bd4:	60c4      	str	r4, [r0, #12]
   12bd6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   12bd8:	68bc      	ldr	r4, [r7, #8]
   12bda:	2c00      	cmp	r4, #0
   12bdc:	d107      	bne.n	12bee <__pow5mult+0x56>
   12bde:	4916      	ldr	r1, [pc, #88]	; (12c38 <__pow5mult+0xa0>)
   12be0:	0028      	movs	r0, r5
   12be2:	f7ff ff40 	bl	12a66 <__i2b>
   12be6:	2300      	movs	r3, #0
   12be8:	0004      	movs	r4, r0
   12bea:	60b8      	str	r0, [r7, #8]
   12bec:	6003      	str	r3, [r0, #0]
   12bee:	2201      	movs	r2, #1
   12bf0:	9b01      	ldr	r3, [sp, #4]
   12bf2:	4213      	tst	r3, r2
   12bf4:	d00a      	beq.n	12c0c <__pow5mult+0x74>
   12bf6:	0031      	movs	r1, r6
   12bf8:	0022      	movs	r2, r4
   12bfa:	0028      	movs	r0, r5
   12bfc:	f7ff ff3c 	bl	12a78 <__multiply>
   12c00:	0007      	movs	r7, r0
   12c02:	0031      	movs	r1, r6
   12c04:	0028      	movs	r0, r5
   12c06:	f7ff fe90 	bl	1292a <_Bfree>
   12c0a:	003e      	movs	r6, r7
   12c0c:	9b01      	ldr	r3, [sp, #4]
   12c0e:	105b      	asrs	r3, r3, #1
   12c10:	9301      	str	r3, [sp, #4]
   12c12:	d00c      	beq.n	12c2e <__pow5mult+0x96>
   12c14:	6820      	ldr	r0, [r4, #0]
   12c16:	2800      	cmp	r0, #0
   12c18:	d107      	bne.n	12c2a <__pow5mult+0x92>
   12c1a:	0022      	movs	r2, r4
   12c1c:	0021      	movs	r1, r4
   12c1e:	0028      	movs	r0, r5
   12c20:	f7ff ff2a 	bl	12a78 <__multiply>
   12c24:	2300      	movs	r3, #0
   12c26:	6020      	str	r0, [r4, #0]
   12c28:	6003      	str	r3, [r0, #0]
   12c2a:	0004      	movs	r4, r0
   12c2c:	e7df      	b.n	12bee <__pow5mult+0x56>
   12c2e:	0030      	movs	r0, r6
   12c30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12c32:	46c0      	nop			; (mov r8, r8)
   12c34:	00014488 	.word	0x00014488
   12c38:	00000271 	.word	0x00000271

00012c3c <__lshift>:
   12c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c3e:	000d      	movs	r5, r1
   12c40:	0017      	movs	r7, r2
   12c42:	692b      	ldr	r3, [r5, #16]
   12c44:	1154      	asrs	r4, r2, #5
   12c46:	b085      	sub	sp, #20
   12c48:	18e3      	adds	r3, r4, r3
   12c4a:	9302      	str	r3, [sp, #8]
   12c4c:	3301      	adds	r3, #1
   12c4e:	9301      	str	r3, [sp, #4]
   12c50:	6849      	ldr	r1, [r1, #4]
   12c52:	68ab      	ldr	r3, [r5, #8]
   12c54:	9003      	str	r0, [sp, #12]
   12c56:	9a01      	ldr	r2, [sp, #4]
   12c58:	4293      	cmp	r3, r2
   12c5a:	db34      	blt.n	12cc6 <__lshift+0x8a>
   12c5c:	9803      	ldr	r0, [sp, #12]
   12c5e:	f7ff fe2c 	bl	128ba <_Balloc>
   12c62:	2300      	movs	r3, #0
   12c64:	0002      	movs	r2, r0
   12c66:	0006      	movs	r6, r0
   12c68:	0019      	movs	r1, r3
   12c6a:	3214      	adds	r2, #20
   12c6c:	42a3      	cmp	r3, r4
   12c6e:	db2d      	blt.n	12ccc <__lshift+0x90>
   12c70:	43e3      	mvns	r3, r4
   12c72:	17db      	asrs	r3, r3, #31
   12c74:	401c      	ands	r4, r3
   12c76:	002b      	movs	r3, r5
   12c78:	211f      	movs	r1, #31
   12c7a:	00a4      	lsls	r4, r4, #2
   12c7c:	1914      	adds	r4, r2, r4
   12c7e:	692a      	ldr	r2, [r5, #16]
   12c80:	3314      	adds	r3, #20
   12c82:	0092      	lsls	r2, r2, #2
   12c84:	189a      	adds	r2, r3, r2
   12c86:	400f      	ands	r7, r1
   12c88:	d024      	beq.n	12cd4 <__lshift+0x98>
   12c8a:	3101      	adds	r1, #1
   12c8c:	1bc9      	subs	r1, r1, r7
   12c8e:	468c      	mov	ip, r1
   12c90:	2100      	movs	r1, #0
   12c92:	6818      	ldr	r0, [r3, #0]
   12c94:	40b8      	lsls	r0, r7
   12c96:	4301      	orrs	r1, r0
   12c98:	4660      	mov	r0, ip
   12c9a:	6021      	str	r1, [r4, #0]
   12c9c:	cb02      	ldmia	r3!, {r1}
   12c9e:	3404      	adds	r4, #4
   12ca0:	40c1      	lsrs	r1, r0
   12ca2:	429a      	cmp	r2, r3
   12ca4:	d8f5      	bhi.n	12c92 <__lshift+0x56>
   12ca6:	6021      	str	r1, [r4, #0]
   12ca8:	2900      	cmp	r1, #0
   12caa:	d002      	beq.n	12cb2 <__lshift+0x76>
   12cac:	9b02      	ldr	r3, [sp, #8]
   12cae:	3302      	adds	r3, #2
   12cb0:	9301      	str	r3, [sp, #4]
   12cb2:	9b01      	ldr	r3, [sp, #4]
   12cb4:	9803      	ldr	r0, [sp, #12]
   12cb6:	3b01      	subs	r3, #1
   12cb8:	6133      	str	r3, [r6, #16]
   12cba:	0029      	movs	r1, r5
   12cbc:	f7ff fe35 	bl	1292a <_Bfree>
   12cc0:	0030      	movs	r0, r6
   12cc2:	b005      	add	sp, #20
   12cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cc6:	3101      	adds	r1, #1
   12cc8:	005b      	lsls	r3, r3, #1
   12cca:	e7c4      	b.n	12c56 <__lshift+0x1a>
   12ccc:	0098      	lsls	r0, r3, #2
   12cce:	5011      	str	r1, [r2, r0]
   12cd0:	3301      	adds	r3, #1
   12cd2:	e7cb      	b.n	12c6c <__lshift+0x30>
   12cd4:	cb02      	ldmia	r3!, {r1}
   12cd6:	c402      	stmia	r4!, {r1}
   12cd8:	429a      	cmp	r2, r3
   12cda:	d8fb      	bhi.n	12cd4 <__lshift+0x98>
   12cdc:	e7e9      	b.n	12cb2 <__lshift+0x76>

00012cde <__mcmp>:
   12cde:	690a      	ldr	r2, [r1, #16]
   12ce0:	6903      	ldr	r3, [r0, #16]
   12ce2:	b530      	push	{r4, r5, lr}
   12ce4:	1a9b      	subs	r3, r3, r2
   12ce6:	d10e      	bne.n	12d06 <__mcmp+0x28>
   12ce8:	0092      	lsls	r2, r2, #2
   12cea:	3014      	adds	r0, #20
   12cec:	3114      	adds	r1, #20
   12cee:	1884      	adds	r4, r0, r2
   12cf0:	1889      	adds	r1, r1, r2
   12cf2:	3c04      	subs	r4, #4
   12cf4:	3904      	subs	r1, #4
   12cf6:	6822      	ldr	r2, [r4, #0]
   12cf8:	680d      	ldr	r5, [r1, #0]
   12cfa:	42aa      	cmp	r2, r5
   12cfc:	d005      	beq.n	12d0a <__mcmp+0x2c>
   12cfe:	42aa      	cmp	r2, r5
   12d00:	4192      	sbcs	r2, r2
   12d02:	2301      	movs	r3, #1
   12d04:	4313      	orrs	r3, r2
   12d06:	0018      	movs	r0, r3
   12d08:	bd30      	pop	{r4, r5, pc}
   12d0a:	42a0      	cmp	r0, r4
   12d0c:	d3f1      	bcc.n	12cf2 <__mcmp+0x14>
   12d0e:	e7fa      	b.n	12d06 <__mcmp+0x28>

00012d10 <__mdiff>:
   12d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d12:	000d      	movs	r5, r1
   12d14:	b085      	sub	sp, #20
   12d16:	0007      	movs	r7, r0
   12d18:	0011      	movs	r1, r2
   12d1a:	0028      	movs	r0, r5
   12d1c:	0014      	movs	r4, r2
   12d1e:	f7ff ffde 	bl	12cde <__mcmp>
   12d22:	1e06      	subs	r6, r0, #0
   12d24:	d108      	bne.n	12d38 <__mdiff+0x28>
   12d26:	0001      	movs	r1, r0
   12d28:	0038      	movs	r0, r7
   12d2a:	f7ff fdc6 	bl	128ba <_Balloc>
   12d2e:	2301      	movs	r3, #1
   12d30:	6146      	str	r6, [r0, #20]
   12d32:	6103      	str	r3, [r0, #16]
   12d34:	b005      	add	sp, #20
   12d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d38:	2301      	movs	r3, #1
   12d3a:	9301      	str	r3, [sp, #4]
   12d3c:	2800      	cmp	r0, #0
   12d3e:	db04      	blt.n	12d4a <__mdiff+0x3a>
   12d40:	0023      	movs	r3, r4
   12d42:	002c      	movs	r4, r5
   12d44:	001d      	movs	r5, r3
   12d46:	2300      	movs	r3, #0
   12d48:	9301      	str	r3, [sp, #4]
   12d4a:	6861      	ldr	r1, [r4, #4]
   12d4c:	0038      	movs	r0, r7
   12d4e:	f7ff fdb4 	bl	128ba <_Balloc>
   12d52:	002f      	movs	r7, r5
   12d54:	2200      	movs	r2, #0
   12d56:	9b01      	ldr	r3, [sp, #4]
   12d58:	6926      	ldr	r6, [r4, #16]
   12d5a:	60c3      	str	r3, [r0, #12]
   12d5c:	3414      	adds	r4, #20
   12d5e:	00b3      	lsls	r3, r6, #2
   12d60:	18e3      	adds	r3, r4, r3
   12d62:	9302      	str	r3, [sp, #8]
   12d64:	692b      	ldr	r3, [r5, #16]
   12d66:	3714      	adds	r7, #20
   12d68:	009b      	lsls	r3, r3, #2
   12d6a:	18fb      	adds	r3, r7, r3
   12d6c:	9303      	str	r3, [sp, #12]
   12d6e:	0003      	movs	r3, r0
   12d70:	4694      	mov	ip, r2
   12d72:	3314      	adds	r3, #20
   12d74:	cc20      	ldmia	r4!, {r5}
   12d76:	cf04      	ldmia	r7!, {r2}
   12d78:	9201      	str	r2, [sp, #4]
   12d7a:	b2aa      	uxth	r2, r5
   12d7c:	4494      	add	ip, r2
   12d7e:	466a      	mov	r2, sp
   12d80:	4661      	mov	r1, ip
   12d82:	8892      	ldrh	r2, [r2, #4]
   12d84:	0c2d      	lsrs	r5, r5, #16
   12d86:	1a8a      	subs	r2, r1, r2
   12d88:	9901      	ldr	r1, [sp, #4]
   12d8a:	0c09      	lsrs	r1, r1, #16
   12d8c:	1a69      	subs	r1, r5, r1
   12d8e:	1415      	asrs	r5, r2, #16
   12d90:	1949      	adds	r1, r1, r5
   12d92:	140d      	asrs	r5, r1, #16
   12d94:	b292      	uxth	r2, r2
   12d96:	0409      	lsls	r1, r1, #16
   12d98:	430a      	orrs	r2, r1
   12d9a:	601a      	str	r2, [r3, #0]
   12d9c:	9a03      	ldr	r2, [sp, #12]
   12d9e:	46ac      	mov	ip, r5
   12da0:	3304      	adds	r3, #4
   12da2:	42ba      	cmp	r2, r7
   12da4:	d8e6      	bhi.n	12d74 <__mdiff+0x64>
   12da6:	9902      	ldr	r1, [sp, #8]
   12da8:	001a      	movs	r2, r3
   12daa:	428c      	cmp	r4, r1
   12dac:	d305      	bcc.n	12dba <__mdiff+0xaa>
   12dae:	3a04      	subs	r2, #4
   12db0:	6813      	ldr	r3, [r2, #0]
   12db2:	2b00      	cmp	r3, #0
   12db4:	d00e      	beq.n	12dd4 <__mdiff+0xc4>
   12db6:	6106      	str	r6, [r0, #16]
   12db8:	e7bc      	b.n	12d34 <__mdiff+0x24>
   12dba:	cc04      	ldmia	r4!, {r2}
   12dbc:	b291      	uxth	r1, r2
   12dbe:	4461      	add	r1, ip
   12dc0:	140d      	asrs	r5, r1, #16
   12dc2:	0c12      	lsrs	r2, r2, #16
   12dc4:	1952      	adds	r2, r2, r5
   12dc6:	1415      	asrs	r5, r2, #16
   12dc8:	b289      	uxth	r1, r1
   12dca:	0412      	lsls	r2, r2, #16
   12dcc:	430a      	orrs	r2, r1
   12dce:	46ac      	mov	ip, r5
   12dd0:	c304      	stmia	r3!, {r2}
   12dd2:	e7e8      	b.n	12da6 <__mdiff+0x96>
   12dd4:	3e01      	subs	r6, #1
   12dd6:	e7ea      	b.n	12dae <__mdiff+0x9e>

00012dd8 <__d2b>:
   12dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12dda:	001d      	movs	r5, r3
   12ddc:	2101      	movs	r1, #1
   12dde:	9f08      	ldr	r7, [sp, #32]
   12de0:	0014      	movs	r4, r2
   12de2:	f7ff fd6a 	bl	128ba <_Balloc>
   12de6:	032b      	lsls	r3, r5, #12
   12de8:	006d      	lsls	r5, r5, #1
   12dea:	0006      	movs	r6, r0
   12dec:	0b1b      	lsrs	r3, r3, #12
   12dee:	0d6d      	lsrs	r5, r5, #21
   12df0:	d124      	bne.n	12e3c <__d2b+0x64>
   12df2:	9301      	str	r3, [sp, #4]
   12df4:	2c00      	cmp	r4, #0
   12df6:	d027      	beq.n	12e48 <__d2b+0x70>
   12df8:	4668      	mov	r0, sp
   12dfa:	9400      	str	r4, [sp, #0]
   12dfc:	f7ff fe04 	bl	12a08 <__lo0bits>
   12e00:	9c00      	ldr	r4, [sp, #0]
   12e02:	2800      	cmp	r0, #0
   12e04:	d01e      	beq.n	12e44 <__d2b+0x6c>
   12e06:	9b01      	ldr	r3, [sp, #4]
   12e08:	2120      	movs	r1, #32
   12e0a:	001a      	movs	r2, r3
   12e0c:	1a09      	subs	r1, r1, r0
   12e0e:	408a      	lsls	r2, r1
   12e10:	40c3      	lsrs	r3, r0
   12e12:	4322      	orrs	r2, r4
   12e14:	6172      	str	r2, [r6, #20]
   12e16:	9301      	str	r3, [sp, #4]
   12e18:	9c01      	ldr	r4, [sp, #4]
   12e1a:	61b4      	str	r4, [r6, #24]
   12e1c:	1e63      	subs	r3, r4, #1
   12e1e:	419c      	sbcs	r4, r3
   12e20:	3401      	adds	r4, #1
   12e22:	6134      	str	r4, [r6, #16]
   12e24:	2d00      	cmp	r5, #0
   12e26:	d018      	beq.n	12e5a <__d2b+0x82>
   12e28:	4b12      	ldr	r3, [pc, #72]	; (12e74 <__d2b+0x9c>)
   12e2a:	18ed      	adds	r5, r5, r3
   12e2c:	2335      	movs	r3, #53	; 0x35
   12e2e:	182d      	adds	r5, r5, r0
   12e30:	603d      	str	r5, [r7, #0]
   12e32:	1a18      	subs	r0, r3, r0
   12e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e36:	6018      	str	r0, [r3, #0]
   12e38:	0030      	movs	r0, r6
   12e3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12e3c:	2280      	movs	r2, #128	; 0x80
   12e3e:	0352      	lsls	r2, r2, #13
   12e40:	4313      	orrs	r3, r2
   12e42:	e7d6      	b.n	12df2 <__d2b+0x1a>
   12e44:	6174      	str	r4, [r6, #20]
   12e46:	e7e7      	b.n	12e18 <__d2b+0x40>
   12e48:	a801      	add	r0, sp, #4
   12e4a:	f7ff fddd 	bl	12a08 <__lo0bits>
   12e4e:	2401      	movs	r4, #1
   12e50:	9b01      	ldr	r3, [sp, #4]
   12e52:	6134      	str	r4, [r6, #16]
   12e54:	6173      	str	r3, [r6, #20]
   12e56:	3020      	adds	r0, #32
   12e58:	e7e4      	b.n	12e24 <__d2b+0x4c>
   12e5a:	4b07      	ldr	r3, [pc, #28]	; (12e78 <__d2b+0xa0>)
   12e5c:	18c0      	adds	r0, r0, r3
   12e5e:	4b07      	ldr	r3, [pc, #28]	; (12e7c <__d2b+0xa4>)
   12e60:	6038      	str	r0, [r7, #0]
   12e62:	18e3      	adds	r3, r4, r3
   12e64:	009b      	lsls	r3, r3, #2
   12e66:	18f3      	adds	r3, r6, r3
   12e68:	6958      	ldr	r0, [r3, #20]
   12e6a:	f7ff fdb3 	bl	129d4 <__hi0bits>
   12e6e:	0164      	lsls	r4, r4, #5
   12e70:	1a20      	subs	r0, r4, r0
   12e72:	e7df      	b.n	12e34 <__d2b+0x5c>
   12e74:	fffffbcd 	.word	0xfffffbcd
   12e78:	fffffbce 	.word	0xfffffbce
   12e7c:	3fffffff 	.word	0x3fffffff

00012e80 <_calloc_r>:
   12e80:	434a      	muls	r2, r1
   12e82:	b570      	push	{r4, r5, r6, lr}
   12e84:	0011      	movs	r1, r2
   12e86:	0014      	movs	r4, r2
   12e88:	f7fd fd58 	bl	1093c <_malloc_r>
   12e8c:	1e05      	subs	r5, r0, #0
   12e8e:	d003      	beq.n	12e98 <_calloc_r+0x18>
   12e90:	0022      	movs	r2, r4
   12e92:	2100      	movs	r1, #0
   12e94:	f7fd fd00 	bl	10898 <memset>
   12e98:	0028      	movs	r0, r5
   12e9a:	bd70      	pop	{r4, r5, r6, pc}

00012e9c <_realloc_r>:
   12e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e9e:	0007      	movs	r7, r0
   12ea0:	000d      	movs	r5, r1
   12ea2:	0016      	movs	r6, r2
   12ea4:	2900      	cmp	r1, #0
   12ea6:	d105      	bne.n	12eb4 <_realloc_r+0x18>
   12ea8:	0011      	movs	r1, r2
   12eaa:	f7fd fd47 	bl	1093c <_malloc_r>
   12eae:	0004      	movs	r4, r0
   12eb0:	0020      	movs	r0, r4
   12eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12eb4:	2a00      	cmp	r2, #0
   12eb6:	d103      	bne.n	12ec0 <_realloc_r+0x24>
   12eb8:	f7fd fcf6 	bl	108a8 <_free_r>
   12ebc:	0034      	movs	r4, r6
   12ebe:	e7f7      	b.n	12eb0 <_realloc_r+0x14>
   12ec0:	f000 f906 	bl	130d0 <_malloc_usable_size_r>
   12ec4:	002c      	movs	r4, r5
   12ec6:	4286      	cmp	r6, r0
   12ec8:	d9f2      	bls.n	12eb0 <_realloc_r+0x14>
   12eca:	0031      	movs	r1, r6
   12ecc:	0038      	movs	r0, r7
   12ece:	f7fd fd35 	bl	1093c <_malloc_r>
   12ed2:	1e04      	subs	r4, r0, #0
   12ed4:	d0ec      	beq.n	12eb0 <_realloc_r+0x14>
   12ed6:	0029      	movs	r1, r5
   12ed8:	0032      	movs	r2, r6
   12eda:	f7fd fcd4 	bl	10886 <memcpy>
   12ede:	0029      	movs	r1, r5
   12ee0:	0038      	movs	r0, r7
   12ee2:	f7fd fce1 	bl	108a8 <_free_r>
   12ee6:	e7e3      	b.n	12eb0 <_realloc_r+0x14>

00012ee8 <_raise_r>:
   12ee8:	b570      	push	{r4, r5, r6, lr}
   12eea:	0004      	movs	r4, r0
   12eec:	000d      	movs	r5, r1
   12eee:	291f      	cmp	r1, #31
   12ef0:	d904      	bls.n	12efc <_raise_r+0x14>
   12ef2:	2316      	movs	r3, #22
   12ef4:	6003      	str	r3, [r0, #0]
   12ef6:	2001      	movs	r0, #1
   12ef8:	4240      	negs	r0, r0
   12efa:	bd70      	pop	{r4, r5, r6, pc}
   12efc:	6c43      	ldr	r3, [r0, #68]	; 0x44
   12efe:	2b00      	cmp	r3, #0
   12f00:	d004      	beq.n	12f0c <_raise_r+0x24>
   12f02:	008a      	lsls	r2, r1, #2
   12f04:	189b      	adds	r3, r3, r2
   12f06:	681a      	ldr	r2, [r3, #0]
   12f08:	2a00      	cmp	r2, #0
   12f0a:	d108      	bne.n	12f1e <_raise_r+0x36>
   12f0c:	0020      	movs	r0, r4
   12f0e:	f000 f831 	bl	12f74 <_getpid_r>
   12f12:	002a      	movs	r2, r5
   12f14:	0001      	movs	r1, r0
   12f16:	0020      	movs	r0, r4
   12f18:	f000 f81a 	bl	12f50 <_kill_r>
   12f1c:	e7ed      	b.n	12efa <_raise_r+0x12>
   12f1e:	2000      	movs	r0, #0
   12f20:	2a01      	cmp	r2, #1
   12f22:	d0ea      	beq.n	12efa <_raise_r+0x12>
   12f24:	1c51      	adds	r1, r2, #1
   12f26:	d103      	bne.n	12f30 <_raise_r+0x48>
   12f28:	2316      	movs	r3, #22
   12f2a:	3001      	adds	r0, #1
   12f2c:	6023      	str	r3, [r4, #0]
   12f2e:	e7e4      	b.n	12efa <_raise_r+0x12>
   12f30:	2400      	movs	r4, #0
   12f32:	0028      	movs	r0, r5
   12f34:	601c      	str	r4, [r3, #0]
   12f36:	4790      	blx	r2
   12f38:	0020      	movs	r0, r4
   12f3a:	e7de      	b.n	12efa <_raise_r+0x12>

00012f3c <raise>:
   12f3c:	b510      	push	{r4, lr}
   12f3e:	4b03      	ldr	r3, [pc, #12]	; (12f4c <raise+0x10>)
   12f40:	0001      	movs	r1, r0
   12f42:	6818      	ldr	r0, [r3, #0]
   12f44:	f7ff ffd0 	bl	12ee8 <_raise_r>
   12f48:	bd10      	pop	{r4, pc}
   12f4a:	46c0      	nop			; (mov r8, r8)
   12f4c:	200000a4 	.word	0x200000a4

00012f50 <_kill_r>:
   12f50:	2300      	movs	r3, #0
   12f52:	b570      	push	{r4, r5, r6, lr}
   12f54:	4c06      	ldr	r4, [pc, #24]	; (12f70 <_kill_r+0x20>)
   12f56:	0005      	movs	r5, r0
   12f58:	0008      	movs	r0, r1
   12f5a:	0011      	movs	r1, r2
   12f5c:	6023      	str	r3, [r4, #0]
   12f5e:	f000 f93f 	bl	131e0 <_kill>
   12f62:	1c43      	adds	r3, r0, #1
   12f64:	d103      	bne.n	12f6e <_kill_r+0x1e>
   12f66:	6823      	ldr	r3, [r4, #0]
   12f68:	2b00      	cmp	r3, #0
   12f6a:	d000      	beq.n	12f6e <_kill_r+0x1e>
   12f6c:	602b      	str	r3, [r5, #0]
   12f6e:	bd70      	pop	{r4, r5, r6, pc}
   12f70:	20000f84 	.word	0x20000f84

00012f74 <_getpid_r>:
   12f74:	b510      	push	{r4, lr}
   12f76:	f000 f923 	bl	131c0 <_getpid>
   12f7a:	bd10      	pop	{r4, pc}

00012f7c <__sread>:
   12f7c:	b570      	push	{r4, r5, r6, lr}
   12f7e:	000c      	movs	r4, r1
   12f80:	250e      	movs	r5, #14
   12f82:	5f49      	ldrsh	r1, [r1, r5]
   12f84:	f000 f8ac 	bl	130e0 <_read_r>
   12f88:	2800      	cmp	r0, #0
   12f8a:	db03      	blt.n	12f94 <__sread+0x18>
   12f8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12f8e:	181b      	adds	r3, r3, r0
   12f90:	6563      	str	r3, [r4, #84]	; 0x54
   12f92:	bd70      	pop	{r4, r5, r6, pc}
   12f94:	89a3      	ldrh	r3, [r4, #12]
   12f96:	4a02      	ldr	r2, [pc, #8]	; (12fa0 <__sread+0x24>)
   12f98:	4013      	ands	r3, r2
   12f9a:	81a3      	strh	r3, [r4, #12]
   12f9c:	e7f9      	b.n	12f92 <__sread+0x16>
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	ffffefff 	.word	0xffffefff

00012fa4 <__swrite>:
   12fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12fa6:	001f      	movs	r7, r3
   12fa8:	898b      	ldrh	r3, [r1, #12]
   12faa:	0005      	movs	r5, r0
   12fac:	000c      	movs	r4, r1
   12fae:	0016      	movs	r6, r2
   12fb0:	05db      	lsls	r3, r3, #23
   12fb2:	d505      	bpl.n	12fc0 <__swrite+0x1c>
   12fb4:	230e      	movs	r3, #14
   12fb6:	5ec9      	ldrsh	r1, [r1, r3]
   12fb8:	2200      	movs	r2, #0
   12fba:	2302      	movs	r3, #2
   12fbc:	f000 f874 	bl	130a8 <_lseek_r>
   12fc0:	89a3      	ldrh	r3, [r4, #12]
   12fc2:	4a05      	ldr	r2, [pc, #20]	; (12fd8 <__swrite+0x34>)
   12fc4:	0028      	movs	r0, r5
   12fc6:	4013      	ands	r3, r2
   12fc8:	81a3      	strh	r3, [r4, #12]
   12fca:	0032      	movs	r2, r6
   12fcc:	230e      	movs	r3, #14
   12fce:	5ee1      	ldrsh	r1, [r4, r3]
   12fd0:	003b      	movs	r3, r7
   12fd2:	f000 f81f 	bl	13014 <_write_r>
   12fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12fd8:	ffffefff 	.word	0xffffefff

00012fdc <__sseek>:
   12fdc:	b570      	push	{r4, r5, r6, lr}
   12fde:	000c      	movs	r4, r1
   12fe0:	250e      	movs	r5, #14
   12fe2:	5f49      	ldrsh	r1, [r1, r5]
   12fe4:	f000 f860 	bl	130a8 <_lseek_r>
   12fe8:	89a3      	ldrh	r3, [r4, #12]
   12fea:	1c42      	adds	r2, r0, #1
   12fec:	d103      	bne.n	12ff6 <__sseek+0x1a>
   12fee:	4a05      	ldr	r2, [pc, #20]	; (13004 <__sseek+0x28>)
   12ff0:	4013      	ands	r3, r2
   12ff2:	81a3      	strh	r3, [r4, #12]
   12ff4:	bd70      	pop	{r4, r5, r6, pc}
   12ff6:	2280      	movs	r2, #128	; 0x80
   12ff8:	0152      	lsls	r2, r2, #5
   12ffa:	4313      	orrs	r3, r2
   12ffc:	81a3      	strh	r3, [r4, #12]
   12ffe:	6560      	str	r0, [r4, #84]	; 0x54
   13000:	e7f8      	b.n	12ff4 <__sseek+0x18>
   13002:	46c0      	nop			; (mov r8, r8)
   13004:	ffffefff 	.word	0xffffefff

00013008 <__sclose>:
   13008:	b510      	push	{r4, lr}
   1300a:	230e      	movs	r3, #14
   1300c:	5ec9      	ldrsh	r1, [r1, r3]
   1300e:	f000 f815 	bl	1303c <_close_r>
   13012:	bd10      	pop	{r4, pc}

00013014 <_write_r>:
   13014:	b570      	push	{r4, r5, r6, lr}
   13016:	0005      	movs	r5, r0
   13018:	0008      	movs	r0, r1
   1301a:	0011      	movs	r1, r2
   1301c:	2200      	movs	r2, #0
   1301e:	4c06      	ldr	r4, [pc, #24]	; (13038 <_write_r+0x24>)
   13020:	6022      	str	r2, [r4, #0]
   13022:	001a      	movs	r2, r3
   13024:	f000 f902 	bl	1322c <_write>
   13028:	1c43      	adds	r3, r0, #1
   1302a:	d103      	bne.n	13034 <_write_r+0x20>
   1302c:	6823      	ldr	r3, [r4, #0]
   1302e:	2b00      	cmp	r3, #0
   13030:	d000      	beq.n	13034 <_write_r+0x20>
   13032:	602b      	str	r3, [r5, #0]
   13034:	bd70      	pop	{r4, r5, r6, pc}
   13036:	46c0      	nop			; (mov r8, r8)
   13038:	20000f84 	.word	0x20000f84

0001303c <_close_r>:
   1303c:	2300      	movs	r3, #0
   1303e:	b570      	push	{r4, r5, r6, lr}
   13040:	4c06      	ldr	r4, [pc, #24]	; (1305c <_close_r+0x20>)
   13042:	0005      	movs	r5, r0
   13044:	0008      	movs	r0, r1
   13046:	6023      	str	r3, [r4, #0]
   13048:	f000 f8aa 	bl	131a0 <_close>
   1304c:	1c43      	adds	r3, r0, #1
   1304e:	d103      	bne.n	13058 <_close_r+0x1c>
   13050:	6823      	ldr	r3, [r4, #0]
   13052:	2b00      	cmp	r3, #0
   13054:	d000      	beq.n	13058 <_close_r+0x1c>
   13056:	602b      	str	r3, [r5, #0]
   13058:	bd70      	pop	{r4, r5, r6, pc}
   1305a:	46c0      	nop			; (mov r8, r8)
   1305c:	20000f84 	.word	0x20000f84

00013060 <_fstat_r>:
   13060:	2300      	movs	r3, #0
   13062:	b570      	push	{r4, r5, r6, lr}
   13064:	4c06      	ldr	r4, [pc, #24]	; (13080 <_fstat_r+0x20>)
   13066:	0005      	movs	r5, r0
   13068:	0008      	movs	r0, r1
   1306a:	0011      	movs	r1, r2
   1306c:	6023      	str	r3, [r4, #0]
   1306e:	f000 f89f 	bl	131b0 <_fstat>
   13072:	1c43      	adds	r3, r0, #1
   13074:	d103      	bne.n	1307e <_fstat_r+0x1e>
   13076:	6823      	ldr	r3, [r4, #0]
   13078:	2b00      	cmp	r3, #0
   1307a:	d000      	beq.n	1307e <_fstat_r+0x1e>
   1307c:	602b      	str	r3, [r5, #0]
   1307e:	bd70      	pop	{r4, r5, r6, pc}
   13080:	20000f84 	.word	0x20000f84

00013084 <_isatty_r>:
   13084:	2300      	movs	r3, #0
   13086:	b570      	push	{r4, r5, r6, lr}
   13088:	4c06      	ldr	r4, [pc, #24]	; (130a4 <_isatty_r+0x20>)
   1308a:	0005      	movs	r5, r0
   1308c:	0008      	movs	r0, r1
   1308e:	6023      	str	r3, [r4, #0]
   13090:	f000 f89e 	bl	131d0 <_isatty>
   13094:	1c43      	adds	r3, r0, #1
   13096:	d103      	bne.n	130a0 <_isatty_r+0x1c>
   13098:	6823      	ldr	r3, [r4, #0]
   1309a:	2b00      	cmp	r3, #0
   1309c:	d000      	beq.n	130a0 <_isatty_r+0x1c>
   1309e:	602b      	str	r3, [r5, #0]
   130a0:	bd70      	pop	{r4, r5, r6, pc}
   130a2:	46c0      	nop			; (mov r8, r8)
   130a4:	20000f84 	.word	0x20000f84

000130a8 <_lseek_r>:
   130a8:	b570      	push	{r4, r5, r6, lr}
   130aa:	0005      	movs	r5, r0
   130ac:	0008      	movs	r0, r1
   130ae:	0011      	movs	r1, r2
   130b0:	2200      	movs	r2, #0
   130b2:	4c06      	ldr	r4, [pc, #24]	; (130cc <_lseek_r+0x24>)
   130b4:	6022      	str	r2, [r4, #0]
   130b6:	001a      	movs	r2, r3
   130b8:	f000 f89a 	bl	131f0 <_lseek>
   130bc:	1c43      	adds	r3, r0, #1
   130be:	d103      	bne.n	130c8 <_lseek_r+0x20>
   130c0:	6823      	ldr	r3, [r4, #0]
   130c2:	2b00      	cmp	r3, #0
   130c4:	d000      	beq.n	130c8 <_lseek_r+0x20>
   130c6:	602b      	str	r3, [r5, #0]
   130c8:	bd70      	pop	{r4, r5, r6, pc}
   130ca:	46c0      	nop			; (mov r8, r8)
   130cc:	20000f84 	.word	0x20000f84

000130d0 <_malloc_usable_size_r>:
   130d0:	1f0b      	subs	r3, r1, #4
   130d2:	681b      	ldr	r3, [r3, #0]
   130d4:	1f18      	subs	r0, r3, #4
   130d6:	2b00      	cmp	r3, #0
   130d8:	da01      	bge.n	130de <_malloc_usable_size_r+0xe>
   130da:	580b      	ldr	r3, [r1, r0]
   130dc:	18c0      	adds	r0, r0, r3
   130de:	4770      	bx	lr

000130e0 <_read_r>:
   130e0:	b570      	push	{r4, r5, r6, lr}
   130e2:	0005      	movs	r5, r0
   130e4:	0008      	movs	r0, r1
   130e6:	0011      	movs	r1, r2
   130e8:	2200      	movs	r2, #0
   130ea:	4c06      	ldr	r4, [pc, #24]	; (13104 <_read_r+0x24>)
   130ec:	6022      	str	r2, [r4, #0]
   130ee:	001a      	movs	r2, r3
   130f0:	f000 f886 	bl	13200 <_read>
   130f4:	1c43      	adds	r3, r0, #1
   130f6:	d103      	bne.n	13100 <_read_r+0x20>
   130f8:	6823      	ldr	r3, [r4, #0]
   130fa:	2b00      	cmp	r3, #0
   130fc:	d000      	beq.n	13100 <_read_r+0x20>
   130fe:	602b      	str	r3, [r5, #0]
   13100:	bd70      	pop	{r4, r5, r6, pc}
   13102:	46c0      	nop			; (mov r8, r8)
   13104:	20000f84 	.word	0x20000f84

00013108 <__gnu_thumb1_case_uqi>:
   13108:	b402      	push	{r1}
   1310a:	4671      	mov	r1, lr
   1310c:	0849      	lsrs	r1, r1, #1
   1310e:	0049      	lsls	r1, r1, #1
   13110:	5c09      	ldrb	r1, [r1, r0]
   13112:	0049      	lsls	r1, r1, #1
   13114:	448e      	add	lr, r1
   13116:	bc02      	pop	{r1}
   13118:	4770      	bx	lr
   1311a:	46c0      	nop			; (mov r8, r8)

0001311c <__aeabi_i2d>:
   1311c:	b570      	push	{r4, r5, r6, lr}
   1311e:	2800      	cmp	r0, #0
   13120:	d030      	beq.n	13184 <__aeabi_i2d+0x68>
   13122:	17c3      	asrs	r3, r0, #31
   13124:	18c4      	adds	r4, r0, r3
   13126:	405c      	eors	r4, r3
   13128:	0fc5      	lsrs	r5, r0, #31
   1312a:	0020      	movs	r0, r4
   1312c:	f7fd faf8 	bl	10720 <__clzsi2>
   13130:	4b17      	ldr	r3, [pc, #92]	; (13190 <__aeabi_i2d+0x74>)
   13132:	4a18      	ldr	r2, [pc, #96]	; (13194 <__aeabi_i2d+0x78>)
   13134:	1a1b      	subs	r3, r3, r0
   13136:	1ad2      	subs	r2, r2, r3
   13138:	2a1f      	cmp	r2, #31
   1313a:	dd18      	ble.n	1316e <__aeabi_i2d+0x52>
   1313c:	4a16      	ldr	r2, [pc, #88]	; (13198 <__aeabi_i2d+0x7c>)
   1313e:	1ad2      	subs	r2, r2, r3
   13140:	4094      	lsls	r4, r2
   13142:	2200      	movs	r2, #0
   13144:	0324      	lsls	r4, r4, #12
   13146:	055b      	lsls	r3, r3, #21
   13148:	0b24      	lsrs	r4, r4, #12
   1314a:	0d5b      	lsrs	r3, r3, #21
   1314c:	2100      	movs	r1, #0
   1314e:	0010      	movs	r0, r2
   13150:	0324      	lsls	r4, r4, #12
   13152:	0d0a      	lsrs	r2, r1, #20
   13154:	0b24      	lsrs	r4, r4, #12
   13156:	0512      	lsls	r2, r2, #20
   13158:	4322      	orrs	r2, r4
   1315a:	4c10      	ldr	r4, [pc, #64]	; (1319c <__aeabi_i2d+0x80>)
   1315c:	051b      	lsls	r3, r3, #20
   1315e:	4022      	ands	r2, r4
   13160:	4313      	orrs	r3, r2
   13162:	005b      	lsls	r3, r3, #1
   13164:	07ed      	lsls	r5, r5, #31
   13166:	085b      	lsrs	r3, r3, #1
   13168:	432b      	orrs	r3, r5
   1316a:	0019      	movs	r1, r3
   1316c:	bd70      	pop	{r4, r5, r6, pc}
   1316e:	0021      	movs	r1, r4
   13170:	4091      	lsls	r1, r2
   13172:	000a      	movs	r2, r1
   13174:	210b      	movs	r1, #11
   13176:	1a08      	subs	r0, r1, r0
   13178:	40c4      	lsrs	r4, r0
   1317a:	055b      	lsls	r3, r3, #21
   1317c:	0324      	lsls	r4, r4, #12
   1317e:	0b24      	lsrs	r4, r4, #12
   13180:	0d5b      	lsrs	r3, r3, #21
   13182:	e7e3      	b.n	1314c <__aeabi_i2d+0x30>
   13184:	2500      	movs	r5, #0
   13186:	2300      	movs	r3, #0
   13188:	2400      	movs	r4, #0
   1318a:	2200      	movs	r2, #0
   1318c:	e7de      	b.n	1314c <__aeabi_i2d+0x30>
   1318e:	46c0      	nop			; (mov r8, r8)
   13190:	0000041e 	.word	0x0000041e
   13194:	00000433 	.word	0x00000433
   13198:	00000413 	.word	0x00000413
   1319c:	800fffff 	.word	0x800fffff

000131a0 <_close>:
   131a0:	2258      	movs	r2, #88	; 0x58
   131a2:	2001      	movs	r0, #1
   131a4:	4b01      	ldr	r3, [pc, #4]	; (131ac <_close+0xc>)
   131a6:	4240      	negs	r0, r0
   131a8:	601a      	str	r2, [r3, #0]
   131aa:	4770      	bx	lr
   131ac:	20000f84 	.word	0x20000f84

000131b0 <_fstat>:
   131b0:	2258      	movs	r2, #88	; 0x58
   131b2:	2001      	movs	r0, #1
   131b4:	4b01      	ldr	r3, [pc, #4]	; (131bc <_fstat+0xc>)
   131b6:	4240      	negs	r0, r0
   131b8:	601a      	str	r2, [r3, #0]
   131ba:	4770      	bx	lr
   131bc:	20000f84 	.word	0x20000f84

000131c0 <_getpid>:
   131c0:	2258      	movs	r2, #88	; 0x58
   131c2:	2001      	movs	r0, #1
   131c4:	4b01      	ldr	r3, [pc, #4]	; (131cc <_getpid+0xc>)
   131c6:	4240      	negs	r0, r0
   131c8:	601a      	str	r2, [r3, #0]
   131ca:	4770      	bx	lr
   131cc:	20000f84 	.word	0x20000f84

000131d0 <_isatty>:
   131d0:	2258      	movs	r2, #88	; 0x58
   131d2:	4b02      	ldr	r3, [pc, #8]	; (131dc <_isatty+0xc>)
   131d4:	2000      	movs	r0, #0
   131d6:	601a      	str	r2, [r3, #0]
   131d8:	4770      	bx	lr
   131da:	46c0      	nop			; (mov r8, r8)
   131dc:	20000f84 	.word	0x20000f84

000131e0 <_kill>:
   131e0:	2258      	movs	r2, #88	; 0x58
   131e2:	2001      	movs	r0, #1
   131e4:	4b01      	ldr	r3, [pc, #4]	; (131ec <_kill+0xc>)
   131e6:	4240      	negs	r0, r0
   131e8:	601a      	str	r2, [r3, #0]
   131ea:	4770      	bx	lr
   131ec:	20000f84 	.word	0x20000f84

000131f0 <_lseek>:
   131f0:	2258      	movs	r2, #88	; 0x58
   131f2:	2001      	movs	r0, #1
   131f4:	4b01      	ldr	r3, [pc, #4]	; (131fc <_lseek+0xc>)
   131f6:	4240      	negs	r0, r0
   131f8:	601a      	str	r2, [r3, #0]
   131fa:	4770      	bx	lr
   131fc:	20000f84 	.word	0x20000f84

00013200 <_read>:
   13200:	2258      	movs	r2, #88	; 0x58
   13202:	2001      	movs	r0, #1
   13204:	4b01      	ldr	r3, [pc, #4]	; (1320c <_read+0xc>)
   13206:	4240      	negs	r0, r0
   13208:	601a      	str	r2, [r3, #0]
   1320a:	4770      	bx	lr
   1320c:	20000f84 	.word	0x20000f84

00013210 <_sbrk>:
   13210:	4a04      	ldr	r2, [pc, #16]	; (13224 <_sbrk+0x14>)
   13212:	6813      	ldr	r3, [r2, #0]
   13214:	2b00      	cmp	r3, #0
   13216:	d003      	beq.n	13220 <_sbrk+0x10>
   13218:	1818      	adds	r0, r3, r0
   1321a:	6010      	str	r0, [r2, #0]
   1321c:	0018      	movs	r0, r3
   1321e:	4770      	bx	lr
   13220:	4b01      	ldr	r3, [pc, #4]	; (13228 <_sbrk+0x18>)
   13222:	e7f9      	b.n	13218 <_sbrk+0x8>
   13224:	20000f80 	.word	0x20000f80
   13228:	20000f88 	.word	0x20000f88

0001322c <_write>:
   1322c:	2258      	movs	r2, #88	; 0x58
   1322e:	2001      	movs	r0, #1
   13230:	4b01      	ldr	r3, [pc, #4]	; (13238 <_write+0xc>)
   13232:	4240      	negs	r0, r0
   13234:	601a      	str	r2, [r3, #0]
   13236:	4770      	bx	lr
   13238:	20000f84 	.word	0x20000f84

0001323c <_exit>:
   1323c:	e7fe      	b.n	1323c <_exit>
   1323e:	46c0      	nop			; (mov r8, r8)

00013240 <_init>:
   13240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13242:	46c0      	nop			; (mov r8, r8)
   13244:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13246:	bc08      	pop	{r3}
   13248:	469e      	mov	lr, r3
   1324a:	4770      	bx	lr

0001324c <_fini>:
   1324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1324e:	46c0      	nop			; (mov r8, r8)
   13250:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13252:	bc08      	pop	{r3}
   13254:	469e      	mov	lr, r3
   13256:	4770      	bx	lr
   13258:	64616f4c 	.word	0x64616f4c
   1325c:	20676e69 	.word	0x20676e69
   13260:	67616d69 	.word	0x67616d69
   13264:	00272065 	.word	0x00272065
   13268:	656c6946 	.word	0x656c6946
   1326c:	616d2820 	.word	0x616d2820
   13270:	29656279 	.word	0x29656279
   13274:	746f6e20 	.word	0x746f6e20
   13278:	756f6620 	.word	0x756f6620
   1327c:	0000646e 	.word	0x0000646e
   13280:	72617453 	.word	0x72617453
   13284:	61702074 	.word	0x61702074
   13288:	00657372 	.word	0x00657372
   1328c:	656c6946 	.word	0x656c6946
   13290:	7a697320 	.word	0x7a697320
   13294:	00203a65 	.word	0x00203a65
   13298:	67616d49 	.word	0x67616d49
   1329c:	664f2065 	.word	0x664f2065
   132a0:	74657366 	.word	0x74657366
   132a4:	0000203a 	.word	0x0000203a
   132a8:	64616548 	.word	0x64616548
   132ac:	73207265 	.word	0x73207265
   132b0:	3a657a69 	.word	0x3a657a69
   132b4:	00000020 	.word	0x00000020
   132b8:	20746942 	.word	0x20746942
   132bc:	74706544 	.word	0x74706544
   132c0:	00203a68 	.word	0x00203a68
   132c4:	67616d49 	.word	0x67616d49
   132c8:	69732065 	.word	0x69732065
   132cc:	203a657a 	.word	0x203a657a
   132d0:	00000000 	.word	0x00000000
   132d4:	64616f4c 	.word	0x64616f4c
   132d8:	69206465 	.word	0x69206465
   132dc:	0000206e 	.word	0x0000206e
   132e0:	00736d20 	.word	0x00736d20
   132e4:	20504d42 	.word	0x20504d42
   132e8:	6d726f66 	.word	0x6d726f66
   132ec:	6e207461 	.word	0x6e207461
   132f0:	7220746f 	.word	0x7220746f
   132f4:	676f6365 	.word	0x676f6365
   132f8:	657a696e 	.word	0x657a696e
   132fc:	726f2064 	.word	0x726f2064
   13300:	20445320 	.word	0x20445320
   13304:	20746f6e 	.word	0x20746f6e
   13308:	6e756f6d 	.word	0x6e756f6d
   1330c:	00646574 	.word	0x00646574
   13310:	4d646461 	.word	0x4d646461
   13314:	2c65766f 	.word	0x2c65766f
   13318:	616c7020 	.word	0x616c7020
   1331c:	20726579 	.word	0x20726579
   13320:	0000203d 	.word	0x0000203d
   13324:	73696874 	.word	0x73696874
   13328:	67696d20 	.word	0x67696d20
   1332c:	62207468 	.word	0x62207468
   13330:	20612065 	.word	0x20612065
   13334:	736f7263 	.word	0x736f7263
   13338:	00000073 	.word	0x00000073
   1333c:	73696874 	.word	0x73696874
   13340:	67696d20 	.word	0x67696d20
   13344:	62207468 	.word	0x62207468
   13348:	20612065 	.word	0x20612065
   1334c:	67756f6e 	.word	0x67756f6e
   13350:	00007468 	.word	0x00007468
   13354:	6e6e6977 	.word	0x6e6e6977
   13358:	3d207265 	.word	0x3d207265
   1335c:	00000020 	.word	0x00000020
   13360:	6f727245 	.word	0x6f727245
   13364:	00000072 	.word	0x00000072
   13368:	0000ffff 	.word	0x0000ffff
   1336c:	ffffffff 	.word	0xffffffff
   13370:	ffffffff 	.word	0xffffffff
   13374:	000000ff 	.word	0x000000ff
   13378:	6b6f7242 	.word	0x6b6f7242
   1337c:	68772065 	.word	0x68772065
   13380:	20656c69 	.word	0x20656c69
   13384:	706f6f6c 	.word	0x706f6f6c
   13388:	00000000 	.word	0x00000000
   1338c:	6c756f43 	.word	0x6c756f43
   13390:	74276e64 	.word	0x74276e64
   13394:	61747320 	.word	0x61747320
   13398:	46207472 	.word	0x46207472
   1339c:	30323654 	.word	0x30323654
   133a0:	6f742036 	.word	0x6f742036
   133a4:	73686375 	.word	0x73686375
   133a8:	65657263 	.word	0x65657263
   133ac:	6f63206e 	.word	0x6f63206e
   133b0:	6f72746e 	.word	0x6f72746e
   133b4:	72656c6c 	.word	0x72656c6c
   133b8:	00000000 	.word	0x00000000
   133bc:	76697244 	.word	0x76697244
   133c0:	6d207265 	.word	0x6d207265
   133c4:	74686769 	.word	0x74686769
   133c8:	746f6e20 	.word	0x746f6e20
   133cc:	76616820 	.word	0x76616820
   133d0:	65622065 	.word	0x65622065
   133d4:	66206e65 	.word	0x66206e65
   133d8:	646e756f 	.word	0x646e756f
   133dc:	00000000 	.word	0x00000000
   133e0:	6c696146 	.word	0x6c696146
   133e4:	74206465 	.word	0x74206465
   133e8:	6e69206f 	.word	0x6e69206f
   133ec:	61697469 	.word	0x61697469
   133f0:	6573696c 	.word	0x6573696c
   133f4:	20445320 	.word	0x20445320
   133f8:	64726163 	.word	0x64726163
   133fc:	00000000 	.word	0x00000000
   13400:	00000a0d 	.word	0x00000a0d
   13404:	006e616e 	.word	0x006e616e
   13408:	00666e69 	.word	0x00666e69
   1340c:	0066766f 	.word	0x0066766f

00013410 <_ZTV5Print>:
	...
   13418:	0000d547 00002f8f 00002f6d 00002f7f     G..../..m/.../..

00013428 <_ZTV4Uart>:
	...
   13430:	00003c45 00002f8f 00003bb9 00003a87     E<.../...;...:..
   13440:	00003b9d 00003bf1 00003bd5 00003f95     .;...;...;...?..
   13450:	00003fb9 00003885 000038ad 00003a59     .?...8...8..Y:..
   13460:	00003799                                .7..

00013464 <_ZTV14HardwareSerial>:
	...
   1346c:	0000d547 00002f8f 00002f6d 0000d547     G..../..m/..G...
   1347c:	0000d547 0000d547 0000d547 00000000     G...G...G.......
   1348c:	00000000 000036e3 000036f5 0000370b     .....6...6...7..
   1349c:	0000d547                                G...

000134a0 <_ZTV6Stream>:
	...
   134a8:	0000d547 00002f8f 00002f6d 00002f7f     G..../..m/.../..
   134b8:	0000d547 0000d547 0000d547              G...G...G...

000134c4 <_ZL15STRING_LANGUAGE>:
   134c4:	04090304                                ....

000134c8 <_ZL14STRING_PRODUCT>:
   134c8:	75647241 206f6e69 5020304d 00006f72     Arduino M0 Pro..

000134d8 <_ZL19STRING_MANUFACTURER>:
   134d8:	75647241 206f6e69 00434c4c              Arduino LLC.

000134e4 <_ZL21USB_DeviceDescriptorB>:
   134e4:	02000112 400102ef 804f2a03 02010100     .......@.*O.....
   134f4:	00000103                                ....

000134f8 <_ZL20USB_DeviceDescriptor>:
   134f8:	02000112 40000000 804f2a03 02010100     .......@.*O.....
   13508:	00000103 0000612e 0000618a 000062c0     .....a...a...b..
   13518:	000061d8 000062c0 0000621c 00006230     .a...b...b..0b..
   13528:	00006240 00006244 00006254 00006298     @b..Db..Tb...b..
   13538:	000062a8                                .b..

0001353c <_ZTV26DoubleBufferedEPOutHandler>:
	...
   13544:	00004e09 00004bdd 00004f91              .N...K...O..

00013550 <_ZTV9EPHandler>:
	...
   13558:	0000d547 0000d547 0000d547 00006886     G...G...G....h..
   13568:	0000681c 00006838 00006854 0000686a     .h..8h..Th..jh..
   13578:	0000681c 00006e6e 00006c78 00006c78     .h..nn..xl..xl..
   13588:	00006c78 00006c78 00006c78 00006c78     xl..xl..xl..xl..
   13598:	00006c78 00006c78 00006c34 00006c34     xl..xl..4l..4l..
   135a8:	00006c34 00006c34                       4l..4l..

000135b0 <_ZTV16Adafruit_ILI9341>:
	...
   135b8:	0000d22d 00002f8f 00002f6d 00002f7f     -..../..m/.../..
   135c8:	000085e5 00007fad 0000831d 000083ad     ................
   135d8:	0000852f 00008589 0000c38d 00007ffd     /...............
   135e8:	00007de5 00007eaf 0000864f 000086c3     .}...~..O.......
   135f8:	00008737 0000c947 0000c983 0000cb3b     7...G.......;...

00013608 <_ZTVN5SDLib4FileE>:
	...
   13610:	00008951 00008979 00002f6d 00008acd     Q...y...m/......
   13620:	00008a89 00008a29 000089e7 0000002f     ....)......./...
   13630:	0000987e 0000989c 000098ba 000098d8     ~...............
   13640:	000098f6 00009914 5e3e3c7c 2f3f3d2b     ........|<>^+=?/
   13650:	2c3b5d5b 005c222a                       [];,*"\.

00013658 <_ZTV6SdFile>:
	...
   13660:	0000af15 00002f8f 00002f6d 00002f7f     ...../..m/.../..
   13670:	65735f70 6d6f6372 203d2120 4c4c554e     p_sercom != NULL
   13680:	00000000 732f2e2e 6c2f6372 61726269     ....../src/libra
   13690:	73656972 6970732f 4950532f 7070632e     ries/spi/SPI.cpp
   136a0:	00000000                                ....

000136a4 <_ZZN8SPIClassC4EP6SERCOMhhh14SercomSpiTXPad11SercomRXPadE19__PRETTY_FUNCTION__>:
   136a4:	43495053 7373616c 50533a3a 616c4349     SPIClass::SPICla
   136b4:	53287373 4f435245 202c2a4d 746e6975     ss(SERCOM*, uint
   136c4:	2c745f38 6e697520 745f3874 6975202c     8_t, uint8_t, ui
   136d4:	5f38746e 53202c74 6f637265 6970536d     nt8_t, SercomSpi
   136e4:	61505854 53202c64 6f637265 5058526d     TXPad, SercomRXP
   136f4:	00296461                                ad).

000136f8 <_ZTV7TwoWire>:
	...
   13700:	0000bcb5 0000bd0d 00002f6d 0000bdaf     ........m/......
   13710:	0000bd5b 0000bd77 0000bd93              [...w.......

0001371c <g_APinDescription>:
   1371c:	00000000 0000000b 00000002 00000004     ................
   1372c:	ffff00ff 000bffff 00000000 0000000a     ................
   1373c:	00000002 00000004 ffff00ff 000affff     ................
   1374c:	00000000 00000008 00000004 0000001c     ................
   1375c:	000000ff 00ff0000 00000000 00000009     ................
   1376c:	00000004 0000001c 000100ff 00090001     ................
   1377c:	00000000 0000000e 00000004 0000001c     ................
   1378c:	030000ff 000e0300 00000000 0000000f     ................
   1379c:	00000004 0000001c 030100ff 000f0301     ................
   137ac:	00000000 00000014 00000005 0000001c     ................
   137bc:	000200ff 00040002 00000000 00000015     ................
   137cc:	00000005 0000001c 000300ff 00050003     ................
   137dc:	00000000 00000006 00000004 0000001c     ................
   137ec:	010000ff 00060100 00000000 00000007     ................
   137fc:	00000004 0000001c 010100ff 00070101     ................
   1380c:	00000000 00000012 00000004 0000001c     ................
   1381c:	030000ff 00020300 00000000 00000010     ................
   1382c:	00000004 0000001c 020000ff 00000200     ................
   1383c:	00000000 00000013 00000004 0000001c     ................
   1384c:	030100ff 00030301 00000000 00000011     ................
   1385c:	00000004 0000000c 020100ff 0001ffff     ................
   1386c:	000000ff 00000000 000000ff 00000000     ................
   1387c:	ffff00ff 00ffffff 00000000 00000003     ................
   1388c:	00000001 00000002 ffff00ff 00ffffff     ................
   1389c:	00000000 00000016 00000002 00000004     ................
   138ac:	ffff00ff 0006ffff 00000000 00000017     ................
   138bc:	00000002 00000004 ffff00ff 0007ffff     ................
   138cc:	00000000 0000000c 00000003 00000004     ................
   138dc:	ffff00ff 000cffff 000000ff 00000000     ................
   138ec:	000000ff 00000000 ffff00ff 00ffffff     ................
   138fc:	00000001 0000000b 00000003 00000004     ................
   1390c:	ffff00ff 000bffff 00000001 0000000a     ................
   1391c:	00000003 00000004 ffff00ff 000affff     ................
   1392c:	000000ff 00000000 000000ff 00000000     ................
   1393c:	ffff00ff 00ffffff 000000ff 00000000     ................
   1394c:	000000ff 00000000 ffff00ff 00ffffff     ................
   1395c:	00000000 00000002 00000001 00000002     ................
   1396c:	ffff0000 0002ffff 00000001 00000008     ................
   1397c:	00000001 00000002 ffff0002 0008ffff     ................
   1398c:	00000001 00000009 00000001 00000002     ................
   1399c:	ffff0003 0009ffff 00000000 00000004     ................
   139ac:	00000001 00000002 ffff0004 0004ffff     ................
   139bc:	00000000 00000005 00000001 00000002     ................
   139cc:	ffff0005 0005ffff 00000001 00000002     ................
   139dc:	00000001 00000002 ffff000a 0002ffff     ................
   139ec:	00000001 00000003 0000000b 00000004     ................
   139fc:	ffff00ff 00ffffff 00000000 0000001b     ................
   13a0c:	0000000b 00000004 ffff00ff 00ffffff     ................
   13a1c:	00000000 0000001c 00000006 00000000     ................
   13a2c:	ffff00ff 00ffffff 00000000 00000018     ................
   13a3c:	00000006 00000000 ffff00ff 00ffffff     ................
   13a4c:	00000000 00000019 00000006 00000000     ................
   13a5c:	ffff00ff 00ffffff 00000001 00000016     ................
   13a6c:	00000003 00000000 ffff00ff 00ffffff     ................
   13a7c:	00000001 00000017 00000003 00000000     ................
   13a8c:	ffff00ff 00ffffff 00000000 00000016     ................
   13a9c:	00000002 00000000 ffff00ff 00ffffff     ................
   13aac:	00000000 00000017 00000002 00000000     ................
   13abc:	ffff00ff 00ffffff 00000000 00000013     ................
   13acc:	00000002 00000000 ffff00ff 00ffffff     ................
   13adc:	00000000 00000010 00000002 00000000     ................
   13aec:	ffff00ff 00ffffff 00000000 00000012     ................
   13afc:	00000002 00000000 ffff00ff 00ffffff     ................
   13b0c:	00000000 00000011 00000002 00000000     ................
   13b1c:	ffff00ff 00ffffff 00000000 0000000d     ................
   13b2c:	00000004 0000000c 000100ff 000dffff     ................
   13b3c:	00000000 00000015 00000005 0000000c     ................
   13b4c:	000300ff 00ffffff 00000000 00000006     ................
   13b5c:	00000004 0000000c 010000ff 00ffffff     ................
   13b6c:	00000000 00000007 00000004 0000000c     ................
   13b7c:	010100ff 00ffffff 00000000 00000002     ................
   13b8c:	00000001 00000002 ffff0014 0002ffff     ................

00013b9c <_ZL4font>:
   13b9c:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   13bac:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   13bbc:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   13bcc:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   13bdc:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   13bec:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   13bfc:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   13c0c:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   13c1c:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   13c2c:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   13c3c:	00000000 5f000000 07000000 14000700     ......._........
   13c4c:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   13c5c:	00502056 00030708 41221c00 22410000     V P......."A..A"
   13c6c:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   13c7c:	08080800 00000808 20006060 02040810     ........``. ....
   13c8c:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   13c9c:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   13cac:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   13cbc:	00001e29 00000014 00003440 22140800     ).......@4....."
   13ccc:	14141441 41001414 02081422 06095901     A......A"....Y..
   13cdc:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   13cec:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   13cfc:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   13d0c:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   13d1c:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   13d2c:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   13d3c:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   13d4c:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   13d5c:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   13d6c:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   13d7c:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   13d8c:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   13d9c:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   13dac:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   13dbc:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   13dcc:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   13ddc:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   13dec:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   13dfc:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   13e0c:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   13e1c:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   13e2c:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   13e3c:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   13e4c:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   13e5c:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   13e6c:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   13e7c:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   13e8c:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   13e9c:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   13eac:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   13ebc:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   13ecc:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   13edc:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   13eec:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   13efc:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   13f0c:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   13f1c:	00ff0000 ff101010 14141400 101000ff     ................
   13f2c:	10ff00ff f010f010 fc141414 f7141400     ................
   13f3c:	0000ff00 14ff00ff fc04f414 10171414     ................
   13f4c:	1f10101f 14141f10 10001f14 00f01010     ................
   13f5c:	1f000000 10101010 1010101f 0010f010     ................
   13f6c:	10ff0000 10101010 10101010 000010ff     ................
   13f7c:	0014ff00 ff00ff00 101f0000 fc000017     ................
   13f8c:	1414f404 14171017 f404f414 00ff0000     ................
   13f9c:	141414f7 14141414 14f700f7 14171414     ................
   13fac:	101f1010 1414141f 101014f4 00f010f0     ................
   13fbc:	1f101f00 1f000000 00000014 000014fc     ................
   13fcc:	10f010f0 ff10ff10 ff141414 10101014     ................
   13fdc:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   13fec:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   13ffc:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   1400c:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   1401c:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   1402c:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   1403c:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   1404c:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   1405c:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   1406c:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   1407c:	00000018 30001010 0101ff40 01011f00     .......0@.......
   1408c:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

0001409c <_ZTV12Adafruit_GFX>:
	...
   140a4:	0000d22d 00002f8f 00002f6d 00002f7f     -..../..m/.../..
   140b4:	0000d547 0000c5e7 0000c5f7 0000c6f5     G...............
   140c4:	0000c645 0000c69d 0000c38d 0000c763     E...........c...
   140d4:	0000d49b 0000d531 0000c773 0000c801     ....1...s.......
   140e4:	0000c893 0000c947 0000c983 0000cb3b     ....G.......;...

000140f4 <_ZTV7Serial_>:
	...
   140fc:	0000e6f5 0000e6b9 0000e613 0000e69d     ................
   1410c:	0000e5f5 0000e661 0000e625 0000f46c     ....a...%...l...
   1411c:	0000f44e 0000f408 0000f326 0000f408     N.......&.......
   1412c:	0000f440 0000f408 0000f326 0000f44e     @.......&...N...
   1413c:	0000f44e 0000f440 0000f326 0000f31e     N...@...&.......
   1414c:	0000f31e 0000f31e 0000f684 0000fccc     ................
   1415c:	0000fb8c 0000fb8c 0000fb88 0000fca4     ................
   1416c:	0000fca4 0000fc96 0000fb88 0000fca4     ................
   1417c:	0000fc96 0000fca4 0000fb88 0000fcac     ................
   1418c:	0000fcac 0000fcac 0000feb0 7566202c     ............, fu
   1419c:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
   141ac:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
   141bc:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
   141cc:	73256425 000a7325                       %d%s%s..

000141d4 <_global_impure_ptr>:
   141d4:	200000a8 4f500043 00584953 2d23002e     ... C.POSIX...#-
   141e4:	00202b30 004c6c68 45676665 49004746     0+ .hlL.efgEFG.I
   141f4:	6900464e 4e00666e 6e004e41 30006e61     NF.inf.NAN.nan.0
   14204:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   14214:	31300046 35343332 39383736 64636261     F.0123456789abcd
   14224:	00006665                                         ef.

00014227 <_ctype_>:
   14227:	20202000 20202020 28282020 20282828     .         ((((( 
   14237:	20202020 20202020 20202020 20202020                     
   14247:	10108820 10101010 10101010 10101010      ...............
   14257:	04040410 04040404 10040404 10101010     ................
   14267:	41411010 41414141 01010101 01010101     ..AAAAAA........
   14277:	01010101 01010101 01010101 10101010     ................
   14287:	42421010 42424242 02020202 02020202     ..BBBBBB........
   14297:	02020202 02020202 02020202 10101010     ................
   142a7:	00000020 00000000 00000000 00000000      ...............
	...
   14327:	666e4900 74696e69 614e0079 0000004e     .Infinity.NaN...
	...

00014338 <__sf_fake_stderr>:
	...

00014358 <__sf_fake_stdin>:
	...

00014378 <__sf_fake_stdout>:
	...

00014398 <__mprec_bigtens>:
   14398:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   143a8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   143b8:	7f73bf3c 75154fdd                       <.s..O.u

000143c0 <__mprec_tens>:
   143c0:	00000000 3ff00000 00000000 40240000     .......?......$@
   143d0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   143e0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   143f0:	00000000 412e8480 00000000 416312d0     .......A......cA
   14400:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   14410:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   14420:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   14430:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   14440:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   14450:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   14460:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   14470:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   14480:	79d99db4 44ea7843                       ...yCx.D

00014488 <p05.6047>:
   14488:	00000005 00000019 0000007d              ........}...

00014494 <__EH_FRAME_BEGIN__>:
   14494:	00000000                                ....

Disassembly of section .ramfunc:

00014498 <banzai>:
static void banzai() {
   14498:	b580      	push	{r7, lr}
   1449a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
   1449c:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
   1449e:	4b17      	ldr	r3, [pc, #92]	; (144fc <banzai+0x64>)
   144a0:	3304      	adds	r3, #4
   144a2:	4a17      	ldr	r2, [pc, #92]	; (14500 <banzai+0x68>)
   144a4:	4293      	cmp	r3, r2
   144a6:	d925      	bls.n	144f4 <banzai+0x5c>
	while (!nvmReady())
   144a8:	f7ee ff70 	bl	338c <nvmReady>
   144ac:	0003      	movs	r3, r0
   144ae:	001a      	movs	r2, r3
   144b0:	2301      	movs	r3, #1
   144b2:	4053      	eors	r3, r2
   144b4:	b2db      	uxtb	r3, r3
   144b6:	2b00      	cmp	r3, #0
   144b8:	d000      	beq.n	144bc <banzai+0x24>
   144ba:	e7f5      	b.n	144a8 <banzai+0x10>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   144bc:	4911      	ldr	r1, [pc, #68]	; (14504 <banzai+0x6c>)
   144be:	4b11      	ldr	r3, [pc, #68]	; (14504 <banzai+0x6c>)
   144c0:	8b1b      	ldrh	r3, [r3, #24]
   144c2:	b29b      	uxth	r3, r3
   144c4:	2220      	movs	r2, #32
   144c6:	32ff      	adds	r2, #255	; 0xff
   144c8:	4313      	orrs	r3, r2
   144ca:	b29b      	uxth	r3, r3
   144cc:	830b      	strh	r3, [r1, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
   144ce:	4b0d      	ldr	r3, [pc, #52]	; (14504 <banzai+0x6c>)
   144d0:	4a0a      	ldr	r2, [pc, #40]	; (144fc <banzai+0x64>)
   144d2:	3204      	adds	r2, #4
   144d4:	0892      	lsrs	r2, r2, #2
   144d6:	0052      	lsls	r2, r2, #1
   144d8:	61da      	str	r2, [r3, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
   144da:	4b0a      	ldr	r3, [pc, #40]	; (14504 <banzai+0x6c>)
   144dc:	4a0a      	ldr	r2, [pc, #40]	; (14508 <banzai+0x70>)
   144de:	801a      	strh	r2, [r3, #0]
	while (!nvmReady())
   144e0:	f7ee ff54 	bl	338c <nvmReady>
   144e4:	0003      	movs	r3, r0
   144e6:	001a      	movs	r2, r3
   144e8:	2301      	movs	r3, #1
   144ea:	4053      	eors	r3, r2
   144ec:	b2db      	uxtb	r3, r3
   144ee:	2b00      	cmp	r3, #0
   144f0:	d001      	beq.n	144f6 <banzai+0x5e>
   144f2:	e7f5      	b.n	144e0 <banzai+0x48>
		goto reset;
   144f4:	46c0      	nop			; (mov r8, r8)
	NVIC_SystemReset() ;
   144f6:	f7ee ff39 	bl	336c <NVIC_SystemReset>
	while (true);
   144fa:	e7fe      	b.n	144fa <banzai+0x62>
   144fc:	00000000 	.word	0x00000000
   14500:	00000203 	.word	0x00000203
   14504:	41004000 	.word	0x41004000
   14508:	ffffa502 	.word	0xffffa502
